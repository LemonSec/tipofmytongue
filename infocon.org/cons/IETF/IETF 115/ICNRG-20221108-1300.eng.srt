1
00:00:04,860 --> 00:00:07,860
foreign

2
00:00:36,000 --> 00:00:38,719
all right

3
00:01:09,000 --> 00:01:11,119
okay

4
00:01:22,040 --> 00:01:26,220
all right let's slowly get started I see

5
00:01:26,220 --> 00:01:30,000
people on the back of the room maybe

6
00:01:30,000 --> 00:01:33,259
grab one of the chairs

7
00:01:37,079 --> 00:01:41,340
okay welcome to IC energy this is

8
00:01:41,340 --> 00:01:44,159
um this meeting is spending the globe I

9
00:01:44,159 --> 00:01:47,280
think so it's in UTC time zone I'm plus

10
00:01:47,280 --> 00:01:51,659
eight Davis minus six I think and uh I

11
00:01:51,659 --> 00:01:56,100
know that Mark is there from -9

12
00:01:56,100 --> 00:01:57,540
um if you have someone from Australia

13
00:01:57,540 --> 00:01:58,920
that would

14
00:01:58,920 --> 00:02:01,920
cover this completely

15
00:02:01,920 --> 00:02:05,420
um but I think it's gonna be fine

16
00:02:06,000 --> 00:02:07,200
okay

17
00:02:07,200 --> 00:02:08,399
um

18
00:02:08,399 --> 00:02:10,979
before we start the usual

19
00:02:10,979 --> 00:02:12,000
um

20
00:02:12,000 --> 00:02:15,660
housekeeping things so we're here in the

21
00:02:15,660 --> 00:02:18,540
internet research task force we follow

22
00:02:18,540 --> 00:02:23,160
the ietf IPR rules there's total rules

23
00:02:23,160 --> 00:02:25,920
so let us know if there's any IPR

24
00:02:25,920 --> 00:02:28,200
related contribution that you make or

25
00:02:28,200 --> 00:02:30,720
that you see or that you are aware of in

26
00:02:30,720 --> 00:02:33,200
this context

27
00:02:33,500 --> 00:02:35,940
and um okay

28
00:02:35,940 --> 00:02:38,760
um the most important thing here is

29
00:02:38,760 --> 00:02:41,760
um The Mask policy

30
00:02:41,760 --> 00:02:44,280
um it sounds a bit strange because we're

31
00:02:44,280 --> 00:02:45,959
not wearing masks but we are just by

32
00:02:45,959 --> 00:02:49,140
ourselves and so we just

33
00:02:49,140 --> 00:02:51,180
got reminded to

34
00:02:51,180 --> 00:02:52,140
um

35
00:02:52,140 --> 00:02:54,720
announce this again please keep your

36
00:02:54,720 --> 00:02:58,860
your ffp2 or n95 mask up

37
00:02:58,860 --> 00:02:59,959
um

38
00:02:59,959 --> 00:03:02,459
unless you're already speaking at the

39
00:03:02,459 --> 00:03:03,599
microphone and you cannot be heard

40
00:03:03,599 --> 00:03:05,959
otherwise

41
00:03:07,319 --> 00:03:08,819
okay

42
00:03:08,819 --> 00:03:13,019
um usual agenda hints and a quick

43
00:03:13,019 --> 00:03:15,000
reminder this is the internet research

44
00:03:15,000 --> 00:03:17,700
task force we are not doing internet

45
00:03:17,700 --> 00:03:19,260
standards here

46
00:03:19,260 --> 00:03:21,780
um we are doing research and um

47
00:03:21,780 --> 00:03:25,620
the RCs that we produce are typically of

48
00:03:25,620 --> 00:03:29,000
informational or experimental nature

49
00:03:29,000 --> 00:03:31,379
to enable

50
00:03:31,379 --> 00:03:34,680
future experiments and then generate

51
00:03:34,680 --> 00:03:37,620
some insights for the um like larger

52
00:03:37,620 --> 00:03:39,860
community

53
00:03:40,019 --> 00:03:41,640
okay

54
00:03:41,640 --> 00:03:42,780
um yeah

55
00:03:42,780 --> 00:03:44,879
um my question is David I'm I'm the

56
00:03:44,879 --> 00:03:46,379
Kucha and

57
00:03:46,379 --> 00:03:50,340
um before we move on we have to find a

58
00:03:50,340 --> 00:03:52,940
note taker

59
00:03:53,099 --> 00:03:56,459
and if you're new to this this is a

60
00:03:56,459 --> 00:03:58,440
fairly light

61
00:03:58,440 --> 00:04:01,019
um job so we are not capturing

62
00:04:01,019 --> 00:04:03,599
um all the presentations uh just did and

63
00:04:03,599 --> 00:04:05,580
just of the discussions

64
00:04:05,580 --> 00:04:08,400
and it is quite informal so it's just

65
00:04:08,400 --> 00:04:11,220
important that we kind of capture the

66
00:04:11,220 --> 00:04:13,739
technical content

67
00:04:13,739 --> 00:04:15,360
and

68
00:04:15,360 --> 00:04:17,519
yeah it's all the other groups we cannot

69
00:04:17,519 --> 00:04:20,840
move on without a notaker

70
00:04:32,639 --> 00:04:34,199
doesn't have to be someone in the room

71
00:04:34,199 --> 00:04:36,360
it can be somebody remote

72
00:04:36,360 --> 00:04:39,440
yeah of course yeah

73
00:04:40,259 --> 00:04:42,000
but it can't be one of the chairs since

74
00:04:42,000 --> 00:04:44,900
we have to run to me

75
00:04:46,080 --> 00:04:48,680
right

76
00:05:01,380 --> 00:05:03,600
so what you're thinking about it maybe

77
00:05:03,600 --> 00:05:05,759
just one other thing

78
00:05:05,759 --> 00:05:08,160
um please use the media Collide tool

79
00:05:08,160 --> 00:05:10,139
even if you are in the room

80
00:05:10,139 --> 00:05:12,300
um and to form like the queue management

81
00:05:12,300 --> 00:05:15,419
so that people can get your name it

82
00:05:15,419 --> 00:05:16,979
makes it much easier also I don't know

83
00:05:16,979 --> 00:05:18,240
taker

84
00:05:18,240 --> 00:05:19,380
foreign

85
00:05:19,380 --> 00:05:22,020
and it doesn't hurt to just say your

86
00:05:22,020 --> 00:05:24,479
name when you're making comments or

87
00:05:24,479 --> 00:05:26,719
questions

88
00:05:30,960 --> 00:05:33,560
okay

89
00:05:36,000 --> 00:05:38,280
Duke and then I do it if no one H

90
00:05:38,280 --> 00:05:39,840
volunteers

91
00:05:39,840 --> 00:05:43,080
thank you very much yes I got it thank

92
00:05:43,080 --> 00:05:45,680
you Matthias

93
00:05:47,400 --> 00:05:50,000
okay

94
00:05:51,060 --> 00:05:51,860
um

95
00:05:51,860 --> 00:05:55,320
that's great so um

96
00:05:55,320 --> 00:05:59,280
this is our agenda for today so um we

97
00:05:59,280 --> 00:06:00,720
are going to have um like two

98
00:06:00,720 --> 00:06:03,600
presentations on uh manifest container

99
00:06:03,600 --> 00:06:06,120
topics

100
00:06:06,120 --> 00:06:08,220
um then one on the

101
00:06:08,220 --> 00:06:11,759
um C4 ccnx implementation and its

102
00:06:11,759 --> 00:06:13,259
application to

103
00:06:13,259 --> 00:06:15,960
um Cloud native use cases

104
00:06:15,960 --> 00:06:18,780
and um and then I'm going to talk a bit

105
00:06:18,780 --> 00:06:22,380
about some ideas for rest for ICM and

106
00:06:22,380 --> 00:06:24,360
then we can discuss any other business

107
00:06:24,360 --> 00:06:27,180
is there anything else that we want to

108
00:06:27,180 --> 00:06:28,860
talk about today or that you would like

109
00:06:28,860 --> 00:06:31,940
to change in the agenda

110
00:06:34,139 --> 00:06:35,759
okay

111
00:06:35,759 --> 00:06:39,180
um then let's look at our

112
00:06:39,180 --> 00:06:41,699
research group status

113
00:06:41,699 --> 00:06:43,259
um

114
00:06:43,259 --> 00:06:45,479
so we have a couple of documents that

115
00:06:45,479 --> 00:06:47,880
should be published soon

116
00:06:47,880 --> 00:06:51,840
um so CC and info is sent to the RC

117
00:06:51,840 --> 00:06:55,639
editor um things not yet published

118
00:06:55,639 --> 00:06:57,259
we

119
00:06:57,259 --> 00:07:00,780
last called time tlv and it's now

120
00:07:00,780 --> 00:07:05,280
waiting for uh Colin to initiate the

121
00:07:05,280 --> 00:07:08,819
irs3 review I think

122
00:07:08,819 --> 00:07:10,500
um flick we're going to talk about in a

123
00:07:10,500 --> 00:07:13,979
minute and um then we have

124
00:07:13,979 --> 00:07:16,979
ICM ping Trace out and path steering

125
00:07:16,979 --> 00:07:20,039
and um yeah Dave can give us an update

126
00:07:20,039 --> 00:07:21,900
on this since he's heavily involved in

127
00:07:21,900 --> 00:07:25,620
those yeah so um as most of you know we

128
00:07:25,620 --> 00:07:28,080
last call both ping and Trisha quite a

129
00:07:28,080 --> 00:07:31,099
while ago it's been through irsg review

130
00:07:31,099 --> 00:07:33,360
successfully uh got some very good

131
00:07:33,360 --> 00:07:35,580
comments from Chris Wood and a couple of

132
00:07:35,580 --> 00:07:37,319
other people

133
00:07:37,319 --> 00:07:40,380
um and those have been revved

134
00:07:40,380 --> 00:07:42,780
um and checked back through and are

135
00:07:42,780 --> 00:07:44,759
pretty much ready to go to the final

136
00:07:44,759 --> 00:07:46,039
stages

137
00:07:46,039 --> 00:07:51,900
of iesg conflict review and uh final

138
00:07:51,900 --> 00:07:54,240
Ayana processing

139
00:07:54,240 --> 00:07:56,280
um but we've had a conversation with the

140
00:07:56,280 --> 00:07:57,900
ir3f chair

141
00:07:57,900 --> 00:08:01,020
um and because both of those

142
00:08:01,020 --> 00:08:03,720
uh capabilities for management are

143
00:08:03,720 --> 00:08:06,479
significantly enhanced if they can make

144
00:08:06,479 --> 00:08:10,680
use of the capabilities of path steering

145
00:08:10,680 --> 00:08:12,539
um we sort of jointly felt that we

146
00:08:12,539 --> 00:08:15,539
invest to progress all three of these to

147
00:08:15,539 --> 00:08:18,860
publication uh as rfcs together

148
00:08:18,860 --> 00:08:21,479
so we're going to hold up

149
00:08:21,479 --> 00:08:24,060
uh ping and trace route from the sort of

150
00:08:24,060 --> 00:08:25,800
the final processing although of course

151
00:08:25,800 --> 00:08:28,080
please go ahead with you know modified

152
00:08:28,080 --> 00:08:31,379
implementations and experimentation on

153
00:08:31,379 --> 00:08:34,020
those uh so we can finish up paths here

154
00:08:34,020 --> 00:08:37,380
now status of pad steering is as follows

155
00:08:37,380 --> 00:08:39,539
it was an individual draft for a while

156
00:08:39,539 --> 00:08:41,820
it's been went through a number of

157
00:08:41,820 --> 00:08:43,559
revisions it's been looked at pretty

158
00:08:43,559 --> 00:08:47,040
carefully by uh people in both the CCN

159
00:08:47,040 --> 00:08:49,740
and in the end communities uh matter of

160
00:08:49,740 --> 00:08:52,500
fact the last version had some uh major

161
00:08:52,500 --> 00:08:56,040
changes to how we do the nvn encoding uh

162
00:08:56,040 --> 00:08:57,839
to bring it up to date with the way the

163
00:08:57,839 --> 00:09:00,720
ndn protocols have gotten partitioned

164
00:09:00,720 --> 00:09:05,399
um into to combined protocols and

165
00:09:05,399 --> 00:09:08,040
um a little while ago it got entered as

166
00:09:08,040 --> 00:09:09,720
an RNG draft

167
00:09:09,720 --> 00:09:11,100
so

168
00:09:11,100 --> 00:09:13,260
um it's fairly mature although it hasn't

169
00:09:13,260 --> 00:09:15,620
been an RG draft for a whole long time

170
00:09:15,620 --> 00:09:18,000
but we'd like to progress it very

171
00:09:18,000 --> 00:09:20,100
rapidly so that we don't hold off ping

172
00:09:20,100 --> 00:09:23,700
and trace route very much so our plea is

173
00:09:23,700 --> 00:09:26,100
to have everybody in the RG please look

174
00:09:26,100 --> 00:09:28,920
at the current draft review it send

175
00:09:28,920 --> 00:09:31,680
comments we would very much like to last

176
00:09:31,680 --> 00:09:33,240
call this

177
00:09:33,240 --> 00:09:35,459
um soon like within the next month or so

178
00:09:35,459 --> 00:09:38,700
and get that done before the holidays so

179
00:09:38,700 --> 00:09:41,600
that we can get it to IR ski review

180
00:09:41,600 --> 00:09:43,560
expeditiously and have everything

181
00:09:43,560 --> 00:09:46,500
wrapped up in a few months so thank you

182
00:09:46,500 --> 00:09:49,800
and in advance for uh your help on uh on

183
00:09:49,800 --> 00:09:52,399
moving this forward

184
00:09:53,100 --> 00:09:54,720
yes thanks

185
00:09:54,720 --> 00:09:56,940
um so I mean this is

186
00:09:56,940 --> 00:09:59,040
um yeah pretty useful and but also cool

187
00:09:59,040 --> 00:10:02,160
technology so I mean past steering um is

188
00:10:02,160 --> 00:10:04,500
a really nice feature

189
00:10:04,500 --> 00:10:06,060
um and um I think that would be really

190
00:10:06,060 --> 00:10:09,180
important and valuable output from IC

191
00:10:09,180 --> 00:10:11,339
energy

192
00:10:11,339 --> 00:10:12,660
all right

193
00:10:12,660 --> 00:10:13,680
um

194
00:10:13,680 --> 00:10:15,899
with that I'd like to hand it over to

195
00:10:15,899 --> 00:10:19,920
mark for his presentation on

196
00:10:19,920 --> 00:10:24,439
um flick and um

197
00:10:25,019 --> 00:10:30,920
just let me okay bring your slice up

198
00:10:31,440 --> 00:10:33,540
so um

199
00:10:33,540 --> 00:10:35,700
do you want to run near the slides

200
00:10:35,700 --> 00:10:37,620
yourself Mark um what's the best way for

201
00:10:37,620 --> 00:10:38,580
you

202
00:10:38,580 --> 00:10:41,519
uh yeah I could do that

203
00:10:41,519 --> 00:10:44,240
um let's

204
00:10:45,779 --> 00:10:49,700
see how this is gonna go here

205
00:11:08,660 --> 00:11:12,240
this hasn't been approved by my system

206
00:11:12,240 --> 00:11:13,680
actually

207
00:11:13,680 --> 00:11:14,279
um

208
00:11:14,279 --> 00:11:17,640
if I but I can do I can um I can bring

209
00:11:17,640 --> 00:11:19,200
them up and then give you control over

210
00:11:19,200 --> 00:11:23,160
it and that's maybe the best way sure

211
00:11:23,160 --> 00:11:25,560
um just a moment sorry I didn't realize

212
00:11:25,560 --> 00:11:28,160
this earlier

213
00:11:31,260 --> 00:11:33,300
foreign

214
00:11:33,300 --> 00:11:35,279
so now you should be able to control the

215
00:11:35,279 --> 00:11:38,300
slides with your cursor

216
00:11:38,519 --> 00:11:41,279
hey look at that clever people right

217
00:11:41,279 --> 00:11:44,459
making that product all right

218
00:11:44,459 --> 00:11:48,720
um so this is uh the uh flick draft for

219
00:11:48,720 --> 00:11:53,459
file like ICM Collections and uh the

220
00:11:53,459 --> 00:11:57,120
active authors right now are uh Dave and

221
00:11:57,120 --> 00:11:59,120
myself uh

222
00:11:59,120 --> 00:12:00,660
and

223
00:12:00,660 --> 00:12:03,360
uh Christian shooting and Chris Wood

224
00:12:03,360 --> 00:12:06,120
have also uh contributed quite a bit in

225
00:12:06,120 --> 00:12:08,160
the past

226
00:12:08,160 --> 00:12:10,740
so in this presentation uh I'm gonna

227
00:12:10,740 --> 00:12:12,959
talk about the background for flick and

228
00:12:12,959 --> 00:12:15,660
review uh some of the history and then

229
00:12:15,660 --> 00:12:17,279
I'm going to walk through the main flick

230
00:12:17,279 --> 00:12:20,940
features that are in the 04 draft and

231
00:12:20,940 --> 00:12:23,459
then conclude with issues uh that we

232
00:12:23,459 --> 00:12:26,120
know about for the 04 draft

233
00:12:26,120 --> 00:12:29,760
I'm not really going to do a Delta from

234
00:12:29,760 --> 00:12:32,279
the O3 I could talk about that if

235
00:12:32,279 --> 00:12:34,860
someone has specific questions but uh I

236
00:12:34,860 --> 00:12:36,420
decided it was better just to go over

237
00:12:36,420 --> 00:12:38,579
what is flick

238
00:12:38,579 --> 00:12:40,380
um uh since it's been quite a while

239
00:12:40,380 --> 00:12:42,420
since we've uh had a had this in the

240
00:12:42,420 --> 00:12:44,540
meeting

241
00:12:45,959 --> 00:12:49,320
so uh the the history so flick was first

242
00:12:49,320 --> 00:12:52,220
conceived uh long ago maybe around

243
00:12:52,220 --> 00:12:55,459
2014-ish you know that time frame 2014

244
00:12:55,459 --> 00:13:00,240
2016. uh the first draft was in 2017 uh

245
00:13:00,240 --> 00:13:02,820
and we're now uh in the 04 draft in

246
00:13:02,820 --> 00:13:04,620
2022.

247
00:13:04,620 --> 00:13:05,480
um

248
00:13:05,480 --> 00:13:07,440
the

249
00:13:07,440 --> 00:13:09,959
the uh

250
00:13:09,959 --> 00:13:13,200
uh content of flick is is is that it's a

251
00:13:13,200 --> 00:13:17,279
manifest and uh it's meant to make it

252
00:13:17,279 --> 00:13:20,760
easier to use hash based naming uh which

253
00:13:20,760 --> 00:13:23,459
can be used for you know one within CCN

254
00:13:23,459 --> 00:13:25,260
we called nameless objects or segmenting

255
00:13:25,260 --> 00:13:28,200
large objects or doing collections or

256
00:13:28,200 --> 00:13:31,019
offloading uh signatures so there's a

257
00:13:31,019 --> 00:13:33,959
lot of very useful features for it uh

258
00:13:33,959 --> 00:13:36,540
it's been implemented and used

259
00:13:36,540 --> 00:13:39,300
um you know in several of the CCN uh

260
00:13:39,300 --> 00:13:42,360
iterations before

261
00:13:42,360 --> 00:13:45,620
So currently uh

262
00:13:45,620 --> 00:13:49,260
Dave and myself are the main authors uh

263
00:13:49,260 --> 00:13:52,019
Christian uh has contributed you know a

264
00:13:52,019 --> 00:13:55,560
fair bit for the I think two or no three

265
00:13:55,560 --> 00:13:58,620
drafts uh and uh Chris Wood was active

266
00:13:58,620 --> 00:14:01,500
with the earlier drafts

267
00:14:01,500 --> 00:14:05,040
um the 04 draft uh cleaned up a lot of

268
00:14:05,040 --> 00:14:08,220
uh uh the style uh Ken Calvert gave us a

269
00:14:08,220 --> 00:14:10,200
lot of useful feedback uh hopefully

270
00:14:10,200 --> 00:14:11,940
we'll get some more feedback on the 04

271
00:14:11,940 --> 00:14:14,639
so we can tidy it up for the final o5

272
00:14:14,639 --> 00:14:17,660
that we can submit

273
00:14:18,620 --> 00:14:22,680
so what flick does is it provides a

274
00:14:22,680 --> 00:14:25,860
manifest of hashes so you can retrieve

275
00:14:25,860 --> 00:14:27,600
all the segments of a piece of

276
00:14:27,600 --> 00:14:30,560
application data using hash based naming

277
00:14:30,560 --> 00:14:33,060
the hash is higher or the sorry the

278
00:14:33,060 --> 00:14:35,700
Manifest is hierarchical so you know you

279
00:14:35,700 --> 00:14:37,740
don't have to fit it all in one uh

280
00:14:37,740 --> 00:14:41,699
object and the pointers in the hash can

281
00:14:41,699 --> 00:14:43,980
point to either more manifests or to

282
00:14:43,980 --> 00:14:46,500
application data

283
00:14:46,500 --> 00:14:49,860
there is a canonical traversal order uh

284
00:14:49,860 --> 00:14:52,620
and there is metadata that could provide

285
00:14:52,620 --> 00:14:55,920
other traversal hints such as for video

286
00:14:55,920 --> 00:14:59,220
uh flick has its own uh encryption

287
00:14:59,220 --> 00:15:01,500
mechanism uh I mean it's using standard

288
00:15:01,500 --> 00:15:03,779
product you know protocols and all that

289
00:15:03,779 --> 00:15:05,579
but it is specified how you would

290
00:15:05,579 --> 00:15:07,500
encrypt a manifest

291
00:15:07,500 --> 00:15:10,199
uh there are also several interest

292
00:15:10,199 --> 00:15:13,500
construction techniques so these are

293
00:15:13,500 --> 00:15:15,660
depending upon the way that the

294
00:15:15,660 --> 00:15:18,540
publisher has decided to create the

295
00:15:18,540 --> 00:15:21,600
application data that is referenced by

296
00:15:21,600 --> 00:15:23,160
the Manifest there might be different

297
00:15:23,160 --> 00:15:26,639
ways that you construct the full name to

298
00:15:26,639 --> 00:15:29,579
put in an interest and flick has several

299
00:15:29,579 --> 00:15:31,620
techniques and we could add more

300
00:15:31,620 --> 00:15:34,699
techniques later on

301
00:15:35,899 --> 00:15:40,320
so as a manifest uh you know using hash

302
00:15:40,320 --> 00:15:42,600
based naming is is very efficient

303
00:15:42,600 --> 00:15:46,139
because it's an exact match name uh and

304
00:15:46,139 --> 00:15:48,720
in ccnx that's also very important since

305
00:15:48,720 --> 00:15:50,459
you know everything has to be an exact

306
00:15:50,459 --> 00:15:51,899
match name

307
00:15:51,899 --> 00:15:53,279
uh

308
00:15:53,279 --> 00:15:55,019
uh manifest techniques have been around

309
00:15:55,019 --> 00:15:58,079
for a long time uh to distribute hashes

310
00:15:58,079 --> 00:16:01,139
uh so this is a uh the current you know

311
00:16:01,139 --> 00:16:03,660
hopefully standardized way of doing it

312
00:16:03,660 --> 00:16:05,579
uh manifest can also offload

313
00:16:05,579 --> 00:16:07,260
authentication because you only need to

314
00:16:07,260 --> 00:16:10,320
sign the root of the Manifest

315
00:16:10,320 --> 00:16:13,920
uh a flick manifest has one or more hash

316
00:16:13,920 --> 00:16:16,740
groups and each hash group can have its

317
00:16:16,740 --> 00:16:19,220
own naming convention and its own

318
00:16:19,220 --> 00:16:22,019
metadata so we'll talk about those name

319
00:16:22,019 --> 00:16:25,760
Constructors in a few slides

320
00:16:27,480 --> 00:16:30,660
so the traversal order in flick we've

321
00:16:30,660 --> 00:16:33,000
defined to be pre-order which is the

322
00:16:33,000 --> 00:16:36,300
basic top down left right style of

323
00:16:36,300 --> 00:16:39,240
traversing a tree a consumer of course

324
00:16:39,240 --> 00:16:41,880
can retrieve the pieces in any order

325
00:16:41,880 --> 00:16:45,480
that they want uh but to reconstruct the

326
00:16:45,480 --> 00:16:47,820
original data as intended you would

327
00:16:47,820 --> 00:16:50,459
follow the traversal order some

328
00:16:50,459 --> 00:16:52,980
applications uh might not care about

329
00:16:52,980 --> 00:16:55,980
perfect reassembly and they might use

330
00:16:55,980 --> 00:16:58,920
metadata or other hints to skip around

331
00:16:58,920 --> 00:17:01,920
the content you know for for example

332
00:17:01,920 --> 00:17:04,400
video playback

333
00:17:04,400 --> 00:17:07,740
the hash pointers can point to other

334
00:17:07,740 --> 00:17:09,900
manifests or application data and the

335
00:17:09,900 --> 00:17:12,059
publisher is free to put those in

336
00:17:12,059 --> 00:17:15,059
whatever order they want so you could do

337
00:17:15,059 --> 00:17:18,240
all manifest first and more data data

338
00:17:18,240 --> 00:17:20,040
first then more manifest you could

339
00:17:20,040 --> 00:17:24,660
intermix them you could put all interior

340
00:17:24,660 --> 00:17:27,119
nodes having only manifests and leaf

341
00:17:27,119 --> 00:17:29,760
nodes having only data uh and so forth

342
00:17:29,760 --> 00:17:32,220
you know it's entirely up to the

343
00:17:32,220 --> 00:17:35,540
publisher how they do that

344
00:17:38,000 --> 00:17:41,520
there are what we call metadata and

345
00:17:41,520 --> 00:17:44,940
annotations so metadata uh generally

346
00:17:44,940 --> 00:17:48,059
applies to Hash groups or the overall

347
00:17:48,059 --> 00:17:49,860
manifest

348
00:17:49,860 --> 00:17:52,860
um uh content object and these can be

349
00:17:52,860 --> 00:17:56,700
things like uh the size of the sub tree

350
00:17:56,700 --> 00:17:59,280
rooted at the Manifest or the size of

351
00:17:59,280 --> 00:18:02,220
the sub Tree in a hash group the amount

352
00:18:02,220 --> 00:18:04,919
of and and these sizes are the

353
00:18:04,919 --> 00:18:07,320
application data underneath there not

354
00:18:07,320 --> 00:18:09,660
counting manifests you can have digest

355
00:18:09,660 --> 00:18:12,780
of that information uh you could have

356
00:18:12,780 --> 00:18:14,640
sizes for the immediate Shield

357
00:18:14,640 --> 00:18:18,500
application data Children of the node

358
00:18:18,500 --> 00:18:22,860
there's locators for routing hints uh

359
00:18:22,860 --> 00:18:25,679
and so these are the you know metadata

360
00:18:25,679 --> 00:18:28,320
that we put in the draft uh but it's

361
00:18:28,320 --> 00:18:32,640
entirely extensible by more tlv tags uh

362
00:18:32,640 --> 00:18:35,520
annotations can be applied to individual

363
00:18:35,520 --> 00:18:38,820
pointers uh and uh the only one that

364
00:18:38,820 --> 00:18:41,340
we've put in the draft would be the size

365
00:18:41,340 --> 00:18:43,679
of the application data underneath a

366
00:18:43,679 --> 00:18:45,660
specific pointer

367
00:18:45,660 --> 00:18:47,580
um uh though we have tossed around ideas

368
00:18:47,580 --> 00:18:50,700
about you know uh uh video hints but

369
00:18:50,700 --> 00:18:53,720
those are not in the draft

370
00:18:55,980 --> 00:18:58,020
and these are the definitions of the

371
00:18:58,020 --> 00:18:59,580
things that I just said so I'll skip

372
00:18:59,580 --> 00:19:00,860
that

373
00:19:00,860 --> 00:19:04,440
locators and name Constructors so a

374
00:19:04,440 --> 00:19:07,260
locator is a routing hint so in ndn of

375
00:19:07,260 --> 00:19:08,700
course they have a uh you know an

376
00:19:08,700 --> 00:19:11,340
explicit routing hints for interest uh

377
00:19:11,340 --> 00:19:14,580
in ccnx you can uh if you're using

378
00:19:14,580 --> 00:19:16,380
nameless objects you know the the the

379
00:19:16,380 --> 00:19:18,660
name of the interest is essential is

380
00:19:18,660 --> 00:19:21,299
essentially your routing hint so these

381
00:19:21,299 --> 00:19:22,919
can be used by both protocols the

382
00:19:22,919 --> 00:19:26,340
mechanism differs uh but the publisher

383
00:19:26,340 --> 00:19:29,640
or someone providing the uh content can

384
00:19:29,640 --> 00:19:32,580
provide the locators uh to use in the

385
00:19:32,580 --> 00:19:34,160
interest Construction

386
00:19:34,160 --> 00:19:37,440
uh how you name an interest and all the

387
00:19:37,440 --> 00:19:39,299
other flags that might go in the

388
00:19:39,299 --> 00:19:41,880
interest uh can be part of what we call

389
00:19:41,880 --> 00:19:44,640
a name Constructor so the Manifest will

390
00:19:44,640 --> 00:19:48,000
specify uh the scheme that that a

391
00:19:48,000 --> 00:19:50,520
consumer should use you know based on

392
00:19:50,520 --> 00:19:53,220
either the locators or other names and

393
00:19:53,220 --> 00:19:55,620
we've defined four of those that are um

394
00:19:55,620 --> 00:19:57,600
I didn't go to the details of those here

395
00:19:57,600 --> 00:20:00,600
but they are in the uh draft

396
00:20:00,600 --> 00:20:03,200
yeah

397
00:20:03,200 --> 00:20:07,799
uh so a hash group is the collection of

398
00:20:07,799 --> 00:20:10,260
uh pointers and you can as I said you

399
00:20:10,260 --> 00:20:12,360
can have one or more of those so an

400
00:20:12,360 --> 00:20:14,340
example of why you might want more than

401
00:20:14,340 --> 00:20:17,760
one would be if uh for example child

402
00:20:17,760 --> 00:20:20,220
manifests are under one namespace and

403
00:20:20,220 --> 00:20:22,080
application data is an under another

404
00:20:22,080 --> 00:20:24,600
name space so you could have a hash

405
00:20:24,600 --> 00:20:26,640
group a first hash group for the child

406
00:20:26,640 --> 00:20:28,919
manifest and a second hash group for the

407
00:20:28,919 --> 00:20:30,780
child data and those can have the

408
00:20:30,780 --> 00:20:32,760
different name Constructors

409
00:20:32,760 --> 00:20:34,620
um you know and and you could intermix

410
00:20:34,620 --> 00:20:36,900
these or interleave them uh however you

411
00:20:36,900 --> 00:20:38,160
want

412
00:20:38,160 --> 00:20:40,620
uh there is a default name Constructor

413
00:20:40,620 --> 00:20:42,720
so if you don't specify anything there

414
00:20:42,720 --> 00:20:46,080
is a default Behavior Uh locators and

415
00:20:46,080 --> 00:20:49,559
name Constructors are inherited so one

416
00:20:49,559 --> 00:20:52,020
could only Define them in the root of

417
00:20:52,020 --> 00:20:54,120
the Manifest tree and then as you

418
00:20:54,120 --> 00:20:55,919
Traverse the tree you would just keep

419
00:20:55,919 --> 00:20:59,900
reusing the same values as you go

420
00:21:01,440 --> 00:21:07,559
uh the encryption for a manifest uh was

421
00:21:07,559 --> 00:21:11,880
designed so you could do In-Place

422
00:21:11,880 --> 00:21:14,520
encryption and decryption and then just

423
00:21:14,520 --> 00:21:17,220
swap a tlv value to say it's encrypted

424
00:21:17,220 --> 00:21:19,559
or it's plain text

425
00:21:19,559 --> 00:21:21,480
um you don't have to do it that way but

426
00:21:21,480 --> 00:21:24,600
it it should be possible with the AES

427
00:21:24,600 --> 00:21:27,559
encryption that we Define

428
00:21:27,559 --> 00:21:31,440
we Define two keying mechanism one is a

429
00:21:31,440 --> 00:21:33,120
pre-shared key where there's only a key

430
00:21:33,120 --> 00:21:39,000
ID and a nonce in the um uh manifest uh

431
00:21:39,000 --> 00:21:41,640
content object or there's a wrapped key

432
00:21:41,640 --> 00:21:43,799
technique uh and it is you know

433
00:21:43,799 --> 00:21:45,900
extensible you can Define more and

434
00:21:45,900 --> 00:21:48,120
hopefully we will get more than those

435
00:21:48,120 --> 00:21:50,360
two

436
00:21:51,080 --> 00:21:53,880
for pre-shared Keys there's just the key

437
00:21:53,880 --> 00:21:55,620
ID and it's assumed that you've either

438
00:21:55,620 --> 00:21:57,539
done out of band or key exchange

439
00:21:57,539 --> 00:22:01,200
protocol to know about those key IDs we

440
00:22:01,200 --> 00:22:03,299
use unauthenticated encryption

441
00:22:03,299 --> 00:22:06,480
authenticated data mechanism with AES

442
00:22:06,480 --> 00:22:08,820
encryption I'll just be a very standard

443
00:22:08,820 --> 00:22:11,418
stuff

444
00:22:11,940 --> 00:22:14,880
for the wrap key approach

445
00:22:14,880 --> 00:22:16,860
um you know the the intention is that

446
00:22:16,860 --> 00:22:19,260
this is wrapping the AES key that's

447
00:22:19,260 --> 00:22:21,659
being used by the pre-shared key

448
00:22:21,659 --> 00:22:24,659
mechanism to encrypt uh the Manifest so

449
00:22:24,659 --> 00:22:25,980
you don't have to have a key exchange

450
00:22:25,980 --> 00:22:27,720
protocol

451
00:22:27,720 --> 00:22:30,900
um and there is a you know then just the

452
00:22:30,900 --> 00:22:32,760
kind of standard you know for ICN

453
00:22:32,760 --> 00:22:35,400
there's a key ID the wrapped key and a

454
00:22:35,400 --> 00:22:38,820
key locator for the key ID if you wanted

455
00:22:38,820 --> 00:22:39,900
to

456
00:22:39,900 --> 00:22:42,659
um uh fetch it instead of having it

457
00:22:42,659 --> 00:22:47,100
wrapped in the uh uh manifest uh it uses

458
00:22:47,100 --> 00:22:51,539
RSA oaap and uh future extensions could

459
00:22:51,539 --> 00:22:55,320
be for you know full key uh encryption

460
00:22:55,320 --> 00:22:59,340
uh data encryption mechanism uh or for

461
00:22:59,340 --> 00:23:02,658
using elliptic curve

462
00:23:04,500 --> 00:23:07,020
so we've we've defined this

463
00:23:07,020 --> 00:23:10,320
um to be usable by ndn or ccnx so really

464
00:23:10,320 --> 00:23:14,100
flick is is a grammar and a structure

465
00:23:14,100 --> 00:23:16,620
and and and and a set of you know

466
00:23:16,620 --> 00:23:18,900
techniques for using the Manifest but

467
00:23:18,900 --> 00:23:21,120
they would be natively encoded in either

468
00:23:21,120 --> 00:23:24,780
ccnx or ndn uh We've provided uh

469
00:23:24,780 --> 00:23:28,380
encodings for both of those uh so

470
00:23:28,380 --> 00:23:29,580
hopefully

471
00:23:29,580 --> 00:23:31,380
um you know the the ideas of this can

472
00:23:31,380 --> 00:23:33,600
become standardized and you would have

473
00:23:33,600 --> 00:23:36,179
uh hopefully even you know a standard

474
00:23:36,179 --> 00:23:39,120
library implementations for it between

475
00:23:39,120 --> 00:23:42,379
the two protocols

476
00:23:42,960 --> 00:23:44,100
foreign

477
00:23:44,100 --> 00:23:47,159
so in the draft we also talk about our

478
00:23:47,159 --> 00:23:50,100
Root versus a root plus top manifest so

479
00:23:50,100 --> 00:23:51,960
this is um

480
00:23:51,960 --> 00:23:54,659
uh so the the the root manifest approach

481
00:23:54,659 --> 00:23:56,700
is is basically as simple as it sounds

482
00:23:56,700 --> 00:23:58,679
right you have the top level manifest

483
00:23:58,679 --> 00:24:00,539
where you have your signature you might

484
00:24:00,539 --> 00:24:01,980
have your name locate and your name

485
00:24:01,980 --> 00:24:03,960
Constructors and locators there and then

486
00:24:03,960 --> 00:24:05,700
the rest of the Manifest is just normal

487
00:24:05,700 --> 00:24:07,020
stuff

488
00:24:07,020 --> 00:24:08,460
um another technique that we've

489
00:24:08,460 --> 00:24:11,460
described as having a root plus a top so

490
00:24:11,460 --> 00:24:15,240
you would generate your content manifest

491
00:24:15,240 --> 00:24:18,120
you know uh as normal and you have the

492
00:24:18,120 --> 00:24:20,520
root or the top level manifest of that

493
00:24:20,520 --> 00:24:23,400
structure and then you glue on a root

494
00:24:23,400 --> 00:24:26,039
manifest on top of that so this means

495
00:24:26,039 --> 00:24:29,659
that if you want to be changing your

496
00:24:29,659 --> 00:24:33,659
locators or your signature or

497
00:24:33,659 --> 00:24:37,440
um uh other things uh name Constructors

498
00:24:37,440 --> 00:24:40,320
that are in the Manifest you're just

499
00:24:40,320 --> 00:24:42,240
swapping out the root and all the rest

500
00:24:42,240 --> 00:24:44,340
of the Manifest stays the same all these

501
00:24:44,340 --> 00:24:47,640
hashes are the same alvet you know about

502
00:24:47,640 --> 00:24:49,980
pushing out to caches and so forth is

503
00:24:49,980 --> 00:24:52,679
all the same so uh that's that's the

504
00:24:52,679 --> 00:24:54,780
intention between having a root plus top

505
00:24:54,780 --> 00:24:57,539
versus just a plain root again this is

506
00:24:57,539 --> 00:24:59,159
entirely up to the publisher what they

507
00:24:59,159 --> 00:25:00,659
want to do about it and they could even

508
00:25:00,659 --> 00:25:02,760
use some other technique that you

509
00:25:02,760 --> 00:25:05,340
described in the draft

510
00:25:05,340 --> 00:25:06,919
uh

511
00:25:06,919 --> 00:25:10,140
and uh so still to be done

512
00:25:10,140 --> 00:25:13,559
um we have some python prototype code

513
00:25:13,559 --> 00:25:16,380
um that's really just about building

514
00:25:16,380 --> 00:25:19,860
um uh the the manifests and the trees uh

515
00:25:19,860 --> 00:25:21,440
it's not really a protocol

516
00:25:21,440 --> 00:25:24,720
implementation but that prototype is

517
00:25:24,720 --> 00:25:26,279
behind the draft so we need to bring

518
00:25:26,279 --> 00:25:28,380
that up to the draft

519
00:25:28,380 --> 00:25:29,400
um

520
00:25:29,400 --> 00:25:33,480
flick actually supports acyclic digraphs

521
00:25:33,480 --> 00:25:35,700
not just trees so we should have an

522
00:25:35,700 --> 00:25:37,380
example of that

523
00:25:37,380 --> 00:25:39,840
um the the kind of uh standard example

524
00:25:39,840 --> 00:25:43,740
of that is you have a deduplication so

525
00:25:43,740 --> 00:25:46,559
maybe you have one content object that's

526
00:25:46,559 --> 00:25:50,460
like all zeros uh and you could refer to

527
00:25:50,460 --> 00:25:52,440
that content object from multiple places

528
00:25:52,440 --> 00:25:56,220
in your tree uh you know if that's a

529
00:25:56,220 --> 00:26:00,120
common content object for your encoding

530
00:26:00,120 --> 00:26:03,360
uh the next two are are really around

531
00:26:03,360 --> 00:26:06,779
the nonce and salt and and kind of the

532
00:26:06,779 --> 00:26:08,700
some of the differences between the RFC

533
00:26:08,700 --> 00:26:10,200
descriptions of those in the nist

534
00:26:10,200 --> 00:26:12,299
description so uh this is more so just a

535
00:26:12,299 --> 00:26:14,760
note that we need to make sure that how

536
00:26:14,760 --> 00:26:18,360
we describe these things is is clear uh

537
00:26:18,360 --> 00:26:22,140
given the standards uh and uh there were

538
00:26:22,140 --> 00:26:24,299
there were some usages of the nonce

539
00:26:24,299 --> 00:26:27,360
where we weren't exactly clear about how

540
00:26:27,360 --> 00:26:30,299
the salt and the explicit knots get used

541
00:26:30,299 --> 00:26:34,679
so we will clarify those in the o4 draft

542
00:26:34,679 --> 00:26:36,960
um we might also want to consider using

543
00:26:36,960 --> 00:26:39,299
a kdf to ensure that there's no repeated

544
00:26:39,299 --> 00:26:43,140
nonses uh between manifest nodes or

545
00:26:43,140 --> 00:26:45,600
entire manifest trees of the same keys

546
00:26:45,600 --> 00:26:49,620
are used uh and uh so that will be put

547
00:26:49,620 --> 00:26:51,840
into the o4 draft

548
00:26:51,840 --> 00:26:54,240
um we have the Ina consideration section

549
00:26:54,240 --> 00:26:57,360
to go over they did send some feedback

550
00:26:57,360 --> 00:27:00,419
on the draft uh so we need to review

551
00:27:00,419 --> 00:27:04,260
that and incorporate it in on into o5 uh

552
00:27:04,260 --> 00:27:06,779
of course security considerations uh

553
00:27:06,779 --> 00:27:09,059
needs to be worked out more especially

554
00:27:09,059 --> 00:27:11,279
since we are talking about uh having a

555
00:27:11,279 --> 00:27:14,520
specific encryption protocol uh in in

556
00:27:14,520 --> 00:27:15,900
this draft

557
00:27:15,900 --> 00:27:20,880
and the ndn section uh I'm sure is stale

558
00:27:20,880 --> 00:27:24,179
uh because it's it's you know three or

559
00:27:24,179 --> 00:27:26,340
four years old so that needs to be

560
00:27:26,340 --> 00:27:30,360
touched up uh for recent nvn changes

561
00:27:30,360 --> 00:27:33,240
and I suspect that is the end of the

562
00:27:33,240 --> 00:27:35,659
presentation

563
00:27:38,820 --> 00:27:41,539
thank you Mark

564
00:27:42,559 --> 00:27:46,020
questions comments

565
00:27:46,020 --> 00:27:49,200
help we could really use some help from

566
00:27:49,200 --> 00:27:51,299
the rest of the community to review this

567
00:27:51,299 --> 00:27:54,379
and contribute to it

568
00:27:57,779 --> 00:28:00,080
foreign

569
00:28:05,720 --> 00:28:08,820
solid piece of work lots of effort went

570
00:28:08,820 --> 00:28:11,880
into it and at the same time it's also a

571
00:28:11,880 --> 00:28:15,539
very important mechanism right any

572
00:28:15,539 --> 00:28:19,440
um ICN application any system that wants

573
00:28:19,440 --> 00:28:21,900
to share larger objects probably use

574
00:28:21,900 --> 00:28:24,240
something like manifests and and so it's

575
00:28:24,240 --> 00:28:27,179
kind of like a key part of the system

576
00:28:27,179 --> 00:28:31,380
and we really want to publish this um

577
00:28:31,380 --> 00:28:34,320
soon

578
00:28:34,320 --> 00:28:37,140
I see Ken as a as in the queue so can

579
00:28:37,140 --> 00:28:39,059
what's your question

580
00:28:39,059 --> 00:28:41,039
uh can you hear me

581
00:28:41,039 --> 00:28:43,880
yeah okay uh

582
00:28:43,880 --> 00:28:46,500
Chrome and I are disagreeing about

583
00:28:46,500 --> 00:28:48,659
whether I gave permission for my camera

584
00:28:48,659 --> 00:28:50,279
so

585
00:28:50,279 --> 00:28:53,240
um but uh I

586
00:28:53,240 --> 00:28:57,179
will go through and and review the 04

587
00:28:57,179 --> 00:29:00,419
draft thank you for the updates and

588
00:29:00,419 --> 00:29:03,620
um I just wanted to say I have a student

589
00:29:03,620 --> 00:29:06,539
uh who's working on trying to implement

590
00:29:06,539 --> 00:29:10,080
it from the 04 draft for in the end so

591
00:29:10,080 --> 00:29:12,539
uh we may have some feedback for you on

592
00:29:12,539 --> 00:29:14,940
the ndn section

593
00:29:14,940 --> 00:29:19,020
um he has had some personal challenges

594
00:29:19,020 --> 00:29:21,120
this semester so we didn't make as much

595
00:29:21,120 --> 00:29:22,860
progress as we wanted but I'm hoping we

596
00:29:22,860 --> 00:29:26,460
can get to that early next year

597
00:29:26,460 --> 00:29:28,620
um but anyway I will try to get feedback

598
00:29:28,620 --> 00:29:32,220
before the end of this year for sure

599
00:29:32,220 --> 00:29:35,340
okay that that's excellent and and you

600
00:29:35,340 --> 00:29:37,799
can have uh the student contact me

601
00:29:37,799 --> 00:29:41,279
directly uh and I'm you know very happy

602
00:29:41,279 --> 00:29:44,520
to help them along as best I can great

603
00:29:44,520 --> 00:29:45,419
um

604
00:29:45,419 --> 00:29:48,720
and uh uh

605
00:29:48,720 --> 00:29:51,659
the uh they're I'm trying to remember

606
00:29:51,659 --> 00:29:53,580
whether I sent the email to the mailing

607
00:29:53,580 --> 00:29:55,380
list or just just to the uh other

608
00:29:55,380 --> 00:29:57,480
co-authors but you know there is kind of

609
00:29:57,480 --> 00:30:00,120
a bullet list of of updates that I know

610
00:30:00,120 --> 00:30:02,340
needs to be made

611
00:30:02,340 --> 00:30:05,880
um so uh uh you know if the student has

612
00:30:05,880 --> 00:30:07,679
any questions about

613
00:30:07,679 --> 00:30:09,600
um you know the encryption in particular

614
00:30:09,600 --> 00:30:12,299
or other things you know reach out to me

615
00:30:12,299 --> 00:30:14,059
rather than spin your wheels because

616
00:30:14,059 --> 00:30:16,500
there might have just been no mission in

617
00:30:16,500 --> 00:30:18,179
in the 04

618
00:30:18,179 --> 00:30:20,840
hmm

619
00:30:21,020 --> 00:30:23,580
so Mark are you aware of any other

620
00:30:23,580 --> 00:30:26,178
implementations

621
00:30:27,539 --> 00:30:31,740
um well there there there was an

622
00:30:31,740 --> 00:30:36,059
implementation in in einc

623
00:30:36,059 --> 00:30:37,500
of

624
00:30:37,500 --> 00:30:43,140
an early flick version maybe like or or

625
00:30:43,140 --> 00:30:45,720
something like that

626
00:30:45,720 --> 00:30:48,240
um but I'm not sure of the

627
00:30:48,240 --> 00:30:51,000
um status of that knowledge

628
00:30:51,000 --> 00:30:53,460
okay

629
00:30:53,460 --> 00:30:55,880
so I actually have an implementation

630
00:30:55,880 --> 00:30:58,620
myself that is I think maybe on the same

631
00:30:58,620 --> 00:31:01,760
level as the python prototype um

632
00:31:01,760 --> 00:31:05,520
if anyone is interested or has a student

633
00:31:05,520 --> 00:31:08,340
who likes to program some closure so

634
00:31:08,340 --> 00:31:11,159
this let me know I'm happy to hand over

635
00:31:11,159 --> 00:31:13,080
this implementation I currently don't

636
00:31:13,080 --> 00:31:15,740
have time for that

637
00:31:18,120 --> 00:31:19,740
all right

638
00:31:19,740 --> 00:31:23,419
um yeah anything else any other question

639
00:31:25,559 --> 00:31:28,559
foreign

640
00:31:32,720 --> 00:31:36,419
for giving us the update

641
00:31:36,419 --> 00:31:38,640
let's move on

642
00:31:38,640 --> 00:31:39,539
um

643
00:31:39,539 --> 00:31:42,360
so next we have um Jen's finco is on the

644
00:31:42,360 --> 00:31:44,899
agenda

645
00:31:46,620 --> 00:31:47,880
and

646
00:31:47,880 --> 00:31:50,039
um so how are we going to do this now

647
00:31:50,039 --> 00:31:53,840
with this life you give me right

648
00:31:53,840 --> 00:31:56,940
yeah I don't I don't know

649
00:31:56,940 --> 00:31:59,279
I don't think I have control over the

650
00:31:59,279 --> 00:32:00,960
slides can you do that for me can you

651
00:32:00,960 --> 00:32:03,120
forward them sure sure okay that would

652
00:32:03,120 --> 00:32:04,919
be awesome okay yeah that's like this is

653
00:32:04,919 --> 00:32:08,240
just title uh you can skip

654
00:32:08,340 --> 00:32:09,539
all right

655
00:32:09,539 --> 00:32:12,179
um yeah so

656
00:32:12,179 --> 00:32:14,460
um yeah maybe you can introduce your

657
00:32:14,460 --> 00:32:16,200
work yourself I don't need to do this um

658
00:32:16,200 --> 00:32:18,720
you have to yeah thank you could you

659
00:32:18,720 --> 00:32:20,880
could you skip already to the next slide

660
00:32:20,880 --> 00:32:24,600
sure sure thanks

661
00:32:24,600 --> 00:32:26,700
um yeah okay so I I mean twinkle as I

662
00:32:26,700 --> 00:32:30,899
run a very very tiny r d company you

663
00:32:30,899 --> 00:32:33,360
know non-profit actually in internet

664
00:32:33,360 --> 00:32:35,399
technology right um

665
00:32:35,399 --> 00:32:38,220
so this is a building block container

666
00:32:38,220 --> 00:32:39,960
format I don't need to tell you too much

667
00:32:39,960 --> 00:32:41,700
about the purpose there

668
00:32:41,700 --> 00:32:44,399
um it's work done under ngi0 which is

669
00:32:44,399 --> 00:32:46,740
managed by an element foundation and I

670
00:32:46,740 --> 00:32:49,799
guess I guess the reason I'm I'm talking

671
00:32:49,799 --> 00:32:51,419
here is because I'm taking a very

672
00:32:51,419 --> 00:32:54,600
different approach from a manifest and

673
00:32:54,600 --> 00:32:55,380
um

674
00:32:55,380 --> 00:32:58,919
when I started out actually the approach

675
00:32:58,919 --> 00:33:01,440
was to use a manifest and all that kind

676
00:33:01,440 --> 00:33:02,279
of thing

677
00:33:02,279 --> 00:33:04,500
but then I did some parallel work for

678
00:33:04,500 --> 00:33:05,820
the iso foundation and that sort of

679
00:33:05,820 --> 00:33:07,200
influenced the design a little bit so I

680
00:33:07,200 --> 00:33:08,700
mentioned them here as well that they

681
00:33:08,700 --> 00:33:11,039
did not actually pay for this work

682
00:33:11,039 --> 00:33:12,960
um thank you can you go to the next

683
00:33:12,960 --> 00:33:15,659
slide okay so I have very different

684
00:33:15,659 --> 00:33:16,919
goals

685
00:33:16,919 --> 00:33:18,240
um

686
00:33:18,240 --> 00:33:20,220
my background is not on the slide but I

687
00:33:20,220 --> 00:33:21,360
want to tell you there's anyway my

688
00:33:21,360 --> 00:33:23,279
background is in in peer-to-peer video

689
00:33:23,279 --> 00:33:24,899
streaming so

690
00:33:24,899 --> 00:33:27,600
um video uh is a

691
00:33:27,600 --> 00:33:30,059
very very high use Case High high

692
00:33:30,059 --> 00:33:32,159
priority use case for me

693
00:33:32,159 --> 00:33:34,019
um which means I wanted to make it

694
00:33:34,019 --> 00:33:35,880
streaming friendly

695
00:33:35,880 --> 00:33:38,100
um also to include the ability to

696
00:33:38,100 --> 00:33:39,840
Multiplex different different content

697
00:33:39,840 --> 00:33:42,299
types into the same resource

698
00:33:42,299 --> 00:33:44,580
um if you if you look at how a Blu-ray

699
00:33:44,580 --> 00:33:48,179
is in terms of in terms of files on the

700
00:33:48,179 --> 00:33:49,919
disk then you have different files that

701
00:33:49,919 --> 00:33:51,539
sort of need to be processed in parallel

702
00:33:51,539 --> 00:33:54,120
and that should also be possible in a

703
00:33:54,120 --> 00:33:56,580
streaming context

704
00:33:56,580 --> 00:33:58,019
um I wanted to support offline first

705
00:33:58,019 --> 00:34:00,179
usages

706
00:34:00,179 --> 00:34:01,140
um

707
00:34:01,140 --> 00:34:03,000
not everywhere in the world has

708
00:34:03,000 --> 00:34:04,799
connectivity I don't know if you've been

709
00:34:04,799 --> 00:34:07,019
to the tube here uh when I was last

710
00:34:07,019 --> 00:34:09,239
using it this little while ago there was

711
00:34:09,239 --> 00:34:11,219
it was just a black hole and you know

712
00:34:11,219 --> 00:34:12,780
you might want to do some work on

713
00:34:12,780 --> 00:34:13,800
something

714
00:34:13,800 --> 00:34:15,780
and then come back out of the tube again

715
00:34:15,780 --> 00:34:19,500
and it actually merges with what you

716
00:34:19,500 --> 00:34:21,540
with what you had before

717
00:34:21,540 --> 00:34:23,760
um another use case that I have in mind

718
00:34:23,760 --> 00:34:26,639
is collaborative editing some having

719
00:34:26,639 --> 00:34:28,500
multiple authors do the same resource

720
00:34:28,500 --> 00:34:31,320
you can solve this in a container format

721
00:34:31,320 --> 00:34:33,239
you need something like for example a

722
00:34:33,239 --> 00:34:34,980
crdt which was something we're also

723
00:34:34,980 --> 00:34:36,480
working on

724
00:34:36,480 --> 00:34:39,540
um but the container for Tacoma can help

725
00:34:39,540 --> 00:34:40,980
with this a little bit and that's what

726
00:34:40,980 --> 00:34:43,859
we've tried to aim here for

727
00:34:43,859 --> 00:34:46,020
um it should be end-to-end encrypted by

728
00:34:46,020 --> 00:34:47,760
default yesterday I was speaking at

729
00:34:47,760 --> 00:34:50,580
dinner G why I thought that was my

730
00:34:50,580 --> 00:34:52,679
important other than the obvious privacy

731
00:34:52,679 --> 00:34:54,780
and security concerns

732
00:34:54,780 --> 00:34:58,020
um but yeah that that was an important

733
00:34:58,020 --> 00:35:01,740
um part from me where I've seen some

734
00:35:01,740 --> 00:35:03,780
proposals say well basically encryption

735
00:35:03,780 --> 00:35:06,839
is more of an application concern

736
00:35:06,839 --> 00:35:07,980
um

737
00:35:07,980 --> 00:35:10,560
so that's from my point of view and a

738
00:35:10,560 --> 00:35:12,660
very European thing I suppose is is the

739
00:35:12,660 --> 00:35:16,140
gdpr we have this this derived right to

740
00:35:16,140 --> 00:35:17,339
be forgotten

741
00:35:17,339 --> 00:35:20,460
which means content deletion was a very

742
00:35:20,460 --> 00:35:23,040
important use case for me which is not

743
00:35:23,040 --> 00:35:25,619
something I see most of the time

744
00:35:25,619 --> 00:35:27,180
and that leads to a very different

745
00:35:27,180 --> 00:35:28,680
design

746
00:35:28,680 --> 00:35:31,740
um next slide please yes so yeah we're

747
00:35:31,740 --> 00:35:34,140
we're right I read through I was I

748
00:35:34,140 --> 00:35:36,240
wasn't really aware of the details of

749
00:35:36,240 --> 00:35:38,820
ICN before you know before a couple of

750
00:35:38,820 --> 00:35:42,720
weeks ago I I read through the RFC 7927

751
00:35:42,720 --> 00:35:45,420
was concerned with name data objects in

752
00:35:45,420 --> 00:35:47,820
our case an object name is I as I

753
00:35:47,820 --> 00:35:50,040
interpret the ROC right an object name

754
00:35:50,040 --> 00:35:51,839
is not just a hash there's something

755
00:35:51,839 --> 00:35:55,380
else to it I'll go into details later

756
00:35:55,380 --> 00:35:57,240
um vessel does provide data original

757
00:35:57,240 --> 00:35:59,940
authentication as per section 4.1

758
00:35:59,940 --> 00:36:02,820
we have a powerful solution it needs

759
00:36:02,820 --> 00:36:05,640
more work for Distributing public key

760
00:36:05,640 --> 00:36:07,200
information or key information in

761
00:36:07,200 --> 00:36:09,240
general so that also

762
00:36:09,240 --> 00:36:11,760
um we can deal with with that part and

763
00:36:11,760 --> 00:36:16,260
other sections there for for uh

764
00:36:16,260 --> 00:36:18,240
what is it um

765
00:36:18,240 --> 00:36:21,480
yeah encryption and and what was the

766
00:36:21,480 --> 00:36:23,160
other doesn't matter you know you know

767
00:36:23,160 --> 00:36:24,960
you know this document better than I do

768
00:36:24,960 --> 00:36:28,520
uh next slide please

769
00:36:28,619 --> 00:36:30,480
okay so

770
00:36:30,480 --> 00:36:33,599
um alternative approaches so you this is

771
00:36:33,599 --> 00:36:36,180
just telling you what you already know

772
00:36:36,180 --> 00:36:38,339
um there's a lot of this going on that

773
00:36:38,339 --> 00:36:40,859
that object names have a hash as an

774
00:36:40,859 --> 00:36:42,599
identifier

775
00:36:42,599 --> 00:36:44,160
it's very elegant and robust I really

776
00:36:44,160 --> 00:36:46,020
like it but it doesn't really fit well

777
00:36:46,020 --> 00:36:48,839
into the goals that I've outlined in the

778
00:36:48,839 --> 00:36:49,800
beginning

779
00:36:49,800 --> 00:36:51,900
my understanding of flick I've read

780
00:36:51,900 --> 00:36:54,000
through it as much as I could before

781
00:36:54,000 --> 00:36:55,560
this talk

782
00:36:55,560 --> 00:36:58,079
um is that it also uses the talk just

783
00:36:58,079 --> 00:37:00,000
now was very useful in confirming most

784
00:37:00,000 --> 00:37:02,339
of this I've looked at DMC I've looked

785
00:37:02,339 --> 00:37:04,619
at a couple of others that all seem to

786
00:37:04,619 --> 00:37:06,240
be manifest approaches

787
00:37:06,240 --> 00:37:08,760
and of course you can get beautiful

788
00:37:08,760 --> 00:37:10,680
things such as Merkle trees for

789
00:37:10,680 --> 00:37:12,599
validating a resource out of this which

790
00:37:12,599 --> 00:37:14,760
which I don't have

791
00:37:14,760 --> 00:37:17,900
um next slide please

792
00:37:19,859 --> 00:37:23,099
um so my problem with manifest is is

793
00:37:23,099 --> 00:37:24,540
I have a couple of problems with

794
00:37:24,540 --> 00:37:26,760
manifests from the gdpr

795
00:37:26,760 --> 00:37:30,420
and rightly forgotten perspective

796
00:37:30,420 --> 00:37:32,339
um in a manifest in order to delete

797
00:37:32,339 --> 00:37:33,900
something with a manifest approach you

798
00:37:33,900 --> 00:37:36,320
just do not reference this anymore

799
00:37:36,320 --> 00:37:38,579
that's not quite the same as deleting it

800
00:37:38,579 --> 00:37:40,320
it could still exist everywhere in the

801
00:37:40,320 --> 00:37:41,400
network

802
00:37:41,400 --> 00:37:43,740
and it's still retrievable with an old

803
00:37:43,740 --> 00:37:45,300
manifest basically

804
00:37:45,300 --> 00:37:46,619
um I wanted to have something slightly

805
00:37:46,619 --> 00:37:49,079
more robust I know I can't guarantee

806
00:37:49,079 --> 00:37:52,380
anything but I can try to to be a bit

807
00:37:52,380 --> 00:37:54,660
more robust than that

808
00:37:54,660 --> 00:37:56,099
um the streaming problem that I see

809
00:37:56,099 --> 00:37:58,140
everywhere with manifest is that you

810
00:37:58,140 --> 00:37:59,820
have to have real-time updates to the

811
00:37:59,820 --> 00:38:01,560
manifests

812
00:38:01,560 --> 00:38:05,940
as as your resource grows streaming

813
00:38:05,940 --> 00:38:07,740
maybe disambiguate this a little bit so

814
00:38:07,740 --> 00:38:09,540
you can stream an existing resource

815
00:38:09,540 --> 00:38:11,880
right or you can live stream something

816
00:38:11,880 --> 00:38:14,880
like a broadcast video and it's more the

817
00:38:14,880 --> 00:38:16,500
second kind of situation that I'm

818
00:38:16,500 --> 00:38:17,900
concerned with

819
00:38:17,900 --> 00:38:21,660
and most of the Manifest approaches

820
00:38:21,660 --> 00:38:23,820
the completely consistent finding

821
00:38:23,820 --> 00:38:25,980
themselves but the idea of of keeping

822
00:38:25,980 --> 00:38:27,660
this ever-growing manifest

823
00:38:27,660 --> 00:38:31,500
updated at the at the consumer is not

824
00:38:31,500 --> 00:38:33,660
really a problem of of the Manifest

825
00:38:33,660 --> 00:38:35,640
approach as such so it needs some other

826
00:38:35,640 --> 00:38:37,680
Solutions

827
00:38:37,680 --> 00:38:38,460
um

828
00:38:38,460 --> 00:38:41,040
when you have multiple authors and you

829
00:38:41,040 --> 00:38:42,839
sign your manifest somehow

830
00:38:42,839 --> 00:38:44,520
becomes the question who does the

831
00:38:44,520 --> 00:38:46,200
signing

832
00:38:46,200 --> 00:38:48,300
and at what point

833
00:38:48,300 --> 00:38:49,740
um I find that a little bit unsolved

834
00:38:49,740 --> 00:38:51,240
there usually there's just no support

835
00:38:51,240 --> 00:38:53,700
for this which is also okay right it's

836
00:38:53,700 --> 00:38:55,560
just not not what I needed to to go

837
00:38:55,560 --> 00:38:56,900
towards

838
00:38:56,900 --> 00:38:59,760
and when you do have multiple authors

839
00:38:59,760 --> 00:39:02,099
you you also have this this problem that

840
00:39:02,099 --> 00:39:04,380
you can create conflicting manifests

841
00:39:04,380 --> 00:39:08,280
that are equivalent equally valid for a

842
00:39:08,280 --> 00:39:10,380
given time Point

843
00:39:10,380 --> 00:39:12,960
um and then when when node starts

844
00:39:12,960 --> 00:39:14,940
synchronizing then you have to have the

845
00:39:14,940 --> 00:39:17,220
mechanism for merging this and that's

846
00:39:17,220 --> 00:39:18,780
probably it's a new manifest which again

847
00:39:18,780 --> 00:39:21,060
has to be synchronized so I see I see

848
00:39:21,060 --> 00:39:22,980
problems coming out of the Manifest

849
00:39:22,980 --> 00:39:24,060
approach

850
00:39:24,060 --> 00:39:26,160
um when you have multiple authors as

851
00:39:26,160 --> 00:39:29,220
well as streaming as well as deletion

852
00:39:29,220 --> 00:39:32,060
um next slide please

853
00:39:32,400 --> 00:39:33,839
so

854
00:39:33,839 --> 00:39:35,400
I tried to get rid of the Manifest

855
00:39:35,400 --> 00:39:37,859
basically and the approach is is it's

856
00:39:37,859 --> 00:39:39,839
not particularly magical it's just very

857
00:39:39,839 --> 00:39:41,700
similar to something like git dust or

858
00:39:41,700 --> 00:39:43,380
even a

859
00:39:43,380 --> 00:39:46,200
blockchain without proof uh kind of

860
00:39:46,200 --> 00:39:47,339
thing

861
00:39:47,339 --> 00:39:51,000
um I just uh oh yeah by the way um these

862
00:39:51,000 --> 00:39:53,700
these um content Parts I'm calling them

863
00:39:53,700 --> 00:39:54,900
extends

864
00:39:54,900 --> 00:39:57,300
from file systems

865
00:39:57,300 --> 00:39:57,960
um

866
00:39:57,960 --> 00:40:00,180
the first one in a in a resource has a

867
00:40:00,180 --> 00:40:02,180
random identifier

868
00:40:02,180 --> 00:40:04,920
excuse me

869
00:40:04,920 --> 00:40:07,160
and then I just um

870
00:40:07,160 --> 00:40:10,140
create every subsequent identifier as a

871
00:40:10,140 --> 00:40:11,599
hash of the parents

872
00:40:11,599 --> 00:40:14,579
parents extend identifier and the author

873
00:40:14,579 --> 00:40:17,040
identifier and you have a verifiable and

874
00:40:17,040 --> 00:40:20,160
deterministic and also conflict-free uh

875
00:40:20,160 --> 00:40:22,920
way of of just allowing multiple authors

876
00:40:22,920 --> 00:40:23,820
to

877
00:40:23,820 --> 00:40:26,880
to create extents in parallel

878
00:40:26,880 --> 00:40:30,420
the problem is that this Con if you just

879
00:40:30,420 --> 00:40:33,180
don't give a mechanism for choosing the

880
00:40:33,180 --> 00:40:35,880
best the ideal parent then you create a

881
00:40:35,880 --> 00:40:37,320
then you end up with a tree that's

882
00:40:37,320 --> 00:40:40,760
that's that can be very very very wide

883
00:40:40,760 --> 00:40:43,560
comes harder to merge into some

884
00:40:43,560 --> 00:40:47,579
consistent State later on so I added

885
00:40:47,579 --> 00:40:50,160
section on choosing the ideal parent

886
00:40:50,160 --> 00:40:53,099
identifier which is based on the the

887
00:40:53,099 --> 00:40:55,440
leaf node with the longest or most

888
00:40:55,440 --> 00:40:56,700
linear path I don't know how to better

889
00:40:56,700 --> 00:40:59,339
explain explain this other than in the

890
00:40:59,339 --> 00:41:00,780
next slide

891
00:41:00,780 --> 00:41:04,440
um uh yeah so here I have this is from

892
00:41:04,440 --> 00:41:07,500
from my my pre-draft if you want I

893
00:41:07,500 --> 00:41:08,760
haven't submitted it so I haven't

894
00:41:08,760 --> 00:41:11,280
created an ID yet

895
00:41:11,280 --> 00:41:12,180
um

896
00:41:12,180 --> 00:41:13,859
as an example

897
00:41:13,859 --> 00:41:14,520
um

898
00:41:14,520 --> 00:41:16,260
expanded tree that might come out of

899
00:41:16,260 --> 00:41:17,400
this

900
00:41:17,400 --> 00:41:20,099
each each sibling

901
00:41:20,099 --> 00:41:22,500
is basically must be created by a

902
00:41:22,500 --> 00:41:24,780
different author under the scheme right

903
00:41:24,780 --> 00:41:26,640
um so you have at minimum three

904
00:41:26,640 --> 00:41:28,920
different authors in this year

905
00:41:28,920 --> 00:41:30,000
um

906
00:41:30,000 --> 00:41:32,280
and if you look at the longest Parts

907
00:41:32,280 --> 00:41:34,260
well visually speaking it's going to be

908
00:41:34,260 --> 00:41:36,660
uh one of the one of it's not going to

909
00:41:36,660 --> 00:41:37,980
be the one that goes through through

910
00:41:37,980 --> 00:41:41,160
node B B1 at the top but then the

911
00:41:41,160 --> 00:41:43,500
question becomes is it F1 F2 or G and

912
00:41:43,500 --> 00:41:45,780
that's that's what the mechanism is

913
00:41:45,780 --> 00:41:50,119
solving for you next slide please

914
00:41:50,220 --> 00:41:53,280
so basically it's really simple I mean

915
00:41:53,280 --> 00:41:57,480
I'm just taking the the uh weight of the

916
00:41:57,480 --> 00:41:59,880
edge between two nodes as the as one

917
00:41:59,880 --> 00:42:02,940
divided by the number of siblings uh I I

918
00:42:02,940 --> 00:42:06,599
add all the the individual segments into

919
00:42:06,599 --> 00:42:09,060
a pathway and that that gives us a

920
00:42:09,060 --> 00:42:09,960
result

921
00:42:09,960 --> 00:42:12,720
by the way there's a small mistake here

922
00:42:12,720 --> 00:42:14,339
in the

923
00:42:14,339 --> 00:42:17,760
in the uh table that I've fixed in the

924
00:42:17,760 --> 00:42:19,619
documents but not here yet

925
00:42:19,619 --> 00:42:24,359
um in line six you have a b2d and then

926
00:42:24,359 --> 00:42:27,720
in line seven it's ab1d that should be

927
00:42:27,720 --> 00:42:30,300
B2 and then nine eight the same thing

928
00:42:30,300 --> 00:42:33,780
and then you end up having two

929
00:42:33,780 --> 00:42:34,440
um

930
00:42:34,440 --> 00:42:37,380
equally weighted paths and then there's

931
00:42:37,380 --> 00:42:39,540
a simple tiebreaker um

932
00:42:39,540 --> 00:42:41,280
bitwise ordering really very simple

933
00:42:41,280 --> 00:42:44,579
between the the last um

934
00:42:44,579 --> 00:42:47,400
extent identifier and that shows F2

935
00:42:47,400 --> 00:42:50,599
uh next slide

936
00:42:51,660 --> 00:42:52,619
um

937
00:42:52,619 --> 00:42:55,500
so extends must be signed but the

938
00:42:55,500 --> 00:42:58,079
encryption is is optional you either

939
00:42:58,079 --> 00:43:00,180
have a signature a public key signature

940
00:43:00,180 --> 00:43:02,339
when there's no encryption or

941
00:43:02,339 --> 00:43:06,000
aad when when it's also encrypted

942
00:43:06,000 --> 00:43:07,880
um

943
00:43:07,880 --> 00:43:10,500
as this RFC says there's a key

944
00:43:10,500 --> 00:43:15,260
distribution challenge here um the way

945
00:43:15,540 --> 00:43:17,640
I'm hoping to solve this it's not quite

946
00:43:17,640 --> 00:43:20,160
there is that because

947
00:43:20,160 --> 00:43:22,440
um I also have this multiplexing

948
00:43:22,440 --> 00:43:28,079
um uh feature here we can do some key

949
00:43:28,079 --> 00:43:30,240
distribution also just multiplexed into

950
00:43:30,240 --> 00:43:32,880
the same resource

951
00:43:32,880 --> 00:43:35,780
um next slide please

952
00:43:36,780 --> 00:43:39,180
so Multiplex means that that the content

953
00:43:39,180 --> 00:43:40,920
isn't just binary data

954
00:43:40,920 --> 00:43:43,920
um at all it's it's data sections

955
00:43:43,920 --> 00:43:46,619
um now there is of course a Blog section

956
00:43:46,619 --> 00:43:49,680
for binary data but that's uh just one

957
00:43:49,680 --> 00:43:52,140
of of of a few

958
00:43:52,140 --> 00:43:53,940
um having this section also makes the

959
00:43:53,940 --> 00:43:55,920
the format very extensible to other use

960
00:43:55,920 --> 00:43:57,420
cases

961
00:43:57,420 --> 00:43:58,020
um

962
00:43:58,020 --> 00:44:00,440
the sector has a type

963
00:44:00,440 --> 00:44:02,280
self-explanatory and the topic the topic

964
00:44:02,280 --> 00:44:04,260
is more of a context in which to

965
00:44:04,260 --> 00:44:06,000
interpret this this also creates

966
00:44:06,000 --> 00:44:08,760
resource substreams if you want so you

967
00:44:08,760 --> 00:44:11,160
can have a topic that's dedicated to to

968
00:44:11,160 --> 00:44:12,660
your video content a topic that

969
00:44:12,660 --> 00:44:14,220
syndicates to your German language audio

970
00:44:14,220 --> 00:44:16,939
and so forth

971
00:44:16,980 --> 00:44:18,780
um and you can have a topic for future

972
00:44:18,780 --> 00:44:20,460
play of course

973
00:44:20,460 --> 00:44:23,460
that's not in my draft right now I have

974
00:44:23,460 --> 00:44:25,560
some thoughts on how to do this but um

975
00:44:25,560 --> 00:44:27,660
I've just reserved the topic slot for

976
00:44:27,660 --> 00:44:30,000
that's in this draft

977
00:44:30,000 --> 00:44:32,640
um and you have a content type section

978
00:44:32,640 --> 00:44:35,520
which works very much like in HTTP you

979
00:44:35,520 --> 00:44:38,640
define the type of The Blob this is

980
00:44:38,640 --> 00:44:40,440
that's that might follow in this in the

981
00:44:40,440 --> 00:44:42,300
same topic

982
00:44:42,300 --> 00:44:45,359
uh next slide please

983
00:44:45,359 --> 00:44:48,359
all right editing and deleting

984
00:44:48,359 --> 00:44:49,680
um

985
00:44:49,680 --> 00:44:52,680
with this scheme you can't really

986
00:44:52,680 --> 00:44:55,140
um rearrange the tree right that's not

987
00:44:55,140 --> 00:44:56,700
possible

988
00:44:56,700 --> 00:44:57,300
um

989
00:44:57,300 --> 00:44:59,700
it's this there's a permanent order to

990
00:44:59,700 --> 00:45:01,740
to the extents

991
00:45:01,740 --> 00:45:03,420
um

992
00:45:03,420 --> 00:45:05,460
so this whole idea of just forgetting

993
00:45:05,460 --> 00:45:08,520
about one is not going to be be viable

994
00:45:08,520 --> 00:45:10,079
um which is on purpose

995
00:45:10,079 --> 00:45:11,940
um so every extent also has a kind of

996
00:45:11,940 --> 00:45:13,980
version I quote the version thing here

997
00:45:13,980 --> 00:45:15,300
because in in the document actually

998
00:45:15,300 --> 00:45:17,220
there I use version for two different

999
00:45:17,220 --> 00:45:18,660
things already so I didn't want to

1000
00:45:18,660 --> 00:45:20,700
introduce a third one it's it's a sculpt

1001
00:45:20,700 --> 00:45:23,579
counter sculpt to the author um that the

1002
00:45:23,579 --> 00:45:25,140
author increments whenever they create a

1003
00:45:25,140 --> 00:45:27,619
modify an extent

1004
00:45:27,619 --> 00:45:31,079
and that means that actually if you if

1005
00:45:31,079 --> 00:45:33,599
you want to be precise the the object

1006
00:45:33,599 --> 00:45:35,520
name is uh talked to pull off the extent

1007
00:45:35,520 --> 00:45:37,140
identifier and counter because that

1008
00:45:37,140 --> 00:45:38,819
gives you the specific version of the

1009
00:45:38,819 --> 00:45:40,440
extent

1010
00:45:40,440 --> 00:45:43,380
um and if you have that kind of scheme

1011
00:45:43,380 --> 00:45:49,560
then you can start updating your your

1012
00:45:49,560 --> 00:45:54,060
um extend with empty and empty content

1013
00:45:54,060 --> 00:45:55,920
right so erasing is just deleting the

1014
00:45:55,920 --> 00:45:57,660
content section overwriting the content

1015
00:45:57,660 --> 00:45:59,880
sections but keeping the extend

1016
00:45:59,880 --> 00:46:02,700
identifier intact and they can resign it

1017
00:46:02,700 --> 00:46:04,740
and update it

1018
00:46:04,740 --> 00:46:07,759
um next slide please

1019
00:46:08,000 --> 00:46:11,420
that has an effect because

1020
00:46:11,420 --> 00:46:13,200
with

1021
00:46:13,200 --> 00:46:15,180
um the Manifest approach if you forget

1022
00:46:15,180 --> 00:46:18,359
about if you exclude a block from from

1023
00:46:18,359 --> 00:46:21,300
your manifest if you forget about this

1024
00:46:21,300 --> 00:46:24,000
um you can of course out of band notify

1025
00:46:24,000 --> 00:46:26,040
caches that this is no longer relevant

1026
00:46:26,040 --> 00:46:27,780
it should be deleted

1027
00:46:27,780 --> 00:46:30,060
but it's very easy for cache to just

1028
00:46:30,060 --> 00:46:32,220
ignore this I mean it's it's easier to

1029
00:46:32,220 --> 00:46:34,440
not add functionality than to have it

1030
00:46:34,440 --> 00:46:37,319
right that's why this is actually a bit

1031
00:46:37,319 --> 00:46:39,780
fragile for my taste

1032
00:46:39,780 --> 00:46:43,339
um whereas if you have end to end

1033
00:46:43,339 --> 00:46:47,940
encrypted extends and deleting is

1034
00:46:47,940 --> 00:46:50,160
nothing but overwriting the content

1035
00:46:50,160 --> 00:46:53,220
then a cache cannot really distinguish

1036
00:46:53,220 --> 00:46:55,800
between an editing a deletion

1037
00:46:55,800 --> 00:46:58,619
and that should make it more likely that

1038
00:46:58,619 --> 00:47:00,900
they accept the deletion as a valid

1039
00:47:00,900 --> 00:47:02,160
operation that they want to support

1040
00:47:02,160 --> 00:47:05,520
because they don't know about it

1041
00:47:05,520 --> 00:47:07,440
um of course it's still possible

1042
00:47:07,440 --> 00:47:09,540
to find ways around this you know Cache

1043
00:47:09,540 --> 00:47:11,700
can keep all versions of an extend

1044
00:47:11,700 --> 00:47:14,940
but that incurs in cost and I hope

1045
00:47:14,940 --> 00:47:17,220
that that helps get these things

1046
00:47:17,220 --> 00:47:19,500
actually deleted

1047
00:47:19,500 --> 00:47:22,700
um next slide please

1048
00:47:23,160 --> 00:47:24,960
so from the collaborative editing point

1049
00:47:24,960 --> 00:47:26,880
of view which is where we we sort of

1050
00:47:26,880 --> 00:47:28,380
start or one of the angles for which we

1051
00:47:28,380 --> 00:47:30,000
started the container format doesn't

1052
00:47:30,000 --> 00:47:33,119
actually solve that much

1053
00:47:33,119 --> 00:47:35,220
um but at least it does a couple of

1054
00:47:35,220 --> 00:47:38,040
things in the single author use case

1055
00:47:38,040 --> 00:47:39,780
you don't even have a tree you just have

1056
00:47:39,780 --> 00:47:42,420
a single linear list of of of extends

1057
00:47:42,420 --> 00:47:44,460
and you don't have to update the

1058
00:47:44,460 --> 00:47:46,140
Manifest so you have a slightly improved

1059
00:47:46,140 --> 00:47:50,700
stream friendliness there in in this um

1060
00:47:50,700 --> 00:47:54,180
in the multi-auto use case because of

1061
00:47:54,180 --> 00:47:57,000
the ordering scheme I explained earlier

1062
00:47:57,000 --> 00:48:00,619
um you have partial ordering

1063
00:48:02,040 --> 00:48:06,180
what you can't guarantee is that within

1064
00:48:06,180 --> 00:48:08,760
a group of siblings

1065
00:48:08,760 --> 00:48:11,220
um what the precise order of sections

1066
00:48:11,220 --> 00:48:12,300
should be

1067
00:48:12,300 --> 00:48:15,839
but you can guarantee that uh all

1068
00:48:15,839 --> 00:48:19,680
descendants of a particular extent come

1069
00:48:19,680 --> 00:48:22,500
after the parent and that can also

1070
00:48:22,500 --> 00:48:27,079
already already help with with ordering

1071
00:48:27,079 --> 00:48:31,319
things like crdt operations

1072
00:48:31,319 --> 00:48:32,180
um

1073
00:48:32,180 --> 00:48:36,140
and other than

1074
00:48:36,599 --> 00:48:38,940
excuse me other than

1075
00:48:38,940 --> 00:48:41,000
um

1076
00:48:41,700 --> 00:48:45,720
then that um I I really do think that

1077
00:48:45,720 --> 00:48:47,040
that something like end-to-end

1078
00:48:47,040 --> 00:48:50,339
encryption and the ability to embed AAA

1079
00:48:50,339 --> 00:48:51,960
content is

1080
00:48:51,960 --> 00:48:53,400
um

1081
00:48:53,400 --> 00:48:55,680
is very fundamental to how

1082
00:48:55,680 --> 00:48:57,900
we want to shift data around in the

1083
00:48:57,900 --> 00:49:00,599
world and so I I really think it should

1084
00:49:00,599 --> 00:49:02,640
be in a sort of an infrastructure thing

1085
00:49:02,640 --> 00:49:04,619
that when the upper layers like this

1086
00:49:04,619 --> 00:49:06,420
here the T or whatever you're going to

1087
00:49:06,420 --> 00:49:07,740
use there

1088
00:49:07,740 --> 00:49:10,140
um Can can then use

1089
00:49:10,140 --> 00:49:13,040
um next slide please

1090
00:49:13,920 --> 00:49:16,319
next type is

1091
00:49:16,319 --> 00:49:19,380
right so what we also have um is nothing

1092
00:49:19,380 --> 00:49:21,240
to do with this is is something called

1093
00:49:21,240 --> 00:49:22,319
Caprock

1094
00:49:22,319 --> 00:49:25,079
it's capability-based system with

1095
00:49:25,079 --> 00:49:27,000
cryptography um

1096
00:49:27,000 --> 00:49:29,339
yesterday in energy we had a talk about

1097
00:49:29,339 --> 00:49:32,579
power of attorney I I urge you to look

1098
00:49:32,579 --> 00:49:33,960
at that because the approach is almost

1099
00:49:33,960 --> 00:49:35,760
exactly the same

1100
00:49:35,760 --> 00:49:38,160
um just independently done

1101
00:49:38,160 --> 00:49:40,260
um that's something we worked on under

1102
00:49:40,260 --> 00:49:42,720
the iso Foundation Grant

1103
00:49:42,720 --> 00:49:44,339
um and

1104
00:49:44,339 --> 00:49:46,140
really the the work that needs to be

1105
00:49:46,140 --> 00:49:48,119
done as well but that's a separate sort

1106
00:49:48,119 --> 00:49:50,460
of document as to her to specify how we

1107
00:49:50,460 --> 00:49:53,099
can put these tokens into AAA sections

1108
00:49:53,099 --> 00:49:56,220
investors so that comes part of the um

1109
00:49:56,220 --> 00:49:57,839
um authorization scheme let's put it

1110
00:49:57,839 --> 00:50:00,240
that way that we can send authorization

1111
00:50:00,240 --> 00:50:02,700
information along with the data

1112
00:50:02,700 --> 00:50:06,599
we might I don't know yet exactly

1113
00:50:06,599 --> 00:50:07,260
um

1114
00:50:07,260 --> 00:50:10,020
also provide key exchange in either cap

1115
00:50:10,020 --> 00:50:12,000
rock or an additional

1116
00:50:12,000 --> 00:50:15,060
AAA sections investor the there's still

1117
00:50:15,060 --> 00:50:16,260
a bit of

1118
00:50:16,260 --> 00:50:18,119
fuzziness there so there's definitely

1119
00:50:18,119 --> 00:50:20,040
some future work

1120
00:50:20,040 --> 00:50:21,240
um

1121
00:50:21,240 --> 00:50:23,760
next slide please oh yeah that was it

1122
00:50:23,760 --> 00:50:27,140
any any questions

1123
00:50:31,760 --> 00:50:36,480
no not from the room some oh yeah

1124
00:50:36,480 --> 00:50:38,220
um

1125
00:50:38,220 --> 00:50:39,839
yeah

1126
00:50:39,839 --> 00:50:41,720
um

1127
00:50:41,720 --> 00:50:43,819
hi hi

1128
00:50:43,819 --> 00:50:45,900
my name is real

1129
00:50:45,900 --> 00:50:48,599
um I am at the University of Glasgow

1130
00:50:48,599 --> 00:50:51,480
um thank you for interesting talk um so

1131
00:50:51,480 --> 00:50:53,460
the scope I'm just trying to double

1132
00:50:53,460 --> 00:50:55,319
check that my understanding is right um

1133
00:50:55,319 --> 00:50:58,260
so you'll so the scope here is sort of

1134
00:50:58,260 --> 00:51:02,280
uh data container to be used on a sort

1135
00:51:02,280 --> 00:51:03,900
of ICN

1136
00:51:03,900 --> 00:51:06,000
of some sort to bring those features

1137
00:51:06,000 --> 00:51:08,099
that you mentioned to for like right to

1138
00:51:08,099 --> 00:51:09,960
forget forgotten and offline first

1139
00:51:09,960 --> 00:51:12,480
features and that stuff essentially I

1140
00:51:12,480 --> 00:51:13,859
mean what we're doing

1141
00:51:13,859 --> 00:51:15,900
um is we're building our our own

1142
00:51:15,900 --> 00:51:19,319
software stack that

1143
00:51:19,319 --> 00:51:22,200
reads very close to an ICN type solution

1144
00:51:22,200 --> 00:51:25,079
right and it's really for that but it

1145
00:51:25,079 --> 00:51:27,540
has the potential of having having other

1146
00:51:27,540 --> 00:51:30,000
users of course no so if we extracted

1147
00:51:30,000 --> 00:51:31,980
the sort of the design the architecture

1148
00:51:31,980 --> 00:51:34,140
the mechanism into sort of maybe

1149
00:51:34,140 --> 00:51:36,180
potential as a sort of proposal to sort

1150
00:51:36,180 --> 00:51:37,619
of say essentially look this might be

1151
00:51:37,619 --> 00:51:39,780
useful maybe it is okay exactly this

1152
00:51:39,780 --> 00:51:41,460
okay it might not be useful to any of

1153
00:51:41,460 --> 00:51:45,300
you in the room right and so so um I

1154
00:51:45,300 --> 00:51:48,119
know that you don't guarantee that

1155
00:51:48,119 --> 00:51:48,839
um

1156
00:51:48,839 --> 00:51:50,700
right to forget and forgotten is

1157
00:51:50,700 --> 00:51:53,520
actually you know enforced but

1158
00:51:53,520 --> 00:51:57,000
um yeah I I I don't know how you you

1159
00:51:57,000 --> 00:51:58,980
approach this sort of I couldn't fully

1160
00:51:58,980 --> 00:52:00,180
understand how you would want to

1161
00:52:00,180 --> 00:52:02,099
approach the

1162
00:52:02,099 --> 00:52:06,599
um have the right to forgotten and the

1163
00:52:06,599 --> 00:52:09,300
uh offline kind of

1164
00:52:09,300 --> 00:52:13,440
well offline first kind of use do you

1165
00:52:13,440 --> 00:52:15,180
could you maybe elaborate a little bit

1166
00:52:15,180 --> 00:52:17,400
about that so that I can get my head or

1167
00:52:17,400 --> 00:52:18,839
not yeah

1168
00:52:18,839 --> 00:52:19,440
um

1169
00:52:19,440 --> 00:52:21,480
what they're sort of they're sort of

1170
00:52:21,480 --> 00:52:24,599
unconnected in a sense right but uh

1171
00:52:24,599 --> 00:52:25,260
um

1172
00:52:25,260 --> 00:52:28,020
uh when when they do connect it becomes

1173
00:52:28,020 --> 00:52:29,760
interesting you're right about that

1174
00:52:29,760 --> 00:52:31,740
um so offline first is simply the the

1175
00:52:31,740 --> 00:52:33,660
notion that um

1176
00:52:33,660 --> 00:52:36,720
i i in our system we don't want to have

1177
00:52:36,720 --> 00:52:39,900
uh constant connectivity as as a

1178
00:52:39,900 --> 00:52:42,000
requirement right so that's that's

1179
00:52:42,000 --> 00:52:43,500
that's really it because we have

1180
00:52:43,500 --> 00:52:45,240
locations in the world where there is no

1181
00:52:45,240 --> 00:52:46,920
connectivity you should still be able to

1182
00:52:46,920 --> 00:52:49,020
work on something and when you work

1183
00:52:49,020 --> 00:52:51,119
collaboratively on something and at some

1184
00:52:51,119 --> 00:52:52,859
point this has to be merged which is

1185
00:52:52,859 --> 00:52:54,420
basically the same sort of problem that

1186
00:52:54,420 --> 00:52:56,640
that gets or or solves for for text

1187
00:52:56,640 --> 00:52:57,839
right

1188
00:52:57,839 --> 00:53:01,140
um but in a in a you know more broader

1189
00:53:01,140 --> 00:53:03,300
application if you want

1190
00:53:03,300 --> 00:53:06,480
um the right to be forgotten is is no

1191
00:53:06,480 --> 00:53:08,339
orthogonal to this

1192
00:53:08,339 --> 00:53:10,140
um it's just

1193
00:53:10,140 --> 00:53:13,319
trying to take into consideration that

1194
00:53:13,319 --> 00:53:14,460
um

1195
00:53:14,460 --> 00:53:17,400
asking a cash to to delete content or

1196
00:53:17,400 --> 00:53:20,220
asking a cash asking the cash to delete

1197
00:53:20,220 --> 00:53:22,079
content is very difficult because you

1198
00:53:22,079 --> 00:53:24,359
don't know which caches are involved and

1199
00:53:24,359 --> 00:53:26,520
and it's sort of impossible to know

1200
00:53:26,520 --> 00:53:27,960
right so

1201
00:53:27,960 --> 00:53:29,640
um yeah you can start sending hints out

1202
00:53:29,640 --> 00:53:33,240
maybe in a different protocol but

1203
00:53:33,240 --> 00:53:35,640
that seemed more complicated to me than

1204
00:53:35,640 --> 00:53:37,260
saying well actually deletion and

1205
00:53:37,260 --> 00:53:39,420
overwriting with zero bytes

1206
00:53:39,420 --> 00:53:42,839
you know it's kind of the same and if we

1207
00:53:42,839 --> 00:53:45,780
hide the fact that it might be

1208
00:53:45,780 --> 00:53:46,440
um

1209
00:53:46,440 --> 00:53:48,660
a different operation

1210
00:53:48,660 --> 00:53:51,119
from the caches and they're just more

1211
00:53:51,119 --> 00:53:52,500
likely to go along with it that's that's

1212
00:53:52,500 --> 00:53:54,720
really the whole thing there past that I

1213
00:53:54,720 --> 00:53:55,980
can't guarantee anything

1214
00:53:55,980 --> 00:53:58,260
so does that make sense so it's it's a

1215
00:53:58,260 --> 00:54:00,780
sort of a attempt to sort of allow

1216
00:54:00,780 --> 00:54:04,140
deletion off the network on the in the

1217
00:54:04,140 --> 00:54:05,760
context of the caches but then obviously

1218
00:54:05,760 --> 00:54:07,559
as a consumer once you have it it's

1219
00:54:07,559 --> 00:54:10,740
yours that's of course yeah I guess okay

1220
00:54:10,740 --> 00:54:12,900
great thank you you can't take that away

1221
00:54:12,900 --> 00:54:14,400
no yeah of course of course thank you

1222
00:54:14,400 --> 00:54:17,720
very much so you're welcome

1223
00:54:19,040 --> 00:54:22,140
all right yeah my questions uh in the

1224
00:54:22,140 --> 00:54:23,339
same vein

1225
00:54:23,339 --> 00:54:25,559
um doesn't necessity of Fool's Aaron to

1226
00:54:25,559 --> 00:54:27,720
try and delete data in a large-scale

1227
00:54:27,720 --> 00:54:29,099
distributed system

1228
00:54:29,099 --> 00:54:30,500
uh

1229
00:54:30,500 --> 00:54:32,460
I mean this

1230
00:54:32,460 --> 00:54:34,559
like

1231
00:54:34,559 --> 00:54:37,020
every bit that's ever been sent over a

1232
00:54:37,020 --> 00:54:38,700
wire was stored somewhere

1233
00:54:38,700 --> 00:54:41,220
so yeah so

1234
00:54:41,220 --> 00:54:43,740
I I really don't understand the idea

1235
00:54:43,740 --> 00:54:45,119
that you tried to delete things from

1236
00:54:45,119 --> 00:54:46,619
caches the caches won't have the

1237
00:54:46,619 --> 00:54:49,079
encryption keys anyway

1238
00:54:49,079 --> 00:54:51,960
a well-behaving cache uh is not a

1239
00:54:51,960 --> 00:54:53,339
problem it's always a malicious cash

1240
00:54:53,339 --> 00:54:55,020
that's well you have a malicious cash

1241
00:54:55,020 --> 00:54:56,700
the malicious cash won't have the

1242
00:54:56,700 --> 00:54:58,559
decryption keys so it doesn't matter

1243
00:54:58,559 --> 00:55:01,500
whether it's holding the bits

1244
00:55:01,500 --> 00:55:04,319
that that is uh that is that is the

1245
00:55:04,319 --> 00:55:06,720
hopeful version yes I mean I I agree as

1246
00:55:06,720 --> 00:55:08,099
long as the cryptography holds you're

1247
00:55:08,099 --> 00:55:10,440
right at that point we don't need it but

1248
00:55:10,440 --> 00:55:12,599
if the cryptography doesn't hold none of

1249
00:55:12,599 --> 00:55:14,880
none of stuff works anyway

1250
00:55:14,880 --> 00:55:15,960
true

1251
00:55:15,960 --> 00:55:17,940
true okay

1252
00:55:17,940 --> 00:55:20,240
um one other

1253
00:55:20,460 --> 00:55:22,020
it seems to be

1254
00:55:22,020 --> 00:55:22,680
um

1255
00:55:22,680 --> 00:55:24,540
working towards some of the same goals

1256
00:55:24,540 --> 00:55:26,400
you do is a system called secure

1257
00:55:26,400 --> 00:55:28,020
scuttlebutt

1258
00:55:28,020 --> 00:55:29,300
I

1259
00:55:29,300 --> 00:55:30,900
know

1260
00:55:30,900 --> 00:55:33,059
I know I know it's I mean I don't know

1261
00:55:33,059 --> 00:55:34,559
every detail about but I don't know it

1262
00:55:34,559 --> 00:55:35,819
yes

1263
00:55:35,819 --> 00:55:37,859
yeah it seems to have this

1264
00:55:37,859 --> 00:55:40,140
uh distribution properties is your

1265
00:55:40,140 --> 00:55:41,640
system that's why

1266
00:55:41,640 --> 00:55:43,680
you know partial ordering single Source

1267
00:55:43,680 --> 00:55:45,480
chain data

1268
00:55:45,480 --> 00:55:48,839
um it has similarities Horizons you know

1269
00:55:48,839 --> 00:55:51,480
all that kind of stuff yep yep yep great

1270
00:55:51,480 --> 00:55:52,559
thank you

1271
00:55:52,559 --> 00:55:55,160
thank you

1272
00:55:59,940 --> 00:56:01,500
okay

1273
00:56:01,500 --> 00:56:02,640
um okay

1274
00:56:02,640 --> 00:56:05,040
um other questions

1275
00:56:05,040 --> 00:56:06,960
um yeah thank you very much Jens um of

1276
00:56:06,960 --> 00:56:08,400
course

1277
00:56:08,400 --> 00:56:12,180
so um yeah we do this from time to time

1278
00:56:12,180 --> 00:56:15,420
um say having presentations and say in

1279
00:56:15,420 --> 00:56:18,420
the broader context of

1280
00:56:18,420 --> 00:56:20,400
if if you like information Centric

1281
00:56:20,400 --> 00:56:22,559
systems and um

1282
00:56:22,559 --> 00:56:25,380
it's also sometimes quite interesting to

1283
00:56:25,380 --> 00:56:28,400
um you know understand their particular

1284
00:56:28,400 --> 00:56:31,800
constraints and uh as yeah we just

1285
00:56:31,800 --> 00:56:33,900
mentioned scuttled but we discussed

1286
00:56:33,900 --> 00:56:35,040
earlier

1287
00:56:35,040 --> 00:56:37,859
so let's keep doing this

1288
00:56:37,859 --> 00:56:38,640
um

1289
00:56:38,640 --> 00:56:41,579
but now we come back to say a core ICN

1290
00:56:41,579 --> 00:56:45,920
topic again and we have um

1291
00:56:46,099 --> 00:56:49,380
talking about ICN as a service using the

1292
00:56:49,380 --> 00:56:51,960
C4 implementation and let me bring this

1293
00:56:51,960 --> 00:56:54,140
up

1294
00:57:00,660 --> 00:57:01,740
hi

1295
00:57:01,740 --> 00:57:04,640
thank you for introduction

1296
00:57:04,640 --> 00:57:07,460
is from NSD Japan

1297
00:57:07,460 --> 00:57:11,520
uh today I'll talk about uh CFO ccnx

1298
00:57:11,520 --> 00:57:14,040
based Cloud native that talk functions

1299
00:57:14,040 --> 00:57:19,079
for deploying the ICN as a services so

1300
00:57:19,079 --> 00:57:22,380
is the next starfish

1301
00:57:22,380 --> 00:57:24,780
so this is the outline of the my

1302
00:57:24,780 --> 00:57:27,180
presentation and the first I'll explain

1303
00:57:27,180 --> 00:57:29,940
the motivation in the background and we

1304
00:57:29,940 --> 00:57:34,040
introduce the sephor and Pico which is

1305
00:57:34,040 --> 00:57:38,880
developed by the nict and there and that

1306
00:57:38,880 --> 00:57:42,480
maybe we try to integrate simple with

1307
00:57:42,480 --> 00:57:45,359
the docker platforms for deploying the

1308
00:57:45,359 --> 00:57:47,940
ICN as a services

1309
00:57:47,940 --> 00:57:49,200
and

1310
00:57:49,200 --> 00:57:52,440
and we explained some summary scenarios

1311
00:57:52,440 --> 00:57:55,440
and the final conquer my presentation so

1312
00:57:55,440 --> 00:57:58,099
next please

1313
00:57:58,559 --> 00:58:03,000
so a thousand year has been passed since

1314
00:58:03,000 --> 00:58:05,819
the original concept of the ICN is

1315
00:58:05,819 --> 00:58:07,680
advocated

1316
00:58:07,680 --> 00:58:10,079
the concept is changing an end of our

1317
00:58:10,079 --> 00:58:11,940
network from the host Centric to the

1318
00:58:11,940 --> 00:58:13,260
content Centric

1319
00:58:13,260 --> 00:58:17,700
and the icing is a country forked to the

1320
00:58:17,700 --> 00:58:20,720
several Concrete Network objectives ccnx

1321
00:58:20,720 --> 00:58:24,540
uh as specified in the iot overseas and

1322
00:58:24,540 --> 00:58:28,559
the ndn name data networking by the NDA

1323
00:58:28,559 --> 00:58:29,640
project

1324
00:58:29,640 --> 00:58:32,339
and actually we and ICT are developing

1325
00:58:32,339 --> 00:58:35,400
the servo which is combined uh with the

1326
00:58:35,400 --> 00:58:39,900
ccnx 1.0 and uh

1327
00:58:39,900 --> 00:58:41,900
so what is an open source software

1328
00:58:41,900 --> 00:58:44,819
platform and enabling a ccnx based

1329
00:58:44,819 --> 00:58:46,020
Communications

1330
00:58:46,020 --> 00:58:47,760
and uh

1331
00:58:47,760 --> 00:58:50,160
yeah and the

1332
00:58:50,160 --> 00:58:52,559
the software there's a lot of the

1333
00:58:52,559 --> 00:58:55,619
research is uh about the routing and

1334
00:58:55,619 --> 00:58:58,200
farting and the caching and now security

1335
00:58:58,200 --> 00:59:01,440
has been proposed by the some uh several

1336
00:59:01,440 --> 00:59:04,680
uh many uh research communities of an

1337
00:59:04,680 --> 00:59:07,260
ICN but the one missing a piece might be

1338
00:59:07,260 --> 00:59:10,020
a development Solutions of the icing

1339
00:59:10,020 --> 00:59:12,720
modules into the existing internet

1340
00:59:12,720 --> 00:59:14,460
infrastructures

1341
00:59:14,460 --> 00:59:17,480
so next please

1342
00:59:17,520 --> 00:59:20,760
so in my presentation uh first I will

1343
00:59:20,760 --> 00:59:23,700
introduced the Sephora which is open

1344
00:59:23,700 --> 00:59:25,559
source software platform for enabling

1345
00:59:25,559 --> 00:59:29,280
assistance specs Communications and

1346
00:59:29,280 --> 00:59:31,619
also therapico which is a application

1347
00:59:31,619 --> 00:59:33,660
development on tools

1348
00:59:33,660 --> 00:59:37,680
and then we try to integrate the CFO

1349
00:59:37,680 --> 00:59:41,520
with a Docker platform and for easy and

1350
00:59:41,520 --> 00:59:45,240
love it the deployment of the ice and

1351
00:59:45,240 --> 00:59:47,760
so we'd like to introduce a method for

1352
00:59:47,760 --> 00:59:49,980
easily deployment icing as a micro

1353
00:59:49,980 --> 00:59:52,380
services and a quick quick constructing

1354
00:59:52,380 --> 00:59:57,599
the icnbs networks so next step please

1355
00:59:57,599 --> 01:00:01,319
so now I introduce uh say for ccnx based

1356
01:00:01,319 --> 01:00:03,420
extensible pocket one NG and the server

1357
01:00:03,420 --> 01:00:04,380
Pico

1358
01:00:04,380 --> 01:00:07,280
so next please

1359
01:00:07,500 --> 01:00:10,920
so therefore stands for the yeah I see

1360
01:00:10,920 --> 01:00:12,059
it's going to base the X and pocket

1361
01:00:12,059 --> 01:00:14,040
Warrior engine and which is compared to

1362
01:00:14,040 --> 01:00:16,260
visual system is 1.0

1363
01:00:16,260 --> 01:00:18,299
and

1364
01:00:18,299 --> 01:00:21,720
sorry it is originally designed in 2016

1365
01:00:21,720 --> 01:00:25,799
and six years has been passed and

1366
01:00:25,799 --> 01:00:28,260
it can handle the interest and content

1367
01:00:28,260 --> 01:00:31,500
object file and caching and it the

1368
01:00:31,500 --> 01:00:35,460
source code of the C4 is our previous so

1369
01:00:35,460 --> 01:00:38,180
scores of the answer foreign

1370
01:00:38,180 --> 01:00:42,299
URL so you can download it from the web

1371
01:00:42,299 --> 01:00:44,160
page or GitHub

1372
01:00:44,160 --> 01:00:47,760
okay thank you next sorry please so

1373
01:00:47,760 --> 01:00:49,920
simple sets us throwing a free design

1374
01:00:49,920 --> 01:00:53,960
policies find the right weight and

1375
01:00:53,960 --> 01:00:57,000
usability and extensibility

1376
01:00:57,000 --> 01:00:59,819
so most important thing is a lightweight

1377
01:00:59,819 --> 01:01:02,220
implementation so the software's

1378
01:01:02,220 --> 01:01:04,740
platform should be uh usable for the

1379
01:01:04,740 --> 01:01:07,020
resource concerned devices such as a

1380
01:01:07,020 --> 01:01:10,440
sensor node and also depending on the

1381
01:01:10,440 --> 01:01:12,960
situations or network requirements we

1382
01:01:12,960 --> 01:01:16,740
need to extend it so the platform should

1383
01:01:16,740 --> 01:01:20,040
be easily extensible to the accommodated

1384
01:01:20,040 --> 01:01:22,020
novel functions to the satisfy the

1385
01:01:22,020 --> 01:01:26,180
future network needs so next please

1386
01:01:27,839 --> 01:01:29,760
support has in order to realize that

1387
01:01:29,760 --> 01:01:32,099
this policies so Sephora has a plugable

1388
01:01:32,099 --> 01:01:33,420
architectures

1389
01:01:33,420 --> 01:01:35,400
so as you can see the Sephora will

1390
01:01:35,400 --> 01:01:39,000
continue consists of the uh two quadamus

1391
01:01:39,000 --> 01:01:42,359
called the 78d and the Cs manager d

1392
01:01:42,359 --> 01:01:44,640
now certain things is a packet firing

1393
01:01:44,640 --> 01:01:47,460
engine and the Cs margin D is a caching

1394
01:01:47,460 --> 01:01:48,839
engine

1395
01:01:48,839 --> 01:01:52,799
so depending on the situations uh for

1396
01:01:52,799 --> 01:01:55,380
in the case that you require the high

1397
01:01:55,380 --> 01:01:58,740
Network networking performance uh we

1398
01:01:58,740 --> 01:02:01,619
need you need to prepare some high-end

1399
01:02:01,619 --> 01:02:04,619
machines such as the routers and enable

1400
01:02:04,619 --> 01:02:08,040
the second D and the Cs manager D and

1401
01:02:08,040 --> 01:02:11,640
there is some various programs so you

1402
01:02:11,640 --> 01:02:15,299
can deploy the full icing stack node

1403
01:02:15,299 --> 01:02:18,119
but but you require the lightweight

1404
01:02:18,119 --> 01:02:21,359
implementation such as a plus value by

1405
01:02:21,359 --> 01:02:23,579
implementations you just enable the

1406
01:02:23,579 --> 01:02:26,700
second ID with some minimum uh

1407
01:02:26,700 --> 01:02:28,319
programming so

1408
01:02:28,319 --> 01:02:31,200
researchers can install necessary eyes

1409
01:02:31,200 --> 01:02:33,059
and functions depending on the

1410
01:02:33,059 --> 01:02:34,200
situations

1411
01:02:34,200 --> 01:02:36,599
under their requirements machine

1412
01:02:36,599 --> 01:02:38,940
requirements for considering the uh

1413
01:02:38,940 --> 01:02:41,099
there was in resource course right so

1414
01:02:41,099 --> 01:02:45,020
next please next slide please

1415
01:02:45,359 --> 01:02:48,359
so

1416
01:02:49,200 --> 01:02:51,720
so now it's always ready for providing

1417
01:02:51,720 --> 01:02:54,240
the origin package for the ccnx based

1418
01:02:54,240 --> 01:02:55,440
Communications

1419
01:02:55,440 --> 01:02:58,760
I mean according

1420
01:02:59,359 --> 01:03:03,059
with the extensive Province and

1421
01:03:03,059 --> 01:03:05,400
consumer product our consumer utilities

1422
01:03:05,400 --> 01:03:09,000
uh and the producer utilities and also

1423
01:03:09,000 --> 01:03:11,460
we provide a network management tools

1424
01:03:11,460 --> 01:03:15,900
CCN info so this is for our own package

1425
01:03:15,900 --> 01:03:20,180
so you exercise please

1426
01:03:22,940 --> 01:03:26,579
is a simple person compact package

1427
01:03:26,579 --> 01:03:28,980
and which is open in the following URL

1428
01:03:28,980 --> 01:03:32,579
so and the same Pico is a python-based

1429
01:03:32,579 --> 01:03:35,220
wrapper program that helps development

1430
01:03:35,220 --> 01:03:37,200
systems X applications

1431
01:03:37,200 --> 01:03:40,500
so and it can enable easy coding of the

1432
01:03:40,500 --> 01:03:42,420
Python program as compared to the

1433
01:03:42,420 --> 01:03:44,160
original C language

1434
01:03:44,160 --> 01:03:46,799
for example you want to send the

1435
01:03:46,799 --> 01:03:50,940
interest packet you need to write the 33

1436
01:03:50,940 --> 01:03:54,599
lines in C language uh answer in the

1437
01:03:54,599 --> 01:03:57,660
left figure but we're using a server

1438
01:03:57,660 --> 01:04:00,960
Pico we can reduce it to the core lines

1439
01:04:00,960 --> 01:04:03,420
just imported as a optical library and

1440
01:04:03,420 --> 01:04:06,660
just create a Honda 100 and just call

1441
01:04:06,660 --> 01:04:08,339
the center in this packet

1442
01:04:08,339 --> 01:04:10,680
so self Pico is a very user-friendly

1443
01:04:10,680 --> 01:04:12,420
implementation

1444
01:04:12,420 --> 01:04:15,559
so next slide is

1445
01:04:15,559 --> 01:04:19,440
no now I enter the main top

1446
01:04:19,440 --> 01:04:22,740
and Docker Integrations so what is a doc

1447
01:04:22,740 --> 01:04:25,740
aziro the docker is very famous platform

1448
01:04:25,740 --> 01:04:28,079
for computer-based virtualization

1449
01:04:28,079 --> 01:04:30,599
Technologies for the quick and the

1450
01:04:30,599 --> 01:04:33,480
scalable Network Services

1451
01:04:33,480 --> 01:04:36,000
so there's some

1452
01:04:36,000 --> 01:04:38,760
features and benefits lightweight and

1453
01:04:38,760 --> 01:04:41,280
performance and scalability so the most

1454
01:04:41,280 --> 01:04:43,799
important point is uh local doesn't have

1455
01:04:43,799 --> 01:04:48,000
the uh OS so it is very uh lightweight

1456
01:04:48,000 --> 01:04:51,359
and you can enrich the evaluations over

1457
01:04:51,359 --> 01:04:54,480
the scenarios and you can facilitate the

1458
01:04:54,480 --> 01:04:58,140
Comfort double test of the develop the

1459
01:04:58,140 --> 01:04:59,400
ICN services

1460
01:04:59,400 --> 01:05:02,220
and also scalability also so next side

1461
01:05:02,220 --> 01:05:04,759
Breeze

1462
01:05:05,579 --> 01:05:08,520
so this is uh just a simple example

1463
01:05:08,520 --> 01:05:10,500
scenarios with a several Docker based

1464
01:05:10,500 --> 01:05:13,859
networking so in this scenarios a

1465
01:05:13,859 --> 01:05:15,660
consumer download a file from the

1466
01:05:15,660 --> 01:05:18,359
producer the producer responds to that

1467
01:05:18,359 --> 01:05:20,339
they are request and the send back the

1468
01:05:20,339 --> 01:05:24,119
data and the resistor X router uh the

1469
01:05:24,119 --> 01:05:26,339
course definitely stores relationship

1470
01:05:26,339 --> 01:05:30,780
data into the Cs uh so uh such as a CS

1471
01:05:30,780 --> 01:05:32,940
manager ID so this is a very simple

1472
01:05:32,940 --> 01:05:34,200
scenarios

1473
01:05:34,200 --> 01:05:37,640
so next time please

1474
01:05:38,099 --> 01:05:42,119
uh this is a how to uh lighting a Docker

1475
01:05:42,119 --> 01:05:46,619
file so but I'll show skip my details of

1476
01:05:46,619 --> 01:05:52,079
the uh this uh how

1477
01:05:52,079 --> 01:05:52,760
um

1478
01:05:52,760 --> 01:05:56,460
just interesting is uh we use a we

1479
01:05:56,460 --> 01:05:59,579
Define the three services one is the

1480
01:05:59,579 --> 01:06:02,099
base Services which is a base functions

1481
01:06:02,099 --> 01:06:06,660
as I say node and the next slide please

1482
01:06:06,660 --> 01:06:09,059
and then we use a minimum function

1483
01:06:09,059 --> 01:06:12,119
serving as a ICM node uh that is uh

1484
01:06:12,119 --> 01:06:13,619
installation in the application

1485
01:06:13,619 --> 01:06:14,700
vibrations

1486
01:06:14,700 --> 01:06:17,640
Next Step please

1487
01:06:17,640 --> 01:06:21,000
and also the we need a cache services so

1488
01:06:21,000 --> 01:06:23,940
you can Define the sketch Services as

1489
01:06:23,940 --> 01:06:27,480
following the docker file so we totally

1490
01:06:27,480 --> 01:06:30,960
use a free uh this uh so we type over

1491
01:06:30,960 --> 01:06:32,700
the talker file and there's three types

1492
01:06:32,700 --> 01:06:34,079
of microsources

1493
01:06:34,079 --> 01:06:36,839
so like so please

1494
01:06:36,839 --> 01:06:39,720
and also we leverage the docker compose

1495
01:06:39,720 --> 01:06:43,440
tools which is very useful for defending

1496
01:06:43,440 --> 01:06:45,539
defining and learning and multiple

1497
01:06:45,539 --> 01:06:48,480
contains local applications

1498
01:06:48,480 --> 01:06:51,599
so it's very easy configurations we're

1499
01:06:51,599 --> 01:06:55,380
using a yamra style file uh as shown in

1500
01:06:55,380 --> 01:06:57,240
the light figure

1501
01:06:57,240 --> 01:07:01,440
and it can create the and starts the or

1502
01:07:01,440 --> 01:07:04,319
the services from the configuration with

1503
01:07:04,319 --> 01:07:07,440
a single command so in my experience it

1504
01:07:07,440 --> 01:07:09,900
is very easy to conduct a scenario based

1505
01:07:09,900 --> 01:07:13,980
evaluations such as immigrations unlike

1506
01:07:13,980 --> 01:07:18,539
uh metal oxidations such as nl3 so the

1507
01:07:18,539 --> 01:07:21,480
answer in the right figure so in this uh

1508
01:07:21,480 --> 01:07:24,960
example we Define the producer services

1509
01:07:24,960 --> 01:07:27,539
and my router services and consumer

1510
01:07:27,539 --> 01:07:30,420
services and each service are built from

1511
01:07:30,420 --> 01:07:34,020
the cache or the minimum images

1512
01:07:34,020 --> 01:07:38,240
so next step is okay

1513
01:07:38,240 --> 01:07:42,119
now I'll show you some sample scenarios

1514
01:07:42,119 --> 01:07:44,760
next breeds

1515
01:07:44,760 --> 01:07:46,819
so

1516
01:07:46,819 --> 01:07:49,559
this is a video streaming use case is

1517
01:07:49,559 --> 01:07:52,799
over the internet and we uh in the city

1518
01:07:52,799 --> 01:07:55,980
had the icing summer workshop last year

1519
01:07:55,980 --> 01:07:58,500
which is headed in the fully online

1520
01:07:58,500 --> 01:07:59,520
Style

1521
01:07:59,520 --> 01:08:02,460
and we demonstrated the Marcus video

1522
01:08:02,460 --> 01:08:04,440
streaming using a simple Docker

1523
01:08:04,440 --> 01:08:06,240
platforms

1524
01:08:06,240 --> 01:08:09,720
and in this demonstration the producer

1525
01:08:09,720 --> 01:08:13,500
is located at the nicth Tokyo and the

1526
01:08:13,500 --> 01:08:17,939
consumers are around in Japan and let's

1527
01:08:17,939 --> 01:08:20,160
see with the video streaming from their

1528
01:08:20,160 --> 01:08:23,819
home or schools or companies

1529
01:08:23,819 --> 01:08:26,520
so what is important here is the old

1530
01:08:26,520 --> 01:08:29,460
purchase participants are including the

1531
01:08:29,460 --> 01:08:32,520
beginners such as a larger students can

1532
01:08:32,520 --> 01:08:33,899
uh

1533
01:08:33,899 --> 01:08:39,179
construct icna node on their laptop and

1534
01:08:39,179 --> 01:08:41,719
they can receive the video stream

1535
01:08:41,719 --> 01:08:45,899
successfully so this is very uh I think

1536
01:08:45,899 --> 01:08:49,100
this is very uh comfortable

1537
01:08:49,100 --> 01:08:52,679
based ICN networking is very comfortable

1538
01:08:52,679 --> 01:08:56,219
and useful for the special beginners and

1539
01:08:56,219 --> 01:08:59,040
which is very uh kind and

1540
01:08:59,040 --> 01:09:01,140
uh

1541
01:09:01,140 --> 01:09:04,698
yeah comfortable for uh

1542
01:09:04,698 --> 01:09:07,679
IC network over the internet

1543
01:09:07,679 --> 01:09:10,738
so next slide please

1544
01:09:10,738 --> 01:09:14,640
yeah this is a my conclusion so

1545
01:09:14,640 --> 01:09:16,439
in a

1546
01:09:16,439 --> 01:09:19,319
future uh we are now passing a

1547
01:09:19,319 --> 01:09:21,540
possibility of a collaboration with the

1548
01:09:21,540 --> 01:09:24,120
emerging orchestration technology such

1549
01:09:24,120 --> 01:09:27,479
as kubernetes and we believe that this

1550
01:09:27,479 --> 01:09:29,520
as a whole Docker based networking can

1551
01:09:29,520 --> 01:09:32,640
be a one possible options for the easily

1552
01:09:32,640 --> 01:09:35,759
constructing the as a networks over the

1553
01:09:35,759 --> 01:09:38,279
existing internet infrastructures

1554
01:09:38,279 --> 01:09:41,100
so thank you for your kindness this is

1555
01:09:41,100 --> 01:09:44,600
my in the representation

1556
01:09:46,198 --> 01:09:49,198
okay thank you very much

1557
01:09:49,198 --> 01:09:52,339
um do we have questions

1558
01:10:00,540 --> 01:10:02,160
hi thank you very much for uh

1559
01:10:02,160 --> 01:10:04,140
interesting talk uh my name is Rio from

1560
01:10:04,140 --> 01:10:06,060
University of Glasgow

1561
01:10:06,060 --> 01:10:08,100
um so you mentioned

1562
01:10:08,100 --> 01:10:12,239
um using this on a sensor node what kind

1563
01:10:12,239 --> 01:10:14,040
of sensor node have you looked into

1564
01:10:14,040 --> 01:10:15,900
running it on a real Hardware have you

1565
01:10:15,900 --> 01:10:17,880
tried it so far I I'm just curious about

1566
01:10:17,880 --> 01:10:21,480
sort of using Docker based system on the

1567
01:10:21,480 --> 01:10:23,100
sensor node I don't know what kind of

1568
01:10:23,100 --> 01:10:25,380
like power you like scale you were

1569
01:10:25,380 --> 01:10:28,560
talking about so I just wow so uh I

1570
01:10:28,560 --> 01:10:31,739
introduced a simple is running on the

1571
01:10:31,739 --> 01:10:34,679
doc uh sensor node such as a Raspberry

1572
01:10:34,679 --> 01:10:39,020
Pi but uh I never I'll try to do the uh

1573
01:10:39,020 --> 01:10:42,000
integration in the sensor but it can be

1574
01:10:42,000 --> 01:10:43,920
used on the

1575
01:10:43,920 --> 01:10:45,860
the act

1576
01:10:45,860 --> 01:10:49,440
because uh several uh says Raspberry Pi

1577
01:10:49,440 --> 01:10:51,540
is a very uh

1578
01:10:51,540 --> 01:10:55,620
uh what should I say uh

1579
01:10:55,620 --> 01:10:59,880
capable capable yeah Constructors very

1580
01:10:59,880 --> 01:11:03,000
lightweight so it can be uh easily act

1581
01:11:03,000 --> 01:11:05,820
so the effect you're talking about sort

1582
01:11:05,820 --> 01:11:08,820
of the the kind of modern Raspberry Pi

1583
01:11:08,820 --> 01:11:11,940
with like quite powerful ones that are

1584
01:11:11,940 --> 01:11:13,320
that's the kind of the Baseline at the

1585
01:11:13,320 --> 01:11:14,340
moment of sense and all that we're

1586
01:11:14,340 --> 01:11:16,199
talking about yeah okay thank you very

1587
01:11:16,199 --> 01:11:17,400
much

1588
01:11:17,400 --> 01:11:20,040
thank you very questions sorry one more

1589
01:11:20,040 --> 01:11:22,260
question okay you said you said um only

1590
01:11:22,260 --> 01:11:23,520
one package

1591
01:11:23,520 --> 01:11:25,980
then you also said that the the you can

1592
01:11:25,980 --> 01:11:27,540
have subset of it to make it more

1593
01:11:27,540 --> 01:11:30,480
lightweight to um adapt to more less

1594
01:11:30,480 --> 01:11:33,360
powerful devices are these all Impact

1595
01:11:33,360 --> 01:11:35,760
only one as in like the there's one

1596
01:11:35,760 --> 01:11:37,800
binary that contains everything and you

1597
01:11:37,800 --> 01:11:39,900
switch it on and off or you have like a

1598
01:11:39,900 --> 01:11:42,239
lightweight binary that you create for

1599
01:11:42,239 --> 01:11:43,980
the cases of using on a low storage

1600
01:11:43,980 --> 01:11:47,280
device is it the fomo or the latter

1601
01:11:47,280 --> 01:11:48,960
oh

1602
01:11:48,960 --> 01:11:52,920
sorry it what is yours so the form so I

1603
01:11:52,920 --> 01:11:54,719
I'm wondering whether you have one

1604
01:11:54,719 --> 01:11:57,360
binary that has switches or are you

1605
01:11:57,360 --> 01:11:59,340
building for smaller

1606
01:11:59,340 --> 01:12:02,280
ones for the sensor nodes yes okay so

1607
01:12:02,280 --> 01:12:03,840
that so the last okay thank you very

1608
01:12:03,840 --> 01:12:06,020
much

1609
01:12:09,020 --> 01:12:11,520
so so which one is is it the first one

1610
01:12:11,520 --> 01:12:13,800
or the second one the first option is

1611
01:12:13,800 --> 01:12:15,780
the switches so like a command line

1612
01:12:15,780 --> 01:12:19,080
option yeah okay yes okay it just

1613
01:12:19,080 --> 01:12:21,600
switches then so okay so in which case

1614
01:12:21,600 --> 01:12:23,880
then then the full size binary is used

1615
01:12:23,880 --> 01:12:28,260
everywhere including the little devices

1616
01:12:28,260 --> 01:12:31,800
oh no no just I'm sorry though later on

1617
01:12:31,800 --> 01:12:34,380
this right so for building the uh

1618
01:12:34,380 --> 01:12:37,980
support uh that's a could you back to

1619
01:12:37,980 --> 01:12:40,620
the docker fire constructions that's

1620
01:12:40,620 --> 01:12:40,950
right

1621
01:12:40,950 --> 01:12:43,920
[Music]

1622
01:12:43,920 --> 01:12:48,360
so when building this C4 uh

1623
01:12:48,360 --> 01:12:51,320
previous one please

1624
01:12:52,920 --> 01:12:56,100
yeah so as you can see they when

1625
01:12:56,100 --> 01:13:00,420
configuring the uh server and the

1626
01:13:00,420 --> 01:13:03,360
building is whole uh we can configure uh

1627
01:13:03,360 --> 01:13:07,320
What uh we want to use

1628
01:13:07,320 --> 01:13:10,140
the other options enabling the cache

1629
01:13:10,140 --> 01:13:12,440
functional HDs manager functions so

1630
01:13:12,440 --> 01:13:15,840
you don't have to or

1631
01:13:15,840 --> 01:13:18,420
building all the binaries so then you

1632
01:13:18,420 --> 01:13:20,820
can effectively have a smaller binary

1633
01:13:20,820 --> 01:13:23,880
to run on smaller devices with a smaller

1634
01:13:23,880 --> 01:13:25,500
storage capacity okay great thank you

1635
01:13:25,500 --> 01:13:27,679
very much

1636
01:13:28,199 --> 01:13:30,900
okay we have one more question from are

1637
01:13:30,900 --> 01:13:32,880
you soon

1638
01:13:32,880 --> 01:13:35,159
thank you for your presentation my name

1639
01:13:35,159 --> 01:13:38,280
is from physio2 research of Europe very

1640
01:13:38,280 --> 01:13:40,260
very interesting work indeed my question

1641
01:13:40,260 --> 01:13:43,560
you mentioned the video streaming use

1642
01:13:43,560 --> 01:13:45,960
case what was the difference between

1643
01:13:45,960 --> 01:13:49,800
like normal monster video streaming

1644
01:13:49,800 --> 01:13:51,659
like application

1645
01:13:51,659 --> 01:13:56,640
such as a HTTP or some other serving

1646
01:13:56,640 --> 01:13:59,640
applications so uh in there thank you

1647
01:13:59,640 --> 01:14:01,080
for your question so

1648
01:14:01,080 --> 01:14:05,280
I mean ICN uh the Lotus can act the Hope

1649
01:14:05,280 --> 01:14:09,060
by hope matter so on the they can do the

1650
01:14:09,060 --> 01:14:12,000
in-network uh they can provide inner

1651
01:14:12,000 --> 01:14:15,679
functions such as caching and such as

1652
01:14:15,679 --> 01:14:18,840
uh transcoding or something or some

1653
01:14:18,840 --> 01:14:21,960
intelligent function is uh can be

1654
01:14:21,960 --> 01:14:26,900
equipped if it means the each router so

1655
01:14:26,900 --> 01:14:30,840
recovery of the packet is also so

1656
01:14:30,840 --> 01:14:36,600
we can uh enhance the quality of the uh

1657
01:14:36,600 --> 01:14:38,880
story streaming quality compared to the

1658
01:14:38,880 --> 01:14:39,900
uh

1659
01:14:39,900 --> 01:14:43,080
uh conventional HTTP or some other

1660
01:14:43,080 --> 01:14:45,860
approach we I think

1661
01:14:45,860 --> 01:14:47,760
have you tried to compare the

1662
01:14:47,760 --> 01:14:49,320
performances that you achieved using

1663
01:14:49,320 --> 01:14:54,360
your uh API oh not not yet yes not yet

1664
01:14:54,360 --> 01:14:56,880
thank you very much

1665
01:14:56,880 --> 01:14:59,179
foreign

1666
01:15:08,400 --> 01:15:11,340
thanks again for spending your work

1667
01:15:11,340 --> 01:15:14,239
really interesting

1668
01:15:16,440 --> 01:15:19,280
and

1669
01:15:19,739 --> 01:15:22,140
let's move on

1670
01:15:22,140 --> 01:15:23,760
okay thank you

1671
01:15:23,760 --> 01:15:26,659
yeah thanks a lot

1672
01:15:36,780 --> 01:15:39,259
okay

1673
01:15:39,300 --> 01:15:40,020
um

1674
01:15:40,020 --> 01:15:42,900
yeah this target is about a few ideas

1675
01:15:42,900 --> 01:15:47,280
how we can build relevant applications

1676
01:15:47,280 --> 01:15:50,219
um with ICN and then protocol mechanisms

1677
01:15:50,219 --> 01:15:51,480
that we know

1678
01:15:51,480 --> 01:15:53,760
and yeah obviously one important

1679
01:15:53,760 --> 01:15:57,179
application is the web and and so Dave

1680
01:15:57,179 --> 01:15:58,860
and I put some

1681
01:15:58,860 --> 01:16:01,500
say initial thoughts together

1682
01:16:01,500 --> 01:16:03,719
um the background is that um so we we

1683
01:16:03,719 --> 01:16:07,080
started this as a so-called statement or

1684
01:16:07,080 --> 01:16:10,440
a vision paper to the ICN conference in

1685
01:16:10,440 --> 01:16:11,960
September

1686
01:16:11,960 --> 01:16:13,560
and

1687
01:16:13,560 --> 01:16:16,020
um this is like a short two-page paper

1688
01:16:16,020 --> 01:16:18,780
so it doesn't take long time to read it

1689
01:16:18,780 --> 01:16:23,040
and so this was somehow put in a context

1690
01:16:23,040 --> 01:16:25,860
of meta works and um so it wasn't really

1691
01:16:25,860 --> 01:16:27,960
presented at the conference but um

1692
01:16:27,960 --> 01:16:29,760
appeared in a panel

1693
01:16:29,760 --> 01:16:32,040
which was fine but

1694
01:16:32,040 --> 01:16:34,260
um so we thought it could be interesting

1695
01:16:34,260 --> 01:16:37,440
to actually present the idea and get get

1696
01:16:37,440 --> 01:16:40,739
a bit more feedback and maybe also kick

1697
01:16:40,739 --> 01:16:44,219
off some work here in the group

1698
01:16:44,219 --> 01:16:48,239
um the other background is that

1699
01:16:48,239 --> 01:16:49,500
um you know currently there's you know

1700
01:16:49,500 --> 01:16:53,280
lots of talk about quick hdb3 and and so

1701
01:16:53,280 --> 01:16:56,219
on and um so here's an interesting

1702
01:16:56,219 --> 01:16:59,699
um blog posting by Bruce Daly

1703
01:16:59,699 --> 01:17:02,640
um who is characterizing quick

1704
01:17:02,640 --> 01:17:05,219
um basically as the

1705
01:17:05,219 --> 01:17:09,300
um say long missing RPC mechanism in in

1706
01:17:09,300 --> 01:17:11,640
the in the Internet Protocol suit so for

1707
01:17:11,640 --> 01:17:14,400
efficient RPC communication

1708
01:17:14,400 --> 01:17:17,640
and it's not casting you're not as a TCP

1709
01:17:17,640 --> 01:17:21,719
replacement but more like an IPC system

1710
01:17:21,719 --> 01:17:23,040
um which

1711
01:17:23,040 --> 01:17:26,040
um TCP isn't really good good basis for

1712
01:17:26,040 --> 01:17:29,159
in his View and

1713
01:17:29,159 --> 01:17:31,620
um so we we tend to agree

1714
01:17:31,620 --> 01:17:34,500
um and when we when you talk about

1715
01:17:34,500 --> 01:17:36,600
um web communication you have like two

1716
01:17:36,600 --> 01:17:38,280
elements so you you need something like

1717
01:17:38,280 --> 01:17:40,920
efficient say RPC style communication

1718
01:17:40,920 --> 01:17:44,100
but you also need something that is

1719
01:17:44,100 --> 01:17:45,719
typically called rest

1720
01:17:45,719 --> 01:17:48,780
um so some kind of state Evolution on

1721
01:17:48,780 --> 01:17:51,300
servers and and clients and then some

1722
01:17:51,300 --> 01:17:54,440
protocol framework to manage that

1723
01:17:54,440 --> 01:17:58,260
and so whereas quick is

1724
01:17:58,260 --> 01:18:01,560
um say admittedly much better than um

1725
01:18:01,560 --> 01:18:04,140
say the like previous protocol Stacks

1726
01:18:04,140 --> 01:18:05,880
it's

1727
01:18:05,880 --> 01:18:08,219
um so the the approach that we take in

1728
01:18:08,219 --> 01:18:10,560
this paper here is that okay can we

1729
01:18:10,560 --> 01:18:13,380
maybe improve it even further with the

1730
01:18:13,380 --> 01:18:16,020
data oriented design

1731
01:18:16,020 --> 01:18:17,820
so quick

1732
01:18:17,820 --> 01:18:20,699
um reminder or intro tool to rest

1733
01:18:20,699 --> 01:18:22,800
um so um the idea is that you have

1734
01:18:22,800 --> 01:18:25,500
clients and servers and you have

1735
01:18:25,500 --> 01:18:28,080
um say well-defined protocol mechanisms

1736
01:18:28,080 --> 01:18:31,440
that allow you to say setup State on a

1737
01:18:31,440 --> 01:18:34,880
server and then via

1738
01:18:34,880 --> 01:18:39,600
interactions modify the state and say if

1739
01:18:39,600 --> 01:18:41,580
evolve it both on the server and the

1740
01:18:41,580 --> 01:18:42,600
client side

1741
01:18:42,600 --> 01:18:44,100
and

1742
01:18:44,100 --> 01:18:46,020
um so in reality

1743
01:18:46,020 --> 01:18:49,140
um yeah even HTTP is stateless but you

1744
01:18:49,140 --> 01:18:51,420
need some mechanism to refer to this

1745
01:18:51,420 --> 01:18:53,940
state in your interactions

1746
01:18:53,940 --> 01:18:55,440
and

1747
01:18:55,440 --> 01:18:58,199
um so in reality we have used things

1748
01:18:58,199 --> 01:19:00,600
like cookies for example to

1749
01:19:00,600 --> 01:19:03,000
um you know identify

1750
01:19:03,000 --> 01:19:05,100
um clients and then indirectly also the

1751
01:19:05,100 --> 01:19:07,080
client stayed in invest for

1752
01:19:07,080 --> 01:19:08,659
communication

1753
01:19:08,659 --> 01:19:13,380
and if you look into this this the like

1754
01:19:13,380 --> 01:19:15,540
state-of-the-art systems

1755
01:19:15,540 --> 01:19:18,540
um they are so you could say they are

1756
01:19:18,540 --> 01:19:21,540
not quite as optimal as they could be so

1757
01:19:21,540 --> 01:19:23,719
first of all they are something like

1758
01:19:23,719 --> 01:19:26,520
implementation complexity so you have

1759
01:19:26,520 --> 01:19:30,120
several layers of um of of Stacks with

1760
01:19:30,120 --> 01:19:32,100
their interactions

1761
01:19:32,100 --> 01:19:34,679
um so several protocol layers in in this

1762
01:19:34,679 --> 01:19:35,640
deck

1763
01:19:35,640 --> 01:19:37,140
and

1764
01:19:37,140 --> 01:19:38,940
um

1765
01:19:38,940 --> 01:19:41,940
um you're on the other other hand if you

1766
01:19:41,940 --> 01:19:43,679
look at the interactions

1767
01:19:43,679 --> 01:19:46,260
um say using like modern HTTP 3

1768
01:19:46,260 --> 01:19:47,640
communication

1769
01:19:47,640 --> 01:19:49,199
um of course you have quite a few

1770
01:19:49,199 --> 01:19:51,840
messages going back and forth and you

1771
01:19:51,840 --> 01:19:54,780
have request parameters cookies and so

1772
01:19:54,780 --> 01:19:55,560
on

1773
01:19:55,560 --> 01:19:57,000
and

1774
01:19:57,000 --> 01:20:01,560
um so the key idea for HTTP 3 and quick

1775
01:20:01,560 --> 01:20:03,719
is of course that you have the quick

1776
01:20:03,719 --> 01:20:06,780
connection context and then potentially

1777
01:20:06,780 --> 01:20:09,239
several streams in there

1778
01:20:09,239 --> 01:20:10,739
and

1779
01:20:10,739 --> 01:20:13,860
um so we well okay maybe we actually

1780
01:20:13,860 --> 01:20:15,179
have a very good

1781
01:20:15,179 --> 01:20:16,500
tool

1782
01:20:16,500 --> 01:20:18,719
um to come up with a say even better

1783
01:20:18,719 --> 01:20:20,640
approach

1784
01:20:20,640 --> 01:20:24,960
um that tool is uh is ICM of course and

1785
01:20:24,960 --> 01:20:26,640
um so we thought okay what would we need

1786
01:20:26,640 --> 01:20:31,320
for uh for building a platform for rest

1787
01:20:31,320 --> 01:20:33,719
for communication and then by extension

1788
01:20:33,719 --> 01:20:37,560
maybe for future modern web protocols

1789
01:20:37,560 --> 01:20:40,199
and so what we want to do is

1790
01:20:40,199 --> 01:20:43,140
um say do rest Communication in an ICN

1791
01:20:43,140 --> 01:20:45,540
idiomatic way so not you know blindly

1792
01:20:45,540 --> 01:20:48,260
copy all the interaction or message

1793
01:20:48,260 --> 01:20:51,000
flows but think what it's really needed

1794
01:20:51,000 --> 01:20:52,320
so

1795
01:20:52,320 --> 01:20:55,020
for a rest you would have clients and

1796
01:20:55,020 --> 01:20:57,300
servers in a session so it's uh you

1797
01:20:57,300 --> 01:21:00,060
could say yeah it's a it's a

1798
01:21:00,060 --> 01:21:02,760
um an implementation of of this larger

1799
01:21:02,760 --> 01:21:03,719
concept

1800
01:21:03,719 --> 01:21:05,820
and you need some understanding of the

1801
01:21:05,820 --> 01:21:08,280
state Evolution and of course it needs

1802
01:21:08,280 --> 01:21:10,080
to be applicable to any different

1803
01:21:10,080 --> 01:21:11,520
applications

1804
01:21:11,520 --> 01:21:14,280
um and yeah you cannot ignore security

1805
01:21:14,280 --> 01:21:16,560
and privacy

1806
01:21:16,560 --> 01:21:18,000
um so if you want to use this for any

1807
01:21:18,000 --> 01:21:21,380
relevant application you want to

1808
01:21:21,380 --> 01:21:25,860
have a similar security features as HTTP

1809
01:21:25,860 --> 01:21:27,480
and TLS today

1810
01:21:27,480 --> 01:21:31,140
but um so can we do this better than

1811
01:21:31,140 --> 01:21:34,440
like HTTP 3 over over quick today can we

1812
01:21:34,440 --> 01:21:37,620
simplify the protocol Machinery can we

1813
01:21:37,620 --> 01:21:39,480
maybe even have less overhead on The

1814
01:21:39,480 --> 01:21:40,739
Wire

1815
01:21:40,739 --> 01:21:43,800
um without losing um all the nice ICN

1816
01:21:43,800 --> 01:21:48,300
features that we um appreciate

1817
01:21:49,620 --> 01:21:52,860
and okay so if you kind of start doing

1818
01:21:52,860 --> 01:21:54,600
this in a naive approach you would say

1819
01:21:54,600 --> 01:21:57,300
yeah well we have interest uh data

1820
01:21:57,300 --> 01:22:01,020
interactions so we could just map the

1821
01:22:01,020 --> 01:22:04,699
say HTTP or arrest

1822
01:22:04,699 --> 01:22:08,820
requests onto interest packets and then

1823
01:22:08,820 --> 01:22:11,880
we get data back and we could invent

1824
01:22:11,880 --> 01:22:15,780
some naming scheme perhaps even the URI

1825
01:22:15,780 --> 01:22:17,900
like naming scheme and so on

1826
01:22:17,900 --> 01:22:21,540
so we have discussed this earlier this

1827
01:22:21,540 --> 01:22:23,219
is not really a good idea right so

1828
01:22:23,219 --> 01:22:26,480
because as we have seen earlier

1829
01:22:26,480 --> 01:22:28,860
in this client server communication you

1830
01:22:28,860 --> 01:22:31,140
typically have to transmit lots of data

1831
01:22:31,140 --> 01:22:33,480
so you need to negotiate Keys you have

1832
01:22:33,480 --> 01:22:35,820
context information Cookies all these

1833
01:22:35,820 --> 01:22:38,699
things you really can't stuff this into

1834
01:22:38,699 --> 01:22:42,060
interest packets right so we we have

1835
01:22:42,060 --> 01:22:44,340
this flow balance concept and we use

1836
01:22:44,340 --> 01:22:47,820
interest something like the um

1837
01:22:47,820 --> 01:22:50,699
equivalence to X and TCP acknowledgment

1838
01:22:50,699 --> 01:22:53,520
and TCP and um so that would kind of

1839
01:22:53,520 --> 01:22:55,500
screw up this concept we have a product

1840
01:22:55,500 --> 01:22:57,840
uncontrolled uh uncontracted not

1841
01:22:57,840 --> 01:23:00,000
contractual data in the network

1842
01:23:00,000 --> 01:23:03,300
also if I can send

1843
01:23:03,300 --> 01:23:06,239
um say any large blob to any server is

1844
01:23:06,239 --> 01:23:08,580
not really good from a security and

1845
01:23:08,580 --> 01:23:11,219
robustness perspective so you open up

1846
01:23:11,219 --> 01:23:13,620
the door to computer and overload the

1847
01:23:13,620 --> 01:23:16,560
text and so on

1848
01:23:16,560 --> 01:23:19,020
um then also

1849
01:23:19,020 --> 01:23:19,980
um

1850
01:23:19,980 --> 01:23:23,280
in ICN well our interest data

1851
01:23:23,280 --> 01:23:24,840
interaction

1852
01:23:24,840 --> 01:23:28,260
um is kind of controlling things like

1853
01:23:28,260 --> 01:23:30,420
interest rates on the client so it's

1854
01:23:30,420 --> 01:23:33,719
it's operates on a network time scale so

1855
01:23:33,719 --> 01:23:36,900
we um kind of time out these interests

1856
01:23:36,900 --> 01:23:40,020
uh eventually and this triggers

1857
01:23:40,020 --> 01:23:42,659
um say re-transmissions and so on

1858
01:23:42,659 --> 01:23:45,120
um when I do an RPC like communication

1859
01:23:45,120 --> 01:23:48,060
uh well I we can't predict how long the

1860
01:23:48,060 --> 01:23:50,340
server takes for the computation so

1861
01:23:50,340 --> 01:23:52,320
these things operate in a different time

1862
01:23:52,320 --> 01:23:53,540
scale

1863
01:23:53,540 --> 01:23:55,199
and

1864
01:23:55,199 --> 01:23:58,800
um then also I need some some say other

1865
01:23:58,800 --> 01:24:03,060
security concept around this and so we

1866
01:24:03,060 --> 01:24:05,100
have talked about this in the context of

1867
01:24:05,100 --> 01:24:08,520
uh reflexive forwarding uh and and Rise

1868
01:24:08,520 --> 01:24:10,199
where we

1869
01:24:10,199 --> 01:24:13,980
um proposed a mechanism where a

1870
01:24:13,980 --> 01:24:15,719
um say client

1871
01:24:15,719 --> 01:24:17,940
um can initiate

1872
01:24:17,940 --> 01:24:21,239
um say RPC like requests

1873
01:24:21,239 --> 01:24:23,100
um but then we use

1874
01:24:23,100 --> 01:24:26,460
um ICN idiomatic um interest data in the

1875
01:24:26,460 --> 01:24:28,440
opposite so reverse direction from the

1876
01:24:28,440 --> 01:24:31,260
server without exposing

1877
01:24:31,260 --> 01:24:34,800
um any client identity and so this is an

1878
01:24:34,800 --> 01:24:38,100
ICN forwarder extension that it's needed

1879
01:24:38,100 --> 01:24:40,440
there I'm I won't go into this today but

1880
01:24:40,440 --> 01:24:41,940
we talked about it I think last last

1881
01:24:41,940 --> 01:24:44,040
time

1882
01:24:44,040 --> 01:24:47,280
and so the design that we

1883
01:24:47,280 --> 01:24:49,920
um came up with is basically about

1884
01:24:49,920 --> 01:24:51,360
enabling this client server

1885
01:24:51,360 --> 01:24:53,280
communication with a series of request

1886
01:24:53,280 --> 01:24:55,440
response interactions in a session

1887
01:24:55,440 --> 01:24:59,219
context so like in HTTP you can say

1888
01:24:59,219 --> 01:25:02,159
um we employ reflexive forwarding so

1889
01:25:02,159 --> 01:25:04,800
directly for RPC communication

1890
01:25:04,800 --> 01:25:07,679
and so a lot all kinds of parameter

1891
01:25:07,679 --> 01:25:11,580
passing and we also apply this to the

1892
01:25:11,580 --> 01:25:13,440
key exchange that we are going to talk

1893
01:25:13,440 --> 01:25:15,360
about in a minute

1894
01:25:15,360 --> 01:25:18,120
um to set up these sessions

1895
01:25:18,120 --> 01:25:19,620
and

1896
01:25:19,620 --> 01:25:20,280
um

1897
01:25:20,280 --> 01:25:22,440
what we want to do is

1898
01:25:22,440 --> 01:25:25,020
um this restful communication

1899
01:25:25,020 --> 01:25:28,620
um but not say inside connections or

1900
01:25:28,620 --> 01:25:32,100
tunnels so they say response data that

1901
01:25:32,100 --> 01:25:33,060
we get

1902
01:25:33,060 --> 01:25:34,460
um should be

1903
01:25:34,460 --> 01:25:38,219
ICN data objects so they of course would

1904
01:25:38,219 --> 01:25:41,780
be encrypted in most cases

1905
01:25:41,780 --> 01:25:46,380
but we apply the usual ICN security

1906
01:25:46,380 --> 01:25:49,920
mechanisms and we don't want to use any

1907
01:25:49,920 --> 01:25:52,580
tunnel mechanism

1908
01:25:52,580 --> 01:25:54,239
and

1909
01:25:54,239 --> 01:25:56,699
um so of course when you do this and you

1910
01:25:56,699 --> 01:25:59,520
want to have good performance so

1911
01:25:59,520 --> 01:26:02,280
comparable to to http um yeah you have a

1912
01:26:02,280 --> 01:26:04,080
series of requests in a session you want

1913
01:26:04,080 --> 01:26:06,480
to avoid setting up context State again

1914
01:26:06,480 --> 01:26:08,360
and again so this

1915
01:26:08,360 --> 01:26:11,699
shouldn't require more round trips

1916
01:26:11,699 --> 01:26:14,820
um and so the challenge is that we want

1917
01:26:14,820 --> 01:26:17,760
to establish and maintain this shared

1918
01:26:17,760 --> 01:26:19,620
assessment session State

1919
01:26:19,620 --> 01:26:23,040
um in in these sessions so what we do is

1920
01:26:23,040 --> 01:26:25,679
we use the key identifiers

1921
01:26:25,679 --> 01:26:30,480
um in in this session and so the

1922
01:26:30,480 --> 01:26:33,540
associated security context that we set

1923
01:26:33,540 --> 01:26:35,460
up in the negotiation phase

1924
01:26:35,460 --> 01:26:38,460
and through to identify the the session

1925
01:26:38,460 --> 01:26:41,159
stage and then we use the recording

1926
01:26:41,159 --> 01:26:45,060
parameter passing for clients to refer

1927
01:26:45,060 --> 01:26:46,920
to previously created application State

1928
01:26:46,920 --> 01:26:48,900
and this you could say emulates

1929
01:26:48,900 --> 01:26:52,879
something like HD cookies

1930
01:26:53,580 --> 01:26:55,080
and

1931
01:26:55,080 --> 01:26:57,139
um

1932
01:26:57,900 --> 01:27:01,080
of course when you do this you have when

1933
01:27:01,080 --> 01:27:03,600
you think about so um so what is is kind

1934
01:27:03,600 --> 01:27:04,800
of the

1935
01:27:04,800 --> 01:27:07,199
um say root of the shared application

1936
01:27:07,199 --> 01:27:10,679
state so we decided that we tie it to

1937
01:27:10,679 --> 01:27:12,620
the key IDs

1938
01:27:12,620 --> 01:27:14,159
and

1939
01:27:14,159 --> 01:27:15,120
um

1940
01:27:15,120 --> 01:27:19,199
so because this is kind of an essential

1941
01:27:19,199 --> 01:27:21,540
um say agreement that the client and

1942
01:27:21,540 --> 01:27:23,880
server have have to establish so it

1943
01:27:23,880 --> 01:27:26,400
seems to make kind of sense uh to use

1944
01:27:26,400 --> 01:27:30,060
this basically as the session identifier

1945
01:27:30,060 --> 01:27:32,340
um the drawback could be that um or if

1946
01:27:32,340 --> 01:27:35,880
you if you change Keys um then or um if

1947
01:27:35,880 --> 01:27:38,940
you Wiki then you have to reset up your

1948
01:27:38,940 --> 01:27:41,219
your context

1949
01:27:41,219 --> 01:27:41,820
um

1950
01:27:41,820 --> 01:27:45,000
in this system you also you have some

1951
01:27:45,000 --> 01:27:46,739
kind of coupling or binding between

1952
01:27:46,739 --> 01:27:50,060
client and server because server has the

1953
01:27:50,060 --> 01:27:53,040
security context and of course also the

1954
01:27:53,040 --> 01:27:54,900
application context so we have to make

1955
01:27:54,900 --> 01:27:59,219
sure that your say subsequent interest

1956
01:27:59,219 --> 01:28:02,100
reach the same server

1957
01:28:02,100 --> 01:28:04,679
um this is a kind of maybe a bit um yeah

1958
01:28:04,679 --> 01:28:06,420
something to take care of in an ICN

1959
01:28:06,420 --> 01:28:08,040
environment

1960
01:28:08,040 --> 01:28:09,960
um or you need to implement some kind of

1961
01:28:09,960 --> 01:28:13,440
server back-end State transfer or state

1962
01:28:13,440 --> 01:28:17,059
synchronization system for that

1963
01:28:18,420 --> 01:28:19,260
um

1964
01:28:19,260 --> 01:28:25,679
so uh Mark and colleagues earlier

1965
01:28:25,679 --> 01:28:30,120
specified ccnx key exchange so

1966
01:28:30,120 --> 01:28:31,940
um in a

1967
01:28:31,940 --> 01:28:35,280
draft here as well and and what this

1968
01:28:35,280 --> 01:28:38,340
does is basically TLS 1.3 like key

1969
01:28:38,340 --> 01:28:41,580
exchange between two peers that is

1970
01:28:41,580 --> 01:28:44,040
basically following what TLS 1.3 does

1971
01:28:44,040 --> 01:28:48,560
for establishing a shared forward CQ key

1972
01:28:48,560 --> 01:28:50,880
which you could use for confidential

1973
01:28:50,880 --> 01:28:54,239
communication the main use case at the

1974
01:28:54,239 --> 01:28:56,780
time was something like a tunneling

1975
01:28:56,780 --> 01:28:59,300
scheme so you you

1976
01:28:59,300 --> 01:29:02,580
can have a wrapping in a ICN

1977
01:29:02,580 --> 01:29:05,719
Communication in an outer TLS like

1978
01:29:05,719 --> 01:29:09,780
context so for applications like you

1979
01:29:09,780 --> 01:29:12,300
know tele banking or something you would

1980
01:29:12,300 --> 01:29:13,980
show any kind of commercial thing you

1981
01:29:13,980 --> 01:29:15,780
would you would use it

1982
01:29:15,780 --> 01:29:19,199
and um so it was designed for this

1983
01:29:19,199 --> 01:29:21,179
client server scenarios

1984
01:29:21,179 --> 01:29:23,940
um and um it's but in the end you still

1985
01:29:23,940 --> 01:29:25,739
have interests and data so it's

1986
01:29:25,739 --> 01:29:28,199
orthogonal to reliability and congestion

1987
01:29:28,199 --> 01:29:29,580
control

1988
01:29:29,580 --> 01:29:32,880
and um so what we did here is we we used

1989
01:29:32,880 --> 01:29:34,020
this

1990
01:29:34,020 --> 01:29:37,560
um exchange protocol but we don't want

1991
01:29:37,560 --> 01:29:38,520
to use

1992
01:29:38,520 --> 01:29:40,679
um this say tunneling approach

1993
01:29:40,679 --> 01:29:45,300
so in this paper we kind of describe how

1994
01:29:45,300 --> 01:29:49,980
we are now implementing the season X key

1995
01:29:49,980 --> 01:29:52,679
exchange part with reflexive forwarding

1996
01:29:52,679 --> 01:29:54,719
so because we wanted to avoid

1997
01:29:54,719 --> 01:29:56,880
um you know sending interests in both

1998
01:29:56,880 --> 01:29:59,040
directions so we want to do it in the

1999
01:29:59,040 --> 01:30:00,900
reflexive forwarding

2000
01:30:00,900 --> 01:30:04,020
um so in our view more ICN native way so

2001
01:30:04,020 --> 01:30:06,719
that's that's one part and then we

2002
01:30:06,719 --> 01:30:09,480
basically derive

2003
01:30:09,480 --> 01:30:13,679
um a key for encrypting the the data

2004
01:30:13,679 --> 01:30:15,540
objects later in the session

2005
01:30:15,540 --> 01:30:18,120
maybe a bit too intricate to go through

2006
01:30:18,120 --> 01:30:19,800
all of this right now because we are

2007
01:30:19,800 --> 01:30:22,260
also running out of time

2008
01:30:22,260 --> 01:30:23,940
um but

2009
01:30:23,940 --> 01:30:25,800
um yeah I would like to refer you to

2010
01:30:25,800 --> 01:30:28,199
this paper and I mean this is is the

2011
01:30:28,199 --> 01:30:30,360
first idea like a sketch essentially and

2012
01:30:30,360 --> 01:30:33,120
we haven't really implemented it yet

2013
01:30:33,120 --> 01:30:35,880
um but what we think is that it's now a

2014
01:30:35,880 --> 01:30:38,400
really good time to think about web over

2015
01:30:38,400 --> 01:30:41,040
ICN so clearly

2016
01:30:41,040 --> 01:30:42,719
um it's not enough to say well we just

2017
01:30:42,719 --> 01:30:46,139
use interest data and so the key idea

2018
01:30:46,139 --> 01:30:49,620
here is to leverage this um what we

2019
01:30:49,620 --> 01:30:51,560
think really useful work on key exchange

2020
01:30:51,560 --> 01:30:54,540
coupled it with reflexive forwarding and

2021
01:30:54,540 --> 01:30:58,080
then use it for a data oriented ICN

2022
01:30:58,080 --> 01:30:59,639
communication

2023
01:30:59,639 --> 01:31:03,060
and so we roughly approximate the

2024
01:31:03,060 --> 01:31:06,139
capabilities of like HTTP 3 over quick

2025
01:31:06,139 --> 01:31:09,900
but um if you do this correctly

2026
01:31:09,900 --> 01:31:12,060
um the resulting system implementation

2027
01:31:12,060 --> 01:31:14,040
may actually be simpler because we don't

2028
01:31:14,040 --> 01:31:16,620
we don't have this relay approach we can

2029
01:31:16,620 --> 01:31:19,679
leverage some IC and optimization we

2030
01:31:19,679 --> 01:31:22,560
have all the other ICN benefits still

2031
01:31:22,560 --> 01:31:25,920
like caching and general and a name

2032
01:31:25,920 --> 01:31:28,739
oriented system so it could be

2033
01:31:28,739 --> 01:31:30,480
potentially easy to implement of course

2034
01:31:30,480 --> 01:31:32,420
the devil may be in a detail

2035
01:31:32,420 --> 01:31:33,960
and

2036
01:31:33,960 --> 01:31:36,179
um so we think that could be a really

2037
01:31:36,179 --> 01:31:38,280
interesting basis to build like the next

2038
01:31:38,280 --> 01:31:42,120
generation of ICN systems

2039
01:31:42,120 --> 01:31:44,520
um admittedly there's some some work to

2040
01:31:44,520 --> 01:31:46,020
think about

2041
01:31:46,020 --> 01:31:48,659
um so I mean one issue here is of course

2042
01:31:48,659 --> 01:31:50,340
name privacy

2043
01:31:50,340 --> 01:31:54,719
um so that's not solved by this approach

2044
01:31:54,719 --> 01:31:58,139
um so you there are some other proposals

2045
01:31:58,139 --> 01:31:59,120
um

2046
01:31:59,120 --> 01:32:01,860
for dealing with that but we haven't

2047
01:32:01,860 --> 01:32:03,960
really spent a lot of uh work on this

2048
01:32:03,960 --> 01:32:06,840
and um so what we really like to see is

2049
01:32:06,840 --> 01:32:08,760
like someone picking this up trying to

2050
01:32:08,760 --> 01:32:12,420
build it and um so that we can do some

2051
01:32:12,420 --> 01:32:15,440
further experiments with it

2052
01:32:15,719 --> 01:32:17,280
okay

2053
01:32:17,280 --> 01:32:20,760
um that was our quick heads up on um on

2054
01:32:20,760 --> 01:32:22,920
restful ICN

2055
01:32:22,920 --> 01:32:24,900
we don't have much time unfortunately

2056
01:32:24,900 --> 01:32:26,100
for questions

2057
01:32:26,100 --> 01:32:27,420
um it'd be great if you have questions

2058
01:32:27,420 --> 01:32:29,219
if you could direct them to the mail

2059
01:32:29,219 --> 01:32:30,900
list

2060
01:32:30,900 --> 01:32:32,400
and

2061
01:32:32,400 --> 01:32:35,400
um before we close

2062
01:32:35,400 --> 01:32:37,739
um so Dave and I have so I'm not sure if

2063
01:32:37,739 --> 01:32:40,199
you were aware there was a side meeting

2064
01:32:40,199 --> 01:32:44,280
on Monday at the ITF in London

2065
01:32:44,280 --> 01:32:49,080
um on networking for metaverse so

2066
01:32:49,080 --> 01:32:52,380
distributed AR VR applications

2067
01:32:52,380 --> 01:32:55,980
and um a bit of the Mind share there is

2068
01:32:55,980 --> 01:32:57,300
actually

2069
01:32:57,300 --> 01:33:01,139
um going in the ICN Direction so and

2070
01:33:01,139 --> 01:33:04,560
um I also Blended um say some some ICN

2071
01:33:04,560 --> 01:33:08,040
ideas in that concept context

2072
01:33:08,040 --> 01:33:10,739
and so we thought maybe now it could be

2073
01:33:10,739 --> 01:33:12,540
a good time to

2074
01:33:12,540 --> 01:33:14,760
um say in this group here think a bit

2075
01:33:14,760 --> 01:33:17,420
about a research agenda and and also

2076
01:33:17,420 --> 01:33:20,159
recapitulate a little bit what we have

2077
01:33:20,159 --> 01:33:22,620
in terms of in technology is things like

2078
01:33:22,620 --> 01:33:24,719
multi-destination multi forwarding and

2079
01:33:24,719 --> 01:33:27,179
multi-pass forwarding

2080
01:33:27,179 --> 01:33:29,940
um and what is potentially missing

2081
01:33:29,940 --> 01:33:33,659
um so for building this uh say which are

2082
01:33:33,659 --> 01:33:36,000
social arvr applications

2083
01:33:36,000 --> 01:33:37,920
and so we thought it could be good at

2084
01:33:37,920 --> 01:33:40,500
nice to have a interim meeting uh in the

2085
01:33:40,500 --> 01:33:42,659
not so distant future

2086
01:33:42,659 --> 01:33:44,940
um perhaps end of November beginning of

2087
01:33:44,940 --> 01:33:46,860
December

2088
01:33:46,860 --> 01:33:48,780
um so if you are interested in that

2089
01:33:48,780 --> 01:33:51,600
please feel free to talk to us of course

2090
01:33:51,600 --> 01:33:52,920
we will also

2091
01:33:52,920 --> 01:33:56,100
um send a message on the main list and

2092
01:33:56,100 --> 01:33:58,380
um yeah see what it's kind of try to

2093
01:33:58,380 --> 01:34:03,260
negotiating um the interest there

2094
01:34:03,840 --> 01:34:07,320
all right anything else we need to talk

2095
01:34:07,320 --> 01:34:09,440
about

2096
01:34:11,420 --> 01:34:15,060
thank you very much for attending

2097
01:34:15,060 --> 01:34:18,900
and hope to see you all very soon

2098
01:34:18,900 --> 01:34:20,940
goodbye and thanks matters for taking

2099
01:34:20,940 --> 01:34:23,239
notes

2100
01:34:31,320 --> 01:34:33,620
foreign

2101
01:34:39,160 --> 01:34:42,239
[Music]

2102
01:34:53,159 --> 01:34:54,780
sorry sorry I just pressed the wrong

2103
01:34:54,780 --> 01:34:56,400
button

2104
01:34:56,400 --> 01:34:58,560
I didn't have a question

2105
01:34:58,560 --> 01:35:01,760
okay foreign

