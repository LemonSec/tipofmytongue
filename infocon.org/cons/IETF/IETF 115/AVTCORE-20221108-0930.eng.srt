1
00:00:05,299 --> 00:00:07,560
uh in the

2
00:00:07,560 --> 00:00:10,639
Fremont participants

3
00:00:12,059 --> 00:00:14,759
we can hear you remotely

4
00:00:14,759 --> 00:00:17,839
great and we can hear you

5
00:00:38,520 --> 00:00:41,120
foreign

6
00:01:07,020 --> 00:01:09,020
um

7
00:01:43,020 --> 00:01:45,740
uh

8
00:01:54,320 --> 00:01:56,040
we'll do a few more minutes for

9
00:01:56,040 --> 00:01:59,659
everybody to trickle in but uh

10
00:02:03,240 --> 00:02:04,860
no the first session of the day sorry

11
00:02:04,860 --> 00:02:08,038
yes no we are we are not that busy yeah

12
00:02:08,038 --> 00:02:10,098
yeah

13
00:02:14,640 --> 00:02:17,040
um but in the meantime anybody

14
00:02:17,040 --> 00:02:18,599
waiting for people to trickle in does

15
00:02:18,599 --> 00:02:22,340
anybody want to volunteer to take notes

16
00:02:23,459 --> 00:02:26,099
everybody looks I said jewishly at their

17
00:02:26,099 --> 00:02:28,879
laptops

18
00:02:58,440 --> 00:03:00,620
foreign

19
00:03:36,620 --> 00:03:38,760
thank you

20
00:03:38,760 --> 00:03:41,540
good morning

21
00:03:50,599 --> 00:03:53,720
all right

22
00:03:56,220 --> 00:03:58,379
I think people are beginning to find

23
00:03:58,379 --> 00:04:00,299
this room in the far end of the

24
00:04:00,299 --> 00:04:01,680
labyrinth here

25
00:04:01,680 --> 00:04:03,480
so

26
00:04:03,480 --> 00:04:06,379
foreign

27
00:04:06,920 --> 00:04:09,180
if anybody wants to take notes so we can

28
00:04:09,180 --> 00:04:11,659
get started

29
00:04:13,920 --> 00:04:15,900
I heard a no from the room

30
00:04:15,900 --> 00:04:19,620
next year next year okay make

31
00:04:19,620 --> 00:04:22,320
sure yes you've done it a lot

32
00:04:22,320 --> 00:04:25,040
uh

33
00:04:25,080 --> 00:04:28,219
let's see

34
00:04:32,280 --> 00:04:35,280
Magnus

35
00:04:35,300 --> 00:04:38,720
okay thank you

36
00:04:40,919 --> 00:04:44,419
all right so

37
00:04:44,520 --> 00:04:46,880
um let's

38
00:04:49,139 --> 00:04:50,880
uh

39
00:04:50,880 --> 00:04:52,919
instruction notes

40
00:04:52,919 --> 00:04:54,000
um

41
00:04:54,000 --> 00:04:57,060
the uh

42
00:04:57,060 --> 00:05:00,259
sessions being recorded

43
00:05:00,300 --> 00:05:01,560
um

44
00:05:01,560 --> 00:05:03,720
please uh if you're in the room please

45
00:05:03,720 --> 00:05:06,120
sign in to the medical light client

46
00:05:06,120 --> 00:05:08,040
if you can do either from the QR code on

47
00:05:08,040 --> 00:05:10,979
the screen or from the agenda

48
00:05:10,979 --> 00:05:12,479
um

49
00:05:12,479 --> 00:05:14,100
that gets you on the blue sheets it also

50
00:05:14,100 --> 00:05:15,780
lets you join the mic queue for using

51
00:05:15,780 --> 00:05:18,360
the virtual mic

52
00:05:18,360 --> 00:05:20,479
um

53
00:05:21,360 --> 00:05:23,280
if you're using the full client please

54
00:05:23,280 --> 00:05:25,979
keep audio and video off

55
00:05:25,979 --> 00:05:27,000
um and

56
00:05:27,000 --> 00:05:29,100
wear a mask except when speaking and

57
00:05:29,100 --> 00:05:30,000
even

58
00:05:30,000 --> 00:05:32,600
if you choose while speaking

59
00:05:32,600 --> 00:05:34,979
remote participants

60
00:05:34,979 --> 00:05:37,919
please keep audio and video off

61
00:05:37,919 --> 00:05:39,600
um unless you're actually

62
00:05:39,600 --> 00:05:42,600
speaking

63
00:05:43,500 --> 00:05:46,860
for remote participants here's the

64
00:05:46,860 --> 00:05:50,400
tips on how to use the Medico client

65
00:05:50,400 --> 00:05:51,900
I remember you need to actually enable

66
00:05:51,900 --> 00:05:53,699
your audio and call it on

67
00:05:53,699 --> 00:05:55,440
you can turn on your video if you want

68
00:05:55,440 --> 00:05:58,620
it's helpful but the important but you

69
00:05:58,620 --> 00:06:00,600
have to turn on the audio separately

70
00:06:00,600 --> 00:06:02,280
or we'll see you about hear you which is

71
00:06:02,280 --> 00:06:05,179
usually not that useful

72
00:06:05,220 --> 00:06:06,960
um

73
00:06:06,960 --> 00:06:09,900
here are some links

74
00:06:09,900 --> 00:06:11,900
um

75
00:06:12,120 --> 00:06:13,860
no well

76
00:06:13,860 --> 00:06:17,340
you've all had to click through this to

77
00:06:17,340 --> 00:06:20,160
be here but just in case reminder of

78
00:06:20,160 --> 00:06:22,139
everything

79
00:06:22,139 --> 00:06:23,340
um

80
00:06:23,340 --> 00:06:26,400
the code of conduct and the various IPR

81
00:06:26,400 --> 00:06:28,740
policies

82
00:06:28,740 --> 00:06:30,060
uh

83
00:06:30,060 --> 00:06:32,340
uh emphasizing particularly

84
00:06:32,340 --> 00:06:35,039
the code of conduct

85
00:06:35,039 --> 00:06:36,180
um

86
00:06:36,180 --> 00:06:37,979
these uh

87
00:06:37,979 --> 00:06:39,720
if you are aware of

88
00:06:39,720 --> 00:06:42,180
any uh problems along these lines please

89
00:06:42,180 --> 00:06:44,280
call either contact me if this is

90
00:06:44,280 --> 00:06:46,740
related to this working group or the

91
00:06:46,740 --> 00:06:49,460
onputs team

92
00:06:50,220 --> 00:06:53,940
Mass policy please

93
00:06:53,940 --> 00:06:56,220
uh wear your mask when in meeting rooms

94
00:06:56,220 --> 00:06:59,340
except when actively eating and drinking

95
00:06:59,340 --> 00:07:02,780
or speaking at the microphone

96
00:07:03,479 --> 00:07:05,100
if you need a mask

97
00:07:05,100 --> 00:07:06,479
I think it really hears the math but if

98
00:07:06,479 --> 00:07:08,220
you need a mask we have some up here

99
00:07:08,220 --> 00:07:11,300
if your mass breaks or something

100
00:07:11,699 --> 00:07:12,380
um

101
00:07:12,380 --> 00:07:15,800
here are the

102
00:07:16,680 --> 00:07:19,139
notes on this

103
00:07:19,139 --> 00:07:21,539
uh chairs are me and Bernard Bernard is

104
00:07:21,539 --> 00:07:22,800
remote today

105
00:07:22,800 --> 00:07:25,259
I'll keep an eye on the chat

106
00:07:25,259 --> 00:07:26,639
but if other people can in case I'm

107
00:07:26,639 --> 00:07:28,560
distracted that'd be good and we have

108
00:07:28,560 --> 00:07:31,460
magnets taking notes

109
00:07:32,759 --> 00:07:33,780
um

110
00:07:33,780 --> 00:07:34,979
Bernard if you have anything you want to

111
00:07:34,979 --> 00:07:37,880
say at any point jump in

112
00:07:43,319 --> 00:07:45,440
okay

113
00:07:46,919 --> 00:07:49,800
I see you on the unmuted but I don't

114
00:07:49,800 --> 00:07:51,180
hear you Bernard

115
00:07:51,180 --> 00:07:52,979
yeah I

116
00:07:52,979 --> 00:07:56,520
nothing nothing much to report okay yeah

117
00:07:56,520 --> 00:07:59,039
our agenda

118
00:07:59,039 --> 00:08:00,479
um

119
00:08:00,479 --> 00:08:02,160
if anybody has any comments on anything

120
00:08:02,160 --> 00:08:03,360
they'd like to

121
00:08:03,360 --> 00:08:05,639
tweak or change or ADD

122
00:08:05,639 --> 00:08:08,819
you know let us know speak now or

123
00:08:08,819 --> 00:08:11,580
interrupt as we go

124
00:08:11,580 --> 00:08:13,758
um

125
00:08:13,919 --> 00:08:17,180
this is roughly what we'll be doing

126
00:08:17,280 --> 00:08:18,539
um

127
00:08:18,539 --> 00:08:21,000
draft status

128
00:08:21,000 --> 00:08:24,319
published and drafts

129
00:08:24,599 --> 00:08:25,680
um

130
00:08:25,680 --> 00:08:27,720
we have some things in our of the editor

131
00:08:27,720 --> 00:08:29,639
we have one thing in Miss ref

132
00:08:29,639 --> 00:08:32,240
uh

133
00:08:32,240 --> 00:08:34,979
uh frame marking

134
00:08:34,979 --> 00:08:36,539
well we still need that revised draft

135
00:08:36,539 --> 00:08:39,000
for that

136
00:08:39,000 --> 00:08:42,958
uh MO is nodding so just reminder demo

137
00:08:42,958 --> 00:08:45,859
uh

138
00:08:46,080 --> 00:08:50,519
uh working group The Working glass call

139
00:08:50,519 --> 00:08:54,060
um you completed the the skip draft

140
00:08:54,060 --> 00:08:55,380
um we've

141
00:08:55,380 --> 00:08:57,600
there was a revised draft on you know

142
00:08:57,600 --> 00:09:00,240
based on the various

143
00:09:00,240 --> 00:09:03,899
um director at Malik and reviews

144
00:09:03,899 --> 00:09:05,339
um reviewers could have been contacted

145
00:09:05,339 --> 00:09:08,700
to make sure they like the changes

146
00:09:08,700 --> 00:09:11,339
um so 983 this did this working class

147
00:09:11,339 --> 00:09:13,320
call that's on me to do the work with

148
00:09:13,320 --> 00:09:14,700
the write-up which

149
00:09:14,700 --> 00:09:16,140
I'm sorry I didn't get to get I will try

150
00:09:16,140 --> 00:09:18,240
to do that soon

151
00:09:18,240 --> 00:09:23,300
um we've adopted RTP over quick and EVC

152
00:09:25,680 --> 00:09:26,459
um

153
00:09:26,459 --> 00:09:28,620
there was an uh there was a call for

154
00:09:28,620 --> 00:09:30,660
adoption game State over our RTP there

155
00:09:30,660 --> 00:09:31,740
was not

156
00:09:31,740 --> 00:09:33,540
there were hardly any

157
00:09:33,540 --> 00:09:35,160
there were only two responses one of

158
00:09:35,160 --> 00:09:37,140
which was

159
00:09:37,140 --> 00:09:39,720
um from a co-worker of the proponent so

160
00:09:39,720 --> 00:09:41,820
we didn't feel like that was terribly

161
00:09:41,820 --> 00:09:43,260
um

162
00:09:43,260 --> 00:09:45,180
exciting uh Colin do you wish to speak

163
00:09:45,180 --> 00:09:46,380
are you still interested in doing this

164
00:09:46,380 --> 00:09:49,519
and can you get

165
00:09:53,120 --> 00:09:55,980
I mean there's it's moving to multiple

166
00:09:55,980 --> 00:09:57,959
you know companies sort of looking at

167
00:09:57,959 --> 00:09:59,760
this and using it at this point and I

168
00:09:59,760 --> 00:10:01,800
mean I think the real the the most

169
00:10:01,800 --> 00:10:04,380
interesting comment really is that like

170
00:10:04,380 --> 00:10:08,279
the part of negotiating the the defining

171
00:10:08,279 --> 00:10:10,080
the media container

172
00:10:10,080 --> 00:10:11,940
it sure this working group would be

173
00:10:11,940 --> 00:10:13,320
happy to do it if there was a document

174
00:10:13,320 --> 00:10:14,880
done somewhere that's like like here's

175
00:10:14,880 --> 00:10:17,640
the format itself and but doing the

176
00:10:17,640 --> 00:10:19,260
format in this working group I believe

177
00:10:19,260 --> 00:10:22,380
is within our Charter technically but is

178
00:10:22,380 --> 00:10:24,540
of no interest whatsoever to anyone in

179
00:10:24,540 --> 00:10:25,620
this working group it's completely

180
00:10:25,620 --> 00:10:27,959
independent from anything that's done so

181
00:10:27,959 --> 00:10:31,980
Dispatch sent me here here has not

182
00:10:31,980 --> 00:10:33,720
really rejected me to go back to

183
00:10:33,720 --> 00:10:35,940
dispatch and say I can't do this here

184
00:10:35,940 --> 00:10:38,399
but it never made sense for it I didn't

185
00:10:38,399 --> 00:10:40,620
think it should be done here okay and so

186
00:10:40,620 --> 00:10:43,320
I'm not I'm not sad about that and I

187
00:10:43,320 --> 00:10:45,360
agree with the you know

188
00:10:45,360 --> 00:10:47,700
suhas and his sock puppet fluffy both

189
00:10:47,700 --> 00:10:50,100
like this is sort of irrelevant

190
00:10:50,100 --> 00:10:54,360
um but you know so I I like I I'm not I

191
00:10:54,360 --> 00:10:56,820
I'm not denying the response there was

192
00:10:56,820 --> 00:10:58,800
also no responses against it I'll point

193
00:10:58,800 --> 00:11:00,720
out basically yeah right basically I

194
00:11:00,720 --> 00:11:01,800
think the

195
00:11:01,800 --> 00:11:04,079
but it's it's that there's not a strong

196
00:11:04,079 --> 00:11:06,959
interest or strong expertise in defining

197
00:11:06,959 --> 00:11:08,519
a game format in this working group is

198
00:11:08,519 --> 00:11:10,620
true right

199
00:11:10,620 --> 00:11:12,779
so I mean what do you think you should

200
00:11:12,779 --> 00:11:13,620
like

201
00:11:13,620 --> 00:11:15,779
as a chair or what you know what's

202
00:11:15,779 --> 00:11:17,279
what's your advice to me I'm trying to

203
00:11:17,279 --> 00:11:18,899
bring some new work that is actually

204
00:11:18,899 --> 00:11:21,000
sort of relevant to the ITF what do you

205
00:11:21,000 --> 00:11:23,459
tell me to do uh

206
00:11:23,459 --> 00:11:25,140
I mean

207
00:11:25,140 --> 00:11:28,500
I think the issue is more the expertise

208
00:11:28,500 --> 00:11:30,839
than the interest like I don't know

209
00:11:30,839 --> 00:11:32,279
anything about game States I don't I

210
00:11:32,279 --> 00:11:33,420
couldn't tell you if we get it right or

211
00:11:33,420 --> 00:11:35,279
not and I don't think anybody very many

212
00:11:35,279 --> 00:11:37,140
people in this room have that expertise

213
00:11:37,140 --> 00:11:39,899
either so if you can find the people who

214
00:11:39,899 --> 00:11:41,220
do have the expertise and say are you

215
00:11:41,220 --> 00:11:43,380
willing to participate in this working

216
00:11:43,380 --> 00:11:44,339
group

217
00:11:44,339 --> 00:11:46,200
for you know how long it takes to do

218
00:11:46,200 --> 00:11:47,100
this work

219
00:11:47,100 --> 00:11:48,959
that and you know and they're interested

220
00:11:48,959 --> 00:11:51,800
in it then you know

221
00:11:53,660 --> 00:11:56,279
what's the harm if we don't if we get it

222
00:11:56,279 --> 00:11:58,560
wrong right

223
00:11:58,560 --> 00:12:00,120
um

224
00:12:00,120 --> 00:12:04,980
I mean zero I guess you know there are

225
00:12:04,980 --> 00:12:10,160
other places to add to the pile yeah

226
00:12:10,160 --> 00:12:12,540
so look I'm not really sure what to do

227
00:12:12,540 --> 00:12:13,980
with it next but I feel a little bit

228
00:12:13,980 --> 00:12:16,260
like I've been bounced around it's been

229
00:12:16,260 --> 00:12:18,480
a year now and no one has a location at

230
00:12:18,480 --> 00:12:20,519
ITF that could possibly do this work and

231
00:12:20,519 --> 00:12:21,899
that's not your fault it's not this

232
00:12:21,899 --> 00:12:23,339
working group's fault but it is the

233
00:12:23,339 --> 00:12:24,780
reality of what's going on

234
00:12:24,780 --> 00:12:27,240
[Music]

235
00:12:27,240 --> 00:12:30,720
no this is very much the ietf's job

236
00:12:30,720 --> 00:12:33,920
right okay

237
00:12:34,560 --> 00:12:35,100
um

238
00:12:35,100 --> 00:12:37,500
so David scanazi internet architecture

239
00:12:37,500 --> 00:12:41,640
board uh so I have not read the draft

240
00:12:41,640 --> 00:12:44,760
um but just uh from a like high level uh

241
00:12:44,760 --> 00:12:46,320
just I want to start with a

242
00:12:46,320 --> 00:12:47,940
clarification question for Colin like

243
00:12:47,940 --> 00:12:49,920
what is the benefit for you in having

244
00:12:49,920 --> 00:12:53,820
this as an RFC as opposed to a blog post

245
00:12:53,820 --> 00:12:56,160
a Wiki page whatever

246
00:12:56,160 --> 00:12:58,079
we need the Ayanna Registries for an

247
00:12:58,079 --> 00:12:59,519
extensible mechanism that multiple

248
00:12:59,519 --> 00:13:01,079
vendors can add what they need into it

249
00:13:01,079 --> 00:13:02,399
that's what we really need it's an

250
00:13:02,399 --> 00:13:05,160
extensibility mechanism for multi-vendor

251
00:13:05,160 --> 00:13:07,920
work I see so you need a it's not an

252
00:13:07,920 --> 00:13:10,800
existing code point in an existing or a

253
00:13:10,800 --> 00:13:12,300
new code for an existing registry you

254
00:13:12,300 --> 00:13:17,519
want a new registry Okay so then

255
00:13:17,519 --> 00:13:19,980
often for things like this an

256
00:13:19,980 --> 00:13:22,860
independent stream RFC can create an Ina

257
00:13:22,860 --> 00:13:26,399
registry and that might be an option for

258
00:13:26,399 --> 00:13:29,700
you because the the it sounds like what

259
00:13:29,700 --> 00:13:32,279
you you're not asking for like people

260
00:13:32,279 --> 00:13:34,079
who understand this to review and

261
00:13:34,079 --> 00:13:36,240
provide feedback because like the

262
00:13:36,240 --> 00:13:38,040
expertise maybe isn't here

263
00:13:38,040 --> 00:13:40,500
you're just asking for a stamp so you

264
00:13:40,500 --> 00:13:43,440
don't have to run an Ina registry which

265
00:13:43,440 --> 00:13:45,180
I totally get that's valid so I would

266
00:13:45,180 --> 00:13:46,560
suggest making that an independent

267
00:13:46,560 --> 00:13:49,019
stream RFC and I I saw Elliot he's here

268
00:13:49,019 --> 00:13:51,420
in person so uh oh the 80s coming I'm

269
00:13:51,420 --> 00:13:55,219
running away I'm running away foreign

270
00:14:09,139 --> 00:14:11,940
so I would gladly yield to the error

271
00:14:11,940 --> 00:14:14,220
director of course but since he goes

272
00:14:14,220 --> 00:14:15,000
away

273
00:14:15,000 --> 00:14:17,940
um I you know I I was grumbling here in

274
00:14:17,940 --> 00:14:20,100
the corner saying this is not the idf's

275
00:14:20,100 --> 00:14:21,899
business and I I continue to believe

276
00:14:21,899 --> 00:14:25,019
this is not the itf's business it's I

277
00:14:25,019 --> 00:14:27,180
mean if we Define if we Define making

278
00:14:27,180 --> 00:14:30,320
the internet better or whatever

279
00:14:30,320 --> 00:14:33,540
as as basically encompassing everything

280
00:14:33,540 --> 00:14:35,820
that can be coded into bits and being

281
00:14:35,820 --> 00:14:39,899
sent uh over over a while or Wireless to

282
00:14:39,899 --> 00:14:42,240
some other place using a protocol

283
00:14:42,240 --> 00:14:44,639
roughly a like IP then of course it's

284
00:14:44,639 --> 00:14:46,980
the itf's business but I think this is a

285
00:14:46,980 --> 00:14:49,440
classical example of often often uh

286
00:14:49,440 --> 00:14:52,860
often coding technology even if it's

287
00:14:52,860 --> 00:14:55,320
mostly metadata-ish type of stuff and

288
00:14:55,320 --> 00:14:56,940
that should go to comedies who know what

289
00:14:56,940 --> 00:14:58,380
they are doing in this field and that

290
00:14:58,380 --> 00:15:00,300
would be MPEG that would be aom that

291
00:15:00,300 --> 00:15:03,000
would be those places and not here yeah

292
00:15:03,000 --> 00:15:06,120
we have ah

293
00:15:06,120 --> 00:15:07,320
we had

294
00:15:07,320 --> 00:15:09,360
the the vast majority of the people

295
00:15:09,360 --> 00:15:10,800
running around here don't understand

296
00:15:10,800 --> 00:15:14,279
this stuff nor care about it thank you

297
00:15:14,279 --> 00:15:16,380
so I would like to reply to Stefan on

298
00:15:16,380 --> 00:15:18,540
this though but Stefan you said exactly

299
00:15:18,540 --> 00:15:20,220
those same words when we said we wanted

300
00:15:20,220 --> 00:15:22,800
to do an audio codec in ITF called Opus

301
00:15:22,800 --> 00:15:25,079
is now the most used codec in the

302
00:15:25,079 --> 00:15:26,820
internet you said exactly those same

303
00:15:26,820 --> 00:15:28,620
words when we wanted to publish av1

304
00:15:28,620 --> 00:15:30,480
which is one of the most not sorry not

305
00:15:30,480 --> 00:15:32,399
av1 vp8 which we did through

306
00:15:32,399 --> 00:15:33,899
Independence dream back to the

307
00:15:33,899 --> 00:15:35,699
recommendation to me it's one of the

308
00:15:35,699 --> 00:15:39,120
most used video codecs and aom has no

309
00:15:39,120 --> 00:15:41,399
interest in doing this game type move

310
00:15:41,399 --> 00:15:43,139
data it's very different than the type

311
00:15:43,139 --> 00:15:45,660
of other work they do this is totally

312
00:15:45,660 --> 00:15:48,300
the wrong place to do it MPEG has no

313
00:15:48,300 --> 00:15:50,399
interest in this type of minimal

314
00:15:50,399 --> 00:15:53,160
compression we've discussed that

315
00:15:53,160 --> 00:15:55,320
um it is this is this is more like a

316
00:15:55,320 --> 00:15:57,720
Json format you could maybe say w3c

317
00:15:57,720 --> 00:16:00,180
should do this or you know the open

318
00:16:00,180 --> 00:16:01,860
spatial Consortium or something like

319
00:16:01,860 --> 00:16:03,959
that but those places that you recommend

320
00:16:03,959 --> 00:16:05,880
they're they're not practical

321
00:16:05,880 --> 00:16:07,980
so may I respond to that sure go ahead

322
00:16:07,980 --> 00:16:12,320
okay thank you and uh

323
00:16:13,260 --> 00:16:15,860
so

324
00:16:16,260 --> 00:16:18,420
you know I go to these impact meetings

325
00:16:18,420 --> 00:16:19,760
as an example

326
00:16:19,760 --> 00:16:21,320
uh

327
00:16:21,320 --> 00:16:23,399
I haven't seen

328
00:16:23,399 --> 00:16:26,639
uh you guys going there and proposing

329
00:16:26,639 --> 00:16:27,959
anything like that so don't say it

330
00:16:27,959 --> 00:16:29,220
they're not interested because I

331
00:16:29,220 --> 00:16:30,600
wouldn't know

332
00:16:30,600 --> 00:16:34,740
um I'm also going to aom uh also quite

333
00:16:34,740 --> 00:16:38,519
often and and I mean you go there to the

334
00:16:38,519 --> 00:16:41,579
uh to the Cause right I haven't seen the

335
00:16:41,579 --> 00:16:43,560
Cisco initiative over there either so

336
00:16:43,560 --> 00:16:45,779
don't say they are not interested I

337
00:16:45,779 --> 00:16:47,880
don't think you know right or if you

338
00:16:47,880 --> 00:16:48,660
know

339
00:16:48,660 --> 00:16:51,420
then at least it wasn't publicized in

340
00:16:51,420 --> 00:16:54,420
any in any significant way uh I agree

341
00:16:54,420 --> 00:16:58,800
that Opus was a success I disagree that

342
00:16:58,800 --> 00:17:01,980
it was an ITF success it was a success

343
00:17:01,980 --> 00:17:04,859
of a handful of people who used the ITF

344
00:17:04,859 --> 00:17:07,319
as a venue

345
00:17:07,319 --> 00:17:09,179
um all the others I don't even want to

346
00:17:09,179 --> 00:17:12,359
go there but Opus was was not the

347
00:17:12,359 --> 00:17:15,660
classical collaborative effort of uh

348
00:17:15,660 --> 00:17:18,119
creating a protocol it was just a

349
00:17:18,119 --> 00:17:19,500
handful of people who were talking to

350
00:17:19,500 --> 00:17:23,760
each other anyway all the time so I I I

351
00:17:23,760 --> 00:17:26,400
I still wouldn't want to see this

352
00:17:26,400 --> 00:17:29,600
organization becoming a an an

353
00:17:29,600 --> 00:17:32,960
organization that

354
00:17:32,960 --> 00:17:35,100
steps on other people's Turf without

355
00:17:35,100 --> 00:17:38,600
need really thank you

356
00:17:38,720 --> 00:17:42,660
Bernard you're in the QSC hi hi Colin

357
00:17:42,660 --> 00:17:45,059
um Harold may be about to say the same

358
00:17:45,059 --> 00:17:47,220
thing but I recall having a discussion

359
00:17:47,220 --> 00:17:51,179
in the w3c about the game State API

360
00:17:51,179 --> 00:17:53,880
um and uh what to do with it how to how

361
00:17:53,880 --> 00:17:55,380
to send stuff over the network from that

362
00:17:55,380 --> 00:17:57,179
API so you may have something there

363
00:17:57,179 --> 00:18:00,120
Cullen about the w3c

364
00:18:00,120 --> 00:18:01,919
um and they have had game related

365
00:18:01,919 --> 00:18:03,720
workshops before

366
00:18:03,720 --> 00:18:06,000
so that that might be one way to find

367
00:18:06,000 --> 00:18:09,679
some of these people just a thought

368
00:18:10,679 --> 00:18:12,000
Harold

369
00:18:12,000 --> 00:18:14,419
hello

370
00:18:15,179 --> 00:18:17,820
the problem here is really that this

371
00:18:17,820 --> 00:18:19,260
group

372
00:18:19,260 --> 00:18:21,600
has set this uh itself up as a

373
00:18:21,600 --> 00:18:23,160
gatekeeper

374
00:18:23,160 --> 00:18:27,799
for registration of RTP formats

375
00:18:27,840 --> 00:18:32,100
we now have a need for

376
00:18:32,100 --> 00:18:36,139
something to pass that gate

377
00:18:36,960 --> 00:18:39,799
so

378
00:18:42,360 --> 00:18:45,840
the alternatives for this group

379
00:18:45,840 --> 00:18:49,559
are basically lead follow or get the

380
00:18:49,559 --> 00:18:52,399
hell out of the way

381
00:18:52,740 --> 00:18:54,840
so

382
00:18:54,840 --> 00:18:58,020
where this document where this the

383
00:18:58,020 --> 00:19:00,780
technical details of this proposal needs

384
00:19:00,780 --> 00:19:02,640
to be discussed

385
00:19:02,640 --> 00:19:05,520
well any any group consists of 10 people

386
00:19:05,520 --> 00:19:08,400
no matter how many people who are in it

387
00:19:08,400 --> 00:19:13,080
and that's another question but if this

388
00:19:13,080 --> 00:19:17,100
group is a gatekeeper for registering

389
00:19:17,100 --> 00:19:21,299
stuff that needs RTP payloads

390
00:19:21,299 --> 00:19:22,440
well

391
00:19:22,440 --> 00:19:26,160
this group needs to accept that

392
00:19:26,160 --> 00:19:29,220
that it either needs to lead follow or

393
00:19:29,220 --> 00:19:31,280
get the hell out of the way

394
00:19:31,280 --> 00:19:34,460
[Music]

395
00:19:34,700 --> 00:19:38,240
Sergio here up next

396
00:19:44,280 --> 00:19:46,679
you're muted search your life

397
00:19:46,679 --> 00:19:49,039
actually

398
00:19:49,580 --> 00:19:52,580
yeah

399
00:19:56,360 --> 00:19:58,380
yeah I think you've clicked to share

400
00:19:58,380 --> 00:20:01,640
slides not to share video

401
00:20:03,660 --> 00:20:07,140
okay fixes audio and ask for queue again

402
00:20:07,140 --> 00:20:09,480
oh thank you

403
00:20:09,480 --> 00:20:12,179
all right uh Stefan so a direct response

404
00:20:12,179 --> 00:20:15,120
to Harold uh I tend to agree and I have

405
00:20:15,120 --> 00:20:17,100
agreed that the payload format in this

406
00:20:17,100 --> 00:20:18,780
email that cited there I have agreed

407
00:20:18,780 --> 00:20:21,360
that the payment format itself is

408
00:20:21,360 --> 00:20:23,580
in my opinion clearly within the charter

409
00:20:23,580 --> 00:20:25,140
of this group and I wouldn't at all

410
00:20:25,140 --> 00:20:27,179
stand in the way of doing that however

411
00:20:27,179 --> 00:20:29,340
there is a format a media format defined

412
00:20:29,340 --> 00:20:33,059
in the same specification and that

413
00:20:33,059 --> 00:20:35,880
that simply shouldn't be done here so if

414
00:20:35,880 --> 00:20:37,320
that were done somewhere else in

415
00:20:37,320 --> 00:20:39,240
parallel or sequentially I don't care

416
00:20:39,240 --> 00:20:42,600
right I I wouldn't stand here

417
00:20:42,600 --> 00:20:45,539
yep it's the the problem is that this is

418
00:20:45,539 --> 00:20:47,039
a document that

419
00:20:47,039 --> 00:20:49,919
does what traditionally has been done in

420
00:20:49,919 --> 00:20:52,320
two different documents one being the

421
00:20:52,320 --> 00:20:53,340
actual

422
00:20:53,340 --> 00:20:54,900
um

423
00:20:54,900 --> 00:20:57,660
media technology the other being the

424
00:20:57,660 --> 00:21:00,120
payload format including the registry

425
00:21:00,120 --> 00:21:03,539
and that obviously is well within the

426
00:21:03,539 --> 00:21:05,760
charter here go go for it no no trouble

427
00:21:05,760 --> 00:21:09,059
with that thank you

428
00:21:09,059 --> 00:21:11,720
Magnus

429
00:21:17,460 --> 00:21:19,980
buying this question yeah react to how

430
00:21:19,980 --> 00:21:21,900
I'll say about the skate keeping when it

431
00:21:21,900 --> 00:21:23,580
comes toxicity failure foremost I would

432
00:21:23,580 --> 00:21:24,780
note that

433
00:21:24,780 --> 00:21:27,480
first of all as Stefan said it's like

434
00:21:27,480 --> 00:21:29,700
it's the format versus the RTP payload

435
00:21:29,700 --> 00:21:31,200
format for the two different aspects

436
00:21:31,200 --> 00:21:31,980
here

437
00:21:31,980 --> 00:21:34,440
and the second one is that actually any

438
00:21:34,440 --> 00:21:36,480
OTP the only thing you need to register

439
00:21:36,480 --> 00:21:39,360
a code points for r2p payloader formats

440
00:21:39,360 --> 00:21:41,460
is a stable specification you don't need

441
00:21:41,460 --> 00:21:44,100
to go through this group at all

442
00:21:44,100 --> 00:21:47,100
but that's I mean we encourage it we

443
00:21:47,100 --> 00:21:48,480
have the expertise and we want to

444
00:21:48,480 --> 00:21:51,120
provide input

445
00:21:51,120 --> 00:21:53,880
Etc about that proposal

446
00:21:53,880 --> 00:21:57,539
so that's I mean I I asked a temporary a

447
00:21:57,539 --> 00:21:58,679
little bit so

448
00:21:58,679 --> 00:22:01,020
uh but I understand the struggle here to

449
00:22:01,020 --> 00:22:02,700
actually Define a format when you have a

450
00:22:02,700 --> 00:22:05,840
hard time finding body but

451
00:22:10,679 --> 00:22:13,159
well

452
00:22:15,780 --> 00:22:18,000
uh mercenary I don't think this is just

453
00:22:18,000 --> 00:22:20,039
about registration I think we really

454
00:22:20,039 --> 00:22:21,419
need to figure out if there's a good

455
00:22:21,419 --> 00:22:22,919
venue to have the discussions for this

456
00:22:22,919 --> 00:22:24,780
kind of thing because

457
00:22:24,780 --> 00:22:27,059
um it's not just you know let Khan

458
00:22:27,059 --> 00:22:28,679
publish something that only Cohen's

459
00:22:28,679 --> 00:22:30,299
going to use

460
00:22:30,299 --> 00:22:33,480
um the the the core aspect of this is

461
00:22:33,480 --> 00:22:36,120
you know describing things

462
00:22:36,120 --> 00:22:38,580
and there's two two main aspects

463
00:22:38,580 --> 00:22:41,400
describing you know meshes or

464
00:22:41,400 --> 00:22:44,280
geometrical structures efficiently and I

465
00:22:44,280 --> 00:22:45,480
agree with Stefan that that's the

466
00:22:45,480 --> 00:22:47,520
purview of other groups and there are

467
00:22:47,520 --> 00:22:49,380
there are you know other groups actively

468
00:22:49,380 --> 00:22:52,500
working on this but their scope is is um

469
00:22:52,500 --> 00:22:57,000
worlds not uh you know small telemetry

470
00:22:57,000 --> 00:22:58,559
so they're going to be biased towards

471
00:22:58,559 --> 00:23:00,780
you know something that's you know very

472
00:23:00,780 --> 00:23:02,760
Compact and efficient for a very very

473
00:23:02,760 --> 00:23:03,780
large

474
00:23:03,780 --> 00:23:07,320
object you know mesh compression for an

475
00:23:07,320 --> 00:23:10,200
entire world not for five points or

476
00:23:10,200 --> 00:23:12,419
something like that so the other aspect

477
00:23:12,419 --> 00:23:14,159
of this is it's also more like you know

478
00:23:14,159 --> 00:23:18,299
Telemetry or real-time uh input

479
00:23:18,299 --> 00:23:20,100
um and we've we've seen other requests

480
00:23:20,100 --> 00:23:22,620
and and like uh media over quick about

481
00:23:22,620 --> 00:23:24,600
use cases like remote desktop and things

482
00:23:24,600 --> 00:23:27,780
like that how how is you know input

483
00:23:27,780 --> 00:23:30,000
whether it's you know human input or

484
00:23:30,000 --> 00:23:31,799
some other form of input going to be

485
00:23:31,799 --> 00:23:35,880
carried over RTP and this is just one

486
00:23:35,880 --> 00:23:37,980
specific type of input this is you know

487
00:23:37,980 --> 00:23:40,200
polygonal mesh input

488
00:23:40,200 --> 00:23:43,320
um but how you encode input in general

489
00:23:43,320 --> 00:23:45,720
and how you describe it is you know is

490
00:23:45,720 --> 00:23:47,820
also you know something that needs to be

491
00:23:47,820 --> 00:23:50,159
discussed and so I don't think that it's

492
00:23:50,159 --> 00:23:52,559
just let's just register something and

493
00:23:52,559 --> 00:23:53,880
and get it out there and nobody else

494
00:23:53,880 --> 00:23:55,380
will ever use it I think we need to

495
00:23:55,380 --> 00:23:56,760
really think about how do we describe

496
00:23:56,760 --> 00:23:59,280
you know simple geometries and how would

497
00:23:59,280 --> 00:24:00,960
we also describe input

498
00:24:00,960 --> 00:24:02,760
and where's the right place to to have

499
00:24:02,760 --> 00:24:04,919
conversations about those two things and

500
00:24:04,919 --> 00:24:06,960
there is work at Alm and MPEG on

501
00:24:06,960 --> 00:24:08,940
political mesh compression but like I

502
00:24:08,940 --> 00:24:10,799
said it's it's for compressing worlds

503
00:24:10,799 --> 00:24:14,039
not you know not I move my hand an inch

504
00:24:14,039 --> 00:24:16,400
this way

505
00:24:25,919 --> 00:24:28,500
uh David Scott I just wanted to react to

506
00:24:28,500 --> 00:24:31,679
What Harold was saying so forgive me I

507
00:24:31,679 --> 00:24:35,039
uh wouldn't consider myself an avt core

508
00:24:35,039 --> 00:24:36,840
Enthusiast I'm very new to this space

509
00:24:36,840 --> 00:24:38,760
and I just was kind of walking by in the

510
00:24:38,760 --> 00:24:41,880
hallway uh but uh I know Hawaiian it

511
00:24:41,880 --> 00:24:43,260
works

512
00:24:43,260 --> 00:24:46,080
um the I was looking through the RTP

513
00:24:46,080 --> 00:24:49,260
Registries and all of them have a

514
00:24:49,260 --> 00:24:52,220
registration procedure of expert review

515
00:24:52,220 --> 00:24:55,320
or specification required and

516
00:24:55,320 --> 00:24:58,500
specification required me means expert

517
00:24:58,500 --> 00:25:00,480
review and the expert has verified that

518
00:25:00,480 --> 00:25:03,240
there is some kind of a spec the spec

519
00:25:03,240 --> 00:25:04,919
could be written on the back of a paper

520
00:25:04,919 --> 00:25:06,720
napkin that you've taken a picture on

521
00:25:06,720 --> 00:25:10,559
and posted on your website that's fine

522
00:25:10,559 --> 00:25:14,760
um it is actually uh like it the

523
00:25:14,760 --> 00:25:16,860
specification does not have to be an ITF

524
00:25:16,860 --> 00:25:19,520
specification

525
00:25:20,100 --> 00:25:22,500
uh

526
00:25:22,500 --> 00:25:25,200
uh no yeah exactly like the uh if I

527
00:25:25,200 --> 00:25:26,640
promise that I will keep serving that

528
00:25:26,640 --> 00:25:29,700
picture Forever on that URL anyway

529
00:25:29,700 --> 00:25:31,919
um like the the ex that's the expert's

530
00:25:31,919 --> 00:25:33,659
purview but that does not mean that you

531
00:25:33,659 --> 00:25:36,480
need any like a standard track RFC it

532
00:25:36,480 --> 00:25:38,640
doesn't mean you need any kind of RFC

533
00:25:38,640 --> 00:25:41,100
like the simplest way is a draft zero

534
00:25:41,100 --> 00:25:42,840
zero like that is definitely agree

535
00:25:42,840 --> 00:25:46,200
accepted as a stable reference

536
00:25:46,200 --> 00:25:47,340
um

537
00:25:47,340 --> 00:25:50,880
uh they stay on the archive so this

538
00:25:50,880 --> 00:25:53,580
group is not actually a gatekeeper to

539
00:25:53,580 --> 00:25:56,100
any of these Registries

540
00:25:56,100 --> 00:25:58,380
um and similarly this group is not a

541
00:25:58,380 --> 00:26:02,340
gatekeeper to create a new registry so I

542
00:26:02,340 --> 00:26:03,960
think as someone who's done something

543
00:26:03,960 --> 00:26:05,520
like this before

544
00:26:05,520 --> 00:26:08,820
the two options here is telecon like

545
00:26:08,820 --> 00:26:10,559
sure we're interested we want to work on

546
00:26:10,559 --> 00:26:13,320
this let's do it here or we're not

547
00:26:13,320 --> 00:26:15,840
interested just go publish it on the

548
00:26:15,840 --> 00:26:16,980
independent stream you get everything

549
00:26:16,980 --> 00:26:19,799
you want and

550
00:26:19,799 --> 00:26:23,279
all right win-win-win so like

551
00:26:23,279 --> 00:26:27,480
the the only reason where you can get a

552
00:26:27,480 --> 00:26:29,279
little Ken Block is if you think okay

553
00:26:29,279 --> 00:26:32,100
this is so harmful that we want to use

554
00:26:32,100 --> 00:26:34,200
the INR registry as a way to tell Colin

555
00:26:34,200 --> 00:26:36,419
no no no bad bad bad

556
00:26:36,419 --> 00:26:38,100
but I don't think that's the case here

557
00:26:38,100 --> 00:26:40,380
people are just saying Matt shrug so I

558
00:26:40,380 --> 00:26:42,299
think there's a clear path forward here

559
00:26:42,299 --> 00:26:45,900
and Colin but does that work for you I'm

560
00:26:45,900 --> 00:26:49,220
just I'm trying to help but

561
00:26:49,440 --> 00:26:50,820
yeah

562
00:26:50,820 --> 00:26:52,100
Bernard

563
00:26:52,100 --> 00:26:54,539
yeah I think we should close the line

564
00:26:54,539 --> 00:26:56,640
but yeah to uh follow up on what David

565
00:26:56,640 --> 00:26:58,500
just said I think the question is Cullen

566
00:26:58,500 --> 00:27:01,200
what Ayana policy would you want

567
00:27:01,200 --> 00:27:03,900
and you know who if it's expert review

568
00:27:03,900 --> 00:27:05,760
required who would the expert be do you

569
00:27:05,760 --> 00:27:07,980
have a volunteer in mind

570
00:27:07,980 --> 00:27:09,179
um and how do you how do you want this

571
00:27:09,179 --> 00:27:10,140
to work

572
00:27:10,140 --> 00:27:11,820
I wouldn't worry about the working group

573
00:27:11,820 --> 00:27:13,440
or getting it published just think about

574
00:27:13,440 --> 00:27:15,360
how you want to set it up do you have

575
00:27:15,360 --> 00:27:17,279
any comments

576
00:27:17,279 --> 00:27:20,580
uh yeah it's it's um uh the small

577
00:27:20,580 --> 00:27:23,400
numbers are expert review any any expert

578
00:27:23,400 --> 00:27:25,440
would be fine and the larger numbers are

579
00:27:25,440 --> 00:27:27,360
first come first serve so it's pretty

580
00:27:27,360 --> 00:27:28,919
clear and pretty simple how the Ayana

581
00:27:28,919 --> 00:27:31,620
registry would would work on it

582
00:27:31,620 --> 00:27:33,620
um

583
00:27:36,000 --> 00:27:38,400
yeah so actually you really don't need

584
00:27:38,400 --> 00:27:40,200
that much expertise in the working group

585
00:27:40,200 --> 00:27:43,440
all you need is a is a document that uh

586
00:27:43,440 --> 00:27:45,539
creates the registry with your your it

587
00:27:45,539 --> 00:27:47,400
kind of Will self-function on its own

588
00:27:47,400 --> 00:27:49,200
once you do that right with the expert

589
00:27:49,200 --> 00:27:53,340
review and the the Ayana policies

590
00:27:53,340 --> 00:27:55,440
yeah correct

591
00:27:55,440 --> 00:27:56,940
right

592
00:27:56,940 --> 00:28:00,059
so the the the the the struggle that

593
00:28:00,059 --> 00:28:03,419
that I get myself to here is

594
00:28:03,419 --> 00:28:05,480
um

595
00:28:06,860 --> 00:28:10,799
dispatch sort of sent me here so so on

596
00:28:10,799 --> 00:28:12,840
the on the the where to do it and how to

597
00:28:12,840 --> 00:28:15,419
move forward right I mean if people like

598
00:28:15,419 --> 00:28:17,520
if if the group wanted to recommend

599
00:28:17,520 --> 00:28:19,200
Colin we recommend you do this through

600
00:28:19,200 --> 00:28:21,059
the independent stream like that would

601
00:28:21,059 --> 00:28:22,320
be great I'd have no problem with that

602
00:28:22,320 --> 00:28:24,000
that'd be super

603
00:28:24,000 --> 00:28:26,700
um what I don't want to do is go do it

604
00:28:26,700 --> 00:28:28,260
through the independent stream have it

605
00:28:28,260 --> 00:28:30,299
go to the isg review and have them tell

606
00:28:30,299 --> 00:28:33,000
me this is clearly in the scope of this

607
00:28:33,000 --> 00:28:34,620
working group because it is in the scope

608
00:28:34,620 --> 00:28:36,480
of this working group's Charter which is

609
00:28:36,480 --> 00:28:38,940
a valid reason for the isg to block the

610
00:28:38,940 --> 00:28:40,380
independent stream from publishing this

611
00:28:40,380 --> 00:28:43,020
document I do not want to do that so you

612
00:28:43,020 --> 00:28:45,779
guys have to tell me in the minutes that

613
00:28:45,779 --> 00:28:47,039
you're recommending I take it to the

614
00:28:47,039 --> 00:28:48,539
independent stream or I'm not taking it

615
00:28:48,539 --> 00:28:49,320
there

616
00:28:49,320 --> 00:28:52,020
yeah let's take it with it okay is there

617
00:28:52,020 --> 00:28:54,240
anybody to do do we want does anybody

618
00:28:54,240 --> 00:28:55,799
object just telling Colin take us to be

619
00:28:55,799 --> 00:28:58,080
an independent stream and this group has

620
00:28:58,080 --> 00:28:59,340
no problem with publishing it as

621
00:28:59,340 --> 00:29:01,080
independent stream

622
00:29:01,080 --> 00:29:02,520
hearing no objection let's put that in

623
00:29:02,520 --> 00:29:04,559
the minutes so that if anybody at the

624
00:29:04,559 --> 00:29:06,539
iesg complains you can point them at

625
00:29:06,539 --> 00:29:07,980
these minutes

626
00:29:07,980 --> 00:29:09,600
okay yes but you know

627
00:29:09,600 --> 00:29:12,120
but we

628
00:29:12,120 --> 00:29:15,559
used to love the iesc at that point

629
00:29:15,679 --> 00:29:17,520
yeah I hope it doesn't make that long

630
00:29:17,520 --> 00:29:19,320
either but if

631
00:29:19,320 --> 00:29:21,120
yeah

632
00:29:21,120 --> 00:29:24,020
um yeah okay so that is

633
00:29:24,020 --> 00:29:27,500
Murray is kind of like

634
00:29:33,840 --> 00:29:35,279
did you want to say something or are you

635
00:29:35,279 --> 00:29:37,380
okay all right all right well we're good

636
00:29:37,380 --> 00:29:39,860
that is

637
00:29:40,140 --> 00:29:42,539
taking care of and Ella knows what to do

638
00:29:42,539 --> 00:29:44,460
Colin wants to say something more I just

639
00:29:44,460 --> 00:29:45,720
want to say thank you that's all okay

640
00:29:45,720 --> 00:29:48,720
welcome

641
00:29:49,200 --> 00:29:51,419
all right

642
00:29:51,419 --> 00:29:52,559
all right

643
00:29:52,559 --> 00:29:54,000
um

644
00:29:54,000 --> 00:29:56,159
much less controversial we're doing we

645
00:29:56,159 --> 00:29:58,500
had a CFA on

646
00:29:58,500 --> 00:30:02,340
on the RV trailer for b3c

647
00:30:02,340 --> 00:30:03,960
um we had several affirmative responses

648
00:30:03,960 --> 00:30:05,880
saying we like to do it so I think

649
00:30:05,880 --> 00:30:07,320
the conclusion is we're going to adopt

650
00:30:07,320 --> 00:30:08,399
that

651
00:30:08,399 --> 00:30:09,960
Bernard is that I think you were writing

652
00:30:09,960 --> 00:30:11,580
that so do you want to confirm that yeah

653
00:30:11,580 --> 00:30:13,860
I mean uh it looks to me like there's

654
00:30:13,860 --> 00:30:15,720
consensus to adopt if are there any

655
00:30:15,720 --> 00:30:18,919
objections in this room

656
00:30:21,960 --> 00:30:24,240
if not then the author should just

657
00:30:24,240 --> 00:30:29,720
submit a draft ietf uh avt core doc

658
00:30:29,840 --> 00:30:33,080
sounds good

659
00:30:34,260 --> 00:30:37,260
all right um we are still have

660
00:30:37,260 --> 00:30:41,220
a uh CFA going on the rgcp messages for

661
00:30:41,220 --> 00:30:43,320
green metadata

662
00:30:43,320 --> 00:30:45,179
um the draft is available

663
00:30:45,179 --> 00:30:47,279
that's going to November 30th

664
00:30:47,279 --> 00:30:48,840
if you have any opinions on that please

665
00:30:48,840 --> 00:30:51,179
comment on the list

666
00:30:51,179 --> 00:30:53,220
or if you have something you need to say

667
00:30:53,220 --> 00:30:56,640
here about it let us know but that seems

668
00:30:56,640 --> 00:30:57,960
only if it's

669
00:30:57,960 --> 00:31:00,539
you know urgent

670
00:31:00,539 --> 00:31:05,240
okay and next up is RTP for skip

671
00:31:06,840 --> 00:31:09,240
here I am uh good morning

672
00:31:09,240 --> 00:31:10,260
um

673
00:31:10,260 --> 00:31:12,659
so go through pretty quickly here let's

674
00:31:12,659 --> 00:31:15,000
take in not a whole lot to report but um

675
00:31:15,000 --> 00:31:18,779
we did submit the revision 03 draft

676
00:31:18,779 --> 00:31:23,820
in uh next slide uh not on October 17th

677
00:31:23,820 --> 00:31:25,740
um responding directly to reviewers

678
00:31:25,740 --> 00:31:27,960
questions

679
00:31:27,960 --> 00:31:31,520
um again revise the abstract obstruct

680
00:31:31,520 --> 00:31:35,120
introduction and mapping to STP sections

681
00:31:35,120 --> 00:31:38,760
submitted it as XML file

682
00:31:38,760 --> 00:31:40,559
um I think we've resolved this issue

683
00:31:40,559 --> 00:31:42,360
before I got it keeps coming up and all

684
00:31:42,360 --> 00:31:43,559
these reviewers

685
00:31:43,559 --> 00:31:45,720
whether the skip 210 referenced is a

686
00:31:45,720 --> 00:31:49,380
normative or informative reference

687
00:31:49,380 --> 00:31:51,600
um and if we need to bring that issue up

688
00:31:51,600 --> 00:31:53,640
again or not or just I think we've

689
00:31:53,640 --> 00:31:56,120
decided the group has decided us again

690
00:31:56,120 --> 00:31:58,559
not using the queue oh he's using the

691
00:31:58,559 --> 00:32:00,840
queue oh I just had myself

692
00:32:00,840 --> 00:32:03,539
um I I think it is really important that

693
00:32:03,539 --> 00:32:05,880
remains an informative reference and not

694
00:32:05,880 --> 00:32:07,740
necessarily for this specification but

695
00:32:07,740 --> 00:32:10,440
in general because we've gone through

696
00:32:10,440 --> 00:32:11,760
this whole argument before and the

697
00:32:11,760 --> 00:32:14,220
reason why is it gets you out of a

698
00:32:14,220 --> 00:32:17,460
complex it it means that if there is I'm

699
00:32:17,460 --> 00:32:18,779
not talking about Skip I'm talking about

700
00:32:18,779 --> 00:32:20,760
some other codecs if there was IPR on

701
00:32:20,760 --> 00:32:22,980
the codec there's not necessarily IPR on

702
00:32:22,980 --> 00:32:25,740
this and I think that's a really I think

703
00:32:25,740 --> 00:32:27,059
that should be a fundamental policy I

704
00:32:27,059 --> 00:32:28,080
just think it should be a thing that we

705
00:32:28,080 --> 00:32:30,299
update in our guidelines for authors of

706
00:32:30,299 --> 00:32:32,640
this doc of of you know media formats is

707
00:32:32,640 --> 00:32:34,330
that it's an informal reference

708
00:32:34,330 --> 00:32:35,520
[Music]

709
00:32:35,520 --> 00:32:36,899
okay

710
00:32:36,899 --> 00:32:39,500
all right

711
00:32:40,260 --> 00:32:42,840
and so I guess really The Next Step I

712
00:32:42,840 --> 00:32:45,600
guess is to I know that the reviews last

713
00:32:45,600 --> 00:32:47,279
reviews were done on the O2 version of

714
00:32:47,279 --> 00:32:48,840
the draft

715
00:32:48,840 --> 00:32:51,179
um most of them are ready with issues I

716
00:32:51,179 --> 00:32:52,500
guess

717
00:32:52,500 --> 00:32:54,419
more so I guess next slide just to talk

718
00:32:54,419 --> 00:32:55,500
about

719
00:32:55,500 --> 00:32:57,480
what to do about requesting another

720
00:32:57,480 --> 00:32:59,580
formal review to

721
00:32:59,580 --> 00:33:01,980
have all the reviewers be satisfied with

722
00:33:01,980 --> 00:33:03,419
the current state of the document and

723
00:33:03,419 --> 00:33:06,360
allowing it to go forward did they

724
00:33:06,360 --> 00:33:09,000
respond to you in each case uh I mean

725
00:33:09,000 --> 00:33:10,260
that's I don't know that they need to

726
00:33:10,260 --> 00:33:13,019
re-review it just we need I I just

727
00:33:13,019 --> 00:33:16,080
basically what I want is just a

728
00:33:16,080 --> 00:33:18,240
citation from these people saying yeah

729
00:33:18,240 --> 00:33:20,519
I'm fine and you adjust my comments

730
00:33:20,519 --> 00:33:21,899
that's all

731
00:33:21,899 --> 00:33:24,779
right no I haven't I've not received any

732
00:33:24,779 --> 00:33:26,640
we've never seen any feedback on the

733
00:33:26,640 --> 00:33:28,679
version three draft at this point so

734
00:33:28,679 --> 00:33:31,440
well so so the none of the reviewers

735
00:33:31,440 --> 00:33:34,140
responded back to you or

736
00:33:34,140 --> 00:33:36,480
not not regarding the version three

737
00:33:36,480 --> 00:33:39,659
document no okay well I mean there's

738
00:33:39,659 --> 00:33:41,880
does this I think you you've done what

739
00:33:41,880 --> 00:33:43,559
you needed to do you asked them and if

740
00:33:43,559 --> 00:33:45,600
they're not responding I don't know that

741
00:33:45,600 --> 00:33:47,220
there's anything more you can do I mean

742
00:33:47,220 --> 00:33:48,480
you can't go to their house and make

743
00:33:48,480 --> 00:33:51,539
them do it I mean I can reach out and

744
00:33:51,539 --> 00:33:53,519
reach out to them once again just yeah

745
00:33:53,519 --> 00:33:56,220
just maybe send one last episode you

746
00:33:56,220 --> 00:33:58,260
know that's that's it you can't we can't

747
00:33:58,260 --> 00:33:59,940
uh haggle them forever

748
00:33:59,940 --> 00:34:02,640
right right okay yeah so that's

749
00:34:02,640 --> 00:34:03,960
basically where we're at this point I

750
00:34:03,960 --> 00:34:06,779
guess what to do to resolve anything to

751
00:34:06,779 --> 00:34:08,840
say

752
00:34:08,940 --> 00:34:11,339
okay

753
00:34:11,339 --> 00:34:12,418
all right

754
00:34:12,418 --> 00:34:13,980
um

755
00:34:13,980 --> 00:34:15,659
and that's all that's the only side you

756
00:34:15,659 --> 00:34:18,000
have all right so

757
00:34:18,000 --> 00:34:20,159
yeah on the subject

758
00:34:20,159 --> 00:34:22,679
on the subject and this is this is not

759
00:34:22,679 --> 00:34:25,020
at all going power down over here

760
00:34:25,020 --> 00:34:27,719
um I've noticed recently I mean over the

761
00:34:27,719 --> 00:34:29,699
last three years or so

762
00:34:29,699 --> 00:34:32,639
a real increase in bureaucracy you have

763
00:34:32,639 --> 00:34:35,820
to sign this off and the sign off has to

764
00:34:35,820 --> 00:34:39,000
be recorded and can we cut down a little

765
00:34:39,000 --> 00:34:42,500
bit on that please it's it's getting

766
00:34:42,500 --> 00:34:45,659
frankly really annoying it I mean this

767
00:34:45,659 --> 00:34:46,800
is this is

768
00:34:46,800 --> 00:34:49,918
we're not that close from ISO style a

769
00:34:49,918 --> 00:34:53,699
sign of procedures now thank you yeah

770
00:34:53,699 --> 00:34:55,918
well that that is a good point Stefan

771
00:34:55,918 --> 00:34:58,080
the uh the amount of questions you now

772
00:34:58,080 --> 00:35:00,240
have to the the size of the public

773
00:35:00,240 --> 00:35:02,820
questions has kind of grown enormously

774
00:35:02,820 --> 00:35:05,940
in the just in the last six months

775
00:35:05,940 --> 00:35:08,220
um so uh I think those sentiments are

776
00:35:08,220 --> 00:35:10,680
good ones but uh for this purpose I

777
00:35:10,680 --> 00:35:12,000
think we've we've gone through enough

778
00:35:12,000 --> 00:35:15,660
Hoops to write the public so

779
00:35:15,660 --> 00:35:18,420
you know well if if hassling is required

780
00:35:18,420 --> 00:35:20,099
for the director it's they'll be hassled

781
00:35:20,099 --> 00:35:22,940
later in the process

782
00:35:23,220 --> 00:35:25,200
but I think you've done what you needed

783
00:35:25,200 --> 00:35:26,460
to do Dan so

784
00:35:26,460 --> 00:35:29,820
all right thank you

785
00:35:29,820 --> 00:35:32,099
okay

786
00:35:32,099 --> 00:35:34,079
all right so I think we're good there uh

787
00:35:34,079 --> 00:35:38,180
Bernard is the shepherd on that so

788
00:35:40,260 --> 00:35:43,380
all right okay next

789
00:35:43,380 --> 00:35:44,280
yeah

790
00:35:44,280 --> 00:35:45,900
um so at the interim meeting we

791
00:35:45,900 --> 00:35:48,660
basically talked about a

792
00:35:48,660 --> 00:35:51,000
um little sandbox where we could

793
00:35:51,000 --> 00:35:52,980
experiment with RTP over quick in

794
00:35:52,980 --> 00:35:56,900
JavaScript so next slide

795
00:35:57,540 --> 00:35:59,940
um there were some Curious observations

796
00:35:59,940 --> 00:36:01,320
um

797
00:36:01,320 --> 00:36:04,200
a few things were that first of all the

798
00:36:04,200 --> 00:36:05,880
glass to gas latency was considerably

799
00:36:05,880 --> 00:36:07,920
higher than the measured frame rtt and

800
00:36:07,920 --> 00:36:10,260
there was noticeable lag when you went

801
00:36:10,260 --> 00:36:12,900
to high resolutions like full HD at 30

802
00:36:12,900 --> 00:36:16,140
frames and a megabit average Target I

803
00:36:16,140 --> 00:36:19,560
was measuring like 630 millisecond glass

804
00:36:19,560 --> 00:36:22,020
latency within our frame rtt of 100

805
00:36:22,020 --> 00:36:24,180
milliseconds so that was a little

806
00:36:24,180 --> 00:36:25,200
curious

807
00:36:25,200 --> 00:36:26,640
um the other thing that was weird was

808
00:36:26,640 --> 00:36:29,040
that we didn't observe any reordering on

809
00:36:29,040 --> 00:36:31,020
the receiver I think in hundreds of

810
00:36:31,020 --> 00:36:33,240
tests no reordering at all

811
00:36:33,240 --> 00:36:35,040
so that raised a bunch of questions

812
00:36:35,040 --> 00:36:37,740
about what was going on exactly why it

813
00:36:37,740 --> 00:36:39,180
wasn't being why we didn't see

814
00:36:39,180 --> 00:36:41,160
reordering and also the bandwidth

815
00:36:41,160 --> 00:36:42,900
consumption was considerably lower than

816
00:36:42,900 --> 00:36:45,240
the average Target bit rate

817
00:36:45,240 --> 00:36:47,880
um except for a weird vp9 bug where

818
00:36:47,880 --> 00:36:50,280
um with a certain with variable bit rate

819
00:36:50,280 --> 00:36:52,800
and uh temporal scalability with three

820
00:36:52,800 --> 00:36:54,960
layers it sent like at 10 times more

821
00:36:54,960 --> 00:36:56,940
than the target average bit rate

822
00:36:56,940 --> 00:36:59,160
so the question is what was going on and

823
00:36:59,160 --> 00:37:01,879
next slide

824
00:37:02,040 --> 00:37:03,960
um we I think finally figured it out

825
00:37:03,960 --> 00:37:05,940
which was basically that you have to be

826
00:37:05,940 --> 00:37:09,060
very careful in the way you write in the

827
00:37:09,060 --> 00:37:12,060
web transport API in particular it is

828
00:37:12,060 --> 00:37:14,280
not recommended to a weight right or dot

829
00:37:14,280 --> 00:37:15,119
write

830
00:37:15,119 --> 00:37:17,880
uh because that promise returns once a

831
00:37:17,880 --> 00:37:19,440
chunk is handed off to the quick send

832
00:37:19,440 --> 00:37:21,960
queue and that effectively prevents the

833
00:37:21,960 --> 00:37:24,119
quick stack from multiplexing frames or

834
00:37:24,119 --> 00:37:26,220
streams on web transport

835
00:37:26,220 --> 00:37:28,440
um and so you you suppress the

836
00:37:28,440 --> 00:37:29,940
concurrent sending of P frames and

837
00:37:29,940 --> 00:37:31,800
iframes

838
00:37:31,800 --> 00:37:32,579
um

839
00:37:32,579 --> 00:37:33,200
and

840
00:37:33,200 --> 00:37:36,119
that's why the reordering was rarely

841
00:37:36,119 --> 00:37:37,560
observed on the receiver because

842
00:37:37,560 --> 00:37:39,300
basically you were sending the iframe

843
00:37:39,300 --> 00:37:40,920
waiting until it was essentially almost

844
00:37:40,920 --> 00:37:43,560
sent and then sending the next keyframe

845
00:37:43,560 --> 00:37:45,839
and that also reduced the bandwidth

846
00:37:45,839 --> 00:37:47,400
usage by stretching out the delivery

847
00:37:47,400 --> 00:37:51,060
times so uh the way to fix that is you

848
00:37:51,060 --> 00:37:53,220
only await a write or dot ready promise

849
00:37:53,220 --> 00:37:55,020
which happens as soon as you can send on

850
00:37:55,020 --> 00:37:57,359
the stream and then you just write the

851
00:37:57,359 --> 00:38:00,720
chunk and then you uh call writer.close

852
00:38:00,720 --> 00:38:03,300
and and Dot Bend for whatever you do

853
00:38:03,300 --> 00:38:05,099
once it's closed

854
00:38:05,099 --> 00:38:06,780
um so once you do that the frames and

855
00:38:06,780 --> 00:38:09,300
iframes get sent concurrently

856
00:38:09,300 --> 00:38:11,460
um I'll show you some some graphs but it

857
00:38:11,460 --> 00:38:13,560
also looks like this results in more

858
00:38:13,560 --> 00:38:16,740
rapid congestion window growth so that

859
00:38:16,740 --> 00:38:18,900
your iframe actually gets sent with

860
00:38:18,900 --> 00:38:21,839
fewer rtts which is kind of interesting

861
00:38:21,839 --> 00:38:25,200
we did start re observing reordering at

862
00:38:25,200 --> 00:38:27,119
the receiver so we had to do a reorder

863
00:38:27,119 --> 00:38:28,440
buffer

864
00:38:28,440 --> 00:38:29,820
um the Jitter buffer is actually

865
00:38:29,820 --> 00:38:32,579
implemented in another API it seems like

866
00:38:32,579 --> 00:38:35,040
the smoothing is now occurring also uh

867
00:38:35,040 --> 00:38:36,780
the video looks a lot smoother

868
00:38:36,780 --> 00:38:38,820
yeah and that's occurring in the media

869
00:38:38,820 --> 00:38:41,460
stream track generator API

870
00:38:41,460 --> 00:38:42,780
um so that's kind of interesting between

871
00:38:42,780 --> 00:38:44,640
this reorder buffer and that smoothing

872
00:38:44,640 --> 00:38:46,680
you almost you seem to get the effect of

873
00:38:46,680 --> 00:38:49,500
a Jitter buffer uh without doing hardly

874
00:38:49,500 --> 00:38:50,880
any work

875
00:38:50,880 --> 00:38:52,079
um and then also the bandwidth

876
00:38:52,079 --> 00:38:53,520
consumption is now closer to but

877
00:38:53,520 --> 00:38:55,079
slightly larger than the average Target

878
00:38:55,079 --> 00:38:57,900
bit rate and the glass to glass latency

879
00:38:57,900 --> 00:39:00,599
is considerably lower

880
00:39:00,599 --> 00:39:02,099
um it's hundreds of milliseconds lower

881
00:39:02,099 --> 00:39:04,140
now and particularly you can run now the

882
00:39:04,140 --> 00:39:05,940
demo at high resolutions with complex

883
00:39:05,940 --> 00:39:10,740
codecs like av1 and um it's close to

884
00:39:10,740 --> 00:39:13,200
near real-time performance so that

885
00:39:13,200 --> 00:39:14,820
actually is pretty good news for things

886
00:39:14,820 --> 00:39:17,480
like ingestion video ingestion or

887
00:39:17,480 --> 00:39:19,619
potentially distribution scenarios

888
00:39:19,619 --> 00:39:20,940
because it seems to work pretty darn

889
00:39:20,940 --> 00:39:22,800
well anyway there's a good reference

890
00:39:22,800 --> 00:39:25,859
which talks about some of the nasty

891
00:39:25,859 --> 00:39:28,800
effects of async await in JavaScript and

892
00:39:28,800 --> 00:39:29,880
some of the things that can happen I'm

893
00:39:29,880 --> 00:39:30,900
going to go through the rest of the code

894
00:39:30,900 --> 00:39:33,000
and see if there are any more things

895
00:39:33,000 --> 00:39:34,140
like this

896
00:39:34,140 --> 00:39:37,759
um anyway next slide

897
00:39:38,640 --> 00:39:40,859
so this is an example of comparison of

898
00:39:40,859 --> 00:39:42,480
before and after

899
00:39:42,480 --> 00:39:44,040
um and if you click on the before you'll

900
00:39:44,040 --> 00:39:47,220
get the the code that that runs with

901
00:39:47,220 --> 00:39:50,160
before uh do removing these bottlenecks

902
00:39:50,160 --> 00:39:51,420
and then after you'll see what happens

903
00:39:51,420 --> 00:39:53,760
afterwards uh but one of the interesting

904
00:39:53,760 --> 00:39:56,280
things in the after is is it does look

905
00:39:56,280 --> 00:39:58,859
much closely uh clustered around the rtt

906
00:39:58,859 --> 00:39:59,820
min

907
00:39:59,820 --> 00:40:03,480
uh for the P frames and then the large

908
00:40:03,480 --> 00:40:05,820
frame at around 11 000 bytes is probably

909
00:40:05,820 --> 00:40:08,099
the iframe and the other thing you can

910
00:40:08,099 --> 00:40:12,599
see is the the combination of uh uh well

911
00:40:12,599 --> 00:40:14,940
there's basically minimal extra delay

912
00:40:14,940 --> 00:40:17,460
above the transmission line

913
00:40:17,460 --> 00:40:19,140
um which kind of indicates that by this

914
00:40:19,140 --> 00:40:20,820
point the sea wind has grown to be able

915
00:40:20,820 --> 00:40:24,720
to send these 11 000 bytes in one rtt

916
00:40:24,720 --> 00:40:26,820
um so anyway the the bottom line of all

917
00:40:26,820 --> 00:40:29,760
of this is that um it's very possible to

918
00:40:29,760 --> 00:40:32,880
do interactive uh the the performance of

919
00:40:32,880 --> 00:40:34,560
RTP over quick can potentially be

920
00:40:34,560 --> 00:40:36,720
extremely good

921
00:40:36,720 --> 00:40:39,119
um without even a lot of effort

922
00:40:39,119 --> 00:40:40,859
um done this is entirely in JavaScript

923
00:40:40,859 --> 00:40:43,500
no wasm or anything like this

924
00:40:43,500 --> 00:40:45,060
um so it looks like you can get

925
00:40:45,060 --> 00:40:46,980
interactive uh

926
00:40:46,980 --> 00:40:50,400
uh performance out of this uh without a

927
00:40:50,400 --> 00:40:54,680
lot of effort anyway that's the update

928
00:41:00,000 --> 00:41:01,920
oh and here are some pointers if you

929
00:41:01,920 --> 00:41:03,540
want to learn more about how to about

930
00:41:03,540 --> 00:41:06,359
this stuff uh pointers to the code for

931
00:41:06,359 --> 00:41:08,099
the the optimized version the old

932
00:41:08,099 --> 00:41:10,619
version so you can see the comparison

933
00:41:10,619 --> 00:41:12,180
um and also there's a web codex only

934
00:41:12,180 --> 00:41:14,640
demo which has no transport at all and

935
00:41:14,640 --> 00:41:16,260
at this point the the one with network

936
00:41:16,260 --> 00:41:18,300
transport is pretty pretty close to the

937
00:41:18,300 --> 00:41:21,480
performance of the no transport demo

938
00:41:21,480 --> 00:41:24,260
um so

939
00:41:25,079 --> 00:41:28,020
all right uh thank you Bernard

940
00:41:28,020 --> 00:41:31,040
um any questions on this

941
00:41:31,740 --> 00:41:35,720
we'll move on to Peter

942
00:41:38,339 --> 00:41:40,500
Peter are you here

943
00:41:40,500 --> 00:41:43,220
there you are good

944
00:41:43,740 --> 00:41:46,920
test test yes we hear you

945
00:41:46,920 --> 00:41:49,339
great

946
00:41:57,180 --> 00:41:58,920
go ahead

947
00:41:58,920 --> 00:42:02,400
okay so this is

948
00:42:02,400 --> 00:42:07,079
talking about issue 29 on GitHub

949
00:42:07,079 --> 00:42:09,800
next slide

950
00:42:10,980 --> 00:42:13,140
oh and uh hold on Martin Thompson has

951
00:42:13,140 --> 00:42:15,000
from the room I was just giving notice

952
00:42:15,000 --> 00:42:16,500
about the talk why were the S frame

953
00:42:16,500 --> 00:42:18,180
tariffs not aware of this

954
00:42:18,180 --> 00:42:21,618
he's in another room a long way away

955
00:42:23,880 --> 00:42:26,640
but I don't know I don't know either I'm

956
00:42:26,640 --> 00:42:28,879
sorry

957
00:42:30,720 --> 00:42:33,680
okay go ahead

958
00:42:34,859 --> 00:42:36,839
all right so I'll try to describe the

959
00:42:36,839 --> 00:42:40,279
scenario next slide

960
00:42:40,740 --> 00:42:43,800
uh just reviewing simple things RTP over

961
00:42:43,800 --> 00:42:46,200
quick allows you to have big RTP packets

962
00:42:46,200 --> 00:42:49,020
perhaps a whole frame in one RTP packet

963
00:42:49,020 --> 00:42:52,339
and one quick stream next slide

964
00:42:52,800 --> 00:42:54,839
and S frame lets you encrypt the media

965
00:42:54,839 --> 00:42:57,500
next slide

966
00:42:57,780 --> 00:43:00,780
so if you do s frame over RTP over quick

967
00:43:00,780 --> 00:43:03,720
you put a video frame and an S frame and

968
00:43:03,720 --> 00:43:05,640
a quick stream and you get a big rtb

969
00:43:05,640 --> 00:43:08,940
packet with an S frame payload which is

970
00:43:08,940 --> 00:43:15,119
opaque because it's encrypted next slide

971
00:43:15,540 --> 00:43:18,180
so what's the problem described in the

972
00:43:18,180 --> 00:43:20,280
issue next slide

973
00:43:20,280 --> 00:43:22,140
it is that

974
00:43:22,140 --> 00:43:25,740
what says what it says in section 4.1 of

975
00:43:25,740 --> 00:43:28,920
the RTP over quick draft that you may

976
00:43:28,920 --> 00:43:30,480
need codec specific knowledge to

977
00:43:30,480 --> 00:43:33,480
packetize the payload of incoming rtb

978
00:43:33,480 --> 00:43:36,599
packets into smaller OTP packets next

979
00:43:36,599 --> 00:43:38,839
slide

980
00:43:39,060 --> 00:43:41,280
but when you're using S frame only the

981
00:43:41,280 --> 00:43:42,960
endpoints have the key so in your middle

982
00:43:42,960 --> 00:43:45,839
box can only know about s frame not the

983
00:43:45,839 --> 00:43:49,020
clear text payload so when it says may

984
00:43:49,020 --> 00:43:51,119
need coding specific knowledge maybe

985
00:43:51,119 --> 00:43:53,099
that really means it may need s frame

986
00:43:53,099 --> 00:43:56,599
specific knowledge next slide

987
00:43:58,020 --> 00:43:59,819
um now someone might say well what if we

988
00:43:59,819 --> 00:44:02,460
just use S packet instead of s frame

989
00:44:02,460 --> 00:44:05,220
over RTP over quick but that has the

990
00:44:05,220 --> 00:44:06,420
same problem because you can have a

991
00:44:06,420 --> 00:44:08,819
really large RTP packet using S packet

992
00:44:08,819 --> 00:44:10,859
as well because when you have a really

993
00:44:10,859 --> 00:44:12,960
large RTP packets

994
00:44:12,960 --> 00:44:15,839
like with quick streams there isn't much

995
00:44:15,839 --> 00:44:16,980
difference between this from a nurse

996
00:44:16,980 --> 00:44:18,780
packet because you basically have one

997
00:44:18,780 --> 00:44:24,260
frame per big RTP packet next slide

998
00:44:24,300 --> 00:44:27,660
similar uh but somewhat different you

999
00:44:27,660 --> 00:44:29,220
still have the problem if you do RTP

1000
00:44:29,220 --> 00:44:30,660
over quick stream so this isn't unique

1001
00:44:30,660 --> 00:44:32,940
to quick or sorry over quick datagrams

1002
00:44:32,940 --> 00:44:34,200
this isn't unique to Quick streams

1003
00:44:34,200 --> 00:44:35,339
because

1004
00:44:35,339 --> 00:44:36,839
if you have quick datagrams you can have

1005
00:44:36,839 --> 00:44:39,599
slightly larger overhead so when you

1006
00:44:39,599 --> 00:44:41,640
translate in the other direction from

1007
00:44:41,640 --> 00:44:45,119
RTP over UDP to RTP really quick you can

1008
00:44:45,119 --> 00:44:46,800
end up needing to be packetized to make

1009
00:44:46,800 --> 00:44:49,260
it the payload slightly smaller so it

1010
00:44:49,260 --> 00:44:52,200
fits with the slightly larger overhead

1011
00:44:52,200 --> 00:44:55,040
next slide

1012
00:44:55,079 --> 00:44:57,540
so a summary of the problem is that with

1013
00:44:57,540 --> 00:44:59,099
RTP over quick

1014
00:44:59,099 --> 00:45:01,140
you can have big RTP packets

1015
00:45:01,140 --> 00:45:03,900
you can have MTU differences also and

1016
00:45:03,900 --> 00:45:06,119
these require repacketizing by

1017
00:45:06,119 --> 00:45:07,800
repacketizing as mentioned in the year

1018
00:45:07,800 --> 00:45:10,260
to be a quick draft is codex it may be

1019
00:45:10,260 --> 00:45:12,480
codec specific which might mean a string

1020
00:45:12,480 --> 00:45:13,740
specific

1021
00:45:13,740 --> 00:45:16,140
and uh

1022
00:45:16,140 --> 00:45:17,760
this can't be solved

1023
00:45:17,760 --> 00:45:19,920
purely by the endpoints this is

1024
00:45:19,920 --> 00:45:22,079
something the fiddle box needs to be

1025
00:45:22,079 --> 00:45:23,760
able to do but

1026
00:45:23,760 --> 00:45:26,099
has to work within the bounds of what

1027
00:45:26,099 --> 00:45:28,500
has with that with s frame which is

1028
00:45:28,500 --> 00:45:29,520
encrypted

1029
00:45:29,520 --> 00:45:32,819
next frame or next slide

1030
00:45:32,819 --> 00:45:35,160
so here's a potential solution it's

1031
00:45:35,160 --> 00:45:38,660
pretty simple next slide

1032
00:45:38,700 --> 00:45:41,160
uh this is the RTP packet format

1033
00:45:41,160 --> 00:45:43,980
everyone knows what it is

1034
00:45:43,980 --> 00:45:46,440
that look at the payload part below

1035
00:45:46,440 --> 00:45:48,660
next slide

1036
00:45:48,660 --> 00:45:50,880
and the proposed solution is to

1037
00:45:50,880 --> 00:45:52,560
basically add

1038
00:45:52,560 --> 00:45:54,540
a payload that

1039
00:45:54,540 --> 00:45:57,480
has an S frame sequence number

1040
00:45:57,480 --> 00:45:59,760
an S frame chunk index and then an S

1041
00:45:59,760 --> 00:46:02,579
frame chunk or given an example in the

1042
00:46:02,579 --> 00:46:04,200
next slide but you might think this

1043
00:46:04,200 --> 00:46:05,819
looks a little bit like

1044
00:46:05,819 --> 00:46:08,160
uh RTX where

1045
00:46:08,160 --> 00:46:12,000
there's another sequence number

1046
00:46:12,000 --> 00:46:14,280
in our tx's case it's the original

1047
00:46:14,280 --> 00:46:15,900
sequence number

1048
00:46:15,900 --> 00:46:18,839
which is used and in this case we're

1049
00:46:18,839 --> 00:46:21,359
using the S frames sequence number but

1050
00:46:21,359 --> 00:46:23,099
we'll do it multiple times one for each

1051
00:46:23,099 --> 00:46:24,180
chunk

1052
00:46:24,180 --> 00:46:28,220
so next slide I'll give an example

1053
00:46:28,380 --> 00:46:31,980
so if we have two large RTP packets

1054
00:46:31,980 --> 00:46:34,680
being sent over say quick streams that

1055
00:46:34,680 --> 00:46:37,680
have payloads of a b c d e f for the

1056
00:46:37,680 --> 00:46:38,520
first one

1057
00:46:38,520 --> 00:46:42,300
and G H I J K L for the second one

1058
00:46:42,300 --> 00:46:44,220
imagine it being much larger obviously

1059
00:46:44,220 --> 00:46:46,940
then that can be broken up into small

1060
00:46:46,940 --> 00:46:52,260
chunks of say A B C D or sorry A B C D

1061
00:46:52,260 --> 00:46:56,339
and E F and then g-h-i-j-n-k-o

1062
00:46:56,339 --> 00:46:59,819
and the original sequence numbers that

1063
00:46:59,819 --> 00:47:01,619
were in the large RDP

1064
00:47:01,619 --> 00:47:04,079
test training payloads

1065
00:47:04,079 --> 00:47:06,839
well sequence number tied to the payload

1066
00:47:06,839 --> 00:47:09,300
would be maintained in the payload of

1067
00:47:09,300 --> 00:47:10,680
the smaller

1068
00:47:10,680 --> 00:47:12,420
RTP packets

1069
00:47:12,420 --> 00:47:14,700
you can see there one zero one three

1070
00:47:14,700 --> 00:47:17,099
times one zero two three times

1071
00:47:17,099 --> 00:47:19,920
and then the smaller RTP packets have

1072
00:47:19,920 --> 00:47:21,540
normal sequence numbers one two three

1073
00:47:21,540 --> 00:47:22,920
four five six

1074
00:47:22,920 --> 00:47:24,900
and to keep track of

1075
00:47:24,900 --> 00:47:28,079
how to put the chunks back together when

1076
00:47:28,079 --> 00:47:29,880
you receive them all the chunk indexes

1077
00:47:29,880 --> 00:47:33,300
let you know what we're going to go

1078
00:47:33,300 --> 00:47:36,660
so it's a pretty simple chopping up of

1079
00:47:36,660 --> 00:47:39,119
large RTP packets into small ones in a

1080
00:47:39,119 --> 00:47:41,160
way that you can put the large one back

1081
00:47:41,160 --> 00:47:44,220
together when you get all the small ones

1082
00:47:44,220 --> 00:47:47,400
a Magnus yeah minus

1083
00:47:47,400 --> 00:47:50,099
I think you're might be missing one

1084
00:47:50,099 --> 00:47:52,740
important functionality because these

1085
00:47:52,740 --> 00:47:54,839
fragments can be lost under certain

1086
00:47:54,839 --> 00:47:56,040
conditions

1087
00:47:56,040 --> 00:47:58,380
I think you need the indications of

1088
00:47:58,380 --> 00:48:00,780
saying this is the last

1089
00:48:00,780 --> 00:48:02,819
fragments

1090
00:48:02,819 --> 00:48:05,460
yeah that's that's a drag but

1091
00:48:05,460 --> 00:48:07,140
there are two different ways we can do

1092
00:48:07,140 --> 00:48:09,480
that and uh

1093
00:48:09,480 --> 00:48:11,099
the way I have it written down at the

1094
00:48:11,099 --> 00:48:13,380
moment we use the marker bit but there's

1095
00:48:13,380 --> 00:48:15,960
a slide later where I have there's some

1096
00:48:15,960 --> 00:48:17,579
technical discussion we can have over

1097
00:48:17,579 --> 00:48:19,079
different options

1098
00:48:19,079 --> 00:48:22,260
but uh before we get there I want to

1099
00:48:22,260 --> 00:48:23,880
make sure we

1100
00:48:23,880 --> 00:48:26,819
uh decide whether this whole idea is

1101
00:48:26,819 --> 00:48:30,859
worth going down as a solution for us

1102
00:48:30,859 --> 00:48:33,720
from my perspective I think considering

1103
00:48:33,720 --> 00:48:35,700
what this Frame is ETC you you're not

1104
00:48:35,700 --> 00:48:36,839
going to be able to do anything better

1105
00:48:36,839 --> 00:48:38,339
than you just take the whole s frame

1106
00:48:38,339 --> 00:48:40,500
shop it up in the suitable way for the

1107
00:48:40,500 --> 00:48:42,599
underlying transport and and doing that

1108
00:48:42,599 --> 00:48:44,339
in the r2p payload performance seems to

1109
00:48:44,339 --> 00:48:46,920
be the reasonable Way Forward here uh

1110
00:48:46,920 --> 00:48:49,680
about you might also have to consider if

1111
00:48:49,680 --> 00:48:51,540
you need a

1112
00:48:51,540 --> 00:48:54,300
if the shank index yeah if it only

1113
00:48:54,300 --> 00:48:55,680
started there you always know where to

1114
00:48:55,680 --> 00:48:58,740
start is so I guess it's fine but

1115
00:48:58,740 --> 00:49:00,599
uh

1116
00:49:00,599 --> 00:49:03,599
yeah another one of the issues that we

1117
00:49:03,599 --> 00:49:06,240
trade-offs we can discuss uh which is on

1118
00:49:06,240 --> 00:49:08,579
a future slide involve whether to use a

1119
00:49:08,579 --> 00:49:11,160
chunk index or kind of derive that from

1120
00:49:11,160 --> 00:49:13,920
the sequence number with the first so

1121
00:49:13,920 --> 00:49:15,540
there are different options we can have

1122
00:49:15,540 --> 00:49:18,000
but like I said first I want to open the

1123
00:49:18,000 --> 00:49:19,440
question if we go to the next slide

1124
00:49:19,440 --> 00:49:22,040
perhaps

1125
00:49:24,900 --> 00:49:27,119
here quickly you've got

1126
00:49:27,119 --> 00:49:27,960
um

1127
00:49:27,960 --> 00:49:29,700
thanks Peter so

1128
00:49:29,700 --> 00:49:31,140
um fundamentally I kind of think this

1129
00:49:31,140 --> 00:49:33,000
should be workable

1130
00:49:33,000 --> 00:49:37,440
um how does this thing work with uh

1131
00:49:37,440 --> 00:49:40,859
uh cascaded translators after all you

1132
00:49:40,859 --> 00:49:41,760
are

1133
00:49:41,760 --> 00:49:46,200
creating a consecutive index sequence

1134
00:49:46,200 --> 00:49:49,740
and I suspect if you had a requirement

1135
00:49:49,740 --> 00:49:52,980
to re-do the whole thing at a second

1136
00:49:52,980 --> 00:49:55,380
stage where you still get even smaller

1137
00:49:55,380 --> 00:49:57,540
packets

1138
00:49:57,540 --> 00:50:01,020
um had you thought about that

1139
00:50:01,020 --> 00:50:03,599
uh no I had not thought about that but I

1140
00:50:03,599 --> 00:50:06,780
suppose that you could have two layers

1141
00:50:06,780 --> 00:50:09,480
of it where this smaller one gets broke

1142
00:50:09,480 --> 00:50:11,640
up into even smaller ones and then

1143
00:50:11,640 --> 00:50:14,700
you've so you know but just needs to

1144
00:50:14,700 --> 00:50:17,099
think about this I also had a a general

1145
00:50:17,099 --> 00:50:18,780
question to the group maybe also to

1146
00:50:18,780 --> 00:50:22,920
Magnus as the uh living avt directory

1147
00:50:22,920 --> 00:50:24,300
dictionary

1148
00:50:24,300 --> 00:50:25,740
um whatever

1149
00:50:25,740 --> 00:50:26,700
um

1150
00:50:26,700 --> 00:50:28,859
I try to find my translators have

1151
00:50:28,859 --> 00:50:31,079
existed for a long time so in that

1152
00:50:31,079 --> 00:50:33,540
regard MTU size considerations would

1153
00:50:33,540 --> 00:50:35,400
have needed to be addressed for a long

1154
00:50:35,400 --> 00:50:37,680
time but looking at the topologies draft

1155
00:50:37,680 --> 00:50:40,079
I couldn't find anything that I don't

1156
00:50:40,079 --> 00:50:42,420
think the term MTU even appeared in that

1157
00:50:42,420 --> 00:50:44,819
document I'm not sure coming going back

1158
00:50:44,819 --> 00:50:47,339
to the original RTP specification where

1159
00:50:47,339 --> 00:50:48,839
the translator definitions actually

1160
00:50:48,839 --> 00:50:53,099
talked about MTU sizes so if it had did

1161
00:50:53,099 --> 00:50:55,200
we have a solution to this problem in

1162
00:50:55,200 --> 00:50:56,760
the past that all of us have forgotten

1163
00:50:56,760 --> 00:51:00,559
or did we simply ignore it back then

1164
00:51:00,859 --> 00:51:04,740
s frames are fairly recent thing so

1165
00:51:04,740 --> 00:51:07,980
no but but from even if you had regular

1166
00:51:07,980 --> 00:51:10,740
RTP packets that go into a translator

1167
00:51:10,740 --> 00:51:13,140
they might be ended up send being sent

1168
00:51:13,140 --> 00:51:15,240
on a network segment that has a smaller

1169
00:51:15,240 --> 00:51:16,500
empty do size

1170
00:51:16,500 --> 00:51:18,180
then you would have the same problem

1171
00:51:18,180 --> 00:51:19,740
irrespective

1172
00:51:19,740 --> 00:51:21,359
of s frame

1173
00:51:21,359 --> 00:51:23,640
right so the art the RTP over quick

1174
00:51:23,640 --> 00:51:26,520
draft right now already stays basically

1175
00:51:26,520 --> 00:51:29,160
you can do repacketization in a codex

1176
00:51:29,160 --> 00:51:32,339
specific way so I yeah that's always

1177
00:51:32,339 --> 00:51:34,819
been the answer

1178
00:51:35,480 --> 00:51:38,579
what people did in the past if they did

1179
00:51:38,579 --> 00:51:39,359
anything

1180
00:51:39,359 --> 00:51:43,740
well in in uh conferencing it was there

1181
00:51:43,740 --> 00:51:46,380
we have seen repacketization and it is

1182
00:51:46,380 --> 00:51:49,200
as as was described in the RGB over

1183
00:51:49,200 --> 00:51:51,780
quick draft which is it's codec specific

1184
00:51:51,780 --> 00:51:53,880
so the conference server can repacketize

1185
00:51:53,880 --> 00:51:57,359
say for a participant with a lower MTU

1186
00:51:57,359 --> 00:52:00,540
um in a codex specific way yeah I mean

1187
00:52:00,540 --> 00:52:01,380
the

1188
00:52:01,380 --> 00:52:02,700
translators always

1189
00:52:02,700 --> 00:52:04,200
be packetized I think you know there

1190
00:52:04,200 --> 00:52:06,119
wasn't not typically for MTU issue

1191
00:52:06,119 --> 00:52:08,220
issues because people were mostly

1192
00:52:08,220 --> 00:52:09,599
thinking about audio but certainly like

1193
00:52:09,599 --> 00:52:11,700
changing the key times which is

1194
00:52:11,700 --> 00:52:13,800
especially the same thing so

1195
00:52:13,800 --> 00:52:16,339
okay

1196
00:52:16,619 --> 00:52:19,980
thanks uh Peter just quickly um do you

1197
00:52:19,980 --> 00:52:21,780
have more for your slides or yeah I mean

1198
00:52:21,780 --> 00:52:23,940
yeah there are a few more can you go to

1199
00:52:23,940 --> 00:52:26,359
the next one

1200
00:52:28,980 --> 00:52:31,319
yeah so as I mentioned the slide after

1201
00:52:31,319 --> 00:52:33,300
this has some you know technical

1202
00:52:33,300 --> 00:52:35,400
discussion we should we could do but I

1203
00:52:35,400 --> 00:52:36,660
first wanted to ask

1204
00:52:36,660 --> 00:52:38,520
whether this is a direction worth

1205
00:52:38,520 --> 00:52:42,359
pursuing for issue 29 and if not what's

1206
00:52:42,359 --> 00:52:46,040
another solution for this problem

1207
00:52:48,480 --> 00:52:51,200
uh

1208
00:52:51,900 --> 00:52:54,839
all right so I guess Moe you're next in

1209
00:52:54,839 --> 00:52:57,319
the queue or

1210
00:53:00,720 --> 00:53:04,920
mozinary um the the mechanics of of uh

1211
00:53:04,920 --> 00:53:07,380
the chunking seem like it would work

1212
00:53:07,380 --> 00:53:10,380
okay one small knit would be uh I think

1213
00:53:10,380 --> 00:53:13,319
uh should look into having chunk offsets

1214
00:53:13,319 --> 00:53:16,079
instead of uh indexes I think you know a

1215
00:53:16,079 --> 00:53:17,160
lot of different fragmentation and

1216
00:53:17,160 --> 00:53:19,440
reassembly techniques go back and forth

1217
00:53:19,440 --> 00:53:22,319
between indexing and byte indexing

1218
00:53:22,319 --> 00:53:24,119
um you should look at that to see what

1219
00:53:24,119 --> 00:53:26,339
what use cases work best for you there

1220
00:53:26,339 --> 00:53:28,319
but at the highest level

1221
00:53:28,319 --> 00:53:29,940
um I'm scratching my head a little bit

1222
00:53:29,940 --> 00:53:33,240
about uh the the purpose of this because

1223
00:53:33,240 --> 00:53:35,760
I thought one of the main goals of s

1224
00:53:35,760 --> 00:53:38,579
frame was to have single off tag for

1225
00:53:38,579 --> 00:53:41,880
some media for some large media and now

1226
00:53:41,880 --> 00:53:44,339
you Dice it up however you want deliver

1227
00:53:44,339 --> 00:53:45,480
it however you want and then when it

1228
00:53:45,480 --> 00:53:46,980
gets there you still have this one big

1229
00:53:46,980 --> 00:53:48,839
large auth tag but that means that

1230
00:53:48,839 --> 00:53:49,859
something

1231
00:53:49,859 --> 00:53:51,839
everything delivering that in in the

1232
00:53:51,839 --> 00:53:54,780
middle can't authenticate that thing

1233
00:53:54,780 --> 00:53:57,180
um and so you have this object

1234
00:53:57,180 --> 00:53:59,700
that's maintaining State across all of

1235
00:53:59,700 --> 00:54:01,740
your you know your your network that's

1236
00:54:01,740 --> 00:54:03,960
delivering these things and so it seems

1237
00:54:03,960 --> 00:54:06,540
like the the benefit of s frame of being

1238
00:54:06,540 --> 00:54:08,700
able to just have this single off tag

1239
00:54:08,700 --> 00:54:10,200
over a large

1240
00:54:10,200 --> 00:54:12,300
um Media frame

1241
00:54:12,300 --> 00:54:13,680
and now you're going to chunk it back

1242
00:54:13,680 --> 00:54:16,020
down into smaller objects are you going

1243
00:54:16,020 --> 00:54:18,000
to authenticate those smaller objects as

1244
00:54:18,000 --> 00:54:19,079
well

1245
00:54:19,079 --> 00:54:20,700
and if so wouldn't that defeat the whole

1246
00:54:20,700 --> 00:54:22,500
purpose of you know where you started

1247
00:54:22,500 --> 00:54:24,839
from the first place of of consolidating

1248
00:54:24,839 --> 00:54:26,760
that off tag and if you're not going to

1249
00:54:26,760 --> 00:54:29,160
do that then don't you run the risk of

1250
00:54:29,160 --> 00:54:32,880
of providing amp vectors for attackers

1251
00:54:32,880 --> 00:54:35,339
that can flood you know a lot of

1252
00:54:35,339 --> 00:54:39,240
unauthenticated packets to uh to to a

1253
00:54:39,240 --> 00:54:40,740
lot of different parts of your delivery

1254
00:54:40,740 --> 00:54:42,919
Network

1255
00:54:44,700 --> 00:54:47,220
uh I've always viewed the purpose of s

1256
00:54:47,220 --> 00:54:50,640
frame to be the end in encryption but if

1257
00:54:50,640 --> 00:54:52,859
you want to do hop by hop authentication

1258
00:54:52,859 --> 00:54:54,900
of the whole frame using S frame a

1259
00:54:54,900 --> 00:54:56,700
middle box still could because it can be

1260
00:54:56,700 --> 00:54:59,160
assemble the frame from the chunks if it

1261
00:54:59,160 --> 00:55:01,500
wants it would add some latency to

1262
00:55:01,500 --> 00:55:03,720
authenticate that before forwarding the

1263
00:55:03,720 --> 00:55:06,000
first piece but that happens the same if

1264
00:55:06,000 --> 00:55:07,680
you're going to read the entire quick

1265
00:55:07,680 --> 00:55:08,760
stream

1266
00:55:08,760 --> 00:55:10,619
and authenticate it before you start

1267
00:55:10,619 --> 00:55:12,119
forwarding the quick stream

1268
00:55:12,119 --> 00:55:14,579
so it's kind of the same thing

1269
00:55:14,579 --> 00:55:17,839
um you can still do that

1270
00:55:19,920 --> 00:55:22,500
so you expect the chunking to be purely

1271
00:55:22,500 --> 00:55:25,680
hop context with no

1272
00:55:25,680 --> 00:55:30,500
um no end to end guarantees right

1273
00:55:31,099 --> 00:55:33,359
uh yes

1274
00:55:33,359 --> 00:55:37,200
but the any any place in the middle

1275
00:55:37,200 --> 00:55:39,720
Could reconstruct

1276
00:55:39,720 --> 00:55:42,420
the entire frame if it wanted to for

1277
00:55:42,420 --> 00:55:44,700
forwarding the pieces

1278
00:55:44,700 --> 00:55:46,740
so it could apply the end-to-end

1279
00:55:46,740 --> 00:55:48,599
guarantees if it wants just like it

1280
00:55:48,599 --> 00:55:50,040
could by reading in an entire quick

1281
00:55:50,040 --> 00:55:52,140
stream and then sending it out

1282
00:55:52,140 --> 00:55:54,540
but if it doesn't want to do that it can

1283
00:55:54,540 --> 00:55:56,400
just afford it immediately so it's kind

1284
00:55:56,400 --> 00:55:59,780
of up to the middle box to decide

1285
00:55:59,839 --> 00:56:03,960
I really don't know uh Sergio

1286
00:56:03,960 --> 00:56:06,839
ah okay

1287
00:56:06,839 --> 00:56:10,500
hello from my hope my audio is okay now

1288
00:56:10,500 --> 00:56:12,480
yes

1289
00:56:12,480 --> 00:56:15,119
yeah the well

1290
00:56:15,119 --> 00:56:17,880
first my first question is uh it seems

1291
00:56:17,880 --> 00:56:21,559
that you are only trying to solve how to

1292
00:56:21,559 --> 00:56:24,359
interoperate between quick over

1293
00:56:24,359 --> 00:56:25,980
datagrams

1294
00:56:25,980 --> 00:56:28,760
versus

1295
00:56:28,880 --> 00:56:32,099
big cover the streams to

1296
00:56:32,099 --> 00:56:35,579
a quick over data grants when using a s

1297
00:56:35,579 --> 00:56:40,460
frame to encrypt a whole and

1298
00:56:40,460 --> 00:56:42,119
uh

1299
00:56:42,119 --> 00:56:46,740
um an RTP packet with a an infinite MTU

1300
00:56:46,740 --> 00:56:49,859
is that correct

1301
00:56:49,859 --> 00:56:51,180
uh

1302
00:56:51,180 --> 00:56:53,520
I think so I think if I understood you

1303
00:56:53,520 --> 00:56:56,700
correctly but more generally anytime you

1304
00:56:56,700 --> 00:56:57,780
have to

1305
00:56:57,780 --> 00:57:01,260
uh take a larger RTP packet and break it

1306
00:57:01,260 --> 00:57:04,020
up into smaller RTP packets then there

1307
00:57:04,020 --> 00:57:05,400
are various reasons you might have to do

1308
00:57:05,400 --> 00:57:07,800
that and you can't

1309
00:57:07,800 --> 00:57:10,319
do it in the classic codex specific way

1310
00:57:10,319 --> 00:57:12,720
because you're also using S3 okay but

1311
00:57:12,720 --> 00:57:15,540
this is uh first just to try to narrow

1312
00:57:15,540 --> 00:57:16,740
the scope this is something very

1313
00:57:16,740 --> 00:57:19,680
specific to RTP over quick because how

1314
00:57:19,680 --> 00:57:22,500
the way that and they are doing quick

1315
00:57:22,500 --> 00:57:25,319
over a RTP over quick coverage streams

1316
00:57:25,319 --> 00:57:26,520
because

1317
00:57:26,520 --> 00:57:30,359
um it will require a packetization but

1318
00:57:30,359 --> 00:57:33,300
um first first I think that we are

1319
00:57:33,300 --> 00:57:35,579
trying to solve a problem without even

1320
00:57:35,579 --> 00:57:39,000
specified how it's packed over

1321
00:57:39,000 --> 00:57:42,480
um this packet is going to be done in in

1322
00:57:42,480 --> 00:57:45,660
RTP or or in sdp

1323
00:57:45,660 --> 00:57:49,140
so I think that it is a bit of a trying

1324
00:57:49,140 --> 00:57:52,339
to to to

1325
00:57:52,440 --> 00:57:54,960
solve one problem that it is not even on

1326
00:57:54,960 --> 00:57:57,540
the table because first we don't have we

1327
00:57:57,540 --> 00:58:00,059
don't know how to a packet is our signal

1328
00:58:00,059 --> 00:58:04,020
as frame over uh even in the version

1329
00:58:04,020 --> 00:58:06,900
that does the pocketization of the whole

1330
00:58:06,900 --> 00:58:09,839
Media frame or even if it is in just in

1331
00:58:09,839 --> 00:58:11,700
a in the RTP packet

1332
00:58:11,700 --> 00:58:15,420
so I think that is a bit premature

1333
00:58:15,420 --> 00:58:19,380
and that's

1334
00:58:19,380 --> 00:58:21,900
I mean as I was trying to to make this

1335
00:58:21,900 --> 00:58:24,960
work with a in a generic way and and has

1336
00:58:24,960 --> 00:58:28,200
hit some walls to get it done I I like

1337
00:58:28,200 --> 00:58:31,200
to see the discussion uh going but I'm

1338
00:58:31,200 --> 00:58:34,260
not sure if just narrowing it down to

1339
00:58:34,260 --> 00:58:38,040
how we are going to and or just to

1340
00:58:38,040 --> 00:58:42,480
specifically to the S3 to the quick over

1341
00:58:42,480 --> 00:58:45,000
um datagrams versus quick over stream is

1342
00:58:45,000 --> 00:58:48,500
a good way to solve the issue

1343
00:58:49,200 --> 00:58:52,260
sorry can you repeat that last part yeah

1344
00:58:52,260 --> 00:58:54,380
that I'm not sure if you are trying to

1345
00:58:54,380 --> 00:58:57,240
yes solve a very narrow part of the

1346
00:58:57,240 --> 00:59:00,020
frame as packet without even have the

1347
00:59:00,020 --> 00:59:03,839
even without being I mean without even

1348
00:59:03,839 --> 00:59:07,740
having specified how this packet works

1349
00:59:07,740 --> 00:59:10,500
with a normal RTP

1350
00:59:10,500 --> 00:59:12,839
so I I know sorry we are starting to to

1351
00:59:12,839 --> 00:59:15,119
look at the problem in the in the from

1352
00:59:15,119 --> 00:59:18,319
the from the brown Nets

1353
00:59:19,260 --> 00:59:22,760
sorry are you suggesting that

1354
00:59:22,760 --> 00:59:26,099
this problem would be solved

1355
00:59:26,099 --> 00:59:27,420
uh

1356
00:59:27,420 --> 00:59:28,920
somewhere else is that what you're

1357
00:59:28,920 --> 00:59:31,200
suggesting no my question is that we

1358
00:59:31,200 --> 00:59:32,880
don't even know how his package is meant

1359
00:59:32,880 --> 00:59:35,280
to work with RTP so why are we we are

1360
00:59:35,280 --> 00:59:37,260
trying to make uh to solve the

1361
00:59:37,260 --> 00:59:39,240
interpretability between s packet with

1362
00:59:39,240 --> 00:59:42,480
with a we say over quick when we don't

1363
00:59:42,480 --> 00:59:44,220
even have a specified how is Packet

1364
00:59:44,220 --> 00:59:46,440
Works in normal RTP

1365
00:59:46,440 --> 00:59:49,380
but it kind of doesn't matter anytime

1366
00:59:49,380 --> 00:59:51,900
someone would have an encrypted payload

1367
00:59:51,900 --> 00:59:54,299
regardless of the mechanism for that

1368
00:59:54,299 --> 00:59:55,920
encrypted payload like for example right

1369
00:59:55,920 --> 00:59:56,700
now

1370
00:59:56,700 --> 00:59:59,339
with the webrtc apis and application can

1371
00:59:59,339 --> 01:00:01,740
do its own into an encryption mechanism

1372
01:00:01,740 --> 01:00:05,760
right and uh anytime you do that and you

1373
01:00:05,760 --> 01:00:07,920
try and do it and now you try and apply

1374
01:00:07,920 --> 01:00:10,980
that with RTP over quick you're going to

1375
01:00:10,980 --> 01:00:13,680
run into this problem where one side is

1376
01:00:13,680 --> 01:00:16,799
large and the other side small yeah but

1377
01:00:16,799 --> 01:00:18,599
you can do it in a way that it is not

1378
01:00:18,599 --> 01:00:21,839
specified by by any RTP specification so

1379
01:00:21,839 --> 01:00:25,380
try to put on a specification to solve

1380
01:00:25,380 --> 01:00:27,619
something that it is unspecified

1381
01:00:27,619 --> 01:00:30,059
I'm not sure if it is the best way

1382
01:00:30,059 --> 01:00:31,680
because first we will have to specify

1383
01:00:31,680 --> 01:00:36,079
how to handle or to to transport normal

1384
01:00:36,079 --> 01:00:39,680
this median critone a medium

1385
01:00:39,680 --> 01:00:43,020
format over RTP without being something

1386
01:00:43,020 --> 01:00:45,359
that it is completely

1387
01:00:45,359 --> 01:00:47,299
um

1388
01:00:47,299 --> 01:00:51,299
or just depending on what uh whatever

1389
01:00:51,299 --> 01:00:54,780
formatted in the people are using to to

1390
01:00:54,780 --> 01:00:56,760
increase the content

1391
01:00:56,760 --> 01:00:58,680
okay well then it sounds like basically

1392
01:00:58,680 --> 01:01:01,020
you're saying is we don't need to solve

1393
01:01:01,020 --> 01:01:03,119
issue in 29 because s frame and S packet

1394
01:01:03,119 --> 01:01:04,920
aren't mature enough in their

1395
01:01:04,920 --> 01:01:06,900
standardization and so we should wait

1396
01:01:06,900 --> 01:01:09,299
until they are and perhaps that's what

1397
01:01:09,299 --> 01:01:11,880
the working group decides but that's

1398
01:01:11,880 --> 01:01:14,520
kind of my question so I I think we

1399
01:01:14,520 --> 01:01:17,819
should work on it before that but

1400
01:01:17,819 --> 01:01:22,279
um sure I can understand that position

1401
01:01:22,500 --> 01:01:25,440
David thanks sorry I was in the queue

1402
01:01:25,440 --> 01:01:27,299
but then my laptop went to sleep and me

1403
01:01:27,299 --> 01:01:30,180
Deco thought he's probably not in the

1404
01:01:30,180 --> 01:01:33,000
room anymore anyway David skanazi quick

1405
01:01:33,000 --> 01:01:34,859
datagram enthusiasts good to see you

1406
01:01:34,859 --> 01:01:37,319
again Peter it's been a while yeah

1407
01:01:37,319 --> 01:01:38,180
um

1408
01:01:38,180 --> 01:01:42,420
so this I mean like the problem you

1409
01:01:42,420 --> 01:01:45,720
describe is a fundamental problem in

1410
01:01:45,720 --> 01:01:48,180
packet switch networks like when you go

1411
01:01:48,180 --> 01:01:50,700
from circuits to packets then you have

1412
01:01:50,700 --> 01:01:54,480
MTU issues and uh this was you know

1413
01:01:54,480 --> 01:01:56,220
one of the early things of the internet

1414
01:01:56,220 --> 01:01:59,339
and in ipv4 they were like oh yeah we

1415
01:01:59,339 --> 01:02:00,900
have this problem

1416
01:02:00,900 --> 01:02:03,240
all right let's allow routers to

1417
01:02:03,240 --> 01:02:04,980
fragment packets and what you're

1418
01:02:04,980 --> 01:02:07,920
describing is just a clone of ipv4

1419
01:02:07,920 --> 01:02:10,440
fragmentation if if I'm understanding

1420
01:02:10,440 --> 01:02:11,819
and doing it correctly

1421
01:02:11,819 --> 01:02:14,579
that doesn't work that works horribly

1422
01:02:14,579 --> 01:02:17,579
poorly uh because you know once you

1423
01:02:17,579 --> 01:02:19,859
fragment something a single lost ruins

1424
01:02:19,859 --> 01:02:22,380
the whole thing especially in a context

1425
01:02:22,380 --> 01:02:24,960
where you have like a security with a

1426
01:02:24,960 --> 01:02:27,960
tag like you can't decrypt anymore

1427
01:02:27,960 --> 01:02:31,559
um and in IPv6 we you know banned that

1428
01:02:31,559 --> 01:02:33,299
because it didn't work

1429
01:02:33,299 --> 01:02:35,400
so I don't think this is the right

1430
01:02:35,400 --> 01:02:37,200
solution

1431
01:02:37,200 --> 01:02:39,359
um like if um

1432
01:02:39,359 --> 01:02:42,480
if quick datagram frames are what's

1433
01:02:42,480 --> 01:02:44,420
shooting you in the foot here

1434
01:02:44,420 --> 01:02:47,579
uh one option is to switch to Quick

1435
01:02:47,579 --> 01:02:49,140
streams

1436
01:02:49,140 --> 01:02:52,680
that this is quick streams David

1437
01:02:52,680 --> 01:02:54,420
yeah I think you're

1438
01:02:54,420 --> 01:02:56,040
okay so then uh maybe I'm

1439
01:02:56,040 --> 01:02:57,660
misunderstanding then why are you

1440
01:02:57,660 --> 01:03:00,059
fragmenting it uh like if the where's

1441
01:03:00,059 --> 01:03:01,799
the MTU coming from if you're going over

1442
01:03:01,799 --> 01:03:04,440
a stream I have a you have a conference

1443
01:03:04,440 --> 01:03:06,780
server and you have participants with

1444
01:03:06,780 --> 01:03:09,299
different mtus and some are RTP over UDP

1445
01:03:09,299 --> 01:03:11,579
some ritp over quick

1446
01:03:11,579 --> 01:03:13,559
yeah this isn't a routing scenario it's

1447
01:03:13,559 --> 01:03:15,240
a conference server it's an application

1448
01:03:15,240 --> 01:03:16,319
layer thing

1449
01:03:16,319 --> 01:03:19,799
that's how RTP kind of works

1450
01:03:19,799 --> 01:03:21,260
uh

1451
01:03:21,260 --> 01:03:25,140
so like you you have a frame that you

1452
01:03:25,140 --> 01:03:27,119
want to send to a bunch of people over

1453
01:03:27,119 --> 01:03:29,220
mixed media and then some of them it's

1454
01:03:29,220 --> 01:03:30,660
going to fit and some of them it's not

1455
01:03:30,660 --> 01:03:32,819
going to fit is that the idea

1456
01:03:32,819 --> 01:03:34,680
yeah some of them are RTP over quick

1457
01:03:34,680 --> 01:03:37,260
some are RTP over UDP that's what uh

1458
01:03:37,260 --> 01:03:39,240
that's kind of what a translator does or

1459
01:03:39,240 --> 01:03:42,599
a conferencing stuff I see yeah the

1460
01:03:42,599 --> 01:03:45,180
these like intuitively doesn't feel

1461
01:03:45,180 --> 01:03:47,940
right to me because like I I can see how

1462
01:03:47,940 --> 01:03:49,859
like the previous model made sense where

1463
01:03:49,859 --> 01:03:52,380
you would re-encode and like do

1464
01:03:52,380 --> 01:03:54,960
codex specific things

1465
01:03:54,960 --> 01:03:56,579
um at the splitting point which made

1466
01:03:56,579 --> 01:03:59,339
sense but it sounds like here what you

1467
01:03:59,339 --> 01:04:01,319
want is what we ended up doing in IP

1468
01:04:01,319 --> 01:04:04,200
which is path MTU Discovery so you you

1469
01:04:04,200 --> 01:04:06,240
kind of realize this is happening tell

1470
01:04:06,240 --> 01:04:07,799
the sender not to do that but maybe I'm

1471
01:04:07,799 --> 01:04:09,299
misunderstanding the problems the

1472
01:04:09,299 --> 01:04:11,520
conference servers aren't routers yeah

1473
01:04:11,520 --> 01:04:14,280
conference servers aren't routers so

1474
01:04:14,280 --> 01:04:16,079
um mq Discovery doesn't work through a

1475
01:04:16,079 --> 01:04:17,579
conferencing server

1476
01:04:17,579 --> 01:04:20,220
like end to end

1477
01:04:20,220 --> 01:04:21,839
yeah all right it's just possible that

1478
01:04:21,839 --> 01:04:22,859
I'm misunderstanding I'll do more

1479
01:04:22,859 --> 01:04:24,200
reading

1480
01:04:24,200 --> 01:04:28,020
if it helps uh so when you say that then

1481
01:04:28,020 --> 01:04:29,640
okay then people are maybe I'm not

1482
01:04:29,640 --> 01:04:31,559
completely off when you say it's not a

1483
01:04:31,559 --> 01:04:34,260
router it takes things coming in on one

1484
01:04:34,260 --> 01:04:36,059
side as packets and it sends it on the

1485
01:04:36,059 --> 01:04:38,599
other side as packets

1486
01:04:38,599 --> 01:04:41,099
and you're proposing a fragments that

1487
01:04:41,099 --> 01:04:42,480
sounds like the same thing as a router

1488
01:04:42,480 --> 01:04:44,880
doesn't it oh no an RTP translator is

1489
01:04:44,880 --> 01:04:46,140
not a router

1490
01:04:46,140 --> 01:04:48,780
no no I I'm not saying it's a router

1491
01:04:48,780 --> 01:04:51,299
you're redoing the same thing that the

1492
01:04:51,299 --> 01:04:54,859
router does at a different layer

1493
01:04:55,260 --> 01:04:57,299
um that's not true either that's not how

1494
01:04:57,299 --> 01:05:01,160
Compton servers work with translators no

1495
01:05:01,700 --> 01:05:03,420
I think you're looking at different

1496
01:05:03,420 --> 01:05:05,460
different layers of abstraction yeah

1497
01:05:05,460 --> 01:05:08,099
yeah I'm not saying they're a router I'm

1498
01:05:08,099 --> 01:05:10,799
saying it's fragmenting and you're this

1499
01:05:10,799 --> 01:05:13,079
is fragmentation is it not uh maybe I'm

1500
01:05:13,079 --> 01:05:14,000
confused

1501
01:05:14,000 --> 01:05:16,500
it's not fragmentation it's not a it's

1502
01:05:16,500 --> 01:05:19,500
not no it's repacketization there's a

1503
01:05:19,500 --> 01:05:21,619
difference

1504
01:05:21,730 --> 01:05:23,940
[Music]

1505
01:05:23,940 --> 01:05:25,200
I I don't think they're actually

1506
01:05:25,200 --> 01:05:27,660
disagreeing you're just talking about I

1507
01:05:27,660 --> 01:05:29,280
think David's just at a higher level of

1508
01:05:29,280 --> 01:05:31,380
abstraction than you are Bernard

1509
01:05:31,380 --> 01:05:33,720
mm-hmm

1510
01:05:33,720 --> 01:05:36,240
all right I'll go sit down sorry all

1511
01:05:36,240 --> 01:05:37,680
right I think I'm I'm next to you I

1512
01:05:37,680 --> 01:05:39,540
think all right um so as an individual

1513
01:05:39,540 --> 01:05:41,099
Jonathan Lennox

1514
01:05:41,099 --> 01:05:43,859
um I was gonna say I feel like

1515
01:05:43,859 --> 01:05:44,940
um

1516
01:05:44,940 --> 01:05:47,339
regardless of how we solve this I feel

1517
01:05:47,339 --> 01:05:49,500
like this is a problem for the S frame

1518
01:05:49,500 --> 01:05:52,500
of our RTP draft to solve not the RTP

1519
01:05:52,500 --> 01:05:54,420
over quick draft to solve

1520
01:05:54,420 --> 01:05:56,760
um I think that you know mostly having

1521
01:05:56,760 --> 01:05:59,400
to do with hey this is an S3 specific

1522
01:05:59,400 --> 01:06:01,940
issue and be hard to be over quick is

1523
01:06:01,940 --> 01:06:04,859
significantly further along the process

1524
01:06:04,859 --> 01:06:07,799
so I feel like

1525
01:06:07,799 --> 01:06:09,780
um you know maybe the uh

1526
01:06:09,780 --> 01:06:11,460
there are to be over quick draft should

1527
01:06:11,460 --> 01:06:12,299
say

1528
01:06:12,299 --> 01:06:13,619
you know rather than just say codex

1529
01:06:13,619 --> 01:06:15,839
specifics like codec or you know

1530
01:06:15,839 --> 01:06:18,359
other you know a metakota container or

1531
01:06:18,359 --> 01:06:20,640
whatever and um you know have some

1532
01:06:20,640 --> 01:06:22,440
informative reference but I think the

1533
01:06:22,440 --> 01:06:24,420
actual issue to solve

1534
01:06:24,420 --> 01:06:27,240
should be solved in the uh

1535
01:06:27,240 --> 01:06:29,819
in the S frame document

1536
01:06:29,819 --> 01:06:31,440
um rather than trying to solve it in the

1537
01:06:31,440 --> 01:06:34,020
RTP over quick because a it's applicable

1538
01:06:34,020 --> 01:06:36,240
to anything that needs to do MTU have

1539
01:06:36,240 --> 01:06:38,760
MTU problems not just for quick streams

1540
01:06:38,760 --> 01:06:40,500
and be

1541
01:06:40,500 --> 01:06:41,339
um

1542
01:06:41,339 --> 01:06:42,599
I don't want to have a normative

1543
01:06:42,599 --> 01:06:45,480
dependency of RGB over quick on S frame

1544
01:06:45,480 --> 01:06:47,700
when s frame is significantly less far

1545
01:06:47,700 --> 01:06:49,799
along the process

1546
01:06:49,799 --> 01:06:52,640
well uh

1547
01:06:52,640 --> 01:06:55,559
on the second issue that we don't have

1548
01:06:55,559 --> 01:06:56,940
to have a normative dependence in this

1549
01:06:56,940 --> 01:06:58,319
Frame if we don't want to because

1550
01:06:58,319 --> 01:07:00,000
there's there's nothing in the solution

1551
01:07:00,000 --> 01:07:02,520
that needs to reference that screen it's

1552
01:07:02,520 --> 01:07:05,880
just that s frame provides a motivation

1553
01:07:05,880 --> 01:07:09,480
for having a mechanism like this

1554
01:07:09,480 --> 01:07:11,940
if there were some other mechanism for

1555
01:07:11,940 --> 01:07:15,839
encrypting end to end that disallowed

1556
01:07:15,839 --> 01:07:16,740
um

1557
01:07:16,740 --> 01:07:18,839
RTP over quick being able to be

1558
01:07:18,839 --> 01:07:21,359
translated to RTP over UDP

1559
01:07:21,359 --> 01:07:23,460
you would have the same issue so in a

1560
01:07:23,460 --> 01:07:25,200
sense it's not s frame specific it's

1561
01:07:25,200 --> 01:07:26,880
just into an encrypted

1562
01:07:26,880 --> 01:07:29,579
yeah I've agreed but my point is that I

1563
01:07:29,579 --> 01:07:30,240
think

1564
01:07:30,240 --> 01:07:32,400
s frame has this problem regardless of

1565
01:07:32,400 --> 01:07:33,539
where they go about to be over quick or

1566
01:07:33,539 --> 01:07:34,200
not

1567
01:07:34,200 --> 01:07:35,760
so I feel like s frame is the

1568
01:07:35,760 --> 01:07:37,859
appropriate and I feel like in some

1569
01:07:37,859 --> 01:07:38,819
sense

1570
01:07:38,819 --> 01:07:40,140
this kind of fragmentation is what

1571
01:07:40,140 --> 01:07:41,880
you're doing with s frame

1572
01:07:41,880 --> 01:07:43,920
quite as frame to begin with which is

1573
01:07:43,920 --> 01:07:45,000
that your

1574
01:07:45,000 --> 01:07:47,099
taking a frame

1575
01:07:47,099 --> 01:07:49,079
uh encrypting and authenticating it and

1576
01:07:49,079 --> 01:07:50,460
then chopping it up

1577
01:07:50,460 --> 01:07:52,440
and so I feel like the chocolate making

1578
01:07:52,440 --> 01:07:54,299
if we design the chop it up process so

1579
01:07:54,299 --> 01:07:56,280
you can re-chop it up without messing

1580
01:07:56,280 --> 01:07:57,720
with those tags

1581
01:07:57,720 --> 01:07:59,819
I feel like that solves the problem yes

1582
01:07:59,819 --> 01:08:02,280
the translator still has to have an S

1583
01:08:02,280 --> 01:08:03,780
frame aware knowledge if it's going to

1584
01:08:03,780 --> 01:08:07,680
do that re-chopping but

1585
01:08:07,680 --> 01:08:08,520
um

1586
01:08:08,520 --> 01:08:10,799
that's sort of what the this draft means

1587
01:08:10,799 --> 01:08:12,660
like codec aware this is this meta codec

1588
01:08:12,660 --> 01:08:16,380
not the codec proper but it's still

1589
01:08:16,380 --> 01:08:17,339
um

1590
01:08:17,339 --> 01:08:19,080
you know I think it doesn't change

1591
01:08:19,080 --> 01:08:20,640
anything about how hard if you ever

1592
01:08:20,640 --> 01:08:22,979
quick works and making sure that the

1593
01:08:22,979 --> 01:08:24,779
process is possible is s frame's

1594
01:08:24,779 --> 01:08:27,259
responsibility

1595
01:08:29,580 --> 01:08:31,738
and that's awesome thumbs up in the room

1596
01:08:31,738 --> 01:08:34,140
when I said that so

1597
01:08:34,140 --> 01:08:36,238
so then for your your suggestion is for

1598
01:08:36,238 --> 01:08:38,460
issue 29 to say

1599
01:08:38,460 --> 01:08:40,560
not my problem

1600
01:08:40,560 --> 01:08:43,679
if you want to use yeah move that move

1601
01:08:43,679 --> 01:08:45,540
issue 29 to an issue on the S frame

1602
01:08:45,540 --> 01:08:47,399
document right to make sure that it can

1603
01:08:47,399 --> 01:08:49,560
be you know chunked and re-chunked

1604
01:08:49,560 --> 01:08:51,620
properly

1605
01:08:51,620 --> 01:08:55,759
there's no s frame over our computer

1606
01:08:57,120 --> 01:08:59,279
yeah there's that this is I think this

1607
01:08:59,279 --> 01:09:00,479
is an appropriate time for me to leave

1608
01:09:00,479 --> 01:09:02,100
in here as as soon as we were doing

1609
01:09:02,100 --> 01:09:04,380
nothing so the direction that the S

1610
01:09:04,380 --> 01:09:05,939
frame working group is going in right

1611
01:09:05,939 --> 01:09:09,540
now is to make the S frame of document

1612
01:09:09,540 --> 01:09:12,540
to specify only the encryption framing

1613
01:09:12,540 --> 01:09:15,238
because there is been so much ambiguity

1614
01:09:15,238 --> 01:09:16,259
around

1615
01:09:16,259 --> 01:09:18,299
uh frame level versus packet level

1616
01:09:18,299 --> 01:09:20,759
versus you know other ways you you might

1617
01:09:20,759 --> 01:09:24,179
choose the the units that you uh encrypt

1618
01:09:24,179 --> 01:09:27,540
with with this Frame and so I I sort of

1619
01:09:27,540 --> 01:09:29,759
agree with Sergeant like how you carry

1620
01:09:29,759 --> 01:09:34,020
an S frame thing in in a a

1621
01:09:34,020 --> 01:09:36,420
chunk of data is encrypted with the S

1622
01:09:36,420 --> 01:09:39,120
frame encryption framing uh in an RTP

1623
01:09:39,120 --> 01:09:41,520
pack when in one or more RTP packets

1624
01:09:41,520 --> 01:09:45,600
right because you can Envision it in the

1625
01:09:45,600 --> 01:09:47,698
full-frame version we have multi uh

1626
01:09:47,698 --> 01:09:49,500
multi-frame multi-factored frames like

1627
01:09:49,500 --> 01:09:51,299
you might have multiple RTP frames

1628
01:09:51,299 --> 01:09:54,600
carrying a single s frame unit

1629
01:09:54,600 --> 01:09:57,000
so all that is super ill defined right

1630
01:09:57,000 --> 01:09:58,560
now and there's not really a path to

1631
01:09:58,560 --> 01:10:00,660
getting it defined as far as I know the

1632
01:10:00,660 --> 01:10:02,040
history and working group is focused on

1633
01:10:02,040 --> 01:10:04,800
getting the encryption bits done

1634
01:10:04,800 --> 01:10:06,199
um

1635
01:10:06,199 --> 01:10:08,580
so yeah there may be some some

1636
01:10:08,580 --> 01:10:10,199
intermediate work here to be done in any

1637
01:10:10,199 --> 01:10:11,820
case with regard to aspiring which is

1638
01:10:11,820 --> 01:10:15,300
probably not the job of RPA real quick

1639
01:10:15,300 --> 01:10:18,239
um I was sort of got A plus one

1640
01:10:18,239 --> 01:10:20,520
um David here and that this seems like a

1641
01:10:20,520 --> 01:10:23,760
generic issue not an S frame issue at

1642
01:10:23,760 --> 01:10:24,600
all

1643
01:10:24,600 --> 01:10:26,280
um this is a generic issue for uh

1644
01:10:26,280 --> 01:10:28,620
actually as Peter said at the very top

1645
01:10:28,620 --> 01:10:30,840
of this presentation like the underlying

1646
01:10:30,840 --> 01:10:32,159
issue here is

1647
01:10:32,159 --> 01:10:34,560
um doing this repacketization when you

1648
01:10:34,560 --> 01:10:36,540
don't know anything about the Enterprise

1649
01:10:36,540 --> 01:10:38,340
codec

1650
01:10:38,340 --> 01:10:40,260
um and that could be because the

1651
01:10:40,260 --> 01:10:43,199
underlying codec is encrypted uh because

1652
01:10:43,199 --> 01:10:45,600
vestream could just be because you as

1653
01:10:45,600 --> 01:10:46,800
the repackathizer don't know anything

1654
01:10:46,800 --> 01:10:48,540
about it and so you can't make any

1655
01:10:48,540 --> 01:10:50,580
Intelligent Decisions about what you're

1656
01:10:50,580 --> 01:10:52,080
the data you're looking at

1657
01:10:52,080 --> 01:10:55,080
so it suits to the degree that there's a

1658
01:10:55,080 --> 01:10:56,760
solution necessary here

1659
01:10:56,760 --> 01:10:59,340
um you know it's

1660
01:10:59,340 --> 01:11:02,219
um it's to that problem not not anything

1661
01:11:02,219 --> 01:11:04,140
to do it's with us stream in particular

1662
01:11:04,140 --> 01:11:06,540
it's TV how do I re-packetize this

1663
01:11:06,540 --> 01:11:07,920
without them knowing anything about the

1664
01:11:07,920 --> 01:11:09,659
codec

1665
01:11:09,659 --> 01:11:12,900
um one final note that's the the Bernard

1666
01:11:12,900 --> 01:11:14,340
and David discussion that was just going

1667
01:11:14,340 --> 01:11:15,780
on about you know whether this is a

1668
01:11:15,780 --> 01:11:18,420
router or not it does seem like there

1669
01:11:18,420 --> 01:11:21,239
you you could have something pmtud like

1670
01:11:21,239 --> 01:11:23,159
here I've got them to you discover it

1671
01:11:23,159 --> 01:11:25,860
like here in the sense that you know if

1672
01:11:25,860 --> 01:11:26,940
you have

1673
01:11:26,940 --> 01:11:29,460
and SFU that is sitting in the

1674
01:11:29,460 --> 01:11:31,199
conferencing service sitting in the

1675
01:11:31,199 --> 01:11:34,140
middle of a bunch of connections it it

1676
01:11:34,140 --> 01:11:36,420
no it's doing repacketization and it has

1677
01:11:36,420 --> 01:11:38,760
some idea of what the ntus are out to

1678
01:11:38,760 --> 01:11:40,199
it's

1679
01:11:40,199 --> 01:11:41,159
um

1680
01:11:41,159 --> 01:11:43,820
it's uh the endpoints is serving and so

1681
01:11:43,820 --> 01:11:45,780
in principle if you had the right

1682
01:11:45,780 --> 01:11:48,060
control plane you could distribute that

1683
01:11:48,060 --> 01:11:50,219
information have people send those mtus

1684
01:11:50,219 --> 01:11:53,460
and do you know bushing and not uh you

1685
01:11:53,460 --> 01:11:55,860
know not fragmentation

1686
01:11:55,860 --> 01:11:58,320
um so it seems like there's some similar

1687
01:11:58,320 --> 01:12:00,900
um similar solution space there um to

1688
01:12:00,900 --> 01:12:04,040
the general routing case

1689
01:12:06,380 --> 01:12:08,940
I just want to make sure I heard

1690
01:12:08,940 --> 01:12:11,060
correctly just now the

1691
01:12:11,060 --> 01:12:13,620
people on ABT Corps said this should

1692
01:12:13,620 --> 01:12:16,020
happen in this Frame and the people from

1693
01:12:16,020 --> 01:12:18,120
s frame said this should not happen in s

1694
01:12:18,120 --> 01:12:19,440
frame

1695
01:12:19,440 --> 01:12:21,900
right did I understand that right

1696
01:12:21,900 --> 01:12:24,179
I didn't I said no I think we we had an

1697
01:12:24,179 --> 01:12:26,719
S frame over our

1698
01:12:26,760 --> 01:12:28,100
no no

1699
01:12:28,100 --> 01:12:30,780
I think we need one if we want to send a

1700
01:12:30,780 --> 01:12:32,699
stream over RPP and that's not being

1701
01:12:32,699 --> 01:12:33,900
defined in this framework which we

1702
01:12:33,900 --> 01:12:34,860
defined here

1703
01:12:34,860 --> 01:12:36,120
so

1704
01:12:36,120 --> 01:12:37,380
it should be defined here and that's

1705
01:12:37,380 --> 01:12:38,699
where that work should be done I would

1706
01:12:38,699 --> 01:12:39,800
say

1707
01:12:39,800 --> 01:12:42,840
I don't care if that document is in s

1708
01:12:42,840 --> 01:12:45,300
frame or avt core but there'd be if

1709
01:12:45,300 --> 01:12:46,500
we're going to send that frame over RTP

1710
01:12:46,500 --> 01:12:47,699
we need a document defining how to send

1711
01:12:47,699 --> 01:12:49,500
this Frame over rtps written somewhere

1712
01:12:49,500 --> 01:12:52,380
and that document should Define how the

1713
01:12:52,380 --> 01:12:55,380
free factorization was done

1714
01:12:55,380 --> 01:12:58,260
okay so well you just want me to rename

1715
01:12:58,260 --> 01:13:00,120
my but this is

1716
01:13:00,120 --> 01:13:02,820
I actually disagree with the the very

1717
01:13:02,820 --> 01:13:04,260
end of that sentence so I think we

1718
01:13:04,260 --> 01:13:05,880
probably do need a document I think the

1719
01:13:05,880 --> 01:13:08,940
AVC first probably the right spot for it

1720
01:13:08,940 --> 01:13:09,900
um

1721
01:13:09,900 --> 01:13:12,300
but I don't think that this issue

1722
01:13:12,300 --> 01:13:15,780
actually touches that uh because well

1723
01:13:15,780 --> 01:13:19,679
I mean maybe maybe as an extreme of RCP

1724
01:13:19,679 --> 01:13:20,460
doctor needs to deal with

1725
01:13:20,460 --> 01:13:23,219
repacketization but like it seems like

1726
01:13:23,219 --> 01:13:25,500
book cover RTP is the one that has the

1727
01:13:25,500 --> 01:13:28,080
apj has a generic you know I don't know

1728
01:13:28,080 --> 01:13:30,600
the codec revocetization issue so yeah I

1729
01:13:30,600 --> 01:13:33,239
think unless you require every every RTP

1730
01:13:33,239 --> 01:13:35,400
thing you have you can't do that

1731
01:13:35,400 --> 01:13:37,199
basically RTP doesn't work that way you

1732
01:13:37,199 --> 01:13:39,000
can't do it

1733
01:13:39,000 --> 01:13:42,000
okay

1734
01:13:44,840 --> 01:13:47,940
uh uh Bernard I guess you're up next

1735
01:13:47,940 --> 01:13:50,040
yeah I mean I think you bring up a good

1736
01:13:50,040 --> 01:13:51,840
question Jonathan we've been waiting for

1737
01:13:51,840 --> 01:13:54,300
almost two years for an art uh s frame

1738
01:13:54,300 --> 01:13:55,800
of rgp

1739
01:13:55,800 --> 01:13:57,239
proposal

1740
01:13:57,239 --> 01:13:59,280
and um

1741
01:13:59,280 --> 01:14:00,780
you know since s frame is only

1742
01:14:00,780 --> 01:14:02,820
transported over RGB not having a

1743
01:14:02,820 --> 01:14:04,320
proposal the only way it can be

1744
01:14:04,320 --> 01:14:06,840
transported is kind of awkward

1745
01:14:06,840 --> 01:14:09,080
um so

1746
01:14:09,080 --> 01:14:12,480
uh some you know something I I knew

1747
01:14:12,480 --> 01:14:13,980
there's been discussion among the 80s of

1748
01:14:13,980 --> 01:14:15,480
closing the s-frame working group and

1749
01:14:15,480 --> 01:14:16,980
just giving you know moving it somewhere

1750
01:14:16,980 --> 01:14:18,840
else but

1751
01:14:18,840 --> 01:14:21,540
um it seems like there there has to be a

1752
01:14:21,540 --> 01:14:24,320
document here somewhere

1753
01:14:24,320 --> 01:14:26,520
just to give a brief update on that

1754
01:14:26,520 --> 01:14:27,719
phone I believe the current state of

1755
01:14:27,719 --> 01:14:30,300
that discussion is that the Western

1756
01:14:30,300 --> 01:14:32,760
working group books are refocused now on

1757
01:14:32,760 --> 01:14:34,980
getting the encryption framing done and

1758
01:14:34,980 --> 01:14:38,540
there's not really a horizon beyond that

1759
01:14:44,159 --> 01:14:46,199
Bernard are you speaking are you so

1760
01:14:46,199 --> 01:14:48,840
impure or is that your comment

1761
01:14:48,840 --> 01:14:52,380
okay uh Harold I guess you're next uh I

1762
01:14:52,380 --> 01:14:56,040
was just wanting to make two comments

1763
01:14:56,040 --> 01:14:59,040
foreign

1764
01:15:01,460 --> 01:15:04,320
over RTP thing

1765
01:15:04,320 --> 01:15:07,020
that was The Proposal that was pushed

1766
01:15:07,020 --> 01:15:09,780
forward a couple of years ago was

1767
01:15:09,780 --> 01:15:11,699
the so-called generic RTP Capital

1768
01:15:11,699 --> 01:15:14,880
encapsulation which

1769
01:15:14,880 --> 01:15:16,800
flew like a lead balloon

1770
01:15:16,800 --> 01:15:19,320
so it's not that it's uh

1771
01:15:19,320 --> 01:15:21,960
not been proposed is that the proposed

1772
01:15:21,960 --> 01:15:24,659
was because rejected and the other point

1773
01:15:24,659 --> 01:15:27,840
was to move which is at

1774
01:15:27,840 --> 01:15:33,120
if your SRAM is intended for end to end

1775
01:15:33,120 --> 01:15:36,179
encryption protection and so on

1776
01:15:36,179 --> 01:15:38,699
if you try to overconstrain the problem

1777
01:15:38,699 --> 01:15:40,100
by

1778
01:15:40,100 --> 01:15:43,020
insisting that it should support

1779
01:15:43,020 --> 01:15:46,500
verification in the middle I think your

1780
01:15:46,500 --> 01:15:49,320
how you'll quickly end up with a null

1781
01:15:49,320 --> 01:15:51,000
set of solutions

1782
01:15:51,000 --> 01:15:52,679
so please

1783
01:15:52,679 --> 01:15:54,960
if you want hop IHOP

1784
01:15:54,960 --> 01:15:57,420
use srtp

1785
01:15:57,420 --> 01:16:00,659
if you want end to end use S frame but

1786
01:16:00,659 --> 01:16:05,340
don't ask S frame to do hope I hope yeah

1787
01:16:05,340 --> 01:16:06,600
um just to briefly thought of that I

1788
01:16:06,600 --> 01:16:07,980
don't think I was saying we'd want

1789
01:16:07,980 --> 01:16:09,420
re-verification in the middle I'd say

1790
01:16:09,420 --> 01:16:10,820
the middle can

1791
01:16:10,820 --> 01:16:13,920
opaquely re-trunk the authenticated

1792
01:16:13,920 --> 01:16:16,620
thing and then it's the end job to undo

1793
01:16:16,620 --> 01:16:18,120
that chunking and

1794
01:16:18,120 --> 01:16:21,260
verify the identification

1795
01:16:21,300 --> 01:16:24,179
yes I'm just saying I mean middle can do

1796
01:16:24,179 --> 01:16:26,280
anything it wants as long as it can do

1797
01:16:26,280 --> 01:16:29,340
it I'm saying that if we try to write

1798
01:16:29,340 --> 01:16:31,380
the specs so that we require that it

1799
01:16:31,380 --> 01:16:34,880
should be able to do it we lose

1800
01:16:36,300 --> 01:16:39,679
Magnus your text

1801
01:16:44,880 --> 01:16:46,800
yeah Magnus wrestling

1802
01:16:46,800 --> 01:16:50,040
yes fully agree with Harold's second

1803
01:16:50,040 --> 01:16:52,800
part here about yes use hope I hope for

1804
01:16:52,800 --> 01:16:54,659
hope I hope protection and and to end

1805
01:16:54,659 --> 01:16:57,179
and on the general issue of RTP

1806
01:16:57,179 --> 01:17:00,060
fragmentation or or MTU issues

1807
01:17:00,060 --> 01:17:02,159
dealing I mean

1808
01:17:02,159 --> 01:17:04,500
for any RTP payload format that sense

1809
01:17:04,500 --> 01:17:06,900
any significant size payload that can be

1810
01:17:06,900 --> 01:17:09,600
loaded and expected IBM do you basically

1811
01:17:09,600 --> 01:17:11,400
need to have some type of fragmentations

1812
01:17:11,400 --> 01:17:14,280
a little bit of this datagram

1813
01:17:14,280 --> 01:17:16,980
and the model to my understanding has

1814
01:17:16,980 --> 01:17:19,560
all along been that yes if you're gonna

1815
01:17:19,560 --> 01:17:22,320
have ideas and small enough packet that

1816
01:17:22,320 --> 01:17:25,020
if it in in all the links or you need to

1817
01:17:25,020 --> 01:17:28,159
have an RTP middle box that can actually

1818
01:17:28,159 --> 01:17:30,600
re-fragment the packet into something

1819
01:17:30,600 --> 01:17:32,760
that's the payload into something that

1820
01:17:32,760 --> 01:17:35,239
fits the RTP packets

1821
01:17:35,239 --> 01:17:38,699
that is kind of have been the model

1822
01:17:38,699 --> 01:17:40,440
I think we have some discussions around

1823
01:17:40,440 --> 01:17:42,420
things like oh how do you actually

1824
01:17:42,420 --> 01:17:45,900
detect what's this uh MTU that works but

1825
01:17:45,900 --> 01:17:47,520
in this especially in the context of

1826
01:17:47,520 --> 01:17:48,960
this uh

1827
01:17:48,960 --> 01:17:52,199
uh SFA who's

1828
01:17:52,199 --> 01:17:55,380
but yeah it isn't great this model but

1829
01:17:55,380 --> 01:17:57,659
it's it is what we have Etc and I think

1830
01:17:57,659 --> 01:18:00,420
in the context of s-frame yeah you're

1831
01:18:00,420 --> 01:18:01,560
gonna have to write the thought to be

1832
01:18:01,560 --> 01:18:03,540
payload format and I don't see you way

1833
01:18:03,540 --> 01:18:06,920
around defining a generic s frame

1834
01:18:06,920 --> 01:18:10,560
payload format which cam fragment

1835
01:18:10,560 --> 01:18:12,300
you're gonna need something again unless

1836
01:18:12,300 --> 01:18:14,159
you ask how could how smart can you do

1837
01:18:14,159 --> 01:18:15,900
it and yes it's not gonna have ideal

1838
01:18:15,900 --> 01:18:17,760
transport properties you lose a fragment

1839
01:18:17,760 --> 01:18:21,239
you lose the whole frame it's it's gonna

1840
01:18:21,239 --> 01:18:24,060
be that bad but

1841
01:18:24,060 --> 01:18:26,520
um yeah I I don't see an easy way around

1842
01:18:26,520 --> 01:18:29,520
that and and and you're when you start

1843
01:18:29,520 --> 01:18:33,480
to talk about like RTP in quick Etc you

1844
01:18:33,480 --> 01:18:35,820
have choices where it's makes this

1845
01:18:35,820 --> 01:18:37,020
better

1846
01:18:37,020 --> 01:18:39,600
by relying for example on stream

1847
01:18:39,600 --> 01:18:42,179
individual streams for per

1848
01:18:42,179 --> 01:18:44,040
frame and things like that if you can do

1849
01:18:44,040 --> 01:18:46,340
it if you're of your other message based

1850
01:18:46,340 --> 01:18:49,440
uh transmission capabilities that's

1851
01:18:49,440 --> 01:18:51,420
focused on just transmitting one data

1852
01:18:51,420 --> 01:18:52,980
object

1853
01:18:52,980 --> 01:18:57,678
so you don't have to care about that so

1854
01:19:00,000 --> 01:19:01,620
come on

1855
01:19:01,620 --> 01:19:04,620
Harold share with you from the queue

1856
01:19:04,620 --> 01:19:07,320
uh mosinati so just to clarify what um

1857
01:19:07,320 --> 01:19:09,179
Harold said earlier about what got

1858
01:19:09,179 --> 01:19:10,620
rejected

1859
01:19:10,620 --> 01:19:11,940
um there's some Nuance here that that

1860
01:19:11,940 --> 01:19:13,920
maybe people are missing what was

1861
01:19:13,920 --> 01:19:16,020
rejected earlier it was s frame was

1862
01:19:16,020 --> 01:19:19,800
first attempting to have a generic

1863
01:19:19,800 --> 01:19:22,020
packetizer over the RTP Elementary

1864
01:19:22,020 --> 01:19:24,120
stream itself

1865
01:19:24,120 --> 01:19:28,080
um not not saying this is one giant

1866
01:19:28,080 --> 01:19:31,080
frame pretending to the to the media

1867
01:19:31,080 --> 01:19:33,719
encoder that this is one giant frame of

1868
01:19:33,719 --> 01:19:35,880
Limitless MTU the median coder generates

1869
01:19:35,880 --> 01:19:38,940
an RTP frame an RTP packet that big

1870
01:19:38,940 --> 01:19:42,300
in the S frame can wrap that we're

1871
01:19:42,300 --> 01:19:45,300
originally talking about dicing uh

1872
01:19:45,300 --> 01:19:46,860
having a generic packetizer over the

1873
01:19:46,860 --> 01:19:49,440
elementary streams of of the RTP packets

1874
01:19:49,440 --> 01:19:52,260
of the RTP payload formats and that was

1875
01:19:52,260 --> 01:19:53,820
rejected because there's a lot of nuance

1876
01:19:53,820 --> 01:19:57,540
and and how to do that and and you know

1877
01:19:57,540 --> 01:20:00,179
different different payload formats do

1878
01:20:00,179 --> 01:20:02,340
it in different ways and it's difficult

1879
01:20:02,340 --> 01:20:04,860
to harmonize all those together so I

1880
01:20:04,860 --> 01:20:07,140
think it was wise for the S frame

1881
01:20:07,140 --> 01:20:09,000
decision to say no we're not going to do

1882
01:20:09,000 --> 01:20:11,040
that we're just going to say give me one

1883
01:20:11,040 --> 01:20:12,360
big RTP

1884
01:20:12,360 --> 01:20:16,380
payload and we'll take that as and wrap

1885
01:20:16,380 --> 01:20:18,900
that with with double encryption so that

1886
01:20:18,900 --> 01:20:20,219
that part I don't think we should go

1887
01:20:20,219 --> 01:20:24,239
back and and revisit but now this this

1888
01:20:24,239 --> 01:20:27,000
large object that now needs to go over

1889
01:20:27,000 --> 01:20:28,860
some transport that likely can't carry

1890
01:20:28,860 --> 01:20:30,719
that large object is the next problem

1891
01:20:30,719 --> 01:20:32,760
and is that s frames problem that it

1892
01:20:32,760 --> 01:20:34,620
needs to have a packetization format

1893
01:20:34,620 --> 01:20:38,699
that is natively chunked or is it the

1894
01:20:38,699 --> 01:20:40,260
transport that's carrying s frames

1895
01:20:40,260 --> 01:20:42,000
problem that it eats the chunk something

1896
01:20:42,000 --> 01:20:44,520
big and have its own headers for

1897
01:20:44,520 --> 01:20:46,020
managing that chunking I think that's

1898
01:20:46,020 --> 01:20:48,600
really the fundamental question and I

1899
01:20:48,600 --> 01:20:50,219
would argue that s form knows it's going

1900
01:20:50,219 --> 01:20:51,840
to go over some transports and it knows

1901
01:20:51,840 --> 01:20:53,580
it's going to get chomped so why would

1902
01:20:53,580 --> 01:20:55,020
it not have

1903
01:20:55,020 --> 01:20:58,560
a a native chunking inside of it so I

1904
01:20:58,560 --> 01:21:00,179
kind of agree with with Peter's

1905
01:21:00,179 --> 01:21:01,860
direction that it needs to whether it

1906
01:21:01,860 --> 01:21:03,900
goes over RTP or over anything else it's

1907
01:21:03,900 --> 01:21:05,460
going to go over packets and it probably

1908
01:21:05,460 --> 01:21:07,679
cares about how it gets chunked into

1909
01:21:07,679 --> 01:21:08,940
packets

1910
01:21:08,940 --> 01:21:10,500
so I think it does make sense to define

1911
01:21:10,500 --> 01:21:12,540
something like this I'm a little bit

1912
01:21:12,540 --> 01:21:14,040
concerned of how naive you know the

1913
01:21:14,040 --> 01:21:16,140
simple approach is because it seems like

1914
01:21:16,140 --> 01:21:17,640
it's automatically going to double your

1915
01:21:17,640 --> 01:21:19,140
packet rate if there's ever an empty

1916
01:21:19,140 --> 01:21:21,179
mismatch and that can totally destroy a

1917
01:21:21,179 --> 01:21:23,219
lot of networks that are packet weight

1918
01:21:23,219 --> 01:21:24,840
sensitive your media delivery may end up

1919
01:21:24,840 --> 01:21:27,300
being you know twice as bad as you

1920
01:21:27,300 --> 01:21:29,460
expected because you have a two or four

1921
01:21:29,460 --> 01:21:32,280
byte Mt mismatch

1922
01:21:32,280 --> 01:21:34,260
um so that would be a bad outcome for

1923
01:21:34,260 --> 01:21:36,540
for a naive and coding like this

1924
01:21:36,540 --> 01:21:38,040
um but I think it is

1925
01:21:38,040 --> 01:21:40,380
fundamental to S frame to know that it's

1926
01:21:40,380 --> 01:21:42,719
going to go over smaller object

1927
01:21:42,719 --> 01:21:46,199
transports and Define its own

1928
01:21:46,199 --> 01:21:48,480
chunk layer inside of it so that the

1929
01:21:48,480 --> 01:21:50,040
higher level transport doesn't have to

1930
01:21:50,040 --> 01:21:53,000
do something special for it

1931
01:21:56,159 --> 01:21:58,440
um you're probably going to have to cut

1932
01:21:58,440 --> 01:22:01,400
the cute uh yeah

1933
01:22:01,400 --> 01:22:04,580
and I'll

1934
01:22:07,640 --> 01:22:11,880
so I'm Spencer Dawkins uh I got up to

1935
01:22:11,880 --> 01:22:13,679
say something a long time ago but I

1936
01:22:13,679 --> 01:22:16,140
actually do think I remember what it was

1937
01:22:16,140 --> 01:22:18,179
the

1938
01:22:18,179 --> 01:22:21,719
so the introduction of the sorry the

1939
01:22:21,719 --> 01:22:24,719
abstract of the uh

1940
01:22:24,719 --> 01:22:27,659
RTP over quick specification talks about

1941
01:22:27,659 --> 01:22:32,159
it uh doing a minimal uh specification

1942
01:22:32,159 --> 01:22:34,560
and um

1943
01:22:34,560 --> 01:22:37,800
that was kind of where I thought uh we

1944
01:22:37,800 --> 01:22:39,120
were going

1945
01:22:39,120 --> 01:22:40,800
at

1946
01:22:40,800 --> 01:22:42,980
the last meeting or two

1947
01:22:42,980 --> 01:22:47,580
and I'm I'm not just I'm not recording a

1948
01:22:47,580 --> 01:22:48,360
problem

1949
01:22:48,360 --> 01:22:51,239
I'm making a suggestion that we may want

1950
01:22:51,239 --> 01:22:52,920
to decide

1951
01:22:52,920 --> 01:22:55,920
what's it what is really what problems

1952
01:22:55,920 --> 01:22:57,560
really need to be solid events but

1953
01:22:57,560 --> 01:23:00,480
specification and what the problems need

1954
01:23:00,480 --> 01:23:03,080
to be solved in other specifications

1955
01:23:03,080 --> 01:23:06,719
more broadly than just MTU mismatch

1956
01:23:06,719 --> 01:23:11,580
uh We've we've mentioned conference uh

1957
01:23:11,580 --> 01:23:14,460
Bridges and things like that that may be

1958
01:23:14,460 --> 01:23:17,699
translating from uh RTP over quick to

1959
01:23:17,699 --> 01:23:20,520
RTP over something else

1960
01:23:20,520 --> 01:23:23,400
and uh

1961
01:23:23,400 --> 01:23:25,320
you know the topology draft there's

1962
01:23:25,320 --> 01:23:28,500
apology RFC is a pretty good sized chunk

1963
01:23:28,500 --> 01:23:30,840
of writing uh

1964
01:23:30,840 --> 01:23:33,060
I think it would be good for us to be

1965
01:23:33,060 --> 01:23:34,940
looking at that

1966
01:23:34,940 --> 01:23:37,620
specifically you know like what

1967
01:23:37,620 --> 01:23:40,500
topologies rather than expecting the

1968
01:23:40,500 --> 01:23:43,679
minimal specification draft authors to

1969
01:23:43,679 --> 01:23:47,040
solve that problem on their own

1970
01:23:47,040 --> 01:23:47,640
um

1971
01:23:47,640 --> 01:23:49,860
but I I know you all will do the right

1972
01:23:49,860 --> 01:23:51,239
thing and

1973
01:23:51,239 --> 01:23:52,620
I don't actually know what the right

1974
01:23:52,620 --> 01:23:55,860
thing is but like I said I would I would

1975
01:23:55,860 --> 01:23:58,739
uh suggest that we think for a little

1976
01:23:58,739 --> 01:24:03,360
bit about uh feature creep and I am fine

1977
01:24:03,360 --> 01:24:05,460
with the answer changing

1978
01:24:05,460 --> 01:24:08,159
uh because I mean it's

1979
01:24:08,159 --> 01:24:10,260
time has passed and we're now talking

1980
01:24:10,260 --> 01:24:11,340
about a

1981
01:24:11,340 --> 01:24:13,560
uh working group adoptive specification

1982
01:24:13,560 --> 01:24:15,480
and not just

1983
01:24:15,480 --> 01:24:17,159
uh

1984
01:24:17,159 --> 01:24:20,520
couple of really smart guys uh writing a

1985
01:24:20,520 --> 01:24:22,860
draft uh so it's fine for the answers to

1986
01:24:22,860 --> 01:24:25,440
change but for us to just be a little

1987
01:24:25,440 --> 01:24:28,260
explicit about uh what Target we're

1988
01:24:28,260 --> 01:24:30,780
shooting at and I think that may make

1989
01:24:30,780 --> 01:24:33,840
some other things off uh easier itself

1990
01:24:33,840 --> 01:24:36,980
too thank you

1991
01:24:43,560 --> 01:24:47,219
so Colin James here I think going way

1992
01:24:47,219 --> 01:24:49,800
back to to David's comments I mean that

1993
01:24:49,800 --> 01:24:52,560
we do we do have a complex uh you know

1994
01:24:52,560 --> 01:24:54,659
router not a router and the RTP

1995
01:24:54,659 --> 01:24:56,219
terminology sense of it but we have a

1996
01:24:56,219 --> 01:24:58,620
device in the middle that needs to

1997
01:24:58,620 --> 01:25:00,360
occasionally send things out over things

1998
01:25:00,360 --> 01:25:02,340
that are not quick streams or not a TCP

1999
01:25:02,340 --> 01:25:04,199
stream that this chunk or that this

2000
01:25:04,199 --> 01:25:05,520
thing data arrived in they need to be

2001
01:25:05,520 --> 01:25:06,900
able to re-chunk it or make sure it's

2002
01:25:06,900 --> 01:25:08,040
small enough to get down to those

2003
01:25:08,040 --> 01:25:11,600
smaller connections right and you know

2004
01:25:11,600 --> 01:25:14,760
uh you know Jonathan you said like we've

2005
01:25:14,760 --> 01:25:16,140
got to have that it doesn't work over

2006
01:25:16,140 --> 01:25:17,820
RTP if it can't have that property which

2007
01:25:17,820 --> 01:25:19,500
seems true and we've got another group

2008
01:25:19,500 --> 01:25:21,120
that's you know Richard's trying to make

2009
01:25:21,120 --> 01:25:22,800
it not be S frames Pro the S

2010
01:25:22,800 --> 01:25:24,179
frameworking groups problem to figure

2011
01:25:24,179 --> 01:25:25,860
out how to solve this which I mean I

2012
01:25:25,860 --> 01:25:27,360
understand that too but we're just

2013
01:25:27,360 --> 01:25:28,920
creating an impossible set of scenarios

2014
01:25:28,920 --> 01:25:31,140
here so I I think that the way that

2015
01:25:31,140 --> 01:25:33,480
makes sense is a way out of this to me

2016
01:25:33,480 --> 01:25:36,659
um it you know is right that this this

2017
01:25:36,659 --> 01:25:39,060
fragmentation inside the network which

2018
01:25:39,060 --> 01:25:41,340
is what this is is always problematic

2019
01:25:41,340 --> 01:25:42,780
and it's really it's a very hard problem

2020
01:25:42,780 --> 01:25:44,100
to solve and that's what we're running

2021
01:25:44,100 --> 01:25:45,360
into this was mentioned when we

2022
01:25:45,360 --> 01:25:46,620
chartered all of this work in the first

2023
01:25:46,620 --> 01:25:48,360
place by the way

2024
01:25:48,360 --> 01:25:50,699
um so I don't think we can do path MTU

2025
01:25:50,699 --> 01:25:52,080
Discovery I think it's too hard to do

2026
01:25:52,080 --> 01:25:53,640
any form of that across the conference

2027
01:25:53,640 --> 01:25:55,140
because people come and leave too

2028
01:25:55,140 --> 01:25:57,540
quickly uh and we've never got it to

2029
01:25:57,540 --> 01:25:59,400
work so I think that's fantasy and I

2030
01:25:59,400 --> 01:26:01,199
think that really only leaves us one

2031
01:26:01,199 --> 01:26:04,500
real option which is we pick an MTU of

2032
01:26:04,500 --> 01:26:06,960
1200 in s frame and the S frame

2033
01:26:06,960 --> 01:26:08,880
documents are defined such that the S

2034
01:26:08,880 --> 01:26:10,679
frameworking group and what comes out of

2035
01:26:10,679 --> 01:26:13,260
that is never passing into the RTP layer

2036
01:26:13,260 --> 01:26:14,639
or something that's that's you know

2037
01:26:14,639 --> 01:26:16,980
chunks bigger than that and yes I

2038
01:26:16,980 --> 01:26:18,239
understand there's networks with MTU

2039
01:26:18,239 --> 01:26:19,320
smaller than that and everything else

2040
01:26:19,320 --> 01:26:21,540
but like we just like we're going to

2041
01:26:21,540 --> 01:26:22,980
have to accept some limitations here

2042
01:26:22,980 --> 01:26:24,840
we've we've set up an impossible set of

2043
01:26:24,840 --> 01:26:26,699
constraints and that's that's the thing

2044
01:26:26,699 --> 01:26:29,040
you know I feel I feel Peter's pain on

2045
01:26:29,040 --> 01:26:30,600
he's like you guys are telling me to do

2046
01:26:30,600 --> 01:26:32,699
this here and that there and you're like

2047
01:26:32,699 --> 01:26:33,960
I can't figure out how to just just

2048
01:26:33,960 --> 01:26:36,480
finish this work so I think that we need

2049
01:26:36,480 --> 01:26:38,639
to think about what our constraints are

2050
01:26:38,639 --> 01:26:39,780
and which ones we're willing to violate

2051
01:26:39,780 --> 01:26:42,500
which ones were not

2052
01:26:50,540 --> 01:26:54,500
can you go to one more slide

2053
01:26:55,800 --> 01:26:58,260
uh right so we're basically deciding how

2054
01:26:58,260 --> 01:27:00,719
to proceed

2055
01:27:00,719 --> 01:27:03,360
and it sounds like maybe a separate

2056
01:27:03,360 --> 01:27:06,480
draft with a different name

2057
01:27:06,480 --> 01:27:09,860
but here in this working group

2058
01:27:10,560 --> 01:27:12,420
I I think that's complete garbage okay

2059
01:27:12,420 --> 01:27:14,940
that it doesn't that doesn't help the

2060
01:27:14,940 --> 01:27:17,219
splitting the the how not the number of

2061
01:27:17,219 --> 01:27:18,960
drafts or the number of working groups

2062
01:27:18,960 --> 01:27:20,940
is not the problem here has nothing to

2063
01:27:20,940 --> 01:27:22,860
do with the problem so that will not fix

2064
01:27:22,860 --> 01:27:24,540
it and it won't help and we shouldn't

2065
01:27:24,540 --> 01:27:25,980
even discuss it until we figure out how

2066
01:27:25,980 --> 01:27:28,699
we're going to solve the problem

2067
01:27:29,580 --> 01:27:31,080
so we have to solve the problem before

2068
01:27:31,080 --> 01:27:32,520
we can decide where we're going to solve

2069
01:27:32,520 --> 01:27:34,820
the problem

2070
01:27:37,739 --> 01:27:39,120
we have decided where we're going to

2071
01:27:39,120 --> 01:27:40,380
solve the problem that's the S

2072
01:27:40,380 --> 01:27:41,940
frameworking group right like that's

2073
01:27:41,940 --> 01:27:43,920
that's if you read the charter or

2074
01:27:43,920 --> 01:27:45,600
whatever I I don't even care it doesn't

2075
01:27:45,600 --> 01:27:47,280
matter it's the same people that have to

2076
01:27:47,280 --> 01:27:48,840
solve this problem right the S

2077
01:27:48,840 --> 01:27:50,159
frameworking group just said they're not

2078
01:27:50,159 --> 01:27:51,780
going to solve this problem

2079
01:27:51,780 --> 01:27:55,380
yeah one one member of I I think a

2080
01:27:55,380 --> 01:27:56,580
member who happened to be the chair

2081
01:27:56,580 --> 01:27:59,880
perhaps but or I I mean I don't know

2082
01:27:59,880 --> 01:28:01,800
like I don't I guess the thing is I

2083
01:28:01,800 --> 01:28:03,239
don't

2084
01:28:03,239 --> 01:28:04,860
here's what's going to happen to your

2085
01:28:04,860 --> 01:28:06,000
peter on this is you're going to go

2086
01:28:06,000 --> 01:28:07,260
solve it in that working group and

2087
01:28:07,260 --> 01:28:08,760
everyone's going to agree then you're

2088
01:28:08,760 --> 01:28:10,080
going to bring it over here and a bunch

2089
01:28:10,080 --> 01:28:11,100
of people are going to tell you that

2090
01:28:11,100 --> 01:28:13,980
what you're you've done violates the

2091
01:28:13,980 --> 01:28:16,280
tenets of RTP and that you must go away

2092
01:28:16,280 --> 01:28:18,540
and bring them a different Stone like

2093
01:28:18,540 --> 01:28:21,560
it's not going to end well

2094
01:28:21,719 --> 01:28:23,219
I mean is this the same thing as what

2095
01:28:23,219 --> 01:28:24,840
you got up a little while ago and they

2096
01:28:24,840 --> 01:28:27,540
all said go do the independent track

2097
01:28:27,540 --> 01:28:29,880
no no I mean no no this one they're

2098
01:28:29,880 --> 01:28:30,900
going to not tell you to do the

2099
01:28:30,900 --> 01:28:31,980
independence route they're going to tell

2100
01:28:31,980 --> 01:28:33,420
you not you're not allowed to publish

2101
01:28:33,420 --> 01:28:35,100
your document until it fixes a problem

2102
01:28:35,100 --> 01:28:38,340
that's impossible for you to fix

2103
01:28:38,340 --> 01:28:40,440
okay Magnus come give us the answer like

2104
01:28:40,440 --> 01:28:42,000
somebody just needs to suggest a good

2105
01:28:42,000 --> 01:28:43,380
solution to this problem and then we can

2106
01:28:43,380 --> 01:28:45,500
figure out what documents so

2107
01:28:45,500 --> 01:28:49,500
I mean it is frame fragmentation is not

2108
01:28:49,500 --> 01:28:52,380
RTP or quickest problem it's s frame's

2109
01:28:52,380 --> 01:28:55,080
problem and it's it's it's from my

2110
01:28:55,080 --> 01:28:56,760
perspective

2111
01:28:56,760 --> 01:28:58,080
uh

2112
01:28:58,080 --> 01:29:00,420
either you do it as a generalist most

2113
01:29:00,420 --> 01:29:03,239
suggesting ens frame to fragment however

2114
01:29:03,239 --> 01:29:05,580
I think that's Easter in other cases

2115
01:29:05,580 --> 01:29:08,159
where as friends gets fragmented if not

2116
01:29:08,159 --> 01:29:10,440
do it in the bloody RTP payload for

2117
01:29:10,440 --> 01:29:12,840
s-frame you're gonna need one

2118
01:29:12,840 --> 01:29:14,699
the right home for that document I think

2119
01:29:14,699 --> 01:29:16,440
you still think is here

2120
01:29:16,440 --> 01:29:19,320
in avt core because it's going to be RTP

2121
01:29:19,320 --> 01:29:21,060
problems more than as friends problems

2122
01:29:21,060 --> 01:29:22,980
if we just create this a blob there's

2123
01:29:22,980 --> 01:29:24,780
some signal issues around this which is

2124
01:29:24,780 --> 01:29:26,639
I still don't know if anyone's figured

2125
01:29:26,639 --> 01:29:27,360
out

2126
01:29:27,360 --> 01:29:28,920
but yeah

2127
01:29:28,920 --> 01:29:29,840
um

2128
01:29:29,840 --> 01:29:33,719
so that's yeah I'm happy to rename my

2129
01:29:33,719 --> 01:29:36,480
thing uh

2130
01:29:36,480 --> 01:29:39,120
s frame packetization for RTP or

2131
01:29:39,120 --> 01:29:42,080
whatever and do it here

2132
01:29:44,580 --> 01:29:46,260
sorry that'd be a wonderful document but

2133
01:29:46,260 --> 01:29:47,699
it's not the document you you said

2134
01:29:47,699 --> 01:29:49,980
Hudson to propose here I think it's a

2135
01:29:49,980 --> 01:29:52,920
different topic um yeah the short

2136
01:29:52,920 --> 01:29:55,500
problem here is like whether RTP is okay

2137
01:29:55,500 --> 01:29:58,380
with repacketization that doesn't pay

2138
01:29:58,380 --> 01:30:00,120
attention to codex because that's the

2139
01:30:00,120 --> 01:30:01,560
underlying problem here the only thing

2140
01:30:01,560 --> 01:30:03,179
S3 was doing here is making it so you

2141
01:30:03,179 --> 01:30:05,699
can't see the the actual codec

2142
01:30:05,699 --> 01:30:07,139
um if that's a solvable problem we

2143
01:30:07,139 --> 01:30:10,440
should solve it at the RTP layer so that

2144
01:30:10,440 --> 01:30:13,080
we don't have to redo this for every uh

2145
01:30:13,080 --> 01:30:14,699
so we get the generic decoupling we

2146
01:30:14,699 --> 01:30:16,860
don't have to do it for every uh case

2147
01:30:16,860 --> 01:30:18,780
where you can't or don't want to look at

2148
01:30:18,780 --> 01:30:21,120
the end of internals the codec

2149
01:30:21,120 --> 01:30:23,400
um if it's not a problem then we can't

2150
01:30:23,400 --> 01:30:26,100
do uh s frame over of our OTP without

2151
01:30:26,100 --> 01:30:29,100
pmtud

2152
01:30:31,020 --> 01:30:33,300
um so as an individual and I've cleverly

2153
01:30:33,300 --> 01:30:35,040
arranged to look at the last word here I

2154
01:30:35,040 --> 01:30:37,739
mean RTP was designed to have tight

2155
01:30:37,739 --> 01:30:39,120
coupling to the Codex because there's a

2156
01:30:39,120 --> 01:30:40,679
lot of benefits to that and one of the

2157
01:30:40,679 --> 01:30:42,060
consequences that is now you have to

2158
01:30:42,060 --> 01:30:43,260
know about the codec if you're going to

2159
01:30:43,260 --> 01:30:45,719
do things with the RTP player

2160
01:30:45,719 --> 01:30:47,880
um and yeah that's a trade-off and if

2161
01:30:47,880 --> 01:30:49,800
you want to just I mean that's why we

2162
01:30:49,800 --> 01:30:51,719
use RTP and not just send these things

2163
01:30:51,719 --> 01:30:54,179
over TCP so

2164
01:30:54,179 --> 01:30:55,020
um

2165
01:30:55,020 --> 01:30:58,020
as a con so I mean so for S frame

2166
01:30:58,020 --> 01:31:00,360
s frame is a potentially a Meta Meta

2167
01:31:00,360 --> 01:31:02,699
payload so something we'll have to know

2168
01:31:02,699 --> 01:31:05,699
about s frame to do this work but that's

2169
01:31:05,699 --> 01:31:07,199
that's fine

2170
01:31:07,199 --> 01:31:08,100
um it won't have to know about the

2171
01:31:08,100 --> 01:31:09,300
contents because like you say it can't

2172
01:31:09,300 --> 01:31:11,940
anymore that it doesn't know about the

2173
01:31:11,940 --> 01:31:14,239
you know it might be able to repacketize

2174
01:31:14,239 --> 01:31:17,520
issue six four with fragmentation units

2175
01:31:17,520 --> 01:31:20,219
but it doesn't have to know about how

2176
01:31:20,219 --> 01:31:22,380
you know inverse cosine transfer

2177
01:31:22,380 --> 01:31:24,780
transforms work or anything like that

2178
01:31:24,780 --> 01:31:26,760
um and

2179
01:31:26,760 --> 01:31:29,400
so that's so I mean I think and I as I

2180
01:31:29,400 --> 01:31:31,440
said I think uh what Peter said is

2181
01:31:31,440 --> 01:31:34,260
writing an S frame payload for RTP would

2182
01:31:34,260 --> 01:31:36,420
be an excellent document entirely in

2183
01:31:36,420 --> 01:31:38,460
scope of this work group and something

2184
01:31:38,460 --> 01:31:40,860
we've needed for a while to get

2185
01:31:40,860 --> 01:31:42,659
uh S3 working

2186
01:31:42,659 --> 01:31:44,159
proper did actually have Mass frame

2187
01:31:44,159 --> 01:31:46,620
defined I mean I would have thought that

2188
01:31:46,620 --> 01:31:47,940
it would be in scope for the S framework

2189
01:31:47,940 --> 01:31:49,679
in group two but if you want to do it

2190
01:31:49,679 --> 01:31:50,880
here I mean I think the argument that it

2191
01:31:50,880 --> 01:31:52,860
needs the RTP

2192
01:31:52,860 --> 01:31:55,199
um knowledge is fine I'd be happy to say

2193
01:31:55,199 --> 01:31:57,540
it's in scope but but you're not done we

2194
01:31:57,540 --> 01:32:00,360
we when we when calling they presented

2195
01:32:00,360 --> 01:32:04,080
the the game State data it was kind of

2196
01:32:04,080 --> 01:32:05,940
their response of the group that the

2197
01:32:05,940 --> 01:32:08,159
media should be done outside of the ABT

2198
01:32:08,159 --> 01:32:09,600
core and then the packet decision should

2199
01:32:09,600 --> 01:32:13,320
be done in our in in RTA in ABT core so

2200
01:32:13,320 --> 01:32:16,139
it is kind of I mean what the dependent

2201
01:32:16,139 --> 01:32:17,880
of the college we choose to do the

2202
01:32:17,880 --> 01:32:20,699
bucket Edition also outside of the of a

2203
01:32:20,699 --> 01:32:23,219
IV Decor or not or How does it go

2204
01:32:23,219 --> 01:32:24,120
because

2205
01:32:24,120 --> 01:32:26,340
yeah yeah I mean I think

2206
01:32:26,340 --> 01:32:27,719
I mean I think it's the same thing

2207
01:32:27,719 --> 01:32:30,000
applies you do the crypto transforms

2208
01:32:30,000 --> 01:32:32,460
outside and then the yeah so how this

2209
01:32:32,460 --> 01:32:34,020
Frame is

2210
01:32:34,020 --> 01:32:36,420
frame has to make sure that it is said

2211
01:32:36,420 --> 01:32:38,520
that it works in RTP but I think that

2212
01:32:38,520 --> 01:32:40,440
the people the decision for this frame

2213
01:32:40,440 --> 01:32:42,179
for this packet must be done in a

2214
01:32:42,179 --> 01:32:43,020
vehicle

2215
01:32:43,020 --> 01:32:46,639
I have presented several times the the

2216
01:32:46,639 --> 01:32:49,860
generic packetizer try to overcome the

2217
01:32:49,860 --> 01:32:52,679
issues right by the by the ABT Core

2218
01:32:52,679 --> 01:32:56,639
group and I failed so that's why it has

2219
01:32:56,639 --> 01:32:58,320
not been for the progression it is not

2220
01:32:58,320 --> 01:33:00,120
that we have not made extensive effort

2221
01:33:00,120 --> 01:33:02,460
to make it work in here but it is not

2222
01:33:02,460 --> 01:33:05,100
possible I mean I think it's it's not

2223
01:33:05,100 --> 01:33:07,679
that the concept is bad is that you know

2224
01:33:07,679 --> 01:33:10,139
you need to have

2225
01:33:10,139 --> 01:33:11,580
um

2226
01:33:11,580 --> 01:33:13,860
codex specific you need there needs you

2227
01:33:13,860 --> 01:33:17,040
need to expose enough codec knowledge

2228
01:33:17,040 --> 01:33:19,139
such that things can make a Intelligent

2229
01:33:19,139 --> 01:33:20,580
Decisions and

2230
01:33:20,580 --> 01:33:23,580
honestly I feel like you know

2231
01:33:23,580 --> 01:33:25,199
just this is the you know one of the

2232
01:33:25,199 --> 01:33:26,520
problems that s frame has had is that

2233
01:33:26,520 --> 01:33:27,900
because of the pandemic we haven't been

2234
01:33:27,900 --> 01:33:28,980
able to have

2235
01:33:28,980 --> 01:33:31,139
side meetings with this I think if we

2236
01:33:31,139 --> 01:33:32,400
had you know

2237
01:33:32,400 --> 01:33:34,739
a two-hour side meeting with the right

2238
01:33:34,739 --> 01:33:36,900
people you know all this cleared up and

2239
01:33:36,900 --> 01:33:39,179
we'd have figured it out you know

2240
01:33:39,179 --> 01:33:41,159
two years ago so

2241
01:33:41,159 --> 01:33:42,540
I think

2242
01:33:42,540 --> 01:33:43,320
um

2243
01:33:43,320 --> 01:33:45,719
yeah but anyway I mean that's right to

2244
01:33:45,719 --> 01:33:47,340
move forward I think that this is

2245
01:33:47,340 --> 01:33:49,440
sometimes we need people who aren't here

2246
01:33:49,440 --> 01:33:51,780
this is coming from from the fact that

2247
01:33:51,780 --> 01:33:53,699
the RTP

2248
01:33:53,699 --> 01:33:55,800
over quick has decided to make something

2249
01:33:55,800 --> 01:33:57,840
that it is not playing well with the

2250
01:33:57,840 --> 01:34:00,300
rest of the RTP

2251
01:34:00,300 --> 01:34:04,020
um implementation not there I mean uh we

2252
01:34:04,020 --> 01:34:05,880
have never have a problem in real life

2253
01:34:05,880 --> 01:34:09,300
about mtus I mean we have svus that that

2254
01:34:09,300 --> 01:34:11,340
forward buckets from one network to

2255
01:34:11,340 --> 01:34:12,840
another

2256
01:34:12,840 --> 01:34:14,880
um even if then

2257
01:34:14,880 --> 01:34:17,520
the empties could be different I mean

2258
01:34:17,520 --> 01:34:19,560
which reality I don't know if it is the

2259
01:34:19,560 --> 01:34:21,960
case there has been no no issue in in

2260
01:34:21,960 --> 01:34:23,460
transferring packet without having to

2261
01:34:23,460 --> 01:34:26,699
repackathize I don't think that

2262
01:34:26,699 --> 01:34:28,920
sorry I mean that yeah it's absolutely

2263
01:34:28,920 --> 01:34:31,860
true that until now I think Colin's

2264
01:34:31,860 --> 01:34:33,480
thing of just assumed the empty the

2265
01:34:33,480 --> 01:34:35,520
palette MTU is 1200 and work with that

2266
01:34:35,520 --> 01:34:36,719
is what everybody has done and that's

2267
01:34:36,719 --> 01:34:38,940
been fine one of the ideas of artificial

2268
01:34:38,940 --> 01:34:40,260
real quick is don't do is because you

2269
01:34:40,260 --> 01:34:42,300
have streams no you can treat it as

2270
01:34:42,300 --> 01:34:43,920
though you have unloaded mtus and that

2271
01:34:43,920 --> 01:34:45,719
works but that means that yes if you're

2272
01:34:45,719 --> 01:34:46,860
Gateway into something that still has

2273
01:34:46,860 --> 01:34:49,219
that limit

2274
01:34:52,280 --> 01:34:56,219
introduce it because they are if they

2275
01:34:56,219 --> 01:34:58,500
use instead of phase transmitting the in

2276
01:34:58,500 --> 01:35:01,560
the frame as I think as a single RTP

2277
01:35:01,560 --> 01:35:04,980
packet with say infinite MTU they would

2278
01:35:04,980 --> 01:35:07,320
split it into a smaller empty use with a

2279
01:35:07,320 --> 01:35:10,340
RPC 4570

2280
01:35:10,340 --> 01:35:14,780
1 the problem will go away

2281
01:35:17,400 --> 01:35:19,800
so it is a decision that has been made

2282
01:35:19,800 --> 01:35:23,600
by the RTP over quick to to send the the

2283
01:35:23,600 --> 01:35:27,060
RTP package with an infinite NTU that in

2284
01:35:27,060 --> 01:35:29,219
fact does not play well with any other

2285
01:35:29,219 --> 01:35:32,280
RTP over any other thing

2286
01:35:32,280 --> 01:35:34,980
so instead of pushing this problem with

2287
01:35:34,980 --> 01:35:37,980
a 2s frame or two other pair all to

2288
01:35:37,980 --> 01:35:38,900
other

2289
01:35:38,900 --> 01:35:41,400
media formats I I agree with what

2290
01:35:41,400 --> 01:35:42,900
Richard said that it is not only a

2291
01:35:42,900 --> 01:35:45,179
problem with a string it's a problem if

2292
01:35:45,179 --> 01:35:49,679
we want to do a an SVU or a media

2293
01:35:49,679 --> 01:35:52,380
element that does not really need to

2294
01:35:52,380 --> 01:35:54,960
have knowledge of the of the packet

2295
01:35:54,960 --> 01:35:57,600
decision and the magnetization of the or

2296
01:35:57,600 --> 01:36:00,179
the or the Codex itself because it is

2297
01:36:00,179 --> 01:36:02,400
not what typical SVU does so we are

2298
01:36:02,400 --> 01:36:04,920
adding an extra requirement in the in

2299
01:36:04,920 --> 01:36:08,100
the to these Network elements and just

2300
01:36:08,100 --> 01:36:10,860
because of what a RTP over Queen has

2301
01:36:10,860 --> 01:36:13,260
decided to do with say with a

2302
01:36:13,260 --> 01:36:17,880
uh with the with the quickest streams

2303
01:36:17,880 --> 01:36:20,400
and it has just left us it is an

2304
01:36:20,400 --> 01:36:24,360
architectural choice and it has left to

2305
01:36:24,360 --> 01:36:26,219
the to the totally but I don't think

2306
01:36:26,219 --> 01:36:27,540
that it is

2307
01:36:27,540 --> 01:36:30,840
or the problem now has to be the spread

2308
01:36:30,840 --> 01:36:32,820
to other or the media formats as to how

2309
01:36:32,820 --> 01:36:34,500
to do the rebag decision when for

2310
01:36:34,500 --> 01:36:36,719
example this Frame is meant to be

2311
01:36:36,719 --> 01:36:38,760
encrypted and not possible to do the

2312
01:36:38,760 --> 01:36:41,420
pocketization

2313
01:36:49,260 --> 01:36:52,260
uh

2314
01:36:52,860 --> 01:36:55,040
foreign

2315
01:36:59,719 --> 01:37:03,000
is that issue 29 is a

2316
01:37:03,000 --> 01:37:05,699
special case of the idea that because

2317
01:37:05,699 --> 01:37:08,239
the infinite MTU

2318
01:37:08,239 --> 01:37:10,920
abstraction is causing problems for

2319
01:37:10,920 --> 01:37:12,360
anything where you need to Gateway To

2320
01:37:12,360 --> 01:37:15,540
traditional rgp over

2321
01:37:15,540 --> 01:37:19,139
UDP and yeah that's true and uh so maybe

2322
01:37:19,139 --> 01:37:22,020
maybe that's something that uh that the

2323
01:37:22,020 --> 01:37:23,820
RDP over quick draft could talk about

2324
01:37:23,820 --> 01:37:26,100
not specifically to S frame but in

2325
01:37:26,100 --> 01:37:30,360
general the infinite MTU causes problems

2326
01:37:30,360 --> 01:37:31,440
um so maybe that's something with the

2327
01:37:31,440 --> 01:37:32,940
RTP over quick document should talk

2328
01:37:32,940 --> 01:37:35,059
about

2329
01:37:36,780 --> 01:37:39,659
to move to the next item now

2330
01:37:39,659 --> 01:37:43,320
yeah I think so we're like way over time

2331
01:37:43,320 --> 01:37:45,659
but I never got an answer about where

2332
01:37:45,659 --> 01:37:47,940
where am I supposed to go

2333
01:37:47,940 --> 01:37:49,980
uh

2334
01:37:49,980 --> 01:37:51,179
uh well we're talking about RV over

2335
01:37:51,179 --> 01:37:52,760
quick now so

2336
01:37:52,760 --> 01:37:55,920
kind of continuous Sun could I could I

2337
01:37:55,920 --> 01:37:57,300
just suggest that scheduling an intern

2338
01:37:57,300 --> 01:37:58,800
meeting or something like scheduling a

2339
01:37:58,800 --> 01:38:00,000
meeting with the right people for a

2340
01:38:00,000 --> 01:38:01,679
couple hours seems like your only hope

2341
01:38:01,679 --> 01:38:03,900
of solving that problem I would I would

2342
01:38:03,900 --> 01:38:06,719
tend to agree yes

2343
01:38:06,719 --> 01:38:09,179
okay so the notes indicate we'll do an

2344
01:38:09,179 --> 01:38:11,340
interim thanks

2345
01:38:11,340 --> 01:38:13,320
and possibly a side meeting not not a

2346
01:38:13,320 --> 01:38:15,000
formal interim I think this is something

2347
01:38:15,000 --> 01:38:16,560
that needs more informal discussion

2348
01:38:16,560 --> 01:38:20,280
rather than a formal working repeating

2349
01:38:20,280 --> 01:38:21,780
okay now that we have been alluding to

2350
01:38:21,780 --> 01:38:23,639
RTP over quick for all the time we can

2351
01:38:23,639 --> 01:38:29,100
actually get to it next slide hooray

2352
01:38:29,219 --> 01:38:32,040
so we have done a bunch of updates one

2353
01:38:32,040 --> 01:38:33,540
that actually pertain to this entire

2354
01:38:33,540 --> 01:38:35,159
SRAM discussion we had for the last 10

2355
01:38:35,159 --> 01:38:36,780
minutes so some of the stuff that you

2356
01:38:36,780 --> 01:38:37,980
were asking for is already in the

2357
01:38:37,980 --> 01:38:40,139
document I'll talk about that in a

2358
01:38:40,139 --> 01:38:41,400
second

2359
01:38:41,400 --> 01:38:43,320
um

2360
01:38:43,320 --> 01:38:46,020
uh so we had a bunch of different

2361
01:38:46,020 --> 01:38:47,460
updates

2362
01:38:47,460 --> 01:38:49,080
um allow for mixing streams and

2363
01:38:49,080 --> 01:38:50,699
datagrams now

2364
01:38:50,699 --> 01:38:52,199
um but I want to first talk about the

2365
01:38:52,199 --> 01:38:54,120
length Grid in quick streams

2366
01:38:54,120 --> 01:38:56,699
in order to support translators or

2367
01:38:56,699 --> 01:38:57,780
things like that that would actually

2368
01:38:57,780 --> 01:38:59,580
need to chop big things up into smaller

2369
01:38:59,580 --> 01:39:00,840
things

2370
01:39:00,840 --> 01:39:01,560
um

2371
01:39:01,560 --> 01:39:04,340
next slide

2372
01:39:04,920 --> 01:39:07,020
um we have included an explicit length

2373
01:39:07,020 --> 01:39:09,480
field here so that a sender could

2374
01:39:09,480 --> 01:39:11,340
actually do Center side segmentation

2375
01:39:11,340 --> 01:39:13,560
into meaningful resize chunks while

2376
01:39:13,560 --> 01:39:15,060
still transmitting the whole thing over

2377
01:39:15,060 --> 01:39:16,440
a quick stream and you would find the

2378
01:39:16,440 --> 01:39:18,540
identifiable borders like you do when

2379
01:39:18,540 --> 01:39:20,340
you try to send something over TCP over

2380
01:39:20,340 --> 01:39:23,100
sctp or something else so that would

2381
01:39:23,100 --> 01:39:24,120
allow

2382
01:39:24,120 --> 01:39:26,940
if there existed a an S frame

2383
01:39:26,940 --> 01:39:29,219
fragmentation to come back to our

2384
01:39:29,219 --> 01:39:31,260
previous discussion

2385
01:39:31,260 --> 01:39:33,360
at the sender

2386
01:39:33,360 --> 01:39:36,239
um to preserve these boundaries that you

2387
01:39:36,239 --> 01:39:38,760
insert even though you are using

2388
01:39:38,760 --> 01:39:40,560
um a quick stream for transmission and

2389
01:39:40,560 --> 01:39:42,600
then a translator could would have the

2390
01:39:42,600 --> 01:39:44,159
natural packet boundaries to send that

2391
01:39:44,159 --> 01:39:47,400
forward the choice of the size of these

2392
01:39:47,400 --> 01:39:49,199
frames would ultimately be up to the

2393
01:39:49,199 --> 01:39:50,880
sender and if you have negotiated that

2394
01:39:50,880 --> 01:39:52,500
you're talking straight over streams to

2395
01:39:52,500 --> 01:39:54,659
it to directly to appear

2396
01:39:54,659 --> 01:39:56,400
um without any translator then maybe you

2397
01:39:56,400 --> 01:39:57,960
don't need those if you have negotiated

2398
01:39:57,960 --> 01:39:59,820
something different then you can then

2399
01:39:59,820 --> 01:40:03,179
you can choose smaller units

2400
01:40:03,179 --> 01:40:04,040
um

2401
01:40:04,040 --> 01:40:08,760
and this may be 180u one frame per

2402
01:40:08,760 --> 01:40:11,639
person it might even be multiple I80 use

2403
01:40:11,639 --> 01:40:14,040
multiple frames per stream

2404
01:40:14,040 --> 01:40:16,679
there is one subtle problem with the

2405
01:40:16,679 --> 01:40:17,940
letter part that I want to talk about

2406
01:40:17,940 --> 01:40:21,080
the neck on the next slide

2407
01:40:22,080 --> 01:40:24,120
um so if we can send one or more packets

2408
01:40:24,120 --> 01:40:26,060
over the stream we had

2409
01:40:26,060 --> 01:40:29,159
mechanisms or we do have mechanisms in

2410
01:40:29,159 --> 01:40:30,360
the

2411
01:40:30,360 --> 01:40:33,120
um RTP over quick Draft when using

2412
01:40:33,120 --> 01:40:34,860
streams to cancel outstanding

2413
01:40:34,860 --> 01:40:36,780
Transmissions so a sender who is

2414
01:40:36,780 --> 01:40:38,639
figuring out that maybe my queue is too

2415
01:40:38,639 --> 01:40:40,199
long this is never going to make it up

2416
01:40:40,199 --> 01:40:42,480
to the receiver in time I can send the

2417
01:40:42,480 --> 01:40:44,280
reset stream to

2418
01:40:44,280 --> 01:40:46,380
terminate to terminate this transmission

2419
01:40:46,380 --> 01:40:49,920
at the same time a receiver could

2420
01:40:49,920 --> 01:40:52,500
possibly find out that oh stuff is

2421
01:40:52,500 --> 01:40:54,179
coming in too late I'm not going to use

2422
01:40:54,179 --> 01:40:56,940
this packet anymore or this this Adu

2423
01:40:56,940 --> 01:40:58,679
anymore so maybe I should tell the

2424
01:40:58,679 --> 01:41:00,659
sender to stop retransmitting and so I

2425
01:41:00,659 --> 01:41:02,100
could send

2426
01:41:02,100 --> 01:41:04,800
um I could cancel a stream

2427
01:41:04,800 --> 01:41:07,860
using stop sending

2428
01:41:07,860 --> 01:41:09,600
um the interesting question is the

2429
01:41:09,600 --> 01:41:11,760
moment we have we may have multiple

2430
01:41:11,760 --> 01:41:15,000
packets on that stream

2431
01:41:15,000 --> 01:41:17,280
um you don't the sender doesn't exactly

2432
01:41:17,280 --> 01:41:18,840
know whether there is the receiver

2433
01:41:18,840 --> 01:41:20,159
doesn't exactly know whether the sender

2434
01:41:20,159 --> 01:41:23,040
has put 180u on the stream or multiple

2435
01:41:23,040 --> 01:41:25,920
so if I if I would say stop sending and

2436
01:41:25,920 --> 01:41:29,340
cancel an incoming stream I have no idea

2437
01:41:29,340 --> 01:41:32,580
how many bits I'm going to um

2438
01:41:32,580 --> 01:41:34,920
rip off of that Stream So what I'm going

2439
01:41:34,920 --> 01:41:38,219
to lose next slide

2440
01:41:38,219 --> 01:41:40,020
so

2441
01:41:40,020 --> 01:41:43,280
um first option is

2442
01:41:44,100 --> 01:41:45,960
thank you

2443
01:41:45,960 --> 01:41:47,460
it's actually quick

2444
01:41:47,460 --> 01:41:48,540
right side

2445
01:41:48,540 --> 01:41:50,820
okay okay now just um search audio

2446
01:41:50,820 --> 01:41:52,500
there's something you want to say are

2447
01:41:52,500 --> 01:41:55,080
you just in the keyboard

2448
01:41:55,080 --> 01:41:57,360
okay so first option is we just assume

2449
01:41:57,360 --> 01:41:58,980
we just accept that you can't safely

2450
01:41:58,980 --> 01:42:00,480
cancel streams because you don't know

2451
01:42:00,480 --> 01:42:01,980
what's coming what might be coming up

2452
01:42:01,980 --> 01:42:03,900
that is

2453
01:42:03,900 --> 01:42:07,139
um related to option number D that may

2454
01:42:07,139 --> 01:42:09,060
be implicit from the application context

2455
01:42:09,060 --> 01:42:10,980
so maybe you have an agreement that

2456
01:42:10,980 --> 01:42:12,840
you're always going to just use 180u and

2457
01:42:12,840 --> 01:42:14,280
you are maybe this isn't the problem

2458
01:42:14,280 --> 01:42:15,719
that we need to solve at the transport

2459
01:42:15,719 --> 01:42:17,760
layer and so and then and we are just

2460
01:42:17,760 --> 01:42:19,940
done

2461
01:42:20,100 --> 01:42:22,440
um we could also require just a single

2462
01:42:22,440 --> 01:42:23,940
Adu per stream

2463
01:42:23,940 --> 01:42:25,739
would be an option but we might also

2464
01:42:25,739 --> 01:42:29,100
have a single uh group of pictures or

2465
01:42:29,100 --> 01:42:31,260
something on the per stream because they

2466
01:42:31,260 --> 01:42:32,580
are dependent they have the exhibit

2467
01:42:32,580 --> 01:42:34,920
dependencies anyway so maybe that b

2468
01:42:34,920 --> 01:42:37,440
might be too harsh an option

2469
01:42:37,440 --> 01:42:39,719
um or we might invent some signaling but

2470
01:42:39,719 --> 01:42:41,460
that appears to be arbitrarily complex

2471
01:42:41,460 --> 01:42:42,900
to have semantically Rich enough

2472
01:42:42,900 --> 01:42:46,500
expressiveness so we probably have a

2473
01:42:46,500 --> 01:42:49,199
kind of a tendency to go for for

2474
01:42:49,199 --> 01:42:51,780
solution number a

2475
01:42:51,780 --> 01:42:53,280
um just curious about comments from

2476
01:42:53,280 --> 01:42:56,940
people does anybody care

2477
01:42:56,940 --> 01:42:57,659
um

2478
01:42:57,659 --> 01:43:01,280
Bernard your first one with you

2479
01:43:01,440 --> 01:43:04,080
yeah I mean I think there's an inherent

2480
01:43:04,080 --> 01:43:07,139
Advantage uh for the sender to cancel a

2481
01:43:07,139 --> 01:43:09,179
stream because it knows what came out of

2482
01:43:09,179 --> 01:43:10,560
the encoder

2483
01:43:10,560 --> 01:43:12,900
so for example it knows it's a keyframe

2484
01:43:12,900 --> 01:43:14,580
I can't really cancel it I need to get

2485
01:43:14,580 --> 01:43:16,440
it through or maybe it's an enhancement

2486
01:43:16,440 --> 01:43:20,280
layer so uh when I was implementing this

2487
01:43:20,280 --> 01:43:22,199
it made the most sense to do the

2488
01:43:22,199 --> 01:43:24,659
cancellation on the sender anyway

2489
01:43:24,659 --> 01:43:26,639
so um

2490
01:43:26,639 --> 01:43:29,580
I think you've stated the issue and

2491
01:43:29,580 --> 01:43:32,940
um I I don't see why the receiver would

2492
01:43:32,940 --> 01:43:35,400
would have to do the cancellation and

2493
01:43:35,400 --> 01:43:37,560
maybe we just just say hey don't need to

2494
01:43:37,560 --> 01:43:40,639
Sender can do it in this case

2495
01:43:41,699 --> 01:43:43,380
that might be that might be option

2496
01:43:43,380 --> 01:43:45,000
number e okay we don't have that on the

2497
01:43:45,000 --> 01:43:48,440
list more comments

2498
01:43:48,719 --> 01:43:51,900
David skanazi quick Enthusiast

2499
01:43:51,900 --> 01:43:55,619
um there is no such thing in quick as a

2500
01:43:55,619 --> 01:43:58,139
receiver canceling a stream

2501
01:43:58,139 --> 01:44:00,300
um so we're like we're talking about

2502
01:44:00,300 --> 01:44:03,420
unidirectional streams a receiver can

2503
01:44:03,420 --> 01:44:05,219
send a stop sending that's what I meant

2504
01:44:05,219 --> 01:44:07,560
yeah yeah but but the important

2505
01:44:07,560 --> 01:44:08,880
distinction there

2506
01:44:08,880 --> 01:44:12,300
is the stop sending frame

2507
01:44:12,300 --> 01:44:16,139
is not does not cancel the stream the

2508
01:44:16,139 --> 01:44:18,980
stop sending frame tells the sender

2509
01:44:18,980 --> 01:44:22,380
please cancel this the Stream

2510
01:44:22,380 --> 01:44:25,760
and so the sender

2511
01:44:25,760 --> 01:44:29,639
will has to just in quick decide whether

2512
01:44:29,639 --> 01:44:32,219
to cancel the stream and to resend a

2513
01:44:32,219 --> 01:44:36,179
reset stream and when it will so okay so

2514
01:44:36,179 --> 01:44:39,480
it could ensure the integrity and we are

2515
01:44:39,480 --> 01:44:42,000
done yeah so that that's your easy

2516
01:44:42,000 --> 01:44:44,639
solution there is you you should add

2517
01:44:44,639 --> 01:44:47,580
some text to say that like if you

2518
01:44:47,580 --> 01:44:49,260
receive what to do if you receive a stop

2519
01:44:49,260 --> 01:44:51,060
sending like don't do the dumb thing be

2520
01:44:51,060 --> 01:44:53,639
smart about it and that might your life

2521
01:44:53,639 --> 01:44:56,460
might be a bit harder because some quick

2522
01:44:56,460 --> 01:44:59,580
implementations might just say okay they

2523
01:44:59,580 --> 01:45:00,960
said stop sending I'm going to reset the

2524
01:45:00,960 --> 01:45:02,340
stream right away without sending it to

2525
01:45:02,340 --> 01:45:03,780
the application so that might be an

2526
01:45:03,780 --> 01:45:05,340
implementation issue but from a

2527
01:45:05,340 --> 01:45:06,960
standards perspective there's no problem

2528
01:45:06,960 --> 01:45:07,920
here

2529
01:45:07,920 --> 01:45:10,739
also I I missed that sub subtlety thank

2530
01:45:10,739 --> 01:45:12,860
you

2531
01:45:13,320 --> 01:45:15,000
Lucas

2532
01:45:15,000 --> 01:45:18,300
hey uh Lucas Pardo I I love streams like

2533
01:45:18,300 --> 01:45:21,360
this stuff is is causes so many bugs um

2534
01:45:21,360 --> 01:45:23,639
as David said yeah I'm aware of bugs

2535
01:45:23,639 --> 01:45:25,139
where

2536
01:45:25,139 --> 01:45:26,820
um people have received stop sending and

2537
01:45:26,820 --> 01:45:30,000
not actioned it and uh all sorts of fun

2538
01:45:30,000 --> 01:45:31,139
and games

2539
01:45:31,139 --> 01:45:33,780
um but for me I don't understand RTP

2540
01:45:33,780 --> 01:45:35,400
that well to know what's safe versus

2541
01:45:35,400 --> 01:45:38,520
unsafe is this like safe in the security

2542
01:45:38,520 --> 01:45:41,159
Center is it just non-optimal that some

2543
01:45:41,159 --> 01:45:43,500
things get dropped on the floor I

2544
01:45:43,500 --> 01:45:45,719
thought that might help to understand

2545
01:45:45,719 --> 01:45:48,060
the problem like the the impact of the

2546
01:45:48,060 --> 01:45:50,159
problem we're talking about it would be

2547
01:45:50,159 --> 01:45:52,560
as though you had lost the packets in a

2548
01:45:52,560 --> 01:45:55,320
traditional RDP or UDP so so you'd have

2549
01:45:55,320 --> 01:45:56,580
to do whatever recovery either that

2550
01:45:56,580 --> 01:45:59,580
right okay so it won't it won't get

2551
01:45:59,580 --> 01:46:01,500
worse than sending datagrams and and and

2552
01:46:01,500 --> 01:46:03,659
those being dropped from a queue so that

2553
01:46:03,659 --> 01:46:05,760
doesn't seem too bad and and like hb3

2554
01:46:05,760 --> 01:46:07,679
has this problem right we send frames on

2555
01:46:07,679 --> 01:46:11,219
streams and if if you get reset at any

2556
01:46:11,219 --> 01:46:13,260
point on that stream you don't know what

2557
01:46:13,260 --> 01:46:15,000
frames are going to come after it and we

2558
01:46:15,000 --> 01:46:17,639
kind of live live with that

2559
01:46:17,639 --> 01:46:18,420
um

2560
01:46:18,420 --> 01:46:22,199
yeah yeah just accept that this could

2561
01:46:22,199 --> 01:46:24,060
happen I think is is what we're saying

2562
01:46:24,060 --> 01:46:27,179
maybe you could say well like David just

2563
01:46:27,179 --> 01:46:29,280
alluded to implementations could do

2564
01:46:29,280 --> 01:46:31,860
something smarter and try and send the

2565
01:46:31,860 --> 01:46:34,280
reset at the right you know the offset

2566
01:46:34,280 --> 01:46:36,840
that that it makes sense in the packet

2567
01:46:36,840 --> 01:46:38,280
the problem I think you might hit though

2568
01:46:38,280 --> 01:46:39,840
is that

2569
01:46:39,840 --> 01:46:42,540
um if if there's any if you're expecting

2570
01:46:42,540 --> 01:46:44,460
that all of the data before that reset

2571
01:46:44,460 --> 01:46:46,980
was received on the other end it might

2572
01:46:46,980 --> 01:46:50,340
not have been before the the other end

2573
01:46:50,340 --> 01:46:52,500
sees the reset stream and it discards

2574
01:46:52,500 --> 01:46:53,880
all the state that you were hoping that

2575
01:46:53,880 --> 01:46:56,340
it would have read beforehand like

2576
01:46:56,340 --> 01:46:57,060
there's not going to be any

2577
01:46:57,060 --> 01:47:00,000
Transmissions at that point so you're

2578
01:47:00,000 --> 01:47:02,639
probably still in the situation of a

2579
01:47:02,639 --> 01:47:05,340
anyway it could happen but it's it's

2580
01:47:05,340 --> 01:47:07,199
possible it wouldn't as well so that's

2581
01:47:07,199 --> 01:47:08,460
something that people would probably

2582
01:47:08,460 --> 01:47:10,920
have to accommodate I suspect with us

2583
01:47:10,920 --> 01:47:13,139
with David's comments uh we'll need to

2584
01:47:13,139 --> 01:47:14,880
bang our head a bit get ahead around

2585
01:47:14,880 --> 01:47:16,860
that in order to see what kind of

2586
01:47:16,860 --> 01:47:18,860
interaction that actually leads to and

2587
01:47:18,860 --> 01:47:21,239
given that that also every interaction

2588
01:47:21,239 --> 01:47:23,400
causes an extra rtt what that then in

2589
01:47:23,400 --> 01:47:26,159
the end means for a a sensible choice of

2590
01:47:26,159 --> 01:47:27,600
action

2591
01:47:27,600 --> 01:47:29,280
Colin

2592
01:47:29,280 --> 01:47:30,420
so I

2593
01:47:30,420 --> 01:47:32,219
I uh notwithstanding status comment

2594
01:47:32,219 --> 01:47:34,800
which is great I I do uh come sort of

2595
01:47:34,800 --> 01:47:36,900
towards back to a because I'm thinking

2596
01:47:36,900 --> 01:47:38,760
about the use cases where we use this

2597
01:47:38,760 --> 01:47:40,260
and usually what you want to do when

2598
01:47:40,260 --> 01:47:42,239
you're doing this is cause ban it like

2599
01:47:42,239 --> 01:47:44,159
causes you you really decide you're

2600
01:47:44,159 --> 01:47:45,480
abandoning the whole thing everything

2601
01:47:45,480 --> 01:47:46,860
you previously sent you're trying to get

2602
01:47:46,860 --> 01:47:48,119
the bandwidth to stop as quickly as

2603
01:47:48,119 --> 01:47:51,179
possible so I think leaving and you

2604
01:47:51,179 --> 01:47:52,920
stuff that's already been sent you can't

2605
01:47:52,920 --> 01:47:55,139
cancel it's already in Flight right um

2606
01:47:55,139 --> 01:47:57,780
and with you know the basic model of RTP

2607
01:47:57,780 --> 01:47:59,340
is you're never guaranteed anything was

2608
01:47:59,340 --> 01:48:00,659
going to happen to get delivered anyway

2609
01:48:00,659 --> 01:48:02,760
so some packets didn't arrive it's just

2610
01:48:02,760 --> 01:48:05,100
like well within an RTP model I like I

2611
01:48:05,100 --> 01:48:07,679
think our I think what the the at the

2612
01:48:07,679 --> 01:48:09,719
must level in the draft is when this

2613
01:48:09,719 --> 01:48:11,520
happens you really don't know what will

2614
01:48:11,520 --> 01:48:13,020
happen of any of the stuff that was in

2615
01:48:13,020 --> 01:48:15,060
Flight it might get lost it might go it

2616
01:48:15,060 --> 01:48:17,100
might not like it like just don't make

2617
01:48:17,100 --> 01:48:19,020
any assumptions about it and then maybe

2618
01:48:19,020 --> 01:48:20,400
there should be perhaps some should

2619
01:48:20,400 --> 01:48:22,380
level things of something clever you can

2620
01:48:22,380 --> 01:48:24,840
do but I think the clever advice oh I

2621
01:48:24,840 --> 01:48:25,920
mean it's going to be hard to decide

2622
01:48:25,920 --> 01:48:27,420
what the policy is that you want like

2623
01:48:27,420 --> 01:48:29,460
what would be do the right thing even if

2624
01:48:29,460 --> 01:48:31,080
we had all the mechanisms to do it is

2625
01:48:31,080 --> 01:48:32,639
very hard to tell

2626
01:48:32,639 --> 01:48:34,199
and I I don't think this really matters

2627
01:48:34,199 --> 01:48:35,880
for the users of this so I I sort of

2628
01:48:35,880 --> 01:48:38,040
lean towards the the a like like let's

2629
01:48:38,040 --> 01:48:39,360
make this as simple as possible let's

2630
01:48:39,360 --> 01:48:40,860
get it done as fast as possible and

2631
01:48:40,860 --> 01:48:42,840
basically just say when you do this like

2632
01:48:42,840 --> 01:48:43,920
you don't have a lot of control over

2633
01:48:43,920 --> 01:48:46,260
what happens next right I mean the main

2634
01:48:46,260 --> 01:48:48,600
point is to to to cancel any kind of to

2635
01:48:48,600 --> 01:48:50,520
prevent any kind of retransmissions in

2636
01:48:50,520 --> 01:48:51,960
the end that that you that you're not

2637
01:48:51,960 --> 01:48:54,060
going to benefit from anyway yeah which

2638
01:48:54,060 --> 01:48:55,619
would in the end saves you some capacity

2639
01:48:55,619 --> 01:48:57,300
but you're right of the bets are off and

2640
01:48:57,300 --> 01:48:58,440
what what you're going to get and what

2641
01:48:58,440 --> 01:49:00,119
you're not going yeah all bets are off

2642
01:49:00,119 --> 01:49:02,280
and if you're if you have access to the

2643
01:49:02,280 --> 01:49:03,600
stack which you probably weren't at a

2644
01:49:03,600 --> 01:49:05,280
low level API you know the right thing

2645
01:49:05,280 --> 01:49:07,560
to do is to try and cancel as much as

2646
01:49:07,560 --> 01:49:09,119
possible as early as possible which is

2647
01:49:09,119 --> 01:49:10,260
probably the default implementation

2648
01:49:10,260 --> 01:49:12,500
anyway

2649
01:49:12,540 --> 01:49:12,780
thank you

2650
01:49:12,780 --> 01:49:14,900
[Music]

2651
01:49:14,900 --> 01:49:18,360
David schenazi is me again

2652
01:49:18,360 --> 01:49:19,739
um I realized that in my previous

2653
01:49:19,739 --> 01:49:22,199
comment I was being clever so for that I

2654
01:49:22,199 --> 01:49:24,179
apologize that's generally always a bad

2655
01:49:24,179 --> 01:49:25,679
idea

2656
01:49:25,679 --> 01:49:26,760
um

2657
01:49:26,760 --> 01:49:30,300
uh one Jonah made an interesting point

2658
01:49:30,300 --> 01:49:32,340
to me yesterday uh in a completely

2659
01:49:32,340 --> 01:49:34,440
different conversation that we kind of

2660
01:49:34,440 --> 01:49:36,179
made a mistake in quick in that we

2661
01:49:36,179 --> 01:49:39,420
called these things streams

2662
01:49:39,420 --> 01:49:42,320
we should have called them messages

2663
01:49:42,320 --> 01:49:46,380
the the the like the mental model that

2664
01:49:46,380 --> 01:49:49,080
we worked in in quick and you know as we

2665
01:49:49,080 --> 01:49:51,119
were designing it for its initial use

2666
01:49:51,119 --> 01:49:55,440
case of HTTP 3 was like their messages

2667
01:49:55,440 --> 01:49:58,260
like you're an HTTP request an HTTP

2668
01:49:58,260 --> 01:50:02,159
response and the the concept of stop

2669
01:50:02,159 --> 01:50:05,520
sending and reset is

2670
01:50:05,520 --> 01:50:08,420
you know actually this message this

2671
01:50:08,420 --> 01:50:11,699
Atomic unit of information I don't care

2672
01:50:11,699 --> 01:50:14,460
anymore or like I'm trying to send this

2673
01:50:14,460 --> 01:50:16,560
and like no forget it the whole thing is

2674
01:50:16,560 --> 01:50:17,520
done

2675
01:50:17,520 --> 01:50:20,159
so

2676
01:50:20,159 --> 01:50:23,159
I you know option b sounds like a much

2677
01:50:23,159 --> 01:50:25,920
better fit to quick like have one Media

2678
01:50:25,920 --> 01:50:28,860
frame a per unidirectional stream

2679
01:50:28,860 --> 01:50:30,300
I don't think you're getting many

2680
01:50:30,300 --> 01:50:32,940
benefits from putting two on the same

2681
01:50:32,940 --> 01:50:35,580
stream like just have them be separate

2682
01:50:35,580 --> 01:50:36,840
you'll make your life a lot easier

2683
01:50:36,840 --> 01:50:38,159
because you'll fit into the quick model

2684
01:50:38,159 --> 01:50:40,440
better

2685
01:50:40,440 --> 01:50:42,179
I'd be certainly happy with that as well

2686
01:50:42,179 --> 01:50:44,580
we had it before in the in the draft and

2687
01:50:44,580 --> 01:50:46,199
then some discussion uh arose whether

2688
01:50:46,199 --> 01:50:48,719
that might be a useful alternative to

2689
01:50:48,719 --> 01:50:50,940
have to allow for more but maybe option

2690
01:50:50,940 --> 01:50:53,159
b is indeed the right thing because it

2691
01:50:53,159 --> 01:50:55,560
keeps it preserves semantic you

2692
01:50:55,560 --> 01:50:58,500
Unity at the same time with the length

2693
01:50:58,500 --> 01:51:00,300
Fields allowing for things to be

2694
01:51:00,300 --> 01:51:02,580
pre-tropped in case you need to forward

2695
01:51:02,580 --> 01:51:04,199
them that doesn't preclude the whole

2696
01:51:04,199 --> 01:51:05,820
thing to come in multiple pieces even

2697
01:51:05,820 --> 01:51:07,860
though it's just one unit so that would

2698
01:51:07,860 --> 01:51:12,119
seem to be the a sensible solution here

2699
01:51:12,119 --> 01:51:16,639
seeing some thumbs up even from Colin

2700
01:51:17,580 --> 01:51:20,659
all right um

2701
01:51:21,000 --> 01:51:23,159
I was just going to say

2702
01:51:23,159 --> 01:51:24,780
um yeah

2703
01:51:24,780 --> 01:51:27,300
um that in some ways the sort of

2704
01:51:27,300 --> 01:51:29,820
uh putting it over streams is a bit like

2705
01:51:29,820 --> 01:51:31,020
kind of running

2706
01:51:31,020 --> 01:51:31,679
um

2707
01:51:31,679 --> 01:51:34,860
uh conferencing stuff over TCP in in

2708
01:51:34,860 --> 01:51:36,480
some sense in like you're kind of uh

2709
01:51:36,480 --> 01:51:40,139
reliable to really the you want to be um

2710
01:51:40,139 --> 01:51:42,960
aiming for the UDP the datagram solution

2711
01:51:42,960 --> 01:51:45,119
within quick in that that's probably

2712
01:51:45,119 --> 01:51:48,060
gives you a a better match kind of

2713
01:51:48,060 --> 01:51:49,980
closer match to the original

2714
01:51:49,980 --> 01:51:51,420
um RTP

2715
01:51:51,420 --> 01:51:55,199
type distribution so in some senses that

2716
01:51:55,199 --> 01:51:57,600
sort of I guess this is just like a if

2717
01:51:57,600 --> 01:51:59,940
you can't do the datagrams approach then

2718
01:51:59,940 --> 01:52:03,000
you go for the streams

2719
01:52:03,000 --> 01:52:04,619
um and so presumably the diagrams

2720
01:52:04,619 --> 01:52:07,320
approach give you a better approach

2721
01:52:07,320 --> 01:52:09,900
mapping anyway in terms of the original

2722
01:52:09,900 --> 01:52:11,880
um RTP semantics and that you don't

2723
01:52:11,880 --> 01:52:13,800
necessarily end up

2724
01:52:13,800 --> 01:52:15,659
with some junk being sent that you don't

2725
01:52:15,659 --> 01:52:17,900
want

2726
01:52:18,000 --> 01:52:20,719
if that makes

2727
01:52:22,020 --> 01:52:26,040
I'm not sure I fully got that okay all

2728
01:52:26,040 --> 01:52:27,420
I'm saying is that in some sense it's

2729
01:52:27,420 --> 01:52:30,179
sending it over the streams is you'd be

2730
01:52:30,179 --> 01:52:33,480
preferable to be sending over datagrams

2731
01:52:33,480 --> 01:52:36,000
the quick datagrams

2732
01:52:36,000 --> 01:52:39,860
because you wouldn't get this problem

2733
01:52:40,560 --> 01:52:42,420
right that is true but people have been

2734
01:52:42,420 --> 01:52:45,000
uh had had some interest in doing

2735
01:52:45,000 --> 01:52:46,560
streams that there may be sense in

2736
01:52:46,560 --> 01:52:49,440
having some things reliable because they

2737
01:52:49,440 --> 01:52:52,920
are iframes or something like that so

2738
01:52:52,920 --> 01:52:55,139
that's why this is here or what we'll

2739
01:52:55,139 --> 01:52:56,940
have to dig a bit more about the through

2740
01:52:56,940 --> 01:52:58,380
the through the technical details of

2741
01:52:58,380 --> 01:53:00,300
when to when to use what and how these

2742
01:53:00,300 --> 01:53:04,380
things fit together but that's um and

2743
01:53:04,380 --> 01:53:06,000
datagrams are optional and quick to

2744
01:53:06,000 --> 01:53:08,880
begin with yeah so people have been

2745
01:53:08,880 --> 01:53:10,980
using streams happily for many for many

2746
01:53:10,980 --> 01:53:13,260
uh in many applications so if it felt

2747
01:53:13,260 --> 01:53:16,500
wrong uh to to preclude this plus there

2748
01:53:16,500 --> 01:53:18,239
was also an explicit desire from the

2749
01:53:18,239 --> 01:53:19,679
working group to actually have that

2750
01:53:19,679 --> 01:53:21,900
included and also including it I just

2751
01:53:21,900 --> 01:53:23,280
sort of saying in some sense it's just a

2752
01:53:23,280 --> 01:53:26,280
sort of like of course it creates for

2753
01:53:26,280 --> 01:53:28,139
houses I think now with BB may have a

2754
01:53:28,139 --> 01:53:30,060
sensible option or a sensible course of

2755
01:53:30,060 --> 01:53:31,619
action of dealing with that

2756
01:53:31,619 --> 01:53:34,920
fine so I don't dare to ask this the

2757
01:53:34,920 --> 01:53:36,420
question on the next slide if I want to

2758
01:53:36,420 --> 01:53:37,980
give Spencer at least five minutes for

2759
01:53:37,980 --> 01:53:40,199
STP

2760
01:53:40,199 --> 01:53:43,560
um Magnus oh not even getting there yeah

2761
01:53:43,560 --> 01:53:45,780
you're not getting there

2762
01:53:45,780 --> 01:53:47,520
um

2763
01:53:47,520 --> 01:53:49,980
I I think there's need to be some

2764
01:53:49,980 --> 01:53:52,800
Analyze This is what actually puts like

2765
01:53:52,800 --> 01:53:57,000
limitation of session link length

2766
01:53:57,000 --> 01:53:59,420
with B if you're gonna go for it

2767
01:53:59,420 --> 01:54:03,060
estimate I mean yes it's probably you

2768
01:54:03,060 --> 01:54:05,040
should do skill bit layers are different

2769
01:54:05,040 --> 01:54:06,480
videos Maybe

2770
01:54:06,480 --> 01:54:09,239
so you're one per sampling whatever

2771
01:54:09,239 --> 01:54:11,760
times a few times okay it's fairly long

2772
01:54:11,760 --> 01:54:13,800
but it's not infinite

2773
01:54:13,800 --> 01:54:17,340
so I think some analysis of that Etc was

2774
01:54:17,340 --> 01:54:19,080
it actually implies in being clear that

2775
01:54:19,080 --> 01:54:21,540
this actually limits session length

2776
01:54:21,540 --> 01:54:23,580
compared to normal RPP

2777
01:54:23,580 --> 01:54:24,900
which I don't think have the same

2778
01:54:24,900 --> 01:54:27,420
limitations of any kind of hard stop

2779
01:54:27,420 --> 01:54:31,460
because this has a hard stop

2780
01:54:31,560 --> 01:54:33,420
you're running at the streams then you

2781
01:54:33,420 --> 01:54:35,760
must restart a quick connection you have

2782
01:54:35,760 --> 01:54:38,719
no other choice When You Reach stream

2783
01:54:38,719 --> 01:54:42,179
identifications up to two up to 62.

2784
01:54:42,179 --> 01:54:44,280
so yeah

2785
01:54:44,280 --> 01:54:47,280
yeah

2786
01:54:53,840 --> 01:54:56,400
longer than they'll be alive you could

2787
01:54:56,400 --> 01:54:57,780
you could always establish a second

2788
01:54:57,780 --> 01:54:59,520
stream quick connection well the first

2789
01:54:59,520 --> 01:55:02,100
one is still ongoing and then migrate

2790
01:55:02,100 --> 01:55:03,719
over so I think I think that's that

2791
01:55:03,719 --> 01:55:05,040
that's a problem that we can safely

2792
01:55:05,040 --> 01:55:07,880
leave out

2793
01:55:08,340 --> 01:55:11,219
okay quickly quickly next slide

2794
01:55:11,219 --> 01:55:12,960
um so we're not going to get through

2795
01:55:12,960 --> 01:55:14,880
this now but the fundamental things we

2796
01:55:14,880 --> 01:55:17,040
have been discussing what scope this

2797
01:55:17,040 --> 01:55:18,300
draft should be having in terms of

2798
01:55:18,300 --> 01:55:19,699
multiplexing

2799
01:55:19,699 --> 01:55:23,520
and um we were advised that depending on

2800
01:55:23,520 --> 01:55:25,619
which kind of different transport

2801
01:55:25,619 --> 01:55:26,940
streams one would use one would one

2802
01:55:26,940 --> 01:55:29,040
would need to have different

2803
01:55:29,040 --> 01:55:31,619
alpns one thought was that we just

2804
01:55:31,619 --> 01:55:34,440
defined this for RTP over quick only and

2805
01:55:34,440 --> 01:55:36,360
don't allow other media types in so that

2806
01:55:36,360 --> 01:55:38,100
there is no question on

2807
01:55:38,100 --> 01:55:40,260
uh with which congestion control to use

2808
01:55:40,260 --> 01:55:42,300
how to prioritize different streams and

2809
01:55:42,300 --> 01:55:44,699
packets across each other but then there

2810
01:55:44,699 --> 01:55:46,199
was also some discussion on whether one

2811
01:55:46,199 --> 01:55:47,639
should have different multiplexing

2812
01:55:47,639 --> 01:55:48,780
schemes and one interesting question

2813
01:55:48,780 --> 01:55:51,659
that arises from all of this is

2814
01:55:51,659 --> 01:55:53,760
um how one would

2815
01:55:53,760 --> 01:55:55,800
uh cope with this problem with this

2816
01:55:55,800 --> 01:55:57,900
multiplexing

2817
01:55:57,900 --> 01:56:00,659
um now we have been and how to

2818
01:56:00,659 --> 01:56:02,699
demultiplex on the receiver side and who

2819
01:56:02,699 --> 01:56:04,440
is going to define the framing or the

2820
01:56:04,440 --> 01:56:06,480
identification of different

2821
01:56:06,480 --> 01:56:08,040
logical

2822
01:56:08,040 --> 01:56:10,920
streams or flows inside for example

2823
01:56:10,920 --> 01:56:13,199
quick datagrams or inside quick streams

2824
01:56:13,199 --> 01:56:15,780
and and how that would happen assuming

2825
01:56:15,780 --> 01:56:16,739
that you might have different

2826
01:56:16,739 --> 01:56:18,239
applications that will be mapping things

2827
01:56:18,239 --> 01:56:20,580
to Quick data diagrams uh between the

2828
01:56:20,580 --> 01:56:23,880
same two endpoints and it was we

2829
01:56:23,880 --> 01:56:25,800
originally proposed a session identifier

2830
01:56:25,800 --> 01:56:28,679
we discussed a bit whether the usual UDP

2831
01:56:28,679 --> 01:56:30,719
based multiplexing could be used but

2832
01:56:30,719 --> 01:56:32,400
none of this seem to be

2833
01:56:32,400 --> 01:56:34,500
uh fully satisfactory so we have been

2834
01:56:34,500 --> 01:56:36,060
doing some thought experiments I'm not

2835
01:56:36,060 --> 01:56:38,340
going to the next slide now we have been

2836
01:56:38,340 --> 01:56:39,659
doing some thought experiments where the

2837
01:56:39,659 --> 01:56:42,119
web transport could be a suitable uh

2838
01:56:42,119 --> 01:56:44,820
alternative as as a multiplexing scheme

2839
01:56:44,820 --> 01:56:46,739
but that seems to have other limitations

2840
01:56:46,739 --> 01:56:48,600
uh

2841
01:56:48,600 --> 01:56:51,119
into which I don't want to go in in the

2842
01:56:51,119 --> 01:56:53,639
interest of time right now but maybe

2843
01:56:53,639 --> 01:56:55,980
rather Reach Out offline to some of the

2844
01:56:55,980 --> 01:56:59,880
uh web uh web transport Forks to find

2845
01:56:59,880 --> 01:57:03,560
out what these implications would be

2846
01:57:04,920 --> 01:57:07,679
skip the next slide

2847
01:57:07,679 --> 01:57:11,400
that just takes us too long

2848
01:57:11,400 --> 01:57:12,420
um

2849
01:57:12,420 --> 01:57:14,159
in the meantime I updated the first

2850
01:57:14,159 --> 01:57:17,219
bullet on this side on this slide for

2851
01:57:17,219 --> 01:57:18,659
um that we probably just document

2852
01:57:18,659 --> 01:57:21,360
something for S frame for for the MTU

2853
01:57:21,360 --> 01:57:23,219
size issues we are looking at further

2854
01:57:23,219 --> 01:57:25,440
topology considerations and then next

2855
01:57:25,440 --> 01:57:28,080
slide to conclude

2856
01:57:28,080 --> 01:57:29,820
um

2857
01:57:29,820 --> 01:57:31,679
we need to think more about multiplexing

2858
01:57:31,679 --> 01:57:34,199
as I just said we have had some comments

2859
01:57:34,199 --> 01:57:35,880
that we need to be more precise in some

2860
01:57:35,880 --> 01:57:37,920
places which we are working on and then

2861
01:57:37,920 --> 01:57:40,139
we have the usual last concluding bullet

2862
01:57:40,139 --> 01:57:42,840
working mobile Spencer on STP signaling

2863
01:57:42,840 --> 01:57:45,000
and Etc

2864
01:57:45,000 --> 01:57:46,560
perfect

2865
01:57:46,560 --> 01:57:48,000
all right

2866
01:57:48,000 --> 01:57:51,060
um I sorry Spencer I'm afraid we

2867
01:57:51,060 --> 01:57:52,980
the other stuff I mean you want you want

2868
01:57:52,980 --> 01:57:56,419
to try to talk in three minutes

2869
01:57:57,239 --> 01:58:00,060
thanks much for the feedback

2870
01:58:00,060 --> 01:58:02,219
uh thank you for that opportunity and I

2871
01:58:02,219 --> 01:58:03,659
will uh

2872
01:58:03,659 --> 01:58:05,639
probably take two

2873
01:58:05,639 --> 01:58:09,239
um if I if I could uh execute a move

2874
01:58:09,239 --> 01:58:12,000
next slide next slide

2875
01:58:12,000 --> 01:58:13,380
this

2876
01:58:13,380 --> 01:58:15,480
uh so this is what I was talking about

2877
01:58:15,480 --> 01:58:18,480
with uh making sure that I understood

2878
01:58:18,480 --> 01:58:22,739
what the scope of the uh RTP over quick

2879
01:58:22,739 --> 01:58:27,679
draft was uh figuring out what a uh AVP

2880
01:58:27,679 --> 01:58:30,060
profiles to register has been easy

2881
01:58:30,060 --> 01:58:33,300
because every time I decided what we

2882
01:58:33,300 --> 01:58:34,920
were going to register somebody else

2883
01:58:34,920 --> 01:58:38,659
made another suggestion so

2884
01:58:38,659 --> 01:58:41,940
I had the starting the the starting

2885
01:58:41,940 --> 01:58:45,239
proposal was mine the top line then we

2886
01:58:45,239 --> 01:58:50,099
moved to just doing ABP avpf then we

2887
01:58:50,099 --> 01:58:52,980
said oh good I think several of us

2888
01:58:52,980 --> 01:58:54,659
figure this out at the same time oh we

2889
01:58:54,659 --> 01:58:58,619
need to prepend uh UDP to that then we

2890
01:58:58,619 --> 01:59:00,360
said oh we're going to do we need to do

2891
01:59:00,360 --> 01:59:05,699
stream dgram and shared uh and then uh

2892
01:59:05,699 --> 01:59:08,820
most recently had the conversation a

2893
01:59:08,820 --> 01:59:13,080
little bit on the uh on the uh mailing

2894
01:59:13,080 --> 01:59:15,599
list about uh whether we needed to

2895
01:59:15,599 --> 01:59:22,679
Define TCP quick RTP avpf to allow

2896
01:59:22,679 --> 01:59:24,860
TCP ice path

2897
01:59:24,860 --> 01:59:27,239
so this is basically if I do my ice

2898
01:59:27,239 --> 01:59:29,820
lookups can I you know and I don't get

2899
01:59:29,820 --> 01:59:31,739
anything back for quick but I do get

2900
01:59:31,739 --> 01:59:34,080
something back for TCP can I use that

2901
01:59:34,080 --> 01:59:36,619
and that was the uh

2902
01:59:36,619 --> 01:59:39,119
that was the question you know I had two

2903
01:59:39,119 --> 01:59:41,400
questions for the group which are better

2904
01:59:41,400 --> 01:59:43,080
on the mailing list anyway do people

2905
01:59:43,080 --> 01:59:45,239
understand that last one and do people

2906
01:59:45,239 --> 01:59:47,460
agree this is why I would like to adopt

2907
01:59:47,460 --> 01:59:49,320
this draft so that we can make some

2908
01:59:49,320 --> 01:59:51,840
consistence calls and nail down the

2909
01:59:51,840 --> 01:59:54,900
scope and a few things like that if you

2910
01:59:54,900 --> 01:59:58,500
show the next slide it will be fun

2911
01:59:58,500 --> 02:00:00,300
um because we're also talking about

2912
02:00:00,300 --> 02:00:03,840
quick doing quick congestion control uh

2913
02:00:03,840 --> 02:00:06,000
we think we figured out how to do this

2914
02:00:06,000 --> 02:00:08,099
and uh

2915
02:00:08,099 --> 02:00:12,119
we you know if I we need to figure out

2916
02:00:12,119 --> 02:00:15,119
how much RTP information we're going to

2917
02:00:15,119 --> 02:00:16,679
be able to replace with quick

2918
02:00:16,679 --> 02:00:18,780
information and not that'll mean

2919
02:00:18,780 --> 02:00:21,599
theoretically I mean in practice uh and

2920
02:00:21,599 --> 02:00:23,719
that Loops back around to what AVP

2921
02:00:23,719 --> 02:00:26,820
profiles to register uh this this

2922
02:00:26,820 --> 02:00:29,099
concludes my abbreviated Ted talk thank

2923
02:00:29,099 --> 02:00:31,139
you for coming and I will see you all at

2924
02:00:31,139 --> 02:00:33,619
the interim

2925
02:00:33,719 --> 02:00:36,320
oh

2926
02:00:37,619 --> 02:00:39,599
I I was going to say that this just

2927
02:00:39,599 --> 02:00:41,400
looks like like that's the leap like I

2928
02:00:41,400 --> 02:00:42,599
think there's a ton of things that we

2929
02:00:42,599 --> 02:00:43,739
need to hit here like like how you

2930
02:00:43,739 --> 02:00:45,780
identify the flow IDs in the STP that

2931
02:00:45,780 --> 02:00:47,099
are presumably going to be used and how

2932
02:00:47,099 --> 02:00:48,300
you end the negotiation of which

2933
02:00:48,300 --> 02:00:49,679
congestion control you I mean like it

2934
02:00:49,679 --> 02:00:52,380
seems like when I go and read the RTP

2935
02:00:52,380 --> 02:00:54,840
over quick draft a ton of the thing that

2936
02:00:54,840 --> 02:00:57,119
clear like like most of the things that

2937
02:00:57,119 --> 02:00:58,619
you would need to negotiate to make that

2938
02:00:58,619 --> 02:01:00,420
draft work are we don't have a way to do

2939
02:01:00,420 --> 02:01:02,639
in this at all yet so I I think this is

2940
02:01:02,639 --> 02:01:05,040
barely started that we should

2941
02:01:05,040 --> 02:01:07,020
I think I don't know how we're going to

2942
02:01:07,020 --> 02:01:09,480
move forward on this but it's it this is

2943
02:01:09,480 --> 02:01:11,820
this is not at all ready to sort of

2944
02:01:11,820 --> 02:01:13,619
adopt quite yet I mean it's missing most

2945
02:01:13,619 --> 02:01:15,360
of what we need here so we need to get a

2946
02:01:15,360 --> 02:01:16,800
bunch of those in and I apologize for

2947
02:01:16,800 --> 02:01:18,360
not having sent comments on the list I

2948
02:01:18,360 --> 02:01:20,280
will try and send stuff but yeah yeah

2949
02:01:20,280 --> 02:01:23,219
yeah yeah yeah yeah but but fair I I

2950
02:01:23,219 --> 02:01:24,719
just think it's I show this in the

2951
02:01:24,719 --> 02:01:26,460
comments but there's a ton of stuff here

2952
02:01:26,460 --> 02:01:27,780
we need to

2953
02:01:27,780 --> 02:01:30,000
figure out how to do and the the which

2954
02:01:30,000 --> 02:01:31,739
what the string is at the top is like

2955
02:01:31,739 --> 02:01:33,480
yes that will be a bike shed discussion

2956
02:01:33,480 --> 02:01:35,520
but it's the least of the issues yeah

2957
02:01:35,520 --> 02:01:38,760
and we'll end I had more slides in the

2958
02:01:38,760 --> 02:01:41,880
presentation so I'm aware that there's

2959
02:01:41,880 --> 02:01:44,840
more than one thing today

2960
02:01:45,719 --> 02:01:47,699
so all right

2961
02:01:47,699 --> 02:01:50,159
so that's the last slide in uh started

2962
02:01:50,159 --> 02:01:52,820
out with requesting uh that the chairs

2963
02:01:52,820 --> 02:01:56,580
uh considered a call for adoption and

2964
02:01:56,580 --> 02:02:01,580
now okay uh

2965
02:02:03,540 --> 02:02:04,980
all right so it sounds like you're not

2966
02:02:04,980 --> 02:02:06,659
actually in fast production yet are you

2967
02:02:06,659 --> 02:02:09,420
still have some good options

2968
02:02:09,420 --> 02:02:11,420
because we make

2969
02:02:11,420 --> 02:02:14,099
I am requesting adoption I'm requesting

2970
02:02:14,099 --> 02:02:16,980
that you all do a call for adoption

2971
02:02:16,980 --> 02:02:19,679
that would that would be Focus thank you

2972
02:02:19,679 --> 02:02:21,900
Colin Colin apparently colonists thinks

2973
02:02:21,900 --> 02:02:23,880
we're not ready yet so I I guess I don't

2974
02:02:23,880 --> 02:02:25,199
know if I said that or not I forget but

2975
02:02:25,199 --> 02:02:26,820
I don't think it's ready yet is my

2976
02:02:26,820 --> 02:02:29,159
personal opinion but do it okay all

2977
02:02:29,159 --> 02:02:30,780
right um I guess uh Bernard and I will

2978
02:02:30,780 --> 02:02:33,360
talk about that or sadly we did not have

2979
02:02:33,360 --> 02:02:35,159
enough time to talk about this so

2980
02:02:35,159 --> 02:02:37,199
uh I apologize for that I should have

2981
02:02:37,199 --> 02:02:38,400
kept more control over the previous

2982
02:02:38,400 --> 02:02:41,460
conversation and but uh we will

2983
02:02:41,460 --> 02:02:43,260
follow up on the list and we will have

2984
02:02:43,260 --> 02:02:46,380
an interim and possibly also a site a

2985
02:02:46,380 --> 02:02:49,440
virtual side meeting about aspirin which

2986
02:02:49,440 --> 02:02:52,519
we'll also announce on the list

2987
02:02:52,739 --> 02:02:57,119
uh and thank you all for coming and uh

2988
02:02:57,119 --> 02:03:00,320
see you around the meeting

2989
02:03:16,440 --> 02:03:18,440
um

