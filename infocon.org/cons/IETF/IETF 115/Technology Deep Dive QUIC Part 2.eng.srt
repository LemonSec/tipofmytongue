1
00:00:04,500 --> 00:00:07,279
foreign

2
00:00:19,100 --> 00:00:22,320
deck has been shared

3
00:00:22,320 --> 00:00:24,359
error

4
00:00:24,359 --> 00:00:26,279
are you doing that yeah yeah can you

5
00:00:26,279 --> 00:00:31,220
refresh yes as soon as they're uploaded

6
00:00:35,760 --> 00:00:38,219
good morning everyone

7
00:00:38,219 --> 00:00:39,719
one of them

8
00:00:39,719 --> 00:00:42,719
everyone

9
00:00:45,239 --> 00:00:47,700
it may be morning but for those who are

10
00:00:47,700 --> 00:00:49,500
still jet lagged be true word is

11
00:00:49,500 --> 00:00:52,140
everyone we're just making sure that the

12
00:00:52,140 --> 00:00:54,120
slides are perfectly fresh they're hot

13
00:00:54,120 --> 00:00:56,718
off the front

14
00:01:03,359 --> 00:01:07,320
so it is now Tuesday morning so many of

15
00:01:07,320 --> 00:01:10,260
you have probably seen the note well if

16
00:01:10,260 --> 00:01:12,420
this is a surprise to you

17
00:01:12,420 --> 00:01:14,700
please do go have a look at this wall of

18
00:01:14,700 --> 00:01:16,439
text by downloading it from the data

19
00:01:16,439 --> 00:01:19,799
tracker make sure you understand it

20
00:01:19,799 --> 00:01:21,840
um any uh so we didn't really have any

21
00:01:21,840 --> 00:01:24,780
participation with the mic yesterday uh

22
00:01:24,780 --> 00:01:26,159
today

23
00:01:26,159 --> 00:01:28,140
the reason that we are all here at 7 30

24
00:01:28,140 --> 00:01:30,119
in the morning thank you all for coming

25
00:01:30,119 --> 00:01:32,520
so early is we're gonna have a panel

26
00:01:32,520 --> 00:01:34,200
discussion after this anything said in

27
00:01:34,200 --> 00:01:35,939
the panel discussion is a contribution

28
00:01:35,939 --> 00:01:38,040
to the IDF and therefore covered by the

29
00:01:38,040 --> 00:01:40,400
Noel

30
00:01:42,060 --> 00:01:43,680
so

31
00:01:43,680 --> 00:01:45,420
um so we run of yesterday morning slides

32
00:01:45,420 --> 00:01:46,860
for those of you who are here it's still

33
00:01:46,860 --> 00:01:48,720
great to see you all in person

34
00:01:48,720 --> 00:01:50,820
thank you especially much for waking up

35
00:01:50,820 --> 00:01:54,420
so early uh to be with us today 7 30.

36
00:01:54,420 --> 00:01:57,420
and you know if you're watching us on

37
00:01:57,420 --> 00:01:59,820
YouTube later we love you too

38
00:01:59,820 --> 00:02:03,600
so today's agenda yesterday uh recap of

39
00:02:03,600 --> 00:02:05,880
basically a

40
00:02:05,880 --> 00:02:07,619
um extremely informative and very

41
00:02:07,619 --> 00:02:09,660
enlightening I learned stuff which I was

42
00:02:09,660 --> 00:02:11,700
honestly not expecting to do

43
00:02:11,700 --> 00:02:12,980
um

44
00:02:12,980 --> 00:02:15,420
uh presentation sort of introducing

45
00:02:15,420 --> 00:02:19,319
quick uh and you know why it is and what

46
00:02:19,319 --> 00:02:22,020
it is and how it is

47
00:02:22,020 --> 00:02:24,780
uh and today we're gonna dig a little

48
00:02:24,780 --> 00:02:28,620
bit more uh into into specific aspects

49
00:02:28,620 --> 00:02:32,760
um of this so uh Ian

50
00:02:32,760 --> 00:02:36,980
uh with some help from Martin uh I guess

51
00:02:38,099 --> 00:02:39,900
um

52
00:02:39,900 --> 00:02:41,819
moral support for Martin

53
00:02:41,819 --> 00:02:44,099
um and slides for Martin we'll be

54
00:02:44,099 --> 00:02:45,480
talking about uh some experience with

55
00:02:45,480 --> 00:02:47,400
deploying quick at scale

56
00:02:47,400 --> 00:02:51,900
uh and then Lucas who I don't see here

57
00:02:51,900 --> 00:02:54,239
but he had to commute in um so he'll be

58
00:02:54,239 --> 00:02:56,519
here in a bit uh we'll be talking about

59
00:02:56,519 --> 00:03:00,000
applying observing and debugging quick

60
00:03:00,000 --> 00:03:01,440
and then after that we're going to have

61
00:03:01,440 --> 00:03:04,019
all of our speakers come up uh for a

62
00:03:04,019 --> 00:03:06,660
panel discussion slash q a that is the

63
00:03:06,660 --> 00:03:08,459
audience participation part so you know

64
00:03:08,459 --> 00:03:10,739
those of you who are still waking up you

65
00:03:10,739 --> 00:03:13,440
have either an hour to find your notes

66
00:03:13,440 --> 00:03:15,239
from Monday's session to figure out what

67
00:03:15,239 --> 00:03:16,560
you'd like to ask

68
00:03:16,560 --> 00:03:18,420
uh or

69
00:03:18,420 --> 00:03:19,800
um you know start thinking of your

70
00:03:19,800 --> 00:03:21,720
questions now and think of them as

71
00:03:21,720 --> 00:03:23,459
things go on

72
00:03:23,459 --> 00:03:24,720
um

73
00:03:24,720 --> 00:03:27,000
so with that

74
00:03:27,000 --> 00:03:28,860
we will

75
00:03:28,860 --> 00:03:32,099
reload the slides

76
00:03:32,099 --> 00:03:34,640
hmm

77
00:03:34,640 --> 00:03:38,179
reload the slides

78
00:03:39,480 --> 00:03:41,459
with that Ian is going to start telling

79
00:03:41,459 --> 00:03:47,299
you some jokes well we know slides hmm

80
00:03:47,480 --> 00:03:49,019
uh

81
00:03:49,019 --> 00:03:50,879
it's 7 30 in the morning you're at an

82
00:03:50,879 --> 00:03:53,220
ITF meeting and we're at College improv

83
00:03:53,220 --> 00:03:55,819
have fun everyone

84
00:03:55,920 --> 00:03:57,299
trying to think of my best quick

85
00:03:57,299 --> 00:04:00,360
stand-up jokes hmm

86
00:04:00,360 --> 00:04:02,220
I don't know

87
00:04:02,220 --> 00:04:05,180
oh no that's nothing

88
00:04:05,180 --> 00:04:08,420
too soon

89
00:04:08,819 --> 00:04:11,480
uh

90
00:04:11,640 --> 00:04:14,480
I don't see him

91
00:04:16,199 --> 00:04:17,699
are they still not there they're still

92
00:04:17,699 --> 00:04:19,978
not there okay you can do yeah you want

93
00:04:19,978 --> 00:04:21,540
to do you want to do Lucas and slides

94
00:04:21,540 --> 00:04:23,820
what you can do Lucas's slides in in

95
00:04:23,820 --> 00:04:25,860
quick I mean I can I can start talking

96
00:04:25,860 --> 00:04:27,720
through some of it yeah um that's fine

97
00:04:27,720 --> 00:04:29,940
okay so we're going to start with load

98
00:04:29,940 --> 00:04:31,860
balancing or the quick LB draft uh a

99
00:04:31,860 --> 00:04:33,060
number of you who are involved in the

100
00:04:33,060 --> 00:04:34,800
quick working group or have been to the

101
00:04:34,800 --> 00:04:36,360
quick working group are probably fairly

102
00:04:36,360 --> 00:04:37,979
familiar with the quick uh load

103
00:04:37,979 --> 00:04:39,479
balancing draft

104
00:04:39,479 --> 00:04:40,979
um but we just wanted to go over it real

105
00:04:40,979 --> 00:04:42,300
quickly because we're actively in the

106
00:04:42,300 --> 00:04:45,419
process of uh deploying it at Google

107
00:04:45,419 --> 00:04:47,639
um and so specifically there are a

108
00:04:47,639 --> 00:04:48,960
number of things that it potentially

109
00:04:48,960 --> 00:04:50,759
could really help us with including

110
00:04:50,759 --> 00:04:53,160
linkability but one major issue is when

111
00:04:53,160 --> 00:04:55,259
you have any cast uh where you're using

112
00:04:55,259 --> 00:04:58,020
bgp to try to like do load balancing for

113
00:04:58,020 --> 00:04:59,759
a single IP potentially globally in our

114
00:04:59,759 --> 00:05:00,900
case

115
00:05:00,900 --> 00:05:02,280
um it's there are a number of

116
00:05:02,280 --> 00:05:04,020
complications so one complication is if

117
00:05:04,020 --> 00:05:05,340
you ever want to change the weights on

118
00:05:05,340 --> 00:05:07,440
bgp or anything about the bgp

119
00:05:07,440 --> 00:05:09,000
announcements of course a number of

120
00:05:09,000 --> 00:05:10,620
connections like start getting sent to

121
00:05:10,620 --> 00:05:12,000
the the wrong server at least without

122
00:05:12,000 --> 00:05:14,160
like a good bit of extra work

123
00:05:14,160 --> 00:05:16,500
um and that's particularly true

124
00:05:16,500 --> 00:05:18,000
um and you might combine with like a nap

125
00:05:18,000 --> 00:05:19,500
rebind or something and this makes this

126
00:05:19,500 --> 00:05:21,900
all like much much worse

127
00:05:21,900 --> 00:05:23,580
um another problem is also connection

128
00:05:23,580 --> 00:05:26,340
migration so typically when you migrate

129
00:05:26,340 --> 00:05:27,780
a connection when you think of like

130
00:05:27,780 --> 00:05:29,039
connection migration you're migrating

131
00:05:29,039 --> 00:05:30,840
say from like cell to Wi-Fi or vice

132
00:05:30,840 --> 00:05:32,759
versa um so it's fairly common you're

133
00:05:32,759 --> 00:05:34,199
actually going to land on a different as

134
00:05:34,199 --> 00:05:36,720
an entirely different network as a

135
00:05:36,720 --> 00:05:38,400
result it's fairly likely that you

136
00:05:38,400 --> 00:05:41,460
actually land on basically like an

137
00:05:41,460 --> 00:05:43,919
entirely different peering Point uh next

138
00:05:43,919 --> 00:05:46,099
slide

139
00:05:46,380 --> 00:05:47,699
I'll go back one moment just to go

140
00:05:47,699 --> 00:05:49,199
through so the identity load balancing

141
00:05:49,199 --> 00:05:50,520
and then we're going to talk a little

142
00:05:50,520 --> 00:05:52,759
bit about black hole or flow black coin

143
00:05:52,759 --> 00:05:55,560
uh a fun little story on an outage that

144
00:05:55,560 --> 00:05:58,919
we had uh just about a year ago and then

145
00:05:58,919 --> 00:06:01,380
like one slide on zero rtt and quick and

146
00:06:01,380 --> 00:06:03,600
why it's hard as well as some

147
00:06:03,600 --> 00:06:05,340
information that you can go look at more

148
00:06:05,340 --> 00:06:07,620
if you want to care uh so let's let's go

149
00:06:07,620 --> 00:06:09,600
next slide

150
00:06:09,600 --> 00:06:12,560
actually two more

151
00:06:13,380 --> 00:06:14,400
there

152
00:06:14,400 --> 00:06:16,259
so this is essentially the situation I

153
00:06:16,259 --> 00:06:17,220
was talking about where we have an

154
00:06:17,220 --> 00:06:19,199
anycast address

155
00:06:19,199 --> 00:06:22,319
we're using an L4 load balancer or in

156
00:06:22,319 --> 00:06:23,460
this case like a slightly more

157
00:06:23,460 --> 00:06:25,440
intelligent L4 load balancer that is

158
00:06:25,440 --> 00:06:27,720
quick aware and we're sending it to an

159
00:06:27,720 --> 00:06:29,400
L7 server of some sort whether it's

160
00:06:29,400 --> 00:06:31,620
application front end or another layer

161
00:06:31,620 --> 00:06:33,240
of load balancers or another layer of

162
00:06:33,240 --> 00:06:34,680
load balances

163
00:06:34,680 --> 00:06:35,280
um

164
00:06:35,280 --> 00:06:37,560
and so again if you have flapping or

165
00:06:37,560 --> 00:06:40,800
anything else next slide

166
00:06:40,800 --> 00:06:42,660
or connection migration it's fairly

167
00:06:42,660 --> 00:06:44,160
likely you will end up on another load

168
00:06:44,160 --> 00:06:45,660
balancer

169
00:06:45,660 --> 00:06:48,000
so but yes this is particularly true if

170
00:06:48,000 --> 00:06:49,380
you're migrating from cell to Wi-Fi

171
00:06:49,380 --> 00:06:51,660
you're potentially changing carriers and

172
00:06:51,660 --> 00:06:52,620
you're potentially hitting different

173
00:06:52,620 --> 00:06:54,000
viewing points

174
00:06:54,000 --> 00:06:55,380
um and so this means that even though

175
00:06:55,380 --> 00:06:57,539
connection migration is great it does

176
00:06:57,539 --> 00:06:59,220
not work nearly as well at least in our

177
00:06:59,220 --> 00:07:00,840
infrastructure for any cast as it does

178
00:07:00,840 --> 00:07:03,720
for unicast whereas you know basically

179
00:07:03,720 --> 00:07:06,300
an IP is tied to the very least a

180
00:07:06,300 --> 00:07:08,160
physical location in a fairly strong

181
00:07:08,160 --> 00:07:10,080
sense like a Metro

182
00:07:10,080 --> 00:07:11,880
um peering point or something smaller

183
00:07:11,880 --> 00:07:13,620
like that

184
00:07:13,620 --> 00:07:15,600
um so when you arrive at the second load

185
00:07:15,600 --> 00:07:17,280
balancer it's like is this a new flow I

186
00:07:17,280 --> 00:07:18,960
don't know what to do with this I'll

187
00:07:18,960 --> 00:07:20,759
load balance it like a new flow so it's

188
00:07:20,759 --> 00:07:23,340
like all the old information is lost we

189
00:07:23,340 --> 00:07:24,660
have a lot of servers the odds you hit

190
00:07:24,660 --> 00:07:26,940
the same server is basically zero and

191
00:07:26,940 --> 00:07:28,560
you know the whole thing that's

192
00:07:28,560 --> 00:07:30,000
um and you know and migration will fail

193
00:07:30,000 --> 00:07:31,800
uh so we'd really like this to work

194
00:07:31,800 --> 00:07:33,599
because we'd really like to move more

195
00:07:33,599 --> 00:07:35,460
traffic to anycast actually for a number

196
00:07:35,460 --> 00:07:36,780
of reasons

197
00:07:36,780 --> 00:07:38,520
um additionally it's like a very popular

198
00:07:38,520 --> 00:07:40,740
option for another number of customers

199
00:07:40,740 --> 00:07:44,400
so uh next slide

200
00:07:44,400 --> 00:07:46,500
that's one great reason to do quick lb

201
00:07:46,500 --> 00:07:48,720
and connection IDs but there's also kind

202
00:07:48,720 --> 00:07:51,660
of a discussion here oh next slide

203
00:07:51,660 --> 00:07:54,300
about linkability

204
00:07:54,300 --> 00:07:56,220
and

205
00:07:56,220 --> 00:07:59,340
there we go so

206
00:07:59,340 --> 00:08:01,020
yeah we got we got a fair amount of

207
00:08:01,020 --> 00:08:03,500
latency yeah

208
00:08:04,380 --> 00:08:06,479
perfect linkability is basically like

209
00:08:06,479 --> 00:08:09,060
anytime you have a single device

210
00:08:09,060 --> 00:08:10,979
connecting to a single machine and you

211
00:08:10,979 --> 00:08:12,960
can like track it the whole time you

212
00:08:12,960 --> 00:08:15,479
know if it if you have a single IP for

213
00:08:15,479 --> 00:08:17,099
example a single device like that's

214
00:08:17,099 --> 00:08:18,360
perfectly trackable right like it

215
00:08:18,360 --> 00:08:20,220
doesn't even matter if quick is involved

216
00:08:20,220 --> 00:08:21,479
or any other thing is involved like

217
00:08:21,479 --> 00:08:22,500
you're going to be able to track that

218
00:08:22,500 --> 00:08:23,879
connection

219
00:08:23,879 --> 00:08:25,319
um because there's you know there's only

220
00:08:25,319 --> 00:08:26,879
one connection to that IP in the entire

221
00:08:26,879 --> 00:08:27,960
world

222
00:08:27,960 --> 00:08:29,340
um so that's kind of the worst case

223
00:08:29,340 --> 00:08:31,259
scenario and you know so for

224
00:08:31,259 --> 00:08:33,240
but more typically what you have is kind

225
00:08:33,240 --> 00:08:35,640
of a good number of clients next slide

226
00:08:35,640 --> 00:08:38,339
connecting to quite a large number

227
00:08:38,339 --> 00:08:40,860
uh of servers and you know

228
00:08:40,860 --> 00:08:44,159
asymptotically this looks like perfect

229
00:08:44,159 --> 00:08:45,839
unlinkability

230
00:08:45,839 --> 00:08:47,399
um so anycast is actually helpful here

231
00:08:47,399 --> 00:08:49,320
in the sense that there's only one

232
00:08:49,320 --> 00:08:50,940
Global IP

233
00:08:50,940 --> 00:08:53,880
and so you have a lot of servers that

234
00:08:53,880 --> 00:08:56,040
kind of look like one server

235
00:08:56,040 --> 00:08:57,360
um and potentially you have something

236
00:08:57,360 --> 00:08:59,040
like you know a million clients or

237
00:08:59,040 --> 00:09:01,019
possibly even more connecting to that IP

238
00:09:01,019 --> 00:09:02,700
at any given point in time and you

239
00:09:02,700 --> 00:09:04,019
combine that with encrypted connection

240
00:09:04,019 --> 00:09:06,860
IDs from Quick lb and you start like

241
00:09:06,860 --> 00:09:10,260
approaching you know some real vision of

242
00:09:10,260 --> 00:09:13,019
unlinkability that's that's quite strong

243
00:09:13,019 --> 00:09:15,899
um you know it the word perfect is you

244
00:09:15,899 --> 00:09:17,940
know it is asymptotic but it becomes

245
00:09:17,940 --> 00:09:19,860
extraordinarily difficult as an

246
00:09:19,860 --> 00:09:21,600
adversary uh short of compromising the

247
00:09:21,600 --> 00:09:22,620
keys

248
00:09:22,620 --> 00:09:24,480
um so it becomes quite a compelling

249
00:09:24,480 --> 00:09:26,100
proposition from our privacy perspective

250
00:09:26,100 --> 00:09:28,200
as well as from a network infrastructure

251
00:09:28,200 --> 00:09:31,140
perspective and that's why we're we're

252
00:09:31,140 --> 00:09:32,580
deploying it

253
00:09:32,580 --> 00:09:34,920
um so hopefully uh

254
00:09:34,920 --> 00:09:37,080
you know probably q2ish q1ish next year

255
00:09:37,080 --> 00:09:39,300
if all things go well

256
00:09:39,300 --> 00:09:40,740
um

257
00:09:40,740 --> 00:09:42,600
and

258
00:09:42,600 --> 00:09:45,600
sorry

259
00:09:47,760 --> 00:09:48,380
okay

260
00:09:48,380 --> 00:09:50,700
does anyone is it was the quick lb

261
00:09:50,700 --> 00:09:52,680
section clear does anyone have any quick

262
00:09:52,680 --> 00:09:54,000
questions before we move on now that we

263
00:09:54,000 --> 00:09:57,320
have like two seconds

264
00:09:58,820 --> 00:10:01,680
oh yeah I have there's more of that to

265
00:10:01,680 --> 00:10:03,859
come

266
00:10:03,899 --> 00:10:06,360
but thank you

267
00:10:06,360 --> 00:10:09,240
sure I'm trying to do the X for sure oh

268
00:10:09,240 --> 00:10:10,920
sorry quick lb there's a draft called

269
00:10:10,920 --> 00:10:12,480
quick lb that kind of describes this

270
00:10:12,480 --> 00:10:14,459
proposed solution I

271
00:10:14,459 --> 00:10:15,540
um

272
00:10:15,540 --> 00:10:17,959
yeah

273
00:10:18,240 --> 00:10:20,060
as you can

274
00:10:20,060 --> 00:10:23,100
I will do the share instead

275
00:10:23,100 --> 00:10:25,019
there we go

276
00:10:25,019 --> 00:10:27,360
so apologies we had entertainment

277
00:10:27,360 --> 00:10:29,820
because Martin Duke in the front row is

278
00:10:29,820 --> 00:10:31,260
the expert and as well as author of

279
00:10:31,260 --> 00:10:32,459
quick lb

280
00:10:32,459 --> 00:10:34,260
um and so you know any any super

281
00:10:34,260 --> 00:10:36,180
detailed questions I will defer to him

282
00:10:36,180 --> 00:10:37,560
um and he will be on the panel with us

283
00:10:37,560 --> 00:10:39,420
so okay

284
00:10:39,420 --> 00:10:40,980
um there we go

285
00:10:40,980 --> 00:10:44,160
ah yay okay this is the thing I was

286
00:10:44,160 --> 00:10:47,700
alluding to the entire time uh so quick

287
00:10:47,700 --> 00:10:50,220
lb has a single connection ID format

288
00:10:50,220 --> 00:10:52,880
that begins with two bits for config ID

289
00:10:52,880 --> 00:10:56,820
so that allows like rotation of keys and

290
00:10:56,820 --> 00:10:58,440
some other things

291
00:10:58,440 --> 00:11:00,480
um it has what is called a server ID

292
00:11:00,480 --> 00:11:03,180
portion and a nonce portion

293
00:11:03,180 --> 00:11:05,279
um and the you know the typical approach

294
00:11:05,279 --> 00:11:07,860
is that uh it didn't list at least in

295
00:11:07,860 --> 00:11:08,880
the encrypted version which is what

296
00:11:08,880 --> 00:11:10,200
we're looking to deploy that this is

297
00:11:10,200 --> 00:11:12,000
basically like all encrypted

298
00:11:12,000 --> 00:11:13,500
um and this is all you know except for

299
00:11:13,500 --> 00:11:16,200
the few bits and the the length this is

300
00:11:16,200 --> 00:11:17,880
all essentially opaque bytes did any

301
00:11:17,880 --> 00:11:19,980
passive Observer

302
00:11:19,980 --> 00:11:20,760
um

303
00:11:20,760 --> 00:11:22,560
yeah but the technically the draft

304
00:11:22,560 --> 00:11:24,300
allows for unencrypted but I personally

305
00:11:24,300 --> 00:11:25,800
would not recommend then

306
00:11:25,800 --> 00:11:27,360
um

307
00:11:27,360 --> 00:11:29,160
and the marginal cost of doing encrypted

308
00:11:29,160 --> 00:11:31,500
honestly is it's not particularly High

309
00:11:31,500 --> 00:11:32,880
the worst part is just key distribution

310
00:11:32,880 --> 00:11:34,800
that's by far the most annoying part the

311
00:11:34,800 --> 00:11:36,720
actual encryption code is not that hard

312
00:11:36,720 --> 00:11:40,200
so uh even an L4 load bouncer

313
00:11:40,200 --> 00:11:41,100
um

314
00:11:41,100 --> 00:11:43,579
so

315
00:11:50,700 --> 00:11:54,740
is then having to do a unicast

316
00:11:57,500 --> 00:11:59,820
different infrastructures are different

317
00:11:59,820 --> 00:12:02,160
but the key fact here is

318
00:12:02,160 --> 00:12:04,560
when a packet that it does not know how

319
00:12:04,560 --> 00:12:07,200
to arrives I don't any load balancer on

320
00:12:07,200 --> 00:12:09,480
Earth as long as that load balancer has

321
00:12:09,480 --> 00:12:11,040
the keys that we have distributed to it

322
00:12:11,040 --> 00:12:13,500
in order to decrypt uh these connection

323
00:12:13,500 --> 00:12:15,899
IDs it can decrypt the connection ID

324
00:12:15,899 --> 00:12:18,060
look at the routing information inside

325
00:12:18,060 --> 00:12:19,560
of it and do whatever the network

326
00:12:19,560 --> 00:12:21,720
infrastructure like needs it to do so

327
00:12:21,720 --> 00:12:23,339
like at Google we have a bunch of stuff

328
00:12:23,339 --> 00:12:24,540
that doesn't really make any sense

329
00:12:24,540 --> 00:12:26,820
outside of Google and so like describing

330
00:12:26,820 --> 00:12:28,740
it would not be particularly helpful but

331
00:12:28,740 --> 00:12:30,180
like you know every different network

332
00:12:30,180 --> 00:12:32,640
infrastructure has information uh that

333
00:12:32,640 --> 00:12:34,560
they want to wrote by that's like that

334
00:12:34,560 --> 00:12:36,240
they can pack into this encrypted

335
00:12:36,240 --> 00:12:37,260
payload

336
00:12:37,260 --> 00:12:39,420
it basically is what I'm saying yep

337
00:12:39,420 --> 00:12:40,620
could be a tunnel it could be something

338
00:12:40,620 --> 00:12:42,180
that's could be GUI is actually another

339
00:12:42,180 --> 00:12:46,860
common election as an example uh great

340
00:12:46,860 --> 00:12:48,899
next slide

341
00:12:48,899 --> 00:12:50,880
okay let's talk about black bowling

342
00:12:50,880 --> 00:12:53,220
um so this has been a problem uh for a

343
00:12:53,220 --> 00:12:55,019
while at least for quick

344
00:12:55,019 --> 00:12:57,000
um this is partially historically due to

345
00:12:57,000 --> 00:12:59,160
some issues with middle boxes I think

346
00:12:59,160 --> 00:13:01,139
most of those issues have been solved at

347
00:13:01,139 --> 00:13:04,139
least to my knowledge but nonetheless is

348
00:13:04,139 --> 00:13:06,000
a terrible place and black calling

349
00:13:06,000 --> 00:13:07,860
happens um and it's extremely user

350
00:13:07,860 --> 00:13:10,380
visible this does also happen for TCP as

351
00:13:10,380 --> 00:13:11,160
well

352
00:13:11,160 --> 00:13:12,540
um and I know that there are some

353
00:13:12,540 --> 00:13:13,800
mitigations in the kernel but I wanted

354
00:13:13,800 --> 00:13:15,480
to go through kind of what we did in

355
00:13:15,480 --> 00:13:18,480
quick uh to mitigate this problem

356
00:13:18,480 --> 00:13:20,519
um and next slide

357
00:13:20,519 --> 00:13:22,500
and I also want to say

358
00:13:22,500 --> 00:13:24,720
that a five Tuple can be black hole in

359
00:13:24,720 --> 00:13:26,579
either direction or both but it's quite

360
00:13:26,579 --> 00:13:28,620
often actually just One Direction but it

361
00:13:28,620 --> 00:13:29,820
doesn't really matter because you can't

362
00:13:29,820 --> 00:13:32,279
really tell like you can't really tell

363
00:13:32,279 --> 00:13:33,480
if you're not getting any acts because

364
00:13:33,480 --> 00:13:34,980
the packets aren't getting through from

365
00:13:34,980 --> 00:13:36,420
you to the server or if you're not

366
00:13:36,420 --> 00:13:37,920
getting acts because the ax get dropped

367
00:13:37,920 --> 00:13:40,139
it looks the same to you uh as the

368
00:13:40,139 --> 00:13:41,279
client

369
00:13:41,279 --> 00:13:43,980
so another challenge is it's fairly

370
00:13:43,980 --> 00:13:47,180
common that for a given five people

371
00:13:47,180 --> 00:13:49,620
that multiple paths on that five two

372
00:13:49,620 --> 00:13:52,320
pole are similar five people will sorry

373
00:13:52,320 --> 00:13:55,380
uh will work like the the connectivity

374
00:13:55,380 --> 00:13:58,260
between like IBA and ipb is largely

375
00:13:58,260 --> 00:14:00,839
functional but one percent of the flow

376
00:14:00,839 --> 00:14:03,720
hashes may be dropped so it could be

377
00:14:03,720 --> 00:14:06,660
because you go through a bad wine card

378
00:14:06,660 --> 00:14:08,399
um you could be going through like a bad

379
00:14:08,399 --> 00:14:11,459
Rudder you could end up you know there's

380
00:14:11,459 --> 00:14:12,779
some load balancing going on and

381
00:14:12,779 --> 00:14:14,220
suddenly you end up getting sent through

382
00:14:14,220 --> 00:14:15,959
like some bizarre peering Point that's

383
00:14:15,959 --> 00:14:17,220
like extremely far away and there's

384
00:14:17,220 --> 00:14:18,720
extraordinarily High packet loss like

385
00:14:18,720 --> 00:14:21,540
just things happen and so it's not that

386
00:14:21,540 --> 00:14:23,459
uncommon for like you know two endpoints

387
00:14:23,459 --> 00:14:25,500
to be largely reachable but like either

388
00:14:25,500 --> 00:14:27,180
intermittently not reachable or

389
00:14:27,180 --> 00:14:29,760
otherwise unreliable

390
00:14:29,760 --> 00:14:32,160
um so the worst part about this is when

391
00:14:32,160 --> 00:14:34,260
you have black hole Wing typically you

392
00:14:34,260 --> 00:14:36,000
experience a timeout at least by default

393
00:14:36,000 --> 00:14:37,200
and you have to wait for the idle time

394
00:14:37,200 --> 00:14:38,639
out of the connection

395
00:14:38,639 --> 00:14:40,380
um so this can be as short as 30 seconds

396
00:14:40,380 --> 00:14:42,000
but commonly you know could be a few

397
00:14:42,000 --> 00:14:43,920
minutes this is extremely visible and

398
00:14:43,920 --> 00:14:45,420
extremely painful

399
00:14:45,420 --> 00:14:47,339
um and so like having someone sit there

400
00:14:47,339 --> 00:14:50,279
and like wait for a page to load for a

401
00:14:50,279 --> 00:14:52,500
minute or two because uh you know a flow

402
00:14:52,500 --> 00:14:53,760
happened to get a lot cold though it's

403
00:14:53,760 --> 00:14:56,100
rare is quite frustrating

404
00:14:56,100 --> 00:14:57,660
um and so in order to bring down tail

405
00:14:57,660 --> 00:15:01,339
latency next slide

406
00:15:01,800 --> 00:15:04,199
uh right now at least in our

407
00:15:04,199 --> 00:15:05,399
implementation we close the connection

408
00:15:05,399 --> 00:15:08,040
after there are five consecutive probe

409
00:15:08,040 --> 00:15:10,500
timeouts under the theory that at that

410
00:15:10,500 --> 00:15:13,019
point the odds that it's still alive uh

411
00:15:13,019 --> 00:15:14,519
are quite low

412
00:15:14,519 --> 00:15:16,320
um this certainly kills a small number

413
00:15:16,320 --> 00:15:19,079
of flows that actually are viable

414
00:15:19,079 --> 00:15:21,120
um but you know the vast majority of

415
00:15:21,120 --> 00:15:24,180
flows it kills are are dead at that

416
00:15:24,180 --> 00:15:24,899
point

417
00:15:24,899 --> 00:15:26,760
um I think that turns out to be when you

418
00:15:26,760 --> 00:15:28,500
do the math at least in our code

419
00:15:28,500 --> 00:15:30,480
at least like 10 or 12 seconds of time

420
00:15:30,480 --> 00:15:32,279
so at that point the user is probably

421
00:15:32,279 --> 00:15:34,079
quite frustrated anyway assuming it's an

422
00:15:34,079 --> 00:15:36,779
actual user and if it's a non like if

423
00:15:36,779 --> 00:15:39,240
it's an internet client like grpc or

424
00:15:39,240 --> 00:15:41,220
um non-user facing then I mean that's

425
00:15:41,220 --> 00:15:42,540
still an extraordinary amount of tail

426
00:15:42,540 --> 00:15:44,040
latency and at that point you're better

427
00:15:44,040 --> 00:15:45,540
off closing the connection starting all

428
00:15:45,540 --> 00:15:46,980
over

429
00:15:46,980 --> 00:15:49,500
um so it does reduce alien Z has some

430
00:15:49,500 --> 00:15:50,760
downsides

431
00:15:50,760 --> 00:15:51,360
um

432
00:15:51,360 --> 00:15:53,399
it's kind of unclear why this is so

433
00:15:53,399 --> 00:15:54,959
useful on the server as well as the

434
00:15:54,959 --> 00:15:57,120
client we tried to just do it only in

435
00:15:57,120 --> 00:15:58,260
the client side and it turned out doing

436
00:15:58,260 --> 00:16:01,199
it on both sides sides does help I mean

437
00:16:01,199 --> 00:16:02,940
I can come up with theories but it's a

438
00:16:02,940 --> 00:16:04,860
little bit hand-waving

439
00:16:04,860 --> 00:16:05,579
um

440
00:16:05,579 --> 00:16:07,380
so I don't really love this mechanism in

441
00:16:07,380 --> 00:16:10,019
the sense that it's a little bit hacky

442
00:16:10,019 --> 00:16:12,480
um but it does work and it does fix some

443
00:16:12,480 --> 00:16:15,120
fraction of the cases the mechanism that

444
00:16:15,120 --> 00:16:16,440
we came up with more recently that I

445
00:16:16,440 --> 00:16:17,820
like quite a bit better

446
00:16:17,820 --> 00:16:20,959
uh next slide

447
00:16:22,139 --> 00:16:24,600
um see a quick solution

448
00:16:24,600 --> 00:16:27,779
um got a joke in there again uh is poor

449
00:16:27,779 --> 00:16:29,220
migration oh that's you dude never got

450
00:16:29,220 --> 00:16:32,660
resolved that's nice

451
00:16:33,680 --> 00:16:37,079
uh so the observation is that changing

452
00:16:37,079 --> 00:16:38,940
only Port can drastically change the

453
00:16:38,940 --> 00:16:41,459
internet path that you eroded to uh if

454
00:16:41,459 --> 00:16:43,199
you do a trace route from two different

455
00:16:43,199 --> 00:16:45,420
ephemeral reports uh on your machine

456
00:16:45,420 --> 00:16:47,160
we've seen cases where you actually

457
00:16:47,160 --> 00:16:48,480
ended up going through different pairing

458
00:16:48,480 --> 00:16:50,100
points for example which seems like

459
00:16:50,100 --> 00:16:52,380
amazing um in some cases like you'll

460
00:16:52,380 --> 00:16:54,060
have like nine hops on one side and 13

461
00:16:54,060 --> 00:16:55,199
on the other or something it's like

462
00:16:55,199 --> 00:16:57,240
drastically different routes it's just

463
00:16:57,240 --> 00:16:59,160
it's almost inexplicable it's kind of

464
00:16:59,160 --> 00:17:01,139
like shocking how different they are

465
00:17:01,139 --> 00:17:03,480
um and so as a result I mean sometimes

466
00:17:03,480 --> 00:17:05,579
like if the connection gets black hole

467
00:17:05,579 --> 00:17:07,559
like just try a different port on the

468
00:17:07,559 --> 00:17:08,699
client side

469
00:17:08,699 --> 00:17:10,439
um and it turns out this fixes the

470
00:17:10,439 --> 00:17:12,480
connection in a remarkably High fraction

471
00:17:12,480 --> 00:17:14,099
at the time like I don't have exact

472
00:17:14,099 --> 00:17:16,559
numbers and it does depend on platform

473
00:17:16,559 --> 00:17:18,720
um but and I'll get exact numbers at

474
00:17:18,720 --> 00:17:21,119
some point in the near future once you

475
00:17:21,119 --> 00:17:23,280
know maybe for a future iitf talk but

476
00:17:23,280 --> 00:17:25,679
it's it's quite high and it's

477
00:17:25,679 --> 00:17:27,900
um you know that avoids us relying on

478
00:17:27,900 --> 00:17:30,900
this five RTO or PTO approach of closing

479
00:17:30,900 --> 00:17:32,040
the connection and assuming it's dead

480
00:17:32,040 --> 00:17:34,020
because instead of dying those

481
00:17:34,020 --> 00:17:36,299
connections get saved and we have to use

482
00:17:36,299 --> 00:17:38,179
that mechanism less frequently

483
00:17:38,179 --> 00:17:40,620
so this introduces entropy in both

484
00:17:40,620 --> 00:17:41,400
directions

485
00:17:41,400 --> 00:17:43,679
so and like some of the changes um such

486
00:17:43,679 --> 00:17:46,620
as changing like an ecmp uh flow hash

487
00:17:46,620 --> 00:17:49,080
sorry a flow hash in IPv6 in order to

488
00:17:49,080 --> 00:17:51,360
get like ecmp uh to change and getting

489
00:17:51,360 --> 00:17:52,980
entropy which only works in One

490
00:17:52,980 --> 00:17:54,360
Direction this actually works

491
00:17:54,360 --> 00:17:56,400
bi-directionally and so it doesn't

492
00:17:56,400 --> 00:17:58,860
matter which side of the path is

493
00:17:58,860 --> 00:18:00,360
actually being blocked holding for in

494
00:18:00,360 --> 00:18:01,740
order for it to fix

495
00:18:01,740 --> 00:18:03,539
um and it's Now default enabled in

496
00:18:03,539 --> 00:18:05,820
chromium which is chronet Chrome and

497
00:18:05,820 --> 00:18:07,919
anyone else who pulls in the chromium

498
00:18:07,919 --> 00:18:09,360
source code which is a good number of

499
00:18:09,360 --> 00:18:10,799
folks

500
00:18:10,799 --> 00:18:12,539
um but yeah it's quite simple mechanism

501
00:18:12,539 --> 00:18:15,059
uh Works quite well I really recommend

502
00:18:15,059 --> 00:18:16,140
it

503
00:18:16,140 --> 00:18:18,900
um yeah and a nice benefit of quick over

504
00:18:18,900 --> 00:18:20,940
TCP actually because we've had similar

505
00:18:20,940 --> 00:18:23,880
problems at Google for TCP

506
00:18:23,880 --> 00:18:25,200
um and the solutions are much more

507
00:18:25,200 --> 00:18:27,660
challenging than just changing import as

508
00:18:27,660 --> 00:18:31,440
I said IPv6 uh you know flow hashes like

509
00:18:31,440 --> 00:18:34,679
one of them so

510
00:18:34,679 --> 00:18:37,080
next slide

511
00:18:37,080 --> 00:18:39,480
excellent

512
00:18:39,480 --> 00:18:40,500
oh

513
00:18:40,500 --> 00:18:42,059
so

514
00:18:42,059 --> 00:18:44,400
we had an average uh last November I'm

515
00:18:44,400 --> 00:18:45,900
fairly sure it was

516
00:18:45,900 --> 00:18:48,240
um it was quite terrifying actually uh

517
00:18:48,240 --> 00:18:49,679
it was definitely like one of the scary

518
00:18:49,679 --> 00:18:51,660
outages it turns out the impact will not

519
00:18:51,660 --> 00:18:53,460
end up being as bad as you might fear

520
00:18:53,460 --> 00:18:55,200
but it was quite terrifying

521
00:18:55,200 --> 00:18:57,360
um so there's a query of depth it was

522
00:18:57,360 --> 00:18:59,640
triggered by resumption information sent

523
00:18:59,640 --> 00:19:04,140
by gfes which are Google front ends uh

524
00:19:04,140 --> 00:19:06,179
two clients and then the clients within

525
00:19:06,179 --> 00:19:08,100
the resumption information back to

526
00:19:08,100 --> 00:19:09,360
server so we talked about this yesterday

527
00:19:09,360 --> 00:19:11,580
with you know how you get zero Rott and

528
00:19:11,580 --> 00:19:13,679
such it's a lot of like the server give

529
00:19:13,679 --> 00:19:14,760
something to the client that the client

530
00:19:14,760 --> 00:19:16,919
then replays the next time and makes a

531
00:19:16,919 --> 00:19:18,720
connection so like it's fairly standard

532
00:19:18,720 --> 00:19:20,160
stuff real quick

533
00:19:20,160 --> 00:19:22,440
um unfortunately this information was

534
00:19:22,440 --> 00:19:24,480
sent by these new servers caused our

535
00:19:24,480 --> 00:19:25,980
server the other servers to crash

536
00:19:25,980 --> 00:19:28,260
immediately

537
00:19:28,260 --> 00:19:29,460
um so much so that the handshake never

538
00:19:29,460 --> 00:19:31,740
even completed I got the client low and

539
00:19:31,740 --> 00:19:33,480
immediately died

540
00:19:33,480 --> 00:19:35,580
um so at Peak it was around 10 of all

541
00:19:35,580 --> 00:19:37,799
GFS or public-facing internet servers at

542
00:19:37,799 --> 00:19:39,960
Google it's quite a number

543
00:19:39,960 --> 00:19:41,820
um but it was very uneven it was mostly

544
00:19:41,820 --> 00:19:43,140
in Europe

545
00:19:43,140 --> 00:19:45,480
um and it took an hour and 44 minutes to

546
00:19:45,480 --> 00:19:47,460
fully resolve the issue which is quite a

547
00:19:47,460 --> 00:19:48,299
while

548
00:19:48,299 --> 00:19:49,440
um the reason for that is actually

549
00:19:49,440 --> 00:19:51,299
mostly due to

550
00:19:51,299 --> 00:19:54,419
the SRE tooling and the impact on that

551
00:19:54,419 --> 00:19:56,460
um the reliability Engineers actually

552
00:19:56,460 --> 00:19:57,960
did not have access to a number of the

553
00:19:57,960 --> 00:19:58,919
tools that they normally would have

554
00:19:58,919 --> 00:20:00,000
access to

555
00:20:00,000 --> 00:20:01,980
uh there's actually like a lot more

556
00:20:01,980 --> 00:20:03,720
detail about that part of it in a

557
00:20:03,720 --> 00:20:05,760
recording I link to you later

558
00:20:05,760 --> 00:20:07,620
um but for now I'm actually going to

559
00:20:07,620 --> 00:20:08,880
focus on the technical bits because I

560
00:20:08,880 --> 00:20:10,200
think they're kind of interesting as

561
00:20:10,200 --> 00:20:11,340
well

562
00:20:11,340 --> 00:20:14,039
next slide

563
00:20:14,039 --> 00:20:17,280
so we we coined after this urge we

564
00:20:17,280 --> 00:20:18,720
coined this new idea called contagion

565
00:20:18,720 --> 00:20:20,640
which is like an interaction of

566
00:20:20,640 --> 00:20:22,440
distributed systems

567
00:20:22,440 --> 00:20:25,200
um so a key Point here is typically at

568
00:20:25,200 --> 00:20:26,760
Google what happens is

569
00:20:26,760 --> 00:20:29,160
We Roll something out we can area it say

570
00:20:29,160 --> 00:20:30,840
we tend to in this case it'll extend to

571
00:20:30,840 --> 00:20:32,760
only two machines but typically you know

572
00:20:32,760 --> 00:20:34,860
send it to a rack or something we test

573
00:20:34,860 --> 00:20:36,179
it and if it starts crashing or doing

574
00:20:36,179 --> 00:20:37,440
something terrible then we roll it back

575
00:20:37,440 --> 00:20:39,960
right like standard stuff

576
00:20:39,960 --> 00:20:41,760
um however contagion bugs at least in

577
00:20:41,760 --> 00:20:42,660
this case have the property that

578
00:20:42,660 --> 00:20:44,640
rollbacks don't work

579
00:20:44,640 --> 00:20:46,320
um because there's now a state

580
00:20:46,320 --> 00:20:48,600
distributed in things that are not your

581
00:20:48,600 --> 00:20:50,160
server and not the thing you are rolling

582
00:20:50,160 --> 00:20:52,919
back so in this case it was all clients

583
00:20:52,919 --> 00:20:54,360
on the public internet

584
00:20:54,360 --> 00:20:55,679
uh

585
00:20:55,679 --> 00:20:57,840
particularly Chrome and it turns out to

586
00:20:57,840 --> 00:20:59,400
be the worst one for reasons I'll get

587
00:20:59,400 --> 00:21:01,260
into later but it's quite a number of

588
00:21:01,260 --> 00:21:03,600
clients that were potentially having to

589
00:21:03,600 --> 00:21:05,220
roll back and you know this basically

590
00:21:05,220 --> 00:21:06,900
we're waiting for these machines people

591
00:21:06,900 --> 00:21:08,280
to like restart their browser or

592
00:21:08,280 --> 00:21:09,900
something like that before we can fully

593
00:21:09,900 --> 00:21:11,940
roll back in some sense

594
00:21:11,940 --> 00:21:13,620
um so that's quite scary from an SRE

595
00:21:13,620 --> 00:21:14,760
perspective and a reliability

596
00:21:14,760 --> 00:21:17,160
perspective because uh you know

597
00:21:17,160 --> 00:21:18,840
rollbacks are like your friend you're

598
00:21:18,840 --> 00:21:20,100
like you assume that if you roll back

599
00:21:20,100 --> 00:21:21,299
the right thing you will definitely fix

600
00:21:21,299 --> 00:21:23,640
it and like rolling back the issue did

601
00:21:23,640 --> 00:21:24,840
not fix it

602
00:21:24,840 --> 00:21:25,559
um

603
00:21:25,559 --> 00:21:27,179
and that also means a single task can

604
00:21:27,179 --> 00:21:28,500
actually cause a global average which is

605
00:21:28,500 --> 00:21:30,840
the other thing that terrified everyone

606
00:21:30,840 --> 00:21:31,860
um

607
00:21:31,860 --> 00:21:33,179
so

608
00:21:33,179 --> 00:21:35,520
next slide

609
00:21:35,520 --> 00:21:37,320
so an example and one of the ones that

610
00:21:37,320 --> 00:21:39,360
happened in this case is TLS or quick

611
00:21:39,360 --> 00:21:41,400
resumption so again

612
00:21:41,400 --> 00:21:43,620
uh you know this is widely used the

613
00:21:43,620 --> 00:21:45,539
server gives the client something that

614
00:21:45,539 --> 00:21:46,919
the client then repeats back to the

615
00:21:46,919 --> 00:21:48,900
server and then the server parses it and

616
00:21:48,900 --> 00:21:51,000
then you know if server a produces

617
00:21:51,000 --> 00:21:52,980
something that when server B parses it

618
00:21:52,980 --> 00:21:54,840
it crashes or otherwise you know has

619
00:21:54,840 --> 00:21:56,700
undefined Behavior memory access and so

620
00:21:56,700 --> 00:21:58,200
on and so forth then you're in a bad

621
00:21:58,200 --> 00:22:00,960
place this is sort of a unique outage in

622
00:22:00,960 --> 00:22:01,980
the sense that

623
00:22:01,980 --> 00:22:04,380
it can't be fuzzed in traditional Senses

624
00:22:04,380 --> 00:22:06,299
at least not particularly well

625
00:22:06,299 --> 00:22:09,059
um and it's not a zero day in the sense

626
00:22:09,059 --> 00:22:11,940
that an attacker could take advantage of

627
00:22:11,940 --> 00:22:14,340
it so it was an attacker you cannot

628
00:22:14,340 --> 00:22:16,860
craft a token or a resumption ticket

629
00:22:16,860 --> 00:22:19,500
that our servers will parse it'll just

630
00:22:19,500 --> 00:22:21,840
not decrypt it just won't work so only

631
00:22:21,840 --> 00:22:25,140
we uniquely have the power to cause a

632
00:22:25,140 --> 00:22:27,380
global zero day

633
00:22:27,380 --> 00:22:30,299
contagion outage of ourself

634
00:22:30,299 --> 00:22:32,880
it's amazing

635
00:22:32,880 --> 00:22:34,020
with great power comes great

636
00:22:34,020 --> 00:22:35,700
responsibility

637
00:22:35,700 --> 00:22:39,600
um okay so next slide

638
00:22:39,600 --> 00:22:40,740
so let's go through what actually

639
00:22:40,740 --> 00:22:42,059
happened to Google

640
00:22:42,059 --> 00:22:43,620
um I'll go a little faster through these

641
00:22:43,620 --> 00:22:45,419
because uh they're more visual but

642
00:22:45,419 --> 00:22:48,140
they're quite fun

643
00:22:49,200 --> 00:22:53,039
so uh a browser does a handshake to

644
00:22:53,039 --> 00:22:55,860
where we call it a canary GFE which is a

645
00:22:55,860 --> 00:22:57,240
machine that's

646
00:22:57,240 --> 00:22:59,159
um you know using the latest software

647
00:22:59,159 --> 00:23:01,080
and or Flags

648
00:23:01,080 --> 00:23:03,900
so completes the handshake get you know

649
00:23:03,900 --> 00:23:06,380
next slide

650
00:23:06,480 --> 00:23:09,179
uh as I said before a token is given to

651
00:23:09,179 --> 00:23:11,340
the client that you can use to approve

652
00:23:11,340 --> 00:23:13,620
your IP address for future use so that's

653
00:23:13,620 --> 00:23:16,140
the source address token

654
00:23:16,140 --> 00:23:18,120
um you know the the client saves it

655
00:23:18,120 --> 00:23:19,620
everything's wonderful

656
00:23:19,620 --> 00:23:21,480
uh in this case uh the canary jobs

657
00:23:21,480 --> 00:23:23,700
populated a new field

658
00:23:23,700 --> 00:23:25,080
um that was mostly used for

659
00:23:25,080 --> 00:23:27,360
informational purposes but you know and

660
00:23:27,360 --> 00:23:28,980
uh so there's this new field that was

661
00:23:28,980 --> 00:23:30,299
that was shoved into this particular

662
00:23:30,299 --> 00:23:32,580
blob of data but of course it's all

663
00:23:32,580 --> 00:23:34,860
encrypted to the ganto

664
00:23:34,860 --> 00:23:37,140
next slide

665
00:23:37,140 --> 00:23:40,559
uh again tokens and on the by the client

666
00:23:40,559 --> 00:23:43,380
domain next GFE uh this one does not

667
00:23:43,380 --> 00:23:45,539
have the new code

668
00:23:45,539 --> 00:23:46,340
um

669
00:23:46,340 --> 00:23:49,799
and Additionally the token should be

670
00:23:49,799 --> 00:23:51,299
cleared no matter what after doing this

671
00:23:51,299 --> 00:23:52,559
handshape because you already used it

672
00:23:52,559 --> 00:23:54,059
once however

673
00:23:54,059 --> 00:23:56,159
um due to a bug in our iitf quick

674
00:23:56,159 --> 00:23:57,600
implementation in Chrome at the time

675
00:23:57,600 --> 00:24:01,080
that did not happen so it's sort of

676
00:24:01,080 --> 00:24:02,460
stuck around in the browser until a

677
00:24:02,460 --> 00:24:03,900
handshake completed but unfortunately

678
00:24:03,900 --> 00:24:06,120
next slide

679
00:24:06,120 --> 00:24:08,400
every single time that token was given

680
00:24:08,400 --> 00:24:11,159
out the server crashed and so a

681
00:24:11,159 --> 00:24:14,580
handshape would never ever ever complete

682
00:24:14,580 --> 00:24:17,000
oh

683
00:24:17,340 --> 00:24:19,980
um yeah it just yeah so

684
00:24:19,980 --> 00:24:22,020
you basically have a poison token that

685
00:24:22,020 --> 00:24:23,760
will never clear itself

686
00:24:23,760 --> 00:24:25,620
um and the sir the client will just keep

687
00:24:25,620 --> 00:24:27,480
like contacting servers and be like I

688
00:24:27,480 --> 00:24:29,100
don't understand like why are you not

689
00:24:29,100 --> 00:24:30,299
there why are you not responding to me

690
00:24:30,299 --> 00:24:32,280
this other person responded to me why

691
00:24:32,280 --> 00:24:35,820
don't you like me anymore next slide

692
00:24:35,820 --> 00:24:38,640
uh and it keeps trying and they keep

693
00:24:38,640 --> 00:24:40,200
crashing

694
00:24:40,200 --> 00:24:42,720
next slide

695
00:24:42,720 --> 00:24:45,419
uh yeah exactly so

696
00:24:45,419 --> 00:24:47,159
the one of the good things that did

697
00:24:47,159 --> 00:24:48,720
happen here at like one of the few good

698
00:24:48,720 --> 00:24:50,760
things is chromium has this exponential

699
00:24:50,760 --> 00:24:52,559
back off thing where like the handshake

700
00:24:52,559 --> 00:24:54,720
fails it won't try

701
00:24:54,720 --> 00:24:57,000
um quick to that domain for another five

702
00:24:57,000 --> 00:24:58,740
minutes however we were giving out

703
00:24:58,740 --> 00:25:00,419
tokens across like a whole host of

704
00:25:00,419 --> 00:25:02,280
domains for like the period of time that

705
00:25:02,280 --> 00:25:05,280
we were giving out tokens and so uh you

706
00:25:05,280 --> 00:25:07,320
know a single client could still be

707
00:25:07,320 --> 00:25:09,120
crashing like 10 or 20 different you

708
00:25:09,120 --> 00:25:10,740
know services for like five or ten

709
00:25:10,740 --> 00:25:11,760
minutes

710
00:25:11,760 --> 00:25:13,919
um so you know it's it's still quite a

711
00:25:13,919 --> 00:25:16,020
bit of impact for like a single client

712
00:25:16,020 --> 00:25:17,280
that happened to be given these tokens

713
00:25:17,280 --> 00:25:19,980
uh next slide

714
00:25:19,980 --> 00:25:22,080
so let's talk about kind of the timeline

715
00:25:22,080 --> 00:25:23,820
next slide

716
00:25:23,820 --> 00:25:26,520
oh that did not get exported properly

717
00:25:26,520 --> 00:25:30,620
PDF fail okay back

718
00:25:31,500 --> 00:25:33,600
I'm gonna have to do this from memory

719
00:25:33,600 --> 00:25:34,679
um okay

720
00:25:34,679 --> 00:25:35,880
uh

721
00:25:35,880 --> 00:25:37,740
two seven PSD said the middle of the

722
00:25:37,740 --> 00:25:38,640
night

723
00:25:38,640 --> 00:25:40,980
um server started crashing the automated

724
00:25:40,980 --> 00:25:43,500
Canary checks uh started noticing that

725
00:25:43,500 --> 00:25:44,880
servers were crashing they

726
00:25:44,880 --> 00:25:46,440
instantaneously rolled them back after

727
00:25:46,440 --> 00:25:48,659
only two servers got the new code this

728
00:25:48,659 --> 00:25:49,919
rollback took approximately four minutes

729
00:25:49,919 --> 00:25:53,820
so two servers performance had the uh

730
00:25:53,820 --> 00:25:56,340
mysterious code enabled on them

731
00:25:56,340 --> 00:25:58,740
so but zero three one everything was

732
00:25:58,740 --> 00:26:00,840
rolled back sres were looking at it and

733
00:26:00,840 --> 00:26:02,760
they were confused because the rollback

734
00:26:02,760 --> 00:26:04,740
had completed successfully and servers

735
00:26:04,740 --> 00:26:06,419
were still crashing

736
00:26:06,419 --> 00:26:08,340
and additionally they started realizing

737
00:26:08,340 --> 00:26:10,440
that none of their tooling worked

738
00:26:10,440 --> 00:26:11,940
so all of their monitoring and

739
00:26:11,940 --> 00:26:13,380
everything at least in the London office

740
00:26:13,380 --> 00:26:16,020
was completely unaccessible

741
00:26:16,020 --> 00:26:19,320
um they couldn't access uh logging they

742
00:26:19,320 --> 00:26:21,539
couldn't access crash dumps uh they

743
00:26:21,539 --> 00:26:23,400
couldn't access they could barely even

744
00:26:23,400 --> 00:26:24,960
figure out like how many servers were

745
00:26:24,960 --> 00:26:28,080
actually crashing or where it was quite

746
00:26:28,080 --> 00:26:30,059
virtual and it took them

747
00:26:30,059 --> 00:26:32,760
a while to even realize that this was

748
00:26:32,760 --> 00:26:35,820
not an in fact a global Google outage in

749
00:26:35,820 --> 00:26:37,740
fact the vast majority of Europe where

750
00:26:37,740 --> 00:26:39,720
this was centered had no outage

751
00:26:39,720 --> 00:26:41,580
whatsoever for google.com youtube.com

752
00:26:41,580 --> 00:26:43,559
and most major Google domains

753
00:26:43,559 --> 00:26:44,880
um due to our Quirk of how this

754
00:26:44,880 --> 00:26:46,320
particular like we're allowed to happen

755
00:26:46,320 --> 00:26:48,179
but for a while they were absolutely

756
00:26:48,179 --> 00:26:51,000
paranoid and completely apparent what

757
00:26:51,000 --> 00:26:52,860
they ended up doing is contacting some

758
00:26:52,860 --> 00:26:54,179
colleagues in Australia and New Zealand

759
00:26:54,179 --> 00:26:55,860
who are awake at the time

760
00:26:55,860 --> 00:26:57,419
um and had no problems whatsoever

761
00:26:57,419 --> 00:26:59,039
accessing these corporate systems

762
00:26:59,039 --> 00:27:00,480
because it basically was only crashing

763
00:27:00,480 --> 00:27:01,679
servers in Europe

764
00:27:01,679 --> 00:27:03,840
and they like basically hooked them up

765
00:27:03,840 --> 00:27:06,179
with uh access I think it also turned

766
00:27:06,179 --> 00:27:07,440
out that meat worked perfectly during

767
00:27:07,440 --> 00:27:09,600
this time so like they like once they

768
00:27:09,600 --> 00:27:10,860
realized that they're like oh I'll just

769
00:27:10,860 --> 00:27:13,200
get like people in like in other time

770
00:27:13,200 --> 00:27:14,940
zone to like get on a video call and

771
00:27:14,940 --> 00:27:16,740
like help me fix this up

772
00:27:16,740 --> 00:27:18,419
um so once they actually had access to

773
00:27:18,419 --> 00:27:20,640
everything all right which is around 138

774
00:27:20,640 --> 00:27:22,200
um it took them about five minutes to

775
00:27:22,200 --> 00:27:23,400
figure out what the problem was and what

776
00:27:23,400 --> 00:27:25,260
to do and like seven minutes to roll it

777
00:27:25,260 --> 00:27:26,340
back

778
00:27:26,340 --> 00:27:27,900
um so you know it was like a 15 minute

779
00:27:27,900 --> 00:27:31,020
outage and a of the actual system and

780
00:27:31,020 --> 00:27:32,820
about like an hour and you know 15

781
00:27:32,820 --> 00:27:35,039
minute outage uh of all the SRE

782
00:27:35,039 --> 00:27:36,720
reliability and monitoring systems that

783
00:27:36,720 --> 00:27:38,940
they need to actually fix the system

784
00:27:38,940 --> 00:27:40,559
um and this was another reason why it

785
00:27:40,559 --> 00:27:45,720
was so you know lengthy and painful

786
00:27:45,720 --> 00:27:47,279
I will re-export these slides so they're

787
00:27:47,279 --> 00:27:49,200
actually what I just said is done there

788
00:27:49,200 --> 00:27:50,700
okay

789
00:27:50,700 --> 00:27:53,159
so let's go to the last topic

790
00:27:53,159 --> 00:27:56,760
um so zero rtt is is quite hard even on

791
00:27:56,760 --> 00:27:57,659
a good day

792
00:27:57,659 --> 00:27:59,580
it's particularly challenging in ITF

793
00:27:59,580 --> 00:28:02,400
quick uh versus Google quick so you have

794
00:28:02,400 --> 00:28:03,480
things like multiple packet number

795
00:28:03,480 --> 00:28:05,039
spaces which from a design perspective

796
00:28:05,039 --> 00:28:06,419
are great

797
00:28:06,419 --> 00:28:09,120
um and have a number of number of nice

798
00:28:09,120 --> 00:28:11,279
properties but they are quite

799
00:28:11,279 --> 00:28:13,080
challenging to get correct and make sure

800
00:28:13,080 --> 00:28:15,419
that you are re-transmitting the right

801
00:28:15,419 --> 00:28:17,340
thing at the right time and bundling the

802
00:28:17,340 --> 00:28:18,779
right thing but the other right thing

803
00:28:18,779 --> 00:28:21,000
and particularly if any single packet

804
00:28:21,000 --> 00:28:22,559
starts getting lost

805
00:28:22,559 --> 00:28:24,960
what you should do in response to losing

806
00:28:24,960 --> 00:28:26,340
that packet

807
00:28:26,340 --> 00:28:29,220
is sometimes subtle and if you get it

808
00:28:29,220 --> 00:28:30,600
wrong you either end up with a handshake

809
00:28:30,600 --> 00:28:32,820
deadlock or something that takes so darn

810
00:28:32,820 --> 00:28:34,740
long to complete that your usual will be

811
00:28:34,740 --> 00:28:36,600
very unhappy so like a single packet

812
00:28:36,600 --> 00:28:38,220
loss at the wrong moment if you your

813
00:28:38,220 --> 00:28:39,779
algorithm isn't implemented correctly it

814
00:28:39,779 --> 00:28:41,820
can easily uh you know increase tail

815
00:28:41,820 --> 00:28:44,039
latency a few seconds uh not a few

816
00:28:44,039 --> 00:28:45,539
hundred milliseconds

817
00:28:45,539 --> 00:28:46,440
um

818
00:28:46,440 --> 00:28:47,940
so

819
00:28:47,940 --> 00:28:50,279
Additionally the key management is less

820
00:28:50,279 --> 00:28:53,400
synchronous in compared to like TLS over

821
00:28:53,400 --> 00:28:56,220
TCP so in particular the problem that

822
00:28:56,220 --> 00:28:59,340
Chrome had was Chrome had this thing

823
00:28:59,340 --> 00:29:01,220
where like it made the keys available

824
00:29:01,220 --> 00:29:04,620
when it were for anti Keys available

825
00:29:04,620 --> 00:29:07,799
when it got the servers initial

826
00:29:07,799 --> 00:29:10,200
and like and then it could parse the

827
00:29:10,200 --> 00:29:11,400
server's hand J packet and then

828
00:29:11,400 --> 00:29:12,720
acknowledge that and like continue

829
00:29:12,720 --> 00:29:15,120
through the quick key schedule

830
00:29:15,120 --> 00:29:16,620
um unfortunately there was a bug in

831
00:29:16,620 --> 00:29:18,539
Chrome where if certificate verification

832
00:29:18,539 --> 00:29:20,520
took longer than it took for the

833
00:29:20,520 --> 00:29:22,860
server's initial to come back

834
00:29:22,860 --> 00:29:24,600
the event like the event never got

835
00:29:24,600 --> 00:29:25,980
triggered to actually release handshake

836
00:29:25,980 --> 00:29:26,880
keys

837
00:29:26,880 --> 00:29:28,679
you would never get handshake keys and

838
00:29:28,679 --> 00:29:30,299
chrome would just be like

839
00:29:30,299 --> 00:29:32,039
I can't process this packet because I

840
00:29:32,039 --> 00:29:33,419
don't have hanji keys because like

841
00:29:33,419 --> 00:29:36,000
pouring SSL didn't give it to me uh and

842
00:29:36,000 --> 00:29:37,500
like it would just sit there and like

843
00:29:37,500 --> 00:29:39,299
not acknowledge anything and not and of

844
00:29:39,299 --> 00:29:41,580
course the server was purple X because

845
00:29:41,580 --> 00:29:43,919
the server had gotten the you know its

846
00:29:43,919 --> 00:29:45,600
initial acknowledged and it's like well

847
00:29:45,600 --> 00:29:47,039
you process my initial why don't you

848
00:29:47,039 --> 00:29:48,539
have hanji keys

849
00:29:48,539 --> 00:29:50,159
um but yeah it was just do do a timing

850
00:29:50,159 --> 00:29:51,419
sequencing error

851
00:29:51,419 --> 00:29:53,039
um and again like this is one of those

852
00:29:53,039 --> 00:29:56,159
bugs that like quick due to kind of like

853
00:29:56,159 --> 00:29:57,600
the potential reordering events and

854
00:29:57,600 --> 00:29:59,640
stuff I think is quite a bit more likely

855
00:29:59,640 --> 00:30:01,260
to to have

856
00:30:01,260 --> 00:30:04,260
um so there's a whole talk on this uh

857
00:30:04,260 --> 00:30:06,360
recording and slides

858
00:30:06,360 --> 00:30:08,340
um that you can watch and that's why I

859
00:30:08,340 --> 00:30:10,559
didn't go into it further but uh it's

860
00:30:10,559 --> 00:30:12,840
it's there's some complex sticky details

861
00:30:12,840 --> 00:30:14,880
in there but uh needless to say it's

862
00:30:14,880 --> 00:30:16,559
it's something that requires a lot of

863
00:30:16,559 --> 00:30:18,240
patience and a lot of debugging an

864
00:30:18,240 --> 00:30:19,860
excellent tooling

865
00:30:19,860 --> 00:30:22,320
um without excellent tooling I would say

866
00:30:22,320 --> 00:30:25,200
uh it's it's extremely difficult if not

867
00:30:25,200 --> 00:30:27,720
impossible to really get this right

868
00:30:27,720 --> 00:30:29,399
also I'd like to say the first time we

869
00:30:29,399 --> 00:30:31,320
tried to enable zero to T it was a

870
00:30:31,320 --> 00:30:33,480
substantial regression compared to not

871
00:30:33,480 --> 00:30:36,480
having zero to D so do not assume it

872
00:30:36,480 --> 00:30:37,679
will be faster just because it's your

873
00:30:37,679 --> 00:30:39,539
ATT even if your zero to T success rate

874
00:30:39,539 --> 00:30:41,340
is like 70 percent

875
00:30:41,340 --> 00:30:44,520
the 30 that don't work if you know a

876
00:30:44,520 --> 00:30:46,200
bunch of them are like

877
00:30:46,200 --> 00:30:47,820
have terrible tailings here or something

878
00:30:47,820 --> 00:30:49,080
it's going to drag everything down it's

879
00:30:49,080 --> 00:30:50,279
going to make the performance worse so

880
00:30:50,279 --> 00:30:52,260
like please do not assume just because

881
00:30:52,260 --> 00:30:53,880
you enabled Xerox that it will be a

882
00:30:53,880 --> 00:30:55,140
performance win

883
00:30:55,140 --> 00:30:55,799
um

884
00:30:55,799 --> 00:30:57,960
you know really test it and actually

885
00:30:57,960 --> 00:30:59,940
like do the measurement and gather the

886
00:30:59,940 --> 00:31:02,100
data to like ensure that it's actually

887
00:31:02,100 --> 00:31:03,419
um a win for your particular

888
00:31:03,419 --> 00:31:04,740
implementation

889
00:31:04,740 --> 00:31:05,940
um that being said once there's a win

890
00:31:05,940 --> 00:31:07,559
for you for a given implementation I

891
00:31:07,559 --> 00:31:09,360
would expect it to be a win for all

892
00:31:09,360 --> 00:31:11,100
applications using that implementation

893
00:31:11,100 --> 00:31:12,240
so I'm not saying you have to like

894
00:31:12,240 --> 00:31:15,179
retest it per application but

895
00:31:15,179 --> 00:31:16,679
um for developers I would just

896
00:31:16,679 --> 00:31:18,899
definitely be very cautious about that

897
00:31:18,899 --> 00:31:21,860
an amount of time

898
00:31:21,960 --> 00:31:25,140
thank you very much Ian uh and now

899
00:31:25,140 --> 00:31:26,700
direct from the London Underground to

900
00:31:26,700 --> 00:31:28,559
talk about excellent tooling

901
00:31:28,559 --> 00:31:31,940
we have Lucas Perdue

902
00:31:34,080 --> 00:31:35,899
do you want to share should I share here

903
00:31:35,899 --> 00:31:38,340
it's uh yeah

904
00:31:38,340 --> 00:31:41,460
that one that one good we're gonna have

905
00:31:41,460 --> 00:31:43,919
a clock oh I'll get your clock okay I'll

906
00:31:43,919 --> 00:31:45,179
fill in the meantime I was trying to

907
00:31:45,179 --> 00:31:47,340
think of a transport related joke on the

908
00:31:47,340 --> 00:31:49,559
way in while I stood on the tube all

909
00:31:49,559 --> 00:31:51,240
I'll say is my round trip time from here

910
00:31:51,240 --> 00:31:53,940
to home is about eight hours I think so

911
00:31:53,940 --> 00:31:56,399
anyway uh I'm Lucas Padu I'm a co-chair

912
00:31:56,399 --> 00:31:58,260
of the quick working group

913
00:31:58,260 --> 00:32:00,360
um I'm here today to talk you through

914
00:32:00,360 --> 00:32:01,919
all these slides about applying

915
00:32:01,919 --> 00:32:04,260
observing and debugging quick

916
00:32:04,260 --> 00:32:06,120
um I'm a little tired so just bear with

917
00:32:06,120 --> 00:32:08,220
me in case I ramble a bit but I've got a

918
00:32:08,220 --> 00:32:10,559
clock so I won't run over time uh so

919
00:32:10,559 --> 00:32:12,539
this is good I wanted to spend more time

920
00:32:12,539 --> 00:32:14,039
talking about the applicability in this

921
00:32:14,039 --> 00:32:14,760
talk

922
00:32:14,760 --> 00:32:17,220
but there's just way too many slides so

923
00:32:17,220 --> 00:32:19,380
in the slide deck or a load of overflow

924
00:32:19,380 --> 00:32:21,840
got a backup slides maybe if you have

925
00:32:21,840 --> 00:32:23,580
some questions towards the end or in the

926
00:32:23,580 --> 00:32:25,080
panel session we could go back to those

927
00:32:25,080 --> 00:32:27,299
or you go away and you're so inspired by

928
00:32:27,299 --> 00:32:28,559
this talk you want to find out a bit

929
00:32:28,559 --> 00:32:31,679
more um so just keep that in mind uh in

930
00:32:31,679 --> 00:32:32,820
this talk we're just going to kind of

931
00:32:32,820 --> 00:32:35,220
probably touch on other topics that

932
00:32:35,220 --> 00:32:38,220
Martin Jana Ian and Martin may be

933
00:32:38,220 --> 00:32:40,740
touched on but just from a lens of Uh

934
00:32:40,740 --> 00:32:42,120
something's going wrong with my quick

935
00:32:42,120 --> 00:32:44,159
connections I don't really understand it

936
00:32:44,159 --> 00:32:45,360
that well

937
00:32:45,360 --> 00:32:47,220
um I'm maybe like an SRE or an Ops

938
00:32:47,220 --> 00:32:48,659
person and I just need to figure this

939
00:32:48,659 --> 00:32:50,760
out I'm familiar with TCP I understand

940
00:32:50,760 --> 00:32:54,120
networking but what what can I transfer

941
00:32:54,120 --> 00:32:55,980
from my previous knowledge into quick

942
00:32:55,980 --> 00:32:58,200
and what things shouldn't I do

943
00:32:58,200 --> 00:33:00,120
um where do I need to retrain my brain

944
00:33:00,120 --> 00:33:02,760
these kinds of things so this is just

945
00:33:02,760 --> 00:33:04,080
going to walk through a couple of real

946
00:33:04,080 --> 00:33:05,820
world examples literally something I was

947
00:33:05,820 --> 00:33:07,919
looking into the other week it's a silly

948
00:33:07,919 --> 00:33:09,360
book but you know something that's been

949
00:33:09,360 --> 00:33:11,820
there latent and so we looked at it and

950
00:33:11,820 --> 00:33:14,700
so let's go next slide please

951
00:33:14,700 --> 00:33:17,159
but first the important things just to

952
00:33:17,159 --> 00:33:18,240
reiterate if you haven't learned

953
00:33:18,240 --> 00:33:19,980
anything yet in these technical deep

954
00:33:19,980 --> 00:33:22,980
Dives the quick is not TCP there's lots

955
00:33:22,980 --> 00:33:25,559
of similarities but it's different and

956
00:33:25,559 --> 00:33:27,240
those differences are the the kind of

957
00:33:27,240 --> 00:33:29,340
the the places where you might stumble

958
00:33:29,340 --> 00:33:31,860
or fall next slide

959
00:33:31,860 --> 00:33:35,940
nor is quick just TLS as as we we saw

960
00:33:35,940 --> 00:33:37,620
yesterday's presentation the

961
00:33:37,620 --> 00:33:39,539
architecture and the interactions the

962
00:33:39,539 --> 00:33:42,240
models between quick and TLS

963
00:33:42,240 --> 00:33:45,000
um you probably need to know some TLS so

964
00:33:45,000 --> 00:33:46,080
some of the stuff we're going to look at

965
00:33:46,080 --> 00:33:48,299
shortly is it's going to get into things

966
00:33:48,299 --> 00:33:50,820
like TLS client hello understanding

967
00:33:50,820 --> 00:33:53,880
around aspects of the TLs handshake but

968
00:33:53,880 --> 00:33:56,100
not the timing and interaction

969
00:33:56,100 --> 00:33:58,500
specifically of those messages it's

970
00:33:58,500 --> 00:33:59,760
going to be important because quite

971
00:33:59,760 --> 00:34:01,559
often when things don't work they don't

972
00:34:01,559 --> 00:34:03,120
work from the first step where the

973
00:34:03,120 --> 00:34:05,159
handshake fails so

974
00:34:05,159 --> 00:34:08,600
let's go next slide

975
00:34:08,639 --> 00:34:10,980
and it's not it's not HTTP this is one

976
00:34:10,980 --> 00:34:13,139
of my bug beds quick yes okay G quick

977
00:34:13,139 --> 00:34:16,859
was uh built to carry HTTP but that's

978
00:34:16,859 --> 00:34:18,659
not what we have today we have our ETF

979
00:34:18,659 --> 00:34:21,300
quick and it's capable of carrying

980
00:34:21,300 --> 00:34:23,940
anything you can imagine

981
00:34:23,940 --> 00:34:27,000
um literally you need to go if you have

982
00:34:27,000 --> 00:34:28,619
an application and create an application

983
00:34:28,619 --> 00:34:31,139
mapping I'll allude to that later on

984
00:34:31,139 --> 00:34:33,899
maybe more about what it means

985
00:34:33,899 --> 00:34:37,080
um but yes it's not just HTTP there are

986
00:34:37,080 --> 00:34:38,879
aspects of Quick's design that lend

987
00:34:38,879 --> 00:34:41,879
itself well to bi-directional exchanges

988
00:34:41,879 --> 00:34:43,679
but we have other capabilities to carry

989
00:34:43,679 --> 00:34:45,719
things unidirectionally or we have a

990
00:34:45,719 --> 00:34:47,219
datagram extension that will allow

991
00:34:47,219 --> 00:34:49,918
unreliable message delivery don't make

992
00:34:49,918 --> 00:34:52,320
assumptions about your understanding of

993
00:34:52,320 --> 00:34:53,699
how HTTP works and if you don't

994
00:34:53,699 --> 00:34:55,859
understand how HTTP works that's even

995
00:34:55,859 --> 00:34:58,140
better because you can come in and take

996
00:34:58,140 --> 00:34:59,700
all these learnings away next slide

997
00:34:59,700 --> 00:35:01,440
please

998
00:35:01,440 --> 00:35:03,660
um and it's not it's definitely not the

999
00:35:03,660 --> 00:35:06,960
web over EBP it's it's here for for many

1000
00:35:06,960 --> 00:35:10,020
applications in our working group uh we

1001
00:35:10,020 --> 00:35:11,700
can help advise you if you want to use

1002
00:35:11,700 --> 00:35:13,500
Quick uh but we we won't be The

1003
00:35:13,500 --> 00:35:15,300
Gatekeepers for application mapping

1004
00:35:15,300 --> 00:35:16,980
documents that describe how to use Quick

1005
00:35:16,980 --> 00:35:19,140
generally the transport services it

1006
00:35:19,140 --> 00:35:21,119
provides work now

1007
00:35:21,119 --> 00:35:23,220
um module some implementation concerns

1008
00:35:23,220 --> 00:35:25,920
but it's it's here for everyone to use

1009
00:35:25,920 --> 00:35:27,960
it's not the only thing you should use

1010
00:35:27,960 --> 00:35:30,119
it's not you know our Panacea of

1011
00:35:30,119 --> 00:35:32,579
everything but it's definitely a tool to

1012
00:35:32,579 --> 00:35:34,740
sit in your toolkit for internet next

1013
00:35:34,740 --> 00:35:37,220
slide please

1014
00:35:37,440 --> 00:35:39,420
um and it's quick quick is quick next

1015
00:35:39,420 --> 00:35:41,339
slide

1016
00:35:41,339 --> 00:35:43,859
it's a secure transport protocol which

1017
00:35:43,859 --> 00:35:45,540
means we might have some issues trying

1018
00:35:45,540 --> 00:35:47,460
to analyze it if we're doing things like

1019
00:35:47,460 --> 00:35:49,560
packet captures just keep this in mind

1020
00:35:49,560 --> 00:35:51,060
that some of the things you might be

1021
00:35:51,060 --> 00:35:52,800
able to do with TCP where you're

1022
00:35:52,800 --> 00:35:54,960
analyzing it with tools like Wireshark

1023
00:35:54,960 --> 00:35:56,520
they're not impossible but they're

1024
00:35:56,520 --> 00:35:58,079
different and they might require

1025
00:35:58,079 --> 00:36:01,560
different approaches next slide

1026
00:36:01,560 --> 00:36:03,060
and it's what you make it which I've

1027
00:36:03,060 --> 00:36:06,180
already touched on next slide

1028
00:36:06,180 --> 00:36:07,260
um so if you haven't got the time for

1029
00:36:07,260 --> 00:36:08,880
any of this quick starts with a

1030
00:36:08,880 --> 00:36:11,339
handshake we have application data sent

1031
00:36:11,339 --> 00:36:13,500
as soon as that handshake is done for

1032
00:36:13,500 --> 00:36:15,480
some definition of then Ian just talked

1033
00:36:15,480 --> 00:36:17,760
about zero rtt there's different

1034
00:36:17,760 --> 00:36:19,200
um effectively stages within the

1035
00:36:19,200 --> 00:36:21,660
connection that application data can be

1036
00:36:21,660 --> 00:36:24,660
exchanged but it all relies on this

1037
00:36:24,660 --> 00:36:27,720
handshake happening first post that at

1038
00:36:27,720 --> 00:36:29,099
some phase within that checkpoint

1039
00:36:29,099 --> 00:36:30,960
package is going to be protected if you

1040
00:36:30,960 --> 00:36:32,400
don't have the keys for that session

1041
00:36:32,400 --> 00:36:33,780
you're not going to be able to see the

1042
00:36:33,780 --> 00:36:36,240
contents you'll have a very slim sliver

1043
00:36:36,240 --> 00:36:38,760
of information available in a header

1044
00:36:38,760 --> 00:36:39,359
um

1045
00:36:39,359 --> 00:36:42,540
it's tiny and you can't just rely on

1046
00:36:42,540 --> 00:36:43,619
that

1047
00:36:43,619 --> 00:36:45,480
um and the other important thing maybe

1048
00:36:45,480 --> 00:36:47,579
it's been touched on already but we we

1049
00:36:47,579 --> 00:36:49,500
have a reliable and reliable application

1050
00:36:49,500 --> 00:36:52,020
data the reliable data is re-transmitted

1051
00:36:52,020 --> 00:36:54,300
in new packets it's not re-transmitted

1052
00:36:54,300 --> 00:36:58,079
in in the packet being resent this can

1053
00:36:58,079 --> 00:36:59,579
cause differences in the way that

1054
00:36:59,579 --> 00:37:01,380
packets and framing work if you're

1055
00:37:01,380 --> 00:37:02,940
familiar with TCP and you're trying to

1056
00:37:02,940 --> 00:37:04,980
look for maybe particular byte offsets

1057
00:37:04,980 --> 00:37:07,920
within a packet capture this isn't not

1058
00:37:07,920 --> 00:37:09,119
the way to do it you're going to have to

1059
00:37:09,119 --> 00:37:11,460
drill down into streams and probably any

1060
00:37:11,460 --> 00:37:13,859
application layer use of that stream or

1061
00:37:13,859 --> 00:37:16,260
reframing or subframing on top of quick

1062
00:37:16,260 --> 00:37:19,380
streams next slide please

1063
00:37:19,380 --> 00:37:20,700
um and we'll talk about applicability

1064
00:37:20,700 --> 00:37:22,320
management too

1065
00:37:22,320 --> 00:37:24,180
um whatever we mean by management of a

1066
00:37:24,180 --> 00:37:26,579
network maybe if you're just an operator

1067
00:37:26,579 --> 00:37:28,859
a network then you're the manager I

1068
00:37:28,859 --> 00:37:30,420
don't want to get into that but we have

1069
00:37:30,420 --> 00:37:32,160
two excellent drafts that have been

1070
00:37:32,160 --> 00:37:34,920
published uh in September so fairly

1071
00:37:34,920 --> 00:37:36,180
recently but they've been developed

1072
00:37:36,180 --> 00:37:39,119
alongside their core Roc specs uh you

1073
00:37:39,119 --> 00:37:42,839
know 899 through 9003

1074
00:37:42,839 --> 00:37:44,220
um and they cover two different aspects

1075
00:37:44,220 --> 00:37:45,180
of things

1076
00:37:45,180 --> 00:37:46,619
you might not be aware of these

1077
00:37:46,619 --> 00:37:48,720
documents they're a really good read if

1078
00:37:48,720 --> 00:37:49,920
if you want to get away from the

1079
00:37:49,920 --> 00:37:51,780
nitty-gritty protocol details which are

1080
00:37:51,780 --> 00:37:53,520
good but you know that's more of a

1081
00:37:53,520 --> 00:37:55,560
reference manual these documents are

1082
00:37:55,560 --> 00:37:57,359
written for a different target audience

1083
00:37:57,359 --> 00:37:58,800
the first one in the applicability draft

1084
00:37:58,800 --> 00:38:03,119
RFC 9308 uh talks about the features of

1085
00:38:03,119 --> 00:38:05,400
a transport protocol how you might adapt

1086
00:38:05,400 --> 00:38:08,400
your application whatever that is

1087
00:38:08,400 --> 00:38:10,859
um to work on top of quick but not just

1088
00:38:10,859 --> 00:38:12,900
an instruction guide but the caveats are

1089
00:38:12,900 --> 00:38:14,339
considerations that you might need to

1090
00:38:14,339 --> 00:38:16,380
make where you have stream concurrency

1091
00:38:16,380 --> 00:38:17,760
that's a different feature compared to

1092
00:38:17,760 --> 00:38:19,920
TCP which had one single reliable byte

1093
00:38:19,920 --> 00:38:22,200
stream quick off easy a lot more things

1094
00:38:22,200 --> 00:38:23,820
and a lot more ways you could hurt

1095
00:38:23,820 --> 00:38:26,520
yourself and a lot more potential for

1096
00:38:26,520 --> 00:38:30,000
interrupt consider problems where you

1097
00:38:30,000 --> 00:38:31,680
have a client in the server that have a

1098
00:38:31,680 --> 00:38:33,119
different kind of understanding about

1099
00:38:33,119 --> 00:38:35,700
what concurrency means for example so

1100
00:38:35,700 --> 00:38:37,560
it's an excellent documentation document

1101
00:38:37,560 --> 00:38:40,079
for that kind of thing

1102
00:38:40,079 --> 00:38:41,040
um and then a completely different

1103
00:38:41,040 --> 00:38:42,780
target audience in the manageability

1104
00:38:42,780 --> 00:38:45,300
draft which is more for people who uh

1105
00:38:45,300 --> 00:38:47,160
aren't operating a quick stack entirely

1106
00:38:47,160 --> 00:38:48,960
but seeing quick traffic flowing back

1107
00:38:48,960 --> 00:38:50,820
and forth across their Network so this

1108
00:38:50,820 --> 00:38:52,800
touches on the quicker variants and the

1109
00:38:52,800 --> 00:38:54,599
quick transport protocol

1110
00:38:54,599 --> 00:38:57,300
um and gives you effectively

1111
00:38:57,300 --> 00:38:59,460
um some explanation about what quick is

1112
00:38:59,460 --> 00:39:01,619
and what quick will be maybe how to

1113
00:39:01,619 --> 00:39:04,200
analyze it maybe how you won't be able

1114
00:39:04,200 --> 00:39:05,700
to analyze it compared to other

1115
00:39:05,700 --> 00:39:07,440
protocols that are traversing your

1116
00:39:07,440 --> 00:39:11,160
network so next slide please

1117
00:39:11,160 --> 00:39:12,839
um again let's go back everything starts

1118
00:39:12,839 --> 00:39:14,700
with a handshake there's all the the

1119
00:39:14,700 --> 00:39:16,740
places where handshakes mentioned it's

1120
00:39:16,740 --> 00:39:18,660
everywhere it's great uh this is already

1121
00:39:18,660 --> 00:39:20,160
covered I hope

1122
00:39:20,160 --> 00:39:21,540
um but the key items here I want to

1123
00:39:21,540 --> 00:39:23,339
focus on today are these two packet

1124
00:39:23,339 --> 00:39:25,260
types that we have initial and handshake

1125
00:39:25,260 --> 00:39:26,880
these are the things you'll probably see

1126
00:39:26,880 --> 00:39:29,460
in the first five lines of any

1127
00:39:29,460 --> 00:39:31,200
structure that you take

1128
00:39:31,200 --> 00:39:33,420
um the initial is not type is a type so

1129
00:39:33,420 --> 00:39:35,220
it's not an adjective sometimes when I

1130
00:39:35,220 --> 00:39:36,300
talk to people who aren't familiar with

1131
00:39:36,300 --> 00:39:37,859
quick and talk let's say you know we

1132
00:39:37,859 --> 00:39:39,240
need to see the initial packet and they

1133
00:39:39,240 --> 00:39:41,820
think they mean the first one but you

1134
00:39:41,820 --> 00:39:44,099
get things like re-transmissions or

1135
00:39:44,099 --> 00:39:46,260
retries reattempts to send the initial

1136
00:39:46,260 --> 00:39:48,480
and you'll see multiple initials

1137
00:39:48,480 --> 00:39:50,520
um and they they also hinge on the the

1138
00:39:50,520 --> 00:39:52,320
actor in The Exchange so you'd have a

1139
00:39:52,320 --> 00:39:54,540
client initial the server initial using

1140
00:39:54,540 --> 00:39:56,940
the terminology like I'm that person who

1141
00:39:56,940 --> 00:39:58,619
insists on trying to use it correctly

1142
00:39:58,619 --> 00:40:01,020
and to to everyone's annoyance but it's

1143
00:40:01,020 --> 00:40:03,420
really critical here and and my my

1144
00:40:03,420 --> 00:40:05,160
understanding is we need to up level a

1145
00:40:05,160 --> 00:40:06,900
lot of people within the wider ecosystem

1146
00:40:06,900 --> 00:40:10,320
people like sres or operations to really

1147
00:40:10,320 --> 00:40:12,359
they don't need to understand all of the

1148
00:40:12,359 --> 00:40:13,440
details but when we're just

1149
00:40:13,440 --> 00:40:16,619
communicating can you help me and see if

1150
00:40:16,619 --> 00:40:18,839
the initial made it through through the

1151
00:40:18,839 --> 00:40:20,640
network and arrived at my server stack

1152
00:40:20,640 --> 00:40:23,220
these kind of conversations people can

1153
00:40:23,220 --> 00:40:25,079
be familiar with the TLs technology like

1154
00:40:25,079 --> 00:40:27,180
did we receive the client hello it's

1155
00:40:27,180 --> 00:40:29,040
similar to this kind of thing

1156
00:40:29,040 --> 00:40:29,760
um

1157
00:40:29,760 --> 00:40:32,400
so but if that's one thing I would ask

1158
00:40:32,400 --> 00:40:34,560
you to focus on and take away

1159
00:40:34,560 --> 00:40:38,779
um use the right terms next slide please

1160
00:40:38,940 --> 00:40:40,680
so there's this excellent tool called

1161
00:40:40,680 --> 00:40:44,640
The Illustrated guide to stuff I can't

1162
00:40:44,640 --> 00:40:46,140
remember the right name uh there's a

1163
00:40:46,140 --> 00:40:48,060
link here uh it covers not just quick

1164
00:40:48,060 --> 00:40:51,660
but TLS 1.2 1.3 I think

1165
00:40:51,660 --> 00:40:55,020
um this is a visualization of of actual

1166
00:40:55,020 --> 00:40:57,119
kind of simulated data if you go to that

1167
00:40:57,119 --> 00:40:59,400
website in the repo behind it you'll see

1168
00:40:59,400 --> 00:41:02,280
that they use kind of real client server

1169
00:41:02,280 --> 00:41:05,220
interactions and take the pcapp and then

1170
00:41:05,220 --> 00:41:08,220
take those bytes so um you can see here

1171
00:41:08,220 --> 00:41:09,900
I've just tried to point the text as

1172
00:41:09,900 --> 00:41:11,700
well I apologize but there's a lot of

1173
00:41:11,700 --> 00:41:13,560
stuff going on I do encourage you to go

1174
00:41:13,560 --> 00:41:15,300
visit it but you can see there's there's

1175
00:41:15,300 --> 00:41:16,859
two different initials within this

1176
00:41:16,859 --> 00:41:18,599
vertical trace the client initial and

1177
00:41:18,599 --> 00:41:20,760
the server initial the arrows there kind

1178
00:41:20,760 --> 00:41:23,400
of pointing in the opposite directions

1179
00:41:23,400 --> 00:41:25,980
um so if you go to the next slide

1180
00:41:25,980 --> 00:41:28,859
each of these boxes you can expand and

1181
00:41:28,859 --> 00:41:30,480
it's really meant as a learning tool

1182
00:41:30,480 --> 00:41:32,099
this isn't a debug tool

1183
00:41:32,099 --> 00:41:34,380
um the bytes here you can like so you

1184
00:41:34,380 --> 00:41:35,460
can go into the GitHub and they're

1185
00:41:35,460 --> 00:41:37,640
canned and you can go and understand

1186
00:41:37,640 --> 00:41:40,500
exactly maybe you want to go and Fiddle

1187
00:41:40,500 --> 00:41:42,900
or do other things maybe you've got some

1188
00:41:42,900 --> 00:41:44,339
comments on the additional kind of

1189
00:41:44,339 --> 00:41:45,839
annotations you might like to see but

1190
00:41:45,839 --> 00:41:47,280
you can you can open up the client

1191
00:41:47,280 --> 00:41:49,680
initial you can view the TLs client

1192
00:41:49,680 --> 00:41:52,680
hello within that client initial and

1193
00:41:52,680 --> 00:41:54,420
then drill down into different bytes

1194
00:41:54,420 --> 00:41:56,460
there so it's good if you just want to

1195
00:41:56,460 --> 00:41:58,800
say maybe take an existing trace and

1196
00:41:58,800 --> 00:42:00,839
compare it to kind of a reference

1197
00:42:00,839 --> 00:42:04,460
example say next slide please

1198
00:42:04,740 --> 00:42:06,540
um just to drill even further in there

1199
00:42:06,540 --> 00:42:08,280
are these transport parameters these are

1200
00:42:08,280 --> 00:42:10,380
the the properties of a it's a

1201
00:42:10,380 --> 00:42:12,480
connection that each endpoint will

1202
00:42:12,480 --> 00:42:14,520
advertise to its peer we don't have time

1203
00:42:14,520 --> 00:42:15,780
to go into that

1204
00:42:15,780 --> 00:42:17,280
um but if if you're like looking at a

1205
00:42:17,280 --> 00:42:18,780
packet capture and you see and you're

1206
00:42:18,780 --> 00:42:19,859
drilling down and you see these

1207
00:42:19,859 --> 00:42:21,720
transport parameters and you think what

1208
00:42:21,720 --> 00:42:23,400
what are these going looking Ayana they

1209
00:42:23,400 --> 00:42:25,680
should be registered there maybe not but

1210
00:42:25,680 --> 00:42:26,880
you know this will give you a brief

1211
00:42:26,880 --> 00:42:28,740
overview most of these are in RFC 9000

1212
00:42:28,740 --> 00:42:30,599
but we have things like extensions which

1213
00:42:30,599 --> 00:42:32,820
would use transport parameters these

1214
00:42:32,820 --> 00:42:34,560
kinds of things might be new to you you

1215
00:42:34,560 --> 00:42:36,359
might say I'm seeing some kind of issue

1216
00:42:36,359 --> 00:42:39,420
and it could be related to you know a

1217
00:42:39,420 --> 00:42:42,180
mismatch or an impedance there you can

1218
00:42:42,180 --> 00:42:43,380
see on the right hand side is this full

1219
00:42:43,380 --> 00:42:45,300
expansion of what all these things mean

1220
00:42:45,300 --> 00:42:48,140
looks like please

1221
00:42:48,240 --> 00:42:49,859
um so let's look at an illustration from

1222
00:42:49,859 --> 00:42:51,660
Live Connections we just looked at you

1223
00:42:51,660 --> 00:42:53,700
know the some pre-canned examples you

1224
00:42:53,700 --> 00:42:55,380
can use your old friends pcapp and

1225
00:42:55,380 --> 00:42:57,680
Wireshark to look at this uh to just

1226
00:42:57,680 --> 00:42:59,760
successfully does that quick packet to

1227
00:42:59,760 --> 00:43:02,520
get any division of Wireshark 3.4 and

1228
00:43:02,520 --> 00:43:03,960
upwards

1229
00:43:03,960 --> 00:43:06,119
um the examples here for the remainder

1230
00:43:06,119 --> 00:43:07,800
of this session I just created using

1231
00:43:07,800 --> 00:43:09,540
cloudflare quiche I work for cloudflare

1232
00:43:09,540 --> 00:43:11,040
it's the client and the server I'm most

1233
00:43:11,040 --> 00:43:12,839
familiar with we have some example apps

1234
00:43:12,839 --> 00:43:14,880
in the repo pretty much any other client

1235
00:43:14,880 --> 00:43:16,680
is going to be very similar to this so

1236
00:43:16,680 --> 00:43:18,180
if you have a favorite you could

1237
00:43:18,180 --> 00:43:20,579
probably recreate these things but just

1238
00:43:20,579 --> 00:43:22,380
in this example have a server running on

1239
00:43:22,380 --> 00:43:26,099
localhost these flags effectively uh

1240
00:43:26,099 --> 00:43:28,319
minimize the handshake they just reduce

1241
00:43:28,319 --> 00:43:31,079
a few steps for clarity if I didn't have

1242
00:43:31,079 --> 00:43:33,060
that no retry flag for instance it would

1243
00:43:33,060 --> 00:43:34,740
send an additional message during the

1244
00:43:34,740 --> 00:43:36,660
handshake it's all cool but it's

1245
00:43:36,660 --> 00:43:38,700
complicated we don't have the time

1246
00:43:38,700 --> 00:43:39,780
um it's okay you can kind of ignore

1247
00:43:39,780 --> 00:43:41,520
those things but yeah this is just a

1248
00:43:41,520 --> 00:43:43,740
request on my Local Host to get an index

1249
00:43:43,740 --> 00:43:45,660
file and that pick up underneath what

1250
00:43:45,660 --> 00:43:47,640
you see is

1251
00:43:47,640 --> 00:43:49,500
very small text and you probably can't

1252
00:43:49,500 --> 00:43:51,599
see it but um that's kind of the point

1253
00:43:51,599 --> 00:43:52,859
because I want you to go and look at

1254
00:43:52,859 --> 00:43:54,480
this itself but the first the first

1255
00:43:54,480 --> 00:43:56,339
packet or the first line there is the

1256
00:43:56,339 --> 00:43:58,980
client initial going towards the server

1257
00:43:58,980 --> 00:44:00,540
um and then we have some stuff coming

1258
00:44:00,540 --> 00:44:02,760
back in the other way it says handshake

1259
00:44:02,760 --> 00:44:04,200
there but we're going to drill into that

1260
00:44:04,200 --> 00:44:06,439
next

1261
00:44:08,700 --> 00:44:11,579
um well one more um so I have some

1262
00:44:11,579 --> 00:44:13,140
ready-made examples speaking with Brian

1263
00:44:13,140 --> 00:44:14,760
we thought it would be cool to like take

1264
00:44:14,760 --> 00:44:17,640
some live real things that I captured

1265
00:44:17,640 --> 00:44:20,339
and put up on GitHub this these pcaps

1266
00:44:20,339 --> 00:44:22,260
and Q logs that I've got for local who's

1267
00:44:22,260 --> 00:44:24,300
good just a simple good exchange of a

1268
00:44:24,300 --> 00:44:26,280
request that succeeded at the quick

1269
00:44:26,280 --> 00:44:28,140
layer at least

1270
00:44:28,140 --> 00:44:31,619
um so next slide please

1271
00:44:31,619 --> 00:44:34,500
um again too tiny to see but if you

1272
00:44:34,500 --> 00:44:35,940
opened up Wireshark and you clicked on

1273
00:44:35,940 --> 00:44:37,859
your first line and you expanded out all

1274
00:44:37,859 --> 00:44:39,180
the details you're going to see a few

1275
00:44:39,180 --> 00:44:41,520
indicators here about what is the client

1276
00:44:41,520 --> 00:44:42,780
initial

1277
00:44:42,780 --> 00:44:44,640
um it's easier it's a lot easier here

1278
00:44:44,640 --> 00:44:46,740
because we've only got you know a very

1279
00:44:46,740 --> 00:44:50,040
small pcap of of one interaction and we

1280
00:44:50,040 --> 00:44:51,839
already know that but if you're kind of

1281
00:44:51,839 --> 00:44:53,460
trying to find a needle in a haystack

1282
00:44:53,460 --> 00:44:54,839
trying to look for some of these things

1283
00:44:54,839 --> 00:44:57,000
it can be a bit difficult but yeah we've

1284
00:44:57,000 --> 00:44:58,619
got indicators like the source port or

1285
00:44:58,619 --> 00:45:00,720
the destination Port this is a bad

1286
00:45:00,720 --> 00:45:02,579
indicator using Source sport don't rely

1287
00:45:02,579 --> 00:45:05,040
on that being anything it could be the

1288
00:45:05,040 --> 00:45:06,540
same for everything because quick is

1289
00:45:06,540 --> 00:45:09,540
clever but alongside that within the the

1290
00:45:09,540 --> 00:45:11,640
packet type information here we've got

1291
00:45:11,640 --> 00:45:13,680
you know dissection to tell you the type

1292
00:45:13,680 --> 00:45:17,460
based on stuff and underneath within

1293
00:45:17,460 --> 00:45:19,560
within the contents of the client

1294
00:45:19,560 --> 00:45:22,260
initial we have the the client hello so

1295
00:45:22,260 --> 00:45:23,880
this is the TLs client Hello message

1296
00:45:23,880 --> 00:45:26,280
again zooming in we see the transport

1297
00:45:26,280 --> 00:45:28,020
parameters this is exactly the same as

1298
00:45:28,020 --> 00:45:29,640
the other slide I showed you but these

1299
00:45:29,640 --> 00:45:31,319
are the actual transport parameters is

1300
00:45:31,319 --> 00:45:33,960
that the the quiche client sends in this

1301
00:45:33,960 --> 00:45:37,400
case next slide please

1302
00:45:37,400 --> 00:45:39,240
important thing here is application

1303
00:45:39,240 --> 00:45:40,859
layer protocol negotiation I don't

1304
00:45:40,859 --> 00:45:42,180
really have the time to get into this at

1305
00:45:42,180 --> 00:45:44,400
all but the in this case what happens is

1306
00:45:44,400 --> 00:45:45,900
the client's going to send a whole set

1307
00:45:45,900 --> 00:45:47,540
of different

1308
00:45:47,540 --> 00:45:50,339
variants or versions of HTTP that it

1309
00:45:50,339 --> 00:45:51,359
talks

1310
00:45:51,359 --> 00:45:53,900
um so it's like an offer answer

1311
00:45:53,900 --> 00:45:57,060
application protocol and this is it you

1312
00:45:57,060 --> 00:45:59,220
might see different lists different sets

1313
00:45:59,220 --> 00:46:01,140
of protocols in there if you're writing

1314
00:46:01,140 --> 00:46:03,180
your protocol you should definitely make

1315
00:46:03,180 --> 00:46:06,960
an alpn for it because it helps you

1316
00:46:06,960 --> 00:46:08,640
allow multiplexing of different

1317
00:46:08,640 --> 00:46:10,560
applications maybe if you just want to

1318
00:46:10,560 --> 00:46:12,540
set up one quick listening port and

1319
00:46:12,540 --> 00:46:15,000
support a slew of applications on there

1320
00:46:15,000 --> 00:46:17,040
um this touches on the applicability

1321
00:46:17,040 --> 00:46:19,200
draft there's things you should consider

1322
00:46:19,200 --> 00:46:21,060
around transport parameters in relation

1323
00:46:21,060 --> 00:46:23,160
to the application virtual you're trying

1324
00:46:23,160 --> 00:46:24,960
to negotiate and where things might not

1325
00:46:24,960 --> 00:46:27,480
completely converge but that's another

1326
00:46:27,480 --> 00:46:29,339
talk for another day go read the

1327
00:46:29,339 --> 00:46:33,140
applicability draft next slide please

1328
00:46:33,359 --> 00:46:35,040
um in a reverse direction we have a

1329
00:46:35,040 --> 00:46:37,079
server initial and a handshake

1330
00:46:37,079 --> 00:46:38,099
um and you can see in the top the

1331
00:46:38,099 --> 00:46:39,300
indicators are kind of similar The

1332
00:46:39,300 --> 00:46:41,520
Source Port is the server's listening

1333
00:46:41,520 --> 00:46:44,520
address that we showed um in the line a

1334
00:46:44,520 --> 00:46:46,920
couple slides back uh we have the the

1335
00:46:46,920 --> 00:46:49,380
initial type again indicated

1336
00:46:49,380 --> 00:46:51,119
um and then just below that we have a

1337
00:46:51,119 --> 00:46:54,180
server hello coming back

1338
00:46:54,180 --> 00:46:55,680
um but we can't see as much information

1339
00:46:55,680 --> 00:46:58,560
as we could in the client initial

1340
00:46:58,560 --> 00:47:00,359
um we have this server handshake packet

1341
00:47:00,359 --> 00:47:01,800
just underneath

1342
00:47:01,800 --> 00:47:03,240
um but you can see it's been quite clear

1343
00:47:03,240 --> 00:47:05,160
there we can't decrypt anymore because

1344
00:47:05,160 --> 00:47:06,540
the secrets aren't available what does

1345
00:47:06,540 --> 00:47:10,339
that mean next slide please

1346
00:47:10,380 --> 00:47:11,940
um we need the keys we need the keys to

1347
00:47:11,940 --> 00:47:13,260
see the full picture

1348
00:47:13,260 --> 00:47:15,060
um for me even in that early stage of

1349
00:47:15,060 --> 00:47:16,079
you know

1350
00:47:16,079 --> 00:47:18,480
one and two interactions going in in

1351
00:47:18,480 --> 00:47:20,400
opposite directions

1352
00:47:20,400 --> 00:47:21,660
um we might not be able to see

1353
00:47:21,660 --> 00:47:22,859
everything that's happening that would

1354
00:47:22,859 --> 00:47:24,780
help us diagnose some kind of issue that

1355
00:47:24,780 --> 00:47:25,920
might be happening early in the

1356
00:47:25,920 --> 00:47:27,480
connection you're probably familiar with

1357
00:47:27,480 --> 00:47:29,280
something called SSL key log file but if

1358
00:47:29,280 --> 00:47:30,599
you're not

1359
00:47:30,599 --> 00:47:32,220
um it's used by many but not all

1360
00:47:32,220 --> 00:47:34,140
implementations endpoints can be

1361
00:47:34,140 --> 00:47:35,520
instructed with like an environment

1362
00:47:35,520 --> 00:47:37,380
variable or maybe

1363
00:47:37,380 --> 00:47:40,079
you know just built or configured to

1364
00:47:40,079 --> 00:47:43,260
drop sorry Place their keys explicitly

1365
00:47:43,260 --> 00:47:46,079
in a location that can be

1366
00:47:46,079 --> 00:47:48,720
used to contain the session keys in a

1367
00:47:48,720 --> 00:47:49,980
format

1368
00:47:49,980 --> 00:47:51,599
um this is kind of common it's a de

1369
00:47:51,599 --> 00:47:53,160
facto standard Martin's been working on

1370
00:47:53,160 --> 00:47:55,020
a new ID to kind of formalize this

1371
00:47:55,020 --> 00:47:58,020
format which is good work

1372
00:47:58,020 --> 00:47:59,760
um uh but the session keys are

1373
00:47:59,760 --> 00:48:01,680
symmetrical so if you can drop them from

1374
00:48:01,680 --> 00:48:03,660
the server or the client end you should

1375
00:48:03,660 --> 00:48:06,060
be able to decrypt the the packets for

1376
00:48:06,060 --> 00:48:07,980
anything so depending on who you are

1377
00:48:07,980 --> 00:48:10,319
what you're in control of sometimes you

1378
00:48:10,319 --> 00:48:13,140
can you can use this as a kind of I need

1379
00:48:13,140 --> 00:48:15,119
to see both directions of traffic in

1380
00:48:15,119 --> 00:48:16,560
this example like I said we're just

1381
00:48:16,560 --> 00:48:18,480
using an environment variable

1382
00:48:18,480 --> 00:48:20,640
um to to dump some keys into files

1383
00:48:20,640 --> 00:48:22,920
locally we can configure Wireshark to

1384
00:48:22,920 --> 00:48:26,160
pick that file up next slide please

1385
00:48:26,160 --> 00:48:27,380
um

1386
00:48:27,380 --> 00:48:30,119
okay so we I can't go into it but yeah

1387
00:48:30,119 --> 00:48:31,800
the Wireshark documentation will explain

1388
00:48:31,800 --> 00:48:33,420
this and go into your preferences or

1389
00:48:33,420 --> 00:48:34,920
there's all kinds of cool tricks you can

1390
00:48:34,920 --> 00:48:36,599
use but once you're configured once it

1391
00:48:36,599 --> 00:48:38,819
finds the correct session keys for an

1392
00:48:38,819 --> 00:48:39,900
interaction

1393
00:48:39,900 --> 00:48:41,220
um this is again the same kind of

1394
00:48:41,220 --> 00:48:42,839
dissection I showed earlier but this

1395
00:48:42,839 --> 00:48:45,060
time that handshake packet is revealing

1396
00:48:45,060 --> 00:48:46,800
a lot more information it's showing the

1397
00:48:46,800 --> 00:48:49,440
alpn it's showing that in this case the

1398
00:48:49,440 --> 00:48:52,079
server picked H3 so from that whole list

1399
00:48:52,079 --> 00:48:53,760
of things it picked one

1400
00:48:53,760 --> 00:48:56,960
next slide please

1401
00:48:57,300 --> 00:48:59,579
um but if we revisit the kind of

1402
00:48:59,579 --> 00:49:01,260
complete picture not just the one packet

1403
00:49:01,260 --> 00:49:03,060
we can see the dissection without the

1404
00:49:03,060 --> 00:49:05,460
keys there's some you know the top four

1405
00:49:05,460 --> 00:49:07,859
lines too small again sorry but

1406
00:49:07,859 --> 00:49:09,420
um we've got some packet types and then

1407
00:49:09,420 --> 00:49:11,640
it trans uh kind of converts into those

1408
00:49:11,640 --> 00:49:14,160
protected payload where we can see

1409
00:49:14,160 --> 00:49:16,560
a feel called the dzid I'll explain that

1410
00:49:16,560 --> 00:49:19,440
in a couple of slides but um that's it

1411
00:49:19,440 --> 00:49:20,880
if you click those things you're just

1412
00:49:20,880 --> 00:49:23,460
going to see opaque bytes and you're not

1413
00:49:23,460 --> 00:49:25,079
going to know what they are with the

1414
00:49:25,079 --> 00:49:27,359
dissection well with keys you can see

1415
00:49:27,359 --> 00:49:28,859
that we're actually can drill in now we

1416
00:49:28,859 --> 00:49:30,720
can see different packet types packet

1417
00:49:30,720 --> 00:49:34,020
numbers frames within those packet types

1418
00:49:34,020 --> 00:49:36,000
um stuff around streams acknowledgments

1419
00:49:36,000 --> 00:49:40,079
crypto etc etc next slide please

1420
00:49:40,079 --> 00:49:42,240
and then attachments said these are

1421
00:49:42,240 --> 00:49:44,700
connection IDs if you look in this

1422
00:49:44,700 --> 00:49:46,079
example we're going to see different

1423
00:49:46,079 --> 00:49:48,240
connection IDs going in opposite

1424
00:49:48,240 --> 00:49:49,920
directions this can be useful if you're

1425
00:49:49,920 --> 00:49:51,720
just trying to trace

1426
00:49:51,720 --> 00:49:53,700
um you know connections of a particular

1427
00:49:53,700 --> 00:49:55,020
type again if you're trying to find a

1428
00:49:55,020 --> 00:49:56,940
needle in a haystack

1429
00:49:56,940 --> 00:49:59,579
next slide

1430
00:49:59,579 --> 00:50:02,160
um so that's why shark and that does one

1431
00:50:02,160 --> 00:50:03,420
thing well especially if you can dump

1432
00:50:03,420 --> 00:50:05,099
the keys but we have something called q

1433
00:50:05,099 --> 00:50:07,680
log which is like my colleague Robin

1434
00:50:07,680 --> 00:50:09,960
down the front has been working on for a

1435
00:50:09,960 --> 00:50:11,880
number of years he'll tell me my

1436
00:50:11,880 --> 00:50:13,440
description is rubbish here so go and

1437
00:50:13,440 --> 00:50:15,900
speak to us at the end and we can inform

1438
00:50:15,900 --> 00:50:17,460
you everything but

1439
00:50:17,460 --> 00:50:19,140
um you know the implementations often

1440
00:50:19,140 --> 00:50:21,720
have debugging or you know logging of

1441
00:50:21,720 --> 00:50:24,060
their own to augment stuff like packet

1442
00:50:24,060 --> 00:50:25,740
captures you can see kind of the reason

1443
00:50:25,740 --> 00:50:28,140
why something happened not just the fact

1444
00:50:28,140 --> 00:50:29,819
that it did happen

1445
00:50:29,819 --> 00:50:32,400
um and then a common logging format can

1446
00:50:32,400 --> 00:50:33,500
encourage

1447
00:50:33,500 --> 00:50:36,660
ecosystem of analysis and tooling

1448
00:50:36,660 --> 00:50:39,300
um that isn't just specific to an

1449
00:50:39,300 --> 00:50:40,859
implementation

1450
00:50:40,859 --> 00:50:42,119
um so so what we have in the quick

1451
00:50:42,119 --> 00:50:44,099
working group is adopted working items

1452
00:50:44,099 --> 00:50:46,859
for a coin of core base schema and cddl

1453
00:50:46,859 --> 00:50:49,380
this is very extensible we can use that

1454
00:50:49,380 --> 00:50:50,940
extensibility to Define concrete

1455
00:50:50,940 --> 00:50:52,260
definitions at the moment we'll just

1456
00:50:52,260 --> 00:50:54,480
focused on quick and HTTP 3 related

1457
00:50:54,480 --> 00:50:56,339
events because that's what we've worked

1458
00:50:56,339 --> 00:50:58,619
on but other kinds of things can be

1459
00:50:58,619 --> 00:51:01,200
added so if you're adding application

1460
00:51:01,200 --> 00:51:03,000
mapping you can

1461
00:51:03,000 --> 00:51:05,220
well maybe you wanted to find some q-log

1462
00:51:05,220 --> 00:51:06,780
events that's something we're trying to

1463
00:51:06,780 --> 00:51:07,980
figure out this week what's the right

1464
00:51:07,980 --> 00:51:10,380
level of guidance to give to people but

1465
00:51:10,380 --> 00:51:13,020
it's extensible it's just logs it's just

1466
00:51:13,020 --> 00:51:14,819
kind of text you can stick stuff in if

1467
00:51:14,819 --> 00:51:16,319
you know how to read it if you know what

1468
00:51:16,319 --> 00:51:17,220
to look

1469
00:51:17,220 --> 00:51:19,380
um but what's nice is the the current

1470
00:51:19,380 --> 00:51:21,660
Fleet of quick implementations many of

1471
00:51:21,660 --> 00:51:24,119
them do support q log so if you're

1472
00:51:24,119 --> 00:51:26,520
trying to find a bug between client and

1473
00:51:26,520 --> 00:51:27,900
server implementations and you

1474
00:51:27,900 --> 00:51:29,220
understand

1475
00:51:29,220 --> 00:51:32,819
like what stack that is say it's curl

1476
00:51:32,819 --> 00:51:35,339
built with hb3 you can

1477
00:51:35,339 --> 00:51:37,200
um enable q log and get this q log

1478
00:51:37,200 --> 00:51:40,079
format out and stick it somewhere that

1479
00:51:40,079 --> 00:51:41,700
will help you analyze maybe fault

1480
00:51:41,700 --> 00:51:42,900
diagnose more quickly or understand

1481
00:51:42,900 --> 00:51:44,280
what's happening with the congestion

1482
00:51:44,280 --> 00:51:47,339
window next slide

1483
00:51:47,339 --> 00:51:50,280
yeah and we have cuviz Robin's lovely

1484
00:51:50,280 --> 00:51:52,619
cue visitor which I would just describe

1485
00:51:52,619 --> 00:51:54,119
as trying to make sense out of Oodles of

1486
00:51:54,119 --> 00:51:55,140
data

1487
00:51:55,140 --> 00:51:57,900
um if if you went on the GitHub and

1488
00:51:57,900 --> 00:51:59,280
grabbed some of the the reference

1489
00:51:59,280 --> 00:52:01,440
material I had you can go to this tool

1490
00:52:01,440 --> 00:52:02,220
now

1491
00:52:02,220 --> 00:52:04,020
um you want to do for option two upload

1492
00:52:04,020 --> 00:52:06,300
a file it's not an upload it's kind of

1493
00:52:06,300 --> 00:52:09,240
all client hosted well for what we would

1494
00:52:09,240 --> 00:52:10,800
analyze today at least

1495
00:52:10,800 --> 00:52:12,240
um so all happened in JavaScript in your

1496
00:52:12,240 --> 00:52:14,640
browser and come up with this kind of

1497
00:52:14,640 --> 00:52:16,859
excellent sequence diagram again way too

1498
00:52:16,859 --> 00:52:18,900
small to see the details here but this

1499
00:52:18,900 --> 00:52:20,760
is effectively rendering the same

1500
00:52:20,760 --> 00:52:22,200
information we just looked back in the

1501
00:52:22,200 --> 00:52:24,660
Wireshark in a different way so this is

1502
00:52:24,660 --> 00:52:26,400
going to give you maybe a bit more of a

1503
00:52:26,400 --> 00:52:29,640
context aware view of packets exchanging

1504
00:52:29,640 --> 00:52:31,140
between the client on the left and the

1505
00:52:31,140 --> 00:52:32,819
server on the right

1506
00:52:32,819 --> 00:52:34,559
um each Line's a packet that's my

1507
00:52:34,559 --> 00:52:36,780
interpretation again Robin correct me at

1508
00:52:36,780 --> 00:52:39,599
the end but um within those you have the

1509
00:52:39,599 --> 00:52:42,599
frames we have kind of a very quick

1510
00:52:42,599 --> 00:52:44,400
summary view of what those frames are

1511
00:52:44,400 --> 00:52:45,900
and then if you click any of those boxes

1512
00:52:45,900 --> 00:52:47,520
it's going to give you an expanded View

1513
00:52:47,520 --> 00:52:50,099
and it's this is a real example but it's

1514
00:52:50,099 --> 00:52:51,540
a good learning tool if you're just

1515
00:52:51,540 --> 00:52:52,859
trying to get familiar if not somebody

1516
00:52:52,859 --> 00:52:54,900
who can read us back

1517
00:52:54,900 --> 00:52:56,700
um you know in one go and walk away and

1518
00:52:56,700 --> 00:52:58,559
understand everything if you're a bit

1519
00:52:58,559 --> 00:53:00,839
more um like me a bit more practical and

1520
00:53:00,839 --> 00:53:02,579
you just want to run some stuff try some

1521
00:53:02,579 --> 00:53:07,640
things out and do this next slide please

1522
00:53:07,980 --> 00:53:09,300
um so I just want to look at a real

1523
00:53:09,300 --> 00:53:11,819
world failure that we had again this is

1524
00:53:11,819 --> 00:53:16,859
using SSL key log file but great and

1525
00:53:16,859 --> 00:53:20,579
no the box is in the wrong place oops so

1526
00:53:20,579 --> 00:53:22,440
um yeah it's using SSL key log file

1527
00:53:22,440 --> 00:53:25,260
amazing but there's a property in hb3

1528
00:53:25,260 --> 00:53:26,819
you need to be able to open some new

1529
00:53:26,819 --> 00:53:28,619
directional streams again don't have the

1530
00:53:28,619 --> 00:53:30,059
time to go into that but you can

1531
00:53:30,059 --> 00:53:31,680
configure this quiche client this

1532
00:53:31,680 --> 00:53:34,980
example application to advertise

1533
00:53:34,980 --> 00:53:37,140
um from the client to the server a value

1534
00:53:37,140 --> 00:53:40,500
of zero that it can open zero initial uh

1535
00:53:40,500 --> 00:53:42,000
unidirectional streams when the

1536
00:53:42,000 --> 00:53:43,559
handshake is complete

1537
00:53:43,559 --> 00:53:45,480
our server code doesn't like that it

1538
00:53:45,480 --> 00:53:47,099
wants to be able to open these streams

1539
00:53:47,099 --> 00:53:49,980
and if it can't it will detect the error

1540
00:53:49,980 --> 00:53:52,380
in the code and send a connection close

1541
00:53:52,380 --> 00:53:55,319
message so an explicit immediate close

1542
00:53:55,319 --> 00:53:58,200
from the server to the client to say

1543
00:53:58,200 --> 00:54:00,540
I want to open up the Control stream I

1544
00:54:00,540 --> 00:54:03,359
can't sorry like go away this is the

1545
00:54:03,359 --> 00:54:04,260
kind of thing you should probably be

1546
00:54:04,260 --> 00:54:05,819
looking for if there's ever a report of

1547
00:54:05,819 --> 00:54:07,740
an issue stream research Connection

1548
00:54:07,740 --> 00:54:09,900
close messages are kind of good strong

1549
00:54:09,900 --> 00:54:12,540
indicators of what happened but maybe

1550
00:54:12,540 --> 00:54:13,980
not why

1551
00:54:13,980 --> 00:54:16,619
next slide

1552
00:54:16,619 --> 00:54:19,260
um same failure same same Trace

1553
00:54:19,260 --> 00:54:21,240
effectively the q log captured at the

1554
00:54:21,240 --> 00:54:23,579
same time a different rendering you can

1555
00:54:23,579 --> 00:54:25,200
see here the connection closes in the

1556
00:54:25,200 --> 00:54:26,940
bottom in red that's as much as you can

1557
00:54:26,940 --> 00:54:29,520
see because of the rendering but yeah um

1558
00:54:29,520 --> 00:54:31,680
it might be a better way to view these

1559
00:54:31,680 --> 00:54:35,000
things next slide

1560
00:54:35,240 --> 00:54:37,859
another one another failure this time

1561
00:54:37,859 --> 00:54:41,280
pretty much an identical command but um

1562
00:54:41,280 --> 00:54:43,020
for a different host name so the last

1563
00:54:43,020 --> 00:54:45,660
one was the localhost and and this time

1564
00:54:45,660 --> 00:54:47,700
to to my website

1565
00:54:47,700 --> 00:54:49,920
um and in the packet well the peacock

1566
00:54:49,920 --> 00:54:51,540
looks a little different

1567
00:54:51,540 --> 00:54:54,660
just just from a mile kind of view it's

1568
00:54:54,660 --> 00:54:56,880
different which is always a good sign of

1569
00:54:56,880 --> 00:54:59,220
if the behavior is different if

1570
00:54:59,220 --> 00:55:01,079
someone's saying this behaves weird for

1571
00:55:01,079 --> 00:55:03,059
this thing and not that one

1572
00:55:03,059 --> 00:55:05,099
um and you see a p-cap that's identical

1573
00:55:05,099 --> 00:55:06,720
that's annoying but if there's something

1574
00:55:06,720 --> 00:55:08,460
like this that's immediately there's a

1575
00:55:08,460 --> 00:55:10,619
change in Behavior that's a good signal

1576
00:55:10,619 --> 00:55:11,940
so here it's like where is that

1577
00:55:11,940 --> 00:55:13,800
connection closed I told you what the

1578
00:55:13,800 --> 00:55:15,300
behavior was what we're expecting we're

1579
00:55:15,300 --> 00:55:17,160
not seeing that why

1580
00:55:17,160 --> 00:55:20,118
next slide please

1581
00:55:20,780 --> 00:55:23,400
it's even worse it's even smaller you

1582
00:55:23,400 --> 00:55:25,440
can't see it the indicator here is it's

1583
00:55:25,440 --> 00:55:27,300
really long there's a lot of things

1584
00:55:27,300 --> 00:55:29,520
going on here in terms of timing

1585
00:55:29,520 --> 00:55:32,099
um there's no collection closed

1586
00:55:32,099 --> 00:55:34,380
received by the there's a bug here it's

1587
00:55:34,380 --> 00:55:35,760
received by the client not the server

1588
00:55:35,760 --> 00:55:38,880
but anyway back to five please

1589
00:55:38,880 --> 00:55:40,319
so what's the difference

1590
00:55:40,319 --> 00:55:41,819
um you know we've got effectively the

1591
00:55:41,819 --> 00:55:43,260
same client Behavior it's just pointing

1592
00:55:43,260 --> 00:55:45,000
at two different endpoints are there

1593
00:55:45,000 --> 00:55:46,200
different implementation are they

1594
00:55:46,200 --> 00:55:48,000
different Stacks no like they use the

1595
00:55:48,000 --> 00:55:50,339
same underlying stack in this case I

1596
00:55:50,339 --> 00:55:52,079
know that but that's because I've got

1597
00:55:52,079 --> 00:55:53,819
Insider knowledge what's the root cause

1598
00:55:53,819 --> 00:55:55,859
what could this possibly be and that's

1599
00:55:55,859 --> 00:55:57,300
what I had to spend some time on the

1600
00:55:57,300 --> 00:56:01,020
other day looking into outside

1601
00:56:01,160 --> 00:56:02,940
there's different types of connection

1602
00:56:02,940 --> 00:56:04,980
close we haven't got the time to go into

1603
00:56:04,980 --> 00:56:07,140
this but you have a transport layer and

1604
00:56:07,140 --> 00:56:09,900
an application layer and um code and

1605
00:56:09,900 --> 00:56:13,500
they send different types and stuff next

1606
00:56:13,500 --> 00:56:15,800
slide

1607
00:56:15,839 --> 00:56:17,819
so the root cause here is a trouble with

1608
00:56:17,819 --> 00:56:20,880
timing the hp3 light library that we use

1609
00:56:20,880 --> 00:56:23,220
for the server side like I said Caesar

1610
00:56:23,220 --> 00:56:25,020
zero doesn't like it calls close on the

1611
00:56:25,020 --> 00:56:26,819
transport layer passes it an application

1612
00:56:26,819 --> 00:56:29,160
layer code and a reason

1613
00:56:29,160 --> 00:56:31,079
um but neither the application or the

1614
00:56:31,079 --> 00:56:33,300
hb3 light retract the transport State

1615
00:56:33,300 --> 00:56:35,520
the handshake had completed correctly at

1616
00:56:35,520 --> 00:56:38,400
that time so that this doesn't happen

1617
00:56:38,400 --> 00:56:39,960
unilaterally but there's some timing

1618
00:56:39,960 --> 00:56:42,240
differences that I found and because

1619
00:56:42,240 --> 00:56:44,339
there's a potential leak of information

1620
00:56:44,339 --> 00:56:46,559
of application layer information before

1621
00:56:46,559 --> 00:56:48,900
the handshake had completed

1622
00:56:48,900 --> 00:56:52,380
um the the RFC says you don't send it

1623
00:56:52,380 --> 00:56:54,240
you know send something you can strip

1624
00:56:54,240 --> 00:56:56,640
some information so that the the peer is

1625
00:56:56,640 --> 00:56:58,440
going to receive That explicit close and

1626
00:56:58,440 --> 00:57:00,540
know that something went wrong but not

1627
00:57:00,540 --> 00:57:02,460
the specific details

1628
00:57:02,460 --> 00:57:06,240
um but that was just a bug and so the

1629
00:57:06,240 --> 00:57:08,700
the server didn't send that the the

1630
00:57:08,700 --> 00:57:11,579
client kept retrying not retiring that's

1631
00:57:11,579 --> 00:57:12,900
what I want to do

1632
00:57:12,900 --> 00:57:14,880
um but eventually the idle timeout

1633
00:57:14,880 --> 00:57:16,140
kicked in and it gave up after to

1634
00:57:16,140 --> 00:57:19,859
several rounds of retry X slide

1635
00:57:19,859 --> 00:57:22,680
and so that that debugging given I had

1636
00:57:22,680 --> 00:57:24,180
some tooling and some knowledge of where

1637
00:57:24,180 --> 00:57:27,119
to look God quite quickly I was able to

1638
00:57:27,119 --> 00:57:28,800
um kind of turn that into a unit test

1639
00:57:28,800 --> 00:57:31,940
come up with a fix which was a one-liner

1640
00:57:31,940 --> 00:57:34,800
and now the client will always receive

1641
00:57:34,800 --> 00:57:36,839
the timely close

1642
00:57:36,839 --> 00:57:39,380
next slide

1643
00:57:39,380 --> 00:57:42,960
so yes in summary it works if you know

1644
00:57:42,960 --> 00:57:44,460
what to do and that's what I want to

1645
00:57:44,460 --> 00:57:46,680
make sure that we can scale out our

1646
00:57:46,680 --> 00:57:48,839
understanding of quick our ability to

1647
00:57:48,839 --> 00:57:50,579
use it it's one thing having us back on

1648
00:57:50,579 --> 00:57:53,339
the Shelf great wow but we want people

1649
00:57:53,339 --> 00:57:55,200
to use this quicker than TCP it's not

1650
00:57:55,200 --> 00:57:57,720
TLS it's not HP all the web of UDP it

1651
00:57:57,720 --> 00:57:59,339
could be anything that you would like it

1652
00:57:59,339 --> 00:58:01,680
to be and there might be use cases that

1653
00:58:01,680 --> 00:58:03,660
you need to use that might need kind of

1654
00:58:03,660 --> 00:58:04,800
slightly different approaches to

1655
00:58:04,800 --> 00:58:07,020
debugging but generally in my opinion

1656
00:58:07,020 --> 00:58:09,780
stuff to do with the initialization the

1657
00:58:09,780 --> 00:58:12,180
the handshake is it's kind of the first

1658
00:58:12,180 --> 00:58:14,160
step and everything

1659
00:58:14,160 --> 00:58:15,599
um

1660
00:58:15,599 --> 00:58:17,700
there's minimal information available on

1661
00:58:17,700 --> 00:58:18,680
the wire

1662
00:58:18,680 --> 00:58:21,240
crc9312 for the for information about

1663
00:58:21,240 --> 00:58:23,460
how to observe quick if you you're not

1664
00:58:23,460 --> 00:58:25,440
as kind of involved in the interactions

1665
00:58:25,440 --> 00:58:26,819
between client and server as you would

1666
00:58:26,819 --> 00:58:27,780
like

1667
00:58:27,780 --> 00:58:29,280
um and and just be aware that

1668
00:58:29,280 --> 00:58:30,839
implementations and deployments can

1669
00:58:30,839 --> 00:58:32,460
behave differently sometimes there's

1670
00:58:32,460 --> 00:58:34,200
bugs sometimes there's a lot of things

1671
00:58:34,200 --> 00:58:36,599
defer to an implementation choice you

1672
00:58:36,599 --> 00:58:38,339
know how it should kind of level of

1673
00:58:38,339 --> 00:58:40,799
normative requirement and just opinions

1674
00:58:40,799 --> 00:58:43,740
of The Operators so I don't assume too

1675
00:58:43,740 --> 00:58:45,359
much I don't assume that the

1676
00:58:45,359 --> 00:58:47,220
implementation is perfect or that a

1677
00:58:47,220 --> 00:58:48,780
behavior that you see that seems weird

1678
00:58:48,780 --> 00:58:52,040
isn't done by intention

1679
00:58:52,380 --> 00:58:54,180
and there's ways you can kind of get

1680
00:58:54,180 --> 00:58:57,000
some logs to do this that's it I'm done

1681
00:58:57,000 --> 00:59:00,180
thank you thank you very much Lucas

1682
00:59:00,180 --> 00:59:04,380
so uh I will ask uh all of our speakers

1683
00:59:04,380 --> 00:59:06,119
um to come up

1684
00:59:06,119 --> 00:59:09,079
um good morning Jonah

1685
00:59:09,780 --> 00:59:13,579
uh Lucas you too

1686
00:59:16,079 --> 00:59:19,099
well that's gonna be cold

1687
00:59:21,900 --> 00:59:23,220
and actually if one of you could grab

1688
00:59:23,220 --> 00:59:24,780
the mic and we'll do the past the mic

1689
00:59:24,780 --> 00:59:27,079
thing

1690
00:59:29,460 --> 00:59:32,520
and if you have any questions for any or

1691
00:59:32,520 --> 00:59:35,099
all of our speakers

1692
00:59:35,099 --> 00:59:36,960
please put yourself in queue and come up

1693
00:59:36,960 --> 00:59:39,000
to the mic now I'll give people a couple

1694
00:59:39,000 --> 00:59:40,260
of seconds to figure out what they want

1695
00:59:40,260 --> 00:59:41,640
to do before I start asking my own

1696
00:59:41,640 --> 00:59:43,740
questions

1697
00:59:43,740 --> 00:59:46,459
I know it's early

1698
00:59:46,559 --> 00:59:48,680
yeah

1699
00:59:51,920 --> 00:59:55,020
for the for remote people can you like

1700
00:59:55,020 --> 00:59:56,520
actually put yourself in queue I mean

1701
00:59:56,520 --> 00:59:58,559
you go ahead and say your name but um

1702
00:59:58,559 --> 01:00:01,200
like we do want to make sure refer to

1703
01:00:01,200 --> 01:00:02,579
people who are not here

1704
01:00:02,579 --> 01:00:06,240
my name is David and I guess question

1705
01:00:06,240 --> 01:00:08,339
for Martin Thompson I probably could

1706
01:00:08,339 --> 01:00:10,380
have looked at myself but

1707
01:00:10,380 --> 01:00:12,180
um I think you mentioned that you

1708
01:00:12,180 --> 01:00:14,220
initially tried to use dtls but then

1709
01:00:14,220 --> 01:00:18,660
it's a bad idea so not using TLS

1710
01:00:18,660 --> 01:00:25,380
um but quick is UDP so is TLS TCP or UDP

1711
01:00:25,380 --> 01:00:28,880
um I got confused on that point

1712
01:00:30,900 --> 01:00:33,119
oh that's that that's that's a fun

1713
01:00:33,119 --> 01:00:36,420
question so um we we initially thought

1714
01:00:36,420 --> 01:00:38,640
that maybe the handshake uh could use

1715
01:00:38,640 --> 01:00:42,480
the DLS dtls mechanisms for reliability

1716
01:00:42,480 --> 01:00:45,660
and we would just do dtls to start with

1717
01:00:45,660 --> 01:00:47,280
and then we would get to do quick things

1718
01:00:47,280 --> 01:00:50,339
once tcls is done

1719
01:00:50,339 --> 01:00:53,400
unfortunately dtls doesn't have the sort

1720
01:00:53,400 --> 01:00:55,980
of really sophisticated uh

1721
01:00:55,980 --> 01:00:58,020
recovery mechanisms and all the other

1722
01:00:58,020 --> 01:01:00,420
things that quick has and so you get a

1723
01:01:00,420 --> 01:01:02,640
lot more Advantage from from building

1724
01:01:02,640 --> 01:01:05,640
all of the the reliability and and in

1725
01:01:05,640 --> 01:01:07,920
order delivery mechanisms on top of

1726
01:01:07,920 --> 01:01:09,660
quick and so that's what we've we've

1727
01:01:09,660 --> 01:01:11,400
done

1728
01:01:11,400 --> 01:01:14,160
by doing that we were able to use TLS

1729
01:01:14,160 --> 01:01:17,220
which is a much simpler protocol and so

1730
01:01:17,220 --> 01:01:18,240
um

1731
01:01:18,240 --> 01:01:21,240
we avoided all these details Machinery

1732
01:01:21,240 --> 01:01:25,140
necessary to do reliability and

1733
01:01:25,140 --> 01:01:27,059
fragmentation reordering and all those

1734
01:01:27,059 --> 01:01:28,859
sorts of other wonderful things and just

1735
01:01:28,859 --> 01:01:32,299
use the stuff that we use for

1736
01:01:32,299 --> 01:01:34,799
reconstructing streams in quick

1737
01:01:34,799 --> 01:01:38,000
and and that turned out to be much much

1738
01:01:38,000 --> 01:01:41,700
easier in the end as it turns out once

1739
01:01:41,700 --> 01:01:43,559
we've made that decision it was it was

1740
01:01:43,559 --> 01:01:46,079
very straightforward to to use all of

1741
01:01:46,079 --> 01:01:47,579
the quick machinery for for managing

1742
01:01:47,579 --> 01:01:50,700
packet loss recovery order delivery and

1743
01:01:50,700 --> 01:01:53,280
whatnot the TLs uses

1744
01:01:53,280 --> 01:01:55,740
all right absolutely so yeah you get the

1745
01:01:55,740 --> 01:01:57,240
you get the

1746
01:01:57,240 --> 01:01:58,200
um

1747
01:01:58,200 --> 01:02:01,319
the advantage of you can use like a sort

1748
01:02:01,319 --> 01:02:02,700
of a single software architecture and

1749
01:02:02,700 --> 01:02:03,780
the disadvantage is you get a really

1750
01:02:03,780 --> 01:02:05,940
wonky layering diagram right I think

1751
01:02:05,940 --> 01:02:07,559
it's like and we we spoke about that

1752
01:02:07,559 --> 01:02:09,180
early on it's like oh

1753
01:02:09,180 --> 01:02:10,799
this layering diagram looks weird there

1754
01:02:10,799 --> 01:02:11,940
must be something wrong here and it

1755
01:02:11,940 --> 01:02:12,839
turns out that it was right because

1756
01:02:12,839 --> 01:02:14,900
otherwise you have to have

1757
01:02:14,900 --> 01:02:17,819
or whatever so yeah I mean I I think

1758
01:02:17,819 --> 01:02:19,799
we've always held that the layering

1759
01:02:19,799 --> 01:02:21,540
diagram should follow reality reality

1760
01:02:21,540 --> 01:02:23,880
shouldn't follow the diagram

1761
01:02:23,880 --> 01:02:26,339
um and in this particular case it was

1762
01:02:26,339 --> 01:02:29,520
very obvious that actually having

1763
01:02:29,520 --> 01:02:31,799
a separate

1764
01:02:31,799 --> 01:02:34,619
um loss detection recovery Machinery was

1765
01:02:34,619 --> 01:02:36,420
going to be fundamentally sub-optimal

1766
01:02:36,420 --> 01:02:38,640
it's not something you want if you have

1767
01:02:38,640 --> 01:02:40,859
a big data stream and you have all the

1768
01:02:40,859 --> 01:02:42,299
mechanisms built in you want to use the

1769
01:02:42,299 --> 01:02:45,000
same one for all the data that you send

1770
01:02:45,000 --> 01:02:48,240
not just for the handshake data is not

1771
01:02:48,240 --> 01:02:51,379
special in this particular way

1772
01:02:54,059 --> 01:02:56,400
cool thanks David

1773
01:02:56,400 --> 01:02:59,579
I uh tail I apologize that I suspect

1774
01:02:59,579 --> 01:03:01,440
that this was some already addressed and

1775
01:03:01,440 --> 01:03:04,079
I missed it but what's the current

1776
01:03:04,079 --> 01:03:06,240
status of the original Google Quick

1777
01:03:06,240 --> 01:03:08,400
implementation with regard to the ITF

1778
01:03:08,400 --> 01:03:10,380
implementation I

1779
01:03:10,380 --> 01:03:13,440
we are attempting to turn it down and

1780
01:03:13,440 --> 01:03:15,359
remove the code as soon as humanly

1781
01:03:15,359 --> 01:03:17,099
possible

1782
01:03:17,099 --> 01:03:19,440
um it is a very very high priority of my

1783
01:03:19,440 --> 01:03:20,700
team

1784
01:03:20,700 --> 01:03:22,260
um

1785
01:03:22,260 --> 01:03:25,500
the expectation is q1

1786
01:03:25,500 --> 01:03:27,420
um it may be

1787
01:03:27,420 --> 01:03:30,420
off sooner for certain other properties

1788
01:03:30,420 --> 01:03:33,119
so like YouTube might go down like turn

1789
01:03:33,119 --> 01:03:34,920
it off earlier and stuff but um it's

1790
01:03:34,920 --> 01:03:37,079
either going to be very end of Q4 or q1

1791
01:03:37,079 --> 01:03:38,220
that you're going to start seeing it

1792
01:03:38,220 --> 01:03:39,720
being turned off

1793
01:03:39,720 --> 01:03:41,899
um

1794
01:03:42,299 --> 01:03:43,740
hopefully the code will be delayed by

1795
01:03:43,740 --> 01:03:45,660
the mq1 if I'm really lucky but it it's

1796
01:03:45,660 --> 01:03:49,460
a lot of code I might think you do

1797
01:03:50,460 --> 01:03:51,960
so yeah hello

1798
01:03:51,960 --> 01:03:54,660
um I'm escort AG just a quick question

1799
01:03:54,660 --> 01:03:58,920
about uh quick and using it over Nats

1800
01:03:58,920 --> 01:04:01,260
and firewalls Etc is there any special

1801
01:04:01,260 --> 01:04:03,480
consideration or things you have to do

1802
01:04:03,480 --> 01:04:06,660
uh let's say to keep a connection alive

1803
01:04:06,660 --> 01:04:09,900
it's just wondering about that

1804
01:04:09,900 --> 01:04:13,920
um I mean yeah just just don't block all

1805
01:04:13,920 --> 01:04:15,960
the connection after the handshake it's

1806
01:04:15,960 --> 01:04:18,000
a bummer to debug

1807
01:04:18,000 --> 01:04:19,440
um it's very bad for user experience

1808
01:04:19,440 --> 01:04:21,299
like if you're gonna drop like a quick

1809
01:04:21,299 --> 01:04:23,160
handshake just don't let any package

1810
01:04:23,160 --> 01:04:25,619
through because remember one packet in

1811
01:04:25,619 --> 01:04:27,119
each direction is enough to complete a

1812
01:04:27,119 --> 01:04:29,339
handshake in some circumstances and so

1813
01:04:29,339 --> 01:04:31,380
like some we've had issues with packet

1814
01:04:31,380 --> 01:04:32,700
inspection where like some of them are

1815
01:04:32,700 --> 01:04:34,020
like I'm going to take a few packets to

1816
01:04:34,020 --> 01:04:35,579
figure out what flow type this is and

1817
01:04:35,579 --> 01:04:37,079
it's like after three packets it's like

1818
01:04:37,079 --> 01:04:38,700
yeah I don't think I know what this is

1819
01:04:38,700 --> 01:04:40,440
so I'm gonna just drop it it goes

1820
01:04:40,440 --> 01:04:42,180
terribly these are experiences Dreadful

1821
01:04:42,180 --> 01:04:44,760
so don't do that uh besides that like I

1822
01:04:44,760 --> 01:04:45,599
think a lot of things are quite

1823
01:04:45,599 --> 01:04:47,400
acceptable oh there's also information

1824
01:04:47,400 --> 01:04:49,559
in the um manageability draft that's

1825
01:04:49,559 --> 01:04:52,799
actually quite good yeah so um the the

1826
01:04:52,799 --> 01:04:55,740
manageability drive talks about uh from

1827
01:04:55,740 --> 01:04:57,599
from the client or server side when you

1828
01:04:57,599 --> 01:05:00,059
when you potentially have a middle box

1829
01:05:00,059 --> 01:05:01,680
on the path that's doing that or

1830
01:05:01,680 --> 01:05:04,980
something or firewalling and um

1831
01:05:04,980 --> 01:05:06,960
as long as they follow the advice that

1832
01:05:06,960 --> 01:05:08,640
Ian uh talked about there then then

1833
01:05:08,640 --> 01:05:11,880
things will work what we do find though

1834
01:05:11,880 --> 01:05:13,799
is that some Nets will time out faster

1835
01:05:13,799 --> 01:05:15,119
than the connections will time out

1836
01:05:15,119 --> 01:05:18,299
that's okay uh the use of connection IDs

1837
01:05:18,299 --> 01:05:21,000
will ensure that connections will still

1838
01:05:21,000 --> 01:05:23,520
manage to to work

1839
01:05:23,520 --> 01:05:25,020
um it looks like migration at the server

1840
01:05:25,020 --> 01:05:27,059
but everything just sort of sort of

1841
01:05:27,059 --> 01:05:28,559
works out reasonably well

1842
01:05:28,559 --> 01:05:30,960
we don't recommend that people do keep

1843
01:05:30,960 --> 01:05:33,839
lives keeper lives are useful in very

1844
01:05:33,839 --> 01:05:36,599
narrow circumstances

1845
01:05:36,599 --> 01:05:39,299
um but in most cases you won't need them

1846
01:05:39,299 --> 01:05:41,640
it is better to just walk away from the

1847
01:05:41,640 --> 01:05:43,319
connection

1848
01:05:43,319 --> 01:05:45,240
um and never send any other packets if

1849
01:05:45,240 --> 01:05:48,180
you don't need it and we found that in

1850
01:05:48,180 --> 01:05:49,140
particular when you're dealing with

1851
01:05:49,140 --> 01:05:51,119
mobile devices that's that's uh

1852
01:05:51,119 --> 01:05:53,339
excellent advice because you don't want

1853
01:05:53,339 --> 01:05:55,260
to wake the radio up just to say that

1854
01:05:55,260 --> 01:05:59,119
I'm going away just walk away

1855
01:06:01,380 --> 01:06:03,299
just to add some context because I I

1856
01:06:03,299 --> 01:06:06,599
think it may not have been clear

1857
01:06:06,599 --> 01:06:08,000
um

1858
01:06:08,000 --> 01:06:11,520
browsers currently rely on TCP as a

1859
01:06:11,520 --> 01:06:14,400
backup if quick fails

1860
01:06:14,400 --> 01:06:17,160
so if the quick connection were to fail

1861
01:06:17,160 --> 01:06:19,260
the user would not see a problem would

1862
01:06:19,260 --> 01:06:21,240
be able to fall back to http 2 and TCP

1863
01:06:21,240 --> 01:06:23,040
and that would work just fine that's

1864
01:06:23,040 --> 01:06:25,740
currently something that we do across

1865
01:06:25,740 --> 01:06:28,020
the board and the problem is if quick

1866
01:06:28,020 --> 01:06:30,119
doesn't fail quick succeeds HTTP

1867
01:06:30,119 --> 01:06:32,280
succeeds and then fails eventually

1868
01:06:32,280 --> 01:06:34,980
that's a harder one to debug is the is

1869
01:06:34,980 --> 01:06:38,339
the the basis for that now the the

1870
01:06:38,339 --> 01:06:40,020
one thing in terms of keep lives and

1871
01:06:40,020 --> 01:06:41,460
other things is that

1872
01:06:41,460 --> 01:06:43,980
and that cannot do much

1873
01:06:43,980 --> 01:06:45,559
in terms of adding to the connection

1874
01:06:45,559 --> 01:06:48,240
right and that cannot send keeper lives

1875
01:06:48,240 --> 01:06:49,740
and that cannot do any of those things

1876
01:06:49,740 --> 01:06:52,319
and that cannot send a reset

1877
01:06:52,319 --> 01:06:54,119
um these are things by definition just

1878
01:06:54,119 --> 01:06:56,220
part of the protocol it's all end-to-end

1879
01:06:56,220 --> 01:06:58,500
encrypted and that's that's that's one

1880
01:06:58,500 --> 01:07:00,180
thing but yeah the things that the nut

1881
01:07:00,180 --> 01:07:03,000
can do are things like dropping in odd

1882
01:07:03,000 --> 01:07:05,579
places or or things of that sort but

1883
01:07:05,579 --> 01:07:08,880
those are the things to be mindful of

1884
01:07:08,880 --> 01:07:10,980
one thing I'll add is um as the stated

1885
01:07:10,980 --> 01:07:12,420
in the manageability draft if if

1886
01:07:12,420 --> 01:07:14,400
possible if Nats could actually conform

1887
01:07:14,400 --> 01:07:16,680
to the RFC and I use the I think two

1888
01:07:16,680 --> 01:07:20,099
minute minimum idle demo for not

1889
01:07:20,099 --> 01:07:21,539
rebinding that that would be that's

1890
01:07:21,539 --> 01:07:23,220
sufficient for like I think the vast

1891
01:07:23,220 --> 01:07:25,619
majority of use cases but if if that's

1892
01:07:25,619 --> 01:07:27,240
that would be my like ask is like

1893
01:07:27,240 --> 01:07:28,440
ideally if they could do that that would

1894
01:07:28,440 --> 01:07:30,859
be wonderful

1895
01:07:31,940 --> 01:07:34,920
hey uh just to add um Donna touched on

1896
01:07:34,920 --> 01:07:37,260
TCP fallbacks um this works well for

1897
01:07:37,260 --> 01:07:41,099
HTTP but quick is not just HTTP so uh if

1898
01:07:41,099 --> 01:07:42,599
you are if you're designing another

1899
01:07:42,599 --> 01:07:45,119
application to go on top of quick

1900
01:07:45,119 --> 01:07:47,220
um you you might have different world or

1901
01:07:47,220 --> 01:07:48,599
different considerations maybe you're

1902
01:07:48,599 --> 01:07:50,280
taking something like

1903
01:07:50,280 --> 01:07:53,039
that already works over TCP and a new

1904
01:07:53,039 --> 01:07:55,260
mapping on to Quick the applicability

1905
01:07:55,260 --> 01:07:57,539
draft gives a good section of

1906
01:07:57,539 --> 01:08:00,420
considerations about the need for a TCP

1907
01:08:00,420 --> 01:08:02,819
fallback but not the Mandate

1908
01:08:02,819 --> 01:08:04,799
um and gives the color commentary about

1909
01:08:04,799 --> 01:08:07,020
these kinds of trade-offs which are

1910
01:08:07,020 --> 01:08:09,680
Illuminating

1911
01:08:09,680 --> 01:08:13,339
okay thank you

1912
01:08:13,859 --> 01:08:17,279
George Michaelson can I shift Target a

1913
01:08:17,279 --> 01:08:18,719
little bit which riffs on what you just

1914
01:08:18,719 --> 01:08:19,738
said

1915
01:08:19,738 --> 01:08:23,759
I realize 99.9999 of the world is HTTP

1916
01:08:23,759 --> 01:08:25,500
and I would approve of targeting the

1917
01:08:25,500 --> 01:08:27,238
thing that will make everyone happy and

1918
01:08:27,238 --> 01:08:31,500
money but I live in SSH and mosh and I

1919
01:08:31,500 --> 01:08:33,120
sit here wondering why isn't there a

1920
01:08:33,120 --> 01:08:35,219
shimlair library that simply allows me

1921
01:08:35,219 --> 01:08:37,319
to do single packet transactional work

1922
01:08:37,319 --> 01:08:40,140
reliably across address Mobility taking

1923
01:08:40,140 --> 01:08:42,179
care of this stuff why hasn't there been

1924
01:08:42,179 --> 01:08:44,279
an interface spec that gives me a

1925
01:08:44,279 --> 01:08:45,839
command and control interface for a

1926
01:08:45,839 --> 01:08:47,640
machine that runs over quick

1927
01:08:47,640 --> 01:08:50,399
and S Tunnel exists so it's not like

1928
01:08:50,399 --> 01:08:52,319
people don't understand how to do SSH

1929
01:08:52,319 --> 01:08:56,460
over TLS through abstractions but

1930
01:08:56,460 --> 01:08:58,380
couldn't you code a shim layer that just

1931
01:08:58,380 --> 01:09:00,479
gave me transparently access to this

1932
01:09:00,479 --> 01:09:03,600
framework to do zero rtt low latency

1933
01:09:03,600 --> 01:09:07,080
protected access walk away from it

1934
01:09:07,080 --> 01:09:09,660
come back on a different IP and carry on

1935
01:09:09,660 --> 01:09:12,120
the session this is what mosh does but I

1936
01:09:12,120 --> 01:09:13,859
don't want to run a pearl user space

1937
01:09:13,859 --> 01:09:17,460
demon to do my terminal binding where's

1938
01:09:17,460 --> 01:09:19,500
the shim where's the equivalent of

1939
01:09:19,500 --> 01:09:21,299
trumpet windsock that gives me

1940
01:09:21,299 --> 01:09:25,819
ubiquitous access to this software

1941
01:09:26,359 --> 01:09:29,040
that's off topic right that's the quick

1942
01:09:29,040 --> 01:09:31,020
answer is sorry that's off topic has got

1943
01:09:31,020 --> 01:09:32,520
it and John is up and I'm gonna put my

1944
01:09:32,520 --> 01:09:34,580
hand in here go ahead no Lucas

1945
01:09:34,580 --> 01:09:37,080
I'll give you the the short answer which

1946
01:09:37,080 --> 01:09:39,238
is the the person who wrote March is now

1947
01:09:39,238 --> 01:09:40,560
I believe a Stanford professor and

1948
01:09:40,560 --> 01:09:42,060
probably has like much less free time

1949
01:09:42,060 --> 01:09:43,380
than they used to

1950
01:09:43,380 --> 01:09:45,600
um but but uh yeah I think I think it's

1951
01:09:45,600 --> 01:09:48,420
a very viable concept

1952
01:09:48,420 --> 01:09:49,799
I mean it's it's

1953
01:09:49,799 --> 01:09:52,380
mosh solved a problem for all of us

1954
01:09:52,380 --> 01:09:53,580
right and

1955
01:09:53,580 --> 01:09:55,340
[Music]

1956
01:09:55,340 --> 01:09:57,719
I mean it did solve a problem for all of

1957
01:09:57,719 --> 01:10:00,000
us and and the fact is that it's that

1958
01:10:00,000 --> 01:10:01,860
Mobility is something we want session

1959
01:10:01,860 --> 01:10:03,780
Mobility is something across the board

1960
01:10:03,780 --> 01:10:05,340
is something you want I mean but but as

1961
01:10:05,340 --> 01:10:06,780
Martin's pointing out I think that the

1962
01:10:06,780 --> 01:10:08,880
protocol offers the facility for doing

1963
01:10:08,880 --> 01:10:10,040
it

1964
01:10:10,040 --> 01:10:13,140
there's absolutely no reason to not move

1965
01:10:13,140 --> 01:10:16,020
no but the essential quality in the very

1966
01:10:16,020 --> 01:10:18,179
badly worded question is there is a

1967
01:10:18,179 --> 01:10:20,520
significant barrier to entry unless you

1968
01:10:20,520 --> 01:10:23,159
sit in HTTP mode and think oh well quick

1969
01:10:23,159 --> 01:10:26,100
is just HTTP I'll use Quick well it's

1970
01:10:26,100 --> 01:10:28,560
not just HTTP and your comment went to

1971
01:10:28,560 --> 01:10:31,020
if you are running in different contexts

1972
01:10:31,020 --> 01:10:33,659
you may have to do TLS failover and I'm

1973
01:10:33,659 --> 01:10:35,940
sitting here going I have to code the

1974
01:10:35,940 --> 01:10:39,239
TLs failover no you should be coding the

1975
01:10:39,239 --> 01:10:41,640
TLs failover for me it should be a

1976
01:10:41,640 --> 01:10:44,100
transparent shim function I should not

1977
01:10:44,100 --> 01:10:46,679
have to perform that function

1978
01:10:46,679 --> 01:10:49,199
I expect respectfully this is not a

1979
01:10:49,199 --> 01:10:51,179
service organization yeah but you know

1980
01:10:51,179 --> 01:10:52,620
what I mean with that software you know

1981
01:10:52,620 --> 01:10:55,199
what I mean this is not really a

1982
01:10:55,199 --> 01:10:56,640
question for us this is a question for

1983
01:10:56,640 --> 01:10:58,320
the audience please please someone

1984
01:10:58,320 --> 01:11:01,199
provide George with the uh yes with

1985
01:11:01,199 --> 01:11:03,120
these capabilities we would all love

1986
01:11:03,120 --> 01:11:04,679
that very much

1987
01:11:04,679 --> 01:11:05,460
um

1988
01:11:05,460 --> 01:11:06,900
some of us are doing other things at the

1989
01:11:06,900 --> 01:11:09,480
moment so maybe this gentleman here will

1990
01:11:09,480 --> 01:11:11,880
do it for us hold on I want to do I I do

1991
01:11:11,880 --> 01:11:14,040
want to to I thought one of you was

1992
01:11:14,040 --> 01:11:16,500
going to say the following but uh I

1993
01:11:16,500 --> 01:11:19,800
think mask is tomorrow morning right and

1994
01:11:19,800 --> 01:11:21,840
mask is

1995
01:11:21,840 --> 01:11:25,140
um about 80 of what you want built put

1996
01:11:25,140 --> 01:11:27,239
together in a different way for a

1997
01:11:27,239 --> 01:11:30,719
different use case right so like I'm not

1998
01:11:30,719 --> 01:11:32,820
saying you know use mask for mosh but if

1999
01:11:32,820 --> 01:11:34,320
you basically reorganize the bits of

2000
01:11:34,320 --> 01:11:36,300
mask

2001
01:11:36,300 --> 01:11:38,040
you could build a mosh and you know you

2002
01:11:38,040 --> 01:11:39,960
all of you just let this be inspiration

2003
01:11:39,960 --> 01:11:44,040
as Martin said like the tools are there

2004
01:11:44,040 --> 01:11:46,380
the bits are there we're still learning

2005
01:11:46,380 --> 01:11:48,600
how to assemble them and I think that we

2006
01:11:48,600 --> 01:11:49,980
could very easily assemble something

2007
01:11:49,980 --> 01:11:51,960
that looks very much like what John what

2008
01:11:51,960 --> 01:11:53,940
George wants

2009
01:11:53,940 --> 01:11:56,640
from parts we mostly already have

2010
01:11:56,640 --> 01:11:58,679
yeah but I do want to reiterate this

2011
01:11:58,679 --> 01:12:00,900
this fact that you know we we've done

2012
01:12:00,900 --> 01:12:02,699
the work so far

2013
01:12:02,699 --> 01:12:04,679
um and we explained the protocol so go

2014
01:12:04,679 --> 01:12:06,179
build the dam tools

2015
01:12:06,179 --> 01:12:07,980
and this is so to all of you right I

2016
01:12:07,980 --> 01:12:09,360
mean it's it's all of us as a community

2017
01:12:09,360 --> 01:12:11,219
to build this

2018
01:12:11,219 --> 01:12:13,440
yeah Phil Han Baker I was going to say

2019
01:12:13,440 --> 01:12:15,659
yes I am working on something like that

2020
01:12:15,659 --> 01:12:18,780
but it's going to be a long time before

2021
01:12:18,780 --> 01:12:20,760
it works over quick

2022
01:12:20,760 --> 01:12:24,120
in the first I've got to work out how to

2023
01:12:24,120 --> 01:12:27,540
do exactly you know transport layer

2024
01:12:27,540 --> 01:12:29,040
fixed

2025
01:12:29,040 --> 01:12:32,000
then work out what the API needs to be

2026
01:12:32,000 --> 01:12:35,460
in order to abstract an agile

2027
01:12:35,460 --> 01:12:38,219
cryptographic transport or whatever and

2028
01:12:38,219 --> 01:12:40,140
then finally I'm not using quick at the

2029
01:12:40,140 --> 01:12:42,300
moment I'm using the M stuff I'm going

2030
01:12:42,300 --> 01:12:44,580
to have to work out how to map that onto

2031
01:12:44,580 --> 01:12:45,780
quick

2032
01:12:45,780 --> 01:12:48,120
so it's going to be about 12 months

2033
01:12:48,120 --> 01:12:49,980
before I have something that

2034
01:12:49,980 --> 01:12:53,520
will do what he wants and then it's

2035
01:12:53,520 --> 01:12:55,440
probably going to be another 24 months

2036
01:12:55,440 --> 01:12:57,360
after that before we work out how to to

2037
01:12:57,360 --> 01:12:59,280
do it on quick I mean

2038
01:12:59,280 --> 01:13:02,219
I think it would be very valuable to

2039
01:13:02,219 --> 01:13:04,760
abstract down and work out how we apply

2040
01:13:04,760 --> 01:13:08,880
quick like transport directly to web

2041
01:13:08,880 --> 01:13:12,659
services and get rid of http

2042
01:13:12,659 --> 01:13:17,100
because hdp is a really rotten way to do

2043
01:13:17,100 --> 01:13:20,219
an RPC interface there's a huge amount

2044
01:13:20,219 --> 01:13:22,620
of overhead and I'm speaking as one of

2045
01:13:22,620 --> 01:13:25,739
the original authors of HTTP 1.0 and the

2046
01:13:25,739 --> 01:13:28,080
person who originally made it possible

2047
01:13:28,080 --> 01:13:32,400
to do that it's what I want to do is to

2048
01:13:32,400 --> 01:13:34,679
take those parts of HTTP and put them

2049
01:13:34,679 --> 01:13:37,920
into the transport ship so but it's

2050
01:13:37,920 --> 01:13:39,600
going to take time

2051
01:13:39,600 --> 01:13:41,280
so yeah there is

2052
01:13:41,280 --> 01:13:42,900
um the quick working group is not going

2053
01:13:42,900 --> 01:13:45,000
to produce a quick API I think there's

2054
01:13:45,000 --> 01:13:46,739
enough Divergence in the many

2055
01:13:46,739 --> 01:13:48,540
implementations that work that's just

2056
01:13:48,540 --> 01:13:50,340
not going to converge

2057
01:13:50,340 --> 01:13:51,659
um there is however the Taps working

2058
01:13:51,659 --> 01:13:53,699
group which is working on abstract

2059
01:13:53,699 --> 01:13:55,980
transport layer interfaces that

2060
01:13:55,980 --> 01:13:58,380
that support all sorts of advanced

2061
01:13:58,380 --> 01:14:01,260
functionality that um that transports

2062
01:14:01,260 --> 01:14:03,420
like quick provide and so I really

2063
01:14:03,420 --> 01:14:05,340
encourage people interested in a more

2064
01:14:05,340 --> 01:14:07,739
generic API for this kind of stuff to to

2065
01:14:07,739 --> 01:14:11,280
take their energy there

2066
01:14:11,280 --> 01:14:13,440
so the documents are mostly done so take

2067
01:14:13,440 --> 01:14:14,760
your energy there means please comment

2068
01:14:14,760 --> 01:14:17,659
on ITF let's call

2069
01:14:18,360 --> 01:14:19,500
uh true there is this totally quick

2070
01:14:19,500 --> 01:14:21,920
nothing to do

2071
01:14:22,440 --> 01:14:24,960
um yeah so it's not just HTTP we have

2072
01:14:24,960 --> 01:14:26,880
DNS over quick which is defined and it's

2073
01:14:26,880 --> 01:14:28,800
a thing and and you might say well it's

2074
01:14:28,800 --> 01:14:30,540
an actual just fall back to TLS there

2075
01:14:30,540 --> 01:14:32,100
but that might not be what you want

2076
01:14:32,100 --> 01:14:33,540
right you might want to fall back the

2077
01:14:33,540 --> 01:14:36,900
DNS over HTTP there's I think it's very

2078
01:14:36,900 --> 01:14:39,120
easy just to assume that we can build

2079
01:14:39,120 --> 01:14:41,640
the batteries included API and Library

2080
01:14:41,640 --> 01:14:43,500
those things could exist they could be

2081
01:14:43,500 --> 01:14:45,360
powerful but

2082
01:14:45,360 --> 01:14:46,320
um

2083
01:14:46,320 --> 01:14:48,179
sometimes they behave in ways that you

2084
01:14:48,179 --> 01:14:49,620
don't want and there's no hooks or

2085
01:14:49,620 --> 01:14:51,719
configurability to change things because

2086
01:14:51,719 --> 01:14:53,580
the needs of your application are

2087
01:14:53,580 --> 01:14:54,960
different presuming there's always going

2088
01:14:54,960 --> 01:14:56,880
to be a TCP equivalent to your

2089
01:14:56,880 --> 01:14:59,280
application protocol is like that's just

2090
01:14:59,280 --> 01:15:01,320
a guess we don't know what those are and

2091
01:15:01,320 --> 01:15:03,060
trying to anticipate is a bit a bit

2092
01:15:03,060 --> 01:15:04,080
rubbish

2093
01:15:04,080 --> 01:15:05,040
um

2094
01:15:05,040 --> 01:15:07,199
so we we have some of this going on in

2095
01:15:07,199 --> 01:15:10,020
web transport where you know we we have

2096
01:15:10,020 --> 01:15:12,060
different ways to carry this thing some

2097
01:15:12,060 --> 01:15:14,400
are UDP based over quick and they want

2098
01:15:14,400 --> 01:15:16,739
to use the service of unreliable message

2099
01:15:16,739 --> 01:15:19,460
delivery and so if that isn't available

2100
01:15:19,460 --> 01:15:22,140
falling back to a TCP based fallback

2101
01:15:22,140 --> 01:15:23,940
isn't going to give you that same

2102
01:15:23,940 --> 01:15:26,100
transport feature is that really what

2103
01:15:26,100 --> 01:15:27,960
applications want or would they prefer

2104
01:15:27,960 --> 01:15:29,400
to give up and fall back to something

2105
01:15:29,400 --> 01:15:31,159
like webrtc

2106
01:15:31,159 --> 01:15:34,020
that might not be ideal but they would

2107
01:15:34,020 --> 01:15:36,120
prefer that possibly we don't know it's

2108
01:15:36,120 --> 01:15:37,980
it's kind of impossible to anticipate

2109
01:15:37,980 --> 01:15:39,960
all of the application needs and being

2110
01:15:39,960 --> 01:15:42,540
too opinionated is maybe giving people a

2111
01:15:42,540 --> 01:15:44,100
disservice there

2112
01:15:44,100 --> 01:15:47,520
and actually trying to trying to allow

2113
01:15:47,520 --> 01:15:49,080
applications to model that is where a

2114
01:15:49,080 --> 01:15:50,159
lot of the complexity in the tax

2115
01:15:50,159 --> 01:15:52,140
interface comes from right like that's

2116
01:15:52,140 --> 01:15:53,760
the hard problem

2117
01:15:53,760 --> 01:15:55,380
and so there are two things here right

2118
01:15:55,380 --> 01:15:57,420
one of them is that there's

2119
01:15:57,420 --> 01:15:59,699
um there's

2120
01:15:59,699 --> 01:16:01,320
the network

2121
01:16:01,320 --> 01:16:03,600
and then does your your application that

2122
01:16:03,600 --> 01:16:05,280
you want to run on top of quick so in

2123
01:16:05,280 --> 01:16:07,260
terms of what do you want to build here

2124
01:16:07,260 --> 01:16:08,699
you

2125
01:16:08,699 --> 01:16:11,219
just what I said yesterday in my talk we

2126
01:16:11,219 --> 01:16:13,320
built using HTTP because it was an

2127
01:16:13,320 --> 01:16:15,000
excellent vehicle for us to get this out

2128
01:16:15,000 --> 01:16:17,940
there but the work that's happening now

2129
01:16:17,940 --> 01:16:21,780
DNS and and others and and also uh mock

2130
01:16:21,780 --> 01:16:24,300
which is also happening uh later this

2131
01:16:24,300 --> 01:16:27,600
week all of this are you know work

2132
01:16:27,600 --> 01:16:29,280
that's going on and trying to map other

2133
01:16:29,280 --> 01:16:31,440
applications and and protocols on top of

2134
01:16:31,440 --> 01:16:34,620
uh quick finally in terms of the network

2135
01:16:34,620 --> 01:16:37,440
itself we know for a fact that there's a

2136
01:16:37,440 --> 01:16:38,760
small percentage of the network that

2137
01:16:38,760 --> 01:16:41,940
doesn't allow UDP or you know when with

2138
01:16:41,940 --> 01:16:43,860
experiments we found that quick doesn't

2139
01:16:43,860 --> 01:16:46,080
work on 100 of the paths

2140
01:16:46,080 --> 01:16:47,940
that's also an application Choice your

2141
01:16:47,940 --> 01:16:49,560
application can absolutely choose to say

2142
01:16:49,560 --> 01:16:51,420
that it's okay if it doesn't work it

2143
01:16:51,420 --> 01:16:52,560
doesn't work the application doesn't

2144
01:16:52,560 --> 01:16:54,360
work if quick doesn't work you don't

2145
01:16:54,360 --> 01:16:57,900
need a TCP fallback and that's all uh up

2146
01:16:57,900 --> 01:17:00,559
to the application

2147
01:17:01,280 --> 01:17:04,199
and I think we have a question from Tony

2148
01:17:04,199 --> 01:17:06,840
Lee who is remote

2149
01:17:06,840 --> 01:17:08,219
I think

2150
01:17:08,219 --> 01:17:09,840
um some of us are thinking about

2151
01:17:09,840 --> 01:17:12,420
migrating in a strange application to

2152
01:17:12,420 --> 01:17:15,900
Quick this application is called bgp and

2153
01:17:15,900 --> 01:17:18,239
we'd kind of like to not mess it up

2154
01:17:18,239 --> 01:17:20,520
uh do you have any idea where the

2155
01:17:20,520 --> 01:17:23,480
potholes are going to be

2156
01:17:25,760 --> 01:17:27,780
hospitals where are the potholes for

2157
01:17:27,780 --> 01:17:30,980
putting bgp on quick

2158
01:17:33,480 --> 01:17:36,840
yeah I'm aware of multiple bgp over

2159
01:17:36,840 --> 01:17:38,100
quick drafts

2160
01:17:38,100 --> 01:17:40,500
um a lot of skimmed they seem to be fine

2161
01:17:40,500 --> 01:17:41,760
to be honest I don't know enough about

2162
01:17:41,760 --> 01:17:43,980
bgp to comment but you know the the

2163
01:17:43,980 --> 01:17:45,540
quick working group is here to provide

2164
01:17:45,540 --> 01:17:48,120
some feedback so we can do this formally

2165
01:17:48,120 --> 01:17:49,860
um absolutely if you want to come and

2166
01:17:49,860 --> 01:17:52,199
ask for like an early review this is the

2167
01:17:52,199 --> 01:17:53,940
kind of thing that personally I'm I'm

2168
01:17:53,940 --> 01:17:56,100
always happy to do but I think people in

2169
01:17:56,100 --> 01:17:57,480
the working group because we don't want

2170
01:17:57,480 --> 01:17:59,340
people to try quick and then it fails

2171
01:17:59,340 --> 01:18:01,320
trying to preempt what those problems

2172
01:18:01,320 --> 01:18:03,719
might be is difficult but kind of the

2173
01:18:03,719 --> 01:18:06,179
typical ones for me would be flow

2174
01:18:06,179 --> 01:18:07,380
control

2175
01:18:07,380 --> 01:18:08,880
um connection level and stream level

2176
01:18:08,880 --> 01:18:10,920
flow control how big are the messages

2177
01:18:10,920 --> 01:18:12,840
that you're exchanging you're going to

2178
01:18:12,840 --> 01:18:14,699
find some way to get

2179
01:18:14,699 --> 01:18:18,000
not deadlocked but not not perform as

2180
01:18:18,000 --> 01:18:20,640
well as you might do multi-streaming in

2181
01:18:20,640 --> 01:18:22,620
general is is a big issue here you're

2182
01:18:22,620 --> 01:18:24,360
using Quirk probably to make use of the

2183
01:18:24,360 --> 01:18:25,920
multiple streams and the one draft I

2184
01:18:25,920 --> 01:18:26,820
read

2185
01:18:26,820 --> 01:18:28,620
um how do those things actually interact

2186
01:18:28,620 --> 01:18:31,080
at the application can the the API from

2187
01:18:31,080 --> 01:18:33,060
the quick layer and your application

2188
01:18:33,060 --> 01:18:35,280
work in such a way for example there's

2189
01:18:35,280 --> 01:18:37,380
no Global audience of streams in quick

2190
01:18:37,380 --> 01:18:41,040
this is the done by Design as a

2191
01:18:41,040 --> 01:18:43,380
performance Improvement so we've always

2192
01:18:43,380 --> 01:18:45,179
had a line blocking but can the

2193
01:18:45,179 --> 01:18:47,820
application manage out of order delivery

2194
01:18:47,820 --> 01:18:49,380
you can send them in the correct order

2195
01:18:49,380 --> 01:18:51,120
but the network is the network and they

2196
01:18:51,120 --> 01:18:52,920
might arrive in a different order if

2197
01:18:52,920 --> 01:18:54,719
you're depending on specific ordering

2198
01:18:54,719 --> 01:18:56,460
between things that the application

2199
01:18:56,460 --> 01:18:58,380
layer you'll need to accommodate that in

2200
01:18:58,380 --> 01:19:00,360
terms of synchronization or

2201
01:19:00,360 --> 01:19:02,880
checkpointing or however you might need

2202
01:19:02,880 --> 01:19:04,320
a design if you have more Atomic

2203
01:19:04,320 --> 01:19:06,600
messages like DNS over quick where these

2204
01:19:06,600 --> 01:19:08,340
things are very independent it's a good

2205
01:19:08,340 --> 01:19:09,360
mapping

2206
01:19:09,360 --> 01:19:10,140
um

2207
01:19:10,140 --> 01:19:13,679
just uh stream credits so we talk about

2208
01:19:13,679 --> 01:19:15,300
flow control but the number of streams

2209
01:19:15,300 --> 01:19:17,520
that you can have open concurrently how

2210
01:19:17,520 --> 01:19:18,960
is that done you have the initial

2211
01:19:18,960 --> 01:19:20,820
unidirectional stream limit I talked

2212
01:19:20,820 --> 01:19:21,840
about earlier

2213
01:19:21,840 --> 01:19:23,520
um those are the initial limits but as

2214
01:19:23,520 --> 01:19:24,900
soon as you've kind of blown those

2215
01:19:24,900 --> 01:19:27,239
limits you need to keep sending stream

2216
01:19:27,239 --> 01:19:29,760
Max stream frames to keep granting

2217
01:19:29,760 --> 01:19:32,520
credit so I think something we found in

2218
01:19:32,520 --> 01:19:34,260
the early interop days is you could do

2219
01:19:34,260 --> 01:19:36,420
some like quick tests like I just did

2220
01:19:36,420 --> 01:19:38,820
one or two two requests and response

2221
01:19:38,820 --> 01:19:40,860
interactions all good then you run a

2222
01:19:40,860 --> 01:19:42,480
server then you have a bug where you

2223
01:19:42,480 --> 01:19:44,040
forget to Grant you credits and you

2224
01:19:44,040 --> 01:19:46,080
eventually get to a point of kind of

2225
01:19:46,080 --> 01:19:47,940
connection saturation and nothing can

2226
01:19:47,940 --> 01:19:50,159
happen nobody can do anything any ideal

2227
01:19:50,159 --> 01:19:52,260
timeouts which is okay but it's probably

2228
01:19:52,260 --> 01:19:53,760
not what you want if you're running a

2229
01:19:53,760 --> 01:19:56,880
Services trying to run and run and run

2230
01:19:56,880 --> 01:19:59,060
foreign

2231
01:19:59,600 --> 01:20:03,179
what's interesting I think uh about bgp

2232
01:20:03,179 --> 01:20:05,219
to Lucas's point is that it tends to

2233
01:20:05,219 --> 01:20:07,800
have extraordinarily long-lived sessions

2234
01:20:07,800 --> 01:20:11,040
and um quick sessions will eventually

2235
01:20:11,040 --> 01:20:12,600
run out

2236
01:20:12,600 --> 01:20:14,580
um this is something we did in HTTP 2

2237
01:20:14,580 --> 01:20:18,179
and and and also have done in quick it's

2238
01:20:18,179 --> 01:20:20,820
probably not likely in an app in a

2239
01:20:20,820 --> 01:20:23,520
protocol like bgp that you will run into

2240
01:20:23,520 --> 01:20:26,219
these things but who knows some of these

2241
01:20:26,219 --> 01:20:28,500
boxes stay up for a long long time uh

2242
01:20:28,500 --> 01:20:31,199
the thing that I think is

2243
01:20:31,199 --> 01:20:33,420
um probably more of a challenge in this

2244
01:20:33,420 --> 01:20:36,780
in this context is is managing keys and

2245
01:20:36,780 --> 01:20:38,460
and Authentication

2246
01:20:38,460 --> 01:20:41,699
because I understand that the bgp is uh

2247
01:20:41,699 --> 01:20:43,800
often run essentially in the clear

2248
01:20:43,800 --> 01:20:46,380
between different asses and that's going

2249
01:20:46,380 --> 01:20:47,880
to be

2250
01:20:47,880 --> 01:20:51,000
um a shift in the attitudes in in terms

2251
01:20:51,000 --> 01:20:52,679
of how you configure this the the the

2252
01:20:52,679 --> 01:20:54,540
peering points

2253
01:20:54,540 --> 01:20:56,820
um that that happen there because

2254
01:20:56,820 --> 01:21:00,719
you need encryption with quick uh

2255
01:21:00,719 --> 01:21:03,719
I don't know how many stacks currently

2256
01:21:03,719 --> 01:21:06,260
use something like appreciate key mode

2257
01:21:06,260 --> 01:21:09,480
uh that is not something that is widely

2258
01:21:09,480 --> 01:21:11,400
used in on the web

2259
01:21:11,400 --> 01:21:13,140
so it may be that you end up in a

2260
01:21:13,140 --> 01:21:14,580
situation where you want to use for

2261
01:21:14,580 --> 01:21:16,860
instance self-signed certificates with

2262
01:21:16,860 --> 01:21:21,540
um with with maybe even no uh validation

2263
01:21:21,540 --> 01:21:23,820
of them to to ensure that it works as

2264
01:21:23,820 --> 01:21:27,540
the the existing system has done with of

2265
01:21:27,540 --> 01:21:28,860
course the option to upgrade to

2266
01:21:28,860 --> 01:21:30,480
something that that is fully

2267
01:21:30,480 --> 01:21:32,760
authenticated

2268
01:21:32,760 --> 01:21:34,500
yeah I was going to add that I'm happy

2269
01:21:34,500 --> 01:21:36,480
to review a draft on bgp I think it's

2270
01:21:36,480 --> 01:21:38,460
like a desolate use case uh key

2271
01:21:38,460 --> 01:21:40,320
distribution seems like a problem but um

2272
01:21:40,320 --> 01:21:42,120
yeah there are a number of solutions I

2273
01:21:42,120 --> 01:21:43,199
think I think it's just a matter of

2274
01:21:43,199 --> 01:21:45,360
looking through the options and getting

2275
01:21:45,360 --> 01:21:46,860
a review from the quick folks and the

2276
01:21:46,860 --> 01:21:49,080
transport bits and then maybe getting a

2277
01:21:49,080 --> 01:21:52,320
crypto review as well on the on whatever

2278
01:21:52,320 --> 01:21:54,000
key distribution or lack there have you

2279
01:21:54,000 --> 01:21:55,739
choose to appreciate

2280
01:21:55,739 --> 01:21:58,580
um but it seems very doable

2281
01:22:00,960 --> 01:22:03,380
Chris

2282
01:22:04,140 --> 01:22:07,140
so when the

2283
01:22:07,140 --> 01:22:09,239
how the handshake Works um I saw that

2284
01:22:09,239 --> 01:22:11,040
there was obviously some information in

2285
01:22:11,040 --> 01:22:12,659
those initial packets

2286
01:22:12,659 --> 01:22:15,420
um uh for example I saw advertisements

2287
01:22:15,420 --> 01:22:16,500
about

2288
01:22:16,500 --> 01:22:19,140
um uh what alpns we might be about to

2289
01:22:19,140 --> 01:22:21,500
talk on and

2290
01:22:21,500 --> 01:22:24,000
obviously when I saw alpns in the clear

2291
01:22:24,000 --> 01:22:26,760
uh alarm Bells went off

2292
01:22:26,760 --> 01:22:30,239
um I was wondering what information all

2293
01:22:30,239 --> 01:22:33,840
do we actually leak onto the wire in the

2294
01:22:33,840 --> 01:22:35,900
clear

2295
01:22:35,900 --> 01:22:39,719
if that question makes sense yeah so um

2296
01:22:39,719 --> 01:22:41,340
as I talked about yesterday we're not

2297
01:22:41,340 --> 01:22:43,739
strictly leaking it in the clear

2298
01:22:43,739 --> 01:22:46,380
uh anyone who is able to see the initial

2299
01:22:46,380 --> 01:22:48,420
packets from the client

2300
01:22:48,420 --> 01:22:50,040
um and the connection ID that's in them

2301
01:22:50,040 --> 01:22:52,800
and they know the quick version that's

2302
01:22:52,800 --> 01:22:56,280
in use we'll be able to recover the keys

2303
01:22:56,280 --> 01:22:57,960
and decrypt that information so

2304
01:22:57,960 --> 01:22:59,760
technically speaking when we when we

2305
01:22:59,760 --> 01:23:02,460
talk about what's in the clearing quick

2306
01:23:02,460 --> 01:23:04,380
um that's that's often a shorthand that

2307
01:23:04,380 --> 01:23:06,840
we'll use to sort of mean that well

2308
01:23:06,840 --> 01:23:09,000
there's no genuine cryptographic

2309
01:23:09,000 --> 01:23:10,380
protection for these things we're just

2310
01:23:10,380 --> 01:23:13,320
applying what is effectively AES as a

2311
01:23:13,320 --> 01:23:15,540
check something mechanism and an

2312
01:23:15,540 --> 01:23:18,300
obfuscation mechanism so

2313
01:23:18,300 --> 01:23:19,980
um what's in the clear is everything

2314
01:23:19,980 --> 01:23:22,980
that will be in the clear and TLS 1.3

2315
01:23:22,980 --> 01:23:27,300
and not a lot more honestly so if you

2316
01:23:27,300 --> 01:23:30,600
look at TLS 1.3 and it's uh client uh

2317
01:23:30,600 --> 01:23:32,520
hello and server hello those are the

2318
01:23:32,520 --> 01:23:34,500
things that will be in the clear and so

2319
01:23:34,500 --> 01:23:37,380
for the most part uh well that sort of

2320
01:23:37,380 --> 01:23:39,179
falls into two categories there's the

2321
01:23:39,179 --> 01:23:40,380
there's the things that you need in

2322
01:23:40,380 --> 01:23:42,420
order to configure the key exchange in

2323
01:23:42,420 --> 01:23:45,480
TLS those things will always be in the

2324
01:23:45,480 --> 01:23:47,640
clear to some extent

2325
01:23:47,640 --> 01:23:49,199
but then there's also a bunch of

2326
01:23:49,199 --> 01:23:50,880
configuration information from the

2327
01:23:50,880 --> 01:23:53,520
client side LPN

2328
01:23:53,520 --> 01:23:57,060
uh some certificate related extensions

2329
01:23:57,060 --> 01:24:01,260
uh and also the Sni

2330
01:24:01,260 --> 01:24:03,000
sorry

2331
01:24:03,000 --> 01:24:05,100
and yes and at quick level there's

2332
01:24:05,100 --> 01:24:06,840
transport parameters which is

2333
01:24:06,840 --> 01:24:09,179
configuration information usually

2334
01:24:09,179 --> 01:24:11,880
related to the operation of quick

2335
01:24:11,880 --> 01:24:14,880
and so um the encrypted client hello

2336
01:24:14,880 --> 01:24:18,000
spec will ultimately be able to take all

2337
01:24:18,000 --> 01:24:20,040
of those things and provide some level

2338
01:24:20,040 --> 01:24:23,400
of protection for them

2339
01:24:23,400 --> 01:24:24,719
there's all the debates about the

2340
01:24:24,719 --> 01:24:27,600
availability of Sni it's potentially the

2341
01:24:27,600 --> 01:24:29,100
case that you could

2342
01:24:29,100 --> 01:24:31,380
still put Sni in the clear and still

2343
01:24:31,380 --> 01:24:34,080
protect all of those those values at the

2344
01:24:34,080 --> 01:24:36,480
same time that's that's something that I

2345
01:24:36,480 --> 01:24:38,159
think a lot of people sort of don't

2346
01:24:38,159 --> 01:24:40,199
really understand about the value of ech

2347
01:24:40,199 --> 01:24:42,179
is that it provides the ability to

2348
01:24:42,179 --> 01:24:43,739
protect all of that sort of thing

2349
01:24:43,739 --> 01:24:47,599
that's coming not yet

2350
01:24:47,640 --> 01:24:49,500
um instead of extracting Sni from

2351
01:24:49,500 --> 01:24:52,620
packets if we can all move to anycast I

2352
01:24:52,620 --> 01:24:54,480
know that's like asking for ponies then

2353
01:24:54,480 --> 01:24:56,760
you can just use the IP and like please

2354
01:24:56,760 --> 01:24:58,739
don't look in my packets yeah

2355
01:24:58,739 --> 01:25:00,540
but yeah if I want you to look at the S

2356
01:25:00,540 --> 01:25:02,340
I would like staple it on to the front

2357
01:25:02,340 --> 01:25:05,280
and like so you could find it

2358
01:25:05,280 --> 01:25:08,040
yeah I mean just just to follow up on

2359
01:25:08,040 --> 01:25:09,860
opening the packets I mean we have

2360
01:25:09,860 --> 01:25:13,380
rc8999 which is the invariance draft and

2361
01:25:13,380 --> 01:25:15,480
that is sort of the working group's

2362
01:25:15,480 --> 01:25:17,340
contract for the world on what will not

2363
01:25:17,340 --> 01:25:20,219
change and what you should rely on and

2364
01:25:20,219 --> 01:25:22,380
to even say that like few versions of

2365
01:25:22,380 --> 01:25:25,080
Google use tls13 is is not something

2366
01:25:25,080 --> 01:25:27,960
we're I mean I think you know some days

2367
01:25:27,960 --> 01:25:29,400
it'll be Tails one four I would think

2368
01:25:29,400 --> 01:25:30,840
and you know when that happens we'll use

2369
01:25:30,840 --> 01:25:31,739
it

2370
01:25:31,739 --> 01:25:33,199
um so all this stuff is going to change

2371
01:25:33,199 --> 01:25:36,239
uh as as the protocol evolves it's one

2372
01:25:36,239 --> 01:25:39,259
of the key points of quick

2373
01:25:39,300 --> 01:25:40,199
thank you

2374
01:25:40,199 --> 01:25:42,919
thank you

2375
01:25:46,159 --> 01:25:49,679
anyone else in queue oh I have I have

2376
01:25:49,679 --> 01:25:51,480
one I have one gotcha question that I

2377
01:25:51,480 --> 01:25:53,940
had you know lined up

2378
01:25:53,940 --> 01:25:56,100
um in case nobody came up so one of the

2379
01:25:56,100 --> 01:25:57,719
things that I saw as a theme across all

2380
01:25:57,719 --> 01:26:00,239
of the presentations was

2381
01:26:00,239 --> 01:26:03,060
um we tried this and then we realized we

2382
01:26:03,060 --> 01:26:04,620
had to do this and then we realized we

2383
01:26:04,620 --> 01:26:07,800
had to do this like the the idea of

2384
01:26:07,800 --> 01:26:10,320
building a pro a transport protocol on

2385
01:26:10,320 --> 01:26:12,540
top of a security layer on top of the

2386
01:26:12,540 --> 01:26:15,179
transport protocol that like this turned

2387
01:26:15,179 --> 01:26:17,219
out to be super hard to do

2388
01:26:17,219 --> 01:26:19,080
and was one of the reasons this was a

2389
01:26:19,080 --> 01:26:21,060
really long effort

2390
01:26:21,060 --> 01:26:21,719
um

2391
01:26:21,719 --> 01:26:25,739
in what came out in quick version one

2392
01:26:25,739 --> 01:26:28,260
uh in your opinion um whoever grabs the

2393
01:26:28,260 --> 01:26:30,480
mic first what is the sort of the

2394
01:26:30,480 --> 01:26:32,580
hackiest part of the protocol and sort

2395
01:26:32,580 --> 01:26:35,659
of like the undone work Martin take it

2396
01:26:35,659 --> 01:26:39,620
unless Martin wants to take it

2397
01:26:40,980 --> 01:26:42,900
yeah

2398
01:26:42,900 --> 01:26:44,699
I mean if you misheard happiest you can

2399
01:26:44,699 --> 01:26:46,139
also do happiest right what's the

2400
01:26:46,139 --> 01:26:48,139
happiest part of quick

2401
01:26:48,139 --> 01:26:50,100
for me there's some there's some pretty

2402
01:26:50,100 --> 01:26:52,440
happy parts we managed to get more of

2403
01:26:52,440 --> 01:26:54,000
the protocol encrypted than I thought

2404
01:26:54,000 --> 01:26:56,760
was possible at the outset

2405
01:26:56,760 --> 01:26:59,040
um so that that was a happy thing uh

2406
01:26:59,040 --> 01:27:01,739
probably the hackiest and and

2407
01:27:01,739 --> 01:27:04,920
the part that I'm least confident in is

2408
01:27:04,920 --> 01:27:07,080
connection migration

2409
01:27:07,080 --> 01:27:10,380
the um security model for that is a

2410
01:27:10,380 --> 01:27:13,139
little unclear and the mechanisms that

2411
01:27:13,139 --> 01:27:16,800
we have in place uh I not as thoroughly

2412
01:27:16,800 --> 01:27:18,659
tested as as I would have would have

2413
01:27:18,659 --> 01:27:21,420
been uh confident with at the time

2414
01:27:21,420 --> 01:27:23,520
um the way that we defend against

2415
01:27:23,520 --> 01:27:26,219
various tax uh is

2416
01:27:26,219 --> 01:27:28,320
constrained to a very large degree by

2417
01:27:28,320 --> 01:27:29,520
the nature of the network that we're

2418
01:27:29,520 --> 01:27:31,679
dealing with and so

2419
01:27:31,679 --> 01:27:32,400
um

2420
01:27:32,400 --> 01:27:36,060
I'm not confident 100 that it will stand

2421
01:27:36,060 --> 01:27:40,760
up to rigorous attempts to attack it

2422
01:27:41,940 --> 01:27:43,980
I agree with Martin and cinnamon um I

2423
01:27:43,980 --> 01:27:45,300
can attest that connection migration

2424
01:27:45,300 --> 01:27:47,580
works because we've default enabled it

2425
01:27:47,580 --> 01:27:49,980
and then quite a number of circumstances

2426
01:27:49,980 --> 01:27:51,840
um and so like it does actually function

2427
01:27:51,840 --> 01:27:54,420
uh as intended uh but the attack surface

2428
01:27:54,420 --> 01:27:57,360
uh it seems very difficult to reason

2429
01:27:57,360 --> 01:28:00,300
about and I I am I'm sure our

2430
01:28:00,300 --> 01:28:02,400
implementation has something that you

2431
01:28:02,400 --> 01:28:04,440
could do that would at least be annoying

2432
01:28:04,440 --> 01:28:06,600
to a user if not like problematic but

2433
01:28:06,600 --> 01:28:08,760
like at the very least it's certainly

2434
01:28:08,760 --> 01:28:10,020
not perfect

2435
01:28:10,020 --> 01:28:11,639
um I can't think of anything else I mean

2436
01:28:11,639 --> 01:28:12,840
there's a few decisions that got made

2437
01:28:12,840 --> 01:28:14,580
that are annoying to me but like I

2438
01:28:14,580 --> 01:28:16,199
wouldn't call them hacky they're just

2439
01:28:16,199 --> 01:28:19,260
like implementation and audiences

2440
01:28:19,260 --> 01:28:21,860
foreign

2441
01:28:38,900 --> 01:28:40,980
so I think we did a lot of things that

2442
01:28:40,980 --> 01:28:43,920
were clever uh in the protocol but I'd

2443
01:28:43,920 --> 01:28:46,260
say that the things that are that

2444
01:28:46,260 --> 01:28:48,120
feel a bit fragile

2445
01:28:48,120 --> 01:28:50,280
are both connection migration for sure

2446
01:28:50,280 --> 01:28:52,080
but also the handshake

2447
01:28:52,080 --> 01:28:55,199
it's it's it's robust it I think it's

2448
01:28:55,199 --> 01:28:57,540
robust but having you know that the fact

2449
01:28:57,540 --> 01:28:59,460
that I have to say I think is probably

2450
01:28:59,460 --> 01:29:02,940
the argument there right so

2451
01:29:02,940 --> 01:29:06,060
um outside of that I think the the uh

2452
01:29:06,060 --> 01:29:07,560
happiest part of the protocol is that we

2453
01:29:07,560 --> 01:29:09,600
actually managed to encrypt

2454
01:29:09,600 --> 01:29:11,580
everything

2455
01:29:11,580 --> 01:29:14,520
it's okay we got the uh packet numbers

2456
01:29:14,520 --> 01:29:19,159
encrypted too which was which was a joy

2457
01:29:19,320 --> 01:29:20,940
yeah so I've been rearing the thing on

2458
01:29:20,940 --> 01:29:22,560
the handshake I think we decided we were

2459
01:29:22,560 --> 01:29:24,239
done with a handshake like four years

2460
01:29:24,239 --> 01:29:25,980
ago and then kept finding problems in

2461
01:29:25,980 --> 01:29:27,659
corner cases and having to add a little

2462
01:29:27,659 --> 01:29:29,159
more Machinery

2463
01:29:29,159 --> 01:29:30,719
um so like for me the happiest thing

2464
01:29:30,719 --> 01:29:32,699
about it is extensibility

2465
01:29:32,699 --> 01:29:34,920
um like many of my colleagues here um

2466
01:29:34,920 --> 01:29:36,960
spent a lot of time in TCP where it's

2467
01:29:36,960 --> 01:29:39,540
like so hard to change anything for for

2468
01:29:39,540 --> 01:29:41,940
various reasons and uh you know but it

2469
01:29:41,940 --> 01:29:43,320
also leads to what I'm kind of most

2470
01:29:43,320 --> 01:29:45,719
deeply concerned about which is that and

2471
01:29:45,719 --> 01:29:47,159
they'll probably laugh because this is

2472
01:29:47,159 --> 01:29:49,199
my um hobby horse but like version

2473
01:29:49,199 --> 01:29:50,880
ossification

2474
01:29:50,880 --> 01:29:53,340
um with the things that are I mean the

2475
01:29:53,340 --> 01:29:54,659
question alluded to things we could read

2476
01:29:54,659 --> 01:29:57,300
in the client hello between that and

2477
01:29:57,300 --> 01:29:59,940
just this very readable version field

2478
01:29:59,940 --> 01:30:02,460
um you know people could just say well

2479
01:30:02,460 --> 01:30:03,960
version one is fine and everything else

2480
01:30:03,960 --> 01:30:05,400
I don't know what that is I'm gonna drop

2481
01:30:05,400 --> 01:30:07,500
it and um you know that's something that

2482
01:30:07,500 --> 01:30:09,120
we have to think a little harder on and

2483
01:30:09,120 --> 01:30:10,620
come up with some solutions for to

2484
01:30:10,620 --> 01:30:12,179
preserve that accessibility because I

2485
01:30:12,179 --> 01:30:14,159
think eventually you can get to a place

2486
01:30:14,159 --> 01:30:15,540
where we get really big performance

2487
01:30:15,540 --> 01:30:17,159
Improvement we already have big

2488
01:30:17,159 --> 01:30:19,080
performance proofs on TCP but as the

2489
01:30:19,080 --> 01:30:21,060
internet changes quick can change in a

2490
01:30:21,060 --> 01:30:23,880
way that the old tools can't

2491
01:30:23,880 --> 01:30:25,440
and I think that's actually sort of like

2492
01:30:25,440 --> 01:30:27,600
I mean we talk about this is it's a it's

2493
01:30:27,600 --> 01:30:29,159
a work it's done but it's a work in

2494
01:30:29,159 --> 01:30:30,780
progress and fortunately we built a

2495
01:30:30,780 --> 01:30:32,159
thing that can be a work in progress

2496
01:30:32,159 --> 01:30:33,540
where we don't have to come back to it

2497
01:30:33,540 --> 01:30:35,760
30 years later and I think that's the

2498
01:30:35,760 --> 01:30:38,340
giant win so on that I've given myself

2499
01:30:38,340 --> 01:30:41,219
the last word because we are at time uh

2500
01:30:41,219 --> 01:30:42,600
I would like to thank all of the

2501
01:30:42,600 --> 01:30:44,159
presenters uh for their presentations

2502
01:30:44,159 --> 01:30:45,659
and for the

2503
01:30:45,659 --> 01:30:48,440
discussion

2504
01:30:48,659 --> 01:30:50,760
and all of our audience for joining us

2505
01:30:50,760 --> 01:30:52,679
here at 7 30 in the morning

2506
01:30:52,679 --> 01:30:54,659
um your dedication to the internet is

2507
01:30:54,659 --> 01:30:56,520
much appreciated uh please enjoy the

2508
01:30:56,520 --> 01:30:58,320
rest of your week

2509
01:30:58,320 --> 01:31:02,659
um and see you around thanks a lot

2510
01:31:15,900 --> 01:31:17,880
can you do

2511
01:31:17,880 --> 01:31:20,300
hospitals

2512
01:31:21,080 --> 01:31:25,639
oh it's an 18 minute walk um

