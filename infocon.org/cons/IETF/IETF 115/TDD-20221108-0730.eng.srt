1
00:00:04,860 --> 00:00:06,660
ready we should

2
00:00:06,660 --> 00:00:10,200
start getting this show on the road yeah

3
00:00:10,200 --> 00:00:13,559
uh oh I will I will put Refresh on the

4
00:00:13,559 --> 00:00:14,519
slides

5
00:00:14,519 --> 00:00:17,299
of the

6
00:00:19,020 --> 00:00:21,020
SE

7
00:00:24,480 --> 00:00:26,820
slide slide slides they're uploaded now

8
00:00:26,820 --> 00:00:29,000
right

9
00:00:30,480 --> 00:00:32,159
if you don't upload them they're not

10
00:00:32,159 --> 00:00:35,180
gonna be anywhere

11
00:00:36,020 --> 00:00:39,380
I am not

12
00:00:40,800 --> 00:00:42,980
well

13
00:00:44,280 --> 00:00:47,280
responses

14
00:00:47,640 --> 00:00:49,980
fairly

15
00:00:49,980 --> 00:00:53,100
not super responsive oh and

16
00:00:53,100 --> 00:00:55,100
right

17
00:00:55,100 --> 00:01:00,000
uh you have a go to your court chat

18
00:01:00,000 --> 00:01:02,899
I sent you a link

19
00:01:03,300 --> 00:01:07,799
or if it's faster just email them to

20
00:01:07,799 --> 00:01:11,360
I don't know which is faster

21
00:01:13,220 --> 00:01:16,939
itf.org I'll pick them off of there

22
00:01:32,299 --> 00:01:35,460
so I think you've you've actually like

23
00:01:35,460 --> 00:01:40,400
I'm oh I can I can revoke slides okay

24
00:01:40,400 --> 00:01:44,040
your slide deck has been shared

25
00:01:44,040 --> 00:01:46,140
error

26
00:01:46,140 --> 00:01:48,000
are you doing that yeah yeah can you

27
00:01:48,000 --> 00:01:52,939
refresh yes as soon as they're uploaded

28
00:01:57,240 --> 00:02:00,079
good morning everyone

29
00:02:02,820 --> 00:02:06,960
[Laughter]

30
00:02:06,960 --> 00:02:09,239
it may be morning but for those who are

31
00:02:09,239 --> 00:02:12,000
still jet lagged each rewarded everyone

32
00:02:12,000 --> 00:02:14,280
we're just making sure that the slides

33
00:02:14,280 --> 00:02:16,260
are perfectly fresh they're hot off the

34
00:02:16,260 --> 00:02:18,440
front

35
00:02:25,140 --> 00:02:29,040
so it is now Tuesday morning so many of

36
00:02:29,040 --> 00:02:31,980
you have probably seen the note well if

37
00:02:31,980 --> 00:02:34,140
this is a surprise to you

38
00:02:34,140 --> 00:02:36,300
please do go have a look at this wall of

39
00:02:36,300 --> 00:02:38,040
text by downloading it from the data

40
00:02:38,040 --> 00:02:41,519
tracker make sure you understand it

41
00:02:41,519 --> 00:02:43,560
um any uh so we didn't really have any

42
00:02:43,560 --> 00:02:46,500
participation with the mic yesterday uh

43
00:02:46,500 --> 00:02:47,819
today

44
00:02:47,819 --> 00:02:49,920
the reason that we are all here at 7 30

45
00:02:49,920 --> 00:02:51,900
in the morning thank you all for coming

46
00:02:51,900 --> 00:02:54,239
so early is we're going to have a panel

47
00:02:54,239 --> 00:02:55,980
discussion after this anything said in

48
00:02:55,980 --> 00:02:57,660
the panel discussion is a contribution

49
00:02:57,660 --> 00:02:59,700
to the IDF and therefore covered by the

50
00:02:59,700 --> 00:03:02,119
Noel

51
00:03:03,660 --> 00:03:05,220
so

52
00:03:05,220 --> 00:03:06,720
um it's a rerun of yesterday morning

53
00:03:06,720 --> 00:03:07,860
slides for those of you who are here

54
00:03:07,860 --> 00:03:09,360
it's still great to see you all in

55
00:03:09,360 --> 00:03:10,440
person

56
00:03:10,440 --> 00:03:12,420
thank you especially much for waking up

57
00:03:12,420 --> 00:03:16,200
so early uh to be with us today 7 30.

58
00:03:16,200 --> 00:03:19,140
and you know if you're watching us on

59
00:03:19,140 --> 00:03:21,480
YouTube later we love you too

60
00:03:21,480 --> 00:03:25,319
so today's agenda yesterday uh recap of

61
00:03:25,319 --> 00:03:27,659
basically a

62
00:03:27,659 --> 00:03:29,400
um extremely informative and very

63
00:03:29,400 --> 00:03:31,379
enlightening I learned stuff which I was

64
00:03:31,379 --> 00:03:33,360
honestly not expecting to do

65
00:03:33,360 --> 00:03:34,700
um

66
00:03:34,700 --> 00:03:37,080
uh presentation sort of introducing

67
00:03:37,080 --> 00:03:40,920
quick uh and you know why it is and what

68
00:03:40,920 --> 00:03:43,739
it is and how it is

69
00:03:43,739 --> 00:03:46,379
uh and today we're gonna dig a little

70
00:03:46,379 --> 00:03:50,519
bit more uh into into specific aspects

71
00:03:50,519 --> 00:03:54,480
um of this so uh Ian

72
00:03:54,480 --> 00:03:58,760
uh with some help from Martin I guess

73
00:03:59,819 --> 00:04:01,620
um

74
00:04:01,620 --> 00:04:03,540
moral support for Martin

75
00:04:03,540 --> 00:04:04,440
um

76
00:04:04,440 --> 00:04:05,879
and slides from Martin we'll be talking

77
00:04:05,879 --> 00:04:07,560
about uh some experience with deploying

78
00:04:07,560 --> 00:04:09,120
quick at scale

79
00:04:09,120 --> 00:04:12,659
uh and then Lucas who I

80
00:04:12,659 --> 00:04:15,120
don't see here but he had to commute in

81
00:04:15,120 --> 00:04:17,940
um so he'll be here in a bit uh we'll be

82
00:04:17,940 --> 00:04:20,100
talking about applying observing and

83
00:04:20,100 --> 00:04:21,720
debugging quick

84
00:04:21,720 --> 00:04:23,160
and then after that we're going to have

85
00:04:23,160 --> 00:04:25,740
all of our speakers come up uh for a

86
00:04:25,740 --> 00:04:28,380
panel discussion slash q a that is the

87
00:04:28,380 --> 00:04:30,180
audience participation part so you know

88
00:04:30,180 --> 00:04:32,460
those of you who are still waking up you

89
00:04:32,460 --> 00:04:35,160
have either an hour to find your notes

90
00:04:35,160 --> 00:04:36,960
from Monday's session to figure out what

91
00:04:36,960 --> 00:04:38,220
you'd like to ask

92
00:04:38,220 --> 00:04:40,080
uh or

93
00:04:40,080 --> 00:04:41,460
um you know start thinking of your

94
00:04:41,460 --> 00:04:43,440
questions now and think of them as

95
00:04:43,440 --> 00:04:45,180
things go on

96
00:04:45,180 --> 00:04:46,500
um

97
00:04:46,500 --> 00:04:48,720
so with that

98
00:04:48,720 --> 00:04:50,639
we will

99
00:04:50,639 --> 00:04:53,820
reload the slides

100
00:04:53,820 --> 00:04:56,460
hmm

101
00:04:56,460 --> 00:04:59,840
reload the slides

102
00:05:01,139 --> 00:05:03,120
with that en is going to start telling

103
00:05:03,120 --> 00:05:08,960
you some jokes while we oh slide hmm

104
00:05:09,199 --> 00:05:10,740
uh

105
00:05:10,740 --> 00:05:12,600
it's 7 30 in the morning you're at an

106
00:05:12,600 --> 00:05:14,940
ITF meeting and we're at College improv

107
00:05:14,940 --> 00:05:17,540
have fun everyone

108
00:05:17,639 --> 00:05:18,960
trying to think of my best quick

109
00:05:18,960 --> 00:05:21,859
stand-up jokes

110
00:05:22,080 --> 00:05:23,940
I don't know

111
00:05:23,940 --> 00:05:26,900
oh no that's nothing nothing

112
00:05:26,900 --> 00:05:30,080
too soon

113
00:05:33,360 --> 00:05:36,139
I don't see them

114
00:05:37,860 --> 00:05:39,360
are they still not there they're still

115
00:05:39,360 --> 00:05:41,699
not there okay you can do in you want to

116
00:05:41,699 --> 00:05:43,860
do you want to do Lucas's slides what

117
00:05:43,860 --> 00:05:46,620
you can do Lucas's slides and and I mean

118
00:05:46,620 --> 00:05:48,000
I can I can start talking through some

119
00:05:48,000 --> 00:05:50,880
of it yeah um that's fine okay so we're

120
00:05:50,880 --> 00:05:52,199
going to start with load balancing or

121
00:05:52,199 --> 00:05:53,940
the quick LB draft uh a number of you

122
00:05:53,940 --> 00:05:55,139
who are involved in the quick working

123
00:05:55,139 --> 00:05:56,759
group or have been to the quick working

124
00:05:56,759 --> 00:05:58,500
group are probably fairly familiar with

125
00:05:58,500 --> 00:06:01,199
the quick uh load balancing draft

126
00:06:01,199 --> 00:06:02,639
um but we just wanted to go over it real

127
00:06:02,639 --> 00:06:04,020
quickly because we're actively in the

128
00:06:04,020 --> 00:06:07,080
process of uh deploying it at Google

129
00:06:07,080 --> 00:06:07,680
um

130
00:06:07,680 --> 00:06:09,419
and so specifically there are a number

131
00:06:09,419 --> 00:06:10,979
of things that it potentially could

132
00:06:10,979 --> 00:06:12,479
really help us with include printing

133
00:06:12,479 --> 00:06:14,880
linkability but one major issue is when

134
00:06:14,880 --> 00:06:16,979
you have any cast uh where you're using

135
00:06:16,979 --> 00:06:19,680
bgp to try to like do load balancing for

136
00:06:19,680 --> 00:06:21,479
a single IP potentially globally in our

137
00:06:21,479 --> 00:06:22,560
case

138
00:06:22,560 --> 00:06:24,000
um it's there are a number of

139
00:06:24,000 --> 00:06:25,740
complications so one complication is if

140
00:06:25,740 --> 00:06:27,060
you ever want to change the weights on

141
00:06:27,060 --> 00:06:29,160
bgb or anything about the bgp

142
00:06:29,160 --> 00:06:30,720
announcements of course a number of

143
00:06:30,720 --> 00:06:32,280
connections like start getting sent to

144
00:06:32,280 --> 00:06:33,720
the the wrong server at least without

145
00:06:33,720 --> 00:06:35,880
like a good bit of extra work

146
00:06:35,880 --> 00:06:37,199
um and that's particularly true for

147
00:06:37,199 --> 00:06:38,280
quick

148
00:06:38,280 --> 00:06:39,660
um and you might combine with like a nap

149
00:06:39,660 --> 00:06:41,220
rebind or something and this makes this

150
00:06:41,220 --> 00:06:43,620
all like much much worse

151
00:06:43,620 --> 00:06:45,300
um another problem is also connection

152
00:06:45,300 --> 00:06:48,120
migration so typically when you migrate

153
00:06:48,120 --> 00:06:49,500
a connection when you think of like

154
00:06:49,500 --> 00:06:50,759
connection migration you're migrating

155
00:06:50,759 --> 00:06:52,560
say from like cell to Wi-Fi or vice

156
00:06:52,560 --> 00:06:54,539
versa um so it's fairly common you're

157
00:06:54,539 --> 00:06:55,919
actually going to land on a different as

158
00:06:55,919 --> 00:06:58,440
an entirely different network and as a

159
00:06:58,440 --> 00:07:00,120
result it's fairly likely that you

160
00:07:00,120 --> 00:07:03,180
actually land on basically like an

161
00:07:03,180 --> 00:07:05,580
entirely different peering Point uh next

162
00:07:05,580 --> 00:07:07,818
slide

163
00:07:08,100 --> 00:07:09,419
I'll go back one moment just to go

164
00:07:09,419 --> 00:07:10,919
through so the identity load balancing

165
00:07:10,919 --> 00:07:12,240
and then we're going to talk a little

166
00:07:12,240 --> 00:07:14,100
bit about black hole or flow black

167
00:07:14,100 --> 00:07:16,740
cohing uh a fun little story on an

168
00:07:16,740 --> 00:07:19,319
outage that we had uh just about a year

169
00:07:19,319 --> 00:07:22,560
ago and then like one slide on zero RT

170
00:07:22,560 --> 00:07:24,479
in quick and why it's hard as well as

171
00:07:24,479 --> 00:07:26,940
some information that you can go look at

172
00:07:26,940 --> 00:07:28,860
more if you want to care uh so let's

173
00:07:28,860 --> 00:07:31,319
let's go next slide

174
00:07:31,319 --> 00:07:34,280
actually two more

175
00:07:35,099 --> 00:07:36,060
there

176
00:07:36,060 --> 00:07:37,919
so this is essentially the situation I

177
00:07:37,919 --> 00:07:38,940
was talking about where we have an

178
00:07:38,940 --> 00:07:40,919
anycast address

179
00:07:40,919 --> 00:07:44,160
or using an L4 load balancer or in this

180
00:07:44,160 --> 00:07:46,319
case like a slightly more intelligent L4

181
00:07:46,319 --> 00:07:48,660
load balancer is quick aware and we're

182
00:07:48,660 --> 00:07:50,699
sending it to an L7 server of some sort

183
00:07:50,699 --> 00:07:52,860
whether it's application front end or

184
00:07:52,860 --> 00:07:54,360
another layer of load balancers or

185
00:07:54,360 --> 00:07:56,520
another layer of load balances

186
00:07:56,520 --> 00:07:59,340
um and so again if you have flapping or

187
00:07:59,340 --> 00:08:02,520
anything else next slide

188
00:08:02,520 --> 00:08:04,380
or connection migration it's fairly

189
00:08:04,380 --> 00:08:05,880
likely you will end up on another load

190
00:08:05,880 --> 00:08:07,319
balancer

191
00:08:07,319 --> 00:08:09,660
so but yes this is particularly true if

192
00:08:09,660 --> 00:08:11,039
you're migrating from cell to Wi-Fi

193
00:08:11,039 --> 00:08:13,319
you're potentially changing carriers and

194
00:08:13,319 --> 00:08:14,280
you're potentially hitting different

195
00:08:14,280 --> 00:08:15,720
viewing points

196
00:08:15,720 --> 00:08:17,039
um and so this means that even though

197
00:08:17,039 --> 00:08:19,199
connection migration is great it does

198
00:08:19,199 --> 00:08:20,940
not work nearly as well at least in our

199
00:08:20,940 --> 00:08:22,500
infrastructure for any cast as it does

200
00:08:22,500 --> 00:08:25,379
for unicast whereas you know basically

201
00:08:25,379 --> 00:08:28,020
an IP is tied to the very least a

202
00:08:28,020 --> 00:08:29,819
physical location in a fairly strong

203
00:08:29,819 --> 00:08:31,800
sense like a Metro

204
00:08:31,800 --> 00:08:33,599
um peering point or something smaller

205
00:08:33,599 --> 00:08:35,339
like that

206
00:08:35,339 --> 00:08:37,320
um so when you arrive at the second load

207
00:08:37,320 --> 00:08:39,000
balancer it's like is this a new flow I

208
00:08:39,000 --> 00:08:40,679
don't know what to do with this I'll

209
00:08:40,679 --> 00:08:42,419
load balance it like a new flow so it's

210
00:08:42,419 --> 00:08:45,000
like all the old information is lost we

211
00:08:45,000 --> 00:08:46,380
have a lot of servers the odds you hit

212
00:08:46,380 --> 00:08:48,660
the same server is basically zero and

213
00:08:48,660 --> 00:08:50,220
you know the whole thing fails

214
00:08:50,220 --> 00:08:52,380
um and yeah and migration will fail uh

215
00:08:52,380 --> 00:08:54,180
so we'd really like this to work because

216
00:08:54,180 --> 00:08:55,680
we'd really like to move more traffic to

217
00:08:55,680 --> 00:08:58,500
anycast actually for a number of reasons

218
00:08:58,500 --> 00:09:00,240
um additionally it's like a very popular

219
00:09:00,240 --> 00:09:02,459
option for another number of customers

220
00:09:02,459 --> 00:09:06,120
so uh next slide

221
00:09:06,120 --> 00:09:08,220
that's one great reason to do quick lb

222
00:09:08,220 --> 00:09:10,440
and connection IDs but there's also kind

223
00:09:10,440 --> 00:09:13,320
of a discussion here oh next slide

224
00:09:13,320 --> 00:09:15,959
about linkability

225
00:09:15,959 --> 00:09:17,760
and

226
00:09:17,760 --> 00:09:21,060
there we go so

227
00:09:21,060 --> 00:09:22,620
yeah we got we got a fair amount of

228
00:09:22,620 --> 00:09:25,279
latency okay

229
00:09:26,100 --> 00:09:28,260
perfect linkability is basically like

230
00:09:28,260 --> 00:09:30,779
anytime you have a single device

231
00:09:30,779 --> 00:09:32,700
connecting to a single machine and you

232
00:09:32,700 --> 00:09:34,740
can like track it the whole time you

233
00:09:34,740 --> 00:09:37,260
know if it if you have a single IB for

234
00:09:37,260 --> 00:09:38,820
example in a single device like that's

235
00:09:38,820 --> 00:09:40,140
perfectly trackable right like it

236
00:09:40,140 --> 00:09:41,940
doesn't even matter if quick is involved

237
00:09:41,940 --> 00:09:43,260
or any other thing is involved like

238
00:09:43,260 --> 00:09:44,279
you're going to be able to track that

239
00:09:44,279 --> 00:09:45,600
connection

240
00:09:45,600 --> 00:09:47,100
um because there's you know there's only

241
00:09:47,100 --> 00:09:48,600
one connection to that IP in the entire

242
00:09:48,600 --> 00:09:49,740
world

243
00:09:49,740 --> 00:09:51,120
um so that's kind of the worst case

244
00:09:51,120 --> 00:09:53,640
scenario and you know so for but more

245
00:09:53,640 --> 00:09:55,140
typically what you have is kind of a

246
00:09:55,140 --> 00:09:57,300
good number of clients next slide

247
00:09:57,300 --> 00:10:00,060
connecting to quite a large number

248
00:10:00,060 --> 00:10:02,580
uh of servers and you know

249
00:10:02,580 --> 00:10:05,880
asymptotically this looks like perfect

250
00:10:05,880 --> 00:10:07,560
unlinkability

251
00:10:07,560 --> 00:10:09,120
um so anycast is actually helpful here

252
00:10:09,120 --> 00:10:11,040
in the sense that there's only one

253
00:10:11,040 --> 00:10:12,600
Global IP

254
00:10:12,600 --> 00:10:15,540
and so you have a lot of servers that

255
00:10:15,540 --> 00:10:17,700
kind of look like one server

256
00:10:17,700 --> 00:10:19,019
um and potentially you have something

257
00:10:19,019 --> 00:10:20,700
like you know a million clients or

258
00:10:20,700 --> 00:10:22,680
possibly even more connecting to that IP

259
00:10:22,680 --> 00:10:24,360
at any given point in time and you

260
00:10:24,360 --> 00:10:25,680
combine that with encrypted connection

261
00:10:25,680 --> 00:10:28,519
IDs from Quick lb and you start like

262
00:10:28,519 --> 00:10:31,920
approaching you know some real vision of

263
00:10:31,920 --> 00:10:34,680
unlinkability that's that's quite strong

264
00:10:34,680 --> 00:10:36,660
um you know it the what the word perfect

265
00:10:36,660 --> 00:10:39,120
is you know it is asymptotic but it

266
00:10:39,120 --> 00:10:41,519
becomes extraordinarily difficult as an

267
00:10:41,519 --> 00:10:43,260
adversary uh short of compromising the

268
00:10:43,260 --> 00:10:44,279
keys

269
00:10:44,279 --> 00:10:46,140
um so it becomes quite a compelling

270
00:10:46,140 --> 00:10:47,760
proposition from our privacy perspective

271
00:10:47,760 --> 00:10:49,860
as well as from a network infrastructure

272
00:10:49,860 --> 00:10:52,800
perspective and that's why we're we're

273
00:10:52,800 --> 00:10:54,240
deploying it

274
00:10:54,240 --> 00:10:54,839
um

275
00:10:54,839 --> 00:10:57,839
so hopefully uh you know probably q2ish

276
00:10:57,839 --> 00:11:01,019
q1ish next year if all things go well

277
00:11:01,019 --> 00:11:02,519
um

278
00:11:02,519 --> 00:11:04,399
and

279
00:11:04,399 --> 00:11:07,920
sorry uh wait hold on

280
00:11:07,920 --> 00:11:09,480
you got it I got it

281
00:11:09,480 --> 00:11:11,339
got it I got it I have like does anyone

282
00:11:11,339 --> 00:11:13,260
is it was the quick lb section clear

283
00:11:13,260 --> 00:11:14,579
does anyone have any quick questions

284
00:11:14,579 --> 00:11:16,380
before we move on now that we have like

285
00:11:16,380 --> 00:11:19,040
two seconds

286
00:11:20,540 --> 00:11:23,399
oh yeah I have there's more of that to

287
00:11:23,399 --> 00:11:25,519
come

288
00:11:25,560 --> 00:11:28,100
but thank you

289
00:11:28,100 --> 00:11:31,260
I'm trying to do the X for sure oh sorry

290
00:11:31,260 --> 00:11:33,180
quick lb there's a draft called quick lb

291
00:11:33,180 --> 00:11:34,680
that kind of describes this proposed

292
00:11:34,680 --> 00:11:36,180
solution I

293
00:11:36,180 --> 00:11:37,200
um

294
00:11:37,200 --> 00:11:39,680
yeah

295
00:11:39,959 --> 00:11:42,120
as you can have any connection problems

296
00:11:42,120 --> 00:11:44,820
I will do the share instead

297
00:11:44,820 --> 00:11:46,740
there we go

298
00:11:46,740 --> 00:11:49,079
so apologies we had entertainment

299
00:11:49,079 --> 00:11:51,540
because Martin Duke in the front row is

300
00:11:51,540 --> 00:11:52,980
the expert and as well as author of

301
00:11:52,980 --> 00:11:54,180
quick lb

302
00:11:54,180 --> 00:11:55,920
um and so you know any any super

303
00:11:55,920 --> 00:11:57,899
detailed questions I will defer to him

304
00:11:57,899 --> 00:11:59,220
um and he will be on the panel with us

305
00:11:59,220 --> 00:12:01,140
so okay

306
00:12:01,140 --> 00:12:02,720
um there we go

307
00:12:02,720 --> 00:12:05,940
ah yay okay this is the thing I was

308
00:12:05,940 --> 00:12:09,480
alluding to the entire time uh so quick

309
00:12:09,480 --> 00:12:12,000
lb has a single connection ID format

310
00:12:12,000 --> 00:12:14,600
that begins with two bits for config ID

311
00:12:14,600 --> 00:12:18,600
so that allows like rotation of keys and

312
00:12:18,600 --> 00:12:20,160
some other things

313
00:12:20,160 --> 00:12:22,260
um it has what is called a server ID

314
00:12:22,260 --> 00:12:24,899
portion and a nonce portion

315
00:12:24,899 --> 00:12:27,000
um and the you know the typical approach

316
00:12:27,000 --> 00:12:29,700
is that uh I think at least in the

317
00:12:29,700 --> 00:12:30,779
encrypted version which is what we're

318
00:12:30,779 --> 00:12:32,160
looking to deploy that this is basically

319
00:12:32,160 --> 00:12:34,860
like all encrypted and this is all you

320
00:12:34,860 --> 00:12:36,899
know except for the few bits and the the

321
00:12:36,899 --> 00:12:38,820
length this is all essentially opaque

322
00:12:38,820 --> 00:12:41,700
bytes to any passive Observer

323
00:12:41,700 --> 00:12:42,540
um

324
00:12:42,540 --> 00:12:44,279
yeah but the technically the draft

325
00:12:44,279 --> 00:12:46,079
allows for unencrypted but I personally

326
00:12:46,079 --> 00:12:47,579
would not recommend then

327
00:12:47,579 --> 00:12:49,079
um

328
00:12:49,079 --> 00:12:50,820
and the marginal cost of doing encrypted

329
00:12:50,820 --> 00:12:53,100
honestly is it's not particularly High

330
00:12:53,100 --> 00:12:54,420
the worst part is just key distribution

331
00:12:54,420 --> 00:12:56,459
that's by far the most annoying part the

332
00:12:56,459 --> 00:12:58,380
actual encryption code is not that hard

333
00:12:58,380 --> 00:13:01,860
so uh even an L4 load bouncer

334
00:13:01,860 --> 00:13:02,820
um

335
00:13:02,820 --> 00:13:05,180
so

336
00:13:08,720 --> 00:13:11,899
come on

337
00:13:12,420 --> 00:13:16,399
then having to do a unicast

338
00:13:19,220 --> 00:13:21,540
different infrastructures are different

339
00:13:21,540 --> 00:13:23,880
but the key fact here is

340
00:13:23,880 --> 00:13:26,220
when a packet that it does not know how

341
00:13:26,220 --> 00:13:28,260
to route arrives I don't any load

342
00:13:28,260 --> 00:13:30,420
balancer on Earth as long as that load

343
00:13:30,420 --> 00:13:32,040
balancer has the keys that we have

344
00:13:32,040 --> 00:13:34,620
distributed to it in order to decrypt uh

345
00:13:34,620 --> 00:13:37,019
these connection IDs it can decrypt the

346
00:13:37,019 --> 00:13:39,180
connection ID look at the routing

347
00:13:39,180 --> 00:13:40,800
information inside of it and do whatever

348
00:13:40,800 --> 00:13:42,660
the network infrastructure like needs it

349
00:13:42,660 --> 00:13:44,760
to do so like at Google we have a bunch

350
00:13:44,760 --> 00:13:46,019
of stuff that doesn't really make any

351
00:13:46,019 --> 00:13:48,120
sense outside of Google and so like

352
00:13:48,120 --> 00:13:49,500
describing it would not be particularly

353
00:13:49,500 --> 00:13:51,300
helpful but like you know every

354
00:13:51,300 --> 00:13:52,800
different network infrastructure has

355
00:13:52,800 --> 00:13:54,899
information uh that they want to wrote

356
00:13:54,899 --> 00:13:57,000
by that's like that they can pack into

357
00:13:57,000 --> 00:13:58,980
this encrypted payload

358
00:13:58,980 --> 00:14:01,139
it basically is what I'm saying yep

359
00:14:01,139 --> 00:14:02,339
could be a tunnel it could be something

360
00:14:02,339 --> 00:14:03,899
else could be GUI is actually another

361
00:14:03,899 --> 00:14:08,579
common option as an example uh great

362
00:14:08,579 --> 00:14:10,500
next slide

363
00:14:10,500 --> 00:14:12,600
okay let's talk about black bowling

364
00:14:12,600 --> 00:14:14,940
um so this has been a problem uh for a

365
00:14:14,940 --> 00:14:16,740
while at least for quick

366
00:14:16,740 --> 00:14:18,720
um this is partially historically due to

367
00:14:18,720 --> 00:14:20,880
some issues with middle boxes I think

368
00:14:20,880 --> 00:14:22,860
most of those issues have been solved at

369
00:14:22,860 --> 00:14:25,139
least to my knowledge but nonetheless

370
00:14:25,139 --> 00:14:27,120
um the internet is a terrible place and

371
00:14:27,120 --> 00:14:28,440
black hauling happens

372
00:14:28,440 --> 00:14:30,720
um and it's extremely user visible this

373
00:14:30,720 --> 00:14:32,820
does also happen for TCP as well

374
00:14:32,820 --> 00:14:34,260
um and I know that there are some

375
00:14:34,260 --> 00:14:35,519
mitigations in the kernel but I wanted

376
00:14:35,519 --> 00:14:37,139
to go through kind of what we did in

377
00:14:37,139 --> 00:14:40,139
quick uh to mitigate this problem

378
00:14:40,139 --> 00:14:42,240
um and next slide

379
00:14:42,240 --> 00:14:44,160
and I also want to say

380
00:14:44,160 --> 00:14:46,440
that a five Tuple can be black holed in

381
00:14:46,440 --> 00:14:48,300
either direction or both but it's quite

382
00:14:48,300 --> 00:14:50,279
often actually just One Direction but it

383
00:14:50,279 --> 00:14:51,540
doesn't really matter because you can't

384
00:14:51,540 --> 00:14:54,000
really tell like you can't really tell

385
00:14:54,000 --> 00:14:55,139
if you're not getting any acts because

386
00:14:55,139 --> 00:14:56,699
the packets aren't getting through from

387
00:14:56,699 --> 00:14:58,079
you to the server or if you're not

388
00:14:58,079 --> 00:14:59,639
getting acts because the ax get dropped

389
00:14:59,639 --> 00:15:01,860
it looks the same to you uh as the

390
00:15:01,860 --> 00:15:02,940
client

391
00:15:02,940 --> 00:15:05,699
so another challenge is it's fairly

392
00:15:05,699 --> 00:15:08,959
common that for a given five Tuple

393
00:15:08,959 --> 00:15:11,279
that multiple paths on that five two

394
00:15:11,279 --> 00:15:13,980
pole or similar five pupils will sorry

395
00:15:13,980 --> 00:15:17,040
uh will work like the the connectivity

396
00:15:17,040 --> 00:15:19,980
between like IBA and ipb is largely

397
00:15:19,980 --> 00:15:22,560
functional but one percent of the flow

398
00:15:22,560 --> 00:15:25,440
hashes may be dropped so it could be

399
00:15:25,440 --> 00:15:28,380
because you go through a bad wine card

400
00:15:28,380 --> 00:15:30,120
um you could be going through like a bad

401
00:15:30,120 --> 00:15:33,180
Rudder you could end up you know there's

402
00:15:33,180 --> 00:15:34,500
some load balancing going on and

403
00:15:34,500 --> 00:15:35,880
suddenly you end up getting sent through

404
00:15:35,880 --> 00:15:37,680
like some bizarre peering Point that's

405
00:15:37,680 --> 00:15:38,940
like extremely far away and there's

406
00:15:38,940 --> 00:15:40,320
extraordinarily High packet loss like

407
00:15:40,320 --> 00:15:43,199
just things happen and so it's not that

408
00:15:43,199 --> 00:15:45,180
uncommon for like you know two endpoints

409
00:15:45,180 --> 00:15:47,220
to be largely reachable but like either

410
00:15:47,220 --> 00:15:48,899
intermittently not reachable or

411
00:15:48,899 --> 00:15:51,600
otherwise unreliable

412
00:15:51,600 --> 00:15:53,880
um so the worst part about this is when

413
00:15:53,880 --> 00:15:55,980
you have black hole Wing typically you

414
00:15:55,980 --> 00:15:57,660
experience a timeout at least by default

415
00:15:57,660 --> 00:15:58,920
and you have to wait for the idle time

416
00:15:58,920 --> 00:16:00,360
out of the connection

417
00:16:00,360 --> 00:16:02,040
um so this can be as short as 30 seconds

418
00:16:02,040 --> 00:16:03,660
but commonly you know could be a few

419
00:16:03,660 --> 00:16:05,399
minutes this is extremely user visible

420
00:16:05,399 --> 00:16:07,079
and extremely painful

421
00:16:07,079 --> 00:16:09,060
um and so like having someone sit there

422
00:16:09,060 --> 00:16:11,940
and like wait for a page to load for a

423
00:16:11,940 --> 00:16:14,220
minute or two because uh you know a flow

424
00:16:14,220 --> 00:16:15,480
happened to get a lot cold though it's

425
00:16:15,480 --> 00:16:17,880
rare is quite frustrating

426
00:16:17,880 --> 00:16:19,380
um and so in order to bring down tail

427
00:16:19,380 --> 00:16:23,060
latency next slide

428
00:16:23,420 --> 00:16:25,980
uh right now at least in our

429
00:16:25,980 --> 00:16:27,180
implementation we close the connection

430
00:16:27,180 --> 00:16:29,760
after there are five consecutive probe

431
00:16:29,760 --> 00:16:32,220
timeouts under the theory that at that

432
00:16:32,220 --> 00:16:34,740
point the odds that it's still alive uh

433
00:16:34,740 --> 00:16:36,240
are quite low

434
00:16:36,240 --> 00:16:37,980
um this certainly kills a small number

435
00:16:37,980 --> 00:16:40,560
of flows that actually are viable

436
00:16:40,560 --> 00:16:42,899
um but you know the vast majority of

437
00:16:42,899 --> 00:16:45,839
flows it kills are are dead at that

438
00:16:45,839 --> 00:16:46,620
point

439
00:16:46,620 --> 00:16:48,420
um I think that turns out to be when you

440
00:16:48,420 --> 00:16:50,339
do the math at least in our code

441
00:16:50,339 --> 00:16:52,199
at least like 10 or 12 seconds of time

442
00:16:52,199 --> 00:16:54,060
so at that point the user is probably

443
00:16:54,060 --> 00:16:55,860
quite frustrated anyway assuming it's an

444
00:16:55,860 --> 00:16:58,500
actual user and if it's a non like if

445
00:16:58,500 --> 00:17:00,959
it's an internet client like trpc or

446
00:17:00,959 --> 00:17:02,880
um non-user facing then I mean that's

447
00:17:02,880 --> 00:17:04,140
still an extraordinary amount of tail

448
00:17:04,140 --> 00:17:05,699
latency and at that point you're better

449
00:17:05,699 --> 00:17:07,199
off closing the connection starting all

450
00:17:07,199 --> 00:17:08,699
over

451
00:17:08,699 --> 00:17:11,220
um so it does reduce tail and Z has some

452
00:17:11,220 --> 00:17:12,480
downsides

453
00:17:12,480 --> 00:17:13,260
um

454
00:17:13,260 --> 00:17:15,119
it's kind of unclear why this is so

455
00:17:15,119 --> 00:17:16,679
useful on the server as well as the

456
00:17:16,679 --> 00:17:18,839
client we tried to just do it only on

457
00:17:18,839 --> 00:17:19,980
the client side and it turned out doing

458
00:17:19,980 --> 00:17:22,740
it on both sides the size does help I

459
00:17:22,740 --> 00:17:24,359
mean I can come up with theories but

460
00:17:24,359 --> 00:17:26,640
it's a little bit hand-waving

461
00:17:26,640 --> 00:17:27,359
um

462
00:17:27,359 --> 00:17:29,100
so I don't really love this mechanism in

463
00:17:29,100 --> 00:17:31,740
the sense that it's a little bit hacky

464
00:17:31,740 --> 00:17:34,260
um but it does work and it does fix some

465
00:17:34,260 --> 00:17:36,840
fraction of the cases the mechanism that

466
00:17:36,840 --> 00:17:38,160
we came up with more recently that I

467
00:17:38,160 --> 00:17:39,539
like quite a bit better

468
00:17:39,539 --> 00:17:42,679
uh next slide

469
00:17:43,799 --> 00:17:46,260
um see a quick solution

470
00:17:46,260 --> 00:17:49,260
um got a joke in there again uh is Port

471
00:17:49,260 --> 00:17:50,820
migration oh that's you dude never got

472
00:17:50,820 --> 00:17:54,320
resolved that's nice

473
00:17:55,380 --> 00:17:58,799
uh so the observation is that changing

474
00:17:58,799 --> 00:18:00,600
only Port can drastically change the

475
00:18:00,600 --> 00:18:03,179
internet path that you eroded to uh if

476
00:18:03,179 --> 00:18:04,860
you do a trace route from two different

477
00:18:04,860 --> 00:18:07,140
ephemeral reports uh on your machine

478
00:18:07,140 --> 00:18:08,880
we've seen cases where you actually

479
00:18:08,880 --> 00:18:10,140
ended up going through different peering

480
00:18:10,140 --> 00:18:11,760
points for example which seems like

481
00:18:11,760 --> 00:18:14,039
amazing um in some cases like you'll

482
00:18:14,039 --> 00:18:15,780
have like nine hops on one side and 13

483
00:18:15,780 --> 00:18:16,860
on the other or something it's like

484
00:18:16,860 --> 00:18:18,960
drastically different routes to just

485
00:18:18,960 --> 00:18:20,880
it's almost inexplicable it's kind of

486
00:18:20,880 --> 00:18:22,860
like shocking how different they are

487
00:18:22,860 --> 00:18:25,200
um and so as a result I mean sometimes

488
00:18:25,200 --> 00:18:27,360
like if the connection gets black hole

489
00:18:27,360 --> 00:18:29,280
like just try a different port on the

490
00:18:29,280 --> 00:18:30,419
client side

491
00:18:30,419 --> 00:18:32,160
um and it turns out this fixes the

492
00:18:32,160 --> 00:18:34,260
connection in a remarkably High fraction

493
00:18:34,260 --> 00:18:35,820
at the time like I don't have exact

494
00:18:35,820 --> 00:18:38,340
numbers and it does depend on platform

495
00:18:38,340 --> 00:18:40,440
um but and I'll get exact numbers at

496
00:18:40,440 --> 00:18:42,840
some point in the near future once you

497
00:18:42,840 --> 00:18:45,000
know maybe for a future ITF talk but

498
00:18:45,000 --> 00:18:47,400
it's it's quite high and it's

499
00:18:47,400 --> 00:18:49,620
um you know that avoids us relying on

500
00:18:49,620 --> 00:18:52,620
this five RTO or PTO approach of closing

501
00:18:52,620 --> 00:18:53,760
the connection and assuming it's dead

502
00:18:53,760 --> 00:18:55,740
because instead of dying those

503
00:18:55,740 --> 00:18:58,020
connections get saved and we have to use

504
00:18:58,020 --> 00:18:59,960
that mechanism less frequently

505
00:18:59,960 --> 00:19:02,340
so this introduces entropy in both

506
00:19:02,340 --> 00:19:03,120
directions

507
00:19:03,120 --> 00:19:05,400
so and like some of the changes um such

508
00:19:05,400 --> 00:19:08,280
as changing like an ecmp uh flow hash

509
00:19:08,280 --> 00:19:10,740
sorry a flow hash in IPv6 in order to

510
00:19:10,740 --> 00:19:13,080
get like ecmp uh to change and giving

511
00:19:13,080 --> 00:19:14,700
entropy which only works in One

512
00:19:14,700 --> 00:19:16,020
Direction this actually works

513
00:19:16,020 --> 00:19:18,120
bi-directionally and so it doesn't

514
00:19:18,120 --> 00:19:20,580
matter which side of the path is

515
00:19:20,580 --> 00:19:22,200
actually being black hole in for order

516
00:19:22,200 --> 00:19:23,520
for it to fix

517
00:19:23,520 --> 00:19:25,200
um and it's Now default enabled in

518
00:19:25,200 --> 00:19:27,600
chromium which is chronet Chrome and

519
00:19:27,600 --> 00:19:29,640
anyone else who pulls in the chromium

520
00:19:29,640 --> 00:19:31,020
source code which is a good number of

521
00:19:31,020 --> 00:19:32,460
folks

522
00:19:32,460 --> 00:19:35,039
um but yeah quite simple mechanism uh

523
00:19:35,039 --> 00:19:37,799
Works quite well highly recommend it

524
00:19:37,799 --> 00:19:40,559
um yeah and a nice benefit of quick over

525
00:19:40,559 --> 00:19:42,600
TCP actually because we've had similar

526
00:19:42,600 --> 00:19:45,600
problems at Google for TCP

527
00:19:45,600 --> 00:19:46,860
um and the solutions are much more

528
00:19:46,860 --> 00:19:49,380
challenging than just changing import as

529
00:19:49,380 --> 00:19:53,160
I said IPv6 uh you know flow hashes like

530
00:19:53,160 --> 00:19:56,400
one of them so

531
00:19:56,400 --> 00:19:58,740
next slide

532
00:19:58,740 --> 00:20:01,200
excellent

533
00:20:01,200 --> 00:20:02,220
oh

534
00:20:02,220 --> 00:20:03,780
so

535
00:20:03,780 --> 00:20:06,120
we had an outage uh last November I'm

536
00:20:06,120 --> 00:20:07,679
fairly sure it was

537
00:20:07,679 --> 00:20:10,020
um it was quite terrifying actually uh

538
00:20:10,020 --> 00:20:11,400
it was definitely like one of the scary

539
00:20:11,400 --> 00:20:13,440
outages it turns out the impact will not

540
00:20:13,440 --> 00:20:15,179
end up being as bad as you might fear

541
00:20:15,179 --> 00:20:16,919
but it was quite terrifying

542
00:20:16,919 --> 00:20:19,080
um so there's a query of depth it was

543
00:20:19,080 --> 00:20:21,299
triggered by resumption information sent

544
00:20:21,299 --> 00:20:25,860
by gfes which are Google front ends uh

545
00:20:25,860 --> 00:20:27,900
two clients and then the clients within

546
00:20:27,900 --> 00:20:29,820
the resumption information back to

547
00:20:29,820 --> 00:20:30,840
servers so we talked about this

548
00:20:30,840 --> 00:20:32,760
yesterday with you know how you get zero

549
00:20:32,760 --> 00:20:34,860
rtt and such it's a lot of like let's

550
00:20:34,860 --> 00:20:36,179
ever give something to the client that

551
00:20:36,179 --> 00:20:37,980
the client then replays the next time

552
00:20:37,980 --> 00:20:39,780
and makes a connection so like it's

553
00:20:39,780 --> 00:20:41,880
fairly standard stuff real quick

554
00:20:41,880 --> 00:20:43,160
um unfortunately this new information

555
00:20:43,160 --> 00:20:46,200
was sent by these new servers caused our

556
00:20:46,200 --> 00:20:47,700
server the other servers to crash

557
00:20:47,700 --> 00:20:49,919
immediately

558
00:20:49,919 --> 00:20:51,120
um so much so that the handshake never

559
00:20:51,120 --> 00:20:53,400
even completed I got the client low and

560
00:20:53,400 --> 00:20:55,200
immediately died

561
00:20:55,200 --> 00:20:57,360
um so at Peak it was around 10 of all

562
00:20:57,360 --> 00:20:59,520
GFS or public-facing internet servers at

563
00:20:59,520 --> 00:21:01,679
Google it's quite a number

564
00:21:01,679 --> 00:21:03,539
um but it was very uneven it was mostly

565
00:21:03,539 --> 00:21:04,860
in Europe

566
00:21:04,860 --> 00:21:07,140
um and it took an hour and 44 minutes to

567
00:21:07,140 --> 00:21:09,120
fully resolve the issue which is quite a

568
00:21:09,120 --> 00:21:09,960
while

569
00:21:09,960 --> 00:21:11,100
um the reason for that is actually

570
00:21:11,100 --> 00:21:13,020
mostly due to

571
00:21:13,020 --> 00:21:14,940
um the SRE tooling and the impact on

572
00:21:14,940 --> 00:21:16,080
that

573
00:21:16,080 --> 00:21:18,120
um the reliability Engineers actually

574
00:21:18,120 --> 00:21:19,860
did not have access to number the tools

575
00:21:19,860 --> 00:21:21,720
that they normally would have access to

576
00:21:21,720 --> 00:21:23,700
uh there's actually like a lot more

577
00:21:23,700 --> 00:21:25,440
detail about that part of it in a

578
00:21:25,440 --> 00:21:27,480
recording I link to you later

579
00:21:27,480 --> 00:21:29,340
um but for now I'm actually going to

580
00:21:29,340 --> 00:21:30,600
focus on the technical bits because I

581
00:21:30,600 --> 00:21:31,919
think they're kind of interesting as

582
00:21:31,919 --> 00:21:33,059
well

583
00:21:33,059 --> 00:21:35,760
next slide

584
00:21:35,760 --> 00:21:39,179
so we we coined after this we coined

585
00:21:39,179 --> 00:21:41,340
this new idea called contagion which is

586
00:21:41,340 --> 00:21:42,720
like an interaction of distributed

587
00:21:42,720 --> 00:21:44,100
systems

588
00:21:44,100 --> 00:21:46,860
um so a key Point here is typically at

589
00:21:46,860 --> 00:21:48,480
Google what happens is

590
00:21:48,480 --> 00:21:50,820
We Roll something out we can area it say

591
00:21:50,820 --> 00:21:52,500
we tend to in this case it'll be sent to

592
00:21:52,500 --> 00:21:54,419
only two machines but typically you know

593
00:21:54,419 --> 00:21:56,640
sign into a rack or something we test it

594
00:21:56,640 --> 00:21:57,840
and if it starts crashing or doing

595
00:21:57,840 --> 00:21:59,100
something terrible then we roll it back

596
00:21:59,100 --> 00:22:01,799
right like standard stuff

597
00:22:01,799 --> 00:22:03,539
um however contagion bugs at least in

598
00:22:03,539 --> 00:22:04,440
this case have the property that

599
00:22:04,440 --> 00:22:06,360
rollbacks don't work

600
00:22:06,360 --> 00:22:08,039
um because there's now a state

601
00:22:08,039 --> 00:22:10,380
distributed in things that are not your

602
00:22:10,380 --> 00:22:11,880
server and not the thing you are rolling

603
00:22:11,880 --> 00:22:14,580
back so in this case it was all clients

604
00:22:14,580 --> 00:22:16,140
on the public internet

605
00:22:16,140 --> 00:22:17,580
uh

606
00:22:17,580 --> 00:22:19,500
particularly Chrome and it turns out to

607
00:22:19,500 --> 00:22:21,120
be the worst one for reasons I'll get

608
00:22:21,120 --> 00:22:22,080
into later

609
00:22:22,080 --> 00:22:23,520
um but it's quite a number of clients

610
00:22:23,520 --> 00:22:25,500
that were potentially uh having to roll

611
00:22:25,500 --> 00:22:27,120
back and you know this basically we're

612
00:22:27,120 --> 00:22:28,860
waiting for these machines people to

613
00:22:28,860 --> 00:22:30,179
like restart their browser or something

614
00:22:30,179 --> 00:22:31,980
like that before we can fully roll back

615
00:22:31,980 --> 00:22:33,659
in some sense

616
00:22:33,659 --> 00:22:35,280
um so that's quite scary from an SRE

617
00:22:35,280 --> 00:22:36,480
perspective and a reliability

618
00:22:36,480 --> 00:22:38,820
perspective because uh you know

619
00:22:38,820 --> 00:22:40,559
rollbacks are like your friend you're

620
00:22:40,559 --> 00:22:41,820
like you assume that if you roll back

621
00:22:41,820 --> 00:22:42,960
the right thing you will definitely fix

622
00:22:42,960 --> 00:22:45,299
it and like rolling back the issue did

623
00:22:45,299 --> 00:22:46,559
not fix it

624
00:22:46,559 --> 00:22:47,280
um

625
00:22:47,280 --> 00:22:48,840
and that also means a single task can

626
00:22:48,840 --> 00:22:50,159
actually cause a global outage which is

627
00:22:50,159 --> 00:22:52,559
the other thing that terrified everyone

628
00:22:52,559 --> 00:22:53,580
um

629
00:22:53,580 --> 00:22:54,900
so

630
00:22:54,900 --> 00:22:57,240
next slide

631
00:22:57,240 --> 00:22:58,980
so an example and one of the ones that

632
00:22:58,980 --> 00:23:01,020
happened in this case is TLS or quick

633
00:23:01,020 --> 00:23:03,120
resumption so again

634
00:23:03,120 --> 00:23:05,340
uh you know this is widely used the

635
00:23:05,340 --> 00:23:07,260
server gives the client something that

636
00:23:07,260 --> 00:23:08,640
the client then repeats back to the

637
00:23:08,640 --> 00:23:10,559
server and then the server parses it and

638
00:23:10,559 --> 00:23:12,720
then you know if server a produces

639
00:23:12,720 --> 00:23:14,700
something that when server B parses it

640
00:23:14,700 --> 00:23:16,500
it crashes or otherwise you know has

641
00:23:16,500 --> 00:23:18,419
undefined Behavior memory access and so

642
00:23:18,419 --> 00:23:19,919
on and so forth then you're in a bad

643
00:23:19,919 --> 00:23:22,620
place this is sort of a unique outage in

644
00:23:22,620 --> 00:23:25,320
the sense that it can't be fuzzed in

645
00:23:25,320 --> 00:23:26,460
traditional Senses at least not

646
00:23:26,460 --> 00:23:27,960
particularly well

647
00:23:27,960 --> 00:23:30,720
um and it's not a zero day in the sense

648
00:23:30,720 --> 00:23:33,600
that an attacker could take advantage of

649
00:23:33,600 --> 00:23:37,260
it so as an attacker you cannot craft a

650
00:23:37,260 --> 00:23:39,480
token or a resumption ticket that our

651
00:23:39,480 --> 00:23:41,460
servers will parse it'll just not

652
00:23:41,460 --> 00:23:44,240
decrypt it just won't work so only we

653
00:23:44,240 --> 00:23:46,799
uniquely have the power to cause a

654
00:23:46,799 --> 00:23:49,039
global zero day

655
00:23:49,039 --> 00:23:51,960
contagion outage of ourself

656
00:23:51,960 --> 00:23:54,659
it's amazing

657
00:23:54,659 --> 00:23:55,740
with great power comes create

658
00:23:55,740 --> 00:23:57,659
responsibility

659
00:23:57,659 --> 00:23:58,500
um okay

660
00:23:58,500 --> 00:24:01,320
so next slide

661
00:24:01,320 --> 00:24:02,460
so let's go through what actually

662
00:24:02,460 --> 00:24:03,780
happened to Google

663
00:24:03,780 --> 00:24:05,400
um I'll go a little faster through these

664
00:24:05,400 --> 00:24:07,200
because uh they're more visual but

665
00:24:07,200 --> 00:24:09,919
they're quite fun

666
00:24:10,919 --> 00:24:14,880
so uh a browser does a handshake to

667
00:24:14,880 --> 00:24:17,580
where we call a canary GFE which is a

668
00:24:17,580 --> 00:24:18,960
machine that's

669
00:24:18,960 --> 00:24:20,880
um you know using the latest software

670
00:24:20,880 --> 00:24:22,799
and or Flags

671
00:24:22,799 --> 00:24:25,559
so completes the handshake get you know

672
00:24:25,559 --> 00:24:28,100
next slide

673
00:24:28,200 --> 00:24:30,900
uh as I said before a token is given to

674
00:24:30,900 --> 00:24:33,000
the client that you can use to approve

675
00:24:33,000 --> 00:24:35,280
your IP address for future use so that's

676
00:24:35,280 --> 00:24:37,140
the source address token

677
00:24:37,140 --> 00:24:37,799
um

678
00:24:37,799 --> 00:24:39,840
you know the the client saves it

679
00:24:39,840 --> 00:24:41,280
everything is wonderful

680
00:24:41,280 --> 00:24:43,200
uh in this case uh the canary jobs

681
00:24:43,200 --> 00:24:45,419
populated a new field

682
00:24:45,419 --> 00:24:46,860
um that was mostly used for

683
00:24:46,860 --> 00:24:49,080
informational purposes but you know and

684
00:24:49,080 --> 00:24:50,640
uh so there's this new field that was

685
00:24:50,640 --> 00:24:51,960
that was shoved into this particular

686
00:24:51,960 --> 00:24:54,240
blob of data but of course it's all

687
00:24:54,240 --> 00:24:56,700
encrypted to the client ganto

688
00:24:56,700 --> 00:24:58,919
next slide

689
00:24:58,919 --> 00:25:02,159
uh again tokens and on the by the client

690
00:25:02,159 --> 00:25:04,980
demand next GFE uh this one does not

691
00:25:04,980 --> 00:25:07,260
have the new code

692
00:25:07,260 --> 00:25:08,059
um

693
00:25:08,059 --> 00:25:11,520
and Additionally the token should be

694
00:25:11,520 --> 00:25:13,080
cleared no matter what after doing this

695
00:25:13,080 --> 00:25:14,280
handshape because you already used it

696
00:25:14,280 --> 00:25:15,780
once however

697
00:25:15,780 --> 00:25:17,880
um due to a bug in our iitf quick

698
00:25:17,880 --> 00:25:19,380
implementation in Chrome at the time

699
00:25:19,380 --> 00:25:22,799
that did not happen so it's sort of

700
00:25:22,799 --> 00:25:24,179
stuck around in the browser until a

701
00:25:24,179 --> 00:25:25,620
handshake completed but unfortunately

702
00:25:25,620 --> 00:25:27,840
next slide

703
00:25:27,840 --> 00:25:30,120
every single time that token was given

704
00:25:30,120 --> 00:25:32,880
out the server crashed and so a

705
00:25:32,880 --> 00:25:37,400
handshape would never ever ever complete

706
00:25:38,580 --> 00:25:41,640
yeah it just yeah so

707
00:25:41,640 --> 00:25:43,740
you basically have a poison token that

708
00:25:43,740 --> 00:25:45,539
will never clear itself

709
00:25:45,539 --> 00:25:47,340
um and the sir the client will just keep

710
00:25:47,340 --> 00:25:49,200
like contacting servers and be like I

711
00:25:49,200 --> 00:25:50,820
don't understand like why are you not

712
00:25:50,820 --> 00:25:52,080
there why are you not responding to me

713
00:25:52,080 --> 00:25:54,059
this other person responded to me why

714
00:25:54,059 --> 00:25:57,539
don't you like me anymore next slide

715
00:25:57,539 --> 00:26:00,299
uh and it keeps trying and they keep

716
00:26:00,299 --> 00:26:01,860
crashing

717
00:26:01,860 --> 00:26:04,380
next slide

718
00:26:04,380 --> 00:26:07,140
uh yeah exactly so

719
00:26:07,140 --> 00:26:08,880
the one of the good things that did

720
00:26:08,880 --> 00:26:10,500
happen here at like one of the few good

721
00:26:10,500 --> 00:26:12,539
things is chromium has this exponential

722
00:26:12,539 --> 00:26:14,279
back off thing where like the handshake

723
00:26:14,279 --> 00:26:16,440
fails it won't try

724
00:26:16,440 --> 00:26:18,720
um quick to that domain for another five

725
00:26:18,720 --> 00:26:20,460
minutes however we were giving out

726
00:26:20,460 --> 00:26:22,140
tokens across like a whole host of

727
00:26:22,140 --> 00:26:24,059
domains for like the period of time that

728
00:26:24,059 --> 00:26:27,059
we were giving out tokens and so uh you

729
00:26:27,059 --> 00:26:29,100
know a single client could still be

730
00:26:29,100 --> 00:26:30,840
crashing like 10 or 20 different you

731
00:26:30,840 --> 00:26:32,460
know services for like five or ten

732
00:26:32,460 --> 00:26:33,480
minutes

733
00:26:33,480 --> 00:26:35,640
um so you know it's it's still quite a

734
00:26:35,640 --> 00:26:37,799
bit of impact for like a single client

735
00:26:37,799 --> 00:26:39,000
that happened to be given these tokens

736
00:26:39,000 --> 00:26:41,640
uh next slide

737
00:26:41,640 --> 00:26:43,799
so let's talk about kind of the timeline

738
00:26:43,799 --> 00:26:45,480
next slide

739
00:26:45,480 --> 00:26:46,620
oh

740
00:26:46,620 --> 00:26:48,840
that did not get exported properly PDF

741
00:26:48,840 --> 00:26:52,340
fail okay back

742
00:26:53,159 --> 00:26:55,320
I'm gonna have to do this from memory

743
00:26:55,320 --> 00:26:56,460
um okay

744
00:26:56,460 --> 00:26:57,600
uh

745
00:26:57,600 --> 00:27:00,299
two seven PSD so the middle of the night

746
00:27:00,299 --> 00:27:02,700
um server started crashing the automated

747
00:27:02,700 --> 00:27:05,279
Canary checks uh started noticing that

748
00:27:05,279 --> 00:27:06,600
servers were crashing they

749
00:27:06,600 --> 00:27:08,159
instantaneously rolled them back after

750
00:27:08,159 --> 00:27:10,440
only two servers got the new code this

751
00:27:10,440 --> 00:27:11,640
rollback took approximately four minutes

752
00:27:11,640 --> 00:27:15,539
so two servers performance had the uh

753
00:27:15,539 --> 00:27:18,000
mysterious code enabled on them

754
00:27:18,000 --> 00:27:20,400
so but zero three one everything was

755
00:27:20,400 --> 00:27:22,500
rolled back sres were looking at it and

756
00:27:22,500 --> 00:27:24,480
they were confused because the rollback

757
00:27:24,480 --> 00:27:26,400
had completed successfully and servers

758
00:27:26,400 --> 00:27:28,080
were still crashing

759
00:27:28,080 --> 00:27:30,000
and additionally they started realizing

760
00:27:30,000 --> 00:27:32,100
that none of their tooling worked

761
00:27:32,100 --> 00:27:33,659
so all of their monitoring and

762
00:27:33,659 --> 00:27:35,039
everything at least in the London office

763
00:27:35,039 --> 00:27:37,740
was completely unaccessible

764
00:27:37,740 --> 00:27:41,039
um they couldn't access uh logging they

765
00:27:41,039 --> 00:27:43,260
couldn't access crash dumps uh they

766
00:27:43,260 --> 00:27:45,179
couldn't access they could barely even

767
00:27:45,179 --> 00:27:46,740
figure out like how many servers were

768
00:27:46,740 --> 00:27:48,120
actually crashing

769
00:27:48,120 --> 00:27:50,940
um or where it was quite Dreadful and it

770
00:27:50,940 --> 00:27:54,179
took them a while to even realize that

771
00:27:54,179 --> 00:27:56,400
this was not an in fact a global Google

772
00:27:56,400 --> 00:27:59,039
outage in fact the vast majority of

773
00:27:59,039 --> 00:28:01,140
Europe where this was centered had no

774
00:28:01,140 --> 00:28:02,520
outage whatsoever for google.com

775
00:28:02,520 --> 00:28:04,200
youtube.com and most major Google

776
00:28:04,200 --> 00:28:05,340
domains

777
00:28:05,340 --> 00:28:06,600
um due to our Quirk of how this

778
00:28:06,600 --> 00:28:08,640
particular like rollout happened but for

779
00:28:08,640 --> 00:28:10,440
a while they were absolutely paranoid

780
00:28:10,440 --> 00:28:13,320
and completely apparent what they ended

781
00:28:13,320 --> 00:28:14,940
up doing is contacting some colleagues

782
00:28:14,940 --> 00:28:16,200
in Australia and New Zealand who are

783
00:28:16,200 --> 00:28:17,580
awake at the time

784
00:28:17,580 --> 00:28:19,140
um and had no problems whatsoever

785
00:28:19,140 --> 00:28:20,760
accessing these corporate systems

786
00:28:20,760 --> 00:28:22,200
because it basically was only crashing

787
00:28:22,200 --> 00:28:23,340
servers in Europe

788
00:28:23,340 --> 00:28:25,500
and they like basically hook them up

789
00:28:25,500 --> 00:28:27,840
with uh access I think it also turned

790
00:28:27,840 --> 00:28:29,100
out that meat worked perfectly during

791
00:28:29,100 --> 00:28:31,260
this time so like they like once they

792
00:28:31,260 --> 00:28:32,520
realized that they're like oh I'll just

793
00:28:32,520 --> 00:28:34,860
get like people in like another time

794
00:28:34,860 --> 00:28:36,539
zone to like get on a video call and

795
00:28:36,539 --> 00:28:38,400
like help me fix this up

796
00:28:38,400 --> 00:28:40,080
um so once they actually had access to

797
00:28:40,080 --> 00:28:42,299
everything all right which is around 138

798
00:28:42,299 --> 00:28:43,860
um it took them about five minutes to

799
00:28:43,860 --> 00:28:45,059
figure out what the problem was and what

800
00:28:45,059 --> 00:28:46,919
to do and like seven minutes to roll it

801
00:28:46,919 --> 00:28:48,059
back

802
00:28:48,059 --> 00:28:49,620
um so you know it was like a 15 minute

803
00:28:49,620 --> 00:28:52,740
outage and a of the actual system and

804
00:28:52,740 --> 00:28:54,539
about like an hour and you know 15

805
00:28:54,539 --> 00:28:56,760
minute outage uh of all the SRE

806
00:28:56,760 --> 00:28:58,440
reliability and monitoring systems that

807
00:28:58,440 --> 00:29:00,659
they need to actually fix the system

808
00:29:00,659 --> 00:29:02,279
um and this was another reason why it

809
00:29:02,279 --> 00:29:03,720
was so

810
00:29:03,720 --> 00:29:07,400
you know lengthy and painful

811
00:29:07,440 --> 00:29:09,000
I will re-export these slides so they're

812
00:29:09,000 --> 00:29:10,980
actually what I just said is done there

813
00:29:10,980 --> 00:29:12,419
okay

814
00:29:12,419 --> 00:29:14,880
so let's go to the last topic

815
00:29:14,880 --> 00:29:18,480
um so zero rtt is is quite hard even on

816
00:29:18,480 --> 00:29:20,580
a good day it's particularly challenging

817
00:29:20,580 --> 00:29:23,700
in ITF quick uh versus Google quick so

818
00:29:23,700 --> 00:29:25,020
you have things like multiple packet

819
00:29:25,020 --> 00:29:26,220
number spaces which from a design

820
00:29:26,220 --> 00:29:28,140
perspective are great

821
00:29:28,140 --> 00:29:30,840
um and have a number of number of nice

822
00:29:30,840 --> 00:29:33,000
properties but they are quite

823
00:29:33,000 --> 00:29:34,799
challenging to get correct and make sure

824
00:29:34,799 --> 00:29:37,080
that you are retransmitting the right

825
00:29:37,080 --> 00:29:39,059
thing at the right time and bundling the

826
00:29:39,059 --> 00:29:40,500
right thing with the other right thing

827
00:29:40,500 --> 00:29:42,659
and particularly if any single packet

828
00:29:42,659 --> 00:29:45,299
starts getting lost what you should do

829
00:29:45,299 --> 00:29:48,059
in response to losing that packet

830
00:29:48,059 --> 00:29:50,940
is sometimes subtle and if you get it

831
00:29:50,940 --> 00:29:52,380
wrong you either end up with a handshake

832
00:29:52,380 --> 00:29:54,539
deadlock or something that takes so darn

833
00:29:54,539 --> 00:29:56,460
long to complete that your usual will be

834
00:29:56,460 --> 00:29:58,380
very unhappy so like a single packet

835
00:29:58,380 --> 00:30:00,000
loss at the wrong moment if you your

836
00:30:00,000 --> 00:30:01,320
algorithm isn't implemented correctly

837
00:30:01,320 --> 00:30:03,480
can easily uh you know increase tail

838
00:30:03,480 --> 00:30:05,760
latency a few seconds uh not a few

839
00:30:05,760 --> 00:30:07,260
hundred milliseconds

840
00:30:07,260 --> 00:30:08,159
um

841
00:30:08,159 --> 00:30:09,659
so

842
00:30:09,659 --> 00:30:12,000
Additionally the key management is less

843
00:30:12,000 --> 00:30:15,000
synchronous in uh compared to like TLS

844
00:30:15,000 --> 00:30:17,520
over TCB so in particular the problem

845
00:30:17,520 --> 00:30:20,940
that Chrome had was Chrome had this

846
00:30:20,940 --> 00:30:22,679
thing where like it made the keys

847
00:30:22,679 --> 00:30:25,919
available when it were for handshake

848
00:30:25,919 --> 00:30:27,960
Keys available when it got the servers

849
00:30:27,960 --> 00:30:29,520
initial

850
00:30:29,520 --> 00:30:31,980
and like and then it could parse the

851
00:30:31,980 --> 00:30:33,059
server's handshake packet and then

852
00:30:33,059 --> 00:30:34,440
acknowledge that and like continue

853
00:30:34,440 --> 00:30:36,840
through the quick key schedule

854
00:30:36,840 --> 00:30:38,340
um unfortunately there was a bug in

855
00:30:38,340 --> 00:30:40,260
Chrome where if certificate verification

856
00:30:40,260 --> 00:30:42,240
took longer than it took for the

857
00:30:42,240 --> 00:30:44,640
server's initial to come back

858
00:30:44,640 --> 00:30:46,320
the event like the event never got

859
00:30:46,320 --> 00:30:47,760
triggered to actually release handshake

860
00:30:47,760 --> 00:30:48,600
keys

861
00:30:48,600 --> 00:30:50,399
you would never get handshake keys and

862
00:30:50,399 --> 00:30:52,020
chrome would just be like

863
00:30:52,020 --> 00:30:53,760
I can't process this packet because I

864
00:30:53,760 --> 00:30:55,080
don't have Henry keys because like

865
00:30:55,080 --> 00:30:57,720
pouring SSL didn't give it to me uh and

866
00:30:57,720 --> 00:30:59,159
like it would just sit there and like

867
00:30:59,159 --> 00:31:01,020
not acknowledge anything and not and of

868
00:31:01,020 --> 00:31:03,240
course the server was purple X because

869
00:31:03,240 --> 00:31:05,640
the server had gotten the you know its

870
00:31:05,640 --> 00:31:07,320
initial acknowledged and it's like well

871
00:31:07,320 --> 00:31:08,700
you process my initial why don't you

872
00:31:08,700 --> 00:31:10,200
have henchiki's

873
00:31:10,200 --> 00:31:11,580
um but yeah it was just due due to

874
00:31:11,580 --> 00:31:13,140
timing sequencing error

875
00:31:13,140 --> 00:31:14,760
um and again like this is one of those

876
00:31:14,760 --> 00:31:17,760
bugs that like quick due to kind of like

877
00:31:17,760 --> 00:31:19,320
the potential reordering events and

878
00:31:19,320 --> 00:31:21,360
stuff I think is quite a bit more likely

879
00:31:21,360 --> 00:31:22,980
to to have

880
00:31:22,980 --> 00:31:23,640
um

881
00:31:23,640 --> 00:31:25,980
so there's a whole talk on this uh

882
00:31:25,980 --> 00:31:28,020
recording and slides

883
00:31:28,020 --> 00:31:30,059
um that you can watch and that's why I

884
00:31:30,059 --> 00:31:32,279
didn't go into it further but uh it's

885
00:31:32,279 --> 00:31:34,559
it's there's some complex sticky details

886
00:31:34,559 --> 00:31:36,600
in there but uh needless to say it's

887
00:31:36,600 --> 00:31:38,279
it's something that requires a lot of

888
00:31:38,279 --> 00:31:39,960
patience and a lot of debugging an

889
00:31:39,960 --> 00:31:41,580
excellent tooling

890
00:31:41,580 --> 00:31:43,980
um without excellent tooling I would say

891
00:31:43,980 --> 00:31:46,919
uh it's it's extremely difficult if not

892
00:31:46,919 --> 00:31:49,860
impossible to really get this right

893
00:31:49,860 --> 00:31:50,940
um also I'd like to say the first time

894
00:31:50,940 --> 00:31:52,980
we tried to enable zero to T it was a

895
00:31:52,980 --> 00:31:55,140
substantial regression compared to not

896
00:31:55,140 --> 00:31:58,140
having zero to D so do not assume it

897
00:31:58,140 --> 00:31:59,640
will be faster just because it's zero to

898
00:31:59,640 --> 00:32:01,440
T even if your zero to T success rate is

899
00:32:01,440 --> 00:32:03,059
like 70 percent

900
00:32:03,059 --> 00:32:06,179
the 30 that don't work if you know a

901
00:32:06,179 --> 00:32:07,919
bunch of them are like

902
00:32:07,919 --> 00:32:09,480
have terrible tail ends here or

903
00:32:09,480 --> 00:32:10,320
something it's going to drag everything

904
00:32:10,320 --> 00:32:11,640
down it's going to make the performance

905
00:32:11,640 --> 00:32:13,860
worse so like please do not assume just

906
00:32:13,860 --> 00:32:15,419
because you enabled Xerox that it will

907
00:32:15,419 --> 00:32:16,860
be a performance when

908
00:32:16,860 --> 00:32:19,679
um you know really test it and actually

909
00:32:19,679 --> 00:32:21,659
like do the measurement and gather the

910
00:32:21,659 --> 00:32:23,880
data to like ensure that it's actually

911
00:32:23,880 --> 00:32:25,140
um a win for your particular

912
00:32:25,140 --> 00:32:26,460
implementation

913
00:32:26,460 --> 00:32:27,659
um that being said once there's a win

914
00:32:27,659 --> 00:32:29,279
for you for a given implementation I

915
00:32:29,279 --> 00:32:31,080
would expect it to be a win for all

916
00:32:31,080 --> 00:32:32,820
applications using that implementation

917
00:32:32,820 --> 00:32:34,020
so I'm not saying you have to like

918
00:32:34,020 --> 00:32:36,899
retest it per application but

919
00:32:36,899 --> 00:32:38,399
um for developers I would just

920
00:32:38,399 --> 00:32:40,620
definitely be very cautious about that

921
00:32:40,620 --> 00:32:43,580
an amount of time

922
00:32:43,679 --> 00:32:46,860
thank you very much Ian uh and now

923
00:32:46,860 --> 00:32:48,360
direct from the London Underground to

924
00:32:48,360 --> 00:32:50,279
talk about excellent tooling

925
00:32:50,279 --> 00:32:53,600
we have Lucas Perdue

926
00:32:55,799 --> 00:32:57,620
do you want to share should I share here

927
00:32:57,620 --> 00:33:00,120
it's uh yeah

928
00:33:00,120 --> 00:33:03,179
that one that one okay you're gonna have

929
00:33:03,179 --> 00:33:05,640
a clock oh I'll get your clock okay I'll

930
00:33:05,640 --> 00:33:06,960
fill in the meantime I was trying to

931
00:33:06,960 --> 00:33:09,059
think of a transport related joke on the

932
00:33:09,059 --> 00:33:11,220
way in while I stood on the tube all

933
00:33:11,220 --> 00:33:12,960
I'll say is my round trip time from here

934
00:33:12,960 --> 00:33:15,659
to home is about eight hours I think so

935
00:33:15,659 --> 00:33:18,120
anyway uh I'm Lucas Padu I'm a co-chair

936
00:33:18,120 --> 00:33:19,980
of the quick working group

937
00:33:19,980 --> 00:33:22,080
um I'm here today to talk you through

938
00:33:22,080 --> 00:33:23,640
all these slides about applying

939
00:33:23,640 --> 00:33:25,980
observing and debugging quick

940
00:33:25,980 --> 00:33:27,840
um I'm a little tired so just bear with

941
00:33:27,840 --> 00:33:29,940
me in case I ramble a bit but I've got a

942
00:33:29,940 --> 00:33:32,279
clock so I won't run over time uh so

943
00:33:32,279 --> 00:33:34,260
this is good I wanted to spend more time

944
00:33:34,260 --> 00:33:35,760
talking about the applicability in this

945
00:33:35,760 --> 00:33:36,480
talk

946
00:33:36,480 --> 00:33:38,940
but there's just way too many slides so

947
00:33:38,940 --> 00:33:41,100
in the slide deck are a load of overflow

948
00:33:41,100 --> 00:33:43,500
got a backup slides maybe if you have

949
00:33:43,500 --> 00:33:45,299
some questions towards the end or in the

950
00:33:45,299 --> 00:33:46,740
panel session we could go back to those

951
00:33:46,740 --> 00:33:49,019
or you go away and you're so inspired by

952
00:33:49,019 --> 00:33:50,279
this talk you want to find out a bit

953
00:33:50,279 --> 00:33:53,340
more um so just keep that in mind uh in

954
00:33:53,340 --> 00:33:54,480
this talk we're just going to kind of

955
00:33:54,480 --> 00:33:56,940
probably touch on other topics that

956
00:33:56,940 --> 00:33:59,880
Martin Jana Ian and Martin may be

957
00:33:59,880 --> 00:34:02,399
touched on but just from a lens of Uh

958
00:34:02,399 --> 00:34:03,779
something's going wrong with my quick

959
00:34:03,779 --> 00:34:05,820
connections I don't really understand it

960
00:34:05,820 --> 00:34:07,080
that well

961
00:34:07,080 --> 00:34:08,940
um I'm maybe like an SRE or an Ops

962
00:34:08,940 --> 00:34:10,379
person and I just need to figure this

963
00:34:10,379 --> 00:34:12,418
out I'm familiar with TCP I understand

964
00:34:12,418 --> 00:34:16,020
networking but what what can I transfer

965
00:34:16,020 --> 00:34:17,699
from my previous knowledge into quick

966
00:34:17,699 --> 00:34:19,918
and what things shouldn't I do

967
00:34:19,918 --> 00:34:21,780
um where do I need to retrain my brain

968
00:34:21,780 --> 00:34:24,480
these kinds of things so this is just

969
00:34:24,480 --> 00:34:25,739
going to walk through a couple of real

970
00:34:25,739 --> 00:34:27,540
world examples literally something I was

971
00:34:27,540 --> 00:34:29,280
looking into the other week There's a

972
00:34:29,280 --> 00:34:30,899
silly book but you know something that's

973
00:34:30,899 --> 00:34:33,060
been there latent and so we looked at it

974
00:34:33,060 --> 00:34:36,418
and so let's go next slide please

975
00:34:36,418 --> 00:34:38,879
but first the important things just to

976
00:34:38,879 --> 00:34:39,960
reiterate if you haven't learned

977
00:34:39,960 --> 00:34:41,699
anything yet in these technical deep

978
00:34:41,699 --> 00:34:44,699
Dives the quick is not TCP there's lots

979
00:34:44,699 --> 00:34:47,280
of similarities but it's different and

980
00:34:47,280 --> 00:34:48,899
those differences are the the kind of

981
00:34:48,899 --> 00:34:51,060
the the places where you might stumble

982
00:34:51,060 --> 00:34:53,580
or fall next slide

983
00:34:53,580 --> 00:34:57,660
noise quick just TLS as as we we saw

984
00:34:57,660 --> 00:34:59,339
yesterday's presentation the

985
00:34:59,339 --> 00:35:01,260
architecture and the interactions the

986
00:35:01,260 --> 00:35:03,859
models between quick and TLS

987
00:35:03,859 --> 00:35:06,720
you probably need to know some TLS so

988
00:35:06,720 --> 00:35:07,800
some of the stuff we're going to look at

989
00:35:07,800 --> 00:35:10,020
shortly is it's going to get into things

990
00:35:10,020 --> 00:35:12,540
like TLS client hello understanding

991
00:35:12,540 --> 00:35:15,599
around aspects of the TLs handshake but

992
00:35:15,599 --> 00:35:17,820
not the timing and interaction

993
00:35:17,820 --> 00:35:20,220
specifically of those messages it's

994
00:35:20,220 --> 00:35:21,480
going to be important because quite

995
00:35:21,480 --> 00:35:23,280
often when things don't work they don't

996
00:35:23,280 --> 00:35:24,839
work from the first step where the

997
00:35:24,839 --> 00:35:26,880
handshake fails so

998
00:35:26,880 --> 00:35:30,300
let's go next slide

999
00:35:30,300 --> 00:35:32,700
and it's not it's not HTTP this is one

1000
00:35:32,700 --> 00:35:34,800
of my bug beds quick yes okay G quick

1001
00:35:34,800 --> 00:35:38,520
was uh built to carry HTTP but that's

1002
00:35:38,520 --> 00:35:40,380
not what we have today we have our ETF

1003
00:35:40,380 --> 00:35:42,960
quick and it's capable of carrying

1004
00:35:42,960 --> 00:35:45,599
anything you can imagine

1005
00:35:45,599 --> 00:35:48,660
um literally you need to go if you have

1006
00:35:48,660 --> 00:35:50,280
an application and create an application

1007
00:35:50,280 --> 00:35:52,859
mapping I'll allude to that later on

1008
00:35:52,859 --> 00:35:55,560
maybe more about what it means

1009
00:35:55,560 --> 00:35:58,800
um but yes it's not just HTTP there are

1010
00:35:58,800 --> 00:36:00,540
aspects of Quick's design that lend

1011
00:36:00,540 --> 00:36:03,540
itself well to bi-directional exchanges

1012
00:36:03,540 --> 00:36:05,400
but we have other capabilities to carry

1013
00:36:05,400 --> 00:36:07,380
things unidirectionally or we have a

1014
00:36:07,380 --> 00:36:08,940
datagram extension that will allow

1015
00:36:08,940 --> 00:36:11,579
unreliable message delivery don't make

1016
00:36:11,579 --> 00:36:13,980
assumptions about your understanding of

1017
00:36:13,980 --> 00:36:15,359
how HTTP works and if you don't

1018
00:36:15,359 --> 00:36:17,579
understand how HTTP works that's even

1019
00:36:17,579 --> 00:36:19,800
better because you can come in and take

1020
00:36:19,800 --> 00:36:21,359
all these learnings away next slide

1021
00:36:21,359 --> 00:36:23,160
please

1022
00:36:23,160 --> 00:36:25,440
um and it's not it's definitely not the

1023
00:36:25,440 --> 00:36:28,680
web over EBP it's it's here for for many

1024
00:36:28,680 --> 00:36:31,740
applications in our working group uh we

1025
00:36:31,740 --> 00:36:33,359
can help advise you if you want to use

1026
00:36:33,359 --> 00:36:35,220
Quick uh but we we won't be The

1027
00:36:35,220 --> 00:36:37,020
Gatekeepers for application mapping

1028
00:36:37,020 --> 00:36:38,700
documents that describe how to use Quick

1029
00:36:38,700 --> 00:36:40,859
generally the transport services it

1030
00:36:40,859 --> 00:36:42,839
provides work now

1031
00:36:42,839 --> 00:36:44,940
um module some implementation concerns

1032
00:36:44,940 --> 00:36:47,640
but it's it's here for everyone to use

1033
00:36:47,640 --> 00:36:49,680
it's not the only thing you should use

1034
00:36:49,680 --> 00:36:51,839
it's not you know our Panacea of

1035
00:36:51,839 --> 00:36:54,300
everything but it's definitely a tool to

1036
00:36:54,300 --> 00:36:56,460
sit in your toolkit for internet next

1037
00:36:56,460 --> 00:36:58,940
slide please

1038
00:36:59,160 --> 00:37:01,140
um and it's quick quick is quick next

1039
00:37:01,140 --> 00:37:03,060
slide

1040
00:37:03,060 --> 00:37:05,520
it's a secure transport protocol which

1041
00:37:05,520 --> 00:37:07,200
means we might have some issues trying

1042
00:37:07,200 --> 00:37:09,119
to analyze it if we're doing things like

1043
00:37:09,119 --> 00:37:11,280
packet captures just keep this in mind

1044
00:37:11,280 --> 00:37:12,720
that some of the things you might be

1045
00:37:12,720 --> 00:37:14,460
able to do with TCP where you're

1046
00:37:14,460 --> 00:37:16,619
analyzing it with tools like Wireshark

1047
00:37:16,619 --> 00:37:18,240
they're not impossible but they're

1048
00:37:18,240 --> 00:37:19,740
different and they might require

1049
00:37:19,740 --> 00:37:23,339
different approaches next slide

1050
00:37:23,339 --> 00:37:24,839
and it's what you make it which I've

1051
00:37:24,839 --> 00:37:27,960
already touched on next slide

1052
00:37:27,960 --> 00:37:28,980
um so if you haven't got the time for

1053
00:37:28,980 --> 00:37:30,599
any of this quick starts with a

1054
00:37:30,599 --> 00:37:33,119
handshake we have application data sent

1055
00:37:33,119 --> 00:37:35,220
as soon as that handshake is done for

1056
00:37:35,220 --> 00:37:37,200
some definition of then Ian just talked

1057
00:37:37,200 --> 00:37:39,079
about zero rtt there's different

1058
00:37:39,079 --> 00:37:41,099
effectively stages within the connection

1059
00:37:41,099 --> 00:37:44,119
the application data can be exchanged

1060
00:37:44,119 --> 00:37:46,800
but it all relies on this handshake

1061
00:37:46,800 --> 00:37:49,980
happening first post that at some phase

1062
00:37:49,980 --> 00:37:51,480
within that checkpoint the package is

1063
00:37:51,480 --> 00:37:52,980
going to be protected if you don't have

1064
00:37:52,980 --> 00:37:54,540
the keys for that session you're not

1065
00:37:54,540 --> 00:37:55,980
going to be able to see the contents

1066
00:37:55,980 --> 00:37:58,260
you'll have a very slim sliver of

1067
00:37:58,260 --> 00:38:00,540
information available in a header

1068
00:38:00,540 --> 00:38:04,260
um it's tiny and you can't just rely on

1069
00:38:04,260 --> 00:38:05,339
that

1070
00:38:05,339 --> 00:38:07,200
um and the other important thing maybe

1071
00:38:07,200 --> 00:38:09,300
it's been touched on already but we we

1072
00:38:09,300 --> 00:38:10,740
have a reliable and unreliable

1073
00:38:10,740 --> 00:38:12,960
application data the reliable data is

1074
00:38:12,960 --> 00:38:15,119
re-transmitted in new packets it's not

1075
00:38:15,119 --> 00:38:18,359
re-transmitted in in the packet being

1076
00:38:18,359 --> 00:38:20,940
resent this can cause differences in the

1077
00:38:20,940 --> 00:38:22,920
way that packets and framing work if

1078
00:38:22,920 --> 00:38:24,359
you're familiar with TCP and you're

1079
00:38:24,359 --> 00:38:26,400
trying to look for maybe particular byte

1080
00:38:26,400 --> 00:38:28,920
offsets within a packet capture this

1081
00:38:28,920 --> 00:38:30,599
isn't not the way to do it you're going

1082
00:38:30,599 --> 00:38:32,160
to have to drill down into streams and

1083
00:38:32,160 --> 00:38:34,980
probably any application layer use of

1084
00:38:34,980 --> 00:38:37,020
that stream or reframing or subframing

1085
00:38:37,020 --> 00:38:41,040
on top of for extremes next slide please

1086
00:38:41,040 --> 00:38:42,359
um and we talked about applicability

1087
00:38:42,359 --> 00:38:43,980
management too

1088
00:38:43,980 --> 00:38:45,839
um whatever we mean by management of a

1089
00:38:45,839 --> 00:38:48,180
network maybe if you're just an operator

1090
00:38:48,180 --> 00:38:50,579
a network then you're the manager I

1091
00:38:50,579 --> 00:38:52,079
don't want to get into that but we have

1092
00:38:52,079 --> 00:38:53,820
two excellent drafts that have been

1093
00:38:53,820 --> 00:38:56,579
published uh in September so fairly

1094
00:38:56,579 --> 00:38:57,839
recently but they've been developed

1095
00:38:57,839 --> 00:39:00,780
alongside their core Roc specs uh you

1096
00:39:00,780 --> 00:39:04,500
know 899 through 9003

1097
00:39:04,500 --> 00:39:05,880
um and they cover two different aspects

1098
00:39:05,880 --> 00:39:06,900
of things

1099
00:39:06,900 --> 00:39:08,339
you might not be aware of these

1100
00:39:08,339 --> 00:39:10,440
documents they're a really good read if

1101
00:39:10,440 --> 00:39:11,640
if you want to get away from the

1102
00:39:11,640 --> 00:39:13,440
nitty-gritty protocol details which are

1103
00:39:13,440 --> 00:39:15,180
good but you know that's more of a

1104
00:39:15,180 --> 00:39:17,280
reference manual these documents are

1105
00:39:17,280 --> 00:39:19,020
written for a different target audience

1106
00:39:19,020 --> 00:39:20,520
the first one is the applicability draft

1107
00:39:20,520 --> 00:39:24,780
RFC 9308 uh talks about the features of

1108
00:39:24,780 --> 00:39:27,060
a transport protocol how you might adapt

1109
00:39:27,060 --> 00:39:30,300
your application whatever that is to

1110
00:39:30,300 --> 00:39:32,940
work on top of quick but not just an

1111
00:39:32,940 --> 00:39:34,619
instruction guide but the caveats are

1112
00:39:34,619 --> 00:39:36,000
considerations that you might need to

1113
00:39:36,000 --> 00:39:38,040
make where you have stream concurrency

1114
00:39:38,040 --> 00:39:39,480
that's a different feature compared to

1115
00:39:39,480 --> 00:39:41,640
TCP which had one single reliable byte

1116
00:39:41,640 --> 00:39:43,920
stream quick off easy a lot more things

1117
00:39:43,920 --> 00:39:45,540
and a lot more ways you could hurt

1118
00:39:45,540 --> 00:39:48,240
yourself and a lot more potential for

1119
00:39:48,240 --> 00:39:51,720
interrupt consider problems so where you

1120
00:39:51,720 --> 00:39:53,400
have a client in the server that have a

1121
00:39:53,400 --> 00:39:54,839
different kind of understanding about

1122
00:39:54,839 --> 00:39:57,420
what concurrency means for example so

1123
00:39:57,420 --> 00:39:59,280
it's an excellent documentation document

1124
00:39:59,280 --> 00:40:01,800
for that kind of thing

1125
00:40:01,800 --> 00:40:02,760
um and then a completely different

1126
00:40:02,760 --> 00:40:04,500
target audience in the manageability

1127
00:40:04,500 --> 00:40:07,020
draft which is more for people who uh

1128
00:40:07,020 --> 00:40:08,880
aren't operating a quick stack entirely

1129
00:40:08,880 --> 00:40:10,680
but seeing quick traffic flowing back

1130
00:40:10,680 --> 00:40:12,540
and forth across their Network so this

1131
00:40:12,540 --> 00:40:14,520
touches on the quicker variants and the

1132
00:40:14,520 --> 00:40:16,320
quick transport protocol

1133
00:40:16,320 --> 00:40:19,020
um and gives you effectively

1134
00:40:19,020 --> 00:40:21,119
um some explanation about what quick is

1135
00:40:21,119 --> 00:40:23,339
or what quick will be maybe how to

1136
00:40:23,339 --> 00:40:25,920
analyze it maybe how you won't be able

1137
00:40:25,920 --> 00:40:27,420
to analyze it compared to other

1138
00:40:27,420 --> 00:40:29,160
protocols that are traversing your

1139
00:40:29,160 --> 00:40:32,880
network so next slide please

1140
00:40:32,880 --> 00:40:34,560
um again let's go back everything starts

1141
00:40:34,560 --> 00:40:36,420
with a handshake there's all the the

1142
00:40:36,420 --> 00:40:38,520
places where handshakes mentioned it's

1143
00:40:38,520 --> 00:40:40,380
everywhere it's great uh this is already

1144
00:40:40,380 --> 00:40:41,880
covered I hope

1145
00:40:41,880 --> 00:40:43,260
um but the key items here I want to

1146
00:40:43,260 --> 00:40:45,060
focus on today are these two packet

1147
00:40:45,060 --> 00:40:46,980
types that we have initial and handshake

1148
00:40:46,980 --> 00:40:48,599
these are the things you'll probably see

1149
00:40:48,599 --> 00:40:51,180
in the first five lines of any

1150
00:40:51,180 --> 00:40:52,920
lecture that you take

1151
00:40:52,920 --> 00:40:55,140
um the initial's not tight is a type so

1152
00:40:55,140 --> 00:40:56,940
it's not an adjective sometimes when I

1153
00:40:56,940 --> 00:40:58,079
talk to people who aren't familiar with

1154
00:40:58,079 --> 00:40:59,700
quick and talk I'd say you know we need

1155
00:40:59,700 --> 00:41:01,140
to see the initial packet and they think

1156
00:41:01,140 --> 00:41:03,720
they mean the first one but you get

1157
00:41:03,720 --> 00:41:06,599
things like re-transmissions or retries

1158
00:41:06,599 --> 00:41:08,160
reattempts to send the initial and

1159
00:41:08,160 --> 00:41:10,200
you'll see multiple initials

1160
00:41:10,200 --> 00:41:12,300
um and they they also hinge on the the

1161
00:41:12,300 --> 00:41:14,040
actor in The Exchange so you'd have a

1162
00:41:14,040 --> 00:41:16,260
client initial the server initial using

1163
00:41:16,260 --> 00:41:18,720
the terminology like I'm that person who

1164
00:41:18,720 --> 00:41:20,339
insists on trying to use it correctly

1165
00:41:20,339 --> 00:41:22,740
and to to everyone's annoyance but it's

1166
00:41:22,740 --> 00:41:25,140
really critical here and and my my

1167
00:41:25,140 --> 00:41:26,940
understanding is we need to up level a

1168
00:41:26,940 --> 00:41:28,640
lot of people within the wider ecosystem

1169
00:41:28,640 --> 00:41:32,099
people like sres or operations to really

1170
00:41:32,099 --> 00:41:34,079
they don't need to understand all of the

1171
00:41:34,079 --> 00:41:35,700
details but one we're just communicating

1172
00:41:35,700 --> 00:41:38,880
can you help me and see if the initial

1173
00:41:38,880 --> 00:41:41,099
made it through through the network and

1174
00:41:41,099 --> 00:41:43,500
arrived at my server stack these kind of

1175
00:41:43,500 --> 00:41:45,480
conversations people can be familiar

1176
00:41:45,480 --> 00:41:47,160
with the TLs terminology like did we

1177
00:41:47,160 --> 00:41:49,380
receive the client hello it's similar to

1178
00:41:49,380 --> 00:41:50,820
this kind of thing

1179
00:41:50,820 --> 00:41:51,480
um

1180
00:41:51,480 --> 00:41:54,119
so but if that's one thing I would ask

1181
00:41:54,119 --> 00:41:56,280
you to focus on and take away

1182
00:41:56,280 --> 00:42:00,500
um use the right terms next slide please

1183
00:42:00,660 --> 00:42:02,400
so there's this excellent tool called

1184
00:42:02,400 --> 00:42:05,940
The Illustrated guide to stuff uh I

1185
00:42:05,940 --> 00:42:07,740
can't remember the right name uh there's

1186
00:42:07,740 --> 00:42:09,780
a link here uh it covers not just quick

1187
00:42:09,780 --> 00:42:13,380
but TLS 1.2 1.3 I think

1188
00:42:13,380 --> 00:42:16,740
um this is a visualization of of actual

1189
00:42:16,740 --> 00:42:18,839
kind of simulated data if you go to that

1190
00:42:18,839 --> 00:42:21,119
website in the repo behind it you'll see

1191
00:42:21,119 --> 00:42:24,000
that they use kind of real client server

1192
00:42:24,000 --> 00:42:26,940
interactions and take the pcap and then

1193
00:42:26,940 --> 00:42:30,000
take those bytes so um you can see here

1194
00:42:30,000 --> 00:42:31,619
I've just tried to point the text as

1195
00:42:31,619 --> 00:42:33,480
well I apologize but there's a lot of

1196
00:42:33,480 --> 00:42:35,339
stuff going on I do encourage you to go

1197
00:42:35,339 --> 00:42:37,020
visit it but you can see there's there's

1198
00:42:37,020 --> 00:42:38,579
two different initials within this

1199
00:42:38,579 --> 00:42:40,320
vertical trace the client initial and

1200
00:42:40,320 --> 00:42:42,480
the server initial the arrows there kind

1201
00:42:42,480 --> 00:42:45,119
of pointing in the opposite directions

1202
00:42:45,119 --> 00:42:47,700
um so if you go to the next slide

1203
00:42:47,700 --> 00:42:50,579
each of these boxes you can expand and

1204
00:42:50,579 --> 00:42:52,200
it's really meant as a learning tool

1205
00:42:52,200 --> 00:42:53,820
this isn't a debug tool

1206
00:42:53,820 --> 00:42:56,280
um the bytes here you can say you can go

1207
00:42:56,280 --> 00:42:58,079
into the GitHub and they're canned and

1208
00:42:58,079 --> 00:43:00,599
you can go and understand exactly maybe

1209
00:43:00,599 --> 00:43:03,300
you want to go and Fiddle or do other

1210
00:43:03,300 --> 00:43:05,099
things maybe you've got some comments on

1211
00:43:05,099 --> 00:43:06,780
the additional kind of annotations you

1212
00:43:06,780 --> 00:43:08,400
might like to see but you can you can

1213
00:43:08,400 --> 00:43:10,200
open up the client initial you can view

1214
00:43:10,200 --> 00:43:12,960
the TLs client hello within that client

1215
00:43:12,960 --> 00:43:15,240
initial and then drill down into

1216
00:43:15,240 --> 00:43:17,520
different bytes there so it's good if

1217
00:43:17,520 --> 00:43:18,960
you just want to say maybe take an

1218
00:43:18,960 --> 00:43:22,020
existing trace and compare it to kind of

1219
00:43:22,020 --> 00:43:24,000
a reference example say next slide

1220
00:43:24,000 --> 00:43:26,180
please

1221
00:43:26,460 --> 00:43:28,260
um just to drill even further in there

1222
00:43:28,260 --> 00:43:30,000
are these transport parameters these are

1223
00:43:30,000 --> 00:43:32,099
the the properties of a it's a

1224
00:43:32,099 --> 00:43:34,200
connection that each endpoint will

1225
00:43:34,200 --> 00:43:36,240
advertise to its peer we don't have time

1226
00:43:36,240 --> 00:43:37,500
to go into that

1227
00:43:37,500 --> 00:43:39,000
um but if if you're like looking at a

1228
00:43:39,000 --> 00:43:40,500
packet capture and you see and you're

1229
00:43:40,500 --> 00:43:41,579
drilling down and you see these

1230
00:43:41,579 --> 00:43:43,440
transport parameters and you think what

1231
00:43:43,440 --> 00:43:45,119
what are these going looking Ayana they

1232
00:43:45,119 --> 00:43:47,400
should be registered there maybe not but

1233
00:43:47,400 --> 00:43:48,599
you know this will give you a brief

1234
00:43:48,599 --> 00:43:50,460
overview most of these are in RFC 9000

1235
00:43:50,460 --> 00:43:52,319
but we have things like extensions which

1236
00:43:52,319 --> 00:43:54,540
would use transport parameters these

1237
00:43:54,540 --> 00:43:56,339
kinds of things might be new to you you

1238
00:43:56,339 --> 00:43:58,020
might say I'm seeing some kind of issue

1239
00:43:58,020 --> 00:44:01,140
and it could be related to you know a

1240
00:44:01,140 --> 00:44:03,900
mismatch or an impedance there you can

1241
00:44:03,900 --> 00:44:05,099
see on the right hand side is this full

1242
00:44:05,099 --> 00:44:07,020
expansion of what all these things mean

1243
00:44:07,020 --> 00:44:09,800
next slide please

1244
00:44:09,960 --> 00:44:11,579
um so let's look at an illustration from

1245
00:44:11,579 --> 00:44:13,380
Live Connections we just looked at you

1246
00:44:13,380 --> 00:44:15,420
know the some pre-canned examples you

1247
00:44:15,420 --> 00:44:17,099
can use your old friends pcapp and

1248
00:44:17,099 --> 00:44:19,560
Wireshark to look at this uh to just sex

1249
00:44:19,560 --> 00:44:21,599
successfully dissect quick packet to get

1250
00:44:21,599 --> 00:44:24,240
any division of Wireshark 3.4 and

1251
00:44:24,240 --> 00:44:25,680
upwards

1252
00:44:25,680 --> 00:44:27,839
um the examples here for the remainder

1253
00:44:27,839 --> 00:44:29,520
of this session I just created using

1254
00:44:29,520 --> 00:44:31,200
cloudflare quiche I work for cloudflare

1255
00:44:31,200 --> 00:44:32,760
it's the client and the server I'm most

1256
00:44:32,760 --> 00:44:34,560
familiar with we have some example apps

1257
00:44:34,560 --> 00:44:36,599
in the repo pretty much any other client

1258
00:44:36,599 --> 00:44:38,400
is going to be very similar to this so

1259
00:44:38,400 --> 00:44:39,900
if you have a favorite you could

1260
00:44:39,900 --> 00:44:42,300
probably recreate these things but just

1261
00:44:42,300 --> 00:44:43,859
in this example I have a server running

1262
00:44:43,859 --> 00:44:47,540
on localhost these flags effectively

1263
00:44:47,540 --> 00:44:50,040
minimize the handshake they just reduce

1264
00:44:50,040 --> 00:44:52,800
a few steps for clarity if I didn't have

1265
00:44:52,800 --> 00:44:54,780
that no retry flag for instance it would

1266
00:44:54,780 --> 00:44:56,400
send an additional message during the

1267
00:44:56,400 --> 00:44:58,319
handshake it's all cool but it's

1268
00:44:58,319 --> 00:45:00,420
complicated we don't have the time

1269
00:45:00,420 --> 00:45:01,680
um so you can kind of ignore those

1270
00:45:01,680 --> 00:45:03,540
things but yeah this is just a request

1271
00:45:03,540 --> 00:45:05,700
on my Local Host to get an index file

1272
00:45:05,700 --> 00:45:07,560
and that pick app underneath what you

1273
00:45:07,560 --> 00:45:09,359
see is

1274
00:45:09,359 --> 00:45:11,220
very small text and you probably can't

1275
00:45:11,220 --> 00:45:13,319
see it but um that's kind of the point

1276
00:45:13,319 --> 00:45:14,579
because I want you to go and look at

1277
00:45:14,579 --> 00:45:16,200
this yourself but the first the first

1278
00:45:16,200 --> 00:45:18,060
packet or the first line there is the

1279
00:45:18,060 --> 00:45:19,980
client initial going towards the server

1280
00:45:19,980 --> 00:45:22,440
and then we have some stuff coming back

1281
00:45:22,440 --> 00:45:24,720
in the other way it says handshake there

1282
00:45:24,720 --> 00:45:28,160
but we're going to drill into that next

1283
00:45:30,420 --> 00:45:33,300
um well one more um so I have some

1284
00:45:33,300 --> 00:45:34,800
ready-made examples speaking with Brian

1285
00:45:34,800 --> 00:45:36,480
we thought it would be cool to like take

1286
00:45:36,480 --> 00:45:39,300
some live real things um that I captured

1287
00:45:39,300 --> 00:45:42,060
and put up on GitHub this these P caps

1288
00:45:42,060 --> 00:45:43,980
and Q logs that I've got for local who's

1289
00:45:43,980 --> 00:45:45,960
good just a simple good exchange of a

1290
00:45:45,960 --> 00:45:48,000
request that succeeded at the quick

1291
00:45:48,000 --> 00:45:49,859
layer at least

1292
00:45:49,859 --> 00:45:53,299
um so next slide please

1293
00:45:53,339 --> 00:45:56,220
um again too tiny to see but if you

1294
00:45:56,220 --> 00:45:57,660
opened up Wireshark and you clicked on

1295
00:45:57,660 --> 00:45:59,579
your first line and you expanded out all

1296
00:45:59,579 --> 00:46:00,900
the details you're going to see a few

1297
00:46:00,900 --> 00:46:03,240
indicators here about what is the client

1298
00:46:03,240 --> 00:46:04,500
initial

1299
00:46:04,500 --> 00:46:06,359
um it's easier it's a lot easier here

1300
00:46:06,359 --> 00:46:08,460
because we've only got you know a very

1301
00:46:08,460 --> 00:46:11,880
small pcap of of one interaction and we

1302
00:46:11,880 --> 00:46:13,560
already know that but if you're kind of

1303
00:46:13,560 --> 00:46:15,180
trying to find a needle in a haystack

1304
00:46:15,180 --> 00:46:16,560
trying to look for some of these things

1305
00:46:16,560 --> 00:46:18,660
it can be a bit difficult but yeah we've

1306
00:46:18,660 --> 00:46:20,339
got indicators like the source port or

1307
00:46:20,339 --> 00:46:22,440
the destination Port this is a bad

1308
00:46:22,440 --> 00:46:24,300
indicator using Source Port don't rely

1309
00:46:24,300 --> 00:46:26,700
on that being anything it could be the

1310
00:46:26,700 --> 00:46:28,260
same for everything because quick is

1311
00:46:28,260 --> 00:46:31,260
clever but alongside that within the the

1312
00:46:31,260 --> 00:46:33,359
packet type information here we've got

1313
00:46:33,359 --> 00:46:35,339
you know dissection to tell you the type

1314
00:46:35,339 --> 00:46:39,240
based on stuff and underneath within

1315
00:46:39,240 --> 00:46:41,280
within the contents of the client

1316
00:46:41,280 --> 00:46:43,980
initial we have the the client hello so

1317
00:46:43,980 --> 00:46:45,599
this is the TLs client Hello message

1318
00:46:45,599 --> 00:46:48,000
again zooming in we see the transport

1319
00:46:48,000 --> 00:46:49,740
parameters this is exactly the same as

1320
00:46:49,740 --> 00:46:51,240
the other slide I showed you but these

1321
00:46:51,240 --> 00:46:53,099
are the actual transport parameters that

1322
00:46:53,099 --> 00:46:55,800
the the quiche client sends in this case

1323
00:46:55,800 --> 00:46:59,119
next slide please

1324
00:46:59,280 --> 00:47:00,960
um important thing here is application

1325
00:47:00,960 --> 00:47:02,520
layer protocol negotiation I don't

1326
00:47:02,520 --> 00:47:03,900
really have the time to get into this at

1327
00:47:03,900 --> 00:47:06,060
all but the in this case what happens is

1328
00:47:06,060 --> 00:47:07,619
the client's going to send a whole set

1329
00:47:07,619 --> 00:47:09,260
of different

1330
00:47:09,260 --> 00:47:12,060
variants or versions of HTTP that it

1331
00:47:12,060 --> 00:47:13,140
talks

1332
00:47:13,140 --> 00:47:14,940
um so it's like an offer

1333
00:47:14,940 --> 00:47:18,180
um answer application protocol and this

1334
00:47:18,180 --> 00:47:20,099
is it you might see different lists

1335
00:47:20,099 --> 00:47:22,380
different sets of protocols in there if

1336
00:47:22,380 --> 00:47:23,880
you're writing your protocol you should

1337
00:47:23,880 --> 00:47:26,700
definitely make an alpn for it

1338
00:47:26,700 --> 00:47:29,099
um because it helps you allow

1339
00:47:29,099 --> 00:47:30,960
multiplexing of different applications

1340
00:47:30,960 --> 00:47:32,760
maybe if you just want to set up one

1341
00:47:32,760 --> 00:47:34,980
quick listening port and support a slew

1342
00:47:34,980 --> 00:47:36,660
of applications on there

1343
00:47:36,660 --> 00:47:38,760
um this touches on the applicability

1344
00:47:38,760 --> 00:47:40,920
drafters things you should consider

1345
00:47:40,920 --> 00:47:42,780
around transport parameters in relation

1346
00:47:42,780 --> 00:47:44,880
to the application virtual you're trying

1347
00:47:44,880 --> 00:47:46,680
to negotiate and where things might not

1348
00:47:46,680 --> 00:47:49,200
completely converge but that's another

1349
00:47:49,200 --> 00:47:51,060
talk for another day go read the

1350
00:47:51,060 --> 00:47:54,859
applicability draft next slide please

1351
00:47:55,079 --> 00:47:56,700
um in a reverse direction we have a

1352
00:47:56,700 --> 00:47:59,160
server initial and a handshake and you

1353
00:47:59,160 --> 00:48:00,359
can see in the top the indicators are

1354
00:48:00,359 --> 00:48:01,980
kind of similar The Source Port is the

1355
00:48:01,980 --> 00:48:03,960
server's listening address that we

1356
00:48:03,960 --> 00:48:04,859
showed

1357
00:48:04,859 --> 00:48:07,079
um in the line a couple of slides back

1358
00:48:07,079 --> 00:48:09,480
uh we have the the initial type again

1359
00:48:09,480 --> 00:48:11,099
indicated

1360
00:48:11,099 --> 00:48:12,839
um and then just below that we have a

1361
00:48:12,839 --> 00:48:15,900
server hello coming back

1362
00:48:15,900 --> 00:48:17,400
um but we can't see as much information

1363
00:48:17,400 --> 00:48:20,280
as we could in the client initial

1364
00:48:20,280 --> 00:48:22,079
um we have this server handshake packet

1365
00:48:22,079 --> 00:48:23,520
just underneath

1366
00:48:23,520 --> 00:48:24,960
um but you can see it's been quite clear

1367
00:48:24,960 --> 00:48:26,880
there we can't decrypt anymore because

1368
00:48:26,880 --> 00:48:28,260
the secrets aren't available what does

1369
00:48:28,260 --> 00:48:31,940
that mean next slide please

1370
00:48:32,160 --> 00:48:33,720
um we need the keys we need the keys to

1371
00:48:33,720 --> 00:48:34,980
see the full picture

1372
00:48:34,980 --> 00:48:37,079
um from even in that early stage of you

1373
00:48:37,079 --> 00:48:37,800
know

1374
00:48:37,800 --> 00:48:40,140
one and two interactions going in in

1375
00:48:40,140 --> 00:48:42,060
opposite directions

1376
00:48:42,060 --> 00:48:43,380
um we might not be able to see

1377
00:48:43,380 --> 00:48:44,520
everything that's happening that would

1378
00:48:44,520 --> 00:48:46,440
help us diagnose some kind of issue that

1379
00:48:46,440 --> 00:48:47,579
might be happening early in the

1380
00:48:47,579 --> 00:48:49,140
connection you're probably familiar with

1381
00:48:49,140 --> 00:48:51,000
something called SSL key log file but if

1382
00:48:51,000 --> 00:48:52,319
you're not

1383
00:48:52,319 --> 00:48:53,880
um it's used by many but not all

1384
00:48:53,880 --> 00:48:55,859
implementations endpoints can be

1385
00:48:55,859 --> 00:48:57,240
instructed but like an environment

1386
00:48:57,240 --> 00:48:59,099
variable or maybe

1387
00:48:59,099 --> 00:49:01,920
you know just built or configured to

1388
00:49:01,920 --> 00:49:04,980
drop sorry Place their keys explicitly

1389
00:49:04,980 --> 00:49:07,740
in a location that can be

1390
00:49:07,740 --> 00:49:10,319
used to contain the session keys in a

1391
00:49:10,319 --> 00:49:11,640
format

1392
00:49:11,640 --> 00:49:13,260
um this is kind of common it's a de

1393
00:49:13,260 --> 00:49:14,819
facto standard Martin's been working on

1394
00:49:14,819 --> 00:49:16,680
a new ID to kind of formalize this

1395
00:49:16,680 --> 00:49:19,740
format which is good work

1396
00:49:19,740 --> 00:49:21,420
um uh but the session keys are

1397
00:49:21,420 --> 00:49:23,339
symmetrical so if you can drop them from

1398
00:49:23,339 --> 00:49:25,380
the server or the client and you should

1399
00:49:25,380 --> 00:49:27,720
be able to decrypt the the packets for

1400
00:49:27,720 --> 00:49:29,640
anything so depending on who you are

1401
00:49:29,640 --> 00:49:32,040
what you're in control of sometimes you

1402
00:49:32,040 --> 00:49:34,800
can you can use this as a kind of I need

1403
00:49:34,800 --> 00:49:36,780
to see both directions of traffic in

1404
00:49:36,780 --> 00:49:38,220
this example like I said we're just

1405
00:49:38,220 --> 00:49:40,140
using an environment variable

1406
00:49:40,140 --> 00:49:42,300
um to to dump some keys into files

1407
00:49:42,300 --> 00:49:44,640
locally we can configure Wireshark to

1408
00:49:44,640 --> 00:49:47,880
pick that file up next slide please

1409
00:49:47,880 --> 00:49:49,280
um

1410
00:49:49,280 --> 00:49:52,020
so we I can't go into it but yeah the

1411
00:49:52,020 --> 00:49:53,520
Wireshark documentation will explain

1412
00:49:53,520 --> 00:49:55,140
this and go into your preferences or

1413
00:49:55,140 --> 00:49:56,640
there's all kinds of cool tricks you can

1414
00:49:56,640 --> 00:49:58,319
use but once you're configured once it

1415
00:49:58,319 --> 00:50:00,540
finds the correct session keys for an

1416
00:50:00,540 --> 00:50:01,680
interaction

1417
00:50:01,680 --> 00:50:02,880
um this is again there's the same kind

1418
00:50:02,880 --> 00:50:04,560
of dissection I showed earlier but this

1419
00:50:04,560 --> 00:50:06,780
time that handshake packet is revealing

1420
00:50:06,780 --> 00:50:08,520
a lot more information it's showing the

1421
00:50:08,520 --> 00:50:11,099
alpn it's showing that in this case the

1422
00:50:11,099 --> 00:50:13,740
server picked H3 so from that whole list

1423
00:50:13,740 --> 00:50:15,480
of things it picked one

1424
00:50:15,480 --> 00:50:18,740
next slide please

1425
00:50:19,020 --> 00:50:21,240
um but if we revisit the kind of

1426
00:50:21,240 --> 00:50:22,920
complete picture not just the one packet

1427
00:50:22,920 --> 00:50:24,720
we can see the dissection without the

1428
00:50:24,720 --> 00:50:27,119
keys there's some you know the top four

1429
00:50:27,119 --> 00:50:29,520
lines too small again sorry but

1430
00:50:29,520 --> 00:50:31,140
um we've got some packet types and then

1431
00:50:31,140 --> 00:50:33,359
it trans uh kind of converts into those

1432
00:50:33,359 --> 00:50:36,240
protected payload where we can see a

1433
00:50:36,240 --> 00:50:38,400
field called the DZ I'll explain that in

1434
00:50:38,400 --> 00:50:41,400
a couple of slides but um that's it if

1435
00:50:41,400 --> 00:50:42,599
you click those things you're just going

1436
00:50:42,599 --> 00:50:45,240
to see opaque bytes and you're not going

1437
00:50:45,240 --> 00:50:46,740
to know what they are with the

1438
00:50:46,740 --> 00:50:49,020
dissection well with keys you can see

1439
00:50:49,020 --> 00:50:50,520
that we're actually can drill in now we

1440
00:50:50,520 --> 00:50:52,319
can see different packet types packet

1441
00:50:52,319 --> 00:50:55,680
numbers frames within those packet types

1442
00:50:55,680 --> 00:50:57,660
um stuff around streams acknowledgments

1443
00:50:57,660 --> 00:50:59,640
crypto etc etc

1444
00:50:59,640 --> 00:51:01,740
next slide please

1445
00:51:01,740 --> 00:51:03,900
and then I touched on the SIDS these are

1446
00:51:03,900 --> 00:51:06,420
connection IDs if you look in this

1447
00:51:06,420 --> 00:51:07,740
example we're going to see different

1448
00:51:07,740 --> 00:51:09,900
connection IDs going in opposite

1449
00:51:09,900 --> 00:51:11,640
directions this can be useful if you're

1450
00:51:11,640 --> 00:51:13,440
just trying to trace

1451
00:51:13,440 --> 00:51:15,359
um you know connections of a particular

1452
00:51:15,359 --> 00:51:16,680
type again if you're trying to find a

1453
00:51:16,680 --> 00:51:18,720
needle in a haystack

1454
00:51:18,720 --> 00:51:21,180
next slide

1455
00:51:21,180 --> 00:51:21,839
um

1456
00:51:21,839 --> 00:51:23,819
so that's why shark and that does one

1457
00:51:23,819 --> 00:51:25,079
thing well especially if you can dump

1458
00:51:25,079 --> 00:51:26,760
the keys but we have something called q

1459
00:51:26,760 --> 00:51:29,339
log which is like my colleague Robin

1460
00:51:29,339 --> 00:51:31,619
down the front has been working on for a

1461
00:51:31,619 --> 00:51:33,599
number of years he'll tell me my

1462
00:51:33,599 --> 00:51:35,099
description is rubbish here so go and

1463
00:51:35,099 --> 00:51:37,559
speak to us at the end and we can inform

1464
00:51:37,559 --> 00:51:39,780
you everything but you know the

1465
00:51:39,780 --> 00:51:42,540
implementations often have debugging or

1466
00:51:42,540 --> 00:51:44,760
you know logging of their own to augment

1467
00:51:44,760 --> 00:51:46,680
stuff like packet captures you can see

1468
00:51:46,680 --> 00:51:48,599
kind of the reason why something

1469
00:51:48,599 --> 00:51:50,400
happened not just the fact that it did

1470
00:51:50,400 --> 00:51:51,540
happen

1471
00:51:51,540 --> 00:51:54,119
um and the common logging format can

1472
00:51:54,119 --> 00:51:56,520
encourage you know an ecosystem of

1473
00:51:56,520 --> 00:51:58,319
analysis and tooling

1474
00:51:58,319 --> 00:52:00,960
um that isn't just specific to an

1475
00:52:00,960 --> 00:52:02,520
implementation

1476
00:52:02,520 --> 00:52:03,839
um so so what we have in the quick

1477
00:52:03,839 --> 00:52:05,760
working group is adopted working items

1478
00:52:05,760 --> 00:52:08,579
for a kind of core base schema and cddl

1479
00:52:08,579 --> 00:52:10,920
this is very extensible we can use

1480
00:52:10,920 --> 00:52:12,599
accessibility to Define concrete

1481
00:52:12,599 --> 00:52:13,980
definitions at the moment we're just

1482
00:52:13,980 --> 00:52:16,200
focused on quick and HTTP 3 related

1483
00:52:16,200 --> 00:52:18,059
events because that's what we've worked

1484
00:52:18,059 --> 00:52:20,460
on but other kinds of things can be

1485
00:52:20,460 --> 00:52:22,920
added so if you're adding application

1486
00:52:22,920 --> 00:52:24,720
mapping you can

1487
00:52:24,720 --> 00:52:26,880
well maybe you wanted to find some q log

1488
00:52:26,880 --> 00:52:28,500
events that's something we're trying to

1489
00:52:28,500 --> 00:52:29,700
figure out this week what's the right

1490
00:52:29,700 --> 00:52:31,859
level of guidance to give to people

1491
00:52:31,859 --> 00:52:34,260
um but it's extensible it's just logs

1492
00:52:34,260 --> 00:52:35,940
it's just kind of text you can stick

1493
00:52:35,940 --> 00:52:37,500
stuff in if you know how to read it if

1494
00:52:37,500 --> 00:52:38,940
you know what to look

1495
00:52:38,940 --> 00:52:41,040
um but what's nice is the the current

1496
00:52:41,040 --> 00:52:43,380
Fleet of quick implementations many of

1497
00:52:43,380 --> 00:52:45,839
them do support q log so if you're

1498
00:52:45,839 --> 00:52:48,240
trying to find a bug between client and

1499
00:52:48,240 --> 00:52:49,619
server implementations and you

1500
00:52:49,619 --> 00:52:51,300
understand

1501
00:52:51,300 --> 00:52:54,720
what stack that is so it's curl built

1502
00:52:54,720 --> 00:52:58,380
with hb3 you can enable q log and get

1503
00:52:58,380 --> 00:53:00,540
this q log format out and stick it

1504
00:53:00,540 --> 00:53:02,640
somewhere that will help you analyze

1505
00:53:02,640 --> 00:53:04,500
maybe fault diagnose more quickly or

1506
00:53:04,500 --> 00:53:05,579
understand what's happening with the

1507
00:53:05,579 --> 00:53:09,200
congestion window next slide

1508
00:53:09,720 --> 00:53:12,240
um and we have cuviz Robin's lovely Q

1509
00:53:12,240 --> 00:53:14,460
visitor um which I would just describe

1510
00:53:14,460 --> 00:53:15,839
as trying to make sense out of Oodles of

1511
00:53:15,839 --> 00:53:16,859
data

1512
00:53:16,859 --> 00:53:19,559
um if if you went on the GitHub and

1513
00:53:19,559 --> 00:53:20,940
grabbed some of the the reference

1514
00:53:20,940 --> 00:53:23,099
material I had you can go to this tool

1515
00:53:23,099 --> 00:53:23,819
now

1516
00:53:23,819 --> 00:53:25,740
um you want to do for option two upload

1517
00:53:25,740 --> 00:53:28,020
a file it's not an upload it's kind of

1518
00:53:28,020 --> 00:53:29,940
all client hosted

1519
00:53:29,940 --> 00:53:32,460
for what we would analyze today at least

1520
00:53:32,460 --> 00:53:33,900
um so all happened in JavaScript in your

1521
00:53:33,900 --> 00:53:36,300
browser and come up with this kind of

1522
00:53:36,300 --> 00:53:38,579
excellent sequence diagram again way too

1523
00:53:38,579 --> 00:53:40,559
small to see the details here but this

1524
00:53:40,559 --> 00:53:42,480
is effectively rendering the same

1525
00:53:42,480 --> 00:53:43,920
information we just looked at in the

1526
00:53:43,920 --> 00:53:46,380
Wireshark in a different way so this is

1527
00:53:46,380 --> 00:53:48,119
going to give you maybe a bit more of a

1528
00:53:48,119 --> 00:53:51,300
context aware view of packets exchanging

1529
00:53:51,300 --> 00:53:52,859
between the client on the left and the

1530
00:53:52,859 --> 00:53:54,540
server on the right

1531
00:53:54,540 --> 00:53:56,280
um each Line's a packet that's my

1532
00:53:56,280 --> 00:53:58,440
interpretation again Robin correct me at

1533
00:53:58,440 --> 00:54:01,319
the end but um within those you have the

1534
00:54:01,319 --> 00:54:04,319
frames we have kind of a very quick

1535
00:54:04,319 --> 00:54:06,119
summary view of what those frames are

1536
00:54:06,119 --> 00:54:07,619
and then if you click any of those boxes

1537
00:54:07,619 --> 00:54:09,180
it's going to give you an expanded View

1538
00:54:09,180 --> 00:54:11,819
and it's this is a real example but it's

1539
00:54:11,819 --> 00:54:13,200
a good learning tool if you're just

1540
00:54:13,200 --> 00:54:14,460
trying to get familiar if you're not

1541
00:54:14,460 --> 00:54:16,740
somebody who can read a spec

1542
00:54:16,740 --> 00:54:18,420
um you know in one go and walk away and

1543
00:54:18,420 --> 00:54:20,220
understand everything if you're a bit

1544
00:54:20,220 --> 00:54:22,559
more um like me a bit more practical and

1545
00:54:22,559 --> 00:54:24,300
you just want to run some stuff try some

1546
00:54:24,300 --> 00:54:29,359
things out and do this next slide please

1547
00:54:29,700 --> 00:54:31,079
um so I just want to look at a real

1548
00:54:31,079 --> 00:54:33,540
world failure that we had again this is

1549
00:54:33,540 --> 00:54:38,940
using SSL key log file they're great and

1550
00:54:38,940 --> 00:54:42,359
no the box is in the wrong place oops so

1551
00:54:42,359 --> 00:54:44,160
um yeah it's using SSL key log fault

1552
00:54:44,160 --> 00:54:46,980
amazing but there's a property in hb3

1553
00:54:46,980 --> 00:54:48,480
you need to be able to open some new

1554
00:54:48,480 --> 00:54:50,280
directional streams again don't have the

1555
00:54:50,280 --> 00:54:51,780
time to go into that but you can

1556
00:54:51,780 --> 00:54:53,400
configure this quiche client this

1557
00:54:53,400 --> 00:54:56,760
example application to advertise

1558
00:54:56,760 --> 00:54:58,859
um from the client to the server a value

1559
00:54:58,859 --> 00:55:02,220
of zero that it can open zero initial uh

1560
00:55:02,220 --> 00:55:03,720
unidirectional streams when the

1561
00:55:03,720 --> 00:55:05,280
handshake is complete

1562
00:55:05,280 --> 00:55:07,260
our server code doesn't like that it

1563
00:55:07,260 --> 00:55:08,819
wants to be able to open these streams

1564
00:55:08,819 --> 00:55:11,760
and if it can't it will detect the error

1565
00:55:11,760 --> 00:55:14,160
in the code and send a connection close

1566
00:55:14,160 --> 00:55:17,040
message so an explicit immediate close

1567
00:55:17,040 --> 00:55:19,920
from the server to the client to say

1568
00:55:19,920 --> 00:55:22,260
I want to open up the Control stream I

1569
00:55:22,260 --> 00:55:25,079
can't sorry like go away this is the

1570
00:55:25,079 --> 00:55:25,980
kind of thing you should probably be

1571
00:55:25,980 --> 00:55:27,480
looking for if there's ever a report of

1572
00:55:27,480 --> 00:55:29,460
an issue stream research Connection

1573
00:55:29,460 --> 00:55:31,619
close messages are kind of good strong

1574
00:55:31,619 --> 00:55:34,260
indicators of what happened but maybe

1575
00:55:34,260 --> 00:55:35,640
not why

1576
00:55:35,640 --> 00:55:38,400
next slide

1577
00:55:38,400 --> 00:55:41,040
um same failure same same Trace

1578
00:55:41,040 --> 00:55:43,020
effectively the q log captured at the

1579
00:55:43,020 --> 00:55:45,300
same time a different rendering you can

1580
00:55:45,300 --> 00:55:46,980
see here the connection closes in the

1581
00:55:46,980 --> 00:55:48,660
bottom in red that's as much as you can

1582
00:55:48,660 --> 00:55:51,240
see because of the rendering but yeah um

1583
00:55:51,240 --> 00:55:53,400
it might be a better way to view these

1584
00:55:53,400 --> 00:55:56,720
things next slide

1585
00:55:56,940 --> 00:55:59,520
another one another failure this time

1586
00:55:59,520 --> 00:56:02,940
pretty much an identical command but um

1587
00:56:02,940 --> 00:56:04,619
for a different host name so the last

1588
00:56:04,619 --> 00:56:07,559
one was the localhost and this time to

1589
00:56:07,559 --> 00:56:09,359
to my website

1590
00:56:09,359 --> 00:56:11,579
um and in the packet well the peacock

1591
00:56:11,579 --> 00:56:13,260
looks a little different

1592
00:56:13,260 --> 00:56:16,140
it's just just from a mile kind of view

1593
00:56:16,140 --> 00:56:18,059
it's different which is always a good

1594
00:56:18,059 --> 00:56:20,940
sign of if the behavior is different if

1595
00:56:20,940 --> 00:56:22,740
someone's saying this behaves weird for

1596
00:56:22,740 --> 00:56:25,680
this thing and not that one and you see

1597
00:56:25,680 --> 00:56:27,720
a P CAP that's identical that's annoying

1598
00:56:27,720 --> 00:56:28,920
but if there's something like this

1599
00:56:28,920 --> 00:56:30,420
that's immediately there's a change in

1600
00:56:30,420 --> 00:56:32,760
Behavior that's a good signal so here

1601
00:56:32,760 --> 00:56:33,839
it's like where is that connection

1602
00:56:33,839 --> 00:56:36,059
closed I told you what the behavior was

1603
00:56:36,059 --> 00:56:37,440
what we're expecting we're not seeing

1604
00:56:37,440 --> 00:56:38,940
that why

1605
00:56:38,940 --> 00:56:41,960
slope is

1606
00:56:42,140 --> 00:56:44,940
qviz it's even worse it's even smaller

1607
00:56:44,940 --> 00:56:46,920
you can't see it the indicator here is

1608
00:56:46,920 --> 00:56:48,960
it's really long there's a lot of things

1609
00:56:48,960 --> 00:56:51,480
going on here in terms of timing there's

1610
00:56:51,480 --> 00:56:53,880
no collection closed

1611
00:56:53,880 --> 00:56:56,099
received by the there's a bug here it's

1612
00:56:56,099 --> 00:56:57,480
received by the client not the server

1613
00:56:57,480 --> 00:57:00,599
but anyway backside please

1614
00:57:00,599 --> 00:57:01,980
so what's the difference

1615
00:57:01,980 --> 00:57:03,480
um you know we've got effectively the

1616
00:57:03,480 --> 00:57:04,980
same client Behavior it's just pointing

1617
00:57:04,980 --> 00:57:06,839
at two different endpoints are they a

1618
00:57:06,839 --> 00:57:07,920
different implementation are they

1619
00:57:07,920 --> 00:57:09,720
different Stacks no like they use the

1620
00:57:09,720 --> 00:57:12,059
same underlying stack in this case I

1621
00:57:12,059 --> 00:57:13,800
know that but that's because I've got

1622
00:57:13,800 --> 00:57:15,480
Insider knowledge what's the root cause

1623
00:57:15,480 --> 00:57:17,579
what could this possibly be and that's

1624
00:57:17,579 --> 00:57:19,020
what I had to spend some time on the

1625
00:57:19,020 --> 00:57:22,680
other day looking into outside

1626
00:57:22,880 --> 00:57:24,660
there's different types of connection

1627
00:57:24,660 --> 00:57:26,760
close we haven't got the time to go into

1628
00:57:26,760 --> 00:57:28,920
this but you have a transport layer and

1629
00:57:28,920 --> 00:57:30,599
an application layer and

1630
00:57:30,599 --> 00:57:32,880
um code and they send different types

1631
00:57:32,880 --> 00:57:37,520
and stuff next slide

1632
00:57:37,619 --> 00:57:39,540
so the root cause here is a trouble with

1633
00:57:39,540 --> 00:57:42,599
timing the hb3 light library that we use

1634
00:57:42,599 --> 00:57:44,880
for the server side like I say it sees

1635
00:57:44,880 --> 00:57:46,619
the zero doesn't like it cause close on

1636
00:57:46,619 --> 00:57:48,119
the transport layer passes it an

1637
00:57:48,119 --> 00:57:51,240
application layer code and a reason but

1638
00:57:51,240 --> 00:57:53,280
neither the application or the hb3

1639
00:57:53,280 --> 00:57:55,440
library track the transport State the

1640
00:57:55,440 --> 00:57:57,240
handshake had completed correctly at

1641
00:57:57,240 --> 00:58:00,119
that time so that this doesn't happen

1642
00:58:00,119 --> 00:58:01,740
unilaterally but there's some timing

1643
00:58:01,740 --> 00:58:03,960
differences that I found and because

1644
00:58:03,960 --> 00:58:06,059
there's a potential leak of information

1645
00:58:06,059 --> 00:58:08,280
of application layer information before

1646
00:58:08,280 --> 00:58:10,619
the handshake had completed

1647
00:58:10,619 --> 00:58:14,579
um the the RFC says to don't send it you

1648
00:58:14,579 --> 00:58:16,260
know send something you can strip some

1649
00:58:16,260 --> 00:58:18,420
information so that the the peer is

1650
00:58:18,420 --> 00:58:20,220
going to receive That explicit close and

1651
00:58:20,220 --> 00:58:22,260
know that something went wrong but not

1652
00:58:22,260 --> 00:58:24,180
the specific details

1653
00:58:24,180 --> 00:58:27,960
um but that was just a bug and so the

1654
00:58:27,960 --> 00:58:30,420
the server didn't send that the the

1655
00:58:30,420 --> 00:58:33,300
client kept retrying not retiring that's

1656
00:58:33,300 --> 00:58:34,680
what I want to do

1657
00:58:34,680 --> 00:58:36,599
um but eventually the idle timeout

1658
00:58:36,599 --> 00:58:38,220
kicked in and gave up after several

1659
00:58:38,220 --> 00:58:41,640
rounds of retry X slide

1660
00:58:41,640 --> 00:58:44,339
and so that that debugging given I had

1661
00:58:44,339 --> 00:58:45,839
some tooling and some knowledge of where

1662
00:58:45,839 --> 00:58:48,839
to look God quite quickly I was able to

1663
00:58:48,839 --> 00:58:50,520
um kind of turn that into a unit test

1664
00:58:50,520 --> 00:58:52,559
and come up with a fix which was a

1665
00:58:52,559 --> 00:58:56,220
one-liner and now the client will always

1666
00:58:56,220 --> 00:58:58,559
receive the timely close

1667
00:58:58,559 --> 00:59:01,040
next slide

1668
00:59:01,040 --> 00:59:04,619
so yes in summary it works if you know

1669
00:59:04,619 --> 00:59:06,119
what to do and that's what I want to

1670
00:59:06,119 --> 00:59:08,339
make sure that we can scale out our

1671
00:59:08,339 --> 00:59:10,500
understanding of quick our ability to

1672
00:59:10,500 --> 00:59:12,240
use it it's one thing having us back on

1673
00:59:12,240 --> 00:59:15,000
the Shelf great wow but we want people

1674
00:59:15,000 --> 00:59:17,280
to use this quick as in TCP it's not TLS

1675
00:59:17,280 --> 00:59:19,500
it's not HP or the web over UDP it could

1676
00:59:19,500 --> 00:59:21,299
be anything that you would like it to be

1677
00:59:21,299 --> 00:59:23,520
and there might be use cases that you

1678
00:59:23,520 --> 00:59:25,319
need to use that might need kind of

1679
00:59:25,319 --> 00:59:26,400
slightly different approaches to

1680
00:59:26,400 --> 00:59:28,680
debugging but generally in my opinion

1681
00:59:28,680 --> 00:59:31,440
stuff to do with the initialization the

1682
00:59:31,440 --> 00:59:33,839
the handshake is it's kind of the first

1683
00:59:33,839 --> 00:59:35,880
step in everything

1684
00:59:35,880 --> 00:59:37,319
um

1685
00:59:37,319 --> 00:59:39,359
there's minimal information available on

1686
00:59:39,359 --> 00:59:40,400
the wire

1687
00:59:40,400 --> 00:59:42,960
crc9312 for the for information about

1688
00:59:42,960 --> 00:59:45,180
how to observe quick if you you're not

1689
00:59:45,180 --> 00:59:46,980
as kind of involved in the interaction

1690
00:59:46,980 --> 00:59:48,540
between client and servers you would

1691
00:59:48,540 --> 00:59:49,559
like

1692
00:59:49,559 --> 00:59:51,000
um and and just be aware that

1693
00:59:51,000 --> 00:59:52,500
implementations and deployments can

1694
00:59:52,500 --> 00:59:54,180
behave differently sometimes there's

1695
00:59:54,180 --> 00:59:55,859
bugs sometimes there's a lot of things

1696
00:59:55,859 --> 00:59:58,260
defer to an implementation choice you

1697
00:59:58,260 --> 01:00:00,359
know I should kind of level of normative

1698
01:00:00,359 --> 01:00:02,940
requirement and just opinions of The

1699
01:00:02,940 --> 01:00:06,059
Operators so I don't assume too much I

1700
01:00:06,059 --> 01:00:07,680
don't assume that the implementation is

1701
01:00:07,680 --> 01:00:09,780
perfect or that a behavior that you see

1702
01:00:09,780 --> 01:00:13,760
that seems weird isn't done by intention

1703
01:00:14,040 --> 01:00:15,839
and there's ways you can kind of get

1704
01:00:15,839 --> 01:00:18,720
some logs to do this that's it I'm done

1705
01:00:18,720 --> 01:00:21,960
thank you thank you very much Lucas

1706
01:00:21,960 --> 01:00:26,099
so uh I will ask uh all of our speakers

1707
01:00:26,099 --> 01:00:27,900
um to come up

1708
01:00:27,900 --> 01:00:30,859
um good morning Jonah

1709
01:00:31,440 --> 01:00:33,240
uh Lucas you too

1710
01:00:33,240 --> 01:00:37,559
[Laughter]

1711
01:00:37,559 --> 01:00:40,880
oh that's gonna be cold

1712
01:00:43,619 --> 01:00:44,940
and actually if one of you could grab

1713
01:00:44,940 --> 01:00:46,500
the mic and we'll do the past the mic

1714
01:00:46,500 --> 01:00:48,720
thing

1715
01:00:48,720 --> 01:00:50,839
yeah

1716
01:00:51,119 --> 01:00:54,180
and if you have any questions for any or

1717
01:00:54,180 --> 01:00:56,819
all of our speakers

1718
01:00:56,819 --> 01:00:58,680
please put yourself in queue and come up

1719
01:00:58,680 --> 01:01:00,720
to the mic now I'll give people a couple

1720
01:01:00,720 --> 01:01:01,980
of seconds to figure out what they want

1721
01:01:01,980 --> 01:01:03,359
to do before I start asking my own

1722
01:01:03,359 --> 01:01:05,400
questions

1723
01:01:05,400 --> 01:01:08,119
I know it's early

1724
01:01:08,220 --> 01:01:10,339
yeah

1725
01:01:13,859 --> 01:01:16,140
actually for the for remote people can

1726
01:01:16,140 --> 01:01:18,059
you like actually put yourself in queue

1727
01:01:18,059 --> 01:01:18,960
I mean you go ahead and say your name

1728
01:01:18,960 --> 01:01:22,500
but um like we do want to make sure

1729
01:01:22,500 --> 01:01:24,359
we're refer to people who are not here

1730
01:01:24,359 --> 01:01:28,020
my name is David and I guess question

1731
01:01:28,020 --> 01:01:30,059
for Martin Thompson I probably could

1732
01:01:30,059 --> 01:01:31,980
have looked us at myself but

1733
01:01:31,980 --> 01:01:33,960
um I think you mentioned that you

1734
01:01:33,960 --> 01:01:36,720
initially tried to use dtls but then is

1735
01:01:36,720 --> 01:01:40,380
a bad idea so not using TLS

1736
01:01:40,380 --> 01:01:46,920
um but quick is UDP so is TLS TCP or UDP

1737
01:01:46,920 --> 01:01:50,599
um I got confused in that point

1738
01:01:52,619 --> 01:01:54,720
oh that's that that's that's a fun

1739
01:01:54,720 --> 01:01:58,079
question so um we we initially thought

1740
01:01:58,079 --> 01:02:00,299
that maybe the handshake uh could use

1741
01:02:00,299 --> 01:02:04,140
the DLS dtls mechanisms for reliability

1742
01:02:04,140 --> 01:02:07,319
and we would just do dtls to start with

1743
01:02:07,319 --> 01:02:08,940
and then we would get to do quick things

1744
01:02:08,940 --> 01:02:12,059
once tcls is done

1745
01:02:12,059 --> 01:02:15,119
unfortunately dtls doesn't have the sort

1746
01:02:15,119 --> 01:02:17,700
of really sophisticated uh

1747
01:02:17,700 --> 01:02:19,799
recovery mechanisms and all the other

1748
01:02:19,799 --> 01:02:22,140
things that quick has and so you get a

1749
01:02:22,140 --> 01:02:24,359
lot more Advantage from from building

1750
01:02:24,359 --> 01:02:27,359
all of the the reliability and and in

1751
01:02:27,359 --> 01:02:29,640
order delivery mechanisms on top of

1752
01:02:29,640 --> 01:02:31,380
quick and so that's what we've we've

1753
01:02:31,380 --> 01:02:33,119
done

1754
01:02:33,119 --> 01:02:35,880
by doing that we were able to use TLS

1755
01:02:35,880 --> 01:02:38,940
which is a much simpler protocol and so

1756
01:02:38,940 --> 01:02:39,900
um

1757
01:02:39,900 --> 01:02:43,020
we avoided all the detail list Machinery

1758
01:02:43,020 --> 01:02:46,859
necessary to do reliability and

1759
01:02:46,859 --> 01:02:48,839
fragmentation reordering and all those

1760
01:02:48,839 --> 01:02:50,640
sorts of other wonderful things and just

1761
01:02:50,640 --> 01:02:54,020
use the stuff that we use for

1762
01:02:54,020 --> 01:02:56,520
reconstructing streams in quick

1763
01:02:56,520 --> 01:02:59,720
and and that turned out to be much much

1764
01:02:59,720 --> 01:03:03,359
easier in the end as it turns out once

1765
01:03:03,359 --> 01:03:05,880
we made that decision it was it was very

1766
01:03:05,880 --> 01:03:07,859
straightforward to to use all of the

1767
01:03:07,859 --> 01:03:09,599
quick machinery for for managing packet

1768
01:03:09,599 --> 01:03:12,900
loss recovery order delivery and whatnot

1769
01:03:12,900 --> 01:03:15,859
the TLs uses

1770
01:03:15,859 --> 01:03:18,960
so yeah you get the you get the

1771
01:03:18,960 --> 01:03:19,920
um

1772
01:03:19,920 --> 01:03:23,099
the advantage of you can use like a sort

1773
01:03:23,099 --> 01:03:24,420
of a single software architecture and

1774
01:03:24,420 --> 01:03:25,500
the disadvantage is you get a really

1775
01:03:25,500 --> 01:03:27,660
wonky layering diagram right I think

1776
01:03:27,660 --> 01:03:29,280
it's like and we we spoke about that

1777
01:03:29,280 --> 01:03:30,839
early on it's like oh

1778
01:03:30,839 --> 01:03:32,460
this layering diagram looks weird there

1779
01:03:32,460 --> 01:03:33,599
must be something wrong here and it

1780
01:03:33,599 --> 01:03:34,500
turns out that it was right because

1781
01:03:34,500 --> 01:03:36,559
otherwise you have to have

1782
01:03:36,559 --> 01:03:39,480
or whatever so yeah I mean I I think

1783
01:03:39,480 --> 01:03:41,520
we've always held that the layering

1784
01:03:41,520 --> 01:03:43,200
diagram should follow reality reality

1785
01:03:43,200 --> 01:03:45,599
shouldn't follow the diagram

1786
01:03:45,599 --> 01:03:48,000
um and in this particular case it was

1787
01:03:48,000 --> 01:03:51,240
very obvious that actually having

1788
01:03:51,240 --> 01:03:53,520
a separate

1789
01:03:53,520 --> 01:03:56,339
um loss detection recovery Machinery was

1790
01:03:56,339 --> 01:03:58,140
going to be fundamentally sub-optimal

1791
01:03:58,140 --> 01:04:00,299
it's not something you want if you have

1792
01:04:00,299 --> 01:04:02,579
a big data stream and you have all the

1793
01:04:02,579 --> 01:04:04,020
mechanisms built in you want to use the

1794
01:04:04,020 --> 01:04:06,720
same one for all the data that you send

1795
01:04:06,720 --> 01:04:09,960
not just for the handshake data is not

1796
01:04:09,960 --> 01:04:12,359
special in this particular way

1797
01:04:12,359 --> 01:04:14,960
yeah

1798
01:04:15,260 --> 01:04:18,059
cool thanks David

1799
01:04:18,059 --> 01:04:21,480
I tell I apologize that I suspect that

1800
01:04:21,480 --> 01:04:23,579
this was some already addressed and I

1801
01:04:23,579 --> 01:04:26,099
missed it but what's the current status

1802
01:04:26,099 --> 01:04:27,960
of the original Google Quick

1803
01:04:27,960 --> 01:04:30,180
implementation with regard to the ITF

1804
01:04:30,180 --> 01:04:33,660
implementation I we are attempting to

1805
01:04:33,660 --> 01:04:36,420
turn it down and remove the code as soon

1806
01:04:36,420 --> 01:04:38,819
as humanly possible

1807
01:04:38,819 --> 01:04:41,160
um it is a very very high priority of my

1808
01:04:41,160 --> 01:04:42,420
team

1809
01:04:42,420 --> 01:04:43,980
um

1810
01:04:43,980 --> 01:04:47,000
the expectation is q1

1811
01:04:47,000 --> 01:04:49,140
it may be

1812
01:04:49,140 --> 01:04:51,599
off sooner for sure than other

1813
01:04:51,599 --> 01:04:53,940
properties so like YouTube might go down

1814
01:04:53,940 --> 01:04:56,280
like turn it off earlier and stuff but

1815
01:04:56,280 --> 01:04:57,540
um it's either going to be very end of

1816
01:04:57,540 --> 01:04:59,520
Q4 or q1 that you're going to start

1817
01:04:59,520 --> 01:05:01,500
seeing it being turned off

1818
01:05:01,500 --> 01:05:03,500
um

1819
01:05:03,500 --> 01:05:05,460
hopefully the code will be delayed by

1820
01:05:05,460 --> 01:05:07,380
the mq1 if I'm really lucky but it it's

1821
01:05:07,380 --> 01:05:11,180
a lot of code and maybe you do

1822
01:05:12,180 --> 01:05:15,720
so yeah hello and I'm escort AG just a

1823
01:05:15,720 --> 01:05:19,559
quick question about uh quick and using

1824
01:05:19,559 --> 01:05:22,440
it over Nats and firewalls Etc is there

1825
01:05:22,440 --> 01:05:24,660
any special consideration or things you

1826
01:05:24,660 --> 01:05:26,940
have to do uh let's say to keep a

1827
01:05:26,940 --> 01:05:28,380
connection alive

1828
01:05:28,380 --> 01:05:31,619
it's just wondering about that

1829
01:05:31,619 --> 01:05:35,579
um I mean yeah just just don't block all

1830
01:05:35,579 --> 01:05:37,680
the connection after the handshake it's

1831
01:05:37,680 --> 01:05:39,720
a bummer to debug

1832
01:05:39,720 --> 01:05:41,160
um it's very bad for user experience

1833
01:05:41,160 --> 01:05:43,020
like if you're gonna drop like a quick

1834
01:05:43,020 --> 01:05:44,880
handshake just don't let any package

1835
01:05:44,880 --> 01:05:47,339
through because remember one packet in

1836
01:05:47,339 --> 01:05:48,839
each direction is enough to complete a

1837
01:05:48,839 --> 01:05:51,059
handshake in some circumstances and so

1838
01:05:51,059 --> 01:05:53,099
like some we've had issues with packet

1839
01:05:53,099 --> 01:05:54,359
inspection where like some of them are

1840
01:05:54,359 --> 01:05:55,740
like I'm going to take a few packets to

1841
01:05:55,740 --> 01:05:57,299
figure out what flow type this is and

1842
01:05:57,299 --> 01:05:58,799
it's like after three packets it's like

1843
01:05:58,799 --> 01:06:00,420
yeah I don't think I know what this is

1844
01:06:00,420 --> 01:06:02,160
so I'm going to just drop it it goes

1845
01:06:02,160 --> 01:06:03,900
terribly these are experiences Dreadful

1846
01:06:03,900 --> 01:06:06,480
so don't do that uh besides that like I

1847
01:06:06,480 --> 01:06:07,380
think a lot of things are quite

1848
01:06:07,380 --> 01:06:09,119
acceptable oh there's also information

1849
01:06:09,119 --> 01:06:11,339
in the um manageability draft that's

1850
01:06:11,339 --> 01:06:14,640
actually quite good yeah so um the the

1851
01:06:14,640 --> 01:06:17,460
manageability draft talks about uh from

1852
01:06:17,460 --> 01:06:19,319
from the client or server side when you

1853
01:06:19,319 --> 01:06:21,780
when you potentially have a middle box

1854
01:06:21,780 --> 01:06:23,460
on the path that's doing that or

1855
01:06:23,460 --> 01:06:26,760
something or firewalling and um

1856
01:06:26,760 --> 01:06:28,680
as long as they follow the advice that

1857
01:06:28,680 --> 01:06:30,359
Ian uh talked about there then then

1858
01:06:30,359 --> 01:06:33,599
things will work what we do find though

1859
01:06:33,599 --> 01:06:35,520
is that some Nats will time out faster

1860
01:06:35,520 --> 01:06:36,839
than the connections will time out

1861
01:06:36,839 --> 01:06:40,020
that's okay uh the use of connection IDs

1862
01:06:40,020 --> 01:06:42,720
will ensure that connections will still

1863
01:06:42,720 --> 01:06:45,240
manage to to work

1864
01:06:45,240 --> 01:06:46,740
um it looks like migration at the server

1865
01:06:46,740 --> 01:06:48,780
but everything just sort of sort of

1866
01:06:48,780 --> 01:06:50,280
works out reasonably well

1867
01:06:50,280 --> 01:06:52,680
we don't recommend that people do keep

1868
01:06:52,680 --> 01:06:55,559
lives keeper lives are useful in very

1869
01:06:55,559 --> 01:06:58,319
narrow circumstances

1870
01:06:58,319 --> 01:07:00,960
um but in most cases you won't need them

1871
01:07:00,960 --> 01:07:03,359
it is better to just walk away from a

1872
01:07:03,359 --> 01:07:04,920
connection

1873
01:07:04,920 --> 01:07:06,960
um and never send any other packets if

1874
01:07:06,960 --> 01:07:09,900
you don't need it and we found that in

1875
01:07:09,900 --> 01:07:10,799
particular when you're dealing with

1876
01:07:10,799 --> 01:07:12,839
mobile devices that's that's uh

1877
01:07:12,839 --> 01:07:15,000
excellent advice because you don't want

1878
01:07:15,000 --> 01:07:16,980
to wake the radio up just to say that

1879
01:07:16,980 --> 01:07:20,839
I'm going away just walk away

1880
01:07:23,220 --> 01:07:25,559
so that's some context because I I think

1881
01:07:25,559 --> 01:07:28,380
it may not have been clear

1882
01:07:28,380 --> 01:07:29,720
um

1883
01:07:29,720 --> 01:07:33,240
browsers currently rely on TCP as a

1884
01:07:33,240 --> 01:07:36,119
backup if quick fails

1885
01:07:36,119 --> 01:07:38,420
so if the quick connection were to fail

1886
01:07:38,420 --> 01:07:40,980
the user would not see a problem would

1887
01:07:40,980 --> 01:07:42,960
be able to fall back to http 2 and TCP

1888
01:07:42,960 --> 01:07:44,760
and that would work just fine that's

1889
01:07:44,760 --> 01:07:47,460
currently something that we do across

1890
01:07:47,460 --> 01:07:49,740
the board and the problem is if quick

1891
01:07:49,740 --> 01:07:51,839
doesn't fail quick succeeds HTTP

1892
01:07:51,839 --> 01:07:54,000
succeeds and then fails eventually

1893
01:07:54,000 --> 01:07:56,700
that's a harder one to debug is the is

1894
01:07:56,700 --> 01:08:00,059
the the basis for that now the the

1895
01:08:00,059 --> 01:08:01,740
one thing in terms of keep lives and

1896
01:08:01,740 --> 01:08:03,180
other things is that

1897
01:08:03,180 --> 01:08:05,700
and that cannot do much

1898
01:08:05,700 --> 01:08:07,380
in terms of adding to the connection

1899
01:08:07,380 --> 01:08:10,020
right and that cannot send keeper lives

1900
01:08:10,020 --> 01:08:11,579
and that cannot do any of those things

1901
01:08:11,579 --> 01:08:14,099
and that cannot send a reset

1902
01:08:14,099 --> 01:08:15,900
um these are things by definition just

1903
01:08:15,900 --> 01:08:18,000
part of the protocol it's all end-to-end

1904
01:08:18,000 --> 01:08:20,279
encrypted and that's that's that's one

1905
01:08:20,279 --> 01:08:22,020
thing but yeah the things that the NAT

1906
01:08:22,020 --> 01:08:24,779
can do are things like dropping in odd

1907
01:08:24,779 --> 01:08:27,359
places or or things of that sort but

1908
01:08:27,359 --> 01:08:30,899
those are the things to be mindful of

1909
01:08:30,899 --> 01:08:32,698
one thing I'll add is um as the stated

1910
01:08:32,698 --> 01:08:34,140
in the manageability draft if if

1911
01:08:34,140 --> 01:08:36,120
possible if Nats could actually conform

1912
01:08:36,120 --> 01:08:38,399
to the RFC and I use the I think two

1913
01:08:38,399 --> 01:08:41,759
minute minimum idle timeout for not

1914
01:08:41,759 --> 01:08:43,259
rebounding that that would be that's

1915
01:08:43,259 --> 01:08:44,880
sufficient for like I think the vast

1916
01:08:44,880 --> 01:08:47,339
majority of use cases but if if that's

1917
01:08:47,339 --> 01:08:48,960
that would be my like ask is like

1918
01:08:48,960 --> 01:08:50,160
ideally if they could do that that would

1919
01:08:50,160 --> 01:08:52,519
be wonderful

1920
01:08:53,660 --> 01:08:56,698
hey uh just to add um John touched on

1921
01:08:56,698 --> 01:08:58,979
TCP fallbacks um this works well for

1922
01:08:58,979 --> 01:09:02,819
HTTP but quick is not just HTTP so uh if

1923
01:09:02,819 --> 01:09:04,319
you are if you're designing another

1924
01:09:04,319 --> 01:09:06,839
application to go on top of quick

1925
01:09:06,839 --> 01:09:08,939
um you you might have different world or

1926
01:09:08,939 --> 01:09:10,319
different considerations maybe you're

1927
01:09:10,319 --> 01:09:12,000
taking something like

1928
01:09:12,000 --> 01:09:14,698
that already works over TCP and a new

1929
01:09:14,698 --> 01:09:16,920
mapping on to Quick the applicability

1930
01:09:16,920 --> 01:09:19,259
draft gives a good section of

1931
01:09:19,259 --> 01:09:22,080
considerations about the need for a TCP

1932
01:09:22,080 --> 01:09:24,479
fallback but not the Mandate

1933
01:09:24,479 --> 01:09:26,460
um and gives the color commentary about

1934
01:09:26,460 --> 01:09:28,679
these kinds of trade-offs which are

1935
01:09:28,679 --> 01:09:31,339
Illuminating

1936
01:09:31,399 --> 01:09:35,059
okay thank you

1937
01:09:36,000 --> 01:09:38,880
George Michaelson can I shift Target a

1938
01:09:38,880 --> 01:09:40,380
little bit which riffs on what you just

1939
01:09:40,380 --> 01:09:41,460
said

1940
01:09:41,460 --> 01:09:45,479
I realize 99.999 of the world is HTTP

1941
01:09:45,479 --> 01:09:47,219
and I would approve of targeting the

1942
01:09:47,219 --> 01:09:48,899
thing that will make everyone happy and

1943
01:09:48,899 --> 01:09:53,219
money but I live in SSH and mosh and I

1944
01:09:53,219 --> 01:09:54,840
sit here wondering why isn't there a

1945
01:09:54,840 --> 01:09:56,940
shimlair library that simply allows me

1946
01:09:56,940 --> 01:09:59,040
to do single packet transactional work

1947
01:09:59,040 --> 01:10:01,860
reliably across address Mobility taking

1948
01:10:01,860 --> 01:10:03,900
care of this stuff why hasn't there been

1949
01:10:03,900 --> 01:10:06,000
an interface spec that gives me a

1950
01:10:06,000 --> 01:10:07,560
command and control interface for a

1951
01:10:07,560 --> 01:10:09,360
machine that runs over quick

1952
01:10:09,360 --> 01:10:12,120
and S Tunnel exists so it's not like

1953
01:10:12,120 --> 01:10:14,040
people don't understand how to do SSH

1954
01:10:14,040 --> 01:10:18,179
over TLS through Packy abstractions but

1955
01:10:18,179 --> 01:10:20,100
couldn't you code a shim layer that just

1956
01:10:20,100 --> 01:10:22,199
gave me transparently access to this

1957
01:10:22,199 --> 01:10:25,320
framework to do zero rtt low latency

1958
01:10:25,320 --> 01:10:28,800
protected access walk away from it

1959
01:10:28,800 --> 01:10:31,380
come back on a different IP and carry on

1960
01:10:31,380 --> 01:10:33,840
the session this is what mosh does but I

1961
01:10:33,840 --> 01:10:35,580
don't want to run a pearl user space

1962
01:10:35,580 --> 01:10:39,179
demon to do my terminal binding where's

1963
01:10:39,179 --> 01:10:41,280
the shim where's the equivalent of

1964
01:10:41,280 --> 01:10:43,020
trumpet windsock that gives me

1965
01:10:43,020 --> 01:10:47,540
ubiquitous access to this software

1966
01:10:48,140 --> 01:10:50,699
that's off topic right that's the quick

1967
01:10:50,699 --> 01:10:52,440
answer is sorry that's off topic Focus

1968
01:10:52,440 --> 01:10:53,940
has got it and John is up and I'm gonna

1969
01:10:53,940 --> 01:10:56,300
put my hand in here go ahead no Lucas

1970
01:10:56,300 --> 01:10:58,800
I'll give you the the short answer which

1971
01:10:58,800 --> 01:11:00,840
is the the person who wrote mosh uh is

1972
01:11:00,840 --> 01:11:02,280
now I believe a Stanford professor and

1973
01:11:02,280 --> 01:11:03,780
probably has like much less free time

1974
01:11:03,780 --> 01:11:05,100
than they used to

1975
01:11:05,100 --> 01:11:07,320
um but but uh yeah I think I think it's

1976
01:11:07,320 --> 01:11:10,140
a very viable concept

1977
01:11:10,140 --> 01:11:11,520
I mean it's it's

1978
01:11:11,520 --> 01:11:14,100
mosh solved a problem for all of us

1979
01:11:14,100 --> 01:11:16,560
right and

1980
01:11:16,560 --> 01:11:17,640
this is

1981
01:11:17,640 --> 01:11:19,440
I mean it did solve a problem for all of

1982
01:11:19,440 --> 01:11:21,719
us and and the fact is that it's that

1983
01:11:21,719 --> 01:11:23,580
Mobility is something we want session

1984
01:11:23,580 --> 01:11:25,679
Mobility something across the board is

1985
01:11:25,679 --> 01:11:27,120
something you want I mean but but as

1986
01:11:27,120 --> 01:11:28,500
Martin's pointing out I think that the

1987
01:11:28,500 --> 01:11:30,600
protocol offers the facility for doing

1988
01:11:30,600 --> 01:11:31,760
it

1989
01:11:31,760 --> 01:11:34,860
there's absolutely no reason to not move

1990
01:11:34,860 --> 01:11:37,739
no but the essential quality in the very

1991
01:11:37,739 --> 01:11:39,900
badly worded question is there is a

1992
01:11:39,900 --> 01:11:42,179
significant barrier to entry unless you

1993
01:11:42,179 --> 01:11:44,880
sit in HTTP mode and think oh well quick

1994
01:11:44,880 --> 01:11:47,820
is just HTTP I'll use Quick well it's

1995
01:11:47,820 --> 01:11:50,219
not just HTTP and your comment when to

1996
01:11:50,219 --> 01:11:52,679
if you are running in different contexts

1997
01:11:52,679 --> 01:11:55,380
you may have to do TLS failover and I'm

1998
01:11:55,380 --> 01:11:57,600
sitting here going I have to code the

1999
01:11:57,600 --> 01:12:00,900
TLs failover no you should be coding the

2000
01:12:00,900 --> 01:12:03,360
TLs failover for me it should be a

2001
01:12:03,360 --> 01:12:05,760
transparent shim function I should not

2002
01:12:05,760 --> 01:12:08,400
have to perform that function

2003
01:12:08,400 --> 01:12:10,920
I expect respectfully this is not a

2004
01:12:10,920 --> 01:12:12,900
service organization yeah but you know

2005
01:12:12,900 --> 01:12:14,340
what I mean with that software you know

2006
01:12:14,340 --> 01:12:16,920
what I mean this is not really a

2007
01:12:16,920 --> 01:12:18,360
question for us this is a question for

2008
01:12:18,360 --> 01:12:20,040
the audience please please someone

2009
01:12:20,040 --> 01:12:22,920
provide George with the uh yes with

2010
01:12:22,920 --> 01:12:24,840
these capabilities we would all love

2011
01:12:24,840 --> 01:12:26,340
that very much

2012
01:12:26,340 --> 01:12:27,120
um

2013
01:12:27,120 --> 01:12:28,560
some of us are doing other things at the

2014
01:12:28,560 --> 01:12:31,140
moment so maybe this gentleman here will

2015
01:12:31,140 --> 01:12:33,540
do it for us hold on I want to do I I do

2016
01:12:33,540 --> 01:12:35,760
want to to I thought one of you was

2017
01:12:35,760 --> 01:12:38,159
going to say the following but uh I

2018
01:12:38,159 --> 01:12:41,460
think mask is tomorrow morning right and

2019
01:12:41,460 --> 01:12:43,500
mask is

2020
01:12:43,500 --> 01:12:46,800
um about 80 of what you want built put

2021
01:12:46,800 --> 01:12:48,900
together in a different way for a

2022
01:12:48,900 --> 01:12:50,040
different use case

2023
01:12:50,040 --> 01:12:52,920
right so like I'm not saying you know

2024
01:12:52,920 --> 01:12:54,960
use mask for mosh but if you basically

2025
01:12:54,960 --> 01:12:58,020
reorganize the bits of mask

2026
01:12:58,020 --> 01:12:59,760
you could build a mosh and you know you

2027
01:12:59,760 --> 01:13:01,679
all of you just let this be inspiration

2028
01:13:01,679 --> 01:13:05,820
as Martin said like the tools are there

2029
01:13:05,820 --> 01:13:08,100
the bits are there we're still learning

2030
01:13:08,100 --> 01:13:10,320
how to assemble them and I think that we

2031
01:13:10,320 --> 01:13:11,699
could very easily assemble something

2032
01:13:11,699 --> 01:13:13,440
that looks very much like what John uh

2033
01:13:13,440 --> 01:13:15,600
what George wants

2034
01:13:15,600 --> 01:13:18,420
from parts we mostly already have

2035
01:13:18,420 --> 01:13:20,400
yeah but I do want to reiterate this

2036
01:13:20,400 --> 01:13:22,620
this fact that you know we we've done

2037
01:13:22,620 --> 01:13:24,480
the work so far

2038
01:13:24,480 --> 01:13:26,400
um and we explained the protocol so go

2039
01:13:26,400 --> 01:13:27,900
build the dam tools

2040
01:13:27,900 --> 01:13:29,699
and this is so to all of you right I

2041
01:13:29,699 --> 01:13:31,080
mean it's it's all of us as a community

2042
01:13:31,080 --> 01:13:32,940
to build this

2043
01:13:32,940 --> 01:13:36,300
yeah I was going to say yes I am working

2044
01:13:36,300 --> 01:13:39,120
on something like that but it's going to

2045
01:13:39,120 --> 01:13:41,280
be a long time before it works over

2046
01:13:41,280 --> 01:13:42,480
quick

2047
01:13:42,480 --> 01:13:45,840
in the first I've got to work out how to

2048
01:13:45,840 --> 01:13:49,260
do exactly you know transport layer

2049
01:13:49,260 --> 01:13:50,820
fixed

2050
01:13:50,820 --> 01:13:53,719
then work out what the API needs to be

2051
01:13:53,719 --> 01:13:57,179
in order to abstract an agile

2052
01:13:57,179 --> 01:13:59,940
cryptographic transport or whatever and

2053
01:13:59,940 --> 01:14:01,860
then finally I'm not using quick at the

2054
01:14:01,860 --> 01:14:04,020
moment I'm using the M stuff I'm going

2055
01:14:04,020 --> 01:14:06,300
to have to work out how to map that onto

2056
01:14:06,300 --> 01:14:07,500
quick

2057
01:14:07,500 --> 01:14:09,840
so it's going to be about 12 months

2058
01:14:09,840 --> 01:14:11,699
before I have something that

2059
01:14:11,699 --> 01:14:15,239
will do what he wants and then it's

2060
01:14:15,239 --> 01:14:17,159
probably going to be another 24 months

2061
01:14:17,159 --> 01:14:19,080
after that before we work out how to to

2062
01:14:19,080 --> 01:14:21,000
do it on quick I mean

2063
01:14:21,000 --> 01:14:23,940
I think it would be very valuable to

2064
01:14:23,940 --> 01:14:26,520
abstract down and work out how we apply

2065
01:14:26,520 --> 01:14:30,659
quick like transport directly to web

2066
01:14:30,659 --> 01:14:34,380
services and get rid of http

2067
01:14:34,380 --> 01:14:38,580
because HTTP is a really rotten way to

2068
01:14:38,580 --> 01:14:41,699
do an RPC interface there's a huge

2069
01:14:41,699 --> 01:14:43,980
amount of overhead and I'm speaking as

2070
01:14:43,980 --> 01:14:46,679
one of the original authors of HTTP 1.0

2071
01:14:46,679 --> 01:14:49,320
and the person who originally made it

2072
01:14:49,320 --> 01:14:52,620
possible to do that it's

2073
01:14:52,620 --> 01:14:54,900
what I want to do is to take those parts

2074
01:14:54,900 --> 01:14:57,659
of HTTP and put them into the transport

2075
01:14:57,659 --> 01:15:01,260
ship so but it's going to take time

2076
01:15:01,260 --> 01:15:03,000
so yeah there is

2077
01:15:03,000 --> 01:15:04,620
um the quick working group is not going

2078
01:15:04,620 --> 01:15:06,719
to produce a quick API I think there's

2079
01:15:06,719 --> 01:15:08,400
enough Divergence in the many

2080
01:15:08,400 --> 01:15:10,380
importations that work that's just not

2081
01:15:10,380 --> 01:15:12,060
going to converge

2082
01:15:12,060 --> 01:15:13,320
um there is however the Taps working

2083
01:15:13,320 --> 01:15:15,360
group which is working on abstract

2084
01:15:15,360 --> 01:15:17,699
transport layer interfaces that

2085
01:15:17,699 --> 01:15:20,100
that support all sorts of advanced

2086
01:15:20,100 --> 01:15:22,920
functionality that um that transports

2087
01:15:22,920 --> 01:15:25,140
like quick provide and so I really

2088
01:15:25,140 --> 01:15:27,060
encourage people interested in a more

2089
01:15:27,060 --> 01:15:29,460
generic API for this kind of stuff to to

2090
01:15:29,460 --> 01:15:33,000
take their energy there

2091
01:15:33,000 --> 01:15:35,100
so the documents are mostly done so take

2092
01:15:35,100 --> 01:15:36,480
your energy there means please comment

2093
01:15:36,480 --> 01:15:39,440
on ITF West call

2094
01:15:39,960 --> 01:15:41,219
uh true there is this totally quick

2095
01:15:41,219 --> 01:15:43,640
nothing to do

2096
01:15:44,219 --> 01:15:46,679
um yeah so it's not just HTTP we have

2097
01:15:46,679 --> 01:15:48,600
DNS over quick which is defined and it's

2098
01:15:48,600 --> 01:15:50,520
a thing and and you might say well it's

2099
01:15:50,520 --> 01:15:52,739
natural just fall back to TLS there but

2100
01:15:52,739 --> 01:15:54,060
that might not be what you want right

2101
01:15:54,060 --> 01:15:55,800
you might want to fall back the DNS over

2102
01:15:55,800 --> 01:15:59,340
HTTP there's I think it's very easy just

2103
01:15:59,340 --> 01:16:01,380
to assume that we can build a batteries

2104
01:16:01,380 --> 01:16:04,020
included API and Library those things

2105
01:16:04,020 --> 01:16:07,140
could exist they could be powerful but

2106
01:16:07,140 --> 01:16:08,040
um

2107
01:16:08,040 --> 01:16:09,900
sometimes they behave in ways that you

2108
01:16:09,900 --> 01:16:11,340
don't want and there's no hooks or

2109
01:16:11,340 --> 01:16:13,440
configurability to change things because

2110
01:16:13,440 --> 01:16:15,300
the needs of your application are

2111
01:16:15,300 --> 01:16:16,679
different presuming there's always going

2112
01:16:16,679 --> 01:16:18,600
to be a TCP equivalent to your

2113
01:16:18,600 --> 01:16:21,000
application protocol is like that's just

2114
01:16:21,000 --> 01:16:23,040
a guess we don't know what those are and

2115
01:16:23,040 --> 01:16:24,780
trying to anticipate is a bit a bit

2116
01:16:24,780 --> 01:16:25,800
rubbish

2117
01:16:25,800 --> 01:16:26,820
um

2118
01:16:26,820 --> 01:16:28,860
so we we have some of this going on in

2119
01:16:28,860 --> 01:16:31,739
web transport where you know we we have

2120
01:16:31,739 --> 01:16:33,719
different ways to carry this thing some

2121
01:16:33,719 --> 01:16:36,060
are UDP based over quick and they want

2122
01:16:36,060 --> 01:16:38,460
to use the service of unreliable message

2123
01:16:38,460 --> 01:16:41,179
delivery and so if that isn't available

2124
01:16:41,179 --> 01:16:43,860
falling back to a TCP based fallback

2125
01:16:43,860 --> 01:16:45,600
isn't going to give you that same

2126
01:16:45,600 --> 01:16:47,820
transport feature is that really what

2127
01:16:47,820 --> 01:16:49,679
applications want or would they prefer

2128
01:16:49,679 --> 01:16:51,060
to give up and fall back to something

2129
01:16:51,060 --> 01:16:52,820
like webrtc

2130
01:16:52,820 --> 01:16:55,739
that might not be ideal but they would

2131
01:16:55,739 --> 01:16:57,780
prefer that possibly we don't know it's

2132
01:16:57,780 --> 01:16:59,640
it's kind of impossible to anticipate

2133
01:16:59,640 --> 01:17:01,620
all of the application needs and being

2134
01:17:01,620 --> 01:17:04,260
too opinionated is maybe giving people a

2135
01:17:04,260 --> 01:17:05,820
disservice there

2136
01:17:05,820 --> 01:17:09,179
and actually trying to trying to allow

2137
01:17:09,179 --> 01:17:10,800
applications to model that is where a

2138
01:17:10,800 --> 01:17:11,820
lot of the complexity in the tax

2139
01:17:11,820 --> 01:17:13,860
interface comes from right like that's

2140
01:17:13,860 --> 01:17:15,480
the hard problem

2141
01:17:15,480 --> 01:17:17,340
so there are two things here right one

2142
01:17:17,340 --> 01:17:19,020
of them is that there's

2143
01:17:19,020 --> 01:17:21,420
um there's

2144
01:17:21,420 --> 01:17:23,100
the network

2145
01:17:23,100 --> 01:17:25,140
and then there's your your application

2146
01:17:25,140 --> 01:17:26,880
that you want to run on top of quick so

2147
01:17:26,880 --> 01:17:28,440
in terms of what do you want to build

2148
01:17:28,440 --> 01:17:30,120
here you

2149
01:17:30,120 --> 01:17:31,920
this is what I said yesterday in my talk

2150
01:17:31,920 --> 01:17:34,980
we built using HTTP because it was an

2151
01:17:34,980 --> 01:17:36,659
excellent vehicle for us to get this out

2152
01:17:36,659 --> 01:17:39,600
there but the work that's happening now

2153
01:17:39,600 --> 01:17:43,440
DNS and and others and and also uh mock

2154
01:17:43,440 --> 01:17:45,960
which is also happening uh later this

2155
01:17:45,960 --> 01:17:49,199
week all of this are you know work

2156
01:17:49,199 --> 01:17:50,940
that's going on and trying to map other

2157
01:17:50,940 --> 01:17:53,100
applications and and protocols on top of

2158
01:17:53,100 --> 01:17:56,280
uh quick finally in terms of the network

2159
01:17:56,280 --> 01:17:59,040
itself we know for a fact that there's a

2160
01:17:59,040 --> 01:18:00,420
small percentage of the network that

2161
01:18:00,420 --> 01:18:03,600
doesn't allow UDP or you know when with

2162
01:18:03,600 --> 01:18:05,520
experiments we found that quick doesn't

2163
01:18:05,520 --> 01:18:07,739
work on 100 of the paths

2164
01:18:07,739 --> 01:18:09,600
that's also an application Choice your

2165
01:18:09,600 --> 01:18:11,219
application can absolutely choose to say

2166
01:18:11,219 --> 01:18:13,080
that it's okay if it doesn't work it

2167
01:18:13,080 --> 01:18:14,219
doesn't work the application doesn't

2168
01:18:14,219 --> 01:18:16,020
work if quick doesn't work you don't

2169
01:18:16,020 --> 01:18:19,560
need a TCP fallback and that's all uh up

2170
01:18:19,560 --> 01:18:22,219
to the application

2171
01:18:22,940 --> 01:18:25,860
and I think we have a question from Tony

2172
01:18:25,860 --> 01:18:28,560
Lee who is remote

2173
01:18:28,560 --> 01:18:30,000
I think

2174
01:18:30,000 --> 01:18:31,620
um some of us are thinking about

2175
01:18:31,620 --> 01:18:34,260
migrating in a strange application to

2176
01:18:34,260 --> 01:18:37,679
Quick this application is called bgp and

2177
01:18:37,679 --> 01:18:40,020
we'd kind of like to not mess it up

2178
01:18:40,020 --> 01:18:42,300
uh do you have any idea where the

2179
01:18:42,300 --> 01:18:45,320
potholes are you going to be

2180
01:18:47,280 --> 01:18:49,739
okay where are the potholes for putting

2181
01:18:49,739 --> 01:18:52,639
bgp on quick

2182
01:18:55,199 --> 01:18:58,500
yeah I'm aware of multiple bgp over

2183
01:18:58,500 --> 01:18:59,760
quick drafts

2184
01:18:59,760 --> 01:19:02,219
um and I've skimmed they seem to be fine

2185
01:19:02,219 --> 01:19:03,420
to be honest I don't know enough about

2186
01:19:03,420 --> 01:19:05,640
bgp to comment but you know the the

2187
01:19:05,640 --> 01:19:07,199
quick working group is here to provide

2188
01:19:07,199 --> 01:19:09,780
some feedback so we can do this formally

2189
01:19:09,780 --> 01:19:11,580
um absolutely if you want to come and

2190
01:19:11,580 --> 01:19:13,679
ask for like an early review that this

2191
01:19:13,679 --> 01:19:15,420
is the kind of thing that personally I'm

2192
01:19:15,420 --> 01:19:17,400
I'm always happy to do but I think

2193
01:19:17,400 --> 01:19:18,780
people in the working group because we

2194
01:19:18,780 --> 01:19:20,580
don't want people to try quick and then

2195
01:19:20,580 --> 01:19:22,620
it fails trying to preempt what those

2196
01:19:22,620 --> 01:19:24,600
problems might be is is difficult but

2197
01:19:24,600 --> 01:19:27,120
kind of the typical ones for me would be

2198
01:19:27,120 --> 01:19:29,040
flow control

2199
01:19:29,040 --> 01:19:30,600
um connection level and stream level

2200
01:19:30,600 --> 01:19:32,580
flow control how big are the messages

2201
01:19:32,580 --> 01:19:34,560
that you're exchanging you're going to

2202
01:19:34,560 --> 01:19:36,420
find some way to get

2203
01:19:36,420 --> 01:19:39,719
not deadlocked but not for perform as

2204
01:19:39,719 --> 01:19:42,300
well as you might do multi-streaming in

2205
01:19:42,300 --> 01:19:44,340
general is is a big issue here you're

2206
01:19:44,340 --> 01:19:46,080
using quote probably to make use of the

2207
01:19:46,080 --> 01:19:47,640
multiple streams and the one draft I

2208
01:19:47,640 --> 01:19:48,540
read

2209
01:19:48,540 --> 01:19:50,340
um how do those things actually interact

2210
01:19:50,340 --> 01:19:52,800
at the application can the the API from

2211
01:19:52,800 --> 01:19:54,780
the quick layer and your application

2212
01:19:54,780 --> 01:19:57,000
work in such a way for example there's

2213
01:19:57,000 --> 01:19:59,100
no Global audience of streams in quick

2214
01:19:59,100 --> 01:20:02,760
this is the done by Design as a

2215
01:20:02,760 --> 01:20:05,100
performance Improvement so we've already

2216
01:20:05,100 --> 01:20:06,900
had a line blocking but can the

2217
01:20:06,900 --> 01:20:09,540
application manage out of order delivery

2218
01:20:09,540 --> 01:20:11,100
you can send them in the correct order

2219
01:20:11,100 --> 01:20:12,840
but the network is the network and they

2220
01:20:12,840 --> 01:20:14,640
might arrive in a different order if

2221
01:20:14,640 --> 01:20:16,380
you're depending on specific ordering

2222
01:20:16,380 --> 01:20:18,480
between things at the application lay

2223
01:20:18,480 --> 01:20:20,340
you'll need to accommodate that in terms

2224
01:20:20,340 --> 01:20:23,040
of synchronization or checkpointing or

2225
01:20:23,040 --> 01:20:25,380
however you might need a design if you

2226
01:20:25,380 --> 01:20:27,179
have more Atomic messages like DNS over

2227
01:20:27,179 --> 01:20:28,860
quick where these things are very

2228
01:20:28,860 --> 01:20:31,080
independent it's a good mapping

2229
01:20:31,080 --> 01:20:31,860
um

2230
01:20:31,860 --> 01:20:35,340
just uh stream credits so we talk about

2231
01:20:35,340 --> 01:20:37,020
flow control but the number of streams

2232
01:20:37,020 --> 01:20:39,179
that you can have open concurrently how

2233
01:20:39,179 --> 01:20:40,679
is that done you have the initial

2234
01:20:40,679 --> 01:20:42,540
unidirectional stream limit I talked

2235
01:20:42,540 --> 01:20:43,560
about earlier

2236
01:20:43,560 --> 01:20:45,239
um those are the initial limits but as

2237
01:20:45,239 --> 01:20:46,620
soon as you've kind of blown those

2238
01:20:46,620 --> 01:20:48,960
limits you need to keep sending stream

2239
01:20:48,960 --> 01:20:51,480
Max stream frames to keep granting

2240
01:20:51,480 --> 01:20:54,239
credit so I think something we found in

2241
01:20:54,239 --> 01:20:55,980
the early interop days is you could do

2242
01:20:55,980 --> 01:20:58,140
some like quick tests like I just did

2243
01:20:58,140 --> 01:21:00,540
one or two two requests and response

2244
01:21:00,540 --> 01:21:02,580
interactions all good then you run a

2245
01:21:02,580 --> 01:21:04,199
server then you have a bug where you

2246
01:21:04,199 --> 01:21:05,699
forget to Grant you credits and you

2247
01:21:05,699 --> 01:21:07,800
eventually get to a point of kind of

2248
01:21:07,800 --> 01:21:09,659
connection saturation and nothing can

2249
01:21:09,659 --> 01:21:11,880
happen nobody can do anything any ideal

2250
01:21:11,880 --> 01:21:13,980
timeouts which is okay but it's probably

2251
01:21:13,980 --> 01:21:15,480
not what you want if you're running a

2252
01:21:15,480 --> 01:21:18,600
Services trying to run and run and run

2253
01:21:18,600 --> 01:21:21,199
foreign

2254
01:21:21,320 --> 01:21:25,020
what's interesting I think about bgp to

2255
01:21:25,020 --> 01:21:27,060
Lucas's point is that it tends to have

2256
01:21:27,060 --> 01:21:29,580
extraordinarily long-lived sessions

2257
01:21:29,580 --> 01:21:32,760
and um quick sessions will eventually

2258
01:21:32,760 --> 01:21:34,380
run out

2259
01:21:34,380 --> 01:21:36,300
um this is something we did in HTTP 2

2260
01:21:36,300 --> 01:21:39,900
and and and also have done in quick it's

2261
01:21:39,900 --> 01:21:42,659
probably not likely in an apple in a in

2262
01:21:42,659 --> 01:21:45,060
a protocol like bgp that you will run

2263
01:21:45,060 --> 01:21:47,820
into these things but who knows some of

2264
01:21:47,820 --> 01:21:49,260
these boxes stay up for a long long time

2265
01:21:49,260 --> 01:21:52,860
uh the thing that I think is

2266
01:21:52,860 --> 01:21:55,140
um probably more of a challenge in this

2267
01:21:55,140 --> 01:21:58,440
in this context is is managing keys and

2268
01:21:58,440 --> 01:22:00,179
and Authentication

2269
01:22:00,179 --> 01:22:03,420
because I understand that the bgp is uh

2270
01:22:03,420 --> 01:22:05,520
often run essentially in the clear

2271
01:22:05,520 --> 01:22:08,100
between different asses and that's going

2272
01:22:08,100 --> 01:22:09,600
to be

2273
01:22:09,600 --> 01:22:12,719
um a shift in the attitudes in in terms

2274
01:22:12,719 --> 01:22:14,400
of how you configure this the the the

2275
01:22:14,400 --> 01:22:16,260
peering points

2276
01:22:16,260 --> 01:22:18,540
um that that happen there because

2277
01:22:18,540 --> 01:22:22,500
you need encryption with quick uh

2278
01:22:22,500 --> 01:22:25,440
I don't know how many stacks currently

2279
01:22:25,440 --> 01:22:27,980
use something like appreciate key mode

2280
01:22:27,980 --> 01:22:31,260
uh that is not something that is widely

2281
01:22:31,260 --> 01:22:33,179
used in on the web

2282
01:22:33,179 --> 01:22:34,920
so it may be that you end up in a

2283
01:22:34,920 --> 01:22:36,300
situation where you want to use for

2284
01:22:36,300 --> 01:22:38,640
instance self-science certificates with

2285
01:22:38,640 --> 01:22:43,199
um with with maybe even no uh validation

2286
01:22:43,199 --> 01:22:45,480
of them to to ensure that it works as

2287
01:22:45,480 --> 01:22:49,260
the the existing system has done with of

2288
01:22:49,260 --> 01:22:50,520
course the option to upgrade to

2289
01:22:50,520 --> 01:22:52,140
something that that is fully

2290
01:22:52,140 --> 01:22:54,480
authenticated

2291
01:22:54,480 --> 01:22:56,219
yeah I was going to add that I'm happy

2292
01:22:56,219 --> 01:22:58,199
to review a draft on bgp I think it's

2293
01:22:58,199 --> 01:23:00,179
like a desolate use case uh key

2294
01:23:00,179 --> 01:23:02,040
distribution seems like a problem but um

2295
01:23:02,040 --> 01:23:03,780
yet there are a number of solutions I

2296
01:23:03,780 --> 01:23:04,920
think I think it's just a matter of

2297
01:23:04,920 --> 01:23:07,080
looking through the options and getting

2298
01:23:07,080 --> 01:23:08,520
a review from the quick folks and the

2299
01:23:08,520 --> 01:23:10,739
transport bits and then maybe getting a

2300
01:23:10,739 --> 01:23:14,040
crypto review as well on the on whatever

2301
01:23:14,040 --> 01:23:15,719
key distribution or lack there have you

2302
01:23:15,719 --> 01:23:17,460
choose to appreciate

2303
01:23:17,460 --> 01:23:20,300
um but it seems very doable

2304
01:23:22,679 --> 01:23:25,100
Chris

2305
01:23:25,800 --> 01:23:28,620
so when the

2306
01:23:28,620 --> 01:23:30,840
about how the handshake Works um I saw

2307
01:23:30,840 --> 01:23:31,860
that there was obviously some

2308
01:23:31,860 --> 01:23:34,440
information in those initial packets

2309
01:23:34,440 --> 01:23:37,199
um uh for example I saw advertisements

2310
01:23:37,199 --> 01:23:38,219
about

2311
01:23:38,219 --> 01:23:40,920
um uh what alpns we might be about to

2312
01:23:40,920 --> 01:23:43,219
talk on and

2313
01:23:43,219 --> 01:23:45,719
obviously when I saw alpns in the clear

2314
01:23:45,719 --> 01:23:48,480
uh alarm Bells went off

2315
01:23:48,480 --> 01:23:52,020
um I was wondering what information all

2316
01:23:52,020 --> 01:23:55,560
do we actually leak onto the wire in the

2317
01:23:55,560 --> 01:23:57,620
clear

2318
01:23:57,620 --> 01:24:01,440
if that question makes sense yeah so um

2319
01:24:01,440 --> 01:24:03,060
as I talked about yesterday we're not

2320
01:24:03,060 --> 01:24:05,460
strictly leaking it in the clear

2321
01:24:05,460 --> 01:24:08,040
uh anyone who is able to see the initial

2322
01:24:08,040 --> 01:24:10,080
packets from the client

2323
01:24:10,080 --> 01:24:11,699
um and the connection ID that's in them

2324
01:24:11,699 --> 01:24:14,460
and they know the quick version that's

2325
01:24:14,460 --> 01:24:18,000
in use we'll be able to recover the keys

2326
01:24:18,000 --> 01:24:19,620
and decrypt that information so

2327
01:24:19,620 --> 01:24:21,420
technically speaking when we when we

2328
01:24:21,420 --> 01:24:24,120
talk about what's in the clearing quick

2329
01:24:24,120 --> 01:24:26,040
um that's that's often a shorthand that

2330
01:24:26,040 --> 01:24:28,560
we'll use to sort of mean that well

2331
01:24:28,560 --> 01:24:30,659
there's no genuine cryptographic

2332
01:24:30,659 --> 01:24:32,040
protection for these things we're just

2333
01:24:32,040 --> 01:24:34,980
applying what is effectively AES as a

2334
01:24:34,980 --> 01:24:37,260
check summing mechanism and an

2335
01:24:37,260 --> 01:24:40,020
obfuscation mechanism so

2336
01:24:40,020 --> 01:24:41,640
um what's in the clear is everything

2337
01:24:41,640 --> 01:24:44,600
that will be in the clear and TLS 1.3

2338
01:24:44,600 --> 01:24:49,020
and not a lot more honestly so if you

2339
01:24:49,020 --> 01:24:52,320
look at TLS 1.3 and it's uh client uh

2340
01:24:52,320 --> 01:24:54,239
hello and server hello those are the

2341
01:24:54,239 --> 01:24:56,219
things that will be in the clear and so

2342
01:24:56,219 --> 01:24:59,100
for the most part that sort of falls

2343
01:24:59,100 --> 01:25:01,080
into two categories there's the there's

2344
01:25:01,080 --> 01:25:02,400
the things that you need in order to

2345
01:25:02,400 --> 01:25:05,340
configure the key exchange in TLS those

2346
01:25:05,340 --> 01:25:07,800
things will always be in the clear to

2347
01:25:07,800 --> 01:25:09,360
some extent

2348
01:25:09,360 --> 01:25:10,920
but then there's also a bunch of

2349
01:25:10,920 --> 01:25:12,600
configuration information from the

2350
01:25:12,600 --> 01:25:15,020
client side LPN

2351
01:25:15,020 --> 01:25:18,780
uh some certificate related extensions

2352
01:25:18,780 --> 01:25:22,920
uh and also the Sni

2353
01:25:22,920 --> 01:25:24,780
sorry

2354
01:25:24,780 --> 01:25:26,760
and yes and at quick level there's

2355
01:25:26,760 --> 01:25:28,560
transport parameters which is

2356
01:25:28,560 --> 01:25:30,900
configuration information usually

2357
01:25:30,900 --> 01:25:33,659
related to the operation of quick

2358
01:25:33,659 --> 01:25:36,540
and so um the encrypted client hello

2359
01:25:36,540 --> 01:25:39,659
spec will ultimately be able to take all

2360
01:25:39,659 --> 01:25:41,640
of those things and provide some level

2361
01:25:41,640 --> 01:25:45,060
of protection for them

2362
01:25:45,060 --> 01:25:46,380
there's all the debates about the

2363
01:25:46,380 --> 01:25:49,260
availability of Sni it's potentially the

2364
01:25:49,260 --> 01:25:50,820
case that you could

2365
01:25:50,820 --> 01:25:53,100
still put Sni in the clear and still

2366
01:25:53,100 --> 01:25:55,800
protect all of those those values at the

2367
01:25:55,800 --> 01:25:58,199
same time that's that's something that I

2368
01:25:58,199 --> 01:25:59,880
think a lot of people sort of don't

2369
01:25:59,880 --> 01:26:01,920
really understand about the value of ech

2370
01:26:01,920 --> 01:26:03,900
is that it provides the ability to

2371
01:26:03,900 --> 01:26:06,000
protect all of that sort of thing that's

2372
01:26:06,000 --> 01:26:09,260
coming not yet

2373
01:26:09,360 --> 01:26:11,280
um instead of extracting Sni from

2374
01:26:11,280 --> 01:26:14,400
packets if we can all move to anycast I

2375
01:26:14,400 --> 01:26:16,260
know that's like asking for ponies then

2376
01:26:16,260 --> 01:26:18,480
you can just use the IP and like please

2377
01:26:18,480 --> 01:26:20,460
don't look in my packets yeah

2378
01:26:20,460 --> 01:26:22,260
but yeah if I want you to look at the SN

2379
01:26:22,260 --> 01:26:24,060
I would like staple it on to the front

2380
01:26:24,060 --> 01:26:27,320
and like so you could find it

2381
01:26:27,320 --> 01:26:29,699
yeah I mean just just to follow up on

2382
01:26:29,699 --> 01:26:31,639
opening the packets I mean we have

2383
01:26:31,639 --> 01:26:35,100
rc8999 which is the invariance draft and

2384
01:26:35,100 --> 01:26:37,199
that is sort of the working group's

2385
01:26:37,199 --> 01:26:39,060
contract for the world on what will not

2386
01:26:39,060 --> 01:26:41,940
change and what you should rely on and

2387
01:26:41,940 --> 01:26:44,040
to even say that like few versions of

2388
01:26:44,040 --> 01:26:46,800
Google use tls13 is is not something

2389
01:26:46,800 --> 01:26:49,620
we're I mean I think you know someday

2390
01:26:49,620 --> 01:26:51,120
they'll be Tails one four I would think

2391
01:26:51,120 --> 01:26:52,560
and you know when that happens we'll use

2392
01:26:52,560 --> 01:26:53,460
it

2393
01:26:53,460 --> 01:26:54,920
um so all this stuff is going to change

2394
01:26:54,920 --> 01:26:57,960
uh as as the protocol evolves it's one

2395
01:26:57,960 --> 01:27:00,980
of the key points of quick

2396
01:27:01,020 --> 01:27:01,860
thank you

2397
01:27:01,860 --> 01:27:04,580
thank you

2398
01:27:07,880 --> 01:27:11,400
anyone else in queue oh I have I have

2399
01:27:11,400 --> 01:27:13,260
one I have one gotcha question that I

2400
01:27:13,260 --> 01:27:15,659
had you know lined up

2401
01:27:15,659 --> 01:27:17,820
um in case nobody came up so one of the

2402
01:27:17,820 --> 01:27:19,500
things that I saw as a theme across all

2403
01:27:19,500 --> 01:27:21,960
of the presentations was

2404
01:27:21,960 --> 01:27:24,780
um we tried this and then we realized we

2405
01:27:24,780 --> 01:27:26,340
had to do this and then we realized we

2406
01:27:26,340 --> 01:27:29,520
had to do this like the the idea of

2407
01:27:29,520 --> 01:27:32,100
building a pro a transport protocol on

2408
01:27:32,100 --> 01:27:34,260
top of a security layer on top of the

2409
01:27:34,260 --> 01:27:36,900
transport protocol that like this turned

2410
01:27:36,900 --> 01:27:38,940
out to be super hard to do

2411
01:27:38,940 --> 01:27:40,800
and was one of the reasons this was a

2412
01:27:40,800 --> 01:27:42,780
really long effort

2413
01:27:42,780 --> 01:27:43,440
um

2414
01:27:43,440 --> 01:27:47,400
in what came out in quick version one

2415
01:27:47,400 --> 01:27:49,980
uh in your opinion um whoever grabs the

2416
01:27:49,980 --> 01:27:52,199
mic first what is the sort of the

2417
01:27:52,199 --> 01:27:54,300
hackiest part of the protocol and sort

2418
01:27:54,300 --> 01:27:57,900
of like the undone work Martin take it

2419
01:27:57,900 --> 01:28:01,280
unless Martin wants to take it

2420
01:28:04,620 --> 01:28:06,420
I mean if you misheard happiest you can

2421
01:28:06,420 --> 01:28:07,860
also do happiest right what's the

2422
01:28:07,860 --> 01:28:09,739
happiest part of quick

2423
01:28:09,739 --> 01:28:11,699
for me there's some there's some pretty

2424
01:28:11,699 --> 01:28:14,100
happy parts we managed to get more of

2425
01:28:14,100 --> 01:28:15,659
the protocol encrypted than I thought

2426
01:28:15,659 --> 01:28:18,420
was possible at the outset

2427
01:28:18,420 --> 01:28:20,699
um so that that was a happy thing uh

2428
01:28:20,699 --> 01:28:23,639
probably the hackiest and and

2429
01:28:23,639 --> 01:28:26,699
the part that I'm least confident in is

2430
01:28:26,699 --> 01:28:28,860
connection migration

2431
01:28:28,860 --> 01:28:32,219
the security model for that is a little

2432
01:28:32,219 --> 01:28:35,100
unclear and the mechanisms that we have

2433
01:28:35,100 --> 01:28:36,980
in place are

2434
01:28:36,980 --> 01:28:39,540
not as thoroughly tested as as I would

2435
01:28:39,540 --> 01:28:41,699
have would have been uh confident with

2436
01:28:41,699 --> 01:28:43,139
at the time

2437
01:28:43,139 --> 01:28:45,179
um the way that we defend against

2438
01:28:45,179 --> 01:28:48,000
various tax uh is

2439
01:28:48,000 --> 01:28:49,920
constrained to a very large degree by

2440
01:28:49,920 --> 01:28:51,120
the nature of the network that we're

2441
01:28:51,120 --> 01:28:53,340
dealing with and so

2442
01:28:53,340 --> 01:28:54,060
um

2443
01:28:54,060 --> 01:28:57,840
I'm not confident 100 that it will stand

2444
01:28:57,840 --> 01:29:02,540
up to rigorous attempts to attack it

2445
01:29:03,719 --> 01:29:05,820
I agree with Martin and cinnamon um I

2446
01:29:05,820 --> 01:29:07,080
can attest that connection migration

2447
01:29:07,080 --> 01:29:09,300
works because we've default enabled it

2448
01:29:09,300 --> 01:29:11,639
and then quite a number of circumstances

2449
01:29:11,639 --> 01:29:13,080
um and and so like it does actually

2450
01:29:13,080 --> 01:29:15,420
function uh as intended uh but the

2451
01:29:15,420 --> 01:29:18,420
attack surface uh it seems very

2452
01:29:18,420 --> 01:29:21,719
difficult to reason about and I I am I'm

2453
01:29:21,719 --> 01:29:23,760
sure our implementation has something

2454
01:29:23,760 --> 01:29:25,440
that you could do that would at least be

2455
01:29:25,440 --> 01:29:27,480
annoying to a user if not like

2456
01:29:27,480 --> 01:29:29,000
problematic but like at the very least

2457
01:29:29,000 --> 01:29:31,679
it's certainly not perfect

2458
01:29:31,679 --> 01:29:33,300
um I can't think of anything else I mean

2459
01:29:33,300 --> 01:29:34,500
there's a few decisions that got made

2460
01:29:34,500 --> 01:29:36,239
that are annoying to me but like I

2461
01:29:36,239 --> 01:29:37,860
wouldn't call them hacky they're just

2462
01:29:37,860 --> 01:29:41,420
like implementation annoyances

2463
01:29:42,360 --> 01:29:45,659
so I I'd say that uh I thought you said

2464
01:29:45,659 --> 01:29:47,219
the happiest part of the program you can

2465
01:29:47,219 --> 01:29:48,980
answer that question too if you want to

2466
01:29:48,980 --> 01:29:51,239
that's what I thought he said but the

2467
01:29:51,239 --> 01:29:52,500
hackiest part of the protocol I think

2468
01:29:52,500 --> 01:29:54,900
that I don't know if I don't know how to

2469
01:29:54,900 --> 01:29:55,980
think about hacking because the whole

2470
01:29:55,980 --> 01:29:58,199
protocol is is hacky in a certain way if

2471
01:29:58,199 --> 01:29:59,940
you depending on how you look at it I

2472
01:29:59,940 --> 01:30:01,920
think of haki as clever so I think we

2473
01:30:01,920 --> 01:30:04,260
did a lot of things that were clever uh

2474
01:30:04,260 --> 01:30:06,120
in the protocol but I'd say that the

2475
01:30:06,120 --> 01:30:07,980
things that are that

2476
01:30:07,980 --> 01:30:09,780
feel a bit fragile

2477
01:30:09,780 --> 01:30:11,940
are both connection migration for sure

2478
01:30:11,940 --> 01:30:13,800
but also the handshake

2479
01:30:13,800 --> 01:30:16,920
it's it's it's robust it I think it's

2480
01:30:16,920 --> 01:30:19,260
robust but having you know that the fact

2481
01:30:19,260 --> 01:30:21,120
that I have to say I think is probably

2482
01:30:21,120 --> 01:30:24,659
the argument there right so

2483
01:30:24,659 --> 01:30:27,780
um outside of that I think the the uh

2484
01:30:27,780 --> 01:30:29,280
happiest part of the protocol is that we

2485
01:30:29,280 --> 01:30:31,320
actually managed to encrypt

2486
01:30:31,320 --> 01:30:33,300
everything

2487
01:30:33,300 --> 01:30:36,239
it's okay we got the uh packet numbers

2488
01:30:36,239 --> 01:30:40,879
encrypted too which was which was a joy

2489
01:30:41,040 --> 01:30:42,780
yes I've been rearing the thing on the

2490
01:30:42,780 --> 01:30:44,340
handshake I think we decided we were

2491
01:30:44,340 --> 01:30:45,960
done with a handshake like four years

2492
01:30:45,960 --> 01:30:47,760
ago and then kept finding problems in

2493
01:30:47,760 --> 01:30:49,380
corner cases and having to add a little

2494
01:30:49,380 --> 01:30:50,880
more Machinery

2495
01:30:50,880 --> 01:30:52,440
um so like for me the happiest thing

2496
01:30:52,440 --> 01:30:54,480
about it is extensibility

2497
01:30:54,480 --> 01:30:56,699
um like many of my colleagues here um

2498
01:30:56,699 --> 01:30:58,679
spent a lot of time in TCP where it's

2499
01:30:58,679 --> 01:31:01,260
like so hard to change anything for for

2500
01:31:01,260 --> 01:31:03,900
various reasons and oh no but it also

2501
01:31:03,900 --> 01:31:05,340
leads to what I'm kind of most deeply

2502
01:31:05,340 --> 01:31:07,440
concerned about which is that and

2503
01:31:07,440 --> 01:31:08,880
they'll probably laugh because this is

2504
01:31:08,880 --> 01:31:10,980
my um hobby horse but like version

2505
01:31:10,980 --> 01:31:12,540
ossification

2506
01:31:12,540 --> 01:31:14,580
um with the things that our visit I mean

2507
01:31:14,580 --> 01:31:16,260
the question alluded to things we could

2508
01:31:16,260 --> 01:31:18,780
read in the client hello between that

2509
01:31:18,780 --> 01:31:20,580
and just this very readable version

2510
01:31:20,580 --> 01:31:21,719
field

2511
01:31:21,719 --> 01:31:24,179
um you know people could just say well

2512
01:31:24,179 --> 01:31:25,679
version one is fine and everything else

2513
01:31:25,679 --> 01:31:27,120
I don't know what that is I'm gonna drop

2514
01:31:27,120 --> 01:31:29,219
it and um you know that's something that

2515
01:31:29,219 --> 01:31:30,840
we have to think a little harder on and

2516
01:31:30,840 --> 01:31:32,340
come up with some solutions for to

2517
01:31:32,340 --> 01:31:33,900
preserve that accessibility because I

2518
01:31:33,900 --> 01:31:35,880
think eventually you can get to a place

2519
01:31:35,880 --> 01:31:37,260
where we get really big performance

2520
01:31:37,260 --> 01:31:38,880
Improvement we already have big

2521
01:31:38,880 --> 01:31:40,800
performance proofs on TCP but as the

2522
01:31:40,800 --> 01:31:42,780
internet changes quick can change in a

2523
01:31:42,780 --> 01:31:45,600
way that the old tools can't

2524
01:31:45,600 --> 01:31:47,159
and I think that's actually sort of like

2525
01:31:47,159 --> 01:31:49,260
I mean we talk about this is it's a it's

2526
01:31:49,260 --> 01:31:50,820
a work it's done but it's a work in

2527
01:31:50,820 --> 01:31:52,620
progress unfortunately we built a thing

2528
01:31:52,620 --> 01:31:54,239
that can be a work in progress where we

2529
01:31:54,239 --> 01:31:55,679
don't have to come back to it 30 years

2530
01:31:55,679 --> 01:31:58,320
later and I think that's the giant win

2531
01:31:58,320 --> 01:32:00,540
so on that I've given myself the last

2532
01:32:00,540 --> 01:32:03,179
word because we are at time uh I would

2533
01:32:03,179 --> 01:32:05,159
like to thank all of the presenters uh

2534
01:32:05,159 --> 01:32:07,380
for their presentations and for the

2535
01:32:07,380 --> 01:32:10,159
discussion

2536
01:32:10,320 --> 01:32:12,420
and all of our audience for joining us

2537
01:32:12,420 --> 01:32:14,340
here at 7 30 in the morning

2538
01:32:14,340 --> 01:32:16,260
um your dedication to the internet is

2539
01:32:16,260 --> 01:32:18,120
much appreciated uh please enjoy the

2540
01:32:18,120 --> 01:32:19,980
rest of your week

2541
01:32:19,980 --> 01:32:24,320
um and see you around thanks a lot

2542
01:32:31,800 --> 01:32:35,520
of you

2543
01:32:37,620 --> 01:32:40,880
keep you on our phone

2544
01:32:42,739 --> 01:32:47,480
oh since it's an 18 minute walk wow

2545
01:32:48,739 --> 01:32:52,699
it's up to you like yeah

