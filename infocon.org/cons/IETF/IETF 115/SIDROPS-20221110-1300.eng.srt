1
00:00:10,340 --> 00:00:13,340
thank you

2
00:00:24,240 --> 00:00:29,538
all right shall we start Chris you ready

3
00:00:31,619 --> 00:00:33,660
super hi everyone

4
00:00:33,660 --> 00:00:37,079
I'm care Patel and we have here Natalie

5
00:00:37,079 --> 00:00:39,540
with us who's our cider Ops secretary

6
00:00:39,540 --> 00:00:42,719
and I have Chris Morrow who's our my

7
00:00:42,719 --> 00:00:43,800
co-chair

8
00:00:43,800 --> 00:00:45,540
um joining us remotely Chris you want to

9
00:00:45,540 --> 00:00:47,160
say a quick hi

10
00:00:47,160 --> 00:00:49,140
hello

11
00:00:49,140 --> 00:00:51,620
super

12
00:00:51,960 --> 00:00:54,360
um this is a note well

13
00:00:54,360 --> 00:00:55,079
um

14
00:00:55,079 --> 00:00:58,500
most of you know what this means this is

15
00:00:58,500 --> 00:01:01,440
about IDF policies and more importantly

16
00:01:01,440 --> 00:01:04,979
talking about code of conduct as well as

17
00:01:04,979 --> 00:01:07,200
patents amongst many ITF policies that's

18
00:01:07,200 --> 00:01:10,799
been discussed for those who are new at

19
00:01:10,799 --> 00:01:12,600
cider Ops working group

20
00:01:12,600 --> 00:01:14,460
you want to pay an extra attention to

21
00:01:14,460 --> 00:01:16,699
this

22
00:01:20,820 --> 00:01:24,420
and on the agenda we have five

23
00:01:24,420 --> 00:01:28,020
presentations we have uh Tim talking

24
00:01:28,020 --> 00:01:30,600
about challenges and Lessons Learned in

25
00:01:30,600 --> 00:01:35,100
deploying a couple of rfcs um 8492 8181

26
00:01:35,100 --> 00:01:37,140
and 8183

27
00:01:37,140 --> 00:01:40,380
then we have both Igor and sriram

28
00:01:40,380 --> 00:01:41,960
talking about

29
00:01:41,960 --> 00:01:44,880
an update on Seth

30
00:01:44,880 --> 00:01:50,340
uh using bgp uh for aspa and Roa

31
00:01:50,340 --> 00:01:52,920
then we have signtel that Tom's going to

32
00:01:52,920 --> 00:01:55,979
talk about again update on ASP

33
00:01:55,979 --> 00:01:59,159
verification from sriram and finally

34
00:01:59,159 --> 00:02:02,939
job is going to talk about update on RFC

35
00:02:02,939 --> 00:02:05,159
6482 base

36
00:02:05,159 --> 00:02:09,320
any questions on agenda before we start

37
00:02:12,780 --> 00:02:16,200
super team

38
00:02:16,200 --> 00:02:18,980
you're on

39
00:02:32,660 --> 00:02:35,220
I don't know how to clicker one just

40
00:02:35,220 --> 00:02:37,260
tell me

41
00:02:37,260 --> 00:02:39,780
yeah hi everyone

42
00:02:39,780 --> 00:02:41,280
um I've said 20 minutes on the agenda

43
00:02:41,280 --> 00:02:43,200
but I'll try to be shorter maybe we'll

44
00:02:43,200 --> 00:02:45,239
have some discussion though let's see

45
00:02:45,239 --> 00:02:47,700
um I wanted to talk today about

46
00:02:47,700 --> 00:02:52,379
um the experience that um well I've had

47
00:02:52,379 --> 00:02:53,760
firsthand in the last couple of years

48
00:02:53,760 --> 00:02:56,220
implementing these rfcs we need next

49
00:02:56,220 --> 00:02:57,900
slide

50
00:02:57,900 --> 00:02:58,860
um

51
00:02:58,860 --> 00:03:01,440
before we start I want to say a big

52
00:03:01,440 --> 00:03:03,660
thank you for creating these rocs I

53
00:03:03,660 --> 00:03:05,459
think by and large they work actually

54
00:03:05,459 --> 00:03:07,680
very well we see a lot of deployment

55
00:03:07,680 --> 00:03:09,540
different implementations different

56
00:03:09,540 --> 00:03:11,400
instances

57
00:03:11,400 --> 00:03:13,920
um so I'm not here to say we have an

58
00:03:13,920 --> 00:03:16,980
immediate problem that you know there's

59
00:03:16,980 --> 00:03:20,280
well I hope it comes across

60
00:03:20,280 --> 00:03:23,400
although all of this stuff essentially

61
00:03:23,400 --> 00:03:25,860
works I think there are also things that

62
00:03:25,860 --> 00:03:27,420
we can improve

63
00:03:27,420 --> 00:03:29,700
um next slide please

64
00:03:29,700 --> 00:03:31,800
um if the numbers don't mean much to you

65
00:03:31,800 --> 00:03:35,760
and I can I can imagine they don't

66
00:03:35,760 --> 00:03:39,360
um there's three rfcs I named so 8183 is

67
00:03:39,360 --> 00:03:40,799
about the

68
00:03:40,799 --> 00:03:43,200
exchange of identity certificates

69
00:03:43,200 --> 00:03:45,180
essentially between different parties in

70
00:03:45,180 --> 00:03:47,879
the rpgi so a child CA needs to talk to

71
00:03:47,879 --> 00:03:51,319
its parents to get certificate signed

72
00:03:51,319 --> 00:03:53,700
needs to talk to its publication server

73
00:03:53,700 --> 00:03:57,900
to get its uh signed content published

74
00:03:57,900 --> 00:03:59,159
um there's an initial setup for that

75
00:03:59,159 --> 00:04:01,739
that's 81.83 and then there's the

76
00:04:01,739 --> 00:04:04,440
provisioning protocol 6492 and the

77
00:04:04,440 --> 00:04:07,500
publication protocol 8181 next slide

78
00:04:07,500 --> 00:04:09,680
please

79
00:04:10,260 --> 00:04:12,720
so as I just mentioned is there anything

80
00:04:12,720 --> 00:04:16,560
missing well yeah I think that

81
00:04:16,560 --> 00:04:18,839
um based on experience some things might

82
00:04:18,839 --> 00:04:20,459
be missing other things can just be

83
00:04:20,459 --> 00:04:22,740
improved and the urgency of these things

84
00:04:22,740 --> 00:04:26,759
well I guess that's to a degree of

85
00:04:26,759 --> 00:04:28,320
opinion but also

86
00:04:28,320 --> 00:04:31,680
uh it varies a bit from topic to topic

87
00:04:31,680 --> 00:04:35,639
but I'd like to go over the well

88
00:04:35,639 --> 00:04:37,620
The Fairly long list of things that I

89
00:04:37,620 --> 00:04:39,240
wanted to say

90
00:04:39,240 --> 00:04:42,020
next slide

91
00:04:42,780 --> 00:04:47,520
um so starting with the general protocol

92
00:04:47,520 --> 00:04:49,440
um what I have found is that

93
00:04:49,440 --> 00:04:53,160
the definition of the CMS messages and

94
00:04:53,160 --> 00:04:55,199
the identity certificates used in the in

95
00:04:55,199 --> 00:04:58,380
any communication is fairly well Loosely

96
00:04:58,380 --> 00:05:00,060
specified and this can lead to some

97
00:05:00,060 --> 00:05:02,580
interrupt issues because you know you

98
00:05:02,580 --> 00:05:03,840
don't want to just accept everything

99
00:05:03,840 --> 00:05:06,960
that's possible on CMS or certificates

100
00:05:06,960 --> 00:05:09,180
so you kind of narrow it down and it

101
00:05:09,180 --> 00:05:11,100
makes sense to do it in a similar way as

102
00:05:11,100 --> 00:05:13,500
what we're doing for the resource

103
00:05:13,500 --> 00:05:15,300
certificates but then

104
00:05:15,300 --> 00:05:16,620
you know you find that some

105
00:05:16,620 --> 00:05:18,360
implementations use additional things

106
00:05:18,360 --> 00:05:20,040
and then you need to go back into your

107
00:05:20,040 --> 00:05:22,440
code and make fixes at an ad hoc basis

108
00:05:22,440 --> 00:05:25,440
so this can be a bit annoying

109
00:05:25,440 --> 00:05:28,380
um replay protection can be improved I

110
00:05:28,380 --> 00:05:29,100
think

111
00:05:29,100 --> 00:05:31,500
because currently this text that says

112
00:05:31,500 --> 00:05:34,440
that the the signing time of the CMS

113
00:05:34,440 --> 00:05:37,680
cannot regress essentially which is uh

114
00:05:37,680 --> 00:05:39,600
which is okay but might not be enough

115
00:05:39,600 --> 00:05:42,360
for example if I ask my parent for my

116
00:05:42,360 --> 00:05:44,340
resource entitlements and I get a

117
00:05:44,340 --> 00:05:45,900
message from before but it's not

118
00:05:45,900 --> 00:05:47,340
regressed it's just the same message

119
00:05:47,340 --> 00:05:49,560
then technically speaking I should

120
00:05:49,560 --> 00:05:52,199
accept that so A man in the middle could

121
00:05:52,199 --> 00:05:54,240
essentially keep me from learning

122
00:05:54,240 --> 00:05:56,520
changes

123
00:05:56,520 --> 00:05:59,280
um identity key role is a thing at scale

124
00:05:59,280 --> 00:06:03,360
so one implementation that I are in

125
00:06:03,360 --> 00:06:06,060
I should say one deployment that I work

126
00:06:06,060 --> 00:06:08,580
with have uh well over a thousand

127
00:06:08,580 --> 00:06:10,320
delegated chart CA so they're on their

128
00:06:10,320 --> 00:06:11,699
own systems

129
00:06:11,699 --> 00:06:14,039
and they need to do this exchange

130
00:06:14,039 --> 00:06:15,900
initially but what if you want to change

131
00:06:15,900 --> 00:06:18,120
your identity key for example because

132
00:06:18,120 --> 00:06:20,220
you wanted to start using an HSM and you

133
00:06:20,220 --> 00:06:22,919
weren't before do you go out to all of

134
00:06:22,919 --> 00:06:25,199
these Cas and ask them to do another

135
00:06:25,199 --> 00:06:27,780
another exchange that's it's it's

136
00:06:27,780 --> 00:06:30,960
difficult from a scanning perspective

137
00:06:30,960 --> 00:06:34,080
signing algorithm uh for the messages

138
00:06:34,080 --> 00:06:36,139
it's all

139
00:06:36,139 --> 00:06:39,740
RSA 2048 and

140
00:06:39,740 --> 00:06:42,240
sha-256 and I don't think we have a plan

141
00:06:42,240 --> 00:06:45,300
for changing that we may want to think

142
00:06:45,300 --> 00:06:46,259
about it

143
00:06:46,259 --> 00:06:48,740
next

144
00:06:48,900 --> 00:06:49,979
then

145
00:06:49,979 --> 00:06:51,680
um more on the control of the messages

146
00:06:51,680 --> 00:06:53,940
error messages there are quite a few

147
00:06:53,940 --> 00:06:55,440
error messages and some of them are

148
00:06:55,440 --> 00:06:56,460
really useful

149
00:06:56,460 --> 00:06:58,199
but I think there's also room for

150
00:06:58,199 --> 00:06:59,940
improvement there

151
00:06:59,940 --> 00:07:02,039
rate limiting is something we may want

152
00:07:02,039 --> 00:07:03,419
to think about and then I don't know

153
00:07:03,419 --> 00:07:04,620
there may be other things a lot of

154
00:07:04,620 --> 00:07:07,199
people have run into that I'm not aware

155
00:07:07,199 --> 00:07:08,699
of

156
00:07:08,699 --> 00:07:11,580
next slide please now more specifically

157
00:07:11,580 --> 00:07:13,680
on the publication protocol so there has

158
00:07:13,680 --> 00:07:14,819
been

159
00:07:14,819 --> 00:07:17,280
from time to time people suggest that

160
00:07:17,280 --> 00:07:19,380
maybe publication server should be more

161
00:07:19,380 --> 00:07:23,180
proactive in what it accepts from uh Cas

162
00:07:23,180 --> 00:07:26,580
uh relying parties cannot trust the

163
00:07:26,580 --> 00:07:28,319
repository inherently they need to do

164
00:07:28,319 --> 00:07:31,259
their own validation but still if a

165
00:07:31,259 --> 00:07:32,759
server would

166
00:07:32,759 --> 00:07:34,800
you know apply some hygiene there is

167
00:07:34,800 --> 00:07:36,240
some attraction in that

168
00:07:36,240 --> 00:07:38,639
so things you could think about is like

169
00:07:38,639 --> 00:07:41,039
should a server protect against certain

170
00:07:41,039 --> 00:07:45,180
object types syntax should it be

171
00:07:45,180 --> 00:07:47,759
um insist on the consistency there's

172
00:07:47,759 --> 00:07:49,020
actually an error message for that

173
00:07:49,020 --> 00:07:50,819
already so

174
00:07:50,819 --> 00:07:52,199
um

175
00:07:52,199 --> 00:07:55,319
but then if we go down that road we also

176
00:07:55,319 --> 00:07:57,120
need to consider the risk of server

177
00:07:57,120 --> 00:07:58,979
errors so what AP publication server has

178
00:07:58,979 --> 00:08:02,759
a has a bug was just you know not up to

179
00:08:02,759 --> 00:08:05,039
speed with the latest development and it

180
00:08:05,039 --> 00:08:06,780
starts rejecting things then how does

181
00:08:06,780 --> 00:08:08,580
the ca deal with this so

182
00:08:08,580 --> 00:08:12,599
it's not as trivial as we might think

183
00:08:12,599 --> 00:08:15,599
um quota is another thing

184
00:08:15,599 --> 00:08:17,639
um it's hard to say what quote I should

185
00:08:17,639 --> 00:08:19,500
be probably it's something that is on a

186
00:08:19,500 --> 00:08:21,840
per publisher basis

187
00:08:21,840 --> 00:08:24,479
um but then again yeah we'd like to

188
00:08:24,479 --> 00:08:28,259
protect against uh Cas just publishing a

189
00:08:28,259 --> 00:08:30,720
million objects and causing relying

190
00:08:30,720 --> 00:08:32,039
party software all over the world to

191
00:08:32,039 --> 00:08:33,599
download all that stuff

192
00:08:33,599 --> 00:08:35,880
and I think it would be good if you have

193
00:08:35,880 --> 00:08:38,880
something in the protocol for that

194
00:08:38,880 --> 00:08:39,779
um

195
00:08:39,779 --> 00:08:42,839
server notifications or resync these

196
00:08:42,839 --> 00:08:46,820
question marks are about a specific

197
00:08:46,980 --> 00:08:49,680
um outage that I witnessed where

198
00:08:49,680 --> 00:08:51,860
essentially there was a configuration

199
00:08:51,860 --> 00:08:54,000
mistake applied to the publication

200
00:08:54,000 --> 00:08:55,860
server and it had to be restored to a

201
00:08:55,860 --> 00:08:58,800
previous version from backup and when

202
00:08:58,800 --> 00:09:00,779
you get done is that Cas are out of sync

203
00:09:00,779 --> 00:09:02,519
with the publication server but they

204
00:09:02,519 --> 00:09:04,920
don't know they think I published new

205
00:09:04,920 --> 00:09:06,540
manifest URL everything is good I'll

206
00:09:06,540 --> 00:09:08,519
come I'll come back tomorrow

207
00:09:08,519 --> 00:09:10,380
but the rest of the world sees the whole

208
00:09:10,380 --> 00:09:12,720
manifest URL and they expire

209
00:09:12,720 --> 00:09:14,220
so

210
00:09:14,220 --> 00:09:16,560
should we proactively pull the

211
00:09:16,560 --> 00:09:17,820
publication server or student

212
00:09:17,820 --> 00:09:19,380
publication server maybe send a message

213
00:09:19,380 --> 00:09:21,480
out and say hey I'm back up and this is

214
00:09:21,480 --> 00:09:23,399
the state or I don't know maybe we need

215
00:09:23,399 --> 00:09:24,959
to think about that

216
00:09:24,959 --> 00:09:27,120
next slide

217
00:09:27,120 --> 00:09:29,540
similarly in the provisioning protocol

218
00:09:29,540 --> 00:09:32,640
the when our resource is safe to use

219
00:09:32,640 --> 00:09:35,880
that's also a a concern

220
00:09:35,880 --> 00:09:36,779
um

221
00:09:36,779 --> 00:09:39,360
specifically when will my certificate

222
00:09:39,360 --> 00:09:41,040
with new resources be published now this

223
00:09:41,040 --> 00:09:43,560
is written in the in the CPS

224
00:09:43,560 --> 00:09:45,839
but I can't really pass the CPS I don't

225
00:09:45,839 --> 00:09:46,980
know where it is and I don't know how to

226
00:09:46,980 --> 00:09:49,260
pass PDFs so

227
00:09:49,260 --> 00:09:51,899
um but yeah if you get a new resource to

228
00:09:51,899 --> 00:09:53,519
me if my parent gives me a new resource

229
00:09:53,519 --> 00:09:55,740
and I delegate that resource to a

230
00:09:55,740 --> 00:09:57,060
Chelsea

231
00:09:57,060 --> 00:09:59,220
before relying parties have seen the

232
00:09:59,220 --> 00:10:02,160
certificate issue to me then not only my

233
00:10:02,160 --> 00:10:03,779
child is invalid

234
00:10:03,779 --> 00:10:05,580
so

235
00:10:05,580 --> 00:10:09,420
similarly removal of resources it might

236
00:10:09,420 --> 00:10:11,580
help if there were would be some

237
00:10:11,580 --> 00:10:14,220
advanced warning

238
00:10:14,220 --> 00:10:17,160
um similarly to before how frequently do

239
00:10:17,160 --> 00:10:19,320
we pull the parent for what the entitles

240
00:10:19,320 --> 00:10:21,180
are have they changed or

241
00:10:21,180 --> 00:10:23,820
shoot maybe the parent have in

242
00:10:23,820 --> 00:10:25,800
notification mechanism like we have for

243
00:10:25,800 --> 00:10:28,680
example in RCR that they can say

244
00:10:28,680 --> 00:10:31,380
you may want to talk to me

245
00:10:31,380 --> 00:10:33,860
algorithm agility there's a document

246
00:10:33,860 --> 00:10:37,080
describing what we would have to do if

247
00:10:37,080 --> 00:10:40,380
we wanted to use other algorithms in in

248
00:10:40,380 --> 00:10:44,160
the rpki and essentially is based on

249
00:10:44,160 --> 00:10:46,380
having separate trees for a while and a

250
00:10:46,380 --> 00:10:48,480
new document that defines flag dates for

251
00:10:48,480 --> 00:10:51,000
going from one to the other

252
00:10:51,000 --> 00:10:52,260
um I don't really want to go into the

253
00:10:52,260 --> 00:10:55,260
detail of that right now but the point

254
00:10:55,260 --> 00:10:56,640
is more

255
00:10:56,640 --> 00:11:00,899
as a child CA I have no way of knowing

256
00:11:00,899 --> 00:11:02,339
um that this is going on what I'm

257
00:11:02,339 --> 00:11:04,140
supposed to do so probably if we're

258
00:11:04,140 --> 00:11:05,459
going to do this

259
00:11:05,459 --> 00:11:08,399
we would need something that okay A

260
00:11:08,399 --> 00:11:10,560
little bit of detail the response that

261
00:11:10,560 --> 00:11:12,720
the parent gives me is essentially these

262
00:11:12,720 --> 00:11:14,279
are your resource classes and your

263
00:11:14,279 --> 00:11:15,720
entitlements your resources in each

264
00:11:15,720 --> 00:11:18,180
resource class so most likely you'll

265
00:11:18,180 --> 00:11:20,640
need something that says here you have

266
00:11:20,640 --> 00:11:24,000
resource Class A and you can do RSA

267
00:11:24,000 --> 00:11:26,519
there you have resource Class B and

268
00:11:26,519 --> 00:11:28,140
that's where you can do elliptic curve

269
00:11:28,140 --> 00:11:30,240
or you know whatever it might be

270
00:11:30,240 --> 00:11:32,160
but something like that we will probably

271
00:11:32,160 --> 00:11:34,440
need at some point because currently we

272
00:11:34,440 --> 00:11:35,820
have a document that describes how we

273
00:11:35,820 --> 00:11:38,640
could do algorithm roles

274
00:11:38,640 --> 00:11:40,440
um but I don't think that in practice we

275
00:11:40,440 --> 00:11:42,660
can make this work at least not for the

276
00:11:42,660 --> 00:11:45,720
world where you have delegated cas

277
00:11:45,720 --> 00:11:47,160
and there may be other things of course

278
00:11:47,160 --> 00:11:48,839
which

279
00:11:48,839 --> 00:11:50,640
other people have seen

280
00:11:50,640 --> 00:11:53,480
next slide please

281
00:11:54,120 --> 00:11:57,019
um now what would be

282
00:11:57,019 --> 00:11:59,279
requirements if we think about changing

283
00:11:59,279 --> 00:12:00,420
all of this

284
00:12:00,420 --> 00:12:03,720
I think it's really important that we

285
00:12:03,720 --> 00:12:06,839
basically don't need anybody behind at

286
00:12:06,839 --> 00:12:08,940
least definitely not from the start so

287
00:12:08,940 --> 00:12:10,440
we would need some kind of graceful

288
00:12:10,440 --> 00:12:14,279
negotiation of protocol of capability or

289
00:12:14,279 --> 00:12:16,560
capabilities or something

290
00:12:16,560 --> 00:12:18,600
um what might help

291
00:12:18,600 --> 00:12:20,700
is that we stay to the current protocol

292
00:12:20,700 --> 00:12:22,980
as closely as possible because it's less

293
00:12:22,980 --> 00:12:25,680
work but of course provided that we can

294
00:12:25,680 --> 00:12:28,880
do it in a safe way

295
00:12:28,980 --> 00:12:31,200
um and then other questions uh questions

296
00:12:31,200 --> 00:12:33,600
come to mind like okay if we look at all

297
00:12:33,600 --> 00:12:35,339
of this and other potential things that

298
00:12:35,339 --> 00:12:37,140
people might think of

299
00:12:37,140 --> 00:12:40,200
will we go for a new version that has

300
00:12:40,200 --> 00:12:43,200
tries to fix all of the issues or which

301
00:12:43,200 --> 00:12:45,000
might be hard

302
00:12:45,000 --> 00:12:48,240
or you know is there a way to to do

303
00:12:48,240 --> 00:12:49,980
things incrementally and say okay these

304
00:12:49,980 --> 00:12:51,660
things are really important can we

305
00:12:51,660 --> 00:12:54,500
address those first

306
00:12:55,980 --> 00:12:58,560
um what I propose this is the last slide

307
00:12:58,560 --> 00:13:00,240
actually

308
00:13:00,240 --> 00:13:01,560
um and to start with the bottom well

309
00:13:01,560 --> 00:13:04,139
I'll start with the top I'll get to that

310
00:13:04,139 --> 00:13:07,260
what I propose now also after talking to

311
00:13:07,260 --> 00:13:09,839
some people is that

312
00:13:09,839 --> 00:13:11,700
um even though you know I I would love

313
00:13:11,700 --> 00:13:14,459
to move fast and design a thing and have

314
00:13:14,459 --> 00:13:15,600
something great

315
00:13:15,600 --> 00:13:18,600
I think the proper thing to do is to uh

316
00:13:18,600 --> 00:13:21,360
to make a document that really defines

317
00:13:21,360 --> 00:13:22,620
the problem statement in these different

318
00:13:22,620 --> 00:13:25,560
areas uh that lists requirements of how

319
00:13:25,560 --> 00:13:28,440
we might move forward and that can also

320
00:13:28,440 --> 00:13:30,540
be used to discuss what the priorities

321
00:13:30,540 --> 00:13:32,459
are that people you know feel do we have

322
00:13:32,459 --> 00:13:34,459
consensus on that something is an issue

323
00:13:34,459 --> 00:13:36,839
uh maybe we don't have consensus on

324
00:13:36,839 --> 00:13:38,700
certain things and you know it's hard to

325
00:13:38,700 --> 00:13:40,200
work on that

326
00:13:40,200 --> 00:13:41,760
that's probably a good starting point

327
00:13:41,760 --> 00:13:44,820
having said that

328
00:13:44,820 --> 00:13:46,920
um the identity key role is a

329
00:13:46,920 --> 00:13:50,040
operational issue that's that I'm facing

330
00:13:50,040 --> 00:13:52,860
so I need to do something a little bit

331
00:13:52,860 --> 00:13:55,380
more proactive there now if we can have

332
00:13:55,380 --> 00:13:56,880
a discussion and it goes fast and

333
00:13:56,880 --> 00:13:58,620
perhaps we can have something there that

334
00:13:58,620 --> 00:14:02,279
is really within standard but if not and

335
00:14:02,279 --> 00:14:04,860
I still need to do this then what I

336
00:14:04,860 --> 00:14:06,120
would propose is that I make an

337
00:14:06,120 --> 00:14:07,560
informational document that describes

338
00:14:07,560 --> 00:14:09,779
how this works potentially get a

339
00:14:09,779 --> 00:14:12,720
external auditing on it as well

340
00:14:12,720 --> 00:14:14,940
preferably I would get review from the

341
00:14:14,940 --> 00:14:16,560
working group though and I would feed

342
00:14:16,560 --> 00:14:18,139
back into a

343
00:14:18,139 --> 00:14:21,500
ietf standard hopefully

344
00:14:21,500 --> 00:14:25,680
plus I will also commit to that if we do

345
00:14:25,680 --> 00:14:27,540
have that I'm more than willing to

346
00:14:27,540 --> 00:14:30,000
change things that I have done as a

347
00:14:30,000 --> 00:14:32,820
temporary measure uh to to follow the

348
00:14:32,820 --> 00:14:35,519
the standard to be now the final thing I

349
00:14:35,519 --> 00:14:37,019
wanted to say is some of you might have

350
00:14:37,019 --> 00:14:39,720
seen the document that I submitted with

351
00:14:39,720 --> 00:14:42,000
just myself as author having you know

352
00:14:42,000 --> 00:14:44,279
where I documented some ideas some ideas

353
00:14:44,279 --> 00:14:46,500
also resulting from discussion with

354
00:14:46,500 --> 00:14:47,940
other people

355
00:14:47,940 --> 00:14:50,519
that is not that document that is just a

356
00:14:50,519 --> 00:14:52,560
document that I wrote because I wanted

357
00:14:52,560 --> 00:14:54,300
to have something tangible

358
00:14:54,300 --> 00:14:55,440
so

359
00:14:55,440 --> 00:14:58,260
I could have discussions about you know

360
00:14:58,260 --> 00:15:00,180
what are possible mechanisms we might

361
00:15:00,180 --> 00:15:03,480
want to think about uh there and and it

362
00:15:03,480 --> 00:15:06,480
has helped and serve that purpose but to

363
00:15:06,480 --> 00:15:08,160
be clear that is not a document that I'm

364
00:15:08,160 --> 00:15:10,320
proposing to write in the first Buddha

365
00:15:10,320 --> 00:15:12,480
point

366
00:15:12,480 --> 00:15:15,420
um and that's it really so I guess my

367
00:15:15,420 --> 00:15:18,660
question to the group would be

368
00:15:18,660 --> 00:15:20,940
um do you agree that's

369
00:15:20,940 --> 00:15:23,040
um going for a problem statement on

370
00:15:23,040 --> 00:15:25,440
requirements documents in this case is

371
00:15:25,440 --> 00:15:27,600
uh is a valuable exercise and would you

372
00:15:27,600 --> 00:15:31,760
be willing to uh to contribute to it

373
00:15:32,279 --> 00:15:34,019
yeah

374
00:15:34,019 --> 00:15:37,339
and that's that's it

375
00:15:40,860 --> 00:15:43,199
super thanks team okay and we can take

376
00:15:43,199 --> 00:15:45,899
this on mailing list as well okay yeah

377
00:15:45,899 --> 00:15:48,740
thank you

378
00:16:10,620 --> 00:16:13,079
I think thank you

379
00:16:13,079 --> 00:16:16,079
um hey everybody I'm Igor lobashev and

380
00:16:16,079 --> 00:16:19,620
last date of in Philly we presented a

381
00:16:19,620 --> 00:16:22,079
new proposal for a source address

382
00:16:22,079 --> 00:16:23,820
validation algorithm

383
00:16:23,820 --> 00:16:29,279
that's using a bgp as well as rpki data

384
00:16:29,279 --> 00:16:32,040
we received quite a bit of good feedback

385
00:16:32,040 --> 00:16:34,620
at the mic and after and so today I'm

386
00:16:34,620 --> 00:16:36,480
going to talk about what's happening

387
00:16:36,480 --> 00:16:39,120
next with this work uh can you do next

388
00:16:39,120 --> 00:16:41,699
slide actually next two slides

389
00:16:41,699 --> 00:16:43,920
next

390
00:16:43,920 --> 00:16:48,000
so I'll start with a just quick recap of

391
00:16:48,000 --> 00:16:50,459
barsev uh algorithm

392
00:16:50,459 --> 00:16:52,620
um not going to go into much details

393
00:16:52,620 --> 00:16:54,240
look at the Philly presentation from

394
00:16:54,240 --> 00:16:57,139
work next

395
00:16:58,019 --> 00:17:00,959
all right so we have a pretty nice long

396
00:17:00,959 --> 00:17:04,740
pedigree of last 22 years since 2000

397
00:17:04,740 --> 00:17:07,280
when BCP 78 was published which says

398
00:17:07,280 --> 00:17:11,240
thou shall do Source address validation

399
00:17:11,240 --> 00:17:17,059
3704 invented a feasible path RPF method

400
00:17:17,059 --> 00:17:21,480
8704 didn't enhanced feasible path

401
00:17:21,480 --> 00:17:24,660
and well here we are today with barsev

402
00:17:24,660 --> 00:17:27,299
so and

403
00:17:27,299 --> 00:17:29,240
um the main advantage the main

404
00:17:29,240 --> 00:17:34,919
innovation of barsev is augmenting bgp

405
00:17:34,919 --> 00:17:37,799
based methods with rpki data

406
00:17:37,799 --> 00:17:42,299
uh just like 8704 it starts with let's

407
00:17:42,299 --> 00:17:45,419
find uh the customer cone for the

408
00:17:45,419 --> 00:17:47,520
interfacing question for the customer or

409
00:17:47,520 --> 00:17:51,720
peer interface and it's also using aspas

410
00:17:51,720 --> 00:17:55,020
data from bgp in a more advanced way but

411
00:17:55,020 --> 00:17:58,500
uh fundamentally aspects from bgp but

412
00:17:58,500 --> 00:18:01,740
also looking at spa data as available

413
00:18:01,740 --> 00:18:05,460
uh once customer cones been built it's

414
00:18:05,460 --> 00:18:09,120
gonna find all the prefixes that belong

415
00:18:09,120 --> 00:18:12,240
to ass in the customer cone using

416
00:18:12,240 --> 00:18:15,900
prefixes from bgp announcements and also

417
00:18:15,900 --> 00:18:19,380
low generator data

418
00:18:19,380 --> 00:18:22,799
um so what's the advantage of the

419
00:18:22,799 --> 00:18:25,200
biggest Advantage is that the data

420
00:18:25,200 --> 00:18:28,080
available to barsev is more than just

421
00:18:28,080 --> 00:18:29,760
the data that was previously available

422
00:18:29,760 --> 00:18:33,780
to algorithms that only use bgp and that

423
00:18:33,780 --> 00:18:37,140
means that for networks that use some

424
00:18:37,140 --> 00:18:39,360
sort of traffic engineerings and their

425
00:18:39,360 --> 00:18:42,360
prefixes or as numbers don't show up in

426
00:18:42,360 --> 00:18:46,260
bgp we have a way to augment that data

427
00:18:46,260 --> 00:18:49,340
and build a better self-filter list

428
00:18:49,340 --> 00:18:52,799
looting it rpki

429
00:18:52,799 --> 00:18:56,640
um in some future if

430
00:18:56,640 --> 00:19:00,059
customer code has a perfect adoption for

431
00:19:00,059 --> 00:19:04,919
example of aspn and raw uh burstev can

432
00:19:04,919 --> 00:19:06,960
then build a perfect filter

433
00:19:06,960 --> 00:19:09,960
chat from rpki data

434
00:19:09,960 --> 00:19:13,200
um but it doesn't have to be we don't

435
00:19:13,200 --> 00:19:15,120
have to wait for that future because

436
00:19:15,120 --> 00:19:17,640
it's perfectly happy to augment rpki

437
00:19:17,640 --> 00:19:21,679
data from BJP next

438
00:19:22,740 --> 00:19:26,220
next slide thank you so again quickly

439
00:19:26,220 --> 00:19:29,039
going through bar 7 operation step one

440
00:19:29,039 --> 00:19:32,220
build customer cone uh start with just a

441
00:19:32,220 --> 00:19:33,960
single as number that's on the other

442
00:19:33,960 --> 00:19:36,539
side of your interface peer interface or

443
00:19:36,539 --> 00:19:39,000
customer interface look up the test

444
00:19:39,000 --> 00:19:42,179
number in aspa a customer of

445
00:19:42,179 --> 00:19:46,200
relationship or a lookup or end lookup

446
00:19:46,200 --> 00:19:49,620
that as number in all the asps that the

447
00:19:49,620 --> 00:19:53,039
router has received and looking for what

448
00:19:53,039 --> 00:19:55,880
is the previous as number in the asps

449
00:19:55,880 --> 00:19:58,440
should be stated that we're looking at

450
00:19:58,440 --> 00:20:01,320
every single bgp update message that's

451
00:20:01,320 --> 00:20:03,299
available not just from this interface

452
00:20:03,299 --> 00:20:04,980
so anything that received from any of

453
00:20:04,980 --> 00:20:08,100
the customers appears even your provider

454
00:20:08,100 --> 00:20:10,980
if you get a full table from them

455
00:20:10,980 --> 00:20:13,320
all right so you discover some as

456
00:20:13,320 --> 00:20:15,780
numbers iteratively repeats the process

457
00:20:15,780 --> 00:20:18,120
when you can't discover anything new

458
00:20:18,120 --> 00:20:20,360
you're done you have your customer call

459
00:20:20,360 --> 00:20:24,480
and then uh for the customer Corners

460
00:20:24,480 --> 00:20:26,940
numbers you look them up in raw

461
00:20:26,940 --> 00:20:29,580
uh find the prefixes

462
00:20:29,580 --> 00:20:32,640
you look them up in BJP update messages

463
00:20:32,640 --> 00:20:34,260
uh

464
00:20:34,260 --> 00:20:37,260
for uh bgp update messages whether

465
00:20:37,260 --> 00:20:40,740
originating as is in your customer cone

466
00:20:40,740 --> 00:20:43,440
you find the prefixes

467
00:20:43,440 --> 00:20:45,780
um at this point it's kind of implied

468
00:20:45,780 --> 00:20:48,960
but a good idea to State explicitly that

469
00:20:48,960 --> 00:20:52,620
the inputs the bgp uh data that you are

470
00:20:52,620 --> 00:20:55,700
looking at are should be pre-validated

471
00:20:55,700 --> 00:20:59,640
so using rpti ROV or any other

472
00:20:59,640 --> 00:21:02,220
validation method so don't use invalid

473
00:21:02,220 --> 00:21:05,400
bgp data for the uh for serve

474
00:21:05,400 --> 00:21:08,039
all right so you combine the two set of

475
00:21:08,039 --> 00:21:10,440
prefixes found from row and from bgp and

476
00:21:10,440 --> 00:21:12,600
that's your sub list

477
00:21:12,600 --> 00:21:15,000
next

478
00:21:15,000 --> 00:21:16,860
as you can see

479
00:21:16,860 --> 00:21:18,419
um you don't need a widespread

480
00:21:18,419 --> 00:21:20,940
deployment of Rowan and spa for it to be

481
00:21:20,940 --> 00:21:22,320
useful

482
00:21:22,320 --> 00:21:25,320
um barsef Can happily take data from bgp

483
00:21:25,320 --> 00:21:29,280
the only place where rpki data is useful

484
00:21:29,280 --> 00:21:31,799
is for networks that do some sort of

485
00:21:31,799 --> 00:21:33,840
fancy traffic engineering so the

486
00:21:33,840 --> 00:21:38,039
prefixes Nas numbers do not show up in a

487
00:21:38,039 --> 00:21:39,480
BJP feed

488
00:21:39,480 --> 00:21:42,480
most likely those networks that do this

489
00:21:42,480 --> 00:21:44,100
kind of stuff are more sophisticated

490
00:21:44,100 --> 00:21:46,380
networks and that's most likely

491
00:21:46,380 --> 00:21:48,659
translate to them being more likely to

492
00:21:48,659 --> 00:21:52,140
actually publish information into rpki

493
00:21:52,140 --> 00:21:55,500
uh next

494
00:21:55,500 --> 00:21:57,539
all right so

495
00:21:57,539 --> 00:21:59,280
um what's new

496
00:21:59,280 --> 00:22:02,059
next

497
00:22:02,940 --> 00:22:04,620
uh most of them

498
00:22:04,620 --> 00:22:06,960
feedback we received uh revolved around

499
00:22:06,960 --> 00:22:08,280
uh

500
00:22:08,280 --> 00:22:11,940
uh things that we published in uh I did

501
00:22:11,940 --> 00:22:14,580
the new chapter like section 6 for

502
00:22:14,580 --> 00:22:16,919
operations and management considerations

503
00:22:16,919 --> 00:22:19,520
next

504
00:22:20,220 --> 00:22:23,640
so first of all it's very true that

505
00:22:23,640 --> 00:22:27,380
we're using raw and aspa information

506
00:22:27,380 --> 00:22:31,500
that was not really designed for it and

507
00:22:31,500 --> 00:22:33,780
honestly bgp was also not designed for

508
00:22:33,780 --> 00:22:35,880
sale but

509
00:22:35,880 --> 00:22:38,100
we looked at it and it seems to us that

510
00:22:38,100 --> 00:22:40,860
it's sufficient uh for the purpose

511
00:22:40,860 --> 00:22:43,500
but there was a suggestion so

512
00:22:43,500 --> 00:22:46,080
um that what if we actually try to

513
00:22:46,080 --> 00:22:49,200
introduce sub-specific sub-specific

514
00:22:49,200 --> 00:22:51,539
objects row like and like they're very

515
00:22:51,539 --> 00:22:54,419
much like raw in Spa but they designed

516
00:22:54,419 --> 00:22:58,020
for Sev and there is clearly Merit

517
00:22:58,020 --> 00:23:00,780
um in to the idea of let's use

518
00:23:00,780 --> 00:23:03,000
information specifically designed for

519
00:23:03,000 --> 00:23:05,760
the purpose but there is also clearly a

520
00:23:05,760 --> 00:23:08,460
cost to that so

521
00:23:08,460 --> 00:23:10,799
one is you double the number of objects

522
00:23:10,799 --> 00:23:15,360
and two when you it's always a pain to

523
00:23:15,360 --> 00:23:18,500
keep the tools synchronized for probably

524
00:23:18,500 --> 00:23:21,080
99.9 percent of the cases

525
00:23:21,080 --> 00:23:24,780
so we tried hard to figure out I mean

526
00:23:24,780 --> 00:23:28,620
find examples where asking

527
00:23:28,620 --> 00:23:30,960
um the operator to publish

528
00:23:30,960 --> 00:23:32,360
um

529
00:23:32,360 --> 00:23:35,580
rpki data that's specifically for sale

530
00:23:35,580 --> 00:23:37,200
and that they wouldn't other publisher

531
00:23:37,200 --> 00:23:40,679
otherwise like when would it be harmful

532
00:23:40,679 --> 00:23:42,419
and we couldn't come up with good

533
00:23:42,419 --> 00:23:45,179
examples with us the mailing list with

534
00:23:45,179 --> 00:23:47,220
we still haven't received any good

535
00:23:47,220 --> 00:23:49,140
example so we welcome further

536
00:23:49,140 --> 00:23:50,940
discussions further ideas

537
00:23:50,940 --> 00:23:53,419
next

538
00:23:54,480 --> 00:23:56,760
um the other feedback we received was

539
00:23:56,760 --> 00:23:59,520
around uh we need to give much more

540
00:23:59,520 --> 00:24:01,140
implementation guidelines to the

541
00:24:01,140 --> 00:24:02,880
implementers

542
00:24:02,880 --> 00:24:05,400
um this stuff I mean rpki is not

543
00:24:05,400 --> 00:24:07,559
guaranteed to be 100 available or even

544
00:24:07,559 --> 00:24:11,820
consistent so must fail open

545
00:24:11,820 --> 00:24:14,159
um it's the case for the traditional

546
00:24:14,159 --> 00:24:16,320
rpki ROV case

547
00:24:16,320 --> 00:24:19,919
something fails bgp would still work and

548
00:24:19,919 --> 00:24:22,679
for Save case something fails data

549
00:24:22,679 --> 00:24:25,500
forwarding should still work

550
00:24:25,500 --> 00:24:27,840
um so

551
00:24:27,840 --> 00:24:31,140
some of our suggestions so number one is

552
00:24:31,140 --> 00:24:33,480
if a repository is unavailable when

553
00:24:33,480 --> 00:24:36,059
you're trying to refresh your cache

554
00:24:36,059 --> 00:24:38,280
um then assume that all previously valid

555
00:24:38,280 --> 00:24:41,159
signed object is still valid you and so

556
00:24:41,159 --> 00:24:45,419
it effectively extends the expiration

557
00:24:45,419 --> 00:24:47,520
um the idea is that most likely the

558
00:24:47,520 --> 00:24:49,980
objects are still valid

559
00:24:49,980 --> 00:24:50,760
um

560
00:24:50,760 --> 00:24:53,820
and number two is if you have

561
00:24:53,820 --> 00:24:56,100
successfully refreshed your cash but now

562
00:24:56,100 --> 00:24:58,679
some previously valued objects have

563
00:24:58,679 --> 00:25:00,480
disappeared

564
00:25:00,480 --> 00:25:03,120
um you should you probably it's a good

565
00:25:03,120 --> 00:25:05,400
idea to actually still use them from the

566
00:25:05,400 --> 00:25:08,100
local care until they expire unless

567
00:25:08,100 --> 00:25:12,840
they're on the crl the idea is maybe the

568
00:25:12,840 --> 00:25:14,460
there is some sort of temporary

569
00:25:14,460 --> 00:25:16,380
inconsistency in the repository in the

570
00:25:16,380 --> 00:25:18,179
file system or some sort of

571
00:25:18,179 --> 00:25:21,000
synchronization problem and honestly if

572
00:25:21,000 --> 00:25:23,820
an object is not expired uh it should be

573
00:25:23,820 --> 00:25:25,919
put on the crl if you really don't want

574
00:25:25,919 --> 00:25:27,380
to have it

575
00:25:27,380 --> 00:25:31,320
uh but more ideas definitely welcome

576
00:25:31,320 --> 00:25:33,980
next

577
00:25:34,679 --> 00:25:37,620
um just a quick blog for asba adoption

578
00:25:37,620 --> 00:25:40,860
uh it really works well it's good for

579
00:25:40,860 --> 00:25:43,400
its purpose of uh

580
00:25:43,400 --> 00:25:46,799
detecting BJP route leagues but it's

581
00:25:46,799 --> 00:25:49,080
also very good for sale and there are

582
00:25:49,080 --> 00:25:52,500
updated draft next

583
00:25:52,500 --> 00:25:55,020
and so

584
00:25:55,020 --> 00:25:58,080
we're asking for more discussion more

585
00:25:58,080 --> 00:26:01,400
feedback uh with uh

586
00:26:01,400 --> 00:26:04,799
the new version of the draft has uh

587
00:26:04,799 --> 00:26:06,120
addressed a bunch of feedback we

588
00:26:06,120 --> 00:26:07,980
received let us know

589
00:26:07,980 --> 00:26:11,220
um is it good do we need to talk to talk

590
00:26:11,220 --> 00:26:13,740
more with you and

591
00:26:13,740 --> 00:26:15,960
since we did get some engagement from

592
00:26:15,960 --> 00:26:17,580
the community we would like the working

593
00:26:17,580 --> 00:26:19,320
group adoption

594
00:26:19,320 --> 00:26:22,200
thank you

595
00:26:22,200 --> 00:26:24,059
chair do you want to go first yeah sorry

596
00:26:24,059 --> 00:26:26,000
I screwed up I haven't done me that

597
00:26:26,000 --> 00:26:28,679
sucked into the media account thing so

598
00:26:28,679 --> 00:26:31,559
on slide 9 and 10 I think it's size 9

599
00:26:31,559 --> 00:26:33,360
and 10 real quick I have some feedback

600
00:26:33,360 --> 00:26:34,320
so

601
00:26:34,320 --> 00:26:37,380
um Igor sorry to do this here

602
00:26:37,380 --> 00:26:38,940
um I need to describe to you some

603
00:26:38,940 --> 00:26:41,340
internal cases use cases we have at

604
00:26:41,340 --> 00:26:44,220
Akamai where this is not going to work

605
00:26:44,220 --> 00:26:46,320
um just on the networking side

606
00:26:46,320 --> 00:26:48,779
um and stuff and then on so I'm happy to

607
00:26:48,779 --> 00:26:51,179
talk to you offline about that but yeah

608
00:26:51,179 --> 00:26:53,100
or if you if there's something you can

609
00:26:53,100 --> 00:26:54,840
talk publicly about I'm happy to have it

610
00:26:54,840 --> 00:26:57,059
here too yeah so I mean so we have

611
00:26:57,059 --> 00:27:00,120
internal interconnect customers uh that

612
00:27:00,120 --> 00:27:02,580
might get incidental Transit from us

613
00:27:02,580 --> 00:27:05,039
uh out to the public internet if we have

614
00:27:05,039 --> 00:27:06,720
one of our clusters that becomes

615
00:27:06,720 --> 00:27:08,720
disconnected from our Global backbone

616
00:27:08,720 --> 00:27:11,159
based on how the aggregate ipspaces

617
00:27:11,159 --> 00:27:14,400
announced and so it's possible that in

618
00:27:14,400 --> 00:27:17,039
those cases we might direct a customer

619
00:27:17,039 --> 00:27:19,740
to a location that is off net either

620
00:27:19,740 --> 00:27:21,179
because we've taken it offline for

621
00:27:21,179 --> 00:27:22,980
maintenance or some sort of other

622
00:27:22,980 --> 00:27:26,220
activity and so um The Source address

623
00:27:26,220 --> 00:27:29,159
may be the our customer's IP address

624
00:27:29,159 --> 00:27:31,679
that we're not really intending to

625
00:27:31,679 --> 00:27:33,539
provide transit to but we also don't

626
00:27:33,539 --> 00:27:36,059
want to break because if there's an

627
00:27:36,059 --> 00:27:38,100
external system directing them to talk

628
00:27:38,100 --> 00:27:39,919
to a specific server

629
00:27:39,919 --> 00:27:41,900
hypothetically speaking

630
00:27:41,900 --> 00:27:45,059
that system may not know what is Real

631
00:27:45,059 --> 00:27:49,020
Time connected to the backbone or not in

632
00:27:49,020 --> 00:27:51,000
the routing information

633
00:27:51,000 --> 00:27:54,179
so that's uh that's something here that

634
00:27:54,179 --> 00:27:55,679
would make it challenging for us to go

635
00:27:55,679 --> 00:27:57,659
to our external network providers and

636
00:27:57,659 --> 00:28:01,860
ask them to implement this on our ports

637
00:28:01,860 --> 00:28:03,979
um

638
00:28:04,440 --> 00:28:06,860
talk offline and get yeah

639
00:28:06,860 --> 00:28:10,919
to get better idea about it but so if

640
00:28:10,919 --> 00:28:13,860
purely talking about

641
00:28:13,860 --> 00:28:17,340
um publishing reluctance to publish aspa

642
00:28:17,340 --> 00:28:21,539
data well and raw data for theft

643
00:28:21,539 --> 00:28:23,039
purposes

644
00:28:23,039 --> 00:28:24,600
um well it may be that we have a

645
00:28:24,600 --> 00:28:27,000
customer that is a dark origin or

646
00:28:27,000 --> 00:28:28,140
something like that where they don't

647
00:28:28,140 --> 00:28:31,380
want us to announce their IP space

648
00:28:31,380 --> 00:28:35,100
right so so there's that and then on so

649
00:28:35,100 --> 00:28:36,900
but we can talk offline about that and

650
00:28:36,900 --> 00:28:39,900
then on 10 uh the next slide you know

651
00:28:39,900 --> 00:28:42,360
the concept of using

652
00:28:42,360 --> 00:28:44,700
um you know stuff that's still valid but

653
00:28:44,700 --> 00:28:46,200
kind of ignore the expiration there's

654
00:28:46,200 --> 00:28:49,559
precedence for that in the DNS and the

655
00:28:49,559 --> 00:28:51,659
um use tail

656
00:28:51,659 --> 00:28:53,279
um definitely you know that and so I

657
00:28:53,279 --> 00:28:55,559
think that that makes sense so I just

658
00:28:55,559 --> 00:28:58,399
wanted to add that in

659
00:28:58,860 --> 00:29:00,840
thank you

660
00:29:00,840 --> 00:29:03,179
hi Anthony

661
00:29:03,179 --> 00:29:05,460
um I have a question you know when we

662
00:29:05,460 --> 00:29:07,080
are implementing currently customer

663
00:29:07,080 --> 00:29:10,620
accounts on basis of bgpa 84 there is a

664
00:29:10,620 --> 00:29:13,320
warning here for people for customers

665
00:29:13,320 --> 00:29:16,440
that have a quite large customer call a

666
00:29:16,440 --> 00:29:18,840
number of prefixes reaching more than 5

667
00:29:18,840 --> 00:29:21,059
000 and I mean our own custom account is

668
00:29:21,059 --> 00:29:24,840
like 1.3 million prefixes

669
00:29:24,840 --> 00:29:27,480
um how is Boris have going to change

670
00:29:27,480 --> 00:29:30,960
calculating prefix filters for that

671
00:29:30,960 --> 00:29:32,820
so

672
00:29:32,820 --> 00:29:35,100
I'm assuming that you have a lot of

673
00:29:35,100 --> 00:29:37,980
customers and your customer call like

674
00:29:37,980 --> 00:29:39,659
you said is very very large I mean

675
00:29:39,659 --> 00:29:43,260
clearly all the theft techniques they

676
00:29:43,260 --> 00:29:47,820
work best closer to the age so

677
00:29:47,820 --> 00:29:51,299
I'm not sure how well like a tier one

678
00:29:51,299 --> 00:29:53,700
network would be able to do anything

679
00:29:53,700 --> 00:29:55,559
like that

680
00:29:55,559 --> 00:29:57,720
um you need to I mean at that time you

681
00:29:57,720 --> 00:29:59,279
know like at that point you might even

682
00:29:59,279 --> 00:30:01,559
need to think about the size of memory

683
00:30:01,559 --> 00:30:04,980
on your uh so I was wondering is is

684
00:30:04,980 --> 00:30:08,779
there a change in in this approach

685
00:30:08,779 --> 00:30:11,940
comparing it to for example calculating

686
00:30:11,940 --> 00:30:15,360
it from our AR data

687
00:30:15,360 --> 00:30:17,880
well it almost doesn't matter where you

688
00:30:17,880 --> 00:30:19,500
calculate it from if you really have a

689
00:30:19,500 --> 00:30:22,200
very very large cider list uh then you

690
00:30:22,200 --> 00:30:24,360
have a very very large cider list to

691
00:30:24,360 --> 00:30:27,960
consider exactly uh right so and so

692
00:30:27,960 --> 00:30:29,520
there's no inline processing or

693
00:30:29,520 --> 00:30:31,919
something like that it uh

694
00:30:31,919 --> 00:30:34,080
the expectation it doesn't really have

695
00:30:34,080 --> 00:30:35,520
to be computed on the route or it could

696
00:30:35,520 --> 00:30:37,140
be computed on a server next to the

697
00:30:37,140 --> 00:30:40,559
router using the feeds and just feed

698
00:30:40,559 --> 00:30:42,559
um

699
00:30:42,740 --> 00:30:45,779
to the router uh through some other

700
00:30:45,779 --> 00:30:48,179
means through bgp I don't care in other

701
00:30:48,179 --> 00:30:51,299
words if we can't do bgp 84 right now

702
00:30:51,299 --> 00:30:53,640
for some customer cones we can't do it

703
00:30:53,640 --> 00:30:55,039
with ourself as well

704
00:30:55,039 --> 00:30:58,140
so it's not it if if the question is

705
00:30:58,140 --> 00:31:00,480
basically a huge cider list and you

706
00:31:00,480 --> 00:31:02,820
don't know how to implement it uh this

707
00:31:02,820 --> 00:31:04,140
doesn't tell you immediately how to

708
00:31:04,140 --> 00:31:06,299
implement it maybe there are ideas but

709
00:31:06,299 --> 00:31:08,220
this is trying to come up with a more

710
00:31:08,220 --> 00:31:09,840
accurate save list

711
00:31:09,840 --> 00:31:14,840
if you could install it okay thank you

712
00:31:15,419 --> 00:31:17,640
hi um Nan

713
00:31:17,640 --> 00:31:20,480
please go ahead

714
00:31:24,960 --> 00:31:27,740
oh sorry

715
00:31:27,740 --> 00:31:32,159
hello from Hawaii technology that's the

716
00:31:32,159 --> 00:31:35,760
one who share our preservation uh what I

717
00:31:35,760 --> 00:31:37,460
want to say is that

718
00:31:37,460 --> 00:31:40,799
what happened during the evolution of

719
00:31:40,799 --> 00:31:45,539
South surprise validation mechanisms uh

720
00:31:45,539 --> 00:31:48,600
what I found is that we are considering

721
00:31:48,600 --> 00:31:51,679
more and more information to generate

722
00:31:51,679 --> 00:31:56,279
accurate as a way roles in particular

723
00:31:56,279 --> 00:31:57,720
scenarios

724
00:31:57,720 --> 00:32:00,240
at the beginning we can manually

725
00:32:00,240 --> 00:32:02,880
configure Excel rules to filter

726
00:32:02,880 --> 00:32:04,260
particular

727
00:32:04,260 --> 00:32:06,840
Source prefix we need to update these

728
00:32:06,840 --> 00:32:11,100
rules in time when the preexix changed

729
00:32:11,100 --> 00:32:15,179
and then we have strictly your RPF we

730
00:32:15,179 --> 00:32:17,460
can generate these rules by considering

731
00:32:17,460 --> 00:32:21,000
local Fable and this rules can be

732
00:32:21,000 --> 00:32:22,640
generated

733
00:32:22,640 --> 00:32:25,980
automatically but under a symmetric

734
00:32:25,980 --> 00:32:29,640
routine is not accurately enough so we

735
00:32:29,640 --> 00:32:33,539
have enhance the urpf and enhance the

736
00:32:33,539 --> 00:32:38,220
RPF we consider local rib information

737
00:32:38,220 --> 00:32:40,679
so we are considering more and more

738
00:32:40,679 --> 00:32:42,960
information into consideration when we

739
00:32:42,960 --> 00:32:45,600
generate uh actually rules and now we

740
00:32:45,600 --> 00:32:48,980
are considered uh more extra information

741
00:32:48,980 --> 00:32:52,500
besides the local variable to generate a

742
00:32:52,500 --> 00:32:56,399
more accurate rules and uh okay

743
00:32:56,399 --> 00:33:01,559
congruent uh in other words if we want

744
00:33:01,559 --> 00:33:04,620
to generate accurate as well as we rules

745
00:33:04,620 --> 00:33:08,640
we need to import extra information and

746
00:33:08,640 --> 00:33:12,360
of course extra cost will be imported so

747
00:33:12,360 --> 00:33:14,059
there is a trade-off between the

748
00:33:14,059 --> 00:33:17,640
potential benefits and the extra cost

749
00:33:17,640 --> 00:33:18,899
thanks

750
00:33:18,899 --> 00:33:21,419
certainly yes we are trying to get more

751
00:33:21,419 --> 00:33:23,700
information than available in bgp and

752
00:33:23,700 --> 00:33:26,039
there is a computational cost there is a

753
00:33:26,039 --> 00:33:28,260
cost of maintaining your pki caches but

754
00:33:28,260 --> 00:33:31,200
the idea that people are going to be

755
00:33:31,200 --> 00:33:34,440
doing it anyway to process uh rpki for

756
00:33:34,440 --> 00:33:36,899
bgp purposes so yes this cost is

757
00:33:36,899 --> 00:33:38,820
amortized

758
00:33:38,820 --> 00:33:40,260
sure

759
00:33:40,260 --> 00:33:43,380
job Snyder's honestly

760
00:33:43,380 --> 00:33:47,640
um section 651 suggests that you should

761
00:33:47,640 --> 00:33:50,700
refresh daily but there's existing work

762
00:33:50,700 --> 00:33:53,700
that recommends refreshing at least once

763
00:33:53,700 --> 00:33:57,179
an hour preferably once every 10 minutes

764
00:33:57,179 --> 00:34:00,240
uh and I don't see a justification to

765
00:34:00,240 --> 00:34:03,299
deviate from uh what is already the

766
00:34:03,299 --> 00:34:05,100
established best practice in that regard

767
00:34:05,100 --> 00:34:07,919
thank you yeah that's the very good very

768
00:34:07,919 --> 00:34:09,780
good feedback I mean when daily was just

769
00:34:09,780 --> 00:34:12,300
taken without just an initial

770
00:34:12,300 --> 00:34:15,719
placeholder happy to change

771
00:34:15,719 --> 00:34:16,440
um

772
00:34:16,440 --> 00:34:19,139
and then the militant side of me trips

773
00:34:19,139 --> 00:34:22,619
over ignoring expiration dates

774
00:34:22,619 --> 00:34:24,418
um I would not Implement that in my

775
00:34:24,418 --> 00:34:27,899
validator I see no justification for

776
00:34:27,899 --> 00:34:30,599
doing so the document already describes

777
00:34:30,599 --> 00:34:32,879
a sort of fill open mode where it's

778
00:34:32,879 --> 00:34:35,460
suggested to fall back to enhanced urpf

779
00:34:35,460 --> 00:34:39,000
or enhance feasible urpf

780
00:34:39,000 --> 00:34:41,280
because that downgrade is better than

781
00:34:41,280 --> 00:34:43,859
suspending Seth entirely and I think it

782
00:34:43,859 --> 00:34:46,739
is very good to consider a path towards

783
00:34:46,739 --> 00:34:48,800
a fill open of sorts

784
00:34:48,800 --> 00:34:52,679
but ignoring objects uh either being

785
00:34:52,679 --> 00:34:54,960
deadlifted from a manifest which would

786
00:34:54,960 --> 00:34:58,080
cause them to not appear on a crl but it

787
00:34:58,080 --> 00:34:59,839
does mean that the ca

788
00:34:59,839 --> 00:35:02,280
refocused the Roa

789
00:35:02,280 --> 00:35:06,060
or the exploration that is is unhelpful

790
00:35:06,060 --> 00:35:08,580
I think so I I would warn against

791
00:35:08,580 --> 00:35:12,540
changing the rpki validation algorithms

792
00:35:12,540 --> 00:35:15,800
as we understand them today

793
00:35:15,839 --> 00:35:19,200
thank you so the recommendations were

794
00:35:19,200 --> 00:35:22,200
not for processing

795
00:35:22,200 --> 00:35:23,480
um

796
00:35:23,480 --> 00:35:27,960
the traditional rpki ROV uh but only for

797
00:35:27,960 --> 00:35:29,460
theft purposes

798
00:35:29,460 --> 00:35:32,460
uh the concern is that if you start

799
00:35:32,460 --> 00:35:34,020
ignoring

800
00:35:34,020 --> 00:35:36,119
pretending objects don't exist for

801
00:35:36,119 --> 00:35:38,460
example you fail to refresh your cache

802
00:35:38,460 --> 00:35:40,680
and the object is expired in the

803
00:35:40,680 --> 00:35:44,820
meanwhile that falling back to your uh

804
00:35:44,820 --> 00:35:48,480
to enhance the RPF that means that

805
00:35:48,480 --> 00:35:51,859
some of the data that was available from

806
00:35:51,859 --> 00:35:54,359
rpki will no longer be available and

807
00:35:54,359 --> 00:35:57,240
your server list will become smaller and

808
00:35:57,240 --> 00:35:58,740
that's what you don't want

809
00:35:58,740 --> 00:36:00,960
so you want to err on the side of

810
00:36:00,960 --> 00:36:03,180
yourself list being bigger than it has

811
00:36:03,180 --> 00:36:05,640
to be then accidentally smaller than

812
00:36:05,640 --> 00:36:06,960
this has to be because

813
00:36:06,960 --> 00:36:08,940
smaller than it has to be is following

814
00:36:08,940 --> 00:36:11,460
it's failing closed

815
00:36:11,460 --> 00:36:13,440
but what is the garbage collection

816
00:36:13,440 --> 00:36:14,579
mechanism

817
00:36:14,579 --> 00:36:16,500
because I do understand your concern

818
00:36:16,500 --> 00:36:20,400
that it is operationally potentially a

819
00:36:20,400 --> 00:36:22,800
little bit nicer to to be more

820
00:36:22,800 --> 00:36:25,520
permissive than strictly needed

821
00:36:25,520 --> 00:36:29,220
but somewhere in the decision path there

822
00:36:29,220 --> 00:36:31,020
there is going to be an event horizon

823
00:36:31,020 --> 00:36:34,200
where you go left or right right so for

824
00:36:34,200 --> 00:36:36,240
instance if I see a traffic stream

825
00:36:36,240 --> 00:36:39,000
coming from you towards me and I I own

826
00:36:39,000 --> 00:36:40,980
the IP space and I want to block it and

827
00:36:40,980 --> 00:36:43,140
I remove the robot authorizing you to

828
00:36:43,140 --> 00:36:45,540
send traffic for the source

829
00:36:45,540 --> 00:36:49,260
and others continue to use that Rover

830
00:36:49,260 --> 00:36:50,760
that now has been removed from the

831
00:36:50,760 --> 00:36:52,740
system pretending it didn't expire or

832
00:36:52,740 --> 00:36:54,720
pretending it wasn't removed put it in

833
00:36:54,720 --> 00:36:56,640
the crl

834
00:36:56,640 --> 00:36:59,520
but then you are changing some

835
00:36:59,520 --> 00:37:02,160
fundamental parts of how rpki was

836
00:37:02,160 --> 00:37:05,880
designed to work the crls are

837
00:37:05,880 --> 00:37:10,320
shrunken both based on on what has now

838
00:37:10,320 --> 00:37:13,619
properly expired but also if it's not

839
00:37:13,619 --> 00:37:15,420
listed on a manifest you don't need to

840
00:37:15,420 --> 00:37:18,780
add it to the crl so crls in the rpki

841
00:37:18,780 --> 00:37:21,180
are fairly small like it's an average of

842
00:37:21,180 --> 00:37:24,720
say seven to ten entries per crl and

843
00:37:24,720 --> 00:37:26,940
this is possible because manifests are

844
00:37:26,940 --> 00:37:29,339
strictly uh

845
00:37:29,339 --> 00:37:31,560
interpreted

846
00:37:31,560 --> 00:37:35,220
so now you're you're changing a few

847
00:37:35,220 --> 00:37:38,040
complications of the rpki uh in a way

848
00:37:38,040 --> 00:37:41,820
that I think uh is I think it's a great

849
00:37:41,820 --> 00:37:43,740
discussion I mean we can definitely see

850
00:37:43,740 --> 00:37:45,180
what the

851
00:37:45,180 --> 00:37:48,300
uh guarantees of consistency that you

852
00:37:48,300 --> 00:37:52,980
could expect from the repo versus

853
00:37:52,980 --> 00:37:56,520
um what's yeah so if we can believe that

854
00:37:56,520 --> 00:37:58,320
Reaper has a good consistency that we

855
00:37:58,320 --> 00:38:01,140
will not accidentally drop objects then

856
00:38:01,140 --> 00:38:03,859
we don't need this recommendation

857
00:38:03,859 --> 00:38:07,260
manifests Were Meant to uh provide very

858
00:38:07,260 --> 00:38:09,780
strong guarantees about the Integrity of

859
00:38:09,780 --> 00:38:12,480
the repository okay

860
00:38:12,480 --> 00:38:14,160
but then you still have your your

861
00:38:14,160 --> 00:38:16,320
concern about hey maybe I want to

862
00:38:16,320 --> 00:38:19,140
operate things on different timers

863
00:38:19,140 --> 00:38:21,000
um and to overcome that concern you

864
00:38:21,000 --> 00:38:22,980
might want to consider defining a new

865
00:38:22,980 --> 00:38:26,460
science object where the expiration date

866
00:38:26,460 --> 00:38:27,839
is

867
00:38:27,839 --> 00:38:29,940
what you want it to be if for some

868
00:38:29,940 --> 00:38:31,800
reason the expiration date of roast is

869
00:38:31,800 --> 00:38:34,859
unsuitable for this protocol's purpose a

870
00:38:34,859 --> 00:38:37,320
new object could be defined that that

871
00:38:37,320 --> 00:38:39,720
has slightly different rules

872
00:38:39,720 --> 00:38:40,560
um

873
00:38:40,560 --> 00:38:43,920
but and and if anything it would be good

874
00:38:43,920 --> 00:38:46,920
to uh put in the internet draft uh just

875
00:38:46,920 --> 00:38:49,579
the concern of garbage collection being

876
00:38:49,579 --> 00:38:53,579
stricter than is uh applicable to this

877
00:38:53,579 --> 00:38:54,540
particular

878
00:38:54,540 --> 00:38:58,500
uh case but then also find other ways to

879
00:38:58,500 --> 00:39:01,619
to do to shrink the the set filters uh

880
00:39:01,619 --> 00:39:03,720
as time progresses well thank you that's

881
00:39:03,720 --> 00:39:05,280
perfect feedback that's that's awesome

882
00:39:05,280 --> 00:39:06,839
so we'll definitely work with you and

883
00:39:06,839 --> 00:39:08,820
come up with something improved thank

884
00:39:08,820 --> 00:39:11,579
you for your time thank you

885
00:39:11,579 --> 00:39:14,579
I

886
00:39:15,599 --> 00:39:16,920
sorry

887
00:39:16,920 --> 00:39:21,060
you want to wait uh that is a queue

888
00:39:21,060 --> 00:39:22,740
sorry about that

889
00:39:22,740 --> 00:39:23,880
um

890
00:39:23,880 --> 00:39:26,220
Ming

891
00:39:26,220 --> 00:39:28,939
you have a question

892
00:39:31,619 --> 00:39:36,240
okay uh uh a very good simulation is

893
00:39:36,240 --> 00:39:39,020
pretty good Improvement of course

894
00:39:39,020 --> 00:39:42,599
but I have a question in page 10 you

895
00:39:42,599 --> 00:39:47,040
said that we use rpk as the uh tours to

896
00:39:47,040 --> 00:39:50,520
find hidden prefix right so in this case

897
00:39:50,520 --> 00:39:54,180
if rpk is failure I think that will make

898
00:39:54,180 --> 00:39:57,240
this perfect will Lobby uh included in

899
00:39:57,240 --> 00:39:58,740
sap table

900
00:39:58,740 --> 00:40:02,220
so in this case it seems like

901
00:40:02,220 --> 00:40:06,900
the nickel traffic would be

902
00:40:06,900 --> 00:40:10,200
you know be blocked

903
00:40:10,200 --> 00:40:13,740
this kind of risk right I mean right so

904
00:40:13,740 --> 00:40:15,780
it was a little garbage but I think I

905
00:40:15,780 --> 00:40:18,720
understood the question as uh right if

906
00:40:18,720 --> 00:40:22,800
we're augmenting a table from rpki data

907
00:40:22,800 --> 00:40:25,920
then rpki failure will be will put that

908
00:40:25,920 --> 00:40:28,560
prefix at risk and that's why we have

909
00:40:28,560 --> 00:40:31,800
this implementation guidelines so some

910
00:40:31,800 --> 00:40:34,380
of it looks like it's pretty

911
00:40:34,380 --> 00:40:37,320
clear and the other one we need to have

912
00:40:37,320 --> 00:40:39,720
more discussion on but that basically

913
00:40:39,720 --> 00:40:42,599
points to the need to make sure we're

914
00:40:42,599 --> 00:40:45,359
very careful at

915
00:40:45,359 --> 00:40:50,099
managing our cash so that any failure

916
00:40:50,099 --> 00:40:52,260
doesn't result in failing clothes for

917
00:40:52,260 --> 00:40:54,180
any prefix

918
00:40:54,180 --> 00:40:57,740
if I understood the question right

919
00:41:00,119 --> 00:41:02,280
thank you

920
00:41:02,280 --> 00:41:05,599
Doug you're next

921
00:41:08,820 --> 00:41:11,820
I just wanted to make the point that you

922
00:41:11,820 --> 00:41:14,700
know as far as rpki objects staleness I

923
00:41:14,700 --> 00:41:17,040
think we have to follow what the basic

924
00:41:17,040 --> 00:41:20,160
rpki validation algorithm is doing and

925
00:41:20,160 --> 00:41:23,280
what route origin validation is doing if

926
00:41:23,280 --> 00:41:25,700
for no other reason that

927
00:41:25,700 --> 00:41:28,920
you know subtle issues of rpki objects

928
00:41:28,920 --> 00:41:30,480
staleness is something that's typically

929
00:41:30,480 --> 00:41:32,579
in the purview of the validator

930
00:41:32,579 --> 00:41:36,320
and this algorithm operates on

931
00:41:36,320 --> 00:41:40,020
bgp ribbon data and those two data sets

932
00:41:40,020 --> 00:41:42,180
are typically on different platforms so

933
00:41:42,180 --> 00:41:44,940
I don't I mean it sort of aligns with

934
00:41:44,940 --> 00:41:47,400
jobs comment that if we're going to

935
00:41:47,400 --> 00:41:50,099
change the semantics of behavior around

936
00:41:50,099 --> 00:41:53,160
staleness we almost need a new object

937
00:41:53,160 --> 00:41:55,800
which I think we agreed to stay away

938
00:41:55,800 --> 00:41:57,900
from so

939
00:41:57,900 --> 00:42:00,240
we can have the discussion about the

940
00:42:00,240 --> 00:42:03,300
treatment of staleness in rpki

941
00:42:03,300 --> 00:42:06,420
validation but we should be consistent

942
00:42:06,420 --> 00:42:10,260
with whatever is going on in ROV

943
00:42:10,260 --> 00:42:13,260
yep so definitely just like I said to uh

944
00:42:13,260 --> 00:42:15,660
your brother that's good good feedback

945
00:42:15,660 --> 00:42:16,800
and we'll definitely come up with

946
00:42:16,800 --> 00:42:19,880
something that makes sense

947
00:42:22,800 --> 00:42:26,220
these you still have the com okay thank

948
00:42:26,220 --> 00:42:28,260
you thank you

949
00:42:28,260 --> 00:42:30,839
um very good thank you very much and so

950
00:42:30,839 --> 00:42:33,359
um the adoption that we're gonna make a

951
00:42:33,359 --> 00:42:34,619
call on the list

952
00:42:34,619 --> 00:42:36,720
sure we'll take it and I encourage you

953
00:42:36,720 --> 00:42:39,240
to take the discussion also on the

954
00:42:39,240 --> 00:42:42,599
mailing list definitely thank you

955
00:42:42,599 --> 00:42:45,440
okay

956
00:42:55,320 --> 00:42:58,460
Tom you're next

957
00:43:09,720 --> 00:43:11,400
okay thanks

958
00:43:11,400 --> 00:43:14,400
um next slide

959
00:43:14,400 --> 00:43:19,859
okay so so to recap briefly on this this

960
00:43:19,859 --> 00:43:22,800
document defines a new type of sound

961
00:43:22,800 --> 00:43:25,079
object called a trust Anchor Key object

962
00:43:25,079 --> 00:43:28,079
or attack object and that can be used by

963
00:43:28,079 --> 00:43:30,619
trust tankers to communicate ta

964
00:43:30,619 --> 00:43:33,960
certificate URL changes and taq changes

965
00:43:33,960 --> 00:43:37,619
to relying parties so the aim here is to

966
00:43:37,619 --> 00:43:40,380
simplify the key rollover process get

967
00:43:40,380 --> 00:43:42,240
support of some sort into relying

968
00:43:42,240 --> 00:43:45,060
parties and that in turn will help with

969
00:43:45,060 --> 00:43:49,759
HSM vendor lock-in next slide please

970
00:43:50,520 --> 00:43:52,260
so this was presented at the last

971
00:43:52,260 --> 00:43:55,260
meeting as at version 10. there were

972
00:43:55,260 --> 00:43:57,420
three main changes between version 10

973
00:43:57,420 --> 00:44:00,839
and 11. uh the first was to note that

974
00:44:00,839 --> 00:44:02,760
summer line parties that can't support

975
00:44:02,760 --> 00:44:05,819
uh Automatic Transition can still get

976
00:44:05,819 --> 00:44:08,220
most of the benefit of the model here by

977
00:44:08,220 --> 00:44:10,980
doing a sort of semi-automatic type

978
00:44:10,980 --> 00:44:11,760
thing

979
00:44:11,760 --> 00:44:14,400
so for example RP card client is a

980
00:44:14,400 --> 00:44:16,200
relying party that can't do Automatic

981
00:44:16,200 --> 00:44:19,260
Transition because by Design it's not

982
00:44:19,260 --> 00:44:21,140
permitted to update the key material

983
00:44:21,140 --> 00:44:24,900
that's being used but it can still fetch

984
00:44:24,900 --> 00:44:27,420
the attack object validate it alert the

985
00:44:27,420 --> 00:44:29,880
user to a new key

986
00:44:29,880 --> 00:44:31,980
um check the acceptance assignment

987
00:44:31,980 --> 00:44:34,260
period and then when that expires it can

988
00:44:34,260 --> 00:44:36,359
request that the user update the key

989
00:44:36,359 --> 00:44:38,520
material manually

990
00:44:38,520 --> 00:44:41,339
uh the second change was to note that

991
00:44:41,339 --> 00:44:43,500
our attack object distributed out of

992
00:44:43,500 --> 00:44:46,920
band is not somehow uh more secure or

993
00:44:46,920 --> 00:44:49,020
more reliable on account of it being

994
00:44:49,020 --> 00:44:50,819
signed it's pretty much just a telephone

995
00:44:50,819 --> 00:44:52,740
in a different format

996
00:44:52,740 --> 00:44:55,140
uh the reason it doesn't matter that

997
00:44:55,140 --> 00:44:57,300
it's signed is because if the relying

998
00:44:57,300 --> 00:45:00,119
party trusted the the signing trust

999
00:45:00,119 --> 00:45:04,020
anchor it'll be getting it inbound

1000
00:45:04,020 --> 00:45:06,720
and the third challenge was to add some

1001
00:45:06,720 --> 00:45:08,760
text to the security considerations

1002
00:45:08,760 --> 00:45:11,579
around what we're calling for lack of a

1003
00:45:11,579 --> 00:45:14,339
better term temporary ta compromise

1004
00:45:14,339 --> 00:45:16,319
so this is where a trust anchor is using

1005
00:45:16,319 --> 00:45:19,020
a device like an HSM that permits key

1006
00:45:19,020 --> 00:45:21,540
signing without actually having access

1007
00:45:21,540 --> 00:45:24,060
to the raw key and attacker gets access

1008
00:45:24,060 --> 00:45:26,700
or rather control of that device somehow

1009
00:45:26,700 --> 00:45:28,560
but then the trust anchor is able to

1010
00:45:28,560 --> 00:45:30,900
regain control over that device

1011
00:45:30,900 --> 00:45:32,880
so a trust anchor in this situation

1012
00:45:32,880 --> 00:45:34,980
might think great I've got control back

1013
00:45:34,980 --> 00:45:37,560
everything is fine but at least in the

1014
00:45:37,560 --> 00:45:39,359
presence of attack objects there are

1015
00:45:39,359 --> 00:45:41,400
some scenarios where that temporary

1016
00:45:41,400 --> 00:45:44,460
access can cause long-term problems so

1017
00:45:44,460 --> 00:45:47,220
by documenting that trust anchors can

1018
00:45:47,220 --> 00:45:48,839
consider what to do if something like

1019
00:45:48,839 --> 00:45:49,880
this happens

1020
00:45:49,880 --> 00:45:52,859
and update their processes accordingly

1021
00:45:52,859 --> 00:45:55,578
next level

1022
00:45:56,040 --> 00:45:59,400
for 11 to 12 uh it's a bit simpler the

1023
00:45:59,400 --> 00:46:01,260
only change there was to add a comment

1024
00:46:01,260 --> 00:46:04,020
build to the Tik structure so as to

1025
00:46:04,020 --> 00:46:06,240
align it with the tell file format from

1026
00:46:06,240 --> 00:46:09,020
86.

1027
00:46:12,180 --> 00:46:13,800
there's been some implementation work

1028
00:46:13,800 --> 00:46:16,500
since the last meeting uh Apex code has

1029
00:46:16,500 --> 00:46:19,339
been updated for version 12 of the draft

1030
00:46:19,339 --> 00:46:22,440
uh job did some tech object validation

1031
00:46:22,440 --> 00:46:25,200
work in rpqr client which is now in

1032
00:46:25,200 --> 00:46:29,160
openvsd proper uh and Tim also did some

1033
00:46:29,160 --> 00:46:31,619
tech encoding work in a branch in group

1034
00:46:31,619 --> 00:46:34,200
and jobs and Tim's work was very helpful

1035
00:46:34,200 --> 00:46:36,420
in finding problems in the opening

1036
00:46:36,420 --> 00:46:37,980
implementation work

1037
00:46:37,980 --> 00:46:40,680
next slide please

1038
00:46:40,680 --> 00:46:43,440
some things to discuss uh Ross Housley

1039
00:46:43,440 --> 00:46:45,599
had a suggestion on the list about

1040
00:46:45,599 --> 00:46:48,300
adding some clarifying texts to the

1041
00:46:48,300 --> 00:46:50,760
signed object registry at Ayana

1042
00:46:50,760 --> 00:46:53,760
uh that's uh or rather on the author's

1043
00:46:53,760 --> 00:46:55,020
side we think that's a good idea in

1044
00:46:55,020 --> 00:46:57,660
principle but because it's not strictly

1045
00:46:57,660 --> 00:46:59,819
related to what's happening in this

1046
00:46:59,819 --> 00:47:01,380
document we think it might be better off

1047
00:47:01,380 --> 00:47:03,859
as a separate thing

1048
00:47:03,859 --> 00:47:06,960
uh job had some job had a suggestion

1049
00:47:06,960 --> 00:47:09,480
about removing the TA compromise section

1050
00:47:09,480 --> 00:47:11,819
which was added in version 11.

1051
00:47:11,819 --> 00:47:14,280
because it's kind of hard to talk about

1052
00:47:14,280 --> 00:47:16,980
this uh clearly it might just confuse

1053
00:47:16,980 --> 00:47:19,680
people and it's not strictly necessary

1054
00:47:19,680 --> 00:47:23,040
to uh to the document as a whole

1055
00:47:23,040 --> 00:47:26,339
on the author side we're fine with that

1056
00:47:26,339 --> 00:47:28,319
um but teas did indicate on the list

1057
00:47:28,319 --> 00:47:30,180
that he thinks it will be worth keeping

1058
00:47:30,180 --> 00:47:31,800
that text

1059
00:47:31,800 --> 00:47:34,079
and then the third suggestion was to it

1060
00:47:34,079 --> 00:47:36,060
was also from Joe adding texts about

1061
00:47:36,060 --> 00:47:38,099
certified destruction of key pair

1062
00:47:38,099 --> 00:47:40,920
material uh again on the author's side

1063
00:47:40,920 --> 00:47:42,960
we're fine with that teas did indicate

1064
00:47:42,960 --> 00:47:45,180
that the term certified invites

1065
00:47:45,180 --> 00:47:47,760
questions about what certifications uh

1066
00:47:47,760 --> 00:47:50,460
and so on and it might be better off uh

1067
00:47:50,460 --> 00:47:52,079
to avoid that if we can

1068
00:47:52,079 --> 00:47:55,040
thanks a lot please

1069
00:47:55,560 --> 00:47:58,920
apart from resolving those issues uh

1070
00:47:58,920 --> 00:48:00,300
there are some other suggestions from

1071
00:48:00,300 --> 00:48:02,760
Joe that are uncontentious so we need to

1072
00:48:02,760 --> 00:48:04,619
update the document for that

1073
00:48:04,619 --> 00:48:06,660
uh it needs some editorial work

1074
00:48:06,660 --> 00:48:08,940
particularly on the server side of

1075
00:48:08,940 --> 00:48:12,300
things the process uh for Server size

1076
00:48:12,300 --> 00:48:14,099
for server-side implementations to

1077
00:48:14,099 --> 00:48:16,619
follow is a little bit uh strewn around

1078
00:48:16,619 --> 00:48:17,940
the document so that needs to be

1079
00:48:17,940 --> 00:48:20,460
Consolidated and there needs to be some

1080
00:48:20,460 --> 00:48:22,440
text around the purpose of the

1081
00:48:22,440 --> 00:48:24,599
acceptance timer just to make it clear

1082
00:48:24,599 --> 00:48:26,780
what what that's about

1083
00:48:26,780 --> 00:48:29,400
and more implementation work would be

1084
00:48:29,400 --> 00:48:32,040
good too so particularly on the server

1085
00:48:32,040 --> 00:48:33,780
side

1086
00:48:33,780 --> 00:48:36,540
and that's it thank you

1087
00:48:36,540 --> 00:48:38,640
that is a commenter question probably

1088
00:48:38,640 --> 00:48:42,259
from Russ so let's go ahead please

1089
00:48:45,960 --> 00:48:49,920
so you're absolutely right about uh my

1090
00:48:49,920 --> 00:48:53,460
suggestion being like really small

1091
00:48:53,460 --> 00:48:54,839
but

1092
00:48:54,839 --> 00:48:56,700
um what I did is I looked for the next

1093
00:48:56,700 --> 00:49:00,000
document that's updating that registry

1094
00:49:00,000 --> 00:49:02,220
because the previous one was already an

1095
00:49:02,220 --> 00:49:04,319
authority eight and Warren said I won't

1096
00:49:04,319 --> 00:49:05,940
get it

1097
00:49:05,940 --> 00:49:08,400
they did the process so this seems to be

1098
00:49:08,400 --> 00:49:11,160
the next one and it seems really really

1099
00:49:11,160 --> 00:49:12,420
small

1100
00:49:12,420 --> 00:49:16,859
thing to do a whole RFC for

1101
00:49:16,859 --> 00:49:18,180
okay

1102
00:49:18,180 --> 00:49:20,960
thanks

1103
00:49:22,140 --> 00:49:25,640
okay thank you water

1104
00:49:26,780 --> 00:49:29,400
yeah thanks Russ said part of what I was

1105
00:49:29,400 --> 00:49:31,140
going to say of you know we couldn't put

1106
00:49:31,140 --> 00:49:33,359
it in another document that was North 48

1107
00:49:33,359 --> 00:49:35,359
because that burnt me badly once before

1108
00:49:35,359 --> 00:49:37,920
so the next document that goes through

1109
00:49:37,920 --> 00:49:39,119
if it couldn't include that would be

1110
00:49:39,119 --> 00:49:40,020
great

1111
00:49:40,020 --> 00:49:42,960
um could we go back a slide

1112
00:49:42,960 --> 00:49:45,180
um what I was wondering is if the

1113
00:49:45,180 --> 00:49:47,400
compromise text could maybe just be

1114
00:49:47,400 --> 00:49:49,079
stuck in an appendix

1115
00:49:49,079 --> 00:49:51,000
as sort of like then it doesn't need to

1116
00:49:51,000 --> 00:49:53,040
be as clear and it's just a sort of like

1117
00:49:53,040 --> 00:49:54,619
here are some additional information

1118
00:49:54,619 --> 00:49:57,839
that where it can stay the remove the

1119
00:49:57,839 --> 00:49:59,339
tear compromise section maybe that could

1120
00:49:59,339 --> 00:50:01,079
just be an appendix instead if that

1121
00:50:01,079 --> 00:50:03,060
works for

1122
00:50:03,060 --> 00:50:06,619
nope doesn't work okay

1123
00:50:10,760 --> 00:50:13,200
I'll just clarify my main concern about

1124
00:50:13,200 --> 00:50:16,619
key destruction uh here the limitations

1125
00:50:16,619 --> 00:50:19,680
that I've seen with the various vendors

1126
00:50:19,680 --> 00:50:21,300
that we have looked at for hsms is

1127
00:50:21,300 --> 00:50:23,339
mostly that you cannot uh

1128
00:50:23,339 --> 00:50:26,040
be certain that there's no copy of a key

1129
00:50:26,040 --> 00:50:29,579
somewhere somewhere else so we can have

1130
00:50:29,579 --> 00:50:31,319
a certified process that shows that if

1131
00:50:31,319 --> 00:50:32,880
that really is the only box we have

1132
00:50:32,880 --> 00:50:34,319
deleted the copy that's in that exact

1133
00:50:34,319 --> 00:50:36,420
box which you include in the process

1134
00:50:36,420 --> 00:50:37,859
but you kind of really have guarantees

1135
00:50:37,859 --> 00:50:39,900
about the thing meaning in really uh

1136
00:50:39,900 --> 00:50:41,880
gone and it gets really Murray if you if

1137
00:50:41,880 --> 00:50:43,380
you want that so that's why I was

1138
00:50:43,380 --> 00:50:44,760
opposed to that

1139
00:50:44,760 --> 00:50:47,839
okay thanks

1140
00:50:48,839 --> 00:50:51,380
thank you

1141
00:51:03,359 --> 00:51:06,359
yes

1142
00:51:07,140 --> 00:51:09,300
uh so good morning uh good afternoon

1143
00:51:09,300 --> 00:51:13,619
everyone uh this is sriram from nist I'm

1144
00:51:13,619 --> 00:51:17,640
going to talk about uh the updated aspa

1145
00:51:17,640 --> 00:51:20,280
path verification draft today

1146
00:51:20,280 --> 00:51:23,040
next slide please

1147
00:51:23,040 --> 00:51:25,020
so I'll quickly we'll quickly look at

1148
00:51:25,020 --> 00:51:27,720
changes in version 11 that was published

1149
00:51:27,720 --> 00:51:29,339
a few weeks ago

1150
00:51:29,339 --> 00:51:32,579
um and compare it to version 09 we

1151
00:51:32,579 --> 00:51:35,240
skipped version 10 because uh

1152
00:51:35,240 --> 00:51:38,520
it was submitted uh and then we had a

1153
00:51:38,520 --> 00:51:40,380
few more changes to make

1154
00:51:40,380 --> 00:51:44,880
um so we submitted version 11 soon after

1155
00:51:44,880 --> 00:51:47,640
um we received some good comments on

1156
00:51:47,640 --> 00:51:49,680
version 11 already

1157
00:51:49,680 --> 00:51:52,020
um on the working group list uh in the

1158
00:51:52,020 --> 00:51:52,920
last

1159
00:51:52,920 --> 00:51:55,800
couple of weeks uh we'll take a look at

1160
00:51:55,800 --> 00:51:57,059
those comments

1161
00:51:57,059 --> 00:51:59,640
and then the next steps next slide

1162
00:51:59,640 --> 00:52:01,940
please

1163
00:52:02,400 --> 00:52:05,760
so just to recap uh we are doing aspa

1164
00:52:05,760 --> 00:52:08,099
based path verification because it has

1165
00:52:08,099 --> 00:52:10,940
the benefits of detecting and mitigating

1166
00:52:10,940 --> 00:52:15,059
bgp route leaks and also uh does the

1167
00:52:15,059 --> 00:52:18,780
same uh for forged origin hijacks so

1168
00:52:18,780 --> 00:52:21,000
essentially it's a basic form of path

1169
00:52:21,000 --> 00:52:23,760
verification does not do a complete path

1170
00:52:23,760 --> 00:52:24,980
verification

1171
00:52:24,980 --> 00:52:29,460
but establishes that that it is a

1172
00:52:29,460 --> 00:52:32,160
feasible path and it is free of any

1173
00:52:32,160 --> 00:52:35,760
route leaks and also catches forged

1174
00:52:35,760 --> 00:52:38,099
origin route hijacks

1175
00:52:38,099 --> 00:52:41,300
next slide please

1176
00:52:41,760 --> 00:52:44,400
so the changes in version 11 compared to

1177
00:52:44,400 --> 00:52:46,079
Version 9

1178
00:52:46,079 --> 00:52:48,900
UM the algorithm needed some corrections

1179
00:52:48,900 --> 00:52:51,240
and we realized that I made a

1180
00:52:51,240 --> 00:52:53,760
presentation about a year and a half

1181
00:52:53,760 --> 00:52:58,559
back uh at ietf 110 uh that is the three

1182
00:52:58,559 --> 00:53:00,839
Ram one reference

1183
00:53:00,839 --> 00:53:03,300
um and that that pointed to some

1184
00:53:03,300 --> 00:53:06,300
enhancements that were necessary uh in

1185
00:53:06,300 --> 00:53:09,480
order to get rid of some mix up between

1186
00:53:09,480 --> 00:53:11,940
the invalid outcome and the unknown

1187
00:53:11,940 --> 00:53:15,359
outcome and we took care of that in

1188
00:53:15,359 --> 00:53:18,480
version 09 but but additional

1189
00:53:18,480 --> 00:53:21,599
refinements were also necessary and they

1190
00:53:21,599 --> 00:53:25,559
are now in version 11. uh these

1191
00:53:25,559 --> 00:53:27,480
additional refinements are in the form

1192
00:53:27,480 --> 00:53:31,200
of as set handling route service route

1193
00:53:31,200 --> 00:53:35,160
server as how to treat that uh some some

1194
00:53:35,160 --> 00:53:37,020
other refinements related to

1195
00:53:37,020 --> 00:53:40,880
clarification about applicable fee Safi

1196
00:53:40,880 --> 00:53:44,300
and a statement about as configuration

1197
00:53:44,300 --> 00:53:47,520
and we in addition to these refinements

1198
00:53:47,520 --> 00:53:50,099
we devoted a good amount of effort to

1199
00:53:50,099 --> 00:53:53,460
get like pretty good text Clarity uh

1200
00:53:53,460 --> 00:53:55,740
throughout the document but there still

1201
00:53:55,740 --> 00:53:58,500
needs to be done a little more

1202
00:53:58,500 --> 00:54:01,700
next slide please

1203
00:54:03,180 --> 00:54:06,300
so on the as set handling we had a

1204
00:54:06,300 --> 00:54:08,520
pretty good discussion and feedback on

1205
00:54:08,520 --> 00:54:11,599
the working group uh a few months back

1206
00:54:11,599 --> 00:54:15,599
uh the pointer to that discussion uh is

1207
00:54:15,599 --> 00:54:18,720
provided at the bottom of this slide uh

1208
00:54:18,720 --> 00:54:21,420
so now uh based on

1209
00:54:21,420 --> 00:54:25,020
um the working group uh discussion and

1210
00:54:25,020 --> 00:54:28,559
general consensus uh the presence of as

1211
00:54:28,559 --> 00:54:32,579
set anywhere in the bgp path would make

1212
00:54:32,579 --> 00:54:36,000
the path invalid per aspa verification

1213
00:54:36,000 --> 00:54:39,119
algorithm so that's in the draft in the

1214
00:54:39,119 --> 00:54:43,160
in version 11 next slide please

1215
00:54:43,260 --> 00:54:46,440
so for that out server as also we had a

1216
00:54:46,440 --> 00:54:49,200
good discussion on the thread on the

1217
00:54:49,200 --> 00:54:51,599
working group list and the thread is

1218
00:54:51,599 --> 00:54:54,059
provided at the link to the thread is

1219
00:54:54,059 --> 00:54:56,220
provided at the bottom of this slide as

1220
00:54:56,220 --> 00:54:57,119
well

1221
00:54:57,119 --> 00:55:00,180
uh we had basically on based on that

1222
00:55:00,180 --> 00:55:03,059
discussion it emerged that we had two

1223
00:55:03,059 --> 00:55:06,720
choices uh one uh a choice a is to add

1224
00:55:06,720 --> 00:55:11,760
the RS ASN to the as path in the case of

1225
00:55:11,760 --> 00:55:15,059
a transparent as and in this case we can

1226
00:55:15,059 --> 00:55:18,359
apply the algorithm for Downstream paths

1227
00:55:18,359 --> 00:55:21,540
if we go with Choice B we would remove

1228
00:55:21,540 --> 00:55:24,720
the rsasn from the as part in the case

1229
00:55:24,720 --> 00:55:27,960
of non-transparent RS and apply the

1230
00:55:27,960 --> 00:55:31,440
algorithm for Upstream paths uh so in

1231
00:55:31,440 --> 00:55:34,680
version 11 we included Choice B they are

1232
00:55:34,680 --> 00:55:36,359
they are equivalent they give you the

1233
00:55:36,359 --> 00:55:39,440
same results uh for the path validation

1234
00:55:39,440 --> 00:55:44,339
uh under uh under any scenario

1235
00:55:44,339 --> 00:55:47,160
so they are equivalent we chose uh

1236
00:55:47,160 --> 00:55:51,000
Choice B uh in addition to that we

1237
00:55:51,000 --> 00:55:53,160
should also mention that now the draft

1238
00:55:53,160 --> 00:55:55,680
makes it clear that NRS client must

1239
00:55:55,680 --> 00:56:00,599
include rsas in its aspa and also an

1240
00:56:00,599 --> 00:56:05,099
rsas must register nas0 aspa that would

1241
00:56:05,099 --> 00:56:08,420
facilitate the path verification

1242
00:56:08,420 --> 00:56:10,980
unambiguously and it will make it work

1243
00:56:10,980 --> 00:56:11,760
right

1244
00:56:11,760 --> 00:56:15,079
next slide please

1245
00:56:15,780 --> 00:56:18,720
so we just have a clarification

1246
00:56:18,720 --> 00:56:21,260
um about the office

1247
00:56:21,260 --> 00:56:24,900
had some feedback on this and we have

1248
00:56:24,900 --> 00:56:27,900
since included this statement

1249
00:56:27,900 --> 00:56:29,940
um so basically it says that the

1250
00:56:29,940 --> 00:56:32,099
procedures described in the document are

1251
00:56:32,099 --> 00:56:36,900
applicable only for fe1 fe2 meaning ipv4

1252
00:56:36,900 --> 00:56:40,920
and IPv6 and in both cases with the Safi

1253
00:56:40,920 --> 00:56:43,920
one or unicast and the procedures must

1254
00:56:43,920 --> 00:56:46,319
not be applied to other address families

1255
00:56:46,319 --> 00:56:48,480
by default

1256
00:56:48,480 --> 00:56:51,420
next slide please

1257
00:56:51,420 --> 00:56:54,000
we also have a statement about as

1258
00:56:54,000 --> 00:56:56,220
Confederation which is new

1259
00:56:56,220 --> 00:56:59,040
um and that simply says that the ass on

1260
00:56:59,040 --> 00:57:02,280
the boundary of an as Confederation must

1261
00:57:02,280 --> 00:57:05,160
register aspa's ASP is using the

1262
00:57:05,160 --> 00:57:08,339
confederations global ASN or Global ID

1263
00:57:08,339 --> 00:57:11,640
and the procedures for aspa based path

1264
00:57:11,640 --> 00:57:14,160
validation in this document are not

1265
00:57:14,160 --> 00:57:17,339
recommended for use on ebgp links

1266
00:57:17,339 --> 00:57:19,740
internal to the confederation

1267
00:57:19,740 --> 00:57:23,520
I think that's uh cleared enough

1268
00:57:23,520 --> 00:57:26,720
next slide please

1269
00:57:27,960 --> 00:57:30,960
so uh like I said since we published

1270
00:57:30,960 --> 00:57:33,900
version 11 a few weeks back we have

1271
00:57:33,900 --> 00:57:36,599
received the comments uh from a couple

1272
00:57:36,599 --> 00:57:39,780
of people and that includes uh Claudio

1273
00:57:39,780 --> 00:57:45,839
and also Rich content from Charter a

1274
00:57:45,839 --> 00:57:48,240
good set of comments uh both of them and

1275
00:57:48,240 --> 00:57:51,240
I have responded to them on the list and

1276
00:57:51,240 --> 00:57:52,920
those are comments that we can

1277
00:57:52,920 --> 00:57:55,380
incorporate into the next version

1278
00:57:55,380 --> 00:57:59,280
version 11. uh in particular Claudio

1279
00:57:59,280 --> 00:58:03,180
read the draft uh very carefully and he

1280
00:58:03,180 --> 00:58:05,520
offered a very good extensive set of

1281
00:58:05,520 --> 00:58:09,180
comments uh his main difficulty with the

1282
00:58:09,180 --> 00:58:12,680
draft or main main

1283
00:58:13,579 --> 00:58:16,880
suggestion is to improve the readability

1284
00:58:16,880 --> 00:58:21,420
so he found that the draft by itself uh

1285
00:58:21,420 --> 00:58:23,880
especially in the algorithm description

1286
00:58:23,880 --> 00:58:28,140
uh it gets a little in intricate and at

1287
00:58:28,140 --> 00:58:31,380
that point he made use of sriram one uh

1288
00:58:31,380 --> 00:58:35,280
the my ietf 110 presentation so that has

1289
00:58:35,280 --> 00:58:37,380
a nice set of figures explaining the

1290
00:58:37,380 --> 00:58:39,900
algorithm it has a good it has good

1291
00:58:39,900 --> 00:58:42,359
notation to begin with and based on that

1292
00:58:42,359 --> 00:58:44,940
it builds on the description of the

1293
00:58:44,940 --> 00:58:48,660
algorithm so he he found it essential to

1294
00:58:48,660 --> 00:58:50,760
make use of that in order to be able to

1295
00:58:50,760 --> 00:58:54,480
under understand specifically uh the the

1296
00:58:54,480 --> 00:58:57,000
algorithm description uh in the draft

1297
00:58:57,000 --> 00:59:00,180
and that's where he said it can be

1298
00:59:00,180 --> 00:59:03,299
improved a whole lot so what I'm

1299
00:59:03,299 --> 00:59:05,700
proposing as part of the next steps is

1300
00:59:05,700 --> 00:59:08,579
that we can follow the notation and

1301
00:59:08,579 --> 00:59:11,940
style in Sri Ram one reference uh to

1302
00:59:11,940 --> 00:59:14,280
better describe the algorithm uh that's

1303
00:59:14,280 --> 00:59:17,280
quite doable and it will make the

1304
00:59:17,280 --> 00:59:20,339
description shorter and more concise and

1305
00:59:20,339 --> 00:59:21,720
also

1306
00:59:21,720 --> 00:59:25,020
um also clearer and we will publish a

1307
00:59:25,020 --> 00:59:27,660
version 11 a version 12 sorry in the

1308
00:59:27,660 --> 00:59:30,660
next few weeks and at that point we will

1309
00:59:30,660 --> 00:59:33,780
invite some more feedback uh from the

1310
00:59:33,780 --> 00:59:36,000
um from the working group and hopefully

1311
00:59:36,000 --> 00:59:38,760
then it will be uh it will be in good

1312
00:59:38,760 --> 00:59:39,540
shape

1313
00:59:39,540 --> 00:59:43,380
uh so at that point uh job has suggested

1314
00:59:43,380 --> 00:59:46,319
that we should wait a few few months and

1315
00:59:46,319 --> 00:59:48,839
solicit implementation experience

1316
00:59:48,839 --> 00:59:52,500
reports and then we can proceed to uh to

1317
00:59:52,500 --> 00:59:55,020
working a group last call

1318
00:59:55,020 --> 00:59:57,780
um right so and then I have a couple of

1319
00:59:57,780 --> 01:00:00,540
uh slides backup slides if we can just

1320
01:00:00,540 --> 01:00:03,540
quickly move to the next one

1321
01:00:03,540 --> 01:00:05,960
the one after that

1322
01:00:05,960 --> 01:00:10,619
so in case you are interested and want

1323
01:00:10,619 --> 01:00:15,180
to understand the I how the RS as is

1324
01:00:15,180 --> 01:00:18,859
treated and how these two Alternatives

1325
01:00:18,859 --> 01:00:21,900
the choice a and the choice B that I

1326
01:00:21,900 --> 01:00:24,240
mentioned earlier if you would just want

1327
01:00:24,240 --> 01:00:27,299
to get some clarity on that I won't go

1328
01:00:27,299 --> 01:00:29,160
through this slide but you you may look

1329
01:00:29,160 --> 01:00:33,000
at this slide uh to to to figure that

1330
01:00:33,000 --> 01:00:35,640
out and please ask me questions if if

1331
01:00:35,640 --> 01:00:37,680
you have any on the list or or

1332
01:00:37,680 --> 01:00:39,420
one-on-one

1333
01:00:39,420 --> 01:00:41,819
so thank you we can move on to the

1334
01:00:41,819 --> 01:00:44,180
questions

1335
01:00:49,200 --> 01:00:52,680
Joe Snyder open BSD

1336
01:00:52,680 --> 01:00:55,280
it is Our intention to implement

1337
01:00:55,280 --> 01:00:58,799
verification uh in the next three to six

1338
01:00:58,799 --> 01:00:59,780
months

1339
01:00:59,780 --> 01:01:04,680
which is fairly soon so that's where my

1340
01:01:04,680 --> 01:01:06,780
DSI and recommendations comes from to

1341
01:01:06,780 --> 01:01:08,640
wait a little bit with working with last

1342
01:01:08,640 --> 01:01:10,200
call and so we finished that

1343
01:01:10,200 --> 01:01:12,780
implementation

1344
01:01:12,780 --> 01:01:15,900
and I hope some other thunderstorms so

1345
01:01:15,900 --> 01:01:16,619
um

1346
01:01:16,619 --> 01:01:18,180
start working on this in the next few

1347
01:01:18,180 --> 01:01:20,040
months

1348
01:01:20,040 --> 01:01:23,819
uh thank you y'all uh I should add that

1349
01:01:23,819 --> 01:01:25,140
um

1350
01:01:25,140 --> 01:01:28,260
at least we already have implemented uh

1351
01:01:28,260 --> 01:01:30,359
these this pretty much close to this

1352
01:01:30,359 --> 01:01:32,760
latest version 11.

1353
01:01:32,760 --> 01:01:34,079
um

1354
01:01:34,079 --> 01:01:34,740
um

1355
01:01:34,740 --> 01:01:38,040
aspa path verification and we also have

1356
01:01:38,040 --> 01:01:41,700
a number of uh test cases that we run

1357
01:01:41,700 --> 01:01:45,680
against uh to to verify uh the the

1358
01:01:45,680 --> 01:01:48,720
implementation so we have that all

1359
01:01:48,720 --> 01:01:51,359
available on GitHub and we will come we

1360
01:01:51,359 --> 01:01:53,460
welcome anyone interested to pick that

1361
01:01:53,460 --> 01:01:57,420
up and make use of the tests uh or or

1362
01:01:57,420 --> 01:01:59,940
make use of uh or make use of our

1363
01:01:59,940 --> 01:02:02,040
implementation uh for if you're running

1364
01:02:02,040 --> 01:02:03,900
some experiments you're welcome to do

1365
01:02:03,900 --> 01:02:06,780
that in addition to that I must also

1366
01:02:06,780 --> 01:02:11,040
mention that uh that Claudio uh zika he

1367
01:02:11,040 --> 01:02:14,040
also mentioned uh in his comments on

1368
01:02:14,040 --> 01:02:17,339
this version 11 on cider Ops list uh

1369
01:02:17,339 --> 01:02:20,099
that he is implementing it so it would

1370
01:02:20,099 --> 01:02:22,500
be nice to I mean we know that that

1371
01:02:22,500 --> 01:02:24,900
there is another effort as well and job

1372
01:02:24,900 --> 01:02:28,079
mentioned uh another one as well so it's

1373
01:02:28,079 --> 01:02:29,780
good to see that there are multiple

1374
01:02:29,780 --> 01:02:34,079
implementation efforts already on way

1375
01:02:34,079 --> 01:02:38,359
are available or on way thank you

1376
01:02:42,000 --> 01:02:44,059
um

1377
01:02:45,540 --> 01:02:48,240
um so on the cas side we've done an

1378
01:02:48,240 --> 01:02:50,280
implementation based on

1379
01:02:50,280 --> 01:02:52,799
the syntax that was in one of the

1380
01:02:52,799 --> 01:02:55,260
documents but I think we need

1381
01:02:55,260 --> 01:02:57,359
Clarity on whether that's going to be

1382
01:02:57,359 --> 01:02:59,460
the actual syntax

1383
01:02:59,460 --> 01:03:01,440
basically that's what's stopping us from

1384
01:03:01,440 --> 01:03:03,540
doing it on the validation side

1385
01:03:03,540 --> 01:03:05,640
because you know experience of

1386
01:03:05,640 --> 01:03:07,500
implementing something that wasn't solid

1387
01:03:07,500 --> 01:03:09,540
and then having to revert it wasn't very

1388
01:03:09,540 --> 01:03:12,480
nice so if you can have Clarity on that

1389
01:03:12,480 --> 01:03:14,460
I think we can do more work on the

1390
01:03:14,460 --> 01:03:17,480
validation side as well

1391
01:03:18,559 --> 01:03:23,059
editing job can respond

1392
01:03:23,099 --> 01:03:26,400
uh Joe Snyder's uh I think in terms of

1393
01:03:26,400 --> 01:03:29,280
the profile uh the profile in my

1394
01:03:29,280 --> 01:03:31,680
perspective is now stable there's

1395
01:03:31,680 --> 01:03:34,619
multiple implementations uh specifically

1396
01:03:34,619 --> 01:03:37,799
your ca implementation helped me develop

1397
01:03:37,799 --> 01:03:40,200
my validator implementation

1398
01:03:40,200 --> 01:03:43,140
the current's profile drafts contains I

1399
01:03:43,140 --> 01:03:45,420
think references to seven or eight

1400
01:03:45,420 --> 01:03:48,240
implementations that to some degree have

1401
01:03:48,240 --> 01:03:50,819
tested interoperability with each other

1402
01:03:50,819 --> 01:03:53,520
uh so as far as I'm concerned unless

1403
01:03:53,520 --> 01:03:54,720
there is

1404
01:03:54,720 --> 01:03:57,540
a grave grave mistake in the profile

1405
01:03:57,540 --> 01:04:00,240
that needs addressing uh we should stop

1406
01:04:00,240 --> 01:04:01,920
touching the profile

1407
01:04:01,920 --> 01:04:03,660
and

1408
01:04:03,660 --> 01:04:06,119
the contention between the current

1409
01:04:06,119 --> 01:04:08,280
version of the profile and the one

1410
01:04:08,280 --> 01:04:11,339
before that is of a somewhat cosmetic

1411
01:04:11,339 --> 01:04:13,680
nature and that to me does not count as

1412
01:04:13,680 --> 01:04:17,579
a an urgent passengers him to to change

1413
01:04:17,579 --> 01:04:20,640
uh and then from a CA side

1414
01:04:20,640 --> 01:04:23,220
um I am I am ready to publish as per

1415
01:04:23,220 --> 01:04:24,660
profiles conforming to the latest

1416
01:04:24,660 --> 01:04:28,500
profile in the public rpki and we'll do

1417
01:04:28,500 --> 01:04:31,460
so in the next few months

1418
01:04:37,760 --> 01:04:41,579
for a talking profile anyway we now have

1419
01:04:41,579 --> 01:04:43,440
a implementation of the current drafts

1420
01:04:43,440 --> 01:04:45,720
as per profile in the

1421
01:04:45,720 --> 01:04:47,940
CA environment available on our testbed

1422
01:04:47,940 --> 01:04:50,160
and we will publish a documentation how

1423
01:04:50,160 --> 01:04:51,900
to create objects soon

1424
01:04:51,900 --> 01:04:54,059
it appears to be interoperable not

1425
01:04:54,059 --> 01:04:55,799
causing problematic validators however

1426
01:04:55,799 --> 01:04:58,200
one implementation will complain about

1427
01:04:58,200 --> 01:05:01,160
unknown objects

1428
01:05:02,880 --> 01:05:05,880
super and my my comment would be that

1429
01:05:05,880 --> 01:05:07,740
the contentions that we are seeing on

1430
01:05:07,740 --> 01:05:09,960
the profile side maybe that's something

1431
01:05:09,960 --> 01:05:11,700
we should take the mailing list and

1432
01:05:11,700 --> 01:05:14,058
discuss

1433
01:05:16,319 --> 01:05:19,140
um also come into my fellow idea chairs

1434
01:05:19,140 --> 01:05:23,099
this is something uh uh idea should be

1435
01:05:23,099 --> 01:05:24,559
looking at at least

1436
01:05:24,559 --> 01:05:26,940
and reviewing it

1437
01:05:26,940 --> 01:05:28,980
so Chris and I will follow up with you

1438
01:05:28,980 --> 01:05:31,339
folks

1439
01:05:31,680 --> 01:05:33,359
thank you sriram

1440
01:05:33,359 --> 01:05:36,020
thank you

1441
01:05:43,559 --> 01:05:44,700
thank you

1442
01:05:44,700 --> 01:05:47,240
Joe

1443
01:05:49,920 --> 01:05:52,260
hello everyone

1444
01:05:52,260 --> 01:05:54,299
loud and clear yep

1445
01:05:54,299 --> 01:05:57,000
I wanted to present an update on a

1446
01:05:57,000 --> 01:06:00,119
recent effort to do a best version of

1447
01:06:00,119 --> 01:06:02,280
the document that specifies the route

1448
01:06:02,280 --> 01:06:05,960
origin authorizations profile

1449
01:06:05,960 --> 01:06:08,460
rc6482 this

1450
01:06:08,460 --> 01:06:11,359
next slide please

1451
01:06:12,119 --> 01:06:14,400
the best effort started because I

1452
01:06:14,400 --> 01:06:17,099
noticed an oversight in the original

1453
01:06:17,099 --> 01:06:19,760
specification with regards to the

1454
01:06:19,760 --> 01:06:22,980
mandatory presence or absence of as

1455
01:06:22,980 --> 01:06:25,140
identifier extensions

1456
01:06:25,140 --> 01:06:28,500
and I felt to myself well I'll just file

1457
01:06:28,500 --> 01:06:30,059
an errata

1458
01:06:30,059 --> 01:06:32,780
next life

1459
01:06:33,299 --> 01:06:36,960
unfortunately it was shut down

1460
01:06:36,960 --> 01:06:38,760
to me this seems a little bit of an

1461
01:06:38,760 --> 01:06:41,039
arbitrary decision by the powers that be

1462
01:06:41,039 --> 01:06:44,819
I feel that what's currently deployed in

1463
01:06:44,819 --> 01:06:47,339
a while in terms of objects in the

1464
01:06:47,339 --> 01:06:49,799
repositories and how validators react to

1465
01:06:49,799 --> 01:06:51,980
them

1466
01:06:52,099 --> 01:06:54,660
and other erratas that have been

1467
01:06:54,660 --> 01:06:57,480
approved similar to this one it should

1468
01:06:57,480 --> 01:07:00,359
have been verified but it didn't so

1469
01:07:00,359 --> 01:07:02,700
next slide please

1470
01:07:02,700 --> 01:07:06,599
buckle up here we are able documents

1471
01:07:06,599 --> 01:07:09,380
next slide

1472
01:07:09,799 --> 01:07:13,319
the best document is available for your

1473
01:07:13,319 --> 01:07:16,619
consideration I started with a for

1474
01:07:16,619 --> 01:07:19,260
bottom copy of the original RC to really

1475
01:07:19,260 --> 01:07:21,299
try and make the changes from revision

1476
01:07:21,299 --> 01:07:23,760
to revision as minimal as possible so

1477
01:07:23,760 --> 01:07:25,740
that the whole crowd can follow the

1478
01:07:25,740 --> 01:07:29,400
story and see that even though some of

1479
01:07:29,400 --> 01:07:32,700
the changes might seem intrusive that

1480
01:07:32,700 --> 01:07:36,539
all in all these are very uh nuanced

1481
01:07:36,539 --> 01:07:39,720
changes to tie up any and all Loose Ends

1482
01:07:39,720 --> 01:07:42,539
the original RFC presented

1483
01:07:42,539 --> 01:07:45,420
next slide please

1484
01:07:45,420 --> 01:07:48,539
the goals of the best documents as far

1485
01:07:48,539 --> 01:07:53,339
as I'm concerned are to clarify uh that

1486
01:07:53,339 --> 01:07:55,740
that as identifiers should not be

1487
01:07:55,740 --> 01:07:57,079
present

1488
01:07:57,079 --> 01:08:00,680
I want to strengthen the asm1 notation

1489
01:08:00,680 --> 01:08:04,380
uh pull in the verified Errata that that

1490
01:08:04,380 --> 01:08:05,839
appeared so far

1491
01:08:05,839 --> 01:08:08,099
extend the documents a little bit by

1492
01:08:08,099 --> 01:08:11,700
providing an example that people that

1493
01:08:11,700 --> 01:08:14,640
are implementing roast may find useful

1494
01:08:14,640 --> 01:08:17,880
and uh above all maintain full

1495
01:08:17,880 --> 01:08:21,060
compatibility with the ecosystem as we

1496
01:08:21,060 --> 01:08:24,060
currently extend the uh understand it

1497
01:08:24,060 --> 01:08:25,920
I will go through these points one by

1498
01:08:25,920 --> 01:08:28,020
one in in the next slides next slide

1499
01:08:28,020 --> 01:08:30,140
please

1500
01:08:31,020 --> 01:08:34,080
so the roast payload contains

1501
01:08:34,080 --> 01:08:36,719
essentially two elements one is the

1502
01:08:36,719 --> 01:08:39,600
origin as and the other element is a

1503
01:08:39,600 --> 01:08:42,120
list of IP prefixes

1504
01:08:42,120 --> 01:08:46,319
and as we validate roast in an rpki

1505
01:08:46,319 --> 01:08:50,580
cache validator uh all the IP prefixes

1506
01:08:50,580 --> 01:08:53,600
in the payload must be contained in the

1507
01:08:53,600 --> 01:08:56,880
3779 extensions of the ee certificate

1508
01:08:56,880 --> 01:08:59,399
and the parent certificate of that ee

1509
01:08:59,399 --> 01:09:01,080
certificate and that's parents

1510
01:09:01,080 --> 01:09:04,140
certificate Etc

1511
01:09:04,140 --> 01:09:08,279
on the other hand the origin as or as ID

1512
01:09:08,279 --> 01:09:11,460
as is it's called in the profile is an

1513
01:09:11,460 --> 01:09:13,560
arbitrary value that can be set by the

1514
01:09:13,560 --> 01:09:15,960
resource holder so I can impose

1515
01:09:15,960 --> 01:09:19,620
anybody's ASM or even private asns and

1516
01:09:19,620 --> 01:09:23,100
it's really up to the IP resource holder

1517
01:09:23,100 --> 01:09:26,399
to decide which ASM is the one that can

1518
01:09:26,399 --> 01:09:28,319
originate the prefix

1519
01:09:28,319 --> 01:09:29,719
in other words

1520
01:09:29,719 --> 01:09:33,420
validators do not check whether the asid

1521
01:09:33,420 --> 01:09:37,439
in the payload is contained in the 3779

1522
01:09:37,439 --> 01:09:40,679
extensions in the certificate chain

1523
01:09:40,679 --> 01:09:44,399
and I've seen multiple uh implementers

1524
01:09:44,399 --> 01:09:46,620
that that made a mistake in this regard

1525
01:09:46,620 --> 01:09:48,540
because

1526
01:09:48,540 --> 01:09:51,120
um from the original specification

1527
01:09:51,120 --> 01:09:53,279
uh the the whole notion of as

1528
01:09:53,279 --> 01:09:57,060
identifiers is is not described and

1529
01:09:57,060 --> 01:10:00,179
since in the payload there's an AS

1530
01:10:00,179 --> 01:10:02,820
and potentially in the ee certificate

1531
01:10:02,820 --> 01:10:05,160
there could be something as related it

1532
01:10:05,160 --> 01:10:07,860
is intuitive for people to assume that

1533
01:10:07,860 --> 01:10:10,739
maybe they have some kind of connection

1534
01:10:10,739 --> 01:10:13,140
and by explicitly documenting that the

1535
01:10:13,140 --> 01:10:15,900
as identifiers extension must not be

1536
01:10:15,900 --> 01:10:18,600
present I think it becomes easier for

1537
01:10:18,600 --> 01:10:21,540
developers to understand that the asid

1538
01:10:21,540 --> 01:10:24,600
is not part of something that is uh

1539
01:10:24,600 --> 01:10:27,480
verified to be contained in the chain of

1540
01:10:27,480 --> 01:10:29,360
authorities

1541
01:10:29,360 --> 01:10:32,699
so that is what motivates uh this

1542
01:10:32,699 --> 01:10:35,659
particular uh

1543
01:10:35,760 --> 01:10:37,860
next slide please

1544
01:10:37,860 --> 01:10:41,520
about the feasibility of disallowing the

1545
01:10:41,520 --> 01:10:44,340
as identifiers extension in Roland ee

1546
01:10:44,340 --> 01:10:47,280
certificates there are currently zero

1547
01:10:47,280 --> 01:10:51,300
roas in the wild out of more than 130

1548
01:10:51,300 --> 01:10:54,840
000 rowas and none of them have this

1549
01:10:54,840 --> 01:10:57,420
particular extension

1550
01:10:57,420 --> 01:11:00,960
um I looked at various uh open source CA

1551
01:11:00,960 --> 01:11:02,280
implementations

1552
01:11:02,280 --> 01:11:05,280
and none of them set the extension the

1553
01:11:05,280 --> 01:11:07,920
as identifier extension on Raw ee

1554
01:11:07,920 --> 01:11:09,600
certificates

1555
01:11:09,600 --> 01:11:12,780
and on the validator side uh most

1556
01:11:12,780 --> 01:11:15,840
validators will ignore the extension if

1557
01:11:15,840 --> 01:11:18,540
it is present and one validator will

1558
01:11:18,540 --> 01:11:21,659
consider the robot invalid if the

1559
01:11:21,659 --> 01:11:23,340
extension is present

1560
01:11:23,340 --> 01:11:25,920
so I would argue that is entirely

1561
01:11:25,920 --> 01:11:28,440
feasible to add this additional

1562
01:11:28,440 --> 01:11:31,080
constraint because it doesn't seem to

1563
01:11:31,080 --> 01:11:34,760
stump on anybody's feed

1564
01:11:34,920 --> 01:11:37,880
next slide please

1565
01:11:39,000 --> 01:11:41,219
all right next topic strengthening the

1566
01:11:41,219 --> 01:11:43,920
asm1 notation

1567
01:11:43,920 --> 01:11:47,719
um the original Roa asn-1

1568
01:11:47,719 --> 01:11:51,840
notation was I think written in a time

1569
01:11:51,840 --> 01:11:54,719
where uh there was less understanding of

1570
01:11:54,719 --> 01:11:57,360
of all the powers that and features that

1571
01:11:57,360 --> 01:11:59,760
asm1 can offer us and what the benefits

1572
01:11:59,760 --> 01:12:01,920
are in uh

1573
01:12:01,920 --> 01:12:06,540
being very concise with with constraints

1574
01:12:06,540 --> 01:12:08,340
so for instance

1575
01:12:08,340 --> 01:12:12,360
um the asid is an asm1 integer an asm1

1576
01:12:12,360 --> 01:12:13,620
integers

1577
01:12:13,620 --> 01:12:17,340
can hold very very large values think

1578
01:12:17,340 --> 01:12:20,820
larger than 64 bits and also negative

1579
01:12:20,820 --> 01:12:22,460
values

1580
01:12:22,460 --> 01:12:25,560
so I think it is super helpful to be

1581
01:12:25,560 --> 01:12:28,219
very precise in this profile and

1582
01:12:28,219 --> 01:12:31,620
explicitly disallow negative values or

1583
01:12:31,620 --> 01:12:35,699
values larger than 2 to the power of 32.

1584
01:12:35,699 --> 01:12:37,860
um the slide you're looking at what I've

1585
01:12:37,860 --> 01:12:42,840
done is uh the the rats colorize text uh

1586
01:12:42,840 --> 01:12:46,260
enclosed in square brackets is what is

1587
01:12:46,260 --> 01:12:49,500
removed and the green colored text in

1588
01:12:49,500 --> 01:12:51,780
the curly brackets is what is added as

1589
01:12:51,780 --> 01:12:53,520
its replacement

1590
01:12:53,520 --> 01:12:55,739
so let's go over these changes one by

1591
01:12:55,739 --> 01:12:57,919
one

1592
01:12:58,199 --> 01:13:02,659
in the the the the

1593
01:13:03,900 --> 01:13:06,420
in the container that that has the

1594
01:13:06,420 --> 01:13:09,659
optional version attributes uh the asid

1595
01:13:09,659 --> 01:13:12,300
and the adder blocks A Change Is made

1596
01:13:12,300 --> 01:13:15,500
that ipader blocks cannot appear

1597
01:13:15,500 --> 01:13:18,000
unlimited amount of times

1598
01:13:18,000 --> 01:13:22,560
uh but it can appear only once or twice

1599
01:13:22,560 --> 01:13:25,620
the reason for this constraint is that

1600
01:13:25,620 --> 01:13:29,340
the address family is contained within

1601
01:13:29,340 --> 01:13:32,760
ipadder blocks and all robot producers

1602
01:13:32,760 --> 01:13:35,699
currently will add maximum insert to IP

1603
01:13:35,699 --> 01:13:39,120
other block structures one for V4 which

1604
01:13:39,120 --> 01:13:42,540
can contain multiple V4 prefixes and if

1605
01:13:42,540 --> 01:13:46,140
V6 also is a V6 prefixes also appear in

1606
01:13:46,140 --> 01:13:48,780
the roller payload another ipadder block

1607
01:13:48,780 --> 01:13:51,659
is added inside this ipadder block it

1608
01:13:51,659 --> 01:13:54,600
specifies ip6 and then a list of one or

1609
01:13:54,600 --> 01:13:56,940
more ip6 prefixes

1610
01:13:56,940 --> 01:14:01,380
so this feature of Ip editor blocks

1611
01:14:01,380 --> 01:14:05,340
being permitted and unlimited amounts of

1612
01:14:05,340 --> 01:14:08,699
instantiations is not used by any CA

1613
01:14:08,699 --> 01:14:10,320
implementation

1614
01:14:10,320 --> 01:14:13,140
in retrospect I think it shows that the

1615
01:14:13,140 --> 01:14:17,159
data structure of uh rowas should have

1616
01:14:17,159 --> 01:14:19,679
done an inversion where for instance the

1617
01:14:19,679 --> 01:14:22,260
API is is on the outside of the

1618
01:14:22,260 --> 01:14:26,159
container but that type of change would

1619
01:14:26,159 --> 01:14:28,980
prompt us to do a row of a profile

1620
01:14:28,980 --> 01:14:32,340
version bump and that would then we

1621
01:14:32,340 --> 01:14:36,719
would not meet our goal of compatibility

1622
01:14:37,199 --> 01:14:39,960
um all right so IP address is is a a

1623
01:14:39,960 --> 01:14:42,480
quirky change but it works out with

1624
01:14:42,480 --> 01:14:45,239
everything that's deployed in the wild

1625
01:14:45,239 --> 01:14:48,719
uh then asid being constrained to zero

1626
01:14:48,719 --> 01:14:51,179
up to two to the power of 32 I think is

1627
01:14:51,179 --> 01:14:53,840
fairly obvious

1628
01:14:54,239 --> 01:14:56,880
um the next change is in address family

1629
01:14:56,880 --> 01:14:59,640
inside the Roa IP address family

1630
01:14:59,640 --> 01:15:01,080
structure

1631
01:15:01,080 --> 01:15:05,280
where the API is uh no longer permitted

1632
01:15:05,280 --> 01:15:07,980
to be two or three octets but can only

1633
01:15:07,980 --> 01:15:10,320
be two octets

1634
01:15:10,320 --> 01:15:12,840
the reason is that the robot

1635
01:15:12,840 --> 01:15:14,340
specification

1636
01:15:14,340 --> 01:15:18,120
you need three octets to encode both API

1637
01:15:18,120 --> 01:15:20,040
and Safi

1638
01:15:20,040 --> 01:15:22,020
but you're not allowed to encode the

1639
01:15:22,020 --> 01:15:25,080
Safi so according to the normative

1640
01:15:25,080 --> 01:15:28,739
natural text in the original RFC the

1641
01:15:28,739 --> 01:15:33,140
only possible outcome is is two octets

1642
01:15:33,140 --> 01:15:36,179
so it seems a bit silly to me to on The

1643
01:15:36,179 --> 01:15:38,280
Wire permit three octets and then error

1644
01:15:38,280 --> 01:15:39,780
out because you specified the third

1645
01:15:39,780 --> 01:15:40,980
octet

1646
01:15:40,980 --> 01:15:43,440
uh so again this this is a change that

1647
01:15:43,440 --> 01:15:45,659
is perfectly compatible with with what's

1648
01:15:45,659 --> 01:15:47,940
deployed out there uh you're not allowed

1649
01:15:47,940 --> 01:15:52,080
to specify surface uh so we clean up the

1650
01:15:52,080 --> 01:15:53,699
room that would allow you to express

1651
01:15:53,699 --> 01:15:56,400
Safi

1652
01:15:56,400 --> 01:16:00,120
onwards to max length inside the Roa IP

1653
01:16:00,120 --> 01:16:02,060
address sequence

1654
01:16:02,060 --> 01:16:04,400
next link again was an integer

1655
01:16:04,400 --> 01:16:06,360
unconstrained so it could be negative

1656
01:16:06,360 --> 01:16:09,360
could be really large but the reality of

1657
01:16:09,360 --> 01:16:12,480
the situation is that max length cannot

1658
01:16:12,480 --> 01:16:14,400
be smaller than zero cannot be a

1659
01:16:14,400 --> 01:16:15,780
negative number that would not make

1660
01:16:15,780 --> 01:16:18,659
sense and it cannot be larger than the

1661
01:16:18,659 --> 01:16:21,780
maximum prefix length of an IPv6 address

1662
01:16:21,780 --> 01:16:25,199
which is under 28. there are additional

1663
01:16:25,199 --> 01:16:27,540
constraints uh

1664
01:16:27,540 --> 01:16:30,780
for instance in the case of an uh ip4

1665
01:16:30,780 --> 01:16:33,840
Roa IP address block the max length

1666
01:16:33,840 --> 01:16:36,540
value can at maximum be 32

1667
01:16:36,540 --> 01:16:40,380
unfortunately uh it's super complicated

1668
01:16:40,380 --> 01:16:43,320
to express this in asm1 and while we do

1669
01:16:43,320 --> 01:16:45,300
have a

1670
01:16:45,300 --> 01:16:48,960
draft profile that that introduces API

1671
01:16:48,960 --> 01:16:51,860
context dependence constraints

1672
01:16:51,860 --> 01:16:55,199
my personal take is that the ASM one is

1673
01:16:55,199 --> 01:16:59,280
utterly unreadable to both humans and

1674
01:16:59,280 --> 01:17:01,380
most open source compilers

1675
01:17:01,380 --> 01:17:04,140
so I'm a bit hesitant to go down that

1676
01:17:04,140 --> 01:17:05,580
path

1677
01:17:05,580 --> 01:17:07,580
then the final constraint

1678
01:17:07,580 --> 01:17:12,060
is in the IP address bit string again an

1679
01:17:12,060 --> 01:17:13,380
address is

1680
01:17:13,380 --> 01:17:16,260
if it's ip6 address the address is going

1681
01:17:16,260 --> 01:17:18,960
to be a maximum of 128 bits if it's ip4

1682
01:17:18,960 --> 01:17:23,159
it's going to be 32. it definitely uh is

1683
01:17:23,159 --> 01:17:27,540
not unlimited and never larger than 128s

1684
01:17:27,540 --> 01:17:32,340
uh and and these constraints uh

1685
01:17:32,340 --> 01:17:34,980
are expressed in the natural text in the

1686
01:17:34,980 --> 01:17:38,040
original RFC to to some degree but I

1687
01:17:38,040 --> 01:17:40,920
think it is helpful to also uh repeat

1688
01:17:40,920 --> 01:17:43,679
these constraints in the asm1 profile

1689
01:17:43,679 --> 01:17:46,260
itself so that the next person that

1690
01:17:46,260 --> 01:17:48,540
takes the asm1 profile and compiles it

1691
01:17:48,540 --> 01:17:49,920
into

1692
01:17:49,920 --> 01:17:53,280
source code uh gets some benefits of

1693
01:17:53,280 --> 01:17:56,599
these constraints

1694
01:17:56,640 --> 01:17:59,340
uh Jeff you jumped into qdf a question

1695
01:17:59,340 --> 01:18:01,980
specific to this or at the end

1696
01:18:01,980 --> 01:18:05,659
all right next slide please

1697
01:18:05,940 --> 01:18:09,540
all these changes are 100 compatible

1698
01:18:09,540 --> 01:18:12,179
with all robots deployed out there there

1699
01:18:12,179 --> 01:18:14,880
are no Ross that carry more than two IP

1700
01:18:14,880 --> 01:18:16,920
other blocks there are no row ads that

1701
01:18:16,920 --> 01:18:19,679
have negative or or larger than two to

1702
01:18:19,679 --> 01:18:21,179
three uh

1703
01:18:21,179 --> 01:18:22,940
as IDs

1704
01:18:22,940 --> 01:18:27,860
and max length uh an IP address also are

1705
01:18:27,860 --> 01:18:31,020
within these constraints so

1706
01:18:31,020 --> 01:18:33,239
I I think there's a good justification

1707
01:18:33,239 --> 01:18:36,120
to to accept these changes to the asm1

1708
01:18:36,120 --> 01:18:37,620
profile because it does not break

1709
01:18:37,620 --> 01:18:40,320
anything we're currently using uh on the

1710
01:18:40,320 --> 01:18:41,940
wider internet

1711
01:18:41,940 --> 01:18:44,900
next slide please

1712
01:18:45,900 --> 01:18:47,880
in terms of incorporating verified

1713
01:18:47,880 --> 01:18:50,219
errata

1714
01:18:50,219 --> 01:18:53,400
these were super easy I just copy pasted

1715
01:18:53,400 --> 01:18:55,620
a sentence that the inherit element in

1716
01:18:55,620 --> 01:18:58,400
the 3779 IP address

1717
01:18:58,400 --> 01:19:01,380
extension is is not allowed

1718
01:19:01,380 --> 01:19:04,980
the asm1 has been uh

1719
01:19:04,980 --> 01:19:07,500
verify to compile and be complete in the

1720
01:19:07,500 --> 01:19:10,140
latest version thanks Russ for your help

1721
01:19:10,140 --> 01:19:12,000
on that

1722
01:19:12,000 --> 01:19:14,280
um and since the the document now in its

1723
01:19:14,280 --> 01:19:17,699
native form is an XML uh to RFC version

1724
01:19:17,699 --> 01:19:20,340
free documents the table of contents is

1725
01:19:20,340 --> 01:19:22,440
automatically generated and

1726
01:19:22,440 --> 01:19:24,840
I got to take off this Errata without

1727
01:19:24,840 --> 01:19:26,880
actually doing much

1728
01:19:26,880 --> 01:19:29,780
slide please

1729
01:19:30,120 --> 01:19:33,360
I included an example in as an appendix

1730
01:19:33,360 --> 01:19:37,500
in in the draft this is just the payload

1731
01:19:37,500 --> 01:19:42,719
of a Roa and I provided a standard Unix

1732
01:19:42,719 --> 01:19:45,719
utility invocations to demonstrate how

1733
01:19:45,719 --> 01:19:49,760
the hex the Dr encoding

1734
01:19:49,760 --> 01:19:53,580
uh transposes to to Output that is a

1735
01:19:53,580 --> 01:19:55,620
little bit more human readable and my

1736
01:19:55,620 --> 01:19:57,239
hope is that if somebody writes a

1737
01:19:57,239 --> 01:19:59,640
validator or a CA implementation that an

1738
01:19:59,640 --> 01:20:02,280
example like this would help them

1739
01:20:02,280 --> 01:20:04,560
and then again there's of course in the

1740
01:20:04,560 --> 01:20:06,239
repositories there are hundreds of

1741
01:20:06,239 --> 01:20:09,300
thousands of examples so uh it's it's

1742
01:20:09,300 --> 01:20:12,239
more there for completeness

1743
01:20:12,239 --> 01:20:15,019
next slide please

1744
01:20:16,860 --> 01:20:18,719
um and with that I would like to open up

1745
01:20:18,719 --> 01:20:19,620
the

1746
01:20:19,620 --> 01:20:23,159
the microphone for comments feedback uh

1747
01:20:23,159 --> 01:20:26,640
also please email to the mailing list or

1748
01:20:26,640 --> 01:20:28,560
if you want to have a private discussion

1749
01:20:28,560 --> 01:20:32,100
email the office Alias directly or if

1750
01:20:32,100 --> 01:20:35,699
you like using GitHub use that

1751
01:20:35,699 --> 01:20:39,020
Jeff Jeff has mostly nitpicky type stuff

1752
01:20:39,020 --> 01:20:42,900
so the main reason historically at least

1753
01:20:42,900 --> 01:20:45,120
that constraints were not thrown at a

1754
01:20:45,120 --> 01:20:48,960
lot of asn1 stuff is the tool set

1755
01:20:48,960 --> 01:20:50,640
anybody that's tried to actually use any

1756
01:20:50,640 --> 01:20:52,620
tools that do ASN one parsing usually

1757
01:20:52,620 --> 01:20:54,659
end up tearing their hair out uh

1758
01:20:54,659 --> 01:20:56,699
swearing at the authors no trying to

1759
01:20:56,699 --> 01:20:57,600
actually

1760
01:20:57,600 --> 01:21:00,360
dig through necromancy manuals to

1761
01:21:00,360 --> 01:21:01,920
actually figure out what the apis are

1762
01:21:01,920 --> 01:21:04,860
supposed to be so while I agree that

1763
01:21:04,860 --> 01:21:07,739
additional constraints might be handy

1764
01:21:07,739 --> 01:21:10,320
then you know

1765
01:21:10,320 --> 01:21:12,239
your real question is whether or not

1766
01:21:12,239 --> 01:21:13,800
your implementation is going to slow

1767
01:21:13,800 --> 01:21:15,420
down because you're increasing the

1768
01:21:15,420 --> 01:21:17,699
difficulty to get the job done

1769
01:21:17,699 --> 01:21:19,739
two binder points on some of the items

1770
01:21:19,739 --> 01:21:22,440
you had in there so like your as numbers

1771
01:21:22,440 --> 01:21:23,699
you're trying to actually restrict them

1772
01:21:23,699 --> 01:21:25,440
to be positive integers as big as an as

1773
01:21:25,440 --> 01:21:27,420
number can be that's great

1774
01:21:27,420 --> 01:21:30,360
uh one of the weird side effects of

1775
01:21:30,360 --> 01:21:32,219
leaving it just integer is what happens

1776
01:21:32,219 --> 01:21:33,840
if you want to do strange things like

1777
01:21:33,840 --> 01:21:36,000
we've affected them with slurm and other

1778
01:21:36,000 --> 01:21:38,040
Scrolls where we stick weird as numbers

1779
01:21:38,040 --> 01:21:40,080
and they're like zero if you have a

1780
01:21:40,080 --> 01:21:42,179
negative number is a signal that allows

1781
01:21:42,179 --> 01:21:44,280
you to Signal stuff later

1782
01:21:44,280 --> 01:21:47,159
very similarly like uh by not being

1783
01:21:47,159 --> 01:21:48,540
prescriptive about the length of the

1784
01:21:48,540 --> 01:21:50,880
addresses you're allowing for something

1785
01:21:50,880 --> 01:21:53,159
that's not V4 or V6 to eventually become

1786
01:21:53,159 --> 01:21:55,639
specified

1787
01:21:55,920 --> 01:21:58,080
um but in my last comments really

1788
01:21:58,080 --> 01:21:59,340
directed towards you know the original

1789
01:21:59,340 --> 01:22:02,159
spec encoding an Effie as an octet

1790
01:22:02,159 --> 01:22:04,260
string was always stupid you know it's

1791
01:22:04,260 --> 01:22:07,260
an integer and it's uh you know bounded

1792
01:22:07,260 --> 01:22:10,520
to two two bytes

1793
01:22:11,760 --> 01:22:14,640
uh if I respond to that the constraints

1794
01:22:14,640 --> 01:22:16,920
as used uh

1795
01:22:16,920 --> 01:22:19,620
can you go back to the ASMR

1796
01:22:19,620 --> 01:22:22,460
slide please

1797
01:22:23,159 --> 01:22:25,020
one more

1798
01:22:25,020 --> 01:22:27,620
one more

1799
01:22:30,659 --> 01:22:33,420
the only two constrain types that are

1800
01:22:33,420 --> 01:22:36,540
used here are a size limitation and a

1801
01:22:36,540 --> 01:22:39,239
value range limitation and those are

1802
01:22:39,239 --> 01:22:43,140
supported by uh all the asm1 compilers

1803
01:22:43,140 --> 01:22:46,460
I'm aware of so

1804
01:22:48,179 --> 01:22:50,760
yeah Yep this is much later than I mean

1805
01:22:50,760 --> 01:22:52,920
the original robot specification is I

1806
01:22:52,920 --> 01:22:54,360
think a little bit more than 12 years

1807
01:22:54,360 --> 01:22:58,560
old so times have changed to some degree

1808
01:22:58,560 --> 01:23:00,659
uh where we had more difficulty was

1809
01:23:00,659 --> 01:23:04,159
instantiating new classes to the API

1810
01:23:04,159 --> 01:23:07,500
contextual context dependent uh size

1811
01:23:07,500 --> 01:23:09,960
limits and there we finally found the

1812
01:23:09,960 --> 01:23:13,800
compilers uh uh like asm1c have trouble

1813
01:23:13,800 --> 01:23:16,739
uh understanding what is happening but

1814
01:23:16,739 --> 01:23:18,719
I'm I'm very confident that these

1815
01:23:18,719 --> 01:23:21,900
constraints are supported by the vast

1816
01:23:21,900 --> 01:23:25,820
majority of the ecosystem

1817
01:23:27,060 --> 01:23:30,179
any other questions comments what is

1818
01:23:30,179 --> 01:23:31,920
next

1819
01:23:31,920 --> 01:23:34,140
with us all right

1820
01:23:34,140 --> 01:23:36,860
what else

1821
01:23:37,500 --> 01:23:41,159
ah so Russ Housley there's um

1822
01:23:41,159 --> 01:23:43,020
when we were working on three seven

1823
01:23:43,020 --> 01:23:46,140
seven nine like snack was the most

1824
01:23:46,140 --> 01:23:50,400
common open source asn1 compiler and uh

1825
01:23:50,400 --> 01:23:54,780
it only did the 1988 version of the Deus

1826
01:23:54,780 --> 01:23:56,940
unlock and so all of that

1827
01:23:56,940 --> 01:23:58,020
so

1828
01:23:58,020 --> 01:24:01,320
um when you look at this I think if

1829
01:24:01,320 --> 01:24:03,300
you're using a tool that understands it

1830
01:24:03,300 --> 01:24:05,640
you will get a benefit

1831
01:24:05,640 --> 01:24:07,920
if you're not you're going to have to

1832
01:24:07,920 --> 01:24:10,140
put code around it to make these same

1833
01:24:10,140 --> 01:24:15,659
checks anyway so I see no harm uh in in

1834
01:24:15,659 --> 01:24:17,940
putting it here where they get a decode

1835
01:24:17,940 --> 01:24:19,980
error or you'll get a checking of

1836
01:24:19,980 --> 01:24:22,260
consistency error but either way you're

1837
01:24:22,260 --> 01:24:24,360
going to have to perform these very same

1838
01:24:24,360 --> 01:24:25,440
checks

1839
01:24:25,440 --> 01:24:29,100
and as you have said I already compiled

1840
01:24:29,100 --> 01:24:30,600
the module

1841
01:24:30,600 --> 01:24:32,760
um with the addition of a single

1842
01:24:32,760 --> 01:24:35,820
semicolon that was inadvertently dropped

1843
01:24:35,820 --> 01:24:38,659
it works

1844
01:24:41,060 --> 01:24:44,820
could we go back to slide I think three

1845
01:24:44,820 --> 01:24:47,100
so yep you're right that was a judgment

1846
01:24:47,100 --> 01:24:49,679
call on rejecting that

1847
01:24:49,679 --> 01:24:52,679
um arbitrary judgment call uh I think

1848
01:24:52,679 --> 01:24:55,800
allowing a comment is less of a big

1849
01:24:55,800 --> 01:24:58,199
change than this but I'm super glad that

1850
01:24:58,199 --> 01:24:59,880
I rejected it because this looks like a

1851
01:24:59,880 --> 01:25:01,260
much better outcome

1852
01:25:01,260 --> 01:25:02,580
so if I know this is going to be the

1853
01:25:02,580 --> 01:25:04,739
outcome of hit reject faster but yeah if

1854
01:25:04,739 --> 01:25:07,199
it was a judgment Hall

1855
01:25:07,199 --> 01:25:10,140
and I agree that that uh taking this

1856
01:25:10,140 --> 01:25:12,300
opportunity to do a best document is is

1857
01:25:12,300 --> 01:25:14,880
a better outcome uh so I I just wanted

1858
01:25:14,880 --> 01:25:16,560
to you know you were sitting right in

1859
01:25:16,560 --> 01:25:18,540
front of me be a little bit snarky about

1860
01:25:18,540 --> 01:25:20,719
it

1861
01:25:20,820 --> 01:25:23,940
sure you have 10 questions no I have uh

1862
01:25:23,940 --> 01:25:26,219
just back to the slide 10.

1863
01:25:26,219 --> 01:25:29,159
um uh you know that had the ASN notation

1864
01:25:29,159 --> 01:25:31,080
so

1865
01:25:31,080 --> 01:25:33,600
the one the one problem I'm kind of

1866
01:25:33,600 --> 01:25:36,420
having with this is I mean I certainly

1867
01:25:36,420 --> 01:25:37,739
agree that we're not going to have

1868
01:25:37,739 --> 01:25:40,800
negative as numbers

1869
01:25:40,800 --> 01:25:42,840
but

1870
01:25:42,840 --> 01:25:45,060
you know in in looking at this I'm

1871
01:25:45,060 --> 01:25:47,100
trying to think of the future as well

1872
01:25:47,100 --> 01:25:49,080
you know if we're talking about asn1

1873
01:25:49,080 --> 01:25:50,340
compilers

1874
01:25:50,340 --> 01:25:54,000
and you can encode that well we may not

1875
01:25:54,000 --> 01:25:55,320
like

1876
01:25:55,320 --> 01:25:58,320
you know dates back to the 80s

1877
01:25:58,320 --> 01:26:01,380
uh you know in some of these cases I'm

1878
01:26:01,380 --> 01:26:03,000
also trying to think about the future so

1879
01:26:03,000 --> 01:26:04,800
if we look at an equivalent time window

1880
01:26:04,800 --> 01:26:06,780
in the future

1881
01:26:06,780 --> 01:26:11,100
could we have IP addresses or ASN values

1882
01:26:11,100 --> 01:26:13,980
that exceed this range in the future

1883
01:26:13,980 --> 01:26:18,120
that by doing this we are constraining

1884
01:26:18,120 --> 01:26:20,159
ourselves from doing something creative

1885
01:26:20,159 --> 01:26:22,739
when we when it be may become

1886
01:26:22,739 --> 01:26:25,980
operationally necessary

1887
01:26:25,980 --> 01:26:29,040
and and that is one of my concerns in

1888
01:26:29,040 --> 01:26:32,699
trying to make a change like this is

1889
01:26:32,699 --> 01:26:34,800
you know by by going and doing these

1890
01:26:34,800 --> 01:26:37,020
things if for some reason we need to go

1891
01:26:37,020 --> 01:26:41,159
and change all the asns or move them all

1892
01:26:41,159 --> 01:26:43,800
to 64-bit or some other future number

1893
01:26:43,800 --> 01:26:46,739
even though today we may not imagine 32

1894
01:26:46,739 --> 01:26:49,739
to be you know you know so far out of

1895
01:26:49,739 --> 01:26:52,739
range I I have reason to believe that we

1896
01:26:52,739 --> 01:26:54,659
would still be using the same dgp4

1897
01:26:54,659 --> 01:26:58,880
protocol plus plus and that time frame

1898
01:26:58,880 --> 01:27:02,460
and so it's hard for me to believe that

1899
01:27:02,460 --> 01:27:04,679
we would since the universe of people

1900
01:27:04,679 --> 01:27:06,659
using this is even smaller than the

1901
01:27:06,659 --> 01:27:09,060
universe of people using bgp4

1902
01:27:09,060 --> 01:27:11,280
plus plus

1903
01:27:11,280 --> 01:27:13,020
um that we wouldn't that we would want

1904
01:27:13,020 --> 01:27:16,080
to construct you know to implement a

1905
01:27:16,080 --> 01:27:17,820
constraint to say hey this should only

1906
01:27:17,820 --> 01:27:19,739
be 32-bit

1907
01:27:19,739 --> 01:27:21,960
um especially in you know this because

1908
01:27:21,960 --> 01:27:24,120
this is an outside encoding encoding

1909
01:27:24,120 --> 01:27:26,820
this isn't a wire encoding this is wire

1910
01:27:26,820 --> 01:27:29,699
encoding this is not a wire encoding for

1911
01:27:29,699 --> 01:27:31,739
the purposes of

1912
01:27:31,739 --> 01:27:35,400
this data storage you know for actually

1913
01:27:35,400 --> 01:27:39,679
signaling in in the protocol

1914
01:27:39,780 --> 01:27:41,699
um in in this place because this is

1915
01:27:41,699 --> 01:27:44,100
something that gets passed through that

1916
01:27:44,100 --> 01:27:48,239
you know 1983 or you know or later

1917
01:27:48,239 --> 01:27:51,540
decoding engine for asn.1

1918
01:27:51,540 --> 01:27:53,100
if we want to use something other than

1919
01:27:53,100 --> 01:27:56,400
asn.1 like you know the tlvs that we use

1920
01:27:56,400 --> 01:28:00,060
in bgp protocol like maybe we should

1921
01:28:00,060 --> 01:28:01,739
be doing that

1922
01:28:01,739 --> 01:28:03,000
but

1923
01:28:03,000 --> 01:28:05,699
if we're going to be relying upon asn.1

1924
01:28:05,699 --> 01:28:07,920
which is what For Better or For Worse

1925
01:28:07,920 --> 01:28:11,520
x509 relies upon

1926
01:28:11,520 --> 01:28:13,380
uh you know I I'm concerned about

1927
01:28:13,380 --> 01:28:15,719
constraining the numbers even if today

1928
01:28:15,719 --> 01:28:17,639
it seems rational because it's a valid

1929
01:28:17,639 --> 01:28:19,199
range

1930
01:28:19,199 --> 01:28:20,760
um but by going and doing that we're

1931
01:28:20,760 --> 01:28:23,280
going to foreclose that and make it much

1932
01:28:23,280 --> 01:28:26,460
harder for people in the future can I uh

1933
01:28:26,460 --> 01:28:30,300
interrupture a beautiful monologue

1934
01:28:30,300 --> 01:28:34,679
um if as and numbers are specified to be

1935
01:28:34,679 --> 01:28:36,920
say 64 bits or

1936
01:28:36,920 --> 01:28:40,199
128. the path to extend this profile is

1937
01:28:40,199 --> 01:28:43,139
fairly straightforward on line two you

1938
01:28:43,139 --> 01:28:44,540
see a version

1939
01:28:44,540 --> 01:28:48,239
uh and if the semantics of of the data

1940
01:28:48,239 --> 01:28:50,340
structure elements would change such as

1941
01:28:50,340 --> 01:28:53,820
hey asns can be larger nowadays uh you

1942
01:28:53,820 --> 01:28:56,820
would use a new version number uh that

1943
01:28:56,820 --> 01:28:57,719
has

1944
01:28:57,719 --> 01:29:00,840
new so I'm sorry is this saying that

1945
01:29:00,840 --> 01:29:02,159
you're going to increase the version

1946
01:29:02,159 --> 01:29:04,500
number here to do your change

1947
01:29:04,500 --> 01:29:07,500
now these changes all reflect what is

1948
01:29:07,500 --> 01:29:10,020
currently version zero as deployed in

1949
01:29:10,020 --> 01:29:11,960
the wild

1950
01:29:11,960 --> 01:29:15,360
is there a reason to constrain it now to

1951
01:29:15,360 --> 01:29:17,820
to perhaps unconstrain it later it's

1952
01:29:17,820 --> 01:29:20,360
it's already constrained in all RP

1953
01:29:20,360 --> 01:29:23,040
implementations it's just not in the

1954
01:29:23,040 --> 01:29:24,239
spec

1955
01:29:24,239 --> 01:29:27,300
and if we want larger as numbers which

1956
01:29:27,300 --> 01:29:29,460
might happen all we need to do is Bump

1957
01:29:29,460 --> 01:29:31,920
the version number and say asns can now

1958
01:29:31,920 --> 01:29:34,920
be 2 to the power of 64. or we file a

1959
01:29:34,920 --> 01:29:36,780
bug in the Implement in those

1960
01:29:36,780 --> 01:29:39,000
implementations to say please accept the

1961
01:29:39,000 --> 01:29:41,639
valid numerical range from the asn1

1962
01:29:41,639 --> 01:29:43,020
encoding

1963
01:29:43,020 --> 01:29:45,120
there there's more Plumbing if ASL

1964
01:29:45,120 --> 01:29:48,900
numbers are extended like RFC 3779 would

1965
01:29:48,900 --> 01:29:51,900
need to be updated sure uh but the list

1966
01:29:51,900 --> 01:29:53,699
of things you know I'm just wondering do

1967
01:29:53,699 --> 01:29:55,320
we want to be adding to that list of

1968
01:29:55,320 --> 01:29:57,060
things in the future

1969
01:29:57,060 --> 01:29:59,480
that would you know future debt when

1970
01:29:59,480 --> 01:30:02,820
it's not necessary now

1971
01:30:02,820 --> 01:30:04,920
and I haven't heard a compelling reason

1972
01:30:04,920 --> 01:30:07,620
to make that change

1973
01:30:07,620 --> 01:30:09,960
other than well people implemented it

1974
01:30:09,960 --> 01:30:11,460
this way now

1975
01:30:11,460 --> 01:30:14,520
maybe for this thing that isn't also

1976
01:30:14,520 --> 01:30:16,620
I've you know you claim isn't being used

1977
01:30:16,620 --> 01:30:19,500
either so I'm also wondering why we're

1978
01:30:19,500 --> 01:30:23,719
spending a lot of time mucking with it

1979
01:30:24,600 --> 01:30:26,940
sure

1980
01:30:26,940 --> 01:30:29,340
George Michaelson AP Nick I actually

1981
01:30:29,340 --> 01:30:32,760
have two points they are unrelated

1982
01:30:32,760 --> 01:30:35,340
I I think there is significant benefit

1983
01:30:35,340 --> 01:30:36,920
in being

1984
01:30:36,920 --> 01:30:40,739
narrowly specific and are arguably

1985
01:30:40,739 --> 01:30:43,620
prescriptive in binary structures like

1986
01:30:43,620 --> 01:30:45,780
these because the primary risk here is

1987
01:30:45,780 --> 01:30:48,600
Bad actors not good actors and the

1988
01:30:48,600 --> 01:30:50,460
negative number wrap around the

1989
01:30:50,460 --> 01:30:52,800
unexpected Behavior and the we didn't

1990
01:30:52,800 --> 01:30:54,540
expect you to use it but we didn't

1991
01:30:54,540 --> 01:30:56,100
Define it

1992
01:30:56,100 --> 01:30:59,159
concerned me from risk and I know that

1993
01:30:59,159 --> 01:31:00,780
that's the hand waving we're a little

1994
01:31:00,780 --> 01:31:03,540
unknown risk statement but I do see this

1995
01:31:03,540 --> 01:31:05,760
as bad actor threat we've got people

1996
01:31:05,760 --> 01:31:07,800
with implementations and they don't have

1997
01:31:07,800 --> 01:31:10,920
defined constraints in the ASN one if it

1998
01:31:10,920 --> 01:31:12,719
turned out writing a negative number

1999
01:31:12,719 --> 01:31:14,760
caused an out of memory event and it was

2000
01:31:14,760 --> 01:31:17,100
in routers that would be very unpleasant

2001
01:31:17,100 --> 01:31:19,620
I'd rather rewrite specs which narrowed

2002
01:31:19,620 --> 01:31:21,420
that opportunity that's my personal

2003
01:31:21,420 --> 01:31:22,980
belief

2004
01:31:22,980 --> 01:31:25,199
and if what you're doing has significant

2005
01:31:25,199 --> 01:31:27,600
on The Wire binary compatibility for

2006
01:31:27,600 --> 01:31:29,219
good actors

2007
01:31:29,219 --> 01:31:31,800
it does have a certain zero cost quality

2008
01:31:31,800 --> 01:31:34,560
and that again is good and I would I

2009
01:31:34,560 --> 01:31:36,600
would absolutely wish to applaud and

2010
01:31:36,600 --> 01:31:39,480
welcome the word cross does using a well

2011
01:31:39,480 --> 01:31:41,520
understood validator to check Behavior I

2012
01:31:41,520 --> 01:31:43,260
think is a huge net benefit to the

2013
01:31:43,260 --> 01:31:45,900
community so thank you for doing that

2014
01:31:45,900 --> 01:31:47,699
so now I want to make another comment

2015
01:31:47,699 --> 01:31:50,520
and it is a personal comment I wish you

2016
01:31:50,520 --> 01:31:52,139
to understand that this is not a

2017
01:31:52,139 --> 01:31:54,600
reflection of AP Nick and it actually is

2018
01:31:54,600 --> 01:31:56,760
not directed at you it's a comment to

2019
01:31:56,760 --> 01:31:58,800
the chairs and to the idea it's

2020
01:31:58,800 --> 01:32:00,960
something I said to Warren informally

2021
01:32:00,960 --> 01:32:03,360
over breakfast that I think should be

2022
01:32:03,360 --> 01:32:06,440
said publicly

2023
01:32:11,120 --> 01:32:16,320
in ietf in the wide is insufficiently

2024
01:32:16,320 --> 01:32:19,800
understood and I feel documented and

2025
01:32:19,800 --> 01:32:21,840
irrespective of the merits of this

2026
01:32:21,840 --> 01:32:24,060
proposal I believe

2027
01:32:24,060 --> 01:32:27,239
risks of contention and dispute around

2028
01:32:27,239 --> 01:32:30,300
how this is happen actually is a problem

2029
01:32:30,300 --> 01:32:32,580
that should be addressed and it is a

2030
01:32:32,580 --> 01:32:34,920
working group chair matter and an ID

2031
01:32:34,920 --> 01:32:37,199
matter it's not a matter about authors

2032
01:32:37,199 --> 01:32:40,320
it's about what should the ITF say is

2033
01:32:40,320 --> 01:32:42,719
how these things are done it is a

2034
01:32:42,719 --> 01:32:44,699
personal comment and it does not relate

2035
01:32:44,699 --> 01:32:46,679
to the specific work

2036
01:32:46,679 --> 01:32:49,400
thank you

2037
01:32:55,139 --> 01:32:59,540
any more questions or comments for jobs

2038
01:33:01,260 --> 01:33:05,460
yeah no one thank you Joe uh yeah final

2039
01:33:05,460 --> 01:33:08,880
sentence uh to to reiterate my goal with

2040
01:33:08,880 --> 01:33:10,920
this best document is to tie up any and

2041
01:33:10,920 --> 01:33:14,219
all Loose Ends uh so for instance

2042
01:33:14,219 --> 01:33:16,440
there's a part of the specification that

2043
01:33:16,440 --> 01:33:18,480
talks about two out of three

2044
01:33:18,480 --> 01:33:20,580
permutations with a certain data

2045
01:33:20,580 --> 01:33:22,980
structure I intend to add the third one

2046
01:33:22,980 --> 01:33:24,420
for completeness

2047
01:33:24,420 --> 01:33:27,300
uh and at some point My Hope Is that we

2048
01:33:27,300 --> 01:33:30,000
we have understood all loose ends and

2049
01:33:30,000 --> 01:33:31,920
and documented everything that must be

2050
01:33:31,920 --> 01:33:34,500
absent or present and then go for

2051
01:33:34,500 --> 01:33:36,120
working group last call

2052
01:33:36,120 --> 01:33:38,280
uh so if you want to contribute to that

2053
01:33:38,280 --> 01:33:40,440
effort please help review the document

2054
01:33:40,440 --> 01:33:43,920
as it is and uh send comments concerns

2055
01:33:43,920 --> 01:33:47,159
or paragraphs to the offers

2056
01:33:47,159 --> 01:33:49,020
thank you all

2057
01:33:49,020 --> 01:33:50,159
thank you

2058
01:33:50,159 --> 01:33:52,199
and that's a wrap

2059
01:33:52,199 --> 01:33:55,080
we will see you again in Yokohama till

2060
01:33:55,080 --> 01:33:58,100
then stay safe

2061
01:34:02,120 --> 01:34:05,120
thank you

2062
01:34:27,139 --> 01:34:30,260
thank you

2063
01:34:37,199 --> 01:34:39,739
problems

2064
01:34:41,760 --> 01:34:43,620
well

2065
01:34:43,620 --> 01:34:46,620
absolutely

2066
01:34:48,060 --> 01:34:52,580
desire to specify only what's found

2067
01:35:00,980 --> 01:35:04,860
there there are extensibility paths

2068
01:35:04,860 --> 01:35:09,599
motion and X-Files yeah

2069
01:35:24,920 --> 01:35:28,940
I will not make sense

2070
01:35:30,900 --> 01:35:33,138
foreign

2071
01:36:07,820 --> 01:36:10,639
it's hardening the system

2072
01:36:10,639 --> 01:36:14,179
in a negative

2073
01:36:14,239 --> 01:36:17,718
or that makes sense

2074
01:36:17,880 --> 01:36:19,800
that's necessary of course the Next

2075
01:36:19,800 --> 01:36:23,540
Generation every five generations now

2076
01:36:25,920 --> 01:36:29,179
and that's that's what

2077
01:36:30,719 --> 01:36:35,960
I'm unnecessarily conclusion is

2078
01:36:36,080 --> 01:36:40,340
regardless is still need to be done

2079
01:36:40,739 --> 01:36:43,739
me

2080
01:36:57,719 --> 01:37:00,500
this question is

