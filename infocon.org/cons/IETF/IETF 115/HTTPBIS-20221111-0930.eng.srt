1
00:00:06,560 --> 00:00:09,919
in that case

2
00:00:57,480 --> 00:01:00,300
okay we'll get started in

3
00:01:00,300 --> 00:01:02,039


4
00:01:02,039 --> 00:01:04,500
we'll get started in just a minute

5
00:01:04,500 --> 00:01:06,060
um we had a uh the wrong room on the

6
00:01:06,060 --> 00:01:07,439
agenda for a little while so we're just

7
00:01:07,439 --> 00:01:08,760
gonna give people an extra minute or two

8
00:01:08,760 --> 00:01:10,979
to get over here just in case they

9
00:01:10,979 --> 00:01:13,460
didn't realize

10
00:01:43,140 --> 00:01:45,680
foreign

11
00:02:15,660 --> 00:02:18,440
foreign

12
00:02:55,019 --> 00:02:57,980
foreign

13
00:03:25,500 --> 00:03:28,500
foreign

14
00:03:54,599 --> 00:03:58,620
okay let's go ahead and get started

15
00:03:58,620 --> 00:04:01,799
this is the HTTP working group

16
00:04:01,799 --> 00:04:04,200
uh I am one of your chairs Mark

17
00:04:04,200 --> 00:04:05,819
dunningham our other chair is remote

18
00:04:05,819 --> 00:04:08,839
Tommy are you with us

19
00:04:10,200 --> 00:04:13,319
ah there's Tommy hello

20
00:04:13,319 --> 00:04:15,180
I've been working on my floating head

21
00:04:15,180 --> 00:04:17,399
vibe

22
00:04:17,399 --> 00:04:18,959
you're doing well you're doing well

23
00:04:18,959 --> 00:04:22,820
thank you thank you happy Friday

24
00:04:22,860 --> 00:04:23,580
um

25
00:04:23,580 --> 00:04:25,860
so let's go ahead and get into it

26
00:04:25,860 --> 00:04:28,139
uh I I hope by this point in the week

27
00:04:28,139 --> 00:04:29,759
you're familiar with this it is the note

28
00:04:29,759 --> 00:04:32,940
well uh this is the terms and conditions

29
00:04:32,940 --> 00:04:35,400
under which we participate in the ietf

30
00:04:35,400 --> 00:04:37,919
work regarding things like intellectual

31
00:04:37,919 --> 00:04:40,919
property code of conduct uh privacy and

32
00:04:40,919 --> 00:04:43,020
so forth it is important we do take it

33
00:04:43,020 --> 00:04:44,340
seriously so if you're not familiar with

34
00:04:44,340 --> 00:04:47,160
this please do take a look at it you can

35
00:04:47,160 --> 00:04:49,620
find it using your favorite internet

36
00:04:49,620 --> 00:04:52,740
search engine with the phrase ietf note

37
00:04:52,740 --> 00:04:55,040
well

38
00:04:57,080 --> 00:05:00,540
uh just a reminder again I hope by this

39
00:05:00,540 --> 00:05:02,460
point of the week everybody's aware uh

40
00:05:02,460 --> 00:05:03,780
we do have a mask policy for this

41
00:05:03,780 --> 00:05:06,840
meeting if you are not uh speaking to

42
00:05:06,840 --> 00:05:08,759
microphone or or eating or drinking

43
00:05:08,759 --> 00:05:12,600
please uh keep a mask on and uh please

44
00:05:12,600 --> 00:05:16,139
do those things uh minimally you you

45
00:05:16,139 --> 00:05:17,580
generally don't need to take your mask

46
00:05:17,580 --> 00:05:21,320
off to talk with the mic for example

47
00:05:21,960 --> 00:05:25,820
can we have a volunteer for scribing

48
00:05:25,919 --> 00:05:28,560
what

49
00:05:28,560 --> 00:05:31,520
whoo

50
00:05:33,960 --> 00:05:37,099
any volunteers

51
00:05:39,960 --> 00:05:42,720
thank you very much uh so the link for

52
00:05:42,720 --> 00:05:45,720
the the notes is in the uh uh top of the

53
00:05:45,720 --> 00:05:48,180
agenda it's also on the agenda page for

54
00:05:48,180 --> 00:05:49,800
uh uh

55
00:05:49,800 --> 00:05:51,539
data on data tracker

56
00:05:51,539 --> 00:05:53,160
you can

57
00:05:53,160 --> 00:05:54,419
um

58
00:05:54,419 --> 00:05:56,699
go in there and edit those and if folks

59
00:05:56,699 --> 00:05:58,680
would help out with the minuteing that

60
00:05:58,680 --> 00:06:01,759
would be much appreciated

61
00:06:03,060 --> 00:06:05,720
foreign

62
00:06:05,720 --> 00:06:09,740
so our agenda for today

63
00:06:15,840 --> 00:06:19,440
that was Monday uh today we have uh done

64
00:06:19,440 --> 00:06:21,900
this bit first up is resumable uploads

65
00:06:21,900 --> 00:06:24,000
for about 25 minutes it's a relatively

66
00:06:24,000 --> 00:06:26,220
new draft for us uh then the retrofit

67
00:06:26,220 --> 00:06:27,360
draft

68
00:06:27,360 --> 00:06:29,819
and then the query draft and then we'll

69
00:06:29,819 --> 00:06:31,560
go to from our active drafts to the

70
00:06:31,560 --> 00:06:33,600
other topics uh

71
00:06:33,600 --> 00:06:36,539
David schenazi already uh presented

72
00:06:36,539 --> 00:06:40,319
unprompted auth on it was so long ago on

73
00:06:40,319 --> 00:06:41,100
Monday

74
00:06:41,100 --> 00:06:43,259
uh therefore allowing himself to sleep

75
00:06:43,259 --> 00:06:44,819
in this morning congratulations David on

76
00:06:44,819 --> 00:06:46,139
your strategy there

77
00:06:46,139 --> 00:06:48,120
uh we'll talk about or just so we'll

78
00:06:48,120 --> 00:06:49,919
skip to origin deployment

79
00:06:49,919 --> 00:06:53,100
then talk about uh modern HTTP proxies

80
00:06:53,100 --> 00:06:55,860
uh from Ben Schwartz and then finally um

81
00:06:55,860 --> 00:06:57,840
yep finally uh HP authentication with

82
00:06:57,840 --> 00:06:59,819
Sasol so we we very well may not use the

83
00:06:59,819 --> 00:07:01,740
entire slot we shall see

84
00:07:01,740 --> 00:07:05,060
any agenda bashing

85
00:07:06,240 --> 00:07:08,880
okay let's go ahead and go into it

86
00:07:08,880 --> 00:07:12,479
I'm going to attempt to use the use

87
00:07:12,479 --> 00:07:14,819
pre-loaded slide slides to although I

88
00:07:14,819 --> 00:07:17,720
should stop sharing my screen

89
00:07:23,160 --> 00:07:26,180
can folks see this

90
00:07:28,380 --> 00:07:30,300
I would say you can remote proxy it but

91
00:07:30,300 --> 00:07:33,300
we're same thing for money effects

92
00:07:33,300 --> 00:07:35,960
take it away

93
00:07:38,880 --> 00:07:41,639
thank you hello and good morning is that

94
00:07:41,639 --> 00:07:44,280
talking distance fine is that okay

95
00:07:44,280 --> 00:07:45,479
perfect

96
00:07:45,479 --> 00:07:47,099
welcome

97
00:07:47,099 --> 00:07:50,280
um to last day of ITF I'm going to talk

98
00:07:50,280 --> 00:07:52,680
a bit about resumable uploads my name is

99
00:07:52,680 --> 00:07:55,500
Mario Slidell and we've been working on

100
00:07:55,500 --> 00:07:57,840
this fairly recently only

101
00:07:57,840 --> 00:08:00,679
next slide please

102
00:08:03,419 --> 00:08:04,500
right

103
00:08:04,500 --> 00:08:06,360
um before I want to get started with

104
00:08:06,360 --> 00:08:09,660
these major issues I want to do two

105
00:08:09,660 --> 00:08:12,539
things briefly we have been working on a

106
00:08:12,539 --> 00:08:14,819
small example implementation of this in

107
00:08:14,819 --> 00:08:17,340
the last couple days I've been told the

108
00:08:17,340 --> 00:08:19,740
iitf is about running code so we provide

109
00:08:19,740 --> 00:08:21,660
running code

110
00:08:21,660 --> 00:08:23,819
um maybe Jonathan could paste the link

111
00:08:23,819 --> 00:08:27,060
to it in uh the chat so if you want to

112
00:08:27,060 --> 00:08:29,520
check it out feel free to do so it's a

113
00:08:29,520 --> 00:08:31,740
small server implementation using go and

114
00:08:31,740 --> 00:08:33,419
it demonstrates a few of the things that

115
00:08:33,419 --> 00:08:35,339
we've been thinking about and it's more

116
00:08:35,339 --> 00:08:38,219
uh intended as a proof of concept but if

117
00:08:38,219 --> 00:08:39,659
you want to take a look at it feel free

118
00:08:39,659 --> 00:08:42,539
to and leave a few comments

119
00:08:42,539 --> 00:08:44,940
other than that I would like to get

120
00:08:44,940 --> 00:08:47,580
started with a relatively brief overview

121
00:08:47,580 --> 00:08:49,920
of how resumable uploads are currently

122
00:08:49,920 --> 00:08:51,720
intended to work

123
00:08:51,720 --> 00:08:54,000
um so we all are on the same

124
00:08:54,000 --> 00:08:56,700
um on the same page about that

125
00:08:56,700 --> 00:08:58,860
um you know in HTTP we have resumable

126
00:08:58,860 --> 00:09:00,899
downloads for quite some time but not

127
00:09:00,899 --> 00:09:03,120
really a way to do resumable uploads in

128
00:09:03,120 --> 00:09:05,220
uh standardized way every vendor

129
00:09:05,220 --> 00:09:07,440
implemented on their own way but they're

130
00:09:07,440 --> 00:09:10,080
mostly conceptually always the same you

131
00:09:10,080 --> 00:09:11,820
have in the beginning and upload

132
00:09:11,820 --> 00:09:13,680
creation procedure or something where

133
00:09:13,680 --> 00:09:15,959
the client tells the server hey I want

134
00:09:15,959 --> 00:09:18,000
to do resumable file uploads

135
00:09:18,000 --> 00:09:20,399
and after that you have additional

136
00:09:20,399 --> 00:09:22,440
requests which actually transfer the

137
00:09:22,440 --> 00:09:24,959
data in our case we call that the upload

138
00:09:24,959 --> 00:09:27,360
appending procedure because an upload is

139
00:09:27,360 --> 00:09:30,300
basically an appending file that you

140
00:09:30,300 --> 00:09:32,700
only push data to but never right at

141
00:09:32,700 --> 00:09:34,680
different offsets

142
00:09:34,680 --> 00:09:37,440
there's also the offset retrieving

143
00:09:37,440 --> 00:09:39,480
procedure so whenever the

144
00:09:39,480 --> 00:09:41,459
upload connection gets interrupted or

145
00:09:41,459 --> 00:09:43,140
the user pauses and you want to restart

146
00:09:43,140 --> 00:09:45,600
the upload or not restart but resume the

147
00:09:45,600 --> 00:09:47,760
upload you want to know how much data

148
00:09:47,760 --> 00:09:49,800
the server has received so you can use

149
00:09:49,800 --> 00:09:52,260
the upload the offset retrieving

150
00:09:52,260 --> 00:09:54,420
procedure to query the server hey how

151
00:09:54,420 --> 00:09:56,279
much data do you have what else do I

152
00:09:56,279 --> 00:09:57,959
have to send you

153
00:09:57,959 --> 00:10:00,600
and that's basically the flow of

154
00:10:00,600 --> 00:10:03,000
resumable uploads

155
00:10:03,000 --> 00:10:05,220
um how we've been currently written it

156
00:10:05,220 --> 00:10:07,980
down in the draft however there's still

157
00:10:07,980 --> 00:10:11,220
a few major issues that have to be

158
00:10:11,220 --> 00:10:13,440
discussed these are mainly these four

159
00:10:13,440 --> 00:10:15,060
there are a few more others but I think

160
00:10:15,060 --> 00:10:16,980
these are the most important ones and if

161
00:10:16,980 --> 00:10:18,839
we can get some feedback or some

162
00:10:18,839 --> 00:10:20,640
agreement about these that would be a

163
00:10:20,640 --> 00:10:23,160
really great outcome

164
00:10:23,160 --> 00:10:24,660
I think I want to go through these

165
00:10:24,660 --> 00:10:27,180
individually present them on a slide and

166
00:10:27,180 --> 00:10:28,680
then if there's some feedback we can

167
00:10:28,680 --> 00:10:30,899
discuss it directly before moving to the

168
00:10:30,899 --> 00:10:32,160
next issue

169
00:10:32,160 --> 00:10:35,600
so please next slide

170
00:10:35,880 --> 00:10:38,700
the first one is the most major one it's

171
00:10:38,700 --> 00:10:41,040
about server generated URLs versus

172
00:10:41,040 --> 00:10:42,899
client generated token

173
00:10:42,899 --> 00:10:46,740
the question at hand here is how do we

174
00:10:46,740 --> 00:10:49,140
identify the uploads what approach do we

175
00:10:49,140 --> 00:10:51,899
use the current draft uses client

176
00:10:51,899 --> 00:10:54,240
generated tokens that means the client

177
00:10:54,240 --> 00:10:56,519
it generates a token on the client side

178
00:10:56,519 --> 00:10:59,220
and then includes this token in every

179
00:10:59,220 --> 00:11:01,079
request that it sends to the server

180
00:11:01,079 --> 00:11:03,000
regarding this upload

181
00:11:03,000 --> 00:11:04,920
we currently use the upload token header

182
00:11:04,920 --> 00:11:05,880
for that

183
00:11:05,880 --> 00:11:07,500
and that's

184
00:11:07,500 --> 00:11:10,620
offers a few benefits namely that you

185
00:11:10,620 --> 00:11:12,060
can

186
00:11:12,060 --> 00:11:14,459
you can always retry the request because

187
00:11:14,459 --> 00:11:16,740
the client always has the ID of the

188
00:11:16,740 --> 00:11:18,660
upload so it can always associate it

189
00:11:18,660 --> 00:11:20,100
with that

190
00:11:20,100 --> 00:11:21,480
um but on the other hand it of course

191
00:11:21,480 --> 00:11:23,160
breaks a bit with the standard

192
00:11:23,160 --> 00:11:25,380
procedures that we have in HTTP the

193
00:11:25,380 --> 00:11:27,600
server is not able to influence this ID

194
00:11:27,600 --> 00:11:30,180
it only has to take care of the upload

195
00:11:30,180 --> 00:11:32,459
token that it's escaping

196
00:11:32,459 --> 00:11:34,920
so there's been valid criticism of this

197
00:11:34,920 --> 00:11:37,680
approach of these upload tokens and

198
00:11:37,680 --> 00:11:39,600
therefore we have a proposal at hand to

199
00:11:39,600 --> 00:11:42,120
use a server generated upload euros

200
00:11:42,120 --> 00:11:44,760
the way down this different is different

201
00:11:44,760 --> 00:11:47,700
is that the client during the upload

202
00:11:47,700 --> 00:11:49,380
creation procedures as to the client a

203
00:11:49,380 --> 00:11:51,420
server hey I want to do resumable

204
00:11:51,420 --> 00:11:55,019
uploads please give me a URL where I can

205
00:11:55,019 --> 00:11:57,360
push my data to and that's basically

206
00:11:57,360 --> 00:11:58,740
what the server does

207
00:11:58,740 --> 00:12:01,380
so the server responds with the upload

208
00:12:01,380 --> 00:12:02,519
URL

209
00:12:02,519 --> 00:12:04,800
um in in two ways it can send it using

210
00:12:04,800 --> 00:12:07,560
an 1xx informational response

211
00:12:07,560 --> 00:12:09,600
that's really great to send it to the

212
00:12:09,600 --> 00:12:11,820
client as soon as possible

213
00:12:11,820 --> 00:12:14,940
and it also includes it in a 2X response

214
00:12:14,940 --> 00:12:17,519
because the thing is that in the upload

215
00:12:17,519 --> 00:12:19,380
creation procedure it would also be

216
00:12:19,380 --> 00:12:20,940
great if you already could include some

217
00:12:20,940 --> 00:12:21,980
data

218
00:12:21,980 --> 00:12:24,959
to minimize the amount of round trips

219
00:12:24,959 --> 00:12:27,180
that you have to do

220
00:12:27,180 --> 00:12:28,620
the

221
00:12:28,620 --> 00:12:31,920
the thing with server generated URLs is

222
00:12:31,920 --> 00:12:34,680
that if we use another element the item

223
00:12:34,680 --> 00:12:36,060
potency key which I'm going to talk

224
00:12:36,060 --> 00:12:38,160
about on the next slide we can achieve

225
00:12:38,160 --> 00:12:40,140
pretty much the same results as with the

226
00:12:40,140 --> 00:12:43,380
client generated upload token namely

227
00:12:43,380 --> 00:12:45,899
that's we have a lot of repriability and

228
00:12:45,899 --> 00:12:47,459
we can upload small files in a sync

229
00:12:47,459 --> 00:12:48,779
request

230
00:12:48,779 --> 00:12:50,880
that's only a brief overview of this

231
00:12:50,880 --> 00:12:52,380
entire discussion

232
00:12:52,380 --> 00:12:54,600
um and now this is kind of the question

233
00:12:54,600 --> 00:12:56,220
to the audience

234
00:12:56,220 --> 00:12:58,620
what do we prefer do we want to use

235
00:12:58,620 --> 00:13:01,200
client generated upload tokens do we

236
00:13:01,200 --> 00:13:03,779
want to use server generated urls

237
00:13:03,779 --> 00:13:05,760
maybe both

238
00:13:05,760 --> 00:13:07,920
so that's that's the point where any

239
00:13:07,920 --> 00:13:10,579
feedback is welcome

240
00:13:11,399 --> 00:13:13,920
any response in the working group oh I

241
00:13:13,920 --> 00:13:16,639
see kazuho

242
00:13:23,880 --> 00:13:26,700
uh first I actually have a question

243
00:13:26,700 --> 00:13:29,160
regarding this house light it says uh

244
00:13:29,160 --> 00:13:31,680
server generated URL versus quadrate

245
00:13:31,680 --> 00:13:33,180
tokens before you go quickly the

246
00:13:33,180 --> 00:13:35,940
original title was between the tokens

247
00:13:35,940 --> 00:13:39,120
versus clients General tokens so did it

248
00:13:39,120 --> 00:13:41,579
change I mean did the discussion change

249
00:13:41,579 --> 00:13:43,440
recently

250
00:13:43,440 --> 00:13:45,420
um you mean about server generated

251
00:13:45,420 --> 00:13:47,899
tokens

252
00:13:53,459 --> 00:13:54,959
it's probably about server generated

253
00:13:54,959 --> 00:13:57,360
tokens being embedded in the URL or

254
00:13:57,360 --> 00:13:58,740
rather than a header field or somewhere

255
00:13:58,740 --> 00:14:00,000
else

256
00:14:00,000 --> 00:14:03,120
versus Cloud generated tokens or yeah

257
00:14:03,120 --> 00:14:04,320
the idea would be that the server

258
00:14:04,320 --> 00:14:06,120
generates a URL

259
00:14:06,120 --> 00:14:08,339
um and that would encode some kind of

260
00:14:08,339 --> 00:14:09,600
token

261
00:14:09,600 --> 00:14:11,339
so it's

262
00:14:11,339 --> 00:14:13,680
all right thank you very much so I think

263
00:14:13,680 --> 00:14:16,079
my comment uh regarding this discussion

264
00:14:16,079 --> 00:14:18,180
in general would be that I prefer server

265
00:14:18,180 --> 00:14:21,660
generated tokens because uh but client

266
00:14:21,660 --> 00:14:23,459
Engineers are talking there this is like

267
00:14:23,459 --> 00:14:24,839
conflicts for example

268
00:14:24,839 --> 00:14:28,320
and regarding how we embed the subject

269
00:14:28,320 --> 00:14:30,360
token I think there has to be a

270
00:14:30,360 --> 00:14:33,839
discussion between whether it should be

271
00:14:33,839 --> 00:14:37,380
part of the URL I mean like like a

272
00:14:37,380 --> 00:14:39,000
restful model where you create a

273
00:14:39,000 --> 00:14:42,060
temporary URL to which you push data on

274
00:14:42,060 --> 00:14:43,920
the comment versus

275
00:14:43,920 --> 00:14:46,860
if possessive creating a versus you

276
00:14:46,860 --> 00:14:49,620
sending the ID in the request header

277
00:14:49,620 --> 00:14:53,519
field and thereby doing it below the

278
00:14:53,519 --> 00:14:55,800
restful layer so I think they're the

279
00:14:55,800 --> 00:14:57,899
philosophical decision in there I don't

280
00:14:57,899 --> 00:14:59,940
have a strong opinion yeah man it can be

281
00:14:59,940 --> 00:15:00,959
implemented

282
00:15:00,959 --> 00:15:02,459
so I hope that there will be

283
00:15:02,459 --> 00:15:03,779
classification regarding that point as

284
00:15:03,779 --> 00:15:05,459
well

285
00:15:05,459 --> 00:15:07,459
okay thanks guys

286
00:15:07,459 --> 00:15:10,800
uh Jonathan

287
00:15:10,800 --> 00:15:12,779
hi Jonathan flat Apple

288
00:15:12,779 --> 00:15:14,279
um thanks Maurice for the great work in

289
00:15:14,279 --> 00:15:17,339
this and uh it's really exciting to see

290
00:15:17,339 --> 00:15:19,620
um I was originally on team client

291
00:15:19,620 --> 00:15:22,800
generated token for the reason of being

292
00:15:22,800 --> 00:15:24,600
able to send all of the data in the

293
00:15:24,600 --> 00:15:28,260
first HTTP request and being able to

294
00:15:28,260 --> 00:15:29,880
easily fall back if the server doesn't

295
00:15:29,880 --> 00:15:33,660
support it but I think I see that

296
00:15:33,660 --> 00:15:36,120
there's great benefit and still using

297
00:15:36,120 --> 00:15:38,820
these server generated URLs uh as long

298
00:15:38,820 --> 00:15:42,540
as we have those 1xx responses to kind

299
00:15:42,540 --> 00:15:44,940
of convey support

300
00:15:44,940 --> 00:15:47,040
um and so

301
00:15:47,040 --> 00:15:49,380
I definitely uh support this

302
00:15:49,380 --> 00:15:51,480
implementation with the server generated

303
00:15:51,480 --> 00:15:53,880
URLs I also think it's

304
00:15:53,880 --> 00:15:57,480
um a little bit more like HTTP

305
00:15:57,480 --> 00:16:00,420
um getting that like location URL and

306
00:16:00,420 --> 00:16:03,420
then using that uh as provided by the

307
00:16:03,420 --> 00:16:05,399
server um to contact it again if you

308
00:16:05,399 --> 00:16:08,100
need to resume so uh overall I support

309
00:16:08,100 --> 00:16:10,459
thanks

310
00:16:10,860 --> 00:16:14,300
thank you 10.

311
00:16:23,880 --> 00:16:25,040
foreign

312
00:16:25,040 --> 00:16:27,240
thanks for the the work it's interesting

313
00:16:27,240 --> 00:16:29,399
and I think this is a a useful question

314
00:16:29,399 --> 00:16:32,160
I I was a little confused though about

315
00:16:32,160 --> 00:16:34,199
how this would interact in your mind

316
00:16:34,199 --> 00:16:37,079
with things like e-text uh because it

317
00:16:37,079 --> 00:16:38,459
turns out that if you're creating new

318
00:16:38,459 --> 00:16:41,100
URLs you're in essence minting new etag

319
00:16:41,100 --> 00:16:42,180
spaces

320
00:16:42,180 --> 00:16:43,500
and

321
00:16:43,500 --> 00:16:44,940
um when I was looking at this and trying

322
00:16:44,940 --> 00:16:48,180
to model in my head how the the fetch

323
00:16:48,180 --> 00:16:49,680
portion of this if you're fetching an

324
00:16:49,680 --> 00:16:51,720
offset to after an upload was going to

325
00:16:51,720 --> 00:16:53,639
work whether you intended to use those

326
00:16:53,639 --> 00:16:57,540
at all because if you do then I think I

327
00:16:57,540 --> 00:17:01,079
prefer the server generated upload urls

328
00:17:01,079 --> 00:17:02,639
um but if you're not then I think the

329
00:17:02,639 --> 00:17:04,380
client generated token is equally good

330
00:17:04,380 --> 00:17:06,240
and I don't have an opinion so I

331
00:17:06,240 --> 00:17:08,459
wondered how you were modeling those

332
00:17:08,459 --> 00:17:10,619
especially in in relation to this and to

333
00:17:10,619 --> 00:17:13,400
the item potency keys

334
00:17:13,400 --> 00:17:18,000
is it about e-tax yes okay um so to be

335
00:17:18,000 --> 00:17:20,640
honest we haven't considered e-text that

336
00:17:20,640 --> 00:17:22,319
much yet

337
00:17:22,319 --> 00:17:23,760
um

338
00:17:23,760 --> 00:17:25,140
I

339
00:17:25,140 --> 00:17:26,339
think

340
00:17:26,339 --> 00:17:29,220
Dot e-tags

341
00:17:29,220 --> 00:17:31,140
yeah I don't think I can provide the

342
00:17:31,140 --> 00:17:33,780
answer for that yet okay so I uh let me

343
00:17:33,780 --> 00:17:36,900
just say then that if you do do the

344
00:17:36,900 --> 00:17:39,720
server generated upload URLs every time

345
00:17:39,720 --> 00:17:41,880
you do one of these fetches to see

346
00:17:41,880 --> 00:17:44,340
whether the client and the server have

347
00:17:44,340 --> 00:17:47,580
the same sense of the offset you are if

348
00:17:47,580 --> 00:17:49,320
you use e-tags at all you're generating

349
00:17:49,320 --> 00:17:52,140
a new etag space because it's a new URL

350
00:17:52,140 --> 00:17:54,179
that's I think you might want to keep

351
00:17:54,179 --> 00:17:55,440
that in mind

352
00:17:55,440 --> 00:17:58,260
um as you consider this

353
00:17:58,260 --> 00:17:59,580
um maybe

354
00:17:59,580 --> 00:18:01,740
um just if I honestly correctly the

355
00:18:01,740 --> 00:18:04,620
server generated URL won't change during

356
00:18:04,620 --> 00:18:05,820
the upload

357
00:18:05,820 --> 00:18:10,260
so even if you make a request to

358
00:18:10,260 --> 00:18:11,880
retrieve the offset the URL would still

359
00:18:11,880 --> 00:18:13,080
stay the same

360
00:18:13,080 --> 00:18:15,780
uh 10 30 again uh

361
00:18:15,780 --> 00:18:18,320
the

362
00:18:19,080 --> 00:18:21,419
if if you've never changed the upload

363
00:18:21,419 --> 00:18:24,720
URLs in the course of this

364
00:18:24,720 --> 00:18:25,380
um

365
00:18:25,380 --> 00:18:27,419
you you do simplify things but I think

366
00:18:27,419 --> 00:18:28,799
you actually lose some of the power of

367
00:18:28,799 --> 00:18:31,200
that approach okay

368
00:18:31,200 --> 00:18:34,580
yeah let's talk about this later

369
00:18:34,620 --> 00:18:37,860
Martin son I was just going to get up to

370
00:18:37,860 --> 00:18:39,539
say plus one to all the other people I

371
00:18:39,539 --> 00:18:41,460
think because of host Point

372
00:18:41,460 --> 00:18:44,280
um about whether this is just a token or

373
00:18:44,280 --> 00:18:49,620
a URL is fine pertinent but um in in

374
00:18:49,620 --> 00:18:51,059
thinking about Ted's question I think

375
00:18:51,059 --> 00:18:53,220
it's probably I probably lean more

376
00:18:53,220 --> 00:18:54,840
towards the URL

377
00:18:54,840 --> 00:18:56,640
that's how kind of how we identify

378
00:18:56,640 --> 00:18:58,380
things in http

379
00:18:58,380 --> 00:18:59,940
and

380
00:18:59,940 --> 00:19:01,679
um maybe I can help with Ted's question

381
00:19:01,679 --> 00:19:03,360
I don't know if this is the right way of

382
00:19:03,360 --> 00:19:05,160
thinking about this one but

383
00:19:05,160 --> 00:19:05,820
um

384
00:19:05,820 --> 00:19:07,559
when you when you make an initial

385
00:19:07,559 --> 00:19:09,720
request to do an upload

386
00:19:09,720 --> 00:19:12,179
you you do that to a particular resource

387
00:19:12,179 --> 00:19:13,919
and you may have some intent with

388
00:19:13,919 --> 00:19:15,600
respect to that resource and there may

389
00:19:15,600 --> 00:19:17,039
be some somatics associated with that

390
00:19:17,039 --> 00:19:19,080
one for instance if you're doing a put

391
00:19:19,080 --> 00:19:20,940
on that resource and you're effectively

392
00:19:20,940 --> 00:19:23,880
looking to replace the existing

393
00:19:23,880 --> 00:19:25,760
representation with a with a new

394
00:19:25,760 --> 00:19:28,380
obviously large thing

395
00:19:28,380 --> 00:19:30,539
the content of that resource is

396
00:19:30,539 --> 00:19:32,160
ultimately going to change once the

397
00:19:32,160 --> 00:19:34,799
entire process is done

398
00:19:34,799 --> 00:19:36,900
until that process is done it's probably

399
00:19:36,900 --> 00:19:39,120
not going to change and you'll

400
00:19:39,120 --> 00:19:40,620
essentially have a transaction that's

401
00:19:40,620 --> 00:19:42,840
outstanding and what you're doing by

402
00:19:42,840 --> 00:19:46,320
providing this upload URL is identifying

403
00:19:46,320 --> 00:19:50,100
with a URL the transaction that you're

404
00:19:50,100 --> 00:19:51,780
conducting with respect to the original

405
00:19:51,780 --> 00:19:53,100
resource

406
00:19:53,100 --> 00:19:55,020
it is a little different

407
00:19:55,020 --> 00:19:57,360
when you're talking about a resource

408
00:19:57,360 --> 00:19:59,280
that accepts posts or something like

409
00:19:59,280 --> 00:20:00,780
that and you're and you're trying to

410
00:20:00,780 --> 00:20:01,679
provide

411
00:20:01,679 --> 00:20:03,240
uh

412
00:20:03,240 --> 00:20:04,799
we can put you in queue tab but don't

413
00:20:04,799 --> 00:20:07,160
don't know

414
00:20:07,200 --> 00:20:10,380
um let's not stand on ceremony

415
00:20:10,380 --> 00:20:11,520
it's a little different when you're

416
00:20:11,520 --> 00:20:13,260
talking about a post where essentially

417
00:20:13,260 --> 00:20:15,360
you are always sort of creating a

418
00:20:15,360 --> 00:20:17,580
transaction that may not necessarily

419
00:20:17,580 --> 00:20:19,080
change the state of the resource it may

420
00:20:19,080 --> 00:20:21,120
just do some other things related to it

421
00:20:21,120 --> 00:20:23,640
my correct other resources for instance

422
00:20:23,640 --> 00:20:25,559
if you're if you're thinking about the

423
00:20:25,559 --> 00:20:28,140
case where you you post to a resource in

424
00:20:28,140 --> 00:20:31,679
order to create another resource and so

425
00:20:31,679 --> 00:20:34,260
I I think

426
00:20:34,260 --> 00:20:37,200
when you map all of these things out the

427
00:20:37,200 --> 00:20:39,360
the ultimate effect of all of these is

428
00:20:39,360 --> 00:20:41,360
is simply that you you just have a new

429
00:20:41,360 --> 00:20:43,740
resource that's that's tracking the

430
00:20:43,740 --> 00:20:45,179
transaction

431
00:20:45,179 --> 00:20:46,740
and and that's the thing that you're

432
00:20:46,740 --> 00:20:47,940
going to interact with when you're

433
00:20:47,940 --> 00:20:50,340
talking about how far am i through the

434
00:20:50,340 --> 00:20:52,500
through the upload how much what what

435
00:20:52,500 --> 00:20:54,780
data do you have how do I add extra

436
00:20:54,780 --> 00:20:56,880
things when I come back to it later on

437
00:20:56,880 --> 00:20:59,220
and I I think to Ted's questions about

438
00:20:59,220 --> 00:21:01,260
e-tags but that resource potentially has

439
00:21:01,260 --> 00:21:03,419
some it has some implications for

440
00:21:03,419 --> 00:21:05,100
etonics but I don't think that we're

441
00:21:05,100 --> 00:21:07,500
looking to really

442
00:21:07,500 --> 00:21:09,600
provide all of the sort of caching

443
00:21:09,600 --> 00:21:11,700
semantics on that resource other than

444
00:21:11,700 --> 00:21:13,860
just to say that it's a thing that we

445
00:21:13,860 --> 00:21:16,440
that has has this

446
00:21:16,440 --> 00:21:19,400
upload offset state

447
00:21:19,760 --> 00:21:22,260
uh Ted Hardy apologies for not being in

448
00:21:22,260 --> 00:21:23,280
the queue

449
00:21:23,280 --> 00:21:25,140
um that that was very helpful but I

450
00:21:25,140 --> 00:21:25,980
think

451
00:21:25,980 --> 00:21:27,900
um one of the things I've been wondering

452
00:21:27,900 --> 00:21:30,240
about with this is obviously I'm also

453
00:21:30,240 --> 00:21:32,700
involved in moq uh is how this would

454
00:21:32,700 --> 00:21:34,559
interact with the kinds of resources

455
00:21:34,559 --> 00:21:37,919
where somebody is posting to a resource

456
00:21:37,919 --> 00:21:40,200
in order to populate it and other people

457
00:21:40,200 --> 00:21:43,260
begin having access to that resource

458
00:21:43,260 --> 00:21:47,760
before the first resource is complete

459
00:21:47,760 --> 00:21:49,620
um and obviously for certain kinds of

460
00:21:49,620 --> 00:21:51,179
media that's going to be a big thing

461
00:21:51,179 --> 00:21:52,380
right

462
00:21:52,380 --> 00:21:55,200
um and so that's partly why I'm thinking

463
00:21:55,200 --> 00:21:56,760
about whether or not you're going to

464
00:21:56,760 --> 00:21:58,559
change URLs and whether or not those

465
00:21:58,559 --> 00:22:02,159
URLs have uh specific entity tags in

466
00:22:02,159 --> 00:22:05,940
that context so I think uh for your uh

467
00:22:05,940 --> 00:22:07,860
replacement thing I'm totally on board

468
00:22:07,860 --> 00:22:10,679
exactly what you said yeah um but for

469
00:22:10,679 --> 00:22:13,140
posting resources especially that don't

470
00:22:13,140 --> 00:22:16,440
have a defined completion at the

471
00:22:16,440 --> 00:22:18,720
beginning of the posting you may find

472
00:22:18,720 --> 00:22:20,280
that there's a little bit more power if

473
00:22:20,280 --> 00:22:22,740
you take the other approach and do give

474
00:22:22,740 --> 00:22:23,820
them

475
00:22:23,820 --> 00:22:25,860
um sort of an entity tagged view of it

476
00:22:25,860 --> 00:22:28,740
because then the the person posting can

477
00:22:28,740 --> 00:22:31,200
know what the other clients have access

478
00:22:31,200 --> 00:22:33,600
to

479
00:22:33,600 --> 00:22:37,380
um uh at that point does that make sense

480
00:22:37,380 --> 00:22:38,760
like yeah so I get where you're coming

481
00:22:38,760 --> 00:22:40,080
from Ted I think this is a really

482
00:22:40,080 --> 00:22:42,419
interesting question

483
00:22:42,419 --> 00:22:44,100
um but I don't think it's fundamentally

484
00:22:44,100 --> 00:22:46,380
any different to the scenario where you

485
00:22:46,380 --> 00:22:47,760
have a resource that's changing

486
00:22:47,760 --> 00:22:50,640
currently so there's a lot of

487
00:22:50,640 --> 00:22:51,299
um

488
00:22:51,299 --> 00:22:53,760
for instance live TV streaming uh

489
00:22:53,760 --> 00:22:55,620
scenarios where you use something like

490
00:22:55,620 --> 00:22:58,980
hls or Dash to

491
00:22:58,980 --> 00:23:01,799
uh access a resource that is usually

492
00:23:01,799 --> 00:23:04,500
sort of framed as I have a sort of a

493
00:23:04,500 --> 00:23:06,059
manifest resource that tells me about

494
00:23:06,059 --> 00:23:07,679
little chunks of information that I can

495
00:23:07,679 --> 00:23:10,980
get and that continuously updates

496
00:23:10,980 --> 00:23:13,440
um there the the

497
00:23:13,440 --> 00:23:15,240
um the structure of the system is what

498
00:23:15,240 --> 00:23:16,740
is you have

499
00:23:16,740 --> 00:23:18,059
um the main resource which is

500
00:23:18,059 --> 00:23:19,559
essentially continuously changing which

501
00:23:19,559 --> 00:23:22,500
contains this manifest and the caching

502
00:23:22,500 --> 00:23:24,059
semantics on that one are essentially

503
00:23:24,059 --> 00:23:26,460
just busted you you don't cache that

504
00:23:26,460 --> 00:23:27,480
thing

505
00:23:27,480 --> 00:23:29,340
the chunks that you're pulling down each

506
00:23:29,340 --> 00:23:31,740
have their own identity and and e-tags

507
00:23:31,740 --> 00:23:33,539
and caching semantics then can be pulled

508
00:23:33,539 --> 00:23:36,120
down independently uh although that does

509
00:23:36,120 --> 00:23:37,799
potentially change in some of the live

510
00:23:37,799 --> 00:23:39,240
broadcast scenarios where you talk about

511
00:23:39,240 --> 00:23:41,100
resizing chunks and all sorts of other

512
00:23:41,100 --> 00:23:45,120
things so I don't think we're inventing

513
00:23:45,120 --> 00:23:46,799
a new problem here I think we're just

514
00:23:46,799 --> 00:23:49,440
sort of in this in the space where the

515
00:23:49,440 --> 00:23:51,179
existing problems that we have in resp

516
00:23:51,179 --> 00:23:53,340
with respect to resources that change

517
00:23:53,340 --> 00:23:55,159
continuously like this

518
00:23:55,159 --> 00:23:58,740
a little bit awkward anyway

519
00:23:58,740 --> 00:24:01,860
so Jonathan Jonathan

520
00:24:01,860 --> 00:24:03,720
hi Jonathan fine

521
00:24:03,720 --> 00:24:06,120
um I think something that isn't

522
00:24:06,120 --> 00:24:07,620
mentioned here and may be mentioned is

523
00:24:07,620 --> 00:24:09,840
like a a minor thing towards the end of

524
00:24:09,840 --> 00:24:12,000
the slides if I remember correctly is

525
00:24:12,000 --> 00:24:15,600
um the potential for intermittent 1xx

526
00:24:15,600 --> 00:24:16,799
responses

527
00:24:16,799 --> 00:24:19,559
um kind of like something that a client

528
00:24:19,559 --> 00:24:21,900
may get over time sort of like a

529
00:24:21,900 --> 00:24:23,700
progress uh indicator and I was

530
00:24:23,700 --> 00:24:25,919
wondering if anyone had uh

531
00:24:25,919 --> 00:24:28,260
considerations on that maybe even for

532
00:24:28,260 --> 00:24:30,179
this purpose of uh

533
00:24:30,179 --> 00:24:32,880
of e-tags or being able to

534
00:24:32,880 --> 00:24:33,919
um

535
00:24:33,919 --> 00:24:36,179
demarcate those resources as they're

536
00:24:36,179 --> 00:24:38,700
being uploaded if other clients are

537
00:24:38,700 --> 00:24:41,640
accessing them thanks

538
00:24:41,640 --> 00:24:44,640
thanks and and I got onto queue just to

539
00:24:44,640 --> 00:24:46,880
I think I've I've brought this up before

540
00:24:46,880 --> 00:24:49,559
but we should remember that you know if

541
00:24:49,559 --> 00:24:50,580
we're trying to create a generic

542
00:24:50,580 --> 00:24:53,340
facility for HTTP we don't necessarily

543
00:24:53,340 --> 00:24:55,919
have to choose one here we could do both

544
00:24:55,919 --> 00:24:59,100
um and and you know it's it's very easy

545
00:24:59,100 --> 00:25:00,419
to fall into the thinking that oh we

546
00:25:00,419 --> 00:25:01,799
want you know High interoperability so

547
00:25:01,799 --> 00:25:03,539
we just should specify one way to do it

548
00:25:03,539 --> 00:25:06,000
but you know it is also HTTP is a very

549
00:25:06,000 --> 00:25:07,440
generic protocol and so we should

550
00:25:07,440 --> 00:25:09,240
accommodate lots of different kind of

551
00:25:09,240 --> 00:25:11,640
use cases and if we find that there are

552
00:25:11,640 --> 00:25:13,080
valid use cases that require both

553
00:25:13,080 --> 00:25:14,640
patterns that's something we should

554
00:25:14,640 --> 00:25:17,580
consider I think personally

555
00:25:17,580 --> 00:25:18,179
um

556
00:25:18,179 --> 00:25:20,720
Hans

557
00:25:24,840 --> 00:25:26,880
so this is Hunter Kabul um find

558
00:25:26,880 --> 00:25:29,039
migration Enthusiast um

559
00:25:29,039 --> 00:25:31,740
I very much like this kind of proposal

560
00:25:31,740 --> 00:25:33,059
so I think that's something really

561
00:25:33,059 --> 00:25:34,559
needed

562
00:25:34,559 --> 00:25:37,260
um I try to think a little bit and see a

563
00:25:37,260 --> 00:25:38,520
little bit in my information if I would

564
00:25:38,520 --> 00:25:40,140
have a preference on this

565
00:25:40,140 --> 00:25:42,179
um probably my gut feeling would also be

566
00:25:42,179 --> 00:25:44,400
for Server generated URLs I found one

567
00:25:44,400 --> 00:25:46,200
scenario in which probably client

568
00:25:46,200 --> 00:25:49,200
generated URLs would be helpful which is

569
00:25:49,200 --> 00:25:51,480
sort of I found ruled out in the

570
00:25:51,480 --> 00:25:53,760
proposal which is a parallel upload so

571
00:25:53,760 --> 00:25:56,340
there might be scenarios in which

572
00:25:56,340 --> 00:25:58,500
um you have multiple clients

573
00:25:58,500 --> 00:25:59,159
um

574
00:25:59,159 --> 00:26:01,740
that won't be able to receive the ID

575
00:26:01,740 --> 00:26:03,779
given by a server

576
00:26:03,779 --> 00:26:06,179
so I wonder I wanted to ask it later but

577
00:26:06,179 --> 00:26:07,980
maybe it fits in you know why parallel

578
00:26:07,980 --> 00:26:10,200
uploads are ruled out there

579
00:26:10,200 --> 00:26:11,820
parallel uploads is a really good thing

580
00:26:11,820 --> 00:26:13,679
a good point

581
00:26:13,679 --> 00:26:16,080
um the draft currently does not consider

582
00:26:16,080 --> 00:26:18,720
them to keep it a bit more like simple

583
00:26:18,720 --> 00:26:22,039
for the first thing

584
00:26:22,140 --> 00:26:25,460
parallel uploads we have been

585
00:26:25,460 --> 00:26:27,299
experimenting with them in production

586
00:26:27,299 --> 00:26:29,700
and people are kind of split about them

587
00:26:29,700 --> 00:26:31,440
some say yeah it's good some say it's

588
00:26:31,440 --> 00:26:33,179
not that good

589
00:26:33,179 --> 00:26:34,740
um so for now we have decided to like

590
00:26:34,740 --> 00:26:36,600
keep it out but it's a really good point

591
00:26:36,600 --> 00:26:38,159
if people are interested in doing

592
00:26:38,159 --> 00:26:40,380
parallel uploads to utilize more

593
00:26:40,380 --> 00:26:41,940
bandwidth or upload from different

594
00:26:41,940 --> 00:26:43,380
machines

595
00:26:43,380 --> 00:26:45,179
um then that is definitely something to

596
00:26:45,179 --> 00:26:47,760
be considered but right now it's not yet

597
00:26:47,760 --> 00:26:50,360
included

598
00:26:51,179 --> 00:26:53,220
Martin and then we should probably yeah

599
00:26:53,220 --> 00:26:54,900
yeah

600
00:26:54,900 --> 00:26:56,039
um I'm just going to say parallel

601
00:26:56,039 --> 00:26:58,260
uploads yeah is kind of orthogonal to

602
00:26:58,260 --> 00:26:59,820
this question if you do something like

603
00:26:59,820 --> 00:27:01,340
this you can potentially support

604
00:27:01,340 --> 00:27:04,740
parallel uploads Maybe not immediately

605
00:27:04,740 --> 00:27:06,779
but uh certainly after a round trip

606
00:27:06,779 --> 00:27:08,940
which I don't think is a particular

607
00:27:08,940 --> 00:27:10,679
problem if you're talking about the need

608
00:27:10,679 --> 00:27:14,100
to upload in parallel at high volume so

609
00:27:14,100 --> 00:27:15,679
I think we'll probably talk about that

610
00:27:15,679 --> 00:27:18,419
in another context it's it's more of the

611
00:27:18,419 --> 00:27:20,700
status check that gets complicated when

612
00:27:20,700 --> 00:27:22,200
you're doing parallel uploads because

613
00:27:22,200 --> 00:27:23,580
now you have multiple chunks of

614
00:27:23,580 --> 00:27:25,320
different offsets with gaps in between

615
00:27:25,320 --> 00:27:27,620
each

616
00:27:30,299 --> 00:27:33,000
okay so it sounds like there's support

617
00:27:33,000 --> 00:27:35,159
for Server generated maybe a little more

618
00:27:35,159 --> 00:27:36,840
discussion on list and then yeah yeah

619
00:27:36,840 --> 00:27:39,419
definitely definitely yeah thank you all

620
00:27:39,419 --> 00:27:41,400
for that feedback already let's go to

621
00:27:41,400 --> 00:27:44,000
the next slide

622
00:27:44,039 --> 00:27:46,080
um so this

623
00:27:46,080 --> 00:27:47,520
um

624
00:27:47,520 --> 00:27:50,820
the another issue that we have is that

625
00:27:50,820 --> 00:27:53,240
the upload creation procedure

626
00:27:53,240 --> 00:27:56,520
is not item potent meaning if the client

627
00:27:56,520 --> 00:27:58,140
does not receive the response for the

628
00:27:58,140 --> 00:28:00,419
upload creation procedure

629
00:28:00,419 --> 00:28:02,880
and uh oh okay maybe I'll be back

630
00:28:02,880 --> 00:28:04,919
assuming we go with server generated

631
00:28:04,919 --> 00:28:06,179
urls

632
00:28:06,179 --> 00:28:08,580
with client tokens this would be a bit

633
00:28:08,580 --> 00:28:11,039
different issue the problem is if the

634
00:28:11,039 --> 00:28:13,140
client does not receive the response for

635
00:28:13,140 --> 00:28:15,299
the upload creation procedure it doesn't

636
00:28:15,299 --> 00:28:17,460
have an upload URL it doesn't have an

637
00:28:17,460 --> 00:28:19,679
upload token so it doesn't know what to

638
00:28:19,679 --> 00:28:22,200
do next where do I resume this upload

639
00:28:22,200 --> 00:28:23,940
now in theory we could say okay just

640
00:28:23,940 --> 00:28:26,640
retry the request but that causes

641
00:28:26,640 --> 00:28:28,740
problem because that might

642
00:28:28,740 --> 00:28:31,320
result in duplicate upload resources on

643
00:28:31,320 --> 00:28:32,760
the server and depending on your

644
00:28:32,760 --> 00:28:34,140
business logic this is something that

645
00:28:34,140 --> 00:28:36,779
you might want to avoid where you say I

646
00:28:36,779 --> 00:28:38,760
have one user and this user only has a

647
00:28:38,760 --> 00:28:41,700
limited amount of upload resources

648
00:28:41,700 --> 00:28:44,400
so there's this draw for the item

649
00:28:44,400 --> 00:28:46,679
potency key header in the HTTP API

650
00:28:46,679 --> 00:28:48,720
working group and will be a really great

651
00:28:48,720 --> 00:28:51,480
fit to put on to the upload creation

652
00:28:51,480 --> 00:28:54,000
procedure basically that way you get

653
00:28:54,000 --> 00:28:57,240
retryable upload creation procedures

654
00:28:57,240 --> 00:28:59,400
um and even if the client is not able to

655
00:28:59,400 --> 00:29:01,440
receive the response it can just send

656
00:29:01,440 --> 00:29:03,179
the same request again with the same

657
00:29:03,179 --> 00:29:05,580
item potency key and receive the same

658
00:29:05,580 --> 00:29:08,779
upload URL and then basically

659
00:29:08,779 --> 00:29:11,400
go with the entire dance of uploading

660
00:29:11,400 --> 00:29:14,340
appending and offset retrieving as well

661
00:29:14,340 --> 00:29:16,500
of course this is only doable if the

662
00:29:16,500 --> 00:29:18,000
client knows the server supports it

663
00:29:18,000 --> 00:29:19,740
because not every server supports either

664
00:29:19,740 --> 00:29:21,600
potency key

665
00:29:21,600 --> 00:29:23,460
um but it would be a really great fit

666
00:29:23,460 --> 00:29:25,980
because in that way the upload procedure

667
00:29:25,980 --> 00:29:28,200
is not only resumable but it's also

668
00:29:28,200 --> 00:29:31,020
rechriable from every state so even if

669
00:29:31,020 --> 00:29:33,659
the First Response even failed we can

670
00:29:33,659 --> 00:29:36,919
still retry and

671
00:29:36,919 --> 00:29:39,360
circumvent these errors

672
00:29:39,360 --> 00:29:41,820
so that's the question is this a thing

673
00:29:41,820 --> 00:29:44,940
people would like to use are there some

674
00:29:44,940 --> 00:29:46,980
questions about this especially since

675
00:29:46,980 --> 00:29:49,200
item potency key is not yet a published

676
00:29:49,200 --> 00:29:50,760
draft I think

677
00:29:50,760 --> 00:29:52,980
um yeah is there any any feedback

678
00:29:52,980 --> 00:29:55,820
regarding that point

679
00:30:00,080 --> 00:30:02,460
so there's always a risk when you take a

680
00:30:02,460 --> 00:30:04,559
dependency on something that's in this

681
00:30:04,559 --> 00:30:05,820
state

682
00:30:05,820 --> 00:30:07,020
um

683
00:30:07,020 --> 00:30:09,179
I think perhaps this might just be

684
00:30:09,179 --> 00:30:11,659
orthogonal and we can we can simply say

685
00:30:11,659 --> 00:30:15,419
at best that there's a sort of an

686
00:30:15,419 --> 00:30:17,100
informative reference saying oh by the

687
00:30:17,100 --> 00:30:18,480
way if you wanted if you want to do this

688
00:30:18,480 --> 00:30:20,460
sort of thing this exists

689
00:30:20,460 --> 00:30:22,919
the challenge without impotency key is

690
00:30:22,919 --> 00:30:24,899
so there's multiple challenges with them

691
00:30:24,899 --> 00:30:26,880
it's a little bit difficult for a server

692
00:30:26,880 --> 00:30:29,340
to guarantee that

693
00:30:29,340 --> 00:30:31,320
they can respect them and in all

694
00:30:31,320 --> 00:30:34,020
scenarios and it's kind of difficult for

695
00:30:34,020 --> 00:30:35,399
the client to know that the server will

696
00:30:35,399 --> 00:30:38,340
use them if the client provides one of

697
00:30:38,340 --> 00:30:39,059
them

698
00:30:39,059 --> 00:30:40,380
so

699
00:30:40,380 --> 00:30:41,640
um

700
00:30:41,640 --> 00:30:44,520
I'm sort of leaning towards at best a

701
00:30:44,520 --> 00:30:47,760
sort of Nod towards the the draft saying

702
00:30:47,760 --> 00:30:48,960
that that you do this we don't need to

703
00:30:48,960 --> 00:30:50,580
solve everything

704
00:30:50,580 --> 00:30:55,100
in the space of upload with this draft

705
00:30:55,740 --> 00:30:58,380
Jonathan

706
00:30:58,380 --> 00:31:00,840
Jonathan I

707
00:31:00,840 --> 00:31:03,899
I think that item potency key is not

708
00:31:03,899 --> 00:31:06,419
necessarily needed

709
00:31:06,419 --> 00:31:09,120
um it feels a little bit like uh just

710
00:31:09,120 --> 00:31:11,159
like standardizing like a server and a

711
00:31:11,159 --> 00:31:13,380
client generated side

712
00:31:13,380 --> 00:31:16,860
um but if you uh and you need to know

713
00:31:16,860 --> 00:31:18,659
that the server supports item potency

714
00:31:18,659 --> 00:31:22,320
key anyways and so I think

715
00:31:22,320 --> 00:31:24,960
uh maybe a better route to go would be

716
00:31:24,960 --> 00:31:28,500
to standardize some way of

717
00:31:28,500 --> 00:31:30,600
um if you know that a server does

718
00:31:30,600 --> 00:31:32,760
support it then you can just take this

719
00:31:32,760 --> 00:31:37,140
extra round trip to get that response

720
00:31:37,140 --> 00:31:38,820
anyways I think there was some

721
00:31:38,820 --> 00:31:40,440
discussion about doing that with the

722
00:31:40,440 --> 00:31:42,419
upload and complete header

723
00:31:42,419 --> 00:31:44,940
um and then you can continue from there

724
00:31:44,940 --> 00:31:46,440
you could do that for like potentially

725
00:31:46,440 --> 00:31:48,899
large files if you know that the server

726
00:31:48,899 --> 00:31:52,260
supports it and so I think that plus one

727
00:31:52,260 --> 00:31:54,419
to Martin the item potency key could

728
00:31:54,419 --> 00:31:57,120
maybe be an add-on but not necessarily

729
00:31:57,120 --> 00:32:00,620
an integral part of the protocol

730
00:32:01,320 --> 00:32:04,100
because you hope

731
00:32:04,100 --> 00:32:07,559
so uh requiring the previous issue if I

732
00:32:07,559 --> 00:32:09,840
understand correctly uh people oh well

733
00:32:09,840 --> 00:32:11,220
actually some people favored

734
00:32:11,220 --> 00:32:14,220
subordinated URLs because there's no

735
00:32:14,220 --> 00:32:16,980
call don't worry about conflicts and the

736
00:32:16,980 --> 00:32:18,419
tokens and those things

737
00:32:18,419 --> 00:32:20,039
am I correctly understand that this

738
00:32:20,039 --> 00:32:22,380
proposal essentially introduces the

739
00:32:22,380 --> 00:32:25,380
client the generative token game

740
00:32:25,380 --> 00:32:28,080
it is very similar in that regard

741
00:32:28,080 --> 00:32:30,000
however there's the difference that the

742
00:32:30,000 --> 00:32:32,039
item policy key would only be used for

743
00:32:32,039 --> 00:32:34,799
the upload creation procedure the upload

744
00:32:34,799 --> 00:32:36,600
token would be used for all other

745
00:32:36,600 --> 00:32:38,399
requests as well you know offset

746
00:32:38,399 --> 00:32:40,980
retrieving and uploader pending

747
00:32:40,980 --> 00:32:42,480
um that does not apply to the item

748
00:32:42,480 --> 00:32:44,159
potency key it would only be used for

749
00:32:44,159 --> 00:32:45,779
upload creation

750
00:32:45,779 --> 00:32:49,080
so let's say client a open a new

751
00:32:49,080 --> 00:32:51,620
connection meeting

752
00:32:51,620 --> 00:32:54,960
XXX then another client opens it with

753
00:32:54,960 --> 00:32:58,260
XXX do they map to the same uh quick

754
00:32:58,260 --> 00:32:59,880
upload request

755
00:32:59,880 --> 00:33:01,980
um so that's a really great Point um the

756
00:33:01,980 --> 00:33:03,960
item potency key is back talks a little

757
00:33:03,960 --> 00:33:06,440
bit about this and they say that the

758
00:33:06,440 --> 00:33:07,980
server

759
00:33:07,980 --> 00:33:09,659
um

760
00:33:09,659 --> 00:33:11,880
I think it can

761
00:33:11,880 --> 00:33:14,220
so in theory yes they would map to the

762
00:33:14,220 --> 00:33:15,480
same resource and there will be a

763
00:33:15,480 --> 00:33:17,880
collision you can also imagine if you

764
00:33:17,880 --> 00:33:19,919
know you have like in the context of a

765
00:33:19,919 --> 00:33:21,899
request every request is associated with

766
00:33:21,899 --> 00:33:23,279
a user and then you can have like a

767
00:33:23,279 --> 00:33:25,140
separate space of either potency keys

768
00:33:25,140 --> 00:33:26,519
for every user

769
00:33:26,519 --> 00:33:29,159
I think the server would have some room

770
00:33:29,159 --> 00:33:32,100
to decide how to implement this but in

771
00:33:32,100 --> 00:33:33,840
theory is a really good point that item

772
00:33:33,840 --> 00:33:36,120
potency keys can Collide yes thank you

773
00:33:36,120 --> 00:33:38,700
very much so so to me it sounds like it

774
00:33:38,700 --> 00:33:40,399
has the same problem with climate energy

775
00:33:40,399 --> 00:33:43,440
proposal that we have so I think I'd

776
00:33:43,440 --> 00:33:45,539
prefer not having this thank you thank

777
00:33:45,539 --> 00:33:47,279
you

778
00:33:47,279 --> 00:33:49,679
and um I I got on the Queue just to say

779
00:33:49,679 --> 00:33:50,940
personally I think I agree with what

780
00:33:50,940 --> 00:33:53,460
Martin was saying uh with the Proviso

781
00:33:53,460 --> 00:33:55,320
that I suspect that the item potency key

782
00:33:55,320 --> 00:33:56,760
spec is is hopefully going to be done

783
00:33:56,760 --> 00:33:58,559
before this spec is going to be done so

784
00:33:58,559 --> 00:33:59,760
I'm not too worried about the dependency

785
00:33:59,760 --> 00:34:00,600
there

786
00:34:00,600 --> 00:34:02,700
but stepping back

787
00:34:02,700 --> 00:34:04,679
um you know this is a little similar to

788
00:34:04,679 --> 00:34:07,980
the last issue in that we have a a

789
00:34:07,980 --> 00:34:10,440
choice it's maybe it's a stylistic

790
00:34:10,440 --> 00:34:11,639
choice but it's also kind of a

791
00:34:11,639 --> 00:34:14,280
philosophical choice of Are We defining

792
00:34:14,280 --> 00:34:18,480
a generic function for use across HTTP

793
00:34:18,480 --> 00:34:20,580
and we point out how we combine it with

794
00:34:20,580 --> 00:34:23,280
other HTTP mechanisms are we defining a

795
00:34:23,280 --> 00:34:26,040
very thin you know tightly bound

796
00:34:26,040 --> 00:34:28,320
together profile of how those mechanisms

797
00:34:28,320 --> 00:34:31,500
interact and generally uh uh hdb

798
00:34:31,500 --> 00:34:33,899
extensions like this hopefully are more

799
00:34:33,899 --> 00:34:36,359
the former where where you you know you

800
00:34:36,359 --> 00:34:38,520
can pick and choose them and and combine

801
00:34:38,520 --> 00:34:40,460
them in interesting ways um so that's

802
00:34:40,460 --> 00:34:43,800
something to think about at least

803
00:34:43,800 --> 00:34:45,119
thank you yeah that's a really good

804
00:34:45,119 --> 00:34:47,399
point um the entire other potency key is

805
00:34:47,399 --> 00:34:49,379
optional anyway both on the server as

806
00:34:49,379 --> 00:34:52,320
client side so we can also leave it out

807
00:34:52,320 --> 00:34:54,359
of the draft for now and if we see later

808
00:34:54,359 --> 00:34:56,580
that is actually useful in production we

809
00:34:56,580 --> 00:34:59,160
can still talk about adding it back

810
00:34:59,160 --> 00:35:00,480
um so yeah thank you very much for that

811
00:35:00,480 --> 00:35:02,700
feedback let's go to the next slide

812
00:35:02,700 --> 00:35:04,879
please

813
00:35:04,980 --> 00:35:07,680
so the next slide is a relatively easy

814
00:35:07,680 --> 00:35:09,119
thing I would say

815
00:35:09,119 --> 00:35:11,280
um assuming again we go with the server

816
00:35:11,280 --> 00:35:14,940
generated URLs how would the server know

817
00:35:14,940 --> 00:35:17,160
that a request is the upload creation

818
00:35:17,160 --> 00:35:18,960
procedure

819
00:35:18,960 --> 00:35:21,599
how would it identify that the client is

820
00:35:21,599 --> 00:35:23,760
interested in resumable uploads

821
00:35:23,760 --> 00:35:26,040
um there's a few options there

822
00:35:26,040 --> 00:35:28,200
um you we can always slap on the header

823
00:35:28,200 --> 00:35:30,420
that's specific to resumable uploads

824
00:35:30,420 --> 00:35:32,280
saying that this is required in the

825
00:35:32,280 --> 00:35:34,079
upload creation procedure and that way

826
00:35:34,079 --> 00:35:36,359
the client the server can identify that

827
00:35:36,359 --> 00:35:38,760
the client is interested in resumable

828
00:35:38,760 --> 00:35:41,520
uploads this issue arises because the

829
00:35:41,520 --> 00:35:43,859
endpoint for creating resumable uploads

830
00:35:43,859 --> 00:35:46,680
may not only serve resumable uploads it

831
00:35:46,680 --> 00:35:48,660
may also be used for uploading

832
00:35:48,660 --> 00:35:51,060
non-resumable files foreign

833
00:35:51,060 --> 00:35:52,920
so there has been this idea of using the

834
00:35:52,920 --> 00:35:54,960
preferred header for that the client

835
00:35:54,960 --> 00:35:56,520
would include the preferred header in

836
00:35:56,520 --> 00:35:58,800
the upload creation procedure and for

837
00:35:58,800 --> 00:36:01,320
example prefer resumable upload and then

838
00:36:01,320 --> 00:36:02,880
the server sees this and it's like oh

839
00:36:02,880 --> 00:36:04,380
hey the client wants to do resumable

840
00:36:04,380 --> 00:36:06,599
uploads I'm gonna create an upload

841
00:36:06,599 --> 00:36:08,339
resource for it

842
00:36:08,339 --> 00:36:10,380
the preferred header has a kind of nice

843
00:36:10,380 --> 00:36:13,440
semantic because it the client prefers

844
00:36:13,440 --> 00:36:15,660
it if the server doesn't support it it's

845
00:36:15,660 --> 00:36:17,579
no big deal it will just fall back to

846
00:36:17,579 --> 00:36:19,800
standard uploads

847
00:36:19,800 --> 00:36:23,160
so now here's the question is this a

848
00:36:23,160 --> 00:36:26,460
good way to identify resumable uploads

849
00:36:26,460 --> 00:36:29,880
are the other ways we've been thinking

850
00:36:29,880 --> 00:36:32,280
about using spectator but that's

851
00:36:32,280 --> 00:36:33,839
probably off the table because it's kind

852
00:36:33,839 --> 00:36:35,099
of complicated

853
00:36:35,099 --> 00:36:37,740
so yeah any feedback on the prefer

854
00:36:37,740 --> 00:36:40,160
header

855
00:36:50,280 --> 00:36:52,579
can't

856
00:36:58,260 --> 00:37:01,380
so that's your Hubble

857
00:37:01,380 --> 00:37:03,900
um I wonder at which point of time the

858
00:37:03,900 --> 00:37:05,520
clients should submit that so

859
00:37:05,520 --> 00:37:07,200
intuitively I would say this is rather

860
00:37:07,200 --> 00:37:08,520
something that comes from a server

861
00:37:08,520 --> 00:37:11,099
initially in header or something

862
00:37:11,099 --> 00:37:13,200
um and what I also would see on top

863
00:37:13,200 --> 00:37:15,480
probably so this is maybe a related but

864
00:37:15,480 --> 00:37:17,339
different topic is

865
00:37:17,339 --> 00:37:20,460
um the question at which so for which

866
00:37:20,460 --> 00:37:22,800
uploads actually this should kick in so

867
00:37:22,800 --> 00:37:24,900
from which size would you prefer to do

868
00:37:24,900 --> 00:37:25,619
so

869
00:37:25,619 --> 00:37:27,960
because typically what we see in apis

870
00:37:27,960 --> 00:37:30,960
you have non-resumable endpoint or

871
00:37:30,960 --> 00:37:33,599
non-resumable upload functions uh and

872
00:37:33,599 --> 00:37:35,160
you have that resumable upload here

873
00:37:35,160 --> 00:37:36,720
which comes with a considerable overhead

874
00:37:36,720 --> 00:37:39,060
in terms of you know establishing and

875
00:37:39,060 --> 00:37:40,500
finishing it

876
00:37:40,500 --> 00:37:41,820
um it might also have performance

877
00:37:41,820 --> 00:37:43,380
considerations on the back end because

878
00:37:43,380 --> 00:37:44,820
the back end might handle it differently

879
00:37:44,820 --> 00:37:46,859
to commit to final upload and so on so

880
00:37:46,859 --> 00:37:48,359
there's typically a sweet spot to be

881
00:37:48,359 --> 00:37:49,500
identified

882
00:37:49,500 --> 00:37:51,680
um from where to switch for you know

883
00:37:51,680 --> 00:37:53,820
smaller file uploads and larger file

884
00:37:53,820 --> 00:37:55,380
uploads so that might also be

885
00:37:55,380 --> 00:37:56,940
interesting from the server for instance

886
00:37:56,940 --> 00:37:59,640
to indicate to the client what is the

887
00:37:59,640 --> 00:38:03,180
preferred size to to use which which

888
00:38:03,180 --> 00:38:05,160
method

889
00:38:05,160 --> 00:38:07,140
yeah maybe to respond to that it's a

890
00:38:07,140 --> 00:38:08,460
really great question

891
00:38:08,460 --> 00:38:10,440
um there's

892
00:38:10,440 --> 00:38:12,060
well like I would say from from our

893
00:38:12,060 --> 00:38:14,160
interest their side to make resumable

894
00:38:14,160 --> 00:38:16,740
uploads in theory work for all file

895
00:38:16,740 --> 00:38:18,060
sizes

896
00:38:18,060 --> 00:38:18,960
um

897
00:38:18,960 --> 00:38:21,599
that's my point of view

898
00:38:21,599 --> 00:38:23,400
um of course the great thing about the

899
00:38:23,400 --> 00:38:24,900
preferred header that way is basically

900
00:38:24,900 --> 00:38:26,700
the server can decide

901
00:38:26,700 --> 00:38:28,079
if

902
00:38:28,079 --> 00:38:28,800
um

903
00:38:28,800 --> 00:38:30,240
if the client would also indicate

904
00:38:30,240 --> 00:38:32,160
somehow the file size the server could

905
00:38:32,160 --> 00:38:34,079
decide okay does this file is too small

906
00:38:34,079 --> 00:38:35,460
I don't want to create a resumable

907
00:38:35,460 --> 00:38:37,980
upload for this

908
00:38:37,980 --> 00:38:40,079
um or the file is big enough yeah I will

909
00:38:40,079 --> 00:38:42,540
respond with an upload URL and then the

910
00:38:42,540 --> 00:38:44,640
the client uses that one

911
00:38:44,640 --> 00:38:46,859
um so with the prefer header

912
00:38:46,859 --> 00:38:48,780
um the the server could actually decide

913
00:38:48,780 --> 00:38:50,640
if it is worth to create an upload

914
00:38:50,640 --> 00:38:52,380
resource because that's a really good

915
00:38:52,380 --> 00:38:53,339
point

916
00:38:53,339 --> 00:38:55,260
um there are concerns that doing

917
00:38:55,260 --> 00:38:56,940
resumable uploads for small files

918
00:38:56,940 --> 00:38:59,520
creates too much overhead on the server

919
00:38:59,520 --> 00:39:01,380
side yeah so I see a general topic here

920
00:39:01,380 --> 00:39:03,420
in probably overarching this particular

921
00:39:03,420 --> 00:39:05,099
point in terms of client and server

922
00:39:05,099 --> 00:39:06,780
agreeing upon what makes sense in a

923
00:39:06,780 --> 00:39:08,940
given situation

924
00:39:08,940 --> 00:39:11,599
thank you

925
00:39:13,440 --> 00:39:15,540
uh John flat

926
00:39:15,540 --> 00:39:16,260
um

927
00:39:16,260 --> 00:39:18,960
yeah overall I think the uh the prefer

928
00:39:18,960 --> 00:39:21,480
uh header is is good and probably

929
00:39:21,480 --> 00:39:23,339
necessary just to

930
00:39:23,339 --> 00:39:24,720
um from the client side if the server

931
00:39:24,720 --> 00:39:27,540
sends a 104 regardless or something and

932
00:39:27,540 --> 00:39:29,280
a client doesn't support it uh that

933
00:39:29,280 --> 00:39:31,320
could probably cause issues

934
00:39:31,320 --> 00:39:33,660
um I think Hans does bring up a really

935
00:39:33,660 --> 00:39:37,140
interesting point about uh kind of the

936
00:39:37,140 --> 00:39:39,839
the server deciding whether or not to to

937
00:39:39,839 --> 00:39:41,530
support it in terms of overhead

938
00:39:41,530 --> 00:39:42,180
[Music]

939
00:39:42,180 --> 00:39:42,800
um

940
00:39:42,800 --> 00:39:47,040
when we're starting to adopt this though

941
00:39:47,040 --> 00:39:50,640
I wonder if that kind of uh might slow

942
00:39:50,640 --> 00:39:54,240
down uh adoption in terms of

943
00:39:54,240 --> 00:39:57,420
um if server is rejecting uh requests

944
00:39:57,420 --> 00:39:59,520
when a client does indeed

945
00:39:59,520 --> 00:40:02,400
um support it and so uh it could be kind

946
00:40:02,400 --> 00:40:04,980
of like drawing this line and I think uh

947
00:40:04,980 --> 00:40:08,339
Marius has a good point that uh we might

948
00:40:08,339 --> 00:40:10,859
want all files to just try to do this

949
00:40:10,859 --> 00:40:12,300
immediately

950
00:40:12,300 --> 00:40:14,520
um I think there's a little bit of

951
00:40:14,520 --> 00:40:17,040
thought that needs to go into whether or

952
00:40:17,040 --> 00:40:20,480
not we want to do that

953
00:40:22,619 --> 00:40:25,560
thank you um so speaking personally and

954
00:40:25,560 --> 00:40:27,660
and very strictly just addressing how do

955
00:40:27,660 --> 00:40:29,280
you spell this on The Wire

956
00:40:29,280 --> 00:40:31,859
I kind of

957
00:40:31,859 --> 00:40:35,099
prefer is is Loosely specified it's a

958
00:40:35,099 --> 00:40:36,240
bit fluffy

959
00:40:36,240 --> 00:40:37,740
um it's not really clear what it's for

960
00:40:37,740 --> 00:40:40,020
and there's not a lot of mechanism there

961
00:40:40,020 --> 00:40:42,839
uh it tends to be used for things that

962
00:40:42,839 --> 00:40:45,359
are kind of uh configured or used by the

963
00:40:45,359 --> 00:40:47,400
user and some a little concerned there

964
00:40:47,400 --> 00:40:49,200
might be conflict even though in theory

965
00:40:49,200 --> 00:40:52,079
it won't but in practice it might

966
00:40:52,079 --> 00:40:54,240
um my gut feeling is is that we're

967
00:40:54,240 --> 00:40:55,920
defining kind of a proper protocol

968
00:40:55,920 --> 00:40:58,619
extension here and so giving it its own

969
00:40:58,619 --> 00:41:00,420
header would probably be cleaner and

970
00:41:00,420 --> 00:41:02,940
clearer but that's just a kind of a gut

971
00:41:02,940 --> 00:41:04,500
feeling it's not a you know anything

972
00:41:04,500 --> 00:41:07,099
important

973
00:41:07,380 --> 00:41:10,099
uh Brun

974
00:41:13,560 --> 00:41:16,380
a large file enthusiast

975
00:41:16,380 --> 00:41:20,099
there's a similar pattern in IMAP and we

976
00:41:20,099 --> 00:41:22,800
had this literal which you can either

977
00:41:22,800 --> 00:41:25,140
send a message send something straight

978
00:41:25,140 --> 00:41:26,880
away it's a literal or you can do

979
00:41:26,880 --> 00:41:28,200
literal Plus

980
00:41:28,200 --> 00:41:30,660
which sorry you can send you can say I

981
00:41:30,660 --> 00:41:32,820
want to send a literal item of this size

982
00:41:32,820 --> 00:41:34,619
and the server says yes or no or you can

983
00:41:34,619 --> 00:41:36,660
literal plus was you can say I'm just

984
00:41:36,660 --> 00:41:38,700
streaming it to you right now

985
00:41:38,700 --> 00:41:40,440
um and there's a new spec that came out

986
00:41:40,440 --> 00:41:41,880
a couple of years ago literal minus

987
00:41:41,880 --> 00:41:44,280
which is if it's less than 4096 bytes

988
00:41:44,280 --> 00:41:46,980
just send it if it's greater than it has

989
00:41:46,980 --> 00:41:48,599
a question first I think something

990
00:41:48,599 --> 00:41:50,940
similar but something small enough that

991
00:41:50,940 --> 00:41:52,740
it's going to fit in a reasonable number

992
00:41:52,740 --> 00:41:55,680
of packets you say just stream it but

993
00:41:55,680 --> 00:41:57,300
the other side of this is saying to the

994
00:41:57,300 --> 00:41:58,980
server I'm about to send you 100

995
00:41:58,980 --> 00:42:00,660
gigabytes and the services and nothing

996
00:42:00,660 --> 00:42:01,800
so I don't want that straight away

997
00:42:01,800 --> 00:42:03,660
rather than the server has this stream

998
00:42:03,660 --> 00:42:05,160
coming at it and has to drop the

999
00:42:05,160 --> 00:42:06,420
connection because there's no other way

1000
00:42:06,420 --> 00:42:08,579
to to tell you to go away

1001
00:42:08,579 --> 00:42:11,280
um I think setting a reasonable size and

1002
00:42:11,280 --> 00:42:12,720
saying anything smaller than this you

1003
00:42:12,720 --> 00:42:14,280
can send anything larger you need to ask

1004
00:42:14,280 --> 00:42:16,200
permission is a good pattern generally

1005
00:42:16,200 --> 00:42:17,880
and that's probably the way to do it

1006
00:42:17,880 --> 00:42:19,260
which doesn't quite answer this question

1007
00:42:19,260 --> 00:42:20,400
but

1008
00:42:20,400 --> 00:42:23,579
still very relevant though

1009
00:42:23,579 --> 00:42:24,960
Jonathan um

1010
00:42:24,960 --> 00:42:28,619
uh I would note though that um uh having

1011
00:42:28,619 --> 00:42:30,300
like this boundary between large and

1012
00:42:30,300 --> 00:42:32,460
small file sizes can be a little

1013
00:42:32,460 --> 00:42:34,920
difficult uh especially because everyone

1014
00:42:34,920 --> 00:42:36,960
every client's case is different in

1015
00:42:36,960 --> 00:42:40,740
terms of connection speed and so for one

1016
00:42:40,740 --> 00:42:44,280
client losing 10 megabytes of data and

1017
00:42:44,280 --> 00:42:47,220
having to retry that might be uh even

1018
00:42:47,220 --> 00:42:49,520
worse than another client losing 100

1019
00:42:49,520 --> 00:42:52,200
megabytes of data if their connection is

1020
00:42:52,200 --> 00:42:54,119
much faster

1021
00:42:54,119 --> 00:42:55,800
I'm going to close the queue in just a

1022
00:42:55,800 --> 00:42:57,920
second

1023
00:42:58,740 --> 00:43:01,140
so yeah this is Hunter once again so uh

1024
00:43:01,140 --> 00:43:02,579
bronze remark actually made me think

1025
00:43:02,579 --> 00:43:03,660
that

1026
00:43:03,660 --> 00:43:04,619
um

1027
00:43:04,619 --> 00:43:06,780
the overall question of what maximum

1028
00:43:06,780 --> 00:43:08,760
five types will the server accept is

1029
00:43:08,760 --> 00:43:10,500
also something I'm not aware of is

1030
00:43:10,500 --> 00:43:11,339
currently

1031
00:43:11,339 --> 00:43:13,140
um specified to be retrievaled by the

1032
00:43:13,140 --> 00:43:15,780
client in any RC or standardized way and

1033
00:43:15,780 --> 00:43:17,940
it would probably be super related to

1034
00:43:17,940 --> 00:43:18,960
this one

1035
00:43:18,960 --> 00:43:20,819
as well to include maybe in

1036
00:43:20,819 --> 00:43:22,200
considerations

1037
00:43:22,200 --> 00:43:25,700
yes that's a very good point

1038
00:43:25,980 --> 00:43:27,780
okay thank you for all of the feedback

1039
00:43:27,780 --> 00:43:28,859
on that

1040
00:43:28,859 --> 00:43:30,960
um let's try to go to the next slide so

1041
00:43:30,960 --> 00:43:32,520
we don't

1042
00:43:32,520 --> 00:43:34,980
um hold other fingers right um this

1043
00:43:34,980 --> 00:43:37,740
issue is about the expect header

1044
00:43:37,740 --> 00:43:40,500
um in the upload creation procedure the

1045
00:43:40,500 --> 00:43:42,119
client the server can send an

1046
00:43:42,119 --> 00:43:44,099
informational response right now we use

1047
00:43:44,099 --> 00:43:46,680
the 104 for that but that might change

1048
00:43:46,680 --> 00:43:49,440
and the question is

1049
00:43:49,440 --> 00:43:52,319
because the client can also include data

1050
00:43:52,319 --> 00:43:55,079
in the upload creation procedure

1051
00:43:55,079 --> 00:43:57,839
it might happen and if the client sends

1052
00:43:57,839 --> 00:43:59,940
an expect 100 continue

1053
00:43:59,940 --> 00:44:02,460
is there a conflict with

1054
00:44:02,460 --> 00:44:04,740
the two informational responses that we

1055
00:44:04,740 --> 00:44:05,700
have

1056
00:44:05,700 --> 00:44:07,560
um assuming that the server generates uh

1057
00:44:07,560 --> 00:44:10,260
server responds with 100 continue and

1058
00:44:10,260 --> 00:44:12,180
then later might respond with 104

1059
00:44:12,180 --> 00:44:14,819
resumption supported

1060
00:44:14,819 --> 00:44:17,280
um personally I don't really know how

1061
00:44:17,280 --> 00:44:19,640
the entire expect

1062
00:44:19,640 --> 00:44:21,900
headers implemented and if that would

1063
00:44:21,900 --> 00:44:23,819
cause them complications because it's

1064
00:44:23,819 --> 00:44:25,859
kind of a special thing

1065
00:44:25,859 --> 00:44:29,640
um so is there any feedback on that

1066
00:44:29,640 --> 00:44:33,599
so expect continue is still used perhaps

1067
00:44:33,599 --> 00:44:35,280
unfortunately

1068
00:44:35,280 --> 00:44:38,760
um not a lot though and and you can send

1069
00:44:38,760 --> 00:44:40,680
more than one informational response or

1070
00:44:40,680 --> 00:44:42,960
non-final response before you send the

1071
00:44:42,960 --> 00:44:44,880
final response so so strictly speaking

1072
00:44:44,880 --> 00:44:46,680
that should be okay how it actually

1073
00:44:46,680 --> 00:44:48,900
interoperates with with live software

1074
00:44:48,900 --> 00:44:52,339
will be really interesting to find out

1075
00:44:52,819 --> 00:44:56,060
that's great

1076
00:44:56,520 --> 00:44:58,859
okay if there's no concerns regarding

1077
00:44:58,859 --> 00:45:01,740
that then let's go please do the last

1078
00:45:01,740 --> 00:45:04,020
slide

1079
00:45:04,020 --> 00:45:06,720
right um so we've talked about the um

1080
00:45:06,720 --> 00:45:08,160
four issues that are here in a bit

1081
00:45:08,160 --> 00:45:09,540
Bolder front

1082
00:45:09,540 --> 00:45:10,740
um thank you all for that feedback

1083
00:45:10,740 --> 00:45:12,359
already there are a few other open

1084
00:45:12,359 --> 00:45:13,560
issues

1085
00:45:13,560 --> 00:45:16,020
um which are I would call a bit more

1086
00:45:16,020 --> 00:45:17,099
minor

1087
00:45:17,099 --> 00:45:20,280
um there's one issue about we have these

1088
00:45:20,280 --> 00:45:22,980
head responses but they always change

1089
00:45:22,980 --> 00:45:25,500
because the upload offset changes and

1090
00:45:25,500 --> 00:45:28,079
that makes them kind of not cachable and

1091
00:45:28,079 --> 00:45:30,300
there has been a concern voiced on the

1092
00:45:30,300 --> 00:45:33,780
mailing list that this is not really the

1093
00:45:33,780 --> 00:45:35,460
idea of a head response because it

1094
00:45:35,460 --> 00:45:37,619
should be cachable

1095
00:45:37,619 --> 00:45:39,000
um

1096
00:45:39,000 --> 00:45:41,640
so yeah that the concern

1097
00:45:41,640 --> 00:45:43,980
um there's also the proposal that or the

1098
00:45:43,980 --> 00:45:45,720
idea that was also voiced from Jonathan

1099
00:45:45,720 --> 00:45:47,880
flapp um just a minute ago that the

1100
00:45:47,880 --> 00:45:50,280
server can regularly send informational

1101
00:45:50,280 --> 00:45:52,740
responses to let the client know how

1102
00:45:52,740 --> 00:45:54,780
much data it has received that's really

1103
00:45:54,780 --> 00:45:57,060
interesting because that way the server

1104
00:45:57,060 --> 00:45:59,400
can remove data from its buffer if it

1105
00:45:59,400 --> 00:46:00,900
knows the server has stored this

1106
00:46:00,900 --> 00:46:03,119
information safely and securely then the

1107
00:46:03,119 --> 00:46:07,079
client can remove it from a buffer again

1108
00:46:07,079 --> 00:46:10,079
and the last two issues are a bit

1109
00:46:10,079 --> 00:46:12,180
um a bit more vague in theory there's

1110
00:46:12,180 --> 00:46:13,980
this idea that using resumable uploads

1111
00:46:13,980 --> 00:46:16,079
we can also pause uploads to give

1112
00:46:16,079 --> 00:46:18,480
priority to other uploads

1113
00:46:18,480 --> 00:46:22,079
it's just an idea um if might not even

1114
00:46:22,079 --> 00:46:23,880
make a mention at rough but it's like an

1115
00:46:23,880 --> 00:46:25,440
idea that could be explored

1116
00:46:25,440 --> 00:46:26,819
and the last one is a bit more

1117
00:46:26,819 --> 00:46:29,579
interesting in if it's possible to

1118
00:46:29,579 --> 00:46:31,380
integrate resumable uploads into

1119
00:46:31,380 --> 00:46:34,260
standard HTML forms so for example that

1120
00:46:34,260 --> 00:46:35,579
you can use

1121
00:46:35,579 --> 00:46:37,740
multi-part uploads with resumable

1122
00:46:37,740 --> 00:46:40,260
uploads and that was would natively work

1123
00:46:40,260 --> 00:46:42,060
without interventions from the

1124
00:46:42,060 --> 00:46:43,260
Developers

1125
00:46:43,260 --> 00:46:45,599
just a few ideas if there's any feedback

1126
00:46:45,599 --> 00:46:47,160
on that as well

1127
00:46:47,160 --> 00:46:49,280
um would be really helpful

1128
00:46:49,280 --> 00:46:51,780
otherwise I'm not sure how much time we

1129
00:46:51,780 --> 00:46:53,579
have left for discussion we should we

1130
00:46:53,579 --> 00:46:54,900
should probably move on I think yeah

1131
00:46:54,900 --> 00:46:58,560
unless people have specific feedback

1132
00:46:58,560 --> 00:47:01,220
anyone

1133
00:47:01,380 --> 00:47:04,220
up front

1134
00:47:11,640 --> 00:47:13,619
answer how about

1135
00:47:13,619 --> 00:47:14,880
um so one thing that came to my mind

1136
00:47:14,880 --> 00:47:16,500
that might be very handy in this context

1137
00:47:16,500 --> 00:47:18,780
is hashes

1138
00:47:18,780 --> 00:47:21,359
um to be returned after the upload is

1139
00:47:21,359 --> 00:47:22,859
that something you consider you're

1140
00:47:22,859 --> 00:47:25,560
likely to consider returning what a hash

1141
00:47:25,560 --> 00:47:27,960
of the file as it has been received by

1142
00:47:27,960 --> 00:47:29,819
the server

1143
00:47:29,819 --> 00:47:31,980
um might be interesting yes

1144
00:47:31,980 --> 00:47:34,819
um we

1145
00:47:35,099 --> 00:47:37,200
um I so previously we have also been

1146
00:47:37,200 --> 00:47:39,119
working on resumable uploads outside of

1147
00:47:39,119 --> 00:47:40,440
the ITF

1148
00:47:40,440 --> 00:47:42,060
um like a separate project it's open

1149
00:47:42,060 --> 00:47:43,319
source

1150
00:47:43,319 --> 00:47:44,940
um and we have defined something like

1151
00:47:44,940 --> 00:47:47,099
that as well to like use checksums to

1152
00:47:47,099 --> 00:47:49,140
ensure the Integrity of uploads um

1153
00:47:49,140 --> 00:47:50,940
people want to use that

1154
00:47:50,940 --> 00:47:53,099
um but it has not been considered yet

1155
00:47:53,099 --> 00:47:54,780
here because it's kind of a bit more

1156
00:47:54,780 --> 00:47:56,640
like a broader scope and we want to keep

1157
00:47:56,640 --> 00:47:58,440
the draft smaller but the really good

1158
00:47:58,440 --> 00:48:00,599
point that maybe the if the server wants

1159
00:48:00,599 --> 00:48:03,000
to that it can also return checksums so

1160
00:48:03,000 --> 00:48:04,500
let the client know that the file has

1161
00:48:04,500 --> 00:48:06,720
been uploaded correctly just just as you

1162
00:48:06,720 --> 00:48:08,220
said it's very helpful for validation

1163
00:48:08,220 --> 00:48:10,260
and there is from the proprietary app I

1164
00:48:10,260 --> 00:48:12,240
says a lot where you can get it or you

1165
00:48:12,240 --> 00:48:14,160
have to retrieve an extra call to do it

1166
00:48:14,160 --> 00:48:15,780
but yeah it would be really helpful in

1167
00:48:15,780 --> 00:48:16,859
that case

1168
00:48:16,859 --> 00:48:19,819
thank you okay

1169
00:48:19,980 --> 00:48:21,420
I think we're done thank you very much

1170
00:48:21,420 --> 00:48:23,520
thank you for the feedback

1171
00:48:23,520 --> 00:48:25,140
um we'll try to incorporate it as best

1172
00:48:25,140 --> 00:48:28,460
as we can thank you

1173
00:48:29,460 --> 00:48:32,940
great okay let's go ahead and move on

1174
00:48:32,940 --> 00:48:39,000
uh next up is retrofit structured fields

1175
00:48:39,000 --> 00:48:41,900
let's see

1176
00:48:48,119 --> 00:48:50,460
okay

1177
00:48:50,460 --> 00:48:53,460
so

1178
00:48:53,579 --> 00:48:55,140
can folks see that

1179
00:48:55,140 --> 00:48:57,480
it's going to get bigger there it goes

1180
00:48:57,480 --> 00:49:00,000
so we have just four issues open on this

1181
00:49:00,000 --> 00:49:01,079
spec

1182
00:49:01,079 --> 00:49:03,960
uh the date definition in retrofit uh

1183
00:49:03,960 --> 00:49:05,940
hopefully people have seen by now we

1184
00:49:05,940 --> 00:49:08,220
have a zero zero of the retrofit uh

1185
00:49:08,220 --> 00:49:10,560
sorry of the structured Fields this

1186
00:49:10,560 --> 00:49:14,599
document out now as of I think yesterday

1187
00:49:14,880 --> 00:49:17,220
and uh the zero one of that will take

1188
00:49:17,220 --> 00:49:20,520
the date uh type out of the retrofit

1189
00:49:20,520 --> 00:49:23,040
draft and into that best specification

1190
00:49:23,040 --> 00:49:25,200
so now we can close this issue once

1191
00:49:25,200 --> 00:49:26,700
that's done

1192
00:49:26,700 --> 00:49:28,380
and that leaves us just with these three

1193
00:49:28,380 --> 00:49:29,700
issues here

1194
00:49:29,700 --> 00:49:31,619
um one of them I think is a

1195
00:49:31,619 --> 00:49:33,619
almost editorial issue from Martin

1196
00:49:33,619 --> 00:49:37,200
regarding how we specify uh

1197
00:49:37,200 --> 00:49:38,599
the the

1198
00:49:38,599 --> 00:49:41,280
caveats around uh how to how to fix up

1199
00:49:41,280 --> 00:49:45,000
uh retrofit uh to make retrofit

1200
00:49:45,000 --> 00:49:47,760
back porting more successful uh we did

1201
00:49:47,760 --> 00:49:49,440
have a discussion about whether we

1202
00:49:49,440 --> 00:49:51,720
wanted to actually put those caveats or

1203
00:49:51,720 --> 00:49:54,960
those modifications into the structured

1204
00:49:54,960 --> 00:49:57,240
Fields parsing algorithms and I think we

1205
00:49:57,240 --> 00:49:59,579
landed on not doing so

1206
00:49:59,579 --> 00:50:02,160
but I wanted to double check that so the

1207
00:50:02,160 --> 00:50:04,500
idea is for example

1208
00:50:04,500 --> 00:50:06,900
um when you're parsing around

1209
00:50:06,900 --> 00:50:08,900
um

1210
00:50:11,579 --> 00:50:14,339
the the semicolon that separates some of

1211
00:50:14,339 --> 00:50:16,680
the elements you know if you'll uh

1212
00:50:16,680 --> 00:50:18,960
strict structured Fields parsing doesn't

1213
00:50:18,960 --> 00:50:20,579
allow white space but if you allow white

1214
00:50:20,579 --> 00:50:22,920
space you get a higher success rate when

1215
00:50:22,920 --> 00:50:24,240
you're when you're doing back ported

1216
00:50:24,240 --> 00:50:27,000
structured fields and so the question is

1217
00:50:27,000 --> 00:50:28,680
should we modify the structured Fields

1218
00:50:28,680 --> 00:50:32,640
algorithms or uh add a flag to say I

1219
00:50:32,640 --> 00:50:34,380
want to be in compatibility mode for

1220
00:50:34,380 --> 00:50:36,000
example

1221
00:50:36,000 --> 00:50:38,880
um and and I think the sense was that we

1222
00:50:38,880 --> 00:50:40,200
probably don't we'll probably want to

1223
00:50:40,200 --> 00:50:42,119
keep those modifications in the retrofit

1224
00:50:42,119 --> 00:50:45,980
document any comments

1225
00:50:46,380 --> 00:50:49,040
Julian

1226
00:51:00,540 --> 00:51:03,079
Julian

1227
00:51:03,660 --> 00:51:06,420
um yeah so I I actually looked at this

1228
00:51:06,420 --> 00:51:08,160
ticket this morning

1229
00:51:08,160 --> 00:51:10,980
and I think the current tax that

1230
00:51:10,980 --> 00:51:12,540
essentially says

1231
00:51:12,540 --> 00:51:14,880
you will need to pre-process the field

1232
00:51:14,880 --> 00:51:17,760
value before sticking it into the

1233
00:51:17,760 --> 00:51:20,099
structured field disposal is

1234
00:51:20,099 --> 00:51:22,500
kind of crazy sorry because it

1235
00:51:22,500 --> 00:51:25,380
essentially means that people will have

1236
00:51:25,380 --> 00:51:28,619
to apply some heuristics to

1237
00:51:28,619 --> 00:51:31,079
transform the field value onto something

1238
00:51:31,079 --> 00:51:35,099
that the father will accept and depth

1239
00:51:35,099 --> 00:51:37,740
seems like a very dangerous operation to

1240
00:51:37,740 --> 00:51:40,559
me because to do it properly you would

1241
00:51:40,559 --> 00:51:44,280
have to pass the fields correctly right

1242
00:51:44,280 --> 00:51:46,859
you can't just apply a Rec X or

1243
00:51:46,859 --> 00:51:49,319
something like that to a field value to

1244
00:51:49,319 --> 00:51:51,180
produce something that's the structured

1245
00:51:51,180 --> 00:51:53,520
field parser will take so

1246
00:51:53,520 --> 00:51:55,980
I I think if we land

1247
00:51:55,980 --> 00:51:58,319
with that solution we better do not

1248
00:51:58,319 --> 00:52:00,540
retrofit at all because that's really

1249
00:52:00,540 --> 00:52:03,720
really risky so my I would absolutely

1250
00:52:03,720 --> 00:52:07,319
prefer for the common case it's like

1251
00:52:07,319 --> 00:52:09,839
um a quoted string and white space and

1252
00:52:09,839 --> 00:52:14,540
so on to actually have a

1253
00:52:16,880 --> 00:52:19,500
which has a strict mode which is the

1254
00:52:19,500 --> 00:52:20,880
same as before

1255
00:52:20,880 --> 00:52:24,059
and that actually incorporates these

1256
00:52:24,059 --> 00:52:26,220
Transformations into the core passing

1257
00:52:26,220 --> 00:52:28,578
algorithm

1258
00:52:29,339 --> 00:52:31,920
and I think that's art and proposal as

1259
00:52:31,920 --> 00:52:32,819
well

1260
00:52:32,819 --> 00:52:37,800
okay so um I think that that this issue

1261
00:52:37,800 --> 00:52:42,599
the proposal is to uh uh Define in the

1262
00:52:42,599 --> 00:52:44,700
style of structured Fields parsing you

1263
00:52:44,700 --> 00:52:47,400
know after effectively as they say

1264
00:52:47,400 --> 00:52:49,920
monkey patch it so you know after step

1265
00:52:49,920 --> 00:52:52,319
three do this then continue processing

1266
00:52:52,319 --> 00:52:53,880
so forth and so on

1267
00:52:53,880 --> 00:52:56,400
uh uh that would be one way to do this

1268
00:52:56,400 --> 00:52:58,740
so keep it in retrofit the other would

1269
00:52:58,740 --> 00:53:00,480
be to actually change the parsing

1270
00:53:00,480 --> 00:53:04,380
algorithm in in structured Fields best

1271
00:53:04,380 --> 00:53:06,119
so do you have a preference about where

1272
00:53:06,119 --> 00:53:09,200
that ends up

1273
00:53:11,579 --> 00:53:14,400
I I believe it should be in the spark

1274
00:53:14,400 --> 00:53:15,599
plug fields

1275
00:53:15,599 --> 00:53:18,900
spec because we actually want the

1276
00:53:18,900 --> 00:53:21,300
implementations of structured fields to

1277
00:53:21,300 --> 00:53:22,680
be consistent

1278
00:53:22,680 --> 00:53:25,920
and there's also the slightly orthogonal

1279
00:53:25,920 --> 00:53:27,180
question

1280
00:53:27,180 --> 00:53:31,819
whether if we realize that for instance

1281
00:53:31,819 --> 00:53:34,680
quoted Springs are common that

1282
00:53:34,680 --> 00:53:37,040
throughout characters that are not

1283
00:53:37,040 --> 00:53:41,099
portable in structured Fields then maybe

1284
00:53:41,099 --> 00:53:44,160
I know that's that opens a new dimension

1285
00:53:44,160 --> 00:53:46,619
for the structured Fields provision but

1286
00:53:46,619 --> 00:53:47,520
maybe

1287
00:53:47,520 --> 00:53:50,579
um it's we should think about actually

1288
00:53:50,579 --> 00:53:53,940
opening up the spring syntax in

1289
00:53:53,940 --> 00:53:55,980
structured fields to actually be

1290
00:53:55,980 --> 00:53:58,260
compatible with HTTP clock Springs

1291
00:53:58,260 --> 00:54:01,380
instead of trying to work around them

1292
00:54:01,380 --> 00:54:02,400
oh

1293
00:54:02,400 --> 00:54:05,900
well I think it's Martin next

1294
00:54:08,400 --> 00:54:09,900
so Mark can you talk a bit more about

1295
00:54:09,900 --> 00:54:12,480
the rationale behind just limiting this

1296
00:54:12,480 --> 00:54:13,980
to the retrofit crafter we're just

1297
00:54:13,980 --> 00:54:15,240
talking about

1298
00:54:15,240 --> 00:54:16,920
a targeted

1299
00:54:16,920 --> 00:54:19,079
little bit of extra compatibility for

1300
00:54:19,079 --> 00:54:21,240
the selected fields that you have in

1301
00:54:21,240 --> 00:54:22,680
that draft is that really what you're

1302
00:54:22,680 --> 00:54:24,300
trying to do

1303
00:54:24,300 --> 00:54:26,640
I think that's the goal um I think that

1304
00:54:26,640 --> 00:54:29,579
personally I would be concerned if we

1305
00:54:29,579 --> 00:54:32,280
just modified the the structured Fields

1306
00:54:32,280 --> 00:54:34,859
parsing algorithms for all structured

1307
00:54:34,859 --> 00:54:37,440
Fields parsing I think that that would

1308
00:54:37,440 --> 00:54:39,119
although I can't foresee anything

1309
00:54:39,119 --> 00:54:41,040
immediate I I can't help but wonder if

1310
00:54:41,040 --> 00:54:42,960
it would cause some compatibility issues

1311
00:54:42,960 --> 00:54:44,220
even though structured Fields is

1312
00:54:44,220 --> 00:54:46,020
relatively new

1313
00:54:46,020 --> 00:54:48,660
um what I think we would do to mitigate

1314
00:54:48,660 --> 00:54:50,700
that is to have effectively a mode flag

1315
00:54:50,700 --> 00:54:52,859
for the parsing algorithm to say are you

1316
00:54:52,859 --> 00:54:55,559
in compatible mode or not and the

1317
00:54:55,559 --> 00:54:58,619
retrofit draft would say uh use a

1318
00:54:58,619 --> 00:55:00,180
structured Fields parser in compatible

1319
00:55:00,180 --> 00:55:01,980
mode whereas normally it would not be

1320
00:55:01,980 --> 00:55:04,260
yeah

1321
00:55:04,260 --> 00:55:06,000
um

1322
00:55:06,000 --> 00:55:09,420
I won't do it um that was a joke

1323
00:55:09,420 --> 00:55:10,220
um

1324
00:55:10,220 --> 00:55:13,319
the later later

1325
00:55:13,319 --> 00:55:16,380
I think that's probably preferable from

1326
00:55:16,380 --> 00:55:18,420
my perspective as well I don't know

1327
00:55:18,420 --> 00:55:21,599
whether I I see this as

1328
00:55:21,599 --> 00:55:23,220
here's the structured Fields algorithm

1329
00:55:23,220 --> 00:55:25,559
and here's the modified structured

1330
00:55:25,559 --> 00:55:27,119
Fields algorithm that you would invoke

1331
00:55:27,119 --> 00:55:29,220
in this case right which which is

1332
00:55:29,220 --> 00:55:30,660
essentially what you you're trying to do

1333
00:55:30,660 --> 00:55:33,240
by keeping it in the retrofit document

1334
00:55:33,240 --> 00:55:34,380
or

1335
00:55:34,380 --> 00:55:37,200
sort of folding them in together this is

1336
00:55:37,200 --> 00:55:39,119
one of the key questions that we have on

1337
00:55:39,119 --> 00:55:41,640
the on the revision of the structured

1338
00:55:41,640 --> 00:55:44,940
Fields document I think at this point

1339
00:55:44,940 --> 00:55:46,440
um

1340
00:55:46,440 --> 00:55:48,300
at some level I think this is just an

1341
00:55:48,300 --> 00:55:49,619
editorial choice

1342
00:55:49,619 --> 00:55:53,480
in a way yeah because

1343
00:55:53,780 --> 00:55:56,460
you don't want to complicate things too

1344
00:55:56,460 --> 00:55:57,540
much for someone who's doing the

1345
00:55:57,540 --> 00:55:58,800
retrofit

1346
00:55:58,800 --> 00:56:00,900
but you also don't want to complicate

1347
00:56:00,900 --> 00:56:02,460
things too much for the people who are

1348
00:56:02,460 --> 00:56:03,960
only doing structured fields and now

1349
00:56:03,960 --> 00:56:05,819
have to deal with this this optionality

1350
00:56:05,819 --> 00:56:08,280
and the algorithm gets more complicated

1351
00:56:08,280 --> 00:56:10,800
it's trade Us in both Direction I really

1352
00:56:10,800 --> 00:56:12,720
don't mind either way the algorithm is

1353
00:56:12,720 --> 00:56:15,540
already pretty complicated though so

1354
00:56:15,540 --> 00:56:17,579
it's not that complicated to read that

1355
00:56:17,579 --> 00:56:19,920
document through it's it's I've heard

1356
00:56:19,920 --> 00:56:21,960
other feedback to the contrary yeah yeah

1357
00:56:21,960 --> 00:56:24,960
all right well I personally my concern

1358
00:56:24,960 --> 00:56:27,960
is is if we leave it in retrofit that uh

1359
00:56:27,960 --> 00:56:29,700
we're effectively we may have to

1360
00:56:29,700 --> 00:56:30,839
duplicate some of the algorithms

1361
00:56:30,839 --> 00:56:33,240
wholesale uh to you know specify the

1362
00:56:33,240 --> 00:56:35,520
modifications or make a really ugly go

1363
00:56:35,520 --> 00:56:37,440
to step three do this and that's just

1364
00:56:37,440 --> 00:56:38,760
that's sort of an awful redirection

1365
00:56:38,760 --> 00:56:40,260
that's entirely dependent on the

1366
00:56:40,260 --> 00:56:42,300
structured Fields definition remaining

1367
00:56:42,300 --> 00:56:44,099
stable as well so all of these have

1368
00:56:44,099 --> 00:56:45,960
problems I think I might be leaning

1369
00:56:45,960 --> 00:56:48,900
towards Julian's suggestion here which

1370
00:56:48,900 --> 00:56:50,640
is to Define it in the structured Fields

1371
00:56:50,640 --> 00:56:52,319
document that we currently have open on

1372
00:56:52,319 --> 00:56:55,680
the table yeah with a flag with a with a

1373
00:56:55,680 --> 00:56:58,020
flag that you say unless otherwise

1374
00:56:58,020 --> 00:57:01,980
specified do not turn this on okay and

1375
00:57:01,980 --> 00:57:03,720
so I'm okay with that I think that's

1376
00:57:03,720 --> 00:57:08,058
fine okay Mike Bishop

1377
00:57:10,440 --> 00:57:12,780
Mike Bishop so if you think about who's

1378
00:57:12,780 --> 00:57:14,880
going to use these

1379
00:57:14,880 --> 00:57:16,680
um if you have somebody who's trying to

1380
00:57:16,680 --> 00:57:19,500
parse a legacy header using a structured

1381
00:57:19,500 --> 00:57:21,240
field library that they that do not

1382
00:57:21,240 --> 00:57:23,460
themselves control

1383
00:57:23,460 --> 00:57:25,500
unless the person who at the library

1384
00:57:25,500 --> 00:57:29,040
knew to add the flag it won't be there

1385
00:57:29,040 --> 00:57:29,940
um

1386
00:57:29,940 --> 00:57:32,760
I think the odds of that happening get a

1387
00:57:32,760 --> 00:57:34,680
lot better if the structured field spec

1388
00:57:34,680 --> 00:57:36,780
says you need to have this flag in your

1389
00:57:36,780 --> 00:57:38,040
pressure

1390
00:57:38,040 --> 00:57:41,280
and then and then somebody who wants to

1391
00:57:41,280 --> 00:57:43,980
apply that picture to a header in a more

1392
00:57:43,980 --> 00:57:46,140
generic implementation they just set the

1393
00:57:46,140 --> 00:57:48,599
flag otherwise they have to go in and

1394
00:57:48,599 --> 00:57:50,339
start messing with the implementation of

1395
00:57:50,339 --> 00:57:52,200
step three which they do not

1396
00:57:52,200 --> 00:57:54,180
really and they didn't really sign up to

1397
00:57:54,180 --> 00:57:56,899
work on that Library

1398
00:57:57,119 --> 00:57:58,800
so it sounds like you're agreeing yes

1399
00:57:58,800 --> 00:58:01,220
okay

1400
00:58:01,859 --> 00:58:04,220
okay

1401
00:58:21,960 --> 00:58:25,619
uh the next one uh I I noted that there

1402
00:58:25,619 --> 00:58:27,960
are some differences or I was it was

1403
00:58:27,960 --> 00:58:29,400
pointed out to me and I'm sorry I forget

1404
00:58:29,400 --> 00:58:30,780
who pointed this out to me there's some

1405
00:58:30,780 --> 00:58:33,440
differences in error handling between

1406
00:58:33,440 --> 00:58:37,020
how we specify things in HTTP versus

1407
00:58:37,020 --> 00:58:38,880
in HP parsing versus structured field

1408
00:58:38,880 --> 00:58:39,900
for example

1409
00:58:39,900 --> 00:58:41,819
uh when there are multiple

1410
00:58:41,819 --> 00:58:43,500
instances of the same value in a list

1411
00:58:43,500 --> 00:58:46,140
header some list headers specify

1412
00:58:46,140 --> 00:58:48,119
I forget you know first one wins and I

1413
00:58:48,119 --> 00:58:49,680
think we specify last one Windsor or

1414
00:58:49,680 --> 00:58:52,020
vice versa instruction field so we just

1415
00:58:52,020 --> 00:58:53,520
need to point that out as a as a

1416
00:58:53,520 --> 00:58:55,380
potential difference

1417
00:58:55,380 --> 00:58:57,059
and finally

1418
00:58:57,059 --> 00:58:59,339
um Chris and a few other people actually

1419
00:58:59,339 --> 00:59:02,040
have added that we should add some

1420
00:59:02,040 --> 00:59:04,200
mapped fields for authorization and www

1421
00:59:04,200 --> 00:59:05,940
authenticate which I think is is a

1422
00:59:05,940 --> 00:59:08,040
reasonable thing because people seem to

1423
00:59:08,040 --> 00:59:09,559
be interested in specifying new

1424
00:59:09,559 --> 00:59:12,660
authentication schemes these days so I

1425
00:59:12,660 --> 00:59:14,460
don't think that's controversial I hope

1426
00:59:14,460 --> 00:59:17,780
any other feedback on this spec

1427
00:59:20,940 --> 00:59:23,359
okay

1428
00:59:24,240 --> 00:59:28,020
let's move on then to query

1429
00:59:28,020 --> 00:59:30,619
Julian

1430
00:59:32,819 --> 00:59:35,400
anything to say about query

1431
00:59:35,400 --> 00:59:36,480
um

1432
00:59:36,480 --> 00:59:39,240
so there is no news on the actual

1433
00:59:39,240 --> 00:59:42,240
content of the spec I was kind of

1434
00:59:42,240 --> 00:59:44,700
limited for some several reasons over

1435
00:59:44,700 --> 00:59:47,339
the last few months and now that I had

1436
00:59:47,339 --> 00:59:50,460
some time doing its log I we had to look

1437
00:59:50,460 --> 00:59:52,079
at all the other aspects of the working

1438
00:59:52,079 --> 00:59:54,119
group

1439
00:59:54,119 --> 00:59:56,160
um but that said I actually looked at

1440
00:59:56,160 --> 00:59:58,619
the open issues today so

1441
00:59:58,619 --> 01:00:02,819
um if we my gut feeling is that

1442
01:00:02,819 --> 01:00:03,559
um

1443
01:00:03,559 --> 01:00:07,500
we have several areas where um

1444
01:00:07,500 --> 01:00:10,640
where we have Open tickets for like

1445
01:00:10,640 --> 01:00:13,500
improving documentation of motivation

1446
01:00:13,500 --> 01:00:14,940
and how to

1447
01:00:14,940 --> 01:00:18,240
deploy that how to decide whether to use

1448
01:00:18,240 --> 01:00:21,240
Query instead of gets um explaining the

1449
01:00:21,240 --> 01:00:22,980
differences so these are mainly

1450
01:00:22,980 --> 01:00:24,900
editorial things

1451
01:00:24,900 --> 01:00:28,200
then there's the discussion about should

1452
01:00:28,200 --> 01:00:31,799
we actually specify how a get vary with

1453
01:00:31,799 --> 01:00:35,220
a farm-based query string can be

1454
01:00:35,220 --> 01:00:38,280
transformed into a query which what I

1455
01:00:38,280 --> 01:00:41,460
think Mark had that idea that we should

1456
01:00:41,460 --> 01:00:44,460
actually have that example

1457
01:00:44,460 --> 01:00:47,520
um in which case we actually should go

1458
01:00:47,520 --> 01:00:50,099
into defining the semantics of that

1459
01:00:50,099 --> 01:00:51,780
media type for query

1460
01:00:51,780 --> 01:00:55,799
so the whatever this early

1461
01:00:55,799 --> 01:01:00,119
um form based media type thing for post

1462
01:01:00,119 --> 01:01:02,400
it's called I keep forgetting the small

1463
01:01:02,400 --> 01:01:03,839
name so

1464
01:01:03,839 --> 01:01:06,660
um we probably should if if we say that

1465
01:01:06,660 --> 01:01:09,420
media types are query payload and it's a

1466
01:01:09,420 --> 01:01:12,119
definition what it means for query then

1467
01:01:12,119 --> 01:01:15,540
we should actually Define that for query

1468
01:01:15,540 --> 01:01:18,660
and then we have several open issues

1469
01:01:18,660 --> 01:01:19,980
about

1470
01:01:19,980 --> 01:01:23,040
um redirections

1471
01:01:23,339 --> 01:01:27,720
conditional queries and caching so

1472
01:01:27,720 --> 01:01:29,720
um

1473
01:01:30,420 --> 01:01:33,119
all of these probably could be

1474
01:01:33,119 --> 01:01:35,520
um dealt with by saying no we don't do

1475
01:01:35,520 --> 01:01:40,020
that or by spending lots of time trying

1476
01:01:40,020 --> 01:01:43,200
to get these things right so

1477
01:01:43,200 --> 01:01:45,480
um it depends a bit on the energy that

1478
01:01:45,480 --> 01:01:49,260
we have for going into these issues I

1479
01:01:49,260 --> 01:01:51,900
mean in theory because

1480
01:01:51,900 --> 01:01:54,059
probably a very small spec that doesn't

1481
01:01:54,059 --> 01:01:56,640
talk about these things but then we

1482
01:01:56,640 --> 01:01:58,500
would lose some of the benefits of

1483
01:01:58,500 --> 01:02:00,660
actually defining this

1484
01:02:00,660 --> 01:02:02,160
so

1485
01:02:02,160 --> 01:02:04,680
um depending on how much energy we have

1486
01:02:04,680 --> 01:02:08,099
it's little work remaining and a lot of

1487
01:02:08,099 --> 01:02:10,500
work remaining and

1488
01:02:10,500 --> 01:02:11,160
um

1489
01:02:11,160 --> 01:02:14,220
I'd like to see people volunteering to

1490
01:02:14,220 --> 01:02:16,500
actually help us nailing these things

1491
01:02:16,500 --> 01:02:18,799
down

1492
01:02:22,020 --> 01:02:23,700
that sounds good

1493
01:02:23,700 --> 01:02:26,099
um any comment or feedback on on this

1494
01:02:26,099 --> 01:02:26,819
spec

1495
01:02:26,819 --> 01:02:29,099
I think uh it may be just a matter of

1496
01:02:29,099 --> 01:02:30,780
finding the right time or waiting for

1497
01:02:30,780 --> 01:02:32,880
the right time when people do have

1498
01:02:32,880 --> 01:02:35,099
some bandwidth to work on this I I know

1499
01:02:35,099 --> 01:02:35,819
there are a lot of people still

1500
01:02:35,819 --> 01:02:38,540
interested in it

1501
01:02:38,880 --> 01:02:42,599
yeah so my feeling is that

1502
01:02:42,599 --> 01:02:46,740
um we need to get the to digest related

1503
01:02:46,740 --> 01:02:48,299
specs out

1504
01:02:48,299 --> 01:02:51,540
so that we can those need our attention

1505
01:02:51,540 --> 01:02:53,940
to get to last call and get published

1506
01:02:53,940 --> 01:02:57,059
and once they are out I think for this

1507
01:02:57,059 --> 01:03:00,420
working group the main open issues would

1508
01:03:00,420 --> 01:03:03,900
be then structured Fields revision and

1509
01:03:03,900 --> 01:03:04,740
um

1510
01:03:04,740 --> 01:03:09,119
resumable uploads and this thing and

1511
01:03:09,119 --> 01:03:11,099
then we should have more bandwidths for

1512
01:03:11,099 --> 01:03:12,180
that

1513
01:03:12,180 --> 01:03:14,940
sent a reasonable to me

1514
01:03:14,940 --> 01:03:18,079
uh bench warts

1515
01:03:21,599 --> 01:03:25,859
hi uh password I am very naive about

1516
01:03:25,859 --> 01:03:27,059
this topic

1517
01:03:27,059 --> 01:03:30,900
could you just uh explain if you could

1518
01:03:30,900 --> 01:03:34,500
why item potency key is not sufficient

1519
01:03:34,500 --> 01:03:36,480
uh you know when we started this work I

1520
01:03:36,480 --> 01:03:38,460
don't think we didn't have item potency

1521
01:03:38,460 --> 01:03:40,200
key at least that's my recollection

1522
01:03:40,200 --> 01:03:43,500
that's right so that's the query method

1523
01:03:43,500 --> 01:03:45,839
yes

1524
01:03:45,839 --> 01:03:48,720
uh my question is if we have post with

1525
01:03:48,720 --> 01:03:53,299
item potency key do we still need query

1526
01:03:55,500 --> 01:03:58,579
Julian do we address that

1527
01:03:58,740 --> 01:04:00,919
um

1528
01:04:01,520 --> 01:04:04,559
I agree that that's some overlap here

1529
01:04:04,559 --> 01:04:05,880
but

1530
01:04:05,880 --> 01:04:09,540
um very is not only about making things

1531
01:04:09,540 --> 01:04:12,720
item problems but also about making

1532
01:04:12,720 --> 01:04:15,359
things safe

1533
01:04:15,359 --> 01:04:18,839
and just because the client says I um

1534
01:04:18,839 --> 01:04:21,720
just because we have a new mechanism to

1535
01:04:21,720 --> 01:04:24,480
make a request repeatable doesn't make

1536
01:04:24,480 --> 01:04:27,720
that request safe right

1537
01:04:27,720 --> 01:04:31,020
uh sure could you give me an example of

1538
01:04:31,020 --> 01:04:33,599
a situation where that would

1539
01:04:33,599 --> 01:04:35,760
that where that would matter

1540
01:04:35,760 --> 01:04:38,760
to uh presumably to a party that doesn't

1541
01:04:38,760 --> 01:04:40,619
isn't already you know part of the

1542
01:04:40,619 --> 01:04:42,960
conversation doesn't understand the the

1543
01:04:42,960 --> 01:04:44,940
application layer semantics

1544
01:04:44,940 --> 01:04:48,660
I actually have to think about that okay

1545
01:04:48,660 --> 01:04:52,759
thank you it's a good question

1546
01:04:55,260 --> 01:04:57,240
okay

1547
01:04:57,240 --> 01:04:59,880
well thank you Julian uh so let's go

1548
01:04:59,880 --> 01:05:02,640
ahead and move on

1549
01:05:02,640 --> 01:05:04,619
uh we're skipping on prompted auth as

1550
01:05:04,619 --> 01:05:06,720
discussed uh so next up origin

1551
01:05:06,720 --> 01:05:08,880
deployment

1552
01:05:08,880 --> 01:05:10,319
sidish

1553
01:05:10,319 --> 01:05:12,059
hello

1554
01:05:12,059 --> 01:05:14,760
um I I hope you can hear me

1555
01:05:14,760 --> 01:05:16,740
indeed

1556
01:05:16,740 --> 01:05:18,240
let me just get done would it be

1557
01:05:18,240 --> 01:05:19,619
possible for you to share the slides

1558
01:05:19,619 --> 01:05:21,299
please I'm

1559
01:05:21,299 --> 01:05:24,740
trying to one second

1560
01:05:30,180 --> 01:05:31,520
there you go

1561
01:05:31,520 --> 01:05:34,680
uh thank you thank you Mark

1562
01:05:34,680 --> 01:05:37,200
um so okay I'll get started

1563
01:05:37,200 --> 01:05:40,260
um hi everyone I'm sudish a PhD student

1564
01:05:40,260 --> 01:05:43,619
at the University of Washington and on

1565
01:05:43,619 --> 01:05:45,900
behalf of all my co-authors at

1566
01:05:45,900 --> 01:05:48,900
cloudflare where I interned uh over the

1567
01:05:48,900 --> 01:05:51,420
spring and the summer I'm presenting

1568
01:05:51,420 --> 01:05:53,940
some of this work based on the

1569
01:05:53,940 --> 01:05:56,579
experiments and experiences uh in

1570
01:05:56,579 --> 01:05:59,880
deploying uh origin frames and trying to

1571
01:05:59,880 --> 01:06:01,819
experiment with connection coalescing

1572
01:06:01,819 --> 01:06:05,240
next slide please

1573
01:06:06,599 --> 01:06:09,359
so what is connection coalescing and

1574
01:06:09,359 --> 01:06:11,700
most of you here might might already be

1575
01:06:11,700 --> 01:06:15,180
aware it is the ability for the clients

1576
01:06:15,180 --> 01:06:17,520
to reuse an existing underlying

1577
01:06:17,520 --> 01:06:19,559
connection to retrieve any additional

1578
01:06:19,559 --> 01:06:22,920
resources and in the process uh prevent

1579
01:06:22,920 --> 01:06:25,680
the creation of any new connections so

1580
01:06:25,680 --> 01:06:27,900
let's let's try and understand this with

1581
01:06:27,900 --> 01:06:29,880
with this example here

1582
01:06:29,880 --> 01:06:32,099
um and due to domain sharding techniques

1583
01:06:32,099 --> 01:06:34,380
that are used by developers and web

1584
01:06:34,380 --> 01:06:36,900
administrators which are still remnants

1585
01:06:36,900 --> 01:06:40,740
of the old HTTP one protocol uh used to

1586
01:06:40,740 --> 01:06:43,799
trick browsers to uh uh to create

1587
01:06:43,799 --> 01:06:47,700
multiple TCP connections we find that to

1588
01:06:47,700 --> 01:06:50,280
load the example.com web page it is

1589
01:06:50,280 --> 01:06:52,740
dependent in this example on three other

1590
01:06:52,740 --> 01:06:55,319
domain sharded sub resources two of

1591
01:06:55,319 --> 01:06:57,839
these belong to the same domain uh while

1592
01:06:57,839 --> 01:07:01,619
One belongs to an external CDN and this

1593
01:07:01,619 --> 01:07:03,599
configuration is quite common in today's

1594
01:07:03,599 --> 01:07:05,880
web pages but it is interesting because

1595
01:07:05,880 --> 01:07:07,920
the client which is the browser in this

1596
01:07:07,920 --> 01:07:12,119
case it creates uh multiple potentially

1597
01:07:12,119 --> 01:07:14,940
blocking DNS queries to the resolver and

1598
01:07:14,940 --> 01:07:17,640
ends up in the best case uh with the IP

1599
01:07:17,640 --> 01:07:20,940
addresses matching the matching and the

1600
01:07:20,940 --> 01:07:23,579
connection then being reused

1601
01:07:23,579 --> 01:07:26,400
so next slide

1602
01:07:26,400 --> 01:07:27,720
but

1603
01:07:27,720 --> 01:07:30,660
but yeah if if we look deeper it it

1604
01:07:30,660 --> 01:07:32,280
looks like this the client makes a query

1605
01:07:32,280 --> 01:07:35,039
for example.com and the resolver returns

1606
01:07:35,039 --> 01:07:36,839
a set of IP addresses for the clients to

1607
01:07:36,839 --> 01:07:39,180
use the client chooses one of the IP

1608
01:07:39,180 --> 01:07:41,160
addresses and creates a TCP connection

1609
01:07:41,160 --> 01:07:43,079
followed by a TLS connection to

1610
01:07:43,079 --> 01:07:45,359
establish a secure Channel and then

1611
01:07:45,359 --> 01:07:47,339
retrieves the HTML content of the web

1612
01:07:47,339 --> 01:07:49,559
page with an HTTP request

1613
01:07:49,559 --> 01:07:53,579
great so what happens next and the

1614
01:07:53,579 --> 01:07:56,640
browser now understands the various sub

1615
01:07:56,640 --> 01:07:58,500
resource dependencies that are needed

1616
01:07:58,500 --> 01:08:01,200
and it creates the necessary DNS queries

1617
01:08:01,200 --> 01:08:03,780
this is this is where things get

1618
01:08:03,780 --> 01:08:05,220
interesting

1619
01:08:05,220 --> 01:08:08,240
um next slide please

1620
01:08:08,880 --> 01:08:12,059
so the the behavior that you see today

1621
01:08:12,059 --> 01:08:14,220
actually changes based on which client

1622
01:08:14,220 --> 01:08:16,620
you're using Chrome for example makes

1623
01:08:16,620 --> 01:08:20,040
the query for cdnjs in this case and

1624
01:08:20,040 --> 01:08:22,500
receives the two IP addresses ipb and

1625
01:08:22,500 --> 01:08:25,380
IPC in the response from the resolver

1626
01:08:25,380 --> 01:08:28,259
and since there was no active Connection

1627
01:08:28,259 --> 01:08:31,080
open to ipb which could have been there

1628
01:08:31,080 --> 01:08:34,198
from the first set of DNS responses it

1629
01:08:34,198 --> 01:08:35,939
actually creates a new connection and

1630
01:08:35,939 --> 01:08:38,279
retrieves the required content

1631
01:08:38,279 --> 01:08:40,939
next slide please but

1632
01:08:40,939 --> 01:08:44,460
Firefox on the other hand uh reuses the

1633
01:08:44,460 --> 01:08:46,738
underlying connection if the IP

1634
01:08:46,738 --> 01:08:48,779
addresses have a transitive relationship

1635
01:08:48,779 --> 01:08:51,540
between them so here in this case it

1636
01:08:51,540 --> 01:08:54,359
reuses the existing connection between a

1637
01:08:54,359 --> 01:08:57,060
two a two IPA to retrieve the content

1638
01:08:57,060 --> 01:08:59,819
from the sub resource because IP a B and

1639
01:08:59,819 --> 01:09:02,939
C are transitively related to each other

1640
01:09:02,939 --> 01:09:05,580
next question next next slide please

1641
01:09:05,580 --> 01:09:07,259
yeah

1642
01:09:07,259 --> 01:09:10,140
so so with with this with this

1643
01:09:10,140 --> 01:09:12,479
understanding in place we we established

1644
01:09:12,479 --> 01:09:15,000
our uh research questions and we set out

1645
01:09:15,000 --> 01:09:17,219
to understand how much of the internet

1646
01:09:17,219 --> 01:09:20,160
today is coalescable where are these sub

1647
01:09:20,160 --> 01:09:22,319
resources typically located and how are

1648
01:09:22,319 --> 01:09:25,020
they really distributed and these

1649
01:09:25,020 --> 01:09:26,939
represent the missed opportunities that

1650
01:09:26,939 --> 01:09:30,299
we have today and in and and what

1651
01:09:30,299 --> 01:09:33,540
changes can we do uh to to address these

1652
01:09:33,540 --> 01:09:35,759
opportunities and what would those even

1653
01:09:35,759 --> 01:09:40,738
look like so next slide so we we began

1654
01:09:40,738 --> 01:09:43,500
um our measurements by taking the most

1655
01:09:43,500 --> 01:09:45,899
popular half million Tranco domains

1656
01:09:45,899 --> 01:09:49,319
which is a a popular ranking list of of

1657
01:09:49,319 --> 01:09:51,299
the top million domains and we took half

1658
01:09:51,299 --> 01:09:53,880
million of those and we successfully

1659
01:09:53,880 --> 01:09:58,140
navigated to around 315 000 of them and

1660
01:09:58,140 --> 01:10:00,540
uh for for each of these navigations we

1661
01:10:00,540 --> 01:10:02,699
extracted the request timelines and this

1662
01:10:02,699 --> 01:10:05,219
helped us understand where most of the

1663
01:10:05,219 --> 01:10:07,620
sub resources were located and we find

1664
01:10:07,620 --> 01:10:10,860
that over 14 of the websites depend on

1665
01:10:10,860 --> 01:10:13,920
sub-resources which are served from

1666
01:10:13,920 --> 01:10:16,560
servers that are located in at least one

1667
01:10:16,560 --> 01:10:18,480
different autonomous system than their

1668
01:10:18,480 --> 01:10:19,260
own

1669
01:10:19,260 --> 01:10:21,360
and six percent of the websites today

1670
01:10:21,360 --> 01:10:24,719
currently rely fully on their on the sub

1671
01:10:24,719 --> 01:10:26,760
resources which are also served from the

1672
01:10:26,760 --> 01:10:28,860
same autonomous system but another

1673
01:10:28,860 --> 01:10:31,860
interesting part is that more than 50 of

1674
01:10:31,860 --> 01:10:34,260
the web pages that we browse to need

1675
01:10:34,260 --> 01:10:36,480
resources from no more than six

1676
01:10:36,480 --> 01:10:38,640
different autonomous systems to obtain

1677
01:10:38,640 --> 01:10:41,100
all uh to obtain the necessary

1678
01:10:41,100 --> 01:10:43,739
information and render the web page

1679
01:10:43,739 --> 01:10:47,340
so uh next slide please

1680
01:10:47,340 --> 01:10:49,860
so now that we have an idea of the

1681
01:10:49,860 --> 01:10:51,840
distribution of these sub resources we

1682
01:10:51,840 --> 01:10:53,640
wanted to understand where these

1683
01:10:53,640 --> 01:10:55,980
resources were located so a lot of these

1684
01:10:55,980 --> 01:10:58,080
websites rely on sub resources obtained

1685
01:10:58,080 --> 01:11:01,140
from Google cloudflare and Amazon and

1686
01:11:01,140 --> 01:11:03,480
the top 10 autonomous systems which you

1687
01:11:03,480 --> 01:11:06,179
see in this table are responsible for

1688
01:11:06,179 --> 01:11:08,520
over 60 percent of the total requests

1689
01:11:08,520 --> 01:11:11,159
for sub resources that we see in our

1690
01:11:11,159 --> 01:11:12,420
measurement scan

1691
01:11:12,420 --> 01:11:16,140
so building on top of the previous work

1692
01:11:16,140 --> 01:11:18,920
that was published in sitcom by by

1693
01:11:18,920 --> 01:11:22,020
Marwan Fayed and uh and and

1694
01:11:22,020 --> 01:11:25,620
collaborators we we approximate that the

1695
01:11:25,620 --> 01:11:27,840
potential for connection reuse to the

1696
01:11:27,840 --> 01:11:30,719
number of unique autonomous systems uh

1697
01:11:30,719 --> 01:11:32,400
is the is the number of unique

1698
01:11:32,400 --> 01:11:34,400
autonomous systems that that we contact

1699
01:11:34,400 --> 01:11:37,260
and these results show us that today's

1700
01:11:37,260 --> 01:11:38,940
connection coalescing opportunities

1701
01:11:38,940 --> 01:11:42,600
exist because of cdns uh next slide

1702
01:11:42,600 --> 01:11:44,780
please

1703
01:11:45,179 --> 01:11:47,580
so this brings us to an interesting

1704
01:11:47,580 --> 01:11:49,920
standard at the ietf called the HTTP

1705
01:11:49,920 --> 01:11:52,440
origin frame uh which was initially

1706
01:11:52,440 --> 01:11:56,880
proposed uh uh by Nottingham and nigren

1707
01:11:56,880 --> 01:11:59,520
from Akamai and despite the

1708
01:11:59,520 --> 01:12:01,440
standardization of the origin frames in

1709
01:12:01,440 --> 01:12:05,760
2018 as RFC 8336 it has not yet been

1710
01:12:05,760 --> 01:12:07,199
heavily adopted in the internet

1711
01:12:07,199 --> 01:12:08,880
ecosystem today

1712
01:12:08,880 --> 01:12:11,219
and this this could be because of a few

1713
01:12:11,219 --> 01:12:13,500
challenges posed by origin frames for

1714
01:12:13,500 --> 01:12:16,440
example the the default origin frame

1715
01:12:16,440 --> 01:12:19,080
allows servers sending the HTTP frames

1716
01:12:19,080 --> 01:12:21,719
to contain any arbitrary hostname

1717
01:12:21,719 --> 01:12:24,540
without authoritativeness and at the

1718
01:12:24,540 --> 01:12:26,640
client side very few clients uh even

1719
01:12:26,640 --> 01:12:28,380
support origin frames and from our

1720
01:12:28,380 --> 01:12:31,020
observation so far Firefox is the only

1721
01:12:31,020 --> 01:12:32,820
client which has a support for origin

1722
01:12:32,820 --> 01:12:35,040
frames but because of the issues with

1723
01:12:35,040 --> 01:12:36,960
authoritativeness and the contents of

1724
01:12:36,960 --> 01:12:39,540
the frame the the client continues to

1725
01:12:39,540 --> 01:12:41,760
incur an additional DNS query which

1726
01:12:41,760 --> 01:12:43,920
could have been prevented

1727
01:12:43,920 --> 01:12:47,040
and next slide please

1728
01:12:47,040 --> 01:12:49,679
but these challenges and the extra

1729
01:12:49,679 --> 01:12:52,380
potentially blocking DNS queries could

1730
01:12:52,380 --> 01:12:54,420
be removed by establishing some

1731
01:12:54,420 --> 01:12:56,520
Authority on the origin frames and it's

1732
01:12:56,520 --> 01:12:58,080
it's really really important to

1733
01:12:58,080 --> 01:13:00,480
understand that coalescing here not just

1734
01:13:00,480 --> 01:13:02,880
allows the ReUse of the underlying TCP

1735
01:13:02,880 --> 01:13:05,940
connection over which multiple TLS

1736
01:13:05,940 --> 01:13:07,560
handshakes could be made but instead

1737
01:13:07,560 --> 01:13:09,719
pushes the ReUse to its limit by

1738
01:13:09,719 --> 01:13:11,520
combining the TCP and TLS connection

1739
01:13:11,520 --> 01:13:16,440
reuse so here in in the request five uh

1740
01:13:16,440 --> 01:13:18,659
you you see that the HTTP request

1741
01:13:18,659 --> 01:13:20,520
without the TLs connections which you

1742
01:13:20,520 --> 01:13:23,120
saw before

1743
01:13:23,219 --> 01:13:25,940
um next slide please

1744
01:13:26,340 --> 01:13:29,640
so once a connection is established by

1745
01:13:29,640 --> 01:13:32,159
by the client to to the server the

1746
01:13:32,159 --> 01:13:33,659
server sends a hint to the client

1747
01:13:33,659 --> 01:13:35,880
telling which additional host names it

1748
01:13:35,880 --> 01:13:38,280
is authoritative for and it serves a

1749
01:13:38,280 --> 01:13:40,560
modified certificate I I think we

1750
01:13:40,560 --> 01:13:42,780
probably skip skip the slide

1751
01:13:42,780 --> 01:13:46,320
uh can we go back one yeah oh

1752
01:13:46,320 --> 01:13:47,400
sorry

1753
01:13:47,400 --> 01:13:48,900
yeah

1754
01:13:48,900 --> 01:13:51,600
yeah so uh this is where I was I I think

1755
01:13:51,600 --> 01:13:54,960
I I didn't see the little dots before

1756
01:13:54,960 --> 01:13:57,900
um yeah so uh

1757
01:13:57,900 --> 01:14:01,320
so um when the when the new connection

1758
01:14:01,320 --> 01:14:04,199
is established and uh the server sends a

1759
01:14:04,199 --> 01:14:06,179
hint to the to the client telling which

1760
01:14:06,179 --> 01:14:07,440
additional host names it is

1761
01:14:07,440 --> 01:14:09,600
authoritative for and it serves this

1762
01:14:09,600 --> 01:14:11,340
modified certificate which is it is

1763
01:14:11,340 --> 01:14:14,880
possible for uh for uh for Server uh

1764
01:14:14,880 --> 01:14:17,400
operators maintainers or the cdns to

1765
01:14:17,400 --> 01:14:19,560
actually change the certificates and

1766
01:14:19,560 --> 01:14:22,679
include additional DNS uh San extension

1767
01:14:22,679 --> 01:14:25,440
uh San uh names into the DNS and

1768
01:14:25,440 --> 01:14:28,260
extension of the TLs certificate

1769
01:14:28,260 --> 01:14:31,020
um so in the next slide please

1770
01:14:31,020 --> 01:14:34,320
so knowing this information we we go

1771
01:14:34,320 --> 01:14:36,480
back and look at the scans that we ran

1772
01:14:36,480 --> 01:14:39,239
and model the impact of using origin

1773
01:14:39,239 --> 01:14:42,239
frames and to do this we combined the

1774
01:14:42,239 --> 01:14:44,159
various resources from the same

1775
01:14:44,159 --> 01:14:45,719
autonomous system and carefully

1776
01:14:45,719 --> 01:14:48,420
truncated the DNS and TLS connection

1777
01:14:48,420 --> 01:14:52,080
times wherever possible recreating a new

1778
01:14:52,080 --> 01:14:55,380
rendered timeline of events so

1779
01:14:55,380 --> 01:14:57,179
let's talk about the example you see

1780
01:14:57,179 --> 01:14:59,880
here uh for for a website example.com

1781
01:14:59,880 --> 01:15:02,940
which is served by the CDN Network also

1782
01:15:02,940 --> 01:15:06,120
serving cdnhost.com you see that the you

1783
01:15:06,120 --> 01:15:08,040
see on the top the second and third

1784
01:15:08,040 --> 01:15:10,679
requests results into DNS queries and

1785
01:15:10,679 --> 01:15:13,020
TLS connections being established but

1786
01:15:13,020 --> 01:15:16,500
the fourth request for uh static dot uh

1787
01:15:16,500 --> 01:15:19,560
example.com is blocked until the third

1788
01:15:19,560 --> 01:15:22,260
one is actually complete uh in the case

1789
01:15:22,260 --> 01:15:24,300
where an origin frame is sent the

1790
01:15:24,300 --> 01:15:26,880
example.com stream 0 would also include

1791
01:15:26,880 --> 01:15:28,520
the information for

1792
01:15:28,520 --> 01:15:30,140
assets.cdnhost.com and

1793
01:15:30,140 --> 01:15:32,400
static.example.com and this would

1794
01:15:32,400 --> 01:15:35,460
prevent the additional DNS and TLS

1795
01:15:35,460 --> 01:15:37,620
connections and reuse them to retrieve

1796
01:15:37,620 --> 01:15:40,080
the resources so the the client

1797
01:15:40,080 --> 01:15:42,360
bottlenecks such as the wait time or

1798
01:15:42,360 --> 01:15:45,060
block time continue to remain and the

1799
01:15:45,060 --> 01:15:47,699
timeline is moved ahead by by

1800
01:15:47,699 --> 01:15:50,520
reconstructing these uh our model says

1801
01:15:50,520 --> 01:15:53,040
that deploying origin frames could

1802
01:15:53,040 --> 01:15:55,920
reduce the median number of DNS and TLS

1803
01:15:55,920 --> 01:15:59,040
connections by over 60 percent uh which

1804
01:15:59,040 --> 01:16:01,500
is which is shown uh point with the

1805
01:16:01,500 --> 01:16:03,300
arrow pointing to the pointing to the

1806
01:16:03,300 --> 01:16:06,260
green line on the on the left and

1807
01:16:06,260 --> 01:16:08,940
compared to the restricted IP address

1808
01:16:08,940 --> 01:16:11,159
based coalescing mechanisms that is in

1809
01:16:11,159 --> 01:16:14,040
the blue line and our actual measurement

1810
01:16:14,040 --> 01:16:16,260
which is in the red lines so the

1811
01:16:16,260 --> 01:16:18,360
theoretical modeling kind of implies

1812
01:16:18,360 --> 01:16:20,520
that the page load time for the websites

1813
01:16:20,520 --> 01:16:23,400
might also get faster because of the

1814
01:16:23,400 --> 01:16:24,900
smaller timelines

1815
01:16:24,900 --> 01:16:27,780
next slide please

1816
01:16:27,780 --> 01:16:30,600
so at cloudflare we ran some some large

1817
01:16:30,600 --> 01:16:33,600
scale experiments for both IP and origin

1818
01:16:33,600 --> 01:16:36,000
frame based coalescing for the IP based

1819
01:16:36,000 --> 01:16:38,159
coalescing we configured and coordinated

1820
01:16:38,159 --> 01:16:40,440
our DNS resolvers and the serving

1821
01:16:40,440 --> 01:16:42,659
infrastructure to respond to clients

1822
01:16:42,659 --> 01:16:45,840
with the same IP addresses for each of

1823
01:16:45,840 --> 01:16:48,480
the sub resources that uh that are

1824
01:16:48,480 --> 01:16:52,260
served by cloudflare and this allows

1825
01:16:52,260 --> 01:16:54,540
clients to reuse connections to the same

1826
01:16:54,540 --> 01:16:57,120
IP but performing such coordination

1827
01:16:57,120 --> 01:16:58,980
between the DNS and the serving

1828
01:16:58,980 --> 01:17:01,020
infrastructure is is particularly

1829
01:17:01,020 --> 01:17:02,880
challenging because of the various

1830
01:17:02,880 --> 01:17:04,980
traffic engineering rules and service

1831
01:17:04,980 --> 01:17:07,860
level guarantees the CDN networks might

1832
01:17:07,860 --> 01:17:11,820
have uh to me for for their customers

1833
01:17:11,820 --> 01:17:16,639
and uh next slide please so

1834
01:17:23,040 --> 01:17:27,500
my browser seems to have hold on well

1835
01:17:31,620 --> 01:17:33,600
I I see I see there's a there's a

1836
01:17:33,600 --> 01:17:35,280
question but

1837
01:17:35,280 --> 01:17:38,719
I can I can probably feel that

1838
01:17:39,060 --> 01:17:41,580
it looks like Jonathan is already on it

1839
01:17:41,580 --> 01:17:44,760
but I see Martin's question which is uh

1840
01:17:44,760 --> 01:17:46,920
does the modeling consider the effect of

1841
01:17:46,920 --> 01:17:49,080
the congestion control window on the

1842
01:17:49,080 --> 01:17:51,600
transfer of sub resources

1843
01:17:51,600 --> 01:17:53,520
um it it actually does not at least in

1844
01:17:53,520 --> 01:17:56,159
the the way we we did the modeling it

1845
01:17:56,159 --> 01:17:59,219
was uh it was kind of naive and we

1846
01:17:59,219 --> 01:18:01,320
wanted to see uh what the what the

1847
01:18:01,320 --> 01:18:03,179
overall possibility might look like but

1848
01:18:03,179 --> 01:18:06,179
I'm happy to take more questions later

1849
01:18:06,179 --> 01:18:09,000
yeah uh thank you Mark

1850
01:18:09,000 --> 01:18:11,040
um so

1851
01:18:11,040 --> 01:18:13,320
where was I yes

1852
01:18:13,320 --> 01:18:14,880
um yeah so

1853
01:18:14,880 --> 01:18:18,719
I mean overall uh the the deployment of

1854
01:18:18,719 --> 01:18:21,239
origin frames kind of gives us some some

1855
01:18:21,239 --> 01:18:24,719
advantages and this is uh there is this

1856
01:18:24,719 --> 01:18:27,719
knee there is no longer this need to

1857
01:18:27,719 --> 01:18:29,640
coordinate between the DNS and the

1858
01:18:29,640 --> 01:18:30,960
services it's and the serving

1859
01:18:30,960 --> 01:18:33,300
infrastructure itself and the CDN can

1860
01:18:33,300 --> 01:18:35,699
perform uh its own traffic engineering

1861
01:18:35,699 --> 01:18:38,100
practices without any disruptions but

1862
01:18:38,100 --> 01:18:40,440
with authoritative changes it allowed

1863
01:18:40,440 --> 01:18:41,820
clients

1864
01:18:41,820 --> 01:18:43,739
um it allows these clients to prevent

1865
01:18:43,739 --> 01:18:46,320
additional DNS queries but we also found

1866
01:18:46,320 --> 01:18:48,840
that approximately 92 percent of the

1867
01:18:48,840 --> 01:18:50,940
websites that we uh had in our

1868
01:18:50,940 --> 01:18:53,159
measurement and need less than 10

1869
01:18:53,159 --> 01:18:55,080
additions to their certificates to

1870
01:18:55,080 --> 01:18:57,420
achieve this effectiveness

1871
01:18:57,420 --> 01:18:59,820
um next slide please

1872
01:18:59,820 --> 01:19:01,020
so

1873
01:19:01,020 --> 01:19:03,480
over overall the usage of origin frames

1874
01:19:03,480 --> 01:19:06,360
makes coalescing practical while posing

1875
01:19:06,360 --> 01:19:08,219
relatively lesser additional overheads

1876
01:19:08,219 --> 01:19:10,920
on the network operators and it reduces

1877
01:19:10,920 --> 01:19:13,260
the additional communication costs at

1878
01:19:13,260 --> 01:19:16,380
the clients and has little difference to

1879
01:19:16,380 --> 01:19:19,440
the wired line activities that happen so

1880
01:19:19,440 --> 01:19:22,440
to validate our results uh we we sampled

1881
01:19:22,440 --> 01:19:24,900
5000 websites proxy by cloudflare's

1882
01:19:24,900 --> 01:19:27,360
infrastructure split them up into a

1883
01:19:27,360 --> 01:19:29,280
control and experimental group and

1884
01:19:29,280 --> 01:19:30,840
deployed origin frames for the

1885
01:19:30,840 --> 01:19:32,880
experiment group with modifications to

1886
01:19:32,880 --> 01:19:35,760
the certificates and our goal was to

1887
01:19:35,760 --> 01:19:37,920
attempt coalesce the connections from

1888
01:19:37,920 --> 01:19:40,620
the websites to cdnjs which they were

1889
01:19:40,620 --> 01:19:41,760
dependent on

1890
01:19:41,760 --> 01:19:45,440
and on the next slide please

1891
01:19:45,780 --> 01:19:48,120
so our results our results were very

1892
01:19:48,120 --> 01:19:50,040
interesting our results show that

1893
01:19:50,040 --> 01:19:52,380
connection coalescing with origin frames

1894
01:19:52,380 --> 01:19:56,219
does work in practice and overall in our

1895
01:19:56,219 --> 01:19:58,320
deployments we found 50 fewer

1896
01:19:58,320 --> 01:20:00,600
connections to cdnjs during the

1897
01:20:00,600 --> 01:20:03,360
experiment with no changes observed in

1898
01:20:03,360 --> 01:20:06,659
the control set and this has a lot of

1899
01:20:06,659 --> 01:20:08,580
implications this implies that there is

1900
01:20:08,580 --> 01:20:10,320
a reduced cryptographic verifications

1901
01:20:10,320 --> 01:20:12,659
needed to verify the certificates by the

1902
01:20:12,659 --> 01:20:15,840
clients and the active measurements from

1903
01:20:15,840 --> 01:20:19,140
clients also indicate that around 65 to

1904
01:20:19,140 --> 01:20:21,540
70 percent of the connections can

1905
01:20:21,540 --> 01:20:24,360
successfully be coalesced so another

1906
01:20:24,360 --> 01:20:26,400
implication is that there is reduced

1907
01:20:26,400 --> 01:20:28,800
number of connections uh for the CDN

1908
01:20:28,800 --> 01:20:30,600
operators which means fewer sockets

1909
01:20:30,600 --> 01:20:32,940
being used and as a result it allows

1910
01:20:32,940 --> 01:20:34,739
more clients to connect to the same

1911
01:20:34,739 --> 01:20:38,280
infrastructure so which definitely has a

1912
01:20:38,280 --> 01:20:39,960
set of advantages

1913
01:20:39,960 --> 01:20:43,500
next slide Mark please

1914
01:20:43,500 --> 01:20:46,260
so a natural question which follows up

1915
01:20:46,260 --> 01:20:48,360
uh based on the timelines that that I

1916
01:20:48,360 --> 01:20:51,000
showed before the modeling is what

1917
01:20:51,000 --> 01:20:52,860
happens to Performance and in our

1918
01:20:52,860 --> 01:20:55,320
modeling we find that if every operator

1919
01:20:55,320 --> 01:20:58,020
deployed origin frames efficiently it

1920
01:20:58,020 --> 01:20:59,640
could result in an improvement in page

1921
01:20:59,640 --> 01:21:02,159
load times but individually with only

1922
01:21:02,159 --> 01:21:04,199
cloudflare making the changes there is

1923
01:21:04,199 --> 01:21:06,239
very minor Improvement in page load

1924
01:21:06,239 --> 01:21:08,280
which we might be able to see

1925
01:21:08,280 --> 01:21:11,219
but our active deployments however did

1926
01:21:11,219 --> 01:21:14,040
not see any improvements for both IP or

1927
01:21:14,040 --> 01:21:16,860
origin based deployments but we suspect

1928
01:21:16,860 --> 01:21:18,780
this could be due to various other path

1929
01:21:18,780 --> 01:21:21,719
characteristics or bottleneck shares and

1930
01:21:21,719 --> 01:21:23,940
maybe it could benefit and we could

1931
01:21:23,940 --> 01:21:26,580
rerun these experiments again with more

1932
01:21:26,580 --> 01:21:28,320
operators who might who would deploy

1933
01:21:28,320 --> 01:21:31,320
origin frames so

1934
01:21:31,320 --> 01:21:33,239
currently instead of improved

1935
01:21:33,239 --> 01:21:35,699
performance or page load time metrics we

1936
01:21:35,699 --> 01:21:37,920
conservatively claim that the origin

1937
01:21:37,920 --> 01:21:41,760
frames makes performance no worse

1938
01:21:41,760 --> 01:21:42,360
um

1939
01:21:42,360 --> 01:21:45,259
next slide please

1940
01:21:47,219 --> 01:21:48,300
so

1941
01:21:48,300 --> 01:21:50,400
we'd like to stress that the performance

1942
01:21:50,400 --> 01:21:52,560
actually cannot be assumed to improve

1943
01:21:52,560 --> 01:21:54,600
and it should be avoided as the primary

1944
01:21:54,600 --> 01:21:56,340
motivation for us to do connection

1945
01:21:56,340 --> 01:21:59,340
coalescing the other implications like

1946
01:21:59,340 --> 01:22:02,820
the reduced uh server-side resources the

1947
01:22:02,820 --> 01:22:04,800
improvements to clients for their

1948
01:22:04,800 --> 01:22:06,840
cryptographic compute reduce State

1949
01:22:06,840 --> 01:22:08,640
maintenance and lesser burdens on

1950
01:22:08,640 --> 01:22:10,380
traffic engineering are prob are

1951
01:22:10,380 --> 01:22:12,300
stronger motivating factors to actually

1952
01:22:12,300 --> 01:22:14,760
deploy Connection coalescing in the

1953
01:22:14,760 --> 01:22:18,860
world next slide please

1954
01:22:20,520 --> 01:22:23,159
so one one key challenge we observed

1955
01:22:23,159 --> 01:22:25,260
which which might explain the lack of

1956
01:22:25,260 --> 01:22:27,300
adoption of origin frames is the lack of

1957
01:22:27,300 --> 01:22:29,520
support for server-side origin frames

1958
01:22:29,520 --> 01:22:32,820
and uh we we contribute uh an

1959
01:22:32,820 --> 01:22:34,560
implementation of origin frames with our

1960
01:22:34,560 --> 01:22:37,080
code changes to golang and the changes

1961
01:22:37,080 --> 01:22:39,120
are maintained in the golang and net

1962
01:22:39,120 --> 01:22:41,580
module Forks that are on the on the

1963
01:22:41,580 --> 01:22:45,420
GitHub uh cloudflare Arc next slide

1964
01:22:45,420 --> 01:22:47,540
please

1965
01:22:48,000 --> 01:22:50,520
so interestingly during our during our

1966
01:22:50,520 --> 01:22:52,560
experiments we realized that the origin

1967
01:22:52,560 --> 01:22:55,199
frames should be deployed with caution

1968
01:22:55,199 --> 01:22:58,620
and there are many non-rfc compliant

1969
01:22:58,620 --> 01:23:00,960
Network Stacks deployed out there which

1970
01:23:00,960 --> 01:23:03,719
might result into incorrect Behavior so

1971
01:23:03,719 --> 01:23:06,679
our experiments uncovered this uh

1972
01:23:06,679 --> 01:23:09,120
uncovered a compliance issue in the

1973
01:23:09,120 --> 01:23:12,179
network stack from a large antivirus and

1974
01:23:12,179 --> 01:23:15,000
an internet security software vendor and

1975
01:23:15,000 --> 01:23:17,159
the the internet security software

1976
01:23:17,159 --> 01:23:19,920
installed on client devices it did not

1977
01:23:19,920 --> 01:23:23,159
discard unknown HTTP frames as was

1978
01:23:23,159 --> 01:23:25,800
recommended in the specification but and

1979
01:23:25,800 --> 01:23:28,199
instead resulted in the tear down of the

1980
01:23:28,199 --> 01:23:30,179
entire connection so the clients could

1981
01:23:30,179 --> 01:23:33,239
not access some of the websites that

1982
01:23:33,239 --> 01:23:35,940
were in our experimental uh and that

1983
01:23:35,940 --> 01:23:38,580
were in our experiments uh during when

1984
01:23:38,580 --> 01:23:40,440
we ran these over the over the two week

1985
01:23:40,440 --> 01:23:41,460
period

1986
01:23:41,460 --> 01:23:44,219
uh next slide please

1987
01:23:44,219 --> 01:23:45,360
but

1988
01:23:45,360 --> 01:23:48,000
we really believe that the key motivator

1989
01:23:48,000 --> 01:23:50,699
for actually deploying origin frames are

1990
01:23:50,699 --> 01:23:52,260
really the Privacy benefits to the

1991
01:23:52,260 --> 01:23:54,659
ecosystem rather than performance and

1992
01:23:54,659 --> 01:23:56,640
but this needs additional investigation

1993
01:23:56,640 --> 01:23:59,520
but it's very simply put

1994
01:23:59,520 --> 01:24:02,880
um for each coalesced connection we hide

1995
01:24:02,880 --> 01:24:05,580
what would be an otherwise plain text

1996
01:24:05,580 --> 01:24:08,460
Sni field and it prevents any plain text

1997
01:24:08,460 --> 01:24:10,800
DNS queries from being leaked to the

1998
01:24:10,800 --> 01:24:15,420
network adversaries next slide please

1999
01:24:15,420 --> 01:24:18,900
but the most interesting one is resource

2000
01:24:18,900 --> 01:24:20,580
scheduling which is which is really

2001
01:24:20,580 --> 01:24:22,920
really exciting and the usage of origin

2002
01:24:22,920 --> 01:24:24,659
frames it moves the scheduling

2003
01:24:24,659 --> 01:24:27,560
opportunities to the resource endpoints

2004
01:24:27,560 --> 01:24:29,699
which are the servers and the clients

2005
01:24:29,699 --> 01:24:32,280
and without origin frames multiple

2006
01:24:32,280 --> 01:24:34,440
connections compete for the available

2007
01:24:34,440 --> 01:24:37,520
network capacity for example

2008
01:24:37,520 --> 01:24:40,739
the server sends two resources A and B

2009
01:24:40,739 --> 01:24:42,659
which are requested by the client and

2010
01:24:42,659 --> 01:24:45,360
multiple connections but the clients

2011
01:24:45,360 --> 01:24:47,820
might have made the requests in order

2012
01:24:47,820 --> 01:24:51,540
expecting a followed by B to generate uh

2013
01:24:51,540 --> 01:24:53,340
to render then as to render the page

2014
01:24:53,340 --> 01:24:56,460
faster and these additional connections

2015
01:24:56,460 --> 01:24:59,219
followed by all the undeterministic path

2016
01:24:59,219 --> 01:25:00,719
characteristics it might actually

2017
01:25:00,719 --> 01:25:03,420
results in the client receiving the sub

2018
01:25:03,420 --> 01:25:05,760
resources in a different order and

2019
01:25:05,760 --> 01:25:07,920
browsers continue to wait before being

2020
01:25:07,920 --> 01:25:09,780
able to successfully render this web

2021
01:25:09,780 --> 01:25:10,980
page

2022
01:25:10,980 --> 01:25:14,000
next slide please

2023
01:25:14,280 --> 01:25:16,080
sorry about it again

2024
01:25:16,080 --> 01:25:18,840
no no problem

2025
01:25:18,840 --> 01:25:22,219
we can get it back up

2026
01:25:29,340 --> 01:25:31,140
yeah thank you

2027
01:25:31,140 --> 01:25:34,140
um so so the the usage of uh of origin

2028
01:25:34,140 --> 01:25:36,659
frames it allows servers to schedule and

2029
01:25:36,659 --> 01:25:39,179
prioritize these resources and and send

2030
01:25:39,179 --> 01:25:42,360
higher priority resources uh uh and in

2031
01:25:42,360 --> 01:25:45,300
the process it'll be able to provide uh

2032
01:25:45,300 --> 01:25:47,699
the the necessary resources for the in

2033
01:25:47,699 --> 01:25:49,380
the order that the clients might might

2034
01:25:49,380 --> 01:25:52,800
actually want them and this work uh is

2035
01:25:52,800 --> 01:25:55,380
really a call to action for for other

2036
01:25:55,380 --> 01:25:57,600
operators and large content providers to

2037
01:25:57,600 --> 01:26:00,179
deploy origin frames there are various

2038
01:26:00,179 --> 01:26:03,420
benefits for the origin frames that and

2039
01:26:03,420 --> 01:26:05,580
maybe clients should also deploy support

2040
01:26:05,580 --> 01:26:07,620
for the authoritative origin frames

2041
01:26:07,620 --> 01:26:10,500
because uh the servers can only provide

2042
01:26:10,500 --> 01:26:12,120
the hints and they can't really enable

2043
01:26:12,120 --> 01:26:13,980
coalescing until the client actually

2044
01:26:13,980 --> 01:26:16,860
wants to enable coalescing but but this

2045
01:26:16,860 --> 01:26:18,300
also opens up a lot of exciting

2046
01:26:18,300 --> 01:26:21,000
opportunities for DNS early hints

2047
01:26:21,000 --> 01:26:25,199
certificate frames and like improved

2048
01:26:25,199 --> 01:26:27,360
adoption for the prefetch or preload

2049
01:26:27,360 --> 01:26:30,540
attributes while also allowing content

2050
01:26:30,540 --> 01:26:33,120
providers to efficiently perform in if

2051
01:26:33,120 --> 01:26:35,340
they would want HTML rewriting and

2052
01:26:35,340 --> 01:26:37,500
optimize the delivery of these resources

2053
01:26:37,500 --> 01:26:41,400
so um next slide so so with that

2054
01:26:41,400 --> 01:26:43,260
um I'm open to questions

2055
01:26:43,260 --> 01:26:45,239
right thank you

2056
01:26:45,239 --> 01:26:48,540
thank you Satish I think uh Tommy and I

2057
01:26:48,540 --> 01:26:50,159
had this presentation because it's

2058
01:26:50,159 --> 01:26:52,679
relevant to not only our past work but

2059
01:26:52,679 --> 01:26:54,239
our ongoing work and it's really good to

2060
01:26:54,239 --> 01:26:56,100
get these checkpoints to see how the

2061
01:26:56,100 --> 01:26:59,940
mechanisms we Define are going so uh uh

2062
01:26:59,940 --> 01:27:01,620
if people have questions or comments

2063
01:27:01,620 --> 01:27:02,880
please queue up

2064
01:27:02,880 --> 01:27:05,219
uh while folks queue up I just want to

2065
01:27:05,219 --> 01:27:08,760
note it's almost uh 11 A.M uh some of

2066
01:27:08,760 --> 01:27:11,520
you may realize it is Armistice Day so

2067
01:27:11,520 --> 01:27:14,100
this is at 11 o'clock uh at least in in

2068
01:27:14,100 --> 01:27:15,900
I believe commonwealth countries people

2069
01:27:15,900 --> 01:27:17,880
typically take one or two minutes of

2070
01:27:17,880 --> 01:27:20,880
silence to recognize the sacrifices of

2071
01:27:20,880 --> 01:27:23,760
people uh beforehand uh I don't think

2072
01:27:23,760 --> 01:27:25,739
we're going to pause proceedings here uh

2073
01:27:25,739 --> 01:27:27,719
to do that but if you want to leave the

2074
01:27:27,719 --> 01:27:30,600
room please feel free to do so and we'll

2075
01:27:30,600 --> 01:27:33,360
continue with the agenda thank you so

2076
01:27:33,360 --> 01:27:35,100
Brian

2077
01:27:35,100 --> 01:27:37,679
Brian call Yahoo I had a question so on

2078
01:27:37,679 --> 01:27:39,840
your traffic that you simulated did you

2079
01:27:39,840 --> 01:27:41,520
do any like browser caching or anything

2080
01:27:41,520 --> 01:27:42,600
like that

2081
01:27:42,600 --> 01:27:45,179
was it like just clear cache or

2082
01:27:45,179 --> 01:27:48,120
uh yeah so so for all the uh

2083
01:27:48,120 --> 01:27:50,040
measurements that we ran uh we've done

2084
01:27:50,040 --> 01:27:53,159
it with clean profiles with no caching

2085
01:27:53,159 --> 01:27:54,960
um and the reason was we wanted to

2086
01:27:54,960 --> 01:27:58,199
actually observe uh the the behavior on

2087
01:27:58,199 --> 01:28:01,260
the network itself if if browsers cache

2088
01:28:01,260 --> 01:28:03,360
a lot of resources we would not really

2089
01:28:03,360 --> 01:28:05,760
see the need for coalescing

2090
01:28:05,760 --> 01:28:08,639
um but we wanted to study uh the impacts

2091
01:28:08,639 --> 01:28:10,560
of coalescing itself so we ignored the

2092
01:28:10,560 --> 01:28:13,260
aspect of caching completely

2093
01:28:13,260 --> 01:28:15,420
yeah I was just wondering if you if you

2094
01:28:15,420 --> 01:28:17,580
thought about like doing page reloads or

2095
01:28:17,580 --> 01:28:19,380
things like that and see how it differs

2096
01:28:19,380 --> 01:28:22,139
between like cold cash versus a warmer

2097
01:28:22,139 --> 01:28:23,040
cash

2098
01:28:23,040 --> 01:28:25,440
yeah yeah that's that's definitely a

2099
01:28:25,440 --> 01:28:28,980
very very uh valid question and I I

2100
01:28:28,980 --> 01:28:32,718
don't really have an answer for that

2101
01:28:34,800 --> 01:28:37,739
hang on um just wondering you didn't

2102
01:28:37,739 --> 01:28:40,860
really um lay out sort of the exact uh

2103
01:28:40,860 --> 01:28:45,540
type of ways H2 H3 uh congestion

2104
01:28:45,540 --> 01:28:47,520
controls all stuff I guess you won't you

2105
01:28:47,520 --> 01:28:49,139
won't always necessarily aware of it all

2106
01:28:49,139 --> 01:28:50,639
but I wondered what sort of breakdown

2107
01:28:50,639 --> 01:28:52,500
was in terms of the different

2108
01:28:52,500 --> 01:28:54,540
protocols because that could

2109
01:28:54,540 --> 01:28:56,699
affect the performance quite a bit I

2110
01:28:56,699 --> 01:28:58,560
mean because it's just using

2111
01:28:58,560 --> 01:29:01,739
one one over TLS then um as opposed to

2112
01:29:01,739 --> 01:29:06,000
say H3 over quick uh could make it quite

2113
01:29:06,000 --> 01:29:07,260
a big difference when you're maybe

2114
01:29:07,260 --> 01:29:10,080
trying to put multiple requests down the

2115
01:29:10,080 --> 01:29:10,860
same

2116
01:29:10,860 --> 01:29:13,500
time yeah sorry I I really should have

2117
01:29:13,500 --> 01:29:16,260
made it clearer in in the start but uh

2118
01:29:16,260 --> 01:29:19,380
we were focused only on http 2.

2119
01:29:19,380 --> 01:29:22,739
HTTP 2 okay right yeah

2120
01:29:22,739 --> 01:29:24,659
fine yeah so I guess I don't know I

2121
01:29:24,659 --> 01:29:27,420
guess the performance stuff may come

2122
01:29:27,420 --> 01:29:29,639
with some I guess some of that so that

2123
01:29:29,639 --> 01:29:30,780
you don't have so much head of line

2124
01:29:30,780 --> 01:29:32,400
blocking issues but then potentially

2125
01:29:32,400 --> 01:29:34,860
that might be an issue that

2126
01:29:34,860 --> 01:29:37,139
holds you up uh

2127
01:29:37,139 --> 01:29:40,260
okay thanks yeah thank you I I

2128
01:29:40,260 --> 01:29:41,820
definitely think there are a lot of

2129
01:29:41,820 --> 01:29:44,159
interesting places to like study

2130
01:29:44,159 --> 01:29:47,120
performance a lot more

2131
01:29:52,739 --> 01:29:55,800
okay thank you very much and and we

2132
01:29:55,800 --> 01:29:57,120
encourage more work like this I think

2133
01:29:57,120 --> 01:29:58,560
this is great to get this kind of

2134
01:29:58,560 --> 01:29:59,580
feedback

2135
01:29:59,580 --> 01:30:01,500
thank you thank you um thank you for

2136
01:30:01,500 --> 01:30:03,860
having me

2137
01:30:04,679 --> 01:30:06,179
okay

2138
01:30:06,179 --> 01:30:08,880
uh next on the agenda Ben are you ready

2139
01:30:08,880 --> 01:30:12,440
with modern http proxies

2140
01:30:25,739 --> 01:30:28,459
go ahead Ben

2141
01:30:30,719 --> 01:30:32,900
foreign

2142
01:30:38,340 --> 01:30:45,540
so uh in HTTP 1.1 and even prior uh this

2143
01:30:45,540 --> 01:30:48,540
is what proxies looked like so this is

2144
01:30:48,540 --> 01:30:50,820
just a reminder this is what proxies

2145
01:30:50,820 --> 01:30:53,340
have looked like for a long time

2146
01:30:53,340 --> 01:30:58,080
uh so in for an HTTP request proxy you

2147
01:30:58,080 --> 01:31:00,300
use this thing called absolute URI form

2148
01:31:00,300 --> 01:31:03,120
where you take the path the the URI that

2149
01:31:03,120 --> 01:31:04,560
you're trying to fetch and you put that

2150
01:31:04,560 --> 01:31:08,040
in the request line and then in HTTP 1.1

2151
01:31:08,040 --> 01:31:09,900
you can have a different host header

2152
01:31:09,900 --> 01:31:11,580
that

2153
01:31:11,580 --> 01:31:14,520
uh that identifies the proxy

2154
01:31:14,520 --> 01:31:19,260
uh and the same uh sort of arrangement

2155
01:31:19,260 --> 01:31:21,300
goes in Connect only this time instead

2156
01:31:21,300 --> 01:31:23,280
of absolute URI form it's an extra

2157
01:31:23,280 --> 01:31:28,460
special request form where the the

2158
01:31:28,460 --> 01:31:32,760
desired resource is is replaced by a

2159
01:31:32,760 --> 01:31:34,800
host colon port

2160
01:31:34,800 --> 01:31:37,340
string

2161
01:31:37,340 --> 01:31:40,260
these have some

2162
01:31:40,260 --> 01:31:44,219
uh really I think uh unfortunate

2163
01:31:44,219 --> 01:31:45,719
properties

2164
01:31:45,719 --> 01:31:48,420
uh one is that you can only have one

2165
01:31:48,420 --> 01:31:51,120
proxy per origin so unlike everything

2166
01:31:51,120 --> 01:31:54,719
else in HTTP which is uh you know

2167
01:31:54,719 --> 01:31:57,840
operate it exists on a path so you can

2168
01:31:57,840 --> 01:32:01,020
have more than one on every origin these

2169
01:32:01,020 --> 01:32:03,659
proxy Services don't have a path of

2170
01:32:03,659 --> 01:32:05,340
their own the service is only identified

2171
01:32:05,340 --> 01:32:07,020
by this host header

2172
01:32:07,020 --> 01:32:08,280
but

2173
01:32:08,280 --> 01:32:09,719
um and then

2174
01:32:09,719 --> 01:32:11,699
even sort of to make it even worse

2175
01:32:11,699 --> 01:32:15,480
virtual hosting of these things is

2176
01:32:15,480 --> 01:32:18,120
essentially impossible so you can't

2177
01:32:18,120 --> 01:32:23,219
share multiple uh proxy Origins on a

2178
01:32:23,219 --> 01:32:26,880
single IP address yeah you could in HTTP

2179
01:32:26,880 --> 01:32:29,219
1.1 using this host header but starting

2180
01:32:29,219 --> 01:32:31,980
in HTTP 2 there is no equivalent of

2181
01:32:31,980 --> 01:32:34,139
absolute URI form there's if there's

2182
01:32:34,139 --> 01:32:36,239
only it's only possible to express a

2183
01:32:36,239 --> 01:32:39,900
single Authority for each request so

2184
01:32:39,900 --> 01:32:42,600
that means the the proxy just has to

2185
01:32:42,600 --> 01:32:46,199
know what the actual authority of the

2186
01:32:46,199 --> 01:32:48,179
proxy is it's not expressed in the

2187
01:32:48,179 --> 01:32:50,480
request

2188
01:32:50,639 --> 01:32:53,760
with TCP transport proxies the group so

2189
01:32:53,760 --> 01:32:56,159
like HTTP connect the same problems

2190
01:32:56,159 --> 01:32:59,340
apply plus uh I just wanted to note that

2191
01:32:59,340 --> 01:33:03,300
like if you have a mix of ipv4 and IPv6

2192
01:33:03,300 --> 01:33:05,699
addresses uh it would be nice to be able

2193
01:33:05,699 --> 01:33:08,280
to get happy eyeballs from that uh from

2194
01:33:08,280 --> 01:33:10,260
the proxy but instead all you have all

2195
01:33:10,260 --> 01:33:12,780
you can do is pass single IP addresses

2196
01:33:12,780 --> 01:33:14,580
to the proxy

2197
01:33:14,580 --> 01:33:17,360
next slide

2198
01:33:18,480 --> 01:33:20,460
thank you

2199
01:33:20,460 --> 01:33:23,699
so uh we have the mask working group for

2200
01:33:23,699 --> 01:33:26,400
the past couple years and The Mask

2201
01:33:26,400 --> 01:33:28,560
working group had to solve essentially

2202
01:33:28,560 --> 01:33:30,900
the same problems were for UDP and IP

2203
01:33:30,900 --> 01:33:34,380
proxying and they dodged all of these

2204
01:33:34,380 --> 01:33:37,380
these problems they recognized that we

2205
01:33:37,380 --> 01:33:39,020
have these problems with the old

2206
01:33:39,020 --> 01:33:41,159
mechanisms and so they came up with

2207
01:33:41,159 --> 01:33:43,860
proxy mechanisms that so that going

2208
01:33:43,860 --> 01:33:46,020
forward we don't have this problem

2209
01:33:46,020 --> 01:33:49,260
so there the way it works is that the

2210
01:33:49,260 --> 01:33:51,719
proxy services are identified by URI

2211
01:33:51,719 --> 01:33:52,980
templates

2212
01:33:52,980 --> 01:33:57,360
and then the the the template encodes

2213
01:33:57,360 --> 01:34:02,460
the host the uh the host of the target

2214
01:34:02,460 --> 01:34:06,659
into the URI path of the request

2215
01:34:06,659 --> 01:34:09,179
so that that makes it entirely possible

2216
01:34:09,179 --> 01:34:11,340
to have

2217
01:34:11,340 --> 01:34:12,540
uh

2218
01:34:12,540 --> 01:34:14,940
an explicit proxy Authority which is

2219
01:34:14,940 --> 01:34:18,420
clearly separate from the the

2220
01:34:18,420 --> 01:34:20,580
host that you're trying to reach next

2221
01:34:20,580 --> 01:34:22,820
slide

2222
01:34:30,659 --> 01:34:33,860
that's oh

2223
01:34:35,219 --> 01:34:37,880
expense

2224
01:34:40,440 --> 01:34:43,440
Ben

2225
01:34:44,400 --> 01:34:46,620
he'll be back okay he should be back

2226
01:34:46,620 --> 01:34:48,179
shortly he's happened he's had this

2227
01:34:48,179 --> 01:34:50,639
happen several times this week okay all

2228
01:34:50,639 --> 01:34:52,800
right there he is hi

2229
01:34:52,800 --> 01:34:55,260
uh

2230
01:34:55,260 --> 01:34:57,840
so this draft just proposes to take that

2231
01:34:57,840 --> 01:35:02,760
strategy and uh and use it to create a

2232
01:35:02,760 --> 01:35:05,639
modern version of these classic HTTP

2233
01:35:05,639 --> 01:35:10,920
proxy functions so uh connect TCP is the

2234
01:35:10,920 --> 01:35:13,080
most the more obvious one certainly so

2235
01:35:13,080 --> 01:35:15,000
it uses extended connect just like

2236
01:35:15,000 --> 01:35:17,400
connect UDP and connect IP with a new

2237
01:35:17,400 --> 01:35:19,080
protocol

2238
01:35:19,080 --> 01:35:21,139
it does not use the capsule protocol

2239
01:35:21,139 --> 01:35:23,460
complicated thing that was invented for

2240
01:35:23,460 --> 01:35:25,500
connect UDP and web transport because it

2241
01:35:25,500 --> 01:35:27,900
is needed

2242
01:35:27,900 --> 01:35:30,719
and the HTTP request proxy just works

2243
01:35:30,719 --> 01:35:33,120
exactly like like old-fashioned forward

2244
01:35:33,120 --> 01:35:36,900
proxies today except that we we Define

2245
01:35:36,900 --> 01:35:39,900
this URI template that contains in

2246
01:35:39,900 --> 01:35:44,540
another URI inside it next slide

2247
01:35:45,800 --> 01:35:49,440
so this is a specific proposal and so

2248
01:35:49,440 --> 01:35:51,659
there are a lot of interesting details

2249
01:35:51,659 --> 01:35:54,840
about this specific proposal that we I'm

2250
01:35:54,840 --> 01:35:57,360
happy to talk through

2251
01:35:57,360 --> 01:36:00,480
but the most important thing I want to

2252
01:36:00,480 --> 01:36:03,659
get to the working group is if you were

2253
01:36:03,659 --> 01:36:08,780
designing HTTP request proxying or

2254
01:36:08,780 --> 01:36:13,100
HTTP connect today how would you do it

2255
01:36:13,100 --> 01:36:16,199
and uh you know can we can we write a

2256
01:36:16,199 --> 01:36:18,900
draft to say uh okay here's how you do

2257
01:36:18,900 --> 01:36:20,580
it you know in the way that we think

2258
01:36:20,580 --> 01:36:23,719
would really be best today

2259
01:36:23,880 --> 01:36:26,600
next slide

2260
01:36:26,719 --> 01:36:30,540
so this is a zero zero design

2261
01:36:30,540 --> 01:36:32,159
um

2262
01:36:32,159 --> 01:36:35,820
it's uh it does happen to line up nicely

2263
01:36:35,820 --> 01:36:39,600
with uh another draft that I I wrote uh

2264
01:36:39,600 --> 01:36:42,480
about taking a bunch of different kinds

2265
01:36:42,480 --> 01:36:44,400
of things like taking the the connect

2266
01:36:44,400 --> 01:36:48,239
UDP and and connect TCP and and and do

2267
01:36:48,239 --> 01:36:50,580
and and putting them all in in a nice

2268
01:36:50,580 --> 01:36:52,320
collection together so you can use them

2269
01:36:52,320 --> 01:36:55,280
as a unit

2270
01:36:56,280 --> 01:36:59,639
um and this uh I would like to see this

2271
01:36:59,639 --> 01:37:01,820
draft adopted

2272
01:37:01,820 --> 01:37:05,040
there's some um Charter scoping

2273
01:37:05,040 --> 01:37:07,139
questions about what could fit in the

2274
01:37:07,139 --> 01:37:09,480
mask working group mask is re-chartering

2275
01:37:09,480 --> 01:37:11,699
but it's definitely not clear to me that

2276
01:37:11,699 --> 01:37:15,320
uh any of this work would fit in mask

2277
01:37:15,320 --> 01:37:19,340
even after a retarder

2278
01:37:20,820 --> 01:37:22,139
that's it

2279
01:37:22,139 --> 01:37:24,960
okay so any questions feedback for Ben

2280
01:37:24,960 --> 01:37:27,440
Martin

2281
01:37:29,100 --> 01:37:31,920
hi Ben I think uh

2282
01:37:31,920 --> 01:37:33,420
you've probably already received this

2283
01:37:33,420 --> 01:37:35,699
feedback but I think that there's a

2284
01:37:35,699 --> 01:37:37,139
number of people who have different

2285
01:37:37,139 --> 01:37:39,780
levels of comfort with the two

2286
01:37:39,780 --> 01:37:42,239
different pieces in this draft I think

2287
01:37:42,239 --> 01:37:45,540
the TCP connect thing is something that

2288
01:37:45,540 --> 01:37:46,560
a lot of people have expressed the

2289
01:37:46,560 --> 01:37:49,320
interest in at various times and the

2290
01:37:49,320 --> 01:37:50,940
idea that you might be able to ask a

2291
01:37:50,940 --> 01:37:52,800
particular resource for a connection to

2292
01:37:52,800 --> 01:37:55,679
a remote host is an interesting one

2293
01:37:55,679 --> 01:37:59,580
the request proxying side of things is

2294
01:37:59,580 --> 01:38:03,960
is far less clear in terms of intent

2295
01:38:03,960 --> 01:38:06,000
and I I think I'd like to see that split

2296
01:38:06,000 --> 01:38:07,020
out

2297
01:38:07,020 --> 01:38:08,639
um that that's the one that engages with

2298
01:38:08,639 --> 01:38:11,100
all the difficult questions about

2299
01:38:11,100 --> 01:38:14,580
um well why don't you just put the URL

2300
01:38:14,580 --> 01:38:16,620
of the Target and send that request to

2301
01:38:16,620 --> 01:38:19,139
the proxy without any need to have an

2302
01:38:19,139 --> 01:38:21,360
identifier for the proxy

2303
01:38:21,360 --> 01:38:25,440
or why don't you tunnel binary messages

2304
01:38:25,440 --> 01:38:27,540
those those sorts of questions are

2305
01:38:27,540 --> 01:38:30,120
things that we would have to go through

2306
01:38:30,120 --> 01:38:32,100
there it may be can we go back one slide

2307
01:38:32,100 --> 01:38:34,340
please

2308
01:38:35,699 --> 01:38:37,380
I just want to point out that that's my

2309
01:38:37,380 --> 01:38:40,560
last bullet yeah I I picked that up off

2310
01:38:40,560 --> 01:38:42,840
your slide but I think it may actually

2311
01:38:42,840 --> 01:38:44,520
be the case that we want to do multiples

2312
01:38:44,520 --> 01:38:46,440
of them to one of Mark's earlier points

2313
01:38:46,440 --> 01:38:48,000
about things that the number of ways in

2314
01:38:48,000 --> 01:38:51,239
which these things can be put together

2315
01:38:51,239 --> 01:38:54,179
uh manifold and so

2316
01:38:54,179 --> 01:38:56,219
um maybe

2317
01:38:56,219 --> 01:38:58,020
splitting that work out is a little

2318
01:38:58,020 --> 01:38:59,159
little bit

2319
01:38:59,159 --> 01:39:00,960
um more uh

2320
01:39:00,960 --> 01:39:04,500
uh makes the makes the easy part easier

2321
01:39:04,500 --> 01:39:06,659
okay I'd also appreciate your thoughts

2322
01:39:06,659 --> 01:39:09,659
on where that would go I could argue for

2323
01:39:09,659 --> 01:39:13,500
you know mask or hdubus or HTTP API

2324
01:39:13,500 --> 01:39:15,780
I think I think I would rule out the

2325
01:39:15,780 --> 01:39:19,199
HTTP API working group for this but

2326
01:39:19,199 --> 01:39:21,480
um this is something that this group

2327
01:39:21,480 --> 01:39:23,880
could take on very easily uh I think

2328
01:39:23,880 --> 01:39:26,340
this group could also say mask is

2329
01:39:26,340 --> 01:39:27,780
capable of doing it but I think the

2330
01:39:27,780 --> 01:39:28,739
decision

2331
01:39:28,739 --> 01:39:30,420
starts here

2332
01:39:30,420 --> 01:39:33,480
at this point because the protocol is on

2333
01:39:33,480 --> 01:39:35,100
here and this is really core protocol

2334
01:39:35,100 --> 01:39:36,719
mechanics

2335
01:39:36,719 --> 01:39:38,760
okay

2336
01:39:38,760 --> 01:39:41,300
Mike

2337
01:39:45,239 --> 01:39:49,080
Bishop I would Echo a lot of that I I

2338
01:39:49,080 --> 01:39:52,080
really like the reworking of connect for

2339
01:39:52,080 --> 01:39:55,380
TCP I'm not totally sold on the request

2340
01:39:55,380 --> 01:39:57,540
proxying

2341
01:39:57,540 --> 01:40:01,080
um if if we do one or both of those I

2342
01:40:01,080 --> 01:40:03,540
would not be surprised to see it in mask

2343
01:40:03,540 --> 01:40:06,300
but also

2344
01:40:06,300 --> 01:40:08,340
from the retarder discussion earlier

2345
01:40:08,340 --> 01:40:10,320
this week it does not sound like they

2346
01:40:10,320 --> 01:40:13,380
want to put that in their scope and I

2347
01:40:13,380 --> 01:40:15,239
think it certainly is in scope for this

2348
01:40:15,239 --> 01:40:16,440
working group

2349
01:40:16,440 --> 01:40:19,560
so I would like to see at least the TCP

2350
01:40:19,560 --> 01:40:23,219
connect version progress here and maybe

2351
01:40:23,219 --> 01:40:27,000
we talk about what the future is of

2352
01:40:27,000 --> 01:40:29,880
passing the HTTP messages apparently

2353
01:40:29,880 --> 01:40:31,260
unencrypted

2354
01:40:31,260 --> 01:40:35,659
which maybe you just use Ohio for that

2355
01:40:35,760 --> 01:40:38,460
so for for the Ojai I should say that is

2356
01:40:38,460 --> 01:40:41,639
my intended use case for

2357
01:40:41,639 --> 01:40:44,880
um for this HTTP request proxy

2358
01:40:44,880 --> 01:40:46,980
functionality

2359
01:40:46,980 --> 01:40:49,620
um this is somewhat controversial I

2360
01:40:49,620 --> 01:40:51,659
guess within the o-hai context but right

2361
01:40:51,659 --> 01:40:54,120
now Ojai doesn't Ojai essentially says

2362
01:40:54,120 --> 01:40:56,219
you need something that looks exactly

2363
01:40:56,219 --> 01:40:58,860
like an HTTP forward proxy but we don't

2364
01:40:58,860 --> 01:41:03,060
specify how you uh how you actually use

2365
01:41:03,060 --> 01:41:06,420
it that's considered out of scope so I

2366
01:41:06,420 --> 01:41:09,239
want to come up with a standard for that

2367
01:41:09,239 --> 01:41:10,860
otherwise it's essentially by private

2368
01:41:10,860 --> 01:41:13,280
arrangement

2369
01:41:13,800 --> 01:41:18,139
I'm going to close the queue soon Eric

2370
01:41:20,000 --> 01:41:24,060
uh yeah some minor points we can debate

2371
01:41:24,060 --> 01:41:25,860
in the futurist side I think this is a

2372
01:41:25,860 --> 01:41:28,800
good idea I like it I think this is the

2373
01:41:28,800 --> 01:41:30,780
right working group for it as I said in

2374
01:41:30,780 --> 01:41:32,340
The Mask working group earlier this week

2375
01:41:32,340 --> 01:41:33,659
I think it's

2376
01:41:33,659 --> 01:41:35,820
this is General proxy and the mass group

2377
01:41:35,820 --> 01:41:37,800
is trying to or at least I want them to

2378
01:41:37,800 --> 01:41:39,540
avoid becoming the general proxy and

2379
01:41:39,540 --> 01:41:40,619
working group

2380
01:41:40,619 --> 01:41:43,320
the one concern I have before I say yes

2381
01:41:43,320 --> 01:41:45,540
let's adopt this now is well I think

2382
01:41:45,540 --> 01:41:46,920
this is a good idea and I like it I

2383
01:41:46,920 --> 01:41:48,840
don't know if it's enough of a good idea

2384
01:41:48,840 --> 01:41:51,480
for all the Legacy proxy implementations

2385
01:41:51,480 --> 01:41:53,940
to rewrite it onto this new way of doing

2386
01:41:53,940 --> 01:41:55,920
things so I'd like to see a little bit

2387
01:41:55,920 --> 01:41:58,739
more discussion of the use cases the

2388
01:41:58,739 --> 01:42:00,420
clients we think will want to implement

2389
01:42:00,420 --> 01:42:01,860
the servers that we think will want to

2390
01:42:01,860 --> 01:42:03,780
implement this I know you mentioned Ohio

2391
01:42:03,780 --> 01:42:06,420
Manago so maybe there's stuff to do

2392
01:42:06,420 --> 01:42:07,860
there but I just like to see a little

2393
01:42:07,860 --> 01:42:10,500
more discussion of what this what we

2394
01:42:10,500 --> 01:42:12,719
think this will be used for besides just

2395
01:42:12,719 --> 01:42:14,340
hey everyone rewrite your old stuff

2396
01:42:14,340 --> 01:42:16,920
unless we get a bunch of people saying

2397
01:42:16,920 --> 01:42:18,000
yes we're going to rewrite all of our

2398
01:42:18,000 --> 01:42:20,960
old stuff to use this

2399
01:42:22,199 --> 01:42:24,480
okay thanks

2400
01:42:24,480 --> 01:42:26,900
David

2401
01:42:30,440 --> 01:42:34,500
uh David schenazi mask Enthusiast

2402
01:42:34,500 --> 01:42:37,260
um I just want to Echo what's been said

2403
01:42:37,260 --> 01:42:38,460
before

2404
01:42:38,460 --> 01:42:40,739
um we're over at Google we're building

2405
01:42:40,739 --> 01:42:43,980
new privacy proxies and

2406
01:42:43,980 --> 01:42:45,600
in the case we're building stuff from

2407
01:42:45,600 --> 01:42:48,119
scratch doing the new connect TCP sounds

2408
01:42:48,119 --> 01:42:50,699
interesting

2409
01:42:50,699 --> 01:42:52,560
um the we don't have a use case for the

2410
01:42:52,560 --> 01:42:54,420
other bit though and as Martin pointed

2411
01:42:54,420 --> 01:42:56,699
out there would be dragons so I would

2412
01:42:56,699 --> 01:42:58,139
unbundle the two

2413
01:42:58,139 --> 01:43:00,000
and then on the question of the working

2414
01:43:00,000 --> 01:43:03,239
group uh one Echo X Point like the the

2415
01:43:03,239 --> 01:43:06,060
goal of the at least as I personally

2416
01:43:06,060 --> 01:43:07,800
would like to see it the goal of the new

2417
01:43:07,800 --> 01:43:11,100
Charter of mask is not to become the all

2418
01:43:11,100 --> 01:43:13,199
of the proxy things place

2419
01:43:13,199 --> 01:43:14,940
um so https

2420
01:43:14,940 --> 01:43:16,679
um sounds preferable but I'm not

2421
01:43:16,679 --> 01:43:18,540
strongly opposed to this happening in

2422
01:43:18,540 --> 01:43:21,679
mask thanks

2423
01:43:22,560 --> 01:43:23,940
thanks David

2424
01:43:23,940 --> 01:43:27,060
um and so personally my feedback is um I

2425
01:43:27,060 --> 01:43:30,060
think this is probably fine but we need

2426
01:43:30,060 --> 01:43:31,679
to have a discussion about how it's

2427
01:43:31,679 --> 01:43:33,420
positioned and maybe the terminology

2428
01:43:33,420 --> 01:43:34,860
that it uses

2429
01:43:34,860 --> 01:43:38,820
I highly doubt that people deploying hdb

2430
01:43:38,820 --> 01:43:41,159
proxies today and writing HTTP proxies

2431
01:43:41,159 --> 01:43:43,139
today are going to be enthusiastic about

2432
01:43:43,139 --> 01:43:44,580
switching over to this just for the sake

2433
01:43:44,580 --> 01:43:47,040
of it and so maybe we shouldn't be

2434
01:43:47,040 --> 01:43:49,199
calling This Modern HTTP proxies because

2435
01:43:49,199 --> 01:43:52,139
it implies that it will replace them I

2436
01:43:52,139 --> 01:43:53,760
think it's an alternative for other use

2437
01:43:53,760 --> 01:43:56,580
cases but we should have a discussion

2438
01:43:56,580 --> 01:43:58,920
okay yeah that that title is going to

2439
01:43:58,920 --> 01:44:01,020
change

2440
01:44:01,020 --> 01:44:04,940
it's great to be ambitious but you know

2441
01:44:05,520 --> 01:44:07,080
um any other feed uh actually I locked

2442
01:44:07,080 --> 01:44:09,060
the cube but I think we're done here

2443
01:44:09,060 --> 01:44:10,860
Tommy what do you think do we need to

2444
01:44:10,860 --> 01:44:12,780
take a ham on adoption here or or just

2445
01:44:12,780 --> 01:44:15,380
take it to the list

2446
01:44:17,820 --> 01:44:20,219
I think this point uh may be good to

2447
01:44:20,219 --> 01:44:22,619
take it to the list it sounds like we

2448
01:44:22,619 --> 01:44:25,440
have pretty consistent feedback that

2449
01:44:25,440 --> 01:44:27,960
there should be a split here and there's

2450
01:44:27,960 --> 01:44:32,340
more clear support for the tcpe side of

2451
01:44:32,340 --> 01:44:33,540
things

2452
01:44:33,540 --> 01:44:37,080
um which I personally agree with as well

2453
01:44:37,080 --> 01:44:38,780
so

2454
01:44:38,780 --> 01:44:42,119
maybe Ben if you can

2455
01:44:42,119 --> 01:44:44,719
provide a

2456
01:44:44,719 --> 01:44:48,719
renamed smaller focused document on TCP

2457
01:44:48,719 --> 01:44:51,060
and maybe split out the message proxying

2458
01:44:51,060 --> 01:44:54,800
and then we'll take that to the list

2459
01:44:56,460 --> 01:44:58,739
okay will do

2460
01:44:58,739 --> 01:45:00,300
sounds good all right all right thank

2461
01:45:00,300 --> 01:45:02,600
you Ben

2462
01:45:03,119 --> 01:45:06,300
finally we've got uh HTTP sasolin and

2463
01:45:06,300 --> 01:45:08,340
thanks to Davis kanazi doing his session

2464
01:45:08,340 --> 01:45:11,040
on Monday we're perfectly on time

2465
01:45:11,040 --> 01:45:14,900
so uh let's get going on that one

2466
01:45:21,300 --> 01:45:24,179
take it away yeah hello my name is Rick

2467
01:45:24,179 --> 01:45:26,940
foreign I've had a common cold the last

2468
01:45:26,940 --> 01:45:29,639
few days so my throat is a good sore so

2469
01:45:29,639 --> 01:45:31,139
I'm sorry for my voice could you get

2470
01:45:31,139 --> 01:45:32,400
just a bit close to the microphone that

2471
01:45:32,400 --> 01:45:34,560
might help okay

2472
01:45:34,560 --> 01:45:35,460
um

2473
01:45:35,460 --> 01:45:37,679
I'm not I wouldn't say I'm as native and

2474
01:45:37,679 --> 01:45:41,040
as at home at hdps you guys are

2475
01:45:41,040 --> 01:45:44,340
um I fly into protocols from uh from

2476
01:45:44,340 --> 01:45:47,460
security and from uh cryptography in

2477
01:45:47,460 --> 01:45:50,159
this case identity is my concern

2478
01:45:50,159 --> 01:45:54,719
and I found that HTTP tends to be less

2479
01:45:54,719 --> 01:45:57,300
flexible in terms of identity management

2480
01:45:57,300 --> 01:46:00,780
and usage patterns than other Protocols

2481
01:46:00,780 --> 01:46:03,060
of course for browser use cases that

2482
01:46:03,060 --> 01:46:05,639
usually resolved by doing things in in

2483
01:46:05,639 --> 01:46:08,219
HTML and JavaScript that are also

2484
01:46:08,219 --> 01:46:10,980
restful API use cases where it will be

2485
01:46:10,980 --> 01:46:12,540
very nice to have

2486
01:46:12,540 --> 01:46:14,219
stronger and more flexible

2487
01:46:14,219 --> 01:46:16,560
authentication mechanisms I think the

2488
01:46:16,560 --> 01:46:18,960
next slide please okay just a note so we

2489
01:46:18,960 --> 01:46:21,000
have uh 14 minutes so keep that in mind

2490
01:46:21,000 --> 01:46:22,440
if you want discussion at the end yeah

2491
01:46:22,440 --> 01:46:24,659
sure

2492
01:46:24,659 --> 01:46:27,900
so um most protocols

2493
01:46:27,900 --> 01:46:28,860
um

2494
01:46:28,860 --> 01:46:31,619
stem from a data for HTTP of course HP

2495
01:46:31,619 --> 01:46:33,179
is a very long history

2496
01:46:33,179 --> 01:46:35,820
and have adopted Sasol because it gives

2497
01:46:35,820 --> 01:46:37,920
me flexibility the client can choose a

2498
01:46:37,920 --> 01:46:40,260
mechanism that it can support from list

2499
01:46:40,260 --> 01:46:42,420
and it can choose something that matches

2500
01:46:42,420 --> 01:46:44,580
their desire for cryptographic strength

2501
01:46:44,580 --> 01:46:46,260
and might even involve things like

2502
01:46:46,260 --> 01:46:48,659
Channel binding which in general are

2503
01:46:48,659 --> 01:46:50,880
very difficult to do in HTTP but in

2504
01:46:50,880 --> 01:46:52,560
particular use cases might actually be

2505
01:46:52,560 --> 01:46:54,119
very useful

2506
01:46:54,119 --> 01:46:57,900
mm-hmm also Cecil allows protocols to

2507
01:46:57,900 --> 01:46:59,400
share knowledge about authentication

2508
01:46:59,400 --> 01:47:01,800
mechanisms so not every protocol has to

2509
01:47:01,800 --> 01:47:04,440
be invented again and I think HTTP will

2510
01:47:04,440 --> 01:47:08,119
benefit from having Cecil added

2511
01:47:11,880 --> 01:47:13,020
so

2512
01:47:13,020 --> 01:47:13,800
um

2513
01:47:13,800 --> 01:47:16,199
HTTP authentication appears to be an

2514
01:47:16,199 --> 01:47:19,800
island it's defining its own its its own

2515
01:47:19,800 --> 01:47:22,199
mechanisms sometimes inspired by social

2516
01:47:22,199 --> 01:47:24,960
sometimes in another way and I think

2517
01:47:24,960 --> 01:47:27,000
it's just double effort and it's a Pity

2518
01:47:27,000 --> 01:47:28,739
especially because there's such a strong

2519
01:47:28,739 --> 01:47:31,320
focus on the browser for authentication

2520
01:47:31,320 --> 01:47:33,300
purposes so that restful application

2521
01:47:33,300 --> 01:47:36,060
sort of stay behind that's a better I

2522
01:47:36,060 --> 01:47:39,900
think a few a few examples that I would

2523
01:47:39,900 --> 01:47:43,219
like would have liked to see

2524
01:47:43,219 --> 01:47:46,139
adopted somehow in HTTP in that are very

2525
01:47:46,139 --> 01:47:48,480
easy to do through Sasol will be

2526
01:47:48,480 --> 01:47:51,239
gerberos authentication which is

2527
01:47:51,239 --> 01:47:54,540
very weak in terms of security and

2528
01:47:54,540 --> 01:47:56,460
something new that irtf is doing at this

2529
01:47:56,460 --> 01:47:58,619
point is opaque

2530
01:47:58,619 --> 01:48:00,540
um the guy implementing that came up to

2531
01:48:00,540 --> 01:48:02,219
me explained to him how to do this in

2532
01:48:02,219 --> 01:48:04,260
Sasol he was very happy that we had an

2533
01:48:04,260 --> 01:48:06,360
implementation for https because that

2534
01:48:06,360 --> 01:48:09,659
meant he could demonstrate his very

2535
01:48:09,659 --> 01:48:11,820
cryptographically very Advanced uh

2536
01:48:11,820 --> 01:48:14,580
mechanism in the protocol that most

2537
01:48:14,580 --> 01:48:17,460
people favor to see a demo in

2538
01:48:17,460 --> 01:48:19,199
um and to use of course

2539
01:48:19,199 --> 01:48:22,460
so next slide please

2540
01:48:23,820 --> 01:48:25,920
um this is just a miscellaneous point

2541
01:48:25,920 --> 01:48:27,600
that I ran into

2542
01:48:27,600 --> 01:48:30,060
um when you look and if I'm wrong please

2543
01:48:30,060 --> 01:48:33,300
tell me as far as I understand the user

2544
01:48:33,300 --> 01:48:37,380
in uh in an URI defense Authority so

2545
01:48:37,380 --> 01:48:40,500
part of where to locate the resource

2546
01:48:40,500 --> 01:48:42,719
and well we all know the basic

2547
01:48:42,719 --> 01:48:45,239
authentication has been used bits

2548
01:48:45,239 --> 01:48:46,980
outside of the specification I don't

2549
01:48:46,980 --> 01:48:48,480
think this has been a specification to

2550
01:48:48,480 --> 01:48:50,820
put a username there

2551
01:48:50,820 --> 01:48:54,960
um that it seems to have a red oauth

2552
01:48:54,960 --> 01:48:56,940
part in the in the specification of the

2553
01:48:56,940 --> 01:48:59,280
uri's authentication part

2554
01:48:59,280 --> 01:49:00,900
and that I think has caused a lot of

2555
01:49:00,900 --> 01:49:03,480
confusion about usernames in HTTP app

2556
01:49:03,480 --> 01:49:06,000
Viewpoint where it's not even used

2557
01:49:06,000 --> 01:49:09,300
um it's it's it's uh it's forbidden

2558
01:49:09,300 --> 01:49:10,520
actually

2559
01:49:10,520 --> 01:49:13,500
you rise as a whole whole domain on its

2560
01:49:13,500 --> 01:49:14,760
own

2561
01:49:14,760 --> 01:49:17,239
um I sometimes feel a desire to

2562
01:49:17,239 --> 01:49:20,040
publish information publish resources in

2563
01:49:20,040 --> 01:49:23,460
a way that is not iterable in DNS

2564
01:49:23,460 --> 01:49:25,739
because DNS very often can be iterated

2565
01:49:25,739 --> 01:49:28,860
even with the DNS sac it would be very

2566
01:49:28,860 --> 01:49:31,139
nice to have a way to conceal like a

2567
01:49:31,139 --> 01:49:34,560
home page if you consider it private and

2568
01:49:34,560 --> 01:49:37,739
um independent of what your eyes do I

2569
01:49:37,739 --> 01:49:39,659
think it might be very useful to add a

2570
01:49:39,659 --> 01:49:42,659
user header akin to the the host header

2571
01:49:42,659 --> 01:49:44,880
to do exactly that where the house will

2572
01:49:44,880 --> 01:49:47,100
be exactly what it is now and the user

2573
01:49:47,100 --> 01:49:49,800
will be further refinement of what we're

2574
01:49:49,800 --> 01:49:51,960
looking at at

2575
01:49:51,960 --> 01:49:55,040
next slide please

2576
01:49:55,139 --> 01:49:56,460
so

2577
01:49:56,460 --> 01:49:58,020
um well I mentioned a few of these

2578
01:49:58,020 --> 01:49:59,219
things already

2579
01:49:59,219 --> 01:50:00,960
um

2580
01:50:00,960 --> 01:50:02,820
um Quantum Computing of course is one of

2581
01:50:02,820 --> 01:50:04,679
those risks that's threatening us it

2582
01:50:04,679 --> 01:50:06,659
will be really a Pity to not be agile

2583
01:50:06,659 --> 01:50:08,520
and easily adopt new mechanism that

2584
01:50:08,520 --> 01:50:10,800
might help with that

2585
01:50:10,800 --> 01:50:11,520
um

2586
01:50:11,520 --> 01:50:13,139
Channel binding is one of these things

2587
01:50:13,139 --> 01:50:15,600
that you can't put in respect for HTTP I

2588
01:50:15,600 --> 01:50:18,540
think because there are places where you

2589
01:50:18,540 --> 01:50:21,480
can't rely on it simply because people

2590
01:50:21,480 --> 01:50:22,920
are hopping connections all the time

2591
01:50:22,920 --> 01:50:25,560
that's part of HTTP but a client that

2592
01:50:25,560 --> 01:50:27,560
doesn't do that might actually

2593
01:50:27,560 --> 01:50:31,320
benefit from such a facility

2594
01:50:31,320 --> 01:50:34,199
um depending on the application

2595
01:50:34,199 --> 01:50:35,400
um

2596
01:50:35,400 --> 01:50:37,860
and well I mentioned I mentioned um

2597
01:50:37,860 --> 01:50:40,260
opaque already that there was a guy who

2598
01:50:40,260 --> 01:50:43,020
really enjoyed having a way to use HTTP

2599
01:50:43,020 --> 01:50:45,420
with his mechanism

2600
01:50:45,420 --> 01:50:48,060
um I've also spoken to the Web

2601
01:50:48,060 --> 01:50:50,460
Consortium who were working on software

2602
01:50:50,460 --> 01:50:53,040
identity mechanism wanted to use all

2603
01:50:53,040 --> 01:50:55,860
sorts of protocols and preferably also

2604
01:50:55,860 --> 01:50:57,300
in http

2605
01:50:57,300 --> 01:50:59,639
rang to the Obstacle of having to go

2606
01:50:59,639 --> 01:51:03,659
through IDF to formalize a mechanism

2607
01:51:03,659 --> 01:51:04,560
there

2608
01:51:04,560 --> 01:51:07,500
and was very happy to instead use HTTP

2609
01:51:07,500 --> 01:51:11,760
Sasso so next slide please

2610
01:51:11,760 --> 01:51:14,280
so this is basically how it looks

2611
01:51:14,280 --> 01:51:16,980
um the Satchel part is not not on the

2612
01:51:16,980 --> 01:51:18,840
not surprised of course the realm is

2613
01:51:18,840 --> 01:51:20,639
what it always is

2614
01:51:20,639 --> 01:51:23,340
um the initial 401 or 407 would send a

2615
01:51:23,340 --> 01:51:25,860
mechanism list so that's three in this

2616
01:51:25,860 --> 01:51:26,760
case

2617
01:51:26,760 --> 01:51:28,920
and that could be reserved to serve a

2618
01:51:28,920 --> 01:51:31,020
token that is basically state that

2619
01:51:31,020 --> 01:51:33,060
carried from Observer to the client and

2620
01:51:33,060 --> 01:51:35,639
sent back to the server this is where

2621
01:51:35,639 --> 01:51:38,159
this proposal does something that an

2622
01:51:38,159 --> 01:51:40,639
early attempt I think 10 or 12 years ago

2623
01:51:40,639 --> 01:51:43,619
failed because the HTTP authentication

2624
01:51:43,619 --> 01:51:46,139
framework wasn't defined at that time

2625
01:51:46,139 --> 01:51:51,060
but it was already felt uh improper to

2626
01:51:51,060 --> 01:51:53,340
store state in the server which was part

2627
01:51:53,340 --> 01:51:55,800
of the design back then because Cecil

2628
01:51:55,800 --> 01:51:58,199
can make a number of iterations and may

2629
01:51:58,199 --> 01:52:00,659
need to store data from one to the next

2630
01:52:00,659 --> 01:52:03,060
so I've resolved that with an extra

2631
01:52:03,060 --> 01:52:05,460
token services that just bounces back

2632
01:52:05,460 --> 01:52:08,340
and forth with encryption and signature

2633
01:52:08,340 --> 01:52:10,739
and on the bottom you can see your first

2634
01:52:10,739 --> 01:52:12,900
response by the client where it's celex

2635
01:52:12,900 --> 01:52:15,420
one of the mechanisms and sends the

2636
01:52:15,420 --> 01:52:18,000
first client to server dog this stuff

2637
01:52:18,000 --> 01:52:20,760
would all be base64 encoded of course

2638
01:52:20,760 --> 01:52:23,960
next slide please

2639
01:52:25,020 --> 01:52:25,679
um

2640
01:52:25,679 --> 01:52:29,280
I covered all that next slide please

2641
01:52:29,280 --> 01:52:31,619
oh this is something Advanced and trans

2642
01:52:31,619 --> 01:52:33,239
use case for which we are very much

2643
01:52:33,239 --> 01:52:34,679
interested in this

2644
01:52:34,679 --> 01:52:36,480
and that's to use

2645
01:52:36,480 --> 01:52:37,139
um

2646
01:52:37,139 --> 01:52:40,080
Cecil over HTTP arrive at a web server

2647
01:52:40,080 --> 01:52:42,719
and then continue to backend using

2648
01:52:42,719 --> 01:52:44,040
diameter

2649
01:52:44,040 --> 01:52:46,739
and actually turn back to the client's

2650
01:52:46,739 --> 01:52:49,560
own domain where he runs his own

2651
01:52:49,560 --> 01:52:51,780
identity provider so that he doesn't

2652
01:52:51,780 --> 01:52:53,699
need to store an account in every

2653
01:52:53,699 --> 01:52:55,380
individual web server that can actually

2654
01:52:55,380 --> 01:52:57,900
just walk to web server log on with

2655
01:52:57,900 --> 01:53:00,960
credentials that he himself manages and

2656
01:53:00,960 --> 01:53:03,960
then end up being authenticated because

2657
01:53:03,960 --> 01:53:06,300
the web server stopped this is Joe at

2658
01:53:06,300 --> 01:53:09,060
example.com you can proceed you can

2659
01:53:09,060 --> 01:53:12,900
assume that this is secure identity

2660
01:53:12,900 --> 01:53:14,460
um and we have this all looking I mean

2661
01:53:14,460 --> 01:53:16,199
this is the stuff I love to do about

2662
01:53:16,199 --> 01:53:18,659
identity and crypto

2663
01:53:18,659 --> 01:53:22,080
um and again HTTP will be a driver for

2664
01:53:22,080 --> 01:53:23,940
making this possible

2665
01:53:23,940 --> 01:53:27,080
next slide please

2666
01:53:27,480 --> 01:53:30,239
so um we've implemented this this stuff

2667
01:53:30,239 --> 01:53:32,219
it's part of Apache it's probably well

2668
01:53:32,219 --> 01:53:34,020
it's a module for Apache that we

2669
01:53:34,020 --> 01:53:36,119
designed it's uh there's an extension

2670
01:53:36,119 --> 01:53:38,940
for nginx there's a plugin for Firefox

2671
01:53:38,940 --> 01:53:40,560
Dusty stuff

2672
01:53:40,560 --> 01:53:42,900
and um we've been doing part of this

2673
01:53:42,900 --> 01:53:45,239
work as an ngi pointer project for a

2674
01:53:45,239 --> 01:53:47,940
European Union because it's also more in

2675
01:53:47,940 --> 01:53:50,280
line with the gdpr than the few

2676
01:53:50,280 --> 01:53:52,199
centralized silos to now take control

2677
01:53:52,199 --> 01:53:56,159
over uh weblog Homebase basically so we

2678
01:53:56,159 --> 01:53:58,440
think it adds something yeah

2679
01:53:58,440 --> 01:53:59,760
um there are more slides of this one

2680
01:53:59,760 --> 01:54:01,199
detailed

2681
01:54:01,199 --> 01:54:03,900
um the block a block specifications and

2682
01:54:03,900 --> 01:54:06,060
codes so go ahead go ahead and have a

2683
01:54:06,060 --> 01:54:07,500
look

2684
01:54:07,500 --> 01:54:09,659
um I would really like this group to

2685
01:54:09,659 --> 01:54:12,179
accept a sales or proposal or work on it

2686
01:54:12,179 --> 01:54:13,980
or whatever I'm quite willing to help

2687
01:54:13,980 --> 01:54:16,619
with that of course or be active in it

2688
01:54:16,619 --> 01:54:18,659
but I'd like your questions and opinions

2689
01:54:18,659 --> 01:54:20,900
please

2690
01:54:21,060 --> 01:54:24,239
thank you so questions comments

2691
01:54:24,239 --> 01:54:26,040
thoughts about

2692
01:54:26,040 --> 01:54:29,900
working on Zazzle and http

2693
01:54:30,119 --> 01:54:32,299
foreign

2694
01:54:35,880 --> 01:54:39,320
interesting to find out about

2695
01:54:46,080 --> 01:54:48,420
uh Jonathan hoyland clapper sorry I can

2696
01:54:48,420 --> 01:54:50,639
get the tool to work

2697
01:54:50,639 --> 01:54:52,139
um

2698
01:54:52,139 --> 01:54:55,260
isn't HTTP isn't Sasol a security thing

2699
01:54:55,260 --> 01:54:59,940
and this is an HTTP in the general area

2700
01:54:59,940 --> 01:55:01,980
as in like shouldn't this be in a

2701
01:55:01,980 --> 01:55:05,119
security area group uh

2702
01:55:05,119 --> 01:55:08,219
the answer to that is varied in the past

2703
01:55:08,219 --> 01:55:10,199
um I I wouldn't worry too much about

2704
01:55:10,199 --> 01:55:11,040
that but we have worked on

2705
01:55:11,040 --> 01:55:12,960
authentication schemes in the past

2706
01:55:12,960 --> 01:55:15,060
uh we when we do so we do coordinate

2707
01:55:15,060 --> 01:55:17,159
with security quite tightly

2708
01:55:17,159 --> 01:55:18,900
yeah this will this will send to you by

2709
01:55:18,900 --> 01:55:22,139
the dispatch group so um that's right to

2710
01:55:22,139 --> 01:55:24,320
you

2711
01:55:26,400 --> 01:55:28,380
so much time so I think this is probably

2712
01:55:28,380 --> 01:55:29,820
the right place to talk about this sort

2713
01:55:29,820 --> 01:55:32,760
of thing because I think uh just using

2714
01:55:32,760 --> 01:55:34,820
something like Sasol

2715
01:55:34,820 --> 01:55:37,260
is fairly straightforward in the sense

2716
01:55:37,260 --> 01:55:39,179
that you've got messages that are well

2717
01:55:39,179 --> 01:55:40,739
defined

2718
01:55:40,739 --> 01:55:42,300
um maybe we need to learn a few things

2719
01:55:42,300 --> 01:55:43,560
if we were going to do something like

2720
01:55:43,560 --> 01:55:45,540
this but um

2721
01:55:45,540 --> 01:55:47,699
this group can integrate these things

2722
01:55:47,699 --> 01:55:49,380
and and the integration into HTTP is

2723
01:55:49,380 --> 01:55:51,179
probably the most interesting part of

2724
01:55:51,179 --> 01:55:52,619
any work like this

2725
01:55:52,619 --> 01:55:54,719
the um

2726
01:55:54,719 --> 01:55:56,520
the question about Implement Mentor

2727
01:55:56,520 --> 01:55:58,500
interest is something that I I can't

2728
01:55:58,500 --> 01:56:00,480
really answer at this point

2729
01:56:00,480 --> 01:56:03,540
um we have no interest in in doing this

2730
01:56:03,540 --> 01:56:06,179
the question I have however that relates

2731
01:56:06,179 --> 01:56:09,179
to that is to what extent is that is it

2732
01:56:09,179 --> 01:56:11,100
possible through for instance browser

2733
01:56:11,100 --> 01:56:15,900
apis to to Simply do this uh in in users

2734
01:56:15,900 --> 01:56:20,040
user space into a web page

2735
01:56:20,040 --> 01:56:21,960
um that's exactly what we've done we do

2736
01:56:21,960 --> 01:56:24,239
in Firefox it's it's web extension that

2737
01:56:24,239 --> 01:56:25,619
just picks up the header and then

2738
01:56:25,619 --> 01:56:28,739
processes it and actually uses a modern

2739
01:56:28,739 --> 01:56:31,139
extension in browsers that connects to

2740
01:56:31,139 --> 01:56:33,179
the client desktop to actually process

2741
01:56:33,179 --> 01:56:35,460
the stuff and keep the credentials

2742
01:56:35,460 --> 01:56:37,199
outside of the browser

2743
01:56:37,199 --> 01:56:39,360
so that that requires

2744
01:56:39,360 --> 01:56:42,060
does that require however privilege to

2745
01:56:42,060 --> 01:56:44,100
access to the contents of requests and

2746
01:56:44,100 --> 01:56:46,739
responses or can you simply use the

2747
01:56:46,739 --> 01:56:50,580
fetch API and add your own uh header

2748
01:56:50,580 --> 01:56:53,100
fields to to those

2749
01:56:53,100 --> 01:56:55,280
foreign

2750
01:57:02,659 --> 01:57:04,980
yes okay

2751
01:57:04,980 --> 01:57:07,560
um is it possible to build

2752
01:57:07,560 --> 01:57:10,320
just within a web page either using

2753
01:57:10,320 --> 01:57:13,800
service workers or straight up fetch API

2754
01:57:13,800 --> 01:57:16,139
JavaScript

2755
01:57:16,139 --> 01:57:19,320
um that will not work for uh automation

2756
01:57:19,320 --> 01:57:21,480
interfaces for those full apis and that

2757
01:57:21,480 --> 01:57:23,760
sort of thing I understand that I'm I'm

2758
01:57:23,760 --> 01:57:26,219
trying to assess whether this is a a

2759
01:57:26,219 --> 01:57:28,199
self whether the self-service capability

2760
01:57:28,199 --> 01:57:30,420
is is there because that brings me to

2761
01:57:30,420 --> 01:57:32,820
the next question is

2762
01:57:32,820 --> 01:57:35,340
um or suggestion perhaps is if if it is

2763
01:57:35,340 --> 01:57:37,679
possible to to drive one of these things

2764
01:57:37,679 --> 01:57:40,440
in a self-service fashion then that

2765
01:57:40,440 --> 01:57:42,360
gives you an opportunity to demonstrate

2766
01:57:42,360 --> 01:57:45,659
a utility without necessarily requiring

2767
01:57:45,659 --> 01:57:47,760
everyone in the in the ecosystem to

2768
01:57:47,760 --> 01:57:49,980
implement something uh integrating this

2769
01:57:49,980 --> 01:57:51,599
into browsers for instance would be

2770
01:57:51,599 --> 01:57:53,820
quite a challenge because we have to do

2771
01:57:53,820 --> 01:57:56,880
not just the work here but the work in

2772
01:57:56,880 --> 01:57:58,800
Fetch and other places in order to get

2773
01:57:58,800 --> 01:58:00,420
that to work but if if you can just go

2774
01:58:00,420 --> 01:58:02,820
over the top demonstrate that it has

2775
01:58:02,820 --> 01:58:04,400
utility

2776
01:58:04,400 --> 01:58:07,260
then you can build momentum for the for

2777
01:58:07,260 --> 01:58:09,599
the effort we can recognize that and we

2778
01:58:09,599 --> 01:58:11,580
can perhaps then systematize it in in

2779
01:58:11,580 --> 01:58:14,460
those specifications without having to

2780
01:58:14,460 --> 01:58:16,400
um to

2781
01:58:16,400 --> 01:58:18,540
initially grapple with the the

2782
01:58:18,540 --> 01:58:20,159
deployment and and Implement her

2783
01:58:20,159 --> 01:58:22,320
interest uh questions yeah and that

2784
01:58:22,320 --> 01:58:24,659
could be a an application that does

2785
01:58:24,659 --> 01:58:26,880
restful things for example and then uses

2786
01:58:26,880 --> 01:58:28,920
it perhaps in a python fashion or

2787
01:58:28,920 --> 01:58:31,320
something yeah

2788
01:58:31,320 --> 01:58:31,980
um

2789
01:58:31,980 --> 01:58:36,239
follow-up uh Alex of social Enthusiast

2790
01:58:36,239 --> 01:58:38,000
um

2791
01:58:38,000 --> 01:58:41,699
is access to WWE authenticate and

2792
01:58:41,699 --> 01:58:43,800
authorization and privileged taxes that

2793
01:58:43,800 --> 01:58:46,380
he was talking about

2794
01:58:46,380 --> 01:58:49,219
believe so

2795
01:58:51,719 --> 01:58:53,460
because I'm not sure I'm not certain I

2796
01:58:53,460 --> 01:58:55,080
think there's there's

2797
01:58:55,080 --> 01:58:56,540
um there's

2798
01:58:56,540 --> 01:58:59,760
privileged information that

2799
01:58:59,760 --> 01:59:02,280
um browsers will put in those uh header

2800
01:59:02,280 --> 01:59:03,420
fields

2801
01:59:03,420 --> 01:59:05,719
in certain contexts

2802
01:59:05,719 --> 01:59:08,639
but I don't know for certain whether or

2803
01:59:08,639 --> 01:59:11,219
not you can from say JavaScript just set

2804
01:59:11,219 --> 01:59:13,080
the values if you know the values that

2805
01:59:13,080 --> 01:59:16,020
you want to set in them right so so

2806
01:59:16,020 --> 01:59:17,699
typically when you talk about

2807
01:59:17,699 --> 01:59:19,800
um in the browser context when you make

2808
01:59:19,800 --> 01:59:22,560
a a credentialed request which is what

2809
01:59:22,560 --> 01:59:25,920
fetch refers to it as you um you ask for

2810
01:59:25,920 --> 01:59:28,679
a credential request and you're really

2811
01:59:28,679 --> 01:59:30,840
what you're asking for is access to

2812
01:59:30,840 --> 01:59:33,599
credentials that the browser holds in

2813
01:59:33,599 --> 01:59:35,159
some store that you don't have access to

2814
01:59:35,159 --> 01:59:37,260
for

2815
01:59:37,260 --> 01:59:39,719
by ordinary means you can't simply get

2816
01:59:39,719 --> 01:59:40,860
the credentials out and use them

2817
01:59:40,860 --> 01:59:42,960
yourself you're asking the browser that

2818
01:59:42,960 --> 01:59:45,000
you to access its Store and put them in

2819
01:59:45,000 --> 01:59:47,179
there in those contexts there's

2820
01:59:47,179 --> 01:59:50,580
constraints then on what you can see

2821
01:59:50,580 --> 01:59:52,320
from the fetch API in terms of the

2822
01:59:52,320 --> 01:59:54,420
request and ultimately the responses you

2823
01:59:54,420 --> 01:59:55,619
get back

2824
01:59:55,619 --> 01:59:58,440
but I think it may still be possible to

2825
01:59:58,440 --> 02:00:01,320
set the values explicitly yourself based

2826
02:00:01,320 --> 02:00:04,199
on values that you as a website know

2827
02:00:04,199 --> 02:00:07,320
now don't quote me on that because I

2828
02:00:07,320 --> 02:00:09,360
have to check the spec and every time I

2829
02:00:09,360 --> 02:00:11,760
look at that spec my my little brain

2830
02:00:11,760 --> 02:00:15,119
explodes and I probably want to ask

2831
02:00:15,119 --> 02:00:17,699
someone who more intimate with it you

2832
02:00:17,699 --> 02:00:19,380
know who that person is and I was just

2833
02:00:19,380 --> 02:00:21,360
looking at an involved course so yeah

2834
02:00:21,360 --> 02:00:23,960
all that's off

2835
02:00:24,360 --> 02:00:27,360
thank you

2836
02:00:27,360 --> 02:00:28,980
um and then personally I was I think

2837
02:00:28,980 --> 02:00:30,900
browsers are one interesting part I ask

2838
02:00:30,900 --> 02:00:33,780
another is uh client libraries like uh

2839
02:00:33,780 --> 02:00:36,179
Carl for example Daniel's not here but

2840
02:00:36,179 --> 02:00:38,340
that's another obvious place to go

2841
02:00:38,340 --> 02:00:40,739
um we're at time but it sounds like this

2842
02:00:40,739 --> 02:00:42,599
is just a continuing discussion and I

2843
02:00:42,599 --> 02:00:45,360
think uh A continuing discussion I think

2844
02:00:45,360 --> 02:00:47,760
Tommy know I will have a chat we'll

2845
02:00:47,760 --> 02:00:50,460
might have some more discussion on lists

2846
02:00:50,460 --> 02:00:53,159
um obviously uh I I don't think this is

2847
02:00:53,159 --> 02:00:54,719
something that that you know would

2848
02:00:54,719 --> 02:00:56,400
involve a broad effort the working group

2849
02:00:56,400 --> 02:00:58,380
the question is would it be productive

2850
02:00:58,380 --> 02:01:00,540
to have a focused effort to get this as

2851
02:01:00,540 --> 02:01:03,540
a spec uh produced or or whether we

2852
02:01:03,540 --> 02:01:05,099
should wait a bit longer is more than

2853
02:01:05,099 --> 02:01:07,500
that seems to be in demanding so well

2854
02:01:07,500 --> 02:01:09,060
well uh Tommy don't have a chat and

2855
02:01:09,060 --> 02:01:10,440
we'll be in touch we'll figure out next

2856
02:01:10,440 --> 02:01:13,080
steps I think yeah thank you thank you

2857
02:01:13,080 --> 02:01:15,420
uh I think that's all we have and we're

2858
02:01:15,420 --> 02:01:17,340
at time so thank you all very much yeah

2859
02:01:17,340 --> 02:01:20,639
it looks like Alexis hi Tommy it looks

2860
02:01:20,639 --> 02:01:23,580
like Alexi was stealing Q

2861
02:01:23,580 --> 02:01:25,159
yeah

2862
02:01:25,159 --> 02:01:27,900
Alexi was uh there and they just came

2863
02:01:27,900 --> 02:01:29,520
and gone sorry

2864
02:01:29,520 --> 02:01:31,380
um and anything to add to that Tommy

2865
02:01:31,380 --> 02:01:32,820
while we're still here

2866
02:01:32,820 --> 02:01:34,679
no I think that

2867
02:01:34,679 --> 02:01:36,599
um I agree with your summary of that

2868
02:01:36,599 --> 02:01:39,179
yeah okay good

2869
02:01:39,179 --> 02:01:41,760
all right so uh we'll we'll take those

2870
02:01:41,760 --> 02:01:43,560
action items and get back to folks and

2871
02:01:43,560 --> 02:01:46,020
get back to the list and hopefully we

2872
02:01:46,020 --> 02:01:48,300
will see folks in Yokohama

2873
02:01:48,300 --> 02:01:50,960
thanks

2874
02:01:51,179 --> 02:01:53,900
thank you all

2875
02:02:03,840 --> 02:02:05,960
um

2876
02:02:20,580 --> 02:02:23,179
sit down

