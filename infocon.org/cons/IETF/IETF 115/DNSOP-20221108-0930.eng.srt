1
00:00:04,860 --> 00:00:07,860
tomorrow

2
00:00:37,140 --> 00:00:39,860
please

3
00:00:46,320 --> 00:00:48,260
yeah

4
00:00:48,260 --> 00:00:50,820
okay but you're the ones who will be

5
00:00:50,820 --> 00:00:53,180
saying

6
00:01:02,280 --> 00:01:05,700
okay I'm fine again I don't want this to

7
00:01:05,700 --> 00:01:10,140
be all wants it is okay

8
00:01:14,400 --> 00:01:16,939
each other

9
00:01:42,000 --> 00:01:44,360
s

10
00:01:51,799 --> 00:01:55,280
I will sure

11
00:02:22,700 --> 00:02:25,760
hold on

12
00:02:27,020 --> 00:02:30,540
click on that then you can enter a time

13
00:02:30,540 --> 00:02:33,200
and for sure

14
00:02:39,060 --> 00:02:39,620
yeah

15
00:02:39,620 --> 00:02:43,220
it's fine okay

16
00:02:51,480 --> 00:02:53,959
okay yeah

17
00:02:53,959 --> 00:02:56,940
all right

18
00:02:56,940 --> 00:02:59,160
good morning and welcome to the folks in

19
00:02:59,160 --> 00:03:00,780
the room good morning good afternoon

20
00:03:00,780 --> 00:03:02,640
good evening wherever you are to the

21
00:03:02,640 --> 00:03:05,160
folks on remote this is dnsop at ietf

22
00:03:05,160 --> 00:03:06,900
115.

23
00:03:06,900 --> 00:03:09,420
and we should probably go ahead and get

24
00:03:09,420 --> 00:03:11,780
started

25
00:03:13,440 --> 00:03:14,940
okay

26
00:03:14,940 --> 00:03:18,060
hello welcome welcome group

27
00:03:18,060 --> 00:03:20,760
um well team is remote but he sent his

28
00:03:20,760 --> 00:03:22,440
regards of course and he will be

29
00:03:22,440 --> 00:03:25,500
presenting the document updates

30
00:03:25,500 --> 00:03:27,239
yeah they just sent a cute picture of

31
00:03:27,239 --> 00:03:30,480
his dog exactly we can't

32
00:03:30,480 --> 00:03:33,360
it's a good tradition here

33
00:03:33,360 --> 00:03:35,760
um the chairs myself

34
00:03:35,760 --> 00:03:37,760
Suzanne Tim

35
00:03:37,760 --> 00:03:41,099
our area director Warren he's here in

36
00:03:41,099 --> 00:03:42,239
the room

37
00:03:42,239 --> 00:03:44,159
the chat room we have of course the

38
00:03:44,159 --> 00:03:47,340
jabber room but also integrated in the

39
00:03:47,340 --> 00:03:49,980
meter Echo and zulip so there are the

40
00:03:49,980 --> 00:03:52,140
links in the reference

41
00:03:52,140 --> 00:03:56,640
the minutes uh Paul Maybe yeah and Tim

42
00:03:56,640 --> 00:03:58,860
will be back up or vice versa so Tim

43
00:03:58,860 --> 00:04:03,260
will also take notes together thanks

44
00:04:04,260 --> 00:04:07,440
okay so we're an ITF working group so

45
00:04:07,440 --> 00:04:09,299
the node well applies here everything

46
00:04:09,299 --> 00:04:11,700
you contribute mentioned at the

47
00:04:11,700 --> 00:04:14,700
microphone will be recorded as part of

48
00:04:14,700 --> 00:04:17,639
the of is the node will applies to your

49
00:04:17,639 --> 00:04:19,918
work in your contributions

50
00:04:19,918 --> 00:04:22,800
so we we expect that you're aware of the

51
00:04:22,800 --> 00:04:23,759
node well

52
00:04:23,759 --> 00:04:26,040
part of the node well is the IDF conduct

53
00:04:26,040 --> 00:04:30,259
kind of sorry code of conduct

54
00:04:30,840 --> 00:04:32,220
um well there are six points here

55
00:04:32,220 --> 00:04:35,580
mentioned uh summary be respectful to

56
00:04:35,580 --> 00:04:36,479
each other

57
00:04:36,479 --> 00:04:37,979
if you think

58
00:04:37,979 --> 00:04:40,259
code of conduct is violated please reach

59
00:04:40,259 --> 00:04:43,520
out to the dean sub chairs

60
00:04:44,100 --> 00:04:46,199
the meeting tips we are in hybrid

61
00:04:46,199 --> 00:04:48,720
meeting so everybody in the room is

62
00:04:48,720 --> 00:04:51,120
asked also to register

63
00:04:51,120 --> 00:04:55,020
find the the meet Echo light client you

64
00:04:55,020 --> 00:04:57,840
can scan the quad code

65
00:04:57,840 --> 00:05:02,719
or just use the the full client

66
00:05:03,479 --> 00:05:07,740
um also we are asked or it's ITF policy

67
00:05:07,740 --> 00:05:11,699
here at ITF 115 to wear masks at any

68
00:05:11,699 --> 00:05:14,460
time except for the presenters here are

69
00:05:14,460 --> 00:05:18,080
allowed to take off their mask

70
00:05:18,240 --> 00:05:20,880
other things for especially for the

71
00:05:20,880 --> 00:05:23,220
people in the room the on-site if you

72
00:05:23,220 --> 00:05:26,220
want to go to the my queue use the mid

73
00:05:26,220 --> 00:05:29,460
Echo light app or the mid Echo app raise

74
00:05:29,460 --> 00:05:31,860
your hand and then you are asked to come

75
00:05:31,860 --> 00:05:33,900
over to the microphone

76
00:05:33,900 --> 00:05:36,740
so it's equal for the remote

77
00:05:36,740 --> 00:05:40,699
participants good

78
00:05:41,160 --> 00:05:44,520
we go now to the agenda

79
00:05:44,520 --> 00:05:46,860
we just have the blue sheets

80
00:05:46,860 --> 00:05:49,820
note well

81
00:05:49,860 --> 00:05:52,800
dream will give us an update of ongoing

82
00:05:52,800 --> 00:05:53,580
work

83
00:05:53,580 --> 00:05:55,680
the hackathon update traditionally part

84
00:05:55,680 --> 00:05:57,900
of the chair slide is now moved to

85
00:05:57,900 --> 00:06:00,060
current working group business so there

86
00:06:00,060 --> 00:06:01,860
will be an update of the hackathon but

87
00:06:01,860 --> 00:06:03,840
not here now

88
00:06:03,840 --> 00:06:07,500
but in the regular agenda

89
00:06:07,500 --> 00:06:09,660
after the working group business the

90
00:06:09,660 --> 00:06:11,220
current working group business we have

91
00:06:11,220 --> 00:06:13,199
for consideration and type of time

92
00:06:13,199 --> 00:06:15,840
permitting presentations the agenda is

93
00:06:15,840 --> 00:06:18,539
also published on data tracker

94
00:06:18,539 --> 00:06:21,000
good Tim can I ask you to give the

95
00:06:21,000 --> 00:06:24,380
document updates

96
00:06:24,500 --> 00:06:28,319
yes oh yeah good morning all and thanks

97
00:06:28,319 --> 00:06:31,020
for thanks for being here so we'll we'll

98
00:06:31,020 --> 00:06:32,520
kind of go through this because I know

99
00:06:32,520 --> 00:06:34,740
we have some busy stuff as you know in

100
00:06:34,740 --> 00:06:36,660
the isgq

101
00:06:36,660 --> 00:06:39,780
um 5933 Biz which is scheduled for the

102
00:06:39,780 --> 00:06:42,000
teletracker I believe in uh January in

103
00:06:42,000 --> 00:06:43,620
December

104
00:06:43,620 --> 00:06:46,500
um and catalog zones which has warrants

105
00:06:46,500 --> 00:06:48,600
as the action but I think they need an

106
00:06:48,600 --> 00:06:51,060
update from the authors

107
00:06:51,060 --> 00:06:53,759
um so authors I know you're there you

108
00:06:53,759 --> 00:06:54,960
may have to

109
00:06:54,960 --> 00:06:56,819
step up a little bit and do that but

110
00:06:56,819 --> 00:06:58,620
everything else is moving along for

111
00:06:58,620 --> 00:06:59,580
those

112
00:06:59,580 --> 00:07:00,539
um

113
00:07:00,539 --> 00:07:02,639
avoid fragmentation has been approved

114
00:07:02,639 --> 00:07:05,400
and Ben and I are going to work on the

115
00:07:05,400 --> 00:07:07,199
write-up on that

116
00:07:07,199 --> 00:07:08,160
um

117
00:07:08,160 --> 00:07:10,319
and we'll we'll sort of Chase that down

118
00:07:10,319 --> 00:07:13,319
here very shortly so next slide

119
00:07:13,319 --> 00:07:14,699
um things are moving along on some of

120
00:07:14,699 --> 00:07:16,080
this

121
00:07:16,080 --> 00:07:18,240
um of course in the editor queue service

122
00:07:18,240 --> 00:07:19,680
B

123
00:07:19,680 --> 00:07:21,380
um I think it's going to go for a record

124
00:07:21,380 --> 00:07:25,020
and sort of sitting and the DNS type BCT

125
00:07:25,020 --> 00:07:27,120
which is in there too which it looks

126
00:07:27,120 --> 00:07:28,680
like it's been moving pretty fast so

127
00:07:28,680 --> 00:07:30,539
fast so thanks for all for sort of

128
00:07:30,539 --> 00:07:33,000
chewing on that chair on that so

129
00:07:33,000 --> 00:07:35,759
um next slide next slide we've got a

130
00:07:35,759 --> 00:07:38,460
bunches that are kind of so we have one

131
00:07:38,460 --> 00:07:41,479
more than we have last call

132
00:07:45,020 --> 00:07:48,120
the audio what's what's starting quite

133
00:07:48,120 --> 00:07:51,479
well but it becomes worse and worse oh I

134
00:07:51,479 --> 00:07:53,520
was afraid that I was afraid of that

135
00:07:53,520 --> 00:07:55,520
um

136
00:07:59,400 --> 00:08:01,520
um

137
00:08:01,699 --> 00:08:06,199
well then um

138
00:08:14,660 --> 00:08:17,460
because for some reason the audio uh

139
00:08:17,460 --> 00:08:19,379
becomes worse and worse

140
00:08:19,379 --> 00:08:21,599
how I turned it off in background is

141
00:08:21,599 --> 00:08:24,180
that better oh oh much better thing oh

142
00:08:24,180 --> 00:08:25,620
interesting thanks for that you're

143
00:08:25,620 --> 00:08:27,360
sitting besides me almost so it's

144
00:08:27,360 --> 00:08:29,340
excellent

145
00:08:29,340 --> 00:08:31,680
um my big comment here on validator

146
00:08:31,680 --> 00:08:34,860
requirements is we need more comments

147
00:08:34,860 --> 00:08:36,299
from the working group to sort of move

148
00:08:36,299 --> 00:08:38,580
these documents along and so we're we

149
00:08:38,580 --> 00:08:40,620
get stuck and so the three of us have to

150
00:08:40,620 --> 00:08:42,539
go chase down

151
00:08:42,539 --> 00:08:45,300
um reviewers or or people to sort of you

152
00:08:45,300 --> 00:08:47,640
know thumbs up thumbs down

153
00:08:47,640 --> 00:08:49,620
um is there anybody in the room that's

154
00:08:49,620 --> 00:08:51,060
against moving this the working group

155
00:08:51,060 --> 00:08:54,000
last call please speak up

156
00:08:54,000 --> 00:08:55,500
um or we'll consider that the working

157
00:08:55,500 --> 00:08:57,720
request call approval

158
00:08:57,720 --> 00:08:59,160
um and we can move on from there I know

159
00:08:59,160 --> 00:09:00,720
we have one comment from Brian that

160
00:09:00,720 --> 00:09:02,640
needs to be addressed

161
00:09:02,640 --> 00:09:04,800
um so and we will get that address from

162
00:09:04,800 --> 00:09:06,060
Daniel

163
00:09:06,060 --> 00:09:08,640
um and part of the reason we're

164
00:09:08,640 --> 00:09:10,080
expecting moving documents as long as

165
00:09:10,080 --> 00:09:11,940
we're not we need more help from working

166
00:09:11,940 --> 00:09:13,860
here on that

167
00:09:13,860 --> 00:09:15,060
um yeah Tim

168
00:09:15,060 --> 00:09:18,018
yes Tim yeah

169
00:09:20,600 --> 00:09:22,620
so I'll

170
00:09:22,620 --> 00:09:24,959
I'll I just that was all really the

171
00:09:24,959 --> 00:09:26,880
comment I'd like to just get more folks

172
00:09:26,880 --> 00:09:28,980
on the working group last call

173
00:09:28,980 --> 00:09:29,820
um

174
00:09:29,820 --> 00:09:31,920
to sort of help us get those things

175
00:09:31,920 --> 00:09:34,260
moving along and I'll kick over to benno

176
00:09:34,260 --> 00:09:36,839
then and I apologize me Deco seems to be

177
00:09:36,839 --> 00:09:40,399
hating me this morning

178
00:09:40,980 --> 00:09:42,959
thank you thank you

179
00:09:42,959 --> 00:09:47,640
okay so oh sorry

180
00:09:47,640 --> 00:09:50,580
um Jeff Houston yeah responding to the

181
00:09:50,580 --> 00:09:53,580
previous slide please yes

182
00:09:53,580 --> 00:09:56,100
um I think it's pretty sad that we're

183
00:09:56,100 --> 00:09:57,480
moving a document into working group

184
00:09:57,480 --> 00:09:59,700
last call with only one comment

185
00:09:59,700 --> 00:10:01,680
and yeah the thing that's kind of

186
00:10:01,680 --> 00:10:03,660
changed is of course there's now a DNS

187
00:10:03,660 --> 00:10:05,700
directorate and as chairs I believe you

188
00:10:05,700 --> 00:10:07,920
have the ability to actually request

189
00:10:07,920 --> 00:10:10,140
an early review by a member of the

190
00:10:10,140 --> 00:10:12,540
directorate and so one of the ways to

191
00:10:12,540 --> 00:10:14,399
actually resolve this is rather than go

192
00:10:14,399 --> 00:10:16,320
oh working group last call even though

193
00:10:16,320 --> 00:10:18,899
no one has read it evidently is to

194
00:10:18,899 --> 00:10:20,279
actually throw it at the directorate at

195
00:10:20,279 --> 00:10:21,540
this point and ask for an early review

196
00:10:21,540 --> 00:10:23,880
to see if it should proceed just a

197
00:10:23,880 --> 00:10:24,720
thought

198
00:10:24,720 --> 00:10:27,560
thank you Jeff

199
00:10:27,899 --> 00:10:30,600
yep yeah thank you Jeff that's actually

200
00:10:30,600 --> 00:10:32,760
really helpful um to have the reminder

201
00:10:32,760 --> 00:10:36,180
that the 80s have spun up the DNS

202
00:10:36,180 --> 00:10:37,800
directorate and that is another resource

203
00:10:37,800 --> 00:10:40,620
we have as far as managing our documents

204
00:10:40,620 --> 00:10:44,459
thank you I agree Jeff yep I agree and

205
00:10:44,459 --> 00:10:46,019
Jeff why don't you take we give you the

206
00:10:46,019 --> 00:10:48,240
action item of of asking for a review of

207
00:10:48,240 --> 00:10:52,519
this one how's that you're now in charge

208
00:10:52,800 --> 00:10:54,959
um this is Jeff I can assign a reviewer

209
00:10:54,959 --> 00:10:56,459
but I kind of signed a document for

210
00:10:56,459 --> 00:10:58,500
review I don't have that magic power in

211
00:10:58,500 --> 00:11:00,420
the data tracker I think chairs or

212
00:11:00,420 --> 00:11:03,060
someone can do that that bitter it's an

213
00:11:03,060 --> 00:11:05,040
it's an area director thing so and I'm

214
00:11:05,040 --> 00:11:06,540
sure there's an area director there

215
00:11:06,540 --> 00:11:09,120
who's qualified to push those buttons we

216
00:11:09,120 --> 00:11:11,399
will sort the buttons we'll sort the

217
00:11:11,399 --> 00:11:14,240
buttons offline thanks

218
00:11:15,360 --> 00:11:18,300
okay oh

219
00:11:18,300 --> 00:11:21,300
so oh so

220
00:11:21,300 --> 00:11:25,140
other current uh working group documents

221
00:11:25,140 --> 00:11:27,240
um we think an author think is close to

222
00:11:27,240 --> 00:11:28,800
working group last call

223
00:11:28,800 --> 00:11:31,079
so not just any specific order here we

224
00:11:31,079 --> 00:11:35,480
see blue note is not optional the RFC

225
00:11:35,480 --> 00:11:39,380
84.99 base there's now discussion on two

226
00:11:39,380 --> 00:11:43,500
terminology yes at the the belly wig I

227
00:11:43,500 --> 00:11:46,079
think that discussion is

228
00:11:46,079 --> 00:11:49,380
uh Billy Victor historical is well had

229
00:11:49,380 --> 00:11:52,980
some replies but especially uh defining

230
00:11:52,980 --> 00:11:53,880
glue

231
00:11:53,880 --> 00:11:56,160
does see some discussion very good thank

232
00:11:56,160 --> 00:11:59,040
you so we need to

233
00:11:59,040 --> 00:12:00,660
take this discussion further to the

234
00:12:00,660 --> 00:12:02,339
mailing list

235
00:12:02,339 --> 00:12:05,339
preferably finishing up in one or two

236
00:12:05,339 --> 00:12:08,220
three weeks but limited and then we can

237
00:12:08,220 --> 00:12:10,620
make forward progress with both

238
00:12:10,620 --> 00:12:12,180
documents

239
00:12:12,180 --> 00:12:15,480
all TLD will be presented in a minute or

240
00:12:15,480 --> 00:12:17,710
in five minutes

241
00:12:17,710 --> 00:12:18,480
[Music]

242
00:12:18,480 --> 00:12:19,800
um

243
00:12:19,800 --> 00:12:23,959
the Nissan version uh the authors think

244
00:12:23,959 --> 00:12:27,180
they Incorporated all the feedback from

245
00:12:27,180 --> 00:12:29,160
the mailing list

246
00:12:29,160 --> 00:12:30,959
they think it's ready for working group

247
00:12:30,959 --> 00:12:32,220
last call

248
00:12:32,220 --> 00:12:35,100
we will schedule it and please have a

249
00:12:35,100 --> 00:12:37,380
second look at the document and give

250
00:12:37,380 --> 00:12:39,300
feedback on the mailing list

251
00:12:39,300 --> 00:12:41,279
and Dinesh error reporting my good

252
00:12:41,279 --> 00:12:43,560
progress and will be presented later

253
00:12:43,560 --> 00:12:46,560
this this session

254
00:12:46,560 --> 00:12:49,620
so we're making good progress overall

255
00:12:49,620 --> 00:12:50,579
um

256
00:12:50,579 --> 00:12:53,880
we just just had a meeting with the

257
00:12:53,880 --> 00:12:56,959
author of dinosaur oh sorry

258
00:12:56,959 --> 00:13:00,480
dinasek bootstrapping I think the author

259
00:13:00,480 --> 00:13:02,279
also think it's ready for working group

260
00:13:02,279 --> 00:13:03,839
last call

261
00:13:03,839 --> 00:13:06,540
the Incorporated a number of uh the

262
00:13:06,540 --> 00:13:08,040
feedback from the working group there

263
00:13:08,040 --> 00:13:09,600
was some discussion

264
00:13:09,600 --> 00:13:12,180
so we also probably want to make

265
00:13:12,180 --> 00:13:14,160
progress here I will discuss it also

266
00:13:14,160 --> 00:13:16,200
with the author

267
00:13:16,200 --> 00:13:18,480
and as revalidation

268
00:13:18,480 --> 00:13:21,600
it will be some other authors helping

269
00:13:21,600 --> 00:13:23,700
with the document because some one of

270
00:13:23,700 --> 00:13:25,560
the authors has another job in other

271
00:13:25,560 --> 00:13:27,979
priorities

272
00:13:28,040 --> 00:13:30,360
uh rights

273
00:13:30,360 --> 00:13:34,320
more work unisec automation that one uh

274
00:13:34,320 --> 00:13:37,200
there will also be in another author or

275
00:13:37,200 --> 00:13:39,540
author should be added to the document

276
00:13:39,540 --> 00:13:42,120
it's in good shape maybe another

277
00:13:42,120 --> 00:13:44,700
revision and we'll also ask for a

278
00:13:44,700 --> 00:13:46,440
working group last call from the from

279
00:13:46,440 --> 00:13:48,240
the working group

280
00:13:48,240 --> 00:13:51,420
the domain verification techniques uh

281
00:13:51,420 --> 00:13:54,600
will be up will be presented and updated

282
00:13:54,600 --> 00:13:56,579
if time permitting let's put it on the

283
00:13:56,579 --> 00:13:58,500
agenda yesterday

284
00:13:58,500 --> 00:14:01,800
and caching resolution failures will be

285
00:14:01,800 --> 00:14:05,399
presented so all in all uh yeah we make

286
00:14:05,399 --> 00:14:06,779
a good progress with the documents

287
00:14:06,779 --> 00:14:08,579
they're either close to working group

288
00:14:08,579 --> 00:14:11,100
law or making good progress so thank you

289
00:14:11,100 --> 00:14:16,100
and just adopt that SVC bit svcb Dane

290
00:14:17,279 --> 00:14:19,800
um no well I will skip these slides

291
00:14:19,800 --> 00:14:21,540
these are possible candidates for

292
00:14:21,540 --> 00:14:24,060
adoption new work in the working group I

293
00:14:24,060 --> 00:14:25,680
will reach out to some of the documents

294
00:14:25,680 --> 00:14:26,940
authors

295
00:14:26,940 --> 00:14:29,040
because it didn't have much attention on

296
00:14:29,040 --> 00:14:30,720
the mailing list yet but there's big

297
00:14:30,720 --> 00:14:32,880
continuous development in updates of the

298
00:14:32,880 --> 00:14:35,160
documents so it should get more

299
00:14:35,160 --> 00:14:37,200
attention of the working group or by the

300
00:14:37,200 --> 00:14:38,519
working group

301
00:14:38,519 --> 00:14:41,180
good

302
00:14:42,120 --> 00:14:45,600
our work is also on data tracker of

303
00:14:45,600 --> 00:14:48,480
course and on GitHub so check the the

304
00:14:48,480 --> 00:14:50,699
links if you want to get the latest

305
00:14:50,699 --> 00:14:52,920
updates or interact with us or with the

306
00:14:52,920 --> 00:14:55,279
authors

307
00:14:56,399 --> 00:15:00,000
this agenda I'll have somewhere okay

308
00:15:00,000 --> 00:15:03,360
well this is

309
00:15:03,360 --> 00:15:05,519
the current agenda for the working

310
00:15:05,519 --> 00:15:08,579
current working group yeah I will yeah I

311
00:15:08,579 --> 00:15:11,339
will go over the slides it's not so for

312
00:15:11,339 --> 00:15:12,540
consideration we have three

313
00:15:12,540 --> 00:15:15,480
presentations and if time permitting

314
00:15:15,480 --> 00:15:17,519
other work has priority but if time

315
00:15:17,519 --> 00:15:19,079
permitting we have these two

316
00:15:19,079 --> 00:15:21,060
presentations at the very end of the of

317
00:15:21,060 --> 00:15:23,420
the session

318
00:15:24,060 --> 00:15:27,600
we can start let's get started I will

319
00:15:27,600 --> 00:15:29,220
load the next slide here so you do the

320
00:15:29,220 --> 00:15:31,820
introductions

321
00:15:41,940 --> 00:15:43,820
oh sorry this is next

322
00:15:43,820 --> 00:15:46,260
one right yeah

323
00:15:46,260 --> 00:15:50,100
okay yeah so um we had a lot of

324
00:15:50,100 --> 00:15:51,540
discussion on the mailing list both on

325
00:15:51,540 --> 00:15:53,160
the process and the substance around the

326
00:15:53,160 --> 00:15:55,860
all TLD draft and the goal today you

327
00:15:55,860 --> 00:15:57,540
know where we gave it we're giving it a

328
00:15:57,540 --> 00:15:58,980
strictly limited time

329
00:15:58,980 --> 00:16:01,560
and a strictly limited scope

330
00:16:01,560 --> 00:16:05,220
but Paul has uh very graciously agreed

331
00:16:05,220 --> 00:16:08,760
to come up and and speak to

332
00:16:08,760 --> 00:16:10,199
are there open issues that will benefit

333
00:16:10,199 --> 00:16:12,480
from further discussion um we've the

334
00:16:12,480 --> 00:16:14,279
chairs and editors have discussed what

335
00:16:14,279 --> 00:16:16,320
seemed to be contentious issues the the

336
00:16:16,320 --> 00:16:19,260
chairs posted some concerns

337
00:16:19,260 --> 00:16:21,600
on the list and that I believe you know

338
00:16:21,600 --> 00:16:25,699
have been addressed in the current draft

339
00:16:25,860 --> 00:16:28,079
um if it seems we do have open issues

340
00:16:28,079 --> 00:16:30,600
that could be closed by further

341
00:16:30,600 --> 00:16:32,220
discussion we'll schedule an interim or

342
00:16:32,220 --> 00:16:34,320
some other way of dealing with those

343
00:16:34,320 --> 00:16:35,820
but if it seems we've said everything

344
00:16:35,820 --> 00:16:37,320
and Views are not likely to change

345
00:16:37,320 --> 00:16:38,820
further we will move to working group

346
00:16:38,820 --> 00:16:40,500
last call

347
00:16:40,500 --> 00:16:41,759
um thanks everybody for your patience

348
00:16:41,759 --> 00:16:43,500
and we will we are getting this this

349
00:16:43,500 --> 00:16:45,600
draft towards uh

350
00:16:45,600 --> 00:16:48,480
resolution of one kind or another so

351
00:16:48,480 --> 00:16:51,440
Paul if you wouldn't

352
00:16:51,440 --> 00:16:54,959
uh just a very quick note Rob Wilton

353
00:16:54,959 --> 00:16:56,399
who's sitting over there is the

354
00:16:56,399 --> 00:16:58,860
responsible ad for this not me

355
00:16:58,860 --> 00:17:01,500
because Warren is a co-editor the the

356
00:17:01,500 --> 00:17:03,360
rules we all operate under mean that he

357
00:17:03,360 --> 00:17:06,419
can't be also the A.D that that oversees

358
00:17:06,419 --> 00:17:08,880
it's it's movement in the process so

359
00:17:08,880 --> 00:17:12,079
thanks for that reminder Warren

360
00:17:17,160 --> 00:17:19,439
so given that

361
00:17:19,439 --> 00:17:21,240
um I'm gonna do

362
00:17:21,240 --> 00:17:24,959
a mediumly brief presentation chairs are

363
00:17:24,959 --> 00:17:27,480
going to run a mic line if there are

364
00:17:27,480 --> 00:17:29,280
people who want to say things that

365
00:17:29,280 --> 00:17:31,080
haven't been said on the list or new and

366
00:17:31,080 --> 00:17:34,620
such and a new deck is being shared

367
00:17:34,620 --> 00:17:36,260
yeah

368
00:17:36,260 --> 00:17:38,059
indeed

369
00:17:38,059 --> 00:17:41,340
give me one minute because come find it

370
00:17:41,340 --> 00:17:43,520
now

371
00:17:54,059 --> 00:17:56,600
foreign

372
00:18:00,900 --> 00:18:04,580
it's overwritten sorry

373
00:18:09,260 --> 00:18:11,880
excuses I already checked everything but

374
00:18:11,880 --> 00:18:14,520
Victor

375
00:18:14,520 --> 00:18:16,740
I see Victor and the queue Victor would

376
00:18:16,740 --> 00:18:19,799
you Victor are you going to

377
00:18:19,799 --> 00:18:22,700
proceed this

378
00:18:26,700 --> 00:18:28,620
I don't know it's in the data tracker

379
00:18:28,620 --> 00:18:29,400
but

380
00:18:29,400 --> 00:18:31,440
on Mid Echo

381
00:18:31,440 --> 00:18:33,780
did you click the refresh probably I

382
00:18:33,780 --> 00:18:37,260
need to refresh yeah oh I updated the

383
00:18:37,260 --> 00:18:40,700
slides this morning yeah

384
00:18:41,179 --> 00:18:44,419
but um

385
00:18:45,600 --> 00:18:47,400
my own

386
00:18:47,400 --> 00:18:51,419
you are on Victor yes okay uh

387
00:18:51,419 --> 00:18:55,140
right so if there's a quick spot uh the

388
00:18:55,140 --> 00:18:58,799
the similar somewhat dot home TLD has

389
00:18:58,799 --> 00:19:01,200
has a few hints for validators to try

390
00:19:01,200 --> 00:19:04,200
and reduce leakage of traffic I was

391
00:19:04,200 --> 00:19:05,760
wondering whether anything like that

392
00:19:05,760 --> 00:19:08,700
should be said for an adult like you

393
00:19:08,700 --> 00:19:10,620
know returning you know proof of

394
00:19:10,620 --> 00:19:12,900
non-existence of BS while not sending

395
00:19:12,900 --> 00:19:16,679
any other queries so I'll sort of cover

396
00:19:16,679 --> 00:19:18,840
that but since alt is not going to be in

397
00:19:18,840 --> 00:19:20,400
the root Zone

398
00:19:20,400 --> 00:19:23,580
that doesn't seem possible to do

399
00:19:23,580 --> 00:19:24,960
uh

400
00:19:24,960 --> 00:19:26,460
you can still return proof of

401
00:19:26,460 --> 00:19:28,919
non-existence off the whole domain which

402
00:19:28,919 --> 00:19:30,600
includes proof of the existence of its

403
00:19:30,600 --> 00:19:34,820
DS so it seems to work

404
00:19:35,400 --> 00:19:38,580
I'm not index domain sure how you would

405
00:19:38,580 --> 00:19:40,320
do that for a zone that doesn't exist

406
00:19:40,320 --> 00:19:43,080
maybe send that to the list the the

407
00:19:43,080 --> 00:19:46,799
insect records prove it's non-existent

408
00:19:46,799 --> 00:19:50,240
that's dnsic for you

409
00:20:03,440 --> 00:20:06,500
all right

410
00:20:09,780 --> 00:20:11,880
you want me to share it yeah please

411
00:20:11,880 --> 00:20:17,160
please because hopefully it works right

412
00:20:17,160 --> 00:20:19,740
oh wow we're letting Warren take over

413
00:20:19,740 --> 00:20:21,539
well the pro yeah the problem is that

414
00:20:21,539 --> 00:20:24,179
it's listed in the um manifest but it

415
00:20:24,179 --> 00:20:26,700
does not appear to actually but in the

416
00:20:26,700 --> 00:20:30,419
meat Echo IDC uh twice the the chair

417
00:20:30,419 --> 00:20:32,100
slides

418
00:20:32,100 --> 00:20:34,939
explain it

419
00:20:35,039 --> 00:20:37,260
somebody has to actually brought me

420
00:20:37,260 --> 00:20:40,280
sharing oh you need to Grant Warren

421
00:20:40,280 --> 00:20:44,120
shareability yes

422
00:20:46,400 --> 00:20:49,940
you should have it now

423
00:20:51,660 --> 00:20:53,700
this is very weird

424
00:20:53,700 --> 00:20:55,140
chair sites

425
00:20:55,140 --> 00:20:58,460
yeah same for me

426
00:21:00,660 --> 00:21:02,460
yes

427
00:21:02,460 --> 00:21:05,460
Maybe

428
00:21:06,260 --> 00:21:09,600
are those the ones oh no that's

429
00:21:09,600 --> 00:21:12,179
Suzanne's oh it might have been that two

430
00:21:12,179 --> 00:21:14,100
things were named similarly but

431
00:21:14,100 --> 00:21:15,419
shouldn't be

432
00:21:15,419 --> 00:21:18,600
similarly but not this not right okay

433
00:21:18,600 --> 00:21:19,980
all right the other thing we could do is

434
00:21:19,980 --> 00:21:21,900
go on to the next agenda item you figure

435
00:21:21,900 --> 00:21:23,460
it out

436
00:21:23,460 --> 00:21:26,960
again Warren wants permission again

437
00:21:27,240 --> 00:21:29,900
I did

438
00:21:32,760 --> 00:21:35,340
you should have it

439
00:21:35,340 --> 00:21:38,100
we're looking at Orange slides down it's

440
00:21:38,100 --> 00:21:41,418
still saying shared so yeah

441
00:21:42,840 --> 00:21:45,559
okay I guess

442
00:21:46,020 --> 00:21:48,240
yeah okay

443
00:21:48,240 --> 00:21:50,840
thank you

444
00:21:51,080 --> 00:21:54,360
thank you that went more easily than I

445
00:21:54,360 --> 00:21:56,840
thought it would

446
00:21:56,940 --> 00:21:59,520
wow this is yeah this is new on me

447
00:21:59,520 --> 00:22:01,500
um with apologies

448
00:22:01,500 --> 00:22:03,179
um

449
00:22:03,179 --> 00:22:05,640
so Roy was next

450
00:22:05,640 --> 00:22:09,419
shows yes

451
00:22:12,360 --> 00:22:15,900
actually if Roy Ahrens isn't here yes

452
00:22:15,900 --> 00:22:18,179
yes but I will oh you were doing okay

453
00:22:18,179 --> 00:22:21,539
yeah I uh okay

454
00:22:21,539 --> 00:22:24,780
yeah so actually uh DNS error reporting

455
00:22:24,780 --> 00:22:28,260
will be the next slide sets and also uh

456
00:22:28,260 --> 00:22:30,240
hackathon results

457
00:22:30,240 --> 00:22:31,860
because

458
00:22:31,860 --> 00:22:36,000
DNS error reporting was a major Topic at

459
00:22:36,000 --> 00:22:39,240
what we worked on during the hackathon

460
00:22:39,240 --> 00:22:42,780
uh there were five in-person persons

461
00:22:42,780 --> 00:22:45,419
working on it and one remote

462
00:22:45,419 --> 00:22:48,120
and uh yeah

463
00:22:48,120 --> 00:22:51,659
so uh Roy asked me better were also some

464
00:22:51,659 --> 00:22:54,780
other uh projects worked on so what I

465
00:22:54,780 --> 00:22:56,880
said why don't you present those other

466
00:22:56,880 --> 00:22:59,460
two and then I'll do the hackathon

467
00:22:59,460 --> 00:23:03,980
visuals for DNS air reporting

468
00:23:06,299 --> 00:23:07,380
um

469
00:23:07,380 --> 00:23:12,000
so uh next slide yes so uh indeed one of

470
00:23:12,000 --> 00:23:15,720
the projects was working on netina's

471
00:23:15,720 --> 00:23:17,340
resolver inbound

472
00:23:17,340 --> 00:23:21,679
so nothing is uh is a bill DNS Library

473
00:23:21,679 --> 00:23:25,919
works on primarily by dick Franks and

474
00:23:25,919 --> 00:23:28,919
Dick told me once if it's nice weather

475
00:23:28,919 --> 00:23:32,880
he goes out plays golf and if it's rainy

476
00:23:32,880 --> 00:23:36,120
then he works on nattiness

477
00:23:36,120 --> 00:23:37,860
and uh

478
00:23:37,860 --> 00:23:40,620
he lives in London so it rains quite

479
00:23:40,620 --> 00:23:43,500
often and

480
00:23:43,500 --> 00:23:46,200
but nothingness is actually a early

481
00:23:46,200 --> 00:23:48,960
adopter of many of the stormers that are

482
00:23:48,960 --> 00:23:51,240
drafted index up so

483
00:23:51,240 --> 00:23:54,360
uh worthwhile to to look at if you want

484
00:23:54,360 --> 00:23:55,740
to compare it with your own

485
00:23:55,740 --> 00:23:59,580
implementation or to see how it's uh how

486
00:23:59,580 --> 00:24:02,580
your draft draft is implemented

487
00:24:02,580 --> 00:24:07,740
uh so we worked on a uh uh bindings for

488
00:24:07,740 --> 00:24:11,039
nutinas with lip inbound and that

489
00:24:11,039 --> 00:24:14,640
involved adding some new uh functions to

490
00:24:14,640 --> 00:24:18,179
lip and mount to synth packets directly

491
00:24:18,179 --> 00:24:21,480
so this is not quite finished but it's

492
00:24:21,480 --> 00:24:22,260
coming

493
00:24:22,260 --> 00:24:25,080
next slide please

494
00:24:25,080 --> 00:24:28,020
and the other interesting hack we did

495
00:24:28,020 --> 00:24:31,580
besides the initial reporting is

496
00:24:31,580 --> 00:24:34,620
implementation of handling of encrypted

497
00:24:34,620 --> 00:24:37,980
client hello in a proof of concept

498
00:24:37,980 --> 00:24:40,140
Library called connect by name

499
00:24:40,140 --> 00:24:41,280
so

500
00:24:41,280 --> 00:24:41,880
um

501
00:24:41,880 --> 00:24:44,580
the server name indications is one of

502
00:24:44,580 --> 00:24:48,360
the holes in the Leaky privacy boat that

503
00:24:48,360 --> 00:24:51,960
leaks the the name to which TLS session

504
00:24:51,960 --> 00:24:57,419
is set up and encrypted clients hello is

505
00:24:57,419 --> 00:24:59,580
the solution to make that private as

506
00:24:59,580 --> 00:25:00,299
well

507
00:25:00,299 --> 00:25:04,140
so we have this uh proof of concept

508
00:25:04,140 --> 00:25:07,500
library that sets up connections and

509
00:25:07,500 --> 00:25:10,559
under the hood does everything but it's

510
00:25:10,559 --> 00:25:14,159
good right happy eyeballs Dane you can

511
00:25:14,159 --> 00:25:17,820
specify policies to say I want all the

512
00:25:17,820 --> 00:25:20,460
DNS lookups to be opportunistically

513
00:25:20,460 --> 00:25:23,640
private or authenticated privates

514
00:25:23,640 --> 00:25:27,360
and uh yeah so Philip Holmberg worked on

515
00:25:27,360 --> 00:25:28,640
that

516
00:25:28,640 --> 00:25:32,760
uh for the library looking up svcb and

517
00:25:32,760 --> 00:25:36,600
https records and using the encrypted

518
00:25:36,600 --> 00:25:39,500
client hello configuration parameter to

519
00:25:39,500 --> 00:25:41,400
set up

520
00:25:41,400 --> 00:25:44,220
uh the encrypted clients hello with this

521
00:25:44,220 --> 00:25:47,039
with this one server we know that

522
00:25:47,039 --> 00:25:50,840
support is which is default.io

523
00:25:50,840 --> 00:25:53,880
and filipio also later in this session

524
00:25:53,880 --> 00:25:57,500
talk about the uh

525
00:25:57,500 --> 00:26:02,400
policy uh uh uh option that is also a

526
00:26:02,400 --> 00:26:04,620
part or came out of the connectpoint

527
00:26:04,620 --> 00:26:09,020
name projects and next slide please

528
00:26:10,799 --> 00:26:14,480
yeah for you

529
00:26:15,440 --> 00:26:19,679
so uh yeah as we we have a really good

530
00:26:19,679 --> 00:26:22,260
time so I think it's also for other

531
00:26:22,260 --> 00:26:24,120
people working on drafts good to

532
00:26:24,120 --> 00:26:27,360
participate in the hackathon if not for

533
00:26:27,360 --> 00:26:30,419
the importion uh or the direct feedback

534
00:26:30,419 --> 00:26:32,159
on uh

535
00:26:32,159 --> 00:26:35,580
uh your drafts then uh for for the foot

536
00:26:35,580 --> 00:26:38,039
because it was amazing

537
00:26:38,039 --> 00:26:41,340
and we also learned that DNS error

538
00:26:41,340 --> 00:26:43,080
reporting rocks

539
00:26:43,080 --> 00:26:45,720
next slide

540
00:26:45,720 --> 00:26:48,840
so this is these are all the people that

541
00:26:48,840 --> 00:26:51,840
uh worked on it I see there's one name

542
00:26:51,840 --> 00:26:54,179
missing we also had a remote participant

543
00:26:54,179 --> 00:26:56,779
on Cape

544
00:26:56,779 --> 00:27:00,059
and next slide Roy is going to take over

545
00:27:00,059 --> 00:27:04,399
to talk about the initial reporting

546
00:27:04,919 --> 00:27:07,679
thank you sorry thanks William

547
00:27:07,679 --> 00:27:09,480
um I'm Roy Adams

548
00:27:09,480 --> 00:27:12,360
um I'm one of the two authors for DNS

549
00:27:12,360 --> 00:27:14,820
error reporting

550
00:27:14,820 --> 00:27:17,279
um where are we um just smart

551
00:27:17,279 --> 00:27:18,320
introduction

552
00:27:18,320 --> 00:27:21,059
DNS air reporting builds upon extended

553
00:27:21,059 --> 00:27:23,460
DNS errors

554
00:27:23,460 --> 00:27:25,679
um it reports to the operator of an

555
00:27:25,679 --> 00:27:27,179
authoritative domain instead of

556
00:27:27,179 --> 00:27:29,580
reporting back to the client that's what

557
00:27:29,580 --> 00:27:32,279
rc8914

558
00:27:32,279 --> 00:27:35,659
um is useful to begin with

559
00:27:35,700 --> 00:27:38,100
um the resolver where a small change I

560
00:27:38,100 --> 00:27:39,960
will get to that in a minute the

561
00:27:39,960 --> 00:27:41,640
resolver now indicates support for

562
00:27:41,640 --> 00:27:43,260
reporting

563
00:27:43,260 --> 00:27:44,760
um the authoritative Sheriff had then

564
00:27:44,760 --> 00:27:46,460
sends an agent domain in an IDI in his

565
00:27:46,460 --> 00:27:48,659
zero option

566
00:27:48,659 --> 00:27:51,419
sorry I'll take this off eating a zero

567
00:27:51,419 --> 00:27:52,980
option alongside

568
00:27:52,980 --> 00:27:55,380
um a regular response and then the

569
00:27:55,380 --> 00:27:56,880
resolver sends errors to the report

570
00:27:56,880 --> 00:27:59,279
receiving agents format is actually DNS

571
00:27:59,279 --> 00:28:00,240
query

572
00:28:00,240 --> 00:28:01,740
it's pretty straightforward we've seen

573
00:28:01,740 --> 00:28:04,140
it working during the hackathon also

574
00:28:04,140 --> 00:28:05,640
during the hackathon

575
00:28:05,640 --> 00:28:08,220
um folks were so enthusiastic that we

576
00:28:08,220 --> 00:28:09,600
immediately thought how can we improve

577
00:28:09,600 --> 00:28:11,039
this how can we make this more efficient

578
00:28:11,039 --> 00:28:14,299
next next slide please

579
00:28:15,840 --> 00:28:17,640
um one thing to make it more efficient

580
00:28:17,640 --> 00:28:20,159
so instead of using the report instead

581
00:28:20,159 --> 00:28:23,520
of usually queue type no to send a

582
00:28:23,520 --> 00:28:25,140
report

583
00:28:25,140 --> 00:28:26,940
and you want something back that you can

584
00:28:26,940 --> 00:28:28,380
cash

585
00:28:28,380 --> 00:28:32,580
initially we just had no error or any

586
00:28:32,580 --> 00:28:34,860
domain caching NX domain caching is a

587
00:28:34,860 --> 00:28:36,240
problem because you will cut off the

588
00:28:36,240 --> 00:28:37,679
entire

589
00:28:37,679 --> 00:28:39,900
um string for the the entire domain for

590
00:28:39,900 --> 00:28:43,020
that but if you have a tax record if you

591
00:28:43,020 --> 00:28:44,220
just

592
00:28:44,220 --> 00:28:46,260
query using a text record then you can

593
00:28:46,260 --> 00:28:48,059
tailor a response so you can basically

594
00:28:48,059 --> 00:28:52,020
send a specific text

595
00:28:52,080 --> 00:28:54,059
um record back with a TTL that is stay

596
00:28:54,059 --> 00:28:56,940
loot so it can dampen the query load

597
00:28:56,940 --> 00:28:58,320
accordingly

598
00:28:58,320 --> 00:29:00,840
and now we also have that the resolver

599
00:29:00,840 --> 00:29:02,700
must indicate support

600
00:29:02,700 --> 00:29:06,299
so what we used to have is that you just

601
00:29:06,299 --> 00:29:10,500
Spam with unsolicited Edina zero option

602
00:29:10,500 --> 00:29:13,980
in a response every time always

603
00:29:13,980 --> 00:29:14,640
um

604
00:29:14,640 --> 00:29:17,820
the reason we change that is not because

605
00:29:17,820 --> 00:29:19,940
um it's frowned upon to just

606
00:29:19,940 --> 00:29:23,340
include unsolicited DNS option edns

607
00:29:23,340 --> 00:29:26,039
options the reason for that is to avoid

608
00:29:26,039 --> 00:29:28,320
later on cascading error reports over

609
00:29:28,320 --> 00:29:31,740
error reports of error reports

610
00:29:31,740 --> 00:29:32,460
um

611
00:29:32,460 --> 00:29:35,220
so we change that another thing we um we

612
00:29:35,220 --> 00:29:36,720
we changed and this is a small

613
00:29:36,720 --> 00:29:38,039
optimization which is really really

614
00:29:38,039 --> 00:29:41,039
handy so in the formatters query you

615
00:29:41,039 --> 00:29:42,840
used to have

616
00:29:42,840 --> 00:29:44,159
um the

617
00:29:44,159 --> 00:29:47,760
extended DNS error as a as a label

618
00:29:47,760 --> 00:29:49,260
before the domain name that was broken

619
00:29:49,260 --> 00:29:52,860
it's easy to have it after domain name

620
00:29:52,860 --> 00:29:54,480
um so before the underscore error if you

621
00:29:54,480 --> 00:29:56,520
have read the draft and the reason for

622
00:29:56,520 --> 00:29:59,399
that you have now the error code in a

623
00:29:59,399 --> 00:30:01,200
consistent Place always it doesn't

624
00:30:01,200 --> 00:30:02,880
change

625
00:30:02,880 --> 00:30:04,740
um depending on the domain name length

626
00:30:04,740 --> 00:30:07,200
depending on the remaining that's broken

627
00:30:07,200 --> 00:30:10,460
all right next slide please

628
00:30:11,159 --> 00:30:12,840
um we have a few implementations I'll

629
00:30:12,840 --> 00:30:14,760
list them quickly um Willem who was just

630
00:30:14,760 --> 00:30:17,220
up here in Unbound

631
00:30:17,220 --> 00:30:19,080
um you can actually test it now

632
00:30:19,080 --> 00:30:22,080
um by by going to these um open testing

633
00:30:22,080 --> 00:30:23,279
resolvers

634
00:30:23,279 --> 00:30:26,399
and next slide please

635
00:30:26,399 --> 00:30:28,860
um we have Stefan boxmeyer Stefan had an

636
00:30:28,860 --> 00:30:30,179
implementation

637
00:30:30,179 --> 00:30:32,460
um he's named a drink

638
00:30:32,460 --> 00:30:34,740
I hope it's an acronym otherwise it's a

639
00:30:34,740 --> 00:30:36,179
really funny one

640
00:30:36,179 --> 00:30:36,899
um

641
00:30:36,899 --> 00:30:39,000
it's an authority server

642
00:30:39,000 --> 00:30:40,860
um easily adjustable for experimentation

643
00:30:40,860 --> 00:30:42,360
etc etc

644
00:30:42,360 --> 00:30:44,779
um works as well

645
00:30:44,779 --> 00:30:47,399
and the report processing so this is

646
00:30:47,399 --> 00:30:49,020
basically the next step once you receive

647
00:30:49,020 --> 00:30:50,700
the reports you can now process them and

648
00:30:50,700 --> 00:30:52,440
do something about it

649
00:30:52,440 --> 00:30:55,140
um next slide please

650
00:30:55,140 --> 00:30:57,059
um Shane was there as well

651
00:30:57,059 --> 00:30:58,980
um Shane worked on an Implement a

652
00:30:58,980 --> 00:31:01,559
proprietary authoritative server called

653
00:31:01,559 --> 00:31:05,039
Trax this is ns1's proprietary server

654
00:31:05,039 --> 00:31:06,360
um he mentioned it was straightforward

655
00:31:06,360 --> 00:31:08,039
on the authoritative side

656
00:31:08,039 --> 00:31:10,380
um and you can configure unique report

657
00:31:10,380 --> 00:31:13,620
receiving agents per server

658
00:31:13,620 --> 00:31:16,380
next slide please

659
00:31:16,380 --> 00:31:18,600
um Mark Andrews submitted a ticket for

660
00:31:18,600 --> 00:31:20,279
buy nine

661
00:31:20,279 --> 00:31:21,779
um I'm just going to leave you to that

662
00:31:21,779 --> 00:31:25,140
I'll I'll leave it to Mark to um to come

663
00:31:25,140 --> 00:31:26,760
to the mic later on to explain what it

664
00:31:26,760 --> 00:31:28,500
means um I don't want to say they're

665
00:31:28,500 --> 00:31:30,779
going to implement it it's basically a

666
00:31:30,779 --> 00:31:32,880
ticket that says

667
00:31:32,880 --> 00:31:33,600
um

668
00:31:33,600 --> 00:31:36,960
have a look at this draft and maybe

669
00:31:36,960 --> 00:31:39,720
um implement it in the future Tom Carpe

670
00:31:39,720 --> 00:31:41,580
from home I apologize I didn't list him

671
00:31:41,580 --> 00:31:43,200
in the initial slide with all the people

672
00:31:43,200 --> 00:31:45,840
at the desk at the at the at the table

673
00:31:45,840 --> 00:31:48,960
and Tom Carpe worked on an ldns version

674
00:31:48,960 --> 00:31:51,840
a development Branch a version for for

675
00:31:51,840 --> 00:31:54,179
ldns and ldns test DNS

676
00:31:54,179 --> 00:31:57,299
test test NS sorry it can now easily be

677
00:31:57,299 --> 00:31:59,240
used to fake an error reporting support

678
00:31:59,240 --> 00:32:03,919
authoritative server next slide please

679
00:32:04,500 --> 00:32:05,940
um oh yeah this is this is what I wanted

680
00:32:05,940 --> 00:32:08,640
to make clear so version 03 we thought

681
00:32:08,640 --> 00:32:10,559
it was stable enough

682
00:32:10,559 --> 00:32:12,720
um after some experimenting we made some

683
00:32:12,720 --> 00:32:15,240
optimizations not super major changes

684
00:32:15,240 --> 00:32:19,200
but some optimizations so after Dash o4

685
00:32:19,200 --> 00:32:21,059
comes out I haven't submitted it yet

686
00:32:21,059 --> 00:32:22,919
after that comes out we'll give it a few

687
00:32:22,919 --> 00:32:25,440
days a few weeks to let

688
00:32:25,440 --> 00:32:27,779
um to let people read it and then we

689
00:32:27,779 --> 00:32:30,480
will ask the working group chairs to

690
00:32:30,480 --> 00:32:33,120
consider a working group last call

691
00:32:33,120 --> 00:32:35,100
all right um if you have any questions

692
00:32:35,100 --> 00:32:36,720
or suggestions

693
00:32:36,720 --> 00:32:38,100
um there's of course the mailing list

694
00:32:38,100 --> 00:32:40,140
yes up at itf.org

695
00:32:40,140 --> 00:32:42,799
it's not really useful to to to to to

696
00:32:42,799 --> 00:32:45,779
Mill me personally I'll do my best but

697
00:32:45,779 --> 00:32:47,520
um your what I've noticed is that your

698
00:32:47,520 --> 00:32:49,919
questions often are relevant to the

699
00:32:49,919 --> 00:32:51,480
entire working group which I've got a

700
00:32:51,480 --> 00:32:52,980
fair amount of feedback that's now in

701
00:32:52,980 --> 00:32:56,039
the draft and better wording etc etc but

702
00:32:56,039 --> 00:32:57,419
send your questions and suggestions to

703
00:32:57,419 --> 00:32:59,880
the mailing list that's it thank you

704
00:32:59,880 --> 00:33:02,279
thank you

705
00:33:02,279 --> 00:33:04,740
um we have one question from Victor

706
00:33:04,740 --> 00:33:07,559
fixer please go ahead

707
00:33:07,559 --> 00:33:10,080
uh should any language appear in the

708
00:33:10,080 --> 00:33:14,159
draft about validators behind forwarders

709
00:33:14,159 --> 00:33:15,899
um they don't they aren't directly

710
00:33:15,899 --> 00:33:17,940
talking to the auth so they can't see

711
00:33:17,940 --> 00:33:20,700
these extensions

712
00:33:20,700 --> 00:33:22,820
um

713
00:33:22,980 --> 00:33:25,440
thank you Victor DM

714
00:33:25,440 --> 00:33:27,899
um I think the question is related to

715
00:33:27,899 --> 00:33:30,960
the problem of cascading errors when

716
00:33:30,960 --> 00:33:34,580
when they um when a reporting resolver

717
00:33:34,580 --> 00:33:37,919
forwards the broken error query in order

718
00:33:37,919 --> 00:33:40,500
to get it reported to a forwarder the

719
00:33:40,500 --> 00:33:43,500
forwarder might then do ediness sorry it

720
00:33:43,500 --> 00:33:45,120
might might do error reporting as well

721
00:33:45,120 --> 00:33:48,419
and then you get cascading error reports

722
00:33:48,419 --> 00:33:50,039
now

723
00:33:50,039 --> 00:33:51,059
um

724
00:33:51,059 --> 00:33:54,059
one idea is to make sure that when a

725
00:33:54,059 --> 00:33:57,179
domain starts with underscore ER

726
00:33:57,179 --> 00:33:59,880
then don't send this option

727
00:33:59,880 --> 00:34:02,279
in the um in the in the query that you

728
00:34:02,279 --> 00:34:04,260
send out so don't send the edns option

729
00:34:04,260 --> 00:34:06,240
in queries about error reports that's

730
00:34:06,240 --> 00:34:08,219
that's one way to do it the other way to

731
00:34:08,219 --> 00:34:11,639
do it if you if you're a forwarder

732
00:34:11,639 --> 00:34:13,440
um

733
00:34:13,440 --> 00:34:15,179
are you actually doing error detection

734
00:34:15,179 --> 00:34:17,219
right I mean that's that's a question

735
00:34:17,219 --> 00:34:19,260
with the forwarder if you do do error

736
00:34:19,260 --> 00:34:20,639
detection you basically need to

737
00:34:20,639 --> 00:34:22,739
implement the draft accordingly

738
00:34:22,739 --> 00:34:24,599
so

739
00:34:24,599 --> 00:34:26,520
um I will add some language into the

740
00:34:26,520 --> 00:34:27,599
documents

741
00:34:27,599 --> 00:34:30,899
um basically regarding forwarders or

742
00:34:30,899 --> 00:34:33,119
basically clients that may not do error

743
00:34:33,119 --> 00:34:35,359
reporting that may set the uh the the

744
00:34:35,359 --> 00:34:39,679
reporting option thank you Victor

745
00:34:41,339 --> 00:34:42,899
thank you Roy

746
00:34:42,899 --> 00:34:45,119
okay

747
00:34:45,119 --> 00:34:46,739
up next

748
00:34:46,739 --> 00:34:49,080
yeah it looks like we have the slide

749
00:34:49,080 --> 00:34:53,159
issue fixed if you're ready to try again

750
00:34:53,159 --> 00:34:56,839
Paul thanks for your patience

751
00:34:59,220 --> 00:35:03,240
foreign cool

752
00:35:08,280 --> 00:35:11,060
next slide

753
00:35:13,079 --> 00:35:15,540
okay so some people have been asking

754
00:35:15,540 --> 00:35:18,540
what is the status of the draft

755
00:35:18,540 --> 00:35:22,020
um the actual status I can do this

756
00:35:22,020 --> 00:35:24,480
um is held by working group

757
00:35:24,480 --> 00:35:26,660
um

758
00:35:26,820 --> 00:35:28,920
Warren and I co-authors ask for working

759
00:35:28,920 --> 00:35:31,619
group plus call shares ask for changes

760
00:35:31,619 --> 00:35:34,260
we did those the chairs seem to have

761
00:35:34,260 --> 00:35:36,599
accepted those changes

762
00:35:36,599 --> 00:35:39,900
um there's a new draft now and then once

763
00:35:39,900 --> 00:35:41,760
that newest draft came out a whole bunch

764
00:35:41,760 --> 00:35:43,619
of discussion happened I'm going to be

765
00:35:43,619 --> 00:35:45,720
covering the discussion here but

766
00:35:45,720 --> 00:35:49,320
basically the status is we're still in

767
00:35:49,320 --> 00:35:52,079
held by WG the chairs are still trying

768
00:35:52,079 --> 00:35:55,440
to decide about working you know moving

769
00:35:55,440 --> 00:35:58,440
it into working group last call so it's

770
00:35:58,440 --> 00:36:02,060
still just a draft next

771
00:36:03,300 --> 00:36:06,599
um there are two top issues and I think

772
00:36:06,599 --> 00:36:08,460
probably two of the only issues that

773
00:36:08,460 --> 00:36:10,380
really matter here

774
00:36:10,380 --> 00:36:11,940
um this is the first one I've got two

775
00:36:11,940 --> 00:36:13,619
slides on this and I've got two slides

776
00:36:13,619 --> 00:36:15,540
on the second issue

777
00:36:15,540 --> 00:36:16,680
um

778
00:36:16,680 --> 00:36:18,980
so

779
00:36:18,980 --> 00:36:22,800
basically we have this text which says

780
00:36:22,800 --> 00:36:25,560
what resolvers should do when when it

781
00:36:25,560 --> 00:36:27,300
comes to dot alt and the current text

782
00:36:27,300 --> 00:36:29,099
basically says

783
00:36:29,099 --> 00:36:31,320
treat it like anything else it's not

784
00:36:31,320 --> 00:36:34,380
special some people on the list want to

785
00:36:34,380 --> 00:36:36,780
make it special that is they want to put

786
00:36:36,780 --> 00:36:39,599
text in this document and say resolvers

787
00:36:39,599 --> 00:36:43,800
should or must do something here

788
00:36:43,800 --> 00:36:47,640
um and the difference being that if the

789
00:36:47,640 --> 00:36:50,579
if the text says a resolver should or

790
00:36:50,579 --> 00:36:53,940
must be doing something then the hope is

791
00:36:53,940 --> 00:36:56,400
that resolver operators I'm sorry

792
00:36:56,400 --> 00:36:58,920
resolver vendors will read the draft go

793
00:36:58,920 --> 00:37:01,260
I'm supposed to do something with this

794
00:37:01,260 --> 00:37:04,400
and do it next slide

795
00:37:05,520 --> 00:37:06,480
um

796
00:37:06,480 --> 00:37:08,400
so

797
00:37:08,400 --> 00:37:10,619
the reason for putting in a muster

798
00:37:10,619 --> 00:37:13,500
should is to is to get resolver

799
00:37:13,500 --> 00:37:16,140
implementations to not send things to

800
00:37:16,140 --> 00:37:18,119
the root so the you know that's the only

801
00:37:18,119 --> 00:37:20,220
reason to do it is to is to have an

802
00:37:20,220 --> 00:37:22,980
effect the desired effect is fewer

803
00:37:22,980 --> 00:37:24,780
queries will go to the root because

804
00:37:24,780 --> 00:37:26,940
they'll just get swallowed by the

805
00:37:26,940 --> 00:37:29,160
resolver itself

806
00:37:29,160 --> 00:37:31,980
um and that has been shown to to be to

807
00:37:31,980 --> 00:37:34,500
work in the past dot onion the whatever

808
00:37:34,500 --> 00:37:37,380
the RFC that created dot onion says

809
00:37:37,380 --> 00:37:39,720
resolvers should not send these on and

810
00:37:39,720 --> 00:37:42,240
some revolvers don't some resolver

811
00:37:42,240 --> 00:37:44,220
implementations don't and some resolver

812
00:37:44,220 --> 00:37:46,800
implementations ignored that and they do

813
00:37:46,800 --> 00:37:49,619
pass it on and and their root server

814
00:37:49,619 --> 00:37:51,000
operators sitting in the room they can

815
00:37:51,000 --> 00:37:53,220
look at you know how many dot onion

816
00:37:53,220 --> 00:37:55,079
queries they get and such so it's

817
00:37:55,079 --> 00:37:57,359
definitely not zero but if you look in

818
00:37:57,359 --> 00:38:00,660
the code for some of the resolvers they

819
00:38:00,660 --> 00:38:02,400
swallow dot onion

820
00:38:02,400 --> 00:38:05,640
okay Paul do you want to take questions

821
00:38:05,640 --> 00:38:08,280
now there's one in the queue or this is

822
00:38:08,280 --> 00:38:11,220
this is totally your call and let me at

823
00:38:11,220 --> 00:38:13,380
least finish this slide yeah okay but

824
00:38:13,380 --> 00:38:14,640
then if you would like me to take

825
00:38:14,640 --> 00:38:16,920
questions here that's fine

826
00:38:16,920 --> 00:38:17,780
um

827
00:38:17,780 --> 00:38:20,820
so the

828
00:38:20,820 --> 00:38:23,220
um but since we know not all resolver

829
00:38:23,220 --> 00:38:25,200
software I'm sorry Wes what are you

830
00:38:25,200 --> 00:38:26,099
saying

831
00:38:26,099 --> 00:38:27,540
keep going thank you yeah I think sorry

832
00:38:27,540 --> 00:38:31,200
maybe take yourself out of the queue or

833
00:38:31,200 --> 00:38:33,300
um so

834
00:38:33,300 --> 00:38:34,920
um

835
00:38:34,920 --> 00:38:39,660
the the the benefit is for adding this

836
00:38:39,660 --> 00:38:42,480
code would be to the root servers it

837
00:38:42,480 --> 00:38:45,119
does not help a resolver to have

838
00:38:45,119 --> 00:38:47,760
more code in it you know more code can

839
00:38:47,760 --> 00:38:49,920
always cause more errors it also doesn't

840
00:38:49,920 --> 00:38:52,500
hurt as we know because this is true for

841
00:38:52,500 --> 00:38:54,540
Don onion it's been true for years in a

842
00:38:54,540 --> 00:38:56,460
couple of the resolver software and no

843
00:38:56,460 --> 00:38:58,500
one's had any problems so really the

844
00:38:58,500 --> 00:39:02,579
question is what do we want to do here

845
00:39:02,579 --> 00:39:06,420
um about saying that a resolver software

846
00:39:06,420 --> 00:39:09,420
should or must do something

847
00:39:09,420 --> 00:39:11,099
um and then the last bullet here is the

848
00:39:11,099 --> 00:39:13,079
note which is this is an informational

849
00:39:13,079 --> 00:39:15,480
document which is fine but it's sort of

850
00:39:15,480 --> 00:39:17,339
weird for an informational document to

851
00:39:17,339 --> 00:39:20,040
tell all of the resolver operator all

852
00:39:20,040 --> 00:39:21,839
the resolver vendors out there what they

853
00:39:21,839 --> 00:39:24,180
should or must do

854
00:39:24,180 --> 00:39:26,700
um so would you do you want to stop and

855
00:39:26,700 --> 00:39:28,680
do this one first or go to the next one

856
00:39:28,680 --> 00:39:30,839
okay so okay now we're switching topic

857
00:39:30,839 --> 00:39:32,160
next slide

858
00:39:32,160 --> 00:39:34,440
this is the second major issue that came

859
00:39:34,440 --> 00:39:36,599
up on the list after we posted the last

860
00:39:36,599 --> 00:39:37,800
draft

861
00:39:37,800 --> 00:39:40,260
um which is some people said oh no we

862
00:39:40,260 --> 00:39:42,660
shouldn't be we shouldn't be using the

863
00:39:42,660 --> 00:39:44,880
current design which is just never

864
00:39:44,880 --> 00:39:47,339
allocate dot alt in the root we should

865
00:39:47,339 --> 00:39:50,220
allocate it and then have it Point as a

866
00:39:50,220 --> 00:39:52,440
d name to as112.

867
00:39:52,440 --> 00:39:55,320
um we have rfcs on that

868
00:39:55,320 --> 00:39:57,180
um this was brought up five years ago

869
00:39:57,180 --> 00:39:58,920
when the document was in working group

870
00:39:58,920 --> 00:40:01,079
last call the first time it wasn't

871
00:40:01,079 --> 00:40:02,820
accepted then but now there's a

872
00:40:02,820 --> 00:40:04,800
discussion maybe we should really think

873
00:40:04,800 --> 00:40:06,359
of this now

874
00:40:06,359 --> 00:40:07,440
um

875
00:40:07,440 --> 00:40:10,859
the reason for doing this that was

876
00:40:10,859 --> 00:40:12,780
stated on the list and is backed up by

877
00:40:12,780 --> 00:40:16,440
data is that it seems like resolver

878
00:40:16,440 --> 00:40:19,619
implementations do better with a

879
00:40:19,619 --> 00:40:22,140
delegation at caching the fact that it's

880
00:40:22,140 --> 00:40:24,960
delegated then remembering that they

881
00:40:24,960 --> 00:40:26,339
have a negative

882
00:40:26,339 --> 00:40:30,420
um a negative uh answer in their cash so

883
00:40:30,420 --> 00:40:33,000
as you can see if you go to

884
00:40:33,000 --> 00:40:34,520
um that link

885
00:40:34,520 --> 00:40:36,900
Dwayne has a long presentation but

886
00:40:36,900 --> 00:40:39,599
basically when they dropped in a

887
00:40:39,599 --> 00:40:40,800
delegation

888
00:40:40,800 --> 00:40:44,520
the cash is kicked in much better so

889
00:40:44,520 --> 00:40:47,760
this would this redesign would again not

890
00:40:47,760 --> 00:40:49,740
help the end users but it would help

891
00:40:49,740 --> 00:40:52,680
reduce traffic going to the root servers

892
00:40:52,680 --> 00:40:55,220
next slide

893
00:40:56,460 --> 00:40:57,300
um

894
00:40:57,300 --> 00:40:58,940
so

895
00:40:58,940 --> 00:41:02,339
this is not an easy fix because in fact

896
00:41:02,339 --> 00:41:05,400
the whole point of this document has to

897
00:41:05,400 --> 00:41:09,720
date been this TLD will never appear in

898
00:41:09,720 --> 00:41:11,579
the root so when we say to somebody hey

899
00:41:11,579 --> 00:41:13,560
please use this TLD you're safe to use

900
00:41:13,560 --> 00:41:16,680
this TLD for all of your alternative

901
00:41:16,680 --> 00:41:19,680
stuff they knew that anything that

902
00:41:19,680 --> 00:41:20,820
leaked

903
00:41:20,820 --> 00:41:23,460
wouldn't would never pass the root

904
00:41:23,460 --> 00:41:24,839
servers that is they would come back

905
00:41:24,839 --> 00:41:28,680
with an NX domain what doing as112 says

906
00:41:28,680 --> 00:41:30,180
is

907
00:41:30,180 --> 00:41:34,440
um we already have a set of of

908
00:41:34,440 --> 00:41:35,160
um

909
00:41:35,160 --> 00:41:37,680
authoritative servers that will then

910
00:41:37,680 --> 00:41:40,020
include this for who always give back

911
00:41:40,020 --> 00:41:42,540
the right NX domain answer

912
00:41:42,540 --> 00:41:45,180
but this means that to somebody who's

913
00:41:45,180 --> 00:41:47,160
writing something that might use this

914
00:41:47,160 --> 00:41:49,079
they know that in fact it'll go to the

915
00:41:49,079 --> 00:41:50,640
root server and then go to some other

916
00:41:50,640 --> 00:41:52,920
server that's not controlled by them

917
00:41:52,920 --> 00:41:56,160
that they are relying on to send an NX

918
00:41:56,160 --> 00:41:57,960
domain so that's a very different

919
00:41:57,960 --> 00:42:01,440
promise to the people who would be using

920
00:42:01,440 --> 00:42:04,200
the dot alt domain

921
00:42:04,200 --> 00:42:06,720
um it would require new agreements with

922
00:42:06,720 --> 00:42:07,859
Ayanna

923
00:42:07,859 --> 00:42:09,960
um but and some people said oh we can't

924
00:42:09,960 --> 00:42:11,940
do it because you know you can't put

925
00:42:11,940 --> 00:42:14,160
these in in the root Zone

926
00:42:14,160 --> 00:42:18,000
you can make changes to what Ayanna does

927
00:42:18,000 --> 00:42:19,800
it has to be you know asked officially

928
00:42:19,800 --> 00:42:22,079
and stuff like that but saying this will

929
00:42:22,079 --> 00:42:24,900
never happen is simply silly the ietf

930
00:42:24,900 --> 00:42:27,119
gets to say what happens in the root

931
00:42:27,119 --> 00:42:29,520
Zone on a technical level so that's not

932
00:42:29,520 --> 00:42:31,380
an argument against it but the basic

933
00:42:31,380 --> 00:42:34,320
argument against it is that this is a

934
00:42:34,320 --> 00:42:37,380
complete redesign this is saying instead

935
00:42:37,380 --> 00:42:39,780
of simply don't do this we're going to

936
00:42:39,780 --> 00:42:42,240
design it this way and then just as a

937
00:42:42,240 --> 00:42:43,980
side note Warren and I have talked about

938
00:42:43,980 --> 00:42:46,560
this if the working group wants to go

939
00:42:46,560 --> 00:42:47,640
for this

940
00:42:47,640 --> 00:42:49,560
it needs to start as a completely new

941
00:42:49,560 --> 00:42:51,960
draft because a lot of the text in the

942
00:42:51,960 --> 00:42:54,780
document it would be simply wrong

943
00:42:54,780 --> 00:42:57,240
that is the lot of the text in the

944
00:42:57,240 --> 00:43:00,240
document is assuming this is not going

945
00:43:00,240 --> 00:43:02,220
to be something in the root Zone

946
00:43:02,220 --> 00:43:03,960
um and neither of us are interested in

947
00:43:03,960 --> 00:43:05,819
this so if if this is what the working

948
00:43:05,819 --> 00:43:07,380
group wants you're going to have to find

949
00:43:07,380 --> 00:43:10,140
some new Authors to do it it's still

950
00:43:10,140 --> 00:43:13,140
doable I'm not in favor of it but I'm

951
00:43:13,140 --> 00:43:15,720
just one voice here and that's the last

952
00:43:15,720 --> 00:43:19,319
slide so then you guys run the mic line

953
00:43:19,319 --> 00:43:21,960
and you you say when not you know when

954
00:43:21,960 --> 00:43:24,240
to stop

955
00:43:24,240 --> 00:43:26,460
yeah um there has been quite a lot of

956
00:43:26,460 --> 00:43:28,079
discussion on the list several times

957
00:43:28,079 --> 00:43:30,060
over but the reason why we're doing this

958
00:43:30,060 --> 00:43:31,680
is so that everybody knows where the

959
00:43:31,680 --> 00:43:33,720
where the document stands now

960
00:43:33,720 --> 00:43:36,480
and if there's anything you feel has not

961
00:43:36,480 --> 00:43:38,940
been said or needs to be said

962
00:43:38,940 --> 00:43:40,740
and again

963
00:43:40,740 --> 00:43:42,359
um given where we're at and where we

964
00:43:42,359 --> 00:43:44,460
have been in the discussion you know we

965
00:43:44,460 --> 00:43:45,780
do have a few minutes

966
00:43:45,780 --> 00:43:48,660
but this is my this is mostly sort of a

967
00:43:48,660 --> 00:43:50,160
status

968
00:43:50,160 --> 00:43:51,780
setting

969
00:43:51,780 --> 00:43:56,760
Wes thank you Wes herediker uscisi

970
00:43:56,760 --> 00:44:00,180
um uh not with my icann board hat not

971
00:44:00,180 --> 00:44:02,280
with my baby hat but with my root server

972
00:44:02,280 --> 00:44:03,839
operator hat because I think that's the

973
00:44:03,839 --> 00:44:06,660
one you wanted right yes exactly right

974
00:44:06,660 --> 00:44:10,819
um this is DNS op afterwards

975
00:44:11,339 --> 00:44:12,720
so when I think about you know what

976
00:44:12,720 --> 00:44:14,400
should be done so hey thank you for

977
00:44:14,400 --> 00:44:16,619
putting the the document together in the

978
00:44:16,619 --> 00:44:18,240
first place

979
00:44:18,240 --> 00:44:20,700
um the right thing is don't send packets

980
00:44:20,700 --> 00:44:22,800
to the DNS that shouldn't go to the DNS

981
00:44:22,800 --> 00:44:25,200
right so don't leak yeah right don't

982
00:44:25,200 --> 00:44:27,780
leak and and Dot alt is supposed to be

983
00:44:27,780 --> 00:44:29,760
the switch that says don't use it

984
00:44:29,760 --> 00:44:32,160
weirdly enough right but it will happen

985
00:44:32,160 --> 00:44:34,800
we know it will happen I do see queries

986
00:44:34,800 --> 00:44:37,200
for DOT onion I don't see a ton I don't

987
00:44:37,200 --> 00:44:39,960
worry about the massive dot alt you know

988
00:44:39,960 --> 00:44:41,700
queries because I don't see a massive

989
00:44:41,700 --> 00:44:44,760
amount that swamps us for DOT onion that

990
00:44:44,760 --> 00:44:47,400
being said don't do it so my suggestion

991
00:44:47,400 --> 00:44:49,859
for the document is yeah do put in a

992
00:44:49,859 --> 00:44:51,720
statement saying resolver shouldn't send

993
00:44:51,720 --> 00:44:53,880
this if possible so they should know

994
00:44:53,880 --> 00:44:56,700
about dot alt and not send it yeah and I

995
00:44:56,700 --> 00:44:58,859
recognize that the code issue

996
00:44:58,859 --> 00:45:00,540
um sure but we already have a code issue

997
00:45:00,540 --> 00:45:03,420
for pre-existing stuff and again only

998
00:45:03,420 --> 00:45:06,000
only I looked at all four of the the

999
00:45:06,000 --> 00:45:08,339
common resolvers only two of them did

1000
00:45:08,339 --> 00:45:10,440
have that code in it but they already

1001
00:45:10,440 --> 00:45:12,000
have the code and it looked like it was

1002
00:45:12,000 --> 00:45:13,859
a way where they could extend the list

1003
00:45:13,859 --> 00:45:15,960
of what they have and so one of the

1004
00:45:15,960 --> 00:45:17,220
things I was going to add is we won't

1005
00:45:17,220 --> 00:45:19,680
get hundred percent deployment but the

1006
00:45:19,680 --> 00:45:22,800
reality is we shouldn't saturate the DNS

1007
00:45:22,800 --> 00:45:24,599
system with anything so I don't really

1008
00:45:24,599 --> 00:45:25,980
care about the root server system as

1009
00:45:25,980 --> 00:45:28,319
much because there's a lot of them I

1010
00:45:28,319 --> 00:45:30,119
care more about the constrained lengths

1011
00:45:30,119 --> 00:45:31,440
that you know maybe actually these extra

1012
00:45:31,440 --> 00:45:33,119
queries might actually you know affect

1013
00:45:33,119 --> 00:45:34,619
people way down the line or something

1014
00:45:34,619 --> 00:45:37,020
like that as far as it going into an

1015
00:45:37,020 --> 00:45:38,880
informational document it's still

1016
00:45:38,880 --> 00:45:41,460
guidance you know I mean the reality is

1017
00:45:41,460 --> 00:45:43,260
it should must are not enforceable in

1018
00:45:43,260 --> 00:45:46,140
standards documents either right so you

1019
00:45:46,140 --> 00:45:47,400
know I don't have an issue with putting

1020
00:45:47,400 --> 00:45:49,020
should and musk kind of information in

1021
00:45:49,020 --> 00:45:50,760
there before you go off to the next one

1022
00:45:50,760 --> 00:45:52,560
do you have a preference here for should

1023
00:45:52,560 --> 00:45:55,020
or must

1024
00:45:55,020 --> 00:45:57,500
foreign

1025
00:45:58,319 --> 00:46:00,060
does it really make a difference they're

1026
00:46:00,060 --> 00:46:02,040
either going to no no preferences a

1027
00:46:02,040 --> 00:46:04,020
perfectly good preference thanks I would

1028
00:46:04,020 --> 00:46:06,180
say should because the system's going to

1029
00:46:06,180 --> 00:46:07,800
operate without it right you're not

1030
00:46:07,800 --> 00:46:09,480
going to cause interoperability problems

1031
00:46:09,480 --> 00:46:13,079
if it's a should okay great so yep um as

1032
00:46:13,079 --> 00:46:16,319
far as 112 you know yes it it might it

1033
00:46:16,319 --> 00:46:17,819
probably needs to be a separate document

1034
00:46:17,819 --> 00:46:19,980
it could be done later

1035
00:46:19,980 --> 00:46:21,540
um again

1036
00:46:21,540 --> 00:46:24,119
it can't be done later if this is

1037
00:46:24,119 --> 00:46:25,859
already an RFC because this one says

1038
00:46:25,859 --> 00:46:28,260
shall never appear in the root Zone

1039
00:46:28,260 --> 00:46:31,200
we we could that the other one could

1040
00:46:31,200 --> 00:46:33,720
update this one to fix that statement

1041
00:46:33,720 --> 00:46:36,540
that's a broken promise then I I would I

1042
00:46:36,540 --> 00:46:38,520
would be very hesitant to be author of

1043
00:46:38,520 --> 00:46:40,740
this document knowing that we intended

1044
00:46:40,740 --> 00:46:43,020
to break the promise later

1045
00:46:43,020 --> 00:46:44,760
I in fact I can just say right now I

1046
00:46:44,760 --> 00:46:46,380
would take my name off this in a moment

1047
00:46:46,380 --> 00:46:48,180
if I thought that we were going to break

1048
00:46:48,180 --> 00:46:52,040
the promise made in this RFC later

1049
00:46:53,520 --> 00:46:56,700
that is fair but you so so why don't we

1050
00:46:56,700 --> 00:46:58,319
take this offline Paul because okay the

1051
00:46:58,319 --> 00:46:59,760
queue is already long but okay but we

1052
00:46:59,760 --> 00:47:02,900
can fight about it okay

1053
00:47:03,319 --> 00:47:05,520
yeah the other thing to comment on that

1054
00:47:05,520 --> 00:47:07,140
as far as the document status is that

1055
00:47:07,140 --> 00:47:08,760
it's actually currently tagged as

1056
00:47:08,760 --> 00:47:10,260
standards track and I believe that's

1057
00:47:10,260 --> 00:47:11,760
required by the registry policy

1058
00:47:11,760 --> 00:47:13,560
informational I believe

1059
00:47:13,560 --> 00:47:16,140
don't think so well what I was going to

1060
00:47:16,140 --> 00:47:18,780
say and that's not required uh the

1061
00:47:18,780 --> 00:47:22,740
requirement for 761 is either standards

1062
00:47:22,740 --> 00:47:25,920
track or isg approval which this would

1063
00:47:25,920 --> 00:47:29,480
have isg approval eventually

1064
00:47:29,819 --> 00:47:31,500
that's yeah that's something for the for

1065
00:47:31,500 --> 00:47:33,359
the chairs and the da data to sort

1066
00:47:33,359 --> 00:47:35,400
thanks

1067
00:47:35,400 --> 00:47:38,000
foreign

1068
00:47:38,119 --> 00:47:41,099
I don't like the idea of as112 it just

1069
00:47:41,099 --> 00:47:44,099
seems like a hammer for what shouldn't

1070
00:47:44,099 --> 00:47:46,980
actually really get to DNS in normal

1071
00:47:46,980 --> 00:47:48,420
working

1072
00:47:48,420 --> 00:47:51,060
operations I do have a question though

1073
00:47:51,060 --> 00:47:52,980
and this might be better for the root

1074
00:47:52,980 --> 00:47:55,859
operators what do we perceive as the

1075
00:47:55,859 --> 00:47:59,760
load increase of leakage of alt into the

1076
00:47:59,760 --> 00:48:02,460
normal DNS space I mean how big of a

1077
00:48:02,460 --> 00:48:05,640
problem is it actually in just leaving

1078
00:48:05,640 --> 00:48:07,980
this out in the sense that if we don't

1079
00:48:07,980 --> 00:48:10,920
even say should or must

1080
00:48:10,920 --> 00:48:13,020
um what is the actual load impact and

1081
00:48:13,020 --> 00:48:15,300
how much of a problem would that be if

1082
00:48:15,300 --> 00:48:17,880
we had that leakage

1083
00:48:17,880 --> 00:48:20,220
I'm not answering that one

1084
00:48:20,220 --> 00:48:22,440
I can switch hats long enough to answer

1085
00:48:22,440 --> 00:48:24,300
that one as

1086
00:48:24,300 --> 00:48:26,520
in my yes putting on the roots overhead

1087
00:48:26,520 --> 00:48:28,200
that Wes and I actually passed back and

1088
00:48:28,200 --> 00:48:30,480
forth the the actual impact would be

1089
00:48:30,480 --> 00:48:33,180
negligible it's just a matter of in

1090
00:48:33,180 --> 00:48:36,480
general what you get is is there there's

1091
00:48:36,480 --> 00:48:37,920
an awful lot of stuff that goes to the

1092
00:48:37,920 --> 00:48:39,900
roots that shouldn't

1093
00:48:39,900 --> 00:48:42,300
then we don't need to do anything really

1094
00:48:42,300 --> 00:48:43,859
it might be

1095
00:48:43,859 --> 00:48:46,440
the roots are massively over provisioned

1096
00:48:46,440 --> 00:48:48,480
is is sort of the right statement there

1097
00:48:48,480 --> 00:48:50,700
that doesn't mean that we want the

1098
00:48:50,700 --> 00:48:54,500
queries exactly exactly okay

1099
00:48:54,500 --> 00:48:58,380
so next is Elliot hi there Elliot Lear

1100
00:48:58,380 --> 00:48:59,460
here

1101
00:48:59,460 --> 00:49:03,240
um okay so uh a couple things first

1102
00:49:03,240 --> 00:49:05,040
thanks Paul for taking on the work

1103
00:49:05,040 --> 00:49:07,079
thanks Warren and thanks chairs and

1104
00:49:07,079 --> 00:49:09,660
working group for working through this

1105
00:49:09,660 --> 00:49:11,099
um as the independent submissions editor

1106
00:49:11,099 --> 00:49:13,619
this came to me as you saw

1107
00:49:13,619 --> 00:49:16,619
um through the DNS uh work and in in the

1108
00:49:16,619 --> 00:49:18,540
gns work depends on this work completing

1109
00:49:18,540 --> 00:49:20,700
and so again I thank the working group

1110
00:49:20,700 --> 00:49:22,980
for for working on this

1111
00:49:22,980 --> 00:49:24,079
um

1112
00:49:24,079 --> 00:49:26,520
there is we've we've had a discussion

1113
00:49:26,520 --> 00:49:28,980
about a second level registry you pulled

1114
00:49:28,980 --> 00:49:31,920
out the text there uh in the preview in

1115
00:49:31,920 --> 00:49:34,319
the current version only you sort of

1116
00:49:34,319 --> 00:49:35,760
half did that

1117
00:49:35,760 --> 00:49:38,460
and there is still text in the draft

1118
00:49:38,460 --> 00:49:40,500
that says

1119
00:49:40,500 --> 00:49:43,800
um that uh name service name systems

1120
00:49:43,800 --> 00:49:48,780
should add a unique uh field uh to the

1121
00:49:48,780 --> 00:49:50,880
left of dot all and I'm going to channel

1122
00:49:50,880 --> 00:49:53,400
Martin shenzenbach whose users said you

1123
00:49:53,400 --> 00:49:54,060
know

1124
00:49:54,060 --> 00:49:56,220
do or do not if we're not going to have

1125
00:49:56,220 --> 00:49:58,619
a registry and let's not have that

1126
00:49:58,619 --> 00:50:00,960
convention either it would be at this

1127
00:50:00,960 --> 00:50:02,819
point if we are going to have the

1128
00:50:02,819 --> 00:50:04,020
registry then let's have the register

1129
00:50:04,020 --> 00:50:06,060
sure absolutely send that to the list

1130
00:50:06,060 --> 00:50:07,800
especially with word changes you're

1131
00:50:07,800 --> 00:50:11,579
making it simpler thank you okay that

1132
00:50:11,579 --> 00:50:13,200
that's that's his point of view and I'll

1133
00:50:13,200 --> 00:50:15,300
just end with a third point which is

1134
00:50:15,300 --> 00:50:18,060
thank you again okay well again Warren

1135
00:50:18,060 --> 00:50:20,700
did all the work up till two drafts ago

1136
00:50:20,700 --> 00:50:22,160
so

1137
00:50:22,160 --> 00:50:24,900
is speaking as individual I just want to

1138
00:50:24,900 --> 00:50:26,700
say that I don't think the as12 solution

1139
00:50:26,700 --> 00:50:29,160
is very good because since it's not

1140
00:50:29,160 --> 00:50:31,079
specified what could be on the left side

1141
00:50:31,079 --> 00:50:34,500
of the of the alt part it could be a

1142
00:50:34,500 --> 00:50:36,720
three three thousand character string

1143
00:50:36,720 --> 00:50:40,020
and we only allow 63 on valid DNS so so

1144
00:50:40,020 --> 00:50:41,700
you're going to get form errors before

1145
00:50:41,700 --> 00:50:44,700
it would be following the D name up the

1146
00:50:44,700 --> 00:50:48,660
chain anyway so I think that the as112

1147
00:50:48,660 --> 00:50:51,059
will not catch the proper things or it

1148
00:50:51,059 --> 00:50:52,380
will catch things right actually has to

1149
00:50:52,380 --> 00:50:54,240
return form error instead of NX domain

1150
00:50:54,240 --> 00:50:56,520
or something so I think it's really bad

1151
00:50:56,520 --> 00:50:58,619
solution for this it's like the wrong

1152
00:50:58,619 --> 00:51:02,180
tool for this thanks

1153
00:51:03,180 --> 00:51:06,180
okay

1154
00:51:07,200 --> 00:51:10,680
Ben Schwartz hi

1155
00:51:10,680 --> 00:51:15,000
um on on queries to the root uh please I

1156
00:51:15,000 --> 00:51:16,619
I want to hear

1157
00:51:16,619 --> 00:51:18,960
sorry go ahead

1158
00:51:18,960 --> 00:51:21,960
on the topic of Aquarius to the root

1159
00:51:21,960 --> 00:51:24,260
the uh

1160
00:51:24,260 --> 00:51:27,420
I think that the right answer here is to

1161
00:51:27,420 --> 00:51:30,059
say that the

1162
00:51:30,059 --> 00:51:32,099
um from the Stubbs perspective a

1163
00:51:32,099 --> 00:51:34,319
recursive resolver's Behavior should not

1164
00:51:34,319 --> 00:51:36,839
be visibly altered by this informational

1165
00:51:36,839 --> 00:51:39,380
document

1166
00:51:39,900 --> 00:51:44,160
so while it's advantage while it's

1167
00:51:44,160 --> 00:51:47,940
advantageous to uh to the root for

1168
00:51:47,940 --> 00:51:50,280
recursive resolvers to synthesize some

1169
00:51:50,280 --> 00:51:54,300
responses locally for DOT alt uh and and

1170
00:51:54,300 --> 00:51:57,059
I think that's a good thing that

1171
00:51:57,059 --> 00:51:58,800
synthesis should not result in a

1172
00:51:58,800 --> 00:52:00,960
behavior change that's observable to the

1173
00:52:00,960 --> 00:52:03,359
stub resolver

1174
00:52:03,359 --> 00:52:06,480
uh and so what that means in my view is

1175
00:52:06,480 --> 00:52:08,099
that if we're going to talk about that

1176
00:52:08,099 --> 00:52:10,020
kind of synthesis we need to have some

1177
00:52:10,020 --> 00:52:11,819
very special language about how to

1178
00:52:11,819 --> 00:52:16,859
handle DNS sec because uh because I if I

1179
00:52:16,859 --> 00:52:18,599
ask the

1180
00:52:18,599 --> 00:52:21,059
uh if I ask my resolver whether dot alt

1181
00:52:21,059 --> 00:52:22,740
exists I'm asking whether or not all

1182
00:52:22,740 --> 00:52:26,280
exists in the root and I want a DNS set

1183
00:52:26,280 --> 00:52:28,140
validated I want I want the correct

1184
00:52:28,140 --> 00:52:30,720
signed and SEC record to tell me there's

1185
00:52:30,720 --> 00:52:32,280
no such thing and that can't be

1186
00:52:32,280 --> 00:52:34,319
synthesized locally

1187
00:52:34,319 --> 00:52:37,619
so uh I I don't object to local

1188
00:52:37,619 --> 00:52:41,339
synthesis in general but I think that uh

1189
00:52:41,339 --> 00:52:43,559
it's not it's not straightforward to

1190
00:52:43,559 --> 00:52:45,599
implement uh at a minimum you know the

1191
00:52:45,599 --> 00:52:47,700
simplest way to do it is to just disable

1192
00:52:47,700 --> 00:52:51,300
local synthesis if the do bit is set for

1193
00:52:51,300 --> 00:52:52,079
example

1194
00:52:52,079 --> 00:52:54,599
essentially what we're saying is you're

1195
00:52:54,599 --> 00:52:56,280
allowed to do local root

1196
00:52:56,280 --> 00:52:58,559
and since dot all these will never be in

1197
00:52:58,559 --> 00:53:00,240
the root you're also allowed to do the

1198
00:53:00,240 --> 00:53:03,300
special subset of local root where you

1199
00:53:03,300 --> 00:53:05,520
only do local route for not alt because

1200
00:53:05,520 --> 00:53:07,680
we guarantee that that's never going to

1201
00:53:07,680 --> 00:53:09,900
be in the root

1202
00:53:09,900 --> 00:53:10,980
um

1203
00:53:10,980 --> 00:53:13,980
but uh but you can't just blindly

1204
00:53:13,980 --> 00:53:18,440
synthesize uh NX domain responses

1205
00:53:18,440 --> 00:53:22,280
because you can't sign them locally

1206
00:53:22,280 --> 00:53:24,300
unless you are also basically doing

1207
00:53:24,300 --> 00:53:25,800
local Loop

1208
00:53:25,800 --> 00:53:28,040
foreign

1209
00:53:38,000 --> 00:53:40,500
I want to just make one last editorial

1210
00:53:40,500 --> 00:53:42,900
comment that the draft constantly uses

1211
00:53:42,900 --> 00:53:45,780
the has adopted the terminology

1212
00:53:45,780 --> 00:53:49,980
um the DNS context as uh the namespace

1213
00:53:49,980 --> 00:53:53,460
anchored at the Ayanna root

1214
00:53:53,460 --> 00:53:55,380
um I find this terminology very

1215
00:53:55,380 --> 00:53:58,859
confusing because DNS is a protocol it's

1216
00:53:58,859 --> 00:54:00,780
a protocol that anybody can instantiate

1217
00:54:00,780 --> 00:54:03,720
an instance of not just Diana and there

1218
00:54:03,720 --> 00:54:06,059
are a bunch of alt routes that

1219
00:54:06,059 --> 00:54:08,940
uh prior to this document have always in

1220
00:54:08,940 --> 00:54:10,440
my experience been described as

1221
00:54:10,440 --> 00:54:13,680
implementations of DNS the protocol just

1222
00:54:13,680 --> 00:54:19,500
not the the Ayana root so uh I I just

1223
00:54:19,500 --> 00:54:20,940
have trouble reading the document

1224
00:54:20,940 --> 00:54:24,240
because of that okay if you can send uh

1225
00:54:24,240 --> 00:54:26,099
suggested text on that that would that

1226
00:54:26,099 --> 00:54:29,040
would be helpful I think to everybody

1227
00:54:29,040 --> 00:54:31,559
right thank you and sorry to sorry to

1228
00:54:31,559 --> 00:54:32,700
step on you Ben

1229
00:54:32,700 --> 00:54:35,160
um we had closed the queue after

1230
00:54:35,160 --> 00:54:37,980
then but

1231
00:54:37,980 --> 00:54:40,020
um Robert Rob did get in the queue as

1232
00:54:40,020 --> 00:54:42,599
the responsible ID so I'm gonna you get

1233
00:54:42,599 --> 00:54:45,660
a special pass yes sir Robertson

1234
00:54:45,660 --> 00:54:46,859
um just to say thank thanks thanks for

1235
00:54:46,859 --> 00:54:47,819
working group for working this I know

1236
00:54:47,819 --> 00:54:49,140
it's a sort of contentious topic and

1237
00:54:49,140 --> 00:54:50,700
tricky so I get it I think we're close

1238
00:54:50,700 --> 00:54:52,200
to rough consensus here so I think we're

1239
00:54:52,200 --> 00:54:53,579
making progress so I think that's great

1240
00:54:53,579 --> 00:54:55,140
I love someone to say I don't know

1241
00:54:55,140 --> 00:54:56,460
anything about DNS but I just want to

1242
00:54:56,460 --> 00:54:58,140
make one comment as an individual in

1243
00:54:58,140 --> 00:55:00,420
terms of the the must or way state must

1244
00:55:00,420 --> 00:55:03,180
or should statements is saying

1245
00:55:03,180 --> 00:55:05,520
um is it the the stub resolver shouldn't

1246
00:55:05,520 --> 00:55:06,420
be sending this stuff on because

1247
00:55:06,420 --> 00:55:08,220
obviously you should be filtering out at

1248
00:55:08,220 --> 00:55:10,440
that stage and if so can we put the

1249
00:55:10,440 --> 00:55:12,359
constraint on that and not the recursive

1250
00:55:12,359 --> 00:55:14,040
resolvers is what is that one option

1251
00:55:14,040 --> 00:55:15,960
does that make sense that's an option

1252
00:55:15,960 --> 00:55:19,980
but I think that the folks who wanted it

1253
00:55:19,980 --> 00:55:22,380
for the recursives know that asking the

1254
00:55:22,380 --> 00:55:24,480
stubs not to do something is sort of

1255
00:55:24,480 --> 00:55:27,420
silly you know it's like saying to your

1256
00:55:27,420 --> 00:55:30,300
your dog you know don't do that and the

1257
00:55:30,300 --> 00:55:32,720
dog goes great I heard the do that part

1258
00:55:32,720 --> 00:55:36,000
whereas recursive resolvers we know in

1259
00:55:36,000 --> 00:55:38,760
fact the resolver sought vendors

1260
00:55:38,760 --> 00:55:41,280
actually do the right thing a lot so I

1261
00:55:41,280 --> 00:55:43,020
think that that was more we can also add

1262
00:55:43,020 --> 00:55:45,240
it in for the stubs but that that's

1263
00:55:45,240 --> 00:55:48,059
almost wasted text okay and I'll

1264
00:55:48,059 --> 00:55:49,559
absolutely defer to the experts on this

1265
00:55:49,559 --> 00:55:50,700
and then the end of the other point I

1266
00:55:50,700 --> 00:55:52,140
want to make in terms of the document

1267
00:55:52,140 --> 00:55:55,500
status I I'm lesser keen on the isg

1268
00:55:55,500 --> 00:55:57,300
approval thing that could be slightly

1269
00:55:57,300 --> 00:55:59,579
trickier so is the reason why this can't

1270
00:55:59,579 --> 00:56:01,680
go through a standards track now and if

1271
00:56:01,680 --> 00:56:03,900
the isg then says actually we wanted to

1272
00:56:03,900 --> 00:56:05,640
be informational would downgrade it is

1273
00:56:05,640 --> 00:56:07,500
that that's up to the working group I

1274
00:56:07,500 --> 00:56:09,420
think the original reason for having it

1275
00:56:09,420 --> 00:56:11,280
as informational is there's no protocol

1276
00:56:11,280 --> 00:56:15,119
in this saying don't put something in in

1277
00:56:15,119 --> 00:56:16,859
the root server is not really a protocol

1278
00:56:16,859 --> 00:56:18,660
thing it could be standards track it can

1279
00:56:18,660 --> 00:56:20,160
be informational should not be

1280
00:56:20,160 --> 00:56:22,440
experimental so in my advice I think

1281
00:56:22,440 --> 00:56:23,700
standards track gives it a bit more

1282
00:56:23,700 --> 00:56:26,040
weight as to so I think that'd be my

1283
00:56:26,040 --> 00:56:28,319
recommendation okay great thank you

1284
00:56:28,319 --> 00:56:30,540
that's for the chairs not for Warren and

1285
00:56:30,540 --> 00:56:32,640
I okay okay

1286
00:56:32,640 --> 00:56:33,960
great thank you

1287
00:56:33,960 --> 00:56:37,099
thank you very much

1288
00:56:37,859 --> 00:56:39,000
who is next

1289
00:56:39,000 --> 00:56:40,319
step thank you

1290
00:56:40,319 --> 00:56:43,859
uh and and either the the people that

1291
00:56:43,859 --> 00:56:46,500
were cute and well the the queue was

1292
00:56:46,500 --> 00:56:48,480
locked please send also your comments or

1293
00:56:48,480 --> 00:56:50,880
your questions to the mailing list

1294
00:56:50,880 --> 00:56:55,339
and next next up is Dwayne

1295
00:56:55,859 --> 00:56:59,180
right there we go

1296
00:57:02,280 --> 00:57:03,839
all right hello everyone uh so I'm here

1297
00:57:03,839 --> 00:57:05,940
to talk about the draft which is about

1298
00:57:05,940 --> 00:57:08,040
caching

1299
00:57:08,040 --> 00:57:08,819
um

1300
00:57:08,819 --> 00:57:10,380
negative caching of DNS resolution

1301
00:57:10,380 --> 00:57:11,520
failures

1302
00:57:11,520 --> 00:57:15,420
this was last presented at ietf 113.

1303
00:57:15,420 --> 00:57:18,559
next slide please

1304
00:57:18,780 --> 00:57:21,839
so as a quick reminder there are some

1305
00:57:21,839 --> 00:57:24,000
recursive name servers that seem to be

1306
00:57:24,000 --> 00:57:27,420
really really bad at caching resolution

1307
00:57:27,420 --> 00:57:30,780
failures or remembering that when they

1308
00:57:30,780 --> 00:57:33,119
asked for uh

1309
00:57:33,119 --> 00:57:35,220
for for resolution that they didn't get

1310
00:57:35,220 --> 00:57:37,740
an answer the the graph there on the

1311
00:57:37,740 --> 00:57:39,960
right is from the um the presentation to

1312
00:57:39,960 --> 00:57:42,660
this working group at ihf113 uh and

1313
00:57:42,660 --> 00:57:44,339
there's there's more supporting data

1314
00:57:44,339 --> 00:57:45,480
there so you can go look at that if you

1315
00:57:45,480 --> 00:57:47,400
want to but this graph in particular was

1316
00:57:47,400 --> 00:57:49,260
from the Facebook outage of last year

1317
00:57:49,260 --> 00:57:52,200
where we saw a huge increase in in query

1318
00:57:52,200 --> 00:57:54,599
traffic uh to the comnet name servers

1319
00:57:54,599 --> 00:57:56,520
during that outage

1320
00:57:56,520 --> 00:57:58,440
so the goal of this draft is really to

1321
00:57:58,440 --> 00:58:00,079
strengthen the requirements around

1322
00:58:00,079 --> 00:58:02,839
caching resolution failures and avoid

1323
00:58:02,839 --> 00:58:05,280
these sorts of unnecessary repeated

1324
00:58:05,280 --> 00:58:07,740
queries

1325
00:58:07,740 --> 00:58:09,300
so there's a little definition in in the

1326
00:58:09,300 --> 00:58:11,819
draft that says a DNS resolution failure

1327
00:58:11,819 --> 00:58:13,380
occurs when none of the servers

1328
00:58:13,380 --> 00:58:16,140
available uh to a resolver provide any

1329
00:58:16,140 --> 00:58:18,660
useful response for a particular name

1330
00:58:18,660 --> 00:58:20,760
type in class

1331
00:58:20,760 --> 00:58:22,260
so just to be clear we're not talking

1332
00:58:22,260 --> 00:58:24,780
about you know a timeout at one of the

1333
00:58:24,780 --> 00:58:26,040
name servers available we're talking

1334
00:58:26,040 --> 00:58:28,500
about timeouts say from all of the name

1335
00:58:28,500 --> 00:58:30,599
servers available or NX domain are not

1336
00:58:30,599 --> 00:58:34,140
sorry not NX domain refused from all of

1337
00:58:34,140 --> 00:58:35,280
the name servers available something

1338
00:58:35,280 --> 00:58:39,140
like that so next slide

1339
00:58:39,660 --> 00:58:42,240
uh so since the last version this is

1340
00:58:42,240 --> 00:58:43,440
probably the most significant change

1341
00:58:43,440 --> 00:58:45,540
where some of the requirements have been

1342
00:58:45,540 --> 00:58:48,299
rephrased previously there was there was

1343
00:58:48,299 --> 00:58:50,579
language in in the draft that said a

1344
00:58:50,579 --> 00:58:51,839
resident Evolution failure must be

1345
00:58:51,839 --> 00:58:55,200
cached against a specific uh query Tuple

1346
00:58:55,200 --> 00:58:58,380
of name type and class and server IP

1347
00:58:58,380 --> 00:59:01,200
address and and now that requirement is

1348
00:59:01,200 --> 00:59:02,880
is changed quite a bit where it just

1349
00:59:02,880 --> 00:59:05,700
says that a resolver must have a cache

1350
00:59:05,700 --> 00:59:08,099
for resolution failures and the purpose

1351
00:59:08,099 --> 00:59:09,660
of the cache is to eliminate repeated

1352
00:59:09,660 --> 00:59:13,500
queries uh that cannot be resolved so it

1353
00:59:13,500 --> 00:59:15,000
doesn't really you know it doesn't say

1354
00:59:15,000 --> 00:59:17,280
it has to be cached by Tuple that's now

1355
00:59:17,280 --> 00:59:19,079
sort of an implementation dependent

1356
00:59:19,079 --> 00:59:20,640
detail

1357
00:59:20,640 --> 00:59:23,339
um folks can choose how to how to do

1358
00:59:23,339 --> 00:59:25,260
that however they want

1359
00:59:25,260 --> 00:59:27,299
um and then provide some examples of of

1360
00:59:27,299 --> 00:59:29,099
reasons my why you might want to do it

1361
00:59:29,099 --> 00:59:31,319
by Tuple or my white might want to do it

1362
00:59:31,319 --> 00:59:33,119
by uh server IP address alone for

1363
00:59:33,119 --> 00:59:35,359
example

1364
00:59:35,520 --> 00:59:38,240
next

1365
00:59:39,240 --> 00:59:41,780
there's also some new text about how

1366
00:59:41,780 --> 00:59:45,240
resolvers should protect themselves from

1367
00:59:45,240 --> 00:59:48,480
possible attacks so since since there's

1368
00:59:48,480 --> 00:59:49,980
a requirement to Cache resolution

1369
00:59:49,980 --> 00:59:52,440
failures there's that sort of introduces

1370
00:59:52,440 --> 00:59:54,180
a new security risk where an attacker

1371
00:59:54,180 --> 00:59:58,200
could try to exhaust this cache uh you

1372
00:59:58,200 --> 00:59:59,700
know send lots of specific queries

1373
00:59:59,700 --> 01:00:02,160
designed to fill up this this new type

1374
01:00:02,160 --> 01:00:04,440
of cache and of course resolvers need to

1375
01:00:04,440 --> 01:00:06,540
protect themselves and and can can limit

1376
01:00:06,540 --> 01:00:09,180
the resources they devote to such a

1377
01:00:09,180 --> 01:00:12,379
resolution failure cache

1378
01:00:12,540 --> 01:00:15,140
next

1379
01:00:16,440 --> 01:00:18,000
um there's there's some text in the in

1380
01:00:18,000 --> 01:00:19,380
the draft about

1381
01:00:19,380 --> 01:00:21,180
um about timing and this is really

1382
01:00:21,180 --> 01:00:22,680
unchanged since the last version there

1383
01:00:22,680 --> 01:00:23,700
was a little bit of discussion about

1384
01:00:23,700 --> 01:00:26,099
this but what what the draft currently

1385
01:00:26,099 --> 01:00:28,440
says is that resolution failures must be

1386
01:00:28,440 --> 01:00:31,740
cached for at least five seconds

1387
01:00:31,740 --> 01:00:33,720
um and and the justification for this is

1388
01:00:33,720 --> 01:00:35,540
that this is the amount of time that a

1389
01:00:35,540 --> 01:00:38,160
user could reasonably be expected to

1390
01:00:38,160 --> 01:00:41,339
wait to retry or something like that

1391
01:00:41,339 --> 01:00:43,380
um there's a should level requirement

1392
01:00:43,380 --> 01:00:46,079
that the resolver should use an

1393
01:00:46,079 --> 01:00:47,640
exponential back off in the amount of

1394
01:00:47,640 --> 01:00:49,619
time that it caches these sorts of

1395
01:00:49,619 --> 01:00:51,900
things so you know five seconds to start

1396
01:00:51,900 --> 01:00:54,780
increase increase and so on but no

1397
01:00:54,780 --> 01:00:57,680
longer than five minutes

1398
01:00:58,680 --> 01:01:01,799
um and then the five minutes is uh it

1399
01:01:01,799 --> 01:01:06,200
matches language in RFC 2308

1400
01:01:07,079 --> 01:01:10,040
next

1401
01:01:10,380 --> 01:01:13,319
and so lastly this is this is kind of a

1402
01:01:13,319 --> 01:01:15,839
new uh a new thing that we would like

1403
01:01:15,839 --> 01:01:17,579
discussion on

1404
01:01:17,579 --> 01:01:18,420
um

1405
01:01:18,420 --> 01:01:21,119
so some implementations some resolver

1406
01:01:21,119 --> 01:01:22,260
implementations would have different

1407
01:01:22,260 --> 01:01:25,020
caches based on edns client subnet

1408
01:01:25,020 --> 01:01:28,319
values uh and uh

1409
01:01:28,319 --> 01:01:30,540
sort of open for discussion whether or

1410
01:01:30,540 --> 01:01:33,119
not resolution failure caching should be

1411
01:01:33,119 --> 01:01:36,859
should ignore edns client subnet or if

1412
01:01:36,859 --> 01:01:39,960
partitioning the cache by that client

1413
01:01:39,960 --> 01:01:42,660
subnet value would be appropriate or a

1414
01:01:42,660 --> 01:01:44,099
good thing to do

1415
01:01:44,099 --> 01:01:45,000
so

1416
01:01:45,000 --> 01:01:46,559
um I think our opinion is that you know

1417
01:01:46,559 --> 01:01:48,420
should be independent of EDS client

1418
01:01:48,420 --> 01:01:50,339
subnet but would like to hear what other

1419
01:01:50,339 --> 01:01:53,058
people think about that

1420
01:01:53,520 --> 01:01:56,839
and uh that's it

1421
01:01:58,680 --> 01:02:01,920
thank you thank you Dwayne

1422
01:02:01,920 --> 01:02:05,660
um in the queue beta beta Thomas

1423
01:02:07,920 --> 01:02:10,380
yes science Peter Thomason I think um

1424
01:02:10,380 --> 01:02:12,540
like a few slides earlier you showed

1425
01:02:12,540 --> 01:02:13,920
that um

1426
01:02:13,920 --> 01:02:16,020
the partitioning of the cache should be

1427
01:02:16,020 --> 01:02:18,180
up to the implementers

1428
01:02:18,180 --> 01:02:20,339
whether it would be Q name or IP address

1429
01:02:20,339 --> 01:02:22,740
or whatever and now this proposal seems

1430
01:02:22,740 --> 01:02:24,119
to contradict that a little bit Yeah

1431
01:02:24,119 --> 01:02:25,799
Yeah and and so the question is why

1432
01:02:25,799 --> 01:02:27,059
wouldn't you just leave it up to the

1433
01:02:27,059 --> 01:02:28,740
implementers if they think it's a good

1434
01:02:28,740 --> 01:02:31,260
idea or not

1435
01:02:31,260 --> 01:02:32,940
um yeah that's that's a fair question I

1436
01:02:32,940 --> 01:02:35,280
I think the argument I would make is

1437
01:02:35,280 --> 01:02:36,359
that

1438
01:02:36,359 --> 01:02:38,280
um you know if if there's an

1439
01:02:38,280 --> 01:02:41,400
implementation that normally has

1440
01:02:41,400 --> 01:02:43,740
separate caches based on eating this

1441
01:02:43,740 --> 01:02:46,740
client subnet that can really sort of

1442
01:02:46,740 --> 01:02:49,440
blow up the the size of the cache and so

1443
01:02:49,440 --> 01:02:51,180
there may be thousands of different

1444
01:02:51,180 --> 01:02:54,180
subnet values which would mean that now

1445
01:02:54,180 --> 01:02:55,740
uh

1446
01:02:55,740 --> 01:02:58,020
the resolver is is emitting maybe

1447
01:02:58,020 --> 01:03:00,180
thousands of more times queries than

1448
01:03:00,180 --> 01:03:03,119
than it needs to right so if if you're

1449
01:03:03,119 --> 01:03:05,520
allowed to emit one query per subnet

1450
01:03:05,520 --> 01:03:07,859
value per some amount of time then then

1451
01:03:07,859 --> 01:03:10,760
that's a lot of traffic still

1452
01:03:10,760 --> 01:03:13,559
a certain perhaps that concern should go

1453
01:03:13,559 --> 01:03:18,420
into this um protect the self section

1454
01:03:22,700 --> 01:03:25,500
uh Duane thanks for for doing that work

1455
01:03:25,500 --> 01:03:28,380
also to your um to your colleagues and

1456
01:03:28,380 --> 01:03:29,940
there's one minor thing the security

1457
01:03:29,940 --> 01:03:31,859
consideration section talks about

1458
01:03:31,859 --> 01:03:34,500
resource exhaustion by deliberately

1459
01:03:34,500 --> 01:03:36,359
asking for

1460
01:03:36,359 --> 01:03:39,299
um domains or cue names resulting in in

1461
01:03:39,299 --> 01:03:42,540
certain failures now given that most of

1462
01:03:42,540 --> 01:03:44,040
these resolution failures aren't

1463
01:03:44,040 --> 01:03:46,559
authenticated

1464
01:03:46,559 --> 01:03:48,720
um there's probably also an attack

1465
01:03:48,720 --> 01:03:52,740
Vector in forging so those responses is

1466
01:03:52,740 --> 01:03:55,140
that something you would consider uh for

1467
01:03:55,140 --> 01:03:57,299
adding to that discussion it might not

1468
01:03:57,299 --> 01:03:59,400
be catastrophic but it's it's a window

1469
01:03:59,400 --> 01:04:02,640
of opportunity as well sure yeah be

1470
01:04:02,640 --> 01:04:03,960
happy to add something like that thank

1471
01:04:03,960 --> 01:04:06,200
you

1472
01:04:07,020 --> 01:04:09,680
foreign

1473
01:04:10,680 --> 01:04:12,960
I sort of would agree that it would be

1474
01:04:12,960 --> 01:04:14,760
great if we could ignore edina's

1475
01:04:14,760 --> 01:04:17,119
clients.net but um

1476
01:04:17,119 --> 01:04:19,559
a lot of implementation sort of where

1477
01:04:19,559 --> 01:04:21,240
this would be hard and we've seen in the

1478
01:04:21,240 --> 01:04:24,900
wild that kind of uh depending on what

1479
01:04:24,900 --> 01:04:27,000
you give the authority

1480
01:04:27,000 --> 01:04:28,619
um sometimes the answer sometimes they

1481
01:04:28,619 --> 01:04:30,000
don't so

1482
01:04:30,000 --> 01:04:32,240
it would make the positive resolution

1483
01:04:32,240 --> 01:04:35,160
worse I guess

1484
01:04:35,160 --> 01:04:38,819
so okay so

1485
01:04:38,819 --> 01:04:40,740
you would vote for not saying anything

1486
01:04:40,740 --> 01:04:42,420
about this and just leaving it up to the

1487
01:04:42,420 --> 01:04:44,220
implementation to to do how they want

1488
01:04:44,220 --> 01:04:47,940
yeah I would leave it up to them okay

1489
01:04:47,940 --> 01:04:50,520
all right okay

1490
01:04:50,520 --> 01:04:53,520
that was the queue all right okay thank

1491
01:04:53,520 --> 01:04:56,720
you Dwayne thank you yeah

1492
01:04:59,839 --> 01:05:03,059
next is

1493
01:05:03,059 --> 01:05:05,180
um

1494
01:05:07,380 --> 01:05:12,839
I think Philip with uh rights

1495
01:05:13,079 --> 01:05:16,099
there we are yeah

1496
01:05:18,839 --> 01:05:21,319
okay

1497
01:05:21,420 --> 01:05:25,020
my name is Philip Humber I did this work

1498
01:05:25,020 --> 01:05:28,140
with Philip torup so if later you have

1499
01:05:28,140 --> 01:05:31,380
questions find either of us

1500
01:05:31,380 --> 01:05:33,859
um and this is basically about

1501
01:05:33,859 --> 01:05:37,260
making a try to make complexity of a

1502
01:05:37,260 --> 01:05:39,559
slippery solder a bit more manageable

1503
01:05:39,559 --> 01:05:42,960
while still letting the stop resolver be

1504
01:05:42,960 --> 01:05:46,500
in control next slide

1505
01:05:46,500 --> 01:05:49,680
um so this is when life was simple stop

1506
01:05:49,680 --> 01:05:52,079
resolve for censor query just out for

1507
01:05:52,079 --> 01:05:54,900
Port 53 and then hopefully gets an

1508
01:05:54,900 --> 01:05:56,220
answer back

1509
01:05:56,220 --> 01:05:59,640
um but then uh of course when most of

1510
01:05:59,640 --> 01:06:01,200
the traffic on the internet became

1511
01:06:01,200 --> 01:06:02,880
encrypted

1512
01:06:02,880 --> 01:06:04,740
um everything has stopped resolver said

1513
01:06:04,740 --> 01:06:07,559
queries say plain text uh it's not so

1514
01:06:07,559 --> 01:06:11,400
great anymore so the ITF took its Apollo

1515
01:06:11,400 --> 01:06:13,980
itself to create ways to solve that

1516
01:06:13,980 --> 01:06:16,500
backslide

1517
01:06:16,500 --> 01:06:18,500
um

1518
01:06:18,960 --> 01:06:21,900
and then we got this because one option

1519
01:06:21,900 --> 01:06:23,819
is fine but lots of options is always

1520
01:06:23,819 --> 01:06:26,940
better so we got DNS over TLS that

1521
01:06:26,940 --> 01:06:30,599
people about it DNS of HTTP but HTTP is

1522
01:06:30,599 --> 01:06:32,640
actually at the moment sort of two

1523
01:06:32,640 --> 01:06:35,880
protocols hp2 and hp3 and then there's a

1524
01:06:35,880 --> 01:06:39,059
separate uh DNS over quick and then you

1525
01:06:39,059 --> 01:06:42,119
can also create a nested implementation

1526
01:06:42,119 --> 01:06:44,720
so you get oblivious Doh

1527
01:06:44,720 --> 01:06:48,359
so complexity for a stop resolver is get

1528
01:06:48,359 --> 01:06:52,319
a completely uh out of head next slide

1529
01:06:52,319 --> 01:06:53,339
please

1530
01:06:53,339 --> 01:06:55,520
foreign

1531
01:07:02,660 --> 01:07:06,000
it's jumping ahead and

1532
01:07:06,000 --> 01:07:08,339
I think you want to have this slide I

1533
01:07:08,339 --> 01:07:10,640
don't know

1534
01:07:12,420 --> 01:07:13,799
well this

1535
01:07:13,799 --> 01:07:16,799
uh the next one after this yeah okay

1536
01:07:16,799 --> 01:07:19,559
background

1537
01:07:19,559 --> 01:07:20,160
um

1538
01:07:20,160 --> 01:07:22,319
we were working on

1539
01:07:22,319 --> 01:07:25,200
um a library called uh called connect by

1540
01:07:25,200 --> 01:07:27,420
name and the ideas you put in a name and

1541
01:07:27,420 --> 01:07:30,599
outcomes uh TLS collection and then does

1542
01:07:30,599 --> 01:07:33,059
all the happy eyeballs and Dane and

1543
01:07:33,059 --> 01:07:34,500
whatever

1544
01:07:34,500 --> 01:07:36,839
um simplifying the life of the

1545
01:07:36,839 --> 01:07:42,299
application and the on top of the gets

1546
01:07:42,299 --> 01:07:45,420
library that we have and and just doing

1547
01:07:45,420 --> 01:07:48,059
all of the DNS parts right sort of costs

1548
01:07:48,059 --> 01:07:50,700
what we wanted to Chase and get here

1549
01:07:50,700 --> 01:07:53,400
that's to completely explode because a

1550
01:07:53,400 --> 01:07:55,380
lot of this stuff is recursive if you

1551
01:07:55,380 --> 01:07:58,319
connect to Doh then you could also do

1552
01:07:58,319 --> 01:08:00,119
data whatever

1553
01:08:00,119 --> 01:08:02,940
um so we were looking for ways to

1554
01:08:02,940 --> 01:08:06,480
simplify it next slide

1555
01:08:06,480 --> 01:08:07,500
um

1556
01:08:07,500 --> 01:08:09,960
and we also notice like sort of in

1557
01:08:09,960 --> 01:08:12,299
general with this model

1558
01:08:12,299 --> 01:08:14,520
um there's quite a few stop resolvers

1559
01:08:14,520 --> 01:08:16,198
out there are they going to implement

1560
01:08:16,198 --> 01:08:18,719
all of these different transports what

1561
01:08:18,719 --> 01:08:20,160
if they don't

1562
01:08:20,160 --> 01:08:21,179
um

1563
01:08:21,179 --> 01:08:23,580
um UDP

1564
01:08:23,580 --> 01:08:27,060
to Port 53 has has basically no state if

1565
01:08:27,060 --> 01:08:29,759
I run Bing and it has to set up a DLH

1566
01:08:29,759 --> 01:08:33,660
collection to look up uh lrp at a name

1567
01:08:33,660 --> 01:08:36,500
and then tear it down immediately

1568
01:08:36,500 --> 01:08:39,238
that costs a lot of extra resources

1569
01:08:39,238 --> 01:08:42,120
resources are also show up on a

1570
01:08:42,120 --> 01:08:45,000
recursive resolver and in general you

1571
01:08:45,000 --> 01:08:48,259
can expect latency and stuff like that

1572
01:08:48,259 --> 01:08:51,839
so next slide please

1573
01:08:51,839 --> 01:08:53,698
um there's of course an obvious way to

1574
01:08:53,698 --> 01:08:55,920
solve that and that is just introduce a

1575
01:08:55,920 --> 01:08:58,679
local proxy and then the proxy can

1576
01:08:58,679 --> 01:09:00,719
maintain those connections for a longer

1577
01:09:00,719 --> 01:09:03,060
period of time so so it becomes more

1578
01:09:03,060 --> 01:09:05,040
efficient and there's plenty of those

1579
01:09:05,040 --> 01:09:07,259
proxies already around so there's a lot

1580
01:09:07,259 --> 01:09:10,080
of people who have a local inbounds uh

1581
01:09:10,080 --> 01:09:12,120
they're stubby more designed as a proxy

1582
01:09:12,120 --> 01:09:14,279
there's TNS mask has been allowed for a

1583
01:09:14,279 --> 01:09:16,799
long time and there's a systemd Softee

1584
01:09:16,799 --> 01:09:19,920
that tries to do several things

1585
01:09:19,920 --> 01:09:22,319
um next slide please but the problem

1586
01:09:22,319 --> 01:09:25,080
there is that the application now is

1587
01:09:25,080 --> 01:09:27,179
talking to a complete Black Box it's

1588
01:09:27,179 --> 01:09:30,600
like well what if the application would

1589
01:09:30,600 --> 01:09:33,479
really insist on having some sort of a

1590
01:09:33,479 --> 01:09:36,179
private collection privacy preserving

1591
01:09:36,179 --> 01:09:38,040
collection to recursively software if

1592
01:09:38,040 --> 01:09:39,600
you talk to a local proxy you just don't

1593
01:09:39,600 --> 01:09:40,859
know

1594
01:09:40,859 --> 01:09:43,799
um maybe an application has very

1595
01:09:43,799 --> 01:09:45,960
specific desires like it it's really

1596
01:09:45,960 --> 01:09:48,960
about to have a Doh collections to a

1597
01:09:48,960 --> 01:09:50,640
specific public resolver or something

1598
01:09:50,640 --> 01:09:51,839
like that

1599
01:09:51,839 --> 01:09:52,460
um

1600
01:09:52,460 --> 01:09:55,140
what kind of feedback do you get from

1601
01:09:55,140 --> 01:09:57,840
the proxy if it fails I mean you just

1602
01:09:57,840 --> 01:10:01,020
get the software usually I guess if if

1603
01:10:01,020 --> 01:10:04,080
the collection to the Upstream recursive

1604
01:10:04,080 --> 01:10:07,440
resolver fails and also for diagnostic

1605
01:10:07,440 --> 01:10:10,739
tools if if your deck or drill or

1606
01:10:10,739 --> 01:10:12,480
whatever goes directly out on the

1607
01:10:12,480 --> 01:10:14,340
internet any applications go through a

1608
01:10:14,340 --> 01:10:16,920
proxy then it creates a mismatch if your

1609
01:10:16,920 --> 01:10:18,900
diagnostic tools go always through the

1610
01:10:18,900 --> 01:10:21,600
proxy that you like visibility

1611
01:10:21,600 --> 01:10:24,739
um next slide please

1612
01:10:24,780 --> 01:10:26,520
um so we came up with

1613
01:10:26,520 --> 01:10:30,420
this as as a solution and that is uh the

1614
01:10:30,420 --> 01:10:34,140
step resolver includes this option in a

1615
01:10:34,140 --> 01:10:36,900
request when it sends it uh to the local

1616
01:10:36,900 --> 01:10:39,300
proxy and basically this option can

1617
01:10:39,300 --> 01:10:42,780
describe uh What uh the stock price

1618
01:10:42,780 --> 01:10:45,300
author would like to get from the

1619
01:10:45,300 --> 01:10:47,820
Upstream collection to uh

1620
01:10:47,820 --> 01:10:51,420
the recursive resolver and it consists

1621
01:10:51,420 --> 01:10:54,540
of a number of sections that's first a

1622
01:10:54,540 --> 01:10:57,600
set of bits which basically specify what

1623
01:10:57,600 --> 01:11:00,000
kind of uh encryption and authentication

1624
01:11:00,000 --> 01:11:03,140
you want whether there's a specific

1625
01:11:03,140 --> 01:11:06,739
desire to have or exclude certain

1626
01:11:06,739 --> 01:11:09,840
Upstream transports

1627
01:11:09,840 --> 01:11:12,420
if an application wants to be more

1628
01:11:12,420 --> 01:11:15,900
specific it could list IP addresses for

1629
01:11:15,900 --> 01:11:18,719
Upstream resolvers if you want to have

1630
01:11:18,719 --> 01:11:20,640
any kind of authenticated collection

1631
01:11:20,640 --> 01:11:22,860
that you need to have a name

1632
01:11:22,860 --> 01:11:25,980
um if for example you want to do do you

1633
01:11:25,980 --> 01:11:28,080
want to have a dough path so that can be

1634
01:11:28,080 --> 01:11:31,140
put in the SVC parameters as well as

1635
01:11:31,140 --> 01:11:35,780
support or LPS and finally all devices

1636
01:11:35,780 --> 01:11:38,820
were outgoing interface really matters

1637
01:11:38,820 --> 01:11:41,100
like for example on a phone if an

1638
01:11:41,100 --> 01:11:43,140
application is aware of interfaces then

1639
01:11:43,140 --> 01:11:45,860
it could also put in an interface name

1640
01:11:45,860 --> 01:11:48,239
but the basic idea is that an

1641
01:11:48,239 --> 01:11:49,980
application is not required to put

1642
01:11:49,980 --> 01:11:51,900
anything ill I mean if you just said

1643
01:11:51,900 --> 01:11:54,420
this option with all bits clear that you

1644
01:11:54,420 --> 01:11:56,400
basically tell the proxy will do

1645
01:11:56,400 --> 01:11:58,560
whatever you want if you just said well

1646
01:11:58,560 --> 01:12:00,719
I need authenticated connection that the

1647
01:12:00,719 --> 01:12:02,820
proxy should figure out a way to give

1648
01:12:02,820 --> 01:12:04,500
you an authenticated collection or

1649
01:12:04,500 --> 01:12:07,080
report a failure if it cannot do that

1650
01:12:07,080 --> 01:12:09,360
next slide

1651
01:12:09,360 --> 01:12:11,460
so

1652
01:12:11,460 --> 01:12:14,699
a key design thing of this is It's

1653
01:12:14,699 --> 01:12:16,260
stateless

1654
01:12:16,260 --> 01:12:19,620
um every so it sort of mimics uh the

1655
01:12:19,620 --> 01:12:24,540
original uh DNS to Port 53 uh set up uh

1656
01:12:24,540 --> 01:12:26,640
so we said the same proxy option in

1657
01:12:26,640 --> 01:12:30,540
every requests and then assume that um

1658
01:12:30,540 --> 01:12:33,780
the the proxy will do something clever

1659
01:12:33,780 --> 01:12:34,980
um

1660
01:12:34,980 --> 01:12:36,960
um to avoid having some sort of State

1661
01:12:36,960 --> 01:12:40,020
between the local proxy and the step

1662
01:12:40,020 --> 01:12:42,840
um we've had to maximize control given

1663
01:12:42,840 --> 01:12:45,060
to the application I'm not saying that

1664
01:12:45,060 --> 01:12:47,280
all applications have to use it but if

1665
01:12:47,280 --> 01:12:49,800
they want to use it they should be there

1666
01:12:49,800 --> 01:12:50,640
um

1667
01:12:50,640 --> 01:12:53,760
of course for for step resources the

1668
01:12:53,760 --> 01:12:55,560
benefit of moving to this model would be

1669
01:12:55,560 --> 01:12:57,600
that there's a very bigger potential for

1670
01:12:57,600 --> 01:13:00,239
caching certainly for short-lived

1671
01:13:00,239 --> 01:13:02,280
applications

1672
01:13:02,280 --> 01:13:05,400
um it also introduces opportunity to

1673
01:13:05,400 --> 01:13:08,219
implement local uh policies in the

1674
01:13:08,219 --> 01:13:10,679
blockchain instead of well try to figure

1675
01:13:10,679 --> 01:13:13,080
out whatever stop resolve your

1676
01:13:13,080 --> 01:13:15,239
application has it and try to do

1677
01:13:15,239 --> 01:13:17,040
something for that

1678
01:13:17,040 --> 01:13:17,640
um

1679
01:13:17,640 --> 01:13:21,120
the next bullet item is formulated a bit

1680
01:13:21,120 --> 01:13:24,780
sloppy here the idea is that the proxy

1681
01:13:24,780 --> 01:13:28,020
just forwards staff from an upstream

1682
01:13:28,020 --> 01:13:30,900
recursive resolver and it's not required

1683
01:13:30,900 --> 01:13:35,480
to do any additional dnsic validation

1684
01:13:35,540 --> 01:13:37,980
basically to say well either you do it

1685
01:13:37,980 --> 01:13:39,840
in the application itself or you leave

1686
01:13:39,840 --> 01:13:44,460
it to a recursive resolver but if the

1687
01:13:44,460 --> 01:13:46,800
the proxy would use for example Dane or

1688
01:13:46,800 --> 01:13:48,179
something like that then of course part

1689
01:13:48,179 --> 01:13:50,219
of data is that you should do uh that

1690
01:13:50,219 --> 01:13:52,199
you need to do the DLS acceleration but

1691
01:13:52,199 --> 01:13:54,540
it only does that for internal stuff not

1692
01:13:54,540 --> 01:13:57,659
as a server uh to the user

1693
01:13:57,659 --> 01:14:01,380
um and we implemented uh this not

1694
01:14:01,380 --> 01:14:04,739
completely but but most of it uh in a

1695
01:14:04,739 --> 01:14:08,040
branch of of Cathy and S uh people about

1696
01:14:08,040 --> 01:14:09,780
to play with it

1697
01:14:09,780 --> 01:14:12,060
um next slide please

1698
01:14:12,060 --> 01:14:16,320
uh thinking about this

1699
01:14:16,320 --> 01:14:18,360
um if you have

1700
01:14:18,360 --> 01:14:21,840
um sort of a current proxy then it's

1701
01:14:21,840 --> 01:14:24,480
quite possible that the current proxies

1702
01:14:24,480 --> 01:14:30,000
blindly forwards uh edns zero options

1703
01:14:30,000 --> 01:14:31,620
um and then if if you would end up with

1704
01:14:31,620 --> 01:14:33,840
the situation that's some because of his

1705
01:14:33,840 --> 01:14:35,760
authority the network would implement

1706
01:14:35,760 --> 01:14:39,900
this uh proxy control option which is

1707
01:14:39,900 --> 01:14:42,239
not ruled out then you could have the

1708
01:14:42,239 --> 01:14:44,340
situation that stop resolver thinks it's

1709
01:14:44,340 --> 01:14:46,620
topic to a local proxy that affects

1710
01:14:46,620 --> 01:14:50,159
traffic is just forwarded unencrypted

1711
01:14:50,159 --> 01:14:54,600
um so there's a separate option that

1712
01:14:54,600 --> 01:14:56,640
specifically a way to communicate

1713
01:14:56,640 --> 01:14:59,699
between the resolved proxy and then the

1714
01:14:59,699 --> 01:15:02,280
the proxy basically tells the surplus of

1715
01:15:02,280 --> 01:15:05,960
what sort of oh what sort of uh Network

1716
01:15:05,960 --> 01:15:09,960
Source adders that I get this request

1717
01:15:09,960 --> 01:15:13,739
from and I really if if a slippery

1718
01:15:13,739 --> 01:15:16,500
sulfur is very private see sensitive

1719
01:15:16,500 --> 01:15:18,540
that it should say well if this is not

1720
01:15:18,540 --> 01:15:20,880
host local then just drop it because

1721
01:15:20,880 --> 01:15:23,580
something is wrong but if you're more

1722
01:15:23,580 --> 01:15:25,860
lenient then you could say well if it's

1723
01:15:25,860 --> 01:15:28,199
still linked local and I trust my local

1724
01:15:28,199 --> 01:15:31,460
link then I'll go to allow it

1725
01:15:31,460 --> 01:15:34,560
so it's it's well

1726
01:15:34,560 --> 01:15:36,960
piece of puzzle that you need for for

1727
01:15:36,960 --> 01:15:39,480
the the slippery sulfur to to verify

1728
01:15:39,480 --> 01:15:42,300
that the whole thing is really contained

1729
01:15:42,300 --> 01:15:45,179
and then the next thing

1730
01:15:45,179 --> 01:15:48,780
um the left slide please

1731
01:15:48,780 --> 01:15:51,719
um this is basically a coffee this thing

1732
01:15:51,719 --> 01:15:54,480
that might need uh to a separate

1733
01:15:54,480 --> 01:15:56,400
document or something like that is that

1734
01:15:56,400 --> 01:16:00,659
if an application or a stop wants to do

1735
01:16:00,659 --> 01:16:03,020
a DNS check validation

1736
01:16:03,020 --> 01:16:06,420
and you want to sort of be guaranteed

1737
01:16:06,420 --> 01:16:10,440
that as a fallback uh trust anchor that

1738
01:16:10,440 --> 01:16:12,540
it would be nice if your local proxy can

1739
01:16:12,540 --> 01:16:18,179
just cash the other side trust or Data

1740
01:16:18,179 --> 01:16:20,760
Trust anchors and return that so there's

1741
01:16:20,760 --> 01:16:22,679
an extra option that basically said well

1742
01:16:22,679 --> 01:16:24,659
please give me this stuff if you already

1743
01:16:24,659 --> 01:16:27,540
have a local uh trust anchor that you

1744
01:16:27,540 --> 01:16:29,100
don't need it but but

1745
01:16:29,100 --> 01:16:32,760
applications needs a fallback and it

1746
01:16:32,760 --> 01:16:34,739
would be better if step resolvers

1747
01:16:34,739 --> 01:16:36,659
they'll have to set up https collections

1748
01:16:36,659 --> 01:16:38,760
to Eli and stuff like that

1749
01:16:38,760 --> 01:16:39,300
um

1750
01:16:39,300 --> 01:16:42,719
so that's the three different options

1751
01:16:42,719 --> 01:16:45,000
next slide please

1752
01:16:45,000 --> 01:16:48,600
uh so the question is uh do people find

1753
01:16:48,600 --> 01:16:51,120
this useful would they like this working

1754
01:16:51,120 --> 01:16:54,780
group to work on it or any other kind of

1755
01:16:54,780 --> 01:16:57,060
feedback or questions

1756
01:16:57,060 --> 01:16:59,280
thank you Philip

1757
01:16:59,280 --> 01:17:03,840
um just this last ITF the author sended

1758
01:17:03,840 --> 01:17:06,239
the document to the add group that was

1759
01:17:06,239 --> 01:17:09,060
discussed there but was out of Charter

1760
01:17:09,060 --> 01:17:11,280
so the different DNS working group chess

1761
01:17:11,280 --> 01:17:14,280
discussed this uh were to present it or

1762
01:17:14,280 --> 01:17:15,600
where should it learn

1763
01:17:15,600 --> 01:17:18,060
we send an email to the mailing list to

1764
01:17:18,060 --> 01:17:20,159
the DDS open list with this question

1765
01:17:20,159 --> 01:17:21,060
actually

1766
01:17:21,060 --> 01:17:23,760
and that's also why we scheduled this

1767
01:17:23,760 --> 01:17:26,159
presentation here we would like to share

1768
01:17:26,159 --> 01:17:27,540
the feedback from the from the working

1769
01:17:27,540 --> 01:17:28,739
group

1770
01:17:28,739 --> 01:17:32,219
uh Ralph please go ahead yeah so you

1771
01:17:32,219 --> 01:17:34,440
confused me a bit because when I read

1772
01:17:34,440 --> 01:17:36,360
the document I thought I wasn't clear

1773
01:17:36,360 --> 01:17:38,880
that it was local only then you said in

1774
01:17:38,880 --> 01:17:41,100
the in the talk it was local only but

1775
01:17:41,100 --> 01:17:43,679
then you could extend it so

1776
01:17:43,679 --> 01:17:46,380
what is the scope now because there are

1777
01:17:46,380 --> 01:17:49,500
probably different kind of

1778
01:17:49,500 --> 01:17:50,900
considerations

1779
01:17:50,900 --> 01:17:54,000
when you have it so the scope of the

1780
01:17:54,000 --> 01:17:56,100
draft is the communication between a

1781
01:17:56,100 --> 01:17:58,920
stop resolver and a local proxy

1782
01:17:58,920 --> 01:18:01,380
but for example at the moment lots of

1783
01:18:01,380 --> 01:18:04,679
people use Unbound as some sort of local

1784
01:18:04,679 --> 01:18:07,800
resolver which could be extended to to

1785
01:18:07,800 --> 01:18:10,880
support this option

1786
01:18:10,880 --> 01:18:15,300
it is communication on a machine between

1787
01:18:15,300 --> 01:18:17,699
two programs yeah yeah and you need to

1788
01:18:17,699 --> 01:18:19,440
change pretty much both programs for

1789
01:18:19,440 --> 01:18:21,780
stuff to work yeah definitely so

1790
01:18:21,780 --> 01:18:24,360
wouldn't it be easier to do a direct an

1791
01:18:24,360 --> 01:18:26,699
API like get DNS for for doing that

1792
01:18:26,699 --> 01:18:27,540
stuff

1793
01:18:27,540 --> 01:18:30,380
just

1794
01:18:31,199 --> 01:18:33,980
um so we're looking at doing

1795
01:18:33,980 --> 01:18:37,199
inter-process communication uh within

1796
01:18:37,199 --> 01:18:39,900
the host in a way that fits within the

1797
01:18:39,900 --> 01:18:44,460
DLS model so there's a fake that's

1798
01:18:44,460 --> 01:18:46,679
the actual problem is name resolution

1799
01:18:46,679 --> 01:18:48,719
and uh

1800
01:18:48,719 --> 01:18:50,580
so yeah

1801
01:18:50,580 --> 01:18:52,920
but the thing is the alternative of

1802
01:18:52,920 --> 01:18:55,920
doing it is for example a talk Alpha

1803
01:18:55,920 --> 01:18:57,260
debus

1804
01:18:57,260 --> 01:19:00,360
and do something like that and then it

1805
01:19:00,360 --> 01:19:04,440
sort of becomes completely outside uh

1806
01:19:04,440 --> 01:19:07,679
the DNS Community to to design anything

1807
01:19:07,679 --> 01:19:09,900
on how that works so so this is an

1808
01:19:09,900 --> 01:19:12,840
attempt like can we structure uh this

1809
01:19:12,840 --> 01:19:14,460
part of communication that just

1810
01:19:14,460 --> 01:19:18,179
definitely happening uh in the real

1811
01:19:18,179 --> 01:19:21,000
world in a way that that sort of we can

1812
01:19:21,000 --> 01:19:24,300
have a say on it instead of leaving it

1813
01:19:24,300 --> 01:19:26,400
to the random implementer of house

1814
01:19:26,400 --> 01:19:28,199
operating system

1815
01:19:28,199 --> 01:19:30,540
okay I mean I've just found on a machine

1816
01:19:30,540 --> 01:19:32,159
it better to do something with an API

1817
01:19:32,159 --> 01:19:34,140
and for going off the machine we have

1818
01:19:34,140 --> 01:19:36,360
that's probably why it comes out of 80d

1819
01:19:36,360 --> 01:19:39,719
DNR and DDR to make secure connections

1820
01:19:39,719 --> 01:19:44,239
from application to resolvers right

1821
01:19:44,540 --> 01:19:48,719
uh so those are protocols between in

1822
01:19:48,719 --> 01:19:50,400
this model that would be running between

1823
01:19:50,400 --> 01:19:52,679
the local proxy and the recursive

1824
01:19:52,679 --> 01:19:54,480
resolver whereas this would be specific

1825
01:19:54,480 --> 01:19:56,940
for a sub resolver at a local to to

1826
01:19:56,940 --> 01:19:59,100
reduce the complexity of the step

1827
01:19:59,100 --> 01:20:01,380
resolver because otherwise the step

1828
01:20:01,380 --> 01:20:03,480
resolver would have to implement all of

1829
01:20:03,480 --> 01:20:06,300
the add protocols uh creating more

1830
01:20:06,300 --> 01:20:08,880
complexity

1831
01:20:08,880 --> 01:20:11,520
yeah I mean if you could use apis that's

1832
01:20:11,520 --> 01:20:12,920
the

1833
01:20:12,920 --> 01:20:16,800
thank you uh Victor

1834
01:20:16,800 --> 01:20:21,980
let's go ahead sorry Victor you're on

1835
01:20:27,719 --> 01:20:30,920
uh hi can you hear me

1836
01:20:31,739 --> 01:20:34,440
um so um the the Dane mode that's

1837
01:20:34,440 --> 01:20:36,600
described in the draft is either no

1838
01:20:36,600 --> 01:20:39,540
mention of Dane or Dana's mandatory or

1839
01:20:39,540 --> 01:20:43,199
pkx you know mention or mandatory

1840
01:20:43,199 --> 01:20:46,199
um and it seems to me that that putting

1841
01:20:46,199 --> 01:20:47,940
the knowledge in the application of

1842
01:20:47,940 --> 01:20:50,820
which of these will or will not work

1843
01:20:50,820 --> 01:20:53,760
uh is fragile uh an application doesn't

1844
01:20:53,760 --> 01:20:56,640
necessarily know uh which authentication

1845
01:20:56,640 --> 01:20:59,159
mechanisms will or won't be available to

1846
01:20:59,159 --> 01:21:02,040
a particular destination uh one of the

1847
01:21:02,040 --> 01:21:03,780
great ways in which daneworks is

1848
01:21:03,780 --> 01:21:05,420
something called opportunistic name

1849
01:21:05,420 --> 01:21:08,219
which is use it when there are tlsa

1850
01:21:08,219 --> 01:21:11,219
records and don't use it when there

1851
01:21:11,219 --> 01:21:13,920
aren't uh so use Dane when possible

1852
01:21:13,920 --> 01:21:18,000
that's not covered in the in the draft

1853
01:21:18,000 --> 01:21:22,260
uh yes because if you set both bits to

1854
01:21:22,260 --> 01:21:25,440
zero that it should do exactly that uh

1855
01:21:25,440 --> 01:21:28,020
so the model should be that's sort of

1856
01:21:28,020 --> 01:21:30,140
everything can be clear

1857
01:21:30,140 --> 01:21:34,140
uh and then it's up to the the proxy to

1858
01:21:34,140 --> 01:21:36,719
basically do the right thing but if an

1859
01:21:36,719 --> 01:21:39,060
application has specific knowledge or

1860
01:21:39,060 --> 01:21:42,179
desired an application can override that

1861
01:21:42,179 --> 01:21:44,460
and say well this is now mandatory

1862
01:21:44,460 --> 01:21:47,280
because I want it uh

1863
01:21:47,280 --> 01:21:50,520
um is the proxy expected to detain when

1864
01:21:50,520 --> 01:21:52,260
TLC records are published there was no

1865
01:21:52,260 --> 01:21:55,320
language about that at all it expected

1866
01:21:55,320 --> 01:21:59,880
to do uh Dane yes so um it's expected to

1867
01:21:59,880 --> 01:22:02,280
exactly do a Dane lookup uh see whether

1868
01:22:02,280 --> 01:22:05,280
that would work or not and then use the

1869
01:22:05,280 --> 01:22:07,860
information yeah

1870
01:22:07,860 --> 01:22:10,080
of course if if the language is not

1871
01:22:10,080 --> 01:22:12,780
clear then then that can be added as a

1872
01:22:12,780 --> 01:22:15,480
more strict requirement uh but yeah it's

1873
01:22:15,480 --> 01:22:18,739
definitely expected to do that

1874
01:22:20,100 --> 01:22:21,960
okay

1875
01:22:21,960 --> 01:22:25,679
thank you Benjamin

1876
01:22:25,679 --> 01:22:27,780
hi

1877
01:22:27,780 --> 01:22:29,239
uh

1878
01:22:29,239 --> 01:22:33,120
I want I want to focus on something I I

1879
01:22:33,120 --> 01:22:34,739
just heard you say at the end I feel

1880
01:22:34,739 --> 01:22:37,820
like uh was was kind of crucial right

1881
01:22:37,820 --> 01:22:42,440
that uh this isn't formulated as an API

1882
01:22:42,440 --> 01:22:46,199
because the ietf doesn't standardize

1883
01:22:46,199 --> 01:22:50,219
apis and so the only way we can insert

1884
01:22:50,219 --> 01:22:52,440
ourselves into this process and and

1885
01:22:52,440 --> 01:22:55,020
provide our our proposal for how the

1886
01:22:55,020 --> 01:22:56,400
system works is to structure our

1887
01:22:56,400 --> 01:22:58,860
solution in the form of a protocol

1888
01:22:58,860 --> 01:23:02,159
and uh I don't know if that's exactly

1889
01:23:02,159 --> 01:23:04,920
true that the ITF has started to dabble

1890
01:23:04,920 --> 01:23:09,260
in API definitions but uh whether or not

1891
01:23:09,260 --> 01:23:11,940
uh it's true it doesn't it doesn't

1892
01:23:11,940 --> 01:23:15,719
strike me as a good reason to uh to

1893
01:23:15,719 --> 01:23:17,040
structure it this way I think that what

1894
01:23:17,040 --> 01:23:18,659
we're describing here is something that

1895
01:23:18,659 --> 01:23:20,219
that's really most naturally

1896
01:23:20,219 --> 01:23:22,679
characterized as an API and if the iatf

1897
01:23:22,679 --> 01:23:24,960
hasn't traditionally been very involved

1898
01:23:24,960 --> 01:23:28,199
in API definitions I think that's for a

1899
01:23:28,199 --> 01:23:30,360
good reason which is that those

1900
01:23:30,360 --> 01:23:34,400
definitions have to evolve pretty fast

1901
01:23:34,400 --> 01:23:37,320
and and the requirements

1902
01:23:37,320 --> 01:23:40,739
uh aren't always so clear up front in

1903
01:23:40,739 --> 01:23:43,500
this particular case uh you know I I

1904
01:23:43,500 --> 01:23:46,500
don't think that the specific behavior

1905
01:23:46,500 --> 01:23:49,260
that's laid out here would precisely

1906
01:23:49,260 --> 01:23:52,380
work on for example any of the major

1907
01:23:52,380 --> 01:23:55,440
consumer operating systems or for use by

1908
01:23:55,440 --> 01:23:58,920
any of the major consumer browsers those

1909
01:23:58,920 --> 01:24:02,400
all have very detailed and evolving

1910
01:24:02,400 --> 01:24:05,820
requirements for how they do their DNS

1911
01:24:05,820 --> 01:24:08,280
lookups for what security requirements

1912
01:24:08,280 --> 01:24:11,280
they expect Etc so

1913
01:24:11,280 --> 01:24:15,780
uh I think that if you actually look at

1914
01:24:15,780 --> 01:24:18,000
the the market for this I think it's

1915
01:24:18,000 --> 01:24:21,179
sort of not there

1916
01:24:21,179 --> 01:24:25,140
uh and instead we we do need to figure

1917
01:24:25,140 --> 01:24:29,540
out a a richer API for name resolution

1918
01:24:29,540 --> 01:24:35,280
for essentially the uh the longer tale

1919
01:24:35,280 --> 01:24:37,260
of applications who aren't willing to

1920
01:24:37,260 --> 01:24:39,739
deeply customize their DNS Behavior but

1921
01:24:39,739 --> 01:24:43,080
also aren't willing to be stuck on get

1922
01:24:43,080 --> 01:24:44,880
Adder info forever

1923
01:24:44,880 --> 01:24:48,120
uh but I don't think the answer is to

1924
01:24:48,120 --> 01:24:51,360
take all of the metadata about how you

1925
01:24:51,360 --> 01:24:53,040
want the request to be processed and

1926
01:24:53,040 --> 01:24:55,380
bundle it into the request itself in

1927
01:24:55,380 --> 01:24:56,940
particular I think that there's a

1928
01:24:56,940 --> 01:25:01,199
layering violation here where the the

1929
01:25:01,199 --> 01:25:03,420
client in this case doesn't

1930
01:25:03,420 --> 01:25:06,719
have any clear signal as to whether it's

1931
01:25:06,719 --> 01:25:09,960
talking to a DNS proxy that is aware of

1932
01:25:09,960 --> 01:25:12,840
this until after the query has already

1933
01:25:12,840 --> 01:25:15,120
been issued it only finds out it from

1934
01:25:15,120 --> 01:25:18,719
the response whether it's requests were

1935
01:25:18,719 --> 01:25:21,360
uh were met that's a kind of an upside

1936
01:25:21,360 --> 01:25:24,060
down design to me I would I would much

1937
01:25:24,060 --> 01:25:26,880
rather say okay we're going to define a

1938
01:25:26,880 --> 01:25:30,420
new interaction model ideally an API and

1939
01:25:30,420 --> 01:25:33,540
a platform relevant format but even if

1940
01:25:33,540 --> 01:25:35,460
it were an IPC I would still say this is

1941
01:25:35,460 --> 01:25:38,100
an or an RPC I would say this is a new

1942
01:25:38,100 --> 01:25:41,100
protocol being spoken between a new

1943
01:25:41,100 --> 01:25:43,140
interesting pair of parties one of which

1944
01:25:43,140 --> 01:25:46,739
is a in not quite a stub resolver but

1945
01:25:46,739 --> 01:25:50,159
it's more like an a smart forwarder but

1946
01:25:50,159 --> 01:25:51,900
maybe it's a steerable smart forwarder

1947
01:25:51,900 --> 01:25:53,820
the client can actually tell it where it

1948
01:25:53,820 --> 01:25:56,480
wants queries to go so

1949
01:25:56,480 --> 01:25:59,460
I think there's a lot of uh question

1950
01:25:59,460 --> 01:26:02,219
marks about what really what we really

1951
01:26:02,219 --> 01:26:03,900
ought to do here

1952
01:26:03,900 --> 01:26:05,699
so

1953
01:26:05,699 --> 01:26:08,400
many Bucks one is it seems that

1954
01:26:08,400 --> 01:26:11,940
at the moment there is almost nothing

1955
01:26:11,940 --> 01:26:14,639
uh for to allow sort of an application

1956
01:26:14,639 --> 01:26:18,000
to talk to a local proxy through an API

1957
01:26:18,000 --> 01:26:20,159
or at least I'm not aware of anything

1958
01:26:20,159 --> 01:26:23,340
that that works uh on more than one

1959
01:26:23,340 --> 01:26:26,100
platform the second part is that the

1960
01:26:26,100 --> 01:26:28,920
draft specifically has a probing query

1961
01:26:28,920 --> 01:26:32,159
to make sure that

1962
01:26:32,159 --> 01:26:34,500
um the the application doesn't leak any

1963
01:26:34,500 --> 01:26:38,760
privacy sensitive DNS query name but can

1964
01:26:38,760 --> 01:26:41,580
still probe whether this local proxy

1965
01:26:41,580 --> 01:26:44,300
that supports uh this draft is available

1966
01:26:44,300 --> 01:26:47,480
so in that sense the mechanism to to

1967
01:26:47,480 --> 01:26:50,400
interrogate the option the capabilities

1968
01:26:50,400 --> 01:26:53,400
of the local proxy is taken care of

1969
01:26:53,400 --> 01:26:55,260
sure um we're running a little bit

1970
01:26:55,260 --> 01:26:57,360
behind time so the further discussion

1971
01:26:57,360 --> 01:26:59,520
can go to the list are you sure Warren

1972
01:26:59,520 --> 01:27:03,480
okay thank you and I guess Peter

1973
01:27:03,480 --> 01:27:06,138
is next

1974
01:27:24,960 --> 01:27:27,179
okay

1975
01:27:27,179 --> 01:27:30,120
so um I'm going to give a quick update

1976
01:27:30,120 --> 01:27:34,020
on the draft that I wrote on mandating

1977
01:27:34,020 --> 01:27:36,719
consistency checks when processing CDs

1978
01:27:36,719 --> 01:27:38,699
or csync records

1979
01:27:38,699 --> 01:27:39,780
we've talked about this in Philadelphia

1980
01:27:39,780 --> 01:27:42,900
in July and got some feedback which is

1981
01:27:42,900 --> 01:27:44,760
not Incorporated

1982
01:27:44,760 --> 01:27:47,699
um yeah so this is a quick talk and the

1983
01:27:47,699 --> 01:27:49,380
next one will also be mine which I

1984
01:27:49,380 --> 01:27:51,179
perhaps will borrow a minute or two from

1985
01:27:51,179 --> 01:27:54,620
this one thanks

1986
01:27:55,860 --> 01:27:56,940
um yeah so this is mainly for

1987
01:27:56,940 --> 01:27:58,199
documentation for people who will look

1988
01:27:58,199 --> 01:27:59,760
it up later when they download the

1989
01:27:59,760 --> 01:28:02,460
slides so everybody probably knows CDs

1990
01:28:02,460 --> 01:28:04,560
records are used by the child to tell

1991
01:28:04,560 --> 01:28:07,139
the parent which are the future DS

1992
01:28:07,139 --> 01:28:09,540
records it desires it's good for Royal

1993
01:28:09,540 --> 01:28:11,040
office and so on and so forth and the

1994
01:28:11,040 --> 01:28:12,600
type publishes it and the parent can

1995
01:28:12,600 --> 01:28:15,300
digest it and similarly similarly for

1996
01:28:15,300 --> 01:28:18,179
csync the child can indicate what other

1997
01:28:18,179 --> 01:28:20,340
stuff should be updated like um

1998
01:28:20,340 --> 01:28:23,159
an S record so glue

1999
01:28:23,159 --> 01:28:25,980
um the finding is that the rfcs about

2000
01:28:25,980 --> 01:28:28,920
these record types don't specify how the

2001
01:28:28,920 --> 01:28:30,900
parents should be doing the polling and

2002
01:28:30,900 --> 01:28:32,340
the simple implementation would be to

2003
01:28:32,340 --> 01:28:34,800
just ask a trusted validating resolver

2004
01:28:34,800 --> 01:28:36,960
what the CDs record at a child for

2005
01:28:36,960 --> 01:28:39,179
example is and if you do that you end up

2006
01:28:39,179 --> 01:28:40,679
asking only one authoritative server

2007
01:28:40,679 --> 01:28:42,719
which may be giving you one response and

2008
01:28:42,719 --> 01:28:44,100
if you ask

2009
01:28:44,100 --> 01:28:46,260
another time or I don't know in another

2010
01:28:46,260 --> 01:28:48,300
microsecond you may be asking another

2011
01:28:48,300 --> 01:28:49,920
authoritative server which might be

2012
01:28:49,920 --> 01:28:52,080
giving a different answer and there is

2013
01:28:52,080 --> 01:28:55,199
no um no way to decide what's the right

2014
01:28:55,199 --> 01:28:58,800
one and the specifications so far don't

2015
01:28:58,800 --> 01:29:00,239
consider this problem so let's look into

2016
01:29:00,239 --> 01:29:02,040
what can possibly go wrong with this

2017
01:29:02,040 --> 01:29:04,380
next

2018
01:29:04,380 --> 01:29:06,360
so there's mainly two um scenarios one

2019
01:29:06,360 --> 01:29:08,460
is the multi-homing scenario which gets

2020
01:29:08,460 --> 01:29:10,260
more interesting if you add DNA SEC then

2021
01:29:10,260 --> 01:29:12,120
it's called multi-signer

2022
01:29:12,120 --> 01:29:14,880
um so consider um you have two providers

2023
01:29:14,880 --> 01:29:16,080
um which both

2024
01:29:16,080 --> 01:29:17,340
um

2025
01:29:17,340 --> 01:29:19,020
host a Zone and they sign it

2026
01:29:19,020 --> 01:29:21,179
independently each other announcing

2027
01:29:21,179 --> 01:29:24,800
their keys um

2028
01:29:25,219 --> 01:29:28,139
each other's and their own Keys now one

2029
01:29:28,139 --> 01:29:30,659
of them does a key role and accordingly

2030
01:29:30,659 --> 01:29:34,260
updates the CDs records for their with

2031
01:29:34,260 --> 01:29:36,239
the updated keys in that case when they

2032
01:29:36,239 --> 01:29:37,560
do that and they forget to include the

2033
01:29:37,560 --> 01:29:39,120
other providers Keys which may easily

2034
01:29:39,120 --> 01:29:40,800
happen when you update the CDs records

2035
01:29:40,800 --> 01:29:42,540
with your own new stuff and the parent

2036
01:29:42,540 --> 01:29:44,820
ends up querying this um it may happen

2037
01:29:44,820 --> 01:29:47,159
that the other provider gets thrown out

2038
01:29:47,159 --> 01:29:48,540
of the DS record set which makes the

2039
01:29:48,540 --> 01:29:49,800
general trust and breaks the solution

2040
01:29:49,800 --> 01:29:53,280
and similarly um with NS updates via

2041
01:29:53,280 --> 01:29:54,780
csync you can get the same kind of

2042
01:29:54,780 --> 01:29:57,239
problem and remove the other providers

2043
01:29:57,239 --> 01:29:59,219
and S records accidentally so that also

2044
01:29:59,219 --> 01:30:01,500
breaks a multi-signer setup and the

2045
01:30:01,500 --> 01:30:02,520
multi-homing setup it doesn't

2046
01:30:02,520 --> 01:30:04,199
necessarily mean the validation breaks

2047
01:30:04,199 --> 01:30:07,380
but that resolution breaks but it does

2048
01:30:07,380 --> 01:30:09,840
break the multi

2049
01:30:09,840 --> 01:30:11,219
um redundancy

2050
01:30:11,219 --> 01:30:13,020
promise that you have in a multi-homic

2051
01:30:13,020 --> 01:30:16,020
setup usually next

2052
01:30:16,020 --> 01:30:17,699
and similarly when you do a provider

2053
01:30:17,699 --> 01:30:20,219
change without turning dnsic off you

2054
01:30:20,219 --> 01:30:22,199
have to do a multi-signup period so you

2055
01:30:22,199 --> 01:30:23,580
onboard a new provider and then

2056
01:30:23,580 --> 01:30:25,199
off-board the first one

2057
01:30:25,199 --> 01:30:27,300
and that also involves multiple steps

2058
01:30:27,300 --> 01:30:30,960
with Ds record and NS record updates

2059
01:30:30,960 --> 01:30:33,000
um so particularly you have to prepare

2060
01:30:33,000 --> 01:30:34,679
the DS records for the new provider

2061
01:30:34,679 --> 01:30:37,560
first and only then add the new provider

2062
01:30:37,560 --> 01:30:40,380
to the NS record set and at that point

2063
01:30:40,380 --> 01:30:42,179
the new providers CDs records become

2064
01:30:42,179 --> 01:30:43,980
visible and they haven't been tested

2065
01:30:43,980 --> 01:30:45,780
before so if the new provider isn't

2066
01:30:45,780 --> 01:30:47,400
aware that this is even a multi-signer

2067
01:30:47,400 --> 01:30:49,199
setup they may not have included the old

2068
01:30:49,199 --> 01:30:51,120
providers stuff into their CDs record

2069
01:30:51,120 --> 01:30:54,060
set and then the parent might end up

2070
01:30:54,060 --> 01:30:56,040
adjusting that stuff and throwing the

2071
01:30:56,040 --> 01:30:58,380
old providers DS records out of the

2072
01:30:58,380 --> 01:30:59,880
delegation although it is still in the

2073
01:30:59,880 --> 01:31:02,159
NS record set and that breaks the the

2074
01:31:02,159 --> 01:31:04,560
things too so this is um kind of a

2075
01:31:04,560 --> 01:31:07,320
special case of the multi-seller thing

2076
01:31:07,320 --> 01:31:08,940
so to fix this let's look at the next

2077
01:31:08,940 --> 01:31:12,440
and I think final slide

2078
01:31:12,659 --> 01:31:15,480
um so um these problems can be

2079
01:31:15,480 --> 01:31:17,400
um mitigated if the parent is a bit more

2080
01:31:17,400 --> 01:31:20,340
careful and if you have a policy that

2081
01:31:20,340 --> 01:31:23,219
whenever you use a CDs or cdns key or

2082
01:31:23,219 --> 01:31:25,020
csync records

2083
01:31:25,020 --> 01:31:26,460
um as a parent for doing this kind of

2084
01:31:26,460 --> 01:31:29,400
scanning you um should check whether

2085
01:31:29,400 --> 01:31:31,380
things are consistent across all name

2086
01:31:31,380 --> 01:31:33,300
servers in the delegation you may

2087
01:31:33,300 --> 01:31:35,280
disregard unresponsive name servers but

2088
01:31:35,280 --> 01:31:37,199
otherwise if you discover an

2089
01:31:37,199 --> 01:31:40,139
inconsistency you must abort and not

2090
01:31:40,139 --> 01:31:42,239
change the delegation and you can do it

2091
01:31:42,239 --> 01:31:43,980
again tomorrow or you can retry after

2092
01:31:43,980 --> 01:31:46,679
five minutes or whatever your back off

2093
01:31:46,679 --> 01:31:49,739
um policy is but that would solve that

2094
01:31:49,739 --> 01:31:51,900
problem and if um multi-signer

2095
01:31:51,900 --> 01:31:53,699
deployments at some point get more

2096
01:31:53,699 --> 01:31:55,380
prominent I would expect

2097
01:31:55,380 --> 01:31:58,679
um these things to happen unless care is

2098
01:31:58,679 --> 01:32:01,440
taken so I think we should clarify to

2099
01:32:01,440 --> 01:32:03,420
people who have these scanning

2100
01:32:03,420 --> 01:32:05,280
implementations how it would be done

2101
01:32:05,280 --> 01:32:07,080
correctly and if someone discovers an

2102
01:32:07,080 --> 01:32:09,540
implementation that only does one query

2103
01:32:09,540 --> 01:32:10,860
to one name server you could easily say

2104
01:32:10,860 --> 01:32:12,900
look at this document and you're not

2105
01:32:12,900 --> 01:32:14,460
doing it right

2106
01:32:14,460 --> 01:32:16,260
um so this is what I think about it and

2107
01:32:16,260 --> 01:32:18,060
I I was

2108
01:32:18,060 --> 01:32:19,920
going to ask the working group if you

2109
01:32:19,920 --> 01:32:21,960
think this is reasonable if it should be

2110
01:32:21,960 --> 01:32:25,639
moved forward and so on and so forth

2111
01:32:25,800 --> 01:32:29,179
thank you wish

2112
01:32:29,219 --> 01:32:32,820
thank you West herdicker uscisi no hats

2113
01:32:32,820 --> 01:32:35,480
actually hat of the csync author

2114
01:32:35,480 --> 01:32:38,400
document I support this because I

2115
01:32:38,400 --> 01:32:39,840
actually think I wanted to do something

2116
01:32:39,840 --> 01:32:43,520
like this back when I published it but

2117
01:32:43,520 --> 01:32:46,020
there's some pushback so if you read the

2118
01:32:46,020 --> 01:32:47,280
feasting document in a particular

2119
01:32:47,280 --> 01:32:49,199
section 4.2 it says you have to take the

2120
01:32:49,199 --> 01:32:51,179
the most recent SOA so there is some

2121
01:32:51,179 --> 01:32:53,460
notion of how to make sure that you know

2122
01:32:53,460 --> 01:32:54,900
even if things are inconsistent you

2123
01:32:54,900 --> 01:32:56,280
still get the most recent up to date

2124
01:32:56,280 --> 01:32:58,500
record and things like that the problem

2125
01:32:58,500 --> 01:33:00,780
is is that in some deployments

2126
01:33:00,780 --> 01:33:02,880
uh my recollection from the discussion

2127
01:33:02,880 --> 01:33:05,520
is you

2128
01:33:05,520 --> 01:33:07,500
there may be some complexity and you

2129
01:33:07,500 --> 01:33:09,659
actually want to point at a at a hidden

2130
01:33:09,659 --> 01:33:11,340
server which is actually what this

2131
01:33:11,340 --> 01:33:13,440
document also talks about in section 4.2

2132
01:33:13,440 --> 01:33:16,320
it says you know the scanners maybe you

2133
01:33:16,320 --> 01:33:18,060
know or registrars might be configurable

2134
01:33:18,060 --> 01:33:20,219
to say hey go look somewhere else and

2135
01:33:20,219 --> 01:33:23,340
things like that so uh do I'd read that

2136
01:33:23,340 --> 01:33:25,020
section just to see you know what it

2137
01:33:25,020 --> 01:33:27,120
follows it but otherwise I like the idea

2138
01:33:27,120 --> 01:33:29,639
of mandating checking everything okay so

2139
01:33:29,639 --> 01:33:32,940
you said csync RFC section 4.2 okay I'll

2140
01:33:32,940 --> 01:33:35,360
read that

2141
01:33:36,199 --> 01:33:39,659
so you also support this and there were

2142
01:33:39,659 --> 01:33:42,360
a couple of things that I mean maybe in

2143
01:33:42,360 --> 01:33:43,980
regards to what Wes said

2144
01:33:43,980 --> 01:33:47,040
if you kind of ask all servers you still

2145
01:33:47,040 --> 01:33:48,719
might not have asked all server because

2146
01:33:48,719 --> 01:33:50,280
there's any cast and all the other stuff

2147
01:33:50,280 --> 01:33:52,320
behind that maybe it might be good to

2148
01:33:52,320 --> 01:33:54,780
have some text around that in the

2149
01:33:54,780 --> 01:33:57,780
document and then what is the reasoning

2150
01:33:57,780 --> 01:34:00,600
behind kind of if servers are not

2151
01:34:00,600 --> 01:34:03,659
responding to discount them

2152
01:34:03,659 --> 01:34:06,239
rather than doing some sort of retry

2153
01:34:06,239 --> 01:34:08,219
okay

2154
01:34:08,219 --> 01:34:10,440
um so two things regarding your first

2155
01:34:10,440 --> 01:34:11,239
um

2156
01:34:11,239 --> 01:34:15,060
point about various anycast nodes I

2157
01:34:15,060 --> 01:34:17,460
think the important policy is to ask all

2158
01:34:17,460 --> 01:34:20,460
providers involved and you can achieve

2159
01:34:20,460 --> 01:34:22,080
that by asking one node of each name

2160
01:34:22,080 --> 01:34:23,520
server host name so I think that's why

2161
01:34:23,520 --> 01:34:25,620
that's okay and then the second way to

2162
01:34:25,620 --> 01:34:27,900
disregard unresponsive name servers

2163
01:34:27,900 --> 01:34:29,280
um so sometimes there's maintenance but

2164
01:34:29,280 --> 01:34:31,380
more importantly from some corners of

2165
01:34:31,380 --> 01:34:32,699
the topology

2166
01:34:32,699 --> 01:34:34,080
um some stuff may just be unreachable

2167
01:34:34,080 --> 01:34:36,179
because of routing issues and you would

2168
01:34:36,179 --> 01:34:38,340
otherwise never have the ability to um

2169
01:34:38,340 --> 01:34:40,620
to do an actual update if you take that

2170
01:34:40,620 --> 01:34:42,900
as a blocking failure I don't feel very

2171
01:34:42,900 --> 01:34:44,340
strongly and it wasn't in the draft

2172
01:34:44,340 --> 01:34:47,280
originally but at the last ATF was

2173
01:34:47,280 --> 01:34:49,440
proposed to add it in I think it was

2174
01:34:49,440 --> 01:34:50,159
Victor

2175
01:34:50,159 --> 01:34:52,800
um so perhaps Victor can start the

2176
01:34:52,800 --> 01:34:54,000
battle

2177
01:34:54,000 --> 01:34:55,920
okay I mean if I just find it weird

2178
01:34:55,920 --> 01:34:57,780
because I mean yeah that's obviously has

2179
01:34:57,780 --> 01:35:00,420
an attack Vector yeah I don't I don't

2180
01:35:00,420 --> 01:35:01,860
feel strongly about it um so whatever

2181
01:35:01,860 --> 01:35:05,299
the the working group feels like

2182
01:35:05,580 --> 01:35:07,139
Paul Walker speaking as one of the

2183
01:35:07,139 --> 01:35:09,060
authors of the Celia record

2184
01:35:09,060 --> 01:35:11,219
um I just skimmed my uh our sales like

2185
01:35:11,219 --> 01:35:12,540
did we really not say anything about

2186
01:35:12,540 --> 01:35:15,239
this and uh we didn't so uh yes please

2187
01:35:15,239 --> 01:35:18,540
do this work this is our buck I'm sorry

2188
01:35:18,540 --> 01:35:20,580
it's not a fault back then there was no

2189
01:35:20,580 --> 01:35:23,300
multi-seller

2190
01:35:24,199 --> 01:35:27,739
Vector neuron

2191
01:35:27,739 --> 01:35:30,060
allowing name servers to be unreachable

2192
01:35:30,060 --> 01:35:32,780
my concern was about uh Hidden Monsters

2193
01:35:32,780 --> 01:35:36,420
and also about being able to remove name

2194
01:35:36,420 --> 01:35:38,219
servers that have died and aren't going

2195
01:35:38,219 --> 01:35:39,360
to come back

2196
01:35:39,360 --> 01:35:40,800
right when your name server is

2197
01:35:40,800 --> 01:35:43,320
permanently decommissioned you want to

2198
01:35:43,320 --> 01:35:46,020
be able to still make updates and it's

2199
01:35:46,020 --> 01:35:48,540
presently listed so you know what are

2200
01:35:48,540 --> 01:35:50,900
you gonna do

2201
01:35:51,920 --> 01:35:54,719
should I add these these reasonings to

2202
01:35:54,719 --> 01:35:56,280
the draft

2203
01:35:56,280 --> 01:35:59,040
I mean I said unreachable corners of the

2204
01:35:59,040 --> 01:36:01,800
internet and you said phasing out name

2205
01:36:01,800 --> 01:36:02,820
service and all of that do you think

2206
01:36:02,820 --> 01:36:04,739
that's important or do we just I mean

2207
01:36:04,739 --> 01:36:05,639
it's important but do you think it's

2208
01:36:05,639 --> 01:36:07,020
important for the draft or should we

2209
01:36:07,020 --> 01:36:09,780
just specify the protocol without

2210
01:36:09,780 --> 01:36:10,620
um

2211
01:36:10,620 --> 01:36:12,060
justification I don't know how it's

2212
01:36:12,060 --> 01:36:13,980
handled usually

2213
01:36:13,980 --> 01:36:16,980
I don't have strong opinions about how

2214
01:36:16,980 --> 01:36:19,519
to say it

2215
01:36:23,040 --> 01:36:25,080
okay thank you Peter

2216
01:36:25,080 --> 01:36:27,300
um wrapping up

2217
01:36:27,300 --> 01:36:30,120
um there's also been good discussion on

2218
01:36:30,120 --> 01:36:32,880
the mailing list in July August there's

2219
01:36:32,880 --> 01:36:34,760
a good feedback from the room

2220
01:36:34,760 --> 01:36:38,760
will schedule a working group adoption

2221
01:36:38,760 --> 01:36:41,040
call later with and we coordinate with

2222
01:36:41,040 --> 01:36:44,340
you okay next presentation

2223
01:36:44,340 --> 01:36:47,360
also by Peter

2224
01:36:51,199 --> 01:36:54,239
this one

2225
01:36:54,239 --> 01:36:56,100
all right

2226
01:36:56,100 --> 01:36:58,860
um so it's Peter Thomason

2227
01:36:58,860 --> 01:37:00,360
um

2228
01:37:00,360 --> 01:37:02,219
yeah so in the past few years

2229
01:37:02,219 --> 01:37:04,139
um multi-signing scenarios have been

2230
01:37:04,139 --> 01:37:07,139
discussed in various places

2231
01:37:07,139 --> 01:37:08,159
um

2232
01:37:08,159 --> 01:37:10,620
and I was sometimes part of the

2233
01:37:10,620 --> 01:37:12,780
discussion and I noticed that

2234
01:37:12,780 --> 01:37:15,300
um the the way that the key exchange

2235
01:37:15,300 --> 01:37:17,219
that's necessary between the

2236
01:37:17,219 --> 01:37:19,199
participating providers

2237
01:37:19,199 --> 01:37:21,420
um hasn't been um discussed on a

2238
01:37:21,420 --> 01:37:23,880
protocol level so far or well like

2239
01:37:23,880 --> 01:37:26,219
there's no no automatable recipe for it

2240
01:37:26,219 --> 01:37:27,900
essentially it's not really protocol

2241
01:37:27,900 --> 01:37:28,980
change

2242
01:37:28,980 --> 01:37:31,800
and I just wanted to um talk about that

2243
01:37:31,800 --> 01:37:34,199
and um put it out there to the group how

2244
01:37:34,199 --> 01:37:36,120
that could be addressed again I don't

2245
01:37:36,120 --> 01:37:38,340
feel very strongly it's just an idea I

2246
01:37:38,340 --> 01:37:39,480
don't know if anyone needs a solution

2247
01:37:39,480 --> 01:37:41,340
even maybe people like doing things

2248
01:37:41,340 --> 01:37:42,900
manually

2249
01:37:42,900 --> 01:37:45,179
um but so let's let's um just take a

2250
01:37:45,179 --> 01:37:48,060
look at it and then we can discuss or do

2251
01:37:48,060 --> 01:37:51,500
whatever so next slide

2252
01:37:52,020 --> 01:37:53,880
um so this is a bit of a messy slide um

2253
01:37:53,880 --> 01:37:55,920
but I'll walk you through it

2254
01:37:55,920 --> 01:37:58,860
um so to look at um

2255
01:37:58,860 --> 01:38:00,900
what's needed for the key exchange it's

2256
01:38:00,900 --> 01:38:03,780
interesting to investigate how the DNS

2257
01:38:03,780 --> 01:38:04,980
resolution works if you have a

2258
01:38:04,980 --> 01:38:07,199
multi-center setup and let's say you

2259
01:38:07,199 --> 01:38:08,580
you're asking for some record of

2260
01:38:08,580 --> 01:38:10,380
Interest let's say an a record and

2261
01:38:10,380 --> 01:38:11,699
actually you will need two separate

2262
01:38:11,699 --> 01:38:13,440
queries one is for the a record which

2263
01:38:13,440 --> 01:38:15,360
gets you the response and also the

2264
01:38:15,360 --> 01:38:17,340
signature and the other is for the DNS

2265
01:38:17,340 --> 01:38:20,100
key that you need for validation and a

2266
01:38:20,100 --> 01:38:22,080
reserver might end up sending these two

2267
01:38:22,080 --> 01:38:24,000
queries to two different name server

2268
01:38:24,000 --> 01:38:25,980
host names and then a multi-center setup

2269
01:38:25,980 --> 01:38:27,420
that might be operated by two different

2270
01:38:27,420 --> 01:38:28,980
providers

2271
01:38:28,980 --> 01:38:31,199
and so the DNS key record set is not

2272
01:38:31,199 --> 01:38:33,659
necessarily delivered by the party who

2273
01:38:33,659 --> 01:38:36,179
also gave you the signature

2274
01:38:36,179 --> 01:38:40,920
um so to make that work and to to um

2275
01:38:40,920 --> 01:38:43,139
keep it that way that reservers don't

2276
01:38:43,139 --> 01:38:44,280
need to be aware of any of this

2277
01:38:44,280 --> 01:38:46,199
multi-cellular stuff you need to make

2278
01:38:46,199 --> 01:38:48,420
sure that the DNS key responses include

2279
01:38:48,420 --> 01:38:51,659
all the keys that a validator may need

2280
01:38:51,659 --> 01:38:53,340
to do the validation regardless of

2281
01:38:53,340 --> 01:38:55,679
whether the record of interest is

2282
01:38:55,679 --> 01:38:58,380
delivered by the same provider or not so

2283
01:38:58,380 --> 01:38:59,820
um the interesting question here is what

2284
01:38:59,820 --> 01:39:01,920
exactly needs to be included in the dnsq

2285
01:39:01,920 --> 01:39:03,900
record set and it turns out of course it

2286
01:39:03,900 --> 01:39:05,760
works if you just include all of the DNS

2287
01:39:05,760 --> 01:39:07,739
keys of all providers so you just take

2288
01:39:07,739 --> 01:39:09,179
the global Union or something like that

2289
01:39:09,179 --> 01:39:11,159
but turns out you don't need that it

2290
01:39:11,159 --> 01:39:12,300
actually depends on the Queue type

2291
01:39:12,300 --> 01:39:15,060
because if you are looking for the DNS

2292
01:39:15,060 --> 01:39:17,760
key only if that's the record of

2293
01:39:17,760 --> 01:39:20,159
Interest then the signature will always

2294
01:39:20,159 --> 01:39:21,360
be

2295
01:39:21,360 --> 01:39:22,380
um

2296
01:39:22,380 --> 01:39:24,719
in the same response as the DNS key so

2297
01:39:24,719 --> 01:39:26,580
it will always be done with a key that

2298
01:39:26,580 --> 01:39:28,980
is part of the dnsc records that you get

2299
01:39:28,980 --> 01:39:30,420
as a response so it's actually just a

2300
01:39:30,420 --> 01:39:32,460
one provider problem in the DNS record

2301
01:39:32,460 --> 01:39:34,739
set so to validate DNS key record

2302
01:39:34,739 --> 01:39:37,560
responses you only need the ks case of

2303
01:39:37,560 --> 01:39:41,219
that provider not of the other providers

2304
01:39:41,219 --> 01:39:43,080
um and um

2305
01:39:43,080 --> 01:39:45,480
yes for everything else let's say for

2306
01:39:45,480 --> 01:39:47,580
example for an a record

2307
01:39:47,580 --> 01:39:50,219
um it may be that the signature is

2308
01:39:50,219 --> 01:39:52,980
delivered by a provider that's different

2309
01:39:52,980 --> 01:39:54,960
from the DNS key delivery provider as I

2310
01:39:54,960 --> 01:39:56,159
said earlier because then you really

2311
01:39:56,159 --> 01:39:57,780
have two different um

2312
01:39:57,780 --> 01:40:00,179
queries and then you need the other

2313
01:40:00,179 --> 01:40:03,000
provider's zsks right because you you

2314
01:40:03,000 --> 01:40:04,380
don't know ahead of time which name

2315
01:40:04,380 --> 01:40:06,060
server hostname belongs to who

2316
01:40:06,060 --> 01:40:07,620
so um

2317
01:40:07,620 --> 01:40:10,440
forget all about that um the summary of

2318
01:40:10,440 --> 01:40:12,179
that is so the bottom line is the DNS

2319
01:40:12,179 --> 01:40:13,560
record said that everybody has to

2320
01:40:13,560 --> 01:40:16,500
deliver is at least the local DNS keys

2321
01:40:16,500 --> 01:40:18,540
of that provider who's responding plus

2322
01:40:18,540 --> 01:40:20,880
the other providers is use case so

2323
01:40:20,880 --> 01:40:22,980
anyone who's sending a response needs to

2324
01:40:22,980 --> 01:40:24,780
have imported the other providers Zs

2325
01:40:24,780 --> 01:40:25,679
case

2326
01:40:25,679 --> 01:40:29,300
but not necessarily the case case

2327
01:40:29,400 --> 01:40:31,440
um and then very similarly for CDs and

2328
01:40:31,440 --> 01:40:33,300
CDN SQ records if you want to use that

2329
01:40:33,300 --> 01:40:35,100
and you also have to to serve the union

2330
01:40:35,100 --> 01:40:37,620
of all the providers ksk um type DNS

2331
01:40:37,620 --> 01:40:39,480
keys because otherwise things wouldn't

2332
01:40:39,480 --> 01:40:40,980
work out with the previous draft where

2333
01:40:40,980 --> 01:40:43,260
you require consistency

2334
01:40:43,260 --> 01:40:46,040
um so next

2335
01:40:46,380 --> 01:40:49,260
so let's look at what the um additional

2336
01:40:49,260 --> 01:40:52,440
requirements would be Beyond um what are

2337
01:40:52,440 --> 01:40:55,739
the keys you need so um we just learned

2338
01:40:55,739 --> 01:40:57,360
that providers need to discover each

2339
01:40:57,360 --> 01:40:58,980
other's Case Case and include them in

2340
01:40:58,980 --> 01:41:00,780
the CDs kind of records and to learn

2341
01:41:00,780 --> 01:41:02,760
each other's Zeus case and announce them

2342
01:41:02,760 --> 01:41:05,400
in the dnsq record sets and all of that

2343
01:41:05,400 --> 01:41:07,880
in principle has been described in order

2344
01:41:07,880 --> 01:41:09,900
automation draft I think together with

2345
01:41:09,900 --> 01:41:13,020
Schumann and actually

2346
01:41:13,020 --> 01:41:14,460
um the link is outdated it's been

2347
01:41:14,460 --> 01:41:17,400
adopted um already but um the draft

2348
01:41:17,400 --> 01:41:19,920
doesn't specify how to do it um in a

2349
01:41:19,920 --> 01:41:21,719
technical way

2350
01:41:21,719 --> 01:41:23,400
um and there are a few questions to to

2351
01:41:23,400 --> 01:41:25,440
answer for example one is which channel

2352
01:41:25,440 --> 01:41:27,060
do you use and another is how do you

2353
01:41:27,060 --> 01:41:29,580
decide whether a key that you observe at

2354
01:41:29,580 --> 01:41:31,440
another provider's DNS key record set

2355
01:41:31,440 --> 01:41:33,480
that you want to import if that is

2356
01:41:33,480 --> 01:41:37,020
actually a ksk or also used for signing

2357
01:41:37,020 --> 01:41:38,760
of other records in which case it's a

2358
01:41:38,760 --> 01:41:40,380
zsk or CSK

2359
01:41:40,380 --> 01:41:42,239
and that's hard to tell

2360
01:41:42,239 --> 01:41:44,820
um because you don't know if a ksk like

2361
01:41:44,820 --> 01:41:46,980
signs that other one record That You

2362
01:41:46,980 --> 01:41:48,600
Don't See from the outside

2363
01:41:48,600 --> 01:41:50,280
and then also if you have three

2364
01:41:50,280 --> 01:41:52,139
providers for example

2365
01:41:52,139 --> 01:41:54,060
um just for illustration let's say

2366
01:41:54,060 --> 01:41:56,340
provider a b and c everybody has

2367
01:41:56,340 --> 01:41:58,260
imported each other's stuff and then

2368
01:41:58,260 --> 01:41:59,639
provide a b

2369
01:41:59,639 --> 01:42:02,100
um obsoletes the key that they phase out

2370
01:42:02,100 --> 01:42:04,320
it'll have been imported by A and B

2371
01:42:04,320 --> 01:42:06,960
right so how should a for example know

2372
01:42:06,960 --> 01:42:08,820
that they should remove this key because

2373
01:42:08,820 --> 01:42:10,440
B has faced it out although it's still

2374
01:42:10,440 --> 01:42:12,179
visible in C so it could be C is key a

2375
01:42:12,179 --> 01:42:14,699
doesn't know and that kind of inference

2376
01:42:14,699 --> 01:42:16,440
doesn't work if you just look at the DNS

2377
01:42:16,440 --> 01:42:19,560
key record set in the child to um yeah

2378
01:42:19,560 --> 01:42:21,840
so so you get these orphaned keys if you

2379
01:42:21,840 --> 01:42:24,119
only try to infer from what you see at

2380
01:42:24,119 --> 01:42:26,219
the Apex so you need something else

2381
01:42:26,219 --> 01:42:27,719
and that's something else what

2382
01:42:27,719 --> 01:42:29,820
properties would you like um so so one

2383
01:42:29,820 --> 01:42:31,679
property would be it would be in band I

2384
01:42:31,679 --> 01:42:33,420
mean it doesn't need to

2385
01:42:33,420 --> 01:42:35,880
um we can use rest apis or whatever but

2386
01:42:35,880 --> 01:42:37,440
perhaps you can make it work in band

2387
01:42:37,440 --> 01:42:39,000
would be nice if it's if it is

2388
01:42:39,000 --> 01:42:40,080
authenticated

2389
01:42:40,080 --> 01:42:42,000
and because of the how to distinguish

2390
01:42:42,000 --> 01:42:44,100
different kinds of keys a problem that I

2391
01:42:44,100 --> 01:42:45,360
just mentioned it would be nice if

2392
01:42:45,360 --> 01:42:47,820
somehow it would be explicit about these

2393
01:42:47,820 --> 01:42:49,139
things

2394
01:42:49,139 --> 01:42:51,659
next

2395
01:42:51,659 --> 01:42:53,400
so there's two proposals one is for how

2396
01:42:53,400 --> 01:42:54,840
to do the key exchange and the other is

2397
01:42:54,840 --> 01:42:57,719
for when to do it how to trigger it

2398
01:42:57,719 --> 01:42:59,520
um the bootstrapping draft has a

2399
01:42:59,520 --> 01:43:00,960
signaling mechanism

2400
01:43:00,960 --> 01:43:03,179
um how the um

2401
01:43:03,179 --> 01:43:05,760
DNS provider the names of operators can

2402
01:43:05,760 --> 01:43:08,159
make authenticated announcements of um

2403
01:43:08,159 --> 01:43:10,380
stuff about their domains that they host

2404
01:43:10,380 --> 01:43:12,659
it's used in the bootstrapping draft to

2405
01:43:12,659 --> 01:43:14,340
make an initial statement about what the

2406
01:43:14,340 --> 01:43:16,080
DS record set should be before there is

2407
01:43:16,080 --> 01:43:18,480
a chain of trust and there is a label in

2408
01:43:18,480 --> 01:43:21,239
the beginning of the signaling owner

2409
01:43:21,239 --> 01:43:23,880
names in this draft that is the

2410
01:43:23,880 --> 01:43:25,320
signaling type and we can introduce a

2411
01:43:25,320 --> 01:43:26,699
new one like for example underscore

2412
01:43:26,699 --> 01:43:27,780
multi

2413
01:43:27,780 --> 01:43:29,820
and we can use that signaling mechanism

2414
01:43:29,820 --> 01:43:32,100
to have an authenticated signaling path

2415
01:43:32,100 --> 01:43:34,560
between the different DNS operators who

2416
01:43:34,560 --> 01:43:36,780
participate in a dnsic multi-signer

2417
01:43:36,780 --> 01:43:39,000
scenario and the idea is that under

2418
01:43:39,000 --> 01:43:42,179
these signaling um records each provider

2419
01:43:42,179 --> 01:43:44,100
would announce their own keys for which

2420
01:43:44,100 --> 01:43:46,199
they control the private part so no

2421
01:43:46,199 --> 01:43:48,719
Union and then all the other ones could

2422
01:43:48,719 --> 01:43:50,639
look at that and collect whatever they

2423
01:43:50,639 --> 01:43:52,199
find and import it into their local

2424
01:43:52,199 --> 01:43:53,280
stuff

2425
01:43:53,280 --> 01:43:55,500
that requires the host names of the name

2426
01:43:55,500 --> 01:43:58,139
server no incorrect the zones in which

2427
01:43:58,139 --> 01:44:00,000
the names of our host names live to be

2428
01:44:00,000 --> 01:44:01,560
secure because otherwise you can't do

2429
01:44:01,560 --> 01:44:03,420
the dnsic validation of whatever is

2430
01:44:03,420 --> 01:44:04,800
published there so it's the same

2431
01:44:04,800 --> 01:44:07,980
requirement as in the bootstrap draft

2432
01:44:07,980 --> 01:44:09,719
um the idea is to do it as shown at the

2433
01:44:09,719 --> 01:44:11,580
bottom of this slide so let's say you're

2434
01:44:11,580 --> 01:44:13,440
provider.net and you want to make an

2435
01:44:13,440 --> 01:44:15,239
announcement to your multi-signer peers

2436
01:44:15,239 --> 01:44:18,540
about the domain example.co.uk then you

2437
01:44:18,540 --> 01:44:20,100
would assemble the name as it's shown

2438
01:44:20,100 --> 01:44:22,380
here underscore multi.example.co.uk

2439
01:44:22,380 --> 01:44:24,060
underscore signal dot whatever the name

2440
01:44:24,060 --> 01:44:25,440
server host name is

2441
01:44:25,440 --> 01:44:29,400
and on this name which is a not an apex

2442
01:44:29,400 --> 01:44:31,500
name so it's a subdomain necessarily you

2443
01:44:31,500 --> 01:44:34,080
can't have a delegation there

2444
01:44:34,080 --> 01:44:36,300
um you publish CDs and CDN SQ records

2445
01:44:36,300 --> 01:44:38,520
and put your own C your own case case

2446
01:44:38,520 --> 01:44:39,360
there

2447
01:44:39,360 --> 01:44:41,639
and you publish a DNS key record set

2448
01:44:41,639 --> 01:44:44,100
which has your Zs case

2449
01:44:44,100 --> 01:44:46,440
of course you would have to update the

2450
01:44:46,440 --> 01:44:48,960
language of the other rfcs who Define

2451
01:44:48,960 --> 01:44:51,060
those record types to only live at the

2452
01:44:51,060 --> 01:44:52,080
Apex

2453
01:44:52,080 --> 01:44:55,020
and then if you have that you have an

2454
01:44:55,020 --> 01:44:56,760
authenticated signaling mechanism and

2455
01:44:56,760 --> 01:44:58,560
the other providers can query that stuff

2456
01:44:58,560 --> 01:45:01,199
and import things

2457
01:45:01,199 --> 01:45:03,119
that's the basic idea it kind of sounds

2458
01:45:03,119 --> 01:45:04,920
complicated but actually boils down to

2459
01:45:04,920 --> 01:45:07,380
just having providers publish a copy of

2460
01:45:07,380 --> 01:45:10,320
their own records under these names

2461
01:45:10,320 --> 01:45:11,940
um next slide

2462
01:45:11,940 --> 01:45:13,860
the question is then how do you trigger

2463
01:45:13,860 --> 01:45:15,239
this how does a provider know that the

2464
01:45:15,239 --> 01:45:17,520
other ones even exist and when does an

2465
01:45:17,520 --> 01:45:19,920
import have to happen

2466
01:45:19,920 --> 01:45:21,300
um so if you consider for example the

2467
01:45:21,300 --> 01:45:22,800
beginning of a multi-signer setup

2468
01:45:22,800 --> 01:45:25,080
initially the new provider is not yet in

2469
01:45:25,080 --> 01:45:26,520
the name server record set and before

2470
01:45:26,520 --> 01:45:29,340
you can add the provider you have to

2471
01:45:29,340 --> 01:45:32,159
um to set up the DNS configuration so

2472
01:45:32,159 --> 01:45:33,600
you can't do it based on the NS record

2473
01:45:33,600 --> 01:45:35,940
sets because it's not yet there you

2474
01:45:35,940 --> 01:45:38,400
can't find the new provider yet

2475
01:45:38,400 --> 01:45:40,260
um the proposal for Discovery is that we

2476
01:45:40,260 --> 01:45:42,600
introduce a new record type I have

2477
01:45:42,600 --> 01:45:45,600
called it tentatively CNS and it could

2478
01:45:45,600 --> 01:45:48,179
hold the prospective name server host

2479
01:45:48,179 --> 01:45:50,340
names in the final state after the

2480
01:45:50,340 --> 01:45:52,860
transition has happened that's analogous

2481
01:45:52,860 --> 01:45:55,139
to how CDs records hold the prospective

2482
01:45:55,139 --> 01:45:58,679
DS records and the idea is that when um

2483
01:45:58,679 --> 01:46:00,840
The Zone owner has provisioned the zone

2484
01:46:00,840 --> 01:46:02,280
at the old provider and also the new

2485
01:46:02,280 --> 01:46:04,440
provider and synchronized all the

2486
01:46:04,440 --> 01:46:06,840
contents like a records or whatever then

2487
01:46:06,840 --> 01:46:09,000
when everything is in order they add a

2488
01:46:09,000 --> 01:46:11,100
CNS record set which is the union of

2489
01:46:11,100 --> 01:46:12,840
name server host names so it would have

2490
01:46:12,840 --> 01:46:14,880
the old and the new name server host

2491
01:46:14,880 --> 01:46:15,719
names

2492
01:46:15,719 --> 01:46:18,780
and um when a DNS operator discovers

2493
01:46:18,780 --> 01:46:20,940
that that has been created they can look

2494
01:46:20,940 --> 01:46:22,560
at it and see oh okay so these are my

2495
01:46:22,560 --> 01:46:24,179
host names and then the other three are

2496
01:46:24,179 --> 01:46:25,260
from the other provider and then they

2497
01:46:25,260 --> 01:46:27,300
can go ahead and determine what the

2498
01:46:27,300 --> 01:46:28,619
signaling names would be from the

2499
01:46:28,619 --> 01:46:31,679
previous slide and import stuff

2500
01:46:31,679 --> 01:46:35,460
um this also works for triggering um

2501
01:46:35,460 --> 01:46:38,639
a rollover synchronization so for

2502
01:46:38,639 --> 01:46:40,739
example when you have done the

2503
01:46:40,739 --> 01:46:42,000
multi-signer setup you would of course

2504
01:46:42,000 --> 01:46:44,340
remove this CNS stuff again because you

2505
01:46:44,340 --> 01:46:45,540
don't need it anymore and then when one

2506
01:46:45,540 --> 01:46:48,600
provider does a rollover The Zone owner

2507
01:46:48,600 --> 01:46:50,159
can trigger a synchronization or

2508
01:46:50,159 --> 01:46:51,600
re-synchronization of keys between

2509
01:46:51,600 --> 01:46:54,300
multisand appears by recreating this CNS

2510
01:46:54,300 --> 01:46:56,100
record set and then they go and do the

2511
01:46:56,100 --> 01:46:59,280
queries and and collect

2512
01:46:59,280 --> 01:47:00,600
yeah

2513
01:47:00,600 --> 01:47:04,199
so that's the idea um for the trigger

2514
01:47:04,199 --> 01:47:06,179
um I don't care about what the name of

2515
01:47:06,179 --> 01:47:08,820
the record type would be I called it CNS

2516
01:47:08,820 --> 01:47:10,679
because it lives on the child side just

2517
01:47:10,679 --> 01:47:13,800
like CDs and csync and it conveys

2518
01:47:13,800 --> 01:47:16,320
configuration although not to the parent

2519
01:47:16,320 --> 01:47:18,360
but to the peers and that's what I

2520
01:47:18,360 --> 01:47:20,040
thought the CNS would be intuitive but I

2521
01:47:20,040 --> 01:47:21,960
know that some people at least feel

2522
01:47:21,960 --> 01:47:23,820
differently some people have told me

2523
01:47:23,820 --> 01:47:24,840
um

2524
01:47:24,840 --> 01:47:25,980
so whatever

2525
01:47:25,980 --> 01:47:27,480
um I just wanted to include the concern

2526
01:47:27,480 --> 01:47:30,000
here we can change it but I think it's

2527
01:47:30,000 --> 01:47:32,280
neat

2528
01:47:32,280 --> 01:47:34,260
um there's two more slides um the next

2529
01:47:34,260 --> 01:47:37,440
slide has an example workflow

2530
01:47:37,440 --> 01:47:40,080
so let's say you have example.co.uk and

2531
01:47:40,080 --> 01:47:42,239
you are provider a I mean you are not

2532
01:47:42,239 --> 01:47:44,100
provider a but that's the current setup

2533
01:47:44,100 --> 01:47:47,580
and this one dot provider a.net and you

2534
01:47:47,580 --> 01:47:49,500
want to onboard a second provider into

2535
01:47:49,500 --> 01:47:51,960
the multi-signer scenario the first

2536
01:47:51,960 --> 01:47:53,940
thing to do is that the domain owner

2537
01:47:53,940 --> 01:47:56,639
creates a zone at the second provider B

2538
01:47:56,639 --> 01:48:00,239
and um you know Provisions are the a

2539
01:48:00,239 --> 01:48:01,800
records and whatever the Zone contents

2540
01:48:01,800 --> 01:48:03,900
are and then when that's in order the

2541
01:48:03,900 --> 01:48:06,239
domain owner creates the CNS record set

2542
01:48:06,239 --> 01:48:08,280
which is a joint set of name server host

2543
01:48:08,280 --> 01:48:10,920
names at both providers they both

2544
01:48:10,920 --> 01:48:13,139
observe this and then provide a B for

2545
01:48:13,139 --> 01:48:14,219
example would

2546
01:48:14,219 --> 01:48:16,500
do whatever like underscore multi The

2547
01:48:16,500 --> 01:48:18,780
Zone name.signal Dot and then the other

2548
01:48:18,780 --> 01:48:20,280
provider's host names which are taken

2549
01:48:20,280 --> 01:48:22,980
from the CNS record set query DNS key

2550
01:48:22,980 --> 01:48:25,380
and CDs records to DNS ACC validation on

2551
01:48:25,380 --> 01:48:27,060
that because that's assigned with the

2552
01:48:27,060 --> 01:48:29,219
provider A's keys because the subdomain

2553
01:48:29,219 --> 01:48:31,260
of their hostname and then you can do

2554
01:48:31,260 --> 01:48:33,659
the import everybody can observe what's

2555
01:48:33,659 --> 01:48:36,119
happening because provider B can look at

2556
01:48:36,119 --> 01:48:37,800
what provider a is publishing at the

2557
01:48:37,800 --> 01:48:39,719
child's Apex And when everybody has

2558
01:48:39,719 --> 01:48:41,940
observed convergence then you can go

2559
01:48:41,940 --> 01:48:44,460
ahead and update the NS record set to to

2560
01:48:44,460 --> 01:48:46,080
finish the onboarding of the new

2561
01:48:46,080 --> 01:48:47,300
provider

2562
01:48:47,300 --> 01:48:49,500
it's possible to just do that by

2563
01:48:49,500 --> 01:48:51,659
renaming the CNS record set to the NS

2564
01:48:51,659 --> 01:48:52,980
record set and overriding that and then

2565
01:48:52,980 --> 01:48:55,320
do csync or you can use Epp or whatever

2566
01:48:55,320 --> 01:48:57,119
you want it's it's an orthogonal problem

2567
01:48:57,119 --> 01:48:59,719
to this one

2568
01:49:00,060 --> 01:49:02,219
um yeah so final slide um the summary of

2569
01:49:02,219 --> 01:49:03,900
The Proposal is um that it solves The

2570
01:49:03,900 --> 01:49:05,760
multi-signer Exchange problem in a way

2571
01:49:05,760 --> 01:49:07,920
that has a few properties that I think

2572
01:49:07,920 --> 01:49:09,600
are interesting it's automated it's

2573
01:49:09,600 --> 01:49:11,400
authenticated it's in band it's explicit

2574
01:49:11,400 --> 01:49:13,739
about the ksk versus zsk questions so

2575
01:49:13,739 --> 01:49:15,840
there's no guessing involved by the

2576
01:49:15,840 --> 01:49:18,000
importing party it's comprehensive in

2577
01:49:18,000 --> 01:49:19,320
that it covers onboarding and

2578
01:49:19,320 --> 01:49:21,540
off-boarding and key roles and it's

2579
01:49:21,540 --> 01:49:23,340
minimal in the sense that it has a

2580
01:49:23,340 --> 01:49:24,960
signaling mechanism which is necessary

2581
01:49:24,960 --> 01:49:27,020
and it has a trigger

2582
01:49:27,020 --> 01:49:29,280
mechanism which is necessary but it

2583
01:49:29,280 --> 01:49:31,199
doesn't add any protocol change

2584
01:49:31,199 --> 01:49:33,780
resolvers don't need to learn anything

2585
01:49:33,780 --> 01:49:36,239
um and all of that stuff

2586
01:49:36,239 --> 01:49:37,679
um I'm not implying it's the solution

2587
01:49:37,679 --> 01:49:39,300
maybe there's a better one maybe nobody

2588
01:49:39,300 --> 01:49:40,560
needs a solution

2589
01:49:40,560 --> 01:49:41,219
um

2590
01:49:41,219 --> 01:49:42,540
it's just

2591
01:49:42,540 --> 01:49:43,980
what I came up with and I would be

2592
01:49:43,980 --> 01:49:47,059
interested in what people think

2593
01:49:47,159 --> 01:49:50,040
thank you sorry thank you Peter in the

2594
01:49:50,040 --> 01:49:52,560
queue Victor but we have two minutes for

2595
01:49:52,560 --> 01:49:57,080
questions for Q a so please be brief

2596
01:49:57,480 --> 01:50:01,020
um you haven't talked about uh ongoing

2597
01:50:01,020 --> 01:50:03,300
is it a scale rollovers from the

2598
01:50:03,300 --> 01:50:06,119
individual providers the uh the

2599
01:50:06,119 --> 01:50:07,739
customers then not involved in

2600
01:50:07,739 --> 01:50:10,320
publishing uh CNS records they might

2601
01:50:10,320 --> 01:50:12,960
have removed them but the operators will

2602
01:50:12,960 --> 01:50:15,179
still periodically roll their own set of

2603
01:50:15,179 --> 01:50:20,520
SKS how's the timing of that manage

2604
01:50:20,940 --> 01:50:23,839
um so

2605
01:50:26,280 --> 01:50:28,500
it appears to me but I'm not sure if I

2606
01:50:28,500 --> 01:50:31,020
thought it through fully that if one of

2607
01:50:31,020 --> 01:50:33,600
the provider does is zsk roll over then

2608
01:50:33,600 --> 01:50:35,219
it would be unsafe

2609
01:50:35,219 --> 01:50:36,900
um to allow the provider to do that

2610
01:50:36,900 --> 01:50:38,219
unilaterally

2611
01:50:38,219 --> 01:50:40,440
and you always need to have the Zone

2612
01:50:40,440 --> 01:50:43,080
owner approved kind of by creating the

2613
01:50:43,080 --> 01:50:44,880
CNS record and say okay that's fine go

2614
01:50:44,880 --> 01:50:46,679
ahead and change it I'm not sure if

2615
01:50:46,679 --> 01:50:48,420
that's true

2616
01:50:48,420 --> 01:50:50,400
um but no it seems to me like that now

2617
01:50:50,400 --> 01:50:51,900
if you're saying perhaps there is a way

2618
01:50:51,900 --> 01:50:54,000
of doing it unilaterally

2619
01:50:54,000 --> 01:50:56,040
yeah probably there is right because as

2620
01:50:56,040 --> 01:50:58,619
far as a an operator is in control of

2621
01:50:58,619 --> 01:51:00,540
their part of the CNS records but doing

2622
01:51:00,540 --> 01:51:03,000
this signaling stuff why not let them do

2623
01:51:03,000 --> 01:51:04,380
it

2624
01:51:04,380 --> 01:51:06,420
um yeah so I I know of no method of of

2625
01:51:06,420 --> 01:51:08,040
triggering that

2626
01:51:08,040 --> 01:51:10,020
um synchronization

2627
01:51:10,020 --> 01:51:12,780
um I think that's worth discussing

2628
01:51:12,780 --> 01:51:15,260
because providers will want to roll

2629
01:51:15,260 --> 01:51:18,780
zeta's case if they're the operator for

2630
01:51:18,780 --> 01:51:21,300
the customer's own in terms of just

2631
01:51:21,300 --> 01:51:24,360
making the signing go

2632
01:51:24,360 --> 01:51:25,679
yeah that's a good point do you have a

2633
01:51:25,679 --> 01:51:26,760
suggestion

2634
01:51:26,760 --> 01:51:28,800
otherwise uh no we should discuss it

2635
01:51:28,800 --> 01:51:31,639
later okay

2636
01:51:31,920 --> 01:51:34,320
thank you

2637
01:51:34,320 --> 01:51:36,420
yeah

2638
01:51:36,420 --> 01:51:38,580
since it's um a new draft you know you

2639
01:51:38,580 --> 01:51:41,580
know we should go ahead and uh

2640
01:51:41,580 --> 01:51:43,139
bring the discussion to the mailing list

2641
01:51:43,139 --> 01:51:45,960
looking forward to that yeah thank you

2642
01:51:45,960 --> 01:51:49,619
thank you thank you okay uh our final

2643
01:51:49,619 --> 01:51:53,820
presentation for today's tiru

2644
01:51:56,520 --> 01:51:57,199
um

2645
01:51:57,199 --> 01:52:00,500
there we are

2646
01:52:01,340 --> 01:52:04,920
all right sure

2647
01:52:04,920 --> 01:52:08,520
okay good morning everyone I'm thiru

2648
01:52:08,520 --> 01:52:10,440
I'll be I'm one of the co-authors of the

2649
01:52:10,440 --> 01:52:13,380
draft uh structured data for filter DNS

2650
01:52:13,380 --> 01:52:16,199
was presented at the last IDF uh next

2651
01:52:16,199 --> 01:52:17,460
slide please

2652
01:52:17,460 --> 01:52:18,480
uh

2653
01:52:18,480 --> 01:52:21,540
a quick recap it's it's the primary

2654
01:52:21,540 --> 01:52:23,639
purpose of the draft is to assist DNS

2655
01:52:23,639 --> 01:52:27,119
filter troubleshooting uh next slide uh

2656
01:52:27,119 --> 01:52:29,340
at the last idea of we got feedback with

2657
01:52:29,340 --> 01:52:31,800
regard to this craft was uh how would it

2658
01:52:31,800 --> 01:52:34,500
interrupt with the RPC servers in case

2659
01:52:34,500 --> 01:52:36,480
they don't upgrade themselves to support

2660
01:52:36,480 --> 01:52:39,900
this specification so we added a section

2661
01:52:39,900 --> 01:52:42,780
to address that specific comment next

2662
01:52:42,780 --> 01:52:45,000
slide

2663
01:52:45,000 --> 01:52:48,000
so RPC servers are the ones which uh in

2664
01:52:48,000 --> 01:52:49,800
case if they do DNS filtering they would

2665
01:52:49,800 --> 01:52:51,960
put an NXT domain response with uh

2666
01:52:51,960 --> 01:52:54,719
clearing the array bit uh in those cases

2667
01:52:54,719 --> 01:52:56,639
in case if the client is upgraded to

2668
01:52:56,639 --> 01:52:59,100
support this specification uh but the

2669
01:52:59,100 --> 01:53:00,540
server is not it would continue to

2670
01:53:00,540 --> 01:53:03,480
accept the next domain response uh but

2671
01:53:03,480 --> 01:53:06,000
let's imagine a case where a server is

2672
01:53:06,000 --> 01:53:07,739
also upgraded to support this

2673
01:53:07,739 --> 01:53:10,260
specification in that case uh the client

2674
01:53:10,260 --> 01:53:11,880
would learn the server's capability

2675
01:53:11,880 --> 01:53:16,199
using the resin foreign type that's

2676
01:53:16,199 --> 01:53:17,760
being discussed in the ad working group

2677
01:53:17,760 --> 01:53:20,219
and I will be presenting that in the ad

2678
01:53:20,219 --> 01:53:23,820
working group in the next uh meeting and

2679
01:53:23,820 --> 01:53:26,659
then the client includes the Ade uh

2680
01:53:26,659 --> 01:53:29,760
option in this pseudo record type to

2681
01:53:29,760 --> 01:53:31,860
tell that it's capable of understanding

2682
01:53:31,860 --> 01:53:35,280
the Ade response so with that the server

2683
01:53:35,280 --> 01:53:36,840
knows whether the client is indeed

2684
01:53:36,840 --> 01:53:39,360
capable of understanding the Ed option

2685
01:53:39,360 --> 01:53:41,760
or not so it decides whether to put an

2686
01:53:41,760 --> 01:53:44,940
NX domain response or send an ede option

2687
01:53:44,940 --> 01:53:48,360
where it can now pass the fields that

2688
01:53:48,360 --> 01:53:50,400
are being sent in the extra text field

2689
01:53:50,400 --> 01:53:54,239
to help troubleshooting

2690
01:53:54,239 --> 01:53:56,520
next slide

2691
01:53:56,520 --> 01:53:58,260
yeah I think we've been presenting this

2692
01:53:58,260 --> 01:54:00,420
graph for quite some time and uh we've

2693
01:54:00,420 --> 01:54:01,679
been addressing all the comments that

2694
01:54:01,679 --> 01:54:04,020
have been received so far and uh we

2695
01:54:04,020 --> 01:54:05,880
request for working group adoption yeah

2696
01:54:05,880 --> 01:54:07,679
thank you

2697
01:54:07,679 --> 01:54:12,119
so the documents did have uh received

2698
01:54:12,119 --> 01:54:14,760
some feedback from the mailing list

2699
01:54:14,760 --> 01:54:16,380
I understand there was also interest

2700
01:54:16,380 --> 01:54:19,440
from the industry yes

2701
01:54:19,440 --> 01:54:22,800
so are there any comments here in the

2702
01:54:22,800 --> 01:54:24,600
working group

2703
01:54:24,600 --> 01:54:27,239
we also put it on a working or a chair

2704
01:54:27,239 --> 01:54:29,340
slide that this document might be up for

2705
01:54:29,340 --> 01:54:31,679
a working group adoption we will move

2706
01:54:31,679 --> 01:54:33,420
that to the mailing list and schedule it

2707
01:54:33,420 --> 01:54:36,119
we will coordinate it with the authors

2708
01:54:36,119 --> 01:54:37,860
yeah we have server implementation of

2709
01:54:37,860 --> 01:54:40,380
this I spoke to Apple and Microsoft and

2710
01:54:40,380 --> 01:54:42,840
they were interested in this so

2711
01:54:42,840 --> 01:54:44,820
thank you

2712
01:54:44,820 --> 01:54:46,139
okay

2713
01:54:46,139 --> 01:54:47,699
thank you

2714
01:54:47,699 --> 01:54:50,780
that's it thank you

2715
01:54:52,440 --> 01:54:54,600
um okay

2716
01:54:54,600 --> 01:54:57,119
and that's what we have time for today

2717
01:54:57,119 --> 01:55:00,420
thanks everybody in the room and out in

2718
01:55:00,420 --> 01:55:02,040
radio land

2719
01:55:02,040 --> 01:55:04,619
and um some of these things will will

2720
01:55:04,619 --> 01:55:06,600
take to further discussion on the

2721
01:55:06,600 --> 01:55:09,179
mailing list and um looking forward to

2722
01:55:09,179 --> 01:55:10,920
seeing folks

2723
01:55:10,920 --> 01:55:14,280
yeah thank you so apologies to Shivan we

2724
01:55:14,280 --> 01:55:16,320
we don't have enough time to give you

2725
01:55:16,320 --> 01:55:18,840
the floor but please working group reach

2726
01:55:18,840 --> 01:55:21,060
the updated document he has a pull

2727
01:55:21,060 --> 01:55:23,699
request ready

2728
01:55:23,699 --> 01:55:25,800
um this is sorry the domain verification

2729
01:55:25,800 --> 01:55:27,480
draft

2730
01:55:27,480 --> 01:55:29,460
um you want to add something and thank

2731
01:55:29,460 --> 01:55:32,340
you Tim for the dog pictures

2732
01:55:32,340 --> 01:55:34,260
so thank you all thank you for your

2733
01:55:34,260 --> 01:55:35,820
participation contribution to the

2734
01:55:35,820 --> 01:55:38,520
working group see you uh next in

2735
01:55:38,520 --> 01:55:42,719
Yokohama or online bye

2736
01:55:58,500 --> 01:56:01,500
foreign

