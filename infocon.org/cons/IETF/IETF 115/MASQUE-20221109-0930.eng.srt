1
00:00:09,679 --> 00:00:13,099
all is good

2
00:00:27,199 --> 00:00:31,460
oh thank you very much

3
00:00:31,619 --> 00:00:34,099
hello

4
00:00:35,399 --> 00:00:38,059
there you go

5
00:00:43,530 --> 00:00:46,600
[Music]

6
00:00:56,820 --> 00:00:59,899
like the mic stand

7
00:01:01,140 --> 00:01:03,140
s

8
00:01:07,560 --> 00:01:09,799
foreign

9
00:01:34,439 --> 00:01:37,100
yes

10
00:02:07,680 --> 00:02:10,160
foreign

11
00:02:47,940 --> 00:02:50,780
some job

12
00:03:00,599 --> 00:03:03,599
yes

13
00:03:21,120 --> 00:03:23,659
itself

14
00:03:56,540 --> 00:03:59,540
thank you

15
00:04:26,639 --> 00:04:28,199
all right we will get started in a

16
00:04:28,199 --> 00:04:30,540
minute we're waiting on some elevators

17
00:04:30,540 --> 00:04:31,860
for some people

18
00:04:31,860 --> 00:04:34,160
foreign

19
00:04:41,699 --> 00:04:44,960
that's a good way to think of it

20
00:05:03,900 --> 00:05:05,160
all right we'll give it about 60 more

21
00:05:05,160 --> 00:05:06,840
seconds and then we have a fairly packed

22
00:05:06,840 --> 00:05:08,520
agenda so we will

23
00:05:08,520 --> 00:05:11,900
started chucking through there

24
00:05:46,860 --> 00:05:49,860
foreign

25
00:06:11,180 --> 00:06:16,020
welcome to mask at ietf 115.

26
00:06:16,020 --> 00:06:18,180
this is yet another session that is

27
00:06:18,180 --> 00:06:20,340
being recorded uh at this point in the

28
00:06:20,340 --> 00:06:22,800
week you probably uh know how to do this

29
00:06:22,800 --> 00:06:25,259
but if you don't use the QR code over

30
00:06:25,259 --> 00:06:26,940
there to bring up the on-site tool if

31
00:06:26,940 --> 00:06:29,100
you're in the room if you're not in the

32
00:06:29,100 --> 00:06:30,000
room and you're hearing this you've

33
00:06:30,000 --> 00:06:32,880
already figured that much out and uh you

34
00:06:32,880 --> 00:06:34,319
can enter the queue by raising your hand

35
00:06:34,319 --> 00:06:36,479
leave it by lowering your hand and when

36
00:06:36,479 --> 00:06:38,220
it's time to speak please do speak State

37
00:06:38,220 --> 00:06:41,460
your full name before speaking

38
00:06:41,460 --> 00:06:44,340
this is the ietf note rail please take

39
00:06:44,340 --> 00:06:46,080
time to read it these are the terms by

40
00:06:46,080 --> 00:06:48,300
which we participate in the ITF

41
00:06:48,300 --> 00:06:50,460
also note that this includes a code of

42
00:06:50,460 --> 00:06:52,440
conduct so please be respectful of each

43
00:06:52,440 --> 00:06:54,620
other

44
00:06:55,740 --> 00:06:57,660
if you're in the room we also have a

45
00:06:57,660 --> 00:07:00,300
mask policy at iitf115 so you need to be

46
00:07:00,300 --> 00:07:02,039
wearing a mask at all times in the room

47
00:07:02,039 --> 00:07:04,020
unless you are actively speaking into a

48
00:07:04,020 --> 00:07:06,440
microphone

49
00:07:10,759 --> 00:07:13,259
we have some fun helpful links notably

50
00:07:13,259 --> 00:07:15,720
we've moved jabber over to zulup if that

51
00:07:15,720 --> 00:07:17,100
link doesn't work let me know and we'll

52
00:07:17,100 --> 00:07:19,919
go figure out a better way to link to it

53
00:07:19,919 --> 00:07:21,120
thank you

54
00:07:21,120 --> 00:07:24,060
and we have an absolutely packed agenda

55
00:07:24,060 --> 00:07:25,979
for today so we're going to start off by

56
00:07:25,979 --> 00:07:28,020
talking about our remaining working

57
00:07:28,020 --> 00:07:30,539
group document which is connect IP

58
00:07:30,539 --> 00:07:33,300
we're then going to work our way towards

59
00:07:33,300 --> 00:07:35,220
discussing some proposed text for a

60
00:07:35,220 --> 00:07:37,620
recharter and on the way to that we're

61
00:07:37,620 --> 00:07:39,660
going to run through a fairly long list

62
00:07:39,660 --> 00:07:41,639
of other proposed extensions and

63
00:07:41,639 --> 00:07:43,919
additional work and part of the goal of

64
00:07:43,919 --> 00:07:46,199
this is to take a look at these items

65
00:07:46,199 --> 00:07:49,139
and say where do we draw this line where

66
00:07:49,139 --> 00:07:51,060
do we say yes these are things that we

67
00:07:51,060 --> 00:07:52,860
want to be in scope and which things do

68
00:07:52,860 --> 00:07:54,780
we want to be out of scope so we're

69
00:07:54,780 --> 00:07:57,060
going to take a quick tour

70
00:07:57,060 --> 00:07:59,639
through a long list of things some of

71
00:07:59,639 --> 00:08:00,840
which we've talked about before and

72
00:08:00,840 --> 00:08:01,740
we'll talk about those a little more

73
00:08:01,740 --> 00:08:05,580
briefly now some of them are new

74
00:08:05,580 --> 00:08:08,699
before we do that however uh connectip

75
00:08:08,699 --> 00:08:11,039
is our last remaining item because our

76
00:08:11,039 --> 00:08:13,800
first two items are now actually rfcs so

77
00:08:13,800 --> 00:08:17,580
huge congratulations uh 9297 is HTTP

78
00:08:17,580 --> 00:08:19,080
datagrams in the capsule protocol and

79
00:08:19,080 --> 00:08:22,139
92.98 is connect IP which we named proxy

80
00:08:22,139 --> 00:08:24,599
and UDP and IP and http

81
00:08:24,599 --> 00:08:26,759
so very nicely done thank you to

82
00:08:26,759 --> 00:08:27,780
everybody for all of the awesome

83
00:08:27,780 --> 00:08:29,819
feedback and super hard work

84
00:08:29,819 --> 00:08:34,459
and yeah let's uh give ourselves a hand

85
00:08:34,570 --> 00:08:37,789
[Applause]

86
00:08:39,000 --> 00:08:41,640
with that uh Alex I believe you are up

87
00:08:41,640 --> 00:08:44,839
with connect IP

88
00:08:49,560 --> 00:08:51,600
ad

89
00:08:51,600 --> 00:08:54,600
yes

90
00:08:55,260 --> 00:08:57,720
I can I granted your request but I can

91
00:08:57,720 --> 00:08:59,700
steal it from YouTube if you want that

92
00:08:59,700 --> 00:09:02,180
works too

93
00:09:09,959 --> 00:09:13,860
hello everyone can you hear me okay

94
00:09:13,860 --> 00:09:16,320
um excellent I am Alex tremachowsky I'm

95
00:09:16,320 --> 00:09:18,660
one of the co-authors of the mass

96
00:09:18,660 --> 00:09:21,959
connect IP draft I expect none of you

97
00:09:21,959 --> 00:09:23,700
are surprised to see that we are

98
00:09:23,700 --> 00:09:25,080
presenting this today because we've been

99
00:09:25,080 --> 00:09:26,279
talking about it for the last couple of

100
00:09:26,279 --> 00:09:27,300
sessions

101
00:09:27,300 --> 00:09:30,380
next slide please

102
00:09:31,200 --> 00:09:32,700
um so I wanted to start out by talking

103
00:09:32,700 --> 00:09:35,519
about our progress from the hackathon we

104
00:09:35,519 --> 00:09:37,980
had a very packed two days in which we

105
00:09:37,980 --> 00:09:40,140
sat next to the Erickson folks and some

106
00:09:40,140 --> 00:09:41,580
of the Apple folks who were working with

107
00:09:41,580 --> 00:09:44,580
us and we managed to get a every client

108
00:09:44,580 --> 00:09:46,620
that exists talking to every server that

109
00:09:46,620 --> 00:09:49,860
exists which is amazing news because at

110
00:09:49,860 --> 00:09:52,019
the beginning of Saturday morning this

111
00:09:52,019 --> 00:09:55,399
entire Matrix would have been empty

112
00:09:55,620 --> 00:09:57,420
um this is very cool um unfortunately

113
00:09:57,420 --> 00:09:59,279
our friends at Apple did not have a

114
00:09:59,279 --> 00:10:00,660
server implementation for us to test

115
00:10:00,660 --> 00:10:03,000
against which is why the Apple column is

116
00:10:03,000 --> 00:10:05,820
all gray boxes but you know given the

117
00:10:05,820 --> 00:10:07,740
fact that we had three clients and two

118
00:10:07,740 --> 00:10:12,320
servers I think this is amazing progress

119
00:10:13,380 --> 00:10:16,320
next slide please

120
00:10:16,320 --> 00:10:18,779
um so what actually enabled us to get

121
00:10:18,779 --> 00:10:21,120
here is if you actually go and look at

122
00:10:21,120 --> 00:10:25,260
the GitHub issues prior to this session

123
00:10:25,260 --> 00:10:27,959
uh at the end well sort of two weeks

124
00:10:27,959 --> 00:10:31,019
after ietf 114 in Philadelphia we had

125
00:10:31,019 --> 00:10:33,120
about seven issues that were open and we

126
00:10:33,120 --> 00:10:34,380
were discussing

127
00:10:34,380 --> 00:10:36,480
um as a result of that meeting and I am

128
00:10:36,480 --> 00:10:38,580
very pleased to say that all seven of

129
00:10:38,580 --> 00:10:40,800
them are currently closed meaning that

130
00:10:40,800 --> 00:10:42,779
there are no outstanding issues on the

131
00:10:42,779 --> 00:10:44,040
draft

132
00:10:44,040 --> 00:10:46,019
um so I'd like to go through and detail

133
00:10:46,019 --> 00:10:48,360
what all of these different changes were

134
00:10:48,360 --> 00:10:51,120
next slide please

135
00:10:51,120 --> 00:10:54,420
um so the first thing was around MTU one

136
00:10:54,420 --> 00:10:55,620
of the things which is very interesting

137
00:10:55,620 --> 00:10:58,560
of course is that MTU tends to be both a

138
00:10:58,560 --> 00:11:00,720
hop by hop but also end-to-end property

139
00:11:00,720 --> 00:11:03,240
and when we add all of these different

140
00:11:03,240 --> 00:11:05,160
layers of encapsulation we are of course

141
00:11:05,160 --> 00:11:07,220
are taking away the MTU

142
00:11:07,220 --> 00:11:09,839
IPv6 of course specifies that we want to

143
00:11:09,839 --> 00:11:12,480
have a minimum of 1280 byte MTU so we

144
00:11:12,480 --> 00:11:13,740
have some interesting questions about

145
00:11:13,740 --> 00:11:16,019
what to do if you cannot

146
00:11:16,019 --> 00:11:18,660
cannot support that so one of the things

147
00:11:18,660 --> 00:11:20,880
that we added was some text that

148
00:11:20,880 --> 00:11:25,019
clarified that the icmpv6 method that we

149
00:11:25,019 --> 00:11:27,240
described that was previously optional

150
00:11:27,240 --> 00:11:29,880
must be used when intermediaries are in

151
00:11:29,880 --> 00:11:31,200
use unless you have out-of-band

152
00:11:31,200 --> 00:11:32,760
information but the path MTU is

153
00:11:32,760 --> 00:11:35,399
sufficient we also added a bit of text

154
00:11:35,399 --> 00:11:37,380
that says that you must abort a connect

155
00:11:37,380 --> 00:11:39,360
IP stream if the quick MTU does not

156
00:11:39,360 --> 00:11:41,100
allow sending 1280 bytes if you're using

157
00:11:41,100 --> 00:11:43,860
IPv6 so this basically clarified a whole

158
00:11:43,860 --> 00:11:45,000
bunch of different edge cases that

159
00:11:45,000 --> 00:11:47,459
previously were there

160
00:11:47,459 --> 00:11:49,019
um of course if you want to use streams

161
00:11:49,019 --> 00:11:50,220
that would be fine you just can't do

162
00:11:50,220 --> 00:11:54,140
this over datagrams next slide please

163
00:11:54,140 --> 00:11:56,760
we also clarified some details around

164
00:11:56,760 --> 00:12:00,120
some icmp errors so previously we just

165
00:12:00,120 --> 00:12:01,560
had a small paragraph in the document

166
00:12:01,560 --> 00:12:05,220
that said go look at RFC 4443 and didn't

167
00:12:05,220 --> 00:12:06,600
really provide any additional

168
00:12:06,600 --> 00:12:08,100
information as to how you would actually

169
00:12:08,100 --> 00:12:10,980
use the information in 4443 in these

170
00:12:10,980 --> 00:12:12,120
contexts

171
00:12:12,120 --> 00:12:13,320
so

172
00:12:13,320 --> 00:12:15,360
after working group pointed this out we

173
00:12:15,360 --> 00:12:17,220
went back and added some text that said

174
00:12:17,220 --> 00:12:20,640
you know go look at 792 look at 4443 and

175
00:12:20,640 --> 00:12:22,260
here's some specific guidance on which

176
00:12:22,260 --> 00:12:24,240
error codes to use when for example you

177
00:12:24,240 --> 00:12:26,399
get an invalid Source address or an

178
00:12:26,399 --> 00:12:28,320
unwritable destination or practice

179
00:12:28,320 --> 00:12:30,959
cannot fit inside the MTU

180
00:12:30,959 --> 00:12:32,820
um we also added another clarification

181
00:12:32,820 --> 00:12:34,200
which is one that came up from

182
00:12:34,200 --> 00:12:35,399
Philadelphia

183
00:12:35,399 --> 00:12:37,920
um last session which was what happens

184
00:12:37,920 --> 00:12:40,800
if you're using iproto scoping with

185
00:12:40,800 --> 00:12:43,560
connect IP and you haven't asked for

186
00:12:43,560 --> 00:12:45,540
icmp packets

187
00:12:45,540 --> 00:12:47,519
um we've said well you probably should

188
00:12:47,519 --> 00:12:50,160
you should ask for icmp

189
00:12:50,160 --> 00:12:51,360
um

190
00:12:51,360 --> 00:12:52,740
and we also but you also need to be

191
00:12:52,740 --> 00:12:55,079
prepared to also receive them if you're

192
00:12:55,079 --> 00:12:56,880
not using any route advertisement

193
00:12:56,880 --> 00:12:58,920
capsules then there are some

194
00:12:58,920 --> 00:13:00,839
recommendations in the text for how they

195
00:13:00,839 --> 00:13:03,680
connect IP proxy should go and actually

196
00:13:03,680 --> 00:13:06,120
grab out those signals

197
00:13:06,120 --> 00:13:09,060
directly to learn those error codes

198
00:13:09,060 --> 00:13:11,459
so that again helps handle how a whole

199
00:13:11,459 --> 00:13:13,440
bunch of Errors previously were a little

200
00:13:13,440 --> 00:13:15,079
bit ambiguous about

201
00:13:15,079 --> 00:13:18,979
next slide please

202
00:13:19,680 --> 00:13:21,600
um another feature that was added which

203
00:13:21,600 --> 00:13:23,639
was found when we were working through

204
00:13:23,639 --> 00:13:26,279
this as a previously connect IP the

205
00:13:26,279 --> 00:13:28,139
address request capsule

206
00:13:28,139 --> 00:13:30,120
basically provided a mechanism for you

207
00:13:30,120 --> 00:13:31,920
to say I want this specific IP address

208
00:13:31,920 --> 00:13:34,079
or this specific subnet

209
00:13:34,079 --> 00:13:36,060
but it didn't have a way for easily

210
00:13:36,060 --> 00:13:38,720
specifying we'll just give me an address

211
00:13:38,720 --> 00:13:40,560
but it turns out this was already

212
00:13:40,560 --> 00:13:42,000
something we had planned ahead for but

213
00:13:42,000 --> 00:13:43,500
we had just forgotten to write text on

214
00:13:43,500 --> 00:13:45,720
you basically go and request the all

215
00:13:45,720 --> 00:13:47,760
zeros address with a subnet mask of the

216
00:13:47,760 --> 00:13:49,680
desired size so for example if you're an

217
00:13:49,680 --> 00:13:52,440
ipv4 and you want an entire slash 24

218
00:13:52,440 --> 00:13:54,260
subnet you would ask for

219
00:13:54,260 --> 00:13:57,480
0.0.0.0 24 and the server would give you

220
00:13:57,480 --> 00:13:59,220
back some slash 24 if it had one

221
00:13:59,220 --> 00:14:01,139
available this is obviously much more

222
00:14:01,139 --> 00:14:04,019
usable in IPv6 land than it is an ipv4

223
00:14:04,019 --> 00:14:06,839
land but hey you can ask for individual

224
00:14:06,839 --> 00:14:09,060
addresses the same way

225
00:14:09,060 --> 00:14:11,399
um as always a mass connect IP Server

226
00:14:11,399 --> 00:14:15,120
doesn't need to respond to you

227
00:14:15,120 --> 00:14:16,620
successfully with this request it is

228
00:14:16,620 --> 00:14:17,639
always allowed to say well I can't

229
00:14:17,639 --> 00:14:19,980
satisfy that but at least within any

230
00:14:19,980 --> 00:14:21,240
address assuming that there's actually

231
00:14:21,240 --> 00:14:22,740
IP resources available we should always

232
00:14:22,740 --> 00:14:23,880
be able to give you back what you ask

233
00:14:23,880 --> 00:14:25,260
for

234
00:14:25,260 --> 00:14:28,939
next slide please

235
00:14:28,980 --> 00:14:30,360
um another issue which was quite

236
00:14:30,360 --> 00:14:34,560
contentious at 114 was

237
00:14:34,560 --> 00:14:36,959
the cross product of the fact that you

238
00:14:36,959 --> 00:14:38,760
can have unsolicited address assignment

239
00:14:38,760 --> 00:14:40,320
capsules be sent

240
00:14:40,320 --> 00:14:42,660
but also that we don't necessarily

241
00:14:42,660 --> 00:14:46,079
guarantee a reply to any sort of uh IP

242
00:14:46,079 --> 00:14:48,480
address request capsule and also what

243
00:14:48,480 --> 00:14:50,639
happens if you need some address which

244
00:14:50,639 --> 00:14:52,440
you do in order to send any amount of

245
00:14:52,440 --> 00:14:54,720
packets and Martin Thompson rightly

246
00:14:54,720 --> 00:14:57,480
pointed out that this probably means you

247
00:14:57,480 --> 00:14:59,339
have to wait for a timeout in the

248
00:14:59,339 --> 00:15:01,380
current scheme in order to be able to

249
00:15:01,380 --> 00:15:03,420
start sending your first flight

250
00:15:03,420 --> 00:15:05,699
so after a lot of back and forth we

251
00:15:05,699 --> 00:15:07,380
concluded about the best way to fix this

252
00:15:07,380 --> 00:15:10,800
was to add requests and response IDs to

253
00:15:10,800 --> 00:15:12,899
these capsules so that that way you can

254
00:15:12,899 --> 00:15:15,860
tell which address assignment response

255
00:15:15,860 --> 00:15:17,579
correlates with the different requests

256
00:15:17,579 --> 00:15:19,019
that you send so now you can easily tell

257
00:15:19,019 --> 00:15:20,820
apart oh the server sent me an

258
00:15:20,820 --> 00:15:22,320
unsolicited address assigned that I

259
00:15:22,320 --> 00:15:24,120
didn't ask for so I can only start using

260
00:15:24,120 --> 00:15:25,380
it it might not be the one I asked for

261
00:15:25,380 --> 00:15:27,420
but hey I can do something

262
00:15:27,420 --> 00:15:29,100
so now you don't have to have a timeout

263
00:15:29,100 --> 00:15:30,899
in order to wait for some addresses sign

264
00:15:30,899 --> 00:15:32,279
capsule that will never arrive for

265
00:15:32,279 --> 00:15:34,260
example

266
00:15:34,260 --> 00:15:37,260
next slide please

267
00:15:37,260 --> 00:15:39,899
another thing that was brought up was do

268
00:15:39,899 --> 00:15:42,060
we want to split the address request and

269
00:15:42,060 --> 00:15:43,320
address assigned capsules which

270
00:15:43,320 --> 00:15:46,440
currently support both V4 and V6 fields

271
00:15:46,440 --> 00:15:48,959
in two separate capsules and after a

272
00:15:48,959 --> 00:15:50,399
bunch of discussion amongst uh

273
00:15:50,399 --> 00:15:52,079
contributors and the editors of the

274
00:15:52,079 --> 00:15:54,300
draft we basically concluded that they

275
00:15:54,300 --> 00:15:55,920
didn't seem to have any benefit to do

276
00:15:55,920 --> 00:15:58,740
the split so we decided to leave it as

277
00:15:58,740 --> 00:16:00,480
is

278
00:16:00,480 --> 00:16:02,880
uh next slide please

279
00:16:02,880 --> 00:16:05,220
so um at this point

280
00:16:05,220 --> 00:16:06,360
you probably realize that we went

281
00:16:06,360 --> 00:16:07,860
through this presentation fairly quickly

282
00:16:07,860 --> 00:16:09,600
because no one has come up to the queue

283
00:16:09,600 --> 00:16:12,420
and asked questions which means I have a

284
00:16:12,420 --> 00:16:14,040
question for the working group which is

285
00:16:14,040 --> 00:16:16,500
uh do we think we are ready to proceed

286
00:16:16,500 --> 00:16:18,480
to working group last call um I

287
00:16:18,480 --> 00:16:20,160
personally think that we have made

288
00:16:20,160 --> 00:16:22,079
excellent progress we have no open

289
00:16:22,079 --> 00:16:24,420
issues and I'm not sure what else we

290
00:16:24,420 --> 00:16:27,000
could do so if anyone else would like to

291
00:16:27,000 --> 00:16:28,440
go into the queue and offer an opinion

292
00:16:28,440 --> 00:16:31,220
I'd love to hear it

293
00:16:33,959 --> 00:16:37,139
David schenazi mask Enthusiast with an

294
00:16:37,139 --> 00:16:38,100
opinion

295
00:16:38,100 --> 00:16:41,100
the yeah the the draft was in good shape

296
00:16:41,100 --> 00:16:42,899
we made like really good progress at the

297
00:16:42,899 --> 00:16:44,579
last ITF

298
00:16:44,579 --> 00:16:48,420
um and we were all thinking well yeah

299
00:16:48,420 --> 00:16:50,940
the text wise this seems good but you

300
00:16:50,940 --> 00:16:52,019
know

301
00:16:52,019 --> 00:16:53,820
um let's see if it actually works before

302
00:16:53,820 --> 00:16:55,800
we go any further

303
00:16:55,800 --> 00:16:58,500
and it was quite great at the hackathon

304
00:16:58,500 --> 00:17:00,839
uh this weekend to see that like some of

305
00:17:00,839 --> 00:17:03,360
the design choices that we made ended up

306
00:17:03,360 --> 00:17:05,040
being even better than we thought so for

307
00:17:05,040 --> 00:17:08,339
example the like let's just use icmp

308
00:17:08,339 --> 00:17:09,660
version

309
00:17:09,660 --> 00:17:11,699
uh we realized that we got that feature

310
00:17:11,699 --> 00:17:13,500
for free because we have the kernel

311
00:17:13,500 --> 00:17:15,359
taking care of that for us so that was

312
00:17:15,359 --> 00:17:17,760
kind of nice uh of like why are you

313
00:17:17,760 --> 00:17:20,040
sending me this oh oh that's an icmp

314
00:17:20,040 --> 00:17:21,540
packet oh great we don't need to

315
00:17:21,540 --> 00:17:22,980
implement anything that's automatic

316
00:17:22,980 --> 00:17:25,799
things like that uh and the oh what's

317
00:17:25,799 --> 00:17:28,919
going on here with anyway so we're

318
00:17:28,919 --> 00:17:31,020
pretty uh I'm personally very happy with

319
00:17:31,020 --> 00:17:32,640
where things at I think maybe the

320
00:17:32,640 --> 00:17:35,419
editors can do an editorial pass before

321
00:17:35,419 --> 00:17:38,460
uh we launch the working group last call

322
00:17:38,460 --> 00:17:39,960
but maybe that but I think that's the

323
00:17:39,960 --> 00:17:41,460
only thing there aren't any open issues

324
00:17:41,460 --> 00:17:43,200
and that'll be a good way to motivate

325
00:17:43,200 --> 00:17:45,419
people to to read the draft so maybe

326
00:17:45,419 --> 00:17:47,640
give us a few weeks to do editorial work

327
00:17:47,640 --> 00:17:49,799
and then we're ready for that I think

328
00:17:49,799 --> 00:17:52,740
and I will also say the hackathon almost

329
00:17:52,740 --> 00:17:54,360
all of the issues that we ran into on

330
00:17:54,360 --> 00:17:57,600
interop weren't on connect IP they were

331
00:17:57,600 --> 00:17:59,340
like oh you screwed up your Linux

332
00:17:59,340 --> 00:18:02,280
routing firewall or oh

333
00:18:02,280 --> 00:18:04,200
your certificate's not a valid x509

334
00:18:04,200 --> 00:18:06,299
search which is you know the best kind

335
00:18:06,299 --> 00:18:07,500
of problems to have things that we

336
00:18:07,500 --> 00:18:08,700
should have been able to fix going into

337
00:18:08,700 --> 00:18:10,740
it anyway

338
00:18:10,740 --> 00:18:13,620
yeah I think we had one instance of oh

339
00:18:13,620 --> 00:18:15,000
right you didn't update to this version

340
00:18:15,000 --> 00:18:16,740
of the draft for the capsule types and

341
00:18:16,740 --> 00:18:18,500
then everything else was

342
00:18:18,500 --> 00:18:21,419
iptables die die die

343
00:18:21,419 --> 00:18:22,980
um but then we got it working

344
00:18:22,980 --> 00:18:25,039
foreign

345
00:18:25,039 --> 00:18:27,900
Google and uh maskady

346
00:18:27,900 --> 00:18:28,559
um

347
00:18:28,559 --> 00:18:30,660
thanks for your uh to everyone for the

348
00:18:30,660 --> 00:18:32,160
diligent work on this seems like you're

349
00:18:32,160 --> 00:18:34,799
very efficiently you know solving the

350
00:18:34,799 --> 00:18:36,179
resulting issues

351
00:18:36,179 --> 00:18:37,919
um I wonder if this might be a good time

352
00:18:37,919 --> 00:18:39,960
since you've figured out how to spell

353
00:18:39,960 --> 00:18:41,580
everything to

354
00:18:41,580 --> 00:18:44,280
um maybe do it early into area review

355
00:18:44,280 --> 00:18:46,260
So to avoid issues coming up in ietf

356
00:18:46,260 --> 00:18:47,220
last call

357
00:18:47,220 --> 00:18:49,140
I mean I'm fairly optimistic that it'll

358
00:18:49,140 --> 00:18:51,600
be fine but um it's always a good thing

359
00:18:51,600 --> 00:18:53,580
to get it done

360
00:18:53,580 --> 00:18:56,039
yeah that would be fine thank you for

361
00:18:56,039 --> 00:18:57,720
the recommendation Martin

362
00:18:57,720 --> 00:19:00,240
you know we can run those in parallel

363
00:19:00,240 --> 00:19:03,740
Lorenzo is up next

364
00:19:10,320 --> 00:19:12,539
uh lorensically the Android

365
00:19:12,539 --> 00:19:14,580
um so

366
00:19:14,580 --> 00:19:16,320
I haven't read the draft I was just

367
00:19:16,320 --> 00:19:19,020
reading it now yes shoot me now but that

368
00:19:19,020 --> 00:19:21,120
gives me a unique perspective of being

369
00:19:21,120 --> 00:19:23,400
able to ask a generic question

370
00:19:23,400 --> 00:19:24,900
um the question is this

371
00:19:24,900 --> 00:19:26,760
um it this feels like a really sort of

372
00:19:26,760 --> 00:19:29,400
like the level thing low layer thing and

373
00:19:29,400 --> 00:19:31,200
one thing that we have unfortunately in

374
00:19:31,200 --> 00:19:33,419
Android is that applications use the BSD

375
00:19:33,419 --> 00:19:35,760
sockets API very extensively and there's

376
00:19:35,760 --> 00:19:37,260
a lot of warts in there like dual stack

377
00:19:37,260 --> 00:19:38,880
sockets and you know automatic

378
00:19:38,880 --> 00:19:40,679
assignments on buying a lot of

379
00:19:40,679 --> 00:19:42,720
assumptions that apps make

380
00:19:42,720 --> 00:19:44,760
my question which is

381
00:19:44,760 --> 00:19:46,620
super generic is

382
00:19:46,620 --> 00:19:49,380
has anyone looked a little bit at how to

383
00:19:49,380 --> 00:19:50,940
map the sort of semantics of the system

384
00:19:50,940 --> 00:19:52,860
calls that apps use like bind or connect

385
00:19:52,860 --> 00:19:55,679
to this um this is very packet oriented

386
00:19:55,679 --> 00:19:57,419
right um thank you very much that is an

387
00:19:57,419 --> 00:19:58,440
amazing question

388
00:19:58,440 --> 00:20:01,799
um so there's two ways to use connect IP

389
00:20:01,799 --> 00:20:03,780
um the first of which is this is more

390
00:20:03,780 --> 00:20:05,640
like a traditional VPN with a virtual

391
00:20:05,640 --> 00:20:08,039
Network device where the individual

392
00:20:08,039 --> 00:20:09,780
applications don't have to worry about

393
00:20:09,780 --> 00:20:12,360
this and in the case that we have today

394
00:20:12,360 --> 00:20:14,640
which is I think

395
00:20:14,640 --> 00:20:15,840
um how you know one of the Google

396
00:20:15,840 --> 00:20:17,340
implementations that we interoperated

397
00:20:17,340 --> 00:20:18,720
with worked it like literally brought up

398
00:20:18,720 --> 00:20:21,419
Linux 10 devices on the client side and

399
00:20:21,419 --> 00:20:23,820
basically you know we didn't actually do

400
00:20:23,820 --> 00:20:25,260
net link to set the routes but you can

401
00:20:25,260 --> 00:20:27,059
go and you know set your routes to go

402
00:20:27,059 --> 00:20:29,039
through this device and all applications

403
00:20:29,039 --> 00:20:30,299
which were making requests are handling

404
00:20:30,299 --> 00:20:31,919
responses naturally have their packets

405
00:20:31,919 --> 00:20:33,120
flow through this device by the kernel

406
00:20:33,120 --> 00:20:34,620
so you assign an IP address and

407
00:20:34,620 --> 00:20:35,820
everything at the beginning and then you

408
00:20:35,820 --> 00:20:37,320
just leave it absolutely it just shows

409
00:20:37,320 --> 00:20:38,760
up as a regular Linux network interface

410
00:20:38,760 --> 00:20:40,200
so none of the apps have to know that

411
00:20:40,200 --> 00:20:42,240
this happens to be backed by connect.p

412
00:20:42,240 --> 00:20:44,940
the other way of using it is when you're

413
00:20:44,940 --> 00:20:47,640
doing more direct flows yourself which

414
00:20:47,640 --> 00:20:49,380
is where a lot of Ip protocol scoping

415
00:20:49,380 --> 00:20:50,460
and a whole bunch of other things happen

416
00:20:50,460 --> 00:20:52,020
where for example if you have a user

417
00:20:52,020 --> 00:20:52,919
space stack which is already doing

418
00:20:52,919 --> 00:20:55,200
packaging such as a quick stack and you

419
00:20:55,200 --> 00:20:56,340
want to do some sort of interesting

420
00:20:56,340 --> 00:20:57,900
tunneling you can use that mode directly

421
00:20:57,900 --> 00:20:59,100
and you don't necessarily need a ton

422
00:20:59,100 --> 00:21:02,280
device we implemented that as well where

423
00:21:02,280 --> 00:21:03,840
we know we were going and doing fetches

424
00:21:03,840 --> 00:21:05,820
of you know example.com directly

425
00:21:05,820 --> 00:21:07,620
encapsulated through a mass connect IP

426
00:21:07,620 --> 00:21:09,900
stream but that usually requires that

427
00:21:09,900 --> 00:21:11,760
your application is actually aware of

428
00:21:11,760 --> 00:21:14,640
that mode oh yeah so it wouldn't be

429
00:21:14,640 --> 00:21:16,919
great for TCP you would need to have

430
00:21:16,919 --> 00:21:18,600
like a user space DCP stack if you want

431
00:21:18,600 --> 00:21:20,520
it to work that way but but this is by

432
00:21:20,520 --> 00:21:22,260
Design oh yeah that's why we have

433
00:21:22,260 --> 00:21:24,480
connect and connect UDP as well I'm sort

434
00:21:24,480 --> 00:21:26,280
of wondering how

435
00:21:26,280 --> 00:21:28,620
yeah I guess in the second mode I guess

436
00:21:28,620 --> 00:21:30,360
the first mode yeah it makes sense I

437
00:21:30,360 --> 00:21:31,620
guess the second mode I'm wondering is

438
00:21:31,620 --> 00:21:33,240
look you know do we have for example

439
00:21:33,240 --> 00:21:34,799
like how do we know that anything using

440
00:21:34,799 --> 00:21:37,140
a BSD sockets API that this protocol is

441
00:21:37,140 --> 00:21:39,659
is expressive enough to to support that

442
00:21:39,659 --> 00:21:42,360
do we have like an app that like like an

443
00:21:42,360 --> 00:21:44,460
old trivial app that was tried like you

444
00:21:44,460 --> 00:21:46,620
tried to Port it right like you you took

445
00:21:46,620 --> 00:21:48,360
all the instances of bind or connect and

446
00:21:48,360 --> 00:21:50,460
try to but I mean it's just a question

447
00:21:50,460 --> 00:21:51,840
maybe you didn't do it and maybe that's

448
00:21:51,840 --> 00:21:53,940
okay yeah so uh the short answer is we

449
00:21:53,940 --> 00:21:55,679
didn't do exactly what you what you were

450
00:21:55,679 --> 00:21:57,299
suggesting but we are running like a

451
00:21:57,299 --> 00:21:59,700
quick stack over that mode and like it

452
00:21:59,700 --> 00:22:01,020
was fairly easy at least on the Google

453
00:22:01,020 --> 00:22:02,760
implementation I'm not sure on the Apple

454
00:22:02,760 --> 00:22:04,020
or Ericsson ones because I wasn't

455
00:22:04,020 --> 00:22:06,000
working on those to go and have an

456
00:22:06,000 --> 00:22:07,860
encapsulated packet writer that went and

457
00:22:07,860 --> 00:22:09,360
did all the things without any sort of

458
00:22:09,360 --> 00:22:11,780
difficulty

459
00:22:11,940 --> 00:22:14,539
thanks

460
00:22:21,240 --> 00:22:22,980
all right Tommy you're up

461
00:22:22,980 --> 00:22:26,400
all right I think I'm next up

462
00:22:26,400 --> 00:22:28,500
um so just to the question here I think

463
00:22:28,500 --> 00:22:30,419
yeah we could do last call on this I

464
00:22:30,419 --> 00:22:31,440
think we could do it on the current

465
00:22:31,440 --> 00:22:34,500
version I don't um I don't think we need

466
00:22:34,500 --> 00:22:37,380
another pass necessarily and definitely

467
00:22:37,380 --> 00:22:40,080
agreed that doing indaria review in

468
00:22:40,080 --> 00:22:42,299
parallel would be good

469
00:22:42,299 --> 00:22:43,740
um

470
00:22:43,740 --> 00:22:46,679
one thing I wanted to mention here just

471
00:22:46,679 --> 00:22:49,020
for the interop was that this was also a

472
00:22:49,020 --> 00:22:51,179
really good opportunity

473
00:22:51,179 --> 00:22:52,919
to I think for the first time between a

474
00:22:52,919 --> 00:22:54,320
lot of these stacks

475
00:22:54,320 --> 00:22:59,880
do a real capsule interop with

476
00:22:59,880 --> 00:23:02,520
non-trivial capsules back and forth you

477
00:23:02,520 --> 00:23:04,620
know I know we already shipped the

478
00:23:04,620 --> 00:23:06,960
capsule protocol RFC

479
00:23:06,960 --> 00:23:08,700
um but

480
00:23:08,700 --> 00:23:10,559
at least I was not aware of you know

481
00:23:10,559 --> 00:23:12,900
this level of really using capsules in

482
00:23:12,900 --> 00:23:14,580
some of these protocols so

483
00:23:14,580 --> 00:23:17,460
I think if for nothing else doing the

484
00:23:17,460 --> 00:23:19,500
connect IP work is a good way to

485
00:23:19,500 --> 00:23:21,419
exercise that and prove that that's part

486
00:23:21,419 --> 00:23:23,580
of the stack works

487
00:23:23,580 --> 00:23:26,400
um and then to Lorenzo's question

488
00:23:26,400 --> 00:23:26,580
[Music]

489
00:23:26,580 --> 00:23:28,320
um

490
00:23:28,320 --> 00:23:31,440
I just wanted to mention so the testing

491
00:23:31,440 --> 00:23:33,360
that we did from the Apple client was

492
00:23:33,360 --> 00:23:36,600
all the like per flow stuff not the

493
00:23:36,600 --> 00:23:39,360
interface level VPN

494
00:23:39,360 --> 00:23:41,880
so you know we we do have our kind of

495
00:23:41,880 --> 00:23:43,860
like quote-unquote modern socket

496
00:23:43,860 --> 00:23:45,539
replacement apis that have a user space

497
00:23:45,539 --> 00:23:47,760
IP stack and so they could easily work

498
00:23:47,760 --> 00:23:49,980
with this directly

499
00:23:49,980 --> 00:23:52,080
um and then on

500
00:23:52,080 --> 00:23:55,860
Apple platforms uh for BSD sockets we've

501
00:23:55,860 --> 00:23:59,159
had a way to bridge those

502
00:23:59,159 --> 00:24:00,480
um for quite a while as like an

503
00:24:00,480 --> 00:24:02,640
application Level VPN and divert those

504
00:24:02,640 --> 00:24:04,860
over to a process that can do

505
00:24:04,860 --> 00:24:07,260
a modern proxy stack so I don't know if

506
00:24:07,260 --> 00:24:09,780
Android has that but we were able to

507
00:24:09,780 --> 00:24:11,299
test with

508
00:24:11,299 --> 00:24:15,299
those cases where you have a

509
00:24:15,299 --> 00:24:17,159
app that doesn't know anything about it

510
00:24:17,159 --> 00:24:21,980
and just opening up a socket okay

511
00:24:23,120 --> 00:24:25,860
David scanazi

512
00:24:25,860 --> 00:24:28,140
um mask Enthusiast

513
00:24:28,140 --> 00:24:29,640
um first off Tommy thank you for

514
00:24:29,640 --> 00:24:32,460
starting your day at 1 30 a.m to be here

515
00:24:32,460 --> 00:24:35,220
really appreciate it

516
00:24:35,220 --> 00:24:35,940
um

517
00:24:35,940 --> 00:24:40,020
so some some thoughts on this uh Lorenzo

518
00:24:40,020 --> 00:24:41,580
the

519
00:24:41,580 --> 00:24:44,700
the oh well first to Tommy's point we

520
00:24:44,700 --> 00:24:47,520
had some non-trivial interoper for uh

521
00:24:47,520 --> 00:24:49,860
capsules with web transport so we had

522
00:24:49,860 --> 00:24:52,380
that before we shipped that RFC and we

523
00:24:52,380 --> 00:24:55,559
kind of helped us establish uh that at

524
00:24:55,559 --> 00:24:56,940
least in the Google implementation of

525
00:24:56,940 --> 00:24:58,380
chrome and with somewhat transport

526
00:24:58,380 --> 00:25:01,860
servers uh like um twitch if I recall

527
00:25:01,860 --> 00:25:03,960
correctly but anyway having more is

528
00:25:03,960 --> 00:25:05,280
always better

529
00:25:05,280 --> 00:25:10,440
um back to um the uh connect IP and the

530
00:25:10,440 --> 00:25:12,539
mapping to BSD apis

531
00:25:12,539 --> 00:25:15,600
the way I've been thinking about it is

532
00:25:15,600 --> 00:25:18,679
Connect ipfits into a suite

533
00:25:18,679 --> 00:25:22,740
uh and if you look at the BSD API which

534
00:25:22,740 --> 00:25:25,140
is you know in practice what apps use or

535
00:25:25,140 --> 00:25:28,080
you know the for the other more modern

536
00:25:28,080 --> 00:25:31,440
better apis like what Apple has they you

537
00:25:31,440 --> 00:25:33,480
know inherited the security properties

538
00:25:33,480 --> 00:25:36,299
of the BSD API which is an app running

539
00:25:36,299 --> 00:25:39,900
on your phone can open a TCP socket

540
00:25:39,900 --> 00:25:43,440
again or a TCP connection it can open a

541
00:25:43,440 --> 00:25:46,919
UDP Association uh but it can do create

542
00:25:46,919 --> 00:25:50,580
completely a raw socket uh and so the

543
00:25:50,580 --> 00:25:53,220
idea is if you want to map that which

544
00:25:53,220 --> 00:25:55,919
you know for Mass privacy proxies that

545
00:25:55,919 --> 00:25:57,900
we've been like are looking at

546
00:25:57,900 --> 00:26:00,419
implementing the idea is if the app

547
00:26:00,419 --> 00:26:02,279
wants to open a TCP socket that gets

548
00:26:02,279 --> 00:26:04,559
mapped to connect which has the very the

549
00:26:04,559 --> 00:26:07,799
very same semantics as TCP and you can

550
00:26:07,799 --> 00:26:09,659
do that with a collaborating app where

551
00:26:09,659 --> 00:26:12,179
the app just calls an API that does that

552
00:26:12,179 --> 00:26:14,760
or you can do it in a non-collaborating

553
00:26:14,760 --> 00:26:16,679
app if you have kernel apis that allow

554
00:26:16,679 --> 00:26:19,320
you to hook in at the flow level uh so

555
00:26:19,320 --> 00:26:21,500
Android doesn't have those

556
00:26:21,500 --> 00:26:23,659
pretty please

557
00:26:23,659 --> 00:26:26,179
that would be a great feature to have

558
00:26:26,179 --> 00:26:29,580
any Linux kernel hackers around but

559
00:26:29,580 --> 00:26:31,140
apple has a way where you just hijack

560
00:26:31,140 --> 00:26:32,820
the flow and like you get the calls and

561
00:26:32,820 --> 00:26:34,380
user space directly from the socket it

562
00:26:34,380 --> 00:26:35,940
doesn't involve the TCP stack at all

563
00:26:35,940 --> 00:26:37,620
which is a great way to hook

564
00:26:37,620 --> 00:26:40,270
from a TCP socket of a non

565
00:26:40,270 --> 00:26:40,860
[Music]

566
00:26:40,860 --> 00:26:41,520
um

567
00:26:41,520 --> 00:26:43,679
uh an app that doesn't want to do this

568
00:26:43,679 --> 00:26:45,059
you can just drag it kicking and

569
00:26:45,059 --> 00:26:46,440
streaming in a way that's really

570
00:26:46,440 --> 00:26:47,580
efficient because you don't have to

571
00:26:47,580 --> 00:26:49,799
involve the atcp stack at all and same

572
00:26:49,799 --> 00:26:52,140
for UDP you can use connect2dp and

573
00:26:52,140 --> 00:26:54,240
connect IP is kind of the pan at the

574
00:26:54,240 --> 00:26:57,659
bottom to catch everything else so if

575
00:26:57,659 --> 00:27:00,299
the app like wants to do icmp for

576
00:27:00,299 --> 00:27:03,659
example on bsdos's you can do ping as a

577
00:27:03,659 --> 00:27:06,779
non-root user and I'm sure other use

578
00:27:06,779 --> 00:27:09,900
cases connect IP is for those

579
00:27:09,900 --> 00:27:12,720
so that's kind of the way this all fits

580
00:27:12,720 --> 00:27:15,960
together at least in in my mind and when

581
00:27:15,960 --> 00:27:17,940
you have a user space

582
00:27:17,940 --> 00:27:20,820
um uh networking stack like apple does

583
00:27:20,820 --> 00:27:23,520
you can do that all inside that stack

584
00:27:23,520 --> 00:27:25,679
where you can swap out your TCP stack

585
00:27:25,679 --> 00:27:28,799
for your connect machinery

586
00:27:28,799 --> 00:27:31,940
hope that helps

587
00:27:32,159 --> 00:27:34,860
yeah thank you I I actually I try to

588
00:27:34,860 --> 00:27:36,480
click the button to lower my hand but it

589
00:27:36,480 --> 00:27:38,120
didn't work so I'm still in the queue so

590
00:27:38,120 --> 00:27:41,640
but uh maybe you can boot me up but uh I

591
00:27:41,640 --> 00:27:43,919
guess one one sort of concrete question

592
00:27:43,919 --> 00:27:45,419
I'd ask is for example like the BSD

593
00:27:45,419 --> 00:27:47,100
sockets API has a concept of being able

594
00:27:47,100 --> 00:27:48,480
to bind to a port

595
00:27:48,480 --> 00:27:50,760
and it provides certain guarantees like

596
00:27:50,760 --> 00:27:51,779
for example

597
00:27:51,779 --> 00:27:53,460
um unless you go out of your way to say

598
00:27:53,460 --> 00:27:55,200
that they can no other app can bind to

599
00:27:55,200 --> 00:27:57,779
that Port so in the town scenario fine

600
00:27:57,779 --> 00:27:59,159
you know that the kernel deals with all

601
00:27:59,159 --> 00:28:00,539
of that you just you know that the

602
00:28:00,539 --> 00:28:02,700
kernel stack will deal with that but um

603
00:28:02,700 --> 00:28:04,140
in the

604
00:28:04,140 --> 00:28:05,159
um sort of

605
00:28:05,159 --> 00:28:06,720
um more direct access and I don't know

606
00:28:06,720 --> 00:28:08,279
what you call it but you know an app

607
00:28:08,279 --> 00:28:10,559
would be able to you know it sounds like

608
00:28:10,559 --> 00:28:11,880
it would be able to like send their

609
00:28:11,880 --> 00:28:15,840
arbitrary IP diagrams right and and then

610
00:28:15,840 --> 00:28:18,299
in that case right like how do you

611
00:28:18,299 --> 00:28:21,059
provide a device like let's say a phone

612
00:28:21,059 --> 00:28:23,460
with

613
00:28:23,460 --> 00:28:25,740
egress to the internet

614
00:28:25,740 --> 00:28:28,260
um without requiring like you know like

615
00:28:28,260 --> 00:28:29,880
how do apps collaborate like do you need

616
00:28:29,880 --> 00:28:32,039
to give every different app its own IP

617
00:28:32,039 --> 00:28:33,600
address for example because you don't

618
00:28:33,600 --> 00:28:35,220
have you know Port mapping things so

619
00:28:35,220 --> 00:28:37,080
yeah um so there's there's a couple

620
00:28:37,080 --> 00:28:38,640
different ways to do this

621
00:28:38,640 --> 00:28:42,659
um so one way to do this would be

622
00:28:42,659 --> 00:28:44,340
some additional extensions which we we

623
00:28:44,340 --> 00:28:46,080
have discussed in the past and haven't

624
00:28:46,080 --> 00:28:47,880
yet decided to do to allow carving up

625
00:28:47,880 --> 00:28:49,860
the port range spaces

626
00:28:49,860 --> 00:28:52,440
um we basically decided in uh the

627
00:28:52,440 --> 00:28:54,240
working sorry in the design team

628
00:28:54,240 --> 00:28:56,039
beginning of this year I think it was

629
00:28:56,039 --> 00:28:57,659
the beginning of this year that we were

630
00:28:57,659 --> 00:28:59,340
going to basically um handle when

631
00:28:59,340 --> 00:29:01,620
connect IP initially anything would just

632
00:29:01,620 --> 00:29:03,120
in the IP

633
00:29:03,120 --> 00:29:04,919
header and not anything we're using the

634
00:29:04,919 --> 00:29:07,440
TCP or UDP headers Downstream but it is

635
00:29:07,440 --> 00:29:08,760
totally possible to design an extension

636
00:29:08,760 --> 00:29:10,500
to allow carving up for example the port

637
00:29:10,500 --> 00:29:12,360
range saying so you can say I can

638
00:29:12,360 --> 00:29:15,000
request ipro.tcp and then have a request

639
00:29:15,000 --> 00:29:17,880
you know Port wrench 10 000 to 11 000.

640
00:29:17,880 --> 00:29:19,080
um that doesn't exist today that's

641
00:29:19,080 --> 00:29:20,580
definitely something that someone they

642
00:29:20,580 --> 00:29:22,799
were excited about it could write up the

643
00:29:22,799 --> 00:29:24,899
other way of doing it is imagine you can

644
00:29:24,899 --> 00:29:27,840
do a link local IPv6 address and then

645
00:29:27,840 --> 00:29:30,960
you know Nat on the connect IP proxy

646
00:29:30,960 --> 00:29:33,720
service word you say that

647
00:29:33,720 --> 00:29:35,940
um like so you don't necessarily have to

648
00:29:35,940 --> 00:29:37,620
egress with the same IP which is

649
00:29:37,620 --> 00:29:40,320
assigned to the inside of the tunnel

650
00:29:40,320 --> 00:29:43,559
um yeah okay no that that I understand

651
00:29:43,559 --> 00:29:45,539
that I want one point to David to your

652
00:29:45,539 --> 00:29:47,340
point um

653
00:29:47,340 --> 00:29:49,500
much as I would like it to be different

654
00:29:49,500 --> 00:29:51,840
the Android sort of Kernel timelines or

655
00:29:51,840 --> 00:29:53,399
seven to ten years

656
00:29:53,399 --> 00:29:56,100
it's depressing but that's how it is so

657
00:29:56,100 --> 00:29:58,020
uh in terms of you know getting a

658
00:29:58,020 --> 00:30:00,120
feature to to the fleet

659
00:30:00,120 --> 00:30:03,000
so yeah I'm relying on that to to to

660
00:30:03,000 --> 00:30:05,340
deploy this is maybe not gonna but

661
00:30:05,340 --> 00:30:07,200
anyway yeah so anyways that that it

662
00:30:07,200 --> 00:30:08,880
sounds like the primary case was like

663
00:30:08,880 --> 00:30:10,260
out of the tongue case which seems like

664
00:30:10,260 --> 00:30:12,600
well specified and basically functional

665
00:30:12,600 --> 00:30:15,120
at this point and

666
00:30:15,120 --> 00:30:17,520
a

667
00:30:17,520 --> 00:30:20,640
sort of like a single tenant kind of

668
00:30:20,640 --> 00:30:23,279
thing where you give a an app an IP

669
00:30:23,279 --> 00:30:25,440
address and so for V6 you could have

670
00:30:25,440 --> 00:30:27,360
where you whatever 50 apps on the phone

671
00:30:27,360 --> 00:30:28,500
they could each have their own IP

672
00:30:28,500 --> 00:30:29,460
address and they could use IP

673
00:30:29,460 --> 00:30:31,020
connectivity

674
00:30:31,020 --> 00:30:31,980
um

675
00:30:31,980 --> 00:30:35,100
for V4 yeah I guess you wouldn't you I

676
00:30:35,100 --> 00:30:36,360
guess you could use that yeah okay

677
00:30:36,360 --> 00:30:38,039
anyway thanks that does clarify it's

678
00:30:38,039 --> 00:30:39,539
sort of a kind of out of scope right

679
00:30:39,539 --> 00:30:41,399
yeah the other thing I quickly like to

680
00:30:41,399 --> 00:30:42,899
add is to emphasize something that David

681
00:30:42,899 --> 00:30:45,000
said earlier which is that connect IP is

682
00:30:45,000 --> 00:30:46,260
like you know the catch-all for when you

683
00:30:46,260 --> 00:30:47,700
want to do something that is not already

684
00:30:47,700 --> 00:30:50,159
handled by connect or connect UDP we

685
00:30:50,159 --> 00:30:52,620
expect that 99 of the different use

686
00:30:52,620 --> 00:30:53,880
cases of an app wants to do something

687
00:30:53,880 --> 00:30:56,460
TCP related or UDP related scope to a

688
00:30:56,460 --> 00:30:58,320
specific Port is going to be handled by

689
00:30:58,320 --> 00:30:59,940
those existing specifications that we

690
00:30:59,940 --> 00:31:02,220
have so if I can write a webrtc client

691
00:31:02,220 --> 00:31:05,700
with connect UDP a combined

692
00:31:05,700 --> 00:31:08,100
um uh based on drafts we have today yes

693
00:31:08,100 --> 00:31:09,419
you can bind to a specific point I

694
00:31:09,419 --> 00:31:10,620
believe um I don't think we have

695
00:31:10,620 --> 00:31:11,700
listened yet but I think that's actually

696
00:31:11,700 --> 00:31:15,320
on the agenda for this week thanks

697
00:31:15,659 --> 00:31:17,880
all right I see miria you are asking for

698
00:31:17,880 --> 00:31:20,360
slides

699
00:31:21,659 --> 00:31:23,820
ah

700
00:31:23,820 --> 00:31:26,279
I will decline that request then cool

701
00:31:26,279 --> 00:31:28,740
all right so it sounds like

702
00:31:28,740 --> 00:31:30,240
um we're gonna spend a couple of weeks

703
00:31:30,240 --> 00:31:32,220
doing a quick editorial pass and then we

704
00:31:32,220 --> 00:31:35,159
will go for a working request call as

705
00:31:35,159 --> 00:31:36,840
well as requesting interior view in

706
00:31:36,840 --> 00:31:38,100
parallel

707
00:31:38,100 --> 00:31:40,260
wonderful thank you so much thank you so

708
00:31:40,260 --> 00:31:42,379
much

709
00:31:42,659 --> 00:31:45,659
all right next up we have proxim

710
00:31:45,659 --> 00:31:48,179
listener UDP

711
00:31:48,179 --> 00:31:51,080
and

712
00:31:52,559 --> 00:31:55,520
there we are

713
00:31:56,820 --> 00:32:00,059
all right hi everyone

714
00:32:00,059 --> 00:32:03,000
um my name is zabi Singh Google and I'll

715
00:32:03,000 --> 00:32:05,399
be presenting the connect UDP listener

716
00:32:05,399 --> 00:32:07,580
today

717
00:32:07,799 --> 00:32:10,080
um so since our last presentation that

718
00:32:10,080 --> 00:32:12,360
iitf114

719
00:32:12,360 --> 00:32:15,000
um we've made a few changes but most of

720
00:32:15,000 --> 00:32:17,399
them are editorial ones

721
00:32:17,399 --> 00:32:20,418
next slide please

722
00:32:22,500 --> 00:32:25,260
um so what connect UDP is right now is

723
00:32:25,260 --> 00:32:29,159
it enables connected udb sockets

724
00:32:29,159 --> 00:32:31,980
um so the proxy can send and receive

725
00:32:31,980 --> 00:32:35,520
from a single Target specified in the

726
00:32:35,520 --> 00:32:37,919
path field of the connect header

727
00:32:37,919 --> 00:32:41,100
but what if we wanted more tuples

728
00:32:41,100 --> 00:32:43,939
next slide please

729
00:32:44,840 --> 00:32:47,700
take for example

730
00:32:47,700 --> 00:32:50,940
um webrtc like in this basic topology

731
00:32:50,940 --> 00:32:56,419
the clients are paying a stunt server

732
00:32:56,460 --> 00:32:59,419
um next slide please

733
00:33:02,059 --> 00:33:05,100
and then a peer-to-peer connection is

734
00:33:05,100 --> 00:33:08,039
established uh here between Bob and

735
00:33:08,039 --> 00:33:10,320
Alice so they can have a very important

736
00:33:10,320 --> 00:33:11,760
discussion about their favorite cat

737
00:33:11,760 --> 00:33:13,140
videos

738
00:33:13,140 --> 00:33:15,919
next slide please

739
00:33:16,500 --> 00:33:19,980
so the same uh topology of the proxy

740
00:33:19,980 --> 00:33:22,919
would look something like this

741
00:33:22,919 --> 00:33:26,480
uh next slide please

742
00:33:26,940 --> 00:33:29,760
and in the in an Ideal World hopefully

743
00:33:29,760 --> 00:33:33,000
the proxy would relay the the discussion

744
00:33:33,000 --> 00:33:36,960
about the cat videos to Alice

745
00:33:36,960 --> 00:33:40,039
um next slide please

746
00:33:41,700 --> 00:33:44,820
now the question is why not just to use

747
00:33:44,820 --> 00:33:48,059
connect multiple connect UDP connections

748
00:33:48,059 --> 00:33:49,980
um that could work right

749
00:33:49,980 --> 00:33:52,860
um that could help us get multiple five

750
00:33:52,860 --> 00:33:55,019
pupils

751
00:33:55,019 --> 00:33:57,799
um next slide please

752
00:33:58,679 --> 00:34:01,380
now now here's the catch

753
00:34:01,380 --> 00:34:04,260
um because it's we're running HTTP

754
00:34:04,260 --> 00:34:07,380
proxies two individual requests they're

755
00:34:07,380 --> 00:34:11,219
on guaranteed to be served by the same

756
00:34:11,219 --> 00:34:12,540
server instance

757
00:34:12,540 --> 00:34:16,080
so the IPS that get exposed uh at the

758
00:34:16,080 --> 00:34:19,139
end of the proxy might be different

759
00:34:19,139 --> 00:34:23,940
um and so so so this breaks ice

760
00:34:23,940 --> 00:34:27,300
um so if this sounds familiar it's kind

761
00:34:27,300 --> 00:34:30,179
of like what we have a like symmetric

762
00:34:30,179 --> 00:34:32,460
mats but

763
00:34:32,460 --> 00:34:35,159
uh I think like using current servers to

764
00:34:35,159 --> 00:34:37,800
support this seems very unnecessary and

765
00:34:37,800 --> 00:34:40,679
expensive uh when we could still support

766
00:34:40,679 --> 00:34:43,080
peer-to-peer

767
00:34:43,080 --> 00:34:45,799
um next slide please

768
00:34:48,359 --> 00:34:51,599
so connect presenting connect UDP now

769
00:34:51,599 --> 00:34:53,599
with listener support

770
00:34:53,599 --> 00:34:57,599
and so one connect GDP connection

771
00:34:57,599 --> 00:35:02,480
um infinitely as many uh UDP targets

772
00:35:02,480 --> 00:35:05,900
next slide please

773
00:35:06,980 --> 00:35:11,579
so how does it work uh I mean so in the

774
00:35:11,579 --> 00:35:13,740
header as you can see like we specify

775
00:35:13,740 --> 00:35:16,320
the paths with asterisks meaning

776
00:35:16,320 --> 00:35:20,579
can have as many targets as we like and

777
00:35:20,579 --> 00:35:23,700
so in the in the quick frame you'll see

778
00:35:23,700 --> 00:35:26,520
there's a connect udb listen section

779
00:35:26,520 --> 00:35:29,339
with the IP address

780
00:35:29,339 --> 00:35:32,660
um next slide please

781
00:35:33,780 --> 00:35:40,020
so what this IP field is so when when uh

782
00:35:40,020 --> 00:35:42,960
when the connectivity uh datagrams are

783
00:35:42,960 --> 00:35:46,079
sent from the client to the proxy they

784
00:35:46,079 --> 00:35:49,260
represent the target IPR Port that's uh

785
00:35:49,260 --> 00:35:51,119
that it should be forwarded to

786
00:35:51,119 --> 00:35:53,880
whereas on the other in the other

787
00:35:53,880 --> 00:35:57,300
direction uh when the proxies uh

788
00:35:57,300 --> 00:35:59,280
receiving and sending it back to the

789
00:35:59,280 --> 00:36:01,140
client it would represent the source IP

790
00:36:01,140 --> 00:36:03,780
from which the proxies received these

791
00:36:03,780 --> 00:36:06,079
packets

792
00:36:06,660 --> 00:36:09,359
um so but here there is an open question

793
00:36:09,359 --> 00:36:12,960
like does the proxy validate Source

794
00:36:12,960 --> 00:36:14,339
packets

795
00:36:14,339 --> 00:36:16,260
um and I guess this is where we would we

796
00:36:16,260 --> 00:36:19,380
would need like turinx people who have

797
00:36:19,380 --> 00:36:22,500
expertise with webrtc turn

798
00:36:22,500 --> 00:36:25,339
um next slide please

799
00:36:25,859 --> 00:36:27,900
so I would like to open the question

800
00:36:27,900 --> 00:36:29,579
like are we are we interested in

801
00:36:29,579 --> 00:36:31,859
adoption of course we'll need some

802
00:36:31,859 --> 00:36:35,520
security considerations like I mentioned

803
00:36:35,520 --> 00:36:36,240
um

804
00:36:36,240 --> 00:36:40,320
like Eddie anyone who has like webrtc or

805
00:36:40,320 --> 00:36:43,380
turn expertise that would be that would

806
00:36:43,380 --> 00:36:45,980
be quite helpful

807
00:36:46,140 --> 00:36:48,980
next slide please

808
00:36:49,320 --> 00:36:51,300
and that would be it

809
00:36:51,300 --> 00:36:53,280
um so we can open the mic for some

810
00:36:53,280 --> 00:36:55,460
questions

811
00:36:55,980 --> 00:36:58,140
wonderful all right our uh queue is

812
00:36:58,140 --> 00:37:02,180
currently booting but Lorenzo is first

813
00:37:03,000 --> 00:37:05,700
Lorenzo is no longer first

814
00:37:05,700 --> 00:37:07,619
um it does work

815
00:37:07,619 --> 00:37:09,180
all right

816
00:37:09,180 --> 00:37:11,040
keep walking Lorenzo

817
00:37:11,040 --> 00:37:13,200
um so we have a timer on screen we're

818
00:37:13,200 --> 00:37:15,240
gonna try to keep our comments within

819
00:37:15,240 --> 00:37:16,980
that time

820
00:37:16,980 --> 00:37:18,780
um so the two things that we want to

821
00:37:18,780 --> 00:37:20,880
talk about Are One technical feedback

822
00:37:20,880 --> 00:37:22,380
clarifying questions anything like that

823
00:37:22,380 --> 00:37:24,420
as long as we keep it super short and

824
00:37:24,420 --> 00:37:26,700
the other is is this the kind of thing

825
00:37:26,700 --> 00:37:28,680
that we'd like to include in our Charter

826
00:37:28,680 --> 00:37:30,540
is this useful is this necessary for

827
00:37:30,540 --> 00:37:32,280
real world deployments that kind of

828
00:37:32,280 --> 00:37:34,460
thing

829
00:37:34,560 --> 00:37:36,720
all right Lorenzo

830
00:37:36,720 --> 00:37:39,660
I guess Tommy was performing but um is

831
00:37:39,660 --> 00:37:41,460
this useful I think it's necessary if

832
00:37:41,460 --> 00:37:43,619
you want to do anything you know more

833
00:37:43,619 --> 00:37:45,300
complicated than just a client server

834
00:37:45,300 --> 00:37:48,180
interaction so it does seem useful

835
00:37:48,180 --> 00:37:51,560
um from a technical feedback perspective

836
00:37:51,560 --> 00:37:54,359
usually apps will bind to an empty

837
00:37:54,359 --> 00:37:56,700
address and

838
00:37:56,700 --> 00:37:59,460
um so that's one thing to consider and

839
00:37:59,460 --> 00:38:01,260
there are you know again like to my

840
00:38:01,260 --> 00:38:02,520
earlier point about mapping this to

841
00:38:02,520 --> 00:38:05,099
sockets apis they they do things like

842
00:38:05,099 --> 00:38:05,940
you know

843
00:38:05,940 --> 00:38:08,520
bind connect and then call get sock name

844
00:38:08,520 --> 00:38:09,720
to figure out what their local address

845
00:38:09,720 --> 00:38:12,240
is and so on so that's those are like

846
00:38:12,240 --> 00:38:13,560
things that they're accustomed to doing

847
00:38:13,560 --> 00:38:15,720
that if you want to Port an app to use

848
00:38:15,720 --> 00:38:18,540
this such as webrcc you might want to

849
00:38:18,540 --> 00:38:20,160
think about those semantics and

850
00:38:20,160 --> 00:38:21,780
replicating them a little bit things

851
00:38:21,780 --> 00:38:23,940
like get sock name is are actually you

852
00:38:23,940 --> 00:38:26,760
know and get pure name error often used

853
00:38:26,760 --> 00:38:29,400
the other thing that I would say also is

854
00:38:29,400 --> 00:38:31,079
is a complexity that you need to think

855
00:38:31,079 --> 00:38:32,880
about is

856
00:38:32,880 --> 00:38:34,280
um

857
00:38:34,280 --> 00:38:38,460
the dual stack sockets so often an app

858
00:38:38,460 --> 00:38:39,960
won't know if a connection is coming in

859
00:38:39,960 --> 00:38:41,940
on B4 or V6 and it'll just like bind to

860
00:38:41,940 --> 00:38:45,480
a to a V6 address AFI net six empty and

861
00:38:45,480 --> 00:38:46,740
then it will you know the kernel will

862
00:38:46,740 --> 00:38:48,839
deal with V4 traffic on that socket

863
00:38:48,839 --> 00:38:51,000
using mapped addresses and so on that's

864
00:38:51,000 --> 00:38:53,640
it you can make all that work and I

865
00:38:53,640 --> 00:38:54,900
think you

866
00:38:54,900 --> 00:38:56,700
yeah yeah okay so it does yeah because

867
00:38:56,700 --> 00:38:58,260
and that's something that's like

868
00:38:58,260 --> 00:39:00,060
sometimes on Triple but good to know

869
00:39:00,060 --> 00:39:03,078
that you've already implemented it

870
00:39:03,900 --> 00:39:06,859
all right Tommy

871
00:39:07,440 --> 00:39:10,560
all right hello so yes this is

872
00:39:10,560 --> 00:39:12,060
definitely useful

873
00:39:12,060 --> 00:39:14,280
um I would say this is the main pain

874
00:39:14,280 --> 00:39:17,220
point for the browser use case when

875
00:39:17,220 --> 00:39:20,640
using a mask proxy um and we've been

876
00:39:20,640 --> 00:39:23,640
running within deploying these for

877
00:39:23,640 --> 00:39:25,800
like two years now and this is kind of

878
00:39:25,800 --> 00:39:28,079
like the main Gap that we need to fill

879
00:39:28,079 --> 00:39:31,140
so please let's do it uh let's adopt it

880
00:39:31,140 --> 00:39:31,980
here

881
00:39:31,980 --> 00:39:35,099
um I also think if any if anything is in

882
00:39:35,099 --> 00:39:36,000
scope

883
00:39:36,000 --> 00:39:38,940
uh for this group this should be because

884
00:39:38,940 --> 00:39:41,460
this is kind of like a clear

885
00:39:41,460 --> 00:39:44,099
um like bug fix essentially

886
00:39:44,099 --> 00:39:48,359
in the whole connect UDP ecosystem the

887
00:39:48,359 --> 00:39:51,000
one other thing I would leave is

888
00:39:51,000 --> 00:39:53,579
doing something like this for connect

889
00:39:53,579 --> 00:39:56,460
TCP would be interesting too I I know

890
00:39:56,460 --> 00:39:58,760
that shouldn't be this document but

891
00:39:58,760 --> 00:40:02,780
that should also be addressed

892
00:40:07,160 --> 00:40:09,839
I don't have any comments specifically

893
00:40:09,839 --> 00:40:11,700
on the draft but I do think that the use

894
00:40:11,700 --> 00:40:13,740
case is important so

895
00:40:13,740 --> 00:40:17,899
um we should work on it awesome

896
00:40:19,740 --> 00:40:22,140
Dave it's kanazi

897
00:40:22,140 --> 00:40:24,480
thanks Abby for waking up at 4 30 a.m

898
00:40:24,480 --> 00:40:27,119
and joining us today this time zone is

899
00:40:27,119 --> 00:40:29,520
rough for the U.S uh this time around I

900
00:40:29,520 --> 00:40:32,400
just wanted to answer uh Lorenzo's

901
00:40:32,400 --> 00:40:36,000
question as co-author uh the kind of

902
00:40:36,000 --> 00:40:38,160
spiritual war that's not the right word

903
00:40:38,160 --> 00:40:40,200
the uh

904
00:40:40,200 --> 00:40:43,079
conceptual way to think about this um is

905
00:40:43,079 --> 00:40:46,079
so connect udpg unextended the current

906
00:40:46,079 --> 00:40:48,180
version that's published is a connected

907
00:40:48,180 --> 00:40:51,359
UDP socket and this is a non-connected

908
00:40:51,359 --> 00:40:55,260
UDP socket so you you do bind and then

909
00:40:55,260 --> 00:40:56,460
you

910
00:40:56,460 --> 00:40:59,220
you get on every packet that comes in uh

911
00:40:59,220 --> 00:41:01,800
the uh receive packet info

912
00:41:01,800 --> 00:41:04,859
and and then you can send to uh to a

913
00:41:04,859 --> 00:41:07,440
bunch of places so like get pure name

914
00:41:07,440 --> 00:41:09,240
it's not because it's not connected

915
00:41:09,240 --> 00:41:11,880
there and the the call for getting your

916
00:41:11,880 --> 00:41:13,560
local name like that's the one that's

917
00:41:13,560 --> 00:41:15,960
like not defined but if if you want to

918
00:41:15,960 --> 00:41:17,940
fit that you would say here's a 1918

919
00:41:17,940 --> 00:41:20,460
space address that's fake uh because

920
00:41:20,460 --> 00:41:24,480
that address doesn't exist in this space

921
00:41:24,480 --> 00:41:25,260
um

922
00:41:25,260 --> 00:41:29,400
it's like imagine like I'm realizing the

923
00:41:29,400 --> 00:41:31,260
more and more we think about this more

924
00:41:31,260 --> 00:41:34,500
and more masks feels like a gnat that's

925
00:41:34,500 --> 00:41:36,660
running over HTTP which is kind of

926
00:41:36,660 --> 00:41:38,880
ironic because the old name for Nat was

927
00:41:38,880 --> 00:41:40,619
masquerade

928
00:41:40,619 --> 00:41:42,359
um but that's kind of what this is where

929
00:41:42,359 --> 00:41:44,160
like if you have if you you can give

930
00:41:44,160 --> 00:41:46,140
your app an address but it'll be fake

931
00:41:46,140 --> 00:41:48,300
just as an address that's private to

932
00:41:48,300 --> 00:41:51,000
your side of the NAT is fake

933
00:41:51,000 --> 00:41:53,400
um one thing that folks have talked

934
00:41:53,400 --> 00:41:56,099
about that we can decide if we want it

935
00:41:56,099 --> 00:41:57,839
to be in this draft or not is you can

936
00:41:57,839 --> 00:42:00,660
you could also add an option to to use

937
00:42:00,660 --> 00:42:03,000
Mass to say hey here's the public

938
00:42:03,000 --> 00:42:04,800
address that the proxy is using for this

939
00:42:04,800 --> 00:42:06,300
connection on the outside in case that's

940
00:42:06,300 --> 00:42:08,579
useful to facilitate things like ice and

941
00:42:08,579 --> 00:42:11,760
all that yeah

942
00:42:11,760 --> 00:42:14,339
yeah so that could be

943
00:42:14,339 --> 00:42:16,260
um a useful I wouldn't say you need it

944
00:42:16,260 --> 00:42:18,240
because with a Nat like the you don't

945
00:42:18,240 --> 00:42:19,680
have that you don't have a way to tell

946
00:42:19,680 --> 00:42:21,359
the NAT what's my public address today

947
00:42:21,359 --> 00:42:23,940
and things still work because like we've

948
00:42:23,940 --> 00:42:26,640
uh it's done you can do that but it

949
00:42:26,640 --> 00:42:28,020
sounds like a useful feature maybe we

950
00:42:28,020 --> 00:42:30,060
can use that but I think it fits into

951
00:42:30,060 --> 00:42:33,500
the shape of what you're describing

952
00:42:34,500 --> 00:42:36,780
yeah I know for sure for sure it's just

953
00:42:36,780 --> 00:42:39,480
a way to think about it uh I hate Nats

954
00:42:39,480 --> 00:42:42,320
as much as the next person

955
00:42:42,320 --> 00:42:45,119
all right thank you very much

956
00:42:45,119 --> 00:42:46,560
sounds like we've got quite a bit of

957
00:42:46,560 --> 00:42:47,760
interest

958
00:42:47,760 --> 00:42:51,000
um let's move on to our next topic uh

959
00:42:51,000 --> 00:42:53,099
Eric before we move on just uh asking as

960
00:42:53,099 --> 00:42:55,560
a co-author what are our next steps here

961
00:42:55,560 --> 00:42:59,040
uh should we talk about adoption or is

962
00:42:59,040 --> 00:43:01,079
this a conversation we will have after

963
00:43:01,079 --> 00:43:03,000
the recharter we're going to talk about

964
00:43:03,000 --> 00:43:04,800
that after the recharter because we have

965
00:43:04,800 --> 00:43:06,599
the whole pile of documents that's one

966
00:43:06,599 --> 00:43:07,680
of the questions is where do we draw

967
00:43:07,680 --> 00:43:09,900
that line Thanks so adoption is on the

968
00:43:09,900 --> 00:43:11,220
table for anything that we decide to

969
00:43:11,220 --> 00:43:13,640
Charter

970
00:43:15,060 --> 00:43:18,900
all right next up we have quick aware

971
00:43:18,900 --> 00:43:22,520
proxying using http

972
00:43:23,819 --> 00:43:26,099
hello can you hear me all right we can

973
00:43:26,099 --> 00:43:27,720
hear you and see you

974
00:43:27,720 --> 00:43:29,640
awesome

975
00:43:29,640 --> 00:43:32,400
um I'm Eric Rosenberg Apple I'm going to

976
00:43:32,400 --> 00:43:34,200
be talking about quick aware proxying

977
00:43:34,200 --> 00:43:37,319
using HCB which is an extension to

978
00:43:37,319 --> 00:43:39,900
connect UDP when quick is being proxied

979
00:43:39,900 --> 00:43:42,980
next slide please

980
00:43:44,220 --> 00:43:48,119
so why quick awareness we already have

981
00:43:48,119 --> 00:43:52,260
connect UDP quick runs over UDP and

982
00:43:52,260 --> 00:43:54,240
everything's great and everything is

983
00:43:54,240 --> 00:43:57,060
great but there's some opportunities to

984
00:43:57,060 --> 00:43:58,920
try to make it better

985
00:43:58,920 --> 00:44:00,660
uh one of the first things that you

986
00:44:00,660 --> 00:44:02,520
might come across when using connect2dp

987
00:44:02,520 --> 00:44:04,980
is that if you're supporting Target

988
00:44:04,980 --> 00:44:09,540
servers accessible over ipv4 you may run

989
00:44:09,540 --> 00:44:12,240
into Port exhaustion between your proxy

990
00:44:12,240 --> 00:44:14,660
and the target

991
00:44:14,660 --> 00:44:18,000
additionally when using connect UDP you

992
00:44:18,000 --> 00:44:21,359
may notice that there's MTU loss for

993
00:44:21,359 --> 00:44:23,339
each proxy that you use

994
00:44:23,339 --> 00:44:25,740
by encapsulating inside of http

995
00:44:25,740 --> 00:44:27,000
datagrams

996
00:44:27,000 --> 00:44:29,160
and this may not be a big deal when

997
00:44:29,160 --> 00:44:31,920
using a single connect 2D proxy but if

998
00:44:31,920 --> 00:44:34,260
you start to chain these proxies this

999
00:44:34,260 --> 00:44:37,440
MTU loss can be quite consequential even

1000
00:44:37,440 --> 00:44:39,720
to the point of maybe not being able to

1001
00:44:39,720 --> 00:44:43,319
run quick over those nested tunnels

1002
00:44:43,319 --> 00:44:45,119
and then finally

1003
00:44:45,119 --> 00:44:47,579
um there's the processing and uh send

1004
00:44:47,579 --> 00:44:49,980
and receive overhead associated with

1005
00:44:49,980 --> 00:44:52,980
connect2dp that you would expect and

1006
00:44:52,980 --> 00:44:54,660
there are some opportunities to to Short

1007
00:44:54,660 --> 00:44:56,700
Circuit some of that work when you know

1008
00:44:56,700 --> 00:44:59,700
that quick is uh being proxy next slide

1009
00:44:59,700 --> 00:45:01,879
please

1010
00:45:02,280 --> 00:45:05,700
so what is quick aware proxying uh well

1011
00:45:05,700 --> 00:45:09,599
essentially the client uh who is is

1012
00:45:09,599 --> 00:45:12,420
speaking quick to some Target is able to

1013
00:45:12,420 --> 00:45:15,060
tell the proxy some information about

1014
00:45:15,060 --> 00:45:16,260
the quick connection that's being

1015
00:45:16,260 --> 00:45:18,240
proxied

1016
00:45:18,240 --> 00:45:20,700
um and specifically the client is

1017
00:45:20,700 --> 00:45:23,940
sharing the connection ideas for the

1018
00:45:23,940 --> 00:45:26,819
inner quick connection uh with the proxy

1019
00:45:26,819 --> 00:45:29,400
using the capsule protocol

1020
00:45:29,400 --> 00:45:30,900
and immediately with that information

1021
00:45:30,900 --> 00:45:33,480
what the proxy is able to do right off

1022
00:45:33,480 --> 00:45:37,319
the bat is it's able to reuse Target

1023
00:45:37,319 --> 00:45:39,680
facing ports

1024
00:45:39,680 --> 00:45:42,660
for these connect UDP tunnels so instead

1025
00:45:42,660 --> 00:45:44,819
of having to create a a new unique

1026
00:45:44,819 --> 00:45:47,700
socket that might be a new port for each

1027
00:45:47,700 --> 00:45:50,040
connect UDP request if it knows that

1028
00:45:50,040 --> 00:45:52,560
it's quick it may be able to reuse

1029
00:45:52,560 --> 00:45:54,599
sockets and distinguish traffic based on

1030
00:45:54,599 --> 00:45:57,300
connection ID

1031
00:45:57,300 --> 00:46:01,099
on top of that if a client in proxy

1032
00:46:01,099 --> 00:46:05,640
agree uh that they want to support a

1033
00:46:05,640 --> 00:46:09,300
forwarded mode of proxying they may skip

1034
00:46:09,300 --> 00:46:13,380
the encapsulation of the quick packet

1035
00:46:13,380 --> 00:46:16,319
for the inner quick connection inside of

1036
00:46:16,319 --> 00:46:18,480
an HTTP datagram for short header

1037
00:46:18,480 --> 00:46:20,240
packets and this is what we call

1038
00:46:20,240 --> 00:46:22,040
forwarded mode

1039
00:46:22,040 --> 00:46:25,020
where the client is generating a quick

1040
00:46:25,020 --> 00:46:28,140
packet for the client Target quick

1041
00:46:28,140 --> 00:46:29,220
connection

1042
00:46:29,220 --> 00:46:31,800
and instead of encapsulating it inside

1043
00:46:31,800 --> 00:46:33,540
of an http datagram

1044
00:46:33,540 --> 00:46:36,540
it can send it directly to the proxy

1045
00:46:36,540 --> 00:46:38,579
over UDP

1046
00:46:38,579 --> 00:46:41,400
and using this forwarding mode helps

1047
00:46:41,400 --> 00:46:43,920
eliminate the MTU loss associated with

1048
00:46:43,920 --> 00:46:46,579
encapsulation

1049
00:46:46,800 --> 00:46:48,540
and one other thing to note about this

1050
00:46:48,540 --> 00:46:50,900
forwarding mode is that

1051
00:46:50,900 --> 00:46:55,260
the the connection ID bytes on The Wire

1052
00:46:55,260 --> 00:46:59,660
between the uh the client and the proxy

1053
00:46:59,660 --> 00:47:01,980
are different than the connection ID

1054
00:47:01,980 --> 00:47:04,680
bytes on The Wire between the proxy and

1055
00:47:04,680 --> 00:47:06,480
the Target and I'll explain more about

1056
00:47:06,480 --> 00:47:07,980
that and why it's necessary in a moment

1057
00:47:07,980 --> 00:47:11,000
next slide please

1058
00:47:13,020 --> 00:47:16,020
so I introduce a little bit about how

1059
00:47:16,020 --> 00:47:18,000
the client shares connection IDs with

1060
00:47:18,000 --> 00:47:19,500
the proxy and it's fairly

1061
00:47:19,500 --> 00:47:21,359
straightforward how the proxy might be

1062
00:47:21,359 --> 00:47:22,920
able to take advantage of that for Port

1063
00:47:22,920 --> 00:47:24,180
reuse

1064
00:47:24,180 --> 00:47:26,819
the forwarded mode uh requires a little

1065
00:47:26,819 --> 00:47:28,560
more consideration so before getting

1066
00:47:28,560 --> 00:47:29,940
into too much more detail about that

1067
00:47:29,940 --> 00:47:32,460
when is this actually interesting uh

1068
00:47:32,460 --> 00:47:35,940
well as I said before uh if if this MTU

1069
00:47:35,940 --> 00:47:39,119
loss makes a difference to you if you're

1070
00:47:39,119 --> 00:47:41,880
interested in chaining proxies

1071
00:47:41,880 --> 00:47:43,859
um forward in my forwarded mode might be

1072
00:47:43,859 --> 00:47:45,000
applicable

1073
00:47:45,000 --> 00:47:47,160
and then it's also worth noting that

1074
00:47:47,160 --> 00:47:49,920
when using forwarded mode we're not

1075
00:47:49,920 --> 00:47:51,720
encapsulating inside of an HTTP datagram

1076
00:47:51,720 --> 00:47:55,560
and so the quick packet contents that

1077
00:47:55,560 --> 00:47:58,319
are on the wire between the client and

1078
00:47:58,319 --> 00:48:00,380
the proxy and the proxy and the target

1079
00:48:00,380 --> 00:48:02,640
are largely identical

1080
00:48:02,640 --> 00:48:05,040
and so this is not preventing traffic

1081
00:48:05,040 --> 00:48:08,640
analysis pipe servers of both sides of

1082
00:48:08,640 --> 00:48:09,839
the proxy

1083
00:48:09,839 --> 00:48:12,859
next slide please

1084
00:48:14,880 --> 00:48:17,819
so consider we have a client on the left

1085
00:48:17,819 --> 00:48:20,819
here who sends a connect UDP request to

1086
00:48:20,819 --> 00:48:24,359
a proxy and in normal circumstances the

1087
00:48:24,359 --> 00:48:26,819
client trying to establish a quick

1088
00:48:26,819 --> 00:48:28,260
connection with the target would use

1089
00:48:28,260 --> 00:48:30,720
http datagrams

1090
00:48:30,720 --> 00:48:34,140
with quick aware of proxying the client

1091
00:48:34,140 --> 00:48:36,540
would also share connection ID

1092
00:48:36,540 --> 00:48:39,119
information with the proxy using the

1093
00:48:39,119 --> 00:48:41,160
capsule protocol

1094
00:48:41,160 --> 00:48:44,000
and once there was enough information

1095
00:48:44,000 --> 00:48:47,700
excuse me the proxy could use that to

1096
00:48:47,700 --> 00:48:50,880
reuse ports between it and the target

1097
00:48:50,880 --> 00:48:53,400
and if the client and proxy both agreed

1098
00:48:53,400 --> 00:48:55,859
to support the forwarded mode

1099
00:48:55,859 --> 00:48:58,619
the client would be able to generate

1100
00:48:58,619 --> 00:49:00,060
quick packets

1101
00:49:00,060 --> 00:49:03,300
for the client Target quick connection

1102
00:49:03,300 --> 00:49:05,520
and instead of encapsulating them inside

1103
00:49:05,520 --> 00:49:07,740
of http datagrams

1104
00:49:07,740 --> 00:49:10,380
if they were short header packets they

1105
00:49:10,380 --> 00:49:12,540
could send them directly to the proxy

1106
00:49:12,540 --> 00:49:14,400
over UDP

1107
00:49:14,400 --> 00:49:16,500
where the proxy would then forward them

1108
00:49:16,500 --> 00:49:19,140
on to the Target and similarly in the

1109
00:49:19,140 --> 00:49:20,760
reverse Direction

1110
00:49:20,760 --> 00:49:23,599
next slide please

1111
00:49:24,480 --> 00:49:27,240
so I mentioned virtual connection ideas

1112
00:49:27,240 --> 00:49:28,920
without getting into much detail about

1113
00:49:28,920 --> 00:49:30,200
it

1114
00:49:30,200 --> 00:49:33,480
virtual connection ideas are a way of

1115
00:49:33,480 --> 00:49:36,060
having the connection ID bites on the

1116
00:49:36,060 --> 00:49:39,180
wire between the client and proxy be

1117
00:49:39,180 --> 00:49:41,460
different from the connection ID bytes

1118
00:49:41,460 --> 00:49:44,520
on The Wire between the proxy and Target

1119
00:49:44,520 --> 00:49:46,859
and it may not be obvious why this is is

1120
00:49:46,859 --> 00:49:48,960
useful but if we for a moment consider

1121
00:49:48,960 --> 00:49:52,800
if we didn't have virtual connection IDs

1122
00:49:52,800 --> 00:49:54,900
um if the packet between the client to

1123
00:49:54,900 --> 00:49:56,400
proxy were identical

1124
00:49:56,400 --> 00:49:58,440
to the packet between the proxy and the

1125
00:49:58,440 --> 00:49:59,940
target

1126
00:49:59,940 --> 00:50:02,220
um the proxy receiving these forwarding

1127
00:50:02,220 --> 00:50:04,380
mode packets would be receiving quick

1128
00:50:04,380 --> 00:50:06,900
packets that have connection ID bytes

1129
00:50:06,900 --> 00:50:08,819
that it did not choose

1130
00:50:08,819 --> 00:50:10,740
and if that proxy were sitting behind

1131
00:50:10,740 --> 00:50:12,599
some load balancer or other routing

1132
00:50:12,599 --> 00:50:15,359
infrastructure that depends on being

1133
00:50:15,359 --> 00:50:17,819
able to encode routing information in

1134
00:50:17,819 --> 00:50:19,980
these connection ID bytes it may not

1135
00:50:19,980 --> 00:50:22,500
arrive on the right server

1136
00:50:22,500 --> 00:50:25,319
and so by introducing virtual connection

1137
00:50:25,319 --> 00:50:26,339
ideas

1138
00:50:26,339 --> 00:50:29,460
we have an opportunity for the proxy to

1139
00:50:29,460 --> 00:50:32,160
choose the connection the connection ID

1140
00:50:32,160 --> 00:50:35,220
bites uh for quick packets that it

1141
00:50:35,220 --> 00:50:37,680
receives on this forwarding mode

1142
00:50:37,680 --> 00:50:40,619
the proxy then translates or replaces

1143
00:50:40,619 --> 00:50:42,960
that ritual connection ID with the real

1144
00:50:42,960 --> 00:50:45,960
connection ID before forwarding it on to

1145
00:50:45,960 --> 00:50:47,160
the Target

1146
00:50:47,160 --> 00:50:49,920
another good example of where a virtual

1147
00:50:49,920 --> 00:50:51,780
connection I use are useful is

1148
00:50:51,780 --> 00:50:54,480
connection migration so assume that we

1149
00:50:54,480 --> 00:50:58,859
have a client that is migrating its

1150
00:50:58,859 --> 00:51:01,500
network path with the proxy

1151
00:51:01,500 --> 00:51:03,720
um depending on whether or not the

1152
00:51:03,720 --> 00:51:05,400
target's interested in issuing more

1153
00:51:05,400 --> 00:51:07,559
connection IDs and cooperating with

1154
00:51:07,559 --> 00:51:10,200
using new connection ideas

1155
00:51:10,200 --> 00:51:12,839
um the client may wish to migrate and

1156
00:51:12,839 --> 00:51:15,000
also have those forwarded mode packet

1157
00:51:15,000 --> 00:51:18,480
connection ID bytes uh change as the

1158
00:51:18,480 --> 00:51:20,339
network path changes

1159
00:51:20,339 --> 00:51:23,940
and so by introducing virtual connection

1160
00:51:23,940 --> 00:51:26,339
ideas we're able to change the

1161
00:51:26,339 --> 00:51:28,280
connection ID bytes on The Wire

1162
00:51:28,280 --> 00:51:32,280
independent of any uh change with the

1163
00:51:32,280 --> 00:51:34,500
real connection ID

1164
00:51:34,500 --> 00:51:37,640
uh next slide please

1165
00:51:40,020 --> 00:51:43,260
so we've uh run the kind of regular

1166
00:51:43,260 --> 00:51:45,540
connect PDP implementation that we have

1167
00:51:45,540 --> 00:51:47,760
as well as our quick aware connect2dp

1168
00:51:47,760 --> 00:51:51,420
implementation uh in our lab and

1169
00:51:51,420 --> 00:51:55,559
there's certainly uh I expect that quick

1170
00:51:55,559 --> 00:51:57,240
implementations are going to mature and

1171
00:51:57,240 --> 00:52:00,059
this is our tunneling implementation is

1172
00:52:00,059 --> 00:52:01,700
only going to get better

1173
00:52:01,700 --> 00:52:05,099
by what we've seen so far is that when

1174
00:52:05,099 --> 00:52:08,339
we leverage quick aware forwarding

1175
00:52:08,339 --> 00:52:10,440
um forwarding of these quick packets

1176
00:52:10,440 --> 00:52:13,260
essentially requires an insignificant

1177
00:52:13,260 --> 00:52:16,200
amount of CPU so it's an extremely

1178
00:52:16,200 --> 00:52:19,619
efficient thing to to do

1179
00:52:19,619 --> 00:52:21,960
um it is a very lightweight way of proxy

1180
00:52:21,960 --> 00:52:22,920
and quick

1181
00:52:22,920 --> 00:52:25,819
next slide please

1182
00:52:26,520 --> 00:52:28,859
so I mentioned earlier that we're using

1183
00:52:28,859 --> 00:52:30,260
the capsule protocol

1184
00:52:30,260 --> 00:52:33,599
there are about six capsule types that

1185
00:52:33,599 --> 00:52:36,000
are part of this exchange

1186
00:52:36,000 --> 00:52:38,040
um I could come back to to this slide

1187
00:52:38,040 --> 00:52:39,660
about the details of each but it might

1188
00:52:39,660 --> 00:52:41,099
be more interesting to jump to a

1189
00:52:41,099 --> 00:52:42,780
sequence diagram where they're actually

1190
00:52:42,780 --> 00:52:46,520
used so next slide please

1191
00:52:46,800 --> 00:52:49,319
okay so consider that we have a client

1192
00:52:49,319 --> 00:52:52,740
it's sending a connect UDP request it's

1193
00:52:52,740 --> 00:52:54,900
indicating that it wants to do this

1194
00:52:54,900 --> 00:52:58,200
forwarding mode which is optional

1195
00:52:58,200 --> 00:53:01,579
um the client is also telling the proxy

1196
00:53:01,579 --> 00:53:05,819
about the client's connection ID in the

1197
00:53:05,819 --> 00:53:08,819
form of a capsule and it's also sending

1198
00:53:08,819 --> 00:53:11,400
its client initial inside of an http

1199
00:53:11,400 --> 00:53:12,420
datagram

1200
00:53:12,420 --> 00:53:15,359
on the same flight

1201
00:53:15,359 --> 00:53:18,079
the proxy then takes that information

1202
00:53:18,079 --> 00:53:20,819
optionally reuses ports

1203
00:53:20,819 --> 00:53:23,460
and if it also supports forwarding mode

1204
00:53:23,460 --> 00:53:25,500
they can go ahead and create a

1205
00:53:25,500 --> 00:53:27,780
forwarding rule in the Target to client

1206
00:53:27,780 --> 00:53:29,220
Direction

1207
00:53:29,220 --> 00:53:32,280
the proxy sends the client's quick

1208
00:53:32,280 --> 00:53:34,140
initial to the Target

1209
00:53:34,140 --> 00:53:37,700
it sends a 200 status code to the client

1210
00:53:37,700 --> 00:53:39,839
including that it it does support

1211
00:53:39,839 --> 00:53:42,660
forwarding mode acknowledging that it

1212
00:53:42,660 --> 00:53:45,660
received the client's connection ID

1213
00:53:45,660 --> 00:53:46,319
um

1214
00:53:46,319 --> 00:53:48,660
after receiving the server is quick

1215
00:53:48,660 --> 00:53:49,680
initial

1216
00:53:49,680 --> 00:53:52,020
it encapsulates that inside of an HTTP

1217
00:53:52,020 --> 00:53:56,040
datagram because long header packets are

1218
00:53:56,040 --> 00:53:58,559
always encapsulated to avoid unnecessary

1219
00:53:58,559 --> 00:54:00,059
exposure

1220
00:54:00,059 --> 00:54:03,540
now that the client knows the targets

1221
00:54:03,540 --> 00:54:05,640
connection ID it shares that with the

1222
00:54:05,640 --> 00:54:06,599
proxy

1223
00:54:06,599 --> 00:54:09,180
and we're able to complete the set of

1224
00:54:09,180 --> 00:54:10,980
forwarding rules so now we have a

1225
00:54:10,980 --> 00:54:12,720
forwarding rule in both directions

1226
00:54:12,720 --> 00:54:15,960
Target to client client to Target

1227
00:54:15,960 --> 00:54:18,540
and after acknowledging the receipts of

1228
00:54:18,540 --> 00:54:20,540
this target connection ID information

1229
00:54:20,540 --> 00:54:23,160
the client is able to use this

1230
00:54:23,160 --> 00:54:25,859
forwarding mode where it generates a

1231
00:54:25,859 --> 00:54:28,740
quick packet for the client Target quick

1232
00:54:28,740 --> 00:54:30,480
connection

1233
00:54:30,480 --> 00:54:33,180
it instead of encapsulating that inside

1234
00:54:33,180 --> 00:54:35,040
of an http datagram

1235
00:54:35,040 --> 00:54:37,619
it replaces the connection ID bytes with

1236
00:54:37,619 --> 00:54:40,500
the virtual Target connection ID bytes

1237
00:54:40,500 --> 00:54:43,740
sends it over UDP to the proxy the proxy

1238
00:54:43,740 --> 00:54:46,079
recognizes these connection ID bytes in

1239
00:54:46,079 --> 00:54:47,099
the packet

1240
00:54:47,099 --> 00:54:49,380
replaces the virtual Target connection

1241
00:54:49,380 --> 00:54:52,559
ID with the real Target connection ID

1242
00:54:52,559 --> 00:54:54,599
before forwarding it on to the Target

1243
00:54:54,599 --> 00:54:57,839
and similarly in the reverse Direction

1244
00:54:57,839 --> 00:55:00,720
next slide please

1245
00:55:00,720 --> 00:55:03,359
so that is quick aware of proxying using

1246
00:55:03,359 --> 00:55:04,980
HTTP

1247
00:55:04,980 --> 00:55:07,020
um very interested in folks reviewing

1248
00:55:07,020 --> 00:55:08,700
the draft and providing some feedback

1249
00:55:08,700 --> 00:55:10,980
and gauging interest from the working

1250
00:55:10,980 --> 00:55:14,000
group thank you

1251
00:55:16,079 --> 00:55:16,819
um

1252
00:55:16,819 --> 00:55:19,980
Martin Duke Google no hats for this

1253
00:55:19,980 --> 00:55:22,859
comment um thanks for this uh first one

1254
00:55:22,859 --> 00:55:26,040
clarifying question which quiche

1255
00:55:26,040 --> 00:55:28,740
oh yes this is uh cloudflare based on

1256
00:55:28,740 --> 00:55:30,599
cloudflare okay

1257
00:55:30,599 --> 00:55:31,319
um

1258
00:55:31,319 --> 00:55:33,540
so I I think the use case for this is

1259
00:55:33,540 --> 00:55:35,700
pretty clear but um having thought about

1260
00:55:35,700 --> 00:55:37,980
this way too long the other day uh I'm

1261
00:55:37,980 --> 00:55:39,359
concerned there are some foot guns that

1262
00:55:39,359 --> 00:55:41,280
we need to work through

1263
00:55:41,280 --> 00:55:44,099
um one is uh first of all the virtual

1264
00:55:44,099 --> 00:55:47,099
CID thing is like a great idea

1265
00:55:47,099 --> 00:55:49,500
um I'm wondering if it's correct to bind

1266
00:55:49,500 --> 00:55:53,880
those one to one to to the real cids

1267
00:55:53,880 --> 00:55:55,800
um I'm having a lot of trouble reasoning

1268
00:55:55,800 --> 00:55:57,540
about the threat model

1269
00:55:57,540 --> 00:56:01,680
of of like linkability versus like the

1270
00:56:01,680 --> 00:56:04,559
proxy anonymity of

1271
00:56:04,559 --> 00:56:06,000
um if you're I mean clearly you need to

1272
00:56:06,000 --> 00:56:08,099
change the virtual cids on in the on the

1273
00:56:08,099 --> 00:56:09,960
proxy between the proxy and the client

1274
00:56:09,960 --> 00:56:11,220
but do you actually want to change the

1275
00:56:11,220 --> 00:56:13,260
CID that comes out of the proxy to the

1276
00:56:13,260 --> 00:56:15,839
Target and I I think the answer is no

1277
00:56:15,839 --> 00:56:18,240
but that might be wrong uh similarly and

1278
00:56:18,240 --> 00:56:19,680
I think I brought this stuff on GitHub

1279
00:56:19,680 --> 00:56:21,720
but um

1280
00:56:21,720 --> 00:56:23,400
the interesting property I realized

1281
00:56:23,400 --> 00:56:25,740
about this is that if you were

1282
00:56:25,740 --> 00:56:27,720
if the proxy client connection consists

1283
00:56:27,720 --> 00:56:29,220
entirely of these sorts of forwarding

1284
00:56:29,220 --> 00:56:30,720
mode things that you can essentially

1285
00:56:30,720 --> 00:56:32,640
have no AC feedback on the mass

1286
00:56:32,640 --> 00:56:34,680
connection which is a very weird

1287
00:56:34,680 --> 00:56:38,040
situation for transport there's there's

1288
00:56:38,040 --> 00:56:40,319
an idle idle time issue which people

1289
00:56:40,319 --> 00:56:41,819
have thought about but there's other

1290
00:56:41,819 --> 00:56:43,200
things like a lot of congestion

1291
00:56:43,200 --> 00:56:44,940
controllers will like kill their

1292
00:56:44,940 --> 00:56:46,800
congestion window after a while if they

1293
00:56:46,800 --> 00:56:48,240
don't get you know if it's if it's

1294
00:56:48,240 --> 00:56:51,660
allegedly idle Etc and so I I would you

1295
00:56:51,660 --> 00:56:53,099
know one nice thing about this being the

1296
00:56:53,099 --> 00:56:54,960
transport area is like maybe some of the

1297
00:56:54,960 --> 00:56:56,160
right people here to think about that

1298
00:56:56,160 --> 00:56:58,140
really hard and make sure we eliminate a

1299
00:56:58,140 --> 00:56:59,280
lot of those foot guns at least with

1300
00:56:59,280 --> 00:57:02,220
some advisory texts but just thinking if

1301
00:57:02,220 --> 00:57:03,839
if there's something more we need to do

1302
00:57:03,839 --> 00:57:04,680
here

1303
00:57:04,680 --> 00:57:06,420
some way to like collect the acts of

1304
00:57:06,420 --> 00:57:07,859
these well you can't act them because

1305
00:57:07,859 --> 00:57:10,380
they have no packet number so um it's

1306
00:57:10,380 --> 00:57:11,880
another way thinking of it is sort of

1307
00:57:11,880 --> 00:57:13,680
it's just it's a it's this is a way of

1308
00:57:13,680 --> 00:57:15,359
negotiating a layered three tunnel or a

1309
00:57:15,359 --> 00:57:16,980
layer three forwarding situation which

1310
00:57:16,980 --> 00:57:18,660
maybe makes it okay but

1311
00:57:18,660 --> 00:57:19,859
I have a little bit of the Willies about

1312
00:57:19,859 --> 00:57:22,619
all these sorts of concerns thanks

1313
00:57:22,619 --> 00:57:24,720
yeah thank you uh just to address the

1314
00:57:24,720 --> 00:57:25,800
first comment

1315
00:57:25,800 --> 00:57:27,540
um I don't think that the virtual

1316
00:57:27,540 --> 00:57:28,800
connection ID and the real connection

1317
00:57:28,800 --> 00:57:31,020
you have to be one to one

1318
00:57:31,020 --> 00:57:32,819
um we still need to kind of flesh out

1319
00:57:32,819 --> 00:57:35,819
the details of of the protocol but uh

1320
00:57:35,819 --> 00:57:37,500
the idea is that the virtual connection

1321
00:57:37,500 --> 00:57:40,380
ID can change uh and still be mapped to

1322
00:57:40,380 --> 00:57:43,140
the same uh real connection ID and then

1323
00:57:43,140 --> 00:57:47,700
yes for uh for accommodating for there

1324
00:57:47,700 --> 00:57:49,680
not being traffic on the regular client

1325
00:57:49,680 --> 00:57:51,660
to proxy connection

1326
00:57:51,660 --> 00:57:53,579
um thus far we've been leveraging keep

1327
00:57:53,579 --> 00:57:55,920
lives uh to keep that in that stream

1328
00:57:55,920 --> 00:57:58,220
alive

1329
00:57:58,740 --> 00:58:00,240
yeah right

1330
00:58:00,240 --> 00:58:03,059
that's that's fine I like I I I feel I

1331
00:58:03,059 --> 00:58:04,619
fear that there's a problem Beyond keep

1332
00:58:04,619 --> 00:58:06,720
alive but I can't articulate it very

1333
00:58:06,720 --> 00:58:08,520
well right now thank you

1334
00:58:08,520 --> 00:58:11,240
yep thanks

1335
00:58:15,240 --> 00:58:17,280
um I think this is a an important

1336
00:58:17,280 --> 00:58:19,500
problem solve I think the draft is a

1337
00:58:19,500 --> 00:58:21,660
very elegant way of doing it even if

1338
00:58:21,660 --> 00:58:25,260
there are some details to be worked out

1339
00:58:25,260 --> 00:58:27,780
um also in the

1340
00:58:27,780 --> 00:58:31,920
in the real world often you're not using

1341
00:58:31,920 --> 00:58:34,260
this just for one connection that you

1342
00:58:34,260 --> 00:58:36,359
set up a tunnel and then never touch the

1343
00:58:36,359 --> 00:58:38,220
control Channel again

1344
00:58:38,220 --> 00:58:40,920
you're usually also still using it for

1345
00:58:40,920 --> 00:58:42,660
other traffic for other connections that

1346
00:58:42,660 --> 00:58:44,880
are coming in going at the same time so

1347
00:58:44,880 --> 00:58:46,260
yeah there's some stuff to work out with

1348
00:58:46,260 --> 00:58:49,260
certain usage patterns but that's

1349
00:58:49,260 --> 00:58:51,480
something we could do posted option I

1350
00:58:51,480 --> 00:58:52,740
think this should be in scope for a

1351
00:58:52,740 --> 00:58:55,279
returner

1352
00:59:00,240 --> 00:59:04,319
um I agree like this as clear benefits

1353
00:59:04,319 --> 00:59:06,720
so it's it's something we should work on

1354
00:59:06,720 --> 00:59:09,180
and do I have a question about

1355
00:59:09,180 --> 00:59:12,660
um virtual cids and I think this is

1356
00:59:12,660 --> 00:59:14,339
maybe something we discussed in the past

1357
00:59:14,339 --> 00:59:18,480
but I understand how like you described

1358
00:59:18,480 --> 00:59:20,880
how that works between the client and

1359
00:59:20,880 --> 00:59:24,660
the proxy but I think

1360
00:59:24,660 --> 00:59:26,339
um we would have the same problem

1361
00:59:26,339 --> 00:59:29,280
between you know the Target and the

1362
00:59:29,280 --> 00:59:33,359
proxy and having to Route Pockets based

1363
00:59:33,359 --> 00:59:38,280
on uh proxy chosen CID

1364
00:59:38,280 --> 00:59:39,540
um

1365
00:59:39,540 --> 00:59:41,640
again between the Target and the proxy

1366
00:59:41,640 --> 00:59:43,920
so I was wondering if the existing

1367
00:59:43,920 --> 00:59:45,960
mechanism that you described would also

1368
00:59:45,960 --> 00:59:48,059
solve that problem or if it's something

1369
00:59:48,059 --> 00:59:53,059
that we would need to add later on

1370
00:59:53,460 --> 00:59:56,040
yeah thank you I think we'd have to I'd

1371
00:59:56,040 --> 00:59:57,240
have to understand a little bit more

1372
00:59:57,240 --> 00:59:59,160
about exactly what you're talking about

1373
00:59:59,160 --> 01:00:01,680
their their virtual connection ideas in

1374
01:00:01,680 --> 01:00:03,660
both directions one that the proxy

1375
01:00:03,660 --> 01:00:06,180
chooses and one that the client chooses

1376
01:00:06,180 --> 01:00:09,599
and it's the receiver that's deciding

1377
01:00:09,599 --> 01:00:11,760
and the receiver in this case is is the

1378
01:00:11,760 --> 01:00:14,640
client so from packets that are coming

1379
01:00:14,640 --> 01:00:17,220
from the target to the proxy for now

1380
01:00:17,220 --> 01:00:19,740
have have the real connection ID to to

1381
01:00:19,740 --> 01:00:21,059
make sure that we don't require any

1382
01:00:21,059 --> 01:00:23,819
cooperation from the target

1383
01:00:23,819 --> 01:00:27,119
so the the real connection ID being the

1384
01:00:27,119 --> 01:00:30,299
the connection ID picked by the client

1385
01:00:30,299 --> 01:00:31,619
yes

1386
01:00:31,619 --> 01:00:35,339
right so so I I think the problem being

1387
01:00:35,339 --> 01:00:37,819
um in a situation where you require

1388
01:00:37,819 --> 01:00:40,020
routing quick packets based on

1389
01:00:40,020 --> 01:00:42,240
connection ID that proxy would have to

1390
01:00:42,240 --> 01:00:44,339
to ever say in what the connection ID is

1391
01:00:44,339 --> 01:00:45,900
in the case

1392
01:00:45,900 --> 01:00:48,500
thanks

1393
01:00:49,440 --> 01:00:51,780
hey Lucas part of your cloudflare um I

1394
01:00:51,780 --> 01:00:53,819
think this is a clear use case for this

1395
01:00:53,819 --> 01:00:56,040
it's got clear benefits it's not just a

1396
01:00:56,040 --> 01:00:58,020
micro optimization there's like some

1397
01:00:58,020 --> 01:00:59,880
some strong properties that can provide

1398
01:00:59,880 --> 01:01:02,700
the technical details yeah we need to to

1399
01:01:02,700 --> 01:01:04,859
hammer out some of the the edge cases or

1400
01:01:04,859 --> 01:01:06,720
thought guns here uh earlier draft

1401
01:01:06,720 --> 01:01:09,359
didn't quite fit the needs of like

1402
01:01:09,359 --> 01:01:11,760
Alessandro to Saluda to load balancing

1403
01:01:11,760 --> 01:01:13,740
concerns the later draft with virtual

1404
01:01:13,740 --> 01:01:16,200
SIDS there's a much clearer path um

1405
01:01:16,200 --> 01:01:18,119
toraco Mark's point I think there's ways

1406
01:01:18,119 --> 01:01:20,700
we can mitigate stuff via controlled

1407
01:01:20,700 --> 01:01:22,920
channels or other stuff like we we

1408
01:01:22,920 --> 01:01:24,720
should do this work here I think so that

1409
01:01:24,720 --> 01:01:27,720
we can actually get Collective View and

1410
01:01:27,720 --> 01:01:29,160
different deployments like same

1411
01:01:29,160 --> 01:01:30,359
technology different deployments

1412
01:01:30,359 --> 01:01:32,040
different concerns let's try and and

1413
01:01:32,040 --> 01:01:34,440
come up with Technical Solutions to this

1414
01:01:34,440 --> 01:01:36,420
so thanks for doing the work and I'm

1415
01:01:36,420 --> 01:01:38,819
always happy to review and give feedback

1416
01:01:38,819 --> 01:01:41,420
thanks

1417
01:01:47,119 --> 01:01:52,559
man Thompson this is your mom all right

1418
01:01:52,559 --> 01:01:54,299
pardon me

1419
01:01:54,299 --> 01:01:57,420
uh yeah it got short

1420
01:01:57,420 --> 01:01:59,640
the um the thing that bothers me about

1421
01:01:59,640 --> 01:02:01,559
this design aside from all of the

1422
01:02:01,559 --> 01:02:03,780
questions that Alessandra had which I

1423
01:02:03,780 --> 01:02:06,720
also agree with I'm just going to keep

1424
01:02:06,720 --> 01:02:08,899
going

1425
01:02:10,319 --> 01:02:13,079
um is the traffic analysis here is is

1426
01:02:13,079 --> 01:02:14,900
trivial

1427
01:02:14,900 --> 01:02:18,599
and I I think what this design really

1428
01:02:18,599 --> 01:02:21,480
needs is uh re-encryption at the proxy

1429
01:02:21,480 --> 01:02:24,240
as well in both directions I realize

1430
01:02:24,240 --> 01:02:25,200
that's

1431
01:02:25,200 --> 01:02:28,440
unfortunate and maybe less efficient but

1432
01:02:28,440 --> 01:02:31,200
the Privacy properties of the protocol

1433
01:02:31,200 --> 01:02:32,220
uh

1434
01:02:32,220 --> 01:02:34,920
are not that great until you do that so

1435
01:02:34,920 --> 01:02:36,960
I'd I'd like to at least consider that

1436
01:02:36,960 --> 01:02:39,059
yeah I think echo's raised this point in

1437
01:02:39,059 --> 01:02:43,319
the past it's just concretely not biting

1438
01:02:43,319 --> 01:02:45,359
so I will continue

1439
01:02:45,359 --> 01:02:46,980
um

1440
01:02:46,980 --> 01:02:49,980
because racist pointed before

1441
01:02:49,980 --> 01:02:51,900
I think he raised it in in terms of

1442
01:02:51,900 --> 01:02:54,180
saying what's your threat model uh which

1443
01:02:54,180 --> 01:02:56,520
is a nice way of saying uh I don't like

1444
01:02:56,520 --> 01:02:58,140
this design

1445
01:02:58,140 --> 01:02:59,640
so

1446
01:02:59,640 --> 01:03:02,660
um please consider that

1447
01:03:04,520 --> 01:03:07,599
[Music]

1448
01:03:12,900 --> 01:03:15,359
sorry this microphone stand is uh

1449
01:03:15,359 --> 01:03:18,720
impaired uh David schenazi

1450
01:03:18,720 --> 01:03:21,000
ask Enthusiast

1451
01:03:21,000 --> 01:03:23,520
um so unsurprisingly I think like yeah I

1452
01:03:23,520 --> 01:03:26,460
agree with people there's uh there's a

1453
01:03:26,460 --> 01:03:29,400
useful there's a need for this it really

1454
01:03:29,400 --> 01:03:32,460
solves something there are a lot of

1455
01:03:32,460 --> 01:03:34,319
details to hammer out but yeah I work

1456
01:03:34,319 --> 01:03:35,819
this working group seems like the right

1457
01:03:35,819 --> 01:03:38,880
place to do that so plus one to uh

1458
01:03:38,880 --> 01:03:40,920
chartering recharging the working group

1459
01:03:40,920 --> 01:03:42,720
in such a way that this fits in and then

1460
01:03:42,720 --> 01:03:45,240
adopting this

1461
01:03:45,240 --> 01:03:49,619
um I think uh Martin and Eric are

1462
01:03:49,619 --> 01:03:51,000
operating with different threat models

1463
01:03:51,000 --> 01:03:53,040
which is fine so we might need you know

1464
01:03:53,040 --> 01:03:55,619
multiple modes of operation

1465
01:03:55,619 --> 01:03:58,260
um one of the really nice properties if

1466
01:03:58,260 --> 01:04:01,020
you don't re-encrypt is that it allows

1467
01:04:01,020 --> 01:04:02,700
you to implement

1468
01:04:02,700 --> 01:04:04,680
the forwarding mode

1469
01:04:04,680 --> 01:04:07,040
and

1470
01:04:07,040 --> 01:04:10,140
ebpf fully on the neck without ever

1471
01:04:10,140 --> 01:04:13,440
touching the CPU which is pretty banana

1472
01:04:13,440 --> 01:04:16,260
pants awesome and uh so I think Eric has

1473
01:04:16,260 --> 01:04:18,660
done that which is crazy awesome

1474
01:04:18,660 --> 01:04:21,180
great work uh and so I think for some

1475
01:04:21,180 --> 01:04:23,280
use cases that's what like that makes a

1476
01:04:23,280 --> 01:04:24,660
huge difference and allows you to scale

1477
01:04:24,660 --> 01:04:27,000
way more and for other use cases that

1478
01:04:27,000 --> 01:04:29,099
Martin has maybe we don't so maybe we

1479
01:04:29,099 --> 01:04:30,599
have another mode where we do we encrypt

1480
01:04:30,599 --> 01:04:32,819
which are both valid things we'll have

1481
01:04:32,819 --> 01:04:34,440
to talk about that more but I think the

1482
01:04:34,440 --> 01:04:35,640
working group is the right place for

1483
01:04:35,640 --> 01:04:37,759
this

1484
01:04:38,299 --> 01:04:40,859
thank you

1485
01:04:40,859 --> 01:04:43,380
wonderful thank you very much we're at

1486
01:04:43,380 --> 01:04:44,940
time for this presentation but it again

1487
01:04:44,940 --> 01:04:46,260
sounds like we've got a good bit of

1488
01:04:46,260 --> 01:04:48,119
interest and people think that this is a

1489
01:04:48,119 --> 01:04:49,740
valuable problem to solve and this

1490
01:04:49,740 --> 01:04:50,940
working group is probably the right

1491
01:04:50,940 --> 01:04:53,460
place to solve it

1492
01:04:53,460 --> 01:04:55,500
next up we have access service

1493
01:04:55,500 --> 01:04:58,880
description objects

1494
01:05:10,920 --> 01:05:14,220
okay hello everybody this is Ben

1495
01:05:14,220 --> 01:05:17,339
Schwartz from alphabet

1496
01:05:17,339 --> 01:05:18,660
I guess

1497
01:05:18,660 --> 01:05:21,380
uh

1498
01:05:21,380 --> 01:05:24,420
and this is I changed the title to

1499
01:05:24,420 --> 01:05:28,319
access service description URI

1500
01:05:28,319 --> 01:05:29,760
okay

1501
01:05:29,760 --> 01:05:32,640
so what what am I talking about what is

1502
01:05:32,640 --> 01:05:35,339
an access service

1503
01:05:35,339 --> 01:05:37,559
uh I came up with some kind of

1504
01:05:37,559 --> 01:05:38,940
definition for what I mean by this

1505
01:05:38,940 --> 01:05:40,740
basically it's a thing you use to access

1506
01:05:40,740 --> 01:05:44,419
the internet using http

1507
01:05:44,579 --> 01:05:46,500
um I mean

1508
01:05:46,500 --> 01:05:48,119
these things

1509
01:05:48,119 --> 01:05:51,299
uh we have all these things now in HTTP

1510
01:05:51,299 --> 01:05:53,880
that allow you to access the internet

1511
01:05:53,880 --> 01:05:57,540
over HTTP and so this presentation is

1512
01:05:57,540 --> 01:06:01,020
about this draft is about how do I turn

1513
01:06:01,020 --> 01:06:02,640
it on

1514
01:06:02,640 --> 01:06:06,119
uh so here's the like status quo of how

1515
01:06:06,119 --> 01:06:09,059
you choose your proxy server

1516
01:06:09,059 --> 01:06:13,079
you like put in an FTP proxy or

1517
01:06:13,079 --> 01:06:14,780
something

1518
01:06:14,780 --> 01:06:19,500
uh and this is how you configure a VPN

1519
01:06:19,500 --> 01:06:21,839
server so like I guess if we want to

1520
01:06:21,839 --> 01:06:24,960
activate connect IP it goes in here

1521
01:06:24,960 --> 01:06:26,160
maybe

1522
01:06:26,160 --> 01:06:29,339
and this is how you choose your dough

1523
01:06:29,339 --> 01:06:31,799
server uh

1524
01:06:31,799 --> 01:06:34,680
I I wrote some of this code

1525
01:06:34,680 --> 01:06:37,319
so

1526
01:06:37,319 --> 01:06:41,880
this is uh this is the status quo

1527
01:06:41,880 --> 01:06:44,640
and uh so like how many different times

1528
01:06:44,640 --> 01:06:46,799
are we going to ask users to enter the

1529
01:06:46,799 --> 01:06:48,299
config information

1530
01:06:48,299 --> 01:06:50,400
uh how many different times does the

1531
01:06:50,400 --> 01:06:52,859
user need to authenticate this connects

1532
01:06:52,859 --> 01:06:54,960
to something I heard David scanzi say a

1533
01:06:54,960 --> 01:06:58,980
few minutes ago that uh that it's easy

1534
01:06:58,980 --> 01:07:01,980
to imagine Services where there are

1535
01:07:01,980 --> 01:07:03,960
there's a UDP proxy service there's an

1536
01:07:03,960 --> 01:07:05,940
IP proxy service maybe there are other

1537
01:07:05,940 --> 01:07:09,660
proxy services and uh and any given

1538
01:07:09,660 --> 01:07:12,240
connection is uses one of them as

1539
01:07:12,240 --> 01:07:13,920
appropriate based on how that app

1540
01:07:13,920 --> 01:07:15,900
happens to be implemented based on what

1541
01:07:15,900 --> 01:07:19,559
transport protocol it's using so this

1542
01:07:19,559 --> 01:07:22,020
this is sort of based on an idea that

1543
01:07:22,020 --> 01:07:24,000
from the user's perspective these this

1544
01:07:24,000 --> 01:07:27,420
this whole bundle is really one service

1545
01:07:27,420 --> 01:07:30,119
the user's mental model is that this is

1546
01:07:30,119 --> 01:07:33,000
an access service or a proxy service or

1547
01:07:33,000 --> 01:07:35,460
a VPN service

1548
01:07:35,460 --> 01:07:37,039
so

1549
01:07:37,039 --> 01:07:38,940
that's one problem and the other problem

1550
01:07:38,940 --> 01:07:40,799
is authentication how many times does

1551
01:07:40,799 --> 01:07:42,539
the user need to authenticate to all of

1552
01:07:42,539 --> 01:07:43,859
these different Services you know these

1553
01:07:43,859 --> 01:07:46,619
are different HTTP endpoints there's no

1554
01:07:46,619 --> 01:07:48,420
potentially even on different Origins

1555
01:07:48,420 --> 01:07:50,539
there's like no

1556
01:07:50,539 --> 01:07:54,059
necessary rule that they all need to be

1557
01:07:54,059 --> 01:07:58,220
authenticated in the same way

1558
01:07:59,220 --> 01:08:00,059
um

1559
01:08:00,059 --> 01:08:04,020
so the goal of this draft is to enable a

1560
01:08:04,020 --> 01:08:06,720
world where the user just enters one

1561
01:08:06,720 --> 01:08:08,339
magic string

1562
01:08:08,339 --> 01:08:12,599
a URI into one user interface somewhere

1563
01:08:12,599 --> 01:08:15,420
to activate this thing this access

1564
01:08:15,420 --> 01:08:17,819
service and the users authenticate to

1565
01:08:17,819 --> 01:08:19,979
that once

1566
01:08:19,979 --> 01:08:22,738
and that's that's all they need to worry

1567
01:08:22,738 --> 01:08:24,919
about

1568
01:08:25,979 --> 01:08:28,979
uh so like here's a very detailed

1569
01:08:28,979 --> 01:08:30,960
rundown of how this all

1570
01:08:30,960 --> 01:08:32,399
would work

1571
01:08:32,399 --> 01:08:35,819
but basically there's a URL the user has

1572
01:08:35,819 --> 01:08:39,238
the URL they plop it into some user

1573
01:08:39,238 --> 01:08:41,939
interface that which then the client

1574
01:08:41,939 --> 01:08:43,620
fetches it

1575
01:08:43,620 --> 01:08:45,779
you know periodically when it expires

1576
01:08:45,779 --> 01:08:47,880
and fetches it again and and the thing

1577
01:08:47,880 --> 01:08:51,420
it gets back tells it all the different

1578
01:08:51,420 --> 01:08:56,899
Services sub services that are available

1579
01:08:56,939 --> 01:09:01,080
and crucially the the authentication is

1580
01:09:01,080 --> 01:09:03,299
done on the access

1581
01:09:03,299 --> 01:09:06,600
service description URL and then those

1582
01:09:06,600 --> 01:09:07,799
that authentication information

1583
01:09:07,799 --> 01:09:09,238
transfers to all these different

1584
01:09:09,238 --> 01:09:10,439
services so we don't need to

1585
01:09:10,439 --> 01:09:13,140
authenticate them separately

1586
01:09:13,140 --> 01:09:17,399
so what's at this URL uh I mean it

1587
01:09:17,399 --> 01:09:19,140
doesn't the exact format doesn't matter

1588
01:09:19,140 --> 01:09:20,698
but you could call this a placeholder

1589
01:09:20,698 --> 01:09:23,939
but fundamentally it's just a trivial

1590
01:09:23,939 --> 01:09:26,939
structure containing the the templates

1591
01:09:26,939 --> 01:09:28,979
for all these different things uh some

1592
01:09:28,979 --> 01:09:32,160
of you may note that in addition to the

1593
01:09:32,160 --> 01:09:35,880
connect UDP connect IP and and do

1594
01:09:35,880 --> 01:09:38,580
templates here there's also uh some

1595
01:09:38,580 --> 01:09:41,040
other stuff for TCP and HTTP

1596
01:09:41,040 --> 01:09:42,660
um I have five minutes maybe at the end

1597
01:09:42,660 --> 01:09:44,759
of the session to talk about that so

1598
01:09:44,759 --> 01:09:46,979
that would be like a connect TCP

1599
01:09:46,979 --> 01:09:50,219
uh thing if we wanted to do that so this

1600
01:09:50,219 --> 01:09:51,960
sort of imagines a world where we've

1601
01:09:51,960 --> 01:09:53,880
we've fully transitioned to this kind of

1602
01:09:53,880 --> 01:09:56,040
template driven description of proxies

1603
01:09:56,040 --> 01:09:57,540
and so we have this nice parallel

1604
01:09:57,540 --> 01:09:59,340
construction for all of our different

1605
01:09:59,340 --> 01:10:02,640
Protocols are described the same way

1606
01:10:02,640 --> 01:10:05,100
so this was uh I presented this at the

1607
01:10:05,100 --> 01:10:06,780
last session but a bunch of things have

1608
01:10:06,780 --> 01:10:10,440
changed here uh so there's the those

1609
01:10:10,440 --> 01:10:14,160
template driven TCP proxies and such and

1610
01:10:14,160 --> 01:10:17,880
I've removed any normative mention of

1611
01:10:17,880 --> 01:10:19,800
oblivious HTTP from this which

1612
01:10:19,800 --> 01:10:22,020
previously some oblivious HTTP stuff was

1613
01:10:22,020 --> 01:10:23,520
mixed in here it seemed like that was

1614
01:10:23,520 --> 01:10:25,580
not popular

1615
01:10:25,580 --> 01:10:28,980
uh so now instead of having key configs

1616
01:10:28,980 --> 01:10:31,260
in here none of that the key configs can

1617
01:10:31,260 --> 01:10:33,239
be described by some other object that

1618
01:10:33,239 --> 01:10:36,480
uh Tommy Polly has a draft for

1619
01:10:36,480 --> 01:10:38,280
and I added this discussion of

1620
01:10:38,280 --> 01:10:39,960
authentication which I hadn't been

1621
01:10:39,960 --> 01:10:42,679
talking about yet

1622
01:10:43,199 --> 01:10:44,699
um I want to highlight that what I

1623
01:10:44,699 --> 01:10:46,920
really think would be even more

1624
01:10:46,920 --> 01:10:48,920
interesting here it's not in the draft

1625
01:10:48,920 --> 01:10:53,100
is a vanity URI scheme for this so you

1626
01:10:53,100 --> 01:10:55,460
just you know replace https

1627
01:10:55,460 --> 01:10:59,880
colon with mask colon and now you can

1628
01:10:59,880 --> 01:11:01,920
imagine saying you know okay how do I

1629
01:11:01,920 --> 01:11:03,659
activate an access service for my device

1630
01:11:03,659 --> 01:11:09,020
we just click on a mask colon hyperlink

1631
01:11:09,020 --> 01:11:13,280
and uh this is very dangerous

1632
01:11:13,280 --> 01:11:16,380
uh but it's very powerful and basically

1633
01:11:16,380 --> 01:11:18,239
I have faith that the very small number

1634
01:11:18,239 --> 01:11:19,560
of implementers who actually have to

1635
01:11:19,560 --> 01:11:20,900
think about this because it's only

1636
01:11:20,900 --> 01:11:23,640
basically uh operating systems and

1637
01:11:23,640 --> 01:11:24,780
browsers

1638
01:11:24,780 --> 01:11:27,659
would um would think very carefully and

1639
01:11:27,659 --> 01:11:29,640
maybe not support it but if they did

1640
01:11:29,640 --> 01:11:31,679
support it would would put up suitable

1641
01:11:31,679 --> 01:11:32,880
barriers

1642
01:11:32,880 --> 01:11:35,659
um to make it safe

1643
01:11:37,280 --> 01:11:42,420
so that's my very simple proposal and uh

1644
01:11:42,420 --> 01:11:45,960
I'd like to see this adopted in mask

1645
01:11:45,960 --> 01:11:48,420
um presumably after some kind of

1646
01:11:48,420 --> 01:11:51,440
retardering discussion

1647
01:11:53,600 --> 01:11:57,140
I think that's it

1648
01:12:00,120 --> 01:12:02,540
Eric

1649
01:12:03,780 --> 01:12:06,719
yeah overall I I like this I want to see

1650
01:12:06,719 --> 01:12:08,040
it happen somewhere at least something

1651
01:12:08,040 --> 01:12:10,199
along these lines but I'm not completely

1652
01:12:10,199 --> 01:12:12,239
convinced this this fits for a potential

1653
01:12:12,239 --> 01:12:14,040
retire in this group but

1654
01:12:14,040 --> 01:12:16,560
skimmed into preview discussion we're

1655
01:12:16,560 --> 01:12:17,940
going to have here at the end of this

1656
01:12:17,940 --> 01:12:20,580
meeting but assuming the plan is we want

1657
01:12:20,580 --> 01:12:23,219
to retire this group to be focused

1658
01:12:23,219 --> 01:12:26,460
tightly to one down after finishing up

1659
01:12:26,460 --> 01:12:28,500
the necessary work then I think we

1660
01:12:28,500 --> 01:12:30,420
should leave this group focused on

1661
01:12:30,420 --> 01:12:33,179
proxying UDP and IP and similar stuff

1662
01:12:33,179 --> 01:12:34,920
around this and this is this proposal is

1663
01:12:34,920 --> 01:12:36,360
more of just a general proxy and thing

1664
01:12:36,360 --> 01:12:38,520
so if we return a lot of stuff like this

1665
01:12:38,520 --> 01:12:39,239
where

1666
01:12:39,239 --> 01:12:40,980
taking the big risk of returning this

1667
01:12:40,980 --> 01:12:42,480
working group into becoming just a

1668
01:12:42,480 --> 01:12:45,000
general proxy working group and

1669
01:12:45,000 --> 01:12:46,679
kind of afraid that's too much scope

1670
01:12:46,679 --> 01:12:48,659
that's apply that will lead to this be a

1671
01:12:48,659 --> 01:12:49,800
permanent working group and I don't know

1672
01:12:49,800 --> 01:12:51,780
if that's the greatest idea so I want

1673
01:12:51,780 --> 01:12:53,699
this to happen maybe something like HTTP

1674
01:12:53,699 --> 01:12:54,840
working group would be a better place

1675
01:12:54,840 --> 01:12:58,260
I'm not completely sure but I I my my

1676
01:12:58,260 --> 01:13:00,060
suggestion is maybe we don't return to

1677
01:13:00,060 --> 01:13:01,260
allow this and this doesn't leave the

1678
01:13:01,260 --> 01:13:02,820
bar for every chart of this order but

1679
01:13:02,820 --> 01:13:06,440
still please make this happen somewhere

1680
01:13:06,900 --> 01:13:08,820
okay I I don't really have an opinion

1681
01:13:08,820 --> 01:13:12,500
about venue Tommy

1682
01:13:13,620 --> 01:13:15,120
all right

1683
01:13:15,120 --> 01:13:19,020
um so thank you for updating this I I do

1684
01:13:19,020 --> 01:13:21,420
think this is better and clearer than

1685
01:13:21,420 --> 01:13:23,940
the previous proposal

1686
01:13:23,940 --> 01:13:26,100
um I'm still on the fence about the

1687
01:13:26,100 --> 01:13:28,199
exact details here

1688
01:13:28,199 --> 01:13:29,640
um

1689
01:13:29,640 --> 01:13:32,640
and like when I imagine

1690
01:13:32,640 --> 01:13:34,260
in like the short term how the

1691
01:13:34,260 --> 01:13:36,480
configuration is going to work for these

1692
01:13:36,480 --> 01:13:37,560
types of things

1693
01:13:37,560 --> 01:13:39,000
um

1694
01:13:39,000 --> 01:13:42,960
I I see two kind of main paths for

1695
01:13:42,960 --> 01:13:45,719
configuring like one kind of like you

1696
01:13:45,719 --> 01:13:47,719
like you're alluding to we have these

1697
01:13:47,719 --> 01:13:50,840
Legacy proxy configuration

1698
01:13:50,840 --> 01:13:54,420
boxes somewhere in an OS or browser

1699
01:13:54,420 --> 01:13:55,980
settings UI

1700
01:13:55,980 --> 01:13:57,780
and in those cases the user just like

1701
01:13:57,780 --> 01:13:59,940
types in a name of something

1702
01:13:59,940 --> 01:14:00,900
um

1703
01:14:00,900 --> 01:14:04,080
for those cases you know connect Works

1704
01:14:04,080 --> 01:14:05,100
already

1705
01:14:05,100 --> 01:14:08,280
and for connect UDP connect IP

1706
01:14:08,280 --> 01:14:10,679
we defined a well-known URI specifically

1707
01:14:10,679 --> 01:14:13,199
so that you know we could just try those

1708
01:14:13,199 --> 01:14:15,420
and have a well-known location off of a

1709
01:14:15,420 --> 01:14:17,400
name so

1710
01:14:17,400 --> 01:14:19,679
that case seems to have a short-term

1711
01:14:19,679 --> 01:14:21,960
solution that works okay

1712
01:14:21,960 --> 01:14:24,420
and then the other model is

1713
01:14:24,420 --> 01:14:27,000
you know we could either have a

1714
01:14:27,000 --> 01:14:30,300
application or you know we have like MDM

1715
01:14:30,300 --> 01:14:32,640
profiles I mean like you could have a

1716
01:14:32,640 --> 01:14:34,980
more complex language for describing all

1717
01:14:34,980 --> 01:14:38,040
your different uh urls

1718
01:14:38,040 --> 01:14:39,239
that

1719
01:14:39,239 --> 01:14:42,540
could come in some other format

1720
01:14:42,540 --> 01:14:43,500
um

1721
01:14:43,500 --> 01:14:46,140
so I think what you have here

1722
01:14:46,140 --> 01:14:50,340
definitely enables more automatic use

1723
01:14:50,340 --> 01:14:52,140
cases but

1724
01:14:52,140 --> 01:14:54,420
I think I'd want to see

1725
01:14:54,420 --> 01:14:56,760
more and I think it just requires more

1726
01:14:56,760 --> 01:14:59,040
discussion among this group or another

1727
01:14:59,040 --> 01:15:01,560
group more broadly to understand like

1728
01:15:01,560 --> 01:15:05,460
what's the exact kind of user flow and

1729
01:15:05,460 --> 01:15:07,260
who's going to

1730
01:15:07,260 --> 01:15:09,420
need to get this information that can't

1731
01:15:09,420 --> 01:15:11,219
either get it from a well-known URI or

1732
01:15:11,219 --> 01:15:13,440
can't have a richer configuration

1733
01:15:13,440 --> 01:15:14,640
profile

1734
01:15:14,640 --> 01:15:18,739
uh described in another way

1735
01:15:19,560 --> 01:15:21,980
thanks

1736
01:15:25,260 --> 01:15:27,960
hi hi Alex journalhowsky Google

1737
01:15:27,960 --> 01:15:29,460
um Ben I think this is very cool and I

1738
01:15:29,460 --> 01:15:30,960
think you're on to something here but I

1739
01:15:30,960 --> 01:15:32,880
think uh I still would like to better

1740
01:15:32,880 --> 01:15:35,940
understand what the user story here is

1741
01:15:35,940 --> 01:15:37,739
because one of the things that I'm

1742
01:15:37,739 --> 01:15:39,239
having a hard time wrapping my head

1743
01:15:39,239 --> 01:15:42,120
around is how we envision people using

1744
01:15:42,120 --> 01:15:43,440
this and I think that wouldn't really

1745
01:15:43,440 --> 01:15:46,020
inform the specific design which sort of

1746
01:15:46,020 --> 01:15:47,880
leaves me to say that I'm not sure that

1747
01:15:47,880 --> 01:15:50,159
we're necessarily the right group here

1748
01:15:50,159 --> 01:15:52,739
and then second the messages in the

1749
01:15:52,739 --> 01:15:55,020
zulip of taking us a dispatch but I

1750
01:15:55,020 --> 01:15:56,580
think definitely we need to better

1751
01:15:56,580 --> 01:15:58,679
understand how we envision

1752
01:15:58,679 --> 01:16:00,960
users using this I can't personally

1753
01:16:00,960 --> 01:16:02,520
think of the last time I used the proxy

1754
01:16:02,520 --> 01:16:04,020
UI to configure something other than

1755
01:16:04,020 --> 01:16:07,140
when I was developing so I'm I'm not

1756
01:16:07,140 --> 01:16:08,940
sure if the solution and the problem

1757
01:16:08,940 --> 01:16:11,400
quite match up yet

1758
01:16:11,400 --> 01:16:13,920
yeah I'll say you know we don't really

1759
01:16:13,920 --> 01:16:16,679
use these uis they exist but like you

1760
01:16:16,679 --> 01:16:17,480
know

1761
01:16:17,480 --> 01:16:20,699
I think the vastly more people install

1762
01:16:20,699 --> 01:16:24,300
VPN apps from their app store then use

1763
01:16:24,300 --> 01:16:28,260
these these like ipsec configuration uis

1764
01:16:28,260 --> 01:16:32,400
that every platform carries and uh I

1765
01:16:32,400 --> 01:16:34,080
think that's a bad thing I think that

1766
01:16:34,080 --> 01:16:36,659
that's a failure of standardization and

1767
01:16:36,659 --> 01:16:38,940
we should be trying to Define standards

1768
01:16:38,940 --> 01:16:40,800
so that we don't have separate apps for

1769
01:16:40,800 --> 01:16:43,320
all of these things that when we can we

1770
01:16:43,320 --> 01:16:46,519
can standardize it end to end

1771
01:16:46,920 --> 01:16:48,600
yeah

1772
01:16:48,600 --> 01:16:50,580
um Martin Thompson I suggested dispatch

1773
01:16:50,580 --> 01:16:52,440
I think there's a really difficult

1774
01:16:52,440 --> 01:16:54,060
question here about scope

1775
01:16:54,060 --> 01:16:56,820
uh you've talked about doe you've talked

1776
01:16:56,820 --> 01:16:58,199
about Ojai

1777
01:16:58,199 --> 01:16:59,580
you've talked about a bunch of other

1778
01:16:59,580 --> 01:17:01,860
things if I imagine all of those things

1779
01:17:01,860 --> 01:17:03,600
falling under this umbrella there's an

1780
01:17:03,600 --> 01:17:06,060
interesting sort of question that are

1781
01:17:06,060 --> 01:17:08,040
very concerned internet citizen might

1782
01:17:08,040 --> 01:17:11,580
ask about in the interest of users about

1783
01:17:11,580 --> 01:17:14,360
centralization

1784
01:17:16,260 --> 01:17:17,600
thanks

1785
01:17:17,600 --> 01:17:20,940
uh I I don't see a I don't actually see

1786
01:17:20,940 --> 01:17:22,980
a significant centralization concern

1787
01:17:22,980 --> 01:17:25,080
here I think that these you know if

1788
01:17:25,080 --> 01:17:27,300
anything this makes it a lot easier to

1789
01:17:27,300 --> 01:17:29,580
spin up new

1790
01:17:29,580 --> 01:17:31,679
um new competing access Services by

1791
01:17:31,679 --> 01:17:33,540
lowering the barrier to creating new

1792
01:17:33,540 --> 01:17:36,000
ones right now the the barrier the the

1793
01:17:36,000 --> 01:17:39,060
amount of technical work required to to

1794
01:17:39,060 --> 01:17:42,120
get started is is much more significant

1795
01:17:42,120 --> 01:17:45,420
yeah the reason I said that is that in

1796
01:17:45,420 --> 01:17:48,300
your description you had one UI

1797
01:17:48,300 --> 01:17:52,140
affordance and one authentication and

1798
01:17:52,140 --> 01:17:54,420
that's the sort of thing that bothers me

1799
01:17:54,420 --> 01:17:55,620
when it comes to these sorts of

1800
01:17:55,620 --> 01:17:58,460
diversity of services

1801
01:18:01,640 --> 01:18:04,860
I I think there's something here like

1802
01:18:04,860 --> 01:18:07,500
there's something in this space I agree

1803
01:18:07,500 --> 01:18:10,260
that like it's not 100 clear to me like

1804
01:18:10,260 --> 01:18:13,920
what the UI flow is and kind of

1805
01:18:13,920 --> 01:18:16,860
what the boundary is of this is so like

1806
01:18:16,860 --> 01:18:19,920
how many things do we have in here and

1807
01:18:19,920 --> 01:18:22,920
that that brings a question to Scopes so

1808
01:18:22,920 --> 01:18:25,380
I think I I want to see this work happen

1809
01:18:25,380 --> 01:18:27,480
to or at least get a little bit further

1810
01:18:27,480 --> 01:18:29,699
down the road to like really understand

1811
01:18:29,699 --> 01:18:33,120
where we're going with it but I'll I'll

1812
01:18:33,120 --> 01:18:35,040
plus one previous comments that maybe

1813
01:18:35,040 --> 01:18:37,140
like mask itself is not the right place

1814
01:18:37,140 --> 01:18:39,900
because it touches doe and probably Ohio

1815
01:18:39,900 --> 01:18:42,060
and a lot of other things

1816
01:18:42,060 --> 01:18:44,239
foreign

1817
01:18:45,860 --> 01:18:48,179
thank you very much ben it sounds like

1818
01:18:48,179 --> 01:18:49,739
there is interest in seeing this go

1819
01:18:49,739 --> 01:18:52,199
forwards in some form somewhere but

1820
01:18:52,199 --> 01:18:53,820
potentially we need to look for a

1821
01:18:53,820 --> 01:18:56,960
dispatch or something like that

1822
01:18:57,179 --> 01:18:59,760
next up we have HTTP proxy status

1823
01:18:59,760 --> 01:19:02,480
parameters

1824
01:19:15,719 --> 01:19:19,140
all right hello everyone

1825
01:19:19,140 --> 01:19:22,260
uh so this is a pretty minor little

1826
01:19:22,260 --> 01:19:24,540
addition and

1827
01:19:24,540 --> 01:19:27,060
it's uh this one straddles the boundary

1828
01:19:27,060 --> 01:19:31,440
between mask and just generic HTTP for

1829
01:19:31,440 --> 01:19:34,620
proxies but uh generating sharing it

1830
01:19:34,620 --> 01:19:36,540
here because it really has to do with

1831
01:19:36,540 --> 01:19:40,800
this uh forward proxy privacy proxy use

1832
01:19:40,800 --> 01:19:42,960
case

1833
01:19:42,960 --> 01:19:46,040
all right so first some background uh

1834
01:19:46,040 --> 01:19:48,840
we're talking about a addition to proxy

1835
01:19:48,840 --> 01:19:51,300
status so what is proxy status

1836
01:19:51,300 --> 01:19:52,199
um

1837
01:19:52,199 --> 01:19:55,860
this is defined in a recent RFC 9209

1838
01:19:55,860 --> 01:19:58,320
it's a new header field that lets

1839
01:19:58,320 --> 01:20:01,380
proxies tell clients extra information

1840
01:20:01,380 --> 01:20:03,659
in their responses

1841
01:20:03,659 --> 01:20:05,659
um it includes the

1842
01:20:05,659 --> 01:20:07,980
list of identifiers of the different

1843
01:20:07,980 --> 01:20:11,340
proxies that handle the given request

1844
01:20:11,340 --> 01:20:13,980
um that's not super interesting for this

1845
01:20:13,980 --> 01:20:15,300
but

1846
01:20:15,300 --> 01:20:17,760
it also includes an extensible list of

1847
01:20:17,760 --> 01:20:19,739
parameters that can include errors and

1848
01:20:19,739 --> 01:20:21,420
Upstream details

1849
01:20:21,420 --> 01:20:23,280
Etc

1850
01:20:23,280 --> 01:20:26,640
so why is this relevant for mask

1851
01:20:26,640 --> 01:20:27,840
um I don't think we've talked about it

1852
01:20:27,840 --> 01:20:31,140
in this group but in practicality it is

1853
01:20:31,140 --> 01:20:34,199
very very useful for connect connect UDP

1854
01:20:34,199 --> 01:20:36,480
and connect IP proxies it's also useful

1855
01:20:36,480 --> 01:20:39,600
for reverse proxies too

1856
01:20:39,600 --> 01:20:40,620
um

1857
01:20:40,620 --> 01:20:42,960
and in the case where we are currently

1858
01:20:42,960 --> 01:20:45,840
using mask for private relay we use this

1859
01:20:45,840 --> 01:20:49,260
status all the time for example to

1860
01:20:49,260 --> 01:20:52,140
communicate DNS failures or that you had

1861
01:20:52,140 --> 01:20:55,460
it on ritual IP and this lets the client

1862
01:20:55,460 --> 01:20:58,500
determine what errors to show or what

1863
01:20:58,500 --> 01:21:00,179
policy to apply as far as saying oh

1864
01:21:00,179 --> 01:21:03,060
maybe this is a local network resource

1865
01:21:03,060 --> 01:21:04,920
um so as an example

1866
01:21:04,920 --> 01:21:07,140
you may get back a proxy status that

1867
01:21:07,140 --> 01:21:10,020
says hey your example proxy hit a DNS

1868
01:21:10,020 --> 01:21:13,199
error and that error was an X domain and

1869
01:21:13,199 --> 01:21:15,360
so now you know that you were trying to

1870
01:21:15,360 --> 01:21:17,159
reach a domain that doesn't really exist

1871
01:21:17,159 --> 01:21:21,000
at least on the public DNS

1872
01:21:21,000 --> 01:21:24,239
so to see how that works out

1873
01:21:24,239 --> 01:21:27,900
um clients doing connect UDP to an uh or

1874
01:21:27,900 --> 01:21:29,239
connect or connect UDP to a

1875
01:21:29,239 --> 01:21:32,280
bad.example.com the proxy will try to

1876
01:21:32,280 --> 01:21:34,860
resolve that get to NX domain says hey

1877
01:21:34,860 --> 01:21:37,800
sorry 502 um here's the error so that

1878
01:21:37,800 --> 01:21:40,280
works fine

1879
01:21:40,679 --> 01:21:43,260
okay so what is missing what's the

1880
01:21:43,260 --> 01:21:46,080
problem that we're trying to solve so

1881
01:21:46,080 --> 01:21:47,460
in

1882
01:21:47,460 --> 01:21:50,460
the successful cases

1883
01:21:50,460 --> 01:21:53,820
for um being able to actually connect to

1884
01:21:53,820 --> 01:21:56,699
a server over the proxy and actually

1885
01:21:56,699 --> 01:21:59,340
having DNS work there isn't a parameter

1886
01:21:59,340 --> 01:22:03,540
to communicate any DNS response details

1887
01:22:03,540 --> 01:22:06,480
there is a next hop parameter which can

1888
01:22:06,480 --> 01:22:08,340
contain one

1889
01:22:08,340 --> 01:22:10,860
token which is a name or an IP address

1890
01:22:10,860 --> 01:22:13,260
or an alias

1891
01:22:13,260 --> 01:22:15,659
um but that's not really the same as

1892
01:22:15,659 --> 01:22:17,760
saying you have DNS response details and

1893
01:22:17,760 --> 01:22:19,800
why would you want DNS response details

1894
01:22:19,800 --> 01:22:21,540
so there are many different reasons but

1895
01:22:21,540 --> 01:22:24,179
the one I'm concerned about here

1896
01:22:24,179 --> 01:22:29,880
is the fact that uh clients can use uh

1897
01:22:29,880 --> 01:22:32,520
DNS responses including like a cname

1898
01:22:32,520 --> 01:22:33,360
chain

1899
01:22:33,360 --> 01:22:36,300
as well as the resulting IP address that

1900
01:22:36,300 --> 01:22:39,900
you connect to to detect uh cname

1901
01:22:39,900 --> 01:22:43,500
cloaking or IP cloaking so this is a

1902
01:22:43,500 --> 01:22:45,659
case where I'm going to what looks like

1903
01:22:45,659 --> 01:22:49,860
a benign domain but it's actually being

1904
01:22:49,860 --> 01:22:54,300
C named to a uh name that maybe I want

1905
01:22:54,300 --> 01:22:56,340
to apply special policy towards because

1906
01:22:56,340 --> 01:22:57,780
it is

1907
01:22:57,780 --> 01:22:59,940
a endpoint that is doing a lot of

1908
01:22:59,940 --> 01:23:02,400
tracking or data collection or something

1909
01:23:02,400 --> 01:23:04,860
that the user wants to block for some

1910
01:23:04,860 --> 01:23:06,960
other reason or wants to apply some

1911
01:23:06,960 --> 01:23:08,760
policy to

1912
01:23:08,760 --> 01:23:12,360
um or even maybe a case where instead of

1913
01:23:12,360 --> 01:23:16,980
using a cname it is directly going to an

1914
01:23:16,980 --> 01:23:19,620
IP address that is a known tracking

1915
01:23:19,620 --> 01:23:23,520
endpoint or some other uh concerning IP

1916
01:23:23,520 --> 01:23:25,020
address that we want to be able to apply

1917
01:23:25,020 --> 01:23:26,820
policy towards

1918
01:23:26,820 --> 01:23:28,620
and you could solve this by having

1919
01:23:28,620 --> 01:23:31,199
clients always do their own DNS lookups

1920
01:23:31,199 --> 01:23:34,260
before they use the proxy or you know do

1921
01:23:34,260 --> 01:23:35,760
dough or something else through the

1922
01:23:35,760 --> 01:23:37,140
proxy itself

1923
01:23:37,140 --> 01:23:38,659
but

1924
01:23:38,659 --> 01:23:41,100
that definitely is a lot less performant

1925
01:23:41,100 --> 01:23:42,840
than what we're able to do with the

1926
01:23:42,840 --> 01:23:44,760
normal connector connect UDP

1927
01:23:44,760 --> 01:23:46,520
and it's

1928
01:23:46,520 --> 01:23:49,980
not uh I think a good trade-off to say

1929
01:23:49,980 --> 01:23:54,060
that in order to be able to apply uh

1930
01:23:54,060 --> 01:23:57,020
cname cloaking prevention or IP cloaking

1931
01:23:57,020 --> 01:24:00,480
preventions that you need to lose a lot

1932
01:24:00,480 --> 01:24:03,060
of the performance wins that make

1933
01:24:03,060 --> 01:24:03,659
um

1934
01:24:03,659 --> 01:24:05,820
going through a proxy viable for a

1935
01:24:05,820 --> 01:24:08,480
browser use case

1936
01:24:09,060 --> 01:24:11,460
so to go back to the use case here if we

1937
01:24:11,460 --> 01:24:14,040
have a successful connect for example to

1938
01:24:14,040 --> 01:24:17,040
example.com

1939
01:24:17,219 --> 01:24:20,600
the proxy itself is doing a resolution

1940
01:24:20,600 --> 01:24:24,060
it knows if there is a c name there it

1941
01:24:24,060 --> 01:24:25,860
knows what the IP address is the client

1942
01:24:25,860 --> 01:24:28,500
does not learn that however it just gets

1943
01:24:28,500 --> 01:24:32,219
back at 200 okay proxy status that can

1944
01:24:32,219 --> 01:24:34,679
include for example the next hop and

1945
01:24:34,679 --> 01:24:35,940
that's just the name that we originally

1946
01:24:35,940 --> 01:24:38,219
requested

1947
01:24:38,219 --> 01:24:39,540
so

1948
01:24:39,540 --> 01:24:42,540
the concerning case is let's say this is

1949
01:24:42,540 --> 01:24:46,080
a cname or IP cloaking and I'm happily

1950
01:24:46,080 --> 01:24:47,940
going to example.com but now it's being

1951
01:24:47,940 --> 01:24:50,100
c-named to tracker dot example and it

1952
01:24:50,100 --> 01:24:51,060
has

1953
01:24:51,060 --> 01:24:53,040
an IP address that is somehow concerning

1954
01:24:53,040 --> 01:24:54,600
to me potentially

1955
01:24:54,600 --> 01:24:57,060
and that response looks exactly the same

1956
01:24:57,060 --> 01:25:00,300
I cannot tell uh what's going on there

1957
01:25:00,300 --> 01:25:03,300
so the proposal is very very simple it's

1958
01:25:03,300 --> 01:25:06,239
just to add one new parameter currently

1959
01:25:06,239 --> 01:25:08,340
calling it DNS used

1960
01:25:08,340 --> 01:25:11,340
and that is essentially the the DNS

1961
01:25:11,340 --> 01:25:14,219
answer and chain of aliases that was

1962
01:25:14,219 --> 01:25:17,580
used to create this connection

1963
01:25:17,580 --> 01:25:18,420
um

1964
01:25:18,420 --> 01:25:21,719
and so a client would be able to read

1965
01:25:21,719 --> 01:25:24,360
this and apply whatever policy it has in

1966
01:25:24,360 --> 01:25:26,340
the browser this is going to be about

1967
01:25:26,340 --> 01:25:29,460
preventing cookie sharing or potentially

1968
01:25:29,460 --> 01:25:32,420
blocking a resource

1969
01:25:32,580 --> 01:25:35,940
um and the proxy status parameter for

1970
01:25:35,940 --> 01:25:38,280
DNS use is very simple it would just be

1971
01:25:38,280 --> 01:25:41,640
a string that is a list of

1972
01:25:41,640 --> 01:25:46,020
the IP address and any aliases or C

1973
01:25:46,020 --> 01:25:48,920
names that were on that chain

1974
01:25:50,880 --> 01:25:51,960
so

1975
01:25:51,960 --> 01:25:54,659
this particular proposal is very limited

1976
01:25:54,659 --> 01:25:56,400
and very minimal

1977
01:25:56,400 --> 01:25:57,719
um

1978
01:25:57,719 --> 01:26:01,199
it's intentionally that way to be a very

1979
01:26:01,199 --> 01:26:05,040
simple to add proxies can add this

1980
01:26:05,040 --> 01:26:06,780
um with whatever information they have

1981
01:26:06,780 --> 01:26:08,760
it doesn't require any extra negotiation

1982
01:26:08,760 --> 01:26:11,600
and it's just extra useful information

1983
01:26:11,600 --> 01:26:14,460
and it solves a real problem

1984
01:26:14,460 --> 01:26:16,739
um that we have for our browser and I

1985
01:26:16,739 --> 01:26:18,960
think when we discuss this on list

1986
01:26:18,960 --> 01:26:22,980
uh other people mentioned that they uh

1987
01:26:22,980 --> 01:26:25,500
would have use for similar information

1988
01:26:25,500 --> 01:26:27,060
I also want to point out there's

1989
01:26:27,060 --> 01:26:29,280
definitely room for more

1990
01:26:29,280 --> 01:26:32,219
work and thought about DNS results over

1991
01:26:32,219 --> 01:26:33,900
a proxy

1992
01:26:33,900 --> 01:26:36,719
this does not address how would you do

1993
01:26:36,719 --> 01:26:38,880
DNS SEC validation over proxy how would

1994
01:26:38,880 --> 01:26:41,100
you get svcb parameters

1995
01:26:41,100 --> 01:26:44,040
uh if you want to do ech or alpn

1996
01:26:44,040 --> 01:26:45,360
negotiation

1997
01:26:45,360 --> 01:26:46,500
um

1998
01:26:46,500 --> 01:26:48,860
those cases require

1999
01:26:48,860 --> 01:26:51,239
more active work

2000
01:26:51,239 --> 01:26:53,460
on a proxy to say please also request

2001
01:26:53,460 --> 01:26:56,760
these things and give me the responses

2002
01:26:56,760 --> 01:26:57,480
um

2003
01:26:57,480 --> 01:26:59,600
and we would want

2004
01:26:59,600 --> 01:27:02,159
more complicated negotiation maybe we

2005
01:27:02,159 --> 01:27:03,420
could use capsules for those maybe

2006
01:27:03,420 --> 01:27:05,520
they're other headers Etc

2007
01:27:05,520 --> 01:27:07,800
um so I think there's work to do in that

2008
01:27:07,800 --> 01:27:11,179
area but I would encourage us to uh

2009
01:27:11,179 --> 01:27:13,860
split up the different problems and I

2010
01:27:13,860 --> 01:27:15,960
think we can have incremental usefulness

2011
01:27:15,960 --> 01:27:21,020
with a parameter like DNS used

2012
01:27:21,120 --> 01:27:23,100
so questions

2013
01:27:23,100 --> 01:27:25,560
um do we think this is useful where

2014
01:27:25,560 --> 01:27:27,960
should it be it could go either in

2015
01:27:27,960 --> 01:27:31,880
master HTTP I think both groups should

2016
01:27:31,880 --> 01:27:35,639
have review and input on it

2017
01:27:35,639 --> 01:27:37,620
and also this is a call to if people

2018
01:27:37,620 --> 01:27:40,620
want to talk about more advanced proxy

2019
01:27:40,620 --> 01:27:42,960
and DNS use cases we should talk about

2020
01:27:42,960 --> 01:27:45,199
that

2021
01:27:50,159 --> 01:27:53,280
David schenazi thanks Tommy I think this

2022
01:27:53,280 --> 01:27:56,360
is useful uh and I think

2023
01:27:56,360 --> 01:27:59,400
uh the space of

2024
01:27:59,400 --> 01:28:02,120
uh

2025
01:28:02,120 --> 01:28:04,860
more information about the DNS through

2026
01:28:04,860 --> 01:28:08,699
an HTTP proxy makes a lot of sense

2027
01:28:08,699 --> 01:28:10,920
um so I I want to see things like this

2028
01:28:10,920 --> 01:28:11,940
happen

2029
01:28:11,940 --> 01:28:14,580
in terms of

2030
01:28:14,580 --> 01:28:17,520
um where to do the work my my gut

2031
01:28:17,520 --> 01:28:20,400
feeling is this applies to more than

2032
01:28:20,400 --> 01:28:23,040
mask it makes sense for other HTTP

2033
01:28:23,040 --> 01:28:24,060
things

2034
01:28:24,060 --> 01:28:26,520
so perhaps it makes more sense in HTTPS

2035
01:28:26,520 --> 01:28:28,679
but

2036
01:28:28,679 --> 01:28:32,900
like not horribly strongly on that one

2037
01:28:33,600 --> 01:28:36,060
all right

2038
01:28:36,060 --> 01:28:38,580
yeah Martin Thompson this seems like a

2039
01:28:38,580 --> 01:28:41,580
an extraordinarily narrow solution to a

2040
01:28:41,580 --> 01:28:44,460
very specific problem where we know that

2041
01:28:44,460 --> 01:28:45,540
we have

2042
01:28:45,540 --> 01:28:47,520
a more General problem sitting right

2043
01:28:47,520 --> 01:28:50,340
there uh you you point out it at in the

2044
01:28:50,340 --> 01:28:52,440
last slide uh

2045
01:28:52,440 --> 01:28:54,900
I would prefer to explore those other

2046
01:28:54,900 --> 01:28:56,820
Solutions before deciding to do the

2047
01:28:56,820 --> 01:28:59,040
narrow thing I think there's there's too

2048
01:28:59,040 --> 01:29:02,940
many cases where the client needs more

2049
01:29:02,940 --> 01:29:05,580
information about what was done in terms

2050
01:29:05,580 --> 01:29:07,440
of the DNS queries that may be the right

2051
01:29:07,440 --> 01:29:11,839
place to do this work is ADD instead

2052
01:29:15,239 --> 01:29:19,139
sure yeah I I definitely agree that

2053
01:29:19,139 --> 01:29:23,639
we should do the bigger stuff too but um

2054
01:29:23,639 --> 01:29:25,199
yeah I think I do think there is

2055
01:29:25,199 --> 01:29:26,639
incremental value

2056
01:29:26,639 --> 01:29:28,199
we're doing the small thing it's it's a

2057
01:29:28,199 --> 01:29:31,199
useful hint anyway

2058
01:29:31,199 --> 01:29:32,639
Ben

2059
01:29:32,639 --> 01:29:37,500
hi uh benchworts I

2060
01:29:37,500 --> 01:29:40,080
I don't know that I believe in the cname

2061
01:29:40,080 --> 01:29:44,280
cloaking use case really but uh but I do

2062
01:29:44,280 --> 01:29:47,880
want this just uh just to be to to

2063
01:29:47,880 --> 01:29:51,000
Lorenzo's point about supporting the

2064
01:29:51,000 --> 01:29:52,679
posix apis

2065
01:29:52,679 --> 01:29:55,920
uh this is very useful if you're trying

2066
01:29:55,920 --> 01:29:58,679
to emulate get Adder info which does

2067
01:29:58,679 --> 01:30:02,940
surface the cname results uh at least

2068
01:30:02,940 --> 01:30:04,040
optionally

2069
01:30:04,040 --> 01:30:06,900
so uh just for the sake of being able to

2070
01:30:06,900 --> 01:30:08,520
get it Implement get Adder info I think

2071
01:30:08,520 --> 01:30:10,739
this is useful I don't I see this as

2072
01:30:10,739 --> 01:30:14,460
quite distinct from a deeper system for

2073
01:30:14,460 --> 01:30:18,659
conveying DNS results generally which is

2074
01:30:18,659 --> 01:30:21,179
a a much bigger problem and runs into a

2075
01:30:21,179 --> 01:30:24,600
lot of DNS ossification questions

2076
01:30:24,600 --> 01:30:28,139
and uh please change the name don't the

2077
01:30:28,139 --> 01:30:30,179
DNS used is not good enough let's do

2078
01:30:30,179 --> 01:30:33,540
better do you have a suggestion oh sorry

2079
01:30:33,540 --> 01:30:35,040
you're gone

2080
01:30:35,040 --> 01:30:37,500
drop me a suggestion somewhere my

2081
01:30:37,500 --> 01:30:39,300
suggestion is something involving the

2082
01:30:39,300 --> 01:30:41,100
word CNA

2083
01:30:41,100 --> 01:30:43,620
okay

2084
01:30:43,620 --> 01:30:47,360
it includes an IP address too sorry

2085
01:30:49,260 --> 01:30:51,960
yeah I'm um I'm not sure about where

2086
01:30:51,960 --> 01:30:53,580
this specific solution belongs if it's

2087
01:30:53,580 --> 01:30:55,500
in this group or in another group but I

2088
01:30:55,500 --> 01:30:57,179
think we should actually take the DNS

2089
01:30:57,179 --> 01:30:59,159
use cases in scope for the re-chattering

2090
01:30:59,159 --> 01:31:01,080
and because I think there might be more

2091
01:31:01,080 --> 01:31:03,420
work in this in the space that we that

2092
01:31:03,420 --> 01:31:06,199
we should not ignore

2093
01:31:07,739 --> 01:31:09,719
okay

2094
01:31:09,719 --> 01:31:13,500
excellent all right thank you very much

2095
01:31:13,500 --> 01:31:15,840
and we're going to speed round through

2096
01:31:15,840 --> 01:31:17,340
three more quick things so everybody

2097
01:31:17,340 --> 01:31:18,960
take a moment to breathe in breathe out

2098
01:31:18,960 --> 01:31:20,880
stretch a little bit and then we will

2099
01:31:20,880 --> 01:31:22,739
talk about summary chartering so next up

2100
01:31:22,739 --> 01:31:26,839
we have sequence numbers Marcus

2101
01:31:38,340 --> 01:31:41,280
right hello hello so I'm going to talk

2102
01:31:41,280 --> 01:31:43,320
about a very very small proposed

2103
01:31:43,320 --> 01:31:45,540
extensions about adding numbers to http

2104
01:31:45,540 --> 01:31:49,739
datagrams so next slide please

2105
01:31:49,739 --> 01:31:51,600
so some background why we want to do

2106
01:31:51,600 --> 01:31:54,440
this 3gpp are working on a study called

2107
01:31:54,440 --> 01:31:57,480
atss it's a study on access traffic

2108
01:31:57,480 --> 01:31:58,980
steering switching and splitting

2109
01:31:58,980 --> 01:32:01,320
supporting the 5G system architecture so

2110
01:32:01,320 --> 01:32:04,020
it's basically solutions for steering

2111
01:32:04,020 --> 01:32:06,780
traffic across 3gpp and non-3dp accesses

2112
01:32:06,780 --> 01:32:08,219
there are various ways of doing that

2113
01:32:08,219 --> 01:32:10,500
different steering modes one of these

2114
01:32:10,500 --> 01:32:11,580
steering modes is called traffic

2115
01:32:11,580 --> 01:32:13,560
splitting where you basically do

2116
01:32:13,560 --> 01:32:15,780
bandwidth aggregation there are already

2117
01:32:15,780 --> 01:32:19,020
Solutions defined in release 16 of 3gpp

2118
01:32:19,020 --> 01:32:20,000
where

2119
01:32:20,000 --> 01:32:23,340
where mptcp is used now we're looking at

2120
01:32:23,340 --> 01:32:25,800
other solutions for non-tcp traffic

2121
01:32:25,800 --> 01:32:27,719
and there have been various proposals

2122
01:32:27,719 --> 01:32:29,520
for how to do the multi-pass steering

2123
01:32:29,520 --> 01:32:30,719
and

2124
01:32:30,719 --> 01:32:33,120
MP quick has been decided as one of the

2125
01:32:33,120 --> 01:32:34,920
potential Solutions and that could be

2126
01:32:34,920 --> 01:32:37,440
used together with mask

2127
01:32:37,440 --> 01:32:39,600
now these atss endpoints when you're

2128
01:32:39,600 --> 01:32:41,520
splitting traffic they would like to be

2129
01:32:41,520 --> 01:32:43,500
able to support limited reorder

2130
01:32:43,500 --> 01:32:46,020
reordering of the receipt packets to be

2131
01:32:46,020 --> 01:32:48,600
able to compensate for path delay

2132
01:32:48,600 --> 01:32:51,600
differences of the different axises

2133
01:32:51,600 --> 01:32:53,219
um so when we use Quick we can either

2134
01:32:53,219 --> 01:32:55,980
send data as streams or as in datagrams

2135
01:32:55,980 --> 01:32:57,840
the problem is when you send data in

2136
01:32:57,840 --> 01:32:59,580
streams you get full reordering you get

2137
01:32:59,580 --> 01:33:01,739
a lot of delay Jitter you need to handle

2138
01:33:01,739 --> 01:33:03,900
re-transmissions and whatnot

2139
01:33:03,900 --> 01:33:06,480
if you send data as pure quick datagrams

2140
01:33:06,480 --> 01:33:08,520
you get no reordering at all you get a

2141
01:33:08,520 --> 01:33:10,500
lot of out of order delivery of packets

2142
01:33:10,500 --> 01:33:12,600
you get a lot of potential duplicate

2143
01:33:12,600 --> 01:33:14,040
acknowledgments and things like this

2144
01:33:14,040 --> 01:33:16,560
also have problems with performance

2145
01:33:16,560 --> 01:33:19,260
so to be able to do like some partial

2146
01:33:19,260 --> 01:33:21,780
reordering the atss study proposes to

2147
01:33:21,780 --> 01:33:24,540
extend HTTP datagrams with a sequence

2148
01:33:24,540 --> 01:33:26,639
number so that you can perform limited

2149
01:33:26,639 --> 01:33:28,679
reordering based on based on the

2150
01:33:28,679 --> 01:33:31,199
differences between the path delays uh

2151
01:33:31,199 --> 01:33:32,699
next slide please

2152
01:33:32,699 --> 01:33:36,060
so it's a very simple extension to mask

2153
01:33:36,060 --> 01:33:38,940
that is being proposed you just add a

2154
01:33:38,940 --> 01:33:40,380
new type of

2155
01:33:40,380 --> 01:33:42,360
a payload format so we have a sequence

2156
01:33:42,360 --> 01:33:43,620
number datagram

2157
01:33:43,620 --> 01:33:45,900
that has a sequence number followed by

2158
01:33:45,900 --> 01:33:47,639
some payload

2159
01:33:47,639 --> 01:33:49,080
um

2160
01:33:49,080 --> 01:33:51,920
next slide please

2161
01:33:52,620 --> 01:33:53,400
um

2162
01:33:53,400 --> 01:33:55,139
to indicate support for this we're

2163
01:33:55,139 --> 01:33:57,480
proposing to use a capsule first you can

2164
01:33:57,480 --> 01:33:59,100
indicate support using a HTTP header

2165
01:33:59,100 --> 01:34:01,020
then you can register the use of

2166
01:34:01,020 --> 01:34:03,420
sequence numbers for your datagrams by

2167
01:34:03,420 --> 01:34:05,219
sending a capsule

2168
01:34:05,219 --> 01:34:08,280
the capsule would indicate the size of

2169
01:34:08,280 --> 01:34:09,719
the sequence number used

2170
01:34:09,719 --> 01:34:14,120
a context ID and also indicate

2171
01:34:14,120 --> 01:34:16,620
what payload format there is of the

2172
01:34:16,620 --> 01:34:19,280
inner payload

2173
01:34:20,460 --> 01:34:22,980
and if you have multiple inner payload

2174
01:34:22,980 --> 01:34:25,739
formats like you can have

2175
01:34:25,739 --> 01:34:28,380
UDP payload or in Connect IP we might

2176
01:34:28,380 --> 01:34:31,080
have IP payload as the normal

2177
01:34:31,080 --> 01:34:32,699
it's the normal inner payload but we

2178
01:34:32,699 --> 01:34:34,440
might have other extensions coming up

2179
01:34:34,440 --> 01:34:37,199
with compression of Ip and such so you

2180
01:34:37,199 --> 01:34:39,719
might have multiple context IDs existing

2181
01:34:39,719 --> 01:34:41,940
in parallel we're also looking at how

2182
01:34:41,940 --> 01:34:43,199
you can

2183
01:34:43,199 --> 01:34:46,800
uh register new context IDs for sequence

2184
01:34:46,800 --> 01:34:48,420
number datagrams that would wrap

2185
01:34:48,420 --> 01:34:51,060
different types of inner payload formats

2186
01:34:51,060 --> 01:34:53,040
and this is what we're proposing we're

2187
01:34:53,040 --> 01:34:55,280
posing to use two different kinds of

2188
01:34:55,280 --> 01:34:57,659
capsules for this one to register the

2189
01:34:57,659 --> 01:34:59,940
use of sequence packet sequence and

2190
01:34:59,940 --> 01:35:02,300
another one to basically register

2191
01:35:02,300 --> 01:35:05,580
context ID aliases for the same packet

2192
01:35:05,580 --> 01:35:07,500
sequence so that we can support multiple

2193
01:35:07,500 --> 01:35:10,440
inner payload formats and this is pretty

2194
01:35:10,440 --> 01:35:13,020
much it what we're posing

2195
01:35:13,020 --> 01:35:14,639
and we would wonder if this is something

2196
01:35:14,639 --> 01:35:16,800
that is in scope for this group or for

2197
01:35:16,800 --> 01:35:18,540
some other group or if 3gpp should work

2198
01:35:18,540 --> 01:35:21,780
on it by themselves

2199
01:35:21,780 --> 01:35:23,960
foreign

2200
01:35:30,120 --> 01:35:32,580
very quick clarification you said we'll

2201
01:35:32,580 --> 01:35:35,699
use NP quick or I might use NP quick

2202
01:35:35,699 --> 01:35:37,320
just for clarity

2203
01:35:37,320 --> 01:35:40,800
well there has been quite some

2204
01:35:40,800 --> 01:35:44,219
discussion and to my knowledge there is

2205
01:35:44,219 --> 01:35:46,020
there's an agreement that MP quick will

2206
01:35:46,020 --> 01:35:48,360
be used but it's not agree that might be

2207
01:35:48,360 --> 01:35:50,400
the only solution there's also mpdccp

2208
01:35:50,400 --> 01:35:52,260
considered and

2209
01:35:52,260 --> 01:35:54,780
I'm not fully up to date with the latest

2210
01:35:54,780 --> 01:35:56,699
and I think there's a meeting next week

2211
01:35:56,699 --> 01:36:00,019
that will clarify even more

2212
01:36:02,040 --> 01:36:05,280
David's good David schenazi

2213
01:36:05,280 --> 01:36:09,540
um thanks for presenting this I

2214
01:36:09,540 --> 01:36:12,120
I'm still not convinced that this is a

2215
01:36:12,120 --> 01:36:15,360
good idea the the concept itself of

2216
01:36:15,360 --> 01:36:18,600
partial reordering on the proxy uh

2217
01:36:18,600 --> 01:36:21,300
because this starts to smell like a TCP

2218
01:36:21,300 --> 01:36:22,520
accelerator

2219
01:36:22,520 --> 01:36:25,739
uh and those have been great for

2220
01:36:25,739 --> 01:36:29,219
ossification and making performance

2221
01:36:29,219 --> 01:36:32,639
worse I have numbers for that one

2222
01:36:32,639 --> 01:36:36,719
um so on that I'm not sure it's good to

2223
01:36:36,719 --> 01:36:39,780
answer your specific question of if we

2224
01:36:39,780 --> 01:36:41,880
want to do this or if this is happening

2225
01:36:41,880 --> 01:36:43,340
where should it happen

2226
01:36:43,340 --> 01:36:45,900
uh I personally believe it should

2227
01:36:45,900 --> 01:36:48,360
absolutely absolutely not happen in the

2228
01:36:48,360 --> 01:36:51,780
3gpp uh and we shouldn't not encourage

2229
01:36:51,780 --> 01:36:53,580
them to Run With Scissors because that's

2230
01:36:53,580 --> 01:36:57,000
how you can hurt yourself so

2231
01:36:57,000 --> 01:37:01,320
this topic is in scope for mask it's an

2232
01:37:01,320 --> 01:37:02,639
extension to a document that we

2233
01:37:02,639 --> 01:37:06,000
published in mask but I'm not sure we

2234
01:37:06,000 --> 01:37:07,620
should necessarily progress this forward

2235
01:37:07,620 --> 01:37:10,080
because I'm not sure it's a good idea

2236
01:37:10,080 --> 01:37:13,199
but like apparently I would be down to

2237
01:37:13,199 --> 01:37:15,900
have that conversation in mask yep

2238
01:37:15,900 --> 01:37:18,500
that's great

2239
01:37:18,540 --> 01:37:21,540
hello uh I'm from Huawei I think it's

2240
01:37:21,540 --> 01:37:25,020
actually a good idea to do a reordering

2241
01:37:25,020 --> 01:37:27,840
in the proxy that you have the end point

2242
01:37:27,840 --> 01:37:32,040
I have some kind of weakened Point yeah

2243
01:37:32,040 --> 01:37:33,960
but there is a whole lot of discussion

2244
01:37:33,960 --> 01:37:36,780
regarding the protocol ossification that

2245
01:37:36,780 --> 01:37:38,219
kind of stuff

2246
01:37:38,219 --> 01:37:41,639
yeah so we can I think we need to find

2247
01:37:41,639 --> 01:37:44,760
the middle ground for for the function

2248
01:37:44,760 --> 01:37:49,040
between the proxy and the endpoint

2249
01:37:54,860 --> 01:37:59,520
so if I record correctly uh it has been

2250
01:37:59,520 --> 01:38:01,139
an intentional Choice within the quick

2251
01:38:01,139 --> 01:38:04,080
working group do not expose the sickest

2252
01:38:04,080 --> 01:38:06,840
number of packets being sent and based

2253
01:38:06,840 --> 01:38:08,940
and that was based on the understanding

2254
01:38:08,940 --> 01:38:12,960
that doing exposing that uh

2255
01:38:12,960 --> 01:38:16,199
would actually do decrease the

2256
01:38:16,199 --> 01:38:19,440
performance of a multi-stream transport

2257
01:38:19,440 --> 01:38:21,780
protocol that doesn't always have the

2258
01:38:21,780 --> 01:38:24,239
head of lamp working problem

2259
01:38:24,239 --> 01:38:28,620
so I think that this proposal is I mean

2260
01:38:28,620 --> 01:38:30,360
the concern here would be that this

2261
01:38:30,360 --> 01:38:32,940
proposal is actually negating the

2262
01:38:32,940 --> 01:38:34,920
achievement that we made in the quick

2263
01:38:34,920 --> 01:38:36,060
protocol

2264
01:38:36,060 --> 01:38:39,739
and I think that's a major concern

2265
01:38:41,699 --> 01:38:44,520
thank you

2266
01:38:44,520 --> 01:38:48,739
yeah all right thank you very much

2267
01:38:49,199 --> 01:38:52,139
next up we have HTTP datagrams UDP

2268
01:38:52,139 --> 01:38:53,699
processing and extensible prioritization

2269
01:38:53,699 --> 01:38:56,419
from Lucas

2270
01:39:06,860 --> 01:39:09,840
good morning I did not know how long I'd

2271
01:39:09,840 --> 01:39:11,400
get for this slide so I got loads of

2272
01:39:11,400 --> 01:39:15,000
slides sorry this talk so let's go

2273
01:39:15,000 --> 01:39:17,760
uh this is a kind of a document I came

2274
01:39:17,760 --> 01:39:19,199
up with about a year ago I think I

2275
01:39:19,199 --> 01:39:20,340
presented to this group I can't quite

2276
01:39:20,340 --> 01:39:21,480
remember

2277
01:39:21,480 --> 01:39:22,500
um it's kind of just sat in the

2278
01:39:22,500 --> 01:39:23,880
background I've not been doing that much

2279
01:39:23,880 --> 01:39:26,280
with it uh give it a little spruce up

2280
01:39:26,280 --> 01:39:28,800
about four months ago and kept things

2281
01:39:28,800 --> 01:39:32,340
quiet maybe trying to do some chatting

2282
01:39:32,340 --> 01:39:33,719
in the hallways and then I got ill and

2283
01:39:33,719 --> 01:39:35,639
couldn't do it so let's go with some

2284
01:39:35,639 --> 01:39:37,199
background very briefly we've got RFC

2285
01:39:37,199 --> 01:39:39,060
9000 quick saying let's stream

2286
01:39:39,060 --> 01:39:41,040
multiplexing has a significant effect on

2287
01:39:41,040 --> 01:39:42,960
application performance but quick

2288
01:39:42,960 --> 01:39:45,540
doesn't provide a mechanism providing uh

2289
01:39:45,540 --> 01:39:48,980
for exchanging any prioritizing eggs

2290
01:39:48,980 --> 01:39:52,020
prioritization information so you know

2291
01:39:52,020 --> 01:39:53,520
your implementation is probably going to

2292
01:39:53,520 --> 01:39:55,260
do some stuff if it cares about doing

2293
01:39:55,260 --> 01:39:57,300
this application performance maybe it

2294
01:39:57,300 --> 01:39:59,100
doesn't maybe it doesn't matter but the

2295
01:39:59,100 --> 01:40:01,080
signaling of what's important what's not

2296
01:40:01,080 --> 01:40:05,219
is kind of punted so hp3 is an

2297
01:40:05,219 --> 01:40:07,620
application protocol uh it could have

2298
01:40:07,620 --> 01:40:09,840
had signals for stream prioritization

2299
01:40:09,840 --> 01:40:11,460
but we had some issues during that

2300
01:40:11,460 --> 01:40:14,460
process so we punted it then we have Roc

2301
01:40:14,460 --> 01:40:17,159
9218 which kazoo and I worked on for

2302
01:40:17,159 --> 01:40:20,100
extensible prioritization mainly for hb3

2303
01:40:20,100 --> 01:40:22,260
and now we we backported it to work over

2304
01:40:22,260 --> 01:40:25,080
hb2 as well each one doesn't really have

2305
01:40:25,080 --> 01:40:26,340
the problem because it's not

2306
01:40:26,340 --> 01:40:28,860
multi-streaming so whatever

2307
01:40:28,860 --> 01:40:31,199
um then we have quick datagram frames

2308
01:40:31,199 --> 01:40:33,179
which we defined in

2309
01:40:33,179 --> 01:40:35,520
quickland they don't have a transport

2310
01:40:35,520 --> 01:40:37,440
multiplexer identifier so you're sending

2311
01:40:37,440 --> 01:40:38,760
messages

2312
01:40:38,760 --> 01:40:40,500
um you know but you probably want to

2313
01:40:40,500 --> 01:40:42,480
send different datagrams for different

2314
01:40:42,480 --> 01:40:44,340
kinds of information flows within a

2315
01:40:44,340 --> 01:40:46,320
connection so in this group we came up

2316
01:40:46,320 --> 01:40:48,360
with HB datagrams and the capital

2317
01:40:48,360 --> 01:40:52,440
protocol which is another RFC and also

2318
01:40:52,440 --> 01:40:54,480
proxying UDP and HP also if we should be

2319
01:40:54,480 --> 01:40:56,760
familiar with here which is great

2320
01:40:56,760 --> 01:40:59,040
um the first time I wrote this draft a

2321
01:40:59,040 --> 01:41:00,719
lot of those things weren't quite rfcs

2322
01:41:00,719 --> 01:41:01,980
yet so we're hedging our bets but now

2323
01:41:01,980 --> 01:41:03,780
they are which I think makes this

2324
01:41:03,780 --> 01:41:06,420
discussion a bit more clear

2325
01:41:06,420 --> 01:41:09,600
you could say datagram information flows

2326
01:41:09,600 --> 01:41:11,520
multiplexing like what would be the use

2327
01:41:11,520 --> 01:41:13,620
case for that mass processing is one

2328
01:41:13,620 --> 01:41:16,860
maybe quicker where prompting negates

2329
01:41:16,860 --> 01:41:19,199
that a bit I don't know web transport

2330
01:41:19,199 --> 01:41:21,780
potentially two depending on who's using

2331
01:41:21,780 --> 01:41:23,639
web transport to do what we're seeing

2332
01:41:23,639 --> 01:41:25,500
some proposals in a mock working group

2333
01:41:25,500 --> 01:41:28,620
about not using datagrams and still

2334
01:41:28,620 --> 01:41:30,780
achieving the kind of low latency video

2335
01:41:30,780 --> 01:41:33,960
goals that they would like to to do

2336
01:41:33,960 --> 01:41:36,360
um without datagram so maybe we don't

2337
01:41:36,360 --> 01:41:37,560
need this thing I don't know what I'm

2338
01:41:37,560 --> 01:41:39,840
trying to figure out is is there any

2339
01:41:39,840 --> 01:41:42,659
interest in this document it could be

2340
01:41:42,659 --> 01:41:44,219
done but should we do it and if we did

2341
01:41:44,219 --> 01:41:47,699
where might we do it next slide please

2342
01:41:47,699 --> 01:41:49,679
um so yeah this is the the Venn diagram

2343
01:41:49,679 --> 01:41:52,739
of all of the the rfcs that we have and

2344
01:41:52,739 --> 01:41:53,940
the different working groups that have

2345
01:41:53,940 --> 01:41:56,580
done and things that are HTTP datagrams

2346
01:41:56,580 --> 01:41:58,500
possibly could have been done in HP

2347
01:41:58,500 --> 01:42:00,000
working group but we did them here

2348
01:42:00,000 --> 01:42:02,820
there's lots of folks who kind of live

2349
01:42:02,820 --> 01:42:07,099
in this van but next slide

2350
01:42:07,619 --> 01:42:09,900
um so just a very quick recap about what

2351
01:42:09,900 --> 01:42:12,540
this extensible priority scheme is

2352
01:42:12,540 --> 01:42:14,580
um it's for signaling

2353
01:42:14,580 --> 01:42:17,880
between clients and servers and then

2354
01:42:17,880 --> 01:42:19,260
there's other thing where you might be a

2355
01:42:19,260 --> 01:42:21,360
reverse proxy and you want to have an

2356
01:42:21,360 --> 01:42:24,239
origin or maybe some code within your

2357
01:42:24,239 --> 01:42:26,460
like maybe CDN world that can also

2358
01:42:26,460 --> 01:42:29,040
influence the prioritization so it's a

2359
01:42:29,040 --> 01:42:31,560
kind of two-way thing but it's all in

2360
01:42:31,560 --> 01:42:34,860
the RFC but we have two signals

2361
01:42:34,860 --> 01:42:36,719
effectively urgency which is between

2362
01:42:36,719 --> 01:42:38,820
zero and seven it's kind of like buckets

2363
01:42:38,820 --> 01:42:41,699
of wheat or whatever and this

2364
01:42:41,699 --> 01:42:43,739
incremental thing which talks about how

2365
01:42:43,739 --> 01:42:46,440
the the responses in HTTP can be

2366
01:42:46,440 --> 01:42:48,300
processed but really it's about you know

2367
01:42:48,300 --> 01:42:50,580
is he streaming the important bytes of

2368
01:42:50,580 --> 01:42:52,320
content that you care about how much

2369
01:42:52,320 --> 01:42:54,780
they be used which influences maybe you

2370
01:42:54,780 --> 01:42:56,880
want to send all of the one thing in one

2371
01:42:56,880 --> 01:42:58,920
go and then move on to the next or maybe

2372
01:42:58,920 --> 01:43:01,080
it's useful to have bits of things

2373
01:43:01,080 --> 01:43:04,139
coming kind of as closely in parallel as

2374
01:43:04,139 --> 01:43:06,119
possible because you can render them

2375
01:43:06,119 --> 01:43:07,800
something like a progressive jpeg or

2376
01:43:07,800 --> 01:43:09,780
something like that so in addition to

2377
01:43:09,780 --> 01:43:11,639
the signals we give some scheduling

2378
01:43:11,639 --> 01:43:14,040
guidance it's not mandatory but

2379
01:43:14,040 --> 01:43:15,780
effectively it's there so we can

2380
01:43:15,780 --> 01:43:17,420
articulate

2381
01:43:17,420 --> 01:43:20,639
broadly like expectations so if you're

2382
01:43:20,639 --> 01:43:21,900
going to use the signaling scheme it's

2383
01:43:21,900 --> 01:43:24,179
useful to know how the other end might

2384
01:43:24,179 --> 01:43:26,460
operate on that but we can't mandate

2385
01:43:26,460 --> 01:43:29,460
things because scheduling and resource

2386
01:43:29,460 --> 01:43:31,260
usage is always within the control of

2387
01:43:31,260 --> 01:43:33,239
the the other side that is sending and

2388
01:43:33,239 --> 01:43:36,179
scheduling data so next slide very

2389
01:43:36,179 --> 01:43:39,000
quickly if you follow that guidance you

2390
01:43:39,000 --> 01:43:40,440
might end up with this kind of thing I

2391
01:43:40,440 --> 01:43:41,580
don't have the time to go into it

2392
01:43:41,580 --> 01:43:45,380
unfortunately next slide

2393
01:43:45,540 --> 01:43:47,219
um but when you come to datagrams you've

2394
01:43:47,219 --> 01:43:49,080
got these Multiplex flows using quarter

2395
01:43:49,080 --> 01:43:51,900
stream IDs uh there's this all one big

2396
01:43:51,900 --> 01:43:53,460
bucket so how do you schedule that maybe

2397
01:43:53,460 --> 01:43:55,860
fifo second stuff is a bit basic it

2398
01:43:55,860 --> 01:43:57,480
could work but maybe it wouldn't next

2399
01:43:57,480 --> 01:43:59,839
slide

2400
01:43:59,880 --> 01:44:01,560
um so then you combine that with screens

2401
01:44:01,560 --> 01:44:02,940
and you've got this one bucket of one

2402
01:44:02,940 --> 01:44:04,139
thing and these multiple weights of

2403
01:44:04,139 --> 01:44:05,760
other stuff it's kind of a mess that

2404
01:44:05,760 --> 01:44:06,780
slide

2405
01:44:06,780 --> 01:44:09,719
then you stick capsules in and capsules

2406
01:44:09,719 --> 01:44:10,860
are going to be sent on streams and

2407
01:44:10,860 --> 01:44:12,300
maybe they have the same stream and that

2408
01:44:12,300 --> 01:44:13,679
the kind of the hook for the stream and

2409
01:44:13,679 --> 01:44:15,900
the datagram and and maybe some things

2410
01:44:15,900 --> 01:44:17,699
are more important than others like

2411
01:44:17,699 --> 01:44:19,260
slide

2412
01:44:19,260 --> 01:44:19,860
um

2413
01:44:19,860 --> 01:44:21,780
so oh that shouldn't be in there next

2414
01:44:21,780 --> 01:44:23,300
slide

2415
01:44:23,300 --> 01:44:25,739
uh so there's this thing and it adds a

2416
01:44:25,739 --> 01:44:27,719
thing for datagram emergency but

2417
01:44:27,719 --> 01:44:30,900
basically accommodate datagrams within

2418
01:44:30,900 --> 01:44:33,780
like a compatibility mode that would

2419
01:44:33,780 --> 01:44:36,000
just fit and fit within extendable

2420
01:44:36,000 --> 01:44:37,679
priority scheme and its extension

2421
01:44:37,679 --> 01:44:39,960
mechanisms and there's all to do with

2422
01:44:39,960 --> 01:44:41,520
how you might share the bandwidth

2423
01:44:41,520 --> 01:44:45,239
between datagrams and streams next slide

2424
01:44:45,239 --> 01:44:48,960
yeah there we go look magic next slide

2425
01:44:48,960 --> 01:44:51,780
uh is it a problem uh I don't know like

2426
01:44:51,780 --> 01:44:54,360
in the in the web transport World in w3c

2427
01:44:54,360 --> 01:44:56,520
there's like these big long threads of

2428
01:44:56,520 --> 01:45:00,840
issues they just go go like wow

2429
01:45:00,840 --> 01:45:03,300
um maybe we can maybe we don't please

2430
01:45:03,300 --> 01:45:04,980
please let's figure this out and just

2431
01:45:04,980 --> 01:45:06,480
resolve it because it's been dragging on

2432
01:45:06,480 --> 01:45:07,739
way too long

2433
01:45:07,739 --> 01:45:09,659
the next slide

2434
01:45:09,659 --> 01:45:11,639
yep and we had another one to our Venn

2435
01:45:11,639 --> 01:45:13,679
diagram the w3c at the bottom they need

2436
01:45:13,679 --> 01:45:16,260
to occur to next slide

2437
01:45:16,260 --> 01:45:18,960
uh yeah so what do we do everyone's

2438
01:45:18,960 --> 01:45:20,699
pointing at each other

2439
01:45:20,699 --> 01:45:23,340
um can we just put this to bed please

2440
01:45:23,340 --> 01:45:24,900
all right if you're gonna hop in the

2441
01:45:24,900 --> 01:45:26,940
queue we'd like a thumbs up this is

2442
01:45:26,940 --> 01:45:28,139
something we should talk about in mask

2443
01:45:28,139 --> 01:45:30,600
thumbs down somewhere else and we'll

2444
01:45:30,600 --> 01:45:31,980
have further comments on the list or

2445
01:45:31,980 --> 01:45:34,280
elsewhere

2446
01:45:34,320 --> 01:45:36,300
thumbs up but I'll just add when we

2447
01:45:36,300 --> 01:45:39,300
wrote HTTP datagrams the privatization

2448
01:45:39,300 --> 01:45:41,639
for HTTP the extensible one wasn't ready

2449
01:45:41,639 --> 01:45:45,179
yet so we decided to punt to not delay

2450
01:45:45,179 --> 01:45:46,500
um but if you had been there we probably

2451
01:45:46,500 --> 01:45:48,000
would have put it in there so this seems

2452
01:45:48,000 --> 01:45:50,760
like the right thing to do thumbs up

2453
01:45:50,760 --> 01:45:54,199
thank you inside mask

2454
01:45:56,340 --> 01:45:59,040
benchwartz I I don't get it where's the

2455
01:45:59,040 --> 01:46:01,020
queue these are these are datagrams

2456
01:46:01,020 --> 01:46:04,739
there's like no there's no streaming

2457
01:46:04,739 --> 01:46:06,420
here there's like no there should be no

2458
01:46:06,420 --> 01:46:08,580
buffering here like you know datagram

2459
01:46:08,580 --> 01:46:10,560
comes in it goes out there's there's no

2460
01:46:10,560 --> 01:46:13,139
where's the queue

2461
01:46:13,139 --> 01:46:15,719
it would depend on the implementation

2462
01:46:15,719 --> 01:46:17,340
um you know if you're doing something

2463
01:46:17,340 --> 01:46:19,260
like quick you probably want to send a

2464
01:46:19,260 --> 01:46:21,179
flight of packets

2465
01:46:21,179 --> 01:46:22,739
um effectively if that's what you're

2466
01:46:22,739 --> 01:46:24,659
doing in a processing model so you would

2467
01:46:24,659 --> 01:46:27,060
have maybe a batch of 10 things you send

2468
01:46:27,060 --> 01:46:28,440
it one time

2469
01:46:28,440 --> 01:46:30,000
um and you're building up you know

2470
01:46:30,000 --> 01:46:33,480
multiple say connect UDP streams that

2471
01:46:33,480 --> 01:46:34,980
are coming in and you're trying to

2472
01:46:34,980 --> 01:46:37,320
dispatch them as quickly as possible I

2473
01:46:37,320 --> 01:46:38,580
agree and they should just be in and out

2474
01:46:38,580 --> 01:46:40,980
but you might build up a cues there's no

2475
01:46:40,980 --> 01:46:42,900
flow control I'm sure

2476
01:46:42,900 --> 01:46:44,580
yeah

2477
01:46:44,580 --> 01:46:46,320
I don't yeah I don't really understand

2478
01:46:46,320 --> 01:46:48,119
where the queue is but if the queue is

2479
01:46:48,119 --> 01:46:49,920
on the

2480
01:46:49,920 --> 01:46:52,440
sender side on the on the inside that's

2481
01:46:52,440 --> 01:46:53,520
sending

2482
01:46:53,520 --> 01:46:55,560
from the client to the proxy from the

2483
01:46:55,560 --> 01:46:58,020
proxy to the client then this doesn't

2484
01:46:58,020 --> 01:46:59,940
seem like the right layer you want the

2485
01:46:59,940 --> 01:47:01,260
the place where you want these

2486
01:47:01,260 --> 01:47:03,540
priorities is on the outside of the

2487
01:47:03,540 --> 01:47:05,219
packet so you can tell the kernel to

2488
01:47:05,219 --> 01:47:07,619
schedule the delivery or adjust it's

2489
01:47:07,619 --> 01:47:10,739
it's buffering in some way but I I guess

2490
01:47:10,739 --> 01:47:13,080
I don't really get the use case separate

2491
01:47:13,080 --> 01:47:15,780
from that I want to separate from that I

2492
01:47:15,780 --> 01:47:17,520
want to say in general in mask we have

2493
01:47:17,520 --> 01:47:19,739
an interesting problem with these

2494
01:47:19,739 --> 01:47:23,100
extended context things which is we have

2495
01:47:23,100 --> 01:47:24,840
a way to define these formats but we

2496
01:47:24,840 --> 01:47:26,880
don't have any way to explain to the

2497
01:47:26,880 --> 01:47:29,100
counterparty when they should use it so

2498
01:47:29,100 --> 01:47:32,580
I can I can define a format or a context

2499
01:47:32,580 --> 01:47:34,619
ID for you to be able to express

2500
01:47:34,619 --> 01:47:36,840
priorities back to me but I have no way

2501
01:47:36,840 --> 01:47:38,520
to tell you whether I actually want you

2502
01:47:38,520 --> 01:47:40,800
to do that or how often I want you to do

2503
01:47:40,800 --> 01:47:42,060
that

2504
01:47:42,060 --> 01:47:44,520
uh I think that's a puzzle same with

2505
01:47:44,520 --> 01:47:45,960
sequence numbers same with all the

2506
01:47:45,960 --> 01:47:47,760
extensions that we've talked about I

2507
01:47:47,760 --> 01:47:49,980
think that's all right before we go too

2508
01:47:49,980 --> 01:47:52,739
deep into that this timer Ben is uh your

2509
01:47:52,739 --> 01:47:54,719
time for the next set of slides if you'd

2510
01:47:54,719 --> 01:47:55,920
like to do them

2511
01:47:55,920 --> 01:47:57,540
um so we can talk more about priorities

2512
01:47:57,540 --> 01:47:59,100
if you want to take us on a quick tour

2513
01:47:59,100 --> 01:48:00,420
through your last set of slides that

2514
01:48:00,420 --> 01:48:02,040
also works great or we can go into

2515
01:48:02,040 --> 01:48:04,639
retarding

2516
01:48:08,520 --> 01:48:11,420
thank you Lucas

2517
01:48:14,699 --> 01:48:18,300
okay well then to be very brief uh this

2518
01:48:18,300 --> 01:48:20,040
is I'm also going to be mentioning this

2519
01:48:20,040 --> 01:48:22,560
at the HTTP working group but like this

2520
01:48:22,560 --> 01:48:24,600
is how mask looks right you've got a

2521
01:48:24,600 --> 01:48:28,619
template and then you use uh extended

2522
01:48:28,619 --> 01:48:31,500
connect with colon protocol

2523
01:48:31,500 --> 01:48:35,520
um so like could we just do that for the

2524
01:48:35,520 --> 01:48:40,760
old HTTP request proxy and TCP proxies

2525
01:48:40,800 --> 01:48:42,840
um so the TCP proxies are an obvious

2526
01:48:42,840 --> 01:48:45,360
parallel to UDP but actually I think

2527
01:48:45,360 --> 01:48:48,060
there's also a parallel in HTTP request

2528
01:48:48,060 --> 01:48:50,699
proxies and

2529
01:48:50,699 --> 01:48:53,460
um and I claim that this uh that this

2530
01:48:53,460 --> 01:48:56,219
solves some some real problems because

2531
01:48:56,219 --> 01:48:58,800
these old-fashioned proxies they're like

2532
01:48:58,800 --> 01:49:02,360
completely impossible to Virtual host

2533
01:49:02,360 --> 01:49:05,280
and also the TCP proxies don't really

2534
01:49:05,280 --> 01:49:08,420
work well with happy eyeballs

2535
01:49:08,420 --> 01:49:12,900
so uh the specific proposal in the draft

2536
01:49:12,900 --> 01:49:16,860
has a bunch of intriguing uh intriguing

2537
01:49:16,860 --> 01:49:20,340
edgy technical bits but the bottom line

2538
01:49:20,340 --> 01:49:22,500
is like should we do this where should

2539
01:49:22,500 --> 01:49:24,920
we do this

2540
01:49:28,619 --> 01:49:30,659
uh and this is really for the

2541
01:49:30,659 --> 01:49:32,340
rechartering discussion so maybe I can

2542
01:49:32,340 --> 01:49:35,179
just close

2543
01:49:36,360 --> 01:49:38,159
all right any thumbs up thumbs Downs

2544
01:49:38,159 --> 01:49:40,638
Tommy

2545
01:49:42,239 --> 01:49:45,420
um yeah I find the TCP

2546
01:49:45,420 --> 01:49:48,179
use case a bit more compelling

2547
01:49:48,179 --> 01:49:49,920
um and certainly if you're trying to

2548
01:49:49,920 --> 01:49:52,860
have a new format for

2549
01:49:52,860 --> 01:49:55,440
the you know normal HTTP proxy that

2550
01:49:55,440 --> 01:49:59,699
should be done in HTTP and not in mask

2551
01:49:59,699 --> 01:50:01,320
I want to make sure that if we're doing

2552
01:50:01,320 --> 01:50:04,100
any of this we're actually getting

2553
01:50:04,100 --> 01:50:08,159
enough new functionality for example you

2554
01:50:08,159 --> 01:50:10,739
know if for TCP we defined the ability

2555
01:50:10,739 --> 01:50:13,380
to do you know start.star to have a TCP

2556
01:50:13,380 --> 01:50:14,940
listener like that

2557
01:50:14,940 --> 01:50:19,020
would be like a compelling New Edition

2558
01:50:19,020 --> 01:50:20,940
that is like fundamentally something you

2559
01:50:20,940 --> 01:50:24,480
couldn't do today so

2560
01:50:24,480 --> 01:50:27,420
yeah so maybe split the TCP stuff from

2561
01:50:27,420 --> 01:50:31,139
any other changes and look at having TCP

2562
01:50:31,139 --> 01:50:32,460
listening

2563
01:50:32,460 --> 01:50:34,320
foreign

2564
01:50:34,320 --> 01:50:38,580
thank you all right thank you Ben

2565
01:50:38,580 --> 01:50:42,080
and with that

2566
01:50:42,480 --> 01:50:45,379
steal that

2567
01:50:53,480 --> 01:50:57,320
should we get a little wider

2568
01:50:59,159 --> 01:51:02,100
there we go so this is a proposal and

2569
01:51:02,100 --> 01:51:03,300
I'm showing it this way instead of a

2570
01:51:03,300 --> 01:51:04,860
diff view because the diff gets messy

2571
01:51:04,860 --> 01:51:06,119
when you move things around this much

2572
01:51:06,119 --> 01:51:09,060
but the main uh difference between our

2573
01:51:09,060 --> 01:51:10,800
current Charter and this is this

2574
01:51:10,800 --> 01:51:12,300
paragraph that I've highlighted part way

2575
01:51:12,300 --> 01:51:13,199
down

2576
01:51:13,199 --> 01:51:15,780
so this is a somewhat provocative text

2577
01:51:15,780 --> 01:51:17,699
in the sense that it pulls in a whole

2578
01:51:17,699 --> 01:51:19,199
pile of stuff that we had previously

2579
01:51:19,199 --> 01:51:22,199
said was out of scope so the intent here

2580
01:51:22,199 --> 01:51:25,020
is uh as we've just been talking about a

2581
01:51:25,020 --> 01:51:26,699
number of documents

2582
01:51:26,699 --> 01:51:28,440
um I think we've sorted at least one

2583
01:51:28,440 --> 01:51:32,699
over to dispatch we have uh some DNS

2584
01:51:32,699 --> 01:51:34,679
conversations of do we want to have that

2585
01:51:34,679 --> 01:51:38,820
in HTTP or add or DNS Ops or continue to

2586
01:51:38,820 --> 01:51:41,100
talk about that in mask whatever we

2587
01:51:41,100 --> 01:51:42,300
decide there we will certainly be

2588
01:51:42,300 --> 01:51:43,619
coordinating with all of the relevant

2589
01:51:43,619 --> 01:51:45,360
other working groups and we have some

2590
01:51:45,360 --> 01:51:46,619
text about that at the bottom of the

2591
01:51:46,619 --> 01:51:47,880
charter as well so we can add other

2592
01:51:47,880 --> 01:51:50,340
groups to that list

2593
01:51:50,340 --> 01:51:52,080
and we also had a set of things where it

2594
01:51:52,080 --> 01:51:53,520
looks like we've got quite a good bit of

2595
01:51:53,520 --> 01:51:55,080
energy and some really good ideas around

2596
01:51:55,080 --> 01:51:58,199
what we want to do so with that the my

2597
01:51:58,199 --> 01:51:59,880
client is open

2598
01:51:59,880 --> 01:52:03,119
um Let's uh tear this apart or decide

2599
01:52:03,119 --> 01:52:04,920
that we love it

2600
01:52:04,920 --> 01:52:07,699
Lucas

2601
01:52:09,000 --> 01:52:11,239
clarifying questions

2602
01:52:11,239 --> 01:52:13,500
could we uh what what do you mean by

2603
01:52:13,500 --> 01:52:15,600
call documents here the stuff we defined

2604
01:52:15,600 --> 01:52:18,659
only in mask or the things we depend on

2605
01:52:18,659 --> 01:52:19,800
from other

2606
01:52:19,800 --> 01:52:22,920
groups our original Three so

2607
01:52:22,920 --> 01:52:25,500
HTTP datagrams connect UDP connect IP

2608
01:52:25,500 --> 01:52:28,800
okay so so the priorities example is

2609
01:52:28,800 --> 01:52:31,679
it's an extension to a document that was

2610
01:52:31,679 --> 01:52:34,080
written in HTTP working group but the

2611
01:52:34,080 --> 01:52:36,000
extension affects the behavior of the

2612
01:52:36,000 --> 01:52:38,100
documents we made here so we're not

2613
01:52:38,100 --> 01:52:41,340
extending the documents per se but the

2614
01:52:41,340 --> 01:52:44,400
behavior without being scope too

2615
01:52:44,400 --> 01:52:47,299
potentially

2616
01:52:48,300 --> 01:52:50,219
David you want to hop in the queue and

2617
01:52:50,219 --> 01:52:53,040
say such things sorry I yeah I happen to

2618
01:52:53,040 --> 01:52:54,900
me next I

2619
01:52:54,900 --> 01:52:58,800
I think of uh Lucas's uh datagram

2620
01:52:58,800 --> 01:53:01,080
priority as an extension to http

2621
01:53:01,080 --> 01:53:03,480
diagrams even if like you're right when

2622
01:53:03,480 --> 01:53:04,739
you

2623
01:53:04,739 --> 01:53:07,800
like get down to the details they might

2624
01:53:07,800 --> 01:53:10,739
not necessarily be so I I would phrase

2625
01:53:10,739 --> 01:53:13,739
this in such a way that it's in scope

2626
01:53:13,739 --> 01:53:18,119
um this seems a bit uh so now to make my

2627
01:53:18,119 --> 01:53:21,600
personal Point uh this new paragraph

2628
01:53:21,600 --> 01:53:25,380
feels a bit too broad to me good

2629
01:53:25,380 --> 01:53:25,940
um

2630
01:53:25,940 --> 01:53:28,320
yeah the

2631
01:53:28,320 --> 01:53:29,460
um

2632
01:53:29,460 --> 01:53:32,760
uh I'm sure our isg overlords don't want

2633
01:53:32,760 --> 01:53:34,980
us doing too much stuff uh but

2634
01:53:34,980 --> 01:53:36,500
conceptually

2635
01:53:36,500 --> 01:53:39,900
I think it would make more sense for us

2636
01:53:39,900 --> 01:53:43,619
to focus on extensions to

2637
01:53:43,619 --> 01:53:46,440
our core documents uh you know some

2638
01:53:46,440 --> 01:53:48,360
wording needed here because of private

2639
01:53:48,360 --> 01:53:51,420
previous point so extensions to connect

2640
01:53:51,420 --> 01:53:54,659
UDP uh to give it more features that we

2641
01:53:54,659 --> 01:53:57,179
think are useful uh extensions to http

2642
01:53:57,179 --> 01:53:59,880
datagrams each accessions to connect IP

2643
01:53:59,880 --> 01:54:03,500
should be in scope

2644
01:54:03,840 --> 01:54:06,600
I really like the idea of real world use

2645
01:54:06,600 --> 01:54:08,239
cases except

2646
01:54:08,239 --> 01:54:11,100
that's kind of ill-defined

2647
01:54:11,100 --> 01:54:13,619
so I would like to see that tightened

2648
01:54:13,619 --> 01:54:17,580
but I like the concept uh let's not go

2649
01:54:17,580 --> 01:54:21,360
crazy into like hypotheticals like let's

2650
01:54:21,360 --> 01:54:23,580
keep it real

2651
01:54:23,580 --> 01:54:25,500
um and then

2652
01:54:25,500 --> 01:54:27,840
where I then draw the line at kind of

2653
01:54:27,840 --> 01:54:30,719
close like narrowing the scope would be

2654
01:54:30,719 --> 01:54:33,260
to say that if something

2655
01:54:33,260 --> 01:54:37,500
applies to hcp more generically it

2656
01:54:37,500 --> 01:54:38,820
shouldn't be in scope here it should be

2657
01:54:38,820 --> 01:54:41,639
in scope of http

2658
01:54:41,639 --> 01:54:42,300
um

2659
01:54:42,300 --> 01:54:45,000
the the remaining thing that's still

2660
01:54:45,000 --> 01:54:49,920
here is Discovery and configuration

2661
01:54:49,920 --> 01:54:53,639
I I'm not sure that should be in scope

2662
01:54:53,639 --> 01:54:55,560
at least because so far all the

2663
01:54:55,560 --> 01:54:58,320
proposals we've seen in the space are

2664
01:54:58,320 --> 01:55:00,780
not specific to mask and kind of more

2665
01:55:00,780 --> 01:55:02,880
General to http and encompassing things

2666
01:55:02,880 --> 01:55:06,480
like doe or high or all that so I would

2667
01:55:06,480 --> 01:55:09,060
perhaps maybe explicitly Mark that as a

2668
01:55:09,060 --> 01:55:11,520
out of scope as something that is not

2669
01:55:11,520 --> 01:55:13,679
tied to our code documents so I would

2670
01:55:13,679 --> 01:55:15,900
take a chainsaw and probably remove

2671
01:55:15,900 --> 01:55:18,179
three quarters of this paragraph

2672
01:55:18,179 --> 01:55:20,580
beautiful thank you so previously we had

2673
01:55:20,580 --> 01:55:22,380
also discussed splitting Discovery and

2674
01:55:22,380 --> 01:55:24,179
configuration and one of the reasons I

2675
01:55:24,179 --> 01:55:25,619
mentioned this is being provocative is

2676
01:55:25,619 --> 01:55:26,940
we previously had a sentence that said

2677
01:55:26,940 --> 01:55:29,520
Discovery is explicitly out of scope and

2678
01:55:29,520 --> 01:55:30,719
this pulls it back in and one of the

2679
01:55:30,719 --> 01:55:33,119
questions for our folks who are in the

2680
01:55:33,119 --> 01:55:35,340
queue now is uh is that something we

2681
01:55:35,340 --> 01:55:36,840
want or do we want to keep Discovery out

2682
01:55:36,840 --> 01:55:40,580
of scope so next up we have Eric

2683
01:55:55,500 --> 01:55:57,300
can I be heard apparently my video

2684
01:55:57,300 --> 01:56:00,360
failed to start there yes you can okay

2685
01:56:00,360 --> 01:56:02,699
so let's just talk then so similar to

2686
01:56:02,699 --> 01:56:04,500
the comments I made in I don't know an

2687
01:56:04,500 --> 01:56:07,500
hour or so ago and also similar to what

2688
01:56:07,500 --> 01:56:08,820
they were just saying now I think the

2689
01:56:08,820 --> 01:56:10,560
big danger here of just being too broad

2690
01:56:10,560 --> 01:56:12,960
is this work is if we let this working

2691
01:56:12,960 --> 01:56:14,400
group essentially become the general

2692
01:56:14,400 --> 01:56:17,340
proxy and working group so I think we

2693
01:56:17,340 --> 01:56:18,659
really need to make sure that whatever

2694
01:56:18,659 --> 01:56:22,020
we have written here is focused on only

2695
01:56:22,020 --> 01:56:24,480
proxying for connect UDP and connect IP

2696
01:56:24,480 --> 01:56:27,179
if it's relay or an extension to those

2697
01:56:27,179 --> 01:56:29,100
specific topics I think

2698
01:56:29,100 --> 01:56:31,920
very broad scope is good configuration

2699
01:56:31,920 --> 01:56:34,440
discoverability extensions all that

2700
01:56:34,440 --> 01:56:36,360
stuff is good but I think we really need

2701
01:56:36,360 --> 01:56:38,100
to focuses on

2702
01:56:38,100 --> 01:56:41,280
proxying UDP or IP

2703
01:56:41,280 --> 01:56:43,800
make sure and possibly explicitly leave

2704
01:56:43,800 --> 01:56:46,440
out anything that's General to proxying

2705
01:56:46,440 --> 01:56:48,540
that includes proxy and TCP and all that

2706
01:56:48,540 --> 01:56:49,380
stuff

2707
01:56:49,380 --> 01:56:51,780
anything that's in that area is this

2708
01:56:51,780 --> 01:56:52,860
working group is just going to become

2709
01:56:52,860 --> 01:56:54,960
permanent if we just allow anything

2710
01:56:54,960 --> 01:56:58,699
that's proxying related foreign

2711
01:57:00,600 --> 01:57:03,480
next up Tommy

2712
01:57:03,480 --> 01:57:05,580
all right hello

2713
01:57:05,580 --> 01:57:07,619
um yeah I agree with what I've heard so

2714
01:57:07,619 --> 01:57:11,100
far I I think the text maybe rather than

2715
01:57:11,100 --> 01:57:12,659
saying core documents should be very

2716
01:57:12,659 --> 01:57:14,820
specific and talk about enhancements to

2717
01:57:14,820 --> 01:57:16,980
connect UDP and connect IP or however

2718
01:57:16,980 --> 01:57:18,420
you want to call them

2719
01:57:18,420 --> 01:57:19,560
um

2720
01:57:19,560 --> 01:57:22,500
and be very specific about saying

2721
01:57:22,500 --> 01:57:24,659
we should be doing work that adds

2722
01:57:24,659 --> 01:57:26,699
missing functionality

2723
01:57:26,699 --> 01:57:29,099
that you know prevents some use cases or

2724
01:57:29,099 --> 01:57:31,260
is about improving performance or you

2725
01:57:31,260 --> 01:57:32,219
know

2726
01:57:32,219 --> 01:57:34,020
text like that

2727
01:57:34,020 --> 01:57:34,739
um

2728
01:57:34,739 --> 01:57:36,179
for some of the other things I don't

2729
01:57:36,179 --> 01:57:38,940
think this should include authorization

2730
01:57:38,940 --> 01:57:41,040
um I'm not sure what transparent

2731
01:57:41,040 --> 01:57:43,920
modification of proxied content means

2732
01:57:43,920 --> 01:57:45,360
um

2733
01:57:45,360 --> 01:57:48,239
I'm also

2734
01:57:48,239 --> 01:57:51,239
uh I I think maybe rather than Discovery

2735
01:57:51,239 --> 01:57:53,880
and configuration

2736
01:57:53,880 --> 01:57:57,480
maybe another way to put it would be to

2737
01:57:57,480 --> 01:57:58,739
talk about

2738
01:57:58,739 --> 01:58:01,500
coordination between

2739
01:58:01,500 --> 01:58:06,139
different resources like

2740
01:58:06,260 --> 01:58:09,599
some of what Ben was getting at was

2741
01:58:09,599 --> 01:58:12,659
you know recognizing that oh this one

2742
01:58:12,659 --> 01:58:15,000
server does connect udpa and connect IPA

2743
01:58:15,000 --> 01:58:17,040
and connect and I think there are also

2744
01:58:17,040 --> 01:58:19,380
their functionality use cases that could

2745
01:58:19,380 --> 01:58:21,179
be related to saying Hey I want to

2746
01:58:21,179 --> 01:58:23,219
connect UDP that has the same local

2747
01:58:23,219 --> 01:58:25,580
address as my connect IP

2748
01:58:25,580 --> 01:58:28,560
to bundle them together so maybe talk

2749
01:58:28,560 --> 01:58:30,719
about more how we are

2750
01:58:30,719 --> 01:58:33,440
coordinating these different resources

2751
01:58:33,440 --> 01:58:35,760
I don't have a specific test for that

2752
01:58:35,760 --> 01:58:37,020
right now but that may cover the

2753
01:58:37,020 --> 01:58:39,900
configuration but narrowly scope it

2754
01:58:39,900 --> 01:58:41,040
um

2755
01:58:41,040 --> 01:58:43,020
and then the last comment

2756
01:58:43,020 --> 01:58:46,320
um I I think it's fine to say that we

2757
01:58:46,320 --> 01:58:48,960
don't include the TCP stuff and that

2758
01:58:48,960 --> 01:58:50,520
goes to http

2759
01:58:50,520 --> 01:58:52,199
but again I would bring up like the TCP

2760
01:58:52,199 --> 01:58:54,360
listening case is interesting and maybe

2761
01:58:54,360 --> 01:58:57,900
it's worth bringing up to the HP this

2762
01:58:57,900 --> 01:59:00,360
group of like you know if someone is

2763
01:59:00,360 --> 01:59:02,599
going to do

2764
01:59:02,599 --> 01:59:06,179
TCP listening proxies to mimic the UDP

2765
01:59:06,179 --> 01:59:08,580
ones does http want to take that on or

2766
01:59:08,580 --> 01:59:11,040
do they want to punt it over to mask

2767
01:59:11,040 --> 01:59:12,739
because that's

2768
01:59:12,739 --> 01:59:15,840
feels more Masky than

2769
01:59:15,840 --> 01:59:19,639
normal proxies

2770
01:59:22,800 --> 01:59:25,619
um Martin Duke uh so yeah I definitely

2771
01:59:25,619 --> 01:59:26,580
don't want to read the proxy working

2772
01:59:26,580 --> 01:59:28,139
group

2773
01:59:28,139 --> 01:59:30,840
um the the current

2774
01:59:30,840 --> 01:59:32,639
consensus I would say is that we're not

2775
01:59:32,639 --> 01:59:34,500
also not going to be mask m

2776
01:59:34,500 --> 01:59:37,139
and I I feel like this like we are open

2777
01:59:37,139 --> 01:59:39,060
for any and all extensions to connect

2778
01:59:39,060 --> 01:59:42,119
star is like not is like a mass gem

2779
01:59:42,119 --> 01:59:44,460
Charter now I mean you know that's not

2780
01:59:44,460 --> 01:59:46,440
written in stone we can decide that we

2781
01:59:46,440 --> 01:59:48,719
want to ask the ITF to cup mask M and if

2782
01:59:48,719 --> 01:59:50,940
so you know great if there's that much

2783
01:59:50,940 --> 01:59:53,699
work to do but maybe

2784
01:59:53,699 --> 01:59:55,739
we could scope this to actually some

2785
01:59:55,739 --> 01:59:57,360
actual problems we were trying to solve

2786
01:59:57,360 --> 01:59:59,340
like explicitly and I think this has

2787
01:59:59,340 --> 02:00:00,780
been a very useful session we ran a

2788
02:00:00,780 --> 02:00:03,000
little proxy dispatch which is fine and

2789
02:00:03,000 --> 02:00:04,380
like some things I think have already

2790
02:00:04,380 --> 02:00:06,719
more or less been booted there

2791
02:00:06,719 --> 02:00:10,920
um but not today but like over the next

2792
02:00:10,920 --> 02:00:12,599
few

2793
02:00:12,599 --> 02:00:16,020
um months we can uh figure out like a

2794
02:00:16,020 --> 02:00:18,000
set of plausible problems that would be

2795
02:00:18,000 --> 02:00:19,800
put in scope and if we choose later not

2796
02:00:19,800 --> 02:00:21,719
to adopt them it's okay to not deliver

2797
02:00:21,719 --> 02:00:23,639
all the all the all the things that are

2798
02:00:23,639 --> 02:00:24,900
in the charter

2799
02:00:24,900 --> 02:00:26,940
um and then we will have a nice stopping

2800
02:00:26,940 --> 02:00:28,800
point to then reevaluate rechartering

2801
02:00:28,800 --> 02:00:30,540
you know when when those those like

2802
02:00:30,540 --> 02:00:32,940
concrete items are done thank you yeah

2803
02:00:32,940 --> 02:00:35,340
so my uh follow-up question to that

2804
02:00:35,340 --> 02:00:36,840
which I'd written down earlier was do we

2805
02:00:36,840 --> 02:00:38,340
actually want to mention explicit

2806
02:00:38,340 --> 02:00:40,020
documents and I think mentioning the

2807
02:00:40,020 --> 02:00:41,580
explicit use cases we can always swap

2808
02:00:41,580 --> 02:00:43,080
out documents may be a nice balance that

2809
02:00:43,080 --> 02:00:44,639
we want to take yeah and like and and

2810
02:00:44,639 --> 02:00:46,380
again I think it's important to say that

2811
02:00:46,380 --> 02:00:47,580
something can be chartered we could just

2812
02:00:47,580 --> 02:00:49,500
not do it for for various reasons that's

2813
02:00:49,500 --> 02:00:53,360
fine too all right real Speedy Alex

2814
02:00:54,139 --> 02:00:56,460
Google um one of the things which I

2815
02:00:56,460 --> 02:00:57,420
found really interesting about the

2816
02:00:57,420 --> 02:00:58,980
discussion today is sort of the overlap

2817
02:00:58,980 --> 02:01:00,300
between some of the different things

2818
02:01:00,300 --> 02:01:02,580
that we had like I'm not proposed to

2819
02:01:02,580 --> 02:01:03,960
service Discovery per se and it's useful

2820
02:01:03,960 --> 02:01:05,340
in some cases where you wanted to offer

2821
02:01:05,340 --> 02:01:07,080
for example like a doe endpoint on your

2822
02:01:07,080 --> 02:01:08,699
mass proxy so I'm particularly

2823
02:01:08,699 --> 02:01:11,159
interested in figuring out how to put in

2824
02:01:11,159 --> 02:01:13,020
scope a lot of these like

2825
02:01:13,020 --> 02:01:14,639
layer breaking things that actually

2826
02:01:14,639 --> 02:01:16,080
would help us make a high performance

2827
02:01:16,080 --> 02:01:17,699
useful service

2828
02:01:17,699 --> 02:01:18,960
so

2829
02:01:18,960 --> 02:01:20,820
that is really where I think we should

2830
02:01:20,820 --> 02:01:22,619
be focusing around those sorts of edges

2831
02:01:22,619 --> 02:01:24,119
that way we avoid the like maintenance

2832
02:01:24,119 --> 02:01:25,679
problem but we still get like real world

2833
02:01:25,679 --> 02:01:30,199
use cases got it thank you Martin

2834
02:01:30,239 --> 02:01:32,099
uh to type this point earlier about the

2835
02:01:32,099 --> 02:01:34,260
scope of this this can be very broadly

2836
02:01:34,260 --> 02:01:36,420
interpreted and I think this needs a

2837
02:01:36,420 --> 02:01:39,659
very specific uh exclusion Clause

2838
02:01:39,659 --> 02:01:42,119
following all of this saying that the

2839
02:01:42,119 --> 02:01:44,219
work will not do generic blah blah blah

2840
02:01:44,219 --> 02:01:47,159
because otherwise this is going to

2841
02:01:47,159 --> 02:01:48,360
um yes you want to do all those things

2842
02:01:48,360 --> 02:01:49,980
related to proxying but you also don't

2843
02:01:49,980 --> 02:01:52,440
want to go out and Define new HTTP

2844
02:01:52,440 --> 02:01:54,599
authentication mechanisms or all of

2845
02:01:54,599 --> 02:01:57,060
those sorts of other things so I'd like

2846
02:01:57,060 --> 02:02:00,020
to see that worked on

2847
02:02:00,719 --> 02:02:02,940
and David schenazi very quickly yep

2848
02:02:02,940 --> 02:02:06,300
agree with folks here like maybe not

2849
02:02:06,300 --> 02:02:08,820
quite as tight as explicitly listing all

2850
02:02:08,820 --> 02:02:10,320
the extensions that were discussed today

2851
02:02:10,320 --> 02:02:12,599
as only what we can do but very tightly

2852
02:02:12,599 --> 02:02:14,699
like something close to that so it's not

2853
02:02:14,699 --> 02:02:16,920
all extensions one thing that I just

2854
02:02:16,920 --> 02:02:20,340
thought of that I might want to add and

2855
02:02:20,340 --> 02:02:22,380
well we'll take it to the list is I've

2856
02:02:22,380 --> 02:02:24,540
been trying the idea of writing a

2857
02:02:24,540 --> 02:02:26,639
document that it that's that answers the

2858
02:02:26,639 --> 02:02:30,300
question of what is a mask proxy uh

2859
02:02:30,300 --> 02:02:32,639
because I that comes up a lot of work at

2860
02:02:32,639 --> 02:02:34,260
work where people I hear someone telling

2861
02:02:34,260 --> 02:02:37,080
someone else well just use mask and then

2862
02:02:37,080 --> 02:02:39,300
someone says what does that mean and we

2863
02:02:39,300 --> 02:02:40,980
don't have a great answer to that today

2864
02:02:40,980 --> 02:02:42,900
I think that goes into like the

2865
02:02:42,900 --> 02:02:44,159
discussion that we had with Lorenzo

2866
02:02:44,159 --> 02:02:46,320
earlier of how connect connect UDP

2867
02:02:46,320 --> 02:02:47,940
connect IP how all these pieces fit

2868
02:02:47,940 --> 02:02:50,460
together and there might be space for an

2869
02:02:50,460 --> 02:02:52,260
informational document and I don't know

2870
02:02:52,260 --> 02:02:53,580
if that should be done inside this

2871
02:02:53,580 --> 02:02:56,699
working group or I can just go dump my

2872
02:02:56,699 --> 02:02:59,699
thoughts to the ISE but that's that's

2873
02:02:59,699 --> 02:03:01,440
what we're discuss question I'd like to

2874
02:03:01,440 --> 02:03:02,760
have a working group if we want to do it

2875
02:03:02,760 --> 02:03:04,860
here or not and our recharger is the

2876
02:03:04,860 --> 02:03:05,820
right time to have that discussion

2877
02:03:05,820 --> 02:03:07,260
perhaps on the list

2878
02:03:07,260 --> 02:03:09,179
sounds good thank you I see Lorenzo

2879
02:03:09,179 --> 02:03:10,560
cheerfully out of the cube but at the

2880
02:03:10,560 --> 02:03:12,119
mic let's go fast

2881
02:03:12,119 --> 02:03:14,820
um yeah I just wanted to say I think

2882
02:03:14,820 --> 02:03:16,679
trying to figure out what mask is going

2883
02:03:16,679 --> 02:03:20,219
to offer I mean to me it's it's the

2884
02:03:20,219 --> 02:03:23,219
ability to basically proxy at individ at

2885
02:03:23,219 --> 02:03:24,780
the fine grain IP level can can we

2886
02:03:24,780 --> 02:03:26,099
basically say that that's the goal and

2887
02:03:26,099 --> 02:03:28,139
like all things that

2888
02:03:28,139 --> 02:03:30,000
everything that is in pursuit of that

2889
02:03:30,000 --> 02:03:32,520
goal is basically

2890
02:03:32,520 --> 02:03:36,599
how can how can a a client appear to be

2891
02:03:36,599 --> 02:03:39,060
at the proxy and still make everything

2892
02:03:39,060 --> 02:03:40,920
work as if it were

2893
02:03:40,920 --> 02:03:42,840
you know as if it were directly

2894
02:03:42,840 --> 02:03:45,179
connected to the internet I think that

2895
02:03:45,179 --> 02:03:47,520
might be a useful thing to put in there

2896
02:03:47,520 --> 02:03:49,500
to navigate okay what is and what isn't

2897
02:03:49,500 --> 02:03:51,000
in scope

2898
02:03:51,000 --> 02:03:52,500
yeah thank you

2899
02:03:52,500 --> 02:03:53,940
all right this is excellent we have

2900
02:03:53,940 --> 02:03:55,679
gotten lots of really good input there

2901
02:03:55,679 --> 02:03:57,960
uh we will follow up on the list with

2902
02:03:57,960 --> 02:04:00,780
some links to very specific proposed

2903
02:04:00,780 --> 02:04:03,060
text as we go through that I think we're

2904
02:04:03,060 --> 02:04:05,040
hearing a good consistency between the

2905
02:04:05,040 --> 02:04:06,540
last meeting in this meeting in terms of

2906
02:04:06,540 --> 02:04:07,920
the scope of what people are interested

2907
02:04:07,920 --> 02:04:10,080
in working on and also super importantly

2908
02:04:10,080 --> 02:04:11,699
we've got lots of really good energy

2909
02:04:11,699 --> 02:04:13,860
from folks who actually are providing

2910
02:04:13,860 --> 02:04:15,360
really awesome input so thank you all

2911
02:04:15,360 --> 02:04:17,280
very very much for that and with that

2912
02:04:17,280 --> 02:04:20,159
that concludes mask at itf-115 thank you

2913
02:04:20,159 --> 02:04:22,280
all

2914
02:04:23,159 --> 02:04:25,339
foreign

