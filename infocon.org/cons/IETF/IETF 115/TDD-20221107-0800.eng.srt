1
00:00:09,019 --> 00:00:11,099
I checked this morning and I was like

2
00:00:11,099 --> 00:00:12,780
where the hell are the slides oh it's

3
00:00:12,780 --> 00:00:15,678
too early though sure

4
00:00:24,980 --> 00:00:27,599
what she's trying to do presenting here

5
00:00:27,599 --> 00:00:28,859
we go I can

6
00:00:28,859 --> 00:00:31,679
share pre-loaded slides oh yeah yeah oh

7
00:00:31,679 --> 00:00:33,480
you're doing it you can either one you

8
00:00:33,480 --> 00:00:35,940
can do it I'll do it

9
00:00:35,940 --> 00:00:37,200
um office lights you have to dismiss

10
00:00:37,200 --> 00:00:38,880
Christmas here

11
00:00:38,880 --> 00:00:41,480
otherwise

12
00:00:49,100 --> 00:00:53,600
yes John is here

13
00:01:17,460 --> 00:01:20,460
foreign

14
00:01:30,840 --> 00:01:33,799
you can come on up

15
00:01:46,320 --> 00:01:48,299
Hello wall we're about to get started

16
00:01:48,299 --> 00:01:50,579
hopefully people at the remote can hear

17
00:01:50,579 --> 00:01:53,640
this someone remote can acknowledge that

18
00:01:53,640 --> 00:01:55,740
would be awesome

19
00:01:55,740 --> 00:01:58,740
yay

20
00:02:00,180 --> 00:02:04,399
there we go hopefully it's better now

21
00:02:13,800 --> 00:02:16,319
so if you are sitting in a room called

22
00:02:16,319 --> 00:02:19,099
Kensington and you do not see people

23
00:02:19,099 --> 00:02:21,959
probably are in Kensington 2 or

24
00:02:21,959 --> 00:02:24,900
Kensington 3. which is very confusing

25
00:02:24,900 --> 00:02:26,280
because when you first cut the stairs

26
00:02:26,280 --> 00:02:27,900
you see Kensington and you walk in and

27
00:02:27,900 --> 00:02:29,220
it's not here

28
00:02:29,220 --> 00:02:31,140
so if there are not a bunch of people in

29
00:02:31,140 --> 00:02:32,640
the room with you you're probably in the

30
00:02:32,640 --> 00:02:35,580
wrong place get up walk down the

31
00:02:35,580 --> 00:02:37,860
passageway with all the glass and then

32
00:02:37,860 --> 00:02:41,099
turn left

33
00:02:41,099 --> 00:02:44,819
already so hi welcome to the technology

34
00:02:44,819 --> 00:02:46,500
deep Dives on quick

35
00:02:46,500 --> 00:02:49,400
I'm Warren

36
00:02:49,560 --> 00:02:51,780
I'm Brian

37
00:02:51,780 --> 00:02:54,900
and let's skip to the next slide this is

38
00:02:54,900 --> 00:02:57,420
the ietf note well

39
00:02:57,420 --> 00:02:59,519
um we're the first sort of like official

40
00:02:59,519 --> 00:03:01,560
sessions so it's entirely possible you

41
00:03:01,560 --> 00:03:02,940
have not seen this

42
00:03:02,940 --> 00:03:05,940
you should probably read this and figure

43
00:03:05,940 --> 00:03:08,459
out what all it means and talk to Legal

44
00:03:08,459 --> 00:03:10,800
Etc if you don't know what it means but

45
00:03:10,800 --> 00:03:13,819
Yep this is our ietf note well

46
00:03:13,819 --> 00:03:17,220
and thank you everyone for showing up so

47
00:03:17,220 --> 00:03:18,420
early

48
00:03:18,420 --> 00:03:21,360
um I realize it is ridiculously early

49
00:03:21,360 --> 00:03:24,060
and also hello to everyone who is remote

50
00:03:24,060 --> 00:03:25,800
and here

51
00:03:25,800 --> 00:03:27,720
also hello to everybody who's going to

52
00:03:27,720 --> 00:03:30,540
be watching this later on

53
00:03:30,540 --> 00:03:34,800
YouTube probably or some remote thing a

54
00:03:34,800 --> 00:03:37,200
video streaming service of your choice

55
00:03:37,200 --> 00:03:40,560
already and with that done let me hand

56
00:03:40,560 --> 00:03:42,420
it over to Brian

57
00:03:42,420 --> 00:03:44,940
so um I've actually had this question in

58
00:03:44,940 --> 00:03:46,440
the hallway a lot uh so do I have to

59
00:03:46,440 --> 00:03:47,819
come to the technical Deep dive on

60
00:03:47,819 --> 00:03:49,440
Monday and on Tuesday well that's really

61
00:03:49,440 --> 00:03:51,780
early both days um it's even earlier on

62
00:03:51,780 --> 00:03:54,720
on Tuesday actually at 7 30 tomorrow and

63
00:03:54,720 --> 00:03:56,280
you know I was asked okay that's a joke

64
00:03:56,280 --> 00:03:58,500
right no I mean it might be a joke but

65
00:03:58,500 --> 00:04:00,360
it's also the truth

66
00:04:00,360 --> 00:04:03,959
um the uh agenda is split into sort of

67
00:04:03,959 --> 00:04:05,580
like two parts

68
00:04:05,580 --> 00:04:08,099
um today is basically the basics of

69
00:04:08,099 --> 00:04:10,200
quick right gets you from I have no idea

70
00:04:10,200 --> 00:04:11,519
what's going on here or I've heard of

71
00:04:11,519 --> 00:04:13,920
quick or you know isn't that just the

72
00:04:13,920 --> 00:04:16,380
web over UDP to having a basic technical

73
00:04:16,380 --> 00:04:18,720
understanding of of what's going on and

74
00:04:18,720 --> 00:04:20,880
quick Jonah will be talking uh about the

75
00:04:20,880 --> 00:04:22,740
you know the basic introduction talk

76
00:04:22,740 --> 00:04:24,380
call the future with quick

77
00:04:24,380 --> 00:04:25,919
and

78
00:04:25,919 --> 00:04:28,080
um Martin will follow up on that with a

79
00:04:28,080 --> 00:04:29,520
talk about

80
00:04:29,520 --> 00:04:31,320
how quick is layered and how that

81
00:04:31,320 --> 00:04:33,300
layering is a bit different from you

82
00:04:33,300 --> 00:04:35,040
know the intuition that you'll have from

83
00:04:35,040 --> 00:04:39,180
you know TCP over IP etc etc

84
00:04:39,180 --> 00:04:40,280
um tomorrow

85
00:04:40,280 --> 00:04:45,180
uh we will go uh a bit deeper into a few

86
00:04:45,180 --> 00:04:46,919
topics uh so this is really about okay

87
00:04:46,919 --> 00:04:48,600
now we have the basic fundamentals of

88
00:04:48,600 --> 00:04:51,180
quick uh let's talk about

89
00:04:51,180 --> 00:04:53,580
how that gets deployed at scale how it

90
00:04:53,580 --> 00:04:55,620
is is sort of like used in the internet

91
00:04:55,620 --> 00:04:58,560
now uh and things that we've learned uh

92
00:04:58,560 --> 00:05:01,259
from running on the scale uh so that'll

93
00:05:01,259 --> 00:05:05,699
be Ian or Ian uh and Lucas who I haven't

94
00:05:05,699 --> 00:05:08,280
seen yet but he'll be here tomorrow

95
00:05:08,280 --> 00:05:09,960
um talking first about the deployments

96
00:05:09,960 --> 00:05:11,460
at scale and some of the things uh that

97
00:05:11,460 --> 00:05:12,840
we've learned through that and then like

98
00:05:12,840 --> 00:05:15,860
how uh to uh observe and debug

99
00:05:15,860 --> 00:05:18,120
applications on quick and with the rest

100
00:05:18,120 --> 00:05:20,040
of the time tomorrow

101
00:05:20,040 --> 00:05:21,419
um we will have a panel discussion with

102
00:05:21,419 --> 00:05:22,979
all of the speakers so if you have like

103
00:05:22,979 --> 00:05:25,380
interesting questions uh please hold

104
00:05:25,380 --> 00:05:28,620
them till tomorrow come at you know 8 30

105
00:05:28,620 --> 00:05:30,840
is when that should start uh and we'll

106
00:05:30,840 --> 00:05:33,780
have a panel up here uh with people to

107
00:05:33,780 --> 00:05:35,280
answer your questions and have some

108
00:05:35,280 --> 00:05:39,240
discussion about quick so with that I

109
00:05:39,240 --> 00:05:40,440
will stop talking

110
00:05:40,440 --> 00:05:44,419
and invite up John ingar

111
00:05:44,699 --> 00:05:46,440
who will talk about the future with

112
00:05:46,440 --> 00:05:50,580
quick as soon as I bounce the SlideShare

113
00:05:50,580 --> 00:05:53,160
thank you Brian do I have to stand in

114
00:05:53,160 --> 00:05:55,460
the spot

115
00:05:55,979 --> 00:06:00,120
I think I do no I don't

116
00:06:00,120 --> 00:06:02,940
we'll see the camera follows me

117
00:06:02,940 --> 00:06:04,800
um

118
00:06:04,800 --> 00:06:06,479
well thank you thank you everybody for

119
00:06:06,479 --> 00:06:09,600
being here early this morning hopefully

120
00:06:09,600 --> 00:06:12,600
hopefully this talk will wake you up if

121
00:06:12,600 --> 00:06:14,280
it doesn't

122
00:06:14,280 --> 00:06:17,220
uh uh I'll ask Martin to wake you up but

123
00:06:17,220 --> 00:06:18,479
anyways let's get started with this

124
00:06:18,479 --> 00:06:20,400
thing uh are we doing question and

125
00:06:20,400 --> 00:06:22,020
answer everything q a long side what are

126
00:06:22,020 --> 00:06:23,340
we doing with q a

127
00:06:23,340 --> 00:06:25,500
uh q a will be tomorrow will be tomorrow

128
00:06:25,500 --> 00:06:27,180
so if you have any questions write them

129
00:06:27,180 --> 00:06:28,440
down you'll forget them through the day

130
00:06:28,440 --> 00:06:31,080
and ask us tomorrow or catches in the

131
00:06:31,080 --> 00:06:32,639
corridors so I'm going to start with

132
00:06:32,639 --> 00:06:35,220
just this brief agenda it's basically

133
00:06:35,220 --> 00:06:39,360
what is quick and this is for

134
00:06:39,360 --> 00:06:41,819
um well I'm going to talk about Quick's

135
00:06:41,819 --> 00:06:43,680
immediate value proposition and I'm

136
00:06:43,680 --> 00:06:45,060
going to talk about really what is quick

137
00:06:45,060 --> 00:06:46,620
enable next slide

138
00:06:46,620 --> 00:06:49,199
so the subtext here is that the first

139
00:06:49,199 --> 00:06:51,180
piece is simply a short primer a very

140
00:06:51,180 --> 00:06:53,639
very short primer on Quake I can't do

141
00:06:53,639 --> 00:06:55,440
more than that

142
00:06:55,440 --> 00:06:57,660
um and we want to talk about how did we

143
00:06:57,660 --> 00:06:59,580
get the world interested in this like

144
00:06:59,580 --> 00:07:00,840
what did we do to make the world

145
00:07:00,840 --> 00:07:02,340
interested in this in this particular

146
00:07:02,340 --> 00:07:04,680
technology and finally what was the real

147
00:07:04,680 --> 00:07:06,180
goal what was the thing that we were

148
00:07:06,180 --> 00:07:08,280
really wanting to do what did we set out

149
00:07:08,280 --> 00:07:10,319
to do from the get-go

150
00:07:10,319 --> 00:07:12,539
um next slide so before I get going on

151
00:07:12,539 --> 00:07:16,139
to Quick who am I I am uh janayagar I'm

152
00:07:16,139 --> 00:07:18,240
VP of infrasection Network Services said

153
00:07:18,240 --> 00:07:20,759
fastly I am an editor of the ID of quick

154
00:07:20,759 --> 00:07:24,900
specifications I'm a chair of the iccrg

155
00:07:24,900 --> 00:07:28,440
um irtf iccrg research group and I've

156
00:07:28,440 --> 00:07:31,319
worked on transport for for way longer

157
00:07:31,319 --> 00:07:33,419
than I care to remember and on quick

158
00:07:33,419 --> 00:07:35,580
also for way longer than I care to

159
00:07:35,580 --> 00:07:36,360
remember

160
00:07:36,360 --> 00:07:39,360
but that's me next

161
00:07:39,360 --> 00:07:41,759
and now on to a short primer on quick

162
00:07:41,759 --> 00:07:43,860
next slide

163
00:07:43,860 --> 00:07:45,720
um I'm gonna tell you this this is going

164
00:07:45,720 --> 00:07:47,340
to be a very short primer there's not

165
00:07:47,340 --> 00:07:50,220
going to be I don't have a lot of slides

166
00:07:50,220 --> 00:07:51,900
here talking about the details of the

167
00:07:51,900 --> 00:07:54,360
protocol the details of the bits we've

168
00:07:54,360 --> 00:07:56,400
done I and others have done talks on

169
00:07:56,400 --> 00:07:58,500
these in various places so if you go on

170
00:07:58,500 --> 00:08:01,199
YouTube and do a search you'll find a

171
00:08:01,199 --> 00:08:02,699
bunch of these things

172
00:08:02,699 --> 00:08:04,440
um so my goal here is not to go into the

173
00:08:04,440 --> 00:08:08,460
details of this but to give you a a base

174
00:08:08,460 --> 00:08:10,620
from where you can you can dig in and

175
00:08:10,620 --> 00:08:12,300
and get deeper

176
00:08:12,300 --> 00:08:13,919
um but I'm just going to start off by

177
00:08:13,919 --> 00:08:16,380
saying quick is a new transport protocol

178
00:08:16,380 --> 00:08:18,360
now if you look at this picture this

179
00:08:18,360 --> 00:08:20,280
sort of has a depiction and Martin's

180
00:08:20,280 --> 00:08:22,440
going to come in uh thrash this picture

181
00:08:22,440 --> 00:08:23,819
and say well that's not quite how this

182
00:08:23,819 --> 00:08:25,080
works

183
00:08:25,080 --> 00:08:27,539
um later so that's that's fun for later

184
00:08:27,539 --> 00:08:30,000
but this is roughly a schematic

185
00:08:30,000 --> 00:08:31,860
understanding of where quick sits in

186
00:08:31,860 --> 00:08:34,260
sort of the protocol stack so to speak

187
00:08:34,260 --> 00:08:36,679
um we have the TCP TLS and HTTP

188
00:08:36,679 --> 00:08:39,958
protocols in the traditional stack and

189
00:08:39,958 --> 00:08:43,200
where quick sits is basically uh

190
00:08:43,200 --> 00:08:48,540
parallel to TCP and TLS and sum of http

191
00:08:48,540 --> 00:08:51,540
so yes it's weird but that was kind of

192
00:08:51,540 --> 00:08:55,200
the the uh it's all weird it was just a

193
00:08:55,200 --> 00:08:57,360
compression of multiple layers so to

194
00:08:57,360 --> 00:08:59,940
speak and TLS sits sort of within quick

195
00:08:59,940 --> 00:09:02,040
but it's not within quick however it

196
00:09:02,040 --> 00:09:04,160
sort of does sit within quick in in

197
00:09:04,160 --> 00:09:07,440
depending on how exactly you look at it

198
00:09:07,440 --> 00:09:09,300
um but that's sort of the layering

199
00:09:09,300 --> 00:09:12,300
picture here it is deliberately uh

200
00:09:12,300 --> 00:09:14,760
compresses multiple layers and it

201
00:09:14,760 --> 00:09:17,459
deliberately sits at these uh in these

202
00:09:17,459 --> 00:09:19,279
spaces because the goal here was to

203
00:09:19,279 --> 00:09:21,899
accelerate and deploy something that we

204
00:09:21,899 --> 00:09:25,080
could for the web next

205
00:09:25,080 --> 00:09:27,300
so what are these these features of

206
00:09:27,300 --> 00:09:30,420
quick that really made it viable and

207
00:09:30,420 --> 00:09:33,420
useful for the web well first it's

208
00:09:33,420 --> 00:09:36,420
multi-streamed multi-streaming is a very

209
00:09:36,420 --> 00:09:38,580
powerful feature it's a very powerful

210
00:09:38,580 --> 00:09:40,560
service the idea here is that you get

211
00:09:40,560 --> 00:09:43,140
within one end-to-end connection you get

212
00:09:43,140 --> 00:09:44,360
multiple

213
00:09:44,360 --> 00:09:47,940
ordered byte streams now this is not

214
00:09:47,940 --> 00:09:49,440
just multiple ordered byte streams it's

215
00:09:49,440 --> 00:09:51,000
a more General abstraction now this

216
00:09:51,000 --> 00:09:52,200
works really well for the web because

217
00:09:52,200 --> 00:09:54,779
the web has that every website has a lot

218
00:09:54,779 --> 00:09:56,339
of objects they are all multiple

219
00:09:56,339 --> 00:09:59,399
effectively uh parallel independent

220
00:09:59,399 --> 00:10:03,480
objects and so on but uh this is a more

221
00:10:03,480 --> 00:10:05,640
General abstraction

222
00:10:05,640 --> 00:10:07,560
streams are designed to be lightweight

223
00:10:07,560 --> 00:10:09,660
they're designed to be built and toned

224
00:10:09,660 --> 00:10:12,300
down rapidly efficiently and if your

225
00:10:12,300 --> 00:10:14,279
implementation does it right you can use

226
00:10:14,279 --> 00:10:16,320
this as even a message abstraction so

227
00:10:16,320 --> 00:10:19,860
you can think about this as a protocol

228
00:10:19,860 --> 00:10:22,680
that Inc that gives you a message

229
00:10:22,680 --> 00:10:25,380
abstraction in the form of streams

230
00:10:25,380 --> 00:10:26,940
and for the transport nerds among you

231
00:10:26,940 --> 00:10:29,580
you can build partial ordering on top of

232
00:10:29,580 --> 00:10:30,540
this thing

233
00:10:30,540 --> 00:10:32,519
or you can build complete ordering

234
00:10:32,519 --> 00:10:34,320
inside this thing so you have those

235
00:10:34,320 --> 00:10:36,180
degrees of freedom with multi-streaming

236
00:10:36,180 --> 00:10:37,680
next slide

237
00:10:37,680 --> 00:10:39,540
foreign

238
00:10:39,540 --> 00:10:42,180
why is this on top of UDP it's a

239
00:10:42,180 --> 00:10:44,760
question that people often ask we built

240
00:10:44,760 --> 00:10:46,680
this on top of UDP because UDP is what

241
00:10:46,680 --> 00:10:48,660
works on the internet today if you want

242
00:10:48,660 --> 00:10:50,279
to build something new and deploy it

243
00:10:50,279 --> 00:10:53,040
that's the way to do it and that's what

244
00:10:53,040 --> 00:10:58,200
we did uh now this uh doesn't

245
00:10:58,200 --> 00:11:00,360
necessarily mean that the protocol has

246
00:11:00,360 --> 00:11:03,120
to live in user space however remember

247
00:11:03,120 --> 00:11:04,800
that if you wanted to build something on

248
00:11:04,800 --> 00:11:07,079
top of Ip you are necessarily stuck to

249
00:11:07,079 --> 00:11:09,899
being inside the kernel and that is a

250
00:11:09,899 --> 00:11:12,000
big problem for us also in terms of

251
00:11:12,000 --> 00:11:13,860
building deploying shipping things so

252
00:11:13,860 --> 00:11:16,440
being on top of UDP gave us two

253
00:11:16,440 --> 00:11:18,180
significant benefits one of them was

254
00:11:18,180 --> 00:11:19,680
that we could get through the internet

255
00:11:19,680 --> 00:11:22,980
as it as it as it is with middle boxes

256
00:11:22,980 --> 00:11:25,200
and firewalls and everything else

257
00:11:25,200 --> 00:11:27,480
and it allowed us to deploy in user

258
00:11:27,480 --> 00:11:28,260
space

259
00:11:28,260 --> 00:11:29,940
so those were two significant benefits

260
00:11:29,940 --> 00:11:31,980
which is why we use them however it

261
00:11:31,980 --> 00:11:33,839
requires us to recreate a bunch of TCP

262
00:11:33,839 --> 00:11:36,360
functions on top of it so we had to redo

263
00:11:36,360 --> 00:11:38,880
all the TCP functions on top of this but

264
00:11:38,880 --> 00:11:42,899
we didn't simply redo them we uh we did

265
00:11:42,899 --> 00:11:46,380
a better job of doing them

266
00:11:46,380 --> 00:11:47,640
um because you've learned from the past

267
00:11:47,640 --> 00:11:49,680
we we wanted to incorporate all the

268
00:11:49,680 --> 00:11:53,359
learnings of TCP and we did

269
00:11:53,399 --> 00:11:56,220
um and importantly quick has encryption

270
00:11:56,220 --> 00:11:58,980
baked in this means data or everything

271
00:11:58,980 --> 00:12:00,720
that is carried by the quick protocol

272
00:12:00,720 --> 00:12:04,980
and quick headers are all protected and

273
00:12:04,980 --> 00:12:06,480
this uses Steelers 1.3 for key

274
00:12:06,480 --> 00:12:09,660
negotiation and this is uh uh basically

275
00:12:09,660 --> 00:12:12,959
a really important premise uh and I'll

276
00:12:12,959 --> 00:12:14,519
come back to this in a moment and again

277
00:12:14,519 --> 00:12:16,800
the Martin is going to go into more

278
00:12:16,800 --> 00:12:19,620
detail on exactly how this is done uh in

279
00:12:19,620 --> 00:12:21,660
in in quick but this was really

280
00:12:21,660 --> 00:12:23,220
important to us why was this important

281
00:12:23,220 --> 00:12:24,540
to us well of course it was important to

282
00:12:24,540 --> 00:12:26,820
us to protect the metadata we know today

283
00:12:26,820 --> 00:12:28,740
that if we were to design protocol that

284
00:12:28,740 --> 00:12:30,540
was not fundamentally protected that

285
00:12:30,540 --> 00:12:31,680
seems like we're not learning the

286
00:12:31,680 --> 00:12:33,899
lessons of the past 20 years so we did

287
00:12:33,899 --> 00:12:35,940
that but there was an even more

288
00:12:35,940 --> 00:12:37,740
important lesson here or an even more

289
00:12:37,740 --> 00:12:40,200
important reason for doing this

290
00:12:40,200 --> 00:12:41,160
um

291
00:12:41,160 --> 00:12:45,480
middle boxes ossify protocols that are

292
00:12:45,480 --> 00:12:46,740
exposed

293
00:12:46,740 --> 00:12:50,339
we did not want quick to be ossified TCP

294
00:12:50,339 --> 00:12:52,560
is today ossified many other protocols

295
00:12:52,560 --> 00:12:55,200
that have been deployed in the wild in

296
00:12:55,200 --> 00:12:57,839
plain text are completely ossified you

297
00:12:57,839 --> 00:12:59,600
cannot change them on the wire without

298
00:12:59,600 --> 00:13:03,000
seeing unexpected weird interactions

299
00:13:03,000 --> 00:13:05,040
with middle boxes that have ossified

300
00:13:05,040 --> 00:13:07,139
them or have certain expected behaviors

301
00:13:07,139 --> 00:13:11,060
expect certain behaviors of them

302
00:13:11,339 --> 00:13:13,440
oh that's the next one

303
00:13:13,440 --> 00:13:17,040
um so with sorry go back one slide

304
00:13:17,040 --> 00:13:17,700
um

305
00:13:17,700 --> 00:13:20,279
so with baking and encryption what we

306
00:13:20,279 --> 00:13:23,279
were able to do is basically say that

307
00:13:23,279 --> 00:13:25,860
only the endpoints can really understand

308
00:13:25,860 --> 00:13:28,019
and change

309
00:13:28,019 --> 00:13:30,420
the metadata the headers in the protocol

310
00:13:30,420 --> 00:13:32,579
as well as the body

311
00:13:32,579 --> 00:13:34,920
and that's an important important thing

312
00:13:34,920 --> 00:13:37,680
because now middle boxes are unable to

313
00:13:37,680 --> 00:13:39,240
change

314
00:13:39,240 --> 00:13:42,540
the headers or to obfuscate or to to

315
00:13:42,540 --> 00:13:44,940
mess with the headers or even read the

316
00:13:44,940 --> 00:13:47,339
headers so they can't have any expected

317
00:13:47,339 --> 00:13:50,220
behaviors which means that endpoints are

318
00:13:50,220 --> 00:13:52,200
free to change the protocol as they see

319
00:13:52,200 --> 00:13:54,300
fit what this means is that quick

320
00:13:54,300 --> 00:13:57,300
becomes evolvable so when quick gets

321
00:13:57,300 --> 00:13:59,820
deployed it becomes evolvable that was

322
00:13:59,820 --> 00:14:02,160
our goal and that's why encryption is

323
00:14:02,160 --> 00:14:06,019
baked into Quick next slide

324
00:14:06,360 --> 00:14:09,380
um so that is my rough

325
00:14:09,380 --> 00:14:12,420
introduction into quick and I'm sorry if

326
00:14:12,420 --> 00:14:13,980
you didn't see all the header bits that

327
00:14:13,980 --> 00:14:15,839
you wanted to see and I don't want to do

328
00:14:15,839 --> 00:14:17,519
that here to you early in the morning on

329
00:14:17,519 --> 00:14:19,620
Monday you're going to see plenty of if

330
00:14:19,620 --> 00:14:21,120
you want header bits walk into any room

331
00:14:21,120 --> 00:14:24,120
this week you'll see plenty of those

332
00:14:24,120 --> 00:14:25,320
um I'm going to talk to you about what

333
00:14:25,320 --> 00:14:26,820
Quick's immediate value proposition was

334
00:14:26,820 --> 00:14:28,320
how did we get the world in so this

335
00:14:28,320 --> 00:14:29,700
these are the features right this is

336
00:14:29,700 --> 00:14:31,740
what I talked about this is how we talk

337
00:14:31,740 --> 00:14:34,139
about quick why did we get how did the

338
00:14:34,139 --> 00:14:35,760
world get interested in quick but it's a

339
00:14:35,760 --> 00:14:38,160
quick broke new ground in several ways

340
00:14:38,160 --> 00:14:40,079
the first thing was the zero RTD

341
00:14:40,079 --> 00:14:41,399
transport and crypto handshake again

342
00:14:41,399 --> 00:14:42,540
you're going to hear more about that

343
00:14:42,540 --> 00:14:44,160
after my talk

344
00:14:44,160 --> 00:14:46,139
um and this is fundamentally difficult

345
00:14:46,139 --> 00:14:49,019
to do with TCP and the split TCP TLS

346
00:14:49,019 --> 00:14:51,000
models you've got dealers sitting on top

347
00:14:51,000 --> 00:14:52,620
of TCP they end up having different

348
00:14:52,620 --> 00:14:54,899
Scopes when I say different Scopes I

349
00:14:54,899 --> 00:14:57,720
mean scopes of identity Scopes in terms

350
00:14:57,720 --> 00:14:59,279
of where the connection gets terminated

351
00:14:59,279 --> 00:15:01,139
in the network and that makes it

352
00:15:01,139 --> 00:15:03,660
fundamentally difficult to do something

353
00:15:03,660 --> 00:15:06,240
like zero RTD people have argued people

354
00:15:06,240 --> 00:15:08,880
would say you know isn't it the same uh

355
00:15:08,880 --> 00:15:11,220
isn't zero rtt in quick so before I talk

356
00:15:11,220 --> 00:15:14,339
about the same as TCB what zero Oddity

357
00:15:14,339 --> 00:15:16,019
and crypto handshake what what that

358
00:15:16,019 --> 00:15:19,139
gives you is a low latency uh connection

359
00:15:19,139 --> 00:15:21,240
setup for those of you who've not been

360
00:15:21,240 --> 00:15:23,720
paying attention

361
00:15:23,820 --> 00:15:27,000
um zero rdd means zero round trip time

362
00:15:27,000 --> 00:15:30,899
delay before data is uh exchanged on a

363
00:15:30,899 --> 00:15:32,100
connection

364
00:15:32,100 --> 00:15:34,980
excuse me so

365
00:15:34,980 --> 00:15:37,260
um we've created a zero RTD transfer

366
00:15:37,260 --> 00:15:39,779
transport and crypto handshake now TCP

367
00:15:39,779 --> 00:15:42,480
could do this with TCP fast open in TCP

368
00:15:42,480 --> 00:15:44,760
and with TLS 1.3 and zero RTD and TLS

369
00:15:44,760 --> 00:15:47,399
however because of the split model you

370
00:15:47,399 --> 00:15:49,440
still end up having different Scopes you

371
00:15:49,440 --> 00:15:51,839
have TCP that doesn't understand domains

372
00:15:51,839 --> 00:15:53,519
certs things like that it understands

373
00:15:53,519 --> 00:15:55,800
only IP addresses TRS operates in a

374
00:15:55,800 --> 00:15:59,040
different space and you have a split

375
00:15:59,040 --> 00:16:00,540
between an understanding of what the

376
00:16:00,540 --> 00:16:02,579
endpoint identity itself is at these two

377
00:16:02,579 --> 00:16:04,560
levels you can reconcile these things

378
00:16:04,560 --> 00:16:06,360
but there's a lot of nuanced work to be

379
00:16:06,360 --> 00:16:07,920
done there if you want to make this work

380
00:16:07,920 --> 00:16:10,380
in the split TCP model

381
00:16:10,380 --> 00:16:11,579
um

382
00:16:11,579 --> 00:16:13,920
next slide

383
00:16:13,920 --> 00:16:15,959
collection migration was another thing

384
00:16:15,959 --> 00:16:18,839
that we wanted for 20-25 years to build

385
00:16:18,839 --> 00:16:20,579
into transport Technologies and we

386
00:16:20,579 --> 00:16:23,639
finally got it in and we were able to uh

387
00:16:23,639 --> 00:16:25,680
build this into Quick again this is

388
00:16:25,680 --> 00:16:27,480
fundamentally different to do with TCP

389
00:16:27,480 --> 00:16:31,079
in the split TLS TCP model uh in part

390
00:16:31,079 --> 00:16:32,940
because of the the endpoint identities

391
00:16:32,940 --> 00:16:35,279
but also in part because TCP we've done

392
00:16:35,279 --> 00:16:37,860
this with mptcb IDF has done this with

393
00:16:37,860 --> 00:16:40,259
mptcb but I would again challenge you to

394
00:16:40,259 --> 00:16:42,000
think about what we should think of as

395
00:16:42,000 --> 00:16:43,380
our end goals

396
00:16:43,380 --> 00:16:45,360
we want this to get deployed everywhere

397
00:16:45,360 --> 00:16:47,699
with mpdcp you still have to play nice

398
00:16:47,699 --> 00:16:49,079
with the operators with the network

399
00:16:49,079 --> 00:16:51,120
devices and so on I don't mean that we

400
00:16:51,120 --> 00:16:52,259
shouldn't play nice with the operators

401
00:16:52,259 --> 00:16:55,199
what I mean is that we can't wait for

402
00:16:55,199 --> 00:16:57,480
every operator and every metal box

403
00:16:57,480 --> 00:16:59,399
vendor to come on board before we

404
00:16:59,399 --> 00:17:02,579
consider a protocol deployed that is a

405
00:17:02,579 --> 00:17:04,559
very very long poll and that makes the

406
00:17:04,559 --> 00:17:06,419
tent unlivable and it's it's too loud

407
00:17:06,419 --> 00:17:09,720
too long a pole so that's basically

408
00:17:09,720 --> 00:17:12,179
connection migration again we were we've

409
00:17:12,179 --> 00:17:14,579
deployed it it's being used already

410
00:17:14,579 --> 00:17:16,679
next slide

411
00:17:16,679 --> 00:17:19,740
and we are able to build troubleshooting

412
00:17:19,740 --> 00:17:20,939
and debugging capabilities you want to

413
00:17:20,939 --> 00:17:22,260
hear about this a little bit more from

414
00:17:22,260 --> 00:17:26,459
Lucas uh tomorrow but uh the the

415
00:17:26,459 --> 00:17:28,559
difference here is this

416
00:17:28,559 --> 00:17:31,200
um the the value prop here is this right

417
00:17:31,200 --> 00:17:34,620
so with anybody who's anybody here who's

418
00:17:34,620 --> 00:17:39,000
done debugging kernel debugging anybody

419
00:17:39,000 --> 00:17:40,919
okay a fair number of fans excellent

420
00:17:40,919 --> 00:17:44,960
have you also done application debugging

421
00:17:45,059 --> 00:17:48,419
have you tried to correlate those traces

422
00:17:48,419 --> 00:17:50,280
foreign

423
00:17:50,280 --> 00:17:52,200
that is a pain

424
00:17:52,200 --> 00:17:53,580
right so when you have certain

425
00:17:53,580 --> 00:17:54,900
application behavior and you go okay

426
00:17:54,900 --> 00:17:56,280
I've got application trace and I go okay

427
00:17:56,280 --> 00:17:58,799
now I need to grab the TCP traces or S

428
00:17:58,799 --> 00:18:00,240
trace or whatever it is that you need to

429
00:18:00,240 --> 00:18:01,919
do and you need to go down to the kernel

430
00:18:01,919 --> 00:18:03,539
and go all the way down the network path

431
00:18:03,539 --> 00:18:06,059
to figure out everything you are trying

432
00:18:06,059 --> 00:18:07,620
to use completely different pipelines

433
00:18:07,620 --> 00:18:09,299
built by completely different people for

434
00:18:09,299 --> 00:18:10,799
completely different use cases and try

435
00:18:10,799 --> 00:18:12,960
to correlate them companies that have

436
00:18:12,960 --> 00:18:14,520
managed to successfully build those

437
00:18:14,520 --> 00:18:17,160
things have used them very very uh

438
00:18:17,160 --> 00:18:19,200
effectively however it's not a small

439
00:18:19,200 --> 00:18:19,980
order

440
00:18:19,980 --> 00:18:23,880
it's difficult right so being in user

441
00:18:23,880 --> 00:18:24,720
space

442
00:18:24,720 --> 00:18:27,840
for uh for quick basically gives you the

443
00:18:27,840 --> 00:18:31,260
ability to log it log transport Network

444
00:18:31,260 --> 00:18:34,559
level traces alongside application Level

445
00:18:34,559 --> 00:18:37,740
traces that is huge because you don't

446
00:18:37,740 --> 00:18:40,860
have to go around doing this uh uh uh

447
00:18:40,860 --> 00:18:43,679
separately you can log alongside the

448
00:18:43,679 --> 00:18:45,539
application traces you cannot log things

449
00:18:45,539 --> 00:18:46,799
like what is the conditional window

450
00:18:46,799 --> 00:18:48,240
value what is the state of the

451
00:18:48,240 --> 00:18:49,679
connection what happened when was when

452
00:18:49,679 --> 00:18:51,660
was teams created again you'll hear more

453
00:18:51,660 --> 00:18:53,760
about this from Lucas tomorrow we'll

454
00:18:53,760 --> 00:18:55,380
talk to you about

455
00:18:55,380 --> 00:18:59,100
um about uh logging under the logging

456
00:18:59,100 --> 00:19:00,299
format that we're standardizing for

457
00:19:00,299 --> 00:19:01,799
quick here

458
00:19:01,799 --> 00:19:04,380
um but we get much significantly richer

459
00:19:04,380 --> 00:19:06,840
capabilities for doing this in user

460
00:19:06,840 --> 00:19:07,679
space

461
00:19:07,679 --> 00:19:10,220
next

462
00:19:11,039 --> 00:19:13,200
um so actually go back one

463
00:19:13,200 --> 00:19:15,360
thing yeah I missed oh right I meant to

464
00:19:15,360 --> 00:19:17,640
say this here there is a

465
00:19:17,640 --> 00:19:18,539
um

466
00:19:18,539 --> 00:19:20,340
uh another really really cool thing

467
00:19:20,340 --> 00:19:22,320
which I you know I'll show at the end of

468
00:19:22,320 --> 00:19:27,439
today if you have time I'll demo it but

469
00:19:27,539 --> 00:19:29,580
one thing that you have a problem with

470
00:19:29,580 --> 00:19:32,220
for instance is is if you have poor

471
00:19:32,220 --> 00:19:33,900
Behavior at the client side for instance

472
00:19:33,900 --> 00:19:37,020
it's you can grab client-side packet

473
00:19:37,020 --> 00:19:39,600
traces or you can report it to the

474
00:19:39,600 --> 00:19:41,760
server side who whomever is at the

475
00:19:41,760 --> 00:19:43,679
server and you can say Hey you know go

476
00:19:43,679 --> 00:19:45,419
dig into this particular Trace I'll give

477
00:19:45,419 --> 00:19:46,919
you an identifier for a connection for

478
00:19:46,919 --> 00:19:48,360
instance go find out what happened with

479
00:19:48,360 --> 00:19:50,820
that connection why was it behaving

480
00:19:50,820 --> 00:19:54,120
poorly you have no other recourse and on

481
00:19:54,120 --> 00:19:56,160
the server side what we would do at the

482
00:19:56,160 --> 00:19:58,020
server side is generally we end up

483
00:19:58,020 --> 00:19:59,580
having to

484
00:19:59,580 --> 00:20:02,520
uh find your connection now that is an

485
00:20:02,520 --> 00:20:05,100
impossibility usually finding a

486
00:20:05,100 --> 00:20:06,960
connection in the fleet of service that

487
00:20:06,960 --> 00:20:08,880
we have and so on is super difficult to

488
00:20:08,880 --> 00:20:12,660
do and it's uh and then go trace it

489
00:20:12,660 --> 00:20:14,220
track it find the where the client is

490
00:20:14,220 --> 00:20:17,039
connected it's really difficult to do

491
00:20:17,039 --> 00:20:19,260
um what we were able to do wouldn't it

492
00:20:19,260 --> 00:20:21,840
be cool if the client could basically

493
00:20:21,840 --> 00:20:23,880
ask the server and say hey can you just

494
00:20:23,880 --> 00:20:28,320
send me your view of our connection

495
00:20:28,320 --> 00:20:30,240
over the connection that we have right

496
00:20:30,240 --> 00:20:32,100
now

497
00:20:32,100 --> 00:20:35,299
like your packet race for my connection

498
00:20:35,299 --> 00:20:37,559
just send it to me over the same

499
00:20:37,559 --> 00:20:39,720
connection that we already have that is

500
00:20:39,720 --> 00:20:42,240
what we built uh and we were able to do

501
00:20:42,240 --> 00:20:43,860
that next slide I'm not going to show

502
00:20:43,860 --> 00:20:45,780
you this demo right now because it's a

503
00:20:45,780 --> 00:20:47,640
bit tricky to get going

504
00:20:47,640 --> 00:20:49,799
um but the links are here go to the

505
00:20:49,799 --> 00:20:52,140
video only link and then go to the self

506
00:20:52,140 --> 00:20:54,480
Trace link using the same browser window

507
00:20:54,480 --> 00:20:56,100
meaning that you have a connection going

508
00:20:56,100 --> 00:20:58,020
over the you'll have a stream going over

509
00:20:58,020 --> 00:21:00,240
the same connection and that only works

510
00:21:00,240 --> 00:21:01,919
of course if you're using quick

511
00:21:01,919 --> 00:21:04,620
and I'm happy to show it to you later uh

512
00:21:04,620 --> 00:21:08,220
if I can get it going so this is uh uh

513
00:21:08,220 --> 00:21:10,260
really really valuable at the client

514
00:21:10,260 --> 00:21:12,960
you're able to see a service uh packet

515
00:21:12,960 --> 00:21:16,080
race now uh um I'm gonna move to the

516
00:21:16,080 --> 00:21:18,000
next thing which is transforming server

517
00:21:18,000 --> 00:21:19,080
architecture so I won't go into the

518
00:21:19,080 --> 00:21:20,280
details of this

519
00:21:20,280 --> 00:21:22,260
um but deg server return is an ability

520
00:21:22,260 --> 00:21:25,679
for a server to be able to hand off a

521
00:21:25,679 --> 00:21:27,840
request to another server and have that

522
00:21:27,840 --> 00:21:30,059
server serve the user directly so it's

523
00:21:30,059 --> 00:21:33,179
sort of like if if a client requests a

524
00:21:33,179 --> 00:21:34,799
resource from a server the server

525
00:21:34,799 --> 00:21:36,780
doesn't have the resource but knows

526
00:21:36,780 --> 00:21:38,940
another server that has it is able to

527
00:21:38,940 --> 00:21:41,100
sort of Kick the connection over or the

528
00:21:41,100 --> 00:21:43,980
request over and have the response

529
00:21:43,980 --> 00:21:45,480
served directly from there this is

530
00:21:45,480 --> 00:21:47,220
called direct server return it's called

531
00:21:47,220 --> 00:21:49,320
direct server return because normally

532
00:21:49,320 --> 00:21:51,840
what what and what commonly happens and

533
00:21:51,840 --> 00:21:53,820
the easier way to solve this problem of

534
00:21:53,820 --> 00:21:55,200
I don't have the content somebody else

535
00:21:55,200 --> 00:21:57,600
does is client connection to the server

536
00:21:57,600 --> 00:22:00,059
server connects to the other server

537
00:22:00,059 --> 00:22:02,820
receives the content serves it back so

538
00:22:02,820 --> 00:22:06,120
there's a full uh path back instead you

539
00:22:06,120 --> 00:22:08,760
bypass this intermediating server on the

540
00:22:08,760 --> 00:22:10,320
return path that's called direct server

541
00:22:10,320 --> 00:22:13,500
return we are able to design this in

542
00:22:13,500 --> 00:22:15,000
quick and and some of us have been

543
00:22:15,000 --> 00:22:17,760
designing building this into into our

544
00:22:17,760 --> 00:22:19,380
server infrastructures and the reason

545
00:22:19,380 --> 00:22:21,419
we're able to do this is because in

546
00:22:21,419 --> 00:22:23,580
quick again in terms of how we build the

547
00:22:23,580 --> 00:22:25,679
transport protocol itself we were able

548
00:22:25,679 --> 00:22:27,720
to separate the sender's view from the

549
00:22:27,720 --> 00:22:30,179
receiver's view of the world

550
00:22:30,179 --> 00:22:33,419
and uh in this particular case that

551
00:22:33,419 --> 00:22:35,220
plays very nicely allows us to actually

552
00:22:35,220 --> 00:22:36,659
build something like direct server

553
00:22:36,659 --> 00:22:38,039
return we can have multiple servers

554
00:22:38,039 --> 00:22:40,919
sending with one receiver receiving this

555
00:22:40,919 --> 00:22:42,659
is again fundamentally difficult to do

556
00:22:42,659 --> 00:22:44,460
in TCP

557
00:22:44,460 --> 00:22:47,240
next slide

558
00:22:48,720 --> 00:22:50,820
so this is how we got the world

559
00:22:50,820 --> 00:22:51,960
interested these are the different

560
00:22:51,960 --> 00:22:53,460
things these are the different benefits

561
00:22:53,460 --> 00:22:56,460
that we brought out and we when and this

562
00:22:56,460 --> 00:22:58,140
is how all of us got excited about quick

563
00:22:58,140 --> 00:23:00,240
and so on but I'm going to now talk

564
00:23:00,240 --> 00:23:02,820
about what quick is enabling right next

565
00:23:02,820 --> 00:23:05,460
slide what does quick enable so quick

566
00:23:05,460 --> 00:23:07,200
enables multiple new technologies that

567
00:23:07,200 --> 00:23:09,000
you can build within quick so you can

568
00:23:09,000 --> 00:23:10,919
hear about you know you won't hear these

569
00:23:10,919 --> 00:23:13,380
experiments today but maybe tomorrow uh

570
00:23:13,380 --> 00:23:15,419
you're gonna there are new condition

571
00:23:15,419 --> 00:23:17,039
controllers that you can easily build

572
00:23:17,039 --> 00:23:18,659
and deploy I know that meta has done

573
00:23:18,659 --> 00:23:20,580
this Google's done this fastly we've

574
00:23:20,580 --> 00:23:23,400
done this so that it's it makes it much

575
00:23:23,400 --> 00:23:25,140
much easier easier to deploy these

576
00:23:25,140 --> 00:23:28,200
things in in in in quick than it has

577
00:23:28,200 --> 00:23:32,000
been in TCP next slide

578
00:23:32,700 --> 00:23:35,100
if you've not heard about mask

579
00:23:35,100 --> 00:23:38,100
um mask basically employs HTTP 3 and

580
00:23:38,100 --> 00:23:42,000
quick to create hidden tunnels right and

581
00:23:42,000 --> 00:23:44,340
this is something that you can again

582
00:23:44,340 --> 00:23:47,280
quick is enabling this technology was it

583
00:23:47,280 --> 00:23:49,200
possible before yes but this makes it

584
00:23:49,200 --> 00:23:51,299
much more efficient much

585
00:23:51,299 --> 00:23:53,280
uh

586
00:23:53,280 --> 00:23:56,580
um more performant and also more

587
00:23:56,580 --> 00:23:58,919
efficient at the service tax to be able

588
00:23:58,919 --> 00:24:02,460
to deploy uh something like tunneling

589
00:24:02,460 --> 00:24:03,179
um

590
00:24:03,179 --> 00:24:05,340
and this is not just I'm not just saying

591
00:24:05,340 --> 00:24:07,140
talking about things here that could be

592
00:24:07,140 --> 00:24:09,059
built this has been built if you've

593
00:24:09,059 --> 00:24:10,860
heard of Apple's private relay iCloud

594
00:24:10,860 --> 00:24:12,659
private relay that basically use this

595
00:24:12,659 --> 00:24:16,080
mask extensively and it carries a ton of

596
00:24:16,080 --> 00:24:18,000
bytes today if you have an iPhone and

597
00:24:18,000 --> 00:24:19,500
you turn it on you're using mask you're

598
00:24:19,500 --> 00:24:22,860
using HTTP 3M quick to do this today

599
00:24:22,860 --> 00:24:24,659
next slide

600
00:24:24,659 --> 00:24:27,840
and finally media over quick uh or what

601
00:24:27,840 --> 00:24:31,860
I call the new world for webrtc refugees

602
00:24:31,860 --> 00:24:34,320
um is is as a proposal to do media

603
00:24:34,320 --> 00:24:36,720
directly over quick and that's again

604
00:24:36,720 --> 00:24:39,960
quickest enabling these Technologies now

605
00:24:39,960 --> 00:24:42,419
to happen because it has is its feature

606
00:24:42,419 --> 00:24:43,860
Rich enough that you can actually think

607
00:24:43,860 --> 00:24:45,600
about doing more interesting things

608
00:24:45,600 --> 00:24:48,120
directly with the transport next slide

609
00:24:48,120 --> 00:24:49,860
but

610
00:24:49,860 --> 00:24:52,320
I'm gonna I'm gonna I'm gonna offer that

611
00:24:52,320 --> 00:24:53,820
the real value of quick was something

612
00:24:53,820 --> 00:24:56,658
else next

613
00:24:57,780 --> 00:24:59,820
so quick I've I've told you that the

614
00:24:59,820 --> 00:25:01,080
quick makes the web faster more

615
00:25:01,080 --> 00:25:02,940
resilient more responsive

616
00:25:02,940 --> 00:25:04,559
but this is just the beginning next

617
00:25:04,559 --> 00:25:06,860
slide

618
00:25:07,500 --> 00:25:09,419
quick enables these Technologies I

619
00:25:09,419 --> 00:25:11,580
talked about so it all it becomes a

620
00:25:11,580 --> 00:25:15,240
platform for these new technologies moq

621
00:25:15,240 --> 00:25:18,240
mock mask other stuff that we want to

622
00:25:18,240 --> 00:25:19,200
deploy

623
00:25:19,200 --> 00:25:21,059
next

624
00:25:21,059 --> 00:25:22,980
and I've also told you that quick is a

625
00:25:22,980 --> 00:25:24,720
transport technology that can be evolved

626
00:25:24,720 --> 00:25:26,400
on the internet because we managed to

627
00:25:26,400 --> 00:25:28,620
encrypt everything we can evolve this

628
00:25:28,620 --> 00:25:30,360
thing going forward it is already

629
00:25:30,360 --> 00:25:31,919
continuously evolving in multiple

630
00:25:31,919 --> 00:25:34,320
versions of quick already exist in

631
00:25:34,320 --> 00:25:37,140
parallel on the internet today

632
00:25:37,140 --> 00:25:38,340
and

633
00:25:38,340 --> 00:25:40,080
next slide

634
00:25:40,080 --> 00:25:41,940
I'm going to offer that we've pulled a

635
00:25:41,940 --> 00:25:44,640
sleight of hand we basically

636
00:25:44,640 --> 00:25:46,320
convinced everybody that these are the

637
00:25:46,320 --> 00:25:48,059
reasons we wanted to deploy this thing

638
00:25:48,059 --> 00:25:51,659
HTTP was the reason and uh getting these

639
00:25:51,659 --> 00:25:53,100
these milliseconds of latency

640
00:25:53,100 --> 00:25:54,960
Improvement and these features were the

641
00:25:54,960 --> 00:25:56,840
reasons but next

642
00:25:56,840 --> 00:26:00,779
we used HTTP on the web as a vehicle to

643
00:26:00,779 --> 00:26:02,580
deploy quick into almost serve all

644
00:26:02,580 --> 00:26:04,980
server and client deployments

645
00:26:04,980 --> 00:26:07,799
the quickest deployed now widely it also

646
00:26:07,799 --> 00:26:10,620
it it almost every server deployment has

647
00:26:10,620 --> 00:26:13,380
quick in it almost every client browser

648
00:26:13,380 --> 00:26:15,900
and other client libraries they all have

649
00:26:15,900 --> 00:26:18,779
quick in them now next

650
00:26:18,779 --> 00:26:21,419
but our goal really was to create

651
00:26:21,419 --> 00:26:24,539
an end-to-end transport that allowed for

652
00:26:24,539 --> 00:26:25,980
end-to-end transports and Technologies

653
00:26:25,980 --> 00:26:28,100
to thrive through an ossified internet

654
00:26:28,100 --> 00:26:31,320
and I would say that we've we are sort

655
00:26:31,320 --> 00:26:32,880
of somewhere not at the beginning of

656
00:26:32,880 --> 00:26:34,559
this journey we managed to get somewhere

657
00:26:34,559 --> 00:26:35,940
hopefully we'll get to the end of the

658
00:26:35,940 --> 00:26:38,520
journey but we are certainly much

659
00:26:38,520 --> 00:26:40,679
farther along than I thought we would

660
00:26:40,679 --> 00:26:43,200
get to so thank you

661
00:26:43,200 --> 00:26:45,320
thank you

662
00:26:48,720 --> 00:26:51,960
thank you very much Jonah next up we

663
00:26:51,960 --> 00:26:53,279
have Martin

664
00:26:53,279 --> 00:26:56,820
who will be showing us some header

665
00:26:56,820 --> 00:26:58,140
diagrams I think

666
00:26:58,140 --> 00:27:01,340
yes now I had a diagrams

667
00:27:02,340 --> 00:27:03,840
all right

668
00:27:03,840 --> 00:27:07,380
so Dex

669
00:27:07,380 --> 00:27:09,779
coming all right so I'm going to talk a

670
00:27:09,779 --> 00:27:12,020
little bit about the quick handshake and

671
00:27:12,020 --> 00:27:13,860
in particular some of the security

672
00:27:13,860 --> 00:27:17,580
properties uh security being one of the

673
00:27:17,580 --> 00:27:19,679
sort of primary drivers behind building

674
00:27:19,679 --> 00:27:20,940
this thing

675
00:27:20,940 --> 00:27:24,120
do you have a clicker yes but it doesn't

676
00:27:24,120 --> 00:27:26,640
work it doesn't work all right well next

677
00:27:26,640 --> 00:27:28,679
slide quicker is to say next slide and

678
00:27:28,679 --> 00:27:30,840
yeah should I catch your cues so there's

679
00:27:30,840 --> 00:27:32,279
a couple of things in here I may not get

680
00:27:32,279 --> 00:27:34,440
to uh some of the later things in any

681
00:27:34,440 --> 00:27:37,559
real detail uh but uh

682
00:27:37,559 --> 00:27:40,020
that layering diagram that uh Jonah was

683
00:27:40,020 --> 00:27:41,039
talking about I think we'll spend a

684
00:27:41,039 --> 00:27:43,380
little bit of time on that uh quite

685
00:27:43,380 --> 00:27:45,960
possibly the most difficult part of

686
00:27:45,960 --> 00:27:48,840
getting quick working was integrating

687
00:27:48,840 --> 00:27:52,140
the the TLs handshake into quick

688
00:27:52,140 --> 00:27:54,480
there is a something of a tight

689
00:27:54,480 --> 00:27:56,580
interaction between those those two

690
00:27:56,580 --> 00:27:58,320
pieces and it turned out to be

691
00:27:58,320 --> 00:28:01,620
extraordinarily fiddly and uh we were

692
00:28:01,620 --> 00:28:03,120
given a protocol

693
00:28:03,120 --> 00:28:04,860
um from the work that the folks at

694
00:28:04,860 --> 00:28:06,440
Google who had designed their own

695
00:28:06,440 --> 00:28:10,140
cryptographic handshake and it was

696
00:28:10,140 --> 00:28:13,620
broken in tiny subtle and very

697
00:28:13,620 --> 00:28:15,900
significant ways that required years of

698
00:28:15,900 --> 00:28:20,640
work to get to work so next slide please

699
00:28:20,640 --> 00:28:23,880
so you've seen uh what is I think the

700
00:28:23,880 --> 00:28:25,980
the standard reference point for how we

701
00:28:25,980 --> 00:28:28,500
think about layering in quick uh there's

702
00:28:28,500 --> 00:28:31,080
this little TLS slice that sort of

703
00:28:31,080 --> 00:28:33,179
jammed in on the quick layer and this is

704
00:28:33,179 --> 00:28:35,640
something that I think makes people who

705
00:28:35,640 --> 00:28:38,880
like the nice layer cakes a little

706
00:28:38,880 --> 00:28:41,880
uncomfortable and we'll explain why

707
00:28:41,880 --> 00:28:43,799
that's the case as we get through this

708
00:28:43,799 --> 00:28:46,620
one next slide please

709
00:28:46,620 --> 00:28:50,340
so um at a very high level quick

710
00:28:50,340 --> 00:28:52,500
connection setup does

711
00:28:52,500 --> 00:28:56,159
everything that TCP does and everything

712
00:28:56,159 --> 00:28:59,220
that TLS does all sort of integrated

713
00:28:59,220 --> 00:29:00,600
together and we did that for a number of

714
00:29:00,600 --> 00:29:02,460
reasons I think the the primary one

715
00:29:02,460 --> 00:29:04,799
being performance

716
00:29:04,799 --> 00:29:06,059
so

717
00:29:06,059 --> 00:29:08,900
um what we wanted to do was avoid

718
00:29:08,900 --> 00:29:10,740
replicating a lot of the security work

719
00:29:10,740 --> 00:29:12,480
it turns out they're building a good

720
00:29:12,480 --> 00:29:15,059
security handshake is extraordinarily

721
00:29:15,059 --> 00:29:18,840
difficult and tls13 is the result of a

722
00:29:18,840 --> 00:29:20,340
number of years of work

723
00:29:20,340 --> 00:29:22,980
and we didn't want to have to redo all

724
00:29:22,980 --> 00:29:25,080
of that work because we're also building

725
00:29:25,080 --> 00:29:28,200
all of the TCP bits in tiling on top of

726
00:29:28,200 --> 00:29:30,120
UDP which is an entirely new protocol

727
00:29:30,120 --> 00:29:32,520
and that's more than enough work and it

728
00:29:32,520 --> 00:29:33,840
turned out to be even more work than we

729
00:29:33,840 --> 00:29:36,659
anticipated when we we came into this so

730
00:29:36,659 --> 00:29:38,580
the way to think of this is that TLS

731
00:29:38,580 --> 00:29:40,080
provides all of the cryptographic

732
00:29:40,080 --> 00:29:41,820
assurances that you might expect from a

733
00:29:41,820 --> 00:29:46,080
protocol uh and quick provides all the

734
00:29:46,080 --> 00:29:49,380
things that that TCP would provide being

735
00:29:49,380 --> 00:29:53,399
reliable audit delivery and in turn

736
00:29:53,399 --> 00:29:55,200
they each

737
00:29:55,200 --> 00:29:57,740
provide services to the other

738
00:29:57,740 --> 00:30:01,500
TLS requires ordered reliable delivery

739
00:30:01,500 --> 00:30:04,620
quick requires a secure a handshake

740
00:30:04,620 --> 00:30:06,899
next please

741
00:30:06,899 --> 00:30:10,440
so we're taking the core TLS guarantees

742
00:30:10,440 --> 00:30:13,500
authentication confidentiality integrity

743
00:30:13,500 --> 00:30:18,240
and all of the core TCP guarantees at

744
00:30:18,240 --> 00:30:19,980
the handshake level now

745
00:30:19,980 --> 00:30:22,620
um other people can talk about streams

746
00:30:22,620 --> 00:30:24,000
and and the various application

747
00:30:24,000 --> 00:30:25,500
semantics that we're providing quick

748
00:30:25,500 --> 00:30:29,100
which include some of the core TCP

749
00:30:29,100 --> 00:30:32,159
guarantees like in order reliable

750
00:30:32,159 --> 00:30:34,940
delivery but um for the handshake

751
00:30:34,940 --> 00:30:38,039
there's a lot of the things around the

752
00:30:38,039 --> 00:30:40,860
TCP handshake that I think weren't in

753
00:30:40,860 --> 00:30:42,240
the original versions of TCP But

754
00:30:42,240 --> 00:30:43,860
ultimately TCP needed to have which are

755
00:30:43,860 --> 00:30:44,820
things like

756
00:30:44,820 --> 00:30:47,520
being assured that the other side you're

757
00:30:47,520 --> 00:30:50,159
talking to is willing to talk to you for

758
00:30:50,159 --> 00:30:51,360
instance and that turns out to be an

759
00:30:51,360 --> 00:30:52,860
extraordinarily important part of the

760
00:30:52,860 --> 00:30:54,539
design of quick and we'll talk about

761
00:30:54,539 --> 00:30:56,640
that look as much as we can

762
00:30:56,640 --> 00:30:58,620
the other thing is we were looking to do

763
00:30:58,620 --> 00:31:00,840
better than any of these protocols we

764
00:31:00,840 --> 00:31:02,340
have a new protocol that we we're

765
00:31:02,340 --> 00:31:04,620
implementing here we

766
00:31:04,620 --> 00:31:06,600
took every opportunity we could to make

767
00:31:06,600 --> 00:31:09,299
things better and I'll touch on a few of

768
00:31:09,299 --> 00:31:11,100
those points as we go through next

769
00:31:11,100 --> 00:31:13,279
please

770
00:31:13,500 --> 00:31:16,080
so uh

771
00:31:16,080 --> 00:31:20,399
rtts uh TLS 1.3 is optimistic in the

772
00:31:20,399 --> 00:31:23,279
sense that a client will guess what

773
00:31:23,279 --> 00:31:25,440
configuration will work for a server

774
00:31:25,440 --> 00:31:28,919
and that will in the case that the guess

775
00:31:28,919 --> 00:31:31,679
is correct save a round trip time

776
00:31:31,679 --> 00:31:33,419
quick does the same thing

777
00:31:33,419 --> 00:31:36,000
a typical handshake in TLS is a sort of

778
00:31:36,000 --> 00:31:38,340
three-way exchange you you have the

779
00:31:38,340 --> 00:31:39,840
client send a message the server respond

780
00:31:39,840 --> 00:31:41,700
and then the client finishes that off

781
00:31:41,700 --> 00:31:44,580
with a confirmation message

782
00:31:44,580 --> 00:31:46,740
if the client guesses wrong you have

783
00:31:46,740 --> 00:31:48,600
another round trip added to that

784
00:31:48,600 --> 00:31:50,700
and one of the sort of themes that we'll

785
00:31:50,700 --> 00:31:52,200
have with quick is that it has a very

786
00:31:52,200 --> 00:31:54,240
short handshake if everything goes

787
00:31:54,240 --> 00:31:56,340
correctly but it turns out that you can

788
00:31:56,340 --> 00:31:59,220
add multiple round trips if you have

789
00:31:59,220 --> 00:32:01,020
packet loss the client guess is wrong

790
00:32:01,020 --> 00:32:03,000
the server is under duress and wants to

791
00:32:03,000 --> 00:32:04,980
tell the client to back off and and wait

792
00:32:04,980 --> 00:32:08,580
a little long while longer and so we

793
00:32:08,580 --> 00:32:10,200
have this very flexible handshake

794
00:32:10,200 --> 00:32:11,580
ultimately

795
00:32:11,580 --> 00:32:13,620
the um

796
00:32:13,620 --> 00:32:16,020
key Insight is we we have sort of this

797
00:32:16,020 --> 00:32:17,940
this multiple round-trip handshake and

798
00:32:17,940 --> 00:32:19,500
and a lot

799
00:32:19,500 --> 00:32:21,779
I say here that typical energy is 1.5

800
00:32:21,779 --> 00:32:24,600
rtt in practice I think the messages we

801
00:32:24,600 --> 00:32:27,299
exchange is two round trip times but

802
00:32:27,299 --> 00:32:30,000
under normal circumstances if the client

803
00:32:30,000 --> 00:32:31,320
guesses correctly and the server is

804
00:32:31,320 --> 00:32:32,580
willing to communicate with the client

805
00:32:32,580 --> 00:32:36,720
we can send data from either side after

806
00:32:36,720 --> 00:32:38,880
that first exchange between the client

807
00:32:38,880 --> 00:32:40,620
server we're actually sending before the

808
00:32:40,620 --> 00:32:42,899
handshake is complete and in the extreme

809
00:32:42,899 --> 00:32:45,779
case if the client has been to that

810
00:32:45,779 --> 00:32:48,419
server in the past and set up the zero

811
00:32:48,419 --> 00:32:51,720
round trip time thing that there is no

812
00:32:51,720 --> 00:32:53,760
delay for either end the client sends

813
00:32:53,760 --> 00:32:55,559
immediately application data is Flowing

814
00:32:55,559 --> 00:32:57,120
immediately as the handshake is

815
00:32:57,120 --> 00:32:59,340
commenced same on the server end as soon

816
00:32:59,340 --> 00:33:01,260
as the clock as the server sees the

817
00:33:01,260 --> 00:33:03,000
client's first message it can start

818
00:33:03,000 --> 00:33:05,399
sending things to the client as well and

819
00:33:05,399 --> 00:33:07,679
these performance guarantees were sort

820
00:33:07,679 --> 00:33:10,740
of central to the appeal of of quick and

821
00:33:10,740 --> 00:33:12,419
and they're the core of the performance

822
00:33:12,419 --> 00:33:14,820
guarantees that we're providing here

823
00:33:14,820 --> 00:33:17,279
next

824
00:33:17,279 --> 00:33:18,779
so

825
00:33:18,779 --> 00:33:20,340
this is what the TLs handshake looks

826
00:33:20,340 --> 00:33:22,019
like we have some care agreement and

827
00:33:22,019 --> 00:33:24,539
configuration that is exchanged more or

828
00:33:24,539 --> 00:33:25,620
less in the clear

829
00:33:25,620 --> 00:33:27,720
and then some authentication information

830
00:33:27,720 --> 00:33:29,820
and you can sort of see here we've got

831
00:33:29,820 --> 00:33:32,820
these lighter lines that say where where

832
00:33:32,820 --> 00:33:34,799
the data is being exchanged there's a

833
00:33:34,799 --> 00:33:36,779
flow from the client there might be some

834
00:33:36,779 --> 00:33:38,760
some application data following after

835
00:33:38,760 --> 00:33:40,140
that one there's a flow from the server

836
00:33:40,140 --> 00:33:42,899
there might be some application data and

837
00:33:42,899 --> 00:33:44,279
then finally

838
00:33:44,279 --> 00:33:47,039
at the end some more messages lots lots

839
00:33:47,039 --> 00:33:50,658
more data at that point next please

840
00:33:51,299 --> 00:33:52,799
that's what happens when you put TLS on

841
00:33:52,799 --> 00:33:54,899
top of it and

842
00:33:54,899 --> 00:33:56,220
um there's a little note there saying

843
00:33:56,220 --> 00:33:58,440
that we we had to tweak TLS in order to

844
00:33:58,440 --> 00:34:00,419
get this to work and that's going to be

845
00:34:00,419 --> 00:34:02,220
a bit of a theme as we get into this one

846
00:34:02,220 --> 00:34:04,799
next

847
00:34:04,799 --> 00:34:08,099
so um the the quick handshake sort of

848
00:34:08,099 --> 00:34:10,379
takes the TLs handshake and builds on

849
00:34:10,379 --> 00:34:11,580
top of that

850
00:34:11,580 --> 00:34:15,540
tell us messages have essentially

851
00:34:15,540 --> 00:34:20,099
uh four types of keys that that are used

852
00:34:20,099 --> 00:34:20,879
um

853
00:34:20,879 --> 00:34:25,980
and um the no key in the case of uh TLS

854
00:34:25,980 --> 00:34:28,379
is turned into a real set of keys in

855
00:34:28,379 --> 00:34:30,599
quick so we have what we call Initial

856
00:34:30,599 --> 00:34:34,139
Keys which are not secure in any

857
00:34:34,139 --> 00:34:36,960
meaningful sense but they provide us

858
00:34:36,960 --> 00:34:38,940
protection against ossification to to

859
00:34:38,940 --> 00:34:40,080
the points that Jonah was talking about

860
00:34:40,080 --> 00:34:42,480
before every single version of quick

861
00:34:42,480 --> 00:34:44,699
uses a different set of keys if you

862
00:34:44,699 --> 00:34:46,080
don't know the keys you can't speak that

863
00:34:46,080 --> 00:34:48,719
version a quick sort of a a nice little

864
00:34:48,719 --> 00:34:51,119
protection against someone who might be

865
00:34:51,119 --> 00:34:54,418
inclined to interfere with the handshake

866
00:34:54,418 --> 00:34:56,940
um but if they don't know the version of

867
00:34:56,940 --> 00:34:59,099
quick that's been being spoken they

868
00:34:59,099 --> 00:35:00,960
don't get to to interact

869
00:35:00,960 --> 00:35:03,480
TLS also provides handshake keys

870
00:35:03,480 --> 00:35:07,080
those handshake Keys uh protect the the

871
00:35:07,080 --> 00:35:10,260
details of the handshake uh the security

872
00:35:10,260 --> 00:35:11,579
guarantees there are very very

873
00:35:11,579 --> 00:35:13,380
interesting

874
00:35:13,380 --> 00:35:16,740
um those of you who know TLS will

875
00:35:16,740 --> 00:35:18,780
perhaps have a better idea of what those

876
00:35:18,780 --> 00:35:19,920
properties are but essentially we're

877
00:35:19,920 --> 00:35:21,599
providing confidentiality for things

878
00:35:21,599 --> 00:35:25,320
like the server certificate and a lot of

879
00:35:25,320 --> 00:35:26,820
the configuration parameters that the

880
00:35:26,820 --> 00:35:29,119
the protocol has

881
00:35:29,119 --> 00:35:33,900
the TLs bytes put into specific frames

882
00:35:33,900 --> 00:35:37,079
within the packets so we have packets

883
00:35:37,079 --> 00:35:39,060
with frames in them the packets are

884
00:35:39,060 --> 00:35:41,820
protected with these keys

885
00:35:41,820 --> 00:35:44,280
and we we put multiple packets in the

886
00:35:44,280 --> 00:35:47,160
one UDP datagram as it turns out

887
00:35:47,160 --> 00:35:49,320
and uh quick

888
00:35:49,320 --> 00:35:52,380
after many iterations between first

889
00:35:52,380 --> 00:35:54,060
going with something that was based on

890
00:35:54,060 --> 00:35:57,540
dtls because why not dtls does UDP turns

891
00:35:57,540 --> 00:36:02,180
out to be a bad idea we went to TLS

892
00:36:02,460 --> 00:36:05,040
and tell us exporters for for getting

893
00:36:05,040 --> 00:36:08,280
Keys ultimately what quick does is runs

894
00:36:08,280 --> 00:36:11,099
the TLs handshake and then when TLS

895
00:36:11,099 --> 00:36:13,980
produces Keys quick reaches in takes

896
00:36:13,980 --> 00:36:15,480
those keys out and uses it for packet

897
00:36:15,480 --> 00:36:19,079
protection TLS doesn't uh TLS record

898
00:36:19,079 --> 00:36:21,599
protection isn't engaged in in this the

899
00:36:21,599 --> 00:36:23,460
raw bytes coming out of the handshake of

900
00:36:23,460 --> 00:36:26,700
TLs are used directly by quick so the

901
00:36:26,700 --> 00:36:29,339
final two types of keys we have are zero

902
00:36:29,339 --> 00:36:31,200
watt CT Keys which the client uses to

903
00:36:31,200 --> 00:36:33,240
send to the server if it happens to be

904
00:36:33,240 --> 00:36:35,940
attempting zero ITT and then the final

905
00:36:35,940 --> 00:36:38,940
application data Keys which are used for

906
00:36:38,940 --> 00:36:40,200
everything once the handshake is

907
00:36:40,200 --> 00:36:41,940
completed we also have a key update

908
00:36:41,940 --> 00:36:44,040
process that that rotates those keys

909
00:36:44,040 --> 00:36:46,740
periodically to prevent

910
00:36:46,740 --> 00:36:48,900
to prevent them from wearing out next

911
00:36:48,900 --> 00:36:51,079
place

912
00:36:51,720 --> 00:36:54,599
so this is what the simplified handshake

913
00:36:54,599 --> 00:36:57,180
looks like we have the client sending an

914
00:36:57,180 --> 00:36:59,220
initial packet which contains a crypto

915
00:36:59,220 --> 00:37:02,400
frame which contains a TLS client hello

916
00:37:02,400 --> 00:37:05,040
and on the server end we have an initial

917
00:37:05,040 --> 00:37:06,060
packet

918
00:37:06,060 --> 00:37:08,280
and that contains a crypto frame that

919
00:37:08,280 --> 00:37:10,079
contains a server hello

920
00:37:10,079 --> 00:37:12,359
and that is all effectively sent in the

921
00:37:12,359 --> 00:37:14,220
clear although we're using these special

922
00:37:14,220 --> 00:37:16,440
quick version specific keys that are

923
00:37:16,440 --> 00:37:17,400
generated

924
00:37:17,400 --> 00:37:19,320
the um

925
00:37:19,320 --> 00:37:21,300
the interesting thing to observe here is

926
00:37:21,300 --> 00:37:23,339
that there is a flow that goes from the

927
00:37:23,339 --> 00:37:25,079
client to the server and Back Again

928
00:37:25,079 --> 00:37:26,400
in the clear

929
00:37:26,400 --> 00:37:29,040
and then in the opposite direction for

930
00:37:29,040 --> 00:37:30,900
handshake Keys there's a flow that goes

931
00:37:30,900 --> 00:37:33,300
from the server to the client and Back

932
00:37:33,300 --> 00:37:36,599
Again using those handshake keys and

933
00:37:36,599 --> 00:37:39,900
then finally there is application data

934
00:37:39,900 --> 00:37:44,099
flowing from that point onwards now this

935
00:37:44,099 --> 00:37:47,460
is a quirk of TLs but um what you will

936
00:37:47,460 --> 00:37:50,359
actually see here is the

937
00:37:50,359 --> 00:37:53,760
there's a final message that confirms

938
00:37:53,760 --> 00:37:56,820
the handshake is done at the bottom

939
00:37:56,820 --> 00:37:58,140
there that the server sends once it's

940
00:37:58,140 --> 00:38:00,420
received everything from the client and

941
00:38:00,420 --> 00:38:02,700
we spent years

942
00:38:02,700 --> 00:38:04,380
trying to avoid putting this message in

943
00:38:04,380 --> 00:38:07,440
it turns out to be absolutely crucial in

944
00:38:07,440 --> 00:38:10,980
a number of scenarios we had the worst

945
00:38:10,980 --> 00:38:13,380
problem with handshake Deadlocks and all

946
00:38:13,380 --> 00:38:14,400
sorts of

947
00:38:14,400 --> 00:38:16,619
weird Corner cases before we decided

948
00:38:16,619 --> 00:38:18,540
look let's just put another message in

949
00:38:18,540 --> 00:38:21,480
here what this means is

950
00:38:21,480 --> 00:38:23,280
ultimately this is a two round trip

951
00:38:23,280 --> 00:38:24,599
protocol

952
00:38:24,599 --> 00:38:26,579
you can see two round trips on this on

953
00:38:26,579 --> 00:38:29,820
this diagram here but

954
00:38:29,820 --> 00:38:31,560
you're sending data a lot sooner than

955
00:38:31,560 --> 00:38:33,780
that and that's one of the weird things

956
00:38:33,780 --> 00:38:36,119
about operating this protocol next

957
00:38:36,119 --> 00:38:38,359
please

958
00:38:38,820 --> 00:38:41,099
of course all of this integrates with

959
00:38:41,099 --> 00:38:42,960
quick and so quick

960
00:38:42,960 --> 00:38:44,760
underneath all of this is providing

961
00:38:44,760 --> 00:38:46,140
acknowledgments for all of the data

962
00:38:46,140 --> 00:38:48,300
that's being exchanged back and forth

963
00:38:48,300 --> 00:38:50,820
here and so that's what you see here is

964
00:38:50,820 --> 00:38:52,560
that every single message that is sent

965
00:38:52,560 --> 00:38:55,560
is acknowledged using packets protected

966
00:38:55,560 --> 00:38:57,180
by the same types of keys for various

967
00:38:57,180 --> 00:39:00,000
reasons that should be obvious you can't

968
00:39:00,000 --> 00:39:02,400
acknowledge something with a different

969
00:39:02,400 --> 00:39:04,680
key because well maybe the other side

970
00:39:04,680 --> 00:39:07,859
doesn't have that key yet and so there's

971
00:39:07,859 --> 00:39:09,599
this weird interlocking thing that that

972
00:39:09,599 --> 00:39:11,099
goes on here

973
00:39:11,099 --> 00:39:11,820
um

974
00:39:11,820 --> 00:39:14,820
including some implicit acknowledgments

975
00:39:14,820 --> 00:39:17,099
in the in in certain cases which gets a

976
00:39:17,099 --> 00:39:20,700
little bit interesting as well but um

977
00:39:20,700 --> 00:39:23,220
this is to sort of illustrate that that

978
00:39:23,220 --> 00:39:26,160
quick is providing all of the transport

979
00:39:26,160 --> 00:39:28,920
reliability features that uh TLS

980
00:39:28,920 --> 00:39:31,020
requires TLS sends very large messages

981
00:39:31,020 --> 00:39:34,140
that need to be sent and received in a

982
00:39:34,140 --> 00:39:35,880
very particular order otherwise it just

983
00:39:35,880 --> 00:39:38,280
doesn't work and provides those those

984
00:39:38,280 --> 00:39:39,540
facilities

985
00:39:39,540 --> 00:39:42,259
next please

986
00:39:42,540 --> 00:39:44,400
so this is ultimately what we have in

987
00:39:44,400 --> 00:39:46,260
terms of the layering diagram and I

988
00:39:46,260 --> 00:39:47,520
think

989
00:39:47,520 --> 00:39:48,720
um

990
00:39:48,720 --> 00:39:51,240
thinking about layering in the classic

991
00:39:51,240 --> 00:39:52,440
sense where you have a protocol that

992
00:39:52,440 --> 00:39:54,000
sits on top of another protocol doesn't

993
00:39:54,000 --> 00:39:55,500
really work for quick

994
00:39:55,500 --> 00:39:58,560
the uh the key thing to realize here is

995
00:39:58,560 --> 00:40:00,599
it's more like a software architecture

996
00:40:00,599 --> 00:40:01,800
diagram where there are certain

997
00:40:01,800 --> 00:40:03,060
components that provide different

998
00:40:03,060 --> 00:40:04,859
capabilities and they have interactions

999
00:40:04,859 --> 00:40:07,560
with other components if you think of

1000
00:40:07,560 --> 00:40:10,980
the TLs stack as taking handshake

1001
00:40:10,980 --> 00:40:13,800
messages and returning handshake

1002
00:40:13,800 --> 00:40:16,440
messages and then providing information

1003
00:40:16,440 --> 00:40:19,920
about State changes and the the various

1004
00:40:19,920 --> 00:40:22,380
secrets that it might be generating then

1005
00:40:22,380 --> 00:40:25,680
you have the ability to to build a

1006
00:40:25,680 --> 00:40:27,900
component that then sits inside the

1007
00:40:27,900 --> 00:40:31,020
grader protocol and so you have crypto

1008
00:40:31,020 --> 00:40:33,540
streams responsible for exchanging those

1009
00:40:33,540 --> 00:40:35,700
handshake bytes back and forth and then

1010
00:40:35,700 --> 00:40:37,440
you have a packet protection layer that

1011
00:40:37,440 --> 00:40:38,220
takes

1012
00:40:38,220 --> 00:40:40,380
uh the the packets that you're sending

1013
00:40:40,380 --> 00:40:42,780
to the to the other side and takes the

1014
00:40:42,780 --> 00:40:45,960
secrets from TLS and uh protects those

1015
00:40:45,960 --> 00:40:48,540
packets or removes protection from those

1016
00:40:48,540 --> 00:40:50,220
packets

1017
00:40:50,220 --> 00:40:51,720
and then of course all of the things

1018
00:40:51,720 --> 00:40:54,540
that we concretely care about uh in

1019
00:40:54,540 --> 00:40:57,720
terms of streams and ultimately uh the

1020
00:40:57,720 --> 00:41:00,720
quick datagram work as well is is sort

1021
00:41:00,720 --> 00:41:03,599
of sitting in there providing more

1022
00:41:03,599 --> 00:41:06,119
frames that that can be exchanged back

1023
00:41:06,119 --> 00:41:07,320
and forth

1024
00:41:07,320 --> 00:41:09,839
so this is this is what I tend to think

1025
00:41:09,839 --> 00:41:11,599
of as the the the

1026
00:41:11,599 --> 00:41:15,119
ideal uh the structure of quick on the

1027
00:41:15,119 --> 00:41:16,380
on the inside

1028
00:41:16,380 --> 00:41:18,420
and uh

1029
00:41:18,420 --> 00:41:21,119
it's not that simple but uh this is a

1030
00:41:21,119 --> 00:41:25,400
gross simplification of that next place

1031
00:41:26,280 --> 00:41:33,359
so the other part of all of this is

1032
00:41:33,359 --> 00:41:35,520
actually mostly new in the protocol

1033
00:41:35,520 --> 00:41:37,619
we've taken inspiration from from

1034
00:41:37,619 --> 00:41:40,079
protocols that proceeded at TCP and and

1035
00:41:40,079 --> 00:41:43,020
other things but um the denial of

1036
00:41:43,020 --> 00:41:45,540
service mitigations in quick

1037
00:41:45,540 --> 00:41:48,660
as part of the handshake and later uh

1038
00:41:48,660 --> 00:41:51,359
somewhat more interesting than

1039
00:41:51,359 --> 00:41:53,220
the software engineering exercise of

1040
00:41:53,220 --> 00:41:56,940
getting a quick TLS stack crammed in so

1041
00:41:56,940 --> 00:41:59,339
we have a few basic rules

1042
00:41:59,339 --> 00:42:01,020
um we had a long debate a little while

1043
00:42:01,020 --> 00:42:03,180
ago about where this number three came

1044
00:42:03,180 --> 00:42:04,140
from

1045
00:42:04,140 --> 00:42:08,640
uh and no one knows uh concretely we had

1046
00:42:08,640 --> 00:42:11,640
a number of people involved in the

1047
00:42:11,640 --> 00:42:14,160
design of this and none of them can

1048
00:42:14,160 --> 00:42:15,660
remember where the number three comes

1049
00:42:15,660 --> 00:42:17,040
from but there's there's this basic rule

1050
00:42:17,040 --> 00:42:19,560
that we follow in quick is if you're

1051
00:42:19,560 --> 00:42:21,119
sending to an address

1052
00:42:21,119 --> 00:42:23,940
that you haven't confirmed is willing to

1053
00:42:23,940 --> 00:42:25,140
receive

1054
00:42:25,140 --> 00:42:27,660
the packets that you're sending

1055
00:42:27,660 --> 00:42:30,180
only send

1056
00:42:30,180 --> 00:42:34,619
three times as much data to that as what

1057
00:42:34,619 --> 00:42:35,940
you've received from that apparent

1058
00:42:35,940 --> 00:42:39,060
address so your random packet appears

1059
00:42:39,060 --> 00:42:41,220
from the internet from some arbitrary

1060
00:42:41,220 --> 00:42:43,859
address you can send three packets in

1061
00:42:43,859 --> 00:42:46,760
response no more

1062
00:42:46,760 --> 00:42:49,020
there's an address validation process

1063
00:42:49,020 --> 00:42:51,720
that we use to say

1064
00:42:51,720 --> 00:42:53,820
send to that address and get

1065
00:42:53,820 --> 00:42:55,619
confirmation that that address is live

1066
00:42:55,619 --> 00:42:57,119
and willing to receive the packets that

1067
00:42:57,119 --> 00:42:59,819
you're sending to it and we have

1068
00:42:59,819 --> 00:43:02,040
multiple types of address validation in

1069
00:43:02,040 --> 00:43:03,780
quick because of the way that we design

1070
00:43:03,780 --> 00:43:06,359
the handshake and ultimately I'll touch

1071
00:43:06,359 --> 00:43:08,160
on this later migration

1072
00:43:08,160 --> 00:43:09,480
and

1073
00:43:09,480 --> 00:43:11,339
um really what we want to do here is

1074
00:43:11,339 --> 00:43:14,880
ensure that quick is not used as a

1075
00:43:14,880 --> 00:43:16,500
platform for denial or service tax

1076
00:43:16,500 --> 00:43:19,800
against on unwitting and unwilling

1077
00:43:19,800 --> 00:43:22,079
victims on the internet it turns out

1078
00:43:22,079 --> 00:43:25,920
that we don't want to be memcache and uh

1079
00:43:25,920 --> 00:43:29,160
that's probably not such a

1080
00:43:29,160 --> 00:43:31,859
pretty important ultimately uh for

1081
00:43:31,859 --> 00:43:33,180
making sure that everything works

1082
00:43:33,180 --> 00:43:36,200
properly next place

1083
00:43:36,240 --> 00:43:38,700
so the the basic uh handshake

1084
00:43:38,700 --> 00:43:41,099
amplification attack is that a client

1085
00:43:41,099 --> 00:43:43,800
sends an initial packet that happens to

1086
00:43:43,800 --> 00:43:47,339
have zero rtt in the same datagram you

1087
00:43:47,339 --> 00:43:50,220
can put a request in the same packet as

1088
00:43:50,220 --> 00:43:53,520
your your initial thing that might be a

1089
00:43:53,520 --> 00:43:57,720
totally valid packet that uh a server

1090
00:43:57,720 --> 00:43:59,940
would accept under normal circumstances

1091
00:43:59,940 --> 00:44:01,440
it might be very happy to accept that

1092
00:44:01,440 --> 00:44:03,359
packet from the client but if the client

1093
00:44:03,359 --> 00:44:05,339
manages to spoof the address

1094
00:44:05,339 --> 00:44:08,339
the return flow from the server which

1095
00:44:08,339 --> 00:44:09,780
contains all the quick handshake

1096
00:44:09,780 --> 00:44:11,280
information and potentially the answer

1097
00:44:11,280 --> 00:44:13,380
to the question that they asked

1098
00:44:13,380 --> 00:44:16,079
could be very large and

1099
00:44:16,079 --> 00:44:19,319
the poor victim who genuinely owns that

1100
00:44:19,319 --> 00:44:22,319
address might find themselves on the

1101
00:44:22,319 --> 00:44:24,240
receiving end of a large flight of

1102
00:44:24,240 --> 00:44:25,619
packets from a very well connected

1103
00:44:25,619 --> 00:44:26,520
server

1104
00:44:26,520 --> 00:44:28,619
we don't want this to happen

1105
00:44:28,619 --> 00:44:31,619
so next slide please

1106
00:44:31,619 --> 00:44:35,880
so TCP solved this I think a long time

1107
00:44:35,880 --> 00:44:37,560
ago I don't know when that was but it

1108
00:44:37,560 --> 00:44:40,339
was before I was involved in any of this

1109
00:44:40,339 --> 00:44:43,680
and it has a three-way handshake

1110
00:44:43,680 --> 00:44:45,900
uh of course when we're doing TLS and

1111
00:44:45,900 --> 00:44:48,000
TCP this adds an extra round trip to the

1112
00:44:48,000 --> 00:44:48,780
setup

1113
00:44:48,780 --> 00:44:51,599
uh which is a little Annoying that's

1114
00:44:51,599 --> 00:44:53,640
slows things down a little bit but

1115
00:44:53,640 --> 00:44:55,740
essentially uh TCP confirms his

1116
00:44:55,740 --> 00:44:57,240
willingness to communicate before you

1117
00:44:57,240 --> 00:44:59,220
start doing any of the TLA stuff

1118
00:44:59,220 --> 00:45:00,599
uh

1119
00:45:00,599 --> 00:45:03,720
but in quick we put this all together so

1120
00:45:03,720 --> 00:45:05,220
we're doing the cryptographic handshake

1121
00:45:05,220 --> 00:45:09,240
and this confirmation to communicate all

1122
00:45:09,240 --> 00:45:11,460
at once and of course

1123
00:45:11,460 --> 00:45:14,599
um not every quick server is willing to

1124
00:45:14,599 --> 00:45:18,420
participate in all of this extra work

1125
00:45:18,420 --> 00:45:20,339
before confirming that someone on the

1126
00:45:20,339 --> 00:45:21,839
other end is actually willing to talk to

1127
00:45:21,839 --> 00:45:24,540
them so we added a retry mechanism which

1128
00:45:24,540 --> 00:45:28,020
is very much like the TCP send synac

1129
00:45:28,020 --> 00:45:30,000
um with the cookies the same cookies

1130
00:45:30,000 --> 00:45:32,640
next please

1131
00:45:32,640 --> 00:45:35,160
this looks approximately this like this

1132
00:45:35,160 --> 00:45:37,140
the client sends a packet maybe some

1133
00:45:37,140 --> 00:45:40,079
extra packets and the server says hey uh

1134
00:45:40,079 --> 00:45:40,980
no

1135
00:45:40,980 --> 00:45:42,720
uh please

1136
00:45:42,720 --> 00:45:45,540
confirm before proceeding and it sends

1137
00:45:45,540 --> 00:45:47,460
the client a token and if the clients

1138
00:45:47,460 --> 00:45:49,440
are genuine type client it will receive

1139
00:45:49,440 --> 00:45:51,240
that token and can stick it in the

1140
00:45:51,240 --> 00:45:52,800
packet that it generates for the next

1141
00:45:52,800 --> 00:45:54,780
attempt and everything moves moves on

1142
00:45:54,780 --> 00:45:56,160
from there and the server has now

1143
00:45:56,160 --> 00:45:57,599
received confirmation that the client is

1144
00:45:57,599 --> 00:46:00,240
able to receive the messages that the

1145
00:46:00,240 --> 00:46:01,800
server is sending and the client is

1146
00:46:01,800 --> 00:46:03,660
willing to participate in the protocol

1147
00:46:03,660 --> 00:46:04,740
that's nice

1148
00:46:04,740 --> 00:46:07,279
next place

1149
00:46:07,380 --> 00:46:09,839
retry of course is probably not

1150
00:46:09,839 --> 00:46:10,740
something that you want to do because

1151
00:46:10,740 --> 00:46:13,260
you're adding a round trip time to the

1152
00:46:13,260 --> 00:46:15,780
connection setup it is particularly good

1153
00:46:15,780 --> 00:46:17,280
for cases where the server is under

1154
00:46:17,280 --> 00:46:18,900
stress and they want to make sure that

1155
00:46:18,900 --> 00:46:21,180
every client is genuine if they're under

1156
00:46:21,180 --> 00:46:23,220
attack then then it might be might be a

1157
00:46:23,220 --> 00:46:25,920
good way to manage that or if you think

1158
00:46:25,920 --> 00:46:27,180
that the traffic is coming from

1159
00:46:27,180 --> 00:46:29,760
somewhere that is unreliable for various

1160
00:46:29,760 --> 00:46:31,560
reasons the reputation systems that you

1161
00:46:31,560 --> 00:46:34,260
have indicate that it may be a little a

1162
00:46:34,260 --> 00:46:37,260
little shonky uh but that round trip is

1163
00:46:37,260 --> 00:46:41,099
expensive so we have some tricks for the

1164
00:46:41,099 --> 00:46:44,339
case that uh the handshake is is

1165
00:46:44,339 --> 00:46:47,940
um shorter next please

1166
00:46:47,940 --> 00:46:50,940
so what we need to do is prove to the

1167
00:46:50,940 --> 00:46:52,619
server that the client saw this over

1168
00:46:52,619 --> 00:46:55,800
initial packet how do we do that

1169
00:46:55,800 --> 00:46:57,540
um it's very simple

1170
00:46:57,540 --> 00:46:58,800
the

1171
00:46:58,800 --> 00:47:00,800
first exchange that happens in the clear

1172
00:47:00,800 --> 00:47:02,819
uh between the client and server

1173
00:47:02,819 --> 00:47:03,980
establishes some cryptographic

1174
00:47:03,980 --> 00:47:06,420
cryptographic keys and it does that

1175
00:47:06,420 --> 00:47:08,880
based on information in those packets

1176
00:47:08,880 --> 00:47:10,980
the next set of packets from the client

1177
00:47:10,980 --> 00:47:13,200
these handshake packets use those

1178
00:47:13,200 --> 00:47:16,560
cryptographic keys to generate new uh

1179
00:47:16,560 --> 00:47:18,359
packet protection keys

1180
00:47:18,359 --> 00:47:20,700
if the client produces a valid handshake

1181
00:47:20,700 --> 00:47:22,020
packet

1182
00:47:22,020 --> 00:47:23,819
that is because it saw everything that

1183
00:47:23,819 --> 00:47:25,380
the server produced

1184
00:47:25,380 --> 00:47:28,319
and so we we have what what amounts to

1185
00:47:28,319 --> 00:47:30,420
an implicit token at that point

1186
00:47:30,420 --> 00:47:31,740
and

1187
00:47:31,740 --> 00:47:35,579
um until this point the um the the three

1188
00:47:35,579 --> 00:47:38,520
and three out for for one in rule

1189
00:47:38,520 --> 00:47:42,839
applies but um next slide we'll show you

1190
00:47:42,839 --> 00:47:44,460
um

1191
00:47:44,460 --> 00:47:46,980
the same thing that you saw before but

1192
00:47:46,980 --> 00:47:48,960
as the initial

1193
00:47:48,960 --> 00:47:51,119
um from the server reaches the client

1194
00:47:51,119 --> 00:47:52,140
the client generates some new

1195
00:47:52,140 --> 00:47:53,700
cryptographic keys to protect the

1196
00:47:53,700 --> 00:47:57,240
handshake packets that handshake packet

1197
00:47:57,240 --> 00:48:01,079
is proof that the client saw the server

1198
00:48:01,079 --> 00:48:04,140
keys and so that allows us to proceed

1199
00:48:04,140 --> 00:48:07,920
by layering in the address validation

1200
00:48:07,920 --> 00:48:11,700
process without paying any extra bytes

1201
00:48:11,700 --> 00:48:13,140
at all

1202
00:48:13,140 --> 00:48:16,079
I hope that's that's clear but that's uh

1203
00:48:16,079 --> 00:48:17,819
a trick that we apply in a couple of

1204
00:48:17,819 --> 00:48:21,619
other places next place

1205
00:48:22,680 --> 00:48:25,380
um oh but of course um that that goes

1206
00:48:25,380 --> 00:48:26,940
both ways the server needs to prove that

1207
00:48:26,940 --> 00:48:31,260
it saw the client initial as well so

1208
00:48:31,260 --> 00:48:33,540
server needs to the client needs to

1209
00:48:33,540 --> 00:48:34,800
confirm that the server is willing to

1210
00:48:34,800 --> 00:48:38,099
talk to it and uh at this point we have

1211
00:48:38,099 --> 00:48:39,960
a little trick the key these initial

1212
00:48:39,960 --> 00:48:41,339
keys that I told you have a version

1213
00:48:41,339 --> 00:48:43,560
specific thing are actually derived

1214
00:48:43,560 --> 00:48:46,319
based on what we use uh what we call a

1215
00:48:46,319 --> 00:48:50,520
connection ID and that connection ID is

1216
00:48:50,520 --> 00:48:53,640
an unguessable value from the client and

1217
00:48:53,640 --> 00:48:55,560
so when the server responds using that

1218
00:48:55,560 --> 00:48:57,660
connection ID or using keys derived from

1219
00:48:57,660 --> 00:49:00,720
that connection ID then the client can

1220
00:49:00,720 --> 00:49:02,160
confirm that the server is willing to

1221
00:49:02,160 --> 00:49:03,660
talk to it

1222
00:49:03,660 --> 00:49:05,400
so not only does This Server proven that

1223
00:49:05,400 --> 00:49:06,540
it understands the version of quick

1224
00:49:06,540 --> 00:49:08,819
that's being involved it's also proving

1225
00:49:08,819 --> 00:49:10,079
that it's willing to talk to the client

1226
00:49:10,079 --> 00:49:12,900
by responding to it in this way

1227
00:49:12,900 --> 00:49:14,760
and that retry thing that we talked

1228
00:49:14,760 --> 00:49:16,859
talked about before we need to have the

1229
00:49:16,859 --> 00:49:18,540
same sort of mechanism there that has a

1230
00:49:18,540 --> 00:49:20,940
different mechanism for for managing

1231
00:49:20,940 --> 00:49:22,380
that that same process but there's an

1232
00:49:22,380 --> 00:49:24,720
Integrity check in there as well

1233
00:49:24,720 --> 00:49:28,020
next so that's the

1234
00:49:28,020 --> 00:49:30,240
implicit token that we have on the

1235
00:49:30,240 --> 00:49:33,500
server side next

1236
00:49:33,660 --> 00:49:38,040
okay yeah so uh all of this is somewhat

1237
00:49:38,040 --> 00:49:40,319
fiddly to get right

1238
00:49:40,319 --> 00:49:41,880
uh

1239
00:49:41,880 --> 00:49:43,680
there were a lot of Deadlocks that we

1240
00:49:43,680 --> 00:49:45,240
discovered in the process I think we

1241
00:49:45,240 --> 00:49:47,220
spent what the better part of two years

1242
00:49:47,220 --> 00:49:49,200
going back and forth over some of the

1243
00:49:49,200 --> 00:49:52,140
the more tricky ones uh certain people

1244
00:49:52,140 --> 00:49:56,040
had a very good habit of finding new

1245
00:49:56,040 --> 00:49:58,610
ones every time we thought we fixed them

1246
00:49:58,610 --> 00:49:59,160
[Music]

1247
00:49:59,160 --> 00:50:00,900
um

1248
00:50:00,900 --> 00:50:02,760
one thing that is

1249
00:50:02,760 --> 00:50:06,119
still a little point of like discomfort

1250
00:50:06,119 --> 00:50:07,740
for some of us is that we don't really

1251
00:50:07,740 --> 00:50:09,780
have any formal verification to support

1252
00:50:09,780 --> 00:50:12,780
the correctness of the of the handshake

1253
00:50:12,780 --> 00:50:14,520
um we've spoken to academics about this

1254
00:50:14,520 --> 00:50:16,920
one and and there are systems out there

1255
00:50:16,920 --> 00:50:19,020
that might might be able to prove these

1256
00:50:19,020 --> 00:50:20,339
sorts of things but it's it's rather

1257
00:50:20,339 --> 00:50:22,200
challenging

1258
00:50:22,200 --> 00:50:22,920
um

1259
00:50:22,920 --> 00:50:24,480
and I didn't even talk about version

1260
00:50:24,480 --> 00:50:27,240
negotiation uh which adds even more

1261
00:50:27,240 --> 00:50:28,619
complexity but I won't talk about that

1262
00:50:28,619 --> 00:50:30,780
here because uh we don't have the time

1263
00:50:30,780 --> 00:50:33,180
next please

1264
00:50:33,180 --> 00:50:37,099
uh brief on migration

1265
00:50:37,099 --> 00:50:40,800
the migration process follows the same

1266
00:50:40,800 --> 00:50:44,579
three out for everyone in rule

1267
00:50:44,579 --> 00:50:46,740
um we have migration for a number of

1268
00:50:46,740 --> 00:50:47,780
reasons

1269
00:50:47,780 --> 00:50:51,180
probably the most interesting one is a

1270
00:50:51,180 --> 00:50:54,180
client that is sitting behind a Nat and

1271
00:50:54,180 --> 00:50:56,160
they get given an address and they

1272
00:50:56,160 --> 00:50:57,599
happily talk to us over back and forth

1273
00:50:57,599 --> 00:50:59,099
and then they go quiet for a little

1274
00:50:59,099 --> 00:51:00,599
while because well they just don't have

1275
00:51:00,599 --> 00:51:03,180
anything to say at that point

1276
00:51:03,180 --> 00:51:05,760
and when they restart the communication

1277
00:51:05,760 --> 00:51:08,819
after that brief period the NAT has

1278
00:51:08,819 --> 00:51:10,200
decided that it's going to give it a

1279
00:51:10,200 --> 00:51:11,579
different IP address

1280
00:51:11,579 --> 00:51:16,980
on that flow and so what the services is

1281
00:51:16,980 --> 00:51:21,480
a message from the client that has

1282
00:51:21,480 --> 00:51:23,760
a new IP address that is completely

1283
00:51:23,760 --> 00:51:28,319
unvalidated and that could be maybe an

1284
00:51:28,319 --> 00:51:29,460
attack

1285
00:51:29,460 --> 00:51:32,460
and so if it were to continue

1286
00:51:32,460 --> 00:51:34,740
sending large amounts of data to that

1287
00:51:34,740 --> 00:51:37,140
new address bad things might happen

1288
00:51:37,140 --> 00:51:39,480
because that might be spoofed

1289
00:51:39,480 --> 00:51:41,099
of course in a lot of cases most cases

1290
00:51:41,099 --> 00:51:42,839
in fact it's just the Nats doing what

1291
00:51:42,839 --> 00:51:46,020
Nats do next please

1292
00:51:46,020 --> 00:51:49,440
so we want to deal with net binding

1293
00:51:49,440 --> 00:51:51,960
changes we want to allow connections to

1294
00:51:51,960 --> 00:51:53,599
move to New Paths even

1295
00:51:53,599 --> 00:51:56,520
legitimately but we also want to ensure

1296
00:51:56,520 --> 00:51:59,280
that the an attacker can't force someone

1297
00:51:59,280 --> 00:52:01,099
to move if they don't want to move

1298
00:52:01,099 --> 00:52:03,540
we also want to ensure that an attacker

1299
00:52:03,540 --> 00:52:05,220
can't stop someone from moving if they

1300
00:52:05,220 --> 00:52:06,140
want to move

1301
00:52:06,140 --> 00:52:09,119
and um unfortunately

1302
00:52:09,119 --> 00:52:12,180
if you if if we were to show you a an IP

1303
00:52:12,180 --> 00:52:15,780
and UDP uh packet header

1304
00:52:15,780 --> 00:52:18,359
they're not protected and the network

1305
00:52:18,359 --> 00:52:20,640
rewrites them all the time in fact to

1306
00:52:20,640 --> 00:52:21,720
some extent

1307
00:52:21,720 --> 00:52:24,960
we kind of rely on the network

1308
00:52:24,960 --> 00:52:28,400
being able to rewrite these things

1309
00:52:28,500 --> 00:52:30,720
maybe that was a bad idea but that's the

1310
00:52:30,720 --> 00:52:33,059
network that we have and so

1311
00:52:33,059 --> 00:52:34,500
um we're in this kind of really awkward

1312
00:52:34,500 --> 00:52:37,819
situation so next slide please

1313
00:52:40,319 --> 00:52:42,119
there we go

1314
00:52:42,119 --> 00:52:44,640
so migration looks like this you have an

1315
00:52:44,640 --> 00:52:45,720
established connection between client

1316
00:52:45,720 --> 00:52:46,859
and server

1317
00:52:46,859 --> 00:52:50,520
and maybe an attacker takes one of your

1318
00:52:50,520 --> 00:52:53,040
packets maybe it's a packet that you had

1319
00:52:53,040 --> 00:52:53,940
dropped

1320
00:52:53,940 --> 00:52:56,220
and sends it from a new address

1321
00:52:56,220 --> 00:52:59,160
the server looks at this packet and says

1322
00:52:59,160 --> 00:53:00,960
hmm

1323
00:53:00,960 --> 00:53:04,020
I'm not sure about this one this might

1324
00:53:04,020 --> 00:53:06,900
be legitimate I don't know and so what

1325
00:53:06,900 --> 00:53:09,540
it does is probes that address saying

1326
00:53:09,540 --> 00:53:14,040
here's a token prove to me that you're

1327
00:53:14,040 --> 00:53:15,960
live on this address

1328
00:53:15,960 --> 00:53:18,960
but it also and this took a long time to

1329
00:53:18,960 --> 00:53:19,819
realize

1330
00:53:19,819 --> 00:53:22,500
it also sends a probe to the old address

1331
00:53:22,500 --> 00:53:25,619
and says prove to me

1332
00:53:25,619 --> 00:53:29,220
that you're at this address

1333
00:53:29,220 --> 00:53:31,079
the client just responds to these probes

1334
00:53:31,079 --> 00:53:33,680
as it sees them if it's legitimately

1335
00:53:33,680 --> 00:53:36,720
moving to the new address then it will

1336
00:53:36,720 --> 00:53:39,359
respond from the new address and proceed

1337
00:53:39,359 --> 00:53:42,180
if it's still on the old address and the

1338
00:53:42,180 --> 00:53:44,099
attacker decided that it wanted to force

1339
00:53:44,099 --> 00:53:46,640
the client to migrate to A New Path then

1340
00:53:46,640 --> 00:53:49,859
the attacker should be unable to produce

1341
00:53:49,859 --> 00:53:51,780
the uh

1342
00:53:51,780 --> 00:53:55,380
the correct response and um whichever

1343
00:53:55,380 --> 00:53:57,720
one wins whichever one's legitimate will

1344
00:53:57,720 --> 00:53:59,280
produce a response that the server will

1345
00:53:59,280 --> 00:54:02,700
then respect and uh migration will

1346
00:54:02,700 --> 00:54:04,260
proceed

1347
00:54:04,260 --> 00:54:06,980
next please

1348
00:54:08,460 --> 00:54:10,680
so in order to get this to work we

1349
00:54:10,680 --> 00:54:13,680
didn't want to solve the problem that uh

1350
00:54:13,680 --> 00:54:16,380
ice solves so only clients can migrate

1351
00:54:16,380 --> 00:54:18,300
at this at in this version of quick

1352
00:54:18,300 --> 00:54:19,380
anyway

1353
00:54:19,380 --> 00:54:22,500
servers can ask clients to migrate but

1354
00:54:22,500 --> 00:54:25,260
only once we have this thing that

1355
00:54:25,260 --> 00:54:26,940
happens during the handshake that allows

1356
00:54:26,940 --> 00:54:28,680
it to happen but clients are the ones

1357
00:54:28,680 --> 00:54:30,720
that initiate the process

1358
00:54:30,720 --> 00:54:31,319
um

1359
00:54:31,319 --> 00:54:33,599
migration is very simple

1360
00:54:33,599 --> 00:54:36,200
um at some levels

1361
00:54:36,200 --> 00:54:40,079
you simply detect that an address has

1362
00:54:40,079 --> 00:54:41,280
changed on the other end and you start

1363
00:54:41,280 --> 00:54:43,260
sending data to that address but you

1364
00:54:43,260 --> 00:54:45,000
only Follow You Follow the three times

1365
00:54:45,000 --> 00:54:46,020
rule

1366
00:54:46,020 --> 00:54:48,599
until you've managed to validate that

1367
00:54:48,599 --> 00:54:50,880
and the validation process was on the

1368
00:54:50,880 --> 00:54:53,280
previous slide next please

1369
00:54:53,280 --> 00:54:56,819
and I think we're up uh so having this

1370
00:54:56,819 --> 00:54:57,720
very simple three times

1371
00:54:57,720 --> 00:54:59,700
anti-amplification rule applies to all

1372
00:54:59,700 --> 00:55:00,720
addresses

1373
00:55:00,720 --> 00:55:04,200
uh it's uh pretty straightforward to

1374
00:55:04,200 --> 00:55:06,720
plot to apply uh you need to validate

1375
00:55:06,720 --> 00:55:09,180
all paths before you speak on them

1376
00:55:09,180 --> 00:55:11,880
uh and uh

1377
00:55:11,880 --> 00:55:13,619
simplifying to the client only means

1378
00:55:13,619 --> 00:55:15,839
that we uh don't end up with

1379
00:55:15,839 --> 00:55:17,579
complications in the protocol State

1380
00:55:17,579 --> 00:55:19,440
machine where both sides decide to

1381
00:55:19,440 --> 00:55:22,020
migrate at the same time which

1382
00:55:22,020 --> 00:55:24,660
doesn't really work very well

1383
00:55:24,660 --> 00:55:27,240
um and then that leads into a whole set

1384
00:55:27,240 --> 00:55:29,460
of other design problems where we use

1385
00:55:29,460 --> 00:55:32,460
connection IDs on different paths but I

1386
00:55:32,460 --> 00:55:33,960
haven't spoken about connection IDs and

1387
00:55:33,960 --> 00:55:35,640
probably shouldn't because I don't have

1388
00:55:35,640 --> 00:55:36,480
time

1389
00:55:36,480 --> 00:55:39,020
next

1390
00:55:39,020 --> 00:55:42,180
so that's only sort of a taste of all

1391
00:55:42,180 --> 00:55:44,460
the security relevant things uh we could

1392
00:55:44,460 --> 00:55:45,660
probably spend another couple of hours

1393
00:55:45,660 --> 00:55:47,760
talking about how packets are protected

1394
00:55:47,760 --> 00:55:49,740
uh how the packet header is protected

1395
00:55:49,740 --> 00:55:52,619
which was an interesting story there uh

1396
00:55:52,619 --> 00:55:56,220
key rotation uh is a part of that

1397
00:55:56,220 --> 00:55:59,460
we also provide a an equivalent to a TCP

1398
00:55:59,460 --> 00:56:00,500
reset

1399
00:56:00,500 --> 00:56:03,660
which we call a stateless reset that

1400
00:56:03,660 --> 00:56:06,599
allows a server that that loses state to

1401
00:56:06,599 --> 00:56:08,579
clear up any connections that might be

1402
00:56:08,579 --> 00:56:11,040
hanging around from from before when it

1403
00:56:11,040 --> 00:56:14,400
lost that state that is secure

1404
00:56:14,400 --> 00:56:17,760
so TCP resets cannot be injected by the

1405
00:56:17,760 --> 00:56:19,020
network

1406
00:56:19,020 --> 00:56:21,240
we also have a whole version negotiation

1407
00:56:21,240 --> 00:56:24,480
thing that is nearing publication that

1408
00:56:24,480 --> 00:56:26,040
requires a whole lot of interesting

1409
00:56:26,040 --> 00:56:28,559
discussions as well but not enough time

1410
00:56:28,559 --> 00:56:30,960
to cover all those things here today and

1411
00:56:30,960 --> 00:56:33,480
that's me done thank you thank you very

1412
00:56:33,480 --> 00:56:35,660
much

1413
00:56:37,680 --> 00:56:39,960
so I think my favorite thing that I

1414
00:56:39,960 --> 00:56:41,460
learned today after you know having

1415
00:56:41,460 --> 00:56:43,200
scared it quick for most of its

1416
00:56:43,200 --> 00:56:45,300
development is that nobody knows where

1417
00:56:45,300 --> 00:56:47,220
that 3x rule came from because I dug

1418
00:56:47,220 --> 00:56:49,619
into it a little bit too that was that

1419
00:56:49,619 --> 00:56:52,500
was Ian Ian did it thank you Ian

1420
00:56:52,500 --> 00:56:55,339
if two isn't big enough

1421
00:56:55,339 --> 00:56:57,480
two's not big enough right there's too

1422
00:56:57,480 --> 00:56:59,819
many and four is too many well no well

1423
00:56:59,819 --> 00:57:01,980
four might be okay but

1424
00:57:01,980 --> 00:57:04,260
great

1425
00:57:04,260 --> 00:57:07,440
honestly no one really knows uh I it was

1426
00:57:07,440 --> 00:57:10,079
pulled out of the air I think yeah

1427
00:57:10,079 --> 00:57:12,180
that's right

1428
00:57:12,180 --> 00:57:15,839
all right so Ian knows talk to him talk

1429
00:57:15,839 --> 00:57:17,760
to Ian Ian we'll talk about that

1430
00:57:17,760 --> 00:57:20,880
tomorrow is to wear that three three

1431
00:57:20,880 --> 00:57:24,839
yeah oh yeah that makes a lot of sense

1432
00:57:24,839 --> 00:57:27,900
cool so um thank you all very much for

1433
00:57:27,900 --> 00:57:29,220
being with us

1434
00:57:29,220 --> 00:57:31,079
um so early this morning uh thanks

1435
00:57:31,079 --> 00:57:33,359
especially to our speakers

1436
00:57:33,359 --> 00:57:34,440
um excellent excellent excellent

1437
00:57:34,440 --> 00:57:37,079
presentations uh we hope to see all of

1438
00:57:37,079 --> 00:57:40,020
you and more tomorrow morning at 7 30 uh

1439
00:57:40,020 --> 00:57:42,000
not at 8 we have a little bit of extra

1440
00:57:42,000 --> 00:57:45,300
time for the panel discussion and we ran

1441
00:57:45,300 --> 00:57:47,220
early as opposed to running late on that

1442
00:57:47,220 --> 00:57:48,420
one

1443
00:57:48,420 --> 00:57:51,000
um so yes thank you all very much and

1444
00:57:51,000 --> 00:57:54,020
enjoy your iedf

1445
00:57:54,620 --> 00:58:00,620
[Applause]

