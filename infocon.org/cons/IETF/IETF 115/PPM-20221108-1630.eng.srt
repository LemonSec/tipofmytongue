1
00:00:05,100 --> 00:00:07,939
foreign

2
00:00:29,660 --> 00:00:32,700
given the short session I think we're uh

3
00:00:32,700 --> 00:00:34,800
my clock shows that it's time to start

4
00:00:34,800 --> 00:00:37,680
and so I think we're not going to wait

5
00:00:37,680 --> 00:00:40,020
um we're just going to Dive Right In so

6
00:00:40,020 --> 00:00:42,300
this is privacy preserving measurement

7
00:00:42,300 --> 00:00:45,420
at ietf 115. I hope you're in the right

8
00:00:45,420 --> 00:00:47,660
room

9
00:00:51,899 --> 00:00:54,840
this is your ietf note well

10
00:00:54,840 --> 00:00:59,820
as always the ietfs IPR and good

11
00:00:59,820 --> 00:01:03,719
behavior policies apply

12
00:01:03,719 --> 00:01:05,760
please familiarize yourself with the

13
00:01:05,760 --> 00:01:07,920
note well if you are not already

14
00:01:07,920 --> 00:01:11,180
familiar with it

15
00:01:16,500 --> 00:01:18,900
as this slide notes if you are in fact

16
00:01:18,900 --> 00:01:22,979
in London and not in New York City you

17
00:01:22,979 --> 00:01:25,619
are going to need to wear a mask if

18
00:01:25,619 --> 00:01:28,200
you're in the room thank you for helping

19
00:01:28,200 --> 00:01:30,600
us to keep all the on-site participants

20
00:01:30,600 --> 00:01:33,020
safe

21
00:01:36,479 --> 00:01:39,259
foreign

22
00:01:41,400 --> 00:01:44,040
I think these links are probably not as

23
00:01:44,040 --> 00:01:46,860
helpful now

24
00:01:46,860 --> 00:01:49,680
most importantly the agenda bash this is

25
00:01:49,680 --> 00:01:52,860
our proposed agenda for the one hour

26
00:01:52,860 --> 00:01:55,200
meeting that we have if anybody would

27
00:01:55,200 --> 00:01:57,600
like to suggest a change to the agenda

28
00:01:57,600 --> 00:02:01,220
now would be a good time

29
00:02:04,979 --> 00:02:07,979
foreign

30
00:02:20,940 --> 00:02:22,920
so I'll just repeat that one more time

31
00:02:22,920 --> 00:02:25,200
this is our agenda Bash

32
00:02:25,200 --> 00:02:29,580
here's our proposed agenda

33
00:02:29,580 --> 00:02:31,800
uh if you have questions about the

34
00:02:31,800 --> 00:02:33,800
agenda or if you'd like a change to it

35
00:02:33,800 --> 00:02:37,080
please come up to the mic or add

36
00:02:37,080 --> 00:02:39,180
yourself to the queue

37
00:02:39,180 --> 00:02:41,360
foreign

38
00:02:48,300 --> 00:02:51,060
not seeing any requests for changes to

39
00:02:51,060 --> 00:02:54,540
the agenda so let's get started with the

40
00:02:54,540 --> 00:02:57,900
DAP editors uh

41
00:02:57,900 --> 00:03:01,640
I'm going to give you a 30 minute timer

42
00:03:01,640 --> 00:03:05,280
and you can divide that time as you like

43
00:03:05,280 --> 00:03:07,860
among these topics please do leave

44
00:03:07,860 --> 00:03:10,560
plenty of time for discussion if you

45
00:03:10,560 --> 00:03:11,760
take all the times with your slides

46
00:03:11,760 --> 00:03:15,440
you're not going to get any feedback

47
00:03:15,440 --> 00:03:17,580
no we did

48
00:03:17,580 --> 00:03:21,959
uh I am I've requested to uh screen oh

49
00:03:21,959 --> 00:03:24,599
wait I I'm trying to request I wanted to

50
00:03:24,599 --> 00:03:28,560
request to share slides sorry okay let's

51
00:03:28,560 --> 00:03:30,659
get the technical issues sorted out

52
00:03:30,659 --> 00:03:32,959
first

53
00:03:39,440 --> 00:03:44,159
I have requested to share slides

54
00:03:44,159 --> 00:03:45,560
uh

55
00:03:45,560 --> 00:03:48,900
okay let's see

56
00:03:48,900 --> 00:03:50,879
you could also run them if you if you

57
00:03:50,879 --> 00:03:51,840
prefer

58
00:03:51,840 --> 00:03:55,340
first one staff update

59
00:04:08,159 --> 00:04:09,959
hey sure if you can hear your keyboard

60
00:04:09,959 --> 00:04:12,980
you only want to mute yourself

61
00:04:21,358 --> 00:04:23,520
uh

62
00:04:23,520 --> 00:04:26,419
okay

63
00:04:38,460 --> 00:04:40,800
uh

64
00:04:40,800 --> 00:04:45,080
let me see if I can fix this thank you

65
00:04:54,600 --> 00:04:57,360
cool uh I see the slides I am I running

66
00:04:57,360 --> 00:05:00,540
it no that's okay you ready to go

67
00:05:00,540 --> 00:05:02,580
yep

68
00:05:02,580 --> 00:05:04,620
all right so this is just going to be a

69
00:05:04,620 --> 00:05:07,259
very quick update on recent uh changes

70
00:05:07,259 --> 00:05:09,180
to the DAP spec I'm going to talk a

71
00:05:09,180 --> 00:05:11,160
little bit about the issues that we want

72
00:05:11,160 --> 00:05:12,660
to address in the immediate future and

73
00:05:12,660 --> 00:05:15,180
talk a little bit about what's uh like

74
00:05:15,180 --> 00:05:17,280
our long-term objectives are

75
00:05:17,280 --> 00:05:18,540
um and then I'll just quickly update

76
00:05:18,540 --> 00:05:20,940
folks on implementation status

77
00:05:20,940 --> 00:05:23,340
so the major change in the the current

78
00:05:23,340 --> 00:05:26,039
draft dappo2 is this new notion of query

79
00:05:26,039 --> 00:05:28,380
types so folks might remember from the

80
00:05:28,380 --> 00:05:31,020
previous version of the spec the uh the

81
00:05:31,020 --> 00:05:33,240
way we would pick a reset of reports to

82
00:05:33,240 --> 00:05:36,120
aggregate is the collector would specify

83
00:05:36,120 --> 00:05:38,460
a time interval and then the aggregators

84
00:05:38,460 --> 00:05:41,460
would go find a set of reports that have

85
00:05:41,460 --> 00:05:43,080
time stamps that fall on that interval

86
00:05:43,080 --> 00:05:45,120
and aggregate those

87
00:05:45,120 --> 00:05:47,220
um this is useful for a lot of use cases

88
00:05:47,220 --> 00:05:48,960
but uh it doesn't solve every problem

89
00:05:48,960 --> 00:05:51,539
that we that we have so we decided we

90
00:05:51,539 --> 00:05:53,160
need to generalize this

91
00:05:53,160 --> 00:05:56,039
um so there's this new uh parameter of

92
00:05:56,039 --> 00:05:57,780
the task configuration called the query

93
00:05:57,780 --> 00:06:01,199
type basically what we do now is the

94
00:06:01,199 --> 00:06:02,820
aggregators are going to partition

95
00:06:02,820 --> 00:06:05,699
reports into what we call buckets and

96
00:06:05,699 --> 00:06:07,919
then the collector's query

97
00:06:07,919 --> 00:06:10,680
um actually specifies a sequence of

98
00:06:10,680 --> 00:06:12,720
buckets and this is what we now call the

99
00:06:12,720 --> 00:06:13,979
batch

100
00:06:13,979 --> 00:06:17,220
um so you can think of a bucket as for

101
00:06:17,220 --> 00:06:20,160
example uh for the old semantics a

102
00:06:20,160 --> 00:06:22,500
sequence of non-overlapping time

103
00:06:22,500 --> 00:06:25,919
intervals so now we have two query types

104
00:06:25,919 --> 00:06:28,800
one that specifies uh this uh preserves

105
00:06:28,800 --> 00:06:30,240
this semantics from the previous version

106
00:06:30,240 --> 00:06:32,400
we call it time interval and then we

107
00:06:32,400 --> 00:06:33,960
have this new one called fixed size

108
00:06:33,960 --> 00:06:37,199
where um we don't actually care how the

109
00:06:37,199 --> 00:06:39,000
aggregators partition reports all we

110
00:06:39,000 --> 00:06:40,800
care about is that they're all roughly

111
00:06:40,800 --> 00:06:42,180
the same size so that's what we

112
00:06:42,180 --> 00:06:43,919
accomplish with that

113
00:06:43,919 --> 00:06:46,319
um so we're anticipating need wanting a

114
00:06:46,319 --> 00:06:48,240
lot of flexibility here so as folks

115
00:06:48,240 --> 00:06:50,699
start to use the depth spec I encourage

116
00:06:50,699 --> 00:06:52,020
you to think about you know whether or

117
00:06:52,020 --> 00:06:53,819
not your use case fits and we'll figure

118
00:06:53,819 --> 00:06:55,680
out what we can do to accommodate it

119
00:06:55,680 --> 00:06:58,380
hopefully by spelling out a new query

120
00:06:58,380 --> 00:06:59,340
type

121
00:06:59,340 --> 00:07:01,560
uh next slide

122
00:07:01,560 --> 00:07:04,080
uh one minor change I wanted to

123
00:07:04,080 --> 00:07:06,360
highlight is we now have this notion of

124
00:07:06,360 --> 00:07:08,940
task exploration uh basically the

125
00:07:08,940 --> 00:07:10,380
consideration here is primarily

126
00:07:10,380 --> 00:07:11,880
operational

127
00:07:11,880 --> 00:07:14,759
um it's useful for capacity planning uh

128
00:07:14,759 --> 00:07:16,080
figuring out how long you have to keep

129
00:07:16,080 --> 00:07:18,600
around the various assets that we end up

130
00:07:18,600 --> 00:07:21,180
Computing in the DAT protocol

131
00:07:21,180 --> 00:07:22,919
um it's useful to know how what is the

132
00:07:22,919 --> 00:07:25,800
maximum lifetime that uh a task will be

133
00:07:25,800 --> 00:07:26,759
around

134
00:07:26,759 --> 00:07:28,380
um so that's what this this new

135
00:07:28,380 --> 00:07:31,800
parameter accomplishes next slide

136
00:07:31,800 --> 00:07:35,160
on the final major change is

137
00:07:35,160 --> 00:07:37,979
um the is to uh HTTP client

138
00:07:37,979 --> 00:07:40,139
authentication so we know that we're

139
00:07:40,139 --> 00:07:41,160
going to need client author

140
00:07:41,160 --> 00:07:43,380
authentication for a couple of channels

141
00:07:43,380 --> 00:07:45,539
uh one between the aggregators the

142
00:07:45,539 --> 00:07:47,220
leader makes requests to the helper and

143
00:07:47,220 --> 00:07:49,560
we want to authenticate that request and

144
00:07:49,560 --> 00:07:51,419
similarly The Collector is going to

145
00:07:51,419 --> 00:07:54,000
collect uh request Aggregates from the

146
00:07:54,000 --> 00:07:56,220
leader and we want to authenticate that

147
00:07:56,220 --> 00:07:58,740
channel as well so in dapple one we had

148
00:07:58,740 --> 00:08:01,139
spelled it spelled out a a kind of a

149
00:08:01,139 --> 00:08:04,500
simple uh dinky uh Bearer token based

150
00:08:04,500 --> 00:08:05,520
approach

151
00:08:05,520 --> 00:08:08,880
um and we decided in Depot 2 to instead

152
00:08:08,880 --> 00:08:10,560
of specifying a concrete scheme we would

153
00:08:10,560 --> 00:08:13,740
just spell out requirements for uh the

154
00:08:13,740 --> 00:08:16,620
establishing the secure Channel

155
00:08:16,620 --> 00:08:19,440
um and the idea here is that we uh we

156
00:08:19,440 --> 00:08:21,000
wanted to permit lots of flexibility

157
00:08:21,000 --> 00:08:23,580
here for for uh implementations because

158
00:08:23,580 --> 00:08:26,460
this is client HTTP client auth can be

159
00:08:26,460 --> 00:08:30,180
can be uh tricky uh next slide

160
00:08:30,180 --> 00:08:33,839
so um the the plan for the the the next

161
00:08:33,839 --> 00:08:37,380
spec Dapo 3 is basically to address some

162
00:08:37,380 --> 00:08:39,659
minor uh bugs that we noticed while we

163
00:08:39,659 --> 00:08:41,279
were working on the implementations of

164
00:08:41,279 --> 00:08:43,979
dappo2 so these are things like

165
00:08:43,979 --> 00:08:49,260
um we uh we uh uh at issue 362 uh we

166
00:08:49,260 --> 00:08:52,320
ended up making anti-replay requirements

167
00:08:52,320 --> 00:08:54,600
uh a bit stricter than in the previous

168
00:08:54,600 --> 00:08:56,640
draft and we're wondering if that's

169
00:08:56,640 --> 00:08:58,200
actually a regression so there's some

170
00:08:58,200 --> 00:09:00,060
discussion happening there uh it'd be

171
00:09:00,060 --> 00:09:02,100
great to get people's feedback

172
00:09:02,100 --> 00:09:03,540
um and then another issue to highlight

173
00:09:03,540 --> 00:09:04,560
is

174
00:09:04,560 --> 00:09:06,959
um uh extension processing semantics I

175
00:09:06,959 --> 00:09:09,000
uh we haven't actually fully spelled

176
00:09:09,000 --> 00:09:11,279
this out and uh as we'll see later we're

177
00:09:11,279 --> 00:09:13,620
gonna propose a new extension so I think

178
00:09:13,620 --> 00:09:15,600
it's time to figure this out

179
00:09:15,600 --> 00:09:18,180
um and then beyond that um Tim is going

180
00:09:18,180 --> 00:09:21,600
to talk about the some API rework uh

181
00:09:21,600 --> 00:09:22,860
proposal

182
00:09:22,860 --> 00:09:24,660
um this is like the only major change

183
00:09:24,660 --> 00:09:26,580
that we foresee doing

184
00:09:26,580 --> 00:09:28,880
um and uh and then beyond that

185
00:09:28,880 --> 00:09:31,019
integrating pop other one is something

186
00:09:31,019 --> 00:09:33,180
we want to get to in the near in the

187
00:09:33,180 --> 00:09:34,980
medium term future

188
00:09:34,980 --> 00:09:36,660
um editorial changes I think there's

189
00:09:36,660 --> 00:09:38,820
this presentation in the spec is is

190
00:09:38,820 --> 00:09:41,220
wanting a lot uh as as people many

191
00:09:41,220 --> 00:09:43,560
pointed out and then beyond that we

192
00:09:43,560 --> 00:09:44,820
wanted to start doing all the things

193
00:09:44,820 --> 00:09:46,800
that makes a good spec good um

194
00:09:46,800 --> 00:09:48,899
experimentation security analysis and so

195
00:09:48,899 --> 00:09:49,560
on

196
00:09:49,560 --> 00:09:52,219
next slide

197
00:09:52,320 --> 00:09:53,820
so very quickly there are two

198
00:09:53,820 --> 00:09:55,800
implementations of dappo2 that we're

199
00:09:55,800 --> 00:09:58,200
aware of uh one by cloudflare and

200
00:09:58,200 --> 00:10:00,600
another by the isrg

201
00:10:00,600 --> 00:10:02,459
um we've been working together closely

202
00:10:02,459 --> 00:10:04,019
on our implementations

203
00:10:04,019 --> 00:10:05,700
um we are we're quite confident that

204
00:10:05,700 --> 00:10:06,779
we're at a point where we could really

205
00:10:06,779 --> 00:10:08,459
start experimenting so if there's

206
00:10:08,459 --> 00:10:10,500
interest please ping the list

207
00:10:10,500 --> 00:10:13,380
um also the PPM channel in the ietf

208
00:10:13,380 --> 00:10:15,240
slack is quite active so we'd love to

209
00:10:15,240 --> 00:10:16,920
see you there and finally I wanted to

210
00:10:16,920 --> 00:10:18,839
flag this uh draft that David Cook is

211
00:10:18,839 --> 00:10:21,300
working on he's from the isrg

212
00:10:21,300 --> 00:10:24,060
um they're uh yeah they're uh it's it's

213
00:10:24,060 --> 00:10:25,680
basically spelling out some some some

214
00:10:25,680 --> 00:10:27,480
ways to do interrupt testing between

215
00:10:27,480 --> 00:10:29,160
implementations and that's been really

216
00:10:29,160 --> 00:10:30,480
useful for us

217
00:10:30,480 --> 00:10:32,760
um thanks uh I didn't leave much time

218
00:10:32,760 --> 00:10:35,240
for questions

219
00:10:37,740 --> 00:10:39,420
but if there are some quick questions

220
00:10:39,420 --> 00:10:42,140
let's hear them

221
00:10:50,399 --> 00:10:54,000
if not uh we can move on to Tim

222
00:10:54,000 --> 00:10:58,160
who I believe is next in the agenda

223
00:11:03,420 --> 00:11:05,459
okay it'd be great if somebody could uh

224
00:11:05,459 --> 00:11:08,399
take over note taking while I'm speaking

225
00:11:08,399 --> 00:11:10,800
uh okay same it looks like you're gonna

226
00:11:10,800 --> 00:11:12,480
be driving the slides

227
00:11:12,480 --> 00:11:15,180
let me pull up notes and all right uh

228
00:11:15,180 --> 00:11:17,279
let's dive in so

229
00:11:17,279 --> 00:11:19,680
for the last few weeks I've been uh

230
00:11:19,680 --> 00:11:22,260
working on a new version of the HTTP API

231
00:11:22,260 --> 00:11:24,600
for uh for the distributed aggregation

232
00:11:24,600 --> 00:11:25,740
protocol

233
00:11:25,740 --> 00:11:26,640
um

234
00:11:26,640 --> 00:11:29,160
but thanks uh So currently this exists

235
00:11:29,160 --> 00:11:31,260
only as a memo that I've that I've

236
00:11:31,260 --> 00:11:33,000
written up in a request on GitHub that

237
00:11:33,000 --> 00:11:34,740
sketches out the proposal so there's a

238
00:11:34,740 --> 00:11:36,060
lot of work to do before we'll even have

239
00:11:36,060 --> 00:11:37,800
a PR that could actually be merged into

240
00:11:37,800 --> 00:11:39,720
the protocol text but what I want to do

241
00:11:39,720 --> 00:11:42,180
at this stage is socialize this idea to

242
00:11:42,180 --> 00:11:44,279
the working group uh and gather feedback

243
00:11:44,279 --> 00:11:45,779
but to make sure that we've identified

244
00:11:45,779 --> 00:11:47,399
the right problems and that we're headed

245
00:11:47,399 --> 00:11:49,500
in the right direction to solve them so

246
00:11:49,500 --> 00:11:50,820
I think it's important to do this kind

247
00:11:50,820 --> 00:11:53,160
of thing sooner rather than later uh the

248
00:11:53,160 --> 00:11:55,620
idea being to minimize disruption to DAP

249
00:11:55,620 --> 00:11:57,420
implementations um would have to adopt a

250
00:11:57,420 --> 00:11:59,820
new API since as Chris just highlighted

251
00:11:59,820 --> 00:12:01,140
there's only two of them known in public

252
00:12:01,140 --> 00:12:03,420
hopefully it's cheaper to have them you

253
00:12:03,420 --> 00:12:04,500
know to have us update our

254
00:12:04,500 --> 00:12:06,240
implementations than uh to do this like

255
00:12:06,240 --> 00:12:08,279
months or maybe years down the line

256
00:12:08,279 --> 00:12:10,980
right so on this slide we see the the

257
00:12:10,980 --> 00:12:13,740
current API surface uh specified in

258
00:12:13,740 --> 00:12:15,360
napo2

259
00:12:15,360 --> 00:12:19,079
um so these seven HTTP you know requests

260
00:12:19,079 --> 00:12:20,820
um Drive the upload Aggregate and

261
00:12:20,820 --> 00:12:22,620
collects our protocols

262
00:12:22,620 --> 00:12:25,200
so what we notice uh next slide slide

263
00:12:25,200 --> 00:12:26,040
please

264
00:12:26,040 --> 00:12:28,620
one thing we noticed right away

265
00:12:28,620 --> 00:12:32,160
oh thank you is that

266
00:12:32,160 --> 00:12:33,600
um the thing described by the uh the

267
00:12:33,600 --> 00:12:36,300
relative path is variably a noun or a

268
00:12:36,300 --> 00:12:38,279
verb uh which I think makes it then

269
00:12:38,279 --> 00:12:39,839
awkward to that you know to resolve the

270
00:12:39,839 --> 00:12:41,339
verbs against the verb that's in the

271
00:12:41,339 --> 00:12:43,980
HTTP method so we see this because in

272
00:12:43,980 --> 00:12:46,500
fact uh reflected in that um more than

273
00:12:46,500 --> 00:12:50,040
half of the uh of the API pass here use

274
00:12:50,040 --> 00:12:53,100
post which to me suggests like that they

275
00:12:53,100 --> 00:12:54,360
should be speak for I want to do

276
00:12:54,360 --> 00:12:56,519
something to the thing at this path but

277
00:12:56,519 --> 00:12:58,139
the semantics aren't you know aren't

278
00:12:58,139 --> 00:13:00,120
super clear

279
00:13:00,120 --> 00:13:01,500
um next slide please

280
00:13:01,500 --> 00:13:03,300
crucially post also means that the

281
00:13:03,300 --> 00:13:06,060
requests are not item potent uh which

282
00:13:06,060 --> 00:13:07,079
makes it unclear for protocol

283
00:13:07,079 --> 00:13:08,579
participants how they're supposed to go

284
00:13:08,579 --> 00:13:11,040
about recovering from faults uh this is

285
00:13:11,040 --> 00:13:12,660
especially a challenge in the aggregate

286
00:13:12,660 --> 00:13:15,360
subprotocol since uh that's all about

287
00:13:15,360 --> 00:13:18,240
the uh stateful multi-round

288
00:13:18,240 --> 00:13:21,300
um execution of the vdaf verification uh

289
00:13:21,300 --> 00:13:23,839
algorithm

290
00:13:24,240 --> 00:13:25,440
um and finally a problem with the

291
00:13:25,440 --> 00:13:27,300
current API layout is that there are

292
00:13:27,300 --> 00:13:28,980
some cases where servers have to

293
00:13:28,980 --> 00:13:31,500
partially parse a message to extract a

294
00:13:31,500 --> 00:13:33,839
value like say the task ID which is

295
00:13:33,839 --> 00:13:35,700
needed to then parse the rest of the

296
00:13:35,700 --> 00:13:37,200
message because there are cases where

297
00:13:37,200 --> 00:13:38,940
you have to look up the task to figure

298
00:13:38,940 --> 00:13:40,980
out what vdaf or query type is in use

299
00:13:40,980 --> 00:13:42,839
and that informs the structure of the

300
00:13:42,839 --> 00:13:44,519
remainder of the message in the request

301
00:13:44,519 --> 00:13:47,279
body so that's awkward at best

302
00:13:47,279 --> 00:13:52,100
and um risky I think in some cases

303
00:13:52,200 --> 00:13:55,200
um okay next slide please

304
00:13:55,200 --> 00:13:56,760
so with those problems in mind let's

305
00:13:56,760 --> 00:13:58,320
look at what I'm now proposing to do

306
00:13:58,320 --> 00:14:00,480
instead so in designing this I started

307
00:14:00,480 --> 00:14:02,279
by enumerating what are the resources

308
00:14:02,279 --> 00:14:04,380
that this API is managing what are the

309
00:14:04,380 --> 00:14:05,579
things

310
00:14:05,579 --> 00:14:06,899
um the idea being to let the HTTP

311
00:14:06,899 --> 00:14:09,240
methods be the verbs so that's

312
00:14:09,240 --> 00:14:10,980
enumerated in this table so the

313
00:14:10,980 --> 00:14:12,779
resources ought to be familiar uh from

314
00:14:12,779 --> 00:14:16,079
dappo2 it's hpk configurations reports

315
00:14:16,079 --> 00:14:19,139
aggregation jobs aggregation shares and

316
00:14:19,139 --> 00:14:21,300
collections

317
00:14:21,300 --> 00:14:23,220
um so we noticed that the New Paths uh

318
00:14:23,220 --> 00:14:25,440
contain much more information uh so in

319
00:14:25,440 --> 00:14:27,600
particular the task ID and in some cases

320
00:14:27,600 --> 00:14:29,220
the unique identifier for the resource

321
00:14:29,220 --> 00:14:31,980
are there in the relative path

322
00:14:31,980 --> 00:14:33,060
um and we see that you know most

323
00:14:33,060 --> 00:14:34,920
resources are now subordinate to a task

324
00:14:34,920 --> 00:14:36,779
uh with the exception that the hpk

325
00:14:36,779 --> 00:14:38,820
config because those can be Global so it

326
00:14:38,820 --> 00:14:40,079
would be a bit awkward

327
00:14:40,079 --> 00:14:42,899
to make it look like everything else

328
00:14:42,899 --> 00:14:44,519
um so implementations have to implement

329
00:14:44,519 --> 00:14:46,019
the methods listed in the required

330
00:14:46,019 --> 00:14:48,000
methods column but unimplementation

331
00:14:48,000 --> 00:14:50,040
could you know Implement more methods on

332
00:14:50,040 --> 00:14:51,899
a some resource if they choose to or if

333
00:14:51,899 --> 00:14:53,699
it makes sense for them

334
00:14:53,699 --> 00:14:56,160
uh next slide please

335
00:14:56,160 --> 00:14:57,899
so I also tried to pay attention to

336
00:14:57,899 --> 00:14:59,880
making better use of put so that we can

337
00:14:59,880 --> 00:15:02,399
get item potents

338
00:15:02,399 --> 00:15:04,740
um in particular for example if an

339
00:15:04,740 --> 00:15:06,480
aggregation job you do a put request to

340
00:15:06,480 --> 00:15:07,800
create one since there's a unique

341
00:15:07,800 --> 00:15:09,420
identifier in it which allows the the

342
00:15:09,420 --> 00:15:11,699
server the helper in this case to sort

343
00:15:11,699 --> 00:15:14,160
of disambiguate repeated requests but

344
00:15:14,160 --> 00:15:15,600
advancing the state of an aggregation

345
00:15:15,600 --> 00:15:17,100
job which is again you know that's the

346
00:15:17,100 --> 00:15:19,620
stateful vdap verification algorithm

347
00:15:19,620 --> 00:15:21,420
um that does incur a side effect in the

348
00:15:21,420 --> 00:15:22,920
helper of advancing it to the next round

349
00:15:22,920 --> 00:15:25,800
of verification so that's a post since

350
00:15:25,800 --> 00:15:28,459
it has a side effect

351
00:15:28,860 --> 00:15:31,500
um next slide please

352
00:15:31,500 --> 00:15:33,899
all right uh for some resources the

353
00:15:33,899 --> 00:15:35,940
unique identifier for a resource appears

354
00:15:35,940 --> 00:15:38,639
in the URI because this is for cases

355
00:15:38,639 --> 00:15:40,440
where uh the unique identifier is

356
00:15:40,440 --> 00:15:43,199
assigned by the requester so in a report

357
00:15:43,199 --> 00:15:45,300
the client assigns the report ID for

358
00:15:45,300 --> 00:15:47,639
aggregation jobs uh yeah he's assigned

359
00:15:47,639 --> 00:15:48,839
by the leader

360
00:15:48,839 --> 00:15:51,000
uh next slide please

361
00:15:51,000 --> 00:15:53,040
in other cases it's the message Handler

362
00:15:53,040 --> 00:15:54,540
that will assign the unique ID of the

363
00:15:54,540 --> 00:15:57,240
resource um so the put is to a resource

364
00:15:57,240 --> 00:15:58,920
for aggregate shares plural or

365
00:15:58,920 --> 00:16:01,440
collections plural then it's the Handler

366
00:16:01,440 --> 00:16:03,480
of the messages responsibility to sort

367
00:16:03,480 --> 00:16:05,279
of assigning identifier and construct a

368
00:16:05,279 --> 00:16:08,100
URI so for that reason in these cases we

369
00:16:08,100 --> 00:16:09,540
don't specify

370
00:16:09,540 --> 00:16:11,220
um what the URI for the individual

371
00:16:11,220 --> 00:16:13,019
resource is just what methods it

372
00:16:13,019 --> 00:16:14,579
supports and what the you know what's

373
00:16:14,579 --> 00:16:16,019
and what the semantics of those calls

374
00:16:16,019 --> 00:16:17,699
are

375
00:16:17,699 --> 00:16:20,459
uh next slide please

376
00:16:20,459 --> 00:16:22,440
so despite being significantly different

377
00:16:22,440 --> 00:16:24,660
and I hope better

378
00:16:24,660 --> 00:16:27,120
um the migration from the uh Depo 2 API

379
00:16:27,120 --> 00:16:28,740
of his proposal hopefully ought to be

380
00:16:28,740 --> 00:16:31,079
relatively smooth for implementations uh

381
00:16:31,079 --> 00:16:32,880
so this table enumerates the old API

382
00:16:32,880 --> 00:16:34,680
endpoints uh with the corresponding view

383
00:16:34,680 --> 00:16:36,300
ones and there's actually a one-to-one

384
00:16:36,300 --> 00:16:38,699
analog in almost every case so the

385
00:16:38,699 --> 00:16:40,560
migration hopefully would just consist

386
00:16:40,560 --> 00:16:42,959
of adopting new message types

387
00:16:42,959 --> 00:16:45,240
um since in some cases the message is no

388
00:16:45,240 --> 00:16:46,560
longer need to contain information like

389
00:16:46,560 --> 00:16:48,000
a task ID or some other unique

390
00:16:48,000 --> 00:16:49,620
identifier as that's been hoisted up

391
00:16:49,620 --> 00:16:52,680
into the to the URI

392
00:16:52,680 --> 00:16:54,060
um and you know update the path of which

393
00:16:54,060 --> 00:16:55,380
a message is handled but the actual

394
00:16:55,380 --> 00:16:56,639
message handling code shouldn't change

395
00:16:56,639 --> 00:16:58,920
much the exception is handling of

396
00:16:58,920 --> 00:17:01,680
aggregate shares which in Depo 2 uh was

397
00:17:01,680 --> 00:17:04,140
one synchronous post request to initiate

398
00:17:04,140 --> 00:17:05,640
uh from the leader to the helper to

399
00:17:05,640 --> 00:17:06,599
initiate the construction of an

400
00:17:06,599 --> 00:17:08,760
aggregate chair and then obtain it uh in

401
00:17:08,760 --> 00:17:10,619
this proposal I've I've

402
00:17:10,619 --> 00:17:12,240
um changed the handling of aggregate

403
00:17:12,240 --> 00:17:14,099
chairs to align it with collects sorry

404
00:17:14,099 --> 00:17:17,040
the leaders collect uh resource

405
00:17:17,040 --> 00:17:18,839
primarily this is for symmetry since the

406
00:17:18,839 --> 00:17:20,640
two resources the helper aggregate chair

407
00:17:20,640 --> 00:17:22,319
and the leader collection is that

408
00:17:22,319 --> 00:17:24,660
they're very much the same uh this also

409
00:17:24,660 --> 00:17:26,220
enables the helper to asynchronously

410
00:17:26,220 --> 00:17:28,140
compute aggregate chairs since that

411
00:17:28,140 --> 00:17:30,179
process can be expensive and take some

412
00:17:30,179 --> 00:17:31,620
time

413
00:17:31,620 --> 00:17:34,740
okay next slide please

414
00:17:34,740 --> 00:17:37,140
um so there's a lot more to all this

415
00:17:37,140 --> 00:17:38,160
that we didn't have time to discuss

416
00:17:38,160 --> 00:17:40,559
today and a lot more work to do so all

417
00:17:40,559 --> 00:17:42,000
of this needs some more analysis to show

418
00:17:42,000 --> 00:17:43,620
that we can do error recovery and all

419
00:17:43,620 --> 00:17:45,360
the cases that we care about

420
00:17:45,360 --> 00:17:46,200
um and there's some open design

421
00:17:46,200 --> 00:17:48,179
questions so for one thing does it make

422
00:17:48,179 --> 00:17:49,440
sense to align the aggregate chair

423
00:17:49,440 --> 00:17:51,059
resource on the helper with the

424
00:17:51,059 --> 00:17:53,160
collection resource on the leader

425
00:17:53,160 --> 00:17:55,440
further in my opinion The Collection

426
00:17:55,440 --> 00:17:57,120
resource right now it's rather awkward

427
00:17:57,120 --> 00:17:59,640
I'm not sure it's the right noun that we

428
00:17:59,640 --> 00:18:01,620
have um so Chris Patton suggested that

429
00:18:01,620 --> 00:18:02,880
we could call this a collection job

430
00:18:02,880 --> 00:18:04,919
instead which I think is better but

431
00:18:04,919 --> 00:18:06,360
maybe we should think about this as a

432
00:18:06,360 --> 00:18:07,799
query right in the sense that the

433
00:18:07,799 --> 00:18:09,660
collector is making a query against an

434
00:18:09,660 --> 00:18:11,100
aggregate that's been compiled by the

435
00:18:11,100 --> 00:18:12,840
aggregators

436
00:18:12,840 --> 00:18:14,940
um the other thing is there's some

437
00:18:14,940 --> 00:18:17,580
awkwardness in the collect API that we

438
00:18:17,580 --> 00:18:18,720
didn't discuss just now because we don't

439
00:18:18,720 --> 00:18:20,160
have time

440
00:18:20,160 --> 00:18:22,440
um that's there because we're trying to

441
00:18:22,440 --> 00:18:24,240
write one API for the collection flow

442
00:18:24,240 --> 00:18:25,919
that accommodates both the time interval

443
00:18:25,919 --> 00:18:28,380
and fixed size query types that Chris

444
00:18:28,380 --> 00:18:30,480
discussed just earlier so I think we

445
00:18:30,480 --> 00:18:32,580
should bash out like is this a good goal

446
00:18:32,580 --> 00:18:33,900
or should we accept that these two

447
00:18:33,900 --> 00:18:35,340
things are fundamentally different and

448
00:18:35,340 --> 00:18:37,919
surface two different apis

449
00:18:37,919 --> 00:18:41,039
um each better fit to the specific task

450
00:18:41,039 --> 00:18:43,620
so I'll close with a call to action here

451
00:18:43,620 --> 00:18:45,480
uh which is that um if you've been

452
00:18:45,480 --> 00:18:47,580
following all this Gap in PPM work and

453
00:18:47,580 --> 00:18:48,840
you find it interesting but you're you

454
00:18:48,840 --> 00:18:50,100
know but you don't have a good handle on

455
00:18:50,100 --> 00:18:51,900
this Euro knowledge proofs and so on but

456
00:18:51,900 --> 00:18:53,520
you do know your puts from your posts

457
00:18:53,520 --> 00:18:56,160
please come and help us out with this

458
00:18:56,160 --> 00:18:59,220
um so there's a pull request linked here

459
00:18:59,220 --> 00:19:01,440
um and uh otherwise we'd love yes we'd

460
00:19:01,440 --> 00:19:03,360
love to hear from you there on GitHub in

461
00:19:03,360 --> 00:19:06,299
the PPM mailing list on slack wherever

462
00:19:06,299 --> 00:19:10,580
all right uh that's it thanks very much

463
00:19:11,160 --> 00:19:14,539
Martin Thompson

464
00:19:19,440 --> 00:19:21,780
that's a hell of a walk

465
00:19:21,780 --> 00:19:23,039
um Martin Thompson

466
00:19:23,039 --> 00:19:24,600
um thanks for walking through this Tim

467
00:19:24,600 --> 00:19:29,120
can you walk back a slide or two

468
00:19:30,000 --> 00:19:32,299
right so I'm singing a bunch of

469
00:19:32,299 --> 00:19:35,760
effectively URI templates which is all

470
00:19:35,760 --> 00:19:40,559
reasonable uh my question is uh does the

471
00:19:40,559 --> 00:19:42,240
client determine any of the things that

472
00:19:42,240 --> 00:19:44,100
are in those curly braces on in those

473
00:19:44,100 --> 00:19:46,340
urls

474
00:19:46,340 --> 00:19:50,220
yes so the client chooses the report ID

475
00:19:50,220 --> 00:19:53,100
when it uploads a report

476
00:19:53,100 --> 00:19:55,860
um additionally well I'll let Chris and

477
00:19:55,860 --> 00:19:57,419
Shan speak to the task provisioning

478
00:19:57,419 --> 00:20:00,240
extension later but uh yeah I think

479
00:20:00,240 --> 00:20:02,400
they'll explain how the task ID can in

480
00:20:02,400 --> 00:20:03,720
that setting have something to do with

481
00:20:03,720 --> 00:20:05,280
the client

482
00:20:05,280 --> 00:20:07,020
that tends to produce interesting

483
00:20:07,020 --> 00:20:08,400
problems

484
00:20:08,400 --> 00:20:10,559
um it may be that you're far enough down

485
00:20:10,559 --> 00:20:12,660
the down the path that it doesn't matter

486
00:20:12,660 --> 00:20:14,520
as much in this context

487
00:20:14,520 --> 00:20:17,280
but if you have the ability for clients

488
00:20:17,280 --> 00:20:19,559
to for the same for instance for the

489
00:20:19,559 --> 00:20:21,720
same task ID have multiple clients

490
00:20:21,720 --> 00:20:23,760
they might for instance produce the same

491
00:20:23,760 --> 00:20:27,120
report ID or whatever other pieces you

492
00:20:27,120 --> 00:20:28,260
have there

493
00:20:28,260 --> 00:20:29,880
which creates

494
00:20:29,880 --> 00:20:31,500
um potential collisions and other things

495
00:20:31,500 --> 00:20:34,320
the usual practice here is to have the

496
00:20:34,320 --> 00:20:35,760
client request the creation of a

497
00:20:35,760 --> 00:20:37,200
resource and the server to tell it where

498
00:20:37,200 --> 00:20:38,340
it is

499
00:20:38,340 --> 00:20:43,140
and that means using your you're losing

500
00:20:43,140 --> 00:20:45,299
some of your item potency but in

501
00:20:45,299 --> 00:20:47,460
exchange you

502
00:20:47,460 --> 00:20:49,440
um you get a lot more resilience on the

503
00:20:49,440 --> 00:20:51,660
server side against things like clients

504
00:20:51,660 --> 00:20:54,179
that might accidentally or maliciously

505
00:20:54,179 --> 00:20:56,400
try to get collisions out of the

506
00:20:56,400 --> 00:20:58,919
resource identifiers it also gives the

507
00:20:58,919 --> 00:21:00,360
server a little bit more control over

508
00:21:00,360 --> 00:21:03,059
how it structures identifiers for its

509
00:21:03,059 --> 00:21:05,100
own purposes so if the server is in a

510
00:21:05,100 --> 00:21:07,440
position where it needs to know how to

511
00:21:07,440 --> 00:21:09,480
route some of the

512
00:21:09,480 --> 00:21:12,840
um the queries from to each one of these

513
00:21:12,840 --> 00:21:14,940
resources if it gets to choose the

514
00:21:14,940 --> 00:21:18,360
identifiers then it can do things to um

515
00:21:18,360 --> 00:21:21,419
optimize and uh change the way it

516
00:21:21,419 --> 00:21:24,240
processes these requests so I would

517
00:21:24,240 --> 00:21:26,460
recommend maybe in the cases where

518
00:21:26,460 --> 00:21:28,320
you're trying to create a resource

519
00:21:28,320 --> 00:21:31,740
you you look at using post with

520
00:21:31,740 --> 00:21:32,900
um say a 201

521
00:21:32,900 --> 00:21:35,340
response that contains the location of

522
00:21:35,340 --> 00:21:37,799
the resources created as a result

523
00:21:37,799 --> 00:21:40,799
you can get back a lot of your item

524
00:21:40,799 --> 00:21:43,020
potency by making that create thing do

525
00:21:43,020 --> 00:21:45,659
nothing of consequence and then have put

526
00:21:45,659 --> 00:21:48,780
to update the content of those resources

527
00:21:48,780 --> 00:21:51,059
once you're done if if you particularly

528
00:21:51,059 --> 00:21:53,340
care about those sorts of things

529
00:21:53,340 --> 00:21:55,380
I am a bit where one of the nice

530
00:21:55,380 --> 00:21:57,659
properties of prio hopefully the mic is

531
00:21:57,659 --> 00:21:59,280
better now by the way uh one of the nice

532
00:21:59,280 --> 00:22:00,960
properties of systems like prio is that

533
00:22:00,960 --> 00:22:03,299
the client only speaks once

534
00:22:03,299 --> 00:22:04,380
um and I think that's something we

535
00:22:04,380 --> 00:22:07,320
should strive to maintain but I do take

536
00:22:07,320 --> 00:22:09,059
your point about the risks of clients

537
00:22:09,059 --> 00:22:12,179
choosing report IDs as well taken

538
00:22:12,179 --> 00:22:14,760
yeah so the other thing is it's totally

539
00:22:14,760 --> 00:22:16,500
okay to use post

540
00:22:16,500 --> 00:22:19,799
uh and trade it like it has item put in

541
00:22:19,799 --> 00:22:21,780
somatics because you know what the

542
00:22:21,780 --> 00:22:24,840
somatics of the the operation is and so

543
00:22:24,840 --> 00:22:27,179
in the case where you're posting and you

544
00:22:27,179 --> 00:22:28,440
didn't get a response from the server

545
00:22:28,440 --> 00:22:30,419
and you're reasonably confident it's got

546
00:22:30,419 --> 00:22:31,860
some other information that that can be

547
00:22:31,860 --> 00:22:33,480
used to prevent a replay or something

548
00:22:33,480 --> 00:22:34,799
along those lines

549
00:22:34,799 --> 00:22:37,320
then it's totally okay to do another

550
00:22:37,320 --> 00:22:39,419
post it's fine you won't necessarily

551
00:22:39,419 --> 00:22:42,120
engage all the automated logic

552
00:22:42,120 --> 00:22:44,460
um that might be in some Stacks to to do

553
00:22:44,460 --> 00:22:46,980
the post again but then again if you're

554
00:22:46,980 --> 00:22:48,539
doing it in a browser you might get

555
00:22:48,539 --> 00:22:52,580
retries on posts anyway just saying

556
00:23:07,559 --> 00:23:10,140
okay let's uh let's keep going Chris do

557
00:23:10,140 --> 00:23:13,260
you want to try sharing slides uh again

558
00:23:13,260 --> 00:23:15,500
foreign

559
00:23:16,320 --> 00:23:20,100
oh yeah here we go so uh we're on to uh

560
00:23:20,100 --> 00:23:23,120
differential privacy right

561
00:23:24,179 --> 00:23:25,860
all right

562
00:23:25,860 --> 00:23:28,679
everyone can see that cool all right

563
00:23:28,679 --> 00:23:30,000
um

564
00:23:30,000 --> 00:23:32,400
well oh actually let me set my timer

565
00:23:32,400 --> 00:23:34,020
real quick

566
00:23:34,020 --> 00:23:35,220
okay

567
00:23:35,220 --> 00:23:36,059
um

568
00:23:36,059 --> 00:23:37,740
so this is actually not going to be that

569
00:23:37,740 --> 00:23:40,200
specific this is more about uh the land

570
00:23:40,200 --> 00:23:42,480
of PPM in general

571
00:23:42,480 --> 00:23:43,679
um

572
00:23:43,679 --> 00:23:46,020
we've been talking about uh the

573
00:23:46,020 --> 00:23:49,559
composition of differential privacy with

574
00:23:49,559 --> 00:23:51,600
protocols like dap

575
00:23:51,600 --> 00:23:54,780
um in various different venues and you

576
00:23:54,780 --> 00:23:56,100
know we're reasonably confident there's

577
00:23:56,100 --> 00:23:58,559
a lot we can do here but to date this

578
00:23:58,559 --> 00:24:00,179
working group at least hasn't come up

579
00:24:00,179 --> 00:24:02,880
with anything concrete either in the DAP

580
00:24:02,880 --> 00:24:05,340
spec the vdap spec or anywhere else in

581
00:24:05,340 --> 00:24:08,220
the in the in the PPU working group

582
00:24:08,220 --> 00:24:09,120
um

583
00:24:09,120 --> 00:24:11,880
what I want to try to pitch today is

584
00:24:11,880 --> 00:24:14,159
that we need to start working on a draft

585
00:24:14,159 --> 00:24:16,799
that provides some concrete guidelines

586
00:24:16,799 --> 00:24:19,380
for integrating specific differential

587
00:24:19,380 --> 00:24:21,960
privacy mechanisms with specific PPM

588
00:24:21,960 --> 00:24:23,280
protocols

589
00:24:23,280 --> 00:24:25,020
so just to get a little at the

590
00:24:25,020 --> 00:24:27,059
motivation here

591
00:24:27,059 --> 00:24:28,380
um let's ask

592
00:24:28,380 --> 00:24:29,940
I think it's the starting point should

593
00:24:29,940 --> 00:24:32,280
be like what does dap provide a protocol

594
00:24:32,280 --> 00:24:34,080
like that provide and what does it not

595
00:24:34,080 --> 00:24:37,320
provide so dap specifically provides NPC

596
00:24:37,320 --> 00:24:38,880
style security guarantees where

597
00:24:38,880 --> 00:24:41,220
basically you want that the ad The

598
00:24:41,220 --> 00:24:44,760
Collector can compute some aggregate of

599
00:24:44,760 --> 00:24:46,679
over some measurements without seeing

600
00:24:46,679 --> 00:24:49,200
the individual measurements themselves

601
00:24:49,200 --> 00:24:51,419
so in our threat model from debt this is

602
00:24:51,419 --> 00:24:53,460
certainly like unnecessary property for

603
00:24:53,460 --> 00:24:54,960
privacy right

604
00:24:54,960 --> 00:24:57,120
um but there's really no reason to think

605
00:24:57,120 --> 00:24:58,679
that this is going to be sufficient for

606
00:24:58,679 --> 00:25:00,480
every application and kind of the

607
00:25:00,480 --> 00:25:02,520
canonical example of this uh Chris Wood

608
00:25:02,520 --> 00:25:04,740
brought up at the last ITF I have a link

609
00:25:04,740 --> 00:25:06,000
here to the slides you should go check

610
00:25:06,000 --> 00:25:07,140
it out

611
00:25:07,140 --> 00:25:07,860
um

612
00:25:07,860 --> 00:25:10,500
which there's this risk of overexposing

613
00:25:10,500 --> 00:25:13,740
a user if say some automated system has

614
00:25:13,740 --> 00:25:16,140
uh that measures the client multiple

615
00:25:16,140 --> 00:25:19,140
times in in a single batch or across

616
00:25:19,140 --> 00:25:21,539
multiple batches over time either way

617
00:25:21,539 --> 00:25:23,340
there's this risk of overexposing

618
00:25:23,340 --> 00:25:27,000
information about an individual user

619
00:25:27,000 --> 00:25:28,799
so um

620
00:25:28,799 --> 00:25:31,020
what can we do about this well I think

621
00:25:31,020 --> 00:25:33,360
mechanically at the at the level of

622
00:25:33,360 --> 00:25:35,100
depth there's there's really not much we

623
00:25:35,100 --> 00:25:37,020
can do that's going to be good for all

624
00:25:37,020 --> 00:25:38,820
situations

625
00:25:38,820 --> 00:25:41,000
um so the way you know

626
00:25:41,000 --> 00:25:43,919
an alternative way to approach this is

627
00:25:43,919 --> 00:25:46,320
to kind of formalize what do we mean by

628
00:25:46,320 --> 00:25:47,760
privacy

629
00:25:47,760 --> 00:25:49,980
um and one answer to that question is

630
00:25:49,980 --> 00:25:51,600
this notion of differential privacy

631
00:25:51,600 --> 00:25:54,000
which has been around for a long time

632
00:25:54,000 --> 00:25:56,220
um and I'll give a quick overview of my

633
00:25:56,220 --> 00:25:59,159
my own understanding of how DP works

634
00:25:59,159 --> 00:26:00,900
you basically imagine you have some

635
00:26:00,900 --> 00:26:03,480
randomized query algorithm that um is

636
00:26:03,480 --> 00:26:05,520
exposing Aggregates over measurements

637
00:26:05,520 --> 00:26:08,820
and the property that we want is the

638
00:26:08,820 --> 00:26:11,159
distribution of the output of the

639
00:26:11,159 --> 00:26:13,020
aggregate should not depend

640
00:26:13,020 --> 00:26:16,080
significantly on any one individual's

641
00:26:16,080 --> 00:26:17,279
measurement

642
00:26:17,279 --> 00:26:19,260
and we can formalize this by thinking of

643
00:26:19,260 --> 00:26:22,799
uh the the the uh the difference in the

644
00:26:22,799 --> 00:26:24,960
distribution of the output between two

645
00:26:24,960 --> 00:26:26,940
databases that differ in exactly one

646
00:26:26,940 --> 00:26:28,080
measurement

647
00:26:28,080 --> 00:26:30,360
so it's kind of like a intuitive example

648
00:26:30,360 --> 00:26:32,400
of how this would work

649
00:26:32,400 --> 00:26:34,380
um if we have some secure method for

650
00:26:34,380 --> 00:26:37,860
computing uh the aggregate uh to make it

651
00:26:37,860 --> 00:26:39,779
differentially private private what we

652
00:26:39,779 --> 00:26:43,740
do basically is sample uh randomly some

653
00:26:43,740 --> 00:26:45,779
noise from some appropriate distribution

654
00:26:45,779 --> 00:26:48,720
and instead of handing to The Collector

655
00:26:48,720 --> 00:26:50,880
the aggregate we hand to the collector

656
00:26:50,880 --> 00:26:53,580
the sum of the aggregate with the random

657
00:26:53,580 --> 00:26:54,299
noise

658
00:26:54,299 --> 00:26:57,059
and intuitively if we perturb the output

659
00:26:57,059 --> 00:26:58,440
enough

660
00:26:58,440 --> 00:27:02,039
uh then the idea is that we hide the

661
00:27:02,039 --> 00:27:03,720
contribution of any one individual

662
00:27:03,720 --> 00:27:05,220
measurement

663
00:27:05,220 --> 00:27:08,220
so that's a really nice intuitive idea

664
00:27:08,220 --> 00:27:11,580
um but uh differential privacy has a lot

665
00:27:11,580 --> 00:27:13,320
of subtleties to it

666
00:27:13,320 --> 00:27:16,320
um the main kind of consideration when

667
00:27:16,320 --> 00:27:18,900
you're applying DP is the Privacy budget

668
00:27:18,900 --> 00:27:22,080
so basically the degree of privacy that

669
00:27:22,080 --> 00:27:23,700
you get from the system is going to

670
00:27:23,700 --> 00:27:27,480
depend on how many queries you allow in

671
00:27:27,480 --> 00:27:29,760
the system as well as what is the exact

672
00:27:29,760 --> 00:27:31,740
nature of those queries

673
00:27:31,740 --> 00:27:33,240
and

674
00:27:33,240 --> 00:27:34,799
um you know but despite this complexity

675
00:27:34,799 --> 00:27:37,620
I think there is a there's a clear win

676
00:27:37,620 --> 00:27:40,980
here to be able to compose uh PPM

677
00:27:40,980 --> 00:27:43,320
protocols NPC style security goals like

678
00:27:43,320 --> 00:27:46,919
dap or even this uh the security of what

679
00:27:46,919 --> 00:27:48,360
security properties we get from

680
00:27:48,360 --> 00:27:50,700
something like star uh differential

681
00:27:50,700 --> 00:27:52,679
privacy is going to be interesting for a

682
00:27:52,679 --> 00:27:54,600
lot of different applications

683
00:27:54,600 --> 00:27:57,240
so the question is how

684
00:27:57,240 --> 00:28:00,059
um and in all of the discussions I think

685
00:28:00,059 --> 00:28:03,900
the the main thing to take away is that

686
00:28:03,900 --> 00:28:07,140
uh there's not one like clear there's

687
00:28:07,140 --> 00:28:08,640
not one solution that's going to fit

688
00:28:08,640 --> 00:28:11,039
every protocol the the the the the the

689
00:28:11,039 --> 00:28:14,460
the the the kind of the ideal mechanism

690
00:28:14,460 --> 00:28:16,200
or even like the set of suitable

691
00:28:16,200 --> 00:28:18,960
mechanisms is going to depend first of

692
00:28:18,960 --> 00:28:21,600
all first off on your base protocol so

693
00:28:21,600 --> 00:28:23,279
differential privacy is going to look

694
00:28:23,279 --> 00:28:25,919
very different but for star versus uh

695
00:28:25,919 --> 00:28:27,720
versus dap

696
00:28:27,720 --> 00:28:29,940
um and also you have to be very careful

697
00:28:29,940 --> 00:28:33,240
about considering the application and uh

698
00:28:33,240 --> 00:28:34,980
and the nature of the data that you're

699
00:28:34,980 --> 00:28:36,480
collecting

700
00:28:36,480 --> 00:28:39,659
so um I think I you know I think there's

701
00:28:39,659 --> 00:28:41,640
I there's a lot of open questions here

702
00:28:41,640 --> 00:28:44,640
about what would be the precise scope of

703
00:28:44,640 --> 00:28:46,500
such a draft so on the one hand it could

704
00:28:46,500 --> 00:28:48,600
just be like guidelines like this is

705
00:28:48,600 --> 00:28:51,600
this is uh you know uh this these are

706
00:28:51,600 --> 00:28:54,480
different DP mechanisms that might apply

707
00:28:54,480 --> 00:28:56,700
to a given protocol

708
00:28:56,700 --> 00:28:58,919
um one thing that would be really useful

709
00:28:58,919 --> 00:29:00,900
something that the ITF is quite good at

710
00:29:00,900 --> 00:29:03,960
is you know spelling out algorithms for

711
00:29:03,960 --> 00:29:06,779
sampling noise from a given distribution

712
00:29:06,779 --> 00:29:08,940
basically take debut random and map it

713
00:29:08,940 --> 00:29:12,480
to uh you know a random point in a

714
00:29:12,480 --> 00:29:15,120
LaPlace distribution or whatever

715
00:29:15,120 --> 00:29:17,100
um and then you know there's like you

716
00:29:17,100 --> 00:29:19,740
know like guidelines for enforcing uh

717
00:29:19,740 --> 00:29:21,360
privacy budgets I mean as a

718
00:29:21,360 --> 00:29:24,120
cryptographer in my analogy is uh like

719
00:29:24,120 --> 00:29:26,279
something like safety margins for an

720
00:29:26,279 --> 00:29:28,919
aead scheme encryption scheme uh is

721
00:29:28,919 --> 00:29:30,899
there an analogous kind of set of

722
00:29:30,899 --> 00:29:32,460
guidelines we can develop for

723
00:29:32,460 --> 00:29:34,799
differential privacy

724
00:29:34,799 --> 00:29:36,659
um and then another idea is you know

725
00:29:36,659 --> 00:29:38,399
like something we can do is spell up

726
00:29:38,399 --> 00:29:40,080
concrete mechanisms

727
00:29:40,080 --> 00:29:42,360
um there are lots there are like you

728
00:29:42,360 --> 00:29:44,039
know lots of Prior work on this that

729
00:29:44,039 --> 00:29:47,100
that that uh apply more or less directly

730
00:29:47,100 --> 00:29:49,679
to protocols that we have already

731
00:29:49,679 --> 00:29:51,840
um so yeah I think there's a lot of

732
00:29:51,840 --> 00:29:54,120
interesting stuff we can do here I'm

733
00:29:54,120 --> 00:29:56,399
kind of just throwing out ideas

734
00:29:56,399 --> 00:29:58,320
um I would love if someone in the room

735
00:29:58,320 --> 00:30:01,260
is who has some expertise in

736
00:30:01,260 --> 00:30:03,659
differential privacy uh had a strong

737
00:30:03,659 --> 00:30:06,659
opinion about uh what we should do here

738
00:30:06,659 --> 00:30:09,779
uh and with that um we have uh five

739
00:30:09,779 --> 00:30:12,440
minutes for questions

740
00:30:15,720 --> 00:30:17,760
all right Erica squirrel out um as I say

741
00:30:17,760 --> 00:30:19,980
more a comment than a question

742
00:30:19,980 --> 00:30:22,740
um we should do nothing here

743
00:30:22,740 --> 00:30:24,659
um we have like already a very

744
00:30:24,659 --> 00:30:25,860
complicated specification that we're

745
00:30:25,860 --> 00:30:27,120
trying to get out the door

746
00:30:27,120 --> 00:30:28,559
these are on these are they're

747
00:30:28,559 --> 00:30:30,299
independent pieces of work and we should

748
00:30:30,299 --> 00:30:31,620
not do this one until the first one is

749
00:30:31,620 --> 00:30:32,880
done

750
00:30:32,880 --> 00:30:34,679
um is consuming the exact same excuse me

751
00:30:34,679 --> 00:30:37,200
the exact same resources so like I think

752
00:30:37,200 --> 00:30:38,399
it's I I don't mean to give the

753
00:30:38,399 --> 00:30:39,179
impression I don't think it's important

754
00:30:39,179 --> 00:30:41,520
I think we should sequence it next but I

755
00:30:41,520 --> 00:30:42,840
don't think I think that by trying to do

756
00:30:42,840 --> 00:30:44,460
them both like the only thing we should

757
00:30:44,460 --> 00:30:47,580
be doing right now is making appropriate

758
00:30:47,580 --> 00:30:49,980
changes to adapt to make this possible

759
00:30:49,980 --> 00:30:51,480
if necessary and if there are none we

760
00:30:51,480 --> 00:30:53,159
should do nothing

761
00:30:53,159 --> 00:30:54,720
um I I say and again I don't mean to

762
00:30:54,720 --> 00:30:55,799
make light of this problem I think it's

763
00:30:55,799 --> 00:30:56,940
a very real problem but I think it's

764
00:30:56,940 --> 00:30:58,200
also a problem that is not like very

765
00:30:58,200 --> 00:31:00,179
straightforward and so I'd like to like

766
00:31:00,179 --> 00:31:03,440
keep like got my eye on the ball

767
00:31:04,080 --> 00:31:05,880
thanks Ecker

768
00:31:05,880 --> 00:31:09,299
uh Jonathan Holdens uh this this is more

769
00:31:09,299 --> 00:31:10,919
I guess related to the first

770
00:31:10,919 --> 00:31:13,020
presentation in a way

771
00:31:13,020 --> 00:31:16,020
um when you have different query types

772
00:31:16,020 --> 00:31:18,480
uh does that break or make differential

773
00:31:18,480 --> 00:31:22,320
privacy harder or worse because there's

774
00:31:22,320 --> 00:31:25,080
different groupings of queries that are

775
00:31:25,080 --> 00:31:27,360
now possible and you know how to

776
00:31:27,360 --> 00:31:29,340
consider the interaction between them on

777
00:31:29,340 --> 00:31:32,059
how it leaks information

778
00:31:32,059 --> 00:31:34,919
yeah so um one thing that we're trying

779
00:31:34,919 --> 00:31:36,899
to guarantee in the spec is that

780
00:31:36,899 --> 00:31:39,899
regardless of the query type you you

781
00:31:39,899 --> 00:31:42,179
have a like a proper partitioning of the

782
00:31:42,179 --> 00:31:44,399
reports so no report is going to be used

783
00:31:44,399 --> 00:31:45,840
in more than one batch that's something

784
00:31:45,840 --> 00:31:48,419
we try to guarantee

785
00:31:48,419 --> 00:31:50,100
um however like to your point though

786
00:31:50,100 --> 00:31:52,380
there are considerations for

787
00:31:52,380 --> 00:31:54,960
differential privacy the main one it

788
00:31:54,960 --> 00:31:56,100
would be

789
00:31:56,100 --> 00:31:59,279
um the size of the batch so

790
00:31:59,279 --> 00:32:01,620
um my understanding and this is like I

791
00:32:01,620 --> 00:32:03,179
you know I hope I hope I see Charlie

792
00:32:03,179 --> 00:32:04,860
Harrison in the room and I'm calling him

793
00:32:04,860 --> 00:32:07,620
out to to correct me here uh my

794
00:32:07,620 --> 00:32:10,320
understanding is that we have to

795
00:32:10,320 --> 00:32:10,980
um

796
00:32:10,980 --> 00:32:13,500
use like basically the the the the the

797
00:32:13,500 --> 00:32:17,039
the batch size that we're aiming for to

798
00:32:17,039 --> 00:32:19,799
tune our differential privacy parameters

799
00:32:19,799 --> 00:32:21,539
um so for fixed size for example we

800
00:32:21,539 --> 00:32:23,520
enforce a maximum batch size and that's

801
00:32:23,520 --> 00:32:26,700
like one of the considerations there

802
00:32:26,700 --> 00:32:29,820
yeah I I can just quickly speak to that

803
00:32:29,820 --> 00:32:32,399
like the batch size I think the batch

804
00:32:32,399 --> 00:32:35,159
size is important for some of the

805
00:32:35,159 --> 00:32:37,020
deployments that we're considering for

806
00:32:37,020 --> 00:32:39,960
differential privacy like namely the

807
00:32:39,960 --> 00:32:44,000
deployments that are similar to the uh

808
00:32:44,000 --> 00:32:46,500
uh covid

809
00:32:46,500 --> 00:32:49,919
um uh privacy preserving analytics like

810
00:32:49,919 --> 00:32:52,260
that info work where noise is added on

811
00:32:52,260 --> 00:32:55,140
the client in that case the total amount

812
00:32:55,140 --> 00:32:57,299
of privacy is based on how many clients

813
00:32:57,299 --> 00:32:58,860
you're kind of adding together because

814
00:32:58,860 --> 00:33:00,899
you're summing a lot of noise from a lot

815
00:33:00,899 --> 00:33:04,020
of clients in the central case where the

816
00:33:04,020 --> 00:33:05,760
like aggregators themselves are adding

817
00:33:05,760 --> 00:33:08,640
noise the batch size is not related to

818
00:33:08,640 --> 00:33:10,740
the privacy of the output it's only

819
00:33:10,740 --> 00:33:12,419
related to the kind of like relative

820
00:33:12,419 --> 00:33:15,620
area that you're going to get

821
00:33:15,980 --> 00:33:19,440
so if uh maybe this is just completely

822
00:33:19,440 --> 00:33:23,760
mistaken if a record is queried

823
00:33:23,760 --> 00:33:25,620
let's say I do a query that says I want

824
00:33:25,620 --> 00:33:28,019
to know the average of all things every

825
00:33:28,019 --> 00:33:29,220
single record I will know what the

826
00:33:29,220 --> 00:33:30,299
average is

827
00:33:30,299 --> 00:33:32,640
does that mean I now can no longer do

828
00:33:32,640 --> 00:33:34,380
any queries because they can't appear in

829
00:33:34,380 --> 00:33:36,980
two queries

830
00:33:41,519 --> 00:33:44,539
I think that question is

831
00:33:46,799 --> 00:33:49,799
Chris you're on mute

832
00:33:49,799 --> 00:33:52,740
you're still on mute

833
00:33:52,740 --> 00:33:55,880
can you repeat the question

834
00:33:56,519 --> 00:34:00,120
if if I if I make a query that says

835
00:34:00,120 --> 00:34:03,299
uh give me the average of all things I

836
00:34:03,299 --> 00:34:05,220
want to know every single record what's

837
00:34:05,220 --> 00:34:06,659
the average

838
00:34:06,659 --> 00:34:08,280
does that mean I can no longer do any

839
00:34:08,280 --> 00:34:09,480
more queries because they've all

840
00:34:09,480 --> 00:34:13,099
appeared in one report what one

841
00:34:13,099 --> 00:34:16,320
at some point you have to start you have

842
00:34:16,320 --> 00:34:18,418
to stop like you don't get to do like

843
00:34:18,418 --> 00:34:20,339
rolling a rolling average like give me

844
00:34:20,339 --> 00:34:22,859
the average of everything so far uh at

845
00:34:22,859 --> 00:34:24,599
least in depth what we're requiring you

846
00:34:24,599 --> 00:34:26,520
to do is at some point you have to say

847
00:34:26,520 --> 00:34:29,599
this is the end of my batch

848
00:34:30,000 --> 00:34:32,280
um so yeah the intent is that batches

849
00:34:32,280 --> 00:34:34,800
never overlap

850
00:34:34,800 --> 00:34:36,000
right I mean this goes back to the

851
00:34:36,000 --> 00:34:37,980
discussion we had sir Erica discussion

852
00:34:37,980 --> 00:34:40,080
we had last time about drill down right

853
00:34:40,080 --> 00:34:42,119
and

854
00:34:42,119 --> 00:34:43,440
um and so once again we're going to

855
00:34:43,440 --> 00:34:44,820
address that problem at some point um

856
00:34:44,820 --> 00:34:46,139
though I understand we've said not

857
00:34:46,139 --> 00:34:48,780
address it like at this exact moment

858
00:34:48,780 --> 00:34:50,040
and that's another reason why the DP

859
00:34:50,040 --> 00:34:52,619
problem would be so difficult

860
00:34:52,619 --> 00:34:55,220
I agree

861
00:34:57,839 --> 00:34:59,580
uh I think that's it for the DAP

862
00:34:59,580 --> 00:35:02,460
editor's time thanks everybody

863
00:35:02,460 --> 00:35:05,400
great so uh

864
00:35:05,400 --> 00:35:09,000
I see Eric back in the queue

865
00:35:09,000 --> 00:35:12,320
um but Chris and Sean this is your

866
00:35:12,320 --> 00:35:15,480
uh your time for in-band task

867
00:35:15,480 --> 00:35:18,079
provisioning

868
00:35:18,960 --> 00:35:21,980
Sean I saw you

869
00:35:24,839 --> 00:35:29,900
yeah I'll just ask to share slides

870
00:35:45,900 --> 00:35:48,240
um sorry can anyone remind me how do I

871
00:35:48,240 --> 00:35:51,660
share slides obviously Chris is passing

872
00:35:51,660 --> 00:35:53,880
me control for sharing slides but I

873
00:35:53,880 --> 00:35:57,440
don't know where else do I click

874
00:36:04,320 --> 00:36:06,420
to try one more time I'm going to reboot

875
00:36:06,420 --> 00:36:09,680
your slides try once more

876
00:36:17,460 --> 00:36:19,640
foreign

877
00:36:30,720 --> 00:36:31,920
there you go

878
00:36:31,920 --> 00:36:32,820
um

879
00:36:32,820 --> 00:36:37,160
let me turn on my camera as well

880
00:36:37,740 --> 00:36:39,060
hi everyone

881
00:36:39,060 --> 00:36:41,099
um next I'll talk about the inbound task

882
00:36:41,099 --> 00:36:44,099
provision right now it's a individual

883
00:36:44,099 --> 00:36:46,260
individual draft for extension to the

884
00:36:46,260 --> 00:36:47,760
core depth protocol

885
00:36:47,760 --> 00:36:50,220
uh first of all let's talk about the

886
00:36:50,220 --> 00:36:53,400
motivations so today the dev protocol

887
00:36:53,400 --> 00:36:55,500
doesn't actually Define how a task

888
00:36:55,500 --> 00:36:58,680
should be provisioned or configured it

889
00:36:58,680 --> 00:37:00,839
basically mentions it will be done out

890
00:37:00,839 --> 00:37:02,280
of band

891
00:37:02,280 --> 00:37:05,099
um we delete our helpers agree that a

892
00:37:05,099 --> 00:37:07,380
particular mechanism to share the

893
00:37:07,380 --> 00:37:09,420
parameters for configuration as an

894
00:37:09,420 --> 00:37:13,260
provision tasks securely

895
00:37:13,260 --> 00:37:17,280
but here we want to introduce a new

896
00:37:17,280 --> 00:37:20,579
mechanism for provisioning a task purely

897
00:37:20,579 --> 00:37:23,160
through the existing flows especially

898
00:37:23,160 --> 00:37:25,320
the upload flow and the aggregator share

899
00:37:25,320 --> 00:37:29,359
flow and use the extension mechanism

900
00:37:29,359 --> 00:37:32,460
without introducing any extra flows and

901
00:37:32,460 --> 00:37:34,859
hopefully this will be useful for many

902
00:37:34,859 --> 00:37:38,280
deploy deployments and many return

903
00:37:38,280 --> 00:37:39,619
helper

904
00:37:39,619 --> 00:37:42,660
diplomas can just provision tasks in the

905
00:37:42,660 --> 00:37:44,940
same way without defining any extra

906
00:37:44,940 --> 00:37:46,760
candidates

907
00:37:46,760 --> 00:37:48,720
now the

908
00:37:48,720 --> 00:37:51,180
basic protocol architecture here we

909
00:37:51,180 --> 00:37:53,900
introduce a concept called a task author

910
00:37:53,900 --> 00:37:57,380
author is basically a logical

911
00:37:57,380 --> 00:38:00,839
participant that it defines the task it

912
00:38:00,839 --> 00:38:02,880
defines what configurations goes into a

913
00:38:02,880 --> 00:38:05,280
task and we assume it has ability to

914
00:38:05,280 --> 00:38:07,859
send the task configuration objects

915
00:38:07,859 --> 00:38:09,720
which I'll show later what it contains

916
00:38:09,720 --> 00:38:11,640
to the clients

917
00:38:11,640 --> 00:38:15,359
now in reality also could be implemented

918
00:38:15,359 --> 00:38:19,020
by the leader or The Collector so we

919
00:38:19,020 --> 00:38:21,720
don't have any more trust to task also

920
00:38:21,720 --> 00:38:25,380
then we have on the aggregators

921
00:38:25,380 --> 00:38:27,599
so the basic flow is the following the

922
00:38:27,599 --> 00:38:30,720
author will set the task config to the

923
00:38:30,720 --> 00:38:33,000
clients the clients will verify the task

924
00:38:33,000 --> 00:38:34,220
config

925
00:38:34,220 --> 00:38:37,380
make sure it makes sense and then when

926
00:38:37,380 --> 00:38:40,260
it decides to opt into a task it will

927
00:38:40,260 --> 00:38:43,619
send the report as usual but contains

928
00:38:43,619 --> 00:38:46,200
task config as part of the extension

929
00:38:46,200 --> 00:38:50,640
data and this report will be received by

930
00:38:50,640 --> 00:38:53,160
the leader which is going to do its own

931
00:38:53,160 --> 00:38:56,040
uh procedures for checking the task

932
00:38:56,040 --> 00:38:58,859
configs and verifying tasks makes sense

933
00:38:58,859 --> 00:39:01,200
and then share the exact same task

934
00:39:01,200 --> 00:39:04,079
config with a helper using the report

935
00:39:04,079 --> 00:39:05,839
share

936
00:39:05,839 --> 00:39:09,000
struct as defined today in in Dev core

937
00:39:09,000 --> 00:39:12,000
protocol so the key Point here is there

938
00:39:12,000 --> 00:39:15,119
is no task provisioned in advance

939
00:39:15,119 --> 00:39:18,540
until the very first report is received

940
00:39:18,540 --> 00:39:20,160
from the reader

941
00:39:20,160 --> 00:39:23,160
and also there's no need to Define any

942
00:39:23,160 --> 00:39:25,920
Auto Body mechanism between leaders and

943
00:39:25,920 --> 00:39:28,500
helpers for Tasker configuration purpose

944
00:39:28,500 --> 00:39:31,740
now if the aggregator does not support

945
00:39:31,740 --> 00:39:36,839
task proof extension in today's draft we

946
00:39:36,839 --> 00:39:39,780
will simply ignore the task config and

947
00:39:39,780 --> 00:39:42,420
depress it as usual as in the task has

948
00:39:42,420 --> 00:39:45,300
been configured in other mechanisms

949
00:39:45,300 --> 00:39:47,940
so the task config object itself is

950
00:39:47,940 --> 00:39:50,579
basically the task specific parameters

951
00:39:50,579 --> 00:39:52,579
described in the corporate call

952
00:39:52,579 --> 00:39:55,400
here we basically group them into

953
00:39:55,400 --> 00:39:58,040
different structs based on their purpose

954
00:39:58,040 --> 00:40:01,920
there is a query config which includes

955
00:40:01,920 --> 00:40:05,099
things like minimum batch size maximum

956
00:40:05,099 --> 00:40:07,079
batch size for example for the fixed

957
00:40:07,079 --> 00:40:11,099
size query and the redef config contains

958
00:40:11,099 --> 00:40:13,920
over the specific configurations like

959
00:40:13,920 --> 00:40:17,040
the type of the redef and the buckets in

960
00:40:17,040 --> 00:40:20,339
Need for for the normal preo3 histogram

961
00:40:20,339 --> 00:40:23,880
and here we because the tasks are the

962
00:40:23,880 --> 00:40:27,599
task is created on the fly so um it's

963
00:40:27,599 --> 00:40:29,400
necessary to have a mechanism for all

964
00:40:29,400 --> 00:40:32,640
parties to derive the same task ID based

965
00:40:32,640 --> 00:40:34,980
on the same task configuration so a task

966
00:40:34,980 --> 00:40:38,640
ID here is simply created by a shadow 56

967
00:40:38,640 --> 00:40:41,400
hash on the serialized task config

968
00:40:41,400 --> 00:40:43,820
object

969
00:40:44,060 --> 00:40:46,680
just go into some details of the client

970
00:40:46,680 --> 00:40:49,800
side Clan simply receive the task config

971
00:40:49,800 --> 00:40:52,619
sets existing type to task proof and

972
00:40:52,619 --> 00:40:56,099
then encode the task config in part of

973
00:40:56,099 --> 00:40:59,400
extension data which itself is part of

974
00:40:59,400 --> 00:41:01,740
report metadata

975
00:41:01,740 --> 00:41:05,099
and all the aggregator side you need an

976
00:41:05,099 --> 00:41:08,700
helper they both will check the task

977
00:41:08,700 --> 00:41:11,520
configs received and run the same task

978
00:41:11,520 --> 00:41:13,859
ID generation mechanism and make sure

979
00:41:13,859 --> 00:41:16,680
the task ID costing measures the

980
00:41:16,680 --> 00:41:19,140
generative task ID

981
00:41:19,140 --> 00:41:19,859
um

982
00:41:19,859 --> 00:41:24,780
and here often basically means the

983
00:41:24,780 --> 00:41:27,680
the provision task is either

984
00:41:27,680 --> 00:41:30,420
unrecognized which means the leader or

985
00:41:30,420 --> 00:41:33,599
helper needs to provision this task or

986
00:41:33,599 --> 00:41:36,440
the config received matches are already

987
00:41:36,440 --> 00:41:39,480
configured task

988
00:41:39,480 --> 00:41:41,220
uh we haven't mentioned about the

989
00:41:41,220 --> 00:41:43,140
collector side but hopefully the

990
00:41:43,140 --> 00:41:45,660
clutches are will be very simple it is

991
00:41:45,660 --> 00:41:48,240
very much oblivious to the use of task

992
00:41:48,240 --> 00:41:49,619
proof

993
00:41:49,619 --> 00:41:52,260
um it should have ability to receive

994
00:41:52,260 --> 00:41:54,720
task config from task ulcer but after

995
00:41:54,720 --> 00:41:56,579
that it simply sends the collected

996
00:41:56,579 --> 00:41:59,940
request uh including a task ID you know

997
00:41:59,940 --> 00:42:02,760
generated from the same task ID hashing

998
00:42:02,760 --> 00:42:04,740
mechanism

999
00:42:04,740 --> 00:42:08,460
and here are some links for the draft

1000
00:42:08,460 --> 00:42:10,380
and the GitHub repo

1001
00:42:10,380 --> 00:42:12,359
to uh there is one reference

1002
00:42:12,359 --> 00:42:15,240
implementation in Daphne which is still

1003
00:42:15,240 --> 00:42:18,119
in progress so the main purpose of this

1004
00:42:18,119 --> 00:42:21,060
presentation is to show everybody that

1005
00:42:21,060 --> 00:42:23,640
task proof is useful for many

1006
00:42:23,640 --> 00:42:26,099
deployments it may not be useful for all

1007
00:42:26,099 --> 00:42:29,099
deployments but we want to gather more

1008
00:42:29,099 --> 00:42:32,760
feedbacks and see whether the group

1009
00:42:32,760 --> 00:42:35,520
wants to adapt it as a working group

1010
00:42:35,520 --> 00:42:36,720
extension

1011
00:42:36,720 --> 00:42:38,640
uh

1012
00:42:38,640 --> 00:42:41,520
that's it so I'll use the many formats

1013
00:42:41,520 --> 00:42:43,680
for questions please

1014
00:42:43,680 --> 00:42:45,250
here for squirrel up

1015
00:42:45,250 --> 00:42:45,720
[Music]

1016
00:42:45,720 --> 00:42:46,320
um

1017
00:42:46,320 --> 00:42:47,700
I guess I'm not really persuaded by the

1018
00:42:47,700 --> 00:42:49,320
problem state

1019
00:42:49,320 --> 00:42:50,640
um I certainly understand why you might

1020
00:42:50,640 --> 00:42:51,900
want to have

1021
00:42:51,900 --> 00:42:54,839
um uh Dynamic configuration but I don't

1022
00:42:54,839 --> 00:42:55,980
understand why telling for the client is

1023
00:42:55,980 --> 00:42:57,599
a good idea it seems to me that like

1024
00:42:57,599 --> 00:43:00,180
basically that the there's a

1025
00:43:00,180 --> 00:43:01,200
relationship between between the clock

1026
00:43:01,200 --> 00:43:03,859
between the between the The

1027
00:43:03,859 --> 00:43:06,480
Collector and the leader and Helper and

1028
00:43:06,480 --> 00:43:07,500
there should be the collector on the

1029
00:43:07,500 --> 00:43:09,720
client and like that's the appropriate

1030
00:43:09,720 --> 00:43:10,560
place that this information to be

1031
00:43:10,560 --> 00:43:12,359
carried and I don't understand why

1032
00:43:12,359 --> 00:43:13,380
you're selling for the client but it

1033
00:43:13,380 --> 00:43:16,020
seems like like not not the design not

1034
00:43:16,020 --> 00:43:18,560
an actual design

1035
00:43:18,599 --> 00:43:21,420
okay so if I understand correctly you're

1036
00:43:21,420 --> 00:43:23,220
asking why we are sending a toss config

1037
00:43:23,220 --> 00:43:24,540
to the client

1038
00:43:24,540 --> 00:43:26,339
no I understand why the client needs the

1039
00:43:26,339 --> 00:43:27,839
test config why are you tunneling it to

1040
00:43:27,839 --> 00:43:28,980
the client

1041
00:43:28,980 --> 00:43:30,540
that is why don't you provide the task

1042
00:43:30,540 --> 00:43:32,819
config directly from The Collector to

1043
00:43:32,819 --> 00:43:35,660
the leader and helper

1044
00:43:36,000 --> 00:43:37,260
um that's basically it was a core

1045
00:43:37,260 --> 00:43:39,420
protocol is suggesting but I think the

1046
00:43:39,420 --> 00:43:41,520
problem is there isn't a specified

1047
00:43:41,520 --> 00:43:44,119
mechanic for doing that so if you have a

1048
00:43:44,119 --> 00:43:46,500
leader helper if your organization

1049
00:43:46,500 --> 00:43:48,300
manages many of these are Health repairs

1050
00:43:48,300 --> 00:43:50,280
then you need to make sure either you

1051
00:43:50,280 --> 00:43:52,079
have a unified mechanism for all these

1052
00:43:52,079 --> 00:43:54,720
other organizations that working with

1053
00:43:54,720 --> 00:43:57,000
you as a aggregator or you have to

1054
00:43:57,000 --> 00:43:59,760
maintain basically different ways for uh

1055
00:43:59,760 --> 00:44:02,400
Distributing cost configs to to all

1056
00:44:02,400 --> 00:44:03,780
these other projects you

1057
00:44:03,780 --> 00:44:05,460
misunderstanding me I'm not opposing

1058
00:44:05,460 --> 00:44:07,859
having a protocol for for provisioning

1059
00:44:07,859 --> 00:44:09,960
the test config what I'm saying is that

1060
00:44:09,960 --> 00:44:11,700
protocol should be two separate

1061
00:44:11,700 --> 00:44:14,160
protocols one for the well really the

1062
00:44:14,160 --> 00:44:15,960
only protocols actually needed is the

1063
00:44:15,960 --> 00:44:17,700
one from The Collector to leader and

1064
00:44:17,700 --> 00:44:18,960
Helper and that should be standardized

1065
00:44:18,960 --> 00:44:20,520
and the client should not be part of the

1066
00:44:20,520 --> 00:44:22,640
picture

1067
00:44:23,579 --> 00:44:25,859
um you certainly could stand arise from

1068
00:44:25,859 --> 00:44:27,420
collectors or your helper but I think

1069
00:44:27,420 --> 00:44:29,400
there are extra benefits when it comes

1070
00:44:29,400 --> 00:44:31,619
from the client side so in this case the

1071
00:44:31,619 --> 00:44:34,680
client knows exactly uh how the task

1072
00:44:34,680 --> 00:44:38,339
will be created so the task the current

1073
00:44:38,339 --> 00:44:41,339
report will be aggregated in will have

1074
00:44:41,339 --> 00:44:43,500
exactly the same task config as the

1075
00:44:43,500 --> 00:44:46,200
client have seen it if you started out

1076
00:44:46,200 --> 00:44:48,000
just between collector I need a helper

1077
00:44:48,000 --> 00:44:49,980
so you're basically asking the client to

1078
00:44:49,980 --> 00:44:52,140
trust whatever the leader helper the

1079
00:44:52,140 --> 00:44:55,020
leader or uh or task author sending it

1080
00:44:55,020 --> 00:44:57,119
is exactly the same as the server side

1081
00:44:57,119 --> 00:45:00,619
used to provision the task

1082
00:45:02,460 --> 00:45:04,980
yeah are you talking about malice or

1083
00:45:04,980 --> 00:45:07,520
incompetence

1084
00:45:08,400 --> 00:45:09,960
um are you talking about malice or

1085
00:45:09,960 --> 00:45:12,300
incompetence but now let's learn

1086
00:45:12,300 --> 00:45:14,400
confidence by the by the by the malice

1087
00:45:14,400 --> 00:45:16,740
or incompetence

1088
00:45:16,740 --> 00:45:18,359
oh minus yeah

1089
00:45:18,359 --> 00:45:19,140
um

1090
00:45:19,140 --> 00:45:21,240
no I'm talking about a cough this

1091
00:45:21,240 --> 00:45:23,940
okay but like if you want that this is

1092
00:45:23,940 --> 00:45:25,500
your this is your problem then we should

1093
00:45:25,500 --> 00:45:27,300
just have checksums on all the configs

1094
00:45:27,300 --> 00:45:29,640
which we in fact discussed previously

1095
00:45:29,640 --> 00:45:31,740
um so but like here's the thing the

1096
00:45:31,740 --> 00:45:34,079
client cannot implement this cannot the

1097
00:45:34,079 --> 00:45:35,339
task config is not even remotely

1098
00:45:35,339 --> 00:45:36,540
sufficient for the client to implement

1099
00:45:36,540 --> 00:45:37,859
this because a client needs

1100
00:45:37,859 --> 00:45:40,500
instrumentation in the client code to

1101
00:45:40,500 --> 00:45:41,819
collect the data that goes the testing

1102
00:45:41,819 --> 00:45:44,520
thing so like the client needs all kinds

1103
00:45:44,520 --> 00:45:46,859
of garbage and not just the test config

1104
00:45:46,859 --> 00:45:51,300
and so like that and that needs to be

1105
00:45:51,300 --> 00:45:52,619
delivered by some other channel the

1106
00:45:52,619 --> 00:45:55,140
client has all that stuff so like yeah

1107
00:45:55,140 --> 00:45:57,540
like again like again I'm on board with

1108
00:45:57,540 --> 00:45:59,040
Dynamic configuration but this is like

1109
00:45:59,040 --> 00:46:00,960
not the right approach

1110
00:46:00,960 --> 00:46:02,099
I'm sorry Chris did you want to respond

1111
00:46:02,099 --> 00:46:06,079
to me or um or uh

1112
00:46:06,300 --> 00:46:09,260
it's the other garbage

1113
00:46:09,540 --> 00:46:12,240
what the like probes in the code that

1114
00:46:12,240 --> 00:46:14,220
like what the data

1115
00:46:14,220 --> 00:46:17,579
oh yeah sure yeah actual software I mean

1116
00:46:17,579 --> 00:46:19,140
the thing I understand is like that that

1117
00:46:19,140 --> 00:46:20,099
like that

1118
00:46:20,099 --> 00:46:21,720
and Dan isn't like that this is the

1119
00:46:21,720 --> 00:46:22,740
reason we didn't do this in the first

1120
00:46:22,740 --> 00:46:24,060
place

1121
00:46:24,060 --> 00:46:26,099
um was because in order to make this

1122
00:46:26,099 --> 00:46:27,540
work you've got to like modify the

1123
00:46:27,540 --> 00:46:28,680
client code

1124
00:46:28,680 --> 00:46:30,540
and so like I mean even remotely

1125
00:46:30,540 --> 00:46:31,500
provisioning the client is almost

1126
00:46:31,500 --> 00:46:32,760
impossible because you got a modify the

1127
00:46:32,760 --> 00:46:34,200
client code and like the number of

1128
00:46:34,200 --> 00:46:35,400
clients that can be really Vision with

1129
00:46:35,400 --> 00:46:37,020
like new code with lack of code update

1130
00:46:37,020 --> 00:46:39,900
is very small right and so like like

1131
00:46:39,900 --> 00:46:43,339
that's that's the machine that's gone

1132
00:46:48,300 --> 00:46:50,460
Nick

1133
00:46:50,460 --> 00:46:53,300
hmm

1134
00:46:56,359 --> 00:46:59,760
I will be brief I I think

1135
00:46:59,760 --> 00:47:01,619
my question was uh I could use the

1136
00:47:01,619 --> 00:47:03,060
benefits from doing

1137
00:47:03,060 --> 00:47:05,940
um in band uh provisioning and the draft

1138
00:47:05,940 --> 00:47:07,800
seems to suggest that the client will

1139
00:47:07,800 --> 00:47:09,180
decide based on some of that

1140
00:47:09,180 --> 00:47:11,579
configuration whether this seems like an

1141
00:47:11,579 --> 00:47:13,800
acceptable task or not

1142
00:47:13,800 --> 00:47:16,440
um but if we are going to do that I feel

1143
00:47:16,440 --> 00:47:17,520
like there would need to be more

1144
00:47:17,520 --> 00:47:20,940
richness in that configuration for the

1145
00:47:20,940 --> 00:47:22,500
client to make a good decision about

1146
00:47:22,500 --> 00:47:26,640
what's acceptable or or not that that

1147
00:47:26,640 --> 00:47:28,440
seems like a set of privacy type

1148
00:47:28,440 --> 00:47:30,359
position and that's going to need a lot

1149
00:47:30,359 --> 00:47:32,040
more richness than

1150
00:47:32,040 --> 00:47:34,800
just batch size

1151
00:47:34,800 --> 00:47:37,619
yeah so there are some texts we think

1152
00:47:37,619 --> 00:47:39,060
the client could do for example we

1153
00:47:39,060 --> 00:47:41,880
introduce the task expiration from a

1154
00:47:41,880 --> 00:47:45,180
photograph to in depth the client could

1155
00:47:45,180 --> 00:47:47,460
check whether the cost has expired and

1156
00:47:47,460 --> 00:47:50,819
is not worth participating anymore

1157
00:47:50,819 --> 00:47:51,599
um

1158
00:47:51,599 --> 00:47:53,880
there could be more advanced checks like

1159
00:47:53,880 --> 00:47:57,060
if we introduce DP whether we do that is

1160
00:47:57,060 --> 00:47:58,740
another question but if we do introduce

1161
00:47:58,740 --> 00:48:00,900
DPE we might not want to check out the

1162
00:48:00,900 --> 00:48:02,640
client side of whether the client is

1163
00:48:02,640 --> 00:48:05,280
willing to participate in a task with a

1164
00:48:05,280 --> 00:48:08,700
certain a certain DP guaranteeing

1165
00:48:08,700 --> 00:48:09,240
um

1166
00:48:09,240 --> 00:48:12,200
yeah

1167
00:48:18,839 --> 00:48:22,260
hi uh what I want to say is that I'm

1168
00:48:22,260 --> 00:48:25,140
speaking as a somebody who implemented a

1169
00:48:25,140 --> 00:48:28,140
client that reports metrics

1170
00:48:28,140 --> 00:48:32,760
uh I I appreciate ecker's point that uh

1171
00:48:32,760 --> 00:48:35,880
it takes code to implement new metrics

1172
00:48:35,880 --> 00:48:38,460
but there it does seem to me like there

1173
00:48:38,460 --> 00:48:40,500
is room here for essentially Dynamic

1174
00:48:40,500 --> 00:48:42,960
reconfiguration of how especially

1175
00:48:42,960 --> 00:48:46,200
numeric values are reported so if I

1176
00:48:46,200 --> 00:48:48,119
decide that I've been measuring the

1177
00:48:48,119 --> 00:48:51,000
average of some value but actually I

1178
00:48:51,000 --> 00:48:52,800
want to switch and start measuring the

1179
00:48:52,800 --> 00:48:54,540
histogram of that value do I have to

1180
00:48:54,540 --> 00:48:57,000
push out new code to all of my clients

1181
00:48:57,000 --> 00:48:59,640
uh you know do I have to reach all of my

1182
00:48:59,640 --> 00:49:03,079
clients through some sort of external

1183
00:49:03,079 --> 00:49:06,420
uh control system or can that actually

1184
00:49:06,420 --> 00:49:08,579
be done in band through depth that is

1185
00:49:08,579 --> 00:49:10,380
that that kind of narrow use case I

1186
00:49:10,380 --> 00:49:13,980
think there could be value here

1187
00:49:13,980 --> 00:49:15,839
yeah I think there are two different

1188
00:49:15,839 --> 00:49:18,119
things here this one it's a consort

1189
00:49:18,119 --> 00:49:20,940
implementation uh and the other is uh

1190
00:49:20,940 --> 00:49:23,400
the Tasker distribution I think in

1191
00:49:23,400 --> 00:49:25,920
today's step task distribution is not

1192
00:49:25,920 --> 00:49:28,619
defined it's very much uh deployment

1193
00:49:28,619 --> 00:49:31,740
specific or outside of that scope but

1194
00:49:31,740 --> 00:49:33,300
for the client side I think there are

1195
00:49:33,300 --> 00:49:36,540
many scopes for the client to do things

1196
00:49:36,540 --> 00:49:38,640
to make sure the the Privacy guarantees

1197
00:49:38,640 --> 00:49:40,800
and the transparency it provides for

1198
00:49:40,800 --> 00:49:43,619
example we would like clients to log all

1199
00:49:43,619 --> 00:49:46,140
the toxic conflicts it has received so

1200
00:49:46,140 --> 00:49:48,240
Cloud itself knows what kind of a task

1201
00:49:48,240 --> 00:49:51,500
it has participated in

1202
00:49:52,020 --> 00:49:53,940
so you know that's true yes the client

1203
00:49:53,940 --> 00:49:56,579
will have to do extra work to uh

1204
00:49:56,579 --> 00:49:58,740
Implement these but uh

1205
00:49:58,740 --> 00:50:00,240
if you're considering you're already

1206
00:50:00,240 --> 00:50:02,640
receiving touch config from the server

1207
00:50:02,640 --> 00:50:04,859
and you might also wants to log them

1208
00:50:04,859 --> 00:50:07,920
then just putting it into the metadata

1209
00:50:07,920 --> 00:50:10,560
and send it to the the server side I

1210
00:50:10,560 --> 00:50:12,680
don't think it's a massive leap from

1211
00:50:12,680 --> 00:50:16,578
what's already being done

1212
00:50:18,780 --> 00:50:21,240
sorry it's me again Chris unless are you

1213
00:50:21,240 --> 00:50:22,319
using the queue Chris or you're gonna

1214
00:50:22,319 --> 00:50:24,560
say something

1215
00:50:26,060 --> 00:50:30,000
I mean go ahead no

1216
00:50:30,000 --> 00:50:31,079
um I mean Ben I mean you're certainly

1217
00:50:31,079 --> 00:50:32,339
right like it might be nice to

1218
00:50:32,339 --> 00:50:33,720
reconfigure the client like without

1219
00:50:33,720 --> 00:50:36,119
having to load new code but like that's

1220
00:50:36,119 --> 00:50:37,440
not going to be done first of all like

1221
00:50:37,440 --> 00:50:38,579
this doesn't provide the channel for

1222
00:50:38,579 --> 00:50:39,660
doing that so you still need a channel

1223
00:50:39,660 --> 00:50:41,579
and that channel is like not going to be

1224
00:50:41,579 --> 00:50:42,900
done with like

1225
00:50:42,900 --> 00:50:44,280
like with high probability that's any

1226
00:50:44,280 --> 00:50:45,780
news has configs it's going to come with

1227
00:50:45,780 --> 00:50:47,160
like some whatever remote configuration

1228
00:50:47,160 --> 00:50:49,319
mechanism your your product already has

1229
00:50:49,319 --> 00:50:51,960
and like and that that's again a much

1230
00:50:51,960 --> 00:50:53,460
more Rich mechanism than this thing and

1231
00:50:53,460 --> 00:50:54,720
so like it just don't I just don't think

1232
00:50:54,720 --> 00:50:56,220
it's very possible like the task

1233
00:50:56,220 --> 00:50:57,300
configure not really enough like

1234
00:50:57,300 --> 00:50:59,400
reconfigure the client but again I guess

1235
00:50:59,400 --> 00:51:00,480
I just think that's like missing the

1236
00:51:00,480 --> 00:51:03,480
main point which is that like

1237
00:51:03,480 --> 00:51:05,160
that you're like not induced to a good

1238
00:51:05,160 --> 00:51:06,480
reason to Tunnel this data through the

1239
00:51:06,480 --> 00:51:09,059
client to the the different Helper and

1240
00:51:09,059 --> 00:51:10,380
it was much more sensible is to like

1241
00:51:10,380 --> 00:51:12,240
configure that directly downward from

1242
00:51:12,240 --> 00:51:14,160
and in both locations and then if you

1243
00:51:14,160 --> 00:51:15,839
want to compare them compare hashes but

1244
00:51:15,839 --> 00:51:17,460
like it's just I just I don't understand

1245
00:51:17,460 --> 00:51:19,859
why you like like like like I just think

1246
00:51:19,859 --> 00:51:23,420
the telling thing is to keep a half

1247
00:51:27,000 --> 00:51:30,720
so um I'll just quickly say so uh I want

1248
00:51:30,720 --> 00:51:32,579
to point out first of all that there is

1249
00:51:32,579 --> 00:51:35,460
much more to the thing that is actually

1250
00:51:35,460 --> 00:51:37,619
serialized in the extension than just

1251
00:51:37,619 --> 00:51:40,200
like say the Min batch size

1252
00:51:40,200 --> 00:51:41,760
um everything that controls the

1253
00:51:41,760 --> 00:51:44,040
aggregator's behavior

1254
00:51:44,040 --> 00:51:47,579
um at least uh like in the context of

1255
00:51:47,579 --> 00:51:50,280
like the interoperable protocol

1256
00:51:50,280 --> 00:51:52,260
um is is specified in there

1257
00:51:52,260 --> 00:51:54,720
um so it's important you know for for

1258
00:51:54,720 --> 00:51:56,640
many reasons for everyone to make a

1259
00:51:56,640 --> 00:51:58,680
decision as to whether to opt into the

1260
00:51:58,680 --> 00:52:00,599
task so in particular like you know the

1261
00:52:00,599 --> 00:52:02,640
the the the vdef that you're going to

1262
00:52:02,640 --> 00:52:05,160
use like preo three sum or histogram Etc

1263
00:52:05,160 --> 00:52:07,500
is going to be it's going to be part of

1264
00:52:07,500 --> 00:52:09,420
that configuration and the second thing

1265
00:52:09,420 --> 00:52:12,059
I just like taking a step back

1266
00:52:12,059 --> 00:52:15,420
um we don't ex we're not asking for an

1267
00:52:15,420 --> 00:52:18,240
architecture change to DAP

1268
00:52:18,240 --> 00:52:20,280
um the question here is really like is

1269
00:52:20,280 --> 00:52:23,940
this the scope of a protocol extension

1270
00:52:23,940 --> 00:52:27,480
um and uh like if is this the sort of

1271
00:52:27,480 --> 00:52:29,160
thing is this the sort of like Behavior

1272
00:52:29,160 --> 00:52:31,740
change that uh folks think is is is

1273
00:52:31,740 --> 00:52:33,480
useful to make

1274
00:52:33,480 --> 00:52:35,040
um okay that's it thanks

1275
00:52:35,040 --> 00:52:36,599
yeah I think we're gonna leave it there

1276
00:52:36,599 --> 00:52:39,839
and move on to Star Siobhan Europe

1277
00:52:39,839 --> 00:52:42,180
yeah um should I start

1278
00:52:42,180 --> 00:52:44,400
I think I can control my slides using my

1279
00:52:44,400 --> 00:52:46,440
phone yeah but Al

1280
00:52:46,440 --> 00:52:48,300
um Siobhan here um I'll be talking about

1281
00:52:48,300 --> 00:52:50,520
star which is distributed secret sharing

1282
00:52:50,520 --> 00:52:51,599
for

1283
00:52:51,599 --> 00:52:54,480
um threshold aggregation reporting

1284
00:52:54,480 --> 00:52:57,480
yeah so the main idea is that um we're

1285
00:52:57,480 --> 00:53:00,780
getting K anonymity for for clients um

1286
00:53:00,780 --> 00:53:02,160
and they're reporting measurements to an

1287
00:53:02,160 --> 00:53:04,559
untrusted server

1288
00:53:04,559 --> 00:53:06,000
um the goals are it should be cheap fast

1289
00:53:06,000 --> 00:53:09,119
simple and obviously private um that's

1290
00:53:09,119 --> 00:53:12,079
what we're doing over here

1291
00:53:12,720 --> 00:53:14,880
um just a very quick I guess overview

1292
00:53:14,880 --> 00:53:17,940
similar to what I uh did last time is

1293
00:53:17,940 --> 00:53:19,440
the idea is that the client wants to

1294
00:53:19,440 --> 00:53:22,200
send a Telemetry value to the server but

1295
00:53:22,200 --> 00:53:24,059
only wants the server to see this if

1296
00:53:24,059 --> 00:53:26,160
there are at least K other submissions

1297
00:53:26,160 --> 00:53:28,740
of the same value by other clients so as

1298
00:53:28,740 --> 00:53:30,960
an example like a Json you know blob of

1299
00:53:30,960 --> 00:53:32,880
like City Vancouver you can imagine the

1300
00:53:32,880 --> 00:53:34,079
client might want to send something like

1301
00:53:34,079 --> 00:53:36,300
this to the server so the client

1302
00:53:36,300 --> 00:53:38,579
generates a key by

1303
00:53:38,579 --> 00:53:41,579
um a deterministic output of um like

1304
00:53:41,579 --> 00:53:43,500
hashing it's like the main measurement

1305
00:53:43,500 --> 00:53:46,140
that it has and then it encrypts that

1306
00:53:46,140 --> 00:53:48,420
using the same key

1307
00:53:48,420 --> 00:53:52,140
um so so if multiple clients have the

1308
00:53:52,140 --> 00:53:54,240
same value same measurement then they

1309
00:53:54,240 --> 00:53:56,099
will get the same key uh and then they

1310
00:53:56,099 --> 00:53:57,780
all generate the secret share of that

1311
00:53:57,780 --> 00:54:00,240
key and they send the server the

1312
00:54:00,240 --> 00:54:02,160
encrypted message and the secret share

1313
00:54:02,160 --> 00:54:04,740
of the key and on the other side if and

1314
00:54:04,740 --> 00:54:06,960
only if the server gets care shares it

1315
00:54:06,960 --> 00:54:08,400
can recover the original key and then

1316
00:54:08,400 --> 00:54:10,339
you can decrypt the encrypted message

1317
00:54:10,339 --> 00:54:13,319
this is not a new idea this is

1318
00:54:13,319 --> 00:54:15,900
um but we are basically using it for

1319
00:54:15,900 --> 00:54:18,359
privacy preserving measurement it's also

1320
00:54:18,359 --> 00:54:20,040
really important that there is an uh

1321
00:54:20,040 --> 00:54:21,660
like a proxy in between

1322
00:54:21,660 --> 00:54:23,280
um the plan is to use Ohi but you can

1323
00:54:23,280 --> 00:54:25,020
you know use your favorite

1324
00:54:25,020 --> 00:54:27,960
um Network for that you can use Tor and

1325
00:54:27,960 --> 00:54:29,339
there's also this idea for Randomness

1326
00:54:29,339 --> 00:54:31,920
server so in case the measurement has

1327
00:54:31,920 --> 00:54:34,380
low entropy uh it's a low interest low

1328
00:54:34,380 --> 00:54:36,900
entropy space then uh to prevent like

1329
00:54:36,900 --> 00:54:39,180
attacks from like prevent the server

1330
00:54:39,180 --> 00:54:40,859
from brute forcing all possible

1331
00:54:40,859 --> 00:54:42,660
measurements you

1332
00:54:42,660 --> 00:54:44,400
um you use a randomly server to get the

1333
00:54:44,400 --> 00:54:46,319
to stop to get the search and the

1334
00:54:46,319 --> 00:54:49,680
randomness server uses a voprf to so

1335
00:54:49,680 --> 00:54:51,000
that it doesn't learn the input value

1336
00:54:51,000 --> 00:54:53,400
but still can operate it can still like

1337
00:54:53,400 --> 00:54:55,980
provide the randomness

1338
00:54:55,980 --> 00:54:57,660
um there was some feedback on the list

1339
00:54:57,660 --> 00:54:59,880
um we've been getting a bunch and there

1340
00:54:59,880 --> 00:55:01,740
was the idea was a Dos attack using

1341
00:55:01,740 --> 00:55:04,319
corrupt reports where essentially the

1342
00:55:04,319 --> 00:55:06,420
client wants to prevent recovery of a

1343
00:55:06,420 --> 00:55:08,520
single value like a given Telemetry

1344
00:55:08,520 --> 00:55:10,800
value so it sends a random secret share

1345
00:55:10,800 --> 00:55:14,460
for a given tag so we worked on this and

1346
00:55:14,460 --> 00:55:16,619
we addressed it using uh verifiable

1347
00:55:16,619 --> 00:55:17,819
secret sharing

1348
00:55:17,819 --> 00:55:19,200
um so we have this idea of a share

1349
00:55:19,200 --> 00:55:21,480
commitment now that becomes a tag and

1350
00:55:21,480 --> 00:55:22,859
verifiable secret sharing allows

1351
00:55:22,859 --> 00:55:25,319
checking if a particular share is valid

1352
00:55:25,319 --> 00:55:27,180
but like importantly before you do

1353
00:55:27,180 --> 00:55:29,780
recovery so you're not wasting Cycles

1354
00:55:29,780 --> 00:55:31,920
this adds a little bit of computation

1355
00:55:31,920 --> 00:55:34,559
cost uh it's about a big goal of k

1356
00:55:34,559 --> 00:55:35,160
um

1357
00:55:35,160 --> 00:55:38,700
in badminton competition so

1358
00:55:38,700 --> 00:55:40,980
it's moving on

1359
00:55:40,980 --> 00:55:42,839
um but yeah so I guess I just wanted to

1360
00:55:42,839 --> 00:55:44,460
give a note on implementation it's

1361
00:55:44,460 --> 00:55:46,680
shipping in the brave browser we the

1362
00:55:46,680 --> 00:55:48,180
rest implementation was the original one

1363
00:55:48,180 --> 00:55:49,920
and we had some we have some bindings

1364
00:55:49,920 --> 00:55:52,260
for that but there's also a new one that

1365
00:55:52,260 --> 00:55:54,780
Chris Wood wrote in go uh who's also a

1366
00:55:54,780 --> 00:55:56,280
co-author now on the draft

1367
00:55:56,280 --> 00:55:57,839
um

1368
00:55:57,839 --> 00:55:59,339
and I think that happens a lot more up

1369
00:55:59,339 --> 00:56:01,980
to date with the raft but yeah just

1370
00:56:01,980 --> 00:56:04,260
what's new in the newest version is that

1371
00:56:04,260 --> 00:56:06,420
we specify the verifiable and

1372
00:56:06,420 --> 00:56:08,700
unverifiable secret sharing uh we're

1373
00:56:08,700 --> 00:56:10,380
refracting the document to be easier to

1374
00:56:10,380 --> 00:56:12,119
implement like Chris did a bunch of work

1375
00:56:12,119 --> 00:56:13,980
on helping us with the defining the

1376
00:56:13,980 --> 00:56:16,740
cryptographic apis and functions we also

1377
00:56:16,740 --> 00:56:19,020
have defined this the protocol message

1378
00:56:19,020 --> 00:56:22,140
types for Ayana and yeah and we also

1379
00:56:22,140 --> 00:56:24,780
talk about garbage reports which is this

1380
00:56:24,780 --> 00:56:27,599
idea that the client generates a key

1381
00:56:27,599 --> 00:56:30,540
from one message but encrypts and sends

1382
00:56:30,540 --> 00:56:33,839
a different message so in this case the

1383
00:56:33,839 --> 00:56:36,000
recovery happens correctly but the value

1384
00:56:36,000 --> 00:56:38,579
will be like garbage um so there's a

1385
00:56:38,579 --> 00:56:39,960
couple of different ways to address this

1386
00:56:39,960 --> 00:56:41,579
Ecker pointed out that throwing out the

1387
00:56:41,579 --> 00:56:43,380
whole battery again this causes simple

1388
00:56:43,380 --> 00:56:44,760
Doss so we definitely don't want to do

1389
00:56:44,760 --> 00:56:47,160
that you can do like a majority vote

1390
00:56:47,160 --> 00:56:49,980
um but like one idea that we had was um

1391
00:56:49,980 --> 00:56:51,720
you could use blind signatures instead

1392
00:56:51,720 --> 00:56:53,579
of an oprf

1393
00:56:53,579 --> 00:56:54,960
um and the idea here is that you would

1394
00:56:54,960 --> 00:56:57,420
bundle the signature that you get

1395
00:56:57,420 --> 00:56:58,559
um from the operation of a blind

1396
00:56:58,559 --> 00:57:01,500
signature to um and then send that in

1397
00:57:01,500 --> 00:57:03,420
your in your encrypted message and then

1398
00:57:03,420 --> 00:57:06,000
when the the aggregation server recovers

1399
00:57:06,000 --> 00:57:07,980
the message it can uh also check the

1400
00:57:07,980 --> 00:57:09,359
signature verify it against the public

1401
00:57:09,359 --> 00:57:11,940
key of the randomness server and try to

1402
00:57:11,940 --> 00:57:14,099
get that back we it's not like it's this

1403
00:57:14,099 --> 00:57:15,540
we haven't defined this yet in the draft

1404
00:57:15,540 --> 00:57:17,940
but we at least describe the problem

1405
00:57:17,940 --> 00:57:21,900
uh but anyway so I guess we're calling

1406
00:57:21,900 --> 00:57:23,819
it Superstar now but this idea that you

1407
00:57:23,819 --> 00:57:25,020
can have

1408
00:57:25,020 --> 00:57:26,400
um you could pick your secret sharing

1409
00:57:26,400 --> 00:57:28,380
scheme of choice you can picture pick

1410
00:57:28,380 --> 00:57:29,760
your signature scheme or protocol of

1411
00:57:29,760 --> 00:57:31,559
choice uh and then they give you like

1412
00:57:31,559 --> 00:57:33,720
more or less uh protection against

1413
00:57:33,720 --> 00:57:36,000
client threats so

1414
00:57:36,000 --> 00:57:37,740
um so I guess we kind of recommending

1415
00:57:37,740 --> 00:57:40,079
the third option for a lot of

1416
00:57:40,079 --> 00:57:42,839
implementation like the user

1417
00:57:42,839 --> 00:57:44,040
um oh sorry the second one the

1418
00:57:44,040 --> 00:57:45,780
verifiable secret sharing and the

1419
00:57:45,780 --> 00:57:48,599
regular prf you can prevent the trivial

1420
00:57:48,599 --> 00:57:49,980
dos attack I think that's really

1421
00:57:49,980 --> 00:57:51,900
important but if you have if you also

1422
00:57:51,900 --> 00:57:53,280
want to prevent the bad Cypress attack

1423
00:57:53,280 --> 00:57:55,559
you can also use um verifiable secret

1424
00:57:55,559 --> 00:57:57,660
sharing and blind signatures and there's

1425
00:57:57,660 --> 00:57:58,740
like increasing implementation

1426
00:57:58,740 --> 00:58:01,859
complexity and cost to this

1427
00:58:01,859 --> 00:58:03,839
um but yeah I mean just if you wanted to

1428
00:58:03,839 --> 00:58:04,980
leave some time for questions but it

1429
00:58:04,980 --> 00:58:06,720
seems to be pretty strong interest in

1430
00:58:06,720 --> 00:58:08,640
Star and we have been addressing

1431
00:58:08,640 --> 00:58:10,319
feedback from the working group and it's

1432
00:58:10,319 --> 00:58:12,059
been improving the document so I think

1433
00:58:12,059 --> 00:58:13,380
it makes sense to do it within the

1434
00:58:13,380 --> 00:58:15,180
working group

1435
00:58:15,180 --> 00:58:18,618
um yeah happy to take questions

1436
00:58:21,599 --> 00:58:25,200
okay you're up I'm sorry Martin Thompson

1437
00:58:25,200 --> 00:58:27,300
is first I'm uh I'm reading from the

1438
00:58:27,300 --> 00:58:29,880
bottom Martin Martin is Martin has first

1439
00:58:29,880 --> 00:58:32,780
uh first cut

1440
00:58:38,819 --> 00:58:40,559
um thanks for doing this I think this

1441
00:58:40,559 --> 00:58:43,140
sort of helps a lot

1442
00:58:43,140 --> 00:58:45,299
um I am seriously concerned about the

1443
00:58:45,299 --> 00:58:46,920
computation cost of recovering values

1444
00:58:46,920 --> 00:58:49,020
once the value of K gets big

1445
00:58:49,020 --> 00:58:51,780
I just um you you said it was okay

1446
00:58:51,780 --> 00:58:57,000
I think uh Alex and I and chat have both

1447
00:58:57,000 --> 00:59:00,540
believed it's K squared

1448
00:59:00,540 --> 00:59:02,940
um because each each submission requires

1449
00:59:02,940 --> 00:59:05,460
that you perform a computation across K

1450
00:59:05,460 --> 00:59:06,660
values

1451
00:59:06,660 --> 00:59:09,299
in order to uh to generate the

1452
00:59:09,299 --> 00:59:10,799
confirmation value

1453
00:59:10,799 --> 00:59:13,619
so every submission contains k

1454
00:59:13,619 --> 00:59:15,900
um field elements

1455
00:59:15,900 --> 00:59:18,240
um so that is

1456
00:59:18,240 --> 00:59:19,859
scary

1457
00:59:19,859 --> 00:59:21,480
um it would be interesting to see how

1458
00:59:21,480 --> 00:59:22,799
this sort of compares to some of the

1459
00:59:22,799 --> 00:59:24,599
alternative like how does this compare

1460
00:59:24,599 --> 00:59:26,220
to popular in terms of the computation

1461
00:59:26,220 --> 00:59:28,939
cost involved

1462
00:59:29,400 --> 00:59:31,559
how does it work in practice as well

1463
00:59:31,559 --> 00:59:33,000
because I think that if you're talking

1464
00:59:33,000 --> 00:59:36,559
about a k of 100 doing 10 000 plus

1465
00:59:36,559 --> 00:59:40,020
ristretto computations is probably okay

1466
00:59:40,020 --> 00:59:43,740
but if it's ten thousand but yeah it

1467
00:59:43,740 --> 00:59:45,420
starts looking a little scary yeah I

1468
00:59:45,420 --> 00:59:47,579
agree I think um some more analysis on

1469
00:59:47,579 --> 00:59:48,960
the performance aspect of it and how it

1470
00:59:48,960 --> 00:59:50,640
compares to to that I think especially

1471
00:59:50,640 --> 00:59:52,799
would be pretty interesting um yeah

1472
00:59:52,799 --> 00:59:54,780
I don't particularly care as much about

1473
00:59:54,780 --> 00:59:57,599
the bad cycle text thing but it seems to

1474
00:59:57,599 --> 01:00:00,720
me like you're going to get uh in the

1475
01:00:00,720 --> 01:00:01,859
case of 100 you're going to get 100

1476
01:00:01,859 --> 01:00:04,980
submissions but and some of them will be

1477
01:00:04,980 --> 01:00:07,680
good and some of them might be and most

1478
01:00:07,680 --> 01:00:09,839
of them will probably be good and if

1479
01:00:09,839 --> 01:00:12,480
most of them aren't good which is the um

1480
01:00:12,480 --> 01:00:14,400
sort of the point where the verify

1481
01:00:14,400 --> 01:00:16,260
verifiable secret sharing breaks down

1482
01:00:16,260 --> 01:00:19,380
anyway you won't be able to you won't be

1483
01:00:19,380 --> 01:00:21,119
able to recover them if someone wants

1484
01:00:21,119 --> 01:00:24,660
you just to get garbage anyway so I'm

1485
01:00:24,660 --> 01:00:26,400
not super concerned about that one but

1486
01:00:26,400 --> 01:00:28,200
the verifiable secret sharing

1487
01:00:28,200 --> 01:00:30,299
I would love to find a more efficient

1488
01:00:30,299 --> 01:00:33,140
version

1489
01:00:33,480 --> 01:00:34,799
thanks

1490
01:00:34,799 --> 01:00:36,960
yeah Eric scroll up um support I got to

1491
01:00:36,960 --> 01:00:38,880
say what Martin said um I think you know

1492
01:00:38,880 --> 01:00:41,099
the primary value proposition for this

1493
01:00:41,099 --> 01:00:43,140
work ahead of popular performance and so

1494
01:00:43,140 --> 01:00:44,880
it was not faster than coupler then it's

1495
01:00:44,880 --> 01:00:46,619
kind of like hard to justify so I think

1496
01:00:46,619 --> 01:00:48,240
we need to see some some analysis of

1497
01:00:48,240 --> 01:00:49,140
that

1498
01:00:49,140 --> 01:00:50,520
um and I agree that the case where I

1499
01:00:50,520 --> 01:00:51,839
think is pretty scary um I think maybe

1500
01:00:51,839 --> 01:00:54,720
you meant it was okay over the exist

1501
01:00:54,720 --> 01:00:56,220
multiplied by the existing thing which

1502
01:00:56,220 --> 01:00:57,839
is true um because right now you have to

1503
01:00:57,839 --> 01:00:59,819
do okay computations and now you have to

1504
01:00:59,819 --> 01:01:01,859
do okay computations per client so

1505
01:01:01,859 --> 01:01:03,599
whatever um but it is okay Squad I agree

1506
01:01:03,599 --> 01:01:04,619
with Martin

1507
01:01:04,619 --> 01:01:05,579
um

1508
01:01:05,579 --> 01:01:08,099
um second um I said this list um there's

1509
01:01:08,099 --> 01:01:10,559
like way too much crypto in here crypto

1510
01:01:10,559 --> 01:01:13,020
in here crypto um this like this needs

1511
01:01:13,020 --> 01:01:14,520
to be cut apart in two pieces one piece

1512
01:01:14,520 --> 01:01:16,140
needs to go to cfrg and one piece needs

1513
01:01:16,140 --> 01:01:18,359
to happen here so um so would you say

1514
01:01:18,359 --> 01:01:20,280
like we should block adoption until we

1515
01:01:20,280 --> 01:01:22,500
do that yeah absolutely so there is a

1516
01:01:22,500 --> 01:01:24,720
draft in cfrg right now the frost one

1517
01:01:24,720 --> 01:01:27,299
that has like that also uses and defines

1518
01:01:27,299 --> 01:01:29,160
verifiable secret sharing

1519
01:01:29,160 --> 01:01:31,319
um so I I think you know cfrg folks one

1520
01:01:31,319 --> 01:01:33,480
are interested I think we could refactor

1521
01:01:33,480 --> 01:01:35,520
that document and like so that you know

1522
01:01:35,520 --> 01:01:36,960
it can be serve as a pointer to like

1523
01:01:36,960 --> 01:01:39,180
both documents sure I guess my point is

1524
01:01:39,180 --> 01:01:40,500
like if this like contains stuff but

1525
01:01:40,500 --> 01:01:43,140
like like this is gfp a lot it has like

1526
01:01:43,140 --> 01:01:45,000
you know scalar mold like that is like

1527
01:01:45,000 --> 01:01:46,559
way way too much for this like the the

1528
01:01:46,559 --> 01:01:48,420
way this needs to work is that there

1529
01:01:48,420 --> 01:01:49,680
needs to be a box that is called

1530
01:01:49,680 --> 01:01:51,420
verifiable secret sharing it is sucked

1531
01:01:51,420 --> 01:01:53,099
in and that is like consumed the same

1532
01:01:53,099 --> 01:01:55,500
way as Dash consumes like you know in

1533
01:01:55,500 --> 01:01:57,319
the same way as you know a TLS consumes

1534
01:01:57,319 --> 01:02:00,059
x25509 in the same way as like you know

1535
01:02:00,059 --> 01:02:02,579
um as daf consumes uh um you know um

1536
01:02:02,579 --> 01:02:05,400
popular and like it's like okay and the

1537
01:02:05,400 --> 01:02:06,720
reason for this is interest like isn't

1538
01:02:06,720 --> 01:02:08,579
just like um you know um persnicketing

1539
01:02:08,579 --> 01:02:10,200
this about like you know the uh about

1540
01:02:10,200 --> 01:02:12,240
like the purity of IDF it's about like

1541
01:02:12,240 --> 01:02:13,799
who can do the review and where it has

1542
01:02:13,799 --> 01:02:16,440
to happen and like you know like I I

1543
01:02:16,440 --> 01:02:18,359
like skimmed like the VSS thing and like

1544
01:02:18,359 --> 01:02:20,040
sort of like it's like how much time it

1545
01:02:20,040 --> 01:02:21,180
takes you to persuade myself this is

1546
01:02:21,180 --> 01:02:22,440
correct and the purpose of insistency

1547
01:02:22,440 --> 01:02:25,819
I've really ensure that it's correct

1548
01:02:28,619 --> 01:02:30,980
foreign

1549
01:02:33,000 --> 01:02:34,619
splitting the document or at least

1550
01:02:34,619 --> 01:02:36,780
making it really clear would only help

1551
01:02:36,780 --> 01:02:38,460
the working group because it's going to

1552
01:02:38,460 --> 01:02:39,900
get to the back end of working group

1553
01:02:39,900 --> 01:02:41,400
last call it's going to come to Pub

1554
01:02:41,400 --> 01:02:42,960
wreck for me and the first question I'm

1555
01:02:42,960 --> 01:02:44,579
going to have is what's the process by

1556
01:02:44,579 --> 01:02:46,500
which the crypto was kind of verified

1557
01:02:46,500 --> 01:02:48,599
did you go to crypto panel and now

1558
01:02:48,599 --> 01:02:50,040
you're trying to get resources from the

1559
01:02:50,040 --> 01:02:51,780
crypto panel and if you have that as a

1560
01:02:51,780 --> 01:02:54,599
work product from cfrg it probably will

1561
01:02:54,599 --> 01:02:55,680
go faster

1562
01:02:55,680 --> 01:02:58,380
I guess my sense was that like cfrg

1563
01:02:58,380 --> 01:03:00,119
already has an adopted document that

1564
01:03:00,119 --> 01:03:02,400
defines all of this as a sub part of

1565
01:03:02,400 --> 01:03:06,420
that so it seemed fine to me um

1566
01:03:06,420 --> 01:03:09,260
just link to it

1567
01:03:10,440 --> 01:03:12,540
now I have to read the documents and

1568
01:03:12,540 --> 01:03:14,040
persuade myself as exactly the same

1569
01:03:14,040 --> 01:03:15,720
algorithms in Frost I mean that's like

1570
01:03:15,720 --> 01:03:17,099
consider a problem right and if it's

1571
01:03:17,099 --> 01:03:18,359
already there then like I mean I guess

1572
01:03:18,359 --> 01:03:19,740
like yeah if like things already exist

1573
01:03:19,740 --> 01:03:20,880
and you can just refactor that's great

1574
01:03:20,880 --> 01:03:22,260
I'm just saying like that it has to be

1575
01:03:22,260 --> 01:03:24,180
like like there needs to be enough

1576
01:03:24,180 --> 01:03:26,579
crypto a little of crypto in here that

1577
01:03:26,579 --> 01:03:28,500
like we can persuade we can just read

1578
01:03:28,500 --> 01:03:29,880
the protocol documents and critical

1579
01:03:29,880 --> 01:03:31,140
documents

1580
01:03:31,140 --> 01:03:32,160
um but again I think the threshold

1581
01:03:32,160 --> 01:03:33,540
question really is like is like this

1582
01:03:33,540 --> 01:03:34,920
performance question like that's the

1583
01:03:34,920 --> 01:03:35,640
thing

1584
01:03:35,640 --> 01:03:37,140
I think our sense for the performance

1585
01:03:37,140 --> 01:03:39,119
was that it should still be pretty good

1586
01:03:39,119 --> 01:03:41,460
um but yeah yeah

1587
01:03:41,460 --> 01:03:43,020
yeah I don't want to deliver the point I

1588
01:03:43,020 --> 01:03:43,859
haven't looked at the draft in

1589
01:03:43,859 --> 01:03:45,599
sufficient detail but to me just to be

1590
01:03:45,599 --> 01:03:47,280
in a very kind of crude metric there's

1591
01:03:47,280 --> 01:03:48,359
going to be a lot of things that look

1592
01:03:48,359 --> 01:03:50,940
like kind of crypto if it comes with a

1593
01:03:50,940 --> 01:03:52,980
draft that says irtf when we go through

1594
01:03:52,980 --> 01:03:55,079
the even kind of pass me in the IU view

1595
01:03:55,079 --> 01:03:56,280
it's gonna be like good to go it came

1596
01:03:56,280 --> 01:03:58,559
from crfg it obviously got reviewed with

1597
01:03:58,559 --> 01:04:00,359
us it's gonna if it comes from the from

1598
01:04:00,359 --> 01:04:03,359
the an ITF worker oh wow like let me try

1599
01:04:03,359 --> 01:04:04,740
to kind of pull this apart okay this

1600
01:04:04,740 --> 01:04:06,420
one's a reference this one's not and

1601
01:04:06,420 --> 01:04:08,660
again I mean I think it will go faster

1602
01:04:08,660 --> 01:04:10,859
makes sense

1603
01:04:10,859 --> 01:04:11,819
um

1604
01:04:11,819 --> 01:04:14,339
yeah I'll defer to the chairs about the

1605
01:04:14,339 --> 01:04:16,819
adoption

1606
01:04:17,400 --> 01:04:20,660
okay thank you everybody for the Lively

1607
01:04:20,660 --> 01:04:23,819
and efficient session

1608
01:04:23,819 --> 01:04:27,299
and uh I think we are all done for this

1609
01:04:27,299 --> 01:04:29,819
edition of privacy preserving

1610
01:04:29,819 --> 01:04:32,180
measurement

1611
01:04:38,520 --> 01:04:40,940
all right

1612
01:04:48,960 --> 01:04:51,920
thank you all very much

1613
01:05:12,000 --> 01:05:15,000
foreign

