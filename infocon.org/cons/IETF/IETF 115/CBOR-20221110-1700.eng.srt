1
00:00:10,400 --> 00:00:13,440
okay it has just gone five o'clock here

2
00:00:13,440 --> 00:00:16,440
in the UK it's time to start the Seymour

3
00:00:16,440 --> 00:00:19,440
working group at ietf 115.

4
00:00:19,440 --> 00:00:22,320
I'm Barry lieba and my co-chair

5
00:00:22,320 --> 00:00:27,260
Christian I'm soos is here remote

6
00:00:27,260 --> 00:00:31,980
and thanks for taking notes Marco as

7
00:00:31,980 --> 00:00:33,899
always and Christian is also taking

8
00:00:33,899 --> 00:00:36,600
notes I encourage everyone else to also

9
00:00:36,600 --> 00:00:39,120
get on The Ether pad and help out with

10
00:00:39,120 --> 00:00:42,199
note-taking if you can

11
00:00:42,480 --> 00:00:44,460
so let's get started note the note well

12
00:00:44,460 --> 00:00:46,680
well it's

13
00:00:46,680 --> 00:00:47,520
um

14
00:00:47,520 --> 00:00:49,879
tells you what you need to know for

15
00:00:49,879 --> 00:00:53,340
legal participation in the ietf

16
00:00:53,340 --> 00:00:55,559
you've seen it many times already if you

17
00:00:55,559 --> 00:00:59,520
have any questions contact or go look at

18
00:00:59,520 --> 00:01:02,160
the BCPS and contact your lawyers if you

19
00:01:02,160 --> 00:01:04,459
need to

20
00:01:05,880 --> 00:01:07,860
if you're on site and you're not up here

21
00:01:07,860 --> 00:01:09,960
speaking on the microphone please wear

22
00:01:09,960 --> 00:01:12,420
your mask I see everybody is so thank

23
00:01:12,420 --> 00:01:13,320
you

24
00:01:13,320 --> 00:01:16,580
and um

25
00:01:16,619 --> 00:01:19,080
if even if you're in the room please get

26
00:01:19,080 --> 00:01:21,840
on the meet Echo client uh you can use

27
00:01:21,840 --> 00:01:23,460
the light client which you get by

28
00:01:23,460 --> 00:01:25,560
scanning that lovely barcode up there or

29
00:01:25,560 --> 00:01:28,740
sorry that lovely QR code up there

30
00:01:28,740 --> 00:01:32,400
um that's what takes the blue sheets now

31
00:01:32,400 --> 00:01:36,000
and that's it yes and use use that to

32
00:01:36,000 --> 00:01:38,159
get in the mic queue whether you're

33
00:01:38,159 --> 00:01:41,659
remote or local

34
00:01:43,079 --> 00:01:46,439
here's our agenda I have switched since

35
00:01:46,439 --> 00:01:49,200
the previous version that was posted the

36
00:01:49,200 --> 00:01:51,600
first two items in order in order to

37
00:01:51,600 --> 00:01:53,700
keep Carstens together so we don't have

38
00:01:53,700 --> 00:01:57,000
to switch slides back and forth

39
00:01:57,000 --> 00:01:59,820
um does anybody have anything they want

40
00:01:59,820 --> 00:02:03,840
to add to or change on the agenda

41
00:02:03,840 --> 00:02:06,360
and yes Brendan

42
00:02:06,360 --> 00:02:09,119
um Brendan Warren I'm just proxying for

43
00:02:09,119 --> 00:02:11,160
Hank here he asked if it would be

44
00:02:11,160 --> 00:02:13,980
possible to move time tag and cddl to

45
00:02:13,980 --> 00:02:16,920
the start okay we can do that so

46
00:02:16,920 --> 00:02:18,660
although the fact that he's not here

47
00:02:18,660 --> 00:02:20,400
makes that questionable

48
00:02:20,400 --> 00:02:22,500
yeah well

49
00:02:22,500 --> 00:02:25,440
but so that that that thing that says a

50
00:02:25,440 --> 00:02:28,560
there pretend that's C point one and

51
00:02:28,560 --> 00:02:30,660
here's Hank oh there he is

52
00:02:30,660 --> 00:02:31,800
foreign

53
00:02:31,800 --> 00:02:36,900
so we do we'll do the order b c a d

54
00:02:36,900 --> 00:02:40,760
any other comments on the agenda

55
00:02:43,620 --> 00:02:46,739
okay so anything else uh that we want to

56
00:02:46,739 --> 00:02:50,099
adjust on the agenda hearing none

57
00:02:50,099 --> 00:02:52,080
that's all of my slides so I'm going to

58
00:02:52,080 --> 00:02:54,180
switch to Carson star do you want to do

59
00:02:54,180 --> 00:02:56,959
your own slides Carson

60
00:02:56,959 --> 00:03:01,700
nope I will switch the slides for you

61
00:03:03,720 --> 00:03:05,879
karsten's slides

62
00:03:05,879 --> 00:03:08,540
foreign

63
00:03:09,620 --> 00:03:12,239
take it away

64
00:03:12,239 --> 00:03:14,599
okay

65
00:03:18,360 --> 00:03:20,760
I actually have sneaked in a little

66
00:03:20,760 --> 00:03:23,060
additional item here

67
00:03:23,060 --> 00:03:26,400
we had a meeting of the user usable

68
00:03:26,400 --> 00:03:29,220
former methods proposed research group

69
00:03:29,220 --> 00:03:31,440
during the lunch break

70
00:03:31,440 --> 00:03:34,560
there were some 40 plus people in the

71
00:03:34,560 --> 00:03:35,340
room

72
00:03:35,340 --> 00:03:38,599
pretty active 40 plus people

73
00:03:38,599 --> 00:03:41,459
and it really looks like this research

74
00:03:41,459 --> 00:03:43,200
group will happen

75
00:03:43,200 --> 00:03:45,659
and that means we have a research group

76
00:03:45,659 --> 00:03:46,860
to talk to

77
00:03:46,860 --> 00:03:49,739
on all things formal methods

78
00:03:49,739 --> 00:03:51,959
so we are going to

79
00:03:51,959 --> 00:03:54,959
ask them to do studies about the best

80
00:03:54,959 --> 00:03:57,299
way to do cddl or something like that

81
00:03:57,299 --> 00:04:00,239
that could be interesting

82
00:04:00,239 --> 00:04:03,780
okay but today I want to talk about

83
00:04:03,780 --> 00:04:06,480
time tank and City the evolution that we

84
00:04:06,480 --> 00:04:09,180
will skip that one slide that machine

85
00:04:09,180 --> 00:04:11,760
has made but much better slides for next

86
00:04:11,760 --> 00:04:13,860
slide please

87
00:04:13,860 --> 00:04:17,160
so just to remind everyone about time

88
00:04:17,160 --> 00:04:18,358
tag

89
00:04:18,358 --> 00:04:22,019
that document is from 2017.

90
00:04:22,019 --> 00:04:23,460
we

91
00:04:23,460 --> 00:04:27,300
registered the tanks in 2018 and they

92
00:04:27,300 --> 00:04:30,180
are being actively used in some

93
00:04:30,180 --> 00:04:33,800
programming language communities

94
00:04:33,960 --> 00:04:36,900
um so we should not really

95
00:04:36,900 --> 00:04:39,840
change this document a lot anymore

96
00:04:39,840 --> 00:04:42,180
this was adopted as a working group item

97
00:04:42,180 --> 00:04:42,960
and

98
00:04:42,960 --> 00:04:45,240
2021

99
00:04:45,240 --> 00:04:48,360
and yeah there's no rush to complete

100
00:04:48,360 --> 00:04:51,180
this but recently we mostly have been

101
00:04:51,180 --> 00:04:54,600
waiting for uh working with

102
00:04:54,600 --> 00:04:56,460
uh sedate

103
00:04:56,460 --> 00:04:59,400
so sidage is a working group that is

104
00:04:59,400 --> 00:05:03,240
doing the green stuff on on the slide

105
00:05:03,240 --> 00:05:06,360
um on light blue depending on your eyes

106
00:05:06,360 --> 00:05:11,639
where you can add hints to an RFC 339

107
00:05:11,639 --> 00:05:14,639
timestamp and we are going to be able to

108
00:05:14,639 --> 00:05:19,860
transport these uh in uh time tag

109
00:05:19,860 --> 00:05:22,740
um as well so this is how it looks like

110
00:05:22,740 --> 00:05:25,380
and for the last half years so we mostly

111
00:05:25,380 --> 00:05:27,660
have been waiting for today to converge

112
00:05:27,660 --> 00:05:32,520
that has uh happened next slide please

113
00:05:32,520 --> 00:05:35,639
but uh yeah there is

114
00:05:35,639 --> 00:05:39,419
a problem here because uh while sedate

115
00:05:39,419 --> 00:05:41,520
was extending the

116
00:05:41,520 --> 00:05:46,979
time take with the RC 3339 timestamp

117
00:05:46,979 --> 00:05:49,440
with new information

118
00:05:49,440 --> 00:05:53,100
and implementation survey was done by

119
00:05:53,100 --> 00:05:54,720
one of the contributors

120
00:05:54,720 --> 00:05:57,720
and he found a little problem people are

121
00:05:57,720 --> 00:06:00,720
not using RFC 359 the way

122
00:06:00,720 --> 00:06:03,539
it's saying you should use it

123
00:06:03,539 --> 00:06:08,000
and the reason is that 339 was based on

124
00:06:08,000 --> 00:06:12,300
ISO 8601 1988

125
00:06:12,300 --> 00:06:15,419
for good reasons because that was a

126
00:06:15,419 --> 00:06:20,400
version of id6 8601 that actually had

127
00:06:20,400 --> 00:06:23,759
been published by nist I don't know if

128
00:06:23,759 --> 00:06:25,139
they did this intentionally or

129
00:06:25,139 --> 00:06:27,660
unintentionally but the document was out

130
00:06:27,660 --> 00:06:29,520
there in the wild so people could look

131
00:06:29,520 --> 00:06:32,300
at this without paying money

132
00:06:32,300 --> 00:06:35,240
so they weren't actually

133
00:06:35,240 --> 00:06:40,440
using the 2000 version of 8601 but that

134
00:06:40,440 --> 00:06:43,740
had made a little change by outlawing

135
00:06:43,740 --> 00:06:44,940
minus

136
00:06:44,940 --> 00:06:48,960
in front of zero zero colon zero zero

137
00:06:48,960 --> 00:06:51,660
for a local time offset

138
00:06:51,660 --> 00:06:54,240
and suddenly something that's being used

139
00:06:54,240 --> 00:06:59,039
in RC 559 no longer was allowed

140
00:06:59,039 --> 00:07:01,800
anyway we try to get some discussion

141
00:07:01,800 --> 00:07:04,800
going how to handle this of course when

142
00:07:04,800 --> 00:07:07,199
you find a bug the best thing is to

143
00:07:07,199 --> 00:07:10,139
acknowledge because it's not going to

144
00:07:10,139 --> 00:07:12,539
slow down your work but that's not what

145
00:07:12,539 --> 00:07:15,539
we decided to do incident uh so we

146
00:07:15,539 --> 00:07:18,180
decided to actually write up a fix

147
00:07:18,180 --> 00:07:22,560
that explains how local offsets are

148
00:07:22,560 --> 00:07:23,819
actually used

149
00:07:23,819 --> 00:07:27,300
and that goes beyond the the charter of

150
00:07:27,300 --> 00:07:30,060
the working group so what we are now

151
00:07:30,060 --> 00:07:32,580
doing is finding out whether the isg

152
00:07:32,580 --> 00:07:36,680
will be happy with doing that

153
00:07:36,840 --> 00:07:39,419
um so sudate has finished the working

154
00:07:39,419 --> 00:07:42,840
blast call of their document

155
00:07:42,840 --> 00:07:44,880
and I think the content is stable

156
00:07:44,880 --> 00:07:47,880
there's really not much reason to to

157
00:07:47,880 --> 00:07:50,720
change it and other groups like ecma

158
00:07:50,720 --> 00:07:53,819
tc39 temporal

159
00:07:53,819 --> 00:07:56,460
um are in sync with that

160
00:07:56,460 --> 00:07:58,800
so what we really should be doing is

161
00:07:58,800 --> 00:08:01,080
synchronous synchronize our isg

162
00:08:01,080 --> 00:08:02,940
submission

163
00:08:02,940 --> 00:08:06,120
um of time tag with that of sedate that

164
00:08:06,120 --> 00:08:07,259
will take

165
00:08:07,259 --> 00:08:10,380
a couple of months I don't know but we

166
00:08:10,380 --> 00:08:14,520
should be doing our uh working plus call

167
00:08:14,520 --> 00:08:18,300
uh soon next slide

168
00:08:18,300 --> 00:08:21,660
so my original plan was to have a dash

169
00:08:21,660 --> 00:08:25,020
or three ready before iatf115

170
00:08:25,020 --> 00:08:28,800
uh live intervened

171
00:08:28,800 --> 00:08:31,139
um so one question that came up was

172
00:08:31,139 --> 00:08:34,080
whether we would manage to add a third

173
00:08:34,080 --> 00:08:36,440
time scale we have

174
00:08:36,440 --> 00:08:42,839
UTC and atomic time as time scales uh

175
00:08:42,839 --> 00:08:46,020
India and we wanted to add ut1

176
00:08:46,020 --> 00:08:48,000
um there is a

177
00:08:48,000 --> 00:08:51,120
theme here sibo in space

178
00:08:51,120 --> 00:08:52,740
it was used in a lot of space

179
00:08:52,740 --> 00:08:55,019
applications these days so it fits to

180
00:08:55,019 --> 00:08:56,640
have a ut1

181
00:08:56,640 --> 00:09:00,360
an astronomical time definition in there

182
00:09:00,360 --> 00:09:03,300
but we didn't manage to do this it's a

183
00:09:03,300 --> 00:09:04,920
really complicated subject so it will

184
00:09:04,920 --> 00:09:07,440
require some extra effort so this will

185
00:09:07,440 --> 00:09:10,620
not go into this

186
00:09:10,620 --> 00:09:12,060
um document

187
00:09:12,060 --> 00:09:15,600
um also the distinction between planned

188
00:09:15,600 --> 00:09:18,480
and actual times will not go into this

189
00:09:18,480 --> 00:09:21,240
document we have a registry so we can

190
00:09:21,240 --> 00:09:23,880
always add stuff later but we we're not

191
00:09:23,880 --> 00:09:25,920
waiting for this and there is one

192
00:09:25,920 --> 00:09:29,220
inconsistency that requires a PR before

193
00:09:29,220 --> 00:09:31,920
we can submit the dash or three so

194
00:09:31,920 --> 00:09:34,320
expect that to happen early

195
00:09:34,320 --> 00:09:37,019
uh next week and my recommendation would

196
00:09:37,019 --> 00:09:41,000
be to do the Working World Class call

197
00:09:41,580 --> 00:09:45,560
that was time check questions

198
00:09:47,399 --> 00:09:49,860
okay

199
00:09:49,860 --> 00:09:54,420
let's talk about CDL 2.0 so uh that's a

200
00:09:54,420 --> 00:09:57,779
actually a pretty bad name because it

201
00:09:57,779 --> 00:09:59,580
sounds like we are changing everything

202
00:09:59,580 --> 00:10:02,580
you know we are not changing everything

203
00:10:02,580 --> 00:10:04,620
um so in particular we are trying to

204
00:10:04,620 --> 00:10:08,480
make sure that uh every city

205
00:10:08,480 --> 00:10:10,560
1.0 document

206
00:10:10,560 --> 00:10:13,380
remains a valid City area 2.0 document

207
00:10:13,380 --> 00:10:17,580
and surprisingly almost all ctd and 2.0

208
00:10:17,580 --> 00:10:21,420
documents will be valid 1.0 documents we

209
00:10:21,420 --> 00:10:24,300
get to that but there are four

210
00:10:24,300 --> 00:10:26,940
uh things that are on the priority list

211
00:10:26,940 --> 00:10:28,080
here

212
00:10:28,080 --> 00:10:30,120
we have a I should have put that on the

213
00:10:30,120 --> 00:10:34,320
slide we have a freezer document

214
00:10:34,320 --> 00:10:38,100
um ctda-vis Frieza or something

215
00:10:38,100 --> 00:10:40,800
um that contains further items

216
00:10:40,800 --> 00:10:43,440
that we could pick up here but but

217
00:10:43,440 --> 00:10:45,839
haven't considered prioritized

218
00:10:45,839 --> 00:10:50,880
and we have a cddl2 draft document that

219
00:10:50,880 --> 00:10:55,260
contains rough sketches for all these

220
00:10:55,260 --> 00:10:58,079
items so let's go through through these

221
00:10:58,079 --> 00:11:00,360
sketches but if you find something in

222
00:11:00,360 --> 00:11:03,720
your work with cddl that is not covered

223
00:11:03,720 --> 00:11:06,480
by these four items and that you would

224
00:11:06,480 --> 00:11:10,440
like to see fixed within the next month

225
00:11:10,440 --> 00:11:13,860
it would be good to say that

226
00:11:13,860 --> 00:11:16,920
okay so this is one

227
00:11:16,920 --> 00:11:20,300
thing that we really got wrong in cddl

228
00:11:20,300 --> 00:11:25,500
tag numbers only can be literal in CDA

229
00:11:25,500 --> 00:11:28,500
1.0 and that that was just plain not so

230
00:11:28,500 --> 00:11:30,959
bright so that's one thing we need to

231
00:11:30,959 --> 00:11:32,760
fix

232
00:11:32,760 --> 00:11:34,380
we probably should discuss the

233
00:11:34,380 --> 00:11:38,040
processing model and we have an item

234
00:11:38,040 --> 00:11:39,540
called annotations

235
00:11:39,540 --> 00:11:42,060
there and Brendan is going to say what

236
00:11:42,060 --> 00:11:44,100
he's doing with annotations

237
00:11:44,100 --> 00:11:47,480
then we have the module structure

238
00:11:47,480 --> 00:11:49,980
multiple cddl

239
00:11:49,980 --> 00:11:54,680
modules working together to get a model

240
00:11:54,680 --> 00:11:58,800
this requires some linguistic precision

241
00:11:58,800 --> 00:12:02,880
to separate and finally we want to

242
00:12:02,880 --> 00:12:06,360
automate the whole issue of referencing

243
00:12:06,360 --> 00:12:09,779
stuff out of other documents rfcs

244
00:12:09,779 --> 00:12:11,339
internet drafts

245
00:12:11,339 --> 00:12:14,339
probably three gpp documents because

246
00:12:14,339 --> 00:12:16,500
there are enough that we want to cover

247
00:12:16,500 --> 00:12:18,959
that but I don't have a plan for that

248
00:12:18,959 --> 00:12:23,120
yet and I Anna references so you can say

249
00:12:23,120 --> 00:12:26,760
this video can be one of the various

250
00:12:26,760 --> 00:12:31,500
registered at INR registry X

251
00:12:31,500 --> 00:12:34,019
okay so let's next slide let's go into

252
00:12:34,019 --> 00:12:35,360
the

253
00:12:35,360 --> 00:12:39,600
non-literal tag number so the the first

254
00:12:39,600 --> 00:12:41,040
line is the

255
00:12:41,040 --> 00:12:43,500
current syntax where you actually have

256
00:12:43,500 --> 00:12:47,160
to have a literal uh tag number

257
00:12:47,160 --> 00:12:48,779
in there

258
00:12:48,779 --> 00:12:51,180
and uh

259
00:12:51,180 --> 00:12:54,380
The Proposal is to change this into

260
00:12:54,380 --> 00:12:57,360
backwards compatible literal tag number

261
00:12:57,360 --> 00:12:58,320
of course

262
00:12:58,320 --> 00:13:02,279
and something that looks like a generic

263
00:13:02,279 --> 00:13:03,959
argument

264
00:13:03,959 --> 00:13:07,260
so it uses the the generic argument uh

265
00:13:07,260 --> 00:13:08,660
angle brackets

266
00:13:08,660 --> 00:13:13,440
so you can write a spec like this

267
00:13:13,440 --> 00:13:15,839
um so

268
00:13:15,839 --> 00:13:19,500
well this number six syntax such as yeah

269
00:13:19,500 --> 00:13:21,600
and then you can put in the tag number

270
00:13:21,600 --> 00:13:22,680
here

271
00:13:22,680 --> 00:13:26,279
and uh well yeah just write normal

272
00:13:26,279 --> 00:13:30,060
CDT and just to remind people how we are

273
00:13:30,060 --> 00:13:32,279
using angular brackets

274
00:13:32,279 --> 00:13:34,980
I actually used an example here that

275
00:13:34,980 --> 00:13:37,579
uses angle brackets and it's generic

276
00:13:37,579 --> 00:13:40,920
semantics as well

277
00:13:40,920 --> 00:13:44,220
so this looks uh seems to be a very

278
00:13:44,220 --> 00:13:48,060
small patch and my main issue here is

279
00:13:48,060 --> 00:13:50,279
that I'm not quite sure yet

280
00:13:50,279 --> 00:13:52,920
how we are going to package this is this

281
00:13:52,920 --> 00:13:55,560
going to be a separate document which we

282
00:13:55,560 --> 00:13:57,300
just move independently or everything

283
00:13:57,300 --> 00:14:00,440
else or do we package this with other

284
00:14:00,440 --> 00:14:04,019
stuff it's the first time we have seen a

285
00:14:04,019 --> 00:14:06,920
need to actually change the syntax

286
00:14:06,920 --> 00:14:11,279
since rc8610 Brendan just from a

287
00:14:11,279 --> 00:14:13,740
consistency perspective if we're looking

288
00:14:13,740 --> 00:14:17,339
at changing the uh the thing following

289
00:14:17,339 --> 00:14:22,320
the dot to a uh a non-literal

290
00:14:22,320 --> 00:14:25,800
it just feels very strange to me that

291
00:14:25,800 --> 00:14:29,700
we're exposing the major type of the tag

292
00:14:29,700 --> 00:14:32,459
to the left of the dot I would think

293
00:14:32,459 --> 00:14:34,740
there'd be a cleaner way to represent

294
00:14:34,740 --> 00:14:37,200
that I mean sixth

295
00:14:37,200 --> 00:14:39,600
the only reason six says tag to me is

296
00:14:39,600 --> 00:14:41,160
because I know the major type I

297
00:14:41,160 --> 00:14:43,920
shouldn't need to know that right well

298
00:14:43,920 --> 00:14:46,760
yeah the the

299
00:14:46,760 --> 00:14:49,199
this reflects

300
00:14:49,199 --> 00:14:52,440
another mistake that we have made

301
00:14:52,440 --> 00:14:55,620
that we probably cannot fix

302
00:14:55,620 --> 00:14:57,959
which is that

303
00:14:57,959 --> 00:15:00,480
only for number six

304
00:15:00,480 --> 00:15:03,300
this is the actual argument

305
00:15:03,300 --> 00:15:05,519
and for the for all the other cases it's

306
00:15:05,519 --> 00:15:08,040
the additional information so when you

307
00:15:08,040 --> 00:15:11,459
say 7.25 that doesn't mean that you have

308
00:15:11,459 --> 00:15:14,459
an argument of 25 it means you're using

309
00:15:14,459 --> 00:15:17,519
additional information 25 with seven so

310
00:15:17,519 --> 00:15:20,040
you have a half Precision floating point

311
00:15:20,040 --> 00:15:23,639
number this is

312
00:15:23,639 --> 00:15:27,120
yeah I I don't see a way to to fix this

313
00:15:27,120 --> 00:15:29,760
without actually opening that wound

314
00:15:29,760 --> 00:15:32,760
further

315
00:15:36,199 --> 00:15:41,180
so I would propose we do this just for

316
00:15:46,279 --> 00:15:50,100
yeah this this whole business of

317
00:15:50,100 --> 00:15:51,600
actually putting

318
00:15:51,600 --> 00:15:54,899
uh cddl on on the tweet

319
00:15:54,899 --> 00:15:56,940
touching the ground

320
00:15:56,940 --> 00:15:59,279
is pretty adult

321
00:15:59,279 --> 00:16:02,100
it's not extensible if we wanted to do

322
00:16:02,100 --> 00:16:04,680
something that goes beyond Json and

323
00:16:04,680 --> 00:16:06,899
sibo we probably would have to add

324
00:16:06,899 --> 00:16:08,760
something to this

325
00:16:08,760 --> 00:16:11,100
so that that is not the most beautiful

326
00:16:11,100 --> 00:16:15,360
part of CDA but it's usually covered by

327
00:16:15,360 --> 00:16:17,880
the Prelude so you should write it and

328
00:16:17,880 --> 00:16:19,639
not

329
00:16:19,639 --> 00:16:22,139
0 or H1

330
00:16:22,139 --> 00:16:24,480
uh except in this place where it

331
00:16:24,480 --> 00:16:26,760
actually shines through I mean we could

332
00:16:26,760 --> 00:16:29,040
invent a new syntax

333
00:16:29,040 --> 00:16:31,260
uh but then the next question would be

334
00:16:31,260 --> 00:16:33,779
what what do we use to identify tanks as

335
00:16:33,779 --> 00:16:35,579
such and

336
00:16:35,579 --> 00:16:38,519
yeah it's also something where I uh get

337
00:16:38,519 --> 00:16:40,259
confused all the time when

338
00:16:40,259 --> 00:16:43,620
I write hash six in sibo diagnostic

339
00:16:43,620 --> 00:16:47,279
notation or leave out the the hashtags

340
00:16:47,279 --> 00:16:50,940
and cddl so this is not beautiful I

341
00:16:50,940 --> 00:16:52,500
agree with that

342
00:16:52,500 --> 00:16:55,320
but we need something

343
00:16:55,320 --> 00:16:58,320
that that kind of switches the parser

344
00:16:58,320 --> 00:16:59,160
into

345
00:16:59,160 --> 00:17:01,440
a different mode before we get these

346
00:17:01,440 --> 00:17:04,140
angle brackets or we will have all kinds

347
00:17:04,140 --> 00:17:06,359
of syntactic problems

348
00:17:06,359 --> 00:17:09,678
so hash six it is

349
00:17:09,900 --> 00:17:12,380
okay

350
00:17:13,500 --> 00:17:17,220
yeah so if anybody has an idea of how we

351
00:17:17,220 --> 00:17:20,160
would package this as a

352
00:17:20,160 --> 00:17:24,179
one paragraph RFC or

353
00:17:24,179 --> 00:17:25,859
whether we package this with anything

354
00:17:25,859 --> 00:17:27,720
else I think there are people who want

355
00:17:27,720 --> 00:17:29,040
this pretty

356
00:17:29,040 --> 00:17:32,178
uh quickly

357
00:17:32,220 --> 00:17:34,260
okay

358
00:17:34,260 --> 00:17:36,960
so that would say one

359
00:17:36,960 --> 00:17:39,539
paragraph RFC

360
00:17:39,539 --> 00:17:41,460
unless we find anything else there that

361
00:17:41,460 --> 00:17:44,520
needs to be changed in the day syntax of

362
00:17:44,520 --> 00:17:46,500
of the language but I'm

363
00:17:46,500 --> 00:17:50,660
not currently aware of anything

364
00:17:50,760 --> 00:17:53,940
okay next slide

365
00:17:53,940 --> 00:17:55,799
so the

366
00:17:55,799 --> 00:17:57,900
one thing that

367
00:17:57,900 --> 00:18:00,600
is pretty fundamental

368
00:18:00,600 --> 00:18:03,780
but that we have already started to

369
00:18:03,780 --> 00:18:07,500
extend in one or the other way is the

370
00:18:07,500 --> 00:18:09,299
processing model

371
00:18:09,299 --> 00:18:12,179
so most people who do schema languages

372
00:18:12,179 --> 00:18:14,580
actually want to use these schema

373
00:18:14,580 --> 00:18:16,880
languages for validation

374
00:18:16,880 --> 00:18:21,419
and RFC 8610 essentially tells you when

375
00:18:21,419 --> 00:18:24,179
does a sibo instance match our Json

376
00:18:24,179 --> 00:18:25,280
instance

377
00:18:25,280 --> 00:18:29,160
uh match cddl specification

378
00:18:29,160 --> 00:18:31,380
so this is the validation model you

379
00:18:31,380 --> 00:18:32,880
essentially apply

380
00:18:32,880 --> 00:18:35,520
the model to the data and you get yes or

381
00:18:35,520 --> 00:18:38,640
no and that's a Boolean value

382
00:18:38,640 --> 00:18:43,740
in RC 9165 we already extended this

383
00:18:43,740 --> 00:18:46,740
by adding the concept of features

384
00:18:46,740 --> 00:18:51,120
so now you get yes or no plus a list of

385
00:18:51,120 --> 00:18:55,500
features that have been used in the

386
00:18:55,500 --> 00:18:56,880
match

387
00:18:56,880 --> 00:18:59,760
so there are some

388
00:18:59,760 --> 00:19:03,080
uh how to put this

389
00:19:03,080 --> 00:19:06,539
it's not necessarily entirely clear

390
00:19:06,539 --> 00:19:08,700
whether there's always a deterministic

391
00:19:08,700 --> 00:19:10,140
answer to this question

392
00:19:10,140 --> 00:19:13,980
but unless you you try to be adversarial

393
00:19:13,980 --> 00:19:16,620
when you write your model uh this this

394
00:19:16,620 --> 00:19:18,960
pretty much works

395
00:19:18,960 --> 00:19:23,039
so uh other schema languages

396
00:19:23,039 --> 00:19:26,539
have something called a post schema

397
00:19:26,539 --> 00:19:30,620
validation instance or psbi

398
00:19:30,620 --> 00:19:35,220
that actually changes the data that have

399
00:19:35,220 --> 00:19:36,660
been validated

400
00:19:36,660 --> 00:19:40,440
for instance by adding default values

401
00:19:40,440 --> 00:19:43,679
so CDA does have a DOT default but that

402
00:19:43,679 --> 00:19:45,780
does something slightly different

403
00:19:45,780 --> 00:19:49,880
so that would be one thing we could do

404
00:19:49,880 --> 00:19:53,100
but we could also do

405
00:19:53,100 --> 00:19:54,780
more

406
00:19:54,780 --> 00:19:58,640
uh changes to the the

407
00:19:58,640 --> 00:20:02,760
input that are kind of orthogonal and

408
00:20:02,760 --> 00:20:04,740
what the cddl tool for instance does

409
00:20:04,740 --> 00:20:09,500
internally is to annotate the instance

410
00:20:09,500 --> 00:20:12,299
with the rules that actually were used

411
00:20:12,299 --> 00:20:14,460
in in matching

412
00:20:14,460 --> 00:20:18,419
so when the CDL the original one that I

413
00:20:18,419 --> 00:20:20,640
wrote there are other truths by now of

414
00:20:20,640 --> 00:20:21,419
course

415
00:20:21,419 --> 00:20:24,240
uh but the tool that is called lowercase

416
00:20:24,240 --> 00:20:28,320
cddl when that has validated

417
00:20:28,320 --> 00:20:30,660
an instance and you know which rules

418
00:20:30,660 --> 00:20:32,280
were applied

419
00:20:32,280 --> 00:20:34,740
and that's actually useful for for an

420
00:20:34,740 --> 00:20:36,360
annotated output

421
00:20:36,360 --> 00:20:39,840
which the tool can generate but

422
00:20:39,840 --> 00:20:43,500
it turns out there is a lot of noise in

423
00:20:43,500 --> 00:20:48,740
such a an instance because well you have

424
00:20:48,740 --> 00:20:52,980
things like some something equals text

425
00:20:52,980 --> 00:20:57,179
string and then something else equals

426
00:20:57,179 --> 00:21:00,240
this or something else so you get a lot

427
00:21:00,240 --> 00:21:03,480
of rules that are annotated on top of an

428
00:21:03,480 --> 00:21:05,580
item and the the mechanism that is used

429
00:21:05,580 --> 00:21:09,000
in a CDH tool to select one of those

430
00:21:09,000 --> 00:21:11,940
rules for the actual annotation is not

431
00:21:11,940 --> 00:21:13,559
very smart

432
00:21:13,559 --> 00:21:15,660
so it would be nice if the model

433
00:21:15,660 --> 00:21:18,600
actually had a way to say

434
00:21:18,600 --> 00:21:20,880
well the fact that this rule was used is

435
00:21:20,880 --> 00:21:22,320
really important

436
00:21:22,320 --> 00:21:24,299
and the fact that that

437
00:21:24,299 --> 00:21:26,460
this in the end was mapped to text

438
00:21:26,460 --> 00:21:27,419
string

439
00:21:27,419 --> 00:21:30,840
that was not that is not so important

440
00:21:30,840 --> 00:21:33,240
so that would be the kind of annotation

441
00:21:33,240 --> 00:21:37,320
that we would add in the model

442
00:21:37,320 --> 00:21:41,039
to have the validation process

443
00:21:41,039 --> 00:21:42,740
Edge

444
00:21:42,740 --> 00:21:45,539
data that go beyond the generic data

445
00:21:45,539 --> 00:21:47,220
model of sibo

446
00:21:47,220 --> 00:21:50,299
that allow you to do something

447
00:21:50,299 --> 00:21:55,320
with the validated instance

448
00:21:55,320 --> 00:21:58,460
and annotations we don't have to

449
00:21:58,460 --> 00:22:02,280
reinvent them because relax Ng

450
00:22:02,280 --> 00:22:05,100
provides them so we probably will do

451
00:22:05,100 --> 00:22:09,059
something that is quite similar to what

452
00:22:09,059 --> 00:22:11,220
relax and G does

453
00:22:11,220 --> 00:22:15,120
and then we have an instance that is

454
00:22:15,120 --> 00:22:16,740
still the original instance that came in

455
00:22:16,740 --> 00:22:19,679
so there are no changes to the actual c

456
00:22:19,679 --> 00:22:21,120
bar or the

457
00:22:21,120 --> 00:22:24,539
Json but there are additional there's

458
00:22:24,539 --> 00:22:25,980
additional information

459
00:22:25,980 --> 00:22:29,220
in terms of annotations that can be used

460
00:22:29,220 --> 00:22:31,500
by the implementation that is using a

461
00:22:31,500 --> 00:22:34,740
past instance to to do something

462
00:22:34,740 --> 00:22:36,960
and of course the next step then is to

463
00:22:36,960 --> 00:22:39,720
think about transformation

464
00:22:39,720 --> 00:22:43,799
so uh for instance if you have something

465
00:22:43,799 --> 00:22:46,679
in a structure that that's only there to

466
00:22:46,679 --> 00:22:49,860
distinguish different cases

467
00:22:49,860 --> 00:22:53,580
you might want to remove that

468
00:22:53,580 --> 00:22:58,020
from the uh validated instance

469
00:22:58,020 --> 00:23:00,000
because you had you now have The

470
00:23:00,000 --> 00:23:02,820
annotation what it is you no longer need

471
00:23:02,820 --> 00:23:05,299
this the syntactical noise

472
00:23:05,299 --> 00:23:08,280
for instance when

473
00:23:08,280 --> 00:23:11,700
uh well I'm going occasionally going to

474
00:23:11,700 --> 00:23:13,380
switch to a b and F and then through

475
00:23:13,380 --> 00:23:16,220
cddl because they are so similar similar

476
00:23:16,220 --> 00:23:20,220
I have an ABN f tool that has that that

477
00:23:20,220 --> 00:23:22,440
is being used in particular for

478
00:23:22,440 --> 00:23:24,960
implementing cddl because it's a

479
00:23:24,960 --> 00:23:25,620
language

480
00:23:25,620 --> 00:23:27,960
and typical

481
00:23:27,960 --> 00:23:30,360
item where this is being used is when

482
00:23:30,360 --> 00:23:31,799
you have a string

483
00:23:31,799 --> 00:23:33,960
you want to get rid of the codes because

484
00:23:33,960 --> 00:23:35,640
the quotes are not part of the string

485
00:23:35,640 --> 00:23:38,159
but you also want to transform all the

486
00:23:38,159 --> 00:23:40,919
escaped stuff in the string to what is

487
00:23:40,919 --> 00:23:43,260
actually meant by that

488
00:23:43,260 --> 00:23:45,419
so that's a typical thing you might want

489
00:23:45,419 --> 00:23:47,159
to do in the transformation

490
00:23:47,159 --> 00:23:49,980
and that's something that that we could

491
00:23:49,980 --> 00:23:52,860
include in the processing model I would

492
00:23:52,860 --> 00:23:54,360
certainly want to have that in ambient

493
00:23:54,360 --> 00:23:57,240
efforts a bit less necessary in sibo

494
00:23:57,240 --> 00:23:58,980
because there are so many

495
00:23:58,980 --> 00:24:02,940
ways in sibo to express things

496
00:24:02,940 --> 00:24:06,360
more semantic level

497
00:24:06,360 --> 00:24:08,640
anyway let's talk about annotations next

498
00:24:08,640 --> 00:24:12,679
slide and I'll give the microphone

499
00:24:15,179 --> 00:24:16,500
hello

500
00:24:16,500 --> 00:24:18,059
um I'm Brendan

501
00:24:18,059 --> 00:24:20,820
um so at the hackathon I uh continued

502
00:24:20,820 --> 00:24:22,860
some work I started quite some time ago

503
00:24:22,860 --> 00:24:27,919
on generating a c pull parser definition

504
00:24:27,919 --> 00:24:31,799
directly from cddl so what I have

505
00:24:31,799 --> 00:24:35,299
essentially is a combination code plus

506
00:24:35,299 --> 00:24:38,100
schema ish if you squint at it hard

507
00:24:38,100 --> 00:24:41,700
enough data structure and it uh it

508
00:24:41,700 --> 00:24:43,919
doesn't parse the whole block of

509
00:24:43,919 --> 00:24:46,140
Seaboard directly into a data structure

510
00:24:46,140 --> 00:24:48,240
instead it just consumes the values it

511
00:24:48,240 --> 00:24:50,400
needs when it needs them so it kind of

512
00:24:50,400 --> 00:24:52,860
iterates through the core structure as

513
00:24:52,860 --> 00:24:55,080
it needs the bits that are in it and

514
00:24:55,080 --> 00:24:57,480
this is specifically designed for suit

515
00:24:57,480 --> 00:25:00,059
but could be applied elsewhere

516
00:25:00,059 --> 00:25:02,700
um so it it has a few things that it

517
00:25:02,700 --> 00:25:05,820
does that make it quite convenient in

518
00:25:05,820 --> 00:25:09,659
that kind of use case it evaluates keys

519
00:25:09,659 --> 00:25:11,700
and types to make sure that it's uh

520
00:25:11,700 --> 00:25:14,760
getting what it expects to have it also

521
00:25:14,760 --> 00:25:16,679
has some guidance elements that it

522
00:25:16,679 --> 00:25:19,860
extracts from the cddl now those

523
00:25:19,860 --> 00:25:23,100
guidance flags are essentially what's

524
00:25:23,100 --> 00:25:25,679
used to control my parser so I can

525
00:25:25,679 --> 00:25:27,360
repeat elements mark them as optional

526
00:25:27,360 --> 00:25:30,679
unwrap some seaboor inside a byte string

527
00:25:30,679 --> 00:25:33,539
pass whatever I found to a Handler

528
00:25:33,539 --> 00:25:36,720
function or handle key value pairs which

529
00:25:36,720 --> 00:25:39,659
essentially nests down to another level

530
00:25:39,659 --> 00:25:40,320
um

531
00:25:40,320 --> 00:25:44,100
it's quite efficient for what it is but

532
00:25:44,100 --> 00:25:45,900
it's a bit of a pain to generate it from

533
00:25:45,900 --> 00:25:49,320
cddl as it is today and the the key

534
00:25:49,320 --> 00:25:52,799
things that I see as missing are first

535
00:25:52,799 --> 00:25:55,080
off entry points and I'll I've got

536
00:25:55,080 --> 00:25:56,580
another slide that gives a bit more of

537
00:25:56,580 --> 00:25:58,679
an example about that but essentially

538
00:25:58,679 --> 00:26:01,620
what entry points are are suppose that

539
00:26:01,620 --> 00:26:04,980
you have multiple sub components of a

540
00:26:04,980 --> 00:26:07,200
cddl structure that you might want to

541
00:26:07,200 --> 00:26:10,500
handle individually you've got one

542
00:26:10,500 --> 00:26:13,860
choice for that today and that is to put

543
00:26:13,860 --> 00:26:17,100
them all in a top level type choice and

544
00:26:17,100 --> 00:26:21,179
that's okay except that in my scenario I

545
00:26:21,179 --> 00:26:23,640
may know already which one I'm going to

546
00:26:23,640 --> 00:26:25,500
encounter and putting them in that top

547
00:26:25,500 --> 00:26:27,960
level type choice in my scenario at

548
00:26:27,960 --> 00:26:29,520
least would require each of these

549
00:26:29,520 --> 00:26:31,140
elements to be tagged to be able to

550
00:26:31,140 --> 00:26:33,600
differentiate between them so I would

551
00:26:33,600 --> 00:26:36,000
very much prefer to have a concept that

552
00:26:36,000 --> 00:26:38,340
I've called entry points which is where

553
00:26:38,340 --> 00:26:41,640
I can tell maybe it's something that

554
00:26:41,640 --> 00:26:43,440
doesn't belong in cddl itself I'm

555
00:26:43,440 --> 00:26:45,360
willing to accept that but I definitely

556
00:26:45,360 --> 00:26:46,980
need to be able to tell my generator

557
00:26:46,980 --> 00:26:49,919
which things I might want to pull out

558
00:26:49,919 --> 00:26:52,500
and so from that perspective if everyone

559
00:26:52,500 --> 00:26:54,659
has to do that it looks to me like it

560
00:26:54,659 --> 00:26:57,240
belongs in cddl

561
00:26:57,240 --> 00:27:00,179
um I would like to have annotations for

562
00:27:00,179 --> 00:27:03,539
my parser to to tell it when something

563
00:27:03,539 --> 00:27:05,600
is going to need to be handled

564
00:27:05,600 --> 00:27:07,860
directly maybe in a slightly different

565
00:27:07,860 --> 00:27:11,100
way instead of just continuing to

566
00:27:11,100 --> 00:27:13,620
extract into a data structure so for

567
00:27:13,620 --> 00:27:15,539
that essentially what I'm saying is a

568
00:27:15,539 --> 00:27:17,279
Handler function name I've also said

569
00:27:17,279 --> 00:27:19,020
that I might want to extract a variable

570
00:27:19,020 --> 00:27:21,840
that might just be specific to to my use

571
00:27:21,840 --> 00:27:23,700
case it might not be generic so maybe it

572
00:27:23,700 --> 00:27:25,140
doesn't belong here I don't know that's

573
00:27:25,140 --> 00:27:27,419
for the working group

574
00:27:27,419 --> 00:27:27,960
um

575
00:27:27,960 --> 00:27:29,820
and then there's a question of entry

576
00:27:29,820 --> 00:27:32,279
point dependent handling suits got one

577
00:27:32,279 --> 00:27:34,620
specific use case which is interesting

578
00:27:34,620 --> 00:27:37,260
in this where I need to extract the

579
00:27:37,260 --> 00:27:40,380
sequence number of a manifest before I

580
00:27:40,380 --> 00:27:42,419
do any validation on it because if it's

581
00:27:42,419 --> 00:27:43,679
too late

582
00:27:43,679 --> 00:27:46,140
or if it's an old one there's no point

583
00:27:46,140 --> 00:27:48,000
in even validating its signature it's

584
00:27:48,000 --> 00:27:50,520
too old I won't touch it if it is valid

585
00:27:50,520 --> 00:27:52,380
then yes I'll go through and validate

586
00:27:52,380 --> 00:27:53,820
its signature but if it's too old I

587
00:27:53,820 --> 00:27:55,260
don't even want to look at it

588
00:27:55,260 --> 00:27:56,880
so

589
00:27:56,880 --> 00:27:59,760
um in that scenario I treat a whole

590
00:27:59,760 --> 00:28:01,860
bunch of things as opaque objects that I

591
00:28:01,860 --> 00:28:04,620
would otherwise unpack and so there it

592
00:28:04,620 --> 00:28:06,480
would be convenient to essentially have

593
00:28:06,480 --> 00:28:09,720
two variations where either I unwrap

594
00:28:09,720 --> 00:28:12,240
white strings or I don't

595
00:28:12,240 --> 00:28:12,960
um

596
00:28:12,960 --> 00:28:15,600
ordered multi-maps are a really big deal

597
00:28:15,600 --> 00:28:18,779
for me because I'm encoding key value

598
00:28:18,779 --> 00:28:21,360
pairs in an array because I need to

599
00:28:21,360 --> 00:28:23,100
repeat them and not have them reordered

600
00:28:23,100 --> 00:28:26,159
on me and that's the only way that I can

601
00:28:26,159 --> 00:28:30,419
do that in in seabor and there's no way

602
00:28:30,419 --> 00:28:33,600
to represent that in cddl as it stands

603
00:28:33,600 --> 00:28:36,240
today what this means is that I have a

604
00:28:36,240 --> 00:28:38,820
separate data structure that lives in

605
00:28:38,820 --> 00:28:42,120
parallel to the cddl which says these

606
00:28:42,120 --> 00:28:45,000
are the names of the types which contain

607
00:28:45,000 --> 00:28:47,880
ordered multi-maps so that my code

608
00:28:47,880 --> 00:28:51,419
generator can identify them correctly

609
00:28:51,419 --> 00:28:53,640
um and of course as Carston mentioned

610
00:28:53,640 --> 00:28:56,279
Imports Imports are a really big deal

611
00:28:56,279 --> 00:28:59,100
because I don't have Imports today what

612
00:28:59,100 --> 00:29:02,220
I have to do is fetch copies of the cddl

613
00:29:02,220 --> 00:29:05,279
which for cozy let me tell you is not

614
00:29:05,279 --> 00:29:06,960
straightforward

615
00:29:06,960 --> 00:29:08,760
especially because of these trailing

616
00:29:08,760 --> 00:29:10,080
characters that exploded in there

617
00:29:10,080 --> 00:29:11,340
somehow

618
00:29:11,340 --> 00:29:14,340
um and then I have to concatenate all

619
00:29:14,340 --> 00:29:16,980
the cddl together and because of the way

620
00:29:16,980 --> 00:29:19,919
I'm doing it I can't even strip out the

621
00:29:19,919 --> 00:29:22,080
the elements of cozy that I don't want

622
00:29:22,080 --> 00:29:25,140
and so they get sucked into my code

623
00:29:25,140 --> 00:29:27,059
generator as well which I would really

624
00:29:27,059 --> 00:29:29,399
prefer if I didn't have if I could have

625
00:29:29,399 --> 00:29:31,860
fine-grained Imports I could get rid of

626
00:29:31,860 --> 00:29:33,120
a lot of that

627
00:29:33,120 --> 00:29:36,320
uh next slide please

628
00:29:36,600 --> 00:29:38,279
um so an example for where annotations

629
00:29:38,279 --> 00:29:40,260
might make sense imagine a challenge

630
00:29:40,260 --> 00:29:41,820
response protocol where the challenge

631
00:29:41,820 --> 00:29:43,580
and the response are different messages

632
00:29:43,580 --> 00:29:46,620
that responder knows that it receives

633
00:29:46,620 --> 00:29:48,659
challenges it doesn't receive responses

634
00:29:48,659 --> 00:29:51,539
it does not need to choose which of

635
00:29:51,539 --> 00:29:55,440
these types it's parsing against so in

636
00:29:55,440 --> 00:29:57,240
when I talk about entry points you can

637
00:29:57,240 --> 00:29:59,640
think of the responder receiving

638
00:29:59,640 --> 00:30:02,760
challenges as its entry point into there

639
00:30:02,760 --> 00:30:05,460
it will only need to parse a challenge

640
00:30:05,460 --> 00:30:08,220
it does not need to parse a response so

641
00:30:08,220 --> 00:30:10,919
from that perspective having an entry

642
00:30:10,919 --> 00:30:14,340
point to the challenge simplifies the

643
00:30:14,340 --> 00:30:16,260
responder

644
00:30:16,260 --> 00:30:18,360
um I mentioned that there's

645
00:30:18,360 --> 00:30:21,779
suit not using every structure in cozy

646
00:30:21,779 --> 00:30:23,220
um and annotations could be used to

647
00:30:23,220 --> 00:30:25,740
strip that yes uh I think that's all I

648
00:30:25,740 --> 00:30:27,539
have so there you go

649
00:30:27,539 --> 00:30:31,020
Whirlwind tour uh any questions

650
00:30:31,020 --> 00:30:33,379
no

651
00:30:34,140 --> 00:30:35,760
yeah I have a question in five minutes

652
00:30:35,760 --> 00:30:37,500
which is whether the things that are on

653
00:30:37,500 --> 00:30:40,500
the slide actually solve your problem

654
00:30:40,500 --> 00:30:44,960
um yeah so uh let's talk about Solutions

655
00:30:44,960 --> 00:30:47,760
uh uh briefly we did that at the last

656
00:30:47,760 --> 00:30:49,440
interim

657
00:30:49,440 --> 00:30:51,779
um as well but I hadn't made slides for

658
00:30:51,779 --> 00:30:54,480
those so maybe it's a good idea to run

659
00:30:54,480 --> 00:30:57,059
through these again

660
00:30:57,059 --> 00:30:59,700
um so as Brandon said in today 1.0 we

661
00:30:59,700 --> 00:31:03,059
built our larger models by concatenaging

662
00:31:03,059 --> 00:31:04,620
uh

663
00:31:04,620 --> 00:31:07,559
little modules

664
00:31:07,559 --> 00:31:09,539
um in an intelligent way

665
00:31:09,539 --> 00:31:13,860
and which fires need to go into the the

666
00:31:13,860 --> 00:31:16,620
whole model real is information that

667
00:31:16,620 --> 00:31:18,720
lifts into externally and make file or

668
00:31:18,720 --> 00:31:20,220
something like that

669
00:31:20,220 --> 00:31:23,580
and in CDA 2.0 we want to have explicit

670
00:31:23,580 --> 00:31:26,700
references but we also want to be able

671
00:31:26,700 --> 00:31:28,140
to just feed

672
00:31:28,140 --> 00:31:33,360
some CVA 2.0 fire to a cd-day 1.0

673
00:31:33,360 --> 00:31:35,880
processor and have that do something

674
00:31:35,880 --> 00:31:38,279
useful so people can continue to use

675
00:31:38,279 --> 00:31:40,679
their code generators and so on until

676
00:31:40,679 --> 00:31:43,320
these are also updated

677
00:31:43,320 --> 00:31:46,520
so here's the kind of syntax

678
00:31:46,520 --> 00:31:49,500
that I'm proposing to add these module

679
00:31:49,500 --> 00:31:53,340
superstructure components so as you can

680
00:31:53,340 --> 00:31:55,919
see this is a conventional comment

681
00:31:55,919 --> 00:31:58,440
it's a semicolon it's a common character

682
00:31:58,440 --> 00:31:59,460
in

683
00:31:59,460 --> 00:32:02,880
cddl that's it from ABN F which was

684
00:32:02,880 --> 00:32:04,980
designed in 1977.

685
00:32:04,980 --> 00:32:07,440
and if you were wrong in 1977 then

686
00:32:07,440 --> 00:32:09,840
semicolon may be a very familiar common

687
00:32:09,840 --> 00:32:11,299
character to you

688
00:32:11,299 --> 00:32:14,460
right now most people

689
00:32:14,460 --> 00:32:16,260
think the hash mark is a common

690
00:32:16,260 --> 00:32:20,480
character and well just combined

691
00:32:20,480 --> 00:32:24,539
so this is this would be an export

692
00:32:24,539 --> 00:32:26,820
statement which is pretty much

693
00:32:26,820 --> 00:32:29,220
well I don't know if it's the same but

694
00:32:29,220 --> 00:32:31,860
it's related to what you call entry

695
00:32:31,860 --> 00:32:32,880
points

696
00:32:32,880 --> 00:32:35,640
so the uh

697
00:32:35,640 --> 00:32:38,820
module exported from RFC 1990

698
00:32:38,820 --> 00:32:41,880
would say there are three entry points

699
00:32:41,880 --> 00:32:44,700
object ID relative object ID and private

700
00:32:44,700 --> 00:32:46,140
Enterprise number

701
00:32:46,140 --> 00:32:49,620
and these are the three ones that you

702
00:32:49,620 --> 00:32:52,380
are supposed to use you can get at near

703
00:32:52,380 --> 00:32:54,980
this so this is not trying to be

704
00:32:54,980 --> 00:32:57,480
data encapsulation or something like

705
00:32:57,480 --> 00:33:00,539
that but these are the three ones that

706
00:33:00,539 --> 00:33:01,919
are supposed to

707
00:33:01,919 --> 00:33:04,919
uh be used more often

708
00:33:04,919 --> 00:33:07,080
next slide

709
00:33:07,080 --> 00:33:12,059
so yeah uh one kind of reference

710
00:33:12,059 --> 00:33:14,159
oh should I put this slide later but

711
00:33:14,159 --> 00:33:16,919
it's okay one kind of reference that we

712
00:33:16,919 --> 00:33:19,980
often have to do is look into an Ina

713
00:33:19,980 --> 00:33:21,179
registry

714
00:33:21,179 --> 00:33:23,760
so I didn't use the conventional comment

715
00:33:23,760 --> 00:33:26,039
here because that that doesn't work you

716
00:33:26,039 --> 00:33:27,419
have to

717
00:33:27,419 --> 00:33:29,220
uh

718
00:33:29,220 --> 00:33:32,700
go right into the CDA here so let's say

719
00:33:32,700 --> 00:33:35,399
that the the Cozy algorithm

720
00:33:35,399 --> 00:33:38,039
is an intern integer

721
00:33:38,039 --> 00:33:40,380
for which Ina

722
00:33:40,380 --> 00:33:44,519
has an entry in the Cosi registry in the

723
00:33:44,519 --> 00:33:46,559
algorithm sub-registry

724
00:33:46,559 --> 00:33:49,980
and there in the column video

725
00:33:49,980 --> 00:33:52,320
I just spent half an hour talking with

726
00:33:52,320 --> 00:33:55,860
INR people on How likely this is going

727
00:33:55,860 --> 00:33:58,380
to be supported in the future I mean it

728
00:33:58,380 --> 00:34:01,140
works today because I just have to throw

729
00:34:01,140 --> 00:34:04,820
this XPath at the registry

730
00:34:04,820 --> 00:34:09,480
but yeah this this uses

731
00:34:09,480 --> 00:34:11,820
um internal interfaces that I'm not

732
00:34:11,820 --> 00:34:15,719
supposed to to use so uh we need to find

733
00:34:15,719 --> 00:34:18,560
them to do this we need to

734
00:34:18,560 --> 00:34:21,119
find time to actually work with Ayanna

735
00:34:21,119 --> 00:34:24,418
on doing this and we actually have to

736
00:34:24,418 --> 00:34:27,480
finish the reference or identifier draft

737
00:34:27,480 --> 00:34:30,418
that explains that you are not doing

738
00:34:30,418 --> 00:34:33,839
this each time you uh

739
00:34:33,839 --> 00:34:36,918
switch on the ledge

740
00:34:37,219 --> 00:34:39,780
there is something that may be helpful

741
00:34:39,780 --> 00:34:41,520
here that doesn't reach inside the

742
00:34:41,520 --> 00:34:43,260
internal things that you're not supposed

743
00:34:43,260 --> 00:34:45,418
to access there's also a CSV file for

744
00:34:45,418 --> 00:34:47,099
each of these registries

745
00:34:47,099 --> 00:34:49,379
yes

746
00:34:49,379 --> 00:34:51,899
not sure everything is in there

747
00:34:51,899 --> 00:34:56,000
but yeah that that's useful input

748
00:34:56,580 --> 00:34:58,980
has somebody invented XPath from csvs

749
00:34:58,980 --> 00:35:01,099
yet

750
00:35:01,099 --> 00:35:04,140
you know that there is actually a draft

751
00:35:04,140 --> 00:35:07,380
about cddl for csvs so if you ever have

752
00:35:07,380 --> 00:35:10,680
to specify a CSV you know how to sit in

753
00:35:10,680 --> 00:35:11,820
here

754
00:35:11,820 --> 00:35:14,000
anyway so

755
00:35:14,000 --> 00:35:17,160
[Laughter]

756
00:35:17,160 --> 00:35:19,800
anyway so this is the direction here

757
00:35:19,800 --> 00:35:22,079
this will take some time

758
00:35:22,079 --> 00:35:25,020
because we have to talk with Ayana

759
00:35:25,020 --> 00:35:27,480
develop common ideas about what the

760
00:35:27,480 --> 00:35:29,820
interfaces are they will have to

761
00:35:29,820 --> 00:35:31,800
implement these interfaces

762
00:35:31,800 --> 00:35:33,960
so we're probably talking about a year

763
00:35:33,960 --> 00:35:35,940
or so until this actually

764
00:35:35,940 --> 00:35:38,579
uh works so maybe we should push this

765
00:35:38,579 --> 00:35:42,119
out again to a separate document

766
00:35:42,119 --> 00:35:44,339
but I think this is really

767
00:35:44,339 --> 00:35:47,940
useful in particular also when you

768
00:35:47,940 --> 00:35:50,700
don't want to hard code in your file

769
00:35:50,700 --> 00:35:53,640
that minus 27 means this particular

770
00:35:53,640 --> 00:35:55,619
variant of using AES

771
00:35:55,619 --> 00:35:58,500
uh then I think you'll win

772
00:35:58,500 --> 00:36:01,339
with this

773
00:36:01,380 --> 00:36:03,240
yeah and you you are probably already

774
00:36:03,240 --> 00:36:05,520
guessed that I want to do the same thing

775
00:36:05,520 --> 00:36:09,599
for ABN F at some point uh so that's

776
00:36:09,599 --> 00:36:11,040
again something like that

777
00:36:11,040 --> 00:36:14,099
we need to understand

778
00:36:14,099 --> 00:36:16,619
next slide

779
00:36:16,619 --> 00:36:18,839
so here's the

780
00:36:18,839 --> 00:36:21,000
really

781
00:36:21,000 --> 00:36:25,260
minimal way to do an RFC reference

782
00:36:25,260 --> 00:36:29,520
so uh if you say I want the integer from

783
00:36:29,520 --> 00:36:31,380
RFC 8610

784
00:36:31,380 --> 00:36:33,960
this is the Syntax for this

785
00:36:33,960 --> 00:36:38,339
when we Define cddl we kept quite a few

786
00:36:38,339 --> 00:36:41,339
special characters in The identifier

787
00:36:41,339 --> 00:36:45,000
syntax so we could use more characters

788
00:36:45,000 --> 00:36:46,619
here but I think that that actually

789
00:36:46,619 --> 00:36:48,060
works

790
00:36:48,060 --> 00:36:50,460
and of course the the implementation

791
00:36:50,460 --> 00:36:53,160
would be that if something is not

792
00:36:53,160 --> 00:36:54,300
defined

793
00:36:54,300 --> 00:36:58,560
uh in the CDA file you don't throw an

794
00:36:58,560 --> 00:37:01,260
error right away but you look at it

795
00:37:01,260 --> 00:37:06,119
whether it's a valid referencing syntax

796
00:37:06,119 --> 00:37:08,820
and by the way one nice thing would be

797
00:37:08,820 --> 00:37:11,160
that we actually can put the preload

798
00:37:11,160 --> 00:37:12,780
into a namespace

799
00:37:12,780 --> 00:37:15,720
and uh yeah we have to think about this

800
00:37:15,720 --> 00:37:18,720
what this actually means but we have had

801
00:37:18,720 --> 00:37:21,839
clashes between the preload and

802
00:37:21,839 --> 00:37:24,780
things that people wanted to write uh in

803
00:37:24,780 --> 00:37:28,200
specs and would be nice too separate

804
00:37:28,200 --> 00:37:29,880
this a little bit asked even if the

805
00:37:29,880 --> 00:37:32,300
preload is not supposed to change

806
00:37:32,300 --> 00:37:35,280
anymore so you know there are like six

807
00:37:35,280 --> 00:37:37,619
36 reserved identifies

808
00:37:37,619 --> 00:37:39,900
uh you cannot use it would be nice if

809
00:37:39,900 --> 00:37:43,920
this would be a smaller number

810
00:37:43,920 --> 00:37:46,380
okay so this is uh

811
00:37:46,380 --> 00:37:49,740
I think a construct with high usability

812
00:37:49,740 --> 00:37:51,960
next slide

813
00:37:51,960 --> 00:37:56,040
uh now if we ever write something that

814
00:37:56,040 --> 00:37:58,500
like I don't see 1990 again

815
00:37:58,500 --> 00:38:02,040
then we will have this export line there

816
00:38:02,040 --> 00:38:05,099
so this is a slightly simplified version

817
00:38:05,099 --> 00:38:08,280
of what is in RFC 1990

818
00:38:08,280 --> 00:38:09,900
um and uh

819
00:38:09,900 --> 00:38:12,359
this would actually be clear

820
00:38:12,359 --> 00:38:14,460
that these are the three

821
00:38:14,460 --> 00:38:18,359
entries that you are supposed to use

822
00:38:18,359 --> 00:38:22,980
and until that is available yeah we can

823
00:38:22,980 --> 00:38:26,339
just do this unadorned

824
00:38:26,339 --> 00:38:31,680
import mechanism or next slide we can do

825
00:38:31,680 --> 00:38:36,540
an export an explicit import so this is

826
00:38:36,540 --> 00:38:38,700
one of the conventional comments again

827
00:38:38,700 --> 00:38:41,040
we say we actually want to import ID

828
00:38:41,040 --> 00:38:44,820
from RFC 1990 and then we can use that

829
00:38:44,820 --> 00:38:48,500
without the prefix

830
00:38:48,780 --> 00:38:51,560
okay this should work for

831
00:38:51,560 --> 00:38:54,119
rfcs that's easy

832
00:38:54,119 --> 00:38:56,579
it should work

833
00:38:56,579 --> 00:38:59,040
for internet drafts

834
00:38:59,040 --> 00:39:01,380
but there of course we run into this

835
00:39:01,380 --> 00:39:02,880
problem

836
00:39:02,880 --> 00:39:05,220
versions are stupid

837
00:39:05,220 --> 00:39:09,060
and uh yeah so we will have to spend

838
00:39:09,060 --> 00:39:11,640
some some mental energy on

839
00:39:11,640 --> 00:39:15,720
doing something here that balances

840
00:39:15,720 --> 00:39:17,940
convenience and

841
00:39:17,940 --> 00:39:20,760
the potential for errors

842
00:39:20,760 --> 00:39:22,079
uh

843
00:39:22,079 --> 00:39:24,900
but this should work

844
00:39:24,900 --> 00:39:27,960
maybe without the dot text I don't know

845
00:39:27,960 --> 00:39:31,339
and you should be able to

846
00:39:31,339 --> 00:39:35,040
take something out of out of a draft

847
00:39:35,040 --> 00:39:38,820
yeah and for the Arabs for the old rfcs

848
00:39:38,820 --> 00:39:41,280
there would be an implicit assumption

849
00:39:41,280 --> 00:39:42,180
that

850
00:39:42,180 --> 00:39:44,760
everything is exported

851
00:39:44,760 --> 00:39:47,660
from this RFC because we don't have the

852
00:39:47,660 --> 00:39:50,040
explicit entry point

853
00:39:50,040 --> 00:39:52,920
a statement and one thing we could also

854
00:39:52,920 --> 00:39:53,960
do is

855
00:39:53,960 --> 00:39:55,640
provide

856
00:39:55,640 --> 00:39:58,560
references into the document that are

857
00:39:58,560 --> 00:39:59,339
more

858
00:39:59,339 --> 00:40:00,900
detailed

859
00:40:00,900 --> 00:40:03,480
because many documents have a

860
00:40:03,480 --> 00:40:05,520
an expositional part where you have

861
00:40:05,520 --> 00:40:06,900
chunks

862
00:40:06,900 --> 00:40:08,760
of cbda

863
00:40:08,760 --> 00:40:11,040
and then you have Consolidated CDL

864
00:40:11,040 --> 00:40:14,160
intersection you really want to

865
00:40:14,160 --> 00:40:16,920
pull the CDA from that section

866
00:40:16,920 --> 00:40:19,260
CDs this little trick

867
00:40:19,260 --> 00:40:23,280
where if you you find something twice

868
00:40:23,280 --> 00:40:27,119
exactly the same way that's okay

869
00:40:27,119 --> 00:40:28,339
foreign

870
00:40:28,339 --> 00:40:31,920
but we can't really rely that all drafts

871
00:40:31,920 --> 00:40:34,619
get this right so this is this would be

872
00:40:34,619 --> 00:40:37,200
a way to be more specific about

873
00:40:37,200 --> 00:40:42,060
uh using NXT fnxd

874
00:40:42,420 --> 00:40:46,560
okay so these are the important export

875
00:40:46,560 --> 00:40:48,119
uh

876
00:40:48,119 --> 00:40:49,800
syntaxis

877
00:40:49,800 --> 00:40:53,160
oh yeah so this thing is called include

878
00:40:53,160 --> 00:40:56,400
I don't know if include is smart we can

879
00:40:56,400 --> 00:40:58,920
find names for these things

880
00:40:58,920 --> 00:41:01,680
uh and essentially says

881
00:41:01,680 --> 00:41:04,500
we are going to use the the term time

882
00:41:04,500 --> 00:41:08,040
tag to reference things out of this

883
00:41:08,040 --> 00:41:11,420
draft I forgot to say that

884
00:41:11,700 --> 00:41:14,579
okay next slide

885
00:41:14,579 --> 00:41:17,880
so what are the operations

886
00:41:17,880 --> 00:41:20,400
we have the export

887
00:41:20,400 --> 00:41:23,099
mechanism that essentially

888
00:41:23,099 --> 00:41:27,900
adds a prefix to a local rule name

889
00:41:27,900 --> 00:41:30,420
and makes that namespace available to

890
00:41:30,420 --> 00:41:31,920
other specs

891
00:41:31,920 --> 00:41:34,740
we have the import

892
00:41:34,740 --> 00:41:36,780
which takes

893
00:41:36,780 --> 00:41:39,359
things out of

894
00:41:39,359 --> 00:41:41,220
namespace

895
00:41:41,220 --> 00:41:44,520
maybe use as is maybe on prefix

896
00:41:44,520 --> 00:41:48,780
uh details to be defined

897
00:41:48,780 --> 00:41:52,740
and we have the use for include thing

898
00:41:52,740 --> 00:41:54,060
that

899
00:41:54,060 --> 00:41:56,280
allows you to say where you actually can

900
00:41:56,280 --> 00:41:57,480
find

901
00:41:57,480 --> 00:41:59,579
that namespace

902
00:41:59,579 --> 00:42:01,940
and there is a problem

903
00:42:01,940 --> 00:42:03,920
because

904
00:42:03,920 --> 00:42:07,079
references out from a document

905
00:42:07,079 --> 00:42:11,180
always age very badly

906
00:42:11,180 --> 00:42:15,140
so you really should not not ever have

907
00:42:15,140 --> 00:42:18,119
references from a document

908
00:42:18,119 --> 00:42:20,940
to something that is behind the URI or

909
00:42:20,940 --> 00:42:23,640
has a specific version number and so on

910
00:42:23,640 --> 00:42:26,160
uh you really should be doing this in

911
00:42:26,160 --> 00:42:29,400
terms of namespaces but then it's it's

912
00:42:29,400 --> 00:42:31,920
pretty convenient to be able to do this

913
00:42:31,920 --> 00:42:35,099
so yeah we again we probably have to

914
00:42:35,099 --> 00:42:37,320
balance convenience with correctness

915
00:42:37,320 --> 00:42:38,700
again

916
00:42:38,700 --> 00:42:41,480
here

917
00:42:42,060 --> 00:42:45,060
okay I think that's the main content

918
00:42:45,060 --> 00:42:47,160
there's another slide I think

919
00:42:47,160 --> 00:42:50,820
yeah so uh yeah what I just said so how

920
00:42:50,820 --> 00:42:53,820
do we find the document that exports a

921
00:42:53,820 --> 00:42:55,020
namespace

922
00:42:55,020 --> 00:42:57,660
I would like to be able to talk to about

923
00:42:57,660 --> 00:43:00,480
TS 25 point something

924
00:43:00,480 --> 00:43:04,140
and then uh the sister have the system

925
00:43:04,140 --> 00:43:05,040
know

926
00:43:05,040 --> 00:43:07,440
that it has to go to some 3gbp

927
00:43:07,440 --> 00:43:09,240
repository and

928
00:43:09,240 --> 00:43:12,180
extract the word document convert that

929
00:43:12,180 --> 00:43:15,119
to markdown extract the city data from

930
00:43:15,119 --> 00:43:15,900
that

931
00:43:15,900 --> 00:43:18,420
and so on so this this would be

932
00:43:18,420 --> 00:43:19,640
convenience

933
00:43:19,640 --> 00:43:23,520
but the the model spec should just talk

934
00:43:23,520 --> 00:43:26,579
about ts25 points

935
00:43:26,579 --> 00:43:29,359
three four five

936
00:43:29,760 --> 00:43:33,060
uh the inverse of course also can happen

937
00:43:33,060 --> 00:43:35,160
if you have a namespace

938
00:43:35,160 --> 00:43:38,300
and then the document gets split

939
00:43:38,300 --> 00:43:41,220
uh yeah then you have several documents

940
00:43:41,220 --> 00:43:43,920
and exporting into the same namespace

941
00:43:43,920 --> 00:43:45,720
and we get all the problems with updates

942
00:43:45,720 --> 00:43:48,540
revision versions semantic versioning

943
00:43:48,540 --> 00:43:50,640
uh

944
00:43:50,640 --> 00:43:53,400
there probably will be a Twitter in our

945
00:43:53,400 --> 00:43:55,200
lives at some point

946
00:43:55,200 --> 00:43:57,720
where you can say I want to have at

947
00:43:57,720 --> 00:43:59,960
least version 2.2 of

948
00:43:59,960 --> 00:44:03,240
IDs but not version three because that

949
00:44:03,240 --> 00:44:05,280
might be too new for me

950
00:44:05,280 --> 00:44:10,260
so 2.6 is fine but 2.1 is not and 3 is

951
00:44:10,260 --> 00:44:13,339
not either

952
00:44:13,619 --> 00:44:16,380
okay last slide I think

953
00:44:16,380 --> 00:44:17,579
yeah

954
00:44:17,579 --> 00:44:19,500
um I just wanted to remind people abnf

955
00:44:19,500 --> 00:44:21,660
is a lot like cgdl

956
00:44:21,660 --> 00:44:25,140
so if we invent something here

957
00:44:25,140 --> 00:44:27,660
that works for CDL it's quite likely

958
00:44:27,660 --> 00:44:30,359
that this will work for ABN f as well

959
00:44:30,359 --> 00:44:32,460
well certainly not the Syntax for Anna

960
00:44:32,460 --> 00:44:35,400
references but ABN if there's other ways

961
00:44:35,400 --> 00:44:38,579
of doing that so that would be a slight

962
00:44:38,579 --> 00:44:42,480
Divergence but anything else we probably

963
00:44:42,480 --> 00:44:44,040
want to offer for

964
00:44:44,040 --> 00:44:46,380
a b and F Well at least the a b and f

965
00:44:46,380 --> 00:44:50,160
that goes into our cddl uh but maybe

966
00:44:50,160 --> 00:44:51,480
also

967
00:44:51,480 --> 00:44:55,020
uh for freestanding a b and F

968
00:44:55,020 --> 00:44:57,660
so uh yeah we no longer end the

969
00:44:57,660 --> 00:45:01,140
situation that people have to extract

970
00:45:01,140 --> 00:45:05,940
uh parts of a b and F of some random RFC

971
00:45:05,940 --> 00:45:11,599
to get their ABN F statements uh compile

972
00:45:12,000 --> 00:45:15,319
okay what are we missing

973
00:45:21,420 --> 00:45:24,680
Chris Chung go ahead

974
00:45:30,480 --> 00:45:34,339
Christian we don't hear you

975
00:45:41,300 --> 00:45:44,400
yeah not not getting any audio from do

976
00:45:44,400 --> 00:45:46,560
you do you hear me now yes there you go

977
00:45:46,560 --> 00:45:47,760
okay

978
00:45:47,760 --> 00:45:50,520
um what are we missing looking at the at

979
00:45:50,520 --> 00:45:52,680
the annotations we had before

980
00:45:52,680 --> 00:45:54,960
um I think this might be missing uh

981
00:45:54,960 --> 00:45:57,420
something on whether something is

982
00:45:57,420 --> 00:46:00,240
mandatory mandatory to understand or not

983
00:46:00,240 --> 00:46:03,000
because looking at Brandon's requirement

984
00:46:03,000 --> 00:46:04,760
list on

985
00:46:04,760 --> 00:46:07,920
describing things that then go into into

986
00:46:07,920 --> 00:46:10,260
particular data structures

987
00:46:10,260 --> 00:46:14,220
um if I were to take a cddl document and

988
00:46:14,220 --> 00:46:16,319
map that to my data structure that would

989
00:46:16,319 --> 00:46:18,180
be an piece of information I would

990
00:46:18,180 --> 00:46:20,579
otherwise have to add manually so the

991
00:46:20,579 --> 00:46:22,560
data structure can say and this is

992
00:46:22,560 --> 00:46:24,900
potentially ignoring all say positive

993
00:46:24,900 --> 00:46:26,760
integer keys but not negative integer

994
00:46:26,760 --> 00:46:29,160
keys and if that information could

995
00:46:29,160 --> 00:46:31,079
somehow be part of the annotations I

996
00:46:31,079 --> 00:46:32,940
think this would be valuable

997
00:46:32,940 --> 00:46:35,339
although it could of course be feature

998
00:46:35,339 --> 00:46:37,040
dependent on whether something is

999
00:46:37,040 --> 00:46:40,700
mandatory to understand or not

1000
00:46:41,880 --> 00:46:44,400
right now my assumption would be that

1001
00:46:44,400 --> 00:46:46,800
anything that is in a city it's big is

1002
00:46:46,800 --> 00:46:49,560
mandatory to understand

1003
00:46:49,560 --> 00:46:52,800
uh so are you looking for something to

1004
00:46:52,800 --> 00:46:54,680
say this is not mandatory to understand

1005
00:46:54,680 --> 00:46:57,180
this mandatory to understand would be

1006
00:46:57,180 --> 00:46:59,460
something of doubtish but if the CDL

1007
00:46:59,460 --> 00:47:01,980
explicitly said there is this and that

1008
00:47:01,980 --> 00:47:05,640
say extension point and this is marked

1009
00:47:05,640 --> 00:47:07,380
as not mandatory to understand then

1010
00:47:07,380 --> 00:47:09,900
something building a parser from the

1011
00:47:09,900 --> 00:47:11,940
cdtl into a particular data structure

1012
00:47:11,940 --> 00:47:14,819
would know from all the metadata in the

1013
00:47:14,819 --> 00:47:17,460
cddl that it can ignore particular

1014
00:47:17,460 --> 00:47:20,940
branches whereas regularly unlike some

1015
00:47:20,940 --> 00:47:23,220
JavaScript conventions things that are

1016
00:47:23,220 --> 00:47:27,380
not known are a pausing error

1017
00:47:27,380 --> 00:47:31,140
okay I would like to to marry this with

1018
00:47:31,140 --> 00:47:34,859
the dot feature mechanism in some way

1019
00:47:34,859 --> 00:47:38,579
yes so maybe we can find some semantics

1020
00:47:38,579 --> 00:47:40,500
that actually work

1021
00:47:40,500 --> 00:47:43,880
with this together

1022
00:47:43,980 --> 00:47:46,859
um Carson I'm gonna have to I I can't

1023
00:47:46,859 --> 00:47:48,599
agree with you on the mandatory to

1024
00:47:48,599 --> 00:47:51,660
understand Point uh if I have a parser

1025
00:47:51,660 --> 00:47:53,640
that understands cozy sign and doesn't

1026
00:47:53,640 --> 00:47:55,619
understand cozy Mac that's totally

1027
00:47:55,619 --> 00:47:57,480
legitimate

1028
00:47:57,480 --> 00:48:01,160
and that was Brendan Morin

1029
00:48:01,500 --> 00:48:04,680
this is henkery um switched order here

1030
00:48:04,680 --> 00:48:06,660
no sequence

1031
00:48:06,660 --> 00:48:09,060
um So my answer to question questions is

1032
00:48:09,060 --> 00:48:10,220
I don't know

1033
00:48:10,220 --> 00:48:13,859
and if anybody remembers the question so

1034
00:48:13,859 --> 00:48:16,740
um look up the minutes and um but

1035
00:48:16,740 --> 00:48:18,359
there's something

1036
00:48:18,359 --> 00:48:21,060
that would be uh in in strong

1037
00:48:21,060 --> 00:48:23,400
relationship to what Brent was but wants

1038
00:48:23,400 --> 00:48:25,619
to do and that's an ideal

1039
00:48:25,619 --> 00:48:28,680
so if we do The annotation

1040
00:48:28,680 --> 00:48:31,560
and uh the code generation points that

1041
00:48:31,560 --> 00:48:33,000
help us to do that

1042
00:48:33,000 --> 00:48:36,060
we could further annotate them and

1043
00:48:36,060 --> 00:48:39,660
and get that thing going I know yeah in

1044
00:48:39,660 --> 00:48:42,300
the mood of breaking things apart into

1045
00:48:42,300 --> 00:48:44,760
multiple uh documents I think that's the

1046
00:48:44,760 --> 00:48:45,480
theme

1047
00:48:45,480 --> 00:48:47,940
of this presentation here right now

1048
00:48:47,940 --> 00:48:50,040
there could be something

1049
00:48:50,040 --> 00:48:51,960
that then Builds on the first step of

1050
00:48:51,960 --> 00:48:53,400
annotation

1051
00:48:53,400 --> 00:48:56,040
and I think that a lot of people would

1052
00:48:56,040 --> 00:48:58,500
like to do work on that today

1053
00:48:58,500 --> 00:49:00,900
but they do not know where to start and

1054
00:49:00,900 --> 00:49:02,400
that's Brandon's work

1055
00:49:02,400 --> 00:49:05,579
uh input sorry from the from the uh

1056
00:49:05,579 --> 00:49:08,520
first experience during the uh suit

1057
00:49:08,520 --> 00:49:10,319
manifest purpose I think and uh

1058
00:49:10,319 --> 00:49:12,000
generating and making that easier his

1059
00:49:12,000 --> 00:49:14,760
life easier everybody's life easier and

1060
00:49:14,760 --> 00:49:16,560
and then maybe we can break off from

1061
00:49:16,560 --> 00:49:19,680
that uh something that would uh be

1062
00:49:19,680 --> 00:49:22,859
annotation for that I think that is my

1063
00:49:22,859 --> 00:49:25,500
only request that they plan for that

1064
00:49:25,500 --> 00:49:28,500
when we break that out yeah I think

1065
00:49:28,500 --> 00:49:30,240
there is some something interesting

1066
00:49:30,240 --> 00:49:31,920
going on here

1067
00:49:31,920 --> 00:49:35,640
um so putting all this information

1068
00:49:35,640 --> 00:49:39,180
into one CDA specification

1069
00:49:39,180 --> 00:49:41,819
it doesn't quite work because we we want

1070
00:49:41,819 --> 00:49:43,500
to have a city address reaction that

1071
00:49:43,500 --> 00:49:45,359
actually we actually agree

1072
00:49:45,359 --> 00:49:47,819
on in a standard

1073
00:49:47,819 --> 00:49:50,040
now we don't have to agree on the

1074
00:49:50,040 --> 00:49:51,960
variable name for for something to

1075
00:49:51,960 --> 00:49:54,000
extract

1076
00:49:54,000 --> 00:49:57,540
um so uh we need to find a way

1077
00:49:57,540 --> 00:50:01,800
to actually add to some cddl in a way

1078
00:50:01,800 --> 00:50:06,000
that it survives if that CDL evolves in

1079
00:50:06,000 --> 00:50:08,040
some form

1080
00:50:08,040 --> 00:50:10,440
um and yeah this is not a new subject at

1081
00:50:10,440 --> 00:50:13,500
all we have that everywhere I mean CSS

1082
00:50:13,500 --> 00:50:16,680
was designed to add to HTML so we know

1083
00:50:16,680 --> 00:50:18,599
how to do that in principle

1084
00:50:18,599 --> 00:50:20,760
uh we just have to make sure this is

1085
00:50:20,760 --> 00:50:24,599
actually this works in in our specific

1086
00:50:24,599 --> 00:50:27,180
uh context

1087
00:50:27,180 --> 00:50:28,440
but I think that that's a pretty

1088
00:50:28,440 --> 00:50:31,339
important observation

1089
00:50:31,740 --> 00:50:34,440
I will throw a time check in here that

1090
00:50:34,440 --> 00:50:36,599
we uh we do need a few minutes to handle

1091
00:50:36,599 --> 00:50:38,520
the DNS

1092
00:50:38,520 --> 00:50:40,380
um I'll I'll just say that that is

1093
00:50:40,380 --> 00:50:42,060
effectively the solution that I've taken

1094
00:50:42,060 --> 00:50:43,920
I'm doing exactly what you've described

1095
00:50:43,920 --> 00:50:46,140
it's just not in the context of cddl

1096
00:50:46,140 --> 00:50:50,839
directly so um I guess I agree

1097
00:50:53,760 --> 00:50:55,740
in which case you know that there is a

1098
00:50:55,740 --> 00:50:58,140
mating list and you actually can use

1099
00:50:58,140 --> 00:50:59,579
that and

1100
00:50:59,579 --> 00:51:02,339
throw ideas there

1101
00:51:02,339 --> 00:51:06,660
and uh yeah I'm sure we will have a lot

1102
00:51:06,660 --> 00:51:10,859
of nice interims in the next few months

1103
00:51:10,859 --> 00:51:13,260
that actually look at specific parts of

1104
00:51:13,260 --> 00:51:14,400
this

1105
00:51:14,400 --> 00:51:16,559
and uh

1106
00:51:16,559 --> 00:51:19,980
we can develop it from them

1107
00:51:19,980 --> 00:51:21,960
and now I can give the microphone to my

1108
00:51:21,960 --> 00:51:24,200
team

1109
00:51:29,520 --> 00:51:32,280
don't see the slides here yet so okay I

1110
00:51:32,280 --> 00:51:33,359
guess I just

1111
00:51:33,359 --> 00:51:35,460
let you control it

1112
00:51:35,460 --> 00:51:38,579
um okay yeah uh hi I'm Martin uh I talk

1113
00:51:38,579 --> 00:51:43,859
about DNS message representation in sibo

1114
00:51:43,859 --> 00:51:46,520
um most of the stock I already gave in

1115
00:51:46,520 --> 00:51:49,619
on Monday and also a little bit during

1116
00:51:49,619 --> 00:51:53,520
the interim uh yeah so maybe we can skip

1117
00:51:53,520 --> 00:51:56,099
over some of the slides for time reasons

1118
00:51:56,099 --> 00:51:58,980
okay the motivation mainly is that uh

1119
00:51:58,980 --> 00:52:02,280
with uh for example 800 to 154 but also

1120
00:52:02,280 --> 00:52:06,599
with uh the lp1 networks we run quickly

1121
00:52:06,599 --> 00:52:08,339
into fragmentation depending on the name

1122
00:52:08,339 --> 00:52:11,400
size even for very short names within

1123
00:52:11,400 --> 00:52:14,540
what a record if we use DNS of a co-op

1124
00:52:14,540 --> 00:52:17,460
uh we run into fragmentation you can see

1125
00:52:17,460 --> 00:52:19,200
this in this graphs where on the x-axis

1126
00:52:19,200 --> 00:52:21,180
we see the queries and the responses and

1127
00:52:21,180 --> 00:52:23,760
on the y-axis we see the packet size

1128
00:52:23,760 --> 00:52:27,119
and the dashed lines marking the

1129
00:52:27,119 --> 00:52:28,920
fragmentation borders

1130
00:52:28,920 --> 00:52:32,579
so we need some way of compressing DNS

1131
00:52:32,579 --> 00:52:34,380
messages which is basically what we're

1132
00:52:34,380 --> 00:52:35,579
trying to do here

1133
00:52:35,579 --> 00:52:38,400
next slide please

1134
00:52:38,400 --> 00:52:40,380
yeah okay

1135
00:52:40,380 --> 00:52:41,940
next slide

1136
00:52:41,940 --> 00:52:42,839
um

1137
00:52:42,839 --> 00:52:46,079
uh sorry yeah so the objective is to

1138
00:52:46,079 --> 00:52:47,880
reduce the packet size of DNS queries

1139
00:52:47,880 --> 00:52:51,119
and replace and uh yeah we want to

1140
00:52:51,119 --> 00:52:53,300
encode this in sibo and omit the

1141
00:52:53,300 --> 00:52:57,180
Redundant DNS fields and in the DNS

1142
00:52:57,180 --> 00:53:00,119
queries and responses and also

1143
00:53:00,119 --> 00:53:03,960
want to use address and name compression

1144
00:53:03,960 --> 00:53:06,900
using packed sibo which we decided to

1145
00:53:06,900 --> 00:53:08,940
make it optional so

1146
00:53:08,940 --> 00:53:11,400
even parsers that don't support packed

1147
00:53:11,400 --> 00:53:13,559
sibo can work with that

1148
00:53:13,559 --> 00:53:15,960
next slide please

1149
00:53:15,960 --> 00:53:18,359
um we already got from our discussions

1150
00:53:18,359 --> 00:53:22,980
in core some feedback from DNS up

1151
00:53:22,980 --> 00:53:23,640
um

1152
00:53:23,640 --> 00:53:26,700
that the concise format might hamper a

1153
00:53:26,700 --> 00:53:29,220
future DNS extensions but there are

1154
00:53:29,220 --> 00:53:30,540
possible ways we're ready to address

1155
00:53:30,540 --> 00:53:32,220
this

1156
00:53:32,220 --> 00:53:34,859
um one way uh at least on the record uh

1157
00:53:34,859 --> 00:53:37,680
with a resource record label uh level is

1158
00:53:37,680 --> 00:53:39,900
to have unstructured resources records

1159
00:53:39,900 --> 00:53:41,880
just as a byte string

1160
00:53:41,880 --> 00:53:44,040
um I will go into this in at a later

1161
00:53:44,040 --> 00:53:46,819
point and uh also with contact

1162
00:53:46,819 --> 00:53:49,619
negotiations we can always for example

1163
00:53:49,619 --> 00:53:53,220
fall back to the wire format uh which is

1164
00:53:53,220 --> 00:53:56,040
still not off the table if you have any

1165
00:53:56,040 --> 00:53:58,680
more thoughts on that how to uh improve

1166
00:53:58,680 --> 00:54:03,480
that uh please give feedback there

1167
00:54:03,480 --> 00:54:05,339
um next slide please

1168
00:54:05,339 --> 00:54:07,880
so we go straight into the DNS query

1169
00:54:07,880 --> 00:54:10,920
this is basically at the moment still

1170
00:54:10,920 --> 00:54:12,540
the same that as I presented at the

1171
00:54:12,540 --> 00:54:14,099
interim

1172
00:54:14,099 --> 00:54:16,559
um so the DNS name is just a text string

1173
00:54:16,559 --> 00:54:18,780
and you can add optional IDs and record

1174
00:54:18,780 --> 00:54:20,099
types

1175
00:54:20,099 --> 00:54:23,059
next slide please

1176
00:54:23,420 --> 00:54:26,819
resulting from the core discussions

1177
00:54:26,819 --> 00:54:28,859
um this there's a problem that this

1178
00:54:28,859 --> 00:54:31,680
currently doesn't support edns 0 because

1179
00:54:31,680 --> 00:54:34,319
we can't have a additional section with

1180
00:54:34,319 --> 00:54:35,940
this at the moment so

1181
00:54:35,940 --> 00:54:39,960
a new way to add the Zulu RS for the edn

1182
00:54:39,960 --> 00:54:41,579
s0

1183
00:54:41,579 --> 00:54:43,440
options

1184
00:54:43,440 --> 00:54:45,839
and then it's also the question if we

1185
00:54:45,839 --> 00:54:48,180
want to support it there is no way to

1186
00:54:48,180 --> 00:54:50,160
express DNS stateful operations but

1187
00:54:50,160 --> 00:54:53,760
since it no up code is present and the

1188
00:54:53,760 --> 00:54:56,640
sections counts aren't the thing in our

1189
00:54:56,640 --> 00:54:57,780
format

1190
00:54:57,780 --> 00:55:01,800
and DNS save for operations with this R

1191
00:55:01,800 --> 00:55:05,099
expressed as tlvs so how to express this

1192
00:55:05,099 --> 00:55:06,180
here

1193
00:55:06,180 --> 00:55:09,059
next slip is

1194
00:55:09,059 --> 00:55:11,400
and yeah for the resource records again

1195
00:55:11,400 --> 00:55:13,380
going back to that

1196
00:55:13,380 --> 00:55:15,599
um basically this is also again like in

1197
00:55:15,599 --> 00:55:17,880
the interim a seabo array which is

1198
00:55:17,880 --> 00:55:20,160
minimum contains a TTL and the resource

1199
00:55:20,160 --> 00:55:22,380
data and an optional name and record

1200
00:55:22,380 --> 00:55:25,260
type specification which then would be

1201
00:55:25,260 --> 00:55:27,420
just taken from the question if they are

1202
00:55:27,420 --> 00:55:29,880
not present next slide please

1203
00:55:29,880 --> 00:55:32,400
again from the discussions that already

1204
00:55:32,400 --> 00:55:34,859
happened the question is here maybe what

1205
00:55:34,859 --> 00:55:38,220
I said before uh also provides a

1206
00:55:38,220 --> 00:55:40,200
possibility to provide the research

1207
00:55:40,200 --> 00:55:42,359
record just as a byte string where we

1208
00:55:42,359 --> 00:55:44,160
would just use a wire format of that

1209
00:55:44,160 --> 00:55:45,300
record

1210
00:55:45,300 --> 00:55:47,520
next slide please

1211
00:55:47,520 --> 00:55:50,940
and lastly to represent a response that

1212
00:55:50,940 --> 00:55:53,579
would be an array of arrays where each

1213
00:55:53,579 --> 00:55:56,520
array would be an array of DNS resource

1214
00:55:56,520 --> 00:55:59,420
records representing a section

1215
00:55:59,420 --> 00:56:03,300
again we generally assume that the

1216
00:56:03,300 --> 00:56:05,339
transport can map the queries to the

1217
00:56:05,339 --> 00:56:08,460
response which is both the case for Doc

1218
00:56:08,460 --> 00:56:11,420
and Doh

1219
00:56:12,119 --> 00:56:15,059
but if there if that's not the case the

1220
00:56:15,059 --> 00:56:17,160
original question and ID may be amended

1221
00:56:17,160 --> 00:56:19,740
optional next slide please

1222
00:56:19,740 --> 00:56:23,160
and here again from the discussions uh

1223
00:56:23,160 --> 00:56:25,740
the estate for operations are also here

1224
00:56:25,740 --> 00:56:29,280
missing somehow and um

1225
00:56:29,280 --> 00:56:31,440
there are also a few fields that are

1226
00:56:31,440 --> 00:56:34,020
completely ignored because for Doc we

1227
00:56:34,020 --> 00:56:36,180
didn't need them really but maybe it

1228
00:56:36,180 --> 00:56:38,579
still makes sense to include some like

1229
00:56:38,579 --> 00:56:41,640
the opcodes our code and flex

1230
00:56:41,640 --> 00:56:44,220
next slide please

1231
00:56:44,220 --> 00:56:46,859
and so just to give an example how well

1232
00:56:46,859 --> 00:56:49,319
the compression works at this old format

1233
00:56:49,319 --> 00:56:52,079
which probably will change a little bit

1234
00:56:52,079 --> 00:56:54,720
um but not that much byte it's added

1235
00:56:54,720 --> 00:56:58,260
then hopefully we can compress a query

1236
00:56:58,260 --> 00:57:01,640
by 400 and response by

1237
00:57:01,640 --> 00:57:06,480
283 next slide please

1238
00:57:06,480 --> 00:57:07,319
um

1239
00:57:07,319 --> 00:57:10,200
for a more complex example uh where I

1240
00:57:10,200 --> 00:57:13,460
gave this a dnsst

1241
00:57:13,940 --> 00:57:16,920
example next side please we have the

1242
00:57:16,920 --> 00:57:21,480
problem that uh the concise format is a

1243
00:57:21,480 --> 00:57:24,240
little bit larger than the original

1244
00:57:24,240 --> 00:57:27,900
format so we need some we had the idea

1245
00:57:27,900 --> 00:57:29,819
to add some address and name compression

1246
00:57:29,819 --> 00:57:32,880
and for that we use the sibo pack format

1247
00:57:32,880 --> 00:57:35,180
next set please

1248
00:57:35,180 --> 00:57:38,099
exactly and uh

1249
00:57:38,099 --> 00:57:42,240
that uh then we we can use by adding to

1250
00:57:42,240 --> 00:57:43,980
the media type the parameter packed one

1251
00:57:43,980 --> 00:57:47,520
this is not the case in draft 0 0 1 at

1252
00:57:47,520 --> 00:57:49,260
the moment where it's its own media type

1253
00:57:49,260 --> 00:57:52,440
but it will be in zero two

1254
00:57:52,440 --> 00:57:53,280
um

1255
00:57:53,280 --> 00:57:56,460
and uh then also make the shared I value

1256
00:57:56,460 --> 00:57:58,980
and argument table one list because we

1257
00:57:58,980 --> 00:58:01,140
only need the prefix and suffix

1258
00:58:01,140 --> 00:58:03,740
compression from sibo packed so

1259
00:58:03,740 --> 00:58:06,900
uh I don't we don't see a problem to uh

1260
00:58:06,900 --> 00:58:09,200
make them one list

1261
00:58:09,200 --> 00:58:12,180
and um yeah Earth then we basically have

1262
00:58:12,180 --> 00:58:14,760
this cddl maybe also something for the

1263
00:58:14,760 --> 00:58:18,119
cddl2 thing I wasn't sure if this is

1264
00:58:18,119 --> 00:58:21,480
possible to express this in cddl uh how

1265
00:58:21,480 --> 00:58:25,440
to our compressed response would work

1266
00:58:25,440 --> 00:58:28,140
um yeah and uh the response then becomes

1267
00:58:28,140 --> 00:58:30,359
just another sibo array of two arrays

1268
00:58:30,359 --> 00:58:32,160
with the packing table which is the

1269
00:58:32,160 --> 00:58:33,900
combined shared value and argument table

1270
00:58:33,900 --> 00:58:36,359
and to compress DNS response which

1271
00:58:36,359 --> 00:58:38,579
basically follows the same structure as

1272
00:58:38,579 --> 00:58:41,339
before but just let every values are

1273
00:58:41,339 --> 00:58:43,319
then there's a very certain compressed

1274
00:58:43,319 --> 00:58:47,220
according to sibo pact next slide please

1275
00:58:47,220 --> 00:58:49,740
and if you look then at the example I

1276
00:58:49,740 --> 00:58:52,559
had before instead of 200 bytes we then

1277
00:58:52,559 --> 00:58:55,380
have 119 bytes which is a compression

1278
00:58:55,380 --> 00:58:56,780
rate of

1279
00:58:56,780 --> 00:58:59,579
146 there's 64.

1280
00:58:59,579 --> 00:59:03,180
um percent yeah last slide should not

1281
00:59:03,180 --> 00:59:05,579
come oh no okay this is some overlay

1282
00:59:05,579 --> 00:59:09,720
yeah um we can add some uh implied DNS

1283
00:59:09,720 --> 00:59:12,359
specific table entries for example tlds

1284
00:59:12,359 --> 00:59:14,460
so that you can

1285
00:59:14,460 --> 00:59:17,880
um have them maybe compressed but not

1286
00:59:17,880 --> 00:59:21,480
mentioned in the packing table so that

1287
00:59:21,480 --> 00:59:23,940
you can even save even some more bytes

1288
00:59:23,940 --> 00:59:26,339
for common values such as for example

1289
00:59:26,339 --> 00:59:28,440
tlds

1290
00:59:28,440 --> 00:59:31,440
um now the last slide

1291
00:59:31,440 --> 00:59:33,059
um so the question is especially

1292
00:59:33,059 --> 00:59:35,460
regarding the query if we might need to

1293
00:59:35,460 --> 00:59:37,260
get back to the board with drawing both

1294
00:59:37,260 --> 00:59:39,839
if we want to support for example dsos

1295
00:59:39,839 --> 00:59:43,079
but also the edns0

1296
00:59:43,079 --> 00:59:46,980
or do we keep it as is and just say if

1297
00:59:46,980 --> 00:59:49,440
you want to use these features

1298
00:59:49,440 --> 00:59:52,920
use application DNS message format as a

1299
00:59:52,920 --> 00:59:54,059
fallback

1300
00:59:54,059 --> 00:59:58,319
um which uh given that message is that

1301
00:59:58,319 --> 01:00:01,520
use options or DNS stateful operations

1302
01:00:01,520 --> 01:00:05,099
might become more complex anyways might

1303
01:00:05,099 --> 01:00:06,599
be a viable

1304
01:00:06,599 --> 01:00:08,880
way to handle this

1305
01:00:08,880 --> 01:00:11,880
and yeah uh for the next version we also

1306
01:00:11,880 --> 01:00:14,040
need some more work on the backseat

1307
01:00:14,040 --> 01:00:17,579
board uh specifically uh how the packing

1308
01:00:17,579 --> 01:00:20,579
table is to be constructed and

1309
01:00:20,579 --> 01:00:21,240
um

1310
01:00:21,240 --> 01:00:22,980
also uh

1311
01:00:22,980 --> 01:00:25,680
yeah this idea was a global compression

1312
01:00:25,680 --> 01:00:27,900
context where you might use a TLD or

1313
01:00:27,900 --> 01:00:31,440
something like that uh implicitly

1314
01:00:31,440 --> 01:00:34,619
um we also need some to put some work

1315
01:00:34,619 --> 01:00:36,420
into that

1316
01:00:36,420 --> 01:00:38,579
are there any questions or comments on

1317
01:00:38,579 --> 01:00:40,500
your site

1318
01:00:40,500 --> 01:00:43,500
foreign

1319
01:00:54,599 --> 01:00:56,819
contributed to was about compression

1320
01:00:56,819 --> 01:00:59,940
that I have worked on various forms of

1321
01:00:59,940 --> 01:01:03,540
compression since occasionally there is

1322
01:01:03,540 --> 01:01:06,119
always this this urge

1323
01:01:06,119 --> 01:01:09,000
to get that other one percent

1324
01:01:09,000 --> 01:01:10,799
and I think we have to be very careful

1325
01:01:10,799 --> 01:01:13,760
that we don't fall victim to that

1326
01:01:13,760 --> 01:01:17,280
and do the things that actually are

1327
01:01:17,280 --> 01:01:18,980
meaningful

1328
01:01:18,980 --> 01:01:22,579
and can be implemented with with

1329
01:01:22,579 --> 01:01:25,400
limited effort

1330
01:01:25,400 --> 01:01:29,280
and not try to be that last one percent

1331
01:01:29,280 --> 01:01:31,920
uh better afterwards so that would be my

1332
01:01:31,920 --> 01:01:33,359
recommendation and

1333
01:01:33,359 --> 01:01:36,059
further developing this

1334
01:01:36,059 --> 01:01:39,059
if something falls out with without a

1335
01:01:39,059 --> 01:01:41,520
lot of effort because it's

1336
01:01:41,520 --> 01:01:45,780
yeah no complexity let's do it let's not

1337
01:01:45,780 --> 01:01:48,780
try to do things that come to mind but

1338
01:01:48,780 --> 01:01:52,400
then turn out to be really complicated

1339
01:01:54,119 --> 01:01:55,559
and

1340
01:01:55,559 --> 01:01:58,500
to sign this uh I agree with this

1341
01:01:58,500 --> 01:02:01,440
basically also so yeah

1342
01:02:01,440 --> 01:02:05,280
um but especially with edms0 maybe this

1343
01:02:05,280 --> 01:02:07,559
is still something to consider for DSO

1344
01:02:07,559 --> 01:02:09,780
it leads for Doc there is already

1345
01:02:09,780 --> 01:02:11,940
something that we proposed how to avoid

1346
01:02:11,940 --> 01:02:14,579
them so uh yeah

1347
01:02:14,579 --> 01:02:15,960
um

1348
01:02:15,960 --> 01:02:19,579
any further comments

1349
01:02:25,079 --> 01:02:28,799
okay okay great thanks yeah thank you

1350
01:02:28,799 --> 01:02:32,400
um all right is uh I I guess we uh do

1351
01:02:32,400 --> 01:02:35,640
not have time to discuss

1352
01:02:35,640 --> 01:02:37,980
the remaining thing on the agenda we can

1353
01:02:37,980 --> 01:02:41,540
save that for the first

1354
01:02:42,540 --> 01:02:44,099
for the first

1355
01:02:44,099 --> 01:02:45,660
um interim

1356
01:02:45,660 --> 01:02:51,180
uh we I discussed with Marco um uh the

1357
01:02:51,180 --> 01:02:53,760
interim schedule to coordinate with this

1358
01:02:53,760 --> 01:02:55,440
with the core group we're going to keep

1359
01:02:55,440 --> 01:02:57,599
the same Cadence that we had we just

1360
01:02:57,599 --> 01:02:59,040
need to figure out when we want to

1361
01:02:59,040 --> 01:03:01,619
restart should we have one in December

1362
01:03:01,619 --> 01:03:03,599
or just wait until January to restart

1363
01:03:03,599 --> 01:03:08,960
does anyone have a preference on that

1364
01:03:10,559 --> 01:03:12,599
I see no preferences I'll just take it

1365
01:03:12,599 --> 01:03:15,740
to the mailing list then

1366
01:03:16,260 --> 01:03:20,099
so with that I guess we will call it a

1367
01:03:20,099 --> 01:03:21,140
meeting

1368
01:03:21,140 --> 01:03:23,280
thank you everybody

1369
01:03:23,280 --> 01:03:26,359
have a good trip home

1370
01:03:28,619 --> 01:03:31,579
thank you bye

1371
01:04:02,359 --> 01:04:06,078
it's a um

1372
01:04:21,740 --> 01:04:24,799
you know

