1
00:00:05,160 --> 00:00:08,160
foreign

2
00:00:33,180 --> 00:00:36,019
you know

3
00:00:53,219 --> 00:00:56,219
good morning everyone the word good

4
00:00:56,219 --> 00:00:58,800
afternoon and uh

5
00:00:58,800 --> 00:01:01,980
and so some other places and uh we're

6
00:01:01,980 --> 00:01:03,660
going to start just in a few minutes

7
00:01:03,660 --> 00:01:07,020
this is uh Computing and a network we're

8
00:01:07,020 --> 00:01:08,580
going to give a few minutes

9
00:01:08,580 --> 00:01:13,700
to people to arrive in the room

10
00:01:13,740 --> 00:01:15,659
so

11
00:01:15,659 --> 00:01:19,880
welcome and we'll starting soon

12
00:01:50,600 --> 00:01:53,600
thank you

13
00:02:23,280 --> 00:02:26,060
oh

14
00:02:56,760 --> 00:03:00,319
let's just do the touch

15
00:03:01,019 --> 00:03:03,200
foreign

16
00:03:04,459 --> 00:03:07,560
good morning everybody uh I'm not one of

17
00:03:07,560 --> 00:03:10,800
the chair I'm the Buddy stand in they

18
00:03:10,800 --> 00:03:12,959
need a physical person to be here my

19
00:03:12,959 --> 00:03:14,400
name is Cedric Westfall and I'm in the

20
00:03:14,400 --> 00:03:17,280
future way and I have no idea what I'm

21
00:03:17,280 --> 00:03:18,900
supposed to be doing to start this I

22
00:03:18,900 --> 00:03:20,340
don't know if the chairs is marriage

23
00:03:20,340 --> 00:03:24,019
Jose or somebody on the on the line

24
00:03:24,540 --> 00:03:27,659
I think it's you uh if you log into

25
00:03:27,659 --> 00:03:30,540
meteco you're going to be able to follow

26
00:03:30,540 --> 00:03:32,900
us

27
00:03:33,980 --> 00:03:36,540
I mean the instruction of the of the

28
00:03:36,540 --> 00:03:38,280
computer on the desk are very clear it

29
00:03:38,280 --> 00:03:40,500
says do not touch

30
00:03:40,500 --> 00:03:41,700
ah okay

31
00:03:41,700 --> 00:03:43,920
okay you have your own computer

32
00:03:43,920 --> 00:03:47,760
um anyway you can just stay there and uh

33
00:03:47,760 --> 00:03:50,640
we have everything loaded you should see

34
00:03:50,640 --> 00:03:53,459
us could we hear you

35
00:03:53,459 --> 00:03:55,640
okay

36
00:03:55,640 --> 00:03:58,319
the case that at this space

37
00:03:58,319 --> 00:04:00,840
it should be the case at this point

38
00:04:00,840 --> 00:04:03,659
um that you are a delegate once you log

39
00:04:03,659 --> 00:04:05,760
in maybe not on that computer but on

40
00:04:05,760 --> 00:04:08,180
your own computer you will appear yeah

41
00:04:08,180 --> 00:04:11,220
I'll log into the computer and uh you go

42
00:04:11,220 --> 00:04:14,400
ahead because we I think it's uh 9 34 so

43
00:04:14,400 --> 00:04:16,879
we started

44
00:04:19,079 --> 00:04:20,399
so

45
00:04:20,399 --> 00:04:23,539
um if you want to start

46
00:04:31,680 --> 00:04:34,020
okay then that will start uh okay so

47
00:04:34,020 --> 00:04:35,040
this is

48
00:04:35,040 --> 00:04:36,180
um

49
00:04:36,180 --> 00:04:38,759
um the coin Computing in the network

50
00:04:38,759 --> 00:04:41,460
uh I would like to uh really really

51
00:04:41,460 --> 00:04:44,820
thank our proxy Cedric who introduced

52
00:04:44,820 --> 00:04:47,880
himself from future way to be there in

53
00:04:47,880 --> 00:04:51,060
the room since uh none of us could

54
00:04:51,060 --> 00:04:51,900
travel

55
00:04:51,900 --> 00:04:54,380
cool

56
00:04:55,680 --> 00:05:00,780
um obviously there's the usual note well

57
00:05:00,780 --> 00:05:03,540
and policies against harassment and

58
00:05:03,540 --> 00:05:05,780
everything

59
00:05:05,780 --> 00:05:12,360
a reminder that this is the irtf we

60
00:05:12,360 --> 00:05:14,479
do not do

61
00:05:14,479 --> 00:05:17,600
standards but we do

62
00:05:17,600 --> 00:05:20,880
research and you will see today that we

63
00:05:20,880 --> 00:05:22,820
have a very interesting

64
00:05:22,820 --> 00:05:27,120
research papers presented plus a number

65
00:05:27,120 --> 00:05:31,440
of updates and new drafts

66
00:05:31,440 --> 00:05:35,660
um Jeffrey you want to take over

67
00:05:39,180 --> 00:05:41,600
me

68
00:05:42,979 --> 00:05:46,440
yes so before I introduce the agenda

69
00:05:46,440 --> 00:05:48,240
maybe I'll remind you two things

70
00:05:48,240 --> 00:05:51,199
physically in London people in London so

71
00:05:51,199 --> 00:05:56,340
you need to follow the masking policy so

72
00:05:56,340 --> 00:05:58,680
we have to pass your mask during the

73
00:05:58,680 --> 00:06:00,660
meeting during the meeting in the room

74
00:06:00,660 --> 00:06:03,860
second is that we maintain just one

75
00:06:03,860 --> 00:06:07,199
single queue in the meteco so if you

76
00:06:07,199 --> 00:06:10,860
want to go to the mic please also join

77
00:06:10,860 --> 00:06:13,160
the queue in the tackle

78
00:06:13,160 --> 00:06:17,419
so as for the agenda so we have three

79
00:06:17,419 --> 00:06:20,280
research papers today to introduce first

80
00:06:20,280 --> 00:06:22,020
it will come from

81
00:06:22,020 --> 00:06:24,120
[Music]

82
00:06:24,120 --> 00:06:29,180
Oxford he's the from the team of Noah

83
00:06:29,180 --> 00:06:34,259
Zero Man he will introduce some lessons

84
00:06:34,259 --> 00:06:37,280
learned from their electrical in network

85
00:06:37,280 --> 00:06:40,139
classification implementation

86
00:06:40,139 --> 00:06:43,940
and then second Ike will introduce

87
00:06:43,940 --> 00:06:47,699
their paper about the end-to-end

88
00:06:47,699 --> 00:06:51,300
transporter layer and that he will

89
00:06:51,300 --> 00:06:54,240
discuss the very interesting topic

90
00:06:54,240 --> 00:06:59,000
related to end-to-end argument

91
00:06:59,460 --> 00:07:03,800
and then they've from Theo Munich

92
00:07:03,800 --> 00:07:07,440
he is working together with Dr chosen he

93
00:07:07,440 --> 00:07:10,979
will discussed the DOT

94
00:07:10,979 --> 00:07:15,300
on a private provider Network

95
00:07:15,300 --> 00:07:19,080
and after that we have uh Pasco

96
00:07:19,080 --> 00:07:21,000
to introduce

97
00:07:21,000 --> 00:07:25,400
one new draft about the

98
00:07:25,400 --> 00:07:29,280
secure elements implemented in the

99
00:07:29,280 --> 00:07:32,220
internet and how the data plan the

100
00:07:32,220 --> 00:07:34,759
programmable data plan can

101
00:07:34,759 --> 00:07:38,819
be used in this architecture and if we

102
00:07:38,819 --> 00:07:41,400
have time then we can discuss some

103
00:07:41,400 --> 00:07:45,780
future of This research Loop and there

104
00:07:45,780 --> 00:07:48,620
are some initial

105
00:07:48,620 --> 00:07:51,419
considerations from cheers and we can

106
00:07:51,419 --> 00:07:53,639
discuss

107
00:07:53,639 --> 00:07:57,139
yes would you think

108
00:07:57,599 --> 00:08:01,699
um yeah if you want to continue though

109
00:08:07,319 --> 00:08:09,360
sure

110
00:08:09,360 --> 00:08:13,620
um you are all here so thank you for

111
00:08:13,620 --> 00:08:15,120
being here those of you who are already

112
00:08:15,120 --> 00:08:17,340
signed on

113
00:08:17,340 --> 00:08:19,440
um there there's the pointer here to the

114
00:08:19,440 --> 00:08:22,139
meat echo which has many

115
00:08:22,139 --> 00:08:25,199
um good features uh not least of which

116
00:08:25,199 --> 00:08:28,259
is that it has many things integrated

117
00:08:28,259 --> 00:08:30,660
including it automatically keeps track

118
00:08:30,660 --> 00:08:33,539
of who's participating so it generates a

119
00:08:33,539 --> 00:08:36,120
blue sheet for us but for those of you

120
00:08:36,120 --> 00:08:38,700
inclined to do so we'd really appreciate

121
00:08:38,700 --> 00:08:41,099
your involvement in the shared

122
00:08:41,099 --> 00:08:42,260
note-taking

123
00:08:42,260 --> 00:08:46,140
and there's a both a pointer here and

124
00:08:46,140 --> 00:08:49,440
then in the tool itself there's an icon

125
00:08:49,440 --> 00:08:51,899
along the upper

126
00:08:51,899 --> 00:08:52,500
um

127
00:08:52,500 --> 00:08:56,339
along the top that also will take you to

128
00:08:56,339 --> 00:08:57,839
the note taking the integrated

129
00:08:57,839 --> 00:08:59,580
note-taking

130
00:08:59,580 --> 00:09:02,519
um we will try to also monitor the chat

131
00:09:02,519 --> 00:09:03,959
and

132
00:09:03,959 --> 00:09:07,920
um the physical cue for questions and

133
00:09:07,920 --> 00:09:08,519
um

134
00:09:08,519 --> 00:09:10,860
uh as was mentioned we're going to use

135
00:09:10,860 --> 00:09:12,660
the Meade Echo

136
00:09:12,660 --> 00:09:16,140
um to maintain the queue uh if everybody

137
00:09:16,140 --> 00:09:18,480
of course will default to everything

138
00:09:18,480 --> 00:09:21,480
being off unless you're speaking uh that

139
00:09:21,480 --> 00:09:25,019
will be great and in fact uh in terms of

140
00:09:25,019 --> 00:09:27,000
the masking policy if you are a speaker

141
00:09:27,000 --> 00:09:30,480
you are allowed to remove your mask when

142
00:09:30,480 --> 00:09:32,640
you're speaking

143
00:09:32,640 --> 00:09:37,080
um otherwise please maintain the policy

144
00:09:37,080 --> 00:09:39,959
um we welcome you to participate in our

145
00:09:39,959 --> 00:09:42,420
mailing list and

146
00:09:42,420 --> 00:09:44,220
um you can you know to subscribe we

147
00:09:44,220 --> 00:09:45,959
include the pointer here but also

148
00:09:45,959 --> 00:09:48,959
welcome you to peruse the archives for

149
00:09:48,959 --> 00:09:52,260
ongoing conversation and all of the

150
00:09:52,260 --> 00:09:54,360
materials for the session

151
00:09:54,360 --> 00:09:56,399
um are available through the agenda page

152
00:09:56,399 --> 00:09:59,399
and through the link here as well as

153
00:09:59,399 --> 00:10:01,920
again if you go to the top icon and look

154
00:10:01,920 --> 00:10:03,899
for the folder

155
00:10:03,899 --> 00:10:06,300
um you can look at all of the materials

156
00:10:06,300 --> 00:10:09,740
and peruse the mature leisure

157
00:10:15,560 --> 00:10:19,380
we have many documents that have been

158
00:10:19,380 --> 00:10:21,180
contributed

159
00:10:21,180 --> 00:10:24,240
um to the discussion

160
00:10:24,240 --> 00:10:28,680
um we are uh for our next meeting we are

161
00:10:28,680 --> 00:10:30,600
very likely to ping you if you have

162
00:10:30,600 --> 00:10:33,180
written one of these documents

163
00:10:33,180 --> 00:10:35,640
um in order to refresh those that we

164
00:10:35,640 --> 00:10:37,920
would like to still consider as under

165
00:10:37,920 --> 00:10:40,920
the charter and maybe even advance to

166
00:10:40,920 --> 00:10:44,700
being adopted by the working group

167
00:10:44,700 --> 00:10:49,620
um uh but for today's session we have

168
00:10:49,620 --> 00:10:52,320
um One new draft that we will

169
00:10:52,320 --> 00:10:58,040
um discuss uh uh during this session

170
00:11:02,459 --> 00:11:04,140
and with that

171
00:11:04,140 --> 00:11:06,240
go ahead with that we go to

172
00:11:06,240 --> 00:11:10,680
presentations and uh I would ask the

173
00:11:10,680 --> 00:11:12,300
first presenter

174
00:11:12,300 --> 00:11:12,930
to

175
00:11:12,930 --> 00:11:13,560
[Music]

176
00:11:13,560 --> 00:11:15,060
um

177
00:11:15,060 --> 00:11:16,740
load

178
00:11:16,740 --> 00:11:18,300
um

179
00:11:18,300 --> 00:11:21,060
oh maybe I can actually preload I

180
00:11:21,060 --> 00:11:23,760
actually can pre-load

181
00:11:23,760 --> 00:11:26,880
stop my share

182
00:11:26,880 --> 00:11:30,860
and share preload

183
00:11:30,899 --> 00:11:32,940
oh our slide is being shared okay it's

184
00:11:32,940 --> 00:11:35,180
fine

185
00:11:47,519 --> 00:11:50,720
that's this one

186
00:11:50,820 --> 00:11:53,060
foreign

187
00:11:55,740 --> 00:11:58,399
excuse me

188
00:12:04,380 --> 00:12:06,560
I

189
00:12:06,560 --> 00:12:09,180
think all the slides were pre-loaded and

190
00:12:09,180 --> 00:12:12,199
now I can't find them

191
00:12:13,019 --> 00:12:16,279
do you want me to show it for you

192
00:12:18,240 --> 00:12:20,820
I can't find the presentation that the

193
00:12:20,820 --> 00:12:23,839
first thought no here we go

194
00:12:25,680 --> 00:12:27,360
better yeah

195
00:12:27,360 --> 00:12:28,920
which speaker are you

196
00:12:28,920 --> 00:12:32,160
um the presenter from from Oxford could

197
00:12:32,160 --> 00:12:35,040
you please load your slides

198
00:12:35,040 --> 00:12:38,220
or share your slides

199
00:12:38,220 --> 00:12:41,160
because I can't find them

200
00:12:41,160 --> 00:12:45,319
I can't find them on the pre-loaded

201
00:12:52,339 --> 00:12:55,459
I mean

202
00:12:55,620 --> 00:12:58,800
the the yeah the author is is the author

203
00:12:58,800 --> 00:13:01,680
on on Deco you could actually load for

204
00:13:01,680 --> 00:13:03,300
me so they both heard we're gonna is

205
00:13:03,300 --> 00:13:04,860
gonna uh share from his laptop the

206
00:13:04,860 --> 00:13:06,480
presentation I think or do you have

207
00:13:06,480 --> 00:13:08,660
different

208
00:13:10,339 --> 00:13:13,200
because somehow I can't find the slides

209
00:13:13,200 --> 00:13:17,240
on the pre-loaded material

210
00:13:19,740 --> 00:13:21,720
yeah

211
00:13:21,720 --> 00:13:24,680
did you yeah

212
00:13:25,560 --> 00:13:28,320
uh do you have the slides marriage Jose

213
00:13:28,320 --> 00:13:29,760
actually

214
00:13:29,760 --> 00:13:31,760
um

215
00:13:35,040 --> 00:13:37,380
yeah but if you look at pre-loaded

216
00:13:37,380 --> 00:13:41,360
material I can't find them

217
00:13:45,360 --> 00:13:48,139
now

218
00:13:48,779 --> 00:13:52,639
what is your suggestion it's all right

219
00:13:55,320 --> 00:13:59,880
I have everyone else except that one

220
00:13:59,880 --> 00:14:04,019
I saw that one well then load them then

221
00:14:04,019 --> 00:14:07,079
load them yeah because I I don't I can I

222
00:14:07,079 --> 00:14:09,779
can load it maybe I can try share the

223
00:14:09,779 --> 00:14:12,500
screen my screen

224
00:14:13,019 --> 00:14:17,060
so it's gonna take me a little time

225
00:14:17,639 --> 00:14:21,440
I thought it was okay let me take off

226
00:14:30,720 --> 00:14:32,639
one of the things there's a full client

227
00:14:32,639 --> 00:14:35,120
the video

228
00:14:49,560 --> 00:14:51,180
so I don't think any of the devices

229
00:14:51,180 --> 00:14:52,380
though because that's going to make

230
00:14:52,380 --> 00:14:54,120
somebody cool

231
00:14:54,120 --> 00:14:56,540
see

232
00:14:57,600 --> 00:14:58,920
then

233
00:14:58,920 --> 00:15:01,880
share your screen

234
00:15:08,940 --> 00:15:11,820
okay and if your mail Advance the slides

235
00:15:11,820 --> 00:15:14,060
for you

236
00:15:23,100 --> 00:15:26,699
I see them on the data tracker but on

237
00:15:26,699 --> 00:15:28,860
the uploaded material

238
00:15:28,860 --> 00:15:31,199
I don't see them

239
00:15:31,199 --> 00:15:32,699
so

240
00:15:32,699 --> 00:15:36,899
so you can ask it to reload maybe has a

241
00:15:36,899 --> 00:15:39,500
okay

242
00:15:53,399 --> 00:15:55,980
whichever window you want

243
00:15:55,980 --> 00:15:58,100
yeah okay

244
00:15:58,100 --> 00:16:02,240
so can you show your slides

245
00:16:05,120 --> 00:16:08,160
uh this is not the screen there oh yeah

246
00:16:08,160 --> 00:16:11,579
here we go okay

247
00:16:11,940 --> 00:16:16,519
use on the uh thing that

248
00:16:18,360 --> 00:16:21,360
so

249
00:16:23,399 --> 00:16:24,600
okay

250
00:16:24,600 --> 00:16:27,899
so good morning everyone my name is and

251
00:16:27,899 --> 00:16:30,120
today I would like to talk about our

252
00:16:30,120 --> 00:16:33,420
research related to practic practical in

253
00:16:33,420 --> 00:16:35,279
network classification and the license

254
00:16:35,279 --> 00:16:37,019
we've learned during the past three

255
00:16:37,019 --> 00:16:40,380
years I'm sorry yeah I would like to

256
00:16:40,380 --> 00:16:41,880
talk about the lessons we've learned

257
00:16:41,880 --> 00:16:44,040
that during the past three years and

258
00:16:44,040 --> 00:16:47,040
this work is a joint work with many of

259
00:16:47,040 --> 00:16:48,959
our colleagues and from several

260
00:16:48,959 --> 00:16:51,060
different Institute and it can be shown

261
00:16:51,060 --> 00:16:52,560
here

262
00:16:52,560 --> 00:16:55,939
yeah that's scary

263
00:16:56,300 --> 00:17:00,959
and begin with 2019 we have begin to do

264
00:17:00,959 --> 00:17:02,579
the network machine learning research

265
00:17:02,579 --> 00:17:05,220
and at that time we have a research

266
00:17:05,220 --> 00:17:07,500
named easy which also named us to switch

267
00:17:07,500 --> 00:17:09,419
stream of machine learning and this work

268
00:17:09,419 --> 00:17:13,199
has been presented in how night 2019 and

269
00:17:13,199 --> 00:17:16,559
a mailing demonstrates the uh mapping of

270
00:17:16,559 --> 00:17:18,000
trained machine learning model to

271
00:17:18,000 --> 00:17:20,699
programmable network devices and for

272
00:17:20,699 --> 00:17:22,199
that work and mainly introduced four

273
00:17:22,199 --> 00:17:24,059
type of machine learning models which is

274
00:17:24,059 --> 00:17:25,919
decision tree support by custom machine

275
00:17:25,919 --> 00:17:28,220
k-means and knife base

276
00:17:28,220 --> 00:17:31,140
and for that work I'm mainly focus on

277
00:17:31,140 --> 00:17:33,960
two type of Target which is bme2 and net

278
00:17:33,960 --> 00:17:36,059
fpga Zoom

279
00:17:36,059 --> 00:17:38,580
and next page

280
00:17:38,580 --> 00:17:41,880
after three years we have many progress

281
00:17:41,880 --> 00:17:43,740
and currently we have a work named

282
00:17:43,740 --> 00:17:45,660
automating Network machine learning and

283
00:17:45,660 --> 00:17:48,900
it provides us a plantar framework that

284
00:17:48,900 --> 00:17:50,820
can help us to realize end-to-end

285
00:17:50,820 --> 00:17:54,780
automatic uh uh e-net machine learning

286
00:17:54,780 --> 00:17:57,360
deployment and with this framework we

287
00:17:57,360 --> 00:18:00,059
are able to Auto make it automatically

288
00:18:00,059 --> 00:18:01,860
train the machine learning model and

289
00:18:01,860 --> 00:18:04,380
also generate Auto generator P4 file

290
00:18:04,380 --> 00:18:06,120
which is different from previous work

291
00:18:06,120 --> 00:18:08,880
easy because previous work only supports

292
00:18:08,880 --> 00:18:12,419
static P4 file and for the framework is

293
00:18:12,419 --> 00:18:14,580
also able to Auto generate the P4

294
00:18:14,580 --> 00:18:16,860
runtime file and table entries that use

295
00:18:16,860 --> 00:18:19,140
for the generated P4 file

296
00:18:19,140 --> 00:18:22,280
and before the real deployment of our

297
00:18:22,280 --> 00:18:25,760
algorithm the the framework will auto

298
00:18:25,760 --> 00:18:29,520
test and validate the design on by using

299
00:18:29,520 --> 00:18:32,280
both Python and the software switch

300
00:18:32,280 --> 00:18:34,740
and finally after all this process the

301
00:18:34,740 --> 00:18:37,140
design will be finally Auto loaded to

302
00:18:37,140 --> 00:18:39,600
the hardware selected Hardware

303
00:18:39,600 --> 00:18:41,520
and currently our Frameworks support

304
00:18:41,520 --> 00:18:44,539
more than 12 models and

305
00:18:44,539 --> 00:18:47,280
supplementation of models and it support

306
00:18:47,280 --> 00:18:49,320
besides the easy support for type of

307
00:18:49,320 --> 00:18:50,820
model it also supports for example

308
00:18:50,820 --> 00:18:53,820
season 3 actually random Forest actually

309
00:18:53,820 --> 00:18:56,820
boost knife base k-means or an auto

310
00:18:56,820 --> 00:18:59,340
encoder and

311
00:18:59,340 --> 00:19:03,120
and actually for for this model it's not

312
00:19:03,120 --> 00:19:05,100
all the model that we can support it and

313
00:19:05,100 --> 00:19:06,720
we can even support more but we think

314
00:19:06,720 --> 00:19:09,660
currently is enough for this stage and

315
00:19:09,660 --> 00:19:11,400
we also generalize all these mapping

316
00:19:11,400 --> 00:19:13,380
Solutions into encode-based local space

317
00:19:13,380 --> 00:19:15,360
and direct mapping Solutions which can

318
00:19:15,360 --> 00:19:18,179
help us to uh use it to support new type

319
00:19:18,179 --> 00:19:20,280
of network machine learning algorithm

320
00:19:20,280 --> 00:19:22,559
and most importantly we support many

321
00:19:22,559 --> 00:19:24,600
different targets for example we support

322
00:19:24,600 --> 00:19:26,640
Commodities which Asic which is purely

323
00:19:26,640 --> 00:19:29,460
Commodities which with basic result uh

324
00:19:29,460 --> 00:19:31,740
modification for example Tofino and

325
00:19:31,740 --> 00:19:33,780
tofino2 and we also support for example

326
00:19:33,780 --> 00:19:35,400
targets like Papi which is running

327
00:19:35,400 --> 00:19:38,340
people program so Raspberry Pi and we

328
00:19:38,340 --> 00:19:40,380
currently support two types of compiler

329
00:19:40,380 --> 00:19:43,440
on it which is tapas and bme2 and we are

330
00:19:43,440 --> 00:19:46,380
also working on Nvidia spectrum and fpga

331
00:19:46,380 --> 00:19:49,980
so uh the whip here means working Pro

332
00:19:49,980 --> 00:19:53,820
progress process yeah the next slide

333
00:19:53,820 --> 00:19:56,400
so in this talk I would like to mainly

334
00:19:56,400 --> 00:19:58,440
talks about the challenges and solutions

335
00:19:58,440 --> 00:20:00,360
we face when we implement this

336
00:20:00,360 --> 00:20:01,500
in-network machine learning

337
00:20:01,500 --> 00:20:04,700
classification algorithms

338
00:20:06,360 --> 00:20:09,360
so the first challenge that I would like

339
00:20:09,360 --> 00:20:11,220
to talk about is about limit number of

340
00:20:11,220 --> 00:20:13,020
stages and for example for the

341
00:20:13,020 --> 00:20:15,539
Commodities which Asic they usually have

342
00:20:15,539 --> 00:20:17,580
a limit number of stage for example

343
00:20:17,580 --> 00:20:19,980
Tofino only have 12 stages

344
00:20:19,980 --> 00:20:23,220
and for this figure on the left hand

345
00:20:23,220 --> 00:20:25,799
side it mainly shows the typical

346
00:20:25,799 --> 00:20:28,200
realization of this stream model in the

347
00:20:28,200 --> 00:20:30,960
data plan and we can show that uh for

348
00:20:30,960 --> 00:20:33,299
each steps of the tree it generalized

349
00:20:33,299 --> 00:20:35,220
into different levels and for each level

350
00:20:35,220 --> 00:20:37,080
it will consume a certain number of

351
00:20:37,080 --> 00:20:40,860
stages so which means that uh for for

352
00:20:40,860 --> 00:20:42,600
the data applying program with limited

353
00:20:42,600 --> 00:20:46,500
number of stages it will limit the

354
00:20:46,500 --> 00:20:49,860
types of the tree model to be deployed

355
00:20:49,860 --> 00:20:52,380
and our solution is use parallelization

356
00:20:52,380 --> 00:20:54,539
which means that we can parallel execute

357
00:20:54,539 --> 00:20:56,940
the independent functions in our Network

358
00:20:56,940 --> 00:20:58,260
machine learning classification

359
00:20:58,260 --> 00:21:01,620
algorithm and

360
00:21:01,620 --> 00:21:04,980
uh yeah and for example for this example

361
00:21:04,980 --> 00:21:07,140
tree models for example we can parallel

362
00:21:07,140 --> 00:21:10,380
the uh use lookup table as feature

363
00:21:10,380 --> 00:21:12,660
tables so for example when feature

364
00:21:12,660 --> 00:21:16,559
inputs will be mapped to codes uh for

365
00:21:16,559 --> 00:21:18,419
each feature and then for the next stage

366
00:21:18,419 --> 00:21:20,340
which are three tables and these three

367
00:21:20,340 --> 00:21:24,299
table also execute data paralleling and

368
00:21:24,299 --> 00:21:26,520
for each tree table it will just collect

369
00:21:26,520 --> 00:21:29,580
the input from each feature table and

370
00:21:29,580 --> 00:21:31,799
just output the adder for the both of

371
00:21:31,799 --> 00:21:34,500
this tree or the probability or the

372
00:21:34,500 --> 00:21:36,840
depth of the tree and in the third stage

373
00:21:36,840 --> 00:21:39,320
for the decision table it will just

374
00:21:39,320 --> 00:21:41,640
combine all the volts from previous

375
00:21:41,640 --> 00:21:44,159
three tables and output the final

376
00:21:44,159 --> 00:21:46,620
classification results

377
00:21:46,620 --> 00:21:49,020
and the next slice

378
00:21:49,020 --> 00:21:51,299
and the Silicon challenge that I would

379
00:21:51,299 --> 00:21:53,220
like to talk about is about limited

380
00:21:53,220 --> 00:21:55,320
memory

381
00:21:55,320 --> 00:21:58,080
and for the limit memory we have two

382
00:21:58,080 --> 00:22:01,380
type of solution and first is use more

383
00:22:01,380 --> 00:22:03,539
efficient mapping solution for example

384
00:22:03,539 --> 00:22:06,059
on the first figure on the left hand

385
00:22:06,059 --> 00:22:07,740
side we can see that

386
00:22:07,740 --> 00:22:08,820
uh

387
00:22:08,820 --> 00:22:11,820
compare for the k-mean solution compared

388
00:22:11,820 --> 00:22:14,360
to uh for for the easy implementation

389
00:22:14,360 --> 00:22:17,820
versus classroom implementation in terms

390
00:22:17,820 --> 00:22:19,760
of table entries consumption we can see

391
00:22:19,760 --> 00:22:22,799
uh if the solution use a static number

392
00:22:22,799 --> 00:22:25,640
of table entries well the classroom

393
00:22:25,640 --> 00:22:28,919
table entrance consumption increase in

394
00:22:28,919 --> 00:22:30,919
order of magnitude

395
00:22:30,919 --> 00:22:34,080
as the model type increases

396
00:22:34,080 --> 00:22:37,080
and for in terms of the accuracy we can

397
00:22:37,080 --> 00:22:39,120
find that the easy solution is

398
00:22:39,120 --> 00:22:42,600
independent of model depths well the uh

399
00:22:42,600 --> 00:22:44,820
classroom solution is dependent with the

400
00:22:44,820 --> 00:22:46,799
model tabs this is mainly because the

401
00:22:46,799 --> 00:22:49,620
classroom use the tree like structure to

402
00:22:49,620 --> 00:22:52,620
store the table entries and well they

403
00:22:52,620 --> 00:22:54,299
either use lookup based solution so

404
00:22:54,299 --> 00:22:56,460
under these circumstances lookup is

405
00:22:56,460 --> 00:22:59,179
solution seems more efficient

406
00:22:59,179 --> 00:23:03,840
and the next solution is about using it

407
00:23:03,840 --> 00:23:06,600
seems a little bit obvious is using we

408
00:23:06,600 --> 00:23:08,700
can use RPM table or ternary table or

409
00:23:08,700 --> 00:23:10,679
range match table to replace the table

410
00:23:10,679 --> 00:23:13,320
that previously used exact match

411
00:23:13,320 --> 00:23:16,140
and actually when you realize it is not

412
00:23:16,140 --> 00:23:19,200
as simple as it looks like because it's

413
00:23:19,200 --> 00:23:23,159
not simply like using LPM in for for IP

414
00:23:23,159 --> 00:23:24,419
table because

415
00:23:24,419 --> 00:23:27,059
the input of the machine table of

416
00:23:27,059 --> 00:23:28,559
e-network machine learning

417
00:23:28,559 --> 00:23:30,720
classification algorithm as I mentioned

418
00:23:30,720 --> 00:23:32,580
in previous slides is for example for

419
00:23:32,580 --> 00:23:35,460
the tree table it's a concave codes from

420
00:23:35,460 --> 00:23:37,679
the feature tables so which means that

421
00:23:37,679 --> 00:23:40,220
we need to use our self-designed

422
00:23:40,220 --> 00:23:43,919
algorithm to map the exact match table

423
00:23:43,919 --> 00:23:46,440
to either Luca based table lookup table

424
00:23:46,440 --> 00:23:49,380
uh LPM table ternary table or range

425
00:23:49,380 --> 00:23:50,460
match table

426
00:23:50,460 --> 00:23:53,280
and we can even use Smart rope to

427
00:23:53,280 --> 00:23:54,900
further reduce the number of table

428
00:23:54,900 --> 00:23:59,159
entries in the uh in the table so for

429
00:23:59,159 --> 00:24:01,200
example we can just drop those less

430
00:24:01,200 --> 00:24:03,720
significant table entries for example

431
00:24:03,720 --> 00:24:05,520
there are some single thing stable

432
00:24:05,520 --> 00:24:07,440
entries that are different from others

433
00:24:07,440 --> 00:24:09,960
that stop a large range of table entries

434
00:24:09,960 --> 00:24:12,240
from merging into a single LPM table

435
00:24:12,240 --> 00:24:15,179
entry then we can selectively remove

436
00:24:15,179 --> 00:24:17,159
those table entries and from the figure

437
00:24:17,159 --> 00:24:21,179
we can find that we can reduce around 20

438
00:24:21,179 --> 00:24:22,980
of total table entries without

439
00:24:22,980 --> 00:24:26,100
significant influence of the machine

440
00:24:26,100 --> 00:24:28,559
learning classification accuracy

441
00:24:28,559 --> 00:24:31,380
and then next page

442
00:24:31,380 --> 00:24:33,559
and

443
00:24:33,559 --> 00:24:36,120
also when implementing Network machine

444
00:24:36,120 --> 00:24:38,220
learning classification we should also

445
00:24:38,220 --> 00:24:41,159
make sure that it should co-exit with

446
00:24:41,159 --> 00:24:44,159
the normal functioning of the network

447
00:24:44,159 --> 00:24:46,260
device

448
00:24:46,260 --> 00:24:48,780
so as shown in this framework we have a

449
00:24:48,780 --> 00:24:51,780
Content P4 block here which can help us

450
00:24:51,780 --> 00:24:56,039
to generate P4 file not only with the

451
00:24:56,039 --> 00:24:58,140
classification logic but also with the

452
00:24:58,140 --> 00:24:59,940
use case and this use case can be for

453
00:24:59,940 --> 00:25:02,460
example switch.p4 which is the L2 L3

454
00:25:02,460 --> 00:25:05,039
reference switch and it is designed by

455
00:25:05,039 --> 00:25:08,640
Intel Tofino and this program is

456
00:25:08,640 --> 00:25:11,520
currently used as a reference program uh

457
00:25:11,520 --> 00:25:13,440
for your network network computing

458
00:25:13,440 --> 00:25:15,059
algorithm

459
00:25:15,059 --> 00:25:19,200
and actually our uh our our United

460
00:25:19,200 --> 00:25:20,760
machine learning classification

461
00:25:20,760 --> 00:25:23,159
algorithm is parallely execute with the

462
00:25:23,159 --> 00:25:26,700
normal uh this L2 L3 switch and uh it do

463
00:25:26,700 --> 00:25:28,860
not consume a lot of resources so when

464
00:25:28,860 --> 00:25:30,720
we compare our Network machine learning

465
00:25:30,720 --> 00:25:33,240
realization model realization uh the

466
00:25:33,240 --> 00:25:34,799
resource consumption of these models we

467
00:25:34,799 --> 00:25:37,500
can see it's only five percent to 65 of

468
00:25:37,500 --> 00:25:41,100
this reference program so which is uh

469
00:25:41,100 --> 00:25:43,860
relatively small and makes it possible

470
00:25:43,860 --> 00:25:46,260
to coexist with the normal switch

471
00:25:46,260 --> 00:25:49,860
function and also we can see the latency

472
00:25:49,860 --> 00:25:51,779
of our e-network machine learning

473
00:25:51,779 --> 00:25:55,740
algorithms and we can find that uh if we

474
00:25:55,740 --> 00:25:57,299
only implement the machine learning

475
00:25:57,299 --> 00:25:59,760
algorithm and and it shows in the pink

476
00:25:59,760 --> 00:26:01,740
bar and we can see the latency is

477
00:26:01,740 --> 00:26:03,480
relatively small compared to this

478
00:26:03,480 --> 00:26:06,240
reference program and if we co-exist

479
00:26:06,240 --> 00:26:09,500
with the machine learning algorithm with

480
00:26:09,500 --> 00:26:12,840
uh with this reference program this L2

481
00:26:12,840 --> 00:26:15,720
L3 switch then for the for the the

482
00:26:15,720 --> 00:26:18,000
implementable model we can see as shown

483
00:26:18,000 --> 00:26:20,880
in Blue Bar the level of latency is same

484
00:26:20,880 --> 00:26:25,340
as the standard lung reference program

485
00:26:26,279 --> 00:26:28,700
next page

486
00:26:29,880 --> 00:26:32,900
yeah next

487
00:26:33,659 --> 00:26:35,100
and

488
00:26:35,100 --> 00:26:38,700
so no matter how we for example we use

489
00:26:38,700 --> 00:26:41,460
mapping techniques or use LPM different

490
00:26:41,460 --> 00:26:44,159
types of table types of table to reduce

491
00:26:44,159 --> 00:26:47,100
the table entries to save memory or we

492
00:26:47,100 --> 00:26:48,960
can do the parallelization to save

493
00:26:48,960 --> 00:26:52,020
stages still we need to trade have some

494
00:26:52,020 --> 00:26:55,740
trade-off uh parameter selection when we

495
00:26:55,740 --> 00:26:58,559
try to use machine learning algorithm

496
00:26:58,559 --> 00:27:00,240
for e-network classification and for

497
00:27:00,240 --> 00:27:02,640
example for the as we shown in this

498
00:27:02,640 --> 00:27:05,520
radar graph so if we want to make sure

499
00:27:05,520 --> 00:27:08,220
that the generate model have a same

500
00:27:08,220 --> 00:27:10,500
level of memory consumption and for

501
00:27:10,500 --> 00:27:12,240
example if we want to use more features

502
00:27:12,240 --> 00:27:15,059
than the number of trees is and depth is

503
00:27:15,059 --> 00:27:17,100
limit and if we want to have more trees

504
00:27:17,100 --> 00:27:19,860
then we can only use a limit number of

505
00:27:19,860 --> 00:27:22,440
features and or if we we want to have a

506
00:27:22,440 --> 00:27:25,200
large number of tabs and uh feature and

507
00:27:25,200 --> 00:27:29,539
trees allow this limit

508
00:27:29,820 --> 00:27:34,620
so uh actually one using this framework

509
00:27:34,620 --> 00:27:39,080
actually we can play with it and

510
00:27:39,600 --> 00:27:41,600
um

511
00:28:02,880 --> 00:28:05,159
it stops

512
00:28:05,159 --> 00:28:08,179
presentation here

513
00:28:09,960 --> 00:28:13,279
yeah I don't know

514
00:28:15,419 --> 00:28:18,419
connection

515
00:28:18,659 --> 00:28:22,159
uh are you connected

516
00:28:34,020 --> 00:28:37,580
okay uh

517
00:28:37,919 --> 00:28:41,480
can you stop and start again maybe

518
00:28:41,880 --> 00:28:44,340
oh you know I said you wanna try to ATF

519
00:28:44,340 --> 00:28:45,900
network instead of anymore

520
00:28:45,900 --> 00:28:48,380
uh

521
00:28:50,400 --> 00:28:53,840
are you gonna get through your phone

522
00:28:54,179 --> 00:28:56,720
okay

523
00:28:58,880 --> 00:29:03,659
is it back oh it's back okay so no wait

524
00:29:03,659 --> 00:29:06,020
oh

525
00:29:06,480 --> 00:29:08,960
please

526
00:29:10,440 --> 00:29:12,240
this is where you should say which slide

527
00:29:12,240 --> 00:29:14,779
are we on

528
00:29:17,400 --> 00:29:21,240
okay I have them yeah thanks a lot yeah

529
00:29:21,240 --> 00:29:23,039
so actually when you have the framework

530
00:29:23,039 --> 00:29:26,039
you can play with it and based on the

531
00:29:26,039 --> 00:29:28,140
use case that you've select and you can

532
00:29:28,140 --> 00:29:30,960
select the set of hyper parameters that

533
00:29:30,960 --> 00:29:33,360
that best have the best performance on

534
00:29:33,360 --> 00:29:34,559
your use case

535
00:29:34,559 --> 00:29:37,200
and when we look at the max number of

536
00:29:37,200 --> 00:29:39,299
features that we are supported for

537
00:29:39,299 --> 00:29:41,880
example for the three models for example

538
00:29:41,880 --> 00:29:43,500
the century accessibles and random

539
00:29:43,500 --> 00:29:45,480
forests or random Forest hybrid we can

540
00:29:45,480 --> 00:29:49,320
see that if we use cosmetics headers and

541
00:29:49,320 --> 00:29:51,899
we can support more than 60 for some

542
00:29:51,899 --> 00:29:53,340
cases we can support more than 60

543
00:29:53,340 --> 00:29:56,640
features and if the features are stored

544
00:29:56,640 --> 00:29:58,500
in ASCII format inside the package then

545
00:29:58,500 --> 00:30:01,020
we can support uh only around 30

546
00:30:01,020 --> 00:30:04,260
features and if it has joined Implement

547
00:30:04,260 --> 00:30:06,899
with the reference program reference

548
00:30:06,899 --> 00:30:08,640
which program then we can only support

549
00:30:08,640 --> 00:30:12,840
around 15 features and if we use the

550
00:30:12,840 --> 00:30:14,279
model that use different mapping

551
00:30:14,279 --> 00:30:16,020
techniques for example lookup based

552
00:30:16,020 --> 00:30:19,140
solution uh like a model like subtract

553
00:30:19,140 --> 00:30:21,960
machine base and k-means and it can only

554
00:30:21,960 --> 00:30:24,960
support less than 15 features and this

555
00:30:24,960 --> 00:30:28,520
is also use case dependent

556
00:30:30,720 --> 00:30:35,960
sorry the the the next slice thank you

557
00:30:35,960 --> 00:30:38,760
and also when we deploy machine learning

558
00:30:38,760 --> 00:30:40,620
inside the network we should also make

559
00:30:40,620 --> 00:30:43,380
sure that we can update the model and we

560
00:30:43,380 --> 00:30:45,360
should do the runtime retraining and

561
00:30:45,360 --> 00:30:48,659
updates and our popular projects mainly

562
00:30:48,659 --> 00:30:50,760
focus on this problem and we mainly

563
00:30:50,760 --> 00:30:53,039
solve this problem by using digest and

564
00:30:53,039 --> 00:30:55,320
shadow updates so which means that when

565
00:30:55,320 --> 00:30:57,000
e-network machine learning is deployed

566
00:30:57,000 --> 00:30:58,919
in the data plane and it will auto

567
00:30:58,919 --> 00:31:01,380
continue sending digest information to

568
00:31:01,380 --> 00:31:03,600
the control plan and the control plan

569
00:31:03,600 --> 00:31:05,399
will collect this information and

570
00:31:05,399 --> 00:31:08,460
combine with existing training data and

571
00:31:08,460 --> 00:31:10,500
use on supervised learning algorithm to

572
00:31:10,500 --> 00:31:13,860
to to relabel this data set and it will

573
00:31:13,860 --> 00:31:17,399
also unserver to uh you and this

574
00:31:17,399 --> 00:31:19,320
generated data will be faded to the

575
00:31:19,320 --> 00:31:21,240
planter framework to retrain and

576
00:31:21,240 --> 00:31:23,940
regenerate the table entries

577
00:31:23,940 --> 00:31:26,220
and actually this generated table

578
00:31:26,220 --> 00:31:28,260
entries will be loaded through the data

579
00:31:28,260 --> 00:31:30,480
plan by using shadow updates so when

580
00:31:30,480 --> 00:31:32,940
loading this it means we only update the

581
00:31:32,940 --> 00:31:35,460
table entries and we do not touch the P4

582
00:31:35,460 --> 00:31:36,240
program

583
00:31:36,240 --> 00:31:38,520
and by using Shadow update we can do the

584
00:31:38,520 --> 00:31:42,000
runtime update and without interrupt is

585
00:31:42,000 --> 00:31:43,799
normal functioning of network function

586
00:31:43,799 --> 00:31:46,440
and as well as the normal functioning of

587
00:31:46,440 --> 00:31:48,539
classification service

588
00:31:48,539 --> 00:31:51,860
and the next slice

589
00:31:52,500 --> 00:31:54,720
uh next next

590
00:31:54,720 --> 00:31:58,320
thank you and also we should make sure

591
00:31:58,320 --> 00:31:59,940
that our in-network machine learning

592
00:31:59,940 --> 00:32:03,080
classification I have a good performance

593
00:32:03,080 --> 00:32:06,659
and so this is mainly guaranteed by the

594
00:32:06,659 --> 00:32:08,760
power design which fits the commodity

595
00:32:08,760 --> 00:32:10,980
programmers which is like well

596
00:32:10,980 --> 00:32:13,740
so for all our design we do not use

597
00:32:13,740 --> 00:32:16,620
recirculation or resubmission and we

598
00:32:16,620 --> 00:32:18,960
have no control plan dependencies and we

599
00:32:18,960 --> 00:32:22,440
do not use special modules like uh

600
00:32:22,440 --> 00:32:24,720
customize which is we purely use

601
00:32:24,720 --> 00:32:26,520
commodity switch ethic

602
00:32:26,520 --> 00:32:29,460
so this means that we can achieve a full

603
00:32:29,460 --> 00:32:32,700
line rate and with where we've tested on

604
00:32:32,700 --> 00:32:36,000
a 64 ports Tofino switch and verify that

605
00:32:36,000 --> 00:32:39,539
and we can also achieve sub microsecond

606
00:32:39,539 --> 00:32:42,720
latency and our model have same or less

607
00:32:42,720 --> 00:32:44,460
latency compared to the reference

608
00:32:44,460 --> 00:32:47,399
program also as shown in previous slides

609
00:32:47,399 --> 00:32:51,020
and next slice

610
00:32:52,860 --> 00:32:56,460
and uh even though the model of

611
00:32:56,460 --> 00:32:57,600
e-network machine learning

612
00:32:57,600 --> 00:32:59,460
classification the model size is still

613
00:32:59,460 --> 00:33:03,179
be limit and it's impossible still

614
00:33:03,179 --> 00:33:04,799
impossible for us to implement some

615
00:33:04,799 --> 00:33:07,799
model like random forest with 200 200

616
00:33:07,799 --> 00:33:10,799
trees and input 200 features or with 100

617
00:33:10,799 --> 00:33:12,000
apps

618
00:33:12,000 --> 00:33:14,519
but what we can do is we can use hybrid

619
00:33:14,519 --> 00:33:17,820
deployment to achieve a high inference

620
00:33:17,820 --> 00:33:19,620
accuracy so which means the hybrid

621
00:33:19,620 --> 00:33:21,779
deployment means we deploy a small model

622
00:33:21,779 --> 00:33:23,940
inside the network in the data plan we

623
00:33:23,940 --> 00:33:26,820
use a large model as a backhand server

624
00:33:26,820 --> 00:33:30,480
and in the switch we use based on the

625
00:33:30,480 --> 00:33:33,419
decision confidence we can decide if the

626
00:33:33,419 --> 00:33:35,279
decision is directly been made on the

627
00:33:35,279 --> 00:33:37,260
switch or the packet will be forward to

628
00:33:37,260 --> 00:33:39,419
the backend for further process

629
00:33:39,419 --> 00:33:44,480
and next slice next slice

630
00:33:45,019 --> 00:33:47,340
and for example for a normal detection

631
00:33:47,340 --> 00:33:51,360
use case for the right hand side upper

632
00:33:51,360 --> 00:33:53,340
right hand side figure we can see if we

633
00:33:53,340 --> 00:33:56,580
select the x-axis for the switch

634
00:33:56,580 --> 00:33:59,460
confidence threshold to be 0.9 so which

635
00:33:59,460 --> 00:34:03,779
means that the uh decision of more than

636
00:34:03,779 --> 00:34:05,700
70 percent of traffic can be directly

637
00:34:05,700 --> 00:34:08,460
made on the switch well we can see that

638
00:34:08,460 --> 00:34:12,599
the system hybrid system accuracy in the

639
00:34:12,599 --> 00:34:14,159
blue line in the left hand side figure

640
00:34:14,159 --> 00:34:17,099
is almost close to the Baseline so the

641
00:34:17,099 --> 00:34:19,199
Baseline model is deployed on the server

642
00:34:19,199 --> 00:34:21,540
without the resource constraint so this

643
00:34:21,540 --> 00:34:23,580
means that our hybrid deployment can

644
00:34:23,580 --> 00:34:25,619
achieve close to Optimal classification

645
00:34:25,619 --> 00:34:27,659
result will significantly reduce the

646
00:34:27,659 --> 00:34:29,219
amount of traffic flowing to the back

647
00:34:29,219 --> 00:34:30,418
end

648
00:34:30,418 --> 00:34:33,839
and the next slide

649
00:34:33,839 --> 00:34:36,780
so in summary so our work shows the

650
00:34:36,780 --> 00:34:38,280
in-network machine learning

651
00:34:38,280 --> 00:34:40,139
classification is feasible

652
00:34:40,139 --> 00:34:42,179
and we can run these machine learning

653
00:34:42,179 --> 00:34:44,460
models and Community switch with full

654
00:34:44,460 --> 00:34:47,580
line rate and we are also be able to

655
00:34:47,580 --> 00:34:49,320
make sure that this machine learning

656
00:34:49,320 --> 00:34:51,659
algorithm is coexist with the use case

657
00:34:51,659 --> 00:34:53,339
and the normal functioning of this

658
00:34:53,339 --> 00:34:54,960
network device

659
00:34:54,960 --> 00:34:58,020
and most of the model is scalable and if

660
00:34:58,020 --> 00:35:00,780
you want to have a extremely high

661
00:35:00,780 --> 00:35:03,420
accuracy or very large model then we can

662
00:35:03,420 --> 00:35:05,520
use hybrid deployment to deal with this

663
00:35:05,520 --> 00:35:06,540
problem

664
00:35:06,540 --> 00:35:10,079
and we have where I've been uh for

665
00:35:10,079 --> 00:35:11,760
several use cases for example the

666
00:35:11,760 --> 00:35:13,920
anomaly detection use case the iot

667
00:35:13,920 --> 00:35:17,820
Gateway smart iot Gateway and we also uh

668
00:35:17,820 --> 00:35:19,859
try the high frequency high frequency

669
00:35:19,859 --> 00:35:21,540
control trading use case

670
00:35:21,540 --> 00:35:24,000
and we are also looking for new use

671
00:35:24,000 --> 00:35:26,880
cases and if you have any ideas we are

672
00:35:26,880 --> 00:35:29,339
really happy to discuss about it

673
00:35:29,339 --> 00:35:30,420
so

674
00:35:30,420 --> 00:35:32,880
that's mainly all for this presentation

675
00:35:32,880 --> 00:35:35,220
and thank you I'm happy to take your

676
00:35:35,220 --> 00:35:37,520
questions

677
00:35:38,700 --> 00:35:41,760
um thank you very much for this very

678
00:35:41,760 --> 00:35:45,960
uh interesting uh Lessons Learned uh any

679
00:35:45,960 --> 00:35:49,619
questions uh I don't see anyone on the

680
00:35:49,619 --> 00:35:52,020
uh yes

681
00:35:52,020 --> 00:35:55,200
I keep please

682
00:35:55,200 --> 00:35:58,260
we have somebody physically here

683
00:35:58,260 --> 00:36:00,800
that's me

684
00:36:01,680 --> 00:36:04,020
uh thanks for the talk I have a rather

685
00:36:04,020 --> 00:36:06,480
specific question so on I think on one

686
00:36:06,480 --> 00:36:09,839
slide you mentioned uh that uh so with

687
00:36:09,839 --> 00:36:11,460
the resource consumption and all that

688
00:36:11,460 --> 00:36:13,920
stuff that you had like that you could

689
00:36:13,920 --> 00:36:15,440
Implement

690
00:36:15,440 --> 00:36:18,720
more features for this one approach than

691
00:36:18,720 --> 00:36:20,460
fewer features with the other approach

692
00:36:20,460 --> 00:36:22,320
and then if you combine it with the

693
00:36:22,320 --> 00:36:25,980
switch program then you got basically on

694
00:36:25,980 --> 00:36:28,560
the same level for both uh versions that

695
00:36:28,560 --> 00:36:30,720
you had and there I was wondering what

696
00:36:30,720 --> 00:36:33,359
kind of resources or resource

697
00:36:33,359 --> 00:36:34,859
constraints there actually is the

698
00:36:34,859 --> 00:36:37,619
limited limiting factor so is it then

699
00:36:37,619 --> 00:36:40,619
basically the sequential numbers of

700
00:36:40,619 --> 00:36:42,359
steps that have to be executed or other

701
00:36:42,359 --> 00:36:43,940
than specific

702
00:36:43,940 --> 00:36:46,740
constraints in your program that yeah

703
00:36:46,740 --> 00:36:48,420
limit the number of features that you

704
00:36:48,420 --> 00:36:50,520
can Implement okay thanks so for the

705
00:36:50,520 --> 00:36:54,180
constraints so actually for our

706
00:36:54,180 --> 00:36:56,339
solution of e-network machine learning

707
00:36:56,339 --> 00:36:57,960
algorithms there are several types of

708
00:36:57,960 --> 00:37:00,900
constraints and the most common one is

709
00:37:00,900 --> 00:37:04,079
stage consumption so if we increase

710
00:37:04,079 --> 00:37:05,880
either for example the number of

711
00:37:05,880 --> 00:37:08,400
features used or number of three numbers

712
00:37:08,400 --> 00:37:11,400
uh I just use random Force as an example

713
00:37:11,400 --> 00:37:12,900
if we increase the number of feature

714
00:37:12,900 --> 00:37:15,780
input and if we increase the depth of

715
00:37:15,780 --> 00:37:18,540
the tree and if we increase the number

716
00:37:18,540 --> 00:37:20,040
of trees then

717
00:37:20,040 --> 00:37:22,740
the number of stage will increase this

718
00:37:22,740 --> 00:37:25,079
is because for each stage there is a

719
00:37:25,079 --> 00:37:27,660
limit amount of supported tables if you

720
00:37:27,660 --> 00:37:29,579
use more than this number of tables then

721
00:37:29,579 --> 00:37:32,339
it will cause extra stage no matter how

722
00:37:32,339 --> 00:37:35,640
you paralyze IQ execute these tables and

723
00:37:35,640 --> 00:37:37,740
also the Mind Race is another constraint

724
00:37:37,740 --> 00:37:40,380
because for example for some of the

725
00:37:40,380 --> 00:37:43,500
table for example as I mentioned in the

726
00:37:43,500 --> 00:37:45,300
uh

727
00:37:45,300 --> 00:37:47,880
uh The Ensemble three models we can see

728
00:37:47,880 --> 00:37:50,099
there is a decision table and usually if

729
00:37:50,099 --> 00:37:51,839
there are too many trees and the

730
00:37:51,839 --> 00:37:53,460
decision table will cause loads of

731
00:37:53,460 --> 00:37:55,619
memory and if there are too much memory

732
00:37:55,619 --> 00:37:59,040
then it will also cause extra stages

733
00:37:59,040 --> 00:38:02,880
and also uh we can see that for for if

734
00:38:02,880 --> 00:38:05,040
you use customers hide us for the three

735
00:38:05,040 --> 00:38:06,660
models we can support more than 60

736
00:38:06,660 --> 00:38:11,099
features but for uh ask if the feature

737
00:38:11,099 --> 00:38:13,200
is stored in ASCII format then we can

738
00:38:13,200 --> 00:38:15,320
only suppose 30 features this is because

739
00:38:15,320 --> 00:38:17,820
the parts also have

740
00:38:17,820 --> 00:38:20,760
constraints resource constraints and we

741
00:38:20,760 --> 00:38:23,900
cannot support on limit amount of

742
00:38:23,900 --> 00:38:26,540
protocols or headers

743
00:38:26,540 --> 00:38:29,700
in the header field so

744
00:38:29,700 --> 00:38:34,140
these are the stage memory and uh and uh

745
00:38:34,140 --> 00:38:36,900
and the head of uh and parser constraint

746
00:38:36,900 --> 00:38:38,640
are mainly constraints for our Network

747
00:38:38,640 --> 00:38:40,500
machine learning algorithms of course

748
00:38:40,500 --> 00:38:43,020
for the general speaking of e-network

749
00:38:43,020 --> 00:38:44,280
machine learning classification

750
00:38:44,280 --> 00:38:45,900
realization there are more constraints

751
00:38:45,900 --> 00:38:49,140
for example uh for for most of the

752
00:38:49,140 --> 00:38:51,000
switches they do not support and

753
00:38:51,000 --> 00:38:53,400
floating Point numbers and they do not

754
00:38:53,400 --> 00:38:57,359
uh support uh for example some type of

755
00:38:57,359 --> 00:38:58,859
mathematical operations for example

756
00:38:58,859 --> 00:39:00,480
multiplication and division operations

757
00:39:00,480 --> 00:39:02,700
these are other constraints

758
00:39:02,700 --> 00:39:06,300
but our solution can can can just do not

759
00:39:06,300 --> 00:39:09,140
use these operations

760
00:39:12,000 --> 00:39:14,520
any other questions uh we can send the

761
00:39:14,520 --> 00:39:17,160
questions on the list I'm particularly

762
00:39:17,160 --> 00:39:18,839
interested by the way by the iot

763
00:39:18,839 --> 00:39:21,240
implementation so I'm going to read the

764
00:39:21,240 --> 00:39:24,240
paper for sure uh thank you so very much

765
00:39:24,240 --> 00:39:26,280
very Jose we have one more question in

766
00:39:26,280 --> 00:39:27,839
the room oh one more okay because the

767
00:39:27,839 --> 00:39:30,480
person was not on the queue

768
00:39:30,480 --> 00:39:32,640
okay uh thank you for your good

769
00:39:32,640 --> 00:39:36,119
presentation and your good paper so in

770
00:39:36,119 --> 00:39:39,240
South Korea we had a similar project at

771
00:39:39,240 --> 00:39:42,180
the case we utilized the team learning

772
00:39:42,180 --> 00:39:45,839
or CNN RNN to classify traffic and we

773
00:39:45,839 --> 00:39:48,839
found it works so I'm wondering if You

774
00:39:48,839 --> 00:39:52,020
Hinder the new or three people are new

775
00:39:52,020 --> 00:39:55,140
picture of the traffic because for

776
00:39:55,140 --> 00:39:57,780
example headquarters were some the or

777
00:39:57,780 --> 00:40:00,180
better person make some new or traffic

778
00:40:00,180 --> 00:40:03,180
for violating the network so in this

779
00:40:03,180 --> 00:40:06,480
case how can you handle this new 3p one

780
00:40:06,480 --> 00:40:08,839
new picture over data

781
00:40:08,839 --> 00:40:11,700
uh so which have type of data I'm sorry

782
00:40:11,700 --> 00:40:16,560
so you use the uh machine learning so it

783
00:40:16,560 --> 00:40:20,700
means that uh it or or training data and

784
00:40:20,700 --> 00:40:24,060
find some the wisdom from existing data

785
00:40:24,060 --> 00:40:27,200
so how about the new data or new picture

786
00:40:27,200 --> 00:40:29,280
new traffic

787
00:40:29,280 --> 00:40:33,359
so in this case can you handle the same

788
00:40:33,359 --> 00:40:36,079
picture yeah feature or picture

789
00:40:36,079 --> 00:40:40,079
uh currently we

790
00:40:40,079 --> 00:40:43,380
didn't pass the use case with features

791
00:40:43,380 --> 00:40:45,359
but generally speaking because inside

792
00:40:45,359 --> 00:40:47,520
the network the feature is not you know

793
00:40:47,520 --> 00:40:50,099
for if it is not packet level but flow

794
00:40:50,099 --> 00:40:52,740
level or and also in the real use case

795
00:40:52,740 --> 00:40:56,820
that the the you know the the the packet

796
00:40:56,820 --> 00:40:58,400
will go through different

797
00:40:58,400 --> 00:41:00,320
routing paths

798
00:41:00,320 --> 00:41:03,180
so that's the reason why I didn't we

799
00:41:03,180 --> 00:41:06,000
didn't touch it yet but there is some

800
00:41:06,000 --> 00:41:06,720
work

801
00:41:06,720 --> 00:41:08,579
that's

802
00:41:08,579 --> 00:41:12,420
that's I remember that using a design

803
00:41:12,420 --> 00:41:14,280
tree and run for it and neural network

804
00:41:14,280 --> 00:41:16,680
for your network classification that

805
00:41:16,680 --> 00:41:20,339
have some explanation about how to deal

806
00:41:20,339 --> 00:41:22,619
with how to do the image classification

807
00:41:22,619 --> 00:41:25,560
and you can try to find them

808
00:41:25,560 --> 00:41:29,339
and I remembered what they use is what

809
00:41:29,339 --> 00:41:31,140
they currently implemented is only on PM

810
00:41:31,140 --> 00:41:34,200
between environment uh dma tool

811
00:41:34,200 --> 00:41:36,240
a software switch

812
00:41:36,240 --> 00:41:38,660
so this is

813
00:41:38,660 --> 00:41:42,480
my my understand about the image okay

814
00:41:42,480 --> 00:41:44,940
thank you

815
00:41:44,940 --> 00:41:46,079
okay

816
00:41:46,079 --> 00:41:49,680
um for for moving around with time so

817
00:41:49,680 --> 00:41:52,780
thank you thank you again and uh we'll

818
00:41:52,780 --> 00:41:53,160
[Music]

819
00:41:53,160 --> 00:41:55,160
um

820
00:41:55,260 --> 00:41:56,820
make sure

821
00:41:56,820 --> 00:42:01,400
follow up and and great work

822
00:42:03,480 --> 00:42:06,540
so like you want to share the next

823
00:42:06,540 --> 00:42:07,920
presentation

824
00:42:07,920 --> 00:42:10,940
if you find it

825
00:42:13,040 --> 00:42:16,980
this is being shared are you sharing uh

826
00:42:16,980 --> 00:42:20,240
no you're you're sharing

827
00:42:26,760 --> 00:42:29,240
okay I think it works

828
00:42:29,240 --> 00:42:32,339
uh it's um

829
00:42:32,339 --> 00:42:34,500
Ike is doing it

830
00:42:34,500 --> 00:42:36,540
so just just a quick reminder if you

831
00:42:36,540 --> 00:42:38,700
want to ask questions uh use the metico

832
00:42:38,700 --> 00:42:42,060
uh queue just so that Mario Jose is

833
00:42:42,060 --> 00:42:43,740
managing the queue remotely it's not

834
00:42:43,740 --> 00:42:46,800
done from here so uh so they know who is

835
00:42:46,800 --> 00:42:50,280
lining up to ask questions thank you

836
00:42:50,280 --> 00:42:52,680
okay uh hi again

837
00:42:52,680 --> 00:42:55,079
um I'm icon sir and this is Joint work

838
00:42:55,079 --> 00:42:58,319
with Dirk and Klaus and for those of you

839
00:42:58,319 --> 00:43:01,319
who have been following the research

840
00:43:01,319 --> 00:43:03,540
group a little bit longer this is

841
00:43:03,540 --> 00:43:05,460
actually something that has come out of

842
00:43:05,460 --> 00:43:08,520
our transport issues draft that we had

843
00:43:08,520 --> 00:43:11,940
had at this research group earlier and

844
00:43:11,940 --> 00:43:14,880
what we now try to do is basically

845
00:43:14,880 --> 00:43:17,099
um yeah have a bit more thoughts on how

846
00:43:17,099 --> 00:43:19,980
we can actually combine or what is the

847
00:43:19,980 --> 00:43:21,780
interplay between transport protocols

848
00:43:21,780 --> 00:43:24,300
the end-to-end principle and Computing

849
00:43:24,300 --> 00:43:26,520
in the network and this has resulted in

850
00:43:26,520 --> 00:43:28,819
the paper that we've presented last week

851
00:43:28,819 --> 00:43:32,460
at the new IP and Beyond Workshop

852
00:43:32,460 --> 00:43:35,460
and yeah today I would like to give you

853
00:43:35,460 --> 00:43:37,319
um basically also the the main ideas

854
00:43:37,319 --> 00:43:40,020
that I presented there as well as some

855
00:43:40,020 --> 00:43:41,700
additional thoughts that came up in

856
00:43:41,700 --> 00:43:44,760
discussions there at that Workshop so

857
00:43:44,760 --> 00:43:46,800
basically an improved version of the

858
00:43:46,800 --> 00:43:51,420
talk that I held last week in mixing

859
00:43:51,420 --> 00:43:53,040
okay

860
00:43:53,040 --> 00:43:55,079
um I think in in this context where

861
00:43:55,079 --> 00:43:57,660
we're here uh it's pretty easy to say

862
00:43:57,660 --> 00:43:59,280
that we can see that the networks are

863
00:43:59,280 --> 00:44:01,619
evolving from being dump networks to

864
00:44:01,619 --> 00:44:04,200
being smarter networks uh previously or

865
00:44:04,200 --> 00:44:06,599
in the early days we could assume that

866
00:44:06,599 --> 00:44:08,520
if we had a packet coming into the

867
00:44:08,520 --> 00:44:09,660
network

868
00:44:09,660 --> 00:44:13,260
um maybe uh send from host a so this

869
00:44:13,260 --> 00:44:15,060
yellow packet maybe

870
00:44:15,060 --> 00:44:16,740
um that it would also come out on the

871
00:44:16,740 --> 00:44:20,940
other side mainly unchanged and this is

872
00:44:20,940 --> 00:44:23,280
then often seen that the network is just

873
00:44:23,280 --> 00:44:25,619
a gunpipe that forwards the packets

874
00:44:25,619 --> 00:44:28,920
and this is somewhat encompassed in the

875
00:44:28,920 --> 00:44:31,260
end-to-end principle and

876
00:44:31,260 --> 00:44:33,359
um is it typically also used as a basis

877
00:44:33,359 --> 00:44:35,400
for transport protocols so for example

878
00:44:35,400 --> 00:44:38,460
in TCP when we think about the reliable

879
00:44:38,460 --> 00:44:42,180
reliability aspects it's simply that our

880
00:44:42,180 --> 00:44:44,160
TCP assumes that the packets are

881
00:44:44,160 --> 00:44:46,140
unchanged in the network

882
00:44:46,140 --> 00:44:49,560
and now with coin this changes or this

883
00:44:49,560 --> 00:44:52,200
can change as we can do more stuff in

884
00:44:52,200 --> 00:44:54,300
the network so maybe change the color of

885
00:44:54,300 --> 00:44:56,940
the packets and thus we can no longer

886
00:44:56,940 --> 00:44:58,560
speak of the network as being just a

887
00:44:58,560 --> 00:45:01,440
dump pipe and this also breaks then

888
00:45:01,440 --> 00:45:03,660
assumptions for the transport layer and

889
00:45:03,660 --> 00:45:05,400
that we can now make changes in the

890
00:45:05,400 --> 00:45:06,359
network

891
00:45:06,359 --> 00:45:09,119
and this has already been discussed for

892
00:45:09,119 --> 00:45:10,980
example in the recent hot Nets paper so

893
00:45:10,980 --> 00:45:12,599
we are not the only ones thinking about

894
00:45:12,599 --> 00:45:14,220
this topic

895
00:45:14,220 --> 00:45:16,140
um but what we now try to do basically

896
00:45:16,140 --> 00:45:19,200
is to think about a more general or have

897
00:45:19,200 --> 00:45:20,819
more General considerations regarding

898
00:45:20,819 --> 00:45:23,700
this topic so basically uh what we would

899
00:45:23,700 --> 00:45:25,800
actually need to have a coin-enable

900
00:45:25,800 --> 00:45:28,500
transport protocol that ideally also

901
00:45:28,500 --> 00:45:30,780
respects the end-to-end principle

902
00:45:30,780 --> 00:45:34,380
and just to get your uh

903
00:45:34,380 --> 00:45:36,660
thoughts right for the stock here so I

904
00:45:36,660 --> 00:45:39,000
won't provide a lot of answers but

905
00:45:39,000 --> 00:45:41,780
mainly I will raise a lot of questions

906
00:45:41,780 --> 00:45:44,640
that perhaps we as a research Community

907
00:45:44,640 --> 00:45:47,220
have to answer eventually and in the

908
00:45:47,220 --> 00:45:48,780
following I would first like to go back

909
00:45:48,780 --> 00:45:51,240
to the end-to-end principle and then

910
00:45:51,240 --> 00:45:53,339
talk a bit about a few considerations

911
00:45:53,339 --> 00:45:55,260
that we had how

912
00:45:55,260 --> 00:45:57,480
um such solution or such a transport

913
00:45:57,480 --> 00:46:00,180
protocol looked like and then afterwards

914
00:46:00,180 --> 00:46:02,819
also have a few more thoughts on this

915
00:46:02,819 --> 00:46:04,079
whole topic

916
00:46:04,079 --> 00:46:06,240
so starting with the end-to-end

917
00:46:06,240 --> 00:46:09,540
principle it goes back to a paper from

918
00:46:09,540 --> 00:46:12,720
the 1980s so a bit so the this principle

919
00:46:12,720 --> 00:46:15,480
is actually older than myself so um

920
00:46:15,480 --> 00:46:18,420
probably some people in the room longer

921
00:46:18,420 --> 00:46:21,480
nowhere perhaps longer than myself

922
00:46:21,480 --> 00:46:23,220
um and the end-to-end principle

923
00:46:23,220 --> 00:46:25,260
basically states that a function can

924
00:46:25,260 --> 00:46:27,359
completely and correctly only be

925
00:46:27,359 --> 00:46:29,579
implemented with the knowledge of the

926
00:46:29,579 --> 00:46:32,280
end of of the applications at the

927
00:46:32,280 --> 00:46:34,560
endpoints so basically saying that the

928
00:46:34,560 --> 00:46:36,000
endpoints have to know what's going on

929
00:46:36,000 --> 00:46:38,460
inside the network as well and this is

930
00:46:38,460 --> 00:46:41,040
then seemingly at odds with the coin

931
00:46:41,040 --> 00:46:43,560
with coin because

932
00:46:43,560 --> 00:46:46,140
um yeah in command we would assume that

933
00:46:46,140 --> 00:46:48,000
something might happen in the network

934
00:46:48,000 --> 00:46:50,520
however there's also a second sentence

935
00:46:50,520 --> 00:46:52,319
actually two sentences further down in

936
00:46:52,319 --> 00:46:54,839
that paper which then states that an

937
00:46:54,839 --> 00:46:57,180
incomplete version of the function can

938
00:46:57,180 --> 00:46:58,740
also be useful as a performance

939
00:46:58,740 --> 00:47:00,300
enhancement

940
00:47:00,300 --> 00:47:02,940
um if it's provided by the network and

941
00:47:02,940 --> 00:47:05,640
now if we think about coin as being such

942
00:47:05,640 --> 00:47:07,619
a performance enhancement then this

943
00:47:07,619 --> 00:47:10,260
could again align uh coin with the

944
00:47:10,260 --> 00:47:12,500
end-to-end principle

945
00:47:12,500 --> 00:47:15,359
and yeah in this context we then thought

946
00:47:15,359 --> 00:47:17,640
about or

947
00:47:17,640 --> 00:47:19,980
wondered a bit more about the

948
00:47:19,980 --> 00:47:21,480
relationship between coin and the

949
00:47:21,480 --> 00:47:23,339
end-to-end principle and in that context

950
00:47:23,339 --> 00:47:25,740
mainly focused on two aspects and that

951
00:47:25,740 --> 00:47:27,359
is first the location of computations

952
00:47:27,359 --> 00:47:29,700
and then as a second aspect what kind of

953
00:47:29,700 --> 00:47:33,300
computations can actually be performed

954
00:47:33,300 --> 00:47:36,180
and regarding the location I think they

955
00:47:36,180 --> 00:47:39,240
are even in this room if I would ask you

956
00:47:39,240 --> 00:47:41,339
what kind of computations would you

957
00:47:41,339 --> 00:47:43,680
consider to be coin computations I would

958
00:47:43,680 --> 00:47:46,200
get probably let's see maybe 30

959
00:47:46,200 --> 00:47:48,599
different answers probably

960
00:47:48,599 --> 00:47:50,640
um so a strict definition of coin would

961
00:47:50,640 --> 00:47:52,880
be that we can for example only compute

962
00:47:52,880 --> 00:47:55,440
or perform computations or networking

963
00:47:55,440 --> 00:47:58,740
devices so really on switch Hardware uh

964
00:47:58,740 --> 00:48:00,180
basically as we've seen in the previous

965
00:48:00,180 --> 00:48:02,000
presentation for example

966
00:48:02,000 --> 00:48:06,180
however there are also more free

967
00:48:06,180 --> 00:48:08,460
definitions of coins so basically seeing

968
00:48:08,460 --> 00:48:10,440
coin as a subset of edge Computing or

969
00:48:10,440 --> 00:48:12,060
cloud computing

970
00:48:12,060 --> 00:48:14,099
um maybe only enriched with additional

971
00:48:14,099 --> 00:48:16,440
functionality in the network but

972
00:48:16,440 --> 00:48:18,060
basically having some computations

973
00:48:18,060 --> 00:48:20,720
between the hosts between the end hosts

974
00:48:20,720 --> 00:48:24,599
and in our paper we actually try to get

975
00:48:24,599 --> 00:48:27,359
around making a strong statement at this

976
00:48:27,359 --> 00:48:30,960
point and basically just generalized to

977
00:48:30,960 --> 00:48:33,720
coin elements so just saying okay we now

978
00:48:33,720 --> 00:48:36,540
consider any capability that we have

979
00:48:36,540 --> 00:48:39,180
there between the end points as a coin

980
00:48:39,180 --> 00:48:40,260
element

981
00:48:40,260 --> 00:48:43,200
and yeah it's up for anyone else to

982
00:48:43,200 --> 00:48:46,740
decide what exactly is now coin or not

983
00:48:46,740 --> 00:48:49,020
um what we did distinguished though is

984
00:48:49,020 --> 00:48:52,200
where we perform the computations so

985
00:48:52,200 --> 00:48:54,720
with relation to the endpoints

986
00:48:54,720 --> 00:48:58,380
um so here we have in red the typical or

987
00:48:58,380 --> 00:49:01,740
the fast end-to-end path and we then

988
00:49:01,740 --> 00:49:03,180
distinguish between two types of

989
00:49:03,180 --> 00:49:06,480
computations one are on path coin

990
00:49:06,480 --> 00:49:09,300
elements so directly on this shortest

991
00:49:09,300 --> 00:49:12,180
path for example and the other

992
00:49:12,180 --> 00:49:13,920
computations would be of past coin

993
00:49:13,920 --> 00:49:15,720
elements where we then would need to

994
00:49:15,720 --> 00:49:17,700
reroute the packet or where the packets

995
00:49:17,700 --> 00:49:19,859
would need to take us to take a slight

996
00:49:19,859 --> 00:49:21,740
detour

997
00:49:21,740 --> 00:49:24,480
then as a second aspect we thought about

998
00:49:24,480 --> 00:49:26,339
what kind of functionality can now be

999
00:49:26,339 --> 00:49:28,740
provided by the networking device or by

1000
00:49:28,740 --> 00:49:30,300
the coin elements

1001
00:49:30,300 --> 00:49:32,880
um and here we took a rather functional

1002
00:49:32,880 --> 00:49:34,319
view I would say

1003
00:49:34,319 --> 00:49:35,940
um so also stemming from the end-to-end

1004
00:49:35,940 --> 00:49:38,520
argument where our assaults at all we're

1005
00:49:38,520 --> 00:49:40,200
always talking about the function that

1006
00:49:40,200 --> 00:49:42,720
is provided and here in this example we

1007
00:49:42,720 --> 00:49:45,839
have a function capital F consisting of

1008
00:49:45,839 --> 00:49:47,940
a few sub functions that is computed

1009
00:49:47,940 --> 00:49:50,339
between host a and host B and we then

1010
00:49:50,339 --> 00:49:52,319
thought about what kind of functionality

1011
00:49:52,319 --> 00:49:54,900
can now be provided by the coin element

1012
00:49:54,900 --> 00:49:55,980
in the middle

1013
00:49:55,980 --> 00:49:58,680
and the first option would be for

1014
00:49:58,680 --> 00:50:02,339
example an F1 Prime functionality so an

1015
00:50:02,339 --> 00:50:03,780
incomplete version of the original

1016
00:50:03,780 --> 00:50:06,720
function and then maybe also a bit uh

1017
00:50:06,720 --> 00:50:08,480
tweaked so that it can actually be

1018
00:50:08,480 --> 00:50:11,280
performed here on the coin element

1019
00:50:11,280 --> 00:50:13,260
and as this is now still part of the

1020
00:50:13,260 --> 00:50:16,380
end-to-end functionality we call this an

1021
00:50:16,380 --> 00:50:18,300
end-to-end function internal computation

1022
00:50:18,300 --> 00:50:20,760
so basically we have a functionality

1023
00:50:20,760 --> 00:50:23,700
that was originally part of the function

1024
00:50:23,700 --> 00:50:26,640
and we can now also place it in a on the

1025
00:50:26,640 --> 00:50:27,960
coin element

1026
00:50:27,960 --> 00:50:30,359
and then the other alternative would be

1027
00:50:30,359 --> 00:50:32,280
to have a function that is not part of

1028
00:50:32,280 --> 00:50:34,200
the original functionality and this then

1029
00:50:34,200 --> 00:50:37,500
here uh symbolized as a function G

1030
00:50:37,500 --> 00:50:39,780
um and here we were then and we call

1031
00:50:39,780 --> 00:50:41,760
this a function a end-to-end function

1032
00:50:41,760 --> 00:50:44,940
external computation and here we we were

1033
00:50:44,940 --> 00:50:47,220
then wondering whether this is then

1034
00:50:47,220 --> 00:50:50,280
still something that we would like or

1035
00:50:50,280 --> 00:50:52,680
that can be end-to-end compliant or not

1036
00:50:52,680 --> 00:50:55,619
and here we thought that if we now place

1037
00:50:55,619 --> 00:50:59,099
a new functionality into the network

1038
00:50:59,099 --> 00:51:02,940
then this is rather having a new

1039
00:51:02,940 --> 00:51:04,920
endpoint in this overall functionality

1040
00:51:04,920 --> 00:51:07,740
and thus we think that this is rather

1041
00:51:07,740 --> 00:51:10,140
some form of edge Computing or cloud

1042
00:51:10,140 --> 00:51:12,599
computing but not really coin at least

1043
00:51:12,599 --> 00:51:16,460
if we want to ensure the end to end

1044
00:51:16,460 --> 00:51:21,059
principle compliant variant of coin

1045
00:51:21,059 --> 00:51:23,460
and with that being said let me quickly

1046
00:51:23,460 --> 00:51:26,099
summarize these two aspects so what we

1047
00:51:26,099 --> 00:51:29,280
think can be end-to-end compliant coin

1048
00:51:29,280 --> 00:51:31,559
computations are end-to-end function

1049
00:51:31,559 --> 00:51:34,079
internal computations that we can then

1050
00:51:34,079 --> 00:51:35,940
either place on on or off path coin

1051
00:51:35,940 --> 00:51:37,260
elements

1052
00:51:37,260 --> 00:51:40,020
and in the following we then thought

1053
00:51:40,020 --> 00:51:41,940
about how and where we could actually

1054
00:51:41,940 --> 00:51:44,460
Place such functionality because right

1055
00:51:44,460 --> 00:51:46,740
now I've only discussed a bit about the

1056
00:51:46,740 --> 00:51:48,839
general aspects regarding these things

1057
00:51:48,839 --> 00:51:50,880
but not how we would actually

1058
00:51:50,880 --> 00:51:54,000
practically use this stuff

1059
00:51:54,000 --> 00:51:56,819
and there we basically came up with two

1060
00:51:56,819 --> 00:51:59,579
design principles principles as we

1061
00:51:59,579 --> 00:52:01,200
called them and the first one is

1062
00:52:01,200 --> 00:52:02,880
regarding the location where we can

1063
00:52:02,880 --> 00:52:05,579
place it so considering we have here two

1064
00:52:05,579 --> 00:52:07,380
locations

1065
00:52:07,380 --> 00:52:09,599
um where we could place functionality so

1066
00:52:09,599 --> 00:52:12,540
we have F1 Prime and F1 double Prime

1067
00:52:12,540 --> 00:52:15,180
and then the question is do we use F1

1068
00:52:15,180 --> 00:52:18,059
prime or do we use F1 double Prime

1069
00:52:18,059 --> 00:52:20,940
and the first two aspects that we hear

1070
00:52:20,940 --> 00:52:23,220
considered are rather straightforward I

1071
00:52:23,220 --> 00:52:24,480
would say

1072
00:52:24,480 --> 00:52:26,819
um so we think that if we use additional

1073
00:52:26,819 --> 00:52:29,160
coin functionality then we should still

1074
00:52:29,160 --> 00:52:31,079
adhere to the original requirements of

1075
00:52:31,079 --> 00:52:32,880
the functionality so basically don't

1076
00:52:32,880 --> 00:52:34,440
break anything that has been working

1077
00:52:34,440 --> 00:52:35,579
before

1078
00:52:35,579 --> 00:52:37,680
and then as a second aspect and that's

1079
00:52:37,680 --> 00:52:39,420
basically now

1080
00:52:39,420 --> 00:52:40,020
um

1081
00:52:40,020 --> 00:52:42,780
belongs to the second part of the

1082
00:52:42,780 --> 00:52:44,099
end-to-end principle that I mentioned

1083
00:52:44,099 --> 00:52:46,020
earlier we also think that it should

1084
00:52:46,020 --> 00:52:47,579
then also enrich the original

1085
00:52:47,579 --> 00:52:49,380
functionality

1086
00:52:49,380 --> 00:52:51,359
but then we could still have the case

1087
00:52:51,359 --> 00:52:53,280
that both of these function placement

1088
00:52:53,280 --> 00:52:55,920
that we have would

1089
00:52:55,920 --> 00:52:57,359
um

1090
00:52:57,359 --> 00:52:58,500
yeah

1091
00:52:58,500 --> 00:53:01,260
be valid for both of these aspects and

1092
00:53:01,260 --> 00:53:02,579
then we thought about what kind of

1093
00:53:02,579 --> 00:53:04,440
tirebreaker could we have there or how

1094
00:53:04,440 --> 00:53:06,720
we could then actually derive the

1095
00:53:06,720 --> 00:53:09,960
decision that we want to have and for

1096
00:53:09,960 --> 00:53:11,520
um the inspiration we'll then look at

1097
00:53:11,520 --> 00:53:14,520
the Simplicity principle which basically

1098
00:53:14,520 --> 00:53:16,740
states that we should always Thrive to

1099
00:53:16,740 --> 00:53:19,920
the simplest solution or always try to

1100
00:53:19,920 --> 00:53:21,839
reduce complexity as much as possible

1101
00:53:21,839 --> 00:53:24,900
and we then basically translated this

1102
00:53:24,900 --> 00:53:28,680
into that the com the coin functionality

1103
00:53:28,680 --> 00:53:31,020
should optimize functional complexity

1104
00:53:31,020 --> 00:53:33,599
against a key communication requirement

1105
00:53:33,599 --> 00:53:36,300
okay fancy words what do we actually

1106
00:53:36,300 --> 00:53:38,760
mean with that so if we have now here

1107
00:53:38,760 --> 00:53:40,040
these two

1108
00:53:40,040 --> 00:53:42,540
functions and we then for example

1109
00:53:42,540 --> 00:53:44,339
consider the latency as key

1110
00:53:44,339 --> 00:53:46,859
communication requirement then we would

1111
00:53:46,859 --> 00:53:50,780
for example use the lower functionality

1112
00:53:50,780 --> 00:53:55,140
if it's possible to deploy the function

1113
00:53:55,140 --> 00:53:57,480
that we need there because in that case

1114
00:53:57,480 --> 00:54:00,359
we would if we consider that the

1115
00:54:00,359 --> 00:54:02,339
rerouting to the upper function would

1116
00:54:02,339 --> 00:54:05,040
take a little bit longer time then we

1117
00:54:05,040 --> 00:54:06,660
would have the lower latency at the

1118
00:54:06,660 --> 00:54:08,220
lower path and thus would choose this

1119
00:54:08,220 --> 00:54:10,859
location however if the functionality is

1120
00:54:10,859 --> 00:54:12,540
too large for the slower functional

1121
00:54:12,540 --> 00:54:15,780
function National deployment then we

1122
00:54:15,780 --> 00:54:17,819
would take the upper path

1123
00:54:17,819 --> 00:54:20,160
and so we think that this is at least

1124
00:54:20,160 --> 00:54:22,500
the starting point which people can

1125
00:54:22,500 --> 00:54:25,859
build upon to these uh to consider where

1126
00:54:25,859 --> 00:54:28,020
we can place functionality

1127
00:54:28,020 --> 00:54:30,839
we then also had a different view on

1128
00:54:30,839 --> 00:54:32,460
this whole topic

1129
00:54:32,460 --> 00:54:34,380
um basically regarding the first part of

1130
00:54:34,380 --> 00:54:36,000
the end-to-end principle so the

1131
00:54:36,000 --> 00:54:39,300
knowledge of the endpoints and here we

1132
00:54:39,300 --> 00:54:41,760
again have the overall functionalityf

1133
00:54:41,760 --> 00:54:44,099
and now we place a new functionality in

1134
00:54:44,099 --> 00:54:46,200
the network so it's also the incomplete

1135
00:54:46,200 --> 00:54:48,480
version of the function but we place it

1136
00:54:48,480 --> 00:54:49,619
there without the knowledge of the

1137
00:54:49,619 --> 00:54:52,200
endpoints and in this case it could very

1138
00:54:52,200 --> 00:54:54,240
well introduce a lot of problems because

1139
00:54:54,240 --> 00:54:56,099
now the endpoints are still Computing

1140
00:54:56,099 --> 00:54:58,319
the whole functionality but there in the

1141
00:54:58,319 --> 00:55:00,059
network we also compute something of the

1142
00:55:00,059 --> 00:55:02,280
functionality and then stuff can break

1143
00:55:02,280 --> 00:55:05,160
and I think performance enhancing

1144
00:55:05,160 --> 00:55:08,480
proxies for example are an example where

1145
00:55:08,480 --> 00:55:11,280
placing something in between the nthos

1146
00:55:11,280 --> 00:55:14,520
without the knowledge of the end hosts

1147
00:55:14,520 --> 00:55:16,619
which is an example where this has

1148
00:55:16,619 --> 00:55:19,079
caused problems before and thus we think

1149
00:55:19,079 --> 00:55:21,059
that the second design principle in this

1150
00:55:21,059 --> 00:55:23,520
context would be that we should always

1151
00:55:23,520 --> 00:55:26,040
insert the coin functionality in

1152
00:55:26,040 --> 00:55:27,780
transparent in full transparency to the

1153
00:55:27,780 --> 00:55:29,220
endpoint so that they know that

1154
00:55:29,220 --> 00:55:32,700
something's going on in between them

1155
00:55:32,700 --> 00:55:34,800
and with these design principles then

1156
00:55:34,800 --> 00:55:37,640
also in mind we then thought about

1157
00:55:37,640 --> 00:55:39,300
considerations for the transport

1158
00:55:39,300 --> 00:55:41,400
protocol obviously mainly coming from

1159
00:55:41,400 --> 00:55:43,740
our previous work that we collected here

1160
00:55:43,740 --> 00:55:45,500
in the context of This research group

1161
00:55:45,500 --> 00:55:48,540
and why did we actually choose the

1162
00:55:48,540 --> 00:55:50,760
transport protocol well it's a function

1163
00:55:50,760 --> 00:55:53,160
that is traditionally implemented in the

1164
00:55:53,160 --> 00:55:55,559
endpoints only and it's also the one

1165
00:55:55,559 --> 00:55:57,839
layer that is translating from the

1166
00:55:57,839 --> 00:55:59,640
network to the applications so it will

1167
00:55:59,640 --> 00:56:02,040
also be the layer that is affected by

1168
00:56:02,040 --> 00:56:04,859
any changes that we have in use that are

1169
00:56:04,859 --> 00:56:06,420
induced in the network

1170
00:56:06,420 --> 00:56:09,300
and in this context we then considered

1171
00:56:09,300 --> 00:56:11,160
several aspects so in this paper we

1172
00:56:11,160 --> 00:56:12,900
focused on addressing so basically how

1173
00:56:12,900 --> 00:56:15,300
can we choose which function or

1174
00:56:15,300 --> 00:56:18,960
computations to execute in a network

1175
00:56:18,960 --> 00:56:22,020
um as a second part flow granularity

1176
00:56:22,020 --> 00:56:24,059
um so deciding do we need a stream

1177
00:56:24,059 --> 00:56:27,020
notion as for example in gcp or are we

1178
00:56:27,020 --> 00:56:30,599
okay with the datagram notion as an UDP

1179
00:56:30,599 --> 00:56:33,420
and then finally also more evolved

1180
00:56:33,420 --> 00:56:35,400
communication Concepts like Collective

1181
00:56:35,400 --> 00:56:37,740
communication so basically not only

1182
00:56:37,740 --> 00:56:39,059
having two endpoints in the

1183
00:56:39,059 --> 00:56:41,819
communication but a few more of them

1184
00:56:41,819 --> 00:56:44,700
and for today I would like or yeah for

1185
00:56:44,700 --> 00:56:45,900
today I would like to focus on the

1186
00:56:45,900 --> 00:56:48,240
addressing part and if you're interested

1187
00:56:48,240 --> 00:56:50,819
in more details on those three aspects

1188
00:56:50,819 --> 00:56:53,220
uh have a look at our paper I will also

1189
00:56:53,220 --> 00:56:55,200
have the QR code in the end so

1190
00:56:55,200 --> 00:56:58,559
you can scan it then and also we have

1191
00:56:58,559 --> 00:57:01,500
still our now expired draft where we

1192
00:57:01,500 --> 00:57:03,260
even consider more aspects than only

1193
00:57:03,260 --> 00:57:06,559
those three

1194
00:57:06,720 --> 00:57:09,780
okay then starting with the addressing

1195
00:57:09,780 --> 00:57:13,260
um so typically even if a host a wanted

1196
00:57:13,260 --> 00:57:15,599
to communicate with a host B we then add

1197
00:57:15,599 --> 00:57:17,640
basically some kind of tag to the packet

1198
00:57:17,640 --> 00:57:20,400
in the form of an IP address and a

1199
00:57:20,400 --> 00:57:22,920
transport transport protocol part to

1200
00:57:22,920 --> 00:57:25,680
address a specific application

1201
00:57:25,680 --> 00:57:27,420
um and now the question is how can we do

1202
00:57:27,420 --> 00:57:29,280
this if we want to have a function F1

1203
00:57:29,280 --> 00:57:31,740
Prime somewhere in the network

1204
00:57:31,740 --> 00:57:33,960
and the first option that we have is

1205
00:57:33,960 --> 00:57:36,059
some form of implicit integration so we

1206
00:57:36,059 --> 00:57:37,980
actually don't really

1207
00:57:37,980 --> 00:57:40,200
um address it explicitly but just place

1208
00:57:40,200 --> 00:57:41,700
the functionality somewhere in the

1209
00:57:41,700 --> 00:57:45,059
network so in this case we would try to

1210
00:57:45,059 --> 00:57:47,280
guess maybe where the packets will go

1211
00:57:47,280 --> 00:57:49,200
and then place the functionality

1212
00:57:49,200 --> 00:57:51,839
strategically on this device so that the

1213
00:57:51,839 --> 00:57:53,520
packets will actually be processed by

1214
00:57:53,520 --> 00:57:54,780
that computation

1215
00:57:54,780 --> 00:57:56,940
so this works in a lot of cases

1216
00:57:56,940 --> 00:57:59,280
especially in smaller networks it's

1217
00:57:59,280 --> 00:58:01,079
actually also something that is

1218
00:58:01,079 --> 00:58:04,260
typically used for research prototype so

1219
00:58:04,260 --> 00:58:06,420
I've done that myself and quite a lot of

1220
00:58:06,420 --> 00:58:09,540
projects however if we now scale up the

1221
00:58:09,540 --> 00:58:11,579
networks then at some point this becomes

1222
00:58:11,579 --> 00:58:13,500
really hard to maintain and especially

1223
00:58:13,500 --> 00:58:14,880
in some networks we don't even know

1224
00:58:14,880 --> 00:58:16,980
where packets really go and thus it's

1225
00:58:16,980 --> 00:58:19,260
really tricky to do this to do it this

1226
00:58:19,260 --> 00:58:20,040
way

1227
00:58:20,040 --> 00:58:22,260
and additionally it also only allows for

1228
00:58:22,260 --> 00:58:25,980
the on path notion of coin as we yeah

1229
00:58:25,980 --> 00:58:28,319
just place the functionality on path so

1230
00:58:28,319 --> 00:58:30,900
off path is not possible

1231
00:58:30,900 --> 00:58:32,460
um yeah the second option is then an

1232
00:58:32,460 --> 00:58:34,380
explicit steering mechanism so here we

1233
00:58:34,380 --> 00:58:37,020
then really apply some kind of tag to

1234
00:58:37,020 --> 00:58:38,160
the packet

1235
00:58:38,160 --> 00:58:40,380
to for example say okay we would have we

1236
00:58:40,380 --> 00:58:41,940
would like to have the F1 Prime

1237
00:58:41,940 --> 00:58:44,160
functionality up there

1238
00:58:44,160 --> 00:58:46,319
um and in this case we wouldn't also

1239
00:58:46,319 --> 00:58:49,319
have the off path notion however it's

1240
00:58:49,319 --> 00:58:50,880
really unclear how you would actually

1241
00:58:50,880 --> 00:58:52,920
like to do this addressing and I will

1242
00:58:52,920 --> 00:58:55,559
come to a few possible solutions later

1243
00:58:55,559 --> 00:58:58,020
on as well but this is then really

1244
00:58:58,020 --> 00:58:59,760
something that we we need to think about

1245
00:58:59,760 --> 00:59:03,740
how we would like to implement this

1246
00:59:04,140 --> 00:59:05,640
um and then assuming that we have some

1247
00:59:05,640 --> 00:59:08,940
form of addressing um so mainly perhaps

1248
00:59:08,940 --> 00:59:10,799
focusing on the explicit addressing for

1249
00:59:10,799 --> 00:59:14,760
a moment if we then have two different

1250
00:59:14,760 --> 00:59:16,559
locations where we have functionality

1251
00:59:16,559 --> 00:59:19,740
then we would might want to decide which

1252
00:59:19,740 --> 00:59:22,079
kind of uh this or which of these two

1253
00:59:22,079 --> 00:59:24,980
functions we would like to execute and

1254
00:59:24,980 --> 00:59:27,420
there are then the question is how would

1255
00:59:27,420 --> 00:59:29,220
we like to do this so would we like to

1256
00:59:29,220 --> 00:59:31,680
always specify the exact location so for

1257
00:59:31,680 --> 00:59:33,240
example say okay we would like to have

1258
00:59:33,240 --> 00:59:36,660
the upper F1 Prime functionality to be

1259
00:59:36,660 --> 00:59:39,420
only specify some kind of constraints so

1260
00:59:39,420 --> 00:59:40,920
for example saying we would like to have

1261
00:59:40,920 --> 00:59:43,319
the one with the lower latency or with

1262
00:59:43,319 --> 00:59:46,619
other requirements or

1263
00:59:46,619 --> 00:59:49,079
can't we as an end host do anything

1264
00:59:49,079 --> 00:59:51,000
about it but just let the network handle

1265
00:59:51,000 --> 00:59:53,040
it and the network decides which

1266
00:59:53,040 --> 00:59:56,339
function is selected so there's really I

1267
00:59:56,339 --> 00:59:57,839
think a large spectrum of possible

1268
00:59:57,839 --> 01:00:02,400
solutions or answers to these questions

1269
01:00:02,400 --> 01:00:04,140
um so as I said we mainly raise

1270
01:00:04,140 --> 01:00:06,359
questions and don't answer them so quite

1271
01:00:06,359 --> 01:00:07,980
a lot of them here

1272
01:00:07,980 --> 01:00:10,140
and then if we have some form of

1273
01:00:10,140 --> 01:00:11,880
instance selection mechanism that we

1274
01:00:11,880 --> 01:00:14,160
might also want to keep Affinity through

1275
01:00:14,160 --> 01:00:17,579
to those instances because for example

1276
01:00:17,579 --> 01:00:19,380
if you would like to build up a certain

1277
01:00:19,380 --> 01:00:21,720
level of State at some point

1278
01:00:21,720 --> 01:00:24,059
and then we would always want to go to

1279
01:00:24,059 --> 01:00:26,760
the same service instance at that point

1280
01:00:26,760 --> 01:00:28,859
and here then the question is how do we

1281
01:00:28,859 --> 01:00:31,799
actually realize this Affinity uh do we

1282
01:00:31,799 --> 01:00:33,119
set that up already during an

1283
01:00:33,119 --> 01:00:34,740
orchestration phase before we actually

1284
01:00:34,740 --> 01:00:36,839
have the first computation is this done

1285
01:00:36,839 --> 01:00:38,160
on the Fly

1286
01:00:38,160 --> 01:00:39,900
um so again a lot of questions that

1287
01:00:39,900 --> 01:00:42,599
arise here and I think in the paper we

1288
01:00:42,599 --> 01:00:45,299
raise even more of them so if you would

1289
01:00:45,299 --> 01:00:47,700
like to read a lot of questions or get a

1290
01:00:47,700 --> 01:00:49,200
lot of

1291
01:00:49,200 --> 01:00:51,660
yeah ideas for questions then have a

1292
01:00:51,660 --> 01:00:54,200
look at the paper

1293
01:00:54,900 --> 01:00:57,480
yeah then maybe trying to summarize this

1294
01:00:57,480 --> 01:00:59,880
a bit and we also had a look at existing

1295
01:00:59,880 --> 01:01:02,220
Solutions because obviously there's a

1296
01:01:02,220 --> 01:01:03,900
lot of internet technology already out

1297
01:01:03,900 --> 01:01:06,000
there that might be applicable to uh to

1298
01:01:06,000 --> 01:01:07,559
these problems

1299
01:01:07,559 --> 01:01:11,040
um and one is for example this Source

1300
01:01:11,040 --> 01:01:13,020
routing so here we can as an end host

1301
01:01:13,020 --> 01:01:15,720
already Define which path we would like

1302
01:01:15,720 --> 01:01:18,059
Pekka to take through a network however

1303
01:01:18,059 --> 01:01:20,460
it is not directly something that we can

1304
01:01:20,460 --> 01:01:22,619
use for defining the functionality so

1305
01:01:22,619 --> 01:01:24,660
for example considering that we might

1306
01:01:24,660 --> 01:01:26,540
have different functions on one device

1307
01:01:26,540 --> 01:01:29,400
that we would need yeah

1308
01:01:29,400 --> 01:01:32,220
multiple IP addresses for example for

1309
01:01:32,220 --> 01:01:34,140
each of the functions that we have

1310
01:01:34,140 --> 01:01:36,740
which might become quite a lot

1311
01:01:36,740 --> 01:01:38,880
however there are a service function

1312
01:01:38,880 --> 01:01:41,040
chaining which allows already for

1313
01:01:41,040 --> 01:01:43,920
steering traffic through functions so if

1314
01:01:43,920 --> 01:01:46,619
we now interpret coin as some form of

1315
01:01:46,619 --> 01:01:49,140
network function or service function

1316
01:01:49,140 --> 01:01:50,940
then this might be applicable

1317
01:01:50,940 --> 01:01:52,799
and similarly we have information

1318
01:01:52,799 --> 01:01:55,680
centered networking as well we are we

1319
01:01:55,680 --> 01:01:57,240
now address information rather than

1320
01:01:57,240 --> 01:01:59,520
endpoints and thus again if we now

1321
01:01:59,520 --> 01:02:01,020
interpret coin as some form of

1322
01:02:01,020 --> 01:02:04,440
information then the these might also be

1323
01:02:04,440 --> 01:02:08,400
applicable Concepts

1324
01:02:09,900 --> 01:02:12,599
so overall I would say there are many

1325
01:02:12,599 --> 01:02:14,220
possible solutions to the many questions

1326
01:02:14,220 --> 01:02:17,640
that we've raised but I think

1327
01:02:17,640 --> 01:02:19,200
um yeah these questions are still open

1328
01:02:19,200 --> 01:02:21,119
so we haven't provided any concrete

1329
01:02:21,119 --> 01:02:22,740
answers for that

1330
01:02:22,740 --> 01:02:24,240
um and I think the main takeaway from

1331
01:02:24,240 --> 01:02:27,180
our paper is that there are ways in

1332
01:02:27,180 --> 01:02:28,980
which coin can be aligned with the

1333
01:02:28,980 --> 01:02:31,380
end-to-end principle but we then have to

1334
01:02:31,380 --> 01:02:33,540
really carefully think about what

1335
01:02:33,540 --> 01:02:35,579
Solutions we actually pick for all the

1336
01:02:35,579 --> 01:02:38,040
questions that we've raised

1337
01:02:38,040 --> 01:02:39,960
so and this is the part that was

1338
01:02:39,960 --> 01:02:43,619
basically the same last week as well uh

1339
01:02:43,619 --> 01:02:46,680
the uip and Beyond workshop and now

1340
01:02:46,680 --> 01:02:48,900
maybe something more provocative that

1341
01:02:48,900 --> 01:02:50,819
was discussed in the context of that

1342
01:02:50,819 --> 01:02:52,079
Workshop

1343
01:02:52,079 --> 01:02:54,660
um so there were actually also or wasn't

1344
01:02:54,660 --> 01:02:57,119
other talk there as well so

1345
01:02:57,119 --> 01:02:59,940
um this Tintin protocol

1346
01:02:59,940 --> 01:03:03,540
and we then thought about

1347
01:03:03,540 --> 01:03:05,900
um yeah how would you actually

1348
01:03:05,900 --> 01:03:09,059
do this in practice now so we phrased a

1349
01:03:09,059 --> 01:03:10,380
lot of questions regarding transport

1350
01:03:10,380 --> 01:03:13,079
protocols but we now see already that

1351
01:03:13,079 --> 01:03:15,420
there are two rather specialized

1352
01:03:15,420 --> 01:03:18,240
protocols and the question that we then

1353
01:03:18,240 --> 01:03:20,099
discussed was yeah do we now want to

1354
01:03:20,099 --> 01:03:22,940
have one Global protocol that basically

1355
01:03:22,940 --> 01:03:26,579
solves the end-to-end principle problems

1356
01:03:26,579 --> 01:03:28,260
of coin

1357
01:03:28,260 --> 01:03:29,040
um

1358
01:03:29,040 --> 01:03:31,799
it's all basically having yeah the one

1359
01:03:31,799 --> 01:03:33,960
transport protocol that we need for all

1360
01:03:33,960 --> 01:03:35,099
the applications

1361
01:03:35,099 --> 01:03:37,799
or do we rather have a lot of

1362
01:03:37,799 --> 01:03:39,540
specialized protocols for different

1363
01:03:39,540 --> 01:03:41,460
Limited domains

1364
01:03:41,460 --> 01:03:43,980
um do we then have perhaps a couple of

1365
01:03:43,980 --> 01:03:46,260
core features so basically a core

1366
01:03:46,260 --> 01:03:49,200
protocol that we then extend for the

1367
01:03:49,200 --> 01:03:51,180
different specialized domains that we

1368
01:03:51,180 --> 01:03:53,640
have there to these protocols that have

1369
01:03:53,640 --> 01:03:55,920
some way of interacting that is perhaps

1370
01:03:55,920 --> 01:03:57,780
standardized or do each of these

1371
01:03:57,780 --> 01:04:00,059
protocols really only apply to their

1372
01:04:00,059 --> 01:04:02,040
specific limited domain

1373
01:04:02,040 --> 01:04:04,319
and then maybe you know as a really

1374
01:04:04,319 --> 01:04:06,420
provocative last question

1375
01:04:06,420 --> 01:04:08,700
um might it be also be possible to

1376
01:04:08,700 --> 01:04:10,440
somewhat bend the end-to-end principle

1377
01:04:10,440 --> 01:04:12,720
in these limited domains because after

1378
01:04:12,720 --> 01:04:14,280
all if you for example think about

1379
01:04:14,280 --> 01:04:16,380
industrial networks then we have

1380
01:04:16,380 --> 01:04:18,780
basically that the whole network is in

1381
01:04:18,780 --> 01:04:19,980
the

1382
01:04:19,980 --> 01:04:23,099
um in the premise of one entity and so

1383
01:04:23,099 --> 01:04:25,740
we could already think that basically

1384
01:04:25,740 --> 01:04:27,960
this end-to-end principle aspect is

1385
01:04:27,960 --> 01:04:30,059
already covered because if someone

1386
01:04:30,059 --> 01:04:32,220
deploys Solutions there then they

1387
01:04:32,220 --> 01:04:33,900
basically are the endpoints as well as

1388
01:04:33,900 --> 01:04:35,700
the network

1389
01:04:35,700 --> 01:04:37,799
um so yeah really trying to be a bit

1390
01:04:37,799 --> 01:04:40,380
provocative maybe here in the end to uh

1391
01:04:40,380 --> 01:04:42,660
yeah Inspire some thoughts and arguments

1392
01:04:42,660 --> 01:04:46,140
uh on these all on all of these topics

1393
01:04:46,140 --> 01:04:48,359
and with that I would now like to wrap

1394
01:04:48,359 --> 01:04:50,339
it up so in the beginning I showed you

1395
01:04:50,339 --> 01:04:53,099
why uh many people think that coin is

1396
01:04:53,099 --> 01:04:56,280
adults with the end-to-end principle but

1397
01:04:56,280 --> 01:04:58,859
then I hope that I've shown you a way on

1398
01:04:58,859 --> 01:05:01,920
a way of thinking about it um how we can

1399
01:05:01,920 --> 01:05:04,319
align these things again

1400
01:05:04,319 --> 01:05:05,520
um so with the end-to-end function

1401
01:05:05,520 --> 01:05:08,220
internal computations both on on and off

1402
01:05:08,220 --> 01:05:10,980
path coin elements

1403
01:05:10,980 --> 01:05:13,440
um we then talked about two design

1404
01:05:13,440 --> 01:05:15,180
principles for coin

1405
01:05:15,180 --> 01:05:18,240
and then finally I had a brief

1406
01:05:18,240 --> 01:05:20,579
discussion about considerations at least

1407
01:05:20,579 --> 01:05:23,280
for the addressing part and as promised

1408
01:05:23,280 --> 01:05:26,280
here are the two QR codes and now I

1409
01:05:26,280 --> 01:05:28,319
thank you a lot for your attention and

1410
01:05:28,319 --> 01:05:30,359
I'm happy to have

1411
01:05:30,359 --> 01:05:33,480
a discussion with you or to hear your

1412
01:05:33,480 --> 01:05:36,740
comments on this thanks

1413
01:05:37,339 --> 01:05:40,020
thank you you raised a lot of the

1414
01:05:40,020 --> 01:05:43,140
questions that we've asked ourselves in

1415
01:05:43,140 --> 01:05:45,599
the past few years there's three people

1416
01:05:45,599 --> 01:05:47,400
on the

1417
01:05:47,400 --> 01:05:48,240
um

1418
01:05:48,240 --> 01:05:50,400
actually now four people on the cute

1419
01:05:50,400 --> 01:05:53,480
Dirk you want to start

1420
01:05:54,839 --> 01:05:59,819
yes my pleasure um hey Ike um

1421
01:05:59,819 --> 01:06:01,740
nice presentation

1422
01:06:01,740 --> 01:06:02,339
um

1423
01:06:02,339 --> 01:06:05,160
you are raising many

1424
01:06:05,160 --> 01:06:08,220
um questions here I think this isn't

1425
01:06:08,220 --> 01:06:10,799
um very comprehensive approach that you

1426
01:06:10,799 --> 01:06:15,180
um present here and I was thinking you

1427
01:06:15,180 --> 01:06:17,000
are probably making your life

1428
01:06:17,000 --> 01:06:20,819
unnecessarily hard so

1429
01:06:20,819 --> 01:06:23,339
um so the question so you know how

1430
01:06:23,339 --> 01:06:25,440
should you design this or what should be

1431
01:06:25,440 --> 01:06:28,440
the services by certain protocols really

1432
01:06:28,440 --> 01:06:30,960
depends a lot on what you want to do and

1433
01:06:30,960 --> 01:06:33,900
I think it's really hard right now to

1434
01:06:33,900 --> 01:06:35,640
um you know

1435
01:06:35,640 --> 01:06:37,680
um conceive and

1436
01:06:37,680 --> 01:06:39,240
um hypothetical

1437
01:06:39,240 --> 01:06:40,799
um you know coin protocol without

1438
01:06:40,799 --> 01:06:43,559
actually knowing what you want to do

1439
01:06:43,559 --> 01:06:44,940
and

1440
01:06:44,940 --> 01:06:47,700
um so this the end-to-end principle

1441
01:06:47,700 --> 01:06:48,900
discussion

1442
01:06:48,900 --> 01:06:51,660
is a good example for that so

1443
01:06:51,660 --> 01:06:54,140
um I mean these principles were

1444
01:06:54,140 --> 01:06:59,160
formulated with a certain goal and um so

1445
01:06:59,160 --> 01:07:00,660
they might not necessarily be the same

1446
01:07:00,660 --> 01:07:02,940
goals that you have when you think about

1447
01:07:02,940 --> 01:07:05,700
Computing in the network so when your

1448
01:07:05,700 --> 01:07:09,059
objective is to build an internet work

1449
01:07:09,059 --> 01:07:11,819
based on packet switching and

1450
01:07:11,819 --> 01:07:14,460
statistical multiplexing

1451
01:07:14,460 --> 01:07:17,099
um yeah then you need to think about

1452
01:07:17,099 --> 01:07:20,880
um the the control Power of the end

1453
01:07:20,880 --> 01:07:24,480
systems so and to enable different kinds

1454
01:07:24,480 --> 01:07:26,579
of applications transport functions and

1455
01:07:26,579 --> 01:07:29,940
so on and so this is a model that fits

1456
01:07:29,940 --> 01:07:31,980
very well to the internet and to IP and

1457
01:07:31,980 --> 01:07:35,640
so on but for computing in the network

1458
01:07:35,640 --> 01:07:38,220
um so we don't necessarily

1459
01:07:38,220 --> 01:07:40,799
um have the same goal and that means we

1460
01:07:40,799 --> 01:07:43,500
don't necessarily have to constrain

1461
01:07:43,500 --> 01:07:46,020
ourselves by by these principles

1462
01:07:46,020 --> 01:07:49,380
so just one example

1463
01:07:49,380 --> 01:07:52,140
um you could say conceive

1464
01:07:52,140 --> 01:07:54,359
um something like a protocol for for

1465
01:07:54,359 --> 01:07:56,819
computing in a network like a data flow

1466
01:07:56,819 --> 01:07:58,640
system where you connect

1467
01:07:58,640 --> 01:08:00,839
functions and each function does

1468
01:08:00,839 --> 01:08:04,740
something produces uh new data and so on

1469
01:08:04,740 --> 01:08:07,260
um that would be of course very much at

1470
01:08:07,260 --> 01:08:09,359
odds with this within the end-to-end

1471
01:08:09,359 --> 01:08:11,280
principle but sometimes it's just what

1472
01:08:11,280 --> 01:08:12,900
you need and

1473
01:08:12,900 --> 01:08:15,420
um so

1474
01:08:15,420 --> 01:08:19,679
um I I think we it's probably a bit um

1475
01:08:19,679 --> 01:08:23,160
too much or maybe also premature to

1476
01:08:23,160 --> 01:08:24,179
think about

1477
01:08:24,179 --> 01:08:27,779
um like the the grand unifying Computing

1478
01:08:27,779 --> 01:08:29,339
in the network protocol

1479
01:08:29,339 --> 01:08:31,198
um for all kinds of applications I think

1480
01:08:31,198 --> 01:08:33,660
this needs to come from experience

1481
01:08:33,660 --> 01:08:35,939
um or yeah on experiments for them

1482
01:08:35,939 --> 01:08:38,279
especially in different areas and then

1483
01:08:38,279 --> 01:08:39,899
you could think about

1484
01:08:39,899 --> 01:08:42,299
um so what does use case a need use case

1485
01:08:42,299 --> 01:08:44,580
b and so on and um

1486
01:08:44,580 --> 01:08:47,219
is there a need at all for an internet

1487
01:08:47,219 --> 01:08:51,319
level protocol that's another question

1488
01:08:52,198 --> 01:08:55,198
yeah uh thanks for the uh for your

1489
01:08:55,198 --> 01:08:59,040
thoughts on this so actually our uh

1490
01:08:59,040 --> 01:09:01,679
goals were not to have this one unified

1491
01:09:01,679 --> 01:09:04,319
protocol but we just try to

1492
01:09:04,319 --> 01:09:06,960
basically as you said uh without having

1493
01:09:06,960 --> 01:09:09,299
a lot of practical experience in the

1494
01:09:09,299 --> 01:09:11,939
large-scale deployment of these things

1495
01:09:11,939 --> 01:09:14,880
um to think about from our standpoint of

1496
01:09:14,880 --> 01:09:17,040
today how we could actually align these

1497
01:09:17,040 --> 01:09:20,640
aspects maybe also to

1498
01:09:20,640 --> 01:09:23,160
um give a lot a bit of guidance maybe

1499
01:09:23,160 --> 01:09:25,920
for the first larger deployments of

1500
01:09:25,920 --> 01:09:28,439
solutions like that

1501
01:09:28,439 --> 01:09:30,420
um so that we can then afterwards maybe

1502
01:09:30,420 --> 01:09:32,399
in a few years

1503
01:09:32,399 --> 01:09:34,020
come back to these conservations

1504
01:09:34,020 --> 01:09:35,698
considerations and then think about

1505
01:09:35,698 --> 01:09:37,979
whether they actually made sense

1506
01:09:37,979 --> 01:09:40,319
um or whether we actually need such a

1507
01:09:40,319 --> 01:09:42,000
large scale protocol and this was

1508
01:09:42,000 --> 01:09:45,060
actually then maybe also why we had

1509
01:09:45,060 --> 01:09:46,859
these discussions that I presented on

1510
01:09:46,859 --> 01:09:48,960
the second to last slide

1511
01:09:48,960 --> 01:09:51,899
um so do we even need this large scale

1512
01:09:51,899 --> 01:09:54,320
protocol or are we fine with having

1513
01:09:54,320 --> 01:09:56,940
specialized protocols for specific

1514
01:09:56,940 --> 01:09:59,640
applications because those two papers

1515
01:09:59,640 --> 01:10:00,900
that I referenced there they actually

1516
01:10:00,900 --> 01:10:03,719
provide solutions for specific problems

1517
01:10:03,719 --> 01:10:06,540
and they I think

1518
01:10:06,540 --> 01:10:09,300
um yeah solved them quite well and could

1519
01:10:09,300 --> 01:10:13,739
be used as a first step towards this

1520
01:10:13,739 --> 01:10:16,739
direction already

1521
01:10:16,739 --> 01:10:19,679
yeah thanks um let me just just quickly

1522
01:10:19,679 --> 01:10:21,679
um

1523
01:10:22,620 --> 01:10:24,480
I think it's also a question of how you

1524
01:10:24,480 --> 01:10:26,100
frame this problem

1525
01:10:26,100 --> 01:10:28,159
um so if you have the mental model of

1526
01:10:28,159 --> 01:10:31,380
say getting data from one end to the

1527
01:10:31,380 --> 01:10:33,540
other and then doing some computation in

1528
01:10:33,540 --> 01:10:34,860
the middle

1529
01:10:34,860 --> 01:10:37,860
um this may give you some kind of TCP

1530
01:10:37,860 --> 01:10:39,840
like framing or something

1531
01:10:39,840 --> 01:10:41,100
um I'm not sure that's that's

1532
01:10:41,100 --> 01:10:43,020
necessarily the best

1533
01:10:43,020 --> 01:10:46,080
um say mental model for thinking about

1534
01:10:46,080 --> 01:10:49,020
Computing the network

1535
01:10:49,020 --> 01:10:50,820
um so again thinking about like data

1536
01:10:50,820 --> 01:10:52,199
flow systems where

1537
01:10:52,199 --> 01:10:55,260
um it's all about you know carrying bits

1538
01:10:55,260 --> 01:10:57,300
with some modification in the middle

1539
01:10:57,300 --> 01:10:59,820
from from one to the other it's more

1540
01:10:59,820 --> 01:11:01,860
like you are you having like discrete

1541
01:11:01,860 --> 01:11:03,840
steps of computation and each step

1542
01:11:03,840 --> 01:11:06,120
produces something completely different

1543
01:11:06,120 --> 01:11:09,239
and um so maybe then this this whole

1544
01:11:09,239 --> 01:11:12,000
connection or transport

1545
01:11:12,000 --> 01:11:17,120
um metaphor is not not exactly helpful

1546
01:11:18,060 --> 01:11:21,080
yeah definitely

1547
01:11:21,600 --> 01:11:24,560
okay thanks

1548
01:11:26,699 --> 01:11:28,560
um

1549
01:11:28,560 --> 01:11:31,860
next in the line is is rolling

1550
01:11:31,860 --> 01:11:34,440
yeah hi thanks uh well I like the

1551
01:11:34,440 --> 01:11:36,960
approach to to try to think about how to

1552
01:11:36,960 --> 01:11:38,880
maybe more align with the end-to-end

1553
01:11:38,880 --> 01:11:40,260
argument

1554
01:11:40,260 --> 01:11:40,980
um

1555
01:11:40,980 --> 01:11:43,440
to me the end-to-end argument has has

1556
01:11:43,440 --> 01:11:45,900
basically two advantages if you apply it

1557
01:11:45,900 --> 01:11:48,120
one is the robustness because he has

1558
01:11:48,120 --> 01:11:50,219
less less functionality inside the

1559
01:11:50,219 --> 01:11:53,159
network so one aspect is maybe to think

1560
01:11:53,159 --> 01:11:54,239
about

1561
01:11:54,239 --> 01:11:59,040
how those partial functions influence or

1562
01:11:59,040 --> 01:12:01,739
may influence each other so that that

1563
01:12:01,739 --> 01:12:04,620
could be I mean there could be some kind

1564
01:12:04,620 --> 01:12:06,719
of interdependencies or side effects

1565
01:12:06,719 --> 01:12:08,880
that should be avoided I don't I didn't

1566
01:12:08,880 --> 01:12:10,980
read your draft and and you know all

1567
01:12:10,980 --> 01:12:15,000
your work so that's kind of new to me

1568
01:12:15,000 --> 01:12:18,239
um so maybe you discussed it already the

1569
01:12:18,239 --> 01:12:20,340
other thing is innovation uh protection

1570
01:12:20,340 --> 01:12:23,340
of innovation or I mean the the argument

1571
01:12:23,340 --> 01:12:25,739
is is it's hard to change the network

1572
01:12:25,739 --> 01:12:28,980
and when we have functionality in place

1573
01:12:28,980 --> 01:12:31,500
that allows that like P4 and what have

1574
01:12:31,500 --> 01:12:32,940
you

1575
01:12:32,940 --> 01:12:37,159
um that's maybe not the let's say

1576
01:12:37,159 --> 01:12:41,460
obstacle anymore that it when when it

1577
01:12:41,460 --> 01:12:43,860
was the time of writing the end-to-end

1578
01:12:43,860 --> 01:12:45,719
argument or

1579
01:12:45,719 --> 01:12:46,320
um

1580
01:12:46,320 --> 01:12:49,080
but robustness is the thing we should

1581
01:12:49,080 --> 01:12:51,060
care about and

1582
01:12:51,060 --> 01:12:54,780
uh so it would be good to to think along

1583
01:12:54,780 --> 01:12:56,219
the lines

1584
01:12:56,219 --> 01:12:58,980
um trying to to not break things

1585
01:12:58,980 --> 01:13:02,520
uh one more observation uh when you were

1586
01:13:02,520 --> 01:13:06,120
talking about addressing I think it

1587
01:13:06,120 --> 01:13:10,100
complicates things a lot if you require

1588
01:13:10,100 --> 01:13:12,780
applications to have knowledge about

1589
01:13:12,780 --> 01:13:16,620
your network so one thing is that the

1590
01:13:16,620 --> 01:13:18,840
network tries to figure out what's

1591
01:13:18,840 --> 01:13:22,679
um what should be done uh in order to

1592
01:13:22,679 --> 01:13:24,659
support the application but another

1593
01:13:24,659 --> 01:13:28,020
aspect would be to to require that the

1594
01:13:28,020 --> 01:13:30,900
application has uh some some knowledge

1595
01:13:30,900 --> 01:13:33,420
of uh where to locate the functions or

1596
01:13:33,420 --> 01:13:35,520
where to invoke the functions and I

1597
01:13:35,520 --> 01:13:37,620
think this is maybe not a good direction

1598
01:13:37,620 --> 01:13:40,020
to do that right because it makes things

1599
01:13:40,020 --> 01:13:41,340
more complex and I can remember

1600
01:13:41,340 --> 01:13:43,679
discussions here in the igf where the

1601
01:13:43,679 --> 01:13:46,620
application developers said um please

1602
01:13:46,620 --> 01:13:49,260
um no don't do that

1603
01:13:49,260 --> 01:13:52,380
yeah thanks a lot of so that's a lot of

1604
01:13:52,380 --> 01:13:55,260
interesting thoughts

1605
01:13:55,260 --> 01:13:58,080
maybe to quickly answer to a few of them

1606
01:13:58,080 --> 01:14:00,420
uh so regarding the robustness aspects

1607
01:14:00,420 --> 01:14:02,159
or the interaction between the functions

1608
01:14:02,159 --> 01:14:04,760
uh I'm not sure if we have actually

1609
01:14:04,760 --> 01:14:06,900
included it in the paper but at least in

1610
01:14:06,900 --> 01:14:08,940
the draft we discussed stuff about this

1611
01:14:08,940 --> 01:14:12,060
so for example regarding

1612
01:14:12,060 --> 01:14:14,159
um regions so basically having

1613
01:14:14,159 --> 01:14:16,320
re-transmission or if we would like to

1614
01:14:16,320 --> 01:14:19,199
have some kind of reliability maybe

1615
01:14:19,199 --> 01:14:21,120
um how would we then handle for example

1616
01:14:21,120 --> 01:14:22,500
if

1617
01:14:22,500 --> 01:14:24,719
we have two or three functions and then

1618
01:14:24,719 --> 01:14:26,640
the packet get lost gets lost after the

1619
01:14:26,640 --> 01:14:28,679
second function and we've already

1620
01:14:28,679 --> 01:14:31,080
changed state in the first and second

1621
01:14:31,080 --> 01:14:32,760
function maybe how can we actually

1622
01:14:32,760 --> 01:14:36,360
handle this so we have at least I think

1623
01:14:36,360 --> 01:14:39,239
discussed these problems in essence and

1624
01:14:39,239 --> 01:14:40,980
as I already said we mainly raise

1625
01:14:40,980 --> 01:14:43,260
questions and not don't provide much

1626
01:14:43,260 --> 01:14:46,380
answers but that's a very valid point

1627
01:14:46,380 --> 01:14:49,219
um and then

1628
01:14:50,520 --> 01:14:52,860
yeah I actually have lost the track of

1629
01:14:52,860 --> 01:14:54,120
the other aspects but maybe we can

1630
01:14:54,120 --> 01:14:56,100
discuss that also offline yeah yeah the

1631
01:14:56,100 --> 01:14:57,900
other aspect was addressing and

1632
01:14:57,900 --> 01:14:59,699
requiring applications to have knowledge

1633
01:14:59,699 --> 01:15:01,800
about functional support in the network

1634
01:15:01,800 --> 01:15:04,320
which complicates application writing

1635
01:15:04,320 --> 01:15:05,460
and

1636
01:15:05,460 --> 01:15:07,620
makes it complex also on the other side

1637
01:15:07,620 --> 01:15:09,600
not only complex in the networks on the

1638
01:15:09,600 --> 01:15:11,219
network side but also on the other side

1639
01:15:11,219 --> 01:15:13,320
yeah exactly that's why we've basically

1640
01:15:13,320 --> 01:15:15,300
discussed these different possibilities

1641
01:15:15,300 --> 01:15:17,400
that we have there

1642
01:15:17,400 --> 01:15:20,820
um and I think the so at least the

1643
01:15:20,820 --> 01:15:22,980
source routing aspect would would

1644
01:15:22,980 --> 01:15:24,960
require knowledge by the endpoints to

1645
01:15:24,960 --> 01:15:27,900
Route it through there while the

1646
01:15:27,900 --> 01:15:30,719
um yeah if we do the the information

1647
01:15:30,719 --> 01:15:33,360
Centric networking aspect maybe and only

1648
01:15:33,360 --> 01:15:34,500
know we would like to have this

1649
01:15:34,500 --> 01:15:36,540
functionality then this would of course

1650
01:15:36,540 --> 01:15:38,640
then again reduce the the complexity so

1651
01:15:38,640 --> 01:15:41,159
of course there are different that's why

1652
01:15:41,159 --> 01:15:42,540
I said we have different solutions and

1653
01:15:42,540 --> 01:15:43,860
we now have to think about which we

1654
01:15:43,860 --> 01:15:46,080
would actually like to deploy but I

1655
01:15:46,080 --> 01:15:47,699
think your considerations there are

1656
01:15:47,699 --> 01:15:51,019
really helpful in that context

1657
01:15:53,219 --> 01:15:55,440
um we have two more people in the queue

1658
01:15:55,440 --> 01:15:58,159
uh Lars

1659
01:15:58,159 --> 01:16:01,320
it's largest let me jump in this is Andy

1660
01:16:01,320 --> 01:16:03,420
Reid I'm sorry I couldn't work out how

1661
01:16:03,420 --> 01:16:05,159
to raise a hand on the ins on the

1662
01:16:05,159 --> 01:16:08,940
on-site Tool uh firstly thank you very

1663
01:16:08,940 --> 01:16:12,600
much a very interesting paper and I

1664
01:16:12,600 --> 01:16:15,800
think the connection between

1665
01:16:15,800 --> 01:16:18,480
the transparency of the end-to-end

1666
01:16:18,480 --> 01:16:20,520
principle and addressing seems to be a

1667
01:16:20,520 --> 01:16:22,620
really Central issue and it's very

1668
01:16:22,620 --> 01:16:25,920
similar to some of the aspects that we

1669
01:16:25,920 --> 01:16:29,060
address in the paper presented at last

1670
01:16:29,060 --> 01:16:32,940
irtf I'd be very happy to very keen to

1671
01:16:32,940 --> 01:16:35,640
develop that further I think we started

1672
01:16:35,640 --> 01:16:38,219
from slightly different start point that

1673
01:16:38,219 --> 01:16:40,760
came to some fairly similar conclusions

1674
01:16:40,760 --> 01:16:45,300
uh and I think understanding how you

1675
01:16:45,300 --> 01:16:48,120
define your addressing and how you

1676
01:16:48,120 --> 01:16:50,820
define your transparency is particularly

1677
01:16:50,820 --> 01:16:53,460
important and I think of it developed

1678
01:16:53,460 --> 01:16:55,980
that idea both potential getting some

1679
01:16:55,980 --> 01:17:00,000
real Clarity of what in network compute

1680
01:17:00,000 --> 01:17:01,800
actually means

1681
01:17:01,800 --> 01:17:04,620
yeah definitely yeah let's discuss this

1682
01:17:04,620 --> 01:17:07,440
then offline or later on

1683
01:17:07,440 --> 01:17:09,900
hi so um Lars Eggert

1684
01:17:09,900 --> 01:17:12,480
um first yes Public Service Announcement

1685
01:17:12,480 --> 01:17:14,460
if you want to be in this room you gotta

1686
01:17:14,460 --> 01:17:16,739
wear a mask You Gotta Wear it over your

1687
01:17:16,739 --> 01:17:18,239
mouth and nose and it's got to be an

1688
01:17:18,239 --> 01:17:21,179
ffp2 and 95 or better mask

1689
01:17:21,179 --> 01:17:23,100
if you don't want to comply you can

1690
01:17:23,100 --> 01:17:24,900
leave the room and join the session from

1691
01:17:24,900 --> 01:17:27,179
your hotel room or somewhere else so

1692
01:17:27,179 --> 01:17:28,980
please comply I know everybody's ears

1693
01:17:28,980 --> 01:17:30,540
are falling off I know it's not

1694
01:17:30,540 --> 01:17:32,040
consistent with what's happening outside

1695
01:17:32,040 --> 01:17:33,480
the session

1696
01:17:33,480 --> 01:17:35,460
but it is the community consensus that

1697
01:17:35,460 --> 01:17:37,020
this is the policy that we have so

1698
01:17:37,020 --> 01:17:40,080
thanks for complying and uh

1699
01:17:40,080 --> 01:17:41,940
provide input for the next consultation

1700
01:17:41,940 --> 01:17:43,800
what we're going to do up masks

1701
01:17:43,800 --> 01:17:46,440
that's it nice talk thank you

1702
01:17:46,440 --> 01:17:47,699
um I've sort of two points that sort of

1703
01:17:47,699 --> 01:17:49,500
correlate to the two parts you had in

1704
01:17:49,500 --> 01:17:52,920
your in your um slide so it's a work for

1705
01:17:52,920 --> 01:17:55,679
a company and and we do uh you know the

1706
01:17:55,679 --> 01:17:58,140
very early stages of of coin that we put

1707
01:17:58,140 --> 01:17:59,880
stuff on fpgas and we're thinking about

1708
01:17:59,880 --> 01:18:01,560
what might we want to put further into

1709
01:18:01,560 --> 01:18:03,060
the network and so

1710
01:18:03,060 --> 01:18:05,100
the outline here in the beginning about

1711
01:18:05,100 --> 01:18:07,320
the end-to-end principle sort of matched

1712
01:18:07,320 --> 01:18:09,000
sort of what I thought intuitively but I

1713
01:18:09,000 --> 01:18:10,380
hadn't really written it down or thought

1714
01:18:10,380 --> 01:18:12,060
about it sort of formally in

1715
01:18:12,060 --> 01:18:13,980
unstructured way so that was very useful

1716
01:18:13,980 --> 01:18:15,120
thank you I think you got something

1717
01:18:15,120 --> 01:18:16,440
there

1718
01:18:16,440 --> 01:18:18,360
um that that makes sense so so think

1719
01:18:18,360 --> 01:18:20,580
further in that direction very good

1720
01:18:20,580 --> 01:18:21,900
um and second on the transport protocol

1721
01:18:21,900 --> 01:18:23,460
side so again from the sort of practical

1722
01:18:23,460 --> 01:18:25,560
view that you know one I want to put

1723
01:18:25,560 --> 01:18:27,600
stuff that's expensive on the CPU

1724
01:18:27,600 --> 01:18:30,360
somewhere else where it's cheaper

1725
01:18:30,360 --> 01:18:33,060
um so I want to do the minimal thing

1726
01:18:33,060 --> 01:18:35,040
um to make my current workload my

1727
01:18:35,040 --> 01:18:37,140
current application faster

1728
01:18:37,140 --> 01:18:38,760
that means like I'm not I don't want to

1729
01:18:38,760 --> 01:18:40,620
bother with new protocols I don't want

1730
01:18:40,620 --> 01:18:43,739
to like I want I want to put stuff that

1731
01:18:43,739 --> 01:18:45,239
costs money now and put it somewhere

1732
01:18:45,239 --> 01:18:46,980
where it's cheaper and have everything

1733
01:18:46,980 --> 01:18:49,199
else be the same and specifically I want

1734
01:18:49,199 --> 01:18:50,580
to do it for stuff that is sort of

1735
01:18:50,580 --> 01:18:53,940
internet related right so the more you

1736
01:18:53,940 --> 01:18:55,440
change and the more it becomes custom

1737
01:18:55,440 --> 01:18:57,780
although it might be optimized in some

1738
01:18:57,780 --> 01:18:59,820
way the harder it gets for me to

1739
01:18:59,820 --> 01:19:02,100
actually start doing this and so so

1740
01:19:02,100 --> 01:19:04,560
since this is the irtf which is close to

1741
01:19:04,560 --> 01:19:06,000
the IET if I would sort of encourage

1742
01:19:06,000 --> 01:19:08,159
people to maybe think about the low

1743
01:19:08,159 --> 01:19:10,739
hanging fruit that has sort of easy to

1744
01:19:10,739 --> 01:19:12,360
get to provide a bunch of benefit

1745
01:19:12,360 --> 01:19:14,820
already and that sort of move us into

1746
01:19:14,820 --> 01:19:16,500
that direction where later on we might

1747
01:19:16,500 --> 01:19:18,360
be able to pick up some things I do

1748
01:19:18,360 --> 01:19:19,679
understand this research I do anything

1749
01:19:19,679 --> 01:19:21,780
that's where the hard problems that lets

1750
01:19:21,780 --> 01:19:24,060
you publish paper so excellent but for

1751
01:19:24,060 --> 01:19:25,739
sort of us here that try to think about

1752
01:19:25,739 --> 01:19:27,420
the ITF

1753
01:19:27,420 --> 01:19:30,360
the things that we can deploy soon are

1754
01:19:30,360 --> 01:19:32,640
much more interesting to me thank you

1755
01:19:32,640 --> 01:19:35,179
thanks

1756
01:19:36,620 --> 01:19:39,600
Eric not Mark yeah I really like the the

1757
01:19:39,600 --> 01:19:42,120
restaurant I would say last but not

1758
01:19:42,120 --> 01:19:44,300
least

1759
01:19:44,640 --> 01:19:46,860
yeah Eric Norman so I really like sort

1760
01:19:46,860 --> 01:19:48,360
of going back and thinking about the

1761
01:19:48,360 --> 01:19:50,040
stuff in terms of what what are the

1762
01:19:50,040 --> 01:19:52,080
implications and sort of framing it the

1763
01:19:52,080 --> 01:19:54,480
way we've done it one thing I didn't see

1764
01:19:54,480 --> 01:19:57,060
here which ties into robustness is this

1765
01:19:57,060 --> 01:19:59,760
notion indeed the issues around state in

1766
01:19:59,760 --> 01:20:02,100
the network right and and the sort of

1767
01:20:02,100 --> 01:20:04,860
paid sharing aspects we have when all of

1768
01:20:04,860 --> 01:20:06,540
the session transport related State

1769
01:20:06,540 --> 01:20:08,940
lives at the endpoints

1770
01:20:08,940 --> 01:20:10,980
um so it might be useful to to to add

1771
01:20:10,980 --> 01:20:12,480
that to the sort of list of things to

1772
01:20:12,480 --> 01:20:14,040
consider in this picture

1773
01:20:14,040 --> 01:20:15,719
you raised an interesting question about

1774
01:20:15,719 --> 01:20:18,960
sort of uh a common transport protocol

1775
01:20:18,960 --> 01:20:20,580
whatever that means in the this context

1776
01:20:20,580 --> 01:20:23,040
right as opposed to something specific I

1777
01:20:23,040 --> 01:20:24,420
think we already have examples where

1778
01:20:24,420 --> 01:20:26,640
people are proposing things that you

1779
01:20:26,640 --> 01:20:28,860
might argue not really compute but

1780
01:20:28,860 --> 01:20:30,480
there's this thing things called in

1781
01:20:30,480 --> 01:20:34,020
inbound inline oam where your compute is

1782
01:20:34,020 --> 01:20:35,760
just extracting state from the the

1783
01:20:35,760 --> 01:20:37,260
routers as you pass through them right

1784
01:20:37,260 --> 01:20:39,179
so you can actually now measure things

1785
01:20:39,179 --> 01:20:41,760
in more interesting ways but but it said

1786
01:20:41,760 --> 01:20:44,159
we have that and then we have ICN at the

1787
01:20:44,159 --> 01:20:46,739
other end right yeah what what are the

1788
01:20:46,739 --> 01:20:48,840
things what is from a research

1789
01:20:48,840 --> 01:20:50,040
perspective

1790
01:20:50,040 --> 01:20:52,440
sort of ignoring Lars you know we would

1791
01:20:52,440 --> 01:20:54,420
like to deploy something tomorrow but

1792
01:20:54,420 --> 01:20:56,520
but you know what's the sort of spectrum

1793
01:20:56,520 --> 01:20:58,560
over there right yeah I think that's

1794
01:20:58,560 --> 01:21:00,179
something that's interesting to consider

1795
01:21:00,179 --> 01:21:02,580
continue to explore

1796
01:21:02,580 --> 01:21:06,540
yeah thanks a lot for your comment uh so

1797
01:21:06,540 --> 01:21:09,000
um yeah there is a lot of or a large

1798
01:21:09,000 --> 01:21:11,219
spectrum of possible solutions so from

1799
01:21:11,219 --> 01:21:13,020
something with only minor tweaks maybe

1800
01:21:13,020 --> 01:21:15,300
and deploy tomorrow to having something

1801
01:21:15,300 --> 01:21:18,420
really brand new and taking a lot of

1802
01:21:18,420 --> 01:21:20,520
years to to deploy

1803
01:21:20,520 --> 01:21:22,199
um so really interesting to see where

1804
01:21:22,199 --> 01:21:25,800
this will go perhaps we'll need more uh

1805
01:21:25,800 --> 01:21:27,900
practical experience first as Dirk

1806
01:21:27,900 --> 01:21:29,300
mentioned in this in the first question

1807
01:21:29,300 --> 01:21:32,580
and then regarding the robustness aspect

1808
01:21:32,580 --> 01:21:35,100
as I said to uh olan's question earlier

1809
01:21:35,100 --> 01:21:37,199
I think we have some discussions on that

1810
01:21:37,199 --> 01:21:39,420
in in the draft I'm not sure if we had

1811
01:21:39,420 --> 01:21:41,940
discussions about state but we had at

1812
01:21:41,940 --> 01:21:43,679
least had it on in our mind when we

1813
01:21:43,679 --> 01:21:46,679
wrote about it uh about the stuff uh so

1814
01:21:46,679 --> 01:21:48,420
it was there but they are also

1815
01:21:48,420 --> 01:21:49,739
definitely something that we need to

1816
01:21:49,739 --> 01:21:51,960
consider when

1817
01:21:51,960 --> 01:21:54,300
deploying things in these directions

1818
01:21:54,300 --> 01:21:56,820
yeah so thanks again for the for the

1819
01:21:56,820 --> 01:22:00,659
comment for questions or both

1820
01:22:00,659 --> 01:22:01,980
okay

1821
01:22:01,980 --> 01:22:04,980
um so for sake of time we'll go to the

1822
01:22:04,980 --> 01:22:07,380
uh distributed Ledger thank you very

1823
01:22:07,380 --> 01:22:08,400
much

1824
01:22:08,400 --> 01:22:12,480
um Ike and uh and and Dirk also who was

1825
01:22:12,480 --> 01:22:14,460
part of this

1826
01:22:14,460 --> 01:22:15,659
um so yes

1827
01:22:15,659 --> 01:22:19,460
um next presentation

1828
01:22:24,900 --> 01:22:27,900
them

1829
01:22:29,100 --> 01:22:32,100
uh

1830
01:22:32,360 --> 01:22:35,280
okay can work this speaker is not here

1831
01:22:35,280 --> 01:22:38,820
so it's is it remote or

1832
01:22:38,820 --> 01:22:41,100
um yeah I'm talking today hi everybody

1833
01:22:41,100 --> 01:22:44,340
I'm David RW David can you share the

1834
01:22:44,340 --> 01:22:46,260
slides or you want me to emerge with it

1835
01:22:46,260 --> 01:22:49,320
I I will actually do

1836
01:22:49,320 --> 01:22:51,239
it thank you

1837
01:22:51,239 --> 01:22:53,360
yeah

1838
01:22:53,520 --> 01:22:56,159
um so uh hello everybody thank you for

1839
01:22:56,159 --> 01:22:57,900
uh attending this session so I'm talking

1840
01:22:57,900 --> 01:23:00,000
today about insights on the impact of

1841
01:23:00,000 --> 01:23:02,040
the elts and provided networks is a

1842
01:23:02,040 --> 01:23:03,600
joint work with Derek trust and Mike

1843
01:23:03,600 --> 01:23:07,500
McBride and seen Farm Xin Xin

1844
01:23:07,500 --> 01:23:10,460
um next slide please

1845
01:23:11,940 --> 01:23:15,120
so we have been working before already

1846
01:23:15,120 --> 01:23:19,080
so we published in this ISE white paper

1847
01:23:19,080 --> 01:23:21,480
um some some related material we started

1848
01:23:21,480 --> 01:23:23,400
with a simple experiment trying to

1849
01:23:23,400 --> 01:23:26,699
measure how was the dlts behave in our

1850
01:23:26,699 --> 01:23:30,179
internet we realized a sort of a passive

1851
01:23:30,179 --> 01:23:32,280
measurement we did some basic analysis

1852
01:23:32,280 --> 01:23:35,340
and we also wrote this this draft that

1853
01:23:35,340 --> 01:23:38,520
is published there and the upcoming

1854
01:23:38,520 --> 01:23:41,280
paper has a little bit more analytical

1855
01:23:41,280 --> 01:23:43,620
instructory analysis We compare with the

1856
01:23:43,620 --> 01:23:46,380
studies and is about to be published

1857
01:23:46,380 --> 01:23:49,580
next slide please

1858
01:23:50,699 --> 01:23:53,460
um so for instead of understanding on a

1859
01:23:53,460 --> 01:23:56,580
high level and how it is permissionless

1860
01:23:56,580 --> 01:23:58,560
distributed consensus systems are

1861
01:23:58,560 --> 01:24:01,920
thought and how the designers thought

1862
01:24:01,920 --> 01:24:03,540
about this how to approach the

1863
01:24:03,540 --> 01:24:05,460
permissionless approach they take

1864
01:24:05,460 --> 01:24:08,159
basically the so-called distributed hash

1865
01:24:08,159 --> 01:24:12,239
tables that are nothing else that a

1866
01:24:12,239 --> 01:24:14,900
place where

1867
01:24:14,900 --> 01:24:17,760
where files are they close and receive

1868
01:24:17,760 --> 01:24:20,040
content and the goal for these

1869
01:24:20,040 --> 01:24:22,260
distributed hash tables was in the

1870
01:24:22,260 --> 01:24:23,880
beginning for two decentralize and

1871
01:24:23,880 --> 01:24:26,159
distribute the file system a neighbor

1872
01:24:26,159 --> 01:24:28,080
file system in a permissionless fashion

1873
01:24:28,080 --> 01:24:30,260
or faulty Network

1874
01:24:30,260 --> 01:24:34,620
then over these network files someone

1875
01:24:34,620 --> 01:24:37,980
can agree on the status in a state

1876
01:24:37,980 --> 01:24:40,440
machine so the goal here on the

1877
01:24:40,440 --> 01:24:42,300
distributed consensus systems is to

1878
01:24:42,300 --> 01:24:44,760
decentralize and distribute State

1879
01:24:44,760 --> 01:24:47,100
machine in a permissions fashion as well

1880
01:24:47,100 --> 01:24:49,800
over 40 Network

1881
01:24:49,800 --> 01:24:52,020
and after that it came the distributed

1882
01:24:52,020 --> 01:24:54,179
later technology that is nothing else

1883
01:24:54,179 --> 01:24:56,880
that a consensus oriented system that is

1884
01:24:56,880 --> 01:25:00,300
agree on distributed content

1885
01:25:00,300 --> 01:25:03,840
it resembles a voting system and it

1886
01:25:03,840 --> 01:25:05,179
often

1887
01:25:05,179 --> 01:25:07,860
execute the consensus or not replicated

1888
01:25:07,860 --> 01:25:11,580
Ledger and currently is built over

1889
01:25:11,580 --> 01:25:13,679
internet Scale based on peer-to-peer

1890
01:25:13,679 --> 01:25:15,780
Networks

1891
01:25:15,780 --> 01:25:20,300
um so our next slide please

1892
01:25:21,659 --> 01:25:24,600
we identify in these systems in these

1893
01:25:24,600 --> 01:25:27,060
three basic interaction we call the DLT

1894
01:25:27,060 --> 01:25:30,420
service interactions where a client for

1895
01:25:30,420 --> 01:25:32,640
example commits a transaction or a

1896
01:25:32,640 --> 01:25:34,260
request to the distributed consensus

1897
01:25:34,260 --> 01:25:36,780
system a miner on another peer can

1898
01:25:36,780 --> 01:25:40,320
commit or a found block

1899
01:25:40,320 --> 01:25:43,440
um for the truth as a voter in the

1900
01:25:43,440 --> 01:25:45,239
distributed consensus system

1901
01:25:45,239 --> 01:25:47,880
using previously discovered clients and

1902
01:25:47,880 --> 01:25:51,480
any client at the end can read the blog

1903
01:25:51,480 --> 01:25:54,300
how these interactions are realized in

1904
01:25:54,300 --> 01:25:57,140
Nexus live please

1905
01:25:59,280 --> 01:26:02,040
um actually we identify a key mechanism

1906
01:26:02,040 --> 01:26:05,639
to realize these interactions it's the

1907
01:26:05,639 --> 01:26:08,159
so-called Atomic broadcast and for the

1908
01:26:08,159 --> 01:26:10,800
case of these larger scale system these

1909
01:26:10,800 --> 01:26:13,739
Atomic broadcast is randomized over a

1910
01:26:13,739 --> 01:26:16,860
set of receivers mainly to avoid

1911
01:26:16,860 --> 01:26:19,679
possible collusion of fires of a stable

1912
01:26:19,679 --> 01:26:21,960
receiver set and to ensure distribution

1913
01:26:21,960 --> 01:26:24,480
of Ledger information across all over

1914
01:26:24,480 --> 01:26:27,780
all over the peers over the time

1915
01:26:27,780 --> 01:26:31,139
it comes with permissionless approach

1916
01:26:31,139 --> 01:26:33,600
but also deals with the scale nature of

1917
01:26:33,600 --> 01:26:36,659
these distributed system and it's been

1918
01:26:36,659 --> 01:26:39,120
data set before as a peer-to-peer system

1919
01:26:39,120 --> 01:26:42,300
on top of Ip networks using GDP TCP and

1920
01:26:42,300 --> 01:26:43,340
quick

1921
01:26:43,340 --> 01:26:47,000
next slide please

1922
01:26:47,780 --> 01:26:53,159
we identify in these build systems these

1923
01:26:53,159 --> 01:26:54,840
communication patterns

1924
01:26:54,840 --> 01:26:58,500
and we notice in the left hand side for

1925
01:26:58,500 --> 01:27:01,440
example we identified the discovery part

1926
01:27:01,440 --> 01:27:03,420
of the protocol and on the right hand

1927
01:27:03,420 --> 01:27:05,699
side the pool establishment

1928
01:27:05,699 --> 01:27:08,340
a part of the protocol the pool is

1929
01:27:08,340 --> 01:27:11,940
necessary to execute the randomized

1930
01:27:11,940 --> 01:27:14,400
broadcast as said before that is the key

1931
01:27:14,400 --> 01:27:17,040
core mechanism to diffuse information

1932
01:27:17,040 --> 01:27:21,000
over the entire system to agree on the

1933
01:27:21,000 --> 01:27:24,060
state of the of the of the system

1934
01:27:24,060 --> 01:27:27,780
and the discovery part starts with a

1935
01:27:27,780 --> 01:27:30,300
load of bootstrap nodes from a list of

1936
01:27:30,300 --> 01:27:33,080
the ltpers that is housed on a specific

1937
01:27:33,080 --> 01:27:36,540
IP addresses all around the world we

1938
01:27:36,540 --> 01:27:39,000
randomized this list and we tried to

1939
01:27:39,000 --> 01:27:41,100
contact them executing

1940
01:27:41,100 --> 01:27:44,219
UDP ping and pongs we identify which

1941
01:27:44,219 --> 01:27:46,679
peers are reachable and which ones are

1942
01:27:46,679 --> 01:27:48,960
not and to the ones that were reachable

1943
01:27:48,960 --> 01:27:52,920
we sent queries to request more more

1944
01:27:52,920 --> 01:27:55,860
nodes with these notes we again

1945
01:27:55,860 --> 01:27:57,500
randomize

1946
01:27:57,500 --> 01:28:01,100
this list of DLT peers to establish

1947
01:28:01,100 --> 01:28:04,380
upper layer communication something

1948
01:28:04,380 --> 01:28:07,320
based on TCP Transport Security we

1949
01:28:07,320 --> 01:28:09,840
execute capabilities exchange and we end

1950
01:28:09,840 --> 01:28:13,380
up adding this peer to the pool that we

1951
01:28:13,380 --> 01:28:15,780
are going to use for executing a

1952
01:28:15,780 --> 01:28:19,199
broadcast or try to execute broadcasting

1953
01:28:19,199 --> 01:28:20,940
the entire system

1954
01:28:20,940 --> 01:28:23,699
next slide please

1955
01:28:23,699 --> 01:28:26,219
so what is changing what is challenging

1956
01:28:26,219 --> 01:28:30,300
about this we identify mainly a cost for

1957
01:28:30,300 --> 01:28:33,719
pool maintenance for example peers need

1958
01:28:33,719 --> 01:28:36,000
I said before to continuously establish

1959
01:28:36,000 --> 01:28:37,500
and maintain these reachability

1960
01:28:37,500 --> 01:28:40,199
information to discover new peers and to

1961
01:28:40,199 --> 01:28:43,199
send information about the latest state

1962
01:28:43,199 --> 01:28:45,360
of the blockchain

1963
01:28:45,360 --> 01:28:48,480
each peer needs to maintain constantly

1964
01:28:48,480 --> 01:28:50,340
changing this pool so it means that it's

1965
01:28:50,340 --> 01:28:52,440
always constantly exchanging information

1966
01:28:52,440 --> 01:28:56,940
about signatures TLS TCP and session in

1967
01:28:56,940 --> 01:28:57,739
general

1968
01:28:57,739 --> 01:29:01,020
we identify also because for resilience

1969
01:29:01,020 --> 01:29:02,360
and reliability

1970
01:29:02,360 --> 01:29:04,980
how the failing nodes are causing

1971
01:29:04,980 --> 01:29:08,040
latency on the pool establishments hence

1972
01:29:08,040 --> 01:29:10,560
is also delaying the distributed

1973
01:29:10,560 --> 01:29:13,260
consensus and for the case of TCS and

1974
01:29:13,260 --> 01:29:15,179
content retrieval 40 cases of

1975
01:29:15,179 --> 01:29:17,300
distributed hash tables

1976
01:29:17,300 --> 01:29:20,040
we also identified the timeouts that are

1977
01:29:20,040 --> 01:29:22,380
inducing removal of peers and that

1978
01:29:22,380 --> 01:29:25,260
causing the replenishing of the pool

1979
01:29:25,260 --> 01:29:28,199
that's where we identified that matching

1980
01:29:28,199 --> 01:29:30,900
capabilities in in these peers at the

1981
01:29:30,900 --> 01:29:33,420
scale is very costly

1982
01:29:33,420 --> 01:29:34,080
um

1983
01:29:34,080 --> 01:29:37,320
and we as well identified the unicast

1984
01:29:37,320 --> 01:29:42,000
replication for the DLT to work

1985
01:29:42,000 --> 01:29:45,000
and as well as some issues with the IP

1986
01:29:45,000 --> 01:29:47,219
address privacy because when you try to

1987
01:29:47,219 --> 01:29:50,580
join these networks your IP address is

1988
01:29:50,580 --> 01:29:52,920
exposed to the entire system

1989
01:29:52,920 --> 01:29:56,120
next slide please

1990
01:29:56,219 --> 01:30:00,920
so we set up um that would scale

1991
01:30:00,920 --> 01:30:04,560
experiment and we classify the peers

1992
01:30:04,560 --> 01:30:07,800
that we look we compare and we also

1993
01:30:07,800 --> 01:30:09,960
Identify some geographical distribution

1994
01:30:09,960 --> 01:30:13,560
we identify some centrality things but

1995
01:30:13,560 --> 01:30:16,679
for today we are exposing more Network

1996
01:30:16,679 --> 01:30:19,500
oriented results and we will start with

1997
01:30:19,500 --> 01:30:23,219
full establishment time this is the time

1998
01:30:23,219 --> 01:30:25,560
that a single peer from a local computer

1999
01:30:25,560 --> 01:30:26,900
will

2000
01:30:26,900 --> 01:30:31,800
use to build the pool of peers that is

2001
01:30:31,800 --> 01:30:35,699
willing to broadcast information to

2002
01:30:35,699 --> 01:30:39,239
so uh in the first plot on the left we

2003
01:30:39,239 --> 01:30:42,900
identify for a single sample how long

2004
01:30:42,900 --> 01:30:45,239
did it take to

2005
01:30:45,239 --> 01:30:49,560
um yeah to uh to complete the pool

2006
01:30:49,560 --> 01:30:54,139
establishment why we um

2007
01:30:54,780 --> 01:30:59,280
and we identified the one-third of the

2008
01:30:59,280 --> 01:31:02,219
the total number of the pools at TN over

2009
01:31:02,219 --> 01:31:04,920
3 and we identify this as a single

2010
01:31:04,920 --> 01:31:07,679
random variable and we analyze uh our

2011
01:31:07,679 --> 01:31:10,340
entire experiment and preaching this

2012
01:31:10,340 --> 01:31:13,679
probability distribution We compare and

2013
01:31:13,679 --> 01:31:16,679
approximate with a log normal scale and

2014
01:31:16,679 --> 01:31:19,679
with a power load distribution for the

2015
01:31:19,679 --> 01:31:22,380
two random variables uh next slide

2016
01:31:22,380 --> 01:31:24,420
please

2017
01:31:24,420 --> 01:31:29,100
uh why this time is um so some sort of

2018
01:31:29,100 --> 01:31:32,219
huge uh and what are the components we

2019
01:31:32,219 --> 01:31:35,400
try to analyze from the point of view of

2020
01:31:35,400 --> 01:31:37,080
identifying what is happening to

2021
01:31:37,080 --> 01:31:41,040
discover a peer uh for outgoing and for

2022
01:31:41,040 --> 01:31:43,560
incoming request as shown in the plot

2023
01:31:43,560 --> 01:31:47,280
for example uh on the left side we

2024
01:31:47,280 --> 01:31:50,040
identify the number of attempts that our

2025
01:31:50,040 --> 01:31:52,940
node tries to execute over the Internet

2026
01:31:52,940 --> 01:31:56,340
out of these how many were reachabled it

2027
01:31:56,340 --> 01:31:58,860
is in the purple line and out of this

2028
01:31:58,860 --> 01:32:02,159
how many Discovery and attempts I

2029
01:32:02,159 --> 01:32:05,940
executed and how many success we got for

2030
01:32:05,940 --> 01:32:09,360
outgoing and for income in request next

2031
01:32:09,360 --> 01:32:12,080
is like this

2032
01:32:13,199 --> 01:32:15,120
yeah

2033
01:32:15,120 --> 01:32:17,820
um after we discovered the peers that we

2034
01:32:17,820 --> 01:32:19,860
want to communicate we are willing to

2035
01:32:19,860 --> 01:32:23,940
communicate with we start by executing

2036
01:32:23,940 --> 01:32:27,900
an attempt of TCP socket initialization

2037
01:32:27,900 --> 01:32:31,080
and that's plotted for outgoing request

2038
01:32:31,080 --> 01:32:34,080
on the left hand side as a red curve out

2039
01:32:34,080 --> 01:32:37,980
of these for example we we were not

2040
01:32:37,980 --> 01:32:40,500
successful in a certain number of

2041
01:32:40,500 --> 01:32:43,620
Transport Security negotiation or

2042
01:32:43,620 --> 01:32:45,600
capability checkpoint of capability

2043
01:32:45,600 --> 01:32:48,719
protocol this capability protocol for

2044
01:32:48,719 --> 01:32:51,540
example is an upper layer protocol for

2045
01:32:51,540 --> 01:32:54,480
ethereum that it requires to run in a

2046
01:32:54,480 --> 01:32:57,900
specific version or the checkpoint makes

2047
01:32:57,900 --> 01:33:00,420
reference to for example the latest blog

2048
01:33:00,420 --> 01:33:03,420
that was agreed in the entire system

2049
01:33:03,420 --> 01:33:07,280
uh next slide please

2050
01:33:08,580 --> 01:33:11,280
so we were thinking uh so with these

2051
01:33:11,280 --> 01:33:12,360
observations

2052
01:33:12,360 --> 01:33:14,280
um like for example that miners provide

2053
01:33:14,280 --> 01:33:17,580
a service capability to others binders

2054
01:33:17,580 --> 01:33:19,199
um the communication is some sort of

2055
01:33:19,199 --> 01:33:21,900
constrain it and so we need to negotiate

2056
01:33:21,900 --> 01:33:24,719
uh TLS capabilities certain sort of

2057
01:33:24,719 --> 01:33:27,300
hardware and we need to identify the

2058
01:33:27,300 --> 01:33:30,840
blockchain checkpoint to to get the

2059
01:33:30,840 --> 01:33:33,179
right minors

2060
01:33:33,179 --> 01:33:36,179
um and what is more is this group of

2061
01:33:36,179 --> 01:33:39,000
peers are instantaneously randomized to

2062
01:33:39,000 --> 01:33:41,100
ensure protection against collusion or

2063
01:33:41,100 --> 01:33:44,400
what is so-called Eclipse attacks

2064
01:33:44,400 --> 01:33:45,960
um so

2065
01:33:45,960 --> 01:33:48,960
um the put creation is done at every

2066
01:33:48,960 --> 01:33:52,199
peer and is the core mechanism to enable

2067
01:33:52,199 --> 01:33:55,980
this this operation trying to execute a

2068
01:33:55,980 --> 01:33:58,199
broadcast to the entire system based on

2069
01:33:58,199 --> 01:34:00,120
unicast operations

2070
01:34:00,120 --> 01:34:03,239
these these operations is done on a

2071
01:34:03,239 --> 01:34:05,639
fixed group size and is identified it's

2072
01:34:05,639 --> 01:34:08,159
defined through heuristic there are some

2073
01:34:08,159 --> 01:34:10,460
theoretical balancing

2074
01:34:10,460 --> 01:34:14,820
this heuristic based on to Define when

2075
01:34:14,820 --> 01:34:16,620
the system is going to converge and when

2076
01:34:16,620 --> 01:34:18,840
it's not going to converge

2077
01:34:18,840 --> 01:34:23,400
so can the network help with these

2078
01:34:23,400 --> 01:34:28,699
put these observations next slide please

2079
01:34:32,040 --> 01:34:35,300
um so we think for example that

2080
01:34:35,300 --> 01:34:39,179
the previous slide yeah

2081
01:34:39,179 --> 01:34:40,199
um

2082
01:34:40,199 --> 01:34:42,780
that programmable in network compute

2083
01:34:42,780 --> 01:34:45,360
capabilities can help with realizing

2084
01:34:45,360 --> 01:34:48,060
some some of these aspects that I just

2085
01:34:48,060 --> 01:34:50,820
showed like for example use service

2086
01:34:50,820 --> 01:34:54,900
Centric abstraction where miners are

2087
01:34:54,900 --> 01:34:57,900
service instances to DLT to a DLT

2088
01:34:57,900 --> 01:35:00,840
service the routes become a pool of

2089
01:35:00,840 --> 01:35:02,699
service instances to enable

2090
01:35:02,699 --> 01:35:05,420
instantaneous randomization

2091
01:35:05,420 --> 01:35:08,159
on the end point

2092
01:35:08,159 --> 01:35:10,860
um the reachability can be improved

2093
01:35:10,860 --> 01:35:14,580
through the encoded constraints or in in

2094
01:35:14,580 --> 01:35:17,100
an email structure and we can replace

2095
01:35:17,100 --> 01:35:19,260
the randomized unicorns with a forward

2096
01:35:19,260 --> 01:35:21,659
multicast capability that is built in

2097
01:35:21,659 --> 01:35:26,300
the network for a fixed side of of peers

2098
01:35:26,300 --> 01:35:28,500
we can ensure as well that every

2099
01:35:28,500 --> 01:35:30,600
requests leads to a randomized set of

2100
01:35:30,600 --> 01:35:33,960
peers which includes the use of IP

2101
01:35:33,960 --> 01:35:36,480
multicast

2102
01:35:36,480 --> 01:35:38,699
um some thoughts are very welcome some

2103
01:35:38,699 --> 01:35:40,739
some questions as well I'm happy to

2104
01:35:40,739 --> 01:35:42,780
discuss and take your questions thank

2105
01:35:42,780 --> 01:35:44,280
you very much

2106
01:35:44,280 --> 01:35:46,519
foreign

2107
01:35:53,780 --> 01:35:57,239
are there any questions

2108
01:35:57,239 --> 01:36:00,659
uh if not actually we're getting late so

2109
01:36:00,659 --> 01:36:04,500
maybe we want to move to the next

2110
01:36:04,500 --> 01:36:08,900
presentation which I'm going to

2111
01:36:08,900 --> 01:36:12,320
load right now

2112
01:36:14,159 --> 01:36:16,280
um

2113
01:36:17,040 --> 01:36:20,600
I think it's certain

2114
01:36:20,719 --> 01:36:23,420
do we have yes we have

2115
01:36:23,420 --> 01:36:25,800
pascalsan so

2116
01:36:25,800 --> 01:36:29,460
there we go uh pascad please hello can

2117
01:36:29,460 --> 01:36:32,060
you hear on me

2118
01:36:32,820 --> 01:36:33,860
hello

2119
01:36:33,860 --> 01:36:36,840
okay uh

2120
01:36:36,840 --> 01:36:38,040
uh so

2121
01:36:38,040 --> 01:36:40,040
um

2122
01:36:44,300 --> 01:36:47,520
and so I subject of this talk is a

2123
01:36:47,520 --> 01:36:50,760
presentation of this draft which is

2124
01:36:50,760 --> 01:36:53,699
called ioc and I use system for

2125
01:36:53,699 --> 01:36:56,520
alternative secure events and it is an

2126
01:36:56,520 --> 01:36:58,800
architecture of secure element in the

2127
01:36:58,800 --> 01:36:59,480
internet

2128
01:36:59,480 --> 01:37:03,360
whose resources are identified by Yuri

2129
01:37:03,360 --> 01:37:06,300
so next slide please

2130
01:37:06,300 --> 01:37:09,719
oh okay you can control it I don't know

2131
01:37:09,719 --> 01:37:13,560
uh so two words about secure events uh

2132
01:37:13,560 --> 01:37:14,960
secure event contains 35

2133
01:37:14,960 --> 01:37:18,360
microcontrollers and embedded software

2134
01:37:18,360 --> 01:37:20,880
so they have it evaluation Assurance

2135
01:37:20,880 --> 01:37:24,960
level up to El 6 Plus even a square

2136
01:37:24,960 --> 01:37:27,440
rooting from one two two to seven

2137
01:37:27,440 --> 01:37:30,239
according to Common fetalia so you all

2138
01:37:30,239 --> 01:37:31,920
know Security man because the second

2139
01:37:31,920 --> 01:37:35,719
element are used in a bank card SIM card

2140
01:37:35,719 --> 01:37:38,520
passport and so on

2141
01:37:38,520 --> 01:37:40,199
so there are a lot of secure elements

2142
01:37:40,199 --> 01:37:43,560
produced every year so 9 billion last

2143
01:37:43,560 --> 01:37:47,400
years and uh small CPU with a very

2144
01:37:47,400 --> 01:37:50,159
modest quantity of S1

2145
01:37:50,159 --> 01:37:53,940
and a non-volatile memory

2146
01:37:53,940 --> 01:37:57,179
there's the Next Generation and in the

2147
01:37:57,179 --> 01:38:01,560
Next Generation you have a more RAM and

2148
01:38:01,560 --> 01:38:04,080
more fresh and it's welcome to notice

2149
01:38:04,080 --> 01:38:06,360
that all the cheap include the crypto

2150
01:38:06,360 --> 01:38:07,560
processor

2151
01:38:07,560 --> 01:38:11,760
so it means they have a modest Computing

2152
01:38:11,760 --> 01:38:15,659
resources but they are able to compute a

2153
01:38:15,659 --> 01:38:19,040
usual cryptography with accepting

2154
01:38:19,040 --> 01:38:22,760
acceptable performance

2155
01:38:23,540 --> 01:38:26,820
Legacy communication news cellular

2156
01:38:26,820 --> 01:38:30,360
interface normalized by ISO 1716

2157
01:38:30,360 --> 01:38:34,139
standard but you can find a to c

2158
01:38:34,139 --> 01:38:37,940
interface or SPI interface

2159
01:38:37,940 --> 01:38:41,880
they exchange a small packet which are

2160
01:38:41,880 --> 01:38:45,719
named apidio by ISO 7816 the small

2161
01:38:45,719 --> 01:38:47,540
packets means about

2162
01:38:47,540 --> 01:38:49,920
20056 bytes

2163
01:38:49,920 --> 01:38:53,400
they have open programming on their own

2164
01:38:53,400 --> 01:38:56,219
months for example Java car the 6

2165
01:38:56,219 --> 01:39:00,260
billion jerichada produce every years

2166
01:39:00,260 --> 01:39:02,760
deploy every years let's say that most

2167
01:39:02,760 --> 01:39:05,719
of Simca for example use

2168
01:39:05,719 --> 01:39:10,020
it means that you can write for program

2169
01:39:10,020 --> 01:39:13,800
in the java Cloud language which is a

2170
01:39:13,800 --> 01:39:16,980
subset of Java or you can another use a

2171
01:39:16,980 --> 01:39:21,000
usual programming language like like C

2172
01:39:21,000 --> 01:39:22,080
and so on

2173
01:39:22,080 --> 01:39:25,380
and at last but not at least uh there

2174
01:39:25,380 --> 01:39:28,620
are a secure software management

2175
01:39:28,620 --> 01:39:32,040
framework which is a standardized by the

2176
01:39:32,040 --> 01:39:34,920
global platform Consortium and that is

2177
01:39:34,920 --> 01:39:37,800
supported by quite all securement and

2178
01:39:37,800 --> 01:39:40,139
this is used to list the delete and

2179
01:39:40,139 --> 01:39:41,580
upload

2180
01:39:41,580 --> 01:39:44,880
application in a secure element for

2181
01:39:44,880 --> 01:39:47,880
example mobile operator use over there

2182
01:39:47,880 --> 01:39:49,980
technique in order to download

2183
01:39:49,980 --> 01:39:52,980
application in SIM card so next slide

2184
01:39:52,980 --> 01:39:55,280
please

2185
01:39:56,880 --> 01:39:57,900
um

2186
01:39:57,900 --> 01:40:00,600
so in in this graph we want to connect

2187
01:40:00,600 --> 01:40:04,380
the security element to internet and uh

2188
01:40:04,380 --> 01:40:06,960
why we want to do that we want to deploy

2189
01:40:06,960 --> 01:40:09,719
a online crystallography cartographic

2190
01:40:09,719 --> 01:40:13,080
resources for internet uh you you user

2191
01:40:13,080 --> 01:40:16,020
the ID is uh well when you need to to

2192
01:40:16,020 --> 01:40:18,440
store some key or cryptographic

2193
01:40:18,440 --> 01:40:22,139
resource in an offline mode you may use

2194
01:40:22,139 --> 01:40:24,719
secure element and so it may be useful

2195
01:40:24,719 --> 01:40:27,179
for internet user to have the same level

2196
01:40:27,179 --> 01:40:30,719
of trust but for online resource and so

2197
01:40:30,719 --> 01:40:33,239
we want to identify these Resources by a

2198
01:40:33,239 --> 01:40:36,000
uniform resource identity shares the

2199
01:40:36,000 --> 01:40:38,159
issue is that obviously we will need an

2200
01:40:38,159 --> 01:40:40,679
additional processors to to do that with

2201
01:40:40,679 --> 01:40:43,980
a network interface and DCP Eco

2202
01:40:43,980 --> 01:40:45,360
connectivity

2203
01:40:45,360 --> 01:40:47,580
uh we need to ship our Global platform

2204
01:40:47,580 --> 01:40:49,860
for on-demand applications not mandatory

2205
01:40:49,860 --> 01:40:53,400
because you can use a pre-loaded

2206
01:40:53,400 --> 01:40:54,719
application

2207
01:40:54,719 --> 01:40:58,560
but for on-demand application uh the

2208
01:40:58,560 --> 01:41:00,659
first mature the user will ask the

2209
01:41:00,659 --> 01:41:02,340
provider to download a new application

2210
01:41:02,340 --> 01:41:04,800
in a secure element so we we need this

2211
01:41:04,800 --> 01:41:06,679
support

2212
01:41:06,679 --> 01:41:10,020
uh we need a protocol to access to

2213
01:41:10,020 --> 01:41:11,540
secure element

2214
01:41:11,540 --> 01:41:15,179
resources and this draft we we chose

2215
01:41:15,179 --> 01:41:18,360
basically TLS as a protocol for user

2216
01:41:18,360 --> 01:41:20,880
interface service interface we need to

2217
01:41:20,880 --> 01:41:23,520
Define secure element naming in order to

2218
01:41:23,520 --> 01:41:26,040
identify this uh secure amount of our

2219
01:41:26,040 --> 01:41:27,060
internet

2220
01:41:27,060 --> 01:41:29,760
and we need an attestation procedure for

2221
01:41:29,760 --> 01:41:31,739
on-demand application the goal of

2222
01:41:31,739 --> 01:41:33,840
attestation procedural is to give the

2223
01:41:33,840 --> 01:41:39,480
user a sufficient level of trust that is

2224
01:41:39,480 --> 01:41:42,659
really using the secure amount you

2225
01:41:42,659 --> 01:41:45,540
believe it is using with the right

2226
01:41:45,540 --> 01:41:47,460
application inside and the right

2227
01:41:47,460 --> 01:41:50,460
Hardware or provider so next slide

2228
01:41:50,460 --> 01:41:52,699
please

2229
01:41:54,060 --> 01:41:56,600
foreign

2230
01:41:56,600 --> 01:42:01,260
draft you see the the kind of uniform

2231
01:42:01,260 --> 01:42:04,739
resource identity here

2232
01:42:04,739 --> 01:42:07,560
so the secure element is identified by

2233
01:42:07,560 --> 01:42:09,420
your name actually server name which is

2234
01:42:09,420 --> 01:42:10,699
called scl

2235
01:42:10,699 --> 01:42:13,860
it's used at this moment uh pressure key

2236
01:42:13,860 --> 01:42:16,580
that's to say a symmetric

2237
01:42:16,580 --> 01:42:21,480
secret is associated to a server name

2238
01:42:21,480 --> 01:42:25,860
and import and according to a given

2239
01:42:25,860 --> 01:42:28,860
scheme in current GitHub open

2240
01:42:28,860 --> 01:42:31,500
application we use simply command line

2241
01:42:31,500 --> 01:42:33,920
and ask online it's a kind of shell

2242
01:42:33,920 --> 01:42:36,659
which is secure by your TLS and

2243
01:42:36,659 --> 01:42:38,760
according to this game is some query to

2244
01:42:38,760 --> 01:42:41,580
the secure elements and get the the the

2245
01:42:41,580 --> 01:42:44,880
response so in the drive the way you see

2246
01:42:44,880 --> 01:42:46,380
Server component at first for

2247
01:42:46,380 --> 01:42:49,199
administration plane the protocol both

2248
01:42:49,199 --> 01:42:51,900
racks which was designed let's say

2249
01:42:51,900 --> 01:42:55,380
a few years ago and which used Speed

2250
01:42:55,380 --> 01:42:58,860
Demon for the server plane we use the

2251
01:42:58,860 --> 01:43:01,679
TLs for secure remote which is TLS

2252
01:43:01,679 --> 01:43:06,719
server 1.3 with pressure key and and if

2253
01:43:06,719 --> 01:43:09,360
you manage change for computing as a

2254
01:43:09,360 --> 01:43:10,980
sheer CE grid

2255
01:43:10,980 --> 01:43:14,699
and this use also TCP demand and the

2256
01:43:14,699 --> 01:43:18,178
attestation procedures

2257
01:43:18,199 --> 01:43:21,540
makers the staff need to transfer the

2258
01:43:21,540 --> 01:43:24,659
element control to to user so it relies

2259
01:43:24,659 --> 01:43:26,880
on two properties first the second

2260
01:43:26,880 --> 01:43:29,280
element can be close

2261
01:43:29,280 --> 01:43:31,800
and second they manage only one

2262
01:43:31,800 --> 01:43:34,020
utilization at a given time

2263
01:43:34,020 --> 01:43:37,520
so next slide please

2264
01:43:38,340 --> 01:43:42,060
uh so this is a short uh review of the

2265
01:43:42,060 --> 01:43:43,860
administration plane

2266
01:43:43,860 --> 01:43:46,139
so rocks basically is something that

2267
01:43:46,139 --> 01:43:51,000
works over TLS using uh certificate

2268
01:43:51,000 --> 01:43:54,920
both for server on client it's been PTI

2269
01:43:54,920 --> 01:43:59,820
it's a picky IMO model and so rocks is

2270
01:43:59,820 --> 01:44:02,480
able to transport ISO

2271
01:44:02,480 --> 01:44:05,280
7816 packet

2272
01:44:05,280 --> 01:44:06,739
and

2273
01:44:06,739 --> 01:44:10,080
in order to use something called secure

2274
01:44:10,080 --> 01:44:12,000
element identifier which can be for

2275
01:44:12,000 --> 01:44:15,900
example a slot physical slot on an i2c

2276
01:44:15,900 --> 01:44:20,639
address or a name and because the Iraq's

2277
01:44:20,639 --> 01:44:27,540
transport ISO 1716 with policy access uh

2278
01:44:27,540 --> 01:44:31,139
he is able to transport a global

2279
01:44:31,139 --> 01:44:32,400
platform

2280
01:44:32,400 --> 01:44:38,340
protocol and so it is able to uh to to

2281
01:44:38,340 --> 01:44:42,480
to perform uh the delete and upload the

2282
01:44:42,480 --> 01:44:46,139
application operation in insecurements

2283
01:44:46,139 --> 01:44:50,000
and so next slide please

2284
01:44:52,260 --> 01:44:56,340
for on the sales plane uh we use some

2285
01:44:56,340 --> 01:44:58,139
things called the TLs for secure

2286
01:44:58,139 --> 01:45:00,239
elements that you say a particular

2287
01:45:00,239 --> 01:45:03,000
profile of TLS server at this moment you

2288
01:45:03,000 --> 01:45:05,580
using a pre Pusher key

2289
01:45:05,580 --> 01:45:10,080
and uh server name TLS says server name

2290
01:45:10,080 --> 01:45:14,639
we put the server name uh in a field

2291
01:45:14,639 --> 01:45:18,300
called answer to request which is

2292
01:45:18,300 --> 01:45:20,580
obtained when you reset when you reset

2293
01:45:20,580 --> 01:45:22,980
physically on the when you use the the

2294
01:45:22,980 --> 01:45:25,320
reset pin on a secure element you

2295
01:45:25,320 --> 01:45:27,360
collect some things calls an answer to

2296
01:45:27,360 --> 01:45:32,040
request and there's an API to to put a

2297
01:45:32,040 --> 01:45:34,380
in this answer to request you have

2298
01:45:34,380 --> 01:45:36,840
something called historical bytes up to

2299
01:45:36,840 --> 01:45:40,920
15 bytes and uh you have some apis that

2300
01:45:40,920 --> 01:45:43,739
enable you to put whatever you want in

2301
01:45:43,739 --> 01:45:45,719
the historical back so really at this

2302
01:45:45,719 --> 01:45:50,820
physical level we put the server name

2303
01:45:50,820 --> 01:45:53,580
and so after we Define an interface to

2304
01:45:53,580 --> 01:45:56,060
transport Terrace packet for the iso

2305
01:45:56,060 --> 01:45:58,320
7816 interface

2306
01:45:58,320 --> 01:46:01,679
so there is a client facing server

2307
01:46:01,679 --> 01:46:03,719
and this client first things the other

2308
01:46:03,719 --> 01:46:06,300
according to service name indication

2309
01:46:06,300 --> 01:46:08,239
find the clientele

2310
01:46:08,239 --> 01:46:12,679
uh the server name of

2311
01:46:12,679 --> 01:46:17,580
the Beckham's server and so if this

2312
01:46:17,580 --> 01:46:19,980
server is present the security mode is

2313
01:46:19,980 --> 01:46:22,679
present and on the system after a while

2314
01:46:22,679 --> 01:46:24,900
it wrote the incoming and outgoing

2315
01:46:24,900 --> 01:46:28,800
packet to and from this TLS back in the

2316
01:46:28,800 --> 01:46:30,320
server

2317
01:46:30,320 --> 01:46:34,800
and uh on the client size you can to to

2318
01:46:34,800 --> 01:46:37,020
access so on the client side as you see

2319
01:46:37,020 --> 01:46:39,840
on this Dragon everything is based on

2320
01:46:39,840 --> 01:46:42,360
TLS and TCP it means there is no it's

2321
01:46:42,360 --> 01:46:45,780
pure network interface and you may use

2322
01:46:45,780 --> 01:46:48,060
some identity more module in order to

2323
01:46:48,060 --> 01:46:51,840
compute the procedure or required by the

2324
01:46:51,840 --> 01:46:55,619
appreciate use in TLs but it is not

2325
01:46:55,619 --> 01:46:58,199
mandatory

2326
01:46:58,199 --> 01:47:02,460
so next by please

2327
01:47:02,460 --> 01:47:04,920
and finale this is the undermined

2328
01:47:04,920 --> 01:47:07,320
application illustration

2329
01:47:07,320 --> 01:47:10,920
and an attestation sorry so you see on

2330
01:47:10,920 --> 01:47:13,980
on the on the left you have the

2331
01:47:13,980 --> 01:47:15,540
application provider

2332
01:47:15,540 --> 01:47:18,719
and on the right uh the user

2333
01:47:18,719 --> 01:47:21,900
and in the middle the iosc server which

2334
01:47:21,900 --> 01:47:24,480
is the infrastructure that all the set

2335
01:47:24,480 --> 01:47:27,320
of security elements so first the

2336
01:47:27,320 --> 01:47:29,699
application provider or use racks to

2337
01:47:29,699 --> 01:47:31,500
download the application in the secure

2338
01:47:31,500 --> 01:47:32,639
elements

2339
01:47:32,639 --> 01:47:36,900
and then binds the security name to the

2340
01:47:36,900 --> 01:47:40,199
secure element identifier and at this

2341
01:47:40,199 --> 01:47:42,300
step the secure element as an

2342
01:47:42,300 --> 01:47:45,360
application and this can application can

2343
01:47:45,360 --> 01:47:50,280
be remotely used as a TLS server and it

2344
01:47:50,280 --> 01:47:53,520
store the pressure key defined by the

2345
01:47:53,520 --> 01:47:55,260
application provider

2346
01:47:55,260 --> 01:47:57,480
when this application starts in the

2347
01:47:57,480 --> 01:47:59,280
secure element is create a pair of

2348
01:47:59,280 --> 01:48:01,679
public and private key and the public

2349
01:48:01,679 --> 01:48:03,780
key is the identity of the secure

2350
01:48:03,780 --> 01:48:04,739
element

2351
01:48:04,739 --> 01:48:07,280
then after a while

2352
01:48:07,280 --> 01:48:10,500
the application provider delivers the

2353
01:48:10,500 --> 01:48:13,199
public key of the component and deliver

2354
01:48:13,199 --> 01:48:14,820
a certificate

2355
01:48:14,820 --> 01:48:18,540
and this and the the pressure key of the

2356
01:48:18,540 --> 01:48:22,380
component and the server name of the

2357
01:48:22,380 --> 01:48:27,420
component to use the user the user open

2358
01:48:27,420 --> 01:48:29,880
till this connection with this component

2359
01:48:29,880 --> 01:48:32,460
with the public key it checks the

2360
01:48:32,460 --> 01:48:36,000
certificate and after it verifies that

2361
01:48:36,000 --> 01:48:39,300
the secure amount both know the unshake

2362
01:48:39,300 --> 01:48:43,020
secret of the TLs connection and the

2363
01:48:43,020 --> 01:48:46,380
pubic key and if the secure amount knows

2364
01:48:46,380 --> 01:48:49,980
this both parameter it means that there

2365
01:48:49,980 --> 01:48:51,900
is not a man in the middle because only

2366
01:48:51,900 --> 01:48:54,719
one Terrace session can be managed at a

2367
01:48:54,719 --> 01:48:57,119
given time and because the second

2368
01:48:57,119 --> 01:48:59,280
element cannot be close is the only

2369
01:48:59,280 --> 01:49:03,900
component that stores its uh this pair

2370
01:49:03,900 --> 01:49:06,780
of cubic and private key and at this

2371
01:49:06,780 --> 01:49:08,940
level the user can modify the pressure

2372
01:49:08,940 --> 01:49:12,199
key and so it's mean now it's the only

2373
01:49:12,199 --> 01:49:15,300
user only entities that can remotely

2374
01:49:15,300 --> 01:49:19,199
connect to this secure element so next

2375
01:49:19,199 --> 01:49:21,739
slide please

2376
01:49:23,340 --> 01:49:25,340
so at this moment

2377
01:49:25,340 --> 01:49:28,560
all this is a

2378
01:49:28,560 --> 01:49:32,480
available on the GitHub

2379
01:49:32,480 --> 01:49:35,699
there are no patents and and all the

2380
01:49:35,699 --> 01:49:39,659
code that is open uh so the code for

2381
01:49:39,659 --> 01:49:42,000
tlssc for General care

2382
01:49:42,000 --> 01:49:46,020
this code works with many Java cards

2383
01:49:46,020 --> 01:49:48,420
current level of java cars that you can

2384
01:49:48,420 --> 01:49:53,280
buy on the internet or is a 3.04 or 3.05

2385
01:49:53,280 --> 01:49:56,239
this is the level of the Java card API

2386
01:49:56,239 --> 01:49:59,580
so if you go to to GitHub you you will

2387
01:49:59,580 --> 01:50:01,380
find these implementation that were

2388
01:50:01,380 --> 01:50:04,080
quite should work with most of java

2389
01:50:04,080 --> 01:50:09,300
candles on the market and as the scheme

2390
01:50:09,300 --> 01:50:12,360
as a syntax it simply use a common line

2391
01:50:12,360 --> 01:50:14,760
so it's mean when you want to create a

2392
01:50:14,760 --> 01:50:17,880
key or to perform a signatures you just

2393
01:50:17,880 --> 01:50:21,000
open a TS session using open SSL and

2394
01:50:21,000 --> 01:50:22,739
whatever you want with the secure

2395
01:50:22,739 --> 01:50:25,920
element and you just send the column

2396
01:50:25,920 --> 01:50:30,420
line that created or sign and whatever

2397
01:50:30,420 --> 01:50:33,360
uh the good source of the server is at

2398
01:50:33,360 --> 01:50:37,139
this level at this moment is V5 uh it's

2399
01:50:37,139 --> 01:50:40,500
a commercial so it works with Windows it

2400
01:50:40,500 --> 01:50:42,960
works with uh like Unix and the Run

2401
01:50:42,960 --> 01:50:46,800
months and things like Raspberry p and

2402
01:50:46,800 --> 01:50:48,659
this is an open implementation of the

2403
01:50:48,659 --> 01:50:52,800
server that includes the two TCP Diamond

2404
01:50:52,800 --> 01:50:55,500
one for racks and one so TLS

2405
01:50:55,500 --> 01:50:58,199
and inside the software there's

2406
01:50:58,199 --> 01:51:00,000
something when you use a secure element

2407
01:51:00,000 --> 01:51:03,540
on a PC or Linux and whatever use an API

2408
01:51:03,540 --> 01:51:08,540
called pcsa we we each mean uh

2409
01:51:08,540 --> 01:51:13,500
pcsa means smart PC and inside the

2410
01:51:13,500 --> 01:51:16,080
software there is an enumeration of this

2411
01:51:16,080 --> 01:51:20,280
API so it's mean doing that the software

2412
01:51:20,280 --> 01:51:23,760
can be adapted very quickly to many kind

2413
01:51:23,760 --> 01:51:26,400
of communication interface with secure

2414
01:51:26,400 --> 01:51:30,480
element like obviously pcsc or i2c or

2415
01:51:30,480 --> 01:51:32,460
something score similaras that exist

2416
01:51:32,460 --> 01:51:34,920
today in the markets in a real array of

2417
01:51:34,920 --> 01:51:37,139
SIM cards that are used for for roaming

2418
01:51:37,139 --> 01:51:40,500
purpose and so they have specifics

2419
01:51:40,500 --> 01:51:43,500
so so get the interface so next slide

2420
01:51:43,500 --> 01:51:45,679
please

2421
01:51:45,719 --> 01:51:48,300
and that's it so smart question here you

2422
01:51:48,300 --> 01:51:50,699
see there's a list of papers that's

2423
01:51:50,699 --> 01:51:54,840
describe this and and more and uh

2424
01:51:54,840 --> 01:51:57,239
because you do to cover it and due to

2425
01:51:57,239 --> 01:52:00,199
the fact that most of conference were

2426
01:52:00,199 --> 01:52:04,739
online this last time the video on

2427
01:52:04,739 --> 01:52:08,040
YouTube that explains the the paper and

2428
01:52:08,040 --> 01:52:10,440
give illustration of the process and so

2429
01:52:10,440 --> 01:52:11,340
on

2430
01:52:11,340 --> 01:52:14,159
and so my option is that this is this is

2431
01:52:14,159 --> 01:52:17,280
what we become working with item I

2432
01:52:17,280 --> 01:52:19,739
believe it's open it's something it's

2433
01:52:19,739 --> 01:52:22,860
not it is in the I believe it is in the

2434
01:52:22,860 --> 01:52:25,920
scope of the coin Energy Group

2435
01:52:25,920 --> 01:52:27,179
and

2436
01:52:27,179 --> 01:52:31,400
um and that's it I am done thank you

2437
01:52:37,639 --> 01:52:41,960
there's one person the queue is

2438
01:52:42,119 --> 01:52:45,480
I'm just going to Echo what was

2439
01:52:45,480 --> 01:52:49,920
um just asked us a question on the uh in

2440
01:52:49,920 --> 01:52:52,139
the chat which is can you help us

2441
01:52:52,139 --> 01:52:54,360
particularly those of us who are in

2442
01:52:54,360 --> 01:52:56,100
other time zones so we're only half

2443
01:52:56,100 --> 01:52:57,659
awake

2444
01:52:57,659 --> 01:53:00,000
um but you know the talk was very

2445
01:53:00,000 --> 01:53:02,340
interesting thank you for your talk but

2446
01:53:02,340 --> 01:53:04,679
kind of the fundamental question is help

2447
01:53:04,679 --> 01:53:07,020
us connect the dots between what you

2448
01:53:07,020 --> 01:53:09,000
were talking about and how this relates

2449
01:53:09,000 --> 01:53:12,179
to in-network compute and is it I mean

2450
01:53:12,179 --> 01:53:15,000
for me I I definitely appreciate that

2451
01:53:15,000 --> 01:53:16,800
there are

2452
01:53:16,800 --> 01:53:19,380
um uh potentially constrained devices

2453
01:53:19,380 --> 01:53:23,159
that need help or processors

2454
01:53:23,159 --> 01:53:26,400
um that help to secure compute and

2455
01:53:26,400 --> 01:53:28,020
transmission

2456
01:53:28,020 --> 01:53:31,020
um but I'm not sure if that was sort of

2457
01:53:31,020 --> 01:53:33,360
how you would connect the dots so can

2458
01:53:33,360 --> 01:53:36,300
you can you help explain to us how

2459
01:53:36,300 --> 01:53:39,659
um more pointedly this relates to coin

2460
01:53:39,659 --> 01:53:42,379
thank you

2461
01:53:42,960 --> 01:53:46,800
well when we use a security mechanism in

2462
01:53:46,800 --> 01:53:49,699
the networks

2463
01:53:50,719 --> 01:53:54,060
when you compute cryptography

2464
01:53:54,060 --> 01:53:57,000
I I'm thinking to the produce

2465
01:53:57,000 --> 01:53:59,699
um presentation for example that was

2466
01:53:59,699 --> 01:54:01,800
speaking of uh

2467
01:54:01,800 --> 01:54:05,300
of blockchain issue and so on

2468
01:54:05,300 --> 01:54:08,719
when you skip the Laughing the network

2469
01:54:08,719 --> 01:54:12,119
you used to have some such place to

2470
01:54:12,119 --> 01:54:13,880
store Key

2471
01:54:13,880 --> 01:54:17,880
and compute

2472
01:54:18,119 --> 01:54:20,639
typographic procedures

2473
01:54:20,639 --> 01:54:24,020
and as it is today

2474
01:54:24,020 --> 01:54:26,480
when you want to do that

2475
01:54:26,480 --> 01:54:30,179
you could use stuff called Hardware

2476
01:54:30,179 --> 01:54:34,440
secure module in in the crowd for

2477
01:54:34,440 --> 01:54:36,119
example

2478
01:54:36,119 --> 01:54:41,780
but let's say that as a user level

2479
01:54:41,780 --> 01:54:46,679
you have no Trust Insurance about that

2480
01:54:46,679 --> 01:54:49,440
and as it is today you have no open

2481
01:54:49,440 --> 01:54:51,920
features

2482
01:54:51,920 --> 01:54:54,780
uh so the

2483
01:54:54,780 --> 01:54:58,560
the relationships to to Corn is that

2484
01:54:58,560 --> 01:55:00,600
when you need

2485
01:55:00,600 --> 01:55:02,340
some

2486
01:55:02,340 --> 01:55:04,139
this is a way

2487
01:55:04,139 --> 01:55:08,340
to deploy uh some secure procedure in in

2488
01:55:08,340 --> 01:55:10,699
the internet

2489
01:55:12,300 --> 01:55:16,380
so it means each time you you need to

2490
01:55:16,380 --> 01:55:19,199
to do some things to perform more

2491
01:55:19,199 --> 01:55:22,699
complications to to perform signatures

2492
01:55:22,699 --> 01:55:26,360
this could apply

2493
01:55:26,820 --> 01:55:30,719
and with some open stuff it's not so

2494
01:55:30,719 --> 01:55:33,960
simple to to get open stuff today

2495
01:55:33,960 --> 01:55:36,600
and provable stuff

2496
01:55:36,600 --> 01:55:38,460
it's mean what is important with secure

2497
01:55:38,460 --> 01:55:42,239
events these are you have some

2498
01:55:42,239 --> 01:55:47,100
ear level and this level are certified

2499
01:55:47,100 --> 01:55:49,679
by a national

2500
01:55:49,679 --> 01:55:52,199
Security Agency

2501
01:55:52,199 --> 01:55:55,260
usually managed by governments

2502
01:55:55,260 --> 01:55:57,719
and this means this is your root of

2503
01:55:57,719 --> 01:55:58,679
trust

2504
01:55:58,679 --> 01:56:01,739
and our manufacturer manufacturer from

2505
01:56:01,739 --> 01:56:04,320
that and many standards

2506
01:56:04,320 --> 01:56:06,659
that

2507
01:56:06,659 --> 01:56:09,480
apply to to to to this kind of

2508
01:56:09,480 --> 01:56:12,179
components so by natural you have a lot

2509
01:56:12,179 --> 01:56:13,920
of of this component you have 10 billion

2510
01:56:13,920 --> 01:56:16,100
securement

2511
01:56:16,100 --> 01:56:19,199
deployed every year so it's very huge

2512
01:56:19,199 --> 01:56:22,560
and the level of trust everybody knows

2513
01:56:22,560 --> 01:56:25,500
that it's not so easy to hack your

2514
01:56:25,500 --> 01:56:29,219
banking card with a chip inside

2515
01:56:29,219 --> 01:56:33,300
and so if you do that you you will get

2516
01:56:33,300 --> 01:56:36,719
some money but in the reality this not

2517
01:56:36,719 --> 01:56:37,739
happen

2518
01:56:37,739 --> 01:56:39,719
it's very difficult to download the

2519
01:56:39,719 --> 01:56:42,360
software in a bunker

2520
01:56:42,360 --> 01:56:45,360
it's very difficult to recover the car

2521
01:56:45,360 --> 01:56:50,179
the the keys that are stored in one car

2522
01:56:50,340 --> 01:56:51,600
and

2523
01:56:51,600 --> 01:56:55,440
so relating to

2524
01:56:55,440 --> 01:56:58,560
coin energy it's mean it's a way to have

2525
01:56:58,560 --> 01:57:01,619
a procedures Computing for procedure or

2526
01:57:01,619 --> 01:57:06,199
still in the internet with I believe

2527
01:57:06,199 --> 01:57:10,080
uh not so bad the level of security and

2528
01:57:10,080 --> 01:57:13,280
Trust for the user

2529
01:57:17,280 --> 01:57:20,699
another person in the queue and um in

2530
01:57:20,699 --> 01:57:22,619
the interest of time perhaps we need to

2531
01:57:22,619 --> 01:57:25,619
take that to the list

2532
01:57:25,619 --> 01:57:28,260
um Emmanuel but Charlie uh if you don't

2533
01:57:28,260 --> 01:57:29,699
mind uh

2534
01:57:29,699 --> 01:57:31,380
suddenly not either in the chat or to

2535
01:57:31,380 --> 01:57:34,040
the list or both

2536
01:57:41,460 --> 01:57:43,199
I think we have Okay

2537
01:57:43,199 --> 01:57:46,800
um yeah oh my God uh yes I will just

2538
01:57:46,800 --> 01:57:48,840
like put the next slide I will go back

2539
01:57:48,840 --> 01:57:51,360
to well maybe we don't even need to have

2540
01:57:51,360 --> 01:57:53,520
slides in dress up time

2541
01:57:53,520 --> 01:57:57,119
uh yeah I'll load the chair slides

2542
01:57:57,119 --> 01:57:59,239
um

2543
01:58:06,480 --> 01:58:10,940
okay uh we're at the last slide

2544
01:58:14,580 --> 01:58:16,500
okay so

2545
01:58:16,500 --> 01:58:18,420
um it's

2546
01:58:18,420 --> 01:58:20,420
um

2547
01:58:20,760 --> 01:58:22,560
the

2548
01:58:22,560 --> 01:58:26,460
um some of the root so troop topics uh

2549
01:58:26,460 --> 01:58:28,800
actually it the the first one the

2550
01:58:28,800 --> 01:58:30,840
question about the interim goes to the

2551
01:58:30,840 --> 01:58:33,360
um the second bullet actually which is

2552
01:58:33,360 --> 01:58:36,179
uh we wanted uh today to have a

2553
01:58:36,179 --> 01:58:38,340
presentation about uh the chair

2554
01:58:38,340 --> 01:58:41,159
Reflections after three years

2555
01:58:41,159 --> 01:58:42,659
um what

2556
01:58:42,659 --> 01:58:45,900
has been the evolution of the group I

2557
01:58:45,900 --> 01:58:48,960
think today we had uh you know some uh

2558
01:58:48,960 --> 01:58:51,239
presentations that went back to the

2559
01:58:51,239 --> 01:58:52,980
original intent which was like looking

2560
01:58:52,980 --> 01:58:55,619
at transport looking at security but

2561
01:58:55,619 --> 01:58:57,540
this field has

2562
01:58:57,540 --> 01:58:58,080
um

2563
01:58:58,080 --> 01:59:01,500
it you know exploded in the past uh

2564
01:59:01,500 --> 01:59:04,020
three years and we wanted to have this

2565
01:59:04,020 --> 01:59:06,599
maybe this reflection and we're thinking

2566
01:59:06,599 --> 01:59:10,099
uh we should have maybe uh an interim

2567
01:59:10,099 --> 01:59:15,179
where we would uh first go through uh

2568
01:59:15,179 --> 01:59:17,820
the uh the whole list of

2569
01:59:17,820 --> 01:59:18,840
um

2570
01:59:18,840 --> 01:59:22,679
Publications drafts and and related and

2571
01:59:22,679 --> 01:59:24,540
see you know where we want to move

2572
01:59:24,540 --> 01:59:27,900
things uh Pascal asked for uh you know

2573
01:59:27,900 --> 01:59:31,199
should we have uh his his his draft as a

2574
01:59:31,199 --> 01:59:34,260
working group uh we actually put that on

2575
01:59:34,260 --> 01:59:36,420
there on the list by the way and you

2576
01:59:36,420 --> 01:59:38,340
know go through the the the current

2577
01:59:38,340 --> 01:59:42,420
Publications there's some that are

2578
01:59:42,420 --> 01:59:46,020
um expired that probably needs to be uh

2579
01:59:46,020 --> 01:59:47,280
re

2580
01:59:47,280 --> 01:59:49,139
um re

2581
01:59:49,139 --> 01:59:49,980
um

2582
01:59:49,980 --> 01:59:54,179
kindled so we'll do that probably

2583
01:59:54,179 --> 01:59:57,480
um maybe in in January uh obviously

2584
01:59:57,480 --> 02:00:01,260
there's going to be ietf 116 in Japan

2585
02:00:01,260 --> 02:00:04,380
and March and we're going to most likely

2586
02:00:04,380 --> 02:00:06,780
hold a meeting there

2587
02:00:06,780 --> 02:00:08,639
um

2588
02:00:08,639 --> 02:00:11,040
and now my phone is telling me that it's

2589
02:00:11,040 --> 02:00:12,900
6 30. uh

2590
02:00:12,900 --> 02:00:14,880
and then

2591
02:00:14,880 --> 02:00:18,900
um there's this uh 5G uh net app lab

2592
02:00:18,900 --> 02:00:21,659
proposal solicitation there was an email

2593
02:00:21,659 --> 02:00:25,380
on October 25th which is a 5G

2594
02:00:25,380 --> 02:00:29,580
um I think it's an EU project and I

2595
02:00:29,580 --> 02:00:31,860
looked at the program at hot Nets next

2596
02:00:31,860 --> 02:00:34,920
week and there's a number of interesting

2597
02:00:34,920 --> 02:00:36,540
papers that are

2598
02:00:36,540 --> 02:00:39,199
um related to this community

2599
02:00:39,199 --> 02:00:41,580
and we're out of time and we're going to

2600
02:00:41,580 --> 02:00:44,940
send Eve to bed which is like 3 30 a.m

2601
02:00:44,940 --> 02:00:48,900
local time for her and I thank you so

2602
02:00:48,900 --> 02:00:50,760
much for attending we had a bunch of

2603
02:00:50,760 --> 02:00:53,159
people online we had a bunch of people

2604
02:00:53,159 --> 02:00:55,860
in the room uh thank you for people who

2605
02:00:55,860 --> 02:00:58,619
presented in particular uh thank you for

2606
02:00:58,619 --> 02:01:00,840
your dedication for taking the time to

2607
02:01:00,840 --> 02:01:03,239
do this presentation thank you for the

2608
02:01:03,239 --> 02:01:07,020
people who asked questions because that

2609
02:01:07,020 --> 02:01:08,940
shows that you follow what's going on

2610
02:01:08,940 --> 02:01:10,800
and it's really great thank you very

2611
02:01:10,800 --> 02:01:13,340
much for Cedric to have been our proxy

2612
02:01:13,340 --> 02:01:16,440
in the room and thank you so much for

2613
02:01:16,440 --> 02:01:19,139
having done that and uh thanks to Jeff

2614
02:01:19,139 --> 02:01:21,540
but Jeff for you it's uh it's indeed

2615
02:01:21,540 --> 02:01:24,179
well it's early early evening now so

2616
02:01:24,179 --> 02:01:26,280
you're probably okay uh thank you

2617
02:01:26,280 --> 02:01:29,159
everyone and uh we'll uh have this

2618
02:01:29,159 --> 02:01:31,320
interim so we'll probably see you

2619
02:01:31,320 --> 02:01:34,619
remotely sometimes in January and um

2620
02:01:34,619 --> 02:01:38,040
thank you and have a good rest of uh the

2621
02:01:38,040 --> 02:01:41,060
week thank you so much

2622
02:01:42,540 --> 02:01:45,260
thank you very much

2623
02:01:58,139 --> 02:02:00,739
since

2624
02:02:29,219 --> 02:02:31,460
foreign

