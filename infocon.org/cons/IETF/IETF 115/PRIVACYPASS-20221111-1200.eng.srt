1
00:00:06,020 --> 00:00:09,259
I don't care

2
00:00:15,920 --> 00:00:19,560
all right folks uh welcome to uh privacy

3
00:00:19,560 --> 00:00:23,939
pass at ietf 115. um here in uh London

4
00:00:23,939 --> 00:00:26,460
and uh Ben is online

5
00:00:26,460 --> 00:00:29,820
and thank you thank you all for coming

6
00:00:29,820 --> 00:00:31,920
um let's see

7
00:00:31,920 --> 00:00:34,620
just a few things I know this is this is

8
00:00:34,620 --> 00:00:38,040
The Bitter End of the meeting and so

9
00:00:38,040 --> 00:00:39,899
the note well you've all seen this

10
00:00:39,899 --> 00:00:42,059
before about what you should consider

11
00:00:42,059 --> 00:00:43,800
before you're contributing to the ietf

12
00:00:43,800 --> 00:00:46,620
and and code of conduct

13
00:00:46,620 --> 00:00:47,760
um

14
00:00:47,760 --> 00:00:50,280
so I'm just gonna leave that up there

15
00:00:50,280 --> 00:00:51,539
for a brief second but if you're not

16
00:00:51,539 --> 00:00:53,460
familiar with it obviously you should be

17
00:00:53,460 --> 00:00:55,320
by this time in this week

18
00:00:55,320 --> 00:00:58,680
um code of conduct uh this group is in

19
00:00:58,680 --> 00:01:00,600
general really good

20
00:01:00,600 --> 00:01:02,640
um but we want to make sure we treat

21
00:01:02,640 --> 00:01:05,820
everybody with respect and and uh keep

22
00:01:05,820 --> 00:01:09,559
focused on engineering Solutions

23
00:01:09,720 --> 00:01:12,360
all right here comes the hardest part of

24
00:01:12,360 --> 00:01:14,340
the meeting

25
00:01:14,340 --> 00:01:18,979
we are requesting a note taker

26
00:01:19,200 --> 00:01:23,100
don't all jump up at once

27
00:01:23,100 --> 00:01:24,960
folks online can do it too all right

28
00:01:24,960 --> 00:01:27,500
thank you Florence

29
00:01:28,259 --> 00:01:29,460
um

30
00:01:29,460 --> 00:01:31,500
next

31
00:01:31,500 --> 00:01:33,479
let's see so when you're in the meeting

32
00:01:33,479 --> 00:01:36,960
room please sign into the on-site

33
00:01:36,960 --> 00:01:39,299
meeting tool so that you can join the

34
00:01:39,299 --> 00:01:40,680
queue it makes it a little easier to

35
00:01:40,680 --> 00:01:42,540
manage the cues between remote

36
00:01:42,540 --> 00:01:44,400
participants and local participants you

37
00:01:44,400 --> 00:01:45,840
know this already you've been here a

38
00:01:45,840 --> 00:01:47,100
while

39
00:01:47,100 --> 00:01:48,479
all right

40
00:01:48,479 --> 00:01:50,939
for our agenda

41
00:01:50,939 --> 00:01:51,960
um

42
00:01:51,960 --> 00:01:54,479
we have a couple of uh discussions of

43
00:01:54,479 --> 00:01:56,280
working group drafts

44
00:01:56,280 --> 00:01:57,180
um

45
00:01:57,180 --> 00:02:00,479
right now we have our core documents

46
00:02:00,479 --> 00:02:02,520
either through working class call or in

47
00:02:02,520 --> 00:02:05,759
working group last call and we really

48
00:02:05,759 --> 00:02:07,799
for the ones that are in for the

49
00:02:07,799 --> 00:02:11,099
issuance document and the HTTP off

50
00:02:11,099 --> 00:02:14,400
scheme really want to make sure we get

51
00:02:14,400 --> 00:02:16,860
good review of that I haven't seen

52
00:02:16,860 --> 00:02:21,660
much activity in GitHub lately or on the

53
00:02:21,660 --> 00:02:23,879
list we want to make sure these

54
00:02:23,879 --> 00:02:26,180
documents are ready to move forward so

55
00:02:26,180 --> 00:02:29,040
please put your reviews in

56
00:02:29,040 --> 00:02:31,700
Tommy

57
00:02:32,160 --> 00:02:34,620
uh yeah just to comment on that for the

58
00:02:34,620 --> 00:02:36,420
core docs

59
00:02:36,420 --> 00:02:40,080
um we did get some good review on the

60
00:02:40,080 --> 00:02:41,700
auth scheme and we sent that over to

61
00:02:41,700 --> 00:02:43,800
http and we made some adjustments based

62
00:02:43,800 --> 00:02:47,239
on that so okay

63
00:02:48,000 --> 00:02:51,720
yeah yeah but I think uh definitely

64
00:02:51,720 --> 00:02:55,440
emphasizing the call for review on the

65
00:02:55,440 --> 00:02:57,720
issuance protocol

66
00:02:57,720 --> 00:03:00,420
um since that one has not received

67
00:03:00,420 --> 00:03:02,280
and it would also be good I mean these

68
00:03:02,280 --> 00:03:04,500
these documents have been around for uh

69
00:03:04,500 --> 00:03:07,500
for a little while so

70
00:03:07,500 --> 00:03:09,660
um you know even if you if you've read

71
00:03:09,660 --> 00:03:11,400
them and you feel like they're ready to

72
00:03:11,400 --> 00:03:13,920
move forward and letting us know on the

73
00:03:13,920 --> 00:03:16,440
list uh would be helpful

74
00:03:16,440 --> 00:03:18,000
um because

75
00:03:18,000 --> 00:03:20,099
there may not be much to comment on at

76
00:03:20,099 --> 00:03:21,840
this point but we'd like to make sure

77
00:03:21,840 --> 00:03:23,940
that

78
00:03:23,940 --> 00:03:27,120
these are being reviewed

79
00:03:27,120 --> 00:03:30,239
um we did have a plan for some time to

80
00:03:30,239 --> 00:03:32,459
talk about uh key consistency because

81
00:03:32,459 --> 00:03:35,280
that's a newly adopted draft but we did

82
00:03:35,280 --> 00:03:37,560
not have anybody take us up on that so

83
00:03:37,560 --> 00:03:38,940
we're going to strike that from the

84
00:03:38,940 --> 00:03:40,799
agenda today but if anybody wants to

85
00:03:40,799 --> 00:03:43,080
make any comments on that uh that would

86
00:03:43,080 --> 00:03:44,700
be fine

87
00:03:44,700 --> 00:03:47,220
um other than that we have a few other

88
00:03:47,220 --> 00:03:50,040
presentations is there any other

89
00:03:50,040 --> 00:03:52,080
business anybody thinks we need to

90
00:03:52,080 --> 00:03:54,599
conduct at this time or modifications to

91
00:03:54,599 --> 00:03:57,140
the agenda

92
00:04:00,480 --> 00:04:02,879
all right given that

93
00:04:02,879 --> 00:04:06,120
um I think Tommy you're up

94
00:04:06,120 --> 00:04:09,299
and I'll assume that you'll take control

95
00:04:09,299 --> 00:04:12,120
of the uh let me just get rid of this

96
00:04:12,120 --> 00:04:13,500
and you should be able to share the

97
00:04:13,500 --> 00:04:14,700
slides right

98
00:04:14,700 --> 00:04:15,659
yeah

99
00:04:15,659 --> 00:04:17,639
um if you just grant because yeah

100
00:04:17,639 --> 00:04:21,260
perfect thank you

101
00:04:24,240 --> 00:04:26,880
all right

102
00:04:26,880 --> 00:04:28,440
um hello everyone

103
00:04:28,440 --> 00:04:29,520
um

104
00:04:29,520 --> 00:04:32,639
I'll be giving the update on the rate

105
00:04:32,639 --> 00:04:35,419
limited issuance document which was

106
00:04:35,419 --> 00:04:38,880
adopted since last time

107
00:04:38,880 --> 00:04:42,540
um and one of our co-authors Stephen is

108
00:04:42,540 --> 00:04:44,160
in the room he'll be presenting some

109
00:04:44,160 --> 00:04:46,919
stuff later but

110
00:04:46,919 --> 00:04:50,479
he can also help chime in

111
00:04:52,259 --> 00:04:55,979
so uh the two things we wanted to go

112
00:04:55,979 --> 00:05:00,000
through today was one is just a recap of

113
00:05:00,000 --> 00:05:02,759
the differences in rate Limited

114
00:05:02,759 --> 00:05:05,639
uh token issuance as compared to the

115
00:05:05,639 --> 00:05:08,460
basic token issuance just to remind

116
00:05:08,460 --> 00:05:09,840
people

117
00:05:09,840 --> 00:05:12,840
um since this is the first time

118
00:05:12,840 --> 00:05:14,820
we're presenting this as a working group

119
00:05:14,820 --> 00:05:17,460
document and so you know take a look

120
00:05:17,460 --> 00:05:18,960
make sure you

121
00:05:18,960 --> 00:05:21,419
understand and are happy with

122
00:05:21,419 --> 00:05:23,759
the the current shape that's in

123
00:05:23,759 --> 00:05:26,039
and then we'll go through

124
00:05:26,039 --> 00:05:27,840
some of the open issues there's

125
00:05:27,840 --> 00:05:31,259
essentially one major open issue and

126
00:05:31,259 --> 00:05:32,699
then we'll just mention some of the

127
00:05:32,699 --> 00:05:35,539
other smaller ones

128
00:05:36,320 --> 00:05:39,360
all right so starting with recap

129
00:05:39,360 --> 00:05:43,139
what are we doing here uh so this is

130
00:05:43,139 --> 00:05:45,740
an extension essentially to the basic

131
00:05:45,740 --> 00:05:49,020
issuance protocol it is based on the

132
00:05:49,020 --> 00:05:52,800
publicly verifiable variant

133
00:05:52,800 --> 00:05:57,380
uh which in the basic one is Type 2

134
00:05:57,479 --> 00:06:00,180
and the difference here

135
00:06:00,180 --> 00:06:02,699
is that

136
00:06:02,699 --> 00:06:03,380
um

137
00:06:03,380 --> 00:06:06,740
this is essentially always done in the

138
00:06:06,740 --> 00:06:10,100
split a test or an issuer model

139
00:06:10,100 --> 00:06:13,500
whereas uh with the basic type you can

140
00:06:13,500 --> 00:06:16,020
either have them split or combined and

141
00:06:16,020 --> 00:06:19,139
in this model the a tester

142
00:06:19,139 --> 00:06:21,960
is maintaining some state

143
00:06:21,960 --> 00:06:24,120
on behalf of the client essentially

144
00:06:24,120 --> 00:06:26,940
counting the number of tokens that a

145
00:06:26,940 --> 00:06:29,759
client has received for An anonymized

146
00:06:29,759 --> 00:06:33,060
Origin bucket and this is a bucket that

147
00:06:33,060 --> 00:06:36,840
is defined by the client it provides An

148
00:06:36,840 --> 00:06:39,300
anonymized Origin ID

149
00:06:39,300 --> 00:06:41,539
and

150
00:06:41,539 --> 00:06:46,319
the a tester can use information it gets

151
00:06:46,319 --> 00:06:50,340
from the issuer to validate that this

152
00:06:50,340 --> 00:06:52,319
anonymized origin ID

153
00:06:52,319 --> 00:06:54,960
is indeed a one-to-one correspondence

154
00:06:54,960 --> 00:06:57,180
with some origin but it doesn't know

155
00:06:57,180 --> 00:06:59,280
which

156
00:06:59,280 --> 00:07:03,500
uh upon requesting a token

157
00:07:03,500 --> 00:07:06,120
through the tester that goes to the

158
00:07:06,120 --> 00:07:08,580
issuer and then the issuer in this

159
00:07:08,580 --> 00:07:10,740
responses to the tester adds an extra

160
00:07:10,740 --> 00:07:12,419
bit of information which is a rate limit

161
00:07:12,419 --> 00:07:15,419
to enforce and so it gives out a token

162
00:07:15,419 --> 00:07:18,000
and then says

163
00:07:18,000 --> 00:07:19,340
um

164
00:07:19,340 --> 00:07:22,020
this is the number of tokens that I'm

165
00:07:22,020 --> 00:07:24,300
going to allow for this origin

166
00:07:24,300 --> 00:07:26,699
and um it doesn't the issue does not

167
00:07:26,699 --> 00:07:28,319
learn if that

168
00:07:28,319 --> 00:07:30,840
uh rate limit was reached or not

169
00:07:30,840 --> 00:07:34,919
but the attester uses that to drop the

170
00:07:34,919 --> 00:07:38,479
request if the limit is reached

171
00:07:39,599 --> 00:07:42,479
um so looking at this visually again

172
00:07:42,479 --> 00:07:44,120
there are two

173
00:07:44,120 --> 00:07:46,620
halves of all of the different privacy

174
00:07:46,620 --> 00:07:50,520
paths protocols there is the side that

175
00:07:50,520 --> 00:07:52,340
actually talks to the origin

176
00:07:52,340 --> 00:07:55,259
that's uh the challenge and Redemption

177
00:07:55,259 --> 00:07:57,180
flow and then there's the side that is

178
00:07:57,180 --> 00:08:00,720
the issuance flow so there's a very

179
00:08:00,720 --> 00:08:02,099
minor change

180
00:08:02,099 --> 00:08:04,199
to the

181
00:08:04,199 --> 00:08:06,240
um Challenge and Redemption flow well

182
00:08:06,240 --> 00:08:07,380
there's actually no change to the

183
00:08:07,380 --> 00:08:09,840
Redemption and the challenge

184
00:08:09,840 --> 00:08:12,060
um only has to include one new key and

185
00:08:12,060 --> 00:08:15,660
this is a hpke key

186
00:08:15,660 --> 00:08:18,479
um that corresponds to the issuer so

187
00:08:18,479 --> 00:08:21,360
that the client knows how to

188
00:08:21,360 --> 00:08:23,419
um encapsulate

189
00:08:23,419 --> 00:08:26,280
the actual origin info and the origin

190
00:08:26,280 --> 00:08:28,740
name when requesting a token to the

191
00:08:28,740 --> 00:08:31,160
issuer

192
00:08:32,458 --> 00:08:37,218
and then on the issuance protocol side

193
00:08:37,979 --> 00:08:39,200
um

194
00:08:39,200 --> 00:08:42,059
the main differences

195
00:08:42,059 --> 00:08:45,240
are what we alluded to before but

196
00:08:45,240 --> 00:08:48,480
um more concretely here there is an hpk

197
00:08:48,480 --> 00:08:52,140
encrypted inner request to the issuer

198
00:08:52,140 --> 00:08:54,300
that the tester passes along but it

199
00:08:54,300 --> 00:08:56,700
cannot read that contains the origin

200
00:08:56,700 --> 00:08:58,880
name

201
00:08:58,920 --> 00:09:03,240
uh there is an anonymous origin ID that

202
00:09:03,240 --> 00:09:06,300
the client communicates the tester to be

203
00:09:06,300 --> 00:09:10,880
this bucket for keeping counts

204
00:09:11,220 --> 00:09:14,760
there is the uh token rate limit per

205
00:09:14,760 --> 00:09:16,800
time window that the issuer communicates

206
00:09:16,800 --> 00:09:20,640
the attester and then there's also a set

207
00:09:20,640 --> 00:09:22,320
of signatures

208
00:09:22,320 --> 00:09:25,380
that the client provides and that the

209
00:09:25,380 --> 00:09:27,300
test the issuer also provides input on

210
00:09:27,300 --> 00:09:31,200
to prevent the client from cheating and

211
00:09:31,200 --> 00:09:32,880
saying that

212
00:09:32,880 --> 00:09:37,140
what uh is in reality one origin trying

213
00:09:37,140 --> 00:09:40,279
to make that look like it's two

214
00:09:42,120 --> 00:09:45,600
uh looking on the chat

215
00:09:45,600 --> 00:09:46,320
um

216
00:09:46,320 --> 00:09:48,600
the origin here chooses the singular

217
00:09:48,600 --> 00:09:50,640
issuer and gives the

218
00:09:50,640 --> 00:09:53,760
um yeah so any particular challenge

219
00:09:53,760 --> 00:09:56,640
is related to one issuer

220
00:09:56,640 --> 00:09:59,580
the origin can provide multiple

221
00:09:59,580 --> 00:10:01,019
challenges

222
00:10:01,019 --> 00:10:03,420
but any particular

223
00:10:03,420 --> 00:10:05,519
request for a token is bound to an

224
00:10:05,519 --> 00:10:07,560
issuer and that's the same as the basic

225
00:10:07,560 --> 00:10:12,680
types that's no different from that

226
00:10:13,140 --> 00:10:14,519
um so

227
00:10:14,519 --> 00:10:17,880
looking at the actual uh on The Wire

228
00:10:17,880 --> 00:10:20,580
bits so this is how the basic token

229
00:10:20,580 --> 00:10:22,260
request looks like

230
00:10:22,260 --> 00:10:23,399
um

231
00:10:23,399 --> 00:10:26,640
for the publicly verifiable type it has

232
00:10:26,640 --> 00:10:30,240
the token type key ID and the blinded

233
00:10:30,240 --> 00:10:31,260
message

234
00:10:31,260 --> 00:10:33,140
and the difference for the rate limited

235
00:10:33,140 --> 00:10:35,760
it has a different token type

236
00:10:35,760 --> 00:10:39,540
and then it has the stuff in green which

237
00:10:39,540 --> 00:10:42,779
is a HP key protected inner request that

238
00:10:42,779 --> 00:10:44,220
gets passed along

239
00:10:44,220 --> 00:10:46,320
and then it also includes

240
00:10:46,320 --> 00:10:48,600
um information for the signature

241
00:10:48,600 --> 00:10:50,880
and then the inner request

242
00:10:50,880 --> 00:10:53,820
is what includes the key ID the blinded

243
00:10:53,820 --> 00:10:54,959
message

244
00:10:54,959 --> 00:11:00,018
and the origin name info

245
00:11:01,200 --> 00:11:04,320
all right so that is the

246
00:11:04,320 --> 00:11:07,740
recap of the protocol and its Delta from

247
00:11:07,740 --> 00:11:10,279
the basic type

248
00:11:10,579 --> 00:11:15,660
and so going into the issues the main

249
00:11:15,660 --> 00:11:17,579
issue that we've been discussing

250
00:11:17,579 --> 00:11:18,839
recently

251
00:11:18,839 --> 00:11:22,200
is number six on the GitHub

252
00:11:22,200 --> 00:11:23,760
um which is

253
00:11:23,760 --> 00:11:27,779
about a linkability attack that was not

254
00:11:27,779 --> 00:11:30,660
detected earlier on that has to do with

255
00:11:30,660 --> 00:11:34,640
a malicious issuer

256
00:11:36,180 --> 00:11:39,420
um so in this case

257
00:11:39,420 --> 00:11:43,680
the Melissa the malicious issuer is uh

258
00:11:43,680 --> 00:11:46,079
reusing something called the issuer

259
00:11:46,079 --> 00:11:48,600
origin secret across different Origins

260
00:11:48,600 --> 00:11:52,800
this is the secret that is used uh in

261
00:11:52,800 --> 00:11:55,099
the

262
00:11:55,160 --> 00:11:57,899
responses from the issuer to the

263
00:11:57,899 --> 00:11:59,100
attester

264
00:11:59,100 --> 00:12:01,740
that help the tester verify that the

265
00:12:01,740 --> 00:12:03,240
client is not

266
00:12:03,240 --> 00:12:05,700
uh cheating in terms of what it's

267
00:12:05,700 --> 00:12:10,760
claiming as its Anonymous origin ID

268
00:12:11,459 --> 00:12:13,500
um so the point is that the issuer can

269
00:12:13,500 --> 00:12:16,079
essentially confirm it when it's working

270
00:12:16,079 --> 00:12:18,959
well that

271
00:12:18,959 --> 00:12:20,940
to that what the client claims are two

272
00:12:20,940 --> 00:12:22,500
different Origins really are two

273
00:12:22,500 --> 00:12:24,540
different Origins

274
00:12:24,540 --> 00:12:27,060
um however

275
00:12:27,060 --> 00:12:27,959
um

276
00:12:27,959 --> 00:12:30,500
the issuer could

277
00:12:30,500 --> 00:12:33,060
maliciously say that oh yeah

278
00:12:33,060 --> 00:12:36,540
all of my Origins are the same origin

279
00:12:36,540 --> 00:12:38,459
um to essentially make it look like the

280
00:12:38,459 --> 00:12:39,899
clients are

281
00:12:39,899 --> 00:12:42,320
cheating or malicious

282
00:12:42,320 --> 00:12:45,600
and based on the current text

283
00:12:45,600 --> 00:12:47,720
in the document

284
00:12:47,720 --> 00:12:51,480
when the tester detects this Collision

285
00:12:51,480 --> 00:12:53,820
since it was assuming that that is a

286
00:12:53,820 --> 00:12:56,639
malicious client it currently just says

287
00:12:56,639 --> 00:12:59,459
you drop that request on the floor

288
00:12:59,459 --> 00:13:00,779
um

289
00:13:00,779 --> 00:13:03,480
and that is kind of the root of this

290
00:13:03,480 --> 00:13:04,860
particular problem because if you were

291
00:13:04,860 --> 00:13:06,360
dropping that

292
00:13:06,360 --> 00:13:09,360
on the floor then that is potentially a

293
00:13:09,360 --> 00:13:11,820
signal kind of going out to whoever

294
00:13:11,820 --> 00:13:15,839
requested the token that uh may be the

295
00:13:15,839 --> 00:13:18,300
reason that this request didn't get a

296
00:13:18,300 --> 00:13:21,899
successful token back was because uh you

297
00:13:21,899 --> 00:13:22,680
had

298
00:13:22,680 --> 00:13:26,180
hit this Collision which implies that

299
00:13:26,180 --> 00:13:29,940
you had uh previously requested a token

300
00:13:29,940 --> 00:13:31,560
for

301
00:13:31,560 --> 00:13:33,920
a different origin right so if you had

302
00:13:33,920 --> 00:13:37,680
uh various Origins colluding with

303
00:13:37,680 --> 00:13:39,720
their issuer

304
00:13:39,720 --> 00:13:42,360
um to say you know hey you know make me

305
00:13:42,360 --> 00:13:45,060
collide with this other origin

306
00:13:45,060 --> 00:13:47,459
and then I'll try to guess that when a

307
00:13:47,459 --> 00:13:50,040
token fails to be generated

308
00:13:50,040 --> 00:13:51,959
it was because that client had

309
00:13:51,959 --> 00:13:55,638
previously talked to a different origin

310
00:13:55,920 --> 00:14:00,779
it's not a particularly direct signal

311
00:14:00,779 --> 00:14:04,380
there are many reasons that the

312
00:14:04,380 --> 00:14:06,720
um the token issuance could fail you

313
00:14:06,720 --> 00:14:08,459
could have hit your rate limit

314
00:14:08,459 --> 00:14:10,920
the tester could have not liked you for

315
00:14:10,920 --> 00:14:14,220
some other reason but it is kind of a

316
00:14:14,220 --> 00:14:15,959
bit of information that you could leak

317
00:14:15,959 --> 00:14:18,779
if the tester naively just drops

318
00:14:18,779 --> 00:14:20,519
requests

319
00:14:20,519 --> 00:14:22,760
foreign

320
00:14:23,540 --> 00:14:26,639
so the proposed fix

321
00:14:26,639 --> 00:14:29,459
that we think is the

322
00:14:29,459 --> 00:14:32,639
kind of the the smallest Delta and kind

323
00:14:32,639 --> 00:14:34,680
of the correct thing to do for the

324
00:14:34,680 --> 00:14:36,180
protocol is

325
00:14:36,180 --> 00:14:40,199
uh to not just naively silently drop a

326
00:14:40,199 --> 00:14:41,459
request if you see this type of

327
00:14:41,459 --> 00:14:42,560
collision

328
00:14:42,560 --> 00:14:45,660
not only does that

329
00:14:45,660 --> 00:14:48,240
allow a malicious issuer to leak a

330
00:14:48,240 --> 00:14:49,199
signal

331
00:14:49,199 --> 00:14:54,600
but it also isn't uh particularly useful

332
00:14:54,600 --> 00:14:56,940
um you know let's say we do have a

333
00:14:56,940 --> 00:14:59,160
malicious client that is intentionally

334
00:14:59,160 --> 00:15:00,680
trying to

335
00:15:00,680 --> 00:15:03,979
make different

336
00:15:04,139 --> 00:15:06,420
uh or make one origin look like multiple

337
00:15:06,420 --> 00:15:08,040
different Origins

338
00:15:08,040 --> 00:15:10,980
silently dropping the requests on which

339
00:15:10,980 --> 00:15:13,260
they're trying to cheat and not doing

340
00:15:13,260 --> 00:15:16,019
anything else is probably not the right

341
00:15:16,019 --> 00:15:17,519
thing to do

342
00:15:17,519 --> 00:15:20,220
um you know the whole point of this a

343
00:15:20,220 --> 00:15:24,300
tester vouching for the client is that

344
00:15:24,300 --> 00:15:26,339
it is a testing that you know it meets

345
00:15:26,339 --> 00:15:29,220
some bar that it is a legitimate client

346
00:15:29,220 --> 00:15:30,540
um

347
00:15:30,540 --> 00:15:32,719
foreign

348
00:15:32,959 --> 00:15:37,199
ER has detected cheating it should

349
00:15:37,199 --> 00:15:40,019
probably instead you know penalize the

350
00:15:40,019 --> 00:15:42,420
clients or you know say you know you're

351
00:15:42,420 --> 00:15:43,920
no longer someone I'm willing to serve

352
00:15:43,920 --> 00:15:46,459
tokens for

353
00:15:47,220 --> 00:15:49,500
so overall you know we need to work on

354
00:15:49,500 --> 00:15:51,240
the text here but

355
00:15:51,240 --> 00:15:54,360
The Proposal is that instead of just

356
00:15:54,360 --> 00:15:58,320
dropping a request silently the tester

357
00:15:58,320 --> 00:16:00,920
would flag the Collision events

358
00:16:00,920 --> 00:16:03,959
and use the Collision patterns to

359
00:16:03,959 --> 00:16:06,240
reevaluate trust in the issuers OR

360
00:16:06,240 --> 00:16:08,839
clients and you know in general with

361
00:16:08,839 --> 00:16:11,160
non-malicious implementations these

362
00:16:11,160 --> 00:16:13,260
cases should

363
00:16:13,260 --> 00:16:15,000
uh you know

364
00:16:15,000 --> 00:16:16,500
you should never have these collisions

365
00:16:16,500 --> 00:16:19,440
so if you have them they do indicate

366
00:16:19,440 --> 00:16:21,980
that someone is messing with you

367
00:16:21,980 --> 00:16:24,779
if you have a case of a malicious issuer

368
00:16:24,779 --> 00:16:27,420
that is using the same secret across

369
00:16:27,420 --> 00:16:30,240
multiple Origins the pattern that should

370
00:16:30,240 --> 00:16:32,820
be become visible is that you're going

371
00:16:32,820 --> 00:16:34,320
to start hitting collisions across many

372
00:16:34,320 --> 00:16:36,360
different clients

373
00:16:36,360 --> 00:16:39,680
um if the tester detects this situation

374
00:16:39,680 --> 00:16:41,880
it should you know rather than just

375
00:16:41,880 --> 00:16:43,560
dropping a request

376
00:16:43,560 --> 00:16:46,259
it should essentially you know remove

377
00:16:46,259 --> 00:16:48,660
the issuer as a trusted partner

378
00:16:48,660 --> 00:16:51,000
or kind of you know put put them in a

379
00:16:51,000 --> 00:16:53,519
penalty box at the very least

380
00:16:53,519 --> 00:16:55,800
and similarly if the if it's a singular

381
00:16:55,800 --> 00:16:57,240
client

382
00:16:57,240 --> 00:16:59,699
uh that is doing this and it's not

383
00:16:59,699 --> 00:17:01,380
across many different clients for a

384
00:17:01,380 --> 00:17:04,500
particular issuer then the heuristic can

385
00:17:04,500 --> 00:17:05,880
say you know we're not going to issue

386
00:17:05,880 --> 00:17:07,919
any more tokens in the future to that

387
00:17:07,919 --> 00:17:11,520
client so overall uh rather than

388
00:17:11,520 --> 00:17:13,439
dropping a particular request in the

389
00:17:13,439 --> 00:17:16,699
moment the approach should be uh

390
00:17:16,699 --> 00:17:19,859
rejecting future requests

391
00:17:19,859 --> 00:17:21,900
for that client or if you detect

392
00:17:21,900 --> 00:17:23,939
eventually that

393
00:17:23,939 --> 00:17:26,160
this is more likely the issuer problem

394
00:17:26,160 --> 00:17:28,380
than is the client then you stop using

395
00:17:28,380 --> 00:17:29,720
that issuer

396
00:17:29,720 --> 00:17:33,080
which effectively stops

397
00:17:33,080 --> 00:17:34,919
using

398
00:17:34,919 --> 00:17:37,020
letting any client talk to that issuer

399
00:17:37,020 --> 00:17:40,340
through that a tester

400
00:17:41,100 --> 00:17:45,559
as a bit of sidebar we filed another

401
00:17:45,559 --> 00:17:47,880
issue that you know we should have more

402
00:17:47,880 --> 00:17:50,520
text in this entire area as we were

403
00:17:50,520 --> 00:17:53,179
talking about it you know

404
00:17:53,179 --> 00:17:55,740
we've for the basic types we already

405
00:17:55,740 --> 00:17:56,640
have

406
00:17:56,640 --> 00:18:00,419
some experience with uh a test or an

407
00:18:00,419 --> 00:18:01,860
issue or deployment we're getting a lot

408
00:18:01,860 --> 00:18:03,360
of more issuers

409
00:18:03,360 --> 00:18:05,460
being deployed for the basic types and

410
00:18:05,460 --> 00:18:07,919
we're working with our tester

411
00:18:07,919 --> 00:18:10,140
and they're

412
00:18:10,140 --> 00:18:13,640
there is already a fair amount of

413
00:18:13,640 --> 00:18:16,080
validation that needs to go on between

414
00:18:16,080 --> 00:18:19,260
an attester and an issuer

415
00:18:19,260 --> 00:18:22,260
um there are things Beyond just its

416
00:18:22,260 --> 00:18:25,260
pattern of uh you know are you

417
00:18:25,260 --> 00:18:29,100
uh being malicious or not but are the

418
00:18:29,100 --> 00:18:31,919
lengths of the windows that you have for

419
00:18:31,919 --> 00:18:35,039
uh enforcing a rate limit uh an

420
00:18:35,039 --> 00:18:36,660
acceptable thing you shouldn't have

421
00:18:36,660 --> 00:18:39,120
windows that are one minute long you

422
00:18:39,120 --> 00:18:40,320
shouldn't have a window that's a year

423
00:18:40,320 --> 00:18:42,660
long so there are things that the tester

424
00:18:42,660 --> 00:18:44,220
needs to validate before it's willing to

425
00:18:44,220 --> 00:18:46,020
trust an issuer

426
00:18:46,020 --> 00:18:48,120
for that

427
00:18:48,120 --> 00:18:49,380
um the different

428
00:18:49,380 --> 00:18:51,299
rate limits

429
00:18:51,299 --> 00:18:52,980
um there may be bounds on that you may

430
00:18:52,980 --> 00:18:54,539
not want to accept a rate limit of one

431
00:18:54,539 --> 00:18:56,820
you may not want to accept a rate limit

432
00:18:56,820 --> 00:18:59,760
of a million and so there are values

433
00:18:59,760 --> 00:19:00,900
that you need to be able to validate

434
00:19:00,900 --> 00:19:02,460
there

435
00:19:02,460 --> 00:19:04,440
and of course you also need to make sure

436
00:19:04,440 --> 00:19:05,640
that

437
00:19:05,640 --> 00:19:08,460
um if this is

438
00:19:08,460 --> 00:19:11,760
uh kind of a generic case that the

439
00:19:11,760 --> 00:19:13,740
issuer you're working with has enough

440
00:19:13,740 --> 00:19:16,860
different Origins being served to create

441
00:19:16,860 --> 00:19:19,080
an anonymity set

442
00:19:19,080 --> 00:19:19,860
um

443
00:19:19,860 --> 00:19:22,799
so I think overall there should be more

444
00:19:22,799 --> 00:19:25,799
text in a section on the trust

445
00:19:25,799 --> 00:19:27,360
relationship between the tester and the

446
00:19:27,360 --> 00:19:30,960
issuer and part of that then would be

447
00:19:30,960 --> 00:19:34,760
um the Collision detection

448
00:19:36,299 --> 00:19:40,080
uh then the other direction I do want to

449
00:19:40,080 --> 00:19:41,280
bring up

450
00:19:41,280 --> 00:19:44,520
um for that uh malicious issuer

451
00:19:44,520 --> 00:19:46,200
attack

452
00:19:46,200 --> 00:19:47,820
um

453
00:19:47,820 --> 00:19:50,460
there was an alternative approach that

454
00:19:50,460 --> 00:19:54,419
Nikita brought up and we discussed and I

455
00:19:54,419 --> 00:19:56,940
know he's on the call here which would

456
00:19:56,940 --> 00:19:59,820
involve a completely different approach

457
00:19:59,820 --> 00:20:03,799
uh to the uh

458
00:20:03,799 --> 00:20:05,580
signature

459
00:20:05,580 --> 00:20:08,039
uh that currently prevents the clients

460
00:20:08,039 --> 00:20:11,039
from cheating that instead of using uh

461
00:20:11,039 --> 00:20:14,160
that crg work uh you would instead use

462
00:20:14,160 --> 00:20:16,679
zero knowledge proof that the client

463
00:20:16,679 --> 00:20:18,780
would present to both the tester and the

464
00:20:18,780 --> 00:20:21,299
issuer and be kind of like a one-way

465
00:20:21,299 --> 00:20:22,380
thing

466
00:20:22,380 --> 00:20:25,980
um so this is cool

467
00:20:25,980 --> 00:20:28,860
um it does however rely on new crypto

468
00:20:28,860 --> 00:20:31,919
that's not specified yet in any document

469
00:20:31,919 --> 00:20:36,000
and would have uh more impact on the

470
00:20:36,000 --> 00:20:39,299
protocol and who knows what and how you

471
00:20:39,299 --> 00:20:41,820
would uh have to deal with other

472
00:20:41,820 --> 00:20:45,360
normalization issues

473
00:20:45,360 --> 00:20:47,340
so

474
00:20:47,340 --> 00:20:50,100
you know this is something that were we

475
00:20:50,100 --> 00:20:51,780
to go in this direction

476
00:20:51,780 --> 00:20:54,360
would need uh

477
00:20:54,360 --> 00:20:57,539
a lot more you know kind of starting

478
00:20:57,539 --> 00:21:00,600
from scratch in cfrg other discussion

479
00:21:00,600 --> 00:21:03,059
um and you know we're not sure

480
00:21:03,059 --> 00:21:06,600
all the details of how it works so

481
00:21:06,600 --> 00:21:08,760
um I think my recommendation and our

482
00:21:08,760 --> 00:21:12,600
recommendation uh as the authors is to

483
00:21:12,600 --> 00:21:16,620
uh for the basic rate limited type that

484
00:21:16,620 --> 00:21:18,179
we're defining now

485
00:21:18,179 --> 00:21:20,820
uh do the fixes that we previously

486
00:21:20,820 --> 00:21:23,940
mentioned but I have the zero knowledge

487
00:21:23,940 --> 00:21:27,480
proof uh Direction B candidate for

488
00:21:27,480 --> 00:21:29,640
future token types and future work in

489
00:21:29,640 --> 00:21:31,320
this area

490
00:21:31,320 --> 00:21:33,860
um once it's gone through

491
00:21:33,860 --> 00:21:36,120
cfrg other

492
00:21:36,120 --> 00:21:37,080
um

493
00:21:37,080 --> 00:21:39,360
groups and other analysis

494
00:21:39,360 --> 00:21:41,159
I think there's

495
00:21:41,159 --> 00:21:44,940
other features that people have

496
00:21:44,940 --> 00:21:46,679
discussed Beyond just like a basic count

497
00:21:46,679 --> 00:21:48,000
of rate limit

498
00:21:48,000 --> 00:21:50,820
that could involve state or these more

499
00:21:50,820 --> 00:21:52,440
complex relationships

500
00:21:52,440 --> 00:21:55,679
um and bundling the news or knowledge

501
00:21:55,679 --> 00:21:59,100
proof so if that would make sense to me

502
00:21:59,100 --> 00:22:00,840
so

503
00:22:00,840 --> 00:22:03,659
um yeah I I see some

504
00:22:03,659 --> 00:22:05,820
comments in the chat that's yeah it does

505
00:22:05,820 --> 00:22:07,320
seem like a big change

506
00:22:07,320 --> 00:22:09,780
um but yeah I think it's very cool and I

507
00:22:09,780 --> 00:22:11,520
I think we should

508
00:22:11,520 --> 00:22:13,740
keep pursuing it

509
00:22:13,740 --> 00:22:16,799
um I think one of the benefits of the

510
00:22:16,799 --> 00:22:19,980
architecture that we are

511
00:22:19,980 --> 00:22:22,440
using is that we have flexibility on

512
00:22:22,440 --> 00:22:24,780
token types we can Define new token

513
00:22:24,780 --> 00:22:27,299
types that people can move to that can

514
00:22:27,299 --> 00:22:30,059
bring us new cryptographic algorithms

515
00:22:30,059 --> 00:22:32,520
that can bring us new capabilities and

516
00:22:32,520 --> 00:22:33,600
properties

517
00:22:33,600 --> 00:22:37,100
um so I'd like to see this used there

518
00:22:37,100 --> 00:22:39,900
and we do have uh somebody in the queue

519
00:22:39,900 --> 00:22:42,840
if you'd like to oh do we yeah

520
00:22:42,840 --> 00:22:47,000
oh sorry I didn't see it John

521
00:22:49,559 --> 00:22:51,840
um not a question just the note that um

522
00:22:51,840 --> 00:22:54,179
the uh

523
00:22:54,179 --> 00:22:56,820
Jose work group is in the process of

524
00:22:56,820 --> 00:23:00,120
being recharted by the iesg to formalize

525
00:23:00,120 --> 00:23:02,280
jwp which is

526
00:23:02,280 --> 00:23:03,960
pretty much exactly what you were just

527
00:23:03,960 --> 00:23:05,820
talking about so

528
00:23:05,820 --> 00:23:07,020
um there is a

529
00:23:07,020 --> 00:23:09,360
the Jose working group is intended to

530
00:23:09,360 --> 00:23:12,360
look and formalize how to do Json tokens

531
00:23:12,360 --> 00:23:13,799
with

532
00:23:13,799 --> 00:23:16,580
um zero knowledge proofs

533
00:23:16,580 --> 00:23:19,200
approved algorithms from the cfrg so

534
00:23:19,200 --> 00:23:21,480
that is in process

535
00:23:21,480 --> 00:23:23,280
um if people are interested then pay

536
00:23:23,280 --> 00:23:26,159
attention to the newly reformed Jose

537
00:23:26,159 --> 00:23:28,500
working group should they see it RG

538
00:23:28,500 --> 00:23:32,159
approve it next meeting okay got it yeah

539
00:23:32,159 --> 00:23:34,559
um we will definitely want to track that

540
00:23:34,559 --> 00:23:35,940
and

541
00:23:35,940 --> 00:23:38,580
yeah I'll also see what common bits are

542
00:23:38,580 --> 00:23:42,559
present in cfrg then thank you

543
00:23:44,580 --> 00:23:45,539
um

544
00:23:45,539 --> 00:23:48,840
great and so then the other uh open

545
00:23:48,840 --> 00:23:51,900
issues uh there's some discussion about

546
00:23:51,900 --> 00:23:53,520
the

547
00:23:53,520 --> 00:23:58,080
uh token key ID uh length and if that

548
00:23:58,080 --> 00:24:00,740
should change

549
00:24:01,559 --> 00:24:03,179
um

550
00:24:03,179 --> 00:24:06,840
there's a discussion around uh ways to

551
00:24:06,840 --> 00:24:09,539
potentially hide the issuer rate limit

552
00:24:09,539 --> 00:24:12,000
from the tester that is something that

553
00:24:12,000 --> 00:24:13,980
we think may work better in a future

554
00:24:13,980 --> 00:24:15,900
token type kind of like the zero

555
00:24:15,900 --> 00:24:18,179
knowledge proof

556
00:24:18,179 --> 00:24:19,260
um

557
00:24:19,260 --> 00:24:22,140
there is

558
00:24:22,140 --> 00:24:25,440
an issue just remember this

559
00:24:25,440 --> 00:24:27,059
um ah yes

560
00:24:27,059 --> 00:24:29,880
uh I think we need more discussion and

561
00:24:29,880 --> 00:24:32,400
text around how

562
00:24:32,400 --> 00:24:33,720
um

563
00:24:33,720 --> 00:24:36,000
you deal with rate limited tokens when

564
00:24:36,000 --> 00:24:37,980
you have an origin info that lists

565
00:24:37,980 --> 00:24:39,720
multiple Origins so this is like when

566
00:24:39,720 --> 00:24:41,940
you have a third party

567
00:24:41,940 --> 00:24:43,740
um you know let's say you have a

568
00:24:43,740 --> 00:24:46,440
recapture embedded on some other

569
00:24:46,440 --> 00:24:49,020
website and it wants to do a rate limit

570
00:24:49,020 --> 00:24:51,720
and how you handle which one is kind of

571
00:24:51,720 --> 00:24:54,860
the one you're limiting on

572
00:24:54,980 --> 00:24:58,320
and then this last one I mentioned uh

573
00:24:58,320 --> 00:25:00,840
where we want to expand the text on the

574
00:25:00,840 --> 00:25:02,460
trust relationship between the testers

575
00:25:02,460 --> 00:25:04,679
and issuer and what they need to

576
00:25:04,679 --> 00:25:07,880
um validate against each other

577
00:25:08,760 --> 00:25:10,799
uh so that's the end of the slides I

578
00:25:10,799 --> 00:25:12,120
have here

579
00:25:12,120 --> 00:25:13,140
um

580
00:25:13,140 --> 00:25:15,720
I think our main

581
00:25:15,720 --> 00:25:18,840
next step is to update the document for

582
00:25:18,840 --> 00:25:20,940
these issues based on

583
00:25:20,940 --> 00:25:23,400
what we discussed here if people have

584
00:25:23,400 --> 00:25:25,200
opinions we'd love to

585
00:25:25,200 --> 00:25:28,860
hear that we are still tracking the cfrg

586
00:25:28,860 --> 00:25:30,779
dependency for the signature key

587
00:25:30,779 --> 00:25:32,179
blinding

588
00:25:32,179 --> 00:25:35,220
that helps us do the proof that the

589
00:25:35,220 --> 00:25:37,200
clients are not cheating

590
00:25:37,200 --> 00:25:40,080
and other than that we're gonna

591
00:25:40,080 --> 00:25:42,539
keep working on this

592
00:25:42,539 --> 00:25:45,740
um any questions

593
00:25:46,320 --> 00:25:48,299
there were a couple questions in the

594
00:25:48,299 --> 00:25:50,820
chat I don't know if folks are

595
00:25:50,820 --> 00:25:54,120
wanting to bring those to the mic yeah I

596
00:25:54,120 --> 00:25:57,260
tried to address some of them

597
00:25:57,779 --> 00:26:00,720
as I saw them coming by but

598
00:26:00,720 --> 00:26:03,380
Nick

599
00:26:08,100 --> 00:26:11,820
yeah thanks for the um overview I I was

600
00:26:11,820 --> 00:26:15,059
asking about the um

601
00:26:15,059 --> 00:26:17,340
uh I think it's an encapsulation key

602
00:26:17,340 --> 00:26:20,220
right that the origin provides uh I I

603
00:26:20,220 --> 00:26:22,500
want you to go get a token from this

604
00:26:22,500 --> 00:26:25,080
issuer and gives you a particular key to

605
00:26:25,080 --> 00:26:29,159
use to uh encap your request

606
00:26:29,159 --> 00:26:30,059
um

607
00:26:30,059 --> 00:26:32,159
and that just seems like a potential

608
00:26:32,159 --> 00:26:33,779
tracking Vector I know there are other

609
00:26:33,779 --> 00:26:35,940
tracking direct vectors if they um

610
00:26:35,940 --> 00:26:37,320
collude but

611
00:26:37,320 --> 00:26:38,640
um that seemed like a potentially

612
00:26:38,640 --> 00:26:40,080
significant one

613
00:26:40,080 --> 00:26:41,100
um and it seems like there's some

614
00:26:41,100 --> 00:26:43,500
mitigations in the document about the a

615
00:26:43,500 --> 00:26:45,779
tester can help mitigate by trying to

616
00:26:45,779 --> 00:26:47,820
make sure that the key

617
00:26:47,820 --> 00:26:50,039
isn't

618
00:26:50,039 --> 00:26:52,559
um unique or something uh is is the is

619
00:26:52,559 --> 00:26:54,480
the assumption that okay there should be

620
00:26:54,480 --> 00:26:56,720
a single key for

621
00:26:56,720 --> 00:26:59,580
each origin

622
00:26:59,580 --> 00:27:01,440
like there should be a universal a

623
00:27:01,440 --> 00:27:04,440
consistent E3 Georgian right right and

624
00:27:04,440 --> 00:27:06,480
so part of this overlaps with the key

625
00:27:06,480 --> 00:27:08,580
consistency

626
00:27:08,580 --> 00:27:09,620
um

627
00:27:09,620 --> 00:27:12,840
document an approach

628
00:27:12,840 --> 00:27:17,100
but yes there there is for the hpk key

629
00:27:17,100 --> 00:27:19,260
there would be one

630
00:27:19,260 --> 00:27:22,320
or you know one wrote slowly rotating

631
00:27:22,320 --> 00:27:23,820
key

632
00:27:23,820 --> 00:27:26,899
um for that issuer

633
00:27:27,000 --> 00:27:28,620
um and so you need to make sure that you

634
00:27:28,620 --> 00:27:30,179
have the same

635
00:27:30,179 --> 00:27:33,120
key as everyone else and

636
00:27:33,120 --> 00:27:36,539
the working with the tester is one way

637
00:27:36,539 --> 00:27:37,860
to do that

638
00:27:37,860 --> 00:27:40,140
that like if you're doing a key

639
00:27:40,140 --> 00:27:42,480
consistency approach

640
00:27:42,480 --> 00:27:45,779
um you you have one source which is the

641
00:27:45,779 --> 00:27:46,980
origin

642
00:27:46,980 --> 00:27:49,740
uh telling you here's the key to use and

643
00:27:49,740 --> 00:27:51,600
the tester can also

644
00:27:51,600 --> 00:27:53,760
potentially be a

645
00:27:53,760 --> 00:27:55,679
Vector to validate that

646
00:27:55,679 --> 00:27:57,419
that is the same as we see what it sees

647
00:27:57,419 --> 00:28:00,500
across all other clients

648
00:28:00,539 --> 00:28:02,760
and does that I mean if if it is going

649
00:28:02,760 --> 00:28:04,440
to be that sort of consistent does it

650
00:28:04,440 --> 00:28:06,000
even need to come from the origin or

651
00:28:06,000 --> 00:28:08,120
just should there

652
00:28:08,120 --> 00:28:10,799
for an issuer and the Orange is not

653
00:28:10,799 --> 00:28:12,360
involved at all

654
00:28:12,360 --> 00:28:15,240
yeah it definitely doesn't need to be

655
00:28:15,240 --> 00:28:17,640
um and I don't recall offhand but I

656
00:28:17,640 --> 00:28:19,140
think

657
00:28:19,140 --> 00:28:21,779
I think it is optional like because even

658
00:28:21,779 --> 00:28:23,880
in the basic

659
00:28:23,880 --> 00:28:24,779
um

660
00:28:24,779 --> 00:28:29,580
token requests the origins include for

661
00:28:29,580 --> 00:28:32,460
example like the RSA flight signature

662
00:28:32,460 --> 00:28:34,500
uh public key

663
00:28:34,500 --> 00:28:37,679
that they're going to verify against

664
00:28:37,679 --> 00:28:40,020
that is something that doesn't strictly

665
00:28:40,020 --> 00:28:41,820
need to be in the challenge if the

666
00:28:41,820 --> 00:28:44,039
client has another way to get it

667
00:28:44,039 --> 00:28:45,539
um

668
00:28:45,539 --> 00:28:47,940
so

669
00:28:47,940 --> 00:28:49,799
um Origins could

670
00:28:49,799 --> 00:28:51,360
leave it off

671
00:28:51,360 --> 00:28:53,760
um and then you know essentially Force

672
00:28:53,760 --> 00:28:55,260
the clients to fetch it some other way

673
00:28:55,260 --> 00:28:57,059
but

674
00:28:57,059 --> 00:29:00,059
it uh it is defined as a parameter that

675
00:29:00,059 --> 00:29:03,179
can be included in the challenge

676
00:29:03,179 --> 00:29:05,900
if that makes sense

677
00:29:07,320 --> 00:29:08,640
yeah that

678
00:29:08,640 --> 00:29:10,860
um that that's helpful I mean it does it

679
00:29:10,860 --> 00:29:12,120
does seem like we should have as little

680
00:29:12,120 --> 00:29:15,900
information in coming from the

681
00:29:15,900 --> 00:29:18,840
origin that could be used to directly

682
00:29:18,840 --> 00:29:22,440
communicate with the issuer

683
00:29:22,440 --> 00:29:24,360
yep yep

684
00:29:24,360 --> 00:29:27,179
that's a good point thanks uh yeah I I

685
00:29:27,179 --> 00:29:30,000
think sometime when we have more key

686
00:29:30,000 --> 00:29:32,399
consistencies key consistency discussion

687
00:29:32,399 --> 00:29:35,719
we should talk about how those related

688
00:29:36,960 --> 00:29:39,000
um

689
00:29:39,000 --> 00:29:41,820
Ben you had had a question on the chat

690
00:29:41,820 --> 00:29:43,260
about

691
00:29:43,260 --> 00:29:47,899
the blinding being symmetric encryption

692
00:29:49,080 --> 00:29:52,640
was that answers

693
00:29:52,640 --> 00:29:55,980
I'm very uh I'm very naive about all

694
00:29:55,980 --> 00:29:57,840
this all this stuff that I've been

695
00:29:57,840 --> 00:29:59,600
trying to figure out if the key blinding

696
00:29:59,600 --> 00:30:03,120
is just equivalent to taking the taking

697
00:30:03,120 --> 00:30:06,539
the public key and encrypting it under

698
00:30:06,539 --> 00:30:10,679
symmetric encryption and passing the

699
00:30:10,679 --> 00:30:12,720
passing the password around that you

700
00:30:12,720 --> 00:30:14,820
know passing the the symmetric key

701
00:30:14,820 --> 00:30:17,880
around as needed is that is that all

702
00:30:17,880 --> 00:30:19,320
that the key binding is actually doing

703
00:30:19,320 --> 00:30:21,678
here

704
00:30:22,080 --> 00:30:23,340
um

705
00:30:23,340 --> 00:30:26,580
I don't know if Stephen or others would

706
00:30:26,580 --> 00:30:28,020
want to

707
00:30:28,020 --> 00:30:31,700
comment on that

708
00:30:32,159 --> 00:30:34,159
um

709
00:30:35,840 --> 00:30:37,919
Stephen Google

710
00:30:37,919 --> 00:30:39,899
um so the scheme there is slightly more

711
00:30:39,899 --> 00:30:41,279
complicated than just the symmetric

712
00:30:41,279 --> 00:30:43,679
thing like it's using the public key of

713
00:30:43,679 --> 00:30:46,080
the issuer but then we have the extra

714
00:30:46,080 --> 00:30:48,179
binding so that the tester can verify

715
00:30:48,179 --> 00:30:50,820
some Anonymous ID that the or the issuer

716
00:30:50,820 --> 00:30:52,679
provides without like learning the

717
00:30:52,679 --> 00:30:55,460
actual origin or key information

718
00:30:55,460 --> 00:30:57,720
so it's like slightly more complicated

719
00:30:57,720 --> 00:31:00,059
if we didn't care about the attester and

720
00:31:00,059 --> 00:31:01,380
not learning like the Intermediate

721
00:31:01,380 --> 00:31:02,520
result you could use something more

722
00:31:02,520 --> 00:31:04,620
symmetric but I think that's why we need

723
00:31:04,620 --> 00:31:07,380
the like heat Landing like the RSA cleat

724
00:31:07,380 --> 00:31:11,240
blinding dependency here

725
00:31:11,899 --> 00:31:15,059
uh so I'm not talking about RSA blind

726
00:31:15,059 --> 00:31:17,220
signatures I'm talking about the

727
00:31:17,220 --> 00:31:19,860
couponing yeah

728
00:31:19,860 --> 00:31:21,960
okay

729
00:31:21,960 --> 00:31:24,000
uh yeah I'm happy to I'm happy to take

730
00:31:24,000 --> 00:31:25,380
this offline I don't need to waste time

731
00:31:25,380 --> 00:31:27,299
on this yeah yeah we

732
00:31:27,299 --> 00:31:29,360
um

733
00:31:29,700 --> 00:31:32,220
I would rather that uh you know Chris

734
00:31:32,220 --> 00:31:34,500
Wood and some of the other authors on

735
00:31:34,500 --> 00:31:36,659
that comment authoritatively I don't

736
00:31:36,659 --> 00:31:37,559
wanna

737
00:31:37,559 --> 00:31:38,700
uh

738
00:31:38,700 --> 00:31:41,600
perjure myself

739
00:31:43,140 --> 00:31:45,720
all right

740
00:31:45,720 --> 00:31:49,520
okay any other uh questions

741
00:31:51,600 --> 00:31:54,360
all right so it sounds like uh there's a

742
00:31:54,360 --> 00:31:56,399
we have kind of a way forward for some

743
00:31:56,399 --> 00:31:59,039
of the issues uh raised some of the

744
00:31:59,039 --> 00:32:00,659
other ones still maybe need a little bit

745
00:32:00,659 --> 00:32:02,279
work but seem relatively straightforward

746
00:32:02,279 --> 00:32:03,179
so

747
00:32:03,179 --> 00:32:05,760
uh I guess we'll expect some revisions

748
00:32:05,760 --> 00:32:07,919
and work on the on this document over

749
00:32:07,919 --> 00:32:09,899
the next couple months

750
00:32:09,899 --> 00:32:14,840
that's right thank you awesome thank you

751
00:32:15,600 --> 00:32:19,820
all right I believe next

752
00:32:20,220 --> 00:32:23,340
is it I think we have a

753
00:32:23,340 --> 00:32:26,520
Steven up to talk about what's going on

754
00:32:26,520 --> 00:32:29,159
in w3c

755
00:32:29,159 --> 00:32:32,899
let me get your slides up

756
00:32:33,179 --> 00:32:35,940
or pulling slides I don't know

757
00:32:35,940 --> 00:32:39,240
um I think I've never tried it

758
00:32:39,240 --> 00:32:40,860
um can you share a slide through that

759
00:32:40,860 --> 00:32:43,799
maybe you need to do the sharing then or

760
00:32:43,799 --> 00:32:47,779
do I share do you share uh

761
00:32:47,779 --> 00:32:51,799
okay you should have it

762
00:32:54,480 --> 00:32:55,740
cool

763
00:32:55,740 --> 00:32:58,200
so I'm Stephen Google I'm gonna give a

764
00:32:58,200 --> 00:32:59,940
quick overview of the current state of

765
00:32:59,940 --> 00:33:02,940
privacy pass s work in the w3c and where

766
00:33:02,940 --> 00:33:05,580
some of the next steps might be there

767
00:33:05,580 --> 00:33:06,600
um

768
00:33:06,600 --> 00:33:09,299
so there's a few relevant Works some of

769
00:33:09,299 --> 00:33:10,980
them in the w3c and some of them not

770
00:33:10,980 --> 00:33:12,659
quite there yet there's private access

771
00:33:12,659 --> 00:33:15,179
tokens by Apple cloudflare and fastly

772
00:33:15,179 --> 00:33:16,980
there's private State tokens which was

773
00:33:16,980 --> 00:33:19,919
for well known as trust tokens there's a

774
00:33:19,919 --> 00:33:21,480
device at a station use case that has

775
00:33:21,480 --> 00:33:24,120
been coming up in the w3c and there's a

776
00:33:24,120 --> 00:33:25,919
few other uses that have come up so I'll

777
00:33:25,919 --> 00:33:27,960
go over them and we'll see how much of

778
00:33:27,960 --> 00:33:30,240
this is purely w3c work or how much of

779
00:33:30,240 --> 00:33:31,500
this might be work that we want to

780
00:33:31,500 --> 00:33:32,760
pursue in the future in the Privacy

781
00:33:32,760 --> 00:33:33,480
success

782
00:33:33,480 --> 00:33:37,320
group so first private access tokens is

783
00:33:37,320 --> 00:33:39,299
one of the more mature things it's based

784
00:33:39,299 --> 00:33:41,100
on currently the blind RSA and the rate

785
00:33:41,100 --> 00:33:42,720
limited token draft that is currently

786
00:33:42,720 --> 00:33:44,340
undergoing adoption that Tommy just

787
00:33:44,340 --> 00:33:46,320
talked about it's pretty close to the

788
00:33:46,320 --> 00:33:47,880
existing privacy pass protocol there's

789
00:33:47,880 --> 00:33:50,039
very minimal deltas

790
00:33:50,039 --> 00:33:51,299
um the thing is that you need to do in

791
00:33:51,299 --> 00:33:54,240
the w3c to support this are the there's

792
00:33:54,240 --> 00:33:55,740
a fetch API

793
00:33:55,740 --> 00:33:57,120
this is different from like the

794
00:33:57,120 --> 00:33:58,679
JavaScript Factory people a but this

795
00:33:58,679 --> 00:34:00,480
describes how web requests and web

796
00:34:00,480 --> 00:34:02,519
responses attach various information

797
00:34:02,519 --> 00:34:05,760
such as the WWE authorization headers

798
00:34:05,760 --> 00:34:08,699
that we see in private in privacy paths

799
00:34:08,699 --> 00:34:11,639
in the authorization draft

800
00:34:11,639 --> 00:34:13,739
um there's also some question if there's

801
00:34:13,739 --> 00:34:15,540
a way to delegate usage of this API and

802
00:34:15,540 --> 00:34:17,699
that's also going to require w3c work to

803
00:34:17,699 --> 00:34:20,159
allow this API to be used outside of

804
00:34:20,159 --> 00:34:22,020
just the top level

805
00:34:22,020 --> 00:34:24,179
um so for this particular API I think

806
00:34:24,179 --> 00:34:26,339
the it currently doesn't exist in any

807
00:34:26,339 --> 00:34:28,859
community group in the w3c but I think

808
00:34:28,859 --> 00:34:30,960
it would likely end up in either the

809
00:34:30,960 --> 00:34:32,820
wiki which is the web incubation group

810
00:34:32,820 --> 00:34:35,099
or the anti-fraud CG which is a group

811
00:34:35,099 --> 00:34:36,480
working on a bunch of anti-fraud

812
00:34:36,480 --> 00:34:38,580
technology which private access tokens

813
00:34:38,580 --> 00:34:41,339
sort of falls under as a quick aside

814
00:34:41,339 --> 00:34:44,099
the w3c has a bunch of different groups

815
00:34:44,099 --> 00:34:45,719
there's interest groups which are

816
00:34:45,719 --> 00:34:47,159
exchange of ideas Community groups

817
00:34:47,159 --> 00:34:48,960
business groups working groups the

818
00:34:48,960 --> 00:34:50,219
important distinction here is that

819
00:34:50,219 --> 00:34:51,839
computer groups tend to do like early

820
00:34:51,839 --> 00:34:54,300
work on various ideas but don't actually

821
00:34:54,300 --> 00:34:56,280
produce deliverables or standardized

822
00:34:56,280 --> 00:34:58,680
documentation eventually once something

823
00:34:58,680 --> 00:35:00,720
is in a good enough State there it'll

824
00:35:00,720 --> 00:35:03,240
move into some working group I think for

825
00:35:03,240 --> 00:35:05,220
privacy pass related technology this

826
00:35:05,220 --> 00:35:07,260
would likely be web appsec though if

827
00:35:07,260 --> 00:35:08,820
there's a lot of interest and a lot of

828
00:35:08,820 --> 00:35:11,280
like things derived from privacy pass it

829
00:35:11,280 --> 00:35:12,960
might be worth having a new working

830
00:35:12,960 --> 00:35:15,720
group so I think the yeah the general

831
00:35:15,720 --> 00:35:17,579
structure is we'll have Community groups

832
00:35:17,579 --> 00:35:19,140
working on this sort of things for early

833
00:35:19,140 --> 00:35:20,460
design and getting input from other

834
00:35:20,460 --> 00:35:22,140
folks and then move it to a working

835
00:35:22,140 --> 00:35:23,760
group to actually create a deliverable

836
00:35:23,760 --> 00:35:28,579
of effectively an RC finalized document

837
00:35:28,680 --> 00:35:30,119
um so to talk a little bit about how

838
00:35:30,119 --> 00:35:33,359
private access tokens usage format Works

839
00:35:33,359 --> 00:35:35,339
um right now token issuance is a trusted

840
00:35:35,339 --> 00:35:37,680
tester in the Apple case it's the Apple

841
00:35:37,680 --> 00:35:38,820
platform

842
00:35:38,820 --> 00:35:40,200
um and I think that's the general idea

843
00:35:40,200 --> 00:35:41,700
for Access tokens

844
00:35:41,700 --> 00:35:44,520
um and then any uh website is allowed to

845
00:35:44,520 --> 00:35:47,040
redeem these tokens to have some proof

846
00:35:47,040 --> 00:35:49,020
that like you can access this resource

847
00:35:49,020 --> 00:35:50,880
because you have a real device or a

848
00:35:50,880 --> 00:35:52,920
legitimate platform

849
00:35:52,920 --> 00:35:55,140
um and then to do rate limiting with the

850
00:35:55,140 --> 00:35:57,060
rate limiting draft dude both rate limit

851
00:35:57,060 --> 00:35:59,040
of each origin is only allowed a fixed

852
00:35:59,040 --> 00:36:00,839
number of tokens so you don't like go

853
00:36:00,839 --> 00:36:02,760
take a hundred thousand tokens from one

854
00:36:02,760 --> 00:36:04,859
device and go spread them to a bunch of

855
00:36:04,859 --> 00:36:06,900
malicious devices and there's also rate

856
00:36:06,900 --> 00:36:09,240
limiting based on the attest or can rate

857
00:36:09,240 --> 00:36:11,579
limit like you don't want to be spitting

858
00:36:11,579 --> 00:36:13,079
out a ton of tokens for one specific

859
00:36:13,079 --> 00:36:15,359
device uh just since these sorts of

860
00:36:15,359 --> 00:36:17,099
token farming attacks are quite common

861
00:36:17,099 --> 00:36:19,079
at least in the web space around cookies

862
00:36:19,079 --> 00:36:22,380
and we'd expect similar things with uh

863
00:36:22,380 --> 00:36:24,119
private access tokens and other privacy

864
00:36:24,119 --> 00:36:27,200
pass related technology

865
00:36:27,540 --> 00:36:30,480
um so another API undergoing work in the

866
00:36:30,480 --> 00:36:32,579
w3c is private State tokens it was

867
00:36:32,579 --> 00:36:35,640
formerly known as trust tokens uh but

868
00:36:35,640 --> 00:36:37,680
both the name trust there didn't quite

869
00:36:37,680 --> 00:36:40,320
reflect what it actually did and it was

870
00:36:40,320 --> 00:36:42,119
better to try getting it to a closer

871
00:36:42,119 --> 00:36:44,160
more coherent story with all the other

872
00:36:44,160 --> 00:36:47,280
tokens that are undering work it is

873
00:36:47,280 --> 00:36:49,440
based on a very old version of privacy

874
00:36:49,440 --> 00:36:52,560
paths the vopf draft and I think from

875
00:36:52,560 --> 00:36:55,320
like three years ago and a not

876
00:36:55,320 --> 00:36:57,420
standardized PMB tokens graph which is a

877
00:36:57,420 --> 00:37:00,720
version of privacy pass that has a

878
00:37:00,720 --> 00:37:02,880
private metadata

879
00:37:02,880 --> 00:37:04,380
um I think there is a plan to update

880
00:37:04,380 --> 00:37:06,180
this to the more recent version once the

881
00:37:06,180 --> 00:37:08,040
drafts are finalized and we have an RFC

882
00:37:08,040 --> 00:37:09,240
cut of it

883
00:37:09,240 --> 00:37:11,400
um and hopefully a PMB tokens drafted

884
00:37:11,400 --> 00:37:13,859
that's still of interest in the ITF

885
00:37:13,859 --> 00:37:15,720
could get standardized though it's

886
00:37:15,720 --> 00:37:17,040
unclear how much interest they'll be

887
00:37:17,040 --> 00:37:19,500
here and how useful that is

888
00:37:19,500 --> 00:37:21,540
um it is currently in the wick tree

889
00:37:21,540 --> 00:37:22,920
um we're hoping to move it to the

890
00:37:22,920 --> 00:37:24,359
anti-fraud community group just because

891
00:37:24,359 --> 00:37:26,520
while the web platform incubation group

892
00:37:26,520 --> 00:37:28,440
like there's lots of documents in that

893
00:37:28,440 --> 00:37:30,480
you don't get as much feedback and

894
00:37:30,480 --> 00:37:32,820
response there and anti-fraud I think is

895
00:37:32,820 --> 00:37:34,980
the core use case of that API so we're

896
00:37:34,980 --> 00:37:36,839
up to move there

897
00:37:36,839 --> 00:37:38,160
um

898
00:37:38,160 --> 00:37:41,220
let's see uh the model there unlike

899
00:37:41,220 --> 00:37:43,440
private access tokens is that any

900
00:37:43,440 --> 00:37:45,480
website either first party or third

901
00:37:45,480 --> 00:37:47,160
party would be issuing tokens if they

902
00:37:47,160 --> 00:37:48,900
have some concept of the users like

903
00:37:48,900 --> 00:37:51,720
legitimacy I think the recaptcha edge

904
00:37:51,720 --> 00:37:53,760
capture case is the primary one here

905
00:37:53,760 --> 00:37:55,920
also if you have a strong first party

906
00:37:55,920 --> 00:37:57,420
identity and then you're willing to

907
00:37:57,420 --> 00:37:59,160
share that information that might be

908
00:37:59,160 --> 00:38:00,540
another case where you want to be

909
00:38:00,540 --> 00:38:03,180
issuing tokens and then other Origins

910
00:38:03,180 --> 00:38:05,040
can redeem tokens from those particular

911
00:38:05,040 --> 00:38:07,440
users there's likely going to need to be

912
00:38:07,440 --> 00:38:09,300
some sort of partnership between the

913
00:38:09,300 --> 00:38:11,640
issuers and the folks redeeming uh just

914
00:38:11,640 --> 00:38:13,440
because they need to know what a token

915
00:38:13,440 --> 00:38:15,300
means like if you get a token from some

916
00:38:15,300 --> 00:38:17,280
random issuer and you don't know like

917
00:38:17,280 --> 00:38:18,839
what it actually is attesting to what

918
00:38:18,839 --> 00:38:20,579
it's actually promising that's less

919
00:38:20,579 --> 00:38:22,800
useful at least for these sorts of

920
00:38:22,800 --> 00:38:24,839
ecosystems

921
00:38:24,839 --> 00:38:26,880
um one other thing in private State

922
00:38:26,880 --> 00:38:28,200
tokens that's slightly different from

923
00:38:28,200 --> 00:38:30,599
privacy pass is to avoid having to spend

924
00:38:30,599 --> 00:38:32,460
a token for all like 50 requests you

925
00:38:32,460 --> 00:38:34,680
might make on one top level page there's

926
00:38:34,680 --> 00:38:36,359
a concept of a Redemption record which

927
00:38:36,359 --> 00:38:38,700
is basically like a stored local cached

928
00:38:38,700 --> 00:38:41,099
version of the Redemption

929
00:38:41,099 --> 00:38:42,540
um though this is charted by the top

930
00:38:42,540 --> 00:38:44,400
level to like avoid that Redemption

931
00:38:44,400 --> 00:38:46,020
record acting as a cross-site tracking

932
00:38:46,020 --> 00:38:48,320
vector

933
00:38:48,720 --> 00:38:49,859
um

934
00:38:49,859 --> 00:38:53,220
so some other Deltas from the privacy of

935
00:38:53,220 --> 00:38:55,619
house protocol uh that hopefully will go

936
00:38:55,619 --> 00:38:57,300
away as far as things get standardized

937
00:38:57,300 --> 00:39:00,359
or we update to the new rfcs is for

938
00:39:00,359 --> 00:39:02,339
private State tokens in order to get key

939
00:39:02,339 --> 00:39:04,320
commitments and to avoid the like

940
00:39:04,320 --> 00:39:05,520
different users getting presented

941
00:39:05,520 --> 00:39:07,680
different keys we're using the data

942
00:39:07,680 --> 00:39:09,180
database Discovery Model which is

943
00:39:09,180 --> 00:39:11,400
described in Chris's draft uh which is

944
00:39:11,400 --> 00:39:13,500
basically there's a central service that

945
00:39:13,500 --> 00:39:14,940
fetches all the key commitments and

946
00:39:14,940 --> 00:39:17,339
those are provided to clients having

947
00:39:17,339 --> 00:39:19,380
some sort of standard around like how

948
00:39:19,380 --> 00:39:21,119
this actually functions beyond the

949
00:39:21,119 --> 00:39:22,560
random thing that's written for private

950
00:39:22,560 --> 00:39:24,420
State tokens would be good and hopefully

951
00:39:24,420 --> 00:39:26,040
some of that work can come out of the

952
00:39:26,040 --> 00:39:28,280
key consistency draft

953
00:39:28,280 --> 00:39:30,900
currently private State tokens instead

954
00:39:30,900 --> 00:39:32,760
of using the application private token

955
00:39:32,760 --> 00:39:34,740
request method where like use an entire

956
00:39:34,740 --> 00:39:37,920
post it instead runs the Privacy pass

957
00:39:37,920 --> 00:39:40,980
protocol via headers on existing fetch

958
00:39:40,980 --> 00:39:44,940
request or existing xhr request I think

959
00:39:44,940 --> 00:39:46,320
this was partially an optimization

960
00:39:46,320 --> 00:39:47,760
because having a completely separate

961
00:39:47,760 --> 00:39:50,820
Quest was an extra overhead

962
00:39:50,820 --> 00:39:52,440
um that's possible we can just move to

963
00:39:52,440 --> 00:39:53,940
this post method and with a lot of the

964
00:39:53,940 --> 00:39:55,920
H2 things allowing for pooling of

965
00:39:55,920 --> 00:39:59,099
connections and requests the value here

966
00:39:59,099 --> 00:40:01,260
might not be all that useful

967
00:40:01,260 --> 00:40:02,160
um

968
00:40:02,160 --> 00:40:04,619
another thing though this is unlikely to

969
00:40:04,619 --> 00:40:06,359
be specified in the its is that there's

970
00:40:06,359 --> 00:40:08,520
a way of triggering all this using the

971
00:40:08,520 --> 00:40:11,099
fetch JavaScript API instead of just

972
00:40:11,099 --> 00:40:14,099
HTTP authentication the idea here is

973
00:40:14,099 --> 00:40:15,420
that there are various websites that

974
00:40:15,420 --> 00:40:17,339
won't want to do a full like run a

975
00:40:17,339 --> 00:40:19,079
separate request or have to embed a

976
00:40:19,079 --> 00:40:21,599
separate like iframe on the page in

977
00:40:21,599 --> 00:40:23,400
order to get tokens or if you want to do

978
00:40:23,400 --> 00:40:24,780
it in the middle of other activity

979
00:40:24,780 --> 00:40:27,119
happening on the page

980
00:40:27,119 --> 00:40:29,280
I think we hope to also add HTTP

981
00:40:29,280 --> 00:40:30,480
authentication to the private State

982
00:40:30,480 --> 00:40:32,400
token so it would be a strictly like

983
00:40:32,400 --> 00:40:34,380
super set of what's currently provided

984
00:40:34,380 --> 00:40:35,940
in privacy pass and what private access

985
00:40:35,940 --> 00:40:37,380
token does

986
00:40:37,380 --> 00:40:38,760
um and as I mentioned before there's the

987
00:40:38,760 --> 00:40:40,740
Redemption records which help solve some

988
00:40:40,740 --> 00:40:42,119
of the latency issues where you have a

989
00:40:42,119 --> 00:40:44,040
bunch of requests from the same top

990
00:40:44,040 --> 00:40:46,700
level origin

991
00:40:46,980 --> 00:40:47,700
um

992
00:40:47,700 --> 00:40:51,480
so moving on to slightly less thought uh

993
00:40:51,480 --> 00:40:54,720
fleshed out Solutions a common thing

994
00:40:54,720 --> 00:40:57,540
that's come up in the w3c anti-fraud

995
00:40:57,540 --> 00:40:58,920
group has been the idea of having some

996
00:40:58,920 --> 00:41:01,079
sort of device out of station similar to

997
00:41:01,079 --> 00:41:03,300
private access tokens but like some way

998
00:41:03,300 --> 00:41:04,740
to attest to facts about the device or

999
00:41:04,740 --> 00:41:06,920
test two facts about the client

1000
00:41:06,920 --> 00:41:09,660
but this needs some sort of mechanism

1001
00:41:09,660 --> 00:41:11,220
some sort of anonymous credential style

1002
00:41:11,220 --> 00:41:13,920
mechanism to do this without leaking

1003
00:41:13,920 --> 00:41:15,300
information about like this particular

1004
00:41:15,300 --> 00:41:17,820
device ID some variants of privacy pass

1005
00:41:17,820 --> 00:41:20,700
might be useful here either building up

1006
00:41:20,700 --> 00:41:22,260
on the private access tokens private

1007
00:41:22,260 --> 00:41:23,880
State tokens or some other variant if

1008
00:41:23,880 --> 00:41:26,040
there are other types or other parts of

1009
00:41:26,040 --> 00:41:28,140
that attestation work that either need

1010
00:41:28,140 --> 00:41:30,420
slightly different features or need

1011
00:41:30,420 --> 00:41:32,280
don't need a lot of the extra complexity

1012
00:41:32,280 --> 00:41:34,579
here

1013
00:41:34,859 --> 00:41:36,240
um let's see

1014
00:41:36,240 --> 00:41:38,220
there also have been a few other uses

1015
00:41:38,220 --> 00:41:40,380
also similarly less well

1016
00:41:40,380 --> 00:41:42,720
thought out in Pat CG which is the

1017
00:41:42,720 --> 00:41:44,220
private advertising technology community

1018
00:41:44,220 --> 00:41:45,540
group there's a thing called the

1019
00:41:45,540 --> 00:41:47,400
aggregate reporting API

1020
00:41:47,400 --> 00:41:48,839
um this is basically clients send

1021
00:41:48,839 --> 00:41:50,520
reports but there needs to be some way

1022
00:41:50,520 --> 00:41:53,220
to authenticate this avoid uh attacks

1023
00:41:53,220 --> 00:41:56,880
from uh fake devices or

1024
00:41:56,880 --> 00:41:58,680
devices that aren't authenticated in

1025
00:41:58,680 --> 00:42:00,720
some way you don't need a like real user

1026
00:42:00,720 --> 00:42:02,099
identifier attached to the support so

1027
00:42:02,099 --> 00:42:05,400
you just need someone somewhere like was

1028
00:42:05,400 --> 00:42:07,560
fine with this and attaching something

1029
00:42:07,560 --> 00:42:09,119
like privacy pass might be useful there

1030
00:42:09,119 --> 00:42:12,359
there are a few complications here where

1031
00:42:12,359 --> 00:42:14,760
you want to bind tokens to like

1032
00:42:14,760 --> 00:42:17,940
particular origins or include some

1033
00:42:17,940 --> 00:42:19,800
amount of public metadata inside Beyond

1034
00:42:19,800 --> 00:42:22,500
just the like your choice of keys so we

1035
00:42:22,500 --> 00:42:24,900
need some of the more complicated uh

1036
00:42:24,900 --> 00:42:26,700
public metadata forms of privacy pass

1037
00:42:26,700 --> 00:42:28,440
for that case

1038
00:42:28,440 --> 00:42:31,339
um but yeah privacy degree has been

1039
00:42:31,339 --> 00:42:33,420
visiting other sorts of privacy

1040
00:42:33,420 --> 00:42:34,800
preserving technology so there might be

1041
00:42:34,800 --> 00:42:37,380
some work there and then at tpec the web

1042
00:42:37,380 --> 00:42:39,660
often and web Havens folks had a joint

1043
00:42:39,660 --> 00:42:41,520
session with the anti-fraud group and

1044
00:42:41,520 --> 00:42:43,680
there's was some vague interest in

1045
00:42:43,680 --> 00:42:45,180
various blind signature methods and

1046
00:42:45,180 --> 00:42:48,119
honest credential methods there to test

1047
00:42:48,119 --> 00:42:50,640
to something about like you are you've

1048
00:42:50,640 --> 00:42:52,140
worked with some instrument providers

1049
00:42:52,140 --> 00:42:54,420
some credit card providers in bank and

1050
00:42:54,420 --> 00:42:55,980
you want to attest to some facts about

1051
00:42:55,980 --> 00:42:57,780
that in privacy paths or other variants

1052
00:42:57,780 --> 00:43:00,480
of this might be useful in that space

1053
00:43:00,480 --> 00:43:03,560
um I think that's all

1054
00:43:04,680 --> 00:43:06,540
okay Nick Martin's in the queue if

1055
00:43:06,540 --> 00:43:09,319
you're ready for a question

1056
00:43:10,380 --> 00:43:12,060
yeah Martin Thompson I just want to

1057
00:43:12,060 --> 00:43:13,020
avoid

1058
00:43:13,020 --> 00:43:14,880
creating a mistaken impression about

1059
00:43:14,880 --> 00:43:16,740
some of these things I think this might

1060
00:43:16,740 --> 00:43:18,300
be misrepresenting a little bit what Pat

1061
00:43:18,300 --> 00:43:21,180
Sage is actively working on

1062
00:43:21,180 --> 00:43:24,359
the there are proposals in our community

1063
00:43:24,359 --> 00:43:27,300
group uh to adopt

1064
00:43:27,300 --> 00:43:29,700
think the aggregate reporting API is

1065
00:43:29,700 --> 00:43:31,560
just one of the candidates that's being

1066
00:43:31,560 --> 00:43:32,520
discussed

1067
00:43:32,520 --> 00:43:34,260
there's there are some designs that

1068
00:43:34,260 --> 00:43:36,060
don't require

1069
00:43:36,060 --> 00:43:37,920
at least don't require to the same

1070
00:43:37,920 --> 00:43:40,800
extent those sorts of capabilities as a

1071
00:43:40,800 --> 00:43:42,839
result of their design so there are some

1072
00:43:42,839 --> 00:43:44,640
designs that rely very heavily on

1073
00:43:44,640 --> 00:43:46,619
something like privacy pass and others

1074
00:43:46,619 --> 00:43:50,579
that that rely on it somewhat less so

1075
00:43:50,579 --> 00:43:52,560
to be clear with the device attestation

1076
00:43:52,560 --> 00:43:55,020
and the ones here this is places where

1077
00:43:55,020 --> 00:43:57,240
privacy like technology has come up it's

1078
00:43:57,240 --> 00:43:58,800
not necessarily A Hard requirement or

1079
00:43:58,800 --> 00:44:01,319
even likely to happen for these but it's

1080
00:44:01,319 --> 00:44:02,940
places where we might want to look at

1081
00:44:02,940 --> 00:44:04,740
for future use cases or other extensions

1082
00:44:04,740 --> 00:44:07,680
that might be useful in the space

1083
00:44:07,680 --> 00:44:09,839
okay

1084
00:44:09,839 --> 00:44:11,819
cool all right so it sounds like there

1085
00:44:11,819 --> 00:44:13,619
are some dependencies between the the

1086
00:44:13,619 --> 00:44:16,800
two groups but right now there are is

1087
00:44:16,800 --> 00:44:18,780
there any any problems that we need to

1088
00:44:18,780 --> 00:44:21,960
address like with respect to

1089
00:44:21,960 --> 00:44:24,480
expectations of the w3c on work that

1090
00:44:24,480 --> 00:44:27,300
we're doing or vice versa

1091
00:44:27,300 --> 00:44:28,020
um

1092
00:44:28,020 --> 00:44:30,359
so yeah I think for a lot of these it's

1093
00:44:30,359 --> 00:44:32,040
still in the early stages so there's no

1094
00:44:32,040 --> 00:44:33,900
strong expectations

1095
00:44:33,900 --> 00:44:35,579
um I think depending on how the

1096
00:44:35,579 --> 00:44:37,260
standardization process and the input we

1097
00:44:37,260 --> 00:44:39,660
get in like the various CGS like some of

1098
00:44:39,660 --> 00:44:41,040
these things particularly the key

1099
00:44:41,040 --> 00:44:44,160
consistency might be useful to have some

1100
00:44:44,160 --> 00:44:46,560
baseline sorts of things in the ITF um I

1101
00:44:46,560 --> 00:44:48,720
think for most of these the we already

1102
00:44:48,720 --> 00:44:50,160
either have that through the rate

1103
00:44:50,160 --> 00:44:51,720
limiting draft or some of the other

1104
00:44:51,720 --> 00:44:54,599
items undergoing adoption but maybe good

1105
00:44:54,599 --> 00:44:57,660
future points to future work that once

1106
00:44:57,660 --> 00:45:02,480
that like gets to that state okay uh Ben

1107
00:45:03,240 --> 00:45:06,359
hey so it sounds like the work in the

1108
00:45:06,359 --> 00:45:09,420
w3c is really pretty nascent uh there's

1109
00:45:09,420 --> 00:45:12,839
no none of these proposals have uh have

1110
00:45:12,839 --> 00:45:15,119
actually moved into a working group

1111
00:45:15,119 --> 00:45:20,160
so uh what are the odds that by the time

1112
00:45:20,160 --> 00:45:22,579
uh By the time any of this work actually

1113
00:45:22,579 --> 00:45:25,440
is moved into a working group

1114
00:45:25,440 --> 00:45:27,420
um it'll turn out that the

1115
00:45:27,420 --> 00:45:29,760
specifications that we've written now

1116
00:45:29,760 --> 00:45:32,339
actually are not what's needed

1117
00:45:32,339 --> 00:45:35,099
and that it turns out that for example

1118
00:45:35,099 --> 00:45:37,560
what the working group wants is PMB

1119
00:45:37,560 --> 00:45:42,780
tokens or uh some other arrangement with

1120
00:45:42,780 --> 00:45:44,220
properties a little bit different from

1121
00:45:44,220 --> 00:45:46,859
what we're specifying

1122
00:45:46,859 --> 00:45:48,540
um I think that's one of the benefits at

1123
00:45:48,540 --> 00:45:50,339
least of the like the way the core

1124
00:45:50,339 --> 00:45:52,980
protocol models are structured like if

1125
00:45:52,980 --> 00:45:54,780
we need slightly different properties we

1126
00:45:54,780 --> 00:45:56,220
can come up with new token types and

1127
00:45:56,220 --> 00:45:58,500
work on standardizing those at least I

1128
00:45:58,500 --> 00:45:59,940
think the general issuance Redemption

1129
00:45:59,940 --> 00:46:02,460
format of the core protocols is like

1130
00:46:02,460 --> 00:46:04,680
pretty like in line with what we've seen

1131
00:46:04,680 --> 00:46:06,300
and I think it's mostly just going to be

1132
00:46:06,300 --> 00:46:08,520
a question of additional token types to

1133
00:46:08,520 --> 00:46:10,440
expose whatever features we need in the

1134
00:46:10,440 --> 00:46:12,000
space

1135
00:46:12,000 --> 00:46:15,020
okay thank you

1136
00:46:16,920 --> 00:46:19,579
Tommy

1137
00:46:19,859 --> 00:46:22,680
yeah um just to answer a little bit also

1138
00:46:22,680 --> 00:46:26,760
to Ben's question there

1139
00:46:26,760 --> 00:46:29,540
I think

1140
00:46:30,540 --> 00:46:32,660
um

1141
00:46:33,240 --> 00:46:37,440
the the benefit of how we ended up

1142
00:46:37,440 --> 00:46:41,460
designing the HTTP off scheme in privacy

1143
00:46:41,460 --> 00:46:44,599
pass means that you know it is usable

1144
00:46:44,599 --> 00:46:48,599
kind of by various websites without a

1145
00:46:48,599 --> 00:46:50,040
w3c

1146
00:46:50,040 --> 00:46:52,020
particular adoption or change to

1147
00:46:52,020 --> 00:46:54,180
JavaScript apis

1148
00:46:54,180 --> 00:46:57,000
um so you know people are able to deploy

1149
00:46:57,000 --> 00:46:59,700
it and use it independently so

1150
00:46:59,700 --> 00:47:00,480
um

1151
00:47:00,480 --> 00:47:03,660
like our w3c is not our only customer

1152
00:47:03,660 --> 00:47:05,940
directly right like people can benefit

1153
00:47:05,940 --> 00:47:08,160
from it independently

1154
00:47:08,160 --> 00:47:10,099
um I think there's also you know some

1155
00:47:10,099 --> 00:47:14,520
very minimal work that can be done to

1156
00:47:14,520 --> 00:47:18,119
like we're talking about you know can

1157
00:47:18,119 --> 00:47:20,579
uh you mark on like an iframe

1158
00:47:20,579 --> 00:47:22,319
specifically which iframes or third

1159
00:47:22,319 --> 00:47:24,660
parties are allowed to issue issue token

1160
00:47:24,660 --> 00:47:26,880
challenges or not and what the browsers

1161
00:47:26,880 --> 00:47:28,020
will accept

1162
00:47:28,020 --> 00:47:30,180
and that's something that you could do

1163
00:47:30,180 --> 00:47:34,260
very uh surgically and minimally within

1164
00:47:34,260 --> 00:47:37,020
w3c work that would integrate well with

1165
00:47:37,020 --> 00:47:38,400
what we're defining here in privacy pass

1166
00:47:38,400 --> 00:47:40,260
and then there are these other use cases

1167
00:47:40,260 --> 00:47:42,960
which may be able to use privacy passes

1168
00:47:42,960 --> 00:47:44,940
for defining it or may didn't may need a

1169
00:47:44,940 --> 00:47:47,780
new token type but I don't think it's um

1170
00:47:47,780 --> 00:47:50,220
invalidating the basic types I think the

1171
00:47:50,220 --> 00:47:52,260
basic types are still a good foundation

1172
00:47:52,260 --> 00:47:56,579
that will be used uh regardless of how

1173
00:47:56,579 --> 00:47:59,520
complex the adoption in w3c is on top of

1174
00:47:59,520 --> 00:48:01,700
them

1175
00:48:06,960 --> 00:48:08,520
okay

1176
00:48:08,520 --> 00:48:12,140
um any other comments or questions

1177
00:48:12,960 --> 00:48:15,380
Nick

1178
00:48:17,480 --> 00:48:21,119
yeah is there um is there documentation

1179
00:48:21,119 --> 00:48:24,000
or a specific proposal on the private

1180
00:48:24,000 --> 00:48:26,339
access tokens

1181
00:48:26,339 --> 00:48:27,540
um I

1182
00:48:27,540 --> 00:48:29,700
I personally wasn't aware that was using

1183
00:48:29,700 --> 00:48:31,920
uh rate limiting

1184
00:48:31,920 --> 00:48:34,680
um version of this and um I'm sure

1185
00:48:34,680 --> 00:48:36,119
that's my fault that just if there's

1186
00:48:36,119 --> 00:48:38,160
somewhere I could be reading that or if

1187
00:48:38,160 --> 00:48:39,240
that is likely to go through

1188
00:48:39,240 --> 00:48:42,660
standardization at w3c then um that

1189
00:48:42,660 --> 00:48:45,799
would be helpful thanks

1190
00:48:47,280 --> 00:48:49,920
Tommy maybe yeah I can respond to that

1191
00:48:49,920 --> 00:48:51,000
so

1192
00:48:51,000 --> 00:48:53,400
the the the private access token name is

1193
00:48:53,400 --> 00:48:54,780
just

1194
00:48:54,780 --> 00:48:58,500
um it's not a formal thing really um

1195
00:48:58,500 --> 00:49:00,119
it's what

1196
00:49:00,119 --> 00:49:02,339
when like apple talked about our tester

1197
00:49:02,339 --> 00:49:03,540
that's what we talked about at our

1198
00:49:03,540 --> 00:49:05,160
conference because that's what marketing

1199
00:49:05,160 --> 00:49:06,780
wanted to call it

1200
00:49:06,780 --> 00:49:08,099
um

1201
00:49:08,099 --> 00:49:12,660
really all that is is just the basic

1202
00:49:12,660 --> 00:49:14,880
uh publicly verifiable privacy pass

1203
00:49:14,880 --> 00:49:18,060
token and saying that

1204
00:49:18,060 --> 00:49:22,260
we support it and we also intend to

1205
00:49:22,260 --> 00:49:23,339
support

1206
00:49:23,339 --> 00:49:25,760
the type 3 and other

1207
00:49:25,760 --> 00:49:27,960
testers and platforms can support those

1208
00:49:27,960 --> 00:49:30,119
as well

1209
00:49:30,119 --> 00:49:33,599
um so I I think the parts on top that

1210
00:49:33,599 --> 00:49:36,540
this is referring to is

1211
00:49:36,540 --> 00:49:39,359
um you know do we have changes to fetch

1212
00:49:39,359 --> 00:49:42,359
or permissions policy

1213
00:49:42,359 --> 00:49:44,579
that really probably would they wouldn't

1214
00:49:44,579 --> 00:49:45,960
talk about private access sections they

1215
00:49:45,960 --> 00:49:48,420
would just talk about like uh privacy

1216
00:49:48,420 --> 00:49:49,380
pass

1217
00:49:49,380 --> 00:49:51,300
um or like the private token off the

1218
00:49:51,300 --> 00:49:53,280
scheme type essentially saying

1219
00:49:53,280 --> 00:49:57,480
what uh resources are allowed to

1220
00:49:57,480 --> 00:50:02,040
uh include the private token off scheme

1221
00:50:02,040 --> 00:50:02,880
challenge

1222
00:50:02,880 --> 00:50:04,980
and that's all they would amount to it's

1223
00:50:04,980 --> 00:50:06,960
just kind of giving boundaries on who

1224
00:50:06,960 --> 00:50:09,740
you accept these from

1225
00:50:10,680 --> 00:50:12,839
and is there a

1226
00:50:12,839 --> 00:50:14,280
is there a dependency or an

1227
00:50:14,280 --> 00:50:16,740
implementation of the newly adopted rate

1228
00:50:16,740 --> 00:50:20,300
limited tokens draft or is that a

1229
00:50:20,300 --> 00:50:23,099
not necessary for

1230
00:50:23,099 --> 00:50:23,760
um

1231
00:50:23,760 --> 00:50:28,079
it's it's a bit separate so the

1232
00:50:28,079 --> 00:50:31,560
like the type 2 is supported

1233
00:50:31,560 --> 00:50:35,160
you know in production for us

1234
00:50:35,160 --> 00:50:38,060
um with different issuers

1235
00:50:38,060 --> 00:50:42,000
we support kind of like uh beta testing

1236
00:50:42,000 --> 00:50:44,280
with the rate limited types but I don't

1237
00:50:44,280 --> 00:50:48,200
think the type actually directly impacts

1238
00:50:48,200 --> 00:50:51,300
what would be here in the like the

1239
00:50:51,300 --> 00:50:54,359
permissions policy for example in w3c

1240
00:50:54,359 --> 00:50:55,680
that would just say like are you allowed

1241
00:50:55,680 --> 00:50:58,740
to issue token requests in general

1242
00:50:58,740 --> 00:51:01,740
and then the actual challenge would

1243
00:51:01,740 --> 00:51:04,380
include within it the type and so if

1244
00:51:04,380 --> 00:51:06,359
there's Type 4 or type five you know who

1245
00:51:06,359 --> 00:51:08,880
whatever else comes out

1246
00:51:08,880 --> 00:51:10,940
um

1247
00:51:11,400 --> 00:51:13,559
I I view this more as just a way to

1248
00:51:13,559 --> 00:51:17,819
enable some uh communication about

1249
00:51:17,819 --> 00:51:19,940
privacy pass in general

1250
00:51:19,940 --> 00:51:22,500
at the

1251
00:51:22,500 --> 00:51:26,240
um like permissions policy layer

1252
00:51:28,319 --> 00:51:30,980
okay thanks

1253
00:51:36,780 --> 00:51:39,000
all right unless there's somebody else

1254
00:51:39,000 --> 00:51:40,680
who wants to join the queue

1255
00:51:40,680 --> 00:51:41,940
um

1256
00:51:41,940 --> 00:51:44,760
uh thank you Stephen that was a very

1257
00:51:44,760 --> 00:51:47,420
useful

1258
00:51:48,000 --> 00:51:52,740
all right next I think we want to

1259
00:51:52,740 --> 00:51:56,040
uh have kind of a chat on where privacy

1260
00:51:56,040 --> 00:51:58,680
pass is and where

1261
00:51:58,680 --> 00:52:01,740
uh we can you know what what sort of

1262
00:52:01,740 --> 00:52:04,819
next steps might be

1263
00:52:05,700 --> 00:52:08,339
were you able to share the deck yeah

1264
00:52:08,339 --> 00:52:10,940
there we go

1265
00:52:10,980 --> 00:52:12,839
so I think Ben will take us through some

1266
00:52:12,839 --> 00:52:15,140
of this

1267
00:52:18,000 --> 00:52:19,740
hi everybody

1268
00:52:19,740 --> 00:52:21,960
so uh we've got plenty of time left in

1269
00:52:21,960 --> 00:52:27,480
the session and uh that sometimes means

1270
00:52:27,480 --> 00:52:30,420
that we're running out of things to do I

1271
00:52:30,420 --> 00:52:31,740
don't know that that's true in this case

1272
00:52:31,740 --> 00:52:34,380
but I want to

1273
00:52:34,380 --> 00:52:37,619
ask the working group where they think

1274
00:52:37,619 --> 00:52:40,260
this group should be going so first uh

1275
00:52:40,260 --> 00:52:43,380
just to recap where we are right now

1276
00:52:43,380 --> 00:52:47,160
we have the architecture document that

1277
00:52:47,160 --> 00:52:49,619
has completed last call we're holding

1278
00:52:49,619 --> 00:52:52,140
that just so that the architecture and

1279
00:52:52,140 --> 00:52:54,720
issuance and auth documents can be

1280
00:52:54,720 --> 00:52:57,720
considered together in the post-working

1281
00:52:57,720 --> 00:53:00,078
group reviews

1282
00:53:00,300 --> 00:53:02,760
uh so we have the issuance and off

1283
00:53:02,760 --> 00:53:04,440
scheme documents and working for blast

1284
00:53:04,440 --> 00:53:07,680
call uh please do please do review and

1285
00:53:07,680 --> 00:53:09,900
and comment yeah if you're very familiar

1286
00:53:09,900 --> 00:53:12,180
with them then you can just tell us that

1287
00:53:12,180 --> 00:53:14,520
you think they're in good shape um but

1288
00:53:14,520 --> 00:53:17,780
please comment on the mailing list

1289
00:53:18,839 --> 00:53:21,420
uh we have the recently adopted adopted

1290
00:53:21,420 --> 00:53:24,960
key consistency informational draft uh

1291
00:53:24,960 --> 00:53:26,520
it seems like we don't have any major

1292
00:53:26,520 --> 00:53:28,260
changes in Flight there

1293
00:53:28,260 --> 00:53:31,040
we have the rate limits document which

1294
00:53:31,040 --> 00:53:34,559
uh has a lot of attention on it and

1295
00:53:34,559 --> 00:53:36,480
Tommy walked us through some of the

1296
00:53:36,480 --> 00:53:37,859
interesting things that are happening

1297
00:53:37,859 --> 00:53:40,760
there but it's making good progress

1298
00:53:40,760 --> 00:53:44,339
uh and I think the question is what else

1299
00:53:44,339 --> 00:53:46,380
do we want to work on

1300
00:53:46,380 --> 00:53:48,720
um you know is this are we essentially

1301
00:53:48,720 --> 00:53:51,359
wrapping up here or are there are there

1302
00:53:51,359 --> 00:53:53,400
other things that we want to do here uh

1303
00:53:53,400 --> 00:53:55,319
we had a draft in the past on

1304
00:53:55,319 --> 00:53:57,420
consolidation considerations

1305
00:53:57,420 --> 00:53:59,520
uh we've had a lot of discussion about

1306
00:53:59,520 --> 00:54:02,940
different token types and

1307
00:54:02,940 --> 00:54:07,680
uh and the the chairs recently were got

1308
00:54:07,680 --> 00:54:10,740
a request for a new batch token issuance

1309
00:54:10,740 --> 00:54:12,180
flow

1310
00:54:12,180 --> 00:54:14,880
so that's uh something that people might

1311
00:54:14,880 --> 00:54:15,960
want to work on

1312
00:54:15,960 --> 00:54:18,720
there's uh

1313
00:54:18,720 --> 00:54:22,980
I have a draft on a specific consistency

1314
00:54:22,980 --> 00:54:25,460
protocol

1315
00:54:25,800 --> 00:54:27,300
um

1316
00:54:27,300 --> 00:54:31,619
and there's a there's a an endless

1317
00:54:31,619 --> 00:54:34,980
number of of possible topics but I want

1318
00:54:34,980 --> 00:54:37,559
to know what the working group thinks is

1319
00:54:37,559 --> 00:54:39,480
interesting and also just to remind

1320
00:54:39,480 --> 00:54:41,579
people we have a charter and so if you

1321
00:54:41,579 --> 00:54:44,160
want to talk about the progress we've

1322
00:54:44,160 --> 00:54:45,780
made we can compare it against the

1323
00:54:45,780 --> 00:54:48,059
charter

1324
00:54:48,059 --> 00:54:50,599
Martin

1325
00:54:51,380 --> 00:54:55,440
yeah I think on the consistency side of

1326
00:54:55,440 --> 00:54:57,540
things it it seems to me like there's a

1327
00:54:57,540 --> 00:55:00,119
very strong need to have something uh in

1328
00:55:00,119 --> 00:55:03,000
this space concretely in addition to

1329
00:55:03,000 --> 00:55:04,440
having sort of just a general guide of

1330
00:55:04,440 --> 00:55:06,780
what what consistency is and and what

1331
00:55:06,780 --> 00:55:08,579
it's good for and and why it's important

1332
00:55:08,579 --> 00:55:10,920
I think there's a concrete need in some

1333
00:55:10,920 --> 00:55:12,900
of these deployments to have a strong

1334
00:55:12,900 --> 00:55:16,859
consistency protocol or system in place

1335
00:55:16,859 --> 00:55:19,140
in order to provide the sort of privacy

1336
00:55:19,140 --> 00:55:21,119
guarantees that we're hoping to achieve

1337
00:55:21,119 --> 00:55:24,059
uh some of the proposals that I've seen

1338
00:55:24,059 --> 00:55:25,680
really just don't don't work without

1339
00:55:25,680 --> 00:55:26,940
something like that

1340
00:55:26,940 --> 00:55:29,220
there has been some more discussion this

1341
00:55:29,220 --> 00:55:31,020
week about the exact shape of

1342
00:55:31,020 --> 00:55:33,000
consistency protocols I think Richard

1343
00:55:33,000 --> 00:55:34,880
Barnes had some interesting ideas about

1344
00:55:34,880 --> 00:55:38,660
applying something that's basically uh

1345
00:55:38,660 --> 00:55:41,400
how did he phrase that something like CT

1346
00:55:41,400 --> 00:55:44,099
but without all of the warts

1347
00:55:44,099 --> 00:55:45,839
um so

1348
00:55:45,839 --> 00:55:48,119
having that work happen here would be I

1349
00:55:48,119 --> 00:55:50,220
think a good thing this is

1350
00:55:50,220 --> 00:55:52,020
For Better or Worse the the group that

1351
00:55:52,020 --> 00:55:53,460
has taken on that sort of work it's I

1352
00:55:53,460 --> 00:55:55,920
think it's integral to what we're doing

1353
00:55:55,920 --> 00:55:57,059
here

1354
00:55:57,059 --> 00:55:59,040
but um at the same time I also think

1355
00:55:59,040 --> 00:56:01,440
that that discussion is fairly nascent

1356
00:56:01,440 --> 00:56:03,720
and I don't know that we're really in a

1357
00:56:03,720 --> 00:56:05,579
position to make some strong decisions

1358
00:56:05,579 --> 00:56:07,980
yet about the exact nature of those

1359
00:56:07,980 --> 00:56:09,420
protocols

1360
00:56:09,420 --> 00:56:10,920
despite the fact that people might want

1361
00:56:10,920 --> 00:56:14,599
to deploy things that depend on them

1362
00:56:15,660 --> 00:56:16,859
thanks

1363
00:56:16,859 --> 00:56:19,319
uh I see Stephen in the queue I'd like

1364
00:56:19,319 --> 00:56:21,540
uh in addition to whatever you're

1365
00:56:21,540 --> 00:56:24,059
planning on saying I'd appreciate if you

1366
00:56:24,059 --> 00:56:27,660
could share with us your um your sense

1367
00:56:27,660 --> 00:56:30,420
of consistency in the w3c context you

1368
00:56:30,420 --> 00:56:32,700
mentioned that there is already in a

1369
00:56:32,700 --> 00:56:34,700
sense a sort of proposed or draft

1370
00:56:34,700 --> 00:56:37,740
consistency solution there

1371
00:56:37,740 --> 00:56:40,380
yeah so I think the way we're doing

1372
00:56:40,380 --> 00:56:43,079
consistency like in w3c is very like

1373
00:56:43,079 --> 00:56:44,700
flying by the seat of our pants and it

1374
00:56:44,700 --> 00:56:46,079
would be nice if we have something more

1375
00:56:46,079 --> 00:56:48,300
standardized that like isn't just each

1376
00:56:48,300 --> 00:56:50,819
UA is going to do their own like form of

1377
00:56:50,819 --> 00:56:52,440
doing key consistency

1378
00:56:52,440 --> 00:56:54,540
um I think Chris's draft is a good start

1379
00:56:54,540 --> 00:56:55,920
but I think we want something more

1380
00:56:55,920 --> 00:56:57,839
structured coming out of that either as

1381
00:56:57,839 --> 00:56:59,339
part of that draft or as additional

1382
00:56:59,339 --> 00:57:01,680
drafts

1383
00:57:01,680 --> 00:57:03,240
and then to my point I was just going to

1384
00:57:03,240 --> 00:57:04,859
mention that like as an additional token

1385
00:57:04,859 --> 00:57:07,020
type I think it's potentially like there

1386
00:57:07,020 --> 00:57:08,819
might be some potential interesting

1387
00:57:08,819 --> 00:57:11,700
stuff coming out of the zkp solution to

1388
00:57:11,700 --> 00:57:15,059
uh issue six from Tommy's proposal and

1389
00:57:15,059 --> 00:57:17,700
it might be worth having folks talk a

1390
00:57:17,700 --> 00:57:18,780
little bit more about that and see if

1391
00:57:18,780 --> 00:57:20,460
that's something of interest to pick up

1392
00:57:20,460 --> 00:57:22,680
and whether that introduces new

1393
00:57:22,680 --> 00:57:25,759
interesting work

1394
00:57:26,880 --> 00:57:28,200
thanks

1395
00:57:28,200 --> 00:57:30,359
you know another thing I heard mentioned

1396
00:57:30,359 --> 00:57:33,420
in this meeting or alluded to is a

1397
00:57:33,420 --> 00:57:35,099
formal verification

1398
00:57:35,099 --> 00:57:37,140
to my knowledge there's no formal

1399
00:57:37,140 --> 00:57:41,000
verification of the rather complicated

1400
00:57:41,000 --> 00:57:43,740
cryptographic Arrangements that we have

1401
00:57:43,740 --> 00:57:46,260
been specifying I wonder if anybody

1402
00:57:46,260 --> 00:57:49,440
would be interested in uh and working on

1403
00:57:49,440 --> 00:57:51,619
that

1404
00:57:52,500 --> 00:57:54,540
Tommy

1405
00:57:54,540 --> 00:57:57,500
um I'm not the best person to talk about

1406
00:57:57,500 --> 00:57:59,940
Chris Wood was driving more of it I know

1407
00:57:59,940 --> 00:58:01,619
Nikita's here but

1408
00:58:01,619 --> 00:58:03,900
I I think for the basic types as well as

1409
00:58:03,900 --> 00:58:05,760
very limited types they've had formal

1410
00:58:05,760 --> 00:58:07,260
verification

1411
00:58:07,260 --> 00:58:10,220
oh that's great

1412
00:58:10,500 --> 00:58:14,880
which is how the issue six came up

1413
00:58:14,880 --> 00:58:18,420
okay Nikita

1414
00:58:19,619 --> 00:58:21,900
yeah I just wanted to uh maybe I could

1415
00:58:21,900 --> 00:58:23,880
say with more is that there is a formal

1416
00:58:23,880 --> 00:58:28,920
verification of the current protocol in

1417
00:58:28,920 --> 00:58:34,020
uh using proverif uh and other than this

1418
00:58:34,020 --> 00:58:37,380
unlinkability issue it shows uh about

1419
00:58:37,380 --> 00:58:39,420
how we discussed

1420
00:58:39,420 --> 00:58:43,799
um it shows the security properties and

1421
00:58:43,799 --> 00:58:46,500
um I think there will be a write-up of

1422
00:58:46,500 --> 00:58:50,760
it in the next month or two that could

1423
00:58:50,760 --> 00:58:53,299
be made public

1424
00:58:55,260 --> 00:58:58,040
uh thanks

1425
00:59:01,799 --> 00:59:04,380
Phillip

1426
00:59:04,380 --> 00:59:06,359
on the topic of like future work and

1427
00:59:06,359 --> 00:59:09,180
potential concerns right now when an

1428
00:59:09,180 --> 00:59:12,359
attestation mechanism is compromised any

1429
00:59:12,359 --> 00:59:14,280
abuse that arises from that compromise

1430
00:59:14,280 --> 00:59:17,220
will be felt by the relying parties but

1431
00:59:17,220 --> 00:59:19,140
the attester has no way of narrowing in

1432
00:59:19,140 --> 00:59:21,720
on which devices are compromised and

1433
00:59:21,720 --> 00:59:24,059
should be ignored or debugged and

1434
00:59:24,059 --> 00:59:25,260
obviously that's intention with the

1435
00:59:25,260 --> 00:59:26,579
blinding property

1436
00:59:26,579 --> 00:59:28,859
it's also unclear how the issuers can

1437
00:59:28,859 --> 00:59:31,140
choose the testers and how relying

1438
00:59:31,140 --> 00:59:33,480
parties assess the relative strength of

1439
00:59:33,480 --> 00:59:35,640
these testers and issuers and some of

1440
00:59:35,640 --> 00:59:37,319
that might come to Bear an application

1441
00:59:37,319 --> 00:59:40,440
over time I'm also new to this group but

1442
00:59:40,440 --> 00:59:42,000
I'm kind of I'm very curious to see how

1443
00:59:42,000 --> 00:59:44,339
that will unfold over over the passage

1444
00:59:44,339 --> 00:59:46,640
of time

1445
00:59:48,359 --> 00:59:51,900
thanks uh you know one thing that that

1446
00:59:51,900 --> 00:59:55,380
this reminds me of is uh thanks Steven

1447
00:59:55,380 --> 00:59:59,760
for the overview of the w3c side I think

1448
00:59:59,760 --> 01:00:02,339
it would be potentially helpful if we

1449
01:00:02,339 --> 01:00:05,700
had a draft here that laid out in a

1450
01:00:05,700 --> 01:00:08,280
sense one level above architecture not

1451
01:00:08,280 --> 01:00:10,200
just how the Privacy pass system works

1452
01:00:10,200 --> 01:00:13,680
but how uh how it's actually used or how

1453
01:00:13,680 --> 01:00:16,200
some different ways that we expect it to

1454
01:00:16,200 --> 01:00:17,099
be used

1455
01:00:17,099 --> 01:00:20,160
uh that allow us to think through some

1456
01:00:20,160 --> 01:00:23,819
of the details like you know Canna can

1457
01:00:23,819 --> 01:00:27,020
one origin uh drain your entire

1458
01:00:27,020 --> 01:00:30,480
collection of of privacy pass tokens or

1459
01:00:30,480 --> 01:00:32,400
you know are we expecting that there's

1460
01:00:32,400 --> 01:00:35,220
some upper layer defense against that

1461
01:00:35,220 --> 01:00:37,079
and also walking through some of the

1462
01:00:37,079 --> 01:00:40,260
difficulties that in those models uh I

1463
01:00:40,260 --> 01:00:42,480
would love to see an informational on

1464
01:00:42,480 --> 01:00:44,400
something like that if if anybody's

1465
01:00:44,400 --> 01:00:46,819
interested

1466
01:00:48,240 --> 01:00:50,460
Richard

1467
01:00:50,460 --> 01:00:53,520
yeah so it says uh Martin mentioned my

1468
01:00:53,520 --> 01:00:56,460
name what we had I thought I might recap

1469
01:00:56,460 --> 01:00:58,260
some of the discussion that we had in oi

1470
01:00:58,260 --> 01:01:00,480
for folks who weren't there so I

1471
01:01:00,480 --> 01:01:02,760
obviously has a similar key consistency

1472
01:01:02,760 --> 01:01:05,220
challenge to privacy passes so there's

1473
01:01:05,220 --> 01:01:07,260
some discussion about

1474
01:01:07,260 --> 01:01:09,960
um whether to do uh consistency work

1475
01:01:09,960 --> 01:01:12,599
there as well and presented his subject

1476
01:01:12,599 --> 01:01:14,220
proposal

1477
01:01:14,220 --> 01:01:15,240
um

1478
01:01:15,240 --> 01:01:17,339
in that discussion it came up that

1479
01:01:17,339 --> 01:01:18,900
there's actually a slightly more General

1480
01:01:18,900 --> 01:01:21,119
consistency property that one might like

1481
01:01:21,119 --> 01:01:23,700
for HTTP resources

1482
01:01:23,700 --> 01:01:25,680
um you know things like

1483
01:01:25,680 --> 01:01:28,200
some applications might be interested in

1484
01:01:28,200 --> 01:01:30,420
binary transparency like guarantees that

1485
01:01:30,420 --> 01:01:32,040
you're getting the same you know web

1486
01:01:32,040 --> 01:01:35,640
resources that other folks are getting

1487
01:01:35,640 --> 01:01:38,880
um so it's possible this consistency

1488
01:01:38,880 --> 01:01:40,200
property might be a little bit more

1489
01:01:40,200 --> 01:01:41,099
General

1490
01:01:41,099 --> 01:01:43,200
um the the conclusion that discussion in

1491
01:01:43,200 --> 01:01:46,500
Ohio was that you know if uh consistency

1492
01:01:46,500 --> 01:01:48,540
work is going to be done you know

1493
01:01:48,540 --> 01:01:52,559
privacy pass is you know a an instance

1494
01:01:52,559 --> 01:01:54,000
where there's clearly a need for this

1495
01:01:54,000 --> 01:01:56,220
it's probably the most acute need for

1496
01:01:56,220 --> 01:01:58,200
these consistency guarantees and so this

1497
01:01:58,200 --> 01:02:01,799
would be a a good place to work on it um

1498
01:02:01,799 --> 01:02:04,200
but it may be their Solutions out there

1499
01:02:04,200 --> 01:02:05,460
a little bit are a little more General

1500
01:02:05,460 --> 01:02:06,780
so

1501
01:02:06,780 --> 01:02:08,339
um I don't know if we dive directly into

1502
01:02:08,339 --> 01:02:10,559
the work here or maybe we run some stuff

1503
01:02:10,559 --> 01:02:12,059
through sick dispatch but yeah I think

1504
01:02:12,059 --> 01:02:15,000
it's a doing doing a little bit more uh

1505
01:02:15,000 --> 01:02:16,619
consistency stuff here is a sensible

1506
01:02:16,619 --> 01:02:18,920
idea

1507
01:02:30,359 --> 01:02:31,920
okay

1508
01:02:31,920 --> 01:02:33,599
uh

1509
01:02:33,599 --> 01:02:39,540
I I hope that you've been inspired to uh

1510
01:02:39,540 --> 01:02:41,339
to contribute more interesting work to

1511
01:02:41,339 --> 01:02:43,140
the working group if you're working on

1512
01:02:43,140 --> 01:02:46,799
formal analysis it would be great to uh

1513
01:02:46,799 --> 01:02:49,440
to maybe see a seize the results of that

1514
01:02:49,440 --> 01:02:52,460
at the next session

1515
01:02:52,500 --> 01:02:54,780
and uh

1516
01:02:54,780 --> 01:02:57,780
I'll turn it over to

1517
01:02:57,780 --> 01:02:59,760
to Joe

1518
01:02:59,760 --> 01:03:02,819
for uh for closing

1519
01:03:02,819 --> 01:03:06,240
yeah I think that uh comes to the end of

1520
01:03:06,240 --> 01:03:08,160
our regularly scheduled agenda if

1521
01:03:08,160 --> 01:03:09,839
there's anybody who has any additional

1522
01:03:09,839 --> 01:03:11,040
topics

1523
01:03:11,040 --> 01:03:13,380
uh we can bring those up now and if not

1524
01:03:13,380 --> 01:03:16,500
we can adjourn till next meeting

1525
01:03:16,500 --> 01:03:18,559
um

1526
01:03:19,140 --> 01:03:21,720
so thank you all for coming and I hope

1527
01:03:21,720 --> 01:03:24,540
you have safe travels back to where we

1528
01:03:24,540 --> 01:03:27,079
are going

1529
01:03:48,000 --> 01:03:50,180
foreign

1530
01:04:13,440 --> 01:04:16,579
take it easy Sam

1531
01:04:47,359 --> 01:04:50,420
thank you

