1
00:00:12,080 --> 00:00:15,080
thank you

2
00:00:15,780 --> 00:00:17,780
um

3
00:01:01,739 --> 00:01:03,739
um

4
00:01:08,580 --> 00:01:11,580
Jared

5
00:01:12,000 --> 00:01:14,820
you're leaving us where are you going

6
00:01:14,820 --> 00:01:18,360
are you where are you heading

7
00:01:18,360 --> 00:01:21,020
sit down

8
00:01:45,840 --> 00:01:48,079
foreign

9
00:01:51,979 --> 00:01:54,060
we're going to be starting in a minute

10
00:01:54,060 --> 00:01:56,520
or two so if people can find their

11
00:01:56,520 --> 00:01:59,159
chairs and sit down and stop shouting in

12
00:01:59,159 --> 00:02:02,720
the back of the room that would be cool

13
00:02:04,380 --> 00:02:07,380
yay

14
00:02:18,800 --> 00:02:21,800
so hello everyone

15
00:02:21,800 --> 00:02:25,739
welcome to iepg let me stop my laptop

16
00:02:25,739 --> 00:02:27,000
from making noise because otherwise

17
00:02:27,000 --> 00:02:28,319
you'll get feedback

18
00:02:28,319 --> 00:02:29,700
so

19
00:02:29,700 --> 00:02:33,239
hi everyone once again welcome this is

20
00:02:33,239 --> 00:02:37,020
the iepg meeting at ietf 115

21
00:02:37,020 --> 00:02:39,959
and apparently I found a slide Deck with

22
00:02:39,959 --> 00:02:41,459
themes and stuff so I got a little

23
00:02:41,459 --> 00:02:43,140
carried away with Blinky lights and

24
00:02:43,140 --> 00:02:44,160
pictures

25
00:02:44,160 --> 00:02:46,319
and pictures of palm trees

26
00:02:46,319 --> 00:02:50,340
so the iepg is an informal meeting that

27
00:02:50,340 --> 00:02:52,440
happens before the ietf officially

28
00:02:52,440 --> 00:02:54,180
starts

29
00:02:54,180 --> 00:02:55,980
um however we are still going to do

30
00:02:55,980 --> 00:02:58,200
things like require masks Etc because

31
00:02:58,200 --> 00:03:02,340
it's in a ietf space and also that just

32
00:03:02,340 --> 00:03:05,400
seems like a reasonable thing to do

33
00:03:05,400 --> 00:03:08,400
um we do have somebody here from wide

34
00:03:08,400 --> 00:03:11,280
who is going to be taking pictures and

35
00:03:11,280 --> 00:03:13,159
filming the

36
00:03:13,159 --> 00:03:17,580
ietf meeting and iepg meeting unless

37
00:03:17,580 --> 00:03:20,099
anybody objects does anybody strongly

38
00:03:20,099 --> 00:03:22,260
object to

39
00:03:22,260 --> 00:03:24,420
pictures

40
00:03:24,420 --> 00:03:27,840
great I did not think so

41
00:03:27,840 --> 00:03:31,680
um Chris Morrow is the other iepg sort

42
00:03:31,680 --> 00:03:33,120
of chair type person

43
00:03:33,120 --> 00:03:35,280
but I don't think he's online so I'm

44
00:03:35,280 --> 00:03:37,140
going to be running all of the slides

45
00:03:37,140 --> 00:03:38,159
Etc

46
00:03:38,159 --> 00:03:41,879
this is the first meet Echo session of

47
00:03:41,879 --> 00:03:44,640
the sort of meeting type thing so

48
00:03:44,640 --> 00:03:46,680
hopefully everything works fine if we

49
00:03:46,680 --> 00:03:48,659
have any technical problems you know

50
00:03:48,659 --> 00:03:51,980
just remember it's the first one

51
00:03:52,379 --> 00:03:55,440
um this is the agenda

52
00:03:55,440 --> 00:03:57,480
this time we have a lot of discussions

53
00:03:57,480 --> 00:04:01,620
on eh measurement and things like that

54
00:04:01,620 --> 00:04:04,200
normally we have a lot of DNS and Tiny

55
00:04:04,200 --> 00:04:07,319
bits of bgp this time it's eh all day

56
00:04:07,319 --> 00:04:09,599
every day other than a little bit of

57
00:04:09,599 --> 00:04:11,280
Yang and

58
00:04:11,280 --> 00:04:14,159
also luckily some dodock measurement

59
00:04:14,159 --> 00:04:16,918
I have split things up somewhat so that

60
00:04:16,918 --> 00:04:20,279
we have some eh stuff and then a

61
00:04:20,279 --> 00:04:21,540
different discussion and then some more

62
00:04:21,540 --> 00:04:22,860
eh stuff

63
00:04:22,860 --> 00:04:27,060
and then dscp and then go Dot does

64
00:04:27,060 --> 00:04:29,820
anybody have any agenda bashing

65
00:04:29,820 --> 00:04:32,340
or

66
00:04:32,340 --> 00:04:34,380
anything else that they strongly care

67
00:04:34,380 --> 00:04:37,919
about nope alrighty I believe that the

68
00:04:37,919 --> 00:04:40,020
Deep dive into eh is actually split into

69
00:04:40,020 --> 00:04:42,540
two presentations I don't know who's

70
00:04:42,540 --> 00:04:44,880
actually presenting the first one is

71
00:04:44,880 --> 00:04:47,520
that great ah the only okay did not see

72
00:04:47,520 --> 00:04:48,960
you in the back there

73
00:04:48,960 --> 00:04:52,580
so I will bring up your slide deck

74
00:04:52,580 --> 00:04:55,040
unfortunately the little clicker thing

75
00:04:55,040 --> 00:04:57,740
does not do

76
00:04:57,740 --> 00:05:00,240
slide changing so you're going to have

77
00:05:00,240 --> 00:05:02,220
to say next or

78
00:05:02,220 --> 00:05:04,560
this is the right deck right or you can

79
00:05:04,560 --> 00:05:07,259
just push the right button on my

80
00:05:07,259 --> 00:05:09,060
keyboard whichever you would prefer I'll

81
00:05:09,060 --> 00:05:11,400
just say that okay great that'll be fine

82
00:05:11,400 --> 00:05:15,600
okay so hi I'm nalini Elkins

83
00:05:15,600 --> 00:05:18,480
uh microphones

84
00:05:18,480 --> 00:05:21,360
[Music]

85
00:05:21,360 --> 00:05:24,240
he's got a funny like speaker right

86
00:05:24,240 --> 00:05:27,000
who is that

87
00:05:27,000 --> 00:05:29,300
so starting over

88
00:05:29,300 --> 00:05:33,479
hi I'm Delaney oh I'm better all right

89
00:05:33,479 --> 00:05:37,800
okay so I'm Delaney Elkins and um and um

90
00:05:37,800 --> 00:05:40,860
we are doing some Diagnostics and

91
00:05:40,860 --> 00:05:42,660
troubleshooting for extension headers

92
00:05:42,660 --> 00:05:45,600
and I will show you some interim results

93
00:05:45,600 --> 00:05:48,360
we have quite a few people uh working

94
00:05:48,360 --> 00:05:50,160
with us uh

95
00:05:50,160 --> 00:05:52,979
um mostly from non-profits here in the

96
00:05:52,979 --> 00:05:55,860
United States uh and India as well as

97
00:05:55,860 --> 00:05:59,240
nitk suretical one of our fine Indian

98
00:05:59,240 --> 00:06:03,720
technical universities okay next please

99
00:06:03,720 --> 00:06:07,560
so this is has been a controversy for

100
00:06:07,560 --> 00:06:09,479
quite a long time I'm going to go

101
00:06:09,479 --> 00:06:11,340
through these first slides pretty

102
00:06:11,340 --> 00:06:14,759
quickly there's been some uh quite a few

103
00:06:14,759 --> 00:06:17,520
people saying uh extension headers don't

104
00:06:17,520 --> 00:06:18,960
work

105
00:06:18,960 --> 00:06:21,720
um so and but you know it's kind of

106
00:06:21,720 --> 00:06:24,360
interesting because our own personal

107
00:06:24,360 --> 00:06:28,380
experience with testing some of our

108
00:06:28,380 --> 00:06:31,800
headers which we want which is the

109
00:06:31,800 --> 00:06:34,380
performance and diagnostic metrics

110
00:06:34,380 --> 00:06:36,780
extension headers our anecdotal

111
00:06:36,780 --> 00:06:39,000
experience was that going across the

112
00:06:39,000 --> 00:06:41,340
internet it did work and so we were like

113
00:06:41,340 --> 00:06:44,100
my goodness I wonder what's going on so

114
00:06:44,100 --> 00:06:46,380
next please

115
00:06:46,380 --> 00:06:50,280
this is our extension header that we

116
00:06:50,280 --> 00:06:52,800
want to use for

117
00:06:52,800 --> 00:06:55,800
um embedding in each packet to get

118
00:06:55,800 --> 00:06:58,620
real-time performance and diagnostic

119
00:06:58,620 --> 00:07:03,740
data so let's go past that next piece

120
00:07:04,319 --> 00:07:07,500
um of the our proposal for encrypting

121
00:07:07,500 --> 00:07:10,979
this extension header was accepted into

122
00:07:10,979 --> 00:07:15,660
the IAB workshop on managing encrypted

123
00:07:15,660 --> 00:07:18,539
networks this is of course a very big

124
00:07:18,539 --> 00:07:21,599
problems what are we going to do as we

125
00:07:21,599 --> 00:07:23,759
do more and more encryption of networks

126
00:07:23,759 --> 00:07:27,599
and our proposed solution is our

127
00:07:27,599 --> 00:07:29,759
performance and diagnostic metrics

128
00:07:29,759 --> 00:07:32,220
extension header so this gave us

129
00:07:32,220 --> 00:07:35,400
additional impetus to try and make

130
00:07:35,400 --> 00:07:38,520
things work

131
00:07:38,520 --> 00:07:42,000
so so this is kind of what we did last

132
00:07:42,000 --> 00:07:44,819
time we set up various Standalone

133
00:07:44,819 --> 00:07:47,340
servers at various points on the

134
00:07:47,340 --> 00:07:49,199
internet and you'll see that becomes

135
00:07:49,199 --> 00:07:52,039
quite important that they are Standalone

136
00:07:52,039 --> 00:07:55,319
and they are with what I'll call a

137
00:07:55,319 --> 00:07:58,139
no-name server which means that you're

138
00:07:58,139 --> 00:08:00,419
you're fronting right onto the internet

139
00:08:00,419 --> 00:08:04,199
there's no intermediary between you and

140
00:08:04,199 --> 00:08:06,000
the server

141
00:08:06,000 --> 00:08:08,220
um and we in this particular test we had

142
00:08:08,220 --> 00:08:11,340
modified the kernel uh the FreeBSD

143
00:08:11,340 --> 00:08:13,380
kernel to go ahead and send tests and

144
00:08:13,380 --> 00:08:14,819
you can see

145
00:08:14,819 --> 00:08:18,000
um that we sent two locations throughout

146
00:08:18,000 --> 00:08:19,860
the world passing through quite a few

147
00:08:19,860 --> 00:08:21,900
Transit networks internet exchange

148
00:08:21,900 --> 00:08:24,539
points uh and so on and it all worked

149
00:08:24,539 --> 00:08:26,759
next please

150
00:08:26,759 --> 00:08:29,879
and so thank you guys uh so much for all

151
00:08:29,879 --> 00:08:32,580
your help next please

152
00:08:32,580 --> 00:08:35,580
and you can see here this is a I'll go

153
00:08:35,580 --> 00:08:37,679
through this quickly this is a large FTP

154
00:08:37,679 --> 00:08:39,958
and you can see it all worked this would

155
00:08:39,958 --> 00:08:42,240
happen to be Toronto to Mumbai next

156
00:08:42,240 --> 00:08:43,559
please

157
00:08:43,559 --> 00:08:47,040
and you can see that not only do we have

158
00:08:47,040 --> 00:08:49,080
um our PDM extension header our

159
00:08:49,080 --> 00:08:52,080
destination options but we also have uh

160
00:08:52,080 --> 00:08:55,380
fragment headers all being transmitted

161
00:08:55,380 --> 00:08:58,320
uh successfully next please

162
00:08:58,320 --> 00:09:00,720
so bottom line we have traces of

163
00:09:00,720 --> 00:09:02,339
everything everything's available to

164
00:09:02,339 --> 00:09:04,620
look at so that was that brings us now

165
00:09:04,620 --> 00:09:07,980
up to the current time next please

166
00:09:07,980 --> 00:09:10,620
so so then we're like all right let's

167
00:09:10,620 --> 00:09:12,660
see what's really going on see if we can

168
00:09:12,660 --> 00:09:16,980
figure out uh do EHS really work and if

169
00:09:16,980 --> 00:09:19,800
they don't then why why don't they work

170
00:09:19,800 --> 00:09:22,860
so this is what our Deep dive efforts

171
00:09:22,860 --> 00:09:25,440
are all about and we have two drafts in

172
00:09:25,440 --> 00:09:27,899
V6 Ops and they're troubleshooting

173
00:09:27,899 --> 00:09:30,899
techniques we want to see where is it

174
00:09:30,899 --> 00:09:33,300
blocked is it at the source is it the

175
00:09:33,300 --> 00:09:35,760
destination uh is it in the transit

176
00:09:35,760 --> 00:09:38,339
networks of course depending on where

177
00:09:38,339 --> 00:09:41,519
things are blocked the problem is easier

178
00:09:41,519 --> 00:09:44,100
and harder to fix

179
00:09:44,100 --> 00:09:46,320
um and then the other thing is it

180
00:09:46,320 --> 00:09:48,080
intentional because

181
00:09:48,080 --> 00:09:50,880
interestingly enough when we talk to

182
00:09:50,880 --> 00:09:52,380
some people

183
00:09:52,380 --> 00:09:55,320
um uh by that I mean some router vendors

184
00:09:55,320 --> 00:09:58,440
Some Cloud providers and some CDN

185
00:09:58,440 --> 00:10:00,959
providers they were actually quite

186
00:10:00,959 --> 00:10:04,500
surprised to see that extension headers

187
00:10:04,500 --> 00:10:07,560
uh that we had isolated to their domain

188
00:10:07,560 --> 00:10:09,600
of control all were actually being

189
00:10:09,600 --> 00:10:11,640
blocked they're like well we don't

190
00:10:11,640 --> 00:10:13,740
believe we're doing this let's see if we

191
00:10:13,740 --> 00:10:17,779
can find out so next please

192
00:10:22,220 --> 00:10:25,760
disconnect the session

193
00:10:37,080 --> 00:10:39,899
yep next yep

194
00:10:39,899 --> 00:10:41,519
um and so we have a side meeting

195
00:10:41,519 --> 00:10:43,380
scheduled where we'll have quite a bit

196
00:10:43,380 --> 00:10:45,180
of time to talk about our Standalone

197
00:10:45,180 --> 00:10:48,360
testing in this particular talk I'm in

198
00:10:48,360 --> 00:10:50,940
his focus on um content delivery

199
00:10:50,940 --> 00:10:52,440
Networks

200
00:10:52,440 --> 00:10:54,959
and the reason for that is many many

201
00:10:54,959 --> 00:11:00,240
high volume sites use cdns and and so

202
00:11:00,240 --> 00:11:03,360
when we did things like the top 1000

203
00:11:03,360 --> 00:11:05,220
Alexa sites

204
00:11:05,220 --> 00:11:07,440
um we could see that many of them were

205
00:11:07,440 --> 00:11:10,640
actually resolving to cdns as one would

206
00:11:10,640 --> 00:11:14,279
expect so next please

207
00:11:14,279 --> 00:11:17,839
so if we think about some topologies

208
00:11:17,839 --> 00:11:21,180
what we have been testing where we saw

209
00:11:21,180 --> 00:11:25,019
things work were the very first scenario

210
00:11:25,019 --> 00:11:27,839
which is very simple which is you have a

211
00:11:27,839 --> 00:11:31,560
client which is not necessarily behind a

212
00:11:31,560 --> 00:11:35,820
CDN obviously or behind any kind of

213
00:11:35,820 --> 00:11:38,279
cloud provider just stand alone going

214
00:11:38,279 --> 00:11:40,740
out onto the internet and the same for

215
00:11:40,740 --> 00:11:43,339
the server that's a very simple scenario

216
00:11:43,339 --> 00:11:47,760
of course not that many situations fall

217
00:11:47,760 --> 00:11:49,740
into that Arena but actually I mean

218
00:11:49,740 --> 00:11:52,800
quite a few do but many don't what many

219
00:11:52,800 --> 00:11:54,899
high volume sites have something like

220
00:11:54,899 --> 00:11:57,839
this you have your client wherever they

221
00:11:57,839 --> 00:12:00,600
are going out onto the internet then

222
00:12:00,600 --> 00:12:03,300
they'll actually end up resolving to a

223
00:12:03,300 --> 00:12:06,540
CDN cache server the closest one that's

224
00:12:06,540 --> 00:12:09,180
near to you and then you'll do something

225
00:12:09,180 --> 00:12:11,279
somehow you're going through the CDN

226
00:12:11,279 --> 00:12:14,220
Network and then end up at your original

227
00:12:14,220 --> 00:12:17,040
server which we will now call the origin

228
00:12:17,040 --> 00:12:20,940
server and in once you get into the CDN

229
00:12:20,940 --> 00:12:22,920
Network there may be very complex

230
00:12:22,920 --> 00:12:26,100
topologies but this is the simplest

231
00:12:26,100 --> 00:12:29,760
scenario within a CDN then of course if

232
00:12:29,760 --> 00:12:33,180
you're on a cloud provider uh that also

233
00:12:33,180 --> 00:12:36,420
becomes uh quite interesting we will

234
00:12:36,420 --> 00:12:39,720
talk about Cloud providers next time

235
00:12:39,720 --> 00:12:42,600
today we'll talk about CDN next please

236
00:12:42,600 --> 00:12:45,120
so this is the very simple scenario

237
00:12:45,120 --> 00:12:49,019
let's go to the next one so now we have

238
00:12:49,019 --> 00:12:52,079
that origin server our original server

239
00:12:52,079 --> 00:12:55,980
which we have enabled to send extension

240
00:12:55,980 --> 00:12:58,380
headers with every packet you will

241
00:12:58,380 --> 00:13:02,399
recall that when we had it not behind

242
00:13:02,399 --> 00:13:05,700
the CDN everything was working uh

243
00:13:05,700 --> 00:13:08,519
perfectly so what do you have to do to

244
00:13:08,519 --> 00:13:12,360
move it behind a CDN and recall the

245
00:13:12,360 --> 00:13:15,300
reason we said let's do this is because

246
00:13:15,300 --> 00:13:19,620
we could see that many high volume sites

247
00:13:19,620 --> 00:13:22,620
were behind the CDN so we thought to

248
00:13:22,620 --> 00:13:26,360
ourselves well why don't we see

249
00:13:26,360 --> 00:13:29,040
what packets they're getting through if

250
00:13:29,040 --> 00:13:32,160
we're on the other side of the CDN so we

251
00:13:32,160 --> 00:13:34,440
just got free trial

252
00:13:34,440 --> 00:13:36,200
um uh

253
00:13:36,200 --> 00:13:40,139
licenses or trial efforts with three

254
00:13:40,139 --> 00:13:42,540
different CDN providers and basically

255
00:13:42,540 --> 00:13:45,899
really what you have to do is first

256
00:13:45,899 --> 00:13:48,620
thing you have to give the CDN authority

257
00:13:48,620 --> 00:13:52,980
to resolve your domain so before for

258
00:13:52,980 --> 00:13:54,860
example if we had

259
00:13:54,860 --> 00:13:58,260
myehserver.com resolving to my original

260
00:13:58,260 --> 00:14:01,800
address of 2001 colon colon one that's

261
00:14:01,800 --> 00:14:04,440
the Standalone address it will now

262
00:14:04,440 --> 00:14:09,360
resolve to the nearest CDN cash server

263
00:14:09,360 --> 00:14:14,760
fine so I've given him uh DNS Authority

264
00:14:14,760 --> 00:14:17,100
um and and then let's see what happens

265
00:14:17,100 --> 00:14:19,980
okay so next piece

266
00:14:19,980 --> 00:14:23,160
so this is kind of what happens you're

267
00:14:23,160 --> 00:14:25,680
no longer going to your origin server

268
00:14:25,680 --> 00:14:27,839
directly you're you're being mediated

269
00:14:27,839 --> 00:14:30,360
okay next please

270
00:14:30,360 --> 00:14:31,980
so first thing

271
00:14:31,980 --> 00:14:36,899
is what exactly did that CDN resolve to

272
00:14:36,899 --> 00:14:39,240
and of course

273
00:14:39,240 --> 00:14:43,620
um we assumed it was the IPv6 address of

274
00:14:43,620 --> 00:14:46,320
our uh original server our original

275
00:14:46,320 --> 00:14:50,880
server has both a V4 and V6 address and

276
00:14:50,880 --> 00:14:53,220
so we said absolutely let's that's what

277
00:14:53,220 --> 00:14:55,560
we're thinking it's going to do and so

278
00:14:55,560 --> 00:14:57,420
we took a trace on both sides because

279
00:14:57,420 --> 00:14:59,880
remember I control both sides the client

280
00:14:59,880 --> 00:15:03,660
and the server Mike in in my case the

281
00:15:03,660 --> 00:15:08,399
client is also eh enabled so the client

282
00:15:08,399 --> 00:15:11,399
also sends an extension header with

283
00:15:11,399 --> 00:15:14,160
every packet next please

284
00:15:14,160 --> 00:15:17,880
so huzzah this is from the client trace

285
00:15:17,880 --> 00:15:21,899
and you can see that I'm sending IPv6

286
00:15:21,899 --> 00:15:25,800
data Grand and I put a column called

287
00:15:25,800 --> 00:15:29,339
packet sequence number this packet that

288
00:15:29,339 --> 00:15:33,300
comes from our extension header so yes

289
00:15:33,300 --> 00:15:36,560
our extension header is going through

290
00:15:36,560 --> 00:15:39,720
perfect because I got PSN this packet

291
00:15:39,720 --> 00:15:43,620
but ha but but it's only halfway I'm

292
00:15:43,620 --> 00:15:46,079
only seeing it half but I mean one good

293
00:15:46,079 --> 00:15:48,060
thing I mean the packet isn't being

294
00:15:48,060 --> 00:15:50,820
dropped I mean so I am seeing traffic

295
00:15:50,820 --> 00:15:54,420
but I'm only seeing eh one way so I'm

296
00:15:54,420 --> 00:15:57,060
like well goodness I'm really glad that

297
00:15:57,060 --> 00:15:59,339
I have access to the server on the other

298
00:15:59,339 --> 00:16:01,860
side and I can take a packet trace on

299
00:16:01,860 --> 00:16:05,160
the other side next please

300
00:16:05,160 --> 00:16:06,660
so

301
00:16:06,660 --> 00:16:09,060
let's go take a look at the server side

302
00:16:09,060 --> 00:16:10,860
next please

303
00:16:10,860 --> 00:16:13,740
and in the my first shock is

304
00:16:13,740 --> 00:16:16,980
what what have I done wrong I am only

305
00:16:16,980 --> 00:16:20,459
seeing ipv4 packets okay I must have

306
00:16:20,459 --> 00:16:23,279
done something wrong and so okay next

307
00:16:23,279 --> 00:16:24,300
please

308
00:16:24,300 --> 00:16:25,560
so then

309
00:16:25,560 --> 00:16:28,980
I go poke inside the packet and I'm like

310
00:16:28,980 --> 00:16:32,279
new new I did not do something wrong

311
00:16:32,279 --> 00:16:37,440
because in the HTTP I can see that it is

312
00:16:37,440 --> 00:16:42,060
forwarded from IPv6 also too I can see

313
00:16:42,060 --> 00:16:45,540
it is inside the CDN Network so I'm like

314
00:16:45,540 --> 00:16:50,339
Oh my Heavens so wait wait what just

315
00:16:50,339 --> 00:16:52,920
happened next please

316
00:16:52,920 --> 00:16:55,680
this took me actually several calls to

317
00:16:55,680 --> 00:16:58,620
some of the people on the team saying I

318
00:16:58,620 --> 00:17:00,779
must be going mad something has happened

319
00:17:00,779 --> 00:17:03,540
okay so then I actually started looking

320
00:17:03,540 --> 00:17:06,540
at the documentation my last

321
00:17:06,540 --> 00:17:08,880
um Resort of course is to read their

322
00:17:08,880 --> 00:17:14,220
documentation and what they said is well

323
00:17:14,220 --> 00:17:19,199
if you have a V4 and a V6 address on

324
00:17:19,199 --> 00:17:23,660
your origin server we will prefer V4

325
00:17:23,660 --> 00:17:28,860
unless actually you go to a non-free

326
00:17:28,860 --> 00:17:30,840
um a paid service I was doing free

327
00:17:30,840 --> 00:17:33,600
service and they want you to pay for the

328
00:17:33,600 --> 00:17:36,260
service and then we will change you

329
00:17:36,260 --> 00:17:43,080
to be able to flip and make IPv6 uh

330
00:17:43,080 --> 00:17:46,140
preferred and of course we are working

331
00:17:46,140 --> 00:17:48,840
for several non-profits and do not have

332
00:17:48,840 --> 00:17:51,480
huge amounts of money and so we said all

333
00:17:51,480 --> 00:17:53,280
right let's see if we can raise some

334
00:17:53,280 --> 00:17:57,840
money I'm just kidding so let's next

335
00:17:57,840 --> 00:18:00,240
I shall tell you when to laugh yeah I'm

336
00:18:00,240 --> 00:18:04,799
just kidding so but but the next email

337
00:18:04,799 --> 00:18:08,039
the next CDN provider that was even

338
00:18:08,039 --> 00:18:11,460
worse because in that conversation I

339
00:18:11,460 --> 00:18:14,100
actually first read the documentation I

340
00:18:14,100 --> 00:18:17,580
shocked myself and I could see that they

341
00:18:17,580 --> 00:18:20,760
did not have V6 to the origin server so

342
00:18:20,760 --> 00:18:23,160
I I had a conversation with their tech

343
00:18:23,160 --> 00:18:25,679
support and of course the tech support

344
00:18:25,679 --> 00:18:28,980
was like no no little lady you are wrong

345
00:18:28,980 --> 00:18:33,299
we do have support and I said okay I

346
00:18:33,299 --> 00:18:35,160
shall give send you some packet traces

347
00:18:35,160 --> 00:18:37,559
and then he they were they were gracious

348
00:18:37,559 --> 00:18:41,700
enough to respond back and say okay we

349
00:18:41,700 --> 00:18:44,280
read our own documentation we actually

350
00:18:44,280 --> 00:18:48,200
do not have IPv6 support to the origin

351
00:18:48,200 --> 00:18:52,260
and and in fact there's no current

352
00:18:52,260 --> 00:18:56,100
timetable for implementing I said my

353
00:18:56,100 --> 00:18:58,320
goodness thank you for your email fail

354
00:18:58,320 --> 00:19:00,960
next

355
00:19:00,960 --> 00:19:05,580
yes yes I had a very interesting uh few

356
00:19:05,580 --> 00:19:08,640
weeks here CDN provider number three

357
00:19:08,640 --> 00:19:12,240
they are very very cooperative and they

358
00:19:12,240 --> 00:19:14,580
are working very closely with us and

359
00:19:14,580 --> 00:19:18,000
we've already found one bug in their

360
00:19:18,000 --> 00:19:20,220
Network which they are fixing and will

361
00:19:20,220 --> 00:19:22,200
roll out through their Network

362
00:19:22,200 --> 00:19:22,919
um

363
00:19:22,919 --> 00:19:26,220
and um it now now the rest of it was

364
00:19:26,220 --> 00:19:29,520
actually we ourselves had a problem that

365
00:19:29,520 --> 00:19:31,980
there in some of these CDN providers

366
00:19:31,980 --> 00:19:35,039
there's so many different options for

367
00:19:35,039 --> 00:19:37,860
which kind of service to test we spend

368
00:19:37,860 --> 00:19:40,380
like three weeks um after I picked the

369
00:19:40,380 --> 00:19:41,660
wrong service

370
00:19:41,660 --> 00:19:45,419
but anyway so now we are actually behind

371
00:19:45,419 --> 00:19:48,120
uh the server and they indicate that V6

372
00:19:48,120 --> 00:19:50,940
to origin is supported but they do not

373
00:19:50,940 --> 00:19:53,880
believe that eh to origin is supported

374
00:19:53,880 --> 00:19:56,760
and um I am hoping that we will be able

375
00:19:56,760 --> 00:20:00,299
to work with them to support eh because

376
00:20:00,299 --> 00:20:05,760
we now have a uh as a VM image that we

377
00:20:05,760 --> 00:20:09,240
can um uh quickly give to be able to

378
00:20:09,240 --> 00:20:14,059
test eh next please

379
00:20:14,059 --> 00:20:17,880
so more breaking news as it happens we

380
00:20:17,880 --> 00:20:21,799
are now starting to test Cloud providers

381
00:20:21,799 --> 00:20:25,559
newsflash things are not looking Grand I

382
00:20:25,559 --> 00:20:27,840
will have more later so let me turn it

383
00:20:27,840 --> 00:20:30,059
over to Anna she's got a lot of stuff

384
00:20:30,059 --> 00:20:31,980
and then I guess we'll take questions at

385
00:20:31,980 --> 00:20:35,360
the end yep

386
00:20:40,679 --> 00:20:43,200
does every does anybody object to the

387
00:20:43,200 --> 00:20:45,600
speaker taking their Moscow we generally

388
00:20:45,600 --> 00:20:48,000
allow it great thank you and just a

389
00:20:48,000 --> 00:20:50,179
reminder

390
00:20:50,880 --> 00:20:52,980
yep yep just making sure nobody nobody

391
00:20:52,980 --> 00:20:55,200
objects but also as a reminder everybody

392
00:20:55,200 --> 00:20:57,059
in the audience should have their mic on

393
00:20:57,059 --> 00:21:00,480
I mean mascot testing with the mask on I

394
00:21:00,480 --> 00:21:01,740
think I'm just gonna keep it on

395
00:21:01,740 --> 00:21:04,520
whichever you like

396
00:21:05,280 --> 00:21:07,140
uh right so are you ready for more

397
00:21:07,140 --> 00:21:08,700
extension headers

398
00:21:08,700 --> 00:21:09,600
um

399
00:21:09,600 --> 00:21:11,640
I have a

400
00:21:11,640 --> 00:21:13,500
good I have a slightly different

401
00:21:13,500 --> 00:21:16,740
approach to that of of nalini which is

402
00:21:16,740 --> 00:21:18,919
rooted in white scale traversal

403
00:21:18,919 --> 00:21:21,840
measurements next slide please

404
00:21:21,840 --> 00:21:24,120
oh yeah and I'm on I'm at the University

405
00:21:24,120 --> 00:21:26,039
of Aberdeen

406
00:21:26,039 --> 00:21:27,720
um where I specialize in Internet

407
00:21:27,720 --> 00:21:30,179
measurement and I'm currently completing

408
00:21:30,179 --> 00:21:32,100
a PhD on that topic

409
00:21:32,100 --> 00:21:34,440
right so what I've tried to do with my

410
00:21:34,440 --> 00:21:36,600
extension header measurements is I've

411
00:21:36,600 --> 00:21:40,980
tried to focus on a wide set of diverse

412
00:21:40,980 --> 00:21:42,780
paths so

413
00:21:42,780 --> 00:21:44,760
in today I will be talking about what

414
00:21:44,760 --> 00:21:48,179
I've seen in Edge networks and I tried

415
00:21:48,179 --> 00:21:50,340
both sides of the edge I've tried to

416
00:21:50,340 --> 00:21:51,960
serve I've tried to test to the server

417
00:21:51,960 --> 00:21:54,419
Edge and for that I chose

418
00:21:54,419 --> 00:21:55,440
um

419
00:21:55,440 --> 00:21:58,020
DNS servers and web servers in the

420
00:21:58,020 --> 00:22:00,059
internet and I also try to look at the

421
00:22:00,059 --> 00:22:02,460
consumer Edge and for the consumer Edge

422
00:22:02,460 --> 00:22:03,620
I made

423
00:22:03,620 --> 00:22:05,940
use of existing measurement

424
00:22:05,940 --> 00:22:08,880
infrastructure provided by uh by right

425
00:22:08,880 --> 00:22:11,720
next slide please

426
00:22:12,480 --> 00:22:14,280
uh right so I'll talk about that first

427
00:22:14,280 --> 00:22:15,780
I'll talk about the ripe experiments

428
00:22:15,780 --> 00:22:18,000
first so what type is it is a

429
00:22:18,000 --> 00:22:20,520
distributed measurement platform it has

430
00:22:20,520 --> 00:22:24,840
about 5500 IPv6 enabled probes and by

431
00:22:24,840 --> 00:22:27,419
probes I'm in single board computers I

432
00:22:27,419 --> 00:22:28,980
guess it is not strictly consumer Edge

433
00:22:28,980 --> 00:22:32,159
because many of these computers will be

434
00:22:32,159 --> 00:22:35,340
um in uh in academic networks or in data

435
00:22:35,340 --> 00:22:37,140
centers but a lot of them are say on

436
00:22:37,140 --> 00:22:38,640
mobile networks and in people's houses

437
00:22:38,640 --> 00:22:42,600
like I have a ripe Atlas probe at home

438
00:22:42,600 --> 00:22:44,940
um so from all of these probes then I've

439
00:22:44,940 --> 00:22:47,820
sent packets uh ripe allows you to send

440
00:22:47,820 --> 00:22:49,440
packets with either destination options

441
00:22:49,440 --> 00:22:52,200
or hot by hop options and so I have sent

442
00:22:52,200 --> 00:22:54,299
packets to two locations but I've tried

443
00:22:54,299 --> 00:22:56,880
a range of different sizes as well

444
00:22:56,880 --> 00:22:58,620
and I've also tried two different

445
00:22:58,620 --> 00:23:02,100
protocols transfer protocols ripe allows

446
00:23:02,100 --> 00:23:05,159
you to do TCP UDP and icmp but I chose

447
00:23:05,159 --> 00:23:07,559
to focus on TCP and UDP

448
00:23:07,559 --> 00:23:10,820
uh next please

449
00:23:11,340 --> 00:23:13,799
so I mentioned that ripe is globally

450
00:23:13,799 --> 00:23:16,200
distributed this is a really cool image

451
00:23:16,200 --> 00:23:18,059
this is the actual map of the actual

452
00:23:18,059 --> 00:23:20,400
probes that participated in the

453
00:23:20,400 --> 00:23:22,559
measurement that I'm about to talk to

454
00:23:22,559 --> 00:23:24,600
you about so as you can see it's a very

455
00:23:24,600 --> 00:23:27,120
diverse set of paths

456
00:23:27,120 --> 00:23:29,959
next please

457
00:23:30,299 --> 00:23:33,360
uh so what we learn uh here's traversal

458
00:23:33,360 --> 00:23:35,640
at a glance

459
00:23:35,640 --> 00:23:37,620
if you send the smallest most

460
00:23:37,620 --> 00:23:39,780
inoffensive option that you possibly can

461
00:23:39,780 --> 00:23:43,320
and that is an 8 byte pad n option

462
00:23:43,320 --> 00:23:46,320
uh you get the following um you send it

463
00:23:46,320 --> 00:23:47,580
across the internet and all of these

464
00:23:47,580 --> 00:23:49,080
paths and you try and work out if it

465
00:23:49,080 --> 00:23:51,360
makes it to the destination

466
00:23:51,360 --> 00:23:53,220
well here's what you get

467
00:23:53,220 --> 00:23:55,380
in the table for Destination options you

468
00:23:55,380 --> 00:23:57,720
can see that if you send packets with

469
00:23:57,720 --> 00:23:59,760
extension headers with this extension

470
00:23:59,760 --> 00:24:01,919
header over UDP it gets to the

471
00:24:01,919 --> 00:24:04,320
destination 92 percent of the time

472
00:24:04,320 --> 00:24:07,260
if you change the transport and you uh

473
00:24:07,260 --> 00:24:11,760
use TCP this drops to 68 and then if you

474
00:24:11,760 --> 00:24:15,179
use hop by hop options uh it drops a lot

475
00:24:15,179 --> 00:24:18,659
more and you get 11 for UDP and nine

476
00:24:18,659 --> 00:24:21,299
percent for TCP but interestingly to see

477
00:24:21,299 --> 00:24:23,460
here is that the difference in transport

478
00:24:23,460 --> 00:24:27,000
protocol is constant across well both of

479
00:24:27,000 --> 00:24:29,700
these uh uh types of measurement next

480
00:24:29,700 --> 00:24:31,860
please

481
00:24:31,860 --> 00:24:33,960
so next what I try to do is I try to

482
00:24:33,960 --> 00:24:35,580
work out where the packets get dropped

483
00:24:35,580 --> 00:24:37,860
so I've done a hop analysis and an as

484
00:24:37,860 --> 00:24:40,919
analysis and this slide is about drops

485
00:24:40,919 --> 00:24:43,799
by the first hop on the path uh next

486
00:24:43,799 --> 00:24:45,240
please

487
00:24:45,240 --> 00:24:47,159
so by first pop on the path I actually

488
00:24:47,159 --> 00:24:49,080
mean the local router

489
00:24:49,080 --> 00:24:51,419
the actual Gateway of the ripe Atlas

490
00:24:51,419 --> 00:24:52,919
probe in question

491
00:24:52,919 --> 00:24:55,380
so what you can see here is a difference

492
00:24:55,380 --> 00:24:56,760
between hope I hop options and

493
00:24:56,760 --> 00:24:58,380
destination options for hope I hope

494
00:24:58,380 --> 00:25:01,260
options no wonder so many so so very few

495
00:25:01,260 --> 00:25:03,900
make it to the um to the destination

496
00:25:03,900 --> 00:25:06,299
because the first hop on the path just

497
00:25:06,299 --> 00:25:08,460
blocks 55 of them and that is

498
00:25:08,460 --> 00:25:10,140
irrespective of protocol it just seems

499
00:25:10,140 --> 00:25:12,720
to be like a blanket ban on hobby hop

500
00:25:12,720 --> 00:25:14,640
options

501
00:25:14,640 --> 00:25:16,980
uh for Destination options the story is

502
00:25:16,980 --> 00:25:19,260
uh is slightly different

503
00:25:19,260 --> 00:25:21,960
um not so many destination options sent

504
00:25:21,960 --> 00:25:23,520
over UDP get dropped at the first stop

505
00:25:23,520 --> 00:25:25,320
but quite a few

506
00:25:25,320 --> 00:25:29,039
um sent over TCP do and this helps

507
00:25:29,039 --> 00:25:31,200
contribute to the difference in protocol

508
00:25:31,200 --> 00:25:32,940
that you saw in the previous slide

509
00:25:32,940 --> 00:25:36,260
uh next please

510
00:25:36,600 --> 00:25:38,100
okay there's a lot happening in this

511
00:25:38,100 --> 00:25:41,520
slide but this is the per AES traversal

512
00:25:41,520 --> 00:25:45,900
um results basically uh it shows you at

513
00:25:45,900 --> 00:25:48,720
each as of the past on the path how many

514
00:25:48,720 --> 00:25:51,860
of these packets survive so you send 100

515
00:25:51,860 --> 00:25:55,500
of uh packets with different extension

516
00:25:55,500 --> 00:25:57,419
headers and for Destination options you

517
00:25:57,419 --> 00:25:59,159
can see that at the first day yes you're

518
00:25:59,159 --> 00:26:02,279
only 95 of them survive at the boundary

519
00:26:02,279 --> 00:26:04,260
between the first and the second as that

520
00:26:04,260 --> 00:26:05,880
is to say where I couldn't determine

521
00:26:05,880 --> 00:26:07,559
where the drop was made in the first or

522
00:26:07,559 --> 00:26:10,140
the second is you still get another two

523
00:26:10,140 --> 00:26:12,779
percent dropped and then I didn't

524
00:26:12,779 --> 00:26:14,940
continue adding Maurices because that's

525
00:26:14,940 --> 00:26:17,640
very close to the result at the very end

526
00:26:17,640 --> 00:26:21,500
destination which is 91 percent

527
00:26:22,559 --> 00:26:24,678
um

528
00:26:24,779 --> 00:26:26,940
what you can see here is that local list

529
00:26:26,940 --> 00:26:30,000
is responsible for most of the drops and

530
00:26:30,000 --> 00:26:31,679
this is to be expected because the local

531
00:26:31,679 --> 00:26:33,059
layers will see most of the packets

532
00:26:33,059 --> 00:26:34,799
after all

533
00:26:34,799 --> 00:26:35,940
um

534
00:26:35,940 --> 00:26:38,880
but I did not quite expect so many drops

535
00:26:38,880 --> 00:26:42,059
in the local yes especially uh not for

536
00:26:42,059 --> 00:26:44,460
hope I hope options but as you can see

537
00:26:44,460 --> 00:26:47,940
you get up to 75 percent

538
00:26:47,940 --> 00:26:50,340
of packets with extension had just been

539
00:26:50,340 --> 00:26:51,360
dropped there

540
00:26:51,360 --> 00:26:53,340
I include more asses in the table for

541
00:26:53,340 --> 00:26:55,320
hot by hop options because that's not

542
00:26:55,320 --> 00:26:58,320
the entire story so for example if you

543
00:26:58,320 --> 00:27:00,900
you lose 70 percent

544
00:27:00,900 --> 00:27:02,700
um of packets in the first as but then

545
00:27:02,700 --> 00:27:04,799
you lose another 10 at the as boundary

546
00:27:04,799 --> 00:27:06,779
then you lose another five percent in

547
00:27:06,779 --> 00:27:08,400
the second day yes and then you lose

548
00:27:08,400 --> 00:27:11,220
another uh three percent uh the next day

549
00:27:11,220 --> 00:27:13,020
is boundary and so on so basically the

550
00:27:13,020 --> 00:27:15,419
drops happen in multiple asses and not

551
00:27:15,419 --> 00:27:17,220
just the locals

552
00:27:17,220 --> 00:27:19,940
uh next please

553
00:27:19,940 --> 00:27:23,460
so then I decided to work out what would

554
00:27:23,460 --> 00:27:24,659
actually happen if the package did

555
00:27:24,659 --> 00:27:26,940
Traverse that first day yes where they

556
00:27:26,940 --> 00:27:29,760
get mostly blocked and the way I did

557
00:27:29,760 --> 00:27:32,600
this is

558
00:27:33,000 --> 00:27:35,279
well doing the same test but in Reverse

559
00:27:35,279 --> 00:27:38,220
so essentially I tested both directions

560
00:27:38,220 --> 00:27:40,320
because most of the rap battles probes

561
00:27:40,320 --> 00:27:42,299
have public IPv6 addresses

562
00:27:42,299 --> 00:27:44,580
so all I have to do is do a trace route

563
00:27:44,580 --> 00:27:46,679
from the previous destination back to

564
00:27:46,679 --> 00:27:49,140
the right battles probe and because I

565
00:27:49,140 --> 00:27:50,760
have a Control process I also send

566
00:27:50,760 --> 00:27:52,080
control

567
00:27:52,080 --> 00:27:54,539
I also do a control test

568
00:27:54,539 --> 00:27:56,220
um I can exclude things like asymmetric

569
00:27:56,220 --> 00:27:58,380
routing or like ecmp from this

570
00:27:58,380 --> 00:27:59,340
measurement

571
00:27:59,340 --> 00:28:01,200
and I can work out if the packet would

572
00:28:01,200 --> 00:28:04,380
make it back to the original s so next

573
00:28:04,380 --> 00:28:06,740
slide please

574
00:28:08,220 --> 00:28:10,260
so in the case of destination options

575
00:28:10,260 --> 00:28:13,380
actually uh it turns out packets do make

576
00:28:13,380 --> 00:28:16,140
it back to the original yes so

577
00:28:16,140 --> 00:28:18,179
um essentially if you would exclude

578
00:28:18,179 --> 00:28:19,860
drops that happen in that first day yes

579
00:28:19,860 --> 00:28:22,380
you could bump the traversal up on this

580
00:28:22,380 --> 00:28:24,900
set of paths to 96 and that's great

581
00:28:24,900 --> 00:28:27,840
uh for hope I hope options however

582
00:28:27,840 --> 00:28:29,279
you

583
00:28:29,279 --> 00:28:31,080
you don't get that many packets making

584
00:28:31,080 --> 00:28:32,460
it back to the first day yes because

585
00:28:32,460 --> 00:28:34,500
they seem to be getting dropped in

586
00:28:34,500 --> 00:28:36,600
transit

587
00:28:36,600 --> 00:28:38,240
um

588
00:28:38,240 --> 00:28:42,539
or another in other parts of the path

589
00:28:42,539 --> 00:28:44,340
so this is I guess is to be expected

590
00:28:44,340 --> 00:28:45,960
because we saw that the traversal for

591
00:28:45,960 --> 00:28:47,580
hope I hope options is overall a lot

592
00:28:47,580 --> 00:28:50,279
lower than for Destination options next

593
00:28:50,279 --> 00:28:52,460
please

594
00:28:53,580 --> 00:28:56,820
uh now this is the fun slide of

595
00:28:56,820 --> 00:28:58,440
I mentioned I sent packets with

596
00:28:58,440 --> 00:29:00,600
different sizes and I tried to work out

597
00:29:00,600 --> 00:29:02,159
whether there's a difference in between

598
00:29:02,159 --> 00:29:06,059
TCP and UDP with respect to how big a

599
00:29:06,059 --> 00:29:07,440
packet can you send

600
00:29:07,440 --> 00:29:09,960
and I found I found the difference

601
00:29:09,960 --> 00:29:11,159
um

602
00:29:11,159 --> 00:29:12,840
you can see that tcpc is the biggest

603
00:29:12,840 --> 00:29:15,120
drop in traversal at 48 bytes and UDP

604
00:29:15,120 --> 00:29:16,860
sees the biggest drop in Traverse of 56

605
00:29:16,860 --> 00:29:19,140
bytes so they are shifted by eight bytes

606
00:29:19,140 --> 00:29:20,640
presumably because the size of the

607
00:29:20,640 --> 00:29:23,580
transport header is is different this B

608
00:29:23,580 --> 00:29:25,559
is bigger than UDP

609
00:29:25,559 --> 00:29:27,720
uh but I think the key takeaway from

610
00:29:27,720 --> 00:29:30,240
this slide is that

611
00:29:30,240 --> 00:29:31,919
um if you send

612
00:29:31,919 --> 00:29:34,140
an extension header of 40 bytes in

613
00:29:34,140 --> 00:29:36,480
length or less then you have the highest

614
00:29:36,480 --> 00:29:39,899
chance of it going across at least at

615
00:29:39,899 --> 00:29:42,380
least Edge Networks

616
00:29:42,380 --> 00:29:45,740
uh next please

617
00:29:46,620 --> 00:29:48,480
um how are we for time

618
00:29:48,480 --> 00:29:49,679
okay

619
00:29:49,679 --> 00:29:51,419
okay cool

620
00:29:51,419 --> 00:29:53,340
so then I can I can speak a little bit

621
00:29:53,340 --> 00:29:54,840
about the server Edge

622
00:29:54,840 --> 00:29:56,820
and I think this is fun because it uh it

623
00:29:56,820 --> 00:29:59,580
ties in with what nalini just presented

624
00:29:59,580 --> 00:30:00,480
um

625
00:30:00,480 --> 00:30:03,659
so what uh the target so this is an

626
00:30:03,659 --> 00:30:05,100
entirely different experiment right it's

627
00:30:05,100 --> 00:30:07,080
not a traversal experiment it's more of

628
00:30:07,080 --> 00:30:09,360
a functional experiment so can a packet

629
00:30:09,360 --> 00:30:11,820
with an extension header function just

630
00:30:11,820 --> 00:30:13,380
as well as a packet without that

631
00:30:13,380 --> 00:30:15,360
extension header

632
00:30:15,360 --> 00:30:17,039
um essentially I'm sending the packet to

633
00:30:17,039 --> 00:30:18,360
the server and seeing if I get a

634
00:30:18,360 --> 00:30:19,980
response back the packet in this case

635
00:30:19,980 --> 00:30:21,600
was a DNS query

636
00:30:21,600 --> 00:30:23,640
and I chose DNS here because of two

637
00:30:23,640 --> 00:30:25,080
reasons

638
00:30:25,080 --> 00:30:27,600
one you can send queries over UDP and

639
00:30:27,600 --> 00:30:30,299
DCP so you can test both protocols

640
00:30:30,299 --> 00:30:33,620
but then also

641
00:30:33,960 --> 00:30:38,279
um the DNS so these uh these servers

642
00:30:38,279 --> 00:30:40,399
they are essentially the authoritative

643
00:30:40,399 --> 00:30:42,840
analysis for the domains in the Alexa

644
00:30:42,840 --> 00:30:46,260
top 1 million so if you look at the list

645
00:30:46,260 --> 00:30:48,000
of web servers for those same domains

646
00:30:48,000 --> 00:30:49,500
you'll see that most of that is just

647
00:30:49,500 --> 00:30:51,960
cloudflare and at least the DNS list is

648
00:30:51,960 --> 00:30:54,360
a bit more diverse still is you still

649
00:30:54,360 --> 00:30:57,600
get like 15 of this uh of all of these

650
00:30:57,600 --> 00:30:59,520
destinations being cloudflare but it's a

651
00:30:59,520 --> 00:31:01,380
lot less than if you were to choose web

652
00:31:01,380 --> 00:31:03,059
servers

653
00:31:03,059 --> 00:31:06,000
so that's why uh my targets for DNS

654
00:31:06,000 --> 00:31:08,700
servers in total there were like 20 uh

655
00:31:08,700 --> 00:31:11,419
thousand of them

656
00:31:11,640 --> 00:31:13,020
um

657
00:31:13,020 --> 00:31:15,600
so I tested UDP TCP destination options

658
00:31:15,600 --> 00:31:18,240
and hope I hope options and also I

659
00:31:18,240 --> 00:31:20,039
tested a few things I varied a few

660
00:31:20,039 --> 00:31:22,440
things in the in the header to see

661
00:31:22,440 --> 00:31:24,779
whether or not it affects traversal so

662
00:31:24,779 --> 00:31:25,980
for example

663
00:31:25,980 --> 00:31:28,500
you can test with the valid 8 by pattern

664
00:31:28,500 --> 00:31:30,059
option but you can also test like an

665
00:31:30,059 --> 00:31:33,059
unknown option or like an invalid length

666
00:31:33,059 --> 00:31:34,380
and see what happens

667
00:31:34,380 --> 00:31:37,520
uh next slide please

668
00:31:40,200 --> 00:31:42,419
okay so we have some number here numbers

669
00:31:42,419 --> 00:31:44,399
here remember that this is a functional

670
00:31:44,399 --> 00:31:47,820
test so the 53 percent you see for say

671
00:31:47,820 --> 00:31:49,380
destination options

672
00:31:49,380 --> 00:31:52,440
just means that 53 of the servers at the

673
00:31:52,440 --> 00:31:55,679
other end responded to our query

674
00:31:55,679 --> 00:31:57,899
um and remember that uh the data set is

675
00:31:57,899 --> 00:31:59,940
made out of a lot of

676
00:31:59,940 --> 00:32:03,000
um well servers in cdns and we saw what

677
00:32:03,000 --> 00:32:04,080
happens in cdns in a previous

678
00:32:04,080 --> 00:32:06,179
presentation so this shouldn't surprise

679
00:32:06,179 --> 00:32:07,620
you

680
00:32:07,620 --> 00:32:09,059
um we also see a very small difference

681
00:32:09,059 --> 00:32:12,840
between TCP and UDP it's not as large a

682
00:32:12,840 --> 00:32:15,120
difference as it as you could see in the

683
00:32:15,120 --> 00:32:16,860
edge data set

684
00:32:16,860 --> 00:32:18,240
uh

685
00:32:18,240 --> 00:32:21,419
and I've tested this 20 000 parts from

686
00:32:21,419 --> 00:32:23,399
12 locations for Destination options and

687
00:32:23,399 --> 00:32:25,260
three locations from Hop for hop IHOP

688
00:32:25,260 --> 00:32:27,480
options only three locations because

689
00:32:27,480 --> 00:32:29,460
actually I struggle to find providers

690
00:32:29,460 --> 00:32:30,899
that supported them

691
00:32:30,899 --> 00:32:33,000
so I struggled to find Vantage points

692
00:32:33,000 --> 00:32:34,620
from which the testing

693
00:32:34,620 --> 00:32:36,840
uh because of the lack of support for

694
00:32:36,840 --> 00:32:39,240
hope I hope options in Cloud providers

695
00:32:39,240 --> 00:32:41,899
next please

696
00:32:41,899 --> 00:32:47,399
uh right so I mentioned uh cdns well

697
00:32:47,399 --> 00:32:50,700
here are the top ases

698
00:32:50,700 --> 00:32:53,100
that essentially do not pass destination

699
00:32:53,100 --> 00:32:56,159
options and by do not pass I mean either

700
00:32:56,159 --> 00:33:00,000
they drop them or simply do something in

701
00:33:00,000 --> 00:33:02,940
the back background and

702
00:33:02,940 --> 00:33:05,940
and then uh the packages and never gets

703
00:33:05,940 --> 00:33:09,539
a response and as you can see

704
00:33:09,539 --> 00:33:11,760
we have The Usual Suspects cloudflare

705
00:33:11,760 --> 00:33:12,840
Amazon

706
00:33:12,840 --> 00:33:15,559
uh

707
00:33:15,899 --> 00:33:18,679
Microsoft

708
00:33:18,679 --> 00:33:22,260
but if you did fix the cdns

709
00:33:22,260 --> 00:33:25,019
you could get your traversal up not

710
00:33:25,019 --> 00:33:28,140
reversal sorry your response rate up

711
00:33:28,140 --> 00:33:31,380
from 50 to almost 90 percent

712
00:33:31,380 --> 00:33:33,480
so that's something to keep in mind next

713
00:33:33,480 --> 00:33:35,760
slide please

714
00:33:35,760 --> 00:33:39,179
uh and finally uh I think I mentioned I

715
00:33:39,179 --> 00:33:40,620
tried to vary the different types of

716
00:33:40,620 --> 00:33:41,760
fields

717
00:33:41,760 --> 00:33:45,860
okay so this is what the with an 8 byte

718
00:33:45,860 --> 00:33:48,480
option looks like this is a pattern

719
00:33:48,480 --> 00:33:49,919
option it looks the same for Destination

720
00:33:49,919 --> 00:33:53,159
options and hope I hop options

721
00:33:53,159 --> 00:33:54,659
and I tried different things in

722
00:33:54,659 --> 00:33:56,039
different fields to see whether or not

723
00:33:56,039 --> 00:33:58,140
this this would help

724
00:33:58,140 --> 00:34:01,799
traversal or if it makes packets gets

725
00:34:01,799 --> 00:34:02,760
dropped

726
00:34:02,760 --> 00:34:04,440
differently

727
00:34:04,440 --> 00:34:06,000
so what I found is that for this

728
00:34:06,000 --> 00:34:08,159
specific data set if you send an invalid

729
00:34:08,159 --> 00:34:10,080
option type or a fake option there's no

730
00:34:10,080 --> 00:34:11,639
Linux called it that doesn't make a

731
00:34:11,639 --> 00:34:13,739
difference the traversal stays the same

732
00:34:13,739 --> 00:34:15,960
as it is

733
00:34:15,960 --> 00:34:16,918
um

734
00:34:16,918 --> 00:34:18,899
uh what I did find that did make a

735
00:34:18,899 --> 00:34:20,639
difference is if you advertise an

736
00:34:20,639 --> 00:34:23,520
invalid extension header length or an

737
00:34:23,520 --> 00:34:25,560
invalid option length that immediately

738
00:34:25,560 --> 00:34:29,580
leads to like almost 100 drop rate and I

739
00:34:29,580 --> 00:34:31,199
guess this is to be expected

740
00:34:31,199 --> 00:34:33,599
but those fields are the fields that I

741
00:34:33,599 --> 00:34:35,879
think routers check and the rest of them

742
00:34:35,879 --> 00:34:37,619
they don't make

743
00:34:37,619 --> 00:34:39,599
too much of a difference next slide

744
00:34:39,599 --> 00:34:41,780
please

745
00:34:42,060 --> 00:34:43,619
so

746
00:34:43,619 --> 00:34:45,359
in conclusion

747
00:34:45,359 --> 00:34:45,960
um

748
00:34:45,960 --> 00:34:48,839
well we learned that destination options

749
00:34:48,839 --> 00:34:51,659
at least they currently currently travel

750
00:34:51,659 --> 00:34:53,639
quite far along a path in both of the

751
00:34:53,639 --> 00:34:55,560
data sets that we've seen

752
00:34:55,560 --> 00:34:57,359
and we've also seen that there are still

753
00:34:57,359 --> 00:34:59,460
some types of networks that drop them

754
00:34:59,460 --> 00:35:01,920
uh whereas for hope I hope options a

755
00:35:01,920 --> 00:35:04,619
very diverse kind of set of pass Edge

756
00:35:04,619 --> 00:35:07,680
networks as in consumer networks and

757
00:35:07,680 --> 00:35:11,160
cdns drop this guy even Transit networks

758
00:35:11,160 --> 00:35:12,420
they drop packets will help I hope

759
00:35:12,420 --> 00:35:15,060
options but you still have a few of

760
00:35:15,060 --> 00:35:18,000
these paths that support them and that's

761
00:35:18,000 --> 00:35:19,260
a positive

762
00:35:19,260 --> 00:35:21,300
uh and finally we've seen a difference

763
00:35:21,300 --> 00:35:23,460
in transfer protocol

764
00:35:23,460 --> 00:35:25,740
and I have some theories as to that so

765
00:35:25,740 --> 00:35:27,540
please speak to me after

766
00:35:27,540 --> 00:35:30,359
the presentation if

767
00:35:30,359 --> 00:35:32,040
if you're interested

768
00:35:32,040 --> 00:35:34,619
uh next slide please

769
00:35:34,619 --> 00:35:36,420
yes

770
00:35:36,420 --> 00:35:38,760
question time excellent and we've got a

771
00:35:38,760 --> 00:35:40,800
total of six or so minutes for questions

772
00:35:40,800 --> 00:35:43,200
so please keep the question short

773
00:35:43,200 --> 00:35:45,660
can I get uh some can I get nalini as

774
00:35:45,660 --> 00:35:48,020
well here

775
00:35:48,599 --> 00:35:50,520
I think just in case

776
00:35:50,520 --> 00:35:51,960
I don't want to answer the hard

777
00:35:51,960 --> 00:35:54,300
questions by myself

778
00:35:54,300 --> 00:35:56,040
um John border I have a clarification

779
00:35:56,040 --> 00:35:58,320
question when you were doing the um UK

780
00:35:58,320 --> 00:36:01,020
Universal from The Edge is the first as

781
00:36:01,020 --> 00:36:03,480
the same as all the time what I'm really

782
00:36:03,480 --> 00:36:05,820
wondering is does a given as always drop

783
00:36:05,820 --> 00:36:08,820
it or does it sometimes drop it

784
00:36:08,820 --> 00:36:11,660
so the first thing

785
00:36:12,480 --> 00:36:14,400
yo the first day

786
00:36:14,400 --> 00:36:17,040
ideas of where the pro boys it wasn't

787
00:36:17,040 --> 00:36:18,660
necessarily the same one in every group

788
00:36:18,660 --> 00:36:21,540
they were all different

789
00:36:21,540 --> 00:36:24,140
foreign

790
00:36:26,000 --> 00:36:28,500
meeting so far

791
00:36:28,500 --> 00:36:31,020
thanks for the agenda uh two questions

792
00:36:31,020 --> 00:36:34,200
one really quick qualification when you

793
00:36:34,200 --> 00:36:37,079
show the first highest and subsequent

794
00:36:37,079 --> 00:36:39,200
tires drops

795
00:36:39,200 --> 00:36:42,480
yeah in that drop you include the first

796
00:36:42,480 --> 00:36:44,160
hop drops right

797
00:36:44,160 --> 00:36:46,859
yes yes yes yes I do okay so did you

798
00:36:46,859 --> 00:36:49,560
look at how my Chicago battery result

799
00:36:49,560 --> 00:36:51,660
would be if you exclude the first hop

800
00:36:51,660 --> 00:36:54,119
drops because in my measurements I feel

801
00:36:54,119 --> 00:36:56,220
like a lot of that stuff is dropped by

802
00:36:56,220 --> 00:36:59,280
Cheap CPS we just have no idea what to

803
00:36:59,280 --> 00:37:02,280
do with all those strange Fields uh yeah

804
00:37:02,280 --> 00:37:03,420
so

805
00:37:03,420 --> 00:37:05,940
I'll I'll answer your question in two

806
00:37:05,940 --> 00:37:09,060
ways so if we go back uh to the slide

807
00:37:09,060 --> 00:37:10,980
for

808
00:37:10,980 --> 00:37:14,520
one more uh and then the previous one to

809
00:37:14,520 --> 00:37:15,420
this one

810
00:37:15,420 --> 00:37:17,520
so I guess the first hop on the past

811
00:37:17,520 --> 00:37:19,200
drops like say for hope I hope options

812
00:37:19,200 --> 00:37:21,359
55 and then in the first days you have

813
00:37:21,359 --> 00:37:24,480
75 so the difference there is 20 so you

814
00:37:24,480 --> 00:37:26,520
can calculate it that way

815
00:37:26,520 --> 00:37:29,099
um but what I what I did too is I had a

816
00:37:29,099 --> 00:37:31,079
look at this

817
00:37:31,079 --> 00:37:34,500
CPS well of the of what this first hop

818
00:37:34,500 --> 00:37:35,940
on the past does and I tried to

819
00:37:35,940 --> 00:37:37,619
cross-reference

820
00:37:37,619 --> 00:37:39,119
um

821
00:37:39,119 --> 00:37:41,579
those machines that also do things like

822
00:37:41,579 --> 00:37:43,740
modify the MSS Fields so I try to work

823
00:37:43,740 --> 00:37:45,300
out if they're middle boxes and I try to

824
00:37:45,300 --> 00:37:46,920
work out if that influences the

825
00:37:46,920 --> 00:37:49,320
traversal rate and it does so if you

826
00:37:49,320 --> 00:37:50,820
have a middle box in the past the drop

827
00:37:50,820 --> 00:37:52,740
rate is much much higher for those spots

828
00:37:52,740 --> 00:37:54,599
that have metal boxes on then for those

829
00:37:54,599 --> 00:37:56,460
which don't

830
00:37:56,460 --> 00:37:57,720
um I don't know if that answered here

831
00:37:57,720 --> 00:38:00,480
yeah and a second quick question so

832
00:38:00,480 --> 00:38:02,099
because you look in the average you're

833
00:38:02,099 --> 00:38:04,680
saying like 20 dropped between first and

834
00:38:04,680 --> 00:38:08,339
second tires for example right so if I

835
00:38:08,339 --> 00:38:10,320
write that in most cases you see some

836
00:38:10,320 --> 00:38:12,720
ISS dropping hundred percent some of

837
00:38:12,720 --> 00:38:15,180
them zero and it's not really likely to

838
00:38:15,180 --> 00:38:17,760
see like Drop in like random number

839
00:38:17,760 --> 00:38:19,920
right so it's more like All or Nothing

840
00:38:19,920 --> 00:38:23,060
yes absolutely

841
00:38:23,760 --> 00:38:25,500
by the discretion of the chair may I

842
00:38:25,500 --> 00:38:28,320
yeah okay uh hi tail um I couldn't join

843
00:38:28,320 --> 00:38:31,440
the cube because weird midakosta uh but

844
00:38:31,440 --> 00:38:32,760
rather than everybody having to ask you

845
00:38:32,760 --> 00:38:34,560
afterward can you tell us your theory on

846
00:38:34,560 --> 00:38:37,380
the discrepancy between TCP and UDP okay

847
00:38:37,380 --> 00:38:39,480
so I I did touch on this in the previous

848
00:38:39,480 --> 00:38:41,220
question for one of one of them is that

849
00:38:41,220 --> 00:38:42,839
you have loads of devices in the past

850
00:38:42,839 --> 00:38:45,180
that will modify bits of the transport

851
00:38:45,180 --> 00:38:46,140
protocol

852
00:38:46,140 --> 00:38:48,660
so you have I specifically looked at

853
00:38:48,660 --> 00:38:51,000
boxes that modify the MSS option send

854
00:38:51,000 --> 00:38:52,859
for TCP in order to help with python 2

855
00:38:52,859 --> 00:38:55,800
Discovery and I noticed that that makes

856
00:38:55,800 --> 00:38:57,420
a difference so that's one of the

857
00:38:57,420 --> 00:39:00,720
reasons and the second one uh would I my

858
00:39:00,720 --> 00:39:02,099
theory is that it's it's of course

859
00:39:02,099 --> 00:39:03,839
fireballs

860
00:39:03,839 --> 00:39:06,000
which look more at TCP than they look at

861
00:39:06,000 --> 00:39:07,140
UDP

862
00:39:07,140 --> 00:39:09,780
um and I plan on testing that somehow I

863
00:39:09,780 --> 00:39:11,640
have I'm yet to concoct my amazing

864
00:39:11,640 --> 00:39:14,280
firewall test but I will and then I will

865
00:39:14,280 --> 00:39:15,839
present the results

866
00:39:15,839 --> 00:39:18,240
thank you

867
00:39:18,240 --> 00:39:19,859
and we have time for one more short

868
00:39:19,859 --> 00:39:24,500
question if anybody has a very short

869
00:39:26,460 --> 00:39:27,720
nope

870
00:39:27,720 --> 00:39:29,220
thank you very much I think this was

871
00:39:29,220 --> 00:39:31,459
great

872
00:39:32,910 --> 00:39:35,280
[Applause]

873
00:39:35,280 --> 00:39:38,280
foreign

874
00:39:44,640 --> 00:39:47,940
if I can find the right slide

875
00:39:47,940 --> 00:39:50,040
there we go

876
00:39:50,040 --> 00:39:53,640
I believe that this is Thomas and I

877
00:39:53,640 --> 00:39:55,619
think this is 20 minutes so I opened up

878
00:39:55,619 --> 00:39:58,079
okay and that's what the question is

879
00:39:58,079 --> 00:39:59,540
obviously

880
00:39:59,540 --> 00:40:01,980
thank you so a lot

881
00:40:01,980 --> 00:40:04,500
so yeah today uh I'm Thomas from

882
00:40:04,500 --> 00:40:07,079
swisscom and today I like to show you

883
00:40:07,079 --> 00:40:09,060
some challenges we have with the network

884
00:40:09,060 --> 00:40:11,700
Telemetry data mesh integration

885
00:40:11,700 --> 00:40:13,500
specifically

886
00:40:13,500 --> 00:40:17,520
yep sorry specifically on uh Yang push

887
00:40:17,520 --> 00:40:19,260
next slide please

888
00:40:19,260 --> 00:40:22,260
and before starting there just to give

889
00:40:22,260 --> 00:40:24,480
you some insights like how we are using

890
00:40:24,480 --> 00:40:26,640
network Telemetry metrics

891
00:40:26,640 --> 00:40:29,880
so here uh in this example with the

892
00:40:29,880 --> 00:40:32,160
network anomaly detection for layer 3

893
00:40:32,160 --> 00:40:37,099
VPN we are having actually a two

894
00:40:37,099 --> 00:40:40,560
vpns so blue and orange and one of the

895
00:40:40,560 --> 00:40:42,599
two vpns

896
00:40:42,599 --> 00:40:45,420
blue one is redundant where the orange

897
00:40:45,420 --> 00:40:48,660
one actually is not in redondant and we

898
00:40:48,660 --> 00:40:50,280
are looking from different perspectives

899
00:40:50,280 --> 00:40:53,220
in the network so on one hand we are

900
00:40:53,220 --> 00:40:55,079
monitoring the bgp updates and

901
00:40:55,079 --> 00:40:57,540
withdrawals on the other hand we are

902
00:40:57,540 --> 00:41:00,480
monitoring on UDP and TCP the missing

903
00:41:00,480 --> 00:41:03,540
traffic and on the last one on the

904
00:41:03,540 --> 00:41:07,260
interface State changes and you see on

905
00:41:07,260 --> 00:41:09,780
the left side at the top we have a

906
00:41:09,780 --> 00:41:13,079
so-called maximum concern scoring which

907
00:41:13,079 --> 00:41:15,540
is basically accumulating all the

908
00:41:15,540 --> 00:41:18,720
concern scores we have then further down

909
00:41:18,720 --> 00:41:22,619
you see the the BMP measured bgp updates

910
00:41:22,619 --> 00:41:25,680
and withdrawals while further down the

911
00:41:25,680 --> 00:41:30,660
ipfix measured flow flow count on TCP

912
00:41:30,660 --> 00:41:34,200
and UDP and on the very last one the the

913
00:41:34,200 --> 00:41:36,740
the the young push measured the

914
00:41:36,740 --> 00:41:40,619
interface date changes and while on the

915
00:41:40,619 --> 00:41:45,060
first event basically we see that we

916
00:41:45,060 --> 00:41:47,780
have some on the blue VPN some updates

917
00:41:47,780 --> 00:41:52,020
uh we have withdrawals just on the uh on

918
00:41:52,020 --> 00:41:53,700
both on the orange and the blue one

919
00:41:53,700 --> 00:41:56,520
while from the forwarding perspective

920
00:41:56,520 --> 00:41:59,940
orange is now dropping completely blue

921
00:41:59,940 --> 00:42:03,180
is unchanged because it's redundant and

922
00:42:03,180 --> 00:42:06,000
the the interface State changes we have

923
00:42:06,000 --> 00:42:08,640
for blue and for orange while when we

924
00:42:08,640 --> 00:42:10,740
move on to the second

925
00:42:10,740 --> 00:42:12,180
event

926
00:42:12,180 --> 00:42:16,440
yep not yet previous slide so the second

927
00:42:16,440 --> 00:42:18,900
event so the red line in the middle you

928
00:42:18,900 --> 00:42:20,940
see basically the overall concern score

929
00:42:20,940 --> 00:42:23,520
now is going up for for blue as well and

930
00:42:23,520 --> 00:42:25,619
the reason is that we are no longer

931
00:42:25,619 --> 00:42:28,800
forwarding for blue we have some pgp

932
00:42:28,800 --> 00:42:30,900
with stalls in the network and also some

933
00:42:30,900 --> 00:42:33,060
interface State changes so you see with

934
00:42:33,060 --> 00:42:35,339
this example we have to look from

935
00:42:35,339 --> 00:42:37,680
different perspectives in the network to

936
00:42:37,680 --> 00:42:40,560
get an overall picture what's how the

937
00:42:40,560 --> 00:42:42,300
changes in the network are actually

938
00:42:42,300 --> 00:42:45,480
affecting the forwarding of the packets

939
00:42:45,480 --> 00:42:47,400
next slide please

940
00:42:47,400 --> 00:42:50,700
so uh from a network operator

941
00:42:50,700 --> 00:42:53,820
perspective what we are aiming for in uh

942
00:42:53,820 --> 00:42:56,280
a network telemetries that we have at

943
00:42:56,280 --> 00:42:59,819
the end uh an automated data processing

944
00:42:59,819 --> 00:43:00,960
pipeline

945
00:43:00,960 --> 00:43:03,599
which starts with network Telemetry

946
00:43:03,599 --> 00:43:06,060
where we collecting data from the

947
00:43:06,060 --> 00:43:09,000
network we consolidate the data in a

948
00:43:09,000 --> 00:43:10,859
so-called data mesh which I will explain

949
00:43:10,859 --> 00:43:13,980
later more in details and on top of it

950
00:43:13,980 --> 00:43:15,960
we have Network analytics where we can

951
00:43:15,960 --> 00:43:20,400
gain insights on those metrics and on

952
00:43:20,400 --> 00:43:22,740
the former semantics point of view so

953
00:43:22,740 --> 00:43:26,040
the ITF defines the semantics for the

954
00:43:26,040 --> 00:43:28,859
operational Matrix while the analytical

955
00:43:28,859 --> 00:43:31,920
Matrix are generated uh with the

956
00:43:31,920 --> 00:43:34,560
analytics capabilities at the network of

957
00:43:34,560 --> 00:43:36,960
operator

958
00:43:36,960 --> 00:43:41,520
uh we achieved this goal by actually

959
00:43:41,520 --> 00:43:44,160
forwarding the metrics from the from the

960
00:43:44,160 --> 00:43:48,300
network uh unchanged we are learning the

961
00:43:48,300 --> 00:43:50,760
semantics from the network and thanks to

962
00:43:50,760 --> 00:43:53,339
the semantics we can also now validate

963
00:43:53,339 --> 00:43:55,980
the correctness of the messages and we

964
00:43:55,980 --> 00:43:58,440
want to control the semantics so we want

965
00:43:58,440 --> 00:44:01,380
to make sure that when semantics are

966
00:44:01,380 --> 00:44:04,800
changing that we keep the keep the

967
00:44:04,800 --> 00:44:07,380
backward compatibility in in control so

968
00:44:07,380 --> 00:44:11,339
we say so we can actually move to New

969
00:44:11,339 --> 00:44:13,560
revisions of the semantics

970
00:44:13,560 --> 00:44:15,480
next slide please

971
00:44:15,480 --> 00:44:19,380
so State of the Union I'm paraphrasing

972
00:44:19,380 --> 00:44:22,800
here but today uh and I will explain why

973
00:44:22,800 --> 00:44:25,440
we have a bit the mess I would say in

974
00:44:25,440 --> 00:44:29,099
terms of uh how we get all the the

975
00:44:29,099 --> 00:44:31,980
metrics from the network and the data

976
00:44:31,980 --> 00:44:33,960
mesh is basically the Next Generation

977
00:44:33,960 --> 00:44:37,920
big data architecture which is quite uh

978
00:44:37,920 --> 00:44:42,720
already advanced and next slide please

979
00:44:42,720 --> 00:44:46,980
so some introduction on the on the big

980
00:44:46,980 --> 00:44:49,560
data architecture here so it evolved

981
00:44:49,560 --> 00:44:53,880
over time it started with propriety data

982
00:44:53,880 --> 00:44:56,880
warehouses event to centralization into

983
00:44:56,880 --> 00:44:58,619
Big Data Lakes

984
00:44:58,619 --> 00:45:01,680
uh we added with copper so Marine time

985
00:45:01,680 --> 00:45:04,800
streaming capabilities and now basically

986
00:45:04,800 --> 00:45:09,060
ending at at data mesh and from a

987
00:45:09,060 --> 00:45:11,400
network Engineers perspective data mesh

988
00:45:11,400 --> 00:45:13,380
is much like how we are managing our

989
00:45:13,380 --> 00:45:16,440
networks today it's distributed we are

990
00:45:16,440 --> 00:45:19,140
dividing them into different domains so

991
00:45:19,140 --> 00:45:22,280
at the end we have many different teams

992
00:45:22,280 --> 00:45:26,940
managing their part uh of of their data

993
00:45:26,940 --> 00:45:30,540
and of course in order to exchange data

994
00:45:30,540 --> 00:45:32,640
properly same as with networks we need

995
00:45:32,640 --> 00:45:34,859
standardized interfaces and they're

996
00:45:34,859 --> 00:45:38,240
called in data mesh uh bounded context

997
00:45:38,240 --> 00:45:41,339
and the data mesh architecture actually

998
00:45:41,339 --> 00:45:45,420
defines that uh within an Enterprise uh

999
00:45:45,420 --> 00:45:47,160
the operational Matrix should be

1000
00:45:47,160 --> 00:45:49,500
standardized with a Federated

1001
00:45:49,500 --> 00:45:52,380
computational governance but since here

1002
00:45:52,380 --> 00:45:54,619
in network Telemetry we are actually

1003
00:45:54,619 --> 00:45:57,300
collecting the metrics from networks and

1004
00:45:57,300 --> 00:45:59,520
how ITF take the responsibility to

1005
00:45:59,520 --> 00:46:00,660
standardize

1006
00:46:00,660 --> 00:46:04,319
uh the semantics there so

1007
00:46:04,319 --> 00:46:06,240
next slide please

1008
00:46:06,240 --> 00:46:10,560
looking now on the Yang push size and uh

1009
00:46:10,560 --> 00:46:13,020
looking at the thief and

1010
00:46:13,020 --> 00:46:15,359
let's say angles on on Yang push on

1011
00:46:15,359 --> 00:46:18,359
transport encoding subscription metadata

1012
00:46:18,359 --> 00:46:20,940
versioning and the Yang models and

1013
00:46:20,940 --> 00:46:24,300
comparing what we have today on on the

1014
00:46:24,300 --> 00:46:27,420
network operator side and what we are

1015
00:46:27,420 --> 00:46:29,880
developing at ITF what we achieved there

1016
00:46:29,880 --> 00:46:33,540
we can see on the transport side uh

1017
00:46:33,540 --> 00:46:36,200
pretty much uh different

1018
00:46:36,200 --> 00:46:39,359
non-standardized Yang push transport

1019
00:46:39,359 --> 00:46:42,720
then at ITF we have with https no

1020
00:46:42,720 --> 00:46:46,260
different UDP native uh drafts which are

1021
00:46:46,260 --> 00:46:49,920
close to to isg getting into an RFC

1022
00:46:49,920 --> 00:46:52,260
on the encoding side

1023
00:46:52,260 --> 00:46:55,880
um also again different

1024
00:46:55,880 --> 00:46:58,500
encodings in in the operator so we have

1025
00:46:58,500 --> 00:47:02,400
Json widely if you go into

1026
00:47:02,400 --> 00:47:06,420
into binary encodings we see both of off

1027
00:47:06,420 --> 00:47:09,619
in most most cases in various variants

1028
00:47:09,619 --> 00:47:13,560
sibo itself not yet implemented while at

1029
00:47:13,560 --> 00:47:16,680
the ITF site we have Json XML and sibo

1030
00:47:16,680 --> 00:47:18,660
already in RFC

1031
00:47:18,660 --> 00:47:21,780
on the subscription side uh same again

1032
00:47:21,780 --> 00:47:24,300
very much at the operator side it's

1033
00:47:24,300 --> 00:47:27,079
non-standard periodical subscription

1034
00:47:27,079 --> 00:47:32,099
widely adopted on change uh seldomly and

1035
00:47:32,099 --> 00:47:35,520
at ITF we have to RFC describing very

1036
00:47:35,520 --> 00:47:38,400
well the subscription side the metadata

1037
00:47:38,400 --> 00:47:44,400
uh there uh we see also that basically

1038
00:47:44,400 --> 00:47:47,819
it's within the Json message itself so

1039
00:47:47,819 --> 00:47:50,819
it's very hard to find out what part of

1040
00:47:50,819 --> 00:47:54,000
the Json message is actually the the the

1041
00:47:54,000 --> 00:47:56,880
the the the the Yang model itself and

1042
00:47:56,880 --> 00:48:00,060
what part is actually the metadata and

1043
00:48:00,060 --> 00:48:03,300
now at ITF we are starting with uh with

1044
00:48:03,300 --> 00:48:05,339
these drafts here to describe the

1045
00:48:05,339 --> 00:48:07,859
metadata more properly so that we have a

1046
00:48:07,859 --> 00:48:10,380
semantic reference towards the message

1047
00:48:10,380 --> 00:48:12,420
which we are transporting

1048
00:48:12,420 --> 00:48:15,900
then on the versioning side uh I would

1049
00:48:15,900 --> 00:48:18,000
say there it gets really

1050
00:48:18,000 --> 00:48:20,819
on the operational side we have nothing

1051
00:48:20,819 --> 00:48:24,060
while at ITF with nitmud young model

1052
00:48:24,060 --> 00:48:26,700
versioning we are working on semantic

1053
00:48:26,700 --> 00:48:29,460
versioning on backward compatibility

1054
00:48:29,460 --> 00:48:33,420
regarding the Yang modules itself at ITF

1055
00:48:33,420 --> 00:48:35,280
we have many rfcs

1056
00:48:35,280 --> 00:48:38,040
so and looking what's currently being

1057
00:48:38,040 --> 00:48:41,339
implemented I would say it uh that the

1058
00:48:41,339 --> 00:48:43,800
coverage is very sparse so that's the

1059
00:48:43,800 --> 00:48:45,960
situation which we have and that's why I

1060
00:48:45,960 --> 00:48:48,420
mentioned before we are actually going

1061
00:48:48,420 --> 00:48:51,500
from a let's say a massive situation

1062
00:48:51,500 --> 00:48:55,680
towards a more organized situation but

1063
00:48:55,680 --> 00:48:58,800
we still have some some tasks in front

1064
00:48:58,800 --> 00:49:00,060
of us

1065
00:49:00,060 --> 00:49:02,160
next slice please

1066
00:49:02,160 --> 00:49:06,720
so uh where we are heading to so at the

1067
00:49:06,720 --> 00:49:09,359
end in a nutshell basically we have the

1068
00:49:09,359 --> 00:49:12,780
network we have the data mesh we are

1069
00:49:12,780 --> 00:49:14,940
pushing configuration through an API

1070
00:49:14,940 --> 00:49:16,740
through net conference convince to the

1071
00:49:16,740 --> 00:49:18,780
network and so we yank push we're

1072
00:49:18,780 --> 00:49:21,420
getting the operational Matrix back so

1073
00:49:21,420 --> 00:49:24,420
it's basically just uh in in the future

1074
00:49:24,420 --> 00:49:27,960
a simple cycle between Network and and

1075
00:49:27,960 --> 00:49:30,900
data mesh and in order to bring these

1076
00:49:30,900 --> 00:49:33,000
two worlds more closer together

1077
00:49:33,000 --> 00:49:36,000
because today big data doesn't know much

1078
00:49:36,000 --> 00:49:38,160
about networks doesn't know much about

1079
00:49:38,160 --> 00:49:41,940
semantics uh we we are now collaborating

1080
00:49:41,940 --> 00:49:45,839
with different operators uh and network

1081
00:49:45,839 --> 00:49:47,940
and analytic providers and universities

1082
00:49:47,940 --> 00:49:49,020
together

1083
00:49:49,020 --> 00:49:52,140
and kick off here a project in a site

1084
00:49:52,140 --> 00:49:54,180
meeting on Monday afternoon if you have

1085
00:49:54,180 --> 00:49:56,420
interest to join us

1086
00:49:56,420 --> 00:50:00,000
so that we can ease this integration

1087
00:50:00,000 --> 00:50:02,640
between the two worlds better

1088
00:50:02,640 --> 00:50:04,859
next slide please

1089
00:50:04,859 --> 00:50:08,599
so in a nutshell uh data message big

1090
00:50:08,599 --> 00:50:10,740
data architecture

1091
00:50:10,740 --> 00:50:14,040
it relies on bounded context so we can

1092
00:50:14,040 --> 00:50:17,220
forward semantics so basically yank push

1093
00:50:17,220 --> 00:50:22,140
is a message uh protocol Apache Kafka is

1094
00:50:22,140 --> 00:50:24,359
a message protocol and what we are

1095
00:50:24,359 --> 00:50:26,760
trying is actually to make sure that

1096
00:50:26,760 --> 00:50:29,000
this integration between the two worlds

1097
00:50:29,000 --> 00:50:31,920
uh are much more easier so we are

1098
00:50:31,920 --> 00:50:33,540
bringing yang

1099
00:50:33,540 --> 00:50:36,960
the semantics into a into the schema

1100
00:50:36,960 --> 00:50:40,200
registry and we are extending Yak push

1101
00:50:40,200 --> 00:50:43,079
so that we have semantic the semantic

1102
00:50:43,079 --> 00:50:45,240
reference so when we learn the message

1103
00:50:45,240 --> 00:50:48,619
from the network that we can actually

1104
00:50:48,619 --> 00:50:51,599
retrieve the the the young module the

1105
00:50:51,599 --> 00:50:54,240
schema from the network node registrated

1106
00:50:54,240 --> 00:50:57,059
into the schema registry and pushed in

1107
00:50:57,059 --> 00:50:59,400
the message into the Apache Kafka

1108
00:50:59,400 --> 00:51:00,960
message broker so that we have a

1109
00:51:00,960 --> 00:51:03,720
semantic reference with the aim at the

1110
00:51:03,720 --> 00:51:06,480
end before we are ingesting it into a

1111
00:51:06,480 --> 00:51:09,359
database that we can actually obtain the

1112
00:51:09,359 --> 00:51:12,300
semantics create the the ingestion

1113
00:51:12,300 --> 00:51:15,540
specification and then ingest the data

1114
00:51:15,540 --> 00:51:18,960
into the database so at the end it's

1115
00:51:18,960 --> 00:51:21,780
about an automated onboarding of data so

1116
00:51:21,780 --> 00:51:24,359
a network engineer can simply configure

1117
00:51:24,359 --> 00:51:27,540
a new XPath and a minute or two later he

1118
00:51:27,540 --> 00:51:30,780
sees the Matrix in the database or in

1119
00:51:30,780 --> 00:51:33,559
another way uh Simply Now different

1120
00:51:33,559 --> 00:51:36,599
domains different products can actually

1121
00:51:36,599 --> 00:51:40,079
exchange data in a data mesh and that

1122
00:51:40,079 --> 00:51:42,839
makes integration much more easier

1123
00:51:42,839 --> 00:51:44,819
next slide please

1124
00:51:44,819 --> 00:51:47,819
so this is just one of the puzzle pieces

1125
00:51:47,819 --> 00:51:50,579
so where we actually extend the

1126
00:51:50,579 --> 00:51:53,819
subscription mechanism in in Yang push

1127
00:51:53,819 --> 00:51:56,819
and also extending the metadata in young

1128
00:51:56,819 --> 00:51:59,220
push so at the top you're seeing

1129
00:51:59,220 --> 00:52:01,859
basically what additional information we

1130
00:52:01,859 --> 00:52:03,680
are adding into the young push matter

1131
00:52:03,680 --> 00:52:06,660
mainly the reference to the young module

1132
00:52:06,660 --> 00:52:09,240
the revision the revision label for the

1133
00:52:09,240 --> 00:52:12,480
semantic reference and which X paths or

1134
00:52:12,480 --> 00:52:15,000
softly filter we have been using while

1135
00:52:15,000 --> 00:52:17,760
at the bottom giving the capability not

1136
00:52:17,760 --> 00:52:20,040
only to subscribe to xpos but actually

1137
00:52:20,040 --> 00:52:23,819
also subscribe to a revision or a

1138
00:52:23,819 --> 00:52:26,460
specific revision label so when you're

1139
00:52:26,460 --> 00:52:28,920
upgrading the node you're not breaking

1140
00:52:28,920 --> 00:52:31,680
the car the the end-to-end data pipeline

1141
00:52:31,680 --> 00:52:34,920
by going into a version which is not

1142
00:52:34,920 --> 00:52:38,339
Backward Compatible to the existing one

1143
00:52:38,339 --> 00:52:40,260
next slide please

1144
00:52:40,260 --> 00:52:43,740
here the example in a Json and XML

1145
00:52:43,740 --> 00:52:48,000
message the with the semantic reference

1146
00:52:48,000 --> 00:52:51,020
slide please

1147
00:52:52,680 --> 00:52:55,319
do you realize the gaps and how it can

1148
00:52:55,319 --> 00:52:57,119
be resolved

1149
00:52:57,119 --> 00:52:59,579
adding semantic reference in yank push

1150
00:52:59,579 --> 00:53:02,940
and in data mesh we can enable automated

1151
00:53:02,940 --> 00:53:05,700
data processing Pipelines

1152
00:53:05,700 --> 00:53:08,040
can do the integration between Network

1153
00:53:08,040 --> 00:53:10,740
Telemetry and data mesh

1154
00:53:10,740 --> 00:53:12,839
by collaborating with different

1155
00:53:12,839 --> 00:53:16,319
operators Network and analytical vendors

1156
00:53:16,319 --> 00:53:19,319
and universities together to bring these

1157
00:53:19,319 --> 00:53:22,260
semantics into Apache Kafka and adding

1158
00:53:22,260 --> 00:53:26,099
semantic references into young push

1159
00:53:26,099 --> 00:53:27,900
I would be interested to hear your

1160
00:53:27,900 --> 00:53:30,660
thoughts and comments and if you want to

1161
00:53:30,660 --> 00:53:33,000
learn more please join us on Monday on

1162
00:53:33,000 --> 00:53:34,260
the side meeting

1163
00:53:34,260 --> 00:53:38,099
at 1 30 or below there is a link giving

1164
00:53:38,099 --> 00:53:39,900
you additional details on the project

1165
00:53:39,900 --> 00:53:41,880
itself

1166
00:53:41,880 --> 00:53:44,480
thanks

1167
00:53:45,180 --> 00:53:48,180
questions

1168
00:53:53,819 --> 00:53:59,839
no okay excellent thank you very much

1169
00:54:00,040 --> 00:54:01,700
[Applause]

1170
00:54:01,700 --> 00:54:05,900
next we have Jeff Houston on another

1171
00:54:05,900 --> 00:54:08,520
itv6 extension hitter

1172
00:54:08,520 --> 00:54:09,839
measurement using a different

1173
00:54:09,839 --> 00:54:12,660
methodology and wild Jack's coming up I

1174
00:54:12,660 --> 00:54:14,400
will remind everyone that there is the

1175
00:54:14,400 --> 00:54:17,760
technology Deep dive session

1176
00:54:17,760 --> 00:54:21,660
um tomorrow morning starting at 8 A.M

1177
00:54:21,660 --> 00:54:24,540
and

1178
00:54:24,540 --> 00:54:27,000
find a peck Warren um hi my name is Jeff

1179
00:54:27,000 --> 00:54:28,740
Houston and this is work with Joelle

1180
00:54:28,740 --> 00:54:31,680
Damas from AP Nick so we're back to the

1181
00:54:31,680 --> 00:54:33,480
wonderful world of IPv6 extension

1182
00:54:33,480 --> 00:54:35,460
headers again you thought you might have

1183
00:54:35,460 --> 00:54:39,540
escaped it but you were wrong next slide

1184
00:54:39,540 --> 00:54:40,619
um

1185
00:54:40,619 --> 00:54:42,660
this kind of came up

1186
00:54:42,660 --> 00:54:46,440
in 2016 and for me I must admit it was

1187
00:54:46,440 --> 00:54:48,480
the right hand column

1188
00:54:48,480 --> 00:54:50,760
because this work

1189
00:54:50,760 --> 00:54:52,619
um General cover

1190
00:54:52,619 --> 00:54:54,660
um Fernando gond and a couple of others

1191
00:54:54,660 --> 00:54:57,420
whose names I have forgotten but you can

1192
00:54:57,420 --> 00:55:00,240
look up 7872 as quickly as I can

1193
00:55:00,240 --> 00:55:02,940
what it really said to me

1194
00:55:02,940 --> 00:55:07,020
is V6 can't fragment

1195
00:55:07,020 --> 00:55:09,540
with that kind of loss rate

1196
00:55:09,540 --> 00:55:12,240
you cannot fragment packets through the

1197
00:55:12,240 --> 00:55:14,579
internet and make them work

1198
00:55:14,579 --> 00:55:19,800
which is for the DNS and V6 a Death Note

1199
00:55:19,800 --> 00:55:21,839
you just can't make big packets work if

1200
00:55:21,839 --> 00:55:24,059
that's the loss rate that's real the

1201
00:55:24,059 --> 00:55:26,819
other ones were you know well who uses

1202
00:55:26,819 --> 00:55:30,000
it anyway curious but little more than

1203
00:55:30,000 --> 00:55:31,619
curious

1204
00:55:31,619 --> 00:55:33,839
um if I read the documentation in that

1205
00:55:33,839 --> 00:55:37,440
RFC correctly they were using pattern

1206
00:55:37,440 --> 00:55:39,359
and they were padding the size of the

1207
00:55:39,359 --> 00:55:42,119
header up to a total of eight bytes and

1208
00:55:42,119 --> 00:55:43,260
we'll see why that's important a bit

1209
00:55:43,260 --> 00:55:47,280
later but this was also client to server

1210
00:55:47,280 --> 00:55:49,740
not server to client this was the

1211
00:55:49,740 --> 00:55:51,599
opposite direction of most of the bulk

1212
00:55:51,599 --> 00:55:53,520
of the traffic so they were sending

1213
00:55:53,520 --> 00:55:56,819
crafted V6 packets within a TCP session

1214
00:55:56,819 --> 00:55:59,819
to a bunch of servers and two sets the

1215
00:55:59,819 --> 00:56:02,760
world IPv6 day set and the Alexa set and

1216
00:56:02,760 --> 00:56:05,280
seeing what they got back in terms of

1217
00:56:05,280 --> 00:56:07,859
you know if I send a sin packet then who

1218
00:56:07,859 --> 00:56:10,079
sent me a synack that kind of work I'm

1219
00:56:10,079 --> 00:56:11,880
not sure exactly what packet they use

1220
00:56:11,880 --> 00:56:14,040
but the principle was client to server

1221
00:56:14,040 --> 00:56:15,540
next slide

1222
00:56:15,540 --> 00:56:17,520
oh and by the way the fragmentation back

1223
00:56:17,520 --> 00:56:18,839
one

1224
00:56:18,839 --> 00:56:21,180
again that's going to be important

1225
00:56:21,180 --> 00:56:25,440
was two 512 byte fragments

1226
00:56:25,440 --> 00:56:27,540
so it was a single point test and we'll

1227
00:56:27,540 --> 00:56:29,400
see that that becomes important next

1228
00:56:29,400 --> 00:56:30,240
slide

1229
00:56:30,240 --> 00:56:31,619
so

1230
00:56:31,619 --> 00:56:33,480
we got curious about this a couple of

1231
00:56:33,480 --> 00:56:35,339
years ago and decided that we would push

1232
00:56:35,339 --> 00:56:38,040
this a little harder and using a

1233
00:56:38,040 --> 00:56:40,079
mechanism that was fundamentally

1234
00:56:40,079 --> 00:56:43,020
different to Atlas we actually used a

1235
00:56:43,020 --> 00:56:47,880
couple of Lino boxes and created a very

1236
00:56:47,880 --> 00:56:50,339
standard back end so here's you know

1237
00:56:50,339 --> 00:56:54,300
nginx running a web server yada yada but

1238
00:56:54,300 --> 00:56:56,400
in front of that we actually put a V6

1239
00:56:56,400 --> 00:56:57,540
Nat

1240
00:56:57,540 --> 00:57:00,020
and the way it worked is the front end

1241
00:57:00,020 --> 00:57:02,520
accepted incoming packets

1242
00:57:02,520 --> 00:57:04,680
change the addresses so that you know

1243
00:57:04,680 --> 00:57:06,660
the return from the web server got back

1244
00:57:06,660 --> 00:57:08,460
to the front-end box and just sent them

1245
00:57:08,460 --> 00:57:12,359
inward but it also created a binding

1246
00:57:12,359 --> 00:57:15,900
and a flag of a transition to apply to

1247
00:57:15,900 --> 00:57:18,660
the outbound packet the outbound packet

1248
00:57:18,660 --> 00:57:21,660
got back to the front-end server and we

1249
00:57:21,660 --> 00:57:24,420
then diddled and played with that packet

1250
00:57:24,420 --> 00:57:26,220
how do we do that well the thing is

1251
00:57:26,220 --> 00:57:29,280
running standard pcap packet filters so

1252
00:57:29,280 --> 00:57:31,859
it's picking up every packet and we

1253
00:57:31,859 --> 00:57:33,839
actually send raw IP it's a totally

1254
00:57:33,839 --> 00:57:35,520
synthetic packet that we send out the

1255
00:57:35,520 --> 00:57:37,440
other end it looks like what the back

1256
00:57:37,440 --> 00:57:39,000
end did but we've added either

1257
00:57:39,000 --> 00:57:41,880
fragmentation or extension headers now

1258
00:57:41,880 --> 00:57:43,800
we wanted to test a whole bunch of

1259
00:57:43,800 --> 00:57:45,540
things without doing a whole bunch of

1260
00:57:45,540 --> 00:57:46,740
experiments

1261
00:57:46,740 --> 00:57:49,559
and because we're using an ad-based

1262
00:57:49,559 --> 00:57:51,000
measurement technique

1263
00:57:51,000 --> 00:57:54,180
we have around 26 27 million raw sample

1264
00:57:54,180 --> 00:57:55,920
points a day

1265
00:57:55,920 --> 00:57:58,079
and so we could conduct a whole bunch of

1266
00:57:58,079 --> 00:58:00,540
experiments simultaneously and the way

1267
00:58:00,540 --> 00:58:03,119
we did that was every single time we

1268
00:58:03,119 --> 00:58:06,359
found a new TCP session we randomly

1269
00:58:06,359 --> 00:58:09,119
flipped the coin and selected a test it

1270
00:58:09,119 --> 00:58:11,339
was either fragmentation to a certain

1271
00:58:11,339 --> 00:58:12,720
packet size

1272
00:58:12,720 --> 00:58:17,220
or adding a h by hbh header to a certain

1273
00:58:17,220 --> 00:58:20,700
size or adding a destination header to a

1274
00:58:20,700 --> 00:58:23,339
certain size so simultaneously we were

1275
00:58:23,339 --> 00:58:26,400
doing around 54 tests across those uh

1276
00:58:26,400 --> 00:58:29,040
across those experiments all at once

1277
00:58:29,040 --> 00:58:31,500
which meant basically a large amount of

1278
00:58:31,500 --> 00:58:33,119
data was being collected

1279
00:58:33,119 --> 00:58:35,640
these are ads

1280
00:58:35,640 --> 00:58:39,299
are not normally testing servers

1281
00:58:39,299 --> 00:58:41,700
unless you're running Apple's private

1282
00:58:41,700 --> 00:58:44,359
data relay I'm actually testing

1283
00:58:44,359 --> 00:58:47,220
statistically mobile phones

1284
00:58:47,220 --> 00:58:48,780
but a whole bunch of other things as

1285
00:58:48,780 --> 00:58:50,880
well you know what's behind a Broadband

1286
00:58:50,880 --> 00:58:53,040
Network possibly smart televisions who

1287
00:58:53,040 --> 00:58:55,319
bloody knows I don't but we're testing

1288
00:58:55,319 --> 00:58:57,000
in devices

1289
00:58:57,000 --> 00:58:59,880
so this is the opposite of the earlier

1290
00:58:59,880 --> 00:59:03,960
work in 7872 this is all about servers

1291
00:59:03,960 --> 00:59:07,559
to real clients right so it's the mirror

1292
00:59:07,559 --> 00:59:10,260
image next slide

1293
00:59:10,260 --> 00:59:12,660
um I just said all that that's roughly

1294
00:59:12,660 --> 00:59:15,359
what we tested uh we're not using pad n

1295
00:59:15,359 --> 00:59:17,339
uh there was an experience in using pad

1296
00:59:17,339 --> 00:59:20,099
in which was disastrous we're using the

1297
00:59:20,099 --> 00:59:22,799
zero x1e type code which is evidently

1298
00:59:22,799 --> 00:59:24,599
reserved by Ayanna for this kind of

1299
00:59:24,599 --> 00:59:26,339
experimentation

1300
00:59:26,339 --> 00:59:27,900
um and we're doing basically a

1301
00:59:27,900 --> 00:59:31,140
progressive size of you know 816 3264

1302
00:59:31,140 --> 00:59:33,119
for each Destin header and the

1303
00:59:33,119 --> 00:59:35,339
fragmentation not two by five twelve

1304
00:59:35,339 --> 00:59:38,280
we're actually moving around that 1280

1305
00:59:38,280 --> 00:59:40,980
point of doing in eight byte hops the

1306
00:59:40,980 --> 00:59:44,880
initial fragment 1200 1208 1216 up to 14

1307
00:59:44,880 --> 00:59:47,520
16 octets of the initial fragment size

1308
00:59:47,520 --> 00:59:50,220
so all that was being tested at once

1309
00:59:50,220 --> 00:59:53,180
next slide

1310
00:59:53,460 --> 00:59:55,799
um so this is the first result and I've

1311
00:59:55,799 --> 00:59:58,200
normalized the vertical axis across all

1312
00:59:58,200 --> 01:00:00,059
these slides to give you a feel

1313
01:00:00,059 --> 01:00:02,040
but I must admit there are certain

1314
01:00:02,040 --> 01:00:04,680
points where the eyebrows raise

1315
01:00:04,680 --> 01:00:07,799
there is no known reason that I can

1316
01:00:07,799 --> 01:00:09,000
think of

1317
01:00:09,000 --> 01:00:12,119
why the drop rate is higher once you get

1318
01:00:12,119 --> 01:00:14,339
to about 1360 octets in the initial

1319
01:00:14,339 --> 01:00:16,740
fragment size but it is

1320
01:00:16,740 --> 01:00:18,900
and there is no reason that I can think

1321
01:00:18,900 --> 01:00:23,339
of why 1416 is higher than the others

1322
01:00:23,339 --> 01:00:25,740
no reason I can think of

1323
01:00:25,740 --> 01:00:29,700
this is everybody next slide

1324
01:00:29,700 --> 01:00:32,160
but the Internet isn't everybody

1325
01:00:32,160 --> 01:00:35,220
the internet's bloody weird

1326
01:00:35,220 --> 01:00:37,079
here

1327
01:00:37,079 --> 01:00:39,599
is this part of Europe now okay a little

1328
01:00:39,599 --> 01:00:41,760
further west yeah somewhere or east

1329
01:00:41,760 --> 01:00:43,680
sorry somewhere that is Europe if I look

1330
01:00:43,680 --> 01:00:46,200
at Europe oddly enough the larger

1331
01:00:46,200 --> 01:00:47,520
fragments

1332
01:00:47,520 --> 01:00:50,160
actually have a lower drop rate than the

1333
01:00:50,160 --> 01:00:52,140
smaller initial fragments so over in

1334
01:00:52,140 --> 01:00:54,359
Europe the number goes down slightly not

1335
01:00:54,359 --> 01:00:57,599
up in North America it goes down but

1336
01:00:57,599 --> 01:01:00,059
stays steady bizarre

1337
01:01:00,059 --> 01:01:02,540
if I look in South America

1338
01:01:02,540 --> 01:01:04,680
predominantly Brazil is the major

1339
01:01:04,680 --> 01:01:08,160
contributor V6 1416 is just evil

1340
01:01:08,160 --> 01:01:10,500
you know do not pass that packet but all

1341
01:01:10,500 --> 01:01:12,599
the others are cool

1342
01:01:12,599 --> 01:01:15,540
which I get I have no idea why and don't

1343
01:01:15,540 --> 01:01:18,420
forget we had adjusted the MSS these

1344
01:01:18,420 --> 01:01:19,920
were packets which in theory were going

1345
01:01:19,920 --> 01:01:21,839
to make it I'm not pushing beyond what

1346
01:01:21,839 --> 01:01:24,900
was the initial MSS value and in Asia

1347
01:01:24,900 --> 01:01:27,480
you again see this Peak at the high

1348
01:01:27,480 --> 01:01:28,859
packets

1349
01:01:28,859 --> 01:01:32,520
uh India which has a massive V6 rollout

1350
01:01:32,520 --> 01:01:35,040
in Reliance Geo is the major contributor

1351
01:01:35,040 --> 01:01:36,599
to that behavior

1352
01:01:36,599 --> 01:01:39,359
that the larger initial fragments have a

1353
01:01:39,359 --> 01:01:40,740
dramatically increased drop rate

1354
01:01:40,740 --> 01:01:42,660
compared to the others because there's

1355
01:01:42,660 --> 01:01:44,819
all these vertical sizes are the same

1356
01:01:44,819 --> 01:01:45,900
rate

1357
01:01:45,900 --> 01:01:48,000
so for small fragments India is doing

1358
01:01:48,000 --> 01:01:49,920
magnificently

1359
01:01:49,920 --> 01:01:51,780
much much better than you know Europe

1360
01:01:51,780 --> 01:01:54,660
North America South America except for

1361
01:01:54,660 --> 01:01:57,540
big initial fragments and China

1362
01:01:57,540 --> 01:01:59,339
abandon all hope

1363
01:01:59,339 --> 01:02:01,859
but the bigger packets go abandon even

1364
01:02:01,859 --> 01:02:03,180
more hope than you ever had and they

1365
01:02:03,180 --> 01:02:04,559
wouldn't have any Hope anyway so it's

1366
01:02:04,559 --> 01:02:07,859
all just stuffed so why does it vary

1367
01:02:07,859 --> 01:02:11,040
like that next slide

1368
01:02:11,040 --> 01:02:13,980
is it the fact that there's a header or

1369
01:02:13,980 --> 01:02:15,720
the factor fragmentation

1370
01:02:15,720 --> 01:02:18,480
so we included a test that says here is

1371
01:02:18,480 --> 01:02:19,859
a packet with a fragment header but the

1372
01:02:19,859 --> 01:02:21,480
fragment header says the entire packet's

1373
01:02:21,480 --> 01:02:23,099
here an atomic fragment

1374
01:02:23,099 --> 01:02:25,680
and again the world average about half

1375
01:02:25,680 --> 01:02:28,319
of the fragment drop rate cool next

1376
01:02:28,319 --> 01:02:29,640
slide

1377
01:02:29,640 --> 01:02:32,280
whoa United States

1378
01:02:32,280 --> 01:02:35,400
curious you notice this really solid

1379
01:02:35,400 --> 01:02:38,400
weekday weekend packet drop rate in the

1380
01:02:38,400 --> 01:02:39,420
US

1381
01:02:39,420 --> 01:02:42,900
that during the weekdays the

1382
01:02:42,900 --> 01:02:44,520
fragmentation drop rate is slightly

1383
01:02:44,520 --> 01:02:47,040
higher than weekends maybe there's an

1384
01:02:47,040 --> 01:02:48,660
issue about Enterprise networks and the

1385
01:02:48,660 --> 01:02:50,760
way they do firewalls but the atomic

1386
01:02:50,760 --> 01:02:53,460
frag drop rate is constant weekday and

1387
01:02:53,460 --> 01:02:54,720
weekends

1388
01:02:54,720 --> 01:02:56,520
and it's about the same order of

1389
01:02:56,520 --> 01:02:58,020
magnitude

1390
01:02:58,020 --> 01:02:59,220
you know

1391
01:02:59,220 --> 01:03:01,020
somewhere between seven and eight

1392
01:03:01,020 --> 01:03:03,900
percent right look at China

1393
01:03:03,900 --> 01:03:05,819
fragments are evil

1394
01:03:05,819 --> 01:03:08,520
Atomic fragments at least in the last

1395
01:03:08,520 --> 01:03:11,040
two months are highly fashionable

1396
01:03:11,040 --> 01:03:12,660
before then they were evil but now

1397
01:03:12,660 --> 01:03:14,760
they're not evil anymore

1398
01:03:14,760 --> 01:03:16,920
next slide

1399
01:03:16,920 --> 01:03:20,099
I have no bloody clue you might but I

1400
01:03:20,099 --> 01:03:23,160
don't okay so that's frags next slide

1401
01:03:23,160 --> 01:03:26,160
let's move on to destination extension

1402
01:03:26,160 --> 01:03:27,420
headers the ones that are meant to pass

1403
01:03:27,420 --> 01:03:29,520
through the network and only go to the

1404
01:03:29,520 --> 01:03:32,940
box now most of you run a variant of

1405
01:03:32,940 --> 01:03:35,940
Linux no matter what you know Microsoft

1406
01:03:35,940 --> 01:03:37,680
or whatever they used to do windows is

1407
01:03:37,680 --> 01:03:39,240
basically dead there are very little out

1408
01:03:39,240 --> 01:03:41,700
there and most of you use code that has

1409
01:03:41,700 --> 01:03:44,520
this particular piece of code in it

1410
01:03:44,520 --> 01:03:47,040
and it says what it means

1411
01:03:47,040 --> 01:03:50,160
if the padding option is there

1412
01:03:50,160 --> 01:03:52,859
Pat in is only to bring it to a size of

1413
01:03:52,859 --> 01:03:54,359
eight bytes if it's bigger than that

1414
01:03:54,359 --> 01:03:56,040
drop the packet

1415
01:03:56,040 --> 01:03:58,440
and if you're padding with anything

1416
01:03:58,440 --> 01:04:02,819
other than zeros it's bad next slide

1417
01:04:02,819 --> 01:04:05,599
now we didn't read that

1418
01:04:05,599 --> 01:04:07,920
so for the first few months we were

1419
01:04:07,920 --> 01:04:09,240
running this experiment we were running

1420
01:04:09,240 --> 01:04:12,180
with pad in all ones and sizes of 8 16

1421
01:04:12,180 --> 01:04:15,240
32 64 128 well we're getting bad we're

1422
01:04:15,240 --> 01:04:16,740
getting bad because we're padding with

1423
01:04:16,740 --> 01:04:18,720
all ones and then we've made it through

1424
01:04:18,720 --> 01:04:20,160
the network the host just dropped it

1425
01:04:20,160 --> 01:04:22,140
anyway Ninja

1426
01:04:22,140 --> 01:04:24,900
after doing a I think it was after the

1427
01:04:24,900 --> 01:04:27,599
last ITF meeting and someone kindly uh

1428
01:04:27,599 --> 01:04:30,480
pointed out that piece of code thank you

1429
01:04:30,480 --> 01:04:32,339
um we then found the following results

1430
01:04:32,339 --> 01:04:34,640
which are kind of interesting

1431
01:04:34,640 --> 01:04:37,859
128 bytes is more evil

1432
01:04:37,859 --> 01:04:40,079
than a smaller destination extension

1433
01:04:40,079 --> 01:04:42,540
header which tends to suggest something

1434
01:04:42,540 --> 01:04:44,880
closer to the network than the host and

1435
01:04:44,880 --> 01:04:48,180
interestingly 64 bytes is more evil than

1436
01:04:48,180 --> 01:04:49,200
lowers

1437
01:04:49,200 --> 01:04:52,319
uh 8 and 16 are largely the same and 32

1438
01:04:52,319 --> 01:04:55,140
byte is slightly different averages get

1439
01:04:55,140 --> 01:04:57,839
confusing next slide

1440
01:04:57,839 --> 01:05:00,119
because in Greece

1441
01:05:00,119 --> 01:05:02,720
it's really really low

1442
01:05:02,720 --> 01:05:06,119
128 byte headers have a higher drop rate

1443
01:05:06,119 --> 01:05:08,160
than the rest but in absolute terms

1444
01:05:08,160 --> 01:05:10,079
they're both tiny whereas in the United

1445
01:05:10,079 --> 01:05:13,859
States destination headers are evil

1446
01:05:13,859 --> 01:05:17,280
for almost all networks and the 128 byte

1447
01:05:17,280 --> 01:05:18,660
headers have a more higher drop rate

1448
01:05:18,660 --> 01:05:21,000
than the others

1449
01:05:21,000 --> 01:05:22,980
I thought it was all Cisco and Juniper

1450
01:05:22,980 --> 01:05:25,799
gear I thought we all ran Android

1451
01:05:25,799 --> 01:05:27,900
in a lot of the work on experimentation

1452
01:05:27,900 --> 01:05:30,660
on the network we kind of assume

1453
01:05:30,660 --> 01:05:32,400
that everyone runs the same vendor

1454
01:05:32,400 --> 01:05:34,140
equipment much the same configuration

1455
01:05:34,140 --> 01:05:36,299
because you guys travel all around the

1456
01:05:36,299 --> 01:05:38,400
world and offer all of your ISP clients

1457
01:05:38,400 --> 01:05:41,520
the same config and so we almost assume

1458
01:05:41,520 --> 01:05:44,400
that the world is painted the same and

1459
01:05:44,400 --> 01:05:47,280
when you find these kinds of differences

1460
01:05:47,280 --> 01:05:48,960
I'm like it's not that you're running a

1461
01:05:48,960 --> 01:05:50,400
different version of Android in your

1462
01:05:50,400 --> 01:05:52,680
handsets you're not

1463
01:05:52,680 --> 01:05:54,960
the networks are being are being treated

1464
01:05:54,960 --> 01:05:56,040
differently

1465
01:05:56,040 --> 01:05:57,960
and don't forget this is an ad-based

1466
01:05:57,960 --> 01:05:59,040
experiment we're following where

1467
01:05:59,040 --> 01:06:02,819
eyeballs are next slide

1468
01:06:02,819 --> 01:06:05,040
so you do the world map

1469
01:06:05,040 --> 01:06:06,839
and what you find is again sort of a

1470
01:06:06,839 --> 01:06:08,760
look at countries and the average

1471
01:06:08,760 --> 01:06:11,160
destination drop rate across all sizes

1472
01:06:11,160 --> 01:06:13,640
the U.S fares much worse than others

1473
01:06:13,640 --> 01:06:18,000
Brazil better China near Australia bad

1474
01:06:18,000 --> 01:06:22,740
Etc UK pretty bad next slide

1475
01:06:22,740 --> 01:06:25,020
and I kind of wondered

1476
01:06:25,020 --> 01:06:28,319
is it something to do with broadband and

1477
01:06:28,319 --> 01:06:29,760
CPE

1478
01:06:29,760 --> 01:06:33,299
versus mobiles and no CPE I make the CPU

1479
01:06:33,299 --> 01:06:34,740
is buried deep inside the provider

1480
01:06:34,740 --> 01:06:36,420
Network and there is something there

1481
01:06:36,420 --> 01:06:39,900
that T-Mobile in the US has a much lower

1482
01:06:39,900 --> 01:06:42,960
drop rate than Comcast in the US

1483
01:06:42,960 --> 01:06:44,480
the what you actually find is that

1484
01:06:44,480 --> 01:06:46,260
landline-based systems which are more

1485
01:06:46,260 --> 01:06:47,760
reliant on the CPE to get the

1486
01:06:47,760 --> 01:06:50,339
destination headed through seem to fare

1487
01:06:50,339 --> 01:06:51,900
much worse

1488
01:06:51,900 --> 01:06:55,020
than mobile systems you also notice with

1489
01:06:55,020 --> 01:06:58,619
Comcast 128 bytes near same drop rate as

1490
01:06:58,619 --> 01:07:01,380
everything else whereas in T-Mobile it

1491
01:07:01,380 --> 01:07:03,839
just pushes up ever so slightly so there

1492
01:07:03,839 --> 01:07:05,760
is a difference between mobile and fixed

1493
01:07:05,760 --> 01:07:08,039
next slide

1494
01:07:08,039 --> 01:07:11,160
okay that's as much clue as I can offer

1495
01:07:11,160 --> 01:07:12,660
um let's move on to the last one time is

1496
01:07:12,660 --> 01:07:14,819
running out uh

1497
01:07:14,819 --> 01:07:16,500
same problem

1498
01:07:16,500 --> 01:07:19,020
we were doing all ones Pat in so

1499
01:07:19,020 --> 01:07:21,359
everything was getting dropped oh I will

1500
01:07:21,359 --> 01:07:24,359
outsmart this we'll go to 1e1

1501
01:07:24,359 --> 01:07:26,640
everything gets dropped

1502
01:07:26,640 --> 01:07:30,420
absolutely zip change that's almost 100

1503
01:07:30,420 --> 01:07:32,339
for every size

1504
01:07:32,339 --> 01:07:35,119
next slide

1505
01:07:35,119 --> 01:07:37,920
everybody everywhere drops everything

1506
01:07:37,920 --> 01:07:40,079
where there's V6 the bits that are white

1507
01:07:40,079 --> 01:07:42,780
there's not enough V6 to test but

1508
01:07:42,780 --> 01:07:44,940
everywhere else it's bright red

1509
01:07:44,940 --> 01:07:48,059
now one of two reasons

1510
01:07:48,059 --> 01:07:50,160
one it's them

1511
01:07:50,160 --> 01:07:52,619
two it's me

1512
01:07:52,619 --> 01:07:54,240
because if something is dropping

1513
01:07:54,240 --> 01:07:56,400
something one inch away from the server

1514
01:07:56,400 --> 01:07:57,780
where we're emitting that packet

1515
01:07:57,780 --> 01:07:59,760
obviously the world looks red because

1516
01:07:59,760 --> 01:08:01,440
the drop happens you know just there

1517
01:08:01,440 --> 01:08:05,420
next page next slide with one exception

1518
01:08:05,420 --> 01:08:08,579
the one that proves the packets are

1519
01:08:08,579 --> 01:08:10,740
making it out of the server

1520
01:08:10,740 --> 01:08:13,559
because there's one provider in Egypt

1521
01:08:13,559 --> 01:08:14,819
ETI Salat

1522
01:08:14,819 --> 01:08:17,939
that doesn't have a 100 drop rate

1523
01:08:17,939 --> 01:08:20,819
does not have a 100 drop rate it only

1524
01:08:20,819 --> 01:08:23,580
has an 80 drop rate

1525
01:08:23,580 --> 01:08:26,819
except for one size which is higher

1526
01:08:26,819 --> 01:08:29,359
ninety percent and what's that one size

1527
01:08:29,359 --> 01:08:33,000
you can't tell but I can it's 16 bytes

1528
01:08:33,000 --> 01:08:35,219
not 128.

1529
01:08:35,219 --> 01:08:37,560
for some reason the 16 byte destination

1530
01:08:37,560 --> 01:08:39,719
header in Egypt is evil but everything

1531
01:08:39,719 --> 01:08:43,080
else is is less evil it's still 80 evil

1532
01:08:43,080 --> 01:08:45,540
but not a hundred percent but what that

1533
01:08:45,540 --> 01:08:48,299
does prove is the packets made it out of

1534
01:08:48,299 --> 01:08:49,679
the data center

1535
01:08:49,679 --> 01:08:52,439
and in this case the data centers in uh

1536
01:08:52,439 --> 01:08:55,560
uh Frankfurt yeah so made it through

1537
01:08:55,560 --> 01:08:57,960
Germany got across the Mediterranean yay

1538
01:08:57,960 --> 01:09:00,779
and died in Egypt

1539
01:09:00,779 --> 01:09:02,880
so we can assume that most of our

1540
01:09:02,880 --> 01:09:04,738
packets made it out of Germany somewhere

1541
01:09:04,738 --> 01:09:07,738
and made it into the transmission

1542
01:09:07,738 --> 01:09:10,439
systems and then got killed somewhere

1543
01:09:10,439 --> 01:09:15,259
else it's not us it's them next slide

1544
01:09:16,080 --> 01:09:18,779
um so what can we say

1545
01:09:18,779 --> 01:09:20,219
we don't know what we're looking at

1546
01:09:20,219 --> 01:09:21,839
because we're looking at the interaction

1547
01:09:21,839 --> 01:09:24,238
of a whole bunch of side effects that

1548
01:09:24,238 --> 01:09:27,120
are extremely difficult to understand

1549
01:09:27,120 --> 01:09:29,759
because what particular V6 transition

1550
01:09:29,759 --> 01:09:33,540
strategy you're using appears to have a

1551
01:09:33,540 --> 01:09:35,660
real effect T-Mobile

1552
01:09:35,660 --> 01:09:39,839
464xlat has a much lower drop rate than

1553
01:09:39,839 --> 01:09:42,839
say Comcast which is fixed using as far

1554
01:09:42,839 --> 01:09:45,779
as I understand DS light and someone can

1555
01:09:45,779 --> 01:09:47,939
correct me if I'm wrong there but it's a

1556
01:09:47,939 --> 01:09:49,620
different kind of transition strategy

1557
01:09:49,620 --> 01:09:52,198
which appears to have a bearing on the

1558
01:09:52,198 --> 01:09:54,179
way these V6 packets with extension

1559
01:09:54,179 --> 01:09:56,460
headers are being treated

1560
01:09:56,460 --> 01:09:58,560
um so whatever ISP equipment you're

1561
01:09:58,560 --> 01:10:01,920
using less so because in some ways the

1562
01:10:01,920 --> 01:10:03,980
world runs the same code

1563
01:10:03,980 --> 01:10:07,800
even Huawei the world runs the same code

1564
01:10:07,800 --> 01:10:09,660
um what CPU you're using will be

1565
01:10:09,660 --> 01:10:12,120
different will be different because CPE

1566
01:10:12,120 --> 01:10:15,179
is crap in so many unusual and inventive

1567
01:10:15,179 --> 01:10:17,760
ways and everyone is crapped differently

1568
01:10:17,760 --> 01:10:20,460
to everyone else because you guys are

1569
01:10:20,460 --> 01:10:22,920
Engineers not creative artists so when

1570
01:10:22,920 --> 01:10:24,600
you're asked to be creative write a new

1571
01:10:24,600 --> 01:10:27,420
CPE you usually get instead you get

1572
01:10:27,420 --> 01:10:29,280
it wrong in different ways all the time

1573
01:10:29,280 --> 01:10:31,679
and that's what we're seeing CPE is

1574
01:10:31,679 --> 01:10:34,199
never consistent uh what mobile platform

1575
01:10:34,199 --> 01:10:36,179
you're using it not what handset but

1576
01:10:36,179 --> 01:10:37,380
what they're using at the other end

1577
01:10:37,380 --> 01:10:40,080
makes a difference and private relays

1578
01:10:40,080 --> 01:10:42,719
and proxies which with Apple's move and

1579
01:10:42,719 --> 01:10:44,640
Google's move in this area of

1580
01:10:44,640 --> 01:10:46,199
increasingly sucking everyone into

1581
01:10:46,199 --> 01:10:48,719
Google file or apple private relay has a

1582
01:10:48,719 --> 01:10:50,400
real big effect on these kinds of

1583
01:10:50,400 --> 01:10:51,659
measurements through to the client

1584
01:10:51,659 --> 01:10:53,100
because you're now seeing the

1585
01:10:53,100 --> 01:10:54,840
interaction between the front-end

1586
01:10:54,840 --> 01:10:57,060
obscure system from client to sort of

1587
01:10:57,060 --> 01:10:58,620
public interface

1588
01:10:58,620 --> 01:11:00,360
and then from public interface to where

1589
01:11:00,360 --> 01:11:02,640
we are or have a different reason you

1590
01:11:02,640 --> 01:11:06,320
know invent your own next slide

1591
01:11:06,360 --> 01:11:07,260
um

1592
01:11:07,260 --> 01:11:09,179
I think I said all that but what I would

1593
01:11:09,179 --> 01:11:14,219
say is there is no single answer

1594
01:11:14,219 --> 01:11:17,100
so what this means if you think you can

1595
01:11:17,100 --> 01:11:20,520
rely on eh getting through as a code

1596
01:11:20,520 --> 01:11:22,920
developer you are wrong

1597
01:11:22,920 --> 01:11:26,100
it might work or it might not

1598
01:11:26,100 --> 01:11:28,500
and the context of where it's being used

1599
01:11:28,500 --> 01:11:31,800
has a much greater bearing than the

1600
01:11:31,800 --> 01:11:33,600
particular eh option you're actually

1601
01:11:33,600 --> 01:11:37,440
using right so it can't be relied upon

1602
01:11:37,440 --> 01:11:39,480
is the real message and that includes

1603
01:11:39,480 --> 01:11:40,800
fragmentation

1604
01:11:40,800 --> 01:11:43,739
it can't be relied upon to work

1605
01:11:43,739 --> 01:11:45,739
everywhere all the time

1606
01:11:45,739 --> 01:11:48,540
and hbh is dead

1607
01:11:48,540 --> 01:11:51,060
except if you're a you know behind a

1608
01:11:51,060 --> 01:11:52,920
telescat in Egypt and then it's only

1609
01:11:52,920 --> 01:11:55,380
slightly dead yay

1610
01:11:55,380 --> 01:11:56,580
um

1611
01:11:56,580 --> 01:11:59,340
don't use it next slide

1612
01:11:59,340 --> 01:12:01,860
thank you questions I think I've got two

1613
01:12:01,860 --> 01:12:05,059
minutes and 34 seconds

1614
01:12:09,199 --> 01:12:12,300
a very stupid question when you see that

1615
01:12:12,300 --> 01:12:15,719
drop rate increases with the size you

1616
01:12:15,719 --> 01:12:17,580
have a spike right

1617
01:12:17,580 --> 01:12:21,239
do you if you see unfragmented packet of

1618
01:12:21,239 --> 01:12:24,120
different sizes do you see any drops

1619
01:12:24,120 --> 01:12:25,920
Spike there because I'm thinking about

1620
01:12:25,920 --> 01:12:28,080
empty you somewhere

1621
01:12:28,080 --> 01:12:31,739
I am in the middle of a TCP session

1622
01:12:31,739 --> 01:12:34,800
right and I've actually got a client

1623
01:12:34,800 --> 01:12:37,800
same server same client where I'm not

1624
01:12:37,800 --> 01:12:40,560
going through the front end in any case

1625
01:12:40,560 --> 01:12:42,360
I've already set up an experiment

1626
01:12:42,360 --> 01:12:45,179
context this is not the first time that

1627
01:12:45,179 --> 01:12:47,300
server has talked to that client in V6

1628
01:12:47,300 --> 01:12:49,920
the conversation that set the experiment

1629
01:12:49,920 --> 01:12:53,159
up not being measured separate TCP

1630
01:12:53,159 --> 01:12:55,860
conversation is not being if you will

1631
01:12:55,860 --> 01:12:58,679
diddled and deliberately fragmented

1632
01:12:58,679 --> 01:13:02,100
so I know that normal packets in V6

1633
01:13:02,100 --> 01:13:05,340
including a TLS extension big packets

1634
01:13:05,340 --> 01:13:08,159
are actually making it through otherwise

1635
01:13:08,159 --> 01:13:10,140
I'd never have started the TLs extension

1636
01:13:10,140 --> 01:13:11,820
you know the TLs handshake would never

1637
01:13:11,820 --> 01:13:14,159
have completed so if a fair degree of

1638
01:13:14,159 --> 01:13:16,320
confidence and I haven't actually gone

1639
01:13:16,320 --> 01:13:18,060
through and gone a b comparison on

1640
01:13:18,060 --> 01:13:19,679
everyone but of a fairly way of

1641
01:13:19,679 --> 01:13:22,199
confidence that this is not that person

1642
01:13:22,199 --> 01:13:24,000
is uncontactable

1643
01:13:24,000 --> 01:13:26,340
this is saying when I deliberately

1644
01:13:26,340 --> 01:13:28,980
fragment the packet I can't see any more

1645
01:13:28,980 --> 01:13:32,280
acts that's where it goes bad

1646
01:13:32,280 --> 01:13:34,380
so not a stupid question very good

1647
01:13:34,380 --> 01:13:36,900
question but no it's not due to the fact

1648
01:13:36,900 --> 01:13:38,640
that they don't like any packet at all

1649
01:13:38,640 --> 01:13:42,320
they really don't like Frags

1650
01:13:44,480 --> 01:13:47,159
excellent uh

1651
01:13:47,159 --> 01:13:49,980
hey Jeff uh really a lot of great data

1652
01:13:49,980 --> 01:13:51,719
thanks for doing this

1653
01:13:51,719 --> 01:13:53,760
what I'm taking away is there's a lot of

1654
01:13:53,760 --> 01:13:56,159
unexplained situations and a lot of

1655
01:13:56,159 --> 01:13:58,080
unanswered questions what do you see as

1656
01:13:58,080 --> 01:13:59,820
the next steps for maybe pursuing

1657
01:13:59,820 --> 01:14:02,880
getting some of those answers well

1658
01:14:02,880 --> 01:14:06,600
if you think EHS can be made to work

1659
01:14:06,600 --> 01:14:09,239
I'd love to be as optimistic as whoever

1660
01:14:09,239 --> 01:14:10,560
thinks that

1661
01:14:10,560 --> 01:14:14,640
I have no such optimism point one

1662
01:14:14,640 --> 01:14:16,080
point two

1663
01:14:16,080 --> 01:14:18,719
if you think you can make fragmentation

1664
01:14:18,719 --> 01:14:20,940
work in UDP

1665
01:14:20,940 --> 01:14:24,540
good luck I don't share that optimism

1666
01:14:24,540 --> 01:14:26,699
so what this really means is that unless

1667
01:14:26,699 --> 01:14:29,880
you truly understand not just the two

1668
01:14:29,880 --> 01:14:31,800
ends but the environment in which you're

1669
01:14:31,800 --> 01:14:33,600
hoping for this to work

1670
01:14:33,600 --> 01:14:36,659
you can't count on an arbitrary

1671
01:14:36,659 --> 01:14:38,520
environment working

1672
01:14:38,520 --> 01:14:41,880
and you can't hope to fix it

1673
01:14:41,880 --> 01:14:44,820
it's gone it's dead

1674
01:14:44,820 --> 01:14:47,580
you might be able to salvage a point to

1675
01:14:47,580 --> 01:14:49,260
point out of all of this

1676
01:14:49,260 --> 01:14:52,440
but that's not assured until you try it

1677
01:14:52,440 --> 01:14:56,460
so the eh story in V6 is mostly dead

1678
01:14:56,460 --> 01:14:58,620
but if you search for signs of life you

1679
01:14:58,620 --> 01:15:00,480
might be lucky in a particular config

1680
01:15:00,480 --> 01:15:03,000
but that's not the general rule you said

1681
01:15:03,000 --> 01:15:04,560
some pretty bleak things with a smile

1682
01:15:04,560 --> 01:15:09,260
there but if if what else can I do

1683
01:15:09,260 --> 01:15:12,360
keep your attitudes up right

1684
01:15:12,360 --> 01:15:15,120
um thanks Dave but it is if we do try to

1685
01:15:15,120 --> 01:15:17,100
solve some of these things as the I.T up

1686
01:15:17,100 --> 01:15:19,800
the right place to do it

1687
01:15:19,800 --> 01:15:21,060
um we're getting to the point where the

1688
01:15:21,060 --> 01:15:24,140
deployed mass of V6 has its own Bleak

1689
01:15:24,140 --> 01:15:27,239
implementation stasis and the amount of

1690
01:15:27,239 --> 01:15:29,520
crap CPE out there is now an

1691
01:15:29,520 --> 01:15:31,920
irredeemable problem the amount of

1692
01:15:31,920 --> 01:15:34,800
operator I'm being driven by contractors

1693
01:15:34,800 --> 01:15:36,540
and what's in the box and I have no idea

1694
01:15:36,540 --> 01:15:38,520
what I did yesterday yet let alone what

1695
01:15:38,520 --> 01:15:40,500
I did two years ago says it ain't going

1696
01:15:40,500 --> 01:15:43,020
to get fixed we have to live with what

1697
01:15:43,020 --> 01:15:45,420
we do what does quick do

1698
01:15:45,420 --> 01:15:47,640
no packet bigger than I think it was

1699
01:15:47,640 --> 01:15:49,500
1340 at one point in these days it's

1700
01:15:49,500 --> 01:15:51,120
1200.

1701
01:15:51,120 --> 01:15:53,880
so quick is actually going I don't care

1702
01:15:53,880 --> 01:15:57,659
about fixing this 1200 works and I can

1703
01:15:57,659 --> 01:16:00,420
really understand the pragmatism that's

1704
01:16:00,420 --> 01:16:02,699
gone into that thinking instead of

1705
01:16:02,699 --> 01:16:05,159
trying to fix you know the elephant just

1706
01:16:05,159 --> 01:16:06,719
simply go through a path that gives you

1707
01:16:06,719 --> 01:16:08,940
a much higher Assurance of success and

1708
01:16:08,940 --> 01:16:10,199
forget about the other rest of the

1709
01:16:10,199 --> 01:16:12,780
problems thanks again one more quicker

1710
01:16:12,780 --> 01:16:14,400
you mentioned something about Windows

1711
01:16:14,400 --> 01:16:17,100
doesn't apply or hardly everyone runs it

1712
01:16:17,100 --> 01:16:18,840
that's all

1713
01:16:18,840 --> 01:16:21,120
we're talking eyeball highball systems

1714
01:16:21,120 --> 01:16:23,280
Windows is dead

1715
01:16:23,280 --> 01:16:25,980
uh so yeah I I can only say that in

1716
01:16:25,980 --> 01:16:28,560
Enterprises that that Windows is huge

1717
01:16:28,560 --> 01:16:31,679
well in the ad system in the ad system

1718
01:16:31,679 --> 01:16:35,100
either they don't get ads interesting

1719
01:16:35,100 --> 01:16:37,080
or they're not really running Windows so

1720
01:16:37,080 --> 01:16:39,360
they they're not used in your testing

1721
01:16:39,360 --> 01:16:42,320
scenarios they're not used where ADS go

1722
01:16:42,320 --> 01:16:45,960
eyeballs different questions

1723
01:16:45,960 --> 01:16:48,120
thank you again well thanks sister thank

1724
01:16:48,120 --> 01:16:49,080
you

1725
01:16:49,080 --> 01:16:50,520
that'll be quick we're running out of

1726
01:16:50,520 --> 01:16:51,780
time

1727
01:16:51,780 --> 01:16:54,120
but yeah one more question uh so very

1728
01:16:54,120 --> 01:16:55,440
interesting data

1729
01:16:55,440 --> 01:16:58,380
um so how many uh from how many servers

1730
01:16:58,380 --> 01:16:59,940
did you do your testing to how many

1731
01:16:59,940 --> 01:17:01,860
clients I sorry if I missed it and it

1732
01:17:01,860 --> 01:17:03,900
was in the slides uh number of servers

1733
01:17:03,900 --> 01:17:06,360
is currently six points around the world

1734
01:17:06,360 --> 01:17:07,679
they're all linode so they're all

1735
01:17:07,679 --> 01:17:10,020
running inside Akamai number of clients

1736
01:17:10,020 --> 01:17:12,420
the Google ad system is truly prolific

1737
01:17:12,420 --> 01:17:15,600
it tries like crazy to deliver 28

1738
01:17:15,600 --> 01:17:19,620
million new endpoints every single day I

1739
01:17:19,620 --> 01:17:21,960
don't retest the same people I just test

1740
01:17:21,960 --> 01:17:23,880
whoever Google throw at me and Google

1741
01:17:23,880 --> 01:17:26,280
are bloody good at giving me this point

1742
01:17:26,280 --> 01:17:29,040
just under 30 million new clients every

1743
01:17:29,040 --> 01:17:31,260
single day and do you have any idea in

1744
01:17:31,260 --> 01:17:34,440
how many as is overall all of them all

1745
01:17:34,440 --> 01:17:36,960
of them have you seen an ad hands up

1746
01:17:36,960 --> 01:17:39,300
everyone who's seen an ad there you go

1747
01:17:39,300 --> 01:17:41,040
it's as big

1748
01:17:41,040 --> 01:17:43,260
no but realistically from the Pharaoh

1749
01:17:43,260 --> 01:17:46,880
Islands right through we see everything

1750
01:17:46,880 --> 01:17:49,739
uh I would be very interested to see the

1751
01:17:49,739 --> 01:17:51,600
split of asses especially because

1752
01:17:51,600 --> 01:17:53,699
they're on the web pages I can show you

1753
01:17:53,699 --> 01:17:55,080
where all the web pages are they tell

1754
01:17:55,080 --> 01:17:56,520
you all the sample rates per right yes

1755
01:17:56,520 --> 01:17:58,380
cool awesome thank you

1756
01:17:58,380 --> 01:18:01,500
we're done thank you

1757
01:18:01,500 --> 01:18:07,909
[Applause]

1758
01:18:10,580 --> 01:18:13,739
all right the other one of yours

1759
01:18:13,739 --> 01:18:18,659
I think you're up again sorry uh dfcp

1760
01:18:18,659 --> 01:18:22,699
oh it's me again yep hi

1761
01:18:23,880 --> 01:18:25,739
yes uh

1762
01:18:25,739 --> 01:18:28,260
uh hi again uh I'm going to switch

1763
01:18:28,260 --> 01:18:30,420
context for a bit and now we're going to

1764
01:18:30,420 --> 01:18:31,920
talk about the magical world of

1765
01:18:31,920 --> 01:18:34,620
differentiated Services code points

1766
01:18:34,620 --> 01:18:37,080
so a bit of context for this uh I gave

1767
01:18:37,080 --> 01:18:41,580
this presentation in tsbwg at ietf113 uh

1768
01:18:41,580 --> 01:18:45,120
and then it got picked up by by Bob Bob

1769
01:18:45,120 --> 01:18:47,520
hinden who suggested that you lot might

1770
01:18:47,520 --> 01:18:49,080
be very interested in these measurements

1771
01:18:49,080 --> 01:18:52,560
so here I am presenting it

1772
01:18:52,560 --> 01:18:53,460
um

1773
01:18:53,460 --> 01:18:56,040
ah it's the it's the old slide deck it's

1774
01:18:56,040 --> 01:18:57,060
got some

1775
01:18:57,060 --> 01:18:59,760
it's okay we can go through it okay it

1776
01:18:59,760 --> 01:19:01,500
does have a bit of some animation

1777
01:19:01,500 --> 01:19:02,640
glitches

1778
01:19:02,640 --> 01:19:05,060
right

1779
01:19:05,699 --> 01:19:07,920
um but I'm about to present to you some

1780
01:19:07,920 --> 01:19:10,140
data that underpins this draft that I

1781
01:19:10,140 --> 01:19:12,900
have in dsvwg called considerations for

1782
01:19:12,900 --> 01:19:15,120
assigning the saps

1783
01:19:15,120 --> 01:19:17,400
I can pick refresh in case the new ones

1784
01:19:17,400 --> 01:19:20,460
I uploaded them they might not have

1785
01:19:20,460 --> 01:19:21,900
okay

1786
01:19:21,900 --> 01:19:25,560
areas that they

1787
01:19:25,560 --> 01:19:28,520
refresh button

1788
01:19:30,120 --> 01:19:33,239
we uploaded them but did it actually

1789
01:19:33,239 --> 01:19:36,919
process them we will find out

1790
01:19:39,960 --> 01:19:42,560
share

1791
01:19:43,380 --> 01:19:46,199
is this the new ones the title is still

1792
01:19:46,199 --> 01:19:50,659
the old one that's okay that's fine cool

1793
01:19:50,659 --> 01:19:52,860
uh right so

1794
01:19:52,860 --> 01:19:54,840
some background about differentiated

1795
01:19:54,840 --> 01:19:57,360
Services code points well

1796
01:19:57,360 --> 01:20:01,199
uh they exist they live in the IP header

1797
01:20:01,199 --> 01:20:03,780
they are a differentiated Services code

1798
01:20:03,780 --> 01:20:07,920
point is a essentially a value defined

1799
01:20:07,920 --> 01:20:10,920
in a six-bit wide field

1800
01:20:10,920 --> 01:20:12,900
um and it can encode value between 0 and

1801
01:20:12,900 --> 01:20:17,159
63. uh and this value is basically are

1802
01:20:17,159 --> 01:20:19,580
looked at by other routers on the path

1803
01:20:19,580 --> 01:20:22,020
who can then provide quality of service

1804
01:20:22,020 --> 01:20:25,860
within a disturbed domain based on that

1805
01:20:25,860 --> 01:20:27,900
particular sorry I think you skipped one

1806
01:20:27,900 --> 01:20:29,400
slide ahead

1807
01:20:29,400 --> 01:20:31,199
yeah

1808
01:20:31,199 --> 01:20:33,300
more context here

1809
01:20:33,300 --> 01:20:35,699
uh right so routers on the past um

1810
01:20:35,699 --> 01:20:37,500
essentially look at this field and they

1811
01:20:37,500 --> 01:20:39,239
can modify this field and they can

1812
01:20:39,239 --> 01:20:40,620
provide quality of service treatment

1813
01:20:40,620 --> 01:20:43,320
according to uh this value

1814
01:20:43,320 --> 01:20:46,860
uh now we have a divster field now but

1815
01:20:46,860 --> 01:20:50,219
before 1998 what we what do I what we

1816
01:20:50,219 --> 01:20:52,140
used to have is a toss byte and in the

1817
01:20:52,140 --> 01:20:54,179
tosbyte you had three bits the first

1818
01:20:54,179 --> 01:20:56,400
three bits uh called the Precedence

1819
01:20:56,400 --> 01:20:59,340
field and that was used in order to do

1820
01:20:59,340 --> 01:21:01,020
the same thing

1821
01:21:01,020 --> 01:21:04,560
this is important next slide please

1822
01:21:04,560 --> 01:21:07,560
well what happened in 1998 is that IFC

1823
01:21:07,560 --> 01:21:10,500
2474 came along and said right guys

1824
01:21:10,500 --> 01:21:12,239
we're no longer doing IP presidents

1825
01:21:12,239 --> 01:21:13,679
we're now doing diff surf if you

1826
01:21:13,679 --> 01:21:15,120
implement diffserv you will be looking

1827
01:21:15,120 --> 01:21:18,300
at this 6-bit wide field and you won't

1828
01:21:18,300 --> 01:21:19,800
be looking at the previous three bit

1829
01:21:19,800 --> 01:21:20,880
field

1830
01:21:20,880 --> 01:21:22,739
and in order to provide backwards

1831
01:21:22,739 --> 01:21:24,900
compatibility it essentially defined

1832
01:21:24,900 --> 01:21:27,900
some new dsps that are called class

1833
01:21:27,900 --> 01:21:30,540
elector tscps and they keep

1834
01:21:30,540 --> 01:21:32,120
compatibility in the following way

1835
01:21:32,120 --> 01:21:34,320
essentially it's all of the eight values

1836
01:21:34,320 --> 01:21:37,920
that would have been encoded in the IP

1837
01:21:37,920 --> 01:21:40,260
precedence field and you take all of

1838
01:21:40,260 --> 01:21:41,640
them and you stick three zeros at the

1839
01:21:41,640 --> 01:21:44,820
end and voila you have your tscps next

1840
01:21:44,820 --> 01:21:47,100
slide please

1841
01:21:47,100 --> 01:21:50,880
so the sap did take off and here you can

1842
01:21:50,880 --> 01:21:52,500
see all of the code points between 0 and

1843
01:21:52,500 --> 01:21:55,860
63 they are arranged in an 8x8 grid and

1844
01:21:55,860 --> 01:21:58,080
I'm going to show you on the grid which

1845
01:21:58,080 --> 01:22:00,300
values have been assigned

1846
01:22:00,300 --> 01:22:02,400
uh next

1847
01:22:02,400 --> 01:22:05,520
so I mentioned ifc2474 defined all of

1848
01:22:05,520 --> 01:22:07,560
this class selector code points and they

1849
01:22:07,560 --> 01:22:10,739
are signed next

1850
01:22:10,739 --> 01:22:13,920
then in 1999 one year one year later you

1851
01:22:13,920 --> 01:22:15,300
start getting all of the assured

1852
01:22:15,300 --> 01:22:16,679
forwarding code points which also

1853
01:22:16,679 --> 01:22:18,900
include drop precedence and they are

1854
01:22:18,900 --> 01:22:22,639
assigned uh next

1855
01:22:22,679 --> 01:22:24,840
then uh

1856
01:22:24,840 --> 01:22:26,940
Along Comes EF

1857
01:22:26,940 --> 01:22:31,620
I think in 2001 and voice admit 10 years

1858
01:22:31,620 --> 01:22:34,080
later roughly in 2010 and then even 10

1859
01:22:34,080 --> 01:22:36,120
years later you get the the latest

1860
01:22:36,120 --> 01:22:39,239
allocation of lower effort which which

1861
01:22:39,239 --> 01:22:40,860
is called 0.1

1862
01:22:40,860 --> 01:22:42,960
next

1863
01:22:42,960 --> 01:22:45,840
on top of this you also have some code

1864
01:22:45,840 --> 01:22:47,280
points that are reserved for

1865
01:22:47,280 --> 01:22:50,599
experimental and local use

1866
01:22:50,880 --> 01:22:52,440
um basically if you take the binary

1867
01:22:52,440 --> 01:22:54,179
representation of the code points I've

1868
01:22:54,179 --> 01:22:56,520
just shown in red on the slide deck you

1869
01:22:56,520 --> 01:22:58,620
will see that they end in one one and

1870
01:22:58,620 --> 01:23:00,120
that's why they are on those two columns

1871
01:23:00,120 --> 01:23:02,400
and these are the reserved ones so

1872
01:23:02,400 --> 01:23:04,080
here's what the grid looks like

1873
01:23:04,080 --> 01:23:06,239
next slide please

1874
01:23:06,239 --> 01:23:09,120
uh now out of all of these allocated

1875
01:23:09,120 --> 01:23:10,980
code points which one which ones are

1876
01:23:10,980 --> 01:23:14,340
used it was is what I'm about to tell

1877
01:23:14,340 --> 01:23:16,320
you and how do I know this well I know

1878
01:23:16,320 --> 01:23:17,280
this because I've been doing

1879
01:23:17,280 --> 01:23:19,380
measurements uh with differentiated

1880
01:23:19,380 --> 01:23:23,520
Services code points ever since 2015.

1881
01:23:23,520 --> 01:23:24,960
and

1882
01:23:24,960 --> 01:23:27,420
I've looked at many different data sets

1883
01:23:27,420 --> 01:23:30,360
next please so for example by examining

1884
01:23:30,360 --> 01:23:33,239
uh web server replies you can see that

1885
01:23:33,239 --> 01:23:34,920
they use

1886
01:23:34,920 --> 01:23:35,760
um

1887
01:23:35,760 --> 01:23:37,560
the very popular short word in code

1888
01:23:37,560 --> 01:23:40,980
points f11 F21 some of them use CS3 and

1889
01:23:40,980 --> 01:23:42,300
even EF

1890
01:23:42,300 --> 01:23:44,640
next

1891
01:23:44,640 --> 01:23:46,620
by doing a trace routes within mobile

1892
01:23:46,620 --> 01:23:49,380
networks you normally see there that the

1893
01:23:49,380 --> 01:23:52,080
mobile networks like to remark all of

1894
01:23:52,080 --> 01:23:54,600
the incoming code points to

1895
01:23:54,600 --> 01:23:57,179
a single code Point normally it's B but

1896
01:23:57,179 --> 01:24:00,239
you also see if 11 and F12 and f13 being

1897
01:24:00,239 --> 01:24:01,860
popular choices that are used within

1898
01:24:01,860 --> 01:24:04,980
mobile networks next please

1899
01:24:04,980 --> 01:24:09,000
uh if we've also looked at passive data

1900
01:24:09,000 --> 01:24:11,400
traces collected by cada so like very

1901
01:24:11,400 --> 01:24:12,900
large pickup files

1902
01:24:12,900 --> 01:24:15,360
and in there we saw that for example

1903
01:24:15,360 --> 01:24:16,920
icmp traffic

1904
01:24:16,920 --> 01:24:21,239
often uses CS6 or 12.48 this is in line

1905
01:24:21,239 --> 01:24:23,640
with RFC 2474

1906
01:24:23,640 --> 01:24:27,420
so that's being used next

1907
01:24:27,420 --> 01:24:29,580
and then finally

1908
01:24:29,580 --> 01:24:32,340
by examining DNS server replies you see

1909
01:24:32,340 --> 01:24:34,260
they like to use code twins like cs1 or

1910
01:24:34,260 --> 01:24:37,679
CS4 and again AFE lab CAF 11 seems to be

1911
01:24:37,679 --> 01:24:39,179
a very popular one

1912
01:24:39,179 --> 01:24:40,800
uh as I've mentioned this is all

1913
01:24:40,800 --> 01:24:43,140
measurement data I've put some slides in

1914
01:24:43,140 --> 01:24:44,880
the appendix for you you can have a look

1915
01:24:44,880 --> 01:24:46,980
at but also I'm linking to the

1916
01:24:46,980 --> 01:24:48,780
conference paper and the Journal paper

1917
01:24:48,780 --> 01:24:50,699
that I've published at the time with

1918
01:24:50,699 --> 01:24:51,840
this

1919
01:24:51,840 --> 01:24:54,420
uh next please

1920
01:24:54,420 --> 01:24:56,520
so I'm gonna say

1921
01:24:56,520 --> 01:25:00,179
next next again to avoid the bug

1922
01:25:00,179 --> 01:25:01,980
and one more yeah

1923
01:25:01,980 --> 01:25:04,380
some of the colors disappear

1924
01:25:04,380 --> 01:25:08,760
right the measurement data also shows a

1925
01:25:08,760 --> 01:25:09,960
different problem

1926
01:25:09,960 --> 01:25:11,880
uh I've mentioned the president's field

1927
01:25:11,880 --> 01:25:15,179
and well it turns out that there's still

1928
01:25:15,179 --> 01:25:16,800
many routers in the internet that

1929
01:25:16,800 --> 01:25:18,300
actually use that field

1930
01:25:18,300 --> 01:25:21,540
and this uh is mostly seen in the form

1931
01:25:21,540 --> 01:25:24,000
of a pathology that we've called toss

1932
01:25:24,000 --> 01:25:26,820
precedence bleaching and what happens

1933
01:25:26,820 --> 01:25:28,800
here is that routers on the path

1934
01:25:28,800 --> 01:25:31,920
essentially take the diff surf field and

1935
01:25:31,920 --> 01:25:34,260
only clear out the first three most

1936
01:25:34,260 --> 01:25:37,500
significant bits of it and this is how

1937
01:25:37,500 --> 01:25:39,659
you end up so if you take a code Point

1938
01:25:39,659 --> 01:25:41,699
say 46 and

1939
01:25:41,699 --> 01:25:43,920
uh you think of it in binary and you

1940
01:25:43,920 --> 01:25:46,260
slash the first three bits and you make

1941
01:25:46,260 --> 01:25:48,480
them zero then you what you end up with

1942
01:25:48,480 --> 01:25:51,840
is code 0.6 if you do the same for say a

1943
01:25:51,840 --> 01:25:54,780
popular copy like f11 then it toss

1944
01:25:54,780 --> 01:25:56,699
president's speeches down to code point

1945
01:25:56,699 --> 01:25:57,600
two

1946
01:25:57,600 --> 01:26:00,120
so this is how you end up with a lot of

1947
01:26:00,120 --> 01:26:01,679
these very small code points between

1948
01:26:01,679 --> 01:26:03,719
zero and seven in the core of the

1949
01:26:03,719 --> 01:26:06,540
internet they Traverse seem to Traverse

1950
01:26:06,540 --> 01:26:08,760
a lot better than the rest of the code

1951
01:26:08,760 --> 01:26:10,320
points because of this particular

1952
01:26:10,320 --> 01:26:12,799
pathology

1953
01:26:12,840 --> 01:26:16,440
uh this is supported by a lot of data

1954
01:26:16,440 --> 01:26:17,639
we've done traces between mobile

1955
01:26:17,639 --> 01:26:19,199
networks tracers in the core of the

1956
01:26:19,199 --> 01:26:20,520
internet from many different Vantage

1957
01:26:20,520 --> 01:26:22,860
points uh We've looked at packet race

1958
01:26:22,860 --> 01:26:25,020
analysis I think I have some slides to

1959
01:26:25,020 --> 01:26:28,500
delve a bit deeper in these

1960
01:26:28,500 --> 01:26:29,820
um

1961
01:26:29,820 --> 01:26:32,940
but this shows up time and time again in

1962
01:26:32,940 --> 01:26:34,440
all the different kinds of networks we

1963
01:26:34,440 --> 01:26:35,460
tested

1964
01:26:35,460 --> 01:26:38,960
uh text please

1965
01:26:39,060 --> 01:26:41,280
right so this is the this problem of

1966
01:26:41,280 --> 01:26:43,080
first president speaking is a actually a

1967
01:26:43,080 --> 01:26:44,880
huge problem for the sap Gold Point

1968
01:26:44,880 --> 01:26:46,980
assignments because if you think about

1969
01:26:46,980 --> 01:26:49,260
it when you want to assign a new code

1970
01:26:49,260 --> 01:26:51,000
point

1971
01:26:51,000 --> 01:26:53,100
say you want to assign code point 17.

1972
01:26:53,100 --> 01:26:54,600
you wouldn't really want to do that

1973
01:26:54,600 --> 01:26:56,699
because if you apply those precedent

1974
01:26:56,699 --> 01:26:59,280
speech into code 2017 then what you get

1975
01:26:59,280 --> 01:27:02,699
is lower effort so that could be a huge

1976
01:27:02,699 --> 01:27:04,080
issue

1977
01:27:04,080 --> 01:27:07,380
um because of priority inversion

1978
01:27:07,380 --> 01:27:09,120
um but the the problem is to fault

1979
01:27:09,120 --> 01:27:11,280
because it also means you can't really

1980
01:27:11,280 --> 01:27:13,679
assign these small code points

1981
01:27:13,679 --> 01:27:14,460
um

1982
01:27:14,460 --> 01:27:16,320
because you have so many popular code

1983
01:27:16,320 --> 01:27:18,300
points that bleach down to say code 0.2

1984
01:27:18,300 --> 01:27:19,760
then you end up with a lot of traffic

1985
01:27:19,760 --> 01:27:22,380
aggregated to code 0.2 so you don't

1986
01:27:22,380 --> 01:27:24,120
really want to assign that code point

1987
01:27:24,120 --> 01:27:25,380
because there's already so much traffic

1988
01:27:25,380 --> 01:27:28,080
that carries it in the internet

1989
01:27:28,080 --> 01:27:28,739
um

1990
01:27:28,739 --> 01:27:31,320
next please

1991
01:27:31,320 --> 01:27:34,020
and the bug and next again

1992
01:27:34,020 --> 01:27:36,960
right so looking at these very small

1993
01:27:36,960 --> 01:27:39,719
code points you have zero which is best

1994
01:27:39,719 --> 01:27:41,280
effort you have one which is already

1995
01:27:41,280 --> 01:27:44,159
allocated two as I've said is kind of

1996
01:27:44,159 --> 01:27:46,080
polluted because all of these popular

1997
01:27:46,080 --> 01:27:47,520
code points bleach down to it so it

1998
01:27:47,520 --> 01:27:49,440
can't really be assigned or used then

1999
01:27:49,440 --> 01:27:53,880
you have three which is reserved next

2000
01:27:53,880 --> 01:27:56,400
then you have code.4 which has a

2001
01:27:56,400 --> 01:27:57,659
slightly different problem

2002
01:27:57,659 --> 01:28:01,139
in that it is being set by SSH traffic

2003
01:28:01,139 --> 01:28:02,460
everywhere

2004
01:28:02,460 --> 01:28:05,040
I mean not all of this no not all SSH

2005
01:28:05,040 --> 01:28:07,320
traffic but the majority of it will use

2006
01:28:07,320 --> 01:28:09,540
4.4 for also for historical reasons

2007
01:28:09,540 --> 01:28:12,420
which proceed they observe

2008
01:28:12,420 --> 01:28:14,219
next

2009
01:28:14,219 --> 01:28:16,639
you have 4.5 which is up for grabs

2010
01:28:16,639 --> 01:28:19,620
code.6 has the same problem as code 0.2

2011
01:28:19,620 --> 01:28:22,020
because it's on the same column with ef

2012
01:28:22,020 --> 01:28:24,600
right and then you have code 0.7 which

2013
01:28:24,600 --> 01:28:27,659
is again not for use

2014
01:28:27,659 --> 01:28:29,699
so the situation looks quite Bleak

2015
01:28:29,699 --> 01:28:31,139
really right

2016
01:28:31,139 --> 01:28:33,360
next please

2017
01:28:33,360 --> 01:28:34,980
now I've mentioned the data that

2018
01:28:34,980 --> 01:28:36,590
underpins this

2019
01:28:36,590 --> 01:28:36,900
[Music]

2020
01:28:36,900 --> 01:28:38,900
um

2021
01:28:39,060 --> 01:28:41,460
basically we first started seeing this

2022
01:28:41,460 --> 01:28:44,400
in 2015 when we do Trace routes within

2023
01:28:44,400 --> 01:28:46,679
mobile networks uh we see that most

2024
01:28:46,679 --> 01:28:48,540
mobile networks like to remark but we

2025
01:28:48,540 --> 01:28:51,360
also see that outbound at appearing

2026
01:28:51,360 --> 01:28:52,800
between the mobile network and the

2027
01:28:52,800 --> 01:28:55,500
general internet you see uh toss

2028
01:28:55,500 --> 01:28:57,179
precedence bleaching happening

2029
01:28:57,179 --> 01:29:00,120
we revalidated this from the core of the

2030
01:29:00,120 --> 01:29:03,179
internet where we did tracers to several

2031
01:29:03,179 --> 01:29:06,060
web servers and there you quite clearly

2032
01:29:06,060 --> 01:29:08,120
see the different end-to-end traversal

2033
01:29:08,120 --> 01:29:10,920
for the different code points

2034
01:29:10,920 --> 01:29:12,600
uh smaller code points will always

2035
01:29:12,600 --> 01:29:14,400
Traverse better because of that

2036
01:29:14,400 --> 01:29:15,540
pathology

2037
01:29:15,540 --> 01:29:17,820
and we find out that

2038
01:29:17,820 --> 01:29:20,219
it happens on up to 20 of the past we

2039
01:29:20,219 --> 01:29:21,840
tested and in quite a lot of the routers

2040
01:29:21,840 --> 01:29:23,040
that we tested

2041
01:29:23,040 --> 01:29:26,000
next please

2042
01:29:26,100 --> 01:29:28,020
right then we see this again in data

2043
01:29:28,020 --> 01:29:30,239
that I did not collect this time this is

2044
01:29:30,239 --> 01:29:34,380
data provided by Keda so um Keda used to

2045
01:29:34,380 --> 01:29:36,120
they don't do it anymore but they used

2046
01:29:36,120 --> 01:29:38,340
to provide very large pickup files that

2047
01:29:38,340 --> 01:29:39,960
have millions no actually billions of

2048
01:29:39,960 --> 01:29:41,880
packets as you can see there

2049
01:29:41,880 --> 01:29:42,420
[Music]

2050
01:29:42,420 --> 01:29:43,139
um

2051
01:29:43,139 --> 01:29:45,000
they made them available to researchers

2052
01:29:45,000 --> 01:29:47,820
and basically these are choices of

2053
01:29:47,820 --> 01:29:50,219
traffic flowing at an internet exchange

2054
01:29:50,219 --> 01:29:51,719
point

2055
01:29:51,719 --> 01:29:54,420
so uh basically what you can do is take

2056
01:29:54,420 --> 01:29:56,580
these traces which are anonymized but

2057
01:29:56,580 --> 01:29:58,320
you can look at the DSP markings on them

2058
01:29:58,320 --> 01:30:00,840
and this is how what we found next slide

2059
01:30:00,840 --> 01:30:03,020
please

2060
01:30:06,840 --> 01:30:08,580
okay I don't know if this is too small

2061
01:30:08,580 --> 01:30:13,080
to read but we found that after be the

2062
01:30:13,080 --> 01:30:15,719
traffic flowing uh in that particular

2063
01:30:15,719 --> 01:30:18,719
internet exchange so a lot of you see

2064
01:30:18,719 --> 01:30:21,360
all of the small code points are are the

2065
01:30:21,360 --> 01:30:24,900
next step so you see the sap traffic

2066
01:30:24,900 --> 01:30:27,320
Mark with the acp2 accounts for up to 19

2067
01:30:27,320 --> 01:30:30,480
of traffic in the in in this particular

2068
01:30:30,480 --> 01:30:32,880
data set and this persists regardless of

2069
01:30:32,880 --> 01:30:36,060
how you split the traffic or what year

2070
01:30:36,060 --> 01:30:36,780
um

2071
01:30:36,780 --> 01:30:39,780
the data was collected in or even across

2072
01:30:39,780 --> 01:30:42,900
ipv4 and IPv6 you you see this pathology

2073
01:30:42,900 --> 01:30:44,940
and uh

2074
01:30:44,940 --> 01:30:46,980
the scp-2 is so prevalent because of

2075
01:30:46,980 --> 01:30:49,920
course it is what results from toss

2076
01:30:49,920 --> 01:30:52,620
bleaching of af11 and f1021 and all of

2077
01:30:52,620 --> 01:30:54,420
these popular code points at the edge

2078
01:30:54,420 --> 01:30:56,600
right

2079
01:30:57,900 --> 01:30:58,560
um

2080
01:30:58,560 --> 01:31:00,900
slide please

2081
01:31:00,900 --> 01:31:03,179
oh yeah finally

2082
01:31:03,179 --> 01:31:05,820
I'm not going to recap the right battles

2083
01:31:05,820 --> 01:31:07,080
test but you can still see the really

2084
01:31:07,080 --> 01:31:09,420
cool map there

2085
01:31:09,420 --> 01:31:11,280
um if you do a test from The Edge you

2086
01:31:11,280 --> 01:31:12,420
can still see that those bleaching

2087
01:31:12,420 --> 01:31:15,239
happens on up to 10 of us

2088
01:31:15,239 --> 01:31:18,300
um and this of course results in the

2089
01:31:18,300 --> 01:31:20,340
different traversal rates for high quad

2090
01:31:20,340 --> 01:31:22,679
prints versus the Low Bottom seven good

2091
01:31:22,679 --> 01:31:23,940
points

2092
01:31:23,940 --> 01:31:27,678
uh next slide please

2093
01:31:27,719 --> 01:31:29,159
right

2094
01:31:29,159 --> 01:31:31,500
okay so I mentioned this is a problem

2095
01:31:31,500 --> 01:31:32,940
for assignments and this is a problem

2096
01:31:32,940 --> 01:31:34,980
for assignments because recently there

2097
01:31:34,980 --> 01:31:37,020
has been some interest in assigned in

2098
01:31:37,020 --> 01:31:39,420
assigning a new dscp code point that has

2099
01:31:39,420 --> 01:31:41,400
internet wide scope

2100
01:31:41,400 --> 01:31:44,040
right because this serve Works in

2101
01:31:44,040 --> 01:31:46,800
different domains

2102
01:31:46,800 --> 01:31:49,260
uh and so you might think this is not

2103
01:31:49,260 --> 01:31:50,760
really a problem because why do you need

2104
01:31:50,760 --> 01:31:53,219
the dsap to work across the internet

2105
01:31:53,219 --> 01:31:54,960
well you have to think a bit about it

2106
01:31:54,960 --> 01:31:57,360
because you can either

2107
01:31:57,360 --> 01:31:59,940
accept that there are only two only

2108
01:31:59,940 --> 01:32:01,679
eight code points that can make it

2109
01:32:01,679 --> 01:32:03,659
across the internet and then you kind of

2110
01:32:03,659 --> 01:32:06,840
have to think of these as aggregates

2111
01:32:06,840 --> 01:32:08,639
um

2112
01:32:08,639 --> 01:32:10,739
but then you kind of accept that toast

2113
01:32:10,739 --> 01:32:11,940
president speeching is something that

2114
01:32:11,940 --> 01:32:13,860
happens and that is here to stay

2115
01:32:13,860 --> 01:32:17,699
or you can choose to to go the other way

2116
01:32:17,699 --> 01:32:19,380
and say no maybe those present speaking

2117
01:32:19,380 --> 01:32:21,060
shouldn't be happening and then all of

2118
01:32:21,060 --> 01:32:22,560
the code points can be used end to end

2119
01:32:22,560 --> 01:32:24,800
right

2120
01:32:24,960 --> 01:32:27,000
well

2121
01:32:27,000 --> 01:32:29,580
we've put all of this data in a draft I

2122
01:32:29,580 --> 01:32:30,840
encourage you to go and read it it's

2123
01:32:30,840 --> 01:32:32,280
called considerations for assigning new

2124
01:32:32,280 --> 01:32:34,560
dscps and it describes the pathologies

2125
01:32:34,560 --> 01:32:36,960
not just the first president speaking

2126
01:32:36,960 --> 01:32:38,699
which is the one I talk about today but

2127
01:32:38,699 --> 01:32:40,500
others

2128
01:32:40,500 --> 01:32:41,760
uh

2129
01:32:41,760 --> 01:32:43,280
uh so we describes all of the

2130
01:32:43,280 --> 01:32:45,780
pathologies that the saps are subjected

2131
01:32:45,780 --> 01:32:48,440
across an internet path

2132
01:32:48,440 --> 01:32:51,900
but also this data helped guide

2133
01:32:51,900 --> 01:32:54,239
discussion of

2134
01:32:54,239 --> 01:32:56,219
around the new code point

2135
01:32:56,219 --> 01:32:58,260
that was requested or rather a pair of

2136
01:32:58,260 --> 01:33:00,360
quotas that was requested in order to

2137
01:33:00,360 --> 01:33:02,820
provide like an end-to-end uh PHP across

2138
01:33:02,820 --> 01:33:04,380
the internet

2139
01:33:04,380 --> 01:33:06,420
so basically the non-q building traffic

2140
01:33:06,420 --> 01:33:09,300
craft originally proposed to the saps 45

2141
01:33:09,300 --> 01:33:11,639
and 5 essentially because of this

2142
01:33:11,639 --> 01:33:15,060
problem that I described but then

2143
01:33:15,060 --> 01:33:18,239
it worked out that only 45 was allocated

2144
01:33:18,239 --> 01:33:20,880
in the end because people didn't want to

2145
01:33:20,880 --> 01:33:23,100
risk making the the saps in that same

2146
01:33:23,100 --> 01:33:26,100
column unusable

2147
01:33:26,100 --> 01:33:27,540
um

2148
01:33:27,540 --> 01:33:30,000
yeah so we don't really know where to go

2149
01:33:30,000 --> 01:33:32,280
from here next slide please

2150
01:33:32,280 --> 01:33:34,139
because essentially we don't know that

2151
01:33:34,139 --> 01:33:35,159
much about

2152
01:33:35,159 --> 01:33:37,080
who does those presidents bleaching

2153
01:33:37,080 --> 01:33:38,960
because it might not just be old

2154
01:33:38,960 --> 01:33:41,219
misconfigured routers that do it by

2155
01:33:41,219 --> 01:33:43,620
mistake it might just be operators that

2156
01:33:43,620 --> 01:33:45,960
actually have policies like these

2157
01:33:45,960 --> 01:33:47,460
so

2158
01:33:47,460 --> 01:33:50,400
I have a survey if you are interested

2159
01:33:50,400 --> 01:33:52,080
you if you are an operator and you use

2160
01:33:52,080 --> 01:33:54,600
the dscps

2161
01:33:54,600 --> 01:33:56,580
um in your network and even if you don't

2162
01:33:56,580 --> 01:33:58,620
because this survey will ask you

2163
01:33:58,620 --> 01:34:00,719
questions about the saps extension

2164
01:34:00,719 --> 01:34:04,800
headers maybe even MTU

2165
01:34:04,800 --> 01:34:05,760
um

2166
01:34:05,760 --> 01:34:07,980
please complete this because I would be

2167
01:34:07,980 --> 01:34:09,360
very interested to understand how people

2168
01:34:09,360 --> 01:34:12,300
use dsps within their uh their networks

2169
01:34:12,300 --> 01:34:14,159
and see where we go from there because

2170
01:34:14,159 --> 01:34:15,960
we might end up making a draft that does

2171
01:34:15,960 --> 01:34:18,360
make actual recommendations on how to

2172
01:34:18,360 --> 01:34:20,520
assign your code points rather than just

2173
01:34:20,520 --> 01:34:22,199
an informational considerations draft

2174
01:34:22,199 --> 01:34:24,799
that we have now

2175
01:34:24,960 --> 01:34:28,320
right and that concludes my presentation

2176
01:34:28,320 --> 01:34:31,139
um great so I'm actually in the queue

2177
01:34:31,139 --> 01:34:33,360
um and I happen to be first

2178
01:34:33,360 --> 01:34:36,600
so I mean a lot of network devices still

2179
01:34:36,600 --> 01:34:38,580
have a very small like limited number of

2180
01:34:38,580 --> 01:34:43,159
queues like eight cues for interfaces

2181
01:34:44,120 --> 01:34:46,500
but they have a number of cues they can

2182
01:34:46,500 --> 01:34:47,520
buffer into

2183
01:34:47,520 --> 01:34:49,139
yep yep

2184
01:34:49,139 --> 01:34:51,840
um and a lot of operators obviously want

2185
01:34:51,840 --> 01:34:53,100
to be able to prioritize stuff like

2186
01:34:53,100 --> 01:34:55,860
routing updates and so sort of if you're

2187
01:34:55,860 --> 01:34:57,540
going to put those into some sort of yes

2188
01:34:57,540 --> 01:35:00,000
buffer queue you're gonna have to use at

2189
01:35:00,000 --> 01:35:01,980
least some of those and I suspect that

2190
01:35:01,980 --> 01:35:04,380
that likely means that you're gonna have

2191
01:35:04,380 --> 01:35:07,440
a hard time always with this

2192
01:35:07,440 --> 01:35:11,780
and that's me Tom

2193
01:35:12,659 --> 01:35:15,179
hi Tom Hill from BT

2194
01:35:15,179 --> 01:35:18,420
typically generically I suppose the the

2195
01:35:18,420 --> 01:35:19,739
problem is that

2196
01:35:19,739 --> 01:35:22,800
if you're accepting any form of tag like

2197
01:35:22,800 --> 01:35:24,960
this on a packet from your outside of

2198
01:35:24,960 --> 01:35:27,480
your domain yeah your as number your

2199
01:35:27,480 --> 01:35:28,620
routing them

2200
01:35:28,620 --> 01:35:30,600
it's informing your routers how to deal

2201
01:35:30,600 --> 01:35:33,360
with that traffic and operationally

2202
01:35:33,360 --> 01:35:35,639
unless you agree with the third party

2203
01:35:35,639 --> 01:35:37,440
over in another as number you really

2204
01:35:37,440 --> 01:35:39,179
don't want someone to tell you how to do

2205
01:35:39,179 --> 01:35:41,280
that without your knowledge and it can

2206
01:35:41,280 --> 01:35:45,900
sometimes have regulatory impact

2207
01:35:45,900 --> 01:35:48,600
um so net neutrality for example

2208
01:35:48,600 --> 01:35:50,400
um that isn't to say that everyone's

2209
01:35:50,400 --> 01:35:52,260
doing this perfectly in wiping

2210
01:35:52,260 --> 01:35:54,420
everything off the edges I think the

2211
01:35:54,420 --> 01:35:56,219
main

2212
01:35:56,219 --> 01:35:58,679
takeaway from here is that if you're

2213
01:35:58,679 --> 01:36:00,719
writing anything into this into those

2214
01:36:00,719 --> 01:36:02,580
bits you're not you don't care what's in

2215
01:36:02,580 --> 01:36:03,780
there in the first place you're

2216
01:36:03,780 --> 01:36:06,480
overwriting it carte blanche

2217
01:36:06,480 --> 01:36:08,639
yeah but then why overwrite only the

2218
01:36:08,639 --> 01:36:10,920
first three bits I mean I'm all for uh

2219
01:36:10,920 --> 01:36:13,739
treating unknown or dsaps that you don't

2220
01:36:13,739 --> 01:36:16,380
trust and remark them all say to zero

2221
01:36:16,380 --> 01:36:19,980
bleach them that's allowed by uh By the

2222
01:36:19,980 --> 01:36:23,520
Drop by by the ifcs should I say uh but

2223
01:36:23,520 --> 01:36:25,739
why why do toast presidents bleaching in

2224
01:36:25,739 --> 01:36:28,679
that case when you can just do it it's

2225
01:36:28,679 --> 01:36:30,000
probably a combination of a lack of

2226
01:36:30,000 --> 01:36:31,980
knowledge and a lack of nothing is

2227
01:36:31,980 --> 01:36:33,500
broken

2228
01:36:33,500 --> 01:36:36,060
if everything is working no one has time

2229
01:36:36,060 --> 01:36:38,520
to spend on this okay but I I find it

2230
01:36:38,520 --> 01:36:39,600
very interesting that you've done the

2231
01:36:39,600 --> 01:36:40,920
work and the research and I'd like to

2232
01:36:40,920 --> 01:36:43,320
keep to my sight on this in the future

2233
01:36:43,320 --> 01:36:44,880
so thank you

2234
01:36:44,880 --> 01:36:47,420
thank you

2235
01:36:49,679 --> 01:36:53,880
uh chair and March how can I uh a couple

2236
01:36:53,880 --> 01:36:56,100
just a couple things first of all a lot

2237
01:36:56,100 --> 01:36:58,260
of people get confused you know as I was

2238
01:36:58,260 --> 01:37:00,300
calling out uh Warren and the difference

2239
01:37:00,300 --> 01:37:02,340
between queuing and buffering because

2240
01:37:02,340 --> 01:37:04,500
most of the hardware does that the uh

2241
01:37:04,500 --> 01:37:06,480
similar to what Tom said yeah at the

2242
01:37:06,480 --> 01:37:09,060
network boundary you tend to uh stamp on

2243
01:37:09,060 --> 01:37:11,040
everything the other thing is there's a

2244
01:37:11,040 --> 01:37:12,600
lot of Hardware devices where the second

2245
01:37:12,600 --> 01:37:15,300
you turn on anything it automatically

2246
01:37:15,300 --> 01:37:16,739
just bleaches

2247
01:37:16,739 --> 01:37:19,080
everything because it assumes that

2248
01:37:19,080 --> 01:37:20,520
you're going to actually configure an

2249
01:37:20,520 --> 01:37:22,380
explicit policy on every interface

2250
01:37:22,380 --> 01:37:25,080
either if it's a permit or not and and

2251
01:37:25,080 --> 01:37:27,900
it'll just stop on everything with zeros

2252
01:37:27,900 --> 01:37:30,719
um and so I think uh I'm a little bit

2253
01:37:30,719 --> 01:37:32,639
you know I suspect that the reason why

2254
01:37:32,639 --> 01:37:35,040
the only so many bits are touched is

2255
01:37:35,040 --> 01:37:37,380
because that's all that's programmed in

2256
01:37:37,380 --> 01:37:40,500
the hardware because in most cases

2257
01:37:40,500 --> 01:37:42,300
um when you've got a hardware-based you

2258
01:37:42,300 --> 01:37:44,659
know Asic or forwarding chip or whatever

2259
01:37:44,659 --> 01:37:47,760
it only looks at those bits

2260
01:37:47,760 --> 01:37:49,980
uh you know at those first couple of

2261
01:37:49,980 --> 01:37:52,260
bits uh you know for the for all the

2262
01:37:52,260 --> 01:37:54,659
router devices that are that they're in

2263
01:37:54,659 --> 01:37:57,360
the hardware and so I suspect that that

2264
01:37:57,360 --> 01:38:00,060
is why it's only writing in those bits

2265
01:38:00,060 --> 01:38:02,100
as well

2266
01:38:02,100 --> 01:38:04,560
um so then is this equipment not

2267
01:38:04,560 --> 01:38:06,360
configured for diffserv if it's only

2268
01:38:06,360 --> 01:38:08,340
looking at three bits of what is a

2269
01:38:08,340 --> 01:38:10,260
six-bit field most people don't

2270
01:38:10,260 --> 01:38:12,980
configure that

2271
01:38:13,380 --> 01:38:15,060
most people just leave it in the default

2272
01:38:15,060 --> 01:38:16,860
configuration and the second you turn on

2273
01:38:16,860 --> 01:38:20,400
any sort of qos like I'm using a really

2274
01:38:20,400 --> 01:38:23,280
old example but like the Cisco 6500 that

2275
01:38:23,280 --> 01:38:24,600
a lot of people use the second you

2276
01:38:24,600 --> 01:38:27,360
turned on you typed the command mlsqls

2277
01:38:27,360 --> 01:38:29,100
into it it would just stomp on

2278
01:38:29,100 --> 01:38:30,120
everything

2279
01:38:30,120 --> 01:38:33,360
so I I suspect It's a combination of

2280
01:38:33,360 --> 01:38:35,040
several of those things which is why

2281
01:38:35,040 --> 01:38:36,120
you're seeing the behavior you're

2282
01:38:36,120 --> 01:38:38,760
observing super interesting though

2283
01:38:38,760 --> 01:38:41,179
cool

2284
01:38:42,020 --> 01:38:45,540
Alistair as someone who does

2285
01:38:45,540 --> 01:38:47,400
UDP services for a living do you see any

2286
01:38:47,400 --> 01:38:52,020
difference between UDP and TCP Behavior

2287
01:38:52,020 --> 01:38:54,679
could you repeat the question

2288
01:38:54,840 --> 01:38:57,540
do you see I I noticed that the

2289
01:38:57,540 --> 01:39:01,260
measurements mentioned TCP do you see

2290
01:39:01,260 --> 01:39:04,440
have you got any any measurements using

2291
01:39:04,440 --> 01:39:07,500
UDP and was there any difference uh okay

2292
01:39:07,500 --> 01:39:10,080
so this is uh you can find the details

2293
01:39:10,080 --> 01:39:11,820
so the short answer is no no difference

2294
01:39:11,820 --> 01:39:14,100
between TCP and UDP in this case and you

2295
01:39:14,100 --> 01:39:15,780
can find uh the breakdown of the

2296
01:39:15,780 --> 01:39:17,880
measurements in the Journal paper that

2297
01:39:17,880 --> 01:39:19,699
is

2298
01:39:19,699 --> 01:39:22,739
uh the second one the middle link

2299
01:39:22,739 --> 01:39:25,400
thank you

2300
01:39:26,820 --> 01:39:30,259
excellent thank you

2301
01:39:30,960 --> 01:39:36,360
[Applause]

2302
01:39:36,360 --> 01:39:39,600
and now we have our last and final

2303
01:39:39,600 --> 01:39:42,659
presentation unless I missed any

2304
01:39:42,659 --> 01:39:45,600
which is going to be

2305
01:39:45,600 --> 01:39:49,080
either Jeff or Joel talking about doe

2306
01:39:49,080 --> 01:39:51,060
versus Dot

2307
01:39:51,060 --> 01:39:53,659
sorry

2308
01:40:00,239 --> 01:40:02,219
again Joelle and I looked at each other

2309
01:40:02,219 --> 01:40:05,280
and evidently I met so

2310
01:40:05,280 --> 01:40:07,920
it wouldn't be an iepg meeting without

2311
01:40:07,920 --> 01:40:10,679
the DNS or bgp or both I might just

2312
01:40:10,679 --> 01:40:13,020
wouldn't put it and you haven't had your

2313
01:40:13,020 --> 01:40:16,320
daily dose of bgp but this is your dose

2314
01:40:16,320 --> 01:40:17,460
of DNS

2315
01:40:17,460 --> 01:40:20,340
and this is actually about trying to

2316
01:40:20,340 --> 01:40:22,139
understand

2317
01:40:22,139 --> 01:40:25,320
those recent moves to encrypted DNS

2318
01:40:25,320 --> 01:40:29,280
which is DNS over https and DNS over TLS

2319
01:40:29,280 --> 01:40:32,100
to what extent they're actually being

2320
01:40:32,100 --> 01:40:34,260
used today next slide

2321
01:40:34,260 --> 01:40:35,820
so I'll be quick there's not that much

2322
01:40:35,820 --> 01:40:38,219
in it but if you've been at all

2323
01:40:38,219 --> 01:40:39,360
following

2324
01:40:39,360 --> 01:40:41,400
um DNS deprive I think was the working

2325
01:40:41,400 --> 01:40:43,800
group there has been recent areas of

2326
01:40:43,800 --> 01:40:46,980
standardization in the ietf of DNS over

2327
01:40:46,980 --> 01:40:51,239
TLS over TCP and DNS over now this is

2328
01:40:51,239 --> 01:40:55,639
weird it was originally over HTTP 2 not

2329
01:40:55,639 --> 01:40:58,800
https2 and and then it's become DNS over

2330
01:40:58,800 --> 01:41:03,600
HTTP 3 almost by Collective action by

2331
01:41:03,600 --> 01:41:05,639
simply saying well it's HTTP and it all

2332
01:41:05,639 --> 01:41:07,440
gets swept in

2333
01:41:07,440 --> 01:41:08,340
um

2334
01:41:08,340 --> 01:41:09,840
so

2335
01:41:09,840 --> 01:41:12,179
you may have seen it when you've looked

2336
01:41:12,179 --> 01:41:14,340
in your platforms like Android at this

2337
01:41:14,340 --> 01:41:16,800
point there is a part of the config

2338
01:41:16,800 --> 01:41:20,219
screen that says add a secure DNS

2339
01:41:20,219 --> 01:41:22,620
resolver by name

2340
01:41:22,620 --> 01:41:25,020
and what that actually will do is

2341
01:41:25,020 --> 01:41:28,440
actually create a TLS Association and

2342
01:41:28,440 --> 01:41:30,780
authenticate the name of that name

2343
01:41:30,780 --> 01:41:33,900
resolver and then thereafter use DNS

2344
01:41:33,900 --> 01:41:36,900
over TLS to query that so this is in the

2345
01:41:36,900 --> 01:41:40,920
area by the way of stub to recursive

2346
01:41:40,920 --> 01:41:43,260
so this is the first hop

2347
01:41:43,260 --> 01:41:45,300
there is a parallel effort going on in

2348
01:41:45,300 --> 01:41:47,880
deprive to do recursive to authoritative

2349
01:41:47,880 --> 01:41:50,659
they're still in the middle of the swamp

2350
01:41:50,659 --> 01:41:53,420
the other place where you might see this

2351
01:41:53,420 --> 01:41:56,340
is where you actually don't have a big

2352
01:41:56,340 --> 01:41:59,100
ability to configure it yourself and

2353
01:41:59,100 --> 01:42:01,920
this the best example I can find is in

2354
01:42:01,920 --> 01:42:04,980
Firefox where I think it's about two

2355
01:42:04,980 --> 01:42:07,739
maybe three years ago they decided to

2356
01:42:07,739 --> 01:42:09,420
adopt what they called a trusted

2357
01:42:09,420 --> 01:42:11,699
recursive resolver program

2358
01:42:11,699 --> 01:42:15,480
where they would take queries made by a

2359
01:42:15,480 --> 01:42:18,119
client's use of Firefox and instead of

2360
01:42:18,119 --> 01:42:19,920
passing it down the platform libraries

2361
01:42:19,920 --> 01:42:22,199
to do a conventional resolution would

2362
01:42:22,199 --> 01:42:23,820
actually do the resolution inside

2363
01:42:23,820 --> 01:42:27,600
Firefox going to what they called one of

2364
01:42:27,600 --> 01:42:29,520
a small set of trusted recursive

2365
01:42:29,520 --> 01:42:31,500
resolvers and perform the whole

2366
01:42:31,500 --> 01:42:35,699
transaction using DNS over https

2367
01:42:35,699 --> 01:42:38,639
so using do next slide

2368
01:42:38,639 --> 01:42:42,000
so there was some evidence that this was

2369
01:42:42,000 --> 01:42:45,540
around and available but you know

2370
01:42:45,540 --> 01:42:47,760
the number of folk who twiddle with the

2371
01:42:47,760 --> 01:42:49,440
knobs on their platform

2372
01:42:49,440 --> 01:42:51,060
is probably fewer than the number of

2373
01:42:51,060 --> 01:42:52,500
people in this room

2374
01:42:52,500 --> 01:42:54,119
because you know you're going to break

2375
01:42:54,119 --> 01:42:55,800
something and then you're going to Brick

2376
01:42:55,800 --> 01:42:57,360
your device and then you know you're

2377
01:42:57,360 --> 01:42:59,520
going to feel guilty or something so in

2378
01:42:59,520 --> 01:43:02,100
some ways creating these facilities was

2379
01:43:02,100 --> 01:43:03,960
never ever going to change the needle it

2380
01:43:03,960 --> 01:43:06,540
was always going to be tiny unless a bit

2381
01:43:06,540 --> 01:43:09,119
like Firefox it took the decision out of

2382
01:43:09,119 --> 01:43:11,219
your hands it just did it where you

2383
01:43:11,219 --> 01:43:13,260
weren't consulted if you happen to be in

2384
01:43:13,260 --> 01:43:15,960
the US and you used Firefox your your

2385
01:43:15,960 --> 01:43:19,800
your DNS resolver started to use Doh and

2386
01:43:19,800 --> 01:43:23,159
you had no control next slide

2387
01:43:23,159 --> 01:43:25,260
so

2388
01:43:25,260 --> 01:43:27,420
hijacked yes you can call it that if you

2389
01:43:27,420 --> 01:43:28,619
want Jared

2390
01:43:28,619 --> 01:43:31,440
um so the issue is thank you the issue

2391
01:43:31,440 --> 01:43:34,560
is how successful are these measures you

2392
01:43:34,560 --> 01:43:36,719
know after all this standardization does

2393
01:43:36,719 --> 01:43:38,639
anyone actually use it

2394
01:43:38,639 --> 01:43:41,460
now if you run an authoritative server

2395
01:43:41,460 --> 01:43:43,139
it doesn't help

2396
01:43:43,139 --> 01:43:46,560
because stubs don't ask authoritives so

2397
01:43:46,560 --> 01:43:49,500
it doesn't really matter how recursives

2398
01:43:49,500 --> 01:43:50,580
ask you

2399
01:43:50,580 --> 01:43:53,040
you can't see how the stub asked the

2400
01:43:53,040 --> 01:43:55,619
recursive so authoritative server data

2401
01:43:55,619 --> 01:43:58,380
is of no help root server data day in

2402
01:43:58,380 --> 01:44:00,840
the life doesn't help so none of that

2403
01:44:00,840 --> 01:44:02,460
data is of any use if you're trying to

2404
01:44:02,460 --> 01:44:03,540
measure this

2405
01:44:03,540 --> 01:44:06,840
now I can measure me as a stub resolver

2406
01:44:06,840 --> 01:44:08,520
and you can measure U

2407
01:44:08,520 --> 01:44:10,619
but there are another four billion five

2408
01:44:10,619 --> 01:44:13,260
billion odd stubs out there and I'll

2409
01:44:13,260 --> 01:44:15,840
readily claim that I'm an anomaly and

2410
01:44:15,840 --> 01:44:17,340
compared to the other four or five

2411
01:44:17,340 --> 01:44:19,400
billion you're probably an anomaly too

2412
01:44:19,400 --> 01:44:22,800
so small stub data sets don't really

2413
01:44:22,800 --> 01:44:24,179
help either

2414
01:44:24,179 --> 01:44:26,699
and while it would be really good to

2415
01:44:26,699 --> 01:44:29,040
look over the eye shoulder of some

2416
01:44:29,040 --> 01:44:31,820
large-scale recursive resolver operator

2417
01:44:31,820 --> 01:44:35,639
or some large-scale ISP that does

2418
01:44:35,639 --> 01:44:37,560
recursive resolution

2419
01:44:37,560 --> 01:44:40,199
the privacy of that data is almost

2420
01:44:40,199 --> 01:44:42,480
absolute and I can't blame them either

2421
01:44:42,480 --> 01:44:44,940
this is really sensitive data it's what

2422
01:44:44,940 --> 01:44:47,699
you and I Ask of the DNS

2423
01:44:47,699 --> 01:44:50,340
and and that data is extraordinarily

2424
01:44:50,340 --> 01:44:53,699
sensitive and properly so so while in

2425
01:44:53,699 --> 01:44:55,739
theory the data might exist

2426
01:44:55,739 --> 01:44:58,139
it's very very difficult to get hold of

2427
01:44:58,139 --> 01:44:59,940
because of that sensitivity

2428
01:44:59,940 --> 01:45:02,599
next

2429
01:45:02,639 --> 01:45:04,320
except

2430
01:45:04,320 --> 01:45:07,679
now there was one provider cloudflare

2431
01:45:07,679 --> 01:45:10,020
who was desperate

2432
01:45:10,020 --> 01:45:13,020
to use 1.1.1.1

2433
01:45:13,020 --> 01:45:16,320
and one rir AP Nick

2434
01:45:16,320 --> 01:45:18,119
that had it

2435
01:45:18,119 --> 01:45:21,260
and and so we we came to a deal

2436
01:45:21,260 --> 01:45:26,219
uh we would let them use 1.1.1.1

2437
01:45:26,219 --> 01:45:29,040
but for research purposes we would get

2438
01:45:29,040 --> 01:45:31,560
to see a certain amount of the traffic

2439
01:45:31,560 --> 01:45:33,780
the query traffic

2440
01:45:33,780 --> 01:45:35,060
that hits

2441
01:45:35,060 --> 01:45:38,960
1.1.1.1 now I don't know if you're using

2442
01:45:38,960 --> 01:45:42,659
1.1.1.1 that it was you I have no idea I

2443
01:45:42,659 --> 01:45:44,159
don't know who's query

2444
01:45:44,159 --> 01:45:47,159
but I do see the protocol you use to

2445
01:45:47,159 --> 01:45:48,780
make that query

2446
01:45:48,780 --> 01:45:50,460
so

2447
01:45:50,460 --> 01:45:53,040
I get to see cloudflare which is a big

2448
01:45:53,040 --> 01:45:56,100
open resolver it's around four percent

2449
01:45:56,100 --> 01:46:00,119
of users worldwide so it's non-trivial

2450
01:46:00,119 --> 01:46:03,060
next slide

2451
01:46:03,060 --> 01:46:04,500
Oh I thought there was another thing

2452
01:46:04,500 --> 01:46:07,820
there next slide is there a

2453
01:46:07,820 --> 01:46:11,460
yeah no back one back two

2454
01:46:11,460 --> 01:46:13,020
I was just going to prove that it's four

2455
01:46:13,020 --> 01:46:14,699
percent yeah that's the one how did that

2456
01:46:14,699 --> 01:46:17,460
not get up there I don't know yeah right

2457
01:46:17,460 --> 01:46:21,360
um Google currently of the resolvers

2458
01:46:21,360 --> 01:46:24,540
that people use operate around a 16

2459
01:46:24,540 --> 01:46:26,840
market share

2460
01:46:26,840 --> 01:46:29,820
one in seven users

2461
01:46:29,820 --> 01:46:32,940
believe what Google tell them

2462
01:46:32,940 --> 01:46:35,400
because that's the first recursive

2463
01:46:35,400 --> 01:46:38,400
resolver that offers back an answer

2464
01:46:38,400 --> 01:46:41,940
that they believe so Google has a

2465
01:46:41,940 --> 01:46:44,820
dominant share of the open recursive

2466
01:46:44,820 --> 01:46:48,239
market area of the globe but cloudflare

2467
01:46:48,239 --> 01:46:49,800
is certainly number two

2468
01:46:49,800 --> 01:46:52,800
and currently its share is around just

2469
01:46:52,800 --> 01:46:54,900
under four percent of all users

2470
01:46:54,900 --> 01:46:56,760
worldwide

2471
01:46:56,760 --> 01:46:59,340
um open DNS still has residual use in

2472
01:46:59,340 --> 01:47:00,540
Quad nine

2473
01:47:00,540 --> 01:47:04,080
but you know cloudflare is not nothing

2474
01:47:04,080 --> 01:47:05,760
it's not as massive as Google but it's

2475
01:47:05,760 --> 01:47:07,980
certainly significant next

2476
01:47:07,980 --> 01:47:10,679
so now we bring back the next point I

2477
01:47:10,679 --> 01:47:13,159
want to make that

2478
01:47:13,159 --> 01:47:15,780
cloudflare is a trusted recursive

2479
01:47:15,780 --> 01:47:16,800
resolver

2480
01:47:16,800 --> 01:47:20,820
and so this data is loaded with Firefox

2481
01:47:20,820 --> 01:47:23,940
data that would not be present if you

2482
01:47:23,940 --> 01:47:26,760
were using the view from your ISP would

2483
01:47:26,760 --> 01:47:28,920
not be present if you're using you know

2484
01:47:28,920 --> 01:47:31,500
a conventional recursive resolver so

2485
01:47:31,500 --> 01:47:34,500
it's biased and skewed right just

2486
01:47:34,500 --> 01:47:36,300
remember that next

2487
01:47:36,300 --> 01:47:39,300
so this then brings us to about the only

2488
01:47:39,300 --> 01:47:42,480
slide that's really of material context

2489
01:47:42,480 --> 01:47:43,139
um

2490
01:47:43,139 --> 01:47:45,900
cloudflare sees about 75 percent of

2491
01:47:45,900 --> 01:47:49,440
queries coming in over UDP nada

2492
01:47:49,440 --> 01:47:52,320
but the next biggest and Rising very

2493
01:47:52,320 --> 01:47:53,520
slowly

2494
01:47:53,520 --> 01:47:56,820
But Rising is 20 which is actually

2495
01:47:56,820 --> 01:48:01,020
coming in over DNS over http

2496
01:48:01,020 --> 01:48:04,080
not over TLS over http

2497
01:48:04,080 --> 01:48:06,179
and the number of folk who have twiddled

2498
01:48:06,179 --> 01:48:08,639
with the knob somehow and using DNS over

2499
01:48:08,639 --> 01:48:11,940
TLS slightly under five percent

2500
01:48:11,940 --> 01:48:14,219
and in cloudflare's case the number of

2501
01:48:14,219 --> 01:48:16,619
folks who use TCP either because they

2502
01:48:16,619 --> 01:48:18,900
got the truncation bit in UDP or they

2503
01:48:18,900 --> 01:48:21,900
just felt like using TCP is down at

2504
01:48:21,900 --> 01:48:24,119
below one percent so oddly enough it's

2505
01:48:24,119 --> 01:48:25,619
Doh

2506
01:48:25,619 --> 01:48:28,260
that has captured a fair amount in

2507
01:48:28,260 --> 01:48:29,699
cloudflare's view

2508
01:48:29,699 --> 01:48:32,219
of the way in which we encrypt stub to

2509
01:48:32,219 --> 01:48:35,400
recursive and DNS over TLS

2510
01:48:35,400 --> 01:48:37,380
is actually a far lower about a quarter

2511
01:48:37,380 --> 01:48:39,600
next

2512
01:48:39,600 --> 01:48:42,659
so where what's the map

2513
01:48:42,659 --> 01:48:47,280
of DNS over http

2514
01:48:47,580 --> 01:48:50,400
the yellow or Greener the larger the

2515
01:48:50,400 --> 01:48:52,739
redder the lower now in some ways this

2516
01:48:52,739 --> 01:48:55,380
might be a map of Firefox use I don't

2517
01:48:55,380 --> 01:48:57,300
know I've never really looked hard

2518
01:48:57,300 --> 01:49:01,320
but you know America so so Russia a

2519
01:49:01,320 --> 01:49:03,060
little more

2520
01:49:03,060 --> 01:49:04,619
um

2521
01:49:04,619 --> 01:49:06,659
Morocco is it somewhere over there in

2522
01:49:06,659 --> 01:49:11,460
Northern Africa reasonable and wow

2523
01:49:11,460 --> 01:49:16,699
Thailand through the guest next slide

2524
01:49:16,980 --> 01:49:20,100
so I think this is all about Firefox and

2525
01:49:20,100 --> 01:49:21,900
trusted recursive resolvers personally

2526
01:49:21,900 --> 01:49:24,719
hard to really tell for sure but in some

2527
01:49:24,719 --> 01:49:26,820
ways it's not users doing things and not

2528
01:49:26,820 --> 01:49:29,280
even isps doing things it's just the

2529
01:49:29,280 --> 01:49:31,320
browser going I know better than you let

2530
01:49:31,320 --> 01:49:33,300
me go and take your DNS traffic and

2531
01:49:33,300 --> 01:49:35,159
shunt it over HTTP and deliver to

2532
01:49:35,159 --> 01:49:38,940
cloudfit yay next slide

2533
01:49:38,940 --> 01:49:41,219
so you know if you actually have a look

2534
01:49:41,219 --> 01:49:43,679
at the Firefox uh the Firefox pages of

2535
01:49:43,679 --> 01:49:47,219
DNS server https you know that's the bid

2536
01:49:47,219 --> 01:49:49,980
in Firefox it says we're going to use do

2537
01:49:49,980 --> 01:49:54,800
not DOT for this particular program next

2538
01:49:54,800 --> 01:49:59,340
so dot which is not used as much where

2539
01:49:59,340 --> 01:50:03,300
is dot against cloudflare used

2540
01:50:03,300 --> 01:50:06,060
almost nowhere except

2541
01:50:06,060 --> 01:50:10,020
a little bit in Nepal and next slide

2542
01:50:10,020 --> 01:50:12,840
blow me down Laos

2543
01:50:12,840 --> 01:50:15,060
I have no idea

2544
01:50:15,060 --> 01:50:18,239
my suspicion is that this is something

2545
01:50:18,239 --> 01:50:21,960
the ISP is doing and nothing to do what

2546
01:50:21,960 --> 01:50:24,420
you know is happening in Laos but I

2547
01:50:24,420 --> 01:50:26,040
can't tell you that

2548
01:50:26,040 --> 01:50:28,440
because I don't know the IP addresses of

2549
01:50:28,440 --> 01:50:30,300
the folk doing the queries so I can't

2550
01:50:30,300 --> 01:50:32,340
map them to network providers and I

2551
01:50:32,340 --> 01:50:33,659
can't tell you which network provider

2552
01:50:33,659 --> 01:50:35,639
has turned this on because that data is

2553
01:50:35,639 --> 01:50:39,119
quite properly occluded from me I don't

2554
01:50:39,119 --> 01:50:41,400
even want to see that data but what I

2555
01:50:41,400 --> 01:50:44,219
can say is that what looks to be some

2556
01:50:44,219 --> 01:50:46,139
kind of ISP thing

2557
01:50:46,139 --> 01:50:48,960
is turning on Dot

2558
01:50:48,960 --> 01:50:50,460
in Laos

2559
01:50:50,460 --> 01:50:53,159
to cloudflare more than in other

2560
01:50:53,159 --> 01:50:55,679
countries and the amount at least as

2561
01:50:55,679 --> 01:50:57,960
cloudflare sees it in Laos of DNS over

2562
01:50:57,960 --> 01:51:00,300
UDP is actually in the decline as a

2563
01:51:00,300 --> 01:51:04,320
result how much is actually do well a

2564
01:51:04,320 --> 01:51:07,199
lot less in less no other countries like

2565
01:51:07,199 --> 01:51:11,540
this it's just Laos next

2566
01:51:11,820 --> 01:51:14,040
um so what can I say about this

2567
01:51:14,040 --> 01:51:16,199
users don't twiddle with knobs they

2568
01:51:16,199 --> 01:51:17,699
really really don't and maybe that's a

2569
01:51:17,699 --> 01:51:19,920
good thing I don't know I don't run help

2570
01:51:19,920 --> 01:51:22,380
desks if I did don't ever Twitter with

2571
01:51:22,380 --> 01:51:24,719
the knobs would be my advice to use this

2572
01:51:24,719 --> 01:51:26,520
um I think this is a lot to do with

2573
01:51:26,520 --> 01:51:29,280
Firefox and possibly bits of chrome I

2574
01:51:29,280 --> 01:51:31,139
really don't know but certainly use

2575
01:51:31,139 --> 01:51:33,060
levels are growing and whether it's

2576
01:51:33,060 --> 01:51:35,219
completely Firefox or some other way of

2577
01:51:35,219 --> 01:51:36,840
which this behavior is happening I don't

2578
01:51:36,840 --> 01:51:41,580
know but maybe other apps dot is really

2579
01:51:41,580 --> 01:51:43,679
low except in Laos

2580
01:51:43,679 --> 01:51:46,679
no idea and the relative use levels of

2581
01:51:46,679 --> 01:51:49,380
dot globally are declining not growing

2582
01:51:49,380 --> 01:51:52,320
no fascinating next

2583
01:51:52,320 --> 01:51:53,760
that was it

2584
01:51:53,760 --> 01:51:55,679
any questions that I'll attempt not to

2585
01:51:55,679 --> 01:51:57,860
answer

2586
01:52:00,380 --> 01:52:03,960
uh you know Jeff I think the problem

2587
01:52:03,960 --> 01:52:07,199
with DOT is it's much easier to filter

2588
01:52:07,199 --> 01:52:10,920
by an ISP and I know about at least one

2589
01:52:10,920 --> 01:52:15,000
ASP which basically blocks dot but

2590
01:52:15,000 --> 01:52:16,800
obviously it's much harder for them to

2591
01:52:16,800 --> 01:52:19,860
block https so maybe it's one of the

2592
01:52:19,860 --> 01:52:23,280
reasons we've seen less Dot and then so

2593
01:52:23,280 --> 01:52:24,900
there are two holes in the dike and I

2594
01:52:24,900 --> 01:52:26,699
can poke my finger at win one but not

2595
01:52:26,699 --> 01:52:28,260
the other so that's the problem solved

2596
01:52:28,260 --> 01:52:29,340
right

2597
01:52:29,340 --> 01:52:30,980
yay

2598
01:52:30,980 --> 01:52:33,360
it seems a bit crazy but you're probably

2599
01:52:33,360 --> 01:52:35,520
right you know but this industry has a

2600
01:52:35,520 --> 01:52:39,020
track record of crazy doesn't it

2601
01:52:39,540 --> 01:52:42,270
no others thank you very much

2602
01:52:42,270 --> 01:52:48,239
[Applause]

2603
01:52:48,239 --> 01:52:50,940
awesome well thank you everyone that

2604
01:52:50,940 --> 01:52:52,679
brings us to the end of today's aepg

2605
01:52:52,679 --> 01:52:54,960
meeting don't forget there will be

2606
01:52:54,960 --> 01:52:57,900
another one of these next time we meet

2607
01:52:57,900 --> 01:52:59,520
so if people have anything they would

2608
01:52:59,520 --> 01:53:01,739
like to present please let me know

2609
01:53:01,739 --> 01:53:03,480
also another shout out for the

2610
01:53:03,480 --> 01:53:05,219
technology deep Dives which is tomorrow

2611
01:53:05,219 --> 01:53:08,219
starting at 8 A.M which yes I realize

2612
01:53:08,219 --> 01:53:09,900
that's terrifyingly early for most

2613
01:53:09,900 --> 01:53:10,800
people

2614
01:53:10,800 --> 01:53:13,560
but well maybe jet lag will help you

2615
01:53:13,560 --> 01:53:15,780
wake up earlier it was the only time

2616
01:53:15,780 --> 01:53:18,259
that was available

2617
01:53:36,900 --> 01:53:40,638
interesting how things change

2618
01:53:42,060 --> 01:53:45,080
with all extensions

2619
01:53:46,560 --> 01:53:49,020
yeah I don't know where Chris I guess he

2620
01:53:49,020 --> 01:53:51,440
was asleep

2621
01:54:09,480 --> 01:54:12,480
foreign

