1
00:00:04,860 --> 00:00:07,580
thank you

2
00:00:24,080 --> 00:00:27,979
that's quite helpful

3
00:00:36,420 --> 00:00:38,540
okay

4
00:00:40,379 --> 00:00:42,860
so

5
00:00:46,320 --> 00:00:50,840
testing audio Bernard can you hear us

6
00:00:54,860 --> 00:00:57,539
yes I can hear you

7
00:00:57,539 --> 00:01:00,680
awesome and we can hear you

8
00:01:07,140 --> 00:01:09,320
foreign

9
00:01:37,920 --> 00:01:40,920
conditions

10
00:02:18,980 --> 00:02:24,079
all right let's get started

11
00:02:24,620 --> 00:02:27,900
good afternoon good morning good evening

12
00:02:27,900 --> 00:02:30,060
good middle of the night everyone and

13
00:02:30,060 --> 00:02:33,140
welcome to web transport

14
00:02:35,520 --> 00:02:41,099
um we are meeting today at itf151

15
00:02:41,099 --> 00:02:43,500
there we go

16
00:02:43,500 --> 00:02:45,599
um most of you probably have seen these

17
00:02:45,599 --> 00:02:47,099
especially if you're here virtually it

18
00:02:47,099 --> 00:02:48,239
means you've figured out how to join

19
00:02:48,239 --> 00:02:49,739
virtually

20
00:02:49,739 --> 00:02:51,599
um but yeah especially if you're virtual

21
00:02:51,599 --> 00:02:53,640
please use the directional microphone or

22
00:02:53,640 --> 00:02:57,360
headphones otherwise we get bad Echo

23
00:02:57,360 --> 00:02:58,319
um

24
00:02:58,319 --> 00:03:01,560
this is the buttons with the hand allow

25
00:03:01,560 --> 00:03:03,840
you to join the queue it's different

26
00:03:03,840 --> 00:03:06,480
from the race hand button and this is

27
00:03:06,480 --> 00:03:09,140
how you unmute

28
00:03:10,140 --> 00:03:12,780
um if you're looking at the slides from

29
00:03:12,780 --> 00:03:14,280
the data tracker here are some useful

30
00:03:14,280 --> 00:03:15,620
links

31
00:03:15,620 --> 00:03:18,780
but the note well so for those of you

32
00:03:18,780 --> 00:03:20,459
who have been here all week you already

33
00:03:20,459 --> 00:03:22,860
know it but I want to take a second to

34
00:03:22,860 --> 00:03:26,040
highlight the note well in particular we

35
00:03:26,040 --> 00:03:28,319
the ITF has an IPR policy Sony

36
00:03:28,319 --> 00:03:31,200
contribution you make be it on chat at

37
00:03:31,200 --> 00:03:34,560
the microphone on the mailing list

38
00:03:34,560 --> 00:03:35,280
um

39
00:03:35,280 --> 00:03:38,040
triggers your responsibility with regard

40
00:03:38,040 --> 00:03:39,720
to patents that you need to disclose if

41
00:03:39,720 --> 00:03:40,920
you have any so if you're not aware of

42
00:03:40,920 --> 00:03:42,540
this please read it before making any

43
00:03:42,540 --> 00:03:43,680
contribution

44
00:03:43,680 --> 00:03:46,440
similarly this contains our code of

45
00:03:46,440 --> 00:03:49,080
conduct which ensures that we all work

46
00:03:49,080 --> 00:03:51,480
together nicely and professionally

47
00:03:51,480 --> 00:03:53,760
luckily we haven't had a problem here so

48
00:03:53,760 --> 00:03:56,659
let's keep it that way

49
00:03:56,940 --> 00:03:58,140
um

50
00:03:58,140 --> 00:04:01,920
if you see anything that might amount to

51
00:04:01,920 --> 00:04:04,620
harassment or other problems please

52
00:04:04,620 --> 00:04:07,620
contact the chairs or the ombuds team or

53
00:04:07,620 --> 00:04:10,140
anyone in leadership we're all happy to

54
00:04:10,140 --> 00:04:14,059
help resolve these these situations

55
00:04:16,320 --> 00:04:21,000
uh as a reminder the this ITF has the

56
00:04:21,000 --> 00:04:24,240
roughly same mask policy as last time so

57
00:04:24,240 --> 00:04:26,340
please keep your mask on most of the

58
00:04:26,340 --> 00:04:29,280
time uh you can remove it briefly to eat

59
00:04:29,280 --> 00:04:31,500
or drink but that is not an excuse to

60
00:04:31,500 --> 00:04:34,460
keep it off for the entire time

61
00:04:34,460 --> 00:04:36,360
uh

62
00:04:36,360 --> 00:04:38,040
if you're in the room

63
00:04:38,040 --> 00:04:41,900
um if you're alone at home you do you

64
00:04:42,120 --> 00:04:44,300
um

65
00:04:44,940 --> 00:04:47,880
would we have a volunteer for note taker

66
00:04:47,880 --> 00:04:50,180
please

67
00:04:55,919 --> 00:04:57,960
I really need to cue the Jeopardy music

68
00:04:57,960 --> 00:05:00,000
for this one

69
00:05:00,000 --> 00:05:01,860
so I'm looking at some newcomers that's

70
00:05:01,860 --> 00:05:05,180
a great way to help out

71
00:05:05,759 --> 00:05:07,740
if you'd like not twisting anyone's arm

72
00:05:07,740 --> 00:05:09,600
but that is always much appreciated by

73
00:05:09,600 --> 00:05:11,940
the community the notes really don't

74
00:05:11,940 --> 00:05:13,560
need to be perfect if you look at those

75
00:05:13,560 --> 00:05:15,660
from any other meeting it's just a rough

76
00:05:15,660 --> 00:05:17,040
idea especially now that we have the

77
00:05:17,040 --> 00:05:19,080
YouTube video so is anyone willing to

78
00:05:19,080 --> 00:05:22,340
take notes please

79
00:05:22,560 --> 00:05:24,740
foreign

80
00:05:25,400 --> 00:05:28,440
's like staring at their laptop instead

81
00:05:28,440 --> 00:05:31,560
of making eye contact wow

82
00:05:31,560 --> 00:05:33,120
it's okay

83
00:05:33,120 --> 00:05:35,460
we just won't oh thank you very much

84
00:05:35,460 --> 00:05:38,100
appreciate it uh if you can take them in

85
00:05:38,100 --> 00:05:39,380
the uh

86
00:05:39,380 --> 00:05:41,460
notes.itf.org there's a link from the

87
00:05:41,460 --> 00:05:43,740
agenda or from the slides

88
00:05:43,740 --> 00:05:45,479
um and anyone else if you want to jump

89
00:05:45,479 --> 00:05:46,979
in and help

90
00:05:46,979 --> 00:05:50,039
um that's much appreciated thank you and

91
00:05:50,039 --> 00:05:51,900
please put your name at the top so I can

92
00:05:51,900 --> 00:05:54,500
probably thank you in the email

93
00:05:54,500 --> 00:05:56,300
uh right

94
00:05:56,300 --> 00:06:00,539
this is our agenda uh as per is often

95
00:06:00,539 --> 00:06:02,039
the case here at web transport we're

96
00:06:02,039 --> 00:06:03,900
going to do an update on what's going on

97
00:06:03,900 --> 00:06:08,580
at the w3c uh then discuss the

98
00:06:08,580 --> 00:06:10,620
um capsule design team and its impact on

99
00:06:10,620 --> 00:06:13,080
H2 and H3 and other H2 and H3 open

100
00:06:13,080 --> 00:06:16,680
issues then we have a specific topic on

101
00:06:16,680 --> 00:06:19,460
reliably resetting streams from Martin

102
00:06:19,460 --> 00:06:22,139
uh and then we'll see if we need any

103
00:06:22,139 --> 00:06:23,940
hums and wrap up would anyone like to

104
00:06:23,940 --> 00:06:25,860
bash this agenda

105
00:06:25,860 --> 00:06:28,160
foreign

106
00:06:34,740 --> 00:06:38,539
with this uh will

107
00:06:39,000 --> 00:06:41,819
yes let me just confirm the mic's

108
00:06:41,819 --> 00:06:44,160
working all right yes

109
00:06:44,160 --> 00:06:46,620
it is okay thank you uh happy middle of

110
00:06:46,620 --> 00:06:48,060
the night from California my name is

111
00:06:48,060 --> 00:06:50,100
Will law from Akamai I coach you at the

112
00:06:50,100 --> 00:06:52,199
w3c group along with yanivar Brewery

113
00:06:52,199 --> 00:06:54,900
from Mozilla so we have three quick

114
00:06:54,900 --> 00:06:56,940
slides on updates and then a slide with

115
00:06:56,940 --> 00:06:59,400
uh four questions for this group which I

116
00:06:59,400 --> 00:07:01,080
think would hopefully be the bulk of our

117
00:07:01,080 --> 00:07:01,860
time

118
00:07:01,860 --> 00:07:03,539
so just an update since we last

119
00:07:03,539 --> 00:07:06,120
presented July 26th we've updated our

120
00:07:06,120 --> 00:07:07,620
working draft to the latest revision

121
00:07:07,620 --> 00:07:12,180
happened on October 11th the charter is

122
00:07:12,180 --> 00:07:14,400
in the midst of being extended through

123
00:07:14,400 --> 00:07:17,759
to December 31st 23 we're actually uh

124
00:07:17,759 --> 00:07:20,099
just passed our Charter limit currently

125
00:07:20,099 --> 00:07:23,099
but we're in process so we're fine from

126
00:07:23,099 --> 00:07:26,099
a w3c perspective our timetable for the

127
00:07:26,099 --> 00:07:27,300
year we're really trying to move to

128
00:07:27,300 --> 00:07:29,580
candidate recommendation it requires

129
00:07:29,580 --> 00:07:32,400
stability in the API and also a proposed

130
00:07:32,400 --> 00:07:34,020
recommendation The Next Step requires

131
00:07:34,020 --> 00:07:36,780
two independent implementations uh

132
00:07:36,780 --> 00:07:38,460
Google have implemented in Chrome

133
00:07:38,460 --> 00:07:44,280
Mozilla are close on Firefox uh so we

134
00:07:44,280 --> 00:07:46,199
should reach there and hopefully within

135
00:07:46,199 --> 00:07:49,199
Cube one our goal is published in the uh

136
00:07:49,199 --> 00:07:51,479
to publication in the first half of next

137
00:07:51,479 --> 00:07:52,440
year

138
00:07:52,440 --> 00:07:54,960
Milestone status we have a candidate

139
00:07:54,960 --> 00:07:56,639
recommendation that's the one we track

140
00:07:56,639 --> 00:08:00,240
closest it has 10 issues actually

141
00:08:00,240 --> 00:08:03,120
should have updated the slide here

142
00:08:03,120 --> 00:08:04,740
um

143
00:08:04,740 --> 00:08:07,440
eight open and five ready for PR next

144
00:08:07,440 --> 00:08:09,860
slide please

145
00:08:13,740 --> 00:08:16,500
so uh just some updates for you I won't

146
00:08:16,500 --> 00:08:18,539
go through them I won't read through all

147
00:08:18,539 --> 00:08:20,639
those texts in detail I think the one

148
00:08:20,639 --> 00:08:22,800
not most meaningful for this group is we

149
00:08:22,800 --> 00:08:24,360
added a new congestion control

150
00:08:24,360 --> 00:08:26,340
Constructor argument

151
00:08:26,340 --> 00:08:29,580
so it's an enorm it has three values

152
00:08:29,580 --> 00:08:32,520
default throughput and low latency so

153
00:08:32,520 --> 00:08:34,200
you give them an indication of what type

154
00:08:34,200 --> 00:08:36,779
of congestion control you would like the

155
00:08:36,779 --> 00:08:38,940
user agent to invoke on your behalf in

156
00:08:38,940 --> 00:08:40,440
the web transport connection that you're

157
00:08:40,440 --> 00:08:43,140
instantiating if you ask for low latency

158
00:08:43,140 --> 00:08:46,440
and it feels it's able to comply with

159
00:08:46,440 --> 00:08:49,380
that request in some way then when you

160
00:08:49,380 --> 00:08:52,560
query back the getter the property it

161
00:08:52,560 --> 00:08:54,839
will Echo back low latency but if you

162
00:08:54,839 --> 00:08:56,519
ask for low latency and it feels it can

163
00:08:56,519 --> 00:08:58,500
do nothing special for you it's going to

164
00:08:58,500 --> 00:09:00,420
Echo back default so you have a little

165
00:09:00,420 --> 00:09:04,260
bit of feedback as to if there's any

166
00:09:04,260 --> 00:09:07,500
ability of the user agent to accommodate

167
00:09:07,500 --> 00:09:09,779
your request it has been pointed out

168
00:09:09,779 --> 00:09:11,519
that low latency and throughput might

169
00:09:11,519 --> 00:09:13,680
not be antagonistic goals especially as

170
00:09:13,680 --> 00:09:15,720
we look at l4s and other congestion

171
00:09:15,720 --> 00:09:18,899
controls in that case the the very broad

172
00:09:18,899 --> 00:09:21,600
default would probably suffice

173
00:09:21,600 --> 00:09:24,480
couple of editorial changes editorial

174
00:09:24,480 --> 00:09:26,880
changes uh we also want to thank Granada

175
00:09:26,880 --> 00:09:30,420
Boba for contributing uh sample code

176
00:09:30,420 --> 00:09:33,360
both for a simple Echo server and then

177
00:09:33,360 --> 00:09:35,580
an echo server with Pub sub on video

178
00:09:35,580 --> 00:09:37,560
it's really been instrumental in moving

179
00:09:37,560 --> 00:09:40,320
forward uh some of the early work around

180
00:09:40,320 --> 00:09:42,839
web transport on the web

181
00:09:42,839 --> 00:09:44,459
well it looks like we have a question

182
00:09:44,459 --> 00:09:45,959
from the room

183
00:09:45,959 --> 00:09:50,420
okay let's pause for questions go ahead

184
00:09:55,380 --> 00:09:57,839
uh Jonathan Linux is that decision about

185
00:09:57,839 --> 00:10:00,180
whether low latency can be done

186
00:10:00,180 --> 00:10:02,339
done before the connection is

187
00:10:02,339 --> 00:10:03,720
established because I'm concerned about

188
00:10:03,720 --> 00:10:05,880
the case where you have a congestion

189
00:10:05,880 --> 00:10:08,339
control algorithm that wants I'm

190
00:10:08,339 --> 00:10:09,480
thinking in particular of say the time

191
00:10:09,480 --> 00:10:11,640
stamp extension and I can use it you

192
00:10:11,640 --> 00:10:13,200
know and I can Implement Google

193
00:10:13,200 --> 00:10:15,000
congestion control if I have time stamps

194
00:10:15,000 --> 00:10:17,160
on the other side but I can't if I don't

195
00:10:17,160 --> 00:10:18,959
so which means you wouldn't know until

196
00:10:18,959 --> 00:10:20,279
after the connection is established

197
00:10:20,279 --> 00:10:21,180
whether you got the low latency

198
00:10:21,180 --> 00:10:23,220
congestion or not is that something you

199
00:10:23,220 --> 00:10:25,260
thought I believe it's yeah it's it's

200
00:10:25,260 --> 00:10:27,360
correct value is only after the the

201
00:10:27,360 --> 00:10:29,459
connections established and it's ready

202
00:10:29,459 --> 00:10:31,200
but there are other group members here

203
00:10:31,200 --> 00:10:33,180
Bernard or David even do you want to

204
00:10:33,180 --> 00:10:34,560
comment on that

205
00:10:34,560 --> 00:10:37,440
yeah I can answer on that one this is

206
00:10:37,440 --> 00:10:39,540
part of the Constructor in JavaScript so

207
00:10:39,540 --> 00:10:42,360
at least for now in Chrome we don't uh

208
00:10:42,360 --> 00:10:44,640
pool multiple web transport sessions and

209
00:10:44,640 --> 00:10:46,440
different connections so you would

210
00:10:46,440 --> 00:10:47,839
always have this information

211
00:10:47,839 --> 00:10:50,760
when creating the connection

212
00:10:50,760 --> 00:10:53,940
else even if we do Implement pooling you

213
00:10:53,940 --> 00:10:55,380
could totally say oh this connection

214
00:10:55,380 --> 00:10:57,839
isn't valid for this Constructor we'll

215
00:10:57,839 --> 00:11:00,060
create a new one so I think we we're

216
00:11:00,060 --> 00:11:01,200
covered because this is on the

217
00:11:01,200 --> 00:11:02,459
Constructor it's not something you can

218
00:11:02,459 --> 00:11:04,880
change later

219
00:11:05,399 --> 00:11:07,140
sorry no what I mean is it might depend

220
00:11:07,140 --> 00:11:08,519
on whether the peer supports certain

221
00:11:08,519 --> 00:11:10,380
quick features

222
00:11:10,380 --> 00:11:12,959
I see so so I think and well you can

223
00:11:12,959 --> 00:11:15,660
correct me if I'm wrong uh the in the

224
00:11:15,660 --> 00:11:17,339
Constructor you say hey I want to do

225
00:11:17,339 --> 00:11:19,560
this and then when you query it later

226
00:11:19,560 --> 00:11:22,079
it'll the value will depend on what

227
00:11:22,079 --> 00:11:23,459
happened during the connection setup

228
00:11:23,459 --> 00:11:24,620
okay yeah

229
00:11:24,620 --> 00:11:27,420
you can't query it immediately right you

230
00:11:27,420 --> 00:11:29,279
need to wait for the connection to be

231
00:11:29,279 --> 00:11:32,579
ready before you can then query whether

232
00:11:32,579 --> 00:11:34,620
it was able to comply with your

233
00:11:34,620 --> 00:11:38,519
congestion look uh control request

234
00:11:38,519 --> 00:11:40,920
so the code wouldn't literally be what

235
00:11:40,920 --> 00:11:42,720
you see on the screen right there

236
00:11:42,720 --> 00:11:45,600
Bernard is next for Q yeah yeah I think

237
00:11:45,600 --> 00:11:47,760
Jonathan's question may also have been

238
00:11:47,760 --> 00:11:49,620
about whether web transport requires

239
00:11:49,620 --> 00:11:51,959
some of these time stamp options and the

240
00:11:51,959 --> 00:11:53,820
answer is no

241
00:11:53,820 --> 00:11:56,459
uh I I don't know if Jonathan wants to

242
00:11:56,459 --> 00:11:58,920
come back and clarify that but

243
00:11:58,920 --> 00:12:01,079
um anyway this is just about the

244
00:12:01,079 --> 00:12:02,760
congestion control algorithm that would

245
00:12:02,760 --> 00:12:06,240
be implemented uh um on the web transfer

246
00:12:06,240 --> 00:12:07,800
client it doesn't influence what's on

247
00:12:07,800 --> 00:12:10,880
the server or anything like that

248
00:12:13,500 --> 00:12:17,120
okay thank you next slide please

249
00:12:19,860 --> 00:12:24,480
so we have two main issues uh of debate

250
00:12:24,480 --> 00:12:27,120
the first remains around prioritization

251
00:12:27,120 --> 00:12:28,440
we have

252
00:12:28,440 --> 00:12:31,500
three issues uh up there

253
00:12:31,500 --> 00:12:35,220
uh and we've proposed over the last few

254
00:12:35,220 --> 00:12:38,040
months various ever more complicated uh

255
00:12:38,040 --> 00:12:40,200
apis constructs around flows of

256
00:12:40,200 --> 00:12:41,640
short-lip streams for example and

257
00:12:41,640 --> 00:12:45,959
waiting schemes uh the latest uh issue

258
00:12:45,959 --> 00:12:49,019
there's a comes from myself which is as

259
00:12:49,019 --> 00:12:50,880
a baseline maybe we should consider

260
00:12:50,880 --> 00:12:52,079
simply

261
00:12:52,079 --> 00:12:54,240
doing the minimum necessary to support

262
00:12:54,240 --> 00:12:57,420
mock media over quick which has a a

263
00:12:57,420 --> 00:13:00,300
simple relatively simple requirement for

264
00:13:00,300 --> 00:13:03,779
ever escalating priorities so we have

265
00:13:03,779 --> 00:13:05,459
not resolved this issue it's an issue of

266
00:13:05,459 --> 00:13:08,339
debate uh but that's on the books the

267
00:13:08,339 --> 00:13:10,740
second remaining large issue is the stat

268
00:13:10,740 --> 00:13:13,320
surface we've had prior discussion

269
00:13:13,320 --> 00:13:15,300
around packet arrival departure times

270
00:13:15,300 --> 00:13:18,560
latest rtt and ecn information

271
00:13:18,560 --> 00:13:21,180
uh Peter Thatcher's put forward a PR

272
00:13:21,180 --> 00:13:23,519
that resolves that to a single property

273
00:13:23,519 --> 00:13:24,720
basically expressing available

274
00:13:24,720 --> 00:13:27,660
throughput and there's also debate over

275
00:13:27,660 --> 00:13:30,899
what's the time base over over that uh

276
00:13:30,899 --> 00:13:32,700
value

277
00:13:32,700 --> 00:13:35,399
so we have other issues obviously before

278
00:13:35,399 --> 00:13:36,839
we can go to release but these are the

279
00:13:36,839 --> 00:13:38,639
two main ones

280
00:13:38,639 --> 00:13:40,800
next slide please and it looks like we

281
00:13:40,800 --> 00:13:43,139
have another question sorry I'm not

282
00:13:43,139 --> 00:13:45,360
watching the queue Alan yeah no no

283
00:13:45,360 --> 00:13:48,240
worries uh Alan from Dell meta and

284
00:13:48,240 --> 00:13:50,519
priority Enthusiast

285
00:13:50,519 --> 00:13:51,959
um

286
00:13:51,959 --> 00:13:53,940
I I guess I just want to and also my

287
00:13:53,940 --> 00:13:55,500
co-chair

288
00:13:55,500 --> 00:13:58,620
um Mark is in its very early days and if

289
00:13:58,620 --> 00:14:00,420
you were in our mock session this

290
00:14:00,420 --> 00:14:02,160
morning you know there's still a lot of

291
00:14:02,160 --> 00:14:03,240
debate about what's going on with

292
00:14:03,240 --> 00:14:04,800
priority so

293
00:14:04,800 --> 00:14:06,540
if you want to wait for mock to Define

294
00:14:06,540 --> 00:14:08,160
what its priority scheme is going to be

295
00:14:08,160 --> 00:14:09,899
before you finalize your API it may take

296
00:14:09,899 --> 00:14:12,120
a very long time and so I think the

297
00:14:12,120 --> 00:14:14,519
recommendation I would make is

298
00:14:14,519 --> 00:14:16,560
make it whatever you do don't get over

299
00:14:16,560 --> 00:14:19,139
complicated and make it flexible and

300
00:14:19,139 --> 00:14:21,660
extensible as much as you can and from

301
00:14:21,660 --> 00:14:23,700
an API perspective so that you can catch

302
00:14:23,700 --> 00:14:25,320
whatever we land on there because we

303
00:14:25,320 --> 00:14:26,459
could be talking about it for a long

304
00:14:26,459 --> 00:14:27,959
time

305
00:14:27,959 --> 00:14:31,699
noted well thank you

306
00:14:32,279 --> 00:14:34,620
David back to you

307
00:14:34,620 --> 00:14:38,720
um a related question challenge Point uh

308
00:14:38,720 --> 00:14:42,899
uh is it would it be possible to ship

309
00:14:42,899 --> 00:14:44,639
like a first version of web transport

310
00:14:44,639 --> 00:14:46,980
without priorities and then add that

311
00:14:46,980 --> 00:14:49,860
later or do you think it it's important

312
00:14:49,860 --> 00:14:52,579
for the first version

313
00:14:52,920 --> 00:14:55,740
we have some difference of opinion I

314
00:14:55,740 --> 00:14:57,060
personally think it's important for the

315
00:14:57,060 --> 00:14:59,040
first version because it seems necessary

316
00:14:59,040 --> 00:15:01,199
to implement one of our strongest use

317
00:15:01,199 --> 00:15:03,240
cases which is the web conferencing use

318
00:15:03,240 --> 00:15:05,399
case in other words a client sending

319
00:15:05,399 --> 00:15:07,519
real-time audience video to a server

320
00:15:07,519 --> 00:15:12,000
it's working well today and uh and uh

321
00:15:12,000 --> 00:15:14,639
good Network conditions but it doesn't

322
00:15:14,639 --> 00:15:17,339
work well under poor Network conditions

323
00:15:17,339 --> 00:15:19,500
so we feel that we need a prior some

324
00:15:19,500 --> 00:15:22,920
type of prioritization scheme uh to be

325
00:15:22,920 --> 00:15:24,899
able to make that happen

326
00:15:24,899 --> 00:15:27,899
that makes sense thank you Bernard

327
00:15:27,899 --> 00:15:30,120
uh yeah I just wanted to clarify here

328
00:15:30,120 --> 00:15:32,880
you know priority isn't free

329
00:15:32,880 --> 00:15:35,339
um in that when you if you when you do

330
00:15:35,339 --> 00:15:37,260
that uh and have this strict sending

331
00:15:37,260 --> 00:15:39,720
then you lose concurrency

332
00:15:39,720 --> 00:15:42,839
um and you know for the at least for the

333
00:15:42,839 --> 00:15:45,060
conference in case it's I I don't agree

334
00:15:45,060 --> 00:15:48,060
that it's it's required to to do that

335
00:15:48,060 --> 00:15:49,680
um and in fact when I've done the

336
00:15:49,680 --> 00:15:50,820
samples

337
00:15:50,820 --> 00:15:53,399
um it can actually be harmful

338
00:15:53,399 --> 00:15:54,660
um so

339
00:15:54,660 --> 00:15:57,180
I guess you know I agree with Alan that

340
00:15:57,180 --> 00:15:58,860
it's it's something that should probably

341
00:15:58,860 --> 00:16:01,440
be extensible but

342
00:16:01,440 --> 00:16:02,820
um you know I'm not really sure that

343
00:16:02,820 --> 00:16:04,920
it's actually absolutely required for

344
00:16:04,920 --> 00:16:07,339
for the first version

345
00:16:07,339 --> 00:16:10,139
Bernard would you be comfortable leaving

346
00:16:10,139 --> 00:16:13,079
it out of the first version completely

347
00:16:13,079 --> 00:16:15,320
uh as opposed

348
00:16:15,320 --> 00:16:17,519
generic and extensible that might

349
00:16:17,519 --> 00:16:19,860
accommodate future requirements I I

350
00:16:19,860 --> 00:16:21,779
would say that the goal should be what

351
00:16:21,779 --> 00:16:23,880
Alan said which is figuring out a way

352
00:16:23,880 --> 00:16:26,279
making sure that it's not precluded let

353
00:16:26,279 --> 00:16:28,920
me put it that way

354
00:16:28,920 --> 00:16:33,120
um rather than because because uh yeah

355
00:16:33,120 --> 00:16:34,560
um and also you know they can be there

356
00:16:34,560 --> 00:16:36,360
can be some experiments because I think

357
00:16:36,360 --> 00:16:38,880
you just have to be very careful

358
00:16:38,880 --> 00:16:40,800
because priority goes hand in hand you

359
00:16:40,800 --> 00:16:43,019
can't get but both have priority and and

360
00:16:43,019 --> 00:16:44,220
claim to get rid of head of line

361
00:16:44,220 --> 00:16:46,500
blocking right I want I want I want

362
00:16:46,500 --> 00:16:48,180
strict priority of my frames well if one

363
00:16:48,180 --> 00:16:49,680
of them retransmits then you're holding

364
00:16:49,680 --> 00:16:51,360
up everything in a queue so anyway it's

365
00:16:51,360 --> 00:16:53,040
not it's not a free lunch

366
00:16:53,040 --> 00:16:55,639
okay

367
00:16:56,279 --> 00:16:59,880
oh slides disappeared yep sorry my media

368
00:16:59,880 --> 00:17:01,440
code is saying unstable connection to

369
00:17:01,440 --> 00:17:03,180
the server I think it's reconnecting one

370
00:17:03,180 --> 00:17:05,220
second

371
00:17:05,220 --> 00:17:08,120
foreign

372
00:17:16,199 --> 00:17:19,339
next slide

373
00:17:21,780 --> 00:17:25,919
okay so here are our four questions and

374
00:17:25,919 --> 00:17:27,780
I'd like to take them one at a time if I

375
00:17:27,780 --> 00:17:29,280
read all four of them we tend to lose

376
00:17:29,280 --> 00:17:31,440
some of them so the first one is

377
00:17:31,440 --> 00:17:34,080
will web transport as defined by this

378
00:17:34,080 --> 00:17:36,299
group in the ietf include a send

379
00:17:36,299 --> 00:17:40,020
Priority mechanism which w3c user agents

380
00:17:40,020 --> 00:17:43,020
can then leverage directly

381
00:17:43,020 --> 00:17:45,299
so we can define something on the same

382
00:17:45,299 --> 00:17:47,820
side of user agents but is there an

383
00:17:47,820 --> 00:17:51,539
underlying protocol based

384
00:17:51,539 --> 00:17:53,600
um

385
00:17:54,480 --> 00:17:57,600
send Priority that it could be tied into

386
00:17:57,600 --> 00:18:00,379
consistently

387
00:18:03,539 --> 00:18:06,260
Ellen

388
00:18:06,360 --> 00:18:09,059
Alan Ferndale yeah I I think Martin made

389
00:18:09,059 --> 00:18:10,380
this point a second ago in the chat

390
00:18:10,380 --> 00:18:12,600
which is that we the web transport

391
00:18:12,600 --> 00:18:14,700
protocol as it's being defined in ITF

392
00:18:14,700 --> 00:18:16,799
does not have a way to Signal priority

393
00:18:16,799 --> 00:18:19,140
over the wire and I don't think we plan

394
00:18:19,140 --> 00:18:22,140
to create one the API consideration is

395
00:18:22,140 --> 00:18:23,700
very much about

396
00:18:23,700 --> 00:18:25,559
the JavaScript code being able to

397
00:18:25,559 --> 00:18:28,200
communicate to its local implementation

398
00:18:28,200 --> 00:18:30,440
how it would like things to be

399
00:18:30,440 --> 00:18:33,059
prioritized before they leave that

400
00:18:33,059 --> 00:18:35,460
endpoint

401
00:18:35,460 --> 00:18:37,140
okay that's good thank you and that

402
00:18:37,140 --> 00:18:38,760
pretty much answers the second question

403
00:18:38,760 --> 00:18:40,559
then how will priorities be signaled

404
00:18:40,559 --> 00:18:42,960
consistently through intermediate relays

405
00:18:42,960 --> 00:18:46,320
uh I think we can take that answer to

406
00:18:46,320 --> 00:18:48,539
satisfy number two

407
00:18:48,539 --> 00:18:50,700
number three can web transport require

408
00:18:50,700 --> 00:18:54,059
an alpha Randle l4s friendly low latency

409
00:18:54,059 --> 00:18:56,640
congestion control such as Prague

410
00:18:56,640 --> 00:18:59,400
and this I think is probably what I was

411
00:18:59,400 --> 00:19:01,140
alluding to in the prior question and

412
00:19:01,140 --> 00:19:03,320
Bernard may want to add more color here

413
00:19:03,320 --> 00:19:06,240
that we feel this is necessary for a

414
00:19:06,240 --> 00:19:09,360
client to send uh

415
00:19:09,360 --> 00:19:12,059
video in a congested environment up to a

416
00:19:12,059 --> 00:19:15,020
server in real time

417
00:19:15,840 --> 00:19:19,140
uh David schenazi speaking as individual

418
00:19:19,140 --> 00:19:23,280
contributor so l4s is not just a

419
00:19:23,280 --> 00:19:24,900
congestion controller

420
00:19:24,900 --> 00:19:28,020
it's a concession controller and a

421
00:19:28,020 --> 00:19:31,200
marking system using ech and an aqm

422
00:19:31,200 --> 00:19:32,280
algorithm

423
00:19:32,280 --> 00:19:34,860
so for it to work properly you need your

424
00:19:34,860 --> 00:19:37,820
bottle-like bottleneck link to implement

425
00:19:37,820 --> 00:19:42,179
some specific kind of smart queuing and

426
00:19:42,179 --> 00:19:46,320
the idea is l4s uh like the the short of

427
00:19:46,320 --> 00:19:50,220
it is you have a shorter cue that l4s

428
00:19:50,220 --> 00:19:52,320
gets into but it promises not to grow

429
00:19:52,320 --> 00:19:55,140
the queue uh there are a lot of folks

430
00:19:55,140 --> 00:19:57,179
working on those and we saw like there

431
00:19:57,179 --> 00:19:58,500
are a lot of progress with the hackathon

432
00:19:58,500 --> 00:20:00,780
but they're not deployed yet and most

433
00:20:00,780 --> 00:20:02,400
importantly

434
00:20:02,400 --> 00:20:05,640
um web transport being can't do

435
00:20:05,640 --> 00:20:07,260
requirements on anything that's not the

436
00:20:07,260 --> 00:20:09,660
endpoints

437
00:20:09,660 --> 00:20:13,860
um so additionally uh yeah on the server

438
00:20:13,860 --> 00:20:16,200
so I don't think requiring it from what

439
00:20:16,200 --> 00:20:19,140
transport is feasible it's saying that

440
00:20:19,140 --> 00:20:20,700
you know being able to have this is

441
00:20:20,700 --> 00:20:22,500
great but if you're on a network that

442
00:20:22,500 --> 00:20:25,919
doesn't do it you're kind of stuck

443
00:20:25,919 --> 00:20:28,679
Eric okay so Eric can your Apple

444
00:20:28,679 --> 00:20:30,900
um I think even if you take that in a

445
00:20:30,900 --> 00:20:32,700
slightly more narrow definition of on

446
00:20:32,700 --> 00:20:34,260
the endpoint and only on the endpoint

447
00:20:34,260 --> 00:20:36,539
can we require essentially you know

448
00:20:36,539 --> 00:20:39,480
non-q building flows regardless of what

449
00:20:39,480 --> 00:20:41,520
queuing mechanism is is happening

450
00:20:41,520 --> 00:20:43,440
elsewhere in the network

451
00:20:43,440 --> 00:20:46,020
it's still a little bit unclear as to

452
00:20:46,020 --> 00:20:47,039
what

453
00:20:47,039 --> 00:20:50,580
uh why we would actually want to be able

454
00:20:50,580 --> 00:20:52,679
to require that I think this kind of

455
00:20:52,679 --> 00:20:53,880
comes back to number two and I don't

456
00:20:53,880 --> 00:20:55,320
want to reopen that if we've got a nice

457
00:20:55,320 --> 00:20:57,299
no answer but like I think the the

458
00:20:57,299 --> 00:20:59,340
sentiment that I'm feeling which I think

459
00:20:59,340 --> 00:21:02,640
might be shared is like we're not

460
00:21:02,640 --> 00:21:04,320
currently planning to Signal priorities

461
00:21:04,320 --> 00:21:06,360
we're not currently planning to try to

462
00:21:06,360 --> 00:21:09,179
require that kind of congestion control

463
00:21:09,179 --> 00:21:10,500
um

464
00:21:10,500 --> 00:21:12,539
but that doesn't mean that that could

465
00:21:12,539 --> 00:21:14,700
never happen that means that like right

466
00:21:14,700 --> 00:21:17,280
now there is no clear use case for why

467
00:21:17,280 --> 00:21:18,480
you would need to Signal those

468
00:21:18,480 --> 00:21:19,860
priorities as opposed to having it be an

469
00:21:19,860 --> 00:21:22,140
endpoint only thing similarly for

470
00:21:22,140 --> 00:21:24,840
question three like I'm not seeing a

471
00:21:24,840 --> 00:21:26,460
huge reason that you would want to

472
00:21:26,460 --> 00:21:28,620
require that everybody anywhere ever

473
00:21:28,620 --> 00:21:31,260
doing web transport can only do Prague

474
00:21:31,260 --> 00:21:33,179
or something similar as opposed to

475
00:21:33,179 --> 00:21:34,799
Simply making it available for an

476
00:21:34,799 --> 00:21:37,260
implementation that needs one

477
00:21:37,260 --> 00:21:40,200
Kathy it wasn't mend the request is not

478
00:21:40,200 --> 00:21:41,700
that it's the only one that it's an

479
00:21:41,700 --> 00:21:43,679
available choice that could be selected

480
00:21:43,679 --> 00:21:47,700
by a client but I think Bernard's next

481
00:21:47,700 --> 00:21:49,799
in queue and this was a request directly

482
00:21:49,799 --> 00:21:52,559
from him so he may want to well it

483
00:21:52,559 --> 00:21:55,980
wasn't yeah I uh my question I guess was

484
00:21:55,980 --> 00:21:58,500
probably to you Eric uh have you seen

485
00:21:58,500 --> 00:22:01,440
implementations of quick that have

486
00:22:01,440 --> 00:22:04,799
Prague and support l4s

487
00:22:04,799 --> 00:22:08,640
have I seen yes uh I'm aware of at least

488
00:22:08,640 --> 00:22:09,960
one

489
00:22:09,960 --> 00:22:10,620
um

490
00:22:10,620 --> 00:22:13,559
but the yeah even if it's available

491
00:22:13,559 --> 00:22:15,120
we're saying that you can't call it web

492
00:22:15,120 --> 00:22:17,280
transport if it doesn't offer Prague

493
00:22:17,280 --> 00:22:19,799
because I think yeah

494
00:22:19,799 --> 00:22:21,780
because when we were talking about hey

495
00:22:21,780 --> 00:22:23,760
for congestion control I want to request

496
00:22:23,760 --> 00:22:26,100
low latency that is very much a request

497
00:22:26,100 --> 00:22:28,799
and even if you have Prague on your

498
00:22:28,799 --> 00:22:30,419
local endpoint that does not necessarily

499
00:22:30,419 --> 00:22:32,880
mean that we would consider what you're

500
00:22:32,880 --> 00:22:35,460
getting to be low latency so I'm a

501
00:22:35,460 --> 00:22:36,659
little bit hesitant to say that we're

502
00:22:36,659 --> 00:22:38,340
gonna like say this is a thing and

503
00:22:38,340 --> 00:22:40,020
everybody should go off being happy and

504
00:22:40,020 --> 00:22:41,400
then be surprised down the line when

505
00:22:41,400 --> 00:22:43,679
that's not what they got

506
00:22:43,679 --> 00:22:47,760
yeah uh anyway uh yeah having this

507
00:22:47,760 --> 00:22:49,620
available I think to play with to see if

508
00:22:49,620 --> 00:22:52,260
it addresses the um some of the low

509
00:22:52,260 --> 00:22:54,419
latency use cases will would make sense

510
00:22:54,419 --> 00:22:57,000
but that's probably something outside of

511
00:22:57,000 --> 00:22:59,299
this meeting

512
00:23:00,299 --> 00:23:03,000
but I think the the feedback here is the

513
00:23:03,000 --> 00:23:05,100
answer for three is no it might be fun

514
00:23:05,100 --> 00:23:07,260
to experiment but we cannot require it

515
00:23:07,260 --> 00:23:09,960
and it cannot be relied upon

516
00:23:09,960 --> 00:23:12,900
uh to be present

517
00:23:12,900 --> 00:23:15,780
Martin's next security

518
00:23:15,780 --> 00:23:18,240
so I am hello

519
00:23:18,240 --> 00:23:20,460
um I think we've answered the priority

520
00:23:20,460 --> 00:23:23,039
questions adequately I think there's

521
00:23:23,039 --> 00:23:24,840
there's a lot of space in here for

522
00:23:24,840 --> 00:23:26,460
signaling but that will be very much

523
00:23:26,460 --> 00:23:29,640
application specific and

524
00:23:29,640 --> 00:23:31,260
really all that we can do with this at

525
00:23:31,260 --> 00:23:34,679
this layer is uh provide an API that's

526
00:23:34,679 --> 00:23:36,600
thankfully not a problem that the ITF

527
00:23:36,600 --> 00:23:38,580
has to concern themselves with there's a

528
00:23:38,580 --> 00:23:39,659
bunch of people who have some experience

529
00:23:39,659 --> 00:23:41,220
in that area

530
00:23:41,220 --> 00:23:43,320
who can take that to the w3c I think

531
00:23:43,320 --> 00:23:44,640
that's probably the cleanest way to

532
00:23:44,640 --> 00:23:46,140
manage that

533
00:23:46,140 --> 00:23:46,919
um

534
00:23:46,919 --> 00:23:49,440
I think on point three

535
00:23:49,440 --> 00:23:51,539
what we have with with the the

536
00:23:51,539 --> 00:23:53,460
application expressing a preference for

537
00:23:53,460 --> 00:23:55,559
the way in which congestion control is

538
00:23:55,559 --> 00:23:59,280
managed but leaving implementations and

539
00:23:59,280 --> 00:24:01,380
by implementations I mean browsers and

540
00:24:01,380 --> 00:24:03,539
and servers to

541
00:24:03,539 --> 00:24:05,460
um to just sort of

542
00:24:05,460 --> 00:24:08,400
compete on the quality of the congestion

543
00:24:08,400 --> 00:24:10,559
control algorithms is probably the most

544
00:24:10,559 --> 00:24:13,380
sensible approach having a mandate for a

545
00:24:13,380 --> 00:24:14,520
very specific

546
00:24:14,520 --> 00:24:18,840
uh set of congestion controls is not

547
00:24:18,840 --> 00:24:21,539
sensible in my mind

548
00:24:21,539 --> 00:24:24,140
the last one on the little

549
00:24:24,140 --> 00:24:26,820
Morse sort of on the fence on but I

550
00:24:26,820 --> 00:24:28,200
think probably in the short term the

551
00:24:28,200 --> 00:24:29,760
answer is no

552
00:24:29,760 --> 00:24:31,620
um the

553
00:24:31,620 --> 00:24:34,380
time stand up timestamp option does help

554
00:24:34,380 --> 00:24:37,440
in some very narrow cases

555
00:24:37,440 --> 00:24:40,620
but at the same time it seems like

556
00:24:40,620 --> 00:24:42,900
you can get a long way without it so I'm

557
00:24:42,900 --> 00:24:46,320
going to sort of say maybe no there's

558
00:24:46,320 --> 00:24:47,820
a whole lot of information that a

559
00:24:47,820 --> 00:24:49,200
congestion controller might need in

560
00:24:49,200 --> 00:24:52,740
order to run something in JS but that

561
00:24:52,740 --> 00:24:54,059
presumes that you're willing to trust

562
00:24:54,059 --> 00:24:55,860
the JavaScript to run a congestion

563
00:24:55,860 --> 00:25:00,439
controller for you and I don't

564
00:25:00,840 --> 00:25:02,820
Thanks Martin uh before we go to

565
00:25:02,820 --> 00:25:05,220
Christian I'm going to cut the cue soon

566
00:25:05,220 --> 00:25:07,620
uh so if you want to comment on this

567
00:25:07,620 --> 00:25:10,140
topic please uh join the queue

568
00:25:10,140 --> 00:25:13,640
uh Christian you're next

569
00:25:13,940 --> 00:25:16,799
yeah I mean I'm pretty much with Smart

570
00:25:16,799 --> 00:25:19,200
in on this I mean certainly for position

571
00:25:19,200 --> 00:25:22,440
control I have a financial issue there

572
00:25:22,440 --> 00:25:24,000
is that the construction control is the

573
00:25:24,000 --> 00:25:27,179
property of the connection as a whole

574
00:25:27,179 --> 00:25:30,840
and a web transport is only using part

575
00:25:30,840 --> 00:25:33,120
of the connection

576
00:25:33,120 --> 00:25:35,820
so you might even have two web

577
00:25:35,820 --> 00:25:37,799
Transportation on the seven quick

578
00:25:37,799 --> 00:25:39,059
connection

579
00:25:39,059 --> 00:25:42,720
and what if those two web transports

580
00:25:42,720 --> 00:25:45,080
make different demands

581
00:25:45,080 --> 00:25:48,799
that'll be really weird

582
00:25:49,039 --> 00:25:52,260
the the other point I have on all of

583
00:25:52,260 --> 00:25:54,179
those is that

584
00:25:54,179 --> 00:25:57,539
we have here request that surface

585
00:25:57,539 --> 00:26:01,620
capabilities of the underlying stack

586
00:26:01,620 --> 00:26:05,940
I am a bit concerned about the Privacy

587
00:26:05,940 --> 00:26:08,340
implication of those things

588
00:26:08,340 --> 00:26:11,640
I mean are we just increasing the

589
00:26:11,640 --> 00:26:14,900
fingerprinting surface

590
00:26:15,000 --> 00:26:18,179
I mean can we say that oh I I see that

591
00:26:18,179 --> 00:26:21,360
they they do support l4s and that Mercy

592
00:26:21,360 --> 00:26:24,659
one of those client implementation

593
00:26:24,659 --> 00:26:27,360
I mean we we have to analyze when we do

594
00:26:27,360 --> 00:26:29,460
things like that what's the Privacy

595
00:26:29,460 --> 00:26:30,720
impact

596
00:26:30,720 --> 00:26:33,179
and based on that I would say no to

597
00:26:33,179 --> 00:26:34,559
everything there

598
00:26:34,559 --> 00:26:37,620
and as for the timestamp option um I'll

599
00:26:37,620 --> 00:26:40,080
be more than willing to get feedback and

600
00:26:40,080 --> 00:26:42,500
updated

601
00:26:44,400 --> 00:26:47,179
thank you

602
00:26:47,760 --> 00:26:50,220
hey Luke from twitch

603
00:26:50,220 --> 00:26:51,720
um so fortunately Christian opened

604
00:26:51,720 --> 00:26:54,120
Pandora's Box for me but pooling

605
00:26:54,120 --> 00:26:56,640
um there's there's some on the previous

606
00:26:56,640 --> 00:26:58,500
slide you exposed some Network stats

607
00:26:58,500 --> 00:27:01,200
like the estimated bit rate rtt

608
00:27:01,200 --> 00:27:02,700
a congestion controller it doesn't

609
00:27:02,700 --> 00:27:05,460
really make sense when you're pulling

610
00:27:05,460 --> 00:27:07,740
um so it it seems like at least the

611
00:27:07,740 --> 00:27:10,799
JavaScript API is assuming no pooling

612
00:27:10,799 --> 00:27:12,240
um

613
00:27:12,240 --> 00:27:15,299
or is that is that true well there's no

614
00:27:15,299 --> 00:27:17,400
there's a there's a property to know if

615
00:27:17,400 --> 00:27:19,500
it's fooled or not firstly so we know

616
00:27:19,500 --> 00:27:21,720
that and the current implementations are

617
00:27:21,720 --> 00:27:24,059
only not pulled they're a dedicated

618
00:27:24,059 --> 00:27:25,380
connection

619
00:27:25,380 --> 00:27:27,600
it and it may stay that way on the

620
00:27:27,600 --> 00:27:30,120
website uh we'll see what the competing

621
00:27:30,120 --> 00:27:33,620
uh applications come up

622
00:27:35,220 --> 00:27:38,279
yeah a new connection right

623
00:27:38,279 --> 00:27:40,440
uh Jonathan X I said this in the chat

624
00:27:40,440 --> 00:27:42,000
but I thought I'd repeat it in response

625
00:27:42,000 --> 00:27:43,740
to what Martin said I think the point of

626
00:27:43,740 --> 00:27:45,240
the JavaScript based congestion control

627
00:27:45,240 --> 00:27:46,620
is not to replace the congestion

628
00:27:46,620 --> 00:27:48,840
controller but to provide additional

629
00:27:48,840 --> 00:27:50,640
congestion control specifically to avoid

630
00:27:50,640 --> 00:27:52,860
Q building behaviors either in the

631
00:27:52,860 --> 00:27:55,200
network or in your

632
00:27:55,200 --> 00:27:57,000
um or under our local output buffers to

633
00:27:57,000 --> 00:27:59,220
keep your latency low even if you have a

634
00:27:59,220 --> 00:28:01,080
default congestion controller I think

635
00:28:01,080 --> 00:28:02,159
that's the point of that and I think

636
00:28:02,159 --> 00:28:04,020
there have been some experiments early

637
00:28:04,020 --> 00:28:05,340
experiments with

638
00:28:05,340 --> 00:28:07,320
like RTP over quick that have gotten

639
00:28:07,320 --> 00:28:09,480
reasonable results with that basically

640
00:28:09,480 --> 00:28:11,520
avoid the queue keep the cues low keep

641
00:28:11,520 --> 00:28:13,260
your latency low over a default congest

642
00:28:13,260 --> 00:28:15,740
controller

643
00:28:17,159 --> 00:28:18,799
yeah

644
00:28:18,799 --> 00:28:21,059
it wasn't that people wanted to

645
00:28:21,059 --> 00:28:22,200
implement congestion control and

646
00:28:22,200 --> 00:28:25,740
JavaScript it was to to try to improve

647
00:28:25,740 --> 00:28:27,659
the delivery and to do it on top of the

648
00:28:27,659 --> 00:28:29,400
existing digestive control that's

649
00:28:29,400 --> 00:28:30,960
happening under the base layer is very

650
00:28:30,960 --> 00:28:33,240
difficult and I think you're referencing

651
00:28:33,240 --> 00:28:36,179
the ADT core work that was done over bbr

652
00:28:36,179 --> 00:28:39,840
if I remember correctly there

653
00:28:39,840 --> 00:28:41,220
um so there was random in the queue

654
00:28:41,220 --> 00:28:43,140
between Jonathan and Peter but I'm

655
00:28:43,140 --> 00:28:45,600
assuming that was that you're not

656
00:28:45,600 --> 00:28:50,240
intending to be there or all right Peter

657
00:28:50,700 --> 00:28:53,039
gotcha I was gonna say roughly the same

658
00:28:53,039 --> 00:28:55,380
thing as uh Jonathan that

659
00:28:55,380 --> 00:28:58,080
we wouldn't be if we added an API which

660
00:28:58,080 --> 00:28:59,880
we don't currently have but if we added

661
00:28:59,880 --> 00:29:01,740
one for number four

662
00:29:01,740 --> 00:29:03,600
um it would not be trusting the

663
00:29:03,600 --> 00:29:05,039
JavaScript with congestion control it

664
00:29:05,039 --> 00:29:07,100
would just be allowing it to go lower

665
00:29:07,100 --> 00:29:09,360
than whatever

666
00:29:09,360 --> 00:29:11,460
uh built-in congestion control there is

667
00:29:11,460 --> 00:29:13,260
if it wants to it wouldn't be allowed to

668
00:29:13,260 --> 00:29:16,620
go higher necessarily so uh that's in

669
00:29:16,620 --> 00:29:19,500
response to Martin's comment

670
00:29:19,500 --> 00:29:21,419
um I I think there might be potential

671
00:29:21,419 --> 00:29:22,860
for doing something like that but it's

672
00:29:22,860 --> 00:29:25,380
something that needs to be explored and

673
00:29:25,380 --> 00:29:27,240
uh I don't think that the quick

674
00:29:27,240 --> 00:29:29,460
timestamp option is even mature enough

675
00:29:29,460 --> 00:29:33,000
yet to be something we can rely on so I

676
00:29:33,000 --> 00:29:34,860
I think while number four has potential

677
00:29:34,860 --> 00:29:37,140
it's not something that is mature enough

678
00:29:37,140 --> 00:29:40,320
uh either with the extension or to see

679
00:29:40,320 --> 00:29:43,980
if this uh whole idea can work to be

680
00:29:43,980 --> 00:29:45,659
something we can

681
00:29:45,659 --> 00:29:49,279
rely mandate right now

682
00:29:49,799 --> 00:29:51,600
thank you

683
00:29:51,600 --> 00:29:54,360
my computer well I was in the queue as

684
00:29:54,360 --> 00:29:56,779
an individual as well but everyone

685
00:29:56,779 --> 00:29:59,880
already said it so plus one

686
00:29:59,880 --> 00:30:03,419
um as chair my read of the situation is

687
00:30:03,419 --> 00:30:07,020
I'm getting agreement in the room for no

688
00:30:07,020 --> 00:30:09,960
on all four points

689
00:30:09,960 --> 00:30:12,600
um I'm gonna reopen the cube briefly in

690
00:30:12,600 --> 00:30:15,659
case someone wants to disagree just so

691
00:30:15,659 --> 00:30:17,580
we can have that but we're not we're not

692
00:30:17,580 --> 00:30:19,140
going to run a formal Contessa's call

693
00:30:19,140 --> 00:30:20,399
because I don't think you're asking for

694
00:30:20,399 --> 00:30:23,640
a full liaison here but

695
00:30:23,640 --> 00:30:25,919
does anyone if anyone wants to disagree

696
00:30:25,919 --> 00:30:27,299
here's your chance we're going to spend

697
00:30:27,299 --> 00:30:29,220
like a couple minutes but I think

698
00:30:29,220 --> 00:30:32,779
otherwise it's no on all points

699
00:30:39,120 --> 00:30:40,860
I'd just like to say I think it's no on

700
00:30:40,860 --> 00:30:43,740
all points but not like a no and you

701
00:30:43,740 --> 00:30:45,299
should be sad for doing it more of like

702
00:30:45,299 --> 00:30:47,340
a no and if there's a cool use case that

703
00:30:47,340 --> 00:30:49,080
really needs this or like if there is a

704
00:30:49,080 --> 00:30:50,100
place where you do need to Signal

705
00:30:50,100 --> 00:30:52,200
priorities like that is an open thing so

706
00:30:52,200 --> 00:30:53,880
I don't think this is a no we're

707
00:30:53,880 --> 00:30:55,080
uninterested in what you're trying to

708
00:30:55,080 --> 00:30:57,000
solve it's more of a from what we're

709
00:30:57,000 --> 00:30:58,440
aware of for what you're trying to solve

710
00:30:58,440 --> 00:30:59,820
we don't think any of these things are

711
00:30:59,820 --> 00:31:02,340
needed but that's not a like know and

712
00:31:02,340 --> 00:31:05,700
stop talking yeah and I'm seeing a lot

713
00:31:05,700 --> 00:31:07,860
of nodding heads in the room yep I

714
00:31:07,860 --> 00:31:09,480
totally agree with that myself

715
00:31:09,480 --> 00:31:12,360
all right uh thanks will well that

716
00:31:12,360 --> 00:31:13,620
concludes our size thank you very much

717
00:31:13,620 --> 00:31:16,679
I'll relate that back to the w3c uh web

718
00:31:16,679 --> 00:31:22,100
transport thank you cheers and uh Eric

719
00:31:22,100 --> 00:31:24,659
uh let's chat about web transfer over

720
00:31:24,659 --> 00:31:27,740
http 2.

721
00:31:28,799 --> 00:31:31,399
oh

722
00:31:33,299 --> 00:31:35,940
is that a thing well I don't know if you

723
00:31:35,940 --> 00:31:38,120
do that

724
00:31:38,700 --> 00:31:40,980
that's probably yeah I don't know I

725
00:31:40,980 --> 00:31:42,600
pressed the button

726
00:31:42,600 --> 00:31:45,360
cool hey look at that sweet

727
00:31:45,360 --> 00:31:48,480
let's talk about capsules

728
00:31:48,480 --> 00:31:49,799
um we've been doing this for a while we

729
00:31:49,799 --> 00:31:51,240
got some capsules

730
00:31:51,240 --> 00:31:52,620
there's some more capsules we should do

731
00:31:52,620 --> 00:31:54,419
capsule stuff

732
00:31:54,419 --> 00:31:56,539
um

733
00:31:58,140 --> 00:32:01,140
concretely

734
00:32:02,279 --> 00:32:04,500
we've now removed

735
00:32:04,500 --> 00:32:06,179
basically all of the stuff we were

736
00:32:06,179 --> 00:32:07,679
talking about about flow control from

737
00:32:07,679 --> 00:32:10,559
the capsule design team uh pull requests

738
00:32:10,559 --> 00:32:12,779
at this point so we've we've ripped a

739
00:32:12,779 --> 00:32:14,100
bunch of stuff back out

740
00:32:14,100 --> 00:32:16,559
we have left a very little bit of it in

741
00:32:16,559 --> 00:32:20,820
so we've we've left all of the stuff for

742
00:32:20,820 --> 00:32:23,279
H2 because none of our reordering issues

743
00:32:23,279 --> 00:32:25,740
occur in H2 because H2 is conveniently

744
00:32:25,740 --> 00:32:27,539
on top of this Knight's reliable ordered

745
00:32:27,539 --> 00:32:29,159
protocol

746
00:32:29,159 --> 00:32:30,059
um

747
00:32:30,059 --> 00:32:32,159
and there's a little bit of Base text

748
00:32:32,159 --> 00:32:34,740
for session based flow control that is

749
00:32:34,740 --> 00:32:37,020
still in H3 there's some settings

750
00:32:37,020 --> 00:32:38,940
changes that we'll talk about later and

751
00:32:38,940 --> 00:32:40,260
otherwise this just converts everything

752
00:32:40,260 --> 00:32:42,360
over to take our existing tovs and call

753
00:32:42,360 --> 00:32:43,799
them capsules and list them this nice

754
00:32:43,799 --> 00:32:47,340
new list of capsules that we have so

755
00:32:47,340 --> 00:32:48,720
this is now fairly minimal please

756
00:32:48,720 --> 00:32:50,940
actually go read and review

757
00:32:50,940 --> 00:32:53,580
you've seen this diagram at three ietfs

758
00:32:53,580 --> 00:32:54,960
by now

759
00:32:54,960 --> 00:32:57,600
it has not changed so let's land it and

760
00:32:57,600 --> 00:32:58,980
move on so we can stop looking at this

761
00:32:58,980 --> 00:33:01,279
diagram

762
00:33:02,340 --> 00:33:03,899
we're going to talk a little bit later

763
00:33:03,899 --> 00:33:06,240
in Victor's section about how we

764
00:33:06,240 --> 00:33:09,120
negotiate web transport uh just very

765
00:33:09,120 --> 00:33:10,260
briefly

766
00:33:10,260 --> 00:33:13,080
jumping in as chair uh we we did a

767
00:33:13,080 --> 00:33:15,059
consensus call on the list from the

768
00:33:15,059 --> 00:33:16,860
output of the design team that Eric just

769
00:33:16,860 --> 00:33:20,419
uh uh presented

770
00:33:20,419 --> 00:33:23,700
and didn't get any response because like

771
00:33:23,700 --> 00:33:25,260
you know everyone who had been involved

772
00:33:25,260 --> 00:33:27,179
was part of the mostly part of the team

773
00:33:27,179 --> 00:33:29,399
so we're gonna we're assuming consensus

774
00:33:29,399 --> 00:33:31,140
is we're going to merge that the the

775
00:33:31,140 --> 00:33:33,179
call actually ended uh three days ago

776
00:33:33,179 --> 00:33:35,279
and I forgot to say that so

777
00:33:35,279 --> 00:33:37,440
unless you want to jump up and scream

778
00:33:37,440 --> 00:33:39,059
now but otherwise like that's getting

779
00:33:39,059 --> 00:33:41,399
merged like pretty much today or

780
00:33:41,399 --> 00:33:43,740
whenever we get time beautiful thank you

781
00:33:43,740 --> 00:33:45,299
and thank you the folks who did review I

782
00:33:45,299 --> 00:33:47,580
know uh Martin gave multiple great

783
00:33:47,580 --> 00:33:50,279
rounds of reviews so thank you for that

784
00:33:50,279 --> 00:33:53,820
um sweet thank you chairs

785
00:33:53,820 --> 00:33:55,080
all right

786
00:33:55,080 --> 00:33:58,380
um yes negotiating web transport so we

787
00:33:58,380 --> 00:33:59,519
talked a little bit about this at the

788
00:33:59,519 --> 00:34:00,919
previous ITF

789
00:34:00,919 --> 00:34:05,340
we have decided that we would like to

790
00:34:05,340 --> 00:34:07,559
independently signal support across all

791
00:34:07,559 --> 00:34:09,859
the different layers whereas up until

792
00:34:09,859 --> 00:34:14,040
the previous ITF we had said that pick

793
00:34:14,040 --> 00:34:16,379
the highest layer and saying settings

794
00:34:16,379 --> 00:34:18,540
enable web transport implies settings

795
00:34:18,540 --> 00:34:20,040
enable connect protocol and everything

796
00:34:20,040 --> 00:34:20,940
else

797
00:34:20,940 --> 00:34:24,119
uh some implementation experience said

798
00:34:24,119 --> 00:34:25,619
that's actually really really painful

799
00:34:25,619 --> 00:34:26,760
when you're implementing because it

800
00:34:26,760 --> 00:34:28,739
means that you have to teach your uh

801
00:34:28,739 --> 00:34:30,960
quick datagram implementation about web

802
00:34:30,960 --> 00:34:33,960
transport and about the extended connect

803
00:34:33,960 --> 00:34:36,239
protocol and everything in between and

804
00:34:36,239 --> 00:34:38,280
so that ends up being mildly painful

805
00:34:38,280 --> 00:34:39,659
especially because some of the settings

806
00:34:39,659 --> 00:34:41,159
don't show up until after you need to

807
00:34:41,159 --> 00:34:42,300
have looked at the transport parameters

808
00:34:42,300 --> 00:34:44,520
anyway so when you suddenly start

809
00:34:44,520 --> 00:34:46,918
getting in datagrams you're like hey I'm

810
00:34:46,918 --> 00:34:49,440
annoyed now so these are likely to

811
00:34:49,440 --> 00:34:51,119
become totally separate things there's a

812
00:34:51,119 --> 00:34:52,560
slide and an issue for it later so we

813
00:34:52,560 --> 00:34:54,839
can talk about it globally for H3 and H2

814
00:34:54,839 --> 00:34:57,720
but we have made the same adjustments to

815
00:34:57,720 --> 00:35:00,000
the H2 doc as we are likely to agree to

816
00:35:00,000 --> 00:35:03,260
making in the H3 dock

817
00:35:05,040 --> 00:35:07,740
one piece of uh update from the last

818
00:35:07,740 --> 00:35:09,180
time we talked about this we had said

819
00:35:09,180 --> 00:35:10,800
that we wanted to switch completely from

820
00:35:10,800 --> 00:35:12,540
settings enable web transport over to

821
00:35:12,540 --> 00:35:14,280
settings web transport Max sessions and

822
00:35:14,280 --> 00:35:15,660
just if you set it to a non-zero value

823
00:35:15,660 --> 00:35:16,859
that implies that you enable web

824
00:35:16,859 --> 00:35:18,359
transport

825
00:35:18,359 --> 00:35:21,000
when actually writing that in with a

826
00:35:21,000 --> 00:35:23,160
keyboard into a document that got a

827
00:35:23,160 --> 00:35:24,720
little bit more thorny because settings

828
00:35:24,720 --> 00:35:26,880
web transport Max sessions set to a

829
00:35:26,880 --> 00:35:28,380
non-zero value implies that you're

830
00:35:28,380 --> 00:35:30,240
willing to accept an incoming session

831
00:35:30,240 --> 00:35:31,920
from the other side

832
00:35:31,920 --> 00:35:33,720
and that's a little bit weird for a

833
00:35:33,720 --> 00:35:35,339
client that is not allowed to open web

834
00:35:35,339 --> 00:35:37,440
transport sessions

835
00:35:37,440 --> 00:35:38,820
so

836
00:35:38,820 --> 00:35:40,859
this is a place where it would be nice

837
00:35:40,859 --> 00:35:43,320
to have input from the folks in this

838
00:35:43,320 --> 00:35:44,520
room

839
00:35:44,520 --> 00:35:47,460
um should we have both sides just

840
00:35:47,460 --> 00:35:48,839
continue to send enable because settings

841
00:35:48,839 --> 00:35:50,220
are cheap and it's not that hard and

842
00:35:50,220 --> 00:35:52,500
then the server sends back sessions or

843
00:35:52,500 --> 00:35:54,420
should we try to put in some fancy text

844
00:35:54,420 --> 00:35:55,859
that says that like the client just

845
00:35:55,859 --> 00:35:57,359
always sets it to one or something like

846
00:35:57,359 --> 00:35:58,200
that

847
00:35:58,200 --> 00:36:00,180
or try to do some weird definition of

848
00:36:00,180 --> 00:36:02,760
having zero not mean zero anymore

849
00:36:02,760 --> 00:36:05,940
oh I smell a bike shed it's my favorite

850
00:36:05,940 --> 00:36:07,680
kind

851
00:36:07,680 --> 00:36:09,480
zero one's fine

852
00:36:09,480 --> 00:36:13,140
I'd also be okay with zero and non-zero

853
00:36:13,140 --> 00:36:14,760
if the client wants to tell us over how

854
00:36:14,760 --> 00:36:16,500
many it intends to create if it knows

855
00:36:16,500 --> 00:36:18,720
but that I I don't think we need two

856
00:36:18,720 --> 00:36:20,040
settings but zero and one's probably

857
00:36:20,040 --> 00:36:21,780
best for the client so the client would

858
00:36:21,780 --> 00:36:23,339
set it to one to indicate support for

859
00:36:23,339 --> 00:36:25,440
web transport and just yeah and that

860
00:36:25,440 --> 00:36:27,000
doesn't actually mean that anybody can

861
00:36:27,000 --> 00:36:30,359
create anything to you yeah okay

862
00:36:30,359 --> 00:36:32,099
one

863
00:36:32,099 --> 00:36:34,500
just you know zero and one I think is

864
00:36:34,500 --> 00:36:35,700
most sensible I don't think there's any

865
00:36:35,700 --> 00:36:38,640
need or value in the client saying a

866
00:36:38,640 --> 00:36:39,660
hundred

867
00:36:39,660 --> 00:36:42,660
I just can't imagine what client would

868
00:36:42,660 --> 00:36:44,400
know how many sessions it would create

869
00:36:44,400 --> 00:36:45,800
at the time it makes the connection

870
00:36:45,800 --> 00:36:48,420
right so

871
00:36:48,420 --> 00:36:50,700
yes true or false

872
00:36:50,700 --> 00:36:53,220
which is a bit weird but better than

873
00:36:53,220 --> 00:36:56,839
having ooh two seconds

874
00:36:57,599 --> 00:36:59,520
is that actually better than having two

875
00:36:59,520 --> 00:37:01,680
settings where you send you know one one

876
00:37:01,680 --> 00:37:03,180
person just sends both

877
00:37:03,180 --> 00:37:06,900
so so settings like cost the same either

878
00:37:06,900 --> 00:37:09,119
way so this is just double the cost and

879
00:37:09,119 --> 00:37:10,560
we're going to be sending them on every

880
00:37:10,560 --> 00:37:11,520
connection

881
00:37:11,520 --> 00:37:14,339
yeah every connection we make to any web

882
00:37:14,339 --> 00:37:16,500
server will have this setting in it if

883
00:37:16,500 --> 00:37:18,119
you make a send to

884
00:37:18,119 --> 00:37:20,099
we're going to be spending all of those

885
00:37:20,099 --> 00:37:21,900
extra bytes and we do kind of care about

886
00:37:21,900 --> 00:37:23,099
those bytes

887
00:37:23,099 --> 00:37:26,760
so once One's best thank you

888
00:37:26,760 --> 00:37:29,240
Victor

889
00:37:30,060 --> 00:37:33,420
uh I'm moderate for two settings because

890
00:37:33,420 --> 00:37:35,460
I currently use settings enable web

891
00:37:35,460 --> 00:37:37,500
transport for versionings addressed

892
00:37:37,500 --> 00:37:38,820
protocols

893
00:37:38,820 --> 00:37:41,520
so if we don't use it for that we would

894
00:37:41,520 --> 00:37:43,079
have to come up with some alternative

895
00:37:43,079 --> 00:37:45,980
way of doing that

896
00:37:46,500 --> 00:37:48,119
can you describe a little bit more what

897
00:37:48,119 --> 00:37:50,280
you mean when you say versioning you so

898
00:37:50,280 --> 00:37:51,900
you're not setting it to zero one you're

899
00:37:51,900 --> 00:37:54,000
setting it to some version number well

900
00:37:54,000 --> 00:37:56,220
no we have nothing to enable web

901
00:37:56,220 --> 00:37:58,380
transport and the current code point is

902
00:37:58,380 --> 00:38:01,200
for draft O2 and the way we determine

903
00:38:01,200 --> 00:38:03,060
which version of web transport you speak

904
00:38:03,060 --> 00:38:05,579
is we find the highest enabled web

905
00:38:05,579 --> 00:38:08,280
transport route point

906
00:38:08,280 --> 00:38:10,560
but Victor you can do that with web Max

907
00:38:10,560 --> 00:38:13,560
sessions right oh sorry to jump in if

908
00:38:13,560 --> 00:38:17,160
both sides censored sure yeah so that's

909
00:38:17,160 --> 00:38:18,720
what that was The Proposal both sides

910
00:38:18,720 --> 00:38:21,119
send it and the client sends zero one

911
00:38:21,119 --> 00:38:23,640
okay and then we rotate that as an

912
00:38:23,640 --> 00:38:25,260
indicator for version okay I'm fine with

913
00:38:25,260 --> 00:38:27,540
that correct you just change the type of

914
00:38:27,540 --> 00:38:30,119
the setting not the value yeah

915
00:38:30,119 --> 00:38:32,339
Alan

916
00:38:32,339 --> 00:38:35,460
Alan trendel um since web transport

917
00:38:35,460 --> 00:38:38,220
sessions are client initiated aside from

918
00:38:38,220 --> 00:38:40,740
the use case Victor just mentioned

919
00:38:40,740 --> 00:38:43,859
uh which is a strange way to version the

920
00:38:43,859 --> 00:38:46,560
protocol anyway but okay

921
00:38:46,560 --> 00:38:48,660
um what if the client didn't have to

922
00:38:48,660 --> 00:38:51,720
announce support via setting and the

923
00:38:51,720 --> 00:38:53,940
server says I could handle one or more

924
00:38:53,940 --> 00:38:55,320
web transport sessions and then the

925
00:38:55,320 --> 00:38:58,020
client sends it one and it's like oh the

926
00:38:58,020 --> 00:39:00,359
client supports web transport otherwise

927
00:39:00,359 --> 00:39:03,359
what will you do other than just

928
00:39:03,359 --> 00:39:05,220
the client says I don't support it and

929
00:39:05,220 --> 00:39:06,420
then sends you a web transport session

930
00:39:06,420 --> 00:39:07,740
it's like aha

931
00:39:07,740 --> 00:39:10,260
I got you

932
00:39:10,260 --> 00:39:13,160
you get an error

933
00:39:16,200 --> 00:39:18,420
hey Lucas party Cloud Player I like

934
00:39:18,420 --> 00:39:20,700
Alan's suggestion just there

935
00:39:20,700 --> 00:39:22,260
um I think the the comment I was going

936
00:39:22,260 --> 00:39:24,119
to make was about defaults I didn't hear

937
00:39:24,119 --> 00:39:26,760
anything about defaults yeah and then

938
00:39:26,760 --> 00:39:28,380
maybe it's in this back I didn't read

939
00:39:28,380 --> 00:39:29,700
but like

940
00:39:29,700 --> 00:39:32,160
what the default would be off I suppose

941
00:39:32,160 --> 00:39:33,960
and unless you get the setting that says

942
00:39:33,960 --> 00:39:36,000
it's on and then it everything's a lot

943
00:39:36,000 --> 00:39:37,260
simpler so

944
00:39:37,260 --> 00:39:41,400
yes do that default would be zero and

945
00:39:41,400 --> 00:39:43,260
depending on is there anybody with a

946
00:39:43,260 --> 00:39:44,700
particular peer-to-peer use case that

947
00:39:44,700 --> 00:39:46,140
would want to be able to Signal this

948
00:39:46,140 --> 00:39:47,400
from both sides or would that just be

949
00:39:47,400 --> 00:39:48,720
its own extension that says now the

950
00:39:48,720 --> 00:39:50,099
client sends it and then the server can

951
00:39:50,099 --> 00:39:53,000
do stuff and we can move on

952
00:39:54,000 --> 00:39:55,920
sweet Jonathan uh yeah Jonathan I mean

953
00:39:55,920 --> 00:39:57,420
I'm not sure why you need to have I

954
00:39:57,420 --> 00:39:59,820
wouldn't having just the client send

955
00:39:59,820 --> 00:40:02,460
enable and the server meaning I I can

956
00:40:02,460 --> 00:40:04,500
create my website uh transport but don't

957
00:40:04,500 --> 00:40:05,940
create them to me

958
00:40:05,940 --> 00:40:08,700
basically have a different don't have

959
00:40:08,700 --> 00:40:10,380
you know basically the same semantic as

960
00:40:10,380 --> 00:40:12,900
Max session zero but it means Max

961
00:40:12,900 --> 00:40:15,480
session zero but I do web transport and

962
00:40:15,480 --> 00:40:17,099
so basically have

963
00:40:17,099 --> 00:40:19,380
this can be asymmetric basically you can

964
00:40:19,380 --> 00:40:21,720
have enable meaning

965
00:40:21,720 --> 00:40:23,880
not actually enable but I'm willing to

966
00:40:23,880 --> 00:40:25,859
create I'm able to create them

967
00:40:25,859 --> 00:40:27,599
that's essentially the current meaning

968
00:40:27,599 --> 00:40:29,040
of settings enable way yeah but then you

969
00:40:29,040 --> 00:40:30,480
would say but rather than both sides

970
00:40:30,480 --> 00:40:31,800
send enable just to have clients

971
00:40:31,800 --> 00:40:32,820
undenable

972
00:40:32,820 --> 00:40:34,859
so we could have them both send a

973
00:40:34,859 --> 00:40:36,000
setting and have them send different

974
00:40:36,000 --> 00:40:38,160
settings but at that point what valley

975
00:40:38,160 --> 00:40:39,720
challenge Point like what value are you

976
00:40:39,720 --> 00:40:40,740
getting out of having the client send

977
00:40:40,740 --> 00:40:42,960
anything

978
00:40:42,960 --> 00:40:44,579
I mean I think

979
00:40:44,579 --> 00:40:46,619
um yeah I mean I guess the question is

980
00:40:46,619 --> 00:40:49,020
if your implementation is such that like

981
00:40:49,020 --> 00:40:51,720
what the web transport stuff and the

982
00:40:51,720 --> 00:40:54,300
HTTP 3 stuff are different parts of your

983
00:40:54,300 --> 00:40:56,040
stack and you need to transfer the

984
00:40:56,040 --> 00:40:57,599
socket over to a different part of the

985
00:40:57,599 --> 00:40:59,040
handle but be determined what different

986
00:40:59,040 --> 00:41:00,119
part of your code or even a different

987
00:41:00,119 --> 00:41:01,680
process or something that would be the

988
00:41:01,680 --> 00:41:04,079
reason I would think but right well and

989
00:41:04,079 --> 00:41:05,460
if that's a use case that somebody has

990
00:41:05,460 --> 00:41:07,200
or a need that they have like let's talk

991
00:41:07,200 --> 00:41:08,940
about it now before we take away your

992
00:41:08,940 --> 00:41:10,380
setting

993
00:41:10,380 --> 00:41:13,920
that was what I was up here to ask uh

994
00:41:13,920 --> 00:41:15,900
David was ahead of me but now I'm yeah

995
00:41:15,900 --> 00:41:18,480
and never mind go for it does anyone

996
00:41:18,480 --> 00:41:20,520
need to know and I think I can probably

997
00:41:20,520 --> 00:41:22,859
answer that question so does any server

998
00:41:22,859 --> 00:41:25,980
need to know that if a client does work

999
00:41:25,980 --> 00:41:27,839
transplant I think there may be cases

1000
00:41:27,839 --> 00:41:29,520
where servers need to know

1001
00:41:29,520 --> 00:41:31,440
but in those scenarios you can put the

1002
00:41:31,440 --> 00:41:33,359
server on a different hostname

1003
00:41:33,359 --> 00:41:35,579
and the client will be able to connect

1004
00:41:35,579 --> 00:41:38,520
to them and do the magic stuff

1005
00:41:38,520 --> 00:41:39,300
um

1006
00:41:39,300 --> 00:41:42,060
that way rather than looking at other

1007
00:41:42,060 --> 00:41:44,640
things I like our own suggestion if if

1008
00:41:44,640 --> 00:41:46,040
we can

1009
00:41:46,040 --> 00:41:49,020
make ourselves happy with the fact that

1010
00:41:49,020 --> 00:41:50,880
the servers won't know until the connect

1011
00:41:50,880 --> 00:41:52,980
arrives right and the server is going to

1012
00:41:52,980 --> 00:41:54,839
get an opportunity to see that a connect

1013
00:41:54,839 --> 00:41:56,579
came in that it did say it supported and

1014
00:41:56,579 --> 00:41:58,460
that everybody said was totally on board

1015
00:41:58,460 --> 00:42:00,780
now you get in this list of protocols

1016
00:42:00,780 --> 00:42:02,339
and one of them is web transport and the

1017
00:42:02,339 --> 00:42:03,720
server says oh I guess the client

1018
00:42:03,720 --> 00:42:05,640
supports it I now have to ask how many

1019
00:42:05,640 --> 00:42:07,320
people running so how many people

1020
00:42:07,320 --> 00:42:10,260
building clients would pay attention to

1021
00:42:10,260 --> 00:42:13,740
a redirect in response to that connect

1022
00:42:13,740 --> 00:42:16,640
we might

1023
00:42:21,420 --> 00:42:22,680
um

1024
00:42:22,680 --> 00:42:25,079
David schenazi I I was initially going

1025
00:42:25,079 --> 00:42:27,000
to say that the client should send it

1026
00:42:27,000 --> 00:42:28,859
because like this modifies HTTP

1027
00:42:28,859 --> 00:42:31,619
semantics and it tells the server that

1028
00:42:31,619 --> 00:42:33,240
yes you can send sort of initiated

1029
00:42:33,240 --> 00:42:35,820
bi-directional streams and that's how we

1030
00:42:35,820 --> 00:42:38,460
generally do that in HTTP but then I

1031
00:42:38,460 --> 00:42:40,079
remembered that I really don't care

1032
00:42:40,079 --> 00:42:42,060
either way works

1033
00:42:42,060 --> 00:42:44,880
um and Victor's visioning thing from the

1034
00:42:44,880 --> 00:42:46,560
client can be done as a header as well

1035
00:42:46,560 --> 00:42:49,500
all of these work so now with my chair

1036
00:42:49,500 --> 00:42:51,420
head on I'm going to cut the cue after

1037
00:42:51,420 --> 00:42:54,240
Mike and Luke so we don't spend the

1038
00:42:54,240 --> 00:42:55,800
whole time on this bike shed but go

1039
00:42:55,800 --> 00:42:58,040
ahead

1040
00:42:58,260 --> 00:43:01,760
oh Luca sneaky

1041
00:43:01,920 --> 00:43:04,260
I will be very brief and just say it

1042
00:43:04,260 --> 00:43:05,880
does not seem like there's any actual

1043
00:43:05,880 --> 00:43:07,740
information here that the server needs

1044
00:43:07,740 --> 00:43:09,359
to receive from the client

1045
00:43:09,359 --> 00:43:11,339
the client needs to receive the number

1046
00:43:11,339 --> 00:43:13,740
of sessions and anything other than zero

1047
00:43:13,740 --> 00:43:15,900
implies everything the client needs to

1048
00:43:15,900 --> 00:43:18,420
know so let's just have one setting set

1049
00:43:18,420 --> 00:43:21,440
in One Direction and be done

1050
00:43:22,859 --> 00:43:25,020
all right Luke uh Fringe use case but

1051
00:43:25,020 --> 00:43:27,119
worth saying my server is only web

1052
00:43:27,119 --> 00:43:29,099
transport I don't want to serve HTTP 3

1053
00:43:29,099 --> 00:43:31,020
so if quick connects to me and it

1054
00:43:31,020 --> 00:43:32,880
doesn't support web transport I want to

1055
00:43:32,880 --> 00:43:34,560
close the connections that it's not just

1056
00:43:34,560 --> 00:43:36,599
wasting resources

1057
00:43:36,599 --> 00:43:39,920
but it's kind of Fringe

1058
00:43:40,319 --> 00:43:41,819
thank you yeah I think that's the kind

1059
00:43:41,819 --> 00:43:43,859
of like hey I have a legitimate reason I

1060
00:43:43,859 --> 00:43:45,599
need this to be sent

1061
00:43:45,599 --> 00:43:49,200
so if those exist Now's the Time

1062
00:43:49,200 --> 00:43:51,540
hey Lucas Pottery just a quick one

1063
00:43:51,540 --> 00:43:53,940
um the what was I forgot what was it

1064
00:43:53,940 --> 00:43:57,180
gonna say damn oh uh quite often we

1065
00:43:57,180 --> 00:43:58,560
think of settings as the only way to

1066
00:43:58,560 --> 00:44:01,440
negotiate a semantic change in HP 203

1067
00:44:01,440 --> 00:44:04,200
the spec doesn't require that it can be

1068
00:44:04,200 --> 00:44:06,180
whatever else we would come up with so

1069
00:44:06,180 --> 00:44:10,700
that would fit potentially this as well

1070
00:44:10,980 --> 00:44:12,780
thanks

1071
00:44:12,780 --> 00:44:15,599
um as chair the sense from the room that

1072
00:44:15,599 --> 00:44:18,180
I'm getting is there are some opinions

1073
00:44:18,180 --> 00:44:20,220
but no one

1074
00:44:20,220 --> 00:44:22,740
feels overly strongly and there seems to

1075
00:44:22,740 --> 00:44:24,480
be a sense of the room for one setting

1076
00:44:24,480 --> 00:44:27,060
only sent from the server

1077
00:44:27,060 --> 00:44:31,700
uh can someone not live with that

1078
00:44:36,359 --> 00:44:38,940
crickets

1079
00:44:38,940 --> 00:44:41,940
uh Victor in the chat objects to can you

1080
00:44:41,940 --> 00:44:44,960
come to the mic Victor then

1081
00:44:47,060 --> 00:44:50,160
as I said the versioning sync cannot be

1082
00:44:50,160 --> 00:44:53,660
done via the only server thing because

1083
00:44:53,660 --> 00:44:56,579
you have to understand which version you

1084
00:44:56,579 --> 00:44:59,400
speak so for instance between regular 2

1085
00:44:59,400 --> 00:45:02,339
and chapter four we decided that we're

1086
00:45:02,339 --> 00:45:05,400
uh Banning uh

1087
00:45:05,400 --> 00:45:07,680
on bi-directional streams where require

1088
00:45:07,680 --> 00:45:10,740
web transport uh session frame to be in

1089
00:45:10,740 --> 00:45:12,119
the very front

1090
00:45:12,119 --> 00:45:14,400
and that would be a breaking wire change

1091
00:45:14,400 --> 00:45:17,339
and we have to know on client and server

1092
00:45:17,339 --> 00:45:19,260
have an agreement on which version is

1093
00:45:19,260 --> 00:45:21,540
actively being used

1094
00:45:21,540 --> 00:45:24,060
uh clarifying question Victor can't you

1095
00:45:24,060 --> 00:45:27,200
do that with a header on the request

1096
00:45:27,200 --> 00:45:34,160
no because by that time because that is

1097
00:45:34,619 --> 00:45:37,859
because one the header per request not

1098
00:45:37,859 --> 00:45:41,040
per connection so you have to like cache

1099
00:45:41,040 --> 00:45:44,280
it once and two you can receive that

1100
00:45:44,280 --> 00:45:46,380
bi-directional stream before you say it

1101
00:45:46,380 --> 00:45:48,359
receives the open connect because there

1102
00:45:48,359 --> 00:45:50,220
is asynchronous

1103
00:45:50,220 --> 00:45:52,560
so by the time you just receive web

1104
00:45:52,560 --> 00:45:54,780
transport data you might not see the

1105
00:45:54,780 --> 00:45:57,480
header in the first place so so I think

1106
00:45:57,480 --> 00:46:00,180
we have two concrete options here option

1107
00:46:00,180 --> 00:46:02,880
one is the server sends settings web

1108
00:46:02,880 --> 00:46:06,119
transport Max sessions it can you can

1109
00:46:06,119 --> 00:46:07,560
encode a version in the type of the

1110
00:46:07,560 --> 00:46:08,640
thing that it sends there if you like

1111
00:46:08,640 --> 00:46:10,859
and when the client sends extended

1112
00:46:10,859 --> 00:46:13,079
connect you can always mint a draft

1113
00:46:13,079 --> 00:46:15,060
specific protocol token just like we did

1114
00:46:15,060 --> 00:46:17,760
with alpn for H3 and things like that

1115
00:46:17,760 --> 00:46:20,700
right and that arrives with the extended

1116
00:46:20,700 --> 00:46:22,859
connect there's no asynchrony happening

1117
00:46:22,859 --> 00:46:25,200
there there's no reordering possible the

1118
00:46:25,200 --> 00:46:27,720
other concrete option is we say both

1119
00:46:27,720 --> 00:46:29,700
sides send Max sessions and we just

1120
00:46:29,700 --> 00:46:31,319
Define one from a client to be a

1121
00:46:31,319 --> 00:46:33,000
sentinel value that means I support it

1122
00:46:33,000 --> 00:46:34,319
but I'm not willing to accept any

1123
00:46:34,319 --> 00:46:37,280
incoming web transport sessions

1124
00:46:37,280 --> 00:46:40,140
foreign it sounds like we were leaning

1125
00:46:40,140 --> 00:46:42,900
towards the first option there not the

1126
00:46:42,900 --> 00:46:45,619
second option there

1127
00:46:48,000 --> 00:46:50,099
does that work for you Victor can you

1128
00:46:50,099 --> 00:46:52,520
live with that

1129
00:46:57,599 --> 00:47:00,359
I'm I'm sorry could you repeat that

1130
00:47:00,359 --> 00:47:01,560
again

1131
00:47:01,560 --> 00:47:05,400
yes so option one the server sends

1132
00:47:05,400 --> 00:47:07,200
settings web transport Max sessions to

1133
00:47:07,200 --> 00:47:08,700
some non-zero value

1134
00:47:08,700 --> 00:47:11,420
and the type of that

1135
00:47:11,420 --> 00:47:14,339
transport of that setting encodes your

1136
00:47:14,339 --> 00:47:15,240
version

1137
00:47:15,240 --> 00:47:17,460
and when the client sends extended

1138
00:47:17,460 --> 00:47:19,079
connect you can always mint a new

1139
00:47:19,079 --> 00:47:21,839
protocol uh entry so right now we just

1140
00:47:21,839 --> 00:47:23,040
call it web transport but you could

1141
00:47:23,040 --> 00:47:25,200
always call it web transport-02 or

1142
00:47:25,200 --> 00:47:26,880
however you want to Signal support for

1143
00:47:26,880 --> 00:47:28,859
different draft versions of things just

1144
00:47:28,859 --> 00:47:31,619
like we did with alpn for H3

1145
00:47:31,619 --> 00:47:32,220
um

1146
00:47:32,220 --> 00:47:34,920
your second option is settings web

1147
00:47:34,920 --> 00:47:36,599
transport Max sessions is sent by both

1148
00:47:36,599 --> 00:47:38,940
sides you've encoded the version in the

1149
00:47:38,940 --> 00:47:41,760
type of that setting and we Define one

1150
00:47:41,760 --> 00:47:44,220
for the client to be a sentinel that

1151
00:47:44,220 --> 00:47:45,960
means that I'm not accepting any web

1152
00:47:45,960 --> 00:47:47,760
transport sessions at all but I do

1153
00:47:47,760 --> 00:47:49,560
support web transport and you can then

1154
00:47:49,560 --> 00:47:51,480
infer the version from the type of the

1155
00:47:51,480 --> 00:47:54,060
setting that was sent

1156
00:47:54,060 --> 00:47:55,319
oh

1157
00:47:55,319 --> 00:47:58,759
yeah and

1158
00:47:59,280 --> 00:48:00,960
so if we would like to go with the first

1159
00:48:00,960 --> 00:48:02,579
option can you live with that over the

1160
00:48:02,579 --> 00:48:04,700
second

1161
00:48:05,160 --> 00:48:08,160
the first option

1162
00:48:08,160 --> 00:48:11,118
uh

1163
00:48:15,300 --> 00:48:16,740
I'm

1164
00:48:16,740 --> 00:48:19,980
thinking about the ways of in

1165
00:48:19,980 --> 00:48:23,880
what currently we have works and I have

1166
00:48:23,880 --> 00:48:26,040
serious doubts

1167
00:48:26,040 --> 00:48:27,780
okay we can always take that to the list

1168
00:48:27,780 --> 00:48:29,400
too I think it would be fine for us to

1169
00:48:29,400 --> 00:48:32,040
to ask for feedback

1170
00:48:32,040 --> 00:48:35,099
that's uh Martin you know I just I just

1171
00:48:35,099 --> 00:48:37,380
realized that with with the first design

1172
00:48:37,380 --> 00:48:39,119
the server can advertise support for

1173
00:48:39,119 --> 00:48:40,619
multiple versions

1174
00:48:40,619 --> 00:48:42,300
now clients can exercise whichever one

1175
00:48:42,300 --> 00:48:43,740
they choose

1176
00:48:43,740 --> 00:48:45,839
simply by indicating with the version in

1177
00:48:45,839 --> 00:48:47,220
the in the header field

1178
00:48:47,220 --> 00:48:50,400
the challenge with the other design is

1179
00:48:50,400 --> 00:48:53,160
that if the client can't support

1180
00:48:53,160 --> 00:48:54,900
multiple versions you don't have any

1181
00:48:54,900 --> 00:48:56,220
version negotiation available because

1182
00:48:56,220 --> 00:48:58,500
the client if the client says oh I

1183
00:48:58,500 --> 00:49:02,099
support draft 15 and draft 16.

1184
00:49:02,099 --> 00:49:06,599
then when it exercises that option later

1185
00:49:06,599 --> 00:49:08,760
there's no way of knowing which one it

1186
00:49:08,760 --> 00:49:10,560
concretely is using

1187
00:49:10,560 --> 00:49:14,280
so I'm uh I'm like even stronger on

1188
00:49:14,280 --> 00:49:16,079
option one now

1189
00:49:16,079 --> 00:49:19,680
to answer that just we we made that work

1190
00:49:19,680 --> 00:49:22,740
for HTTP datagrams were we said in the

1191
00:49:22,740 --> 00:49:25,260
draft if multiple versions are supported

1192
00:49:25,260 --> 00:49:28,079
the latest one is what is agreed on

1193
00:49:28,079 --> 00:49:30,540
so you can make that work you can sort

1194
00:49:30,540 --> 00:49:32,339
of make it work okay yeah yeah but even

1195
00:49:32,339 --> 00:49:35,400
still I'm still send nothing ever from

1196
00:49:35,400 --> 00:49:38,780
the client said the bits

1197
00:49:38,819 --> 00:49:41,300
Victor

1198
00:49:43,859 --> 00:49:46,319
I I was about to make the thing no more

1199
00:49:46,319 --> 00:49:50,339
too this is the the way when HTTP

1200
00:49:50,339 --> 00:49:52,800
datagrams work is you pick some X

1201
00:49:52,800 --> 00:49:53,579
version

1202
00:49:53,579 --> 00:49:55,980
yeah so given all the conversation

1203
00:49:55,980 --> 00:49:58,619
Victor uh can you live with this and or

1204
00:49:58,619 --> 00:50:00,660
should we take this to the list

1205
00:50:00,660 --> 00:50:02,900
uh I think we should take it to the list

1206
00:50:02,900 --> 00:50:05,640
I can imagine us living with this long

1207
00:50:05,640 --> 00:50:07,380
term as in

1208
00:50:07,380 --> 00:50:09,720
when we ship the final version with the

1209
00:50:09,720 --> 00:50:12,240
laser client-side setting

1210
00:50:12,240 --> 00:50:13,619
all right let's take it to the list

1211
00:50:13,619 --> 00:50:15,359
thanks

1212
00:50:15,359 --> 00:50:17,520
all right moving right along flow

1213
00:50:17,520 --> 00:50:19,619
control in H2

1214
00:50:19,619 --> 00:50:21,119
um this is way easier than flow control

1215
00:50:21,119 --> 00:50:22,560
in H3

1216
00:50:22,560 --> 00:50:24,180
we have a setting it limits the number

1217
00:50:24,180 --> 00:50:25,800
of sessions we just spent a good long

1218
00:50:25,800 --> 00:50:27,060
time talking about it

1219
00:50:27,060 --> 00:50:29,040
Follow That Thing respect to the Limit

1220
00:50:29,040 --> 00:50:31,200
don't screw it up

1221
00:50:31,200 --> 00:50:32,579
that is all

1222
00:50:32,579 --> 00:50:34,619
right so we are now in a place where we

1223
00:50:34,619 --> 00:50:36,359
have uh read and reviewed some of these

1224
00:50:36,359 --> 00:50:38,280
PRS so thank you folks who did that

1225
00:50:38,280 --> 00:50:39,960
sounds like we're going to send a thing

1226
00:50:39,960 --> 00:50:41,760
closing our consensus call on that at

1227
00:50:41,760 --> 00:50:43,619
which point we will just merge things

1228
00:50:43,619 --> 00:50:47,880
yep well um and please if you know I I

1229
00:50:47,880 --> 00:50:50,579
see Victor Martin keep keep the constant

1230
00:50:50,579 --> 00:50:52,020
the conversation going in the chat if

1231
00:50:52,020 --> 00:50:53,160
you can resolve it there otherwise we

1232
00:50:53,160 --> 00:50:54,839
can do it on the list let's not please

1233
00:50:54,839 --> 00:50:57,300
face plant on the settings like this is

1234
00:50:57,300 --> 00:50:59,180
the silliest part of the protocol

1235
00:50:59,180 --> 00:51:02,160
uh oh for next time no close the slide

1236
00:51:02,160 --> 00:51:03,599
they've added a button so where I can

1237
00:51:03,599 --> 00:51:07,079
reclaim control now yeah no worries

1238
00:51:07,079 --> 00:51:09,059
anyway

1239
00:51:09,059 --> 00:51:10,380
um

1240
00:51:10,380 --> 00:51:13,020
cool then oh right no Victor's not going

1241
00:51:13,020 --> 00:51:14,280
to continue the conversation he's going

1242
00:51:14,280 --> 00:51:16,079
to be up here presenting

1243
00:51:16,079 --> 00:51:16,740
um

1244
00:51:16,740 --> 00:51:21,599
let me share pre-loaded slides

1245
00:51:21,599 --> 00:51:22,980
share

1246
00:51:22,980 --> 00:51:26,819
yes you can send multiple settings in H3

1247
00:51:26,819 --> 00:51:30,000
uh uh and

1248
00:51:30,000 --> 00:51:32,940
Victor can you request a slight transfer

1249
00:51:32,940 --> 00:51:35,839
or whatever that's called

1250
00:51:39,000 --> 00:51:42,079
nope too far

1251
00:51:48,660 --> 00:51:50,579
all right you're muted but you should

1252
00:51:50,579 --> 00:51:53,760
have control of the slides

1253
00:51:53,760 --> 00:51:56,300
foreign

1254
00:51:56,300 --> 00:51:59,720
still muted

1255
00:52:00,000 --> 00:52:02,160
the slides are maybe is he's trying to

1256
00:52:02,160 --> 00:52:05,000
say something in Morse code

1257
00:52:06,740 --> 00:52:08,819
mute it now

1258
00:52:08,819 --> 00:52:11,700
all right now we can hear you

1259
00:52:11,700 --> 00:52:16,559
uh okay so uh I'm doing the presentation

1260
00:52:16,559 --> 00:52:19,079
for web transfer to overage free open

1261
00:52:19,079 --> 00:52:22,440
issues there are plenty of those but

1262
00:52:22,440 --> 00:52:25,260
most of those are actually either

1263
00:52:25,260 --> 00:52:27,540
addressed by the previous presentation

1264
00:52:27,540 --> 00:52:30,900
uh IE is a

1265
00:52:30,900 --> 00:52:34,020
design team output or they're addressed

1266
00:52:34,020 --> 00:52:36,300
by the presentation that Martin will

1267
00:52:36,300 --> 00:52:37,380
make later

1268
00:52:37,380 --> 00:52:40,740
so first of all the update on what

1269
00:52:40,740 --> 00:52:43,760
actually got merged which is one issue

1270
00:52:43,760 --> 00:52:48,119
uh is uh that we have a clarification

1271
00:52:48,119 --> 00:52:51,540
text on that when exactly you can open

1272
00:52:51,540 --> 00:52:53,880
new streams and datagrams and the client

1273
00:52:53,880 --> 00:52:56,099
can basically open them as soon as it

1274
00:52:56,099 --> 00:52:58,260
opens extended connect

1275
00:52:58,260 --> 00:53:01,260
uh

1276
00:53:01,339 --> 00:53:06,079
now let's discuss open issues there are

1277
00:53:06,079 --> 00:53:10,020
three of them and one of them I think is

1278
00:53:10,020 --> 00:53:13,559
easy and two musem or hard

1279
00:53:13,559 --> 00:53:16,559
so the first issue that I think is

1280
00:53:16,559 --> 00:53:19,380
relatively easy is that we have a

1281
00:53:19,380 --> 00:53:22,200
proposal is that currently we have

1282
00:53:22,200 --> 00:53:24,359
settings enable web transport or

1283
00:53:24,359 --> 00:53:27,480
settings Max web transport sessions uh

1284
00:53:27,480 --> 00:53:30,119
that tells you that currently tells you

1285
00:53:30,119 --> 00:53:33,059
that everything all depending features

1286
00:53:33,059 --> 00:53:36,420
are enabled and the proposal is that it

1287
00:53:36,420 --> 00:53:38,940
should no longer do that and that we

1288
00:53:38,940 --> 00:53:42,480
explicitly acquire you to obtain into

1289
00:53:42,480 --> 00:53:45,839
supporting a capsules be quick datagrams

1290
00:53:45,839 --> 00:53:49,520
C HTTP datagrams and de extended connect

1291
00:53:49,520 --> 00:53:52,160
and you need all of those in order

1292
00:53:52,160 --> 00:53:54,960
explicitly negotiated in order for web

1293
00:53:54,960 --> 00:53:56,420
transfer to work

1294
00:53:56,420 --> 00:53:59,819
uh and uh I believe this is a correct

1295
00:53:59,819 --> 00:54:01,980
proposal and we should adapt it the only

1296
00:54:01,980 --> 00:54:05,819
reason this used to not work this way is

1297
00:54:05,819 --> 00:54:08,520
that the settings extended connect was

1298
00:54:08,520 --> 00:54:11,819
not even defined for HTTP free when

1299
00:54:11,819 --> 00:54:14,040
the original license draft was written

1300
00:54:14,040 --> 00:54:16,200
and now that it's written uh I believe

1301
00:54:16,200 --> 00:54:17,819
we should

1302
00:54:17,819 --> 00:54:21,420
uh adopt this proposal do people have

1303
00:54:21,420 --> 00:54:25,500
any opinions or comments on this

1304
00:54:25,500 --> 00:54:28,020
on

1305
00:54:28,020 --> 00:54:31,319
Alan frindell um so I actually got web

1306
00:54:31,319 --> 00:54:34,020
transport uh uh implementation working

1307
00:54:34,020 --> 00:54:38,160
uh this week with chrome and uh it was a

1308
00:54:38,160 --> 00:54:41,280
huge pain to figure out why Chrome did

1309
00:54:41,280 --> 00:54:42,960
not like my

1310
00:54:42,960 --> 00:54:45,960
server for a long time and I think

1311
00:54:45,960 --> 00:54:47,099
the thing I don't like about this

1312
00:54:47,099 --> 00:54:48,960
proposal is that there's four different

1313
00:54:48,960 --> 00:54:50,220
ways you can

1314
00:54:50,220 --> 00:54:53,400
screw up and fail your handshake

1315
00:54:53,400 --> 00:54:55,079
and it might be easier if there was just

1316
00:54:55,079 --> 00:54:57,480
like yes I want to do web transport damn

1317
00:54:57,480 --> 00:54:58,819
it

1318
00:54:58,819 --> 00:55:05,099
uh Alan uh my answer to this is the uh

1319
00:55:05,099 --> 00:55:08,640
please file a bug for better developer

1320
00:55:08,640 --> 00:55:09,599
tooling

1321
00:55:09,599 --> 00:55:12,359
uh for Chrome because this is definitely

1322
00:55:12,359 --> 00:55:15,900
something I have uh have that has

1323
00:55:15,900 --> 00:55:18,960
frustrated me in the past and I don't

1324
00:55:18,960 --> 00:55:21,000
think we can get rid of all of this

1325
00:55:21,000 --> 00:55:24,300
issues so we definitely need more

1326
00:55:24,300 --> 00:55:27,480
informative uh tooling to tell you why

1327
00:55:27,480 --> 00:55:31,559
your server got rejected uh uh and it's

1328
00:55:31,559 --> 00:55:35,180
just a matter of writing with the code

1329
00:55:36,180 --> 00:55:37,680
Eric

1330
00:55:37,680 --> 00:55:40,020
so is is that a case where it is just a

1331
00:55:40,020 --> 00:55:41,160
developer tooling thing or is that

1332
00:55:41,160 --> 00:55:42,300
actually going to be a huge pain for

1333
00:55:42,300 --> 00:55:43,980
everybody because I would be strongly in

1334
00:55:43,980 --> 00:55:45,720
favor of not having to teach all my

1335
00:55:45,720 --> 00:55:47,520
different layers about each other quite

1336
00:55:47,520 --> 00:55:51,000
as explicitly here so

1337
00:55:51,000 --> 00:55:53,760
the the annoyance in debugging is is

1338
00:55:53,760 --> 00:55:57,180
annoying but doesn't imply a ton of code

1339
00:55:57,180 --> 00:55:59,598
writing

1340
00:56:02,520 --> 00:56:05,760
uh just to reply I I think maybe the

1341
00:56:05,760 --> 00:56:07,440
it makes quick datagrams are a totally

1342
00:56:07,440 --> 00:56:10,980
different layer and I didn't like having

1343
00:56:10,980 --> 00:56:12,540
it for HP dreams I think extended

1344
00:56:12,540 --> 00:56:14,160
connect was kind of the one that felt

1345
00:56:14,160 --> 00:56:16,079
like why do I have to opt into this but

1346
00:56:16,079 --> 00:56:19,160
anyway sorry

1347
00:56:19,260 --> 00:56:21,900
uh Jonathan Lennox I think

1348
00:56:21,900 --> 00:56:24,900
um listing them all explicitly is

1349
00:56:24,900 --> 00:56:26,400
uh probably a good idea because

1350
00:56:26,400 --> 00:56:27,720
otherwise in five years we're going to

1351
00:56:27,720 --> 00:56:30,000
be in a situation where you know okay

1352
00:56:30,000 --> 00:56:32,700
you send you know if you want these 15

1353
00:56:32,700 --> 00:56:34,440
features and this one implies these four

1354
00:56:34,440 --> 00:56:36,660
but not these other three and it'll be a

1355
00:56:36,660 --> 00:56:37,980
complete mess rather than just let's

1356
00:56:37,980 --> 00:56:41,220
list them all from the start that said I

1357
00:56:41,220 --> 00:56:42,599
feel like there should be

1358
00:56:42,599 --> 00:56:43,980
clear Direction on what to do if

1359
00:56:43,980 --> 00:56:45,119
somebody gives you a nonsensical

1360
00:56:45,119 --> 00:56:47,160
response like you know I support web

1361
00:56:47,160 --> 00:56:48,660
transport but not extended connect or

1362
00:56:48,660 --> 00:56:50,579
something like that so

1363
00:56:50,579 --> 00:56:51,180
um

1364
00:56:51,180 --> 00:56:53,040
or you know HTTP datagrams are not quick

1365
00:56:53,040 --> 00:56:54,359
datagrams

1366
00:56:54,359 --> 00:56:55,559
um there should be a clear indication of

1367
00:56:55,559 --> 00:56:57,119
just you know if so somebody has

1368
00:56:57,119 --> 00:56:58,500
something nonsensical just tear it down

1369
00:56:58,500 --> 00:56:59,760
and consider it a complete failure don't

1370
00:56:59,760 --> 00:57:02,119
try to continue

1371
00:57:03,900 --> 00:57:06,780
and Jonathan either medeco glitch or you

1372
00:57:06,780 --> 00:57:09,300
cut in front of Mike and Lucas so no no

1373
00:57:09,300 --> 00:57:11,280
big deal just for next time

1374
00:57:11,280 --> 00:57:14,000
go ahead Mike

1375
00:57:15,960 --> 00:57:18,480
um well someone to repeat what uh what

1376
00:57:18,480 --> 00:57:21,420
he just said that if you try to do web

1377
00:57:21,420 --> 00:57:23,579
transport without having turned on one

1378
00:57:23,579 --> 00:57:25,200
of these features it depends on it

1379
00:57:25,200 --> 00:57:26,760
should throw an error that says I don't

1380
00:57:26,760 --> 00:57:29,520
have my required dependencies and that

1381
00:57:29,520 --> 00:57:31,740
will help with debugging

1382
00:57:31,740 --> 00:57:34,440
um I will point out that technically

1383
00:57:34,440 --> 00:57:36,960
quick datagrams is not a hard dependency

1384
00:57:36,960 --> 00:57:38,819
for HTTP datagrams because we have a

1385
00:57:38,819 --> 00:57:41,160
datagram capsule

1386
00:57:41,160 --> 00:57:43,800
I wouldn't but we added the requirement

1387
00:57:43,800 --> 00:57:45,900
that it'd be in there

1388
00:57:45,900 --> 00:57:47,099
um so

1389
00:57:47,099 --> 00:57:49,319
it's not quite nonsensical it's just

1390
00:57:49,319 --> 00:57:50,700
prohibited

1391
00:57:50,700 --> 00:57:52,859
but yes you should always explicitly

1392
00:57:52,859 --> 00:57:55,500
negotiate the features that you need and

1393
00:57:55,500 --> 00:57:56,940
then fail if the ones you need are not

1394
00:57:56,940 --> 00:57:58,859
present don't try to imply things

1395
00:57:58,859 --> 00:58:02,420
because that way life's Madness

1396
00:58:03,059 --> 00:58:06,260
thank you Lucas

1397
00:58:07,319 --> 00:58:09,240
hello Lucas Pardo

1398
00:58:09,240 --> 00:58:12,059
um yeah the comment sorry I just got

1399
00:58:12,059 --> 00:58:14,940
invoked to say devtooling's really awful

1400
00:58:14,940 --> 00:58:17,400
all of this layer are very pessimistic

1401
00:58:17,400 --> 00:58:18,599
it's going to get better I want to put

1402
00:58:18,599 --> 00:58:20,700
energy into it and try and work with the

1403
00:58:20,700 --> 00:58:22,020
community to do it but I wouldn't hold

1404
00:58:22,020 --> 00:58:24,059
my breath on that happening

1405
00:58:24,059 --> 00:58:25,980
um it's going to make web transport

1406
00:58:25,980 --> 00:58:28,319
interrupt difficult for us the best bet

1407
00:58:28,319 --> 00:58:30,359
we can get is probably seeing like uh

1408
00:58:30,359 --> 00:58:35,220
400 or 500 response to a connect UDP

1409
00:58:35,220 --> 00:58:36,420
coming back

1410
00:58:36,420 --> 00:58:37,859
um but anything else is like going to be

1411
00:58:37,859 --> 00:58:39,540
super tricky but we should do a lot

1412
00:58:39,540 --> 00:58:41,779
better

1413
00:58:42,180 --> 00:58:46,319
uh David schenazi speaking as individual

1414
00:58:46,319 --> 00:58:50,040
um yeah I'm very strongly in favor of

1415
00:58:50,040 --> 00:58:51,960
using the setting for every feature that

1416
00:58:51,960 --> 00:58:54,299
we use because like we have points in

1417
00:58:54,299 --> 00:58:55,859
our stack that

1418
00:58:55,859 --> 00:58:58,380
uh let's say validate the pseudo headers

1419
00:58:58,380 --> 00:59:02,099
and like I'd rather like not teach web

1420
00:59:02,099 --> 00:59:03,599
transport to Parts that'll need to

1421
00:59:03,599 --> 00:59:06,200
personally

1422
00:59:07,200 --> 00:59:10,640
so now speaking as chair

1423
00:59:10,640 --> 00:59:13,619
uh Alan you sound in the rough do you

1424
00:59:13,619 --> 00:59:16,980
can you live with this all right

1425
00:59:16,980 --> 00:59:20,880
cool uh I'll repeat in this in the mic

1426
00:59:20,880 --> 00:59:24,059
for anyone remote uh Alan says he's fine

1427
00:59:24,059 --> 00:59:26,520
with it so I think we we have rough

1428
00:59:26,520 --> 00:59:28,619
consensus here thanks for thanks for

1429
00:59:28,619 --> 00:59:32,059
thanks for that Alan appreciate it

1430
00:59:33,720 --> 00:59:36,119
all right let's move on to the next

1431
00:59:36,119 --> 00:59:39,000
issue which is a bit more complicated

1432
00:59:39,000 --> 00:59:42,839
uh what do we do with HTTP redirects so

1433
00:59:42,839 --> 00:59:44,940
during the last meeting we all agree

1434
00:59:44,940 --> 00:59:47,760
that we definitely should have either a

1435
00:59:47,760 --> 00:59:49,740
must support redirect or must not

1436
00:59:49,740 --> 00:59:52,380
support redirect because anything else

1437
00:59:52,380 --> 00:59:54,240
is just highly unpleasant developer

1438
00:59:54,240 --> 00:59:58,920
experience and everyone was uh leaning

1439
00:59:58,920 --> 01:00:01,980
and it's a general consensuses or MC was

1440
01:00:01,980 --> 01:00:04,260
leaning towards supporting them and

1441
01:00:04,260 --> 01:00:05,960
requiring their support

1442
01:00:05,960 --> 01:00:11,400
uh and I went and I asked Adam rice who

1443
01:00:11,400 --> 01:00:16,440
was the reason I originally uh uh we did

1444
01:00:16,440 --> 01:00:20,480
not support toys RX is what are the uh

1445
01:00:20,480 --> 01:00:23,940
pitfalls with that and he made a reply

1446
01:00:23,940 --> 01:00:26,400
which is you can read on the issue

1447
01:00:26,400 --> 01:00:29,400
tracker with one of the potential

1448
01:00:29,400 --> 01:00:33,180
attack on redirects but so the more I

1449
01:00:33,180 --> 01:00:35,640
think about it the more I said I come to

1450
01:00:35,640 --> 01:00:38,460
conclusions that redirects have a lot of

1451
01:00:38,460 --> 01:00:42,240
really unpleasant semantic edge cases

1452
01:00:42,240 --> 01:00:45,119
and a lot of them revolve around the

1453
01:00:45,119 --> 01:00:46,440
fact that

1454
01:00:46,440 --> 01:00:49,319
in order to send the redirect to a web

1455
01:00:49,319 --> 01:00:53,460
transport resource you need to uh

1456
01:00:53,460 --> 01:00:55,619
user connections that supports web

1457
01:00:55,619 --> 01:00:57,599
transferred but redirect is something

1458
01:00:57,599 --> 01:01:01,200
that a server that either supports or

1459
01:01:01,200 --> 01:01:02,880
does not support where transport can

1460
01:01:02,880 --> 01:01:07,020
reply with so what happens if you get a

1461
01:01:07,020 --> 01:01:09,000
redirect for a web transport resource

1462
01:01:09,000 --> 01:01:10,980
and it redirects you to somewhere where

1463
01:01:10,980 --> 01:01:14,700
this not support web transport or can

1464
01:01:14,700 --> 01:01:16,619
you consist what

1465
01:01:16,619 --> 01:01:19,440
should we handle redirects and attempt

1466
01:01:19,440 --> 01:01:21,960
to fetch for those redirects in cases

1467
01:01:21,960 --> 01:01:22,920
when

1468
01:01:22,920 --> 01:01:25,140
uh we are on the connections that does

1469
01:01:25,140 --> 01:01:26,579
not support web transport in the first

1470
01:01:26,579 --> 01:01:30,660
place and then the second issue is okay

1471
01:01:30,660 --> 01:01:33,540
we allow technically currently allow

1472
01:01:33,540 --> 01:01:37,380
client to start sending streams uh when

1473
01:01:37,380 --> 01:01:39,299
the

1474
01:01:39,299 --> 01:01:42,839
before getting reply from the server and

1475
01:01:42,839 --> 01:01:45,119
this has the obvious problem of okay we

1476
01:01:45,119 --> 01:01:47,099
sent some data on the streams to the

1477
01:01:47,099 --> 01:01:49,500
server and now we got redirected what

1478
01:01:49,500 --> 01:01:52,440
happens to those streams and that is the

1479
01:01:52,440 --> 01:01:54,660
second problem we have to deal with this

1480
01:01:54,660 --> 01:01:57,540
so my personal current inclination is

1481
01:01:57,540 --> 01:01:59,160
that we should not support redirects

1482
01:01:59,160 --> 01:02:00,839
because we will have to deal with all of

1483
01:02:00,839 --> 01:02:03,240
those and I would like to know what

1484
01:02:03,240 --> 01:02:05,339
people in the room think about this

1485
01:02:05,339 --> 01:02:07,980
Market

1486
01:02:07,980 --> 01:02:09,900
yeah I think we should

1487
01:02:09,900 --> 01:02:11,700
um support them I don't I think that the

1488
01:02:11,700 --> 01:02:14,160
first two are very very easy if you ever

1489
01:02:14,160 --> 01:02:17,520
hit a a server that doesn't support web

1490
01:02:17,520 --> 01:02:19,280
transport don't send it a request

1491
01:02:19,280 --> 01:02:21,900
requesting web transport

1492
01:02:21,900 --> 01:02:23,520
that's that's just a final condition

1493
01:02:23,520 --> 01:02:25,619
that's just another one of the things on

1494
01:02:25,619 --> 01:02:27,359
the checklist that um

1495
01:02:27,359 --> 01:02:28,920
Alan was talking about before that's

1496
01:02:28,920 --> 01:02:31,319
difficult to get right but you only

1497
01:02:31,319 --> 01:02:33,420
really have to get it right once

1498
01:02:33,420 --> 01:02:35,940
item potency is interesting

1499
01:02:35,940 --> 01:02:38,400
um which sort of led me to ask the

1500
01:02:38,400 --> 01:02:40,980
question so you're connecting and you're

1501
01:02:40,980 --> 01:02:42,599
sending I I don't know what are you

1502
01:02:42,599 --> 01:02:43,619
sending on this on this thing you're

1503
01:02:43,619 --> 01:02:45,720
sending stream data

1504
01:02:45,720 --> 01:02:48,119
what's the stream limit

1505
01:02:48,119 --> 01:02:50,040
on the other end

1506
01:02:50,040 --> 01:02:53,579
do we have a default can we

1507
01:02:53,579 --> 01:02:55,319
can we guarantee that you'll have a

1508
01:02:55,319 --> 01:02:56,819
bi-directional stream to create and send

1509
01:02:56,819 --> 01:02:58,020
on

1510
01:02:58,020 --> 01:03:00,720
uh you don't know especially not in the

1511
01:03:00,720 --> 01:03:03,059
H2 case anyway maybe in the H3 case

1512
01:03:03,059 --> 01:03:04,380
because you're just taking from a global

1513
01:03:04,380 --> 01:03:07,079
pool that you already know the size of

1514
01:03:07,079 --> 01:03:09,839
but I'm tending towards the conclusion

1515
01:03:09,839 --> 01:03:11,040
here that

1516
01:03:11,040 --> 01:03:13,160
um

1517
01:03:13,920 --> 01:03:16,559
that is difficult and

1518
01:03:16,559 --> 01:03:18,780
um I'm not sure what to do with it if

1519
01:03:18,780 --> 01:03:20,579
it's just stuff that's sent in the

1520
01:03:20,579 --> 01:03:22,260
payload of the request

1521
01:03:22,260 --> 01:03:23,940
then it's relatively straightforward and

1522
01:03:23,940 --> 01:03:25,020
I think that's all you're allowed to

1523
01:03:25,020 --> 01:03:26,520
really do

1524
01:03:26,520 --> 01:03:28,140
before you get confirmation that

1525
01:03:28,140 --> 01:03:29,640
something is done so maybe just replay

1526
01:03:29,640 --> 01:03:31,200
it is that right

1527
01:03:31,200 --> 01:03:34,200
Eric's nodding I think if we if we make

1528
01:03:34,200 --> 01:03:36,900
the semantics of a 3xx in a response

1529
01:03:36,900 --> 01:03:39,240
that none of the payload of this request

1530
01:03:39,240 --> 01:03:40,260
was

1531
01:03:40,260 --> 01:03:42,119
was processed if you if you're doing a

1532
01:03:42,119 --> 01:03:43,859
connect and you've got to redirect

1533
01:03:43,859 --> 01:03:46,260
then then you can just take that those

1534
01:03:46,260 --> 01:03:47,700
bytes and send them on the next one

1535
01:03:47,700 --> 01:03:49,559
it'll be fine

1536
01:03:49,559 --> 01:03:51,240
um if you have anything other than that

1537
01:03:51,240 --> 01:03:54,480
I think this is really really difficult

1538
01:03:54,480 --> 01:03:56,099
um

1539
01:03:56,099 --> 01:03:57,660
I'm not actually sure how we're going to

1540
01:03:57,660 --> 01:03:59,760
do this for H2 the more I think I think

1541
01:03:59,760 --> 01:04:01,319
about it you can do some bookkeeping but

1542
01:04:01,319 --> 01:04:02,760
you won't be able to do any

1543
01:04:02,760 --> 01:04:04,319
stream data because our default stream

1544
01:04:04,319 --> 01:04:06,000
limits are zero

1545
01:04:06,000 --> 01:04:08,040
aren't they

1546
01:04:08,040 --> 01:04:10,279
yeah

1547
01:04:15,900 --> 01:04:17,880
hey Alex tranovski Google um I'm

1548
01:04:17,880 --> 01:04:19,500
reminded of some of the zero cost

1549
01:04:19,500 --> 01:04:21,540
extensibility questions that we had in

1550
01:04:21,540 --> 01:04:23,099
the mass working group and I feel like

1551
01:04:23,099 --> 01:04:25,140
this is sort of similar here where I

1552
01:04:25,140 --> 01:04:27,000
seem to recall we had a similar

1553
01:04:27,000 --> 01:04:28,200
discussion about you know what happens

1554
01:04:28,200 --> 01:04:30,960
if you want to send a capsule that may

1555
01:04:30,960 --> 01:04:32,299
not be supported on a server

1556
01:04:32,299 --> 01:04:34,380
opportunistically and that sort of feels

1557
01:04:34,380 --> 01:04:36,420
like the same thing here with the API

1558
01:04:36,420 --> 01:04:40,079
issues question so if we want to support

1559
01:04:40,079 --> 01:04:42,720
redirects I feel like the answer here if

1560
01:04:42,720 --> 01:04:43,920
you're definitely going with sending

1561
01:04:43,920 --> 01:04:46,020
data over datagrams is that you just

1562
01:04:46,020 --> 01:04:48,180
have to assume that anything that you

1563
01:04:48,180 --> 01:04:49,859
sent prior to getting a confirmation

1564
01:04:49,859 --> 01:04:51,599
that the extended connect succeeded just

1565
01:04:51,599 --> 01:04:54,059
like as we did with the underlying mask

1566
01:04:54,059 --> 01:04:56,700
stuff that you might have to retransmit

1567
01:04:56,700 --> 01:04:58,260
it so in this case I feel that what

1568
01:04:58,260 --> 01:05:00,180
Martin was saying here around item

1569
01:05:00,180 --> 01:05:01,920
potency is very clearly solved that you

1570
01:05:01,920 --> 01:05:03,839
know you get the redirect you assume it

1571
01:05:03,839 --> 01:05:06,119
all that data was not processed so

1572
01:05:06,119 --> 01:05:07,980
unless I'm mistaken I think we can

1573
01:05:07,980 --> 01:05:10,020
fairly easily support redirects by

1574
01:05:10,020 --> 01:05:12,240
simply saying that any data must not be

1575
01:05:12,240 --> 01:05:15,680
processed if you send the redirect

1576
01:05:17,460 --> 01:05:20,960
I'm seeing nods in the room

1577
01:05:23,700 --> 01:05:26,520
so regarding flow control so what

1578
01:05:26,520 --> 01:05:28,319
happens if your flow control window

1579
01:05:28,319 --> 01:05:31,160
decreases

1580
01:05:31,200 --> 01:05:34,640
between redirects

1581
01:05:45,240 --> 01:05:47,940
yes sir Victor that's a fair question uh

1582
01:05:47,940 --> 01:05:49,740
this is the case where you you attempt

1583
01:05:49,740 --> 01:05:51,540
on on one connection and you've got a

1584
01:05:51,540 --> 01:05:53,220
nice fat flow control window and you

1585
01:05:53,220 --> 01:05:56,520
send you know a megabyte of stuff

1586
01:05:56,520 --> 01:05:57,960
um not that you should be doing that but

1587
01:05:57,960 --> 01:06:00,359
let's say you manage that and you get a

1588
01:06:00,359 --> 01:06:01,680
redirect and then the next connection

1589
01:06:01,680 --> 01:06:04,020
only has like 10K what do you do with

1590
01:06:04,020 --> 01:06:04,740
the

1591
01:06:04,740 --> 01:06:08,419
the extra stuff that you can't send

1592
01:06:08,460 --> 01:06:10,940
I think there's kind of an unavoidable

1593
01:06:10,940 --> 01:06:14,400
uh sort of gotcha in terms of redirect

1594
01:06:14,400 --> 01:06:16,140
processing in that the client has to

1595
01:06:16,140 --> 01:06:18,000
remember everything that sent and then

1596
01:06:18,000 --> 01:06:20,640
spend whatever time necessary to

1597
01:06:20,640 --> 01:06:22,140
uh

1598
01:06:22,140 --> 01:06:24,480
ensure that it gets sent again which

1599
01:06:24,480 --> 01:06:27,059
means well it's funny

1600
01:06:27,059 --> 01:06:29,579
it's not only about bytes but also about

1601
01:06:29,579 --> 01:06:32,660
opening streams

1602
01:06:33,420 --> 01:06:35,520
yeah so what streams are you opening

1603
01:06:35,520 --> 01:06:37,140
again

1604
01:06:37,140 --> 01:06:39,960
so you start imagine you start by

1605
01:06:39,960 --> 01:06:43,020
opening free by direction oh but you

1606
01:06:43,020 --> 01:06:45,359
need directional streams and then you

1607
01:06:45,359 --> 01:06:47,819
get redirected and you get redirected to

1608
01:06:47,819 --> 01:06:49,440
a server you connect to the server and

1609
01:06:49,440 --> 01:06:51,000
the server says you can only send to

1610
01:06:51,000 --> 01:06:53,880
streams at the time

1611
01:06:53,880 --> 01:06:55,200
I see

1612
01:06:55,200 --> 01:06:57,839
yeah so it turns out that I don't think

1613
01:06:57,839 --> 01:06:59,819
the client can open up any streams

1614
01:06:59,819 --> 01:07:04,140
because the stream limit is zero

1615
01:07:04,140 --> 01:07:06,299
we don't specify the default

1616
01:07:06,299 --> 01:07:08,039
well the the employee default is a quick

1617
01:07:08,039 --> 01:07:11,900
one right which is zero

1618
01:07:15,000 --> 01:07:18,119
it's well that's for web transport over

1619
01:07:18,119 --> 01:07:21,480
HTTP 2 right no it has to be

1620
01:07:21,480 --> 01:07:23,460
so so Alan just said off off Mike well

1621
01:07:23,460 --> 01:07:25,500
it has to be at least three streams

1622
01:07:25,500 --> 01:07:27,660
I'm like no that's just a requirement if

1623
01:07:27,660 --> 01:07:31,038
you want to use http 3.

1624
01:07:32,460 --> 01:07:34,380
we're talking about this right here

1625
01:07:34,380 --> 01:07:36,599
which we're just talking about

1626
01:07:36,599 --> 01:07:38,059
um

1627
01:07:38,059 --> 01:07:40,260
all right

1628
01:07:40,260 --> 01:07:43,700
within the context of this one

1629
01:07:47,099 --> 01:07:49,760
that's hard

1630
01:07:50,700 --> 01:07:52,380
yeah

1631
01:07:52,380 --> 01:07:54,119
I would agree at the same time I do

1632
01:07:54,119 --> 01:07:56,220
think the what happens after I'm

1633
01:07:56,220 --> 01:07:57,780
redirected is not massively different

1634
01:07:57,780 --> 01:07:59,280
from what I would have done if I went

1635
01:07:59,280 --> 01:08:01,680
there originally so like if I if the

1636
01:08:01,680 --> 01:08:03,539
thing that I'm running requires me to

1637
01:08:03,539 --> 01:08:05,700
have three streams open and I would have

1638
01:08:05,700 --> 01:08:08,220
gone to a server that says no you can

1639
01:08:08,220 --> 01:08:10,020
only have two like this is the same

1640
01:08:10,020 --> 01:08:10,980
problem

1641
01:08:10,980 --> 01:08:13,640
right so the fact that I was able to

1642
01:08:13,640 --> 01:08:16,920
have to pack my connect with additional

1643
01:08:16,920 --> 01:08:19,500
data that tries to open three

1644
01:08:19,500 --> 01:08:21,960
is not that's not really the fault like

1645
01:08:21,960 --> 01:08:23,819
that's not a problem related to

1646
01:08:23,819 --> 01:08:25,738
redirects that's just a generic problem

1647
01:08:25,738 --> 01:08:27,000
in general and I think right now it's

1648
01:08:27,000 --> 01:08:29,040
pretty underspecified so I think we need

1649
01:08:29,040 --> 01:08:31,738
to do a little bit of writing too so

1650
01:08:31,738 --> 01:08:35,339
it's list for dedicated web transport or

1651
01:08:35,339 --> 01:08:37,920
for HTTP free you can open as many

1652
01:08:37,920 --> 01:08:40,859
streams as the quick transport settings

1653
01:08:40,859 --> 01:08:45,600
allow you and the reason I say opening

1654
01:08:45,600 --> 01:08:48,779
streams specifically is that buffering

1655
01:08:48,779 --> 01:08:50,279
data is something you can do

1656
01:08:50,279 --> 01:08:53,279
transparently but with opening streams

1657
01:08:53,279 --> 01:08:57,000
or API explicitly gives you a promise

1658
01:08:57,000 --> 01:08:59,399
that is not resolved until the stream is

1659
01:08:59,399 --> 01:09:02,179
actually opened

1660
01:09:02,580 --> 01:09:04,380
doesn't that apply in the same case

1661
01:09:04,380 --> 01:09:06,299
though if if I try to connect to a web

1662
01:09:06,299 --> 01:09:09,540
transport server that in H3 says hey you

1663
01:09:09,540 --> 01:09:10,979
can't have that many streams and I

1664
01:09:10,979 --> 01:09:12,179
needed that many streams aren't I

1665
01:09:12,179 --> 01:09:13,738
similarly stuck like it doesn't matter

1666
01:09:13,738 --> 01:09:15,299
whether I got redirected there or not

1667
01:09:15,299 --> 01:09:17,939
I'm still stuck

1668
01:09:17,939 --> 01:09:23,339
uh no because as far as I remember

1669
01:09:23,339 --> 01:09:26,238
you can

1670
01:09:26,698 --> 01:09:29,279
but you learn the server Max open

1671
01:09:29,279 --> 01:09:32,219
streams initial before you get the

1672
01:09:32,219 --> 01:09:35,000
server reply

1673
01:09:36,479 --> 01:09:38,219
that's a window in which you can open

1674
01:09:38,219 --> 01:09:40,198
those trends

1675
01:09:40,198 --> 01:09:42,000
yeah it just still doesn't mean that the

1676
01:09:42,000 --> 01:09:43,140
thing I was trying to do with that many

1677
01:09:43,140 --> 01:09:45,359
streams is going to work

1678
01:09:45,359 --> 01:09:47,960
why not

1679
01:10:04,620 --> 01:10:07,020
so rather than try to come up with a

1680
01:10:07,020 --> 01:10:09,120
solution to this problem here

1681
01:10:09,120 --> 01:10:11,760
I think we need to take this offline and

1682
01:10:11,760 --> 01:10:13,380
have a bit of a discussion about what it

1683
01:10:13,380 --> 01:10:14,880
is that we're doing here I think

1684
01:10:14,880 --> 01:10:16,860
Victor's right this is this is much more

1685
01:10:16,860 --> 01:10:18,120
difficult

1686
01:10:18,120 --> 01:10:19,920
I don't like the dedicated connection

1687
01:10:19,920 --> 01:10:21,300
thing

1688
01:10:21,300 --> 01:10:23,520
um but that's

1689
01:10:23,520 --> 01:10:25,920
maybe something we have to Grapple with

1690
01:10:25,920 --> 01:10:30,140
uh maybe we need a new setting for that

1691
01:10:30,840 --> 01:10:33,360
because in in the in the pooled scenario

1692
01:10:33,360 --> 01:10:35,219
maybe you don't want clients just

1693
01:10:35,219 --> 01:10:37,560
opening up new web transport streams for

1694
01:10:37,560 --> 01:10:39,540
sessions that haven't been approved yet

1695
01:10:39,540 --> 01:10:41,280
and in the in the dedicated connection

1696
01:10:41,280 --> 01:10:44,699
case well maybe it's okay to do that

1697
01:10:44,699 --> 01:10:47,100
so that's something that I think we're

1698
01:10:47,100 --> 01:10:48,120
going to have to think about a little

1699
01:10:48,120 --> 01:10:50,100
bit more carefully

1700
01:10:50,100 --> 01:10:51,780
because that changes the disposition

1701
01:10:51,780 --> 01:10:53,699
toward this particular

1702
01:10:53,699 --> 01:10:56,699
um question quite a bit Martin isn't

1703
01:10:56,699 --> 01:10:58,199
that just like

1704
01:10:58,199 --> 01:11:00,659
the flow control discussion that the

1705
01:11:00,659 --> 01:11:02,100
design team had

1706
01:11:02,100 --> 01:11:04,140
that's what I was going to say yeah so

1707
01:11:04,140 --> 01:11:06,719
this is a this is essentially the box of

1708
01:11:06,719 --> 01:11:08,100
things that you open up when you start

1709
01:11:08,100 --> 01:11:09,300
trying to do that kind of flow control

1710
01:11:09,300 --> 01:11:11,880
and things like that so I think I mean

1711
01:11:11,880 --> 01:11:14,040
I'm totally game to go try to figure

1712
01:11:14,040 --> 01:11:15,540
that out offline but I don't think we're

1713
01:11:15,540 --> 01:11:17,100
going to answer it in the next half an

1714
01:11:17,100 --> 01:11:20,040
hour yeah but just speaking as chair

1715
01:11:20,040 --> 01:11:21,600
here the uh

1716
01:11:21,600 --> 01:11:23,340
I think the output of the design team

1717
01:11:23,340 --> 01:11:25,320
that we declared because sessas on was

1718
01:11:25,320 --> 01:11:27,480
like the flow control for that part

1719
01:11:27,480 --> 01:11:29,219
is

1720
01:11:29,219 --> 01:11:31,440
oh right now we we we punted it out

1721
01:11:31,440 --> 01:11:32,340
that's true so that we didn't reach

1722
01:11:32,340 --> 01:11:33,960
counter consensus on it so that's still

1723
01:11:33,960 --> 01:11:36,120
like a nice landmine that we haven't

1724
01:11:36,120 --> 01:11:39,559
decided how we want to step on

1725
01:11:43,520 --> 01:11:45,420
ah

1726
01:11:45,420 --> 01:11:48,140
thank you

1727
01:11:48,659 --> 01:11:50,219
um

1728
01:11:50,219 --> 01:11:53,400
so should we put a pin in redirects

1729
01:11:53,400 --> 01:11:56,040
until we've solved flow control

1730
01:11:56,040 --> 01:11:58,080
uh I'm not sure flow control

1731
01:11:58,080 --> 01:12:01,380
specifically we definitely I think it's

1732
01:12:01,380 --> 01:12:04,980
better to take it offline because there

1733
01:12:04,980 --> 01:12:07,320
it's very clear that there are a lot it

1734
01:12:07,320 --> 01:12:09,060
sounds like there are unsolved design

1735
01:12:09,060 --> 01:12:10,620
issues here

1736
01:12:10,620 --> 01:12:13,920
and we should either solve them or

1737
01:12:13,920 --> 01:12:16,380
design decide that they're not worth

1738
01:12:16,380 --> 01:12:19,020
solving or should not be solved

1739
01:12:19,020 --> 01:12:21,659
uh but it doesn't sound like we're

1740
01:12:21,659 --> 01:12:23,100
arriving to a new conclusion that's

1741
01:12:23,100 --> 01:12:25,860
submitting so I suggest we move to the

1742
01:12:25,860 --> 01:12:27,659
next

1743
01:12:27,659 --> 01:12:30,559
sounds good

1744
01:12:32,040 --> 01:12:35,219
okay so the third issue which is

1745
01:12:35,219 --> 01:12:36,600
actually

1746
01:12:36,600 --> 01:12:39,480
three issues which talk about truffle is

1747
01:12:39,480 --> 01:12:41,580
the same topic but different aspects of

1748
01:12:41,580 --> 01:12:44,159
it or maybe the same aspect of it

1749
01:12:44,159 --> 01:12:47,900
is that uh the we have for

1750
01:12:47,900 --> 01:12:50,340
unidirectional streams in web transport

1751
01:12:50,340 --> 01:12:53,219
we just have a unidirectional strain

1752
01:12:53,219 --> 01:12:56,460
type and we use that and we put the

1753
01:12:56,460 --> 01:12:59,880
session ID and then we it just works

1754
01:12:59,880 --> 01:13:04,080
for bi-directional streams or no stream

1755
01:13:04,080 --> 01:13:06,179
types in HTTP free

1756
01:13:06,179 --> 01:13:09,360
so we made a special frame that just

1757
01:13:09,360 --> 01:13:12,360
says everything else is on this stream

1758
01:13:12,360 --> 01:13:16,080
is web transport and we can make that

1759
01:13:16,080 --> 01:13:18,980
frame it's legal because we use a

1760
01:13:18,980 --> 01:13:21,300
setting to negotiate web transport

1761
01:13:21,300 --> 01:13:23,219
support meaning that we can alter the

1762
01:13:23,219 --> 01:13:24,300
protocol

1763
01:13:24,300 --> 01:13:27,239
and then the question was well can you

1764
01:13:27,239 --> 01:13:31,739
put anything before that and during the

1765
01:13:31,739 --> 01:13:36,000
last ATF meeting we roughly agreed that

1766
01:13:36,000 --> 01:13:38,280
the answer to that question is no

1767
01:13:38,280 --> 01:13:41,400
because we want to have consistency

1768
01:13:41,400 --> 01:13:43,920
between what we do with bi-directional

1769
01:13:43,920 --> 01:13:46,500
streams and unidirectional streams

1770
01:13:46,500 --> 01:13:52,260
so that is as far this is I think we

1771
01:13:52,260 --> 01:13:53,040
have

1772
01:13:53,040 --> 01:13:59,040
agreement on that uh and Lucas and Lucas

1773
01:13:59,040 --> 01:14:01,460
please correct me because I am trying to

1774
01:14:01,460 --> 01:14:05,520
vaguely restate what you said in the

1775
01:14:05,520 --> 01:14:08,880
issue slash pull request uh suggests

1776
01:14:08,880 --> 01:14:10,860
that instead of doing that we should

1777
01:14:10,860 --> 01:14:13,440
just Define bi-directional uh stream

1778
01:14:13,440 --> 01:14:14,780
types

1779
01:14:14,780 --> 01:14:19,940
uh and uh as an extension to http free

1780
01:14:19,940 --> 01:14:23,340
uh and uh

1781
01:14:23,340 --> 01:14:27,300
there is a pull request to do this and I

1782
01:14:27,300 --> 01:14:29,820
will let Lucas advocate for it because

1783
01:14:29,820 --> 01:14:33,360
my current opinion on it roughly this

1784
01:14:33,360 --> 01:14:34,860
has the same

1785
01:14:34,860 --> 01:14:39,420
effects on the wire so I don't think

1786
01:14:39,420 --> 01:14:43,739
this is particularly worth it but Lucas

1787
01:14:43,739 --> 01:14:45,060
please

1788
01:14:45,060 --> 01:14:48,360
so I I had a clarification question but

1789
01:14:48,360 --> 01:14:50,640
I think that's a great segue maybe Lucas

1790
01:14:50,640 --> 01:14:51,960
can answer it

1791
01:14:51,960 --> 01:14:54,060
my understanding and correct me if my

1792
01:14:54,060 --> 01:14:56,040
arm wrong is this doesn't change the

1793
01:14:56,040 --> 01:14:57,659
wire format in the sense that the

1794
01:14:57,659 --> 01:14:59,280
bi-directional stream will always start

1795
01:14:59,280 --> 01:15:03,300
with a variant that is an identifier

1796
01:15:03,300 --> 01:15:06,300
and that identifier will either be in

1797
01:15:06,300 --> 01:15:09,900
the streams in a registry stream type

1798
01:15:09,900 --> 01:15:12,120
sign a registry or any frame types I

1799
01:15:12,120 --> 01:15:13,440
never actually that's that's what we're

1800
01:15:13,440 --> 01:15:15,179
debating is which registry but it

1801
01:15:15,179 --> 01:15:16,920
doesn't change the what we're actually

1802
01:15:16,920 --> 01:15:20,179
sending is that correct

1803
01:15:20,460 --> 01:15:22,860
I'm asking you Lucas okay uh Lucas party

1804
01:15:22,860 --> 01:15:24,659
Cloud Player so I I want to apologize

1805
01:15:24,659 --> 01:15:27,420
for dropping the ball on this PR like I

1806
01:15:27,420 --> 01:15:28,860
created after the discussion at the last

1807
01:15:28,860 --> 01:15:30,900
ITF or the one before that one I can't

1808
01:15:30,900 --> 01:15:31,800
remember

1809
01:15:31,800 --> 01:15:33,840
um but the concern I had here isn't so

1810
01:15:33,840 --> 01:15:35,760
much like what registry it lives in I

1811
01:15:35,760 --> 01:15:38,219
think if I'm over a call recall

1812
01:15:38,219 --> 01:15:40,980
correctly it was more that I didn't like

1813
01:15:40,980 --> 01:15:44,120
the idea that we have like

1814
01:15:44,120 --> 01:15:47,360
hp3 frames that always look like this

1815
01:15:47,360 --> 01:15:49,739
except in this case it's a special thing

1816
01:15:49,739 --> 01:15:52,260
and it's very different and this changes

1817
01:15:52,260 --> 01:15:55,140
how you would approach frame parsing if

1818
01:15:55,140 --> 01:15:57,120
you wrote a generic H3

1819
01:15:57,120 --> 01:15:59,699
Framing and sleep machine layer

1820
01:15:59,699 --> 01:16:04,020
um if instead you kind of say when we're

1821
01:16:04,020 --> 01:16:07,140
using web transport or an extension of

1822
01:16:07,140 --> 01:16:10,140
this type there is a way to convert the

1823
01:16:10,140 --> 01:16:13,860
semantics of hb3 such that biddy streams

1824
01:16:13,860 --> 01:16:16,020
no longer become request streams and

1825
01:16:16,020 --> 01:16:19,679
this is a way to do that the PR's in web

1826
01:16:19,679 --> 01:16:22,080
transport I think it's into a section of

1827
01:16:22,080 --> 01:16:24,239
the document that's like maybe we don't

1828
01:16:24,239 --> 01:16:26,460
want to do this in web transport

1829
01:16:26,460 --> 01:16:28,260
um and that maybe this is something we

1830
01:16:28,260 --> 01:16:30,780
take to the HB working group and say

1831
01:16:30,780 --> 01:16:33,719
we designed hb3 for for this use case

1832
01:16:33,719 --> 01:16:35,460
and we're trying to do other things with

1833
01:16:35,460 --> 01:16:38,520
it and this is an approach so there were

1834
01:16:38,520 --> 01:16:40,199
some good comments that you made on that

1835
01:16:40,199 --> 01:16:42,719
PR and some stuff has shifted on I

1836
01:16:42,719 --> 01:16:44,040
haven't had the time to go back and

1837
01:16:44,040 --> 01:16:45,540
comment them

1838
01:16:45,540 --> 01:16:47,520
um it's not something I want to give up

1839
01:16:47,520 --> 01:16:49,800
on yet because I haven't had the time to

1840
01:16:49,800 --> 01:16:52,080
revisit it if everyone hates it that's

1841
01:16:52,080 --> 01:16:54,600
okay but I haven't I don't know

1842
01:16:54,600 --> 01:16:56,699
um I just don't like the current design

1843
01:16:56,699 --> 01:16:59,400
is my issue

1844
01:16:59,400 --> 01:17:01,679
and if I'm in the rough then so be it

1845
01:17:01,679 --> 01:17:02,820
but I don't think we've had enough

1846
01:17:02,820 --> 01:17:04,980
discussion around this yet

1847
01:17:04,980 --> 01:17:07,140
oh just to double

1848
01:17:07,140 --> 01:17:08,900
check

1849
01:17:08,900 --> 01:17:13,380
is there any actual wire difference

1850
01:17:13,380 --> 01:17:14,760
between

1851
01:17:14,760 --> 01:17:17,820
what's proposed in your PR and

1852
01:17:17,820 --> 01:17:19,800
but I don't believe it's a wide

1853
01:17:19,800 --> 01:17:23,820
difference is a very nuanced kind of

1854
01:17:23,820 --> 01:17:27,780
bike shed it's a tiny it's a Kitty bike

1855
01:17:27,780 --> 01:17:28,980
chat

1856
01:17:28,980 --> 01:17:32,640
um yeah like I've not I'm just not in

1857
01:17:32,640 --> 01:17:34,620
the right state to for phrase that

1858
01:17:34,620 --> 01:17:36,659
Nuance correctly sorry

1859
01:17:36,659 --> 01:17:39,060
um I I asked chair I'll jump in and try

1860
01:17:39,060 --> 01:17:41,280
to phrase the nuance and please jump in

1861
01:17:41,280 --> 01:17:42,900
and correct me Lucas if you think I'm

1862
01:17:42,900 --> 01:17:43,980
doing it wrong

1863
01:17:43,980 --> 01:17:49,320
so in HTTP 3 uh well quick has server

1864
01:17:49,320 --> 01:17:51,840
initiated bi-directional streams in HTTP

1865
01:17:51,840 --> 01:17:54,480
it says You must not send them and if

1866
01:17:54,480 --> 01:17:57,360
you receive them explode so we know no

1867
01:17:57,360 --> 01:17:59,040
one's sending them but now we have

1868
01:17:59,040 --> 01:18:01,800
magical super duper setting so we know

1869
01:18:01,800 --> 01:18:03,780
that we're in a different mode and that

1870
01:18:03,780 --> 01:18:06,480
setting tells you what you're allowed to

1871
01:18:06,480 --> 01:18:07,739
send on this stream and how you're

1872
01:18:07,739 --> 01:18:10,699
supposed to parse it so we get to decide

1873
01:18:10,699 --> 01:18:14,120
and we have two options here

1874
01:18:14,120 --> 01:18:17,340
uh one is you send

1875
01:18:17,340 --> 01:18:21,360
so you send frames on HTTP streams

1876
01:18:21,360 --> 01:18:23,159
uh sorry on survey issue bi-directional

1877
01:18:23,159 --> 01:18:24,780
streams in HTTP three that I have the

1878
01:18:24,780 --> 01:18:26,460
white transport setting that's a

1879
01:18:26,460 --> 01:18:27,840
mouthful

1880
01:18:27,840 --> 01:18:30,060
um and the other is you send a stream

1881
01:18:30,060 --> 01:18:31,219
type

1882
01:18:31,219 --> 01:18:33,840
and I mean as I'm saying this out loud

1883
01:18:33,840 --> 01:18:35,280
I'm realizing that this might be outside

1884
01:18:35,280 --> 01:18:37,920
the purview of this working group

1885
01:18:37,920 --> 01:18:39,840
um but I think that's the color of the

1886
01:18:39,840 --> 01:18:41,940
bike shed is do we want it to be frame

1887
01:18:41,940 --> 01:18:45,000
types and have the the award that Luca

1888
01:18:45,000 --> 01:18:46,620
described where we have a frame type

1889
01:18:46,620 --> 01:18:48,540
that doesn't have a length

1890
01:18:48,540 --> 01:18:52,140
or do we want stream types

1891
01:18:52,140 --> 01:18:53,760
I hope I didn't say them completely

1892
01:18:53,760 --> 01:18:55,260
backwards every time

1893
01:18:55,260 --> 01:18:57,060
um all right that's an economy let's

1894
01:18:57,060 --> 01:18:58,980
discuss I'm going to time box it so we

1895
01:18:58,980 --> 01:19:00,659
don't face plant on it too much but

1896
01:19:00,659 --> 01:19:03,060
let's have a let's have a discussion

1897
01:19:03,060 --> 01:19:05,460
yeah so thanks uh summary um it's

1898
01:19:05,460 --> 01:19:07,800
reminding me some stuff which is good uh

1899
01:19:07,800 --> 01:19:09,659
the the other problem I had with this is

1900
01:19:09,659 --> 01:19:10,980
like

1901
01:19:10,980 --> 01:19:14,580
if you're building a a stream parser

1902
01:19:14,580 --> 01:19:17,460
like this and yes say it's a client

1903
01:19:17,460 --> 01:19:19,440
request stream this is the one we're

1904
01:19:19,440 --> 01:19:21,480
concerned about not the server but these

1905
01:19:21,480 --> 01:19:22,920
stream known case

1906
01:19:22,920 --> 01:19:26,460
um so the client request stream uh you

1907
01:19:26,460 --> 01:19:27,780
have frames and if you don't understand

1908
01:19:27,780 --> 01:19:30,360
frames extension frames you ignore them

1909
01:19:30,360 --> 01:19:32,520
what we're saying is we want to change

1910
01:19:32,520 --> 01:19:34,980
some of that Machinery too such that

1911
01:19:34,980 --> 01:19:37,620
when you receive this Frame

1912
01:19:37,620 --> 01:19:38,480
um

1913
01:19:38,480 --> 01:19:41,159
it seems the property that we want is

1914
01:19:41,159 --> 01:19:43,040
that web transport

1915
01:19:43,040 --> 01:19:46,140
starts and converts the stream

1916
01:19:46,140 --> 01:19:48,420
immediately into the mode that it needs

1917
01:19:48,420 --> 01:19:50,400
but by using a frame what you end up

1918
01:19:50,400 --> 01:19:52,500
with is effectively an infinite amount

1919
01:19:52,500 --> 01:19:54,659
of stuff that could appear before that

1920
01:19:54,659 --> 01:19:57,420
web transport stream frame

1921
01:19:57,420 --> 01:19:58,560
um and that just seems completely

1922
01:19:58,560 --> 01:20:00,780
pointless and so you're making like

1923
01:20:00,780 --> 01:20:03,300
another exception for behavior for web

1924
01:20:03,300 --> 01:20:05,340
transport streams but I don't think we

1925
01:20:05,340 --> 01:20:07,380
need I think we should just say if

1926
01:20:07,380 --> 01:20:08,760
you're using web transport and you get

1927
01:20:08,760 --> 01:20:10,320
the stream open and it has to start with

1928
01:20:10,320 --> 01:20:11,699
this byte otherwise there's something

1929
01:20:11,699 --> 01:20:14,820
Focus going on it's not it's no longer a

1930
01:20:14,820 --> 01:20:17,219
framed stream it's something else which

1931
01:20:17,219 --> 01:20:18,659
is the property that we want if I

1932
01:20:18,659 --> 01:20:20,780
understand

1933
01:20:25,199 --> 01:20:28,380
yeah so I'm not all that enthusiastic

1934
01:20:28,380 --> 01:20:31,739
about the the way in which this is

1935
01:20:31,739 --> 01:20:33,440
working out because we have

1936
01:20:33,440 --> 01:20:35,120
bi-directional and unidirectional

1937
01:20:35,120 --> 01:20:37,500
streams and the client initiative

1938
01:20:37,500 --> 01:20:40,320
initiated bi-directional streams have to

1939
01:20:40,320 --> 01:20:42,840
have frames and in order to for us to

1940
01:20:42,840 --> 01:20:45,900
to do this we have to choose a thing

1941
01:20:45,900 --> 01:20:48,179
that sits the front of that stream that

1942
01:20:48,179 --> 01:20:51,300
looks like a frame or at least uses a

1943
01:20:51,300 --> 01:20:52,320
number from

1944
01:20:52,320 --> 01:20:55,080
um the the space that isn't like we have

1945
01:20:55,080 --> 01:20:57,179
to register a frame type in order to

1946
01:20:57,179 --> 01:20:59,880
avoid colliding there

1947
01:20:59,880 --> 01:21:03,420
right so I don't want to have I don't

1948
01:21:03,420 --> 01:21:05,100
want to have us fix the asymmetry

1949
01:21:05,100 --> 01:21:07,199
between unidirectional streams and

1950
01:21:07,199 --> 01:21:09,120
bi-directional streams only to create

1951
01:21:09,120 --> 01:21:11,820
this problem with the others so I think

1952
01:21:11,820 --> 01:21:13,080
we're probably in a situation where

1953
01:21:13,080 --> 01:21:14,760
unidirectional and bi-directional is the

1954
01:21:14,760 --> 01:21:17,280
is the cleave that we're looking for

1955
01:21:17,280 --> 01:21:18,900
and then

1956
01:21:18,900 --> 01:21:23,100
I think we have uh frames now if we want

1957
01:21:23,100 --> 01:21:26,699
to avoid putting a zero length thing or

1958
01:21:26,699 --> 01:21:28,500
like this weird thing without a length

1959
01:21:28,500 --> 01:21:30,659
we can just put a zero there or we can

1960
01:21:30,659 --> 01:21:34,080
just say look it is what it is

1961
01:21:34,080 --> 01:21:35,219
um that's

1962
01:21:35,219 --> 01:21:37,260
that's all fine

1963
01:21:37,260 --> 01:21:38,760
um we can also Define a rule that says

1964
01:21:38,760 --> 01:21:40,739
this has to be the first frame that's on

1965
01:21:40,739 --> 01:21:42,239
that stream if we want to go that way

1966
01:21:42,239 --> 01:21:44,460
we've done that for for other things I

1967
01:21:44,460 --> 01:21:46,320
think that's true of settings in H3

1968
01:21:46,320 --> 01:21:48,239
already

1969
01:21:48,239 --> 01:21:50,580
um what I don't want to have happen is

1970
01:21:50,580 --> 01:21:52,560
we we lose the

1971
01:21:52,560 --> 01:21:53,280
um

1972
01:21:53,280 --> 01:21:56,340
the ability to distinguish our streams

1973
01:21:56,340 --> 01:21:58,679
from their streams uh when they when

1974
01:21:58,679 --> 01:22:02,340
they share the connection so I'm like

1975
01:22:02,340 --> 01:22:04,199
need a handle there I would prefer to

1976
01:22:04,199 --> 01:22:08,219
use the frame parser to do frame parsing

1977
01:22:08,219 --> 01:22:10,500
um on like the bi-directional streams

1978
01:22:10,500 --> 01:22:12,420
which potentially means it's wasting a

1979
01:22:12,420 --> 01:22:14,580
bite for a zero length I think zero

1980
01:22:14,580 --> 01:22:17,880
length is easier than a than a whatever

1981
01:22:17,880 --> 01:22:21,120
other options we have for that field

1982
01:22:21,120 --> 01:22:23,520
um because most frame parsers will be

1983
01:22:23,520 --> 01:22:25,320
type length

1984
01:22:25,320 --> 01:22:26,940
something

1985
01:22:26,940 --> 01:22:28,380
and

1986
01:22:28,380 --> 01:22:30,840
um knowing that we have type length of

1987
01:22:30,840 --> 01:22:32,880
zero and nothing following it makes

1988
01:22:32,880 --> 01:22:34,440
those stream passes very much more easy

1989
01:22:34,440 --> 01:22:37,380
well we've got a session ID

1990
01:22:37,380 --> 01:22:38,699
um as well of course

1991
01:22:38,699 --> 01:22:40,320
um so

1992
01:22:40,320 --> 01:22:41,699
I'm actually kind of okay with the

1993
01:22:41,699 --> 01:22:43,199
current design with with maybe a few

1994
01:22:43,199 --> 01:22:45,300
tweaks

1995
01:22:45,300 --> 01:22:48,360
I'm gonna cut the cue soon so if you

1996
01:22:48,360 --> 01:22:50,219
wanna talk about this get in line now

1997
01:22:50,219 --> 01:22:53,900
okay meet Echo made this too tall

1998
01:22:56,000 --> 01:22:59,120
it's okay

1999
01:23:00,659 --> 01:23:03,139
yeah

2000
01:23:03,239 --> 01:23:05,420
I just couldn't have said anything

2001
01:23:05,420 --> 01:23:07,330
any other complaints

2002
01:23:07,330 --> 01:23:09,840
[Laughter]

2003
01:23:09,840 --> 01:23:11,460
the magic words that summoned people

2004
01:23:11,460 --> 01:23:13,560
okay I shouldn't have done that uh Alan

2005
01:23:13,560 --> 01:23:15,179
friendel okay so

2006
01:23:15,179 --> 01:23:17,880
um I've implemented uh this as a frame

2007
01:23:17,880 --> 01:23:20,100
and I've put it in my frame parser and

2008
01:23:20,100 --> 01:23:22,140
it's gross because

2009
01:23:22,140 --> 01:23:24,300
it has to be the first frame

2010
01:23:24,300 --> 01:23:26,040
it doesn't have a length

2011
01:23:26,040 --> 01:23:28,020
it completely changes all stream all

2012
01:23:28,020 --> 01:23:29,820
frame parsing after that

2013
01:23:29,820 --> 01:23:31,560
so I don't think you if you're

2014
01:23:31,560 --> 01:23:33,000
implementing this I don't think you

2015
01:23:33,000 --> 01:23:35,760
actually want to implement it inside

2016
01:23:35,760 --> 01:23:38,100
your frame parser I think you want to do

2017
01:23:38,100 --> 01:23:39,719
is treat it

2018
01:23:39,719 --> 01:23:41,100
like a stream tech

2019
01:23:41,100 --> 01:23:43,080
so before you pick before you even

2020
01:23:43,080 --> 01:23:45,179
instantiate your parser you're peaking

2021
01:23:45,179 --> 01:23:47,520
at the first bite and you're saying is

2022
01:23:47,520 --> 01:23:49,500
this one of those special things that's

2023
01:23:49,500 --> 01:23:52,739
not really frames at all uh and then

2024
01:23:52,739 --> 01:23:54,719
once you look at like oh look it's one

2025
01:23:54,719 --> 01:23:56,580
of the web transport ones I will not

2026
01:23:56,580 --> 01:23:58,260
instantiate my frame parser I will just

2027
01:23:58,260 --> 01:24:00,000
go do the web transport thing just like

2028
01:24:00,000 --> 01:24:02,699
qpac has its own world of what it does

2029
01:24:02,699 --> 01:24:04,260
that's not frames it's something

2030
01:24:04,260 --> 01:24:06,480
completely different

2031
01:24:06,480 --> 01:24:08,880
um that said Martin is 100 right that

2032
01:24:08,880 --> 01:24:11,940
you've got to register them in the frame

2033
01:24:11,940 --> 01:24:14,520
space of H3 because otherwise somebody

2034
01:24:14,520 --> 01:24:17,280
could create an H3 extension frame

2035
01:24:17,280 --> 01:24:19,260
that could be on a client initiated by

2036
01:24:19,260 --> 01:24:21,239
directional stream and that's not going

2037
01:24:21,239 --> 01:24:22,620
to work so

2038
01:24:22,620 --> 01:24:24,540
um but I think

2039
01:24:24,540 --> 01:24:25,620
I don't know how many people are going

2040
01:24:25,620 --> 01:24:26,820
to actually implement this who haven't

2041
01:24:26,820 --> 01:24:29,280
already started uh so maybe it's

2042
01:24:29,280 --> 01:24:31,679
guidance for people that don't exist in

2043
01:24:31,679 --> 01:24:34,380
the future but I think having them you

2044
01:24:34,380 --> 01:24:36,179
know having it described in the document

2045
01:24:36,179 --> 01:24:37,739
as a stream type

2046
01:24:37,739 --> 01:24:40,620
uh and registered in the frame registry

2047
01:24:40,620 --> 01:24:43,140
might be the thing that gets the most

2048
01:24:43,140 --> 01:24:45,540
people to write the correct code here

2049
01:24:45,540 --> 01:24:47,040
rather than trying like oh it's a frame

2050
01:24:47,040 --> 01:24:48,360
I'll put in my frame parser and then

2051
01:24:48,360 --> 01:24:49,920
like a week later they're like that was

2052
01:24:49,920 --> 01:24:52,199
such a bad idea what did I do so okay

2053
01:24:52,199 --> 01:24:54,678
that's all

2054
01:24:55,380 --> 01:24:57,920
kazoo

2055
01:24:59,040 --> 01:25:02,520
Castle I think my preference would be to

2056
01:25:02,520 --> 01:25:06,360
actually have stream types for both uh

2057
01:25:06,360 --> 01:25:08,960
foreign

2058
01:25:12,620 --> 01:25:16,140
correctly when we develop HTTP 3 we

2059
01:25:16,140 --> 01:25:18,719
believe that bi-directional streams

2060
01:25:18,719 --> 01:25:21,960
would only be used by H3 therefore we

2061
01:25:21,960 --> 01:25:24,600
don't need any extension points but now

2062
01:25:24,600 --> 01:25:27,120
we think that we have to use them for

2063
01:25:27,120 --> 01:25:28,920
our own purposes and then the question

2064
01:25:28,920 --> 01:25:31,620
is would there potentially be another

2065
01:25:31,620 --> 01:25:32,820
protocol

2066
01:25:32,820 --> 01:25:34,980
that would co-exist on the same

2067
01:25:34,980 --> 01:25:37,860
connection that would also want to use

2068
01:25:37,860 --> 01:25:39,179
by directional streams for other

2069
01:25:39,179 --> 01:25:41,699
purposes and if we think about that

2070
01:25:41,699 --> 01:25:43,320
possibility I think we need a clear

2071
01:25:43,320 --> 01:25:44,400
separation

2072
01:25:44,400 --> 01:25:46,739
a clear way of separating

2073
01:25:46,739 --> 01:25:49,860
the string types uh the type of the

2074
01:25:49,860 --> 01:25:52,820
streams that's being used

2075
01:25:53,820 --> 01:25:57,019
thank you Victor

2076
01:25:58,080 --> 01:26:00,620
uh

2077
01:26:00,620 --> 01:26:03,719
I kind of agree with the fact that you

2078
01:26:03,719 --> 01:26:05,639
probably don't want to put this into

2079
01:26:05,639 --> 01:26:08,820
your regular stream parser if that's the

2080
01:26:08,820 --> 01:26:10,139
only thing

2081
01:26:10,139 --> 01:26:11,520
okay

2082
01:26:11,520 --> 01:26:13,739
our current implementation puts it into

2083
01:26:13,739 --> 01:26:15,540
the stream parser but that's because we

2084
01:26:15,540 --> 01:26:17,159
implement the version of the draft where

2085
01:26:17,159 --> 01:26:19,739
it's allowed to appear not in the

2086
01:26:19,739 --> 01:26:21,120
beginning of the Stream

2087
01:26:21,120 --> 01:26:23,120
uh

2088
01:26:23,120 --> 01:26:27,179
I don't think that uh streams without

2089
01:26:27,179 --> 01:26:29,820
the frames without length are

2090
01:26:29,820 --> 01:26:32,460
conceptually bad because we had at least

2091
01:26:32,460 --> 01:26:34,620
one other proposal for a frame without

2092
01:26:34,620 --> 01:26:38,699
lens that made sense and I found in past

2093
01:26:38,699 --> 01:26:42,000
like actually useful

2094
01:26:42,000 --> 01:26:47,580
uh but in this particular case uh I

2095
01:26:47,580 --> 01:26:50,460
don't particularly care because I

2096
01:26:50,460 --> 01:26:52,620
believe those are linked to the same

2097
01:26:52,620 --> 01:26:55,699
thing as a wire

2098
01:26:57,600 --> 01:27:01,380
thanks Victor uh so I'm David schenazi

2099
01:27:01,380 --> 01:27:02,820
speaking as an individual contributor

2100
01:27:02,820 --> 01:27:04,020
here

2101
01:27:04,020 --> 01:27:06,900
um so my first point is

2102
01:27:06,900 --> 01:27:09,120
I don't feel too strongly here I'd much

2103
01:27:09,120 --> 01:27:11,340
rather we but whatever it is even if

2104
01:27:11,340 --> 01:27:13,800
it's a coin toss and progress rather

2105
01:27:13,800 --> 01:27:16,679
than anything but it I think this it's

2106
01:27:16,679 --> 01:27:18,060
early enough that it's worth us

2107
01:27:18,060 --> 01:27:19,800
discussing more on the list I'm not

2108
01:27:19,800 --> 01:27:23,100
saying but anyway my personal opinion is

2109
01:27:23,100 --> 01:27:25,020
since

2110
01:27:25,020 --> 01:27:30,120
we need to register it in the frame type

2111
01:27:30,120 --> 01:27:32,320
Ayana registry no matter what

2112
01:27:32,320 --> 01:27:32,820
[Music]

2113
01:27:32,820 --> 01:27:33,960
um

2114
01:27:33,960 --> 01:27:35,940
it makes sense to just keep it be a

2115
01:27:35,940 --> 01:27:39,300
frame one interesting property

2116
01:27:39,300 --> 01:27:42,780
is so the thing that kind of

2117
01:27:42,780 --> 01:27:44,880
flips people up or trips people up a

2118
01:27:44,880 --> 01:27:46,199
little bit is that it doesn't have a

2119
01:27:46,199 --> 01:27:49,280
length one interesting thing we could do

2120
01:27:49,280 --> 01:27:54,060
is if you set the length to 2 to the 62

2121
01:27:54,060 --> 01:27:56,760
minus 1 which sure it's gross where

2122
01:27:56,760 --> 01:27:58,920
we're wasting eight bytes that's

2123
01:27:58,920 --> 01:28:00,659
actually an interesting thing because

2124
01:28:00,659 --> 01:28:03,780
the quick stream can only carry to the

2125
01:28:03,780 --> 01:28:07,139
62-1 and you've already burned uh eight

2126
01:28:07,139 --> 01:28:08,460
byte for the lengths they however many

2127
01:28:08,460 --> 01:28:10,320
for the thing so you know that you're

2128
01:28:10,320 --> 01:28:11,940
not going to go off the end of it anyway

2129
01:28:11,940 --> 01:28:14,219
so that effectively means taking all

2130
01:28:14,219 --> 01:28:16,500
over the whole stream so you could use

2131
01:28:16,500 --> 01:28:18,420
that as they must send the length to all

2132
01:28:18,420 --> 01:28:22,620
of this and I'm seeing P Martin make Mia

2133
01:28:22,620 --> 01:28:25,139
that's gross go away face so anyway it

2134
01:28:25,139 --> 01:28:26,760
was just a thought

2135
01:28:26,760 --> 01:28:29,040
um but I'm just throwing the idea out

2136
01:28:29,040 --> 01:28:30,780
there I'm not pushing it serious so

2137
01:28:30,780 --> 01:28:33,840
strongly all right uh Lucas

2138
01:28:33,840 --> 01:28:36,780
hey yeah so I mean hearing some people

2139
01:28:36,780 --> 01:28:38,520
here doesn't seem like I'm that much in

2140
01:28:38,520 --> 01:28:39,960
the rough wanting more of a stream type

2141
01:28:39,960 --> 01:28:41,280
model

2142
01:28:41,280 --> 01:28:42,420
um

2143
01:28:42,420 --> 01:28:44,280
it doesn't seem like it needs to be web

2144
01:28:44,280 --> 01:28:46,500
transport specific either and I'm

2145
01:28:46,500 --> 01:28:47,940
wondering if there's interest in trying

2146
01:28:47,940 --> 01:28:49,460
to take this into just a small

2147
01:28:49,460 --> 01:28:52,080
Standalone ID to go back to the HP

2148
01:28:52,080 --> 01:28:54,239
working group and say look there's at

2149
01:28:54,239 --> 01:28:55,739
least one use case here that wants to

2150
01:28:55,739 --> 01:28:57,960
repurpose client bi-directional streams

2151
01:28:57,960 --> 01:29:00,300
and here's a way you could do it and

2152
01:29:00,300 --> 01:29:02,340
what you need to do is go and Define a

2153
01:29:02,340 --> 01:29:04,380
code point for your specific use case

2154
01:29:04,380 --> 01:29:06,179
and then web transport can Define that

2155
01:29:06,179 --> 01:29:08,820
code point we don't in the Iona registry

2156
01:29:08,820 --> 01:29:11,840
yes we need to avoid a frame type

2157
01:29:11,840 --> 01:29:14,400
Clash but we don't we can just Reserve

2158
01:29:14,400 --> 01:29:15,840
that code point we don't need to call it

2159
01:29:15,840 --> 01:29:18,000
anything and therefore

2160
01:29:18,000 --> 01:29:20,280
um a frame parser would see that and say

2161
01:29:20,280 --> 01:29:22,199
I there's nothing I can do with this

2162
01:29:22,199 --> 01:29:26,460
like I I probably need to to if I'm

2163
01:29:26,460 --> 01:29:27,840
going to try and parse that as a frame I

2164
01:29:27,840 --> 01:29:30,120
need to crash because

2165
01:29:30,120 --> 01:29:33,179
if I try and read the length which is a

2166
01:29:33,179 --> 01:29:35,699
humongous number or Garbage bytes after

2167
01:29:35,699 --> 01:29:38,699
like I could have like serious problems

2168
01:29:38,699 --> 01:29:40,620
here like I'm concerned that security

2169
01:29:40,620 --> 01:29:44,239
problems related to that kind of thing

2170
01:29:45,600 --> 01:29:47,580
well if the if the peer is sending you

2171
01:29:47,580 --> 01:29:50,040
something bare something bad and that

2172
01:29:50,040 --> 01:29:51,600
makes you crash you have a bug in your

2173
01:29:51,600 --> 01:29:53,040
code

2174
01:29:53,040 --> 01:29:54,840
but anyway so let's not designed

2175
01:29:54,840 --> 01:29:57,360
something that is like so easily no no I

2176
01:29:57,360 --> 01:29:59,159
I agree that's a fair statement that

2177
01:29:59,159 --> 01:30:00,659
this is that what I was saying with is

2178
01:30:00,659 --> 01:30:02,100
silly I'm not disagreeing with that just

2179
01:30:02,100 --> 01:30:05,760
saying good uh but I'm willing to go and

2180
01:30:05,760 --> 01:30:07,560
do some some more work on this if people

2181
01:30:07,560 --> 01:30:08,820
are interested I might just do it anyway

2182
01:30:08,820 --> 01:30:11,100
and see there's a store store person

2183
01:30:11,100 --> 01:30:13,139
kind of thing

2184
01:30:13,139 --> 01:30:13,860
um

2185
01:30:13,860 --> 01:30:16,080
okay that makes sense uh speaking as

2186
01:30:16,080 --> 01:30:19,440
chair now to wrap this bit up

2187
01:30:19,440 --> 01:30:23,159
um what I'm seeing is no clear consensus

2188
01:30:23,159 --> 01:30:25,980
on one way or the other

2189
01:30:25,980 --> 01:30:26,880
um

2190
01:30:26,880 --> 01:30:29,820
and actually a good conversation of

2191
01:30:29,820 --> 01:30:32,520
trying to figure this out I'm not seeing

2192
01:30:32,520 --> 01:30:34,679
people with disagreeing priorities or

2193
01:30:34,679 --> 01:30:36,320
goals here so this should be pretty

2194
01:30:36,320 --> 01:30:39,540
straightforward to resolve

2195
01:30:39,540 --> 01:30:43,679
um this sounds I mean let's take it to

2196
01:30:43,679 --> 01:30:45,360
the list and discuss it there if we

2197
01:30:45,360 --> 01:30:46,679
can't resolve it on the list I might

2198
01:30:46,679 --> 01:30:49,739
suggest a like mini design team

2199
01:30:49,739 --> 01:30:52,080
um for or even just you know uh or an

2200
01:30:52,080 --> 01:30:53,520
interim whatever just an excuse for

2201
01:30:53,520 --> 01:30:55,500
people to get in a room and like spend a

2202
01:30:55,500 --> 01:30:57,179
bit of time I would normally say oh you

2203
01:30:57,179 --> 01:30:58,440
should all grab lunch but it's already

2204
01:30:58,440 --> 01:30:59,699
Thursday afternoon

2205
01:30:59,699 --> 01:31:02,580
uh I see Lucas saying if anyone wants to

2206
01:31:02,580 --> 01:31:05,280
go grab beer with them uh that or he

2207
01:31:05,280 --> 01:31:07,080
needs a glass of water

2208
01:31:07,080 --> 01:31:07,860
um

2209
01:31:07,860 --> 01:31:09,719
maybe yeah go talk to Lucas after the

2210
01:31:09,719 --> 01:31:11,820
session is a good idea as well uh what

2211
01:31:11,820 --> 01:31:13,860
I'm thinking is action items

2212
01:31:13,860 --> 01:31:15,480
um I'm gonna take an action item with

2213
01:31:15,480 --> 01:31:18,300
Bernard to talk to the HTP chairs see

2214
01:31:18,300 --> 01:31:21,480
how they feel about this because

2215
01:31:21,480 --> 01:31:22,980
um neither of them are in the room right

2216
01:31:22,980 --> 01:31:25,320
now and this sounds like

2217
01:31:25,320 --> 01:31:28,320
it could either be the and just in terms

2218
01:31:28,320 --> 01:31:30,540
of ossification my gut feeling is that

2219
01:31:30,540 --> 01:31:32,639
if whatever we design in web transfer

2220
01:31:32,639 --> 01:31:35,400
will probably cover every extension that

2221
01:31:35,400 --> 01:31:36,900
wants to use bi-directional streams in

2222
01:31:36,900 --> 01:31:40,260
HTTP forever because in practice like

2223
01:31:40,260 --> 01:31:41,639
once you've set that setting that's how

2224
01:31:41,639 --> 01:31:44,400
it is and we've

2225
01:31:44,400 --> 01:31:45,900
so I'm sure they're going to want to

2226
01:31:45,900 --> 01:31:48,780
have a say so I'll discuss with them my

2227
01:31:48,780 --> 01:31:50,040
only concern is I don't want to delay

2228
01:31:50,040 --> 01:31:52,679
this document too much so I'll try to

2229
01:31:52,679 --> 01:31:54,360
negotiate with them if it makes sense to

2230
01:31:54,360 --> 01:31:56,280
have something fast tracked with them to

2231
01:31:56,280 --> 01:31:58,320
like very tightly scope to solving this

2232
01:31:58,320 --> 01:31:59,580
problem

2233
01:31:59,580 --> 01:32:03,179
all right and with that Victor I think

2234
01:32:03,179 --> 01:32:05,780
you can keep going

2235
01:32:06,780 --> 01:32:10,199
oh uh uh I think we're actually out of

2236
01:32:10,199 --> 01:32:13,320
actual issues there are some open pull

2237
01:32:13,320 --> 01:32:15,420
requests that I would like people to

2238
01:32:15,420 --> 01:32:18,060
look and but I would like people to look

2239
01:32:18,060 --> 01:32:20,580
I mean I believe all of those already

2240
01:32:20,580 --> 01:32:24,780
had consensus in some form another so uh

2241
01:32:24,780 --> 01:32:27,420
special is the first one we've agreed

2242
01:32:27,420 --> 01:32:29,280
that we want to do this but we've never

2243
01:32:29,280 --> 01:32:32,880
agreed on the specifics uh everyone is

2244
01:32:32,880 --> 01:32:34,800
welcome to take a look at this and

2245
01:32:34,800 --> 01:32:36,659
unless there are any objections I will

2246
01:32:36,659 --> 01:32:38,219
merge all of those

2247
01:32:38,219 --> 01:32:40,080
uh

2248
01:32:40,080 --> 01:32:43,260
and that's it for my slides thanks

2249
01:32:43,260 --> 01:32:45,239
everyone

2250
01:32:45,239 --> 01:32:47,760
hi thanks Victor

2251
01:32:47,760 --> 01:32:50,340
um oh it's silly there there's this

2252
01:32:50,340 --> 01:32:52,139
really neat feature now that I can get

2253
01:32:52,139 --> 01:32:54,300
the slides back but the presenters keep

2254
01:32:54,300 --> 01:32:56,699
closing them and then we just need to

2255
01:32:56,699 --> 01:32:59,960
tell you to do some UI tweaks

2256
01:33:03,120 --> 01:33:05,179
yeah

2257
01:33:05,280 --> 01:33:06,840
yeah it's true the system isn't really

2258
01:33:06,840 --> 01:33:08,820
designed for what we're doing which is

2259
01:33:08,820 --> 01:33:11,460
the entire slide deck is one thing

2260
01:33:11,460 --> 01:33:15,239
um so just to confirm folks please

2261
01:33:15,239 --> 01:33:17,460
review those PRS

2262
01:33:17,460 --> 01:33:19,020
um

2263
01:33:19,020 --> 01:33:20,780
and then we're going to merge them soon

2264
01:33:20,780 --> 01:33:24,300
uh Martin I want to come up for uh for

2265
01:33:24,300 --> 01:33:25,560
your

2266
01:33:25,560 --> 01:33:29,179
there we there we go

2267
01:33:42,360 --> 01:33:44,639
no but I'll try to fix that right now so

2268
01:33:44,639 --> 01:33:47,100
stress this go ahead start and then let

2269
01:33:47,100 --> 01:33:49,580
me fix it

2270
01:33:51,480 --> 01:33:53,280
you can start talking while I fix it

2271
01:33:53,280 --> 01:33:55,860
okay well I I would I would really need

2272
01:33:55,860 --> 01:33:57,540
my slides though

2273
01:33:57,540 --> 01:33:59,580
if you maybe could go to the next slide

2274
01:33:59,580 --> 01:34:03,679
while you're yeah yeah I can do that

2275
01:34:04,679 --> 01:34:06,659
okay let's talk about stream resets

2276
01:34:06,659 --> 01:34:07,560
again

2277
01:34:07,560 --> 01:34:09,239
um this is different from what we talked

2278
01:34:09,239 --> 01:34:12,060
about in in quick talk closer to the mic

2279
01:34:12,060 --> 01:34:13,800
okay this is different from what we

2280
01:34:13,800 --> 01:34:15,360
talked about in quick

2281
01:34:15,360 --> 01:34:16,199
um

2282
01:34:16,199 --> 01:34:17,580
so

2283
01:34:17,580 --> 01:34:19,800
um just a quick quick recap when when

2284
01:34:19,800 --> 01:34:23,100
you reset the stream you um you you stop

2285
01:34:23,100 --> 01:34:25,320
re-transmitting your stream frames uh

2286
01:34:25,320 --> 01:34:27,900
you only transmit the reset stream frame

2287
01:34:27,900 --> 01:34:29,820
reliably

2288
01:34:29,820 --> 01:34:32,460
um at the receiver side you usually

2289
01:34:32,460 --> 01:34:34,320
report the stream reset error to the

2290
01:34:34,320 --> 01:34:36,239
application directly without waiting for

2291
01:34:36,239 --> 01:34:38,219
any stream frames since they are not

2292
01:34:38,219 --> 01:34:40,080
delivered reliably anyway

2293
01:34:40,080 --> 01:34:43,820
so next slide

2294
01:34:46,080 --> 01:34:50,940
so this is how your how a general web

2295
01:34:50,940 --> 01:34:54,600
transport HTTP 3 setup would probably

2296
01:34:54,600 --> 01:34:56,659
look like in every stack

2297
01:34:56,659 --> 01:34:58,920
at the bottom you have your you have

2298
01:34:58,920 --> 01:35:00,360
your quick layer your quick layer

2299
01:35:00,360 --> 01:35:03,239
accepts streams and hands them to the

2300
01:35:03,239 --> 01:35:07,920
HTTP 3 layer and then HTTP 3 parses the

2301
01:35:07,920 --> 01:35:10,020
first frame or as we've just discussed

2302
01:35:10,020 --> 01:35:13,260
the first warning and decides what to do

2303
01:35:13,260 --> 01:35:15,120
with that stream

2304
01:35:15,120 --> 01:35:18,540
um it could be an HTTP request stream if

2305
01:35:18,540 --> 01:35:22,560
you parse an HD an H3 headers frame

2306
01:35:22,560 --> 01:35:24,780
um then you pass this past the stream to

2307
01:35:24,780 --> 01:35:28,980
your HTTP Handler if you parse the frame

2308
01:35:28,980 --> 01:35:31,800
type for the web transport stream then

2309
01:35:31,800 --> 01:35:34,440
you put you you pass your your stream to

2310
01:35:34,440 --> 01:35:36,780
to your web transport stack which then

2311
01:35:36,780 --> 01:35:40,639
might pass the session ID

2312
01:35:41,159 --> 01:35:43,620
how are we doing with the slots yes I

2313
01:35:43,620 --> 01:35:45,780
just need to stop them to re-sure that

2314
01:35:45,780 --> 01:35:48,199
ones

2315
01:35:48,960 --> 01:35:51,860
sorry for that

2316
01:35:56,040 --> 01:35:59,420
all right oh wait

2317
01:36:05,340 --> 01:36:07,940
nope

2318
01:36:09,360 --> 01:36:12,360
okay

2319
01:36:12,780 --> 01:36:17,820
nope yeah it's just I got this

2320
01:36:17,820 --> 01:36:21,719
uh this one yes so so the problem is we

2321
01:36:21,719 --> 01:36:25,139
we what what does your your HP three

2322
01:36:25,139 --> 01:36:27,179
layer do when when it receives a stream

2323
01:36:27,179 --> 01:36:29,580
that is already reset and the stream

2324
01:36:29,580 --> 01:36:32,159
frame uh the stream frame carrying the

2325
01:36:32,159 --> 01:36:34,560
the first byte was lost so we are now

2326
01:36:34,560 --> 01:36:36,480
sitting there with this stream and we

2327
01:36:36,480 --> 01:36:38,940
don't know is if it's an HTTP request

2328
01:36:38,940 --> 01:36:41,219
stream or if it's a web transport stream

2329
01:36:41,219 --> 01:36:43,620
and then which session it belongs to

2330
01:36:43,620 --> 01:36:46,760
so next slide

2331
01:36:49,560 --> 01:36:52,380
the first option is to do nothing

2332
01:36:52,380 --> 01:36:55,679
like your what do you do in in H3 you

2333
01:36:55,679 --> 01:36:57,300
receive the stream it's reset you're

2334
01:36:57,300 --> 01:36:58,679
like the client doesn't want the stream

2335
01:36:58,679 --> 01:37:01,139
anymore you immediately set a reset on

2336
01:37:01,139 --> 01:37:03,060
on your side of the stream and the

2337
01:37:03,060 --> 01:37:04,260
stream is gone

2338
01:37:04,260 --> 01:37:06,480
so we could say we do the same when

2339
01:37:06,480 --> 01:37:07,920
you're when you're running web transport

2340
01:37:07,920 --> 01:37:10,320
on the on the same connection

2341
01:37:10,320 --> 01:37:12,600
um you receive that stream reset it it's

2342
01:37:12,600 --> 01:37:13,380
gone

2343
01:37:13,380 --> 01:37:16,820
the the the downside of this is

2344
01:37:16,820 --> 01:37:19,320
that application protocols that are

2345
01:37:19,320 --> 01:37:23,100
built on top of web transport might need

2346
01:37:23,100 --> 01:37:25,980
that reset as a signal for for some some

2347
01:37:25,980 --> 01:37:28,139
signal at the at the application layer

2348
01:37:28,139 --> 01:37:30,659
so if we decide to go with this option

2349
01:37:30,659 --> 01:37:34,139
we limit the the the kind of protocols

2350
01:37:34,139 --> 01:37:36,360
that can be layered on top of um on top

2351
01:37:36,360 --> 01:37:37,920
of web transport

2352
01:37:37,920 --> 01:37:40,940
next slide

2353
01:37:41,520 --> 01:37:45,179
the second option is to to use a a reset

2354
01:37:45,179 --> 01:37:47,580
capsule we've already defined a bunch of

2355
01:37:47,580 --> 01:37:49,920
capsules and every web transport session

2356
01:37:49,920 --> 01:37:52,620
has this one reliable stream which is

2357
01:37:52,620 --> 01:37:55,320
not closed until the the web print board

2358
01:37:55,320 --> 01:37:57,659
session is closed so we could use this

2359
01:37:57,659 --> 01:37:59,219
that that

2360
01:37:59,219 --> 01:38:02,760
um that stream to send a web transform

2361
01:38:02,760 --> 01:38:04,380
capsule and I just made up that frame

2362
01:38:04,380 --> 01:38:06,600
format that's not defined in any PR but

2363
01:38:06,600 --> 01:38:08,639
this is how it could look like

2364
01:38:08,639 --> 01:38:11,400
um you just sent this capsule on on the

2365
01:38:11,400 --> 01:38:14,040
on the on the request stream on the um

2366
01:38:14,040 --> 01:38:15,659
yeah on the Control stream

2367
01:38:15,659 --> 01:38:18,060
and you know that it will be desired and

2368
01:38:18,060 --> 01:38:22,020
will be delivered reliably

2369
01:38:22,020 --> 01:38:24,120
so this sounds like an easy solution but

2370
01:38:24,120 --> 01:38:25,380
there are some problems with it next

2371
01:38:25,380 --> 01:38:27,739
slide

2372
01:38:28,320 --> 01:38:31,020
so let's go back to our our general

2373
01:38:31,020 --> 01:38:34,020
stack and we are now at the rgb3 layer

2374
01:38:34,020 --> 01:38:36,719
and we have received the stream that is

2375
01:38:36,719 --> 01:38:38,400
reset

2376
01:38:38,400 --> 01:38:41,100
now what do we do we haven't received

2377
01:38:41,100 --> 01:38:42,659
the capsule yet

2378
01:38:42,659 --> 01:38:45,120
so this could be an HTTP request stream

2379
01:38:45,120 --> 01:38:47,219
but we don't we don't know that yet or

2380
01:38:47,219 --> 01:38:48,900
it could belong to a web transport

2381
01:38:48,900 --> 01:38:52,560
session so we now need to wait

2382
01:38:52,560 --> 01:38:55,860
to see if we receive this capsule on one

2383
01:38:55,860 --> 01:38:58,440
of our web transport sessions

2384
01:38:58,440 --> 01:39:01,139
if we don't receive that capsule after a

2385
01:39:01,139 --> 01:39:02,820
certain time

2386
01:39:02,820 --> 01:39:06,060
then we can conclude it was probably an

2387
01:39:06,060 --> 01:39:09,239
HTTP stream and then HTTP stream and

2388
01:39:09,239 --> 01:39:11,520
then we can reset it

2389
01:39:11,520 --> 01:39:14,159
which of course now we have the problem

2390
01:39:14,159 --> 01:39:15,780
like what's what's the right value for

2391
01:39:15,780 --> 01:39:18,060
this timer and there's probably no good

2392
01:39:18,060 --> 01:39:20,040
answer because the your Capital could

2393
01:39:20,040 --> 01:39:23,280
have been lost needs to be retransmitted

2394
01:39:23,280 --> 01:39:25,440
um could could have been blocked by flow

2395
01:39:25,440 --> 01:39:26,940
control

2396
01:39:26,940 --> 01:39:28,679
um like there's there's just no good

2397
01:39:28,679 --> 01:39:31,139
value for for this timer

2398
01:39:31,139 --> 01:39:34,560
things get even more complicated if if

2399
01:39:34,560 --> 01:39:36,360
you consider that there might be a

2400
01:39:36,360 --> 01:39:38,639
second web transport session which is

2401
01:39:38,639 --> 01:39:40,260
not yet established but the client has

2402
01:39:40,260 --> 01:39:42,719
sent the connect request and has already

2403
01:39:42,719 --> 01:39:44,340
optimistically opened the stream for

2404
01:39:44,340 --> 01:39:46,500
that for that

2405
01:39:46,500 --> 01:39:48,960
um for that session

2406
01:39:48,960 --> 01:39:52,020
um is now canceling that session by by

2407
01:39:52,020 --> 01:39:54,480
resetting the request stream so now

2408
01:39:54,480 --> 01:39:56,639
you're sitting there like this was a web

2409
01:39:56,639 --> 01:39:59,100
transport stream but you won't you won't

2410
01:39:59,100 --> 01:40:01,860
get the capsule because that that

2411
01:40:01,860 --> 01:40:04,199
session has already gone away so it's

2412
01:40:04,199 --> 01:40:06,120
it's it's not really clear what to do in

2413
01:40:06,120 --> 01:40:08,040
that case you you would then run into

2414
01:40:08,040 --> 01:40:10,860
your timeout and just reset the screen

2415
01:40:10,860 --> 01:40:13,679
and maybe give a give a wrong signal to

2416
01:40:13,679 --> 01:40:16,199
the to the transport layer

2417
01:40:16,199 --> 01:40:19,199
uh to the application layer sorry next

2418
01:40:19,199 --> 01:40:21,500
slide

2419
01:40:21,960 --> 01:40:24,380
foreign

2420
01:40:24,780 --> 01:40:27,659
that's the old slides

2421
01:40:27,659 --> 01:40:28,860
okay

2422
01:40:28,860 --> 01:40:32,340
I I it was I mostly skipped slides so

2423
01:40:32,340 --> 01:40:34,620
this is fine so with the reset capsules

2424
01:40:34,620 --> 01:40:36,060
there's there's like a lot of error

2425
01:40:36,060 --> 01:40:38,159
conditions uh I've ex I've walked you

2426
01:40:38,159 --> 01:40:39,840
through one of them but there's more

2427
01:40:39,840 --> 01:40:42,360
like you could have you could you could

2428
01:40:42,360 --> 01:40:45,120
receive the the reset capsule but not

2429
01:40:45,120 --> 01:40:47,100
receive the stream reset reset because

2430
01:40:47,100 --> 01:40:48,780
there's there's no guarantee that the

2431
01:40:48,780 --> 01:40:50,580
client is well behaved right because the

2432
01:40:50,580 --> 01:40:52,080
client could be attacking you and just

2433
01:40:52,080 --> 01:40:54,360
sending you sending sending you nonsense

2434
01:40:54,360 --> 01:40:56,219
so when you're implementing this you

2435
01:40:56,219 --> 01:40:58,280
need to be prepared to to handle a

2436
01:40:58,280 --> 01:41:00,960
malicious client

2437
01:41:00,960 --> 01:41:03,480
um could also be that the client sends

2438
01:41:03,480 --> 01:41:06,659
multiple uh reset capsules

2439
01:41:06,659 --> 01:41:09,239
um on on different sessions all claiming

2440
01:41:09,239 --> 01:41:11,280
the same stream and you also needs some

2441
01:41:11,280 --> 01:41:13,320
Logic for that I guess

2442
01:41:13,320 --> 01:41:14,639
um so there's there's just a lot of

2443
01:41:14,639 --> 01:41:16,080
corner cases you have to think about

2444
01:41:16,080 --> 01:41:20,780
with reset capsules uh next slide

2445
01:41:24,659 --> 01:41:27,360
that was the next slide wasn't it yeah

2446
01:41:27,360 --> 01:41:30,360
so um for the next option I made new

2447
01:41:30,360 --> 01:41:33,960
slides so if you could fill those out it

2448
01:41:33,960 --> 01:41:37,020
would be really great uh

2449
01:41:37,020 --> 01:41:39,480
yeah I did and I hit the pull but let me

2450
01:41:39,480 --> 01:41:40,800
let me let me run through it again one

2451
01:41:40,800 --> 01:41:42,980
second

2452
01:41:48,300 --> 01:41:49,860
all right hold on I'm gonna upload them

2453
01:41:49,860 --> 01:41:53,900
with a different name we got this

2454
01:42:11,219 --> 01:42:12,840
all right tell us a joke quite a while

2455
01:42:12,840 --> 01:42:14,400
I'll figure this out

2456
01:42:14,400 --> 01:42:17,400
refresh

2457
01:42:17,460 --> 01:42:21,300
import processing

2458
01:42:22,580 --> 01:42:26,340
close present

2459
01:42:26,340 --> 01:42:29,300
there

2460
01:42:33,060 --> 01:42:35,280
all right

2461
01:42:35,280 --> 01:42:36,420
okay

2462
01:42:36,420 --> 01:42:38,580
um so the third option is to to solve

2463
01:42:38,580 --> 01:42:39,960
this at the quick layer and in the quick

2464
01:42:39,960 --> 01:42:41,940
reference group I presented one proposal

2465
01:42:41,940 --> 01:42:44,280
called reliable stream stream resets

2466
01:42:44,280 --> 01:42:46,139
that's not the only way to solve this

2467
01:42:46,139 --> 01:42:47,940
problem but

2468
01:42:47,940 --> 01:42:49,560
um it's just one proposal and there were

2469
01:42:49,560 --> 01:42:52,739
other other proposals um uh floating

2470
01:42:52,739 --> 01:42:55,800
around to solve to solve it in a similar

2471
01:42:55,800 --> 01:42:58,139
but maybe less complicated way

2472
01:42:58,139 --> 01:43:01,280
uh next slide

2473
01:43:02,280 --> 01:43:05,420
next slide

2474
01:43:06,719 --> 01:43:09,840
so the the question is uh so for for

2475
01:43:09,840 --> 01:43:11,760
option option three you're solving it at

2476
01:43:11,760 --> 01:43:14,480
the quick layer this has the the the

2477
01:43:14,480 --> 01:43:17,580
obvious benefit of

2478
01:43:17,580 --> 01:43:19,920
um allowing the the applications to to

2479
01:43:19,920 --> 01:43:22,980
react to every stream reset

2480
01:43:22,980 --> 01:43:23,820
um

2481
01:43:23,820 --> 01:43:27,719
it has a very limited complexity at the

2482
01:43:27,719 --> 01:43:30,119
web transport layer at the HTTP 3 layer

2483
01:43:30,119 --> 01:43:32,520
because when we receive a stream we can

2484
01:43:32,520 --> 01:43:34,920
rely on the

2485
01:43:34,920 --> 01:43:35,880
um

2486
01:43:35,880 --> 01:43:38,940
um the session the web transport stream

2487
01:43:38,940 --> 01:43:40,800
frame and the the session ID being

2488
01:43:40,800 --> 01:43:42,239
present

2489
01:43:42,239 --> 01:43:43,920
um we're basically pushing that

2490
01:43:43,920 --> 01:43:46,679
complexity to the quick layer

2491
01:43:46,679 --> 01:43:48,420
um the reason we might want to do this

2492
01:43:48,420 --> 01:43:49,500
is

2493
01:43:49,500 --> 01:43:51,840
because web transfer is probably not the

2494
01:43:51,840 --> 01:43:54,719
only protocol that is sending some kind

2495
01:43:54,719 --> 01:43:56,520
of identifier at the beginning of a

2496
01:43:56,520 --> 01:43:59,159
stream so solving it at the quick layer

2497
01:43:59,159 --> 01:44:01,139
one might argue is the the correct

2498
01:44:01,139 --> 01:44:02,880
layering here

2499
01:44:02,880 --> 01:44:06,000
um downside is we need to Define that

2500
01:44:06,000 --> 01:44:07,980
um that that extension too quick or the

2501
01:44:07,980 --> 01:44:09,600
quick working group needs to work on

2502
01:44:09,600 --> 01:44:11,400
this

2503
01:44:11,400 --> 01:44:13,860
um next slide

2504
01:44:13,860 --> 01:44:15,659
or maybe there's no next slide yeah

2505
01:44:15,659 --> 01:44:19,400
there is oh no no that was it

2506
01:44:19,560 --> 01:44:22,080
that was it for your slides

2507
01:44:22,080 --> 01:44:25,800
what do you think thoughts questions or

2508
01:44:25,800 --> 01:44:28,260
Martin while people queue up do you want

2509
01:44:28,260 --> 01:44:30,179
to share the other option that I think

2510
01:44:30,179 --> 01:44:32,940
uh Matt had proposed that was a take on

2511
01:44:32,940 --> 01:44:36,799
your option three or like option 3B

2512
01:44:36,960 --> 01:44:39,719
so if I understand correctly the the the

2513
01:44:39,719 --> 01:44:40,580
the the

2514
01:44:40,580 --> 01:44:45,179
proposal was to extend not the um to to

2515
01:44:45,179 --> 01:44:48,780
extend the reset stream frame not with a

2516
01:44:48,780 --> 01:44:51,480
with a size Warren but basically with a

2517
01:44:51,480 --> 01:44:53,699
data block and in this data block you

2518
01:44:53,699 --> 01:44:56,639
would send the the web transport stream

2519
01:44:56,639 --> 01:44:58,320
frame

2520
01:44:58,320 --> 01:45:00,540
so we can call that 3B for the purpose

2521
01:45:00,540 --> 01:45:04,679
of this discussion uh so just to set the

2522
01:45:04,679 --> 01:45:06,780
stage we have 15 minutes left the chair

2523
01:45:06,780 --> 01:45:08,460
is going to keep five minutes to wrap up

2524
01:45:08,460 --> 01:45:10,380
so we have 10 minutes to discuss this

2525
01:45:10,380 --> 01:45:12,239
Alan go ahead

2526
01:45:12,239 --> 01:45:13,800
Alan prindell

2527
01:45:13,800 --> 01:45:14,580
um

2528
01:45:14,580 --> 01:45:16,560
originally when we talked about what is

2529
01:45:16,560 --> 01:45:19,800
now called 3B so this with some instead

2530
01:45:19,800 --> 01:45:21,960
of a reliable size some amount of

2531
01:45:21,960 --> 01:45:23,639
application data which we get delivered

2532
01:45:23,639 --> 01:45:26,639
to the application uh when it received a

2533
01:45:26,639 --> 01:45:28,920
reset I had thought that that wouldn't

2534
01:45:28,920 --> 01:45:32,580
solve the case where

2535
01:45:32,580 --> 01:45:35,040
you still don't know if you don't

2536
01:45:35,040 --> 01:45:36,840
receive this

2537
01:45:36,840 --> 01:45:38,520
you have to wait for a while you gotta

2538
01:45:38,520 --> 01:45:40,860
like

2539
01:45:40,860 --> 01:45:44,520
what do you put in here if it's not

2540
01:45:44,520 --> 01:45:46,679
obviously I don't have a good idea I was

2541
01:45:46,679 --> 01:45:48,179
thinking it had a problem with HTTP

2542
01:45:48,179 --> 01:45:51,060
streams but I don't have a clearly

2543
01:45:51,060 --> 01:45:53,400
formed video I'll get out of the queue

2544
01:45:53,400 --> 01:45:56,000
are you concerned about

2545
01:45:56,000 --> 01:45:59,520
receiving a stream with a variant and

2546
01:45:59,520 --> 01:46:01,260
only being able to read like the first

2547
01:46:01,260 --> 01:46:03,300
bite of the Warren but the warrant is

2548
01:46:03,300 --> 01:46:04,980
actually longer

2549
01:46:04,980 --> 01:46:07,139
I mean your stack needs to handle that

2550
01:46:07,139 --> 01:46:09,380
anyway

2551
01:46:09,780 --> 01:46:12,380
of course Mike

2552
01:46:14,580 --> 01:46:16,199
um just repeating what I said when we

2553
01:46:16,199 --> 01:46:18,060
discussed this in quick

2554
01:46:18,060 --> 01:46:20,280
um this is actually a problem that H3

2555
01:46:20,280 --> 01:46:23,100
discovered it had just before we shipped

2556
01:46:23,100 --> 01:46:25,320
the RFC

2557
01:46:25,320 --> 01:46:27,420
um so it would be nice to see a solution

2558
01:46:27,420 --> 01:46:30,000
to this more generally uh whether it's

2559
01:46:30,000 --> 01:46:33,000
3A or 3B I really don't care odds are

2560
01:46:33,000 --> 01:46:34,739
good you have two varins that you care

2561
01:46:34,739 --> 01:46:36,719
about

2562
01:46:36,719 --> 01:46:39,420
um it's probably shorter to just stuff

2563
01:46:39,420 --> 01:46:42,000
them in here versus re-transmitting but

2564
01:46:42,000 --> 01:46:44,520
if you already sent it and it goes then

2565
01:46:44,520 --> 01:46:45,960
acknowledged then sticking this in

2566
01:46:45,960 --> 01:46:49,139
shorter ultimately it doesn't matter

2567
01:46:49,139 --> 01:46:52,619
um it's a couple bytes but it fixes a

2568
01:46:52,619 --> 01:46:53,639
real problem

2569
01:46:53,639 --> 01:46:55,860
I'll bet one that doesn't happen very

2570
01:46:55,860 --> 01:46:58,639
often we think

2571
01:46:59,940 --> 01:47:03,138
thanks Jonathan

2572
01:47:06,960 --> 01:47:10,260
uh yeah jonathanics would this

2573
01:47:10,260 --> 01:47:12,000
um quick extension B mandatory and

2574
01:47:12,000 --> 01:47:13,139
Implement from web transport

2575
01:47:13,139 --> 01:47:15,000
implementations

2576
01:47:15,000 --> 01:47:17,639
because if it isn't then you sometimes

2577
01:47:17,639 --> 01:47:20,580
get the unreliable resets case which I

2578
01:47:20,580 --> 01:47:22,380
think would be even worse because then

2579
01:47:22,380 --> 01:47:24,000
you couldn't predict whether you could

2580
01:47:24,000 --> 01:47:25,139
use full use as an apple as an

2581
01:47:25,139 --> 01:47:27,239
application signal so I think if you're

2582
01:47:27,239 --> 01:47:28,739
going to do this it would need to be MTI

2583
01:47:28,739 --> 01:47:31,020
for web transport implications but it

2584
01:47:31,020 --> 01:47:33,719
has its own unfortunate implications so

2585
01:47:33,719 --> 01:47:36,300
I think that needs to be thought about

2586
01:47:36,300 --> 01:47:39,360
and just uh jump in his chair we already

2587
01:47:39,360 --> 01:47:42,239
have the datagram quick extension as

2588
01:47:42,239 --> 01:47:44,699
mandatory tutorial to implement for web

2589
01:47:44,699 --> 01:47:46,320
transport so that's totally an option we

2590
01:47:46,320 --> 01:47:48,239
have

2591
01:47:48,239 --> 01:47:49,560
yeah I think we just add this to the

2592
01:47:49,560 --> 01:47:51,060
checklist that we that we had on that

2593
01:47:51,060 --> 01:47:52,860
previous slide there's four things now

2594
01:47:52,860 --> 01:47:54,360
it's five things

2595
01:47:54,360 --> 01:47:57,000
um and Counting I have a slight

2596
01:47:57,000 --> 01:48:00,420
preference to the um to the sort of

2597
01:48:00,420 --> 01:48:03,360
partial delivery uh option here as

2598
01:48:03,360 --> 01:48:04,800
opposed to the metadata one I think the

2599
01:48:04,800 --> 01:48:07,320
metadata one creates some interesting

2600
01:48:07,320 --> 01:48:09,719
uh challenges so can you explain what

2601
01:48:09,719 --> 01:48:11,340
you mean by those two options yeah so

2602
01:48:11,340 --> 01:48:13,619
the this option that's on the slide is

2603
01:48:13,619 --> 01:48:15,360
partial delivery I'm going to say that

2604
01:48:15,360 --> 01:48:16,860
I'm only partially delivering the

2605
01:48:16,860 --> 01:48:19,920
contents of this stream up to this point

2606
01:48:19,920 --> 01:48:23,639
um there's it's like saying oops I I may

2607
01:48:23,639 --> 01:48:25,739
have not provided you with a finbid or

2608
01:48:25,739 --> 01:48:27,179
I've provided you with a thin bit but

2609
01:48:27,179 --> 01:48:28,320
I'm not going to deliver up to that I'm

2610
01:48:28,320 --> 01:48:29,580
going to deliver to something less than

2611
01:48:29,580 --> 01:48:30,659
that

2612
01:48:30,659 --> 01:48:32,760
right so

2613
01:48:32,760 --> 01:48:34,560
for for this application we can say that

2614
01:48:34,560 --> 01:48:35,820
web transport streams you have to

2615
01:48:35,820 --> 01:48:37,980
provide a number in this one that is

2616
01:48:37,980 --> 01:48:41,100
large enough to cover the session ID and

2617
01:48:41,100 --> 01:48:43,080
the other

2618
01:48:43,080 --> 01:48:45,420
other piece that's in that frame uh the

2619
01:48:45,420 --> 01:48:49,159
type that that's at the start

2620
01:48:49,560 --> 01:48:51,239
the other option also works and I think

2621
01:48:51,239 --> 01:48:52,679
I could probably live with that which is

2622
01:48:52,679 --> 01:48:55,619
to to have some chunk of metadata in

2623
01:48:55,619 --> 01:48:57,960
here that's arbitrary length and would

2624
01:48:57,960 --> 01:49:00,540
be defined by the application there in

2625
01:49:00,540 --> 01:49:02,040
in some way there's there's some

2626
01:49:02,040 --> 01:49:03,600
interesting challenges with that one in

2627
01:49:03,600 --> 01:49:06,060
terms of what happens if it's different

2628
01:49:06,060 --> 01:49:09,000
to what the stream sent in the first

2629
01:49:09,000 --> 01:49:10,139
place and this is the sort of thing that

2630
01:49:10,139 --> 01:49:11,400
I think Martin really wants to avoid

2631
01:49:11,400 --> 01:49:13,320
here is that there's there's never any

2632
01:49:13,320 --> 01:49:16,139
ambiguity with this design as opposed to

2633
01:49:16,139 --> 01:49:18,300
the one that has oh here's the here's

2634
01:49:18,300 --> 01:49:19,380
the information that you needed to

2635
01:49:19,380 --> 01:49:21,960
process this stream oh so let me jump

2636
01:49:21,960 --> 01:49:23,460
into clarify because it's very relevant

2637
01:49:23,460 --> 01:49:25,320
here in what the one that I was asking

2638
01:49:25,320 --> 01:49:27,239
Martin to present was also the beginning

2639
01:49:27,239 --> 01:49:28,560
of the Stream

2640
01:49:28,560 --> 01:49:30,480
it was a separate metadata at least in

2641
01:49:30,480 --> 01:49:32,580
my view there's no guarantee that those

2642
01:49:32,580 --> 01:49:33,900
bytes match

2643
01:49:33,900 --> 01:49:35,400
right

2644
01:49:35,400 --> 01:49:37,020
you're sending them in a different

2645
01:49:37,020 --> 01:49:38,400
context in the same way that you could

2646
01:49:38,400 --> 01:49:39,659
send two stream frames with different

2647
01:49:39,659 --> 01:49:41,520
bytes of different at the same offset

2648
01:49:41,520 --> 01:49:43,920
right you you would have the same here

2649
01:49:43,920 --> 01:49:46,080
that's but that's fine we can already

2650
01:49:46,080 --> 01:49:48,239
handle that potentially so or at least

2651
01:49:48,239 --> 01:49:50,639
in my view just to clarify I was

2652
01:49:50,639 --> 01:49:52,500
thinking of sending the beginning of the

2653
01:49:52,500 --> 01:49:54,840
frame up until reliable size as part of

2654
01:49:54,840 --> 01:49:57,420
this Frame not easy as a way of framing

2655
01:49:57,420 --> 01:49:59,639
it yes part of this this you know Call

2656
01:49:59,639 --> 01:50:01,800
It Whatever that way it's easier to

2657
01:50:01,800 --> 01:50:03,719
implement because it and it's bounded to

2658
01:50:03,719 --> 01:50:07,560
one packet sorry just wanted to clarify

2659
01:50:07,560 --> 01:50:09,840
yeah you still have that problem but but

2660
01:50:09,840 --> 01:50:11,580
quick implementations deal with this

2661
01:50:11,580 --> 01:50:14,699
problem today uh in a non-deterministic

2662
01:50:14,699 --> 01:50:17,820
fashion which is really really fantastic

2663
01:50:17,820 --> 01:50:19,980
and we could do the same here I guess so

2664
01:50:19,980 --> 01:50:22,139
I'm kind of okay with with either one of

2665
01:50:22,139 --> 01:50:23,520
them I think I have a preference for

2666
01:50:23,520 --> 01:50:26,159
this one it's smaller uh you've already

2667
01:50:26,159 --> 01:50:27,960
probably sent this information and we

2668
01:50:27,960 --> 01:50:29,219
can certainly require that people send

2669
01:50:29,219 --> 01:50:31,619
this information anyway and so from a

2670
01:50:31,619 --> 01:50:33,560
practical standpoint

2671
01:50:33,560 --> 01:50:36,360
it's probably better

2672
01:50:36,360 --> 01:50:37,679
um

2673
01:50:37,679 --> 01:50:39,719
I'm just trying to think

2674
01:50:39,719 --> 01:50:42,360
size wise it's about the same

2675
01:50:42,360 --> 01:50:44,520
uh if you have to send it if you've

2676
01:50:44,520 --> 01:50:47,159
already sent it this is more efficient

2677
01:50:47,159 --> 01:50:49,199
there's a number of different

2678
01:50:49,199 --> 01:50:51,559
sorry

2679
01:50:51,840 --> 01:50:54,360
there's always the mismatched chance but

2680
01:50:54,360 --> 01:50:56,580
um the mismatch chances like a constant

2681
01:50:56,580 --> 01:50:58,920
in this design and and we've just

2682
01:50:58,920 --> 01:51:00,600
created a new way to do it in in the

2683
01:51:00,600 --> 01:51:03,600
other design I think that's probably

2684
01:51:03,600 --> 01:51:04,860
that's probably what it comes down to

2685
01:51:04,860 --> 01:51:06,480
now of course we need to have this

2686
01:51:06,480 --> 01:51:07,679
discussion in the quick working group

2687
01:51:07,679 --> 01:51:09,900
because this is not the working group to

2688
01:51:09,900 --> 01:51:12,480
generate the solution but the

2689
01:51:12,480 --> 01:51:14,820
requirement and I think I'm getting the

2690
01:51:14,820 --> 01:51:16,139
sense that the requirement is pretty

2691
01:51:16,139 --> 01:51:18,719
solid yeah no so the purpose of the

2692
01:51:18,719 --> 01:51:21,239
discussion today in this room speaking

2693
01:51:21,239 --> 01:51:24,360
as chair is to decide if we want to

2694
01:51:24,360 --> 01:51:28,139
let's say option one and option two were

2695
01:51:28,139 --> 01:51:29,520
didn't involve the quick working group

2696
01:51:29,520 --> 01:51:31,260
it would be we've solved this here we're

2697
01:51:31,260 --> 01:51:33,480
done option three or option three B

2698
01:51:33,480 --> 01:51:35,940
whatever we're calling them require

2699
01:51:35,940 --> 01:51:38,820
we we now give the quick working group

2700
01:51:38,820 --> 01:51:40,679
requirements so we can all trundle over

2701
01:51:40,679 --> 01:51:42,300
there and put our other hats on and

2702
01:51:42,300 --> 01:51:44,580
discuss it there

2703
01:51:44,580 --> 01:51:47,460
I suggest trundling in that case

2704
01:51:47,460 --> 01:51:49,080
um more concretely I think we've seen

2705
01:51:49,080 --> 01:51:51,179
that this keeps coming up for basically

2706
01:51:51,179 --> 01:51:52,739
everything that we ever build on top of

2707
01:51:52,739 --> 01:51:54,719
quick and so I think it is very much

2708
01:51:54,719 --> 01:51:56,820
worth trying to solve this in a generic

2709
01:51:56,820 --> 01:51:59,040
way that will apply to web transport and

2710
01:51:59,040 --> 01:52:01,760
others I would actually have a slightly

2711
01:52:01,760 --> 01:52:04,739
uh inverse take from Martin in that both

2712
01:52:04,739 --> 01:52:06,119
of these seem workable and I have a

2713
01:52:06,119 --> 01:52:08,219
slight preference for the other one

2714
01:52:08,219 --> 01:52:09,000
um

2715
01:52:09,000 --> 01:52:11,760
that we can sort out within quick it

2716
01:52:11,760 --> 01:52:13,679
seems as though the ability to mismatch

2717
01:52:13,679 --> 01:52:15,719
what you do in web transport and what

2718
01:52:15,719 --> 01:52:18,360
you put in quick is going to exist in

2719
01:52:18,360 --> 01:52:20,699
any case no matter what you do and so

2720
01:52:20,699 --> 01:52:22,380
it may be that

2721
01:52:22,380 --> 01:52:24,659
it's simpler to just say hey here's my

2722
01:52:24,659 --> 01:52:26,159
attribution for this rather than trying

2723
01:52:26,159 --> 01:52:27,480
to deliver a part of the actual stream

2724
01:52:27,480 --> 01:52:28,739
data

2725
01:52:28,739 --> 01:52:31,560
um but that's something we can take to

2726
01:52:31,560 --> 01:52:33,800
quick

2727
01:52:39,060 --> 01:52:41,780
because yeah

2728
01:52:45,420 --> 01:52:48,840
so I think the two options that we have

2729
01:52:48,840 --> 01:52:51,780
on the both ends of the table is if we

2730
01:52:51,780 --> 01:52:53,580
want to fix this problem in a generic

2731
01:52:53,580 --> 01:52:56,040
sense or if you want to do a quick fix

2732
01:52:56,040 --> 01:52:58,080
and the generic solution being affixed

2733
01:52:58,080 --> 01:53:00,119
into the quick protocol I think the

2734
01:53:00,119 --> 01:53:03,000
concern is if you can reach a consists

2735
01:53:03,000 --> 01:53:06,060
there in a short time frame and if that

2736
01:53:06,060 --> 01:53:08,159
consists is going to be something very

2737
01:53:08,159 --> 01:53:10,020
simple to implement because honestly

2738
01:53:10,020 --> 01:53:12,659
those two conditions uh it will drag the

2739
01:53:12,659 --> 01:53:15,300
standardization and the implementation

2740
01:53:15,300 --> 01:53:16,679
of web transport

2741
01:53:16,679 --> 01:53:17,880
but

2742
01:53:17,880 --> 01:53:21,000
may I may ask a question but by

2743
01:53:21,000 --> 01:53:23,460
consistent do you mean consistent spec

2744
01:53:23,460 --> 01:53:25,619
wise or are you avoid about

2745
01:53:25,619 --> 01:53:30,420
implementation uh complexity uh

2746
01:53:30,420 --> 01:53:31,800
well so

2747
01:53:31,800 --> 01:53:32,820
I

2748
01:53:32,820 --> 01:53:35,100
what I said is icons reach a consensus

2749
01:53:35,100 --> 01:53:37,500
regarding how to fix this in quick

2750
01:53:37,500 --> 01:53:39,600
oh you said consensus okay sorry I

2751
01:53:39,600 --> 01:53:41,880
didn't get it and regarding that

2752
01:53:41,880 --> 01:53:44,520
constantial question is my concern about

2753
01:53:44,520 --> 01:53:47,639
this specific uh proposal is that it's

2754
01:53:47,639 --> 01:53:49,500
not concrete enough to solve all the

2755
01:53:49,500 --> 01:53:52,560
issues that we had in history like uh

2756
01:53:52,560 --> 01:53:56,880
recognizing a push a very very end of a

2757
01:53:56,880 --> 01:53:58,739
large response and they're having to

2758
01:53:58,739 --> 01:54:00,900
send reference to it so there will be

2759
01:54:00,900 --> 01:54:03,000
discussion like that if we move this to

2760
01:54:03,000 --> 01:54:05,100
quickbooking also I think my slide

2761
01:54:05,100 --> 01:54:07,980
preference would be to fix this in the

2762
01:54:07,980 --> 01:54:10,638
dishwashing group

2763
01:54:12,239 --> 01:54:14,280
uh David schenazi speaking as an

2764
01:54:14,280 --> 01:54:15,780
individual well first speaking as chair

2765
01:54:15,780 --> 01:54:17,580
I've cut the queue and please keep it

2766
01:54:17,580 --> 01:54:18,900
short because we're running out of time

2767
01:54:18,900 --> 01:54:21,300
not speaking as an individual

2768
01:54:21,300 --> 01:54:23,460
um I initially really wanted to fix this

2769
01:54:23,460 --> 01:54:25,560
in web transport to for the exact

2770
01:54:25,560 --> 01:54:27,300
reasons because Google is saying to like

2771
01:54:27,300 --> 01:54:28,980
get this done

2772
01:54:28,980 --> 01:54:32,219
But like after uh seeing Martin's

2773
01:54:32,219 --> 01:54:34,679
presentations And discussing like uh

2774
01:54:34,679 --> 01:54:36,360
offline this week I'm convinced that

2775
01:54:36,360 --> 01:54:38,219
there's a real problem and I

2776
01:54:38,219 --> 01:54:40,619
begrudgingly I'm in favor of solving

2777
01:54:40,619 --> 01:54:42,540
this generically at the quick layer

2778
01:54:42,540 --> 01:54:45,619
and that's that Victor

2779
01:54:48,300 --> 01:54:51,900
I also agree that we should solve it the

2780
01:54:51,900 --> 01:54:55,739
quick layer because last time we had a

2781
01:54:55,739 --> 01:54:58,020
similar problem and we did not solve it

2782
01:54:58,020 --> 01:55:01,679
at upper layer uh we came to regret it

2783
01:55:01,679 --> 01:55:05,219
and I'm referring to help yes but like

2784
01:55:05,219 --> 01:55:07,800
in general if there is a correct layer

2785
01:55:07,800 --> 01:55:09,360
to solve the problem that we should

2786
01:55:09,360 --> 01:55:12,900
solve that problem at that layer uh and

2787
01:55:12,900 --> 01:55:15,300
I don't think it is actually that much

2788
01:55:15,300 --> 01:55:17,940
more expedient to solve it a 12

2789
01:55:17,940 --> 01:55:21,420
transport layer in this case

2790
01:55:21,420 --> 01:55:25,820
okay thanks Victor Luke

2791
01:55:25,980 --> 01:55:28,139
uh hi yeah I agree with solving it

2792
01:55:28,139 --> 01:55:31,199
correctly I will say for web transport I

2793
01:55:31,199 --> 01:55:33,060
would just send the reset stream after

2794
01:55:33,060 --> 01:55:35,580
you get an ack of the reliable size like

2795
01:55:35,580 --> 01:55:36,540
you don't need to send the reset

2796
01:55:36,540 --> 01:55:38,760
immediately you can hold it until you

2797
01:55:38,760 --> 01:55:41,940
know that they've got the reliable data

2798
01:55:41,940 --> 01:55:42,780
um

2799
01:55:42,780 --> 01:55:45,239
but I'd like to avoid that extra like

2800
01:55:45,239 --> 01:55:47,400
round trip or two and this would be a

2801
01:55:47,400 --> 01:55:49,800
way of doing it

2802
01:55:49,800 --> 01:55:53,040
thanks Alan Alan Ferndale I'm not sure

2803
01:55:53,040 --> 01:55:54,659
that works because a transport act

2804
01:55:54,659 --> 01:55:56,340
doesn't mean the H3 stack has seen the

2805
01:55:56,340 --> 01:55:58,860
data I can still get reset before

2806
01:55:58,860 --> 01:56:01,020
um so I think we should we should be

2807
01:56:01,020 --> 01:56:03,260
solving it at the quick layer

2808
01:56:03,260 --> 01:56:07,020
the I will say that maybe we are taking

2809
01:56:07,020 --> 01:56:09,239
a little bit The Spicy take for the end

2810
01:56:09,239 --> 01:56:10,560
of the meeting a little bit too narrow a

2811
01:56:10,560 --> 01:56:12,239
view on what the problem is the problem

2812
01:56:12,239 --> 01:56:14,699
is that applications like to group

2813
01:56:14,699 --> 01:56:15,719
things

2814
01:56:15,719 --> 01:56:18,119
and that we should quick maybe should

2815
01:56:18,119 --> 01:56:20,340
provide a way to identify those groups

2816
01:56:20,340 --> 01:56:22,560
on the wire not maybe at least in reset

2817
01:56:22,560 --> 01:56:25,320
stream but maybe also stream

2818
01:56:25,320 --> 01:56:28,260
um and that would also

2819
01:56:28,260 --> 01:56:30,119
potentially make some web transporting

2820
01:56:30,119 --> 01:56:31,860
things easier or the

2821
01:56:31,860 --> 01:56:33,540
server push thing easier or other

2822
01:56:33,540 --> 01:56:35,699
applications people want to build

2823
01:56:35,699 --> 01:56:36,360
um

2824
01:56:36,360 --> 01:56:39,000
it might be interesting that would be an

2825
01:56:39,000 --> 01:56:42,360
opportunist 3C then I'm sorry I would

2826
01:56:42,360 --> 01:56:44,460
assume that would be an option of three

2827
01:56:44,460 --> 01:56:47,460
C I mean that that one is probably not

2828
01:56:47,460 --> 01:56:48,960
expedient

2829
01:56:48,960 --> 01:56:50,699
um it's probably going to generate some

2830
01:56:50,699 --> 01:56:51,960
controvers or maybe not I don't know but

2831
01:56:51,960 --> 01:56:53,520
this is something we have talked about

2832
01:56:53,520 --> 01:56:54,840
internally we've actually implemented in

2833
01:56:54,840 --> 01:56:56,880
our stack already the ability to group

2834
01:56:56,880 --> 01:56:58,500
streams and have that be part of the API

2835
01:56:58,500 --> 01:57:00,239
and an extension on The Wire setup it

2836
01:57:00,239 --> 01:57:03,300
could be something interesting

2837
01:57:03,300 --> 01:57:06,719
thanks Alan hi Lucas Lucas party wearing

2838
01:57:06,719 --> 01:57:09,719
no hats um not being a web transport

2839
01:57:09,719 --> 01:57:12,480
implementer yet just a keen

2840
01:57:12,480 --> 01:57:16,020
um backseat Enthusiast uh yeah the

2841
01:57:16,020 --> 01:57:17,940
character thinker kind of work

2842
01:57:17,940 --> 01:57:21,239
solving it this way whatever Final

2843
01:57:21,239 --> 01:57:24,119
Solution we pick seems better to me

2844
01:57:24,119 --> 01:57:26,460
hence why you know we we wanted some of

2845
01:57:26,460 --> 01:57:28,320
that discussion in quick

2846
01:57:28,320 --> 01:57:29,040
um

2847
01:57:29,040 --> 01:57:31,080
I think yeah it's good to see that other

2848
01:57:31,080 --> 01:57:32,820
people are kind of agreeing with what I

2849
01:57:32,820 --> 01:57:33,920
thought

2850
01:57:33,920 --> 01:57:36,840
well it doesn't matter if I was wrong or

2851
01:57:36,840 --> 01:57:39,060
we were wrong that's fine but yeah like

2852
01:57:39,060 --> 01:57:41,219
let's I think it seems like it's

2853
01:57:41,219 --> 01:57:43,020
emerging that we should try and solve it

2854
01:57:43,020 --> 01:57:45,239
properly web transport could have but

2855
01:57:45,239 --> 01:57:47,760
you know if we got in a paging enough

2856
01:57:47,760 --> 01:57:50,219
context in now to understand the problem

2857
01:57:50,219 --> 01:57:51,599
a bit like

2858
01:57:51,599 --> 01:57:53,639
try and write that and codify the

2859
01:57:53,639 --> 01:57:55,020
solution

2860
01:57:55,020 --> 01:57:57,300
thanks Lucas and stay there and put your

2861
01:57:57,300 --> 01:57:59,699
hat on I'm going to meet you soon

2862
01:57:59,699 --> 01:58:01,260
um

2863
01:58:01,260 --> 01:58:03,840
speaking as chair I'm getting a sense in

2864
01:58:03,840 --> 01:58:06,300
the room that most folks

2865
01:58:06,300 --> 01:58:09,300
prefer solving this at the quick layer

2866
01:58:09,300 --> 01:58:09,960
um

2867
01:58:09,960 --> 01:58:12,840
because you can you live with that

2868
01:58:12,840 --> 01:58:13,619
um

2869
01:58:13,619 --> 01:58:17,340
and or does anyone else like object to

2870
01:58:17,340 --> 01:58:19,739
solving this at the quick layer

2871
01:58:19,739 --> 01:58:21,659
um and we're not prescribing a specific

2872
01:58:21,659 --> 01:58:24,239
solution but it would be going too quick

2873
01:58:24,239 --> 01:58:26,219
and saying we need this problem solved

2874
01:58:26,219 --> 01:58:28,679
at your layer plays

2875
01:58:28,679 --> 01:58:30,840
I believe that yeah I think we can

2876
01:58:30,840 --> 01:58:32,760
discuss this the big quick parking group

2877
01:58:32,760 --> 01:58:34,860
I'm not sure if there would be a

2878
01:58:34,860 --> 01:58:37,800
consensus that's my only concern

2879
01:58:37,800 --> 01:58:40,199
right and to be fair if it starts

2880
01:58:40,199 --> 01:58:42,420
dragging on forever and quick we would

2881
01:58:42,420 --> 01:58:44,219
we have the option here to change our

2882
01:58:44,219 --> 01:58:46,080
mind like

2883
01:58:46,080 --> 01:58:49,260
okay so I'm gonna say as chair we're

2884
01:58:49,260 --> 01:58:52,260
gonna um start moving that we're gonna

2885
01:58:52,260 --> 01:58:54,420
move the discussion too quick

2886
01:58:54,420 --> 01:58:55,619
um

2887
01:58:55,619 --> 01:58:57,659
saying that we have this problem and we

2888
01:58:57,659 --> 01:58:59,520
would the folks in the room at web

2889
01:58:59,520 --> 01:59:01,500
transport preferred that and that thread

2890
01:59:01,500 --> 01:59:03,119
people are still completely welcome to

2891
01:59:03,119 --> 01:59:05,639
say that they want to absolutely do it

2892
01:59:05,639 --> 01:59:07,080
in web chessboard and not do that that's

2893
01:59:07,080 --> 01:59:08,400
still fair game we're not declaring

2894
01:59:08,400 --> 01:59:09,659
official contestants here but we're

2895
01:59:09,659 --> 01:59:12,480
gonna go in that direction and so Lucas

2896
01:59:12,480 --> 01:59:15,179
like as chair can we perhaps try to like

2897
01:59:15,179 --> 01:59:17,639
maybe have a specific quick interim on

2898
01:59:17,639 --> 01:59:19,380
this topic or something you don't need

2899
01:59:19,380 --> 01:59:22,699
to reply to right now but

2900
01:59:23,360 --> 01:59:25,980
it's completely in scope of work in our

2901
01:59:25,980 --> 01:59:28,320
Charter to do this kind of thing

2902
01:59:28,320 --> 01:59:31,560
um we we have a fairly quiet work key

2903
01:59:31,560 --> 01:59:34,440
right now so we have the capacity

2904
01:59:34,440 --> 01:59:35,820
um in terms of interim I'll need to go

2905
01:59:35,820 --> 01:59:38,040
away and chat to people I have a think

2906
01:59:38,040 --> 01:59:39,780
um obviously we have stuff like the mock

2907
01:59:39,780 --> 01:59:42,599
interim coming up in January potentially

2908
01:59:42,599 --> 01:59:44,340
um so scheduling might be difficult

2909
01:59:44,340 --> 01:59:46,619
there I don't know what what timelines

2910
01:59:46,619 --> 01:59:48,659
but yeah let's not consider everyone

2911
01:59:48,659 --> 01:59:50,460
here right now to figure that one out

2912
01:59:50,460 --> 01:59:53,780
we'll take it offline

2913
01:59:54,119 --> 01:59:57,840
all right I that's that on that topic

2914
01:59:57,840 --> 02:00:00,260
thank you Martin

2915
02:00:00,599 --> 02:00:03,380
uh

2916
02:00:05,760 --> 02:00:08,639
um okay I think we have plans this went

2917
02:00:08,639 --> 02:00:10,500
well uh Bernard do you have anything you

2918
02:00:10,500 --> 02:00:13,280
want to add

2919
02:00:16,260 --> 02:00:20,040
uh no uh just uh we should probably

2920
02:00:20,040 --> 02:00:22,020
start to keep track of all the things we

2921
02:00:22,020 --> 02:00:24,780
need to do to close out web transport

2922
02:00:24,780 --> 02:00:27,540
uh because we don't want to let some of

2923
02:00:27,540 --> 02:00:30,980
these things drag on for years

2924
02:00:31,380 --> 02:00:34,980
agreed uh I'll I'll take action items to

2925
02:00:34,980 --> 02:00:37,560
uh go talk to the HTTP chairs and the

2926
02:00:37,560 --> 02:00:39,300
quick chairs and we can all play the

2927
02:00:39,300 --> 02:00:41,099
game of swapping hats to try to get this

2928
02:00:41,099 --> 02:00:42,960
done quickly

2929
02:00:42,960 --> 02:00:45,540
and that's done thanks everyone for

2930
02:00:45,540 --> 02:00:47,639
coming to web transport we will see you

2931
02:00:47,639 --> 02:00:50,520
on the list uh if you're not subscribed

2932
02:00:50,520 --> 02:00:53,760
to the quick or HTTP best lists uh you

2933
02:00:53,760 --> 02:00:55,139
should because we're going to have

2934
02:00:55,139 --> 02:00:56,520
discussions very relevant to web

2935
02:00:56,520 --> 02:00:58,560
transport there

2936
02:00:58,560 --> 02:01:00,900
um thanks for everyone and see you

2937
02:01:00,900 --> 02:01:03,379
virtually

2938
02:01:31,560 --> 02:01:34,380
right yes

2939
02:01:34,380 --> 02:01:36,500
yes

2940
02:02:06,179 --> 02:02:08,960
foreign

