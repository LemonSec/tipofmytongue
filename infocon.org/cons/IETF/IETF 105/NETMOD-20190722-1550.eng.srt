1
00:00:15,760 --> 00:00:21,140
yep so we're gonna work through the

2
00:00:18,800 --> 00:00:24,440
administrative detail here this is a

3
00:00:21,140 --> 00:00:26,860
continuation of the immediately previous

4
00:00:24,440 --> 00:00:32,119
meeting which had occurred in the

5
00:00:26,860 --> 00:00:38,629
adjacent roof so our agenda still holds

6
00:00:32,119 --> 00:00:41,060
as planned I would observe that the note

7
00:00:38,630 --> 00:00:42,890
well still applies to this meeting just

8
00:00:41,060 --> 00:00:47,120
as it did to the previous half of the

9
00:00:42,890 --> 00:00:50,989
meeting so keep that in mind this is

10
00:00:47,120 --> 00:00:54,709
very much an IETF activity blue sheets

11
00:00:50,989 --> 00:00:56,660
are going around it is not actually

12
00:00:54,710 --> 00:00:58,579
Liggett or II that you signed them both

13
00:00:56,660 --> 00:01:02,890
times since we're having the same

14
00:00:58,579 --> 00:01:05,659
meeting but if you didn't sign them

15
00:01:02,890 --> 00:01:07,009
previously by all means do so so that we

16
00:01:05,659 --> 00:01:09,350
have an accounting of the fact that you

17
00:01:07,009 --> 00:01:12,549
are in the network of vertices these are

18
00:01:09,350 --> 00:01:12,548
different blue sheets yes

19
00:01:18,280 --> 00:01:26,689
[Music]

20
00:01:20,380 --> 00:01:30,499
okay administrative details we do have a

21
00:01:26,689 --> 00:01:34,240
media echo session for this I was

22
00:01:30,499 --> 00:01:38,740
scribing in there for who was speaking

23
00:01:34,240 --> 00:01:41,779
we have the same etherpad as previously

24
00:01:38,740 --> 00:01:48,859
so we can just pretty much pick up where

25
00:01:41,779 --> 00:01:50,658
we left off all right so agenda wise we

26
00:01:48,859 --> 00:01:56,809
are going to start in with the design

27
00:01:50,659 --> 00:02:05,179
team and so this is actually about half

28
00:01:56,810 --> 00:02:11,000
of our agenda for this session and first

29
00:02:05,179 --> 00:02:23,930
up is Joe Clark

30
00:02:11,000 --> 00:02:26,870
a versioning design team update all

31
00:02:23,930 --> 00:02:31,820
right so it will actually be three of us

32
00:02:26,870 --> 00:02:33,980
presenting actually be three of us

33
00:02:31,820 --> 00:02:46,130
presenting today I will be your first

34
00:02:33,980 --> 00:02:48,140
host oh okay next please using that so

35
00:02:46,130 --> 00:02:50,269
there are agenda today will be five

36
00:02:48,140 --> 00:02:52,850
minutes hopefully less for me followed

37
00:02:50,270 --> 00:02:56,510
by I'm gonna guess the bulk of the time

38
00:02:52,850 --> 00:02:59,180
with Rob and then Bala will round us out

39
00:02:56,510 --> 00:03:01,390
and Rob will take us to next steps next

40
00:02:59,180 --> 00:03:01,390
please

41
00:03:01,660 --> 00:03:06,739
so the first thing we want to talk about

42
00:03:03,800 --> 00:03:08,390
is the versioning requirement changes

43
00:03:06,739 --> 00:03:11,420
and the reason this is only five minutes

44
00:03:08,390 --> 00:03:14,119
is because this is going to be fairly

45
00:03:11,420 --> 00:03:17,149
short essentially last time we agreed

46
00:03:14,120 --> 00:03:19,370
that we would adopt this document it was

47
00:03:17,150 --> 00:03:21,140
still unclear as to what the fate of

48
00:03:19,370 --> 00:03:23,299
this document will be if it will be

49
00:03:21,140 --> 00:03:25,820
taken RFC or if it will just be

50
00:03:23,299 --> 00:03:27,650
something that the working group agrees

51
00:03:25,820 --> 00:03:29,780
to that these are the requirements that

52
00:03:27,650 --> 00:03:32,600
we're trying to solve and instead we

53
00:03:29,780 --> 00:03:34,310
will then adopt solutions work through

54
00:03:32,600 --> 00:03:38,329
those solutions as a working group and

55
00:03:34,310 --> 00:03:40,519
take those two RFC but we did adopt it

56
00:03:38,330 --> 00:03:42,950
there has been one change since just

57
00:03:40,519 --> 00:03:46,040
transitioning it over to an IETF net mod

58
00:03:42,950 --> 00:03:49,429
document and that is changed to text for

59
00:03:46,040 --> 00:03:52,540
requirement 1.4 based on feedback we got

60
00:03:49,430 --> 00:03:56,480
directly at the last meeting next please

61
00:03:52,540 --> 00:03:59,060
that change was the original 1.4 said

62
00:03:56,480 --> 00:04:02,750
essentially that non backwards

63
00:03:59,060 --> 00:04:05,630
compatible changes must be allowed there

64
00:04:02,750 --> 00:04:07,610
was some consternation over why must

65
00:04:05,630 --> 00:04:10,130
they be allowed instead what they were

66
00:04:07,610 --> 00:04:12,410
what we really wanted to focus on was

67
00:04:10,130 --> 00:04:15,620
win non backwards compatible changes

68
00:04:12,410 --> 00:04:18,620
occur those changes need to be signaled

69
00:04:15,620 --> 00:04:20,418
or documented so that one can see that

70
00:04:18,620 --> 00:04:22,540
between two revisions of a particular

71
00:04:20,418 --> 00:04:24,169
yang module that

72
00:04:22,540 --> 00:04:26,060
backwards-compatible changes have

73
00:04:24,169 --> 00:04:28,490
occurred so what you can see down there

74
00:04:26,060 --> 00:04:31,160
under the new heading is the new text we

75
00:04:28,490 --> 00:04:33,260
arrived at this was posted to the

76
00:04:31,160 --> 00:04:36,200
mailing list a little bit of while a

77
00:04:33,260 --> 00:04:38,630
little while ago we haven't heard any

78
00:04:36,200 --> 00:04:40,849
additional comments on this so at this

79
00:04:38,630 --> 00:04:44,330
point the design team feels that the

80
00:04:40,850 --> 00:04:47,600
requirements draft the ITF version at

81
00:04:44,330 --> 00:04:50,240
revision 0-1 is final these are the

82
00:04:47,600 --> 00:04:52,580
requirements that we have been working

83
00:04:50,240 --> 00:05:02,950
towards in terms of a solution at this

84
00:04:52,580 --> 00:05:05,780
point questions all right as to what the

85
00:05:02,950 --> 00:05:07,880
final resting place of this document is

86
00:05:05,780 --> 00:05:09,859
we of course leave that to the chairs

87
00:05:07,880 --> 00:05:12,620
and the working group the design team

88
00:05:09,860 --> 00:05:15,050
feels that what I said earlier this

89
00:05:12,620 --> 00:05:17,780
document will not progress to an RFC

90
00:05:15,050 --> 00:05:19,639
it will just be there to serve as the

91
00:05:17,780 --> 00:05:22,280
guidelines for the requirements that

92
00:05:19,639 --> 00:05:27,650
will inform the solution or solutions

93
00:05:22,280 --> 00:05:30,710
that come forward actually on the next

94
00:05:27,650 --> 00:05:33,409
document but it maybe is pertinent to

95
00:05:30,710 --> 00:05:36,560
this question wait and it's really why

96
00:05:33,410 --> 00:05:38,510
not combine the two and you have like a

97
00:05:36,560 --> 00:05:40,400
solution overview document that repeats

98
00:05:38,510 --> 00:05:41,780
a whole bunch of requirements in it if

99
00:05:40,400 --> 00:05:43,219
you really believe that we need

100
00:05:41,780 --> 00:05:46,340
requirements somewhere let's keep it at

101
00:05:43,220 --> 00:05:47,479
one place rather than have because the

102
00:05:46,340 --> 00:05:49,549
requirements even though you don't think

103
00:05:47,479 --> 00:05:51,919
it needs to be documented it's not meant

104
00:05:49,550 --> 00:05:54,320
twice so it'd be great just to have one

105
00:05:51,919 --> 00:05:56,049
document and maybe maybe what we end up

106
00:05:54,320 --> 00:05:58,070
as from a working group is a

107
00:05:56,050 --> 00:05:59,870
requirements in solution overview or

108
00:05:58,070 --> 00:06:01,849
requirements and framework document and

109
00:05:59,870 --> 00:06:03,530
that's how we end up publishing that so

110
00:06:01,850 --> 00:06:05,240
we fold in what's now an individual

111
00:06:03,530 --> 00:06:08,179
document into the working group document

112
00:06:05,240 --> 00:06:10,940
and let that go forward and you know

113
00:06:08,180 --> 00:06:14,120
maybe all the historic stuff goes in an

114
00:06:10,940 --> 00:06:15,889
appendix just for context okay so so I

115
00:06:14,120 --> 00:06:19,280
do feel that the documenting the

116
00:06:15,889 --> 00:06:21,740
requirements are important not

117
00:06:19,280 --> 00:06:24,440
necessarily document is a ratified

118
00:06:21,740 --> 00:06:27,530
document but I get your point and maybe

119
00:06:24,440 --> 00:06:29,150
that's what then will become of the the

120
00:06:27,530 --> 00:06:31,750
framework of the next document that will

121
00:06:29,150 --> 00:06:31,750
be presented

122
00:06:32,170 --> 00:06:53,140
any other questions comments ones

123
00:06:50,020 --> 00:06:55,180
requirements are facing stone even if

124
00:06:53,140 --> 00:06:57,640
they are in document we don't spend our

125
00:06:55,180 --> 00:06:59,020
time reviewing them all the time because

126
00:06:57,640 --> 00:07:01,419
they're wise you're back to square one

127
00:06:59,020 --> 00:07:06,340
right well we definitely shouldn't

128
00:07:01,420 --> 00:07:09,100
change this one once we're done with you

129
00:07:06,340 --> 00:07:11,650
know the process of agreeing that we've

130
00:07:09,100 --> 00:07:13,480
arrived at that point very good and

131
00:07:11,650 --> 00:07:15,640
actually that's a hundred percent my

132
00:07:13,480 --> 00:07:17,470
objection with repeating requirements in

133
00:07:15,640 --> 00:07:19,060
another document now I have to go review

134
00:07:17,470 --> 00:07:20,470
those make sure they're right now we

135
00:07:19,060 --> 00:07:22,120
have to go discuss them is it the right

136
00:07:20,470 --> 00:07:22,920
way to summarize let's not do that

137
00:07:22,120 --> 00:07:26,710
please

138
00:07:22,920 --> 00:07:28,990
so we're saying yeah our intent is that

139
00:07:26,710 --> 00:07:30,370
these requirements now become fixed

140
00:07:28,990 --> 00:07:35,190
these are the requirements for which

141
00:07:30,370 --> 00:07:37,900
we're trying to solve the the

142
00:07:35,190 --> 00:07:40,180
requirements in the overview draft are

143
00:07:37,900 --> 00:07:41,830
only there to make it easy to read so if

144
00:07:40,180 --> 00:07:44,230
it's easy to have them now just refer to

145
00:07:41,830 --> 00:07:46,330
this one that sorts of it's more easier

146
00:07:44,230 --> 00:07:49,090
to say the requirements are documented

147
00:07:46,330 --> 00:07:51,219
here go read it just give a second

148
00:07:49,090 --> 00:07:53,349
second set which isn't written quite

149
00:07:51,220 --> 00:07:55,000
exactly the same way that you have to

150
00:07:53,350 --> 00:07:59,920
figure out what's different what's not

151
00:07:55,000 --> 00:08:02,170
different yes that's right well oddly

152
00:07:59,920 --> 00:08:11,460
Rob why don't you get up here I'm gonna

153
00:08:02,170 --> 00:08:14,650
get out before something changes okay so

154
00:08:11,460 --> 00:08:19,180
so I need a quick update for next slide

155
00:08:14,650 --> 00:08:21,520
please so I just want to we continue to

156
00:08:19,180 --> 00:08:23,350
have semi regular meeting since ITF 104

157
00:08:21,520 --> 00:08:26,169
there's quite a few people who've I'm

158
00:08:23,350 --> 00:08:27,760
dialed in either a weekly or semi weekly

159
00:08:26,170 --> 00:08:29,440
basis and we've continued to progress

160
00:08:27,760 --> 00:08:31,210
various documents I like to thank

161
00:08:29,440 --> 00:08:33,640
everyone down there on that list I don't

162
00:08:31,210 --> 00:08:35,490
repeat them and our main output really

163
00:08:33,640 --> 00:08:39,130
is that tweak the requirements document

164
00:08:35,490 --> 00:08:41,919
the judges talked about an updated sort

165
00:08:39,130 --> 00:08:43,299
of solution solutions overview draft

166
00:08:41,919 --> 00:08:44,660
that sort of tries to pin everything

167
00:08:43,299 --> 00:08:45,740
together and show

168
00:08:44,660 --> 00:08:47,360
you wear the different bits of the

169
00:08:45,740 --> 00:08:49,790
solution hanging together and then our

170
00:08:47,360 --> 00:08:52,610
main focus has been working on this sort

171
00:08:49,790 --> 00:08:54,800
of new / updated yang moderate module

172
00:08:52,610 --> 00:08:57,079
revision handling draft that evolved

173
00:08:54,800 --> 00:09:00,469
from the somatic version draft that we

174
00:08:57,079 --> 00:09:02,029
presented in 104 my opinion is that this

175
00:09:00,470 --> 00:09:05,899
draft accommodates all sort of core

176
00:09:02,029 --> 00:09:07,699
feedback we received during the working

177
00:09:05,899 --> 00:09:10,490
group meetings and also the versioning

178
00:09:07,699 --> 00:09:11,870
discussions we had at 1:04 and so we

179
00:09:10,490 --> 00:09:15,139
think it was sort of reflects that

180
00:09:11,870 --> 00:09:17,810
consensus from that next slide please

181
00:09:15,139 --> 00:09:19,579
so I'm now going to spend the next 20

182
00:09:17,810 --> 00:09:21,589
minutes discussing the solution overview

183
00:09:19,579 --> 00:09:22,699
I'm just trying to set the scene of

184
00:09:21,589 --> 00:09:24,980
where these drafts ought to hang

185
00:09:22,699 --> 00:09:26,479
together then there's me subsequent

186
00:09:24,980 --> 00:09:30,430
talks on some of those there are

187
00:09:26,480 --> 00:09:30,430
different parts so next slide please so

188
00:09:30,790 --> 00:09:34,819
my intention here was that the solution

189
00:09:33,019 --> 00:09:36,889
David Dreier you draft is meant to be a

190
00:09:34,819 --> 00:09:40,099
sort of transient temporary document the

191
00:09:36,889 --> 00:09:41,870
the idea here really is just to help the

192
00:09:40,100 --> 00:09:44,060
readers who are reviewing those drafts

193
00:09:41,870 --> 00:09:45,769
understand how they fit together what

194
00:09:44,060 --> 00:09:48,589
bits haven't yet been written but in

195
00:09:45,769 --> 00:09:50,600
what will be written a mind teacher

196
00:09:48,589 --> 00:09:52,880
wasn't intended to take this to RFC I

197
00:09:50,600 --> 00:09:54,500
mean it could be done but that the

198
00:09:52,880 --> 00:09:57,670
attention of this was to help people

199
00:09:54,500 --> 00:09:59,839
during the review process in terms of

200
00:09:57,670 --> 00:10:02,959
updates there will be a separate

201
00:09:59,839 --> 00:10:05,029
presentation by balázs on updated mod

202
00:10:02,959 --> 00:10:07,250
revision handling I will talk about

203
00:10:05,029 --> 00:10:09,019
young packages after this and Rashied

204
00:10:07,250 --> 00:10:10,759
will talk about version selection so

205
00:10:09,019 --> 00:10:13,720
those three ones will be covered in more

206
00:10:10,759 --> 00:10:18,110
detail next slide please

207
00:10:13,720 --> 00:10:20,949
so the overall solution as we see it now

208
00:10:18,110 --> 00:10:24,170
is made up of five different parts the

209
00:10:20,949 --> 00:10:26,990
first one is in updated yang module

210
00:10:24,170 --> 00:10:28,250
revision handling so this is doesn't

211
00:10:26,990 --> 00:10:30,709
talk about semantic versioning at all

212
00:10:28,250 --> 00:10:33,709
but talks about yang module revisions

213
00:10:30,709 --> 00:10:36,410
and how they can allow non backwards

214
00:10:33,709 --> 00:10:38,239
compatible changes and Express those and

215
00:10:36,410 --> 00:10:42,290
more branching and fixing other things

216
00:10:38,240 --> 00:10:44,149
related to that area there's a really

217
00:10:42,290 --> 00:10:46,129
just a semantic version number scheme

218
00:10:44,149 --> 00:10:48,709
that it sure could be described fairly

219
00:10:46,129 --> 00:10:51,100
abstractly that hasn't been written yet

220
00:10:48,709 --> 00:10:54,768
but we derived from the text from the

221
00:10:51,100 --> 00:10:57,439
previous one draft 30 over DT net mod

222
00:10:54,769 --> 00:11:00,239
yang Simba's eros eros or take the

223
00:10:57,439 --> 00:11:02,189
semantic versioning a definition from

224
00:11:00,239 --> 00:11:05,309
that draft you just extract that text

225
00:11:02,189 --> 00:11:07,799
and I'm putting in isolation so we'll do

226
00:11:05,309 --> 00:11:09,689
that in the next phase there's a version

227
00:11:07,799 --> 00:11:11,489
yank packages draft and this one was

228
00:11:09,689 --> 00:11:16,170
published this update was much before

229
00:11:11,489 --> 00:11:18,179
ITF 104 I need some changes to take into

230
00:11:16,170 --> 00:11:20,819
account the changes in the updated yang

231
00:11:18,179 --> 00:11:22,110
mode revision handling so I will present

232
00:11:20,819 --> 00:11:24,689
that one this time it wasn't presented

233
00:11:22,110 --> 00:11:28,769
in 104 and but there needs to be some

234
00:11:24,689 --> 00:11:30,719
updates to that there's also a draft for

235
00:11:28,769 --> 00:11:33,929
protocol operations for package version

236
00:11:30,720 --> 00:11:36,809
selection so that's draft Wilson Ahmad

237
00:11:33,929 --> 00:11:39,899
yang vs. election 0/0 again that one was

238
00:11:36,809 --> 00:11:42,509
published before 104 Rashad will be

239
00:11:39,899 --> 00:11:44,309
talking about that so again that is sort

240
00:11:42,509 --> 00:11:46,860
of quite early draft we expect there to

241
00:11:44,309 --> 00:11:48,929
be more substantial changes to that and

242
00:11:46,860 --> 00:11:52,429
then the final part of this whole puzzle

243
00:11:48,929 --> 00:11:55,079
we think he's tolling related to doing

244
00:11:52,429 --> 00:11:58,379
schema comparisons between either a

245
00:11:55,079 --> 00:12:00,508
module by module basis all you group a

246
00:11:58,379 --> 00:12:03,689
set of modules together into one is yang

247
00:12:00,509 --> 00:12:06,059
packages to actually version and be able

248
00:12:03,689 --> 00:12:08,368
to compare two schemas and report at the

249
00:12:06,059 --> 00:12:10,379
schema level what's different or maybe

250
00:12:08,369 --> 00:12:12,809
on a per leaf node base of data node

251
00:12:10,379 --> 00:12:16,019
basis what's changed between those two

252
00:12:12,809 --> 00:12:17,399
schemas so that work is on is our least

253
00:12:16,019 --> 00:12:19,230
lowest priority at the moment we're to

254
00:12:17,399 --> 00:12:24,689
try and get the other work out the way

255
00:12:19,230 --> 00:12:26,610
first so next slide please okay can you

256
00:12:24,689 --> 00:12:30,049
talk about if there's any significance

257
00:12:26,610 --> 00:12:32,669
that the naming of the document I notice

258
00:12:30,049 --> 00:12:42,689
go through some transformations from

259
00:12:32,669 --> 00:12:44,279
version design team only well I think

260
00:12:42,689 --> 00:12:46,349
probably not at this stage the ones that

261
00:12:44,279 --> 00:12:48,600
came out of the Verde T the design team

262
00:12:46,350 --> 00:12:52,860
obviously have the Verde T prefix the

263
00:12:48,600 --> 00:12:55,379
young version yanked packages and the

264
00:12:52,860 --> 00:12:57,209
packaged version selection were not work

265
00:12:55,379 --> 00:12:58,739
there was output from the design team

266
00:12:57,209 --> 00:13:02,399
there in need to individual drafts that

267
00:12:58,739 --> 00:13:05,160
I wrote but I that's not because the

268
00:13:02,399 --> 00:13:06,480
design team doesn't align necessarily

269
00:13:05,160 --> 00:13:08,160
with that direction I don't think it was

270
00:13:06,480 --> 00:13:10,380
just more that that's when they produced

271
00:13:08,160 --> 00:13:12,990
the proposal later on here

272
00:13:10,380 --> 00:13:15,240
is for the design team to hopefully pick

273
00:13:12,990 --> 00:13:17,250
up those documents and work on them as

274
00:13:15,240 --> 00:13:18,420
design team documents that's the plan if

275
00:13:17,250 --> 00:13:21,750
that's okay

276
00:13:18,420 --> 00:13:24,689
the name doesn't it's a file name so it

277
00:13:21,750 --> 00:13:26,940
doesn't really matter but whether we

278
00:13:24,690 --> 00:13:29,280
have a complete solution from the design

279
00:13:26,940 --> 00:13:32,340
team or a partial solution I think does

280
00:13:29,280 --> 00:13:34,020
matter and we really are looking the

281
00:13:32,340 --> 00:13:35,910
chairs are really hoping to get a

282
00:13:34,020 --> 00:13:37,650
complete solution from the design team

283
00:13:35,910 --> 00:13:40,380
yeah and if for some reason a design

284
00:13:37,650 --> 00:13:42,990
team didn't feel that that was a a noble

285
00:13:40,380 --> 00:13:48,600
goal we should you talk about that so

286
00:13:42,990 --> 00:13:50,790
it's great to hear your plan so yeah

287
00:13:48,600 --> 00:13:51,270
it's one card they're like one comment

288
00:13:50,790 --> 00:13:53,160
on that

289
00:13:51,270 --> 00:13:56,160
not everyone the design team believes

290
00:13:53,160 --> 00:13:59,280
that the version selection is required I

291
00:13:56,160 --> 00:14:01,860
would say so that's the one we're not

292
00:13:59,280 --> 00:14:03,540
going to redo des Kate are our

293
00:14:01,860 --> 00:14:05,280
requirements and that it's in their

294
00:14:03,540 --> 00:14:13,020
requirements yeah I'm sorry that's one

295
00:14:05,280 --> 00:14:15,150
so you know good so of the first of

296
00:14:13,020 --> 00:14:16,829
those five drafts the updated yang

297
00:14:15,150 --> 00:14:18,990
module revision handling this is the one

298
00:14:16,830 --> 00:14:20,310
there's a more detailed talk on this by

299
00:14:18,990 --> 00:14:22,470
launch we'll cover all of the different

300
00:14:20,310 --> 00:14:24,569
parts of this in a lot more detail so

301
00:14:22,470 --> 00:14:27,060
this is just a one slide summary of what

302
00:14:24,570 --> 00:14:29,700
we've done and what the draft covers and

303
00:14:27,060 --> 00:14:32,880
you have the core enhancements to Yang

304
00:14:29,700 --> 00:14:36,510
or to allow but not necessarily

305
00:14:32,880 --> 00:14:40,050
encourage nonlinear module development

306
00:14:36,510 --> 00:14:42,090
eg for bug fixes so we allow we allow

307
00:14:40,050 --> 00:14:45,750
some sort of branching to occur in yang

308
00:14:42,090 --> 00:14:47,160
module history and to document when not

309
00:14:45,750 --> 00:14:49,470
on backwards compatible changes have

310
00:14:47,160 --> 00:14:51,300
occurred in the revision history so

311
00:14:49,470 --> 00:14:52,830
we're not saying that we're not

312
00:14:51,300 --> 00:14:55,560
encouraging that people should do this

313
00:14:52,830 --> 00:14:56,910
but even when they do occur at least be

314
00:14:55,560 --> 00:14:59,939
able to describe that so that when

315
00:14:56,910 --> 00:15:02,010
clients when people read these documents

316
00:14:59,940 --> 00:15:04,140
and or client tools are processing them

317
00:15:02,010 --> 00:15:08,310
they can know where and Nan box

318
00:15:04,140 --> 00:15:11,100
classical changes have occurred the next

319
00:15:08,310 --> 00:15:13,500
part of that is that we we still

320
00:15:11,100 --> 00:15:15,300
identified module revisions uniquely

321
00:15:13,500 --> 00:15:17,730
using the revision date so nothing's

322
00:15:15,300 --> 00:15:21,270
change from what we have today but we

323
00:15:17,730 --> 00:15:23,260
allow a new freeform text label to be

324
00:15:21,270 --> 00:15:27,370
associated with a revision

325
00:15:23,260 --> 00:15:30,220
and this text label can be used

326
00:15:27,370 --> 00:15:32,770
effectively to overlay like a semantic

327
00:15:30,220 --> 00:15:33,970
versioning scheme for example or some

328
00:15:32,770 --> 00:15:35,680
other scheme that somebody else comes up

329
00:15:33,970 --> 00:15:37,420
to it's not we're not defining within

330
00:15:35,680 --> 00:15:41,709
this document what the form of those

331
00:15:37,420 --> 00:15:45,069
text labels can be but we do allow these

332
00:15:41,710 --> 00:15:46,720
revision labels to be used when in the

333
00:15:45,070 --> 00:15:49,630
file name for example in replace for a

334
00:15:46,720 --> 00:15:51,970
revision date and the import by derived

335
00:15:49,630 --> 00:15:56,170
revision again can also use this label

336
00:15:51,970 --> 00:15:56,800
as well we define a new version of

337
00:15:56,170 --> 00:15:59,709
import

338
00:15:56,800 --> 00:16:02,920
so today yang has an import that will

339
00:15:59,710 --> 00:16:04,540
choose any revision or has an import

340
00:16:02,920 --> 00:16:07,390
that chooses a very specific revision

341
00:16:04,540 --> 00:16:09,699
and one of those is two general ones to

342
00:16:07,390 --> 00:16:11,530
specific so we are introducing one

343
00:16:09,700 --> 00:16:13,990
that's import by revision data or

344
00:16:11,530 --> 00:16:16,600
derived and that effectively you will

345
00:16:13,990 --> 00:16:18,790
find you a revision that is either that

346
00:16:16,600 --> 00:16:20,800
or that's within its history and so

347
00:16:18,790 --> 00:16:23,079
that's the attention there is if a

348
00:16:20,800 --> 00:16:25,329
module that you're importing has a new

349
00:16:23,080 --> 00:16:27,280
container added into it or new and you

350
00:16:25,330 --> 00:16:28,990
know that you're referencing then you

351
00:16:27,280 --> 00:16:30,939
can put dependency on that revision or

352
00:16:28,990 --> 00:16:34,830
later so you put in that source code

353
00:16:30,940 --> 00:16:36,460
dependency we define

354
00:16:34,830 --> 00:16:38,230
backwards-compatible versus non

355
00:16:36,460 --> 00:16:39,520
backwards-compatible changes and these

356
00:16:38,230 --> 00:16:41,110
are actually the non

357
00:16:39,520 --> 00:16:42,460
backwards-compatible change so bogus

358
00:16:41,110 --> 00:16:46,360
collateral changes are very close to

359
00:16:42,460 --> 00:16:48,400
what is defined in our c 7950 with some

360
00:16:46,360 --> 00:16:51,520
tweaks and the non box-cutter ones

361
00:16:48,400 --> 00:16:53,980
fairly obvious from that we clarify and

362
00:16:51,520 --> 00:16:56,890
prove yang status handling so in

363
00:16:53,980 --> 00:16:58,360
particular we clarified the deprecated

364
00:16:56,890 --> 00:17:01,780
means you still have to implement the

365
00:16:58,360 --> 00:17:03,310
node or otherwise and use deviations to

366
00:17:01,780 --> 00:17:05,230
indicate you're not implementing it and

367
00:17:03,310 --> 00:17:07,659
obsolete means you don't implement the

368
00:17:05,230 --> 00:17:09,880
node and then finally we've added some

369
00:17:07,660 --> 00:17:11,560
updates and guidelines for how you

370
00:17:09,880 --> 00:17:18,030
update yang word rules based on these

371
00:17:11,560 --> 00:17:20,319
updated rules next slide please

372
00:17:18,030 --> 00:17:21,970
so the second draft

373
00:17:20,319 --> 00:17:23,500
and this one's not been written yet and

374
00:17:21,970 --> 00:17:25,449
this is the semantic version number

375
00:17:23,500 --> 00:17:27,849
scheme so I'm just saying what the plan

376
00:17:25,449 --> 00:17:31,300
is do it and we tend to to do this over

377
00:17:27,849 --> 00:17:34,000
the next window next four months is to

378
00:17:31,300 --> 00:17:36,430
define a semantic versioning scheme that

379
00:17:34,000 --> 00:17:38,980
allows a bug fixes to release software

380
00:17:36,430 --> 00:17:41,290
released software assets so effectively

381
00:17:38,980 --> 00:17:44,320
it's what's already documented the

382
00:17:41,290 --> 00:17:49,540
algorithm in the draft DT net mod yang

383
00:17:44,320 --> 00:17:53,409
symbol 0 0 and it's a version of semver

384
00:17:49,540 --> 00:17:56,350
2 0 0 but with the ability to add these

385
00:17:53,410 --> 00:17:59,410
bug fixes in to the released assets when

386
00:17:56,350 --> 00:18:01,990
necessary the main changes to is that

387
00:17:59,410 --> 00:18:03,970
doesn't actually now need to define what

388
00:18:01,990 --> 00:18:06,250
constitutes a backwards compatible or

389
00:18:03,970 --> 00:18:09,730
non box-cutter will change that would be

390
00:18:06,250 --> 00:18:12,460
assumed to be defined outside this and

391
00:18:09,730 --> 00:18:14,500
this is this is what will be used we

392
00:18:12,460 --> 00:18:17,290
expect this is some people as a revision

393
00:18:14,500 --> 00:18:19,090
label so effectively the revision labels

394
00:18:17,290 --> 00:18:20,830
you have will use this semantic

395
00:18:19,090 --> 00:18:23,530
versioning scheme so you end up with

396
00:18:20,830 --> 00:18:26,260
having semantic version for your young

397
00:18:23,530 --> 00:18:28,840
modules and then again it's worth

398
00:18:26,260 --> 00:18:30,580
pointing out that in terms of this this

399
00:18:28,840 --> 00:18:32,740
versioning scheme is not going to be

400
00:18:30,580 --> 00:18:34,360
tied to yang so although it will be

401
00:18:32,740 --> 00:18:36,100
defined or have some references to the

402
00:18:34,360 --> 00:18:37,959
and models it could be used anywhere

403
00:18:36,100 --> 00:18:40,270
where you want to do this sort of

404
00:18:37,960 --> 00:18:41,830
semantic versioning of assets but you

405
00:18:40,270 --> 00:18:44,470
want to have a bit more flexibility to

406
00:18:41,830 --> 00:18:49,439
be putting be to put bug fixes in two

407
00:18:44,470 --> 00:18:49,440
older released code or released api's

408
00:18:49,680 --> 00:18:55,700
looks like so yang package

409
00:18:53,750 --> 00:18:58,460
again an overview I'm I've got with more

410
00:18:55,700 --> 00:19:00,920
detail on this later on so what is a

411
00:18:58,460 --> 00:19:03,680
yang package is identifying a set of

412
00:19:00,920 --> 00:19:06,320
yang modules and their dependency so

413
00:19:03,680 --> 00:19:09,130
it's a bit like taking Watson Yang

414
00:19:06,320 --> 00:19:11,750
library and putting it into a file or

415
00:19:09,130 --> 00:19:13,280
this one example but it's a bit more

416
00:19:11,750 --> 00:19:15,140
flexible than that so whereas Yang

417
00:19:13,280 --> 00:19:17,330
library will tell you what the schema is

418
00:19:15,140 --> 00:19:20,990
for a particular data store an entire

419
00:19:17,330 --> 00:19:23,330
device this allows you to do subsets of

420
00:19:20,990 --> 00:19:25,790
yang modules so bits of bits of stuff

421
00:19:23,330 --> 00:19:28,699
together and group them and the key

422
00:19:25,790 --> 00:19:30,560
thing here is that those packages can

423
00:19:28,700 --> 00:19:33,140
then be versioned in the same way that

424
00:19:30,560 --> 00:19:36,370
modules are being versions so rather

425
00:19:33,140 --> 00:19:38,840
than having each vendor implementing

426
00:19:36,370 --> 00:19:41,379
choosing exactly which module version

427
00:19:38,840 --> 00:19:43,520
module they want so every single

428
00:19:41,380 --> 00:19:45,680
language will they're implementing I

429
00:19:43,520 --> 00:19:48,190
think the use of packages could

430
00:19:45,680 --> 00:19:51,620
encourage people to have more

431
00:19:48,190 --> 00:19:53,060
commonality in what they implement so if

432
00:19:51,620 --> 00:19:55,550
you took the ITF young model for example

433
00:19:53,060 --> 00:19:58,220
you could have a package that defines

434
00:19:55,550 --> 00:19:59,510
the base models and types and things you

435
00:19:58,220 --> 00:20:01,060
could have separate package for routine

436
00:19:59,510 --> 00:20:04,070
you could have a separate package for

437
00:20:01,060 --> 00:20:06,530
VPN services for example and those would

438
00:20:04,070 --> 00:20:08,540
be versioned over time and so rather

439
00:20:06,530 --> 00:20:10,670
than somebody saying well I want this

440
00:20:08,540 --> 00:20:12,530
version this or this version of that you

441
00:20:10,670 --> 00:20:17,290
could choose something off that the

442
00:20:12,530 --> 00:20:17,290
history of those version packages yes

443
00:20:36,610 --> 00:20:42,860
yes yep it copes with that has

444
00:20:40,730 --> 00:20:44,690
dependencies between packages and you

445
00:20:42,860 --> 00:20:47,530
may have dependencies between packages

446
00:20:44,690 --> 00:20:47,530
that conflict and

447
00:20:49,149 --> 00:21:04,539
so the the solution here requires that

448
00:21:02,409 --> 00:21:06,339
you resolve those conflicts at the time

449
00:21:04,539 --> 00:21:09,070
you combine those two packages together

450
00:21:06,339 --> 00:21:11,739
into a into a combined package you have

451
00:21:09,070 --> 00:21:13,658
any conflicting module dependencies you

452
00:21:11,739 --> 00:21:20,889
have to resolve them explicitly say how

453
00:21:13,659 --> 00:21:22,089
they're resolved so yes in terms of

454
00:21:20,889 --> 00:21:24,519
packages that could be available offline

455
00:21:22,089 --> 00:21:26,769
using the yang instance data document

456
00:21:24,519 --> 00:21:29,379
they also the plan is to augment yang

457
00:21:26,769 --> 00:21:31,239
library so that rather than necessarily

458
00:21:29,379 --> 00:21:34,389
downloading the full module list off a

459
00:21:31,239 --> 00:21:35,889
device if you knew and expected what

460
00:21:34,389 --> 00:21:36,998
package version it's going to implement

461
00:21:35,889 --> 00:21:38,830
you can just check that it's

462
00:21:36,999 --> 00:21:41,440
implementing what you expect so make it

463
00:21:38,830 --> 00:21:43,539
an easier check for comments conformance

464
00:21:41,440 --> 00:21:44,799
wise and as I said there's a separate

465
00:21:43,539 --> 00:21:49,539
present presentation on this following

466
00:21:44,799 --> 00:21:54,219
later so that's what I cover now next

467
00:21:49,539 --> 00:21:55,960
slide so the fourth one is protocol

468
00:21:54,219 --> 00:21:58,479
operations for package version selection

469
00:21:55,960 --> 00:22:02,049
so one of the key aims of yang packages

470
00:21:58,479 --> 00:22:04,859
is to allow devices to potentially

471
00:22:02,049 --> 00:22:08,080
implement different versions of modules

472
00:22:04,859 --> 00:22:11,199
as cohesive sets and then to allow

473
00:22:08,080 --> 00:22:13,089
clients to select which ones to use so

474
00:22:11,200 --> 00:22:15,700
this could be done where they're

475
00:22:13,089 --> 00:22:18,009
choosing between some different sets of

476
00:22:15,700 --> 00:22:20,919
vendor modules or it might be they want

477
00:22:18,009 --> 00:22:22,929
to choose to use the ITF yang models or

478
00:22:20,919 --> 00:22:27,219
a particular version of the open config

479
00:22:22,929 --> 00:22:28,839
yeah models as examples and so the

480
00:22:27,219 --> 00:22:32,259
packages are identifying those sets of

481
00:22:28,839 --> 00:22:34,719
modules and then using our pcs to select

482
00:22:32,259 --> 00:22:36,309
which ones to use and this could be the

483
00:22:34,719 --> 00:22:38,409
case that the server only allows you to

484
00:22:36,309 --> 00:22:39,700
support implementing one particular

485
00:22:38,409 --> 00:22:41,739
packaged version for the entire

486
00:22:39,700 --> 00:22:44,700
management interface or it may be that

487
00:22:41,739 --> 00:22:47,139
some devices allow you to have support

488
00:22:44,700 --> 00:22:49,690
multiple different packaged versions and

489
00:22:47,139 --> 00:22:52,478
to select those depending on maybe the

490
00:22:49,690 --> 00:22:54,519
session that's being used so again

491
00:22:52,479 --> 00:22:56,649
there's another presentation covering

492
00:22:54,519 --> 00:22:57,999
this but as I say here is failure the

493
00:22:56,649 --> 00:23:00,070
early draft there will be more changes

494
00:22:57,999 --> 00:23:02,470
in here but really it's just the ideas

495
00:23:00,070 --> 00:23:04,450
are being presented

496
00:23:02,470 --> 00:23:08,300
and next slide please

497
00:23:04,450 --> 00:23:10,160
and then the last one so there's no

498
00:23:08,300 --> 00:23:12,080
draft written yet they slightly lower

499
00:23:10,160 --> 00:23:15,290
priority I do think it's a key part of

500
00:23:12,080 --> 00:23:18,379
this set and that's to define an

501
00:23:15,290 --> 00:23:20,420
algorithm to compare to schema trees the

502
00:23:18,380 --> 00:23:22,370
detects backwards-compatible versus non

503
00:23:20,420 --> 00:23:24,290
backwards-compatible changes so it looks

504
00:23:22,370 --> 00:23:27,229
through those two schemas and says that

505
00:23:24,290 --> 00:23:29,930
these are where the changes are so P

506
00:23:27,230 --> 00:23:32,330
yang already does some of this the

507
00:23:29,930 --> 00:23:33,980
result could then be given at the schema

508
00:23:32,330 --> 00:23:36,980
level or it could be given on a data

509
00:23:33,980 --> 00:23:39,620
node level and it could be also taken to

510
00:23:36,980 --> 00:23:41,240
account features or deviations or the

511
00:23:39,620 --> 00:23:44,389
subset of the schema actually being used

512
00:23:41,240 --> 00:23:47,510
by by the operator so if they are only

513
00:23:44,390 --> 00:23:48,559
using no 1/3 of a particular protocol

514
00:23:47,510 --> 00:23:51,350
module they're not using these options

515
00:23:48,559 --> 00:23:54,260
then when you're comparing to see what's

516
00:23:51,350 --> 00:23:55,790
changed between two versions of that

517
00:23:54,260 --> 00:23:57,920
module you may not care if stuff has

518
00:23:55,790 --> 00:24:00,760
changed in the stuff you're not using so

519
00:23:57,920 --> 00:24:02,960
again be able to compare the schemas and

520
00:24:00,760 --> 00:24:05,150
subset it in to the stuff you care about

521
00:24:02,960 --> 00:24:09,440
I think gives you almost like the

522
00:24:05,150 --> 00:24:12,620
perfect answer there is some some cases

523
00:24:09,440 --> 00:24:14,360
where this is difficult to do you can't

524
00:24:12,620 --> 00:24:16,189
well known it's very hard to have

525
00:24:14,360 --> 00:24:17,780
tolling that would check the description

526
00:24:16,190 --> 00:24:20,270
statements and find out whether there's

527
00:24:17,780 --> 00:24:22,490
some change in the semantics behavior of

528
00:24:20,270 --> 00:24:25,400
a data node until our machine learning

529
00:24:22,490 --> 00:24:26,809
gets a bit better XPath expressions and

530
00:24:25,400 --> 00:24:28,340
regular expressions in other cases where

531
00:24:26,809 --> 00:24:30,559
it's very hard to see what has changed

532
00:24:28,340 --> 00:24:31,820
it's very hard to tell if it's a

533
00:24:30,559 --> 00:24:34,340
backwards compatible change that's been

534
00:24:31,820 --> 00:24:36,500
made in those cases so I think there's

535
00:24:34,340 --> 00:24:39,080
consideration there as to whether we use

536
00:24:36,500 --> 00:24:41,750
some form of annotation potentially to

537
00:24:39,080 --> 00:24:43,340
mark those cases where it might look

538
00:24:41,750 --> 00:24:46,309
like it's about as compared to a change

539
00:24:43,340 --> 00:24:47,689
but it's not or vice versa it looks like

540
00:24:46,309 --> 00:24:50,660
a non box collateral change but actually

541
00:24:47,690 --> 00:24:56,570
it's backwards compatible any questions

542
00:24:50,660 --> 00:25:02,269
on this one okay

543
00:24:56,570 --> 00:25:04,158
come on automatic sliders is so so this

544
00:25:02,269 --> 00:25:06,019
is just a chart I'm not sure how

545
00:25:04,159 --> 00:25:07,039
accurate this is it it's effective

546
00:25:06,019 --> 00:25:10,190
trying to show you the dependencies

547
00:25:07,039 --> 00:25:13,190
between the the modules between the the

548
00:25:10,190 --> 00:25:16,399
drafts with the darker blue arrows

549
00:25:13,190 --> 00:25:18,710
showing sort of proper dependencies and

550
00:25:16,399 --> 00:25:21,768
then the lighter colored arrows sort of

551
00:25:18,710 --> 00:25:23,630
showing user level dependency so where

552
00:25:21,769 --> 00:25:25,009
you may choose to use semantic

553
00:25:23,630 --> 00:25:26,659
versioning scheme for example but

554
00:25:25,009 --> 00:25:29,179
there's not actually a dependency

555
00:25:26,659 --> 00:25:31,309
between the drafts and you can see that

556
00:25:29,179 --> 00:25:34,129
this module the module revision handling

557
00:25:31,309 --> 00:25:37,100
sit to the top and pari has a key

558
00:25:34,129 --> 00:25:38,389
dependencies then everything that might

559
00:25:37,100 --> 00:25:40,879
want to use semantic versioning scheme

560
00:25:38,389 --> 00:25:42,408
'obviously has dependency on that but

561
00:25:40,879 --> 00:25:45,289
other schemes could be used it's just

562
00:25:42,409 --> 00:25:46,700
one choice the packages draft depends on

563
00:25:45,289 --> 00:25:48,049
the module versioning and the package

564
00:25:46,700 --> 00:25:50,149
version selection of C depends on that

565
00:25:48,049 --> 00:25:52,549
one and then the schema comparison

566
00:25:50,149 --> 00:25:54,649
touring depends on packages if that's

567
00:25:52,549 --> 00:25:58,158
what you're comparing or modules if

568
00:25:54,649 --> 00:26:02,000
that's what you're comparing now next

569
00:25:58,159 --> 00:26:04,340
slide and that's it for me so any

570
00:26:02,000 --> 00:26:06,379
questions on that overview section at

571
00:26:04,340 --> 00:26:08,658
all in terms of the sort of overall

572
00:26:06,379 --> 00:26:19,639
picture of how the solution fits

573
00:26:08,659 --> 00:26:36,019
together you have any examples examples

574
00:26:19,639 --> 00:26:40,309
of the first the first one versioning

575
00:26:36,019 --> 00:26:41,750
the Motorama version right and we're

576
00:26:40,309 --> 00:26:44,539
using revisions so if you have an

577
00:26:41,750 --> 00:26:48,440
example the new revision format looks

578
00:26:44,539 --> 00:26:51,049
like yes in the in the next so the

579
00:26:48,440 --> 00:26:52,970
module revision handling draft will be

580
00:26:51,049 --> 00:26:54,230
covered in detail next so that covers

581
00:26:52,970 --> 00:26:56,809
all that and a lot more detail of those

582
00:26:54,230 --> 00:26:59,830
examples in there I will talk about the

583
00:26:56,809 --> 00:27:01,908
packages version schema draft after that

584
00:26:59,830 --> 00:27:03,710
Rashaad will talk about the package

585
00:27:01,909 --> 00:27:05,809
version selection the two that we're not

586
00:27:03,710 --> 00:27:07,370
covering any more detail today is the

587
00:27:05,809 --> 00:27:08,920
semantic versioning scheme that's based

588
00:27:07,370 --> 00:27:11,020
on what was there before we have

589
00:27:08,920 --> 00:27:12,190
written in yet and the schema comparison

590
00:27:11,020 --> 00:27:19,600
told him that we haven't really looked

591
00:27:12,190 --> 00:27:22,060
at in great detail with you the design

592
00:27:19,600 --> 00:27:26,080
team really want the working room today

593
00:27:22,060 --> 00:27:28,480
I think what I would like to know is

594
00:27:26,080 --> 00:27:31,600
where the people in this room think that

595
00:27:28,480 --> 00:27:33,640
as a sort of solution space of solving

596
00:27:31,600 --> 00:27:35,560
the entire problem is does this look

597
00:27:33,640 --> 00:27:38,530
like the right set of things that we are

598
00:27:35,560 --> 00:27:39,940
solving and does it look like it covers

599
00:27:38,530 --> 00:27:43,180
all the pieces you would expect it to

600
00:27:39,940 --> 00:27:44,760
cover does it look like it's morally the

601
00:27:43,180 --> 00:27:46,900
right approach

602
00:27:44,760 --> 00:27:48,670
so obviously they've become some

603
00:27:46,900 --> 00:27:52,680
individual drafts and things but does

604
00:27:48,670 --> 00:27:52,680
this look like overall the right thing

605
00:27:59,190 --> 00:28:05,830
then work is needed exactly all of this

606
00:28:03,040 --> 00:28:12,010
with you show there I am I'm not hundred

607
00:28:05,830 --> 00:28:15,300
percent sure that maybe the scope is too

608
00:28:12,010 --> 00:28:17,980
much over there trying to put it but

609
00:28:15,300 --> 00:28:21,760
what they see as a problem when doing

610
00:28:17,980 --> 00:28:23,500
yank are the dependencies and figuring

611
00:28:21,760 --> 00:28:25,390
out what are my dependencies what they

612
00:28:23,500 --> 00:28:29,650
have flawed in order to enable the

613
00:28:25,390 --> 00:28:31,780
service and we are planning to be able

614
00:28:29,650 --> 00:28:35,080
to create abstractions at different

615
00:28:31,780 --> 00:28:36,490
layers that going to change where

616
00:28:35,080 --> 00:28:38,679
they're happening and be able to take

617
00:28:36,490 --> 00:28:40,510
into the content and maybe even

618
00:28:38,680 --> 00:28:42,580
prepackaged those things up and saying

619
00:28:40,510 --> 00:28:44,920
oh here's my whole package and and it's

620
00:28:42,580 --> 00:28:48,490
it's getting deployed you can unit

621
00:28:44,920 --> 00:28:50,830
tested etc it is very helpful exactly

622
00:28:48,490 --> 00:28:52,690
how to do that that's a question not

623
00:28:50,830 --> 00:28:58,570
because there many of the issues that

624
00:28:52,690 --> 00:29:04,720
you're just beginning to the stuff in

625
00:28:58,570 --> 00:29:06,250
the other comments so I think I'm

626
00:29:04,720 --> 00:29:07,900
bashing them up they start at the end

627
00:29:06,250 --> 00:29:12,280
but I think the plan will be to try and

628
00:29:07,900 --> 00:29:14,680
continue down this track effectively and

629
00:29:12,280 --> 00:29:16,860
try and get these bits the doctors as we

630
00:29:14,680 --> 00:29:16,860
go along

631
00:29:17,640 --> 00:29:22,090
earlier we're looking for the design

632
00:29:20,080 --> 00:29:22,480
team to come up with a full and set of

633
00:29:22,090 --> 00:29:24,010
it

634
00:29:22,480 --> 00:29:25,929
documents that answers all the

635
00:29:24,010 --> 00:29:28,450
requirements and then bring them to the

636
00:29:25,929 --> 00:29:31,179
working group for further option call so

637
00:29:28,450 --> 00:29:32,559
it's important to make sure that the

638
00:29:31,179 --> 00:29:35,799
working group is aware of what's going

639
00:29:32,559 --> 00:29:39,250
on in the design team and is generally

640
00:29:35,799 --> 00:29:40,690
aligned with the answers once once they

641
00:29:39,250 --> 00:29:42,010
become working group documents we're

642
00:29:40,690 --> 00:29:44,140
going to follow a normal working group

643
00:29:42,010 --> 00:29:45,490
process which is everyone in the working

644
00:29:44,140 --> 00:29:47,530
group has it will have an opportunity to

645
00:29:45,490 --> 00:29:51,520
provide equipment influence so it's not

646
00:29:47,530 --> 00:29:53,470
that at adoption we're done it's that we

647
00:29:51,520 --> 00:29:57,070
have a focus team that's trying to give

648
00:29:53,470 --> 00:29:59,950
us a starting point don't you blurt

649
00:29:57,070 --> 00:30:01,510
about the pre-comp so when you're the

650
00:29:59,950 --> 00:30:02,950
semantic version sounds great I was

651
00:30:01,510 --> 00:30:04,299
always wondering why it didn't start out

652
00:30:02,950 --> 00:30:07,210
that way so it that's not great

653
00:30:04,299 --> 00:30:09,520
when you're talking about visualizing

654
00:30:07,210 --> 00:30:11,080
the difference between schemas would it

655
00:30:09,520 --> 00:30:12,250
be the resolve schema

656
00:30:11,080 --> 00:30:13,960
once you've resolved all the groups

657
00:30:12,250 --> 00:30:18,580
because usually that's what consumers

658
00:30:13,960 --> 00:30:24,280
baby eyes are mentally visualize or is

659
00:30:18,580 --> 00:30:26,649
it visualizing I think I think both is

660
00:30:24,280 --> 00:30:29,530
answer so I think you're comparing a

661
00:30:26,650 --> 00:30:32,200
module itself then you might do it on

662
00:30:29,530 --> 00:30:33,460
the module text but even even then

663
00:30:32,200 --> 00:30:35,049
actually I think you have to resolve the

664
00:30:33,460 --> 00:30:36,549
sub modules and allow groupings and

665
00:30:35,049 --> 00:30:40,389
things to move around so I think it's

666
00:30:36,549 --> 00:30:42,700
sort of the the resolved schema to some

667
00:30:40,390 --> 00:30:44,830
level but I might not be fully resolving

668
00:30:42,700 --> 00:30:46,990
all dependencies it might be this module

669
00:30:44,830 --> 00:30:48,790
with dependency still hanging in open or

670
00:30:46,990 --> 00:30:50,650
it might be the entire scheme like a

671
00:30:48,790 --> 00:30:53,260
yang package you take the whole package

672
00:30:50,650 --> 00:30:55,179
resolve everything internally and it's a

673
00:30:53,260 --> 00:30:58,090
complete package you then then look at

674
00:30:55,179 --> 00:31:00,010
the actual abstract syntax tree for the

675
00:30:58,090 --> 00:31:01,780
yang effectively constructed and could

676
00:31:00,010 --> 00:31:11,910
be comparing those on a node by node

677
00:31:01,780 --> 00:31:11,910
basis okay I think it's time for blush

678
00:31:21,460 --> 00:31:30,050
so this draft is there let's say the

679
00:31:25,490 --> 00:31:32,690
main out main output at this point we

680
00:31:30,050 --> 00:31:36,680
derived it from the complete solution we

681
00:31:32,690 --> 00:31:39,440
try to separate parts of it and we

682
00:31:36,680 --> 00:31:44,270
believe that we had discussions on the

683
00:31:39,440 --> 00:31:48,500
last IDF on the on the meeting but also

684
00:31:44,270 --> 00:31:51,889
outside afterwards with many people we

685
00:31:48,500 --> 00:31:56,120
believe that all the all the main

686
00:31:51,890 --> 00:31:59,630
comments were included one point is that

687
00:31:56,120 --> 00:32:01,969
this applies to yang modules so sub

688
00:31:59,630 --> 00:32:04,430
modules they are very closely connected

689
00:32:01,970 --> 00:32:06,530
to module 2 the modules themselves so

690
00:32:04,430 --> 00:32:09,520
they should just follow the modules

691
00:32:06,530 --> 00:32:09,520
themselves next please

692
00:32:10,630 --> 00:32:19,610
this updates a number of current RFC's

693
00:32:14,860 --> 00:32:22,959
one is the yang one that one because the

694
00:32:19,610 --> 00:32:25,370
update rules are sometimes not not

695
00:32:22,960 --> 00:32:30,380
specific enough but sometimes they are

696
00:32:25,370 --> 00:32:31,939
too strict those updates yang library

697
00:32:30,380 --> 00:32:34,340
because the versioning provides

698
00:32:31,940 --> 00:32:37,610
additional information that we want to

699
00:32:34,340 --> 00:32:39,290
include there and also the authoring

700
00:32:37,610 --> 00:32:42,740
guidelines for example hydrogen

701
00:32:39,290 --> 00:32:46,040
information should always be present and

702
00:32:42,740 --> 00:32:53,330
and life cycles of the different schema

703
00:32:46,040 --> 00:32:58,129
notes should be also included so what do

704
00:32:53,330 --> 00:33:00,860
we have here we have an extension that

705
00:32:58,130 --> 00:33:04,190
will go into the revision statement and

706
00:33:00,860 --> 00:33:08,179
include indicates that this revision of

707
00:33:04,190 --> 00:33:11,140
the yang module is not known backwards

708
00:33:08,180 --> 00:33:15,290
compatible and BC to a previous version

709
00:33:11,140 --> 00:33:19,550
if if it's not there then it's assumed

710
00:33:15,290 --> 00:33:22,480
or it must be backwards compatible we

711
00:33:19,550 --> 00:33:25,610
also explicitly state that we allow

712
00:33:22,480 --> 00:33:29,380
nonlinear yang module development so

713
00:33:25,610 --> 00:33:32,300
branching and updating previous

714
00:33:29,380 --> 00:33:37,550
previous revisions which was not

715
00:33:32,300 --> 00:33:41,290
forbidden in 7950 but many people assume

716
00:33:37,550 --> 00:33:44,450
that they are there we will have linear

717
00:33:41,290 --> 00:33:47,930
development only we introduced to

718
00:33:44,450 --> 00:33:51,890
revision labels because many people many

719
00:33:47,930 --> 00:33:56,080
companies have nice versioning scheme

720
00:33:51,890 --> 00:33:58,730
Sykes same wear or some other ones and

721
00:33:56,080 --> 00:34:01,939
they would like that information that

722
00:33:58,730 --> 00:34:04,490
gives a short compatibility information

723
00:34:01,940 --> 00:34:08,240
short history information in some form

724
00:34:04,490 --> 00:34:11,030
to be included provision or derived was

725
00:34:08,239 --> 00:34:14,449
also mentioned earlier so that states

726
00:34:11,030 --> 00:34:19,160
that you can import something that is

727
00:34:14,449 --> 00:34:21,710
newer than whatever mode module date you

728
00:34:19,159 --> 00:34:24,109
chose but it can't be just a date

729
00:34:21,710 --> 00:34:28,010
because of the nonlinear development

730
00:34:24,110 --> 00:34:29,570
anymore we had to update what backward

731
00:34:28,010 --> 00:34:33,290
compatible and the unknown backward

732
00:34:29,570 --> 00:34:35,980
compatible changes mean because we want

733
00:34:33,290 --> 00:34:38,690
to accept some NBC changes and

734
00:34:35,980 --> 00:34:43,400
especially the status related changes

735
00:34:38,690 --> 00:34:46,639
were not clear in 79 15 we have some

736
00:34:43,400 --> 00:34:50,960
additions for status handling and yang

737
00:34:46,639 --> 00:34:53,469
library are updates as we mentioned next

738
00:34:50,960 --> 00:34:53,470
slide please

739
00:34:53,739 --> 00:35:00,439
so maybe the most important part is here

740
00:34:57,350 --> 00:35:02,540
the red thing we have and BC changes

741
00:35:00,440 --> 00:35:05,330
that indicates inside the revision

742
00:35:02,540 --> 00:35:07,640
information that this revision made are

743
00:35:05,330 --> 00:35:09,290
incompatible and on backwards-compatible

744
00:35:07,640 --> 00:35:11,540
change to compare to the previous

745
00:35:09,290 --> 00:35:13,490
revision and it's always in this full

746
00:35:11,540 --> 00:35:17,180
list of revision statements the previous

747
00:35:13,490 --> 00:35:19,700
revision that means that you should not

748
00:35:17,180 --> 00:35:21,859
remove revision statements maybe you can

749
00:35:19,700 --> 00:35:23,419
remove the description part or shorten

750
00:35:21,860 --> 00:35:26,570
the description parts but you should not

751
00:35:23,420 --> 00:35:28,760
remove their revision statement itself

752
00:35:26,570 --> 00:35:33,230
because at that point you lose this

753
00:35:28,760 --> 00:35:36,950
information also you should add a

754
00:35:33,230 --> 00:35:41,190
revision statement all the time I think

755
00:35:36,950 --> 00:35:44,589
it's not mandatory in 790 50 every time

756
00:35:41,190 --> 00:35:46,710
if when at the Green Point where we just

757
00:35:44,590 --> 00:35:52,270
added functionality we don't have this

758
00:35:46,710 --> 00:35:55,530
revision extension this will allow

759
00:35:52,270 --> 00:35:59,290
normal in their development so here the

760
00:35:55,530 --> 00:36:01,480
February first revolution date was also

761
00:35:59,290 --> 00:36:02,830
developed because whatever customer

762
00:36:01,480 --> 00:36:06,900
didn't want to upgrade to the new

763
00:36:02,830 --> 00:36:09,460
version and then we have two branches

764
00:36:06,900 --> 00:36:11,369
and there's actually no limit of

765
00:36:09,460 --> 00:36:14,860
branching so you can branch the branch

766
00:36:11,369 --> 00:36:17,260
and then again and again do an infinite

767
00:36:14,860 --> 00:36:22,090
tree although that's not a very good

768
00:36:17,260 --> 00:36:26,619
practice but if business needs force you

769
00:36:22,090 --> 00:36:29,260
you can do that because if you look at

770
00:36:26,619 --> 00:36:31,840
it every yank file in itself is linear

771
00:36:29,260 --> 00:36:34,230
but the yang module might have multiple

772
00:36:31,840 --> 00:36:39,850
files that go on different branches in

773
00:36:34,230 --> 00:36:42,010
on this tree we don't this boss this is

774
00:36:39,850 --> 00:36:45,400
a possibility that can be misused we

775
00:36:42,010 --> 00:36:51,480
don't recommend arbitrary branching

776
00:36:45,400 --> 00:36:54,430
especially not for as the earth and each

777
00:36:51,480 --> 00:36:58,150
yang module the text by itself will

778
00:36:54,430 --> 00:37:01,839
represent one route from the leaf of

779
00:36:58,150 --> 00:37:05,520
this tree up to maybe the root or at

780
00:37:01,840 --> 00:37:05,520
least to some level next please

781
00:37:06,390 --> 00:37:13,299
so we have revision labels because the

782
00:37:09,550 --> 00:37:16,240
NBC only tells you that yes we have and

783
00:37:13,300 --> 00:37:19,570
change but to actually understand that

784
00:37:16,240 --> 00:37:21,879
you have to parse the module already and

785
00:37:19,570 --> 00:37:24,280
look up all the revision statements

786
00:37:21,880 --> 00:37:26,290
which is quite a bit of work so as an

787
00:37:24,280 --> 00:37:29,380
alternative you can have revision label

788
00:37:26,290 --> 00:37:31,810
that contains similar information this

789
00:37:29,380 --> 00:37:34,750
draft does not say what is in the

790
00:37:31,810 --> 00:37:37,180
revision label these are examples and we

791
00:37:34,750 --> 00:37:40,359
can will have multiple drafts or at

792
00:37:37,180 --> 00:37:44,980
least one drafts about at the same where

793
00:37:40,359 --> 00:37:47,410
can be in the revision label the format

794
00:37:44,980 --> 00:37:51,790
is rather free only concern is that it

795
00:37:47,410 --> 00:37:54,149
should not be not be mistaken or as a

796
00:37:51,790 --> 00:37:54,150
date

797
00:37:54,520 --> 00:38:01,240
and it can be used later for other in

798
00:37:58,270 --> 00:38:05,350
the import statements as well yeah next

799
00:38:01,240 --> 00:38:07,990
one please okay here is an example of

800
00:38:05,350 --> 00:38:10,420
what the revision labels for assembler

801
00:38:07,990 --> 00:38:12,580
would be if you see that the main number

802
00:38:10,420 --> 00:38:18,250
changes every time when we have this

803
00:38:12,580 --> 00:38:20,590
read NBC changes extension there so from

804
00:38:18,250 --> 00:38:26,130
when we just add something then we only

805
00:38:20,590 --> 00:38:26,130
go from 3 to 0 to 3 1 next please

806
00:38:26,820 --> 00:38:33,280
okay import by revision or derived

807
00:38:31,240 --> 00:38:36,370
that's a very important part of this

808
00:38:33,280 --> 00:38:39,360
work so we said the simple import

809
00:38:36,370 --> 00:38:42,759
without any revision date is too liberal

810
00:38:39,360 --> 00:38:45,220
if you have the revision date there is

811
00:38:42,760 --> 00:38:47,440
too strict what the usual case is that I

812
00:38:45,220 --> 00:38:49,419
want something that includes the

813
00:38:47,440 --> 00:38:52,240
functionality I'm depending on already

814
00:38:49,420 --> 00:38:54,910
and anything later on I very much hope

815
00:38:52,240 --> 00:38:57,069
that it will not remove what the

816
00:38:54,910 --> 00:38:59,589
functionality I depend on it's not a

817
00:38:57,070 --> 00:39:02,580
strict promise that everything

818
00:38:59,590 --> 00:39:07,780
afterwards is good for me but usually it

819
00:39:02,580 --> 00:39:11,200
is enough very revision or derived can

820
00:39:07,780 --> 00:39:24,610
be based both on the revision label and

821
00:39:11,200 --> 00:39:27,370
it can also be based on revision date or

822
00:39:24,610 --> 00:39:31,210
derived would it stop at a module

823
00:39:27,370 --> 00:39:34,690
revision and has NBC changes no no

824
00:39:31,210 --> 00:39:37,690
should it no because most of the time

825
00:39:34,690 --> 00:39:40,360
the NBC changes don't impact the import

826
00:39:37,690 --> 00:39:42,790
there is a risk there and that we had in

827
00:39:40,360 --> 00:39:47,200
earlier versions very complex sets where

828
00:39:42,790 --> 00:39:49,000
we said that from this version to that

829
00:39:47,200 --> 00:39:54,160
version and it gets more and more

830
00:39:49,000 --> 00:39:56,320
complex and usually you want to leave it

831
00:39:54,160 --> 00:40:00,940
open-ended because you don't know what

832
00:39:56,320 --> 00:40:05,110
changes the new revisions will bring and

833
00:40:00,940 --> 00:40:07,920
many many times that even if the changes

834
00:40:05,110 --> 00:40:12,920
are NBC they won't impact your import

835
00:40:07,920 --> 00:40:16,350
won't impact your importers so this is

836
00:40:12,920 --> 00:40:18,900
not as if you really want to be strict

837
00:40:16,350 --> 00:40:22,560
and really be sure then you must check

838
00:40:18,900 --> 00:40:28,620
every every date but we don't want to be

839
00:40:22,560 --> 00:40:30,840
there actually in the previous versions

840
00:40:28,620 --> 00:40:33,569
of the same draft we had more strict and

841
00:40:30,840 --> 00:40:38,720
more complicated solutions and this was

842
00:40:33,570 --> 00:40:38,720
the most user-friendly and feel helpful

843
00:40:42,170 --> 00:40:47,790
the revision will derive dependency it's

844
00:40:45,420 --> 00:40:50,370
almost like a source time dependency

845
00:40:47,790 --> 00:40:52,050
when you actually come to use these

846
00:40:50,370 --> 00:40:54,089
modules you knew something like downline

847
00:40:52,050 --> 00:40:55,620
really on package that will constrain

848
00:40:54,090 --> 00:40:57,420
exactly which version you're going to

849
00:40:55,620 --> 00:40:59,609
use anyway and in the case that

850
00:40:57,420 --> 00:41:00,780
something comes along and breaks your

851
00:40:59,610 --> 00:41:03,270
source dependency they made some

852
00:41:00,780 --> 00:41:05,520
nautical change at that point you've

853
00:41:03,270 --> 00:41:07,920
expected probably to releasing a new

854
00:41:05,520 --> 00:41:10,460
version you revision off your jewel to

855
00:41:07,920 --> 00:41:12,600
do the import then fixes to a later

856
00:41:10,460 --> 00:41:14,880
provisional derived or changes up to

857
00:41:12,600 --> 00:41:16,680
them to fix the important pence again so

858
00:41:14,880 --> 00:41:19,440
we think that this is the right balance

859
00:41:16,680 --> 00:41:23,100
being not too strict because otherwise

860
00:41:19,440 --> 00:41:25,380
if you limit it it's more likely than

861
00:41:23,100 --> 00:41:27,240
actually but I said you're not gonna be

862
00:41:25,380 --> 00:41:29,670
impacted you start update your module

863
00:41:27,240 --> 00:41:31,890
anyway so we think it's better to be

864
00:41:29,670 --> 00:41:34,320
better to ask forgiveness them to be too

865
00:41:31,890 --> 00:41:36,450
strict performed okay I think my only

866
00:41:34,320 --> 00:41:37,410
analogy here would be like suffered you

867
00:41:36,450 --> 00:41:39,089
know when you're building and you have

868
00:41:37,410 --> 00:41:41,250
dependencies on libraries and you'll say

869
00:41:39,090 --> 00:41:45,030
I depend on library you know three dot

870
00:41:41,250 --> 00:41:47,160
one dot two so if three dot X I'll

871
00:41:45,030 --> 00:41:48,660
support but if it ever goes to for TEDx

872
00:41:47,160 --> 00:41:50,100
I don't want to support that so

873
00:41:48,660 --> 00:41:52,640
sometimes there's the ability to put

874
00:41:50,100 --> 00:41:55,920
brackets or limits into how much future

875
00:41:52,640 --> 00:41:57,779
you want to support automatically but I

876
00:41:55,920 --> 00:41:59,220
accept you know it's been discussed by

877
00:41:57,780 --> 00:42:01,020
the design team just want to make sure

878
00:41:59,220 --> 00:42:04,080
that was something that you guys have to

879
00:42:01,020 --> 00:42:07,550
cover and also previous might as well I

880
00:42:04,080 --> 00:42:09,810
think it was yes so this the the two

881
00:42:07,550 --> 00:42:12,180
future statements that you're creating

882
00:42:09,810 --> 00:42:14,759
here is this what I understand to be

883
00:42:12,180 --> 00:42:19,040
possible extensions to yang quarreling

884
00:42:14,760 --> 00:42:19,040
gang language yes okay

885
00:42:19,400 --> 00:42:29,509
max next okay so in order to define what

886
00:42:25,910 --> 00:42:30,920
is when we put in those statements we

887
00:42:29,509 --> 00:42:34,910
have to define what is backward

888
00:42:30,920 --> 00:42:37,069
compatible and NBC 7950 gives us a very

889
00:42:34,910 --> 00:42:40,098
good basis for that but not the full

890
00:42:37,069 --> 00:42:44,180
statement because deprecating and

891
00:42:40,099 --> 00:42:46,960
obsoleting nodes can actually be NBC or

892
00:42:44,180 --> 00:42:50,779
BC depending on how it's implemented

893
00:42:46,960 --> 00:42:53,960
what we assume is that if you deprecated

894
00:42:50,779 --> 00:42:56,089
the node it's still there so that's a

895
00:42:53,960 --> 00:42:58,369
backwards compatible change but if you

896
00:42:56,089 --> 00:43:01,249
obsolete a node then it will be removed

897
00:42:58,369 --> 00:43:04,970
so that we define as a non backward

898
00:43:01,249 --> 00:43:07,129
compatible change also reordering data

899
00:43:04,970 --> 00:43:10,490
definition statements in most of the

900
00:43:07,130 --> 00:43:13,880
cases that should not hurt anyone so

901
00:43:10,490 --> 00:43:18,169
that we allow that and anything else is

902
00:43:13,880 --> 00:43:20,990
known backward compatible but stating

903
00:43:18,170 --> 00:43:26,930
that opps obsoleting is NBC that's a

904
00:43:20,990 --> 00:43:29,508
definite change from 7950 next okay we

905
00:43:26,930 --> 00:43:36,980
have the so that we have the status

906
00:43:29,509 --> 00:43:41,049
statement in yang we want to change what

907
00:43:36,980 --> 00:43:43,359
deprecated and adopts elite means we

908
00:43:41,049 --> 00:43:45,890
still is this is not a mandatory

909
00:43:43,359 --> 00:43:48,739
statement so it's not a must or a shell

910
00:43:45,890 --> 00:43:51,589
but we say that deprecated should be

911
00:43:48,739 --> 00:43:57,289
still there working fully functional

912
00:43:51,589 --> 00:44:00,499
while obsolete should be removed if if

913
00:43:57,289 --> 00:44:05,589
you don't remove obsolete that can or

914
00:44:00,499 --> 00:44:08,779
that can also result in surprising and

915
00:44:05,589 --> 00:44:12,349
errors so even for obsolete I think we

916
00:44:08,779 --> 00:44:14,779
is important to define this but for

917
00:44:12,349 --> 00:44:17,630
backwards compatibility we put into the

918
00:44:14,779 --> 00:44:19,609
Yang library to the extra leaves that

919
00:44:17,630 --> 00:44:22,339
states that do you follow what we

920
00:44:19,609 --> 00:44:24,410
recommend here or not if you don't put

921
00:44:22,339 --> 00:44:26,569
these extra Leafs then you are backward

922
00:44:24,410 --> 00:44:28,578
compatible meaning you can do anything

923
00:44:26,569 --> 00:44:30,900
you like and your clients will be

924
00:44:28,579 --> 00:44:33,510
surprised maybe

925
00:44:30,900 --> 00:44:35,460
also when you deprecated or obsolete

926
00:44:33,510 --> 00:44:38,310
something often you have a reason for

927
00:44:35,460 --> 00:44:40,350
that often you have a time line when you

928
00:44:38,310 --> 00:44:43,230
will actually remove it maybe you have a

929
00:44:40,350 --> 00:44:50,730
replacement so a status description

930
00:44:43,230 --> 00:44:53,040
statement was added for that so I like

931
00:44:50,730 --> 00:44:54,810
the idea of having an ability to specify

932
00:44:53,040 --> 00:44:57,210
whether or not the server actually

933
00:44:54,810 --> 00:45:00,120
complies or not that being the case why

934
00:44:57,210 --> 00:45:03,800
aren't these musts i mean and backwards

935
00:45:00,120 --> 00:45:07,049
compatibility i three months the server

936
00:45:03,800 --> 00:45:08,910
has data more data than it should but

937
00:45:07,050 --> 00:45:12,090
for the first bullet point where it says

938
00:45:08,910 --> 00:45:14,040
it should be implemented its must I mean

939
00:45:12,090 --> 00:45:16,470
how else can we have interoperability if

940
00:45:14,040 --> 00:45:18,600
it's not sure the clients aren't sure

941
00:45:16,470 --> 00:45:21,569
that it's actually there because you can

942
00:45:18,600 --> 00:45:24,810
check in the yang library that is it ro

943
00:45:21,570 --> 00:45:32,340
the deprecated nodes we implemented and

944
00:45:24,810 --> 00:45:34,440
functional if you sorry okay so the

945
00:45:32,340 --> 00:45:35,700
third by you saying gang library you're

946
00:45:34,440 --> 00:45:37,830
talking about the third bullet point yes

947
00:45:35,700 --> 00:45:43,350
that indicates if you follow the first

948
00:45:37,830 --> 00:45:45,000
two or not but are you saying that with

949
00:45:43,350 --> 00:45:47,730
third bullet point that is possible for

950
00:45:45,000 --> 00:45:49,350
the server to say that the first bullet

951
00:45:47,730 --> 00:45:52,350
point is actually those two will

952
00:45:49,350 --> 00:46:01,529
contract you must not judge yes if you

953
00:45:52,350 --> 00:46:05,750
yes if we next then I agree that we

954
00:46:01,530 --> 00:46:05,750
would try and get these to be fine

955
00:46:08,120 --> 00:46:14,430
since you're doing extensions you can

956
00:46:11,790 --> 00:46:16,920
change the rules for implementations

957
00:46:14,430 --> 00:46:18,419
that implement that extension so you can

958
00:46:16,920 --> 00:46:21,330
say if you implement this extension you

959
00:46:18,420 --> 00:46:23,880
must do these things okay and it's

960
00:46:21,330 --> 00:46:27,480
probably worth reducing the number of

961
00:46:23,880 --> 00:46:30,060
options so in the case where you have an

962
00:46:27,480 --> 00:46:36,150
extension think about making things more

963
00:46:30,060 --> 00:46:38,850
bus than shirts Martin be account held

964
00:46:36,150 --> 00:46:41,910
previous meetings a very strong opinion

965
00:46:38,850 --> 00:46:44,670
that we need to indicate in the yang

966
00:46:41,910 --> 00:46:46,680
library whether whether these first two

967
00:46:44,670 --> 00:46:57,599
rules are followed or not we should not

968
00:46:46,680 --> 00:46:59,899
make them must probably could get about

969
00:46:57,599 --> 00:47:18,809
masks now that's what we want isn't it

970
00:46:59,900 --> 00:47:20,700
yes I agree with two you know but we had

971
00:47:18,809 --> 00:47:22,589
some pushback that's why we have this in

972
00:47:20,700 --> 00:47:24,828
young library to indicate whether these

973
00:47:22,589 --> 00:47:30,089
are followed or not

974
00:47:24,829 --> 00:47:33,900
please so what we have in the yang

975
00:47:30,089 --> 00:47:36,150
library is two nodes deprecated nodes

976
00:47:33,900 --> 00:47:38,130
implemented obsolete node up steps and

977
00:47:36,150 --> 00:47:41,460
these are the first two bullet points we

978
00:47:38,130 --> 00:47:44,220
have discussed lately and if they are

979
00:47:41,460 --> 00:47:45,930
not there and then there anything can

980
00:47:44,220 --> 00:47:47,490
happen with these that's one of the

981
00:47:45,930 --> 00:47:49,970
problems that in yang one that one that

982
00:47:47,490 --> 00:47:53,430
they the definition is too open

983
00:47:49,970 --> 00:47:57,359
the other problem was that currently

984
00:47:53,430 --> 00:48:00,779
yang library doesn't specify which

985
00:47:57,359 --> 00:48:04,020
version which revision of a yang module

986
00:48:00,780 --> 00:48:06,900
is imported if multiple revisions are

987
00:48:04,020 --> 00:48:10,020
present and that might mean in some

988
00:48:06,900 --> 00:48:12,599
cases that mandatory data nodes are

989
00:48:10,020 --> 00:48:15,299
present when we thought it's not or

990
00:48:12,599 --> 00:48:18,900
mandated three nodes are absent when we

991
00:48:15,299 --> 00:48:20,910
thought they would be there so it's kind

992
00:48:18,900 --> 00:48:27,750
of a bug let's say or a missing point

993
00:48:20,910 --> 00:48:30,540
piece in 7950 so it's not the rules data

994
00:48:27,750 --> 00:48:32,520
model of some of angle eyebrow is not

995
00:48:30,540 --> 00:48:35,880
modified but the rules what they mean

996
00:48:32,520 --> 00:48:38,549
are modified to make it very specific

997
00:48:35,880 --> 00:48:43,190
which more module is imported in this

998
00:48:38,549 --> 00:48:43,190
case excellent

999
00:48:55,910 --> 00:49:00,109
or in a question whether the second

1000
00:48:58,130 --> 00:49:02,869
point here exists really bug fixes is is

1001
00:49:00,109 --> 00:49:05,869
something that a raft failed to cover or

1002
00:49:02,869 --> 00:49:08,480
not my precious is a change of behavior

1003
00:49:05,869 --> 00:49:11,690
offensive it couldn't be covered in an

1004
00:49:08,480 --> 00:49:14,859
errata but he was opening that if we

1005
00:49:11,690 --> 00:49:17,420
could get in after that would be better

1006
00:49:14,859 --> 00:49:22,640
he's clarifying I hate Lee that's

1007
00:49:17,420 --> 00:49:32,619
ambiguous today we're still trying to

1008
00:49:22,640 --> 00:49:41,598
digest what exactly what seconds no it's

1009
00:49:32,619 --> 00:49:44,660
both 1 & 2 of the second so I need to

1010
00:49:41,599 --> 00:49:47,569
see the errata before making a call as

1011
00:49:44,660 --> 00:49:50,720
to the level of change that's being done

1012
00:49:47,569 --> 00:49:52,430
yeah okay to judge whether it's right or

1013
00:49:50,720 --> 00:49:57,078
something is suitable for errata or

1014
00:49:52,430 --> 00:49:59,210
abyss or update okay yeah I think the

1015
00:49:57,079 --> 00:50:01,509
specific proposed text we have to look

1016
00:49:59,210 --> 00:50:03,890
at not the problem but the solution

1017
00:50:01,509 --> 00:50:05,420
ultimately if you believe it's a

1018
00:50:03,890 --> 00:50:07,839
clarification you should probably just

1019
00:50:05,420 --> 00:50:10,220
submit it and then we can debate it

1020
00:50:07,839 --> 00:50:13,279
except that it will be in a row then it

1021
00:50:10,220 --> 00:50:33,529
will be at a unverified errata and we

1022
00:50:13,279 --> 00:50:35,299
can add it to the list or discuss it so

1023
00:50:33,529 --> 00:50:38,079
you're right on track but you're on

1024
00:50:35,299 --> 00:50:40,700
track for like another 10 minutes okay

1025
00:50:38,079 --> 00:50:44,150
yes data it was required

1026
00:50:40,700 --> 00:50:46,399
requirements to do say what it what

1027
00:50:44,150 --> 00:50:49,759
happens with versioning instance data

1028
00:50:46,400 --> 00:50:51,829
itself is not version because what

1029
00:50:49,759 --> 00:50:55,339
backwards compatibility means there

1030
00:50:51,829 --> 00:50:57,559
that's not defined on the other hand it

1031
00:50:55,339 --> 00:51:00,460
back versioning is very useful for

1032
00:50:57,559 --> 00:51:03,200
instance data understanding if the

1033
00:51:00,460 --> 00:51:06,579
schema defining modules can be somewhat

1034
00:51:03,200 --> 00:51:06,578
different next please

1035
00:51:06,710 --> 00:51:13,130
and then we have some guidelines telling

1036
00:51:10,220 --> 00:51:17,598
others how to do changes that not to do

1037
00:51:13,130 --> 00:51:20,060
NBC changes and try to make the changes

1038
00:51:17,599 --> 00:51:26,720
for the clients that's painful use

1039
00:51:20,060 --> 00:51:33,049
deprecation use this more flexible

1040
00:51:26,720 --> 00:51:35,390
import use status information and such

1041
00:51:33,050 --> 00:51:38,270
things and sometimes duplicate data to

1042
00:51:35,390 --> 00:51:40,790
be able to use both new and old versions

1043
00:51:38,270 --> 00:51:44,619
or potentially sell right version

1044
00:51:40,790 --> 00:51:44,619
selection next please

1045
00:51:45,940 --> 00:51:52,790
if clients is kind of a requirement of

1046
00:51:50,240 --> 00:51:54,200
recommendation for clients that yes

1047
00:51:52,790 --> 00:51:56,480
changes are coming and they should

1048
00:51:54,200 --> 00:51:58,520
tolerate a number of changes and also

1049
00:51:56,480 --> 00:52:01,460
they should monitor what kuat happens

1050
00:51:58,520 --> 00:52:50,180
with modules so they should check if the

1051
00:52:01,460 --> 00:52:52,580
module is backwards compatible and my

1052
00:52:50,180 --> 00:52:57,560
first answer is I don't know don't care

1053
00:52:52,580 --> 00:53:00,130
this only says that we have a revision

1054
00:52:57,560 --> 00:53:04,420
label where you can put in some numbers

1055
00:53:00,130 --> 00:53:07,880
now there will be a separate draft about

1056
00:53:04,420 --> 00:53:10,970
Sandler based the revision labels

1057
00:53:07,880 --> 00:53:14,599
yes ember has difficulty with unlimited

1058
00:53:10,970 --> 00:53:16,640
branching there whatever you put into

1059
00:53:14,599 --> 00:53:18,680
the revision label will have its

1060
00:53:16,640 --> 00:53:20,120
limitations or maybe you have a

1061
00:53:18,680 --> 00:53:22,040
versioning number

1062
00:53:20,120 --> 00:53:24,799
version numbering scheme that's all

1063
00:53:22,040 --> 00:53:46,670
powerful them no limitations but that's

1064
00:53:24,800 --> 00:53:49,610
not part of this draft again

1065
00:53:46,670 --> 00:53:51,230
we here in this draft we just defined

1066
00:53:49,610 --> 00:53:54,590
that there is a place where you can put

1067
00:53:51,230 --> 00:53:57,260
that in the further drafts will propose

1068
00:53:54,590 --> 00:54:00,650
the same where based a visioning system

1069
00:53:57,260 --> 00:54:02,600
and there they will have meaning but not

1070
00:54:00,650 --> 00:54:07,790
in this draft we here just we have a

1071
00:54:02,600 --> 00:54:09,529
placeholder so Robin just have one

1072
00:54:07,790 --> 00:54:10,850
comment to that so you so somebody might

1073
00:54:09,530 --> 00:54:13,130
a vendor might choose to choose their

1074
00:54:10,850 --> 00:54:14,600
module labels as foo and bar and what

1075
00:54:13,130 --> 00:54:16,940
said like choose whatever they want

1076
00:54:14,600 --> 00:54:21,770
so he's whoever's doing that scheme is

1077
00:54:16,940 --> 00:54:23,660
define the semantics of the scheme so

1078
00:54:21,770 --> 00:54:25,430
very quickly to cover the next steps

1079
00:54:23,660 --> 00:54:28,040
there's just one slide here actually we

1080
00:54:25,430 --> 00:54:29,629
sort of discussed it earlier so at the

1081
00:54:28,040 --> 00:54:31,759
beginning we were going to seek adoption

1082
00:54:29,630 --> 00:54:33,620
for this first draft I think the

1083
00:54:31,760 --> 00:54:35,180
feedback from the chairs was that

1084
00:54:33,620 --> 00:54:38,810
actually they want to adopt this as a

1085
00:54:35,180 --> 00:54:41,870
set so I think of fatally we're going to

1086
00:54:38,810 --> 00:54:43,190
continue on the same track any comments

1087
00:54:41,870 --> 00:54:44,900
we received on the module version draft

1088
00:54:43,190 --> 00:54:48,170
will update but the other ones will

1089
00:54:44,900 --> 00:54:50,090
effectively work on the other ones the

1090
00:54:48,170 --> 00:54:52,850
static version scheme yank packages in

1091
00:54:50,090 --> 00:54:54,050
version selection drafts and also the

1092
00:54:52,850 --> 00:54:55,460
tooling one but I'm not sure we'll get

1093
00:54:54,050 --> 00:54:58,940
those all done before the next IDF

1094
00:54:55,460 --> 00:55:08,360
there's still a lot of work there and

1095
00:54:58,940 --> 00:55:09,070
then on seryung packages please that's

1096
00:55:08,360 --> 00:55:11,690
it

1097
00:55:09,070 --> 00:55:12,860
so I already covered a little bit of

1098
00:55:11,690 --> 00:55:15,920
this this is just a little bit more

1099
00:55:12,860 --> 00:55:24,160
details and so next slide please on this

1100
00:55:15,920 --> 00:55:26,020
and yank packages and so

1101
00:55:24,160 --> 00:55:29,020
yes effectively the idea here as

1102
00:55:26,020 --> 00:55:31,120
beforethe said 'is to diversion sets of

1103
00:55:29,020 --> 00:55:33,580
young modules together with their

1104
00:55:31,120 --> 00:55:35,200
dependencies and in terms of how the

1105
00:55:33,580 --> 00:55:38,110
yank packages draft is written at the

1106
00:55:35,200 --> 00:55:42,250
moment it's using the yang cember

1107
00:55:38,110 --> 00:55:44,320
solution as a way of identifying or the

1108
00:55:42,250 --> 00:55:46,330
the version number scheme for these

1109
00:55:44,320 --> 00:55:48,090
modules that's the one thing I think we

1110
00:55:46,330 --> 00:55:50,680
need to update or at least discuss

1111
00:55:48,090 --> 00:55:53,020
relative to how we've changed the

1112
00:55:50,680 --> 00:55:55,210
modular versioning and made the semantic

1113
00:55:53,020 --> 00:55:58,180
versioning number a label and option

1114
00:55:55,210 --> 00:55:59,950
thing rather than things tied in the

1115
00:55:58,180 --> 00:56:01,839
packages could be hierarchical so a

1116
00:55:59,950 --> 00:56:03,850
package can import other packages and

1117
00:56:01,840 --> 00:56:05,650
that gonna curse down the packages

1118
00:56:03,850 --> 00:56:07,330
themselves can be I their complete or

1119
00:56:05,650 --> 00:56:09,160
incomplete so you don't necessarily have

1120
00:56:07,330 --> 00:56:11,319
to tie off all your dependencies

1121
00:56:09,160 --> 00:56:13,089
depending on what you're doing and that

1122
00:56:11,320 --> 00:56:14,770
might help if you were you had

1123
00:56:13,090 --> 00:56:15,760
dependencies and like type modules and

1124
00:56:14,770 --> 00:56:18,670
things that like you may not want to

1125
00:56:15,760 --> 00:56:20,800
depend those the package themselves can

1126
00:56:18,670 --> 00:56:22,300
be available from yang library or they

1127
00:56:20,800 --> 00:56:25,360
can be available on a lot of line and

1128
00:56:22,300 --> 00:56:27,490
yeah instance data and in the yang in

1129
00:56:25,360 --> 00:56:29,950
stated discussion there was talk about

1130
00:56:27,490 --> 00:56:32,589
how you identify the schema using yang

1131
00:56:29,950 --> 00:56:34,120
library I think yang packages might be

1132
00:56:32,590 --> 00:56:35,710
another example which were a good way of

1133
00:56:34,120 --> 00:56:37,480
defining that schema a better way

1134
00:56:35,710 --> 00:56:39,160
because it's it's more what you're

1135
00:56:37,480 --> 00:56:40,720
actually trying to do rather than yang

1136
00:56:39,160 --> 00:56:44,109
robe it's returning slightly different

1137
00:56:40,720 --> 00:56:45,790
information and as I mentioned the draft

1138
00:56:44,110 --> 00:56:47,620
is slightly out of date because it

1139
00:56:45,790 --> 00:56:48,400
hasn't been updated with the changes

1140
00:56:47,620 --> 00:56:53,680
that we've done to the module level

1141
00:56:48,400 --> 00:57:01,060
versioning you say it works but I think

1142
00:56:53,680 --> 00:57:02,740
it does say yes it's just okay so why do

1143
00:57:01,060 --> 00:57:05,470
young packages of what we're trying to

1144
00:57:02,740 --> 00:57:08,200
solve several problems here we want to

1145
00:57:05,470 --> 00:57:09,640
actually get consistent version sets of

1146
00:57:08,200 --> 00:57:12,430
modules just versioning modules

1147
00:57:09,640 --> 00:57:14,500
individually when you have hundreds of

1148
00:57:12,430 --> 00:57:17,500
them or tens and different organizations

1149
00:57:14,500 --> 00:57:19,750
becomes too hard it's too complex and

1150
00:57:17,500 --> 00:57:22,210
it's too likely that different vendors

1151
00:57:19,750 --> 00:57:23,890
will implement different versions of the

1152
00:57:22,210 --> 00:57:26,740
same modules and get too many

1153
00:57:23,890 --> 00:57:28,750
incompatibility so for one vendor that

1154
00:57:26,740 --> 00:57:31,509
might implement B GB version 2 and Ice

1155
00:57:28,750 --> 00:57:34,150
PFE one and on different OS or different

1156
00:57:31,510 --> 00:57:36,220
vendor while does BGP v1 and OSPF v2

1157
00:57:34,150 --> 00:57:37,600
yang models and then when it comes to an

1158
00:57:36,220 --> 00:57:39,580
operator and that

1159
00:57:37,600 --> 00:57:41,170
to use these well neither those sets are

1160
00:57:39,580 --> 00:57:43,330
ideal because they can't get a

1161
00:57:41,170 --> 00:57:45,790
consistent set across both of them if

1162
00:57:43,330 --> 00:57:47,470
you've got young packages and your and

1163
00:57:45,790 --> 00:57:49,630
your versioning for like the ITF routing

1164
00:57:47,470 --> 00:57:52,720
protocols and every time the module gets

1165
00:57:49,630 --> 00:57:54,880
a new routing module gets updated you

1166
00:57:52,720 --> 00:57:56,410
add that into the yank package then and

1167
00:57:54,880 --> 00:57:58,420
a new version that yang packed you've

1168
00:57:56,410 --> 00:58:00,129
now got a more linear update in terms of

1169
00:57:58,420 --> 00:58:01,690
how these packages are evolving but

1170
00:58:00,130 --> 00:58:04,570
you're not fixed to that you can still

1171
00:58:01,690 --> 00:58:06,670
deviate those the packages that you

1172
00:58:04,570 --> 00:58:08,470
still use your override and say actually

1173
00:58:06,670 --> 00:58:09,790
I'm going to support this baseline

1174
00:58:08,470 --> 00:58:13,990
package with these changed in these

1175
00:58:09,790 --> 00:58:15,190
differences to it another one another

1176
00:58:13,990 --> 00:58:17,080
use case for them is to avoid

1177
00:58:15,190 --> 00:58:18,640
downloading this this full set of

1178
00:58:17,080 --> 00:58:20,290
modules off the device and having to

1179
00:58:18,640 --> 00:58:22,180
check your exactly what you want because

1180
00:58:20,290 --> 00:58:25,960
that's a hard thing to do it'd be much

1181
00:58:22,180 --> 00:58:28,149
nicer to say actually I support this

1182
00:58:25,960 --> 00:58:29,380
package or these packages these API is

1183
00:58:28,150 --> 00:58:31,630
the things I support with these

1184
00:58:29,380 --> 00:58:33,040
modifications and rather have to do an

1185
00:58:31,630 --> 00:58:35,250
individual check on every single module

1186
00:58:33,040 --> 00:58:37,300
either I've got a higher level

1187
00:58:35,250 --> 00:58:41,230
conversation about the API that you're

1188
00:58:37,300 --> 00:58:43,150
supporting and as to say and again you

1189
00:58:41,230 --> 00:58:45,520
can do this with yang library making the

1190
00:58:43,150 --> 00:58:47,620
schemer available offline so you can

1191
00:58:45,520 --> 00:58:49,990
check it in advance and you can design

1192
00:58:47,620 --> 00:58:53,440
your tooling to expect to talk to a

1193
00:58:49,990 --> 00:58:55,899
device and expect which which API which

1194
00:58:53,440 --> 00:58:57,730
package version it's using and correlate

1195
00:58:55,900 --> 00:59:01,120
those is easier than how to deal with

1196
00:58:57,730 --> 00:59:02,970
full sets of of packages when the full

1197
00:59:01,120 --> 00:59:07,740
sets of modules when they differ

1198
00:59:02,970 --> 00:59:11,890
next please so this is just an example

1199
00:59:07,740 --> 00:59:14,169
I've I've got a simple ITF network

1200
00:59:11,890 --> 00:59:18,339
device version 1.1.2

1201
00:59:14,170 --> 00:59:19,930
there's some metadata description and

1202
00:59:18,340 --> 00:59:21,730
other information where you can wake and

1203
00:59:19,930 --> 00:59:24,339
a URL of where to download that package

1204
00:59:21,730 --> 00:59:26,740
from and that lists a set of modules

1205
00:59:24,340 --> 00:59:28,840
that implements here and it lists a set

1206
00:59:26,740 --> 00:59:31,779
of modules our import only and again

1207
00:59:28,840 --> 00:59:35,320
this could be fully resolved it might

1208
00:59:31,780 --> 00:59:38,050
not be resolved and the definition

1209
00:59:35,320 --> 00:59:40,420
includes metadata like URLs where to

1210
00:59:38,050 --> 00:59:42,280
find it it lists features that mandatory

1211
00:59:40,420 --> 00:59:44,080
so which features that if you implement

1212
00:59:42,280 --> 00:59:47,380
this package you are obliged to

1213
00:59:44,080 --> 00:59:49,120
implement and support it has a list of

1214
00:59:47,380 --> 00:59:50,289
the imported packages not there's none

1215
00:59:49,120 --> 00:59:53,140
shown here

1216
00:59:50,289 --> 00:59:54,940
but list the pictures you importing list

1217
00:59:53,140 --> 00:59:56,890
the modules that are implemented by that

1218
00:59:54,940 --> 00:59:58,239
package and the import only module it's

1219
00:59:56,890 --> 01:00:00,368
a very similar to yang library from that

1220
00:59:58,239 --> 01:00:02,529
point of view except it recursos and has

1221
01:00:00,369 --> 01:00:05,549
a list of imported packages and then

1222
01:00:02,529 --> 01:00:08,739
finally and again it's not shown here is

1223
01:00:05,549 --> 01:00:12,759
import conflict conflict resolution so

1224
01:00:08,739 --> 01:00:16,269
if you combine two packages and they

1225
01:00:12,759 --> 01:00:17,440
each those packages import different

1226
01:00:16,269 --> 01:00:19,930
versions of modules and you have

1227
01:00:17,440 --> 01:00:22,420
conflicts so when you do that when your

1228
01:00:19,930 --> 01:00:24,220
package pulls in two separate packages

1229
01:00:22,420 --> 01:00:26,589
with conflicts you surface and you

1230
01:00:24,220 --> 01:00:31,950
specify exactly which version of which

1231
01:00:26,589 --> 01:00:35,680
module you resolve to next slide please

1232
01:00:31,950 --> 01:00:38,439
one more slide so this is another

1233
01:00:35,680 --> 01:00:39,819
example package example ITF basic

1234
01:00:38,440 --> 01:00:43,269
routing package and this one is

1235
01:00:39,819 --> 01:00:46,210
importing from Network instant network

1236
01:00:43,269 --> 01:00:47,470
device is one that 1.2 and then so it

1237
01:00:46,210 --> 01:00:49,509
lists the extra modules that are

1238
01:00:47,470 --> 01:00:51,788
implemented as part of that extra

1239
01:00:49,509 --> 01:00:54,039
imports on top of that and as I said

1240
01:00:51,789 --> 01:00:55,720
before any version conflicts or change

1241
01:00:54,039 --> 01:00:57,249
must be explicitly resolved that's

1242
01:00:55,720 --> 01:01:00,189
that's one thing that's critical here

1243
01:00:57,249 --> 01:01:03,009
the forgiven package definition the list

1244
01:01:00,190 --> 01:01:05,140
of modules that it's using is is exactly

1245
01:01:03,009 --> 01:01:10,289
tightly defined that's the specific

1246
01:01:05,140 --> 01:01:12,549
versions and the package version

1247
01:01:10,289 --> 01:01:14,529
indicates the nature of changes in the

1248
01:01:12,549 --> 01:01:16,559
modules or package imports so the

1249
01:01:14,529 --> 01:01:18,910
version number that we're using here is

1250
01:01:16,559 --> 01:01:22,299
again using like a somatic versioning

1251
01:01:18,910 --> 01:01:23,680
scheme so if you update your package to

1252
01:01:22,299 --> 01:01:26,470
include a module that's changing a

1253
01:01:23,680 --> 01:01:29,799
number non box compatible way which in

1254
01:01:26,470 --> 01:01:32,140
semver would mean going from no 2.00 to

1255
01:01:29,799 --> 01:01:34,329
3.0 to 0 then your package would also

1256
01:01:32,140 --> 01:01:36,879
have a major version change in its

1257
01:01:34,329 --> 01:01:39,670
version number as well if you had minor

1258
01:01:36,880 --> 01:01:42,609
version changes in your packages or you

1259
01:01:39,670 --> 01:01:43,809
own or you're importing more modules in

1260
01:01:42,609 --> 01:01:45,130
your package definition then you have a

1261
01:01:43,809 --> 01:01:47,349
minor version change so it's using the

1262
01:01:45,130 --> 01:01:49,059
same send their ideas and rules and

1263
01:01:47,349 --> 01:01:52,739
things for doing versioning applied a

1264
01:01:49,059 --> 01:01:52,739
package level rather than a module level

1265
01:01:52,950 --> 01:01:58,538
yeah two slides back you said that if

1266
01:01:56,769 --> 01:02:00,459
you say that you support the package

1267
01:01:58,539 --> 01:02:02,109
you're obliged to implement all the

1268
01:02:00,460 --> 01:02:03,650
package versions as they are I just

1269
01:02:02,109 --> 01:02:07,850
wanna clarify

1270
01:02:03,650 --> 01:02:12,380
is that include features and or and or

1271
01:02:07,850 --> 01:02:14,960
deviations so you you what you'd be

1272
01:02:12,380 --> 01:02:17,000
allowed to do is you've allowed to run

1273
01:02:14,960 --> 01:02:19,040
the saying you you implement this

1274
01:02:17,000 --> 01:02:21,710
package you would implement your own

1275
01:02:19,040 --> 01:02:24,140
package on top of that or they're in

1276
01:02:21,710 --> 01:02:26,570
they includes this one and then has it

1277
01:02:24,140 --> 01:02:28,759
extra modules with deviations listed in

1278
01:02:26,570 --> 01:02:30,650
terms of features you would list the

1279
01:02:28,760 --> 01:02:32,240
features you support but you're obliged

1280
01:02:30,650 --> 01:02:34,280
to support the features that are listed

1281
01:02:32,240 --> 01:02:36,950
here the mandatory features or otherwise

1282
01:02:34,280 --> 01:02:40,070
deviate those nodes so you can steal

1283
01:02:36,950 --> 01:02:45,770
these deviations and changes but you

1284
01:02:40,070 --> 01:02:47,480
have to expect them explicit and then

1285
01:02:45,770 --> 01:02:50,390
the key issues the key question in terms

1286
01:02:47,480 --> 01:02:52,280
of updating this draft so the current

1287
01:02:50,390 --> 01:02:53,750
package draft of actually draft uses

1288
01:02:52,280 --> 01:02:55,580
yang Simba's the versioning scheme

1289
01:02:53,750 --> 01:02:58,190
because that was based on the work that

1290
01:02:55,580 --> 01:02:59,360
we did for ITF 104 where it looked like

1291
01:02:58,190 --> 01:03:02,210
that was the version seen we were going

1292
01:02:59,360 --> 01:03:04,490
to use but the latest module level

1293
01:03:02,210 --> 01:03:06,410
version now has been decoupled so in

1294
01:03:04,490 --> 01:03:08,870
terms of the module revision handling

1295
01:03:06,410 --> 01:03:10,879
and it's and its concept of backwards

1296
01:03:08,870 --> 01:03:14,750
compatible versus non backward but non

1297
01:03:10,880 --> 01:03:16,220
box collateral changes and you separated

1298
01:03:14,750 --> 01:03:18,830
from the really the versioning scheme

1299
01:03:16,220 --> 01:03:20,330
that you're using so yang semver is one

1300
01:03:18,830 --> 01:03:23,900
of the examples of the version scheme

1301
01:03:20,330 --> 01:03:26,900
you could use so I think probably it's

1302
01:03:23,900 --> 01:03:30,440
better for yang packages also to have

1303
01:03:26,900 --> 01:03:32,770
that same be coupling so for it not to

1304
01:03:30,440 --> 01:03:34,970
have be hard-coded to a particular

1305
01:03:32,770 --> 01:03:37,730
semantic versioning scheme but just to

1306
01:03:34,970 --> 01:03:41,750
say actually it can use any scheme

1307
01:03:37,730 --> 01:03:42,800
that's partially ordered sets of

1308
01:03:41,750 --> 01:03:44,300
identifiers to have that more

1309
01:03:42,800 --> 01:03:45,890
flexibility in to what's in terms of

1310
01:03:44,300 --> 01:03:48,440
what it's done or in terms of what it

1311
01:03:45,890 --> 01:03:49,910
uses and allow yang cember as one

1312
01:03:48,440 --> 01:03:53,480
example of what could be used in that

1313
01:03:49,910 --> 01:03:56,240
case then the question is is to be is

1314
01:03:53,480 --> 01:03:57,800
how flex lie you in that how do you do

1315
01:03:56,240 --> 01:03:59,810
that do you have an identifier or an

1316
01:03:57,800 --> 01:04:01,190
enumeration to identify the different

1317
01:03:59,810 --> 01:04:03,140
schemes I'm not sure we want to have a

1318
01:04:01,190 --> 01:04:05,390
huge proliferation of them because every

1319
01:04:03,140 --> 01:04:06,650
single different scheme will have impact

1320
01:04:05,390 --> 01:04:09,850
on clients that need to be able to

1321
01:04:06,650 --> 01:04:13,970
compare these things so but same time

1322
01:04:09,850 --> 01:04:15,920
toyotas yang Semba might be a mistake

1323
01:04:13,970 --> 01:04:18,069
does anyone have any thoughts or pins on

1324
01:04:15,920 --> 01:04:18,070
us

1325
01:04:20,310 --> 01:04:32,410
Charles that call for table more like

1326
01:04:28,119 --> 01:04:34,030
the version of the package as it said it

1327
01:04:32,410 --> 01:04:39,640
would be ordered

1328
01:04:34,030 --> 01:04:54,250
so is it implied as the version of the

1329
01:04:39,640 --> 01:04:56,710
package increases the version of I think

1330
01:04:54,250 --> 01:04:59,530
entirely decoupled so I think you'd be

1331
01:04:56,710 --> 01:05:03,760
allowed to there's no correspondence

1332
01:04:59,530 --> 01:05:06,640
between the package version number and

1333
01:05:03,760 --> 01:05:08,770
the version numbers inside other than

1334
01:05:06,640 --> 01:05:10,629
other than the semantic change the

1335
01:05:08,770 --> 01:05:12,460
package so if you've made a change to

1336
01:05:10,630 --> 01:05:14,020
the what's included in that package this

1337
01:05:12,460 --> 01:05:15,849
numbers compatible because you've

1338
01:05:14,020 --> 01:05:17,500
changed your numbers compared to a

1339
01:05:15,849 --> 01:05:19,930
module or you've down read the module

1340
01:05:17,500 --> 01:05:22,180
that would be like a non box

1341
01:05:19,930 --> 01:05:26,589
non backwards would change to that

1342
01:05:22,180 --> 01:05:28,779
package definition so it would go from 1

1343
01:05:26,589 --> 01:05:30,490
0 0 to 2 0 0 if you were doing a down

1344
01:05:28,780 --> 01:05:53,420
Rev I think does that answer your

1345
01:05:30,490 --> 01:05:58,609
question yes any other

1346
01:05:53,420 --> 01:06:01,839
on this issue at all opinions are you

1347
01:05:58,609 --> 01:06:01,839
coming up because we're speaking next

1348
01:06:08,290 --> 01:06:12,259
complete resolution you mentioned I

1349
01:06:10,940 --> 01:06:14,660
think in one slide between two different

1350
01:06:12,260 --> 01:06:23,180
packages in a different slide you type

1351
01:06:14,660 --> 01:06:26,540
one package how do you explicitly yes

1352
01:06:23,180 --> 01:06:28,009
so you see effectively say on the config

1353
01:06:26,540 --> 01:06:29,869
resolution say I want to have this

1354
01:06:28,010 --> 01:06:31,670
particular version and I think I try to

1355
01:06:29,869 --> 01:06:34,069
remember having read the draft recently

1356
01:06:31,670 --> 01:06:35,960
I think in terms of import only again

1357
01:06:34,069 --> 01:06:38,808
you might need to identify which

1358
01:06:35,960 --> 01:06:41,540
specific import you are overriding and

1359
01:06:38,809 --> 01:06:43,730
the and the overriding version but it be

1360
01:06:41,540 --> 01:06:45,079
only other day you're explicitly saying

1361
01:06:43,730 --> 01:06:51,700
this is the version I'm gonna use in the

1362
01:06:45,079 --> 01:06:55,970
circumstance I think you are now up so

1363
01:06:51,700 --> 01:06:57,950
can you elaborate either on your view of

1364
01:06:55,970 --> 01:07:09,799
the design team view of why you want to

1365
01:06:57,950 --> 01:07:11,419
allow multiple ways so in terms of the

1366
01:07:09,799 --> 01:07:13,700
modular version the reason for doing

1367
01:07:11,420 --> 01:07:16,250
that is because that's what some people

1368
01:07:13,700 --> 01:07:19,399
wanted they thought that they don't like

1369
01:07:16,250 --> 01:07:21,589
the yang symbol scheme because they find

1370
01:07:19,400 --> 01:07:28,400
it too restrictive some people other

1371
01:07:21,589 --> 01:07:30,319
people think it's not well why don't we

1372
01:07:28,400 --> 01:07:32,059
just use the standard Semba and I think

1373
01:07:30,319 --> 01:07:33,558
it's not flexible enough so there's

1374
01:07:32,059 --> 01:07:35,690
difference opinions as to what version

1375
01:07:33,559 --> 01:07:38,630
of scheme is required and if you are a

1376
01:07:35,690 --> 01:07:40,369
vendor and you end up having arbitrary

1377
01:07:38,630 --> 01:07:43,250
branching of your modules for whatever

1378
01:07:40,369 --> 01:07:44,750
reason then the semver scheme we

1379
01:07:43,250 --> 01:07:46,369
defining can't accommodate that

1380
01:07:44,750 --> 01:07:49,760
deliberately so it's limited

1381
01:07:46,369 --> 01:07:52,160
deliberately some partial branch but not

1382
01:07:49,760 --> 01:07:53,660
too much so I think that's the reason we

1383
01:07:52,160 --> 01:07:56,180
had that separation in the module level

1384
01:07:53,660 --> 01:07:58,129
stuff and then in terms of packages the

1385
01:07:56,180 --> 01:08:00,020
question is whether if you've got

1386
01:07:58,130 --> 01:08:02,119
modules that have that flexibility and

1387
01:08:00,020 --> 01:08:04,160
you package them together you probably

1388
01:08:02,119 --> 01:08:08,420
need a versioning scheme for the package

1389
01:08:04,160 --> 01:08:10,520
has the same number flexibility we

1390
01:08:08,420 --> 01:08:13,390
progress from the design team to the

1391
01:08:10,520 --> 01:08:16,160
working group because to the eventual

1392
01:08:13,390 --> 01:08:17,750
something we submit to the is G we'll

1393
01:08:16,160 --> 01:08:19,429
really want to think hard about whether

1394
01:08:17,750 --> 01:08:21,859
we want that flexibility because anytime

1395
01:08:19,429 --> 01:08:23,839
you have flexibility but that really

1396
01:08:21,859 --> 01:08:25,009
leads is to interoperability problems

1397
01:08:23,839 --> 01:08:26,568
and of course the reason we have

1398
01:08:25,009 --> 01:08:29,479
standards is you know for

1399
01:08:26,569 --> 01:08:32,359
interoperability so if there's good

1400
01:08:29,479 --> 01:08:34,669
reason to allow that different off those

1401
01:08:32,359 --> 01:08:36,109
different options sure but if there's

1402
01:08:34,670 --> 01:08:38,859
not you know we should think really hard

1403
01:08:36,109 --> 01:08:44,109
about the cost of that flexibility

1404
01:08:38,859 --> 01:08:46,339
greatly if you want a question about the

1405
01:08:44,109 --> 01:08:52,660
different water networks continue

1406
01:08:46,339 --> 01:08:57,350
question on that conflict so I need

1407
01:08:52,660 --> 01:09:02,028
werden conflict must be how can we

1408
01:08:57,350 --> 01:09:04,460
resolve that so if for example this was

1409
01:09:02,029 --> 01:09:06,319
importing two modules to the two

1410
01:09:04,460 --> 01:09:09,739
different packages and one of them he

1411
01:09:06,319 --> 01:09:13,429
was using IETF types version 1 0 0 and

1412
01:09:09,738 --> 01:09:14,839
up was using ITF types 1 0 1 then this

1413
01:09:13,429 --> 01:09:19,279
package as well as doing the import

1414
01:09:14,839 --> 01:09:28,130
would say I'm going to use ITF 1 0 1 as

1415
01:09:19,279 --> 01:09:30,080
my version for this package then but

1416
01:09:28,130 --> 01:09:31,969
each pack each tire package each time

1417
01:09:30,080 --> 01:09:33,979
you're combining modules with two

1418
01:09:31,969 --> 01:09:36,140
different packages two or more packages

1419
01:09:33,979 --> 01:09:38,330
you're explicitly resolving that you're

1420
01:09:36,140 --> 01:09:45,350
specifying exactly which module you're

1421
01:09:38,330 --> 01:09:47,778
using anything interface Bank on do

1422
01:09:45,350 --> 01:09:51,140
another module they are not a package

1423
01:09:47,779 --> 01:09:53,359
need to user interface 2.0 they are not

1424
01:09:51,140 --> 01:09:55,219
compatible and I hope to use two

1425
01:09:53,359 --> 01:09:57,170
packages together how do I do that

1426
01:09:55,219 --> 01:09:57,590
without I think is something you can't

1427
01:09:57,170 --> 01:09:59,030
do

1428
01:09:57,590 --> 01:10:01,900
I mean in the day if you're trying to

1429
01:09:59,030 --> 01:10:01,900
combine different

1430
01:10:05,870 --> 01:10:12,500
$6 another set foxy application your

1431
01:10:09,860 --> 01:10:15,530
doctor C library Lipstein southern euros

1432
01:10:12,500 --> 01:10:19,090
we all pay we have both live in there so

1433
01:10:15,530 --> 01:10:19,090
you define two packages in that case

1434
01:10:22,930 --> 01:10:29,180
interface modules - that one though they

1435
01:10:26,360 --> 01:10:31,280
were a madman but if you've got that

1436
01:10:29,180 --> 01:10:33,110
sort of splitting your yang ecosystem

1437
01:10:31,280 --> 01:10:34,580
where you got the modules that that

1438
01:10:33,110 --> 01:10:35,870
different and there and there's no way

1439
01:10:34,580 --> 01:10:37,430
you can combine them you got some

1440
01:10:35,870 --> 01:10:38,809
dependencies on the older than you

1441
01:10:37,430 --> 01:10:41,240
well you're combining them into one

1442
01:10:38,810 --> 01:10:43,970
package so if you got dependency says

1443
01:10:41,240 --> 01:10:45,679
half of my package depending on ITF

1444
01:10:43,970 --> 01:10:48,650
interfaces one and half as depending on

1445
01:10:45,680 --> 01:10:51,020
ITF interfaces - and there's significant

1446
01:10:48,650 --> 01:10:53,990
changes between the two then you've

1447
01:10:51,020 --> 01:10:55,550
either got to split that and just do

1448
01:10:53,990 --> 01:10:56,929
them for one and a separate set of

1449
01:10:55,550 --> 01:10:58,700
packages for the ones that depending on

1450
01:10:56,930 --> 01:11:03,280
version - you can't you can't magically

1451
01:10:58,700 --> 01:11:03,280
put those things together this won't fix

1452
01:11:06,010 --> 01:11:11,690
and the same system together then yang

1453
01:11:09,770 --> 01:11:13,070
does not allow that yang says you can

1454
01:11:11,690 --> 01:11:16,519
only implement a single version of a

1455
01:11:13,070 --> 01:11:18,530
module you can import multiple versions

1456
01:11:16,520 --> 01:11:20,510
but in terms of implementation you can

1457
01:11:18,530 --> 01:11:24,400
only forgiving scheme oh you can only

1458
01:11:20,510 --> 01:11:24,400
implement one version of a yang module

1459
01:11:25,780 --> 01:11:29,750
actually it's possible if you have two

1460
01:11:28,070 --> 01:11:32,540
different Netcom for restaurant servers

1461
01:11:29,750 --> 01:11:37,220
each server can has to have a specific

1462
01:11:32,540 --> 01:11:38,390
implementation show up in the device but

1463
01:11:37,220 --> 01:11:47,270
in that case you're in two separate

1464
01:11:38,390 --> 01:11:49,670
packages working packages sometimes may

1465
01:11:47,270 --> 01:11:52,100
not be practical too much education

1466
01:11:49,670 --> 01:11:54,590
about that but it but the same issue

1467
01:11:52,100 --> 01:11:57,110
exists with using yang libraries is no

1468
01:11:54,590 --> 01:11:58,610
different in that scenario so you're

1469
01:11:57,110 --> 01:11:59,809
trying to you can't do it yang packages

1470
01:11:58,610 --> 01:12:01,580
you means you can't do it young library

1471
01:11:59,810 --> 01:12:02,690
either there's no fun little difference

1472
01:12:01,580 --> 01:12:04,780
there it's just how they're being pieced

1473
01:12:02,690 --> 01:12:04,780
together

1474
01:12:18,520 --> 01:12:55,579
can you use the mic please only one

1475
01:12:28,909 --> 01:12:57,949
person can represent can be yes so I'll

1476
01:12:55,579 --> 01:13:01,309
be presenting the version selection

1477
01:12:57,949 --> 01:13:03,320
graph on behalf of Robin myself so this

1478
01:13:01,310 --> 01:13:06,469
slide talks about why are we doing this

1479
01:13:03,320 --> 01:13:08,929
well this comes from the requirements

1480
01:13:06,469 --> 01:13:12,170
3.1 and 3.2 from the requirements draft

1481
01:13:08,929 --> 01:13:14,389
you spoke about and the what this is

1482
01:13:12,170 --> 01:13:16,849
basically saying is because yang modules

1483
01:13:14,389 --> 01:13:20,270
are change in non backwards compatible

1484
01:13:16,849 --> 01:13:23,090
ways we need to help clients migrate so

1485
01:13:20,270 --> 01:13:26,900
servers can support multiple versions

1486
01:13:23,090 --> 01:13:30,290
and help clients select which version

1487
01:13:26,900 --> 01:13:32,440
they actually want to run with next

1488
01:13:30,290 --> 01:13:32,440
please

1489
01:13:32,800 --> 01:13:37,489
so the summary so it allows servers to

1490
01:13:35,659 --> 01:13:39,170
do non backwards compatible changes

1491
01:13:37,489 --> 01:13:42,379
without forcing clients to make

1492
01:13:39,170 --> 01:13:44,179
immediately migrate it does make use of

1493
01:13:42,380 --> 01:13:47,719
the yang packages draft Rob was

1494
01:13:44,179 --> 01:13:50,360
presenting earlier and it provides

1495
01:13:47,719 --> 01:13:52,550
mechanism for servers to advertise what

1496
01:13:50,360 --> 01:13:55,460
versions of the package is the support

1497
01:13:52,550 --> 01:13:57,170
and it allows clients to choose among

1498
01:13:55,460 --> 01:14:00,260
the ones advertised which one they want

1499
01:13:57,170 --> 01:14:06,739
to run with on the pitch Lee recession

1500
01:14:00,260 --> 01:14:09,500
next please so before people start

1501
01:14:06,739 --> 01:14:11,900
throwing bricks servers are not required

1502
01:14:09,500 --> 01:14:14,210
to concurrently support clients using

1503
01:14:11,900 --> 01:14:16,460
different schema versions those things

1504
01:14:14,210 --> 01:14:19,070
are optional servers are not required to

1505
01:14:16,460 --> 01:14:21,380
support every published version and they

1506
01:14:19,070 --> 01:14:24,019
are not required to support all parts of

1507
01:14:21,380 --> 01:14:26,000
all version schema the important thing

1508
01:14:24,020 --> 01:14:26,630
is when we say support non backwards

1509
01:14:26,000 --> 01:14:29,090
comes come

1510
01:14:26,630 --> 01:14:31,970
all changes if you remove functionality

1511
01:14:29,090 --> 01:14:33,680
in the later yahng yahng yahng version

1512
01:14:31,970 --> 01:14:36,380
obviously you cannot support the newer

1513
01:14:33,680 --> 01:14:38,510
one and the older one but in some cases

1514
01:14:36,380 --> 01:14:40,580
if you've we organized your yang module

1515
01:14:38,510 --> 01:14:42,500
you've moved your nodes around in a non

1516
01:14:40,580 --> 01:14:44,780
backwards compatible way the server

1517
01:14:42,500 --> 01:14:46,300
should be able to support all the older

1518
01:14:44,780 --> 01:14:51,410
version and the newer version

1519
01:14:46,300 --> 01:14:54,920
next please okay so the overview which

1520
01:14:51,410 --> 01:14:56,570
you'll see in the yang tree NEX is you

1521
01:14:54,920 --> 01:14:59,030
know a version schema

1522
01:14:56,570 --> 01:15:01,549
it's a yang schema which Rob was talking

1523
01:14:59,030 --> 01:15:03,710
about with an Associated yang revision

1524
01:15:01,550 --> 01:15:05,720
that could be the semantic version

1525
01:15:03,710 --> 01:15:09,710
number in the draft which will be done

1526
01:15:05,720 --> 01:15:12,800
soon and yes as I said this could be

1527
01:15:09,710 --> 01:15:17,200
yang package the schema set is a set of

1528
01:15:12,800 --> 01:15:20,630
related yang schema one per datastore

1529
01:15:17,200 --> 01:15:22,970
the server support configuration for the

1530
01:15:20,630 --> 01:15:24,710
default schema and they also support

1531
01:15:22,970 --> 01:15:27,320
configuration for what we call the

1532
01:15:24,710 --> 01:15:29,360
secondary and maybe more net confess

1533
01:15:27,320 --> 01:15:32,000
count instances to use different schema

1534
01:15:29,360 --> 01:15:34,309
this is done by a port number for both

1535
01:15:32,000 --> 01:15:38,480
net count and restaurant and for

1536
01:15:34,310 --> 01:15:40,310
restaurant we also support the the

1537
01:15:38,480 --> 01:15:45,019
different route path which we source to

1538
01:15:40,310 --> 01:15:46,900
see like which schema to use this is it

1539
01:15:45,020 --> 01:15:50,720
for this slide next please

1540
01:15:46,900 --> 01:15:55,190
and this is basically the schema tree

1541
01:15:50,720 --> 01:15:56,660
for what I was just describing you can

1542
01:15:55,190 --> 01:15:58,309
see you know you can you can configure

1543
01:15:56,660 --> 01:16:00,980
your the schema sets and all that or

1544
01:15:58,310 --> 01:16:02,960
read/write but in terms of the

1545
01:16:00,980 --> 01:16:05,990
information per datastore that's all

1546
01:16:02,960 --> 01:16:09,230
what the system the server decides to

1547
01:16:05,990 --> 01:16:12,800
support I don't believe we got any

1548
01:16:09,230 --> 01:16:13,730
comments on the we probably need to do

1549
01:16:12,800 --> 01:16:16,280
in Ex Rev

1550
01:16:13,730 --> 01:16:18,290
based on the latest discussions from 104

1551
01:16:16,280 --> 01:16:20,240
work and all that and hopefully we'll

1552
01:16:18,290 --> 01:16:24,320
get this cut will get comments on this

1553
01:16:20,240 --> 01:16:26,030
draft and the yang packages draft and as

1554
01:16:24,320 --> 01:16:28,099
Rob was explaining earlier in the next

1555
01:16:26,030 --> 01:16:31,009
steps for the design team we actually

1556
01:16:28,100 --> 01:16:33,800
want the this draft which is currently

1557
01:16:31,010 --> 01:16:39,180
private draft to be part of the design

1558
01:16:33,800 --> 01:16:41,770
team orc questions

1559
01:16:39,180 --> 01:16:43,300
don't feel obligated to rename it if you

1560
01:16:41,770 --> 01:16:50,320
want to rename it that's fine the

1561
01:16:43,300 --> 01:16:52,930
government okay not to okay and as a

1562
01:16:50,320 --> 01:16:53,590
contributor seeing the protocol names

1563
01:16:52,930 --> 01:16:55,420
there

1564
01:16:53,590 --> 01:16:57,340
alerts me just a little bit macabre

1565
01:16:55,420 --> 01:16:59,800
scoffs you know what about other like

1566
01:16:57,340 --> 01:17:05,020
co-op do we have to call out those

1567
01:16:59,800 --> 01:17:07,420
protocols by name here well if we just

1568
01:17:05,020 --> 01:17:09,340
support port we don't have to I believe

1569
01:17:07,420 --> 01:17:11,500
my recollection is they're separated

1570
01:17:09,340 --> 01:17:13,660
because Raskin has the route path okay

1571
01:17:11,500 --> 01:17:15,130
support but I mean the route path

1572
01:17:13,660 --> 01:17:21,519
support has not been discussed maybe

1573
01:17:15,130 --> 01:17:23,440
we'll take take that out so since

1574
01:17:21,520 --> 01:17:25,210
they're optional you can still have both

1575
01:17:23,440 --> 01:17:28,589
of them and then wholly set that when

1576
01:17:25,210 --> 01:17:28,590
they promote a football yep

1577
01:17:29,410 --> 01:17:33,760
easy too soon okay that's can do you

1578
01:17:31,750 --> 01:17:36,640
have a suggestion here of how many think

1579
01:17:33,760 --> 01:17:38,320
we should attack to know the keystore

1580
01:17:36,640 --> 01:17:40,660
draft some things you've got more

1581
01:17:38,320 --> 01:17:41,950
separation so is that what you're

1582
01:17:40,660 --> 01:17:45,250
suggesting might be a good approach to

1583
01:17:41,950 --> 01:17:46,840
use it I was leading up to it I was

1584
01:17:45,250 --> 01:17:48,670
looking at the port and I was wondering

1585
01:17:46,840 --> 01:17:51,460
what the intention for that port was and

1586
01:17:48,670 --> 01:17:53,590
why wouldn't we be using the the

1587
01:17:51,460 --> 01:17:56,200
appropriate client server drafts from my

1588
01:17:53,590 --> 01:17:57,460
comp oh yeah what's referencing notes

1589
01:17:56,200 --> 01:18:03,760
directly okay

1590
01:17:57,460 --> 01:18:05,530
I need that works yeah well I mean so

1591
01:18:03,760 --> 01:18:08,590
this isn't even adopted work yet but

1592
01:18:05,530 --> 01:18:11,259
nice and the that working neck off will

1593
01:18:08,590 --> 01:18:13,210
be done before this and so hopefully

1594
01:18:11,260 --> 01:18:15,640
it'll be it'll just make sense where I'm

1595
01:18:13,210 --> 01:18:17,470
set then I actually related to that I

1596
01:18:15,640 --> 01:18:36,970
think eventually this draft who then

1597
01:18:17,470 --> 01:18:40,920
would probably end up in good michael

1598
01:18:36,970 --> 01:18:40,920
wings up with a yang model for

1599
01:18:48,260 --> 01:18:51,299
[Music]

1600
01:18:51,670 --> 01:18:57,230
is a microphone hello today I want to

1601
01:18:54,560 --> 01:19:01,730
introduce a data file unit module for in

1602
01:18:57,230 --> 01:19:04,580
the measurement okay sis chapter 2

1603
01:19:01,730 --> 01:19:07,160
funding model fold is a base the network

1604
01:19:04,580 --> 01:19:10,880
policy management and it can provide

1605
01:19:07,160 --> 01:19:13,610
some billete to fold an imagine function

1606
01:19:10,880 --> 01:19:16,640
to control that information a monitor

1607
01:19:13,610 --> 01:19:21,860
state changes on the network element and

1608
01:19:16,640 --> 01:19:25,040
if the sister if the trigger condition

1609
01:19:21,860 --> 01:19:28,309
be meted and you can perform some simple

1610
01:19:25,040 --> 01:19:30,590
and instant action and this document has

1611
01:19:28,310 --> 01:19:33,020
we discussed toys in the working group

1612
01:19:30,590 --> 01:19:36,460
and the since many people are interested

1613
01:19:33,020 --> 01:19:41,930
in two interesting related works

1614
01:19:36,460 --> 01:19:44,840
so we update sir document and in this

1615
01:19:41,930 --> 01:19:48,050
version made a new leaf

1616
01:19:44,840 --> 01:19:52,790
a group ID it can be used to group a set

1617
01:19:48,050 --> 01:19:56,270
of events that can be the group a set of

1618
01:19:52,790 --> 01:19:59,870
key witnesses can be excute together to

1619
01:19:56,270 --> 01:20:03,050
perform some specific tasks for example

1620
01:19:59,870 --> 01:20:09,650
to provides a service assurance and the

1621
01:20:03,050 --> 01:20:13,990
way also optimized must even leave it

1622
01:20:09,650 --> 01:20:17,420
moving from action lists to trigger

1623
01:20:13,990 --> 01:20:20,269
condition lists and allow the one even's

1624
01:20:17,420 --> 01:20:23,440
trigger to reference nazareth even stuff

1625
01:20:20,270 --> 01:20:26,300
nation and the way a change stratford

1626
01:20:23,440 --> 01:20:28,370
condition in choose a variation

1627
01:20:26,300 --> 01:20:30,890
condition to further clarification

1628
01:20:28,370 --> 01:20:33,680
difference between poland trigger and

1629
01:20:30,890 --> 01:20:38,750
the variation trigger and we also

1630
01:20:33,680 --> 01:20:44,230
simplifies action container in this size

1631
01:20:38,750 --> 01:20:47,750
will provide our example how to use this

1632
01:20:44,230 --> 01:20:52,339
module to perform some

1633
01:20:47,750 --> 01:20:56,990
and here with the fund even a and it's

1634
01:20:52,340 --> 01:21:03,700
being used to monitor if the trigger a

1635
01:20:56,990 --> 01:21:07,639
to be we be set up so it can trigger

1636
01:21:03,700 --> 01:21:11,330
even the B and the even P use a call

1637
01:21:07,640 --> 01:21:16,430
even if the even exist and there's a

1638
01:21:11,330 --> 01:21:22,010
polling condition net sending the

1639
01:21:16,430 --> 01:21:25,370
triggers corresponding action to active

1640
01:21:22,010 --> 01:21:31,400
standby a fair work okay and we use a

1641
01:21:25,370 --> 01:21:34,550
group ID to groups is to event to

1642
01:21:31,400 --> 01:21:41,650
perform the proverb provides a sort of

1643
01:21:34,550 --> 01:21:48,710
surance a test okay okay it says

1644
01:21:41,650 --> 01:21:52,190
document have discussed at least it

1645
01:21:48,710 --> 01:21:57,770
system is already discussed three times

1646
01:21:52,190 --> 01:21:59,990
and is same some many people are

1647
01:21:57,770 --> 01:22:17,570
interested in this works so I think

1648
01:21:59,990 --> 01:22:21,280
maybe we can think about document yes is

1649
01:22:17,570 --> 01:22:21,280
there somebody comment at the mic

1650
01:22:33,520 --> 01:22:41,390
processing units just is provide for

1651
01:22:37,250 --> 01:22:44,270
routing policy and here we use this doc

1652
01:22:41,390 --> 01:22:48,260
use this module to perform such high

1653
01:22:44,270 --> 01:22:52,940
service assurance if you here is example

1654
01:22:48,260 --> 01:22:55,700
if for example food loss package across

1655
01:22:52,940 --> 01:22:59,900
the street then it can perform the

1656
01:22:55,700 --> 01:23:02,659
relate action for example logins

1657
01:22:59,900 --> 01:23:08,239
you lost packet cross their food and

1658
01:23:02,659 --> 01:23:29,138
then perform some action to Octavian

1659
01:23:08,239 --> 01:23:29,138
birth of fare over taxes yeah yeah yeah

1660
01:23:29,590 --> 01:23:36,969
we want to define the more generic model

1661
01:23:32,780 --> 01:23:43,239
and they can perform provide ability to

1662
01:23:36,969 --> 01:23:43,239
do service assurance to our munchers

1663
01:24:16,030 --> 01:24:21,009
yeah I understand your question but here

1664
01:24:19,280 --> 01:24:25,580
our document

1665
01:24:21,010 --> 01:24:29,989
ma do not want to coverage routing

1666
01:24:25,580 --> 01:24:35,900
policies the walks and here is just to

1667
01:24:29,989 --> 01:24:43,360
provide okay if some condition met and

1668
01:24:35,900 --> 01:24:43,360
we can do some management walks like

1669
01:24:49,540 --> 01:24:57,619
starting okay policy documents one of

1670
01:24:55,340 --> 01:25:04,179
the co-authors I like I just like to

1671
01:24:57,619 --> 01:25:07,339
state that this is more a data plane

1672
01:25:04,179 --> 01:25:10,849
document whereas the routing is strictly

1673
01:25:07,340 --> 01:25:12,420
a control plane policies for a control

1674
01:25:10,849 --> 01:25:15,510
plane for you know the

1675
01:25:12,420 --> 01:25:17,699
the selection and complete and

1676
01:25:15,510 --> 01:25:20,489
redistribution and Newport export

1677
01:25:17,699 --> 01:25:26,759
complete protocols so there isn't other

1678
01:25:20,489 --> 01:25:29,099
than in the word policy yes so yes so I

1679
01:25:26,760 --> 01:25:30,840
understand this record I think I

1680
01:25:29,100 --> 01:25:34,260
understand this correctly there is no

1681
01:25:30,840 --> 01:25:36,270
correlation between either work neurotic

1682
01:25:34,260 --> 01:25:37,770
working group in the policy there using

1683
01:25:36,270 --> 01:25:40,619
the event condition action as well as

1684
01:25:37,770 --> 01:25:43,230
well as some constant question and in

1685
01:25:40,619 --> 01:25:46,920
this work here is that accurate

1686
01:25:43,230 --> 01:25:49,468
now this work here I would have mixed on

1687
01:25:46,920 --> 01:25:54,420
standings incorrect is this work just

1688
01:25:49,469 --> 01:25:58,489
data plank or is admit the general was

1689
01:25:54,420 --> 01:25:58,489
is it meant for control playing or other

1690
01:25:58,699 --> 01:26:08,730
usages a single the intention for these

1691
01:26:06,420 --> 01:26:12,030
the motive actually means that provider

1692
01:26:08,730 --> 01:26:14,699
of closed loop was of its managing that

1693
01:26:12,030 --> 01:26:18,300
close to a life cycles of its maximum

1694
01:26:14,699 --> 01:26:21,509
punishment and so they can Kalu imagine

1695
01:26:18,300 --> 01:26:24,630
model and probit model so is that using

1696
01:26:21,510 --> 01:26:30,030
this kind of policy in order so they can

1697
01:26:24,630 --> 01:26:36,050
trigger the automation so is a

1698
01:26:30,030 --> 01:26:39,989
management automation is it so is it

1699
01:26:36,050 --> 01:26:43,909
destined for applications of control

1700
01:26:39,989 --> 01:26:43,909
planning data plan or up

1701
01:26:47,620 --> 01:26:53,910
I think not sure we should right next to

1702
01:26:51,580 --> 01:26:56,260
the control plan but I think that may be

1703
01:26:53,910 --> 01:27:07,720
happy to the state of a name and

1704
01:26:56,260 --> 01:27:11,950
imaginary cheapening thank you um who's

1705
01:27:07,720 --> 01:27:14,050
read Benoit clays so goodnight let's

1706
01:27:11,950 --> 01:27:16,389
just explain to him some bio information

1707
01:27:14,050 --> 01:27:20,370
so we created the working group called

1708
01:27:16,390 --> 01:27:25,110
super in the past by use of policy

1709
01:27:20,370 --> 01:27:25,110
scratcher structured reaction shamrock

1710
01:27:29,040 --> 01:27:34,720
was there became an interest raft he has

1711
01:27:33,040 --> 01:27:38,290
submitted their of the main reference

1712
01:27:34,720 --> 01:27:39,910
which is then in that super working

1713
01:27:38,290 --> 01:27:42,220
group the goal must be something generic

1714
01:27:39,910 --> 01:27:43,840
so they had policy that the routing

1715
01:27:42,220 --> 01:27:46,630
policies we're going to be using that

1716
01:27:43,840 --> 01:27:49,480
and security policies to be reusing that

1717
01:27:46,630 --> 01:27:52,000
yep so now it's in the next right it's

1718
01:27:49,480 --> 01:27:54,129
based on the policy document which is

1719
01:27:52,000 --> 01:27:56,740
convert raft but reg do something

1720
01:27:54,130 --> 01:27:59,050
generic while the world has been moving

1721
01:27:56,740 --> 01:28:00,670
out so this is like discrepancy well

1722
01:27:59,050 --> 01:28:04,110
yeah and everyone still needs one of

1723
01:28:00,670 --> 01:28:08,560
these two for each of their applications

1724
01:28:04,110 --> 01:28:12,429
um so who's read this it's actually been

1725
01:28:08,560 --> 01:28:14,080
here twice I believe so far the zero

1726
01:28:12,430 --> 01:28:17,080
zero and the zero one have been

1727
01:28:14,080 --> 01:28:20,350
presented here so who has read it either

1728
01:28:17,080 --> 01:28:25,059
in its present Oh to form or in one of

1729
01:28:20,350 --> 01:28:31,090
the previous forms okay so some people

1730
01:28:25,060 --> 01:28:33,940
have read it of those people who have

1731
01:28:31,090 --> 01:28:41,800
read it actually let's just generalize

1732
01:28:33,940 --> 01:28:46,750
that let's say yeah who here is

1733
01:28:41,800 --> 01:28:50,440
interested in the topic and thinks we

1734
01:28:46,750 --> 01:28:53,190
should do work on it okay

1735
01:28:50,440 --> 01:28:55,620
no hands went down there so

1736
01:28:53,190 --> 01:28:57,719
that's a reason that's a reasonable

1737
01:28:55,620 --> 01:29:05,160
number like that is at least as much

1738
01:28:57,720 --> 01:29:09,090
attention as many of our drafts get who

1739
01:29:05,160 --> 01:29:16,530
thinks we should be doing this somewhere

1740
01:29:09,090 --> 01:29:18,990
else or not at all okay nobody so it

1741
01:29:16,530 --> 01:29:24,540
sounds like you're probably here for

1742
01:29:18,990 --> 01:29:28,160
better or worse yeah so we're at a

1743
01:29:24,540 --> 01:29:34,980
starting point I don't think we will

1744
01:29:28,160 --> 01:29:38,240
yeah yeah no no we want to pull for

1745
01:29:34,980 --> 01:29:40,650
working group adoption after this I

1746
01:29:38,240 --> 01:29:42,269
think you'll be interesting to see how

1747
01:29:40,650 --> 01:29:45,420
many think this is a starting point we

1748
01:29:42,270 --> 01:29:48,840
ask that the last meeting and there was

1749
01:29:45,420 --> 01:29:53,820
a pretty small number you know

1750
01:29:48,840 --> 01:29:56,940
interesting to see if that changed or

1751
01:29:53,820 --> 01:29:59,099
there are people who are not on the list

1752
01:29:56,940 --> 01:30:02,610
of authors presently who are interested

1753
01:29:59,100 --> 01:30:09,630
in this work with an eye towards

1754
01:30:02,610 --> 01:30:12,480
participating in any hands for that okay

1755
01:30:09,630 --> 01:30:14,970
well one partial hand from somebody I

1756
01:30:12,480 --> 01:30:20,639
greatly respect so I guess that's

1757
01:30:14,970 --> 01:30:23,730
probably of some value yeah I think

1758
01:30:20,640 --> 01:30:26,400
we'll probably pull for adoption on the

1759
01:30:23,730 --> 01:30:28,219
list after the meeting so what it sounds

1760
01:30:26,400 --> 01:30:31,500
like

1761
01:30:28,220 --> 01:30:34,040
okay thank you

1762
01:30:31,500 --> 01:30:34,040
next

1763
01:30:45,099 --> 01:30:53,540
hi anime based notification and jin-woo

1764
01:30:50,179 --> 01:30:55,550
is presenting yeah my colleague er is

1765
01:30:53,540 --> 01:30:58,280
not here I represent his topic my name

1766
01:30:55,550 --> 01:31:00,290
is him actually the topic is powder

1767
01:30:58,280 --> 01:31:02,420
empty base notification for antenna

1768
01:31:00,290 --> 01:31:05,989
based another configuration update

1769
01:31:02,420 --> 01:31:08,510
actually this job has been around for a

1770
01:31:05,989 --> 01:31:11,030
while actually moved from net cough

1771
01:31:08,510 --> 01:31:16,040
actually has already presented twice in

1772
01:31:11,030 --> 01:31:18,800
tent mode actually my colleague actually

1773
01:31:16,040 --> 01:31:20,719
revised this chapter base his experience

1774
01:31:18,800 --> 01:31:23,679
on the network network a conversation

1775
01:31:20,719 --> 01:31:26,329
very question so we sinker we most

1776
01:31:23,679 --> 01:31:31,520
negatives job to turn an empty ative

1777
01:31:26,329 --> 01:31:34,219
actually for actually but you know they

1778
01:31:31,520 --> 01:31:36,349
can work together with the problem is a

1779
01:31:34,219 --> 01:31:38,230
negative right now can compare the

1780
01:31:36,349 --> 01:31:40,639
difference between the datastore by the

1781
01:31:38,230 --> 01:31:44,869
limitation is the latter type ability to

1782
01:31:40,639 --> 01:31:49,210
verify whereas an elevation from Indian

1783
01:31:44,869 --> 01:31:52,549
or other sauce take effect so we we sink

1784
01:31:49,210 --> 01:31:56,020
so that the the solution we propose is

1785
01:31:52,550 --> 01:31:58,489
that affine notification actually to

1786
01:31:56,020 --> 01:32:02,780
reporter this cannon a verification

1787
01:31:58,489 --> 01:32:06,949
event to check these miscalculation

1788
01:32:02,780 --> 01:32:08,989
issues but the week not you know check

1789
01:32:06,949 --> 01:32:14,210
out all these miss conversion issue

1790
01:32:08,989 --> 01:32:16,879
because for for summer cases may rely on

1791
01:32:14,210 --> 01:32:21,949
you need to export data from different

1792
01:32:16,880 --> 01:32:24,050
device so so we gave some cases like you

1793
01:32:21,949 --> 01:32:27,129
wanna maintain the considered a

1794
01:32:24,050 --> 01:32:31,190
consistency in network configuration may

1795
01:32:27,130 --> 01:32:33,079
cover a two different device you want to

1796
01:32:31,190 --> 01:32:35,089
maintain the consistency as it is

1797
01:32:33,079 --> 01:32:40,009
something we cannot just use this event

1798
01:32:35,090 --> 01:32:45,650
and here we gave one use cases and we

1799
01:32:40,010 --> 01:32:48,260
think we can use a native to compare the

1800
01:32:45,650 --> 01:32:51,739
antenna with the operational data store

1801
01:32:48,260 --> 01:32:53,720
and we have two different cases so for

1802
01:32:51,739 --> 01:32:56,419
some object that may be present in

1803
01:32:53,720 --> 01:32:59,750
but another present in operational for

1804
01:32:56,420 --> 01:33:02,840
example you may have an interface but

1805
01:32:59,750 --> 01:33:06,470
another physical exist so it can exist

1806
01:33:02,840 --> 01:33:09,560
in antennae but not existing in

1807
01:33:06,470 --> 01:33:11,540
operational another cases they may

1808
01:33:09,560 --> 01:33:15,230
present in operational but not a present

1809
01:33:11,540 --> 01:33:21,290
in intent so typical case actually is

1810
01:33:15,230 --> 01:33:23,500
interface MTU and so here the maximum

1811
01:33:21,290 --> 01:33:27,620
weight way proposed actually we need to

1812
01:33:23,500 --> 01:33:32,600
you know make sure the server can detect

1813
01:33:27,620 --> 01:33:36,200
the hardware changing so this may rely

1814
01:33:32,600 --> 01:33:39,980
on the system interaction with the

1815
01:33:36,200 --> 01:33:43,700
hardware so based on this assumption

1816
01:33:39,980 --> 01:33:47,740
actually we can detect whether there are

1817
01:33:43,700 --> 01:33:50,090
some miss compression issues and

1818
01:33:47,740 --> 01:33:52,160
probably actually here okay we'll get

1819
01:33:50,090 --> 01:33:54,410
some phrase we can compare the

1820
01:33:52,160 --> 01:33:58,610
difference between in 10 and operational

1821
01:33:54,410 --> 01:34:03,190
and we can make sure all this actually

1822
01:33:58,610 --> 01:34:06,589
caused by some mystery sauce and here is

1823
01:34:03,190 --> 01:34:09,860
the motor structure we make some change

1824
01:34:06,590 --> 01:34:15,650
actually we introduce a application tag

1825
01:34:09,860 --> 01:34:18,469
actually to provide additional to

1826
01:34:15,650 --> 01:34:22,429
provide a new parameter to identify each

1827
01:34:18,470 --> 01:34:26,630
update and also we clarified that

1828
01:34:22,430 --> 01:34:31,000
difference with native and we think this

1829
01:34:26,630 --> 01:34:31,000
can work together with a nominative and

1830
01:34:31,780 --> 01:34:39,080
this is the position of the CMD

1831
01:34:35,800 --> 01:34:41,450
notification on education and we already

1832
01:34:39,080 --> 01:34:46,250
present this in an outside eye TM

1833
01:34:41,450 --> 01:34:52,790
meeting and we show how hot the position

1834
01:34:46,250 --> 01:34:54,920
of this message so this job has been

1835
01:34:52,790 --> 01:34:57,410
around for a while and we think actually

1836
01:34:54,920 --> 01:35:00,680
the seems concern synergize with any

1837
01:34:57,410 --> 01:35:04,570
media first so we want to hear what are

1838
01:35:00,680 --> 01:35:04,570
you thing about this again

1839
01:35:05,270 --> 01:35:11,460
yeah so I think the challenge with

1840
01:35:08,790 --> 01:35:17,179
discussing this since I don't see anyone

1841
01:35:11,460 --> 01:35:22,290
running to the mic at the moment is that

1842
01:35:17,179 --> 01:35:26,790
at 104 and 103 there were pretty

1843
01:35:22,290 --> 01:35:29,130
few people who had read this I guess

1844
01:35:26,790 --> 01:35:31,469
that is their queen our show of hands of

1845
01:35:29,130 --> 01:35:33,989
anybody who's read this in either its

1846
01:35:31,469 --> 01:35:38,250
present form or the I guess

1847
01:35:33,989 --> 01:35:41,780
o 1 and O 2 versions that are have been

1848
01:35:38,250 --> 01:35:48,719
present previously prevented presented

1849
01:35:41,780 --> 01:35:52,079
okay well there's a few does do any of

1850
01:35:48,719 --> 01:35:58,500
those people have the willingness to

1851
01:35:52,079 --> 01:36:01,820
express an opinion as to whether or not

1852
01:35:58,500 --> 01:36:10,020
this more work is worth progressing Rob

1853
01:36:01,820 --> 01:36:14,849
I'm gonna put you on the spot so I'm not

1854
01:36:10,020 --> 01:36:15,900
sure it turns off of how I imagine your

1855
01:36:14,849 --> 01:36:18,719
sisters working

1856
01:36:15,900 --> 01:36:20,339
I would imagine more that the devices

1857
01:36:18,719 --> 01:36:22,860
were just monitor operational and

1858
01:36:20,340 --> 01:36:26,760
monitor the system that way around so

1859
01:36:22,860 --> 01:36:29,190
rather than getting errors back from the

1860
01:36:26,760 --> 01:36:31,409
ply failures whether used monitor

1861
01:36:29,190 --> 01:36:34,230
operational and detect the changes

1862
01:36:31,409 --> 01:36:35,790
between what you as an operator wanted

1863
01:36:34,230 --> 01:36:40,169
the device to do and what it's actually

1864
01:36:35,790 --> 01:36:42,719
doing so that's one observation the

1865
01:36:40,170 --> 01:36:44,400
other one is I think that it's possibly

1866
01:36:42,719 --> 01:36:47,690
really hard for some systems to

1867
01:36:44,400 --> 01:36:50,159
implement this to be able to report back

1868
01:36:47,690 --> 01:36:52,980
when some of these operations have

1869
01:36:50,159 --> 01:36:55,019
failed because to be committed to the

1870
01:36:52,980 --> 01:36:58,138
running datastore the configurations

1871
01:36:55,020 --> 01:37:00,119
there the actual apply phase with system

1872
01:36:58,139 --> 01:37:03,900
might go through many different demons

1873
01:37:00,119 --> 01:37:05,759
and my how other intermediate failures

1874
01:37:03,900 --> 01:37:08,070
and things like that so I think

1875
01:37:05,760 --> 01:37:10,320
generally my experience is really hard

1876
01:37:08,070 --> 01:37:14,610
to track these errors back we've always

1877
01:37:10,320 --> 01:37:15,950
struggled with this sort of thing so I'm

1878
01:37:14,610 --> 01:37:21,589
not sure

1879
01:37:15,950 --> 01:37:24,019
that helps I'm not sure yeah one

1880
01:37:21,590 --> 01:37:25,520
clarification amusing actually medical

1881
01:37:24,020 --> 01:37:27,290
computation and verification is very

1882
01:37:25,520 --> 01:37:30,170
popular that's a lot of you know

1883
01:37:27,290 --> 01:37:32,570
research on this and you know this seems

1884
01:37:30,170 --> 01:37:35,840
actually morning--i to this systems data

1885
01:37:32,570 --> 01:37:37,849
that are put into the operational data

1886
01:37:35,840 --> 01:37:42,380
store actually we can leverage this

1887
01:37:37,850 --> 01:37:44,990
network variation Maxim to to do data is

1888
01:37:42,380 --> 01:37:52,790
possible so that's why I bring up this

1889
01:37:44,990 --> 01:37:54,920
kind of idea again it's a certain thing

1890
01:37:52,790 --> 01:37:56,600
for the verification side and check into

1891
01:37:54,920 --> 01:37:58,910
the verification the configuration is

1892
01:37:56,600 --> 01:38:00,620
valid what your state's all about

1893
01:37:58,910 --> 01:38:03,860
completely agree with and that makes

1894
01:38:00,620 --> 01:38:06,740
sense but in terms of the next set of

1895
01:38:03,860 --> 01:38:08,599
applying it which is sort of a sickness

1896
01:38:06,740 --> 01:38:10,370
or semi asynchronous and systems are

1897
01:38:08,600 --> 01:38:13,700
aware of that's the big thing that's

1898
01:38:10,370 --> 01:38:15,260
harder than trackback so I think that if

1899
01:38:13,700 --> 01:38:17,090
you have a simple device you may be able

1900
01:38:15,260 --> 01:38:19,070
to do that and may have value for that

1901
01:38:17,090 --> 01:38:21,830
but I think there's many devices that

1902
01:38:19,070 --> 01:38:24,679
this would be to trigger to do and

1903
01:38:21,830 --> 01:38:26,030
instead you would you expect the

1904
01:38:24,680 --> 01:38:27,740
operator to be monitoring the

1905
01:38:26,030 --> 01:38:30,440
operational safety device and the

1906
01:38:27,740 --> 01:38:32,690
applied configuration to whether this is

1907
01:38:30,440 --> 01:38:34,400
happened or not and another observation

1908
01:38:32,690 --> 01:38:36,019
here is that some things this

1909
01:38:34,400 --> 01:38:38,570
configuration takes a long time to be

1910
01:38:36,020 --> 01:38:41,140
applied so so what do you do in that

1911
01:38:38,570 --> 01:38:41,139
scenario

1912
01:38:44,860 --> 01:38:52,210
Jim Carrey Nokia so when I read the

1913
01:38:48,820 --> 01:38:53,889
draft there was a couple things that

1914
01:38:52,210 --> 01:38:59,650
were it was running through our mind

1915
01:38:53,890 --> 01:39:02,530
I've just couldn't I just couldn't form

1916
01:38:59,650 --> 01:39:05,379
an opinion on because what I've seen

1917
01:39:02,530 --> 01:39:08,380
here is is what we've done in the past

1918
01:39:05,380 --> 01:39:10,030
is grated up the examples that you use

1919
01:39:08,380 --> 01:39:12,400
this is well if I have something tonight

1920
01:39:10,030 --> 01:39:13,960
of the sign oh so did you did and now

1921
01:39:12,400 --> 01:39:15,670
I'm going to put it and there's a

1922
01:39:13,960 --> 01:39:17,860
difference between that and call me

1923
01:39:15,670 --> 01:39:19,540
differences between data source now it's

1924
01:39:17,860 --> 01:39:22,420
gonna put the easy assignment problem

1925
01:39:19,540 --> 01:39:25,120
right and in the past we said okay those

1926
01:39:22,420 --> 01:39:29,050
are just status I'm on the side or not I

1927
01:39:25,120 --> 01:39:32,680
put my own tl-one things right so that's

1928
01:39:29,050 --> 01:39:37,060
usually solved in a status type of thing

1929
01:39:32,680 --> 01:39:39,310
all right so so I was struggling in what

1930
01:39:37,060 --> 01:39:41,620
we wanted to produce notifications for

1931
01:39:39,310 --> 01:39:44,380
right typically to produce notifications

1932
01:39:41,620 --> 01:39:48,430
when there's some sort of mystery but I

1933
01:39:44,380 --> 01:39:51,040
on a Sunday to be this but someone plug

1934
01:39:48,430 --> 01:39:53,620
in that right and then I need to get any

1935
01:39:51,040 --> 01:39:55,900
of that from this particular draft those

1936
01:39:53,620 --> 01:39:57,790
things where I think it's also saw that

1937
01:39:55,900 --> 01:39:59,290
those particular notifications are

1938
01:39:57,790 --> 01:40:00,940
generalized notifications there's

1939
01:39:59,290 --> 01:40:03,070
notifications in the context of the

1940
01:40:00,940 --> 01:40:04,599
problem that you're trying to resolve on

1941
01:40:03,070 --> 01:40:07,360
I'm going to do a quick meet I'm going

1942
01:40:04,600 --> 01:40:09,550
to do that type of stuff and so I that's

1943
01:40:07,360 --> 01:40:12,910
what I was like going on I don't know if

1944
01:40:09,550 --> 01:40:14,830
this will do you realistically if this

1945
01:40:12,910 --> 01:40:16,660
will be you and you really use because I

1946
01:40:14,830 --> 01:40:19,600
think it's the problem the maintenance

1947
01:40:16,660 --> 01:40:23,590
of the use in the and the person or the

1948
01:40:19,600 --> 01:40:26,530
enemy that's interpreting that is not

1949
01:40:23,590 --> 01:40:28,270
the server the thing being actuated for

1950
01:40:26,530 --> 01:40:30,190
the thing that's doing acts like the

1951
01:40:28,270 --> 01:40:32,170
client and that's that's what I was

1952
01:40:30,190 --> 01:40:34,419
going through my head as I go through

1953
01:40:32,170 --> 01:40:42,310
this I go I don't know

1954
01:40:34,420 --> 01:40:48,420
there's other ways of doing it thank you

1955
01:40:42,310 --> 01:40:50,500
I think what we're hearing here like is

1956
01:40:48,420 --> 01:40:54,450
some people who have given this a little

1957
01:40:50,500 --> 01:40:56,260
thought but they're not they're not

1958
01:40:54,450 --> 01:40:58,150
necessarily interested in being

1959
01:40:56,260 --> 01:40:58,600
consumers of it and that would actually

1960
01:40:58,150 --> 01:41:01,120
I

1961
01:40:58,600 --> 01:41:03,490
think be the sort of thing that would

1962
01:41:01,120 --> 01:41:05,620
drive interest or its implementation and

1963
01:41:03,490 --> 01:41:13,860
refinement and would also get us better

1964
01:41:05,620 --> 01:41:17,650
feedback so I think um I I think

1965
01:41:13,860 --> 01:41:19,509
borrowing some kind of expression of

1966
01:41:17,650 --> 01:41:22,000
interest of that variety on the list

1967
01:41:19,510 --> 01:41:27,790
this is probably not something that we

1968
01:41:22,000 --> 01:41:29,710
need to revisit if if you know if we can

1969
01:41:27,790 --> 01:41:31,990
find that or muster the energy in the

1970
01:41:29,710 --> 01:41:35,050
community for people who are interested

1971
01:41:31,990 --> 01:41:37,030
in it then I think it's pretty easy to

1972
01:41:35,050 --> 01:41:38,680
come back here and go well we've

1973
01:41:37,030 --> 01:41:41,759
reviewed this enough that we can call

1974
01:41:38,680 --> 01:41:44,320
for adoption but I don't think we have I

1975
01:41:41,760 --> 01:41:46,870
don't think we have the level of energy

1976
01:41:44,320 --> 01:41:48,639
or enthusiasm with respect to being

1977
01:41:46,870 --> 01:41:51,070
consumers of this that would cause us to

1978
01:41:48,640 --> 01:41:53,320
to really ask that question at this

1979
01:41:51,070 --> 01:41:56,259
point okay um thank you for your

1980
01:41:53,320 --> 01:41:58,870
diligent efforts however yeah thank you

1981
01:41:56,260 --> 01:42:28,030
to refine this into something and to

1982
01:41:58,870 --> 01:42:30,240
seek feedback thank you it's in the

1983
01:42:28,030 --> 01:42:30,240
other room

1984
01:42:38,300 --> 01:42:53,010
that's not it's noisy so watch their

1985
01:42:50,100 --> 01:42:55,520
semen on to this one we focus on a

1986
01:42:53,010 --> 01:42:55,520
transition

1987
01:43:12,590 --> 01:43:18,639
I'm gay protocol translation you see it

1988
01:43:15,499 --> 01:43:18,639
yeah I see that

1989
01:43:32,769 --> 01:43:39,050
okay this is a tumor again and I want to

1990
01:43:36,919 --> 01:43:41,929
talk about an MD protocol transition

1991
01:43:39,050 --> 01:43:45,979
issue discussion there's a many

1992
01:43:41,929 --> 01:43:49,269
discussion here we already have lot of

1993
01:43:45,979 --> 01:43:49,269
discussion on these kind of issues

1994
01:43:49,510 --> 01:43:54,050
actually recap a little bit because

1995
01:43:52,729 --> 01:43:56,329
right now actually

1996
01:43:54,050 --> 01:43:58,429
Nana colress coming and he has ought to

1997
01:43:56,329 --> 01:44:01,039
be published and actually right now

1998
01:43:58,429 --> 01:44:06,169
mostly idea for young anymore should be

1999
01:44:01,039 --> 01:44:08,268
the NMDA compliant and also there's more

2000
01:44:06,169 --> 01:44:11,229
young a motor that developers should be

2001
01:44:08,269 --> 01:44:15,709
done be combined but we still see

2002
01:44:11,229 --> 01:44:18,050
actually there's some temporary and no

2003
01:44:15,709 --> 01:44:20,479
MDA actually exist to bridge the capper

2004
01:44:18,050 --> 01:44:24,919
of the time period and kill them they

2005
01:44:20,479 --> 01:44:31,449
can be available so we see there's

2006
01:44:24,919 --> 01:44:35,869
transition stages so our you know

2007
01:44:31,449 --> 01:44:38,509
confusion is how how so how long is this

2008
01:44:35,869 --> 01:44:42,159
transition period will will take

2009
01:44:38,510 --> 01:44:46,880
actually when this can get started when

2010
01:44:42,159 --> 01:44:48,978
and so so so we have some misconception

2011
01:44:46,880 --> 01:44:51,469
with sinker the current are empty young

2012
01:44:48,979 --> 01:44:53,719
town lying actually only provide a

2013
01:44:51,469 --> 01:44:55,999
guideline for the young trans transition

2014
01:44:53,719 --> 01:44:59,599
but the tenant provide the transition

2015
01:44:55,999 --> 01:45:03,169
kind line for the protocols actually so

2016
01:44:59,599 --> 01:45:07,159
especially another case actually so

2017
01:45:03,169 --> 01:45:10,789
protocol actually if we forego support

2018
01:45:07,159 --> 01:45:13,728
empty but you you still can use some

2019
01:45:10,789 --> 01:45:16,340
Nnamdi modules so so this is something

2020
01:45:13,729 --> 01:45:18,709
we think maybe there's some gap actually

2021
01:45:16,340 --> 01:45:21,010
maybe this is a misconception we already

2022
01:45:18,709 --> 01:45:23,530
discussed this

2023
01:45:21,010 --> 01:45:30,149
on the man is also offline discussion

2024
01:45:23,530 --> 01:45:35,079
with several people and so here we give

2025
01:45:30,149 --> 01:45:36,789
several option you know we have a client

2026
01:45:35,079 --> 01:45:39,369
actually they can be the MBK liner

2027
01:45:36,789 --> 01:45:42,518
convenient lambda cannot client for the

2028
01:45:39,369 --> 01:45:48,728
device who support a net AMD could be

2029
01:45:42,519 --> 01:45:50,979
the AMD server on and no long an MDA

2030
01:45:48,729 --> 01:45:54,909
server but in a between we single may be

2031
01:45:50,979 --> 01:45:58,840
the other cases you know for the server

2032
01:45:54,909 --> 01:46:01,539
they only implement MDA Maxim but it

2033
01:45:58,840 --> 01:46:05,909
doesn't implement the button tenant

2034
01:46:01,539 --> 01:46:12,039
support MDA combined young data model so

2035
01:46:05,909 --> 01:46:14,888
actually talked with some some people we

2036
01:46:12,039 --> 01:46:17,679
think the lacing the semi an empty is a

2037
01:46:14,889 --> 01:46:22,539
very confusion maybe we were Chester you

2038
01:46:17,679 --> 01:46:24,280
know we can remove these semi MDA so so

2039
01:46:22,539 --> 01:46:27,599
based on these are some she actually we

2040
01:46:24,280 --> 01:46:35,079
we sink you know the colonel problem is

2041
01:46:27,599 --> 01:46:38,880
when the non empty a client they talk to

2042
01:46:35,079 --> 01:46:44,499
the server who support the Amity and an

2043
01:46:38,880 --> 01:46:46,059
MBA actually using the traditional get

2044
01:46:44,499 --> 01:46:49,119
operation you cannot get as a

2045
01:46:46,059 --> 01:46:52,079
system-generated complication so we try

2046
01:46:49,119 --> 01:46:55,389
to address these issues

2047
01:46:52,079 --> 01:46:59,139
we propose a three different solutions

2048
01:46:55,389 --> 01:47:04,260
so the first one actually you know we

2049
01:46:59,139 --> 01:47:07,539
can add as a state a copy node in in the

2050
01:47:04,260 --> 01:47:10,479
inner MTA young big mantra I think this

2051
01:47:07,539 --> 01:47:13,119
is another good approach it because we

2052
01:47:10,479 --> 01:47:16,959
already moved to order an MD we add back

2053
01:47:13,119 --> 01:47:19,780
actually seems you know actually not a

2054
01:47:16,959 --> 01:47:22,780
reasonable actually but this is the one

2055
01:47:19,780 --> 01:47:24,459
solution we can using the get operation

2056
01:47:22,780 --> 01:47:27,130
challenging get operation to care as a

2057
01:47:24,459 --> 01:47:30,188
system generator

2058
01:47:27,130 --> 01:47:34,030
the second option is we can you know

2059
01:47:30,189 --> 01:47:37,449
define the state module state model well

2060
01:47:34,030 --> 01:47:40,478
using the same structure as an MDA

2061
01:47:37,449 --> 01:47:43,829
module and this is something already be

2062
01:47:40,479 --> 01:47:47,949
discussed in mm dae-jung timeline and

2063
01:47:43,829 --> 01:47:50,369
but the problem is this state of module

2064
01:47:47,949 --> 01:47:54,789
actually for some cases that you may

2065
01:47:50,369 --> 01:47:56,679
when we actually move toward an MD for

2066
01:47:54,789 --> 01:48:00,969
some MD model doesn't define of these

2067
01:47:56,679 --> 01:48:03,670
stay the module so that will cause you

2068
01:48:00,969 --> 01:48:06,820
know we when we implement this we need

2069
01:48:03,670 --> 01:48:11,440
to implement some non-standard state a

2070
01:48:06,820 --> 01:48:14,978
module so whether we should you know ask

2071
01:48:11,440 --> 01:48:18,879
all the NMB multi-with you provide us

2072
01:48:14,979 --> 01:48:20,920
data module so this is a something we

2073
01:48:18,880 --> 01:48:23,229
single could be the solution but the

2074
01:48:20,920 --> 01:48:25,659
with this data mode you stay the model

2075
01:48:23,229 --> 01:48:26,979
we can actually address the problem we

2076
01:48:25,659 --> 01:48:30,869
can care system generate the

2077
01:48:26,979 --> 01:48:34,630
confirmation from these data modules

2078
01:48:30,869 --> 01:48:36,848
the third option actually we can

2079
01:48:34,630 --> 01:48:39,699
actually you know enhance the get

2080
01:48:36,849 --> 01:48:41,650
operation to allow uses the traditional

2081
01:48:39,699 --> 01:48:44,558
ket operation you get a system generated

2082
01:48:41,650 --> 01:48:47,710
a pattern this actually the impactor is

2083
01:48:44,559 --> 01:48:50,440
you know only modular post so we think

2084
01:48:47,710 --> 01:48:54,309
that's possible to actually get but that

2085
01:48:50,440 --> 01:48:56,949
we simply is very you know the influence

2086
01:48:54,309 --> 01:49:01,409
we haven't evaluated we Singham

2087
01:48:56,949 --> 01:49:04,419
maybe it's very hard to see this so we

2088
01:49:01,409 --> 01:49:08,679
so we we propose these three different

2089
01:49:04,420 --> 01:49:11,260
solution so so the first question we

2090
01:49:08,679 --> 01:49:14,639
want to ask is actually church as you

2091
01:49:11,260 --> 01:49:17,590
know as we assumed actually we may have

2092
01:49:14,639 --> 01:49:21,579
for for the server name a support semi

2093
01:49:17,590 --> 01:49:24,010
an MDA so we you know so the question is

2094
01:49:21,579 --> 01:49:26,289
a supporter you know when when we

2095
01:49:24,010 --> 01:49:27,900
migrated to the MDA just athos away

2096
01:49:26,289 --> 01:49:30,340
supporter and MDA

2097
01:49:27,900 --> 01:49:32,710
protocol like an alcohol rescue empty

2098
01:49:30,340 --> 01:49:34,840
air support and then we can support a M

2099
01:49:32,710 --> 01:49:36,999
de young beta model are we when we

2100
01:49:34,840 --> 01:49:39,249
implement all the other choices that we

2101
01:49:36,999 --> 01:49:40,090
implement the young Vinney model and MDA

2102
01:49:39,249 --> 01:49:47,110
protocol

2103
01:49:40,090 --> 01:49:47,860
at the same time so so so we for the

2104
01:49:47,110 --> 01:49:51,009
option

2105
01:49:47,860 --> 01:49:53,949
we we proposed actually we may have

2106
01:49:51,010 --> 01:49:55,570
three option me we may actually be

2107
01:49:53,949 --> 01:49:59,460
single we can skip these transition

2108
01:49:55,570 --> 01:50:02,679
stage if we can go directly to the nmda

2109
01:49:59,460 --> 01:50:04,869
solution actually this already be done

2110
01:50:02,679 --> 01:50:07,690
by ITF is a completed standard solution

2111
01:50:04,869 --> 01:50:11,349
but the we the problem we are facing is

2112
01:50:07,690 --> 01:50:14,769
we sink we assume many at nanoka line

2113
01:50:11,350 --> 01:50:18,250
that doesn't support an mp4 right now at

2114
01:50:14,770 --> 01:50:22,480
this stage here how to migrate it and so

2115
01:50:18,250 --> 01:50:25,540
we propose the another to option one is

2116
01:50:22,480 --> 01:50:29,849
option one actually option will actually

2117
01:50:25,540 --> 01:50:33,219
you may take a one of solution we prefer

2118
01:50:29,850 --> 01:50:36,219
actually the the solution to actually

2119
01:50:33,219 --> 01:50:38,260
you may define a state a module but this

2120
01:50:36,219 --> 01:50:41,889
is not a standard state a module in some

2121
01:50:38,260 --> 01:50:46,810
cases so another one which has to you

2122
01:50:41,889 --> 01:50:49,239
know Chester you know agrees there's a

2123
01:50:46,810 --> 01:50:51,100
transition stage it but there we may be

2124
01:50:49,239 --> 01:50:52,900
we may have different no standard

2125
01:50:51,100 --> 01:50:58,239
solution we we can pick oh what do we

2126
01:50:52,900 --> 01:51:01,719
and take so that's a option we single we

2127
01:50:58,239 --> 01:51:12,150
can address these kind of issues any

2128
01:51:01,719 --> 01:51:16,389
comments on this so I mean I I think

2129
01:51:12,150 --> 01:51:18,940
pragmatically probably something to so I

2130
01:51:16,389 --> 01:51:21,790
think one Colin here is the potential

2131
01:51:18,940 --> 01:51:24,519
for a given server or vendor they could

2132
01:51:21,790 --> 01:51:25,989
have a bespoke in a conflict switch to

2133
01:51:24,520 --> 01:51:29,560
choose whether it's going in and nmda

2134
01:51:25,989 --> 01:51:31,269
mode I think for a lot of deployments

2135
01:51:29,560 --> 01:51:33,190
that's probably sufficient and fine and

2136
01:51:31,270 --> 01:51:34,690
that the operators would would either

2137
01:51:33,190 --> 01:51:37,540
upgrade all their clients and won't go

2138
01:51:34,690 --> 01:51:40,239
or not so to do this in terms of the

2139
01:51:37,540 --> 01:51:42,070
option to we do there is a specification

2140
01:51:40,239 --> 01:51:44,080
in the young off guidelines of how to

2141
01:51:42,070 --> 01:51:46,750
generate that state module that's quite

2142
01:51:44,080 --> 01:51:50,440
prescriptive and fairly easy steps so

2143
01:51:46,750 --> 01:51:52,360
one option here could be to say the ITF

2144
01:51:50,440 --> 01:51:55,509
young modules that we run through that

2145
01:51:52,360 --> 01:51:58,420
process and we dump those date trees and

2146
01:51:55,510 --> 01:52:01,430
the names well-defined into github for

2147
01:51:58,420 --> 01:52:04,160
example and then they're just there so

2148
01:52:01,430 --> 01:52:06,530
I think that that may be a pragmatic way

2149
01:52:04,160 --> 01:52:09,559
for it and then the other session I had

2150
01:52:06,530 --> 01:52:12,980
was I think on vesties in terms of the

2151
01:52:09,560 --> 01:52:15,050
new young library and get operations

2152
01:52:12,980 --> 01:52:18,019
used to have a case of where existing

2153
01:52:15,050 --> 01:52:20,720
gets returns there are the extra spec

2154
01:52:18,020 --> 01:52:22,940
trees exact estate modules but the new

2155
01:52:20,720 --> 01:52:25,850
ones also work as before so I think

2156
01:52:22,940 --> 01:52:27,650
there are ways through this whether we

2157
01:52:25,850 --> 01:52:32,810
needed another standard or document to

2158
01:52:27,650 --> 01:52:34,910
define the I don't know yeah the puzzle

2159
01:52:32,810 --> 01:52:37,730
we're facing is the way which taker the

2160
01:52:34,910 --> 01:52:40,849
operation to actually we need to you

2161
01:52:37,730 --> 01:52:42,919
know have a completed standard solution

2162
01:52:40,850 --> 01:52:46,100
you for every an MD model you should

2163
01:52:42,920 --> 01:52:48,770
define and stay the module so for some

2164
01:52:46,100 --> 01:52:51,320
Oh an empty a model they may didn't

2165
01:52:48,770 --> 01:52:54,140
define the state model such as a motive

2166
01:52:51,320 --> 01:52:56,960
attack or some maybe some other cases or

2167
01:52:54,140 --> 01:53:01,010
so that will delay implementation so how

2168
01:52:56,960 --> 01:53:03,140
do you how do you address these so I

2169
01:53:01,010 --> 01:53:06,110
think it's just you need to publish a

2170
01:53:03,140 --> 01:53:08,480
scientific you publishing I took routine

2171
01:53:06,110 --> 01:53:10,519
- state I think that's okay with the

2172
01:53:08,480 --> 01:53:11,839
same version number and you follow that

2173
01:53:10,520 --> 01:53:13,940
also how to generate it and then you've

2174
01:53:11,840 --> 01:53:16,130
got that state route so even if they are

2175
01:53:13,940 --> 01:53:18,320
not included with the appendix that

2176
01:53:16,130 --> 01:53:22,070
module how to construct that equivalent

2177
01:53:18,320 --> 01:53:25,280
state module is defined so it logically

2178
01:53:22,070 --> 01:53:27,410
this doesn't just because this is a file

2179
01:53:25,280 --> 01:53:29,269
somewhere I think two different vendors

2180
01:53:27,410 --> 01:53:30,519
could apparently generate that same

2181
01:53:29,270 --> 01:53:43,130
module

2182
01:53:30,520 --> 01:53:46,220
yeah Tim do you want to go okay so Kent

2183
01:53:43,130 --> 01:53:48,260
as a contributor so you say agree that

2184
01:53:46,220 --> 01:53:50,330
there's an NDA a transition period I

2185
01:53:48,260 --> 01:53:52,460
mean that is in fact what we have right

2186
01:53:50,330 --> 01:53:53,840
now we are in a in MD a transition

2187
01:53:52,460 --> 01:53:58,310
period so I don't think there's anything

2188
01:53:53,840 --> 01:54:00,170
to agree on the you also early on your

2189
01:53:58,310 --> 01:54:03,710
other slide I think is solution number

2190
01:54:00,170 --> 01:54:06,980
two you mention the possibility that the

2191
01:54:03,710 --> 01:54:08,390
bad state module is missing but I think

2192
01:54:06,980 --> 01:54:11,509
that's a hypothetical like do you

2193
01:54:08,390 --> 01:54:13,610
actually have an example of dismissing

2194
01:54:11,510 --> 01:54:14,730
ya Modi tag actually is a typical

2195
01:54:13,610 --> 01:54:17,519
example

2196
01:54:14,730 --> 01:54:19,769
that one that particular draft was

2197
01:54:17,520 --> 01:54:22,280
discussed on this just recently it's

2198
01:54:19,770 --> 01:54:25,500
okay for that draft not have a - state

2199
01:54:22,280 --> 01:54:29,370
equivalent because it contains no config

2200
01:54:25,500 --> 01:54:31,500
false notes and also the has no

2201
01:54:29,370 --> 01:54:33,900
meaningful operational impact have

2202
01:54:31,500 --> 01:54:35,730
tracked the operational value of the

2203
01:54:33,900 --> 01:54:39,030
conviction notes so it's actually

2204
01:54:35,730 --> 01:54:42,450
allowed to not have a state variant for

2205
01:54:39,030 --> 01:54:45,000
that draft yeah but I see the nd respond

2206
01:54:42,450 --> 01:54:47,580
actually he sees is wrong but I don't

2207
01:54:45,000 --> 01:54:49,410
know but it may be this is another cool

2208
01:54:47,580 --> 01:54:51,750
example actually we have some other you

2209
01:54:49,410 --> 01:54:55,500
dumb prods Chester you know operated for

2210
01:54:51,750 --> 01:54:58,440
some of mmm be compliant model doesn't

2211
01:54:55,500 --> 01:55:01,080
define state emotive so so these state a

2212
01:54:58,440 --> 01:55:03,750
mode we should be follows a young and a

2213
01:55:01,080 --> 01:55:06,570
young kind line and but this is not a

2214
01:55:03,750 --> 01:55:10,020
standard state Amodeo so it's just that

2215
01:55:06,570 --> 01:55:12,509
defined in the appendix issue we are

2216
01:55:10,020 --> 01:55:14,610
free to may be different people given a

2217
01:55:12,510 --> 01:55:17,520
developer implement in different ways

2218
01:55:14,610 --> 01:55:24,960
that will cause the you know you know a

2219
01:55:17,520 --> 01:55:27,330
lot of interoperability issues models

2220
01:55:24,960 --> 01:55:30,240
that are progressing right now through

2221
01:55:27,330 --> 01:55:34,920
the ITF that don't have - state that are

2222
01:55:30,240 --> 01:55:38,160
an FDA compliant yeah I haven't check of

2223
01:55:34,920 --> 01:55:39,530
these so if that exists we should go

2224
01:55:38,160 --> 01:55:41,910
back to the working group that's

2225
01:55:39,530 --> 01:55:44,070
progressing that tell them they they

2226
01:55:41,910 --> 01:55:47,070
should add - okay unless there's a

2227
01:55:44,070 --> 01:55:51,360
reason not to and if the ist is

2228
01:55:47,070 --> 01:55:56,610
processing if the is GE is processing

2229
01:55:51,360 --> 01:55:58,500
such in in other areas they the ISP

2230
01:55:56,610 --> 01:56:01,889
should should say you need to get formed

2231
01:55:58,500 --> 01:56:04,710
with the PCP and it is true that like in

2232
01:56:01,890 --> 01:56:06,720
tags one of the ways you conform is

2233
01:56:04,710 --> 01:56:09,990
we've looked at it and don't think it's

2234
01:56:06,720 --> 01:56:11,880
opiate for this particular module so

2235
01:56:09,990 --> 01:56:15,660
that's a that's an okay - way to conform

2236
01:56:11,880 --> 01:56:19,770
with the BCP okay but if it's going on

2237
01:56:15,660 --> 01:56:21,720
and really this is a comment i Torrini

2238
01:56:19,770 --> 01:56:25,520
to bring back to the is-3 is please make

2239
01:56:21,720 --> 01:56:25,520
sure that the PCE is being followed

2240
01:56:26,510 --> 01:56:35,300
yeah that's a cool situation definitely

2241
01:56:29,120 --> 01:56:37,040
knew these he says that the I think it's

2242
01:56:35,300 --> 01:56:41,570
the introduction or the abstract to say

2243
01:56:37,040 --> 01:56:43,700
that module conforms to NMDA or not it

2244
01:56:41,570 --> 01:56:46,489
just says to imitate well it should also

2245
01:56:43,700 --> 01:56:49,070
have in it the thing like we have

2246
01:56:46,489 --> 01:56:50,870
especially looked at and have concluded

2247
01:56:49,070 --> 01:56:53,870
that it's not necessary to conform to

2248
01:56:50,870 --> 01:56:55,970
NMDA so it's explicit supposedly said

2249
01:56:53,870 --> 01:56:58,010
yeah there's some saying maybe there's

2250
01:56:55,970 --> 01:57:01,130
something guideline should be modified

2251
01:56:58,010 --> 01:57:02,750
to just yeah yeah yeah okay but

2252
01:57:01,130 --> 01:57:04,070
regardless I think what Rob said earlier

2253
01:57:02,750 --> 01:57:06,320
is that if there isn't missing that

2254
01:57:04,070 --> 01:57:08,420
state on a published draft we can always

2255
01:57:06,320 --> 01:57:26,330
retroactively to go back and publish the

2256
01:57:08,420 --> 01:57:31,520
- state for okay okay okay let me

2257
01:57:26,330 --> 01:57:33,650
utilize others SPO those were our two

2258
01:57:31,520 --> 01:57:37,130
great models on my own right so they

2259
01:57:33,650 --> 01:57:39,710
said oh okay yeah we need your stuff

2260
01:57:37,130 --> 01:57:42,970
it's all problem who use it well the

2261
01:57:39,710 --> 01:57:45,500
problem is is that we moved to NDA right

2262
01:57:42,970 --> 01:57:50,750
there are organizations that said I'm

2263
01:57:45,500 --> 01:57:53,860
not going to produce a module that has

2264
01:57:50,750 --> 01:57:57,080
produced eight modules friends of d8 -

2265
01:57:53,860 --> 01:57:59,769
so their organization - yes yes sir

2266
01:57:57,080 --> 01:58:02,630
that's the standard operating procedure

2267
01:57:59,770 --> 01:58:05,270
there are organizations that says that

2268
01:58:02,630 --> 01:58:08,570
will do them right so there's a problem

2269
01:58:05,270 --> 01:58:11,330
in the industry that were not consistent

2270
01:58:08,570 --> 01:58:15,500
on our point of the Rothstein transition

2271
01:58:11,330 --> 01:58:21,200
to them yet and I would say that as the

2272
01:58:15,500 --> 01:58:24,010
the authors and the owners that probably

2273
01:58:21,200 --> 01:58:26,510
has incumbent upon this group us to

2274
01:58:24,010 --> 01:58:28,530
provide guidance where it's necessary

2275
01:58:26,510 --> 01:58:30,390
above and beyond

2276
01:58:28,530 --> 01:58:32,719
now we've done that need some of the

2277
01:58:30,390 --> 01:58:35,730
some of the guidance I will say the guys

2278
01:58:32,720 --> 01:58:42,830
in some of the groups that are marketed

2279
01:58:35,730 --> 01:58:46,889
and looked at that since 1918 and has

2280
01:58:42,830 --> 01:58:49,559
has made some decisions of it right s -

2281
01:58:46,890 --> 01:58:53,190
I can't go into too much because of both

2282
01:58:49,560 --> 01:58:55,230
member organization tree had have made

2283
01:58:53,190 --> 01:58:56,610
decisions on some sort of some of the

2284
01:58:55,230 --> 01:58:58,650
decisions that have been made here says

2285
01:58:56,610 --> 01:59:00,950
everything has to be a state model but

2286
01:58:58,650 --> 01:59:03,360
they're getting caught up on some of the

2287
01:59:00,950 --> 01:59:05,160
permutations that human even was missed

2288
01:59:03,360 --> 01:59:09,089
in earlier drafts which says I got that

2289
01:59:05,160 --> 01:59:10,559
non on a client's client you know for

2290
01:59:09,090 --> 01:59:12,110
permutations trying to find the

2291
01:59:10,560 --> 01:59:15,930
circuitry

2292
01:59:12,110 --> 01:59:18,210
audience aw server is not defined like

2293
01:59:15,930 --> 01:59:20,850
in what and they're getting cut up

2294
01:59:18,210 --> 01:59:30,750
around like some of the operations that

2295
01:59:20,850 --> 01:59:33,390
we're introduced it so I like my my

2296
01:59:30,750 --> 01:59:35,940
concern is is that if we don't talk

2297
01:59:33,390 --> 01:59:38,220
about this I don't know if we've got I

2298
01:59:35,940 --> 01:59:39,929
don't know if we've got all all the

2299
01:59:38,220 --> 01:59:44,010
pieces in place that we get from

2300
01:59:39,930 --> 01:59:46,890
industry the necessary guidance that

2301
01:59:44,010 --> 01:59:50,070
they need to get through this we're just

2302
01:59:46,890 --> 01:59:53,100
I think crates tink modules and has to

2303
01:59:50,070 --> 01:59:59,849
end and look at the existing DCP some

2304
01:59:53,100 --> 02:00:11,310
say some of the resolutions in this one

2305
01:59:59,850 --> 02:00:11,910
room was simply okay so we are out of

2306
02:00:11,310 --> 02:00:16,410
time

2307
02:00:11,910 --> 02:00:17,670
just quickly so three things one I'm and

2308
02:00:16,410 --> 02:00:19,349
we'll have to take all this the lists

2309
02:00:17,670 --> 02:00:21,030
but one I'm wondering if we should

2310
02:00:19,350 --> 02:00:22,710
consider a flag day something on the

2311
02:00:21,030 --> 02:00:24,750
order of currently the guideline to say

2312
02:00:22,710 --> 02:00:26,970
you know as soon as possible but maybe

2313
02:00:24,750 --> 02:00:29,550
we should as important group say how

2314
02:00:26,970 --> 02:00:30,990
many years one year two year three years

2315
02:00:29,550 --> 02:00:32,910
like is there a deadline should there be

2316
02:00:30,990 --> 02:00:35,670
a deadline if so could we do that

2317
02:00:32,910 --> 02:00:38,099
secondly Andy had written something -

2318
02:00:35,670 --> 02:00:40,950
Jabar but we don't have time to go model

2319
02:00:38,100 --> 02:00:42,250
text and lastly I knew one of the ask if

2320
02:00:40,950 --> 02:00:44,519
there's some interest in

2321
02:00:42,250 --> 02:00:46,900
Leia's on to address your issue Tim

2322
02:00:44,520 --> 02:00:59,110
again we're out of time so we'll take

2323
02:00:46,900 --> 02:01:00,879
all that to list thank you and there is

2324
02:00:59,110 --> 02:01:05,440
like a yang next meeting tomorrow

2325
02:01:00,880 --> 02:01:09,250
morning yeah for that amazing actually

2326
02:01:05,440 --> 02:01:13,839
there's a young next step meeting on

2327
02:01:09,250 --> 02:01:15,730
Tuesday morning remember you can check

2328
02:01:13,840 --> 02:01:18,280
out the wiki page for the side meeting

2329
02:01:15,730 --> 02:01:20,530
and we will organize this meeting to

2330
02:01:18,280 --> 02:01:25,330
discuss the summer issue may be related

2331
02:01:20,530 --> 02:01:31,840
to the I am the transition but not know

2332
02:01:25,330 --> 02:01:34,240
that is who I actually just so it is a

2333
02:01:31,840 --> 02:01:36,460
side meeting that and if you're

2334
02:01:34,240 --> 02:01:43,809
interested in it you should go but it is

2335
02:01:36,460 --> 02:01:45,190
not one of our things okay thank you if

2336
02:01:43,810 --> 02:01:47,320
you haven't signed the blue sheet please

2337
02:01:45,190 --> 02:01:49,500
come up and do so this is your last

2338
02:01:47,320 --> 02:01:49,500
opportunity

