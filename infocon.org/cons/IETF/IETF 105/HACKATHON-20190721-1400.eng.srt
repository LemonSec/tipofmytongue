1
00:00:07,570 --> 00:00:11,920
I'm just trying to get the downloads

2
00:00:18,960 --> 00:00:22,059
[Music]

3
00:00:28,480 --> 00:00:33,530
remember what that was how we got that

4
00:00:30,950 --> 00:00:39,890
you know I think when you down to get

5
00:00:33,530 --> 00:00:53,870
one maybe gear files so it's this is it

6
00:00:39,890 --> 00:00:54,920
oh I see I use the default so we could

7
00:00:53,870 --> 00:00:57,379
just go through them

8
00:00:54,920 --> 00:01:09,410
yeah and then once we're through we'll

9
00:00:57,379 --> 00:01:10,789
probably have to go okay so I'm just

10
00:01:09,410 --> 00:01:14,509
gonna go through these in the order that

11
00:01:10,790 --> 00:01:19,190
they happen to get downloaded here so

12
00:01:14,510 --> 00:01:20,750
the first one is the floor is DNS so

13
00:01:19,190 --> 00:01:31,750
will somebody come up from the floors

14
00:01:20,750 --> 00:01:31,750
DNS and give your presentation excuse me

15
00:01:38,650 --> 00:01:49,870
okay we'll do you later that's not a

16
00:01:45,500 --> 00:01:49,870
problem not a problem we'll do you later

17
00:01:51,700 --> 00:01:58,600
okay so let's go with the next one

18
00:01:55,360 --> 00:01:58,600
spin dump

19
00:02:18,990 --> 00:02:24,160
yeah it's quite the maze to get up here

20
00:02:21,970 --> 00:02:27,640
at after after he's done I'll try to

21
00:02:24,160 --> 00:02:29,400
give the next person a cue to move your

22
00:02:27,640 --> 00:02:32,049
way to the front of the room before you

23
00:02:29,400 --> 00:02:34,720
you know so we don't take as much time

24
00:02:32,050 --> 00:02:35,820
all right so just use the left and right

25
00:02:34,720 --> 00:02:38,890
keys too

26
00:02:35,820 --> 00:02:41,739
okay so here's the presentation of the

27
00:02:38,890 --> 00:02:46,119
quick measurements table and our project

28
00:02:41,740 --> 00:02:47,980
we call spin dump so we've been working

29
00:02:46,120 --> 00:02:51,670
for a couple of IDF's on this spindle

30
00:02:47,980 --> 00:02:53,859
tool it's a network latency measurement

31
00:02:51,670 --> 00:02:57,369
tool basically that looks at quick in

32
00:02:53,860 --> 00:02:58,930
other protocols today we had some ideas

33
00:02:57,370 --> 00:03:03,370
of implementing some experimental

34
00:02:58,930 --> 00:03:05,170
proposals for measuring packet loss so

35
00:03:03,370 --> 00:03:06,760
there are a few different proposals out

36
00:03:05,170 --> 00:03:11,010
on using some of the reserved bits in

37
00:03:06,760 --> 00:03:13,239
the short header of the quick packets so

38
00:03:11,010 --> 00:03:15,190
we needed also to create some sort of

39
00:03:13,239 --> 00:03:16,750
unified handling of quick versions

40
00:03:15,190 --> 00:03:19,510
because we now start see a lot of

41
00:03:16,750 --> 00:03:23,709
different versions and different uses of

42
00:03:19,510 --> 00:03:25,899
these experimental bits and yeah that's

43
00:03:23,709 --> 00:03:27,549
basically what we try to do and what cut

44
00:03:25,900 --> 00:03:29,640
down was that we made a table driven

45
00:03:27,549 --> 00:03:33,070
version of experimental and

46
00:03:29,640 --> 00:03:35,200
non-experimental quick versions we

47
00:03:33,070 --> 00:03:38,829
implemented two drafts of these lost

48
00:03:35,200 --> 00:03:41,649
measurement bits and we are currently

49
00:03:38,830 --> 00:03:46,420
developing sort of reporting of loss

50
00:03:41,650 --> 00:03:48,579
measurement events in our tool we're

51
00:03:46,420 --> 00:03:51,548
also integrating this into some testing

52
00:03:48,579 --> 00:03:53,829
environments using it for instance

53
00:03:51,549 --> 00:03:55,739
mignonette test vm that we can use to

54
00:03:53,829 --> 00:03:57,790
test a lot of different networks yeah

55
00:03:55,739 --> 00:04:02,380
scenarios basically we also did a bunch

56
00:03:57,790 --> 00:04:05,250
of bug fixes this is a list of how we

57
00:04:02,380 --> 00:04:07,120
are handling different quick versions so

58
00:04:05,250 --> 00:04:09,220
previously we had kind of nasty

59
00:04:07,120 --> 00:04:11,250
structures where different behaviors

60
00:04:09,220 --> 00:04:13,540
based on different quick versions

61
00:04:11,250 --> 00:04:16,120
basically we had go into every function

62
00:04:13,540 --> 00:04:19,000
and check which person list now we have

63
00:04:16,120 --> 00:04:21,220
generalized this quite nicely so so that

64
00:04:19,000 --> 00:04:23,560
we can add new experimental versions

65
00:04:21,220 --> 00:04:25,630
with new support for different header

66
00:04:23,560 --> 00:04:26,840
formats etc and and yeah make it much

67
00:04:25,630 --> 00:04:31,690
more dynamic you know

68
00:04:26,840 --> 00:04:34,099
and yep that's right

69
00:04:31,690 --> 00:04:37,639
so some of the lost detection proposals

70
00:04:34,100 --> 00:04:40,400
that got implemented was one that is

71
00:04:37,639 --> 00:04:44,000
based on these cue and orbits that will

72
00:04:40,400 --> 00:04:46,060
be presented at map RG so we have that

73
00:04:44,000 --> 00:04:52,250
implemented and we also have this

74
00:04:46,060 --> 00:04:54,320
round-trip loss measurements so we have

75
00:04:52,250 --> 00:04:57,139
a bunch of process in there what did we

76
00:04:54,320 --> 00:04:59,030
learn was that supporting all quick

77
00:04:57,139 --> 00:05:01,130
versions is quite demanding it's quite

78
00:04:59,030 --> 00:05:03,138
demanding - especially when we have a

79
00:05:01,130 --> 00:05:05,330
protocol that's evolving and we have a

80
00:05:03,139 --> 00:05:07,940
lot of experimental proposals to have a

81
00:05:05,330 --> 00:05:12,260
nice structure of handling you know all

82
00:05:07,940 --> 00:05:14,419
of these different cases we see that

83
00:05:12,260 --> 00:05:16,370
both these loss detection proposals have

84
00:05:14,419 --> 00:05:18,680
measurements in real networks and we

85
00:05:16,370 --> 00:05:22,310
hope to be able to to facilitate more

86
00:05:18,680 --> 00:05:24,020
measurements of this but yeah problem is

87
00:05:22,310 --> 00:05:25,700
that we only have two reserved bits and

88
00:05:24,020 --> 00:05:30,289
to reserved bits for two proposals is

89
00:05:25,700 --> 00:05:32,539
quite not that much so this was done

90
00:05:30,290 --> 00:05:35,750
with the me mark sealer yuriko's

91
00:05:32,539 --> 00:05:37,969
investor Fabio morrow in Alexandria you

92
00:05:35,750 --> 00:05:41,740
can find our tool it's been dumped at at

93
00:05:37,970 --> 00:05:44,240
github and the new measurements

94
00:05:41,740 --> 00:05:55,490
proposals you can find at these links so

95
00:05:44,240 --> 00:05:57,880
yeah that's it okay thanks let's I want

96
00:05:55,490 --> 00:05:57,880
to be

97
00:06:12,000 --> 00:06:16,450
okay

98
00:06:13,150 --> 00:06:19,000
PTP notifications is next and kickoff

99
00:06:16,450 --> 00:06:22,030
nope sorry

100
00:06:19,000 --> 00:06:30,430
io am make your way to the front so we

101
00:06:22,030 --> 00:06:38,500
don't waste time can't use the right and

102
00:06:30,430 --> 00:06:42,730
left hi my name is Sachin vishwaroopa

103
00:06:38,500 --> 00:06:45,220
I'm from Cisco system and myself and of

104
00:06:42,730 --> 00:06:48,550
us we worked on the PTP notification I

105
00:06:45,220 --> 00:06:51,730
am for the first time for ITF as you can

106
00:06:48,550 --> 00:06:54,610
see as you can see I will not use the

107
00:06:51,730 --> 00:06:58,840
format and maybe next time we'll follow

108
00:06:54,610 --> 00:07:02,560
the same thing so essentially in Cisco I

109
00:06:58,840 --> 00:07:04,690
work on IP fabric as some of you may or

110
00:07:02,560 --> 00:07:07,000
may not be aware but these days the

111
00:07:04,690 --> 00:07:09,969
paradigm on the media also is changing

112
00:07:07,000 --> 00:07:13,270
it's moving away from the standard SDI

113
00:07:09,970 --> 00:07:15,100
to IP based fabrics and that's what we

114
00:07:13,270 --> 00:07:17,919
were called one of the key things there

115
00:07:15,100 --> 00:07:20,230
is the PTP there is the synchronization

116
00:07:17,920 --> 00:07:23,080
between the your media gateways

117
00:07:20,230 --> 00:07:25,630
endpoints as well as the video audio

118
00:07:23,080 --> 00:07:27,820
sync is very critical and the accuracy

119
00:07:25,630 --> 00:07:30,610
needs to be less than 400 nano second

120
00:07:27,820 --> 00:07:33,580
and that's the reason we use PDP with

121
00:07:30,610 --> 00:07:35,680
the PDP today we actually have as I

122
00:07:33,580 --> 00:07:39,580
notice you have the standard for the

123
00:07:35,680 --> 00:07:42,070
young already defined like RFC 85-75 but

124
00:07:39,580 --> 00:07:44,560
what is more critical for us too is to

125
00:07:42,070 --> 00:07:45,909
get the notification and that's because

126
00:07:44,560 --> 00:07:48,790
of the number of sinks which are

127
00:07:45,910 --> 00:07:51,610
involved in the PTP in the PTB like in

128
00:07:48,790 --> 00:07:53,920
the precision time protocol in a second

129
00:07:51,610 --> 00:07:56,020
we typically think eight times so we

130
00:07:53,920 --> 00:07:58,840
cannot expect network management system

131
00:07:56,020 --> 00:08:01,390
to sync and find out the deviation from

132
00:07:58,840 --> 00:08:03,940
those samples because if you think about

133
00:08:01,390 --> 00:08:07,419
one day for a single switch we generate

134
00:08:03,940 --> 00:08:09,040
around 700,000 the sample points and so

135
00:08:07,420 --> 00:08:11,950
we want to do it in a distributed

136
00:08:09,040 --> 00:08:13,720
fashion so what we are thinking is to

137
00:08:11,950 --> 00:08:16,030
extend what we have with today with the

138
00:08:13,720 --> 00:08:18,900
PTP yang to introduce like a new

139
00:08:16,030 --> 00:08:18,900
notification there

140
00:08:20,380 --> 00:08:25,460
okay this slide again talks about the

141
00:08:23,120 --> 00:08:27,470
synchronization I mean earlier when we

142
00:08:25,460 --> 00:08:31,070
started on the audio video right if you

143
00:08:27,470 --> 00:08:34,880
are using a lower signal or maybe think

144
00:08:31,070 --> 00:08:37,279
about like ultra HD HD 4k 8 K now the

145
00:08:34,880 --> 00:08:39,289
buffer cannot be that big right so

146
00:08:37,279 --> 00:08:41,779
that's reason synchronization is

147
00:08:39,289 --> 00:08:43,789
critical I put some more things but more

148
00:08:41,779 --> 00:08:46,189
importantly you can think like audio and

149
00:08:43,789 --> 00:08:52,370
video Nate green thing and that's what

150
00:08:46,190 --> 00:08:56,150
we have been working on so these are the

151
00:08:52,370 --> 00:08:59,150
use cases what we wanted to address it

152
00:08:56,150 --> 00:09:01,670
in the hackathon so essentially for the

153
00:08:59,150 --> 00:09:04,610
live event we wanted to monitor and

154
00:09:01,670 --> 00:09:08,120
monitor our notification again depending

155
00:09:04,610 --> 00:09:10,790
upon the media profile the the duration

156
00:09:08,120 --> 00:09:13,550
and the stake all those parameters need

157
00:09:10,790 --> 00:09:15,709
to vary and that second we wanted to do

158
00:09:13,550 --> 00:09:20,120
the configuration as well as generate

159
00:09:15,710 --> 00:09:23,180
the notification sure so in the

160
00:09:20,120 --> 00:09:26,630
hackathon we have the deliverables we

161
00:09:23,180 --> 00:09:28,160
defined today make a PDP an notification

162
00:09:26,630 --> 00:09:30,950
model again we need to review with the

163
00:09:28,160 --> 00:09:32,900
team we develop a third party

164
00:09:30,950 --> 00:09:34,540
application on Cisco switch so the real

165
00:09:32,900 --> 00:09:37,610
deliverable here was a Python script

166
00:09:34,540 --> 00:09:40,279
which will consume on the switch and

167
00:09:37,610 --> 00:09:41,930
push it away our notification to the

168
00:09:40,279 --> 00:09:44,600
existing product we have like an

169
00:09:41,930 --> 00:09:46,339
environment solution and we extended

170
00:09:44,600 --> 00:09:49,040
that to introduce a new REST API to

171
00:09:46,339 --> 00:09:54,020
consume that notification and overlay

172
00:09:49,040 --> 00:09:57,890
the PTP information on top so it's kind

173
00:09:54,020 --> 00:09:59,360
of pie chart but I am sharing the slide

174
00:09:57,890 --> 00:10:01,880
so you can see the example I will pay

175
00:09:59,360 --> 00:10:04,700
load as well as notification and this is

176
00:10:01,880 --> 00:10:06,680
how the user interface looks like here

177
00:10:04,700 --> 00:10:09,140
what you are seeing is fine leaf

178
00:10:06,680 --> 00:10:11,329
topology with Cisco switches and based

179
00:10:09,140 --> 00:10:13,160
upon the PTP offset threshold those

180
00:10:11,330 --> 00:10:15,589
witches at the runtime are color coded

181
00:10:13,160 --> 00:10:18,050
so based on the notification which

182
00:10:15,589 --> 00:10:21,200
WebSocket it dynamically updates the

183
00:10:18,050 --> 00:10:22,339
screen so based on the number of sample

184
00:10:21,200 --> 00:10:24,860
which has deviated

185
00:10:22,339 --> 00:10:26,990
we actually color code those and this

186
00:10:24,860 --> 00:10:29,360
was just idea just to demo that part and

187
00:10:26,990 --> 00:10:31,670
this is the back end where we introduced

188
00:10:29,360 --> 00:10:32,310
like a new application on the back end

189
00:10:31,670 --> 00:10:34,439
with the Python

190
00:10:32,310 --> 00:10:37,109
trip which completely integrates with

191
00:10:34,440 --> 00:10:39,360
the Cisco CLI so it's as if like a

192
00:10:37,110 --> 00:10:41,010
original part of the Cisco it's coming

193
00:10:39,360 --> 00:10:43,410
from Cisco and you can monitor and

194
00:10:41,010 --> 00:10:45,630
control the notification part of it so

195
00:10:43,410 --> 00:10:47,610
that was the idea the whole idea is to

196
00:10:45,630 --> 00:11:03,120
take the notification and integrate into

197
00:10:47,610 --> 00:11:14,779
the PTP thank you okay I

198
00:11:03,120 --> 00:11:19,290
is up and il NP is on deck so this was a

199
00:11:14,779 --> 00:11:22,500
project to do IO am which is in situ om

200
00:11:19,290 --> 00:11:25,170
operations and management basic idea if

201
00:11:22,500 --> 00:11:27,839
you're not familiar is to have an ipv6

202
00:11:25,170 --> 00:11:31,829
extension header hop-by-hop option that

203
00:11:27,839 --> 00:11:33,930
contains an IO am option which is

204
00:11:31,830 --> 00:11:35,610
information that the router fills in as

205
00:11:33,930 --> 00:11:38,150
the packet goes along its path so the

206
00:11:35,610 --> 00:11:41,070
ideas were taken metrics and performance

207
00:11:38,150 --> 00:11:44,220
measurements from routers in a path so

208
00:11:41,070 --> 00:11:46,650
the goal we had today in yesterday was

209
00:11:44,220 --> 00:11:49,470
to implement something and show some

210
00:11:46,650 --> 00:11:52,319
interoperability there was a couple of

211
00:11:49,470 --> 00:11:54,029
drafts on the IO am one is on the

212
00:11:52,320 --> 00:11:58,589
specific option when is on the data

213
00:11:54,029 --> 00:12:01,230
format and what we did we brought up UDP

214
00:11:58,589 --> 00:12:04,410
paying that's a little program to you to

215
00:12:01,230 --> 00:12:07,250
a UDP ping that sets the extension

216
00:12:04,410 --> 00:12:10,980
header and the IOM option and we had a

217
00:12:07,250 --> 00:12:13,740
client-server one router and we were

218
00:12:10,980 --> 00:12:16,589
able to follow the path and have the

219
00:12:13,740 --> 00:12:18,900
information filled in the kernel

220
00:12:16,589 --> 00:12:21,029
implementation or the router was

221
00:12:18,900 --> 00:12:24,000
provided by Justin that's at this github

222
00:12:21,029 --> 00:12:26,430
and separately the client in the server

223
00:12:24,000 --> 00:12:28,260
code was a different implementation all

224
00:12:26,430 --> 00:12:30,709
of these were on linux hopefully next

225
00:12:28,260 --> 00:12:34,730
IETF hackathon will have some more

226
00:12:30,709 --> 00:12:38,339
router or host implementations join in

227
00:12:34,730 --> 00:12:41,360
so the way this works for what we do we

228
00:12:38,339 --> 00:12:43,980
ping a remote host add a few options and

229
00:12:41,360 --> 00:12:46,980
as you can see we got some response back

230
00:12:43,980 --> 00:12:49,230
and we parse the IO am message that we

231
00:12:46,980 --> 00:12:50,089
got back and sure enough the router

232
00:12:49,230 --> 00:12:54,000
filled it in

233
00:12:50,089 --> 00:12:56,940
so more interestingly is the note

234
00:12:54,000 --> 00:13:00,540
information this is directly from the

235
00:12:56,940 --> 00:13:02,910
IOM draft various pieces of information

236
00:13:00,540 --> 00:13:05,599
so I have the egress interface and Gress

237
00:13:02,910 --> 00:13:07,709
interface timestamps transit delay

238
00:13:05,600 --> 00:13:10,280
things like that so there's quite a bit

239
00:13:07,709 --> 00:13:14,510
of information that we could potentially

240
00:13:10,280 --> 00:13:14,510
gather from the network in this fashion

241
00:13:14,910 --> 00:13:19,850
we did learn a few things particularly

242
00:13:17,519 --> 00:13:22,529
trying to to get things dinner operate

243
00:13:19,850 --> 00:13:25,529
getting the lengths right we're parsing

244
00:13:22,529 --> 00:13:27,509
fields particularly fields that hold

245
00:13:25,529 --> 00:13:29,850
lengths that correlate to other lengths

246
00:13:27,509 --> 00:13:31,709
that was kind of interesting bit fields

247
00:13:29,850 --> 00:13:33,029
don't make things easier in this regard

248
00:13:31,709 --> 00:13:36,779
especially when they're split across

249
00:13:33,029 --> 00:13:40,740
byte boundaries and we also have a few

250
00:13:36,779 --> 00:13:43,350
suggestions to I ppm particularly in

251
00:13:40,740 --> 00:13:46,050
some of the data formatting cake data

252
00:13:43,350 --> 00:13:48,660
format for instance it's a lot easier to

253
00:13:46,050 --> 00:13:50,699
deal with fixed fields than variable

254
00:13:48,660 --> 00:13:53,149
length data in this regard so we

255
00:13:50,699 --> 00:13:57,060
probably have some good feedback on that

256
00:13:53,149 --> 00:13:58,889
wrapping it up so we had a good number

257
00:13:57,060 --> 00:14:12,869
of team members and a couple of first

258
00:13:58,889 --> 00:14:29,760
timers at IETF hackathon thank you okay

259
00:14:12,870 --> 00:14:32,480
Olympia's up and taps is on deck okay so

260
00:14:29,760 --> 00:14:35,580
just some background information on

261
00:14:32,480 --> 00:14:37,110
island P we had the first demo of what

262
00:14:35,580 --> 00:14:40,230
will eventually be a public release of

263
00:14:37,110 --> 00:14:43,529
the code at the last ITF and we've just

264
00:14:40,230 --> 00:14:46,020
been developing that especially trying

265
00:14:43,529 --> 00:14:48,570
to fix some bugs that we found in a tie

266
00:14:46,020 --> 00:14:50,850
T of 1:04 which was very useful to to

267
00:14:48,570 --> 00:14:53,100
know about so the plan here was really

268
00:14:50,850 --> 00:14:55,950
to make sure that Island P could work

269
00:14:53,100 --> 00:14:58,710
over a real network that's the idea

270
00:14:55,950 --> 00:15:02,000
eventually and so what we had was a

271
00:14:58,710 --> 00:15:04,290
network that consisted of some low-end

272
00:15:02,000 --> 00:15:06,810
rooters but they are just commercial

273
00:15:04,290 --> 00:15:08,819
rooters they run ipv6 only the idea is

274
00:15:06,810 --> 00:15:10,709
that Island P works completely end to

275
00:15:08,820 --> 00:15:12,570
end so the core rooters just think

276
00:15:10,710 --> 00:15:14,580
you're running ipv6 whereas actually

277
00:15:12,570 --> 00:15:17,089
you're running Island P and the other

278
00:15:14,580 --> 00:15:19,830
thing that came through a fortuitous

279
00:15:17,089 --> 00:15:23,400
conversation with Stefan BOTS mayor was

280
00:15:19,830 --> 00:15:25,620
some DNS improvements help with DNS in

281
00:15:23,400 --> 00:15:27,990
general and I'll say a little bit more

282
00:15:25,620 --> 00:15:29,880
about those in a slide coming up so

283
00:15:27,990 --> 00:15:31,740
these the key things that we managed to

284
00:15:29,880 --> 00:15:34,610
work out today we did some test runs

285
00:15:31,740 --> 00:15:37,230
with TCP / Island P running over these

286
00:15:34,610 --> 00:15:39,140
commercial rooters between two boxes

287
00:15:37,230 --> 00:15:43,910
that were running an island P modified

288
00:15:39,140 --> 00:15:46,560
Linux kernel and but running over these

289
00:15:43,910 --> 00:15:49,500
commercial rooters and we had some

290
00:15:46,560 --> 00:15:51,540
discussions on fixing a possible issue

291
00:15:49,500 --> 00:15:54,089
with DNS additional information

292
00:15:51,540 --> 00:15:55,319
processing and that was actually fixed

293
00:15:54,089 --> 00:15:57,750
so that was a good outcome

294
00:15:55,320 --> 00:16:00,000
I spoke to Stephan BOTS man after I

295
00:15:57,750 --> 00:16:02,430
uploaded these slides I should also

296
00:16:00,000 --> 00:16:04,589
thank so I didn't put his name in but

297
00:16:02,430 --> 00:16:07,529
Peters bachik actually did the coding to

298
00:16:04,589 --> 00:16:10,100
put this fix into one of the the DNS

299
00:16:07,529 --> 00:16:13,890
service so thank you for that as well

300
00:16:10,100 --> 00:16:16,680
this is the demo that we had running we

301
00:16:13,890 --> 00:16:20,069
had the it's not really easy to see but

302
00:16:16,680 --> 00:16:21,870
you've got two boxes at the what is your

303
00:16:20,070 --> 00:16:24,030
right hand edge running the island P

304
00:16:21,870 --> 00:16:26,760
code and in the middle we've got four

305
00:16:24,030 --> 00:16:30,810
little edge rooted boxes

306
00:16:26,760 --> 00:16:33,810
those are r1 r2 r3 marked in the logical

307
00:16:30,810 --> 00:16:36,359
diagram and we emulated a mobile node

308
00:16:33,810 --> 00:16:39,109
moving across them so no mobile IP

309
00:16:36,360 --> 00:16:41,160
they're just unicast routing and what

310
00:16:39,110 --> 00:16:43,440
happened is that as the mobile node

311
00:16:41,160 --> 00:16:45,930
moves across this running a TCP flow

312
00:16:43,440 --> 00:16:48,150
from the blue node the correspondent

313
00:16:45,930 --> 00:16:50,729
node while it moves and we just wanted

314
00:16:48,150 --> 00:16:53,540
to see can Island P do what's meant to

315
00:16:50,730 --> 00:16:55,740
do which is to change its location

316
00:16:53,540 --> 00:16:59,099
seamlessly as it moves across those

317
00:16:55,740 --> 00:17:01,890
different networks and the results we

318
00:16:59,100 --> 00:17:03,420
had showed here on this graph the

319
00:17:01,890 --> 00:17:05,129
individual throughput on the network

320
00:17:03,420 --> 00:17:07,199
shown on the top three facets of the

321
00:17:05,130 --> 00:17:09,930
graph and on the bottom graph is just

322
00:17:07,199 --> 00:17:11,730
the aggregate throughput you see of a

323
00:17:09,930 --> 00:17:14,250
correspondent node so that was pretty

324
00:17:11,730 --> 00:17:16,410
good we got a consistent TCP flow

325
00:17:14,250 --> 00:17:18,839
running across those commercial routers

326
00:17:16,410 --> 00:17:21,390
running Island P and to end they were

327
00:17:18,839 --> 00:17:24,270
just running unicast routing but we had

328
00:17:21,390 --> 00:17:27,630
a mobile node this was work that was

329
00:17:24,270 --> 00:17:30,240
done mainly by my PhD student who's

330
00:17:27,630 --> 00:17:33,210
working with me at the that's saying my

331
00:17:30,240 --> 00:17:35,220
time is up at the university of san

332
00:17:33,210 --> 00:17:37,380
andrews and we had some former students

333
00:17:35,220 --> 00:17:38,730
who also contributed some code and just

334
00:17:37,380 --> 00:17:41,280
some thanks to some people who have made

335
00:17:38,730 --> 00:17:43,800
it possible for me to be here today

336
00:17:41,280 --> 00:17:47,450
thank you very much

337
00:17:43,800 --> 00:17:47,450
[Applause]

338
00:17:52,570 --> 00:18:04,810
okay I - inner-self is next and tap is

339
00:17:56,170 --> 00:18:06,730
now taps is now hi hi I'm Theresa I'm

340
00:18:04,810 --> 00:18:08,770
presenting for the new taps table which

341
00:18:06,730 --> 00:18:12,430
is for transport services just a quick

342
00:18:08,770 --> 00:18:15,700
recap what taps is so we are developing

343
00:18:12,430 --> 00:18:17,680
a sort of an abstract API for different

344
00:18:15,700 --> 00:18:19,930
transport protocols and those are just

345
00:18:17,680 --> 00:18:22,000
the Transfer Protocol it's our current

346
00:18:19,930 --> 00:18:23,320
PI tabs implementation supports of

347
00:18:22,000 --> 00:18:25,390
course it would be nice to have Quicken

348
00:18:23,320 --> 00:18:27,460
there as well so the idea is the

349
00:18:25,390 --> 00:18:30,190
application specifies some extract

350
00:18:27,460 --> 00:18:31,810
requirements and then it gets a generic

351
00:18:30,190 --> 00:18:33,640
connection and the application doesn't

352
00:18:31,810 --> 00:18:37,149
have to care whether it's like a new

353
00:18:33,640 --> 00:18:39,520
transport protocol and this is being

354
00:18:37,150 --> 00:18:42,580
worked on by the tabs working group

355
00:18:39,520 --> 00:18:45,850
right now in those three drafts now in

356
00:18:42,580 --> 00:18:49,120
our PI tabs implementation we added a

357
00:18:45,850 --> 00:18:54,250
few things here at the hackathon so we

358
00:18:49,120 --> 00:18:56,500
have tests now and we worked on racing

359
00:18:54,250 --> 00:18:58,330
between different transport protocols so

360
00:18:56,500 --> 00:19:00,040
of course those are not really

361
00:18:58,330 --> 00:19:01,929
equivalent but if we have transport

362
00:19:00,040 --> 00:19:05,889
protocols that are sort of provide the

363
00:19:01,930 --> 00:19:07,390
same features and we can try them at the

364
00:19:05,890 --> 00:19:09,940
same time and sort of go have the

365
00:19:07,390 --> 00:19:11,500
eyeballs on them and we are working on

366
00:19:09,940 --> 00:19:14,230
that right now also we are working on

367
00:19:11,500 --> 00:19:16,860
getting multicast to work which is kind

368
00:19:14,230 --> 00:19:19,540
of work in progress also we have a nice

369
00:19:16,860 --> 00:19:21,790
interesting concept called framers so

370
00:19:19,540 --> 00:19:24,220
the idea is you get a byte stream from

371
00:19:21,790 --> 00:19:26,139
key city but then you have a sort of a

372
00:19:24,220 --> 00:19:29,290
delimiter that limits your byte stream

373
00:19:26,140 --> 00:19:31,420
into messages and this is a concept that

374
00:19:29,290 --> 00:19:33,760
has been added to or that has been

375
00:19:31,420 --> 00:19:36,430
expanded in the recent draft and so

376
00:19:33,760 --> 00:19:39,070
we've been discussing framers a lot and

377
00:19:36,430 --> 00:19:40,900
there's also going to be a more

378
00:19:39,070 --> 00:19:42,310
discussion on this concept in the

379
00:19:40,900 --> 00:19:44,340
working group so we have some feedback

380
00:19:42,310 --> 00:19:46,389
because in our implementation we have

381
00:19:44,340 --> 00:19:48,010
implemented it and some parts were

382
00:19:46,390 --> 00:19:50,920
unclear also we're going to discuss how

383
00:19:48,010 --> 00:19:54,430
much we of this we have to specify from

384
00:19:50,920 --> 00:19:56,770
the tests we could fix some box in our

385
00:19:54,430 --> 00:19:59,320
implementation obviously but also we are

386
00:19:56,770 --> 00:20:01,690
sort of modeling the input that we get

387
00:19:59,320 --> 00:20:03,580
from the application and maybe also

388
00:20:01,690 --> 00:20:06,040
we're going to model the output sort of

389
00:20:03,580 --> 00:20:08,050
the resulting connection so

390
00:20:06,040 --> 00:20:10,090
let's see where this leads in terms of

391
00:20:08,050 --> 00:20:12,220
comparing different implementations and

392
00:20:10,090 --> 00:20:15,610
don't also we have some other minor

393
00:20:12,220 --> 00:20:17,440
additions to the draft so the people who

394
00:20:15,610 --> 00:20:21,219
were there the entire week and are

395
00:20:17,440 --> 00:20:22,870
mostly Jake Max and me also we had more

396
00:20:21,220 --> 00:20:24,430
discussions with people from the working

397
00:20:22,870 --> 00:20:26,800
group Phillip and told me for example

398
00:20:24,430 --> 00:20:29,140
and so thank you for thank you to

399
00:20:26,800 --> 00:20:41,560
everybody who contributed to that and

400
00:20:29,140 --> 00:20:57,510
this is the link to our repo okay I to

401
00:20:41,560 --> 00:21:02,010
NSF now and SR v6 VPN yawning next hello

402
00:20:57,510 --> 00:21:06,370
hello this is a person from sko in Korea

403
00:21:02,010 --> 00:21:21,280
let me introduce I to NSF of primal walk

404
00:21:06,370 --> 00:21:24,100
hack hackathon project this time so this

405
00:21:21,280 --> 00:21:28,149
time I - and I said hackathon project we

406
00:21:24,100 --> 00:21:31,240
want to pro concept the person over I -

407
00:21:28,150 --> 00:21:34,480
and I said framework can work on top of

408
00:21:31,240 --> 00:21:39,370
a commercial probably cloud platform it

409
00:21:34,480 --> 00:21:44,260
is called SOA you can see security on

410
00:21:39,370 --> 00:21:47,439
air so we approved our three interfaces

411
00:21:44,260 --> 00:21:50,620
on top of this commercial platform and

412
00:21:47,440 --> 00:21:55,900
also we demonstrate the security policy

413
00:21:50,620 --> 00:22:01,570
and translator is works well so this is

414
00:21:55,900 --> 00:22:04,690
a building block and so this shows that

415
00:22:01,570 --> 00:22:10,270
our internet draft on at I - and as a

416
00:22:04,690 --> 00:22:12,550
working guru and this is a poster so

417
00:22:10,270 --> 00:22:16,530
this is our during the weekend we work

418
00:22:12,550 --> 00:22:20,310
together Tim Porter so this figure shows

419
00:22:16,530 --> 00:22:23,220
I - and SF so this is a

420
00:22:20,310 --> 00:22:27,990
nice I to another frame work or project

421
00:22:23,220 --> 00:22:32,100
so so you may be a panel reader this one

422
00:22:27,990 --> 00:22:38,550
so this time we embarked with commercial

423
00:22:32,100 --> 00:22:43,110
fiber NSF so here we is fire and also we

424
00:22:38,550 --> 00:22:46,470
used previously we used the Rakata open

425
00:22:43,110 --> 00:22:49,290
source the red bitter so this time we

426
00:22:46,470 --> 00:22:52,500
combined the commercial our power and

427
00:22:49,290 --> 00:22:54,899
open source should be cut up for web

428
00:22:52,500 --> 00:22:58,320
filter together on top of commercial

429
00:22:54,900 --> 00:23:07,220
public cloud system developed by the ATR

430
00:22:58,320 --> 00:23:11,570
in Korea and so to slide a demonstrate

431
00:23:07,220 --> 00:23:18,390
mmm a copper over here you can see

432
00:23:11,570 --> 00:23:21,659
demonstration here so the register to

433
00:23:18,390 --> 00:23:25,080
NSF for features and also consumer I to

434
00:23:21,660 --> 00:23:28,080
pay she used it to deliver the security

435
00:23:25,080 --> 00:23:32,540
policy in the high labor point of view

436
00:23:28,080 --> 00:23:36,149
and then security controller translate

437
00:23:32,540 --> 00:23:38,850
halide policy into local policy so this

438
00:23:36,150 --> 00:23:42,060
is a see you can see a one you see is

439
00:23:38,850 --> 00:23:44,429
the one you get so we provide the user

440
00:23:42,060 --> 00:23:47,520
interface to easily configure that 12

441
00:23:44,430 --> 00:23:51,390
script functions using that is test boat

442
00:23:47,520 --> 00:23:54,690
yeah okay so we provide the two or

443
00:23:51,390 --> 00:23:57,420
scenarios filtering and we return so

444
00:23:54,690 --> 00:24:00,450
this time we prove our concept

445
00:23:57,420 --> 00:24:03,600
I told except interfaces are watching on

446
00:24:00,450 --> 00:24:05,400
top of a commercial platform also we

447
00:24:03,600 --> 00:24:05,730
show that the translator is a working

448
00:24:05,400 --> 00:24:11,430
well

449
00:24:05,730 --> 00:24:13,830
so well tomorrow hack demo our where we

450
00:24:11,430 --> 00:24:15,630
can attempt to rate will be happy with

451
00:24:13,830 --> 00:24:18,620
the European thank you for your

452
00:24:15,630 --> 00:24:18,620
listening thank you

453
00:24:19,170 --> 00:24:22,339
[Applause]

454
00:24:24,840 --> 00:24:42,360
OKs rv6 VPN yang and coming up is LP

455
00:24:29,350 --> 00:24:46,629
when this is Michael and about introduce

456
00:24:42,360 --> 00:24:49,299
hack projects of SRO six within

457
00:24:46,629 --> 00:24:51,789
configuration journey the module yes

458
00:24:49,299 --> 00:24:54,789
this is our hacked in and we know we are

459
00:24:51,789 --> 00:24:59,590
a deployment server sixty weakened and

460
00:24:54,789 --> 00:25:02,500
the configure sr60 I'll meet him

461
00:24:59,590 --> 00:25:05,649
sorry six unit module and the sender as

462
00:25:02,500 --> 00:25:08,320
our v6 model is under development by IDF

463
00:25:05,649 --> 00:25:11,018
so we're looking forward a pass to

464
00:25:08,320 --> 00:25:14,019
support its operators to controller use

465
00:25:11,019 --> 00:25:17,169
a TF Yamato to interact with the vendors

466
00:25:14,019 --> 00:25:21,340
native young to and that to debridement

467
00:25:17,169 --> 00:25:24,279
and lacks a device and so the project

468
00:25:21,340 --> 00:25:26,590
here is we using the an support a book

469
00:25:24,279 --> 00:25:30,039
and I guess the only the modules to

470
00:25:26,590 --> 00:25:33,279
configuration to config as re 16 and

471
00:25:30,039 --> 00:25:35,620
implement it's a key features in I have

472
00:25:33,279 --> 00:25:38,980
as a risk model also we want to

473
00:25:35,620 --> 00:25:43,029
development also we want to development

474
00:25:38,980 --> 00:25:49,059
and plug in to support standard Yamato

475
00:25:43,029 --> 00:25:52,149
to translate to native module okay say

476
00:25:49,059 --> 00:25:55,120
said what we can we can't work on what

477
00:25:52,149 --> 00:25:58,658
we got known and then we implement a

478
00:25:55,120 --> 00:26:02,168
three unsupervised one for us our basic

479
00:25:58,659 --> 00:26:04,840
global and as our sorry six and that's

480
00:26:02,169 --> 00:26:08,320
our with six within mode and we also

481
00:26:04,840 --> 00:26:10,449
develop them and app to allow it remains

482
00:26:08,320 --> 00:26:13,418
ITF model to the Wonder native your

483
00:26:10,450 --> 00:26:16,120
motive you can improve our tab I'd have

484
00:26:13,419 --> 00:26:21,250
a service exposure and output is a

485
00:26:16,120 --> 00:26:25,239
native as our basics Madhu and here is a

486
00:26:21,250 --> 00:26:28,389
function and flow for the new device you

487
00:26:25,240 --> 00:26:31,330
can direct the implementer I have module

488
00:26:28,389 --> 00:26:33,309
and for the laxity was you can use a

489
00:26:31,330 --> 00:26:35,350
plug-in to transfer

490
00:26:33,309 --> 00:26:42,070
to the standard model choose a native

491
00:26:35,350 --> 00:26:44,830
model and what we learned is that as our

492
00:26:42,070 --> 00:26:47,980
basic model can be proud to support as

493
00:26:44,830 --> 00:26:50,678
our sixth service delivery and we use an

494
00:26:47,980 --> 00:26:53,830
spa playbook to extrait multiple tests

495
00:26:50,679 --> 00:26:55,870
and the here's problem is that the

496
00:26:53,830 --> 00:26:58,269
window deluxe device maybe only support

497
00:26:55,870 --> 00:27:00,939
until model and this operator of

498
00:26:58,269 --> 00:27:03,759
controller may want to depart ICF's and

499
00:27:00,940 --> 00:27:08,559
emolia's common interface to interact a

500
00:27:03,759 --> 00:27:12,190
base multiple vendors so we grab to our

501
00:27:08,559 --> 00:27:18,129
addresses issue and it will both feel if

502
00:27:12,190 --> 00:27:20,440
I know okay if you like to if you are

503
00:27:18,129 --> 00:27:23,590
interested in the topic you can join

504
00:27:20,440 --> 00:27:27,490
tomorrow's happy hours and where we all

505
00:27:23,590 --> 00:27:30,209
shows a demo and discusses a detail okay

506
00:27:27,490 --> 00:27:43,899
this is our team member since everyone's

507
00:27:30,210 --> 00:27:48,690
contribution okay okay obi-wan is now

508
00:27:43,899 --> 00:27:48,689
and PBT is coming up next

509
00:27:55,320 --> 00:28:00,939
good afternoon this is a report from the

510
00:27:58,360 --> 00:28:05,799
from the NP one open cheeky table down

511
00:28:00,940 --> 00:28:08,320
in the back so this a hackathon similar

512
00:28:05,799 --> 00:28:10,299
to the previous few hackathons our goal

513
00:28:08,320 --> 00:28:12,869
was to improve the open-source

514
00:28:10,299 --> 00:28:15,668
implementation of shake shake is a

515
00:28:12,869 --> 00:28:16,600
protocol defined at the LP one working

516
00:28:15,669 --> 00:28:18,879
group

517
00:28:16,600 --> 00:28:22,059
it's about compressing headers and

518
00:28:18,879 --> 00:28:24,369
providing fragmentation so that IP

519
00:28:22,059 --> 00:28:26,950
protocols can be transported over LG

520
00:28:24,369 --> 00:28:30,869
ones and everyone's our loop our wide

521
00:28:26,950 --> 00:28:36,669
area networks such as Laura when sig Fox

522
00:28:30,869 --> 00:28:38,889
n BR UT l TM or I Triple E 15.4 W which

523
00:28:36,669 --> 00:28:42,730
are characterized by very small payloads

524
00:28:38,889 --> 00:28:47,409
and very reduced bandwidth and

525
00:28:42,730 --> 00:28:50,350
energy resources the major draft is the

526
00:28:47,410 --> 00:28:53,370
first one shown here and we have a few

527
00:28:50,350 --> 00:28:57,879
continuation drafts so what we got done

528
00:28:53,370 --> 00:28:59,830
this weekend was merge several feature

529
00:28:57,880 --> 00:29:01,900
branches in our project we had had

530
00:28:59,830 --> 00:29:06,309
separate developments over the last few

531
00:29:01,900 --> 00:29:08,260
months and which resulted in basically

532
00:29:06,309 --> 00:29:10,418
the compression being in one branch and

533
00:29:08,260 --> 00:29:13,419
fragmentation in another branch and so

534
00:29:10,419 --> 00:29:17,380
we merged that so that fully integrated

535
00:29:13,419 --> 00:29:21,820
and we got the basic tests running again

536
00:29:17,380 --> 00:29:26,040
and she needs to be ironed out yet and

537
00:29:21,820 --> 00:29:28,059
one of the branch provides in the new

538
00:29:26,040 --> 00:29:30,340
fragmentation mode that was introduced

539
00:29:28,059 --> 00:29:33,610
last fall including the extensive

540
00:29:30,340 --> 00:29:36,909
tensile testing of that we I did a few

541
00:29:33,610 --> 00:29:39,899
other functionalities simple OAM stuff

542
00:29:36,910 --> 00:29:44,290
like ping responses and all that stuff

543
00:29:39,900 --> 00:29:46,030
so that one major achievement and the

544
00:29:44,290 --> 00:29:49,000
other one is making the the project

545
00:29:46,030 --> 00:29:52,690
easier to use for newcomers so we

546
00:29:49,000 --> 00:29:55,570
created a user guide how you we run the

547
00:29:52,690 --> 00:29:57,490
code simply when you get started we

548
00:29:55,570 --> 00:30:00,639
added that into the Sphinx documentation

549
00:29:57,490 --> 00:30:02,740
of the project and we also would test

550
00:30:00,640 --> 00:30:08,130
plan for to the random testing of the

551
00:30:02,740 --> 00:30:08,130
fragmentation machine oops

552
00:30:08,190 --> 00:30:13,510
so yeah what we learned is that it's

553
00:30:11,110 --> 00:30:15,639
easy to diverge on such projects when

554
00:30:13,510 --> 00:30:19,299
you have contributors overseas that you

555
00:30:15,640 --> 00:30:21,880
quite don't know beforehand we also when

556
00:30:19,299 --> 00:30:23,830
we really want to lower the adaption

557
00:30:21,880 --> 00:30:26,770
barrier to this project so that

558
00:30:23,830 --> 00:30:29,470
newcomers can get used to it without

559
00:30:26,770 --> 00:30:34,150
draining too much of the resources of

560
00:30:29,470 --> 00:30:37,179
the old timers and also yeah we want to

561
00:30:34,150 --> 00:30:38,890
provide complete examples and we want to

562
00:30:37,179 --> 00:30:40,140
become the reference implementation for

563
00:30:38,890 --> 00:30:44,010
shakey

564
00:30:40,140 --> 00:30:48,250
and that's our team ten members when new

565
00:30:44,010 --> 00:30:51,129
hackathon member free people remote from

566
00:30:48,250 --> 00:30:54,280
Japan Spain and Chile which allowed us

567
00:30:51,130 --> 00:30:55,950
to run 24/7 over this weekend by having

568
00:30:54,280 --> 00:30:58,860
the Japanese

569
00:30:55,950 --> 00:31:01,370
working while we were sleeping that's it

570
00:30:58,860 --> 00:31:05,370
thank you okay

571
00:31:01,370 --> 00:31:05,370
[Applause]

572
00:31:09,919 --> 00:31:27,450
PBT is coming up and the next one after

573
00:31:14,610 --> 00:31:30,529
that is IP wave okay we have a PPT let's

574
00:31:27,450 --> 00:31:30,529
see how well that works

575
00:31:36,080 --> 00:31:50,939
hmm click on present yes of course

576
00:31:43,549 --> 00:32:03,720
okay yeah I can I'm not I'm not able to

577
00:31:50,940 --> 00:32:07,500
advance it okay

578
00:32:03,720 --> 00:32:12,870
so we've asked PBT to upload a PDF and

579
00:32:07,500 --> 00:32:19,970
we'll come back to it so for now I P

580
00:32:12,870 --> 00:32:19,969
wave and our arts to you is after that

581
00:32:25,309 --> 00:32:32,700
so this is a poor Joe so I want to share

582
00:32:30,539 --> 00:32:36,690
all the experience i py per project

583
00:32:32,700 --> 00:32:40,559
basic product a protocol project so to

584
00:32:36,690 --> 00:32:43,669
go is a to want to approve the IP about

585
00:32:40,559 --> 00:32:46,620
the six over l2 that Alabang possibly

586
00:32:43,669 --> 00:32:47,129
wave will I Triple E label a logical

587
00:32:46,620 --> 00:32:49,258
inkelaar

588
00:32:47,129 --> 00:32:52,408
the second one is a bit cooler neighbor

589
00:32:49,259 --> 00:32:56,250
discovery with the address laceration

590
00:32:52,409 --> 00:32:58,740
and multi-hop D ad and also we take

591
00:32:56,250 --> 00:33:03,590
advantage of intermediate of acres in

592
00:32:58,740 --> 00:33:07,320
banette radius D ad time also we can

593
00:33:03,590 --> 00:33:08,639
short the English initialization of TCP

594
00:33:07,320 --> 00:33:12,270
a little patrons and

595
00:33:08,640 --> 00:33:14,730
so we proved the to attract or she be

596
00:33:12,270 --> 00:33:19,799
and also each one able discover attract

597
00:33:14,730 --> 00:33:22,020
so this is a poster this is the total 13

598
00:33:19,799 --> 00:33:23,970
so this is a figure is at the picture

599
00:33:22,020 --> 00:33:26,190
and at all architecture so you can see

600
00:33:23,970 --> 00:33:29,549
liquor can communicate each other using

601
00:33:26,190 --> 00:33:33,750
b2b also communicate the p2i so our idea

602
00:33:29,549 --> 00:33:36,570
is you can see the beaker even though it

603
00:33:33,750 --> 00:33:39,450
is not communication range or lotus-eyed

604
00:33:36,570 --> 00:33:41,639
unit this is a providing Internet

605
00:33:39,450 --> 00:33:43,710
connectivity to beaker so it can

606
00:33:41,640 --> 00:33:46,440
initiate the ad using intermediate

607
00:33:43,710 --> 00:33:49,260
beaker and register using multi activity

608
00:33:46,440 --> 00:33:51,120
and also it once it configure with the

609
00:33:49,260 --> 00:33:54,780
or global IP other otherwise it can

610
00:33:51,120 --> 00:33:58,739
start the TCP UDP connection so we are

611
00:33:54,780 --> 00:34:01,460
probably using simulation this figure so

612
00:33:58,740 --> 00:34:05,640
the zoom up for a loader simulator and

613
00:34:01,460 --> 00:34:09,300
also we use the oil net for the truck

614
00:34:05,640 --> 00:34:12,750
simulator so you can see we using a 3

615
00:34:09,300 --> 00:34:15,330
hub multi happy ad to reduce the tid

616
00:34:12,750 --> 00:34:17,668
delay and also we can start typically a

617
00:34:15,330 --> 00:34:21,090
TCP connection so this is a portable

618
00:34:17,668 --> 00:34:23,190
stack the left-hand side is that you can

619
00:34:21,090 --> 00:34:25,950
see variable protocol stack this is IP

620
00:34:23,190 --> 00:34:28,290
this is a website necessarily protocol

621
00:34:25,949 --> 00:34:30,779
for safety so we implemented before a

622
00:34:28,290 --> 00:34:33,600
logical link on layer and IP version 6

623
00:34:30,780 --> 00:34:37,409
over go to the 11 or so neighbor

624
00:34:33,600 --> 00:34:39,690
discovery so the simulation result is

625
00:34:37,409 --> 00:34:41,940
our double discovery can lead use the

626
00:34:39,690 --> 00:34:45,330
legacy our neighbor discovery so yeah

627
00:34:41,940 --> 00:34:49,649
okay so we during the weekend wheel

628
00:34:45,330 --> 00:34:51,659
along the probe concert IP rightful OCB

629
00:34:49,649 --> 00:34:54,210
and we call neighbor discovery I can

630
00:34:51,659 --> 00:34:58,130
work for the note here are the queuing

631
00:34:54,210 --> 00:35:01,410
Network so you can take a look at other

632
00:34:58,130 --> 00:35:02,910
material for Peter cleave and also get

633
00:35:01,410 --> 00:35:05,868
help olenka thank you for your listening

634
00:35:02,910 --> 00:35:05,868
thank you

635
00:35:06,200 --> 00:35:09,379
[Applause]

636
00:35:11,130 --> 00:35:40,569
okay arts to you now and TLS one three

637
00:35:18,520 --> 00:35:43,210
SSH come on up for next okay okay

638
00:35:40,569 --> 00:35:45,970
I'll choose a feed of arts and cultural

639
00:35:43,210 --> 00:35:49,450
listings we're looking to save the

640
00:35:45,970 --> 00:35:51,669
producers of arts events time and and

641
00:35:49,450 --> 00:35:56,460
help them bypass the intermediaries who

642
00:35:51,670 --> 00:35:56,460
have kind of taken over the their data

643
00:36:08,700 --> 00:36:12,390
so we want

644
00:36:10,260 --> 00:36:14,160
improve the discovery and circulation of

645
00:36:12,390 --> 00:36:15,779
the arts events when we're here at ITF

646
00:36:14,160 --> 00:36:20,339
and we want to make the arts more

647
00:36:15,780 --> 00:36:23,850
machine readable so the problem is that

648
00:36:20,340 --> 00:36:27,630
the arts sector publishes its

649
00:36:23,850 --> 00:36:30,170
information in very fragmented ways and

650
00:36:27,630 --> 00:36:31,890
regrettably intermedia is into

651
00:36:30,170 --> 00:36:36,390
intermediaries have become the

652
00:36:31,890 --> 00:36:40,200
authorities of our compiled arts data so

653
00:36:36,390 --> 00:36:43,529
what we did here step one was a lot of

654
00:36:40,200 --> 00:36:45,930
preliminary data organization and step

655
00:36:43,530 --> 00:36:48,600
two was we constructed widgets for the

656
00:36:45,930 --> 00:36:52,319
users for public users to indicate their

657
00:36:48,600 --> 00:36:54,720
interest and once they once the games

658
00:36:52,320 --> 00:36:57,960
were made that helped us love the

659
00:36:54,720 --> 00:37:03,240
results and feed different information

660
00:36:57,960 --> 00:37:06,180
to the users so so the before picture of

661
00:37:03,240 --> 00:37:08,250
this as it is on the website you see all

662
00:37:06,180 --> 00:37:10,169
the arts events that are listed there

663
00:37:08,250 --> 00:37:14,010
where the user has not made any

664
00:37:10,170 --> 00:37:16,860
preferences and then the user will plays

665
00:37:14,010 --> 00:37:20,550
one of two two of the games we created

666
00:37:16,860 --> 00:37:23,250
and then in the end we have recommended

667
00:37:20,550 --> 00:37:26,580
events for for the user and then the

668
00:37:23,250 --> 00:37:30,450
user can play the game again and we can

669
00:37:26,580 --> 00:37:34,620
learn more about the user so for the

670
00:37:30,450 --> 00:37:38,310
outcomes we have begun organizing our

671
00:37:34,620 --> 00:37:41,220
system to take into account these user

672
00:37:38,310 --> 00:37:42,840
preferences and there's a lot more

673
00:37:41,220 --> 00:37:44,819
discussion a lot more data needs to be

674
00:37:42,840 --> 00:37:48,240
generated before we can implement any of

675
00:37:44,820 --> 00:37:49,980
this and we have some questions going

676
00:37:48,240 --> 00:37:51,600
forward and I'm happy to speak with

677
00:37:49,980 --> 00:38:02,280
anyone who wants to know about this

678
00:37:51,600 --> 00:38:02,799
project okay thank you very much all

679
00:38:02,280 --> 00:38:08,650
right

680
00:38:02,800 --> 00:38:11,440
1.3 and mud onboarding is after the app

681
00:38:08,650 --> 00:38:13,450
and this looks like TOS 1.3 is another

682
00:38:11,440 --> 00:38:17,500
PowerPoint don't let me give that

683
00:38:13,450 --> 00:38:21,640
another drone they wanted to go at the

684
00:38:17,500 --> 00:38:24,550
end all right oh yeah I've also update

685
00:38:21,640 --> 00:38:26,140
uploaded the PDF okay

686
00:38:24,550 --> 00:38:28,860
so we'll catch you at the end when we do

687
00:38:26,140 --> 00:38:31,180
when we catch up on the uploads so my

688
00:38:28,860 --> 00:38:44,020
rudder on boarding is now and then

689
00:38:31,180 --> 00:38:46,060
dhcpv6 after that okay hi everybody well

690
00:38:44,020 --> 00:38:49,390
it wasn't just mud on boarding we

691
00:38:46,060 --> 00:38:51,580
muddled in anima ACP work on that as

692
00:38:49,390 --> 00:38:54,790
well a couple of different drafts that

693
00:38:51,580 --> 00:38:57,100
are going on here so we have the RFC

694
00:38:54,790 --> 00:38:58,420
8520 and we had a lot of projects

695
00:38:57,100 --> 00:39:01,690
running around at that center table

696
00:38:58,420 --> 00:39:04,410
there we had work on a mud mud reporter

697
00:39:01,690 --> 00:39:06,640
this is a mechanism by which

698
00:39:04,410 --> 00:39:08,410
manufacturers and network administrators

699
00:39:06,640 --> 00:39:10,779
can learn whether or not their devices

700
00:39:08,410 --> 00:39:12,580
are actually putting out policy

701
00:39:10,780 --> 00:39:14,680
recommendations that are useful to those

702
00:39:12,580 --> 00:39:16,779
devices or if there's miss configuration

703
00:39:14,680 --> 00:39:19,240
some work on mud maker which generates

704
00:39:16,780 --> 00:39:21,700
the Jason the the guys from Syria labs

705
00:39:19,240 --> 00:39:23,799
completely redid the code which was nice

706
00:39:21,700 --> 00:39:26,529
because it was in PHP and my PHP which

707
00:39:23,800 --> 00:39:28,090
is really bad and now it's all in Python

708
00:39:26,530 --> 00:39:29,830
thank you guys

709
00:39:28,090 --> 00:39:31,390
there was DPP mud integration that was

710
00:39:29,830 --> 00:39:34,690
going on there was a verification

711
00:39:31,390 --> 00:39:38,440
mechanism that was being developed by

712
00:39:34,690 --> 00:39:40,600
the folks at NCC OE and then we had some

713
00:39:38,440 --> 00:39:45,700
grass work and does the discovery work

714
00:39:40,600 --> 00:39:47,529
going on and let's see here what did we

715
00:39:45,700 --> 00:39:49,089
plan to solve actually we just plan to

716
00:39:47,530 --> 00:39:52,630
all get together and figure out what to

717
00:39:49,090 --> 00:39:54,160
solve and that's what we did so as I

718
00:39:52,630 --> 00:39:56,830
mentioned a lot of I think it covered a

719
00:39:54,160 --> 00:39:59,080
lot of this ground already on mud run

720
00:39:56,830 --> 00:40:00,940
mud reporting we got a guy back there

721
00:39:59,080 --> 00:40:03,720
Rangga who who sat there and basically

722
00:40:00,940 --> 00:40:06,220
coded the entire time got an 80%

723
00:40:03,720 --> 00:40:10,000
implementation in terms of what he can

724
00:40:06,220 --> 00:40:13,149
report out and we had a lot of bug fixes

725
00:40:10,000 --> 00:40:15,670
going on to to a bunch of this stuff the

726
00:40:13,150 --> 00:40:16,610
mud manager that Cisco did how to loop

727
00:40:15,670 --> 00:40:18,080
in it on

728
00:40:16,610 --> 00:40:19,640
it still has a loop in it but at least

729
00:40:18,080 --> 00:40:22,130
we know where it is and know how to

730
00:40:19,640 --> 00:40:23,720
avoid it and I'll be putting in a patch

731
00:40:22,130 --> 00:40:28,130
for that in fact I have a patch already

732
00:40:23,720 --> 00:40:30,049
just needs to get committed so we had a

733
00:40:28,130 --> 00:40:31,880
lot of some interoperability testing

734
00:40:30,050 --> 00:40:33,410
going on we had a couple of guys here

735
00:40:31,880 --> 00:40:35,180
from c-calm who went and actually

736
00:40:33,410 --> 00:40:37,910
implemented mud right on the spot in

737
00:40:35,180 --> 00:40:40,160
their devices and test against a number

738
00:40:37,910 --> 00:40:41,720
of mud managers generating themselves a

739
00:40:40,160 --> 00:40:44,170
mud file that was appropriate and tested

740
00:40:41,720 --> 00:40:48,799
their acts we can now test their access

741
00:40:44,170 --> 00:40:50,780
and then we had some additional

742
00:40:48,800 --> 00:40:52,790
integration going on in terms of filters

743
00:40:50,780 --> 00:40:56,510
for east-west or north-south in terms of

744
00:40:52,790 --> 00:40:59,210
the verification code and yeah we got a

745
00:40:56,510 --> 00:41:02,030
lot of work going on so we know also we

746
00:40:59,210 --> 00:41:04,100
need to fail fast we have on some of our

747
00:41:02,030 --> 00:41:05,840
code and we have a lot of work to do on

748
00:41:04,100 --> 00:41:07,549
the mud reporter just a couple of

749
00:41:05,840 --> 00:41:10,400
screenshots of some of the stuff that

750
00:41:07,550 --> 00:41:12,200
went on here this is the the thing that

751
00:41:10,400 --> 00:41:15,200
will generate mud files in terms of the

752
00:41:12,200 --> 00:41:17,180
verification and here you got here you

753
00:41:15,200 --> 00:41:18,379
have dark and our gentleman from c-calm

754
00:41:17,180 --> 00:41:20,000
and in terms of them bringing their

755
00:41:18,380 --> 00:41:23,090
hardware that implemented mud either in

756
00:41:20,000 --> 00:41:25,100
DPP or directly using things and here's

757
00:41:23,090 --> 00:41:26,420
the long list of people who actually did

758
00:41:25,100 --> 00:41:28,930
a lot of work and thanks to a bunch of

759
00:41:26,420 --> 00:41:34,040
organizations who are supporting them

760
00:41:28,930 --> 00:41:36,230
thank you and it looks like a lot of

761
00:41:34,040 --> 00:41:43,430
first-timers on this one so that's great

762
00:41:36,230 --> 00:41:54,200
yeah okay dhcpv6 PD and then coin RG

763
00:41:43,430 --> 00:41:57,080
after that okay so hi this was a

764
00:41:54,200 --> 00:41:59,839
spontaneous project as you may have

765
00:41:57,080 --> 00:42:02,029
known there's HP v6 PD on the heck of

766
00:41:59,840 --> 00:42:05,390
the network and we were chatting with

767
00:42:02,030 --> 00:42:08,510
people and I put together code for fo

768
00:42:05,390 --> 00:42:10,250
outing to capture those packets pick up

769
00:42:08,510 --> 00:42:12,650
the appropriate routes and install them

770
00:42:10,250 --> 00:42:16,690
that wasn't previously possible now it

771
00:42:12,650 --> 00:42:16,690
is and that's it

772
00:42:19,689 --> 00:42:24,979
and we have a new record for shortest

773
00:42:21,769 --> 00:42:38,390
presentation Thanks

774
00:42:24,979 --> 00:42:40,279
okay so coin RG and map RG after that hi

775
00:42:38,390 --> 00:42:42,229
everybody I'm sorry didn't use the the

776
00:42:40,279 --> 00:42:46,219
format in Quebec we call that being a

777
00:42:42,229 --> 00:42:49,879
distinct society this is the coin RG p

778
00:42:46,219 --> 00:42:51,319
for hackathon and this was our first one

779
00:42:49,880 --> 00:42:54,019
as you can see because we didn't know

780
00:42:51,319 --> 00:42:55,579
about the format who are we we are

781
00:42:54,019 --> 00:42:58,640
actually a proposed research group we're

782
00:42:55,579 --> 00:43:00,319
still waiting to be a real one but we

783
00:42:58,640 --> 00:43:02,479
want to look at everything that works

784
00:43:00,319 --> 00:43:05,449
that deals with computing and the

785
00:43:02,479 --> 00:43:08,739
network and investigating this whole

786
00:43:05,449 --> 00:43:11,449
continuum of putting computation from

787
00:43:08,739 --> 00:43:13,999
the data center all the way to the edge

788
00:43:11,449 --> 00:43:15,890
we want to look at architectures we want

789
00:43:13,999 --> 00:43:17,598
to look at protocols and want to look at

790
00:43:15,890 --> 00:43:19,640
real world use cases and this is the

791
00:43:17,599 --> 00:43:20,719
reason that we're having this hackathon

792
00:43:19,640 --> 00:43:24,379
because there's a bunch of people

793
00:43:20,719 --> 00:43:26,150
invented a language is called p4 which

794
00:43:24,380 --> 00:43:29,239
is currently being used to do some

795
00:43:26,150 --> 00:43:31,880
specific programming in switches and we

796
00:43:29,239 --> 00:43:34,489
wanted to look at this idea of this

797
00:43:31,880 --> 00:43:38,150
cloud to edge computing continuum and p4

798
00:43:34,489 --> 00:43:40,699
we didn't have a specific project except

799
00:43:38,150 --> 00:43:43,549
or remote participant most of us were

800
00:43:40,699 --> 00:43:45,619
pretty much new users and because of

801
00:43:43,549 --> 00:43:48,229
that we have to really give a shout to

802
00:43:45,619 --> 00:43:50,659
the company Montreal company who sent us

803
00:43:48,229 --> 00:43:52,569
two engineers for two days to help us

804
00:43:50,659 --> 00:43:56,059
setting up our environments and

805
00:43:52,569 --> 00:43:58,159
developing the code that is actually at

806
00:43:56,059 --> 00:44:02,029
the end we ended up doing real work

807
00:43:58,159 --> 00:44:04,069
which is like yay so what we did and yes

808
00:44:02,029 --> 00:44:07,279
we me and pl we are gone but hey thank

809
00:44:04,069 --> 00:44:09,880
you guys we did the basic examples we

810
00:44:07,279 --> 00:44:12,559
had actually one very very proficient

811
00:44:09,880 --> 00:44:14,809
sadly a remote participant who actually

812
00:44:12,559 --> 00:44:15,679
implemented and started implementing an

813
00:44:14,809 --> 00:44:21,679
ipv6

814
00:44:15,679 --> 00:44:24,529
v6 switch machine learning in NP 4 he

815
00:44:21,679 --> 00:44:26,719
checked his code in the in the github

816
00:44:24,529 --> 00:44:30,090
and it's related to a work that was done

817
00:44:26,719 --> 00:44:32,280
before in ipv4 we had

818
00:44:30,090 --> 00:44:34,860
actually we actually poached people from

819
00:44:32,280 --> 00:44:36,990
other tables that you joined us we had

820
00:44:34,860 --> 00:44:39,110
12 participants at the end so that was

821
00:44:36,990 --> 00:44:42,600
actually pretty surprising for us and

822
00:44:39,110 --> 00:44:45,690
the people we poached included people

823
00:44:42,600 --> 00:44:48,720
who started looking at p4 to golang and

824
00:44:45,690 --> 00:44:50,640
this morning we did packet filtering and

825
00:44:48,720 --> 00:44:53,310
we gathered a ton of information and I'm

826
00:44:50,640 --> 00:44:55,140
always done and so our next steps we

827
00:44:53,310 --> 00:44:57,360
want to continue gathering projects we

828
00:44:55,140 --> 00:44:59,970
think that you know we have a good

829
00:44:57,360 --> 00:45:01,710
chance to become a real research group

830
00:44:59,970 --> 00:45:03,689
so we would like to have a coin interim

831
00:45:01,710 --> 00:45:05,490
and we want to have another a Katan and

832
00:45:03,690 --> 00:45:08,520
Singapore has really got the heck of

833
00:45:05,490 --> 00:45:11,250
this and we would like to really really

834
00:45:08,520 --> 00:45:13,560
thank the hackathon organizers and our

835
00:45:11,250 --> 00:45:29,790
helpers and or participants thank you

836
00:45:13,560 --> 00:45:39,930
very much ok map RG now and hackathon

837
00:45:29,790 --> 00:45:40,410
measurements is next good afternoon

838
00:45:39,930 --> 00:45:42,480
everyone

839
00:45:40,410 --> 00:45:45,000
so the measurement analysis for

840
00:45:42,480 --> 00:45:46,350
protocols research group participate in

841
00:45:45,000 --> 00:45:49,260
our third hackathon this time and I'll

842
00:45:46,350 --> 00:45:52,020
tell you what we were up to the problem

843
00:45:49,260 --> 00:45:55,050
that we were attacking on at this

844
00:45:52,020 --> 00:45:56,820
meeting during this hackathon rather was

845
00:45:55,050 --> 00:46:00,300
to produce a reference implementation

846
00:45:56,820 --> 00:46:03,540
for doing IP address aggregation two

847
00:46:00,300 --> 00:46:07,050
applications of this are doing address

848
00:46:03,540 --> 00:46:09,120
space anonymization where we where you a

849
00:46:07,050 --> 00:46:11,730
granade say you're at before address

850
00:46:09,120 --> 00:46:13,770
2/24 what do you do with ipv6 another

851
00:46:11,730 --> 00:46:15,750
application of it is for instance to

852
00:46:13,770 --> 00:46:17,370
find homogenous populations for instance

853
00:46:15,750 --> 00:46:19,320
for content delivery networks to do

854
00:46:17,370 --> 00:46:22,080
matchmaking between the users and the

855
00:46:19,320 --> 00:46:23,850
content the specific problem solve was

856
00:46:22,080 --> 00:46:26,279
how do we take something like a Patricia

857
00:46:23,850 --> 00:46:28,560
tree if you use Python or Pro you know

858
00:46:26,280 --> 00:46:31,530
this as net Patricia or in Python PI

859
00:46:28,560 --> 00:46:33,180
radix or PI Trisha how do you use a data

860
00:46:31,530 --> 00:46:34,920
structure like that to represent all the

861
00:46:33,180 --> 00:46:36,419
activity in the entire internet it's too

862
00:46:34,920 --> 00:46:39,230
big when you have tens of billions or

863
00:46:36,420 --> 00:46:42,330
hundreds of billions of v6 addresses so

864
00:46:39,230 --> 00:46:44,069
so the the to solve it we decided to

865
00:46:42,330 --> 00:46:46,049
take an existing code

866
00:46:44,069 --> 00:46:48,089
see the agree tree which is an

867
00:46:46,049 --> 00:46:49,799
implementation of patricia tree and make

868
00:46:48,089 --> 00:46:51,749
portions of the tree immutable and I'll

869
00:46:49,799 --> 00:46:52,979
show you why that self the problem but

870
00:46:51,749 --> 00:46:54,479
basically it allows you to solve the

871
00:46:52,979 --> 00:46:55,948
problem by partitioning it you can

872
00:46:54,479 --> 00:46:58,140
partition the set of addresses

873
00:46:55,949 --> 00:46:59,910
arbitrarily into small sets you can put

874
00:46:58,140 --> 00:47:01,259
them on a cluster and you produce an

875
00:46:59,910 --> 00:47:03,149
intermediate result where you can

876
00:47:01,259 --> 00:47:04,739
capture the state of the tree as you're

877
00:47:03,150 --> 00:47:09,299
performing some operation on it and then

878
00:47:04,739 --> 00:47:10,829
do it iteratively so so what were the

879
00:47:09,299 --> 00:47:12,839
new ideas and what did the team agree on

880
00:47:10,829 --> 00:47:14,670
well the team it turns out today was

881
00:47:12,839 --> 00:47:16,288
just me so we agreed on everything and

882
00:47:14,670 --> 00:47:18,329
we agreed to use the agree tree and

883
00:47:16,289 --> 00:47:19,650
really agreed that this this partition

884
00:47:18,329 --> 00:47:21,329
this partitioning problem could be

885
00:47:19,650 --> 00:47:23,430
solved by making portions the tree

886
00:47:21,329 --> 00:47:26,009
immutable so that's the new the novel

887
00:47:23,430 --> 00:47:28,410
design idea in a patricia tree the

888
00:47:26,009 --> 00:47:30,029
github upload is pending and I'll just

889
00:47:28,410 --> 00:47:31,440
show you exactly what it was because we

890
00:47:30,029 --> 00:47:34,650
managed to get it we managed to get it

891
00:47:31,440 --> 00:47:36,359
done in just a day so what we got done

892
00:47:34,650 --> 00:47:39,089
so he's imagine you have a set of active

893
00:47:36,359 --> 00:47:41,160
addresses here's ten I give you six / 64

894
00:47:39,089 --> 00:47:42,630
s and you can punch them up into one of

895
00:47:41,160 --> 00:47:44,519
these trees that are commonly used it's

896
00:47:42,630 --> 00:47:45,930
kind of like a routing table so we put

897
00:47:44,519 --> 00:47:47,249
the tree we put them in the tree the

898
00:47:45,930 --> 00:47:50,098
relief nodes are all those active

899
00:47:47,249 --> 00:47:51,839
addresses and then we run some operation

900
00:47:50,099 --> 00:47:53,670
which I call Agora five which aggregates

901
00:47:51,839 --> 00:47:55,589
them in some useful way based on your

902
00:47:53,670 --> 00:47:57,479
selection criteria like let's say I only

903
00:47:55,589 --> 00:48:00,869
want aggregates that represent at least

904
00:47:57,479 --> 00:48:02,308
32 of the of those active users well the

905
00:48:00,869 --> 00:48:03,959
problem is if you ran it the own way

906
00:48:02,309 --> 00:48:05,279
it'll aggregate up the whole tree

907
00:48:03,959 --> 00:48:08,160
because there's nothing there so that

908
00:48:05,279 --> 00:48:10,140
the simple idea is I just bound the tree

909
00:48:08,160 --> 00:48:13,379
or I put in immutable entries and

910
00:48:10,140 --> 00:48:15,359
basically make a horizon or a border on

911
00:48:13,380 --> 00:48:17,999
the tree here here measured in red and

912
00:48:15,359 --> 00:48:20,940
so when I run an operation like a like a

913
00:48:17,999 --> 00:48:23,488
an aggregation it's bounded by that red

914
00:48:20,940 --> 00:48:25,469
portion and we get a result an

915
00:48:23,489 --> 00:48:27,329
intermediate result that I can then do

916
00:48:25,469 --> 00:48:29,880
it early like say on a MapReduce cluster

917
00:48:27,329 --> 00:48:31,349
with hundreds of machines and then so to

918
00:48:29,880 --> 00:48:33,479
give you an example why this is

919
00:48:31,349 --> 00:48:35,759
important you probably think in 94 you

920
00:48:33,479 --> 00:48:37,859
know what a slash 24 is and I pre 6 even

921
00:48:35,759 --> 00:48:39,930
with this small data set of 180,000

922
00:48:37,859 --> 00:48:41,788
active slash 64 is this shows that about

923
00:48:39,930 --> 00:48:44,879
half of them reach this sufficient

924
00:48:41,789 --> 00:48:46,890
aggregation at slash 56 but another half

925
00:48:44,880 --> 00:48:48,779
of them needed to be aggregated slash 40

926
00:48:46,890 --> 00:48:50,219
and today in the v6 internet a lot of

927
00:48:48,779 --> 00:48:51,569
people use slash 48 which is right in

928
00:48:50,219 --> 00:48:52,890
the middle and a horrible compromise

929
00:48:51,569 --> 00:48:56,479
because you could have a better answer

930
00:48:52,890 --> 00:48:57,549
or you're not not aggregating enough so

931
00:48:56,479 --> 00:49:00,279
what

932
00:48:57,550 --> 00:49:01,600
we learned is is that this is a candid

933
00:49:00,280 --> 00:49:04,120
best practice and we'll carry it to the

934
00:49:01,600 --> 00:49:05,620
working group and I made a couple design

935
00:49:04,120 --> 00:49:08,200
other design decisions again that were

936
00:49:05,620 --> 00:49:10,810
you know man unanimous so with just me

937
00:49:08,200 --> 00:49:12,549
I've based on a publicly available open

938
00:49:10,810 --> 00:49:15,549
source code from some colleagues

939
00:49:12,550 --> 00:49:17,560
including candor ocho and we're gonna

940
00:49:15,550 --> 00:49:19,750
meet on Friday and I'll go over some

941
00:49:17,560 --> 00:49:21,460
more the results so join us on Friday at

942
00:49:19,750 --> 00:49:41,350
mapper G if you can in the morning

943
00:49:21,460 --> 00:49:46,750
thanks ok measurements just the one okay

944
00:49:41,350 --> 00:49:48,720
and use the left and right buttons left

945
00:49:46,750 --> 00:49:53,350
and right okay

946
00:49:48,720 --> 00:49:55,810
so hi I'm I'm al Morton and I let a

947
00:49:53,350 --> 00:49:59,560
champion to project today on measurement

948
00:49:55,810 --> 00:50:03,310
using UDP to measure IP link capacity

949
00:49:59,560 --> 00:50:05,560
and we had Lynch Avot own remote and for

950
00:50:03,310 --> 00:50:07,810
first-timers who all joined the project

951
00:50:05,560 --> 00:50:12,070
because we put the asterisk next to the

952
00:50:07,810 --> 00:50:14,830
name yes you're welcome

953
00:50:12,070 --> 00:50:18,070
alright so here's the plan we have this

954
00:50:14,830 --> 00:50:20,200
metric and method of measurement we have

955
00:50:18,070 --> 00:50:22,980
the draft up ready for a five-minute

956
00:50:20,200 --> 00:50:26,020
talk in IP p.m. Wednesday I think it is

957
00:50:22,980 --> 00:50:28,300
our goal here was to gain UDP based

958
00:50:26,020 --> 00:50:31,120
measurement experience with a get busy

959
00:50:28,300 --> 00:50:33,160
one gigabit access at ietf everybody

960
00:50:31,120 --> 00:50:35,380
knows how busy that can be and an

961
00:50:33,160 --> 00:50:37,930
additional access types were made

962
00:50:35,380 --> 00:50:40,810
possible by our volunteers that joint

963
00:50:37,930 --> 00:50:42,609
and I just want to mention that you know

964
00:50:40,810 --> 00:50:44,770
all the names here Ryan Hoffman from

965
00:50:42,610 --> 00:50:47,380
Telus and Ryan's gonna speak a little

966
00:50:44,770 --> 00:50:52,060
bit about his results and Timothy Karlin

967
00:50:47,380 --> 00:50:54,340
Marian Dillon and Kyle Kyle it all from

968
00:50:52,060 --> 00:50:58,570
UNH at the interoperability lab thanks

969
00:50:54,340 --> 00:51:01,720
so much for joining this ok so here we

970
00:50:58,570 --> 00:51:03,400
go so we ran the tests we iterated some

971
00:51:01,720 --> 00:51:04,990
measurement parameters we're going to

972
00:51:03,400 --> 00:51:07,350
revise the tool based on what we learned

973
00:51:04,990 --> 00:51:09,009
and compared with the commercial tool

974
00:51:07,350 --> 00:51:11,080
everybody knows what that commercial

975
00:51:09,010 --> 00:51:15,760
tool is it's us

976
00:51:11,080 --> 00:51:18,460
so we we ran from here side by side for

977
00:51:15,760 --> 00:51:21,610
the tests that I ran to the UDP server

978
00:51:18,460 --> 00:51:23,880
in Middletown New Jersey both servers

979
00:51:21,610 --> 00:51:27,160
and clients on the same machines and

980
00:51:23,880 --> 00:51:30,910
here's a quick representatives set of

981
00:51:27,160 --> 00:51:32,470
results with the UDP speed test of you

982
00:51:30,910 --> 00:51:34,149
know we're seeing the effects of the

983
00:51:32,470 --> 00:51:36,129
traffic here we're only getting into the

984
00:51:34,150 --> 00:51:39,840
800 I mean it's a it's a gigabit per

985
00:51:36,130 --> 00:51:43,300
second access right we're getting an 800

986
00:51:39,840 --> 00:51:45,490
650 Luke of a measuring a lot lower we

987
00:51:43,300 --> 00:51:47,860
go back and measure with UDP St you now

988
00:51:45,490 --> 00:51:50,439
we got a lot closer to the limit of one

989
00:51:47,860 --> 00:51:52,480
gigabit per second and then in the

990
00:51:50,440 --> 00:51:54,610
afternoon on Saturday everybody was

991
00:51:52,480 --> 00:51:56,800
pounding away here and we really need to

992
00:51:54,610 --> 00:51:59,080
learn the signature of what that that is

993
00:51:56,800 --> 00:52:01,210
and my time went away what the hell oh

994
00:51:59,080 --> 00:52:05,040
there it is oh my gosh it's only 46

995
00:52:01,210 --> 00:52:05,040
seconds left go go

996
00:52:05,940 --> 00:52:12,520
so I wanted to include non congested

997
00:52:09,310 --> 00:52:14,560
links so set up a connection between our

998
00:52:12,520 --> 00:52:17,440
Telus lab and Emmet in Alberta with

999
00:52:14,560 --> 00:52:20,230
alles New Jersey lab to perform the same

1000
00:52:17,440 --> 00:52:22,030
kind of test but in bulk so using two

1001
00:52:20,230 --> 00:52:23,440
servers here in New Jersey just to be

1002
00:52:22,030 --> 00:52:25,750
able to get the bulk of tests that we

1003
00:52:23,440 --> 00:52:28,600
needed unfortunately the server in New

1004
00:52:25,750 --> 00:52:30,250
Jersey only had a GUI so this shows the

1005
00:52:28,600 --> 00:52:33,100
comparative results a consistent near

1006
00:52:30,250 --> 00:52:35,230
gig speed result with the UDP speed test

1007
00:52:33,100 --> 00:52:36,670
as opposed to the TCP test which was

1008
00:52:35,230 --> 00:52:37,810
highly variable really important

1009
00:52:36,670 --> 00:52:39,280
information for us

1010
00:52:37,810 --> 00:52:40,660
because it's difficult for a technician

1011
00:52:39,280 --> 00:52:42,700
that's going into a home selling a

1012
00:52:40,660 --> 00:52:43,660
service and using that test to reveal

1013
00:52:42,700 --> 00:52:46,890
though the customer what they're

1014
00:52:43,660 --> 00:52:50,529
achievable speed is and it being subpar

1015
00:52:46,890 --> 00:52:56,589
the UNH folks walked in this morning got

1016
00:52:50,530 --> 00:52:59,410
this test running and and and resolved a

1017
00:52:56,590 --> 00:53:03,130
problem with their router screening in

1018
00:52:59,410 --> 00:53:05,410
the firewall on UDP traffic and made it

1019
00:53:03,130 --> 00:53:07,420
work properly right after that it was a

1020
00:53:05,410 --> 00:53:08,560
great effort in just a few hours here

1021
00:53:07,420 --> 00:53:10,810
this morning

1022
00:53:08,560 --> 00:53:13,480
and we learned a lot of stuff for

1023
00:53:10,810 --> 00:53:15,370
potential development and and and you

1024
00:53:13,480 --> 00:53:16,780
know you can learn a lot from testing

1025
00:53:15,370 --> 00:53:19,560
different access types that's for sure

1026
00:53:16,780 --> 00:53:22,640
thanks very much

1027
00:53:19,560 --> 00:53:25,049
[Applause]

1028
00:53:22,640 --> 00:53:29,779
okay so I think that's all we have

1029
00:53:25,049 --> 00:53:29,779
downloaded let me go grab the new ones

1030
00:53:42,619 --> 00:53:58,559
yeah okay which yeah let me see 29 did

1031
00:53:53,279 --> 00:54:03,079
we do DNS SD Discovery proxy what yeah

1032
00:53:58,559 --> 00:54:03,079
so DNS st discovery proxy

1033
00:54:12,020 --> 00:54:25,640
oh I'll make this really fast so we're

1034
00:54:23,540 --> 00:54:27,560
here working on making discovery work

1035
00:54:25,640 --> 00:54:31,430
with less use of multicast because

1036
00:54:27,560 --> 00:54:33,259
multicast when you're making discovery

1037
00:54:31,430 --> 00:54:35,750
work with less reliance on multicast

1038
00:54:33,260 --> 00:54:37,610
because multicast is slow its unreliable

1039
00:54:35,750 --> 00:54:40,460
it's wasteful of shared wireless

1040
00:54:37,610 --> 00:54:43,610
spectrum there's a list here of the

1041
00:54:40,460 --> 00:54:46,430
drafts the discovery proxy is based on

1042
00:54:43,610 --> 00:54:48,950
the hybrid draft which uses DNS push

1043
00:54:46,430 --> 00:54:51,080
notifications which in turn builds on

1044
00:54:48,950 --> 00:54:53,899
DNS stateful operations we've been

1045
00:54:51,080 --> 00:54:57,830
building a code for open wrt running on

1046
00:54:53,900 --> 00:55:01,610
these little GLI net AR 750s little

1047
00:54:57,830 --> 00:55:04,069
pocket gigabit router i was here working

1048
00:55:01,610 --> 00:55:07,370
with ted and barbara joined us thank you

1049
00:55:04,070 --> 00:55:09,950
barbara we did a bunch of work with

1050
00:55:07,370 --> 00:55:11,990
integration open wrt package management

1051
00:55:09,950 --> 00:55:13,640
dealing with asynchronous change

1052
00:55:11,990 --> 00:55:15,589
notifications with you bus to really

1053
00:55:13,640 --> 00:55:20,779
polish this code this is all available

1054
00:55:15,590 --> 00:55:22,670
on the ITF hackathorn github and we now

1055
00:55:20,780 --> 00:55:25,340
have pre-built packages you can download

1056
00:55:22,670 --> 00:55:26,960
it yourself and run this and in about

1057
00:55:25,340 --> 00:55:30,340
five minutes have your own discovery

1058
00:55:26,960 --> 00:55:30,340
proxy running at home thank you

1059
00:55:30,530 --> 00:55:35,280
[Applause]

1060
00:55:45,570 --> 00:55:54,000
okay web RTC and then it looks like PBT

1061
00:55:51,220 --> 00:55:54,000
is after that

1062
00:56:18,720 --> 00:56:25,720
alright hey my name is Alex Anwar and

1063
00:56:23,650 --> 00:56:28,510
it's a very difficult name to say so

1064
00:56:25,720 --> 00:56:31,209
people call me dr. Alex I will represent

1065
00:56:28,510 --> 00:56:33,640
the team here about web out is Hugh

1066
00:56:31,210 --> 00:56:35,770
about this is a technology to bring

1067
00:56:33,640 --> 00:56:38,290
real-time communication audio video and

1068
00:56:35,770 --> 00:56:41,380
data to the web and it has an IETF

1069
00:56:38,290 --> 00:56:44,080
pendant which is RTC web for all the

1070
00:56:41,380 --> 00:56:47,200
protocols the encryption the security

1071
00:56:44,080 --> 00:56:49,509
the codecs and so on the last missing

1072
00:56:47,200 --> 00:56:51,879
piece is called simulcast which is the

1073
00:56:49,510 --> 00:56:54,880
capacity to send a different resolution

1074
00:56:51,880 --> 00:56:58,210
of audio and video simultaneously over

1075
00:56:54,880 --> 00:57:00,700
the wire to finish this back at the

1076
00:56:58,210 --> 00:57:03,160
belief receipt so some of us came around

1077
00:57:00,700 --> 00:57:06,580
here today to try to push that so that

1078
00:57:03,160 --> 00:57:08,200
we can finally have a finalized spec and

1079
00:57:06,580 --> 00:57:11,170
people can implement product on top of

1080
00:57:08,200 --> 00:57:16,990
them we had two browsers represented

1081
00:57:11,170 --> 00:57:19,510
today Firefox and Chrome the two others

1082
00:57:16,990 --> 00:57:21,459
were excused for visa reason and other

1083
00:57:19,510 --> 00:57:23,230
things we had free media server

1084
00:57:21,460 --> 00:57:24,970
represented to give feedback on

1085
00:57:23,230 --> 00:57:27,609
implementation which is also very

1086
00:57:24,970 --> 00:57:30,040
important and finally free application

1087
00:57:27,609 --> 00:57:32,950
vendors that were using both browsers

1088
00:57:30,040 --> 00:57:34,779
and media servers to help communicate

1089
00:57:32,950 --> 00:57:40,180
about the needed and missing

1090
00:57:34,780 --> 00:57:42,340
functionalities and different bugs we

1091
00:57:40,180 --> 00:57:46,419
had different people going at it at a

1092
00:57:42,340 --> 00:57:47,770
different angle some of us just took

1093
00:57:46,420 --> 00:57:50,560
some bugs and went through it but

1094
00:57:47,770 --> 00:57:52,440
globally it was a very efficient session

1095
00:57:50,560 --> 00:57:56,140
we went through ten different bugs in

1096
00:57:52,440 --> 00:57:58,060
different browsers and we also helped

1097
00:57:56,140 --> 00:58:00,220
different vendors implement similar cast

1098
00:57:58,060 --> 00:58:02,320
in their media server or at least made

1099
00:58:00,220 --> 00:58:05,859
progress there and provide feedback to

1100
00:58:02,320 --> 00:58:07,570
to the missing pieces so all in all very

1101
00:58:05,859 --> 00:58:09,250
efficient sation and we're very happy

1102
00:58:07,570 --> 00:58:11,410
and we made a lot of progress in two

1103
00:58:09,250 --> 00:58:15,520
days that would otherwise not have been

1104
00:58:11,410 --> 00:58:17,440
possible without the opportunity to have

1105
00:58:15,520 --> 00:58:19,660
a face-to-face the agathon gave us so

1106
00:58:17,440 --> 00:58:21,900
thanks to the sponsor and things to

1107
00:58:19,660 --> 00:58:21,899
charge

1108
00:58:22,260 --> 00:58:27,699
[Applause]

1109
00:58:35,130 --> 00:58:38,429
[Music]

1110
00:58:36,289 --> 00:59:05,549
okay

1111
00:58:38,429 --> 00:59:08,910
the PBT my name is Lucy yeah today I

1112
00:59:05,549 --> 00:59:11,429
will introduce to my project poster card

1113
00:59:08,910 --> 00:59:15,538
base with telemetry for eSATA flow

1114
00:59:11,429 --> 00:59:17,969
information elementary at first I will

1115
00:59:15,539 --> 00:59:22,890
introduce what is the post card base at

1116
00:59:17,969 --> 00:59:26,309
elementary as we know there are already

1117
00:59:22,890 --> 00:59:33,229
had there have already been defined for

1118
00:59:26,309 --> 00:59:39,359
data types in ITF draft IOM data

1119
00:59:33,229 --> 00:59:43,589
including to type Tracy - Tracy type 1

1120
00:59:39,359 --> 00:59:48,319
beauty and the luster is a H 2 H type

1121
00:59:43,589 --> 00:59:53,729
now we will define another new one

1122
00:59:48,319 --> 00:59:56,429
treating type called we call it puts the

1123
00:59:53,729 --> 00:59:59,928
card base at elementary so what's the

1124
00:59:56,429 --> 01:00:04,949
different between the post card baster

1125
00:59:59,929 --> 01:00:08,219
elementary and our am tracing type

1126
01:00:04,949 --> 01:00:11,069
at first we separates the elementary

1127
01:00:08,219 --> 01:00:17,549
instruct instruction header and the

1128
01:00:11,069 --> 01:00:22,099
metadata so like the like this picture

1129
01:00:17,549 --> 01:00:26,759
show the red one is the e structure and

1130
01:00:22,099 --> 01:00:30,959
the yellow one is a metadata a postcard

1131
01:00:26,759 --> 01:00:36,030
will ship the metadata will she out hope

1132
01:00:30,959 --> 01:00:42,330
I hope at each node so the host as

1133
01:00:36,030 --> 01:00:46,650
we'll get the postcard metadata why then

1134
01:00:42,330 --> 01:00:52,710
I will try why we introduced this new

1135
01:00:46,650 --> 01:00:57,510
type because we list three reasons the

1136
01:00:52,710 --> 01:01:00,870
first is detect use this type tracing

1137
01:00:57,510 --> 01:01:07,440
type we can detect the location of the

1138
01:01:00,870 --> 01:01:14,250
packet loss and and then we can solve

1139
01:01:07,440 --> 01:01:20,310
the encapsulator encapsulation list with

1140
01:01:14,250 --> 01:01:24,180
the fixed packet header sorry little

1141
01:01:20,310 --> 01:01:27,570
nervous and and the last one is a

1142
01:01:24,180 --> 01:01:34,069
different the queues priority from for

1143
01:01:27,570 --> 01:01:34,070
the metadata from user traffic and then

1144
01:01:36,290 --> 01:01:47,220
and then the I feet header definition at

1145
01:01:40,980 --> 01:01:49,980
show is this diagram aligned for octet

1146
01:01:47,220 --> 01:01:55,529
rule and there are a little different

1147
01:01:49,980 --> 01:02:01,940
from the IOM type I am header there is

1148
01:01:55,530 --> 01:02:01,940
no lens bit and there is no metadata

1149
01:02:04,610 --> 01:02:18,960
okay this page show this project in hexa

1150
01:02:13,700 --> 01:02:24,240
at first there are network domain

1151
01:02:18,960 --> 01:02:29,430
include for Reuters and a tester will

1152
01:02:24,240 --> 01:02:34,609
send to test the flows and and also

1153
01:02:29,430 --> 01:02:39,629
receive this to test of flaws in ipv6

1154
01:02:34,610 --> 01:02:43,830
transport as the transport protocol the

1155
01:02:39,630 --> 01:02:49,110
Rooter for as the inquest node to

1156
01:02:43,830 --> 01:02:53,549
encapsulate the I feed header and the

1157
01:02:49,110 --> 01:02:57,180
Reuters 3 as as eQuest

1158
01:02:53,550 --> 01:03:01,530
Note 2 Inc they capture leads to the I

1159
01:02:57,180 --> 01:03:05,279
feet header and Rooter 6 and the Reuter

1160
01:03:01,530 --> 01:03:08,010
file as the transit knows the yellow

1161
01:03:05,280 --> 01:03:13,580
yellow one is a matter data is collected

1162
01:03:08,010 --> 01:03:18,740
to the collector the collector framework

1163
01:03:13,580 --> 01:03:18,740
is circled by the - lon

1164
01:03:20,910 --> 01:03:28,230
[Music]

1165
01:03:23,870 --> 01:03:33,170
we built the collector framework based

1166
01:03:28,230 --> 01:03:36,450
on the open source open source project

1167
01:03:33,170 --> 01:03:41,100
for example the Kafka as messy

1168
01:03:36,450 --> 01:03:46,250
distributes a message queues and the

1169
01:03:41,100 --> 01:03:51,450
readers as the memory DB and then the

1170
01:03:46,250 --> 01:03:58,170
coroner as the GUI so we collect all the

1171
01:03:51,450 --> 01:04:02,730
metadata and and program to show the

1172
01:03:58,170 --> 01:04:06,660
following three case at first is a delay

1173
01:04:02,730 --> 01:04:12,390
delay monitor for each node and link and

1174
01:04:06,660 --> 01:04:15,839
end to end we can see from this black

1175
01:04:12,390 --> 01:04:23,460
panel yeah on the right of the black

1176
01:04:15,840 --> 01:04:27,480
panel and his his true is a show us the

1177
01:04:23,460 --> 01:04:30,810
packet loss monitor just the file pack

1178
01:04:27,480 --> 01:04:37,170
his loss and the last case is a past

1179
01:04:30,810 --> 01:04:41,990
recent insert is the left side yeah

1180
01:04:37,170 --> 01:04:46,910
that's all thank you

1181
01:04:41,990 --> 01:04:46,910
[Applause]

1182
01:05:00,060 --> 01:05:09,700
so there's we do that we have the floors

1183
01:05:07,390 --> 01:05:14,200
the floors DNS we're ready for that one

1184
01:05:09,700 --> 01:05:40,960
and then it looks like l4s will be after

1185
01:05:14,200 --> 01:05:43,779
that stand like this keep it tight

1186
01:05:40,960 --> 01:05:46,630
the floor here so the floor is Dina

1187
01:05:43,780 --> 01:05:49,240
steams so the the Dina's table was quite

1188
01:05:46,630 --> 01:05:51,880
eclectic group of people it's like the

1189
01:05:49,240 --> 01:05:54,370
the DNS protocol probably so we did

1190
01:05:51,880 --> 01:05:55,810
something about Dina's privacy dinner

1191
01:05:54,370 --> 01:05:58,509
support for specific networks

1192
01:05:55,810 --> 01:06:04,000
provisioning and miscellaneous stuff the

1193
01:05:58,510 --> 01:06:07,510
catch-all so the Dina's privacy work we

1194
01:06:04,000 --> 01:06:09,610
worked on was zone transfers of TLS shot

1195
01:06:07,510 --> 01:06:13,900
and cert so you want to protect your

1196
01:06:09,610 --> 01:06:17,320
zone it's encrypted etc salt is the push

1197
01:06:13,900 --> 01:06:20,490
model certain kind of subscription model

1198
01:06:17,320 --> 01:06:23,830
I'm sorry yeah as a subscript support

1199
01:06:20,490 --> 01:06:28,060
dough proxy plugin for any web server by

1200
01:06:23,830 --> 01:06:31,630
pitter it's a far cgi plug-in interface

1201
01:06:28,060 --> 01:06:34,270
and means of preparations for dots and

1202
01:06:31,630 --> 01:06:36,940
I'll invite so there's a lot been

1203
01:06:34,270 --> 01:06:41,080
discussions on though in DNS community

1204
01:06:36,940 --> 01:06:43,660
and about a decided everything that's

1205
01:06:41,080 --> 01:06:45,430
choice for end-users and deployment are

1206
01:06:43,660 --> 01:06:48,730
important so I think there's a good work

1207
01:06:45,430 --> 01:06:52,390
that we include this dough support in

1208
01:06:48,730 --> 01:06:54,520
different pieces of software good the

1209
01:06:52,390 --> 01:06:57,279
dinner support for specific network so

1210
01:06:54,520 --> 01:06:59,710
DNS is kind of the Swiss Army of the

1211
01:06:57,280 --> 01:07:02,650
Internet of course I'm working dinner so

1212
01:06:59,710 --> 01:07:06,370
I'm I'm have some specific view on this

1213
01:07:02,650 --> 01:07:09,190
but also for ideal and P presented

1214
01:07:06,370 --> 01:07:12,790
already there were some collaboration

1215
01:07:09,190 --> 01:07:15,760
between Stephan and the ILP group to

1216
01:07:12,790 --> 01:07:18,490
extends part of the implementation of

1217
01:07:15,760 --> 01:07:22,030
DNS to work with an identify locator

1218
01:07:18,490 --> 01:07:24,910
split and in some other situations in

1219
01:07:22,030 --> 01:07:27,160
ipv6 only setting but you had it asked

1220
01:07:24,910 --> 01:07:29,980
for a quad a and there's only a a

1221
01:07:27,160 --> 01:07:31,779
records it has to be some middle box

1222
01:07:29,980 --> 01:07:33,640
that has to do some translation so does

1223
01:07:31,780 --> 01:07:38,920
the Dinah's prefix this coffee by mark

1224
01:07:33,640 --> 01:07:42,220
implemented in bind again DNS as a

1225
01:07:38,920 --> 01:07:43,960
provisioning tool here so for if you

1226
01:07:42,220 --> 01:07:46,990
want to do something with any cost and

1227
01:07:43,960 --> 01:07:51,460
you don't want to create an plus my gun

1228
01:07:46,990 --> 01:07:53,649
for DDoS attacks you want to have an any

1229
01:07:51,460 --> 01:07:56,110
cost open resolver with something like a

1230
01:07:53,650 --> 01:07:59,200
DNS server cookie so you protect your

1231
01:07:56,110 --> 01:08:03,220
open V cursor for DDoS attacks with

1232
01:07:59,200 --> 01:08:06,160
spoof addresses this is implemented in

1233
01:08:03,220 --> 01:08:09,490
bind and inbound and is D another

1234
01:08:06,160 --> 01:08:11,890
provisioning thing is temporary records

1235
01:08:09,490 --> 01:08:14,410
in the DNS sometimes like the less

1236
01:08:11,890 --> 01:08:16,269
encrypts ACM of the Acme protocol you

1237
01:08:14,410 --> 01:08:18,009
want to publish some info base for a

1238
01:08:16,270 --> 01:08:21,759
short time in your dinner zone

1239
01:08:18,009 --> 01:08:23,410
so you're the owner of a domain name for

1240
01:08:21,759 --> 01:08:26,790
gets your certificate you have the

1241
01:08:23,410 --> 01:08:29,200
timeout resource records after that the

1242
01:08:26,790 --> 01:08:33,490
information is removed from your zone

1243
01:08:29,200 --> 01:08:37,179
another important thing is the HCP s SVC

1244
01:08:33,490 --> 01:08:41,830
it's kind of a service records and it

1245
01:08:37,180 --> 01:08:43,690
has been a long-standing well problem to

1246
01:08:41,830 --> 01:08:45,609
solve actually so how do you provision

1247
01:08:43,689 --> 01:08:48,519
your web service and how do you adjust

1248
01:08:45,609 --> 01:08:50,650
them in your DNS has been the number of

1249
01:08:48,520 --> 01:08:53,770
solutions over the years by the DES

1250
01:08:50,649 --> 01:08:56,469
community by the HCP community and this

1251
01:08:53,770 --> 01:08:58,180
proposal seems to be received this wrist

1252
01:08:56,470 --> 01:09:01,270
proposals received positive feedback

1253
01:08:58,180 --> 01:09:03,850
from both working groups so it's a lot

1254
01:09:01,270 --> 01:09:05,710
of interest here and there's envy sorry

1255
01:09:03,850 --> 01:09:09,279
there's an implementation in Burma in

1256
01:09:05,710 --> 01:09:12,040
unbound the miscellaneous gets all we

1257
01:09:09,279 --> 01:09:14,710
did some work on llamo formats in DNS

1258
01:09:12,040 --> 01:09:17,019
packets the original RFC is actually

1259
01:09:14,710 --> 01:09:19,660
about Jason but their origin author of

1260
01:09:17,020 --> 01:09:22,410
their Seif sighs well Jamal is fine it's

1261
01:09:19,660 --> 01:09:24,580
readable and it's already in use in the

1262
01:09:22,410 --> 01:09:25,858
proof of concept of root server

1263
01:09:24,580 --> 01:09:30,059
measurements frame

1264
01:09:25,859 --> 01:09:32,400
that's also wrapping up we did a lot of

1265
01:09:30,060 --> 01:09:35,569
interrupts between ourselves between

1266
01:09:32,399 --> 01:09:38,670
different groups the ILP group the web

1267
01:09:35,569 --> 01:09:58,110
community I think we have done some good

1268
01:09:38,670 --> 01:10:01,730
work that's all and these are yeah okay

1269
01:09:58,110 --> 01:10:01,730
out for us and then wishy

1270
01:10:11,869 --> 01:10:17,880
who's the left and right thank you and I

1271
01:10:16,020 --> 01:10:19,530
want to thank every the organizers of

1272
01:10:17,880 --> 01:10:23,909
the whole thing as well thank you very

1273
01:10:19,530 --> 01:10:25,469
much but low latency low loss actually

1274
01:10:23,909 --> 01:10:30,559
it's low latency low loss scalable

1275
01:10:25,469 --> 01:10:35,119
throughput got the name wrong this is a

1276
01:10:30,560 --> 01:10:41,369
l4s going on in the transport area and

1277
01:10:35,119 --> 01:10:42,780
TPM NTSB WG right a bit of background

1278
01:10:41,369 --> 01:10:46,710
here but I'm looking to dwell on it

1279
01:10:42,780 --> 01:10:51,269
there's the where our code is all linked

1280
01:10:46,710 --> 01:10:54,810
from and the specs we're working to had

1281
01:10:51,270 --> 01:10:57,389
got number people we actually expected

1282
01:10:54,810 --> 01:10:59,070
to have more nearly all remote and

1283
01:10:57,389 --> 01:11:01,369
hardly anyone here but it worked out the

1284
01:10:59,070 --> 01:11:01,369
other way around

1285
01:11:02,960 --> 01:11:11,280
something like seven newcomers which was

1286
01:11:06,300 --> 01:11:16,980
pretty good and quite a few projects we

1287
01:11:11,280 --> 01:11:18,690
didn't expect I'll jump to the next time

1288
01:11:16,980 --> 01:11:20,280
then I'll come back we did plan

1289
01:11:18,690 --> 01:11:22,589
something something that didn't happen

1290
01:11:20,280 --> 01:11:26,159
with a bunch of people remote that were

1291
01:11:22,590 --> 01:11:31,619
all new just it became impractical it's

1292
01:11:26,159 --> 01:11:36,719
time in India basically and didn't quite

1293
01:11:31,619 --> 01:11:42,030
get the finishing but going back quite a

1294
01:11:36,719 --> 01:11:45,210
few projects to brought a testbed with

1295
01:11:42,030 --> 01:11:47,480
us God they all set up found there were

1296
01:11:45,210 --> 01:11:50,070
problems with latest limits Colonel

1297
01:11:47,480 --> 01:11:54,559
screwing up what we had intended to do

1298
01:11:50,070 --> 01:11:59,059
etc had to rebuild things blah blah

1299
01:11:54,560 --> 01:12:03,139
Richard got on well with Michael Tilson

1300
01:11:59,060 --> 01:12:06,570
implementing accurate Eastern in FreeBSD

1301
01:12:03,139 --> 01:12:12,630
with Michael dukes and helping there was

1302
01:12:06,570 --> 01:12:18,239
also I suppose the highlight really was

1303
01:12:12,630 --> 01:12:22,250
the l4s testbed we had the SC people

1304
01:12:18,239 --> 01:12:25,169
come over and give us their um-flint

1305
01:12:22,250 --> 01:12:26,239
where they wanted us to evaluate on it

1306
01:12:25,170 --> 01:12:28,530
we started working together on that

1307
01:12:26,239 --> 01:12:33,718
which will probably continue during the

1308
01:12:28,530 --> 01:12:37,050
week that's right and I'll now come on

1309
01:12:33,719 --> 01:12:39,980
to that we started the first scenario

1310
01:12:37,050 --> 01:12:45,540
and we've got the others to do

1311
01:12:39,980 --> 01:12:47,910
also the ns3 implementation fast start

1312
01:12:45,540 --> 01:12:49,739
was added which made good progress on

1313
01:12:47,910 --> 01:12:52,440
the freebsd implementation which didn't

1314
01:12:49,739 --> 01:12:55,049
exist before this got the handshake and

1315
01:12:52,440 --> 01:12:58,980
the feedback working and the protocol to

1316
01:12:55,050 --> 01:13:01,610
packet and packet drill and we built a

1317
01:12:58,980 --> 01:13:04,349
good work relationship with the SCE team

1318
01:13:01,610 --> 01:13:09,719
that's we the L first team but now we're

1319
01:13:04,350 --> 01:13:13,410
we're the L frozen SCE teams and what we

1320
01:13:09,719 --> 01:13:15,300
learned well DC TCP behavior keeps

1321
01:13:13,410 --> 01:13:16,650
changing in recent Linux kernels so I

1322
01:13:15,300 --> 01:13:18,860
think we're gonna have to develop some

1323
01:13:16,650 --> 01:13:22,440
regression tests for the maintainer

1324
01:13:18,860 --> 01:13:25,139
because it's just impossible for us to

1325
01:13:22,440 --> 01:13:26,549
use it at the moment all you have to

1326
01:13:25,140 --> 01:13:32,400
keep going right back to an early

1327
01:13:26,550 --> 01:13:34,920
version of the kernel accuracy n we now

1328
01:13:32,400 --> 01:13:36,780
question one of the or the most recent

1329
01:13:34,920 --> 01:13:38,550
change you made to the spec having tried

1330
01:13:36,780 --> 01:13:43,349
to implement it so we may go back on

1331
01:13:38,550 --> 01:13:46,170
that but we rethink it and discovered

1332
01:13:43,350 --> 01:13:47,640
that a counter that crosses a boundary

1333
01:13:46,170 --> 01:13:50,280
obviously we knew it crossed by boundary

1334
01:13:47,640 --> 01:13:52,140
that just made it started thinking about

1335
01:13:50,280 --> 01:13:54,630
cross compiling and stuff made it a bit

1336
01:13:52,140 --> 01:13:57,929
more challenging to make sure that would

1337
01:13:54,630 --> 01:13:59,670
compile correctly and also learned that

1338
01:13:57,929 --> 01:14:03,120
remote attendance of newcomers that our

1339
01:13:59,670 --> 01:14:05,390
hackathon doesn't really work yep ok

1340
01:14:03,120 --> 01:14:09,059
thanks

1341
01:14:05,390 --> 01:14:09,060
[Applause]

1342
01:14:15,140 --> 01:14:34,410
okay where's the wishy here's the

1343
01:14:18,150 --> 01:14:36,299
Machine okay thank you so this is a

1344
01:14:34,410 --> 01:14:39,090
report from the wiki hugging activity

1345
01:14:36,300 --> 01:14:41,130
here at the IETF hackathon so we see a

1346
01:14:39,090 --> 01:14:42,600
work on IOT semantics and hyper media

1347
01:14:41,130 --> 01:14:45,330
interoperability is a long-running

1348
01:14:42,600 --> 01:14:47,820
activity at the IETF is already our

1349
01:14:45,330 --> 01:14:49,440
sixth hackathon we are in Tingting

1350
01:14:47,820 --> 01:14:51,599
research group but of course spanning

1351
01:14:49,440 --> 01:14:56,490
work across multiple organizations and

1352
01:14:51,600 --> 01:14:58,170
individuals usually our plan has been

1353
01:14:56,490 --> 01:15:00,210
finding different ways turn on and off

1354
01:14:58,170 --> 01:15:02,550
lights does that's what IOT is of course

1355
01:15:00,210 --> 01:15:04,740
all about this time we had a slightly

1356
01:15:02,550 --> 01:15:07,200
different focus here we work on two

1357
01:15:04,740 --> 01:15:09,170
major topic one is this IOT data model

1358
01:15:07,200 --> 01:15:11,760
convergence so reducing fragmentation

1359
01:15:09,170 --> 01:15:14,100
increasing interoperability on the data

1360
01:15:11,760 --> 01:15:15,660
models and then hypermedia for IOT

1361
01:15:14,100 --> 01:15:18,870
but this time instead of focusing on

1362
01:15:15,660 --> 01:15:21,030
lights focusing on making coffee the

1363
01:15:18,870 --> 01:15:23,040
specifications included in particle

1364
01:15:21,030 --> 01:15:24,780
working on coral the constraint restful

1365
01:15:23,040 --> 01:15:26,190
application language that has been in

1366
01:15:24,780 --> 01:15:27,660
the thinking research group quite some

1367
01:15:26,190 --> 01:15:30,389
time and now moving to the core working

1368
01:15:27,660 --> 01:15:32,130
group for Standardization but also

1369
01:15:30,390 --> 01:15:33,960
specification from other organizations

1370
01:15:32,130 --> 01:15:35,970
so we've been working actively on the

1371
01:15:33,960 --> 01:15:38,670
one data model simple definition format

1372
01:15:35,970 --> 01:15:40,560
and then also data models from other

1373
01:15:38,670 --> 01:15:42,450
organizations in part on omae's spec

1374
01:15:40,560 --> 01:15:47,460
works like within to them and keeps our

1375
01:15:42,450 --> 01:15:49,139
models on the datum or convergence so we

1376
01:15:47,460 --> 01:15:51,930
use that one data model simple

1377
01:15:49,140 --> 01:15:54,630
destination format to do data and model

1378
01:15:51,930 --> 01:15:56,700
interchange so that format is a language

1379
01:15:54,630 --> 01:15:58,230
that you can use to describe data models

1380
01:15:56,700 --> 01:16:00,000
from varied of different organisations

1381
01:15:58,230 --> 01:16:01,799
and based on those descriptions you can

1382
01:16:00,000 --> 01:16:04,770
do for example translators between those

1383
01:16:01,800 --> 01:16:06,690
models but also able to exchange model

1384
01:16:04,770 --> 01:16:08,250
rate model data so bring for example

1385
01:16:06,690 --> 01:16:11,040
models from different ecosystems to your

1386
01:16:08,250 --> 01:16:12,810
ecosystem we have been working on some

1387
01:16:11,040 --> 01:16:14,580
automatic tools for this purpose so we

1388
01:16:12,810 --> 01:16:17,130
have this automatic conversion of if so

1389
01:16:14,580 --> 01:16:18,510
I with the models into SDF and we spend

1390
01:16:17,130 --> 01:16:21,000
some time in the hackathon improving the

1391
01:16:18,510 --> 01:16:23,160
tooling and in addition to improvements

1392
01:16:21,000 --> 01:16:24,960
we also discover quite a few potential

1393
01:16:23,160 --> 01:16:26,610
improvements on the SDF language itself

1394
01:16:24,960 --> 01:16:27,960
so on the data type schema and

1395
01:16:26,610 --> 01:16:30,269
constraints

1396
01:16:27,960 --> 01:16:32,460
in the STF language to be using JSON

1397
01:16:30,270 --> 01:16:34,770
schema for doing the validation of the

1398
01:16:32,460 --> 01:16:37,070
models but also after this hackathon now

1399
01:16:34,770 --> 01:16:40,170
we have a tool for generating CDL

1400
01:16:37,070 --> 01:16:41,700
schemas for there for the SDF language

1401
01:16:40,170 --> 01:16:44,640
and we can use to all the CDL tooling

1402
01:16:41,700 --> 01:16:46,830
for that too and that's a side result of

1403
01:16:44,640 --> 01:16:49,410
this activity now we have also a JSON

1404
01:16:46,830 --> 01:16:51,450
format proposal for coral so you can use

1405
01:16:49,410 --> 01:16:56,340
the use of JSON tooling with your with a

1406
01:16:51,450 --> 01:16:57,780
color representations one activity on

1407
01:16:56,340 --> 01:17:00,000
the data models was this binary data

1408
01:16:57,780 --> 01:17:02,969
extraction so if you have something that

1409
01:17:00,000 --> 01:17:05,250
is not easy useable JSON format or such

1410
01:17:02,970 --> 01:17:06,900
you can now use these tools for extract

1411
01:17:05,250 --> 01:17:08,610
json-ld from it we have playground

1412
01:17:06,900 --> 01:17:10,830
deployment available on that that you

1413
01:17:08,610 --> 01:17:14,519
can post post your data and get json-ld

1414
01:17:10,830 --> 01:17:16,350
representations back and the other big

1415
01:17:14,520 --> 01:17:17,970
one was proving coffee with hypermedia

1416
01:17:16,350 --> 01:17:20,460
so of course from the days of hyper

1417
01:17:17,970 --> 01:17:22,020
hyper media hypertext coffeepot control

1418
01:17:20,460 --> 01:17:23,730
protocol x we'd be wanting to do this

1419
01:17:22,020 --> 01:17:26,190
now we have modern tools and protocols

1420
01:17:23,730 --> 01:17:27,750
for this purpose so you have a carrier

1421
01:17:26,190 --> 01:17:29,540
crate coffee machine reference scenario

1422
01:17:27,750 --> 01:17:31,950
also known as Karstens coffee machine

1423
01:17:29,540 --> 01:17:33,840
you can discover and describe your

1424
01:17:31,950 --> 01:17:36,540
coffee machine discover many options

1425
01:17:33,840 --> 01:17:38,670
make coffee selections and finally get

1426
01:17:36,540 --> 01:17:40,470
get some coffee brewed we have now two

1427
01:17:38,670 --> 01:17:42,630
open source implementations that use

1428
01:17:40,470 --> 01:17:44,550
coop and coral to achieve especially the

1429
01:17:42,630 --> 01:17:50,070
first three steps the last one we're

1430
01:17:44,550 --> 01:17:51,630
still working on and this is the set of

1431
01:17:50,070 --> 01:17:54,179
people who are working in our team this

1432
01:17:51,630 --> 01:17:56,430
time we have one new first-time member

1433
01:17:54,180 --> 01:17:58,410
mike mackool and we had two remote

1434
01:17:56,430 --> 01:18:00,720
participants if you want to see more

1435
01:17:58,410 --> 01:18:02,370
information links open source

1436
01:18:00,720 --> 01:18:04,410
implementations etc you can go to our

1437
01:18:02,370 --> 01:18:07,790
wiki page and all the information is

1438
01:18:04,410 --> 01:18:12,010
there thank you

1439
01:18:07,790 --> 01:18:12,010
[Applause]

1440
01:18:25,780 --> 01:18:28,858
[Music]

1441
01:18:29,480 --> 01:18:46,639
sorry okay I see the UM see the quack

1442
01:19:19,530 --> 01:19:24,420
okay

1443
01:19:21,630 --> 01:19:25,980
hi and this is the report from the quick

1444
01:19:24,420 --> 01:19:30,300
table where the big table in the middle

1445
01:19:25,980 --> 01:19:32,389
somewhere we are also the htv-3 table

1446
01:19:30,300 --> 01:19:35,730
because that's kind of the same thing

1447
01:19:32,390 --> 01:19:37,560
this is our regular interrupts

1448
01:19:35,730 --> 01:19:40,200
spreadsheet it's getting pretty crowded

1449
01:19:37,560 --> 01:19:42,390
on so we had nineteen implementations

1450
01:19:40,200 --> 01:19:46,349
that we're tracking most of them are

1451
01:19:42,390 --> 01:19:49,160
both client and server each letter is a

1452
01:19:46,350 --> 01:19:51,810
test that's either passed or not passed

1453
01:19:49,160 --> 01:19:53,700
we now have three lines the first one is

1454
01:19:51,810 --> 01:19:57,270
sort of the table stakes basic protocol

1455
01:19:53,700 --> 01:19:59,040
stuff second row is quote-unquote

1456
01:19:57,270 --> 01:20:00,510
advanced features that it should really

1457
01:19:59,040 --> 01:20:02,519
be part of the first row but they're not

1458
01:20:00,510 --> 01:20:03,960
sufficiently widely deployed yet that we

1459
01:20:02,520 --> 01:20:05,850
can do that and the third row is new

1460
01:20:03,960 --> 01:20:10,140
which is a bunch of new tests that

1461
01:20:05,850 --> 01:20:12,180
specifically test htv3 compatibility you

1462
01:20:10,140 --> 01:20:13,890
see bunch of white compared to what I

1463
01:20:12,180 --> 01:20:17,310
showed in previous hackathons that's

1464
01:20:13,890 --> 01:20:20,390
because the - 22 drafts only dropped

1465
01:20:17,310 --> 01:20:22,080
like maybe 10 days ago so a bunch of

1466
01:20:20,390 --> 01:20:24,660
implementations basically didn't have

1467
01:20:22,080 --> 01:20:27,150
time to update yet so this this should

1468
01:20:24,660 --> 01:20:28,620
this should change but this is the most

1469
01:20:27,150 --> 01:20:30,870
remote nation we've ever had we keep

1470
01:20:28,620 --> 01:20:33,690
adding new ones so it's looking pretty

1471
01:20:30,870 --> 01:20:36,690
good most of them were here a bunch of

1472
01:20:33,690 --> 01:20:38,250
people also send engineers specifically

1473
01:20:36,690 --> 01:20:39,629
only to the hackathon and they're not

1474
01:20:38,250 --> 01:20:42,090
going to stay around for the ITF which

1475
01:20:39,630 --> 01:20:44,510
is kind of an interesting development so

1476
01:20:42,090 --> 01:20:47,010
it seems our companies find at least

1477
01:20:44,510 --> 01:20:48,600
more benefit in hackathon and the actual

1478
01:20:47,010 --> 01:20:53,370
standards meeting we should maybe

1479
01:20:48,600 --> 01:20:54,570
consider in some form and so shown is a

1480
01:20:53,370 --> 01:20:56,280
lot so I'm not gonna spend too much more

1481
01:20:54,570 --> 01:20:58,980
time on this one thing that's also new

1482
01:20:56,280 --> 01:21:01,650
is I don't know what it shows up like

1483
01:20:58,980 --> 01:21:02,820
this so there's a general yang guy I

1484
01:21:01,650 --> 01:21:04,889
might can see man I've done a bunch of

1485
01:21:02,820 --> 01:21:06,480
work so I don't know about you

1486
01:21:04,890 --> 01:21:09,210
researchers amongst you probably know NS

1487
01:21:06,480 --> 01:21:13,469
3 which is a network simulator and Jonna

1488
01:21:09,210 --> 01:21:16,350
and Martin have worked on allowing you

1489
01:21:13,470 --> 01:21:19,170
to define an NS 3 simulation so you can

1490
01:21:16,350 --> 01:21:21,560
define well-defined TCP cross traffic or

1491
01:21:19,170 --> 01:21:24,450
topologies and then you can plumb in

1492
01:21:21,560 --> 01:21:25,740
actual Crick implementation into that

1493
01:21:24,450 --> 01:21:28,110
topology and you can do congestion

1494
01:21:25,740 --> 01:21:29,700
testing for example repeatable so it's

1495
01:21:28,110 --> 01:21:31,259
kind of nice it's kind of cool it's it's

1496
01:21:29,700 --> 01:21:32,580
early days is the first time we tried

1497
01:21:31,260 --> 01:21:34,360
this we plugged in I think two or three

1498
01:21:32,580 --> 01:21:36,580
different ones

1499
01:21:34,360 --> 01:21:38,259
this is a sequence number of plus order

1500
01:21:36,580 --> 01:21:39,519
the transfer people will be very excited

1501
01:21:38,260 --> 01:21:41,139
because now quick starts to look like

1502
01:21:39,520 --> 01:21:43,420
TCP you can look at this graph and you

1503
01:21:41,139 --> 01:21:45,310
see what's going on which is hide before

1504
01:21:43,420 --> 01:21:47,050
because it's all encrypted so this

1505
01:21:45,310 --> 01:21:49,510
endpoint corporation you can generate

1506
01:21:47,050 --> 01:21:53,199
plots like this this is from the

1507
01:21:49,510 --> 01:21:55,690
simulator with one of the stacks we're

1508
01:21:53,199 --> 01:21:57,309
using Robin Marx's tool

1509
01:21:55,690 --> 01:21:59,559
there's the logging format it's being

1510
01:21:57,310 --> 01:22:01,270
defined called cue log he has tools to

1511
01:21:59,560 --> 01:22:03,100
visualize cue lock into something like

1512
01:22:01,270 --> 01:22:04,690
this from the bottom you see like how

1513
01:22:03,100 --> 01:22:06,460
the RTT changes that quick things that

1514
01:22:04,690 --> 01:22:08,530
has over the path and then you see that

1515
01:22:06,460 --> 01:22:10,540
a regular sequence number AK plot so

1516
01:22:08,530 --> 01:22:12,159
this is exciting because finally it

1517
01:22:10,540 --> 01:22:13,510
means you don't have to be like the look

1518
01:22:12,159 --> 01:22:14,920
at the bits anymore in order to

1519
01:22:13,510 --> 01:22:16,750
understand what's going on in terms of

1520
01:22:14,920 --> 01:22:26,230
congestion control so this is very cool

1521
01:22:16,750 --> 01:22:29,199
thank you ok if there's anyone other

1522
01:22:26,230 --> 01:22:30,968
than TLS 1.3 who has who uploaded a

1523
01:22:29,199 --> 01:22:33,969
presentation and hasn't presented yet

1524
01:22:30,969 --> 01:22:37,920
come up here and see me and let's go

1525
01:22:33,969 --> 01:22:37,920
find the TCP 1.3

1526
01:22:45,390 --> 01:22:58,080
you saw I've got it there TLS 1.3 I said

1527
01:22:54,610 --> 01:22:58,080
TCP green check

1528
01:23:11,690 --> 01:23:18,030
okay very good can you help us with the

1529
01:23:15,750 --> 01:23:20,220
slides please happy to just say next

1530
01:23:18,030 --> 01:23:22,650
slide okay thank you very much so

1531
01:23:20,220 --> 01:23:25,230
breathing it's Logan from Mauritius from

1532
01:23:22,650 --> 01:23:27,269
the southwest home team so we are based

1533
01:23:25,230 --> 01:23:33,089
in Mauritius oh we've done a bunch of

1534
01:23:27,270 --> 01:23:36,960
work on TLS 1.3 SSH SC Venu dscp code

1535
01:23:33,090 --> 01:23:38,090
point and the ITF mobile app next slide

1536
01:23:36,960 --> 01:23:41,730
please

1537
01:23:38,090 --> 01:23:46,470
Sotiris 1.3 our aim was to get more

1538
01:23:41,730 --> 01:23:48,690
applications running on TLS 1.3 dscp ID

1539
01:23:46,470 --> 01:23:50,280
it's a new code point but was just I

1540
01:23:48,690 --> 01:23:52,799
just became an RFC

1541
01:23:50,280 --> 01:23:56,099
and we'll be working on into integrating

1542
01:23:52,800 --> 01:23:58,980
but into open source projects that does

1543
01:23:56,100 --> 01:24:03,120
the ITF mobile app but we started

1544
01:23:58,980 --> 01:24:08,519
working on previous ITF when B is the

1545
01:24:03,120 --> 01:24:10,200
SCE drop but came up recently and when

1546
01:24:08,520 --> 01:24:14,340
the last thing but we work on was on

1547
01:24:10,200 --> 01:24:14,730
duplicating or c4 in SSH so next slide

1548
01:24:14,340 --> 01:24:18,900
please

1549
01:24:14,730 --> 01:24:22,259
so I'm TLS 1.3 we've worked mostly with

1550
01:24:18,900 --> 01:24:26,070
good on base software packages so matter

1551
01:24:22,260 --> 01:24:32,190
moves it says like slack alternative so

1552
01:24:26,070 --> 01:24:34,500
the PIO was said check sm TP is another

1553
01:24:32,190 --> 01:24:39,419
good on package but still working

1554
01:24:34,500 --> 01:24:41,970
progress and m AI ni which is for Amazon

1555
01:24:39,420 --> 01:24:44,670
s3 still written in go lang

1556
01:24:41,970 --> 01:24:48,240
we added the we've added the TLS one

1557
01:24:44,670 --> 01:24:52,380
police report and lastly we've got TLS

1558
01:24:48,240 --> 01:24:55,320
1.3 API integrated into the SP 11 port 4

1559
01:24:52,380 --> 01:24:59,280
and the last thing is but we are

1560
01:24:55,320 --> 01:25:02,580
developing a c-sharp library for TLS

1561
01:24:59,280 --> 01:25:05,580
1.30 TLS Rock and it got

1562
01:25:02,580 --> 01:25:07,110
refracted and it has some support for

1563
01:25:05,580 --> 01:25:11,130
hello retry and things like that

1564
01:25:07,110 --> 01:25:13,320
40s 1.3 into shock so the other stuff

1565
01:25:11,130 --> 01:25:16,260
that we've been doing working on is DSC

1566
01:25:13,320 --> 01:25:19,200
ple when you call point we integrated

1567
01:25:16,260 --> 01:25:20,910
the patch we integrated it into net

1568
01:25:19,200 --> 01:25:23,730
birth

1569
01:25:20,910 --> 01:25:27,320
repeal was sent to open SSL

1570
01:25:23,730 --> 01:25:29,999
and it was also sent to enough tables

1571
01:25:27,320 --> 01:25:32,849
the other thing that we worked on was we

1572
01:25:29,999 --> 01:25:37,409
go back up as I said there are links to

1573
01:25:32,849 --> 01:25:43,699
a screen shot and it's it has improved

1574
01:25:37,409 --> 01:25:47,039
compared to loss ITF resin-based shop

1575
01:25:43,699 --> 01:25:50,638
implementation of ssh that's still

1576
01:25:47,039 --> 01:25:54,230
running with hopeful and we duplicated

1577
01:25:50,639 --> 01:25:56,280
but lost e we work on an SC

1578
01:25:54,230 --> 01:26:00,509
implementation for F to curdle in

1579
01:25:56,280 --> 01:26:04,440
freebsd based on paragraph at Rodney and

1580
01:26:00,510 --> 01:26:07,230
Jonathan were published it's still very

1581
01:26:04,440 --> 01:26:12,360
basic but it's enough but we can see SC

1582
01:26:07,230 --> 01:26:13,428
packets on the wire on Wireshark so next

1583
01:26:12,360 --> 01:26:17,190
slide please

1584
01:26:13,429 --> 01:26:19,650
so what we learned basically was open

1585
01:26:17,190 --> 01:26:22,650
source project then to want to wait for

1586
01:26:19,650 --> 01:26:25,980
new dscp code points to become RFC

1587
01:26:22,650 --> 01:26:30,629
before accepting patches but spur case

1588
01:26:25,980 --> 01:26:33,869
for ssh so we wanted to wait our c4 in

1589
01:26:30,630 --> 01:26:36,690
ssh is mostly fading away it's mostly

1590
01:26:33,869 --> 01:26:38,429
going away we've not seen that many key

1591
01:26:36,690 --> 01:26:45,570
cases of open source projects still

1592
01:26:38,429 --> 01:26:50,099
shipping with SCE is Jeff starting so

1593
01:26:45,570 --> 01:26:52,380
it's worth looking more into that was

1594
01:26:50,099 --> 01:26:56,130
also over work what was going on with

1595
01:26:52,380 --> 01:27:02,190
over SC developers and lastly go long

1596
01:26:56,130 --> 01:27:06,420
1.12 ships with TLS 1.3 api so expect

1597
01:27:02,190 --> 01:27:12,089
more TLS 1.3 in software packages

1598
01:27:06,420 --> 01:27:14,460
returning ghulam so lost side so what's

1599
01:27:12,090 --> 01:27:18,329
basically yes we are whole team here

1600
01:27:14,460 --> 01:27:21,480
from Mauritius we are grateful to my

1601
01:27:18,329 --> 01:27:26,009
sponsor business cos value who hostages

1602
01:27:21,480 --> 01:27:28,348
and visible links as well to to our

1603
01:27:26,010 --> 01:27:32,159
ripples where we are some our results

1604
01:27:28,349 --> 01:27:35,309
over SC as well as we could and for the

1605
01:27:32,159 --> 01:27:37,290
ITF mobile app we have it via over that

1606
01:27:35,309 --> 01:27:41,670
link and we also included

1607
01:27:37,290 --> 01:27:44,700
for ILS shop flourish so thank you for

1608
01:27:41,670 --> 01:27:50,400
everybody for listening to what we've

1609
01:27:44,700 --> 01:27:53,519
done thank you and it's it's interesting

1610
01:27:50,400 --> 01:27:55,730
to see an entire project remote that's

1611
01:27:53,520 --> 01:28:01,230
cool thank you

1612
01:27:55,730 --> 01:28:02,969
anybody we missed okay thank you

1613
01:28:01,230 --> 01:28:04,559
everybody for presenting and thank you

1614
01:28:02,970 --> 01:28:09,060
everybody for coming to the hackathon

1615
01:28:04,560 --> 01:28:10,320
and Charles's backup and thank you so

1616
01:28:09,060 --> 01:28:12,180
much Barry for helping with the

1617
01:28:10,320 --> 01:28:14,040
presentations it's a it's a lot to go

1618
01:28:12,180 --> 01:28:15,900
through and it's it's handy to have have

1619
01:28:14,040 --> 01:28:18,240
helped have a couple people

1620
01:28:15,900 --> 01:28:21,900
Rory's welcome to welcome more help for

1621
01:28:18,240 --> 01:28:24,510
the hackathon we also huge huge thanks

1622
01:28:21,900 --> 01:28:26,160
to our sponsors too I can they really

1623
01:28:24,510 --> 01:28:28,250
stepped up big as I mentioned not only

1624
01:28:26,160 --> 01:28:30,690
for this hackathon but for the next two

1625
01:28:28,250 --> 01:28:33,330
we'd really love to line up more

1626
01:28:30,690 --> 01:28:36,210
sponsors for the hackathon because as

1627
01:28:33,330 --> 01:28:38,100
you can see it it's always it's it's

1628
01:28:36,210 --> 01:28:41,210
quite large and it takes all the money

1629
01:28:38,100 --> 01:28:43,230
to feed us and have a space for us and

1630
01:28:41,210 --> 01:28:45,240
great to see that everyone gets so much

1631
01:28:43,230 --> 01:28:47,040
value out of it so if you're at a

1632
01:28:45,240 --> 01:28:49,800
company or an organization that has the

1633
01:28:47,040 --> 01:28:52,590
ability to sponsor we'd appreciate that

1634
01:28:49,800 --> 01:28:55,770
and thanks to Nova flow for helping out

1635
01:28:52,590 --> 01:28:57,900
this time around that was great as well

1636
01:28:55,770 --> 01:29:00,900
and thanks to all you really the

1637
01:28:57,900 --> 01:29:03,599
champions Ally thank you for having your

1638
01:29:00,900 --> 01:29:05,009
project welcoming newcomers we want to

1639
01:29:03,600 --> 01:29:08,340
continue to make this a great experience

1640
01:29:05,010 --> 01:29:09,300
for newcomers to not just for those of

1641
01:29:08,340 --> 01:29:11,010
us who have been working on the

1642
01:29:09,300 --> 01:29:13,530
standards for a long time so appreciate

1643
01:29:11,010 --> 01:29:14,670
those of you who did have new people in

1644
01:29:13,530 --> 01:29:16,380
your team and you helped them get

1645
01:29:14,670 --> 01:29:19,890
started that's just fantastic

1646
01:29:16,380 --> 01:29:21,420
so and thanks for you just paying

1647
01:29:19,890 --> 01:29:23,520
attention to all the presentations they

1648
01:29:21,420 --> 01:29:25,830
were recorded we'll have them they were

1649
01:29:23,520 --> 01:29:26,910
live streamed also so if you missed

1650
01:29:25,830 --> 01:29:30,480
something you can go and get it

1651
01:29:26,910 --> 01:29:31,950
afterwards lastly if you have you didn't

1652
01:29:30,480 --> 01:29:34,740
present anything but you still have some

1653
01:29:31,950 --> 01:29:38,730
useful results to share please do upload

1654
01:29:34,740 --> 01:29:40,500
your presentation to the github org or

1655
01:29:38,730 --> 01:29:42,839
or if you want you can just send it to

1656
01:29:40,500 --> 01:29:44,490
me I'll all upload it for you if you

1657
01:29:42,840 --> 01:29:46,590
want to put your PowerPoint presentation

1658
01:29:44,490 --> 01:29:50,670
there or some other format that's fine

1659
01:29:46,590 --> 01:29:53,820
now just for up here we wanted the PDFs

1660
01:29:50,670 --> 01:30:02,730
and I think that's it Thanks good luck

1661
01:29:53,820 --> 01:30:04,889
with the rest of the IHF meeting and as

1662
01:30:02,730 --> 01:30:07,500
always thanks so much to Charles for all

1663
01:30:04,890 --> 01:30:10,689
the work he does it's a big job

1664
01:30:07,500 --> 01:30:10,689
[Applause]

