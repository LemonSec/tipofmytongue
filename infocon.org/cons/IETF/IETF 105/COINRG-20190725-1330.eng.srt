1
00:00:29,310 --> 00:00:32,449
[Music]

2
00:01:11,799 --> 00:01:18,740
hello hello everyone this is computing

3
00:01:16,399 --> 00:01:21,200
in the network point we're going to get

4
00:01:18,740 --> 00:01:24,440
going to just a few seconds if you are

5
00:01:21,200 --> 00:01:27,470
not here for coin please stay anyway you

6
00:01:24,440 --> 00:01:29,679
have a great program and if you're here

7
00:01:27,470 --> 00:01:32,990
for coin well you're at the right place

8
00:01:29,679 --> 00:01:35,479
we still need someone to take notes I

9
00:01:32,990 --> 00:01:39,080
had sent them and request this morning

10
00:01:35,479 --> 00:01:43,039
and nobody answered so if somebody who

11
00:01:39,080 --> 00:01:46,940
is not presenting could actually be the

12
00:01:43,039 --> 00:01:50,270
Good Samaritan and take notes it would

13
00:01:46,940 --> 00:01:52,940
be greatly appreciated it's not not

14
00:01:50,270 --> 00:01:56,390
going to name it I'm a namely a

15
00:01:52,940 --> 00:01:58,700
volunteer I'm so anyway please if

16
00:01:56,390 --> 00:02:01,520
somebody can take notes just raise your

17
00:01:58,700 --> 00:02:04,119
hand and we're going to get going oh

18
00:02:01,520 --> 00:02:21,910
you're Rachel thank you so very much

19
00:02:04,119 --> 00:02:21,910
so Michael come over

20
00:02:33,260 --> 00:02:38,119
[Music]

21
00:02:42,689 --> 00:02:45,689
okay

22
00:02:46,409 --> 00:02:53,709
hi I'm Eve Schuler and these are my

23
00:02:51,040 --> 00:02:55,690
co-chairs we reach Jose and Jeffrey

24
00:02:53,709 --> 00:02:58,319
welcome to the coin working group this

25
00:02:55,690 --> 00:03:00,900
is our second official meeting our third

26
00:02:58,319 --> 00:03:03,608
gathering of course we started with Bob

27
00:03:00,900 --> 00:03:07,420
we're still in proposed research group

28
00:03:03,609 --> 00:03:08,680
mode and we're grateful to see so many

29
00:03:07,420 --> 00:03:12,250
of you out there and so many

30
00:03:08,680 --> 00:03:16,799
contributions you're in the ITF IRT F

31
00:03:12,250 --> 00:03:16,799
you know this note well slide well

32
00:03:17,139 --> 00:03:23,409
things you should know our data tracker

33
00:03:21,549 --> 00:03:25,930
where all of our documents are our

34
00:03:23,409 --> 00:03:29,069
Charter our milestones we're in the

35
00:03:25,930 --> 00:03:32,400
middle of we're in the middle of

36
00:03:29,069 --> 00:03:35,548
migrating basically from a wiki based

37
00:03:32,400 --> 00:03:39,549
mode of sharing information to a get

38
00:03:35,549 --> 00:03:42,340
github document archive as well as code

39
00:03:39,549 --> 00:03:45,190
archive and the coin mailing list is

40
00:03:42,340 --> 00:03:47,410
simple to remember coin at IRT F org and

41
00:03:45,190 --> 00:03:48,940
we have remote participants today we're

42
00:03:47,410 --> 00:03:52,299
gonna have a remote presentation and

43
00:03:48,940 --> 00:03:54,160
we've just appropriated our own slack

44
00:03:52,299 --> 00:03:58,629
workspace which will also allow us to

45
00:03:54,160 --> 00:04:03,418
have interim meetings more easily we

46
00:03:58,629 --> 00:04:06,790
have a full agenda we have basically

47
00:04:03,419 --> 00:04:08,260
many many internet drafts many of them

48
00:04:06,790 --> 00:04:10,179
will be presented today at least the new

49
00:04:08,260 --> 00:04:12,040
ones I think we've got eight at this

50
00:04:10,180 --> 00:04:14,260
point in time and five of which will be

51
00:04:12,040 --> 00:04:16,269
presented today in addition to the

52
00:04:14,260 --> 00:04:18,029
administrivia we'll talk about next

53
00:04:16,269 --> 00:04:22,060
meetings that are going to be happening

54
00:04:18,029 --> 00:04:24,729
and I think the only change to these

55
00:04:22,060 --> 00:04:27,099
presentations is that Dirk and your have

56
00:04:24,729 --> 00:04:35,550
a combined merged presentation based on

57
00:04:27,099 --> 00:04:35,550
their draft yeah I think it's you okay

58
00:04:37,260 --> 00:04:43,420
so this is Jeffrey for those new to this

59
00:04:40,810 --> 00:04:46,360
group so the general goal of this group

60
00:04:43,420 --> 00:04:49,180
is to foster research in computing

61
00:04:46,360 --> 00:04:51,670
network to improve performance and our

62
00:04:49,180 --> 00:04:53,560
folks will be network architecture and

63
00:04:51,670 --> 00:04:56,530
protocols and by addressing

64
00:04:53,560 --> 00:04:58,570
real-time use-case application isn't

65
00:04:56,530 --> 00:05:00,609
working in progress so we have not

66
00:04:58,570 --> 00:05:03,940
modified the chart a little bit after

67
00:05:00,610 --> 00:05:06,040
Prague and June interim meeting and also

68
00:05:03,940 --> 00:05:08,650
based on that discussion mailing list

69
00:05:06,040 --> 00:05:11,800
and thanks for the contributors and the

70
00:05:08,650 --> 00:05:16,210
participants so main change now yes on

71
00:05:11,800 --> 00:05:19,260
the items in scope section as you can

72
00:05:16,210 --> 00:05:23,020
read in this slide but the plan is to

73
00:05:19,260 --> 00:05:26,320
capture potential proposals from this

74
00:05:23,020 --> 00:05:30,400
meeting and maybe after then we will

75
00:05:26,320 --> 00:05:33,159
have a revised devotion submit to I have

76
00:05:30,400 --> 00:05:37,530
chair to review and approve with the

77
00:05:33,160 --> 00:05:40,390
consensus of this group so we also are

78
00:05:37,530 --> 00:05:43,750
working on some milestones very

79
00:05:40,390 --> 00:05:47,620
preliminary we know this is a whisky up

80
00:05:43,750 --> 00:05:52,919
for a party so it will not tell you that

81
00:05:47,620 --> 00:05:57,280
unless we are approved as a formal one

82
00:05:52,919 --> 00:05:59,919
but we you know we hope to use this to

83
00:05:57,280 --> 00:06:03,130
check some discussions on the future

84
00:05:59,919 --> 00:06:06,609
plan so we suggested to capture the

85
00:06:03,130 --> 00:06:09,070
still of art and attic articulates some

86
00:06:06,610 --> 00:06:12,160
challenges then target to the use case

87
00:06:09,070 --> 00:06:15,070
and also identifies the ecosystem

88
00:06:12,160 --> 00:06:18,040
dependency and also the requirements

89
00:06:15,070 --> 00:06:21,730
then hopefully we can have a specific

90
00:06:18,040 --> 00:06:24,940
coin scope may be later next year and

91
00:06:21,730 --> 00:06:29,440
specifically enough so that within which

92
00:06:24,940 --> 00:06:30,370
new architecture and mechanism protocols

93
00:06:29,440 --> 00:06:33,580
can be proposed

94
00:06:30,370 --> 00:06:36,460
we are also linked some links the

95
00:06:33,580 --> 00:06:38,050
existing individual shaft to these

96
00:06:36,460 --> 00:06:42,640
milestones

97
00:06:38,050 --> 00:06:45,820
just as related related rafts so

98
00:06:42,640 --> 00:06:48,659
basically the input to the disk the

99
00:06:45,820 --> 00:06:51,210
input up to the discussion of each apart

100
00:06:48,660 --> 00:06:55,380
it's not we are not implying this will

101
00:06:51,210 --> 00:06:58,969
be potential for more research groups

102
00:06:55,380 --> 00:07:09,840
draft right it's too early to see that

103
00:06:58,970 --> 00:07:11,640
okay yeah well we're just a proposed

104
00:07:09,840 --> 00:07:14,159
research group we're kind of lucky that

105
00:07:11,640 --> 00:07:16,770
we've had a bunch of people already to

106
00:07:14,160 --> 00:07:20,430
do work that addresses the issues that

107
00:07:16,770 --> 00:07:22,950
we want to do so we currently have as

108
00:07:20,430 --> 00:07:25,530
you can see four new drafts which was

109
00:07:22,950 --> 00:07:29,640
really good for this meeting and we have

110
00:07:25,530 --> 00:07:31,830
three existing drafts and that we're

111
00:07:29,640 --> 00:07:34,560
updated and we didn't have time to put

112
00:07:31,830 --> 00:07:37,859
them on the agenda for today but they're

113
00:07:34,560 --> 00:07:40,740
progressing especially the one on XR is

114
00:07:37,860 --> 00:07:43,200
going to be also taken over with a new

115
00:07:40,740 --> 00:07:45,330
team to make it progress the other one

116
00:07:43,200 --> 00:07:49,110
we have stuff on industrial networks and

117
00:07:45,330 --> 00:07:51,780
actually the problems of coin to to

118
00:07:49,110 --> 00:07:54,510
drafts on that and then the App Center

119
00:07:51,780 --> 00:07:57,090
from we have to do we have to Dirk's

120
00:07:54,510 --> 00:07:58,980
here so we have Dirk number one on what

121
00:07:57,090 --> 00:08:01,739
coin is and we have Dirk number two on

122
00:07:58,980 --> 00:08:04,800
the app centers and so this is going to

123
00:08:01,740 --> 00:08:06,720
continue and obviously collaborators are

124
00:08:04,800 --> 00:08:11,790
welcome and if you have other ideas for

125
00:08:06,720 --> 00:08:16,860
for drafts please supply them so we had

126
00:08:11,790 --> 00:08:18,750
our first hackathon on Saturday and this

127
00:08:16,860 --> 00:08:23,280
is the present of people who

128
00:08:18,750 --> 00:08:25,020
participated and we had I think our

129
00:08:23,280 --> 00:08:26,219
hackathon could have been some kind of a

130
00:08:25,020 --> 00:08:29,969
train wreck

131
00:08:26,220 --> 00:08:31,920
because p4 is this new language that

132
00:08:29,970 --> 00:08:33,960
allows you to program switches and

133
00:08:31,920 --> 00:08:36,539
there's not a lot of people who know how

134
00:08:33,960 --> 00:08:38,820
to do that and we were very very lucky

135
00:08:36,539 --> 00:08:42,120
that there is a local company called

136
00:08:38,820 --> 00:08:44,460
Novi flow who has its business of doing

137
00:08:42,120 --> 00:08:47,730
p4 and they lent us two engineers for

138
00:08:44,460 --> 00:08:49,830
two days so thank you so much and they

139
00:08:47,730 --> 00:08:51,900
actually got us going and so they're

140
00:08:49,830 --> 00:08:54,660
around the table with the team so it

141
00:08:51,900 --> 00:08:56,490
created a really really nice team we

142
00:08:54,660 --> 00:08:58,620
could also poach a few people from other

143
00:08:56,490 --> 00:09:02,730
tables so I ended up having quite a

144
00:08:58,620 --> 00:09:05,650
large number of people what we did

145
00:09:02,730 --> 00:09:08,770
obviously we there was a there had been

146
00:09:05,650 --> 00:09:10,439
before hackathons and before tutorials

147
00:09:08,770 --> 00:09:14,350
and other conferences so we can actually

148
00:09:10,440 --> 00:09:17,500
take basic examples to get everyone on

149
00:09:14,350 --> 00:09:19,390
board we had a remote participant who

150
00:09:17,500 --> 00:09:21,970
actually was the guy who knew how to

151
00:09:19,390 --> 00:09:26,350
program this so he had his own project

152
00:09:21,970 --> 00:09:30,120
on machine learning in in ipv6 and he

153
00:09:26,350 --> 00:09:33,280
made a lot of very good progress on this

154
00:09:30,120 --> 00:09:35,110
we had I don't know if he's here but we

155
00:09:33,280 --> 00:09:38,920
had somebody from liquid telecom which

156
00:09:35,110 --> 00:09:42,460
is from from Africa who recognized that

157
00:09:38,920 --> 00:09:44,260
he could actually do some translation of

158
00:09:42,460 --> 00:09:47,410
p42 golang which is the language that

159
00:09:44,260 --> 00:09:50,640
they use and on their networks at the

160
00:09:47,410 --> 00:09:53,500
end we after one day where everybody was

161
00:09:50,640 --> 00:09:56,530
actually kind of up to date and how to

162
00:09:53,500 --> 00:09:58,930
do things we had two participants who

163
00:09:56,530 --> 00:10:01,420
addressed a real problem that actually

164
00:09:58,930 --> 00:10:06,609
we're going to face boat in industrial

165
00:10:01,420 --> 00:10:08,829
networks and in this XR aar VR field

166
00:10:06,610 --> 00:10:13,600
which is actually packet filtering so

167
00:10:08,830 --> 00:10:15,220
compare a packet to a I called it a the

168
00:10:13,600 --> 00:10:16,990
original idea was to have a perfect

169
00:10:15,220 --> 00:10:19,120
packet and then compare all the other

170
00:10:16,990 --> 00:10:20,080
packets to it and make sure that we can

171
00:10:19,120 --> 00:10:22,030
detect when there's something

172
00:10:20,080 --> 00:10:24,070
interesting obviously we didn't do that

173
00:10:22,030 --> 00:10:26,199
we started by comparing addresses so

174
00:10:24,070 --> 00:10:28,690
we're storing one and comparing but just

175
00:10:26,200 --> 00:10:33,310
to tell you that after one day people

176
00:10:28,690 --> 00:10:39,820
were really really ready to do real work

177
00:10:33,310 --> 00:10:41,859
and we also made a list of ideas and I'm

178
00:10:39,820 --> 00:10:44,410
going to post that on the github I'm

179
00:10:41,860 --> 00:10:47,740
going to we have the pictures what we

180
00:10:44,410 --> 00:10:49,480
learned is that the need to come

181
00:10:47,740 --> 00:10:50,680
prepared is really good especially when

182
00:10:49,480 --> 00:10:55,240
you're going to do everything in virtual

183
00:10:50,680 --> 00:10:58,000
machines the the usefulness of experts

184
00:10:55,240 --> 00:10:59,800
in a field that's expanding I don't know

185
00:10:58,000 --> 00:11:01,840
how many hackathons are in the field

186
00:10:59,800 --> 00:11:03,790
where the language is not even fully

187
00:11:01,840 --> 00:11:05,530
defined right now so it was really good

188
00:11:03,790 --> 00:11:08,800
to have people in you what they were

189
00:11:05,530 --> 00:11:11,140
doing you can get participants the same

190
00:11:08,800 --> 00:11:12,939
day so that was great people were seeing

191
00:11:11,140 --> 00:11:14,389
what we were doing and they were joining

192
00:11:12,940 --> 00:11:17,720
the team

193
00:11:14,389 --> 00:11:19,369
you do a lot in two days which was

194
00:11:17,720 --> 00:11:22,069
surprising in the way and to the

195
00:11:19,369 --> 00:11:24,889
teamwork was great and we keep we have

196
00:11:22,069 --> 00:11:26,719
now a shorter mailing list of all the

197
00:11:24,889 --> 00:11:28,699
people who participated in the hackathon

198
00:11:26,720 --> 00:11:30,499
to continue the work that we started and

199
00:11:28,699 --> 00:11:32,979
we plan to have another one in Singapore

200
00:11:30,499 --> 00:11:35,569
so if you're interested you can join us

201
00:11:32,980 --> 00:11:38,480
so now we have a ton of presentations

202
00:11:35,569 --> 00:11:42,829
and we have instructions to the

203
00:11:38,480 --> 00:11:44,029
presenters and I see Dirk saying oh you

204
00:11:42,829 --> 00:11:46,399
didn't tell me this so this is a

205
00:11:44,029 --> 00:11:48,949
surprise so the instruction to the

206
00:11:46,399 --> 00:11:51,049
presenters is if you can please try to

207
00:11:48,949 --> 00:11:52,939
link your work and that's not going to

208
00:11:51,049 --> 00:11:55,189
be difficult for you there to the

209
00:11:52,939 --> 00:11:58,639
charter and highlight maybe where

210
00:11:55,189 --> 00:12:00,349
changes would be necessary and yes so

211
00:11:58,639 --> 00:12:03,819
you're in your next up and if I'm lucky

212
00:12:00,350 --> 00:12:03,819
I'm going to be able to load your slides

213
00:12:06,220 --> 00:12:28,189
thank you you don't have to call me on

214
00:12:09,949 --> 00:12:31,729
the one that's better okay thank you

215
00:12:28,189 --> 00:12:32,868
yeah so the intention of the draft that

216
00:12:31,730 --> 00:12:36,410
is mentioned here and its presentation

217
00:12:32,869 --> 00:12:40,009
is actually to provide input to your

218
00:12:36,410 --> 00:12:43,368
planning process and discussion to be

219
00:12:40,009 --> 00:12:45,470
honest I was a bit surprised to see such

220
00:12:43,369 --> 00:12:49,939
a I mean detailed list of mice on the

221
00:12:45,470 --> 00:12:52,249
it's good but no I mean in my experience

222
00:12:49,939 --> 00:12:56,389
a research group also takes some time to

223
00:12:52,249 --> 00:13:08,269
to find directions and I think oh it's

224
00:12:56,389 --> 00:13:10,790
too low and but I am so this this draft

225
00:13:08,269 --> 00:13:13,939
presentation is time to provide some

226
00:13:10,790 --> 00:13:17,329
input on say potentially interesting

227
00:13:13,939 --> 00:13:19,209
topics and also derive some research

228
00:13:17,329 --> 00:13:24,319
questions that could be of interest

229
00:13:19,209 --> 00:13:25,758
okay let's okay okay so I'll talk a bit

230
00:13:24,319 --> 00:13:28,310
about what what does it actually mean

231
00:13:25,759 --> 00:13:30,440
when we when we say in network

232
00:13:28,310 --> 00:13:34,550
computing there's a computing missing

233
00:13:30,440 --> 00:13:38,830
and then we discuss a few thoughts so or

234
00:13:34,550 --> 00:13:41,270
technical aspects and we end with some

235
00:13:38,830 --> 00:13:45,680
perspectives on what could be really

236
00:13:41,270 --> 00:13:48,260
interesting to do in coin and ok so I

237
00:13:45,680 --> 00:13:50,449
mean there's lots of computing in the

238
00:13:48,260 --> 00:13:54,230
network already today so we heard about

239
00:13:50,450 --> 00:13:57,980
smart necks on Monday web servers do

240
00:13:54,230 --> 00:13:59,000
computation CDN is kind of a computing

241
00:13:57,980 --> 00:14:02,390
system as well

242
00:13:59,000 --> 00:14:06,380
all these cloud platforms often you hear

243
00:14:02,390 --> 00:14:08,990
that edge computing and this is a really

244
00:14:06,380 --> 00:14:11,540
fuzzy term and what and typically

245
00:14:08,990 --> 00:14:14,480
actually means is extending well

246
00:14:11,540 --> 00:14:17,599
understood and widely successful cloud

247
00:14:14,480 --> 00:14:20,270
computing concepts to the edge so I

248
00:14:17,600 --> 00:14:23,410
would say there's potentially not that

249
00:14:20,270 --> 00:14:27,470
much research to be done there

250
00:14:23,410 --> 00:14:31,370
so yeah architectures like mobile edge

251
00:14:27,470 --> 00:14:35,420
computing so they sound look kind of you

252
00:14:31,370 --> 00:14:39,800
know intriguing or at least unusual but

253
00:14:35,420 --> 00:14:42,650
this is essentially just extending cloud

254
00:14:39,800 --> 00:14:45,670
computing virtualization technologies

255
00:14:42,650 --> 00:14:48,530
and management technologies to like

256
00:14:45,670 --> 00:14:51,140
execution platforms at the edge to

257
00:14:48,530 --> 00:14:54,410
something was like edge systems like

258
00:14:51,140 --> 00:14:57,980
radio base stations for example so it's

259
00:14:54,410 --> 00:15:00,709
nothing really new and and I don't think

260
00:14:57,980 --> 00:15:02,740
so virtualization and automated

261
00:15:00,710 --> 00:15:08,000
management for these kind of systems

262
00:15:02,740 --> 00:15:10,520
particularly interesting for us then

263
00:15:08,000 --> 00:15:14,260
there is this whole category of also

264
00:15:10,520 --> 00:15:17,000
widely successful application layer

265
00:15:14,260 --> 00:15:18,980
streaming event processing data

266
00:15:17,000 --> 00:15:22,730
analytics platforms

267
00:15:18,980 --> 00:15:25,280
so this is a key thing here so there

268
00:15:22,730 --> 00:15:31,130
also you used all over the place and all

269
00:15:25,280 --> 00:15:34,430
the popular was a powered by them so

270
00:15:31,130 --> 00:15:39,200
they run in the cloud they run in

271
00:15:34,430 --> 00:15:41,969
overlays in networks when network is

272
00:15:39,200 --> 00:15:46,950
relatively cheap over-provisioned

273
00:15:41,970 --> 00:15:50,190
and and well-managed so when you think

274
00:15:46,950 --> 00:15:51,930
about doing similar things say maybe in

275
00:15:50,190 --> 00:15:56,790
say less well controlled more more

276
00:15:51,930 --> 00:15:59,900
distributed say internet scenarios that

277
00:15:56,790 --> 00:16:04,770
there could be an interesting edge there

278
00:15:59,900 --> 00:16:06,329
so these over their systems I mean that

279
00:16:04,770 --> 00:16:08,550
they benefit from from all the internet

280
00:16:06,330 --> 00:16:12,060
tools that we have transfer protocols

281
00:16:08,550 --> 00:16:16,939
TLS and so on but they essentially treat

282
00:16:12,060 --> 00:16:19,650
the network as overlays and such have

283
00:16:16,940 --> 00:16:21,840
relatively limited visibility into the

284
00:16:19,650 --> 00:16:24,840
network so you could actually say they

285
00:16:21,840 --> 00:16:26,430
treat the network as circuits they use

286
00:16:24,840 --> 00:16:30,000
different namespaces have to translate

287
00:16:26,430 --> 00:16:32,310
between them so this works well in the

288
00:16:30,000 --> 00:16:35,640
cloud and data centers would be

289
00:16:32,310 --> 00:16:39,479
interesting to see what can the network

290
00:16:35,640 --> 00:16:43,500
do to support these systems say more

291
00:16:39,480 --> 00:16:45,800
than more directly and so earlier I

292
00:16:43,500 --> 00:16:51,060
think in previous talks we talked about

293
00:16:45,800 --> 00:16:53,089
this idea of doing that by jointly

294
00:16:51,060 --> 00:16:56,339
optimizing computing and networking

295
00:16:53,090 --> 00:17:00,300
resources so for example if you want to

296
00:16:56,340 --> 00:17:04,020
make a computer offloading decision you

297
00:17:00,300 --> 00:17:05,970
just do not allocate any available VM

298
00:17:04,020 --> 00:17:09,599
but maybe you do this based on knowledge

299
00:17:05,970 --> 00:17:12,180
about the topology congestion historic

300
00:17:09,599 --> 00:17:15,629
performance and so on and so you have a

301
00:17:12,180 --> 00:17:17,940
system that basically can do many

302
00:17:15,630 --> 00:17:22,770
decisions in network itself can maybe

303
00:17:17,940 --> 00:17:24,600
also leverage mechanisms they never

304
00:17:22,770 --> 00:17:29,129
actually already has so like routing

305
00:17:24,599 --> 00:17:31,290
protocols for example yeah let me just

306
00:17:29,130 --> 00:17:35,210
glanceable it a bit quicker because I

307
00:17:31,290 --> 00:17:39,629
said this so now when you try to

308
00:17:35,210 --> 00:17:41,940
implement this joint optimization for

309
00:17:39,630 --> 00:17:43,890
example or this integration of computing

310
00:17:41,940 --> 00:17:47,150
and networking they are different

311
00:17:43,890 --> 00:17:52,950
candidate technology you could look at

312
00:17:47,150 --> 00:17:55,919
so so this function chaining is one so

313
00:17:52,950 --> 00:17:58,470
we have a talking with one say two

314
00:17:55,919 --> 00:18:07,020
but so something is basically the idea

315
00:17:58,470 --> 00:18:08,970
that I arranged say pass from that

316
00:18:07,020 --> 00:18:11,129
touches several network elements in my

317
00:18:08,970 --> 00:18:13,080
system was the assumption that these

318
00:18:11,130 --> 00:18:16,070
elements can do something useful or need

319
00:18:13,080 --> 00:18:19,439
to see the the packets in the flow and

320
00:18:16,070 --> 00:18:23,899
so these are functions like classifiers

321
00:18:19,440 --> 00:18:26,010
filters caches and so on

322
00:18:23,899 --> 00:18:29,158
normally this is these systems are

323
00:18:26,010 --> 00:18:31,260
fairly statically configured so they

324
00:18:29,159 --> 00:18:33,360
don't change that often you can

325
00:18:31,260 --> 00:18:37,080
reconfigure them but it's not the idea

326
00:18:33,360 --> 00:18:37,529
to you know switch back next hops all

327
00:18:37,080 --> 00:18:40,918
the time

328
00:18:37,529 --> 00:18:43,260
and typically the assumption is that

329
00:18:40,919 --> 00:18:48,210
also we actually don't get in between

330
00:18:43,260 --> 00:18:50,520
the TCP end to end control loop it's

331
00:18:48,210 --> 00:18:55,020
more like on a packet level what you do

332
00:18:50,520 --> 00:18:58,500
there okay so this is intended for

333
00:18:55,020 --> 00:19:00,990
specific operator so called GI lon

334
00:18:58,500 --> 00:19:03,120
scenarios not exactly a platform for

335
00:19:00,990 --> 00:19:08,039
testability computing but I'm interested

336
00:19:03,120 --> 00:19:12,959
to see say what our colleagues have done

337
00:19:08,039 --> 00:19:17,129
in the next talk then you just thought

338
00:19:12,960 --> 00:19:19,799
about the p4 work at the agathon so

339
00:19:17,130 --> 00:19:22,679
there is this work on using programmable

340
00:19:19,799 --> 00:19:27,149
data plane to achieve in network

341
00:19:22,679 --> 00:19:30,210
computing so marco also has agency at

342
00:19:27,149 --> 00:19:32,129
earlier meetings well this is the idea

343
00:19:30,210 --> 00:19:35,610
that you can implement some application

344
00:19:32,130 --> 00:19:40,799
logic for example in slightly more

345
00:19:35,610 --> 00:19:43,649
powerful switches I would say that it's

346
00:19:40,799 --> 00:19:46,918
an interesting approach many interesting

347
00:19:43,649 --> 00:19:49,979
abilities but the systems that we have

348
00:19:46,919 --> 00:19:53,279
seen so far I think it's fair to say

349
00:19:49,980 --> 00:19:55,649
whether point solution that assumed well

350
00:19:53,279 --> 00:19:59,370
you can basically intercept the packets

351
00:19:55,649 --> 00:20:00,510
their work with the match action logic

352
00:19:59,370 --> 00:20:03,928
and

353
00:20:00,510 --> 00:20:06,510
back program the application semantics

354
00:20:03,929 --> 00:20:08,940
in languages like p4 this is a fairly

355
00:20:06,510 --> 00:20:11,270
limited environment and

356
00:20:08,940 --> 00:20:13,620
also has kind of strong assumptions or

357
00:20:11,270 --> 00:20:17,910
security I guess would be difficult to

358
00:20:13,620 --> 00:20:21,719
do transfer protocols so it I would say

359
00:20:17,910 --> 00:20:25,290
it's an interesting starting point but

360
00:20:21,720 --> 00:20:27,420
probably wouldn't really suffice as a

361
00:20:25,290 --> 00:20:32,220
general purpose platform for distributed

362
00:20:27,420 --> 00:20:34,860
computing so in this group here so we

363
00:20:32,220 --> 00:20:37,290
think we have like two directions that

364
00:20:34,860 --> 00:20:39,419
we have been discussing so far so coming

365
00:20:37,290 --> 00:20:41,190
down from these distributed computing

366
00:20:39,420 --> 00:20:43,410
systems in the application layer and

367
00:20:41,190 --> 00:20:46,010
trying to see how we can maybe integrate

368
00:20:43,410 --> 00:20:49,770
those things with the network and then

369
00:20:46,010 --> 00:20:51,810
say p4x approach for example maybe try

370
00:20:49,770 --> 00:20:56,910
to move up the stack and try to see what

371
00:20:51,810 --> 00:20:59,580
we can do for for applications so just

372
00:20:56,910 --> 00:21:02,760
to enough give us a handle to kind of

373
00:20:59,580 --> 00:21:04,439
talk about a few categories so here's

374
00:21:02,760 --> 00:21:07,650
one example that kind of comes from

375
00:21:04,440 --> 00:21:11,580
current work that we have been doing for

376
00:21:07,650 --> 00:21:16,410
enable computing in a group of say ICN

377
00:21:11,580 --> 00:21:19,169
folks so assume you have a kind of

378
00:21:16,410 --> 00:21:21,740
network of nodes that can generally

379
00:21:19,170 --> 00:21:24,740
offer compute services so this could run

380
00:21:21,740 --> 00:21:27,950
execution platforms or any kind of

381
00:21:24,740 --> 00:21:30,870
platform that could run some functions

382
00:21:27,950 --> 00:21:32,760
so we assumed that we would be like

383
00:21:30,870 --> 00:21:35,040
diagnostic to the specific environment

384
00:21:32,760 --> 00:21:38,629
we just be able to call some functions

385
00:21:35,040 --> 00:21:40,620
or two in each to create some state and

386
00:21:38,630 --> 00:21:43,500
of course you want to be able to

387
00:21:40,620 --> 00:21:46,679
leverage specific features so like a GPU

388
00:21:43,500 --> 00:21:49,620
here or a trusted execution environment

389
00:21:46,680 --> 00:21:53,370
there but in general we assume could be

390
00:21:49,620 --> 00:21:55,080
a heterogeneous system and so you'd be

391
00:21:53,370 --> 00:21:58,320
able to use whatever you need for your

392
00:21:55,080 --> 00:22:00,840
application and so in a dissipated

393
00:21:58,320 --> 00:22:04,500
application context there could be

394
00:22:00,840 --> 00:22:07,560
something like sessions or like an

395
00:22:04,500 --> 00:22:10,020
application in in progress that would

396
00:22:07,560 --> 00:22:15,120
then perhaps allocate a subset of these

397
00:22:10,020 --> 00:22:17,160
nodes and so this would be like part of

398
00:22:15,120 --> 00:22:20,699
one session and you would then use them

399
00:22:17,160 --> 00:22:22,110
then - yeah locate in sense yet

400
00:22:20,700 --> 00:22:27,330
functions

401
00:22:22,110 --> 00:22:29,969
but also a stateful so systems that

402
00:22:27,330 --> 00:22:33,840
could for example also yeah have side

403
00:22:29,970 --> 00:22:39,510
effects men keep stateful number time

404
00:22:33,840 --> 00:22:40,439
and so on so in a system like this the

405
00:22:39,510 --> 00:22:42,629
assumption is that would be like a

406
00:22:40,440 --> 00:22:44,610
disability system maybe that's

407
00:22:42,630 --> 00:22:48,330
programmed in a program has certain

408
00:22:44,610 --> 00:22:51,510
application requirements one stand Emily

409
00:22:48,330 --> 00:22:54,899
and the dynamic execution determines so

410
00:22:51,510 --> 00:22:56,190
what needs to be allocated executed what

411
00:22:54,900 --> 00:23:00,060
needs to be transmitted in terms of

412
00:22:56,190 --> 00:23:02,100
input parameters and results so there

413
00:23:00,060 --> 00:23:04,110
would be some kind of remote method

414
00:23:02,100 --> 00:23:06,870
invocation protocol for invoking

415
00:23:04,110 --> 00:23:10,770
functions or status functions or maybe

416
00:23:06,870 --> 00:23:13,350
state for actor member functions and so

417
00:23:10,770 --> 00:23:15,120
in this example here what these

418
00:23:13,350 --> 00:23:19,949
functions could be very very lightweight

419
00:23:15,120 --> 00:23:23,340
but also say two significant pieces of

420
00:23:19,950 --> 00:23:25,910
work and as I said so one function can

421
00:23:23,340 --> 00:23:29,790
trigger other function calls and so on

422
00:23:25,910 --> 00:23:32,250
so in that system it's useful to have

423
00:23:29,790 --> 00:23:35,430
information about so where those

424
00:23:32,250 --> 00:23:37,830
functions are so if for example if I

425
00:23:35,430 --> 00:23:40,920
have a stateful act or I want to

426
00:23:37,830 --> 00:23:43,470
continue talking to that one it's also

427
00:23:40,920 --> 00:23:45,540
useful to know so what is the resource

428
00:23:43,470 --> 00:23:48,000
utilization situation so how busy is

429
00:23:45,540 --> 00:23:50,639
this server for example or how well is

430
00:23:48,000 --> 00:23:53,910
it performing right now maybe it's

431
00:23:50,640 --> 00:23:55,470
actually formally not loaded but I just

432
00:23:53,910 --> 00:23:59,040
figure out it doesn't work so well for

433
00:23:55,470 --> 00:24:01,200
me and it's also good you know so where

434
00:23:59,040 --> 00:24:03,690
are still an allocated resources or

435
00:24:01,200 --> 00:24:09,120
notes that I could maybe integrate into

436
00:24:03,690 --> 00:24:12,780
the system at runtime okay so in this

437
00:24:09,120 --> 00:24:16,729
system we we we distribute this

438
00:24:12,780 --> 00:24:20,610
information by some distributed protocol

439
00:24:16,730 --> 00:24:23,280
you don't think about using Network

440
00:24:20,610 --> 00:24:26,149
mechanisms like the routing system to at

441
00:24:23,280 --> 00:24:28,860
least partially help you with that or to

442
00:24:26,150 --> 00:24:31,920
use information that you get from say

443
00:24:28,860 --> 00:24:34,350
transport protocol like protocols that

444
00:24:31,920 --> 00:24:35,860
are you okay this is perhaps has a

445
00:24:34,350 --> 00:24:39,490
longer latency right

446
00:24:35,860 --> 00:24:43,299
you have some congestion information in

447
00:24:39,490 --> 00:24:45,549
there protocols okay so that's just an

448
00:24:43,299 --> 00:24:47,200
example to just give you someone to type

449
00:24:45,549 --> 00:24:51,029
some mind shape we can can talk about

450
00:24:47,200 --> 00:24:53,409
some some mechanisms so when you do that

451
00:24:51,029 --> 00:24:56,169
first question we could ask okay what

452
00:24:53,409 --> 00:24:58,510
are these functions anyway so how how

453
00:24:56,169 --> 00:25:01,029
fine granular or heavy weight are these

454
00:24:58,510 --> 00:25:04,029
so are we talking about like shifting

455
00:25:01,029 --> 00:25:09,250
bits near a resistor or adding on

456
00:25:04,029 --> 00:25:11,649
multiplying potentially but more visit

457
00:25:09,250 --> 00:25:12,669
on the other side of the spectrum you

458
00:25:11,649 --> 00:25:15,158
know like some machine learning

459
00:25:12,669 --> 00:25:18,000
application find faces identify people

460
00:25:15,159 --> 00:25:22,059
call it police and get people arrested

461
00:25:18,000 --> 00:25:27,429
possibly so I think there's there's a

462
00:25:22,059 --> 00:25:31,090
long big space in between and well

463
00:25:27,429 --> 00:25:33,279
potentially I would we would say it

464
00:25:31,090 --> 00:25:37,120
could could be all of that put in so

465
00:25:33,279 --> 00:25:41,169
obviously not as far as this machine

466
00:25:37,120 --> 00:25:45,789
instruction there but you could say have

467
00:25:41,169 --> 00:25:49,360
really long time complex functions or

468
00:25:45,789 --> 00:25:51,760
services as well as stateless function

469
00:25:49,360 --> 00:25:53,428
that you know just you know process some

470
00:25:51,760 --> 00:25:57,100
data or does it better analytics and

471
00:25:53,429 --> 00:26:02,110
give you constant results on some input

472
00:25:57,100 --> 00:26:04,240
data so functions in that system would

473
00:26:02,110 --> 00:26:06,178
need data so where does it come from

474
00:26:04,240 --> 00:26:09,309
obviously there would be something like

475
00:26:06,179 --> 00:26:11,519
input parameters so an image to possess

476
00:26:09,309 --> 00:26:15,940
there would be some like an operational

477
00:26:11,519 --> 00:26:19,559
context so for stateful service they

478
00:26:15,940 --> 00:26:22,149
would also be something we think that so

479
00:26:19,559 --> 00:26:24,450
yeah background data that could be kept

480
00:26:22,149 --> 00:26:27,100
in a key value store or some database

481
00:26:24,450 --> 00:26:31,419
which could be modeled as a stateful

482
00:26:27,100 --> 00:26:34,269
actor for example and and you could

483
00:26:31,419 --> 00:26:36,519
think about how do you know specify or

484
00:26:34,269 --> 00:26:39,940
use those parameters how do you identify

485
00:26:36,519 --> 00:26:42,309
the contexts or systems or provisions

486
00:26:39,940 --> 00:26:45,970
like this must be made could be like in

487
00:26:42,309 --> 00:26:48,840
in the packet or in the message that you

488
00:26:45,970 --> 00:26:48,840
convey

489
00:26:50,520 --> 00:26:57,010
depends a bit on the protocol solution

490
00:26:52,720 --> 00:27:01,480
if you design and but also what's the

491
00:26:57,010 --> 00:27:03,400
what's a sensible data unit what this

492
00:27:01,480 --> 00:27:06,790
function but this functions to be you

493
00:27:03,400 --> 00:27:09,460
work on so packet processing so it's

494
00:27:06,790 --> 00:27:12,220
in-service training perhaps could be

495
00:27:09,460 --> 00:27:15,400
useful but may not be the the ultimate

496
00:27:12,220 --> 00:27:19,030
goal in the end so because there are

497
00:27:15,400 --> 00:27:21,670
solutions for that and think about doing

498
00:27:19,030 --> 00:27:23,770
something for disability applications we

499
00:27:21,670 --> 00:27:26,610
think it's more useful to talk about

500
00:27:23,770 --> 00:27:29,620
application data units and think about

501
00:27:26,610 --> 00:27:32,709
yeah some some transport a section that

502
00:27:29,620 --> 00:27:34,620
allows us to convey these ad use from

503
00:27:32,710 --> 00:27:38,410
one function to the other for example

504
00:27:34,620 --> 00:27:40,419
and yeah obviously in an internet

505
00:27:38,410 --> 00:27:42,610
context or in any context you have to

506
00:27:40,420 --> 00:27:45,190
think about security properties that

507
00:27:42,610 --> 00:27:49,320
means mouth indication hell access

508
00:27:45,190 --> 00:27:49,320
control so these kind of things

509
00:27:50,050 --> 00:27:57,340
yeah functions sometimes need to be able

510
00:27:55,210 --> 00:28:03,010
to do side effects to do something

511
00:27:57,340 --> 00:28:05,110
useful so this could be persistent side

512
00:28:03,010 --> 00:28:07,990
effects or updates to to to database

513
00:28:05,110 --> 00:28:11,139
states for example or could be more

514
00:28:07,990 --> 00:28:16,270
temporary integrity effects

515
00:28:11,140 --> 00:28:20,260
so there's also categories that we

516
00:28:16,270 --> 00:28:26,860
suggest you to look into deeper a little

517
00:28:20,260 --> 00:28:31,180
bit I'm not doing this then yes often so

518
00:28:26,860 --> 00:28:34,090
in our system designed the question so

519
00:28:31,180 --> 00:28:35,500
what our application semantics in terms

520
00:28:34,090 --> 00:28:38,709
of how to get actually get data

521
00:28:35,500 --> 00:28:43,060
so is it like like a pool abstraction or

522
00:28:38,710 --> 00:28:44,890
a push abstraction so pool would require

523
00:28:43,060 --> 00:28:48,129
something like a repress response for

524
00:28:44,890 --> 00:28:50,680
the color perhaps push is interesting if

525
00:28:48,130 --> 00:28:55,150
you want to do some say reactive

526
00:28:50,680 --> 00:28:57,340
programming so event triggers systems so

527
00:28:55,150 --> 00:28:59,830
we think that that is all fine that

528
00:28:57,340 --> 00:29:01,060
doesn't have to determine well say how

529
00:28:59,830 --> 00:29:04,149
the network protocol apply

530
00:29:01,060 --> 00:29:06,629
so we'd be able to want to be able to to

531
00:29:04,150 --> 00:29:09,430
met these different applications inventx

532
00:29:06,630 --> 00:29:11,050
onto a student web protocol but doesn't

533
00:29:09,430 --> 00:29:15,690
have to mean that the network itself for

534
00:29:11,050 --> 00:29:18,850
example is obvious within push or so

535
00:29:15,690 --> 00:29:20,190
then so it's easy to say that we want to

536
00:29:18,850 --> 00:29:22,389
have a general-purpose

537
00:29:20,190 --> 00:29:24,970
disability computing platform but I

538
00:29:22,390 --> 00:29:25,900
think for say meaningful applications

539
00:29:24,970 --> 00:29:29,170
you also really have to think about

540
00:29:25,900 --> 00:29:34,510
performance so distributed data

541
00:29:29,170 --> 00:29:37,750
analytics okay I'm almost done

542
00:29:34,510 --> 00:29:39,430
for distribute data analytics you could

543
00:29:37,750 --> 00:29:42,610
imagine having some some pipelines that

544
00:29:39,430 --> 00:29:45,250
you know feed the data into functions

545
00:29:42,610 --> 00:29:46,929
and so each function is depending on the

546
00:29:45,250 --> 00:29:49,870
input data that the other function

547
00:29:46,930 --> 00:29:52,810
generates so I mean this has to be well

548
00:29:49,870 --> 00:29:55,659
designed to to provide any useful

549
00:29:52,810 --> 00:29:57,370
performance and then things like how can

550
00:29:55,660 --> 00:30:03,700
I reuse data and the system things like

551
00:29:57,370 --> 00:30:06,550
caching and so on okay let me go over

552
00:30:03,700 --> 00:30:13,540
this a bit right now so we have more

553
00:30:06,550 --> 00:30:16,000
info on this in the draft so the coin so

554
00:30:13,540 --> 00:30:19,360
I mean first of all we are the internet

555
00:30:16,000 --> 00:30:21,160
research task force so I think in

556
00:30:19,360 --> 00:30:23,250
general we think in general it's healthy

557
00:30:21,160 --> 00:30:26,080
to think about open networking

558
00:30:23,250 --> 00:30:29,050
environments so let's not make too many

559
00:30:26,080 --> 00:30:31,449
assumptions on how shielded our systems

560
00:30:29,050 --> 00:30:32,110
on how trustworthy either the PS are and

561
00:30:31,450 --> 00:30:33,910
and so on

562
00:30:32,110 --> 00:30:37,840
so in general it's a hostile environment

563
00:30:33,910 --> 00:30:39,220
where you have to run function on and

564
00:30:37,840 --> 00:30:42,220
generally untrusted systems and we have

565
00:30:39,220 --> 00:30:46,750
to find way to establish trust for

566
00:30:42,220 --> 00:30:49,210
example so that your code runs correctly

567
00:30:46,750 --> 00:30:51,550
and and and so on so heterogeneous

568
00:30:49,210 --> 00:30:55,750
system things security from the

569
00:30:51,550 --> 00:30:59,409
beginning and so on so one idea that we

570
00:30:55,750 --> 00:31:01,510
had is it may seem attractive to you

571
00:30:59,410 --> 00:31:05,110
know categorize the work in different

572
00:31:01,510 --> 00:31:09,040
use cases or scenarios like industrial

573
00:31:05,110 --> 00:31:12,129
IOT but actually we think that it's

574
00:31:09,040 --> 00:31:13,870
actually not that useful because in this

575
00:31:12,130 --> 00:31:15,410
example here industrial energy they are

576
00:31:13,870 --> 00:31:18,260
I guess like

577
00:31:15,410 --> 00:31:20,960
with different economic classes of how

578
00:31:18,260 --> 00:31:22,790
network computing could be used so there

579
00:31:20,960 --> 00:31:25,700
is for example that could be done like a

580
00:31:22,790 --> 00:31:27,740
virtual PLC that runs somewhere that's

581
00:31:25,700 --> 00:31:29,570
just virtual machines not not that

582
00:31:27,740 --> 00:31:32,030
interesting but they could be also like

583
00:31:29,570 --> 00:31:35,300
this with the data processing or some

584
00:31:32,030 --> 00:31:37,030
like real-time control so we think it's

585
00:31:35,300 --> 00:31:39,830
more interesting to dually categorize

586
00:31:37,030 --> 00:31:41,240
these these functional properties and

587
00:31:39,830 --> 00:31:47,540
interaction types and these kind of

588
00:31:41,240 --> 00:31:50,930
things and yeah so our suggestion for

589
00:31:47,540 --> 00:31:52,340
say if you would did some like you know

590
00:31:50,930 --> 00:31:55,580
experimental protocol or something

591
00:31:52,340 --> 00:31:57,370
things to agree on we think would be in

592
00:31:55,580 --> 00:31:59,570
the model for women method invocation

593
00:31:57,370 --> 00:32:01,489
which types of functions are we talking

594
00:31:59,570 --> 00:32:04,040
about what is the programming model not

595
00:32:01,490 --> 00:32:05,990
so much the different bindings how do

596
00:32:04,040 --> 00:32:09,530
you ascribe resources and how you

597
00:32:05,990 --> 00:32:13,220
allocate resources what is maybe more

598
00:32:09,530 --> 00:32:16,629
specific to implementations is the

599
00:32:13,220 --> 00:32:18,740
different execution environments the

600
00:32:16,630 --> 00:32:20,990
languages or web sections for those

601
00:32:18,740 --> 00:32:24,230
platforms and a bunch of other things

602
00:32:20,990 --> 00:32:26,150
and there's a long list of other things

603
00:32:24,230 --> 00:32:36,860
that I'm talking about here thank you

604
00:32:26,150 --> 00:32:38,090
very much this is exactly the type of

605
00:32:36,860 --> 00:32:40,100
stuff that we would like to have

606
00:32:38,090 --> 00:32:45,800
discussed on the mailing list is very

607
00:32:40,100 --> 00:32:48,800
very and yeah lots of great questions

608
00:32:45,800 --> 00:32:52,520
lots of very good things that we already

609
00:32:48,800 --> 00:32:54,290
have a little bit thought about and yes

610
00:32:52,520 --> 00:32:56,690
we should move the discussion to the

611
00:32:54,290 --> 00:33:01,550
list okay thank you so very much

612
00:32:56,690 --> 00:33:04,360
next up is Adrian and I have to load

613
00:33:01,550 --> 00:33:04,360
your new versions

614
00:33:08,140 --> 00:33:10,170
I

615
00:33:18,930 --> 00:33:22,019
[Music]

616
00:35:05,540 --> 00:35:13,820
in other words okay hello everyone I'm

617
00:35:11,420 --> 00:35:16,460
Adam I'm a teacher student at the

618
00:35:13,820 --> 00:35:19,250
recompile tech and I will present you my

619
00:35:16,460 --> 00:35:20,690
work which relies on the service

620
00:35:19,250 --> 00:35:23,540
chaining and I will show you how you can

621
00:35:20,690 --> 00:35:28,780
rely on existing networking to agents to

622
00:35:23,540 --> 00:35:34,820
a builder in network function chain so

623
00:35:28,780 --> 00:35:39,100
in network in network computation enable

624
00:35:34,820 --> 00:35:41,720
you will have nodes which in addition to

625
00:35:39,100 --> 00:35:44,540
basic forwarding and holding a function

626
00:35:41,720 --> 00:35:46,730
would have also other functions or

627
00:35:44,540 --> 00:35:48,290
running on top of n which can be a

628
00:35:46,730 --> 00:35:51,890
milder middleboxes

629
00:35:48,290 --> 00:35:55,940
in sync running on the comedy's server

630
00:35:51,890 --> 00:35:58,580
or some application functions of ready

631
00:35:55,940 --> 00:36:01,610
to a later plane but in any case you

632
00:35:58,580 --> 00:36:04,279
will need to be to orchestrate your

633
00:36:01,610 --> 00:36:08,720
network to be sure but the set of

634
00:36:04,280 --> 00:36:10,130
functions are placed on on your

635
00:36:08,720 --> 00:36:11,720
networking make sure that were wide data

636
00:36:10,130 --> 00:36:16,130
flow goes through a wide set of

637
00:36:11,720 --> 00:36:19,759
functions to perform more complex

638
00:36:16,130 --> 00:36:23,030
functions so in the service functional

639
00:36:19,760 --> 00:36:25,160
training is achieved with some central

640
00:36:23,030 --> 00:36:28,850
control point color orchestrate is

641
00:36:25,160 --> 00:36:32,029
called an Orchestrator which has a some

642
00:36:28,850 --> 00:36:34,880
limitation since it builds a single

643
00:36:32,030 --> 00:36:36,710
point of failure in the networks as some

644
00:36:34,880 --> 00:36:43,210
scalability issue and it sadly in our

645
00:36:36,710 --> 00:36:45,650
world with legacy device however

646
00:36:43,210 --> 00:36:50,030
trainings such a function is mainly

647
00:36:45,650 --> 00:36:52,690
routine problems we need to show that a

648
00:36:50,030 --> 00:36:55,790
frou-frou set of wage point before

649
00:36:52,690 --> 00:36:58,490
reaching with the destinations and we

650
00:36:55,790 --> 00:37:01,120
and we believe that we should be at the

651
00:36:58,490 --> 00:37:03,979
network layer and we propose to augment

652
00:37:01,120 --> 00:37:08,720
classical internet for protocol to make

653
00:37:03,980 --> 00:37:10,520
it functional so instead of having some

654
00:37:08,720 --> 00:37:12,200
centralized control point which make you

655
00:37:10,520 --> 00:37:16,150
manage every flow in your networks and

656
00:37:12,200 --> 00:37:19,609
your functions we propose to instead of

657
00:37:16,150 --> 00:37:24,109
autonomous nodes which asked network

658
00:37:19,609 --> 00:37:28,460
functions and also have a distributed

659
00:37:24,109 --> 00:37:30,828
intelligence to traffic for a channel or

660
00:37:28,460 --> 00:37:34,040
functions and to choose two instances or

661
00:37:30,829 --> 00:37:37,730
they are till event so I will fulfill my

662
00:37:34,040 --> 00:37:40,400
no negative cultural works you have some

663
00:37:37,730 --> 00:37:42,950
gateways which are attached on which

664
00:37:40,400 --> 00:37:45,290
some networks are attached by a

665
00:37:42,950 --> 00:37:48,950
extension and some information and based

666
00:37:45,290 --> 00:37:52,069
on that they build a network view we've

667
00:37:48,950 --> 00:37:54,558
we've and we visit neutral shoe they are

668
00:37:52,069 --> 00:37:56,869
built routing tables what we propose is

669
00:37:54,559 --> 00:37:58,750
that we can bind specific products to

670
00:37:56,869 --> 00:38:05,089
each tag to each type of functions

671
00:37:58,750 --> 00:38:07,720
through to make sure that the Vinod's

672
00:38:05,089 --> 00:38:10,490
know where functions are allocated

673
00:38:07,720 --> 00:38:13,759
moreover if you use some any case a

674
00:38:10,490 --> 00:38:15,529
dressings you you are able to match not

675
00:38:13,760 --> 00:38:21,500
not only a prefix to say go functions

676
00:38:15,530 --> 00:38:25,880
but also to map to introduce a GP matrix

677
00:38:21,500 --> 00:38:29,809
to state function instance given that

678
00:38:25,880 --> 00:38:32,150
the flow has to go through so instead if

679
00:38:29,809 --> 00:38:35,990
you if you look at a Vista project you

680
00:38:32,150 --> 00:38:38,540
have two pink functions for running on

681
00:38:35,990 --> 00:38:43,399
trees in the front on two different

682
00:38:38,540 --> 00:38:45,859
nodes and if you look at the topological

683
00:38:43,400 --> 00:38:49,069
view of the IGP you have only one nodes

684
00:38:45,859 --> 00:38:51,020
and each instance of this specific

685
00:38:49,069 --> 00:38:53,210
function is represented by orange and

686
00:38:51,020 --> 00:38:56,450
attached to this links you can you can

687
00:38:53,210 --> 00:39:01,040
attach any metrics that show you you

688
00:38:56,450 --> 00:39:05,328
need to through the whites in San Cisco

689
00:39:01,040 --> 00:39:07,009
can be seen CPUs or memory use or time

690
00:39:05,329 --> 00:39:09,770
it's it's takes to process packets and

691
00:39:07,010 --> 00:39:14,420
based on that you you will be able to

692
00:39:09,770 --> 00:39:17,390
build the chain of functions for

693
00:39:14,420 --> 00:39:19,819
instance you if you you take these

694
00:39:17,390 --> 00:39:24,410
networks with some classical hotels

695
00:39:19,819 --> 00:39:25,490
running whichever for the wrong one and

696
00:39:24,410 --> 00:39:29,348
some

697
00:39:25,490 --> 00:39:31,970
some hotels which also functions this

698
00:39:29,349 --> 00:39:34,910
this mounted rotors which we comes

699
00:39:31,970 --> 00:39:37,819
anyway rotors will announce specific

700
00:39:34,910 --> 00:39:40,339
traffic's for any function fails for

701
00:39:37,819 --> 00:39:44,990
instance if you consider that your

702
00:39:40,339 --> 00:39:47,210
yellow functions is an IDs and pink one

703
00:39:44,990 --> 00:39:50,598
is a firewalls you will have extended

704
00:39:47,210 --> 00:39:54,500
view which is on white and based on that

705
00:39:50,599 --> 00:39:57,020
you will be able to hood first first

706
00:39:54,500 --> 00:39:58,579
flow which is for white which is the red

707
00:39:57,020 --> 00:40:02,230
one to make sure that he goes through

708
00:39:58,579 --> 00:40:05,540
the ideas and then the firewalls and if

709
00:40:02,230 --> 00:40:07,940
you you base your matrix for instance on

710
00:40:05,540 --> 00:40:11,509
the CPUs perceptive use of EITS freeways

711
00:40:07,940 --> 00:40:13,400
and if a second for wives it will be

712
00:40:11,510 --> 00:40:16,220
able to through the second second second

713
00:40:13,400 --> 00:40:18,040
instance making is some not balancing

714
00:40:16,220 --> 00:40:24,859
between the different function instance

715
00:40:18,040 --> 00:40:27,920
so we have built an architecture to for

716
00:40:24,859 --> 00:40:30,619
our organization nodes which we call an

717
00:40:27,920 --> 00:40:32,780
elevator so you have a control part

718
00:40:30,619 --> 00:40:36,559
which is distributing manual on the

719
00:40:32,780 --> 00:40:39,049
white and which receive a higher level

720
00:40:36,559 --> 00:40:41,569
policy such as the mapping of specific

721
00:40:39,049 --> 00:40:43,970
functions ribbon and gas prefix and

722
00:40:41,569 --> 00:40:46,609
which will constantly monitor both from

723
00:40:43,970 --> 00:40:50,359
the function is asked and based on bats

724
00:40:46,609 --> 00:40:55,098
will compute the matrices annals on a GP

725
00:40:50,359 --> 00:40:58,098
to to make behavior over Hooters aware

726
00:40:55,099 --> 00:41:05,240
but of the functions and what is its

727
00:40:58,099 --> 00:41:08,030
from user control a logical path will

728
00:41:05,240 --> 00:41:09,859
take when the floating an algorithm will

729
00:41:08,030 --> 00:41:12,799
take the or Monti view

730
00:41:09,859 --> 00:41:15,710
shadow on the on jgp use the bathroom

731
00:41:12,799 --> 00:41:18,710
stand the bathroom Station algorithm and

732
00:41:15,710 --> 00:41:23,510
build functions service table which will

733
00:41:18,710 --> 00:41:28,089
map the location of the other functions

734
00:41:23,510 --> 00:41:31,609
and push it through over connector which

735
00:41:28,089 --> 00:41:33,470
is a path which will link the IP

736
00:41:31,609 --> 00:41:35,509
networks and the anvil functions and

737
00:41:33,470 --> 00:41:41,060
based on the

738
00:41:35,510 --> 00:41:43,640
the no caps relations we which I what we

739
00:41:41,060 --> 00:41:46,640
have used which is an SH which have been

740
00:41:43,640 --> 00:41:50,480
normalized at yet yet you will be able

741
00:41:46,640 --> 00:41:52,160
to map the next function to through

742
00:41:50,480 --> 00:41:56,930
which we've got a bill okay occasions

743
00:41:52,160 --> 00:41:59,299
your packet as to earth so we make a

744
00:41:56,930 --> 00:42:03,549
simple implementation of these photos of

745
00:41:59,300 --> 00:42:09,050
the virtual network functions are simply

746
00:42:03,550 --> 00:42:12,290
functions in in network namespace we

747
00:42:09,050 --> 00:42:17,660
build our connector which before to make

748
00:42:12,290 --> 00:42:19,400
it became we didn't choose up an open

749
00:42:17,660 --> 00:42:23,230
the switch because it didn't have a

750
00:42:19,400 --> 00:42:27,470
stateful memory so we use people to to

751
00:42:23,230 --> 00:42:30,140
implement our connector to make sure

752
00:42:27,470 --> 00:42:32,240
that each flow will be processed by by

753
00:42:30,140 --> 00:42:34,940
the same by the same instance we make

754
00:42:32,240 --> 00:42:37,609
floating and not packet based routines

755
00:42:34,940 --> 00:42:40,970
and we use the an open source stack

756
00:42:37,610 --> 00:42:46,850
which is a routing as a for our water

757
00:42:40,970 --> 00:42:52,129
which want to west PF so we have make

758
00:42:46,850 --> 00:42:56,440
some made some I large-scale experiments

759
00:42:52,130 --> 00:43:00,340
with this implementation we package our

760
00:42:56,440 --> 00:43:00,340
anabolic state containers and we

761
00:43:00,520 --> 00:43:11,870
emulated 8787 not to topologies which is

762
00:43:07,630 --> 00:43:15,560
the top rod nicely infertility we make

763
00:43:11,870 --> 00:43:17,690
by working full project and on top on

764
00:43:15,560 --> 00:43:22,210
top of it approaches we deployed 10

765
00:43:17,690 --> 00:43:25,520
virtual and network functions and we ask

766
00:43:22,210 --> 00:43:29,060
and we configure on our network to make

767
00:43:25,520 --> 00:43:31,160
sure that those first function which is

768
00:43:29,060 --> 00:43:34,009
were a yellow one and the second which

769
00:43:31,160 --> 00:43:38,049
would be I think if there is a fiber

770
00:43:34,010 --> 00:43:42,950
instant instance of each of each type of

771
00:43:38,050 --> 00:43:44,630
network functions and routing proper

772
00:43:42,950 --> 00:43:48,080
receiver is the shortest path and each

773
00:43:44,630 --> 00:43:49,220
and the virus takes about a by uprooting

774
00:43:48,080 --> 00:43:54,049
the decision and what

775
00:43:49,220 --> 00:43:56,750
we show is that based on the link stated

776
00:43:54,050 --> 00:44:00,470
participant update frequency we are able

777
00:43:56,750 --> 00:44:04,330
to have a stable balancing on the

778
00:44:00,470 --> 00:44:09,919
different vnf instances running on our

779
00:44:04,330 --> 00:44:11,720
unavailable so what we indeed achieve is

780
00:44:09,920 --> 00:44:14,290
that we have a free distributed a

781
00:44:11,720 --> 00:44:17,348
framework to change in network functions

782
00:44:14,290 --> 00:44:24,560
which is not only interoperable with

783
00:44:17,349 --> 00:44:27,800
current voting system and which brings

784
00:44:24,560 --> 00:44:31,849
resilience in scalability since jgpz

785
00:44:27,800 --> 00:44:33,740
feel proven portable and we achieved

786
00:44:31,849 --> 00:44:34,880
through a balance the load among the

787
00:44:33,740 --> 00:44:38,240
validity from the edge from the network

788
00:44:34,880 --> 00:44:40,490
function instance and we don't have to

789
00:44:38,240 --> 00:44:42,618
add any configuration when we add a new

790
00:44:40,490 --> 00:44:47,959
virtual network function instance since

791
00:44:42,619 --> 00:44:51,050
when you another would have chose to to

792
00:44:47,960 --> 00:44:54,290
start a new instance you just have to

793
00:44:51,050 --> 00:44:59,359
announce the anycast prefix related to

794
00:44:54,290 --> 00:45:02,900
this event after that since it doesn't

795
00:44:59,359 --> 00:45:05,480
instance a kid to make routing system

796
00:45:02,900 --> 00:45:08,030
aware of the new host for simple

797
00:45:05,480 --> 00:45:10,849
networks and in future work we would

798
00:45:08,030 --> 00:45:14,000
like to see if we can extend our

799
00:45:10,849 --> 00:45:18,099
proposal to inter domain service project

800
00:45:14,000 --> 00:45:21,560
in provisioning using pi ability and to

801
00:45:18,099 --> 00:45:25,930
study the different metrics which could

802
00:45:21,560 --> 00:45:27,830
be used to take routing decision for for

803
00:45:25,930 --> 00:45:33,879
virtual service functions

804
00:45:27,830 --> 00:45:38,000
moreover or some some classical IDP

805
00:45:33,880 --> 00:45:39,500
madness and failure techniques code

806
00:45:38,000 --> 00:45:43,880
could be applied to our storage

807
00:45:39,500 --> 00:45:46,760
solutions and what the next step of our

808
00:45:43,880 --> 00:45:49,520
works will be to a check if based on the

809
00:45:46,760 --> 00:45:51,560
augments topology we build of another

810
00:45:49,520 --> 00:45:56,210
Hooters would be able to take autonomous

811
00:45:51,560 --> 00:45:59,299
decision to choose to start or stop and

812
00:45:56,210 --> 00:46:01,580
in instances in an instance based on a

813
00:45:59,300 --> 00:46:03,970
lot of the networks so if you have any

814
00:46:01,580 --> 00:46:03,970
question

815
00:46:07,790 --> 00:46:16,200
Just Answer okay so I was surprised to

816
00:46:13,650 --> 00:46:17,700
see us be atheist here mixing preach

817
00:46:16,200 --> 00:46:20,160
ability in policies in the world

818
00:46:17,700 --> 00:46:22,859
possibility in general the reasonably

819
00:46:20,160 --> 00:46:25,020
stable work called BGP furnace age

820
00:46:22,860 --> 00:46:28,260
that's progressing in best working group

821
00:46:25,020 --> 00:46:31,200
in ATF and it has BGP has built-in

822
00:46:28,260 --> 00:46:34,410
constructor router get important expert

823
00:46:31,200 --> 00:46:36,589
to impose policies so it would have been

824
00:46:34,410 --> 00:46:39,390
much easier to implement and

825
00:46:36,590 --> 00:46:41,130
inter-domain would work just as if

826
00:46:39,390 --> 00:46:48,810
there's maybe something to consider

827
00:46:41,130 --> 00:46:52,380
okay thanks doc Montgomery do you have

828
00:46:48,810 --> 00:46:55,799
the ability to choose your rel based

829
00:46:52,380 --> 00:46:59,280
upon the the overall complete service

830
00:46:55,800 --> 00:47:04,080
chain as opposed to my criminal series

831
00:46:59,280 --> 00:47:06,390
what we have done for now is to take a

832
00:47:04,080 --> 00:47:09,000
bio decision you're on English otters

833
00:47:06,390 --> 00:47:13,350
Babar golem nonetheless if you have the

834
00:47:09,000 --> 00:47:16,380
Augmented view you can use in my opinion

835
00:47:13,350 --> 00:47:19,560
any a path computation algorithm to take

836
00:47:16,380 --> 00:47:21,450
more complex decision if needed and you

837
00:47:19,560 --> 00:47:23,460
could also instead of make up by

838
00:47:21,450 --> 00:47:26,160
outputting makes forceful thing using

839
00:47:23,460 --> 00:47:30,020
for instance as a services to serve a

840
00:47:26,160 --> 00:47:30,020
six to do that

841
00:47:34,900 --> 00:47:38,250
this will be our last question

842
00:47:40,620 --> 00:47:45,009
developers would you mention this vnf

843
00:47:43,750 --> 00:47:48,040
prohibition maybe see in general

844
00:47:45,010 --> 00:47:50,110
castration I guess in the life cycle or

845
00:47:48,040 --> 00:47:53,529
no how do you control the life cycle one

846
00:47:50,110 --> 00:47:57,100
associated with the routing for now on

847
00:47:53,530 --> 00:47:59,380
we have weakened still new business or

848
00:47:57,100 --> 00:48:02,049
functions which have started and we do

849
00:47:59,380 --> 00:48:07,480
not deal with the life cycle static so

850
00:48:02,050 --> 00:48:10,810
you mentioned is about balancing is for

851
00:48:07,480 --> 00:48:13,600
after ignition yeah but if you start we

852
00:48:10,810 --> 00:48:14,920
have a in our first paper we have made

853
00:48:13,600 --> 00:48:18,160
some experiment for all balancing

854
00:48:14,920 --> 00:48:20,680
scenario where you have a instance true

855
00:48:18,160 --> 00:48:22,960
visceral natural function learned at

856
00:48:20,680 --> 00:48:26,919
first and we do choose to start off a

857
00:48:22,960 --> 00:48:29,890
third one to change the balance between

858
00:48:26,920 --> 00:48:34,900
this one little function instances so it

859
00:48:29,890 --> 00:48:39,279
is possible to to modify the traffic

860
00:48:34,900 --> 00:48:42,460
engineering doing doing that to make the

861
00:48:39,280 --> 00:48:47,980
decision to scale out introduces another

862
00:48:42,460 --> 00:48:53,890
question how this was propagated through

863
00:48:47,980 --> 00:48:59,530
the routing updates okay thanks

864
00:48:53,890 --> 00:48:59,529
[Applause]

865
00:49:34,680 --> 00:49:39,058
yeah yeah I guess yeah

866
00:49:49,120 --> 00:49:52,940
[Music]

867
00:50:09,869 --> 00:50:15,640
okay so hello my name is Ike I'm here to

868
00:50:13,869 --> 00:50:18,820
present our draft on the industrial use

869
00:50:15,640 --> 00:50:21,569
cases what you will sometimes see behind

870
00:50:18,820 --> 00:50:21,570
me okay

871
00:50:23,160 --> 00:50:27,940
so what you'll see here that's actually

872
00:50:26,320 --> 00:50:30,670
what we are working on right now with

873
00:50:27,940 --> 00:50:33,940
mechanical engineers in Adam

874
00:50:30,670 --> 00:50:35,530
so the industrial Internet of Things as

875
00:50:33,940 --> 00:50:37,869
you can see there are quite a lot of

876
00:50:35,530 --> 00:50:39,750
different robots working a lot of

877
00:50:37,869 --> 00:50:41,740
sensors measuring something and

878
00:50:39,750 --> 00:50:44,260
everything is now more and more

879
00:50:41,740 --> 00:50:46,500
connected and what the mechanical

880
00:50:44,260 --> 00:50:49,240
engineers tell us is that they want to

881
00:50:46,500 --> 00:50:51,940
essentially move all the data that they

882
00:50:49,240 --> 00:50:54,490
collect there in to etch or remote

883
00:50:51,940 --> 00:50:57,700
clouds and they will also want to

884
00:50:54,490 --> 00:51:02,348
control the different robots also from

885
00:50:57,700 --> 00:51:03,939
flaut and yeah essentially as a third

886
00:51:02,349 --> 00:51:07,590
aspect all the data that they moved to

887
00:51:03,940 --> 00:51:07,590
the cloud they want to use that and

888
00:51:08,070 --> 00:51:14,500
actually throw machine learning and data

889
00:51:11,349 --> 00:51:16,000
mining on it to later it's used to find

890
00:51:14,500 --> 00:51:19,060
out how they can improve the production

891
00:51:16,000 --> 00:51:20,680
environment and then feed that

892
00:51:19,060 --> 00:51:24,220
information back into the system to make

893
00:51:20,680 --> 00:51:27,759
it better and based on these three

894
00:51:24,220 --> 00:51:30,009
aspects that we've seen here we've then

895
00:51:27,760 --> 00:51:33,400
taking a look at how we can improve that

896
00:51:30,010 --> 00:51:36,070
with in network computing and you can

897
00:51:33,400 --> 00:51:39,580
see here the general abstraction from

898
00:51:36,070 --> 00:51:41,650
the previous figure namely that we have

899
00:51:39,580 --> 00:51:45,069
sensors that we have actuators on the on

900
00:51:41,650 --> 00:51:46,869
the left-hand side so one end of the of

901
00:51:45,070 --> 00:51:48,400
the communication there on the right

902
00:51:46,869 --> 00:51:50,290
side you see the edge clouds and the

903
00:51:48,400 --> 00:51:52,359
remote clouds which will then be of the

904
00:51:50,290 --> 00:51:54,880
other end of the communication and in

905
00:51:52,359 --> 00:51:57,430
the middle we have the the network and

906
00:51:54,880 --> 00:51:59,500
what we now propose is that we could

907
00:51:57,430 --> 00:52:03,098
place certain functions within the

908
00:51:59,500 --> 00:52:04,210
network - yeah complement their use

909
00:52:03,099 --> 00:52:08,380
cases that they want to achieve

910
00:52:04,210 --> 00:52:11,470
and they're Klaus isn't so close as

911
00:52:08,380 --> 00:52:13,750
presented in Prague and there we have

912
00:52:11,470 --> 00:52:15,770
proposed two of them already so network

913
00:52:13,750 --> 00:52:17,810
control and traffic filters and

914
00:52:15,770 --> 00:52:20,210
now also proposing data stream

915
00:52:17,810 --> 00:52:24,710
processing as well as dust really safe T

916
00:52:20,210 --> 00:52:26,540
aspects so as these two use cases were

917
00:52:24,710 --> 00:52:28,910
already presented in Prague I only go

918
00:52:26,540 --> 00:52:33,259
shortly over them so network control the

919
00:52:28,910 --> 00:52:36,220
general idea is that the different

920
00:52:33,260 --> 00:52:39,290
robots are now controlled from edge or

921
00:52:36,220 --> 00:52:41,600
from an edge or a remote cloud and they

922
00:52:39,290 --> 00:52:43,550
here the problem is that the latency

923
00:52:41,600 --> 00:52:46,220
that isn't used by the network is too

924
00:52:43,550 --> 00:52:48,680
high so that the control loop cannot

925
00:52:46,220 --> 00:52:51,009
really be working anymore and what we

926
00:52:48,680 --> 00:52:53,000
now want to do is we want to put

927
00:52:51,010 --> 00:52:55,220
simplified versions of the control

928
00:52:53,000 --> 00:52:58,250
algorithms already within the network so

929
00:52:55,220 --> 00:53:01,549
that there can be short answers maybe

930
00:52:58,250 --> 00:53:03,740
two to signify it to the actuators that

931
00:53:01,550 --> 00:53:06,560
everything is working okay and so that

932
00:53:03,740 --> 00:53:10,759
everything is still working on the other

933
00:53:06,560 --> 00:53:13,400
hand we have traffic filters so as more

934
00:53:10,760 --> 00:53:15,290
and more sensors data is there the

935
00:53:13,400 --> 00:53:17,300
amount of traffic that needs to be

936
00:53:15,290 --> 00:53:20,300
pushed into the cloud is getting larger

937
00:53:17,300 --> 00:53:22,400
and larger but a lot of sensors cannot

938
00:53:20,300 --> 00:53:25,430
really be configured well so there might

939
00:53:22,400 --> 00:53:27,950
be redundancy in them and so on that all

940
00:53:25,430 --> 00:53:30,049
the data might be necessary to push to

941
00:53:27,950 --> 00:53:32,000
the cloud and we won't simply want to

942
00:53:30,050 --> 00:53:34,640
filter out under set unnecessary data

943
00:53:32,000 --> 00:53:38,480
already then within Network to reduce

944
00:53:34,640 --> 00:53:41,420
the load on the network a third aspect

945
00:53:38,480 --> 00:53:43,670
then which is actually quite similar to

946
00:53:41,420 --> 00:53:45,980
traffic filtering and in product we

947
00:53:43,670 --> 00:53:50,330
presented them as one data stream

948
00:53:45,980 --> 00:53:52,220
pre-processing so the different sensor

949
00:53:50,330 --> 00:53:54,279
values that are pushed into into the

950
00:53:52,220 --> 00:53:57,919
cloud are oftentimes then simply

951
00:53:54,280 --> 00:53:59,990
combined to form new values and then the

952
00:53:57,920 --> 00:54:02,510
mechanical engineers want to only only

953
00:53:59,990 --> 00:54:04,339
want to store those combined values and

954
00:54:02,510 --> 00:54:06,310
if we now can achieve these this

955
00:54:04,340 --> 00:54:09,110
combination already within the network

956
00:54:06,310 --> 00:54:12,470
we wouldn't need to push all the data

957
00:54:09,110 --> 00:54:14,450
into the into the cloud but only the

958
00:54:12,470 --> 00:54:16,669
combined values so this would then again

959
00:54:14,450 --> 00:54:19,819
reduce the amount of data that needs to

960
00:54:16,670 --> 00:54:25,180
be pushed to the cloud and then as a

961
00:54:19,820 --> 00:54:27,800
fourth aspect we think about

962
00:54:25,180 --> 00:54:29,149
complementing the current safety

963
00:54:27,800 --> 00:54:30,120
measures that are there in the

964
00:54:29,150 --> 00:54:33,750
production

965
00:54:30,120 --> 00:54:36,299
so typically you have like laser

966
00:54:33,750 --> 00:54:38,940
barriers so that machines stop when

967
00:54:36,300 --> 00:54:41,730
someone goes through them but now the

968
00:54:38,940 --> 00:54:43,290
nowadays the production environment gets

969
00:54:41,730 --> 00:54:46,290
more and more dynamic so that even

970
00:54:43,290 --> 00:54:49,020
production or working stations move

971
00:54:46,290 --> 00:54:52,230
around in the in the in the production

972
00:54:49,020 --> 00:54:55,140
hall so that it's now not that easy to

973
00:54:52,230 --> 00:54:57,360
build hardware solutions for that and we

974
00:54:55,140 --> 00:55:00,900
now propose to complement that by

975
00:54:57,360 --> 00:55:03,360
utilizing data that is already being

976
00:55:00,900 --> 00:55:08,040
sent to the cloud for example a camera

977
00:55:03,360 --> 00:55:10,740
data and we could for example identify

978
00:55:08,040 --> 00:55:12,360
if to camp with one camera sees the

979
00:55:10,740 --> 00:55:14,069
robot moving in this direction and the

980
00:55:12,360 --> 00:55:15,780
other camera sees a robot moving and

981
00:55:14,070 --> 00:55:19,050
that a human moving in the other

982
00:55:15,780 --> 00:55:20,820
direction and maybe identify a collision

983
00:55:19,050 --> 00:55:26,220
course that then the robot could be

984
00:55:20,820 --> 00:55:29,010
signal that it should stop so in the

985
00:55:26,220 --> 00:55:30,569
draft we then proposed quite a lot of

986
00:55:29,010 --> 00:55:32,460
research questions for all the for

987
00:55:30,570 --> 00:55:35,160
different use cases and I've tried to

988
00:55:32,460 --> 00:55:37,080
condense them here into two categories

989
00:55:35,160 --> 00:55:38,670
the first one is the design and

990
00:55:37,080 --> 00:55:41,009
development of the network functions

991
00:55:38,670 --> 00:55:44,970
that we want to do so here the question

992
00:55:41,010 --> 00:55:46,680
is how we can account for the limited

993
00:55:44,970 --> 00:55:50,069
computational capabilities of the

994
00:55:46,680 --> 00:55:53,730
network devices so we cannot solve for

995
00:55:50,070 --> 00:55:55,830
example in the control scenario you

996
00:55:53,730 --> 00:56:01,530
typically have quite complex control

997
00:55:55,830 --> 00:56:03,810
loops and control algorithms and so it's

998
00:56:01,530 --> 00:56:06,120
the building these simplified versions

999
00:56:03,810 --> 00:56:09,240
of them might introduce some science

1000
00:56:06,120 --> 00:56:10,380
some sort of inaccuracy and we have to

1001
00:56:09,240 --> 00:56:14,910
account for that as well

1002
00:56:10,380 --> 00:56:17,340
and then is the second aspect so now we

1003
00:56:14,910 --> 00:56:20,149
can build them the different network

1004
00:56:17,340 --> 00:56:23,970
functions it might be a good idea to

1005
00:56:20,150 --> 00:56:25,800
find out how we can for example provide

1006
00:56:23,970 --> 00:56:28,950
basic building blocks for the functions

1007
00:56:25,800 --> 00:56:31,170
so that they can then be easier combined

1008
00:56:28,950 --> 00:56:34,980
or our new network cars can be built

1009
00:56:31,170 --> 00:56:37,380
easier the second big point is then the

1010
00:56:34,980 --> 00:56:39,510
operation and the deployment of the

1011
00:56:37,380 --> 00:56:41,820
network functions so now we have the

1012
00:56:39,510 --> 00:56:43,110
functions but how do we place them where

1013
00:56:41,820 --> 00:56:43,650
do we place them and how do we

1014
00:56:43,110 --> 00:56:45,690
coordinate

1015
00:56:43,650 --> 00:56:47,760
them so for example if we have two

1016
00:56:45,690 --> 00:56:50,310
functions in the network and we replace

1017
00:56:47,760 --> 00:56:53,850
the first one how does that affect the

1018
00:56:50,310 --> 00:56:57,000
second one for example and the second

1019
00:56:53,850 --> 00:57:00,569
aspect we done also see that the these

1020
00:56:57,000 --> 00:57:06,990
Network pressures will certainly affect

1021
00:57:00,570 --> 00:57:08,910
the the functions that are then from

1022
00:57:06,990 --> 00:57:12,299
computed at the applications in the end

1023
00:57:08,910 --> 00:57:15,569
and here we have to yeah consider how

1024
00:57:12,300 --> 00:57:17,460
this will then how we can define the

1025
00:57:15,570 --> 00:57:21,390
interaction between the in the network

1026
00:57:17,460 --> 00:57:24,720
parts and the applications so what is

1027
00:57:21,390 --> 00:57:30,299
then next for us we plan on updating

1028
00:57:24,720 --> 00:57:33,000
this in our use case draft and then we

1029
00:57:30,300 --> 00:57:34,820
especially want to do another draft or

1030
00:57:33,000 --> 00:57:37,140
we plan on doing another draft on

1031
00:57:34,820 --> 00:57:39,600
transport protocol issues so this was

1032
00:57:37,140 --> 00:57:42,500
done basically what I stated last on the

1033
00:57:39,600 --> 00:57:46,049
slide before so the interaction between

1034
00:57:42,500 --> 00:57:51,150
the end host and the network function in

1035
00:57:46,050 --> 00:57:55,890
the middle because if we simply come for

1036
00:57:51,150 --> 00:57:58,350
example combine the two to sensoric

1037
00:57:55,890 --> 00:58:02,730
values into a third one and then only

1038
00:57:58,350 --> 00:58:05,910
only one only one packets packet still

1039
00:58:02,730 --> 00:58:09,050
survives maybe this violates kind of D

1040
00:58:05,910 --> 00:58:12,480
and 2n principle and we want to yeah we

1041
00:58:09,050 --> 00:58:15,480
wanna elaborate on what we think might

1042
00:58:12,480 --> 00:58:18,240
be the problems here and we wanna yeah

1043
00:58:15,480 --> 00:58:20,430
find out what we can do about that or

1044
00:58:18,240 --> 00:58:23,040
what essential requirements for such a

1045
00:58:20,430 --> 00:58:27,210
protocol would be but I want to I want

1046
00:58:23,040 --> 00:58:29,840
to yeah say that we we don't plan on

1047
00:58:27,210 --> 00:58:32,640
designing protocol here we simply wanna

1048
00:58:29,840 --> 00:58:34,470
elaborate on the challenges that we have

1049
00:58:32,640 --> 00:58:37,109
there and if you're also interested in

1050
00:58:34,470 --> 00:58:41,129
that we are very looking forward to a

1051
00:58:37,110 --> 00:58:45,110
collaboration this is regard and yeah so

1052
00:58:41,130 --> 00:58:45,110
then contact mute thank you

1053
00:58:46,710 --> 00:58:55,869
are there any questions I actually have

1054
00:58:51,070 --> 00:58:59,680
one without my chair um actually I've

1055
00:58:55,869 --> 00:59:02,950
got in the Hat uh I I think there's a

1056
00:58:59,680 --> 00:59:06,129
lot of very good opportunities in what

1057
00:59:02,950 --> 00:59:09,970
you mentioned but I read the draft also

1058
00:59:06,130 --> 00:59:14,410
I think what is missing is making a

1059
00:59:09,970 --> 00:59:18,118
strong differentiation of what is

1060
00:59:14,410 --> 00:59:20,500
already existing in automated industrial

1061
00:59:18,119 --> 00:59:24,040
environments which as you know a pretty

1062
00:59:20,500 --> 00:59:26,349
advanced and what you're bringing with

1063
00:59:24,040 --> 00:59:30,009
this architecture and I don't think it's

1064
00:59:26,349 --> 00:59:31,300
clear in the in the draft and I don't

1065
00:59:30,010 --> 00:59:34,570
think it's clear in the presentation

1066
00:59:31,300 --> 00:59:36,730
either because if I look at this with a

1067
00:59:34,570 --> 00:59:38,710
very cynical hat on oh so you know they

1068
00:59:36,730 --> 00:59:42,250
already do that in highly automated

1069
00:59:38,710 --> 00:59:45,580
production but I actually know from

1070
00:59:42,250 --> 00:59:47,950
other stuff that there are new cases and

1071
00:59:45,580 --> 00:59:49,990
they are places in industrial

1072
00:59:47,950 --> 00:59:51,759
environments where this type of work

1073
00:59:49,990 --> 00:59:55,240
that your suggestion has a lot of work

1074
00:59:51,760 --> 00:59:58,390
of room so I would suggest that in the

1075
00:59:55,240 --> 01:00:01,839
next version of your draft that you

1076
00:59:58,390 --> 01:00:04,480
clearly identify what is the difference

1077
01:00:01,839 --> 01:00:07,359
between what your suggestion and what is

1078
01:00:04,480 --> 01:00:09,460
currently happening in automation yeah

1079
01:00:07,359 --> 01:00:13,930
thanks that's a nice suggestion we will

1080
01:00:09,460 --> 01:00:15,820
definitely think about that I have you

1081
01:00:13,930 --> 01:00:19,180
read reviewed existing transport

1082
01:00:15,820 --> 01:00:21,130
protocols is anything missing why do you

1083
01:00:19,180 --> 01:00:23,470
need additional drop but me thinking

1084
01:00:21,130 --> 01:00:25,599
current variety of transfer protocols

1085
01:00:23,470 --> 01:00:27,310
sorry I didn't get that from the

1086
01:00:25,599 --> 01:00:29,740
acoustics could you repeat it please

1087
01:00:27,310 --> 01:00:32,799
your next step if draft um Transfer

1088
01:00:29,740 --> 01:00:34,450
Protocol yeah do you need something new

1089
01:00:32,800 --> 01:00:37,560
is there anything you think in existing

1090
01:00:34,450 --> 01:00:40,689
transfer protocols so what I basically

1091
01:00:37,560 --> 01:00:43,540
meant with that is this violation of the

1092
01:00:40,690 --> 01:00:45,310
internet principles so typically so we

1093
01:00:43,540 --> 01:00:48,400
don't think that it will work with the

1094
01:00:45,310 --> 01:00:52,089
existing protocols or at least not out

1095
01:00:48,400 --> 01:00:53,950
of the box for so that we so the end

1096
01:00:52,089 --> 01:00:55,270
host somehow have to know that someone

1097
01:00:53,950 --> 01:00:57,460
in the middle is interfering with what

1098
01:00:55,270 --> 01:00:59,140
they are doing and this is actually what

1099
01:00:57,460 --> 01:00:59,650
I meant with with this draft on the

1100
01:00:59,140 --> 01:01:02,859
transfer

1101
01:00:59,650 --> 01:01:04,960
protocol sometimes like mqp like

1102
01:01:02,860 --> 01:01:08,320
protocols that's usually since kind of

1103
01:01:04,960 --> 01:01:10,000
environments sorry I'm QP so you know

1104
01:01:08,320 --> 01:01:13,990
there's a broker in between it's not in

1105
01:01:10,000 --> 01:01:16,770
current I didn't get that either okay

1106
01:01:13,990 --> 01:01:16,770
thank you okay

1107
01:01:46,089 --> 01:01:57,229
alright alright alright so it's okay no

1108
01:01:55,670 --> 01:01:59,660
hear me okay

1109
01:01:57,229 --> 01:02:01,669
so I'm Jen Jen Jen I'm an assistant

1110
01:01:59,660 --> 01:02:03,920
professor University of Chicago this is

1111
01:02:01,670 --> 01:02:05,989
actually the first time I'm in a RTF and

1112
01:02:03,920 --> 01:02:07,849
it's very happy to be here to share my

1113
01:02:05,989 --> 01:02:09,890
research and hopefully at the end I get

1114
01:02:07,849 --> 01:02:14,630
to connect my research to the agenda of

1115
01:02:09,890 --> 01:02:17,868
coin artery so if I mean unless you live

1116
01:02:14,630 --> 01:02:19,910
in like another Rock you know that video

1117
01:02:17,869 --> 01:02:22,900
analytics is everywhere right from

1118
01:02:19,910 --> 01:02:26,598
public transportation to public safety

1119
01:02:22,900 --> 01:02:28,670
everything and but the real research

1120
01:02:26,599 --> 01:02:31,009
challenge in terms of networking and

1121
01:02:28,670 --> 01:02:33,559
systems is how do you network system to

1122
01:02:31,009 --> 01:02:37,400
support the video analytics as such

1123
01:02:33,559 --> 01:02:51,259
massive scale and let's first look at

1124
01:02:37,400 --> 01:02:52,819
some trend here all right so first of

1125
01:02:51,259 --> 01:02:55,729
all did there are two trends in video

1126
01:02:52,819 --> 01:02:57,140
analytics one and these neural network

1127
01:02:55,729 --> 01:02:59,538
models are getting more and more

1128
01:02:57,140 --> 01:03:02,269
accurate at the cost of more and more

1129
01:02:59,539 --> 01:03:03,499
computing resource okay so it's getting

1130
01:03:02,269 --> 01:03:05,569
more and more expensive to run these

1131
01:03:03,499 --> 01:03:08,569
models and second there's just a lot

1132
01:03:05,569 --> 01:03:11,829
more cameras so these two trends are

1133
01:03:08,569 --> 01:03:15,140
kind of firm as have led to this

1134
01:03:11,829 --> 01:03:17,390
dramatic growth of the cost in video

1135
01:03:15,140 --> 01:03:19,848
analytics okay now just to put that into

1136
01:03:17,390 --> 01:03:21,618
perspective this is not just about

1137
01:03:19,849 --> 01:03:22,819
compute storage it's also about

1138
01:03:21,619 --> 01:03:25,069
networking okay

1139
01:03:22,819 --> 01:03:27,979
now to put that into perspective think

1140
01:03:25,069 --> 01:03:30,349
about video streaming internet streaming

1141
01:03:27,979 --> 01:03:32,419
videos like Netflix or YouTube right

1142
01:03:30,349 --> 01:03:34,549
these are the kind of application that

1143
01:03:32,420 --> 01:03:38,260
can't account for 80% of the internet

1144
01:03:34,549 --> 01:03:41,240
traffic to consumers now

1145
01:03:38,260 --> 01:03:43,340
imagine all the network systems these

1146
01:03:41,240 --> 01:03:45,049
days like CDNs or cloud they are all

1147
01:03:43,340 --> 01:03:48,050
built around these traditional

1148
01:03:45,050 --> 01:03:49,760
applications now the fact is these I

1149
01:03:48,050 --> 01:03:51,830
mean at least surveillance cameras

1150
01:03:49,760 --> 01:03:53,900
videos have already exceed the traffic

1151
01:03:51,830 --> 01:03:56,810
of Internet video in that streaming

1152
01:03:53,900 --> 01:03:59,060
video and the fact that these cameras I

1153
01:03:56,810 --> 01:04:00,799
mean analyzing one camera feed is way

1154
01:03:59,060 --> 01:04:05,390
more expensive than just streaming one

1155
01:04:00,800 --> 01:04:08,390
ok so that means there is the current

1156
01:04:05,390 --> 01:04:12,710
net in the today's internet systems is

1157
01:04:08,390 --> 01:04:14,240
way less than was needed to analyze all

1158
01:04:12,710 --> 01:04:16,250
these video feeds ok

1159
01:04:14,240 --> 01:04:18,109
so clearly there's something needed to

1160
01:04:16,250 --> 01:04:21,650
increase the accuracy of these analytics

1161
01:04:18,110 --> 01:04:23,990
with low cost and do so in a way that

1162
01:04:21,650 --> 01:04:27,890
can scale to the sheer number of cameras

1163
01:04:23,990 --> 01:04:29,540
and video feeds ok now just to give you

1164
01:04:27,890 --> 01:04:31,910
a sense of what video analytics systems

1165
01:04:29,540 --> 01:04:36,529
not like you have a camera capturing

1166
01:04:31,910 --> 01:04:38,990
video and the video can be analyzed

1167
01:04:36,530 --> 01:04:39,830
locally or can be sent to the server for

1168
01:04:38,990 --> 01:04:42,259
analytics

1169
01:04:39,830 --> 01:04:44,870
ok so naturally you can imagine there's

1170
01:04:42,260 --> 01:04:47,420
that kind of edge to cloud continuous a

1171
01:04:44,870 --> 01:04:51,290
continuum where the high resolution

1172
01:04:47,420 --> 01:04:53,720
videos will be analyzed locally ok and

1173
01:04:51,290 --> 01:04:55,580
then only the part of the video that

1174
01:04:53,720 --> 01:04:57,740
needs further investigation will be sent

1175
01:04:55,580 --> 01:05:01,009
upstream to some more complex model

1176
01:04:57,740 --> 01:05:03,439
typically running on a cluster ok and

1177
01:05:01,010 --> 01:05:05,150
then it would do some future further

1178
01:05:03,440 --> 01:05:07,070
futuring and the remaining video would

1179
01:05:05,150 --> 01:05:09,590
be only the remaining video will be sent

1180
01:05:07,070 --> 01:05:12,890
back upstream to a very complex model in

1181
01:05:09,590 --> 01:05:14,720
the cloud ok so now so far all I have to

1182
01:05:12,890 --> 01:05:16,279
talk about is very similar to everything

1183
01:05:14,720 --> 01:05:18,560
you you have singing edge computing

1184
01:05:16,280 --> 01:05:22,010
right but there are actually two unique

1185
01:05:18,560 --> 01:05:24,500
properties of video analytics the first

1186
01:05:22,010 --> 01:05:27,440
property is that the video pipelines

1187
01:05:24,500 --> 01:05:29,870
must be very adaptive to the real-time

1188
01:05:27,440 --> 01:05:32,240
video content now you know just what

1189
01:05:29,870 --> 01:05:34,970
that means is when the video content

1190
01:05:32,240 --> 01:05:37,069
changed over time right the resource

1191
01:05:34,970 --> 01:05:39,470
demand for this video analysis pipelines

1192
01:05:37,070 --> 01:05:41,480
which will vary dramatically over time

1193
01:05:39,470 --> 01:05:45,980
as well that makes resource provisioning

1194
01:05:41,480 --> 01:05:47,930
very challenging ok so let's just recap

1195
01:05:45,980 --> 01:05:51,280
the challenge of video analytics is to

1196
01:05:47,930 --> 01:05:53,529
balance accuracy and cost ok so

1197
01:05:51,280 --> 01:05:55,630
trial work on me all work these days

1198
01:05:53,530 --> 01:05:57,400
have been trying to do is to and I'll

1199
01:05:55,630 --> 01:05:59,860
customize the video pipeline to the

1200
01:05:57,400 --> 01:06:02,710
video content so why why this is

1201
01:05:59,860 --> 01:06:04,510
possible well imagine this is one of the

1202
01:06:02,710 --> 01:06:06,790
like very typical video analysis

1203
01:06:04,510 --> 01:06:09,520
pipelines out there right and there are

1204
01:06:06,790 --> 01:06:12,640
not a lot of knobs control configuration

1205
01:06:09,520 --> 01:06:14,650
knobs that you can tune so the video in

1206
01:06:12,640 --> 01:06:16,900
the frames of a video gets fed into this

1207
01:06:14,650 --> 01:06:19,030
module in am you know that resizes the

1208
01:06:16,900 --> 01:06:21,760
video and then select which frames to

1209
01:06:19,030 --> 01:06:24,670
sample and then it will get in fed into

1210
01:06:21,760 --> 01:06:26,920
this neural network object detection

1211
01:06:24,670 --> 01:06:28,450
software okay so you can see there bunch

1212
01:06:26,920 --> 01:06:31,090
of knobs you can choose right so you can

1213
01:06:28,450 --> 01:06:33,399
change the resolution the framerate and

1214
01:06:31,090 --> 01:06:37,870
even which neural network object data

1215
01:06:33,400 --> 01:06:39,580
model to use okay so so people have been

1216
01:06:37,870 --> 01:06:42,339
trying to exploiting this color for

1217
01:06:39,580 --> 01:06:45,549
these knobs to customize the pipeline to

1218
01:06:42,340 --> 01:06:47,290
the video content now I was just

1219
01:06:45,550 --> 01:06:49,510
informed that this this video is not

1220
01:06:47,290 --> 01:06:50,980
gonna play so I'm gonna just ask you to

1221
01:06:49,510 --> 01:06:54,160
imagine what's gonna happen here so

1222
01:06:50,980 --> 01:06:56,620
let's say this is actually two same

1223
01:06:54,160 --> 01:06:58,720
video on the left hand side you see

1224
01:06:56,620 --> 01:07:01,240
these bounding boxes these are boxes

1225
01:06:58,720 --> 01:07:04,359
detected cars detected by the neural

1226
01:07:01,240 --> 01:07:06,240
network and if I play the video you will

1227
01:07:04,360 --> 01:07:08,500
see these cars gonna be staying staying

1228
01:07:06,240 --> 01:07:12,580
staying put I mean they are stopping

1229
01:07:08,500 --> 01:07:14,380
there and so if you use low framerate on

1230
01:07:12,580 --> 01:07:16,330
the Left versus high frame rate on the

1231
01:07:14,380 --> 01:07:18,400
right their accuracy will be pretty

1232
01:07:16,330 --> 01:07:21,069
similar okay so when the objects are

1233
01:07:18,400 --> 01:07:23,230
pretty static low framerate operation

1234
01:07:21,070 --> 01:07:28,900
would be in it will be enough it's not

1235
01:07:23,230 --> 01:07:31,810
much going on but if you if I were to

1236
01:07:28,900 --> 01:07:34,300
click the play button again right you

1237
01:07:31,810 --> 01:07:37,480
will see there are cars moving into the

1238
01:07:34,300 --> 01:07:39,730
picture and running in high speed and if

1239
01:07:37,480 --> 01:07:42,850
you if you have objects moving at high

1240
01:07:39,730 --> 01:07:45,550
speed the low framerate will give very

1241
01:07:42,850 --> 01:07:48,790
low accuracy because they were not it

1242
01:07:45,550 --> 01:07:51,430
will lose track of these objects okay so

1243
01:07:48,790 --> 01:07:53,529
what it means is I mean that gives us or

1244
01:07:51,430 --> 01:07:56,140
a key insight that is the video

1245
01:07:53,530 --> 01:07:58,780
analytics pipeline must be customized to

1246
01:07:56,140 --> 01:08:01,270
the video content the real-time video

1247
01:07:58,780 --> 01:08:03,970
content so basic as the video content

1248
01:08:01,270 --> 01:08:04,990
varies over time like for example speed

1249
01:08:03,970 --> 01:08:07,060
changes

1250
01:08:04,990 --> 01:08:08,950
the best configuration will vary over

1251
01:08:07,060 --> 01:08:10,960
time as well now this is not just about

1252
01:08:08,950 --> 01:08:13,810
framerate I just used I'm just using

1253
01:08:10,960 --> 01:08:16,000
framerate as one example resolution and

1254
01:08:13,810 --> 01:08:18,910
the underlying neural network Lassa fire

1255
01:08:16,000 --> 01:08:22,560
should also be changed depending on how

1256
01:08:18,910 --> 01:08:25,540
and how frequent the content changes now

1257
01:08:22,560 --> 01:08:27,609
all prior work has been doing is like

1258
01:08:25,540 --> 01:08:29,950
one like so-called one-time profiling

1259
01:08:27,609 --> 01:08:31,900
they profile the video at up front and

1260
01:08:29,950 --> 01:08:33,910
then stick to the configuration they

1261
01:08:31,899 --> 01:08:37,149
think is the best through the remaining

1262
01:08:33,910 --> 01:08:40,568
of the video what we're proposing in

1263
01:08:37,149 --> 01:08:42,608
this recent work is try to try to to

1264
01:08:40,569 --> 01:08:44,529
argue that instead of just using one

1265
01:08:42,609 --> 01:08:47,380
configuration that seems to be good we

1266
01:08:44,529 --> 01:08:51,130
should adapt the video pipeline ok over

1267
01:08:47,380 --> 01:08:53,980
time to the dynamic video content ok so

1268
01:08:51,130 --> 01:08:58,359
this is the new idea we we studied this

1269
01:08:53,979 --> 01:09:00,639
idea in in a recent paper so what is

1270
01:08:58,359 --> 01:09:02,830
main architectural eh okay so what it

1271
01:09:00,640 --> 01:09:05,259
may is you're gonna have this controller

1272
01:09:02,830 --> 01:09:08,080
in the middle that's basically sitting

1273
01:09:05,259 --> 01:09:11,319
in this continuous loop right it will

1274
01:09:08,080 --> 01:09:13,359
periodically update periodically prefer

1275
01:09:11,319 --> 01:09:15,640
a profile the video and update the

1276
01:09:13,359 --> 01:09:17,469
control knobs you use like what frame

1277
01:09:15,640 --> 01:09:20,219
rate or what model you should use okay

1278
01:09:17,469 --> 01:09:23,380
and you're gonna run this continuously

1279
01:09:20,219 --> 01:09:26,500
so I'm gonna skip a lot of details here

1280
01:09:23,380 --> 01:09:29,950
but the the option is you can kind of

1281
01:09:26,500 --> 01:09:31,930
achieve a lot of resource saving or a

1282
01:09:29,950 --> 01:09:35,259
lot of accuracy improvement right so

1283
01:09:31,930 --> 01:09:38,469
this is like one traffic video data set

1284
01:09:35,259 --> 01:09:41,979
and you can see on this the blue ones

1285
01:09:38,469 --> 01:09:43,750
are profiling just once upfront okay you

1286
01:09:41,979 --> 01:09:46,120
don't change the configuration and red

1287
01:09:43,750 --> 01:09:48,100
ones is the proposed method you're

1288
01:09:46,120 --> 01:09:50,799
continuously reprofiling and updating

1289
01:09:48,100 --> 01:09:52,480
the configuration and it may just be

1290
01:09:50,799 --> 01:09:55,269
able to claim this right like higher

1291
01:09:52,479 --> 01:09:56,980
accuracy at the same cost or you can

1292
01:09:55,270 --> 01:09:59,710
achieve the same cost at a very small

1293
01:09:56,980 --> 01:10:02,110
fraction of the other scene accuracy it

1294
01:09:59,710 --> 01:10:06,100
is at a very small fraction of the

1295
01:10:02,110 --> 01:10:09,809
computing cost okay now this is just

1296
01:10:06,100 --> 01:10:13,030
research but what what it tells us is

1297
01:10:09,810 --> 01:10:14,860
even this is good news this actually

1298
01:10:13,030 --> 01:10:16,809
make the resource allocation very

1299
01:10:14,860 --> 01:10:18,339
challenging right because now whenever

1300
01:10:16,810 --> 01:10:19,719
the content changes you have

1301
01:10:18,340 --> 01:10:22,869
to change your resource allocation and

1302
01:10:19,719 --> 01:10:24,820
this is actually the plot of the

1303
01:10:22,869 --> 01:10:27,610
resource demand of the system over time

1304
01:10:24,820 --> 01:10:31,960
okay and you can see the resource

1305
01:10:27,610 --> 01:10:34,750
consumption kind of changes by 5 to 20 X

1306
01:10:31,960 --> 01:10:36,909
even just in a few seconds just because

1307
01:10:34,750 --> 01:10:39,280
the content changes rapidly right and

1308
01:10:36,909 --> 01:10:40,839
this basically raises the challenge how

1309
01:10:39,280 --> 01:10:43,540
do you actually do resource allocation

1310
01:10:40,840 --> 01:10:46,330
in our computing right to cope with this

1311
01:10:43,540 --> 01:10:48,670
kind of a spiky workload okay so that's

1312
01:10:46,330 --> 01:10:52,510
one takeaway from the first part of

1313
01:10:48,670 --> 01:10:55,090
research now for the remaining couple

1314
01:10:52,510 --> 01:10:57,340
minutes that would be just briefly talk

1315
01:10:55,090 --> 01:10:58,989
about the second unique challenge unique

1316
01:10:57,340 --> 01:11:02,139
property of video analytics

1317
01:10:58,989 --> 01:11:05,678
oh yes exactly

1318
01:11:02,139 --> 01:11:07,780
ok so what that means is ok so let's

1319
01:11:05,679 --> 01:11:10,300
imagine again you have a network

1320
01:11:07,780 --> 01:11:12,159
connecting a camera and a cloud and the

1321
01:11:10,300 --> 01:11:14,679
camera doesn't have local resource to

1322
01:11:12,159 --> 01:11:16,150
process the video typically right so the

1323
01:11:14,679 --> 01:11:16,510
video has to be streamed out to the

1324
01:11:16,150 --> 01:11:19,449
server

1325
01:11:16,510 --> 01:11:21,460
now what what traditionally what people

1326
01:11:19,449 --> 01:11:23,500
do is they can look at the video and

1327
01:11:21,460 --> 01:11:25,119
just compress it to some quality level

1328
01:11:23,500 --> 01:11:28,300
and then send the video back to the

1329
01:11:25,119 --> 01:11:30,580
server this has two problems either you

1330
01:11:28,300 --> 01:11:33,250
set your encoded video into low quality

1331
01:11:30,580 --> 01:11:37,119
it loose accuracy you can't see anything

1332
01:11:33,250 --> 01:11:39,040
it or you're sending high quality it's

1333
01:11:37,119 --> 01:11:41,049
good to for accuracy but you may not

1334
01:11:39,040 --> 01:11:43,030
have enough bandwidth to send it right

1335
01:11:41,050 --> 01:11:46,780
now the fundamental reason for this

1336
01:11:43,030 --> 01:11:48,219
actually is because this product I mean

1337
01:11:46,780 --> 01:11:51,670
the traditional video streaming protocol

1338
01:11:48,219 --> 01:11:52,840
makes sense to not to use the feedback

1339
01:11:51,670 --> 01:11:55,750
from the user

1340
01:11:52,840 --> 01:11:58,060
because for traditional video the users

1341
01:11:55,750 --> 01:12:00,010
are actually human being right you can

1342
01:11:58,060 --> 01:12:02,980
ask them to give you experience feedback

1343
01:12:00,010 --> 01:12:04,989
but in video analytics actually you can

1344
01:12:02,980 --> 01:12:07,030
because the consumer the user here

1345
01:12:04,989 --> 01:12:09,040
actually logic they send an algorithm

1346
01:12:07,030 --> 01:12:11,019
right it can actually pull some feedback

1347
01:12:09,040 --> 01:12:14,610
from it and this is what we do I mean

1348
01:12:11,020 --> 01:12:18,070
this is what we're trying to do and this

1349
01:12:14,610 --> 01:12:20,080
animation messed up but what's basically

1350
01:12:18,070 --> 01:12:22,480
happening here is you can kind of just

1351
01:12:20,080 --> 01:12:23,949
send a very low quality threat version

1352
01:12:22,480 --> 01:12:26,468
of the video to the server and the

1353
01:12:23,949 --> 01:12:29,888
server will run some analytics to give

1354
01:12:26,469 --> 01:12:32,019
hint to recline what it actually needs

1355
01:12:29,889 --> 01:12:34,239
right real-time paint

1356
01:12:32,019 --> 01:12:38,289
so that's another one but that's kind of

1357
01:12:34,239 --> 01:12:40,989
a new way to do this video streaming for

1358
01:12:38,289 --> 01:12:42,639
video analytics okay and this can

1359
01:12:40,989 --> 01:12:44,699
actually save a lot of bandwidth but

1360
01:12:42,639 --> 01:12:48,909
still achieve the same high accuracy

1361
01:12:44,699 --> 01:12:51,610
okay so the takeaway from this talk just

1362
01:12:48,909 --> 01:12:54,159
to take away from this talk one is that

1363
01:12:51,610 --> 01:12:56,348
the pipeline the video pipeline must be

1364
01:12:54,159 --> 01:12:57,070
adaptive to the real-time video content

1365
01:12:56,349 --> 01:12:59,949
okay

1366
01:12:57,070 --> 01:13:02,170
and that means whenever the content

1367
01:12:59,949 --> 01:13:05,018
changes right the resource demand may

1368
01:13:02,170 --> 01:13:07,539
vary as well and that will cause some

1369
01:13:05,019 --> 01:13:09,849
very spiky workload and whatever in

1370
01:13:07,539 --> 01:13:11,949
network resource allocation on network

1371
01:13:09,849 --> 01:13:13,960
allocation resource allocation mechanism

1372
01:13:11,949 --> 01:13:17,669
we're proposing must be able to cope

1373
01:13:13,960 --> 01:13:21,219
with that okay and a second because

1374
01:13:17,670 --> 01:13:23,440
we're dealing with this video analytics

1375
01:13:21,219 --> 01:13:26,949
is dealing with some algorithm as the

1376
01:13:23,440 --> 01:13:28,598
final consumer of the system right you

1377
01:13:26,949 --> 01:13:31,659
can actually leverage some of this

1378
01:13:28,599 --> 01:13:33,639
real-time feedback from it and this

1379
01:13:31,659 --> 01:13:37,329
actually opens up new opportunities to

1380
01:13:33,639 --> 01:13:39,219
bring the goals of these data analytics

1381
01:13:37,329 --> 01:13:43,880
to the resource allocation control loop

1382
01:13:39,219 --> 01:13:47,010
okay and thank you ready for castle okay

1383
01:13:43,880 --> 01:13:47,010
[Applause]

1384
01:13:47,340 --> 01:13:57,670
any question so I guess I'd love for you

1385
01:13:55,389 --> 01:14:00,219
to elaborate on what you what you

1386
01:13:57,670 --> 01:14:01,900
imagine it would entail to bring the

1387
01:14:00,219 --> 01:14:05,320
analytics goals to the control loop do

1388
01:14:01,900 --> 01:14:07,570
you see that there is metadata specific

1389
01:14:05,320 --> 01:14:09,070
to these kinds of Cascades they could be

1390
01:14:07,570 --> 01:14:11,518
exposed and then you know what do you

1391
01:14:09,070 --> 01:14:16,179
can you say more given that you're the

1392
01:14:11,519 --> 01:14:18,070
very expert yeah good question so the

1393
01:14:16,179 --> 01:14:21,420
question is how you if you want an

1394
01:14:18,070 --> 01:14:23,949
average the server or the analytics

1395
01:14:21,420 --> 01:14:25,480
logic feedback right so it will be

1396
01:14:23,949 --> 01:14:29,829
better to have kind of standardized

1397
01:14:25,480 --> 01:14:32,110
version of metadata to to generalize

1398
01:14:29,829 --> 01:14:33,820
what I mean I mean most kind of feedback

1399
01:14:32,110 --> 01:14:36,098
you would be used that they'll be useful

1400
01:14:33,820 --> 01:14:37,539
so I think that this is very much in the

1401
01:14:36,099 --> 01:14:40,210
early stage of research that has been

1402
01:14:37,539 --> 01:14:43,150
several papers along this line one thing

1403
01:14:40,210 --> 01:14:45,039
that's really interesting is so-called

1404
01:14:43,150 --> 01:14:45,519
you make some assumptions about what the

1405
01:14:45,039 --> 01:14:47,590
Khan

1406
01:14:45,520 --> 01:14:49,510
tenth or the video I mean the dynamics

1407
01:14:47,590 --> 01:14:51,970
of video would look like so basically

1408
01:14:49,510 --> 01:14:53,920
you you let the server see something

1409
01:14:51,970 --> 01:14:57,820
okay and the server will tell you okay

1410
01:14:53,920 --> 01:15:00,610
so it's this anomaly in me is this usual

1411
01:14:57,820 --> 01:15:04,299
or not if it's very unusual right so it

1412
01:15:00,610 --> 01:15:06,639
will ask you for more information so for

1413
01:15:04,300 --> 01:15:08,770
example if it looks that looking at very

1414
01:15:06,640 --> 01:15:10,960
low quality video it sees these objects

1415
01:15:08,770 --> 01:15:12,700
this just appears once and disappear all

1416
01:15:10,960 --> 01:15:14,770
of a sudden that doesn't make a lot of

1417
01:15:12,700 --> 01:15:17,710
sense right so that's kind of anomaly is

1418
01:15:14,770 --> 01:15:20,820
one thing that's really standout in

1419
01:15:17,710 --> 01:15:23,650
across several papers I'm just trying to

1420
01:15:20,820 --> 01:15:25,210
really generalize that I mean obviously

1421
01:15:23,650 --> 01:15:28,030
they have very different mechanisms to

1422
01:15:25,210 --> 01:15:29,860
solve that but anomaly in the thing the

1423
01:15:28,030 --> 01:15:32,019
result is one interesting result

1424
01:15:29,860 --> 01:15:34,170
interesting sink you look at the other

1425
01:15:32,020 --> 01:15:36,760
thing is so-called confidence so

1426
01:15:34,170 --> 01:15:41,110
confidence as in so this neural network

1427
01:15:36,760 --> 01:15:43,870
usually have some scores attached to

1428
01:15:41,110 --> 01:15:45,730
each each detection and scores being

1429
01:15:43,870 --> 01:15:48,130
high means it's very confident that this

1430
01:15:45,730 --> 01:15:51,490
is actually a thing if it's low that

1431
01:15:48,130 --> 01:15:54,010
means this McClure it doesn't mean

1432
01:15:51,490 --> 01:15:55,599
anything but you can treat it as it's

1433
01:15:54,010 --> 01:15:58,180
not being very confident okay

1434
01:15:55,600 --> 01:16:00,520
so that score is one thing also useful

1435
01:15:58,180 --> 01:16:05,350
as a feedback for you to pull more you

1436
01:16:00,520 --> 01:16:07,300
use well information from their mean for

1437
01:16:05,350 --> 01:16:11,620
more lunch do you know if it changed a

1438
01:16:07,300 --> 01:16:14,710
lot as a bit rate or is going to be much

1439
01:16:11,620 --> 01:16:17,920
more variable or do you still have a

1440
01:16:14,710 --> 01:16:20,080
pipeline with a constant before uses the

1441
01:16:17,920 --> 01:16:23,320
bit rate will be changing a lot versus

1442
01:16:20,080 --> 01:16:25,809
pretty stable okay right yes so like I

1443
01:16:23,320 --> 01:16:27,719
said it's very content dependent if you

1444
01:16:25,810 --> 01:16:30,720
have a big objects in the middle in a

1445
01:16:27,720 --> 01:16:32,440
self-driving car if your car is staying

1446
01:16:30,720 --> 01:16:36,010
in front of you

1447
01:16:32,440 --> 01:16:43,559
low resolution enough do you have some

1448
01:16:36,010 --> 01:16:48,300
figure but definitely not at a scale of

1449
01:16:43,560 --> 01:16:51,550
like to Megan two orders of magnitude

1450
01:16:48,300 --> 01:16:54,370
it's usually whizzing one order of

1451
01:16:51,550 --> 01:16:55,810
magnitude okay so so like if you if you

1452
01:16:54,370 --> 01:16:57,700
talk about video you're changing

1453
01:16:55,810 --> 01:16:59,099
resolution and QP rice qualitative

1454
01:16:57,700 --> 01:17:02,250
quantization parameter or

1455
01:16:59,099 --> 01:17:06,780
that's usually a wasting a range of

1456
01:17:02,250 --> 01:17:08,760
certain value I mean low and high didn't

1457
01:17:06,780 --> 01:17:12,119
what won't have a difference of more

1458
01:17:08,760 --> 01:17:13,860
than 10x now that has a reason that has

1459
01:17:12,119 --> 01:17:15,598
an actual underlying reason that it's

1460
01:17:13,860 --> 01:17:18,570
because the neural network these days

1461
01:17:15,599 --> 01:17:19,980
assumes certain input size so even if

1462
01:17:18,570 --> 01:17:22,679
you give a very very high resolution

1463
01:17:19,980 --> 01:17:25,339
video it will resize into something

1464
01:17:22,679 --> 01:17:28,199
smaller as well so so I'm just saying

1465
01:17:25,340 --> 01:17:31,920
the magnitude of resolution changing

1466
01:17:28,199 --> 01:17:34,888
that I'm seeing is not really the full

1467
01:17:31,920 --> 01:17:37,369
scale of variance that you will be

1468
01:17:34,889 --> 01:17:40,320
seeing if you have better neural network

1469
01:17:37,369 --> 01:17:44,790
does that make another question does it

1470
01:17:40,320 --> 01:17:48,540
reduce the number of steps or tasks in

1471
01:17:44,790 --> 01:17:50,369
the cloud to edge path steps as

1472
01:17:48,540 --> 01:17:52,250
accessible you you were describing that

1473
01:17:50,369 --> 01:17:56,610
the currently there are a lot of

1474
01:17:52,250 --> 01:18:01,710
different steps to to to to extract

1475
01:17:56,610 --> 01:18:05,098
analytics do you have an idea about the

1476
01:18:01,710 --> 01:18:12,270
number of steps is going to decrease

1477
01:18:05,099 --> 01:18:14,790
yeah that's a good question I think most

1478
01:18:12,270 --> 01:18:16,800
of the working this space is not trying

1479
01:18:14,790 --> 01:18:19,260
to figure out the optimal number of

1480
01:18:16,800 --> 01:18:21,300
layers between the camera and the cloud

1481
01:18:19,260 --> 01:18:23,310
they're trying to say if you have this

1482
01:18:21,300 --> 01:18:25,889
number of layers how do I layout I mean

1483
01:18:23,310 --> 01:18:28,380
how do i spread analytics across these

1484
01:18:25,889 --> 01:18:31,380
layers I think that's actually a real

1485
01:18:28,380 --> 01:18:33,420
good question for from this print this

1486
01:18:31,380 --> 01:18:39,409
group specific perspective to

1487
01:18:33,420 --> 01:18:44,010
investigate could you put up the spiky

1488
01:18:39,409 --> 01:18:48,230
little graph again so I'm trying to read

1489
01:18:44,010 --> 01:18:53,730
the the x-axis is kind of compressed so

1490
01:18:48,230 --> 01:18:55,678
how many how much time is between the

1491
01:18:53,730 --> 01:18:59,400
bottom and and and any given peak is

1492
01:18:55,679 --> 01:19:03,179
that seconds tenths of seconds I guys I

1493
01:18:59,400 --> 01:19:04,559
can't really see this yeah well let me

1494
01:19:03,179 --> 01:19:08,219
let me sort of you really get to the

1495
01:19:04,560 --> 01:19:11,010
question I want to ask how many RT T's

1496
01:19:08,219 --> 01:19:11,980
do I have before I see the spike before

1497
01:19:11,010 --> 01:19:15,880
I know that that's why

1498
01:19:11,980 --> 01:19:18,580
is big so this is me at the scale or me

1499
01:19:15,880 --> 01:19:20,530
at the scale time scale of seconds the

1500
01:19:18,580 --> 01:19:23,170
grandeur of this granularity of seconds

1501
01:19:20,530 --> 01:19:26,080
so I think if you look if you're talking

1502
01:19:23,170 --> 01:19:30,100
about network with RT teals sub-second

1503
01:19:26,080 --> 01:19:33,040
RT t right you in theory you can catch

1504
01:19:30,100 --> 01:19:34,600
that right I'm trying to get stars how

1505
01:19:33,040 --> 01:19:37,120
can I catch that and get the resource

1506
01:19:34,600 --> 01:19:39,010
allocation done right right but but but

1507
01:19:37,120 --> 01:19:40,900
I'm just saying in Syria can catch that

1508
01:19:39,010 --> 01:19:42,970
right right up front but you do need

1509
01:19:40,900 --> 01:19:45,250
several iterations to look like really

1510
01:19:42,970 --> 01:19:46,720
coverage and after that I mean resource

1511
01:19:45,250 --> 01:19:48,640
allocation is not free right so it's not

1512
01:19:46,720 --> 01:19:50,500
instantaneous so you kind of need to

1513
01:19:48,640 --> 01:19:52,450
take that into a country maybe that's

1514
01:19:50,500 --> 01:19:57,600
x-ray was taking most of the time and

1515
01:19:52,450 --> 01:20:00,099
then given that edge resources are

1516
01:19:57,600 --> 01:20:02,650
constrained not just in compute but in

1517
01:20:00,100 --> 01:20:06,340
memory yes the question is can I buffer

1518
01:20:02,650 --> 01:20:08,469
enough of this peak so that oh I can

1519
01:20:06,340 --> 01:20:09,850
keep the data long enough till I can get

1520
01:20:08,470 --> 01:20:12,160
the resource allocated

1521
01:20:09,850 --> 01:20:13,600
yeah I think you're right way I said

1522
01:20:12,160 --> 01:20:15,639
memories the bottom there because

1523
01:20:13,600 --> 01:20:17,739
usually this newer network is what's

1524
01:20:15,640 --> 01:20:19,900
consuming most of the most of the memory

1525
01:20:17,739 --> 01:20:23,169
I think if you just want to buffer the

1526
01:20:19,900 --> 01:20:24,580
video before it's actually analyzed yes

1527
01:20:23,170 --> 01:20:26,680
yes thank you you should be able to

1528
01:20:24,580 --> 01:20:28,750
buffer those you're saying it the the

1529
01:20:26,680 --> 01:20:31,480
size of the video is small compared to

1530
01:20:28,750 --> 01:20:34,870
the size of the model yes yes actually

1531
01:20:31,480 --> 01:20:36,489
yes okay well well then hmm

1532
01:20:34,870 --> 01:20:38,140
the interesting question is do you need

1533
01:20:36,489 --> 01:20:42,040
the model everywhere and can you get the

1534
01:20:38,140 --> 01:20:43,720
model in right yeah that's an X if you

1535
01:20:42,040 --> 01:20:45,430
don't have the model I guess the memory

1536
01:20:43,720 --> 01:20:47,380
would be the bottleneck for buffering

1537
01:20:45,430 --> 01:20:49,420
the video but I think these cameras

1538
01:20:47,380 --> 01:20:52,030
usually have pretty large storage and

1539
01:20:49,420 --> 01:20:55,690
buffering super thank you okay last

1540
01:20:52,030 --> 01:20:57,910
question oh yes did you consider how

1541
01:20:55,690 --> 01:21:01,419
state your name oh yes sure on UNIX are

1542
01:20:57,910 --> 01:21:03,489
um do you consider how urgent is it to

1543
01:21:01,420 --> 01:21:06,790
understand what the camera sees

1544
01:21:03,489 --> 01:21:08,230
like if it's really urgent then the

1545
01:21:06,790 --> 01:21:12,400
neural network should be on the camera

1546
01:21:08,230 --> 01:21:15,219
and then if it doesn't understand then

1547
01:21:12,400 --> 01:21:17,710
only frames on demand frames not the

1548
01:21:15,220 --> 01:21:18,910
whole video cuz yeah it's too much so so

1549
01:21:17,710 --> 01:21:21,160
I think you're you're definitely right

1550
01:21:18,910 --> 01:21:23,349
they are too extreme of the system of

1551
01:21:21,160 --> 01:21:24,880
the little too extreme for shelves of

1552
01:21:23,350 --> 01:21:25,960
views right so you can have like

1553
01:21:24,880 --> 01:21:28,120
self-driving cars

1554
01:21:25,960 --> 01:21:30,880
where you do have a lot of resource Amir

1555
01:21:28,120 --> 01:21:34,030
it's a car right and and and everything

1556
01:21:30,880 --> 01:21:36,610
is very must be very super real-time

1557
01:21:34,030 --> 01:21:39,280
alright so in those kind of situation

1558
01:21:36,610 --> 01:21:41,139
you do want everything local versus if

1559
01:21:39,280 --> 01:21:43,660
you have a bunch of surveillance cameras

1560
01:21:41,140 --> 01:21:46,090
or a camera network where you have like

1561
01:21:43,660 --> 01:21:47,980
thousands of cameras cheaper want cheap

1562
01:21:46,090 --> 01:21:50,320
much cheaper than the one you are you

1563
01:21:47,980 --> 01:21:52,030
have on self-driving cars and then in

1564
01:21:50,320 --> 01:21:54,639
those kind of situations you need to

1565
01:21:52,030 --> 01:21:58,240
have a back-end Network system to

1566
01:21:54,640 --> 01:22:01,540
analyze the data and but actually you're

1567
01:21:58,240 --> 01:22:03,309
right in those cases we are most people

1568
01:22:01,540 --> 01:22:05,430
are assuming they are not urgent as

1569
01:22:03,310 --> 01:22:07,540
urgent I mean as real-time as

1570
01:22:05,430 --> 01:22:11,650
self-driving cars so they can tolerate

1571
01:22:07,540 --> 01:22:13,900
certain level of delay yes okay so but

1572
01:22:11,650 --> 01:22:16,030
but you're a maybe in the worst case of

1573
01:22:13,900 --> 01:22:18,160
I mean the worst version of most words

1574
01:22:16,030 --> 01:22:21,179
right you have a lot of cameras cheap

1575
01:22:18,160 --> 01:22:23,980
ones and you need super real-time

1576
01:22:21,180 --> 01:22:26,920
reaction that's the kind of holy grail

1577
01:22:23,980 --> 01:22:30,370
of this kind of systems there has to be

1578
01:22:26,920 --> 01:22:31,660
layering because the car itself is

1579
01:22:30,370 --> 01:22:34,690
always going to have some kind of

1580
01:22:31,660 --> 01:22:37,930
mutation versus so but what you can

1581
01:22:34,690 --> 01:22:40,120
consider is a neural net on the on the

1582
01:22:37,930 --> 01:22:41,590
camera if it's a movie camera cannot

1583
01:22:40,120 --> 01:22:45,099
expect what's going to happen somebody

1584
01:22:41,590 --> 01:22:47,680
may jump the kid the ball and then in

1585
01:22:45,100 --> 01:22:49,600
the edge if you need sub ten millisecond

1586
01:22:47,680 --> 01:22:52,510
and then in the cloud if you need

1587
01:22:49,600 --> 01:22:54,400
something that's that's really yes

1588
01:22:52,510 --> 01:22:56,680
there's a kind of hierarchy of delays

1589
01:22:54,400 --> 01:23:17,740
you can tolerate if you want to go

1590
01:22:56,680 --> 01:23:20,850
further layer up from yeah thank you I

1591
01:23:17,740 --> 01:23:25,300
think you're the one who controls the

1592
01:23:20,850 --> 01:23:27,430
the microphone okay yeah maybe you will

1593
01:23:25,300 --> 01:23:31,440
say can you hear me okay we hear you

1594
01:23:27,430 --> 01:23:31,440
great very good okay

1595
01:23:31,920 --> 01:23:37,110
do I see do I control

1596
01:23:41,559 --> 01:23:48,530
okay very good okay

1597
01:23:43,939 --> 01:23:50,959
so let's start so my name is Jesper Eric

1598
01:23:48,530 --> 01:23:54,759
stone and I'm a VP of Product Management

1599
01:23:50,959 --> 01:23:57,289
the co-founder of of Nova flow and and I

1600
01:23:54,760 --> 01:24:00,739
have logged on to this session using

1601
01:23:57,289 --> 01:24:03,228
Marc Leclerc registration credentials he

1602
01:24:00,739 --> 01:24:05,178
is a dear colleague of mine me pure

1603
01:24:03,229 --> 01:24:07,639
marketing strategy and also co-founder

1604
01:24:05,179 --> 01:24:09,439
and to do this I had to promise him not

1605
01:24:07,639 --> 01:24:12,499
to use any course language or get him

1606
01:24:09,439 --> 01:24:14,590
into any trouble whatsoever so you see

1607
01:24:12,499 --> 01:24:21,349
Marc but it's really just for Erikson

1608
01:24:14,590 --> 01:24:23,780
so on the first slide the this

1609
01:24:21,349 --> 01:24:26,570
presentation is really about the

1610
01:24:23,780 --> 01:24:28,999
evolution of STM from OpenFlow to p4 and

1611
01:24:26,570 --> 01:24:32,659
people run time and the slide that

1612
01:24:28,999 --> 01:24:34,820
you're looking at right now is just an

1613
01:24:32,659 --> 01:24:37,449
introductory slide you know Nova flow as

1614
01:24:34,820 --> 01:24:42,079
a company we were founded in 2012 as a

1615
01:24:37,449 --> 01:24:44,150
pure Sdn company we really at least our

1616
01:24:42,079 --> 01:24:47,570
first commercial open flow one two three

1617
01:24:44,150 --> 01:24:49,670
switch in second quarter 2013 and our

1618
01:24:47,570 --> 01:24:53,259
core technology is is really this

1619
01:24:49,670 --> 01:24:57,579
programmable match action pipeline using

1620
01:24:53,260 --> 01:25:02,989
Mellanox MP use and also barefoot Tofino

1621
01:24:57,579 --> 01:25:05,209
the key verticals that we operate in and

1622
01:25:02,989 --> 01:25:08,829
where our technology is used is cyber

1623
01:25:05,209 --> 01:25:12,800
security different types of gateways and

1624
01:25:08,829 --> 01:25:16,880
then also on-demand bandwidth solutions

1625
01:25:12,800 --> 01:25:21,920
in in Wham's and broadband access so

1626
01:25:16,880 --> 01:25:24,829
please change so what is a match action

1627
01:25:21,920 --> 01:25:27,380
pipeline well so the match action

1628
01:25:24,829 --> 01:25:30,018
pipeline resides in the switch silicon

1629
01:25:27,380 --> 01:25:32,989
inside a switch or router and it's

1630
01:25:30,019 --> 01:25:37,760
really the embedment embodiment of the

1631
01:25:32,989 --> 01:25:41,040
rules by which we want to process the

1632
01:25:37,760 --> 01:25:44,340
packet as it goes through the switch

1633
01:25:41,040 --> 01:25:46,980
and in most switches you'll find a fixed

1634
01:25:44,340 --> 01:25:51,660
a sink and that's really what you see on

1635
01:25:46,980 --> 01:25:56,129
the left and an in a fixed executes a

1636
01:25:51,660 --> 01:26:00,330
fixed set of mass action tables defined

1637
01:25:56,130 --> 01:26:04,050
in there in the silicon the size of

1638
01:26:00,330 --> 01:26:06,990
these tables is fixed what the fields

1639
01:26:04,050 --> 01:26:10,020
that you can match on is predefined and

1640
01:26:06,990 --> 01:26:12,540
the actions that you take in the table

1641
01:26:10,020 --> 01:26:15,990
in that particular table is also fixed

1642
01:26:12,540 --> 01:26:18,810
and then you know as an application

1643
01:26:15,990 --> 01:26:22,260
programmer trying to use this in an SDM

1644
01:26:18,810 --> 01:26:25,170
context you know I would have to try and

1645
01:26:22,260 --> 01:26:27,590
map my application into this fixed max

1646
01:26:25,170 --> 01:26:29,610
match action pipeline so it's really a

1647
01:26:27,590 --> 01:26:31,770
bottom what we call a bottoms up

1648
01:26:29,610 --> 01:26:33,780
programming paradigm you have to see

1649
01:26:31,770 --> 01:26:35,250
what's in the silicon and that really

1650
01:26:33,780 --> 01:26:38,639
drives what you can do with your

1651
01:26:35,250 --> 01:26:42,480
application and then on the right you

1652
01:26:38,640 --> 01:26:45,960
see a programmable silicon and here

1653
01:26:42,480 --> 01:26:49,169
there's no prior set of mass action

1654
01:26:45,960 --> 01:26:52,860
tables defined in the silicon and the

1655
01:26:49,170 --> 01:26:56,430
application programmer creates the

1656
01:26:52,860 --> 01:26:58,679
pipeline to specifically meet the needs

1657
01:26:56,430 --> 01:27:00,960
of the application you know the the

1658
01:26:58,680 --> 01:27:04,440
programmer from from scratch

1659
01:27:00,960 --> 01:27:06,870
says I need this many tables this is the

1660
01:27:04,440 --> 01:27:10,290
size of the various size of the tables

1661
01:27:06,870 --> 01:27:12,660
the types of the tables and then what

1662
01:27:10,290 --> 01:27:15,810
match fields and actions I want to use

1663
01:27:12,660 --> 01:27:20,540
in each table and it really allows the

1664
01:27:15,810 --> 01:27:23,910
programmer and the application to drive

1665
01:27:20,540 --> 01:27:31,320
the packet processing pipeline in the in

1666
01:27:23,910 --> 01:27:33,330
the silicon ok next slide please so who

1667
01:27:31,320 --> 01:27:37,080
cares you know what why is this

1668
01:27:33,330 --> 01:27:39,240
important and and well in in our view

1669
01:27:37,080 --> 01:27:41,940
you know this program will match action

1670
01:27:39,240 --> 01:27:44,519
pipeline enables the following thing the

1671
01:27:41,940 --> 01:27:47,629
first one is faster introduction of new

1672
01:27:44,520 --> 01:27:51,270
network functionality in protocols and

1673
01:27:47,630 --> 01:27:54,000
you know there's an endless list of of

1674
01:27:51,270 --> 01:27:54,960
this I mentioned a couple here you know

1675
01:27:54,000 --> 01:27:59,780
ipv6

1676
01:27:54,960 --> 01:28:04,320
i AMSO v6 essentially any new protocol

1677
01:27:59,780 --> 01:28:06,330
that's introduced unless the silicon is

1678
01:28:04,320 --> 01:28:08,790
programmable you have to wait for the

1679
01:28:06,330 --> 01:28:13,860
next generation of silicon to to be able

1680
01:28:08,790 --> 01:28:16,350
to introduce that functionality it also

1681
01:28:13,860 --> 01:28:19,170
allows you to do fast prototyping of new

1682
01:28:16,350 --> 01:28:22,320
capabilities because the the

1683
01:28:19,170 --> 01:28:25,110
functionality software-defined another

1684
01:28:22,320 --> 01:28:27,389
key point is that this allows in this

1685
01:28:25,110 --> 01:28:31,139
aggregation of network hardware and

1686
01:28:27,390 --> 01:28:35,460
software that the hardware looks more

1687
01:28:31,140 --> 01:28:37,890
like a server and then can be sourced

1688
01:28:35,460 --> 01:28:41,310
differently you know and and then this

1689
01:28:37,890 --> 01:28:43,739
software is really what defines what the

1690
01:28:41,310 --> 01:28:45,900
functionality is and then the third

1691
01:28:43,739 --> 01:28:47,910
bullet here is features are defined in

1692
01:28:45,900 --> 01:28:51,570
the software and not in the hardware and

1693
01:28:47,910 --> 01:28:54,360
what what that drives is there's really

1694
01:28:51,570 --> 01:28:57,179
no forced obsolescence of the networking

1695
01:28:54,360 --> 01:29:01,170
equipment as you can upgrade the

1696
01:28:57,180 --> 01:29:04,440
functionality through software and over

1697
01:29:01,170 --> 01:29:08,730
time you can also repurpose the network

1698
01:29:04,440 --> 01:29:12,989
equipment by changing the software more

1699
01:29:08,730 --> 01:29:16,980
like a server so that yeah and then we

1700
01:29:12,989 --> 01:29:22,280
go to the open flow starting with the

1701
01:29:16,980 --> 01:29:25,080
open flow match action pipeline so it

1702
01:29:22,280 --> 01:29:27,660
and this is like one two three one

1703
01:29:25,080 --> 01:29:31,670
before it cetera and it allows you to

1704
01:29:27,660 --> 01:29:35,639
define any number of tables or steps and

1705
01:29:31,670 --> 01:29:38,100
in any one of these tables you can match

1706
01:29:35,640 --> 01:29:41,250
on any combination of a predefined set

1707
01:29:38,100 --> 01:29:44,850
of matched fields and then operate on

1708
01:29:41,250 --> 01:29:49,950
the packets using any of a predefined

1709
01:29:44,850 --> 01:29:52,350
set of instructions and actions so it

1710
01:29:49,950 --> 01:29:54,809
has a lot of freedom the programmer can

1711
01:29:52,350 --> 01:29:56,310
say I want two tables I want to match on

1712
01:29:54,810 --> 01:29:59,670
this in the first table I want to match

1713
01:29:56,310 --> 01:30:03,719
on this in the second table I want to

1714
01:29:59,670 --> 01:30:05,850
highlight the metadata field as an

1715
01:30:03,719 --> 01:30:09,120
interesting feature in open flow and and

1716
01:30:05,850 --> 01:30:12,120
also in p4 it allows you to bring the

1717
01:30:09,120 --> 01:30:15,170
result from one table to the next and

1718
01:30:12,120 --> 01:30:18,960
match on it it's like it carried forward

1719
01:30:15,170 --> 01:30:23,250
variable and and we have a one customer

1720
01:30:18,960 --> 01:30:25,830
that that's using this to progressively

1721
01:30:23,250 --> 01:30:28,980
build the result and in a number of

1722
01:30:25,830 --> 01:30:31,530
tables and then in the last table match

1723
01:30:28,980 --> 01:30:36,230
on the overall result or what happened

1724
01:30:31,530 --> 01:30:36,230
in there or what the pipeline calculated

1725
01:30:36,830 --> 01:30:47,070
it makes like this so here you see a

1726
01:30:43,340 --> 01:30:49,469
real implementation of a true open flow

1727
01:30:47,070 --> 01:30:53,099
switch and and the purpose of this slide

1728
01:30:49,469 --> 01:30:57,660
is really to illustrate what a true open

1729
01:30:53,100 --> 01:31:00,150
flow switch looks like and and switch

1730
01:30:57,660 --> 01:31:04,860
that's compliant with you know open flow

1731
01:31:00,150 --> 01:31:08,879
1.4 and it may give you some ideas of

1732
01:31:04,860 --> 01:31:11,280
what you can do with with open flow and

1733
01:31:08,880 --> 01:31:19,770
from a network computing perspective and

1734
01:31:11,280 --> 01:31:24,269
and what it shows is it defines let me

1735
01:31:19,770 --> 01:31:30,540
see them it's hard to read here yeah so

1736
01:31:24,270 --> 01:31:34,530
it it allows the programmer to to you

1737
01:31:30,540 --> 01:31:37,290
know create a pipeline with up to 41

1738
01:31:34,530 --> 01:31:39,870
different match fields as defined in

1739
01:31:37,290 --> 01:31:43,980
open flow one before up to six

1740
01:31:39,870 --> 01:31:46,860
instructions and and up to 56 actions

1741
01:31:43,980 --> 01:31:51,120
and inactions include the ability to

1742
01:31:46,860 --> 01:31:55,170
change the value in any match field and

1743
01:31:51,120 --> 01:31:58,620
you can put any match field in actions

1744
01:31:55,170 --> 01:32:02,940
instructions in any in any table and the

1745
01:31:58,620 --> 01:32:05,070
tables may be a wild card table where

1746
01:32:02,940 --> 01:32:10,160
you have don't care bits in the in the

1747
01:32:05,070 --> 01:32:13,980
match field or an exact match table and

1748
01:32:10,160 --> 01:32:17,700
and then each table the width or the

1749
01:32:13,980 --> 01:32:21,030
number of matched fields that is defined

1750
01:32:17,700 --> 01:32:24,329
by the programmer and the number of rows

1751
01:32:21,030 --> 01:32:28,199
it's also defined by the programmer so a

1752
01:32:24,329 --> 01:32:30,058
good example here is the Novi flow

1753
01:32:28,199 --> 01:32:34,650
implementation where you have up to 1

1754
01:32:30,059 --> 01:32:38,599
million flow entries in at ECAM in up to

1755
01:32:34,650 --> 01:32:42,179
60 different tables and then in the

1756
01:32:38,599 --> 01:32:46,289
exact match use case you have up to 6

1757
01:32:42,179 --> 01:32:48,389
million rows or flow entries in up to 60

1758
01:32:46,289 --> 01:32:50,400
tables so the programmer can really

1759
01:32:48,389 --> 01:32:55,010
application program you can really put

1760
01:32:50,400 --> 01:32:59,280
together that the pipeline using these

1761
01:32:55,010 --> 01:33:04,860
primitives that then supports the

1762
01:32:59,280 --> 01:33:13,530
application yep move on to the next one

1763
01:33:04,860 --> 01:33:16,759
which is the the P for the the P for and

1764
01:33:13,530 --> 01:33:19,289
P for runtime match action pipeline so

1765
01:33:16,760 --> 01:33:21,659
so notice what we've been working with P

1766
01:33:19,289 --> 01:33:25,219
for for about two years we released our

1767
01:33:21,659 --> 01:33:27,780
first commercial product in May 2018

1768
01:33:25,219 --> 01:33:30,510
this was a switch nos that allowed you

1769
01:33:27,780 --> 01:33:32,789
to use the barefoot Tofino switch as an

1770
01:33:30,510 --> 01:33:35,190
open flow one death v switch

1771
01:33:32,789 --> 01:33:39,719
we essentially wrapped open flow around

1772
01:33:35,190 --> 01:33:43,650
p4 and allowed the user to create and

1773
01:33:39,719 --> 01:33:48,179
run an open flow pipeline on it to FINA

1774
01:33:43,650 --> 01:33:50,039
white box so basically we the user saw

1775
01:33:48,179 --> 01:33:54,150
an open flow switch but internally in

1776
01:33:50,039 --> 01:33:56,900
the nas we map that into p4 code that

1777
01:33:54,150 --> 01:33:59,308
get compiled and push into the silicon

1778
01:33:56,900 --> 01:34:02,429
so that was like the first step

1779
01:33:59,309 --> 01:34:06,059
mmm so when you look at the P for P for

1780
01:34:02,429 --> 01:34:11,249
runtime match action pipeline the P for

1781
01:34:06,059 --> 01:34:13,889
part is the programming language that is

1782
01:34:11,249 --> 01:34:17,099
used to define how a switch Silicon

1783
01:34:13,889 --> 01:34:19,679
process to packets you can define the

1784
01:34:17,099 --> 01:34:21,719
parser which is you know what kind of

1785
01:34:19,679 --> 01:34:24,749
match fields you're going to get you can

1786
01:34:21,719 --> 01:34:29,249
program the actions know what am I going

1787
01:34:24,749 --> 01:34:33,510
to do and then I can program and define

1788
01:34:29,249 --> 01:34:34,530
a match action pipeline tables in a

1789
01:34:33,510 --> 01:34:37,430
match action pipeline

1790
01:34:34,530 --> 01:34:41,099
and then the p4 runtime is really the

1791
01:34:37,430 --> 01:34:46,200
interface from an external p4 controller

1792
01:34:41,100 --> 01:34:52,620
or internal people controller to to

1793
01:34:46,200 --> 01:34:56,599
access and and program this match action

1794
01:34:52,620 --> 01:34:58,769
pipeline you know add flow entries or

1795
01:34:56,600 --> 01:35:01,680
initially what what you do first is you

1796
01:34:58,770 --> 01:35:04,650
load the compiled p4 program then you

1797
01:35:01,680 --> 01:35:07,280
can add delete flow entries in the match

1798
01:35:04,650 --> 01:35:12,500
action tables you can collect statistics

1799
01:35:07,280 --> 01:35:16,259
so the p f-- p4 runtime is really the

1800
01:35:12,500 --> 01:35:22,680
comparison to open flow from from a

1801
01:35:16,260 --> 01:35:25,530
networking perspective well while i'm

1802
01:35:22,680 --> 01:35:29,370
talking your slides are copyright i saw

1803
01:35:25,530 --> 01:35:32,790
that when you started that means I will

1804
01:35:29,370 --> 01:35:36,360
have to take them out of our repository

1805
01:35:32,790 --> 01:35:38,670
is that ok with you because we don't

1806
01:35:36,360 --> 01:35:41,730
have it we cannot have copyrighted

1807
01:35:38,670 --> 01:35:44,880
material ok so what I can do

1808
01:35:41,730 --> 01:35:46,679
my Jose I could I could submit another

1809
01:35:44,880 --> 01:35:52,350
one without the copyright let me check

1810
01:35:46,680 --> 01:35:58,140
my bad yeah ok very good

1811
01:35:52,350 --> 01:36:02,840
ok next slide please so this slide is

1812
01:35:58,140 --> 01:36:08,220
really to illustrate the extent by which

1813
01:36:02,840 --> 01:36:09,960
this the parser and and the the master

1814
01:36:08,220 --> 01:36:12,660
action pipeline and the actions are

1815
01:36:09,960 --> 01:36:18,020
defined in software so you basically

1816
01:36:12,660 --> 01:36:21,389
define an Ethernet header an ipv4 header

1817
01:36:18,020 --> 01:36:25,940
the tables you know what you match on

1818
01:36:21,390 --> 01:36:29,310
what what the actions are and so it's a

1819
01:36:25,940 --> 01:36:32,610
the software definition is driven all

1820
01:36:29,310 --> 01:36:35,780
the way down to 2 to bare bones and then

1821
01:36:32,610 --> 01:36:39,299
on so you have a header types parses

1822
01:36:35,780 --> 01:36:41,219
tables actions metadata and then you

1823
01:36:39,300 --> 01:36:45,180
have this thing called external objects

1824
01:36:41,220 --> 01:36:48,340
so it allows you to create functions in

1825
01:36:45,180 --> 01:36:50,780
your pipeline that will do

1826
01:36:48,340 --> 01:36:55,880
operations like check some registers

1827
01:36:50,780 --> 01:36:58,309
counters meters and also you know I any

1828
01:36:55,880 --> 01:37:02,840
and the other thing you can think of so

1829
01:36:58,310 --> 01:37:05,840
to move on next slide so comparing open

1830
01:37:02,840 --> 01:37:07,100
flow and P for P for runtime both of

1831
01:37:05,840 --> 01:37:08,120
them give you a programmable math

1832
01:37:07,100 --> 01:37:10,700
section pipeline

1833
01:37:08,120 --> 01:37:14,599
however P for P for runtime gives you

1834
01:37:10,700 --> 01:37:17,059
additional freedoms as you can program

1835
01:37:14,600 --> 01:37:20,450
the parser and also define your own

1836
01:37:17,060 --> 01:37:21,920
actions in open flow you know you can do

1837
01:37:20,450 --> 01:37:25,010
some of that through experimenter

1838
01:37:21,920 --> 01:37:27,620
extensions where the developer could

1839
01:37:25,010 --> 01:37:33,350
define new match feel some actions so

1840
01:37:27,620 --> 01:37:35,360
next slide so here's a slide showing at

1841
01:37:33,350 --> 01:37:36,650
the components of a Knauss and what

1842
01:37:35,360 --> 01:37:40,130
we've been talking about is the open

1843
01:37:36,650 --> 01:37:42,320
flow and the p for runtime and and in

1844
01:37:40,130 --> 01:37:44,390
that part but on top would add in in a

1845
01:37:42,320 --> 01:37:46,250
typical notes you also have you know

1846
01:37:44,390 --> 01:37:49,310
configuration management operations

1847
01:37:46,250 --> 01:37:52,730
management security management and other

1848
01:37:49,310 --> 01:38:01,760
extensibility is so and so that was

1849
01:37:52,730 --> 01:38:07,190
really my presentation thank you so I

1850
01:38:01,760 --> 01:38:08,960
have a question I have P for people

1851
01:38:07,190 --> 01:38:11,480
multiple times and I'm curious if you

1852
01:38:08,960 --> 01:38:13,400
have potentially a more satisfying

1853
01:38:11,480 --> 01:38:15,139
answer to this question which is I have

1854
01:38:13,400 --> 01:38:18,349
two programmers each of which have

1855
01:38:15,140 --> 01:38:21,050
written a p4 program and they don't know

1856
01:38:18,350 --> 01:38:24,710
about each other what's the composition

1857
01:38:21,050 --> 01:38:27,440
model for composing to p4 programs into

1858
01:38:24,710 --> 01:38:30,050
one and what's the model for how those

1859
01:38:27,440 --> 01:38:32,809
two programs can be loaded into the same

1860
01:38:30,050 --> 01:38:35,420
switch and what's the model for if I

1861
01:38:32,810 --> 01:38:40,430
want to change the program of the switch

1862
01:38:35,420 --> 01:38:43,190
without resetting the switch yeah it

1863
01:38:40,430 --> 01:38:45,680
also are very good questions and I I'm

1864
01:38:43,190 --> 01:38:48,650
afraid I don't have the answers to that

1865
01:38:45,680 --> 01:38:50,810
right now but I can follow up without

1866
01:38:48,650 --> 01:38:55,219
the answer the answer is with the p4

1867
01:38:50,810 --> 01:38:57,800
people have no clue how to do this is

1868
01:38:55,220 --> 01:38:59,960
more I don't have the answer so I can

1869
01:38:57,800 --> 01:39:01,770
get back to you with with the answers on

1870
01:38:59,960 --> 01:39:03,630
that yeah

1871
01:39:01,770 --> 01:39:06,270
send that to the list that would be

1872
01:39:03,630 --> 01:39:10,020
great and by the way for those who got

1873
01:39:06,270 --> 01:39:12,270
here very late Jasper and France lent us

1874
01:39:10,020 --> 01:39:14,850
two engineers that probably could have

1875
01:39:12,270 --> 01:39:15,540
the answer to your question and so that

1876
01:39:14,850 --> 01:39:18,180
was really great

1877
01:39:15,540 --> 01:39:20,490
are there any other questions at the

1878
01:39:18,180 --> 01:39:21,720
hackathon yes and the code you saw was

1879
01:39:20,490 --> 01:39:25,230
similar to the stuff we did at the

1880
01:39:21,720 --> 01:39:52,040
hackathon any other questions thank you

1881
01:39:25,230 --> 01:39:53,669
so much Jasper yeah thanks yes thanks um

1882
01:39:52,040 --> 01:39:58,440
good very good

1883
01:39:53,670 --> 01:40:01,230
there's a thingy somewhere quite good

1884
01:39:58,440 --> 01:40:02,549
think I'm going to be timely and so this

1885
01:40:01,230 --> 01:40:06,120
draft is submitted a couple of weeks ago

1886
01:40:02,550 --> 01:40:08,700
as a result of ongoing work as well as

1887
01:40:06,120 --> 01:40:10,620
proposed research a lot of the questions

1888
01:40:08,700 --> 01:40:12,870
we are asking we have ideas of answers

1889
01:40:10,620 --> 01:40:13,920
but real ones really and that's why we

1890
01:40:12,870 --> 01:40:15,450
thought it might be a good idea to

1891
01:40:13,920 --> 01:40:17,760
actually put this to the purse research

1892
01:40:15,450 --> 01:40:19,519
group because we feel of that might be a

1893
01:40:17,760 --> 01:40:21,690
good space for it

1894
01:40:19,520 --> 01:40:23,490
the book is launching center around

1895
01:40:21,690 --> 01:40:26,280
micro services that's what we're working

1896
01:40:23,490 --> 01:40:27,900
in but we have a slant in the draft

1897
01:40:26,280 --> 01:40:29,429
around what we call it abscent fig

1898
01:40:27,900 --> 01:40:32,790
micro-services and the reason for that

1899
01:40:29,430 --> 01:40:34,710
is is really to start from you know the

1900
01:40:32,790 --> 01:40:36,420
app economy in the smartphone world and

1901
01:40:34,710 --> 01:40:39,360
look at smartphones I have about 200 on

1902
01:40:36,420 --> 01:40:40,980
my smartphone and and you know it has

1903
01:40:39,360 --> 01:40:42,809
striven you know the development of

1904
01:40:40,980 --> 01:40:46,049
mobile experience as we launch you know

1905
01:40:42,810 --> 01:40:49,050
it we use applications around our smart

1906
01:40:46,050 --> 01:40:51,300
on our smart devices the design is

1907
01:40:49,050 --> 01:40:52,770
fairly static they're softer models

1908
01:40:51,300 --> 01:40:54,150
they're packaged into an application you

1909
01:40:52,770 --> 01:40:56,780
download them from of a store and you're

1910
01:40:54,150 --> 01:40:58,650
done with there are extended

1911
01:40:56,780 --> 01:41:00,300
client-server interactions you usually

1912
01:40:58,650 --> 01:41:03,389
see within these apps but that's about

1913
01:41:00,300 --> 01:41:05,100
it and what we want to move to mentally

1914
01:41:03,390 --> 01:41:07,530
at least as a thought experiment and we

1915
01:41:05,100 --> 01:41:09,150
have first demos on this is to mental

1916
01:41:07,530 --> 01:41:11,190
model where we look at an app as a

1917
01:41:09,150 --> 01:41:13,110
collection of micro services but you can

1918
01:41:11,190 --> 01:41:15,299
decompose and start bouncing around in

1919
01:41:13,110 --> 01:41:15,630
the network that's you know why we call

1920
01:41:15,300 --> 01:41:17,340
apps

1921
01:41:15,630 --> 01:41:19,949
so you decompose a nap into a set of

1922
01:41:17,340 --> 01:41:22,199
micro services you execute them on one

1923
01:41:19,949 --> 01:41:23,730
or more distributed resources that can

1924
01:41:22,199 --> 01:41:25,980
be at the edge of the network and the

1925
01:41:23,730 --> 01:41:28,678
cloud wherever they are and you

1926
01:41:25,980 --> 01:41:30,989
interpret each of these computers as a

1927
01:41:28,679 --> 01:41:34,020
pico micro data center and that's how we

1928
01:41:30,989 --> 01:41:35,730
turn a term they know the name App

1929
01:41:34,020 --> 01:41:37,110
Center so we look we don't look at the

1930
01:41:35,730 --> 01:41:39,330
data center we said well you just run

1931
01:41:37,110 --> 01:41:42,030
micro apps on it right that's what comes

1932
01:41:39,330 --> 01:41:43,980
from the use case we've demonstrated and

1933
01:41:42,030 --> 01:41:45,480
it's described in in the draft is mobile

1934
01:41:43,980 --> 01:41:47,849
function are floating so it said this

1935
01:41:45,480 --> 01:41:49,440
runs on standard Android we do Android

1936
01:41:47,850 --> 01:41:51,900
because we just don't program iOS for

1937
01:41:49,440 --> 01:41:53,940
reasons of resources really we wrap

1938
01:41:51,900 --> 01:41:56,129
helper classes micro service helper

1939
01:41:53,940 --> 01:41:58,169
classes around modules and this is done

1940
01:41:56,130 --> 01:41:59,909
purely at design time so you have to do

1941
01:41:58,170 --> 01:42:01,560
this at the moment at least we're also

1942
01:41:59,909 --> 01:42:04,860
working on the runtime version does this

1943
01:42:01,560 --> 01:42:06,510
automatically and the the the example

1944
01:42:04,860 --> 01:42:08,639
that's described in the draft is you

1945
01:42:06,510 --> 01:42:10,050
know very simple you receive an image

1946
01:42:08,639 --> 01:42:11,730
you processed the image to do some very

1947
01:42:10,050 --> 01:42:13,469
snapshot II kind of thingy and you

1948
01:42:11,730 --> 01:42:15,690
display it's we micro services makes a

1949
01:42:13,469 --> 01:42:17,250
lot of sense right and and now we

1950
01:42:15,690 --> 01:42:19,980
interpret a given experience like

1951
01:42:17,250 --> 01:42:21,780
watching that more video as a chain of

1952
01:42:19,980 --> 01:42:23,519
micro services that you know perceive

1953
01:42:21,780 --> 01:42:26,370
process this by and you're done words

1954
01:42:23,520 --> 01:42:27,840
and when you run the actual application

1955
01:42:26,370 --> 01:42:30,360
now which is still an application is

1956
01:42:27,840 --> 01:42:32,070
being installed as an application from

1957
01:42:30,360 --> 01:42:33,989
the actual Play Store

1958
01:42:32,070 --> 01:42:36,449
and all these micro services run on your

1959
01:42:33,989 --> 01:42:38,489
device it's just as it's as you used to

1960
01:42:36,449 --> 01:42:40,379
because it's an app right but what you

1961
01:42:38,489 --> 01:42:42,959
can do we've done we wrote a small and

1962
01:42:40,380 --> 01:42:45,840
software model that kills the modules on

1963
01:42:42,960 --> 01:42:47,790
the it essentially kills the processes

1964
01:42:45,840 --> 01:42:49,350
and what you see because they're micro

1965
01:42:47,790 --> 01:42:52,620
services they bounce off the actual

1966
01:42:49,350 --> 01:42:55,770
device and and run in the network as in

1967
01:42:52,620 --> 01:42:57,540
network computing and in the trophy we

1968
01:42:55,770 --> 01:42:58,830
describe a policy for using the actual

1969
01:42:57,540 --> 01:43:01,050
ask you figure I should have probably

1970
01:42:58,830 --> 01:43:03,690
used a better one and we realize that

1971
01:43:01,050 --> 01:43:04,199
over an SD Sdn infrastructure the app if

1972
01:43:03,690 --> 01:43:06,780
it runs

1973
01:43:04,199 --> 01:43:09,299
it's a DPR on the top store stands for

1974
01:43:06,780 --> 01:43:11,699
the modules you know despite process and

1975
01:43:09,300 --> 01:43:13,409
receive you run them like that they run

1976
01:43:11,699 --> 01:43:15,509
on on you know that's just the APIs you

1977
01:43:13,409 --> 01:43:17,280
see everything runs on your mobile and

1978
01:43:15,510 --> 01:43:18,659
we have a very simple control UI no

1979
01:43:17,280 --> 01:43:20,940
intelligence in there the intelligence

1980
01:43:18,659 --> 01:43:23,280
is yourself that that knocks them off

1981
01:43:20,940 --> 01:43:25,830
and you kill for instance the processing

1982
01:43:23,280 --> 01:43:27,480
the p1 of the the micro service and the

1983
01:43:25,830 --> 01:43:29,550
chain is missing and it jumps onto a

1984
01:43:27,480 --> 01:43:31,440
processing server in the network

1985
01:43:29,550 --> 01:43:32,820
the processing is more capable so you

1986
01:43:31,440 --> 01:43:35,879
can run different processing routines

1987
01:43:32,820 --> 01:43:38,429
etc you kill the D and it runs onto it

1988
01:43:35,880 --> 01:43:40,290
it jumps onto a smart TV which only

1989
01:43:38,430 --> 01:43:42,090
implements the D function not the other

1990
01:43:40,290 --> 01:43:44,040
ones because it doesn't do processing so

1991
01:43:42,090 --> 01:43:46,920
you get distributed experiences really

1992
01:43:44,040 --> 01:43:49,530
cute we ran this as a demo as a concept

1993
01:43:46,920 --> 01:43:52,710
demo in February this year I said work

1994
01:43:49,530 --> 01:43:54,330
to standard Android what we described in

1995
01:43:52,710 --> 01:43:56,730
the draft is what are some of the

1996
01:43:54,330 --> 01:43:58,410
technologies we you can do this all as a

1997
01:43:56,730 --> 01:43:59,940
vertically integrated demo works

1998
01:43:58,410 --> 01:44:01,650
perfectly the whole point about

1999
01:43:59,940 --> 01:44:03,179
standards is to do this obviously in a

2000
01:44:01,650 --> 01:44:05,370
way that it works not just for our demo

2001
01:44:03,180 --> 01:44:07,350
but it works for everybody right so we

2002
01:44:05,370 --> 01:44:09,570
outline certain areas in the draft that

2003
01:44:07,350 --> 01:44:11,489
we feel work needs to be done some has

2004
01:44:09,570 --> 01:44:14,759
to do with application packaging not

2005
01:44:11,489 --> 01:44:17,099
entirely sure that's an ITF area but

2006
01:44:14,760 --> 01:44:19,170
nonetheless describe that which is

2007
01:44:17,100 --> 01:44:21,900
usually done at design time and what we

2008
01:44:19,170 --> 01:44:23,850
do we defined wrapper classes we expose

2009
01:44:21,900 --> 01:44:26,370
those we are in the process of injecting

2010
01:44:23,850 --> 01:44:28,470
them into the open source community so

2011
01:44:26,370 --> 01:44:30,269
they can be used you can also do

2012
01:44:28,470 --> 01:44:31,920
profiling to do this actually at runtime

2013
01:44:30,270 --> 01:44:33,270
that's the real fun part so you have an

2014
01:44:31,920 --> 01:44:34,950
application that hasn't been designed at

2015
01:44:33,270 --> 01:44:37,620
the micro Service and it's being pulled

2016
01:44:34,950 --> 01:44:38,849
apart into micro servers at runtime and

2017
01:44:37,620 --> 01:44:40,290
then it starts bouncing about in the

2018
01:44:38,850 --> 01:44:42,330
network that's actually quite cool we

2019
01:44:40,290 --> 01:44:45,239
hope to demonstrate that in a couple of

2020
01:44:42,330 --> 01:44:47,790
months time another various service

2021
01:44:45,239 --> 01:44:49,709
deployment how does the P server makes

2022
01:44:47,790 --> 01:44:50,910
it there I remember the one before so

2023
01:44:49,710 --> 01:44:53,370
there was the processing server in the

2024
01:44:50,910 --> 01:44:56,250
network we actually have done this by

2025
01:44:53,370 --> 01:44:58,890
combining application installation with

2026
01:44:56,250 --> 01:45:00,690
service orchestration when you install

2027
01:44:58,890 --> 01:45:03,330
the app we are not using the actual

2028
01:45:00,690 --> 01:45:05,910
Android application installer we do use

2029
01:45:03,330 --> 01:45:08,370
but we have a an extended version which

2030
01:45:05,910 --> 01:45:11,580
not only installs the application but it

2031
01:45:08,370 --> 01:45:13,680
points out of the asset package of the

2032
01:45:11,580 --> 01:45:15,180
application package a service

2033
01:45:13,680 --> 01:45:17,310
orchestration template and pushes it

2034
01:45:15,180 --> 01:45:19,230
into the netbook and says dude I need a

2035
01:45:17,310 --> 01:45:21,480
processing server can you please install

2036
01:45:19,230 --> 01:45:23,190
one for me right and the packages over

2037
01:45:21,480 --> 01:45:24,750
there again there's a lot of

2038
01:45:23,190 --> 01:45:26,639
standardization you you would need to do

2039
01:45:24,750 --> 01:45:29,850
to make that work outside a vertically

2040
01:45:26,640 --> 01:45:31,410
integrated demo and and the integration

2041
01:45:29,850 --> 01:45:33,060
with the app installation model it's

2042
01:45:31,410 --> 01:45:34,710
really quite cute because application

2043
01:45:33,060 --> 01:45:36,900
users just see an application

2044
01:45:34,710 --> 01:45:38,880
installation they don't really see a

2045
01:45:36,900 --> 01:45:41,910
service deployment so that's one of the

2046
01:45:38,880 --> 01:45:42,660
reason why we like that service routing

2047
01:45:41,910 --> 01:45:44,430
I too

2048
01:45:42,660 --> 01:45:46,830
talk about stuff bouncing about now

2049
01:45:44,430 --> 01:45:49,380
obviously that requires that you have in

2050
01:45:46,830 --> 01:45:51,240
place a service routing infrastructure

2051
01:45:49,380 --> 01:45:54,840
is usually done as a combination of DNS

2052
01:45:51,240 --> 01:45:57,059
and IP routing our bouncing about is

2053
01:45:54,840 --> 01:45:59,550
relatively flexible so we use ongoing

2054
01:45:57,060 --> 01:46:03,060
work in the SFC working group which is

2055
01:45:59,550 --> 01:46:04,680
now going smooth the ISE route on so

2056
01:46:03,060 --> 01:46:06,420
called named service function chaining

2057
01:46:04,680 --> 01:46:08,220
as well as service routing over to

2058
01:46:06,420 --> 01:46:09,990
environments but allows you to actually

2059
01:46:08,220 --> 01:46:11,880
do this really flexibly so we have a

2060
01:46:09,990 --> 01:46:13,800
couple of demos where you will see if

2061
01:46:11,880 --> 01:46:16,170
you do this in a standard DNS plus IP

2062
01:46:13,800 --> 01:46:18,540
system it won't be required work because

2063
01:46:16,170 --> 01:46:19,920
the city is not there and we describe

2064
01:46:18,540 --> 01:46:22,530
this issue in the traffic as well the

2065
01:46:19,920 --> 01:46:25,530
Dynamis 'ti of in network computing in

2066
01:46:22,530 --> 01:46:27,480
particular when you bounce functions

2067
01:46:25,530 --> 01:46:28,980
around based and use interactions I walk

2068
01:46:27,480 --> 01:46:30,269
into the room I suddenly want to go for

2069
01:46:28,980 --> 01:46:31,950
my actual discipline and the mobile I

2070
01:46:30,270 --> 01:46:34,950
want to jump onto the display in the

2071
01:46:31,950 --> 01:46:36,960
room that's very very flexible and it

2072
01:46:34,950 --> 01:46:38,280
requires solution for service routing

2073
01:46:36,960 --> 01:46:40,920
that are probably different from the

2074
01:46:38,280 --> 01:46:42,900
ones we know service pinning we describe

2075
01:46:40,920 --> 01:46:44,760
that based on the use case if you have

2076
01:46:42,900 --> 01:46:46,349
two resources that actually implement

2077
01:46:44,760 --> 01:46:47,970
the same micro service how do I make

2078
01:46:46,350 --> 01:46:50,190
sure I'm actually using the one that I

2079
01:46:47,970 --> 01:46:52,980
really want to use and think about the

2080
01:46:50,190 --> 01:46:54,540
display it might matter an awful lot on

2081
01:46:52,980 --> 01:46:56,190
which display you actually display stuff

2082
01:46:54,540 --> 01:46:58,050
even though it's the same d micro

2083
01:46:56,190 --> 01:46:59,759
service I really want to have that one

2084
01:46:58,050 --> 01:47:02,550
though and have the other one and for

2085
01:46:59,760 --> 01:47:04,440
various reasons the pinned relations can

2086
01:47:02,550 --> 01:47:06,810
change very frequently your requirements

2087
01:47:04,440 --> 01:47:08,160
your constrains change you know I might

2088
01:47:06,810 --> 01:47:10,560
walk in a different room I do want to go

2089
01:47:08,160 --> 01:47:12,330
use actually the other display so the

2090
01:47:10,560 --> 01:47:14,580
pinning has to change frequently as well

2091
01:47:12,330 --> 01:47:16,680
all right and how do I do this in a

2092
01:47:14,580 --> 01:47:18,840
standardized manner that will allow me

2093
01:47:16,680 --> 01:47:21,690
to do this and the last area that we

2094
01:47:18,840 --> 01:47:23,820
describe the state's organization we do

2095
01:47:21,690 --> 01:47:26,280
work with a mixture of stateless as well

2096
01:47:23,820 --> 01:47:28,469
as stateful microservices state you

2097
01:47:26,280 --> 01:47:30,509
can't enforce only one of them and

2098
01:47:28,470 --> 01:47:31,200
therefore state synchronization is very

2099
01:47:30,510 --> 01:47:33,090
very crucial

2100
01:47:31,200 --> 01:47:34,800
typical use cases that are very very

2101
01:47:33,090 --> 01:47:37,260
stateful are in particular gaming use

2102
01:47:34,800 --> 01:47:39,240
cases where you indeed need on good

2103
01:47:37,260 --> 01:47:41,430
state civilization so these are the

2104
01:47:39,240 --> 01:47:43,139
areas and I said we have a couple they

2105
01:47:41,430 --> 01:47:46,650
are reference in the draft you can see

2106
01:47:43,140 --> 01:47:47,910
to ongoing work that we also are

2107
01:47:46,650 --> 01:47:51,900
currently doing the ITF and other

2108
01:47:47,910 --> 01:47:54,510
working groups and not generally we try

2109
01:47:51,900 --> 01:47:56,219
to keep those sections as these are cool

2110
01:47:54,510 --> 01:47:56,550
areas to work on I think we need some

2111
01:47:56,220 --> 01:47:59,130
work

2112
01:47:56,550 --> 01:48:01,590
this in order to move into standardized

2113
01:47:59,130 --> 01:48:04,050
environments and it would be good to

2114
01:48:01,590 --> 01:48:06,300
have a place for this alright so the

2115
01:48:04,050 --> 01:48:08,430
conclusion really is really trying to

2116
01:48:06,300 --> 01:48:11,580
stick to my ten minutes is that the

2117
01:48:08,430 --> 01:48:13,200
trapped positions in evolution and we

2118
01:48:11,580 --> 01:48:15,420
tried to stick this to the app model

2119
01:48:13,200 --> 01:48:17,460
because everybody knows that I should be

2120
01:48:15,420 --> 01:48:18,540
played this story to particular people

2121
01:48:17,460 --> 01:48:20,970
who don't really quite understand but an

2122
01:48:18,540 --> 01:48:22,860
Internet really is with a sense of IP

2123
01:48:20,970 --> 01:48:25,460
packets we played this to teenagers and

2124
01:48:22,860 --> 01:48:27,599
they love this story alright by for them

2125
01:48:25,460 --> 01:48:29,220
the internet or application

2126
01:48:27,600 --> 01:48:31,320
installations so the whole idea that I

2127
01:48:29,220 --> 01:48:32,400
install my private Internet by having an

2128
01:48:31,320 --> 01:48:35,370
application is something that really

2129
01:48:32,400 --> 01:48:37,559
goes done really well and and we also

2130
01:48:35,370 --> 01:48:38,849
like the idea of moving from the mobile

2131
01:48:37,560 --> 01:48:41,250
terminal experience as we know today

2132
01:48:38,850 --> 01:48:43,170
everybody has a smartphone to something

2133
01:48:41,250 --> 01:48:45,900
add in handy disintegrates into

2134
01:48:43,170 --> 01:48:47,460
distributive experiences and that's the

2135
01:48:45,900 --> 01:48:49,110
the reason why we made that leap but

2136
01:48:47,460 --> 01:48:51,600
generally I feel obviously that the

2137
01:48:49,110 --> 01:48:55,259
points also blight the general micro

2138
01:48:51,600 --> 01:48:57,900
service use cases its itself I said we

2139
01:48:55,260 --> 01:48:59,580
interpret available compute resources as

2140
01:48:57,900 --> 01:49:01,740
these peak or micro data centers they

2141
01:48:59,580 --> 01:49:04,680
can be dedicated computer resources in

2142
01:49:01,740 --> 01:49:06,809
the demo we gave this year we played the

2143
01:49:04,680 --> 01:49:08,580
scenario in a entertainment scenario

2144
01:49:06,810 --> 01:49:11,430
hotel where the compute resource was

2145
01:49:08,580 --> 01:49:13,500
provided by the hotel for hotel guests

2146
01:49:11,430 --> 01:49:16,110
so in that case you might really have a

2147
01:49:13,500 --> 01:49:18,150
computer act downstairs right but Pico

2148
01:49:16,110 --> 01:49:20,610
data centers could be home devices it

2149
01:49:18,150 --> 01:49:22,320
could be another user smartphone and be

2150
01:49:20,610 --> 01:49:24,210
also actually in the use case jumped on

2151
01:49:22,320 --> 01:49:26,250
somebody else's smartphone the

2152
01:49:24,210 --> 01:49:27,930
smartphone was plugged in so therefore

2153
01:49:26,250 --> 01:49:28,830
it was a suitable data center if it

2154
01:49:27,930 --> 01:49:30,390
wasn't blocked in

2155
01:49:28,830 --> 01:49:33,080
it wasn't chosen because you don't want

2156
01:49:30,390 --> 01:49:36,810
to jump on somebody who runs on battery

2157
01:49:33,080 --> 01:49:38,340
we believe that the post corner G would

2158
01:49:36,810 --> 01:49:40,200
be a really really good platform to

2159
01:49:38,340 --> 01:49:42,750
actually discuss some of these issues

2160
01:49:40,200 --> 01:49:45,000
bring them together evaluate them but

2161
01:49:42,750 --> 01:49:46,410
also obviously link to ongoing efforts a

2162
01:49:45,000 --> 01:49:47,460
lot of these efforts are ongoing in

2163
01:49:46,410 --> 01:49:49,290
other working groups and therefore

2164
01:49:47,460 --> 01:49:51,750
bringing them together and probably also

2165
01:49:49,290 --> 01:49:53,010
you know get more people involved in the

2166
01:49:51,750 --> 01:49:55,350
discussion is a really really good thing

2167
01:49:53,010 --> 01:49:56,040
some of the comments that I put on the

2168
01:49:55,350 --> 01:49:57,390
list already

2169
01:49:56,040 --> 01:49:58,790
related to that so there were a couple

2170
01:49:57,390 --> 01:50:00,600
of things that I had sent to the list

2171
01:49:58,790 --> 01:50:03,450
the next steps

2172
01:50:00,600 --> 01:50:05,220
and personally I really hope that they

2173
01:50:03,450 --> 01:50:07,440
propose research group is indeed

2174
01:50:05,220 --> 01:50:09,720
approved we plan on doing is to update

2175
01:50:07,440 --> 01:50:10,650
the draft with more information on the

2176
01:50:09,720 --> 01:50:12,840
ongoing

2177
01:50:10,650 --> 01:50:14,070
so be quite clear or what's going on as

2178
01:50:12,840 --> 01:50:16,920
that they are references in but we

2179
01:50:14,070 --> 01:50:18,240
haven't really described in detail but

2180
01:50:16,920 --> 01:50:20,760
also provide an overview of other

2181
01:50:18,240 --> 01:50:22,170
realizations because in the currently we

2182
01:50:20,760 --> 01:50:24,570
are referring to a lot of things that we

2183
01:50:22,170 --> 01:50:26,190
are involved in there's other things and

2184
01:50:24,570 --> 01:50:27,630
also we plan on demonstrating

2185
01:50:26,190 --> 01:50:30,080
realizations maybe at an upcoming

2186
01:50:27,630 --> 01:50:34,640
meeting so people can see these funny

2187
01:50:30,080 --> 01:50:34,640
micro-services bouncing about thank you

2188
01:50:35,140 --> 01:50:41,910
[Applause]

2189
01:50:38,420 --> 01:50:44,520
one question so for the solutioning

2190
01:50:41,910 --> 01:50:47,190
implementation what are the information

2191
01:50:44,520 --> 01:50:52,190
units those functions actually operate

2192
01:50:47,190 --> 01:50:55,200
on a good terminating some application

2193
01:50:52,190 --> 01:50:57,299
so we saw the reference at behalf of the

2194
01:50:55,200 --> 01:50:58,830
draft is to name service function

2195
01:50:57,300 --> 01:51:00,930
training so we actually extend it I'll

2196
01:50:58,830 --> 01:51:02,640
be proposed to extend service function

2197
01:51:00,930 --> 01:51:05,250
change which we saw in the presentation

2198
01:51:02,640 --> 01:51:08,550
before too on entire name basis so you

2199
01:51:05,250 --> 01:51:12,240
issue a URL based requests rather than

2200
01:51:08,550 --> 01:51:14,250
IP voice requests and the the service

2201
01:51:12,240 --> 01:51:15,900
function as was presented in the service

2202
01:51:14,250 --> 01:51:18,690
function training one before it's always

2203
01:51:15,900 --> 01:51:20,670
associated with some form of control we

2204
01:51:18,690 --> 01:51:22,320
don't use a manner control obviously our

2205
01:51:20,670 --> 01:51:24,660
service function changing is defined in

2206
01:51:22,320 --> 01:51:26,759
the application see the application in

2207
01:51:24,660 --> 01:51:30,599
the application design you specify that

2208
01:51:26,760 --> 01:51:31,800
micro chain of you know our PD it's a

2209
01:51:30,600 --> 01:51:33,360
Ryan bear we're also looking at the

2210
01:51:31,800 --> 01:51:35,400
frameworks that automates that and

2211
01:51:33,360 --> 01:51:37,620
therefore essentially constructs for you

2212
01:51:35,400 --> 01:51:40,230
an actual name service chain which is

2213
01:51:37,620 --> 01:51:42,030
then translated internet such as nsh

2214
01:51:40,230 --> 01:51:46,589
which and is pumped into the name

2215
01:51:42,030 --> 01:51:48,450
service function actually receiving or

2216
01:51:46,590 --> 01:51:52,260
sending so what is it is it a flow of

2217
01:51:48,450 --> 01:51:55,800
packets or how does it work the so the

2218
01:51:52,260 --> 01:51:57,900
the draft at the moment outlines the the

2219
01:51:55,800 --> 01:51:59,130
packet is the actual HTTP request so

2220
01:51:57,900 --> 01:52:02,429
it's known on key packet because is that

2221
01:51:59,130 --> 01:52:04,070
the name yeah so so and HTTP at the

2222
01:52:02,430 --> 01:52:07,430
moment is the example for a named

2223
01:52:04,070 --> 01:52:07,429
extension thank you

2224
01:52:15,460 --> 01:52:39,800
okay okay hello everyone this is polio

2225
01:52:37,130 --> 01:52:41,900
from China mobile and I was talking

2226
01:52:39,800 --> 01:52:45,500
about the new draft requirements of

2227
01:52:41,900 --> 01:52:48,379
computing in the network so as we all

2228
01:52:45,500 --> 01:52:49,940
know computing in network becomes a

2229
01:52:48,380 --> 01:52:52,660
nutrient to meeting the needs of

2230
01:52:49,940 --> 01:52:55,400
emerging business what needs to be

2231
01:52:52,660 --> 01:52:58,460
computed and why there are several

2232
01:52:55,400 --> 01:53:01,070
problems need to be considered such as

2233
01:52:58,460 --> 01:53:04,010
the traditional network protocols only

2234
01:53:01,070 --> 01:53:09,009
optimize traffic which can't guarantee

2235
01:53:04,010 --> 01:53:11,570
the latency of packet loss rate and the

2236
01:53:09,010 --> 01:53:14,840
centralization of computing resource is

2237
01:53:11,570 --> 01:53:17,769
not efficient and for the different

2238
01:53:14,840 --> 01:53:21,140
business there are they may need

2239
01:53:17,770 --> 01:53:23,810
different kind of computing and they are

2240
01:53:21,140 --> 01:53:27,370
little interaction among users of

2241
01:53:23,810 --> 01:53:30,850
applications and the networks which

2242
01:53:27,370 --> 01:53:33,769
means that they don't know each other's

2243
01:53:30,850 --> 01:53:36,200
requirement and the capabilities so some

2244
01:53:33,770 --> 01:53:38,420
work has began to consider these issues

2245
01:53:36,200 --> 01:53:42,820
but more comment words to be considered

2246
01:53:38,420 --> 01:53:46,760
and the number one requirement is

2247
01:53:42,820 --> 01:53:49,370
deterministic network abilities which

2248
01:53:46,760 --> 01:53:52,940
include the latency and packet loss rate

2249
01:53:49,370 --> 01:53:56,059
so for the latency it's the concept from

2250
01:53:52,940 --> 01:53:58,309
in time to anthem which means the

2251
01:53:56,060 --> 01:54:01,130
latency is not necessarily the lower the

2252
01:53:58,310 --> 01:54:04,940
better it's just like to size agreement

2253
01:54:01,130 --> 01:54:07,850
and Sacre Edition and for the packet

2254
01:54:04,940 --> 01:54:12,769
loss rate it includes the time bearing

2255
01:54:07,850 --> 01:54:16,400
routing which found the link time very

2256
01:54:12,770 --> 01:54:19,430
regular based on AI and the predicting

2257
01:54:16,400 --> 01:54:22,000
the network performance and there are

2258
01:54:19,430 --> 01:54:25,040
also other technology such as segmented

2259
01:54:22,000 --> 01:54:29,120
transmissions to enhance to achieve

2260
01:54:25,040 --> 01:54:31,250
segmented retransmissions and the number

2261
01:54:29,120 --> 01:54:34,160
two requirement is computing a well

2262
01:54:31,250 --> 01:54:37,730
scheduling in this model commuting in

2263
01:54:34,160 --> 01:54:41,210
sync as a link state and the convenient

2264
01:54:37,730 --> 01:54:43,490
source information is exposed so cutting

2265
01:54:41,210 --> 01:54:46,700
to the business required requests

2266
01:54:43,490 --> 01:54:49,460
dynamic computing power matching is

2267
01:54:46,700 --> 01:54:51,980
carried out based on network status and

2268
01:54:49,460 --> 01:54:54,730
the performance of computing resource to

2269
01:54:51,980 --> 01:54:57,919
achieve optimal user experience and

2270
01:54:54,730 --> 01:55:00,139
network utilization and the number three

2271
01:54:57,920 --> 01:55:04,400
requirement is a function based

2272
01:55:00,140 --> 01:55:06,560
addressing and for the traditionally

2273
01:55:04,400 --> 01:55:10,549
based addressing it might bring some

2274
01:55:06,560 --> 01:55:14,900
problems and which come to current easy

2275
01:55:10,550 --> 01:55:17,380
they such as the latency so in the new

2276
01:55:14,900 --> 01:55:21,170
function based at addressing the

2277
01:55:17,380 --> 01:55:24,350
application components destructed to on

2278
01:55:21,170 --> 01:55:27,410
the server side are distributed under

2279
01:55:24,350 --> 01:55:29,690
cloud platform and the business logic in

2280
01:55:27,410 --> 01:55:32,210
the server is transferred to the client

2281
01:55:29,690 --> 01:55:35,419
side and the kite only needs to care

2282
01:55:32,210 --> 01:55:37,520
about a computing function itself so as

2283
01:55:35,420 --> 01:55:40,400
to realize that they function as their

2284
01:55:37,520 --> 01:55:44,570
service and the last requirement is

2285
01:55:40,400 --> 01:55:48,080
network Brown who ability and so in

2286
01:55:44,570 --> 01:55:49,670
network programming and the resource of

2287
01:55:48,080 --> 01:55:53,720
network and the computing information

2288
01:55:49,670 --> 01:55:58,400
can be transferred by network to users

2289
01:55:53,720 --> 01:56:00,260
so L to the requirements of the

2290
01:55:58,400 --> 01:56:03,200
information transmitted by user to

2291
01:56:00,260 --> 01:56:05,960
network so the network can configure

2292
01:56:03,200 --> 01:56:08,120
parameters according to the user users

2293
01:56:05,960 --> 01:56:10,130
needs and the users transfer

2294
01:56:08,120 --> 01:56:12,769
requirements based on network

2295
01:56:10,130 --> 01:56:16,670
abilities which could efficiently

2296
01:56:12,770 --> 01:56:19,130
support the future application so in the

2297
01:56:16,670 --> 01:56:22,850
next steps more requirements might need

2298
01:56:19,130 --> 01:56:26,420
to be analyzed considering the computing

2299
01:56:22,850 --> 01:56:30,200
capability and some of like discussion

2300
01:56:26,420 --> 01:56:37,180
about the related technologies may need

2301
01:56:30,200 --> 01:56:37,179
also need and thanks any other comments

2302
01:56:39,750 --> 01:56:45,910
so actually this is just a little bit of

2303
01:56:42,010 --> 01:56:50,650
historical stuff on it the original spec

2304
01:56:45,910 --> 01:56:52,990
for is is had a per node cost of

2305
01:56:50,650 --> 01:56:55,210
traversing that node which was called

2306
01:56:52,990 --> 01:56:57,730
the hippity cost so your packers to go

2307
01:56:55,210 --> 01:57:00,370
hop hippity hop hippity hop hippity hop

2308
01:56:57,730 --> 01:57:02,620
and back then we took it out as a

2309
01:57:00,370 --> 01:57:04,570
gratuitous complexity because there

2310
01:57:02,620 --> 01:57:06,519
there wasn't much difference between the

2311
01:57:04,570 --> 01:57:08,410
costs of forwarding a packet on one node

2312
01:57:06,520 --> 01:57:15,450
versus another node it may be time to

2313
01:57:08,410 --> 01:57:19,540
bring that back okay thank you very much

2314
01:57:15,450 --> 01:57:22,420
so we have just a few more minutes so we

2315
01:57:19,540 --> 01:57:26,260
intend to have a virtual interim

2316
01:57:22,420 --> 01:57:28,630
probably in early October we'll do an

2317
01:57:26,260 --> 01:57:31,600
email poll and we would like to address

2318
01:57:28,630 --> 01:57:34,840
probably the last version of the Charter

2319
01:57:31,600 --> 01:57:36,360
and hopefully a set of milestones I get

2320
01:57:34,840 --> 01:57:41,050
the message from Dirk

2321
01:57:36,360 --> 01:57:42,580
the first Dirk Dirk k about having

2322
01:57:41,050 --> 01:57:45,610
milestone while you're still it proposed

2323
01:57:42,580 --> 01:57:48,280
that proposed RG but we kind of like the

2324
01:57:45,610 --> 01:57:51,130
idea of focusing the work we're

2325
01:57:48,280 --> 01:57:53,650
obviously are going to meet at ITF 106

2326
01:57:51,130 --> 01:57:55,960
which will be our third meeting and

2327
01:57:53,650 --> 01:57:59,379
hopefully we'll be accepted before that

2328
01:57:55,960 --> 01:58:00,970
and thank you so very much for everybody

2329
01:57:59,380 --> 01:58:03,070
who came and for all your support

2330
01:58:00,970 --> 01:58:05,710
actually I think we're calling

2331
01:58:03,070 --> 01:58:08,440
themselves the gems so that the Jeffrey

2332
01:58:05,710 --> 01:58:10,480
Eve and I are really happy of how this

2333
01:58:08,440 --> 01:58:13,500
is going and we really thank you for all

2334
01:58:10,480 --> 01:58:13,500
your great work thank you

