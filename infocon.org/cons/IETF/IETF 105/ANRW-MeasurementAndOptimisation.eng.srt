1
00:00:04,560 --> 00:00:20,759
I will

2
00:00:14,059 --> 00:00:23,460
Murthy you heard me Java okay we're

3
00:00:20,760 --> 00:00:31,850
gonna start again in the moment so come

4
00:00:23,460 --> 00:00:31,850
back in phases forward

5
00:00:37,110 --> 00:00:41,100
[Laughter]

6
00:00:42,350 --> 00:00:50,339
okay we should start yeah alright the

7
00:00:47,730 --> 00:00:52,169
first talk we're about to have a

8
00:00:50,339 --> 00:00:54,659
measurement session now which will be

9
00:00:52,170 --> 00:00:57,469
there's some three very interesting

10
00:00:54,659 --> 00:01:00,359
paper so I I commend you to these papers

11
00:00:57,469 --> 00:01:01,710
and I wanted to mention that those who

12
00:01:00,359 --> 00:01:04,140
are still here for the whole week we

13
00:01:01,710 --> 00:01:06,900
also have the map measurement research

14
00:01:04,140 --> 00:01:09,149
working group and they made on Friday so

15
00:01:06,900 --> 00:01:11,340
people who are here giving talks if you

16
00:01:09,149 --> 00:01:12,560
can tune into map RJ and vice versa this

17
00:01:11,340 --> 00:01:16,500
is very good

18
00:01:12,560 --> 00:01:18,869
okay so the first talk about Allison

19
00:01:16,500 --> 00:01:22,460
Menken by the way the first talk is

20
00:01:18,869 --> 00:01:26,430
called what can you learn from an IP and

21
00:01:22,460 --> 00:01:29,579
the papers by similar and patil and

22
00:01:26,430 --> 00:01:33,630
nikita Borissov cynllun is a first-year

23
00:01:29,579 --> 00:01:35,820
graduate student at you are UIUC nikita

24
00:01:33,630 --> 00:01:39,750
Borissov the key here is they on the

25
00:01:35,820 --> 00:01:41,639
faculty and cimarron mentioned that he

26
00:01:39,750 --> 00:01:44,609
would consider an internship if people

27
00:01:41,640 --> 00:01:46,530
wanna if people love this paper anyway

28
00:01:44,609 --> 00:01:51,179
so they keyed it over to you take it

29
00:01:46,530 --> 00:01:53,219
away yes unfortunately Simran was hoping

30
00:01:51,179 --> 00:01:56,789
to come present this talk but she was

31
00:01:53,219 --> 00:02:00,960
just not able to get her visa in time so

32
00:01:56,789 --> 00:02:03,359
I'm gonna do it in her stead so I want

33
00:02:00,960 --> 00:02:05,609
to talk to you alone about what can be

34
00:02:03,359 --> 00:02:08,490
learned from an IP address and just set

35
00:02:05,609 --> 00:02:11,910
the context if you think back to the bad

36
00:02:08,490 --> 00:02:15,720
old days of about two decades ago when

37
00:02:11,910 --> 00:02:18,270
we browse the web in using plain text

38
00:02:15,720 --> 00:02:20,400
HTTP so

39
00:02:18,270 --> 00:02:22,560
anybody who can observe your network

40
00:02:20,400 --> 00:02:25,110
would be able to see everything you do

41
00:02:22,560 --> 00:02:27,750
in online to be able to see the or else

42
00:02:25,110 --> 00:02:32,850
you're going to the contents of the web

43
00:02:27,750 --> 00:02:37,110
pages everything we've come a long way

44
00:02:32,850 --> 00:02:40,160
since then so today a vast majority of

45
00:02:37,110 --> 00:02:44,940
all web traffic is encrypted using TLS

46
00:02:40,160 --> 00:02:47,220
so the all of HTTP messages that are

47
00:02:44,940 --> 00:02:50,640
sent by my browser are typically

48
00:02:47,220 --> 00:02:53,640
encrypted by HTTPS and therefore not

49
00:02:50,640 --> 00:02:55,279
available to the adversary but if you

50
00:02:53,640 --> 00:02:59,910
look at what a web browser does before

51
00:02:55,280 --> 00:03:02,490
it sends an HTTP request it sends a

52
00:02:59,910 --> 00:03:05,310
couple of other messages it performs a

53
00:03:02,490 --> 00:03:08,160
DNS query to figure out the IP address

54
00:03:05,310 --> 00:03:12,720
of a web server and then it performs a

55
00:03:08,160 --> 00:03:15,060
TLS handshake to establish secure keys

56
00:03:12,720 --> 00:03:18,480
that it uses to encrypt the rest of the

57
00:03:15,060 --> 00:03:21,600
connection and if you look at the

58
00:03:18,480 --> 00:03:24,450
transcript of this conversation you will

59
00:03:21,600 --> 00:03:27,390
notice that the domain name that you're

60
00:03:24,450 --> 00:03:30,450
going to actually appears four different

61
00:03:27,390 --> 00:03:34,140
times in this transcript in plaintext in

62
00:03:30,450 --> 00:03:37,200
the DNS query and in DNS response in the

63
00:03:34,140 --> 00:03:38,640
server name indicator extension in the

64
00:03:37,200 --> 00:03:44,390
client hello and in the server

65
00:03:38,640 --> 00:03:53,119
certificate as the common name so an

66
00:03:44,390 --> 00:03:55,739
adversary an adversary isn't able to

67
00:03:53,120 --> 00:03:57,360
tell what URL you're going so isn't able

68
00:03:55,740 --> 00:04:00,000
to see the webpage you're referring to

69
00:03:57,360 --> 00:04:04,680
but is able to tell what domain name

70
00:04:00,000 --> 00:04:07,860
you're connecting that said there's a

71
00:04:04,680 --> 00:04:11,630
lot of work going on here and elsewhere

72
00:04:07,860 --> 00:04:15,030
to try to remove some of this metadata

73
00:04:11,630 --> 00:04:17,969
so in CLS one three the server

74
00:04:15,030 --> 00:04:21,298
certificate is now encrypted so if you

75
00:04:17,970 --> 00:04:24,930
use one three that one domain name

76
00:04:21,298 --> 00:04:27,989
instance is gone if you're using an

77
00:04:24,930 --> 00:04:30,360
encrypted DNS protocol such as DNS over

78
00:04:27,990 --> 00:04:31,790
HTTP or overt COS like we've heard

79
00:04:30,360 --> 00:04:35,220
earlier today

80
00:04:31,790 --> 00:04:38,990
the DNS requests and responses are

81
00:04:35,220 --> 00:04:41,340
encrypted and finally the very lost

82
00:04:38,990 --> 00:04:43,920
plaintext mention of the domain name is

83
00:04:41,340 --> 00:04:46,200
in the server name indicator and there's

84
00:04:43,920 --> 00:04:50,420
a draft working group trying to develop

85
00:04:46,200 --> 00:04:53,700
this encrypted S&I extension and so

86
00:04:50,420 --> 00:04:57,960
hopefully soon we can get to a world

87
00:04:53,700 --> 00:05:02,490
where all of the plaintext domain name

88
00:04:57,960 --> 00:05:04,680
mentions are gone the only thing that I

89
00:05:02,490 --> 00:05:09,000
verse 3 will see is what IP address

90
00:05:04,680 --> 00:05:11,640
you're connecting to so first I wanted

91
00:05:09,000 --> 00:05:14,970
to mention just very briefly why I think

92
00:05:11,640 --> 00:05:17,460
it's important that the domain name be

93
00:05:14,970 --> 00:05:20,600
private a lot of times when you go to

94
00:05:17,460 --> 00:05:22,830
Google or Amazon or Facebook it's not so

95
00:05:20,600 --> 00:05:25,830
exciting what the meaning you're using

96
00:05:22,830 --> 00:05:28,940
but a number of domain names can be

97
00:05:25,830 --> 00:05:32,039
quite indicative of various private

98
00:05:28,940 --> 00:05:36,060
attributes such as your sexuality your

99
00:05:32,040 --> 00:05:40,740
religion your interest your drug

100
00:05:36,060 --> 00:05:42,600
addiction and so forth so overall I

101
00:05:40,740 --> 00:05:44,940
would claim it's a good thing that we're

102
00:05:42,600 --> 00:05:50,900
trying to protect this information from

103
00:05:44,940 --> 00:05:50,900
Network observers but as I said before

104
00:06:04,070 --> 00:06:12,480
you write the address so what we wanted

105
00:06:09,960 --> 00:06:15,390
to do is try to understand what business

106
00:06:12,480 --> 00:06:16,830
IP address their laboratory and so we've

107
00:06:15,390 --> 00:06:20,099
performed a measurements that we've

108
00:06:16,830 --> 00:06:23,729
started out with the top 1 million sites

109
00:06:20,100 --> 00:06:25,290
as listed by Alexa and we used a tool

110
00:06:23,730 --> 00:06:28,010
called my to develop at University of

111
00:06:25,290 --> 00:06:30,900
Illinois to crawl these web sites and

112
00:06:28,010 --> 00:06:34,620
get all of the resources that are

113
00:06:30,900 --> 00:06:37,530
involved in showing these web pages so

114
00:06:34,620 --> 00:06:41,250
we were able to reach something like 944

115
00:06:37,530 --> 00:06:44,400
thousand sites and the sites requests it

116
00:06:41,250 --> 00:06:47,009
over 90 million different all

117
00:06:44,400 --> 00:06:49,698
jux so about a hundred or so per site

118
00:06:47,009 --> 00:06:51,090
these are will be three years images

119
00:06:49,699 --> 00:06:54,150
iframes

120
00:06:51,090 --> 00:06:56,489
scratch style sheets and so forth you

121
00:06:54,150 --> 00:06:59,638
can see a pie chart of what the various

122
00:06:56,490 --> 00:07:03,139
object types are then we extracted all

123
00:06:59,639 --> 00:07:07,530
the domain names that are used in these

124
00:07:03,139 --> 00:07:11,220
objects and use them to use the bulk DNS

125
00:07:07,530 --> 00:07:12,599
lookup tool z DNS to get the mapping

126
00:07:11,220 --> 00:07:16,289
from these domain names to IP addresses

127
00:07:12,600 --> 00:07:18,360
and then back from the IP addresses to

128
00:07:16,289 --> 00:07:21,060
the main name using University on this

129
00:07:18,360 --> 00:07:25,680
so out of these ninety million objects

130
00:07:21,060 --> 00:07:27,330
about 1.8 million domains were used we

131
00:07:25,680 --> 00:07:30,210
were able to look up almost all of them

132
00:07:27,330 --> 00:07:32,698
something figure out 95 percent and we

133
00:07:30,210 --> 00:07:35,340
got a total about seven hundred and

134
00:07:32,699 --> 00:07:41,070
forty thousand distinct IPS so many

135
00:07:35,340 --> 00:07:45,508
domains map to single set of ID's now

136
00:07:41,070 --> 00:07:47,550
the first question is what can an

137
00:07:45,509 --> 00:07:50,910
average say find out if they just use

138
00:07:47,550 --> 00:07:53,280
reverse DNS so reverse DNS is obviously

139
00:07:50,910 --> 00:07:56,699
available if you see that the address I

140
00:07:53,280 --> 00:08:00,599
can look look it up and try to see if I

141
00:07:56,699 --> 00:08:02,490
get a useful domain name back and the

142
00:08:00,599 --> 00:08:05,310
vast majority of the cases this is not

143
00:08:02,490 --> 00:08:07,260
give you the looked up domain name and

144
00:08:05,310 --> 00:08:08,729
about one percent of the cases you do

145
00:08:07,260 --> 00:08:11,310
get the domain name that the user looked

146
00:08:08,729 --> 00:08:13,800
up in about three or four more percents

147
00:08:11,310 --> 00:08:17,490
you get something that is in the same

148
00:08:13,800 --> 00:08:19,979
kind of public suffix so you would get

149
00:08:17,490 --> 00:08:21,900
some server one facebook.com instead of

150
00:08:19,979 --> 00:08:25,110
facebook.com but you get some general

151
00:08:21,900 --> 00:08:26,549
idea as to what's going on but in 95

152
00:08:25,110 --> 00:08:29,580
percent of the cases you have to get a

153
00:08:26,550 --> 00:08:32,250
DNS reverse DNS reply that doesn't match

154
00:08:29,580 --> 00:08:36,120
your look up at all or you don't get any

155
00:08:32,250 --> 00:08:37,940
reply for reverse DNS so we started

156
00:08:36,120 --> 00:08:40,979
thinking about a different adversary an

157
00:08:37,940 --> 00:08:45,360
adversary that does basically what we

158
00:08:40,979 --> 00:08:47,459
did not our sorry that goes and crawls a

159
00:08:45,360 --> 00:08:50,790
bunch of websites to try to get some

160
00:08:47,459 --> 00:08:53,160
candidate domain names then performs a

161
00:08:50,790 --> 00:08:55,730
forward mapping on these candidate

162
00:08:53,160 --> 00:08:58,209
domain names to get a list of IPs and

163
00:08:55,730 --> 00:09:00,940
then when

164
00:08:58,210 --> 00:09:02,920
they see an IP requested by a user they

165
00:09:00,940 --> 00:09:05,580
use these candidate mappings to figure

166
00:09:02,920 --> 00:09:08,170
out what the main stains these web be

167
00:09:05,580 --> 00:09:10,930
this reverse process relies on

168
00:09:08,170 --> 00:09:14,229
assumption that the users domain is

169
00:09:10,930 --> 00:09:16,000
among the list that was looked up and so

170
00:09:14,230 --> 00:09:19,120
in some cases it will fail but it will

171
00:09:16,000 --> 00:09:21,940
give you a good starting as an adversary

172
00:09:19,120 --> 00:09:23,440
so the database that the adversary's

173
00:09:21,940 --> 00:09:24,790
does is the database that we collect

174
00:09:23,440 --> 00:09:26,560
they which is matched a bunch of the

175
00:09:24,790 --> 00:09:29,410
mange to a bunch of IPs and though it's

176
00:09:26,560 --> 00:09:31,899
very important here is that different

177
00:09:29,410 --> 00:09:35,500
domains can map to more than one IP and

178
00:09:31,899 --> 00:09:38,620
an IP e can be mapped to by more than a

179
00:09:35,500 --> 00:09:41,620
single domain and so we think about the

180
00:09:38,620 --> 00:09:45,220
success of this type of adversary in

181
00:09:41,620 --> 00:09:48,610
trying to reverse what a domain name was

182
00:09:45,220 --> 00:09:52,149
looked up we have to think about the

183
00:09:48,610 --> 00:09:54,010
what I call the anonymity set of each IP

184
00:09:52,149 --> 00:09:56,260
address which is just the list of domain

185
00:09:54,010 --> 00:09:59,230
names that map to it they in degree in

186
00:09:56,260 --> 00:10:02,410
some sense the in neighborhood of the IP

187
00:09:59,230 --> 00:10:04,209
on this graph so IP 2 in this graph has

188
00:10:02,410 --> 00:10:07,810
three domain names that map to it well

189
00:10:04,209 --> 00:10:11,439
as IP 5 just has a single one and so

190
00:10:07,810 --> 00:10:15,189
this is the result of looking at the IP

191
00:10:11,440 --> 00:10:17,860
anonymity sets in our data set about

192
00:10:15,190 --> 00:10:22,270
note there's a log scale on the y-axis

193
00:10:17,860 --> 00:10:24,010
here almost half of all IP address in

194
00:10:22,270 --> 00:10:27,150
our data set I have just a single domain

195
00:10:24,010 --> 00:10:30,640
name that could map to them in our set

196
00:10:27,150 --> 00:10:34,270
which means that under our adversary

197
00:10:30,640 --> 00:10:36,400
assumption the DNS encryption doesn't

198
00:10:34,270 --> 00:10:38,230
actually give us privacy of the domain

199
00:10:36,400 --> 00:10:43,180
name because only a single domain name

200
00:10:38,230 --> 00:10:45,370
maps to that IP now if our adversary is

201
00:10:43,180 --> 00:10:47,529
actually trying to figure out what

202
00:10:45,370 --> 00:10:49,300
websites you're visiting which is that

203
00:10:47,529 --> 00:10:51,430
maybe the higher-level caste that's

204
00:10:49,300 --> 00:10:54,729
interesting this doesn't tell the whole

205
00:10:51,430 --> 00:10:58,479
story for example it could be an IP

206
00:10:54,730 --> 00:11:02,829
address like IP 5 here that map's back

207
00:10:58,480 --> 00:11:06,130
to only a single domain but is used in a

208
00:11:02,829 --> 00:11:08,560
large number of websites as an example

209
00:11:06,130 --> 00:11:11,500
there's an IP address an idea set that

210
00:11:08,560 --> 00:11:11,979
only now spouts to a single domain names

211
00:11:11,500 --> 00:11:15,280
that's the

212
00:11:11,980 --> 00:11:18,550
double-quick net but this domain name is

213
00:11:15,280 --> 00:11:20,980
actually referenced over a hundred

214
00:11:18,550 --> 00:11:22,420
thousand sites in their sample so seeing

215
00:11:20,980 --> 00:11:24,000
this IP address doesn't tell you very

216
00:11:22,420 --> 00:11:27,010
much

217
00:11:24,000 --> 00:11:29,050
instead we want to see are their IP

218
00:11:27,010 --> 00:11:32,439
addresses that show up for a single

219
00:11:29,050 --> 00:11:36,130
website only a single site on our list

220
00:11:32,440 --> 00:11:38,650
references it and turns out that 68% of

221
00:11:36,130 --> 00:11:40,360
the IPS that we see are have this

222
00:11:38,650 --> 00:11:44,290
property they only show up for single

223
00:11:40,360 --> 00:11:47,500
website 43 percent of the web sites have

224
00:11:44,290 --> 00:11:50,500
at least one resource that has this

225
00:11:47,500 --> 00:11:52,360
unique property and in fact for almost

226
00:11:50,500 --> 00:11:55,090
forty percent of the sites their friends

227
00:11:52,360 --> 00:11:57,460
page has this property no other web site

228
00:11:55,090 --> 00:12:04,960
in the top 1 million has the same ip as

229
00:11:57,460 --> 00:12:07,780
the front page of us the we're about the

230
00:12:04,960 --> 00:12:09,880
other 60 percent of this sites well if

231
00:12:07,780 --> 00:12:13,720
you look at when somebody loads a

232
00:12:09,880 --> 00:12:15,490
website they go to make a number of

233
00:12:13,720 --> 00:12:19,120
connections to a number of servers so

234
00:12:15,490 --> 00:12:21,540
this is a fraction of a trace of loading

235
00:12:19,120 --> 00:12:24,820
the web page of the fairmont hotel

236
00:12:21,540 --> 00:12:26,949
and you see that there's connections

237
00:12:24,820 --> 00:12:29,350
made to a bunch of different IP

238
00:12:26,950 --> 00:12:32,470
addresses corresponding to a bunch of

239
00:12:29,350 --> 00:12:36,580
different domains and adversary does not

240
00:12:32,470 --> 00:12:38,950
see the urls does not see the domain

241
00:12:36,580 --> 00:12:42,130
names that are being connected assuming

242
00:12:38,950 --> 00:12:47,680
we get to this ESN i world but does see

243
00:12:42,130 --> 00:12:50,500
this list of IP addresses the question

244
00:12:47,680 --> 00:12:52,750
is how can this adversary map back to a

245
00:12:50,500 --> 00:12:55,060
website that turns out this could be a

246
00:12:52,750 --> 00:12:56,230
bit of a complex task because every time

247
00:12:55,060 --> 00:12:59,530
you load a site you might get a

248
00:12:56,230 --> 00:13:01,330
different set of domains every time you

249
00:12:59,530 --> 00:13:03,640
get a domain you might choose a

250
00:13:01,330 --> 00:13:06,610
different IP through GMS round robin and

251
00:13:03,640 --> 00:13:08,680
it might be other complexities so we

252
00:13:06,610 --> 00:13:12,610
don't precisely answer the question of

253
00:13:08,680 --> 00:13:15,310
how this mapping back can be done in our

254
00:13:12,610 --> 00:13:17,860
paper instead we do a simple proxy we

255
00:13:15,310 --> 00:13:20,560
try to say for a given site what is all

256
00:13:17,860 --> 00:13:22,240
the IPS that could be contacted from all

257
00:13:20,560 --> 00:13:25,689
the domains that are in our set so we

258
00:13:22,240 --> 00:13:28,960
consider this IP set corresponding to e

259
00:13:25,690 --> 00:13:31,270
site and the two sides have different IP

260
00:13:28,960 --> 00:13:35,110
sets then there is at least some chance

261
00:13:31,270 --> 00:13:39,250
that you could distinguish them based on

262
00:13:35,110 --> 00:13:42,940
their page load fingerprints and turns

263
00:13:39,250 --> 00:13:45,730
out that almost every website has a

264
00:13:42,940 --> 00:13:47,320
distinct IP set you know actually there

265
00:13:45,730 --> 00:13:52,240
are a few large clusters but for the

266
00:13:47,320 --> 00:13:53,800
most part every site is unique one

267
00:13:52,240 --> 00:13:56,920
question you might ask yourself is why

268
00:13:53,800 --> 00:13:59,920
is this the case when we all know that

269
00:13:56,920 --> 00:14:02,979
some large fraction of the web is now

270
00:13:59,920 --> 00:14:05,110
served by CDNs right shouldn't there be

271
00:14:02,980 --> 00:14:08,470
a lot of convergence of sites and

272
00:14:05,110 --> 00:14:15,520
objects to a single place and turns out

273
00:14:08,470 --> 00:14:17,740
that CEOs generally assign different IP

274
00:14:15,520 --> 00:14:19,030
addresses to different domain names not

275
00:14:17,740 --> 00:14:22,090
other than necessarily in a one-to-one

276
00:14:19,030 --> 00:14:24,730
fashion but they make use of large IP

277
00:14:22,090 --> 00:14:27,310
address spaces so for example we get

278
00:14:24,730 --> 00:14:30,070
some quick analysis of CloudFlare they

279
00:14:27,310 --> 00:14:31,989
have about 12 percent of our domains or

280
00:14:30,070 --> 00:14:36,100
five Flair domains in our data set

281
00:14:31,990 --> 00:14:38,010
so 200,000 domains but these now 291

282
00:14:36,100 --> 00:14:40,840
thousand different IP addresses

283
00:14:38,010 --> 00:14:44,140
including 3 percent of all the web pages

284
00:14:40,840 --> 00:14:46,210
that have these unique front pages right

285
00:14:44,140 --> 00:14:47,920
so this is something that the way the

286
00:14:46,210 --> 00:14:51,790
CloudFlare and other studios are

287
00:14:47,920 --> 00:14:54,670
configured right now they are not

288
00:14:51,790 --> 00:14:57,819
providing any privacy of the IP headers

289
00:14:54,670 --> 00:14:59,640
they return from the point of view will

290
00:14:57,820 --> 00:15:03,400
try and identify what they mean it is

291
00:14:59,640 --> 00:15:08,740
but in theory this could change so let

292
00:15:03,400 --> 00:15:10,750
me quickly sum up the I think it is

293
00:15:08,740 --> 00:15:14,680
exciting that we're now moving to the

294
00:15:10,750 --> 00:15:17,500
place where the DNS privacy could happen

295
00:15:14,680 --> 00:15:19,180
on the other hand within the context of

296
00:15:17,500 --> 00:15:21,010
web browsing against an adversary who

297
00:15:19,180 --> 00:15:22,839
has a pretty good idea of a set a

298
00:15:21,010 --> 00:15:24,790
website you might be visiting even if

299
00:15:22,839 --> 00:15:27,130
this set is quite large million sites

300
00:15:24,790 --> 00:15:32,680
you've got very limited privacy

301
00:15:27,130 --> 00:15:36,310
protection from CMS privacy and so I'll

302
00:15:32,680 --> 00:15:39,370
give you some really quick call outs of

303
00:15:36,310 --> 00:15:42,310
our main numerical results

304
00:15:39,370 --> 00:15:45,280
and our final conclusion is that it may

305
00:15:42,310 --> 00:15:47,920
be possible to change this but it will

306
00:15:45,280 --> 00:15:49,990
require a change in how the web hosting

307
00:15:47,920 --> 00:15:51,990
infrastructure and especially content

308
00:15:49,990 --> 00:16:00,070
distribution networks are structured

309
00:15:51,990 --> 00:16:08,230
thank you very much you take a little

310
00:16:00,070 --> 00:16:11,410
time for questions so you talked about

311
00:16:08,230 --> 00:16:13,600
CD ends right so if I do a query in

312
00:16:11,410 --> 00:16:16,030
Germany for a website and you do it

313
00:16:13,600 --> 00:16:18,370
wherever you are you we get most likely

314
00:16:16,030 --> 00:16:22,600
the redirected but the microphone is off

315
00:16:18,370 --> 00:16:25,390
sorry okay huh

316
00:16:22,600 --> 00:16:27,610
closer to the mic okay sorry and so you

317
00:16:25,390 --> 00:16:29,530
talk about CD ends right so if I do a

318
00:16:27,610 --> 00:16:31,270
query in Germany I get most likely

319
00:16:29,530 --> 00:16:33,730
redirected to a different IP address

320
00:16:31,270 --> 00:16:38,890
than you do in the US or where are you

321
00:16:33,730 --> 00:16:41,980
from right so yes that you're able to

322
00:16:38,890 --> 00:16:43,780
collect these IP mappings from a vantage

323
00:16:41,980 --> 00:16:47,010
point that's close to the vantage point

324
00:16:43,780 --> 00:16:49,959
that the client know that said it takes

325
00:16:47,010 --> 00:16:52,330
it took me about two hours to look up

326
00:16:49,960 --> 00:16:54,700
the 1.8 million domain names use the DNS

327
00:16:52,330 --> 00:16:56,110
so I think it's not not that hard we

328
00:16:54,700 --> 00:17:00,190
write that you need to be able to

329
00:16:56,110 --> 00:17:04,089
localize this you need to do a / / what

330
00:17:00,190 --> 00:17:06,459
we do know whatever okay I mean one of

331
00:17:04,089 --> 00:17:09,189
the things I should say is that a common

332
00:17:06,459 --> 00:17:11,530
adversary that people think about from

333
00:17:09,190 --> 00:17:15,310
in this context is your ISP in fact

334
00:17:11,530 --> 00:17:18,490
there's been cases where is fees do

335
00:17:15,310 --> 00:17:20,379
traffic analysis of your web traffic to

336
00:17:18,490 --> 00:17:22,540
try to insert ads into your

337
00:17:20,380 --> 00:17:26,890
communication there's been a number of

338
00:17:22,540 --> 00:17:28,659
places where that's that has happened hi

339
00:17:26,890 --> 00:17:30,670
Nikita Dave Lanka

340
00:17:28,660 --> 00:17:32,500
I thought the part of your work about

341
00:17:30,670 --> 00:17:34,200
the fingerprinting about the multiple

342
00:17:32,500 --> 00:17:37,540
places people go was super interesting

343
00:17:34,200 --> 00:17:38,950
and then the comment I have about going

344
00:17:37,540 --> 00:17:40,840
forward about thinking what we can do in

345
00:17:38,950 --> 00:17:43,720
the future here I see you only use these

346
00:17:40,840 --> 00:17:48,100
really small IP addresses that have like

347
00:17:43,720 --> 00:17:50,140
three dots in them or the the the what

348
00:17:48,100 --> 00:17:53,230
we measure is there about two and a half

349
00:17:50,140 --> 00:17:55,630
billion of these small IP addresses the

350
00:17:53,230 --> 00:17:58,330
old ones used in the world today but we

351
00:17:55,630 --> 00:18:00,580
see that many v6 addresses every day so

352
00:17:58,330 --> 00:18:03,309
I would love to see this this study done

353
00:18:00,580 --> 00:18:05,980
on b6 because in v6 you have a lot of

354
00:18:03,309 --> 00:18:08,470
Liberty as a service provider and as a

355
00:18:05,980 --> 00:18:10,660
client to change the prefix length at

356
00:18:08,470 --> 00:18:12,010
which you use the address and also of

357
00:18:10,660 --> 00:18:15,309
course to change the address on every

358
00:18:12,010 --> 00:18:17,169
single thing you do so me as a v6 client

359
00:18:15,309 --> 00:18:19,299
I could use a different address for

360
00:18:17,169 --> 00:18:21,910
every different site I connect to so you

361
00:18:19,299 --> 00:18:24,970
couldn't correlate me going to those

362
00:18:21,910 --> 00:18:27,040
fingerprinted sites and also services

363
00:18:24,970 --> 00:18:28,960
could get a lot more liberal about how

364
00:18:27,040 --> 00:18:31,540
they choose the address on the other

365
00:18:28,960 --> 00:18:33,370
side and so that's a place we could go

366
00:18:31,540 --> 00:18:34,960
with this kind of stuff yeah that's a

367
00:18:33,370 --> 00:18:37,120
very good point was we only studied two

368
00:18:34,960 --> 00:18:38,620
before but v6 could make this a lot

369
00:18:37,120 --> 00:18:42,040
better or a lot worse she could

370
00:18:38,620 --> 00:18:44,350
obviously there's no reason for in v6

371
00:18:42,040 --> 00:18:46,450
for any two domain names to map to the

372
00:18:44,350 --> 00:18:51,159
same IP address if you didn't want to do

373
00:18:46,450 --> 00:18:55,110
that um Spencer Dawkins thank you for

374
00:18:51,160 --> 00:18:58,500
doing this work it's very relevant to my

375
00:18:55,110 --> 00:19:03,000
previous role which I am no longer doing

376
00:18:58,500 --> 00:19:05,500
but I did want to ask on your last slide

377
00:19:03,000 --> 00:19:08,580
when you were talking about normalizing

378
00:19:05,500 --> 00:19:12,990
IP addresses is yes that's something

379
00:19:08,580 --> 00:19:16,330
that would is that something that would

380
00:19:12,990 --> 00:19:20,770
you might expect would be done in the

381
00:19:16,330 --> 00:19:22,540
same way by everybody is that do you

382
00:19:20,770 --> 00:19:39,610
think that would be done in the same way

383
00:19:22,540 --> 00:19:41,260
by everyone if I know my actually

384
00:19:39,610 --> 00:19:44,199
normalizing the IP addresses that get

385
00:19:41,260 --> 00:19:46,179
returned from VMs right so when they

386
00:19:44,200 --> 00:19:48,340
return their DMS results they could

387
00:19:46,179 --> 00:19:51,070
either return you a random addresses

388
00:19:48,340 --> 00:19:54,220
within their space or they could just

389
00:19:51,070 --> 00:19:56,710
send everybody to one one one one right

390
00:19:54,220 --> 00:19:58,360
I mean I'm told collectively that quite

391
00:19:56,710 --> 00:20:00,040
won't quite work but something very

392
00:19:58,360 --> 00:20:01,418
close to that an epsilon away from that

393
00:20:00,040 --> 00:20:03,639
would work for their infrastructure

394
00:20:01,419 --> 00:20:06,870
thank you for helping me understand this

395
00:20:03,640 --> 00:20:06,870
that last line

396
00:20:07,100 --> 00:20:11,270
larger yet this is really cool and

397
00:20:09,590 --> 00:20:15,889
really sort of depressing at the same

398
00:20:11,270 --> 00:20:17,270
time I probably at the same reaction at

399
00:20:15,890 --> 00:20:18,980
the a fad that's like you know is it

400
00:20:17,270 --> 00:20:21,110
really only the city ends that that can

401
00:20:18,980 --> 00:20:22,580
do something here or would be six make

402
00:20:21,110 --> 00:20:23,750
it better away is there something that

403
00:20:22,580 --> 00:20:25,699
the clients could do right could you

404
00:20:23,750 --> 00:20:27,020
like poison the lookups that you did you

405
00:20:25,700 --> 00:20:29,240
do for website could you throw some

406
00:20:27,020 --> 00:20:31,040
garbage in there is there anything more

407
00:20:29,240 --> 00:20:33,380
that we can do that without like needing

408
00:20:31,040 --> 00:20:34,909
to wait for the CD ends yeah I think

409
00:20:33,380 --> 00:20:36,710
it's possible the client could use

410
00:20:34,910 --> 00:20:38,810
something like this so you could in

411
00:20:36,710 --> 00:20:41,180
theory if you can detect for example

412
00:20:38,810 --> 00:20:42,860
once again a cloth or IP address you can

413
00:20:41,180 --> 00:20:44,420
actually do something that's akin to

414
00:20:42,860 --> 00:20:46,370
what's called the main fronting and just

415
00:20:44,420 --> 00:20:48,320
pick a different IP address in a quieter

416
00:20:46,370 --> 00:20:50,689
space as long you send the right SNI and

417
00:20:48,320 --> 00:20:52,250
you can encrypted one for CloudFlare you

418
00:20:50,690 --> 00:20:54,920
can do that so there's some

419
00:20:52,250 --> 00:20:56,900
opportunities to do something like that

420
00:20:54,920 --> 00:20:58,610
the data I'm happy to share it I haven't

421
00:20:56,900 --> 00:21:01,430
put it online because it's about a 100

422
00:20:58,610 --> 00:21:04,280
gigabyte database but if somebody wants

423
00:21:01,430 --> 00:21:06,800
to look at our our CDN analysis is

424
00:21:04,280 --> 00:21:08,180
actually the reason we look at

425
00:21:06,800 --> 00:21:10,550
CloudFlare is that they have a list of

426
00:21:08,180 --> 00:21:12,320
all ip's that they use we'd love to do

427
00:21:10,550 --> 00:21:14,240
the same analysis for those CD ends but

428
00:21:12,320 --> 00:21:17,450
the tools we found for detecting which

429
00:21:14,240 --> 00:21:19,070
CDN is being used so far I've been and

430
00:21:17,450 --> 00:21:23,480
not so good so if any when those good

431
00:21:19,070 --> 00:21:27,230
ones please let me know Lorenza

432
00:21:23,480 --> 00:21:28,910
committee I was thinking about a mobile

433
00:21:27,230 --> 00:21:33,500
device running several different apps at

434
00:21:28,910 --> 00:21:35,390
the same time and my unsubstantiated

435
00:21:33,500 --> 00:21:37,400
intuition was that it probably doesn't

436
00:21:35,390 --> 00:21:39,850
take much in the way of noise to make

437
00:21:37,400 --> 00:21:43,550
this stuff actually stopped working I

438
00:21:39,850 --> 00:21:45,469
think that's a good point this is so if

439
00:21:43,550 --> 00:21:48,470
you look at this page load fingerprint I

440
00:21:45,470 --> 00:21:50,240
mean this is in some sense similar to

441
00:21:48,470 --> 00:21:51,830
the process and traffic analysis that we

442
00:21:50,240 --> 00:21:53,480
call the website fingerprinting where

443
00:21:51,830 --> 00:21:55,399
it's sort of looking at IP addresses you

444
00:21:53,480 --> 00:21:57,440
look at traffic shapes that are doing

445
00:21:55,400 --> 00:21:59,120
there in that area there's a lot of

446
00:21:57,440 --> 00:22:02,600
research right now that actually looks

447
00:21:59,120 --> 00:22:03,860
at this question of noise and what kind

448
00:22:02,600 --> 00:22:06,740
those you can add and what kind of

449
00:22:03,860 --> 00:22:08,479
ambient noise you know you do do these

450
00:22:06,740 --> 00:22:09,890
things actually work for example trying

451
00:22:08,480 --> 00:22:12,530
to identify when you even start looking

452
00:22:09,890 --> 00:22:14,750
at a website versus you know if you come

453
00:22:12,530 --> 00:22:16,399
into an if you come in in the middle and

454
00:22:14,750 --> 00:22:19,010
ice you know try and try to partition

455
00:22:16,400 --> 00:22:20,610
things arousing a multiple tab so yes

456
00:22:19,010 --> 00:22:23,289
that's true

457
00:22:20,610 --> 00:22:25,928
the exact extended to which this would

458
00:22:23,289 --> 00:22:27,519
work and the fingerprinting context will

459
00:22:25,929 --> 00:22:29,289
vary and then maybe some of the

460
00:22:27,519 --> 00:22:32,350
techniques that people use to identify

461
00:22:29,289 --> 00:22:34,360
you know to try to improve website

462
00:22:32,350 --> 00:22:36,730
finger painting to do partitioning or

463
00:22:34,360 --> 00:22:38,889
other kinds of you know analysis and/or

464
00:22:36,730 --> 00:22:40,510
insurance you could be used here but

465
00:22:38,890 --> 00:22:42,940
that's not something we've investigated

466
00:22:40,510 --> 00:22:44,408
in depth so I mean a client could simply

467
00:22:42,940 --> 00:22:45,940
just connect to a bunch of other IP

468
00:22:44,409 --> 00:22:50,049
addresses right so you could definitely

469
00:22:45,940 --> 00:22:53,740
add noise to this as well it doesn't

470
00:22:50,049 --> 00:22:55,990
really help unless you have a really a

471
00:22:53,740 --> 00:22:57,370
good noise model in a sense that you

472
00:22:55,990 --> 00:22:59,590
know if you have some very sensitive

473
00:22:57,370 --> 00:23:01,449
site and you're accessing an IP that

474
00:22:59,590 --> 00:23:03,039
only belongs to that site what are the

475
00:23:01,450 --> 00:23:06,600
chances that you would have picked that

476
00:23:03,039 --> 00:23:10,059
through just random connections it

477
00:23:06,600 --> 00:23:12,760
getting good kind of background noise

478
00:23:10,059 --> 00:23:16,480
model is is hard but I'm not saying it's

479
00:23:12,760 --> 00:23:19,110
impossible did you look at Google site

480
00:23:16,480 --> 00:23:21,639
specifically I my knowledge of Google as

481
00:23:19,110 --> 00:23:23,289
few years out of date but I used to

482
00:23:21,639 --> 00:23:25,299
remember that there was a total of you

483
00:23:23,289 --> 00:23:27,070
know an equivalence class of maybe 60 IP

484
00:23:25,299 --> 00:23:31,139
addresses on which everything goes

485
00:23:27,070 --> 00:23:31,139
that's very different from CloudFlare

486
00:23:36,330 --> 00:23:40,029
Daniel Kahn Gilmore from the ACLU so

487
00:23:38,919 --> 00:23:41,919
thanks for doing this work it's really

488
00:23:40,029 --> 00:23:44,639
good to see the problem stated as

489
00:23:41,919 --> 00:23:47,679
clearly as I think you've stated it and

490
00:23:44,639 --> 00:23:49,389
there have been a few comments in the

491
00:23:47,679 --> 00:23:50,919
mic line here about what could the

492
00:23:49,389 --> 00:23:52,990
clients do differently what could the

493
00:23:50,919 --> 00:23:55,090
CDNs do differently and I'm wondering if

494
00:23:52,990 --> 00:23:57,039
what you've looked at has given you any

495
00:23:55,090 --> 00:23:58,689
insight also into what the individual

496
00:23:57,039 --> 00:24:01,658
website operators could do differently

497
00:23:58,690 --> 00:24:04,600
so for example should you limit the

498
00:24:01,659 --> 00:24:05,769
number of third-party resources number

499
00:24:04,600 --> 00:24:07,899
of third parties that you load resources

500
00:24:05,769 --> 00:24:09,340
from or should you not limit the number

501
00:24:07,899 --> 00:24:11,439
or I mean have you have you thought

502
00:24:09,340 --> 00:24:13,389
about that or tried to model thing best

503
00:24:11,440 --> 00:24:14,710
guidance for website administrators

504
00:24:13,389 --> 00:24:17,260
that's a great question I mean obviously

505
00:24:14,710 --> 00:24:21,549
the first step is hosting your first

506
00:24:17,260 --> 00:24:24,309
party site somewhere that has collisions

507
00:24:21,549 --> 00:24:26,289
with other websites but then about the

508
00:24:24,309 --> 00:24:30,490
third party thing it's interesting

509
00:24:26,289 --> 00:24:32,500
because in in some cases adding more

510
00:24:30,490 --> 00:24:34,120
third parties might help because you get

511
00:24:32,500 --> 00:24:36,400
more intersections

512
00:24:34,120 --> 00:24:38,469
it's not something we've once again

513
00:24:36,400 --> 00:24:40,480
we've looked at specifically but yeah I

514
00:24:38,470 --> 00:24:41,920
think I think this is definitely

515
00:24:40,480 --> 00:24:43,840
interesting to think about it from all

516
00:24:41,920 --> 00:24:45,400
three perspective like you said from a

517
00:24:43,840 --> 00:24:49,570
CDN perspective from a user perspective

518
00:24:45,400 --> 00:24:51,520
and from a web server a website

519
00:24:49,570 --> 00:24:55,830
perspective Thanks

520
00:24:51,520 --> 00:24:55,830
great let's thank the speaker again and

521
00:24:55,900 --> 00:25:01,140
[Applause]

522
00:25:05,550 --> 00:25:13,740
and this is a paper called can we

523
00:25:10,420 --> 00:25:17,830
containerize internet measurements and

524
00:25:13,740 --> 00:25:20,620
chris says first-year PhD students so

525
00:25:17,830 --> 00:25:23,050
again possibly internships rather than

526
00:25:20,620 --> 00:25:26,050
you should think about grabbing a person

527
00:25:23,050 --> 00:25:27,639
for your employment and there's several

528
00:25:26,050 --> 00:25:33,580
other authors I think you'll mention but

529
00:25:27,640 --> 00:25:35,830
thank you hopefully this works now can

530
00:25:33,580 --> 00:25:49,689
we contain their eyes connecting up

531
00:25:35,830 --> 00:25:51,429
machines to alright is this can you if I

532
00:25:49,690 --> 00:25:53,880
speak like this okay cool it's about the

533
00:25:51,430 --> 00:25:58,420
right height I'll just go with it

534
00:25:53,880 --> 00:26:00,070
no I think it's fine okay so well so is

535
00:25:58,420 --> 00:26:01,570
this question on can we container has

536
00:26:00,070 --> 00:26:04,360
internet measurements and this is a

537
00:26:01,570 --> 00:26:06,159
joint work between myself so Dowson

538
00:26:04,360 --> 00:26:08,070
cannon from Rutgers University and my

539
00:26:06,160 --> 00:26:12,340
advisor at the University of Oregon

540
00:26:08,070 --> 00:26:14,350
Ramakrishnan so we'll go through this

541
00:26:12,340 --> 00:26:16,209
question in three sort of distinct

542
00:26:14,350 --> 00:26:18,300
phases the first we'll look at some of

543
00:26:16,210 --> 00:26:21,300
the issues around containerization on

544
00:26:18,300 --> 00:26:23,950
and we'll talk in particular about what

545
00:26:21,300 --> 00:26:25,750
containerization means for internet

546
00:26:23,950 --> 00:26:28,060
measurements and then we'll look at a

547
00:26:25,750 --> 00:26:30,310
proposed solution that we've develop

548
00:26:28,060 --> 00:26:34,179
what's called an ace and we'll also

549
00:26:30,310 --> 00:26:35,860
present an evaluation of our solution so

550
00:26:34,180 --> 00:26:38,040
first I'd like to give just a brief sort

551
00:26:35,860 --> 00:26:40,209
of run-through of what containers are

552
00:26:38,040 --> 00:26:45,040
it's they're essentially a new

553
00:26:40,210 --> 00:26:47,020
relatively new isolation mechanism that

554
00:26:45,040 --> 00:26:49,960
allows us to run applications

555
00:26:47,020 --> 00:26:51,700
in isolation using a single kernel so

556
00:26:49,960 --> 00:26:53,500
rather than a VMware you have to run an

557
00:26:51,700 --> 00:26:55,540
entirely different operating system for

558
00:26:53,500 --> 00:26:58,570
each application you can run the same

559
00:26:55,540 --> 00:27:00,550
operating system but we use these recent

560
00:26:58,570 --> 00:27:04,030
sort of developments in Linux and other

561
00:27:00,550 --> 00:27:06,580
OS is to achieve isolation between the

562
00:27:04,030 --> 00:27:08,590
processes of an application namespaces

563
00:27:06,580 --> 00:27:10,960
allow us to isolate what application can

564
00:27:08,590 --> 00:27:13,449
access and see groups allow us to acts

565
00:27:10,960 --> 00:27:15,610
to allocate resources to those

566
00:27:13,450 --> 00:27:17,350
applications so you can give a

567
00:27:15,610 --> 00:27:20,260
particular application certain share of

568
00:27:17,350 --> 00:27:21,820
CPU cycles or particular memory access

569
00:27:20,260 --> 00:27:24,670
or particularly on a new mode of

570
00:27:21,820 --> 00:27:26,530
affinity and containers due to some of

571
00:27:24,670 --> 00:27:28,360
these advantages there are rapidly

572
00:27:26,530 --> 00:27:31,330
replacing VMs and cloud computing

573
00:27:28,360 --> 00:27:33,639
settings and and high-performance

574
00:27:31,330 --> 00:27:36,100
computing as well a lot of different

575
00:27:33,640 --> 00:27:37,480
sort of software deployment settings are

576
00:27:36,100 --> 00:27:40,000
using containers now because of the

577
00:27:37,480 --> 00:27:42,100
advantages and because of the utility of

578
00:27:40,000 --> 00:27:43,240
having convenient packages so if we're

579
00:27:42,100 --> 00:27:44,530
internet measurement why do we care

580
00:27:43,240 --> 00:27:46,930
about containers and the reasons are

581
00:27:44,530 --> 00:27:50,410
fairly similar to the reasons any

582
00:27:46,930 --> 00:27:52,450
application developer deployer might

583
00:27:50,410 --> 00:27:55,390
care about containers are they allow us

584
00:27:52,450 --> 00:27:57,790
to streamline experiments the deployment

585
00:27:55,390 --> 00:28:00,790
the the sort of packaging the

586
00:27:57,790 --> 00:28:03,070
standardization of them so scripts tools

587
00:28:00,790 --> 00:28:05,230
libraries even like if you have data

588
00:28:03,070 --> 00:28:06,700
sets that are required for for doing

589
00:28:05,230 --> 00:28:09,430
influence or lookups they can all be

590
00:28:06,700 --> 00:28:13,180
packages into a unified container image

591
00:28:09,430 --> 00:28:14,920
which we can then deploy a very

592
00:28:13,180 --> 00:28:17,800
consistent container one times on a

593
00:28:14,920 --> 00:28:19,990
number of hosts and in a wide variety of

594
00:28:17,800 --> 00:28:22,419
different geographically diverse or

595
00:28:19,990 --> 00:28:24,610
topographically diverse locations so

596
00:28:22,420 --> 00:28:28,600
this exposes our new cloud native

597
00:28:24,610 --> 00:28:30,330
vantage points as well AWS a Google

598
00:28:28,600 --> 00:28:32,500
cloud platform and a number of others

599
00:28:30,330 --> 00:28:34,570
and of course Internet measurements also

600
00:28:32,500 --> 00:28:36,910
benefit from having less CPU and memory

601
00:28:34,570 --> 00:28:38,169
overheads compared to VMs and this

602
00:28:36,910 --> 00:28:39,660
little ghost that's been hiding on the

603
00:28:38,170 --> 00:28:42,010
right of this side is a reference that

604
00:28:39,660 --> 00:28:43,810
planetlab has actually been using LXE

605
00:28:42,010 --> 00:28:47,020
containers as their experiments

606
00:28:43,810 --> 00:28:48,370
allocation units since 2012 so the

607
00:28:47,020 --> 00:28:50,830
answer the question we started with are

608
00:28:48,370 --> 00:28:54,850
sure we can I mean it actually has

609
00:28:50,830 --> 00:28:56,280
already been being done in in planetlab

610
00:28:54,850 --> 00:28:57,870
for example

611
00:28:56,280 --> 00:28:59,700
we want to look in this study at y9 in

612
00:28:57,870 --> 00:29:01,070
other words whenever you virtualized

613
00:28:59,700 --> 00:29:03,030
something there's going to be overheads

614
00:29:01,070 --> 00:29:06,389
virtualizing something using containers

615
00:29:03,030 --> 00:29:07,980
or what are the overheads it's it's it's

616
00:29:06,390 --> 00:29:11,850
not enough to say although a perfect

617
00:29:07,980 --> 00:29:13,920
solution in particular containers give

618
00:29:11,850 --> 00:29:16,770
you a pretty good usage of CPU and

619
00:29:13,920 --> 00:29:19,590
memory compared to the native host

620
00:29:16,770 --> 00:29:22,950
installation of an application but due

621
00:29:19,590 --> 00:29:25,080
to issues of network isolation you incur

622
00:29:22,950 --> 00:29:27,990
extra latency in the networking layers

623
00:29:25,080 --> 00:29:29,639
and we've measured this in this study

624
00:29:27,990 --> 00:29:31,320
and it kind of confirms results from

625
00:29:29,640 --> 00:29:34,050
other studies that this is around 15

626
00:29:31,320 --> 00:29:36,780
microseconds and resting systems but the

627
00:29:34,050 --> 00:29:38,100
key issue that we are we identify we

628
00:29:36,780 --> 00:29:40,110
want to bring to people's attention is

629
00:29:38,100 --> 00:29:42,300
that when you add multiple containers on

630
00:29:40,110 --> 00:29:45,000
the same host this latency overhead

631
00:29:42,300 --> 00:29:46,500
increases we've measured it up to three

632
00:29:45,000 --> 00:29:47,070
hundred microseconds depending on

633
00:29:46,500 --> 00:29:49,260
traffic

634
00:29:47,070 --> 00:29:51,120
and if you continue to add containers

635
00:29:49,260 --> 00:29:54,690
you can kind of continue to push this

636
00:29:51,120 --> 00:29:56,159
latency overhead higher um so if you're

637
00:29:54,690 --> 00:29:58,170
doing any monument that deals with

638
00:29:56,160 --> 00:30:01,080
timing so if you're trying to measure

639
00:29:58,170 --> 00:30:03,690
Artie T or one way delay or do inference

640
00:30:01,080 --> 00:30:04,889
is based on timing on you have to deal

641
00:30:03,690 --> 00:30:07,560
with this in a container you have to

642
00:30:04,890 --> 00:30:10,770
deal with these non constant latency

643
00:30:07,560 --> 00:30:11,970
overheads and we also we observed that

644
00:30:10,770 --> 00:30:13,470
there's a lot of work that's going into

645
00:30:11,970 --> 00:30:15,240
kind of trying to solve this problem of

646
00:30:13,470 --> 00:30:17,970
the latency overhead in containerized

647
00:30:15,240 --> 00:30:20,550
network virtualization systems such as

648
00:30:17,970 --> 00:30:21,930
slam and free flow but these efforts for

649
00:30:20,550 --> 00:30:23,520
the most part don't really have any

650
00:30:21,930 --> 00:30:25,320
benefit for internet measurements lymon

651
00:30:23,520 --> 00:30:28,560
particularly uses flow based

652
00:30:25,320 --> 00:30:31,620
virtualization free flow and require a

653
00:30:28,560 --> 00:30:33,510
specialized RDMA hardware and drivers on

654
00:30:31,620 --> 00:30:34,590
both endpoints so in the context of

655
00:30:33,510 --> 00:30:38,580
Internet motion that neither of these

656
00:30:34,590 --> 00:30:40,560
solutions are really very useful just to

657
00:30:38,580 --> 00:30:42,540
give a sort of illustration of of

658
00:30:40,560 --> 00:30:45,090
latency of this number of 300

659
00:30:42,540 --> 00:30:48,090
microseconds brother it isn't you know

660
00:30:45,090 --> 00:30:51,300
whole lot but the speed of light is an

661
00:30:48,090 --> 00:30:53,040
roughly 90 kilometer radius so if you're

662
00:30:51,300 --> 00:30:56,790
off by 30 microseconds you're off by

663
00:30:53,040 --> 00:30:59,190
like 19 kilometers and I've done the a

664
00:30:56,790 --> 00:31:01,590
circle around Montreal so he reaches

665
00:30:59,190 --> 00:31:05,340
onto the United States and several other

666
00:31:01,590 --> 00:31:07,310
cities and towns around in Canada and

667
00:31:05,340 --> 00:31:09,050
using this is this number is

668
00:31:07,310 --> 00:31:12,230
is calculated actually from from

669
00:31:09,050 --> 00:31:14,480
Amazon's latency statistics they

670
00:31:12,230 --> 00:31:18,560
calculated a particular rate at which

671
00:31:14,480 --> 00:31:20,480
they last sales money for milliseconds

672
00:31:18,560 --> 00:31:22,070
and so if we translate it listen to our

673
00:31:20,480 --> 00:31:24,920
latency we're talking about an area of

674
00:31:22,070 --> 00:31:26,149
about 1.2 million dollars so if you're

675
00:31:24,920 --> 00:31:27,680
trying to estimate how much is this

676
00:31:26,150 --> 00:31:29,540
thing gonna cost me how much I'm gonna

677
00:31:27,680 --> 00:31:31,040
lose if my latency increases that's the

678
00:31:29,540 --> 00:31:32,720
that's the margin of error you're

679
00:31:31,040 --> 00:31:34,420
talking about additionally it's hard to

680
00:31:32,720 --> 00:31:36,710
isolate these kind of latency in between

681
00:31:34,420 --> 00:31:38,720
if you observe a latency from a

682
00:31:36,710 --> 00:31:40,190
particular application if you can't

683
00:31:38,720 --> 00:31:41,960
there's nobody you could ask right now

684
00:31:40,190 --> 00:31:43,340
like where is this latency coming from

685
00:31:41,960 --> 00:31:45,290
is the physical network is that the

686
00:31:43,340 --> 00:31:47,480
operating system is that the application

687
00:31:45,290 --> 00:31:50,830
is that the virtualization layers so

688
00:31:47,480 --> 00:31:54,410
we're addressing in this study how to

689
00:31:50,830 --> 00:31:55,879
account for these latency overheads in a

690
00:31:54,410 --> 00:31:57,770
running container system in other words

691
00:31:55,880 --> 00:31:59,270
we want to do this in real time we don't

692
00:31:57,770 --> 00:32:00,790
want you can't do this as a static thing

693
00:31:59,270 --> 00:32:02,960
because it's going to be changing is

694
00:32:00,790 --> 00:32:05,180
containers that are deployed on the node

695
00:32:02,960 --> 00:32:06,320
or as the traffic characteristics of the

696
00:32:05,180 --> 00:32:08,630
containers that are running on the node

697
00:32:06,320 --> 00:32:10,700
change and so to address this we've

698
00:32:08,630 --> 00:32:12,800
developed a solution which we're calling

699
00:32:10,700 --> 00:32:18,010
mace standing for measure the added

700
00:32:12,800 --> 00:32:19,879
container expense so we imagine on

701
00:32:18,010 --> 00:32:24,670
containers for measurement running and

702
00:32:19,880 --> 00:32:29,060
the typical sort of bridged or overlay

703
00:32:24,670 --> 00:32:30,530
container network virtualization so as

704
00:32:29,060 --> 00:32:32,830
shown on the right you have an interface

705
00:32:30,530 --> 00:32:35,510
this in the containers network namespace

706
00:32:32,830 --> 00:32:37,340
this the the ethos Eero at the top and

707
00:32:35,510 --> 00:32:39,730
then you have layers of bridges and

708
00:32:37,340 --> 00:32:42,830
routing so that packets eventually

709
00:32:39,730 --> 00:32:44,960
traverse an interface on the on the load

710
00:32:42,830 --> 00:32:46,730
on the host node that's the easier of

711
00:32:44,960 --> 00:32:49,400
the bottom and so the goal of our

712
00:32:46,730 --> 00:32:51,350
solution is to measure that red dotted

713
00:32:49,400 --> 00:32:54,920
line so we want to know how long does it

714
00:32:51,350 --> 00:32:58,340
take packet to go from the container to

715
00:32:54,920 --> 00:32:59,810
the host for ingress and hourglass we

716
00:32:58,340 --> 00:33:01,070
want you Boston try to do this per

717
00:32:59,810 --> 00:33:03,889
packet and you of course have high

718
00:33:01,070 --> 00:33:05,360
accuracy additionally our goals in

719
00:33:03,890 --> 00:33:08,360
developing the solution that we do not

720
00:33:05,360 --> 00:33:10,399
want to incur additional latency in the

721
00:33:08,360 --> 00:33:12,830
virtualization layers so often when you

722
00:33:10,400 --> 00:33:14,750
start probing things and we'll talk more

723
00:33:12,830 --> 00:33:16,280
about this later when you start probing

724
00:33:14,750 --> 00:33:19,300
things you tend to increase the latency

725
00:33:16,280 --> 00:33:20,750
but we want to minimize that impact and

726
00:33:19,300 --> 00:33:22,760
finally we want

727
00:33:20,750 --> 00:33:24,950
container friendly interface so we want

728
00:33:22,760 --> 00:33:27,290
your container to be able to ask one of

729
00:33:24,950 --> 00:33:30,650
my latency to the outside world in real

730
00:33:27,290 --> 00:33:33,290
time when it whenever it pleases so the

731
00:33:30,650 --> 00:33:36,830
method that we've developed to do this

732
00:33:33,290 --> 00:33:38,210
uses Linux kernel trace prints which are

733
00:33:36,830 --> 00:33:41,449
essentially hooks into the particular

734
00:33:38,210 --> 00:33:43,280
lines in the kernel source code you can

735
00:33:41,450 --> 00:33:45,980
insert your own probe functions into

736
00:33:43,280 --> 00:33:47,960
those lines and really muck things up if

737
00:33:45,980 --> 00:33:51,890
you don't know you're doing or put them

738
00:33:47,960 --> 00:33:54,080
to good use as we are attempting here so

739
00:33:51,890 --> 00:33:56,510
we have in particular I've circled in

740
00:33:54,080 --> 00:33:58,100
red the ones on this and Brendan Greg's

741
00:33:56,510 --> 00:34:00,200
excellent diagram so we have a trace

742
00:33:58,100 --> 00:34:03,500
price in the system call interface and

743
00:34:00,200 --> 00:34:06,770
also at the net device layer so between

744
00:34:03,500 --> 00:34:09,770
those two we can find we can actually

745
00:34:06,770 --> 00:34:11,030
access sort of both the system color

746
00:34:09,770 --> 00:34:12,469
which is the applications are in the

747
00:34:11,030 --> 00:34:14,780
container so that's kind of the top of

748
00:34:12,469 --> 00:34:16,040
that dotted line and then also the net

749
00:34:14,780 --> 00:34:18,470
device layer which gives us access to

750
00:34:16,040 --> 00:34:20,210
closer to the bottom we have some ideas

751
00:34:18,469 --> 00:34:22,939
about how to go for the further down

752
00:34:20,210 --> 00:34:24,949
into the hardware - we originally had

753
00:34:22,940 --> 00:34:28,100
implemented this solution using existing

754
00:34:24,949 --> 00:34:30,379
tracer such as F trace and so this is of

755
00:34:28,100 --> 00:34:32,120
course the logical first step what we

756
00:34:30,379 --> 00:34:33,710
notice is that these tracers are great

757
00:34:32,120 --> 00:34:34,819
for doing sort of diagnostic stuff if

758
00:34:33,710 --> 00:34:35,899
you have a problem you spin up the

759
00:34:34,820 --> 00:34:37,550
tracer you figure out what's going on

760
00:34:35,899 --> 00:34:38,750
but if you want to run them as like a

761
00:34:37,550 --> 00:34:40,280
monitoring solution they're really

762
00:34:38,750 --> 00:34:42,679
terrible because they have this huge

763
00:34:40,280 --> 00:34:44,090
perturbation on the system and moreover

764
00:34:42,679 --> 00:34:45,470
what happens if you do a trace is you

765
00:34:44,090 --> 00:34:47,300
have an enormous amount of trace data

766
00:34:45,469 --> 00:34:49,189
they get split out and you have to

767
00:34:47,300 --> 00:34:51,080
somehow store that filter through it and

768
00:34:49,190 --> 00:34:52,179
distill it into the actual latency

769
00:34:51,080 --> 00:34:54,290
results that you care about

770
00:34:52,179 --> 00:34:56,860
so due to this we've developed a

771
00:34:54,290 --> 00:35:00,640
application specific kernel module

772
00:34:56,860 --> 00:35:03,320
specifically for MA for monitoring this

773
00:35:00,640 --> 00:35:04,670
virtualization latencies and we imagine

774
00:35:03,320 --> 00:35:06,710
that this is a module that you could run

775
00:35:04,670 --> 00:35:08,750
on container hosts that care about doing

776
00:35:06,710 --> 00:35:10,670
this kind of measurement and it reports

777
00:35:08,750 --> 00:35:12,890
directly to containers namespaces so

778
00:35:10,670 --> 00:35:14,890
this solves the other goal of how can we

779
00:35:12,890 --> 00:35:16,730
make a nice container friendly interface

780
00:35:14,890 --> 00:35:19,250
we'll go through the design of this

781
00:35:16,730 --> 00:35:21,260
module really quickly on essentially we

782
00:35:19,250 --> 00:35:23,660
have packets egressing and ingressing

783
00:35:21,260 --> 00:35:26,810
the virtualization system on the top and

784
00:35:23,660 --> 00:35:28,670
these packets trigger the trace events

785
00:35:26,810 --> 00:35:31,340
so the for trace events that we are

786
00:35:28,670 --> 00:35:34,400
actually probing are listed next this

787
00:35:31,340 --> 00:35:37,040
enter and then net dev start X MIT

788
00:35:34,400 --> 00:35:39,500
for the egress path and what we do is on

789
00:35:37,040 --> 00:35:42,140
we filter these events so we only listen

790
00:35:39,500 --> 00:35:43,880
to particular interface we only register

791
00:35:42,140 --> 00:35:45,500
events on particular interfaces that

792
00:35:43,880 --> 00:35:47,540
we're listening for that we care about

793
00:35:45,500 --> 00:35:49,010
and also we only register events in

794
00:35:47,540 --> 00:35:50,360
particular namespaces that we care about

795
00:35:49,010 --> 00:35:52,700
so we're already doing some data

796
00:35:50,360 --> 00:35:55,790
reduction at that level makes weekly

797
00:35:52,700 --> 00:35:58,310
events so we have to have correlation

798
00:35:55,790 --> 00:35:59,509
each packet incurs a whole series of

799
00:35:58,310 --> 00:36:01,130
events as it passes through the

800
00:35:59,510 --> 00:36:02,690
virtualization there's so to be able to

801
00:36:01,130 --> 00:36:04,820
correlate which events map to which

802
00:36:02,690 --> 00:36:07,610
packet and we do this using hash tables

803
00:36:04,820 --> 00:36:09,950
for both ingress and egress and finally

804
00:36:07,610 --> 00:36:11,840
we are push Layton sees into these ring

805
00:36:09,950 --> 00:36:15,259
buffers and we maintain a ring buffer

806
00:36:11,840 --> 00:36:16,880
per network namespace so that your

807
00:36:15,260 --> 00:36:18,770
container when it's asking for latency

808
00:36:16,880 --> 00:36:20,720
is basically just doing a simple read a

809
00:36:18,770 --> 00:36:22,550
room buffer that's allocated for its

810
00:36:20,720 --> 00:36:28,970
network namespace I mean they're

811
00:36:22,550 --> 00:36:30,800
accessible via device special files okay

812
00:36:28,970 --> 00:36:33,200
just a couple more fermentation notes

813
00:36:30,800 --> 00:36:36,590
we're using are the TLC for accuracy and

814
00:36:33,200 --> 00:36:38,569
low overhead timing we minimally lock

815
00:36:36,590 --> 00:36:41,120
everything so we're using atomic types

816
00:36:38,570 --> 00:36:43,880
for the most part to deal with these the

817
00:36:41,120 --> 00:36:46,839
the lists and queues that we have to

818
00:36:43,880 --> 00:36:49,520
maintain and we have a consistent

819
00:36:46,840 --> 00:36:50,600
namespace aware API so when you read

820
00:36:49,520 --> 00:36:52,370
from what these device files it

821
00:36:50,600 --> 00:36:54,290
basically checks which namespace you're

822
00:36:52,370 --> 00:36:56,060
reading from and depending on that it

823
00:36:54,290 --> 00:36:58,250
will give you results for your namespace

824
00:36:56,060 --> 00:37:00,110
if your namespace is being actively

825
00:36:58,250 --> 00:37:03,140
monitored and this is our open source

826
00:37:00,110 --> 00:37:05,450
the the link is there we'll make these

827
00:37:03,140 --> 00:37:06,529
slides available later so if you want to

828
00:37:05,450 --> 00:37:08,210
check out the source code if you want to

829
00:37:06,530 --> 00:37:09,350
help us there's a bunch of sort of

830
00:37:08,210 --> 00:37:10,880
points later if you want to help us

831
00:37:09,350 --> 00:37:13,370
continue developing this that would be

832
00:37:10,880 --> 00:37:14,840
excellent too so just to give you a

833
00:37:13,370 --> 00:37:17,029
sense of the interface I'll go through

834
00:37:14,840 --> 00:37:19,370
are the steps involved in running this

835
00:37:17,030 --> 00:37:20,900
from a container assuming the module is

836
00:37:19,370 --> 00:37:23,299
already loaded on the host so the first

837
00:37:20,900 --> 00:37:25,100
step is to basically echo a non-zero

838
00:37:23,300 --> 00:37:28,850
value into this eyes at one of these

839
00:37:25,100 --> 00:37:30,440
sort of sisyphus control files so this

840
00:37:28,850 --> 00:37:32,330
basically tells the module ok this

841
00:37:30,440 --> 00:37:35,510
namespace whoever is echoing this

842
00:37:32,330 --> 00:37:37,100
nonzero value wants me to monitor their

843
00:37:35,510 --> 00:37:38,600
ingress is so then it sets up the

844
00:37:37,100 --> 00:37:42,560
necessary ring buffer and everything to

845
00:37:38,600 --> 00:37:44,480
do it next you execute I just have to

846
00:37:42,560 --> 00:37:46,220
kind of point this over there next you

847
00:37:44,480 --> 00:37:48,860
execute your experiment so maybe were

848
00:37:46,220 --> 00:37:50,509
just looking for the RTT to the nearest

849
00:37:48,860 --> 00:37:52,970
host:this gonna call themselves

850
00:37:50,510 --> 00:37:54,410
google.com and finally you collect the

851
00:37:52,970 --> 00:37:57,109
latencies so this is as simple as

852
00:37:54,410 --> 00:37:58,700
reading from a device file which

853
00:37:57,110 --> 00:38:00,320
basically exposes the current effort

854
00:37:58,700 --> 00:38:02,089
that's allocated for that M space and

855
00:38:00,320 --> 00:38:04,670
for now we're kind of just reporting the

856
00:38:02,090 --> 00:38:06,980
agencies in this nice mostly human

857
00:38:04,670 --> 00:38:08,930
readable format there's a timestamp we

858
00:38:06,980 --> 00:38:11,090
implemented this so far just for ICMP so

859
00:38:08,930 --> 00:38:12,500
there's an ICMP sequence number and then

860
00:38:11,090 --> 00:38:17,170
it shows you the egress and ingress

861
00:38:12,500 --> 00:38:17,170
latency in nanoseconds on the far right

862
00:38:17,380 --> 00:38:24,320
well let's let's not skip that many

863
00:38:20,480 --> 00:38:25,670
slides please so how do you know these

864
00:38:24,320 --> 00:38:27,800
numbers are correct right you get these

865
00:38:25,670 --> 00:38:30,590
sort of cryptic looking integers and we

866
00:38:27,800 --> 00:38:32,680
say they're nanoseconds but why would we

867
00:38:30,590 --> 00:38:35,840
ever trust that without some

868
00:38:32,680 --> 00:38:38,569
substantiation so we have so far

869
00:38:35,840 --> 00:38:40,880
executed it's relatively primitive but

870
00:38:38,570 --> 00:38:44,480
we feel it supports the accuracy of our

871
00:38:40,880 --> 00:38:46,400
tool so evaluation the issues there's no

872
00:38:44,480 --> 00:38:48,740
direct method in other words we can't

873
00:38:46,400 --> 00:38:50,270
directly observe what we're trying to

874
00:38:48,740 --> 00:38:51,680
measure because in order to do that we

875
00:38:50,270 --> 00:38:54,350
would again be incurring additional

876
00:38:51,680 --> 00:38:57,379
perturbation and the actual thing that

877
00:38:54,350 --> 00:38:59,810
we're measuring would be changing so we

878
00:38:57,380 --> 00:39:01,640
develop a method and it looks like the

879
00:38:59,810 --> 00:39:05,750
right side of my side here is cut off

880
00:39:01,640 --> 00:39:09,170
that's okay we develop a method which

881
00:39:05,750 --> 00:39:11,840
basically evaluates the accuracy of our

882
00:39:09,170 --> 00:39:14,420
latency measurements by evaluating the

883
00:39:11,840 --> 00:39:15,710
ability for us to take ITT measurement

884
00:39:14,420 --> 00:39:18,290
from the container and compare it with

885
00:39:15,710 --> 00:39:19,640
an RTT measurement made from a host so

886
00:39:18,290 --> 00:39:22,509
what we want is we want to be able to

887
00:39:19,640 --> 00:39:25,490
use our latency measurements to subtract

888
00:39:22,510 --> 00:39:28,040
the latency overhead from inside the

889
00:39:25,490 --> 00:39:29,450
container and to create uh you know

890
00:39:28,040 --> 00:39:31,660
containers that can take measurements as

891
00:39:29,450 --> 00:39:34,490
accurate as those made on the host

892
00:39:31,660 --> 00:39:36,710
natively so to do this we first take the

893
00:39:34,490 --> 00:39:39,049
RTT from the container then regalo the

894
00:39:36,710 --> 00:39:40,520
latency is computed by mase and then we

895
00:39:39,050 --> 00:39:43,430
subtract the two so we call this the

896
00:39:40,520 --> 00:39:45,650
corrected RTT and then we compare this

897
00:39:43,430 --> 00:39:47,480
to a ground truth RTT of the network

898
00:39:45,650 --> 00:39:50,599
which we use Hardware time stamping to

899
00:39:47,480 --> 00:39:52,900
achieve so

900
00:39:50,599 --> 00:39:56,749
valuation does this over a single link

901
00:39:52,900 --> 00:39:57,499
and minimize the network effects of

902
00:39:56,749 --> 00:39:59,149
course we're interested in the

903
00:39:57,499 --> 00:40:01,180
virtualization overheads here so we want

904
00:39:59,150 --> 00:40:04,190
the network to be as quiet as possible

905
00:40:01,180 --> 00:40:06,019
we add co-located containers on the

906
00:40:04,190 --> 00:40:08,029
measurement on the host this running the

907
00:40:06,019 --> 00:40:09,618
probe container and this is because of

908
00:40:08,029 --> 00:40:11,569
our observation earlier that having

909
00:40:09,619 --> 00:40:13,309
multiple kolodziejczak co-located

910
00:40:11,569 --> 00:40:14,660
containers in extra traffic going

911
00:40:13,309 --> 00:40:15,920
through the virtualization system

912
00:40:14,660 --> 00:40:18,828
actually changes the virtualization

913
00:40:15,920 --> 00:40:20,420
systems latency effects so these

914
00:40:18,829 --> 00:40:22,400
containers are running thumping is kind

915
00:40:20,420 --> 00:40:24,229
of a worst case scenario where you're

916
00:40:22,400 --> 00:40:26,799
running this measurement container on a

917
00:40:24,229 --> 00:40:29,029
on a house that's very very busy and

918
00:40:26,799 --> 00:40:30,769
these run on cloud labs so there's a

919
00:40:29,029 --> 00:40:32,630
little bit of noise from the experiments

920
00:40:30,769 --> 00:40:35,868
on network overlays that cloud lab uses

921
00:40:32,630 --> 00:40:37,489
and also on the sort of accounting

922
00:40:35,869 --> 00:40:42,049
agents that are running on cloud that

923
00:40:37,489 --> 00:40:44,299
nodes so this is a main result is

924
00:40:42,049 --> 00:40:46,038
presented here this is our tt bias so

925
00:40:44,299 --> 00:40:50,359
it's the difference between the reported

926
00:40:46,039 --> 00:40:52,579
RTT from one of these sources and the

927
00:40:50,359 --> 00:40:55,670
actual ITT is measured in hardware so

928
00:40:52,579 --> 00:40:57,019
the blue trace on the top is the RTT

929
00:40:55,670 --> 00:40:58,640
that's reported from inside the

930
00:40:57,019 --> 00:41:01,549
container the raw RTT without any

931
00:40:58,640 --> 00:41:03,680
modification so and the cutoff here but

932
00:41:01,549 --> 00:41:05,089
the x-axis is the number of traffic

933
00:41:03,680 --> 00:41:07,788
generating containers that are running

934
00:41:05,089 --> 00:41:09,410
co-located on the same host so you can

935
00:41:07,789 --> 00:41:10,339
see even with just 30 other containers

936
00:41:09,410 --> 00:41:12,859
running on the host we've already

937
00:41:10,339 --> 00:41:15,619
incurred you know over 300 microseconds

938
00:41:12,859 --> 00:41:16,670
of additional agency on our measurements

939
00:41:15,619 --> 00:41:21,289
that are taken from inside the

940
00:41:16,670 --> 00:41:23,660
containers and to uh to to compare this

941
00:41:21,289 --> 00:41:25,789
with the sort of native versions we have

942
00:41:23,660 --> 00:41:27,589
the green in the great race so these are

943
00:41:25,789 --> 00:41:30,920
native references that are taken from

944
00:41:27,589 --> 00:41:33,920
the host of course they're not without

945
00:41:30,920 --> 00:41:35,779
their own overheads so there was a bias

946
00:41:33,920 --> 00:41:38,660
between them and the hardware OTT and

947
00:41:35,779 --> 00:41:40,219
then we finally showed the container

948
00:41:38,660 --> 00:41:44,029
corrected result which is the black

949
00:41:40,219 --> 00:41:46,369
trace might visible above the green and

950
00:41:44,029 --> 00:41:49,640
gray traces there so those the one that

951
00:41:46,369 --> 00:41:51,289
we described previously as being the RTT

952
00:41:49,640 --> 00:41:53,150
taken from the container with the

953
00:41:51,289 --> 00:41:54,410
latency subtracted so in other words

954
00:41:53,150 --> 00:41:58,700
after we've accounted for these ladies

955
00:41:54,410 --> 00:42:00,799
using mice we're able to estimate the

956
00:41:58,700 --> 00:42:02,808
same RTT results that we would get from

957
00:42:00,799 --> 00:42:04,430
running the process natively to within

958
00:42:02,809 --> 00:42:07,400
20 microseconds in the

959
00:42:04,430 --> 00:42:10,040
case and a noble observation here the

960
00:42:07,400 --> 00:42:12,620
sort of a secondary is that all traffic

961
00:42:10,040 --> 00:42:15,290
or all of these are TT measurement tools

962
00:42:12,620 --> 00:42:16,580
are impacted by the addition of extra

963
00:42:15,290 --> 00:42:18,860
traffic going through the virtualization

964
00:42:16,580 --> 00:42:20,000
layers so it's not just tools of

965
00:42:18,860 --> 00:42:21,050
learning from the container whatever

966
00:42:20,000 --> 00:42:23,360
you're running your to of this measuring

967
00:42:21,050 --> 00:42:24,860
RTT if there is extra traffic either

968
00:42:23,360 --> 00:42:26,810
going through containers on the host or

969
00:42:24,860 --> 00:42:29,480
other processes you'll notice that

970
00:42:26,810 --> 00:42:31,640
you'll get different you'll get some

971
00:42:29,480 --> 00:42:33,410
bias in your your resulting measurements

972
00:42:31,640 --> 00:42:35,089
so because we're using hash tables I'll

973
00:42:33,410 --> 00:42:36,620
go through this pretty quickly it's just

974
00:42:35,090 --> 00:42:40,340
me sometimes we get hash collisions

975
00:42:36,620 --> 00:42:42,109
which causes us to lose particular

976
00:42:40,340 --> 00:42:44,480
packets as we're correlating them

977
00:42:42,110 --> 00:42:46,370
through so we report a sort of coverage

978
00:42:44,480 --> 00:42:47,930
which is the number of latency reports

979
00:42:46,370 --> 00:42:51,290
divided by the number of packets as a

980
00:42:47,930 --> 00:42:52,940
percentage and this this part is a

981
00:42:51,290 --> 00:42:55,310
little bit scale when I first drew it

982
00:42:52,940 --> 00:42:57,410
but then I realized the bottom line here

983
00:42:55,310 --> 00:43:00,049
is actually 95 percent so we're doing

984
00:42:57,410 --> 00:43:03,080
okay we noticed that we can kind of

985
00:43:00,050 --> 00:43:04,520
solve this problem by adding larger hash

986
00:43:03,080 --> 00:43:06,290
tables so if your hash table so loud you

987
00:43:04,520 --> 00:43:07,700
get less collisions so there's kind of a

988
00:43:06,290 --> 00:43:09,830
trade-off between how much memory you

989
00:43:07,700 --> 00:43:12,799
want to allocate for the base system and

990
00:43:09,830 --> 00:43:14,390
how how much coverage you want how many

991
00:43:12,800 --> 00:43:17,870
of the packets that you actually need

992
00:43:14,390 --> 00:43:19,819
RTT reports on so to address one of our

993
00:43:17,870 --> 00:43:22,400
other goals of course minimizing

994
00:43:19,820 --> 00:43:24,170
perturbation we measure perturbation as

995
00:43:22,400 --> 00:43:26,570
the difference between the instrumented

996
00:43:24,170 --> 00:43:28,550
RTT reported and the RTT without

997
00:43:26,570 --> 00:43:31,040
instrumentation so this is basically we

998
00:43:28,550 --> 00:43:32,720
just discard the the latency results

999
00:43:31,040 --> 00:43:36,320
from the measurement but we want to see

1000
00:43:32,720 --> 00:43:38,509
how does inserting this this tool affect

1001
00:43:36,320 --> 00:43:41,240
the RTT results and so we compare

1002
00:43:38,510 --> 00:43:42,920
ourselves with with F trace so far so

1003
00:43:41,240 --> 00:43:45,259
that blue and the green traces on this

1004
00:43:42,920 --> 00:43:47,120
chart our F trace running from the

1005
00:43:45,260 --> 00:43:49,100
container and from the native context

1006
00:43:47,120 --> 00:43:53,150
respectively and the black and the gray

1007
00:43:49,100 --> 00:43:56,060
traces our are the the same perturbation

1008
00:43:53,150 --> 00:43:58,490
calculation but taken with our solution

1009
00:43:56,060 --> 00:43:59,779
base running instead of F trace so we

1010
00:43:58,490 --> 00:44:02,390
notice is that as there's more traffic

1011
00:43:59,780 --> 00:44:04,790
the F T of the F transportation

1012
00:44:02,390 --> 00:44:07,540
increases significantly and so this is

1013
00:44:04,790 --> 00:44:10,070
actually an effect that all traffic on

1014
00:44:07,540 --> 00:44:11,720
the host would see even traffic that was

1015
00:44:10,070 --> 00:44:13,730
not associated with the measurements

1016
00:44:11,720 --> 00:44:15,080
from running F trace so this is again

1017
00:44:13,730 --> 00:44:17,030
goes like this point why we don't want

1018
00:44:15,080 --> 00:44:18,130
to use these generic tracers or this

1019
00:44:17,030 --> 00:44:21,009
kind of application

1020
00:44:18,130 --> 00:44:22,989
but we noticed that mace scales decently

1021
00:44:21,009 --> 00:44:24,999
it scales better so in there's a couple

1022
00:44:22,989 --> 00:44:27,460
of blips but for the most part is below

1023
00:44:24,999 --> 00:44:30,069
20 microseconds in terms of perturbation

1024
00:44:27,460 --> 00:44:32,259
so I still 20 microseconds and we think

1025
00:44:30,069 --> 00:44:34,269
it's it's serious enough that we want to

1026
00:44:32,259 --> 00:44:36,789
continue sort of optimizing our code and

1027
00:44:34,269 --> 00:44:38,890
so to that effect we've run some AHS

1028
00:44:36,789 --> 00:44:41,259
some initial evaluation of the runtime

1029
00:44:38,890 --> 00:44:43,390
of the different components of mace just

1030
00:44:41,259 --> 00:44:46,779
presented here so on the left of the

1031
00:44:43,390 --> 00:44:48,640
berries again the baton is cut off a

1032
00:44:46,779 --> 00:44:52,599
little bit here but the group of balls

1033
00:44:48,640 --> 00:44:54,460
on the left represents the results

1034
00:44:52,599 --> 00:44:55,660
running in the container from from a

1035
00:44:54,460 --> 00:44:57,190
measurement running in the container the

1036
00:44:55,660 --> 00:44:58,749
group of files on the right that present

1037
00:44:57,190 --> 00:45:01,420
results running from measurement from

1038
00:44:58,749 --> 00:45:03,038
native space so then within that the

1039
00:45:01,420 --> 00:45:05,739
subgroup on the left there's four bars

1040
00:45:03,039 --> 00:45:08,979
the blue red yellow and light blue bars

1041
00:45:05,739 --> 00:45:11,109
those are their system trace probes so

1042
00:45:08,979 --> 00:45:13,089
we notice that they hit the most and

1043
00:45:11,109 --> 00:45:15,420
they're also the slowest running

1044
00:45:13,089 --> 00:45:18,670
functions so really we want to kind of

1045
00:45:15,420 --> 00:45:21,039
focus our efforts there the pink and

1046
00:45:18,670 --> 00:45:22,839
purple bells are the function is

1047
00:45:21,039 --> 00:45:25,150
responsible for managing the ingress and

1048
00:45:22,839 --> 00:45:27,069
egress correlation hash tables and the

1049
00:45:25,150 --> 00:45:28,660
green bar is the function responsible

1050
00:45:27,069 --> 00:45:31,210
for pushing events into the namespace

1051
00:45:28,660 --> 00:45:33,308
ring buffers so you notice that the

1052
00:45:31,210 --> 00:45:34,839
system call trace prints are the slowest

1053
00:45:33,309 --> 00:45:37,239
and this is because our current

1054
00:45:34,839 --> 00:45:39,839
correlation scheme actually requires a

1055
00:45:37,239 --> 00:45:42,190
system called trace points to do copies

1056
00:45:39,839 --> 00:45:44,410
they have to copy data basically back

1057
00:45:42,190 --> 00:45:45,999
from user space because we don't have a

1058
00:45:44,410 --> 00:45:48,249
convenient way to access it from the

1059
00:45:45,999 --> 00:45:50,140
system called trace probe so there's

1060
00:45:48,249 --> 00:45:51,640
some implementation things if we improve

1061
00:45:50,140 --> 00:45:52,779
the implementation slightly we might be

1062
00:45:51,640 --> 00:45:57,609
able to get rid of a lot of that

1063
00:45:52,779 --> 00:45:59,019
overhead so before so our goals for the

1064
00:45:57,609 --> 00:46:01,150
future of this real quickly we want to

1065
00:45:59,019 --> 00:46:03,399
add tcp and UDP support of course we're

1066
00:46:01,150 --> 00:46:05,890
just doing ICMP for now but you could

1067
00:46:03,400 --> 00:46:07,900
imagine that ICMP is a small fraction of

1068
00:46:05,890 --> 00:46:10,390
what internet measurement cares about

1069
00:46:07,900 --> 00:46:13,420
and we want to give us users with things

1070
00:46:10,390 --> 00:46:15,339
like scan through TCP ping or UDP thing

1071
00:46:13,420 --> 00:46:17,170
we're looking at using Hardware time

1072
00:46:15,339 --> 00:46:20,799
stamps these are available pretty

1073
00:46:17,170 --> 00:46:22,150
commonly on a lot of current NICs and if

1074
00:46:20,799 --> 00:46:23,349
we can use Hardware time sense then we

1075
00:46:22,150 --> 00:46:25,479
can account for not only the

1076
00:46:23,349 --> 00:46:27,369
virtualization latency but like all of

1077
00:46:25,479 --> 00:46:28,899
the latency this incurred when you're

1078
00:46:27,369 --> 00:46:30,080
sending packets down to the hardware

1079
00:46:28,900 --> 00:46:31,610
level

1080
00:46:30,080 --> 00:46:32,900
better in flight correlation as I said

1081
00:46:31,610 --> 00:46:34,340
earlier the correlation that we're using

1082
00:46:32,900 --> 00:46:36,020
right now requires these really

1083
00:46:34,340 --> 00:46:38,030
expensive copies so it means either

1084
00:46:36,020 --> 00:46:40,759
stick stuff on the SKF sir finds another

1085
00:46:38,030 --> 00:46:42,080
correlation scheme and we also need to

1086
00:46:40,760 --> 00:46:44,210
address the ease of application of the

1087
00:46:42,080 --> 00:46:46,850
correlation so what I mean by that is

1088
00:46:44,210 --> 00:46:48,830
you saw earlier reporting ICMP sequence

1089
00:46:46,850 --> 00:46:50,660
number and the reason that we have to do

1090
00:46:48,830 --> 00:46:53,630
that is because otherwise it's very very

1091
00:46:50,660 --> 00:46:55,069
hard to connect the latency result that

1092
00:46:53,630 --> 00:46:56,990
you get if you're doing put packet

1093
00:46:55,070 --> 00:46:58,700
Layton sees to the actual packets that

1094
00:46:56,990 --> 00:47:00,140
you were sending we tried just using

1095
00:46:58,700 --> 00:47:01,970
time stamps and the accuracy was just

1096
00:47:00,140 --> 00:47:03,920
too far off at that time scale so

1097
00:47:01,970 --> 00:47:06,500
thinking about using TCP sequence

1098
00:47:03,920 --> 00:47:07,910
numbers or some other application their

1099
00:47:06,500 --> 00:47:09,500
correlation the other thing that's

1100
00:47:07,910 --> 00:47:12,350
possible is that since we're doing

1101
00:47:09,500 --> 00:47:13,340
processing in kernel space we could also

1102
00:47:12,350 --> 00:47:15,950
be running threads that would be

1103
00:47:13,340 --> 00:47:17,480
calculating like like aggregation

1104
00:47:15,950 --> 00:47:19,040
functions over latency so we could be

1105
00:47:17,480 --> 00:47:21,950
doing moving averages we could be doing

1106
00:47:19,040 --> 00:47:23,990
minimums maximums histograms or other

1107
00:47:21,950 --> 00:47:26,299
things again these are just things to

1108
00:47:23,990 --> 00:47:28,819
tack on to the implementation we're also

1109
00:47:26,300 --> 00:47:30,110
looking at applying this tool so we want

1110
00:47:28,820 --> 00:47:32,510
to use it to see if we can improve

1111
00:47:30,110 --> 00:47:35,660
measurement accuracy significantly for

1112
00:47:32,510 --> 00:47:38,090
like geolocation for estimation of costs

1113
00:47:35,660 --> 00:47:40,129
and for businesses that care about

1114
00:47:38,090 --> 00:47:41,750
latency and we also want to start

1115
00:47:40,130 --> 00:47:43,370
working on developing virtual network

1116
00:47:41,750 --> 00:47:45,380
telemetry systems so this is a big issue

1117
00:47:43,370 --> 00:47:47,830
that I was talking about earlier when

1118
00:47:45,380 --> 00:47:49,940
you observe a latency in your network

1119
00:47:47,830 --> 00:47:51,710
especially in a virtualization these

1120
00:47:49,940 --> 00:47:54,350
days it's very very hard to know who's

1121
00:47:51,710 --> 00:47:56,180
responsible so we want to kind of use

1122
00:47:54,350 --> 00:47:57,640
mace and some other tools and maybe kind

1123
00:47:56,180 --> 00:48:00,290
of integrate them into a large-scale

1124
00:47:57,640 --> 00:48:01,400
virtual network to a mature system that

1125
00:48:00,290 --> 00:48:02,990
would answer those questions so you

1126
00:48:01,400 --> 00:48:04,640
could ask where is this latency coming

1127
00:48:02,990 --> 00:48:06,759
from and we say oh it's the it's the

1128
00:48:04,640 --> 00:48:10,279
bridge network or is the overlay network

1129
00:48:06,760 --> 00:48:11,810
so that's another sort of destination

1130
00:48:10,280 --> 00:48:13,280
for these results as far as we know if

1131
00:48:11,810 --> 00:48:16,180
there are others that let me know who

1132
00:48:13,280 --> 00:48:18,740
we're open to whatever so suddenly on

1133
00:48:16,180 --> 00:48:21,649
make presented some of these issues we

1134
00:48:18,740 --> 00:48:24,020
proposed our solution and we showed the

1135
00:48:21,650 --> 00:48:26,600
evaluation of our solution so thank you

1136
00:48:24,020 --> 00:48:29,180
this work is supported by the Euro be

1137
00:48:26,600 --> 00:48:31,190
PRI and I self like to thank unanimous

1138
00:48:29,180 --> 00:48:33,140
viewers for their feedback and also the

1139
00:48:31,190 --> 00:48:35,690
cloud lab team for maintaining this

1140
00:48:33,140 --> 00:48:36,940
great public resource I'll be happy to

1141
00:48:35,690 --> 00:48:39,680
take any questions

1142
00:48:36,940 --> 00:48:42,040
just take one question if someone

1143
00:48:39,680 --> 00:48:42,040
happened

1144
00:48:48,510 --> 00:48:53,520
I should have saw the one okay I think

1145
00:48:51,750 --> 00:48:56,490
that was a very good storytelling so

1146
00:48:53,520 --> 00:48:57,090
thank you and a very good talk thank you

1147
00:48:56,490 --> 00:49:13,410
so much

1148
00:48:57,090 --> 00:49:17,130
okay finally I'm one up and our last

1149
00:49:13,410 --> 00:49:18,660
speaker and I just terrible memory so

1150
00:49:17,130 --> 00:49:22,860
I'm sorry

1151
00:49:18,660 --> 00:49:26,100
is Danny la la toast who is from the

1152
00:49:22,860 --> 00:49:30,950
University of Campinas unicamp in Brazil

1153
00:49:26,100 --> 00:49:33,569
and this is a talk about an ITF protocol

1154
00:49:30,950 --> 00:49:39,000
supporting multi domain use cases with

1155
00:49:33,570 --> 00:49:39,990
Alto hopefully we can get you on it

1156
00:49:39,000 --> 00:49:42,140
looks like things are gonna work

1157
00:49:39,990 --> 00:49:42,140
Oh

1158
00:50:00,030 --> 00:50:33,490
looks good okay hey hey thank you so

1159
00:50:31,270 --> 00:50:37,660
much for the introduction this is a

1160
00:50:33,490 --> 00:50:40,509
doing work with people from university

1161
00:50:37,660 --> 00:50:44,470
attics and research and Nokia but labs

1162
00:50:40,510 --> 00:50:47,050
spring on telefónica so the rationale of

1163
00:50:44,470 --> 00:50:49,000
the system is to try to summarize the

1164
00:50:47,050 --> 00:50:51,700
coordinate standardization efforts into

1165
00:50:49,000 --> 00:50:54,490
the IETF application layer traffic

1166
00:50:51,700 --> 00:50:58,540
optimization working group to support

1167
00:50:54,490 --> 00:51:01,810
multi domain use cases and then the IDS

1168
00:50:58,540 --> 00:51:03,700
to to provide a keep main requirements

1169
00:51:01,810 --> 00:51:05,590
on neighbor information exposure to

1170
00:51:03,700 --> 00:51:08,460
support such party lemon juice Cadiz and

1171
00:51:05,590 --> 00:51:12,610
finally provide information about new

1172
00:51:08,460 --> 00:51:16,900
and novel mechanisms and instructions to

1173
00:51:12,610 --> 00:51:28,320
to improve the base Delta protocol to

1174
00:51:16,900 --> 00:51:30,760
support a multi domain scenarios so the

1175
00:51:28,320 --> 00:51:33,540
protocol provided information to

1176
00:51:30,760 --> 00:51:36,000
application in order to try to improve

1177
00:51:33,540 --> 00:51:38,500
maintaining the application performance

1178
00:51:36,000 --> 00:51:41,950
basically the neighbor information is

1179
00:51:38,500 --> 00:51:45,130
posted as a start mapped network maps

1180
00:51:41,950 --> 00:51:46,779
called Maps unifier property maps etc in

1181
00:51:45,130 --> 00:51:49,600
order to try to protect the information

1182
00:51:46,780 --> 00:51:52,450
privacy and improve the scalability the

1183
00:51:49,600 --> 00:51:55,350
rings of the Delta protocol a typical

1184
00:51:52,450 --> 00:51:58,299
application where a host disappear

1185
00:51:55,350 --> 00:52:01,600
trying to connect without it for file

1186
00:51:58,300 --> 00:52:04,150
sharing oriented communication but or

1187
00:52:01,600 --> 00:52:08,740
however now Alta is going to be

1188
00:52:04,150 --> 00:52:12,280
considering us as an another SEO many

1189
00:52:08,740 --> 00:52:12,700
scenarios such as a data center network

1190
00:52:12,280 --> 00:52:17,770
on

1191
00:52:12,700 --> 00:52:20,410
Network etc on top provide some

1192
00:52:17,770 --> 00:52:23,380
information publishing interface between

1193
00:52:20,410 --> 00:52:26,440
multiplying and Altis over here for

1194
00:52:23,380 --> 00:52:28,960
example we have a couple of scenarios

1195
00:52:26,440 --> 00:52:32,619
where Delta server and an anticline can

1196
00:52:28,960 --> 00:52:38,890
be place it in a tuple at the Balaji

1197
00:52:32,619 --> 00:52:42,310
Network multiplying can be a

1198
00:52:38,890 --> 00:52:44,799
peer-to-peer playing application or can

1199
00:52:42,310 --> 00:52:48,869
be a racist directory you know you know

1200
00:52:44,800 --> 00:52:53,050
such as a pictorial tracker for example

1201
00:52:48,869 --> 00:52:55,290
in the in the later case the peers are

1202
00:52:53,050 --> 00:52:57,760
not able to to request information

1203
00:52:55,290 --> 00:53:00,009
directly to the altar server instantly

1204
00:52:57,760 --> 00:53:04,119
reserve the right to request information

1205
00:53:00,010 --> 00:53:10,540
to volantis over and after we provide

1206
00:53:04,119 --> 00:53:15,579
information to the port could only be

1207
00:53:10,540 --> 00:53:17,500
the alto provide a generic architected

1208
00:53:15,579 --> 00:53:20,920
to provide native information for

1209
00:53:17,500 --> 00:53:24,280
application in this picture we have a

1210
00:53:20,920 --> 00:53:32,470
high-level overview of T Alto mechanism

1211
00:53:24,280 --> 00:53:35,170
Bank instructions for example the alto

1212
00:53:32,470 --> 00:53:37,990
mechanisms we have the information that

1213
00:53:35,170 --> 00:53:39,369
says directory that allowed to provide

1214
00:53:37,990 --> 00:53:41,950
information about the available

1215
00:53:39,369 --> 00:53:45,760
information versus directory we have the

1216
00:53:41,950 --> 00:53:47,589
information consistency to to specify

1217
00:53:45,760 --> 00:53:49,750
the dependency between difference

1218
00:53:47,589 --> 00:53:53,410
information resources we have an

1219
00:53:49,750 --> 00:53:55,510
information update model to string

1220
00:53:53,410 --> 00:53:58,328
control push an incremental update of

1221
00:53:55,510 --> 00:54:00,940
information resources and also alpha

1222
00:53:58,329 --> 00:54:03,160
introduced instructional modules

1223
00:54:00,940 --> 00:54:05,500
difference of sexual models such as and

1224
00:54:03,160 --> 00:54:09,640
that were not on course not in order to

1225
00:54:05,500 --> 00:54:12,069
to allow network location grouping and

1226
00:54:09,640 --> 00:54:14,379
across between them they patch backdoor

1227
00:54:12,069 --> 00:54:17,890
abstraction to provide a more detailed

1228
00:54:14,380 --> 00:54:20,470
information about the routing using a

1229
00:54:17,890 --> 00:54:22,328
strap network elements and capability

1230
00:54:20,470 --> 00:54:24,488
maps to provide unify

1231
00:54:22,329 --> 00:54:29,890
property maps are pro prints

1232
00:54:24,489 --> 00:54:33,640
capability so this is an overview about

1233
00:54:29,890 --> 00:54:37,629
the cooling October connect we have

1234
00:54:33,640 --> 00:54:39,489
seven orifices a for example from

1235
00:54:37,630 --> 00:54:41,709
debugging staining and the ricotta means

1236
00:54:39,489 --> 00:54:44,859
it's worth define a device at the

1237
00:54:41,709 --> 00:54:47,319
protocol and there are three adults to

1238
00:54:44,859 --> 00:54:49,179
your FEC related to this ever discovery

1239
00:54:47,319 --> 00:54:55,749
be planning consideration a multi-course

1240
00:54:49,179 --> 00:54:59,579
map there are serving internet graph to

1241
00:54:55,749 --> 00:55:03,069
extend the debates Alpha Protocol and a

1242
00:54:59,579 --> 00:55:05,739
set of individual graph some of the

1243
00:55:03,069 --> 00:55:08,469
related to multi domain a scenarios here

1244
00:55:05,739 --> 00:55:10,900
I am including a some potential for

1245
00:55:08,469 --> 00:55:13,449
future topics under discussion to

1246
00:55:10,900 --> 00:55:15,339
reconsider it some of them related to

1247
00:55:13,449 --> 00:55:17,769
the extension for new architect hoods

1248
00:55:15,339 --> 00:55:21,069
extending for new settings such as in

1249
00:55:17,769 --> 00:55:23,019
the pH cloud or the integration of the

1250
00:55:21,069 --> 00:55:26,140
information model and control model and

1251
00:55:23,019 --> 00:55:28,149
yet is also to be seeing the Delta

1252
00:55:26,140 --> 00:55:31,118
survey in order to map dickering

1253
00:55:28,150 --> 00:55:37,269
although implementations in real use

1254
00:55:31,119 --> 00:55:39,869
cases scenarios so currently multi

1255
00:55:37,269 --> 00:55:43,448
domain use cases are emerging and

1256
00:55:39,869 --> 00:55:46,689
re-emerging will be developed of new

1257
00:55:43,449 --> 00:55:48,609
technologies such as ABA NFP of IG it's

1258
00:55:46,689 --> 00:55:50,709
an example of such in this cases

1259
00:55:48,609 --> 00:55:52,598
including multi domain collaborative

1260
00:55:50,709 --> 00:55:56,948
data science will t remain flexible

1261
00:55:52,599 --> 00:56:00,130
inter-domain routing in the past few

1262
00:55:56,949 --> 00:56:02,319
ITF alto meetings difference individual

1263
00:56:00,130 --> 00:56:03,939
graph were soon meeting summarizing the

1264
00:56:02,319 --> 00:56:05,349
experience of developing multi-domain

1265
00:56:03,939 --> 00:56:08,078
application using alt

1266
00:56:05,349 --> 00:56:11,859
here we have an incomplete list of of

1267
00:56:08,079 --> 00:56:14,380
them so related to the mint even in

1268
00:56:11,859 --> 00:56:16,719
collaborative data science here we have

1269
00:56:14,380 --> 00:56:20,319
a couple of examples on premier

1270
00:56:16,719 --> 00:56:22,660
scientific experiments for example

1271
00:56:20,319 --> 00:56:25,449
beloved hi uncle along here square

1272
00:56:22,660 --> 00:56:27,788
kilometer array such experiment push

1273
00:56:25,449 --> 00:56:30,130
scientific discovery bond bodies and

1274
00:56:27,789 --> 00:56:34,170
rely on workflows that coordinator

1275
00:56:30,130 --> 00:56:34,170
graphically is the material sources

1276
00:56:34,310 --> 00:56:38,420
here we have the example of the morning

1277
00:56:37,580 --> 00:56:43,460
of the ellipse

1278
00:56:38,420 --> 00:56:46,940
let's see beta from poor 102m dirty a

1279
00:56:43,460 --> 00:56:50,270
storage site this type of scientific

1280
00:56:46,940 --> 00:56:52,700
workflow use multiple domains with a

1281
00:56:50,270 --> 00:56:54,650
Bella Union resources to Lang difference

1282
00:56:52,700 --> 00:56:56,870
application objects of the key

1283
00:56:54,650 --> 00:56:59,210
requirement East above distributed world

1284
00:56:56,870 --> 00:57:01,779
flow ability to decide multiple

1285
00:56:59,210 --> 00:57:06,280
resources across multiple domains

1286
00:57:01,780 --> 00:57:06,280
therefore apologia news applications

1287
00:57:06,490 --> 00:57:10,819
remain Seraphin change changing and

1288
00:57:08,990 --> 00:57:13,129
entering that your service often

1289
00:57:10,820 --> 00:57:16,310
requires physical arrears and inflation

1290
00:57:13,130 --> 00:57:18,710
in a specific order a quarantine mobile

1291
00:57:16,310 --> 00:57:21,320
operator is told of an employee to a

1292
00:57:18,710 --> 00:57:23,030
customer the possibility of configuring

1293
00:57:21,320 --> 00:57:26,120
network services where that recipient

1294
00:57:23,030 --> 00:57:28,550
resources and perform on such the

1295
00:57:26,120 --> 00:57:30,799
resources are are expected to be

1296
00:57:28,550 --> 00:57:33,290
available across multiple domains may

1297
00:57:30,800 --> 00:57:36,140
different technologies or different

1298
00:57:33,290 --> 00:57:38,840
administrations as i mentioning

1299
00:57:36,140 --> 00:57:42,500
Antoinette all services is its composite

1300
00:57:38,840 --> 00:57:45,760
by a set of built on mobile functions as

1301
00:57:42,500 --> 00:57:48,740
an asset off of that

1302
00:57:45,760 --> 00:57:53,090
foggy deployment official problem in

1303
00:57:48,740 --> 00:57:54,500
both the to discover the best scandal

1304
00:57:53,090 --> 00:57:57,680
openings and debates

1305
00:57:54,500 --> 00:57:59,450
feasible path to connect such domains in

1306
00:57:57,680 --> 00:58:01,120
order to take up a nice implement

1307
00:57:59,450 --> 00:58:04,549
efficient network management need to

1308
00:58:01,120 --> 00:58:06,410
need to implementing an every mentor in

1309
00:58:04,550 --> 00:58:08,600
order to to get a real-time

1310
00:58:06,410 --> 00:58:12,410
representation of the available noble

1311
00:58:08,600 --> 00:58:13,970
and trusted to resources once in every

1312
00:58:12,410 --> 00:58:16,670
mentor is being an information

1313
00:58:13,970 --> 00:58:18,740
publishing mekinese is also necessary in

1314
00:58:16,670 --> 00:58:22,940
order to the nether inventory can

1315
00:58:18,740 --> 00:58:25,419
provide an information to the to the

1316
00:58:22,940 --> 00:58:25,420
managing existing

1317
00:58:32,450 --> 00:58:36,319
here we have another potential

1318
00:58:35,570 --> 00:58:40,130
multi-domain

1319
00:58:36,320 --> 00:58:41,990
a scenario well the network arrived I

1320
00:58:40,130 --> 00:58:44,240
was bummed if I granted capability of

1321
00:58:41,990 --> 00:58:46,160
fvm from inter-domain setup to multi

1322
00:58:44,240 --> 00:58:49,399
domain settings to provide flexible

1323
00:58:46,160 --> 00:58:51,560
inter domain routing traditional inter

1324
00:58:49,400 --> 00:58:53,870
domain routing protocols are limited

1325
00:58:51,560 --> 00:58:57,170
because usually they provide a single

1326
00:58:53,870 --> 00:58:59,779
pair outing or limiting the clients bad

1327
00:58:57,170 --> 00:59:01,550
choices so flexible multi domain

1328
00:58:59,780 --> 00:59:04,370
wrapping allowed users to specify

1329
00:59:01,550 --> 00:59:07,400
routing action at the provider network

1330
00:59:04,370 --> 00:59:11,270
this is a with more flexible matching

1331
00:59:07,400 --> 00:59:13,400
condition and no choices on growth so by

1332
00:59:11,270 --> 00:59:16,310
the network arrival can expose not only

1333
00:59:13,400 --> 00:59:22,220
coding a yourself but also available get

1334
00:59:16,310 --> 00:59:24,560
on your second route here we have a

1335
00:59:22,220 --> 00:59:27,009
couple of requirement for Alta to

1336
00:59:24,560 --> 00:59:29,509
support new multi the main use cases a

1337
00:59:27,010 --> 00:59:32,060
modern use cases require information on

1338
00:59:29,510 --> 00:59:34,400
properties and capability for different

1339
00:59:32,060 --> 00:59:37,100
network sources including transport

1340
00:59:34,400 --> 00:59:39,710
resources processing the sources is

1341
00:59:37,100 --> 00:59:41,839
startups or services so a devious case

1342
00:59:39,710 --> 00:59:44,870
you need to akka state multiple sources

1343
00:59:41,840 --> 00:59:47,150
in multiple networks off so bad a

1344
00:59:44,870 --> 00:59:49,270
unified representation or capabilities

1345
00:59:47,150 --> 00:59:52,160
of multiple sources is a key requirement

1346
00:59:49,270 --> 00:59:56,430
for news even a negative formation is

1347
00:59:52,160 --> 00:59:58,009
pressure existing representations

1348
00:59:56,430 --> 01:00:02,180
[Music]

1349
00:59:58,010 --> 01:00:04,310
tend to focus on single domains so in

1350
01:00:02,180 --> 01:00:05,839
the given name is cases that related

1351
01:00:04,310 --> 01:00:07,970
information career a target from

1352
01:00:05,840 --> 01:00:11,120
multiple network to compute into an

1353
01:00:07,970 --> 01:00:12,919
information as such a structure that's

1354
01:00:11,120 --> 01:00:15,140
apolog regression of multiple network

1355
01:00:12,920 --> 01:00:22,780
into a single and built on mobile is

1356
01:00:15,140 --> 01:00:22,779
another key requirement so in order to

1357
01:00:23,440 --> 01:00:29,560
the multi domain abstraction is use it

1358
01:00:26,090 --> 01:00:31,930
to to solve the application layer

1359
01:00:29,560 --> 01:00:35,090
organization across multiple domains

1360
01:00:31,930 --> 01:00:37,129
typically previous cases a can be

1361
01:00:35,090 --> 01:00:41,720
modulate and a certain accession problem

1362
01:00:37,130 --> 01:00:44,240
F where F if initiation function basic

1363
01:00:41,720 --> 01:00:46,419
all two to type of

1364
01:00:44,240 --> 01:00:49,368
it's representing the network parameters

1365
01:00:46,420 --> 01:00:56,329
and we're representing the application

1366
01:00:49,369 --> 01:00:59,029
parameters such a AP function is is also

1367
01:00:56,329 --> 01:01:01,819
contain two type of constraints X

1368
01:00:59,029 --> 01:01:04,730
representing the networking constraints

1369
01:01:01,819 --> 01:01:08,000
and Grider presenting the application

1370
01:01:04,730 --> 01:01:11,210
constraints and the lack of true

1371
01:01:08,000 --> 01:01:15,680
knowledge me or or controller will be

1372
01:01:11,210 --> 01:01:18,109
network limit the potential values of X

1373
01:01:15,680 --> 01:01:21,078
for example bandwidth delay packet noise

1374
01:01:18,109 --> 01:01:23,509
etc so the multi domain networking after

1375
01:01:21,079 --> 01:01:25,400
I shown is aiming to at providing such

1376
01:01:23,509 --> 01:01:30,140
constraint in order to solve this

1377
01:01:25,400 --> 01:01:33,140
optimization problem what is the basic

1378
01:01:30,140 --> 01:01:37,069
formulation application that we network

1379
01:01:33,140 --> 01:01:40,250
by asking to carry traffic for a set of

1380
01:01:37,069 --> 01:01:44,180
flow in this example we have two flows

1381
01:01:40,250 --> 01:01:47,930
everyone left that will travel different

1382
01:01:44,180 --> 01:01:50,509
networks each H a flow has a set of

1383
01:01:47,930 --> 01:01:52,940
property for example Pat's representing

1384
01:01:50,509 --> 01:01:55,569
the frequency of network device that the

1385
01:01:52,940 --> 01:01:59,440
packet of flow will travels delay

1386
01:01:55,569 --> 01:02:03,220
available bandwidth etc in multi domain

1387
01:01:59,440 --> 01:02:05,960
setting another property may involve

1388
01:02:03,220 --> 01:02:08,779
network properties of multiple

1389
01:02:05,960 --> 01:02:10,970
components for example in case of being

1390
01:02:08,779 --> 01:02:14,539
denied property momentum a setting

1391
01:02:10,970 --> 01:02:18,919
should be the zoom of the delay delay

1392
01:02:14,539 --> 01:02:20,960
property in each network so the idea

1393
01:02:18,920 --> 01:02:22,789
here is to provide the ability to

1394
01:02:20,960 --> 01:02:24,829
discover aggregate and expose

1395
01:02:22,789 --> 01:02:27,549
information of multiple domain networks

1396
01:02:24,829 --> 01:02:31,880
to provide a single consistency

1397
01:02:27,549 --> 01:02:34,359
consisting on built on network view and

1398
01:02:31,880 --> 01:02:37,000
represent that information using a

1399
01:02:34,359 --> 01:02:41,210
kinetic compaq

1400
01:02:37,000 --> 01:02:41,900
mathematical programming constraints so

1401
01:02:41,210 --> 01:02:46,069
to give

1402
01:02:41,900 --> 01:02:48,740
if example here we have I used that one

1403
01:02:46,069 --> 01:02:51,410
to request to to see weeks for example

1404
01:02:48,740 --> 01:02:54,799
from Souls 1 to destination wagons

1405
01:02:51,410 --> 01:02:57,740
concerts to to destination to webseries

1406
01:02:54,799 --> 01:03:00,799
show upcoming a common link link link

1407
01:02:57,740 --> 01:03:02,779
tree and me for so so that is not

1408
01:03:00,799 --> 01:03:05,750
possible to receive to reserve a hundred

1409
01:03:02,779 --> 01:03:08,539
gigabytes for both circuits using the

1410
01:03:05,750 --> 01:03:11,270
the mathematical programming can say we

1411
01:03:08,539 --> 01:03:13,339
can generate linear inequalities to

1412
01:03:11,270 --> 01:03:15,079
provide a compact representation of the

1413
01:03:13,339 --> 01:03:19,490
available bandwidth or flow through a

1414
01:03:15,079 --> 01:03:22,190
network for example here x1 and X to

1415
01:03:19,490 --> 01:03:25,038
represent the available bandwidth from

1416
01:03:22,190 --> 01:03:26,980
for flow one and flowing two

1417
01:03:25,039 --> 01:03:29,779
respectively

1418
01:03:26,980 --> 01:03:32,299
so please receive instruction that

1419
01:03:29,779 --> 01:03:34,430
lesson BSL feasible region of the

1420
01:03:32,299 --> 01:03:38,270
neighbor for providing results to a set

1421
01:03:34,430 --> 01:03:41,710
of flows as such a song and we never

1422
01:03:38,270 --> 01:03:44,829
know qualities can be redundant

1423
01:03:41,710 --> 01:03:49,160
redundant inequalities I have removed

1424
01:03:44,829 --> 01:03:53,839
using a polynomial time optimal

1425
01:03:49,160 --> 01:03:56,990
algorithm taking the previous example

1426
01:03:53,839 --> 01:04:00,380
from a single network to a multi domain

1427
01:03:56,990 --> 01:04:04,009
at work here we have a collaborative

1428
01:04:00,380 --> 01:04:09,349
network and we remember members and I

1429
01:04:04,010 --> 01:04:11,000
also want to request so Danny have to

1430
01:04:09,349 --> 01:04:15,099
get that back but also can you wrap up

1431
01:04:11,000 --> 01:04:15,099
in about a minute ok

1432
01:04:21,619 --> 01:04:37,470
huh how maybe it was maybe you can tell

1433
01:04:25,950 --> 01:04:39,269
them what you what the info was can you

1434
01:04:37,470 --> 01:04:41,578
kind of come to you oh all right let

1435
01:04:39,269 --> 01:04:46,709
come to your bug to some of your

1436
01:04:41,579 --> 01:04:48,569
conclusions without the slides okay so

1437
01:04:46,710 --> 01:04:53,599
we we want to wrap up and about a minute

1438
01:04:48,569 --> 01:04:56,839
I've got some closing remarks - okay so

1439
01:04:53,599 --> 01:04:59,910
yes am i right the idea was to try to -

1440
01:04:56,839 --> 01:05:01,880
to show a be covering a standardization

1441
01:04:59,910 --> 01:05:05,160
effort into the alto working group

1442
01:05:01,880 --> 01:05:09,480
provide new these are okada means to

1443
01:05:05,160 --> 01:05:12,269
improve the base at the protocol to give

1444
01:05:09,480 --> 01:05:16,309
in to the the more experimental

1445
01:05:12,269 --> 01:05:21,629
evaluation to the mental many scenarios

1446
01:05:16,309 --> 01:05:23,849
and the idea is to try to embody a 2d to

1447
01:05:21,630 --> 01:05:39,380
the to the authorization that we may

1448
01:05:23,849 --> 01:05:41,099
place if this starts a also also you're

1449
01:05:39,380 --> 01:05:44,130
welcome to join us

1450
01:05:41,099 --> 01:05:47,009
that's it okay thank you let's thank the

1451
01:05:44,130 --> 01:05:48,779
speaker and there is a hard problem to

1452
01:05:47,009 --> 01:05:51,299
tackle so thank you for presenting that

1453
01:05:48,779 --> 01:05:53,249
um I think Colin wants to make oh let's

1454
01:05:51,299 --> 01:05:55,380
have if there's any one question we can

1455
01:05:53,249 --> 01:05:57,779
manage one otherwise we're going to turn

1456
01:05:55,380 --> 01:05:59,519
it back over to the IRT f chair Colin

1457
01:05:57,779 --> 01:06:02,880
for his closing remarks

1458
01:05:59,519 --> 01:06:11,959
Oh Philippa first okay all right so

1459
01:06:02,880 --> 01:06:11,960
thank you very much not too much

