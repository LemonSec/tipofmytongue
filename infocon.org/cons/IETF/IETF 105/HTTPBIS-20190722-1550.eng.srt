1
00:00:35,260 --> 00:00:43,910
all right was there a complaint about

2
00:00:37,160 --> 00:00:45,319
the slides from the gallery the acronym

3
00:00:43,910 --> 00:00:47,148
for the working group or the short name

4
00:00:45,320 --> 00:00:48,739
has abyss event the name of the working

5
00:00:47,149 --> 00:00:54,800
group is officially the HTTP working

6
00:00:48,739 --> 00:00:58,129
group and that's because after we

7
00:00:54,800 --> 00:01:00,828
finished this I asked the area director

8
00:00:58,130 --> 00:01:03,530
at the time he was also the Curan area

9
00:01:00,829 --> 00:01:04,759
director but yeah this if we could

10
00:01:03,530 --> 00:01:06,619
change the name he said no it's too much

11
00:01:04,759 --> 00:01:16,100
trouble so we changed the name but not

12
00:01:06,619 --> 00:01:18,920
the acronym hello welcome to Monday

13
00:01:16,100 --> 00:01:22,158
session one of HTTP or the HP working

14
00:01:18,920 --> 00:01:23,840
group if you prefer we have a pretty

15
00:01:22,159 --> 00:01:25,310
full agenda today mostly made of both

16
00:01:23,840 --> 00:01:27,409
talking about our active and adopted

17
00:01:25,310 --> 00:01:30,189
drafts including a couple that are new

18
00:01:27,409 --> 00:01:31,399
on our plate since the last time we met

19
00:01:30,189 --> 00:01:34,548
okay

20
00:01:31,399 --> 00:01:36,950
and we're just about ready to go we're

21
00:01:34,549 --> 00:01:38,659
also going to talk about prioritization

22
00:01:36,950 --> 00:01:40,189
a little later on so we'll have a chance

23
00:01:38,659 --> 00:01:43,069
to agenda fashion you and mark puts up

24
00:01:40,189 --> 00:01:44,809
the agenda salon and the blue sheets

25
00:01:43,069 --> 00:01:46,849
have been started to be passed around

26
00:01:44,810 --> 00:01:48,889
already which is great we've also

27
00:01:46,849 --> 00:01:49,880
established the scribes and minute

28
00:01:48,889 --> 00:01:53,149
takers so thank you for your

29
00:01:49,880 --> 00:01:54,439
volunteerism to the IETF up on the

30
00:01:53,149 --> 00:01:56,060
screen now is the note well the note

31
00:01:54,439 --> 00:01:57,678
well governs your contributions to the

32
00:01:56,060 --> 00:01:59,270
IETF and the intellectual property

33
00:01:57,679 --> 00:02:01,069
they're on if you have questions about

34
00:01:59,270 --> 00:02:06,020
the note well come chat with us or even

35
00:02:01,069 --> 00:02:09,270
better our ad next slide

36
00:02:06,020 --> 00:02:11,008
like I say more huh oh it's a check

37
00:02:09,270 --> 00:02:15,780
check and check thank you again everyone

38
00:02:11,008 --> 00:02:17,579
and here is our agenda and you can see

39
00:02:15,780 --> 00:02:19,590
the list of active extensive drafts on

40
00:02:17,580 --> 00:02:21,890
the official agenda would anyone like to

41
00:02:19,590 --> 00:02:27,290
make changes thereupon

42
00:02:21,890 --> 00:02:30,269
going once going twice sold

43
00:02:27,290 --> 00:02:31,950
all right so we'll kick it off the first

44
00:02:30,270 --> 00:02:34,020
draft we're going to talk about it has

45
00:02:31,950 --> 00:02:36,570
been actually adopted since the last

46
00:02:34,020 --> 00:02:38,100
time we met together and I think believe

47
00:02:36,570 --> 00:02:47,940
Lucas is going to do the update and

48
00:02:38,100 --> 00:02:49,740
presentation on it thanks Lucas hello

49
00:02:47,940 --> 00:02:52,280
so this patrick said this was recently

50
00:02:49,740 --> 00:02:55,260
adopted thank you everyone for your

51
00:02:52,280 --> 00:02:57,030
implicit support what is this thing this

52
00:02:55,260 --> 00:02:59,190
is called resource digests but it's

53
00:02:57,030 --> 00:03:03,060
about refreshing at nigh on

54
00:02:59,190 --> 00:03:06,090
twenty-year-old RFC which is 30 to 30 so

55
00:03:03,060 --> 00:03:10,709
we've gone to the next slide as you see

56
00:03:06,090 --> 00:03:12,090
this is 2002 done by Mogul and it tried

57
00:03:10,709 --> 00:03:14,459
to fix a problem at the time and the

58
00:03:12,090 --> 00:03:17,040
draft goes into a lot of discussive

59
00:03:14,459 --> 00:03:21,840
texts about what that problem was it was

60
00:03:17,040 --> 00:03:24,030
even update in 2010 by that RFC to just

61
00:03:21,840 --> 00:03:26,550
add algorithm so on the next slide or

62
00:03:24,030 --> 00:03:29,519
two I'll explain this but not going

63
00:03:26,550 --> 00:03:32,340
there yet it had this this terminology

64
00:03:29,519 --> 00:03:34,350
around instances and entities I don't

65
00:03:32,340 --> 00:03:36,570
want to get into that if you care go and

66
00:03:34,350 --> 00:03:37,890
read it or read the update because it

67
00:03:36,570 --> 00:03:40,410
makes it a lot clearer because it

68
00:03:37,890 --> 00:03:43,649
doesn't actually need to define it

69
00:03:40,410 --> 00:03:46,079
because in the meantime HP beers has

70
00:03:43,650 --> 00:03:47,820
updated things to clarify and the

71
00:03:46,080 --> 00:03:50,580
problem is that now those terms have

72
00:03:47,820 --> 00:03:52,590
inconsistencies with text that people

73
00:03:50,580 --> 00:03:54,450
are more familiar with using and a

74
00:03:52,590 --> 00:03:57,209
building upon today to build new

75
00:03:54,450 --> 00:03:58,890
capabilities and functionality and so

76
00:03:57,209 --> 00:04:01,170
when they come to maybe try to use this

77
00:03:58,890 --> 00:04:04,170
digest header it can be confusing and

78
00:04:01,170 --> 00:04:06,750
problematic and so Roberto Polly and I

79
00:04:04,170 --> 00:04:10,410
have been trying to basically cut away

80
00:04:06,750 --> 00:04:12,269
the chaff get down to the core of what

81
00:04:10,410 --> 00:04:13,470
this thing is because in practice it's

82
00:04:12,269 --> 00:04:18,959
actually quite simple

83
00:04:13,470 --> 00:04:19,108
and this few edge cases that jump out so

84
00:04:18,959 --> 00:04:21,358
we

85
00:04:19,108 --> 00:04:24,080
try to improve upon them in simple terms

86
00:04:21,358 --> 00:04:26,698
the dye dress is just a hash over a

87
00:04:24,080 --> 00:04:28,979
representation all payload body so

88
00:04:26,699 --> 00:04:31,169
you've gone to the next slide as an

89
00:04:28,979 --> 00:04:34,349
example you'd make a request for a thing

90
00:04:31,169 --> 00:04:37,318
get a response back and in this case

91
00:04:34,349 --> 00:04:41,340
it's HelloWorld we have a sha-256 hash

92
00:04:37,319 --> 00:04:44,310
of that body so that I just had a is had

93
00:04:41,340 --> 00:04:46,469
a field is composed of the algorithm

94
00:04:44,310 --> 00:04:48,659
that you're using to calculate the hash

95
00:04:46,469 --> 00:04:53,189
and then the hash itself the format of

96
00:04:48,659 --> 00:04:55,909
that hash can vary could be basics t4 or

97
00:04:53,189 --> 00:05:00,569
some other thing that definition is

98
00:04:55,909 --> 00:05:03,360
basically tied to the algorithm name and

99
00:05:00,569 --> 00:05:05,490
title and so the list of algorithms held

100
00:05:03,360 --> 00:05:08,639
in Ayana is what's listed on the right

101
00:05:05,490 --> 00:05:11,939
hand side there and I've gone to the

102
00:05:08,639 --> 00:05:13,650
next slide I'll come on to that in a

103
00:05:11,939 --> 00:05:16,289
second but what this what's the new

104
00:05:13,650 --> 00:05:18,779
digest thing it's it's minimum as I said

105
00:05:16,289 --> 00:05:22,949
trying to tease the same semantics as

106
00:05:18,779 --> 00:05:25,259
RFC 7230 terminology rather than entity

107
00:05:22,949 --> 00:05:27,509
and this width and we use representation

108
00:05:25,259 --> 00:05:30,180
rather than instance we selected

109
00:05:27,509 --> 00:05:32,009
representation data I don't really want

110
00:05:30,180 --> 00:05:34,759
to get into that what those things mean

111
00:05:32,009 --> 00:05:38,520
but maybe if people need clarifying

112
00:05:34,759 --> 00:05:40,229
horrifying at the end we can do that but

113
00:05:38,520 --> 00:05:42,330
those edge cases I mentioned around when

114
00:05:40,229 --> 00:05:46,169
you're doing different range requests or

115
00:05:42,330 --> 00:05:50,580
content encodings now if I returns

116
00:05:46,169 --> 00:05:53,990
something hash is the hash over the

117
00:05:50,580 --> 00:05:56,219
identity encoding or is it these

118
00:05:53,990 --> 00:05:59,789
broccoli that I've used for that

119
00:05:56,219 --> 00:06:01,500
transfer some of the things that have

120
00:05:59,789 --> 00:06:03,419
happened in the meantime in the 20 years

121
00:06:01,500 --> 00:06:06,449
of security considerations for things

122
00:06:03,419 --> 00:06:08,580
around signatures so digest is you quite

123
00:06:06,449 --> 00:06:10,740
often to protect the payload of a

124
00:06:08,580 --> 00:06:13,198
response and signature head is easy to

125
00:06:10,740 --> 00:06:15,300
protect the metadata and the digest

126
00:06:13,199 --> 00:06:18,360
these are the metadata included in it

127
00:06:15,300 --> 00:06:19,979
and so you can create a better value

128
00:06:18,360 --> 00:06:22,620
proposition by doing those things but

129
00:06:19,979 --> 00:06:26,219
there's those considerations so we've

130
00:06:22,620 --> 00:06:28,110
come to the next word algorithms the

131
00:06:26,219 --> 00:06:31,080
security landscapes changed in the last

132
00:06:28,110 --> 00:06:32,730
20 years so things that were defined in

133
00:06:31,080 --> 00:06:36,450
that header like char

134
00:06:32,730 --> 00:06:38,580
one an md5 a now not recommended and

135
00:06:36,450 --> 00:06:41,520
like who said we we added these things

136
00:06:38,580 --> 00:06:43,650
called identity or content encoding

137
00:06:41,520 --> 00:06:45,419
independent algorithms so it can be a

138
00:06:43,650 --> 00:06:49,760
bit confusing sometimes if you get a

139
00:06:45,420 --> 00:06:52,560
digest back to understand exactly which

140
00:06:49,760 --> 00:06:56,070
content encoding was used to create it

141
00:06:52,560 --> 00:06:59,120
and the draft goes into more detail

142
00:06:56,070 --> 00:07:01,740
about those again it's quite simple

143
00:06:59,120 --> 00:07:03,600
yes next slide please

144
00:07:01,740 --> 00:07:05,460
there's a bunch of open issues that need

145
00:07:03,600 --> 00:07:07,890
input if anyone cares to add anything

146
00:07:05,460 --> 00:07:10,340
they are presented here in order of kind

147
00:07:07,890 --> 00:07:12,870
of divisive nurse they're not urgent but

148
00:07:10,340 --> 00:07:14,849
some of them are harder to debate than

149
00:07:12,870 --> 00:07:16,170
others and you can see if look at the

150
00:07:14,850 --> 00:07:20,130
bottom you know do we need a threat

151
00:07:16,170 --> 00:07:24,780
model maybe one for citing char is

152
00:07:20,130 --> 00:07:27,870
difficult to say but really it was got

153
00:07:24,780 --> 00:07:31,559
mentioned chopped down used with a few

154
00:07:27,870 --> 00:07:33,600
signatures do we want to get into how to

155
00:07:31,560 --> 00:07:37,590
use this thing personally I'd like to

156
00:07:33,600 --> 00:07:39,480
focus on making a message clearer for

157
00:07:37,590 --> 00:07:41,280
what this header is and that any

158
00:07:39,480 --> 00:07:43,020
guidance on how to use it should

159
00:07:41,280 --> 00:07:45,719
probably live elsewhere but I'd really

160
00:07:43,020 --> 00:07:47,909
like opinion on that how to use this

161
00:07:45,720 --> 00:07:50,250
thing with patch requests for instance

162
00:07:47,910 --> 00:07:53,580
filling weird gaps that exist in the

163
00:07:50,250 --> 00:07:56,220
current document in the right way so if

164
00:07:53,580 --> 00:07:57,900
anyone cares please go on to to get up I

165
00:07:56,220 --> 00:08:00,650
don't think we need to go through them

166
00:07:57,900 --> 00:08:06,210
one by one now just for times sake

167
00:08:00,650 --> 00:08:10,440
that's like this is roberto's so yeah he

168
00:08:06,210 --> 00:08:12,870
wants to call us the Akshay vers thanks

169
00:08:10,440 --> 00:08:14,490
Roberta yeah thanks you time thanks for

170
00:08:12,870 --> 00:08:15,690
doctoring this document and I hope that

171
00:08:14,490 --> 00:08:17,820
it's something that it's straightforward

172
00:08:15,690 --> 00:08:20,969
to get done and that can improve the

173
00:08:17,820 --> 00:08:22,349
ecosystem and we do have time to do I

174
00:08:20,970 --> 00:08:23,460
enjoy a couple of those issues from the

175
00:08:22,350 --> 00:08:27,000
floor people have particular things they

176
00:08:23,460 --> 00:08:28,710
want to bring up that's fine or

177
00:08:27,000 --> 00:08:30,420
gentleman Thompson

178
00:08:28,710 --> 00:08:32,478
I like this I like the fact that

179
00:08:30,420 --> 00:08:35,520
someone's finally doing this

180
00:08:32,479 --> 00:08:38,540
few minor comments I'll probably raises

181
00:08:35,520 --> 00:08:41,370
issues we already have a hash functions

182
00:08:38,539 --> 00:08:45,230
registry elsewhere in Ayana and I'd

183
00:08:41,370 --> 00:08:47,580
rather not make another one

184
00:08:45,230 --> 00:08:49,800
do you talk a little bit about how this

185
00:08:47,580 --> 00:08:52,890
interacts with content coatings have you

186
00:08:49,800 --> 00:08:56,099
resolved that one more or less I think

187
00:08:52,890 --> 00:09:00,089
the question might be is the new

188
00:08:56,100 --> 00:09:07,529
identity digests algorithm value of use

189
00:09:00,089 --> 00:09:09,750
to people I suspect it is yeah anyway so

190
00:09:07,529 --> 00:09:12,990
it's a one comment has been how much

191
00:09:09,750 --> 00:09:15,120
does this ad that's new and my response

192
00:09:12,990 --> 00:09:17,850
would be it doesn't add anything new new

193
00:09:15,120 --> 00:09:22,170
algorithms help purify the usage of this

194
00:09:17,850 --> 00:09:24,450
header yes so the other thing to think

195
00:09:22,170 --> 00:09:29,579
about here is the relationship with s RI

196
00:09:24,450 --> 00:09:31,290
and getting that clarified would be kind

197
00:09:29,580 --> 00:09:33,330
of interesting I don't know whether it's

198
00:09:31,290 --> 00:09:35,310
our responsibility or someone else's but

199
00:09:33,330 --> 00:09:36,930
it's worth thinking about I don't know

200
00:09:35,310 --> 00:09:38,579
what whether you want me to open the

201
00:09:36,930 --> 00:09:40,800
issue on that one or not yeah I don't

202
00:09:38,580 --> 00:09:43,470
know of I'm not aware of any existing

203
00:09:40,800 --> 00:09:46,290
problem statement so that so if there is

204
00:09:43,470 --> 00:09:48,240
one or you have one you can build own

205
00:09:46,290 --> 00:09:51,510
appreciate the question that I would ask

206
00:09:48,240 --> 00:09:54,150
there it is if I have an S are I on the

207
00:09:51,510 --> 00:09:56,939
link and I follow that link and I also

208
00:09:54,150 --> 00:10:00,540
had a digest header field on that

209
00:09:56,940 --> 00:10:07,170
response would I expect the Charter 56

210
00:10:00,540 --> 00:10:10,020
value to be the same on the s RI and the

211
00:10:07,170 --> 00:10:11,930
the day just had a field and if you can

212
00:10:10,020 --> 00:10:14,730
say yes that would be really nice and

213
00:10:11,930 --> 00:10:17,459
you could say as much that would be even

214
00:10:14,730 --> 00:10:18,870
nicer good to keep recognized Roberto

215
00:10:17,459 --> 00:10:21,479
because I have a feeling he wants to

216
00:10:18,870 --> 00:10:23,540
respond to that so not sorry not this I

217
00:10:21,480 --> 00:10:23,540
know

218
00:10:37,670 --> 00:10:42,410
okay well we'll figure that out Roberto

219
00:10:40,830 --> 00:10:45,510
in the room

220
00:10:42,410 --> 00:10:48,689
Roberto pay own good to have another uh

221
00:10:45,510 --> 00:10:53,130
Verito around by the way hello

222
00:10:48,690 --> 00:10:56,760
question um we talked about binary or

223
00:10:53,130 --> 00:10:59,730
structured headers in the past and this

224
00:10:56,760 --> 00:11:04,319
intersects here because the header name

225
00:10:59,730 --> 00:11:06,270
and how it is encoded are the same if we

226
00:11:04,320 --> 00:11:07,980
are talking about actual having binary

227
00:11:06,270 --> 00:11:09,569
representations where you don't have to

228
00:11:07,980 --> 00:11:12,120
worry about an encoding of the hash

229
00:11:09,570 --> 00:11:15,680
itself it would make a lot of sense to

230
00:11:12,120 --> 00:11:18,390
make sure that the hash name there is

231
00:11:15,680 --> 00:11:21,089
well known I'm sure you can call it

232
00:11:18,390 --> 00:11:22,800
binary or something like that but it's

233
00:11:21,090 --> 00:11:24,240
interesting to think about the case

234
00:11:22,800 --> 00:11:25,079
where there is no encoding because it's

235
00:11:24,240 --> 00:11:29,670
just the raw bits

236
00:11:25,080 --> 00:11:32,070
okay thank you I was going to suggest

237
00:11:29,670 --> 00:11:34,439
that the essence sorry this is Jeffrey

238
00:11:32,070 --> 00:11:36,150
askin I was going to suggest that the

239
00:11:34,440 --> 00:11:40,170
ESRI question should probably live in

240
00:11:36,150 --> 00:11:48,270
the w3c as a way of using the header

241
00:11:40,170 --> 00:11:49,349
that is defined here and Roberto you

242
00:11:48,270 --> 00:11:58,079
might just have to be channeled through

243
00:11:49,350 --> 00:11:59,180
brother Jabbar from Roy fielding on

244
00:11:58,080 --> 00:12:02,820
jabber

245
00:11:59,180 --> 00:12:05,099
plus one to draft IETF HTTP this digest

246
00:12:02,820 --> 00:12:06,690
header zero zero but it might be nice to

247
00:12:05,100 --> 00:12:08,310
have a little more discussion in the

248
00:12:06,690 --> 00:12:12,150
draft well why the authors think these

249
00:12:08,310 --> 00:12:15,630
fields will be useful in the future what

250
00:12:12,150 --> 00:12:19,410
fields exactly the that I just had to

251
00:12:15,630 --> 00:12:30,110
field it's helpful is really asking for

252
00:12:19,410 --> 00:12:30,110
use cases all folks Martin

253
00:12:30,560 --> 00:12:35,609
to let Roy respond in time I look at

254
00:12:33,270 --> 00:12:37,740
this we have Roy in line so how about we

255
00:12:35,610 --> 00:12:41,580
do the line thing and then I'll open a

256
00:12:37,740 --> 00:12:43,020
new topic can someone in Debra tell me

257
00:12:41,580 --> 00:12:49,400
to go that a red button is broken and

258
00:12:43,020 --> 00:12:49,400
we're sad oh no shall I continue then

259
00:12:58,700 --> 00:13:05,850
someone has already done that the the

260
00:13:02,130 --> 00:13:08,100
media code gods have been summoned one

261
00:13:05,850 --> 00:13:09,300
of one of the questions that I had and

262
00:13:08,100 --> 00:13:10,830
this relates to a similar sort of

263
00:13:09,300 --> 00:13:14,130
discussion we had about content coding a

264
00:13:10,830 --> 00:13:19,290
little while ago is what are the

265
00:13:14,130 --> 00:13:22,730
principles that we use to drive the

266
00:13:19,290 --> 00:13:25,860
process of defining new digest schemes

267
00:13:22,730 --> 00:13:27,690
obviously there's a couple in here some

268
00:13:25,860 --> 00:13:30,030
of them quite simple we have some

269
00:13:27,690 --> 00:13:32,910
schemes that are increasingly complex

270
00:13:30,030 --> 00:13:36,600
and some of them are parameterised in

271
00:13:32,910 --> 00:13:41,400
interesting ways and it's not clear from

272
00:13:36,600 --> 00:13:43,560
the current system how we're supposed to

273
00:13:41,400 --> 00:13:45,480
encode that sort of information so for

274
00:13:43,560 --> 00:13:46,949
instance if you look at the proposal

275
00:13:45,480 --> 00:13:51,440
that Jeffrey and I have been working on

276
00:13:46,950 --> 00:13:55,800
for sort of a progressive digest system

277
00:13:51,440 --> 00:13:58,560
it's the my struct there are parameters

278
00:13:55,800 --> 00:14:02,359
that dictate the size of the blocks that

279
00:13:58,560 --> 00:14:08,040
are used and those parameters dictate

280
00:14:02,360 --> 00:14:09,480
the how the value is calculated so

281
00:14:08,040 --> 00:14:13,530
therefore you need to know them when you

282
00:14:09,480 --> 00:14:16,500
calculate the value and so there's a

283
00:14:13,530 --> 00:14:18,990
really interesting relationship between

284
00:14:16,500 --> 00:14:21,540
the content coding which at the moment

285
00:14:18,990 --> 00:14:23,550
also includes those values and the

286
00:14:21,540 --> 00:14:25,469
digests themselves and there's a

287
00:14:23,550 --> 00:14:27,089
discussion on one of the issues that I

288
00:14:25,470 --> 00:14:30,330
thought might be worth discussing yeah

289
00:14:27,090 --> 00:14:32,280
mm-hmm doesn't anyone have opinions on

290
00:14:30,330 --> 00:14:35,070
that one my opinion would be a single

291
00:14:32,280 --> 00:14:37,439
block of octet for the value of any

292
00:14:35,070 --> 00:14:42,510
single digest but that's that's my

293
00:14:37,440 --> 00:14:44,640
initial put your what you were saying

294
00:14:42,510 --> 00:14:45,900
makes me think that we need to think

295
00:14:44,640 --> 00:14:47,430
about that more carefully because it's

296
00:14:45,900 --> 00:14:49,650
not only content and coding you know you

297
00:14:47,430 --> 00:14:51,420
have identity ones for example but also

298
00:14:49,650 --> 00:14:53,640
we have things like partial content

299
00:14:51,420 --> 00:14:57,360
versus full content and other dimensions

300
00:14:53,640 --> 00:14:58,740
and and how is that going to stack up so

301
00:14:57,360 --> 00:15:01,650
that's slightly different what I was

302
00:14:58,740 --> 00:15:03,030
talking about and yes I agree we need to

303
00:15:01,650 --> 00:15:04,770
talk about that one as well if you're

304
00:15:03,030 --> 00:15:06,240
talking about your progressive yeah this

305
00:15:04,770 --> 00:15:09,120
is talking about the progress mano and

306
00:15:06,240 --> 00:15:11,370
to provide context there the there's a

307
00:15:09,120 --> 00:15:13,620
block size at the start of the stream

308
00:15:11,370 --> 00:15:15,960
that then determines where the

309
00:15:13,620 --> 00:15:17,580
progressive hashes appear the

310
00:15:15,960 --> 00:15:20,820
interleaved into the end of the stream

311
00:15:17,580 --> 00:15:23,430
and you need to know that block size in

312
00:15:20,820 --> 00:15:26,550
order to render the content and I think

313
00:15:23,430 --> 00:15:30,000
it was Roberto who mentioned that and

314
00:15:26,550 --> 00:15:34,199
not this Roberto the other Roberto who

315
00:15:30,000 --> 00:15:35,880
mentioned that when you remove that

316
00:15:34,200 --> 00:15:37,920
content coding and just save the file to

317
00:15:35,880 --> 00:15:41,460
a disc you might still want to be able

318
00:15:37,920 --> 00:15:43,589
to go back and take that hash and prove

319
00:15:41,460 --> 00:15:45,270
that it still applies but you just lost

320
00:15:43,590 --> 00:15:47,160
the emitter information that was encoded

321
00:15:45,270 --> 00:15:49,110
into that strings in alternative

322
00:15:47,160 --> 00:15:52,230
representation even processed that

323
00:15:49,110 --> 00:15:56,510
information possibly be replicated in in

324
00:15:52,230 --> 00:15:59,400
the hash value or put alongside it and

325
00:15:56,510 --> 00:16:02,010
we need to decide how to do that I mean

326
00:15:59,400 --> 00:16:04,140
the digest header allows parameters to

327
00:16:02,010 --> 00:16:07,439
be expressed it's just done in such a

328
00:16:04,140 --> 00:16:09,000
way that they it's not an obvious yeah

329
00:16:07,440 --> 00:16:11,040
like that's that's kind of the gap there

330
00:16:09,000 --> 00:16:12,930
and I Roberto ponder that out to me that

331
00:16:11,040 --> 00:16:16,500
you have some of this capability already

332
00:16:12,930 --> 00:16:19,229
but it's it's pretty badly expressed and

333
00:16:16,500 --> 00:16:22,110
I think that in a lot of cases we will

334
00:16:19,230 --> 00:16:24,690
have implementations that build these

335
00:16:22,110 --> 00:16:27,930
strings with the assumption that it is

336
00:16:24,690 --> 00:16:29,700
just a single sequence of bits and when

337
00:16:27,930 --> 00:16:31,199
they do need to get parameterised you

338
00:16:29,700 --> 00:16:33,390
will find that it's a problem because

339
00:16:31,200 --> 00:16:36,510
you can't get the extra meta information

340
00:16:33,390 --> 00:16:37,590
there's nobody built it that way all

341
00:16:36,510 --> 00:16:39,720
right we're gonna have to move on what

342
00:16:37,590 --> 00:16:41,100
are we gonna give Roberto as cause here

343
00:16:39,720 --> 00:16:45,410
one more chance to see if the button

344
00:16:41,100 --> 00:16:51,350
works yes Roberto you are on the air hi

345
00:16:45,410 --> 00:16:51,350
yes I want to

346
00:17:03,720 --> 00:17:46,470
because now to become champion because

347
00:17:47,010 --> 00:17:54,850
while solving this issue g4 they digest

348
00:17:51,370 --> 00:17:58,530
rather we could provide so migraines and

349
00:17:54,850 --> 00:18:04,230
majority for both mice and other

350
00:17:58,530 --> 00:18:04,230
specification that builds on digest

351
00:18:06,000 --> 00:18:11,470
that's it thank you so much and thank

352
00:18:09,640 --> 00:18:12,970
you to both of you for taking on this

353
00:18:11,470 --> 00:18:15,490
contribution and working to make up

354
00:18:12,970 --> 00:18:19,990
Chris thanks for listening see you bye

355
00:18:15,490 --> 00:18:28,120
oh well if your question I'm here to

356
00:18:19,990 --> 00:18:30,700
reply sure and for making a crisp issues

357
00:18:28,120 --> 00:18:33,459
list that really helps you know thank

358
00:18:30,700 --> 00:18:35,500
you yep alright next um it's gonna

359
00:18:33,460 --> 00:18:37,120
be about another draft that's pretty new

360
00:18:35,500 --> 00:18:38,340
for us since I believe we adapt to that

361
00:18:37,120 --> 00:18:41,020
since we met in Prague

362
00:18:38,340 --> 00:18:45,659
using just 1.3 with H to David

363
00:18:41,020 --> 00:18:49,210
Benjamin's been doing that work David

364
00:18:45,660 --> 00:18:55,510
yeah there is come on come on up front

365
00:18:49,210 --> 00:18:56,890
so everyone can see you okay so

366
00:18:55,510 --> 00:18:59,050
apparently I missed the memo they were

367
00:18:56,890 --> 00:19:01,450
supposed to talk about this but yeah

368
00:18:59,050 --> 00:19:03,580
there's a draft there's a slight that

369
00:19:01,450 --> 00:19:06,520
there's like one ambiguity with telus

370
00:19:03,580 --> 00:19:08,020
one three HTTP - and like key update

371
00:19:06,520 --> 00:19:10,360
versus renegotiation verse

372
00:19:08,020 --> 00:19:12,370
handshakes certs there's like one

373
00:19:10,360 --> 00:19:13,510
important sentence in this draft plus a

374
00:19:12,370 --> 00:19:14,889
bunch of filler text

375
00:19:13,510 --> 00:19:19,390
I think it's hopefully fairly

376
00:19:14,890 --> 00:19:21,370
straightforward so that has actually

377
00:19:19,390 --> 00:19:22,990
been the feedback during adoption and

378
00:19:21,370 --> 00:19:24,459
I'm I think what we wanted to use this

379
00:19:22,990 --> 00:19:26,740
meeting time for or see if there were

380
00:19:24,460 --> 00:19:29,740
any other issues that need to be opened

381
00:19:26,740 --> 00:19:31,330
here because I think this is great and

382
00:19:29,740 --> 00:19:32,860
if you know if there aren't maybe we

383
00:19:31,330 --> 00:19:34,210
should talk about working group last

384
00:19:32,860 --> 00:19:37,030
call Martin are you gonna ruin that

385
00:19:34,210 --> 00:19:39,970
dream Martin Thompson working group last

386
00:19:37,030 --> 00:19:42,670
call please I don't want this to last

387
00:19:39,970 --> 00:19:53,110
any longer than the three seconds that

388
00:19:42,670 --> 00:19:55,150
David just please sit down so barring

389
00:19:53,110 --> 00:19:57,250
further further feedback I think you'll

390
00:19:55,150 --> 00:20:02,100
see it work all open you know at the end

391
00:19:57,250 --> 00:20:02,100
of this week thanks thank you David

392
00:20:03,000 --> 00:20:06,250
yeah that might be set in a record but

393
00:20:05,110 --> 00:20:19,360
don't count him before they're published

394
00:20:06,250 --> 00:20:21,070
more practice Dallas next one hey my

395
00:20:19,360 --> 00:20:23,159
name is Jude Sakura I'm going to talk

396
00:20:21,070 --> 00:20:25,780
about the proxy status header that

397
00:20:23,160 --> 00:20:29,010
marketing and I myself put together and

398
00:20:25,780 --> 00:20:32,050
present it at the last ATF that's right

399
00:20:29,010 --> 00:20:33,640
as a quick reminder proxy status is a

400
00:20:32,050 --> 00:20:36,490
header that contains detailed

401
00:20:33,640 --> 00:20:37,090
information about why particular

402
00:20:36,490 --> 00:20:39,580
requests

403
00:20:37,090 --> 00:20:41,830
fight or succeeded in a journey through

404
00:20:39,580 --> 00:20:44,260
various intermediaries Citians reverse

405
00:20:41,830 --> 00:20:46,360
proxies and whatnot this is not a new

406
00:20:44,260 --> 00:20:51,100
concept it's in dawn many times we just

407
00:20:46,360 --> 00:20:54,429
trying to standardize it so what changed

408
00:20:51,100 --> 00:20:55,750
since last night EF first of all that

409
00:20:54,430 --> 00:20:57,240
there are four sub those that by the

410
00:20:55,750 --> 00:20:59,770
working group so thank you for that

411
00:20:57,240 --> 00:21:04,260
we've also made some editorial changes

412
00:20:59,770 --> 00:21:07,020
and aligned no identifiers with the cash

413
00:21:04,260 --> 00:21:10,480
Draft

414
00:21:07,020 --> 00:21:15,180
there are two open issues we have time

415
00:21:10,480 --> 00:21:15,180
so so I can go through them quickly

416
00:21:15,720 --> 00:21:20,830
first of the issues is about adding

417
00:21:18,520 --> 00:21:21,580
detailed status types for HTTP requests

418
00:21:20,830 --> 00:21:24,330
errors

419
00:21:21,580 --> 00:21:27,070
so right now we have about dozen of

420
00:21:24,330 --> 00:21:29,139
types for response errors but we have

421
00:21:27,070 --> 00:21:31,678
only one for request errors

422
00:21:29,139 --> 00:21:34,418
it's called HTTP request error and we

423
00:21:31,679 --> 00:21:36,340
piggyback on the status codes to convey

424
00:21:34,419 --> 00:21:38,649
the information about why the particular

425
00:21:36,340 --> 00:21:42,639
request failed and this is kind of

426
00:21:38,649 --> 00:21:45,789
unfortunate because a the header is not

427
00:21:42,639 --> 00:21:50,649
self contained so recipe need to look at

428
00:21:45,789 --> 00:21:51,999
both the proxy status type and the HTTP

429
00:21:50,649 --> 00:21:53,199
response code to figure out why the

430
00:21:51,999 --> 00:21:56,409
request failed

431
00:21:53,200 --> 00:21:58,659
it must also means that we are kind of

432
00:21:56,409 --> 00:22:02,409
constrained by existing HTTP status

433
00:21:58,659 --> 00:22:05,980
codes in you know the errors we can

434
00:22:02,409 --> 00:22:08,109
represent and it's much harder to extend

435
00:22:05,980 --> 00:22:11,350
this in the future the internal feedback

436
00:22:08,109 --> 00:22:14,220
I got because of those issues is that

437
00:22:11,350 --> 00:22:18,219
you would basically put the details in

438
00:22:14,220 --> 00:22:19,749
free forum details parameter but since

439
00:22:18,220 --> 00:22:21,700
it's freeform we wouldn't really be

440
00:22:19,749 --> 00:22:25,149
standardizing anything so that's kind of

441
00:22:21,700 --> 00:22:29,259
unfortunate the only downside of this

442
00:22:25,149 --> 00:22:31,539
issue this suggestion is that we would

443
00:22:29,259 --> 00:22:35,590
basically be duplicating information and

444
00:22:31,539 --> 00:22:37,509
some of the common status errors for

445
00:22:35,590 --> 00:22:42,549
existing status codes but I don't think

446
00:22:37,509 --> 00:22:47,320
that's too much of a big deal I kind of

447
00:22:42,549 --> 00:22:49,869
do we've been talking back a huge source

448
00:22:47,320 --> 00:22:51,330
of disagreement between information from

449
00:22:49,869 --> 00:22:53,590
the working group I think would help

450
00:22:51,330 --> 00:22:56,428
alessandro godina CloudFlare I don't

451
00:22:53,590 --> 00:22:59,619
really have information just a question

452
00:22:56,429 --> 00:23:03,269
does this mean that any new status codes

453
00:22:59,619 --> 00:23:07,029
would need to define a new proxy status

454
00:23:03,269 --> 00:23:10,210
no absolutely actually the opposite so

455
00:23:07,029 --> 00:23:11,980
if we keep the current design and you

456
00:23:10,210 --> 00:23:14,859
have a status field on it it just or

457
00:23:11,980 --> 00:23:17,049
sorry in the curt design a new status

458
00:23:14,859 --> 00:23:19,119
code doesn't require any changes to this

459
00:23:17,049 --> 00:23:21,429
it just means that you know so if it's a

460
00:23:19,119 --> 00:23:24,220
411 length required all that the

461
00:23:21,429 --> 00:23:26,169
presence of the proxy status field means

462
00:23:24,220 --> 00:23:28,919
is that this was generated by a proxy

463
00:23:26,169 --> 00:23:32,139
not by the ordered server behind them

464
00:23:28,919 --> 00:23:33,460
and as a reminder in this draft we use

465
00:23:32,139 --> 00:23:35,290
proxy somewhat generously to mean

466
00:23:33,460 --> 00:23:36,880
forward proxy or reverse proxy

467
00:23:35,290 --> 00:23:39,220
Gateway you know any kind of

468
00:23:36,880 --> 00:23:40,590
intermediary node right but like there

469
00:23:39,220 --> 00:23:43,930
you have the the length required

470
00:23:40,590 --> 00:23:46,209
explanation and then the proxy status

471
00:23:43,930 --> 00:23:50,310
right which kind of the pins in the

472
00:23:46,210 --> 00:23:53,950
second proposal where we have a specific

473
00:23:50,310 --> 00:23:56,050
proxy status type for each a kind of

474
00:23:53,950 --> 00:23:58,300
Clyde error you know if we had a new

475
00:23:56,050 --> 00:24:01,180
error status code defined yeah we would

476
00:23:58,300 --> 00:24:04,210
have to define one of these yeah um yeah

477
00:24:01,180 --> 00:24:06,570
so I kind of prefer the first one but

478
00:24:04,210 --> 00:24:09,970
I'm fine either way

479
00:24:06,570 --> 00:24:11,950
yeah or the contrary like if we want to

480
00:24:09,970 --> 00:24:14,620
add new status type we would also need

481
00:24:11,950 --> 00:24:16,660
to make a draft that adds new status

482
00:24:14,620 --> 00:24:19,179
code right whereas this is easier if we

483
00:24:16,660 --> 00:24:21,340
can extend it or we have to come up with

484
00:24:19,180 --> 00:24:23,980
a way to either refine the semantics of

485
00:24:21,340 --> 00:24:26,740
an existing one or define a new proxy

486
00:24:23,980 --> 00:24:31,780
status and lump it onto an existing

487
00:24:26,740 --> 00:24:36,360
status code yeah yeah so like 400 or 500

488
00:24:31,780 --> 00:24:36,360
probably is that the generic ones yeah

489
00:24:37,410 --> 00:24:49,150
any more opinions okay next the second

490
00:24:46,840 --> 00:24:51,699
issue is about handling of forwarded

491
00:24:49,150 --> 00:24:53,500
responses is actually mistake on the

492
00:24:51,700 --> 00:24:57,370
slides it should be forwarded not done

493
00:24:53,500 --> 00:25:01,420
ever so right now all the status types

494
00:24:57,370 --> 00:25:02,860
we have are generated by the proxy

495
00:25:01,420 --> 00:25:05,680
itself

496
00:25:02,860 --> 00:25:07,810
the only exception when that's not true

497
00:25:05,680 --> 00:25:09,880
is the HTTP response status which

498
00:25:07,810 --> 00:25:12,190
basically means that the response was

499
00:25:09,880 --> 00:25:15,460
for that that for from the next hop as

500
00:25:12,190 --> 00:25:17,560
is without any modifications marketing's

501
00:25:15,460 --> 00:25:20,440
it's kind of confusing and the

502
00:25:17,560 --> 00:25:22,540
suggestion here was to add new

503
00:25:20,440 --> 00:25:24,700
informational proxy info header that

504
00:25:22,540 --> 00:25:26,620
would carry the information about each

505
00:25:24,700 --> 00:25:29,980
node so we would still retain the

506
00:25:26,620 --> 00:25:33,219
ability to do HTTP try sorting and stuff

507
00:25:29,980 --> 00:25:35,530
like that and keep proxy status only for

508
00:25:33,220 --> 00:25:41,380
the response is generated by the

509
00:25:35,530 --> 00:25:43,960
intermediaries and so the idea here is

510
00:25:41,380 --> 00:25:45,490
is that when you see a proxy status

511
00:25:43,960 --> 00:25:47,350
header field on a response you know that

512
00:25:45,490 --> 00:25:49,210
the status code that the actual response

513
00:25:47,350 --> 00:25:52,030
was generated by an intermediary

514
00:25:49,210 --> 00:25:53,650
if we have this split where as proxy

515
00:25:52,030 --> 00:25:56,160
info would be information to added

516
00:25:53,650 --> 00:25:57,990
incrementally to the response you know

517
00:25:56,160 --> 00:26:00,070
whatever information you know

518
00:25:57,990 --> 00:26:01,890
opportunistic information about the

519
00:26:00,070 --> 00:26:05,230
connection that we might use for

520
00:26:01,890 --> 00:26:06,970
debugging or whatever without having

521
00:26:05,230 --> 00:26:14,650
that response generated on the actual

522
00:26:06,970 --> 00:26:19,150
proxy node Chris Cummins from Comcast

523
00:26:14,650 --> 00:26:21,840
so under the previous proposal it was

524
00:26:19,150 --> 00:26:25,030
possible for if I understood correctly

525
00:26:21,840 --> 00:26:28,990
for multiple proxies in the chain to

526
00:26:25,030 --> 00:26:31,120
have generated responses right and there

527
00:26:28,990 --> 00:26:33,460
could theoretically be you know one of

528
00:26:31,120 --> 00:26:35,500
the proxies could be returning a cached

529
00:26:33,460 --> 00:26:37,120
error and then another proxy could be

530
00:26:35,500 --> 00:26:41,550
saying well I got an error from upstream

531
00:26:37,120 --> 00:26:43,989
and so I generated dis response codes it

532
00:26:41,550 --> 00:26:51,490
was that actually impossible because it

533
00:26:43,990 --> 00:26:54,550
was possible to express I don't think

534
00:26:51,490 --> 00:27:00,340
you'd see it practically speaking now

535
00:26:54,550 --> 00:27:02,169
okay except for that the well except for

536
00:27:00,340 --> 00:27:04,929
this HTTP response status one that's the

537
00:27:02,170 --> 00:27:08,140
other now yeah there's a lot but I think

538
00:27:04,930 --> 00:27:09,670
you could still see it for in case of

539
00:27:08,140 --> 00:27:12,430
different configurations like if you get

540
00:27:09,670 --> 00:27:15,310
to be response from one or the other

541
00:27:12,430 --> 00:27:17,110
unlike one of the low proxies closer to

542
00:27:15,310 --> 00:27:18,429
downstream but I think all the

543
00:27:17,110 --> 00:27:24,300
currentindex we have none of them would

544
00:27:18,430 --> 00:27:27,370
be taken from cache from question from

545
00:27:24,300 --> 00:27:31,570
it was very possible but I'm not sure if

546
00:27:27,370 --> 00:27:32,919
it was practical yeah been a little bit

547
00:27:31,570 --> 00:27:34,780
since I've read the draft but could you

548
00:27:32,920 --> 00:27:38,140
wind up with a situation where somebody

549
00:27:34,780 --> 00:27:40,629
marked something as stale and so you

550
00:27:38,140 --> 00:27:42,190
have a sinking of that's that's a

551
00:27:40,630 --> 00:27:47,050
different header different draft

552
00:27:42,190 --> 00:27:48,790
distinct deposits yes and so yeah then

553
00:27:47,050 --> 00:27:50,440
this is you know a larger discussion of

554
00:27:48,790 --> 00:27:51,639
we're decomposing these different

555
00:27:50,440 --> 00:27:53,590
mechanisms and making sure that they're

556
00:27:51,640 --> 00:27:56,080
well aligned you know this is about

557
00:27:53,590 --> 00:27:57,459
really just intermediary nodes and their

558
00:27:56,080 --> 00:27:59,290
behaviors whereas that draft is about

559
00:27:57,460 --> 00:28:02,160
caches which can be intermediaries but

560
00:27:59,290 --> 00:28:02,159
they can also be in other places

561
00:28:08,049 --> 00:28:18,879
my fielding okay can you hear me now

562
00:28:12,960 --> 00:28:20,950
yep okay the just in general I know

563
00:28:18,879 --> 00:28:24,789
their people are very fond of these very

564
00:28:20,950 --> 00:28:27,220
long names in in header fields I hate

565
00:28:24,789 --> 00:28:28,929
them particularly when they're repeating

566
00:28:27,220 --> 00:28:31,960
something that's a 3-2 degree code and

567
00:28:28,929 --> 00:28:35,859
the HTTP response already so how about

568
00:28:31,960 --> 00:28:38,200
in the key in the cases where the proxy

569
00:28:35,859 --> 00:28:42,399
status is just indicating that the proxy

570
00:28:38,200 --> 00:28:44,889
is sending this code just use the

571
00:28:42,399 --> 00:28:52,869
three-digit code instead of HTTP

572
00:28:44,889 --> 00:28:54,699
correspond table so I think the proxy if

573
00:28:52,869 --> 00:28:56,499
we do this split so that's that's a

574
00:28:54,700 --> 00:29:00,039
different issue really but if we do this

575
00:28:56,499 --> 00:29:03,190
split then the proxy status header field

576
00:29:00,039 --> 00:29:08,408
will only occur in error responses which

577
00:29:03,190 --> 00:29:11,320
are relatively rare so while I generally

578
00:29:08,409 --> 00:29:13,779
agree with your sense there it's not

579
00:29:11,320 --> 00:29:15,309
like and it's gonna be in every message

580
00:29:13,779 --> 00:29:17,099
having said that I'm happy to have a

581
00:29:15,309 --> 00:29:20,830
discussion or an issue and talk about

582
00:29:17,099 --> 00:29:24,189
making these these things a little bit

583
00:29:20,830 --> 00:29:26,678
smaller where it's appropriate yeah part

584
00:29:24,190 --> 00:29:28,859
of it was that I I think that at this

585
00:29:26,679 --> 00:29:31,720
point the scales are more meaningful

586
00:29:28,859 --> 00:29:34,539
than the things that are written out in

587
00:29:31,720 --> 00:29:39,340
English keeping in mind that you know

588
00:29:34,539 --> 00:29:41,919
not everyone's in English reader so HTTP

589
00:29:39,340 --> 00:29:43,539
response status is an unusual one and I

590
00:29:41,919 --> 00:29:44,950
think we're discussing how it's unusual

591
00:29:43,539 --> 00:29:46,509
right now the other ones are more

592
00:29:44,950 --> 00:29:50,080
descriptive if you can make me do that

593
00:29:46,509 --> 00:29:50,559
previous slide I think it was a good

594
00:29:50,080 --> 00:29:55,769
example

595
00:29:50,559 --> 00:30:01,289
hey the second thing and so basically

596
00:29:55,769 --> 00:30:03,340
the main target of this header is

597
00:30:01,289 --> 00:30:05,289
responses from the origins right and

598
00:30:03,340 --> 00:30:08,559
right now basically the only solution we

599
00:30:05,289 --> 00:30:10,840
have in HTTP what is 502 but gateway or

600
00:30:08,559 --> 00:30:14,080
five or top four gateway timeout right

601
00:30:10,840 --> 00:30:16,109
we here have defined at least twenty or

602
00:30:14,080 --> 00:30:16,109
more

603
00:30:16,260 --> 00:30:21,160
status types that describe in more

604
00:30:19,000 --> 00:30:23,530
detail why this happened right and this

605
00:30:21,160 --> 00:30:25,030
is something that other companies not

606
00:30:23,530 --> 00:30:27,129
all but like a lot of companies

607
00:30:25,030 --> 00:30:28,960
especially CD ends within the paths of

608
00:30:27,130 --> 00:30:31,539
the risk really need for that I don't

609
00:30:28,960 --> 00:30:34,390
believe that existing response codes who

610
00:30:31,539 --> 00:30:36,220
made this information and in particular

611
00:30:34,390 --> 00:30:38,200
they're sometimes pressure to admin

612
00:30:36,220 --> 00:30:40,750
status codes or people you know grab

613
00:30:38,200 --> 00:30:42,610
their own status codes to tariff on

614
00:30:40,750 --> 00:30:44,710
these semantics and so this is really

615
00:30:42,610 --> 00:30:47,850
kind of refining the semantics in a

616
00:30:44,710 --> 00:30:51,700
header and trying to standardize that

617
00:30:47,850 --> 00:30:53,439
find call Verizon media so we do this in

618
00:30:51,700 --> 00:30:55,150
patchy traffic server we have something

619
00:30:53,440 --> 00:30:57,760
like this but we do it via do it via

620
00:30:55,150 --> 00:30:59,710
header and in there we encode every host

621
00:30:57,760 --> 00:31:01,809
and then we basically have all the

622
00:30:59,710 --> 00:31:04,059
status codes of you know what happened

623
00:31:01,809 --> 00:31:05,830
if it's Ram cache yet if it was disk

624
00:31:04,059 --> 00:31:07,780
cache yet we'd have all the you know

625
00:31:05,830 --> 00:31:09,699
when we encode all that stuff is like

626
00:31:07,780 --> 00:31:12,490
error codes and everything and one thing

627
00:31:09,700 --> 00:31:14,740
about bad is having them for each hop is

628
00:31:12,490 --> 00:31:16,240
you know you have this hostname and you

629
00:31:14,740 --> 00:31:17,590
have all of the status codes for each

630
00:31:16,240 --> 00:31:19,000
one of them instead of this you're gonna

631
00:31:17,590 --> 00:31:20,340
have to like parse it out and buy

632
00:31:19,000 --> 00:31:22,570
multiple headers and figure out exactly

633
00:31:20,340 --> 00:31:25,990
what the status codes for each one of

634
00:31:22,570 --> 00:31:28,090
those are so so it seems like you would

635
00:31:25,990 --> 00:31:29,409
want couldn't you add this to like four

636
00:31:28,090 --> 00:31:31,750
did or something like that and then you

637
00:31:29,409 --> 00:31:33,669
have all of the protocol information and

638
00:31:31,750 --> 00:31:37,000
you have all of the for did is a request

639
00:31:33,669 --> 00:31:38,740
10 ago yes

640
00:31:37,000 --> 00:31:43,750
yeah but he's using the via in the

641
00:31:38,740 --> 00:31:46,090
response right yeah so that's a much

642
00:31:43,750 --> 00:31:47,440
larger discussion which we've got the

643
00:31:46,090 --> 00:31:48,908
cash header would you have intended to

644
00:31:47,440 --> 00:31:50,799
have the cash state yeah

645
00:31:48,909 --> 00:31:54,190
proxy info is basically the intermediary

646
00:31:50,799 --> 00:32:01,240
state yes and this is proxy status if we

647
00:31:54,190 --> 00:32:05,230
accept this proposal is just for a proxy

648
00:32:01,240 --> 00:32:07,210
generated error page effectively yep so

649
00:32:05,230 --> 00:32:09,130
that's that's the current breakdown so

650
00:32:07,210 --> 00:32:11,970
if I understand correctly you have more

651
00:32:09,130 --> 00:32:14,380
of the first example here right so what

652
00:32:11,970 --> 00:32:18,520
you currently use something that's more

653
00:32:14,380 --> 00:32:20,980
similar to the current draft which gives

654
00:32:18,520 --> 00:32:24,100
details about each hop crank the details

655
00:32:20,980 --> 00:32:26,140
body talk I've used that scheme and

656
00:32:24,100 --> 00:32:28,480
perhaps because it was undocumented for

657
00:32:26,140 --> 00:32:30,700
so long I found it difficult

658
00:32:28,480 --> 00:32:34,090
quit it actually actually works pretty

659
00:32:30,700 --> 00:32:36,880
well except for decoding that stream yes

660
00:32:34,090 --> 00:32:38,409
that we have actually a special program

661
00:32:36,880 --> 00:32:40,210
that takes the 20 you can have an

662
00:32:38,410 --> 00:32:42,880
extended version of it it was just like

663
00:32:40,210 --> 00:32:44,860
24 characters and then yes you translate

664
00:32:42,880 --> 00:32:47,140
it I agree that's kind of difficult for

665
00:32:44,860 --> 00:32:49,719
end-users I mean for experts and stuff

666
00:32:47,140 --> 00:32:54,070
like that it's not as a gil end-users

667
00:32:49,720 --> 00:32:56,610
and it may be very difficult but I think

668
00:32:54,070 --> 00:32:59,500
something that's shows you your hops

669
00:32:56,610 --> 00:33:02,110
gives you status in each one might be

670
00:32:59,500 --> 00:33:04,330
easier to do than to have it's broken up

671
00:33:02,110 --> 00:33:06,280
into multiple headers right yes that's

672
00:33:04,330 --> 00:33:11,020
my opinion we're gonna have to cut the

673
00:33:06,280 --> 00:33:14,290
line after our job right suppose Roy

674
00:33:11,020 --> 00:33:18,930
fielding from Jabbar I agree when it's

675
00:33:14,290 --> 00:33:18,930
new information and not an existing code

676
00:33:19,020 --> 00:33:25,510
sorry I need a little more context this

677
00:33:21,520 --> 00:33:29,110
is but go back about this basically so

678
00:33:25,510 --> 00:33:32,129
not to avoid duplication of the same

679
00:33:29,110 --> 00:33:36,939
status code so just stick to existing

680
00:33:32,130 --> 00:33:38,380
solutions I think yeah so Martin

681
00:33:36,940 --> 00:33:39,130
Thompson I'm looking at this proposal

682
00:33:38,380 --> 00:33:42,400
here

683
00:33:39,130 --> 00:33:44,530
I just skim through the the discussion

684
00:33:42,400 --> 00:33:48,310
can you explain to me the relationship

685
00:33:44,530 --> 00:33:50,320
between this and buyer and CDN loop and

686
00:33:48,310 --> 00:33:52,570
we're starting to accrue a couple of

687
00:33:50,320 --> 00:33:53,020
these things yeah that would be really

688
00:33:52,570 --> 00:34:00,100
helpful

689
00:33:53,020 --> 00:34:01,389
sure so via is effectively I think in a

690
00:34:00,100 --> 00:34:06,669
lot of people's minds unusable for

691
00:34:01,390 --> 00:34:09,070
anything useful and so cash loop starts

692
00:34:06,670 --> 00:34:11,500
EDM loop effectively abandoned that for

693
00:34:09,070 --> 00:34:13,510
some purposes and probe down to a very

694
00:34:11,500 --> 00:34:15,250
specific purpose CD and loop is a

695
00:34:13,510 --> 00:34:17,320
request header and it's targeted just at

696
00:34:15,250 --> 00:34:20,980
certain kinds of notes so it's very

697
00:34:17,320 --> 00:34:23,170
separable from this cash is for caches

698
00:34:20,980 --> 00:34:24,030
and so a cache would generate it on a

699
00:34:23,170 --> 00:34:26,560
response

700
00:34:24,030 --> 00:34:28,630
sorry cache what we're gonna go on down

701
00:34:26,560 --> 00:34:32,500
staff yes yes cash status

702
00:34:28,630 --> 00:34:35,350
yeah dick that PR this is for

703
00:34:32,500 --> 00:34:37,510
intermediaries and as I explained before

704
00:34:35,350 --> 00:34:40,360
the breakdown that's being proposed is

705
00:34:37,510 --> 00:34:42,080
to break that between just general

706
00:34:40,360 --> 00:34:44,720
intermediary context

707
00:34:42,080 --> 00:34:48,199
and intermediary generated errors which

708
00:34:44,719 --> 00:34:53,029
are different things because from a CDN

709
00:34:48,199 --> 00:34:54,589
standpoint for example you often have to

710
00:34:53,030 --> 00:34:56,450
add a little bit of extra context to

711
00:34:54,590 --> 00:34:58,460
responses for debugging and that's a

712
00:34:56,449 --> 00:35:02,390
very typical thing to do but an error

713
00:34:58,460 --> 00:35:04,220
page often people will write scripts

714
00:35:02,390 --> 00:35:06,710
depending upon that you need those

715
00:35:04,220 --> 00:35:08,089
scripts to be robust and so separating

716
00:35:06,710 --> 00:35:10,640
that information out makes it a little

717
00:35:08,090 --> 00:35:13,400
more obvious that this is yes a CDN or

718
00:35:10,640 --> 00:35:15,319
reverse proxy or proxy generated error

719
00:35:13,400 --> 00:35:18,230
page and treat that as a special case

720
00:35:15,320 --> 00:35:20,660
right thanks that makes me think that

721
00:35:18,230 --> 00:35:23,600
the second direction that you're

722
00:35:20,660 --> 00:35:26,330
proposing is for at least a proxy status

723
00:35:23,600 --> 00:35:28,490
header field a reasonable course to take

724
00:35:26,330 --> 00:35:31,400
but I'm a little concerned about sort of

725
00:35:28,490 --> 00:35:34,430
submarining in whole new proxy

726
00:35:31,400 --> 00:35:37,790
information fields that's somewhat like

727
00:35:34,430 --> 00:35:40,759
via but not not entirely so somewhat

728
00:35:37,790 --> 00:35:43,880
what it's someone like via but not right

729
00:35:40,760 --> 00:35:45,050
entirely it's a sort of well that one

730
00:35:43,880 --> 00:35:46,520
didn't work out so we're just gonna make

731
00:35:45,050 --> 00:35:49,340
another one it's effectively if I we

732
00:35:46,520 --> 00:35:51,350
just make it in here yeah that's why it

733
00:35:49,340 --> 00:35:53,480
has no semantics and no structure it is

734
00:35:51,350 --> 00:35:56,540
just a blob sure that's what you've just

735
00:35:53,480 --> 00:35:58,640
done here isn't it no oh that's the

736
00:35:56,540 --> 00:36:01,430
structured header I'm gonna find sources

737
00:35:58,640 --> 00:36:06,230
announcing yeah and the Hewitt's

738
00:36:01,430 --> 00:36:07,730
parameters like the forward protocol for

739
00:36:06,230 --> 00:36:10,460
example so how we connected to other

740
00:36:07,730 --> 00:36:11,990
Piron to next hop and stuff like that so

741
00:36:10,460 --> 00:36:13,820
it can be extended other than just the

742
00:36:11,990 --> 00:36:15,950
node name so I guess what I'm suggesting

743
00:36:13,820 --> 00:36:17,960
is my wheels we do need to move on but

744
00:36:15,950 --> 00:36:19,970
as Tommy says it's only the illusion of

745
00:36:17,960 --> 00:36:21,380
progress because we're gonna move on to

746
00:36:19,970 --> 00:36:24,939
the cache we should be response at her

747
00:36:21,380 --> 00:36:24,940
she probably continue this discussion

748
00:36:26,050 --> 00:36:30,800
three seconds I'm suggesting that you

749
00:36:28,520 --> 00:36:33,230
move that concept into a separate

750
00:36:30,800 --> 00:36:34,990
document and progress that separately

751
00:36:33,230 --> 00:36:37,250
because otherwise this is you mean is a

752
00:36:34,990 --> 00:36:41,779
proxy in for separated from proxy

753
00:36:37,250 --> 00:36:43,190
scepters I think so I think we let's

754
00:36:41,780 --> 00:36:44,720
talk about it if there becomes a blocker

755
00:36:43,190 --> 00:36:46,700
I'm willing to split it off I don't

756
00:36:44,720 --> 00:36:48,620
think it's going to but one of the

757
00:36:46,700 --> 00:36:50,000
reasons to sort of separate header is is

758
00:36:48,620 --> 00:36:52,460
that the semantics are a little bit

759
00:36:50,000 --> 00:36:54,080
different but very rich on both sides

760
00:36:52,460 --> 00:36:55,460
and smashing it all together is gonna

761
00:36:54,080 --> 00:37:02,328
make it a really complex header

762
00:36:55,460 --> 00:37:17,390
so this place thank you okay next up is

763
00:37:02,329 --> 00:37:23,599
the cache header hello computer so this

764
00:37:17,390 --> 00:37:26,210
document and we have two open issues I

765
00:37:23,599 --> 00:37:28,190
think one very slight one which we refer

766
00:37:26,210 --> 00:37:30,170
to briefly before the name of the header

767
00:37:28,190 --> 00:37:42,020
I think the proposal is to call it the

768
00:37:30,170 --> 00:37:43,970
cache status theater so I don't care the

769
00:37:42,020 --> 00:37:47,780
other issue was a little more

770
00:37:43,970 --> 00:37:49,549
interesting Alex Russo cough who if

771
00:37:47,780 --> 00:37:53,690
folks don't know him is from the old

772
00:37:49,550 --> 00:37:54,589
squid days said unlist a while back when

773
00:37:53,690 --> 00:37:57,319
this first came out if we're gonna

774
00:37:54,589 --> 00:37:58,880
standardize this then you know it's

775
00:37:57,319 --> 00:38:02,390
reasonable to ask whether we want to

776
00:37:58,880 --> 00:38:04,880
just effectively pave the cow paths that

777
00:38:02,390 --> 00:38:05,990
you know the cash X cash which is why we

778
00:38:04,880 --> 00:38:09,260
call it a cash originally because you

779
00:38:05,990 --> 00:38:11,689
just take the X off uh started off as in

780
00:38:09,260 --> 00:38:13,730
squid and maybe even back in harvest I

781
00:38:11,690 --> 00:38:18,079
forget might be something you can answer

782
00:38:13,730 --> 00:38:20,030
that and it was created over time in in

783
00:38:18,079 --> 00:38:23,780
what arguably is in really non optimal

784
00:38:20,030 --> 00:38:26,750
way and so you know the question is do

785
00:38:23,780 --> 00:38:27,890
we want to replicate that because

786
00:38:26,750 --> 00:38:29,290
everybody's very comfortable and

787
00:38:27,890 --> 00:38:31,490
understands what those things mean

788
00:38:29,290 --> 00:38:33,650
including not only implementers but also

789
00:38:31,490 --> 00:38:36,140
people who are consuming these things or

790
00:38:33,650 --> 00:38:37,490
do we want to refactor it and and start

791
00:38:36,140 --> 00:38:39,170
from scratch effectively and make it a

792
00:38:37,490 --> 00:38:40,790
little cleaner and a little more obvious

793
00:38:39,170 --> 00:38:43,069
but some of the combinations of these

794
00:38:40,790 --> 00:38:46,970
things or the corner cases caused a lot

795
00:38:43,069 --> 00:38:49,819
of confusion and so personally I am

796
00:38:46,970 --> 00:38:50,990
pretty neutral about it I am very

797
00:38:49,819 --> 00:38:53,390
comfortable with X cache and I

798
00:38:50,990 --> 00:38:55,700
understand it well sorry I think I

799
00:38:53,390 --> 00:38:57,680
understand it there are some quarters in

800
00:38:55,700 --> 00:39:01,009
there that are probably pretty hairy

801
00:38:57,680 --> 00:39:02,618
I took a strawman approach to you know

802
00:39:01,010 --> 00:39:05,150
how would we break this thing up into

803
00:39:02,619 --> 00:39:07,700
different facets and I put that into the

804
00:39:05,150 --> 00:39:08,810
issue and so if people want to take a

805
00:39:07,700 --> 00:39:10,009
look at that I

806
00:39:08,810 --> 00:39:11,590
want to hear people's impressions of

807
00:39:10,010 --> 00:39:13,850
which way they want to go on this

808
00:39:11,590 --> 00:39:16,160
especially from implementers because

809
00:39:13,850 --> 00:39:18,290
this thing has to get implemented and if

810
00:39:16,160 --> 00:39:19,850
it's the difference between oh yeah it's

811
00:39:18,290 --> 00:39:21,529
just like X cache therefore I can Street

812
00:39:19,850 --> 00:39:23,660
use that code and I don't yeah I can it

813
00:39:21,530 --> 00:39:25,100
support this thing versus here's a whole

814
00:39:23,660 --> 00:39:26,390
new thing and I can't be bothered

815
00:39:25,100 --> 00:39:29,630
implementing these new things that's

816
00:39:26,390 --> 00:39:31,819
important to know and from consumers I

817
00:39:29,630 --> 00:39:39,530
want to hear if if which which way you'd

818
00:39:31,820 --> 00:39:43,190
want to consume this information on the

819
00:39:39,530 --> 00:39:45,710
topic of your first thing from Roy I'd

820
00:39:43,190 --> 00:39:48,980
really really really prefer this to be

821
00:39:45,710 --> 00:39:51,230
cache status most people seem to agree

822
00:39:48,980 --> 00:39:58,700
with Roy yeah I think we're getting to

823
00:39:51,230 --> 00:40:00,170
change that Colin from Congress um so

824
00:39:58,700 --> 00:40:02,750
the one comment I was gonna add to the

825
00:40:00,170 --> 00:40:04,970
previous discussion as well to this one

826
00:40:02,750 --> 00:40:06,440
we currently emit these as part of our

827
00:40:04,970 --> 00:40:08,600
server timing headers that we emit

828
00:40:06,440 --> 00:40:11,540
because it's picked up available in

829
00:40:08,600 --> 00:40:13,549
JavaScript land and so the semantics are

830
00:40:11,540 --> 00:40:16,370
now duplicating and it's helis context

831
00:40:13,550 --> 00:40:18,350
of having a normalized structured data

832
00:40:16,370 --> 00:40:20,450
but also having it represented there so

833
00:40:18,350 --> 00:40:22,549
one consideration lucky day to see how

834
00:40:20,450 --> 00:40:24,560
we can merge some of these or have

835
00:40:22,550 --> 00:40:27,160
anacs-- bridge into the HTML spec so we

836
00:40:24,560 --> 00:40:29,360
can have access to some of these headers

837
00:40:27,160 --> 00:40:31,450
for beaconing purposes so that's the

838
00:40:29,360 --> 00:40:34,190
purpose we use them for is to collect

839
00:40:31,450 --> 00:40:37,339
statistical data from the client-side on

840
00:40:34,190 --> 00:40:38,840
performance etc sure so we can probably

841
00:40:37,340 --> 00:40:40,400
have that conversation maybe with a

842
00:40:38,840 --> 00:40:43,580
fetch box for sure

843
00:40:40,400 --> 00:40:46,300
the second is do you have a notion of

844
00:40:43,580 --> 00:40:50,480
opting in for these additional headers

845
00:40:46,300 --> 00:40:52,160
for debug mode flag tisha I think for

846
00:40:50,480 --> 00:40:53,810
the time for the scope of this we

847
00:40:52,160 --> 00:40:57,290
haven't discussed this explicitly but my

848
00:40:53,810 --> 00:41:00,320
assumption has been that currently it's

849
00:40:57,290 --> 00:41:01,580
it's a case-by-case basis different CD

850
00:41:00,320 --> 00:41:02,990
ends have different approaches to

851
00:41:01,580 --> 00:41:04,549
turning on debug mode and they have

852
00:41:02,990 --> 00:41:06,319
different threat models for exposing

853
00:41:04,550 --> 00:41:07,430
that information likewise different

854
00:41:06,320 --> 00:41:09,560
proxy is going to be configured in

855
00:41:07,430 --> 00:41:11,600
different ways and so if we try to come

856
00:41:09,560 --> 00:41:13,460
up with some sort of negotiation or

857
00:41:11,600 --> 00:41:14,810
triggering mechanism for this I think

858
00:41:13,460 --> 00:41:17,630
we'd probably raise the chances that

859
00:41:14,810 --> 00:41:19,310
this is gonna fail so right now we're

860
00:41:17,630 --> 00:41:21,950
just gonna focus on defining the

861
00:41:19,310 --> 00:41:23,240
semantics and the syntax and then if we

862
00:41:21,950 --> 00:41:24,319
can later down the road gets

863
00:41:23,240 --> 00:41:25,850
agreement about how does one turn on

864
00:41:24,320 --> 00:41:28,850
debugging for CD and Celeste reverse

865
00:41:25,850 --> 00:41:30,049
proxies hey that's great but but we

866
00:41:28,850 --> 00:41:33,100
don't have to couple it to defining

867
00:41:30,050 --> 00:41:36,530
these Semitic since in taxes my thinking

868
00:41:33,100 --> 00:41:39,200
mat stock limelight networks yeah I mean

869
00:41:36,530 --> 00:41:43,640
it in regards to implementation I think

870
00:41:39,200 --> 00:41:47,540
that unless somebody was really driving

871
00:41:43,640 --> 00:41:49,819
us to actually go and refactor this it

872
00:41:47,540 --> 00:41:52,700
would be hard to a hard sell to actually

873
00:41:49,820 --> 00:41:55,030
go and do it so as much as I like the

874
00:41:52,700 --> 00:41:57,799
idea of refactoring making it clean I

875
00:41:55,030 --> 00:42:01,700
think in practice it would be tricky to

876
00:41:57,800 --> 00:42:03,650
do that actually brings to mind Mike one

877
00:42:01,700 --> 00:42:07,189
of my concerns about keeping the current

878
00:42:03,650 --> 00:42:09,560
approach is that from what I've observed

879
00:42:07,190 --> 00:42:12,470
different reverse proxies and forward

880
00:42:09,560 --> 00:42:14,299
proxies and CD ends use all the squid ex

881
00:42:12,470 --> 00:42:16,580
quit tags but they all mean slightly

882
00:42:14,300 --> 00:42:18,110
different things and there's gonna be a

883
00:42:16,580 --> 00:42:19,790
great temptation for everybody just to

884
00:42:18,110 --> 00:42:21,590
say okay let's just take that code and

885
00:42:19,790 --> 00:42:23,540
put a new header name on it and you know

886
00:42:21,590 --> 00:42:25,850
it'll diddle the syntax and we're done

887
00:42:23,540 --> 00:42:28,310
and they won't be done because now we

888
00:42:25,850 --> 00:42:34,970
won't have good interrupts so I'm a

889
00:42:28,310 --> 00:42:41,330
little worried about that Chris I'm

890
00:42:34,970 --> 00:42:43,129
speaking for myself yeah I was gonna

891
00:42:41,330 --> 00:42:47,140
bring up exactly the point that you you

892
00:42:43,130 --> 00:42:50,770
just made the the different caches and

893
00:42:47,140 --> 00:42:53,420
intermediaries have slightly different

894
00:42:50,770 --> 00:42:56,440
interpretations of some of these these

895
00:42:53,420 --> 00:42:59,600
words and to me some of the value is

896
00:42:56,440 --> 00:43:04,330
defining the words very specifically and

897
00:42:59,600 --> 00:43:07,490
concretely with all capital letters and

898
00:43:04,330 --> 00:43:10,100
then interrupts then any system that

899
00:43:07,490 --> 00:43:13,490
wants to produce these header fields can

900
00:43:10,100 --> 00:43:16,040
produce the will read the definitions

901
00:43:13,490 --> 00:43:18,080
and produce that and I'm a little bit

902
00:43:16,040 --> 00:43:20,990
concerned that if we if we make it look

903
00:43:18,080 --> 00:43:23,900
very very close to what is already out

904
00:43:20,990 --> 00:43:28,430
there then we're not going to get good

905
00:43:23,900 --> 00:43:31,250
Interop so my current inclination after

906
00:43:28,430 --> 00:43:34,060
listening to this is that you know if

907
00:43:31,250 --> 00:43:36,980
we're able to write down a new thing

908
00:43:34,060 --> 00:43:39,470
accurately which is maybe a big if

909
00:43:36,980 --> 00:43:42,740
or precisely enough that it's it's can

910
00:43:39,470 --> 00:43:45,589
be held to truly we might get something

911
00:43:42,740 --> 00:43:49,250
out there that is it gets more interrupt

912
00:43:45,589 --> 00:43:50,930
but gets there more slowly that that

913
00:43:49,250 --> 00:43:56,770
it'll take more effort for implemented

914
00:43:50,930 --> 00:43:56,770
to help them better yeah but better yeah

915
00:43:57,700 --> 00:44:02,770
and so I'd be inclined to do this

916
00:43:59,780 --> 00:44:07,369
actually based on this little discussion

917
00:44:02,770 --> 00:44:10,759
do any cash implementers one - of any

918
00:44:07,369 --> 00:44:12,230
sort in any device in HTTP what say

919
00:44:10,760 --> 00:44:15,880
anything about how likely or unlikely

920
00:44:12,230 --> 00:44:15,880
they would be to implement that

921
00:44:16,780 --> 00:44:25,130
alessandro godina CloudFlare

922
00:44:18,680 --> 00:44:28,669
um so the more complicated one can in

923
00:44:25,130 --> 00:44:31,150
the end be implemented by just taking

924
00:44:28,670 --> 00:44:36,589
the previous status and then sort of

925
00:44:31,150 --> 00:44:40,280
converting it into different splitting

926
00:44:36,589 --> 00:44:43,819
it up in different values so I think

927
00:44:40,280 --> 00:44:48,710
it's it's not it wouldn't be that hard

928
00:44:43,819 --> 00:44:51,079
to implement maybe not directly in say

929
00:44:48,710 --> 00:44:54,520
the the web server but they may be in

930
00:44:51,079 --> 00:44:58,550
something more high-level that

931
00:44:54,520 --> 00:45:04,060
customizes the responses so I think that

932
00:44:58,550 --> 00:45:04,060
would be fine they're only kind of

933
00:45:04,420 --> 00:45:11,240
problem I would that is at least for us

934
00:45:08,180 --> 00:45:14,629
this information is mostly intended to

935
00:45:11,240 --> 00:45:16,490
be consumed by humans so like you do the

936
00:45:14,630 --> 00:45:18,859
response you do the request and then you

937
00:45:16,490 --> 00:45:22,129
get the header and then you immediately

938
00:45:18,859 --> 00:45:25,310
see it's a hit or a mess so with like a

939
00:45:22,130 --> 00:45:29,150
bunch more fields it might be harder for

940
00:45:25,310 --> 00:45:31,190
people to interpret the result but other

941
00:45:29,150 --> 00:45:33,920
than that it's I mean I'm fine with the

942
00:45:31,190 --> 00:45:35,569
right so maybe try and work out some

943
00:45:33,920 --> 00:45:37,910
examples and see how human readable

944
00:45:35,569 --> 00:45:43,759
there and tweak based on that I can see

945
00:45:37,910 --> 00:45:46,129
that yeah so so I see Brian getting in

946
00:45:43,760 --> 00:45:48,349
line don't nobody's gonna say but I was

947
00:45:46,130 --> 00:45:51,079
gonna say from the Apache traffic server

948
00:45:48,349 --> 00:45:53,630
community I think it's pretty likely

949
00:45:51,079 --> 00:45:56,509
somebody will and somebody will

950
00:45:53,630 --> 00:45:58,940
implement that I can think of some folks

951
00:45:56,509 --> 00:46:05,749
on my teams that have a have a desire

952
00:45:58,940 --> 00:46:09,289
for this kind of information repair to

953
00:46:05,749 --> 00:46:12,649
pay own so the browser has also had a

954
00:46:09,289 --> 00:46:14,420
cache and probing that cache and or

955
00:46:12,650 --> 00:46:16,459
requesting things from that cache has

956
00:46:14,420 --> 00:46:17,959
been either non-existent or problematic

957
00:46:16,459 --> 00:46:21,319
from the point of view of the

958
00:46:17,959 --> 00:46:24,440
application for instance there's this

959
00:46:21,319 --> 00:46:28,450
push thing and we have no way of knowing

960
00:46:24,440 --> 00:46:28,450
that we got it because of push let's say

961
00:46:28,479 --> 00:46:33,379
that's a separate issue potentially but

962
00:46:30,950 --> 00:46:34,700
maybe not and I think there's a separate

963
00:46:33,380 --> 00:46:38,599
question we should be asking about this

964
00:46:34,700 --> 00:46:40,069
is how we should be using HTTP probing

965
00:46:38,599 --> 00:46:45,200
the local cache as opposed to a remote

966
00:46:40,069 --> 00:46:47,749
cache Brian call patchy traffic server

967
00:46:45,200 --> 00:46:49,430
so we looking at all the different

968
00:46:47,749 --> 00:46:51,229
status codes you have for cache the only

969
00:46:49,430 --> 00:46:54,680
one that we went ahead and expanded on

970
00:46:51,229 --> 00:46:56,538
from the squid codes was the refresh Ram

971
00:46:54,680 --> 00:46:58,430
so we actually specify if it's actually

972
00:46:56,539 --> 00:47:00,170
from Ram cache which is helpful for us

973
00:46:58,430 --> 00:47:03,499
and that would be the only thing that I

974
00:47:00,170 --> 00:47:05,259
would add one there okay thanks well

975
00:47:03,499 --> 00:47:07,698
Tommy accommodate that in some little

976
00:47:05,259 --> 00:47:12,499
extension or detail field or something

977
00:47:07,699 --> 00:47:15,410
yeah so expanding on that particular

978
00:47:12,499 --> 00:47:18,198
idea from Thomas Peterson is there not

979
00:47:15,410 --> 00:47:19,969
room for allowing freeform values here

980
00:47:18,199 --> 00:47:22,640
for implementations that can't fit in

981
00:47:19,969 --> 00:47:24,579
any of these fields and speaking for

982
00:47:22,640 --> 00:47:28,190
myself I had a very similar question

983
00:47:24,579 --> 00:47:31,039
especially around the the RAM and a few

984
00:47:28,190 --> 00:47:32,509
other pieces we need a good

985
00:47:31,039 --> 00:47:34,039
extensibility story and then we want to

986
00:47:32,509 --> 00:47:36,109
drive people towards common values

987
00:47:34,039 --> 00:47:37,579
because that's the whole point but yeah

988
00:47:36,109 --> 00:47:39,078
there's needs to be an escape valve and

989
00:47:37,579 --> 00:47:41,029
then that's the discussion we need to

990
00:47:39,079 --> 00:47:43,519
have definitely but I wanted to get the

991
00:47:41,029 --> 00:47:47,449
general tie level shape for it together

992
00:47:43,519 --> 00:47:48,948
first thanks thanks for the discussion

993
00:47:47,449 --> 00:47:51,799
and Mark what do you think the next step

994
00:47:48,949 --> 00:47:53,359
is I'm gonna go ahead and refactor it

995
00:47:51,799 --> 00:47:56,150
and put a draft out and let's see if

996
00:47:53,359 --> 00:47:58,130
people can you know I'm sure we'll have

997
00:47:56,150 --> 00:47:59,209
discussions about individuals semantics

998
00:47:58,130 --> 00:48:02,900
that's where I think we need to really

999
00:47:59,209 --> 00:48:05,180
focus next so on our agenda that takes

1000
00:48:02,900 --> 00:48:08,420
us to sort of the newest additions to

1001
00:48:05,180 --> 00:48:10,009
our set of adopted drafts and let's see

1002
00:48:08,420 --> 00:48:12,200
if we can keep that energy going into

1003
00:48:10,010 --> 00:48:14,060
the the folks that have been with us in

1004
00:48:12,200 --> 00:48:19,790
our little H Vitas family a little

1005
00:48:14,060 --> 00:48:23,390
longer so we'll move on to variants yeah

1006
00:48:19,790 --> 00:48:26,150
variants extra variance is a little more

1007
00:48:23,390 --> 00:48:28,129
venerable definitely we haven't made

1008
00:48:26,150 --> 00:48:30,140
much progress on this because we put a

1009
00:48:28,130 --> 00:48:33,650
pin in it to wait for implementation

1010
00:48:30,140 --> 00:48:37,819
experience and I have assurances from my

1011
00:48:33,650 --> 00:48:40,640
one generous and unnamed potential

1012
00:48:37,820 --> 00:48:41,840
implementer in the immediate future that

1013
00:48:40,640 --> 00:48:43,370
he might be able to gets to something

1014
00:48:41,840 --> 00:48:48,110
soon he or she might be able get

1015
00:48:43,370 --> 00:48:50,950
something soon but in this and it is

1016
00:48:48,110 --> 00:48:53,990
also being used by the exchanges

1017
00:48:50,950 --> 00:48:55,339
proposal for a little bit different

1018
00:48:53,990 --> 00:48:57,890
purposes but but there's still an

1019
00:48:55,340 --> 00:48:58,880
interesting use case there and and

1020
00:48:57,890 --> 00:49:00,230
what's nice there's an also kind of

1021
00:48:58,880 --> 00:49:02,270
validates that is a framework and so

1022
00:49:00,230 --> 00:49:04,190
it's working pretty well because they're

1023
00:49:02,270 --> 00:49:06,380
exercising it more than then we are

1024
00:49:04,190 --> 00:49:09,860
theoretically it struck me the other day

1025
00:49:06,380 --> 00:49:12,380
that we might make some progress on this

1026
00:49:09,860 --> 00:49:16,190
draft by generating a little interest in

1027
00:49:12,380 --> 00:49:18,500
it and by that one of the open issues is

1028
00:49:16,190 --> 00:49:21,020
to describe how variants might work with

1029
00:49:18,500 --> 00:49:22,580
cookies and I've been holding off on

1030
00:49:21,020 --> 00:49:25,040
that because I wanted to get the basics

1031
00:49:22,580 --> 00:49:26,779
right first but if you're able to make

1032
00:49:25,040 --> 00:49:29,029
this thing work with cookies it actually

1033
00:49:26,780 --> 00:49:31,700
opens up a lot of incredibly interesting

1034
00:49:29,030 --> 00:49:33,320
use cases so my thinking at this

1035
00:49:31,700 --> 00:49:35,060
particular point is that I might want to

1036
00:49:33,320 --> 00:49:37,400
couldn't sketch that I put a new draft

1037
00:49:35,060 --> 00:49:38,750
out to see if that beats the bushes of

1038
00:49:37,400 --> 00:49:41,540
people who might want to go and play

1039
00:49:38,750 --> 00:49:44,600
with it a bit more beyond that I don't

1040
00:49:41,540 --> 00:49:47,960
really have anything to report I think

1041
00:49:44,600 --> 00:49:49,310
in a month or so ago I went through and

1042
00:49:47,960 --> 00:49:50,930
addressed some of the open issues

1043
00:49:49,310 --> 00:49:52,670
especially that Jeffrey asked and it

1044
00:49:50,930 --> 00:49:55,669
opened against it I think there's still

1045
00:49:52,670 --> 00:49:57,590
a couple but it's just iterative stuff

1046
00:49:55,670 --> 00:50:01,370
it's not you know stuff that when you

1047
00:49:57,590 --> 00:50:04,460
discuss here any comments any other

1048
00:50:01,370 --> 00:50:08,080
thoughts about that and anybody disagree

1049
00:50:04,460 --> 00:50:11,420
with keeping working on this draft or

1050
00:50:08,080 --> 00:50:13,670
not working out or anything come on I'm

1051
00:50:11,420 --> 00:50:17,020
just I'm in favor of it I have actually

1052
00:50:13,670 --> 00:50:18,740
a working copy working implementation

1053
00:50:17,020 --> 00:50:20,869
internally for our sir

1054
00:50:18,740 --> 00:50:23,390
get exchanges so none externally focused

1055
00:50:20,869 --> 00:50:25,520
but surrogate variants and it did it

1056
00:50:23,390 --> 00:50:27,109
works quite well for a lot of purposes a

1057
00:50:25,520 --> 00:50:30,500
lot of use cases we should talk more

1058
00:50:27,110 --> 00:50:34,760
thank you that's great information it's

1059
00:50:30,500 --> 00:50:37,010
a good day one god we think that took

1060
00:50:34,760 --> 00:50:42,230
that little side trip as long as we're

1061
00:50:37,010 --> 00:50:44,930
doing memory lane we can talk about BC P

1062
00:50:42,230 --> 00:50:47,270
56 this you know which I I had thought

1063
00:50:44,930 --> 00:50:50,359
was just blocked on the completion of

1064
00:50:47,270 --> 00:50:52,220
core so maybe we're going to learn that

1065
00:50:50,360 --> 00:50:54,290
core will be done like a in of

1066
00:50:52,220 --> 00:51:00,980
Thursday's session but Marco will let us

1067
00:50:54,290 --> 00:51:04,220
know okay so BC P 56 this we had said we

1068
00:51:00,980 --> 00:51:05,390
were blocked on core as time has

1069
00:51:04,220 --> 00:51:07,430
progressed that we've done other things

1070
00:51:05,390 --> 00:51:09,140
I've left a few notes in the issues list

1071
00:51:07,430 --> 00:51:12,799
of things that we might can't we won't

1072
00:51:09,140 --> 00:51:14,240
want to discuss before we ship it so I

1073
00:51:12,800 --> 00:51:16,640
haven't talked to the other chairs about

1074
00:51:14,240 --> 00:51:19,939
this at all as to whether this is in

1075
00:51:16,640 --> 00:51:22,220
scope or not but there's the issue of

1076
00:51:19,940 --> 00:51:26,960
using the word header field but that's a

1077
00:51:22,220 --> 00:51:30,680
core issue not an issue for this I think

1078
00:51:26,960 --> 00:51:32,510
what was this is Ben Carrick when he was

1079
00:51:30,680 --> 00:51:34,940
doing a last call review of 50 70 to

1080
00:51:32,510 --> 00:51:36,680
fight this one of the things that came

1081
00:51:34,940 --> 00:51:38,840
up was do we need more advice about when

1082
00:51:36,680 --> 00:51:39,859
and how to use Bowen on your eyes that's

1083
00:51:38,840 --> 00:51:44,390
something potentially we could address

1084
00:51:39,859 --> 00:51:46,850
here in another context don't I frankly

1085
00:51:44,390 --> 00:51:48,410
forget where that was some people are

1086
00:51:46,850 --> 00:51:51,310
talking about when do you use your eye

1087
00:51:48,410 --> 00:51:53,600
components versus meeting new headers

1088
00:51:51,310 --> 00:51:55,100
some advice about that might be good to

1089
00:51:53,600 --> 00:51:57,109
put in there or at least examples to

1090
00:51:55,100 --> 00:51:58,310
understand the trade-offs when you make

1091
00:51:57,109 --> 00:52:04,700
that choice when you're designing a

1092
00:51:58,310 --> 00:52:06,500
protocol and yeah some some advice about

1093
00:52:04,700 --> 00:52:08,600
when you and this is compactly in a

1094
00:52:06,500 --> 00:52:12,530
couple of different working groups using

1095
00:52:08,600 --> 00:52:15,170
HTTP recently the idea that a response

1096
00:52:12,530 --> 00:52:17,660
has this inherent value of being either

1097
00:52:15,170 --> 00:52:18,859
fresh or stale and what that means in

1098
00:52:17,660 --> 00:52:21,680
relation to your application when it

1099
00:52:18,859 --> 00:52:23,090
consumes that response is something that

1100
00:52:21,680 --> 00:52:25,160
applications probably need to at least

1101
00:52:23,090 --> 00:52:28,100
be aware of if not talked about when you

1102
00:52:25,160 --> 00:52:29,450
define a specification so those are just

1103
00:52:28,100 --> 00:52:31,310
kind of little notes that we could

1104
00:52:29,450 --> 00:52:32,460
potentially incorporate into the spec if

1105
00:52:31,310 --> 00:52:35,130
we as organ

1106
00:52:32,460 --> 00:52:40,170
that were willing to add a little more

1107
00:52:35,130 --> 00:52:42,990
text to the spec so we have a generic

1108
00:52:40,170 --> 00:52:44,460
question here of whether or not we feel

1109
00:52:42,990 --> 00:52:46,109
this document is essentially you know

1110
00:52:44,460 --> 00:52:48,270
just done and pending on you know the

1111
00:52:46,109 --> 00:52:50,040
normative reference decor and the

1112
00:52:48,270 --> 00:52:52,800
resolution around header field given

1113
00:52:50,040 --> 00:52:54,720
what core defines or whether we want to

1114
00:52:52,800 --> 00:52:57,660
continue sort of updating it while it's

1115
00:52:54,720 --> 00:52:59,009
in this in this interim state and so

1116
00:52:57,660 --> 00:53:03,200
folks have comments on that the chairs

1117
00:52:59,010 --> 00:53:05,970
would be interested in hearing from Roy

1118
00:53:03,200 --> 00:53:14,700
those all sound like a core issues to me

1119
00:53:05,970 --> 00:53:16,379
I disagree especially regarding 840 and

1120
00:53:14,700 --> 00:53:18,779
probably about 787 they're very

1121
00:53:16,380 --> 00:53:21,089
specifically about how you use the HT oh

1122
00:53:18,780 --> 00:53:27,869
you talk about how you use HTTP when you

1123
00:53:21,089 --> 00:53:31,080
write a specification and 77040 I thank

1124
00:53:27,869 --> 00:53:37,589
you speaking for myself

1125
00:53:31,080 --> 00:53:40,348
yeah I often discover that in users of

1126
00:53:37,589 --> 00:53:42,060
things completely forget that stale

1127
00:53:40,349 --> 00:53:44,220
exists

1128
00:53:42,060 --> 00:53:46,920
they are always surprised when something

1129
00:53:44,220 --> 00:53:51,750
gets returned stale and so having more

1130
00:53:46,920 --> 00:53:53,910
visibility into that is absolutely going

1131
00:53:51,750 --> 00:54:01,920
to be I'm going to increase the quality

1132
00:53:53,910 --> 00:54:05,180
of implementations from Roy shrug you

1133
00:54:01,920 --> 00:54:05,180
know I can see him struggling right now

1134
00:54:06,530 --> 00:54:11,820
so my inclination is that if people want

1135
00:54:09,690 --> 00:54:14,490
to provide text we can essentially treat

1136
00:54:11,820 --> 00:54:17,300
this while it's in this sort of interim

1137
00:54:14,490 --> 00:54:19,890
state as a living document if you will

1138
00:54:17,300 --> 00:54:22,410
if we have the energy to make these

1139
00:54:19,890 --> 00:54:24,060
kinds of make these kinds of updates

1140
00:54:22,410 --> 00:54:26,819
before it's ready to technically go

1141
00:54:24,060 --> 00:54:29,070
through less call but that wouldn't be

1142
00:54:26,820 --> 00:54:31,820
driven by the presence of you know texts

1143
00:54:29,070 --> 00:54:31,820
are not coming along

1144
00:54:34,420 --> 00:54:39,210
and so mark says he'll write it and

1145
00:54:36,610 --> 00:54:42,370
there'll be text there you go

1146
00:54:39,210 --> 00:54:43,510
secondary certificates is up and I hope

1147
00:54:42,370 --> 00:54:44,830
we can make some partners in this one

1148
00:54:43,510 --> 00:54:46,060
today I don't know let's talk about it

1149
00:54:44,830 --> 00:54:48,540
Mike's gonna come talk about it

1150
00:54:46,060 --> 00:54:48,540
excellent

1151
00:54:57,270 --> 00:55:01,900
you wanted slides by Friday I was moving

1152
00:55:00,160 --> 00:55:03,100
into a new house on Friday there was no

1153
00:55:01,900 --> 00:55:05,370
way that was going to happen so no

1154
00:55:03,100 --> 00:55:05,370
slides

1155
00:55:08,580 --> 00:55:15,759
so basically last time around we added

1156
00:55:12,430 --> 00:55:18,790
the required domain extension to try and

1157
00:55:15,760 --> 00:55:20,590
limit the possible attack from a

1158
00:55:18,790 --> 00:55:22,990
compromised cert being used by an

1159
00:55:20,590 --> 00:55:27,010
attacker that helps with some of the

1160
00:55:22,990 --> 00:55:31,080
situation's the lingering angst that has

1161
00:55:27,010 --> 00:55:34,810
been relayed to me is around DNS check

1162
00:55:31,080 --> 00:55:38,799
and I think the path forward there may

1163
00:55:34,810 --> 00:55:40,990
just be to try and make that not being a

1164
00:55:38,800 --> 00:55:44,440
separate issue from this document and

1165
00:55:40,990 --> 00:55:47,740
just say if you would do a DNS check

1166
00:55:44,440 --> 00:55:49,900
otherwise you do it here if you would

1167
00:55:47,740 --> 00:55:50,890
not do a DNS check otherwise you don't

1168
00:55:49,900 --> 00:55:52,990
need to do it here

1169
00:55:50,890 --> 00:55:57,549
that is not part of secondary search

1170
00:55:52,990 --> 00:56:00,040
either way so we don't currently have an

1171
00:55:57,550 --> 00:56:02,440
issue for that because we thought we had

1172
00:56:00,040 --> 00:56:04,630
result that with the extension but we

1173
00:56:02,440 --> 00:56:06,760
can certainly open an issue to clarify

1174
00:56:04,630 --> 00:56:09,130
that text and if anybody wants to come

1175
00:56:06,760 --> 00:56:10,990
up to the mic and suggest text I'd

1176
00:56:09,130 --> 00:56:13,390
prefer PR but if we want discussion

1177
00:56:10,990 --> 00:56:16,209
around it that's good too other than

1178
00:56:13,390 --> 00:56:19,750
that the two open issues coming this

1179
00:56:16,210 --> 00:56:23,080
week were editorial had a PR I'm rich

1180
00:56:19,750 --> 00:56:24,670
the PR we now have no open issues so I

1181
00:56:23,080 --> 00:56:27,040
would say the main thing between us and

1182
00:56:24,670 --> 00:56:28,630
last call is some actual implementations

1183
00:56:27,040 --> 00:56:30,250
I've heard that there's the beginning of

1184
00:56:28,630 --> 00:56:37,990
one but I'd like to see more than one

1185
00:56:30,250 --> 00:56:39,700
ideally and if the person who

1186
00:56:37,990 --> 00:56:41,259
told me that they have that partial

1187
00:56:39,700 --> 00:56:45,368
implementation wants to come up to the

1188
00:56:41,260 --> 00:56:47,550
mic and publicly admit it caelum

1189
00:56:45,369 --> 00:56:51,460
Eckert's we have a beginning

1190
00:56:47,550 --> 00:56:53,859
implementation with the with the

1191
00:56:51,460 --> 00:56:57,040
intention million intention of using

1192
00:56:53,859 --> 00:56:59,500
this for client certificates I don't

1193
00:56:57,040 --> 00:57:07,630
want to say this is more than it is it's

1194
00:56:59,500 --> 00:57:15,160
very much seen to be gains and if

1195
00:57:07,630 --> 00:57:16,119
there's nothing else I'm check out what

1196
00:57:15,160 --> 00:57:18,279
that means for the working group for

1197
00:57:16,119 --> 00:57:21,460
next step does that mean we feel that we

1198
00:57:18,280 --> 00:57:23,710
are at a state where last call would be

1199
00:57:21,460 --> 00:57:26,310
appropriate is anyone have any comments

1200
00:57:23,710 --> 00:57:28,690
this has been contentious in the past

1201
00:57:26,310 --> 00:57:30,790
more specifically do we need to see

1202
00:57:28,690 --> 00:57:36,339
implementation or interrupt before we

1203
00:57:30,790 --> 00:57:38,680
ship it Mountain Thomson I would very

1204
00:57:36,339 --> 00:57:40,089
much not want to ship this as an RFC

1205
00:57:38,680 --> 00:57:42,759
before there are interoperable

1206
00:57:40,089 --> 00:57:45,220
implementations preferably deployments

1207
00:57:42,760 --> 00:57:47,520
of those but I'm not sure that I need to

1208
00:57:45,220 --> 00:57:50,290
hold the light on that one

1209
00:57:47,520 --> 00:57:53,680
unless anyone thinks then an RC number

1210
00:57:50,290 --> 00:57:57,640
to start moving on this one I would

1211
00:57:53,680 --> 00:57:59,890
suggest that there's enough complexity

1212
00:57:57,640 --> 00:58:01,210
in here that having implementations

1213
00:57:59,890 --> 00:58:07,930
would make me a lot more confident and

1214
00:58:01,210 --> 00:58:09,460
that's as an author and Nick Sullivan

1215
00:58:07,930 --> 00:58:12,009
closer I'd just like to note that we

1216
00:58:09,460 --> 00:58:17,349
have a server implementation and so

1217
00:58:12,010 --> 00:58:18,580
looking for clients to interrupt is that

1218
00:58:17,349 --> 00:58:30,130
something that's deployed or is that I

1219
00:58:18,580 --> 00:58:31,240
like to call me it's a call me that's

1220
00:58:30,130 --> 00:58:33,750
great we can move on to structured

1221
00:58:31,240 --> 00:58:33,750
headers I guess

1222
00:58:34,260 --> 00:58:40,640
so we've had a bit of a burst of

1223
00:58:37,050 --> 00:58:40,640
activity on structured headers recently

1224
00:58:41,150 --> 00:58:47,609
if I go down to the changes can you see

1225
00:58:45,600 --> 00:58:48,960
that in the back and you read that or

1226
00:58:47,609 --> 00:58:54,660
Eliza what up

1227
00:58:48,960 --> 00:58:58,230
oh there how's that great Thanks

1228
00:58:54,660 --> 00:59:03,509
so the important ones in since draft ten

1229
00:58:58,230 --> 00:59:05,450
are towards the end 781 we closed we

1230
00:59:03,510 --> 00:59:08,100
allow empty dictionaries and lists now

1231
00:59:05,450 --> 00:59:10,410
so in the data model those structures

1232
00:59:08,100 --> 00:59:11,250
allow are allowed to be empty whereas

1233
00:59:10,410 --> 00:59:14,460
they weren't before

1234
00:59:11,250 --> 00:59:16,530
they're serialized as the header not

1235
00:59:14,460 --> 00:59:18,390
appearing on the wire is how it's

1236
00:59:16,530 --> 00:59:19,619
currently spelled if the header appears

1237
00:59:18,390 --> 00:59:22,230
in the wire and it has an empty value

1238
00:59:19,619 --> 00:59:24,960
that will also successfully parse for

1239
00:59:22,230 --> 00:59:30,930
serialization the the normal form is at

1240
00:59:24,960 --> 00:59:34,560
work is to not see realize that 797 I

1241
00:59:30,930 --> 00:59:36,240
was not important for discussion 816

1242
00:59:34,560 --> 00:59:38,430
allow inner lists but in both

1243
00:59:36,240 --> 00:59:41,459
dictionaries and lists and to remove

1244
00:59:38,430 --> 00:59:43,230
that effectively obviates lists of Lists

1245
00:59:41,460 --> 00:59:46,020
as a separate top-level data structure

1246
00:59:43,230 --> 00:59:47,310
so now you have this in most places

1247
00:59:46,020 --> 00:59:49,020
where you had a member in those

1248
00:59:47,310 --> 00:59:50,250
structures you neither have a single

1249
00:59:49,020 --> 00:59:53,550
thing or you can have a list of things

1250
00:59:50,250 --> 00:59:56,790
and after a long and enjoyable fruitful

1251
00:59:53,550 --> 00:59:59,070
discussion of syntax we ended up on

1252
00:59:56,790 --> 01:00:02,430
using parentheses and whitespace to

1253
00:59:59,070 --> 01:00:09,030
delimit those lists and it looks it

1254
01:00:02,430 --> 01:00:11,250
looks okay and finally 839 was even more

1255
01:00:09,030 --> 01:00:13,500
interesting we subsume parameterize

1256
01:00:11,250 --> 01:00:15,930
lists into lists which means that

1257
01:00:13,500 --> 01:00:19,290
basically lists now can have optional

1258
01:00:15,930 --> 01:00:21,930
parameters list items and the winning

1259
01:00:19,290 --> 01:00:23,850
argument for that seemed to be that when

1260
01:00:21,930 --> 01:00:25,109
you define a structured header it may be

1261
01:00:23,850 --> 01:00:27,240
that in the future you want to add

1262
01:00:25,109 --> 01:00:28,830
parameters to it and if it's defined as

1263
01:00:27,240 --> 01:00:31,319
a list well that's awkward it's not

1264
01:00:28,830 --> 01:00:33,750
backwards compatible whereas if it's all

1265
01:00:31,320 --> 01:00:36,630
parameter all list members could

1266
01:00:33,750 --> 01:00:38,430
potentially have parameters then you can

1267
01:00:36,630 --> 01:00:40,170
retroactively lis add parameters to an

1268
01:00:38,430 --> 01:00:41,970
existing header field and it's backwards

1269
01:00:40,170 --> 01:00:44,910
compatible because the semantics of

1270
01:00:41,970 --> 01:00:46,580
parameters and so that the downside of

1271
01:00:44,910 --> 01:00:48,170
that one was that

1272
01:00:46,580 --> 01:00:50,750
potentially how you represent structured

1273
01:00:48,170 --> 01:00:52,190
headers in programming languages in

1274
01:00:50,750 --> 01:00:54,320
various you know mappings to date

1275
01:00:52,190 --> 01:00:56,600
structures or objects became potentially

1276
01:00:54,320 --> 01:00:59,270
a little more complex but the trade-off

1277
01:00:56,600 --> 01:01:02,569
was felt to be worth it I still have to

1278
01:00:59,270 --> 01:01:06,530
do a lot of work on the test suite and

1279
01:01:02,570 --> 01:01:08,900
on the sample implementation that I have

1280
01:01:06,530 --> 01:01:10,070
in Athens to validate all these changes

1281
01:01:08,900 --> 01:01:12,830
make sure the algorithms are absolutely

1282
01:01:10,070 --> 01:01:15,110
correct but we've had multiple eyeballs

1283
01:01:12,830 --> 01:01:17,720
on it we've got some fairly detailed

1284
01:01:15,110 --> 01:01:19,100
feedback from pH K on the algorithms and

1285
01:01:17,720 --> 01:01:21,230
I feel like they're in pretty good shape

1286
01:01:19,100 --> 01:01:22,670
we might have a couple of bugs in there

1287
01:01:21,230 --> 01:01:24,440
but hopefully when I get a chance to sit

1288
01:01:22,670 --> 01:01:26,390
down we'll be able to really make sure

1289
01:01:24,440 --> 01:01:27,800
that they're just beating the test suite

1290
01:01:26,390 --> 01:01:29,330
is still representative and when it

1291
01:01:27,800 --> 01:01:32,960
passes and then the other

1292
01:01:29,330 --> 01:01:35,630
implementations last update as well so

1293
01:01:32,960 --> 01:01:41,080
that's the recent changes the open

1294
01:01:35,630 --> 01:01:41,080
issues it is freaking cold in here I

1295
01:01:41,440 --> 01:01:45,740
want to briefly run through these if we

1296
01:01:43,970 --> 01:01:49,669
have a little bit of time okay

1297
01:01:45,740 --> 01:01:52,370
so pH K brought this one up in his

1298
01:01:49,670 --> 01:01:55,400
review of the latest draft pointing out

1299
01:01:52,370 --> 01:01:56,480
that that floats the current definition

1300
01:01:55,400 --> 01:01:58,730
is surprisingly hard to serialize

1301
01:01:56,480 --> 01:02:03,410
correctly and he of course hurts in

1302
01:01:58,730 --> 01:02:05,900
sample code and then what he suggests is

1303
01:02:03,410 --> 01:02:07,460
that if we define that SH flood can have

1304
01:02:05,900 --> 01:02:10,400
a maximum of six digits after the

1305
01:02:07,460 --> 01:02:15,050
decimal point things become quite a bit

1306
01:02:10,400 --> 01:02:16,220
easier and so you know we in it and all

1307
01:02:15,050 --> 01:02:18,050
the decisions in structured headers

1308
01:02:16,220 --> 01:02:19,759
we've made this kind of trade-off of you

1309
01:02:18,050 --> 01:02:22,640
know how can we have maximal correctness

1310
01:02:19,760 --> 01:02:24,770
and maximal interrupt and cover the 80%

1311
01:02:22,640 --> 01:02:27,259
plus use case knowing that we're gonna

1312
01:02:24,770 --> 01:02:29,509
drop some use cases and so personally to

1313
01:02:27,260 --> 01:02:31,250
me this feels like the right decision if

1314
01:02:29,510 --> 01:02:32,690
we you know the people who need that

1315
01:02:31,250 --> 01:02:34,490
kind of precision can put something into

1316
01:02:32,690 --> 01:02:37,550
binary or put something in a string

1317
01:02:34,490 --> 01:02:40,729
those use cases in HTTP headers are

1318
01:02:37,550 --> 01:02:42,470
relatively uncommon and if they are if

1319
01:02:40,730 --> 01:02:44,870
somebody does want to use that kind of

1320
01:02:42,470 --> 01:02:46,549
precision and it's not interoperable or

1321
01:02:44,870 --> 01:02:48,020
easy to implement it's much more likely

1322
01:02:46,550 --> 01:02:50,690
that we'll be adding to the problem

1323
01:02:48,020 --> 01:02:51,980
there problems not helping them but

1324
01:02:50,690 --> 01:02:56,270
that's my personal feeling I'm very

1325
01:02:51,980 --> 01:02:58,730
happy to be convinced otherwise so Mum

1326
01:02:56,270 --> 01:02:59,960
Thomson can we confirm that this is not

1327
01:02:58,730 --> 01:03:03,410
just

1328
01:02:59,960 --> 01:03:05,150
a particular C library implementation

1329
01:03:03,410 --> 01:03:08,379
that we're hitting and it's in the C

1330
01:03:05,150 --> 01:03:11,140
language specification and the similar

1331
01:03:08,380 --> 01:03:13,880
functions in other languages and not

1332
01:03:11,140 --> 01:03:16,700
different so you're asking for research

1333
01:03:13,880 --> 01:03:18,529
and data yeah if you're gonna make this

1334
01:03:16,700 --> 01:03:20,359
sort of change yet sure otherwise I'd be

1335
01:03:18,529 --> 01:03:23,029
tempted to say well what I just rolled

1336
01:03:20,359 --> 01:03:25,609
your own string a fire for the float

1337
01:03:23,029 --> 01:03:27,650
it's not a huge amount of code you're

1338
01:03:25,609 --> 01:03:29,960
right we do need to do more more digging

1339
01:03:27,650 --> 01:03:31,309
here a little bit my assumption which

1340
01:03:29,960 --> 01:03:33,170
wasn't terribly well thought out was

1341
01:03:31,309 --> 01:03:34,700
that you know most you know look at

1342
01:03:33,170 --> 01:03:36,140
Python and Ruby and so forth they're all

1343
01:03:34,700 --> 01:03:38,328
going to be based on the C libraries

1344
01:03:36,140 --> 01:03:39,980
yeah what about Russ but what about all

1345
01:03:38,329 --> 01:03:41,690
these other ones yeah sure but the point

1346
01:03:39,980 --> 01:03:42,710
is interrupts we have to interview these

1347
01:03:41,690 --> 01:03:48,650
let me just talk with each other

1348
01:03:42,710 --> 01:03:52,460
so related from Roy fielding do we have

1349
01:03:48,650 --> 01:03:57,470
anyone who needs a float other van int /

1350
01:03:52,460 --> 01:03:59,630
1000 right and then actually I think in

1351
01:03:57,470 --> 01:04:01,038
our private discussion when Patrick can

1352
01:03:59,630 --> 01:04:02,990
we're talking about this one of the

1353
01:04:01,039 --> 01:04:04,940
things that I flooded was maybe somebody

1354
01:04:02,990 --> 01:04:07,250
uses in sand like if you're mapping from

1355
01:04:04,940 --> 01:04:08,720
Q values then you say well this is the

1356
01:04:07,250 --> 01:04:10,220
mapping for Q values into this different

1357
01:04:08,720 --> 01:04:11,868
structure well the only thing you really

1358
01:04:10,220 --> 01:04:13,520
lose is the ability to essentially take

1359
01:04:11,869 --> 01:04:15,079
an existing header that uses floats and

1360
01:04:13,520 --> 01:04:17,869
pars it as a structured header without

1361
01:04:15,079 --> 01:04:23,180
changing its identity but that may be a

1362
01:04:17,869 --> 01:04:25,250
reasonable trade-off as well one of the

1363
01:04:23,180 --> 01:04:26,808
big reasons to use floats is so you can

1364
01:04:25,250 --> 01:04:29,900
get a lot of things past that decimal

1365
01:04:26,809 --> 01:04:31,339
point and while this trade-off may be a

1366
01:04:29,900 --> 01:04:33,650
perfectly fine one let's make sure that

1367
01:04:31,339 --> 01:04:35,390
the name actually reflects the fact that

1368
01:04:33,650 --> 01:04:39,230
it has a really huge trade-off in its

1369
01:04:35,390 --> 01:04:41,839
precision so that in the future maybe

1370
01:04:39,230 --> 01:04:43,190
when somebody act because of the

1371
01:04:41,839 --> 01:04:44,779
presence of something that can serialize

1372
01:04:43,190 --> 01:04:47,180
the float in the format that's not so

1373
01:04:44,779 --> 01:04:49,970
expensive it would be nice to actually

1374
01:04:47,180 --> 01:04:51,109
be able to represent it so I think we

1375
01:04:49,970 --> 01:04:53,480
have a chicken and egg problem and I'm

1376
01:04:51,109 --> 01:04:55,490
just trying to like I'm worried about

1377
01:04:53,480 --> 01:04:58,190
that so you're saying if we do ship

1378
01:04:55,490 --> 01:05:00,259
something like what suggested here that

1379
01:04:58,190 --> 01:05:01,970
we've changed the name yeah and I'm also

1380
01:05:00,260 --> 01:05:04,549
suggesting that there's a chicken and

1381
01:05:01,970 --> 01:05:06,680
egg problem by not having a good float

1382
01:05:04,549 --> 01:05:10,788
we will certainly prevent it from

1383
01:05:06,680 --> 01:05:12,828
happening anyway sorry I'm not quite

1384
01:05:10,789 --> 01:05:13,400
it's been expensive to serialize floats

1385
01:05:12,829 --> 01:05:14,630
yeah

1386
01:05:13,400 --> 01:05:15,680
more expensive than other things because

1387
01:05:14,630 --> 01:05:18,860
you have a string the string is fairly

1388
01:05:15,680 --> 01:05:20,240
long right so because of that we don't

1389
01:05:18,860 --> 01:05:21,860
put it in patters doesn't make a lot of

1390
01:05:20,240 --> 01:05:23,569
so I see right right you're saying that

1391
01:05:21,860 --> 01:05:26,960
we may not have evidence a lot of floats

1392
01:05:23,570 --> 01:05:28,070
because it's it's been expensive so if

1393
01:05:26,960 --> 01:05:29,990
we're gonna make it cheap we should make

1394
01:05:28,070 --> 01:05:32,870
the right thing cheap sure do you have a

1395
01:05:29,990 --> 01:05:34,220
suggestion for name the the current

1396
01:05:32,870 --> 01:05:35,660
suggestion because I don't want to argue

1397
01:05:34,220 --> 01:05:38,299
this too much because I'm not really

1398
01:05:35,660 --> 01:05:40,879
participating in this too much is please

1399
01:05:38,300 --> 01:05:42,800
just change the name so that if somebody

1400
01:05:40,880 --> 01:05:45,640
does the full float that it has the

1401
01:05:42,800 --> 01:05:45,640
right name okay

1402
01:05:45,790 --> 01:05:51,680
just naming things is hard that's all

1403
01:05:47,900 --> 01:05:53,690
yeah I was going to observe that the if

1404
01:05:51,680 --> 01:05:58,430
you have a fixed number of elements

1405
01:05:53,690 --> 01:06:03,650
after the point fixed point is is a name

1406
01:05:58,430 --> 01:06:07,700
I see nodding heads or decimal decimal

1407
01:06:03,650 --> 01:06:11,420
decimal decimal decimal is what it is

1408
01:06:07,700 --> 01:06:13,970
and if you limit the number of digits

1409
01:06:11,420 --> 01:06:15,020
after the decimal place you can store

1410
01:06:13,970 --> 01:06:18,319
them in an integer

1411
01:06:15,020 --> 01:06:20,990
just exactly what boy was suggesting so

1412
01:06:18,320 --> 01:06:23,480
um my inclination after hearing this if

1413
01:06:20,990 --> 01:06:26,509
I'm hearing correctly is to go ahead and

1414
01:06:23,480 --> 01:06:31,510
do what HK is suggesting here but to

1415
01:06:26,510 --> 01:06:34,930
change the name to decimal workable

1416
01:06:31,510 --> 01:06:34,930
anyone with heartburn

1417
01:06:37,130 --> 01:06:44,960
I don't remember do we have if there are

1418
01:06:41,750 --> 01:06:48,290
bounds changing the storage is going to

1419
01:06:44,960 --> 01:06:52,640
change our expected maximum balance

1420
01:06:48,290 --> 01:06:54,740
rather significantly yes and so people

1421
01:06:52,640 --> 01:06:57,830
may have expectations around that I

1422
01:06:54,740 --> 01:07:01,779
think I think well this came about

1423
01:06:57,830 --> 01:07:04,009
because we were you know relying on

1424
01:07:01,780 --> 01:07:06,260
shared concept of float that wasn't well

1425
01:07:04,010 --> 01:07:07,490
spelled out in the spec and now it

1426
01:07:06,260 --> 01:07:08,750
sounds like we're spelling it out to the

1427
01:07:07,490 --> 01:07:10,910
degree of precision that we spelled out

1428
01:07:08,750 --> 01:07:12,380
in twith so it's worth we'd have to do

1429
01:07:10,910 --> 01:07:15,470
for that process for this scene in

1430
01:07:12,380 --> 01:07:20,090
general I think speaking for Roy

1431
01:07:15,470 --> 01:07:22,040
fielding plus one six point okay now

1432
01:07:20,090 --> 01:07:26,850
it's a now it's a naming race no name

1433
01:07:22,040 --> 01:07:32,430
race fun month onsen we have 15 ten

1434
01:07:26,850 --> 01:07:35,490
digits on integers what oh yeah yeah

1435
01:07:32,430 --> 01:07:36,960
so just take six of those and put them

1436
01:07:35,490 --> 01:07:39,000
on the right-hand side and leave the

1437
01:07:36,960 --> 01:07:40,290
rest on them on the left-hand side and

1438
01:07:39,000 --> 01:07:43,500
there's your limits right there I think

1439
01:07:40,290 --> 01:07:48,900
that's concretely that's a serious

1440
01:07:43,500 --> 01:07:50,190
proposal and six seems like a convenient

1441
01:07:48,900 --> 01:07:53,520
number I don't know someone must have

1442
01:07:50,190 --> 01:07:56,400
picked five or seven then we can argue

1443
01:07:53,520 --> 01:07:58,700
about that one but that's seems Rican

1444
01:07:56,400 --> 01:08:00,660
for myself that sounds fantastic okay

1445
01:07:58,700 --> 01:08:01,740
Martin could you could you write that

1446
01:08:00,660 --> 01:08:08,850
down in the issue so I don't forget

1447
01:08:01,740 --> 01:08:14,939
it's 848 thank you okay that's editorial

1448
01:08:08,850 --> 01:08:18,149
star in parameter names so it was notice

1449
01:08:14,940 --> 01:08:20,640
I think when when pH can I were talking

1450
01:08:18,149 --> 01:08:22,410
he asked if there was any use for star

1451
01:08:20,640 --> 01:08:26,640
and I rely in parameter names and I

1452
01:08:22,410 --> 01:08:29,550
realized that star is used by RC 50 97

1453
01:08:26,640 --> 01:08:31,490
or as Julian corrected me 81 87 this is

1454
01:08:29,550 --> 01:08:35,760
the internationalization coding for

1455
01:08:31,490 --> 01:08:37,229
parameters in normal HTTP headers and so

1456
01:08:35,760 --> 01:08:39,300
the question is right now that is

1457
01:08:37,229 --> 01:08:41,279
disallowed in forever names in what we

1458
01:08:39,300 --> 01:08:43,680
call keys I think in the current a B and

1459
01:08:41,279 --> 01:08:46,469
F so if you wanted to map one of these

1460
01:08:43,680 --> 01:08:49,520
headers into structured headers

1461
01:08:46,470 --> 01:08:51,930
you'd need another way to denote that

1462
01:08:49,520 --> 01:08:54,089
this is the internationalized version of

1463
01:08:51,930 --> 01:08:55,920
that parameter because for those that

1464
01:08:54,089 --> 01:08:58,439
may not have mmediately paged it in as

1465
01:08:55,920 --> 01:09:01,589
soon as I said 81 87 the model of that

1466
01:08:58,439 --> 01:09:03,990
is that there are a pair of parameters

1467
01:09:01,589 --> 01:09:06,240
one that is plain ASCII and one that is

1468
01:09:03,990 --> 01:09:07,800
internationalized so that you can fall

1469
01:09:06,240 --> 01:09:10,469
back to the ascii if you need to and

1470
01:09:07,800 --> 01:09:11,310
that's the the convention for those

1471
01:09:10,470 --> 01:09:14,070
things for in things like

1472
01:09:11,310 --> 01:09:15,750
content-disposition and the

1473
01:09:14,069 --> 01:09:19,259
internationalized version is denoted by

1474
01:09:15,750 --> 01:09:23,609
I believe a trailing star if I remember

1475
01:09:19,260 --> 01:09:25,620
correctly so it would be a non-trivial

1476
01:09:23,609 --> 01:09:29,940
mapping and so one thing we could do is

1477
01:09:25,620 --> 01:09:31,858
allow stars in these parameter names one

1478
01:09:29,939 --> 01:09:34,290
further thing we could do if we so felt

1479
01:09:31,859 --> 01:09:36,690
inclined would be to just reserve that

1480
01:09:34,290 --> 01:09:40,430
star for that very particularly use case

1481
01:09:36,689 --> 01:09:46,309
and not for anything else doesn't

1482
01:09:40,430 --> 01:09:47,120
have any thoughts about that I see

1483
01:09:46,310 --> 01:09:56,540
there's a fair amount of discussion

1484
01:09:47,120 --> 01:09:58,070
recently if you allow it the size of

1485
01:09:56,540 --> 01:09:59,300
every key will be larger because you

1486
01:09:58,070 --> 01:10:06,320
will not be able to encode it as

1487
01:09:59,300 --> 01:10:09,620
efficiently on the wire when we encode

1488
01:10:06,320 --> 01:10:13,639
the keys right you can imagine in other

1489
01:10:09,620 --> 01:10:16,070
protocols revisions that we encode the

1490
01:10:13,640 --> 01:10:18,200
keys via a specific table Huffman table

1491
01:10:16,070 --> 01:10:20,840
for instance right adding another

1492
01:10:18,200 --> 01:10:22,970
character that is not used as often will

1493
01:10:20,840 --> 01:10:24,410
slightly expand that it's not a huge

1494
01:10:22,970 --> 01:10:27,020
deal but I'm just pointing out that

1495
01:10:24,410 --> 01:10:30,889
adding a character to the acceptable

1496
01:10:27,020 --> 01:10:32,540
input set those actually have an impact

1497
01:10:30,890 --> 01:10:34,850
on the size of the things that we said

1498
01:10:32,540 --> 01:10:38,650
in the case where we're not using it

1499
01:10:34,850 --> 01:10:42,680
right so if this is very rarely

1500
01:10:38,650 --> 01:10:44,509
happening it would be nice to disallow

1501
01:10:42,680 --> 01:10:45,830
in structured headers and say if you

1502
01:10:44,510 --> 01:10:48,140
want to use structured headers well you

1503
01:10:45,830 --> 01:10:49,160
could ask you sorry but and if you want

1504
01:10:48,140 --> 01:10:51,980
to do some mapping you'd do it in

1505
01:10:49,160 --> 01:10:54,080
another header it's not even you can ask

1506
01:10:51,980 --> 01:10:56,990
it's just you can't use this convention

1507
01:10:54,080 --> 01:10:58,430
in 81 87 correctly or you can't easily

1508
01:10:56,990 --> 01:11:06,130
use it you have to dismiss on your own

1509
01:10:58,430 --> 01:11:09,290
mapping to it yes yeah from Roy fielding

1510
01:11:06,130 --> 01:11:14,150
+1 to just sending utf-8 for structured

1511
01:11:09,290 --> 01:11:27,200
headers that that's not this issue but

1512
01:11:14,150 --> 01:11:29,299
yes noted 842 Dictionary of a dictionary

1513
01:11:27,200 --> 01:11:33,559
Kazuko raised this and I think in

1514
01:11:29,300 --> 01:11:36,380
discussion we came to the understanding

1515
01:11:33,560 --> 01:11:39,400
that this was basically now that we've

1516
01:11:36,380 --> 01:11:41,630
allowed list members to have parameters

1517
01:11:39,400 --> 01:11:44,000
can we do the same for dictionary

1518
01:11:41,630 --> 01:11:48,110
members is that correct because you know

1519
01:11:44,000 --> 01:11:52,199
yes so I think it's I'm pointing about

1520
01:11:48,110 --> 01:11:54,929
an inconsistency and fixing this simple

1521
01:11:52,199 --> 01:11:59,549
and also provides one sensibility so I

1522
01:11:54,929 --> 01:12:00,630
think we should do this I'm fine with

1523
01:11:59,550 --> 01:12:03,290
that I just wanted to check that that's

1524
01:12:00,630 --> 01:12:05,550
the other few people's help

1525
01:12:03,290 --> 01:12:12,480
what is the encoding of a dictionary

1526
01:12:05,550 --> 01:12:17,250
containing an empty dictionary that's

1527
01:12:12,480 --> 01:12:19,080
not what's being asked here it doesn't

1528
01:12:17,250 --> 01:12:20,969
it's not Kenna dictionary contain a

1529
01:12:19,080 --> 01:12:30,420
dictionary it's can a dictionary member

1530
01:12:20,969 --> 01:12:33,420
have parameters no it's not speaking for

1531
01:12:30,420 --> 01:12:42,570
Roy fielding it is that issue and this

1532
01:12:33,420 --> 01:12:54,600
would resolve it he's right that was

1533
01:12:42,570 --> 01:12:57,299
Julian oh okay I don't hear any pushback

1534
01:12:54,600 --> 01:13:00,920
on adding parameters to dictionaries

1535
01:12:57,300 --> 01:13:00,920
members so that's good

1536
01:13:02,900 --> 01:13:13,469
add a subsection on limitations Roy

1537
01:13:08,210 --> 01:13:15,270
asked that we add us some some text

1538
01:13:13,469 --> 01:13:17,489
about limitations I looked at this and

1539
01:13:15,270 --> 01:13:19,170
then I looked at the spec and I feel

1540
01:13:17,489 --> 01:13:20,489
like it's pretty specific about what the

1541
01:13:19,170 --> 01:13:24,660
spec is trying to do and what it's not

1542
01:13:20,489 --> 01:13:26,910
trying to do so I don't know what you're

1543
01:13:24,660 --> 01:13:29,639
asking for here Roy so if you could give

1544
01:13:26,910 --> 01:13:31,980
me some more information or give me some

1545
01:13:29,640 --> 01:13:33,570
proposed texts that would be great

1546
01:13:31,980 --> 01:13:41,940
because I don't know how to actually

1547
01:13:33,570 --> 01:13:44,009
this request there okay so what I think

1548
01:13:41,940 --> 01:13:46,699
this this is talking a little bit time

1549
01:13:44,010 --> 01:13:49,320
so I don't mind if you close this issue

1550
01:13:46,699 --> 01:13:51,089
because it's really there are a lot of

1551
01:13:49,320 --> 01:13:53,340
things that I found out only by reading

1552
01:13:51,090 --> 01:13:55,710
the a PMF and that there's no mention of

1553
01:13:53,340 --> 01:13:57,540
it in the text particularly having to do

1554
01:13:55,710 --> 01:14:01,739
with how many if you can have empty

1555
01:13:57,540 --> 01:14:03,840
lists or empty header values but if

1556
01:14:01,739 --> 01:14:05,969
you've already corrected that in the

1557
01:14:03,840 --> 01:14:08,940
text then this is no longer applies

1558
01:14:05,970 --> 01:14:10,380
okay um if you find any of those please

1559
01:14:08,940 --> 01:14:12,900
do open issues about those specific

1560
01:14:10,380 --> 01:14:15,900
things we should definitely make sure

1561
01:14:12,900 --> 01:14:17,790
that it's unambiguous Roberto and I just

1562
01:14:15,900 --> 01:14:21,629
wanted to say mark is right it's not a

1563
01:14:17,790 --> 01:14:28,769
problem okay that's what I love to hear

1564
01:14:21,630 --> 01:14:32,310
more of that one more okay so I think we

1565
01:14:28,770 --> 01:14:34,650
have ways forward on all of these which

1566
01:14:32,310 --> 01:14:36,210
is great the last one is one that's been

1567
01:14:34,650 --> 01:14:39,230
with us for a while we've tried to come

1568
01:14:36,210 --> 01:14:41,960
to consensus on in quite a few ways

1569
01:14:39,230 --> 01:14:47,129
which is defunding a yarn reference type

1570
01:14:41,960 --> 01:14:49,820
and I understand that folks this seems

1571
01:14:47,130 --> 01:14:52,920
like a natural thing to do for the spec

1572
01:14:49,820 --> 01:14:55,530
my push back or my concern has been that

1573
01:14:52,920 --> 01:14:59,400
you know structured headers is all about

1574
01:14:55,530 --> 01:15:01,230
presenting type data to applications in

1575
01:14:59,400 --> 01:15:03,889
ways that they can easily consume in a

1576
01:15:01,230 --> 01:15:05,519
highly interoperable fashion and that

1577
01:15:03,890 --> 01:15:07,200
interoperability in your eyes

1578
01:15:05,520 --> 01:15:09,060
unfortunately the story isn't that great

1579
01:15:07,200 --> 01:15:10,889
if this thing is going to be implemented

1580
01:15:09,060 --> 01:15:13,530
by browsers it's highly highly likely

1581
01:15:10,890 --> 01:15:14,910
that they're gonna use the fetch your

1582
01:15:13,530 --> 01:15:17,910
restaurants are the what working group

1583
01:15:14,910 --> 01:15:21,630
you're aspect to offer that URI and that

1584
01:15:17,910 --> 01:15:23,820
has a different API surface than what we

1585
01:15:21,630 --> 01:15:25,470
would explain different parsing and

1586
01:15:23,820 --> 01:15:28,380
processing the new weeks we would likely

1587
01:15:25,470 --> 01:15:33,090
expose in the ITF in some very fine

1588
01:15:28,380 --> 01:15:35,520
details and so I'm reluctant to expose a

1589
01:15:33,090 --> 01:15:38,970
foot gun if we can come to some

1590
01:15:35,520 --> 01:15:40,050
agreement that you know offers the

1591
01:15:38,970 --> 01:15:42,120
structure because they eat your eyes

1592
01:15:40,050 --> 01:15:43,500
themselves are structured that offers

1593
01:15:42,120 --> 01:15:44,790
the structure of your eyes in an in our

1594
01:15:43,500 --> 01:15:46,980
horrible fashion that's actually likely

1595
01:15:44,790 --> 01:15:48,180
to get implemented by browsers I'm all

1596
01:15:46,980 --> 01:15:50,450
for it but I don't see that as

1597
01:15:48,180 --> 01:15:52,710
achievable in the timeframe that we have

1598
01:15:50,450 --> 01:15:54,090
in this working group for this document

1599
01:15:52,710 --> 01:15:55,230
and I really want to ship this document

1600
01:15:54,090 --> 01:15:57,690
because it's starting to get a lot of

1601
01:15:55,230 --> 01:16:01,320
things depending upon it that's where

1602
01:15:57,690 --> 01:16:03,900
I'm at with this cuz I hold them lastly

1603
01:16:01,320 --> 01:16:07,410
my weak preference goes to not having

1604
01:16:03,900 --> 01:16:10,519
this because we don't have date for

1605
01:16:07,410 --> 01:16:16,700
example as well sorry so for not

1606
01:16:10,520 --> 01:16:16,700
incorporating okay thank you

1607
01:16:20,980 --> 01:16:27,018
so as editor my inclination is close

1608
01:16:24,230 --> 01:16:28,299
this with no action just to make that if

1609
01:16:27,019 --> 01:16:31,909
that's not crystal clear

1610
01:16:28,300 --> 01:16:35,150
I'm Thompson I'm inclined to agree

1611
01:16:31,909 --> 01:16:38,570
simply because it's it's gonna be very

1612
01:16:35,150 --> 01:16:42,650
difficult to specify this correctly even

1613
01:16:38,570 --> 01:16:44,389
if you sort of wave your hands rapidly

1614
01:16:42,650 --> 01:16:47,929
about all the various interoperability

1615
01:16:44,389 --> 01:16:50,840
issues that we have with your eyes do

1616
01:16:47,929 --> 01:16:52,940
you allow relative your eyes do you

1617
01:16:50,840 --> 01:16:55,340
allow all these sorts of questions start

1618
01:16:52,940 --> 01:17:00,500
coming up and and what would they be

1619
01:16:55,340 --> 01:17:01,909
relative to it's tricky so that's not

1620
01:17:00,500 --> 01:17:10,550
even getting into character encoding

1621
01:17:01,909 --> 01:17:13,400
problems from Roy actually Roy this time

1622
01:17:10,550 --> 01:17:15,860
so we can't have a URI type because

1623
01:17:13,400 --> 01:17:19,909
nonstic nonstick sorg has an opinion

1624
01:17:15,860 --> 01:17:22,190
about which spec to reference sad face

1625
01:17:19,909 --> 01:17:24,710
it's not about the standards or gets

1626
01:17:22,190 --> 01:17:27,199
about the implementations I agree with

1627
01:17:24,710 --> 01:17:28,960
the sad face part I do agree with the

1628
01:17:27,199 --> 01:17:32,509
sad face

1629
01:17:28,960 --> 01:17:34,280
speaking for myself so people are gonna

1630
01:17:32,510 --> 01:17:36,039
need to do this they're just gonna put

1631
01:17:34,280 --> 01:17:43,070
it in a string type and get it wrong

1632
01:17:36,039 --> 01:17:44,750
sure yeah if we don't have a fundamental

1633
01:17:43,070 --> 01:17:47,599
type like that because of you know II

1634
01:17:44,750 --> 01:17:48,829
too ambitious we might want some non

1635
01:17:47,599 --> 01:17:51,590
normative textures and they just

1636
01:17:48,829 --> 01:17:53,420
technology that that we didn't think the

1637
01:17:51,590 --> 01:17:57,469
spec to support that it's not be an

1638
01:17:53,420 --> 01:17:58,909
obvious question from from Julian the

1639
01:17:57,469 --> 01:18:00,679
inter up argument actually makes me

1640
01:17:58,909 --> 01:18:06,739
think we should add this because it

1641
01:18:00,679 --> 01:18:11,090
would actually help the consumers Julian

1642
01:18:06,739 --> 01:18:13,329
how we can't force the browser's to do

1643
01:18:11,090 --> 01:18:13,329
anything

1644
01:18:15,639 --> 01:18:20,239
the browsers might voluntarily do things

1645
01:18:18,440 --> 01:18:27,110
if you decided they were a good idea and

1646
01:18:20,239 --> 01:18:29,388
we agree I mean we're in the room and

1647
01:18:27,110 --> 01:18:33,670
yeah Donovan kissed her and just woke up

1648
01:18:29,389 --> 01:18:36,679
and said what wrote rolled over eNOS yep

1649
01:18:33,670 --> 01:18:39,619
Julian says because we would define how

1650
01:18:36,679 --> 01:18:42,019
it works yeah we could define how it

1651
01:18:39,619 --> 01:18:43,999
works that's what this was specifically

1652
01:18:42,019 --> 01:18:47,420
brought up and the feedback we got was

1653
01:18:43,999 --> 01:18:48,710
that if they have a 8 P API and parsing

1654
01:18:47,420 --> 01:18:49,219
code for Euro I was already in the

1655
01:18:48,710 --> 01:18:51,110
browser

1656
01:18:49,219 --> 01:18:55,159
they are very strongly disinclined to

1657
01:18:51,110 --> 01:18:57,049
use anything else right Roy fielding

1658
01:18:55,159 --> 01:18:59,089
says I don't care what the recipient

1659
01:18:57,050 --> 01:19:00,980
does with the string I just want the

1660
01:18:59,090 --> 01:19:08,269
sender to tell me it's a reference to a

1661
01:19:00,980 --> 01:19:12,018
URI so actually to that specific point

1662
01:19:08,269 --> 01:19:13,789
you know the the specification defining

1663
01:19:12,019 --> 01:19:16,190
structure to head the structured headers

1664
01:19:13,789 --> 01:19:19,249
always defines its semantics and it can

1665
01:19:16,190 --> 01:19:20,299
certainly say this string is a URI just

1666
01:19:19,249 --> 01:19:24,559
like you can say this string is

1667
01:19:20,300 --> 01:19:29,210
somebody's name Julian says +12 what Roy

1668
01:19:24,559 --> 01:19:31,010
said that's back line like so yeah I

1669
01:19:29,210 --> 01:19:33,980
think that this this kind of runs

1670
01:19:31,010 --> 01:19:35,840
counter to the whole there's already

1671
01:19:33,980 --> 01:19:37,968
existing implementations and we're just

1672
01:19:35,840 --> 01:19:40,489
going to do a cut and paste of what's

1673
01:19:37,969 --> 01:19:42,559
there and unlike what we were talking

1674
01:19:40,489 --> 01:19:46,070
about with floating-point we can't play

1675
01:19:42,559 --> 01:19:51,289
any like realistic scoping reductions to

1676
01:19:46,070 --> 01:19:54,079
make the problem simpler so yeah Ryan's

1677
01:19:51,289 --> 01:19:55,759
levy Google works on Chrome and sadly

1678
01:19:54,079 --> 01:19:59,480
one of the folks maintained the URL side

1679
01:19:55,760 --> 01:20:02,030
I support what Mark was proposing air

1680
01:19:59,480 --> 01:20:04,549
which is punting this issue and and the

1681
01:20:02,030 --> 01:20:05,840
unfortunate part of it is that one of

1682
01:20:04,550 --> 01:20:07,400
the challenges that would be with

1683
01:20:05,840 --> 01:20:08,989
implementing this and what benefits the

1684
01:20:07,400 --> 01:20:10,638
structured headers is that you get that

1685
01:20:08,989 --> 01:20:12,468
error processing model right you

1686
01:20:10,639 --> 01:20:14,749
understand what is a valid or invalid

1687
01:20:12,469 --> 01:20:17,690
model and the whole reason why we have

1688
01:20:14,749 --> 01:20:19,639
that joint dubbed 3c

1689
01:20:17,690 --> 01:20:22,369
just be clear there is an sto behind it

1690
01:20:19,639 --> 01:20:24,469
you know what WG fetch spec is that

1691
01:20:22,369 --> 01:20:26,370
challenge which is a lot of the URI

1692
01:20:24,469 --> 01:20:28,980
processing model was

1693
01:20:26,370 --> 01:20:30,570
in terms of error handling correctly and

1694
01:20:28,980 --> 01:20:32,610
so there's issues that exist out there

1695
01:20:30,570 --> 01:20:34,889
on the web that don't conform and we

1696
01:20:32,610 --> 01:20:36,809
deal with that messed up yeah so the

1697
01:20:34,890 --> 01:20:38,190
challenge of trying to like do this now

1698
01:20:36,810 --> 01:20:40,020
for structure headers is trying to

1699
01:20:38,190 --> 01:20:42,540
define that err processing model and

1700
01:20:40,020 --> 01:20:46,560
that is a yak shave it's been going on

1701
01:20:42,540 --> 01:20:49,650
for nearly a decade and it's slightly

1702
01:20:46,560 --> 01:20:59,310
more hairless which is great but it's

1703
01:20:49,650 --> 01:21:00,839
not there yet I might be alone here but

1704
01:20:59,310 --> 01:21:03,330
I it seems like there are two advantages

1705
01:21:00,840 --> 01:21:06,540
to structured headers one of which we

1706
01:21:03,330 --> 01:21:09,510
are talking about right now and the lack

1707
01:21:06,540 --> 01:21:12,300
of that one we're excluding the other to

1708
01:21:09,510 --> 01:21:15,030
be specific there is how we encode

1709
01:21:12,300 --> 01:21:18,240
things on the wire which could

1710
01:21:15,030 --> 01:21:20,309
potentially be more efficient and then

1711
01:21:18,240 --> 01:21:21,900
there is how we represent it to the user

1712
01:21:20,310 --> 01:21:23,040
which in this particular case we're

1713
01:21:21,900 --> 01:21:27,900
suggesting we're probably gonna end up

1714
01:21:23,040 --> 01:21:30,110
having B text if we can get some

1715
01:21:27,900 --> 01:21:32,639
advantages by having a shorter encoding

1716
01:21:30,110 --> 01:21:34,469
because we know it's a URI and we know

1717
01:21:32,640 --> 01:21:37,920
who we're talking to that might be

1718
01:21:34,470 --> 01:21:41,790
worthwhile even if we just serialize it

1719
01:21:37,920 --> 01:21:44,250
to text so it may be that it's useful on

1720
01:21:41,790 --> 01:21:46,080
the wire so I think we should be talking

1721
01:21:44,250 --> 01:21:48,480
about these things separately how we

1722
01:21:46,080 --> 01:21:53,309
present versus how we serialize or store

1723
01:21:48,480 --> 01:21:55,709
I think part of my concern is it's

1724
01:21:53,310 --> 01:21:57,570
almost an attractive nuisance that if

1725
01:21:55,710 --> 01:21:59,370
you define it as a URI some

1726
01:21:57,570 --> 01:22:02,400
implementations are gonna present it

1727
01:21:59,370 --> 01:22:03,540
with an API on top of that and then

1728
01:22:02,400 --> 01:22:05,639
that's gonna cause interoperability

1729
01:22:03,540 --> 01:22:07,590
problems I mean really this

1730
01:22:05,640 --> 01:22:10,200
specification is a big game of chicken

1731
01:22:07,590 --> 01:22:12,720
that you know where we're defining this

1732
01:22:10,200 --> 01:22:14,849
as precisely as we can to try and

1733
01:22:12,720 --> 01:22:16,470
encourage a high level of in a row but

1734
01:22:14,850 --> 01:22:18,960
it's always up to the implementers to

1735
01:22:16,470 --> 01:22:21,480
actually show that line and if we have

1736
01:22:18,960 --> 01:22:23,970
one major implementation that decides

1737
01:22:21,480 --> 01:22:25,969
it's gonna go off and go cowboy it's

1738
01:22:23,970 --> 01:22:32,070
it's kind of all over you know

1739
01:22:25,970 --> 01:22:34,790
so Roy says then why hat even have any

1740
01:22:32,070 --> 01:22:34,790
strong typing

1741
01:22:36,929 --> 01:22:46,510
what your eyes are nothing the lack of a

1742
01:22:44,290 --> 01:23:05,769
specification does not prevent somebody

1743
01:22:46,510 --> 01:23:15,449
from going cowboy if we held our hum how

1744
01:23:05,770 --> 01:23:15,449
many people would participate curious

1745
01:23:29,610 --> 01:23:37,570
keeping in mind that this is effectively

1746
01:23:32,079 --> 01:23:41,380
what's keeping this speck open okay so

1747
01:23:37,570 --> 01:23:45,940
we're gonna have three options first

1748
01:23:41,380 --> 01:23:48,510
option is we don't define anything for

1749
01:23:45,940 --> 01:23:51,610
the URI and we leave the text as is

1750
01:23:48,510 --> 01:23:53,800
second option is we decided it's

1751
01:23:51,610 --> 01:23:57,130
critical to define something for the URI

1752
01:23:53,800 --> 01:24:00,849
and that needs to be proposed and then

1753
01:23:57,130 --> 01:24:02,320
the third option is you don't know

1754
01:24:00,849 --> 01:24:05,650
enough yet and you want to leave this

1755
01:24:02,320 --> 01:24:08,159
document in limbo and make the author

1756
01:24:05,650 --> 01:24:08,159
sad

1757
01:24:09,750 --> 01:24:15,099
mutton on the second point there just a

1758
01:24:11,980 --> 01:24:16,570
clarification we're making that would be

1759
01:24:15,099 --> 01:24:18,880
making the statement that we have to

1760
01:24:16,570 --> 01:24:19,269
define the processing rules for the the

1761
01:24:18,880 --> 01:24:27,520
URI

1762
01:24:19,270 --> 01:24:30,449
in detail tequilas shave the AK strong

1763
01:24:27,520 --> 01:24:33,909
definition yeah okay thank you right

1764
01:24:30,449 --> 01:24:36,519
okay so please hum now if you believe

1765
01:24:33,909 --> 01:24:41,280
that we should leave out a definition of

1766
01:24:36,520 --> 01:24:41,280
URI and leave the document as is

1767
01:24:43,380 --> 01:24:50,440
okay please hum now if you believe we

1768
01:24:47,590 --> 01:24:56,710
should add a strong definition of a URI

1769
01:24:50,440 --> 01:24:58,690
to this document and please some now if

1770
01:24:56,710 --> 01:25:02,890
you don't know and you think we should

1771
01:24:58,690 --> 01:25:04,330
continue discussing this alright seems

1772
01:25:02,890 --> 01:25:05,200
pretty clear that we are going to leave

1773
01:25:04,330 --> 01:25:15,550
your eye out

1774
01:25:05,200 --> 01:25:16,750
thank you everyone okay well that's

1775
01:25:15,550 --> 01:25:19,510
great yeah that's progress

1776
01:25:16,750 --> 01:25:21,820
so we'll take it next draft in the

1777
01:25:19,510 --> 01:25:25,720
agenda we were down to two of our

1778
01:25:21,820 --> 01:25:27,700
adopted drafts client hints and yobs

1779
01:25:25,720 --> 01:25:36,790
coming up and Ilya is in the house this

1780
01:25:27,700 --> 01:25:39,639
is great hey hi your vice Google let's

1781
01:25:36,790 --> 01:25:43,090
talk about client hints there were no

1782
01:25:39,640 --> 01:25:46,540
major draft changes since Prague other

1783
01:25:43,090 --> 01:25:51,360
than a few PRS that are currently in the

1784
01:25:46,540 --> 01:25:54,580
air but I wanted to discuss the issues

1785
01:25:51,360 --> 01:25:57,299
there are yeah various open issues that

1786
01:25:54,580 --> 01:26:06,480
are worth discussing

1787
01:25:57,300 --> 01:26:09,550
the first is a sec - eh - prefix we had

1788
01:26:06,480 --> 01:26:14,200
various people that are interested in

1789
01:26:09,550 --> 01:26:17,560
adding namespace for client hints

1790
01:26:14,200 --> 01:26:22,870
similar to for example there is the sack

1791
01:26:17,560 --> 01:26:26,440
- fetch namespace for a various fetch

1792
01:26:22,870 --> 01:26:31,080
related request headers and otherwise

1793
01:26:26,440 --> 01:26:36,009
the sack - prefix is something that is

1794
01:26:31,080 --> 01:26:39,100
pretty important from course perspective

1795
01:26:36,010 --> 01:26:42,940
and from a perspective of making sure

1796
01:26:39,100 --> 01:26:45,100
that these headers are something that

1797
01:26:42,940 --> 01:26:49,719
only the browser can set and cannot be

1798
01:26:45,100 --> 01:26:54,560
set by user and JavaScript at the same

1799
01:26:49,720 --> 01:27:02,410
times Julien had objections to

1800
01:26:54,560 --> 01:27:05,540
- CH prefix as if I try to channel him

1801
01:27:02,410 --> 01:27:08,570
that can create conflicting namespaces

1802
01:27:05,540 --> 01:27:10,840
that we don't have any plan of uncon

1803
01:27:08,570 --> 01:27:13,790
Flik thing so for example if we'll have

1804
01:27:10,840 --> 01:27:15,770
multiple of those namespaces collect

1805
01:27:13,790 --> 01:27:21,620
like a request that falls into two

1806
01:27:15,770 --> 01:27:25,490
namespaces how do we represent that so

1807
01:27:21,620 --> 01:27:28,610
I'm wondering if anyone else has

1808
01:27:25,490 --> 01:27:33,440
objection like if anyone has objections

1809
01:27:28,610 --> 01:27:35,269
to the sack - prefix because this one I

1810
01:27:33,440 --> 01:27:38,360
think is critical for the fetch

1811
01:27:35,270 --> 01:27:40,370
processing model and then I will I'm

1812
01:27:38,360 --> 01:27:44,120
wondering if anyone here has strong

1813
01:27:40,370 --> 01:27:47,120
opinions regarding the - see like the CH

1814
01:27:44,120 --> 01:27:51,590
- addition to that as the namespace for

1815
01:27:47,120 --> 01:27:55,430
general request headers so yeah just try

1816
01:27:51,590 --> 01:27:57,950
and clarify SEC - turns off client

1817
01:27:55,430 --> 01:28:00,650
access in fetch access to the headers

1818
01:27:57,950 --> 01:28:01,760
yes and personally I think pragmatically

1819
01:28:00,650 --> 01:28:02,650
that's probably a good thing to be doing

1820
01:28:01,760 --> 01:28:06,050
here

1821
01:28:02,650 --> 01:28:08,839
what does CH in the prefix give us does

1822
01:28:06,050 --> 01:28:13,160
it change any software's behavior no

1823
01:28:08,840 --> 01:28:15,170
okay it's a convention so it seems a

1824
01:28:13,160 --> 01:28:17,269
little unnecessary than to add that like

1825
01:28:15,170 --> 01:28:18,980
you could say it's a convention saying

1826
01:28:17,270 --> 01:28:21,350
if you want to flag this as you know

1827
01:28:18,980 --> 01:28:23,990
just to humans as hey this is a client

1828
01:28:21,350 --> 01:28:26,360
in fine but but you know by saying it's

1829
01:28:23,990 --> 01:28:27,800
a prefix that kind of implies some sort

1830
01:28:26,360 --> 01:28:32,330
of automated handling and that's maybe

1831
01:28:27,800 --> 01:28:36,050
causing the confusion here um I don't

1832
01:28:32,330 --> 01:28:41,090
think there's confusion but I am willing

1833
01:28:36,050 --> 01:28:43,370
to accept that yeah we need to yeah it

1834
01:28:41,090 --> 01:28:45,680
so you're saying if I am their senator

1835
01:28:43,370 --> 01:28:48,769
saying you're saying that features that

1836
01:28:45,680 --> 01:28:52,640
use the client and infrastructure are of

1837
01:28:48,770 --> 01:28:55,370
Liberty to add that prefix if they so

1838
01:28:52,640 --> 01:28:58,130
wish but but if I define a client hint

1839
01:28:55,370 --> 01:28:59,930
and I fail to call it CH - something

1840
01:28:58,130 --> 01:29:02,720
it's still a client and for all intents

1841
01:28:59,930 --> 01:29:05,810
and purposes okay nothing special would

1842
01:29:02,720 --> 01:29:07,640
happen yeah yeah because it's just the

1843
01:29:05,810 --> 01:29:08,330
when you start inferring things based

1844
01:29:07,640 --> 01:29:10,400
upon proof

1845
01:29:08,330 --> 01:29:12,470
when you get into a bit of a mess if

1846
01:29:10,400 --> 01:29:14,750
there are multiple facets to the prefix

1847
01:29:12,470 --> 01:29:16,400
because you know if we define five more

1848
01:29:14,750 --> 01:29:19,910
prefixes and then you have an ordering

1849
01:29:16,400 --> 01:29:20,870
problem yeah yeah you know so yeah and I

1850
01:29:19,910 --> 01:29:23,030
remember we had this whole discussion

1851
01:29:20,870 --> 01:29:24,620
when SEK came out and my objection was

1852
01:29:23,030 --> 01:29:26,719
well what happens when we define the

1853
01:29:24,620 --> 01:29:32,870
second and third prefixes and lo and

1854
01:29:26,720 --> 01:29:37,910
behold here we are okay so okay so we're

1855
01:29:32,870 --> 01:29:39,110
dropping the CH piece first like I'm not

1856
01:29:37,910 --> 01:29:41,800
telling you what to do but personally

1857
01:29:39,110 --> 01:29:45,259
for me okay I would just say you know

1858
01:29:41,800 --> 01:29:46,160
for security reasons I think there's a

1859
01:29:45,260 --> 01:29:49,220
whole nother discussion to be had about

1860
01:29:46,160 --> 01:29:51,500
whether sec - is always required on the

1861
01:29:49,220 --> 01:29:53,450
request header or whether it's for just

1862
01:29:51,500 --> 01:29:54,740
it's a case-by-case thing I think

1863
01:29:53,450 --> 01:29:58,280
there's there could be an argument that

1864
01:29:54,740 --> 01:30:00,080
some client hints are okay to expose to

1865
01:29:58,280 --> 01:30:02,900
JavaScript but that's you know case by

1866
01:30:00,080 --> 01:30:04,340
case and so I I personally would be like

1867
01:30:02,900 --> 01:30:06,410
okay every client who needs to evaluate

1868
01:30:04,340 --> 01:30:07,910
whether it needs this prefix and if you

1869
01:30:06,410 --> 01:30:13,220
want to be friendly put CH in the front

1870
01:30:07,910 --> 01:30:16,059
just so that people that that's

1871
01:30:13,220 --> 01:30:20,300
personally how am i we're doing okay

1872
01:30:16,060 --> 01:30:22,550
speaking for myself Chris lemons the if

1873
01:30:20,300 --> 01:30:25,970
there's a convention even if it's not

1874
01:30:22,550 --> 01:30:28,580
mandatory if for example even all of the

1875
01:30:25,970 --> 01:30:29,840
examples have CH in front of them

1876
01:30:28,580 --> 01:30:32,240
somebody's gonna write some software

1877
01:30:29,840 --> 01:30:34,840
assuming that they're gonna enumerate

1878
01:30:32,240 --> 01:30:39,440
all of the headers that have CH in them

1879
01:30:34,840 --> 01:30:42,170
right and that may be but it won't

1880
01:30:39,440 --> 01:30:45,379
actually break like the browsing use

1881
01:30:42,170 --> 01:30:48,380
case which is the main target here yeah

1882
01:30:45,380 --> 01:30:50,150
so nan Thomson I think the key thing

1883
01:30:48,380 --> 01:30:53,390
that we're looking for here is defining

1884
01:30:50,150 --> 01:30:55,790
the set of rules that we're setting out

1885
01:30:53,390 --> 01:30:57,920
for people defining new client hits and

1886
01:30:55,790 --> 01:31:00,950
that the key property that we're looking

1887
01:30:57,920 --> 01:31:03,890
for I think is that they all have second

1888
01:31:00,950 --> 01:31:06,590
front of them they're right that is

1889
01:31:03,890 --> 01:31:08,330
correct requiring this maybe that was

1890
01:31:06,590 --> 01:31:10,550
what I was just bringing up right and

1891
01:31:08,330 --> 01:31:13,940
and so so Marx suggested that maybe

1892
01:31:10,550 --> 01:31:18,590
that's not a strong requirement then may

1893
01:31:13,940 --> 01:31:20,990
be the case i I thought about this in

1894
01:31:18,590 --> 01:31:22,570
the past oh whatever the conclusion was

1895
01:31:20,990 --> 01:31:27,050
I think we should stick

1896
01:31:22,570 --> 01:31:32,360
um I I like that framing of the thing at

1897
01:31:27,050 --> 01:31:34,940
marquette so cool so from my perspective

1898
01:31:32,360 --> 01:31:38,839
and from a fetch processing perspective

1899
01:31:34,940 --> 01:31:41,089
I think it will be significantly simpler

1900
01:31:38,840 --> 01:31:44,380
and easier if all of them had a set

1901
01:31:41,090 --> 01:31:53,540
prefix and we wouldn't muck around with

1902
01:31:44,380 --> 01:31:57,020
multiple options there okay um so moving

1903
01:31:53,540 --> 01:32:03,170
on to the next issue moved to structure

1904
01:31:57,020 --> 01:32:04,480
and headers any objections to that okay

1905
01:32:03,170 --> 01:32:12,380
cool

1906
01:32:04,480 --> 01:32:16,790
ship it third issue is active versus

1907
01:32:12,380 --> 01:32:20,420
passive fingerprinting at the last in

1908
01:32:16,790 --> 01:32:24,560
Prague we had a lively discussion around

1909
01:32:20,420 --> 01:32:28,449
whether client hints are passive

1910
01:32:24,560 --> 01:32:28,449
fingerprinting vector or an active one

1911
01:32:28,480 --> 01:32:37,610
earlier today we had a like we had a

1912
01:32:32,510 --> 01:32:41,270
discussion with the Mozilla folks and I

1913
01:32:37,610 --> 01:32:45,440
think we have reached some some form of

1914
01:32:41,270 --> 01:32:47,510
understanding regarding the actual the

1915
01:32:45,440 --> 01:32:52,460
actual concerns there Martin do you want

1916
01:32:47,510 --> 01:32:56,300
to speak to that yeah

1917
01:32:52,460 --> 01:32:57,290
Thompson again there has been I think I

1918
01:32:56,300 --> 01:33:00,350
think we've got a bit of mutual

1919
01:32:57,290 --> 01:33:03,340
understanding of where things are we

1920
01:33:00,350 --> 01:33:06,020
haven't fully investigated the

1921
01:33:03,340 --> 01:33:07,880
propagation of client hints into third

1922
01:33:06,020 --> 01:33:09,590
party browsing contexts which requires a

1923
01:33:07,880 --> 01:33:13,429
little bit more thought on our part and

1924
01:33:09,590 --> 01:33:15,080
we'll find someone to look into that in

1925
01:33:13,429 --> 01:33:17,330
a bit more detail someone who's more

1926
01:33:15,080 --> 01:33:18,980
familiar with with what what our

1927
01:33:17,330 --> 01:33:23,650
policies are regarding third party

1928
01:33:18,980 --> 01:33:26,809
browsing at third party context the

1929
01:33:23,650 --> 01:33:29,960
question about whether this constitutes

1930
01:33:26,810 --> 01:33:33,629
a new surface area for passive

1931
01:33:29,960 --> 01:33:40,439
fingerprinting and various other passive

1932
01:33:33,629 --> 01:33:43,379
use of information I think we're getting

1933
01:33:40,439 --> 01:33:47,760
closer on this on this point the key

1934
01:33:43,379 --> 01:33:49,829
concerns seems to be right around the

1935
01:33:47,760 --> 01:33:51,689
properties of the individual client

1936
01:33:49,829 --> 01:33:54,148
hints that we're talking about and some

1937
01:33:51,689 --> 01:33:56,159
of them you can imagine being quite easy

1938
01:33:54,149 --> 01:33:59,280
so if we imagine that we had except

1939
01:33:56,159 --> 01:34:02,629
language turned into a client hint which

1940
01:33:59,280 --> 01:34:02,629
I think we want to do

1941
01:34:03,349 --> 01:34:10,050
that's essentially static and very

1942
01:34:06,689 --> 01:34:13,499
rarely changes in DPR and though some of

1943
01:34:10,050 --> 01:34:16,289
these things are very static in thing

1944
01:34:13,499 --> 01:34:18,148
and so when you release when when a site

1945
01:34:16,289 --> 01:34:20,188
says I would like access to that we can

1946
01:34:18,149 --> 01:34:23,309
look at that one access and treat that

1947
01:34:20,189 --> 01:34:24,959
as a single point of access and then we

1948
01:34:23,309 --> 01:34:27,359
don't have to worry so much about the

1949
01:34:24,959 --> 01:34:28,769
the information being relayed to the

1950
01:34:27,359 --> 01:34:31,800
site thereafter because it's always

1951
01:34:28,769 --> 01:34:33,389
going to be the same viewport is a

1952
01:34:31,800 --> 01:34:34,949
little more interesting because it does

1953
01:34:33,389 --> 01:34:37,349
change over time and there's a couple of

1954
01:34:34,949 --> 01:34:39,209
things that do change over time and then

1955
01:34:37,349 --> 01:34:42,899
at the extreme end we have something

1956
01:34:39,209 --> 01:34:45,269
like geolocation which has constant

1957
01:34:42,899 --> 01:34:47,249
changing properties but it may be the

1958
01:34:45,269 --> 01:34:49,649
case that what we're concerned about

1959
01:34:47,249 --> 01:34:52,139
there is that this is also a property

1960
01:34:49,649 --> 01:34:54,659
that is behind a permission gate or some

1961
01:34:52,139 --> 01:34:57,840
other thing like that and has additional

1962
01:34:54,659 --> 01:34:59,669
policies around its use and so we need

1963
01:34:57,840 --> 01:35:04,679
to understand how that interacts with

1964
01:34:59,669 --> 01:35:07,409
with with that as well so what we've

1965
01:35:04,679 --> 01:35:09,659
suggested is that we start being very

1966
01:35:07,409 --> 01:35:11,549
crisp about what it what it is that

1967
01:35:09,659 --> 01:35:13,409
we're using to decide whether

1968
01:35:11,550 --> 01:35:15,329
something's ok to use in this context

1969
01:35:13,409 --> 01:35:18,530
and be very clear about what our

1970
01:35:15,329 --> 01:35:21,179
principles drive that and allow for

1971
01:35:18,530 --> 01:35:22,829
different browser implementations to

1972
01:35:21,179 --> 01:35:25,590
make different decisions about what they

1973
01:35:22,829 --> 01:35:28,469
may or may not want to use in this

1974
01:35:25,590 --> 01:35:32,090
context so it might be that if we've got

1975
01:35:28,469 --> 01:35:34,289
a property that's available to script

1976
01:35:32,090 --> 01:35:36,479
passively that doesn't change very often

1977
01:35:34,289 --> 01:35:38,608
everyone's happy with that one there may

1978
01:35:36,479 --> 01:35:40,079
be some other ones that the information

1979
01:35:38,609 --> 01:35:43,050
is only available if there's an

1980
01:35:40,079 --> 01:35:45,449
engagement gesture and so we that might

1981
01:35:43,050 --> 01:35:47,170
be completely unsuitable for use in this

1982
01:35:45,449 --> 01:35:48,820
context because we've only we

1983
01:35:47,170 --> 01:35:51,489
want to be able to directly correlate

1984
01:35:48,820 --> 01:35:54,820
that action with the property being

1985
01:35:51,489 --> 01:35:57,009
released to the site and so there's a

1986
01:35:54,820 --> 01:36:00,460
little bit more work to do on this one

1987
01:35:57,010 --> 01:36:02,620
but I think the the core of the

1988
01:36:00,460 --> 01:36:05,620
realization here that we've reached is

1989
01:36:02,620 --> 01:36:07,300
that we need to allow for different

1990
01:36:05,620 --> 01:36:09,900
policies to be enacted by different

1991
01:36:07,300 --> 01:36:12,850
browsers and protect potentially even

1992
01:36:09,900 --> 01:36:14,110
different user preferences and whatnot

1993
01:36:12,850 --> 01:36:16,239
because we each have a different posture

1994
01:36:14,110 --> 01:36:20,170
with respect to this sort of information

1995
01:36:16,239 --> 01:36:22,269
and so what the problem I think we were

1996
01:36:20,170 --> 01:36:25,330
struggling with is that we were trying

1997
01:36:22,270 --> 01:36:27,190
to encode policy in these documents and

1998
01:36:25,330 --> 01:36:28,780
I think by having that realization we

1999
01:36:27,190 --> 01:36:36,730
may find ourselves in there in its

2000
01:36:28,780 --> 01:36:42,190
slightly better position thank you yeah

2001
01:36:36,730 --> 01:36:46,440
so yeah the I believe that the way

2002
01:36:42,190 --> 01:36:50,678
forward here is to try to formulate some

2003
01:36:46,440 --> 01:36:52,870
set of these policies and then

2004
01:36:50,679 --> 01:36:57,489
potentially add them to the security and

2005
01:36:52,870 --> 01:36:59,530
privacy considerations section and and

2006
01:36:57,489 --> 01:37:03,790
then we can move forward on that front

2007
01:36:59,530 --> 01:37:05,170
so so with that this may be the most

2008
01:37:03,790 --> 01:37:07,870
fully formed and well-thought-out

2009
01:37:05,170 --> 01:37:10,600
privacy considerations section in any

2010
01:37:07,870 --> 01:37:13,330
RFC ever so thank you for doing that

2011
01:37:10,600 --> 01:37:15,250
I know this has been hard but I think

2012
01:37:13,330 --> 01:37:18,910
we're getting pretty close to to this

2013
01:37:15,250 --> 01:37:20,350
being big a good thing and I do want to

2014
01:37:18,910 --> 01:37:22,570
start using this for things like user

2015
01:37:20,350 --> 01:37:27,460
agents so people this is fair warning

2016
01:37:22,570 --> 01:37:28,690
user agent is now on death row so so do

2017
01:37:27,460 --> 01:37:30,969
I hear you correctly the saying that

2018
01:37:28,690 --> 01:37:35,410
this actually is making you think think

2019
01:37:30,969 --> 01:37:37,060
about implementing for some for some not

2020
01:37:35,410 --> 01:37:38,590
all but for some clients good that

2021
01:37:37,060 --> 01:37:45,939
that's actually really great news thank

2022
01:37:38,590 --> 01:37:52,119
you okay

2023
01:37:45,939 --> 01:37:55,659
yeah thank you and the last issue is ice

2024
01:37:52,119 --> 01:37:57,880
it was a long title so I summed it up as

2025
01:37:55,659 --> 01:38:01,929
exposure to CD ends

2026
01:37:57,880 --> 01:38:06,550
I don't believe Peter Schneider is here

2027
01:38:01,929 --> 01:38:11,019
today but yeah in his absence

2028
01:38:06,550 --> 01:38:13,510
we'll discuss this basically if I try to

2029
01:38:11,019 --> 01:38:17,579
sum up there the claims in the issue is

2030
01:38:13,510 --> 01:38:22,479
that client hints because they are

2031
01:38:17,579 --> 01:38:27,308
structured and readable automatically

2032
01:38:22,479 --> 01:38:32,939
readable they expose those exposed

2033
01:38:27,309 --> 01:38:32,939
values that servers have opted into to

2034
01:38:34,289 --> 01:38:40,978
other parties on the wire which are

2035
01:38:37,539 --> 01:38:46,150
typically because this is restricted to

2036
01:38:40,979 --> 01:38:51,909
HTTPS are either CDNs or MIT M proxies

2037
01:38:46,150 --> 01:38:54,669
and the claim is that this will enable

2038
01:38:51,909 --> 01:38:58,919
those parties to log that sensitive

2039
01:38:54,669 --> 01:39:04,030
information and I believe the question

2040
01:38:58,919 --> 01:39:06,760
sums up to our CD ends part of the

2041
01:39:04,030 --> 01:39:11,619
threat like the privacy threat model

2042
01:39:06,760 --> 01:39:13,900
because they can like if you have if

2043
01:39:11,619 --> 01:39:16,719
your mi tanning TLS or like if you're

2044
01:39:13,900 --> 01:39:19,150
terminating TLS you can already inject

2045
01:39:16,719 --> 01:39:24,010
JavaScript and do all kinds of bad

2046
01:39:19,150 --> 01:39:27,429
things if you so wish and I don't think

2047
01:39:24,010 --> 01:39:31,269
that logging that potential finger

2048
01:39:27,429 --> 01:39:38,169
printable information is on the top of

2049
01:39:31,269 --> 01:39:40,090
those bad things and so the CDN is the

2050
01:39:38,169 --> 01:39:44,139
origin from the perspective of the of

2051
01:39:40,090 --> 01:39:47,050
the other browser so what the CDN wants

2052
01:39:44,139 --> 01:39:49,389
to do with this information is the

2053
01:39:47,050 --> 01:39:51,459
business of the origin server and the

2054
01:39:49,389 --> 01:39:54,119
CDN they consult that adults themselves

2055
01:39:51,459 --> 01:39:58,329
I don't think that represents any

2056
01:39:54,119 --> 01:39:59,500
special privacy problem and I don't

2057
01:39:58,329 --> 01:40:01,630
think it's worth docume

2058
01:39:59,500 --> 01:40:03,600
that and if we're gonna start talking

2059
01:40:01,630 --> 01:40:07,630
about interception props and proxies

2060
01:40:03,600 --> 01:40:08,830
we're into all sorts of problems and I'm

2061
01:40:07,630 --> 01:40:14,530
not signing on for that and I don't

2062
01:40:08,830 --> 01:40:18,640
expect anyone else to have to so Reynes

2063
01:40:14,530 --> 01:40:20,679
levy Google and as much like it could

2064
01:40:18,640 --> 01:40:23,110
rehash something that will mark thought

2065
01:40:20,680 --> 01:40:25,030
we close to happy there's a lot of

2066
01:40:23,110 --> 01:40:27,700
discussion when we were developing the

2067
01:40:25,030 --> 01:40:29,320
browser web crypto API in terms of why

2068
01:40:27,700 --> 01:40:30,940
are some folks gonna use this well in

2069
01:40:29,320 --> 01:40:33,160
the common cases for sort of client-side

2070
01:40:30,940 --> 01:40:34,599
encryption even though sir Brian could

2071
01:40:33,160 --> 01:40:37,690
you just get a little closer I'm sorry

2072
01:40:34,600 --> 01:40:39,910
yeah um one of the discussions with why

2073
01:40:37,690 --> 01:40:42,790
why would you do browsers client-side

2074
01:40:39,910 --> 01:40:44,860
encryption for things was an example to

2075
01:40:42,790 --> 01:40:46,660
prevent information from from being

2076
01:40:44,860 --> 01:40:48,730
accidentally logged right there's been

2077
01:40:46,660 --> 01:40:50,260
multiple security breaches of say then

2078
01:40:48,730 --> 01:40:54,400
there's accidentally logging passwords

2079
01:40:50,260 --> 01:40:56,830
then causing issues so in that argument

2080
01:40:54,400 --> 01:40:58,690
in which it says that this is not a

2081
01:40:56,830 --> 01:41:00,640
threat from an adversarial threat model

2082
01:40:58,690 --> 01:41:03,160
it is a threat from an incidental or

2083
01:41:00,640 --> 01:41:04,600
accidental operational failure rienne

2084
01:41:03,160 --> 01:41:06,490
and this is the part that makes mark

2085
01:41:04,600 --> 01:41:08,650
unhappy is the reintroduction of a

2086
01:41:06,490 --> 01:41:11,440
prefix to indicate for intermediaries

2087
01:41:08,650 --> 01:41:13,750
you perhaps should not love hug SEC CH

2088
01:41:11,440 --> 01:41:16,000
anything in that prefix on the basis

2089
01:41:13,750 --> 01:41:18,190
that if we assume that client heads as

2090
01:41:16,000 --> 01:41:19,660
Martin was talking about may contain

2091
01:41:18,190 --> 01:41:21,849
some identifying information or may

2092
01:41:19,660 --> 01:41:23,290
themselves be fingerprinting the ability

2093
01:41:21,850 --> 01:41:25,840
to have that structure allows for

2094
01:41:23,290 --> 01:41:27,460
filtration on the server side to prevent

2095
01:41:25,840 --> 01:41:29,170
the incidental logging of that

2096
01:41:27,460 --> 01:41:31,450
information the same way that one might

2097
01:41:29,170 --> 01:41:34,510
say should filter out cookie or other

2098
01:41:31,450 --> 01:41:36,429
headers in you know a structured header

2099
01:41:34,510 --> 01:41:40,420
this might be a single field so you

2100
01:41:36,430 --> 01:41:41,620
might not need the CH prefix so it sorry

2101
01:41:40,420 --> 01:41:44,230
we're talking exclusively about the

2102
01:41:41,620 --> 01:41:46,210
previous issue effectively i we're

2103
01:41:44,230 --> 01:41:47,469
suggesting that the CD ends are not the

2104
01:41:46,210 --> 01:41:49,000
adversarial threatened model they're

2105
01:41:47,470 --> 01:41:51,700
they're inseparable so yeah

2106
01:41:49,000 --> 01:41:55,020
reintroducing a sure my immediate

2107
01:41:51,700 --> 01:41:57,790
question would be is there any

2108
01:41:55,020 --> 01:41:59,560
difference between you know the headers

2109
01:41:57,790 --> 01:42:01,440
that need a sec is a prefix and the

2110
01:41:59,560 --> 01:42:08,380
headers that need a different flag for

2111
01:42:01,440 --> 01:42:10,929
district model that is an excellent

2112
01:42:08,380 --> 01:42:13,000
question it is very much a general

2113
01:42:10,930 --> 01:42:18,520
problem right yeah

2114
01:42:13,000 --> 01:42:20,890
our absolute so Martin Thompson on that

2115
01:42:18,520 --> 01:42:22,780
point though it is a good one and I

2116
01:42:20,890 --> 01:42:24,400
think rockins onto onto something that

2117
01:42:22,780 --> 01:42:26,349
we need to think about more generally

2118
01:42:24,400 --> 01:42:29,320
when we start talking about adding

2119
01:42:26,350 --> 01:42:31,870
header fields I tend to think that these

2120
01:42:29,320 --> 01:42:37,150
are very much designed for consumption

2121
01:42:31,870 --> 01:42:39,760
by CD ends and so accidental logging

2122
01:42:37,150 --> 01:42:42,250
aside these are this is something that

2123
01:42:39,760 --> 01:42:43,750
Citians probably want to log because

2124
01:42:42,250 --> 01:42:47,200
it's going to be changing their behavior

2125
01:42:43,750 --> 01:42:52,600
and so if we think about it in that

2126
01:42:47,200 --> 01:42:54,880
context maybe we'll find that going to

2127
01:42:52,600 --> 01:42:56,320
that going to those extra effort putting

2128
01:42:54,880 --> 01:42:57,790
the extra effort in to make them

2129
01:42:56,320 --> 01:42:59,860
distinguishable so that they can't be

2130
01:42:57,790 --> 01:43:03,130
logged isn't really a much use when

2131
01:42:59,860 --> 01:43:07,509
they're going to end up in the logs

2132
01:43:03,130 --> 01:43:11,230
anyway so it sounds like maybe there's a

2133
01:43:07,510 --> 01:43:13,090
little interest in saying please in your

2134
01:43:11,230 --> 01:43:15,419
operational practices realize that this

2135
01:43:13,090 --> 01:43:17,710
is sensitive information potentially

2136
01:43:15,420 --> 01:43:24,480
whether it's in a CDN whether it's on an

2137
01:43:17,710 --> 01:43:27,790
Origin server in a database or is that

2138
01:43:24,480 --> 01:43:29,919
and I think that that is the right

2139
01:43:27,790 --> 01:43:32,470
balance to strike here is recognizing

2140
01:43:29,920 --> 01:43:34,030
that this could be identifiable

2141
01:43:32,470 --> 01:43:35,380
information particularly once we said

2142
01:43:34,030 --> 01:43:38,500
start to get to the point where there's

2143
01:43:35,380 --> 01:43:41,440
enough entropy in here to narrow things

2144
01:43:38,500 --> 01:43:43,750
down quite a lot and so recognizing that

2145
01:43:41,440 --> 01:43:46,089
and just just putting it in there saying

2146
01:43:43,750 --> 01:43:49,170
that when someone handles this

2147
01:43:46,090 --> 01:43:51,160
information they treat it with respect

2148
01:43:49,170 --> 01:43:52,680
motherhood and apple pie but do it

2149
01:43:51,160 --> 01:43:54,849
anyway yes okay

2150
01:43:52,680 --> 01:43:57,340
extending the lis care that the sec

2151
01:43:54,850 --> 01:43:59,110
prefix implies through the rest of the

2152
01:43:57,340 --> 01:44:01,900
ecosystem no does that give me the

2153
01:43:59,110 --> 01:44:13,870
information yeah that that makes total

2154
01:44:01,900 --> 01:44:20,670
sense ok ok and then new and exciting

2155
01:44:13,870 --> 01:44:23,640
developments HTTP SVC enables us to

2156
01:44:20,670 --> 01:44:27,840
solve one of the long-standing issues

2157
01:44:23,640 --> 01:44:32,639
related to adoption people

2158
01:44:27,840 --> 01:44:36,239
wanted to use cryin hints as a way to

2159
01:44:32,639 --> 01:44:39,070
come to perform adaptation on the

2160
01:44:36,239 --> 01:44:42,159
navigation response so typically on the

2161
01:44:39,070 --> 01:44:45,099
HTML itself and that has always been a

2162
01:44:42,159 --> 01:44:50,170
thorny point we added except CH lifetime

2163
01:44:45,099 --> 01:44:52,689
in order to address it in future H HTML

2164
01:44:50,170 --> 01:44:56,489
related negotiations but it didn't

2165
01:44:52,689 --> 01:45:01,539
address the very first request and

2166
01:44:56,489 --> 01:45:05,079
pushing that except CH signal to DNS

2167
01:45:01,539 --> 01:45:09,610
will enable us to solve that problem

2168
01:45:05,079 --> 01:45:13,150
I wrote a PR that adds an alt service

2169
01:45:09,610 --> 01:45:17,469
extension to client hints it's not clear

2170
01:45:13,150 --> 01:45:20,228
that this David Benjamin have commented

2171
01:45:17,469 --> 01:45:24,579
on that basically saying that it has a

2172
01:45:20,229 --> 01:45:27,789
few different characteristics from other

2173
01:45:24,579 --> 01:45:31,030
things that are currently in service so

2174
01:45:27,789 --> 01:45:33,518
maybe all service is not the right

2175
01:45:31,030 --> 01:45:37,209
answer here but I would love to find a

2176
01:45:33,519 --> 01:45:39,570
path forward to push the opt-in to DNS

2177
01:45:37,209 --> 01:45:41,789
as well on top of just being a header I

2178
01:45:39,570 --> 01:45:43,509
think we're gonna treat that as an FYI

2179
01:45:41,789 --> 01:45:46,719
because we're gonna talk about HP

2180
01:45:43,510 --> 01:45:49,570
service on Thursday and it might come up

2181
01:45:46,719 --> 01:45:52,030
after that or or not and we're running

2182
01:45:49,570 --> 01:45:55,959
low on time okay another substantial

2183
01:45:52,030 --> 01:46:02,619
discussion I have yes and yeah the last

2184
01:45:55,959 --> 01:46:04,510
question is can we move forward or what

2185
01:46:02,619 --> 01:46:07,360
like it seems like we have a path

2186
01:46:04,510 --> 01:46:08,590
forward for all the open issues it seems

2187
01:46:07,360 --> 01:46:10,268
like the next thing to do is to

2188
01:46:08,590 --> 01:46:12,699
incorporate those finish those

2189
01:46:10,269 --> 01:46:15,519
discussions get a new draft out and it

2190
01:46:12,699 --> 01:46:17,978
sounds like last call is looming to me I

2191
01:46:15,519 --> 01:46:21,489
think you know please didn't on the

2192
01:46:17,979 --> 01:46:23,229
horizon perhaps yeah it feels like we

2193
01:46:21,489 --> 01:46:24,400
have like a path forward as you say so

2194
01:46:23,229 --> 01:46:26,079
let's see the text see if we get

2195
01:46:24,400 --> 01:46:27,808
consensus around the text but you know I

2196
01:46:26,079 --> 01:46:30,969
think that's definitely worth changing

2197
01:46:27,809 --> 01:46:33,489
okay thank you so much thank you for for

2198
01:46:30,969 --> 01:46:37,599
the engagement yeah you ever anything to

2199
01:46:33,489 --> 01:46:39,769
say on the cookies draft okay so we are

2200
01:46:37,599 --> 01:46:42,410
going to skip the cookies draft

2201
01:46:39,770 --> 01:46:45,920
and move on to the priority conversation

2202
01:46:42,410 --> 01:46:47,960
so ian has a presentation for us it's

2203
01:46:45,920 --> 01:46:50,110
all a bit of a tease here to get things

2204
01:46:47,960 --> 01:46:50,110
going

2205
01:46:52,719 --> 01:47:07,640
yep should be challenging my name is Ian

2206
01:47:06,050 --> 01:47:10,100
sweat I'm from Google I'm talking about

2207
01:47:07,640 --> 01:47:12,140
HP three priorities and to some extent

2208
01:47:10,100 --> 01:47:14,870
HP two priorities I talked about this

2209
01:47:12,140 --> 01:47:17,930
briefly at the Quicken Durham in London

2210
01:47:14,870 --> 01:47:19,370
and here's kind of an overview of where

2211
01:47:17,930 --> 01:47:22,460
we're at today and what are some ideas

2212
01:47:19,370 --> 01:47:25,940
of the HP 3 workgroup members

2213
01:47:22,460 --> 01:47:27,890
excellent so it all began with the coin

2214
01:47:25,940 --> 01:47:31,460
flip I was not there I know some of you

2215
01:47:27,890 --> 01:47:33,860
were and I know there are two competing

2216
01:47:31,460 --> 01:47:39,640
proposals and the tree-based proposal

2217
01:47:33,860 --> 01:47:42,290
next slide one so HP two priority tree

2218
01:47:39,640 --> 01:47:44,810
is essentially you know it's what you

2219
01:47:42,290 --> 01:47:47,180
have here there are weights and you know

2220
01:47:44,810 --> 01:47:49,430
notes gonna have parents streams can

2221
01:47:47,180 --> 01:47:54,080
depend on streams or they can depend on

2222
01:47:49,430 --> 01:47:55,400
this implicit route so there's been a

2223
01:47:54,080 --> 01:47:57,620
fair amount of discussion historically

2224
01:47:55,400 --> 01:47:59,809
on the list to vote the challenges of

2225
01:47:57,620 --> 01:48:02,660
streams depending on streams in certain

2226
01:47:59,810 --> 01:48:04,880
circumstances there's also this concept

2227
01:48:02,660 --> 01:48:07,070
of placeholders which I'll talk about

2228
01:48:04,880 --> 01:48:08,469
briefly later but which is basically

2229
01:48:07,070 --> 01:48:11,059
like a stream that doesn't really exist

2230
01:48:08,469 --> 01:48:12,410
it just exists so you can have something

2231
01:48:11,060 --> 01:48:15,710
that you can reference for a very long

2232
01:48:12,410 --> 01:48:16,700
period of time and Firefox actually uses

2233
01:48:15,710 --> 01:48:20,840
a session see you later

2234
01:48:16,700 --> 01:48:22,910
so RFC 7540 has a much nicer description

2235
01:48:20,840 --> 01:48:27,080
so given my time I'm gonna keep moving

2236
01:48:22,910 --> 01:48:28,400
for it yeah so one way of thinking about

2237
01:48:27,080 --> 01:48:30,140
them and the way I usually think about

2238
01:48:28,400 --> 01:48:32,330
them is that strict prioritization is

2239
01:48:30,140 --> 01:48:34,250
implicit and encoded in the tree

2240
01:48:32,330 --> 01:48:37,100
structure and the weights allow you to

2241
01:48:34,250 --> 01:48:40,100
share bandwidth between nodes where the

2242
01:48:37,100 --> 01:48:43,780
nodes my either be streams themselves or

2243
01:48:40,100 --> 01:48:46,670
like trees of have streams so next slide

2244
01:48:43,780 --> 01:48:50,239
so how do browsers use H to party next

2245
01:48:46,670 --> 01:48:53,090
slide so chrome uses a linked list

2246
01:48:50,239 --> 01:48:55,638
essentially so just puts everything

2247
01:48:53,090 --> 01:48:57,830
in one big long list and that gives it

2248
01:48:55,639 --> 01:48:59,780
strict ordering so it knows exactly

2249
01:48:57,830 --> 01:49:02,150
which thing is higher priority than the

2250
01:48:59,780 --> 01:49:04,659
other thing this is very straightforward

2251
01:49:02,150 --> 01:49:07,219
and maps relatively well to its five

2252
01:49:04,659 --> 01:49:10,629
party levels that it has internally in

2253
01:49:07,219 --> 01:49:14,420
the in the browser next slide

2254
01:49:10,630 --> 01:49:16,489
Firefox creates this placeholder model

2255
01:49:14,420 --> 01:49:19,190
where it uses a six plate or sorry five

2256
01:49:16,489 --> 01:49:20,780
placeholders and separates things into

2257
01:49:19,190 --> 01:49:22,848
buckets based on whether or not their

2258
01:49:20,780 --> 01:49:26,150
render blocking resources or background

2259
01:49:22,849 --> 01:49:28,219
so on and so forth and uses weights to

2260
01:49:26,150 --> 01:49:29,989
end dependencies to kind of trade off

2261
01:49:28,219 --> 01:49:32,179
between them but it uses weights a

2262
01:49:29,989 --> 01:49:34,750
little bit more than than chrome DES

2263
01:49:32,179 --> 01:49:39,889
next slide

2264
01:49:34,750 --> 01:49:41,119
Safari does use weights and you know

2265
01:49:39,889 --> 01:49:43,070
kind of just puts render blocking

2266
01:49:41,119 --> 01:49:45,769
resources at higher weights then than

2267
01:49:43,070 --> 01:49:47,210
other things I didn't actually put edge

2268
01:49:45,770 --> 01:49:51,080
in here it was originally in here but

2269
01:49:47,210 --> 01:49:53,139
the last time I checked now in edge iam

2270
01:49:51,080 --> 01:49:55,309
I believe it's just as what chrome does

2271
01:49:53,139 --> 01:49:56,570
prior to that it just didn't send

2272
01:49:55,310 --> 01:49:58,550
anything at all and use the default

2273
01:49:56,570 --> 01:50:04,909
which is pure round-robin with no

2274
01:49:58,550 --> 01:50:06,199
waiting whatsoever next slide so let me

2275
01:50:04,909 --> 01:50:09,199
give you a quick overview of a few of

2276
01:50:06,199 --> 01:50:10,699
the other both where we're at for h3

2277
01:50:09,199 --> 01:50:13,250
right now as well as some alternative

2278
01:50:10,699 --> 01:50:15,199
proposal proposed on the list first by

2279
01:50:13,250 --> 01:50:16,790
Patric meanin and then subsequently

2280
01:50:15,199 --> 01:50:18,830
discuss prior ID about their working

2281
01:50:16,790 --> 01:50:28,190
group member isn't including Lucas and

2282
01:50:18,830 --> 01:50:31,510
Kazuo next next next okay sorry I was

2283
01:50:28,190 --> 01:50:35,330
gonna need to save my time

2284
01:50:31,510 --> 01:50:38,360
so conceptually HQ priority tree that we

2285
01:50:35,330 --> 01:50:41,090
discussed previously it's really clean

2286
01:50:38,360 --> 01:50:42,920
like you have two concepts you have a

2287
01:50:41,090 --> 01:50:44,989
you know basically who you're a parent

2288
01:50:42,920 --> 01:50:47,300
of and a weight and it provides you a

2289
01:50:44,989 --> 01:50:49,909
huge amount of power and a lot of

2290
01:50:47,300 --> 01:50:52,340
flexibility but it has some challenges

2291
01:50:49,909 --> 01:50:54,199
and it provides a lot of functionality

2292
01:50:52,340 --> 01:50:56,989
that in reality browsers like really are

2293
01:50:54,199 --> 01:50:58,790
not using and do not need and some of

2294
01:50:56,989 --> 01:51:03,589
that complexity embodies itself in the

2295
01:50:58,790 --> 01:51:05,460
implementations as well so next slide h3

2296
01:51:03,590 --> 01:51:07,020
priorities actually are you can

2297
01:51:05,460 --> 01:51:08,760
they argue this but most people think

2298
01:51:07,020 --> 01:51:11,040
they're slightly more complex as they

2299
01:51:08,760 --> 01:51:12,570
are currently specified than 82

2300
01:51:11,040 --> 01:51:14,610
priorities they add explicit

2301
01:51:12,570 --> 01:51:17,370
placeholders instead of having implicit

2302
01:51:14,610 --> 01:51:18,990
ones so whether this is more or less

2303
01:51:17,370 --> 01:51:23,760
complex than in Pleasant ones maybe use

2304
01:51:18,990 --> 01:51:25,650
a point of contention but in order to

2305
01:51:23,760 --> 01:51:28,710
ensure consistency all priority frames

2306
01:51:25,650 --> 01:51:31,019
are now sent on the control stream so

2307
01:51:28,710 --> 01:51:33,360
you can't send priority as part of the

2308
01:51:31,020 --> 01:51:38,240
request itself because you may have

2309
01:51:33,360 --> 01:51:40,650
issues with you know does this priority

2310
01:51:38,240 --> 01:51:43,290
apply for storage is this one to apply

2311
01:51:40,650 --> 01:51:44,639
first and you just you basically get

2312
01:51:43,290 --> 01:51:46,920
tree and consistency because you're

2313
01:51:44,640 --> 01:51:48,390
trying to maintain distributed state at

2314
01:51:46,920 --> 01:51:50,700
a distance and you have no idea why

2315
01:51:48,390 --> 01:51:51,810
blocking so the only way to really fix

2316
01:51:50,700 --> 01:51:53,849
that is to put them on the control

2317
01:51:51,810 --> 01:51:55,260
stream so you've actually reintroduced

2318
01:51:53,850 --> 01:51:57,480
head-of-line blocking into a protocol

2319
01:51:55,260 --> 01:52:00,360
but we would like not to have a head of

2320
01:51:57,480 --> 01:52:01,950
wire blocking in however we solve this

2321
01:52:00,360 --> 01:52:05,429
by adding this orphan placeholder

2322
01:52:01,950 --> 01:52:07,559
concept so the idea is really we

2323
01:52:05,430 --> 01:52:09,960
probably want the default to be FIFO not

2324
01:52:07,560 --> 01:52:13,700
round-robin and so in order to achieve

2325
01:52:09,960 --> 01:52:15,990
that we've created something that's

2326
01:52:13,700 --> 01:52:18,360
basically like if you're not really sure

2327
01:52:15,990 --> 01:52:20,580
how to prairies prioritize this thing

2328
01:52:18,360 --> 01:52:22,710
you put it at the root and you service

2329
01:52:20,580 --> 01:52:25,290
it after everything else is one way of

2330
01:52:22,710 --> 01:52:29,130
thinking about it so it's also been

2331
01:52:25,290 --> 01:52:32,670
proposed as a zero weight option I think

2332
01:52:29,130 --> 01:52:34,620
functionally they're quite similar but

2333
01:52:32,670 --> 01:52:35,670
but the goal here is to achieve FIFO by

2334
01:52:34,620 --> 01:52:37,470
default

2335
01:52:35,670 --> 01:52:39,180
especially when the priority information

2336
01:52:37,470 --> 01:52:41,850
is lost because now it's on a different

2337
01:52:39,180 --> 01:52:48,300
stream and it's not embody embedded in

2338
01:52:41,850 --> 01:52:50,790
the request header next slide so patrick

2339
01:52:48,300 --> 01:52:52,020
mean on the list around january or

2340
01:52:50,790 --> 01:52:54,269
february of this year

2341
01:52:52,020 --> 01:52:56,780
proposed something that's largely a

2342
01:52:54,270 --> 01:53:00,210
speedy style in numerical priority

2343
01:52:56,780 --> 01:53:03,840
originally had two bits for concurrency

2344
01:53:00,210 --> 01:53:06,780
now we simplified it to one so this is

2345
01:53:03,840 --> 01:53:09,150
basically saying you know everything has

2346
01:53:06,780 --> 01:53:10,860
kind of a strict prioritization you know

2347
01:53:09,150 --> 01:53:13,500
higher priority service before lower

2348
01:53:10,860 --> 01:53:14,670
priorities and then either you want a

2349
01:53:13,500 --> 01:53:17,400
request

2350
01:53:14,670 --> 01:53:18,520
sequentially so you want the entire

2351
01:53:17,400 --> 01:53:20,710
response all

2352
01:53:18,520 --> 01:53:23,170
or you'd like it round-robin too with

2353
01:53:20,710 --> 01:53:25,660
other requests there are the few more

2354
01:53:23,170 --> 01:53:27,340
details that are in the write-up but

2355
01:53:25,660 --> 01:53:30,160
this is based on his experience on the

2356
01:53:27,340 --> 01:53:33,940
quorum loading team as well as assume

2357
01:53:30,160 --> 01:53:36,730
experience at CloudFlare next slide and

2358
01:53:33,940 --> 01:53:38,080
actually I should go back one sorry for

2359
01:53:36,730 --> 01:53:40,540
people who haven't read it that the blog

2360
01:53:38,080 --> 01:53:43,360
post that's linked to is quite a nice

2361
01:53:40,540 --> 01:53:44,769
write-up of priorities and it's it's

2362
01:53:43,360 --> 01:53:49,630
well worth reading if it's only for

2363
01:53:44,770 --> 01:53:52,800
educational purposes so excellent so

2364
01:53:49,630 --> 01:53:56,320
what do we actually need here actually

2365
01:53:52,800 --> 01:53:58,390
so based on what I can I can observe

2366
01:53:56,320 --> 01:54:01,360
separate research efforts both Patrick

2367
01:53:58,390 --> 01:54:03,580
Menon and Robin Marx and others have

2368
01:54:01,360 --> 01:54:05,230
kind of come to around the same

2369
01:54:03,580 --> 01:54:08,380
conclusion of what we want at least for

2370
01:54:05,230 --> 01:54:10,139
standard web page loading so the optimal

2371
01:54:08,380 --> 01:54:12,490
ordering occurring to Patrick is

2372
01:54:10,140 --> 01:54:13,810
serialized the CSS and blocking

2373
01:54:12,490 --> 01:54:26,070
JavaScript I will just let you read it

2374
01:54:13,810 --> 01:54:30,370
it's probably next slide sorry

2375
01:54:26,070 --> 01:54:33,280
hmm this is for a web HS this is not for

2376
01:54:30,370 --> 01:54:35,620
video and other things no one's actually

2377
01:54:33,280 --> 01:54:37,269
done video like research on video which

2378
01:54:35,620 --> 01:54:40,269
is always kind of curious

2379
01:54:37,270 --> 01:54:42,670
I did ask Robin for follow up on that

2380
01:54:40,270 --> 01:54:46,330
but I assume yet he's not going to run

2381
01:54:42,670 --> 01:54:48,990
into it yeah so this is kazoos comment

2382
01:54:46,330 --> 01:54:52,210
which is a much maybe a more visual

2383
01:54:48,990 --> 01:54:56,710
representation of largely the same text

2384
01:54:52,210 --> 01:54:58,240
that was in Patrick's comment and so

2385
01:54:56,710 --> 01:54:59,440
there's a few ways of representing this

2386
01:54:58,240 --> 01:55:01,179
but I think we have a much better idea

2387
01:54:59,440 --> 01:55:04,150
at least for webpage loading like what

2388
01:55:01,180 --> 01:55:08,910
what we're trying to achieve so one more

2389
01:55:04,150 --> 01:55:11,830
slide and from Robin Marx paper itself

2390
01:55:08,910 --> 01:55:13,180
some observations and he compared I

2391
01:55:11,830 --> 01:55:15,640
think eight or nine different schemes

2392
01:55:13,180 --> 01:55:18,010
against one another more sequential

2393
01:55:15,640 --> 01:55:21,220
schemes generally outperform more round

2394
01:55:18,010 --> 01:55:24,040
robin like schemes so if in doubt do

2395
01:55:21,220 --> 01:55:25,870
FIFO and it's perfectly possible to

2396
01:55:24,040 --> 01:55:27,519
switch from us to a simplified

2397
01:55:25,870 --> 01:55:29,650
prioritization framework while still

2398
01:55:27,520 --> 01:55:30,940
fully supporting the web browser use

2399
01:55:29,650 --> 01:55:37,389
case without losing perform

2400
01:55:30,940 --> 01:55:39,849
so next slide yeah so what do you really

2401
01:55:37,390 --> 01:55:43,480
need most things we want to be FIFO some

2402
01:55:39,850 --> 01:55:45,790
things ideally should be round-robin so

2403
01:55:43,480 --> 01:55:48,009
we want to try to make FIFO easier and

2404
01:55:45,790 --> 01:55:50,620
that's why we did the orphan placeholder

2405
01:55:48,010 --> 01:55:56,800
proposal in the existing h3 model next

2406
01:55:50,620 --> 01:55:58,690
slide so h2 priorities can achieve

2407
01:55:56,800 --> 01:56:00,850
optimal loading but so why do we want to

2408
01:55:58,690 --> 01:56:02,019
change this so there's some pretty

2409
01:56:00,850 --> 01:56:03,699
substantial issues some of them

2410
01:56:02,020 --> 01:56:06,940
technical and some of them known next

2411
01:56:03,699 --> 01:56:10,750
slide so I think we'd really like wide

2412
01:56:06,940 --> 01:56:13,960
adoption it depends on your view of

2413
01:56:10,750 --> 01:56:15,670
adoption and http2 priorities but full

2414
01:56:13,960 --> 01:56:18,610
adoption is something in the range of 25

2415
01:56:15,670 --> 01:56:20,500
percent according to one study you know

2416
01:56:18,610 --> 01:56:22,269
I think partial adoption is is certainly

2417
01:56:20,500 --> 01:56:24,100
a bit better but it's certainly not

2418
01:56:22,270 --> 01:56:27,070
ubiquitous on either the client or the

2419
01:56:24,100 --> 01:56:29,110
server side and most the clients that

2420
01:56:27,070 --> 01:56:31,239
you saw at the beginning they started

2421
01:56:29,110 --> 01:56:33,429
using priorities on the day that some

2422
01:56:31,239 --> 01:56:36,070
web developer decided he'd like had some

2423
01:56:33,430 --> 01:56:37,600
good ideas and then like he did a test

2424
01:56:36,070 --> 01:56:39,519
and maybe he was better in some

2425
01:56:37,600 --> 01:56:40,510
circumstance and then it hasn't been

2426
01:56:39,520 --> 01:56:42,400
touched in like four years

2427
01:56:40,510 --> 01:56:44,860
great like I mean this is not being

2428
01:56:42,400 --> 01:56:46,719
actively worked on and improved from

2429
01:56:44,860 --> 01:56:49,900
what I can observe so I mean I don't

2430
01:56:46,719 --> 01:56:51,969
think we're seeing an increase in the h2

2431
01:56:49,900 --> 01:56:54,549
variety adoption at this stage or

2432
01:56:51,969 --> 01:56:58,270
dramatically changing usage patterns for

2433
01:56:54,550 --> 01:57:02,800
what I can establish so I have two

2434
01:56:58,270 --> 01:57:04,989
minutes that's awesome next slide

2435
01:57:02,800 --> 01:57:06,670
as Patrick Meighan pointed out in his

2436
01:57:04,989 --> 01:57:09,429
blog post very nicely it would be

2437
01:57:06,670 --> 01:57:11,380
awesome to allow server input sometimes

2438
01:57:09,430 --> 01:57:14,320
the server simply does no more than the

2439
01:57:11,380 --> 01:57:17,380
browser and the existing tree model is

2440
01:57:14,320 --> 01:57:18,820
extremely difficult to achieve this so

2441
01:57:17,380 --> 01:57:20,770
as we already discussed you have to put

2442
01:57:18,820 --> 01:57:21,759
everything in this certain order and you

2443
01:57:20,770 --> 01:57:23,020
have to put everything on the header

2444
01:57:21,760 --> 01:57:24,610
stream otherwise you have the

2445
01:57:23,020 --> 01:57:27,489
possibility of what losing

2446
01:57:24,610 --> 01:57:29,469
synchronization if you try to achieve

2447
01:57:27,489 --> 01:57:30,849
that with a back-end and a client at the

2448
01:57:29,469 --> 01:57:32,860
same time it's essentially an

2449
01:57:30,850 --> 01:57:34,210
intractable problem it's impossible to

2450
01:57:32,860 --> 01:57:38,580
know like really what the tree should

2451
01:57:34,210 --> 01:57:41,290
look like next slide

2452
01:57:38,580 --> 01:57:42,820
Firefox needs placeholders right now

2453
01:57:41,290 --> 01:57:43,869
they're not actually required that's

2454
01:57:42,820 --> 01:57:53,650
sort of a bummer for them

2455
01:57:43,869 --> 01:57:58,389
next slide next slide next slide or if

2456
01:57:53,650 --> 01:58:05,019
it doesn't work next slide okay let me

2457
01:57:58,389 --> 01:58:11,980
stop here so next slide sorry and next

2458
01:58:05,020 --> 01:58:13,150
next there we go so my original thought

2459
01:58:11,980 --> 01:58:15,009
is it seems like we're basically

2460
01:58:13,150 --> 01:58:16,809
narrowing down on some proposal that

2461
01:58:15,010 --> 01:58:20,050
some amount of like number of buckets

2462
01:58:16,810 --> 01:58:21,790
and a bit for concurrency as being like

2463
01:58:20,050 --> 01:58:23,530
perfectly sufficient for the web

2464
01:58:21,790 --> 01:58:24,670
browsing use case and providing optimal

2465
01:58:23,530 --> 01:58:26,530
performance and we have some better

2466
01:58:24,670 --> 01:58:29,349
ideas on how to use it

2467
01:58:26,530 --> 01:58:30,670
my original suggestion was that we try

2468
01:58:29,349 --> 01:58:32,800
to move forward with that and try to

2469
01:58:30,670 --> 01:58:37,150
move forward with that but for both hp2

2470
01:58:32,800 --> 01:58:40,239
and for HTTP 3 subsequently others have

2471
01:58:37,150 --> 01:58:41,799
suggested like they really don't want to

2472
01:58:40,239 --> 01:58:44,559
go that way at this stage in the game

2473
01:58:41,800 --> 01:58:47,110
and that the optimal option is to remove

2474
01:58:44,560 --> 01:58:49,420
priorities from the draft entirely I am

2475
01:58:47,110 --> 01:58:53,380
happy with that option martin thompson

2476
01:58:49,420 --> 01:58:55,900
has prepared a PR for that option from a

2477
01:58:53,380 --> 01:58:57,940
procedural perspective i think that's a

2478
01:58:55,900 --> 01:58:59,670
more expedient way forward because it

2479
01:58:57,940 --> 01:59:03,460
does not block the standard is a

2480
01:58:59,670 --> 01:59:05,139
standardization of HTTP 3 on figuring

2481
01:59:03,460 --> 01:59:08,860
out optimal priorities which are really

2482
01:59:05,139 --> 01:59:10,360
- I would say orthogonal issues I mean I

2483
01:59:08,860 --> 01:59:12,848
don't think there's a requirement that

2484
01:59:10,360 --> 01:59:14,469
they be one be blocked on the other and

2485
01:59:12,849 --> 01:59:15,849
as we've already shown through the

2486
01:59:14,469 --> 01:59:18,820
issues that I've posted here there are

2487
01:59:15,849 --> 01:59:20,860
substantial issues with just kind of

2488
01:59:18,820 --> 01:59:22,869
kind of fixing each two priorities and

2489
01:59:20,860 --> 01:59:27,309
moving them on to h3 that are already

2490
01:59:22,869 --> 01:59:28,540
creating substantial challenges so all

2491
01:59:27,310 --> 01:59:30,849
right so I'm gonna miraculously

2492
01:59:28,540 --> 01:59:33,519
transform you now see before you a quick

2493
01:59:30,849 --> 01:59:35,920
working group change from from that

2494
01:59:33,520 --> 01:59:38,460
perspective what we're looking for is

2495
01:59:35,920 --> 01:59:41,230
input from this community about how

2496
01:59:38,460 --> 01:59:44,469
htv-3 should address priorities one of

2497
01:59:41,230 --> 01:59:46,989
the big concerns in that work is is that

2498
01:59:44,469 --> 01:59:49,090
the more Delta we have from HTTP to

2499
01:59:46,989 --> 01:59:50,348
semantics in HB 3 the more friction it

2500
01:59:49,090 --> 01:59:54,940
could create for adoption of the new

2501
01:59:50,349 --> 01:59:55,970
protocol and so if you know HTTP this

2502
01:59:54,940 --> 01:59:57,679
working group owns

2503
01:59:55,970 --> 01:59:59,270
semantics to this protocol and so that's

2504
01:59:57,680 --> 02:00:04,700
why we're here is to have this

2505
01:59:59,270 --> 02:00:06,080
discussion so right we are we have one

2506
02:00:04,700 --> 02:00:08,809
minute

2507
02:00:06,080 --> 02:00:10,640
and so the there's a meeting at 8:30 on

2508
02:00:08,810 --> 02:00:12,590
Wednesday and Van Horn that's where we'd

2509
02:00:10,640 --> 02:00:14,090
like to see this continue and I think we

2510
02:00:12,590 --> 02:00:15,590
can dedicate some time on Thursday to

2511
02:00:14,090 --> 02:00:18,830
summarize what happens there is that the

2512
02:00:15,590 --> 02:00:20,180
plan yes so with the rest of the minute

2513
02:00:18,830 --> 02:00:21,830
go for it

2514
02:00:20,180 --> 02:00:25,130
repair to pay on I'm trying go as fast

2515
02:00:21,830 --> 02:00:26,480
as possible so I want to say that it

2516
02:00:25,130 --> 02:00:28,570
doesn't really matter what spec what

2517
02:00:26,480 --> 02:00:31,570
matters is what implementations do and

2518
02:00:28,570 --> 02:00:34,040
from that perspective h2 priorities as

2519
02:00:31,570 --> 02:00:37,160
cool as it seemed at the time seems like

2520
02:00:34,040 --> 02:00:40,730
it's a failure right so let's figure out

2521
02:00:37,160 --> 02:00:43,099
what the next thing is and move on so I

2522
02:00:40,730 --> 02:00:44,809
would also warn people however a lack of

2523
02:00:43,100 --> 02:00:47,120
priorities is really bad we know that

2524
02:00:44,810 --> 02:00:49,250
from what we did in speedy initially in

2525
02:00:47,120 --> 02:00:51,170
the in the very initial things we have

2526
02:00:49,250 --> 02:00:55,760
to have some priorities we can't do it

2527
02:00:51,170 --> 02:00:57,230
without it and server priorities I agree

2528
02:00:55,760 --> 02:00:59,240
is going to be more interesting than

2529
02:00:57,230 --> 02:01:01,280
client in the end thank you and that's

2530
02:00:59,240 --> 02:01:04,400
really the conundrum right so really

2531
02:01:01,280 --> 02:01:05,900
quick guys lastly even though we have a

2532
02:01:04,400 --> 02:01:08,690
fully compliant proud and its

2533
02:01:05,900 --> 02:01:13,120
implementation for both h2 and h3 we

2534
02:01:08,690 --> 02:01:13,120
think I I think that we should move this

2535
02:01:13,540 --> 02:01:19,070
Mike Bishop Akamai I want to point out

2536
02:01:16,400 --> 02:01:21,679
that we ship server push without cache

2537
02:01:19,070 --> 02:01:23,320
digests we understand what happens when

2538
02:01:21,680 --> 02:01:25,460
we ship half of a working feature

2539
02:01:23,320 --> 02:01:30,559
multiplexing without priorities is half

2540
02:01:25,460 --> 02:01:33,740
our key future and with their own

2541
02:01:30,560 --> 02:01:36,230
priorities too non-working features from

2542
02:01:33,740 --> 02:01:37,910
Java Robin mark says we have insight for

2543
02:01:36,230 --> 02:01:39,980
video streaming but not as detailed as

2544
02:01:37,910 --> 02:01:41,510
but exploding Martin less word for today

2545
02:01:39,980 --> 02:01:44,240
but then there's Thursday for everyone

2546
02:01:41,510 --> 02:01:48,740
we need prioritization but we don't need

2547
02:01:44,240 --> 02:01:50,450
signaling for prioritization all right

2548
02:01:48,740 --> 02:01:52,700
we're adjourned until Thursday or the

2549
02:01:50,450 --> 02:01:55,059
side meeting on Wednesday morning right

2550
02:01:52,700 --> 02:01:55,059
nervous

