1
00:00:04,680 --> 00:00:18,780
yeah all right I think we're gonna get

2
00:00:15,539 --> 00:00:21,529
started this is the software updates for

3
00:00:18,780 --> 00:00:25,710
Internet of Things suit working group

4
00:00:21,529 --> 00:00:30,089
welcome this is the new well by now

5
00:00:25,710 --> 00:00:31,769
you've probably seen this a few times if

6
00:00:30,089 --> 00:00:37,710
please speak up if you have any

7
00:00:31,769 --> 00:00:40,470
questions so this morning we have a

8
00:00:37,710 --> 00:00:42,750
couple of administrative tasks at the

9
00:00:40,470 --> 00:00:45,420
moment we have one note-taker thank you

10
00:00:42,750 --> 00:00:48,030
Soren and one driver scribes

11
00:00:45,420 --> 00:00:52,920
Thank You T row we need one more note

12
00:00:48,030 --> 00:00:56,460
taker can we get a volunteer yes Robin

13
00:00:52,920 --> 00:01:01,410
thank you so we'll be taking notes and

14
00:00:56,460 --> 00:01:03,300
etherpad so feel free to deliver out and

15
00:01:01,410 --> 00:01:07,369
the etherpad link is right here on the

16
00:01:03,300 --> 00:01:11,270
on the slide and also on the agenda

17
00:01:07,369 --> 00:01:19,950
here's our agenda for this morning any

18
00:01:11,270 --> 00:01:24,509
agenda bashing okay I want to give a

19
00:01:19,950 --> 00:01:32,670
short status report on the the current

20
00:01:24,510 --> 00:01:34,950
working group drafts so both the the or

21
00:01:32,670 --> 00:01:37,770
the suit architecture has been in

22
00:01:34,950 --> 00:01:40,250
working group last call we've gotten a

23
00:01:37,770 --> 00:01:44,100
decent amount of feedback on that draft

24
00:01:40,250 --> 00:01:46,080
the authors have posted an updates and I

25
00:01:44,100 --> 00:01:47,820
think Hannes has a few questions that

26
00:01:46,080 --> 00:01:54,509
that he's going to be talking through

27
00:01:47,820 --> 00:02:00,859
today the the information model was

28
00:01:54,510 --> 00:02:03,780
updated after IETF 104 that we believe

29
00:02:00,860 --> 00:02:06,810
that the draft is progressing fairly

30
00:02:03,780 --> 00:02:10,190
well we'd like to have some conversation

31
00:02:06,810 --> 00:02:13,200
later about the next steps there and

32
00:02:10,190 --> 00:02:16,709
we've been running a call for working

33
00:02:13,200 --> 00:02:19,079
group adoption of the C bore manifest

34
00:02:16,709 --> 00:02:21,599
serialization formats

35
00:02:19,080 --> 00:02:28,560
which we also have to resolve at this

36
00:02:21,599 --> 00:02:33,209
meeting okay so I'm so at ITF 104 we we

37
00:02:28,560 --> 00:02:35,099
pulled the room and we there was a lot

38
00:02:33,209 --> 00:02:37,590
of support for adopting that draft and

39
00:02:35,099 --> 00:02:38,429
no concerns we also took that to the

40
00:02:37,590 --> 00:02:40,650
list

41
00:02:38,430 --> 00:02:44,310
there was some additional support there

42
00:02:40,650 --> 00:02:46,769
and no concerns so I'm at this point we

43
00:02:44,310 --> 00:02:49,500
feel that there's consensus for adopting

44
00:02:46,769 --> 00:02:52,950
that draft so we'll ask the author's

45
00:02:49,500 --> 00:02:58,140
suppose the next revision as a draft

46
00:02:52,950 --> 00:03:00,119
IETF suit manifests so thank you I think

47
00:02:58,140 --> 00:03:02,750
that's everything on our status report

48
00:03:00,120 --> 00:03:02,750
any questions

49
00:03:12,460 --> 00:03:20,520
we can close that oops I think so ah

50
00:03:22,290 --> 00:03:25,380
there you go

51
00:03:31,489 --> 00:03:36,000
so we've done well on some of our

52
00:03:33,540 --> 00:03:39,599
milestones but we have a few that are

53
00:03:36,000 --> 00:03:42,689
lagging at that the fact that we just

54
00:03:39,599 --> 00:03:47,069
adopted the civilization format will

55
00:03:42,689 --> 00:03:48,720
allow us to close that one milestone and

56
00:03:47,069 --> 00:03:50,640
we believe that the other drafts will

57
00:03:48,720 --> 00:03:53,099
probably progress fairly quickly so

58
00:03:50,640 --> 00:03:54,858
we're a little behind but we should be

59
00:03:53,099 --> 00:04:10,230
able to catch up I think in the next

60
00:03:54,859 --> 00:04:15,659
next meeting or two so that's it for our

61
00:04:10,230 --> 00:04:18,149
working group status so I think the AP

62
00:04:15,659 --> 00:04:20,130
is walking from like so roaming janae do

63
00:04:18,149 --> 00:04:22,948
if you could just give me newer

64
00:04:20,130 --> 00:04:24,900
milestones just as a target I think that

65
00:04:22,949 --> 00:04:26,460
sends a message to folks perhaps looking

66
00:04:24,900 --> 00:04:29,580
from the outside about when things might

67
00:04:26,460 --> 00:04:40,500
be ready that'd be helpful and I won't

68
00:04:29,580 --> 00:04:44,099
really hold anyone to them of course all

69
00:04:40,500 --> 00:04:46,229
right so um so let's let's start through

70
00:04:44,099 --> 00:04:50,090
our drafts Honus would you like to come

71
00:04:46,229 --> 00:04:50,090
up and talk about the architecture

72
00:05:09,610 --> 00:05:16,790
this okay so the architecture document

73
00:05:15,230 --> 00:05:20,060
is very close to completion but there's

74
00:05:16,790 --> 00:05:23,960
still one issue that arrived to arised

75
00:05:20,060 --> 00:05:26,840
because of the synchronization with the

76
00:05:23,960 --> 00:05:30,260
idea of des and we have received Bren

77
00:05:26,840 --> 00:05:32,299
and I went through that liaison text um

78
00:05:30,260 --> 00:05:33,920
the new one so we received different

79
00:05:32,300 --> 00:05:36,920
versions but the most recent one made

80
00:05:33,920 --> 00:05:38,240
some other changes specifically to the

81
00:05:36,920 --> 00:05:40,400
status tracker which I would like to

82
00:05:38,240 --> 00:05:41,900
point out and would like to walk away

83
00:05:40,400 --> 00:05:46,969
with a decision on what I should be

84
00:05:41,900 --> 00:05:47,840
doing there to change the terminology to

85
00:05:46,970 --> 00:05:55,340
make everyone happy

86
00:05:47,840 --> 00:05:57,200
um and I tried to but there's a long an

87
00:05:55,340 --> 00:06:00,799
email from Brenton on the list

88
00:05:57,200 --> 00:06:03,560
which goes into essentially a review of

89
00:06:00,800 --> 00:06:05,720
the document which I don't think I would

90
00:06:03,560 --> 00:06:07,820
want to go into here because many of the

91
00:06:05,720 --> 00:06:09,020
things he points out actually unrelated

92
00:06:07,820 --> 00:06:11,540
to what we do here but it's more

93
00:06:09,020 --> 00:06:13,010
consistency check on what they wrote

94
00:06:11,540 --> 00:06:15,230
themselves so it's hopefully something

95
00:06:13,010 --> 00:06:19,370
that they would take into account when

96
00:06:15,230 --> 00:06:21,560
updating the document but this one is

97
00:06:19,370 --> 00:06:25,060
worthwhile to discuss so we had this

98
00:06:21,560 --> 00:06:28,850
notion of a status tracker and and I

99
00:06:25,060 --> 00:06:31,880
copied or must sort of summarized the

100
00:06:28,850 --> 00:06:35,240
definition from the IETF draft and also

101
00:06:31,880 --> 00:06:37,850
from the ID document and for the IETF

102
00:06:35,240 --> 00:06:40,520
draft it's a fairly simple definition

103
00:06:37,850 --> 00:06:42,620
because the whole so like the bigger

104
00:06:40,520 --> 00:06:44,299
picture is is only touched on because

105
00:06:42,620 --> 00:06:46,880
most of the things we work on are really

106
00:06:44,300 --> 00:06:48,050
the whole manifest and the distribution

107
00:06:46,880 --> 00:06:49,850
we're making sure that the update

108
00:06:48,050 --> 00:06:54,170
happens rather than the actual

109
00:06:49,850 --> 00:06:56,540
monitoring of that whole thing so that's

110
00:06:54,170 --> 00:06:58,190
why the terminology for the status track

111
00:06:56,540 --> 00:06:59,840
in the ITF trough currently only talks

112
00:06:58,190 --> 00:07:02,719
about monitoring the firmware update

113
00:06:59,840 --> 00:07:05,390
process and so it says for example is um

114
00:07:02,720 --> 00:07:07,850
it's a server side component in these in

115
00:07:05,390 --> 00:07:11,599
these drawings in the diagrams which

116
00:07:07,850 --> 00:07:14,630
basically retrieves information from the

117
00:07:11,600 --> 00:07:16,160
device and then CSUN like where is the

118
00:07:14,630 --> 00:07:18,710
update so for example is the device

119
00:07:16,160 --> 00:07:21,470
still downloading the new firmware image

120
00:07:18,710 --> 00:07:22,799
or is it updating it already or what but

121
00:07:21,470 --> 00:07:25,289
is it actually doing

122
00:07:22,800 --> 00:07:29,250
that's what the document currently says

123
00:07:25,289 --> 00:07:31,289
and it may be insufficient because if

124
00:07:29,250 --> 00:07:33,990
you look on the other hand at the idea

125
00:07:31,289 --> 00:07:36,990
of the definition it talks about first

126
00:07:33,990 --> 00:07:39,599
of all monitoring some of the properties

127
00:07:36,990 --> 00:07:42,500
of the device like what what device

128
00:07:39,599 --> 00:07:46,050
version is there like certain attributes

129
00:07:42,500 --> 00:07:50,430
what are the some of the software

130
00:07:46,050 --> 00:07:51,990
versions running there then it also gets

131
00:07:50,430 --> 00:07:53,610
the update because they are the

132
00:07:51,990 --> 00:07:55,830
different starts already because the

133
00:07:53,610 --> 00:07:58,349
status track has not just a component in

134
00:07:55,830 --> 00:08:01,740
the cloud it's actually and I have a few

135
00:07:58,349 --> 00:08:03,719
diagrams here to illustrate this it's

136
00:08:01,740 --> 00:08:06,659
actually also a component in the device

137
00:08:03,720 --> 00:08:09,659
itself oh it may be cascaded throughout

138
00:08:06,659 --> 00:08:12,659
the architecture so it's you can see

139
00:08:09,659 --> 00:08:14,340
this easily here so and there's another

140
00:08:12,659 --> 00:08:17,550
diagram in the following slide so you

141
00:08:14,340 --> 00:08:19,650
have the status tracker that runs here

142
00:08:17,550 --> 00:08:21,750
on the device itself but then it talks

143
00:08:19,650 --> 00:08:26,520
to a network local status tracker and

144
00:08:21,750 --> 00:08:28,620
that may be sort of instructed by a

145
00:08:26,520 --> 00:08:30,419
status tracker that is in the cloud so

146
00:08:28,620 --> 00:08:32,549
and it there may be another one it

147
00:08:30,419 --> 00:08:36,689
cooperates with and so on so it's um

148
00:08:32,549 --> 00:08:39,208
it's a slightly different sort of

149
00:08:36,690 --> 00:08:42,990
architectural model if you will and that

150
00:08:39,208 --> 00:08:45,300
that also explains why it talks about

151
00:08:42,990 --> 00:08:47,880
these additional components like it

152
00:08:45,300 --> 00:08:49,770
riess receives the requests and then

153
00:08:47,880 --> 00:08:51,300
checks the need for the update assuming

154
00:08:49,770 --> 00:08:53,490
when it's local for example it has

155
00:08:51,300 --> 00:08:56,219
information about what the devices

156
00:08:53,490 --> 00:09:00,089
software version is is it running on

157
00:08:56,220 --> 00:09:04,050
then it can obviously do that initiates

158
00:09:00,089 --> 00:09:07,560
the updates and yeah and I mentioned

159
00:09:04,050 --> 00:09:10,050
this already the issue of the concerned

160
00:09:07,560 --> 00:09:12,209
the cascade cascading sort of

161
00:09:10,050 --> 00:09:14,279
architecture of these status tracker so

162
00:09:12,209 --> 00:09:17,550
clearly there's a big difference between

163
00:09:14,279 --> 00:09:20,010
the two and it evolved over time so

164
00:09:17,550 --> 00:09:23,010
previously was a little simpler in the

165
00:09:20,010 --> 00:09:26,810
earlier version you know it's what it is

166
00:09:23,010 --> 00:09:26,810
and so

167
00:09:42,769 --> 00:09:49,610
right yeah that I think that's a typo so

168
00:09:47,879 --> 00:09:52,620
it's it's really in the device like

169
00:09:49,610 --> 00:09:54,509
shown here yeah so for example you have

170
00:09:52,620 --> 00:09:56,519
this IOT device that comes with a Status

171
00:09:54,509 --> 00:09:58,410
track has a separate component and then

172
00:09:56,519 --> 00:10:02,730
there may be actually multiple firmware

173
00:09:58,410 --> 00:10:04,649
consumers on a single device and so for

174
00:10:02,730 --> 00:10:07,529
example this could be a device with

175
00:10:04,649 --> 00:10:11,519
multiple MCU so each one would have

176
00:10:07,529 --> 00:10:12,689
those type of things and in this but

177
00:10:11,519 --> 00:10:15,480
Brendon may have a different view on

178
00:10:12,689 --> 00:10:16,740
this and then the status tracker so all

179
00:10:15,480 --> 00:10:21,620
of them have to start a strictly here

180
00:10:16,740 --> 00:10:21,620
and the device itself but that's happen

181
00:10:23,420 --> 00:10:35,990
yeah so Brendon sorry you're really

182
00:10:32,309 --> 00:10:35,990
choppy we can't hear you

183
00:10:44,449 --> 00:10:54,479
so hopefully Brendon can fix this issue

184
00:10:48,300 --> 00:10:56,969
um so I've been wondering what what

185
00:10:54,480 --> 00:11:00,930
should be done to the document to make

186
00:10:56,970 --> 00:11:04,829
some alignment and and and to make sure

187
00:11:00,930 --> 00:11:08,388
that there's some meaningful content in

188
00:11:04,829 --> 00:11:12,089
in the device so what often happens is

189
00:11:08,389 --> 00:11:14,790
and I believe the status tracker is

190
00:11:12,089 --> 00:11:15,990
essentially a different way of saying

191
00:11:14,790 --> 00:11:18,059
that there's a device management

192
00:11:15,990 --> 00:11:21,600
functionality and what that typically

193
00:11:18,059 --> 00:11:23,069
does is you have a normally you have a

194
00:11:21,600 --> 00:11:27,089
component somewhere a server side

195
00:11:23,069 --> 00:11:31,139
component that the devices talk to

196
00:11:27,089 --> 00:11:32,970
because normally like you in in many

197
00:11:31,139 --> 00:11:34,470
deployments it's do you have the device

198
00:11:32,970 --> 00:11:35,939
is sitting out there but of course the

199
00:11:34,470 --> 00:11:38,220
server needs to know about those devices

200
00:11:35,939 --> 00:11:39,990
upfront so he can't just send firmware

201
00:11:38,220 --> 00:11:41,970
updates there when it doesn't even know

202
00:11:39,990 --> 00:11:42,760
that the devices are awake they they are

203
00:11:41,970 --> 00:11:44,320
waiting for

204
00:11:42,760 --> 00:11:46,420
software updates it needs to know and

205
00:11:44,320 --> 00:11:48,460
like what is this device running on is

206
00:11:46,420 --> 00:11:52,449
specifically if it wants to target a

207
00:11:48,460 --> 00:11:57,280
specific software it and you know so G

208
00:11:52,450 --> 00:12:00,910
if more in my target are anticipated by

209
00:11:57,280 --> 00:12:02,740
the ITU is poor one as it does not

210
00:12:00,910 --> 00:12:04,900
adequately cover a variety of scenarios

211
00:12:02,740 --> 00:12:07,810
required by different IOT devices based

212
00:12:04,900 --> 00:12:10,260
on differences in I device functional

213
00:12:07,810 --> 00:12:12,790
connectivity available poverty et Cie

214
00:12:10,260 --> 00:12:14,770
ITA should not try to do too hard to

215
00:12:12,790 --> 00:12:17,620
align with it other than avoid

216
00:12:14,770 --> 00:12:19,810
conflicting and confusing terminal and

217
00:12:17,620 --> 00:12:22,450
then there's a Brendon was saying that

218
00:12:19,810 --> 00:12:34,599
there is this sort of tracker may reside

219
00:12:22,450 --> 00:12:37,270
inside the status tracker which was hi

220
00:12:34,600 --> 00:12:39,490
Hanna still reads we talked about itu-t

221
00:12:37,270 --> 00:12:41,800
a cup of sliced bite they're trying to

222
00:12:39,490 --> 00:12:44,020
give some clarifications to which parts

223
00:12:41,800 --> 00:12:47,229
of I to of doing work in the Syria

224
00:12:44,020 --> 00:12:49,270
because I remember you the stuff soon as

225
00:12:47,230 --> 00:12:52,090
I started to enter this relates to a

226
00:12:49,270 --> 00:13:02,319
liaison statement that was sent from SG

227
00:12:52,090 --> 00:13:13,360
17 okay thanks hmm so um so continuing

228
00:13:02,320 --> 00:13:15,010
what race to race to microphone attack

229
00:13:13,360 --> 00:13:16,210
you see from a knight city thank you

230
00:13:15,010 --> 00:13:18,730
very much for the discussion for the

231
00:13:16,210 --> 00:13:20,650
scissors tracker I just write email from

232
00:13:18,730 --> 00:13:23,200
branding and also discussion today sorry

233
00:13:20,650 --> 00:13:25,120
for that and I think the discussion in

234
00:13:23,200 --> 00:13:27,910
the email it's very correct I agree with

235
00:13:25,120 --> 00:13:31,900
the point and the point you said today

236
00:13:27,910 --> 00:13:35,020
is I ETH not be putting too much but I

237
00:13:31,900 --> 00:13:38,740
also agree on that so we ITT will be

238
00:13:35,020 --> 00:13:42,100
doing our effort to follow the program

239
00:13:38,740 --> 00:13:44,380
you raised so we try to capture the

240
00:13:42,100 --> 00:13:49,210
issue you raise such as a vintage issue

241
00:13:44,380 --> 00:13:51,189
for the developer so I hope you can try

242
00:13:49,210 --> 00:13:54,670
to check again for the next division

243
00:13:51,190 --> 00:13:57,450
also IQD draft we try to follow the

244
00:13:54,670 --> 00:13:57,449
issue you raised

245
00:14:00,660 --> 00:14:08,110
okay then there was a Takeshi Takashi is

246
00:14:04,420 --> 00:14:09,550
the editor of the iqt document and the

247
00:14:08,110 --> 00:14:11,200
VA is on the king to us and we

248
00:14:09,550 --> 00:14:17,279
appreciate him being here and so what I

249
00:14:11,200 --> 00:14:19,450
heard was that he's fine with the IETF

250
00:14:17,279 --> 00:14:21,700
documenting what we should be and in the

251
00:14:19,450 --> 00:14:24,220
i q-- document may try to match what

252
00:14:21,700 --> 00:14:25,779
we're doing because we want there to be

253
00:14:24,220 --> 00:14:27,580
common editors and current participants

254
00:14:25,779 --> 00:14:29,920
as that's why we like the fact there's

255
00:14:27,580 --> 00:14:34,320
overlap participation yes that's our

256
00:14:29,920 --> 00:14:38,469
editor or other need them from ITU key

257
00:14:34,320 --> 00:14:42,779
yeah I will try to capture your issue

258
00:14:38,470 --> 00:14:45,910
and follow your mutation thank you yeah

259
00:14:42,779 --> 00:14:49,810
so continuing with my elaboration on how

260
00:14:45,910 --> 00:14:51,819
this device management works so so once

261
00:14:49,810 --> 00:14:55,180
the device registers and the server

262
00:14:51,820 --> 00:14:57,640
knows that it's there and it the server

263
00:14:55,180 --> 00:15:01,239
may query status information about like

264
00:14:57,640 --> 00:15:03,730
what is the device running currently so

265
00:15:01,240 --> 00:15:07,990
it figures out that there's an update it

266
00:15:03,730 --> 00:15:09,610
knows um what devices need to be updated

267
00:15:07,990 --> 00:15:11,140
and of course it also knows their

268
00:15:09,610 --> 00:15:13,390
communication behavior because it may

269
00:15:11,140 --> 00:15:16,420
not not all of that it as devices will

270
00:15:13,390 --> 00:15:17,800
be always reachable so it it deals with

271
00:15:16,420 --> 00:15:19,750
this and so this is a purely

272
00:15:17,800 --> 00:15:21,399
communication specific issue but still

273
00:15:19,750 --> 00:15:27,820
quite important because after all the

274
00:15:21,399 --> 00:15:30,130
updates have to go there and then it the

275
00:15:27,820 --> 00:15:32,860
way how the updates are triggered also

276
00:15:30,130 --> 00:15:37,360
varies it may be purely like triggered

277
00:15:32,860 --> 00:15:39,820
by the server um once the software the

278
00:15:37,360 --> 00:15:41,890
new software is there the server could

279
00:15:39,820 --> 00:15:43,930
trigger it the update and that would

280
00:15:41,890 --> 00:15:46,649
happen or it could be a policy base

281
00:15:43,930 --> 00:15:50,319
depending on like if you think about um

282
00:15:46,649 --> 00:15:52,510
cars you don't just do the updates

283
00:15:50,320 --> 00:15:55,709
whenever the software is there but

284
00:15:52,510 --> 00:15:58,149
obviously have to take certain other

285
00:15:55,709 --> 00:16:00,579
aspects into account and so on and there

286
00:15:58,149 --> 00:16:02,350
may be some user consent that takes

287
00:16:00,579 --> 00:16:03,819
place etc for some of their devices

288
00:16:02,350 --> 00:16:05,230
because their functionality may change

289
00:16:03,820 --> 00:16:09,010
there's a fairly complicated process

290
00:16:05,230 --> 00:16:09,790
after all many things and what I'm

291
00:16:09,010 --> 00:16:11,770
trying to get to

292
00:16:09,790 --> 00:16:17,199
is how much of all of this should we

293
00:16:11,770 --> 00:16:19,780
really describe because because it's not

294
00:16:17,200 --> 00:16:22,240
core to what we actually do I think it's

295
00:16:19,780 --> 00:16:27,030
useful information to know how these

296
00:16:22,240 --> 00:16:30,280
systems work today but we don't actually

297
00:16:27,030 --> 00:16:32,410
they standardize and define the status

298
00:16:30,280 --> 00:16:34,150
tracker sort of like the IOT device

299
00:16:32,410 --> 00:16:36,040
management protocol in this in this

300
00:16:34,150 --> 00:16:42,160
group they are already those protocols

301
00:16:36,040 --> 00:16:44,349
so so how much should we accommodate for

302
00:16:42,160 --> 00:16:46,810
that to give to read enough and you and

303
00:16:44,350 --> 00:16:48,300
and whoever wants to look at that

304
00:16:46,810 --> 00:16:52,709
document to give enough information

305
00:16:48,300 --> 00:16:57,660
without going off into the weeds on

306
00:16:52,710 --> 00:17:01,060
explaining things that are only sort of

307
00:16:57,660 --> 00:17:03,250
what really or less frequently relevant

308
00:17:01,060 --> 00:17:09,579
for what we're actually doing in a group

309
00:17:03,250 --> 00:17:13,780
itself and so um my my what I'm I'm

310
00:17:09,579 --> 00:17:15,149
proposing is we describe some of the

311
00:17:13,780 --> 00:17:18,670
stuff that I have on this slide

312
00:17:15,150 --> 00:17:21,130
nicer boarding and in the terminology

313
00:17:18,670 --> 00:17:24,370
section so it's more than what we had

314
00:17:21,130 --> 00:17:28,150
previously we take some of that into

315
00:17:24,369 --> 00:17:31,090
account this specifically is kind of

316
00:17:28,150 --> 00:17:33,550
nested aspect because that's also how

317
00:17:31,090 --> 00:17:36,459
things are deployed today not so much

318
00:17:33,550 --> 00:17:39,399
the status tracker on the device but for

319
00:17:36,460 --> 00:17:41,770
examples that if you you have device

320
00:17:39,400 --> 00:17:44,530
management functionality also in

321
00:17:41,770 --> 00:17:47,500
gateways today like there are lots of

322
00:17:44,530 --> 00:17:50,260
edge computing devices and so you have

323
00:17:47,500 --> 00:17:53,410
this sort of device talks to gateway

324
00:17:50,260 --> 00:17:55,720
gateway talks to to some server and I

325
00:17:53,410 --> 00:17:57,670
think that's also good to capture what

326
00:17:55,720 --> 00:17:59,200
is actually being done today but I

327
00:17:57,670 --> 00:18:00,730
wouldn't go further than that and

328
00:17:59,200 --> 00:18:03,400
specifically having the status tracker

329
00:18:00,730 --> 00:18:05,050
on a device itself specifically if we

330
00:18:03,400 --> 00:18:10,150
talked some really constrained devices

331
00:18:05,050 --> 00:18:11,680
that's rather unlikely and maybe if

332
00:18:10,150 --> 00:18:13,210
that's important there should be a

333
00:18:11,680 --> 00:18:16,420
different term for that to avoid are

334
00:18:13,210 --> 00:18:18,280
creating the confusion so that's that's

335
00:18:16,420 --> 00:18:21,100
my proposal that would be an update and

336
00:18:18,280 --> 00:18:23,440
I could spin that fairly fairly quickly

337
00:18:21,100 --> 00:18:25,990
and have a few

338
00:18:23,440 --> 00:18:28,509
you review that if you if you're

339
00:18:25,990 --> 00:18:30,159
familiar with this type of work yourself

340
00:18:28,509 --> 00:18:32,230
I think that would I would appreciate

341
00:18:30,159 --> 00:18:34,690
your feedback you may have a different

342
00:18:32,230 --> 00:18:38,350
perspective on on the current deployment

343
00:18:34,690 --> 00:18:40,179
situation in that space and I believe

344
00:18:38,350 --> 00:18:43,059
that would get us then to the end of

345
00:18:40,179 --> 00:18:46,480
this document I think there wasn't

346
00:18:43,059 --> 00:18:48,129
anything is that we really need to make

347
00:18:46,480 --> 00:18:52,360
and I'm sure IETF last call there would

348
00:18:48,129 --> 00:19:01,418
be other comments and so on but any

349
00:18:52,360 --> 00:19:04,090
comments on this proposal so do you have

350
00:19:01,419 --> 00:19:08,320
a sense of what time frame we plan to

351
00:19:04,090 --> 00:19:11,769
make these updates I could write some

352
00:19:08,320 --> 00:19:13,450
text this week and if some one of you

353
00:19:11,769 --> 00:19:21,669
could have a look at it to make sure

354
00:19:13,450 --> 00:19:26,519
that it's sound I could do an update of

355
00:19:21,669 --> 00:19:28,570
the points that you made sense the the

356
00:19:26,519 --> 00:19:31,419
normative part of what this working

357
00:19:28,570 --> 00:19:32,799
group does is the manifest so we don't

358
00:19:31,419 --> 00:19:34,539
want to be over prescriptive for

359
00:19:32,799 --> 00:19:35,950
anything that doesn't directly involve

360
00:19:34,539 --> 00:19:38,139
the manifest so keep it as high level as

361
00:19:35,950 --> 00:19:39,970
possible and so for example in your

362
00:19:38,139 --> 00:19:41,469
porch you say what could or should be

363
00:19:39,970 --> 00:19:43,389
monitoring advice it's really more of a

364
00:19:41,470 --> 00:19:45,549
code there right because it's not normal

365
00:19:43,389 --> 00:19:47,049
to true and if there's other types of

366
00:19:45,549 --> 00:19:48,580
status tracking it's unrelated to the

367
00:19:47,049 --> 00:19:50,320
soup manifest we want to constrain that

368
00:19:48,580 --> 00:19:52,570
because that's out of scope and it's in

369
00:19:50,320 --> 00:19:56,490
the context here yeah so yes keep it as

370
00:19:52,570 --> 00:19:56,490
high level and as flexible as possible

371
00:19:57,330 --> 00:20:02,110
okay yeah you second set enough context

372
00:20:00,820 --> 00:20:03,580
when people understand why the student

373
00:20:02,110 --> 00:20:07,658
manifest does what it does and how it

374
00:20:03,580 --> 00:20:08,139
fits into our content okay sounds

375
00:20:07,659 --> 00:20:14,289
perfect

376
00:20:08,139 --> 00:20:17,709
yeah um so I'm not I'm not aware of any

377
00:20:14,289 --> 00:20:21,158
other requests for changes is anything

378
00:20:17,710 --> 00:20:31,720
that comes to your mind something that I

379
00:20:21,159 --> 00:20:34,590
have to have to do will be resolved by

380
00:20:31,720 --> 00:20:34,590
these comments

381
00:20:36,260 --> 00:20:48,379
yeah okay okay thank you

382
00:20:58,279 --> 00:21:01,980
so so pregnant we'd like to have you

383
00:21:00,450 --> 00:21:04,650
jump in the queue and give a quick

384
00:21:01,980 --> 00:21:06,539
status updates on the information model

385
00:21:04,650 --> 00:21:08,400
I'm not sure if you've resolved your

386
00:21:06,539 --> 00:21:21,029
audio issues but do you want to give it

387
00:21:08,400 --> 00:21:22,049
a try again so jump in the queue alright

388
00:21:21,029 --> 00:21:25,140
Brendan Cap'n

389
00:21:22,049 --> 00:21:31,860
how are you able to hear me okay yes

390
00:21:25,140 --> 00:21:33,899
okay so yeah for the for the information

391
00:21:31,860 --> 00:21:37,559
model it looks like there are a lot of

392
00:21:33,899 --> 00:21:39,600
changes but in fact most of it is

393
00:21:37,559 --> 00:21:41,639
clarity edits adding some cross

394
00:21:39,600 --> 00:21:46,230
references and replacing numeric

395
00:21:41,640 --> 00:21:50,880
identifiers with named ones that I did

396
00:21:46,230 --> 00:21:53,789
add two more significant edits those are

397
00:21:50,880 --> 00:21:58,169
the result of a review by a security

398
00:21:53,789 --> 00:22:00,360
engineer in arm the result of that was a

399
00:21:58,169 --> 00:22:04,470
new threat that I hadn't considered

400
00:22:00,360 --> 00:22:06,959
before which is extra code following the

401
00:22:04,470 --> 00:22:08,669
code covered by a digest so this is what

402
00:22:06,960 --> 00:22:11,010
happens when the payload that's

403
00:22:08,669 --> 00:22:13,679
delivered to a device is larger than is

404
00:22:11,010 --> 00:22:15,799
specified in the manifest when the

405
00:22:13,679 --> 00:22:18,360
digest doesn't cover the whole thing and

406
00:22:15,799 --> 00:22:21,658
for whatever reason that still gets

407
00:22:18,360 --> 00:22:25,260
written into the device so the solution

408
00:22:21,659 --> 00:22:28,309
to this is to digest past the end of the

409
00:22:25,260 --> 00:22:33,000
firmware cover the whole available space

410
00:22:28,309 --> 00:22:34,740
and use that as the firmware digest so

411
00:22:33,000 --> 00:22:38,179
I've added this as a recommended

412
00:22:34,740 --> 00:22:42,659
security requirement not a required one

413
00:22:38,179 --> 00:22:44,730
and then there was a new use case the

414
00:22:42,659 --> 00:22:48,059
addition of delegation of authority and

415
00:22:44,730 --> 00:22:50,250
a usability requirement associated with

416
00:22:48,059 --> 00:22:52,559
it which was the ability to deliver a

417
00:22:50,250 --> 00:22:57,200
delegated signing key with the manifest

418
00:22:52,559 --> 00:22:57,200
and that is all for edits

419
00:23:02,610 --> 00:23:07,000
yeah so I'm so Brendan at this point in

420
00:23:05,500 --> 00:23:09,280
time do you feel like there's more work

421
00:23:07,000 --> 00:23:11,710
to be done on this draft or do believe

422
00:23:09,280 --> 00:23:14,250
that's ready for working group last call

423
00:23:11,710 --> 00:23:17,680
have barring any further comments from

424
00:23:14,250 --> 00:23:25,540
the from the participants I don't think

425
00:23:17,680 --> 00:23:28,890
there's anything else to do can you

426
00:23:25,540 --> 00:23:34,570
repeat that statement I said barring any

427
00:23:28,890 --> 00:23:38,380
bump Terry I think it's ready I'm

428
00:23:34,570 --> 00:23:41,970
hearing that he's thinking Brendan can

429
00:23:38,380 --> 00:23:41,970
you just type what you said into jabber

430
00:23:44,670 --> 00:23:48,930
maybe hold on

431
00:24:14,620 --> 00:24:21,409
okay yeah so following this meeting will

432
00:24:19,400 --> 00:24:26,420
will start working group last call on

433
00:24:21,410 --> 00:24:29,270
that drab so up next we have Brendan

434
00:24:26,420 --> 00:24:48,160
back with Steve manifest so we'll see

435
00:24:29,270 --> 00:24:48,160
how this gets next slide please

436
00:24:49,600 --> 00:24:59,629
so I just want to do a quick overview to

437
00:24:54,500 --> 00:25:03,890
set the stage of why we have a change to

438
00:24:59,630 --> 00:25:06,429
the manifest model from a descriptive

439
00:25:03,890 --> 00:25:10,630
one to a behavioral one

440
00:25:06,429 --> 00:25:15,320
are you guys getting anything I'm saying

441
00:25:10,630 --> 00:25:18,380
no okay

442
00:25:15,320 --> 00:25:20,389
wonderful I'm sorry guys I'm traveling

443
00:25:18,380 --> 00:25:22,870
and I have a very poor network

444
00:25:20,390 --> 00:25:22,870
connection

445
00:25:33,940 --> 00:25:44,750
okay so just to follow up on the reasons

446
00:25:41,720 --> 00:25:47,480
that we're changing from a procedure

447
00:25:44,750 --> 00:25:52,460
from a descriptive model to a behavioral

448
00:25:47,480 --> 00:25:54,690
one these are the reasons devices need

449
00:25:52,460 --> 00:25:57,779
to be updated next slide please

450
00:25:54,690 --> 00:25:57,779
[Music]

451
00:25:58,540 --> 00:26:04,240
IOT updates should be easy but they

452
00:26:02,090 --> 00:26:07,610
don't end up being easy because of

453
00:26:04,240 --> 00:26:10,790
having many possible actors a diversity

454
00:26:07,610 --> 00:26:17,559
of update models and memory models met

455
00:26:10,790 --> 00:26:20,600
multiple functional functional units and

456
00:26:17,559 --> 00:26:22,750
multiple security concerns how do you

457
00:26:20,600 --> 00:26:22,750
get

458
00:27:08,330 --> 00:27:15,600
talk about some of the points that he

459
00:27:10,679 --> 00:27:17,940
gets his so Brendon we're gonna have

460
00:27:15,600 --> 00:27:20,668
Hannes go through the problem statement

461
00:27:17,940 --> 00:27:23,520
slides and I'm at least and while you

462
00:27:20,669 --> 00:27:25,200
work on your audio and that will try

463
00:27:23,520 --> 00:27:31,410
again look you let us know when you're

464
00:27:25,200 --> 00:27:37,860
ready yeah yeah come back and view it

465
00:27:31,410 --> 00:27:42,240
you ready yeah that these audio problems

466
00:27:37,860 --> 00:27:45,059
sometimes happen huh um so as you've

467
00:27:42,240 --> 00:27:48,419
seen also from like we had written some

468
00:27:45,059 --> 00:27:50,990
of those scenarios in the architecture

469
00:27:48,419 --> 00:27:53,870
document notes elaborated on it in the

470
00:27:50,990 --> 00:27:57,830
information model document you have the

471
00:27:53,870 --> 00:28:01,409
wide range of different IOT devices and

472
00:27:57,830 --> 00:28:03,990
while sort of the basic scenario is very

473
00:28:01,410 --> 00:28:06,990
simple where you have a single MCU you

474
00:28:03,990 --> 00:28:09,390
have a single firmware image and that

475
00:28:06,990 --> 00:28:12,900
gets installed and everything is is cool

476
00:28:09,390 --> 00:28:15,150
that's not necessarily all the cases

477
00:28:12,900 --> 00:28:18,690
that we have to deal with if you open up

478
00:28:15,150 --> 00:28:21,299
one of the IOT devices that you find

479
00:28:18,690 --> 00:28:23,130
around like this camera or you pick any

480
00:28:21,299 --> 00:28:26,280
of those you will see that there are

481
00:28:23,130 --> 00:28:27,960
many different hardware architectures

482
00:28:26,280 --> 00:28:29,940
that chip manufacturers came up with

483
00:28:27,960 --> 00:28:32,580
that require different treatment you may

484
00:28:29,940 --> 00:28:34,679
have multiple ends use and so print

485
00:28:32,580 --> 00:28:36,928
listed a couple of those here where you

486
00:28:34,679 --> 00:28:39,419
have for example in in more modern

487
00:28:36,929 --> 00:28:42,360
architectures you have a split between

488
00:28:39,419 --> 00:28:45,540
the secure word and a normal word and

489
00:28:42,360 --> 00:28:48,299
you have different codes so you have you

490
00:28:45,540 --> 00:28:50,580
may have a different stack offered by

491
00:28:48,299 --> 00:28:52,559
the OS and the underlying sort of the

492
00:28:50,580 --> 00:28:55,428
middleware so if the kernel and the

493
00:28:52,559 --> 00:28:58,080
middleware that is provided by one

494
00:28:55,429 --> 00:29:00,090
manufacturer including for example the

495
00:28:58,080 --> 00:29:01,678
radio stack and then the application

496
00:29:00,090 --> 00:29:03,230
provided by someone else and you may

497
00:29:01,679 --> 00:29:08,100
actually want to update those

498
00:29:03,230 --> 00:29:11,130
independently this execute in place is

499
00:29:08,100 --> 00:29:12,990
also a very common technique in some

500
00:29:11,130 --> 00:29:15,630
other devices specifically wireless LAN

501
00:29:12,990 --> 00:29:19,500
device you often have the case that very

502
00:29:15,630 --> 00:29:21,640
much like in in more powerful processor

503
00:29:19,500 --> 00:29:24,070
architectures you actually need to cop

504
00:29:21,640 --> 00:29:26,950
the code first into RAM before you

505
00:29:24,070 --> 00:29:28,780
execute it this is not necessarily true

506
00:29:26,950 --> 00:29:31,240
in many other devices where you execute

507
00:29:28,780 --> 00:29:33,370
it straight from flash um so it's a very

508
00:29:31,240 --> 00:29:35,440
very different models and you need to

509
00:29:33,370 --> 00:29:38,889
take those into account during their

510
00:29:35,440 --> 00:29:40,540
during the update the update model there

511
00:29:38,890 --> 00:29:44,020
are also different practices on how you

512
00:29:40,540 --> 00:29:46,990
actually do the procedure where do you

513
00:29:44,020 --> 00:29:49,420
copy so you have current you in many

514
00:29:46,990 --> 00:29:51,280
cases you will have the firmware one

515
00:29:49,420 --> 00:29:53,830
firmer image or maybe most likely

516
00:29:51,280 --> 00:29:56,080
another one running already or on the

517
00:29:53,830 --> 00:29:57,490
device itself maybe internally on flash

518
00:29:56,080 --> 00:30:00,909
or on a separate sitting outside

519
00:29:57,490 --> 00:30:02,590
connected using some pass system in

520
00:30:00,910 --> 00:30:04,630
external flash and then you need to

521
00:30:02,590 --> 00:30:06,790
figure out like how do I get the

522
00:30:04,630 --> 00:30:08,950
bootloader to switch to a new to the new

523
00:30:06,790 --> 00:30:11,168
version or a mount to boot is it just

524
00:30:08,950 --> 00:30:13,510
telling out okay it's somewhere else

525
00:30:11,169 --> 00:30:18,660
or do you actually have to swap the code

526
00:30:13,510 --> 00:30:20,980
as a consequence of that and that's what

527
00:30:18,660 --> 00:30:22,690
print and try to elute here so you have

528
00:30:20,980 --> 00:30:23,650
to cover different cases and depending

529
00:30:22,690 --> 00:30:25,330
on who you talk to

530
00:30:23,650 --> 00:30:29,380
they have different models and you've

531
00:30:25,330 --> 00:30:32,678
seen that discussion when we when we

532
00:30:29,380 --> 00:30:35,850
talked to the MCU folks who joined the

533
00:30:32,679 --> 00:30:38,530
list and also Co also the the

534
00:30:35,850 --> 00:30:43,090
architecture document who are working on

535
00:30:38,530 --> 00:30:44,950
on different hardware systems then then

536
00:30:43,090 --> 00:30:46,990
for example we do so they tried to cover

537
00:30:44,950 --> 00:30:49,240
a wider system so we have a couple of OS

538
00:30:46,990 --> 00:30:52,510
vendors who target a larger set of

539
00:30:49,240 --> 00:30:54,910
hardware architectures and so taking

540
00:30:52,510 --> 00:30:57,190
those different architectures into

541
00:30:54,910 --> 00:30:59,020
account was obviously part of the the

542
00:30:57,190 --> 00:31:03,760
work as you know as you know if you have

543
00:30:59,020 --> 00:31:05,860
followed along we also spent

544
00:31:03,760 --> 00:31:07,690
specifically information while we spend

545
00:31:05,860 --> 00:31:09,309
a lot of time on talking about the

546
00:31:07,690 --> 00:31:12,190
different roles and the different

547
00:31:09,309 --> 00:31:14,370
players in that ecosystem and as as the

548
00:31:12,190 --> 00:31:16,780
firmware updates gets propagated and

549
00:31:14,370 --> 00:31:19,360
gets sent to the device there are many

550
00:31:16,780 --> 00:31:22,178
different actors that may influence the

551
00:31:19,360 --> 00:31:23,889
decision on what gets installed we had

552
00:31:22,179 --> 00:31:26,230
these cases of medical devices where you

553
00:31:23,890 --> 00:31:29,080
can't just as a device manufacturer push

554
00:31:26,230 --> 00:31:31,000
the update to the device but you have to

555
00:31:29,080 --> 00:31:34,409
take into account that there's

556
00:31:31,000 --> 00:31:37,740
certification processes in

557
00:31:34,410 --> 00:31:40,320
and regulatory regimes that are big date

558
00:31:37,740 --> 00:31:43,710
on what you can and cannot update and

559
00:31:40,320 --> 00:31:46,830
who needs to approve the updates and so

560
00:31:43,710 --> 00:31:49,980
we had many of those actors listed in

561
00:31:46,830 --> 00:31:53,310
the information model document and that

562
00:31:49,980 --> 00:31:55,260
also influenced that is sign of course

563
00:31:53,310 --> 00:31:57,330
if you ignore all of this if this

564
00:31:55,260 --> 00:31:59,850
solution would be much simpler you just

565
00:31:57,330 --> 00:32:01,169
take a subset and so we try to indur in

566
00:31:59,850 --> 00:32:03,330
the specification and manifest

567
00:32:01,170 --> 00:32:04,980
specification we try to accommodate for

568
00:32:03,330 --> 00:32:08,129
a different use cases even though you

569
00:32:04,980 --> 00:32:11,460
may not use some of the features in your

570
00:32:08,130 --> 00:32:14,990
in your specific deployment or at least

571
00:32:11,460 --> 00:32:14,990
not that at the given point in time

572
00:32:16,790 --> 00:32:23,850
right I load it to that already earlier

573
00:32:21,000 --> 00:32:26,640
so many of the devices today even though

574
00:32:23,850 --> 00:32:28,409
they are very simple so some of you so

575
00:32:26,640 --> 00:32:33,060
who has been playing around with arduino

576
00:32:28,410 --> 00:32:35,400
like the um 8-bit microcontrollers who

577
00:32:33,060 --> 00:32:38,370
has yeah a couple of you guys so like

578
00:32:35,400 --> 00:32:42,180
those are really basic microcontrollers

579
00:32:38,370 --> 00:32:44,280
and very simplistic it's very nice to

580
00:32:42,180 --> 00:32:46,260
work with and and the pin layout is Soak

581
00:32:44,280 --> 00:32:48,750
they're sold huge pins that you can even

582
00:32:46,260 --> 00:32:51,660
sort them so they're very simplistic but

583
00:32:48,750 --> 00:32:54,210
in many iid devices even even we talked

584
00:32:51,660 --> 00:32:56,130
about constrained devices obviously not

585
00:32:54,210 --> 00:32:58,200
the way how they look like so if you if

586
00:32:56,130 --> 00:32:59,550
you open up one of those boxes or your

587
00:32:58,200 --> 00:33:00,810
SmartWatch you will notice that there

588
00:32:59,550 --> 00:33:04,919
are lots of different components that

589
00:33:00,810 --> 00:33:07,379
need to interact and specifically since

590
00:33:04,920 --> 00:33:10,110
we thought Internet of Things they are

591
00:33:07,380 --> 00:33:14,520
there's a common practice in industry

592
00:33:10,110 --> 00:33:16,350
that if you have radio modules a radio

593
00:33:14,520 --> 00:33:19,770
component like Bluetooth Low Energy or

594
00:33:16,350 --> 00:33:21,300
you have 15.4 or cellular that they

595
00:33:19,770 --> 00:33:22,950
actually reside on separate

596
00:33:21,300 --> 00:33:27,090
microcontrollers because the company

597
00:33:22,950 --> 00:33:29,190
offering that support they branch it out

598
00:33:27,090 --> 00:33:31,709
to different components and so you have

599
00:33:29,190 --> 00:33:34,110
different microcontrollers you have to

600
00:33:31,710 --> 00:33:38,340
manage the updates for so that's why we

601
00:33:34,110 --> 00:33:40,500
had this these requirements to have a

602
00:33:38,340 --> 00:33:42,149
Singh have the manifest to carry

603
00:33:40,500 --> 00:33:46,710
multiple different firmware updates and

604
00:33:42,150 --> 00:33:54,090
to describe what goes where yeah

605
00:33:46,710 --> 00:33:59,070
so okay I I talked about those in the

606
00:33:54,090 --> 00:34:01,080
context of the roles already okay so

607
00:33:59,070 --> 00:34:04,790
that was a a summary of what we have

608
00:34:01,080 --> 00:34:04,790
been doing so far

609
00:34:05,040 --> 00:34:10,969
I read presents actually about this is

610
00:34:08,130 --> 00:34:13,620
now now this was more like more generic

611
00:34:10,969 --> 00:34:16,949
sort of interaction well why did we end

612
00:34:13,620 --> 00:34:18,690
up with all these different sort of what

613
00:34:16,949 --> 00:34:20,159
as an outside if you if you come into

614
00:34:18,690 --> 00:34:21,600
the group and look at the document for

615
00:34:20,159 --> 00:34:23,969
the first time you want to like or we

616
00:34:21,600 --> 00:34:25,319
talk about constrained IOT devices why

617
00:34:23,969 --> 00:34:27,209
is this so complicated

618
00:34:25,320 --> 00:34:28,920
um and the reason that's the reason

619
00:34:27,210 --> 00:34:31,220
where we ended up we initially thought

620
00:34:28,920 --> 00:34:33,810
it would be simple as well but yeah

621
00:34:31,219 --> 00:34:35,219
that's and that's well that's what led

622
00:34:33,810 --> 00:34:36,750
to this behavior manifest and

623
00:34:35,219 --> 00:34:39,569
specifically the discussions that

624
00:34:36,750 --> 00:34:46,020
happened end of last year beginning of

625
00:34:39,570 --> 00:34:49,670
this year with the focus of on making

626
00:34:46,020 --> 00:34:49,670
the whole thing is likely just possible

627
00:34:51,230 --> 00:34:59,040
you know and of course the desire to to

628
00:34:54,630 --> 00:35:01,160
make it very smart yeah okay you

629
00:34:59,040 --> 00:35:02,850
sprinting back on track

630
00:35:01,160 --> 00:35:10,430
Brendan do you want to give it another

631
00:35:02,850 --> 00:35:10,430
try so jump in the queue

632
00:35:13,420 --> 00:35:22,729
all right so I think here okay so he's

633
00:35:18,589 --> 00:35:31,308
going to Quinton yeah I think okay okay

634
00:35:22,729 --> 00:35:35,029
so where's that um so we um in in the

635
00:35:31,309 --> 00:35:37,190
discussions around December when Dave's

636
00:35:35,029 --> 00:35:39,349
colleague from Microsoft jumped in and

637
00:35:37,190 --> 00:35:41,799
suggested a different alternative format

638
00:35:39,349 --> 00:35:44,059
because he had a very specific

639
00:35:41,799 --> 00:35:45,619
architecture mind we had this debate

640
00:35:44,059 --> 00:35:47,450
about like could we have different

641
00:35:45,619 --> 00:35:51,650
formats um could we come up with

642
00:35:47,450 --> 00:35:54,799
different ways to make it really

643
00:35:51,650 --> 00:35:57,440
optimize for specific environments like

644
00:35:54,799 --> 00:36:00,769
the whole debate we had about could we

645
00:35:57,440 --> 00:36:03,680
just encode the structure is like a C

646
00:36:00,769 --> 00:36:06,979
construct and just basically you just

647
00:36:03,680 --> 00:36:08,930
copy the memory more or less from the

648
00:36:06,979 --> 00:36:10,189
server side into the into the client

649
00:36:08,930 --> 00:36:11,989
because you know that there is a

650
00:36:10,190 --> 00:36:15,519
specific memory structure you just it's

651
00:36:11,989 --> 00:36:19,430
like a C contract and in then at the end

652
00:36:15,519 --> 00:36:22,308
we came up with the decision that we

653
00:36:19,430 --> 00:36:23,960
actually want to have we want to have

654
00:36:22,309 --> 00:36:25,910
one format we don't want to have

655
00:36:23,960 --> 00:36:28,489
different formats for the different

656
00:36:25,910 --> 00:36:29,719
architectures and we but obviously at

657
00:36:28,489 --> 00:36:30,650
the same time we want to have a very

658
00:36:29,719 --> 00:36:35,630
simple pasa

659
00:36:30,650 --> 00:36:37,880
we want to make because why do we want

660
00:36:35,630 --> 00:36:39,739
to have the simple possible under on and

661
00:36:37,880 --> 00:36:50,109
that actually relates to the track I

662
00:36:39,739 --> 00:36:55,420
talked about before okay please go ahead

663
00:36:50,109 --> 00:36:55,420
alright can you hear me all right yes

664
00:36:55,630 --> 00:37:03,200
excellent okay so the initial point here

665
00:37:01,339 --> 00:37:09,440
I'm sorry I didn't quite catch for

666
00:37:03,200 --> 00:37:11,660
haniss left off but I'll just have a lot

667
00:37:09,440 --> 00:37:17,859
of similar formats there needs to just

668
00:37:11,660 --> 00:37:17,859
be one and

669
00:37:18,410 --> 00:37:29,490
I think we're still getting a lot of

670
00:37:24,020 --> 00:37:33,870
clipping it was it was only one clip

671
00:37:29,490 --> 00:37:33,870
[Laughter]

672
00:37:36,760 --> 00:37:43,220
yeah I will continue so um so previously

673
00:37:41,960 --> 00:37:45,230
what I mentioned with the status tracker

674
00:37:43,220 --> 00:37:47,689
so when that the phone wept it gets sent

675
00:37:45,230 --> 00:37:51,200
to the device it's running in like the

676
00:37:47,690 --> 00:37:53,690
regular application and it gets to gets

677
00:37:51,200 --> 00:37:56,509
the update but then it needs to do some

678
00:37:53,690 --> 00:37:58,040
passing there and so and that level of

679
00:37:56,510 --> 00:38:00,680
functionality there you have typically

680
00:37:58,040 --> 00:38:02,840
more sophisticated code to do the

681
00:38:00,680 --> 00:38:04,850
passing and and we have maybe see what

682
00:38:02,840 --> 00:38:06,500
code of course on cozy code for other

683
00:38:04,850 --> 00:38:09,440
reasons or very at that part of the

684
00:38:06,500 --> 00:38:11,300
application firmware and and that's

685
00:38:09,440 --> 00:38:13,610
great that that needs to happen because

686
00:38:11,300 --> 00:38:14,840
you don't want to want someone to send

687
00:38:13,610 --> 00:38:16,910
your garbage and then you switch off the

688
00:38:14,840 --> 00:38:19,370
device and then go into a put-on state

689
00:38:16,910 --> 00:38:22,279
but you wouldn't trigger the device to

690
00:38:19,370 --> 00:38:25,370
go into this other state where the

691
00:38:22,280 --> 00:38:29,360
bootloader has to decide what firmware

692
00:38:25,370 --> 00:38:31,250
it starts and that sort of is a needs to

693
00:38:29,360 --> 00:38:33,800
be a somewhat simpler format because you

694
00:38:31,250 --> 00:38:36,020
don't want to have a huge amount of code

695
00:38:33,800 --> 00:38:37,340
in that bootloader as well you want to

696
00:38:36,020 --> 00:38:39,350
keep the bootloader as simple as

697
00:38:37,340 --> 00:38:43,190
possible but you still need to for

698
00:38:39,350 --> 00:38:45,110
having some security um a lot of

699
00:38:43,190 --> 00:38:47,120
security you want to go sort of like

700
00:38:45,110 --> 00:38:48,620
through this secure boot sequence so

701
00:38:47,120 --> 00:38:52,580
you're essentially reusing the same

702
00:38:48,620 --> 00:38:54,259
format but is that's what for example

703
00:38:52,580 --> 00:38:58,340
aims you guys are looking into digital

704
00:38:54,260 --> 00:39:00,200
strip off some part of what was received

705
00:38:58,340 --> 00:39:04,190
over the wire previously and verified

706
00:39:00,200 --> 00:39:06,259
you repurpose that for the use of secure

707
00:39:04,190 --> 00:39:08,750
boot because ultimately the bootloader

708
00:39:06,260 --> 00:39:11,360
comes up it has a key provision and it

709
00:39:08,750 --> 00:39:13,010
needs to verify for example the digital

710
00:39:11,360 --> 00:39:15,530
signature of the image it's going to

711
00:39:13,010 --> 00:39:17,780
start and that's what it does everywhere

712
00:39:15,530 --> 00:39:20,330
every time it stands so that's that has

713
00:39:17,780 --> 00:39:22,070
to be better be a very simplistic code

714
00:39:20,330 --> 00:39:24,890
that's sort of like you want to have

715
00:39:22,070 --> 00:39:27,520
those simple parsers specifically at the

716
00:39:24,890 --> 00:39:27,520
bootloader side

717
00:39:29,140 --> 00:39:41,480
okay I'm hoping this is working now all

718
00:39:36,050 --> 00:39:49,520
right so from what I heard Hannes was

719
00:39:41,480 --> 00:39:53,470
talking about simple parsers yes okay so

720
00:39:49,520 --> 00:39:57,500
uh yeah from what he was saying I agree

721
00:39:53,470 --> 00:39:59,660
the simple part to construct a simple

722
00:39:57,500 --> 00:40:01,580
parser you need to have few unique

723
00:39:59,660 --> 00:40:04,310
structures and load nesting levels and

724
00:40:01,580 --> 00:40:09,080
and as Hannes was saying simple parsers

725
00:40:04,310 --> 00:40:14,330
are very much needed in IOT devices that

726
00:40:09,080 --> 00:40:22,670
have very constrained sizes and in boot

727
00:40:14,330 --> 00:40:26,270
loaders the next thing is that most

728
00:40:22,670 --> 00:40:29,840
update use cases use similar operations

729
00:40:26,270 --> 00:40:31,970
these are things such as copying a bit

730
00:40:29,840 --> 00:40:35,750
of firmware from one place to another

731
00:40:31,970 --> 00:40:39,109
whether that's remote or local checking

732
00:40:35,750 --> 00:40:41,750
digests checking statuses of or

733
00:40:39,110 --> 00:40:47,300
properties of different elements of the

734
00:40:41,750 --> 00:40:50,840
device and other things such as telling

735
00:40:47,300 --> 00:40:54,400
other parts of the device to suspend or

736
00:40:50,840 --> 00:40:58,790
resume function and that most use cases

737
00:40:54,400 --> 00:41:01,610
use these same fundamental operations

738
00:40:58,790 --> 00:41:06,500
just in varying orders and with varying

739
00:41:01,610 --> 00:41:09,170
endpoints and finally the possibly

740
00:41:06,500 --> 00:41:11,990
controversial point is that an update

741
00:41:09,170 --> 00:41:15,530
consumer doesn't actually care what

742
00:41:11,990 --> 00:41:18,350
their update is they care what they

743
00:41:15,530 --> 00:41:20,420
should do with it so your IOT device

744
00:41:18,350 --> 00:41:22,730
cares nothing about what the update is

745
00:41:20,420 --> 00:41:26,870
it just needs to know how to install it

746
00:41:22,730 --> 00:41:29,270
so that makes the suggestion that

747
00:41:26,870 --> 00:41:32,299
perhaps we should look at a sequence of

748
00:41:29,270 --> 00:41:36,530
update relevant commands now this is a

749
00:41:32,300 --> 00:41:40,010
bit of a rehash of the the arguments

750
00:41:36,530 --> 00:41:42,809
that I made for behavioral updates with

751
00:41:40,010 --> 00:41:49,799
the version for manifest

752
00:41:42,809 --> 00:41:54,069
next slide please so the currents

753
00:41:49,799 --> 00:41:56,380
structure lays out several parts

754
00:41:54,069 --> 00:41:58,029
we've got external information now this

755
00:41:56,380 --> 00:42:02,170
is information that's used by code

756
00:41:58,029 --> 00:42:04,329
outside of the manifest itself so that

757
00:42:02,170 --> 00:42:09,460
in our sorry outside of the manifest

758
00:42:04,329 --> 00:42:11,619
processor so that involves the structure

759
00:42:09,460 --> 00:42:14,289
version so that the parser is able to

760
00:42:11,619 --> 00:42:17,950
determine whether or not it can use the

761
00:42:14,289 --> 00:42:20,200
manifest followed by the sequence number

762
00:42:17,950 --> 00:42:23,439
now that's used by other parts of the

763
00:42:20,200 --> 00:42:27,339
code to determine which manifest it

764
00:42:23,440 --> 00:42:29,680
should process next we have common

765
00:42:27,339 --> 00:42:32,288
information which includes dependencies

766
00:42:29,680 --> 00:42:34,569
component identifiers and something

767
00:42:32,289 --> 00:42:36,299
called the common sequence if you've

768
00:42:34,569 --> 00:42:39,849
read through the draft or if you

769
00:42:36,299 --> 00:42:42,369
remember IETF 104 where I talked about

770
00:42:39,849 --> 00:42:44,529
this you may be familiar already with

771
00:42:42,369 --> 00:42:47,470
what the common sequence does but

772
00:42:44,529 --> 00:42:52,180
essentially it runs before any other

773
00:42:47,470 --> 00:42:56,589
sequence and what it does is sets up the

774
00:42:52,180 --> 00:42:58,930
environment so that common decisions can

775
00:42:56,589 --> 00:43:03,849
be made in one place which reduces

776
00:42:58,930 --> 00:43:07,538
encoding size and a common common

777
00:43:03,849 --> 00:43:09,309
variables such as component digests can

778
00:43:07,539 --> 00:43:13,240
be initialized in the same place which

779
00:43:09,309 --> 00:43:17,890
again reduces encoding size next we have

780
00:43:13,240 --> 00:43:20,169
the command sequences those are the six

781
00:43:17,890 --> 00:43:22,598
following sequences the dependency

782
00:43:20,170 --> 00:43:25,029
resolution payload fetching installation

783
00:43:22,599 --> 00:43:28,109
and then validation loading and run

784
00:43:25,029 --> 00:43:30,789
those happen in two different use cases

785
00:43:28,109 --> 00:43:33,788
the first three happen during

786
00:43:30,789 --> 00:43:39,869
installation the second three happened

787
00:43:33,789 --> 00:43:42,789
during secure boot type operations and

788
00:43:39,869 --> 00:43:45,160
finally we have either text or a text

789
00:43:42,789 --> 00:43:47,500
reference section this goes back to the

790
00:43:45,160 --> 00:43:52,348
severable section concept that we've

791
00:43:47,500 --> 00:43:52,349
discussed previously next slide please

792
00:43:54,300 --> 00:43:59,490
so in terms of a summary of changes oh

793
00:43:57,340 --> 00:44:03,700
good I forgot to fill in the numbers

794
00:43:59,490 --> 00:44:05,950
summary changes from zero four I've

795
00:44:03,700 --> 00:44:09,819
moved the common elements into a nested

796
00:44:05,950 --> 00:44:12,279
B string this is effort used parsing

797
00:44:09,820 --> 00:44:14,320
complexity and improved consistency in

798
00:44:12,280 --> 00:44:17,010
the format now what I mean by

799
00:44:14,320 --> 00:44:19,360
consistency in the format is that

800
00:44:17,010 --> 00:44:22,090
everything else in the manifest

801
00:44:19,360 --> 00:44:25,900
structure is wrapped in an e string with

802
00:44:22,090 --> 00:44:31,240
the exception of the structure version

803
00:44:25,900 --> 00:44:34,150
and the sequence number so wrapping the

804
00:44:31,240 --> 00:44:39,009
common section in a B string also makes

805
00:44:34,150 --> 00:44:41,590
the parser more consistent for reducing

806
00:44:39,010 --> 00:44:44,650
parsing complexity this is because the

807
00:44:41,590 --> 00:44:48,400
common section is referred to back to by

808
00:44:44,650 --> 00:44:51,490
all of the other sequences so having a

809
00:44:48,400 --> 00:44:55,390
single common mechanism to point back to

810
00:44:51,490 --> 00:44:57,759
it makes it simpler to implement the

811
00:44:55,390 --> 00:45:00,940
parser since it only needs to hold one

812
00:44:57,760 --> 00:45:04,480
reference and it has a fixed size in

813
00:45:00,940 --> 00:45:08,620
which to parse which makes the MM parser

814
00:45:04,480 --> 00:45:10,300
a bit cleaner to implement so I've also

815
00:45:08,620 --> 00:45:12,930
changed the encoding of command

816
00:45:10,300 --> 00:45:16,000
sequences previously command sequences

817
00:45:12,930 --> 00:45:19,330
consisted of a list of maps each map

818
00:45:16,000 --> 00:45:23,380
contained only one key value pair hmm

819
00:45:19,330 --> 00:45:27,460
after discussion with Karsten and Hank I

820
00:45:23,380 --> 00:45:30,490
have concluded that the most sensible

821
00:45:27,460 --> 00:45:36,400
way to implement this is by a sequence

822
00:45:30,490 --> 00:45:38,799
of keys on even numbers and values on

823
00:45:36,400 --> 00:45:40,750
odd numbers but I don't think it has to

824
00:45:38,800 --> 00:45:43,450
be that restrictive I think it just has

825
00:45:40,750 --> 00:45:46,330
to be a key followed by a fixed number

826
00:45:43,450 --> 00:45:48,520
of arguments and and those can be

827
00:45:46,330 --> 00:45:53,910
encoded in a flat way they don't have to

828
00:45:48,520 --> 00:45:53,910
be in maps next slide please

829
00:45:56,400 --> 00:46:00,779
and I've changed handling of optional

830
00:45:58,559 --> 00:46:02,490
sequences this was a very late addition

831
00:46:00,779 --> 00:46:05,549
so I haven't had a chance to work out

832
00:46:02,490 --> 00:46:09,769
the examples and after some discussion

833
00:46:05,549 --> 00:46:13,140
with experts on language design I have

834
00:46:09,769 --> 00:46:16,288
been convinced that we were missing an

835
00:46:13,140 --> 00:46:19,440
else previously it was possible to live

836
00:46:16,289 --> 00:46:23,730
set ace a number of sequences together

837
00:46:19,440 --> 00:46:26,279
that that each tested on if tight case

838
00:46:23,730 --> 00:46:28,589
but there was no way to define that it

839
00:46:26,279 --> 00:46:31,680
wasn't that there was an else type case

840
00:46:28,589 --> 00:46:34,499
either what they suggested was that we

841
00:46:31,680 --> 00:46:38,700
pack together any number of conditional

842
00:46:34,499 --> 00:46:42,598
sequences but have them wrapped in one

843
00:46:38,700 --> 00:46:44,999
list and have the stipulation that at

844
00:46:42,599 --> 00:46:49,680
least one of these sequences must pass

845
00:46:44,999 --> 00:46:55,259
this allows us to have a a try else try

846
00:46:49,680 --> 00:46:57,960
else try else type structure I've added

847
00:46:55,259 --> 00:47:02,670
support for encrypted manifests the

848
00:46:57,960 --> 00:47:04,710
mechanism to do this was to put in new

849
00:47:02,670 --> 00:47:07,589
values and define them as mutually

850
00:47:04,710 --> 00:47:09,960
exclusive sorry not new values new keys

851
00:47:07,589 --> 00:47:12,180
in the outer wrapper and defined them as

852
00:47:09,960 --> 00:47:15,119
mutually exclusive with the existing key

853
00:47:12,180 --> 00:47:17,339
for the manifest one of these is a cosy

854
00:47:15,119 --> 00:47:20,190
encrypt structure which defines the

855
00:47:17,339 --> 00:47:23,788
encryption information for the manifest

856
00:47:20,190 --> 00:47:27,779
and the second key is the manifest

857
00:47:23,789 --> 00:47:31,410
ciphertext I'm following discussions

858
00:47:27,779 --> 00:47:34,710
with David Brown I've also added a swap

859
00:47:31,410 --> 00:47:37,319
directive which will allow swapping to

860
00:47:34,710 --> 00:47:40,130
images but that will be handled in a

861
00:47:37,319 --> 00:47:43,410
completely application-specific way and

862
00:47:40,130 --> 00:47:45,509
as always with the manifest it tells the

863
00:47:43,410 --> 00:47:50,730
device what to do but not necessarily

864
00:47:45,509 --> 00:47:53,730
the specifics of how to do it I've also

865
00:47:50,730 --> 00:47:56,519
moved to defining suit specific digest

866
00:47:53,730 --> 00:48:00,529
identifiers in response to some

867
00:47:56,519 --> 00:48:03,538
discussions that I had following IETF

868
00:48:00,529 --> 00:48:07,499
104 and there was some mailing list

869
00:48:03,539 --> 00:48:08,190
discussion about the named identifiers

870
00:48:07,499 --> 00:48:10,140
straf t'

871
00:48:08,190 --> 00:48:12,630
including some

872
00:48:10,140 --> 00:48:15,269
digests that absolutely should not be

873
00:48:12,630 --> 00:48:19,049
supported such as ones truncated to 32

874
00:48:15,269 --> 00:48:21,508
bits but not supporting some digests

875
00:48:19,049 --> 00:48:26,279
that probably should be supported such

876
00:48:21,509 --> 00:48:27,989
as the shot to 2 to 4 family and finally

877
00:48:26,279 --> 00:48:30,599
there were a fair number of editorial

878
00:48:27,989 --> 00:48:58,529
changes next slide please

879
00:48:30,599 --> 00:49:10,950
I think that's it yes it's because these

880
00:48:58,529 --> 00:49:14,489
have merged that's right is it marked as

881
00:49:10,950 --> 00:49:31,890
informational okay I can see if I can

882
00:49:14,489 --> 00:49:37,559
fix that you can fix that when you close

883
00:49:31,890 --> 00:49:39,739
the crap I eat yeah Sue's burger sounds

884
00:49:37,559 --> 00:49:39,739
good

885
00:49:42,400 --> 00:49:46,560
does anyone have any questions or

886
00:49:44,440 --> 00:49:46,560
concerns

887
00:49:58,820 --> 00:50:07,560
just honest I at the tip meeting I I

888
00:50:05,720 --> 00:50:10,290
suggested to do our very upfront

889
00:50:07,560 --> 00:50:14,190
preparation for the next hackathons um

890
00:50:10,290 --> 00:50:17,550
and because this this meeting was a

891
00:50:14,190 --> 00:50:19,410
little ankle inconvenient for some of

892
00:50:17,550 --> 00:50:21,840
the folks unlike neither manually into

893
00:50:19,410 --> 00:50:24,120
their guys and Brennan is not here and

894
00:50:21,840 --> 00:50:25,820
so on but for the next one I was we were

895
00:50:24,120 --> 00:50:29,250
wondering indeed whether there would be

896
00:50:25,820 --> 00:50:31,230
interest to actually do a sort of a

897
00:50:29,250 --> 00:50:33,540
tutorial hands-on tutorial before the

898
00:50:31,230 --> 00:50:36,780
hackathon because it would allow some of

899
00:50:33,540 --> 00:50:39,509
the newcomers to actually get up to

900
00:50:36,780 --> 00:50:41,250
speed on the hands-on part so they can

901
00:50:39,510 --> 00:50:42,690
actually didn't benefit in the hackathon

902
00:50:41,250 --> 00:50:47,040
because otherwise it gets a little

903
00:50:42,690 --> 00:50:48,600
tricky but if I have to bring hardware

904
00:50:47,040 --> 00:50:51,390
along I need to know up front I can't

905
00:50:48,600 --> 00:50:53,279
just fill up my luggage with stuff so it

906
00:50:51,390 --> 00:50:56,100
would be nice to know if there is

907
00:50:53,280 --> 00:51:00,390
interest in in doing that and then I

908
00:50:56,100 --> 00:51:02,130
bring the piggy along so an interest of

909
00:51:00,390 --> 00:51:09,629
making sure you bring clean underwear I

910
00:51:02,130 --> 00:51:12,090
think you should have but seriously I we

911
00:51:09,630 --> 00:51:14,730
have learned so much from the hackathons

912
00:51:12,090 --> 00:51:17,360
in the past I think that if we could do

913
00:51:14,730 --> 00:51:19,830
one in Singapore they'd be really good

914
00:51:17,360 --> 00:51:23,760
and really that's a separate issue from

915
00:51:19,830 --> 00:51:25,980
what you you just mentioned I mean we

916
00:51:23,760 --> 00:51:28,650
can we can do the trip the training as

917
00:51:25,980 --> 00:51:31,020
well if it's not convenient to do it

918
00:51:28,650 --> 00:51:33,600
before the hackathon we might be able to

919
00:51:31,020 --> 00:51:38,490
take care take some side meeting time or

920
00:51:33,600 --> 00:51:41,610
you know for an interim even right to do

921
00:51:38,490 --> 00:51:43,770
that training ahead of the next night

922
00:51:41,610 --> 00:51:45,600
yeah that's something else that we

923
00:51:43,770 --> 00:51:48,450
should consider and I think we're

924
00:51:45,600 --> 00:51:53,640
interested in thoughts on you know what

925
00:51:48,450 --> 00:51:56,879
what folks would prefer generally Keith

926
00:51:53,640 --> 00:51:58,859
more this all seems needlessly Perico to

927
00:51:56,880 --> 00:52:00,240
me update the instruction particles

928
00:51:58,860 --> 00:52:01,200
seems fairly likely to be

929
00:52:00,240 --> 00:52:04,259
platform-specific

930
00:52:01,200 --> 00:52:08,850
I think that was related to the behavior

931
00:52:04,260 --> 00:52:09,480
starts thank you Roman nearly back on

932
00:52:08,850 --> 00:52:11,368
the 3rd of a half

933
00:52:09,480 --> 00:52:13,320
papania I would strongly encourage some

934
00:52:11,369 --> 00:52:14,609
prep where I've seen kind of groups to

935
00:52:13,320 --> 00:52:16,650
get together and come up with a plan

936
00:52:14,609 --> 00:52:18,150
coming into the actual kind of Saturday

937
00:52:16,650 --> 00:52:20,790
kind of Sunday activity there's been

938
00:52:18,150 --> 00:52:24,650
phenomenal results so strongly encourage

939
00:52:20,790 --> 00:52:24,650
virtual interim or whatever might help

940
00:52:27,590 --> 00:52:33,000
Dave Taylor slightly different topic but

941
00:52:31,410 --> 00:52:37,140
related Honus triggered so I'm actually

942
00:52:33,000 --> 00:52:39,900
at the mic as a teep chair and wanted to

943
00:52:37,140 --> 00:52:41,310
give a short report out on the

944
00:52:39,900 --> 00:52:42,600
relationship between teeth and the

945
00:52:41,310 --> 00:52:44,520
manifest format

946
00:52:42,600 --> 00:52:48,540
so teep had an interim meeting in

947
00:52:44,520 --> 00:52:50,130
between 104 and 105 and Brendon gave the

948
00:52:48,540 --> 00:52:51,720
presentation presenting the suit

949
00:52:50,130 --> 00:52:54,030
manifest format to the teeth working

950
00:52:51,720 --> 00:52:55,169
group so the teeth working group could

951
00:52:54,030 --> 00:52:57,210
make a decision as to whether they

952
00:52:55,170 --> 00:52:59,010
wanted to take a dependency on suit okay

953
00:52:57,210 --> 00:53:01,410
the outcome of that is the teeth working

954
00:52:59,010 --> 00:53:03,600
Beck got consensus that says the teeth

955
00:53:01,410 --> 00:53:05,279
working group and the OTP protocol will

956
00:53:03,600 --> 00:53:07,440
take a dependency on the suit manifest

957
00:53:05,280 --> 00:53:11,310
okay and so part of the discussion had

958
00:53:07,440 --> 00:53:14,460
to do with suit is primarily chartered

959
00:53:11,310 --> 00:53:18,720
with having and a manifest format for

960
00:53:14,460 --> 00:53:21,030
firmware updates and teeps use case is

961
00:53:18,720 --> 00:53:22,529
not necessarily updating firmware right

962
00:53:21,030 --> 00:53:26,100
it's updating stuff that goes into at

963
00:53:22,530 --> 00:53:29,280
EEE which includes firmware and none

964
00:53:26,100 --> 00:53:30,990
firmware ok and so way back even in the

965
00:53:29,280 --> 00:53:32,940
BOK we talked about is this for software

966
00:53:30,990 --> 00:53:34,470
update or firmware update or what and

967
00:53:32,940 --> 00:53:37,080
and so Brendan explained that the

968
00:53:34,470 --> 00:53:40,350
manifest format was generic enough to

969
00:53:37,080 --> 00:53:43,470
not be constrained firmware only ok even

970
00:53:40,350 --> 00:53:45,690
though that's the primary outcome of the

971
00:53:43,470 --> 00:53:49,020
primary goal of suit ok so that was the

972
00:53:45,690 --> 00:53:51,990
basis of discussion and so the consensus

973
00:53:49,020 --> 00:53:53,880
was that the belief is the cert manifest

974
00:53:51,990 --> 00:53:56,160
format even though it's designed for a

975
00:53:53,880 --> 00:53:57,690
firmware - it's designed for all the

976
00:53:56,160 --> 00:54:00,680
constrained requirements that we have in

977
00:53:57,690 --> 00:54:04,320
suit it is not limited to that ok and so

978
00:54:00,680 --> 00:54:06,359
the consensus was that t p-- was

979
00:54:04,320 --> 00:54:08,190
planning to use the suit manifest as

980
00:54:06,359 --> 00:54:09,569
long as it stayed generic right as long

981
00:54:08,190 --> 00:54:11,940
as it stayed such that it was not

982
00:54:09,570 --> 00:54:13,530
limited to use for firmware which is the

983
00:54:11,940 --> 00:54:15,330
current case and Brendan as the author

984
00:54:13,530 --> 00:54:16,740
was explaining yes you could use it for

985
00:54:15,330 --> 00:54:18,720
many different purposes right at your

986
00:54:16,740 --> 00:54:22,529
generic format it happens to meet all

987
00:54:18,720 --> 00:54:22,890
the requirements for IOT and firmware

988
00:54:22,530 --> 00:54:25,289
and

989
00:54:22,890 --> 00:54:27,000
so on because who does but it also

990
00:54:25,289 --> 00:54:29,220
happens to meet the requirements that

991
00:54:27,000 --> 00:54:31,170
keep head to you and so the outcome is

992
00:54:29,220 --> 00:54:34,259
that currently cheapest choosing in the

993
00:54:31,170 --> 00:54:35,579
OTR PV to document that Hannes authored

994
00:54:34,260 --> 00:54:37,319
and presented in the teeth working group

995
00:54:35,579 --> 00:54:39,390
ago this week that it would have a

996
00:54:37,319 --> 00:54:41,910
normative reference to the suit manifest

997
00:54:39,390 --> 00:54:44,759
format even for purposes not just

998
00:54:41,910 --> 00:54:46,769
firmware per se okay that is the current

999
00:54:44,760 --> 00:54:48,779
status and so from the t p-- working

1000
00:54:46,769 --> 00:54:51,509
group we hope that the suit working

1001
00:54:48,779 --> 00:54:53,220
group continues to along the same lines

1002
00:54:51,510 --> 00:54:56,160
as it is doing and the teeth would be

1003
00:54:53,220 --> 00:54:57,569
happy to use it and so that was me just

1004
00:54:56,160 --> 00:54:59,538
summarizing us chair what I think the

1005
00:54:57,569 --> 00:55:02,549
consensus from the interim meeting and

1006
00:54:59,539 --> 00:55:05,279
the meeting earlier this week which we

1007
00:55:02,549 --> 00:55:06,809
had yesterday where Hannes presented how

1008
00:55:05,279 --> 00:55:11,150
we might be encapsulate this you

1009
00:55:06,809 --> 00:55:16,349
manifest in the ojp protocol so Dave

1010
00:55:11,150 --> 00:55:19,589
this is Russia's chair does this bring

1011
00:55:16,349 --> 00:55:21,510
along with it any input to the

1012
00:55:19,589 --> 00:55:25,049
milestones that we're going to be

1013
00:55:21,510 --> 00:55:28,950
producing in terms of making sure where

1014
00:55:25,049 --> 00:55:32,609
we are not blocking their progress the

1015
00:55:28,950 --> 00:55:35,788
chairs had that discussion and right now

1016
00:55:32,609 --> 00:55:40,259
our belief is that the suit manifest

1017
00:55:35,789 --> 00:55:44,940
will naturally precede the auteur IP

1018
00:55:40,259 --> 00:55:46,710
spec in the progress meaning we think

1019
00:55:44,940 --> 00:55:49,529
that the suit manifest is more nailed

1020
00:55:46,710 --> 00:55:51,509
down than the OTP discussion so the

1021
00:55:49,529 --> 00:55:52,829
answer is yes but it's not something

1022
00:55:51,509 --> 00:55:57,569
that we have any concerns about at this

1023
00:55:52,829 --> 00:56:00,180
point so okay thank you Empire I also

1024
00:55:57,569 --> 00:56:04,049
look on Latif so I just personal on that

1025
00:56:00,180 --> 00:56:08,069
conquer what they've said singing as the

1026
00:56:04,049 --> 00:56:13,099
comments on the importance of a generic

1027
00:56:08,069 --> 00:56:16,319
format idiotic terminology it's 40 we

1028
00:56:13,099 --> 00:56:18,299
decided and want to leverage a suit but

1029
00:56:16,319 --> 00:56:22,288
for our terminology wise will have say

1030
00:56:18,299 --> 00:56:24,809
will have a rich world I said no more

1031
00:56:22,289 --> 00:56:27,480
application application and dependent

1032
00:56:24,809 --> 00:56:29,460
trust application as a suitor animation

1033
00:56:27,480 --> 00:56:32,029
might perform aware on limited form of

1034
00:56:29,460 --> 00:56:35,160
HTTP general software and they will have

1035
00:56:32,029 --> 00:56:36,569
software we have a trusted application

1036
00:56:35,160 --> 00:56:38,249
in tipo world

1037
00:56:36,569 --> 00:56:41,249
that's one second awareness about

1038
00:56:38,249 --> 00:56:44,189
dependency we also want to leverage the

1039
00:56:41,249 --> 00:56:47,459
suit to address the case where I install

1040
00:56:44,189 --> 00:56:50,069
application one it depended t81 tma-22

1041
00:56:47,459 --> 00:56:52,649
ts3 and and go further and further

1042
00:56:50,069 --> 00:56:54,479
that's a complex problem and every piece

1043
00:56:52,650 --> 00:56:57,269
Ida said ok what collaborate suit maybe

1044
00:56:54,479 --> 00:57:00,058
it's a wedding suit scope how much that

1045
00:56:57,269 --> 00:57:02,218
will handle that in a simple way outside

1046
00:57:00,059 --> 00:57:03,809
but maybe able to stretch it but I think

1047
00:57:02,219 --> 00:57:06,119
it's a complete problem overall no

1048
00:57:03,809 --> 00:57:07,949
matter it's a firm way or software or

1049
00:57:06,119 --> 00:57:16,709
trust application it is

1050
00:57:07,949 --> 00:57:18,199
I think brilliance referring to me we're

1051
00:57:16,709 --> 00:57:21,390
gonna go

1052
00:57:18,199 --> 00:57:25,319
Brendan go ahead hi

1053
00:57:21,390 --> 00:57:28,410
so suit definitely responds to the

1054
00:57:25,319 --> 00:57:31,319
dependency question and suit addresses

1055
00:57:28,410 --> 00:57:35,219
it in a way that doesn't require the

1056
00:57:31,319 --> 00:57:37,410
same signer on each of the components

1057
00:57:35,219 --> 00:57:39,359
that you install it explicitly allows

1058
00:57:37,410 --> 00:57:43,078
different signers for different

1059
00:57:39,359 --> 00:57:45,959
components what it also does in order to

1060
00:57:43,079 --> 00:57:50,369
forcibly break the possibility of

1061
00:57:45,959 --> 00:57:54,989
circular dependencies is that it relies

1062
00:57:50,369 --> 00:57:56,969
on cryptographic digests of dependencies

1063
00:57:54,989 --> 00:58:01,189
which prevents you from ever

1064
00:57:56,969 --> 00:58:01,189
constructing a circular dependency

1065
00:58:01,969 --> 00:58:05,819
hopefully that adds I think it brendan

1066
00:58:04,229 --> 00:58:08,249
is explaining that because you were

1067
00:58:05,819 --> 00:58:11,969
breaking up there yes the suit manifest

1068
00:58:08,249 --> 00:58:13,529
does have a way of addressing the

1069
00:58:11,969 --> 00:58:15,209
circular dependencies question and

1070
00:58:13,529 --> 00:58:17,039
Brendan was attempting to give some

1071
00:58:15,209 --> 00:58:19,140
details that were started breaking up as

1072
00:58:17,039 --> 00:58:20,699
to exactly how but the teep working

1073
00:58:19,140 --> 00:58:22,799
group is saying the teeth working group

1074
00:58:20,699 --> 00:58:24,509
will just rely on the suit working group

1075
00:58:22,799 --> 00:58:25,769
solving that problem and the teeth will

1076
00:58:24,509 --> 00:58:26,999
working group will not try to solve the

1077
00:58:25,769 --> 00:58:28,618
problem themselves it's just taking a

1078
00:58:26,999 --> 00:58:30,598
dependency on suit to do that that's

1079
00:58:28,619 --> 00:58:32,309
right so that will help you review I

1080
00:58:30,599 --> 00:58:33,989
understand how well it's address the

1081
00:58:32,309 --> 00:58:36,419
problem but and so also for the broad

1082
00:58:33,989 --> 00:58:39,059
audiences I hope to review this is one

1083
00:58:36,419 --> 00:58:41,098
for the important topic we'll look

1084
00:58:39,059 --> 00:58:44,699
forward to those reviews thank you

1085
00:58:41,099 --> 00:58:49,630
so this is de fillers TP r there was an

1086
00:58:44,699 --> 00:58:51,849
open question as to whether

1087
00:58:49,630 --> 00:58:55,210
suit manifest or some other working

1088
00:58:51,849 --> 00:58:59,650
group has a mechanism for doing the

1089
00:58:55,210 --> 00:59:01,329
following so one of the topics in trust

1090
00:58:59,650 --> 00:59:03,640
execution environment provisioning is

1091
00:59:01,329 --> 00:59:04,990
you're not just provisioning the binary

1092
00:59:03,640 --> 00:59:07,058
your can be R per visioning say

1093
00:59:04,990 --> 00:59:09,970
configuration of the binary right and so

1094
00:59:07,059 --> 00:59:11,829
we call that we antique call that

1095
00:59:09,970 --> 00:59:14,500
personalization data because it may be

1096
00:59:11,829 --> 00:59:16,299
encrypted by the device specific key

1097
00:59:14,500 --> 00:59:17,680
right so that no other device can I'm

1098
00:59:16,299 --> 00:59:20,890
trying to configure this device and only

1099
00:59:17,680 --> 00:59:23,288
this device right and so the suit

1100
00:59:20,890 --> 00:59:24,819
manifest is capable of passing yo files

1101
00:59:23,289 --> 00:59:26,230
and things and so that could be

1102
00:59:24,819 --> 00:59:30,069
considered to be part of this you

1103
00:59:26,230 --> 00:59:34,269
manifest the open issue is has to do

1104
00:59:30,069 --> 00:59:37,420
with trust anchor update and so if

1105
00:59:34,269 --> 00:59:39,189
you're going to update say the keys in a

1106
00:59:37,420 --> 00:59:41,140
device whatever you're using for your

1107
00:59:39,190 --> 00:59:44,230
trust ank you're going to update the the

1108
00:59:41,140 --> 00:59:47,288
contents of your trust anchor store is

1109
00:59:44,230 --> 00:59:49,869
that personalization data that you might

1110
00:59:47,289 --> 00:59:51,519
manage with a Spile and a suit manifest

1111
00:59:49,869 --> 00:59:53,549
or is that something you'd use a

1112
00:59:51,519 --> 00:59:55,808
different protocol or mechanism for that

1113
00:59:53,549 --> 00:59:57,279
is something the teep working group is

1114
00:59:55,809 --> 01:00:00,519
not heavy proposal it is an open

1115
00:59:57,279 --> 01:00:04,799
question and advice from this group or

1116
01:00:00,519 --> 01:00:07,508
other groups would be welcome in deep I

1117
01:00:04,799 --> 01:00:09,339
mean playing games I judge I have to say

1118
01:00:07,509 --> 01:00:11,980
the trust anchor comes it'll look

1119
01:00:09,339 --> 01:00:14,529
different from complication data become

1120
01:00:11,980 --> 01:00:16,089
with it as a less sensitive than trust

1121
01:00:14,529 --> 01:00:17,799
anchor we'll talk about that Ruta at

1122
01:00:16,089 --> 01:00:20,440
least of a rule to say certificates just

1123
01:00:17,799 --> 01:00:21,819
like brother right the browser vendors

1124
01:00:20,440 --> 01:00:23,680
control that it or take it very

1125
01:00:21,819 --> 01:00:25,808
seriously who do you trust

1126
01:00:23,680 --> 01:00:29,200
now how much is that in a suit as a

1127
01:00:25,809 --> 01:00:31,839
format I can say the more a dependent a

1128
01:00:29,200 --> 01:00:34,868
format our manifest and file versus

1129
01:00:31,839 --> 01:00:40,500
deliver a trust list at a different

1130
01:00:34,869 --> 01:00:43,990
problem this one is yes in Stephen Ming

1131
01:00:40,500 --> 01:00:47,380
product the deep topic I'm curious

1132
01:00:43,990 --> 01:00:50,078
whether we should add another use case

1133
01:00:47,380 --> 01:00:51,819
to the architecture document in sort of

1134
01:00:50,079 --> 01:00:53,950
pointing to the deep work to the deep

1135
01:00:51,819 --> 01:00:57,490
architecture document and talking a

1136
01:00:53,950 --> 01:00:59,919
little bit about the sort of software

1137
01:00:57,490 --> 01:01:03,310
the trusted application and also the

1138
01:00:59,920 --> 01:01:10,240
personalization data along with it so

1139
01:01:03,310 --> 01:01:11,950
I mean yes I think I concur Highness

1140
01:01:10,240 --> 01:01:14,589
well let a few subtle way to honor that

1141
01:01:11,950 --> 01:01:17,109
depreciation right these are different

1142
01:01:14,590 --> 01:01:19,840
entities they work I clearly explicit

1143
01:01:17,110 --> 01:01:23,230
this part reliance on a suit this part

1144
01:01:19,840 --> 01:01:24,970
may need a different approach so and if

1145
01:01:23,230 --> 01:01:27,760
a suicidal always see with our

1146
01:01:24,970 --> 01:01:30,189
particular trust anchor as a general

1147
01:01:27,760 --> 01:01:32,200
treat as a different a problem to not

1148
01:01:30,190 --> 01:01:34,990
put in scope this whether you say this

1149
01:01:32,200 --> 01:01:38,640
will realize a suitor soffit it's a it's

1150
01:01:34,990 --> 01:01:38,640
a template in your use case of scope

1151
01:01:40,050 --> 01:01:44,740
yeah I think it would be useful to have

1152
01:01:42,250 --> 01:01:47,470
some further elaboration on the

1153
01:01:44,740 --> 01:01:50,350
requirements and you know what is gonna

1154
01:01:47,470 --> 01:01:53,459
be handled where maybe we can take that

1155
01:01:50,350 --> 01:01:56,860
discussion to the mailing list and and

1156
01:01:53,460 --> 01:02:04,180
and then work it therefore for awhile

1157
01:01:56,860 --> 01:02:08,160
right yeah thank you thank you maybe a

1158
01:02:04,180 --> 01:02:10,710
cross post thing between both groups

1159
01:02:08,160 --> 01:02:12,910
Randy Turner would lend us a year I had

1160
01:02:10,710 --> 01:02:17,320
it would be nice at some point to get a

1161
01:02:12,910 --> 01:02:20,140
definition of the word simple because I

1162
01:02:17,320 --> 01:02:23,010
was just doing a rough back of the

1163
01:02:20,140 --> 01:02:25,799
envelope calculation on what I needed to

1164
01:02:23,010 --> 01:02:30,840
implement this so there's a simple

1165
01:02:25,800 --> 01:02:33,430
simple parser looks like I need a cosy

1166
01:02:30,840 --> 01:02:39,190
implementation a seaborne implementation

1167
01:02:33,430 --> 01:02:43,029
some hashing post post any hackathon it

1168
01:02:39,190 --> 01:02:46,330
would be nice to have somebody maybe let

1169
01:02:43,030 --> 01:02:48,760
us know what the size of what they did

1170
01:02:46,330 --> 01:02:51,730
was or if they were doing a sufficient

1171
01:02:48,760 --> 01:02:53,140
or a substantial implementation or what

1172
01:02:51,730 --> 01:02:55,450
this might what this might end up

1173
01:02:53,140 --> 01:02:57,400
looking like because we have in my

1174
01:02:55,450 --> 01:02:59,500
company we have sensors with 4k of RAM

1175
01:02:57,400 --> 01:03:02,820
and you know aka flash and things like

1176
01:02:59,500 --> 01:03:05,080
that so we don't have multiple MP years

1177
01:03:02,820 --> 01:03:09,070
tons of peripherals and things that were

1178
01:03:05,080 --> 01:03:11,140
and have separate code bases that would

1179
01:03:09,070 --> 01:03:12,910
use this because those systems are

1180
01:03:11,140 --> 01:03:16,569
awfully often running Linux sometimes

1181
01:03:12,910 --> 01:03:16,960
that'd be nice to know what simple means

1182
01:03:16,570 --> 01:03:19,390
and

1183
01:03:16,960 --> 01:03:21,940
what a minimal implementation might look

1184
01:03:19,390 --> 01:03:25,230
like total eye scout sighs Wow I think

1185
01:03:21,940 --> 01:03:25,230
Brendan might have an answer to that

1186
01:03:25,859 --> 01:03:34,779
go ahead Brendan yeah I fully agree with

1187
01:03:30,940 --> 01:03:40,180
you getting the sizes down is one of the

1188
01:03:34,780 --> 01:03:43,960
top priorities I've had I'm even going

1189
01:03:40,180 --> 01:03:46,598
back to IETF 103 if you what if you were

1190
01:03:43,960 --> 01:03:50,230
part of that you may have seen Emanuel I

1191
01:03:46,599 --> 01:03:52,030
asked that specifically I'm so I think

1192
01:03:50,230 --> 01:03:56,319
working as hard as I can to get those

1193
01:03:52,030 --> 01:03:59,559
sizes down now when you say a stibor

1194
01:03:56,319 --> 01:04:01,839
implementation you should note that it

1195
01:03:59,559 --> 01:04:06,460
doesn't have to be one of the existing

1196
01:04:01,839 --> 01:04:11,230
keyboard libraries I've built a sort of

1197
01:04:06,460 --> 01:04:13,960
toy example as a pull parser and it took

1198
01:04:11,230 --> 01:04:17,290
about 200 lines of C for the C bore

1199
01:04:13,960 --> 01:04:22,599
implementation and under 600 lines of C

1200
01:04:17,290 --> 01:04:24,940
for the simple processor now you're not

1201
01:04:22,599 --> 01:04:30,369
going to get away from about one and a

1202
01:04:24,940 --> 01:04:33,700
half K worth of hash for the sha-256

1203
01:04:30,369 --> 01:04:37,030
implementation that's really difficult

1204
01:04:33,700 --> 01:04:38,919
to get away without I'm guessing that in

1205
01:04:37,030 --> 01:04:41,650
sensors that small and don't have

1206
01:04:38,920 --> 01:04:43,869
signatures so you're probably using

1207
01:04:41,650 --> 01:04:46,740
something like H Mac for signature

1208
01:04:43,869 --> 01:04:50,799
verification that doesn't add much code

1209
01:04:46,740 --> 01:04:52,899
so you're you're in a really tough spot

1210
01:04:50,799 --> 01:04:58,809
to get firmware update in a device that

1211
01:04:52,900 --> 01:05:01,869
size but it might be able to I would

1212
01:04:58,809 --> 01:05:03,910
question whether you need something

1213
01:05:01,869 --> 01:05:07,960
that's completely application specific

1214
01:05:03,910 --> 01:05:13,230
in an 8k range that falls below the

1215
01:05:07,960 --> 01:05:18,700
class 1 device I'm it's gonna be tough

1216
01:05:13,230 --> 01:05:21,880
but we'll try and get it down I just I

1217
01:05:18,700 --> 01:05:26,410
follow up on from I think that sorry

1218
01:05:21,880 --> 01:05:28,119
Benjamin damn Itron the the ask I think

1219
01:05:26,410 --> 01:05:30,430
was if you're going to be putting this

1220
01:05:28,119 --> 01:05:31,030
code into a bootloader then there needs

1221
01:05:30,430 --> 01:05:35,410
to be a limb

1222
01:05:31,030 --> 01:05:37,690
on how big the bootloader is so how big

1223
01:05:35,410 --> 01:05:43,149
it is probably should be in what what

1224
01:05:37,690 --> 01:05:45,520
size are you targeting this one is an

1225
01:05:43,150 --> 01:05:48,550
app that was part of the exercise as we

1226
01:05:45,520 --> 01:05:51,750
worked on the on at the hackathons and

1227
01:05:48,550 --> 01:05:54,130
then the work we did in between

1228
01:05:51,750 --> 01:05:56,680
specifically like the Seaboard question

1229
01:05:54,130 --> 01:06:01,060
Brendon address that but also the cosy

1230
01:05:56,680 --> 01:06:03,250
part because it's may be worthwhile to

1231
01:06:01,060 --> 01:06:06,370
note that for the cosy implementation

1232
01:06:03,250 --> 01:06:08,620
you don't need the entire specificity or

1233
01:06:06,370 --> 01:06:10,600
implementation of the specification you

1234
01:06:08,620 --> 01:06:13,810
pick only those features that you really

1235
01:06:10,600 --> 01:06:17,259
need in because there's a lot of stuff

1236
01:06:13,810 --> 01:06:20,020
in the course implementation um we open

1237
01:06:17,260 --> 01:06:23,380
sourced one of those implementations and

1238
01:06:20,020 --> 01:06:25,780
a manual did another another one on to

1239
01:06:23,380 --> 01:06:28,840
look at a boot I wouldn't say that they

1240
01:06:25,780 --> 01:06:30,370
are post production ready in and

1241
01:06:28,840 --> 01:06:31,780
unfortunately I don't I'm not aware of

1242
01:06:30,370 --> 01:06:37,000
any production already open source

1243
01:06:31,780 --> 01:06:39,600
implementation but I just posted a mail

1244
01:06:37,000 --> 01:06:43,090
to the list where we did a write-up of

1245
01:06:39,600 --> 01:06:45,009
what we found out back then on the code

1246
01:06:43,090 --> 01:06:48,490
sizes and the RAM util and run

1247
01:06:45,010 --> 01:06:52,000
requirements and that's this this paper

1248
01:06:48,490 --> 01:06:56,350
that provides that information and of

1249
01:06:52,000 --> 01:06:58,750
course the biggest size or the biggest

1250
01:06:56,350 --> 01:07:01,240
chunks and implementation is actually a

1251
01:06:58,750 --> 01:07:03,870
crypto because we've so far mostly

1252
01:07:01,240 --> 01:07:07,419
focused on asymmetric crypto even though

1253
01:07:03,870 --> 01:07:09,819
the cozy workhorses supports a symmetric

1254
01:07:07,420 --> 01:07:13,570
crypto but if you use let's say

1255
01:07:09,820 --> 01:07:16,570
state-of-the-art be 256 are one type of

1256
01:07:13,570 --> 01:07:19,030
elliptic curve cryptography then you pay

1257
01:07:16,570 --> 01:07:21,550
a certain price and we used in our case

1258
01:07:19,030 --> 01:07:25,720
empathy LS implementation and looked at

1259
01:07:21,550 --> 01:07:30,160
various other stacks and you can see how

1260
01:07:25,720 --> 01:07:32,319
the size differs how the speed varies so

1261
01:07:30,160 --> 01:07:34,450
they're they're various trade off with

1262
01:07:32,320 --> 01:07:35,470
the different implementations and you

1263
01:07:34,450 --> 01:07:36,939
may want to take a look at that

1264
01:07:35,470 --> 01:07:38,529
depending on what exactly your

1265
01:07:36,940 --> 01:07:40,390
requirements are how much time you have

1266
01:07:38,530 --> 01:07:44,950
for the boot process and for the

1267
01:07:40,390 --> 01:07:49,629
verification etcetera etc and how

1268
01:07:44,950 --> 01:07:53,259
access this paper so the way we

1269
01:07:49,630 --> 01:07:55,960
published it was it through I Triple E

1270
01:07:53,260 --> 01:07:58,930
but it's published in a way that we paid

1271
01:07:55,960 --> 01:08:00,339
more for doing the publication a process

1272
01:07:58,930 --> 01:08:01,660
so everyone can access it for free

1273
01:08:00,339 --> 01:08:08,650
because otherwise it gets a little

1274
01:08:01,660 --> 01:08:11,980
annoying for everyone in the idea either

1275
01:08:08,650 --> 01:08:14,890
there my phone again um I I would

1276
01:08:11,980 --> 01:08:17,799
caution against viewing the crypto

1277
01:08:14,890 --> 01:08:21,040
libraries themselves as being bigger

1278
01:08:17,799 --> 01:08:22,719
than the processing code because the

1279
01:08:21,040 --> 01:08:24,160
assumption is that the crypto is all

1280
01:08:22,719 --> 01:08:26,380
being provided in software and therefore

1281
01:08:24,160 --> 01:08:30,009
part of the codebase but we're seeing

1282
01:08:26,380 --> 01:08:32,350
more often we're just building the

1283
01:08:30,009 --> 01:08:34,020
crypto at the hardware so the the SHA

1284
01:08:32,350 --> 01:08:36,489
primitive is provided in the hardware

1285
01:08:34,020 --> 01:08:38,049
the EC primitive may be provided in the

1286
01:08:36,488 --> 01:08:39,700
hardware okay so you're paying you're

1287
01:08:38,049 --> 01:08:42,189
shifting the price from software to

1288
01:08:39,700 --> 01:08:43,689
hardware but for us that's we're willing

1289
01:08:42,189 --> 01:08:45,399
to do that now I'm not talking about

1290
01:08:43,689 --> 01:08:47,410
sensors that are in the 5k codes

1291
01:08:45,399 --> 01:08:49,179
coast-based range like our sensors are a

1292
01:08:47,410 --> 01:08:51,479
lot bigger than that but there's that

1293
01:08:49,180 --> 01:08:54,160
we're still talking class one devices

1294
01:08:51,479 --> 01:08:58,120
we're go to harness and then Brendon mmm

1295
01:08:54,160 --> 01:08:59,920
yes and it's great if you have these

1296
01:08:58,120 --> 01:09:02,410
things in hardware and of course that

1297
01:08:59,920 --> 01:09:04,180
will reduce your other code size but of

1298
01:09:02,410 --> 01:09:06,219
course it just means shuffling things

1299
01:09:04,180 --> 01:09:08,200
around because in reality if it's for

1300
01:09:06,219 --> 01:09:10,089
example if it's just a separate

1301
01:09:08,200 --> 01:09:13,318
microcontroller or a different feature

1302
01:09:10,089 --> 01:09:15,549
so you will you could as well have a

1303
01:09:13,319 --> 01:09:17,469
larger microcontroller and pay the same

1304
01:09:15,549 --> 01:09:19,210
price and just have any software so

1305
01:09:17,469 --> 01:09:21,730
you're moving stuff around but

1306
01:09:19,210 --> 01:09:29,259
ultimately the functionality has to be

1307
01:09:21,729 --> 01:09:32,649
somewhere Brendon go ahead hey last time

1308
01:09:29,259 --> 01:09:35,229
that this argument came up I went and

1309
01:09:32,649 --> 01:09:37,000
did some research on exactly what

1310
01:09:35,229 --> 01:09:39,910
devices are available with cryptographic

1311
01:09:37,000 --> 01:09:42,370
accelerators and I came to the

1312
01:09:39,910 --> 01:09:44,939
conclusion that anything that has a

1313
01:09:42,370 --> 01:09:48,549
cryptographic accelerator of any kind

1314
01:09:44,939 --> 01:09:52,679
typically starts at 128 KT at which

1315
01:09:48,549 --> 01:09:52,680
point I'm not really worried about it

1316
01:09:55,489 --> 01:10:03,659
okay thank you channeling Keith Moore

1317
01:09:59,150 --> 01:10:04,440
one concern I have is how many different

1318
01:10:03,659 --> 01:10:06,000
things

1319
01:10:04,440 --> 01:10:07,710
does the implementer have to know and

1320
01:10:06,000 --> 01:10:09,330
understand in order to build an

1321
01:10:07,710 --> 01:10:12,030
implementation that's appropriate for

1322
01:10:09,330 --> 01:10:14,100
their product some things like hashes

1323
01:10:12,030 --> 01:10:16,080
and signatures are none available but

1324
01:10:14,100 --> 01:10:18,480
encoding really needs to be as simple as

1325
01:10:16,080 --> 01:10:20,429
possible the manifest world needs to be

1326
01:10:18,480 --> 01:10:23,129
as simple as possible

1327
01:10:20,429 --> 01:10:25,380
encoding behavior strikes me as making

1328
01:10:23,130 --> 01:10:28,139
things too hard too complex for some use

1329
01:10:25,380 --> 01:10:29,699
cases et Cie we should keep in mind that

1330
01:10:28,139 --> 01:10:33,060
the implementers implement their

1331
01:10:29,699 --> 01:10:40,440
audience for this is much wider than for

1332
01:10:33,060 --> 01:10:42,560
the typical IETF protocol any comments

1333
01:10:40,440 --> 01:10:42,559
on that

1334
01:10:45,920 --> 01:10:51,980
Brendan go ahead hi Keith I completely

1335
01:10:49,080 --> 01:10:56,219
agree with you it does need to be simple

1336
01:10:51,980 --> 01:10:59,030
I think that the behavior encoding will

1337
01:10:56,219 --> 01:11:01,500
turn out to be simpler than you expect

1338
01:10:59,030 --> 01:11:03,719
the only way to prove that to you of

1339
01:11:01,500 --> 01:11:11,030
course is to show you an implementation

1340
01:11:03,719 --> 01:11:14,670
so that's what I am working on now I

1341
01:11:11,030 --> 01:11:18,150
think that we need to do is to provide a

1342
01:11:14,670 --> 01:11:21,840
few example sets that show what you

1343
01:11:18,150 --> 01:11:24,259
would need to implement on a few classes

1344
01:11:21,840 --> 01:11:24,260
of device

1345
01:11:29,719 --> 01:11:35,060
I think I think what I heard from

1346
01:11:33,350 --> 01:11:37,310
Brendan was you know he's providing one

1347
01:11:35,060 --> 01:11:43,250
example but that doesn't necessarily

1348
01:11:37,310 --> 01:11:44,600
cover all all classes of devices Brendan

1349
01:11:43,250 --> 01:11:46,040
you were being a little choppy give it

1350
01:11:44,600 --> 01:11:48,730
something else to say could you please

1351
01:11:46,040 --> 01:11:48,730
say that jabber

1352
01:11:56,440 --> 01:12:04,030
I'm dishonest I what you want to let

1353
01:12:04,329 --> 01:12:09,799
okay channeling keel again good not here

1354
01:12:07,400 --> 01:12:11,539
or what the it was trying just saying

1355
01:12:09,800 --> 01:12:13,670
but I think the implementation is what

1356
01:12:11,539 --> 01:12:15,530
what needs to be demonstrated

1357
01:12:13,670 --> 01:12:17,809
if the specifications aren't clear at

1358
01:12:15,530 --> 01:12:23,300
the example implemented sand won't solve

1359
01:12:17,809 --> 01:12:25,730
that so so I guess is he the what he

1360
01:12:23,300 --> 01:12:27,349
saying I don't think the implementation

1361
01:12:25,730 --> 01:12:29,329
is what is needed to remember straighter

1362
01:12:27,349 --> 01:12:30,619
because he says it you know even if you

1363
01:12:29,329 --> 01:12:33,259
have a new birthday stand it doesn't

1364
01:12:30,619 --> 01:12:42,650
make that the actual specification is

1365
01:12:33,260 --> 01:12:44,840
clear okay Brandon I think you will be

1366
01:12:42,650 --> 01:12:46,549
turn out much simpler than you expect we

1367
01:12:44,840 --> 01:12:48,380
also need to provide a few example

1368
01:12:46,550 --> 01:12:56,659
Cassie's for different classes of

1369
01:12:48,380 --> 01:12:58,579
devices and that that also leads to the

1370
01:12:56,659 --> 01:12:59,629
hackathon our questions we different

1371
01:12:58,579 --> 01:13:02,389
people come along with that

1372
01:12:59,630 --> 01:13:06,499
yeah favorite devices I think it gives

1373
01:13:02,389 --> 01:13:09,499
us a better way to sort of get their

1374
01:13:06,499 --> 01:13:11,300
size measurements down and we had some

1375
01:13:09,499 --> 01:13:13,190
of those guys they already with

1376
01:13:11,300 --> 01:13:16,190
different devices but having more people

1377
01:13:13,190 --> 01:13:18,049
come along and participate so that we

1378
01:13:16,190 --> 01:13:19,879
may be at the end even have a reference

1379
01:13:18,050 --> 01:13:22,820
implementation of people can use to

1380
01:13:19,880 --> 01:13:25,489
avoid mistakes our basic mistakes would

1381
01:13:22,820 --> 01:13:29,230
be really useful so you guys have a

1382
01:13:25,489 --> 01:13:29,230
chance to participate that would be good

1383
01:13:32,499 --> 01:13:40,210
yeah so um I can post them I can boast

1384
01:13:40,470 --> 01:13:46,620
[Laughter]

1385
01:13:44,330 --> 01:13:48,990
so that's basically how I opened my

1386
01:13:46,620 --> 01:13:51,900
comment is it be nice to see game Randy

1387
01:13:48,990 --> 01:13:53,820
turn turn if we could see some

1388
01:13:51,900 --> 01:13:55,349
implementations post hackathon or even

1389
01:13:53,820 --> 01:13:59,849
the one that Brendan's working on to be

1390
01:13:55,350 --> 01:14:02,100
great yeah I can I can post the things

1391
01:13:59,850 --> 01:14:05,400
that we had that the last hackathon put

1392
01:14:02,100 --> 01:14:08,280
them together I mean I think Emmanuel

1393
01:14:05,400 --> 01:14:09,809
showed them on the slide but I'm in from

1394
01:14:08,280 --> 01:14:11,759
the last ITF meeting but I'm not

1395
01:14:09,810 --> 01:14:15,380
entirely sure but he indeed included the

1396
01:14:11,760 --> 01:14:21,150
link so just the links to the write-up

1397
01:14:15,380 --> 01:14:23,190
so one one thought I was just added so

1398
01:14:21,150 --> 01:14:24,299
Roman generally Academy we're talking

1399
01:14:23,190 --> 01:14:25,440
about kind of implementations we're

1400
01:14:24,300 --> 01:14:27,240
talking about things are in slides

1401
01:14:25,440 --> 01:14:29,730
things a result of a hackathon I might

1402
01:14:27,240 --> 01:14:31,530
strongly encourage the creation of a

1403
01:14:29,730 --> 01:14:33,570
wiki page that just enumerate set

1404
01:14:31,530 --> 01:14:35,280
implementation so we have running list

1405
01:14:33,570 --> 01:14:38,910
folks can see it folks can add to it in

1406
01:14:35,280 --> 01:14:41,280
it transparent way the track wiki github

1407
01:14:38,910 --> 01:14:43,220
wiki whatever makes sense I was also

1408
01:14:41,280 --> 01:14:46,259
thinking that we could write up some

1409
01:14:43,220 --> 01:14:47,670
implementation considerations and maybe

1410
01:14:46,260 --> 01:14:49,410
as we get further along an

1411
01:14:47,670 --> 01:14:52,110
implementation report that would talk

1412
01:14:49,410 --> 01:14:55,740
through you know some of the work that

1413
01:14:52,110 --> 01:14:58,170
has been done room engine again that

1414
01:14:55,740 --> 01:14:59,700
would be fabulous you know when I read

1415
01:14:58,170 --> 01:15:01,110
the Shepherd reports and I want to bring

1416
01:14:59,700 --> 01:15:02,429
documents forward one of the first

1417
01:15:01,110 --> 01:15:04,049
things I check for is do you have

1418
01:15:02,430 --> 01:15:05,490
running code or are you just saying the

1419
01:15:04,050 --> 01:15:07,560
working group kind of talked about it

1420
01:15:05,490 --> 01:15:09,870
and I have a tendency to want to have a

1421
01:15:07,560 --> 01:15:11,640
conversation about drafts that don't

1422
01:15:09,870 --> 01:15:13,440
have a piece of running code that you

1423
01:15:11,640 --> 01:15:15,510
can point to and typically I like to see

1424
01:15:13,440 --> 01:15:18,710
URL as well so all this would help and

1425
01:15:15,510 --> 01:15:18,710
so I do appreciate that

1426
01:15:23,349 --> 01:15:30,199
so thank you great suggestion we do have

1427
01:15:26,570 --> 01:15:31,670
a suit wiki page created right now put

1428
01:15:30,199 --> 01:15:33,589
on your task like one main link in it

1429
01:15:31,670 --> 01:15:34,849
and I think it's a great suggestion no

1430
01:15:33,590 --> 01:15:36,320
it doesn't have implementations on it

1431
01:15:34,849 --> 01:15:37,909
yet right and so thank you that

1432
01:15:36,320 --> 01:15:40,219
suggestion let's go ahead and do that as

1433
01:15:37,909 --> 01:15:42,079
chairs if people have implementation

1434
01:15:40,219 --> 01:15:43,730
links send them to us I don't know if

1435
01:15:42,079 --> 01:15:45,019
other people have the option to edit the

1436
01:15:43,730 --> 01:15:48,259
wiki themselves or if it's just the

1437
01:15:45,020 --> 01:15:50,270
chairs if you have a login yeah so we

1438
01:15:48,260 --> 01:15:51,739
have a page to do that you can get to it

1439
01:15:50,270 --> 01:15:53,780
on the data tracker at the working group

1440
01:15:51,739 --> 01:15:56,629
you go to the wiki link let's collect

1441
01:15:53,780 --> 01:15:59,239
them they're a great suggestion so chair

1442
01:15:56,630 --> 01:16:02,829
and s chairs please send us links or

1443
01:15:59,239 --> 01:16:02,829
edit the wiki yourself your preference

1444
01:16:10,539 --> 01:16:14,079
and one particular practice I've seen

1445
01:16:12,639 --> 01:16:16,690
very helpful as we kind of talk about

1446
01:16:14,079 --> 01:16:18,909
this whether you're watching TLS dots

1447
01:16:16,690 --> 01:16:20,799
and East this may not be the case in

1448
01:16:18,909 --> 01:16:22,089
this working group but as more documents

1449
01:16:20,800 --> 01:16:24,699
get published it's not a matter of just

1450
01:16:22,090 --> 01:16:25,989
saying I have an implementation for this

1451
01:16:24,699 --> 01:16:28,150
working group I have an implementation

1452
01:16:25,989 --> 01:16:29,768
relative to a particular set of drafts

1453
01:16:28,150 --> 01:16:30,219
and a particular set of versions of the

1454
01:16:29,769 --> 01:16:31,900
draft

1455
01:16:30,219 --> 01:16:33,969
so if implementers can talk about a

1456
01:16:31,900 --> 01:16:41,469
relative to draft and specific version

1457
01:16:33,969 --> 01:16:44,130
numbers that would be a great help any

1458
01:16:41,469 --> 01:16:51,429
other comments on this or any other

1459
01:16:44,130 --> 01:16:55,889
topic so I think the next thing we have

1460
01:16:51,429 --> 01:16:55,889
on the agenda is a quick wrap-up

1461
01:17:07,050 --> 01:17:16,170
so we have so I believe that I'll start

1462
01:17:13,020 --> 01:17:17,699
then my co-chairs can can add to this we

1463
01:17:16,170 --> 01:17:20,910
talked today about updating our

1464
01:17:17,699 --> 01:17:26,360
milestones will um will propose some new

1465
01:17:20,910 --> 01:17:29,639
dates that are more reasonable to our ap

1466
01:17:26,360 --> 01:17:32,759
we we talked about starting a working

1467
01:17:29,640 --> 01:17:38,370
group last call on on the information

1468
01:17:32,760 --> 01:17:44,360
model which we can do I think following

1469
01:17:38,370 --> 01:17:44,360
this meeting I think that was what

1470
01:17:47,719 --> 01:18:07,620
travel great yeah room into new you know

1471
01:18:06,480 --> 01:18:10,290
I'll repeat my point about kind of

1472
01:18:07,620 --> 01:18:11,969
milestones I know we've had broad ITF

1473
01:18:10,290 --> 01:18:13,830
why conversations about how real they

1474
01:18:11,969 --> 01:18:15,810
are our and how they not I think the

1475
01:18:13,830 --> 01:18:17,790
most important thing for the publishing

1476
01:18:15,810 --> 01:18:19,590
the milestones is about getting other

1477
01:18:17,790 --> 01:18:21,030
people involved in the work it's so

1478
01:18:19,590 --> 01:18:22,949
folks from the outside who aren't

1479
01:18:21,030 --> 01:18:24,719
perhaps not in the room can actually get

1480
01:18:22,949 --> 01:18:26,219
a better sense of the timeline and when

1481
01:18:24,719 --> 01:18:28,170
things might be ready yeah so it's

1482
01:18:26,219 --> 01:18:29,969
actually I do it as as important as a

1483
01:18:28,170 --> 01:18:34,650
project management thing lightly but as

1484
01:18:29,969 --> 01:18:38,010
a marketing tool a lot more so we can do

1485
01:18:34,650 --> 01:18:41,570
maybe three or four week you know last

1486
01:18:38,010 --> 01:18:45,989
call on the information model to allow

1487
01:18:41,570 --> 01:18:48,420
for time for vacations and whatnot and

1488
01:18:45,989 --> 01:18:52,428
then the other the other action I think

1489
01:18:48,420 --> 01:18:56,550
was since we've adopted or since we've

1490
01:18:52,429 --> 01:19:01,469
we've completed the last call on the

1491
01:18:56,550 --> 01:19:03,590
architecture we in order to complete the

1492
01:19:01,469 --> 01:19:07,830
last call in the architecture we need to

1493
01:19:03,590 --> 01:19:11,429
do one more Rev to adjust the text

1494
01:19:07,830 --> 01:19:14,870
around status trackers where we'll be

1495
01:19:11,429 --> 01:19:14,870
looking for that by the end of this week

1496
01:19:18,030 --> 01:19:27,790
and then we'll work on ready yeah and

1497
01:19:25,989 --> 01:19:31,690
then we'll write up the the Shepherd

1498
01:19:27,790 --> 01:19:34,929
right okay that sounds like a plan

1499
01:19:31,690 --> 01:19:37,239
anything else so we need to figure out

1500
01:19:34,929 --> 01:19:40,059
when whether you want to have an interim

1501
01:19:37,239 --> 01:19:42,280
a virtual interim or a hackathon threat

1502
01:19:40,059 --> 01:19:49,710
or you want to go to Singapore earlier

1503
01:19:42,280 --> 01:19:54,929
what any any comments on that right now

1504
01:19:49,710 --> 01:19:54,929
I'm happy to take that to the list

1505
01:19:57,210 --> 01:20:02,980
Honus are you willing to drive that

1506
01:20:01,030 --> 01:20:09,329
conversation on the list of starters are

1507
01:20:02,980 --> 01:20:11,949
rather great thanks alright that that

1508
01:20:09,329 --> 01:20:17,460
matches the list I made during the

1509
01:20:11,949 --> 01:20:17,460
meeting so sir hand the business

1510
01:20:19,219 --> 01:21:10,850
all right yes

1511
01:21:05,060 --> 01:21:14,949
can you hold up the blue shirts we

1512
01:21:10,850 --> 01:21:14,949
funded transport to like stop already

