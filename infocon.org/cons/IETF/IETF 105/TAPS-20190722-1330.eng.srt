1
00:00:05,030 --> 00:00:17,090
keep fussing with this maybe why you

2
00:00:06,310 --> 00:00:19,940
beat or are the fresh batteries oh thank

3
00:00:17,090 --> 00:00:42,649
you are we be at time oh yeah we're time

4
00:00:19,940 --> 00:00:45,499
yeah okay we're having a little problem

5
00:00:42,649 --> 00:00:50,390
with the remote clicker here so why

6
00:00:45,499 --> 00:00:52,699
don't we what if you've got one that

7
00:00:50,390 --> 00:00:54,260
just plugs in sure I mean I can do the

8
00:00:52,699 --> 00:00:55,519
chair sides from here but I think it's

9
00:00:54,260 --> 00:01:01,190
easier for other folks to be able to

10
00:00:55,519 --> 00:01:03,610
advanced on slides oh yes I did test it

11
00:01:01,190 --> 00:01:15,020
and it worked I'm not sure I trust it

12
00:01:03,610 --> 00:01:19,070
okay let's try oh that's interesting the

13
00:01:15,020 --> 00:01:22,610
ears works well if this looks like an

14
00:01:19,070 --> 00:01:29,869
Apple thingy it's just excited it it

15
00:01:22,610 --> 00:01:33,049
looks like a trademark infringement okay

16
00:01:29,869 --> 00:01:36,530
let's let's get started I think the

17
00:01:33,049 --> 00:01:38,000
agenda is a well even though we have had

18
00:01:36,530 --> 00:01:39,890
short agendas in this meeting so far I

19
00:01:38,000 --> 00:01:41,600
don't think we've ever actually ended

20
00:01:39,890 --> 00:01:43,130
early so I'm assuming that we're going

21
00:01:41,600 --> 00:01:47,600
to be pressed for time by the time we

22
00:01:43,130 --> 00:01:50,119
get to 3:30 so blue sheets are going

23
00:01:47,600 --> 00:01:51,859
around this is the transport services

24
00:01:50,119 --> 00:01:56,000
working group if you don't know what

25
00:01:51,859 --> 00:01:58,869
transport services or taps are then you

26
00:01:56,000 --> 00:02:01,509
stay and watch and learn

27
00:01:58,869 --> 00:02:04,429
Teresa is going to jabber scribe for us

28
00:02:01,509 --> 00:02:06,590
that's helpful for the for the minute

29
00:02:04,429 --> 00:02:08,899
taker to get your name so if she's

30
00:02:06,590 --> 00:02:12,590
looking at you funnily it's probably

31
00:02:08,899 --> 00:02:16,599
she's trying to reach your badge we have

32
00:02:12,590 --> 00:02:16,599
a minute taker in the back I see you

33
00:02:18,409 --> 00:02:24,569
okay so we need a minute taker so Sarah

34
00:02:23,159 --> 00:02:26,760
banks and her son we're going to tag

35
00:02:24,569 --> 00:02:27,899
team doing the minutes as a kind of a

36
00:02:26,760 --> 00:02:30,298
learning exercise but it looks like

37
00:02:27,900 --> 00:02:32,819
Sarah's been delayed so could somebody

38
00:02:30,299 --> 00:02:38,430
get started in the ether pad and then

39
00:02:32,819 --> 00:02:42,959
when Sarah gets here I have I'm using

40
00:02:38,430 --> 00:02:44,579
Mary's clicker why don't you take leave

41
00:02:42,959 --> 00:02:47,549
that one you take this one and I'll try

42
00:02:44,579 --> 00:02:48,810
it at the end of the session you will be

43
00:02:47,549 --> 00:02:52,290
no worse off than we are now if it

44
00:02:48,810 --> 00:02:56,549
doesn't work oh yeah well you should

45
00:02:52,290 --> 00:02:58,769
take those with the old one you're

46
00:02:56,549 --> 00:03:00,870
giving me that and you're taking oh you

47
00:02:58,769 --> 00:03:03,889
just have matters no okay well okay I'll

48
00:03:00,870 --> 00:03:08,549
try the battery there we go thank you

49
00:03:03,889 --> 00:03:08,879
all right preciate it okay so a minute

50
00:03:08,549 --> 00:03:11,549
taker

51
00:03:08,879 --> 00:03:12,989
somebody please well what we really need

52
00:03:11,549 --> 00:03:14,879
is for somebody to capture the action

53
00:03:12,989 --> 00:03:19,439
items right you don't need to record

54
00:03:14,879 --> 00:03:21,268
everything that said thank you Cory Cory

55
00:03:19,439 --> 00:03:26,310
first we'll take notes because he hasn't

56
00:03:21,269 --> 00:03:31,849
worked on the drafts this time okay as

57
00:03:26,310 --> 00:03:36,150
your as your penance awesome all right

58
00:03:31,849 --> 00:03:37,888
so no well anything that is said in this

59
00:03:36,150 --> 00:03:39,810
room is considered an IDF contribution

60
00:03:37,889 --> 00:03:42,090
if you don't know what that is you

61
00:03:39,810 --> 00:03:45,840
should meet some of that stuff yes

62
00:03:42,090 --> 00:03:48,090
today's agenda you may not be surprised

63
00:03:45,840 --> 00:03:49,859
if this agenda looks familiar because

64
00:03:48,090 --> 00:03:51,989
this is almost exactly the agenda from

65
00:03:49,859 --> 00:03:54,090
the interim meeting which where we made

66
00:03:51,989 --> 00:03:58,590
some progress on the issues but there

67
00:03:54,090 --> 00:04:00,090
are still some open-open elements and so

68
00:03:58,590 --> 00:04:04,530
today we're going to try to push some of

69
00:04:00,090 --> 00:04:07,919
those along so young published in the

70
00:04:04,530 --> 00:04:10,259
RFC since before the min set draft is

71
00:04:07,919 --> 00:04:10,799
sitting the RC editor q it's got a Miss

72
00:04:10,259 --> 00:04:13,319
Ref

73
00:04:10,799 --> 00:04:15,659
it's waiting for the security document

74
00:04:13,319 --> 00:04:18,358
to be submitted and then they'll be

75
00:04:15,659 --> 00:04:21,810
published together we did complete a

76
00:04:18,358 --> 00:04:23,750
working group last call for the survey

77
00:04:21,810 --> 00:04:26,009
of transport security protocols so

78
00:04:23,750 --> 00:04:28,590
thanks for the folks who read and

79
00:04:26,009 --> 00:04:31,080
commented on that for the document to

80
00:04:28,590 --> 00:04:32,070
proceed it needs a shepherd a shepherd

81
00:04:31,080 --> 00:04:36,109
is ideally somebody

82
00:04:32,070 --> 00:04:38,670
is not an author but is willing to be a

83
00:04:36,110 --> 00:04:39,900
intermediary I think I see a volunteer I

84
00:04:38,670 --> 00:04:41,250
haven't even told you what you're going

85
00:04:39,900 --> 00:04:43,530
to be doing but Philip thank you

86
00:04:41,250 --> 00:04:44,760
consider yourself signed up for those of

87
00:04:43,530 --> 00:04:46,140
you who don't know what a shepherd is a

88
00:04:44,760 --> 00:04:48,840
shepherd is a person who makes sure that

89
00:04:46,140 --> 00:04:50,700
the authors respond to feedback that

90
00:04:48,840 --> 00:04:52,880
comes in the review cycle the ietf has

91
00:04:50,700 --> 00:04:56,820
called the area directors reviews and

92
00:04:52,880 --> 00:04:58,680
and tries to make sure that the right

93
00:04:56,820 --> 00:05:00,590
discussion happens so the document

94
00:04:58,680 --> 00:05:04,710
progresses so thank you very much Philip

95
00:05:00,590 --> 00:05:05,969
so that means that is my area director

96
00:05:04,710 --> 00:05:09,810
here Agnes

97
00:05:05,970 --> 00:05:12,150
so Magnus you should expect this within

98
00:05:09,810 --> 00:05:18,450
the next day or so once I can fill this

99
00:05:12,150 --> 00:05:20,280
form yeah we had an interim many of you

100
00:05:18,450 --> 00:05:23,580
were there virtually it was a virtual

101
00:05:20,280 --> 00:05:27,539
into him interim and we talked about

102
00:05:23,580 --> 00:05:30,710
framing what is it the implementation

103
00:05:27,540 --> 00:05:36,110
draft which continues to evolve and

104
00:05:30,710 --> 00:05:40,049
mature as we learn more and then about

105
00:05:36,110 --> 00:05:45,870
how how default parameters are

106
00:05:40,050 --> 00:05:47,190
represented you know should applications

107
00:05:45,870 --> 00:05:49,370
be able to ask for things without giving

108
00:05:47,190 --> 00:05:51,540
the parameters and have something happen

109
00:05:49,370 --> 00:05:54,530
the yang model which we talked about

110
00:05:51,540 --> 00:05:56,880
here a couple of times was discussed and

111
00:05:54,530 --> 00:05:58,650
people continue to think it's a good

112
00:05:56,880 --> 00:06:00,630
idea and then there's a bunch of open

113
00:05:58,650 --> 00:06:04,080
issues with the architecture in the API

114
00:06:00,630 --> 00:06:07,950
draft so our schedule

115
00:06:04,080 --> 00:06:15,919
it's unchanged since the last ITF so the

116
00:06:07,950 --> 00:06:19,170
goal here is to submit the architecture

117
00:06:15,920 --> 00:06:23,400
implementation and API drafts for

118
00:06:19,170 --> 00:06:25,140
publication by November I suspect that

119
00:06:23,400 --> 00:06:27,120
the implementation draft won't be done

120
00:06:25,140 --> 00:06:28,650
but it sure would be nice if we could

121
00:06:27,120 --> 00:06:30,840
all agree that the architecture in the

122
00:06:28,650 --> 00:06:32,820
API drafts have done I don't know four

123
00:06:30,840 --> 00:06:34,049
there but if those of you during the

124
00:06:32,820 --> 00:06:36,650
conversation today be interesting to

125
00:06:34,050 --> 00:06:40,730
hear people's input on that just so that

126
00:06:36,650 --> 00:06:40,729
we can kind of set expectations

127
00:06:42,130 --> 00:06:46,640
that either the computers frozen or

128
00:06:45,110 --> 00:06:49,910
that's my last slide so I think we

129
00:06:46,640 --> 00:06:54,580
should move on the computer appears not

130
00:06:49,910 --> 00:06:54,580
to be frozen okay

131
00:07:21,430 --> 00:07:25,970
hello all right

132
00:07:23,000 --> 00:07:29,620
hi I'm Tommy poly and I'm gonna give a

133
00:07:25,970 --> 00:07:32,270
quick update on the state of framers and

134
00:07:29,620 --> 00:07:34,760
we have renamed them in the document to

135
00:07:32,270 --> 00:07:40,180
message framers so we can put all of our

136
00:07:34,760 --> 00:07:40,180
messages and frames all right

137
00:07:41,200 --> 00:07:45,260
do you can you make it fullscreen is it

138
00:07:44,600 --> 00:07:50,290
okay

139
00:07:45,260 --> 00:07:57,219
other clickers no breaking them tiny

140
00:07:50,290 --> 00:07:58,700
or no it's okay snap fullscreen ooh

141
00:07:57,220 --> 00:08:01,010
that's interesting

142
00:07:58,700 --> 00:08:02,210
why don't you stop clicking for a moment

143
00:08:01,010 --> 00:08:05,980
we're going to try to get it into it

144
00:08:02,210 --> 00:08:11,000
that looks right okay see if it works

145
00:08:05,980 --> 00:08:14,150
so you want the up arrow all right well

146
00:08:11,000 --> 00:08:17,030
that's ask Marian how about you just

147
00:08:14,150 --> 00:08:20,630
tell me I will just tell you great all

148
00:08:17,030 --> 00:08:23,840
right so as a status update we did have

149
00:08:20,630 --> 00:08:25,460
a pull request to rewrite how we do

150
00:08:23,840 --> 00:08:28,700
framers and this was based on our

151
00:08:25,460 --> 00:08:31,969
discussion that we had last time and I

152
00:08:28,700 --> 00:08:34,669
f-104 as well as in the interim so we

153
00:08:31,970 --> 00:08:36,710
did merge that in there were still some

154
00:08:34,669 --> 00:08:38,990
open questions or thoughts that people

155
00:08:36,710 --> 00:08:41,810
had so we said we kind of come back to

156
00:08:38,990 --> 00:08:43,400
those potentially revise the text in

157
00:08:41,809 --> 00:08:46,849
accordance with that once we've landed

158
00:08:43,400 --> 00:08:49,040
it so I want to cover those today and

159
00:08:46,850 --> 00:08:51,980
then I also want to share that we did

160
00:08:49,040 --> 00:08:55,019
release a version of the framing API in

161
00:08:51,980 --> 00:08:57,899
our network framework within

162
00:08:55,019 --> 00:09:00,319
Appl systems for swift and c and so we

163
00:08:57,899 --> 00:09:03,509
have that in our iOS and Mac OS beta

164
00:09:00,319 --> 00:09:05,370
currently so this is a way to implement

165
00:09:03,509 --> 00:09:07,430
framers and you can play with it you can

166
00:09:05,370 --> 00:09:09,750
test it out and see how it feels to hold

167
00:09:07,430 --> 00:09:11,729
you can see also how some of the

168
00:09:09,750 --> 00:09:18,300
practicalities of like putting this into

169
00:09:11,730 --> 00:09:21,690
a concrete language turnout okay

170
00:09:18,300 --> 00:09:24,420
so I want to first cover essentially

171
00:09:21,690 --> 00:09:26,639
what the API surface looks like

172
00:09:24,420 --> 00:09:29,849
currently for framing based on this

173
00:09:26,639 --> 00:09:31,769
latest PR so if you are an application

174
00:09:29,850 --> 00:09:34,410
and you have your connection and you

175
00:09:31,769 --> 00:09:36,120
would like to add some sort of message

176
00:09:34,410 --> 00:09:39,959
framing into it so let's say you have a

177
00:09:36,120 --> 00:09:43,560
TLV format over a TCP stream you can

178
00:09:39,959 --> 00:09:45,689
create a message framer object like this

179
00:09:43,560 --> 00:09:47,160
new message framer and that's the thing

180
00:09:45,690 --> 00:09:49,519
that you can register all your events on

181
00:09:47,160 --> 00:09:52,410
to handle framing and D framing data and

182
00:09:49,519 --> 00:09:55,139
then you can add this framer on to your

183
00:09:52,410 --> 00:09:56,610
pre connection now the way the text

184
00:09:55,139 --> 00:09:59,250
currently describes it is that you add

185
00:09:56,610 --> 00:10:01,470
them on and each one you add kind of

186
00:09:59,250 --> 00:10:04,560
goes on to the stack closer to the

187
00:10:01,470 --> 00:10:06,120
application so you could add a lower

188
00:10:04,560 --> 00:10:07,170
level one and then maybe hand your

189
00:10:06,120 --> 00:10:10,019
connection to someone else and they

190
00:10:07,170 --> 00:10:13,259
could add on more framers I'm one of the

191
00:10:10,019 --> 00:10:17,279
issues that was raised I think my max

192
00:10:13,259 --> 00:10:18,750
was it wasn't super clear what happens

193
00:10:17,279 --> 00:10:22,620
to the order of all the events when you

194
00:10:18,750 --> 00:10:25,259
have multiple framers going on so we

195
00:10:22,620 --> 00:10:28,529
will want to clarify that the intention

196
00:10:25,259 --> 00:10:31,230
I have here is you essentially will get

197
00:10:28,529 --> 00:10:33,569
any start events to start framing from

198
00:10:31,230 --> 00:10:33,899
the bottom from the transport up in that

199
00:10:33,569 --> 00:10:38,639
order

200
00:10:33,899 --> 00:10:40,319
I have a question do you ever any model

201
00:10:38,639 --> 00:10:42,509
famous because you could also just like

202
00:10:40,319 --> 00:10:46,500
create one frame of it it's even more

203
00:10:42,509 --> 00:10:48,779
complex and especially you certainly

204
00:10:46,500 --> 00:10:53,130
could I think the reason to have

205
00:10:48,779 --> 00:10:57,269
multiple is for more code reuse let's

206
00:10:53,130 --> 00:11:01,050
say you have like a basic like let's say

207
00:10:57,269 --> 00:11:02,910
I'm doing something for a DNS framing

208
00:11:01,050 --> 00:11:04,559
that can work over TCP and UDP I could

209
00:11:02,910 --> 00:11:07,469
have one that just does like the length

210
00:11:04,559 --> 00:11:08,510
value framing over TCP and then one that

211
00:11:07,470 --> 00:11:10,490
strips out some of the

212
00:11:08,510 --> 00:11:13,730
and does more interpretation that can

213
00:11:10,490 --> 00:11:16,990
work over both TCP and UDP and so I

214
00:11:13,730 --> 00:11:21,620
would want to compose them separately

215
00:11:16,990 --> 00:11:26,060
you could certainly do it that way but

216
00:11:21,620 --> 00:11:27,620
since the it's not necessarily the taps

217
00:11:26,060 --> 00:11:28,670
implementers but it's more like

218
00:11:27,620 --> 00:11:31,070
third-party apps or third-party

219
00:11:28,670 --> 00:11:32,839
libraries that would want to be

220
00:11:31,070 --> 00:11:34,190
implementing framers II you should at

221
00:11:32,840 --> 00:11:39,400
least define what is possible for them

222
00:11:34,190 --> 00:11:39,400
to do but that's a good point

223
00:11:39,520 --> 00:11:45,710
so once you've added your frame where

224
00:11:42,230 --> 00:11:46,850
you can add specific things that you

225
00:11:45,710 --> 00:11:49,040
want to communicate to your frame or

226
00:11:46,850 --> 00:11:50,540
when you're sending and receiving so

227
00:11:49,040 --> 00:11:52,250
there's a message context that we

228
00:11:50,540 --> 00:11:55,550
already have as part of our send and

229
00:11:52,250 --> 00:11:58,280
receive calls and so right now it

230
00:11:55,550 --> 00:12:00,349
specifies that you can add kind of

231
00:11:58,280 --> 00:12:02,600
special values specific to your frame or

232
00:12:00,350 --> 00:12:04,550
onto that send to receive to say you

233
00:12:02,600 --> 00:12:07,750
know when you're sending your header and

234
00:12:04,550 --> 00:12:10,880
the specific value so if you had an HTTP

235
00:12:07,750 --> 00:12:14,290
framer you could put your header values

236
00:12:10,880 --> 00:12:17,030
in there so they could lay it out

237
00:12:14,290 --> 00:12:19,069
similarly when you are receiving you are

238
00:12:17,030 --> 00:12:20,750
able to look at the message context and

239
00:12:19,070 --> 00:12:24,230
see the properties of how it was D

240
00:12:20,750 --> 00:12:28,460
framed so there is a open issue kind of

241
00:12:24,230 --> 00:12:31,010
around this I'll get to in a second then

242
00:12:28,460 --> 00:12:33,380
there are some events around kind of the

243
00:12:31,010 --> 00:12:36,140
frame where lifetime of saying hey this

244
00:12:33,380 --> 00:12:38,330
misses framer is now actually active on

245
00:12:36,140 --> 00:12:40,100
a connection the connection got far

246
00:12:38,330 --> 00:12:42,230
enough in setting up the transport that

247
00:12:40,100 --> 00:12:43,430
you are ready to start framing or the

248
00:12:42,230 --> 00:12:45,890
connection has closed

249
00:12:43,430 --> 00:12:48,459
you should stop framing now this just

250
00:12:45,890 --> 00:12:51,800
allows you to prepare and cleanup

251
00:12:48,460 --> 00:12:53,930
similarly when you are if you are

252
00:12:51,800 --> 00:12:55,880
writing a framer you can send it events

253
00:12:53,930 --> 00:12:57,650
to say okay I'm ready for more

254
00:12:55,880 --> 00:12:59,750
application data the connection is now

255
00:12:57,650 --> 00:13:01,370
ready for my perspective or you can say

256
00:12:59,750 --> 00:13:03,710
I hit some error there's some invalid

257
00:13:01,370 --> 00:13:06,800
message that came in just fail this

258
00:13:03,710 --> 00:13:09,380
connection one of the points brought up

259
00:13:06,800 --> 00:13:11,449
in the issue is that sometimes you need

260
00:13:09,380 --> 00:13:14,689
to be able to close a connection without

261
00:13:11,450 --> 00:13:16,910
having an error on it so I'm one way to

262
00:13:14,690 --> 00:13:19,100
solve this is to just rename fail

263
00:13:16,910 --> 00:13:20,500
connection to like close connection you

264
00:13:19,100 --> 00:13:25,690
can have an optional error

265
00:13:20,500 --> 00:13:26,980
have two different methods to do that so

266
00:13:25,690 --> 00:13:33,780
why do you need actually to add your

267
00:13:26,980 --> 00:13:35,590
framer to the pre connection so you

268
00:13:33,780 --> 00:13:43,510
what's the other option that you're

269
00:13:35,590 --> 00:13:45,580
thinking of at it just - a connection so

270
00:13:43,510 --> 00:13:48,400
at least the way we have things right

271
00:13:45,580 --> 00:13:53,320
now you get your connection the moment

272
00:13:48,400 --> 00:13:58,060
you call initiate um and so if that

273
00:13:53,320 --> 00:14:00,160
action of initiate is asynchronous you

274
00:13:58,060 --> 00:14:02,979
know you mean the connection could

275
00:14:00,160 --> 00:14:06,699
become fully ready before you've added

276
00:14:02,980 --> 00:14:08,950
your framer which is okay if you haven't

277
00:14:06,700 --> 00:14:10,690
sent a received anything but if you

278
00:14:08,950 --> 00:14:12,430
let's say you had already started

279
00:14:10,690 --> 00:14:14,950
receiving bites or you had already

280
00:14:12,430 --> 00:14:16,300
started sending somehow then you're

281
00:14:14,950 --> 00:14:17,830
adding your frame we're at an unknown

282
00:14:16,300 --> 00:14:19,180
point in the stream of data and you

283
00:14:17,830 --> 00:14:21,070
don't know if it's actually valid to

284
00:14:19,180 --> 00:14:32,890
start parsing where you are it's just a

285
00:14:21,070 --> 00:14:35,860
little bit less safe yes right because

286
00:14:32,890 --> 00:14:37,510
it may need to send a prefix before it

287
00:14:35,860 --> 00:14:38,740
begins framing saying like this is the

288
00:14:37,510 --> 00:14:41,319
type of framing I'm doing to the other

289
00:14:38,740 --> 00:14:42,970
side so that's why it's currently in the

290
00:14:41,320 --> 00:14:44,260
pre connection I think if we wanted it

291
00:14:42,970 --> 00:14:47,410
to not be in the pre connection you'd

292
00:14:44,260 --> 00:14:52,510
need to split out the create connection

293
00:14:47,410 --> 00:14:54,430
from the initiate this kind of preheat

294
00:14:52,510 --> 00:14:56,290
phase where you think your framer and

295
00:14:54,430 --> 00:14:57,939
then activated data right you don't

296
00:14:56,290 --> 00:15:02,560
really need it I guess

297
00:14:57,940 --> 00:15:04,120
well there's an so this is not which are

298
00:15:02,560 --> 00:15:10,810
you talking about the start color the

299
00:15:04,120 --> 00:15:13,480
make it ready no let's start this is the

300
00:15:10,810 --> 00:15:15,520
start event can generally be ignored

301
00:15:13,480 --> 00:15:18,190
it's mainly if you need to send some

302
00:15:15,520 --> 00:15:19,990
like prefix to do like a little extra

303
00:15:18,190 --> 00:15:23,110
thing before you begin framing messages

304
00:15:19,990 --> 00:15:24,670
it's your opportunity to do that or

305
00:15:23,110 --> 00:15:26,770
allocate memory or whatever you need to

306
00:15:24,670 --> 00:15:30,390
do it's you should be very simple or

307
00:15:26,770 --> 00:15:30,390
short yeah

308
00:15:31,180 --> 00:15:36,819
come on and so these I'm a slightly

309
00:15:34,870 --> 00:15:44,380
pleaser then it's given to the framer

310
00:15:36,820 --> 00:15:46,750
not something you have to write so yes

311
00:15:44,380 --> 00:15:49,689
if you are yes these are for people who

312
00:15:46,750 --> 00:15:51,190
build the code that is framing and D

313
00:15:49,690 --> 00:15:59,500
framing it's not for the application

314
00:15:51,190 --> 00:16:01,000
sending/receiving t the model i I heard

315
00:15:59,500 --> 00:16:02,620
of this was the framers would be

316
00:16:01,000 --> 00:16:06,010
implicit based on the Transperth

317
00:16:02,620 --> 00:16:23,290
premises add them explicitly seem seems

318
00:16:06,010 --> 00:16:26,410
like the reasonable thing yes yes right

319
00:16:23,290 --> 00:16:29,560
right and so this PR didn't go as far as

320
00:16:26,410 --> 00:16:31,120
to do that but I agree that that should

321
00:16:29,560 --> 00:16:41,260
be done implicitly for a lot of

322
00:16:31,120 --> 00:16:43,300
protocols that are framed okay as the

323
00:16:41,260 --> 00:16:47,620
framer currently has to be added to the

324
00:16:43,300 --> 00:16:49,779
pre connection ah can we use it still to

325
00:16:47,620 --> 00:16:57,430
influence things like starchiness at the

326
00:16:49,779 --> 00:17:00,400
moment yes so I don't think I have it on

327
00:16:57,430 --> 00:17:04,000
these slides there is a method for a

328
00:17:00,400 --> 00:17:05,740
framer or a protocol to prepend another

329
00:17:04,000 --> 00:17:08,670
protocol or framer on top of it

330
00:17:05,740 --> 00:17:11,620
I think it's called prepend framework

331
00:17:08,670 --> 00:17:13,360
and so what you do is you would do your

332
00:17:11,619 --> 00:17:16,800
start TLS and then you would add on this

333
00:17:13,359 --> 00:17:21,159
other frame around top first

334
00:17:16,800 --> 00:17:22,750
reconnection but this thing yes right

335
00:17:21,160 --> 00:17:24,280
and essentially this all has to happen

336
00:17:22,750 --> 00:17:26,199
before the connection becomes fully

337
00:17:24,280 --> 00:17:28,389
ready because otherwise you don't know

338
00:17:26,199 --> 00:17:29,950
whether or not the application has sent

339
00:17:28,390 --> 00:17:31,950
and received data and you're in some

340
00:17:29,950 --> 00:17:34,950
weird intermediate state between

341
00:17:31,950 --> 00:17:34,950
boundaries

342
00:17:38,230 --> 00:17:48,129
so I think I'm asking a variant of this

343
00:17:41,830 --> 00:17:52,059
topic yes do you still believe that if I

344
00:17:48,129 --> 00:17:53,738
am using taps with a Kramer on one half

345
00:17:52,059 --> 00:17:55,749
of the connection or the other half of

346
00:17:53,739 --> 00:17:57,519
the connection that I think I only need

347
00:17:55,749 --> 00:17:58,989
to do it on one side but it'll still

348
00:17:57,519 --> 00:18:02,350
work fine end to end that there's no

349
00:17:58,989 --> 00:18:03,940
additional semantics in here right yeah

350
00:18:02,350 --> 00:18:06,789
for knowledge that the application can

351
00:18:03,940 --> 00:18:08,470
convey it to the stack and either on the

352
00:18:06,789 --> 00:18:11,408
sender the receivers mm-hm

353
00:18:08,470 --> 00:18:13,869
so you could have a taps or non tap some

354
00:18:11,409 --> 00:18:16,899
alimentation just doing a TCP stream on

355
00:18:13,869 --> 00:18:19,119
one end that does its own HTTP oh yeah

356
00:18:16,899 --> 00:18:25,149
and another side that does a framer with

357
00:18:19,119 --> 00:18:29,320
HTTP but nobody you start stacking yeah

358
00:18:25,149 --> 00:18:31,299
things are listening on ports it's still

359
00:18:29,320 --> 00:18:33,999
the same on the wire and protocol

360
00:18:31,299 --> 00:18:42,029
this is about how we signal to the

361
00:18:33,999 --> 00:18:42,029
application there's nothing on the wire

362
00:18:43,259 --> 00:18:53,679
great if you want to be up signal we go

363
00:18:52,840 --> 00:18:56,168
that's it that is it

364
00:18:53,679 --> 00:18:59,169
I think cently it's an EMT requirement

365
00:18:56,169 --> 00:19:03,129
for taps right we can't we can't require

366
00:18:59,169 --> 00:19:06,730
and both ends right all right so then on

367
00:19:03,129 --> 00:19:08,230
the data path um we have you can get in

368
00:19:06,730 --> 00:19:10,389
there's a new sent message that the

369
00:19:08,230 --> 00:19:11,980
application is trying to send you can

370
00:19:10,389 --> 00:19:14,229
look at that and you can send your own

371
00:19:11,980 --> 00:19:15,730
data to frame it and when you're

372
00:19:14,230 --> 00:19:18,220
receiving you say if there is new

373
00:19:15,730 --> 00:19:20,499
receive data on this connection and then

374
00:19:18,220 --> 00:19:21,940
you can parse it you can say alright I'm

375
00:19:20,499 --> 00:19:24,220
done looking at this and you can deliver

376
00:19:21,940 --> 00:19:26,259
data up that's kind of the basics that

377
00:19:24,220 --> 00:19:28,869
you need to do I don't include all of

378
00:19:26,259 --> 00:19:32,440
the parameters here but they are in the

379
00:19:28,869 --> 00:19:36,879
document so some of the questions that

380
00:19:32,440 --> 00:19:38,289
came up in the course of the PR these

381
00:19:36,879 --> 00:19:41,109
are just kind of like side things that

382
00:19:38,289 --> 00:19:44,259
you want to get our opinions on one I

383
00:19:41,109 --> 00:19:45,580
think my phone got up of like I had

384
00:19:44,259 --> 00:19:48,099
originally been discussing these framers

385
00:19:45,580 --> 00:19:50,408
as like protocols in the stack I have

386
00:19:48,099 --> 00:19:52,059
backed off of that mainly questions like

387
00:19:50,409 --> 00:19:56,190
are they should we be calling them

388
00:19:52,059 --> 00:19:58,719
currently we don't I think that's fine

389
00:19:56,190 --> 00:20:00,809
there was also a question about like how

390
00:19:58,719 --> 00:20:05,710
much are we referring to things as

391
00:20:00,809 --> 00:20:07,239
objects I kept it as objects lab because

392
00:20:05,710 --> 00:20:10,509
most of the API document really does

393
00:20:07,239 --> 00:20:12,820
refer to objects and stuff like that it

394
00:20:10,509 --> 00:20:14,789
does raise a broader question of is this

395
00:20:12,820 --> 00:20:17,349
the way that we want to be referring to

396
00:20:14,789 --> 00:20:19,330
kind of the operational functions that

397
00:20:17,349 --> 00:20:21,460
we have within the document

398
00:20:19,330 --> 00:20:35,949
I think it's clean but if people are

399
00:20:21,460 --> 00:20:41,649
allergic to that that's fine so where

400
00:20:35,950 --> 00:20:51,039
are you pre connection equals parameters

401
00:20:41,649 --> 00:20:53,320
for us okay I mean because we're favored

402
00:20:51,039 --> 00:20:55,029
the object that is a framer is

403
00:20:53,320 --> 00:20:56,889
corresponds to a single connection I

404
00:20:55,029 --> 00:20:58,210
mean you might have a constructor or

405
00:20:56,889 --> 00:21:00,158
factory to these things but there's a

406
00:20:58,210 --> 00:21:08,529
single instance of this per connection

407
00:21:00,159 --> 00:21:12,549
yes so where has your object right so

408
00:21:08,529 --> 00:21:13,989
that's an interesting question so this

409
00:21:12,549 --> 00:21:18,279
has probably brought up in some of the

410
00:21:13,989 --> 00:21:20,349
discussion on the PR the way that the

411
00:21:18,279 --> 00:21:22,330
current PR describes it is that you have

412
00:21:20,349 --> 00:21:24,339
a message frame or object that you

413
00:21:22,330 --> 00:21:30,039
create to represent kind of the abstract

414
00:21:24,339 --> 00:21:33,210
of your framer and all of the functions

415
00:21:30,039 --> 00:21:35,769
here take the connection that's specific

416
00:21:33,210 --> 00:21:39,219
so essentially when you get a start it

417
00:21:35,769 --> 00:21:41,559
means this instance of the framer curves

418
00:21:39,219 --> 00:21:44,979
corresponding to that connection is

419
00:21:41,559 --> 00:21:47,529
being created in the way that we did it

420
00:21:44,979 --> 00:21:50,619
in network framework we actually have it

421
00:21:47,529 --> 00:21:52,450
be that you define your own class that

422
00:21:50,619 --> 00:21:54,580
conforms to a protocol and we

423
00:21:52,450 --> 00:21:57,729
instantiate your object new for every

424
00:21:54,580 --> 00:22:00,039
connection they boil down to the same

425
00:21:57,729 --> 00:22:02,669
thing but they do look semantically a

426
00:22:00,039 --> 00:22:02,669
little different

427
00:22:05,090 --> 00:22:11,100
till isn't about the questions what a

428
00:22:08,910 --> 00:22:13,830
framework is already they are protocols

429
00:22:11,100 --> 00:22:17,100
I think they are one possible way to

430
00:22:13,830 --> 00:22:19,560
implement parts of protocols not the

431
00:22:17,100 --> 00:22:21,510
only way to implement them but I think I

432
00:22:19,560 --> 00:22:23,310
find them really useful when I explain

433
00:22:21,510 --> 00:22:25,650
them to people I usually say they are as

434
00:22:23,310 --> 00:22:27,899
sort of a set of functions that can

435
00:22:25,650 --> 00:22:29,760
transform a message into a byte stream

436
00:22:27,900 --> 00:22:32,340
or vice versa and then maybe do other

437
00:22:29,760 --> 00:22:34,320
things on top so in a de traffic right

438
00:22:32,340 --> 00:22:37,620
now says it's a piece of piece of code I

439
00:22:34,320 --> 00:22:40,290
think that's to implementation of

440
00:22:37,620 --> 00:22:42,239
functioning actions even simple

441
00:22:40,290 --> 00:22:44,280
transformations between message data and

442
00:22:42,240 --> 00:22:46,950
draw transport by transport bytes

443
00:22:44,280 --> 00:22:49,800
I wonder what simple transformation is

444
00:22:46,950 --> 00:22:51,360
right so maybe we should specify this

445
00:22:49,800 --> 00:22:52,860
also doesn't the frame on that you're

446
00:22:51,360 --> 00:22:55,699
specifying does a lot of buffer

447
00:22:52,860 --> 00:22:58,199
management and maybe we can separate the

448
00:22:55,700 --> 00:23:01,260
functionality for the transformation

449
00:22:58,200 --> 00:23:03,210
from the actual a for management right

450
00:23:01,260 --> 00:23:04,830
so maybe we have like multiple things

451
00:23:03,210 --> 00:23:06,630
that the frame others maybe we want to

452
00:23:04,830 --> 00:23:09,810
separate them or also maybe we don't

453
00:23:06,630 --> 00:23:12,240
want to be so specific in the API try to

454
00:23:09,810 --> 00:23:14,159
standardize what no the frame was

455
00:23:12,240 --> 00:23:15,630
implemented right if you could open

456
00:23:14,160 --> 00:23:16,080
issue for what you're discussing that'd

457
00:23:15,630 --> 00:23:18,240
be great

458
00:23:16,080 --> 00:23:19,320
so before we launch into this discussion

459
00:23:18,240 --> 00:23:21,390
I just want to point out that we're at

460
00:23:19,320 --> 00:23:23,520
the end a time for this slide so if this

461
00:23:21,390 --> 00:23:25,080
but this is I think you know we've been

462
00:23:23,520 --> 00:23:26,129
wrestling the framers for a while and so

463
00:23:25,080 --> 00:23:28,500
it's worth talking about this did you

464
00:23:26,130 --> 00:23:30,540
have a lot more in your door so the only

465
00:23:28,500 --> 00:23:32,790
other thing in this this is just for

466
00:23:30,540 --> 00:23:35,520
reference if you look at the slide deck

467
00:23:32,790 --> 00:23:37,230
I have a link to some of our sample code

468
00:23:35,520 --> 00:23:40,020
for what a framers look like in Swift

469
00:23:37,230 --> 00:23:41,760
and I include some of it here so you can

470
00:23:40,020 --> 00:23:42,840
just see how it looks we don't need to

471
00:23:41,760 --> 00:23:46,050
go through that now it's too hard to

472
00:23:42,840 --> 00:23:50,850
read it's a reference for you okay so

473
00:23:46,050 --> 00:23:53,040
let's have some discussion so Eric's

474
00:23:50,850 --> 00:23:56,580
near apple just to what Reese was saying

475
00:23:53,040 --> 00:23:59,399
I think I like that view of the problem

476
00:23:56,580 --> 00:24:01,590
in the a framer at its most basic is

477
00:23:59,400 --> 00:24:03,030
kind of serializing and deserializing a

478
00:24:01,590 --> 00:24:05,730
byte stream into something that's

479
00:24:03,030 --> 00:24:06,899
messages and then if you want to go

480
00:24:05,730 --> 00:24:08,580
further with that and have it do

481
00:24:06,900 --> 00:24:10,640
something semantically with those

482
00:24:08,580 --> 00:24:12,810
messages like maybe a framer would do a

483
00:24:10,640 --> 00:24:14,760
handshake for you at the beginning of

484
00:24:12,810 --> 00:24:16,260
some protocol like that's kind of up to

485
00:24:14,760 --> 00:24:18,480
you if you want to define that but you

486
00:24:16,260 --> 00:24:19,920
also have the thing that the client

487
00:24:18,480 --> 00:24:21,660
application could read out that to the

488
00:24:19,920 --> 00:24:23,430
needed message and do the logic for

489
00:24:21,660 --> 00:24:24,840
engine but I think that's the next way

490
00:24:23,430 --> 00:24:27,180
to communicate it to people because it's

491
00:24:24,840 --> 00:24:28,530
pretty easy to grasp like I've got this

492
00:24:27,180 --> 00:24:30,600
logical message I would like it to be a

493
00:24:28,530 --> 00:24:35,100
live stream and from there the rest of

494
00:24:30,600 --> 00:24:38,550
it kind of falls out it's good so

495
00:24:35,100 --> 00:24:40,709
towards the second question I have a

496
00:24:38,550 --> 00:24:44,909
hard time understanding the PR at the

497
00:24:40,710 --> 00:24:48,120
first place for me much easier when I've

498
00:24:44,910 --> 00:24:52,860
sort of the framer object as a frame of

499
00:24:48,120 --> 00:24:55,050
buffer manager and then having different

500
00:24:52,860 --> 00:24:56,939
object communicating with the buffer

501
00:24:55,050 --> 00:25:01,350
manager but this brings me to the

502
00:24:56,940 --> 00:25:04,230
question whether the actual API but it's

503
00:25:01,350 --> 00:25:07,139
exposed at the moment is too much

504
00:25:04,230 --> 00:25:10,530
focused on the buffer management and a

505
00:25:07,140 --> 00:25:15,870
little bit less focused on how to

506
00:25:10,530 --> 00:25:18,990
compose multiple framers and how to

507
00:25:15,870 --> 00:25:21,449
really spec these concepts or how to

508
00:25:18,990 --> 00:25:26,970
build out these concepts this is this is

509
00:25:21,450 --> 00:25:30,930
my problem with this API so by the way I

510
00:25:26,970 --> 00:25:32,670
like what I've seen flickering smooth ER

511
00:25:30,930 --> 00:25:37,650
from there and the connections fragment

512
00:25:32,670 --> 00:25:41,670
unlike this much better than you like

513
00:25:37,650 --> 00:25:44,460
which was better connections was found

514
00:25:41,670 --> 00:25:48,360
having a protocol class that implements

515
00:25:44,460 --> 00:25:50,130
the framer itself okay but that's good

516
00:25:48,360 --> 00:25:54,270
that was a little bit more what my

517
00:25:50,130 --> 00:26:00,900
initial PR was trying to get at so just

518
00:25:54,270 --> 00:26:03,300
to clarify what you mean so the data

519
00:26:00,900 --> 00:26:05,640
path does you know involve some buffer

520
00:26:03,300 --> 00:26:07,560
management and to be clear the part that

521
00:26:05,640 --> 00:26:10,710
the taps and lunation needs to provide

522
00:26:07,560 --> 00:26:12,980
is the ability to you know interact with

523
00:26:10,710 --> 00:26:15,630
the data path so there will be this

524
00:26:12,980 --> 00:26:19,200
buffer management so I mean do we agree

525
00:26:15,630 --> 00:26:21,810
that these kind of functions just like

526
00:26:19,200 --> 00:26:24,660
sending and receiving will exist kind of

527
00:26:21,810 --> 00:26:26,730
in this form I'll show you whether they

528
00:26:24,660 --> 00:26:28,440
really have to exist in this form if

529
00:26:26,730 --> 00:26:29,370
you're going for a much more actual

530
00:26:28,440 --> 00:26:31,860
language earth

531
00:26:29,370 --> 00:26:34,830
think about that you might want to push

532
00:26:31,860 --> 00:26:37,469
trainers for example down into a haka

533
00:26:34,830 --> 00:26:39,540
offloading or something like the little

534
00:26:37,470 --> 00:26:43,080
supplementation which have something

535
00:26:39,540 --> 00:26:45,629
framing like that's implemented EPP F if

536
00:26:43,080 --> 00:26:48,750
you want to enable this kind of stuff

537
00:26:45,630 --> 00:26:50,490
the buffer management might look quite

538
00:26:48,750 --> 00:26:52,950
differently then that's the reason why I

539
00:26:50,490 --> 00:26:55,830
have a little bit of a problem that I

540
00:26:52,950 --> 00:26:57,510
think it's a nice way it's one nice way

541
00:26:55,830 --> 00:26:59,220
of implementing the finger but I'm not

542
00:26:57,510 --> 00:27:04,010
sure whether it's the only way of

543
00:26:59,220 --> 00:27:04,010
implementing I see I see

544
00:27:04,760 --> 00:27:12,000
right until to to that end we had define

545
00:27:09,540 --> 00:27:13,649
is this is a way to do it you must have

546
00:27:12,000 --> 00:27:15,390
at least these capabilities if you want

547
00:27:13,650 --> 00:27:20,640
to express it differently in your

548
00:27:15,390 --> 00:27:22,290
implementation that is fine partially

549
00:27:20,640 --> 00:27:25,320
gets down to the reusability of code

550
00:27:22,290 --> 00:27:27,870
though like if you know we would ideally

551
00:27:25,320 --> 00:27:30,750
want someone who wrote a basic

552
00:27:27,870 --> 00:27:32,489
implementation of how to do HTTP framing

553
00:27:30,750 --> 00:27:34,410
on top of something to be able to be

554
00:27:32,490 --> 00:27:36,000
somewhat portable and so having

555
00:27:34,410 --> 00:27:38,120
something that is common is useful in

556
00:27:36,000 --> 00:27:38,120
that regard

557
00:27:46,040 --> 00:27:50,040
okay this is the way how you add friend

558
00:27:48,630 --> 00:27:52,770
to a connection or through a free

559
00:27:50,040 --> 00:27:53,970
connection and then have okay this is

560
00:27:52,770 --> 00:27:55,260
how you implement the framer

561
00:27:53,970 --> 00:27:57,059
and if you want to have an

562
00:27:55,260 --> 00:27:59,100
implementation specific other way to

563
00:27:57,059 --> 00:28:00,540
implement framers you still have some

564
00:27:59,100 --> 00:28:02,309
kind of frame representation you can

565
00:28:00,540 --> 00:28:04,740
have and whether this comes from a

566
00:28:02,309 --> 00:28:07,770
library or is compiled from EBP effort

567
00:28:04,740 --> 00:28:10,559
something else that's not portable

568
00:28:07,770 --> 00:28:14,190
that's fine still you have common way to

569
00:28:10,559 --> 00:28:17,540
at this yes I think that we should leave

570
00:28:14,190 --> 00:28:19,950
that open trim they just do if they want

571
00:28:17,540 --> 00:28:21,600
okay let's try to move through the queue

572
00:28:19,950 --> 00:28:25,559
quickly and then cause at this

573
00:28:21,600 --> 00:28:29,309
discussion what maybe this is what you

574
00:28:25,559 --> 00:28:30,870
just said but I suggest moving parts of

575
00:28:29,309 --> 00:28:33,570
just a frame implementation to the

576
00:28:30,870 --> 00:28:35,580
implementation drop and heap the way

577
00:28:33,570 --> 00:28:37,350
that the application adds the framer to

578
00:28:35,580 --> 00:28:39,270
the pre connection and the set of

579
00:28:37,350 --> 00:28:41,520
functionality that the framer should

580
00:28:39,270 --> 00:28:43,110
implement in the

581
00:28:41,520 --> 00:28:45,690
put cutter stuff in the implementation

582
00:28:43,110 --> 00:28:49,189
draft or maybe a separate draft if this

583
00:28:45,690 --> 00:28:52,380
really grows out of proportion

584
00:28:49,190 --> 00:28:55,050
yam extrication the same way having

585
00:28:52,380 --> 00:28:57,510
tried to implement framers or partially

586
00:28:55,050 --> 00:29:01,530
implemented this newer model of remiz a

587
00:28:57,510 --> 00:29:01,980
lot of the way the API works is like for

588
00:29:01,530 --> 00:29:03,600
example

589
00:29:01,980 --> 00:29:05,700
- it's really painful to do it like that

590
00:29:03,600 --> 00:29:07,830
wait it would be much easier to do and I

591
00:29:05,700 --> 00:29:09,390
think that's like an implementation

592
00:29:07,830 --> 00:29:11,639
specific like the communication between

593
00:29:09,390 --> 00:29:13,860
the framer and the connection I don't

594
00:29:11,640 --> 00:29:16,470
think that has to be standardized in the

595
00:29:13,860 --> 00:29:18,929
API I think part of it should be moved

596
00:29:16,470 --> 00:29:22,470
to implementation asturias head on set a

597
00:29:18,930 --> 00:29:24,420
draft and we talked about the brigde x1

598
00:29:22,470 --> 00:29:26,130
right there's a lot of implications from

599
00:29:24,420 --> 00:29:28,230
the way this works so if we want to

600
00:29:26,130 --> 00:29:30,450
standardize the different way we hoped

601
00:29:28,230 --> 00:29:33,420
would have read like a lot of comments

602
00:29:30,450 --> 00:29:34,500
to the implementation bar like a special

603
00:29:33,420 --> 00:29:36,150
amount because there's so many

604
00:29:34,500 --> 00:29:38,310
implications on how the rest of the

605
00:29:36,150 --> 00:29:40,050
connection works we talked about

606
00:29:38,310 --> 00:29:42,720
received at the next length is basically

607
00:29:40,050 --> 00:29:45,000
somewhat becoming irrelevant with frame

608
00:29:42,720 --> 00:29:47,340
as active because the frame is going to

609
00:29:45,000 --> 00:29:49,410
frame how much they tied once and how

610
00:29:47,340 --> 00:29:55,649
much the connection and application set

611
00:29:49,410 --> 00:30:03,620
rigid frame high configures economic

612
00:29:55,650 --> 00:30:28,380
agreeing with syriza the what we have

613
00:30:03,620 --> 00:30:30,030
it's possibly - exactly so one thing

614
00:30:28,380 --> 00:30:32,540
before you just so I can comment so you

615
00:30:30,030 --> 00:30:32,540
can respond

616
00:30:33,750 --> 00:30:39,630
great yeah I'm agreeing as well what

617
00:30:38,430 --> 00:30:42,630
what that means is that you essentially

618
00:30:39,630 --> 00:30:45,360
what we are left with in the API just to

619
00:30:42,630 --> 00:30:47,790
clarify is we have to have a way to add

620
00:30:45,360 --> 00:30:50,310
it and we have to have a way to send

621
00:30:47,790 --> 00:30:51,960
information to it so this is the part

622
00:30:50,310 --> 00:30:54,800
I'd like a little bit more input in

623
00:30:51,960 --> 00:30:54,800
scrutiny on because

624
00:30:59,380 --> 00:31:05,690
yes oh yeah yeah we should we'll

625
00:31:02,960 --> 00:31:07,580
describe what it does and then the

626
00:31:05,690 --> 00:31:11,120
implementation can say this is one way

627
00:31:07,580 --> 00:31:13,129
to do it one of the issues that was

628
00:31:11,120 --> 00:31:15,649
raised for adding information to the

629
00:31:13,130 --> 00:31:18,070
context is like it's a little bit vague

630
00:31:15,650 --> 00:31:21,710
and I think in general we could have

631
00:31:18,070 --> 00:31:23,889
better text around like how do we when

632
00:31:21,710 --> 00:31:26,750
we were sending something how do we tell

633
00:31:23,890 --> 00:31:29,000
IP or UDP what options to send how you

634
00:31:26,750 --> 00:31:30,410
tell a framer to send it's not super

635
00:31:29,000 --> 00:31:32,540
rigorous and I think that's the part

636
00:31:30,410 --> 00:31:36,160
that is going to be most important if

637
00:31:32,540 --> 00:31:36,159
this is the only thing that gets exposed

638
00:31:37,570 --> 00:31:40,820
so you have these questions up here it's

639
00:31:39,530 --> 00:31:45,230
all hands in the pipe right internal uh

640
00:31:40,820 --> 00:31:49,010
no not anymore

641
00:31:45,230 --> 00:31:52,370
not necessary not really not necessary

642
00:31:49,010 --> 00:31:53,420
cool we can move on um so yeah message

643
00:31:52,370 --> 00:31:55,520
traders are not protocols they're a

644
00:31:53,420 --> 00:31:57,560
special kind of thing um you know that

645
00:31:55,520 --> 00:31:59,210
we we have this idea that we want to

646
00:31:57,560 --> 00:32:01,280
kind of like generalize these things to

647
00:31:59,210 --> 00:32:02,960
the objects that we can on I think

648
00:32:01,280 --> 00:32:04,820
that's dangerous because if we do that

649
00:32:02,960 --> 00:32:06,380
we're gonna use it you shouldn't we

650
00:32:04,820 --> 00:32:11,050
should we should give ourselves like a

651
00:32:06,380 --> 00:32:14,390
foot gun cuz it gets really tempting and

652
00:32:11,050 --> 00:32:17,389
yeah so so you're asking question if you

653
00:32:14,390 --> 00:32:21,080
go back to the Eco back to yeah Here I

654
00:32:17,390 --> 00:32:26,810
am about whether there is a better way

655
00:32:21,080 --> 00:32:29,360
to represent how to give metadata to the

656
00:32:26,810 --> 00:32:31,040
frame uh I think if you want to do a

657
00:32:29,360 --> 00:32:32,510
better way to give metadata in the

658
00:32:31,040 --> 00:32:34,060
framework then you have to go and have

659
00:32:32,510 --> 00:32:36,260
this whole object model for what those

660
00:32:34,060 --> 00:32:37,790
metadata objects look like and then the

661
00:32:36,260 --> 00:32:41,060
metadata objects and the frame objects

662
00:32:37,790 --> 00:32:43,700
are I think that's this is the point at

663
00:32:41,060 --> 00:32:47,330
which we can say like is an abstract API

664
00:32:43,700 --> 00:32:48,260
but like too much abstractions is leads

665
00:32:47,330 --> 00:32:52,909
to something that's sort of like

666
00:32:48,260 --> 00:32:55,220
unimplemented lis abstract and key value

667
00:32:52,910 --> 00:32:58,700
pairs are kind of we understand them we

668
00:32:55,220 --> 00:33:02,780
know how they work yeah this is this is

669
00:32:58,700 --> 00:33:03,610
just this is a little bit ugly but it's

670
00:33:02,780 --> 00:33:05,408
a

671
00:33:03,610 --> 00:33:10,869
completely acceptable not prejudiced you

672
00:33:05,409 --> 00:33:12,100
go to the next slide yeah this is this

673
00:33:10,869 --> 00:33:14,019
seems like it can go in the

674
00:33:12,100 --> 00:33:19,480
implementation draft if you go to the

675
00:33:14,019 --> 00:33:23,730
next slide dance receive cursor I just I

676
00:33:19,480 --> 00:33:23,730
I've done too much with like that

677
00:33:24,330 --> 00:33:30,668
database libraries if the board cursor

678
00:33:26,799 --> 00:33:32,049
just makes me and yeah it's like so it's

679
00:33:30,669 --> 00:33:34,029
a fill point here is that yeah there's a

680
00:33:32,049 --> 00:33:39,730
lot of languages in which you know a

681
00:33:34,029 --> 00:33:42,100
single threaded cursor is not so I would

682
00:33:39,730 --> 00:33:44,739
not even put this in the I would maybe

683
00:33:42,100 --> 00:33:47,019
put this is an example and yes can you

684
00:33:44,739 --> 00:33:48,220
comment a draft but but make it very

685
00:33:47,019 --> 00:33:50,590
clear there's a bunch of different ways

686
00:33:48,220 --> 00:34:26,530
to do this and I think that it's

687
00:33:50,590 --> 00:34:27,609
absolutely correct to say and yes if we

688
00:34:26,530 --> 00:34:38,049
get another one for like the Python

689
00:34:27,609 --> 00:34:40,210
implementation great for exam that thing

690
00:34:38,049 --> 00:34:41,649
with the TLB this completely unnecessary

691
00:34:40,210 --> 00:34:43,720
in right because the date object is

692
00:34:41,649 --> 00:34:45,308
typeless and that you hand over to the

693
00:34:43,719 --> 00:34:51,189
send anyway so it can already include

694
00:34:45,309 --> 00:34:54,450
its own make the data query here in

695
00:34:51,190 --> 00:35:00,130
minutes comments about refactoring this

696
00:34:54,449 --> 00:35:03,960
into the implementation and okay great

697
00:35:00,130 --> 00:35:03,960
awesome okay Thank You Tommy

698
00:35:14,050 --> 00:35:36,840
none take it aside okay John tongue yeah

699
00:35:30,250 --> 00:35:36,840
sort of somehow it's not rolled halfway

700
00:35:37,740 --> 00:35:46,270
training yeah all right

701
00:35:41,980 --> 00:35:48,210
I'm I'm I'm quite glad you know how this

702
00:35:46,270 --> 00:35:50,530
frame our discussion has turned out I

703
00:35:48,210 --> 00:35:51,970
would have said you know this kind of

704
00:35:50,530 --> 00:35:54,070
stuff that we're doing now is way less

705
00:35:51,970 --> 00:35:57,660
important so I mean this should be a

706
00:35:54,070 --> 00:35:57,660
quick and easy one actually let's see

707
00:35:59,040 --> 00:36:06,570
it's much smaller question in the frame

708
00:36:02,530 --> 00:36:06,570
[Laughter]

709
00:36:07,170 --> 00:36:15,970
sorry okay see I'm starting off easy

710
00:36:11,970 --> 00:36:17,740
first question is is anybody that really

711
00:36:15,970 --> 00:36:21,069
really hates the idea of us allowing

712
00:36:17,740 --> 00:36:24,509
that we can specify that somebody can

713
00:36:21,070 --> 00:36:26,890
specify a specific protocol

714
00:36:24,510 --> 00:36:31,150
Brian Trammell with a philosophical

715
00:36:26,890 --> 00:36:33,240
question can you define and allow well

716
00:36:31,150 --> 00:36:35,800
sorry can you define the word allowed

717
00:36:33,240 --> 00:36:38,439
there are two ways to allow this rate

718
00:36:35,800 --> 00:36:41,770
you can essentially say either in the

719
00:36:38,440 --> 00:36:44,170
abstract API we have a way to do this

720
00:36:41,770 --> 00:36:45,730
and in order to be compliant with taps

721
00:36:44,170 --> 00:36:49,090
whatever that means you must have a way

722
00:36:45,730 --> 00:36:50,860
to do this yes or you can say hey if

723
00:36:49,090 --> 00:36:52,330
you're implementing a taps tag but you

724
00:36:50,860 --> 00:36:54,100
might want to do this and the only

725
00:36:52,330 --> 00:36:55,180
really good reason I can see for doing

726
00:36:54,100 --> 00:36:57,460
this is if you're essentially doing

727
00:36:55,180 --> 00:37:01,120
recursive house raid so you're building

728
00:36:57,460 --> 00:37:03,430
an L 4 plus protocol like you're gonna

729
00:37:01,120 --> 00:37:05,230
build web sockets as a protocol that

730
00:37:03,430 --> 00:37:07,120
you're going to make available in taps

731
00:37:05,230 --> 00:37:09,400
built on top of its own taps

732
00:37:07,120 --> 00:37:12,069
implementation where you absolutely must

733
00:37:09,400 --> 00:37:14,050
then specify that this new style has to

734
00:37:12,070 --> 00:37:16,780
live on top of this over stack

735
00:37:14,050 --> 00:37:20,320
does that make any sense I we need white

736
00:37:16,780 --> 00:37:22,000
boards for this I think um like your

737
00:37:20,320 --> 00:37:24,550
there are two reasons to basically say I

738
00:37:22,000 --> 00:37:26,770
want to explicitly specify your protocol

739
00:37:24,550 --> 00:37:28,720
right okay you're a lazy application

740
00:37:26,770 --> 00:37:30,640
developer and you just went one way you

741
00:37:28,720 --> 00:37:32,680
want and you know me you wanna in you

742
00:37:30,640 --> 00:37:35,230
rights get on stack stack overflow that

743
00:37:32,680 --> 00:37:36,970
says just flip the TCP switch on and

744
00:37:35,230 --> 00:37:39,790
everything will work fine these are the

745
00:37:36,970 --> 00:37:47,649
people that I think we should support no

746
00:37:39,790 --> 00:37:49,029
I mean I because they exist right there

747
00:37:47,650 --> 00:37:51,940
are two ways to roll on this one is you

748
00:37:49,030 --> 00:37:53,470
put in the abstract API yes the other

749
00:37:51,940 --> 00:37:55,720
thing is you say hey if you want to do

750
00:37:53,470 --> 00:37:57,310
this then do some implementation

751
00:37:55,720 --> 00:37:58,689
specific way of doing it there's the

752
00:37:57,310 --> 00:38:01,150
point at which you're going a tap to

753
00:37:58,690 --> 00:38:02,589
application that you want to force a

754
00:38:01,150 --> 00:38:04,210
protocol on you're kind of getting into

755
00:38:02,589 --> 00:38:06,009
the internals of the system anyway and

756
00:38:04,210 --> 00:38:12,490
we just kind of say yeah you can you can

757
00:38:06,010 --> 00:38:14,020
do that but do it on the side I'm still

758
00:38:12,490 --> 00:38:15,868
struggling to understand the second

759
00:38:14,020 --> 00:38:17,890
version the second version sounds like

760
00:38:15,869 --> 00:38:20,500
you're trying to make it harder for be

761
00:38:17,890 --> 00:38:22,359
able to do it yeah I mean okay

762
00:38:20,500 --> 00:38:55,540
discouraged yes but discouraged by

763
00:38:22,359 --> 00:39:07,569
making it hard to use Michael yeah you

764
00:38:55,540 --> 00:39:09,240
can you tell us often we you you say on

765
00:39:07,570 --> 00:39:14,609
walk and a point with this protocol and

766
00:39:09,240 --> 00:39:14,609
then your API has to let you do this

767
00:39:16,420 --> 00:39:23,869
yeah so don't make impossibly hard yeah

768
00:39:20,569 --> 00:39:26,029
I mean I agree with that I mean I think

769
00:39:23,869 --> 00:39:27,739
discouraged in the sense of writing that

770
00:39:26,029 --> 00:39:29,150
you know this is not a encouraged way to

771
00:39:27,739 --> 00:39:32,329
do it and it shouldn't be like the

772
00:39:29,150 --> 00:39:38,079
obvious default way to do it but making

773
00:39:32,329 --> 00:39:38,079
it hard on purpose seems weird okay yes

774
00:39:47,890 --> 00:40:06,700
yeah we need to be able to specify yes

775
00:40:07,089 --> 00:40:11,690
yeah I'm trying to see if there are

776
00:40:09,170 --> 00:40:14,329
people that have an issue with that like

777
00:40:11,690 --> 00:40:23,869
if we if we all simply agree with this

778
00:40:14,329 --> 00:40:31,940
which I hoped yes exactly that's the

779
00:40:23,869 --> 00:40:36,499
proposal this is so yes I think we

780
00:40:31,940 --> 00:40:39,499
should say that it should I should allow

781
00:40:36,499 --> 00:40:42,288
you to specify protocol but we should

782
00:40:39,499 --> 00:40:45,499
not so we should say your implementation

783
00:40:42,289 --> 00:40:47,479
should allow you to do this I must but

784
00:40:45,499 --> 00:40:49,308
you should specifically say that it is

785
00:40:47,479 --> 00:40:50,859
up to the implementation how it wants to

786
00:40:49,309 --> 00:40:52,910
express this and that it is not

787
00:40:50,859 --> 00:40:54,469
standardizing because I think if we do

788
00:40:52,910 --> 00:40:57,348
try to standardize how it is then we

789
00:40:54,469 --> 00:40:59,749
need a registry of all protocol is that

790
00:40:57,349 --> 00:41:02,529
you can enumerate explicitly we don't

791
00:40:59,749 --> 00:41:04,700
want to get into that right exactly so

792
00:41:02,529 --> 00:41:05,930
we should allow you to specify it

793
00:41:04,700 --> 00:41:08,868
somehow

794
00:41:05,930 --> 00:41:11,719
it's up to you and I think one of the

795
00:41:08,869 --> 00:41:15,079
reasons in favor of a lot of people to

796
00:41:11,719 --> 00:41:17,719
do it some way into this specific way is

797
00:41:15,079 --> 00:41:19,660
if we do not then there is I think more

798
00:41:17,719 --> 00:41:23,079
lenient someone who really needs to

799
00:41:19,660 --> 00:41:26,558
specify something specifically we'll

800
00:41:23,079 --> 00:41:29,020
kind of like ossify around using certain

801
00:41:26,559 --> 00:41:31,510
transport selection options

802
00:41:29,020 --> 00:41:35,050
to always get tcp and we change that

803
00:41:31,510 --> 00:41:39,150
they'll be upset yeah so let's encourage

804
00:41:35,050 --> 00:41:43,660
and have the standard way he always

805
00:41:39,150 --> 00:41:45,820
protocol agnostic yeah regarding the

806
00:41:43,660 --> 00:41:47,319
point of not standardizing it i mean

807
00:41:45,820 --> 00:41:48,700
there are you know the next slides talk

808
00:41:47,320 --> 00:41:52,030
about these concrete proposals of

809
00:41:48,700 --> 00:41:55,779
profiles so this is a bit it's not in

810
00:41:52,030 --> 00:41:58,540
that direction right or whether you take

811
00:41:55,780 --> 00:42:04,570
them as it okay

812
00:41:58,540 --> 00:42:06,520
yes sir and to me and for the typical

813
00:42:04,570 --> 00:42:08,920
use case of this would be that you want

814
00:42:06,520 --> 00:42:10,810
to write your application in a tax

815
00:42:08,920 --> 00:42:13,810
compliant way but you know that at this

816
00:42:10,810 --> 00:42:15,310
point other and your support protocol so

817
00:42:13,810 --> 00:42:19,810
you can make it more efficient by also

818
00:42:15,310 --> 00:42:28,060
saying that you know even just for

819
00:42:19,810 --> 00:42:30,580
testing right yeah so a quick chairs

820
00:42:28,060 --> 00:42:33,910
interrupt here so michael has eight

821
00:42:30,580 --> 00:42:35,980
minutes left in his slot I clearly got

822
00:42:33,910 --> 00:42:37,629
something to say he said it was short we

823
00:42:35,980 --> 00:42:39,940
should let him get through it so the

824
00:42:37,630 --> 00:42:40,450
question is so near yet you're the next

825
00:42:39,940 --> 00:42:51,490
in line

826
00:42:40,450 --> 00:42:53,140
ask yourself shouldn't wait because

827
00:42:51,490 --> 00:42:54,549
otherwise it's just too easy to like you

828
00:42:53,140 --> 00:42:56,319
have an existing application and then

829
00:42:54,550 --> 00:42:58,359
you just think the easiest way to move

830
00:42:56,320 --> 00:43:00,369
it over it's just saying pcbs TTP's

831
00:42:58,359 --> 00:43:02,170
appear a so it should be the prepare

832
00:43:00,369 --> 00:43:04,000
denied it did agree to this approach

833
00:43:02,170 --> 00:43:06,390
where we say it should be possible but

834
00:43:04,000 --> 00:43:09,130
you don't specify the next wave hard

835
00:43:06,390 --> 00:43:11,020
well I mean it's gonna be hard and dad

836
00:43:09,130 --> 00:43:12,490
you have to change it to ride two again

837
00:43:11,020 --> 00:43:14,470
you have to ride against a new API

838
00:43:12,490 --> 00:43:15,759
anyway right so it's it's not it's not

839
00:43:14,470 --> 00:43:17,560
like you have an application written on

840
00:43:15,760 --> 00:43:20,290
sockets you just bought it and it runs

841
00:43:17,560 --> 00:43:26,320
because it's not sockets anymore so

842
00:43:20,290 --> 00:43:27,759
that's already hard deported to the way

843
00:43:26,320 --> 00:43:30,430
where your selective protocol then

844
00:43:27,760 --> 00:43:36,040
pointing it to a generic solution

845
00:43:30,430 --> 00:43:38,020
yeah there is a you know I think the

846
00:43:36,040 --> 00:43:39,880
easiest way to discourage it efficiently

847
00:43:38,020 --> 00:43:42,310
is to make profile easy to use so

848
00:43:39,880 --> 00:43:42,850
everyone will use profiles and most

849
00:43:42,310 --> 00:43:49,060
people who

850
00:43:42,850 --> 00:43:49,990
yeah we just disagree with that yeah can

851
00:43:49,060 --> 00:43:52,450
I see the next slide please

852
00:43:49,990 --> 00:43:53,830
yeah yeah exactly I saw that maybe maybe

853
00:43:52,450 --> 00:43:56,980
yeah I'm getting the feeling that I

854
00:43:53,830 --> 00:43:59,200
should have see this is this is let me

855
00:43:56,980 --> 00:44:03,360
try and help all what is because that is

856
00:43:59,200 --> 00:44:03,359
the actual proposal on the table I think

857
00:44:03,390 --> 00:44:16,089
and yeah it's probably more more useful

858
00:44:08,800 --> 00:44:20,440
to discuss this so who has Red Bull

859
00:44:16,090 --> 00:44:29,260
requested okay one two couple of people

860
00:44:20,440 --> 00:44:31,780
three yeah okay so this is a polyp or

861
00:44:29,260 --> 00:44:35,980
requested that describe that describes

862
00:44:31,780 --> 00:44:37,720
profiles and describes you know you

863
00:44:35,980 --> 00:44:40,330
would choose a protocol by way of

864
00:44:37,720 --> 00:44:47,609
choosing a profile that matches on so

865
00:44:40,330 --> 00:44:49,750
for instance TCP yeah yeah so discuss

866
00:44:47,610 --> 00:44:51,550
actually I originally got in line to say

867
00:44:49,750 --> 00:44:54,160
that I had almost completely changed my

868
00:44:51,550 --> 00:44:56,380
mind on what I did before even though

869
00:44:54,160 --> 00:45:02,589
nobody understood it that's probably the

870
00:44:56,380 --> 00:45:04,600
cold medicine talking I so I continue to

871
00:45:02,590 --> 00:45:05,890
really dislike the forest transport I

872
00:45:04,600 --> 00:45:08,170
like the fact that it's called force

873
00:45:05,890 --> 00:45:10,299
because it fine it kind of feels like

874
00:45:08,170 --> 00:45:11,170
you know that makes it feel a little bit

875
00:45:10,300 --> 00:45:13,360
discouraged

876
00:45:11,170 --> 00:45:14,950
I think we should make it feel a little

877
00:45:13,360 --> 00:45:16,570
bit more discouraged than that I like

878
00:45:14,950 --> 00:45:17,980
maybe putting like it's gonna be in the

879
00:45:16,570 --> 00:45:19,270
document that in shaft like you know we

880
00:45:17,980 --> 00:45:22,980
should use the blink tag you say don't

881
00:45:19,270 --> 00:45:27,450
do this that's a different a are yeah I

882
00:45:22,980 --> 00:45:31,090
guess we're so probably just yes I think

883
00:45:27,450 --> 00:45:33,220
and I was really confused by it because

884
00:45:31,090 --> 00:45:35,020
they seemed like alternate proposals to

885
00:45:33,220 --> 00:45:39,220
do the same thing except I think that's

886
00:45:35,020 --> 00:45:41,170
what - yeah but they were but yeah I'm a

887
00:45:39,220 --> 00:45:50,020
baby Phillips should go ahead and

888
00:45:41,170 --> 00:45:53,620
explain Corey wanted for the second one

889
00:45:50,020 --> 00:45:55,470
for before half but if I don't make it I

890
00:45:53,620 --> 00:46:00,210
think they're both

891
00:45:55,470 --> 00:46:03,089
puzzles are not alternatives but apps to

892
00:46:00,210 --> 00:46:04,890
each other so the profiles is like oh we

893
00:46:03,090 --> 00:46:07,080
have this kind of news cases don't make

894
00:46:04,890 --> 00:46:09,480
it so hard then you have to set a bunch

895
00:46:07,080 --> 00:46:11,580
of properties so we have a shortcut to

896
00:46:09,480 --> 00:46:13,260
say and I want to reliable stream in

897
00:46:11,580 --> 00:46:16,009
order speed protocol thank you and

898
00:46:13,260 --> 00:46:19,230
whether it's TCP Oh quick I don't mind

899
00:46:16,010 --> 00:46:21,510
and we have the other one to say I'm

900
00:46:19,230 --> 00:46:23,910
implementing this specific protocol that

901
00:46:21,510 --> 00:46:27,060
uses in some of its internal state

902
00:46:23,910 --> 00:46:29,670
machine fields from TCP I know it's

903
00:46:27,060 --> 00:46:31,950
shitty protocol analogy but I really

904
00:46:29,670 --> 00:46:34,770
need TC deal because of this reason so

905
00:46:31,950 --> 00:46:39,379
please force TCP or for TCP or UDP

906
00:46:34,770 --> 00:46:41,430
because we have badness for those and

907
00:46:39,380 --> 00:46:43,800
therefore I think this are not

908
00:46:41,430 --> 00:46:46,259
alternatives but these are two ways one

909
00:46:43,800 --> 00:46:48,900
is saying catch the common case have a

910
00:46:46,260 --> 00:46:51,390
profit then I don't need to add does

911
00:46:48,900 --> 00:46:54,480
lock properties and the other one is the

912
00:46:51,390 --> 00:46:56,520
Elm is the reason I really have to force

913
00:46:54,480 --> 00:46:58,080
the protocol and this is a rare case and

914
00:46:56,520 --> 00:47:01,589
this is discourage you please don't use

915
00:46:58,080 --> 00:47:04,770
it and we get the technical compilers

916
00:47:01,589 --> 00:47:06,779
thank you so what about maybe that's

917
00:47:04,770 --> 00:47:09,000
stupid what about a profile that just

918
00:47:06,780 --> 00:47:11,460
has one property in it and it's grant

919
00:47:09,000 --> 00:47:14,099
the property name is protocol and the

920
00:47:11,460 --> 00:47:17,480
value is TCP if I want to pick TCP so

921
00:47:14,099 --> 00:47:17,480
I'm using the same machinery and it

922
00:47:22,400 --> 00:47:26,640
shouldn't be protocol like you're

923
00:47:24,570 --> 00:47:33,060
terrible guy want to pick a protocol

924
00:47:26,640 --> 00:47:35,460
should be the name yeah yeah technically

925
00:47:33,060 --> 00:47:39,029
I mean that could be just a profile

926
00:47:35,460 --> 00:47:40,470
right I I don't dislike that as much as

927
00:47:39,030 --> 00:47:42,270
I thought I was going to when you first

928
00:47:40,470 --> 00:47:44,759
started saying it that's that's actually

929
00:47:42,270 --> 00:47:45,990
a pretty good idea because I think I do

930
00:47:44,760 --> 00:47:48,270
continue to think that the main reason

931
00:47:45,990 --> 00:47:49,560
that you would end up like forcing a

932
00:47:48,270 --> 00:47:51,359
protocol is because you're doing some

933
00:47:49,560 --> 00:47:52,770
low-level stuff right which is why I

934
00:47:51,359 --> 00:47:55,109
like to turn on the state for this

935
00:47:52,770 --> 00:47:58,050
because that's what like both Rosten go

936
00:47:55,109 --> 00:47:59,759
uses there you're you're mucking about

937
00:47:58,050 --> 00:48:03,839
underneath the compiler and bad things

938
00:47:59,760 --> 00:48:05,160
are going to happen to you okay Phillip

939
00:48:03,839 --> 00:48:06,900
yeah I think there's a community people

940
00:48:05,160 --> 00:48:08,250
who don't think that's unsafe they think

941
00:48:06,900 --> 00:48:08,580
that's absolutely required don't

942
00:48:08,250 --> 00:48:10,110
remember

943
00:48:08,580 --> 00:48:11,730
the woman who came here in the early

944
00:48:10,110 --> 00:48:14,070
days of taps who was talking about like

945
00:48:11,730 --> 00:48:15,870
these highly optimized TCPS and how can

946
00:48:14,070 --> 00:48:17,310
I make how can i how can tap support

947
00:48:15,870 --> 00:48:18,930
this I think that's what this is

948
00:48:17,310 --> 00:48:20,509
allowing her to do why are you calling

949
00:48:18,930 --> 00:48:24,750
it unsafe I think that that's

950
00:48:20,510 --> 00:48:27,990
unnecessarily but basically you're

951
00:48:24,750 --> 00:48:29,760
you're disabling taps I'm using the taps

952
00:48:27,990 --> 00:48:31,350
API but I'm gonna disable the entire

953
00:48:29,760 --> 00:48:32,940
engine right I assume that if you want

954
00:48:31,350 --> 00:48:38,910
to do that you would just use TCP where

955
00:48:32,940 --> 00:48:40,920
you just call correctly this first

956
00:48:38,910 --> 00:48:43,319
protocol property you can send it

957
00:48:40,920 --> 00:48:44,790
multiple times for example you can say I

958
00:48:43,320 --> 00:48:47,880
can accept the following state

959
00:48:44,790 --> 00:48:51,090
combination sorry I can accept TCP or a

960
00:48:47,880 --> 00:48:56,160
city or eep because I wanted to to talk

961
00:48:51,090 --> 00:48:58,470
sit sit for example and then taps can

962
00:48:56,160 --> 00:49:05,250
still race these three against each

963
00:48:58,470 --> 00:49:06,540
other but if you want to do I mean if

964
00:49:05,250 --> 00:49:08,760
you're going down that path then you

965
00:49:06,540 --> 00:49:10,800
could just as well not specify these

966
00:49:08,760 --> 00:49:16,520
three protocols but the service that you

967
00:49:10,800 --> 00:49:21,060
want right because your bindings it

968
00:49:16,520 --> 00:49:23,220
explicitly require explicitly have some

969
00:49:21,060 --> 00:49:26,490
weird knowledge that they use some

970
00:49:23,220 --> 00:49:30,569
fields of TCP yeah that's the case for

971
00:49:26,490 --> 00:49:33,390
it okay okay

972
00:49:30,570 --> 00:49:35,280
I can't imagine that yes hey we're

973
00:49:33,390 --> 00:49:37,319
running out of time in this slide so

974
00:49:35,280 --> 00:49:42,300
let's try to activity Q this is a remote

975
00:49:37,320 --> 00:49:44,850
I think actually I monitoring people I'm

976
00:49:42,300 --> 00:49:47,990
I'm I'm I should feel me moderating this

977
00:49:44,850 --> 00:49:47,990
that's not even my proposal

978
00:49:48,380 --> 00:49:59,460
yeah so you go ahead your people more

979
00:49:56,640 --> 00:50:01,288
emo it is absolutely essential for apps

980
00:49:59,460 --> 00:50:03,930
to be able to specify transport

981
00:50:01,289 --> 00:50:05,970
protocols my experience is that there's

982
00:50:03,930 --> 00:50:08,160
too many subtle differences from Braun

983
00:50:05,970 --> 00:50:10,348
transport protocol to another to expect

984
00:50:08,160 --> 00:50:12,450
apps to run successfully over arbitrary

985
00:50:10,349 --> 00:50:14,670
protocols second that permitting

986
00:50:12,450 --> 00:50:16,470
arbitrary transport protocols you make

987
00:50:14,670 --> 00:50:18,930
testing of apps and support into

988
00:50:16,470 --> 00:50:21,209
nightmares it's one thing if an app can

989
00:50:18,930 --> 00:50:22,980
support and assess it on any protocols

990
00:50:21,210 --> 00:50:25,950
for small N and that's potentially

991
00:50:22,980 --> 00:50:28,890
useful but arbitrary number of protocols

992
00:50:25,950 --> 00:50:30,689
is unworkable using profiles is inviting

993
00:50:28,890 --> 00:50:32,520
more variability between endpoint

994
00:50:30,690 --> 00:50:36,559
situations and more ways for an

995
00:50:32,520 --> 00:50:36,559
application to fail in mysterious ways

996
00:50:37,490 --> 00:50:54,689
also point if you can say must always he

997
00:50:44,130 --> 00:50:58,289
said must be able to discuss more on

998
00:50:54,690 --> 00:51:03,480
this full requests so I mean one

999
00:50:58,289 --> 00:51:07,799
question that was biting me about it was

1000
00:51:03,480 --> 00:51:11,039
like well when do we need to need any

1001
00:51:07,799 --> 00:51:13,288
specific put Isis fire protocol if

1002
00:51:11,039 --> 00:51:15,869
Jeff's is doing is show up say like okay

1003
00:51:13,289 --> 00:51:19,920
you have property to conceal and how

1004
00:51:15,869 --> 00:51:21,359
hard it is okay these are the properties

1005
00:51:19,920 --> 00:51:24,359
give you tips dissipate

1006
00:51:21,359 --> 00:51:27,029
these are the properties between UDP so

1007
00:51:24,359 --> 00:51:29,369
when you do I need to specify what is

1008
00:51:27,029 --> 00:51:31,230
the reason I can hand it here

1009
00:51:29,369 --> 00:51:33,809
one reason like well one very specific

1010
00:51:31,230 --> 00:51:35,190
application is only working with TCP

1011
00:51:33,809 --> 00:51:38,250
because they have shame layer and stuff

1012
00:51:35,190 --> 00:51:44,700
like that yeah the server's listening on

1013
00:51:38,250 --> 00:51:46,980
that protocol only on that test those

1014
00:51:44,700 --> 00:51:49,379
are not like those they should not

1015
00:51:46,980 --> 00:51:51,420
really try to do steps at all because

1016
00:51:49,380 --> 00:51:54,029
they have the DEF specific requirement

1017
00:51:51,420 --> 00:51:56,579
so I mean to me the application

1018
00:51:54,029 --> 00:51:59,670
developer I would say like okay if I can

1019
00:51:56,579 --> 00:52:01,690
specify all protocol that I like be good

1020
00:51:59,670 --> 00:52:10,210
but then I will use some other

1021
00:52:01,690 --> 00:52:18,190
and for me if I can't see ya trying to

1022
00:52:10,210 --> 00:52:20,920
replace them or make a decision here

1023
00:52:18,190 --> 00:52:23,560
that makes the application developer to

1024
00:52:20,920 --> 00:52:25,960
get what they need and that's the use

1025
00:52:23,560 --> 00:52:28,180
case of a test for me otherwise I am NOT

1026
00:52:25,960 --> 00:52:30,940
good these tests I'm going to use like

1027
00:52:28,180 --> 00:52:33,100
something something that that gives me

1028
00:52:30,940 --> 00:52:35,230
in specific product because I am using

1029
00:52:33,100 --> 00:52:37,270
tabs because I would like to try I would

1030
00:52:35,230 --> 00:52:39,220
like to get the best of human transport

1031
00:52:37,270 --> 00:52:43,290
services that's my requirement when I am

1032
00:52:39,220 --> 00:52:43,290
thinking of these they were as clear

1033
00:52:44,580 --> 00:52:58,650
that's what it's all about we what we're

1034
00:52:54,100 --> 00:52:58,650
building should be capable independently

1035
00:52:59,520 --> 00:53:06,610
it's a complete replacement future so

1036
00:53:04,510 --> 00:53:09,040
you can't say don't use taps because

1037
00:53:06,610 --> 00:53:15,520
it's the one being alternative in the

1038
00:53:09,040 --> 00:53:18,279
eventual Nirvana work essentially and I

1039
00:53:15,520 --> 00:53:21,520
say nothing they cannot believe what's

1040
00:53:18,280 --> 00:53:24,580
on the slide is the right way to specify

1041
00:53:21,520 --> 00:53:26,380
DCT because there are many protocols

1042
00:53:24,580 --> 00:53:29,830
that could satisfy those behaviors I

1043
00:53:26,380 --> 00:53:32,470
think we do need a way of explicitly

1044
00:53:29,830 --> 00:53:34,390
saying I want TCP I don't want a

1045
00:53:32,470 --> 00:53:36,520
reliable order to congestion control

1046
00:53:34,390 --> 00:54:01,750
preserving message boundaries Prescott I

1047
00:53:36,520 --> 00:54:05,530
wanna see CP yeah yeah okay I'd like to

1048
00:54:01,750 --> 00:54:08,500
get a feel for for my proposal of just

1049
00:54:05,530 --> 00:54:11,470
saying a property is a protocol and the

1050
00:54:08,500 --> 00:54:13,780
name is TCP as one of these profiles so

1051
00:54:11,470 --> 00:54:16,330
would that be something that you like

1052
00:54:13,780 --> 00:54:24,220
because I think you know I said yeah I

1053
00:54:16,330 --> 00:54:25,930
said I think that comes out so Michael

1054
00:54:24,220 --> 00:54:28,240
one question for me I mean when you said

1055
00:54:25,930 --> 00:54:30,430
like I have profile and TCP do you

1056
00:54:28,240 --> 00:54:33,009
expect that they only provide that one

1057
00:54:30,430 --> 00:54:34,960
or do you expect that they also put some

1058
00:54:33,010 --> 00:54:37,210
fund of really prepared forever here

1059
00:54:34,960 --> 00:54:38,770
because I can make a mistake that I want

1060
00:54:37,210 --> 00:54:44,920
to see but the record where it gives me

1061
00:54:38,770 --> 00:54:46,660
something else if you if you specify a

1062
00:54:44,920 --> 00:54:54,670
profile I want TCP you don't need all

1063
00:54:46,660 --> 00:54:58,109
these things right just just a very

1064
00:54:54,670 --> 00:55:01,870
simple profile that has only death yeah

1065
00:54:58,110 --> 00:55:04,240
Apple so one comment just to Colin's

1066
00:55:01,870 --> 00:55:06,430
point right now on the watch we actually

1067
00:55:04,240 --> 00:55:08,419
only allow taps or things based on top

1068
00:55:06,430 --> 00:55:13,870
of it you can't do sockets directly so

1069
00:55:08,420 --> 00:55:13,870
[Laughter]

1070
00:55:15,210 --> 00:55:23,740
funny yeah I don't like the profiles

1071
00:55:21,100 --> 00:55:25,630
proposal if we have also expose what we

1072
00:55:23,740 --> 00:55:27,609
currently have in the document because

1073
00:55:25,630 --> 00:55:29,950
it's essentially another way of saying

1074
00:55:27,610 --> 00:55:32,380
the same thing it's a convenience I

1075
00:55:29,950 --> 00:55:34,290
completely believe that every

1076
00:55:32,380 --> 00:55:37,480
implementation will have conveniences

1077
00:55:34,290 --> 00:55:40,480
for how to easily set up the common sets

1078
00:55:37,480 --> 00:55:42,310
of things however I don't think we

1079
00:55:40,480 --> 00:55:45,220
should be defining what those sets are

1080
00:55:42,310 --> 00:55:47,740
because they will vary based on

1081
00:55:45,220 --> 00:55:51,189
different use cases today and use cases

1082
00:55:47,740 --> 00:55:52,810
in the future like our EPA has kind of

1083
00:55:51,190 --> 00:55:55,840
default sets of like here's how to set

1084
00:55:52,810 --> 00:56:00,610
up the profiles but that is not required

1085
00:55:55,840 --> 00:56:03,340
to be you know cross implementation

1086
00:56:00,610 --> 00:56:05,380
compatible if we're looking at kind of

1087
00:56:03,340 --> 00:56:07,240
forest like the yang model having or

1088
00:56:05,380 --> 00:56:09,280
being able to describe everything that

1089
00:56:07,240 --> 00:56:11,229
could be because it's not really a

1090
00:56:09,280 --> 00:56:14,320
developer typing it out if you wanted

1091
00:56:11,230 --> 00:56:15,640
like a big yang model here's my pre

1092
00:56:14,320 --> 00:56:16,930
connection you can go through every

1093
00:56:15,640 --> 00:56:18,430
property and set it the way it needs to

1094
00:56:16,930 --> 00:56:19,098
and you could reuse that that's just

1095
00:56:18,430 --> 00:56:20,868
that essentially

1096
00:56:19,099 --> 00:56:23,900
a profile that's very interesting but we

1097
00:56:20,869 --> 00:56:25,609
don't need to in the API itself and I

1098
00:56:23,900 --> 00:56:27,289
think it's similar for the protocol

1099
00:56:25,609 --> 00:56:28,788
specific stuff we should say the

1100
00:56:27,289 --> 00:56:30,920
implementation should have a way to do

1101
00:56:28,789 --> 00:56:34,160
it but that's not interesting to make

1102
00:56:30,920 --> 00:56:36,680
part of API think we need to be smaller

1103
00:56:34,160 --> 00:56:38,089
in what we're adding the value that we

1104
00:56:36,680 --> 00:56:41,359
add as a group

1105
00:56:38,089 --> 00:56:43,130
music we have the stuff that we've gone

1106
00:56:41,359 --> 00:56:45,259
over of the different transport services

1107
00:56:43,130 --> 00:56:47,450
we analyze the transport protocols so

1108
00:56:45,259 --> 00:56:48,859
we've distilled the set of things and

1109
00:56:47,450 --> 00:56:50,899
properties that are useful to put in

1110
00:56:48,859 --> 00:56:54,019
there so that is the value that we are

1111
00:56:50,900 --> 00:56:55,849
adding to the API doing these other

1112
00:56:54,019 --> 00:56:57,769
things are not really what the taps

1113
00:56:55,849 --> 00:56:59,299
group is the expert in it's going to be

1114
00:56:57,769 --> 00:57:02,299
what the implementations do in the

1115
00:56:59,299 --> 00:57:03,920
future with it so it makes a lot of

1116
00:57:02,299 --> 00:57:06,619
sense to me but I'm going alright I

1117
00:57:03,920 --> 00:57:08,989
agree with you but I think Keith made a

1118
00:57:06,619 --> 00:57:11,630
very good point which is that there is a

1119
00:57:08,989 --> 00:57:14,839
requirement here applications must be

1120
00:57:11,630 --> 00:57:17,239
able to specify a legacy protocol if

1121
00:57:14,839 --> 00:57:19,099
that's what they need there was a front

1122
00:57:17,239 --> 00:57:20,660
then we don't have to say how how it's

1123
00:57:19,099 --> 00:57:23,930
done but I think it's an architectural

1124
00:57:20,660 --> 00:57:25,098
requirement for the abstract API is you

1125
00:57:23,930 --> 00:57:28,160
have to be able to do that otherwise

1126
00:57:25,099 --> 00:57:31,219
your manat if you're not requiring it to

1127
00:57:28,160 --> 00:57:35,049
be supported then you know there's a

1128
00:57:31,219 --> 00:57:38,420
there's a full applications users who

1129
00:57:35,049 --> 00:57:40,219
okay and so I guess like the two options

1130
00:57:38,420 --> 00:57:42,410
I see there are either something in the

1131
00:57:40,219 --> 00:57:45,170
document says your implementation should

1132
00:57:42,410 --> 00:57:48,019
must expose some way of sending it to

1133
00:57:45,170 --> 00:57:52,009
you a protocol and may have profiles but

1134
00:57:48,019 --> 00:57:54,649
don't say what they are or we say well

1135
00:57:52,009 --> 00:57:57,140
we can even want give a specific

1136
00:57:54,650 --> 00:57:58,609
property name of choose a protocol but I

1137
00:57:57,140 --> 00:58:06,049
think that's maybe further than we

1138
00:57:58,609 --> 00:58:08,420
really need to go yeah okay awesome as I

1139
00:58:06,049 --> 00:58:10,430
wrote those PR so I think we still need

1140
00:58:08,420 --> 00:58:13,609
those mechanisms so we need a mechanism

1141
00:58:10,430 --> 00:58:16,279
for explicitly choose one protocol I

1142
00:58:13,609 --> 00:58:18,769
think this one should be part of the

1143
00:58:16,279 --> 00:58:23,390
core API because otherwise it makes

1144
00:58:18,769 --> 00:58:27,848
stuff much less portable for this and as

1145
00:58:23,390 --> 00:58:31,308
a second one I think we might need each

1146
00:58:27,849 --> 00:58:31,910
product profiles that allow to set up

1147
00:58:31,309 --> 00:58:34,869
comments

1148
00:58:31,910 --> 00:58:38,270
of properties and that's we see these

1149
00:58:34,869 --> 00:58:42,109
profiles as set the following properties

1150
00:58:38,270 --> 00:58:43,670
by the way this enables second thing we

1151
00:58:42,109 --> 00:58:46,430
had a lot of discussion about which

1152
00:58:43,670 --> 00:58:50,180
should be the defaults for all these

1153
00:58:46,430 --> 00:58:52,368
properties by including the profiles we

1154
00:58:50,180 --> 00:58:54,558
get rid of a lot of these discussion and

1155
00:58:52,369 --> 00:58:56,869
say not the default has to be somehow

1156
00:58:54,559 --> 00:59:01,039
physically comfortable but ok we have a

1157
00:58:56,869 --> 00:59:03,349
bunch of default profiles and what your

1158
00:59:01,039 --> 00:59:05,450
settings what you call this a bundle

1159
00:59:03,349 --> 00:59:07,430
which is a profile and it includes all

1160
00:59:05,450 --> 00:59:09,470
the defaults or what you discuss each to

1161
00:59:07,430 --> 00:59:11,319
each default and have it listed across

1162
00:59:09,470 --> 00:59:17,058
the document is the same thing right

1163
00:59:11,319 --> 00:59:19,190
technically for these prophets we have

1164
00:59:17,059 --> 00:59:21,890
default values and you can still

1165
00:59:19,190 --> 00:59:23,960
overwrite them so you know your pre

1166
00:59:21,890 --> 00:59:25,848
connection with the profile then you get

1167
00:59:23,960 --> 00:59:28,069
something tcd comfortable and you can

1168
00:59:25,849 --> 00:59:31,970
add further restrictions of further

1169
00:59:28,069 --> 00:59:34,759
requirements like zero RTT or you can

1170
00:59:31,970 --> 00:59:37,660
relax some of these bells but you get

1171
00:59:34,760 --> 00:59:40,700
rid of the problem F as having to

1172
00:59:37,660 --> 00:59:43,848
completely agree on one set of defaults

1173
00:59:40,700 --> 00:59:46,669
for the properties I can say ok we move

1174
00:59:43,849 --> 00:59:48,410
this to the profiles this is one way to

1175
00:59:46,670 --> 00:59:50,329
do this I'm not sure that that's the

1176
00:59:48,410 --> 00:59:52,399
right way but this was one reason for of

1177
00:59:50,329 --> 01:00:02,240
this proposal let's cut the line after

1178
00:59:52,400 --> 01:00:04,670
Anna my discussion so I'm selecting a

1179
01:00:02,240 --> 01:00:06,319
specific protocol I would like to step

1180
01:00:04,670 --> 01:00:08,240
back over then really understand the use

1181
01:00:06,319 --> 01:00:09,710
case behind that because there were a

1182
01:00:08,240 --> 01:00:11,720
couple people who brought up some kind

1183
01:00:09,710 --> 01:00:13,250
of use cases for it but those are really

1184
01:00:11,720 --> 01:00:15,890
not convincing for me for example if you

1185
01:00:13,250 --> 01:00:17,480
have a very specified spec which usually

1186
01:00:15,890 --> 01:00:19,009
means you have a user space in the

1187
01:00:17,480 --> 01:00:20,750
invitation of something which is

1188
01:00:19,010 --> 01:00:22,460
whatever minimized because we use it

1189
01:00:20,750 --> 01:00:23,569
undecided advice or whatever then you

1190
01:00:22,460 --> 01:00:24,829
probably don't want tip so you don't

1191
01:00:23,569 --> 01:00:25,849
want all the flexibility to get it

1192
01:00:24,829 --> 01:00:27,589
because we wouldn't make sure that you

1193
01:00:25,849 --> 01:00:30,559
really really have that one that piece

1194
01:00:27,589 --> 01:00:32,000
work that you want so I'm not sure if

1195
01:00:30,559 --> 01:00:34,849
that's a convincing use case for me also

1196
01:00:32,000 --> 01:00:36,710
if your server only supports TCP and you

1197
01:00:34,849 --> 01:00:39,049
to try to open a Greek connection to the

1198
01:00:36,710 --> 01:00:42,410
server it will not reply so anyway have

1199
01:00:39,049 --> 01:00:45,009
to for vectors as long but then like if

1200
01:00:42,410 --> 01:00:45,009
what we want

1201
01:00:51,430 --> 01:00:56,058
but what everything and anything you

1202
01:00:53,960 --> 01:00:57,829
wanted in DNA because it's the wooden

1203
01:00:56,059 --> 01:00:59,119
Ephrata system so I would understand why

1204
01:00:57,829 --> 01:01:02,539
this is reading inquired because I

1205
01:00:59,119 --> 01:01:06,650
didn't see a good case for it and that's

1206
01:01:02,539 --> 01:01:09,200
protocol specifically profiles I I do

1207
01:01:06,650 --> 01:01:10,579
agree with Tommy that I think this is

1208
01:01:09,200 --> 01:01:12,890
very implementations there's a figure

1209
01:01:10,579 --> 01:01:14,989
especially I think we shouldn't specify

1210
01:01:12,890 --> 01:01:17,269
a set of pop a profiles because that's

1211
01:01:14,989 --> 01:01:18,979
exactly the flexibility one here so I

1212
01:01:17,269 --> 01:01:21,109
would recommend to make we put it in the

1213
01:01:18,979 --> 01:01:23,899
implementation draft but not put it in

1214
01:01:21,109 --> 01:01:25,160
the API and this is also another general

1215
01:01:23,900 --> 01:01:27,519
comment I have I think we should

1216
01:01:25,160 --> 01:01:31,368
actually try to like not extend the IPA

1217
01:01:27,519 --> 01:01:33,919
IP API too much because the more complex

1218
01:01:31,369 --> 01:01:35,839
we make it the best incentives people

1219
01:01:33,920 --> 01:01:37,869
have Germany we should stop at some

1220
01:01:35,839 --> 01:01:40,249
point

1221
01:01:37,869 --> 01:01:41,930
hi my name is Michael shorten speaking

1222
01:01:40,249 --> 01:01:43,700
as TC venture I just want to give a

1223
01:01:41,930 --> 01:01:45,979
heads up that there are legacy

1224
01:01:43,700 --> 01:01:48,379
applications that you not only know what

1225
01:01:45,979 --> 01:01:50,989
protocol they need they also want to

1226
01:01:48,380 --> 01:01:52,400
specify individual TCP curvatures if

1227
01:01:50,989 --> 01:01:54,289
you're interested in that please contact

1228
01:01:52,400 --> 01:01:56,420
et bien session you will learn about one

1229
01:01:54,289 --> 01:01:58,249
of the use cases there the specific

1230
01:01:56,420 --> 01:02:00,979
parameters vacations interested in that

1231
01:01:58,249 --> 01:02:02,118
case other keepalive parameters and if

1232
01:02:00,979 --> 01:02:03,589
you want to be generic

1233
01:02:02,119 --> 01:02:06,650
you will have to think about that level

1234
01:02:03,589 --> 01:02:12,038
of training for Nora T I can access the

1235
01:02:06,650 --> 01:02:14,299
parameters possible yeah no no no but

1236
01:02:12,039 --> 01:02:16,400
there's a time because just a heads up

1237
01:02:14,299 --> 01:02:18,019
in case we come to a PC PMF you

1238
01:02:16,400 --> 01:02:28,579
interested in this specific use it's a

1239
01:02:18,019 --> 01:02:32,718
relevant so I'm going to argue that I

1240
01:02:28,579 --> 01:02:34,369
actually think that having do not have

1241
01:02:32,719 --> 01:02:36,799
letting applications have strict control

1242
01:02:34,369 --> 01:02:39,469
over the protocols they usually actually

1243
01:02:36,799 --> 01:02:41,420
get terrible thing for the ecosystem so

1244
01:02:39,469 --> 01:02:43,640
the example I'm going to give is let's

1245
01:02:41,420 --> 01:02:45,979
say I have an app that runs you know

1246
01:02:43,640 --> 01:02:48,259
Apple watch end you know talking to an

1247
01:02:45,979 --> 01:02:51,499
apple to a Mac OS server so I'm using

1248
01:02:48,259 --> 01:02:54,100
Tommy stack and living it's a smtp over

1249
01:02:51,499 --> 01:02:56,799
TCP and I recommend it today everything

1250
01:02:54,100 --> 01:03:00,100
works great and next year Tommy deploys

1251
01:02:56,800 --> 01:03:02,590
quick and it's tactic limitation and my

1252
01:03:00,100 --> 01:03:05,319
app suddenly starts doing SMTP over

1253
01:03:02,590 --> 01:03:07,600
quick in an entirely done way just

1254
01:03:05,320 --> 01:03:09,100
treating it as over TCP and the IETF

1255
01:03:07,600 --> 01:03:11,470
says no that's not how you guys seem to

1256
01:03:09,100 --> 01:03:13,270
be over quick you should use old grief

1257
01:03:11,470 --> 01:03:15,490
it's a quick but sorry we have deployed

1258
01:03:13,270 --> 01:03:17,259
stuff the only way to do it you know in

1259
01:03:15,490 --> 01:03:19,180
our existing running code is to treat

1260
01:03:17,260 --> 01:03:21,700
the so some PCP because that's the

1261
01:03:19,180 --> 01:03:23,560
legacy we got accidentally I think I'd

1262
01:03:21,700 --> 01:03:24,100
be a terrible outcome you don't want

1263
01:03:23,560 --> 01:03:25,990
that to happen

1264
01:03:24,100 --> 01:03:28,000
we don't want protocol should definitely

1265
01:03:25,990 --> 01:03:31,600
come online just because the stack

1266
01:03:28,000 --> 01:03:36,210
upgraded we that's gonna have that's

1267
01:03:31,600 --> 01:03:36,210
going to be bad then you go system it's

1268
01:03:38,790 --> 01:03:44,320
a treasonous Travis cry again info Keith

1269
01:03:41,620 --> 01:03:46,089
Moore as an app developer I would love

1270
01:03:44,320 --> 01:03:48,790
to be able to find out what options

1271
01:03:46,090 --> 01:03:50,590
exist to connect to appear that doesn't

1272
01:03:48,790 --> 01:03:53,200
mean I want a lower layer to choose an

1273
01:03:50,590 --> 01:03:57,190
arbitrary stack and not just legacy

1274
01:03:53,200 --> 01:03:59,169
protocols and then and then I also want

1275
01:03:57,190 --> 01:04:01,060
to say something Harris myself so I'm

1276
01:03:59,170 --> 01:04:02,890
really in favor of profiles because our

1277
01:04:01,060 --> 01:04:06,370
target audience for the API drove our

1278
01:04:02,890 --> 01:04:08,620
application developers in my mind who

1279
01:04:06,370 --> 01:04:10,930
want something nice and shiny and like

1280
01:04:08,620 --> 01:04:13,120
some new features and who maybe don't

1281
01:04:10,930 --> 01:04:15,009
want all the details of the transport

1282
01:04:13,120 --> 01:04:16,930
protocol I want to make it easy for them

1283
01:04:15,010 --> 01:04:18,760
to use right like we have tossed you

1284
01:04:16,930 --> 01:04:20,529
such examples or we want to show all

1285
01:04:18,760 --> 01:04:22,300
this API is really nice and easy to use

1286
01:04:20,530 --> 01:04:24,460
you don't have to care about all the

1287
01:04:22,300 --> 01:04:26,500
transport protocol details for that I

1288
01:04:24,460 --> 01:04:29,650
really want profiles I want to mention

1289
01:04:26,500 --> 01:04:31,030
they exist and I would like to have

1290
01:04:29,650 --> 01:04:32,980
profiles in the egg and a draft that

1291
01:04:31,030 --> 01:04:38,740
they exist and the specific profiles can

1292
01:04:32,980 --> 01:04:41,020
be appendix or somewhere on the

1293
01:04:38,740 --> 01:04:43,479
restaurant so I think we will need

1294
01:04:41,020 --> 01:04:45,100
profiles in implementations but I agree

1295
01:04:43,480 --> 01:04:59,200
with Romania that I don't think we

1296
01:04:45,100 --> 01:05:01,740
should have them in day guy draft so not

1297
01:04:59,200 --> 01:05:01,740
specified

1298
01:05:06,330 --> 01:05:14,890
collection conferences and all and I

1299
01:05:11,920 --> 01:05:16,600
would not want them as a parameter maybe

1300
01:05:14,890 --> 01:05:18,430
you can mention that it's possible to

1301
01:05:16,600 --> 01:05:20,319
when we describe our transport

1302
01:05:18,430 --> 01:05:22,390
parameters we may say it's also for

1303
01:05:20,320 --> 01:05:29,500
implementation as possible to guru in

1304
01:05:22,390 --> 01:05:30,819
various ways so let's let's maybe try to

1305
01:05:29,500 --> 01:05:33,160
close this out by taking a couple of

1306
01:05:30,820 --> 01:05:36,420
hums so let's say have a hum as to

1307
01:05:33,160 --> 01:05:39,960
whether people think that it is that

1308
01:05:36,420 --> 01:05:43,410
profiles should be an element of taps

1309
01:05:39,960 --> 01:05:46,360
setting aside where it's documented

1310
01:05:43,410 --> 01:05:50,230
I'll put do we want profiles yes or no

1311
01:05:46,360 --> 01:05:52,510
I'm free yes I'm trying to be vague I'm

1312
01:05:50,230 --> 01:05:56,440
gonna drill down okay

1313
01:05:52,510 --> 01:05:57,850
we don't want profiles okay so buddy

1314
01:05:56,440 --> 01:06:01,360
there seems to be consensus that

1315
01:05:57,850 --> 01:06:04,480
profiles are useful should the existence

1316
01:06:01,360 --> 01:06:10,840
of profiles be part of the API

1317
01:06:04,480 --> 01:06:12,310
specification Humphrey yes okay the

1318
01:06:10,840 --> 01:06:14,050
profile should not be part of the API

1319
01:06:12,310 --> 01:06:17,799
specification the existence of profiles

1320
01:06:14,050 --> 01:06:20,830
not the specifics okay so there's a few

1321
01:06:17,800 --> 01:06:25,150
humps but it was it's stronger for yes

1322
01:06:20,830 --> 01:06:26,350
then no so you guys look very confused

1323
01:06:25,150 --> 01:06:37,660
this all supports what I thought I heard

1324
01:06:26,350 --> 01:06:40,240
in the line pieces of the draft but it's

1325
01:06:37,660 --> 01:06:44,140
already mentioned really well you can it

1326
01:06:40,240 --> 01:06:45,279
know whether you you that now you've got

1327
01:06:44,140 --> 01:06:46,720
something that's general it can be

1328
01:06:45,280 --> 01:06:48,130
extensible right we don't have to

1329
01:06:46,720 --> 01:06:50,290
specify all the profiles that should

1330
01:06:48,130 --> 01:06:54,970
exist so I think you're there are three

1331
01:06:50,290 --> 01:06:56,500
options and the poll 328 is almost so

1332
01:06:54,970 --> 01:06:58,450
option number one is profiles or

1333
01:06:56,500 --> 01:06:58,870
normative first-order citizens again the

1334
01:06:58,450 --> 01:07:01,390
API

1335
01:06:58,870 --> 01:07:05,290
you must implement them you should use

1336
01:07:01,390 --> 01:07:07,629
them here's what they are and we're

1337
01:07:05,290 --> 01:07:08,620
going to even specify a and if you're

1338
01:07:07,630 --> 01:07:12,310
going to do that you also need to

1339
01:07:08,620 --> 01:07:13,900
specify a base set up right the second

1340
01:07:12,310 --> 01:07:16,600
one which is what the poll request is

1341
01:07:13,900 --> 01:07:17,619
almost now is it's in the appendix we're

1342
01:07:16,600 --> 01:07:20,618
saying you could do this

1343
01:07:17,619 --> 01:07:22,269
and there is a normative reference down

1344
01:07:20,619 --> 01:07:24,609
to there by saying here is an optional

1345
01:07:22,269 --> 01:07:26,258
profile thing right where if you're

1346
01:07:24,609 --> 01:07:29,200
going to do this here's how if you're

1347
01:07:26,259 --> 01:07:32,650
gonna do this I think those are that's

1348
01:07:29,200 --> 01:07:35,470
and then the other one is you could do

1349
01:07:32,650 --> 01:07:37,059
its own document and then say hey this

1350
01:07:35,470 --> 01:07:38,680
is it maybe that document to standards

1351
01:07:37,059 --> 01:07:42,069
track and then it's like basically a tax

1352
01:07:38,680 --> 01:07:44,078
extension it's like we have files and

1353
01:07:42,069 --> 01:07:47,019
then there is maybe a non normative

1354
01:07:44,079 --> 01:07:48,849
reference in the API drafts saying hey

1355
01:07:47,019 --> 01:07:52,868
you can have if you want profiles go

1356
01:07:48,849 --> 01:07:53,950
read this other graph too great or you

1357
01:07:52,869 --> 01:07:55,450
could put any implementation so there's

1358
01:07:53,950 --> 01:07:57,220
yeah there's a bunch of different so do

1359
01:07:55,450 --> 01:07:58,660
you think you heard a consensus on one

1360
01:07:57,220 --> 01:07:59,890
of those I I didn't know if you're

1361
01:07:58,660 --> 01:08:03,190
convinced on any of those I heard a

1362
01:07:59,890 --> 01:08:05,170
consensus on we want them okay so I

1363
01:08:03,190 --> 01:08:06,700
think we're out of time we're not gonna

1364
01:08:05,170 --> 01:08:09,690
we're not going to resolve this here

1365
01:08:06,700 --> 01:08:11,828
beyond that point

1366
01:08:09,690 --> 01:08:14,740
Tommy unless you think you can state

1367
01:08:11,829 --> 01:08:17,350
what you think is the unifying solution

1368
01:08:14,740 --> 01:08:20,818
here that everybody is going to agree on

1369
01:08:17,350 --> 01:08:20,819
I think that we're gonna have two

1370
01:08:23,969 --> 01:08:29,620
options because I think there was

1371
01:08:26,380 --> 01:08:34,810
confusion so when I was going to propose

1372
01:08:29,620 --> 01:08:37,059
three options were one do essentially

1373
01:08:34,810 --> 01:08:40,560
what the PR is today how do you have

1374
01:08:37,060 --> 01:08:44,139
profiles and they modify the existing

1375
01:08:40,560 --> 01:08:46,810
symbols in the API abstract API requires

1376
01:08:44,139 --> 01:08:50,350
that it takes a profile symbol that is

1377
01:08:46,810 --> 01:08:52,270
part of the API - maybe I mentions that

1378
01:08:50,350 --> 01:08:54,040
profile conveniences exist is that it

1379
01:08:52,270 --> 01:08:55,719
does not modify the existing take a

1380
01:08:54,040 --> 01:08:58,028
parameter you just say you can build

1381
01:08:55,719 --> 01:08:59,770
this on top maybe you should and three

1382
01:08:58,029 --> 01:09:06,489
you don't mention the middle guys I

1383
01:08:59,770 --> 01:09:09,670
think that might be a clearer hum yeah -

1384
01:09:06,488 --> 01:09:13,419
as mentioned right essentially saying

1385
01:09:09,670 --> 01:09:18,190
like you the API can also add a way to

1386
01:09:13,420 --> 01:09:19,870
create a set of a pre connection that's

1387
01:09:18,189 --> 01:09:21,790
pre-configured in a way that's good for

1388
01:09:19,870 --> 01:09:23,290
this but it doesn't modify any calls on

1389
01:09:21,790 --> 01:09:27,609
the pre connections it just set stuff

1390
01:09:23,290 --> 01:09:30,479
for you but I think those are the

1391
01:09:27,609 --> 01:09:30,480
degrees that

1392
01:09:30,529 --> 01:09:37,800
so without trying to muddy the waters

1393
01:09:33,689 --> 01:09:39,179
further option what can we do a home on

1394
01:09:37,800 --> 01:09:40,830
that do people understand what the three

1395
01:09:39,180 --> 01:09:46,890
options are enough that they can express

1396
01:09:40,830 --> 01:09:51,979
a preference okay option one all right I

1397
01:09:46,890 --> 01:09:54,270
heard the vaguest essence of hum but I

1398
01:09:51,979 --> 01:09:56,730
was trying not to because then we're

1399
01:09:54,270 --> 01:10:01,440
gonna then I won't do it perfectly and

1400
01:09:56,730 --> 01:10:13,559
then we will argue about that do it hum

1401
01:10:01,440 --> 01:10:15,089
now if you want a parameter we've

1402
01:10:13,560 --> 01:10:17,370
entered we've entered a nonterminating

1403
01:10:15,090 --> 01:10:29,730
process I know if you don't want to

1404
01:10:17,370 --> 01:10:34,440
change the we're gonna move on I think I

1405
01:10:29,730 --> 01:10:37,309
think let me here's here's how I'd like

1406
01:10:34,440 --> 01:10:42,419
to do what I would like somebody to

1407
01:10:37,310 --> 01:10:44,970
propose the options to the list and we

1408
01:10:42,420 --> 01:10:47,220
can do an online hum or something

1409
01:10:44,970 --> 01:10:50,280
equivalents right people try not to get

1410
01:10:47,220 --> 01:10:52,470
too much into editing the questions who

1411
01:10:50,280 --> 01:10:55,259
would like to do that I think good

1412
01:10:52,470 --> 01:10:59,550
candidates are Brian Tommy Michael or

1413
01:10:55,260 --> 01:11:01,200
Maria okay yeah told me oh honey you're

1414
01:10:59,550 --> 01:11:03,390
gonna close the questions to the list

1415
01:11:01,200 --> 01:11:05,550
try to while it's still fresh in folks

1416
01:11:03,390 --> 01:11:07,170
minds and so when people can just do a

1417
01:11:05,550 --> 01:11:11,220
plus one for the thing that they like

1418
01:11:07,170 --> 01:11:15,320
and maybe try to move on today did you

1419
01:11:11,220 --> 01:11:15,320
have anything more on this run yeah

1420
01:11:15,539 --> 01:11:30,179
what spread a surprise hominid from your

1421
01:11:18,750 --> 01:11:32,190
the coffee I just made the mistake of

1422
01:11:30,179 --> 01:11:33,929
transience everything as if this was my

1423
01:11:32,190 --> 01:11:35,879
proposal I'm not gonna do this this time

1424
01:11:33,929 --> 01:11:37,559
I'm just going to read to you what this

1425
01:11:35,880 --> 01:11:40,170
is and see what happens because it isn't

1426
01:11:37,559 --> 01:11:42,900
my proposal I'm just trying to moderate

1427
01:11:40,170 --> 01:11:45,030
this okay parameters and defaults should

1428
01:11:42,900 --> 01:11:48,030
we specify rather than recommend default

1429
01:11:45,030 --> 01:11:50,579
values the proposal is the red line here

1430
01:11:48,030 --> 01:11:53,309
right that was Cory's proposal if I

1431
01:11:50,579 --> 01:11:56,639
remember correctly essentially replacing

1432
01:11:53,309 --> 01:11:59,610
all the text about the default value

1433
01:11:56,639 --> 01:12:01,679
could be or is recommended with well

1434
01:11:59,610 --> 01:12:05,489
requirements language should we do that

1435
01:12:01,679 --> 01:12:08,039
or not and that and enter the policy

1436
01:12:05,489 --> 01:12:10,740
discussion which is why I'm not going to

1437
01:12:08,039 --> 01:12:15,320
answer comments I'm just gonna watch you

1438
01:12:10,740 --> 01:12:15,320
[Laughter]

1439
01:12:20,630 --> 01:12:24,260
[Laughter]

1440
01:12:24,860 --> 01:12:30,509
what we were doing is somehow disagree

1441
01:12:28,650 --> 01:12:55,980
with what the I chatted in the other

1442
01:12:30,510 --> 01:12:57,840
RFC's when we did I I want to see if if

1443
01:12:55,980 --> 01:13:08,129
this per request should be approved or

1444
01:12:57,840 --> 01:13:09,719
not so this is yeah okay sorry it's a

1445
01:13:08,130 --> 01:13:12,000
it's not a pro request it's a it's an

1446
01:13:09,719 --> 01:13:21,989
issue yeah right okay but I mean if we

1447
01:13:12,000 --> 01:13:24,449
should do this so what one comment I

1448
01:13:21,989 --> 01:13:26,730
have like I really don't see the policy

1449
01:13:24,449 --> 01:13:29,360
matters for this must here I mean the

1450
01:13:26,730 --> 01:13:31,730
policy can override the

1451
01:13:29,360 --> 01:13:33,500
different thing but here is more about

1452
01:13:31,730 --> 01:13:35,959
the sentence like saying like before

1453
01:13:33,500 --> 01:13:37,400
mostly this and the ePub some policy

1454
01:13:35,960 --> 01:13:45,560
whereas before that's the different

1455
01:13:37,400 --> 01:13:48,320
factor for me policy could be overridden

1456
01:13:45,560 --> 01:13:51,560
I was unhappy by kind of saying the

1457
01:13:48,320 --> 01:13:53,630
default is recommended to be something

1458
01:13:51,560 --> 01:13:54,880
let's just be bold it we know you're

1459
01:13:53,630 --> 01:13:57,830
exactly saying we must

1460
01:13:54,880 --> 01:13:58,550
yeah thought before it must be now yeah

1461
01:13:57,830 --> 01:14:03,769
all right

1462
01:13:58,550 --> 01:14:05,420
yes allowed Erica near Apple so if you

1463
01:14:03,770 --> 01:14:08,119
say that a fault must be this is that

1464
01:14:05,420 --> 01:14:11,540
the default for an implementation must

1465
01:14:08,119 --> 01:14:13,070
be this or they default in like

1466
01:14:11,540 --> 01:14:15,469
basically a rescind into the default

1467
01:14:13,070 --> 01:14:17,710
when I implement this I need to specify

1468
01:14:15,469 --> 01:14:21,020
this unless the client overrides it

1469
01:14:17,710 --> 01:14:23,060
that's plural so at that point we've

1470
01:14:21,020 --> 01:14:24,290
already seen that for transport

1471
01:14:23,060 --> 01:14:25,940
properties of a large number of

1472
01:14:24,290 --> 01:14:28,940
protocols different platforms have

1473
01:14:25,940 --> 01:14:31,190
different defaults are we trying to say

1474
01:14:28,940 --> 01:14:33,349
that the entire world should not have

1475
01:14:31,190 --> 01:14:35,809
done that and is do we somehow believe

1476
01:14:33,350 --> 01:14:38,179
that they will do this if we say it must

1477
01:14:35,810 --> 01:14:40,429
be that like is this going to be any

1478
01:14:38,179 --> 01:14:41,840
more effective if we say must because we

1479
01:14:40,429 --> 01:14:43,670
haven't seen different platforms make

1480
01:14:41,840 --> 01:14:45,619
their own choices I think the center

1481
01:14:43,670 --> 01:14:47,449
question is about requirement language

1482
01:14:45,619 --> 01:14:49,969
or not so we could have shipped for

1483
01:14:47,449 --> 01:14:51,409
these cases for for cases where you

1484
01:14:49,969 --> 01:14:54,130
think that this should be different

1485
01:14:51,409 --> 01:14:54,129
different platforms

1486
01:14:57,460 --> 01:15:02,449
Gouri so as I understand it your problem

1487
01:15:00,830 --> 01:15:04,850
with the issue your reason for following

1488
01:15:02,449 --> 01:15:09,500
the issue is that the language was kind

1489
01:15:04,850 --> 01:15:11,300
of like if you feel like it maybe you

1490
01:15:09,500 --> 01:15:16,210
could save you like how this is the

1491
01:15:11,300 --> 01:15:20,170
default you know let me let me make an

1492
01:15:16,210 --> 01:15:22,510
alternate suggestion here the default is

1493
01:15:20,170 --> 01:15:28,719
because when you stick a must in there

1494
01:15:22,510 --> 01:15:31,550
yes can we just say the default is so

1495
01:15:28,719 --> 01:15:32,719
I'm afraid I'm a little confused by this

1496
01:15:31,550 --> 01:15:36,489
discussion because I thought the

1497
01:15:32,719 --> 01:15:40,239
question was should we have defaults

1498
01:15:36,489 --> 01:15:42,549
yeah we're agreement

1499
01:15:40,239 --> 01:15:49,268
reopening okay so that's settled all

1500
01:15:42,550 --> 01:15:50,559
right good but that's not requirements

1501
01:15:49,269 --> 01:15:52,840
language okay no it's not the coin is

1502
01:15:50,559 --> 01:15:56,860
like this it's it is less it is less

1503
01:15:52,840 --> 01:16:02,349
kind of the area then then what we have

1504
01:15:56,860 --> 01:16:09,759
is okay so we avoid the lower chance to

1505
01:16:02,349 --> 01:16:12,610
recommend which is okay what's there is

1506
01:16:09,760 --> 01:16:14,889
bad let's go it is and if we want to

1507
01:16:12,610 --> 01:16:16,960
reopen this in IETF last call on your

1508
01:16:14,889 --> 01:16:18,550
life is it should be must then we can

1509
01:16:16,960 --> 01:16:24,820
have that argument among your ETFs

1510
01:16:18,550 --> 01:16:27,249
Twitch's be more fun you have a table

1511
01:16:24,820 --> 01:16:29,139
comment on this I mean even though not

1512
01:16:27,249 --> 01:16:32,079
you can even specify whole protocols

1513
01:16:29,139 --> 01:16:42,309
without normative language yeah and

1514
01:16:32,079 --> 01:16:44,650
we're not doing a protocol and the other

1515
01:16:42,309 --> 01:16:47,380
point to use a must is because you might

1516
01:16:44,650 --> 01:16:50,860
have some interoperability issues so you

1517
01:16:47,380 --> 01:16:52,449
know if you if you think that like it's

1518
01:16:50,860 --> 01:16:54,130
important that all platforms use the

1519
01:16:52,449 --> 01:16:55,659
same default because it's the assumption

1520
01:16:54,130 --> 01:16:57,460
of the user and otherwise things will

1521
01:16:55,659 --> 01:16:58,929
break then that something you should

1522
01:16:57,460 --> 01:17:00,579
make clear and that would be reason to

1523
01:16:58,929 --> 01:17:03,210
use math but I think still think you

1524
01:17:00,579 --> 01:17:05,860
shouldn't use no magic language anyway

1525
01:17:03,210 --> 01:17:07,210
the reason I wanted normativity language

1526
01:17:05,860 --> 01:17:08,920
in was because the things we were

1527
01:17:07,210 --> 01:17:11,860
society cup normative language that said

1528
01:17:08,920 --> 01:17:13,599
you must do this so we eat when we say

1529
01:17:11,860 --> 01:17:16,299
the default is well you recommend this

1530
01:17:13,599 --> 01:17:20,260
because the RSC already said do you

1531
01:17:16,300 --> 01:17:22,659
thought I think just say is I'm still

1532
01:17:20,260 --> 01:17:24,280
very happy yeah if you and I say you

1533
01:17:22,659 --> 01:17:26,170
just click on tradition if you say we

1534
01:17:24,280 --> 01:17:31,210
were commended but when the RFC says

1535
01:17:26,170 --> 01:17:33,130
must and done what yeah two dimensions

1536
01:17:31,210 --> 01:17:34,659
here also override could be not just a

1537
01:17:33,130 --> 01:17:36,429
client but will all be the existent

1538
01:17:34,659 --> 01:17:39,339
policy or something and I think the

1539
01:17:36,429 --> 01:17:42,670
other part is that it's the default here

1540
01:17:39,340 --> 01:17:44,829
is how we use it for for the protocol

1541
01:17:42,670 --> 01:17:46,360
selection and racing so if you say

1542
01:17:44,829 --> 01:17:48,308
ignore it doesn't mean that you can

1543
01:17:46,360 --> 01:17:50,469
ignore the feature necessary it just

1544
01:17:48,309 --> 01:17:52,150
means that it's not used for selecting

1545
01:17:50,469 --> 01:17:53,159
the problem

1546
01:17:52,150 --> 01:17:54,659
so that's also

1547
01:17:53,159 --> 01:17:56,190
different things that I think we have to

1548
01:17:54,659 --> 01:17:58,259
be confused in this discussion

1549
01:17:56,190 --> 01:18:01,710
agreed and I think Gauri that the point

1550
01:17:58,260 --> 01:18:04,230
that you're making about how you know a

1551
01:18:01,710 --> 01:18:07,860
taps implementation should not use

1552
01:18:04,230 --> 01:18:09,959
protocols in a way contrary to how they

1553
01:18:07,860 --> 01:18:12,719
are specified there should be some text

1554
01:18:09,960 --> 01:18:14,610
somewhere in the implementation or in

1555
01:18:12,719 --> 01:18:16,409
the API document that says that if

1556
01:18:14,610 --> 01:18:18,989
you're billing a taps API this isn't an

1557
01:18:16,409 --> 01:18:20,969
excuse to put in a permanent hack that

1558
01:18:18,989 --> 01:18:22,309
violates how we think that protocol

1559
01:18:20,969 --> 01:18:24,719
should be used

1560
01:18:22,310 --> 01:18:27,239
Teresa again it's trouble scribe for

1561
01:18:24,719 --> 01:18:28,860
Keith Moore please define things in such

1562
01:18:27,239 --> 01:18:31,409
a way that applications behave

1563
01:18:28,860 --> 01:18:33,509
predictably predictably across different

1564
01:18:31,409 --> 01:18:35,580
locations and different hosts if

1565
01:18:33,510 --> 01:18:44,699
defaults are implementation dependent I

1566
01:18:35,580 --> 01:18:46,769
don't think this happens I can't go

1567
01:18:44,699 --> 01:18:48,839
three with that yeah so Joe anything

1568
01:18:46,770 --> 01:18:55,340
else cool no okay awesome thank you we

1569
01:18:48,840 --> 01:18:55,340
gained some time and we it's in Paris

1570
01:18:55,489 --> 01:19:02,509
sir the next is arch and API open topics

1571
01:19:13,780 --> 01:19:22,070
all right so still the next part of

1572
01:19:17,570 --> 01:19:30,230
someone moderating just stuff that has

1573
01:19:22,070 --> 01:19:32,630
to be done so for for your information I

1574
01:19:30,230 --> 01:19:35,808
compiled a list of issues from github

1575
01:19:32,630 --> 01:19:38,869
that we might want to discuss today if

1576
01:19:35,809 --> 01:19:41,030
the time permits so we go as far as we

1577
01:19:38,869 --> 01:19:43,639
can get and I sorted them a little bit

1578
01:19:41,030 --> 01:19:46,099
across that we might make progress here

1579
01:19:43,639 --> 01:19:47,719
and they are not completely editorials

1580
01:19:46,099 --> 01:19:50,780
so if you don't find things that are

1581
01:19:47,719 --> 01:19:53,690
look at eternal yield this is my

1582
01:19:50,780 --> 01:19:57,079
invention so if the first engineer I

1583
01:19:53,690 --> 01:20:00,018
think we could discuss is the question

1584
01:19:57,079 --> 01:20:03,860
of Tommy whether listen filtering bruh

1585
01:20:00,019 --> 01:20:10,730
hey behavior for TLS should be somehow

1586
01:20:03,860 --> 01:20:12,768
exposed I put the T for T less brackets

1587
01:20:10,730 --> 01:20:15,799
because I think it's generally useful

1588
01:20:12,769 --> 01:20:17,179
feature the business option delivers the

1589
01:20:15,800 --> 01:20:20,230
connection but doesn't provide a

1590
01:20:17,179 --> 01:20:22,760
particular wait to reject connection so

1591
01:20:20,230 --> 01:20:24,650
the text suggests that receive

1592
01:20:22,760 --> 01:20:26,780
connection delivers the connection once

1593
01:20:24,650 --> 01:20:29,780
the Tila's server handshake is complete

1594
01:20:26,780 --> 01:20:36,249
but some implementations may want to

1595
01:20:29,780 --> 01:20:36,249
rate limit or modify this behavior so I

1596
01:20:37,690 --> 01:20:41,449
think there are three possible

1597
01:20:39,860 --> 01:20:43,280
resolutions that I'm reading them aloud

1598
01:20:41,449 --> 01:20:45,169
but I think we should have a short

1599
01:20:43,280 --> 01:20:47,199
discussion what makes most sense for

1600
01:20:45,170 --> 01:20:56,900
this improbably just read all for the

1601
01:20:47,199 --> 01:20:59,659
result us today of these three I like

1602
01:20:56,900 --> 01:21:01,489
resolution a naturally not received

1603
01:20:59,659 --> 01:21:03,589
event in your connection events with

1604
01:21:01,489 --> 01:21:07,249
listen calls um

1605
01:21:03,590 --> 01:21:08,719
primarily it's a little bit weird it

1606
01:21:07,249 --> 01:21:11,269
means we might actually want to rename

1607
01:21:08,719 --> 01:21:13,070
listen because listen has it's like

1608
01:21:11,269 --> 01:21:14,929
listen and except they have meetings and

1609
01:21:13,070 --> 01:21:19,579
sockets we don't have it slightly

1610
01:21:14,929 --> 01:21:22,729
different um we have slightly different

1611
01:21:19,579 --> 01:21:24,980
semantics for these now in taps but I

1612
01:21:22,729 --> 01:21:26,930
really like the symmetry

1613
01:21:24,980 --> 01:21:28,610
between sort of like to receive

1614
01:21:26,930 --> 01:21:32,210
connection back pressure and the receive

1615
01:21:28,610 --> 01:21:37,339
back rusher it makes sense to have like

1616
01:21:32,210 --> 01:21:39,980
one way to be miss Eric as our security

1617
01:21:37,340 --> 01:21:43,640
one of our security representatives here

1618
01:21:39,980 --> 01:21:46,549
you have an opinion what do you want to

1619
01:21:43,640 --> 01:21:55,670
generate an opinion on this well Tommy's

1620
01:21:46,550 --> 01:22:00,140
talking so this is something that we've

1621
01:21:55,670 --> 01:22:01,970
discussed a lot specifically we chosen

1622
01:22:00,140 --> 01:22:03,980
our recommendation not to do this but

1623
01:22:01,970 --> 01:22:07,640
instead to actually model be listening

1624
01:22:03,980 --> 01:22:09,259
more on what the existing listen call

1625
01:22:07,640 --> 01:22:10,610
has which is kind of like a window of

1626
01:22:09,260 --> 01:22:14,210
how many connections you want to receive

1627
01:22:10,610 --> 01:22:15,589
I think unlike the connection with

1628
01:22:14,210 --> 01:22:17,330
general receiving data in which the

1629
01:22:15,590 --> 01:22:19,400
application has some expectation of how

1630
01:22:17,330 --> 01:22:22,150
much is going to receive a server that's

1631
01:22:19,400 --> 01:22:24,710
receiving connections out of the blue

1632
01:22:22,150 --> 01:22:28,610
really has no idea how many there could

1633
01:22:24,710 --> 01:22:30,110
be and adding these calls could either

1634
01:22:28,610 --> 01:22:32,929
add latency where I essentially have to

1635
01:22:30,110 --> 01:22:35,780
call receive new connection a thousand

1636
01:22:32,930 --> 01:22:37,100
times if I want to be able to receive a

1637
01:22:35,780 --> 01:22:38,630
thousand connections at once and have

1638
01:22:37,100 --> 01:22:40,010
that be the window so having a

1639
01:22:38,630 --> 01:22:42,200
convenience to just say here's the

1640
01:22:40,010 --> 01:22:45,650
window of how many more connections I

1641
01:22:42,200 --> 01:22:51,019
were willing to receive it is useful I

1642
01:22:45,650 --> 01:22:52,790
think that's slightly different from the

1643
01:22:51,020 --> 01:22:55,940
what the issue is trying to get at

1644
01:22:52,790 --> 01:23:01,519
because even if I allow a connection to

1645
01:22:55,940 --> 01:23:03,230
be received I may want to do something

1646
01:23:01,520 --> 01:23:05,900
before all of the application for a

1647
01:23:03,230 --> 01:23:09,530
custom so before TLS occurs we'll just

1648
01:23:05,900 --> 01:23:19,580
to do some filtering so they're related

1649
01:23:09,530 --> 01:23:21,440
but right not an additional then

1650
01:23:19,580 --> 01:23:23,120
essentially get an initial knob to say

1651
01:23:21,440 --> 01:23:26,629
how many in connections and we're going

1652
01:23:23,120 --> 01:23:28,220
to accept that's not TLS specific but we

1653
01:23:26,630 --> 01:23:33,760
may also need something business what

1654
01:23:28,220 --> 01:23:36,710
the issue was that allows us to reject

1655
01:23:33,760 --> 01:23:38,850
certain connections from certain places

1656
01:23:36,710 --> 01:23:41,070
or like say oh my server doesn't

1657
01:23:38,850 --> 01:23:44,880
like under their dolls I want to reject

1658
01:23:41,070 --> 01:23:47,610
everything for this supplement yeah

1659
01:23:44,880 --> 01:23:49,080
Dominic's just that point one of the

1660
01:23:47,610 --> 01:23:50,400
things when I was first learning sockets

1661
01:23:49,080 --> 01:23:52,710
I always thought was really strange is

1662
01:23:50,400 --> 01:23:56,009
that there's no way to respond to a sin

1663
01:23:52,710 --> 01:23:57,840
with a reset so something good we know

1664
01:23:56,010 --> 01:24:01,050
like for you know stacks that are doing

1665
01:23:57,840 --> 01:24:10,620
you know Carl implementation but

1666
01:24:01,050 --> 01:24:12,630
actually doing their own PCB so I'm

1667
01:24:10,620 --> 01:24:14,340
gonna get back in line after listening

1668
01:24:12,630 --> 01:24:18,270
to tell me I want to withdraw my

1669
01:24:14,340 --> 01:24:22,970
statement on a it's beautiful but it's

1670
01:24:18,270 --> 01:24:25,650
not practical um I'm not sure I agree

1671
01:24:22,970 --> 01:24:26,730
that that's that he is the right way to

1672
01:24:25,650 --> 01:24:28,530
do this I think we should probably

1673
01:24:26,730 --> 01:24:31,530
continue to discussion somewhere else I

1674
01:24:28,530 --> 01:24:33,059
will know that I forget where it was but

1675
01:24:31,530 --> 01:24:35,490
I think it was in an early version of

1676
01:24:33,060 --> 01:24:38,400
post sockets there was essentially a

1677
01:24:35,490 --> 01:24:40,740
three listening like event which is

1678
01:24:38,400 --> 01:24:43,139
essentially an event that came back the

1679
01:24:40,740 --> 01:24:45,090
application and said would you like a

1680
01:24:43,140 --> 01:24:47,430
connection that looks like this before I

1681
01:24:45,090 --> 01:24:50,040
go to the whole effort of setting up all

1682
01:24:47,430 --> 01:24:51,600
of the context and stuff here is an

1683
01:24:50,040 --> 01:24:53,400
incoming connection that here is the

1684
01:24:51,600 --> 01:24:54,900
remote address of it there's any

1685
01:24:53,400 --> 01:24:58,799
information about the remote that we

1686
01:24:54,900 --> 01:25:00,540
have do you care and then at that point

1687
01:24:58,800 --> 01:25:02,580
it could essentially return no right

1688
01:25:00,540 --> 01:25:05,070
like so in post I think it was a call

1689
01:25:02,580 --> 01:25:07,200
back and it was like it would return to

1690
01:25:05,070 --> 01:25:08,880
boolean you know do you want this and it

1691
01:25:07,200 --> 01:25:10,740
could be like no Freddy it would just

1692
01:25:08,880 --> 01:25:12,750
drop out of those a way to to

1693
01:25:10,740 --> 01:25:14,160
short-circuit the early processing there

1694
01:25:12,750 --> 01:25:16,380
are two different problems that we need

1695
01:25:14,160 --> 01:25:18,059
to address here one of them is back

1696
01:25:16,380 --> 01:25:21,690
pressure like the fundamental rate

1697
01:25:18,060 --> 01:25:25,440
limiting problem and one of them is is

1698
01:25:21,690 --> 01:25:29,429
sort of like early rejection and I think

1699
01:25:25,440 --> 01:25:30,240
we should probably what you put

1700
01:25:29,430 --> 01:25:31,800
something in this issue who are

1701
01:25:30,240 --> 01:25:33,719
splitting into two different issues that

1702
01:25:31,800 --> 01:25:34,830
it points out that these are two

1703
01:25:33,720 --> 01:25:37,200
different things that we need to control

1704
01:25:34,830 --> 01:25:39,720
but I don't how many more of these do

1705
01:25:37,200 --> 01:25:41,370
you have to go through these kind of

1706
01:25:39,720 --> 01:25:42,690
questions of these questions of these

1707
01:25:41,370 --> 01:25:45,480
issues are we gonna go through today I

1708
01:25:42,690 --> 01:25:47,549
think six or seven we should probably

1709
01:25:45,480 --> 01:25:49,469
make a note me issue and move on would

1710
01:25:47,550 --> 01:25:50,780
be my I don't think we're gonna resolve

1711
01:25:49,470 --> 01:25:56,369
on this

1712
01:25:50,780 --> 01:26:00,830
okay cool yeah okay okay so but I think

1713
01:25:56,369 --> 01:26:05,250
the general so just just the feeling is

1714
01:26:00,830 --> 01:26:08,909
adding an additional event for let's say

1715
01:26:05,250 --> 01:26:16,320
pre acceptance a solution we might want

1716
01:26:08,909 --> 01:26:18,629
to go with I'd be so so yep anyone I'm

1717
01:26:16,320 --> 01:26:35,580
speaking against it fine I think we have

1718
01:26:18,630 --> 01:26:46,409
a solution for the TCP layer with my new

1719
01:26:35,580 --> 01:26:56,309
look my map reconnect any volunteers to

1720
01:26:46,409 --> 01:27:03,089
write text for this okay I think we go

1721
01:26:56,310 --> 01:27:06,840
for the next issue that yeah so there's

1722
01:27:03,090 --> 01:27:10,860
a issue 158 unidirectional streams for

1723
01:27:06,840 --> 01:27:14,580
multicast source and sink support we

1724
01:27:10,860 --> 01:27:16,739
have a selection property that allows to

1725
01:27:14,580 --> 01:27:19,050
create intellectual streams the main

1726
01:27:16,739 --> 01:27:21,869
document but no way to credit curry very

1727
01:27:19,050 --> 01:27:24,739
web the connection is unidirectional so

1728
01:27:21,869 --> 01:27:32,489
the question is is the mechanism

1729
01:27:24,739 --> 01:27:41,968
sufficient for multicast I think we want

1730
01:27:32,489 --> 01:27:45,989
Jake's input on that just make sure that

1731
01:27:41,969 --> 01:27:49,170
if the local address isn't it's a group

1732
01:27:45,989 --> 01:27:50,790
address and it isn't specified any

1733
01:27:49,170 --> 01:27:52,830
transfer property that it has to be

1734
01:27:50,790 --> 01:27:54,060
unidirectional receive stream then it

1735
01:27:52,830 --> 01:27:56,219
should just say oh the connection

1736
01:27:54,060 --> 01:27:58,280
because then ditch yeah that's what he

1737
01:27:56,219 --> 01:27:58,280
did

1738
01:28:01,380 --> 01:28:06,490
Gouri Fairhurst and i think we should do

1739
01:28:04,420 --> 01:28:08,140
we could do more multicast I think we

1740
01:28:06,490 --> 01:28:10,620
should do the least that say about what

1741
01:28:08,140 --> 01:28:14,380
was already done so I like what was done

1742
01:28:10,620 --> 01:28:16,870
okay so I think the question is most

1743
01:28:14,380 --> 01:28:20,050
probably yes and the other extensions

1744
01:28:16,870 --> 01:28:25,630
might come in with another PR from some

1745
01:28:20,050 --> 01:28:28,930
of you okay the next question is already

1746
01:28:25,630 --> 01:28:31,690
answered I think in the last discussion

1747
01:28:28,930 --> 01:28:34,270
so I think framers are enough first

1748
01:28:31,690 --> 01:28:41,320
start here less so is there anyone

1749
01:28:34,270 --> 01:28:47,170
against closing this now closing the

1750
01:28:41,320 --> 01:28:49,150
issue with yeah okay okay so we need

1751
01:28:47,170 --> 01:28:51,310
text and we need text for this and the

1752
01:28:49,150 --> 01:28:57,299
implementation but the issue itself is

1753
01:28:51,310 --> 01:28:59,170
we have a sufficient mechanism for it so

1754
01:28:57,300 --> 01:29:01,300
there's the question between

1755
01:28:59,170 --> 01:29:04,450
differentially bad selection

1756
01:29:01,300 --> 01:29:08,020
configurations from connection issues so

1757
01:29:04,450 --> 01:29:11,170
currently we want just have one initiate

1758
01:29:08,020 --> 01:29:18,070
error event that could be everything

1759
01:29:11,170 --> 01:29:20,260
from racing failed to use just specified

1760
01:29:18,070 --> 01:29:25,120
in unsatisfiable configuration with the

1761
01:29:20,260 --> 01:29:28,060
transfer properties there are three ways

1762
01:29:25,120 --> 01:29:32,760
or two ways which I could imagine to

1763
01:29:28,060 --> 01:29:36,220
solve this one is at another event that

1764
01:29:32,760 --> 01:29:38,500
tells you that this is unsatisfiable or

1765
01:29:36,220 --> 01:29:41,440
the other one is to extent the

1766
01:29:38,500 --> 01:29:44,110
initialization error to contain a reason

1767
01:29:41,440 --> 01:29:45,730
which could be configurations answered

1768
01:29:44,110 --> 01:29:48,130
as far away or we don't have any

1769
01:29:45,730 --> 01:29:52,839
candidates that certifies satisfy your

1770
01:29:48,130 --> 01:29:54,640
properties in what I'm in favor of I

1771
01:29:52,840 --> 01:29:58,290
would like the initiation error to

1772
01:29:54,640 --> 01:30:01,060
contain some kind of reason could be an

1773
01:29:58,290 --> 01:30:01,660
implementation specific enumeration or

1774
01:30:01,060 --> 01:30:04,000
something

1775
01:30:01,660 --> 01:30:05,980
I think there's multiple like failure

1776
01:30:04,000 --> 01:30:09,160
modes and we want to initiate an arrow

1777
01:30:05,980 --> 01:30:09,699
to contain some information about why it

1778
01:30:09,160 --> 01:30:11,469
failed

1779
01:30:09,699 --> 01:30:13,629
I don't think that we right now can

1780
01:30:11,469 --> 01:30:16,150
foresee all the different reasons why

1781
01:30:13,630 --> 01:30:19,210
something might fail and so I would say

1782
01:30:16,150 --> 01:30:21,699
it should be information included in the

1783
01:30:19,210 --> 01:30:28,510
error but we can probably not specify

1784
01:30:21,699 --> 01:30:30,780
all of them hi

1785
01:30:28,510 --> 01:30:34,000
Brennan Trammell I'm a little confused

1786
01:30:30,780 --> 01:30:36,580
because I thought and maybe this text

1787
01:30:34,000 --> 01:30:38,080
came out of the draft or maybe I'm just

1788
01:30:36,580 --> 01:30:41,380
thinking about post sockets and it never

1789
01:30:38,080 --> 01:30:44,830
went into this draft um that if you try

1790
01:30:41,380 --> 01:30:48,160
to initiate on unsatisfiable constraints

1791
01:30:44,830 --> 01:30:51,190
that should be throw an event it should

1792
01:30:48,160 --> 01:30:52,210
give you an error on the call itself for

1793
01:30:51,190 --> 01:30:53,949
eight like the point of an initiation

1794
01:30:52,210 --> 01:30:55,060
error the reason that that's an event is

1795
01:30:53,949 --> 01:30:57,639
that the initiation happens

1796
01:30:55,060 --> 01:30:59,650
asynchronously whereas everything you

1797
01:30:57,640 --> 01:31:02,920
know about an unsatisfiable selection

1798
01:30:59,650 --> 01:31:04,540
configuration happens at calls line you

1799
01:31:02,920 --> 01:31:06,010
have enough information to resolve the

1800
01:31:04,540 --> 01:31:07,210
failure at the time that you make the

1801
01:31:06,010 --> 01:31:09,760
call so you don't have to queue an event

1802
01:31:07,210 --> 01:31:11,110
it is it's not asynchronous and I don't

1803
01:31:09,760 --> 01:31:12,960
recall whether that means in two taps

1804
01:31:11,110 --> 01:31:21,870
her if I'm just remembering post sockets

1805
01:31:12,960 --> 01:31:21,870
Tommy you have hasn't returned value oh

1806
01:31:22,440 --> 01:31:28,690
yeah so when go you have a multiple

1807
01:31:25,270 --> 01:31:30,340
thing right yeah but um that having been

1808
01:31:28,690 --> 01:31:32,199
said I still think that we want to add

1809
01:31:30,340 --> 01:31:33,400
additional information initiation error

1810
01:31:32,199 --> 01:31:35,739
event because there are other

1811
01:31:33,400 --> 01:31:39,610
asynchronous things that can that can

1812
01:31:35,739 --> 01:31:45,879
that can happen right so yeah I would

1813
01:31:39,610 --> 01:31:48,580
suggest resolutions beyond this one Mike

1814
01:31:45,880 --> 01:31:49,739
Alyssa I think max has opened two or

1815
01:31:48,580 --> 01:31:52,630
three issues that relate to

1816
01:31:49,739 --> 01:31:54,160
communicating specific arrows or adding

1817
01:31:52,630 --> 01:31:56,860
information to arrows

1818
01:31:54,160 --> 01:31:58,449
what about just adding a listed in the

1819
01:31:56,860 --> 01:32:00,610
appendix to you know a list of error

1820
01:31:58,449 --> 01:32:05,428
codes say these are initiation error is

1821
01:32:00,610 --> 01:32:05,429
these kinds of errors and explanation

1822
01:32:06,390 --> 01:32:13,210
yeah max franca and first of all it's

1823
01:32:10,570 --> 01:32:14,920
somewhat related I also the nature about

1824
01:32:13,210 --> 01:32:16,510
initiation ever being very specific

1825
01:32:14,920 --> 01:32:17,949
right now when it should occur and I

1826
01:32:16,510 --> 01:32:19,630
think it should just be more generic

1827
01:32:17,949 --> 01:32:20,469
because the thing I just said about

1828
01:32:19,630 --> 01:32:22,080
motorcars

1829
01:32:20,469 --> 01:32:24,540
then it should fail out it should also

1830
01:32:22,080 --> 01:32:25,890
initiation aright the local versus the

1831
01:32:24,540 --> 01:32:28,740
group addressed but it isn't a unicast

1832
01:32:25,890 --> 01:32:31,980
receive stream so that's the thing and I

1833
01:32:28,740 --> 01:32:33,690
think the error events like descriptions

1834
01:32:31,980 --> 01:32:35,370
of errors or however you want to call it

1835
01:32:33,690 --> 01:32:37,379
shouldn't just be on initiation errors

1836
01:32:35,370 --> 01:32:38,880
but maybe should be on all error events

1837
01:32:37,380 --> 01:32:41,100
in general that might be useful

1838
01:32:38,880 --> 01:32:42,900
like you probably always want as much

1839
01:32:41,100 --> 01:32:49,890
information as you can get from the

1840
01:32:42,900 --> 01:32:52,950
events Tommy I'm Colin yes so definitely

1841
01:32:49,890 --> 01:32:57,330
on these in favor of be and generally in

1842
01:32:52,950 --> 01:33:00,150
favor of having fewer events with more

1843
01:32:57,330 --> 01:33:03,360
descriptive errors being returned I

1844
01:33:00,150 --> 01:33:05,580
think this is actually a rather EPI

1845
01:33:03,360 --> 01:33:07,019
design thing and we would look similar

1846
01:33:05,580 --> 01:33:10,500
to some of the conversations we have

1847
01:33:07,020 --> 01:33:12,150
around send sending gating the various

1848
01:33:10,500 --> 01:33:14,400
completions you can have to send like I

1849
01:33:12,150 --> 01:33:19,230
was able to set this or I got an error

1850
01:33:14,400 --> 01:33:22,980
or maybe even whose act having one event

1851
01:33:19,230 --> 01:33:24,330
that you expect he's a lot easier for

1852
01:33:22,980 --> 01:33:26,190
the application to handle right because

1853
01:33:24,330 --> 01:33:28,920
if the application depending on the

1854
01:33:26,190 --> 01:33:29,879
language has memory or state of actions

1855
01:33:28,920 --> 01:33:33,120
that they need to be able to take

1856
01:33:29,880 --> 01:33:35,430
knowing that there will be one event

1857
01:33:33,120 --> 01:33:37,980
that they need to handle in completion

1858
01:33:35,430 --> 01:33:40,770
of an action as opposed to any number of

1859
01:33:37,980 --> 01:33:43,110
things they just gets a lot more complex

1860
01:33:40,770 --> 01:33:44,940
with them and less practical to hold API

1861
01:33:43,110 --> 01:33:46,769
so I think when we're looking at things

1862
01:33:44,940 --> 01:33:48,480
like this unless we have a really good

1863
01:33:46,770 --> 01:33:50,880
reason we shouldn't be adding extra

1864
01:33:48,480 --> 01:33:57,570
events that can just be communicated in

1865
01:33:50,880 --> 01:34:02,070
single events so is there anyone who

1866
01:33:57,570 --> 01:34:05,849
wants to give it make a PR and may do a

1867
01:34:02,070 --> 01:34:09,240
make over of the error events to add

1868
01:34:05,850 --> 01:34:13,010
reasons make a proposal for our text for

1869
01:34:09,240 --> 01:34:13,010
that there's some volunteer

1870
01:34:18,680 --> 01:34:22,310
mucks your warranty

1871
01:34:23,000 --> 01:34:47,520
okay well you can quit boring so there's

1872
01:34:35,430 --> 01:34:50,780
an issue race by Colin consider API that

1873
01:34:47,520 --> 01:34:53,190
takes panning policy as an input so

1874
01:34:50,780 --> 01:34:55,380
padding is increasingly supported by

1875
01:34:53,190 --> 01:35:00,450
Transport so for example you could do a

1876
01:34:55,380 --> 01:35:04,140
lot a lot of padding stuff in TCM sorry

1877
01:35:00,450 --> 01:35:07,650
um now was UDP light but you can also do

1878
01:35:04,140 --> 01:35:09,660
this with quick and we have some use

1879
01:35:07,650 --> 01:35:13,190
cases especially for implication if

1880
01:35:09,660 --> 01:35:17,190
occasion prevention in quake that need

1881
01:35:13,190 --> 01:35:18,990
some kind of control of padding the

1882
01:35:17,190 --> 01:35:22,200
question is whether we want to expose

1883
01:35:18,990 --> 01:35:24,480
this functionality within tabs I'm not

1884
01:35:22,200 --> 01:35:27,210
asking whether how we want to expose

1885
01:35:24,480 --> 01:35:30,570
them just ask me whether we want to

1886
01:35:27,210 --> 01:35:32,460
expose it at all the reason why you

1887
01:35:30,570 --> 01:35:35,190
might want to expose it in the transport

1888
01:35:32,460 --> 01:35:37,980
is that you don't know the MTU you don't

1889
01:35:35,190 --> 01:35:41,639
know for example if this is petting

1890
01:35:37,980 --> 01:35:44,429
before interruption how much encryption

1891
01:35:41,640 --> 01:35:47,550
or overhead this there will be so

1892
01:35:44,430 --> 01:35:50,090
petting just if you buy AB and too much

1893
01:35:47,550 --> 01:35:53,010
bytes can just make a packet to bake so

1894
01:35:50,090 --> 01:35:55,230
it makes sense to give this as an input

1895
01:35:53,010 --> 01:36:00,450
through the transport so the question is

1896
01:35:55,230 --> 01:36:02,700
whether we want to include that Eric can

1897
01:36:00,450 --> 01:36:04,860
your Apple I think aside from the fact

1898
01:36:02,700 --> 01:36:07,800
that like yay padding in good things to

1899
01:36:04,860 --> 01:36:10,099
consider padding is one of the things

1900
01:36:07,800 --> 01:36:12,630
like you said with the overhead and

1901
01:36:10,100 --> 01:36:14,040
especially on more expensive interfaces

1902
01:36:12,630 --> 01:36:17,250
and things like that there may be a cost

1903
01:36:14,040 --> 01:36:18,810
and so that's something where I think we

1904
01:36:17,250 --> 01:36:21,720
have to expose it if we want to be able

1905
01:36:18,810 --> 01:36:23,610
to do it in because like you just said

1906
01:36:21,720 --> 01:36:27,360
the application doesn't know how to do

1907
01:36:23,610 --> 01:36:28,540
it and the the the protocol that knows

1908
01:36:27,360 --> 01:36:30,190
how to do it doesn't

1909
01:36:28,540 --> 01:36:42,160
it's allowed to do it and that's kind of

1910
01:36:30,190 --> 01:36:44,200
definition so Cory if we have a 30 year

1911
01:36:42,160 --> 01:36:46,450
information then maybe we can do

1912
01:36:44,200 --> 01:36:49,349
something smarter here otherwise we just

1913
01:36:46,450 --> 01:36:49,349
do something stupid

1914
01:36:52,850 --> 01:36:58,150
[Laughter]

1915
01:36:58,380 --> 01:37:03,610
Dominic's I mean while I agree this is a

1916
01:37:00,610 --> 01:37:06,910
useful thing I'm not I mean I also feel

1917
01:37:03,610 --> 01:37:09,009
like we do want to finish and I feel

1918
01:37:06,910 --> 01:37:10,330
like you know just because we published

1919
01:37:09,010 --> 01:37:12,250
the first document says he was never

1920
01:37:10,330 --> 01:37:13,900
going to be extensions so 100 fish

1921
01:37:12,250 --> 01:37:14,980
should be you know something that we

1922
01:37:13,900 --> 01:37:24,339
start thinking about okay what do we

1923
01:37:14,980 --> 01:37:26,259
want as exceptions to the basically

1924
01:37:24,340 --> 01:37:28,540
minute so I think there should be away

1925
01:37:26,260 --> 01:37:30,220
in the API to support some kind of use

1926
01:37:28,540 --> 01:37:31,930
of petting but there might be different

1927
01:37:30,220 --> 01:37:35,260
ways to implement it another way is to

1928
01:37:31,930 --> 01:37:37,210
you know tell the application what the

1929
01:37:35,260 --> 01:37:38,350
maximum size is the message can happen

1930
01:37:37,210 --> 01:37:40,240
the application again with the petting

1931
01:37:38,350 --> 01:37:41,890
or the other way around 2000 transport

1932
01:37:40,240 --> 01:37:44,290
what the message sizes you want and then

1933
01:37:41,890 --> 01:37:46,660
the transport in do something on this

1934
01:37:44,290 --> 01:37:48,790
this can be problematic if you want to

1935
01:37:46,660 --> 01:37:52,809
have read the patent or for example heck

1936
01:37:48,790 --> 01:37:54,460
happy within quick then you can't easily

1937
01:37:52,810 --> 01:37:57,180
do it wasn't the application is the

1938
01:37:54,460 --> 01:37:57,180
transporter

1939
01:38:01,290 --> 01:38:05,740
so you can you can you can in the

1940
01:38:04,300 --> 01:38:08,350
interface could talk about the message

1941
01:38:05,740 --> 01:38:13,570
message size instead of using petting as

1942
01:38:08,350 --> 01:38:37,060
a function okay cut yep so somebody's

1943
01:38:13,570 --> 01:38:41,389
going to start a API miss X next show a

1944
01:38:37,060 --> 01:38:45,500
bucket to put it in okay

1945
01:38:41,389 --> 01:38:47,630
so suppose we just add a label on get up

1946
01:38:45,500 --> 01:38:51,290
for the extensions and put this is the

1947
01:38:47,630 --> 01:38:55,429
first one under the label that says it's

1948
01:38:51,290 --> 01:38:58,130
not the first one scoring you know I

1949
01:38:55,429 --> 01:38:59,330
know in a bit time here but um everyone

1950
01:38:58,130 --> 01:39:01,670
have a sign the beginning we said we

1951
01:38:59,330 --> 01:39:03,050
just like to finish these things yes so

1952
01:39:01,670 --> 01:39:05,510
what did we do with this list when we

1953
01:39:03,050 --> 01:39:07,369
finish we will decide that when we

1954
01:39:05,510 --> 01:39:08,540
decide whether what happens with the

1955
01:39:07,369 --> 01:39:10,130
working group I mean what I want to do

1956
01:39:08,540 --> 01:39:11,630
is publish these three documents right

1957
01:39:10,130 --> 01:39:12,770
if there are other documents that might

1958
01:39:11,630 --> 01:39:14,600
happen in this group it might happen

1959
01:39:12,770 --> 01:39:17,119
somewhere else yeah super stress are

1960
01:39:14,600 --> 01:39:19,610
quite happy unhappy Independence someone

1961
01:39:17,119 --> 01:39:22,429
that says under other things rather than

1962
01:39:19,610 --> 01:39:24,349
trying to decide no yeah no that's what

1963
01:39:22,429 --> 01:39:25,489
I'm saying I'm actually I'm saying I'm

1964
01:39:24,350 --> 01:39:27,050
making a stronger statement that we

1965
01:39:25,489 --> 01:39:28,369
should just we should note it somewhere

1966
01:39:27,050 --> 01:39:29,630
where we are keeping track of things

1967
01:39:28,369 --> 01:39:35,059
that we could do in the future I'm not

1968
01:39:29,630 --> 01:39:36,860
saying I'm trying to push it out I would

1969
01:39:35,060 --> 01:39:38,420
suggest that the github issues list is

1970
01:39:36,860 --> 01:39:42,380
the perfect pose to do that stick a tax

1971
01:39:38,420 --> 01:39:43,850
ID stick a tag on it that says no we

1972
01:39:42,380 --> 01:39:46,130
create a new tag that's like hey things

1973
01:39:43,850 --> 01:39:47,300
that are gonna happen in extensions like

1974
01:39:46,130 --> 01:39:48,830
we have decided as a working group

1975
01:39:47,300 --> 01:39:50,179
please don't go in the core Docs but

1976
01:39:48,830 --> 01:39:52,340
we've also said just working group that

1977
01:39:50,179 --> 01:39:54,320
we want to do them so and this is why if

1978
01:39:52,340 --> 01:39:55,940
this is a this is a pretty easy thing to

1979
01:39:54,320 --> 01:39:59,710
add right like so it's it's a message

1980
01:39:55,940 --> 01:40:02,239
context sorry property right Sam yeah it

1981
01:39:59,710 --> 01:40:03,889
do you think that there is other future

1982
01:40:02,239 --> 01:40:05,839
work besides extensions is there a

1983
01:40:03,889 --> 01:40:08,600
different tag that is future work we

1984
01:40:05,840 --> 01:40:10,250
just got a few worker yeah we don't even

1985
01:40:08,600 --> 01:40:11,179
need it I mean like extension you don't

1986
01:40:10,250 --> 01:40:12,080
wanna use it yeah you're right we know

1987
01:40:11,179 --> 01:40:13,969
we use the word extension because

1988
01:40:12,080 --> 01:40:15,559
extension might mean something exactly I

1989
01:40:13,969 --> 01:40:18,050
thought you were using anyway that means

1990
01:40:15,560 --> 01:40:23,770
something you know yeah so if you droid

1991
01:40:18,050 --> 01:40:23,770
I will do that right now

1992
01:40:29,800 --> 01:40:37,719
yeah should send return message contract

1993
01:40:32,900 --> 01:40:40,250
this one are is some kind of issue that

1994
01:40:37,719 --> 01:40:43,340
started as more as a semantic one but

1995
01:40:40,250 --> 01:40:46,400
turned out to be ever actually be two

1996
01:40:43,340 --> 01:40:49,330
questions the first one is there are

1997
01:40:46,400 --> 01:40:51,320
concerns that and often unused

1998
01:40:49,330 --> 01:40:54,210
convenience return value could be

1999
01:40:51,320 --> 01:40:57,540
harmful in some languages

2000
01:40:54,210 --> 01:40:59,430
which is the easy one so just drop it if

2001
01:40:57,540 --> 01:41:02,040
you don't like it the second one is more

2002
01:40:59,430 --> 01:41:04,200
interesting because sent hours are

2003
01:41:02,040 --> 01:41:08,160
currently want one matched with send

2004
01:41:04,200 --> 01:41:13,639
code so if he's issue a San call you get

2005
01:41:08,160 --> 01:41:22,530
one sent error if this data wasn't sound

2006
01:41:13,640 --> 01:41:24,060
so for the first one the question is for

2007
01:41:22,530 --> 01:41:26,040
the first sponsor of the question the

2008
01:41:24,060 --> 01:41:27,510
original question whether said San

2009
01:41:26,040 --> 01:41:29,730
should return a message contact as a

2010
01:41:27,510 --> 01:41:31,290
convenience or not we have the

2011
01:41:29,730 --> 01:41:34,620
resolution to either remove the message

2012
01:41:31,290 --> 01:41:39,600
content of return value or have it

2013
01:41:34,620 --> 01:41:41,160
option one as a convenience and make it

2014
01:41:39,600 --> 01:41:43,860
optional for languages that have

2015
01:41:41,160 --> 01:41:50,190
problems with unused return Louis is

2016
01:41:43,860 --> 01:41:54,870
there any time so my initial confusion

2017
01:41:50,190 --> 01:41:57,480
here was what is this return value so if

2018
01:41:54,870 --> 01:42:00,360
I call send and I give you a message

2019
01:41:57,480 --> 01:42:03,809
context that here's the message I want

2020
01:42:00,360 --> 01:42:06,150
to say will the return value ever be

2021
01:42:03,810 --> 01:42:08,040
anything other than what I passed as the

2022
01:42:06,150 --> 01:42:11,299
message context now what will always

2023
01:42:08,040 --> 01:42:15,060
speed the message context to your past

2024
01:42:11,300 --> 01:42:17,790
which is a little confusing then so the

2025
01:42:15,060 --> 01:42:20,310
only case it is a relevant value is when

2026
01:42:17,790 --> 01:42:22,220
I pass like a default or nil or

2027
01:42:20,310 --> 01:42:27,000
something I didn't specify anything and

2028
01:42:22,220 --> 01:42:28,860
then for some reason I want but then I

2029
01:42:27,000 --> 01:42:30,210
realized that I want to care about what

2030
01:42:28,860 --> 01:42:32,280
the value was how they didn't want to

2031
01:42:30,210 --> 01:42:34,650
create something so if you don't want to

2032
01:42:32,280 --> 01:42:38,940
create a message context but afterwards

2033
01:42:34,650 --> 01:42:41,690
would like to introspect on which was

2034
01:42:38,940 --> 01:42:44,099
the source of rs.10 for this telegram or

2035
01:42:41,690 --> 01:42:46,620
some other values that the transport

2036
01:42:44,100 --> 01:42:52,020
system shows that's the only reason or

2037
01:42:46,620 --> 01:42:54,660
if you want to later on use it for use

2038
01:42:52,020 --> 01:42:56,820
it for reply matching what would you

2039
01:42:54,660 --> 01:42:59,880
which we edit this is the only reason

2040
01:42:56,820 --> 01:43:03,420
these are the only reasons where you

2041
01:42:59,880 --> 01:43:04,850
want to use this return value you just

2042
01:43:03,420 --> 01:43:06,500
always pass a value

2043
01:43:04,850 --> 01:43:07,940
if you care about using it and that

2044
01:43:06,500 --> 01:43:10,520
should be very cheap it should be easy

2045
01:43:07,940 --> 01:43:11,629
to do but it's you should pass the

2046
01:43:10,520 --> 01:43:17,210
handle that you want because we already

2047
01:43:11,630 --> 01:43:18,680
take that yeah and and if there's

2048
01:43:17,210 --> 01:43:20,600
something you want to learn about what

2049
01:43:18,680 --> 01:43:22,610
they want the transfer system chosen tit

2050
01:43:20,600 --> 01:43:24,530
and that should be a queryable parameter

2051
01:43:22,610 --> 01:43:31,219
or something like that and not not a

2052
01:43:24,530 --> 01:43:34,550
result of sin which is just okay plus

2053
01:43:31,220 --> 01:43:41,000
two this seems like it's very very very

2054
01:43:34,550 --> 01:43:42,740
C C API driven and it seems like is

2055
01:43:41,000 --> 01:43:46,430
leaking sort of like specific language

2056
01:43:42,740 --> 01:43:48,889
semantics I like I like Tommy's

2057
01:43:46,430 --> 01:43:52,670
revolution here okay so can we go ahead

2058
01:43:48,890 --> 01:43:54,230
and close this yeah close the first half

2059
01:43:52,670 --> 01:43:57,680
on the second tab is the more

2060
01:43:54,230 --> 01:43:59,809
interesting one I guess the question is

2061
01:43:57,680 --> 01:44:02,960
centers are cruelly one-to-one match

2062
01:43:59,810 --> 01:44:04,670
with send calls so if you have an

2063
01:44:02,960 --> 01:44:08,200
application that's stupid and that

2064
01:44:04,670 --> 01:44:11,720
writes by twice and at some later point

2065
01:44:08,200 --> 01:44:14,559
that's filling up some send buffer at at

2066
01:44:11,720 --> 01:44:17,120
some later point in time

2067
01:44:14,560 --> 01:44:19,910
this connection dies and there's still

2068
01:44:17,120 --> 01:44:22,070
stuff sitting in the send buffer and

2069
01:44:19,910 --> 01:44:29,599
there's a few kilobytes then you get a

2070
01:44:22,070 --> 01:44:32,090
few thousands send arrows back so the

2071
01:44:29,600 --> 01:44:35,450
question is is this the behavior we want

2072
01:44:32,090 --> 01:44:37,460
or do we want to have another way by

2073
01:44:35,450 --> 01:44:40,940
saying either you could just get one

2074
01:44:37,460 --> 01:44:43,100
cent error and some reason or some

2075
01:44:40,940 --> 01:44:46,280
message context object telling you which

2076
01:44:43,100 --> 01:44:49,040
sense failed or have some property how

2077
01:44:46,280 --> 01:45:06,039
to control the aggregation of these

2078
01:44:49,040 --> 01:45:09,849
events document currently

2079
01:45:06,039 --> 01:45:11,978
says that especially for each cent call

2080
01:45:09,849 --> 01:45:25,239
you did you get the sent error event

2081
01:45:11,979 --> 01:45:47,079
potentially as I read the document

2082
01:45:25,239 --> 01:45:50,799
currently it would be we are out of time

2083
01:45:47,079 --> 01:46:00,280
for this session so now you're eating

2084
01:45:50,799 --> 01:46:01,949
into a discussion of yang models your

2085
01:46:00,280 --> 01:46:04,839
assumptions that every send will

2086
01:46:01,949 --> 01:46:09,068
eventually either get an error or a set

2087
01:46:04,839 --> 01:46:10,989
right okay so it's not it's not going to

2088
01:46:09,069 --> 01:46:15,399
make it a sender it's a will definitely

2089
01:46:10,989 --> 01:46:16,388
get either successes go so that so they

2090
01:46:15,399 --> 01:46:18,639
know that there's something there's a

2091
01:46:16,389 --> 01:46:20,859
thing is like a a final error on the

2092
01:46:18,639 --> 01:46:25,530
connection after which everything after

2093
01:46:20,859 --> 01:46:25,530
that gets neither success or failure I

2094
01:46:25,769 --> 01:46:34,929
think we should take this discussion to

2095
01:46:29,049 --> 01:46:47,109
the list I have more but I think we

2096
01:46:34,929 --> 01:46:49,479
should discuss the yang model yeah so

2097
01:46:47,109 --> 01:46:51,159
the next questions are basically how to

2098
01:46:49,479 --> 01:46:56,289
handle protocol stacks that are not

2099
01:46:51,159 --> 01:46:59,589
equivalent draft appointed existing

2100
01:46:56,289 --> 01:47:01,659
implementations and implementation

2101
01:46:59,589 --> 01:47:05,019
should separate our protocol specific

2102
01:47:01,659 --> 01:47:07,539
bits so perhaps as a way to move forward

2103
01:47:05,019 --> 01:47:09,039
you could just take the text with links

2104
01:47:07,539 --> 01:47:10,959
to the issues and send those it's

2105
01:47:09,039 --> 01:47:12,219
individual messages to the taps list and

2106
01:47:10,959 --> 01:47:13,659
we could try to get a little bit of

2107
01:47:12,219 --> 01:47:16,829
discussion on there and see if we can

2108
01:47:13,659 --> 01:47:19,820
make some progress okay but it does seem

2109
01:47:16,829 --> 01:47:21,170
if we don't if we unable do that

2110
01:47:19,820 --> 01:47:30,110
seems like this is a good material for

2111
01:47:21,170 --> 01:47:57,590
an interim yep I thought he said you're

2112
01:47:30,110 --> 01:48:00,139
closing the first half hello

2113
01:47:57,590 --> 01:48:02,480
so I'm not going to talk a lot about

2114
01:48:00,140 --> 01:48:04,850
Yang actually but mostly about testing

2115
01:48:02,480 --> 01:48:06,919
tabs because that's what we were using

2116
01:48:04,850 --> 01:48:10,550
the yang model for in the hackathon so

2117
01:48:06,920 --> 01:48:12,290
max Jake and I were basically

2118
01:48:10,550 --> 01:48:14,240
participating in the hackathon the

2119
01:48:12,290 --> 01:48:16,550
entire week and and doing various things

2120
01:48:14,240 --> 01:48:20,870
like implementing multicast but what I

2121
01:48:16,550 --> 01:48:23,480
focused on wasn't testing so um what we

2122
01:48:20,870 --> 01:48:26,390
are using yang for right now is so you

2123
01:48:23,480 --> 01:48:29,240
have we're creating a pre connection and

2124
01:48:26,390 --> 01:48:31,280
you have to specify a remote endpoint a

2125
01:48:29,240 --> 01:48:34,040
local endpoint transfer properties and

2126
01:48:31,280 --> 01:48:36,650
security parameters as you can see above

2127
01:48:34,040 --> 01:48:38,780
and of course all of these have to be

2128
01:48:36,650 --> 01:48:41,269
filled first with like some content and

2129
01:48:38,780 --> 01:48:43,790
now what the yang file gives us is that

2130
01:48:41,270 --> 01:48:47,060
we essentially substitute all those four

2131
01:48:43,790 --> 01:48:49,850
parameters and the initial like filling

2132
01:48:47,060 --> 01:48:52,670
those parameters with data we substitute

2133
01:48:49,850 --> 01:48:56,180
all that with a yang file which contains

2134
01:48:52,670 --> 01:48:58,130
like some remote and point address or

2135
01:48:56,180 --> 01:49:00,080
hostname and port and transport

2136
01:48:58,130 --> 01:49:02,180
properties and security parameters and

2137
01:49:00,080 --> 01:49:04,280
all the stuff it's in a single file it's

2138
01:49:02,180 --> 01:49:07,070
easy to refer to for example in a test

2139
01:49:04,280 --> 01:49:10,130
case I can say ok I have my UDP client

2140
01:49:07,070 --> 01:49:11,840
to Jason and then I throw it into my

2141
01:49:10,130 --> 01:49:14,090
tests and they send something I get

2142
01:49:11,840 --> 01:49:16,940
something else I get something back I

2143
01:49:14,090 --> 01:49:19,670
check whether us what I expected and the

2144
01:49:16,940 --> 01:49:22,120
advantage of having it in a model is

2145
01:49:19,670 --> 01:49:25,520
that it's easier to port across

2146
01:49:22,120 --> 01:49:28,970
implementation so I I'm going to go back

2147
01:49:25,520 --> 01:49:31,600
to this later on so this is sort of

2148
01:49:28,970 --> 01:49:34,840
their benefits of Yang

2149
01:49:31,600 --> 01:49:36,910
that I got and the pain points is

2150
01:49:34,840 --> 01:49:39,610
actually or it's not actually that much

2151
01:49:36,910 --> 01:49:41,559
of a pain point anymore once you have it

2152
01:49:39,610 --> 01:49:44,309
but getting it to work is first a little

2153
01:49:41,560 --> 01:49:46,960
bit weird because it is a different

2154
01:49:44,310 --> 01:49:49,540
implementations of yang but pi yang was

2155
01:49:46,960 --> 01:49:51,730
too painful for validating instances of

2156
01:49:49,540 --> 01:49:55,960
models for some reason so what we are

2157
01:49:51,730 --> 01:49:58,419
using for pi EPSA kaliya c++ library

2158
01:49:55,960 --> 01:50:01,150
you'll have to install this library and

2159
01:49:58,420 --> 01:50:02,740
you have to build it and we got it to

2160
01:50:01,150 --> 01:50:04,679
work so there's a shell script so if you

2161
01:50:02,740 --> 01:50:08,440
check out our repo and you just run this

2162
01:50:04,680 --> 01:50:10,090
script it works on linux and mac OS on

2163
01:50:08,440 --> 01:50:10,690
our machine so actually it's not that

2164
01:50:10,090 --> 01:50:12,490
bad

2165
01:50:10,690 --> 01:50:17,889
to get it to work but it's sort of a

2166
01:50:12,490 --> 01:50:22,750
little bit ugly but yeah so what we did

2167
01:50:17,890 --> 01:50:25,510
with this model was I wrote some tests

2168
01:50:22,750 --> 01:50:27,100
basically sending data and then I'm

2169
01:50:25,510 --> 01:50:30,010
running an echo server and getting back

2170
01:50:27,100 --> 01:50:33,420
data so I test whether TCP works what

2171
01:50:30,010 --> 01:50:36,400
are you DP works without gos works and

2172
01:50:33,420 --> 01:50:38,910
next steps could be to also test like

2173
01:50:36,400 --> 01:50:41,679
for example failure modes and while

2174
01:50:38,910 --> 01:50:44,650
testing these of course we found some

2175
01:50:41,680 --> 01:50:46,900
issues too in the code sandbox to fix

2176
01:50:44,650 --> 01:50:50,139
but also I looked a little bit more at

2177
01:50:46,900 --> 01:50:52,240
the model and for example the security

2178
01:50:50,140 --> 01:50:54,540
parameters right now in the model have

2179
01:50:52,240 --> 01:50:58,080
the identity and the algorithm as

2180
01:50:54,540 --> 01:51:02,200
required so you always have to specify a

2181
01:50:58,080 --> 01:51:03,940
algorithm and I think it's not always

2182
01:51:02,200 --> 01:51:05,710
necessary for example if I give you a

2183
01:51:03,940 --> 01:51:08,559
certificate and in a certificate the

2184
01:51:05,710 --> 01:51:10,690
algorithm is already in there right so

2185
01:51:08,560 --> 01:51:12,550
like my application doesn't necessarily

2186
01:51:10,690 --> 01:51:14,259
have to give me an aggravatin just

2187
01:51:12,550 --> 01:51:17,980
because it gives me a certificate and

2188
01:51:14,260 --> 01:51:19,960
also maybe I'm a client maybe I don't

2189
01:51:17,980 --> 01:51:23,110
have my own certificate and then I don't

2190
01:51:19,960 --> 01:51:25,330
have to give my certificate to like the

2191
01:51:23,110 --> 01:51:26,980
API right so they could both be optional

2192
01:51:25,330 --> 01:51:29,940
depending on whether I'm a server or a

2193
01:51:26,980 --> 01:51:33,639
client and TLS for example so this

2194
01:51:29,940 --> 01:51:36,669
should probably be optional and then

2195
01:51:33,640 --> 01:51:39,790
another suggestion was to sort of do

2196
01:51:36,670 --> 01:51:41,620
more sanity check for this pre

2197
01:51:39,790 --> 01:51:43,269
connection and endpoint configuration

2198
01:51:41,620 --> 01:51:44,110
that we are getting so for example we

2199
01:51:43,270 --> 01:51:46,210
could

2200
01:51:44,110 --> 01:51:48,790
check if at least one endpoint has been

2201
01:51:46,210 --> 01:51:50,140
specified in this JSON file right

2202
01:51:48,790 --> 01:51:52,120
because either it's a client or a server

2203
01:51:50,140 --> 01:51:55,690
either needs a local or a remote

2204
01:51:52,120 --> 01:51:57,190
endpoint and we could check that and we

2205
01:51:55,690 --> 01:51:58,960
could also check if there's transport

2206
01:51:57,190 --> 01:52:00,969
properties and there that exclude each

2207
01:51:58,960 --> 01:52:02,950
other but if we don't do that then our

2208
01:52:00,970 --> 01:52:05,410
implementation should throw an error

2209
01:52:02,950 --> 01:52:09,340
that those properties exclude each other

2210
01:52:05,410 --> 01:52:11,950
or something like that so again what the

2211
01:52:09,340 --> 01:52:13,750
yang mother gives us is that we have the

2212
01:52:11,950 --> 01:52:16,630
pre connection at the endpoint sort of

2213
01:52:13,750 --> 01:52:19,270
all in the same file specified and we

2214
01:52:16,630 --> 01:52:21,370
can do sanity checks on them first and

2215
01:52:19,270 --> 01:52:23,740
then we can throw those files into the

2216
01:52:21,370 --> 01:52:25,090
implementation and see what the

2217
01:52:23,740 --> 01:52:27,340
implementation does with it and

2218
01:52:25,090 --> 01:52:30,280
hopefully my tips does a similar thing

2219
01:52:27,340 --> 01:52:32,170
with the with the young file then for

2220
01:52:30,280 --> 01:52:34,330
example Apple implementation does so

2221
01:52:32,170 --> 01:52:36,340
that's the basic idea also we could add

2222
01:52:34,330 --> 01:52:38,910
profiles to the yang model but I guess

2223
01:52:36,340 --> 01:52:42,610
we would have to agree on profiles first

2224
01:52:38,910 --> 01:52:44,889
right so two really interesting points

2225
01:52:42,610 --> 01:52:47,559
that came up in the hackathon was first

2226
01:52:44,890 --> 01:52:50,020
the yang model includes an interface

2227
01:52:47,560 --> 01:52:52,450
type and I remember the discussion we

2228
01:52:50,020 --> 01:52:56,140
had on interface type so days in a yenna

2229
01:52:52,450 --> 01:52:58,630
AF type yang module which contains lots

2230
01:52:56,140 --> 01:53:03,490
and lots of different link types so this

2231
01:52:58,630 --> 01:53:04,960
802 11 is in there I found it I'm not

2232
01:53:03,490 --> 01:53:07,870
sure I actually found a different

2233
01:53:04,960 --> 01:53:09,400
cellular like links but I guess they

2234
01:53:07,870 --> 01:53:11,170
probably also in there and then there's

2235
01:53:09,400 --> 01:53:14,379
like hundreds of different link types

2236
01:53:11,170 --> 01:53:16,720
that I don't really know but right now

2237
01:53:14,380 --> 01:53:19,180
the yang model that Jake wrote import

2238
01:53:16,720 --> 01:53:22,300
sort of those link types so you can like

2239
01:53:19,180 --> 01:53:25,090
say I require Wi-Fi and then you're

2240
01:53:22,300 --> 01:53:28,030
using this and in our API draft we are

2241
01:53:25,090 --> 01:53:29,170
not pointing to any specific registry of

2242
01:53:28,030 --> 01:53:31,960
different link types or different

2243
01:53:29,170 --> 01:53:34,150
interface types but we leave it up as

2244
01:53:31,960 --> 01:53:36,250
implementation specific so it could just

2245
01:53:34,150 --> 01:53:38,469
be a string saying Wi-Fi or like an enum

2246
01:53:36,250 --> 01:53:42,700
or something so I was just wondering

2247
01:53:38,470 --> 01:53:45,330
like do we still want this or I don't

2248
01:53:42,700 --> 01:53:48,940
know just found it interesting because

2249
01:53:45,330 --> 01:53:51,940
Jake just used the module right so and

2250
01:53:48,940 --> 01:53:55,449
the other thing which we maybe really

2251
01:53:51,940 --> 01:53:58,209
want is that we could also model our

2252
01:53:55,449 --> 01:54:00,428
output or essentially what we get from

2253
01:53:58,209 --> 01:54:02,550
the taps implementation so for example

2254
01:54:00,429 --> 01:54:05,739
we get a TCP connection with a specific

2255
01:54:02,550 --> 01:54:08,739
remote and local endpoint and over an

2256
01:54:05,739 --> 01:54:10,989
interface and maybe if we model this

2257
01:54:08,739 --> 01:54:13,690
this connection stage that we get as an

2258
01:54:10,989 --> 01:54:15,820
output then we have a portable input

2259
01:54:13,690 --> 01:54:17,709
which is a pre connection and endpoint

2260
01:54:15,820 --> 01:54:20,590
configuration and we might have also in

2261
01:54:17,709 --> 01:54:22,539
portable output that is the connection

2262
01:54:20,590 --> 01:54:26,619
that we got maybe or just the protocol

2263
01:54:22,539 --> 01:54:29,800
that we got and then we could test

2264
01:54:26,619 --> 01:54:32,920
whether we given a certain input whether

2265
01:54:29,800 --> 01:54:35,650
our implementation produces the expected

2266
01:54:32,920 --> 01:54:39,280
output and if both of these are portable

2267
01:54:35,650 --> 01:54:41,829
then we could run essentially a similar

2268
01:54:39,280 --> 01:54:44,709
tests on different implementations and

2269
01:54:41,829 --> 01:54:47,079
portability and like checking that this

2270
01:54:44,709 --> 01:54:48,940
is actually valid or invalid input might

2271
01:54:47,079 --> 01:54:51,880
be something that becomes easier with

2272
01:54:48,940 --> 01:54:54,129
yang because otherwise we would probably

2273
01:54:51,880 --> 01:54:57,119
have to check it in some other way but

2274
01:54:54,130 --> 01:54:59,320
also maybe not and so this is what I was

2275
01:54:57,119 --> 01:55:02,799
wondering whether there's any kind of

2276
01:54:59,320 --> 01:55:06,190
like interoperability portability tests

2277
01:55:02,800 --> 01:55:08,709
that we can define and then also of

2278
01:55:06,190 --> 01:55:10,268
course for testing we might want some

2279
01:55:08,709 --> 01:55:12,459
tests whether or implementation

2280
01:55:10,269 --> 01:55:16,229
satisfies the API contract so we've been

2281
01:55:12,459 --> 01:55:18,429
talking a lot about them different

2282
01:55:16,229 --> 01:55:20,860
different issues that came up when

2283
01:55:18,429 --> 01:55:23,349
implementing and maybe if I do this and

2284
01:55:20,860 --> 01:55:26,139
with my application return me one sent

2285
01:55:23,349 --> 01:55:28,719
event or multiple or something like that

2286
01:55:26,139 --> 01:55:31,300
and we could put those into test cases

2287
01:55:28,719 --> 01:55:33,070
and then it would be easier for for

2288
01:55:31,300 --> 01:55:35,380
example two different implementations to

2289
01:55:33,070 --> 01:55:38,440
make sure they are all doing the same

2290
01:55:35,380 --> 01:56:00,760
thing and the correct thing so those are

2291
01:55:38,440 --> 01:56:03,610
the ideas that I had that I mean this is

2292
01:56:00,760 --> 01:56:03,960
actually where the profiles idea could

2293
01:56:03,610 --> 01:56:06,000
go

2294
01:56:03,960 --> 01:56:10,170
should go right is this is really big

2295
01:56:06,000 --> 01:56:12,060
part of that very sorry but then the

2296
01:56:10,170 --> 01:56:14,670
other point regarding testing this is

2297
01:56:12,060 --> 01:56:16,800
something that we discussed at the

2298
01:56:14,670 --> 01:56:18,840
hackathon them so maybe if other people

2299
01:56:16,800 --> 01:56:21,840
have thoughts on this too if we want to

2300
01:56:18,840 --> 01:56:23,940
check the output of what the tap system

2301
01:56:21,840 --> 01:56:25,590
ends up doing basically but we give it

2302
01:56:23,940 --> 01:56:26,969
so we can either have you know

2303
01:56:25,590 --> 01:56:29,390
essentially a standard way in which all

2304
01:56:26,970 --> 01:56:31,500
the systems export what they chose to do

2305
01:56:29,390 --> 01:56:34,320
but that may be a little tricky because

2306
01:56:31,500 --> 01:56:35,520
when we have more heuristics we'll do

2307
01:56:34,320 --> 01:56:38,150
different orderings will be hard to

2308
01:56:35,520 --> 01:56:41,250
validate the other alternative is to

2309
01:56:38,150 --> 01:56:43,589
essentially have another big molar

2310
01:56:41,250 --> 01:56:47,070
whatever configuration for a server and

2311
01:56:43,590 --> 01:56:48,600
go through in pairing or turning off

2312
01:56:47,070 --> 01:56:50,670
parts of the server so you know make the

2313
01:56:48,600 --> 01:56:52,800
server only listen on one address or

2314
01:56:50,670 --> 01:56:54,840
address family or only one protocol or

2315
01:56:52,800 --> 01:56:57,390
something like that and validate that

2316
01:56:54,840 --> 01:56:59,670
the client is always able to do some

2317
01:56:57,390 --> 01:57:02,400
racing that ends up connecting you don't

2318
01:56:59,670 --> 01:57:04,170
necessarily care about the order as much

2319
01:57:02,400 --> 01:57:06,900
as we do the end result that we are

2320
01:57:04,170 --> 01:57:09,510
still resilient to however it works so

2321
01:57:06,900 --> 01:57:11,730
that's another approach okay yeah so

2322
01:57:09,510 --> 01:57:13,320
that would already be possible with the

2323
01:57:11,730 --> 01:57:15,120
current yang model I think we have one

2324
01:57:13,320 --> 01:57:17,490
yang for the server one thing for the

2325
01:57:15,120 --> 01:57:21,470
client we sort of let them do their

2326
01:57:17,490 --> 01:57:21,469
thing and then we see what the output is

2327
01:57:28,160 --> 01:57:31,980
listening to you that I don't want for

2328
01:57:30,180 --> 01:57:33,360
us because there's a new gang one is

2329
01:57:31,980 --> 01:57:41,070
that just a different way to implement

2330
01:57:33,360 --> 01:57:44,190
profile okay so did another idea that we

2331
01:57:41,070 --> 01:57:46,139
had to model not sure why it's not on

2332
01:57:44,190 --> 01:57:49,200
the slides but we could also model that

2333
01:57:46,140 --> 01:57:51,390
a given transport protocol implements

2334
01:57:49,200 --> 01:57:53,309
reliability check implements order check

2335
01:57:51,390 --> 01:57:56,010
like this kind of thing right so we

2336
01:57:53,310 --> 01:57:58,740
could add that to the model as well I'm

2337
01:57:56,010 --> 01:58:01,460
not sure if that's what you mean by

2338
01:57:58,740 --> 01:58:01,460
profiles

2339
01:58:06,650 --> 01:58:11,490
I believe you're just describing a way

2340
01:58:09,060 --> 01:58:12,990
of describing profiles not that we don't

2341
01:58:11,490 --> 01:58:14,650
need profiles you're just saying that

2342
01:58:12,990 --> 01:58:18,909
you could describe them using a

2343
01:58:14,650 --> 01:58:20,860
I actually because you can just do it if

2344
01:58:18,909 --> 01:58:22,239
it's a configuration fight right that's

2345
01:58:20,860 --> 01:58:23,679
what we're kind of talking but it

2346
01:58:22,239 --> 01:58:26,019
doesn't have to be a configuration fight

2347
01:58:23,679 --> 01:58:28,630
it's a configure set of parameters for

2348
01:58:26,020 --> 01:58:30,610
configuration I thought the point of the

2349
01:58:28,630 --> 01:58:33,280
chart the point of profiles was to help

2350
01:58:30,610 --> 01:58:37,089
applications request useful sets of

2351
01:58:33,280 --> 01:58:38,380
behaviors so what she is coming up with

2352
01:58:37,090 --> 01:58:41,560
descriptions of useful sets of behaviors

2353
01:58:38,380 --> 01:58:43,300
in doing her testing writing that stuff

2354
01:58:41,560 --> 01:58:45,580
down and making it available to

2355
01:58:43,300 --> 01:58:47,290
applications developers make makes it so

2356
01:58:45,580 --> 01:58:48,909
they don't have to do that same figuring

2357
01:58:47,290 --> 01:58:57,040
out that she's doing right I thought

2358
01:58:48,909 --> 01:58:59,679
that's the point of profiles yes

2359
01:58:57,040 --> 01:59:04,210
absolutely I do publish a minion in a

2360
01:58:59,679 --> 01:59:06,969
trap so people know and sorry but no I

2361
01:59:04,210 --> 01:59:10,179
do not think it is a reasonable

2362
01:59:06,969 --> 01:59:13,090
expectation for like an arbitrary iOS

2363
01:59:10,179 --> 01:59:15,099
developer to learn how to write a yang

2364
01:59:13,090 --> 01:59:17,290
or how to use a yang model so I see

2365
01:59:15,099 --> 01:59:19,570
those as completely separate points so

2366
01:59:17,290 --> 01:59:21,489
this is for me for testing and like me

2367
01:59:19,570 --> 01:59:23,860
and Knox and she can use it perhaps

2368
01:59:21,489 --> 01:59:26,769
other people can also use it but like an

2369
01:59:23,860 --> 01:59:38,980
arbitrary like application developer we

2370
01:59:26,770 --> 01:59:41,650
won't ask them to use yang right fine

2371
01:59:38,980 --> 01:59:43,299
like model models more than just the

2372
01:59:41,650 --> 01:59:45,129
profile from transfer properties right

2373
01:59:43,300 --> 01:59:45,340
you move the endpoints and things like

2374
01:59:45,130 --> 01:59:47,739
that

2375
01:59:45,340 --> 01:59:49,090
so you would have to have assistant if

2376
01:59:47,739 --> 01:59:52,419
you just want the angle for the endpoint

2377
01:59:49,090 --> 01:59:54,730
and right now would have to change and

2378
01:59:52,420 --> 01:59:55,960
you would have to have separate models

2379
01:59:54,730 --> 02:00:03,580
for the endpoints and model for the

2380
01:59:55,960 --> 02:00:12,130
transfer properties and so on also you

2381
02:00:03,580 --> 02:00:22,320
would have oh we could model the profile

2382
02:00:12,130 --> 02:00:22,320
and using the yang model okay

2383
02:00:27,360 --> 02:00:34,910
so we have zero minutes left

2384
02:00:30,570 --> 02:00:34,910
also you're now on your own carry on

2385
02:00:35,930 --> 02:00:44,970
your mr. yang so I I guess I haven't

2386
02:00:43,050 --> 02:00:49,050
clarified question like are you

2387
02:00:44,970 --> 02:00:51,570
suggesting that we have profiles in the

2388
02:00:49,050 --> 02:00:53,340
yang model but also define the profiles

2389
02:00:51,570 --> 02:00:56,280
in terms of the features that they

2390
02:00:53,340 --> 02:00:59,090
implement or are you suggesting that we

2391
02:00:56,280 --> 02:01:03,420
do not have profiles and instead only

2392
02:00:59,090 --> 02:01:05,370
have the features and you define all of

2393
02:01:03,420 --> 02:01:08,220
those in a second

2394
02:01:05,370 --> 02:01:11,430
I think that that would make the yang

2395
02:01:08,220 --> 02:01:14,820
models less useful in my opinion just

2396
02:01:11,430 --> 02:01:18,470
because part of the point is that

2397
02:01:14,820 --> 02:01:21,299
they're relatively simple to edit that

2398
02:01:18,470 --> 02:01:25,230
looking at them in a way that's similar

2399
02:01:21,300 --> 02:01:28,740
to looking at the source code at least

2400
02:01:25,230 --> 02:01:30,480
in my mind part of what I have to to do

2401
02:01:28,740 --> 02:01:32,820
is that you edit it encounter the way

2402
02:01:30,480 --> 02:01:36,000
you edit the source code but it's easy

2403
02:01:32,820 --> 02:01:38,519
right but it's but it would working in

2404
02:01:36,000 --> 02:01:41,040
several different locations and so like

2405
02:01:38,520 --> 02:01:45,360
the same reasons that it's easier for

2406
02:01:41,040 --> 02:01:48,690
the user to to use a profile instead of

2407
02:01:45,360 --> 02:01:50,250
using all of the individual emanate an

2408
02:01:48,690 --> 02:01:51,330
application developer the same reason

2409
02:01:50,250 --> 02:01:53,130
that it's easier for an application

2410
02:01:51,330 --> 02:01:56,550
developer to use a profile instead of

2411
02:01:53,130 --> 02:01:58,830
using all the values I think it's easier

2412
02:01:56,550 --> 02:02:01,500
to define a profile for the application

2413
02:01:58,830 --> 02:02:02,930
to specify a profile for the application

2414
02:02:01,500 --> 02:02:05,370
developer there is to the foreknowledge

2415
02:02:02,930 --> 02:02:07,530
or maybe there's an editor the egg model

2416
02:02:05,370 --> 02:02:10,559
that would make it reasonable to do that

2417
02:02:07,530 --> 02:02:14,250
um but I it's not immediately apparent

2418
02:02:10,560 --> 02:02:16,560
to me what that would okay I suggest we

2419
02:02:14,250 --> 02:02:18,900
figure out whether we want profiles and

2420
02:02:16,560 --> 02:02:23,040
the API draft or appendix or whatever

2421
02:02:18,900 --> 02:02:28,139
before we discuss further like where it

2422
02:02:23,040 --> 02:02:31,140
goes are you can you say where people

2423
02:02:28,140 --> 02:02:32,520
are missing goodness oh you're done okay

2424
02:02:31,140 --> 02:02:34,380
well thank you thank you everybody

2425
02:02:32,520 --> 02:02:37,080
Oh before people leave the room I'm

2426
02:02:34,380 --> 02:02:40,660
sorry I would just like to propose that

2427
02:02:37,080 --> 02:02:42,850
we do a virtual interim in September the

2428
02:02:40,660 --> 02:02:45,160
anybody have a real problem with that we

2429
02:02:42,850 --> 02:02:46,900
can work out the dates online okay I see

2430
02:02:45,160 --> 02:02:48,400
some heads nodding and thumbs up I don't

2431
02:02:46,900 --> 02:02:51,580
see anybody saying that's a really bad

2432
02:02:48,400 --> 02:02:53,799
idea okay thanks everybody thanks to

2433
02:02:51,580 --> 02:02:56,080
Cory for taking notes and for Theresa

2434
02:02:53,800 --> 02:02:58,200
for Jabbar scribing and we'll see you

2435
02:02:56,080 --> 02:02:58,200
online

