1
00:00:30,070 --> 00:00:33,219
[Music]

2
00:01:01,090 --> 00:01:04,129
[Music]

3
00:02:00,619 --> 00:02:05,700
ladies and gentlemen welcome to HDPE

4
00:02:03,590 --> 00:02:08,270
your working group meeting will start

5
00:02:05,700 --> 00:02:08,270
short

6
00:02:08,800 --> 00:02:40,010
it's a thin crowd late the week that was

7
00:02:15,680 --> 00:02:44,420
this very really now okay cool

8
00:02:40,010 --> 00:02:47,989
I delay okay cool right you're a little

9
00:02:44,420 --> 00:02:52,819
on the loud side just say no I mean

10
00:02:47,989 --> 00:02:55,160
specifically now okay let's go ahead and

11
00:02:52,819 --> 00:02:56,450
get started it is a very thin crowd

12
00:02:55,160 --> 00:03:00,349
today which maybe will make it

13
00:02:56,450 --> 00:03:03,798
productive we'll see this is HTTP this

14
00:03:00,349 --> 00:03:05,209
is the note well if you're not familiar

15
00:03:03,799 --> 00:03:08,959
with it please search for it on your

16
00:03:05,209 --> 00:03:10,880
favorite search engine on the Internet

17
00:03:08,959 --> 00:03:12,200
it is the terms under which we

18
00:03:10,880 --> 00:03:13,459
participate regarding things like

19
00:03:12,200 --> 00:03:14,358
intellectual property and especially

20
00:03:13,459 --> 00:03:16,130
behavior

21
00:03:14,359 --> 00:03:18,069
so please do be aware of it if you

22
00:03:16,130 --> 00:03:26,299
aren't already we do take it seriously

23
00:03:18,069 --> 00:03:27,470
especially the behavior part do we have

24
00:03:26,299 --> 00:03:31,609
someone willing to volunteer to be a

25
00:03:27,470 --> 00:03:33,739
scribe if you're thinking about it the

26
00:03:31,609 --> 00:03:46,579
prizes await you wouldn't believe that

27
00:03:33,739 --> 00:03:50,510
wonderful it is Krang notes a time that

28
00:03:46,579 --> 00:03:51,739
wrong if you could take notes in the

29
00:03:50,510 --> 00:03:54,380
media of your choice we do have an

30
00:03:51,739 --> 00:03:57,079
Ethernet pet in the agenda but if you

31
00:03:54,380 --> 00:03:59,239
wish to use something like large company

32
00:03:57,079 --> 00:04:00,650
here Docs please go ahead and just share

33
00:03:59,239 --> 00:04:04,190
the link with folks on the jabber

34
00:04:00,650 --> 00:04:06,769
channel the blue sheets are circulating

35
00:04:04,190 --> 00:04:09,769
yes good maybe we should have only used

36
00:04:06,769 --> 00:04:11,989
one with a crevice size and can someone

37
00:04:09,769 --> 00:04:13,519
volunteer to relay comments from jabber

38
00:04:11,989 --> 00:04:16,399
because we do have some remote

39
00:04:13,519 --> 00:04:18,269
participants that you can do thank you

40
00:04:16,399 --> 00:04:20,459
very much

41
00:04:18,269 --> 00:04:23,910
the agenda today we've done a little bit

42
00:04:20,459 --> 00:04:26,550
of bashing pre-meeting there's been some

43
00:04:23,910 --> 00:04:27,930
discussion for a while in the quick

44
00:04:26,550 --> 00:04:30,539
working group which is come here

45
00:04:27,930 --> 00:04:33,180
sometime the time about priorities and

46
00:04:30,539 --> 00:04:36,300
folks really want to figure out what the

47
00:04:33,180 --> 00:04:40,110
path forward is for priorities or hints

48
00:04:36,300 --> 00:04:42,930
for client-to-server priorities in HTTP

49
00:04:40,110 --> 00:04:45,360
3 and so we're gonna bring the

50
00:04:42,930 --> 00:04:47,190
discussion here so that this group can

51
00:04:45,360 --> 00:04:49,289
give its input because as we know this

52
00:04:47,190 --> 00:04:51,930
group owns the future of HTTP and

53
00:04:49,289 --> 00:04:54,090
especially its p3 and so the quick folks

54
00:04:51,930 --> 00:04:56,159
didn't want to make a decision about

55
00:04:54,090 --> 00:04:57,719
that without getting some consensus here

56
00:04:56,159 --> 00:04:59,099
so we're gonna talk about that hopefully

57
00:04:57,720 --> 00:05:01,470
for about 15 minutes we don't want to

58
00:04:59,099 --> 00:05:05,880
take too much time then we have a quick

59
00:05:01,470 --> 00:05:08,669
presentation on HTTP s sv h vs SVC which

60
00:05:05,880 --> 00:05:10,800
i see i forgot an s and hopefully

61
00:05:08,669 --> 00:05:12,750
that'll be relatively brief then we'll

62
00:05:10,800 --> 00:05:13,199
go through the core issues as much as we

63
00:05:12,750 --> 00:05:15,240
can

64
00:05:13,199 --> 00:05:24,090
time permitting we have a presentation

65
00:05:15,240 --> 00:05:26,159
on braid any bashing of the agenda ok so

66
00:05:24,090 --> 00:05:29,190
let's start off with a discussion of

67
00:05:26,159 --> 00:05:31,229
HTTP priorities and I'm looking around

68
00:05:29,190 --> 00:05:33,199
because I'm looking for the people who

69
00:05:31,229 --> 00:05:38,219
are trying to drive that discussion I

70
00:05:33,199 --> 00:05:42,509
don't see any many in the room Lucas I

71
00:05:38,219 --> 00:05:44,840
don't see Ian I don't see Martin should

72
00:05:42,509 --> 00:05:48,539
we punch for for a little while and see

73
00:05:44,840 --> 00:05:50,940
yeah let's go ahead and have the HTTP

74
00:05:48,539 --> 00:05:52,349
SVC discussion and see if a few more

75
00:05:50,940 --> 00:05:58,590
people come in from the wonderland of

76
00:05:52,349 --> 00:06:01,349
cookies and brownies one second yeah

77
00:05:58,590 --> 00:06:02,690
there are conflicts now okay so let's do

78
00:06:01,349 --> 00:06:10,430
this presentation

79
00:06:02,690 --> 00:06:13,110
Eric take it away um so I'll be talking

80
00:06:10,430 --> 00:06:18,780
finding the right duration is too loud

81
00:06:13,110 --> 00:06:22,259
okay there tigrin Akamai I'm gonna be

82
00:06:18,780 --> 00:06:25,198
talking about a HTTP SVC DNS record

83
00:06:22,259 --> 00:06:27,750
Untied which hopefully this will

84
00:06:25,199 --> 00:06:31,650
probably not be the actual end name of

85
00:06:27,750 --> 00:06:32,040
that of the record as if only given this

86
00:06:31,650 --> 00:06:34,080
year

87
00:06:32,040 --> 00:06:38,160
number of typos we've seen including my

88
00:06:34,080 --> 00:06:42,150
own on the on how many asses it has on

89
00:06:38,160 --> 00:06:45,030
next slide so the motivation for this

90
00:06:42,150 --> 00:06:46,500
has come out of trying to solve a bunch

91
00:06:45,030 --> 00:06:47,760
of problems holistically that have each

92
00:06:46,500 --> 00:06:50,540
been popping up in various places

93
00:06:47,760 --> 00:06:54,599
independent live each other there's been

94
00:06:50,540 --> 00:06:57,000
kind of a long-standing kind of issue or

95
00:06:54,600 --> 00:06:59,550
question is is hey wouldn't it be great

96
00:06:57,000 --> 00:07:05,120
if there was something that was SRV like

97
00:06:59,550 --> 00:07:08,520
or HTTP record like or similar that that

98
00:07:05,120 --> 00:07:12,690
HTTP clients would use and but as a

99
00:07:08,520 --> 00:07:14,340
number of thing as we've been as HTTP 3

100
00:07:12,690 --> 00:07:17,460
kids coming into play and is encrypted

101
00:07:14,340 --> 00:07:18,900
S&I is coming into play and as people on

102
00:07:17,460 --> 00:07:20,969
the dns side are getting more and more

103
00:07:18,900 --> 00:07:24,450
frustrated about the zone apex problem

104
00:07:20,970 --> 00:07:26,040
there's starting to build a critical

105
00:07:24,450 --> 00:07:28,680
mass of pressure to actually try to

106
00:07:26,040 --> 00:07:30,000
solve this problem so this record is

107
00:07:28,680 --> 00:07:32,490
trying to look at how do we solve a

108
00:07:30,000 --> 00:07:35,820
number of these problems in a in a in a

109
00:07:32,490 --> 00:07:38,010
holistic manner and rather than going

110
00:07:35,820 --> 00:07:39,930
and introducing a bunch of new records

111
00:07:38,010 --> 00:07:41,190
having kind of one well-structured thing

112
00:07:39,930 --> 00:07:45,600
we've thought through and design through

113
00:07:41,190 --> 00:07:47,670
that could solve it next slide so the

114
00:07:45,600 --> 00:07:49,440
idea would be to have a single new

115
00:07:47,670 --> 00:07:52,560
records that clients could resolve in

116
00:07:49,440 --> 00:07:54,000
parallel with a and quad-a lookups note

117
00:07:52,560 --> 00:07:56,820
this is client specific not browser

118
00:07:54,000 --> 00:07:58,550
specific despite what the my typos on

119
00:07:56,820 --> 00:08:00,960
the first version of the slide I had

120
00:07:58,550 --> 00:08:03,600
trying to design something that is that

121
00:08:00,960 --> 00:08:08,640
usable and fits well into the into the

122
00:08:03,600 --> 00:08:11,340
way that people configure configure HTTP

123
00:08:08,640 --> 00:08:13,080
available services having it be

124
00:08:11,340 --> 00:08:14,310
extensible enough so that when we come

125
00:08:13,080 --> 00:08:16,109
up with the next sort of use case we

126
00:08:14,310 --> 00:08:17,910
want to solve it doesn't become a oh no

127
00:08:16,110 --> 00:08:19,500
but now we need to get clients to go and

128
00:08:17,910 --> 00:08:21,330
do yet another lookup but it is

129
00:08:19,500 --> 00:08:23,880
something that we can extend onto this

130
00:08:21,330 --> 00:08:25,260
and also something on something that's

131
00:08:23,880 --> 00:08:26,670
compelling enough and solves enough of

132
00:08:25,260 --> 00:08:28,110
the problems that we can convince

133
00:08:26,670 --> 00:08:32,340
clients to actually go and implement it

134
00:08:28,110 --> 00:08:34,020
as well as looking at this as is it an

135
00:08:32,340 --> 00:08:36,479
opportunity are there opportunities here

136
00:08:34,020 --> 00:08:39,120
to move to more secure defaults for

137
00:08:36,479 --> 00:08:44,310
example now that the v-world is gone

138
00:08:39,120 --> 00:08:45,750
from being mostly HTTP to mostly HTTP

139
00:08:44,310 --> 00:08:48,388
has seen at least

140
00:08:45,750 --> 00:08:50,339
from the perspective of a browser

141
00:08:48,389 --> 00:08:52,439
perspective are there some things we can

142
00:08:50,339 --> 00:08:53,850
do to switch to kind of use this to

143
00:08:52,439 --> 00:08:56,790
signal and switch some of the defaults

144
00:08:53,850 --> 00:09:01,170
so that that thing clients don't have to

145
00:08:56,790 --> 00:09:03,990
go and make a round trip through clear

146
00:09:01,170 --> 00:09:08,279
text HTTP to get upgraded HTTP next

147
00:09:03,990 --> 00:09:10,529
slide so the general approach here ends

148
00:09:08,279 --> 00:09:14,069
up looking very similar to SRV if you're

149
00:09:10,529 --> 00:09:16,050
familiar with SRV familiar with SRV but

150
00:09:14,069 --> 00:09:18,269
but with the ability to add more

151
00:09:16,050 --> 00:09:23,189
extensibility on to it so for example

152
00:09:18,269 --> 00:09:25,430
being able to for host name such as dub

153
00:09:23,189 --> 00:09:28,529
dub dub example comm say that there

154
00:09:25,430 --> 00:09:30,000
there may be two different services that

155
00:09:28,529 --> 00:09:32,670
could that can implement this for you

156
00:09:30,000 --> 00:09:34,769
one of them is that at a at service

157
00:09:32,670 --> 00:09:39,149
domain name one and has this set of IPs

158
00:09:34,769 --> 00:09:41,720
and on this court and implements HTTP 3

159
00:09:39,149 --> 00:09:44,819
on and as this encrypted us a Nike and

160
00:09:41,720 --> 00:09:46,230
this other implement instantiation or

161
00:09:44,819 --> 00:09:47,729
implementation of the service might have

162
00:09:46,230 --> 00:09:49,709
a different domain name a different set

163
00:09:47,730 --> 00:09:51,720
of ports a different set of application

164
00:09:49,709 --> 00:09:56,638
protocol calls and a different ES and

165
00:09:51,720 --> 00:10:00,000
Ikey next slide I mean there are two

166
00:09:56,639 --> 00:10:03,329
forms of this one of which is a alias

167
00:10:00,000 --> 00:10:05,639
form that's really meant to delegate

168
00:10:03,329 --> 00:10:09,059
over Authority its primary purpose is to

169
00:10:05,639 --> 00:10:10,610
solve this zone apex problem of the fact

170
00:10:09,059 --> 00:10:13,079
that you that for a hostname like

171
00:10:10,610 --> 00:10:17,610
example.com you can't put us you can't

172
00:10:13,079 --> 00:10:21,388
put a cname note that the intent kind of

173
00:10:17,610 --> 00:10:24,000
a compromise here is that for there are

174
00:10:21,389 --> 00:10:26,250
two places you can you can have HTTP

175
00:10:24,000 --> 00:10:30,240
service record one of which is for

176
00:10:26,250 --> 00:10:32,180
things that are standard HTTP 4 4 4 4 3

177
00:10:30,240 --> 00:10:33,420
you or eyes you can just put it on

178
00:10:32,180 --> 00:10:36,750
example.com

179
00:10:33,420 --> 00:10:39,809
whereas to support alternate ports or

180
00:10:36,750 --> 00:10:42,420
alternate or alternate schemes or all on

181
00:10:39,809 --> 00:10:45,540
you can you can use the the label form

182
00:10:42,420 --> 00:10:46,769
next slide sorry when you see all

183
00:10:45,540 --> 00:10:50,730
different schemes do you mean anything

184
00:10:46,769 --> 00:10:53,149
except HTTP HTTP yeah which we have not

185
00:10:50,730 --> 00:10:55,920
defined yet for alternative service but

186
00:10:53,149 --> 00:10:58,380
if we were to define something other

187
00:10:55,920 --> 00:10:59,719
than HTTP or HTTPS we wanted to do

188
00:10:58,380 --> 00:11:05,339
alternate service way

189
00:10:59,720 --> 00:11:09,540
okay you could use that for trying to

190
00:11:05,339 --> 00:11:11,250
think ahead a little bit but the and

191
00:11:09,540 --> 00:11:15,120
then the second form is an alternative

192
00:11:11,250 --> 00:11:16,650
is the is the alternative services form

193
00:11:15,120 --> 00:11:20,279
and this you can kind of is a one that

194
00:11:16,650 --> 00:11:24,480
looks much closer to a like SRV that's

195
00:11:20,279 --> 00:11:26,670
extensible so in this you have a there's

196
00:11:24,480 --> 00:11:30,900
a a priority the priority is there

197
00:11:26,670 --> 00:11:32,339
because there is no within our sets you

198
00:11:30,900 --> 00:11:33,750
don't have an ordering so if you want to

199
00:11:32,339 --> 00:11:35,370
have a explicit ordering you need to

200
00:11:33,750 --> 00:11:38,610
have a priority to specify what that

201
00:11:35,370 --> 00:11:41,580
ordering is like and then the rest of it

202
00:11:38,610 --> 00:11:43,410
is actually taking the the alternate

203
00:11:41,580 --> 00:11:45,600
services concept that we've that we've

204
00:11:43,410 --> 00:11:49,290
defined that we've defined for HTTP and

205
00:11:45,600 --> 00:11:52,320
having a way to have that in DNS there's

206
00:11:49,290 --> 00:11:54,750
a remit from the perspective or from

207
00:11:52,320 --> 00:11:58,320
feedback we had in DNS up we pulled the

208
00:11:54,750 --> 00:11:59,820
the hostname out of the alt service and

209
00:11:58,320 --> 00:12:01,920
actually had it separate field because

210
00:11:59,820 --> 00:12:03,600
that makes it easier for dns recursive

211
00:12:01,920 --> 00:12:05,459
to parse that and it patched it into

212
00:12:03,600 --> 00:12:07,920
additional sections and if they have to

213
00:12:05,459 --> 00:12:10,020
go parse up the alt service string and

214
00:12:07,920 --> 00:12:13,680
that but then after that is the

215
00:12:10,020 --> 00:12:18,930
extensible key equals value all service

216
00:12:13,680 --> 00:12:21,479
format as a within the context of the

217
00:12:18,930 --> 00:12:23,160
draft the current draft defines a yes

218
00:12:21,480 --> 00:12:25,980
and I keys alt service parameter

219
00:12:23,160 --> 00:12:27,209
extension it that might be something

220
00:12:25,980 --> 00:12:28,950
that actually wants to be split off

221
00:12:27,209 --> 00:12:31,199
could set its own draft but at least for

222
00:12:28,950 --> 00:12:34,589
now it's for simplicity is just

223
00:12:31,200 --> 00:12:38,640
incorporated directly here the next

224
00:12:34,589 --> 00:12:41,160
slide so some of the major feedback

225
00:12:38,640 --> 00:12:42,750
we've gotten on this so far we've come

226
00:12:41,160 --> 00:12:43,980
brought this to DNS often the TLS

227
00:12:42,750 --> 00:12:47,130
working group and have had a bunch of

228
00:12:43,980 --> 00:12:49,890
hallway conversations is how much to

229
00:12:47,130 --> 00:12:52,529
generalize this I think there's there's

230
00:12:49,890 --> 00:12:56,939
interest in having it more general than

231
00:12:52,529 --> 00:12:58,830
just HTTP there is so for example at

232
00:12:56,940 --> 00:13:00,779
least generalizing it to be kind of an

233
00:12:58,830 --> 00:13:02,040
alt service level of generalization I

234
00:13:00,779 --> 00:13:04,080
think there's a question of just

235
00:13:02,040 --> 00:13:07,219
generalizing it much beyond that start

236
00:13:04,080 --> 00:13:09,300
opening up the Pandora's box of or

237
00:13:07,220 --> 00:13:11,910
overgeneralization go create your own

238
00:13:09,300 --> 00:13:13,140
working groups then years on it and has

239
00:13:11,910 --> 00:13:13,670
something no one uses but I think

240
00:13:13,140 --> 00:13:17,210
there's

241
00:13:13,670 --> 00:13:19,709
hopefully some balance in between

242
00:13:17,210 --> 00:13:21,510
another questions come up a bunch is is

243
00:13:19,710 --> 00:13:23,070
whether it allow inlining of the address

244
00:13:21,510 --> 00:13:26,880
records within this there are pros and

245
00:13:23,070 --> 00:13:28,590
cons and issues with doing that another

246
00:13:26,880 --> 00:13:30,330
one is whether to allow external

247
00:13:28,590 --> 00:13:31,740
references to named keys like for the es

248
00:13:30,330 --> 00:13:33,690
and I keys you may have a number of

249
00:13:31,740 --> 00:13:36,360
different records here that all have the

250
00:13:33,690 --> 00:13:38,640
same key and having to have that same

251
00:13:36,360 --> 00:13:40,320
value over and over again it starts

252
00:13:38,640 --> 00:13:42,600
getting fairly big but in the same time

253
00:13:40,320 --> 00:13:44,550
there's a there's performance that

254
00:13:42,600 --> 00:13:47,160
impacts if it's not if you don't have

255
00:13:44,550 --> 00:13:51,870
any cash difficult fetch it again there

256
00:13:47,160 --> 00:13:54,810
is a I think the impact on climb

257
00:13:51,870 --> 00:13:56,790
complexity especially for non browser

258
00:13:54,810 --> 00:13:59,219
clients this one that's come up as a

259
00:13:56,790 --> 00:14:02,910
concern because it may be that is the

260
00:13:59,220 --> 00:14:05,880
world is getting more and more as we

261
00:14:02,910 --> 00:14:08,219
start having HTTP 2 and HTTP 3 and

262
00:14:05,880 --> 00:14:10,080
various happy eyeballs implementations

263
00:14:08,220 --> 00:14:11,970
and all the various and I Keys and all

264
00:14:10,080 --> 00:14:16,200
the TLS stuff you want to do that

265
00:14:11,970 --> 00:14:17,670
clients are will end up using more and

266
00:14:16,200 --> 00:14:18,960
more a library that encapsulates a lot

267
00:14:17,670 --> 00:14:22,560
of that which is a place you could put

268
00:14:18,960 --> 00:14:23,940
this but it does mean that that trying

269
00:14:22,560 --> 00:14:25,739
to take advantage or trying to leverage

270
00:14:23,940 --> 00:14:27,210
this from a client your right from

271
00:14:25,740 --> 00:14:29,190
scratch that's not using a library it

272
00:14:27,210 --> 00:14:31,670
does be good this is yet another hurdle

273
00:14:29,190 --> 00:14:34,080
that things might have need to jump over

274
00:14:31,670 --> 00:14:36,209
and another thing we've gone from some

275
00:14:34,080 --> 00:14:38,580
client implementers is whether they

276
00:14:36,210 --> 00:14:40,920
would whether in their implementations

277
00:14:38,580 --> 00:14:45,660
they would require on the use of doe or

278
00:14:40,920 --> 00:14:47,640
DNS SEC if only as a both from a what is

279
00:14:45,660 --> 00:14:50,730
kind of the risk exposure of having this

280
00:14:47,640 --> 00:14:52,080
in unauthenticated but also from the how

281
00:14:50,730 --> 00:14:56,870
much does doing yet another record

282
00:14:52,080 --> 00:14:59,130
lookup through poorly implemented home

283
00:14:56,870 --> 00:15:03,210
home router resolvers caused problems

284
00:14:59,130 --> 00:15:05,250
next slide I think the other question

285
00:15:03,210 --> 00:15:06,840
the other question here is what do we

286
00:15:05,250 --> 00:15:09,690
call the record I think this kind of a

287
00:15:06,840 --> 00:15:11,570
bike shed bike shed topic I was almost

288
00:15:09,690 --> 00:15:14,100
tempted to call this a bike shed record

289
00:15:11,570 --> 00:15:25,050
but then real up but then it was point

290
00:15:14,100 --> 00:15:26,130
to it what I kind of like be it the next

291
00:15:25,050 --> 00:15:29,790
slide

292
00:15:26,130 --> 00:15:34,110
so in terms of next steps here we

293
00:15:29,790 --> 00:15:36,870
presented this to DNS op there was there

294
00:15:34,110 --> 00:15:39,660
was interest there actually interests

295
00:15:36,870 --> 00:15:41,940
the degree that both by nine did an

296
00:15:39,660 --> 00:15:43,680
implementation before I'd even presented

297
00:15:41,940 --> 00:15:46,529
here and then someone from unbounded in

298
00:15:43,680 --> 00:15:48,479
implementation during the during the

299
00:15:46,529 --> 00:15:51,959
hackathon there haven't yet been any

300
00:15:48,480 --> 00:15:53,339
client-side implementations I think

301
00:15:51,959 --> 00:15:56,399
there's a question and a discussion

302
00:15:53,339 --> 00:15:57,959
between the or there was going to be a

303
00:15:56,399 --> 00:15:59,490
discussion between the DNS options in

304
00:15:57,959 --> 00:16:01,739
the HTTP chairs as to which working

305
00:15:59,490 --> 00:16:03,480
group makes more sense I think the

306
00:16:01,740 --> 00:16:06,870
degree to which we generalize that will

307
00:16:03,480 --> 00:16:08,130
make a impact on this I get we if gave

308
00:16:06,870 --> 00:16:10,259
you in some of the maybe we should

309
00:16:08,130 --> 00:16:12,269
generalize this just feedback it may end

310
00:16:10,259 --> 00:16:14,610
up being that pushing the DNS direction

311
00:16:12,269 --> 00:16:17,370
makes sense with close consultation here

312
00:16:14,610 --> 00:16:18,720
on we gave some visibility to TLS

313
00:16:17,370 --> 00:16:21,269
working group because I think there

314
00:16:18,720 --> 00:16:23,880
would be it would be very nice to not

315
00:16:21,269 --> 00:16:26,100
have to have a special yes and I record

316
00:16:23,880 --> 00:16:27,660
that contains a to the contains IP

317
00:16:26,100 --> 00:16:31,019
addresses and other stuff and a special

318
00:16:27,660 --> 00:16:34,170
purpose for that but at the same time

319
00:16:31,019 --> 00:16:36,000
the I think the folks in TLS would

320
00:16:34,170 --> 00:16:37,349
rather not have to go wait for a few

321
00:16:36,000 --> 00:16:39,899
years for something like this to

322
00:16:37,350 --> 00:16:46,439
materialize before they can deploy yes

323
00:16:39,899 --> 00:16:48,420
and I so that's it so this is

324
00:16:46,439 --> 00:16:49,740
interesting because this is not the

325
00:16:48,420 --> 00:16:51,839
first time we've talked about this by

326
00:16:49,740 --> 00:16:59,220
far yes in some ways this is a renaming

327
00:16:51,839 --> 00:17:01,949
of yeah I think in Hawaii it may even

328
00:16:59,220 --> 00:17:04,650
call be and then Mike had one that was

329
00:17:01,949 --> 00:17:06,539
called had a alt service where Mike had

330
00:17:04,650 --> 00:17:08,640
been had the alt service one that a lot

331
00:17:06,539 --> 00:17:10,439
of this is derived from but this is each

332
00:17:08,640 --> 00:17:11,490
one of these variations of this is

333
00:17:10,439 --> 00:17:13,260
taking a lot of the feedback and

334
00:17:11,490 --> 00:17:14,970
refining it to try to kind of address

335
00:17:13,260 --> 00:17:15,449
this thing the issues that came up

336
00:17:14,970 --> 00:17:17,400
previously

337
00:17:15,449 --> 00:17:19,169
yeah and previously you know a lot of

338
00:17:17,400 --> 00:17:21,449
concerns that I heard or that I remember

339
00:17:19,169 --> 00:17:23,600
at least were around authentication and

340
00:17:21,449 --> 00:17:25,770
integrity the information and also a

341
00:17:23,599 --> 00:17:28,379
concerns around clients making a lot of

342
00:17:25,770 --> 00:17:31,679
parallel requests and how difficult that

343
00:17:28,380 --> 00:17:33,990
can be now with no and with the

344
00:17:31,679 --> 00:17:36,960
increased deployment of DNS SEC that's

345
00:17:33,990 --> 00:17:38,340
maybe a change situation right that was

346
00:17:36,960 --> 00:17:39,670
a changed situation I think it's also

347
00:17:38,340 --> 00:17:41,290
the the

348
00:17:39,670 --> 00:17:43,120
yes and Ike he's one is one that's

349
00:17:41,290 --> 00:17:44,710
pushed it because it some point that is

350
00:17:43,120 --> 00:17:47,439
forcing clients to make another request

351
00:17:44,710 --> 00:17:48,970
so I think that was the thing for me

352
00:17:47,440 --> 00:17:51,400
that said okay if we're gonna if we can

353
00:17:48,970 --> 00:17:52,690
have to do that extra request there can

354
00:17:51,400 --> 00:17:54,160
we can we solve a bunch of the other

355
00:17:52,690 --> 00:17:55,750
problems that we've been saying hey

356
00:17:54,160 --> 00:17:57,400
would be nice if we could get clients do

357
00:17:55,750 --> 00:17:58,780
another extra request but then look at

358
00:17:57,400 --> 00:18:00,610
how do we do that right so we don't have

359
00:17:58,780 --> 00:18:02,800
to have the same conversation over and

360
00:18:00,610 --> 00:18:04,540
over it's a good opportunity yeah and so

361
00:18:02,800 --> 00:18:06,790
um before different likes my the thing

362
00:18:04,540 --> 00:18:08,320
I'm looking for personally is Klein to

363
00:18:06,790 --> 00:18:11,740
implement our interest because that's

364
00:18:08,320 --> 00:18:15,790
what's always stopped us before then

365
00:18:11,740 --> 00:18:18,040
Schwartz I just want to on the topic of

366
00:18:15,790 --> 00:18:20,950
authentication I want to point out that

367
00:18:18,040 --> 00:18:24,270
this draft is intended to be used and

368
00:18:20,950 --> 00:18:28,030
it's fully usable on authenticated and

369
00:18:24,270 --> 00:18:30,160
to some extent I think that previous

370
00:18:28,030 --> 00:18:31,450
concerns about authentication of this

371
00:18:30,160 --> 00:18:34,000
kind of information I think have

372
00:18:31,450 --> 00:18:35,590
decreased because the TLS working group

373
00:18:34,000 --> 00:18:38,080
has had to think through very carefully

374
00:18:35,590 --> 00:18:39,250
the consequences of distributing yes and

375
00:18:38,080 --> 00:18:46,600
I unauthenticated

376
00:18:39,250 --> 00:18:48,040
and and confirmed with everything so

377
00:18:46,600 --> 00:18:49,570
that it seems like it might have

378
00:18:48,040 --> 00:19:02,920
implications on other discussions we're

379
00:18:49,570 --> 00:19:06,010
having yeah as well so to to comment

380
00:19:02,920 --> 00:19:09,550
someone hair check yeah chair had

381
00:19:06,010 --> 00:19:11,650
completely off as a client implementer I

382
00:19:09,550 --> 00:19:12,669
think we are interested in taking

383
00:19:11,650 --> 00:19:14,740
advantage of something that looks like

384
00:19:12,670 --> 00:19:17,530
this and see how it develops so I think

385
00:19:14,740 --> 00:19:20,410
there's interest there but then as a

386
00:19:17,530 --> 00:19:23,340
with chair head on I did have a

387
00:19:20,410 --> 00:19:27,040
discussion with Ben Oh who's one of the

388
00:19:23,340 --> 00:19:29,860
Denisof chairs earlier so just for this

389
00:19:27,040 --> 00:19:31,960
room I think his sense of their room is

390
00:19:29,860 --> 00:19:34,330
that they are very interested in doing

391
00:19:31,960 --> 00:19:38,920
this work and moving that work there so

392
00:19:34,330 --> 00:19:41,830
if people in this room have issues with

393
00:19:38,920 --> 00:19:43,600
that or would like to see it you know be

394
00:19:41,830 --> 00:19:44,230
here instead of there they'd be good to

395
00:19:43,600 --> 00:19:46,270
hear that

396
00:19:44,230 --> 00:19:48,520
um I imagine you would see we'd still

397
00:19:46,270 --> 00:19:51,300
want to get updates on the progress of

398
00:19:48,520 --> 00:19:51,300
this work either way

399
00:19:55,140 --> 00:20:03,040
just just a question with we wanted

400
00:19:57,880 --> 00:20:05,170
maybe last call both groups that jcbeep

401
00:20:03,040 --> 00:20:09,120
runs on house general it is a favor move

402
00:20:05,170 --> 00:20:11,980
a specific there's the new fair call

403
00:20:09,120 --> 00:20:13,929
yeah so Mon Thompson again as a client

404
00:20:11,980 --> 00:20:16,900
in home and work had some discussions

405
00:20:13,930 --> 00:20:18,340
about about this and a reasonably

406
00:20:16,900 --> 00:20:22,530
enthusiastic about something that might

407
00:20:18,340 --> 00:20:26,220
stand in for es ni that is a little less

408
00:20:22,530 --> 00:20:29,260
janky than the current record format

409
00:20:26,220 --> 00:20:31,180
certainly having the enthusiasm of the

410
00:20:29,260 --> 00:20:34,000
DNS community or at least people who

411
00:20:31,180 --> 00:20:35,620
know what they're doing makes us a

412
00:20:34,000 --> 00:20:37,780
little happier about this sort of thing

413
00:20:35,620 --> 00:20:40,600
and if we're going to be making extra

414
00:20:37,780 --> 00:20:43,990
queries for different record types it

415
00:20:40,600 --> 00:20:47,040
may as well be a good one so tentatively

416
00:20:43,990 --> 00:20:47,040
positive on this one

417
00:21:01,230 --> 00:21:10,750
is there a way to piggyback this

418
00:21:03,490 --> 00:21:13,420
response on that I think that would be

419
00:21:10,750 --> 00:21:15,010
subsumed by this yeah I think yes Yan

420
00:21:13,420 --> 00:21:18,220
India intent was that this would subsume

421
00:21:15,010 --> 00:21:27,460
the need to have to have a dedicated yes

422
00:21:18,220 --> 00:21:30,520
request for yes and I meant in terms of

423
00:21:27,460 --> 00:21:33,160
which working group that lives in DNS

424
00:21:30,520 --> 00:21:35,110
off already did something like this and

425
00:21:33,160 --> 00:21:38,020
it was called SRV and the buddy and the

426
00:21:35,110 --> 00:21:40,899
chief he has touched it so no matter

427
00:21:38,020 --> 00:21:42,760
where it lives we have to have buy-in

428
00:21:40,900 --> 00:21:44,920
from this working group and from the

429
00:21:42,760 --> 00:21:46,210
implementers here or we just shouldn't

430
00:21:44,920 --> 00:21:48,700
do it mm-hmm

431
00:21:46,210 --> 00:21:52,300
I don't care who works on that we should

432
00:21:48,700 --> 00:21:53,490
all work on that but the interest has to

433
00:21:52,300 --> 00:21:56,230
be here hmm

434
00:21:53,490 --> 00:21:57,970
and one of the bility some of this

435
00:21:56,230 --> 00:22:00,510
depends on what is the right factoring

436
00:21:57,970 --> 00:22:03,550
in terms of how general could be a a

437
00:22:00,510 --> 00:22:05,110
into these the general purpose draft

438
00:22:03,550 --> 00:22:05,560
that describes how to use it and then

439
00:22:05,110 --> 00:22:07,659
one

440
00:22:05,560 --> 00:22:10,840
that's Indiana soft and then a specific

441
00:22:07,660 --> 00:22:12,880
here's how to use this for HTTP that

442
00:22:10,840 --> 00:22:14,439
covers some of the HTTP specific things

443
00:22:12,880 --> 00:22:16,540
like how does this work in the case of

444
00:22:14,440 --> 00:22:23,290
proxies and other things that might live

445
00:22:16,540 --> 00:22:26,260
here potentially interesting complexity

446
00:22:23,290 --> 00:22:29,710
here is what happens when you're using

447
00:22:26,260 --> 00:22:32,680
DOE and maybe it does another DNS server

448
00:22:29,710 --> 00:22:34,930
simultaneously the great thing about DOE

449
00:22:32,680 --> 00:22:37,720
is like the rest of HTTP it can be per

450
00:22:34,930 --> 00:22:39,580
session but the other DNS servers may be

451
00:22:37,720 --> 00:22:41,170
different and so you can end up with

452
00:22:39,580 --> 00:22:43,570
weird bounces I think you have to

453
00:22:41,170 --> 00:22:46,870
resolve that one way or another and it

454
00:22:43,570 --> 00:22:55,320
would be really weird and repaired to

455
00:22:46,870 --> 00:23:00,939
thing I'm sorry so from my perspective I

456
00:22:55,320 --> 00:23:04,300
sorry your vise Google from my

457
00:23:00,940 --> 00:23:08,140
perspective I on the one hand it's

458
00:23:04,300 --> 00:23:12,340
exciting to see negotiation moving to

459
00:23:08,140 --> 00:23:17,110
the DNS layer and I was initially

460
00:23:12,340 --> 00:23:19,480
excited to try this out as like as part

461
00:23:17,110 --> 00:23:24,659
of client hints and try to move that

462
00:23:19,480 --> 00:23:27,150
part of khana negotiation to DNS layer I

463
00:23:24,660 --> 00:23:30,370
also this we've got the feedback that

464
00:23:27,150 --> 00:23:33,670
that runs a risk of bloating those

465
00:23:30,370 --> 00:23:38,229
records and people weren't super excited

466
00:23:33,670 --> 00:23:41,550
about that so generally I would love to

467
00:23:38,230 --> 00:23:45,340
see some solution that resolves the

468
00:23:41,550 --> 00:23:47,710
early content negotiation problem while

469
00:23:45,340 --> 00:23:50,320
not introducing that bloated DNS maybe

470
00:23:47,710 --> 00:23:57,730
it can be in collaboration with this and

471
00:23:50,320 --> 00:24:00,580
other layers or yeah Thompson I want a

472
00:23:57,730 --> 00:24:02,850
pony too unfortunately if you if you

473
00:24:00,580 --> 00:24:05,070
want some sort of bootstrapping here

474
00:24:02,850 --> 00:24:07,179
you're gonna have to pay some price

475
00:24:05,070 --> 00:24:10,600
we've found that particularly with

476
00:24:07,180 --> 00:24:13,810
things like like though the the the

477
00:24:10,600 --> 00:24:16,990
additional cost is relatively modest in

478
00:24:13,810 --> 00:24:18,030
terms of performance the is my record

479
00:24:16,990 --> 00:24:20,220
store

480
00:24:18,030 --> 00:24:24,629
finding a packet basically that wouldn't

481
00:24:20,220 --> 00:24:28,320
fit in the typical UDP packet quite so

482
00:24:24,630 --> 00:24:30,210
much but probably that's probably just

483
00:24:28,320 --> 00:24:36,629
reflecting my misunderstanding of hello

484
00:24:30,210 --> 00:24:38,700
Dennis over UDP works but I think this

485
00:24:36,630 --> 00:24:41,910
is really kind of valuable I think this

486
00:24:38,700 --> 00:24:45,210
is more valuable as a this is a TLS

487
00:24:41,910 --> 00:24:47,130
record and you have in that TLS record

488
00:24:45,210 --> 00:24:49,200
you say here's where you go to connect

489
00:24:47,130 --> 00:24:50,970
to them is here's maybe the port number

490
00:24:49,200 --> 00:24:53,840
I don't know whether the port number

491
00:24:50,970 --> 00:24:55,980
makes any sense in this context and

492
00:24:53,840 --> 00:24:58,439
here's all the bootstrapping information

493
00:24:55,980 --> 00:25:01,080
in here 3s 9 and I'm almost at the

494
00:24:58,440 --> 00:25:03,090
opinion that if this doesn't always

495
00:25:01,080 --> 00:25:05,100
include ears ears and I it's not really

496
00:25:03,090 --> 00:25:10,110
doing us very much good I would like to

497
00:25:05,100 --> 00:25:15,120
have some always be SMI then some that's

498
00:25:10,110 --> 00:25:16,949
just me sorry then I'd mentally inserted

499
00:25:15,120 --> 00:25:24,510
myself and cue if you don't terribly

500
00:25:16,950 --> 00:25:26,310
mind I'm lazy personally no hats I think

501
00:25:24,510 --> 00:25:27,510
the reason why I wanted to follow Martin

502
00:25:26,310 --> 00:25:30,240
was that there's a little bit of tension

503
00:25:27,510 --> 00:25:33,180
there in that some people are seeing

504
00:25:30,240 --> 00:25:35,160
this as a generic TLS mechanism I see it

505
00:25:33,180 --> 00:25:36,420
more as a generic mechanism that it has

506
00:25:35,160 --> 00:25:38,820
a lot of benefits if it's aligned with

507
00:25:36,420 --> 00:25:42,420
alt services which means it's HTTP

508
00:25:38,820 --> 00:25:43,830
specific potentially and and I think we

509
00:25:42,420 --> 00:25:45,300
lose something if it were if that were

510
00:25:43,830 --> 00:25:47,070
taken out so that's something that we

511
00:25:45,300 --> 00:25:52,770
probably need to think through and come

512
00:25:47,070 --> 00:25:55,590
to agreement on Ben Schwartz in

513
00:25:52,770 --> 00:26:00,750
particular I can I know there are people

514
00:25:55,590 --> 00:26:04,709
in this room who are not paying who who

515
00:26:00,750 --> 00:26:06,990
would really like this as as a mechanism

516
00:26:04,710 --> 00:26:09,960
to bootstrap quick instead of having to

517
00:26:06,990 --> 00:26:16,320
start over TCP and that that clearly is

518
00:26:09,960 --> 00:26:19,170
not at the TLS later speaking for Roy

519
00:26:16,320 --> 00:26:21,240
fielding I think that combining the SNI

520
00:26:19,170 --> 00:26:23,610
of privacy and old service for

521
00:26:21,240 --> 00:26:25,680
extensibility is the first time that

522
00:26:23,610 --> 00:26:28,040
makes service records work implementing

523
00:26:25,680 --> 00:26:28,040
great

524
00:26:33,450 --> 00:26:39,510
thank you so I think we'll have a

525
00:26:37,540 --> 00:26:41,860
discussion yeah let's have chairs and

526
00:26:39,510 --> 00:26:44,200
even the authors and they expect some

527
00:26:41,860 --> 00:26:46,379
motion on this it seems like a pause I

528
00:26:44,200 --> 00:26:49,320
don't think we need however anything

529
00:26:46,380 --> 00:26:52,360
thank you

530
00:26:49,320 --> 00:27:00,220
so let's return to our previously

531
00:26:52,360 --> 00:27:01,360
scheduled discussion on priorities so

532
00:27:00,220 --> 00:27:04,720
there's been a discussion in the quick

533
00:27:01,360 --> 00:27:06,699
working group about priorities and I

534
00:27:04,720 --> 00:27:09,970
think there are several proposals

535
00:27:06,700 --> 00:27:11,470
floating around but the the point we

536
00:27:09,970 --> 00:27:13,990
came to was that the decision about the

537
00:27:11,470 --> 00:27:17,050
future priorities needs to come mostly

538
00:27:13,990 --> 00:27:20,080
from this community since you know the

539
00:27:17,050 --> 00:27:23,169
charter of quick is to reflect the

540
00:27:20,080 --> 00:27:26,560
semantics of http/2 and that lives

541
00:27:23,170 --> 00:27:28,570
firmly here and so the question is you

542
00:27:26,560 --> 00:27:30,040
know there's a lot of backstory here

543
00:27:28,570 --> 00:27:31,300
we're not going to go over it now

544
00:27:30,040 --> 00:27:35,639
because I think most people are familiar

545
00:27:31,300 --> 00:27:38,500
with it there is a lot of doubt about

546
00:27:35,640 --> 00:27:40,630
the utility of priorities and http2 let

547
00:27:38,500 --> 00:27:41,710
alone hp3 there are a lot of quick

548
00:27:40,630 --> 00:27:45,100
implementers so you don't want to

549
00:27:41,710 --> 00:27:48,940
include http/2 priorities in htv3 at all

550
00:27:45,100 --> 00:27:51,820
and so as a community here they'd like

551
00:27:48,940 --> 00:27:55,180
our advice as to whether we want to hold

552
00:27:51,820 --> 00:28:00,129
them to that bar of including htv-2

553
00:27:55,180 --> 00:28:02,680
priorities in htv-3 and so that's in

554
00:28:00,130 --> 00:28:04,570
some ways a yes or no question there are

555
00:28:02,680 --> 00:28:06,220
a lot of other questions to ask in a lot

556
00:28:04,570 --> 00:28:08,370
of different ways to get where we to it

557
00:28:06,220 --> 00:28:11,350
to a place where we have better

558
00:28:08,370 --> 00:28:12,939
priorities in HTP and by the way every

559
00:28:11,350 --> 00:28:15,370
time I say of priorities what I really

560
00:28:12,940 --> 00:28:17,260
mean is client-to-server hints about

561
00:28:15,370 --> 00:28:19,060
priority when they're sending responses

562
00:28:17,260 --> 00:28:20,500
because that seems to be continually in

563
00:28:19,060 --> 00:28:25,720
effect I've gotten these discussions

564
00:28:20,500 --> 00:28:31,150
it's a horrible name so cue the mics

565
00:28:25,720 --> 00:28:33,840
let's figure this out can we prioritize

566
00:28:31,150 --> 00:28:33,840
the nevermind

567
00:28:34,790 --> 00:28:39,960
and Schwartz I have I have no knowledge

568
00:28:38,700 --> 00:28:44,910
of this I shouldn't be wasting your time

569
00:28:39,960 --> 00:28:46,440
but I just but I just want to point out

570
00:28:44,910 --> 00:28:49,560
that I just want to point out that the

571
00:28:46,440 --> 00:28:52,500
order of arrival of of requests from the

572
00:28:49,560 --> 00:28:54,750
client is is something like an

573
00:28:52,500 --> 00:29:01,110
indication of priorities at least it's

574
00:28:54,750 --> 00:29:03,780
correlated so Martin and I have very

575
00:29:01,110 --> 00:29:14,159
recently submitted a little draft that

576
00:29:03,780 --> 00:29:15,360
goes something like sure an important

577
00:29:14,160 --> 00:29:18,020
feature of any implementation of a

578
00:29:15,360 --> 00:29:23,699
protocol I'm going to speak like a cur

579
00:29:18,020 --> 00:29:25,470
provide a multiply stone is the ability

580
00:29:23,700 --> 00:29:27,240
to prioritize the sending of information

581
00:29:25,470 --> 00:29:29,970
we realized this was important when we

582
00:29:27,240 --> 00:29:32,400
the HTTP to prioritization is Roberto

583
00:29:29,970 --> 00:29:33,270
sorry can you please slow down I can't

584
00:29:32,400 --> 00:29:34,920
understand you

585
00:29:33,270 --> 00:29:37,620
sorry I was trying to go slower anyway

586
00:29:34,920 --> 00:29:40,890
okay

587
00:29:37,620 --> 00:29:43,409
prioritization is difficult and arguably

588
00:29:40,890 --> 00:29:45,600
and could be complete so it will always

589
00:29:43,410 --> 00:29:47,280
be suboptimal particularly if one

590
00:29:45,600 --> 00:29:49,770
endpoint operates in ignorance of the

591
00:29:47,280 --> 00:29:51,420
needs of its peer HGB to implement

592
00:29:49,770 --> 00:29:52,950
introduced a complex prioritization

593
00:29:51,420 --> 00:29:54,630
signalling scheme that used a

594
00:29:52,950 --> 00:29:57,480
combination of dependencies and weights

595
00:29:54,630 --> 00:29:59,820
formed into an unbalanced tree that

596
00:29:57,480 --> 00:30:02,250
scheme also depends on in order delivery

597
00:29:59,820 --> 00:30:04,590
so it is unsuitable for use in protocols

598
00:30:02,250 --> 00:30:07,680
like HTTP 3 which attempt to avoid

599
00:30:04,590 --> 00:30:09,570
global ordering furthermore though that

600
00:30:07,680 --> 00:30:11,220
scheme was rich in some ways it has

601
00:30:09,570 --> 00:30:13,800
proven to be inadequate in several

602
00:30:11,220 --> 00:30:15,780
others it is not well-suited to major

603
00:30:13,800 --> 00:30:17,580
use cases like live video delivery and

604
00:30:15,780 --> 00:30:21,000
it cannot be used to carry hints from

605
00:30:17,580 --> 00:30:22,800
servers this prioritization scheme also

606
00:30:21,000 --> 00:30:25,200
suffered from poor deployment in Interop

607
00:30:22,800 --> 00:30:26,780
most server implementations do not

608
00:30:25,200 --> 00:30:28,380
include support for the scheme

609
00:30:26,780 --> 00:30:30,149
unfortunately I know somebody who

610
00:30:28,380 --> 00:30:33,350
actually did all of it is awesome by the

611
00:30:30,150 --> 00:30:36,810
way Alan

612
00:30:33,350 --> 00:30:38,550
some favoring bespoke schemes instead

613
00:30:36,810 --> 00:30:40,050
based on heuristics and other hints like

614
00:30:38,550 --> 00:30:43,680
the content type and the order in which

615
00:30:40,050 --> 00:30:45,870
the requests arrive consequently the

616
00:30:43,680 --> 00:30:47,080
priority hints defined in HTTP 2 can't

617
00:30:45,870 --> 00:30:50,018
be used across different

618
00:30:47,080 --> 00:30:51,370
versions so we must either define more

619
00:30:50,019 --> 00:30:53,620
rich schemes that might support

620
00:30:51,370 --> 00:30:55,299
translation between versions or we will

621
00:30:53,620 --> 00:30:59,408
suffer information loss if multiple

622
00:30:55,299 --> 00:31:01,120
versions are in use retaining the h2

623
00:30:59,409 --> 00:31:03,490
priority scheme increases the complexity

624
00:31:01,120 --> 00:31:05,408
of the entire system and we don't have

625
00:31:03,490 --> 00:31:11,169
evidence that this complexity is offset

626
00:31:05,409 --> 00:31:12,789
by any value and then we have a little

627
00:31:11,169 --> 00:31:15,580
draft here that says we should you know

628
00:31:12,789 --> 00:31:17,110
deprecated them and basically that you

629
00:31:15,580 --> 00:31:19,570
know servers shouldn't necessarily

630
00:31:17,110 --> 00:31:21,279
respond to them after we submit this and

631
00:31:19,570 --> 00:31:22,658
the clients shouldn't send them and we

632
00:31:21,279 --> 00:31:24,970
also need something better probably but

633
00:31:22,659 --> 00:31:28,149
sure so to be clear you're proposing

634
00:31:24,970 --> 00:31:30,399
that we deprecated HTTP priorities full

635
00:31:28,149 --> 00:31:33,100
stop in two and never put them in three

636
00:31:30,399 --> 00:31:34,570
I am suggesting we deprecated h2

637
00:31:33,100 --> 00:31:37,449
priorities that's whatever sonal

638
00:31:34,570 --> 00:31:39,700
preference is that we have HTTP

639
00:31:37,450 --> 00:31:43,419
priorities which h2 priorities cannot be

640
00:31:39,700 --> 00:31:48,159
right so but that hasn't been created

641
00:31:43,419 --> 00:31:49,779
yet though okay so month also this is

642
00:31:48,159 --> 00:31:51,130
the essence of the discussion we're

643
00:31:49,779 --> 00:31:53,889
having I don't think many people are

644
00:31:51,130 --> 00:31:55,630
particularly attached to the HTTP to

645
00:31:53,889 --> 00:31:59,590
scheme which is part of the reason we

646
00:31:55,630 --> 00:32:03,269
put this in place and copying something

647
00:31:59,590 --> 00:32:06,189
we know is for one of a bit of work bad

648
00:32:03,269 --> 00:32:08,649
into a new protocols would be

649
00:32:06,190 --> 00:32:11,919
irresponsible the challenge is working

650
00:32:08,649 --> 00:32:14,110
out how we get from that how we get from

651
00:32:11,919 --> 00:32:18,389
where we are today to where we want to

652
00:32:14,110 --> 00:32:21,879
be and the proposal that Roberta when I

653
00:32:18,389 --> 00:32:24,459
basically saying here is that we first

654
00:32:21,880 --> 00:32:29,070
revert to the null state and then we

655
00:32:24,460 --> 00:32:32,169
work out how we get to the happy state

656
00:32:29,070 --> 00:32:35,320
there's a lot of disagreement about what

657
00:32:32,169 --> 00:32:37,600
the happy state looks like right now so

658
00:32:35,320 --> 00:32:40,389
and I don't think we're going to get to

659
00:32:37,600 --> 00:32:44,699
any place within the sort of time frames

660
00:32:40,389 --> 00:32:44,699
that we're told the iesg we would quick

661
00:32:45,179 --> 00:32:55,750
without incredible effort now if that

662
00:32:49,120 --> 00:32:57,908
happens and I I will help drive that but

663
00:32:55,750 --> 00:33:00,880
I don't think we're going to succeed but

664
00:32:57,909 --> 00:33:03,220
I will if that happens we can

665
00:33:00,880 --> 00:33:06,190
put that priority scheme into both HTTP

666
00:33:03,220 --> 00:33:09,210
2 and HTTP 3 and and single happy

667
00:33:06,190 --> 00:33:11,650
dancing and celebrate victory but I

668
00:33:09,210 --> 00:33:16,450
think we're looking at shipping quick

669
00:33:11,650 --> 00:33:19,540
within sort of six months ish and six

670
00:33:16,450 --> 00:33:21,730
months is in my experience not enough

671
00:33:19,540 --> 00:33:23,740
time to decide on like the color of

672
00:33:21,730 --> 00:33:26,530
wallpaper let alone something as complex

673
00:33:23,740 --> 00:33:29,320
as a prioritization scheme so Martin

674
00:33:26,530 --> 00:33:31,750
before you leave the mic I just want to

675
00:33:29,320 --> 00:33:33,429
clarify by deprecating this you have

676
00:33:31,750 --> 00:33:36,340
some influence over the behavior of a

677
00:33:33,430 --> 00:33:38,200
web browser if this is the consensus of

678
00:33:36,340 --> 00:33:41,169
the group is your intention that your

679
00:33:38,200 --> 00:33:44,680
browser will stop emitting priorities in

680
00:33:41,170 --> 00:33:45,640
your requests yeah and this is not

681
00:33:44,680 --> 00:33:50,850
something that we've discussed

682
00:33:45,640 --> 00:33:53,200
internally this is my into my personal

683
00:33:50,850 --> 00:33:55,060
position on this might be if the

684
00:33:53,200 --> 00:33:57,250
community decides that we're gonna bend

685
00:33:55,060 --> 00:33:58,990
we're going to just abandon this scheme

686
00:33:57,250 --> 00:34:02,310
and we're gonna go searching for another

687
00:33:58,990 --> 00:34:04,480
one we will join that community and

688
00:34:02,310 --> 00:34:06,040
abandon this game and go searching for

689
00:34:04,480 --> 00:34:07,960
another one and that means potentially

690
00:34:06,040 --> 00:34:10,659
doing things like experimenting we have

691
00:34:07,960 --> 00:34:12,040
a team that's dedicated to looking at

692
00:34:10,659 --> 00:34:13,839
performance of base loading and there

693
00:34:12,040 --> 00:34:15,790
they've done some really deep analysis

694
00:34:13,840 --> 00:34:17,770
on what on what needs to happen and

695
00:34:15,790 --> 00:34:21,159
they're just now looking at how they

696
00:34:17,770 --> 00:34:24,070
might signal that and so we're at a

697
00:34:21,159 --> 00:34:26,409
point where we do have the opportunity

698
00:34:24,070 --> 00:34:28,270
to to run those sorts of experiments

699
00:34:26,409 --> 00:34:31,509
right so I think we're pretty well

700
00:34:28,270 --> 00:34:33,340
positioned to to be participate in this

701
00:34:31,510 --> 00:34:35,680
in this effort if people are interested

702
00:34:33,340 --> 00:34:37,150
in doing it so there's the difference

703
00:34:35,679 --> 00:34:38,949
I've been dedicating them on paper and

704
00:34:37,150 --> 00:34:41,770
deprecating them in the implementations

705
00:34:38,949 --> 00:34:43,929
right and a clean up messy no I wanted

706
00:34:41,770 --> 00:34:46,360
to make clear that we were we're also

707
00:34:43,929 --> 00:34:47,919
behind the the plan of whatever we

708
00:34:46,360 --> 00:34:52,900
decided to do here okay

709
00:34:47,920 --> 00:34:55,060
thank you Rick bishop so in the side

710
00:34:52,900 --> 00:34:58,180
meeting we discussed a couple of

711
00:34:55,060 --> 00:35:02,110
different paths from where we are to

712
00:34:58,180 --> 00:35:05,399
happy State one possibility was having

713
00:35:02,110 --> 00:35:07,480
an extension that let you negotiate

714
00:35:05,400 --> 00:35:11,010
potentially multiple priorities schemes

715
00:35:07,480 --> 00:35:14,140
but at the minimum we will have nothing

716
00:35:11,010 --> 00:35:16,340
h2 and whatever we come up with

717
00:35:14,140 --> 00:35:19,310
probably some other experiments on the

718
00:35:16,340 --> 00:35:21,410
way and of course the problem with

719
00:35:19,310 --> 00:35:23,240
having a flexible negotiation scheme

720
00:35:21,410 --> 00:35:25,700
like that is that you could have total

721
00:35:23,240 --> 00:35:28,540
mismatch between what the client and

722
00:35:25,700 --> 00:35:31,210
server support and there was a lot of

723
00:35:28,540 --> 00:35:33,950
concern about going there potentially

724
00:35:31,210 --> 00:35:36,710
but what I think there was general

725
00:35:33,950 --> 00:35:40,480
agreement on is following on from that

726
00:35:36,710 --> 00:35:43,369
draft having an extension in h2 to say

727
00:35:40,480 --> 00:35:46,790
hey I don't support priorities don't

728
00:35:43,369 --> 00:35:49,160
bother send them to me or conversely as

729
00:35:46,790 --> 00:35:50,990
the client I'm not going to send you

730
00:35:49,160 --> 00:35:53,118
priority is that there's not a request

731
00:35:50,990 --> 00:35:56,868
for equally we did that that is a use

732
00:35:53,119 --> 00:35:59,480
your best judgment so I think probably

733
00:35:56,869 --> 00:36:01,730
the first step for this working group is

734
00:35:59,480 --> 00:36:05,210
adopting the extension of that of that

735
00:36:01,730 --> 00:36:08,000
sort potentially in parallel with saying

736
00:36:05,210 --> 00:36:10,040
we've deprecated this and the setting

737
00:36:08,000 --> 00:36:13,790
indicates that you are a client aware of

738
00:36:10,040 --> 00:36:16,130
that declaration and then h3 that would

739
00:36:13,790 --> 00:36:18,650
just be the normal state and we could

740
00:36:16,130 --> 00:36:21,080
rip it out of each three entirely or

741
00:36:18,650 --> 00:36:22,930
maybe there's a reverse to say they

742
00:36:21,080 --> 00:36:25,310
actually do support this if you need to

743
00:36:22,930 --> 00:36:28,819
translate each two priorities on the

744
00:36:25,310 --> 00:36:30,619
future that's a judgment that can wait

745
00:36:28,820 --> 00:36:33,710
but I think right now we need to talk

746
00:36:30,619 --> 00:36:35,599
about what are we doing for h2 and what

747
00:36:33,710 --> 00:36:38,420
would our experimentation framework look

748
00:36:35,599 --> 00:36:40,640
like so if I could try and characterize

749
00:36:38,420 --> 00:36:42,349
just to make sure I understand you would

750
00:36:40,640 --> 00:36:43,549
like to have a replacement before we

751
00:36:42,349 --> 00:36:45,500
would consider deprecating anything

752
00:36:43,550 --> 00:36:47,900
that's not what I said okay

753
00:36:45,500 --> 00:36:51,080
then I would like to have a way to

754
00:36:47,900 --> 00:36:52,490
express that the client is not

755
00:36:51,080 --> 00:36:54,710
participating in the priority scheme

756
00:36:52,490 --> 00:36:57,169
okay and I would like to understand how

757
00:36:54,710 --> 00:36:58,750
we plan to experiment that doesn't mean

758
00:36:57,170 --> 00:37:05,990
we have to have the experiment stuff

759
00:36:58,750 --> 00:37:10,359
okay right yeah what's your next I was

760
00:37:05,990 --> 00:37:14,270
going to say the we can agree that

761
00:37:10,359 --> 00:37:16,940
sufficient priorities to communicate via

762
00:37:14,270 --> 00:37:20,480
a header field header field in request

763
00:37:16,940 --> 00:37:25,070
and have it filled in responses then I

764
00:37:20,480 --> 00:37:27,160
think we can take the subject out of

765
00:37:25,070 --> 00:37:29,450
critical at work

766
00:37:27,160 --> 00:37:33,370
since then week on it's just another

767
00:37:29,450 --> 00:37:33,370
header feel that it's communicated

768
00:37:38,980 --> 00:37:45,410
Patrick so I agree with many of the

769
00:37:43,640 --> 00:37:47,720
points Roberta made but I think I wanted

770
00:37:45,410 --> 00:37:51,589
to push against one that says that

771
00:37:47,720 --> 00:37:56,480
client side priority indications have

772
00:37:51,590 --> 00:37:57,920
not shown any value and the case I they

773
00:37:56,480 --> 00:38:00,590
came immediately to mine was very easy

774
00:37:57,920 --> 00:38:02,750
because Ben's book right before him and

775
00:38:00,590 --> 00:38:05,150
suggested that we revert to the

776
00:38:02,750 --> 00:38:08,020
signaling of you know the request

777
00:38:05,150 --> 00:38:10,910
ordering as a substitute for client side

778
00:38:08,020 --> 00:38:12,860
indications and as we started with four

779
00:38:10,910 --> 00:38:14,720
years that of course creates this sort

780
00:38:12,860 --> 00:38:16,220
of paradox on the client about whether

781
00:38:14,720 --> 00:38:18,459
it should issue a request now or whether

782
00:38:16,220 --> 00:38:20,629
it should wait in order to determine

783
00:38:18,460 --> 00:38:22,250
what might want to go before this

784
00:38:20,630 --> 00:38:24,740
request right intrigues idle time on the

785
00:38:22,250 --> 00:38:25,910
wire and idle responses if you do it in

786
00:38:24,740 --> 00:38:27,049
one direction and then if you do it in

787
00:38:25,910 --> 00:38:29,089
the more aggressive direction they

788
00:38:27,050 --> 00:38:31,670
result in your higher priority content

789
00:38:29,090 --> 00:38:34,520
getting pushed out by other things and I

790
00:38:31,670 --> 00:38:37,640
think we we learned that as a key

791
00:38:34,520 --> 00:38:38,930
objective now the h2 priority is to

792
00:38:37,640 --> 00:38:40,400
general I don't know it's too

793
00:38:38,930 --> 00:38:41,899
complicated it's definitely too general

794
00:38:40,400 --> 00:38:45,650
you don't get any consistency between

795
00:38:41,900 --> 00:38:47,720
implementations when using in and no one

796
00:38:45,650 --> 00:38:50,780
wants to implement it going forward and

797
00:38:47,720 --> 00:38:53,060
we would be foolish to ignore you know

798
00:38:50,780 --> 00:38:54,890
those statements so I think we need to

799
00:38:53,060 --> 00:38:56,360
sir take that as a given with regard to

800
00:38:54,890 --> 00:38:58,520
h2 and the engines we have to find

801
00:38:56,360 --> 00:39:01,280
something different which kind of leads

802
00:38:58,520 --> 00:39:02,990
us in the pool of do we have something

803
00:39:01,280 --> 00:39:05,990
different or do we want to go like with

804
00:39:02,990 --> 00:39:08,600
nothing and I think my my argument is

805
00:39:05,990 --> 00:39:10,910
rather than say nothing perhaps we could

806
00:39:08,600 --> 00:39:13,370
agree on something very minimal while we

807
00:39:10,910 --> 00:39:15,740
work on what it is we really do want to

808
00:39:13,370 --> 00:39:17,420
ship I I was a little surprised to hear

809
00:39:15,740 --> 00:39:19,430
there from Martin that he felt there was

810
00:39:17,420 --> 00:39:21,500
a lot of contention around so that what

811
00:39:19,430 --> 00:39:23,649
the what the happy state was my

812
00:39:21,500 --> 00:39:26,570
impression was that would kind of been

813
00:39:23,650 --> 00:39:27,830
kind of been merging towards consensus

814
00:39:26,570 --> 00:39:29,390
among people most involved in that

815
00:39:27,830 --> 00:39:31,850
direction so that's that's certainly

816
00:39:29,390 --> 00:39:35,569
interesting input I'm wondering if we

817
00:39:31,850 --> 00:39:37,400
could get consensus on something that we

818
00:39:35,570 --> 00:39:39,350
knew was minimal that in a similar way

819
00:39:37,400 --> 00:39:40,490
to we want to replace nothing with the

820
00:39:39,350 --> 00:39:41,990
happy stage

821
00:39:40,490 --> 00:39:44,089
would be interested in replacing minimal

822
00:39:41,990 --> 00:39:45,890
with a happy state and there are lots of

823
00:39:44,090 --> 00:39:48,080
minimal solutions that have been used in

824
00:39:45,890 --> 00:39:49,759
many many domains you know nice simple

825
00:39:48,080 --> 00:39:52,759
ranked schemes you know those kinds of

826
00:39:49,760 --> 00:39:54,770
things not you know not over specify the

827
00:39:52,760 --> 00:39:57,800
semantics of them but you know back to

828
00:39:54,770 --> 00:40:00,080
the you know three bits five bits of you

829
00:39:57,800 --> 00:40:02,150
know strictly right levels and that may

830
00:40:00,080 --> 00:40:03,740
satisfy our requirement for solving

831
00:40:02,150 --> 00:40:04,820
these basic use cases that we know we

832
00:40:03,740 --> 00:40:07,390
didn't solve the first time around

833
00:40:04,820 --> 00:40:09,980
without backing off for this this period

834
00:40:07,390 --> 00:40:13,460
so I would like to suggest to see if we

835
00:40:09,980 --> 00:40:14,900
can call us an idea like that and make

836
00:40:13,460 --> 00:40:15,980
that you know a required part of

837
00:40:14,900 --> 00:40:18,200
shipping quick because it could should

838
00:40:15,980 --> 00:40:20,030
be simple easy and small even if we know

839
00:40:18,200 --> 00:40:22,669
it's not like fully expressive and then

840
00:40:20,030 --> 00:40:30,890
in parallel or continum the happy state

841
00:40:22,670 --> 00:40:35,350
for lack of a better term um so a couple

842
00:40:30,890 --> 00:40:39,920
of points one Mike suggested that

843
00:40:35,350 --> 00:40:42,319
there's a lot of fear from a

844
00:40:39,920 --> 00:40:45,130
client-server negotiation of the right

845
00:40:42,320 --> 00:40:49,820
scheme which will result in a mismatch

846
00:40:45,130 --> 00:40:52,630
the result of a mismatch is there is no

847
00:40:49,820 --> 00:40:55,880
pradhan priority scheme which is

848
00:40:52,630 --> 00:40:59,320
effectively the current status quo and

849
00:40:55,880 --> 00:41:03,740
regarding request ordering we have a bob

850
00:40:59,320 --> 00:41:06,859
in chrome that pre old requests go out

851
00:41:03,740 --> 00:41:09,799
before other low priority riddled

852
00:41:06,859 --> 00:41:13,790
requests go out before high priority for

853
00:41:09,800 --> 00:41:17,390
example CSS requests but like two

854
00:41:13,790 --> 00:41:23,390
milliseconds before them just because of

855
00:41:17,390 --> 00:41:26,420
a bug that effectively results in those

856
00:41:23,390 --> 00:41:28,549
low priority images arriving to the

857
00:41:26,420 --> 00:41:30,859
client before the CSS because they went

858
00:41:28,550 --> 00:41:33,230
out two milliseconds earlier that is the

859
00:41:30,859 --> 00:41:37,819
state of current h2 priority

860
00:41:33,230 --> 00:41:40,400
implementations so a request order based

861
00:41:37,820 --> 00:41:42,440
priority scheme is not going to be

862
00:41:40,400 --> 00:41:44,660
significantly different than what we see

863
00:41:42,440 --> 00:41:46,430
today for many of the implementations

864
00:41:44,660 --> 00:41:53,450
not all of them some of them are perfect

865
00:41:46,430 --> 00:41:53,819
but most of them are not so I would say

866
00:41:53,450 --> 00:41:55,379
like

867
00:41:53,819 --> 00:41:59,219
on top of that I heard from multiple

868
00:41:55,380 --> 00:42:01,289
people that the proposed the priority

869
00:41:59,219 --> 00:42:05,519
schemes are great for websites but there

870
00:42:01,289 --> 00:42:08,069
are other use cases that also matter so

871
00:42:05,519 --> 00:42:10,499
maybe instead of trying to fit all the

872
00:42:08,069 --> 00:42:12,239
use cases into a single priority scheme

873
00:42:10,499 --> 00:42:14,479
that does everything we can have

874
00:42:12,239 --> 00:42:18,749
different priority schemes that

875
00:42:14,479 --> 00:42:22,169
implement different things that are more

876
00:42:18,749 --> 00:42:24,479
adapted to video or games or websites

877
00:42:22,170 --> 00:42:28,349
and then the client server can choose

878
00:42:24,479 --> 00:42:29,910
and if there is no like no agreement we

879
00:42:28,349 --> 00:42:33,779
fall back to the status quo today

880
00:42:29,910 --> 00:42:35,640
basically so I just want to we have a

881
00:42:33,779 --> 00:42:36,869
very dated queue so we need to make it

882
00:42:35,640 --> 00:42:39,479
brief but I want to remind people that

883
00:42:36,869 --> 00:42:41,999
the big question here is what do we want

884
00:42:39,479 --> 00:42:43,499
to tell quic about HTTP 3 there are many

885
00:42:41,999 --> 00:42:44,308
different ways we can get to fixing

886
00:42:43,499 --> 00:42:46,948
priorities

887
00:42:44,309 --> 00:42:49,199
that's we'd spend more the way more than

888
00:42:46,949 --> 00:42:51,089
time we have today trying to fix that so

889
00:42:49,199 --> 00:42:54,959
we need to focus on what we're gonna

890
00:42:51,089 --> 00:42:57,150
tell HTTP 3 so I would say an extension

891
00:42:54,959 --> 00:42:59,489
mechanism that enables content

892
00:42:57,150 --> 00:43:01,469
client-server negotiation and then

893
00:42:59,489 --> 00:43:05,390
figure out the rest later but let them

894
00:43:01,469 --> 00:43:05,390
ship without HT priorities yes

895
00:43:05,959 --> 00:43:11,609
alessandro cadena CloudFlare so to

896
00:43:08,759 --> 00:43:14,489
answer Mark's question I think that at

897
00:43:11,609 --> 00:43:17,999
this point removing priorities for HTTP

898
00:43:14,489 --> 00:43:21,089
3 seems like the most viable way forward

899
00:43:17,999 --> 00:43:23,038
I don't think people are gonna implement

900
00:43:21,089 --> 00:43:26,989
the currents keep going forward for HTTP

901
00:43:23,039 --> 00:43:30,509
3 but following what patrick said

902
00:43:26,989 --> 00:43:32,969
however flawed the h2 priorities are

903
00:43:30,509 --> 00:43:36,779
right now they do provide some value so

904
00:43:32,969 --> 00:43:40,289
I would be wary of just not doing them

905
00:43:36,779 --> 00:43:42,299
at all decide we would be very

906
00:43:40,289 --> 00:43:45,989
interested in experimenting with new

907
00:43:42,299 --> 00:43:51,089
schemes with whatever client wants to do

908
00:43:45,989 --> 00:43:57,989
it with us so being other light there is

909
00:43:51,089 --> 00:44:00,779
kazuo's draft or other proposals of Hoku

910
00:43:57,989 --> 00:44:04,089
fastly yeah well I'm speaking out of

911
00:44:00,779 --> 00:44:08,799
developer as a personal opinion

912
00:44:04,089 --> 00:44:13,180
I think it'll be fine for the browsers

913
00:44:08,799 --> 00:44:15,490
just to stop us any priority frames

914
00:44:13,180 --> 00:44:19,750
because we could have backup plans using

915
00:44:15,490 --> 00:44:22,808
contacts and summer tripping hints on

916
00:44:19,750 --> 00:44:27,490
the other hand what I would really like

917
00:44:22,809 --> 00:44:30,250
to see is new clients or existing

918
00:44:27,490 --> 00:44:34,598
clients are starting using the priority

919
00:44:30,250 --> 00:44:37,450
frames of HTTP - in a new way because I

920
00:44:34,599 --> 00:44:40,329
mean today we can switch our

921
00:44:37,450 --> 00:44:42,788
prioritization scheme from HTTP to based

922
00:44:40,329 --> 00:44:47,829
approach to a new absolute value based

923
00:44:42,789 --> 00:44:50,230
back sink and then we can create a

924
00:44:47,829 --> 00:44:53,680
translation table from the HTTP to

925
00:44:50,230 --> 00:44:55,180
sprout priorities that either Chrome or

926
00:44:53,680 --> 00:44:57,430
Firefox since there's those three or

927
00:44:55,180 --> 00:44:59,680
five bits and it will work fine and

928
00:44:57,430 --> 00:45:02,230
assuming that that could also become the

929
00:44:59,680 --> 00:45:04,990
norm for HTTP 3 we would just simply

930
00:45:02,230 --> 00:45:07,119
have a single prioritization scheme on

931
00:45:04,990 --> 00:45:08,589
the server side regardless of whether

932
00:45:07,119 --> 00:45:10,930
it's the browser since the priority

933
00:45:08,589 --> 00:45:13,960
frames but that only works if the

934
00:45:10,930 --> 00:45:15,879
browser's stop doing new things with

935
00:45:13,960 --> 00:45:21,970
that priority frames or budget because

936
00:45:15,880 --> 00:45:28,869
we need to have a stable puppy Alan

937
00:45:21,970 --> 00:45:31,660
Findo Facebook ok so I agree that h2

938
00:45:28,869 --> 00:45:34,180
priorities are broken and it's ok to not

939
00:45:31,660 --> 00:45:37,270
copy them forward into HTTP 3 like we

940
00:45:34,180 --> 00:45:38,740
should let them go and I think the idea

941
00:45:37,270 --> 00:45:42,430
of having a setting that indicates that

942
00:45:38,740 --> 00:45:45,098
were like Lucas could out to the list

943
00:45:42,430 --> 00:45:47,200
like a setting in h2 that says I'm yes I

944
00:45:45,099 --> 00:45:48,910
am going to send h2 priority or no I'm

945
00:45:47,200 --> 00:45:52,930
not going to support priority I think

946
00:45:48,910 --> 00:45:55,240
that's probably a good thing I'm really

947
00:45:52,930 --> 00:45:56,680
worried about removing priorities

948
00:45:55,240 --> 00:45:59,379
entirely from each or I should say a

949
00:45:56,680 --> 00:46:04,210
prior client sent priority hinting

950
00:45:59,380 --> 00:46:06,520
scheme from h3 particularly from if we

951
00:46:04,210 --> 00:46:10,119
were take it out of the critical path of

952
00:46:06,520 --> 00:46:12,520
shipping HTTP 3 then it will sort of

953
00:46:10,119 --> 00:46:14,859
remove the urgency to have the scheme

954
00:46:12,520 --> 00:46:16,450
developed and it will languish much

955
00:46:14,859 --> 00:46:16,960
longer and if we go to a state like

956
00:46:16,450 --> 00:46:18,399
Martin

957
00:46:16,960 --> 00:46:20,950
adjusting where the browser stopped

958
00:46:18,400 --> 00:46:22,420
sending any priority whatsoever and we

959
00:46:20,950 --> 00:46:24,339
shed page three and there's no priority

960
00:46:22,420 --> 00:46:26,950
then we're gonna be in a bad state for a

961
00:46:24,339 --> 00:46:30,520
long time so I think there's value in

962
00:46:26,950 --> 00:46:32,020
having this this client send hinting and

963
00:46:30,520 --> 00:46:34,200
one of the reasons is that we don't

964
00:46:32,020 --> 00:46:37,330
currently implement like a server-side

965
00:46:34,200 --> 00:46:39,460
content type based and the word in the

966
00:46:37,330 --> 00:46:41,348
side view used was fragile skiing for

967
00:46:39,460 --> 00:46:43,839
the server to come up with its own

968
00:46:41,349 --> 00:46:45,760
priority and I'd I would rather not go

969
00:46:43,839 --> 00:46:51,549
there or force every server developer to

970
00:46:45,760 --> 00:46:54,609
go there yes but I definitely have this

971
00:46:51,550 --> 00:46:56,920
list support removing existing three

972
00:46:54,609 --> 00:47:00,819
prairies from from quick in terms of

973
00:46:56,920 --> 00:47:02,080
moving for it I also intend to spend a

974
00:47:00,820 --> 00:47:04,180
fair amount of time and also development

975
00:47:02,080 --> 00:47:06,970
work I start running some different

976
00:47:04,180 --> 00:47:10,720
experiments and trying to like figure

977
00:47:06,970 --> 00:47:13,779
out what to do but I think honestly like

978
00:47:10,720 --> 00:47:16,118
I expect we're gonna end up like we

979
00:47:13,780 --> 00:47:18,220
chrome are gonna end up in the inferred

980
00:47:16,119 --> 00:47:19,930
our implementation and our servers are

981
00:47:18,220 --> 00:47:22,689
going to end up using something very

982
00:47:19,930 --> 00:47:23,919
similar to kazuo's proposal though

983
00:47:22,690 --> 00:47:26,589
probably now in a header instead

984
00:47:23,920 --> 00:47:28,030
probably smuggled in the existing HQ

985
00:47:26,589 --> 00:47:31,990
priority frame because where you have an

986
00:47:28,030 --> 00:47:34,510
int there we just cram it in and that

987
00:47:31,990 --> 00:47:36,368
works fine for its BTU as well as quick

988
00:47:34,510 --> 00:47:38,530
but we do need a setting did negotiate

989
00:47:36,369 --> 00:47:40,690
something but I guess this is kind of

990
00:47:38,530 --> 00:47:42,700
channeling Patrick a comment which is I

991
00:47:40,690 --> 00:47:44,740
don't think we're that far off something

992
00:47:42,700 --> 00:47:46,359
we think is maybe not perfect because

993
00:47:44,740 --> 00:47:50,140
there is no such thing as perfect but

994
00:47:46,359 --> 00:47:51,490
like pretty damn good I have a slight

995
00:47:50,140 --> 00:47:55,960
preference for binary encoding of

996
00:47:51,490 --> 00:47:59,169
writers but that's just me Lukas body

997
00:47:55,960 --> 00:48:01,780
clarify just to say that yeah Alan

998
00:47:59,170 --> 00:48:04,540
mentioned it Brad and I pushed a very

999
00:48:01,780 --> 00:48:06,369
short draft earlier today just to give

1000
00:48:04,540 --> 00:48:10,089
an example of how you might write this

1001
00:48:06,369 --> 00:48:12,369
extension to advertise that you don't

1002
00:48:10,089 --> 00:48:14,650
want to use priority and if if you

1003
00:48:12,369 --> 00:48:16,390
happen to send priority frames after

1004
00:48:14,650 --> 00:48:18,730
doing that the other side you'd ignore

1005
00:48:16,390 --> 00:48:20,859
them it's it's not perfect but it's it's

1006
00:48:18,730 --> 00:48:23,339
basically the mechanism to do what we're

1007
00:48:20,859 --> 00:48:25,960
talking about about removing priorities

1008
00:48:23,339 --> 00:48:29,109
it doesn't articulate the problem space

1009
00:48:25,960 --> 00:48:30,150
as well as Roberto's initiation to this

1010
00:48:29,109 --> 00:48:31,860
session

1011
00:48:30,150 --> 00:48:33,960
you know I could probably be something

1012
00:48:31,860 --> 00:48:38,180
about combining with them if that's the

1013
00:48:33,960 --> 00:48:38,180
approach that we want to take we'll see

1014
00:48:40,670 --> 00:48:46,980
a bit of a warning header Bourne

1015
00:48:44,730 --> 00:48:49,200
priorities have a lot of complexities

1016
00:48:46,980 --> 00:48:52,370
and on an end this but header Bourne

1017
00:48:49,200 --> 00:48:55,710
priorities have a lot of complexities

1018
00:48:52,370 --> 00:48:57,480
especially involving caching um what's

1019
00:48:55,710 --> 00:48:58,950
the priority that you cache for a range

1020
00:48:57,480 --> 00:49:00,750
request or when you have multiple

1021
00:48:58,950 --> 00:49:03,240
requesters from different applications

1022
00:49:00,750 --> 00:49:05,220
and different locations right being set

1023
00:49:03,240 --> 00:49:06,560
ice actually support headers and I

1024
00:49:05,220 --> 00:49:08,819
support going down this rabbit hole

1025
00:49:06,560 --> 00:49:10,620
because I think that headers are in the

1026
00:49:08,820 --> 00:49:12,900
end they're kind of the essence of HTTP

1027
00:49:10,620 --> 00:49:14,190
right they are HTTP everywhere it

1028
00:49:12,900 --> 00:49:16,250
doesn't matter how you transfer it

1029
00:49:14,190 --> 00:49:19,050
they're part of the semantics of HTTP

1030
00:49:16,250 --> 00:49:21,270
and I think one of the failings we had

1031
00:49:19,050 --> 00:49:23,250
in h2 was that we made it really

1032
00:49:21,270 --> 00:49:24,990
difficult or even impossible for a

1033
00:49:23,250 --> 00:49:26,730
client to signal its needs or

1034
00:49:24,990 --> 00:49:29,160
preferences with regards to priority

1035
00:49:26,730 --> 00:49:30,810
headers being part of the semantics

1036
00:49:29,160 --> 00:49:33,779
being visible to all layers of the stack

1037
00:49:30,810 --> 00:49:35,190
are a good way to do this and a funny

1038
00:49:33,780 --> 00:49:37,200
thing about headers is at least with

1039
00:49:35,190 --> 00:49:40,620
their compression especially when you're

1040
00:49:37,200 --> 00:49:42,029
not using dependencies and you just have

1041
00:49:40,620 --> 00:49:45,089
relative few priorities it's actually

1042
00:49:42,030 --> 00:49:47,520
more efficient on the wire so you know

1043
00:49:45,090 --> 00:49:48,990
added benefit so I think we should think

1044
00:49:47,520 --> 00:49:51,240
through these complexities I think it

1045
00:49:48,990 --> 00:49:52,470
belongs here there's this is an HTTP

1046
00:49:51,240 --> 00:49:54,299
problem not even a quick problem if

1047
00:49:52,470 --> 00:49:55,410
we're going to do it in headers and we

1048
00:49:54,300 --> 00:49:57,630
have to be very careful about it because

1049
00:49:55,410 --> 00:50:04,890
there are a lot of areas that we touch

1050
00:49:57,630 --> 00:50:06,630
if we do this yeah Thomson I like some

1051
00:50:04,890 --> 00:50:08,160
of the things in the designs that people

1052
00:50:06,630 --> 00:50:10,350
have proposed with head and so I like

1053
00:50:08,160 --> 00:50:13,009
the fact that you can get that proper

1054
00:50:10,350 --> 00:50:16,560
end-to-end signal effectively and

1055
00:50:13,010 --> 00:50:19,170
intermediary system is a nice benefit in

1056
00:50:16,560 --> 00:50:20,910
both directions was also a nice and

1057
00:50:19,170 --> 00:50:22,170
roberto's write about the caching of

1058
00:50:20,910 --> 00:50:24,089
course that's gonna be a little tricky

1059
00:50:22,170 --> 00:50:26,220
to work out but I think we can we can

1060
00:50:24,090 --> 00:50:28,860
work through through that pretty

1061
00:50:26,220 --> 00:50:32,580
effectively if we if we spend the time I

1062
00:50:28,860 --> 00:50:34,470
think that the draft that Brad and Lucas

1063
00:50:32,580 --> 00:50:37,529
have put together than anyone else on

1064
00:50:34,470 --> 00:50:41,939
that one seems to be the path it Casilla

1065
00:50:37,530 --> 00:50:42,960
Oh cuz we were right okay good work

1066
00:50:41,940 --> 00:50:46,290
brain

1067
00:50:42,960 --> 00:50:48,630
and I think that's probably better than

1068
00:50:46,290 --> 00:50:50,849
what Roberto and I have proposed here

1069
00:50:48,630 --> 00:50:53,250
I think we're simply looking to make a

1070
00:50:50,849 --> 00:50:55,619
statement saying this have failed and

1071
00:50:53,250 --> 00:50:57,390
this is one way that you would go having

1072
00:50:55,619 --> 00:50:59,609
an explicit signal acknowledging that

1073
00:50:57,390 --> 00:51:02,279
you're not using these would be would be

1074
00:50:59,609 --> 00:51:05,098
valuable I'm hearing from people who

1075
00:51:02,280 --> 00:51:08,150
operate real services that they would be

1076
00:51:05,099 --> 00:51:10,859
disappointed if we stop sending priority

1077
00:51:08,150 --> 00:51:13,079
frames in the in the short term at least

1078
00:51:10,859 --> 00:51:15,319
before we have something in place and so

1079
00:51:13,079 --> 00:51:18,809
we'll probably need some some

1080
00:51:15,319 --> 00:51:24,509
transitional stuff work out and this is

1081
00:51:18,809 --> 00:51:26,280
probably part of it and Brad were seeing

1082
00:51:24,510 --> 00:51:28,530
Google seeing something it's probably

1083
00:51:26,280 --> 00:51:30,300
pretty obvious but with the setting you

1084
00:51:28,530 --> 00:51:32,550
could use a value other than 0 & 1 to

1085
00:51:30,300 --> 00:51:33,869
indicate there your reinterpreting what

1086
00:51:32,550 --> 00:51:39,800
that what's in the priority frame and

1087
00:51:33,869 --> 00:51:42,140
still use the existing priority fame so

1088
00:51:39,800 --> 00:51:44,309
was my chair head on and I'm waiting

1089
00:51:42,140 --> 00:51:48,750
anxiously for kicks from a mother of my

1090
00:51:44,309 --> 00:51:52,109
left to my right I don't think we can

1091
00:51:48,750 --> 00:51:52,650
deprecated priorities with this much

1092
00:51:52,109 --> 00:51:55,759
notice

1093
00:51:52,650 --> 00:51:58,619
I think that's off the table for today

1094
00:51:55,760 --> 00:52:00,750
sorry Martin sorry that second so

1095
00:51:58,619 --> 00:52:02,069
marking let's let's be clear I don't

1096
00:52:00,750 --> 00:52:04,500
think we're asking for working group

1097
00:52:02,069 --> 00:52:12,750
adoption 15 minutes after the draft was

1098
00:52:04,500 --> 00:52:17,760
it was but nice time its inputs of the

1099
00:52:12,750 --> 00:52:19,890
discussion I am hearing I don't think I

1100
00:52:17,760 --> 00:52:22,109
heard any pushback against the idea of

1101
00:52:19,890 --> 00:52:26,210
telling HTTP sorry the quick working

1102
00:52:22,109 --> 00:52:29,190
group that HTTP 3 does not need to

1103
00:52:26,210 --> 00:52:31,500
convey HB 2 priorities and that's the

1104
00:52:29,190 --> 00:52:32,640
high order bit if anyone has an issue

1105
00:52:31,500 --> 00:52:38,160
with that please get to the mics right

1106
00:52:32,640 --> 00:52:40,920
now well yes there will be a discussion

1107
00:52:38,160 --> 00:52:42,779
between the chairs of various hats and

1108
00:52:40,920 --> 00:52:45,030
the ADEs but I think that we have a

1109
00:52:42,780 --> 00:52:46,410
clear path board for that question now

1110
00:52:45,030 --> 00:52:47,910
in your statement confuse me a tiny bit

1111
00:52:46,410 --> 00:52:50,308
so I'm glad your than like oh okay well

1112
00:52:47,910 --> 00:52:53,308
let me just I said that it was okay to

1113
00:52:50,309 --> 00:52:55,430
let HG priorities go from each three i

1114
00:52:53,309 --> 00:52:57,020
if we bring something there

1115
00:52:55,430 --> 00:52:58,250
something new introduced it'd be nice

1116
00:52:57,020 --> 00:52:59,930
it's like Kazuo mentioned if there's a

1117
00:52:58,250 --> 00:53:01,790
way to translate from one to the other

1118
00:52:59,930 --> 00:53:02,210
but if it shouldn't be done it that's

1119
00:53:01,790 --> 00:53:04,759
okay

1120
00:53:02,210 --> 00:53:06,589
so what confused you oh just I I heard

1121
00:53:04,760 --> 00:53:10,190
you say two slightly different things

1122
00:53:06,589 --> 00:53:13,819
which was it's okay to not require HTTP

1123
00:53:10,190 --> 00:53:15,559
3 to convey hb2 priorities but you

1124
00:53:13,819 --> 00:53:17,390
expect HP 3 to have some priority

1125
00:53:15,559 --> 00:53:18,619
mechanism yes right but that's an

1126
00:53:17,390 --> 00:53:20,569
argument for a different working group

1127
00:53:18,619 --> 00:53:21,920
okay yeah no that's fine I just

1128
00:53:20,569 --> 00:53:29,839
I'm glad we have that new one I try to

1129
00:53:21,920 --> 00:53:31,490
say it and quick and so mark keep in

1130
00:53:29,839 --> 00:53:35,690
mind the responsibility for providing

1131
00:53:31,490 --> 00:53:39,200
that a priority scheme lies here yes

1132
00:53:35,690 --> 00:53:40,550
that that is to me very clear and I want

1133
00:53:39,200 --> 00:53:43,220
to make sure there's agreement on that

1134
00:53:40,550 --> 00:53:44,839
that a new priority scheme will not

1135
00:53:43,220 --> 00:53:46,459
emerge from the quick working group it

1136
00:53:44,839 --> 00:53:49,220
will emerge from this working right and

1137
00:53:46,460 --> 00:53:51,020
I think we we need to be very clear on

1138
00:53:49,220 --> 00:53:53,509
that one end we need to be very very

1139
00:53:51,020 --> 00:53:54,950
fast because essentially we're racing

1140
00:53:53,510 --> 00:53:56,690
the quick working group if we tell them

1141
00:53:54,950 --> 00:53:58,460
then right they're not getting age to

1142
00:53:56,690 --> 00:54:00,380
what they're allowed to not and the

1143
00:53:58,460 --> 00:54:01,849
history yeah this is what concerns me is

1144
00:54:00,380 --> 00:54:03,950
we've had this discussion in the past

1145
00:54:01,849 --> 00:54:05,599
this is not a new topic and the last

1146
00:54:03,950 --> 00:54:06,828
time we exhorted client developer

1147
00:54:05,599 --> 00:54:09,020
circles to work together do

1148
00:54:06,829 --> 00:54:10,579
experimentation gather data and we've

1149
00:54:09,020 --> 00:54:12,920
made a bit of progress we have some

1150
00:54:10,579 --> 00:54:14,510
proposals on the table but it would be

1151
00:54:12,920 --> 00:54:17,559
great if we actually saw some some data

1152
00:54:14,510 --> 00:54:23,750
and get some experimentation experience

1153
00:54:17,559 --> 00:54:27,380
design team 19 would be great

1154
00:54:23,750 --> 00:54:29,000
I think you're right but I'll remind

1155
00:54:27,380 --> 00:54:30,589
everybody that last time we went through

1156
00:54:29,000 --> 00:54:32,660
trying to make priorities we were also

1157
00:54:30,589 --> 00:54:35,450
making the whole rest of it as well I

1158
00:54:32,660 --> 00:54:37,009
mean yes we had the base of some speedy

1159
00:54:35,450 --> 00:54:40,939
deployments but they were sufficiently

1160
00:54:37,010 --> 00:54:42,710
different but it didn't really matter so

1161
00:54:40,940 --> 00:54:44,359
all I'm really trying to say is I hope

1162
00:54:42,710 --> 00:54:46,069
that the barrier to entry for doing this

1163
00:54:44,359 --> 00:54:49,578
experimentation is actually lower this

1164
00:54:46,069 --> 00:54:51,290
time so it might actually happen I hope

1165
00:54:49,579 --> 00:54:55,069
so and I just thank you Ian for saying

1166
00:54:51,290 --> 00:54:56,779
it's gonna happen cuz yeah yeah I'm just

1167
00:54:55,069 --> 00:54:58,250
aware that a lot of the people involved

1168
00:54:56,780 --> 00:55:02,660
are busy doing a couple of other small

1169
00:54:58,250 --> 00:55:04,190
things and small things you know this

1170
00:55:02,660 --> 00:55:06,470
was this was done under pressure the

1171
00:55:04,190 --> 00:55:08,510
last time and we thought we had a good

1172
00:55:06,470 --> 00:55:09,080
idea the last time I would have more

1173
00:55:08,510 --> 00:55:10,940
evidence

1174
00:55:09,080 --> 00:55:15,200
we actually are doing something better

1175
00:55:10,940 --> 00:55:16,640
yeah so mountaintops again unlikely and

1176
00:55:15,200 --> 00:55:19,069
I don't think I can make a commitment to

1177
00:55:16,640 --> 00:55:20,770
do something within the timeframe that

1178
00:55:19,070 --> 00:55:25,220
we're talking about which is why I'm

1179
00:55:20,770 --> 00:55:27,920
sort of caveat in all of this but I'm

1180
00:55:25,220 --> 00:55:29,299
certainly willing to put the work put

1181
00:55:27,920 --> 00:55:32,180
the work in where possible it's just

1182
00:55:29,300 --> 00:55:34,940
that yeah so small things small other

1183
00:55:32,180 --> 00:55:36,649
things up on the plate as well who would

1184
00:55:34,940 --> 00:55:41,470
be willing to participate in an HDTV

1185
00:55:36,650 --> 00:55:41,470
priority revision design team ends up

1186
00:55:41,620 --> 00:55:47,210
okay I see Ian

1187
00:55:44,870 --> 00:55:50,569
Brad Roberto this is one of the

1188
00:55:47,210 --> 00:55:58,280
recording worst case I see Craig I see

1189
00:55:50,570 --> 00:55:59,900
Mike until you're done start today so

1190
00:55:58,280 --> 00:56:01,760
you know your was asking about the

1191
00:55:59,900 --> 00:56:05,810
parameters of the race against quick huh

1192
00:56:01,760 --> 00:56:08,840
and so we can game that well we can make

1193
00:56:05,810 --> 00:56:16,520
quick as slow as we want that's not

1194
00:56:08,840 --> 00:56:22,460
really a goal speaking sorry we have to

1195
00:56:16,520 --> 00:56:25,430
zu ho I see Lucas I saw Craig I saw him

1196
00:56:22,460 --> 00:56:29,780
before and yeah and Brett and Roberto

1197
00:56:25,430 --> 00:56:31,850
and you know every him know I got you

1198
00:56:29,780 --> 00:56:35,150
Lucas I think we're good yeah okay

1199
00:56:31,850 --> 00:56:38,870
I'm speaking with my editor of quick hat

1200
00:56:35,150 --> 00:56:43,070
on I don't anticipate us finishing quick

1201
00:56:38,870 --> 00:56:46,759
before the end of the year I know that

1202
00:56:43,070 --> 00:56:48,200
sounds sad to people I'm not gonna say

1203
00:56:46,760 --> 00:56:50,240
anything about what happens next year

1204
00:56:48,200 --> 00:56:56,480
but you may be more sad if you want to

1205
00:56:50,240 --> 00:56:58,100
take talk to me offline that said that I

1206
00:56:56,480 --> 00:57:00,350
expected that quick will be will be

1207
00:56:58,100 --> 00:57:02,720
stable a lot sooner than that

1208
00:57:00,350 --> 00:57:07,009
yes and people will be very reluctant to

1209
00:57:02,720 --> 00:57:08,779
make changes even you know we're moving

1210
00:57:07,010 --> 00:57:09,770
to late stage process for all adult all

1211
00:57:08,780 --> 00:57:13,220
the drivers now aren't we

1212
00:57:09,770 --> 00:57:14,509
I think we didn't decide that we should

1213
00:57:13,220 --> 00:57:17,540
have done we should have decided that

1214
00:57:14,510 --> 00:57:19,310
this week but there's going to be some

1215
00:57:17,540 --> 00:57:21,350
reluctance to to put anything in

1216
00:57:19,310 --> 00:57:22,700
implementations in in a short time yes

1217
00:57:21,350 --> 00:57:24,799
but we're gonna be shipping this stuff

1218
00:57:22,700 --> 00:57:26,660
yeah and we need to be aware of that

1219
00:57:24,800 --> 00:57:29,270
right so I want to wrap this discussion

1220
00:57:26,660 --> 00:57:31,430
up because we're definitely over time

1221
00:57:29,270 --> 00:57:33,020
one more question of the people who put

1222
00:57:31,430 --> 00:57:35,210
their hand up for the design team who is

1223
00:57:33,020 --> 00:57:36,770
willing to put in the work to lead it to

1224
00:57:35,210 --> 00:57:39,710
crack the whip and make sure that

1225
00:57:36,770 --> 00:57:41,360
actually gets moving Ian you've got time

1226
00:57:39,710 --> 00:57:42,710
to do that because it will take some

1227
00:57:41,360 --> 00:57:45,230
time okay

1228
00:57:42,710 --> 00:57:47,300
Ian thank you very much we'll talk about

1229
00:57:45,230 --> 00:57:51,170
getting me the resources you need all

1230
00:57:47,300 --> 00:57:55,670
right both Roy fielding and colon

1231
00:57:51,170 --> 00:57:59,060
bindles hand are up on jabber sorry we

1232
00:57:55,670 --> 00:58:01,510
didn't hear that what was that two more

1233
00:57:59,060 --> 00:58:08,900
volunteers Roy in college okay great

1234
00:58:01,510 --> 00:58:10,790
thank you ian is leading that yes so if

1235
00:58:08,900 --> 00:58:14,720
you change your mind later and decide

1236
00:58:10,790 --> 00:58:16,250
you do want to join it talk to Ian it's

1237
00:58:14,720 --> 00:58:18,430
a little bit of big for design team to

1238
00:58:16,250 --> 00:58:21,800
be honest but we'll see if it's workable

1239
00:58:18,430 --> 00:58:25,029
Roy says I still expect HTTP core to

1240
00:58:21,800 --> 00:58:30,350
finish at least a week before quick

1241
00:58:25,030 --> 00:58:33,580
taking beds all right let's go to the

1242
00:58:30,350 --> 00:58:33,580
course specifications

1243
00:58:35,170 --> 00:58:42,830
yes let's go to the issues list on the

1244
00:58:38,930 --> 00:58:44,810
core specifications and we are looking

1245
00:58:42,830 --> 00:58:48,850
at the discussed label is that all we

1246
00:58:44,810 --> 00:58:51,380
have left is no okay let's get through

1247
00:58:48,850 --> 00:58:52,970
these are the issues that the editors

1248
00:58:51,380 --> 00:58:55,310
thought might benefit from some working

1249
00:58:52,970 --> 00:58:57,799
group discussion so let's just go

1250
00:58:55,310 --> 00:59:00,850
through and see really I think some of

1251
00:58:57,800 --> 00:59:02,840
them may be quite short number 218

1252
00:59:00,850 --> 00:59:06,410
disambiguate 403 forbidden

1253
00:59:02,840 --> 00:59:10,460
so as Bourne asks the interpretation of

1254
00:59:06,410 --> 00:59:12,950
403 forbidden is used in two situations

1255
00:59:10,460 --> 00:59:14,510
when the request operation is forbidden

1256
00:59:12,950 --> 00:59:16,700
and when the request of operation is

1257
00:59:14,510 --> 00:59:17,780
forbidden for the user identified some

1258
00:59:16,700 --> 00:59:20,689
other words it's a bit of an

1259
00:59:17,780 --> 00:59:23,180
authentication failure almost and he

1260
00:59:20,690 --> 00:59:24,620
gives us some text here if

1261
00:59:23,180 --> 00:59:25,790
authentication for dozens were provided

1262
00:59:24,620 --> 00:59:27,980
there are quests that server considers

1263
00:59:25,790 --> 00:59:29,450
an insufficient to grant access the

1264
00:59:27,980 --> 00:59:30,590
client should not automatically repeat

1265
00:59:29,450 --> 00:59:32,600
the request with the same credentials

1266
00:59:30,590 --> 00:59:35,960
the fight may repeat the request with

1267
00:59:32,600 --> 00:59:37,310
new or different credentials and

1268
00:59:35,960 --> 00:59:39,230
there's a further sentence later on

1269
00:59:37,310 --> 00:59:41,259
however requests might be forbidden for

1270
00:59:39,230 --> 00:59:44,330
reasons unrelated with the credentials

1271
00:59:41,260 --> 00:59:47,570
and if I scroll down a little bit I

1272
00:59:44,330 --> 00:59:49,490
think I made a proposal the phrase

1273
00:59:47,570 --> 00:59:53,000
authorizes the first sentence is the rid

1274
00:59:49,490 --> 00:59:58,330
of the issue and 2616 used to fulfill it

1275
00:59:53,000 --> 00:59:58,330
instead and so if we go back to that

1276
00:59:59,050 --> 01:00:08,119
where is that down here yeah this bit

1277
01:00:05,420 --> 01:00:10,160
right here so in other words refused to

1278
01:00:08,119 --> 01:00:15,980
authorize it refreezes to fulfill it

1279
01:00:10,160 --> 01:00:18,410
would be that the proposed text and then

1280
01:00:15,980 --> 01:00:19,940
as Bourne replies with a slight

1281
01:00:18,410 --> 01:00:23,029
modification to that but I think it's

1282
01:00:19,940 --> 01:00:24,380
it's relatively in the spirit I wanted

1283
01:00:23,030 --> 01:00:26,750
to bring this up just to make sure that

1284
01:00:24,380 --> 01:00:29,570
people were okay to switch back from

1285
01:00:26,750 --> 01:00:31,880
authorize it to fulfill it and to prod

1286
01:00:29,570 --> 01:00:33,560
Roy especially in Julian to see if there

1287
01:00:31,880 --> 01:00:41,810
was a reason why we changed that in in

1288
01:00:33,560 --> 01:00:43,279
this I guess okay if either of you two

1289
01:00:41,810 --> 01:00:46,130
can remember why we did that that would

1290
01:00:43,280 --> 01:00:50,470
be good Julian says +12 okay right so

1291
01:00:46,130 --> 01:00:54,050
Martin Tilton what other things might

1292
01:00:50,470 --> 01:00:58,970
cause something to generate a 403 is it

1293
01:00:54,050 --> 01:01:01,930
the face of the Moon or I'm asking

1294
01:00:58,970 --> 01:01:04,250
seriously because if this if the typical

1295
01:01:01,930 --> 01:01:06,290
interpretation of a 403 is that my

1296
01:01:04,250 --> 01:01:09,470
credentials that the credentials that I

1297
01:01:06,290 --> 01:01:13,900
offered were insufficient right which is

1298
01:01:09,470 --> 01:01:20,149
one which is number two

1299
01:01:13,900 --> 01:01:22,310
then what's the semantics of the point

1300
01:01:20,150 --> 01:01:24,020
number one servers it might be server

1301
01:01:22,310 --> 01:01:29,599
configuration it might be other state

1302
01:01:24,020 --> 01:01:31,550
that isn't about the client okay chef

1303
01:01:29,599 --> 01:01:34,460
gentle another way that we use for it

1304
01:01:31,550 --> 01:01:37,670
even in the wide world is like the summe

1305
01:01:34,460 --> 01:01:39,260
URL prefix for which you know we don't

1306
01:01:37,670 --> 01:01:41,420
want to show you the index of a

1307
01:01:39,260 --> 01:01:42,650
directory or something like that a lot

1308
01:01:41,420 --> 01:01:44,150
of servers before it three have been

1309
01:01:42,650 --> 01:01:46,630
resources that nobody should be

1310
01:01:44,150 --> 01:01:46,630
accessing

1311
01:01:49,140 --> 01:01:55,420
authentication information can be

1312
01:01:51,300 --> 01:01:58,720
carried in ways other than just the

1313
01:01:55,420 --> 01:02:03,430
standard HTTP authentication token so

1314
01:01:58,720 --> 01:02:05,680
for example if somebody presents in CDN

1315
01:02:03,430 --> 01:02:08,890
interconnect if somebody presents a

1316
01:02:05,680 --> 01:02:10,629
token that is invalid we make 403 of

1317
01:02:08,890 --> 01:02:11,920
them with a reason that tells them

1318
01:02:10,630 --> 01:02:15,070
what's wrong with their token

1319
01:02:11,920 --> 01:02:16,840
so it's an authorization problem for

1320
01:02:15,070 --> 01:02:19,540
that specific user but in a way

1321
01:02:16,840 --> 01:02:23,290
unrelated to the specific HTTP header

1322
01:02:19,540 --> 01:02:24,730
named authorization I don't want us to

1323
01:02:23,290 --> 01:02:26,890
faceplant on this one issue it's it's a

1324
01:02:24,730 --> 01:02:31,300
pretty simple warded morning change so I

1325
01:02:26,890 --> 01:02:33,420
just I'm sorry the the reason that I

1326
01:02:31,300 --> 01:02:38,140
asked was that I'm not sure that this

1327
01:02:33,420 --> 01:02:41,110
really makes any difference but I guess

1328
01:02:38,140 --> 01:02:42,190
it I guess to mine we're not talking

1329
01:02:41,110 --> 01:02:44,740
about authorize I think we're talking

1330
01:02:42,190 --> 01:02:46,750
just general I'm not I'm deciding not to

1331
01:02:44,740 --> 01:02:48,430
answer this request right that's what

1332
01:02:46,750 --> 01:02:51,970
for that's the semantics of four areas

1333
01:02:48,430 --> 01:02:55,990
yeah that's this is asking for clarity

1334
01:02:51,970 --> 01:03:03,609
Orenda okay I'm gonna say we discussed

1335
01:02:55,990 --> 01:03:08,459
and okay to change okay next up to 15

1336
01:03:03,610 --> 01:03:13,510
field value value space Anna is asking

1337
01:03:08,460 --> 01:03:15,040
for the value space of field values he

1338
01:03:13,510 --> 01:03:16,920
wants us to expand the set of allowed

1339
01:03:15,040 --> 01:03:19,090
characters with his browsers allow

1340
01:03:16,920 --> 01:03:25,420
characters other than what we allow in

1341
01:03:19,090 --> 01:03:26,590
the a B and F well if Julie and I on the

1342
01:03:25,420 --> 01:03:29,050
issue say that we think that's out of

1343
01:03:26,590 --> 01:03:31,000
scope for for this effort just want to

1344
01:03:29,050 --> 01:03:35,350
confirm that in the room does anyone I

1345
01:03:31,000 --> 01:03:38,680
want to disagree with that okay Marvin

1346
01:03:35,350 --> 01:03:40,690
Thompson my understanding on your

1347
01:03:38,680 --> 01:03:42,970
response here is that there's a generic

1348
01:03:40,690 --> 01:03:44,350
error handling section in the document

1349
01:03:42,970 --> 01:03:48,189
that talks about how you might choose to

1350
01:03:44,350 --> 01:03:50,020
recover from variations in inputs and

1351
01:03:48,190 --> 01:03:51,280
that would and this would be covered

1352
01:03:50,020 --> 01:03:54,940
under that in terms of this

1353
01:03:51,280 --> 01:03:58,690
specification so is it that's not what I

1354
01:03:54,940 --> 01:04:01,150
meant that is probably true but

1355
01:03:58,690 --> 01:04:02,890
generally just because some components

1356
01:04:01,150 --> 01:04:04,089
it's allow a greater range of characters

1357
01:04:02,890 --> 01:04:07,029
doesn't mean that won't break other

1358
01:04:04,089 --> 01:04:09,220
components right right yeah but we can't

1359
01:04:07,029 --> 01:04:10,720
but the expanded the browser behavior

1360
01:04:09,220 --> 01:04:12,520
might be justified under the under the

1361
01:04:10,720 --> 01:04:14,169
terms of those generic error handling

1362
01:04:12,520 --> 01:04:17,109
right absolutely

1363
01:04:14,170 --> 01:04:18,369
Yeah right but but we're not really yeah

1364
01:04:17,109 --> 01:04:20,529
you're not changing the definition of

1365
01:04:18,369 --> 01:04:23,799
what the core protocol is as a result of

1366
01:04:20,529 --> 01:04:28,260
the fact that some people a little gone

1367
01:04:23,799 --> 01:04:32,410
a little post le on them exactly yeah

1368
01:04:28,260 --> 01:04:40,859
any other feedback otherwise I'm gonna

1369
01:04:32,410 --> 01:04:44,339
say we should close with no action okay

1370
01:04:40,859 --> 01:04:44,339
if I can spell

1371
01:04:45,930 --> 01:04:51,430
next up to twelve but range definition

1372
01:04:49,450 --> 01:04:54,129
allows OWS probably doesn't work in

1373
01:04:51,430 --> 01:04:55,270
practice Roy do you intend what walk us

1374
01:04:54,130 --> 01:05:05,829
through this I'm not familiar with this

1375
01:04:55,270 --> 01:05:10,299
one okay I was reworking the light range

1376
01:05:05,829 --> 01:05:16,930
set and I I know I said all right ranges

1377
01:05:10,299 --> 01:05:20,309
that allows one outside arrangement and

1378
01:05:16,930 --> 01:05:22,960
a list of right ranges

1379
01:05:20,309 --> 01:05:24,549
Mike and lineup include white space in

1380
01:05:22,960 --> 01:05:27,400
that case I didn't think there would be

1381
01:05:24,549 --> 01:05:29,500
interoperable but it turns out that

1382
01:05:27,400 --> 01:05:31,720
people actually do seem to accept this

1383
01:05:29,500 --> 01:05:40,569
in practice so I think we can close this

1384
01:05:31,720 --> 01:05:43,058
as saying yeah baby working breakfast so

1385
01:05:40,569 --> 01:05:45,250
basically the question is are comp is

1386
01:05:43,059 --> 01:05:48,309
white space allowed between the commas

1387
01:05:45,250 --> 01:05:52,539
invite sets or not

1388
01:05:48,309 --> 01:05:54,849
currently it is should we turn it off or

1389
01:05:52,539 --> 01:06:00,700
should we disallow it and my current

1390
01:05:54,849 --> 01:06:02,440
opinion is that we should allow it it

1391
01:06:00,700 --> 01:06:03,730
does seem to work on the things on the

1392
01:06:02,440 --> 01:06:06,039
systems I've tested yes

1393
01:06:03,730 --> 01:06:08,520
and also it's documented in various

1394
01:06:06,039 --> 01:06:08,520
places

1395
01:06:14,980 --> 01:06:18,550
sample are changing an example to show

1396
01:06:16,450 --> 01:06:20,560
the white space that is optional right

1397
01:06:18,550 --> 01:06:34,900
so in addition to explicitly allowing it

1398
01:06:20,560 --> 01:06:39,700
changing an example okay yeah fine Roy

1399
01:06:34,900 --> 01:06:43,210
that good great and Julie plus one great

1400
01:06:39,700 --> 01:06:47,350
thanks Julie next up range header a

1401
01:06:43,210 --> 01:06:48,310
field a B and F very similar Julian I

1402
01:06:47,350 --> 01:06:49,180
think you've been working on this one

1403
01:06:48,310 --> 01:06:52,420
recently haven't you

1404
01:06:49,180 --> 01:06:56,560
oh yeah

1405
01:06:52,420 --> 01:06:59,070
or was it wrong okay so if I'm straight

1406
01:06:56,560 --> 01:07:01,509
there is a pull request there or a

1407
01:06:59,070 --> 01:07:04,960
refactoring of the range header field a

1408
01:07:01,510 --> 01:07:09,310
B and F to move the bite range is

1409
01:07:04,960 --> 01:07:11,920
specifier out of the core a beam F and

1410
01:07:09,310 --> 01:07:17,109
just have a general may be enough for

1411
01:07:11,920 --> 01:07:20,109
all range units and then specified by

1412
01:07:17,109 --> 01:07:22,000
Rangers is one case of that there's a PR

1413
01:07:20,109 --> 01:07:23,140
online we probably don't have time to go

1414
01:07:22,000 --> 01:07:24,550
through the whole thing but I would

1415
01:07:23,140 --> 01:07:27,670
encourage people to look at it and

1416
01:07:24,550 --> 01:07:31,090
verify that it's okay

1417
01:07:27,670 --> 01:07:35,350
once I need to fix it now to put the 1

1418
01:07:31,090 --> 01:07:37,630
pound sign back for the for the set but

1419
01:07:35,350 --> 01:07:47,440
other than that there are no changes to

1420
01:07:37,630 --> 01:07:49,800
the actual protocol itself a review on

1421
01:07:47,440 --> 01:07:49,800
that scene

1422
01:07:53,589 --> 01:07:59,019
and I like the I am very far down the

1423
01:07:56,210 --> 01:08:05,980
rabbit hole in this one I come back

1424
01:07:59,019 --> 01:08:08,419
194 quick and HTTP just it's just a

1425
01:08:05,980 --> 01:08:10,849
general notice the working group to

1426
01:08:08,420 --> 01:08:14,960
review the PR thank you

1427
01:08:10,849 --> 01:08:17,359
194 I think where we're at on this issue

1428
01:08:14,960 --> 01:08:27,189
is we're ready to close it we never did

1429
01:08:17,359 --> 01:08:33,080
formally know so so Mike asks off-mike

1430
01:08:27,189 --> 01:08:34,339
good that we have the latest from my

1431
01:08:33,080 --> 01:08:36,469
perspective I think we're gonna need

1432
01:08:34,339 --> 01:08:40,729
some here we owe someone some language

1433
01:08:36,469 --> 01:08:43,219
somewhere right and I did I reminded

1434
01:08:40,729 --> 01:08:44,540
there was a lot of chatter on the on the

1435
01:08:43,219 --> 01:08:48,948
issue recently that I'm not sure was

1436
01:08:44,540 --> 01:08:51,080
terribly related but I saw proposals to

1437
01:08:48,948 --> 01:08:53,238
bring some where all the of 2218 into

1438
01:08:51,080 --> 01:08:54,350
core semantics and I saw a proposal to

1439
01:08:53,238 --> 01:08:56,568
rewrite the establishing Authority

1440
01:08:54,350 --> 01:08:58,339
section to make the implications on

1441
01:08:56,569 --> 01:08:59,600
clients and servers clearer and a

1442
01:08:58,339 --> 01:09:01,670
reference that from the appropriate

1443
01:08:59,600 --> 01:09:03,949
places like those data definition um

1444
01:09:01,670 --> 01:09:06,230
those seem like two separate concrete

1445
01:09:03,948 --> 01:09:07,698
things we could do I think the second

1446
01:09:06,229 --> 01:09:10,189
one is probably not terribly

1447
01:09:07,698 --> 01:09:11,809
controversial it could be a separate

1448
01:09:10,189 --> 01:09:16,790
issue or we can just use this issue for

1449
01:09:11,810 --> 01:09:19,100
it the first one bringing 28:18 in the

1450
01:09:16,790 --> 01:09:21,939
semantics is is a bigger thing what do

1451
01:09:19,100 --> 01:09:21,940
people feel about that

1452
01:09:27,488 --> 01:09:35,629
microchip since I'm already the Mike

1453
01:09:31,448 --> 01:09:37,518
honestly I'm a little unsure why that

1454
01:09:35,630 --> 01:09:39,259
hasn't already happened since the death

1455
01:09:37,519 --> 01:09:43,009
of HTTPS is in here

1456
01:09:39,259 --> 01:09:45,679
right so the Euro scheme miss you yeah I

1457
01:09:43,009 --> 01:09:47,920
mean we're already restating it let's

1458
01:09:45,679 --> 01:09:51,859
just go ahead and pull it in

1459
01:09:47,920 --> 01:09:54,920
roy any any pushback on that plus one

1460
01:09:51,859 --> 01:09:57,139
from Roy that's okay okay let's go ahead

1461
01:09:54,920 --> 01:09:58,249
and let's go ahead and take those mr.

1462
01:09:57,139 --> 01:10:02,599
Schneider's twofold they didn't I want

1463
01:09:58,249 --> 01:10:05,679
to create another small task yeah Madan

1464
01:10:02,599 --> 01:10:11,239
Thompson I wanted to caution on that one

1465
01:10:05,679 --> 01:10:13,099
RSC 28:18 is old it is very II let me

1466
01:10:11,239 --> 01:10:15,259
say shall we say loose in its

1467
01:10:13,099 --> 01:10:18,860
description of how to do name validation

1468
01:10:15,260 --> 01:10:22,400
and and other such things and there may

1469
01:10:18,860 --> 01:10:25,400
be a desire on the part of the reviewers

1470
01:10:22,400 --> 01:10:27,799
of this document to have this updated to

1471
01:10:25,400 --> 01:10:31,728
more modern practices like such as the

1472
01:10:27,800 --> 01:10:35,439
ones that are discussed in 2061 25 thank

1473
01:10:31,729 --> 01:10:38,749
you I already knew that number and so

1474
01:10:35,439 --> 01:10:40,939
there's a hazard here and I I don't

1475
01:10:38,749 --> 01:10:44,449
think it's a particularly bad one but it

1476
01:10:40,939 --> 01:10:46,610
probably means that we're biting off a

1477
01:10:44,449 --> 01:10:49,369
little more work than just taking the

1478
01:10:46,610 --> 01:10:51,348
text and copying it across that's all so

1479
01:10:49,369 --> 01:10:54,110
maybe it would be more prudent first at

1480
01:10:51,349 --> 01:10:57,559
least to start to bring just the HTTP

1481
01:10:54,110 --> 01:10:58,820
bits in update 2018 and maybe someone

1482
01:10:57,559 --> 01:11:01,070
somewhere will create a separate

1483
01:10:58,820 --> 01:11:03,619
document to update the older s yes see

1484
01:11:01,070 --> 01:11:05,449
that that that to me just seems like

1485
01:11:03,619 --> 01:11:07,249
you're trying to weasel out of doing the

1486
01:11:05,449 --> 01:11:08,509
the concrete work that needs to happen

1487
01:11:07,249 --> 01:11:20,329
no I'm just try to get something else to

1488
01:11:08,510 --> 01:11:21,800
do so I understand there's a little

1489
01:11:20,329 --> 01:11:23,688
difficult I don't think it's

1490
01:11:21,800 --> 01:11:28,579
particularly bad 6125 is a very

1491
01:11:23,689 --> 01:11:30,439
thoroughly specified and I think I might

1492
01:11:28,579 --> 01:11:33,139
without going through with a fine-tooth

1493
01:11:30,439 --> 01:11:34,880
comb all you need to do is read that

1494
01:11:33,139 --> 01:11:38,119
document very carefully and make sure

1495
01:11:34,880 --> 01:11:39,590
that matches up for practice and so then

1496
01:11:38,119 --> 01:11:40,818
you can just reference that for the for

1497
01:11:39,590 --> 01:11:43,189
all that for

1498
01:11:40,819 --> 01:11:45,829
pieces that deal with wild cards and

1499
01:11:43,189 --> 01:11:48,019
owners on the nasty bits of certificate

1500
01:11:45,829 --> 01:11:49,489
validation what what I'm inclined to do

1501
01:11:48,019 --> 01:11:50,959
at this point is maybe we need to have a

1502
01:11:49,489 --> 01:11:53,989
couple of people with enough knowledge

1503
01:11:50,959 --> 01:11:56,780
to go away and just do a how much work

1504
01:11:53,989 --> 01:12:01,999
would it take hi Bryon's levy please

1505
01:11:56,780 --> 01:12:02,989
tell us and slay you hmm I was gonna say

1506
01:12:01,999 --> 01:12:07,249
28:18

1507
01:12:02,989 --> 01:12:09,259
needs to die or burn so folding pieces

1508
01:12:07,249 --> 01:12:11,299
and of course semantics right the the

1509
01:12:09,260 --> 01:12:13,549
description of the scheme is fantastic

1510
01:12:11,299 --> 01:12:15,889
but very little of 28:18 is salvageable

1511
01:12:13,549 --> 01:12:19,339
in terms of reflecting modern reality

1512
01:12:15,889 --> 01:12:20,989
right so I'm I'm in favor of like there

1513
01:12:19,339 --> 01:12:22,549
are a few nuggets that I do think are

1514
01:12:20,989 --> 01:12:24,858
applicable and probably should be folded

1515
01:12:22,549 --> 01:12:26,839
into for semantics there's a lot of

1516
01:12:24,859 --> 01:12:28,159
other stuff like the upgrade semantics

1517
01:12:26,839 --> 01:12:30,589
and some of this weird stuff that just

1518
01:12:28,159 --> 01:12:34,579
needs to die and it does not reflect

1519
01:12:30,589 --> 01:12:36,379
reality so it's a very a very little bit

1520
01:12:34,579 --> 01:12:38,119
of 22:18 and of course semantics would

1521
01:12:36,379 --> 01:12:40,039
be fantastic but everything else is

1522
01:12:38,119 --> 01:12:43,999
gonna be a boondoggle like trying to

1523
01:12:40,039 --> 01:12:46,639
salvage it I should say so correction

1524
01:12:43,999 --> 01:12:47,539
28:17 is the is the upgrade stuff so we

1525
01:12:46,639 --> 01:12:50,780
don't need to worry about it

1526
01:12:47,539 --> 01:12:53,030
28:18 is like two pages long and it has

1527
01:12:50,780 --> 01:12:55,789
all of the detail of a two page RFC

1528
01:12:53,030 --> 01:12:58,068
which is I guess the problem right so

1529
01:12:55,789 --> 01:12:59,599
what is the suggestion as far as the

1530
01:12:58,069 --> 01:13:01,789
like relationship between the documents

1531
01:12:59,599 --> 01:13:08,089
like you imagine that this would be

1532
01:13:01,789 --> 01:13:11,749
obsoleting the channel and Julian the

1533
01:13:08,089 --> 01:13:20,239
HTTP URI scheme semantics are already in

1534
01:13:11,749 --> 01:13:22,159
30 queue 77230 all right I think we

1535
01:13:20,239 --> 01:13:23,688
should probably spool up a new issue to

1536
01:13:22,159 --> 01:13:26,209
try and assess what it actually means

1537
01:13:23,689 --> 01:13:29,149
and then we can make decisions after we

1538
01:13:26,209 --> 01:13:31,010
do that and then for the other piece do

1539
01:13:29,149 --> 01:13:32,989
you want to use this issue or do you

1540
01:13:31,010 --> 01:13:34,819
want to open a new one for authority

1541
01:13:32,989 --> 01:13:37,308
given the length of this issue will

1542
01:13:34,819 --> 01:13:39,589
probably spool up a new issue okay are

1543
01:13:37,309 --> 01:13:41,359
there any other aspects to this issue or

1544
01:13:39,589 --> 01:13:42,619
once we have those two issues coming

1545
01:13:41,359 --> 01:13:47,089
close it

1546
01:13:42,619 --> 01:13:49,068
assuming that you that the issue to

1547
01:13:47,089 --> 01:13:50,659
rewrite establishing Authority covers

1548
01:13:49,069 --> 01:13:54,459
everything what's discussed in the

1549
01:13:50,659 --> 01:13:54,459
France yeah okay

1550
01:13:57,560 --> 01:14:01,830
generally Roy I think I understand what

1551
01:14:00,420 --> 01:14:03,780
to include for the establishing

1552
01:14:01,830 --> 01:14:06,030
Authority and can probably make an

1553
01:14:03,780 --> 01:14:11,790
attempt at obsoleting the rest of 28:18

1554
01:14:06,030 --> 01:14:21,420
assignment kimete okay true gentleman

1555
01:14:11,790 --> 01:14:23,700
okay okay thank you right next up 180

1556
01:14:21,420 --> 01:14:28,100
clarify multiple authorization header

1557
01:14:23,700 --> 01:14:29,990
behavior or concatenation message but

1558
01:14:28,100 --> 01:14:36,300
there we go

1559
01:14:29,990 --> 01:14:37,910
so this started as a request to clarify

1560
01:14:36,300 --> 01:14:41,790
what happens when you have more than one

1561
01:14:37,910 --> 01:14:44,550
authorization value it's not defined

1562
01:14:41,790 --> 01:14:46,080
that way and so what this as I

1563
01:14:44,550 --> 01:14:47,970
understand it and I'm happy to be told

1564
01:14:46,080 --> 01:14:50,730
that I'm wrong but as I understand it

1565
01:14:47,970 --> 01:14:52,080
you get the right one here yeah

1566
01:14:50,730 --> 01:14:53,940
sixty-five seven doesn't allow these

1567
01:14:52,080 --> 01:14:57,570
well cram for bearer heat so those

1568
01:14:53,940 --> 01:14:58,919
eleven example it's trying to expand the

1569
01:14:57,570 --> 01:15:00,240
use of authorization it's not just

1570
01:14:58,920 --> 01:15:02,760
authenticating the user agent which is

1571
01:15:00,240 --> 01:15:05,190
its explicit definition but for other

1572
01:15:02,760 --> 01:15:07,650
parties in the request chain and so it's

1573
01:15:05,190 --> 01:15:10,080
a change in semantics and I think it's

1574
01:15:07,650 --> 01:15:14,879
changing the syntax in that it when he

1575
01:15:10,080 --> 01:15:16,140
wants to have multiple values personally

1576
01:15:14,880 --> 01:15:19,230
wearing no hats I think that's out of

1577
01:15:16,140 --> 01:15:20,910
scope for this work but I wanted to come

1578
01:15:19,230 --> 01:15:22,440
to an agreement about the disposition

1579
01:15:20,910 --> 01:15:25,639
this issue well we're all in the room

1580
01:15:22,440 --> 01:15:25,639
any comments

1581
01:15:30,540 --> 01:15:35,110
Julian says add a scope on issue a Roy

1582
01:15:33,340 --> 01:15:40,480
are you alone it's that way okay

1583
01:15:35,110 --> 01:15:43,679
anyone have any thoughts about this do

1584
01:15:40,480 --> 01:15:43,679
we agree to close this is echo

1585
01:15:57,219 --> 01:16:10,820
okay next up 169 URI lengths and so I

1586
01:16:06,579 --> 01:16:15,530
noticed that in messaging we limit so in

1587
01:16:10,820 --> 01:16:18,320
the HTTP one expression of HTTP we limit

1588
01:16:15,530 --> 01:16:20,659
the length of a URI but we don't have

1589
01:16:18,320 --> 01:16:23,058
any limit abstractly in the semantics

1590
01:16:20,659 --> 01:16:25,308
document of what the minimum supported

1591
01:16:23,059 --> 01:16:27,079
URL link should be by implementations so

1592
01:16:25,309 --> 01:16:29,030
that if you transit between different

1593
01:16:27,079 --> 01:16:31,009
versions the protocol for example you

1594
01:16:29,030 --> 01:16:33,170
know there are no minimum supportive

1595
01:16:31,010 --> 01:16:35,090
requirements and it seemed to me that it

1596
01:16:33,170 --> 01:16:38,210
would be useful to do that there's a

1597
01:16:35,090 --> 01:16:39,980
long discussion here I had a modified

1598
01:16:38,210 --> 01:16:42,739
proposal to very end based on that

1599
01:16:39,980 --> 01:16:45,530
discussion to add to the semantic

1600
01:16:42,739 --> 01:16:47,209
section text that says it is recommended

1601
01:16:45,530 --> 01:16:50,269
that all HTTP senders in the recipient

1602
01:16:47,210 --> 01:16:52,579
support at a minimum HTTP or HDS your

1603
01:16:50,270 --> 01:16:54,290
eyes with a length of 8,000 octet

1604
01:16:52,579 --> 01:16:56,030
note that this implies some structures

1605
01:16:54,290 --> 01:16:58,159
and unwire representations for example

1606
01:16:56,030 --> 01:17:02,150
the request line an HTTP 1.1 will

1607
01:16:58,159 --> 01:17:11,150
necessarily be larger in some cases so

1608
01:17:02,150 --> 01:17:15,949
this right fit all your eyes look is the

1609
01:17:11,150 --> 01:17:18,920
protocol can give the other urs keys I'm

1610
01:17:15,949 --> 01:17:20,900
not against that oh oh your eyes

1611
01:17:18,920 --> 01:17:26,389
conveyed by HTTP is a transport or

1612
01:17:20,900 --> 01:17:28,190
something like that okay and because

1613
01:17:26,389 --> 01:17:31,369
we're being specific we mean the encoded

1614
01:17:28,190 --> 01:17:34,299
form because we're being specific I mean

1615
01:17:31,369 --> 01:17:34,299
the encoded form

1616
01:17:48,750 --> 01:17:53,170
and I don't think there's a difference

1617
01:17:51,070 --> 01:17:55,349
between the encoded form yeah I'm a

1618
01:17:53,170 --> 01:17:58,690
little confused by that and and what's

1619
01:17:55,350 --> 01:18:00,910
and the NHC face abstract concept of a

1620
01:17:58,690 --> 01:18:03,400
of your eye it just writes the octet so

1621
01:18:00,910 --> 01:18:05,170
the Orion put some on the wire right so

1622
01:18:03,400 --> 01:18:08,110
it may go through some encoding once it

1623
01:18:05,170 --> 01:18:09,730
goes on the wire well Clark cases but

1624
01:18:08,110 --> 01:18:12,070
there are cases where query parameters

1625
01:18:09,730 --> 01:18:13,540
are taken in utf-8 and translated into

1626
01:18:12,070 --> 01:18:15,519
the euro but that's the process that

1627
01:18:13,540 --> 01:18:18,630
happens before you have you write that

1628
01:18:15,520 --> 01:18:21,790
IRI it's that's right it's not all right

1629
01:18:18,630 --> 01:18:23,680
all right Roberta and it was named

1630
01:18:21,790 --> 01:18:36,660
coding we might confuse people by

1631
01:18:23,680 --> 01:18:36,660
thinking of it yeah yeah okay next time

1632
01:18:36,810 --> 01:18:53,290
okay updating stored headers oh this is

1633
01:18:42,250 --> 01:18:54,760
gonna take some time this we don't have

1634
01:18:53,290 --> 01:18:56,830
time for this right now but I think we

1635
01:18:54,760 --> 01:18:59,830
need to make some progress on this one I

1636
01:18:56,830 --> 01:19:02,620
was looking for something we can't do do

1637
01:18:59,830 --> 01:19:07,600
we have the brave folks in the room okay

1638
01:19:02,620 --> 01:19:09,099
hi prepare yourselves we'll break in

1639
01:19:07,600 --> 01:19:13,620
another two it's reinvents unless we

1640
01:19:09,100 --> 01:19:13,620
find something really meaty trailers

1641
01:19:18,619 --> 01:19:26,460
we have a proposal for this again this

1642
01:19:23,280 --> 01:19:29,550
is a fairly complex issue we can make

1643
01:19:26,460 --> 01:19:33,199
progress here Allah is asking us to use

1644
01:19:29,550 --> 01:19:33,199
the URL standard for the location header

1645
01:19:36,110 --> 01:19:44,880
I think I made a plea sorry but I know

1646
01:19:43,860 --> 01:19:48,299
there was another one that was similar

1647
01:19:44,880 --> 01:19:50,099
but not the same I don't think so the

1648
01:19:48,300 --> 01:19:52,199
spec currently says summer to recipients

1649
01:19:50,099 --> 01:19:54,119
attempt to recover from location fields

1650
01:19:52,199 --> 01:19:55,678
that are not valid UI references this

1651
01:19:54,119 --> 01:19:57,509
specification is not mandatory defines

1652
01:19:55,679 --> 01:19:59,969
its processing but does not allow it for

1653
01:19:57,510 --> 01:20:02,940
the sake of robustness and the proposal

1654
01:19:59,969 --> 01:20:05,030
is to replace recipients with

1655
01:20:02,940 --> 01:20:09,509
implementations or client accommodations

1656
01:20:05,030 --> 01:20:12,030
but beyond that we would close this with

1657
01:20:09,510 --> 01:20:15,119
no action and that kind of thumbs up

1658
01:20:12,030 --> 01:20:16,110
from Julian does anyone think we need to

1659
01:20:15,119 --> 01:20:19,440
do anything more than that I think

1660
01:20:16,110 --> 01:20:20,699
that's almost an internal change we need

1661
01:20:19,440 --> 01:20:23,070
to do anything more than that to address

1662
01:20:20,699 --> 01:20:25,219
this so so once again we're saying that

1663
01:20:23,070 --> 01:20:30,409
browsers can deviate from this but yeah

1664
01:20:25,219 --> 01:20:30,409
this is the core protocol yep yep

1665
01:20:31,670 --> 01:20:40,190
anyone else want to dig into this a

1666
01:20:34,590 --> 01:20:40,190
deeper can we close with that okay

1667
01:20:48,840 --> 01:21:02,280
what a raid folks why don't you come on

1668
01:20:51,130 --> 01:21:06,790
up that's complex yes please

1669
01:21:02,280 --> 01:21:08,590
yeah I think the other issues we've

1670
01:21:06,790 --> 01:21:10,420
identified are gonna take more to

1671
01:21:08,590 --> 01:21:11,800
scratch from time than we have so let's

1672
01:21:10,420 --> 01:21:12,610
go ahead and talk about brain for a few

1673
01:21:11,800 --> 01:21:15,640
minutes cool

1674
01:21:12,610 --> 01:21:19,960
thanks guys okay so I'm Michael Tumen

1675
01:21:15,640 --> 01:21:22,540
and this is Seth general so I came to

1676
01:21:19,960 --> 01:21:24,040
the last meeting in Prague to I talked

1677
01:21:22,540 --> 01:21:27,430
with a lot of you about a new proposal

1678
01:21:24,040 --> 01:21:29,080
to add synchronization to http so that

1679
01:21:27,430 --> 01:21:30,730
it becomes a state synchronization

1680
01:21:29,080 --> 01:21:33,070
protocol instead of just a transfer

1681
01:21:30,730 --> 01:21:35,049
protocol so that when state changes on a

1682
01:21:33,070 --> 01:21:37,110
client or a server it updates all the

1683
01:21:35,050 --> 01:21:39,400
other clients and servers automatically

1684
01:21:37,110 --> 01:21:41,049
so I want to give you some updates on

1685
01:21:39,400 --> 01:21:44,769
what's happened since then

1686
01:21:41,050 --> 01:21:46,690
so we well I've we've been growing the

1687
01:21:44,770 --> 01:21:48,580
group of people interested in this and

1688
01:21:46,690 --> 01:21:50,440
that SEF on the internet he's actually

1689
01:21:48,580 --> 01:21:53,050
an expert in synchronization works on

1690
01:21:50,440 --> 01:21:54,790
Google Wave and he also wants to have a

1691
01:21:53,050 --> 01:21:57,280
standard protocol and we went together

1692
01:21:54,790 --> 01:21:59,470
to this D web conference met a lot of D

1693
01:21:57,280 --> 01:22:02,080
web people who also want the same thing

1694
01:21:59,470 --> 01:22:04,770
and we've been building that group also

1695
01:22:02,080 --> 01:22:07,239
we wrote an internet draft to propose

1696
01:22:04,770 --> 01:22:09,220
basic scheme and we got some really good

1697
01:22:07,239 --> 01:22:11,500
feedback I want to give special thanks

1698
01:22:09,220 --> 01:22:13,360
to Austin Wright who gave some good

1699
01:22:11,500 --> 01:22:16,750
feedback and Martin Thompson and also

1700
01:22:13,360 --> 01:22:20,349
Eric Kinnear and the general feedback

1701
01:22:16,750 --> 01:22:23,560
was we were missing a lot of connections

1702
01:22:20,350 --> 01:22:27,010
to existing HTTP standards or other

1703
01:22:23,560 --> 01:22:28,780
standards in that proposal and also that

1704
01:22:27,010 --> 01:22:32,250
the proposal itself seemed really big

1705
01:22:28,780 --> 01:22:35,080
but once you read it it seemed small and

1706
01:22:32,250 --> 01:22:38,800
I think so we think that you were very

1707
01:22:35,080 --> 01:22:40,360
right and we actually in working through

1708
01:22:38,800 --> 01:22:43,210
the existing standards we found a

1709
01:22:40,360 --> 01:22:44,980
smaller way to look at it it's more of a

1710
01:22:43,210 --> 01:22:47,530
thin layer of glue on top of a bunch of

1711
01:22:44,980 --> 01:22:50,639
existing pieces which is pretty nice and

1712
01:22:47,530 --> 01:22:53,410
stuff wants to propose a lot of that

1713
01:22:50,640 --> 01:22:55,660
however on a middle of you this week and

1714
01:22:53,410 --> 01:22:59,260
that's been great so the way that I say

1715
01:22:55,660 --> 01:23:01,300
this is that HTTP has like

1716
01:22:59,260 --> 01:23:03,489
we handle data that never changes really

1717
01:23:01,300 --> 01:23:05,260
well so you get that never changes we

1718
01:23:03,489 --> 01:23:07,388
said a caching caching expiry of 99

1719
01:23:05,260 --> 01:23:08,829
years we're good for data that changes

1720
01:23:07,389 --> 01:23:11,380
rarely the standard way to do this is we

1721
01:23:08,829 --> 01:23:13,090
set a cache expiry of say 10 minutes or

1722
01:23:11,380 --> 01:23:14,919
5 hours and then the data can be pulled

1723
01:23:13,090 --> 01:23:17,860
off to that amount of time by CDN so by

1724
01:23:14,919 --> 01:23:19,599
and clients but for data that either

1725
01:23:17,860 --> 01:23:21,699
changes frequently all the data that's

1726
01:23:19,599 --> 01:23:22,749
really big the changes infrequently we

1727
01:23:21,699 --> 01:23:24,999
don't have a good way to be able to

1728
01:23:22,749 --> 01:23:27,188
either send incremental updates to say

1729
01:23:24,999 --> 01:23:28,780
hey like let's say data the changes

1730
01:23:27,189 --> 01:23:30,459
every second or every five seconds I'm

1731
01:23:28,780 --> 01:23:33,070
either clients have to poll every five

1732
01:23:30,459 --> 01:23:34,449
seconds which is inefficient so that's

1733
01:23:33,070 --> 01:23:36,130
no good and for data that's really big

1734
01:23:34,449 --> 01:23:37,869
let's say a document that's a megabyte

1735
01:23:36,130 --> 01:23:39,820
in size the only way for clients to

1736
01:23:37,869 --> 01:23:41,949
handle things like that over HTTP today

1737
01:23:39,820 --> 01:23:43,650
is to repol and get a new copy of the

1738
01:23:41,949 --> 01:23:46,449
document every time the document changes

1739
01:23:43,650 --> 01:23:47,558
so we've been talking about this and I

1740
01:23:46,449 --> 01:23:51,219
think there's a really simple addition

1741
01:23:47,559 --> 01:23:52,510
to HTTP which is that so right now we

1742
01:23:51,219 --> 01:23:54,099
have a semantic way to be able to change

1743
01:23:52,510 --> 01:23:56,499
documents so we can submit a patch

1744
01:23:54,099 --> 01:24:00,099
method which is very rarely used but we

1745
01:23:56,499 --> 01:24:02,050
can specify a except patch and then you

1746
01:24:00,099 --> 01:24:03,550
can say here is my semantic change I

1747
01:24:02,050 --> 01:24:05,260
would like to make to the document the

1748
01:24:03,550 --> 01:24:06,459
semantics on the document side of it you

1749
01:24:05,260 --> 01:24:08,439
can imagine a document as a state

1750
01:24:06,459 --> 01:24:12,039
machine and we apply changes so each

1751
01:24:08,439 --> 01:24:14,229
patch or each operation has and we want

1752
01:24:12,039 --> 01:24:16,239
RFC's for each type and the type says

1753
01:24:14,229 --> 01:24:18,280
this document with this change results

1754
01:24:16,239 --> 01:24:20,169
in this new type the service says here

1755
01:24:18,280 --> 01:24:21,369
is a new e tag and so then the client

1756
01:24:20,169 --> 01:24:24,130
can know what the document has changed

1757
01:24:21,369 --> 01:24:25,150
into your notes that already exists the

1758
01:24:24,130 --> 01:24:26,919
thing we're missing is a way to read

1759
01:24:25,150 --> 01:24:28,299
those changes so there's no current way

1760
01:24:26,919 --> 01:24:29,499
to be able to subscribe to a document

1761
01:24:28,300 --> 01:24:32,469
and get a feed of all of the changes

1762
01:24:29,499 --> 01:24:33,849
that are being made to that document we

1763
01:24:32,469 --> 01:24:35,439
have things like event sourcing or

1764
01:24:33,849 --> 01:24:37,179
server sent events and WebSockets so

1765
01:24:35,439 --> 01:24:38,499
this can be built today very easily the

1766
01:24:37,179 --> 01:24:39,820
problem is we have no standard for it

1767
01:24:38,499 --> 01:24:41,679
and by having no standard it means we

1768
01:24:39,820 --> 01:24:43,539
kind of tooling I'd love to talk to

1769
01:24:41,679 --> 01:24:44,829
people who building CD ends because one

1770
01:24:43,539 --> 01:24:47,469
thing I would love to do is for example

1771
01:24:44,829 --> 01:24:49,900
use cloud flower or fastly as a fan-out

1772
01:24:47,469 --> 01:24:51,340
service so if my cash instead subscribes

1773
01:24:49,900 --> 01:24:53,589
to my document then every time my

1774
01:24:51,340 --> 01:24:55,300
document changes I can send to the to

1775
01:24:53,590 --> 01:24:57,099
the cache because I subscribed the

1776
01:24:55,300 --> 01:24:58,929
semantics very small change and then the

1777
01:24:57,099 --> 01:25:00,189
cache can update automatically do

1778
01:24:58,929 --> 01:25:01,449
fan-out to any other clients that are

1779
01:25:00,189 --> 01:25:02,650
subscribed or the clients that are

1780
01:25:01,449 --> 01:25:04,329
connecting normally they can then just

1781
01:25:02,650 --> 01:25:06,129
request the new document the cache then

1782
01:25:04,329 --> 01:25:07,360
doesn't like his auto updating and auto

1783
01:25:06,130 --> 01:25:09,039
invalidating which is really nice

1784
01:25:07,360 --> 01:25:11,049
property without us needing to send the

1785
01:25:09,039 --> 01:25:14,920
whole document every time it changes

1786
01:25:11,050 --> 01:25:16,150
and we say this already i ET f je map i

1787
01:25:14,920 --> 01:25:17,710
cal there's a whole bunch of different

1788
01:25:16,150 --> 01:25:19,750
protocols that are missing this

1789
01:25:17,710 --> 01:25:20,830
synchronization piece there trying to do

1790
01:25:19,750 --> 01:25:22,480
synchronization or trying to do

1791
01:25:20,830 --> 01:25:24,610
subscriptions on top of HTTP right now

1792
01:25:22,480 --> 01:25:25,540
and either having to poll or do web

1793
01:25:24,610 --> 01:25:26,920
hooks or various different things

1794
01:25:25,540 --> 01:25:30,400
that'll feel like awful hacks in my

1795
01:25:26,920 --> 01:25:32,110
opinion so yeah so I'm planning on

1796
01:25:30,400 --> 01:25:33,570
writing up an RFC for the next one of it

1797
01:25:32,110 --> 01:25:35,650
you know in time for Singapore for sure

1798
01:25:33,570 --> 01:25:37,210
basically suggesting that we add a new

1799
01:25:35,650 --> 01:25:40,599
subscribed method to HTTP that's gonna

1800
01:25:37,210 --> 01:25:42,100
give us a semantic list of changes but

1801
01:25:40,600 --> 01:25:43,630
yeah if that's exciting for anyone else

1802
01:25:42,100 --> 01:25:45,460
feel free to come and talk to us because

1803
01:25:43,630 --> 01:25:47,620
we want more people interested in this

1804
01:25:45,460 --> 01:25:48,610
and there's some other things on top of

1805
01:25:47,620 --> 01:25:51,370
that that we might be able to do to be

1806
01:25:48,610 --> 01:25:53,500
able to make that work better but that's

1807
01:25:51,370 --> 01:25:54,430
gonna end up in the RFC and or maybe in

1808
01:25:53,500 --> 01:25:55,660
a working group we end up building

1809
01:25:54,430 --> 01:25:59,650
something like that to be able to do the

1810
01:25:55,660 --> 01:26:07,300
extended pieces but yeah thank you and

1811
01:25:59,650 --> 01:26:09,940
thanks listening there's also a website

1812
01:26:07,300 --> 01:26:16,540
braid dot news which is on the screen

1813
01:26:09,940 --> 01:26:18,669
right now Alan from Dell Facebook

1814
01:26:16,540 --> 01:26:20,500
I'll just board our kitchen guys

1815
01:26:18,670 --> 01:26:22,210
afterwards and point to you to a draft

1816
01:26:20,500 --> 01:26:24,190
that Wow and I have written which is

1817
01:26:22,210 --> 01:26:25,810
about it's an extension to HTTP 2 that

1818
01:26:24,190 --> 01:26:27,330
enables a lot of this more

1819
01:26:25,810 --> 01:26:29,290
bi-directional server to client

1820
01:26:27,330 --> 01:26:32,519
messaging and it may be something that's

1821
01:26:29,290 --> 01:26:36,250
appropriate for you this great Thank You

1822
01:26:32,520 --> 01:26:39,760
Ben Schwinns have you defined any of

1823
01:26:36,250 --> 01:26:43,090
these any of these money patches patch

1824
01:26:39,760 --> 01:26:44,230
formats for different mime types I have

1825
01:26:43,090 --> 01:26:46,990
in software that I've written there's

1826
01:26:44,230 --> 01:26:50,230
also Jason merge Jason Patric shortie

1827
01:26:46,990 --> 01:26:51,460
exist as Ayana documents so we can use

1828
01:26:50,230 --> 01:26:53,200
those for now I'd like to add some more

1829
01:26:51,460 --> 01:26:55,000
for example collaborative real-time text

1830
01:26:53,200 --> 01:26:58,690
editing but we can move to that when we

1831
01:26:55,000 --> 01:27:01,560
need to I just have this feeling that it

1832
01:26:58,690 --> 01:27:03,879
might be more productive to start there

1833
01:27:01,560 --> 01:27:07,420
standardizing those formats because

1834
01:27:03,880 --> 01:27:09,700
there are already as you said pretty

1835
01:27:07,420 --> 01:27:12,040
effective non-standard mechanisms for

1836
01:27:09,700 --> 01:27:15,790
doing this kind of for moving that data

1837
01:27:12,040 --> 01:27:17,560
through HTTP and then you know with the

1838
01:27:15,790 --> 01:27:20,260
experience of a deployed system that's

1839
01:27:17,560 --> 01:27:21,820
actually using those those patch types I

1840
01:27:20,260 --> 01:27:23,909
think you'll be in a stronger position

1841
01:27:21,820 --> 01:27:27,750
to

1842
01:27:23,909 --> 01:27:29,309
to ask for extend for HTTP changes if

1843
01:27:27,750 --> 01:27:30,900
they're necessary yeah that makes sense

1844
01:27:29,310 --> 01:27:32,219
I mean personally I have experience

1845
01:27:30,900 --> 01:27:35,790
deploying systems like this but I

1846
01:27:32,219 --> 01:27:37,860
appreciate the comment thank you so much

1847
01:27:35,790 --> 01:27:39,750
I'm in response to Alan there I think

1848
01:27:37,860 --> 01:27:41,250
you can build like like I said for

1849
01:27:39,750 --> 01:27:43,469
saying he is you can build these things

1850
01:27:41,250 --> 01:27:45,270
using use existing messaging systems and

1851
01:27:43,469 --> 01:27:48,540
having a better messaging system would

1852
01:27:45,270 --> 01:27:50,690
be great but I think what you're kind of

1853
01:27:48,540 --> 01:27:52,800
looking for here is a little bit more of

1854
01:27:50,690 --> 01:27:55,650
exposing the semantics of what's going

1855
01:27:52,800 --> 01:27:56,909
on to the to the protocol itself yeah so

1856
01:27:55,650 --> 01:27:59,549
that you can build this into things like

1857
01:27:56,909 --> 01:28:01,429
CD ends generically and what I don't

1858
01:27:59,550 --> 01:28:04,590
think those messaging systems are quite

1859
01:28:01,429 --> 01:28:06,929
quite suitable for that this seems to me

1860
01:28:04,590 --> 01:28:08,310
like it'd be an interesting use case

1861
01:28:06,929 --> 01:28:10,320
potentially for something like server

1862
01:28:08,310 --> 01:28:12,000
push problem with that is it's not

1863
01:28:10,320 --> 01:28:14,489
end-to-end and it introduces some

1864
01:28:12,000 --> 01:28:17,219
interesting constraints on the way that

1865
01:28:14,489 --> 01:28:18,449
you think about the problem so I'd be

1866
01:28:17,219 --> 01:28:22,579
interested in talking some more about

1867
01:28:18,449 --> 01:28:27,480
the relationship between HTTP methods

1868
01:28:22,579 --> 01:28:29,699
and when semantics and server push

1869
01:28:27,480 --> 01:28:31,919
it's a tricky conversation because the

1870
01:28:29,699 --> 01:28:35,449
there's some misalignment between the

1871
01:28:31,920 --> 01:28:37,409
various models but I'm kind of

1872
01:28:35,449 --> 01:28:41,369
enthusiastic about this idea that we

1873
01:28:37,409 --> 01:28:44,219
could do something richer with with the

1874
01:28:41,369 --> 01:28:45,540
content that we have and certainly the

1875
01:28:44,219 --> 01:28:47,489
suggestion that you might do this with

1876
01:28:45,540 --> 01:28:49,650
something as simple as JSON with with

1877
01:28:47,489 --> 01:28:51,360
the suite of tools that we already have

1878
01:28:49,650 --> 01:28:53,579
so that would be would be quite

1879
01:28:51,360 --> 01:28:55,619
interesting yeah imagine all sorts of

1880
01:28:53,579 --> 01:28:57,150
ways where you identify resources that

1881
01:28:55,619 --> 01:29:00,469
are that are the arrows in your graph

1882
01:28:57,150 --> 01:29:02,638
and all sorts of crazy things but it'd

1883
01:29:00,469 --> 01:29:04,050
be interesting to see what sort of

1884
01:29:02,639 --> 01:29:06,300
things you can come up with within the

1885
01:29:04,050 --> 01:29:07,679
constraints that we have yeah thanks um

1886
01:29:06,300 --> 01:29:09,599
I'd really appreciate talk to you later

1887
01:29:07,679 --> 01:29:12,750
Shepherd very briefly because we have

1888
01:29:09,599 --> 01:29:15,090
one minute oh okay I knew yankton's

1889
01:29:12,750 --> 01:29:16,860
either side Moses came up stuff so come

1890
01:29:15,090 --> 01:29:18,090
talk to me afterwards I was going to say

1891
01:29:16,860 --> 01:29:20,670
that when we were looking that one of

1892
01:29:18,090 --> 01:29:22,440
the this things we mainly about change

1893
01:29:20,670 --> 01:29:24,389
to a single document whereas one of the

1894
01:29:22,440 --> 01:29:25,739
big things we need to deal with was more

1895
01:29:24,389 --> 01:29:27,239
cache invalidation to a big collection

1896
01:29:25,739 --> 01:29:29,218
of documents and where some might have

1897
01:29:27,239 --> 01:29:32,419
changed one of the things that seems to

1898
01:29:29,219 --> 01:29:32,420
be a bit of a different space

1899
01:29:33,469 --> 01:29:42,320
I continue to be interested I want to

1900
01:29:39,140 --> 01:29:45,620
point out a few interesting problems one

1901
01:29:42,320 --> 01:29:47,360
of which is when you are having to have

1902
01:29:45,620 --> 01:29:49,040
multiple uploads to the same place this

1903
01:29:47,360 --> 01:29:50,960
often happens in video for live streams

1904
01:29:49,040 --> 01:29:53,510
and you have to be able to show that

1905
01:29:50,960 --> 01:29:55,010
they are actually part of the same you

1906
01:29:53,510 --> 01:29:57,530
can't actually trust the clients to get

1907
01:29:55,010 --> 01:29:59,239
that right and so you actually have the

1908
01:29:57,530 --> 01:30:01,070
transactional problem in both directions

1909
01:29:59,239 --> 01:30:03,080
which I'm not seeing right now another

1910
01:30:01,070 --> 01:30:05,750
really fun one is cap suggests that you

1911
01:30:03,080 --> 01:30:08,090
pick C or a but there are actually cases

1912
01:30:05,750 --> 01:30:10,850
where you can go back and back solve for

1913
01:30:08,090 --> 01:30:12,710
C when you have a but without a you can

1914
01:30:10,850 --> 01:30:14,270
never have C so there's some interesting

1915
01:30:12,710 --> 01:30:15,380
trade-offs in there that I don't think

1916
01:30:14,270 --> 01:30:18,350
we're traditional that we need to have

1917
01:30:15,380 --> 01:30:19,790
to UM I agree that lost pace will

1918
01:30:18,350 --> 01:30:20,930
actually buy through this paces I want

1919
01:30:19,790 --> 01:30:22,910
to leave a lot of those particular

1920
01:30:20,930 --> 01:30:24,380
semantics to the sever for now at least

1921
01:30:22,910 --> 01:30:25,930
at least in the initial version but I

1922
01:30:24,380 --> 01:30:28,880
agree this would be really interesting

1923
01:30:25,930 --> 01:30:29,360
and and just add one personal comment

1924
01:30:28,880 --> 01:30:31,340
from me

1925
01:30:29,360 --> 01:30:33,320
I'll echo a lot of the comments we heard

1926
01:30:31,340 --> 01:30:35,000
in the queue this is very interesting

1927
01:30:33,320 --> 01:30:36,170
because there's a lot of effort being

1928
01:30:35,000 --> 01:30:38,960
put right now into coming up with

1929
01:30:36,170 --> 01:30:41,960
solutions for low layer transports for

1930
01:30:38,960 --> 01:30:43,850
web stuff various layers but you know as

1931
01:30:41,960 --> 01:30:45,320
a CDN and an intermediary person it's a

1932
01:30:43,850 --> 01:30:47,030
lot harder for me to add value to that

1933
01:30:45,320 --> 01:30:50,150
if we can talk about the higher level

1934
01:30:47,030 --> 01:30:51,230
concepts it's easy to think about how

1935
01:30:50,150 --> 01:30:53,360
you can scale that out and do

1936
01:30:51,230 --> 01:30:54,530
interesting things with it but but a lot

1937
01:30:53,360 --> 01:30:56,929
of the really interesting parts of this

1938
01:30:54,530 --> 01:30:58,969
is how do we integrate it into HTTP know

1939
01:30:56,930 --> 01:31:00,739
what what how does it interact with

1940
01:30:58,969 --> 01:31:03,110
other extensions to HTTP know that the

1941
01:31:00,739 --> 01:31:04,519
other mechanisms in HTTP to make sure we

1942
01:31:03,110 --> 01:31:08,120
get the most value out of it as

1943
01:31:04,520 --> 01:31:10,670
community so keep it up great thank you

1944
01:31:08,120 --> 01:31:19,969
Mark great thank you all right I think

1945
01:31:10,670 --> 01:31:23,080
we're done and and design teams we have

1946
01:31:19,969 --> 01:31:23,080
expectations of you

1947
01:31:38,700 --> 01:31:42,000
[Music]

