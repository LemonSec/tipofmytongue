1
00:00:15,139 --> 00:00:19,279
all right everybody ready get started

2
00:00:26,599 --> 00:00:30,919
all right everybody welcome to deep rise

3
00:00:34,970 --> 00:00:43,489
hey benno can you start beating people

4
00:00:37,470 --> 00:00:43,489
up all right

5
00:00:44,780 --> 00:00:50,130
are anybody this is deprived welcome to

6
00:00:47,250 --> 00:00:52,560
Montreal we have a relatively quick rule

7
00:00:50,130 --> 00:00:53,520
it's relatively full agenda so I want to

8
00:00:52,560 --> 00:00:55,320
make sure that we get through everything

9
00:00:53,520 --> 00:00:58,110
as quickly as you can

10
00:00:55,320 --> 00:01:00,660
for those of you who know me you see me

11
00:00:58,110 --> 00:01:04,559
here before I have a new and improved

12
00:01:00,660 --> 00:01:06,390
standing co-chair let me know if you

13
00:01:04,559 --> 00:01:15,240
think it's better and or worse than

14
00:01:06,390 --> 00:01:17,460
having Tim up here right everybody

15
00:01:15,240 --> 00:01:19,829
should be familiar this with this by the

16
00:01:17,460 --> 00:01:22,469
time you've gotten to Thursday this is a

17
00:01:19,829 --> 00:01:24,389
note well here are all the documents

18
00:01:22,469 --> 00:01:27,149
that you should have read at some point

19
00:01:24,390 --> 00:01:30,359
in time there is no quiz so you're on

20
00:01:27,149 --> 00:01:36,359
your own if I get any closer I think I'm

21
00:01:30,359 --> 00:01:39,689
going to eat it so I wa III will talk

22
00:01:36,359 --> 00:01:47,639
louder so is that Shawn it is are you

23
00:01:39,689 --> 00:01:49,708
sure okay all right we do have at least

24
00:01:47,639 --> 00:01:53,009
one person who volunteered to do jabber

25
00:01:49,709 --> 00:01:54,780
so Dan York gets the the grand cookie

26
00:01:53,009 --> 00:01:56,009
for the for the end of the meeting do I

27
00:01:54,780 --> 00:02:04,340
have a volunteer who will actually do

28
00:01:56,009 --> 00:02:04,340
some minutes for us thank you Paul

29
00:02:04,639 --> 00:02:10,169
here's our agenda we do have a slight

30
00:02:07,350 --> 00:02:12,299
bash to this agenda already the using

31
00:02:10,169 --> 00:02:14,640
early data in DNS over TLS is going to

32
00:02:12,300 --> 00:02:17,730
get moved up so that the presenter can

33
00:02:14,640 --> 00:02:18,489
go to HTTP does anybody else have any

34
00:02:17,730 --> 00:02:19,929
changes that

35
00:02:18,490 --> 00:02:29,410
they would like to see in this before we

36
00:02:19,930 --> 00:02:33,430
get started awesome so a couple of quick

37
00:02:29,410 --> 00:02:35,350
things before we move along over in the

38
00:02:33,430 --> 00:02:38,410
DNS SD working group there are two

39
00:02:35,350 --> 00:02:40,960
documents that are looking at privacy

40
00:02:38,410 --> 00:02:43,359
implications of this of the their

41
00:02:40,960 --> 00:02:45,340
discovery mechanisms and they've been

42
00:02:43,360 --> 00:02:50,080
looking for people willing and able to

43
00:02:45,340 --> 00:02:51,790
review them and provide feedback so part

44
00:02:50,080 --> 00:02:54,760
of this is due to the fact that DNS SD

45
00:02:51,790 --> 00:02:57,040
is potentially winding down so there may

46
00:02:54,760 --> 00:02:58,299
be a pole at some point as to whether or

47
00:02:57,040 --> 00:03:00,429
not we might want to adopt these

48
00:02:58,300 --> 00:03:05,110
documents but in the meantime anybody

49
00:03:00,430 --> 00:03:06,630
with an interest in in DNS service

50
00:03:05,110 --> 00:03:08,710
discovery and privacy implications

51
00:03:06,630 --> 00:03:10,060
please go take a look these drafts then

52
00:03:08,710 --> 00:03:14,920
provide some comments to either the

53
00:03:10,060 --> 00:03:17,320
authors or the that mailing list if you

54
00:03:14,920 --> 00:03:19,630
recall coming out of Prague's we did an

55
00:03:17,320 --> 00:03:22,660
adoption call for the 76 26 business

56
00:03:19,630 --> 00:03:24,940
document we have adopted that that first

57
00:03:22,660 --> 00:03:26,859
that document is now available the

58
00:03:24,940 --> 00:03:28,300
authors would really really really like

59
00:03:26,860 --> 00:03:30,670
to see some reviews and comments

60
00:03:28,300 --> 00:03:32,770
the big thing here is that this is a

61
00:03:30,670 --> 00:03:34,929
normative reference for the BCP document

62
00:03:32,770 --> 00:03:36,340
so we want to make sure this moves along

63
00:03:34,930 --> 00:03:41,950
as quickly as possible so we can finish

64
00:03:36,340 --> 00:03:44,560
up the BCP any comments questions going

65
00:03:41,950 --> 00:03:46,450
once going twice all right so let's do

66
00:03:44,560 --> 00:03:49,290
the DNS over TLS and early data

67
00:03:46,450 --> 00:03:49,290
Alessandra

68
00:04:12,120 --> 00:04:20,200
hello so for those not aware TLS 120

69
00:04:17,410 --> 00:04:22,180
introduced a feature called zero et

70
00:04:20,200 --> 00:04:24,460
essential session presumption which

71
00:04:22,180 --> 00:04:26,490
allows clients to send application data

72
00:04:24,460 --> 00:04:29,888
before the TLS and check has completed

73
00:04:26,490 --> 00:04:33,550
in order to reduce latency or whatever

74
00:04:29,889 --> 00:04:37,270
this can be useful for DNS over TLS in

75
00:04:33,550 --> 00:04:39,160
cases where keeping long-lived TLS

76
00:04:37,270 --> 00:04:42,070
connections the connection might not be

77
00:04:39,160 --> 00:04:45,430
feasible for example all mobile clients

78
00:04:42,070 --> 00:04:48,010
where the network might be shaky or on

79
00:04:45,430 --> 00:04:49,810
resolvers were maintaining a large

80
00:04:48,010 --> 00:04:54,130
number of connections to authoritative

81
00:04:49,810 --> 00:04:57,520
servers might not be useful a weber this

82
00:04:54,130 --> 00:05:00,820
comes with with caveats notably the

83
00:04:57,520 --> 00:05:02,710
early data can be intercepted by own

84
00:05:00,820 --> 00:05:06,159
path attackers and replayed to the

85
00:05:02,710 --> 00:05:11,200
server the attacker cannot directly

86
00:05:06,160 --> 00:05:15,130
decrypt the data but the replay might

87
00:05:11,200 --> 00:05:20,560
have unexpected consequences or bad

88
00:05:15,130 --> 00:05:23,950
consequences so so the TLS 1.3 RFC

89
00:05:20,560 --> 00:05:27,160
defines some mechanisms to mitigate

90
00:05:23,950 --> 00:05:30,250
mitigate this replay potential and also

91
00:05:27,160 --> 00:05:35,020
says that application protocols have to

92
00:05:30,250 --> 00:05:38,440
define a profile so that that defines

93
00:05:35,020 --> 00:05:40,750
like safe ways to use early data for the

94
00:05:38,440 --> 00:05:43,389
specific application protocols in order

95
00:05:40,750 --> 00:05:47,229
to actually use a real data so this is

96
00:05:43,389 --> 00:05:50,800
what the drug does it's mostly based on

97
00:05:47,229 --> 00:05:54,940
RFC 8470 which is the using early data

98
00:05:50,800 --> 00:05:57,910
with HTTP HTTP because most of the the

99
00:05:54,940 --> 00:05:59,830
mechanisms are common there are some

100
00:05:57,910 --> 00:06:02,950
Vienna specific bits for example

101
00:05:59,830 --> 00:06:05,409
defining which DNS messages are safe to

102
00:06:02,950 --> 00:06:07,780
or unsafe to send over early data as

103
00:06:05,410 --> 00:06:11,830
well as on the some of the security

104
00:06:07,780 --> 00:06:13,539
considerations so the was a there was a

105
00:06:11,830 --> 00:06:16,510
discussion on the mailing list there was

106
00:06:13,539 --> 00:06:19,840
some interest in the draft arm and some

107
00:06:16,510 --> 00:06:22,990
suggestion were proposed so for example

108
00:06:19,840 --> 00:06:25,479
currently the draft defines a blacklist

109
00:06:22,990 --> 00:06:27,669
of DNS messages that

110
00:06:25,480 --> 00:06:29,860
should not be sent over early data

111
00:06:27,669 --> 00:06:33,490
because of the replay problems or like

112
00:06:29,860 --> 00:06:34,930
Denis updates or zone transfers it was

113
00:06:33,490 --> 00:06:37,930
suggested that it might be better to

114
00:06:34,930 --> 00:06:41,740
define a whitelist of messages that are

115
00:06:37,930 --> 00:06:44,530
safe to send for example using a NR

116
00:06:41,740 --> 00:06:47,970
registry and then the privacy

117
00:06:44,530 --> 00:06:51,849
considerations sections need some work

118
00:06:47,970 --> 00:06:53,320
so as I said there are seem to be some

119
00:06:51,850 --> 00:06:55,450
interest on the remaining list so I

120
00:06:53,320 --> 00:06:58,270
guess the question is whether the

121
00:06:55,450 --> 00:07:05,320
working group wants to adopt this and

122
00:06:58,270 --> 00:07:08,830
that's it one clarification about the

123
00:07:05,320 --> 00:07:12,400
whitelist you talk about our allow it

124
00:07:08,830 --> 00:07:19,530
our times but it's actually up code

125
00:07:12,400 --> 00:07:23,229
that's our types I guess if it would be

126
00:07:19,530 --> 00:07:29,830
our our types I think or examples you

127
00:07:23,229 --> 00:07:32,969
give all examples of specific update is

128
00:07:29,830 --> 00:07:37,419
an opcode but aids affair is a our type

129
00:07:32,970 --> 00:07:39,820
right so it's I mean we we can discuss

130
00:07:37,419 --> 00:07:44,310
this more and define this as a more

131
00:07:39,820 --> 00:07:44,310
complex mechanism if required I

132
00:07:46,919 --> 00:07:52,450
understand Verisign did you look at any

133
00:07:50,050 --> 00:07:57,220
of the possible side channel attacks

134
00:07:52,450 --> 00:07:59,740
with replay right so there's a security

135
00:07:57,220 --> 00:08:02,530
consideration section that describes at

136
00:07:59,740 --> 00:08:05,710
least one of those attacks this was

137
00:08:02,530 --> 00:08:10,450
discussed more than a year ago between

138
00:08:05,710 --> 00:08:12,760
decay GE and I don't remember who but

139
00:08:10,450 --> 00:08:15,460
yeah so there was another attack that

140
00:08:12,760 --> 00:08:23,620
was proposed due to caching for example

141
00:08:15,460 --> 00:08:24,820
that needs to be written up so how many

142
00:08:23,620 --> 00:08:27,360
people in a room have actually read this

143
00:08:24,820 --> 00:08:27,360
document

144
00:08:28,949 --> 00:08:36,599
I see about or 5 hands okay so what

145
00:08:34,890 --> 00:08:38,098
we'll do off on Grove is is solicit some

146
00:08:36,599 --> 00:08:39,360
more reviews and we can do a call for

147
00:08:38,099 --> 00:08:42,620
work group adoption on the mailing list

148
00:08:39,360 --> 00:08:42,620
okay thank you

149
00:09:04,080 --> 00:09:16,590
yeah that's right all right this is an

150
00:09:11,350 --> 00:09:20,950
update on the DNS privacy operations

151
00:09:16,590 --> 00:09:22,450
PCP I'm Sara asked me to do the

152
00:09:20,950 --> 00:09:23,590
presentation but I don't want to take

153
00:09:22,450 --> 00:09:26,460
credit for all the hard work she did

154
00:09:23,590 --> 00:09:30,610
improve in your draft so some

155
00:09:26,460 --> 00:09:33,250
appreciation for that work brief

156
00:09:30,610 --> 00:09:35,380
introduction are the end goal of today

157
00:09:33,250 --> 00:09:36,820
is that we want to ask whether the

158
00:09:35,380 --> 00:09:40,870
working group thinks that this can go to

159
00:09:36,820 --> 00:09:42,580
working group masks or not the just to

160
00:09:40,870 --> 00:09:44,140
recap all the document goals

161
00:09:42,580 --> 00:09:46,270
the goal is document is to set

162
00:09:44,140 --> 00:09:48,130
operational policy and security

163
00:09:46,270 --> 00:09:51,490
considerations for DNS operators that

164
00:09:48,130 --> 00:09:53,710
operate DNS privacy service and it also

165
00:09:51,490 --> 00:09:55,450
includes the DNS privacy policy

166
00:09:53,710 --> 00:09:57,100
practices statement which is a framework

167
00:09:55,450 --> 00:09:59,890
that operators can use to sort of

168
00:09:57,100 --> 00:10:01,660
describe how they run their service and

169
00:09:59,890 --> 00:10:04,569
we combine these two in a document I'll

170
00:10:01,660 --> 00:10:08,110
get back to that too at the end of the

171
00:10:04,570 --> 00:10:11,230
presentation so in revision 3 of the

172
00:10:08,110 --> 00:10:12,820
document we made a number of updates

173
00:10:11,230 --> 00:10:14,920
based on comments on the mailing list

174
00:10:12,820 --> 00:10:16,300
and some discussion that happened in

175
00:10:14,920 --> 00:10:19,599
their working group at the past eight

176
00:10:16,300 --> 00:10:21,160
years one of the things that we did is

177
00:10:19,600 --> 00:10:23,680
that we added clarification for the

178
00:10:21,160 --> 00:10:26,050
purpose of the the DPS which is to

179
00:10:23,680 --> 00:10:27,609
basically the let operators sort of

180
00:10:26,050 --> 00:10:30,339
demonstrate their commitment to privacy

181
00:10:27,610 --> 00:10:32,320
create user choice and also sort of have

182
00:10:30,340 --> 00:10:35,020
a common framework for this so that if

183
00:10:32,320 --> 00:10:36,900
people compare statements from different

184
00:10:35,020 --> 00:10:38,620
operators that they sort of recognized

185
00:10:36,900 --> 00:10:41,199
commonalities between the two or the

186
00:10:38,620 --> 00:10:42,970
differences we've added the NSTIC

187
00:10:41,200 --> 00:10:44,530
validation as a requirement in the

188
00:10:42,970 --> 00:10:47,110
document if you run a DNS privacy

189
00:10:44,530 --> 00:10:48,880
surface because we specifically consider

190
00:10:47,110 --> 00:10:51,070
the potential for misdirection through

191
00:10:48,880 --> 00:10:52,630
poisoning attacks a privacy problem

192
00:10:51,070 --> 00:10:54,340
because you could be redirected and sort

193
00:10:52,630 --> 00:10:58,210
of tricked into entering sensitive data

194
00:10:54,340 --> 00:11:01,230
into websites that you don't trust we

195
00:10:58,210 --> 00:11:03,970
added a reference to our c7 766 for

196
00:11:01,230 --> 00:11:07,870
mitigations of available availability

197
00:11:03,970 --> 00:11:10,780
threats as we consider bad availability

198
00:11:07,870 --> 00:11:11,800
of a service also a privacy risk because

199
00:11:10,780 --> 00:11:13,360
people might switch to different

200
00:11:11,800 --> 00:11:16,510
services if it's not

201
00:11:13,360 --> 00:11:19,720
is unavailable we looked at TLS version

202
00:11:16,510 --> 00:11:24,040
and cipher suite combinations as to

203
00:11:19,720 --> 00:11:27,250
mitigate tracking risks we emphasized

204
00:11:24,040 --> 00:11:29,589
the usefulness of sharing data for

205
00:11:27,250 --> 00:11:32,050
research purposes a bit more because on

206
00:11:29,589 --> 00:11:34,839
the one hand we want to sort of

207
00:11:32,050 --> 00:11:36,699
encourage privacy a good privacy

208
00:11:34,839 --> 00:11:38,740
practices in this document but we do not

209
00:11:36,700 --> 00:11:40,680
want to exclude people from sharing data

210
00:11:38,740 --> 00:11:44,620
with researchers that might help improve

211
00:11:40,680 --> 00:11:47,829
the resolver service or improve privacy

212
00:11:44,620 --> 00:11:50,230
on that resolver service and finally we

213
00:11:47,829 --> 00:11:53,349
added a reference to Mozilla's draft

214
00:11:50,230 --> 00:11:55,360
policy for trusted recursive resolvers

215
00:11:53,350 --> 00:11:56,950
and the content of that we leave

216
00:11:55,360 --> 00:11:58,120
entirely to them but we felt that this

217
00:11:56,950 --> 00:12:01,510
needed to be included in the draft

218
00:11:58,120 --> 00:12:04,470
because it's out there now and there

219
00:12:01,510 --> 00:12:06,670
were some updates to various references

220
00:12:04,470 --> 00:12:07,899
so we think that we've addressed all the

221
00:12:06,670 --> 00:12:11,469
suggestions that were raised in a

222
00:12:07,899 --> 00:12:13,120
meanness and in other discussions we

223
00:12:11,470 --> 00:12:15,820
think that we were sort of ready for for

224
00:12:13,120 --> 00:12:17,980
working with Glasgow and we want this to

225
00:12:15,820 --> 00:12:20,500
remain a living document right so this

226
00:12:17,980 --> 00:12:22,390
is not the the be-all and end-all of the

227
00:12:20,500 --> 00:12:25,120
document what we would like to do is say

228
00:12:22,390 --> 00:12:29,470
do a base in say two years time because

229
00:12:25,120 --> 00:12:31,630
especially if though uptake happens it's

230
00:12:29,470 --> 00:12:34,209
going to happen then we believe that

231
00:12:31,630 --> 00:12:35,980
changes will be required to this

232
00:12:34,209 --> 00:12:37,839
document and that needs to be reflected

233
00:12:35,980 --> 00:12:42,790
in the future so a base in two years

234
00:12:37,839 --> 00:12:44,949
time does not seem unreasonable we are

235
00:12:42,790 --> 00:12:46,990
open for it as to your opinions on this

236
00:12:44,949 --> 00:12:51,670
where do you believe this this is ready

237
00:12:46,990 --> 00:12:54,490
to go to last call or not we decided not

238
00:12:51,670 --> 00:12:56,110
to separate the policy framework from

239
00:12:54,490 --> 00:12:57,640
the operator guidance that was something

240
00:12:56,110 --> 00:12:59,140
that was raised on the listening

241
00:12:57,640 --> 00:13:01,779
discussions previously and there was not

242
00:12:59,140 --> 00:13:04,990
a real consensus on whether to do one or

243
00:13:01,779 --> 00:13:07,149
the other so we debated this between the

244
00:13:04,990 --> 00:13:08,589
authors and we decided that we would

245
00:13:07,149 --> 00:13:10,449
rather keep it in the same document

246
00:13:08,589 --> 00:13:13,570
because we believe that as the document

247
00:13:10,449 --> 00:13:18,609
sort of gets updated over time that the

248
00:13:13,570 --> 00:13:22,750
operator guidance and the DPP DPP PS

249
00:13:18,610 --> 00:13:24,370
sorry need to be sort of updated in

250
00:13:22,750 --> 00:13:25,959
parallel so separating them into two

251
00:13:24,370 --> 00:13:27,400
documents is just going to be sort of an

252
00:13:25,959 --> 00:13:30,369
epitaph nightmare

253
00:13:27,400 --> 00:13:32,260
and that's it any other things that

254
00:13:30,370 --> 00:13:43,840
you'd like to discuss please come to the

255
00:13:32,260 --> 00:13:46,960
mic Oh Paul Hoffman very briefly so we

256
00:13:43,840 --> 00:13:48,970
heard yesterday from somebody the chrome

257
00:13:46,960 --> 00:13:52,210
team that they're also thinking of doing

258
00:13:48,970 --> 00:13:53,830
a TR R and such like that maybe we wait

259
00:13:52,210 --> 00:13:55,990
for last call until we get some more

260
00:13:53,830 --> 00:13:58,120
clarity on that it would seem funny to

261
00:13:55,990 --> 00:13:59,260
have the Firefox one and not Chrome one

262
00:13:58,120 --> 00:14:01,150
I don't know

263
00:13:59,260 --> 00:14:04,000
and we could be waiting forever because

264
00:14:01,150 --> 00:14:05,890
Firefox one is also still a proposed

265
00:14:04,000 --> 00:14:07,840
skiing yeah necessarily the one they're

266
00:14:05,890 --> 00:14:10,270
using so I don't know if we want to wait

267
00:14:07,840 --> 00:14:11,830
on that I'll just say the t RR seem to

268
00:14:10,270 --> 00:14:14,020
be like a flash point for a lot of

269
00:14:11,830 --> 00:14:16,120
people so us being early and then

270
00:14:14,020 --> 00:14:21,100
waiting a few years might be funny don't

271
00:14:16,120 --> 00:14:23,680
know yeah so it yeah I kind of agree

272
00:14:21,100 --> 00:14:25,750
with that that including one and not the

273
00:14:23,680 --> 00:14:29,439
other would be weird but I given on what

274
00:14:25,750 --> 00:14:31,420
on the comments that the chrome people

275
00:14:29,440 --> 00:14:33,010
made in in a discussion I don't think

276
00:14:31,420 --> 00:14:35,349
that they're actually going to publish

277
00:14:33,010 --> 00:14:36,280
something that is sort of a policy on

278
00:14:35,350 --> 00:14:38,500
what they want to do they they basically

279
00:14:36,280 --> 00:14:40,060
sketched what they what they plan to do

280
00:14:38,500 --> 00:14:42,100
but it's not really a policy I don't

281
00:14:40,060 --> 00:14:43,630
know what would happen internally within

282
00:14:42,100 --> 00:14:45,060
Google before that becomes a policy I

283
00:14:43,630 --> 00:14:48,640
don't know if you want to wait for that

284
00:14:45,060 --> 00:14:51,400
but it's a good suggestion any other

285
00:14:48,640 --> 00:14:53,350
issues that people want to raise because

286
00:14:51,400 --> 00:14:56,310
it feels like I'm giving the chairs a

287
00:14:53,350 --> 00:14:56,310
lot more time to do other stuff

288
00:15:00,910 --> 00:15:12,069
okay so so so just to follow up on this

289
00:15:10,000 --> 00:15:16,320
one a little bit how many people have

290
00:15:12,070 --> 00:15:16,320
read this this latest version of the BCP

291
00:15:16,440 --> 00:15:23,470
good about a dozen or so excellent do do

292
00:15:22,030 --> 00:15:24,760
people have any concerns with us

293
00:15:23,470 --> 00:15:27,030
actually getting ready to start a

294
00:15:24,760 --> 00:15:28,840
working group last call on this document

295
00:15:27,030 --> 00:15:31,870
essentially what Tim and I have been

296
00:15:28,840 --> 00:15:34,030
thinking is hold that hand wait for a

297
00:15:31,870 --> 00:15:35,170
second Paul part of what Tim and I've

298
00:15:34,030 --> 00:15:38,800
been thinking of is trying to get this

299
00:15:35,170 --> 00:15:42,250
document and the in the 76 26 biz

300
00:15:38,800 --> 00:15:44,800
document moving because of the you know

301
00:15:42,250 --> 00:15:47,500
the essentially the the benefits of

302
00:15:44,800 --> 00:15:52,420
getting these things out given with the

303
00:15:47,500 --> 00:15:54,130
the existing standards so so what I

304
00:15:52,420 --> 00:15:57,130
would like to do is is encourage people

305
00:15:54,130 --> 00:16:00,100
to read both the 76 26 biz document and

306
00:15:57,130 --> 00:16:02,290
this document and Tim and I are going to

307
00:16:00,100 --> 00:16:03,940
discuss when to start a working group

308
00:16:02,290 --> 00:16:05,110
last call on this and if you have

309
00:16:03,940 --> 00:16:08,950
concerned about doing this working group

310
00:16:05,110 --> 00:16:10,090
last call we'd love to hear about it any

311
00:16:08,950 --> 00:16:17,760
other comments on this one before you

312
00:16:10,090 --> 00:16:17,760
move on okay Pilate

313
00:16:58,750 --> 00:17:07,220
hello so hi I'm Paula me Aras I'm going

314
00:17:04,819 --> 00:17:10,879
to talk about our internet draft related

315
00:17:07,220 --> 00:17:15,949
to DNS zone transfer over TLS sought as

316
00:17:10,880 --> 00:17:18,010
we like to call it there was a small

317
00:17:15,949 --> 00:17:21,620
creature also that William had found

318
00:17:18,010 --> 00:17:23,150
thought so with me

319
00:17:21,619 --> 00:17:25,189
there is Han Zhang who is my

320
00:17:23,150 --> 00:17:27,860
co-presenter and he will be presenting

321
00:17:25,190 --> 00:17:31,400
online so first we are going to start

322
00:17:27,859 --> 00:17:34,250
with Sean not so with Han and then I

323
00:17:31,400 --> 00:17:44,420
will continue further huh

324
00:17:34,250 --> 00:17:49,070
okay okay it's your first load on yeah

325
00:17:44,420 --> 00:17:50,590
okay her me okay cool yeah Thank You

326
00:17:49,070 --> 00:17:53,240
Bobbi

327
00:17:50,590 --> 00:17:55,879
so let me give a little bit dry ground

328
00:17:53,240 --> 00:17:57,980
of salt so as we all know the song trust

329
00:17:55,880 --> 00:18:01,040
the song data should be considered as

330
00:17:57,980 --> 00:18:03,590
privacy and a few words have been done

331
00:18:01,040 --> 00:18:07,000
to protected privacy from sample.txt

332
00:18:03,590 --> 00:18:09,530
three and SEC five I used the two

333
00:18:07,000 --> 00:18:12,890
prevented so many enumeration and at

334
00:18:09,530 --> 00:18:14,510
e-cig is news that you make sure the

335
00:18:12,890 --> 00:18:16,760
zoom transfer only goes to the

336
00:18:14,510 --> 00:18:19,280
authorized the class but now of this

337
00:18:16,760 --> 00:18:22,129
work he increased the zoom data so which

338
00:18:19,280 --> 00:18:24,560
means the zone transfer is in clear text

339
00:18:22,130 --> 00:18:27,410
and the attackers can collected some

340
00:18:24,560 --> 00:18:30,440
data by passively monitoring the network

341
00:18:27,410 --> 00:18:33,080
and that is the my the main motivation

342
00:18:30,440 --> 00:18:36,410
for us to introduce a thought which

343
00:18:33,080 --> 00:18:40,600
increased don't transferred by using DNS

344
00:18:36,410 --> 00:18:40,600
over TLS next slide please

345
00:18:41,020 --> 00:18:44,900
and here

346
00:18:42,590 --> 00:18:47,750
the time line for South craft it's only

347
00:18:44,900 --> 00:18:50,419
this year in March we have introduced

348
00:18:47,750 --> 00:18:53,029
the first version of thought in ITF

349
00:18:50,419 --> 00:18:56,870
below four and I kept the same hacksaw a

350
00:18:53,029 --> 00:18:59,929
secretary side ax ax are over TLS was

351
00:18:56,870 --> 00:19:02,719
implemented I am bound by billion after

352
00:18:59,929 --> 00:19:06,320
that we updated this dropped a lot we

353
00:19:02,720 --> 00:19:09,950
included them many details including the

354
00:19:06,320 --> 00:19:13,149
detailed mechanisms for axfr XFR based

355
00:19:09,950 --> 00:19:20,450
on thought and some authentications

356
00:19:13,150 --> 00:19:22,610
discussions of policy and configurations

357
00:19:20,450 --> 00:19:27,289
and some of them will be discussed in

358
00:19:22,610 --> 00:19:29,840
later slides like slide please and there

359
00:19:27,289 --> 00:19:32,600
are three use cases for facade

360
00:19:29,840 --> 00:19:35,779
the first one is confidentiality which

361
00:19:32,600 --> 00:19:38,090
means the salt billion create the zone

362
00:19:35,779 --> 00:19:41,230
transfers and in this case the attackers

363
00:19:38,090 --> 00:19:44,449
cannot collect the zone data by just

364
00:19:41,230 --> 00:19:46,940
passively monitoring the network the

365
00:19:44,450 --> 00:19:50,470
second one is authentication currently

366
00:19:46,940 --> 00:19:53,480
the existing tip some transfers

367
00:19:50,470 --> 00:19:56,240
authorized by using TC and the in this

368
00:19:53,480 --> 00:19:59,270
drop we discussed the possibilities of

369
00:19:56,240 --> 00:20:02,179
using different other options for

370
00:19:59,270 --> 00:20:04,940
example single to your eyes due to TOS

371
00:20:02,179 --> 00:20:06,529
this combination of ACLs for

372
00:20:04,940 --> 00:20:08,799
authentication and this one will be

373
00:20:06,529 --> 00:20:12,110
discussed in a later slide

374
00:20:08,799 --> 00:20:14,510
the third way is performance so the

375
00:20:12,110 --> 00:20:17,360
existing are except for the exact ours

376
00:20:14,510 --> 00:20:20,000
the implementation must be backwards

377
00:20:17,360 --> 00:20:21,189
compatible and the burden of this is

378
00:20:20,000 --> 00:20:24,980
some old

379
00:20:21,190 --> 00:20:27,260
IeSF our servers do not support using a

380
00:20:24,980 --> 00:20:31,970
single TCP connection for multiple zone

381
00:20:27,260 --> 00:20:34,340
transfers in contrast the solvent

382
00:20:31,970 --> 00:20:37,549
implementations will be required to

383
00:20:34,340 --> 00:20:39,830
implement the optimized transfers which

384
00:20:37,549 --> 00:20:43,789
means multiple zone transfers can be

385
00:20:39,830 --> 00:20:46,699
done in single connection similarly

386
00:20:43,789 --> 00:20:47,539
current usage of the TCP for XFR is

387
00:20:46,700 --> 00:20:50,179
suboptimal

388
00:20:47,539 --> 00:20:53,210
for example the TCP connections are

389
00:20:50,179 --> 00:20:55,640
closed after a single XFR but this is

390
00:20:53,210 --> 00:20:57,620
odd multiple except for our

391
00:20:55,640 --> 00:21:01,540
can be done in single persistent

392
00:20:57,620 --> 00:21:04,250
connection next slide please

393
00:21:01,540 --> 00:21:08,740
and now let's look at the comparison

394
00:21:04,250 --> 00:21:09,950
between the existing axfr mechanism and

395
00:21:08,740 --> 00:21:14,270
self-paced

396
00:21:09,950 --> 00:21:16,640
axfr so as you can see in this slide

397
00:21:14,270 --> 00:21:20,000
maybe next slide please we have an

398
00:21:16,640 --> 00:21:22,820
animation here yes please thank you as

399
00:21:20,000 --> 00:21:26,420
we can see here the first two phases

400
00:21:22,820 --> 00:21:30,460
including the notify and solar request

401
00:21:26,420 --> 00:21:34,210
will be done out of the TR is a session

402
00:21:30,460 --> 00:21:38,030
but the Solar requests that can be done

403
00:21:34,210 --> 00:21:41,390
in TLS or TCP session and if we do

404
00:21:38,030 --> 00:21:46,879
notice slide but the band already use

405
00:21:41,390 --> 00:21:50,840
sometimes use include the solar required

406
00:21:46,880 --> 00:21:52,550
in the TCP session so after the notify

407
00:21:50,840 --> 00:21:54,860
on the solar request all the song

408
00:21:52,550 --> 00:21:57,200
transfer will be done in the TLS session

409
00:21:54,860 --> 00:22:01,340
and that the song transfer will be

410
00:21:57,200 --> 00:22:05,150
encrypted and that the TLS session will

411
00:22:01,340 --> 00:22:07,970
be using the path 853 or some other part

412
00:22:05,150 --> 00:22:11,030
that is mutually agreed by both the

413
00:22:07,970 --> 00:22:15,040
server and the client so now I'm going

414
00:22:11,030 --> 00:22:18,889
to hand over this to blobby thank you

415
00:22:15,040 --> 00:22:21,440
thanks huh so now I'm going to do a

416
00:22:18,890 --> 00:22:23,780
comparison between ike so far the

417
00:22:21,440 --> 00:22:26,980
existing mechanism of iuck so far and

418
00:22:23,780 --> 00:22:31,610
the way XFR iook so far would be done

419
00:22:26,980 --> 00:22:34,340
using zort so I thought so in the

420
00:22:31,610 --> 00:22:36,889
existing so the with notifies there is

421
00:22:34,340 --> 00:22:39,530
not much difference between the existing

422
00:22:36,890 --> 00:22:41,540
mechanism and I thought the notifies

423
00:22:39,530 --> 00:22:46,010
from primary to secondary still go over

424
00:22:41,540 --> 00:22:48,590
UDP and it's kind of the same for the so

425
00:22:46,010 --> 00:22:51,350
request and response the draft

426
00:22:48,590 --> 00:22:53,540
recommends that if there is a TLS

427
00:22:51,350 --> 00:22:56,330
session that is existing to reuse that

428
00:22:53,540 --> 00:23:00,830
TLS session just for to make it more

429
00:22:56,330 --> 00:23:03,949
performant but one of the main things

430
00:23:00,830 --> 00:23:08,360
that the draft also recommends is that

431
00:23:03,950 --> 00:23:09,200
the existing specification say that XFR

432
00:23:08,360 --> 00:23:12,559
should happen

433
00:23:09,200 --> 00:23:16,010
UDP and if the response sizes are too

434
00:23:12,559 --> 00:23:18,500
big there is a fallback on PCP but which

435
00:23:16,010 --> 00:23:19,908
of course adds one extra oddity if like

436
00:23:18,500 --> 00:23:23,450
you know the zone size is big there is

437
00:23:19,909 --> 00:23:27,950
GN SX signs owns with multiple dynamic

438
00:23:23,450 --> 00:23:30,440
updates type of thing so the what we

439
00:23:27,950 --> 00:23:34,940
have seen is some of the latest versions

440
00:23:30,440 --> 00:23:38,090
of bind and NS t do TCP by default but

441
00:23:34,940 --> 00:23:39,260
even when they do TCP by default for

442
00:23:38,090 --> 00:23:41,299
every single zone

443
00:23:39,260 --> 00:23:44,059
except for transfer request and response

444
00:23:41,299 --> 00:23:47,990
a new TCP connection is opened and

445
00:23:44,059 --> 00:23:50,149
closed for like every time it despite

446
00:23:47,990 --> 00:23:53,240
the fact that if the zone is dynamic the

447
00:23:50,149 --> 00:23:56,360
zone is tired nsx sign and is doing a

448
00:23:53,240 --> 00:23:59,600
lot of iock so far every time a new

449
00:23:56,360 --> 00:24:04,039
connection is opened and closed so this

450
00:23:59,600 --> 00:24:07,820
draft recommends that two things using

451
00:24:04,039 --> 00:24:10,730
the TLS session to reuse reuse the TLS

452
00:24:07,820 --> 00:24:12,559
session to do multiple zone transfers

453
00:24:10,730 --> 00:24:16,159
access our incremental zone transfers

454
00:24:12,559 --> 00:24:18,740
over a single TLS session and the and

455
00:24:16,159 --> 00:24:21,559
the draft talks in details about how the

456
00:24:18,740 --> 00:24:23,330
secondary can kind of figure out how how

457
00:24:21,559 --> 00:24:26,178
much longer they want to keep the TLS

458
00:24:23,330 --> 00:24:28,490
session open based on their transfer

459
00:24:26,179 --> 00:24:31,340
rate and stuff like that and we have

460
00:24:28,490 --> 00:24:34,940
some numbers that we have calculated for

461
00:24:31,340 --> 00:24:38,330
a very high so a very big zone with DNS

462
00:24:34,940 --> 00:24:40,700
X signed and lot of transfers so the

463
00:24:38,330 --> 00:24:43,129
using the Taylor series of TLS session

464
00:24:40,700 --> 00:24:46,809
is one thing that the draft recommends

465
00:24:43,130 --> 00:24:49,070
but also the fact that using TLS gives

466
00:24:46,809 --> 00:24:52,100
encryption or protection to the zone

467
00:24:49,070 --> 00:24:54,710
data itself so this is kind of the this

468
00:24:52,100 --> 00:24:59,539
slide kind of brings out what the draft

469
00:24:54,710 --> 00:25:02,630
recommends the second thing that would

470
00:24:59,539 --> 00:25:04,370
like to talk about is and that we have

471
00:25:02,630 --> 00:25:06,860
brought out in the latest version of the

472
00:25:04,370 --> 00:25:09,768
draft is authentication mechanisms for

473
00:25:06,860 --> 00:25:11,809
Zod we evaluate the authenticate the

474
00:25:09,769 --> 00:25:16,010
three existing authentication mechanism

475
00:25:11,809 --> 00:25:19,190
like PC TLS opportunistic strict mutual

476
00:25:16,010 --> 00:25:21,679
and ACL on master and the criteria that

477
00:25:19,190 --> 00:25:22,730
we are used for evaluation is data

478
00:25:21,679 --> 00:25:25,370
authentication

479
00:25:22,730 --> 00:25:27,980
channel confident confidentiality and

480
00:25:25,370 --> 00:25:31,719
channel auth and we are doing this

481
00:25:27,980 --> 00:25:36,830
comparison for primary and secondary so

482
00:25:31,720 --> 00:25:40,040
because TC is entity to entity of gives

483
00:25:36,830 --> 00:25:42,530
us data protection it works perfectly

484
00:25:40,040 --> 00:25:45,110
for data auth so TC is very good

485
00:25:42,530 --> 00:25:48,530
candidate for data or before secondary

486
00:25:45,110 --> 00:25:51,110
and primary then of course TLS provides

487
00:25:48,530 --> 00:25:54,080
channel confidentiality to the data that

488
00:25:51,110 --> 00:25:56,059
is on wire during the transport so all

489
00:25:54,080 --> 00:25:58,000
the three modes of TLS opportunistic

490
00:25:56,059 --> 00:26:00,950
strict mutual give you channel

491
00:25:58,000 --> 00:26:04,250
confidentiality but as you can see when

492
00:26:00,950 --> 00:26:06,470
you look at channel or strict TLS

493
00:26:04,250 --> 00:26:09,020
provides channel or to the secondary

494
00:26:06,470 --> 00:26:11,750
because of course the secondary will do

495
00:26:09,020 --> 00:26:14,900
either the domain name or key pinning to

496
00:26:11,750 --> 00:26:17,330
figure out which is the primary so it

497
00:26:14,900 --> 00:26:19,280
provides good protection channel or to

498
00:26:17,330 --> 00:26:21,470
the secondary but it doesn't provide the

499
00:26:19,280 --> 00:26:23,570
same protection to the primary because

500
00:26:21,470 --> 00:26:24,290
primary doesn't know which client it's

501
00:26:23,570 --> 00:26:27,590
talking to

502
00:26:24,290 --> 00:26:29,809
so in that case mutual TLS offers the

503
00:26:27,590 --> 00:26:32,540
channel or type of protection to both

504
00:26:29,809 --> 00:26:34,760
primary and secondary so that is one

505
00:26:32,540 --> 00:26:36,950
option for channel auth but another

506
00:26:34,760 --> 00:26:40,730
option that we are considering is ACL on

507
00:26:36,950 --> 00:26:42,919
master which provides good which is one

508
00:26:40,730 --> 00:26:46,070
of the existing mechanism and it also

509
00:26:42,919 --> 00:26:48,590
provides good channel authentication to

510
00:26:46,070 --> 00:26:50,720
the primary because now it knows the

511
00:26:48,590 --> 00:26:54,799
second rate wants to talk to so the

512
00:26:50,720 --> 00:26:59,000
conclusion of this analysis is that a

513
00:26:54,799 --> 00:27:01,970
combination of t6 strict TLS and ACL on

514
00:26:59,000 --> 00:27:04,309
the masters kind of fulfills all the

515
00:27:01,970 --> 00:27:06,110
three criterias that we have set for the

516
00:27:04,309 --> 00:27:08,960
authentication and

517
00:27:06,110 --> 00:27:15,168
if we can get that with like reasonable

518
00:27:08,960 --> 00:27:17,750
overhead so policy management for Zod in

519
00:27:15,169 --> 00:27:20,360
this draft we have defined sort of a

520
00:27:17,750 --> 00:27:24,110
term called transfer group now in this

521
00:27:20,360 --> 00:27:26,809
case transfer group is kind of captures

522
00:27:24,110 --> 00:27:30,889
all of the servers that are involved in

523
00:27:26,809 --> 00:27:32,870
zone transfer of a zone for a particular

524
00:27:30,890 --> 00:27:35,460
zone like all primaries all secondaries

525
00:27:32,870 --> 00:27:38,070
and we the

526
00:27:35,460 --> 00:27:40,520
tired the entire transfer group should

527
00:27:38,070 --> 00:27:43,409
have the same policy in terms of teasing

528
00:27:40,520 --> 00:27:46,560
TLS of whether it uses opportunistic

529
00:27:43,410 --> 00:27:48,480
strict of mutual TLS and ACL for primary

530
00:27:46,560 --> 00:27:51,090
because even if one of the server

531
00:27:48,480 --> 00:27:54,020
doesn't follow the same policy it can be

532
00:27:51,090 --> 00:27:58,860
the weak point for any kind of attack

533
00:27:54,020 --> 00:28:03,060
but the challenge that we want to flush

534
00:27:58,860 --> 00:28:06,959
out in the draft is how do we configure

535
00:28:03,060 --> 00:28:10,649
tests and also a lot of enforce and test

536
00:28:06,960 --> 00:28:12,600
policy implementation because sometimes

537
00:28:10,650 --> 00:28:14,790
the secondaries the primaries could be

538
00:28:12,600 --> 00:28:17,550
across operators could be across

539
00:28:14,790 --> 00:28:19,170
different type of implementation so that

540
00:28:17,550 --> 00:28:20,520
is one of the challenges that we have

541
00:28:19,170 --> 00:28:22,830
and we would love to get some feedback

542
00:28:20,520 --> 00:28:28,350
from the working group related to this

543
00:28:22,830 --> 00:28:30,149
challenge and the last slide for our

544
00:28:28,350 --> 00:28:33,169
presentation is just to talk about the

545
00:28:30,150 --> 00:28:36,420
current and future work related to short

546
00:28:33,170 --> 00:28:38,960
unbound he has released version 9 one

547
00:28:36,420 --> 00:28:41,760
point nine point two with secondary side

548
00:28:38,960 --> 00:28:45,150
is that this was the work done by

549
00:28:41,760 --> 00:28:48,300
William during the previous hackathon

550
00:28:45,150 --> 00:28:51,320
and now it's released the server side is

551
00:28:48,300 --> 00:28:55,860
or can be implemented using TLS proxy

552
00:28:51,320 --> 00:29:00,929
ITF 105 hackathon we tried to implement

553
00:28:55,860 --> 00:29:03,689
a support for dot and zort

554
00:29:00,930 --> 00:29:06,090
for DN a Java libraries but that still

555
00:29:03,690 --> 00:29:08,130
work in progress so some of the open

556
00:29:06,090 --> 00:29:11,120
questions that we have asked in the

557
00:29:08,130 --> 00:29:14,250
draft just for performance and better

558
00:29:11,120 --> 00:29:16,800
security would be sure should we

559
00:29:14,250 --> 00:29:18,800
recommend a must for so awkward to

560
00:29:16,800 --> 00:29:22,610
happen over an existing TLS connection

561
00:29:18,800 --> 00:29:25,830
should we say a must for using TLS 1.3

562
00:29:22,610 --> 00:29:29,010
and the open question is about padding

563
00:29:25,830 --> 00:29:30,060
to prevent like traffic analysis type of

564
00:29:29,010 --> 00:29:33,780
thing

565
00:29:30,060 --> 00:29:36,899
so our next request of the working group

566
00:29:33,780 --> 00:29:41,430
is to review this draft and we are

567
00:29:36,900 --> 00:29:48,519
calling for working group adoption thank

568
00:29:41,430 --> 00:29:52,239
you have you open for questions what say

569
00:29:48,519 --> 00:29:52,749
and if I'm and I'm sorry I haven't read

570
00:29:52,239 --> 00:29:54,759
it in detail

571
00:29:52,749 --> 00:29:56,499
I've at least given it fairly well and I

572
00:29:54,759 --> 00:29:57,639
like the presentation I'm glad this is

573
00:29:56,499 --> 00:29:57,940
being documented I think it's really

574
00:29:57,639 --> 00:30:00,008
good

575
00:29:57,940 --> 00:30:02,559
my one question is you're not adding

576
00:30:00,009 --> 00:30:04,570
anything new right isn't it more you're

577
00:30:02,559 --> 00:30:06,549
describing the best way to use the

578
00:30:04,570 --> 00:30:08,408
existing pieces that we have like the

579
00:30:06,549 --> 00:30:13,229
protocol operations the transport

580
00:30:08,409 --> 00:30:16,979
mechanisms and things like that yes so

581
00:30:13,229 --> 00:30:19,479
sorry yeah so we kind of are giving the

582
00:30:16,979 --> 00:30:23,409
recommendations of how to use some of

583
00:30:19,479 --> 00:30:28,809
these existing things like TLS dot but

584
00:30:23,409 --> 00:30:30,429
to do more performant acts if ours or I

585
00:30:28,809 --> 00:30:32,979
guess my question then would be I'm

586
00:30:30,429 --> 00:30:34,089
wondering what the write status for the

587
00:30:32,979 --> 00:30:35,529
document is I think it's currently

588
00:30:34,089 --> 00:30:38,049
listed as proposed standard that is

589
00:30:35,529 --> 00:30:39,070
possible informational or DCP doesn't

590
00:30:38,049 --> 00:30:40,209
make sense because it's not really

591
00:30:39,070 --> 00:30:43,029
long-running we always struggle with

592
00:30:40,209 --> 00:30:46,389
that yeah really

593
00:30:43,029 --> 00:30:49,149
yes I'm also co-author on this stuff so

594
00:30:46,389 --> 00:30:53,918
I want to reply to you to discussion too

595
00:30:49,149 --> 00:30:58,958
so this is also opportunity to improve

596
00:30:53,919 --> 00:31:03,690
on existing aches of art and sorry but

597
00:30:58,959 --> 00:31:08,859
we want to for example by introducing

598
00:31:03,690 --> 00:31:10,839
pipelining right if some points that out

599
00:31:08,859 --> 00:31:13,539
already was currently if you have a lot

600
00:31:10,839 --> 00:31:16,389
of incremental Tom's first current

601
00:31:13,539 --> 00:31:18,999
implementations will open for each

602
00:31:16,389 --> 00:31:24,428
incremental terms for a new TCP session

603
00:31:18,999 --> 00:31:26,259
and if it's all from the same primarily

604
00:31:24,429 --> 00:31:33,279
to the same secondary this could be

605
00:31:26,259 --> 00:31:34,690
pipelines over the same Channel yeah the

606
00:31:33,279 --> 00:31:36,489
optimization is certainly good my

607
00:31:34,690 --> 00:31:41,619
question is is that an implementation

608
00:31:36,489 --> 00:31:47,159
issue or a standards issue this is also

609
00:31:41,619 --> 00:31:47,158
a building block for a next presentation

610
00:31:48,989 --> 00:31:54,339
benkei duck so I think with respect to

611
00:31:52,059 --> 00:31:55,178
the you should the SOA crave be on the

612
00:31:54,339 --> 00:31:59,320
Telus connection

613
00:31:55,179 --> 00:32:01,779
I think should in general we don't want

614
00:31:59,320 --> 00:32:02,110
people to use some insecure data to

615
00:32:01,779 --> 00:32:03,340
deter

616
00:32:02,110 --> 00:32:05,979
whether or not they should do something

617
00:32:03,340 --> 00:32:08,110
securely you might notice that your your

618
00:32:05,980 --> 00:32:10,720
credit card submission form your payment

619
00:32:08,110 --> 00:32:13,030
forms on a website are on websites that

620
00:32:10,720 --> 00:32:15,730
are entirely HTTPS now ten years ago

621
00:32:13,030 --> 00:32:18,100
maybe it was a HDTV site that would send

622
00:32:15,730 --> 00:32:20,020
you to HTTPS but we realized you should

623
00:32:18,100 --> 00:32:21,850
just be using TLS the whole way

624
00:32:20,020 --> 00:32:24,309
I don't think there's a particular

625
00:32:21,850 --> 00:32:27,159
compelling reason to say that you must

626
00:32:24,309 --> 00:32:29,410
use TLS well not 3G lost 103 is great I

627
00:32:27,160 --> 00:32:30,929
think people should use it but we don't

628
00:32:29,410 --> 00:32:32,770
need to use this as a forcing function

629
00:32:30,929 --> 00:32:34,210
there are other versions to tell us

630
00:32:32,770 --> 00:32:37,450
they're just fine they provide adequate

631
00:32:34,210 --> 00:32:44,950
security padding is good but you should

632
00:32:37,450 --> 00:32:46,390
have dkg tell you how to do that Rosa

633
00:32:44,950 --> 00:32:46,990
can download apps can you go back to

634
00:32:46,390 --> 00:32:53,350
slide 9

635
00:32:46,990 --> 00:32:54,580
they give us like nine yeah so one thing

636
00:32:53,350 --> 00:32:56,649
I was wondering and maybe this is a

637
00:32:54,580 --> 00:32:59,500
minor consideration if you keep the

638
00:32:56,650 --> 00:33:02,590
session open for a multiple xfr-s then

639
00:32:59,500 --> 00:33:05,110
to an observer they suddenly see that

640
00:33:02,590 --> 00:33:06,549
there is a relationship between the

641
00:33:05,110 --> 00:33:08,530
primary and the secondary because you

642
00:33:06,549 --> 00:33:09,910
keep that open it's gonna send through

643
00:33:08,530 --> 00:33:11,590
keepalive message so there be a

644
00:33:09,910 --> 00:33:14,020
persistent sort of stream of messages

645
00:33:11,590 --> 00:33:15,490
going on that channel and maybe that it

646
00:33:14,020 --> 00:33:16,870
is a consideration as well because if

647
00:33:15,490 --> 00:33:18,850
this is ephemeral and you have a

648
00:33:16,870 --> 00:33:20,799
connection that sort of happens once in

649
00:33:18,850 --> 00:33:23,219
a while then the observer needs to sort

650
00:33:20,799 --> 00:33:25,690
of constantly observe that and otherwise

651
00:33:23,220 --> 00:33:27,130
by looking for a short time they can see

652
00:33:25,690 --> 00:33:28,660
that there is this traffic going on that

653
00:33:27,130 --> 00:33:30,010
they will they can always observe and

654
00:33:28,660 --> 00:33:31,150
that might be something worth

655
00:33:30,010 --> 00:33:32,860
considering I don't know if that's a

656
00:33:31,150 --> 00:33:33,540
real issue or not but it's something to

657
00:33:32,860 --> 00:33:36,990
think about

658
00:33:33,540 --> 00:33:36,990
yeah thanks

659
00:33:38,309 --> 00:33:45,280
so Dan you're relaying for Alison Menken

660
00:33:42,000 --> 00:33:46,870
she said another co-author here this is

661
00:33:45,280 --> 00:33:48,399
an update of the existing proposed

662
00:33:46,870 --> 00:33:53,049
standards I see this as a natural

663
00:33:48,400 --> 00:33:55,750
proposed standard and she also said to

664
00:33:53,049 --> 00:33:58,080
say to do this with confidentiality and

665
00:33:55,750 --> 00:33:58,080
not without

666
00:34:06,159 --> 00:34:14,119
yes so with respect to the relationship

667
00:34:10,089 --> 00:34:16,969
between secondary and primary not that

668
00:34:14,119 --> 00:34:20,839
the primary might also be just another

669
00:34:16,969 --> 00:34:24,168
ordinary Deena capitalist named Sarah so

670
00:34:20,839 --> 00:34:28,639
it could just be a step client curvy

671
00:34:24,168 --> 00:34:33,918
sofa that's having a connection life to

672
00:34:28,639 --> 00:34:35,690
that front this is Daniel con Gilmore so

673
00:34:33,918 --> 00:34:41,179
thanks for doing this is this is great

674
00:34:35,690 --> 00:34:43,549
I'm happy to see it happening this is

675
00:34:41,179 --> 00:34:46,609
actually related to the Alessandro's

676
00:34:43,549 --> 00:34:48,230
presentation because if you whether you

677
00:34:46,609 --> 00:34:49,518
need to keep the session open or not

678
00:34:48,230 --> 00:34:51,319
depends on whether or not you're capable

679
00:34:49,518 --> 00:34:55,129
of going ahead and spinning up another

680
00:34:51,319 --> 00:34:58,970
one rapidly which the zero RTT would be

681
00:34:55,129 --> 00:35:01,819
useful for so particularly if you say do

682
00:34:58,970 --> 00:35:04,578
this with TLS 1.3 then you can do your

683
00:35:01,819 --> 00:35:08,538
Iook so far and when as you do it you

684
00:35:04,579 --> 00:35:10,819
get the PS k that you would use to do

685
00:35:08,539 --> 00:35:11,869
the 0r TT and then when you're ready to

686
00:35:10,819 --> 00:35:15,609
send the next one you just do the next

687
00:35:11,869 --> 00:35:20,150
one you can think of multiple TLS 1.3

688
00:35:15,609 --> 00:35:22,009
sessions that have that do it where each

689
00:35:20,150 --> 00:35:26,119
one starts with a zero RTT based on the

690
00:35:22,009 --> 00:35:29,329
prior PS k as sort of one continuous

691
00:35:26,119 --> 00:35:30,829
chain sort of yeah and then you don't

692
00:35:29,329 --> 00:35:34,190
need to have the intermediate traffic

693
00:35:30,829 --> 00:35:36,440
that would that that that was raises a

694
00:35:34,190 --> 00:35:39,950
concern if you can go back to the final

695
00:35:36,440 --> 00:35:43,130
slide there or what the final side that

696
00:35:39,950 --> 00:35:45,019
that one so you asked about padding I do

697
00:35:43,130 --> 00:35:46,579
think that it would be useful if we're

698
00:35:45,019 --> 00:35:49,848
trying to defend the confidentiality of

699
00:35:46,579 --> 00:35:51,230
the data to think about padding but not

700
00:35:49,849 --> 00:35:54,529
just to think about padding but to think

701
00:35:51,230 --> 00:35:57,289
about framing particularly for axfr and

702
00:35:54,529 --> 00:35:59,569
larger IX FRS you're likely to have a

703
00:35:57,289 --> 00:36:01,249
number of different records and as you

704
00:35:59,569 --> 00:36:04,489
write those records depending on what

705
00:36:01,249 --> 00:36:06,890
stack you're using the framing of the

706
00:36:04,489 --> 00:36:08,809
rights themselves may be visible on the

707
00:36:06,890 --> 00:36:12,470
wire either in the timing of the packets

708
00:36:08,809 --> 00:36:14,150
that are sent or in the TLS frames right

709
00:36:12,470 --> 00:36:15,770
like if you just write a blob into T

710
00:36:14,150 --> 00:36:18,590
into a TLS stack and you have

711
00:36:15,770 --> 00:36:21,170
corked it then it's likely to send that

712
00:36:18,590 --> 00:36:22,910
out as its TLS record on its own so even

713
00:36:21,170 --> 00:36:25,720
if you're doing it as fast as you can if

714
00:36:22,910 --> 00:36:29,299
each record comes out as its own TLS

715
00:36:25,720 --> 00:36:32,209
record then it's visible on the outside

716
00:36:29,300 --> 00:36:33,920
on the wire so you want to think I would

717
00:36:32,210 --> 00:36:36,619
recommend that you that you do include

718
00:36:33,920 --> 00:36:38,720
guidance and I do think this is part of

719
00:36:36,619 --> 00:36:40,610
the spec not like doing it's worth

720
00:36:38,720 --> 00:36:42,290
putting in the standard yeah that you

721
00:36:40,610 --> 00:36:43,970
that you'd wanted if your goal is to

722
00:36:42,290 --> 00:36:45,350
defend against somebody looking at this

723
00:36:43,970 --> 00:36:47,270
and telling something about your zone

724
00:36:45,350 --> 00:36:50,600
you need to think about the framing of

725
00:36:47,270 --> 00:36:52,220
the TLS records themselves yes so in the

726
00:36:50,600 --> 00:36:55,220
security consideration that's what we

727
00:36:52,220 --> 00:36:57,140
are saying that should we use padding so

728
00:36:55,220 --> 00:36:59,149
that somebody cannot guess the size of

729
00:36:57,140 --> 00:37:01,210
the zone but this is another

730
00:36:59,150 --> 00:37:03,740
consideration - thank you

731
00:37:01,210 --> 00:37:06,440
yesterday I again yeah plus wonder that

732
00:37:03,740 --> 00:37:11,000
that was excellently first with respect

733
00:37:06,440 --> 00:37:14,840
to the the should must SOA query I would

734
00:37:11,000 --> 00:37:17,210
say it must be a teasing protected right

735
00:37:14,840 --> 00:37:19,220
that's critical but whether or not it

736
00:37:17,210 --> 00:37:20,990
should be over an encrypted TLS

737
00:37:19,220 --> 00:37:23,930
connection very much depends on whether

738
00:37:20,990 --> 00:37:25,520
the the sender and receiver care that

739
00:37:23,930 --> 00:37:27,319
the name of the zone is being

740
00:37:25,520 --> 00:37:28,580
transferred so like coda UK probably

741
00:37:27,320 --> 00:37:30,320
doesn't care because the authoritative

742
00:37:28,580 --> 00:37:31,640
servers are known you know if they're

743
00:37:30,320 --> 00:37:33,680
transferring between each other but they

744
00:37:31,640 --> 00:37:35,509
don't want the contents of the zone

745
00:37:33,680 --> 00:37:38,690
itself disclosed so it depends on their

746
00:37:35,510 --> 00:37:40,970
security properties yeah so about the

747
00:37:38,690 --> 00:37:42,940
solar that must is what we are

748
00:37:40,970 --> 00:37:44,959
recommending in terms of performance

749
00:37:42,940 --> 00:37:47,420
like you know using an existing

750
00:37:44,960 --> 00:37:50,420
connection open between the secondary to

751
00:37:47,420 --> 00:37:53,990
primary so that's where our idea was

752
00:37:50,420 --> 00:37:56,330
about the must not in terms of security

753
00:37:53,990 --> 00:37:58,040
what you mentioned so it was just kind

754
00:37:56,330 --> 00:38:01,730
of performance enhancement type of thing

755
00:37:58,040 --> 00:38:03,080
but yeah yeah it depends on how often

756
00:38:01,730 --> 00:38:04,220
you're doing SOA checks if you're doing

757
00:38:03,080 --> 00:38:05,569
them really really frequently and it's

758
00:38:04,220 --> 00:38:10,459
only changing once in a billion years

759
00:38:05,570 --> 00:38:11,840
then yeah hi Sean Turner um I'm not

760
00:38:10,460 --> 00:38:13,910
implementing this but I'm thinking this

761
00:38:11,840 --> 00:38:17,420
is a new protocol why don't you just

762
00:38:13,910 --> 00:38:19,910
must tell us 1.3 I understand that then

763
00:38:17,420 --> 00:38:21,410
you can't do it with 1.2 but just it's

764
00:38:19,910 --> 00:38:22,879
not like it's not available right it's

765
00:38:21,410 --> 00:38:25,368
already some appreciable percentage of

766
00:38:22,880 --> 00:38:26,960
the internet just go 1.3 and then you

767
00:38:25,369 --> 00:38:29,000
can just it's an easier way to write it

768
00:38:26,960 --> 00:38:30,440
you have to write if you do 1.3

769
00:38:29,000 --> 00:38:32,840
you do this if you do one point till you

770
00:38:30,440 --> 00:38:35,090
do that this is new Greenfield just

771
00:38:32,840 --> 00:38:40,190
specify must 1.3 or later and be done

772
00:38:35,090 --> 00:38:52,610
with it you can now tell me why this is

773
00:38:40,190 --> 00:38:54,470
d kg + 1 - on any more questions alright

774
00:38:52,610 --> 00:38:56,480
now the next presentation is gonna be

775
00:38:54,470 --> 00:38:58,720
from from Sarah so she's doing it

776
00:38:56,480 --> 00:38:58,720
remotely

777
00:39:01,440 --> 00:39:04,499
[Music]

778
00:40:10,850 --> 00:40:24,720
so this is a follow up to the present to

779
00:40:15,450 --> 00:40:27,240
the short presentation sorts of many

780
00:40:24,720 --> 00:40:30,049
major problems for privacy of some

781
00:40:27,240 --> 00:40:33,000
transfers but it still depends on

782
00:40:30,050 --> 00:40:38,010
bi-directional exchange for notified

783
00:40:33,000 --> 00:40:40,650
records incremental sensors assault is

784
00:40:38,010 --> 00:40:43,140
still there for a pulling mechanism for

785
00:40:40,650 --> 00:40:47,040
incremental transfers but there's

786
00:40:43,140 --> 00:40:52,520
potential to use in this mechanism a

787
00:40:47,040 --> 00:40:56,870
subscribe and publish for zone updates

788
00:40:52,520 --> 00:41:00,300
so what's the salts it's Dina some

789
00:40:56,870 --> 00:41:06,450
transfer encryption using the Dina

790
00:41:00,300 --> 00:41:11,670
stateful operations or diesel Dina

791
00:41:06,450 --> 00:41:16,259
stateful operations are a protocol in

792
00:41:11,670 --> 00:41:19,190
which built upon state Hall connections

793
00:41:16,260 --> 00:41:24,390
that are kept open

794
00:41:19,190 --> 00:41:27,450
there's where for first assistant stage

795
00:41:24,390 --> 00:41:30,839
for session satisfy and desire uses a

796
00:41:27,450 --> 00:41:31,649
new opcode to convey new type of

797
00:41:30,840 --> 00:41:34,890
messages

798
00:41:31,650 --> 00:41:40,310
besides the ordinary DNS queries and in

799
00:41:34,890 --> 00:41:46,740
essence s1 / add-ins stateful sessions

800
00:41:40,310 --> 00:41:54,620
the three types of Oh Sarah's already

801
00:41:46,740 --> 00:41:54,620
there okay Sarah no no sister

802
00:42:02,540 --> 00:42:10,080
yeah so the three kind of TL fees

803
00:42:08,760 --> 00:42:14,400
already defined

804
00:42:10,080 --> 00:42:17,160
there's the keep life that specifies

805
00:42:14,400 --> 00:42:20,100
messages for keeping a session alive and

806
00:42:17,160 --> 00:42:24,180
how long a client sheet key possession

807
00:42:20,100 --> 00:42:29,580
open a retrial delay an encryption

808
00:42:24,180 --> 00:42:34,190
pattern equivalent to similar to pending

809
00:42:29,580 --> 00:42:38,100
for DNS but then for TVs and other

810
00:42:34,190 --> 00:42:40,950
there's room for more teo fees or more

811
00:42:38,100 --> 00:42:48,480
kind of messages for these kind of

812
00:42:40,950 --> 00:42:53,220
sessions well so how does the keep life

813
00:42:48,480 --> 00:42:56,030
message works the client sends the keep

814
00:42:53,220 --> 00:42:59,640
life detail message to signal supports

815
00:42:56,030 --> 00:43:03,480
surfaces yes I am sent this hello Sarah

816
00:42:59,640 --> 00:43:09,779
hi can you finally hear me I can hear

817
00:43:03,480 --> 00:43:12,780
you John I carry on or should I take

818
00:43:09,780 --> 00:43:20,670
over you can take over and say next

819
00:43:12,780 --> 00:43:23,490
slide you know okay so I think we're

820
00:43:20,670 --> 00:43:26,850
trying to explain the basics behind how

821
00:43:23,490 --> 00:43:29,220
the stateful operations actually work so

822
00:43:26,850 --> 00:43:31,710
first of all a session needs to be

823
00:43:29,220 --> 00:43:34,140
initiated by the exchange of a keepalive

824
00:43:31,710 --> 00:43:36,840
message between the client and the

825
00:43:34,140 --> 00:43:39,750
server after that the normal session

826
00:43:36,840 --> 00:43:43,500
rules apply and normal dinners message

827
00:43:39,750 --> 00:43:45,120
exchange could take place within the

828
00:43:43,500 --> 00:43:46,740
session though you get exchange of DSA

829
00:43:45,120 --> 00:43:48,390
messages and there's two key things to

830
00:43:46,740 --> 00:43:51,959
point out about them in how they're

831
00:43:48,390 --> 00:43:54,480
different to normal DMS messages one is

832
00:43:51,960 --> 00:43:56,580
that there's two types there are DSA

833
00:43:54,480 --> 00:43:59,580
messages which require a response and

834
00:43:56,580 --> 00:44:01,830
there are also DSO you need directional

835
00:43:59,580 --> 00:44:03,509
messages that do not require a response

836
00:44:01,830 --> 00:44:06,870
and that's okay because we're using a

837
00:44:03,510 --> 00:44:09,120
reliable transport secondly a key

838
00:44:06,870 --> 00:44:11,640
difference with DSO is that either the

839
00:44:09,120 --> 00:44:12,720
client or the server can initiate one of

840
00:44:11,640 --> 00:44:14,150
these messages

841
00:44:12,720 --> 00:44:18,720
so that means you have bi-directional

842
00:44:14,150 --> 00:44:21,150
data exchange within the session a last

843
00:44:18,720 --> 00:44:25,020
thing to mention is that a DSA message

844
00:44:21,150 --> 00:44:27,599
can contain more than one TLV the first

845
00:44:25,020 --> 00:44:29,369
TLV found is called the primary T of V

846
00:44:27,599 --> 00:44:31,560
and that dictates the operation that's

847
00:44:29,369 --> 00:44:34,680
actually occurring but there can be

848
00:44:31,560 --> 00:44:38,369
additional two of these that supplement

849
00:44:34,680 --> 00:44:41,399
that operation so what you can see from

850
00:44:38,369 --> 00:44:44,089
this is that the tlvs and DSO messages

851
00:44:41,400 --> 00:44:48,390
can be used in several different

852
00:44:44,089 --> 00:44:51,390
contexts next slide please so the key

853
00:44:48,390 --> 00:44:54,569
thing is that when you specify deal TLV

854
00:44:51,390 --> 00:44:57,680
you have to say precisely which context

855
00:44:54,569 --> 00:45:00,660
it can be used in next slide please

856
00:44:57,680 --> 00:45:03,919
so the easiest way to do this is to

857
00:45:00,660 --> 00:45:06,690
develop a matrix like this so we have

858
00:45:03,920 --> 00:45:08,339
messages which are initiated on client

859
00:45:06,690 --> 00:45:10,800
side which are shown in the left panel

860
00:45:08,339 --> 00:45:12,480
here and messages that are initiated

861
00:45:10,800 --> 00:45:14,010
from the server side in the right panel

862
00:45:12,480 --> 00:45:16,770
here next slide please

863
00:45:14,010 --> 00:45:19,470
and in each of those context you

864
00:45:16,770 --> 00:45:22,410
separate the two plate two ways a TLB

865
00:45:19,470 --> 00:45:26,669
can be used so in the left box there

866
00:45:22,410 --> 00:45:28,290
we're saying which contexts a TLV can be

867
00:45:26,670 --> 00:45:31,349
used in when a client initiates a

868
00:45:28,290 --> 00:45:33,810
message can it be a primary TLV can it

869
00:45:31,349 --> 00:45:36,180
be used in a unidirectional message or

870
00:45:33,810 --> 00:45:39,210
can it be an additional TLV and in the

871
00:45:36,180 --> 00:45:41,520
Box on the right you specify in the

872
00:45:39,210 --> 00:45:44,310
response to that message whether the tlb

873
00:45:41,520 --> 00:45:45,109
can be a primary or an additional next

874
00:45:44,310 --> 00:45:47,310
slide please

875
00:45:45,109 --> 00:45:50,460
so what you can see here is that the

876
00:45:47,310 --> 00:45:52,770
keepalive TLB for example can be used in

877
00:45:50,460 --> 00:45:55,800
a message response para where the client

878
00:45:52,770 --> 00:45:58,290
initiates a DSO message with that as the

879
00:45:55,800 --> 00:46:01,380
primary TLV and the server responds with

880
00:45:58,290 --> 00:46:03,240
that as a primary TLV however it can

881
00:46:01,380 --> 00:46:05,069
also be used in a different context

882
00:46:03,240 --> 00:46:08,368
where a server sends a unidirectional

883
00:46:05,069 --> 00:46:10,140
message just to the client so there's a

884
00:46:08,369 --> 00:46:12,630
lot of flexibility and how the tlbs can

885
00:46:10,140 --> 00:46:14,578
be used and as I mentioned earlier you

886
00:46:12,630 --> 00:46:16,740
can see here that padding for example is

887
00:46:14,579 --> 00:46:19,980
always an additional TLV there is no

888
00:46:16,740 --> 00:46:22,310
sense in using it as a primary TLV next

889
00:46:19,980 --> 00:46:22,310
slide please

890
00:46:22,339 --> 00:46:30,259
so the major place today that has used

891
00:46:26,680 --> 00:46:32,269
DSO beyond the base specification our

892
00:46:30,259 --> 00:46:34,130
drafts that have come out of the service

893
00:46:32,269 --> 00:46:36,529
discovery working group and the one to

894
00:46:34,130 --> 00:46:40,910
draw your attention to is called DNS

895
00:46:36,529 --> 00:46:43,449
push notifications and the motivation

896
00:46:40,910 --> 00:46:46,609
for that draft is that clients can be

897
00:46:43,449 --> 00:46:49,069
asynchronously notified of changes to

898
00:46:46,609 --> 00:46:51,339
specific DNS records so this is

899
00:46:49,069 --> 00:46:55,400
effectively a publish/subscribe model

900
00:46:51,339 --> 00:46:57,469
for specific our assets it's also used

901
00:46:55,400 --> 00:46:59,239
in a couple of other places proxy and

902
00:46:57,469 --> 00:47:03,130
the relay but the push is the one

903
00:46:59,239 --> 00:47:06,589
relevant to this work next slide please

904
00:47:03,130 --> 00:47:08,900
so we actually oh the push notifications

905
00:47:06,589 --> 00:47:10,880
draft a huge debt because we've built

906
00:47:08,900 --> 00:47:13,130
directly on top of all the concepts

907
00:47:10,880 --> 00:47:14,779
there we've simply extended them so that

908
00:47:13,130 --> 00:47:17,689
they can work for publish/subscribe

909
00:47:14,779 --> 00:47:19,099
different are zones the reason we wanted

910
00:47:17,689 --> 00:47:20,779
to do this is because we thought this

911
00:47:19,099 --> 00:47:25,670
fulfilled a number of use cases that

912
00:47:20,779 --> 00:47:27,619
went beyond what normal zot can do so

913
00:47:25,670 --> 00:47:30,729
obviously it takes a box of constant

914
00:47:27,619 --> 00:47:34,099
confidentiality because DSO can use TLS

915
00:47:30,729 --> 00:47:36,439
do so itself doesn't require TLS but

916
00:47:34,099 --> 00:47:39,469
anything building on it could in theory

917
00:47:36,439 --> 00:47:42,109
Makua TLS we think there's additional

918
00:47:39,469 --> 00:47:44,719
confidentiality gains because the

919
00:47:42,109 --> 00:47:47,779
mechanism could eliminate the notify SOA

920
00:47:44,719 --> 00:47:51,049
queries or do equivalents of them always

921
00:47:47,779 --> 00:47:53,479
within the DSO session we think there

922
00:47:51,049 --> 00:47:55,189
could be security advantages because we

923
00:47:53,479 --> 00:47:57,529
can do bi-directional communication

924
00:47:55,189 --> 00:47:59,538
within a single client initiated

925
00:47:57,529 --> 00:48:02,179
connection and this can simplify

926
00:47:59,539 --> 00:48:05,900
firewall setups if you have an untrusted

927
00:48:02,179 --> 00:48:07,279
Network around your secondary we think

928
00:48:05,900 --> 00:48:09,229
we could potentially improve the

929
00:48:07,279 --> 00:48:11,569
performance because we can reduce the

930
00:48:09,229 --> 00:48:13,459
total number of messages we can do

931
00:48:11,569 --> 00:48:16,429
better error handling because we can

932
00:48:13,459 --> 00:48:20,419
define new specific error codes as to

933
00:48:16,429 --> 00:48:22,279
why things fail and a more general

934
00:48:20,420 --> 00:48:24,559
thought about this in the future is that

935
00:48:22,279 --> 00:48:27,559
it has the potential to be a command

936
00:48:24,559 --> 00:48:30,709
channel where servers could initiate

937
00:48:27,559 --> 00:48:32,420
commands towards clients so primary to

938
00:48:30,709 --> 00:48:35,950
secondary and I'll touch on this

939
00:48:32,420 --> 00:48:40,130
slightly again later next slide please

940
00:48:35,950 --> 00:48:41,960
so this is a diagram trying to outline

941
00:48:40,130 --> 00:48:45,410
the message flow very similar to the

942
00:48:41,960 --> 00:48:47,900
ones you saw in previous talk so what we

943
00:48:45,410 --> 00:48:50,480
see here is a client connecting to a

944
00:48:47,900 --> 00:48:53,109
server and starting with the TLS

945
00:48:50,480 --> 00:48:56,089
handshake next slide please

946
00:48:53,109 --> 00:49:00,880
the first exchange is then the client

947
00:48:56,089 --> 00:49:03,950
sending a subscribe xfr DSA message and

948
00:49:00,880 --> 00:49:07,819
the content of the TLV in that message

949
00:49:03,950 --> 00:49:10,939
is the zone name and the current SOA

950
00:49:07,819 --> 00:49:13,759
that the client holds and if all is well

951
00:49:10,940 --> 00:49:15,589
the server can reply back in affirmative

952
00:49:13,760 --> 00:49:18,910
acknowledging that the subscription is

953
00:49:15,589 --> 00:49:22,609
now active next slide please

954
00:49:18,910 --> 00:49:26,328
so what happens after that is a series

955
00:49:22,609 --> 00:49:29,359
of unidirectional push messages from the

956
00:49:26,329 --> 00:49:32,210
primary to the secondary as needed and

957
00:49:29,359 --> 00:49:35,000
the idea here here is that primary will

958
00:49:32,210 --> 00:49:37,190
keep the state of which xfr-s

959
00:49:35,000 --> 00:49:39,790
it has sent and therefore it can just

960
00:49:37,190 --> 00:49:42,740
sequentially send the data is needed and

961
00:49:39,790 --> 00:49:45,609
the current draft proposes that the

962
00:49:42,740 --> 00:49:48,890
content of the TLV in these messages is

963
00:49:45,609 --> 00:49:52,759
equivalent to the body of an existing

964
00:49:48,890 --> 00:49:55,759
axfr message next slide please

965
00:49:52,760 --> 00:49:57,770
and that data flow will continue until

966
00:49:55,760 --> 00:50:00,500
the point that the client wants to

967
00:49:57,770 --> 00:50:02,599
unsubscribe and to achieve that it sends

968
00:50:00,500 --> 00:50:05,450
a unidirectional message to the server

969
00:50:02,599 --> 00:50:08,660
and the content of that message is

970
00:50:05,450 --> 00:50:11,029
actually the message ID of the original

971
00:50:08,660 --> 00:50:13,750
subscription and this allows our clients

972
00:50:11,030 --> 00:50:16,030
who unambiguously cancel an existing

973
00:50:13,750 --> 00:50:20,480
subscription to the server

974
00:50:16,030 --> 00:50:24,349
next slide please so a few more details

975
00:50:20,480 --> 00:50:25,730
about how this mechanism works what you

976
00:50:24,349 --> 00:50:27,560
can see from that flow is that it's

977
00:50:25,730 --> 00:50:30,260
possible for a server to refuse it's a

978
00:50:27,560 --> 00:50:32,299
subscription and in the draft we specify

979
00:50:30,260 --> 00:50:35,119
a number of error codes that could be

980
00:50:32,300 --> 00:50:38,720
used to convey meaningful information to

981
00:50:35,119 --> 00:50:40,910
the secondary in that case clients can

982
00:50:38,720 --> 00:50:42,410
obviously subscribe to multiple zones on

983
00:50:40,910 --> 00:50:46,279
the same connection and do the transfers

984
00:50:42,410 --> 00:50:48,529
in parallel we have proposed that

985
00:50:46,280 --> 00:50:49,190
clients can request a full zone transfer

986
00:50:48,530 --> 00:50:52,540
in the rich

987
00:50:49,190 --> 00:50:55,550
subscription by omitting the SOA and

988
00:50:52,540 --> 00:50:57,529
anytime the service can still send a

989
00:50:55,550 --> 00:50:59,390
fall zone transfer and are able to offer

990
00:50:57,530 --> 00:51:03,890
an incremental one because we're reusing

991
00:50:59,390 --> 00:51:06,170
the existing XF our format also clients

992
00:51:03,890 --> 00:51:08,299
could unsubscribe and re-subscribe on

993
00:51:06,170 --> 00:51:09,800
the same connection for the same zone

994
00:51:08,300 --> 00:51:13,310
there is nothing that would prevent that

995
00:51:09,800 --> 00:51:15,290
happening one note is that in the

996
00:51:13,310 --> 00:51:17,869
existing specification we have not yet

997
00:51:15,290 --> 00:51:20,779
to find a new TLV that would need to be

998
00:51:17,869 --> 00:51:22,670
used for tea sake because we would need

999
00:51:20,780 --> 00:51:26,270
to do that if we want to sign the

1000
00:51:22,670 --> 00:51:30,980
SUBSCRIBE XF our message and the deer so

1001
00:51:26,270 --> 00:51:33,369
XF our messages a note in terms of

1002
00:51:30,980 --> 00:51:36,020
implementation as you can imagine

1003
00:51:33,369 --> 00:51:39,440
implementing this initially will be more

1004
00:51:36,020 --> 00:51:40,700
complex than zot zot some much much

1005
00:51:39,440 --> 00:51:44,720
smaller Delta on existing

1006
00:51:40,700 --> 00:51:46,328
implementations to my knowledge no major

1007
00:51:44,720 --> 00:51:49,189
open source authoritative

1008
00:51:46,329 --> 00:51:51,500
implementations currently support DSO

1009
00:51:49,190 --> 00:51:53,540
because it's so new so clearly that

1010
00:51:51,500 --> 00:51:56,450
would also have to be implemented before

1011
00:51:53,540 --> 00:51:58,369
you can move forward with this but I

1012
00:51:56,450 --> 00:51:59,930
hope you can appreciate that if you did

1013
00:51:58,369 --> 00:52:04,790
implement this you can see that the

1014
00:51:59,930 --> 00:52:07,040
actual data flow is much cleaner and the

1015
00:52:04,790 --> 00:52:09,290
whole mechanism is much more naturally

1016
00:52:07,040 --> 00:52:11,029
extensible and flexible and would

1017
00:52:09,290 --> 00:52:12,920
certainly be very suitable for zones

1018
00:52:11,030 --> 00:52:14,810
where you have a very very high rate of

1019
00:52:12,920 --> 00:52:18,520
art so far something on the order of

1020
00:52:14,810 --> 00:52:23,750
seconds for example next slide please

1021
00:52:18,520 --> 00:52:26,420
so to wrap up open questions one of the

1022
00:52:23,750 --> 00:52:29,150
big ones about the current specification

1023
00:52:26,420 --> 00:52:31,250
is that due to the fact the original

1024
00:52:29,150 --> 00:52:35,690
motivation was confidentiality the

1025
00:52:31,250 --> 00:52:38,690
current spec requires TLS however I have

1026
00:52:35,690 --> 00:52:41,359
had a number of use cases proposed where

1027
00:52:38,690 --> 00:52:44,630
TCP would be sufficient so for example

1028
00:52:41,359 --> 00:52:47,650
if the zone file is already public it

1029
00:52:44,630 --> 00:52:50,990
might be seen as an unnecessary overhead

1030
00:52:47,650 --> 00:52:54,349
so there's a question there about should

1031
00:52:50,990 --> 00:52:56,899
we allow TCP my inclination is to say

1032
00:52:54,349 --> 00:52:59,569
that if we do we should still have a

1033
00:52:56,900 --> 00:53:02,990
must the implementations support TLS we

1034
00:52:59,569 --> 00:53:05,630
don't split that capability

1035
00:53:02,990 --> 00:53:07,069
and if we allow TCP there is somewhat of

1036
00:53:05,630 --> 00:53:09,320
a question as to whether this work

1037
00:53:07,070 --> 00:53:12,560
should stay here or go to dearness op so

1038
00:53:09,320 --> 00:53:14,780
we'd like feedback on that there's a few

1039
00:53:12,560 --> 00:53:18,290
of the more minor wrinkles inspector

1040
00:53:14,780 --> 00:53:20,420
still work out one thought is should we

1041
00:53:18,290 --> 00:53:23,620
actually support multiple zones in a

1042
00:53:20,420 --> 00:53:26,150
single subscription just for efficiency

1043
00:53:23,620 --> 00:53:28,220
we clearly need to think about more

1044
00:53:26,150 --> 00:53:30,320
signaling while subscriptions are active

1045
00:53:28,220 --> 00:53:32,480
for example their clients may want to

1046
00:53:30,320 --> 00:53:37,280
restart the transfers at a different SOA

1047
00:53:32,480 --> 00:53:38,600
or request and xfr we need to think

1048
00:53:37,280 --> 00:53:40,490
about things like what happens if the

1049
00:53:38,600 --> 00:53:44,120
SOA refresh time expires while a

1050
00:53:40,490 --> 00:53:47,149
subscription is active in the current

1051
00:53:44,120 --> 00:53:51,109
spec we haven't specifically specified

1052
00:53:47,150 --> 00:53:54,170
an equivalent axfr message for do so but

1053
00:53:51,110 --> 00:53:55,730
maybe there's a use case for that I can

1054
00:53:54,170 --> 00:53:58,160
certainly imagine some use cases where

1055
00:53:55,730 --> 00:53:59,990
we may want masters connects a client

1056
00:53:58,160 --> 00:54:03,560
saw rather than just restricting it to

1057
00:53:59,990 --> 00:54:05,180
client to master connections and as I

1058
00:54:03,560 --> 00:54:08,180
mentioned earlier there's some thoughts

1059
00:54:05,180 --> 00:54:11,299
about the command tunnel to things that

1060
00:54:08,180 --> 00:54:13,009
were mentioned to me were that people

1061
00:54:11,300 --> 00:54:15,710
thought it'd be interesting if primaries

1062
00:54:13,010 --> 00:54:18,020
could send instructions secondary's to

1063
00:54:15,710 --> 00:54:21,800
do things like stop serving a zone or

1064
00:54:18,020 --> 00:54:24,410
delete a zone and I will also say the

1065
00:54:21,800 --> 00:54:26,150
c-word here covert because obviously

1066
00:54:24,410 --> 00:54:29,149
that's been talked about this week and

1067
00:54:26,150 --> 00:54:31,340
what you can see is that this mechanism

1068
00:54:29,150 --> 00:54:33,830
could quite naturally lend itself to

1069
00:54:31,340 --> 00:54:36,800
sending other data within an established

1070
00:54:33,830 --> 00:54:40,640
DSO session so the feedback we're

1071
00:54:36,800 --> 00:54:42,860
looking for today is really do people

1072
00:54:40,640 --> 00:54:46,000
think this is working on and where do

1073
00:54:42,860 --> 00:54:46,000
they think that work should happen

1074
00:54:47,810 --> 00:54:54,400
it's the workgroup interested in this

1075
00:54:50,270 --> 00:54:54,400
work that's the last Center

1076
00:54:59,180 --> 00:55:02,629
any questions

1077
00:55:04,390 --> 00:55:08,740
I think yes there is interest in at work

1078
00:55:06,130 --> 00:55:10,960
I think this this aligns a lot with

1079
00:55:08,740 --> 00:55:13,410
stuff that came up in the last DNS off

1080
00:55:10,960 --> 00:55:15,760
meaning all the discussions about

1081
00:55:13,410 --> 00:55:18,940
finding a new way to do zone transfers

1082
00:55:15,760 --> 00:55:23,440
to in order to support the requirements

1083
00:55:18,940 --> 00:55:25,890
of Cobre connote and things like that to

1084
00:55:23,440 --> 00:55:31,500
answer a couple of sarah's questions i

1085
00:55:25,890 --> 00:55:34,779
think while it would be fine to require

1086
00:55:31,500 --> 00:55:38,170
implementers to support TLS i don't

1087
00:55:34,780 --> 00:55:40,990
think it should be required in in the

1088
00:55:38,170 --> 00:55:42,430
operations of it i can think of a few

1089
00:55:40,990 --> 00:55:44,919
cases where i'd like to use something

1090
00:55:42,430 --> 00:55:47,799
like this purely as a performance

1091
00:55:44,920 --> 00:55:49,120
optimization where the the data is

1092
00:55:47,800 --> 00:55:52,000
already going over either private

1093
00:55:49,120 --> 00:55:54,040
networks or there's encryption at a

1094
00:55:52,000 --> 00:55:57,250
lower lip layer on the network already

1095
00:55:54,040 --> 00:56:03,130
and and the tcp or TLS would just be an

1096
00:55:57,250 --> 00:56:07,770
unnecessary overhead yeah

1097
00:56:03,130 --> 00:56:07,770
so yes I think this is a fantastic idea

1098
00:56:17,500 --> 00:56:24,260
hello dice

1099
00:56:19,670 --> 00:56:26,720
I see also going into the questions

1100
00:56:24,260 --> 00:56:30,020
should we support multiple zones I think

1101
00:56:26,720 --> 00:56:35,029
the answer should be yes almost thinking

1102
00:56:30,020 --> 00:56:36,770
about cases where people are at hundreds

1103
00:56:35,030 --> 00:56:37,520
of souls there are thousands of Sun

1104
00:56:36,770 --> 00:56:40,250
sizzles

1105
00:56:37,520 --> 00:56:43,550
they host like the hosting and that

1106
00:56:40,250 --> 00:56:46,370
would be a lot of subscriptions to

1107
00:56:43,550 --> 00:56:51,800
maintain if you have to have separate

1108
00:56:46,370 --> 00:56:55,029
subscription for his own about the order

1109
00:56:51,800 --> 00:56:57,410
types I think there's need for order

1110
00:56:55,030 --> 00:56:59,060
messages like you mentioned to refresh

1111
00:56:57,410 --> 00:57:03,140
time or I could see that being a

1112
00:56:59,060 --> 00:57:07,070
different diesel message and then there

1113
00:57:03,140 --> 00:57:11,270
are additional features like command

1114
00:57:07,070 --> 00:57:13,160
channels and coverts but you should

1115
00:57:11,270 --> 00:57:15,259
really think about the scope of the

1116
00:57:13,160 --> 00:57:19,180
document and probably those will be

1117
00:57:15,260 --> 00:57:22,220
separate separate drafts in my opinion

1118
00:57:19,180 --> 00:57:24,589
and finally I would say obviously I'm

1119
00:57:22,220 --> 00:57:29,660
supporting supportive of this work so I

1120
00:57:24,590 --> 00:57:30,770
think it should be adopted tax Matata

1121
00:57:29,660 --> 00:57:33,680
yeah and I think one of the nice things

1122
00:57:30,770 --> 00:57:35,180
about DSO is that it is extensible so we

1123
00:57:33,680 --> 00:57:37,640
could choose to limit the scope of this

1124
00:57:35,180 --> 00:57:40,100
document to purely the data transfer and

1125
00:57:37,640 --> 00:57:42,740
then it would be very easy to add

1126
00:57:40,100 --> 00:57:46,960
additional TL fees that could introduce

1127
00:57:42,740 --> 00:57:46,959
parallel data transfers at later stage

1128
00:57:51,140 --> 00:57:55,400
Ted Hardy speaking I just wanted to go

1129
00:57:54,230 --> 00:57:57,890
to the point that you were asking about

1130
00:57:55,400 --> 00:58:00,380
whether you should move from requiring

1131
00:57:57,890 --> 00:58:03,230
TLS in operation to requiring TLS and

1132
00:58:00,380 --> 00:58:05,780
implementation and to argue that that's

1133
00:58:03,230 --> 00:58:10,160
probably the wrong direction some time

1134
00:58:05,780 --> 00:58:11,870
ago the IETF made a generalized analysis

1135
00:58:10,160 --> 00:58:14,330
of this and said that we want to move as

1136
00:58:11,870 --> 00:58:17,810
much as possible away from clear text

1137
00:58:14,330 --> 00:58:21,170
and to move to to a situation where even

1138
00:58:17,810 --> 00:58:24,500
in cases where it might be permissible

1139
00:58:21,170 --> 00:58:26,750
to run an unencrypted session who wants

1140
00:58:24,500 --> 00:58:28,970
to increase the total amount of

1141
00:58:26,750 --> 00:58:29,730
encryption so that it is expected that

1142
00:58:28,970 --> 00:58:32,580
everything

1143
00:58:29,730 --> 00:58:34,800
encrypted we're moving toward an encrypt

1144
00:58:32,580 --> 00:58:37,319
at all times Internet

1145
00:58:34,800 --> 00:58:39,390
rather than an encrypted at only the use

1146
00:58:37,320 --> 00:58:41,460
cases which required internet because at

1147
00:58:39,390 --> 00:58:45,420
the bare minimum that distinguishes the

1148
00:58:41,460 --> 00:58:49,650
two cases in a way that's signaled to an

1149
00:58:45,420 --> 00:58:53,010
observer so I I encourage you to

1150
00:58:49,650 --> 00:58:55,740
continue with the requires TLS in

1151
00:58:53,010 --> 00:58:58,280
operation as the draft currently has

1152
00:58:55,740 --> 00:59:00,689
rather than relaxing it and while I

1153
00:58:58,280 --> 00:59:04,010
realize that there are cases which

1154
00:59:00,690 --> 00:59:06,930
people have enumerated or there might be

1155
00:59:04,010 --> 00:59:10,830
closed networks or for other situations

1156
00:59:06,930 --> 00:59:12,990
where TLS is simply a small amount of

1157
00:59:10,830 --> 00:59:14,790
additional overhead I believe in modern

1158
00:59:12,990 --> 00:59:17,459
implementations that it over that is

1159
00:59:14,790 --> 00:59:19,440
sufficiently small and the advantage of

1160
00:59:17,460 --> 00:59:21,810
keeping to this always doing it the same

1161
00:59:19,440 --> 00:59:22,830
way sufficiently large that I encourage

1162
00:59:21,810 --> 00:59:29,549
you to keep it as it is

1163
00:59:22,830 --> 00:59:32,310
thank you ritesh patrick sees ethnic as

1164
00:59:29,550 --> 00:59:35,520
one of the officers operative server

1165
00:59:32,310 --> 00:59:37,350
software i think that we badly need a

1166
00:59:35,520 --> 00:59:39,180
new transfer protocol that's a good idea

1167
00:59:37,350 --> 00:59:42,240
but i don't think that it should be this

1168
00:59:39,180 --> 00:59:44,549
one because it's a lot of work to

1169
00:59:42,240 --> 00:59:46,589
implement and i think it for the

1170
00:59:44,550 --> 00:59:49,260
transfer protocol itself it doesn't go

1171
00:59:46,590 --> 00:59:52,290
far enough so we should do like proper

1172
00:59:49,260 --> 00:59:55,830
transfer protocol analysis and not just

1173
00:59:52,290 --> 00:59:58,770
say well this is how you encapsulate the

1174
00:59:55,830 --> 01:00:01,460
old transfer protocol in new headers and

1175
00:59:58,770 --> 01:00:04,170
that's it I think that we badly need to

1176
01:00:01,460 --> 01:00:06,480
work on like more more fundamental

1177
01:00:04,170 --> 01:00:08,910
changes in the transfer protocol so I'm

1178
01:00:06,480 --> 01:00:14,840
not in favor of working on this and

1179
01:00:08,910 --> 01:00:20,060
implementing it at all well it's almost

1180
01:00:14,840 --> 01:00:25,400
just existing transport right it's only

1181
01:00:20,060 --> 01:00:29,810
introducing the deal of ease to convey

1182
01:00:25,400 --> 01:00:34,430
information about the current transfer

1183
01:00:29,810 --> 01:00:34,430
this relief is not worth the effort

1184
01:00:37,460 --> 01:00:44,579
techno Congo more so +12 what had hardy

1185
01:00:41,040 --> 01:00:47,430
said about just make it TLS and that's

1186
01:00:44,579 --> 01:00:50,369
the mandatory that's how it's done I

1187
01:00:47,430 --> 01:00:53,040
don't think the cost is too high I will

1188
01:00:50,369 --> 01:00:55,650
know if it's not TLS then it's not clear

1189
01:00:53,040 --> 01:01:00,109
why I would be in deep ride it's kind of

1190
01:00:55,650 --> 01:01:07,740
an interesting situation and secondly

1191
01:01:00,109 --> 01:01:11,700
the I'm a little puzzled by the use of t

1192
01:01:07,740 --> 01:01:14,399
SIG's within this when you have as an

1193
01:01:11,700 --> 01:01:19,649
establishing secure session the we

1194
01:01:14,400 --> 01:01:22,940
talked a lot about this in in the web

1195
01:01:19,650 --> 01:01:25,319
packaging side meeting earlier this week

1196
01:01:22,940 --> 01:01:27,900
but the relationship between the

1197
01:01:25,319 --> 01:01:30,750
transport model of authentication and

1198
01:01:27,900 --> 01:01:34,380
the object model of authentication which

1199
01:01:30,750 --> 01:01:36,119
DNS is super used to using is unclear

1200
01:01:34,380 --> 01:01:37,559
and and you here you've got this weird

1201
01:01:36,119 --> 01:01:39,990
mix of things so I'm not sure we don't

1202
01:01:37,559 --> 01:01:41,640
get from the from the pairing and it

1203
01:01:39,990 --> 01:01:44,720
just feels a bit like a mismatch and I

1204
01:01:41,640 --> 01:01:48,200
don't understand it this show tea fake

1205
01:01:44,720 --> 01:01:53,220
authentication is enter enter

1206
01:01:48,200 --> 01:01:56,939
authentication of the primary and the

1207
01:01:53,220 --> 01:01:59,790
finally receiving name server that will

1208
01:01:56,940 --> 01:02:04,250
serve the zone so there could be a

1209
01:01:59,790 --> 01:02:11,849
number of proxies between them doing

1210
01:02:04,250 --> 01:02:14,280
just such a or talking of a TLS right

1211
01:02:11,849 --> 01:02:17,809
and you have to twist all these without

1212
01:02:14,280 --> 01:02:22,680
tisha you have to trust other fractions

1213
01:02:17,809 --> 01:02:24,809
that they conveyed data yeah but so if

1214
01:02:22,680 --> 01:02:27,118
there are foxes involved in this which

1215
01:02:24,809 --> 01:02:29,010
it hadn't really talked about then I

1216
01:02:27,119 --> 01:02:31,710
mean the thing with e-cig is that it's

1217
01:02:29,010 --> 01:02:34,109
also replayable right so if I get a copy

1218
01:02:31,710 --> 01:02:35,849
of it I can now replay that T cig and do

1219
01:02:34,109 --> 01:02:37,890
it in other contexts that maybe it

1220
01:02:35,849 --> 01:02:39,599
wasn't appropriate to do and I don't

1221
01:02:37,890 --> 01:02:42,058
understand T cig well enough to be able

1222
01:02:39,599 --> 01:02:44,400
to investigate that but I'm just saying

1223
01:02:42,059 --> 01:02:46,380
that to take the TLS model which says

1224
01:02:44,400 --> 01:02:48,210
here's a stream you've established the

1225
01:02:46,380 --> 01:02:50,010
stream the two sides of the stream have

1226
01:02:48,210 --> 01:02:50,730
certain identities and then say we're

1227
01:02:50,010 --> 01:02:52,350
gonna pass

1228
01:02:50,730 --> 01:02:55,410
then that authentication token that's

1229
01:02:52,350 --> 01:02:57,810
not itself bound to the Telestream it

1230
01:02:55,410 --> 01:02:59,850
sets off the the warning flags but I

1231
01:02:57,810 --> 01:03:01,799
don't know the details so I'm just

1232
01:02:59,850 --> 01:03:06,890
highlighting that as a potential source

1233
01:03:01,800 --> 01:03:10,080
of tension here yeah it's it's also also

1234
01:03:06,890 --> 01:03:14,400
it's also cheap methods for the master

1235
01:03:10,080 --> 01:03:16,500
to authenticate the secondary because

1236
01:03:14,400 --> 01:03:19,530
otherwise she would have need to have

1237
01:03:16,500 --> 01:03:23,369
mutual TLS authentication which is

1238
01:03:19,530 --> 01:03:25,500
inconvenient right or if you were to go

1239
01:03:23,369 --> 01:03:29,190
to the TLS working group and say we need

1240
01:03:25,500 --> 01:03:32,490
a way that the that we're trying to use

1241
01:03:29,190 --> 01:03:35,369
to do something like this in in DNS over

1242
01:03:32,490 --> 01:03:37,500
TLS and the server needs a way to

1243
01:03:35,369 --> 01:03:39,780
authenticate something about who the

1244
01:03:37,500 --> 01:03:41,910
client is then you'll get answers that

1245
01:03:39,780 --> 01:03:43,080
are very different from tea sake there

1246
01:03:41,910 --> 01:03:45,029
you'll get answers that are bound

1247
01:03:43,080 --> 01:03:49,560
specifically to the encryption channel

1248
01:03:45,030 --> 01:03:51,090
that is that is in years so anyway I'm

1249
01:03:49,560 --> 01:03:52,560
not gonna design at the mic here I'm

1250
01:03:51,090 --> 01:03:53,850
just pointing out that I feel like

1251
01:03:52,560 --> 01:04:02,840
there's a mismatch here and something

1252
01:03:53,850 --> 01:04:07,049
that were seeking okay so that there's a

1253
01:04:02,840 --> 01:04:11,460
common operational paradigm for for free

1254
01:04:07,050 --> 01:04:13,859
zone transfers is I trust you to execute

1255
01:04:11,460 --> 01:04:18,210
to transfer this zone and I don't care

1256
01:04:13,859 --> 01:04:20,910
where you transfer it from so mutual TLS

1257
01:04:18,210 --> 01:04:24,210
authentication is inconvenient in that

1258
01:04:20,910 --> 01:04:26,759
in in that case all I would care about

1259
01:04:24,210 --> 01:04:28,740
is that we've negotiated TLS so that

1260
01:04:26,760 --> 01:04:30,900
it's encrypted and I don't but I don't

1261
01:04:28,740 --> 01:04:32,160
care where you're negotiating it from so

1262
01:04:30,900 --> 01:04:34,050
I don't need to validate that your

1263
01:04:32,160 --> 01:04:35,700
certificate matches your host or

1264
01:04:34,050 --> 01:04:38,040
anything like that

1265
01:04:35,700 --> 01:04:40,109
in that case having TLS for the

1266
01:04:38,040 --> 01:04:45,509
encryption but tea sig for the client

1267
01:04:40,109 --> 01:04:46,980
authentication would be useful note that

1268
01:04:45,510 --> 01:04:48,840
the zone checksum draft that we're

1269
01:04:46,980 --> 01:04:52,920
offering also kind of solves that

1270
01:04:48,840 --> 01:04:56,810
problem so so blobbies getting up there

1271
01:04:52,920 --> 01:04:56,810
I'm gonna cut the mic line yeah

1272
01:05:01,250 --> 01:05:09,230
so uh just as we suck so what we

1273
01:05:06,060 --> 01:05:13,049
mentioned in the data earth during the

1274
01:05:09,230 --> 01:05:15,720
presentation was what the thing does and

1275
01:05:13,050 --> 01:05:18,390
which applies equally to the third piece

1276
01:05:15,720 --> 01:05:21,089
also is that what TC would do is

1277
01:05:18,390 --> 01:05:23,190
whatever the primary is saying that I'm

1278
01:05:21,090 --> 01:05:25,620
going to send you in terms of the ike

1279
01:05:23,190 --> 01:05:27,840
safar response it will take that data

1280
01:05:25,620 --> 01:05:31,440
whatever like two hours or three hours

1281
01:05:27,840 --> 01:05:34,860
and it will do a hash on it sign that

1282
01:05:31,440 --> 01:05:37,380
hash using this shared secret and then

1283
01:05:34,860 --> 01:05:40,560
send it to the client so that the client

1284
01:05:37,380 --> 01:05:42,870
knows that once I verify that using what

1285
01:05:40,560 --> 01:05:44,790
shared secret I have he didn't mean to

1286
01:05:42,870 --> 01:05:49,290
send three errors and I did get three

1287
01:05:44,790 --> 01:05:51,779
hours so it's kind of like you know the

1288
01:05:49,290 --> 01:05:54,509
data itself also gets authenticated from

1289
01:05:51,780 --> 01:05:56,160
both sides not just the TLS not just

1290
01:05:54,510 --> 01:05:58,770
protect encrypting the data but

1291
01:05:56,160 --> 01:06:11,310
authenticity of the data itself so

1292
01:05:58,770 --> 01:06:15,420
that's what you buy with the TC what's

1293
01:06:11,310 --> 01:06:15,630
harder is I again so correct me if I'm

1294
01:06:15,420 --> 01:06:17,430
wrong

1295
01:06:15,630 --> 01:06:19,020
but there's two halves of this

1296
01:06:17,430 --> 01:06:20,790
essentially right there's there's one

1297
01:06:19,020 --> 01:06:23,330
half of this is how we want to do you

1298
01:06:20,790 --> 01:06:26,340
know secure push notifications and stuff

1299
01:06:23,330 --> 01:06:28,110
the secure and the push are seemed to be

1300
01:06:26,340 --> 01:06:30,960
totally independent there is nothing in

1301
01:06:28,110 --> 01:06:33,330
the document that requires TLS in terms

1302
01:06:30,960 --> 01:06:34,470
of functionality there's a requirement

1303
01:06:33,330 --> 01:06:38,069
we want to do it and deprive and we want

1304
01:06:34,470 --> 01:06:39,390
to talk encrypted great but the push

1305
01:06:38,070 --> 01:06:40,830
notification side this seems like

1306
01:06:39,390 --> 01:06:42,390
completely the wrong working group and

1307
01:06:40,830 --> 01:06:44,040
it should really be India and I saw all

1308
01:06:42,390 --> 01:06:47,339
you really require is a streaming

1309
01:06:44,040 --> 01:06:49,259
transport and you know being able to

1310
01:06:47,340 --> 01:06:51,030
specify Indiana stop we need a streaming

1311
01:06:49,260 --> 01:06:54,810
transport oh and it must be TLS one

1312
01:06:51,030 --> 01:06:56,370
point three is just fine but I want the

1313
01:06:54,810 --> 01:06:57,540
experts in the DNS off Group two

1314
01:06:56,370 --> 01:07:00,600
although I keep looking around and

1315
01:06:57,540 --> 01:07:06,390
they're all here but it still feels like

1316
01:07:00,600 --> 01:07:07,350
the wrong place okay hi who needs with

1317
01:07:06,390 --> 01:07:09,779
no hats on

1318
01:07:07,350 --> 01:07:13,230
I think I'm echoing better spastics

1319
01:07:09,780 --> 01:07:17,040
coming that the J seems to be a general

1320
01:07:13,230 --> 01:07:18,990
to redesign zone transfers so I'm also

1321
01:07:17,040 --> 01:07:20,400
in favor of starting from scratch and

1322
01:07:18,990 --> 01:07:22,109
looking at the requirements for zone

1323
01:07:20,400 --> 01:07:24,120
transfers and then building on top of

1324
01:07:22,110 --> 01:07:26,940
that rather than trying to retrofit and

1325
01:07:24,120 --> 01:07:29,580
the other observation on complexity this

1326
01:07:26,940 --> 01:07:32,550
assumes that DSO is also implemented

1327
01:07:29,580 --> 01:07:34,380
which is a fairly large spec so I think

1328
01:07:32,550 --> 01:07:39,320
to get to this point would require an

1329
01:07:34,380 --> 01:07:39,320
implementer to do a lot of work okay

1330
01:07:49,340 --> 01:07:55,740
just for my own curiosity how many

1331
01:07:51,300 --> 01:07:57,120
people have read this document okay and

1332
01:07:55,740 --> 01:08:02,399
how many people have read the zone

1333
01:07:57,120 --> 01:08:04,049
transfers over TLS document excellent so

1334
01:08:02,400 --> 01:08:06,120
I'm gonna chat with Tim to see how we

1335
01:08:04,050 --> 01:08:07,920
want to proceed with these but if you

1336
01:08:06,120 --> 01:08:09,980
have comments or feedback please provide

1337
01:08:07,920 --> 01:08:13,790
them to the mailing list Thanks I

1338
01:08:09,980 --> 01:08:13,790
believe Michaels now up

1339
01:08:30,770 --> 01:08:40,910
that's not it that's it does it work

1340
01:08:37,420 --> 01:08:43,190
okay okay not for me clicker doesn't

1341
01:08:40,910 --> 01:08:46,339
work for me all right

1342
01:08:43,189 --> 01:08:47,809
it's a treacherous computing module hi

1343
01:08:46,339 --> 01:08:51,830
my name is Michael Richardson I'm here

1344
01:08:47,810 --> 01:08:53,359
mostly talking on behalf of Peru and Dan

1345
01:08:51,830 --> 01:08:56,359
who couldn't come to this meeting

1346
01:08:53,359 --> 01:08:58,250
i roped into this because they decided

1347
01:08:56,359 --> 01:09:00,799
to incorporate my protocol into their

1348
01:08:58,250 --> 01:09:04,069
stuff so what this is about this is

1349
01:09:00,799 --> 01:09:07,850
about how your let's go to the thing

1350
01:09:04,069 --> 01:09:10,489
what we're talking about document has

1351
01:09:07,850 --> 01:09:11,719
advanced a bunch okay what are we

1352
01:09:10,488 --> 01:09:15,769
talking about we're basically talking

1353
01:09:11,719 --> 01:09:19,370
about how to bring on install trust

1354
01:09:15,770 --> 01:09:25,640
anchors for DNS over TLS or DNS over

1355
01:09:19,370 --> 01:09:28,549
HTTP things and the scope is you show up

1356
01:09:25,640 --> 01:09:32,180
with a device or an IOT device at an

1357
01:09:28,549 --> 01:09:37,160
enterprise and you would like it to use

1358
01:09:32,180 --> 01:09:40,130
the DNS over TLS with with the local

1359
01:09:37,160 --> 01:09:42,830
trust anchors because you would like to

1360
01:09:40,130 --> 01:09:46,160
get local names and not remote names

1361
01:09:42,830 --> 01:09:49,850
because you would like to have access to

1362
01:09:46,160 --> 01:09:53,719
whatever Enterprise mandated malware

1363
01:09:49,850 --> 01:09:56,120
defense that's dns-based and we have a

1364
01:09:53,719 --> 01:09:59,270
new use case which is particularly care

1365
01:09:56,120 --> 01:10:03,290
is that we have this manufacturer usage

1366
01:09:59,270 --> 01:10:04,969
description mud files and this is

1367
01:10:03,290 --> 01:10:06,830
essentially a mechanism by which IOT

1368
01:10:04,969 --> 01:10:09,200
devices can express here's a whitelist

1369
01:10:06,830 --> 01:10:11,330
of traffic and communications that you

1370
01:10:09,200 --> 01:10:14,540
should expect me to do do I do anything

1371
01:10:11,330 --> 01:10:17,120
else I'm compromised and please act

1372
01:10:14,540 --> 01:10:20,810
appropriately problem is that we'd like

1373
01:10:17,120 --> 01:10:23,000
to write those ackles in with DNS names

1374
01:10:20,810 --> 01:10:24,620
and not IP addresses and you may have

1375
01:10:23,000 --> 01:10:27,260
noticed that firewalls mostly don't

1376
01:10:24,620 --> 01:10:29,540
speak that in the low level they need IP

1377
01:10:27,260 --> 01:10:31,730
addresses to do enforcement and the only

1378
01:10:29,540 --> 01:10:33,980
way that works as if essentially the

1379
01:10:31,730 --> 01:10:36,200
request for the DNS name that the

1380
01:10:33,980 --> 01:10:38,299
firewall does and the request of the IOT

1381
01:10:36,200 --> 01:10:40,370
didn't it does essentially resolve

1382
01:10:38,300 --> 01:10:42,620
through the same resolver otherwise we

1383
01:10:40,370 --> 01:10:43,969
get into all sorts of geolocation and

1384
01:10:42,620 --> 01:10:44,650
all sorts of other DNS things that

1385
01:10:43,969 --> 01:10:48,550
happens with

1386
01:10:44,650 --> 01:10:49,719
cloudy things and the result is the

1387
01:10:48,550 --> 01:10:51,520
firewall has a different set of

1388
01:10:49,720 --> 01:10:53,470
addresses than the IOT device in terms

1389
01:10:51,520 --> 01:10:55,150
of what goes on there's also some

1390
01:10:53,470 --> 01:10:56,710
efficiencies if they turn out to both go

1391
01:10:55,150 --> 01:10:57,910
to the same resolver then it's already

1392
01:10:56,710 --> 01:10:59,320
cached and there's some other things

1393
01:10:57,910 --> 01:11:00,790
that you can do and it reduces some of

1394
01:10:59,320 --> 01:11:04,120
the stuff so this is about how do we get

1395
01:11:00,790 --> 01:11:05,380
this to happen so there's a couple

1396
01:11:04,120 --> 01:11:06,610
different ways that describe in the

1397
01:11:05,380 --> 01:11:07,870
document document describes three or

1398
01:11:06,610 --> 01:11:08,679
four different ways and there's another

1399
01:11:07,870 --> 01:11:10,720
document

1400
01:11:08,680 --> 01:11:14,290
I believe it's almost Asadi that talks

1401
01:11:10,720 --> 01:11:15,400
about doing this in in DHCP v4 in a

1402
01:11:14,290 --> 01:11:17,230
slightly different way than we've

1403
01:11:15,400 --> 01:11:18,370
described and I'm actually not qualified

1404
01:11:17,230 --> 01:11:20,830
to tell you the differences at this

1405
01:11:18,370 --> 01:11:22,450
point but if you do this with an IOT

1406
01:11:20,830 --> 01:11:24,340
device or an enterprise router of some

1407
01:11:22,450 --> 01:11:27,550
kind that's that's running the anima

1408
01:11:24,340 --> 01:11:29,740
brewski docx process then essentially

1409
01:11:27,550 --> 01:11:32,850
what happens is that in that process you

1410
01:11:29,740 --> 01:11:36,010
enroll their device enrolls into a

1411
01:11:32,850 --> 01:11:37,870
enterprise PKI and when that device does

1412
01:11:36,010 --> 01:11:40,270
that well you get the trust anchors

1413
01:11:37,870 --> 01:11:42,640
that's the whole point is you are now at

1414
01:11:40,270 --> 01:11:44,740
rate device on the network and you get

1415
01:11:42,640 --> 01:11:47,110
to trust other devices and so now the

1416
01:11:44,740 --> 01:11:51,510
only real question is what's the name of

1417
01:11:47,110 --> 01:11:54,070
the the dot or doe server and how do you

1418
01:11:51,510 --> 01:11:55,510
how do you look it up in a certificate

1419
01:11:54,070 --> 01:11:57,809
so it's actually really easy in that

1420
01:11:55,510 --> 01:12:00,460
case is almost no removing parts to add

1421
01:11:57,810 --> 01:12:04,300
if you are bootstrapping

1422
01:12:00,460 --> 01:12:07,120
a desktop this kind of machine into a

1423
01:12:04,300 --> 01:12:09,760
this PKI then you're probably going to

1424
01:12:07,120 --> 01:12:12,370
have some kind of if you use est which

1425
01:12:09,760 --> 01:12:17,950
was RFC 70:30 to do certificate

1426
01:12:12,370 --> 01:12:20,140
enrollment for that device then it you

1427
01:12:17,950 --> 01:12:22,150
may have a password of some kind and you

1428
01:12:20,140 --> 01:12:23,680
need to authenticate over that thing and

1429
01:12:22,150 --> 01:12:25,750
you can use Paik or something else like

1430
01:12:23,680 --> 01:12:28,840
this to authenticate in which case again

1431
01:12:25,750 --> 01:12:31,440
you get back trust anchors and you an

1432
01:12:28,840 --> 01:12:33,730
end certificate you can validate the DNS

1433
01:12:31,440 --> 01:12:36,879
this kind of thing happens I'm told

1434
01:12:33,730 --> 01:12:39,610
regularly right now actually using CMP

1435
01:12:36,880 --> 01:12:42,400
with I think it's Apple devices which

1436
01:12:39,610 --> 01:12:45,190
are in a in enterprises I'd have no

1437
01:12:42,400 --> 01:12:47,019
first-hand knowledge of that there's a

1438
01:12:45,190 --> 01:12:48,820
discovery phase this is the part that

1439
01:12:47,020 --> 01:12:50,560
I'm going to say I'm least qualified to

1440
01:12:48,820 --> 01:12:52,420
understand so if you'd like to ask me

1441
01:12:50,560 --> 01:12:55,510
questions that would be funny

1442
01:12:52,420 --> 01:12:58,120
but essentially you you look up this DN

1443
01:12:55,510 --> 01:12:58,690
net domain dash S and you do a service

1444
01:12:58,120 --> 01:13:00,580
just go

1445
01:12:58,690 --> 01:13:03,040
on it and it tells you where the the NS

1446
01:13:00,580 --> 01:13:04,570
server is and you go and find it and

1447
01:13:03,040 --> 01:13:06,790
then you find it has a certificate which

1448
01:13:04,570 --> 01:13:09,489
is signed with the appropriate mean in

1449
01:13:06,790 --> 01:13:14,760
the the thing and you had a trust anchor

1450
01:13:09,489 --> 01:13:18,580
from before and everything is good and

1451
01:13:14,760 --> 01:13:21,580
there's a other document that tells you

1452
01:13:18,580 --> 01:13:23,290
how to how to do that part how to how to

1453
01:13:21,580 --> 01:13:24,820
get the right URLs out so if you're

1454
01:13:23,290 --> 01:13:26,320
doing dough you need a URL that you're

1455
01:13:24,820 --> 01:13:27,790
gonna add to it and there's another

1456
01:13:26,320 --> 01:13:30,940
documents not a doctrine that says how

1457
01:13:27,790 --> 01:13:32,650
that's happening and I mentioned you

1458
01:13:30,940 --> 01:13:34,120
have to do the connection and you have

1459
01:13:32,650 --> 01:13:38,290
to match all the things so I jumped

1460
01:13:34,120 --> 01:13:40,870
ahead of my slides there we go one of

1461
01:13:38,290 --> 01:13:42,670
the things we would like to have is we

1462
01:13:40,870 --> 01:13:44,800
would like to have some way of asserting

1463
01:13:42,670 --> 01:13:46,890
what the privacy considerations of the

1464
01:13:44,800 --> 01:13:49,210
server that you're talking to is I

1465
01:13:46,890 --> 01:13:51,010
recently learned I think that that

1466
01:13:49,210 --> 01:13:53,680
Mozilla has a statement that for

1467
01:13:51,010 --> 01:13:54,880
instance relates to CloudFlare and how

1468
01:13:53,680 --> 01:13:57,790
that happens and one of the interesting

1469
01:13:54,880 --> 01:14:01,120
questions is well how can others play

1470
01:13:57,790 --> 01:14:03,070
and get an attestation from some third

1471
01:14:01,120 --> 01:14:05,969
party that says that the DNS server

1472
01:14:03,070 --> 01:14:10,620
running your enterprise is not

1473
01:14:05,969 --> 01:14:12,460
scribbling DNS requests you know out the

1474
01:14:10,620 --> 01:14:15,580
unencrypted channel somewhere to

1475
01:14:12,460 --> 01:14:17,560
somebody right and or writing them or

1476
01:14:15,580 --> 01:14:19,420
logging down or whatever whatever it is

1477
01:14:17,560 --> 01:14:22,090
your policy we would like to be able to

1478
01:14:19,420 --> 01:14:24,280
write it down somehow and attest it to

1479
01:14:22,090 --> 01:14:25,960
the end-user so that their device can

1480
01:14:24,280 --> 01:14:29,139
say oh okay this actually is a religion

1481
01:14:25,960 --> 01:14:33,100
thing or Wow while I'm at this

1482
01:14:29,140 --> 01:14:37,300
particular location my Tuesday job maybe

1483
01:14:33,100 --> 01:14:38,710
I won't be you know turning on my laptop

1484
01:14:37,300 --> 01:14:45,610
or something because I don't trust the

1485
01:14:38,710 --> 01:14:50,530
DNS you'll know at least and you know

1486
01:14:45,610 --> 01:14:52,179
what I do here I broke the slide they

1487
01:14:50,530 --> 01:14:53,650
should be able to enable this discovery

1488
01:14:52,180 --> 01:14:54,880
and if they don't want to enable it and

1489
01:14:53,650 --> 01:14:56,349
they don't want to discover the local

1490
01:14:54,880 --> 01:14:57,550
thing they're not gonna get local names

1491
01:14:56,350 --> 01:14:59,980
and this kind of stuff and that's really

1492
01:14:57,550 --> 01:15:03,489
applicable to devices that you would

1493
01:14:59,980 --> 01:15:05,980
bring with you for an enterprise with

1494
01:15:03,489 --> 01:15:08,889
IOT devices that they want to unboard

1495
01:15:05,980 --> 01:15:10,570
then well they want to enable it and and

1496
01:15:08,890 --> 01:15:12,650
they particularly want to enable because

1497
01:15:10,570 --> 01:15:16,250
otherwise they have difficulty defending

1498
01:15:12,650 --> 01:15:17,719
the IOT devices from malware they also

1499
01:15:16,250 --> 01:15:19,930
have difficulty defending the internet

1500
01:15:17,720 --> 01:15:24,920
against the IOT devices properly

1501
01:15:19,930 --> 01:15:33,350
comments and questions anyone read the

1502
01:15:24,920 --> 01:15:35,630
draft eight a few for Sean hi Sean

1503
01:15:33,350 --> 01:15:36,920
Turner so this is a PKI thing so you can

1504
01:15:35,630 --> 01:15:38,810
just tell me to shut up and sit down if

1505
01:15:36,920 --> 01:15:43,940
you want do you really need a new

1506
01:15:38,810 --> 01:15:45,860
certificate extension we thought that

1507
01:15:43,940 --> 01:15:48,589
that bullet needed to be in there to

1508
01:15:45,860 --> 01:15:50,210
attest to the policy right right there's

1509
01:15:48,590 --> 01:15:51,530
already certificate policies extension

1510
01:15:50,210 --> 01:15:53,510
where you can put this kind of stuff

1511
01:15:51,530 --> 01:15:58,490
there that doesn't involve lawyers

1512
01:15:53,510 --> 01:15:59,540
though that's this policy right like if

1513
01:15:58,490 --> 01:16:00,889
you're putting things on a certificate

1514
01:15:59,540 --> 01:16:02,450
you're supposed to have certificate

1515
01:16:00,890 --> 01:16:04,040
policy and you're gonna specify what

1516
01:16:02,450 --> 01:16:05,480
things would go in there and it would be

1517
01:16:04,040 --> 01:16:07,430
covered by the policy anyway so it's

1518
01:16:05,480 --> 01:16:10,429
already gonna be in the policy I'm gonna

1519
01:16:07,430 --> 01:16:13,190
say that we wrote that in because of a

1520
01:16:10,430 --> 01:16:14,690
partial ignorant a partial will throw in

1521
01:16:13,190 --> 01:16:16,790
urines that we don't really want to go

1522
01:16:14,690 --> 01:16:18,049
into that space but I accept that what

1523
01:16:16,790 --> 01:16:20,060
you're saying is that probably we need

1524
01:16:18,050 --> 01:16:24,530
to be in that space I think the more

1525
01:16:20,060 --> 01:16:26,420
interesting question is what who is

1526
01:16:24,530 --> 01:16:28,009
going to provide that attestation

1527
01:16:26,420 --> 01:16:30,380
because it's caught the enterprise it's

1528
01:16:28,010 --> 01:16:31,670
going to say we're trustworthy it's got

1529
01:16:30,380 --> 01:16:33,590
to be something that goes into the

1530
01:16:31,670 --> 01:16:35,570
certificate that says this key that

1531
01:16:33,590 --> 01:16:37,400
you've just found in this enterprise has

1532
01:16:35,570 --> 01:16:39,290
some something and we reviewed their

1533
01:16:37,400 --> 01:16:42,379
policy bla bla bla they've posted it

1534
01:16:39,290 --> 01:16:45,350
here or whatever okay I don't know who

1535
01:16:42,380 --> 01:16:48,500
that entity is and I think maybe the

1536
01:16:45,350 --> 01:16:52,280
form of that thing would be determined

1537
01:16:48,500 --> 01:16:53,870
by that entity more than us okay yeah do

1538
01:16:52,280 --> 01:16:59,000
you know of such an entity that might

1539
01:16:53,870 --> 01:17:02,780
help us that way okay any other

1540
01:16:59,000 --> 01:17:04,310
questions I don't know that we're

1541
01:17:02,780 --> 01:17:06,349
interested in being adopted at this

1542
01:17:04,310 --> 01:17:08,750
point I think this is is still to

1543
01:17:06,350 --> 01:17:12,610
Neville s2 to know even if it fits in

1544
01:17:08,750 --> 01:17:12,610
this working group but thank you

1545
01:17:35,240 --> 01:17:41,099
all right I'll be quick I don't have

1546
01:17:37,110 --> 01:17:43,460
much for slides and so three of us put

1547
01:17:41,100 --> 01:17:46,380
out a draft for authoritative

1548
01:17:43,460 --> 01:17:50,550
concessional considerations for running

1549
01:17:46,380 --> 01:17:52,200
authoritative dot we put out the draft

1550
01:17:50,550 --> 01:17:55,130
right before the deadline and I think

1551
01:17:52,200 --> 01:17:59,700
we've already published the a1 version

1552
01:17:55,130 --> 01:18:01,020
and then wear it one of the main

1553
01:17:59,700 --> 01:18:03,420
comments that came out of it is we're

1554
01:18:01,020 --> 01:18:05,610
not trying to discuss the comment of the

1555
01:18:03,420 --> 01:18:07,410
merits of running dot to the authority

1556
01:18:05,610 --> 01:18:09,570
we're trying to discuss some of the

1557
01:18:07,410 --> 01:18:11,880
considerations that anyone who may run

1558
01:18:09,570 --> 01:18:14,130
dot on an authoritative server might

1559
01:18:11,880 --> 01:18:16,260
want to think about or we as a group may

1560
01:18:14,130 --> 01:18:17,700
want to try and look into before it

1561
01:18:16,260 --> 01:18:19,190
starts getting wide deployment around

1562
01:18:17,700 --> 01:18:21,900
the world

1563
01:18:19,190 --> 01:18:23,940
so the here's the list of the key topics

1564
01:18:21,900 --> 01:18:29,460
that were that we talked about in the

1565
01:18:23,940 --> 01:18:32,250
draft mostly focusing on things that we

1566
01:18:29,460 --> 01:18:33,630
see is mostly different for someone

1567
01:18:32,250 --> 01:18:35,820
running an authoritative versus of

1568
01:18:33,630 --> 01:18:37,530
recursive where if a recursive goes down

1569
01:18:35,820 --> 01:18:38,849
the end user may choose the secondary

1570
01:18:37,530 --> 01:18:40,679
recursive but if all of your

1571
01:18:38,850 --> 01:18:42,750
authoritative servers go down the

1572
01:18:40,680 --> 01:18:45,080
domains gonna be unresolvable anyway you

1573
01:18:42,750 --> 01:18:48,840
can't pick a new authoritative for it

1574
01:18:45,080 --> 01:18:53,820
and then like system tuning it's TLS

1575
01:18:48,840 --> 01:18:56,190
parameters and monitoring and TLS

1576
01:18:53,820 --> 01:18:57,780
parameters and how you may want to tune

1577
01:18:56,190 --> 01:19:00,389
the system for like resumption and

1578
01:18:57,780 --> 01:19:04,440
renegotiation and how you divide the

1579
01:19:00,390 --> 01:19:07,080
traffic between different systems the

1580
01:19:04,440 --> 01:19:09,599
current status of the draft is we said

1581
01:19:07,080 --> 01:19:11,640
we put out the old one we have a couple

1582
01:19:09,600 --> 01:19:13,010
more items from the list from some of

1583
01:19:11,640 --> 01:19:19,440
the comments and feedback we got already

1584
01:19:13,010 --> 01:19:22,590
we've I pushed a new update to the 1.1

1585
01:19:19,440 --> 01:19:24,599
section of the draft that will try and

1586
01:19:22,590 --> 01:19:25,830
get out in the next couple days and then

1587
01:19:24,600 --> 01:19:27,810
we're gonna we have a couple more things

1588
01:19:25,830 --> 01:19:29,820
to address from the comments we got so

1589
01:19:27,810 --> 01:19:32,340
already but we should be done with that

1590
01:19:29,820 --> 01:19:34,590
fairly soon we're looking for any other

1591
01:19:32,340 --> 01:19:36,870
people that want to comment on it have

1592
01:19:34,590 --> 01:19:41,250
questions and then potentially even

1593
01:19:36,870 --> 01:19:44,849
being adopted by the by deprive that's

1594
01:19:41,250 --> 01:19:47,190
all I yeah I promised him we'd be quick

1595
01:19:44,850 --> 01:19:49,210
that's all I had

1596
01:19:47,190 --> 01:19:50,888
so we do have a couple minutes is

1597
01:19:49,210 --> 01:20:10,059
anybody have any comments for Tim and

1598
01:19:50,889 --> 01:20:12,159
the other offers so I saw I'm not sure

1599
01:20:10,059 --> 01:20:15,730
if I remember correctly but there was a

1600
01:20:12,159 --> 01:20:20,409
mention in the draft to run the TLS on a

1601
01:20:15,730 --> 01:20:22,860
different port can you clarify why about

1602
01:20:20,409 --> 01:20:25,598
what's on a different port running the

1603
01:20:22,860 --> 01:20:32,339
TLS endpoint on a different port on the

1604
01:20:25,599 --> 01:20:38,550
server side than the unencrypted server

1605
01:20:32,340 --> 01:20:42,010
says so by running on 853 rather than 53

1606
01:20:38,550 --> 01:20:45,369
confused sorry okay we we did leave it

1607
01:20:42,010 --> 01:20:46,809
open for one of the major or one of the

1608
01:20:45,369 --> 01:20:50,199
considerations in there is whether or

1609
01:20:46,809 --> 01:20:54,099
not are we trying to be able to figure

1610
01:20:50,199 --> 01:20:55,989
out how to do let the recursive find the

1611
01:20:54,099 --> 01:20:57,909
authoritative server through some sort

1612
01:20:55,989 --> 01:21:00,940
of communication pattern that doesn't

1613
01:20:57,909 --> 01:21:03,308
currently exist where if you're a client

1614
01:21:00,940 --> 01:21:04,839
talking to a recursive either the client

1615
01:21:03,309 --> 01:21:06,219
configured it or its configured in the

1616
01:21:04,840 --> 01:21:07,989
application or something like that where

1617
01:21:06,219 --> 01:21:09,519
there's no current mechanism for the

1618
01:21:07,989 --> 01:21:11,768
recursive to go and find the

1619
01:21:09,519 --> 01:21:14,380
authoritative and one of the things

1620
01:21:11,769 --> 01:21:19,719
there is the port number of 853 is in

1621
01:21:14,380 --> 01:21:21,699
the DNS server TLS RFC but it's not

1622
01:21:19,719 --> 01:21:26,619
mandated to be that it's just suggest I

1623
01:21:21,699 --> 01:21:28,900
try to remember the wording it's well

1624
01:21:26,619 --> 01:21:31,509
this it's a I thought it said it's 853

1625
01:21:28,900 --> 01:21:33,960
unless configure mutually agreed-upon to

1626
01:21:31,510 --> 01:21:33,960
be otherwise

1627
01:21:38,000 --> 01:21:42,630
yeah Carl Henderson this is very silent

1628
01:21:40,469 --> 01:21:43,949
from Verisign so one of the

1629
01:21:42,630 --> 01:21:46,710
considerations that went into that as

1630
01:21:43,949 --> 01:21:49,080
well is maybe downgrade attack

1631
01:21:46,710 --> 01:21:51,719
prevention as well so that's another

1632
01:21:49,080 --> 01:22:05,760
reason why we're considering being able

1633
01:21:51,719 --> 01:22:07,320
to configure different port so we do

1634
01:22:05,760 --> 01:22:09,389
have a couple minutes left if anybody

1635
01:22:07,320 --> 01:22:15,179
has any topics they want to bring up or

1636
01:22:09,389 --> 01:22:17,159
questions I'm certainly not gonna stand

1637
01:22:15,179 --> 01:22:20,219
between you guys and wherever you want

1638
01:22:17,159 --> 01:22:22,320
to be so thanks everybody read the

1639
01:22:20,219 --> 01:22:24,300
documents that need to be reviewed and

1640
01:22:22,320 --> 01:22:38,940
we will see you next time

1641
01:22:24,300 --> 01:22:40,290
thank you very much or anybody who

1642
01:22:38,940 --> 01:22:44,120
didn't sign the blue sheets coming up

1643
01:22:40,290 --> 01:22:44,120
front and side the blue sheets

1644
01:22:49,500 --> 01:22:52,529
[Music]

