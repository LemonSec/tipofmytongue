1
00:00:12,559 --> 00:00:19,349
we're just testing the mic but we can

2
00:00:14,820 --> 00:00:23,039
start anyway so welcome to idea Friday

3
00:00:19,349 --> 00:00:26,250
morning met Reggie session I'm Mia

4
00:00:23,039 --> 00:00:29,160
criminal and I'm Dave Wonka

5
00:00:26,250 --> 00:00:33,660
I thought marrying you that but other

6
00:00:29,160 --> 00:00:37,410
people might not know yeah so this is an

7
00:00:33,660 --> 00:00:39,120
IIT of session we also have basically a

8
00:00:37,410 --> 00:00:41,459
note well which is kind of aligned with

9
00:00:39,120 --> 00:00:44,070
the ietf note well but slightly

10
00:00:41,460 --> 00:00:48,289
different terms but I guess you've seen

11
00:00:44,070 --> 00:00:51,930
that what this note well is actually not

12
00:00:48,289 --> 00:00:53,430
pointing at is the code of conduct and

13
00:00:51,930 --> 00:00:57,059
harassment policy but it's also

14
00:00:53,430 --> 00:01:01,800
important things to note so please be

15
00:00:57,059 --> 00:01:03,510
aware of all these things this is the

16
00:01:01,800 --> 00:01:06,050
user site which is in there for your

17
00:01:03,510 --> 00:01:09,990
convenience with our mailing list and

18
00:01:06,050 --> 00:01:12,630
and also the jabber room and the link to

19
00:01:09,990 --> 00:01:13,048
this session may need to look it up

20
00:01:12,630 --> 00:01:19,560
later

21
00:01:13,049 --> 00:01:21,030
and this is our today's agenda just a

22
00:01:19,560 --> 00:01:23,460
couple things I wanted to mention about

23
00:01:21,030 --> 00:01:25,049
the status of the group and things that

24
00:01:23,460 --> 00:01:26,640
are really healthy and mapper G as well

25
00:01:25,049 --> 00:01:28,650
you know we have a lot of people we

26
00:01:26,640 --> 00:01:29,939
always have a packed agenda as we do

27
00:01:28,650 --> 00:01:31,590
today and we'll work our way through

28
00:01:29,939 --> 00:01:33,360
here one of the things I wanted to

29
00:01:31,590 --> 00:01:36,600
mention is the last couple meetings I've

30
00:01:33,360 --> 00:01:39,240
went to PRG the privacy enhancement and

31
00:01:36,600 --> 00:01:40,860
assessment research group that's

32
00:01:39,240 --> 00:01:43,020
measurement related as well and they're

33
00:01:40,860 --> 00:01:44,520
doing some interesting things so look

34
00:01:43,020 --> 00:01:45,720
for opportunities I think to sync up

35
00:01:44,520 --> 00:01:46,890
with what they're doing and watch what

36
00:01:45,720 --> 00:01:51,240
they're doing especially when it's about

37
00:01:46,890 --> 00:01:55,890
privacy with measurements the the next

38
00:01:51,240 --> 00:01:57,030
thing let's go the next slide so this is

39
00:01:55,890 --> 00:02:00,030
the way I was greeted when I got my

40
00:01:57,030 --> 00:02:02,100
badge this week none Blanca and it may

41
00:02:00,030 --> 00:02:05,939
be they are anticipating that I won't be

42
00:02:02,100 --> 00:02:07,439
there at the next in Singapore so so we

43
00:02:05,939 --> 00:02:09,570
have one Blanca this time in non-pom

44
00:02:07,439 --> 00:02:11,549
Connect next time can you go to the next

45
00:02:09,570 --> 00:02:13,470
slide so Mary and I were going to call

46
00:02:11,549 --> 00:02:15,150
for an alternate or additional map our

47
00:02:13,470 --> 00:02:15,870
gt-r chair we've been running for about

48
00:02:15,150 --> 00:02:17,630
four years

49
00:02:15,870 --> 00:02:19,040
I'm not meaning to step

50
00:02:17,630 --> 00:02:20,870
from it but we could certainly use help

51
00:02:19,040 --> 00:02:22,429
with another person when we're covering

52
00:02:20,870 --> 00:02:25,940
meetings in different parts of the globe

53
00:02:22,430 --> 00:02:28,070
so if you're planning to attend IHF 106

54
00:02:25,940 --> 00:02:30,230
in Singapore and are interested to work

55
00:02:28,070 --> 00:02:33,980
with the two of us on preparing the

56
00:02:30,230 --> 00:02:37,489
agenda and and vetting and reviewing the

57
00:02:33,980 --> 00:02:39,890
candidate work there let us know we're

58
00:02:37,490 --> 00:02:41,990
especially looking for someone who is in

59
00:02:39,890 --> 00:02:43,399
academia not because it's a credential

60
00:02:41,990 --> 00:02:44,690
that you need just because we're both in

61
00:02:43,400 --> 00:02:47,600
industry right now and you might have

62
00:02:44,690 --> 00:02:50,630
some contacts that we don't have oranges

63
00:02:47,600 --> 00:02:52,870
upon so it's not a requirement but but

64
00:02:50,630 --> 00:02:55,400
if you have that you might like to join

65
00:02:52,870 --> 00:02:57,830
and then like I said you'd be able to

66
00:02:55,400 --> 00:02:59,840
curate the upcoming program which is

67
00:02:57,830 --> 00:03:01,700
kind of fun and it's a little bit of

68
00:02:59,840 --> 00:03:04,490
work about like Miria this time for

69
00:03:01,700 --> 00:03:07,519
instance did a lot of legwork contacting

70
00:03:04,490 --> 00:03:09,290
people to get to get the program filled

71
00:03:07,520 --> 00:03:11,840
out so feel free to write us about that

72
00:03:09,290 --> 00:03:13,459
I think is that the last thing we had

73
00:03:11,840 --> 00:03:17,720
there yeah that's the last of that so

74
00:03:13,460 --> 00:03:21,350
our our first presentation is going to

75
00:03:17,720 --> 00:03:23,810
be is going to be a remote because Yoder

76
00:03:21,350 --> 00:03:26,960
song is in New Zealand and it's very

77
00:03:23,810 --> 00:03:27,500
late there so we're gonna let them go

78
00:03:26,960 --> 00:03:31,820
first

79
00:03:27,500 --> 00:03:34,730
and let's see your are you in the I see

80
00:03:31,820 --> 00:03:42,950
it in Java are minute sorry in the

81
00:03:34,730 --> 00:03:50,390
Medeco huh hello hi we can hear you fine

82
00:03:42,950 --> 00:03:54,230
we're you're ready to go hi everybody my

83
00:03:50,390 --> 00:03:56,059
name is Yoda so I will be presenting the

84
00:03:54,230 --> 00:03:59,590
paper understanding evolution and

85
00:03:56,060 --> 00:04:02,510
adoption of up level domains in DNS sick

86
00:03:59,590 --> 00:04:05,270
this paper was recently published in the

87
00:04:02,510 --> 00:04:08,060
2019 I Triple E imminent measurements in

88
00:04:05,270 --> 00:04:10,490
the networking conference and other

89
00:04:08,060 --> 00:04:13,160
co-authors of this paper are Surya

90
00:04:10,490 --> 00:04:17,290
Ramachandran and dr. Anika mohanty both

91
00:04:13,160 --> 00:04:21,680
also from the University of offered an

92
00:04:17,290 --> 00:04:23,690
excitement so we focus from the

93
00:04:21,680 --> 00:04:26,150
top-level domain and speaking about

94
00:04:23,690 --> 00:04:29,000
domain in the das hierarchy and we also

95
00:04:26,150 --> 00:04:30,440
provide a brief overview of the ASIC

96
00:04:29,000 --> 00:04:32,389
implementation in New Zealand

97
00:04:30,440 --> 00:04:35,060
specifically

98
00:04:32,389 --> 00:04:36,710
generic top-level domain or ggod is one

99
00:04:35,060 --> 00:04:40,040
that does not represent a country for

100
00:04:36,710 --> 00:04:43,070
example calm organi and a key motivation

101
00:04:40,040 --> 00:04:45,440
for this study was the new GT program

102
00:04:43,070 --> 00:04:47,300
introduced by egg-cam which introduced

103
00:04:45,440 --> 00:04:53,540
over a thousand theories through the

104
00:04:47,300 --> 00:04:55,580
internet since 2013 next likely so

105
00:04:53,540 --> 00:04:57,260
that's a timeline of the generic

106
00:04:55,580 --> 00:05:00,169
top-level domains and when they were

107
00:04:57,260 --> 00:05:02,150
introduced so in this presentation we

108
00:05:00,169 --> 00:05:04,310
will classify generic top-level domains

109
00:05:02,150 --> 00:05:06,979
into three groups owed for the ones

110
00:05:04,310 --> 00:05:12,740
created in the 1980s early for those

111
00:05:06,979 --> 00:05:14,810
created between 2001 and 2012 in a new

112
00:05:12,740 --> 00:05:16,580
generic top-level domain for our

113
00:05:14,810 --> 00:05:19,250
thousands of new generic top-level

114
00:05:16,580 --> 00:05:21,289
domains introduced since noon we will

115
00:05:19,250 --> 00:05:32,270
also look at country code top-level

116
00:05:21,289 --> 00:05:35,360
domains OCC Tod later on next slide so

117
00:05:32,270 --> 00:05:38,870
in terms of related work

118
00:05:35,360 --> 00:05:41,150
let's paper exchange upon the 2015 paper

119
00:05:38,870 --> 00:05:43,610
in analyzing top-level domain and

120
00:05:41,150 --> 00:05:45,969
second-level domain adoption we also

121
00:05:43,610 --> 00:05:49,070
later on briefly look at being s

122
00:05:45,970 --> 00:05:53,630
implementations specifically in context

123
00:05:49,070 --> 00:06:01,820
of the New Zealand public domain NZ next

124
00:05:53,630 --> 00:06:04,039
time for data collection we used two

125
00:06:01,820 --> 00:06:06,949
different sources for our data so we

126
00:06:04,039 --> 00:06:09,830
collected packet traces from the campus

127
00:06:06,949 --> 00:06:11,930
network of University of Auckland which

128
00:06:09,830 --> 00:06:15,710
is the largest university in New Zealand

129
00:06:11,930 --> 00:06:17,750
was over 40,000 users in addition we

130
00:06:15,710 --> 00:06:21,169
also collected metadata for an internet

131
00:06:17,750 --> 00:06:23,240
NZ the manager of NZ New Zealand

132
00:06:21,169 --> 00:06:25,639
national top-level domain for three

133
00:06:23,240 --> 00:06:27,710
national level data sets meaning

134
00:06:25,639 --> 00:06:29,930
classified the generic top-level domains

135
00:06:27,710 --> 00:06:32,150
into the three categories old early and

136
00:06:29,930 --> 00:06:35,030
new based on the time of introduction

137
00:06:32,150 --> 00:06:39,109
and finally we carried out pub level

138
00:06:35,030 --> 00:06:42,830
domain and DNS sick analysis in it looks

139
00:06:39,110 --> 00:06:45,200
like so moving on to the results next

140
00:06:42,830 --> 00:06:49,669
slide for trace over

141
00:06:45,200 --> 00:06:53,810
you we found the number of DNS queries

142
00:06:49,670 --> 00:06:56,090
to grow between 2013 and 2018 was the

143
00:06:53,810 --> 00:06:58,790
proportion of requests to early G

144
00:06:56,090 --> 00:07:01,880
theories new G theories and country code

145
00:06:58,790 --> 00:07:03,680
top-level domains are increasing while

146
00:07:01,880 --> 00:07:05,750
there has been a lot of growth in the

147
00:07:03,680 --> 00:07:08,480
new generic top-level domains compared

148
00:07:05,750 --> 00:07:11,210
to 2013 they still only account for

149
00:07:08,480 --> 00:07:17,420
around 0.3 percent of total requests in

150
00:07:11,210 --> 00:07:20,770
the local campus network next time in

151
00:07:17,420 --> 00:07:23,930
terms of the top 10 most queried

152
00:07:20,770 --> 00:07:26,240
top-level domains we find some common

153
00:07:23,930 --> 00:07:29,420
generic top-level domains that calm

154
00:07:26,240 --> 00:07:32,630
donate door and in terms of low country

155
00:07:29,420 --> 00:07:34,850
code top-level domains the NZ not a UN

156
00:07:32,630 --> 00:07:37,250
dot cm for New Zealand Australia and

157
00:07:34,850 --> 00:07:40,880
China or regularly appeared in at opt in

158
00:07:37,250 --> 00:07:42,800
every year there were no new general

159
00:07:40,880 --> 00:07:46,310
public domains at all in the top 10 in

160
00:07:42,800 --> 00:07:48,500
any of the years and for early early

161
00:07:46,310 --> 00:07:54,250
generic top-level domains the only one

162
00:07:48,500 --> 00:08:01,430
to appear was not info in 2014 and 2018

163
00:07:54,250 --> 00:08:04,490
next time so for unusual top-level

164
00:08:01,430 --> 00:08:07,970
domain usage we notice the country code

165
00:08:04,490 --> 00:08:11,960
top-level domain for Slovakia or SK 2

166
00:08:07,970 --> 00:08:14,960
ranked 4th in both 2017 and 2018 we

167
00:08:11,960 --> 00:08:17,330
found over 99% of these DNS requests to

168
00:08:14,960 --> 00:08:19,219
actually be machine generated as part of

169
00:08:17,330 --> 00:08:22,520
antivirus software used by the

170
00:08:19,220 --> 00:08:24,980
University so different from the fully

171
00:08:22,520 --> 00:08:29,150
qualified domain names of usual websites

172
00:08:24,980 --> 00:08:31,340
such as say wo comm we find a fully

173
00:08:29,150 --> 00:08:34,010
qualified domain names of these machine

174
00:08:31,340 --> 00:08:35,870
generated requests to be much longer and

175
00:08:34,010 --> 00:08:39,799
containing seemingly random combination

176
00:08:35,870 --> 00:08:41,630
of alphanumeric digits so while there

177
00:08:39,799 --> 00:08:45,589
was rapid growth in the number of

178
00:08:41,630 --> 00:08:47,030
queries to Slovak and SK TOB we found

179
00:08:45,590 --> 00:08:49,250
that this ghost was not actually driven

180
00:08:47,030 --> 00:08:50,560
by human activity but rather just the

181
00:08:49,250 --> 00:08:55,630
machine generated

182
00:08:50,560 --> 00:08:55,630
DNS requests next

183
00:08:56,120 --> 00:09:00,680
we also found in terms of unusual

184
00:08:58,459 --> 00:09:03,018
clearly usages that the country called

185
00:09:00,680 --> 00:09:05,899
pop like the country code top-level

186
00:09:03,019 --> 00:09:08,360
domains which were not restricted to

187
00:09:05,899 --> 00:09:10,490
only the citizens of that region may be

188
00:09:08,360 --> 00:09:11,120
often used as generic top-level domains

189
00:09:10,490 --> 00:09:15,019
instead

190
00:09:11,120 --> 00:09:17,360
for example the thought IO country code

191
00:09:15,019 --> 00:09:19,370
top-level domain for the British Indian

192
00:09:17,360 --> 00:09:24,009
Ocean Territory was topped here most

193
00:09:19,370 --> 00:09:26,959
most query in both 2017 and 2018 and

194
00:09:24,009 --> 00:09:29,300
this was not due to interest in the

195
00:09:26,959 --> 00:09:31,219
region itself but rather because the

196
00:09:29,300 --> 00:09:34,120
top-level domain is quite popular among

197
00:09:31,220 --> 00:09:37,850
startups and open source projects online

198
00:09:34,120 --> 00:09:39,889
so the IO and several other similar

199
00:09:37,850 --> 00:09:41,689
country code top-level domains they are

200
00:09:39,889 --> 00:09:43,939
now heavily used as general public

201
00:09:41,689 --> 00:09:46,998
domains instead are now classified by

202
00:09:43,939 --> 00:09:50,779
Google as GCC Tod or generic country

203
00:09:46,999 --> 00:09:53,990
code public or domains similarly we also

204
00:09:50,779 --> 00:09:56,389
found that you the usage can be used by

205
00:09:53,990 --> 00:09:58,399
domain hack or concatenating sections of

206
00:09:56,389 --> 00:10:01,069
the fully qualified domain name to form

207
00:09:58,399 --> 00:10:03,980
a different name so for example as is

208
00:10:01,069 --> 00:10:07,849
commonly seen in youtube link shortener

209
00:10:03,980 --> 00:10:10,699
YouTube PE which uses the top PE country

210
00:10:07,850 --> 00:10:13,339
code top-level domain for Belgium so

211
00:10:10,699 --> 00:10:15,290
what may now be a country code top-level

212
00:10:13,339 --> 00:10:17,120
domain may be more accurately described

213
00:10:15,290 --> 00:10:19,759
as a generic top-level domain in the

214
00:10:17,120 --> 00:10:22,040
future so the top level domain

215
00:10:19,759 --> 00:10:24,079
classifications we identified earlier

216
00:10:22,040 --> 00:10:32,660
will need to be regularly updated to

217
00:10:24,079 --> 00:10:36,859
reflect that changes next time in terms

218
00:10:32,660 --> 00:10:38,929
of Tod grows from 2013 to 2018 we find a

219
00:10:36,860 --> 00:10:41,389
number of queries to new generic

220
00:10:38,929 --> 00:10:44,089
top-level domains to far outpace the old

221
00:10:41,389 --> 00:10:46,220
generic top-level domains and there was

222
00:10:44,089 --> 00:10:48,699
also some spillover effect into the

223
00:10:46,220 --> 00:10:51,139
country code top-level domains where the

224
00:10:48,699 --> 00:10:52,790
generic top-level generic

225
00:10:51,139 --> 00:10:55,670
country code top-level domains as

226
00:10:52,790 --> 00:10:57,980
classified by Google grew at a much

227
00:10:55,670 --> 00:11:04,459
faster rate than on generic country code

228
00:10:57,980 --> 00:11:07,670
top-level domains next slide for these

229
00:11:04,459 --> 00:11:09,489
ranked frequency plots the top one is

230
00:11:07,670 --> 00:11:12,849
fall 2013

231
00:11:09,490 --> 00:11:16,089
and the bottom is for 2018 so between

232
00:11:12,850 --> 00:11:17,500
these weekend most notably see growth in

233
00:11:16,089 --> 00:11:21,370
the number of new generic top-level

234
00:11:17,500 --> 00:11:25,300
domains we can also observe there there

235
00:11:21,370 --> 00:11:27,550
was this zips though in old and early

236
00:11:25,300 --> 00:11:29,469
junior top-level domains and let learn

237
00:11:27,550 --> 00:11:31,719
new Jeff top-level domains are much less

238
00:11:29,470 --> 00:11:40,300
concentrated as shown in the flatness

239
00:11:31,720 --> 00:11:42,910
slope in the graphs next time in

240
00:11:40,300 --> 00:11:45,250
addition to top-level domains we also

241
00:11:42,910 --> 00:11:48,969
looked at second-level domains so in

242
00:11:45,250 --> 00:11:50,980
this example here the dock hole for

243
00:11:48,970 --> 00:11:52,480
company before that ends it New Zealand

244
00:11:50,980 --> 00:11:55,899
country code top-level domain it's the

245
00:11:52,480 --> 00:11:58,600
second-level domain so similar to the

246
00:11:55,899 --> 00:12:00,310
new gTLD program by I came the second

247
00:11:58,600 --> 00:12:03,430
level domains in New Zealand were open

248
00:12:00,310 --> 00:12:05,290
to public registration in 2014 so this

249
00:12:03,430 --> 00:12:08,170
means that instead of choosing from one

250
00:12:05,290 --> 00:12:09,969
of 15 predefined second-level domains a

251
00:12:08,170 --> 00:12:12,969
company can theoretically use any name

252
00:12:09,970 --> 00:12:14,829
as the second-level domain so the

253
00:12:12,970 --> 00:12:17,170
second-level domains account for over

254
00:12:14,829 --> 00:12:20,319
twenty percent of all new domains but

255
00:12:17,170 --> 00:12:25,949
only account for 0.6% after a total

256
00:12:20,320 --> 00:12:25,950
requests in the local network next time

257
00:12:27,959 --> 00:12:34,329
so right so one of the potential

258
00:12:31,959 --> 00:12:35,949
problems from opening both general

259
00:12:34,329 --> 00:12:38,709
top-level domain and second level domain

260
00:12:35,950 --> 00:12:40,450
registration to the public is that there

261
00:12:38,709 --> 00:12:43,779
could potentially be overlaps between

262
00:12:40,450 --> 00:12:45,730
the tree for example QE is a term used

263
00:12:43,779 --> 00:12:47,829
to describe New Zealanders and currently

264
00:12:45,730 --> 00:12:50,320
there is both a doc Kiwi top-level

265
00:12:47,829 --> 00:12:52,510
domain as well as a doc Kiwi the NZ

266
00:12:50,320 --> 00:12:55,329
second-level domain and the New Zealand

267
00:12:52,510 --> 00:12:57,490
in the top-level domain we found an

268
00:12:55,329 --> 00:12:59,529
unusually high number of Kirito

269
00:12:57,490 --> 00:13:01,930
NZ domains registered shortly right

270
00:12:59,529 --> 00:13:04,180
after their release as shown a spike in

271
00:13:01,930 --> 00:13:05,859
a graph which we think could be due to

272
00:13:04,180 --> 00:13:07,779
cyprus for him from those who already

273
00:13:05,860 --> 00:13:09,579
have stock kiri domains and wanted to

274
00:13:07,779 --> 00:13:17,260
avoid others registering for similar

275
00:13:09,579 --> 00:13:20,319
domains today all next time so for the

276
00:13:17,260 --> 00:13:23,230
SI being a sick overview we found a

277
00:13:20,320 --> 00:13:25,750
spike in the DNS SEC implementation in

278
00:13:23,230 --> 00:13:28,750
only 16 likely from cloud Freya's

279
00:13:25,750 --> 00:13:31,000
introduction of universal dns sick we

280
00:13:28,750 --> 00:13:32,860
also found that since noon and secured

281
00:13:31,000 --> 00:13:35,860
that equations are slowly growing again

282
00:13:32,860 --> 00:13:37,600
and now while the proportion of signed

283
00:13:35,860 --> 00:13:40,510
domains with expired signatures has

284
00:13:37,600 --> 00:13:42,790
decreased quite significantly since the

285
00:13:40,510 --> 00:13:44,920
invaded district holes still remain high

286
00:13:42,790 --> 00:13:47,069
with little improvement over the last

287
00:13:44,920 --> 00:13:55,949
few years

288
00:13:47,070 --> 00:13:55,950
next slide so fulla takeaways next time

289
00:13:56,850 --> 00:14:01,810
the takeaways for the domain names so we

290
00:13:59,680 --> 00:14:03,699
find nearly introduced your top level

291
00:14:01,810 --> 00:14:06,939
domains and not ends it second-level

292
00:14:03,700 --> 00:14:10,390
domains to grow in popularity but still

293
00:14:06,940 --> 00:14:12,280
not very heavily used yet advantage of

294
00:14:10,390 --> 00:14:15,160
new general public or domains is that

295
00:14:12,280 --> 00:14:18,220
the cause is this publicly concentrated

296
00:14:15,160 --> 00:14:19,510
in the most popular domains cyber cyber

297
00:14:18,220 --> 00:14:21,430
squatting on a large skillet

298
00:14:19,510 --> 00:14:24,880
theoretically that's feasible compared

299
00:14:21,430 --> 00:14:28,239
to cyber squatting on the older generic

300
00:14:24,880 --> 00:14:30,550
top-level domains however a potential

301
00:14:28,240 --> 00:14:32,560
problem we found is the overlap between

302
00:14:30,550 --> 00:14:34,150
similar domain names and the top-level

303
00:14:32,560 --> 00:14:36,369
domain at second-level domain level

304
00:14:34,150 --> 00:14:38,980
which will require further coordination

305
00:14:36,370 --> 00:14:45,880
in the application stage to prevent this

306
00:14:38,980 --> 00:14:48,970
from happening next time so for Dina is

307
00:14:45,880 --> 00:14:51,520
sick we found the implementation in New

308
00:14:48,970 --> 00:14:54,940
Zealand is growing but chain of trust is

309
00:14:51,520 --> 00:14:57,340
incomplete main problem being that the

310
00:14:54,940 --> 00:14:59,140
incorrect Deus trickles without which it

311
00:14:57,340 --> 00:15:02,740
is not possible to authenticate the

312
00:14:59,140 --> 00:15:05,830
public TS key records in the chasm we

313
00:15:02,740 --> 00:15:07,990
found an improvement in reduction of

314
00:15:05,830 --> 00:15:10,180
expired signatures as a proportion of

315
00:15:07,990 --> 00:15:14,440
the total signed domains which we see as

316
00:15:10,180 --> 00:15:20,859
a growth for a basic implementation in

317
00:15:14,440 --> 00:15:23,110
New Zealand next time so finally the

318
00:15:20,860 --> 00:15:25,630
concluding remarks so in this paper we

319
00:15:23,110 --> 00:15:27,460
presented a longitudinal analysis on the

320
00:15:25,630 --> 00:15:30,280
adoption of new generic top-level

321
00:15:27,460 --> 00:15:32,860
domains and the deployment of DNS sick

322
00:15:30,280 --> 00:15:34,720
in new zealand new generic top-level

323
00:15:32,860 --> 00:15:36,480
domains are growing in popularity but

324
00:15:34,720 --> 00:15:38,399
still not very popular yet

325
00:15:36,480 --> 00:15:40,589
we believe there needs to be more work

326
00:15:38,399 --> 00:15:43,199
done on exploring the top level domain

327
00:15:40,589 --> 00:15:44,610
topic further before the second round of

328
00:15:43,199 --> 00:15:49,130
new generic top-level domain

329
00:15:44,610 --> 00:15:49,130
applications in the future thank you

330
00:15:51,139 --> 00:15:57,779
thanks eurozone so we've got time for

331
00:15:55,290 --> 00:16:00,149
Q&A and I see George's up at the mic

332
00:15:57,779 --> 00:16:03,120
over here so let's go there hello hello

333
00:16:00,149 --> 00:16:08,639
George Michael from a pinna cue can hear

334
00:16:03,120 --> 00:16:15,589
us yes so I think a study like this

335
00:16:08,639 --> 00:16:19,230
needs to explore the concept of D G a or

336
00:16:15,589 --> 00:16:22,170
generative domain names hash names which

337
00:16:19,230 --> 00:16:27,209
are a mechanism for command and control

338
00:16:22,170 --> 00:16:30,959
in botnets and so aspects of behavior in

339
00:16:27,209 --> 00:16:34,319
the new gTLDs relate strongly to

340
00:16:30,959 --> 00:16:39,619
compliance checks on how you justify

341
00:16:34,320 --> 00:16:40,880
your need for a name the old gTLDs and

342
00:16:39,620 --> 00:16:44,550
ccTLDs

343
00:16:40,880 --> 00:16:49,290
tend to be harder places to get a name

344
00:16:44,550 --> 00:16:52,469
and the newer younger TLDs often are

345
00:16:49,290 --> 00:16:55,860
attractive targets for bad actors you

346
00:16:52,470 --> 00:16:59,010
talked about ESET using hash names and

347
00:16:55,860 --> 00:17:00,930
machine generated names for good purpose

348
00:16:59,010 --> 00:17:03,060
but I think you have to address the

349
00:17:00,930 --> 00:17:06,839
question of the use of hash names for

350
00:17:03,060 --> 00:17:10,980
bad purpose the second thing is that

351
00:17:06,839 --> 00:17:15,030
many of the new TLDs have no intention

352
00:17:10,980 --> 00:17:19,980
of offering delegation services to wider

353
00:17:15,030 --> 00:17:23,579
public industry dot iBM is not an open

354
00:17:19,980 --> 00:17:26,189
domain it is a private closed domain and

355
00:17:23,579 --> 00:17:28,860
its growth will be a function of IBM's

356
00:17:26,189 --> 00:17:31,260
mission it's not a function of a market

357
00:17:28,860 --> 00:17:35,189
process it's a function of their need

358
00:17:31,260 --> 00:17:39,480
for labels under IBM the third and last

359
00:17:35,190 --> 00:17:42,120
comment is that you typify cctlds

360
00:17:39,480 --> 00:17:45,179
as if there was some normative behavior

361
00:17:42,120 --> 00:17:48,600
that is prescribed by ICANN but the

362
00:17:45,179 --> 00:17:50,070
quality of a ccTLD is that it reflects

363
00:17:48,600 --> 00:17:52,889
an independent

364
00:17:50,070 --> 00:17:55,110
economical nation-state that in effect

365
00:17:52,890 --> 00:17:59,030
is a UN chartered entity that has

366
00:17:55,110 --> 00:18:02,070
standing as government it's not about a

367
00:17:59,030 --> 00:18:04,110
contract binding or a belief of meaning

368
00:18:02,070 --> 00:18:08,040
it's about the fact that they have an

369
00:18:04,110 --> 00:18:11,070
army and so they are only different in

370
00:18:08,040 --> 00:18:13,920
the quality that they own tanks and not

371
00:18:11,070 --> 00:18:16,290
specifically that any legalisms govern

372
00:18:13,920 --> 00:18:18,300
what they do but your paper was very

373
00:18:16,290 --> 00:18:22,129
interesting and thank you for presenting

374
00:18:18,300 --> 00:18:22,129
it thank you

375
00:18:23,490 --> 00:18:28,860
Tim Tim welcome back actually quickly

376
00:18:27,330 --> 00:18:30,480
ask you to step over to the other mic

377
00:18:28,860 --> 00:18:39,449
because that's where the video is

378
00:18:30,480 --> 00:18:42,270
currently okay hi now I'm on video so

379
00:18:39,450 --> 00:18:44,190
thanks thanks for your talk what I would

380
00:18:42,270 --> 00:18:46,470
be interested in and maybe you can a

381
00:18:44,190 --> 00:18:49,770
little a little bit elaborate on that is

382
00:18:46,470 --> 00:18:51,750
where did you did that get the data or

383
00:18:49,770 --> 00:18:54,240
which kind of data did you have for your

384
00:18:51,750 --> 00:18:57,480
analysis so you talked about you had a

385
00:18:54,240 --> 00:19:00,170
collaboration with the top-level domain

386
00:18:57,480 --> 00:19:03,480
registry but what did they gave you and

387
00:19:00,170 --> 00:19:07,670
how did which which kind of measurements

388
00:19:03,480 --> 00:19:14,550
or analysis did you do doing that data

389
00:19:07,670 --> 00:19:16,260
so know what's in this so they were in

390
00:19:14,550 --> 00:19:19,260
the presentation that was specifically

391
00:19:16,260 --> 00:19:22,590
the DNS SEC overview graph as well as

392
00:19:19,260 --> 00:19:27,330
the second-level domains created over

393
00:19:22,590 --> 00:19:29,669
time for Kirito ends it's like okay

394
00:19:27,330 --> 00:19:33,030
you've got like these numbers from them

395
00:19:29,670 --> 00:19:34,590
or yet like I suppose you didn't get any

396
00:19:33,030 --> 00:19:44,100
zone files or something like this way

397
00:19:34,590 --> 00:19:46,500
you did measurement okay and as the last

398
00:19:44,100 --> 00:19:48,780
remark I just wanted to drop the ripe

399
00:19:46,500 --> 00:19:52,050
Atlas Project if you want to do again as

400
00:19:48,780 --> 00:19:53,730
like measurement stuff you can also do

401
00:19:52,050 --> 00:19:56,220
like any kind of DNS records they're

402
00:19:53,730 --> 00:19:57,870
also limited to direct geographical

403
00:19:56,220 --> 00:19:59,610
regions or something like this that

404
00:19:57,870 --> 00:20:03,228
might be interesting for future research

405
00:19:59,610 --> 00:20:05,728
Thanks thank you

406
00:20:03,229 --> 00:20:09,089
now this is a lush pizza from the

407
00:20:05,729 --> 00:20:11,669
Swedish in the registry first I want to

408
00:20:09,089 --> 00:20:14,729
say to George we are not a government

409
00:20:11,669 --> 00:20:17,009
agency we never have been

410
00:20:14,729 --> 00:20:19,649
you never will be the Swedish government

411
00:20:17,009 --> 00:20:22,949
has not been involved in the running of

412
00:20:19,649 --> 00:20:32,579
the dot se registry and for the record

413
00:20:22,949 --> 00:20:36,239
we don't own tags so it CCTA these are

414
00:20:32,579 --> 00:20:39,629
really very wrong over the map so but

415
00:20:36,239 --> 00:20:42,839
back to the topic you said that there is

416
00:20:39,629 --> 00:20:45,718
a lot of domains more domains signing

417
00:20:42,839 --> 00:20:49,829
the NSA then there is domains of sending

418
00:20:45,719 --> 00:20:53,569
India's records and in that I would like

419
00:20:49,829 --> 00:20:57,928
to know do these newly signed domains

420
00:20:53,569 --> 00:20:59,639
support the CD s CDNs key because that

421
00:20:57,929 --> 00:21:03,569
is then something that registries could

422
00:20:59,639 --> 00:21:08,539
actually use to foster the adoption of

423
00:21:03,569 --> 00:21:11,489
the NSA further metadata we were

424
00:21:08,539 --> 00:21:14,789
available I don't think this information

425
00:21:11,489 --> 00:21:16,699
was available for us to see so I can't

426
00:21:14,789 --> 00:21:22,519
comment on that

427
00:21:16,699 --> 00:21:27,959
thank you thank you Ben Schwartz Google

428
00:21:22,519 --> 00:21:31,409
you mentioned that 10% of DS records you

429
00:21:27,959 --> 00:21:33,749
you saw were invalid you clarify what

430
00:21:31,409 --> 00:21:34,709
you what you mean by invalid here so for

431
00:21:33,749 --> 00:21:36,959
example are you saying that those

432
00:21:34,709 --> 00:21:39,209
domains if I tried to resolve them

433
00:21:36,959 --> 00:21:45,079
through a validating recursive would

434
00:21:39,209 --> 00:21:49,099
fail with surveil I believe it's the

435
00:21:45,079 --> 00:21:55,559
recall don't match with the hash of

436
00:21:49,099 --> 00:21:59,329
child child the ASCII records but I'm

437
00:21:55,559 --> 00:22:03,119
not entirely sure on that okay thank you

438
00:21:59,329 --> 00:22:08,999
thank you Cosmo could you enough room

439
00:22:03,119 --> 00:22:12,119
Jake could you could you speak up to the

440
00:22:08,999 --> 00:22:16,370
mic Ilocos Sur Cosmo could you honor

441
00:22:12,119 --> 00:22:20,449
whom JP arias about

442
00:22:16,370 --> 00:22:24,439
top ten mostly low tier de Graaff I get

443
00:22:20,450 --> 00:22:27,350
a Sameera I know I see you by using loo

444
00:22:24,440 --> 00:22:34,610
talks about data under which data do you

445
00:22:27,350 --> 00:22:38,899
use the most queries will based on local

446
00:22:34,610 --> 00:22:45,020
campus network local the campus network

447
00:22:38,900 --> 00:22:49,070
we okay I see thank you and if I could

448
00:22:45,020 --> 00:22:51,529
ask one last question your song the you

449
00:22:49,070 --> 00:22:52,970
mentioned in your takeaways the problem

450
00:22:51,529 --> 00:22:57,080
of the overlap for instance the doc

451
00:22:52,970 --> 00:22:59,299
heated at TVNZ I was just curious how

452
00:22:57,080 --> 00:23:01,158
effect how effective can one be it at

453
00:22:59,299 --> 00:23:03,440
identifying that those are essentially

454
00:23:01,159 --> 00:23:05,270
clones or what are the methods that you

455
00:23:03,440 --> 00:23:06,950
use or you can imagine we can use to

456
00:23:05,270 --> 00:23:08,690
determine that are there essentially

457
00:23:06,950 --> 00:23:09,919
aliases do you have to do active

458
00:23:08,690 --> 00:23:14,649
measurements or can you determine it

459
00:23:09,919 --> 00:23:19,580
passively from from the registrations we

460
00:23:14,649 --> 00:23:21,620
actually didn't look specifically into

461
00:23:19,580 --> 00:23:23,980
the domains that appear in tough human

462
00:23:21,620 --> 00:23:26,209
doc here we go ends it but I think that

463
00:23:23,980 --> 00:23:28,539
we can look into that further in the

464
00:23:26,210 --> 00:23:28,539
future

465
00:23:29,080 --> 00:23:33,080
alright um well have a good evening

466
00:23:31,610 --> 00:23:35,449
thanks for staying up late and

467
00:23:33,080 --> 00:23:42,260
presenting this work to us and let's a

468
00:23:35,450 --> 00:23:44,770
round of applause for Tommy Tommy we're

469
00:23:42,260 --> 00:23:44,770
ready for you

470
00:23:47,670 --> 00:23:51,029
[Music]

471
00:23:53,739 --> 00:23:58,909
thank you so Tommy's coming back to

472
00:23:57,139 --> 00:24:03,559
update us I think for the third time

473
00:23:58,909 --> 00:24:04,849
maybe on yes if this is hi I'm Tony

474
00:24:03,559 --> 00:24:08,899
Polly and I'm gonna be sharing some

475
00:24:04,849 --> 00:24:11,299
client measurements that we've taken I'm

476
00:24:08,899 --> 00:24:14,599
at Apple and so this is information that

477
00:24:11,299 --> 00:24:17,239
we get from looking at sampling from iOS

478
00:24:14,599 --> 00:24:19,189
and Mac OS devices previously we've

479
00:24:17,239 --> 00:24:22,700
shared a lot of information about how we

480
00:24:19,190 --> 00:24:24,529
see ipv6 adoption I'm gonna be sharing a

481
00:24:22,700 --> 00:24:26,419
little bit about that now but one of the

482
00:24:24,529 --> 00:24:29,419
new cool things that's happening is that

483
00:24:26,419 --> 00:24:32,359
we see a new protocol version TLS one

484
00:24:29,419 --> 00:24:34,099
three coming out and ramping up and I

485
00:24:32,359 --> 00:24:38,418
wanted to share some information about

486
00:24:34,099 --> 00:24:41,619
how we see this happening so as some

487
00:24:38,419 --> 00:24:46,009
background on what we're looking at here

488
00:24:41,619 --> 00:24:49,208
TLS 1/3 was published as RFC eight four

489
00:24:46,009 --> 00:24:51,440
four six last August

490
00:24:49,209 --> 00:24:55,009
been in development for a while but

491
00:24:51,440 --> 00:24:59,089
things were not really I'm deploying it

492
00:24:55,009 --> 00:25:02,839
at marked scale yet now on our clients

493
00:24:59,089 --> 00:25:06,589
we enabled TLS one three by default for

494
00:25:02,839 --> 00:25:10,399
pretty much all connections in March and

495
00:25:06,589 --> 00:25:14,389
so this was my OS 12.2 had Mac OS 10 dot

496
00:25:10,399 --> 00:25:17,718
14.4 so at this point we were able to

497
00:25:14,389 --> 00:25:19,639
start collecting data about how often we

498
00:25:17,719 --> 00:25:21,979
see TLS one three actually being

499
00:25:19,639 --> 00:25:26,029
negotiated with servers that our client

500
00:25:21,979 --> 00:25:28,249
devices are talking to and you know

501
00:25:26,029 --> 00:25:30,499
anecdotally we had heard and I think

502
00:25:28,249 --> 00:25:32,809
many people are aware of TLS 1 3 being

503
00:25:30,499 --> 00:25:35,209
rolled out we were aware that many

504
00:25:32,809 --> 00:25:37,450
server deployments were turning it on in

505
00:25:35,209 --> 00:25:41,059
some percentage and increasing it and

506
00:25:37,450 --> 00:25:42,229
ramping up support but I at least I have

507
00:25:41,059 --> 00:25:44,989
not seen a lot of data

508
00:25:42,229 --> 00:25:47,059
I'm shared from either server side or

509
00:25:44,989 --> 00:25:50,359
client side of exactly what scale we are

510
00:25:47,059 --> 00:25:51,619
seeing yet I would love to see data that

511
00:25:50,359 --> 00:25:53,718
anyone else is willing to share but we

512
00:25:51,619 --> 00:25:55,639
thought we would kind of take a step

513
00:25:53,719 --> 00:26:01,039
here and let people see how the adoption

514
00:25:55,639 --> 00:26:04,369
is going so the questions that we asked

515
00:26:01,039 --> 00:26:06,140
before looking at the data was first how

516
00:26:04,369 --> 00:26:08,840
much server adoption are we

517
00:26:06,140 --> 00:26:10,610
seeing of TLS 1/3 from the perspective

518
00:26:08,840 --> 00:26:14,360
of the clients like how much is this

519
00:26:10,610 --> 00:26:17,750
growing and then also one of the key

520
00:26:14,360 --> 00:26:19,399
things about TLS 1/3 from a measurement

521
00:26:17,750 --> 00:26:22,100
perspective is that it's supposed to

522
00:26:19,400 --> 00:26:24,830
have some performance benefits in almost

523
00:26:22,100 --> 00:26:27,169
all cases it can shave off one round

524
00:26:24,830 --> 00:26:28,850
trip from the handshake time so we want

525
00:26:27,170 --> 00:26:31,570
to see is this actually playing out in

526
00:26:28,850 --> 00:26:34,159
reality how is this actually improving

527
00:26:31,570 --> 00:26:38,720
the overall connection establishment

528
00:26:34,160 --> 00:26:40,010
time that we see from the client so

529
00:26:38,720 --> 00:26:42,710
before I get into the data just some

530
00:26:40,010 --> 00:26:45,530
notes on the methodology we are

531
00:26:42,710 --> 00:26:49,250
collecting this data on a per connection

532
00:26:45,530 --> 00:26:51,050
basis and in this case it's a per TLS

533
00:26:49,250 --> 00:26:54,080
connection we're not looking at for this

534
00:26:51,050 --> 00:26:56,810
data anything that's not a connection

535
00:26:54,080 --> 00:27:00,260
that has TLS enabled on it and this is

536
00:26:56,810 --> 00:27:03,409
all going over TCP what we're collecting

537
00:27:00,260 --> 00:27:07,220
is the TLS version how long the TLS

538
00:27:03,410 --> 00:27:11,960
handshake took the alp n value that we

539
00:27:07,220 --> 00:27:15,260
negotiated over TLS is this HTTP 1 or HP

540
00:27:11,960 --> 00:27:18,440
2 as well as information about the

541
00:27:15,260 --> 00:27:21,980
address families are we going over v4 v6

542
00:27:18,440 --> 00:27:26,000
and our v4 v6 enabled on the network

543
00:27:21,980 --> 00:27:27,800
that we're connecting over and so

544
00:27:26,000 --> 00:27:30,650
because of all of this what we're

545
00:27:27,800 --> 00:27:33,080
representing in general is the amount of

546
00:27:30,650 --> 00:27:35,060
TLS 1/3 that is being used

547
00:27:33,080 --> 00:27:36,770
this is not strictly the number of

548
00:27:35,060 --> 00:27:40,940
servers or the percentage of servers

549
00:27:36,770 --> 00:27:43,160
that have enabled 1/3 but rather like

550
00:27:40,940 --> 00:27:45,020
the percentage of popular servers or how

551
00:27:43,160 --> 00:27:47,930
often our clients really using this in

552
00:27:45,020 --> 00:27:49,400
practice we imagine of course that there

553
00:27:47,930 --> 00:27:51,560
is a long tail of things that have not

554
00:27:49,400 --> 00:27:56,510
turned on new protocols but that users

555
00:27:51,560 --> 00:27:58,129
don't often access and the data for this

556
00:27:56,510 --> 00:28:00,379
presentation is being collected over

557
00:27:58,130 --> 00:28:02,960
around a three month period this

558
00:28:00,380 --> 00:28:05,960
represents April to June and it's a

559
00:28:02,960 --> 00:28:07,520
random sample of for those devices and

560
00:28:05,960 --> 00:28:12,470
those users who have opted in to data

561
00:28:07,520 --> 00:28:14,600
collection point zero five percent of

562
00:28:12,470 --> 00:28:16,940
all the connections so there's a large

563
00:28:14,600 --> 00:28:19,070
scale of connections and this is getting

564
00:28:16,940 --> 00:28:20,790
a lot of data but it's a small sample of

565
00:28:19,070 --> 00:28:24,970
it

566
00:28:20,790 --> 00:28:27,370
all right so here we see a trend over

567
00:28:24,970 --> 00:28:30,640
the three months we are sampling the

568
00:28:27,370 --> 00:28:32,590
green is the amount of teal s13 that we

569
00:28:30,640 --> 00:28:35,500
see compared to the overall amount of

570
00:28:32,590 --> 00:28:39,699
TLS and I'm only showing teal s12 and

571
00:28:35,500 --> 00:28:43,420
TLS 1/3 the older versions are there but

572
00:28:39,700 --> 00:28:45,070
they are extremely tiny they are less

573
00:28:43,420 --> 00:28:49,410
than half a percent it's not interesting

574
00:28:45,070 --> 00:28:56,290
and so we see a really steady march up

575
00:28:49,410 --> 00:28:57,820
10% 17% 22% the the amount of servers

576
00:28:56,290 --> 00:29:00,940
that are turning this on is definitely

577
00:28:57,820 --> 00:29:02,350
growing but we had other data in here

578
00:29:00,940 --> 00:29:04,180
and so we want to start correlating it

579
00:29:02,350 --> 00:29:07,149
and it's very interesting if you look at

580
00:29:04,180 --> 00:29:10,230
this same trend when we look only at

581
00:29:07,150 --> 00:29:15,880
connections that established over ipv6

582
00:29:10,230 --> 00:29:18,610
and here it's a similar trend very

583
00:29:15,880 --> 00:29:20,140
similar line so we see that the numbers

584
00:29:18,610 --> 00:29:24,040
are kind of being ramped up on these

585
00:29:20,140 --> 00:29:26,050
servers but the the absolute numbers and

586
00:29:24,040 --> 00:29:29,139
absolute values of TLS 1/3 are much

587
00:29:26,050 --> 00:29:31,570
higher and as of June we are already up

588
00:29:29,140 --> 00:29:34,570
to a third of all of our connections

589
00:29:31,570 --> 00:29:39,189
when we were going over v6 we're using

590
00:29:34,570 --> 00:29:40,990
TLS 1/3 so this is great so looking a

591
00:29:39,190 --> 00:29:44,530
little bit more into this kind of

592
00:29:40,990 --> 00:29:46,240
correlation because this is an

593
00:29:44,530 --> 00:29:48,730
interesting thing we noticed in the data

594
00:29:46,240 --> 00:29:51,520
so we wanted to dig a bit deeper we ask

595
00:29:48,730 --> 00:29:55,060
the question how likely is a server to

596
00:29:51,520 --> 00:29:59,139
support TLS 1/3 if it is also upgraded

597
00:29:55,060 --> 00:30:00,970
to support ipv6 so this data is now only

598
00:29:59,140 --> 00:30:03,640
looking at connections that are

599
00:30:00,970 --> 00:30:07,210
established whenever on a dual stack

600
00:30:03,640 --> 00:30:09,160
network so we have both before and v6

601
00:30:07,210 --> 00:30:11,320
available we're asking for both a and

602
00:30:09,160 --> 00:30:13,810
quad 8 queries and so we're essentially

603
00:30:11,320 --> 00:30:17,710
checking does this server support v6 and

604
00:30:13,810 --> 00:30:21,909
we see that of the arguably larger

605
00:30:17,710 --> 00:30:25,990
number of v4 only servers only 12% of

606
00:30:21,910 --> 00:30:28,900
them by June had adopted and enabled 1/3

607
00:30:25,990 --> 00:30:31,210
but of the servers that had previously

608
00:30:28,900 --> 00:30:33,100
already been rolling out ipv6

609
00:30:31,210 --> 00:30:35,740
that number is of

610
00:30:33,100 --> 00:30:39,250
third it's at 36% so there's a fairly

611
00:30:35,740 --> 00:30:41,730
strong correlation there and kind of

612
00:30:39,250 --> 00:30:45,809
looking at this the other way around

613
00:30:41,730 --> 00:30:49,870
when we look at the overall amount of

614
00:30:45,809 --> 00:30:51,340
server enablement of ipv6 today when

615
00:30:49,870 --> 00:30:55,770
we're on dual stack networks we're

616
00:30:51,340 --> 00:31:00,689
seeing about 40% of connections go over

617
00:30:55,770 --> 00:31:03,370
ipv6 but when we sample only for those

618
00:31:00,690 --> 00:31:05,289
that are going over to us 1/3 so if

619
00:31:03,370 --> 00:31:09,189
people have been upgrading recently we

620
00:31:05,289 --> 00:31:11,320
see that at almost 70 percent so if

621
00:31:09,190 --> 00:31:12,640
you're looking at you know new TLS

622
00:31:11,320 --> 00:31:15,639
connections these are almost all

623
00:31:12,640 --> 00:31:19,080
happening over ipv6 this is an

624
00:31:15,640 --> 00:31:19,080
interesting correlation here in the data

625
00:31:19,679 --> 00:31:26,080
similarly we look at the correlations

626
00:31:21,970 --> 00:31:28,900
with a OPN so how likely are you to

627
00:31:26,080 --> 00:31:32,470
support TLS 1/3 if you have also

628
00:31:28,900 --> 00:31:34,000
upgraded to support HTTP 2 and again

629
00:31:32,470 --> 00:31:36,190
it's actually really really similar

630
00:31:34,000 --> 00:31:42,419
number so if you remember for v6 and

631
00:31:36,190 --> 00:31:46,330
before v4 had I think was 12% and v6 had

632
00:31:42,419 --> 00:31:48,669
36 or 38 and here we see almost exactly

633
00:31:46,330 --> 00:31:50,980
the same numbers if you are kind of a

634
00:31:48,669 --> 00:31:52,780
legacy server if you're doing HP 1

635
00:31:50,980 --> 00:31:56,950
there's only 13 percent of them have

636
00:31:52,780 --> 00:32:00,280
upgraded their TLS but for it should be

637
00:31:56,950 --> 00:32:05,350
2 connections over 40% of them are

638
00:32:00,280 --> 00:32:07,480
already on TLS 1 3 and again looking at

639
00:32:05,350 --> 00:32:10,510
things the other way we actually see

640
00:32:07,480 --> 00:32:13,600
overall from our clients about a 50/50

641
00:32:10,510 --> 00:32:18,879
split of connections use it should be 1

642
00:32:13,600 --> 00:32:20,080
or hb2 on any given network but if you

643
00:32:18,880 --> 00:32:24,880
only look at the connections that are

644
00:32:20,080 --> 00:32:31,299
using TLS 1 3 we see 75% of connections

645
00:32:24,880 --> 00:32:33,190
are using HP 2 so again interesting

646
00:32:31,299 --> 00:32:36,520
correlation and really quite similar

647
00:32:33,190 --> 00:32:39,309
numbers here and then the last thing we

648
00:32:36,520 --> 00:32:41,080
want to look at was the performance to

649
00:32:39,309 --> 00:32:42,340
validate that other question are we

650
00:32:41,080 --> 00:32:46,120
seeing the performance gains that we

651
00:32:42,340 --> 00:32:46,959
were expecting with TLS 1 3 and here the

652
00:32:46,120 --> 00:32:50,050
answer is

653
00:32:46,960 --> 00:32:52,990
pretty clearly yes so this is a PDF

654
00:32:50,050 --> 00:32:58,540
showing the number of milliseconds that

655
00:32:52,990 --> 00:33:00,880
we see for both GLS 1 3 and TLS 1 2

656
00:32:58,540 --> 00:33:02,760
handshakes and we definitely see a much

657
00:33:00,880 --> 00:33:06,910
stronger skew towards the faster

658
00:33:02,760 --> 00:33:10,750
handshake times with TLS 1 3 than we do

659
00:33:06,910 --> 00:33:13,090
with 1 2 so it is clearly a benefit all

660
00:33:10,750 --> 00:33:13,570
right so that's the data we have to

661
00:33:13,090 --> 00:33:16,209
share

662
00:33:13,570 --> 00:33:19,300
so the overall observations we're making

663
00:33:16,210 --> 00:33:22,300
is that TLS 1 3 support has more than

664
00:33:19,300 --> 00:33:24,550
doubled over the past 3 months the

665
00:33:22,300 --> 00:33:26,530
performance wins that we expected are

666
00:33:24,550 --> 00:33:27,520
being clearly demonstrated and we're

667
00:33:26,530 --> 00:33:30,389
getting a lot of value here

668
00:33:27,520 --> 00:33:34,300
and then the other kind of correlation

669
00:33:30,390 --> 00:33:36,490
insight is we're noticing trends of

670
00:33:34,300 --> 00:33:39,399
these kind of two populations we're

671
00:33:36,490 --> 00:33:42,580
getting bimodal populations of leading

672
00:33:39,400 --> 00:33:45,820
edge servers that are doing TLS one 3hp

673
00:33:42,580 --> 00:33:49,689
to ipv6 and then some straggler

674
00:33:45,820 --> 00:33:53,530
populations that are doing POS 1 to HB 1

675
00:33:49,690 --> 00:33:56,200
that are ipv4 only and so you know

676
00:33:53,530 --> 00:33:57,910
client developers are looking at needing

677
00:33:56,200 --> 00:33:59,920
to optimize for two different

678
00:33:57,910 --> 00:34:04,870
populations here and they should be kind

679
00:33:59,920 --> 00:34:06,250
of expecting these general groupings and

680
00:34:04,870 --> 00:34:10,810
it's also I think interesting when we're

681
00:34:06,250 --> 00:34:13,630
looking at new protocol adoption I know

682
00:34:10,810 --> 00:34:16,060
that these three protocols represent

683
00:34:13,630 --> 00:34:20,980
definitely different groups of people at

684
00:34:16,060 --> 00:34:25,000
the IETF and I think it shows that we

685
00:34:20,980 --> 00:34:28,960
have a lot of common interest in common

686
00:34:25,000 --> 00:34:30,850
patterns that when we look at the

687
00:34:28,960 --> 00:34:34,770
devices that haven't been upgrading to

688
00:34:30,850 --> 00:34:38,259
v4 those are kind of common enemies of

689
00:34:34,770 --> 00:34:40,030
apathy or inertia that all of these

690
00:34:38,260 --> 00:34:42,640
protocols are trying to fight against

691
00:34:40,030 --> 00:34:46,260
and we're kind of all in it together in

692
00:34:42,639 --> 00:34:50,139
this so questions please hi George again

693
00:34:46,260 --> 00:34:52,180
can I just check is this a sample set

694
00:34:50,139 --> 00:34:53,679
mediated from your experiment in the

695
00:34:52,179 --> 00:34:55,569
client or are you doing some traffic

696
00:34:53,679 --> 00:34:57,819
measurement at exchange points or are

697
00:34:55,570 --> 00:35:00,100
you bound on the server side what can I

698
00:34:57,820 --> 00:35:00,339
might have missed it mm-hmm it informs

699
00:35:00,100 --> 00:35:01,839
the

700
00:35:00,339 --> 00:35:03,670
the next question so this is your

701
00:35:01,839 --> 00:35:06,069
mechanism in Apple for measurement of

702
00:35:03,670 --> 00:35:11,950
client view of server behavior right so

703
00:35:06,069 --> 00:35:15,219
this is on the population of both beta

704
00:35:11,950 --> 00:35:18,808
users and users who have opted in to

705
00:35:15,219 --> 00:35:20,979
data collection on across the world on

706
00:35:18,809 --> 00:35:21,430
just normal devices that people are

707
00:35:20,979 --> 00:35:25,089
using

708
00:35:21,430 --> 00:35:28,930
so generally Wi-Fi cell networks that

709
00:35:25,089 --> 00:35:30,670
users are on so I'm not using skew in

710
00:35:28,930 --> 00:35:32,739
the negative kind of pejorative sense

711
00:35:30,670 --> 00:35:34,539
I'm just observing capital exclusively

712
00:35:32,739 --> 00:35:37,989
we're in the domain of the apple handset

713
00:35:34,539 --> 00:35:40,210
in mobile distinct from say Apple and

714
00:35:37,989 --> 00:35:42,039
Android you would have some question

715
00:35:40,210 --> 00:35:44,440
around is this a function of update

716
00:35:42,039 --> 00:35:46,509
cycle and availability of things because

717
00:35:44,440 --> 00:35:48,279
this is a client negotiation right the

718
00:35:46,509 --> 00:35:51,069
server proffers and then you have a

719
00:35:48,279 --> 00:35:54,279
downgrade so it comes to a question is

720
00:35:51,069 --> 00:35:56,049
if only newer devices you recruit is

721
00:35:54,279 --> 00:35:57,549
there some skew here that affects the

722
00:35:56,049 --> 00:36:01,029
relativities because if you were across

723
00:35:57,549 --> 00:36:03,069
a random population v6 would naturally

724
00:36:01,029 --> 00:36:04,660
have a higher uptake of 1/3 because it

725
00:36:03,069 --> 00:36:07,808
tends to be present in the newest

726
00:36:04,660 --> 00:36:10,719
software releases on carriers and 80% of

727
00:36:07,809 --> 00:36:12,400
everything is v6 in mobile and that was

728
00:36:10,719 --> 00:36:15,190
really the only point and it's not to

729
00:36:12,400 --> 00:36:17,200
criticize yeah this is great data but I

730
00:36:15,190 --> 00:36:20,950
just wondered if that was an aspect yeah

731
00:36:17,200 --> 00:36:22,660
that's a really good point and so I will

732
00:36:20,950 --> 00:36:24,968
add to kind of like methodology in the

733
00:36:22,660 --> 00:36:29,348
population here we are only gathering

734
00:36:24,969 --> 00:36:33,099
this data from the people on operating

735
00:36:29,349 --> 00:36:35,200
systems that have upgraded to enable 1:3

736
00:36:33,099 --> 00:36:36,729
so these are not going to be older

737
00:36:35,200 --> 00:36:39,819
devices these are of course not devices

738
00:36:36,729 --> 00:36:43,299
that we don't own so it is an early

739
00:36:39,819 --> 00:36:44,799
adopters on the client side let's just

740
00:36:43,299 --> 00:36:46,150
one thing to interject we've got about

741
00:36:44,799 --> 00:36:48,339
four minutes and five of you in the

742
00:36:46,150 --> 00:36:51,549
queue so let's let's drain that out and

743
00:36:48,339 --> 00:36:54,249
then please remember to ian's what

744
00:36:51,549 --> 00:36:55,719
Google thanks for presenting this data

745
00:36:54,249 --> 00:36:57,669
it was a similar question about

746
00:36:55,719 --> 00:36:59,619
selection bias actually I was wondering

747
00:36:57,670 --> 00:37:02,739
if you had attempted to do a hold back

748
00:36:59,619 --> 00:37:05,349
experiment where say half users like did

749
00:37:02,739 --> 00:37:08,619
not have TLS 1/3 enabled but recorded

750
00:37:05,349 --> 00:37:10,839
when TLS 3 1/3 was was available and one

751
00:37:08,619 --> 00:37:13,180
the other half like actually used it to

752
00:37:10,839 --> 00:37:13,990
get a better idea of like because I

753
00:37:13,180 --> 00:37:16,000
would remove the server

754
00:37:13,990 --> 00:37:17,950
selection bias that might otherwise be

755
00:37:16,000 --> 00:37:19,480
present and we found it for quit that's

756
00:37:17,950 --> 00:37:21,490
kind of important but that being said I

757
00:37:19,480 --> 00:37:24,430
suspect your data is still largely in

758
00:37:21,490 --> 00:37:27,160
the same direction I just asked ya so

759
00:37:24,430 --> 00:37:29,200
earlier on before we turn it on by

760
00:37:27,160 --> 00:37:33,759
default we were doing probing

761
00:37:29,200 --> 00:37:37,960
essentially detecting when TLS 1/3 was

762
00:37:33,760 --> 00:37:39,460
available even if we didn't use it kind

763
00:37:37,960 --> 00:37:41,260
of just as a product decision we decided

764
00:37:39,460 --> 00:37:42,610
to turn on full-blast for everyone

765
00:37:41,260 --> 00:37:44,290
because there's the performance when we

766
00:37:42,610 --> 00:37:46,770
didn't want to hold some people back but

767
00:37:44,290 --> 00:37:50,590
yes that's a very good point

768
00:37:46,770 --> 00:37:54,430
young lute regarding your last

769
00:37:50,590 --> 00:37:56,710
measurements with the PDFs um I was

770
00:37:54,430 --> 00:37:57,970
wondering you physically showed TLS 1.3

771
00:37:56,710 --> 00:38:02,920
server's seem to be better connected

772
00:37:57,970 --> 00:38:06,069
more up-to-date what kind of what is the

773
00:38:02,920 --> 00:38:07,780
reason for the PDF being so low is it

774
00:38:06,070 --> 00:38:10,090
that they are just better connected or

775
00:38:07,780 --> 00:38:12,220
is it the protocol that is better yeah

776
00:38:10,090 --> 00:38:16,570
that's again a very good point there's

777
00:38:12,220 --> 00:38:18,399
lots of biases that get introduced this

778
00:38:16,570 --> 00:38:19,960
data and I think the other information

779
00:38:18,400 --> 00:38:21,369
that we showed of like hmm

780
00:38:19,960 --> 00:38:23,619
these are clearly servers that are

781
00:38:21,369 --> 00:38:25,420
adopting on the leading edge means that

782
00:38:23,619 --> 00:38:29,109
they're probably optimizing other things

783
00:38:25,420 --> 00:38:30,700
more yeah I think you know at least

784
00:38:29,109 --> 00:38:34,150
isolated measurements we definitely do

785
00:38:30,700 --> 00:38:36,490
see the benefit of one RTT this

786
00:38:34,150 --> 00:38:39,000
particular data is only looking at the

787
00:38:36,490 --> 00:38:42,790
handshake establishment time right so

788
00:38:39,000 --> 00:38:44,740
the RT T's are a major factor in this so

789
00:38:42,790 --> 00:38:45,609
I do think that does dominate this but

790
00:38:44,740 --> 00:38:52,750
you are correct

791
00:38:45,609 --> 00:38:55,720
thank you professional jobs you I really

792
00:38:52,750 --> 00:38:57,130
like to remark about there being as sort

793
00:38:55,720 --> 00:38:59,919
of the leaders that are deploying new

794
00:38:57,130 --> 00:39:01,780
stuff and I was wondering could you if I

795
00:38:59,920 --> 00:39:03,310
can put in a request look at whether or

796
00:39:01,780 --> 00:39:05,230
not these people have their domains DNS

797
00:39:03,310 --> 00:39:07,930
excited and whether it was validated by

798
00:39:05,230 --> 00:39:10,570
just looking at the ad bit in the DNS

799
00:39:07,930 --> 00:39:12,220
response that your clients get we don't

800
00:39:10,570 --> 00:39:14,590
have that but that'd be great yeah could

801
00:39:12,220 --> 00:39:17,649
you do that I'd be great thanks well

802
00:39:14,590 --> 00:39:21,330
noted all right Brian Trammell not as

803
00:39:17,650 --> 00:39:24,400
Banerjee Koecher despite the Hat the

804
00:39:21,330 --> 00:39:27,630
with another bias question which I'll

805
00:39:24,400 --> 00:39:28,980
actually freeze it as a

806
00:39:27,630 --> 00:39:32,580
comment because I think the answer the

807
00:39:28,980 --> 00:39:33,750
first question we know there are a few

808
00:39:32,580 --> 00:39:36,900
things that you could look at in their

809
00:39:33,750 --> 00:39:39,660
responses that might identify server

810
00:39:36,900 --> 00:39:42,270
software so that you could essentially

811
00:39:39,660 --> 00:39:43,710
Coralie some of these sort of like you

812
00:39:42,270 --> 00:39:45,180
know early adopters and stragglers by

813
00:39:43,710 --> 00:39:46,290
what the software the earth are running

814
00:39:45,180 --> 00:39:49,470
cuz one of the things that we saw like

815
00:39:46,290 --> 00:39:50,580
for example with ecn is um nobody

816
00:39:49,470 --> 00:39:52,049
actually cares about turning it on is

817
00:39:50,580 --> 00:39:53,190
just that the defaults are better and

818
00:39:52,050 --> 00:39:55,710
one thing that would be really great for

819
00:39:53,190 --> 00:39:57,510
this community to know is to what extent

820
00:39:55,710 --> 00:40:00,780
is the work that we're doing toward

821
00:39:57,510 --> 00:40:01,980
driving the defaults forward driving

822
00:40:00,780 --> 00:40:03,180
some of this deployment into what extent

823
00:40:01,980 --> 00:40:05,880
are these people who are making actual

824
00:40:03,180 --> 00:40:07,710
decisions based on the merits of Chios

825
00:40:05,880 --> 00:40:10,020
one three Thanks yep that's a great

826
00:40:07,710 --> 00:40:12,300
question there's of course concerns for

827
00:40:10,020 --> 00:40:14,759
us about trying to do too much explicit

828
00:40:12,300 --> 00:40:16,380
fingerprinting for privacy purposes but

829
00:40:14,760 --> 00:40:18,240
I think developing ways of doing this

830
00:40:16,380 --> 00:40:20,850
that our privacy preserving would be a

831
00:40:18,240 --> 00:40:22,109
great idea gen-i and god I was actually

832
00:40:20,850 --> 00:40:24,630
going to say something very close to

833
00:40:22,110 --> 00:40:26,250
that which is have you have you

834
00:40:24,630 --> 00:40:29,580
considered looking into fingerprinting

835
00:40:26,250 --> 00:40:31,650
the the SSL libraries that are being

836
00:40:29,580 --> 00:40:33,509
used at the service to see there's a

837
00:40:31,650 --> 00:40:35,460
correlation between you know if it is

838
00:40:33,510 --> 00:40:37,230
possible that maybe does one SSL library

839
00:40:35,460 --> 00:40:39,000
that happens to have bad defaults of

840
00:40:37,230 --> 00:40:40,560
that and you turn it on and performance

841
00:40:39,000 --> 00:40:43,320
actually sucks which is why people have

842
00:40:40,560 --> 00:40:46,799
it turned off I don't know

843
00:40:43,320 --> 00:40:49,380
but that's one other correlation that I

844
00:40:46,800 --> 00:40:51,690
was interested in but I don't know how

845
00:40:49,380 --> 00:40:54,150
easy it is to fingerprint SSL server

846
00:40:51,690 --> 00:40:56,100
libraries or how feasible it is for you

847
00:40:54,150 --> 00:40:59,010
to do it even if it is possible right

848
00:40:56,100 --> 00:41:01,650
right and of course there would be the

849
00:40:59,010 --> 00:41:02,610
concern about kind of ossified on the

850
00:41:01,650 --> 00:41:05,040
fingerprint that the given

851
00:41:02,610 --> 00:41:07,980
implementation has you know we've been

852
00:41:05,040 --> 00:41:10,590
seeing actually issues on the other side

853
00:41:07,980 --> 00:41:12,810
of certainly firewalls our other

854
00:41:10,590 --> 00:41:15,510
measurement devices expecting certain

855
00:41:12,810 --> 00:41:17,520
patterns of our own TLS implementation

856
00:41:15,510 --> 00:41:21,930
and having changing behavior based on

857
00:41:17,520 --> 00:41:23,460
that so it's tricky area so just a very

858
00:41:21,930 --> 00:41:26,669
quick question I did not see any

859
00:41:23,460 --> 00:41:29,970
breakages mentioned in any of this yeah

860
00:41:26,670 --> 00:41:33,210
the we weren't sharing breakage numbers

861
00:41:29,970 --> 00:41:34,709
but it's essentially very low and pretty

862
00:41:33,210 --> 00:41:36,300
much the same as one two we don't see

863
00:41:34,710 --> 00:41:40,380
anything that's really specific to us

864
00:41:36,300 --> 00:41:44,639
one three that's lovely thank you

865
00:41:40,380 --> 00:41:44,639
[Applause]

866
00:41:45,690 --> 00:41:49,930
thanks Tommy

867
00:41:47,200 --> 00:41:52,689
Cory's next we have now talks to talks

868
00:41:49,930 --> 00:42:05,879
related to quick as you expect us to

869
00:41:52,690 --> 00:42:08,650
have usually hi I'm Corey first and yep

870
00:42:05,880 --> 00:42:11,680
we'll talk about quick I'm going to talk

871
00:42:08,650 --> 00:42:14,170
about a some results from a test bed we

872
00:42:11,680 --> 00:42:17,529
built we use vagrant to configure some

873
00:42:14,170 --> 00:42:20,230
computers virtual machines we ran tests

874
00:42:17,530 --> 00:42:22,320
with quick we use quickly and thank you

875
00:42:20,230 --> 00:42:26,500
for the people who helped us do that and

876
00:42:22,320 --> 00:42:29,350
we put a real Hardy light path between

877
00:42:26,500 --> 00:42:31,570
our two endpoints this work was jointly

878
00:42:29,350 --> 00:42:35,860
done by me and Tom we're all from

879
00:42:31,570 --> 00:42:38,230
Aberdeen University so this is a summary

880
00:42:35,860 --> 00:42:41,290
plot this is a summary plot of a lot of

881
00:42:38,230 --> 00:42:44,740
experiments and you can see maybe look

882
00:42:41,290 --> 00:42:48,130
at me right left box first and you can

883
00:42:44,740 --> 00:42:50,709
see red which is straight using TTP to

884
00:42:48,130 --> 00:42:53,050
do a W at this time of 100 kilobytes

885
00:42:50,710 --> 00:42:56,980
across the satellite link and you can

886
00:42:53,050 --> 00:43:00,040
see they takes six seconds to transfer

887
00:42:56,980 --> 00:43:02,410
there are some outliers and this is

888
00:43:00,040 --> 00:43:04,570
working across the hall access path from

889
00:43:02,410 --> 00:43:06,670
the satellite and the internet and doing

890
00:43:04,570 --> 00:43:08,910
the measurement across the path they

891
00:43:06,670 --> 00:43:12,370
could go to the green box in the left

892
00:43:08,910 --> 00:43:15,279
one the green box shows with TCP using

893
00:43:12,370 --> 00:43:17,020
TLS 1.2 to get the same thing and the

894
00:43:15,280 --> 00:43:19,180
green box shows the advantage of a pet

895
00:43:17,020 --> 00:43:20,980
the performance enhancing proxy which

896
00:43:19,180 --> 00:43:22,299
the satellite operators put in their

897
00:43:20,980 --> 00:43:24,520
network and you can see it's much better

898
00:43:22,300 --> 00:43:26,740
on the left with the green than the red

899
00:43:24,520 --> 00:43:29,920
so the real question is now what does

900
00:43:26,740 --> 00:43:32,470
quick doing what quick has to use the

901
00:43:29,920 --> 00:43:34,510
full path it it has to go over the

902
00:43:32,470 --> 00:43:39,069
satellite the satellite can't benefit it

903
00:43:34,510 --> 00:43:42,130
so it does quite well it does almost as

904
00:43:39,070 --> 00:43:43,510
good as the pepper so which is really

905
00:43:42,130 --> 00:43:47,110
good news thanks everyone for working

906
00:43:43,510 --> 00:43:49,310
with quick however it's not quite as

907
00:43:47,110 --> 00:43:52,580
good as per happen

908
00:43:49,310 --> 00:43:53,630
and you know little bits make a big

909
00:43:52,580 --> 00:43:56,480
difference when you do web performance

910
00:43:53,630 --> 00:44:01,040
let's look at a bigger transfer that's

911
00:43:56,480 --> 00:44:04,120
the one on the right though you see the

912
00:44:01,040 --> 00:44:07,130
red plot goes a little bit wild why

913
00:44:04,120 --> 00:44:09,400
because when you're using TCP and you've

914
00:44:07,130 --> 00:44:11,900
got a high bandwidth delay product and

915
00:44:09,400 --> 00:44:14,390
something goes wrong the pathology can

916
00:44:11,900 --> 00:44:16,760
go many different ways ssthresh can get

917
00:44:14,390 --> 00:44:18,850
clamped low and all sorts of things can

918
00:44:16,760 --> 00:44:22,280
happen so big variants on the right

919
00:44:18,850 --> 00:44:26,270
quick did well but not quite as well as

920
00:44:22,280 --> 00:44:28,940
TLS 1.2 uh-huh just a minute and we had

921
00:44:26,270 --> 00:44:31,640
a previous talk what about 1.3 let's put

922
00:44:28,940 --> 00:44:34,280
1.3 in here quick he's using 1.3 so it

923
00:44:31,640 --> 00:44:37,940
should be as good as TLS 1.3 and now we

924
00:44:34,280 --> 00:44:40,550
see the gap because TLS with 1.3 is much

925
00:44:37,940 --> 00:44:42,650
better than TLS with 1.2 thank 0 for

926
00:44:40,550 --> 00:44:47,600
didn't doing TLS 1.3 that worked really

927
00:44:42,650 --> 00:44:54,980
well and quick isn't yet as we tested it

928
00:44:47,600 --> 00:44:56,839
as good as the TLS 1.3 and that's all

929
00:44:54,980 --> 00:44:59,360
right let me tell you more about what we

930
00:44:56,840 --> 00:45:01,460
are actually using as our link it's a

931
00:44:59,360 --> 00:45:03,080
satellite access link it's a commercial

932
00:45:01,460 --> 00:45:07,280
offering we're using an engineering

933
00:45:03,080 --> 00:45:09,710
platform the forward link has a bit rate

934
00:45:07,280 --> 00:45:11,420
nominally of 10 megabits per second and

935
00:45:09,710 --> 00:45:14,870
you can easily get 8 point 5 megabits

936
00:45:11,420 --> 00:45:18,110
using iperf across this reasonably good

937
00:45:14,870 --> 00:45:18,830
service for an isp returnin link is 1.4

938
00:45:18,110 --> 00:45:20,960
megabits

939
00:45:18,830 --> 00:45:22,370
pretty good and not as much here

940
00:45:20,960 --> 00:45:24,230
symmetry as many people will have at

941
00:45:22,370 --> 00:45:27,410
home if they're using soft light but I

942
00:45:24,230 --> 00:45:30,770
mean that's ok bandwidth delay for the

943
00:45:27,410 --> 00:45:36,589
very large majority of packets was just

944
00:45:30,770 --> 00:45:37,970
over 550 milliseconds however let's look

945
00:45:36,590 --> 00:45:40,400
at some long-term measurements of what

946
00:45:37,970 --> 00:45:42,890
actually the RTT was you'll see the blue

947
00:45:40,400 --> 00:45:44,450
bar is the average RTT and it's a high

948
00:45:42,890 --> 00:45:47,120
bandwidth delay product link nearly

949
00:45:44,450 --> 00:45:49,669
always at around 5 50 milliseconds but

950
00:45:47,120 --> 00:45:51,650
there are many outliers this is because

951
00:45:49,670 --> 00:45:52,910
there's a radio link underneath it's

952
00:45:51,650 --> 00:45:54,460
trying to merge the resource

953
00:45:52,910 --> 00:45:56,810
occasionally you'll get resource

954
00:45:54,460 --> 00:45:59,330
requests which can't be satisfied

955
00:45:56,810 --> 00:46:00,410
because got a contention busy time to

956
00:45:59,330 --> 00:46:02,900
the day work badly

957
00:46:00,410 --> 00:46:04,640
occasionally resource requests will fail

958
00:46:02,900 --> 00:46:07,250
you have to try second time to get

959
00:46:04,640 --> 00:46:09,319
resource or your partner traffic changes

960
00:46:07,250 --> 00:46:11,000
abruptly so these are single packet

961
00:46:09,320 --> 00:46:14,540
measurements you see these large

962
00:46:11,000 --> 00:46:16,130
outliers so I assert this is a wonderful

963
00:46:14,540 --> 00:46:18,529
test case for testing a quick

964
00:46:16,130 --> 00:46:19,880
implementation if you want to push this

965
00:46:18,530 --> 00:46:22,340
implementation in a weird way

966
00:46:19,880 --> 00:46:24,230
check all the time is work check all the

967
00:46:22,340 --> 00:46:25,640
transmission stuff work this is a great

968
00:46:24,230 --> 00:46:28,850
environment and it's real

969
00:46:25,640 --> 00:46:32,779
so we're carrying on doing this we've

970
00:46:28,850 --> 00:46:35,839
done a lot of measurements and one of

971
00:46:32,780 --> 00:46:38,090
the things we've done is plotted and TCP

972
00:46:35,840 --> 00:46:40,760
as sequence number divided by MSS

973
00:46:38,090 --> 00:46:42,590
because that's a thing that's roughly

974
00:46:40,760 --> 00:46:44,960
equivalent to the quick packet number

975
00:46:42,590 --> 00:46:48,560
and you get plots that look like this

976
00:46:44,960 --> 00:46:50,090
and okay I mean there's lots of these

977
00:46:48,560 --> 00:46:51,860
there's lots more in my dataset if

978
00:46:50,090 --> 00:46:54,260
you're interested in these come and talk

979
00:46:51,860 --> 00:46:56,150
to me and maybe next ITF will organize a

980
00:46:54,260 --> 00:46:58,730
side meeting to go through this sort of

981
00:46:56,150 --> 00:47:00,080
data with multiple people I'm not going

982
00:46:58,730 --> 00:47:01,550
to take the question to the end because

983
00:47:00,080 --> 00:47:03,830
I'm going to another a rather different

984
00:47:01,550 --> 00:47:08,030
notes where I'm going this is the

985
00:47:03,830 --> 00:47:10,420
download and yeah all the time quick

986
00:47:08,030 --> 00:47:13,010
does well sometimes it didn't do as well

987
00:47:10,420 --> 00:47:14,630
remember TCP has this pathology as well

988
00:47:13,010 --> 00:47:17,000
so what we need to do now is look

989
00:47:14,630 --> 00:47:20,030
carefully at exactly what's going on the

990
00:47:17,000 --> 00:47:21,950
link logging is wonderful we can get a

991
00:47:20,030 --> 00:47:25,370
lot about lot of logging out we can

992
00:47:21,950 --> 00:47:27,080
really drill into it and lists are not

993
00:47:25,370 --> 00:47:29,480
wonderful so we have to figure out how

994
00:47:27,080 --> 00:47:32,840
best interact how timers are interacting

995
00:47:29,480 --> 00:47:34,730
yeah okay so we got lots of data what

996
00:47:32,840 --> 00:47:36,110
did we conclude I thought I might get

997
00:47:34,730 --> 00:47:41,150
some people to like so I'm going to be

998
00:47:36,110 --> 00:47:43,310
quick quick quickly was wonderful it was

999
00:47:41,150 --> 00:47:46,130
a great experience using it Thanks right

1000
00:47:43,310 --> 00:47:47,750
and no complaints about this and we have

1001
00:47:46,130 --> 00:47:49,130
you to the logging available but then

1002
00:47:47,750 --> 00:47:52,670
we're always already talking about what

1003
00:47:49,130 --> 00:47:54,890
we should log TLS 1.3 had a two RTT

1004
00:47:52,670 --> 00:47:57,980
advantage one or two RTC advantage

1005
00:47:54,890 --> 00:47:59,509
always always better always good the

1006
00:47:57,980 --> 00:48:02,840
fullness of quick or satellite was not

1007
00:47:59,510 --> 00:48:05,180
as good as for TCP with a pet but it's

1008
00:48:02,840 --> 00:48:07,070
within shooting range so I'd really love

1009
00:48:05,180 --> 00:48:10,040
to try and get the NIT signed out so it

1010
00:48:07,070 --> 00:48:11,510
is as good downgrading to TCP is not a

1011
00:48:10,040 --> 00:48:13,640
long-term solution for these people

1012
00:48:11,510 --> 00:48:15,440
these people are currently actually

1013
00:48:13,640 --> 00:48:16,529
pushing you to use their pep in many

1014
00:48:15,440 --> 00:48:18,300
cases because

1015
00:48:16,530 --> 00:48:20,490
it's a predictable environment that's

1016
00:48:18,300 --> 00:48:22,530
got a stop we've got to enable quick of

1017
00:48:20,490 --> 00:48:24,299
this network to do that we must make

1018
00:48:22,530 --> 00:48:27,570
quick work well do that we must

1019
00:48:24,300 --> 00:48:29,040
understand quick well and understanding

1020
00:48:27,570 --> 00:48:30,960
performance issues falls into three

1021
00:48:29,040 --> 00:48:32,790
parts so this just probably

1022
00:48:30,960 --> 00:48:34,050
implementations I mean we're getting

1023
00:48:32,790 --> 00:48:36,540
there but there are things that could be

1024
00:48:34,050 --> 00:48:40,020
changed maybe small changes to the spec

1025
00:48:36,540 --> 00:48:41,460
in areas of transport maybe there's some

1026
00:48:40,020 --> 00:48:42,120
simple new mechanisms that could really

1027
00:48:41,460 --> 00:48:44,100
help

1028
00:48:42,120 --> 00:48:48,509
I'd love to explore that I'll bring that

1029
00:48:44,100 --> 00:48:51,060
up to the ITF as we find out we just

1030
00:48:48,510 --> 00:48:51,450
started I'm trying to say how exciting

1031
00:48:51,060 --> 00:48:53,370
this is

1032
00:48:51,450 --> 00:48:55,109
we just started will continue doing

1033
00:48:53,370 --> 00:48:56,520
measurements we're going to talk about

1034
00:48:55,110 --> 00:48:58,560
logging and tracing because we're

1035
00:48:56,520 --> 00:49:00,330
currently building our own tools they're

1036
00:48:58,560 --> 00:49:02,250
not bad they're passing JSON they're

1037
00:49:00,330 --> 00:49:04,319
taking peak ups for the TCP putting them

1038
00:49:02,250 --> 00:49:05,150
together the Q log stuff could be really

1039
00:49:04,320 --> 00:49:08,310
fun

1040
00:49:05,150 --> 00:49:10,260
and if you're a satellite person or a

1041
00:49:08,310 --> 00:49:12,330
radio person and somehow we can run our

1042
00:49:10,260 --> 00:49:14,610
tool across that using a virtual testbed

1043
00:49:12,330 --> 00:49:18,299
that'll be cool to get a wider spectrum

1044
00:49:14,610 --> 00:49:21,090
of results my slides have quite a few

1045
00:49:18,300 --> 00:49:23,700
extra bits but I don't intend to go

1046
00:49:21,090 --> 00:49:27,300
through them unless people really want

1047
00:49:23,700 --> 00:49:30,930
me to thank you questions thank you

1048
00:49:27,300 --> 00:49:33,570
going it's actually a great great thank

1049
00:49:30,930 --> 00:49:35,580
you did that and it's particularly great

1050
00:49:33,570 --> 00:49:38,580
to of the tresses of people can do a

1051
00:49:35,580 --> 00:49:40,770
simulation and chunder starts the the

1052
00:49:38,580 --> 00:49:44,549
one the little caveat I have with your

1053
00:49:40,770 --> 00:49:47,610
talk is that you are mentioning quick

1054
00:49:44,550 --> 00:49:50,730
when in fact you are testing a specific

1055
00:49:47,610 --> 00:49:54,300
version of a specific implementation and

1056
00:49:50,730 --> 00:49:55,770
I about human we add the 19

1057
00:49:54,300 --> 00:49:59,910
implementation of quake a truss

1058
00:49:55,770 --> 00:50:03,780
interrupt if we tried all 19 of them

1059
00:49:59,910 --> 00:50:07,350
would get 19 different results

1060
00:50:03,780 --> 00:50:10,080
I think at the moment I'm not sure I

1061
00:50:07,350 --> 00:50:11,490
completely agree that when the 19 have

1062
00:50:10,080 --> 00:50:14,490
finished there will be that different on

1063
00:50:11,490 --> 00:50:16,500
that sort of test if we push harder on

1064
00:50:14,490 --> 00:50:18,540
better tests which we will go to I'm

1065
00:50:16,500 --> 00:50:27,750
sure we'll get very different results so

1066
00:50:18,540 --> 00:50:29,759
yeah yeah okay but on network tests and

1067
00:50:27,750 --> 00:50:32,400
things like that so so it's very likely

1068
00:50:29,760 --> 00:50:34,590
that we would get and the reason I said

1069
00:50:32,400 --> 00:50:37,410
that is that I did spend a lot of time

1070
00:50:34,590 --> 00:50:39,420
tuning an implementation of quake for

1071
00:50:37,410 --> 00:50:41,850
this kind of scenarios not exactly as

1072
00:50:39,420 --> 00:50:44,730
you know you mentioned which is cannot

1073
00:50:41,850 --> 00:50:46,799
the edge kind of tuning you do at the

1074
00:50:44,730 --> 00:50:48,120
end of your beauty tune for the main

1075
00:50:46,800 --> 00:50:51,480
cast first and then you go to the other

1076
00:50:48,120 --> 00:50:53,819
casts and and that tuning involves

1077
00:50:51,480 --> 00:50:55,410
things like checking the way you compute

1078
00:50:53,820 --> 00:50:57,600
timer or shaking the way you manage

1079
00:50:55,410 --> 00:51:00,480
spoken for windows checking the way you

1080
00:50:57,600 --> 00:51:02,460
do to recovery and so all that is work

1081
00:51:00,480 --> 00:51:04,890
and so basically that the typical

1082
00:51:02,460 --> 00:51:07,410
process that people get dissemination

1083
00:51:04,890 --> 00:51:09,480
they look at what's going on as a haha

1084
00:51:07,410 --> 00:51:12,149
and they tune her concern here and there

1085
00:51:09,480 --> 00:51:14,250
and eventually they get to the level but

1086
00:51:12,150 --> 00:51:15,990
I think that's the great conclusion of

1087
00:51:14,250 --> 00:51:18,150
your talk is that if we do do that work

1088
00:51:15,990 --> 00:51:20,970
there is no reason to believe that will

1089
00:51:18,150 --> 00:51:22,620
not get to the wizard okay I checked

1090
00:51:20,970 --> 00:51:24,689
from that a couple of points and one of

1091
00:51:22,620 --> 00:51:26,220
them being that maybe next idea people

1092
00:51:24,690 --> 00:51:28,350
who are doing similar things with all

1093
00:51:26,220 --> 00:51:30,140
the other scenarios or other quick

1094
00:51:28,350 --> 00:51:32,460
implementations let's get together let's

1095
00:51:30,140 --> 00:51:35,250
spend some time actually drilling into

1096
00:51:32,460 --> 00:51:36,450
that not at the protocol level really at

1097
00:51:35,250 --> 00:51:39,600
the results of what we're seeing to

1098
00:51:36,450 --> 00:51:41,640
actually find out why and how yep thank

1099
00:51:39,600 --> 00:51:43,470
you let's make call on the end of this

1100
00:51:41,640 --> 00:51:47,960
queue then I just so we can stay nearly

1101
00:51:43,470 --> 00:51:53,069
on time denying God Wow so many parts

1102
00:51:47,960 --> 00:51:57,780
first I'm actually super impressed at

1103
00:51:53,070 --> 00:51:59,790
how close quick is to the pep PCP and

1104
00:51:57,780 --> 00:52:03,950
how far away it is from the VPN TCP

1105
00:51:59,790 --> 00:52:03,950
which also makes me super skeptical

1106
00:52:04,460 --> 00:52:09,420
partly because and I do to Christine's

1107
00:52:07,650 --> 00:52:11,990
point you're using quickly so I will say

1108
00:52:09,420 --> 00:52:15,570
you're using the right implementation

1109
00:52:11,990 --> 00:52:17,950
I'm biased because I implemented the

1110
00:52:15,570 --> 00:52:19,450
loss recovery in and so I must partly

1111
00:52:17,950 --> 00:52:21,339
partly responsible for some of the

1112
00:52:19,450 --> 00:52:23,919
performance you are seeing which is also

1113
00:52:21,339 --> 00:52:27,099
why I'm trying to understand what the

1114
00:52:23,920 --> 00:52:28,930
pep is doing so if the pepper is so I

1115
00:52:27,099 --> 00:52:30,910
don't really understand that that itself

1116
00:52:28,930 --> 00:52:31,540
that is being deployed is it a full

1117
00:52:30,910 --> 00:52:33,759
Terminator

1118
00:52:31,540 --> 00:52:36,430
is it a or is it just doing

1119
00:52:33,760 --> 00:52:38,619
retransmissions HACCP its BC I know

1120
00:52:36,430 --> 00:52:44,348
that's obvious from the tracers if you

1121
00:52:38,619 --> 00:52:46,150
look at the traces yes obviously they

1122
00:52:44,349 --> 00:52:48,970
receive traces if you want to be clear

1123
00:52:46,150 --> 00:52:52,210
so I think I mean thank you for us for

1124
00:52:48,970 --> 00:52:55,240
doing these experiments is awesome in

1125
00:52:52,210 --> 00:52:56,440
terms of the I think what do you at

1126
00:52:55,240 --> 00:52:58,348
least part of what you are seeing is the

1127
00:52:56,440 --> 00:53:00,790
difference between Reno and cubic

1128
00:52:58,349 --> 00:53:04,540
because quickly correctly implements and

1129
00:53:00,790 --> 00:53:09,009
deploys Reno yes and this is a really

1130
00:53:04,540 --> 00:53:11,079
high large B DB link and so there will

1131
00:53:09,010 --> 00:53:14,109
be your difference there and for the for

1132
00:53:11,079 --> 00:53:15,670
the transfer sizes here you have I

1133
00:53:14,109 --> 00:53:19,089
expect that cubic is going to ramp up

1134
00:53:15,670 --> 00:53:21,520
much faster I we have looked at that and

1135
00:53:19,089 --> 00:53:24,900
I think that's partly it and I think

1136
00:53:21,520 --> 00:53:28,480
also limped some timer issues and minor

1137
00:53:24,900 --> 00:53:30,790
details that could be fixed so yeah this

1138
00:53:28,480 --> 00:53:33,520
is not a complete piece of work is the

1139
00:53:30,790 --> 00:53:35,230
starter yeah so do big things one I'm

1140
00:53:33,520 --> 00:53:38,319
super happy to continue working on this

1141
00:53:35,230 --> 00:53:40,030
and you know this is happy to take this

1142
00:53:38,319 --> 00:53:42,160
back and sort of fix the quickly

1143
00:53:40,030 --> 00:53:44,530
implementation for any bugs but second

1144
00:53:42,160 --> 00:53:46,379
we you might know that we have Martin

1145
00:53:44,530 --> 00:53:49,510
Simon and I have been working on a

1146
00:53:46,380 --> 00:53:50,829
simulator environment for testing these

1147
00:53:49,510 --> 00:53:54,940
things so it'd be good to actually

1148
00:53:50,829 --> 00:53:56,859
validate this stuff with the simulator

1149
00:53:54,940 --> 00:54:00,569
as well to see if we can replicate the

1150
00:53:56,859 --> 00:54:03,848
same results there excellent thank you

1151
00:54:00,569 --> 00:54:05,740
yes right Google I want thanks for two

1152
00:54:03,849 --> 00:54:07,270
things one for not using the chrome

1153
00:54:05,740 --> 00:54:08,770
quick implementation because so many

1154
00:54:07,270 --> 00:54:10,839
papers and benchmarks have been based on

1155
00:54:08,770 --> 00:54:12,759
it and you know there's always my

1156
00:54:10,839 --> 00:54:14,049
personal concern that that's overfitting

1157
00:54:12,760 --> 00:54:15,099
and implementation and maybe we have

1158
00:54:14,050 --> 00:54:17,890
some bug that turns out to be a

1159
00:54:15,099 --> 00:54:19,210
performance enhancer number two thank

1160
00:54:17,890 --> 00:54:21,368
you for picking an implementation that

1161
00:54:19,210 --> 00:54:23,319
as close as I know actually implements

1162
00:54:21,369 --> 00:54:25,510
the most current version of the recovery

1163
00:54:23,319 --> 00:54:26,920
and congestion control spec and so this

1164
00:54:25,510 --> 00:54:29,440
is sort of validating that what's in the

1165
00:54:26,920 --> 00:54:31,599
spec largely like works pretty well and

1166
00:54:29,440 --> 00:54:33,069
then the

1167
00:54:31,599 --> 00:54:34,499
it's just you know I think there are

1168
00:54:33,069 --> 00:54:37,288
some approaches that probably could

1169
00:54:34,499 --> 00:54:40,899
allow quick to perform better here

1170
00:54:37,289 --> 00:54:42,699
namely like and maybe TCP as well PBR

1171
00:54:40,900 --> 00:54:45,489
would be one of them there's a lot of

1172
00:54:42,699 --> 00:54:49,150
good events that perhaps are detrimental

1173
00:54:45,489 --> 00:54:50,529
to BB are not helpful and so that might

1174
00:54:49,150 --> 00:54:51,759
mitigate this but I'm sure there are

1175
00:54:50,529 --> 00:54:54,390
other things we could do as well but

1176
00:54:51,759 --> 00:54:58,359
thanks okay

1177
00:54:54,390 --> 00:55:04,420
great work gory please keep it up do you

1178
00:54:58,359 --> 00:55:07,598
know the weather aqm is in use in the

1179
00:55:04,420 --> 00:55:10,660
networks or any of this measurement they

1180
00:55:07,599 --> 00:55:11,739
were not in these experiments okay so

1181
00:55:10,660 --> 00:55:14,078
I'd be interested in seeing how that

1182
00:55:11,739 --> 00:55:16,900
compared and the other thing that I'd be

1183
00:55:14,079 --> 00:55:19,809
interested in in your future work

1184
00:55:16,900 --> 00:55:21,459
looking at is comparison of fairness on

1185
00:55:19,809 --> 00:55:25,269
the tour the terrestrial network on the

1186
00:55:21,459 --> 00:55:28,538
far side if how quick behaves compared

1187
00:55:25,269 --> 00:55:30,819
to sort of stock TCP yeah we should we

1188
00:55:28,539 --> 00:55:32,229
probably would put an emulator in series

1189
00:55:30,819 --> 00:55:33,729
with the actual satellite link to let

1190
00:55:32,229 --> 00:55:42,058
let's do some wireless effects and odd

1191
00:55:33,729 --> 00:55:47,468
things to concatenate two paths hey

1192
00:55:42,059 --> 00:55:48,339
Colin Perkins with no hats and first of

1193
00:55:47,469 --> 00:55:51,699
all thank you

1194
00:55:48,339 --> 00:55:54,788
great work I can a slightly like to echo

1195
00:55:51,699 --> 00:55:58,930
the point Christian was making ever seen

1196
00:55:54,789 --> 00:56:01,959
a lot of or heard a lot of people having

1197
00:55:58,930 --> 00:56:04,690
read particular papers which talk about

1198
00:56:01,959 --> 00:56:09,129
particular quick implementations wildly

1199
00:56:04,690 --> 00:56:10,989
over extrapolate the results and it's

1200
00:56:09,130 --> 00:56:13,509
something that that I don't know whether

1201
00:56:10,989 --> 00:56:16,749
it's this group or the quick group might

1202
00:56:13,509 --> 00:56:19,239
consider putting out a statement on how

1203
00:56:16,749 --> 00:56:23,410
to benchmark quick and how to report

1204
00:56:19,239 --> 00:56:27,130
results and how to how to describe what

1205
00:56:23,410 --> 00:56:30,848
you are benchmarking what you're

1206
00:56:27,130 --> 00:56:32,769
evaluating because I think it is harming

1207
00:56:30,849 --> 00:56:34,650
the perception of quick and what people

1208
00:56:32,769 --> 00:56:36,939
are doing experiments with very early

1209
00:56:34,650 --> 00:56:39,940
implementations of quick comparisons are

1210
00:56:36,940 --> 00:56:41,229
very highly up to most TCPS and writing

1211
00:56:39,940 --> 00:56:42,729
what looked like very general

1212
00:56:41,229 --> 00:56:44,149
conclusions when they're actually much

1213
00:56:42,729 --> 00:56:45,529
more specific yeah

1214
00:56:44,150 --> 00:56:48,310
that's one of the reason want to stand

1215
00:56:45,530 --> 00:56:50,990
up here because we pull quickly and

1216
00:56:48,310 --> 00:56:52,490
compile it and run the test so we want

1217
00:56:50,990 --> 00:56:53,930
to keep it way up to date and anything

1218
00:56:52,490 --> 00:56:55,399
we do is patching that because I think

1219
00:56:53,930 --> 00:56:58,850
that's the only way to do it if you're

1220
00:56:55,400 --> 00:57:01,040
benchmarking it now please don't use a G

1221
00:56:58,850 --> 00:57:03,200
quick benchmark as your baseline it's

1222
00:57:01,040 --> 00:57:04,640
different thing the things that moved on

1223
00:57:03,200 --> 00:57:06,830
we really need to make sure we track the

1224
00:57:04,640 --> 00:57:07,879
latest version in the quick way and we

1225
00:57:06,830 --> 00:57:11,569
really need to make sure that

1226
00:57:07,880 --> 00:57:13,070
publications writing about quick are

1227
00:57:11,570 --> 00:57:14,870
very specific about what they are

1228
00:57:13,070 --> 00:57:16,760
testing and what are the implications of

1229
00:57:14,870 --> 00:57:26,600
that yes I agree with that

1230
00:57:16,760 --> 00:57:28,250
thank you thanks much Cory okay next we

1231
00:57:26,600 --> 00:57:30,920
have eaten from Google actually talking

1232
00:57:28,250 --> 00:57:38,570
about the immigration to ITF quick which

1233
00:57:30,920 --> 00:57:41,120
is also quite exciting yes what I'm here

1234
00:57:38,570 --> 00:57:45,500
to talk about our migration towards ITF

1235
00:57:41,120 --> 00:57:49,220
quick from Google book so so where's

1236
00:57:45,500 --> 00:57:51,170
chrome now be 46 which is a Google quick

1237
00:57:49,220 --> 00:57:53,180
version that has no real meaning but

1238
00:57:51,170 --> 00:57:56,570
I'll explain to you approximately what

1239
00:57:53,180 --> 00:57:58,850
it is is now a default enabled we also

1240
00:57:56,570 --> 00:58:02,420
enable be 39 and 43 on the server at the

1241
00:57:58,850 --> 00:58:05,120
moment be 46 is in variants draft three

1242
00:58:02,420 --> 00:58:07,250
and below compatible and it has

1243
00:58:05,120 --> 00:58:08,750
transport draft nine packet types which

1244
00:58:07,250 --> 00:58:11,080
I think actually are maybe but still the

1245
00:58:08,750 --> 00:58:13,850
same packet types that we have now a

1246
00:58:11,080 --> 00:58:15,799
future version will be in variants for

1247
00:58:13,850 --> 00:58:17,150
compatible which is the new but that

1248
00:58:15,800 --> 00:58:19,190
changes everything by like one byte

1249
00:58:17,150 --> 00:58:21,350
which is a rather relatively minor

1250
00:58:19,190 --> 00:58:22,670
change technically but I'm sure when we

1251
00:58:21,350 --> 00:58:27,080
deploy that a bunch of other things will

1252
00:58:22,670 --> 00:58:29,600
break before t6 does if a quirk that

1253
00:58:27,080 --> 00:58:31,220
actually only supports Google quick

1254
00:58:29,600 --> 00:58:33,110
style eight byte connection IDs in one

1255
00:58:31,220 --> 00:58:35,240
direction and zero in the other that was

1256
00:58:33,110 --> 00:58:36,950
just a convenience because it allowed us

1257
00:58:35,240 --> 00:58:39,979
to delay if we went to call the variable

1258
00:58:36,950 --> 00:58:41,990
in connection IDs which took a ton of

1259
00:58:39,980 --> 00:58:45,020
time thank you david scamozzi i don't

1260
00:58:41,990 --> 00:58:49,669
know if you're here so the rest this

1261
00:58:45,020 --> 00:58:51,680
talk is all about b43 to be 46 so if if

1262
00:58:49,670 --> 00:58:53,510
you're wondering like what versions are

1263
00:58:51,680 --> 00:58:56,379
what transition is you talking about

1264
00:58:53,510 --> 00:58:56,380
that's what I'm talking about

1265
00:58:56,690 --> 00:59:00,200
the first thing is the change from

1266
00:58:58,250 --> 00:59:02,540
public reset so Google quick has an

1267
00:59:00,200 --> 00:59:03,950
unauthenticated public reset that sent

1268
00:59:02,540 --> 00:59:05,900
anytime you want to close a connection

1269
00:59:03,950 --> 00:59:07,910
and you don't have any state or you're

1270
00:59:05,900 --> 00:59:11,240
too lazy or whatever but basically it's

1271
00:59:07,910 --> 00:59:13,069
like a TCP reset - connection closed

1272
00:59:11,240 --> 00:59:17,060
during the handshake and a stateless

1273
00:59:13,070 --> 00:59:19,460
reset post handshake and idea so why is

1274
00:59:17,060 --> 00:59:21,470
this hard it turns out in our code we

1275
00:59:19,460 --> 00:59:24,050
have lots of spots we send a public

1276
00:59:21,470 --> 00:59:26,509
reset like well over ten I think it

1277
00:59:24,050 --> 00:59:29,000
turns out and each one had to be fixed

1278
00:59:26,510 --> 00:59:33,440
and tracked down and it just took a

1279
00:59:29,000 --> 00:59:35,870
while also why does it matter so

1280
00:59:33,440 --> 00:59:38,120
handshake timeouts and I all timeouts

1281
00:59:35,870 --> 00:59:39,859
are quite a bit longer than getting an

1282
00:59:38,120 --> 00:59:41,750
immediate reset in particular idle time

1283
00:59:39,860 --> 00:59:44,720
out of our default is 30 seconds right

1284
00:59:41,750 --> 00:59:46,550
now that's extremely user visible so you

1285
00:59:44,720 --> 00:59:48,980
know getting this wrong even like a few

1286
00:59:46,550 --> 00:59:52,310
percent of the time is a is a major

1287
00:59:48,980 --> 00:59:53,480
source of user visible like problems you

1288
00:59:52,310 --> 00:59:54,650
really want to close the connection as

1289
00:59:53,480 --> 00:59:59,270
quickly as possible any sort of

1290
00:59:54,650 --> 01:00:00,830
circumstances so when this and what and

1291
00:59:59,270 --> 01:00:02,240
do you quick if we have no state we just

1292
01:00:00,830 --> 01:00:05,750
send a public reset that's pretty

1293
01:00:02,240 --> 01:00:08,180
straightforward ITF quick header in

1294
01:00:05,750 --> 01:00:09,920
their state you send a Salus reset if

1295
01:00:08,180 --> 01:00:11,330
it's a long header no state and its

1296
01:00:09,920 --> 01:00:13,040
initial we try to start creating a

1297
01:00:11,330 --> 01:00:15,650
connection it's a long header in those

1298
01:00:13,040 --> 01:00:17,240
state and it's handshake we send an

1299
01:00:15,650 --> 01:00:19,190
initial close and hoping that they still

1300
01:00:17,240 --> 01:00:21,500
have pinche our initial keys which is

1301
01:00:19,190 --> 01:00:23,780
sort of a you know I hope but it works

1302
01:00:21,500 --> 01:00:25,340
in G quick at the moment and the

1303
01:00:23,780 --> 01:00:27,620
Persians not supported it's worth we

1304
01:00:25,340 --> 01:00:29,930
send VN there are definitely some quirks

1305
01:00:27,620 --> 01:00:32,270
here where you can get into this

1306
01:00:29,930 --> 01:00:33,740
situation in the final version of IETF

1307
01:00:32,270 --> 01:00:35,420
quick where you start receiving

1308
01:00:33,740 --> 01:00:37,729
handshake packets and you're like there

1309
01:00:35,420 --> 01:00:38,960
is nothing I can guarantee to send in

1310
01:00:37,730 --> 01:00:41,090
response that might close this

1311
01:00:38,960 --> 01:00:42,410
connection quickly and so you just have

1312
01:00:41,090 --> 01:00:44,000
to send initial because it's the only

1313
01:00:42,410 --> 01:00:45,620
thing you have a keyboard

1314
01:00:44,000 --> 01:00:49,220
hopefully that will not turn out to be a

1315
01:00:45,620 --> 01:00:52,040
practical issue so let's talk about

1316
01:00:49,220 --> 01:00:53,600
quick identification it turns out at

1317
01:00:52,040 --> 01:00:55,580
least one major company and increasingly

1318
01:00:53,600 --> 01:00:58,100
more large companies are trying to do

1319
01:00:55,580 --> 01:00:59,900
quick identification sometimes this is

1320
01:00:58,100 --> 01:01:02,930
to just give you network monitoring

1321
01:00:59,900 --> 01:01:06,320
tools like your network is this much HBS

1322
01:01:02,930 --> 01:01:08,089
and this much you know quick in this

1323
01:01:06,320 --> 01:01:09,720
much DNS and this much although other

1324
01:01:08,090 --> 01:01:12,960
stuff and so

1325
01:01:09,720 --> 01:01:14,970
it's also for selective traffic you know

1326
01:01:12,960 --> 01:01:18,240
and enforcement basically like I want to

1327
01:01:14,970 --> 01:01:20,609
disable quick or I wanted disable quick

1328
01:01:18,240 --> 01:01:25,259
if I can't get BS anion which we'll talk

1329
01:01:20,610 --> 01:01:27,240
about later so be 46 when you started

1330
01:01:25,260 --> 01:01:30,390
rolling about at a very large increase

1331
01:01:27,240 --> 01:01:34,470
in post hinchik black horn so it was

1332
01:01:30,390 --> 01:01:37,170
about 2 X be 43 I'll explain it a little

1333
01:01:34,470 --> 01:01:37,980
bit later how we determine post and

1334
01:01:37,170 --> 01:01:39,660
shape by :

1335
01:01:37,980 --> 01:01:41,040
but again this is one of those things we

1336
01:01:39,660 --> 01:01:43,259
draw closely because it's very user

1337
01:01:41,040 --> 01:01:44,910
visible and waiting 30 seconds for your

1338
01:01:43,260 --> 01:01:46,490
connection to timeout before reissuing

1339
01:01:44,910 --> 01:01:49,710
the request of our new connection is

1340
01:01:46,490 --> 01:01:52,020
really really painful it also turns out

1341
01:01:49,710 --> 01:01:54,210
historically these have been user

1342
01:01:52,020 --> 01:01:57,060
focused so a given user will experience

1343
01:01:54,210 --> 01:01:58,770
this all the time and the other 99.9% of

1344
01:01:57,060 --> 01:02:01,590
the population will never ever

1345
01:01:58,770 --> 01:02:03,000
experience this so it's not like every

1346
01:02:01,590 --> 01:02:05,280
once in a while a web page is slow it's

1347
01:02:03,000 --> 01:02:09,750
like one user is having like a bad month

1348
01:02:05,280 --> 01:02:13,980
or a bad year so understandably we don't

1349
01:02:09,750 --> 01:02:15,720
like this the confounding factor is

1350
01:02:13,980 --> 01:02:18,900
sometimes the network just goes away

1351
01:02:15,720 --> 01:02:21,870
right like this happens and so we have

1352
01:02:18,900 --> 01:02:23,580
this base level of noise that we assume

1353
01:02:21,870 --> 01:02:26,040
is the network going away but we have no

1354
01:02:23,580 --> 01:02:27,360
real proof it's it's a very you never

1355
01:02:26,040 --> 01:02:28,890
getting this to zero right like

1356
01:02:27,360 --> 01:02:31,080
especially with mobile devices like

1357
01:02:28,890 --> 01:02:32,520
Android and other things and this height

1358
01:02:31,080 --> 01:02:37,650
is higher on Android for understandable

1359
01:02:32,520 --> 01:02:40,230
reasons right however on April 13th that

1360
01:02:37,650 --> 01:02:41,970
suddenly fixed itself like a or

1361
01:02:40,230 --> 01:02:43,530
basically fix itself I mean there's a

1362
01:02:41,970 --> 01:02:46,740
little bit of a gap there but it went

1363
01:02:43,530 --> 01:02:51,090
from 2 X 2 like 1.1 X over the course of

1364
01:02:46,740 --> 01:02:53,370
a weekend and we didn't change anything

1365
01:02:51,090 --> 01:03:01,200
because we don't things out of our

1366
01:02:53,370 --> 01:03:03,000
weekend let's first talk about what what

1367
01:03:01,200 --> 01:03:06,439
too many are tears and then we can tell

1368
01:03:03,000 --> 01:03:08,670
you what happened on the fifth RTO

1369
01:03:06,440 --> 01:03:11,280
ng-click we found that that was a

1370
01:03:08,670 --> 01:03:14,100
reasonable signal for closing the

1371
01:03:11,280 --> 01:03:15,930
connection kazoo is black hold as I know

1372
01:03:14,100 --> 01:03:17,640
at the bottom 5 RTO is and our current

1373
01:03:15,930 --> 01:03:19,080
implementation is kind of comparable to

1374
01:03:17,640 --> 01:03:23,549
seven RTOS

1375
01:03:19,080 --> 01:03:25,230
in you know linux which i think is some

1376
01:03:23,550 --> 01:03:27,810
time's configured as a default so you

1377
01:03:25,230 --> 01:03:29,400
know we're not so far off we sort of

1378
01:03:27,810 --> 01:03:30,600
stumbled upon this by accident because

1379
01:03:29,400 --> 01:03:33,150
we were just having some unrelated

1380
01:03:30,600 --> 01:03:35,490
issues but it's enabled by default on

1381
01:03:33,150 --> 01:03:37,320
Chrome desktop definitely your heuristic

1382
01:03:35,490 --> 01:03:38,700
we could probably do better but it turns

1383
01:03:37,320 --> 01:03:39,930
out if you bump it up to six you're so

1384
01:03:38,700 --> 01:03:41,640
close to the idle time out it doesn't

1385
01:03:39,930 --> 01:03:43,080
really save you much and if you make it

1386
01:03:41,640 --> 01:03:44,220
any shorter you do occasionally just

1387
01:03:43,080 --> 01:03:48,600
kill a connection that you don't really

1388
01:03:44,220 --> 01:03:50,100
mean to so Bates we're rare but this is

1389
01:03:48,600 --> 01:03:51,660
sort of our proxy for like black holing

1390
01:03:50,100 --> 01:03:53,700
and it's it's worked out to be a pretty

1391
01:03:51,660 --> 01:03:55,879
good indicator and in this case it's a

1392
01:03:53,700 --> 01:03:58,680
better indicator than we thought it was

1393
01:03:55,880 --> 01:04:00,180
so when you started debugging this we're

1394
01:03:58,680 --> 01:04:02,399
like how can we get more data about when

1395
01:04:00,180 --> 01:04:04,109
this is happening in a connection and

1396
01:04:02,400 --> 01:04:05,670
one of our team members have the great

1397
01:04:04,110 --> 01:04:07,470
idea that we should add the number of

1398
01:04:05,670 --> 01:04:09,840
connections sorry number of packets that

1399
01:04:07,470 --> 01:04:11,459
have been sent or received before

1400
01:04:09,840 --> 01:04:13,950
closing the connection due to too many

1401
01:04:11,460 --> 01:04:16,470
RTS and on the client side the receive

1402
01:04:13,950 --> 01:04:18,359
metric was was very indicative as you

1403
01:04:16,470 --> 01:04:21,060
can see all the extra black holing

1404
01:04:18,360 --> 01:04:24,180
energy is all between two three and four

1405
01:04:21,060 --> 01:04:25,529
packets so basically if you got in

1406
01:04:24,180 --> 01:04:27,839
packet five like the rest of the

1407
01:04:25,530 --> 01:04:30,480
connection is set you are all good to go

1408
01:04:27,840 --> 01:04:31,860
and if you didn't get pack at five then

1409
01:04:30,480 --> 01:04:32,940
you're gonna have a bad time wait 30

1410
01:04:31,860 --> 01:04:34,140
seconds

1411
01:04:32,940 --> 01:04:36,090
unfortunately this typically happens

1412
01:04:34,140 --> 01:04:37,770
after you've completed the handshake

1413
01:04:36,090 --> 01:04:40,920
because four packets is more than enough

1414
01:04:37,770 --> 01:04:42,840
to complete the handshake in Google

1415
01:04:40,920 --> 01:04:44,600
quick so typically the difference

1416
01:04:42,840 --> 01:04:47,130
between two and three and four is like

1417
01:04:44,600 --> 01:04:51,210
this is a case of you don't do zero RTT

1418
01:04:47,130 --> 01:04:52,710
you get a packet and then that's a

1419
01:04:51,210 --> 01:04:54,570
reject and then you do burn a round-trip

1420
01:04:52,710 --> 01:04:55,650
and then it sends you to the cert and

1421
01:04:54,570 --> 01:04:57,510
that's somewhere between one and three

1422
01:04:55,650 --> 01:04:59,400
packets just as an explanation so that's

1423
01:04:57,510 --> 01:05:01,350
why sometimes two three or four but they

1424
01:04:59,400 --> 01:05:03,090
said basically this is like two flights

1425
01:05:01,350 --> 01:05:07,890
of packets and then like whatever it is

1426
01:05:03,090 --> 01:05:09,360
is blocking traffic okay yeah so it

1427
01:05:07,890 --> 01:05:12,060
turned out to be quick them in a box

1428
01:05:09,360 --> 01:05:13,410
identification suddenly improved when a

1429
01:05:12,060 --> 01:05:17,520
vendor updated their identification

1430
01:05:13,410 --> 01:05:19,319
software so happily most users of the

1431
01:05:17,520 --> 01:05:21,780
software update or middle box update

1432
01:05:19,320 --> 01:05:25,500
weekly we recently found out a few do

1433
01:05:21,780 --> 01:05:27,720
not be aware of this because you know

1434
01:05:25,500 --> 01:05:30,540
it's been fixed for a few months but

1435
01:05:27,720 --> 01:05:32,069
some particular individuals did not have

1436
01:05:30,540 --> 01:05:34,529
it fixed in their local instance so you

1437
01:05:32,070 --> 01:05:36,120
know if you're in the future if you're

1438
01:05:34,530 --> 01:05:37,230
debugging random quick issues and you're

1439
01:05:36,120 --> 01:05:39,150
like well I think this was fixed

1440
01:05:37,230 --> 01:05:40,650
by this vendor like months ago be aware

1441
01:05:39,150 --> 01:05:44,280
that there is sometimes a long tail of

1442
01:05:40,650 --> 01:05:45,630
updates and it was impossible to

1443
01:05:44,280 --> 01:05:46,950
diagnose because it worse like we talked

1444
01:05:45,630 --> 01:05:49,050
on tactic the vendor and they're like

1445
01:05:46,950 --> 01:05:51,720
law it's fixed and we contacted the user

1446
01:05:49,050 --> 01:05:55,320
and they're like my life is terrible and

1447
01:05:51,720 --> 01:05:56,939
we appreciate both perspectives and so

1448
01:05:55,320 --> 01:05:58,230
let's talk about how to block quick if I

1449
01:05:56,940 --> 01:06:00,000
was gonna ask you to block quick because

1450
01:05:58,230 --> 01:06:01,260
like this is sort of a favor and I'm not

1451
01:06:00,000 --> 01:06:02,790
saying anyone's going to change what

1452
01:06:01,260 --> 01:06:04,619
they do but you're really cool if you

1453
01:06:02,790 --> 01:06:06,330
did if you're gonna block it can you

1454
01:06:04,619 --> 01:06:08,609
ensure that all packets in one direction

1455
01:06:06,330 --> 01:06:09,990
or the other are blocked like doesn't

1456
01:06:08,609 --> 01:06:11,790
matter which direction like don't care

1457
01:06:09,990 --> 01:06:12,810
you can let all the client packets go

1458
01:06:11,790 --> 01:06:14,430
through and drop all those server

1459
01:06:12,810 --> 01:06:18,480
packets that's fine

1460
01:06:14,430 --> 01:06:20,430
just try to drop all of them because

1461
01:06:18,480 --> 01:06:22,470
anything else is really user visible and

1462
01:06:20,430 --> 01:06:24,779
chrome now has some heuristics to try to

1463
01:06:22,470 --> 01:06:28,160
avoid networks like this and avoid using

1464
01:06:24,780 --> 01:06:33,020
click on them but it basically goes from

1465
01:06:28,160 --> 01:06:36,480
consistent and utter failure to flaky

1466
01:06:33,020 --> 01:06:39,480
hangouts or hangs and connection like

1467
01:06:36,480 --> 01:06:41,369
loads followed by like it works suddenly

1468
01:06:39,480 --> 01:06:43,980
and you don't know why so it goes just

1469
01:06:41,369 --> 01:06:45,690
basically from failure to flaky it's not

1470
01:06:43,980 --> 01:06:50,970
fixing the problem it's like a flaky

1471
01:06:45,690 --> 01:06:52,590
test for our only test so the other one

1472
01:06:50,970 --> 01:06:55,859
I wanted to talk about from V 43 to be

1473
01:06:52,590 --> 01:06:57,450
46 is antivirus blocking suddenly we

1474
01:06:55,859 --> 01:06:59,150
noticed that the usage of quick on

1475
01:06:57,450 --> 01:07:01,230
window has dropped

1476
01:06:59,150 --> 01:07:04,140
we eventually actually traced it to a

1477
01:07:01,230 --> 01:07:05,910
single company at the time we found this

1478
01:07:04,140 --> 01:07:07,529
out v 46 wasn't blocked so we're like

1479
01:07:05,910 --> 01:07:09,660
hey maybe they read the CFM variants

1480
01:07:07,530 --> 01:07:11,070
graphed and said not to drop the idea

1481
01:07:09,660 --> 01:07:12,990
from variant correct but decided to drop

1482
01:07:11,070 --> 01:07:15,119
Google quick I mean this is like me like

1483
01:07:12,990 --> 01:07:18,209
thinking my most optimistic thought this

1484
01:07:15,119 --> 01:07:20,430
was not true this was just completely

1485
01:07:18,210 --> 01:07:22,470
false we turned on V 46 and two weeks

1486
01:07:20,430 --> 01:07:27,330
later they like stopped started walking

1487
01:07:22,470 --> 01:07:28,709
that and the last thing is anytime you

1488
01:07:27,330 --> 01:07:30,690
change the location of sni you're gonna

1489
01:07:28,710 --> 01:07:31,950
break a bunch of stuff there's a few

1490
01:07:30,690 --> 01:07:33,750
more versions left so we're gonna

1491
01:07:31,950 --> 01:07:35,250
probably break some other things and I'm

1492
01:07:33,750 --> 01:07:38,940
really sorry and it's a hard transition

1493
01:07:35,250 --> 01:07:42,750
but we we're trying to do this as fast

1494
01:07:38,940 --> 01:07:45,470
as we can okay so I'll stop and give

1495
01:07:42,750 --> 01:07:45,470
questions

1496
01:07:46,910 --> 01:07:52,640
is that your last leg yes that is my

1497
01:07:50,509 --> 01:07:54,380
last word thank thank you heal from

1498
01:07:52,640 --> 01:07:57,589
bringing this bringing this here this is

1499
01:07:54,380 --> 01:07:58,339
something that I been sort of sitting on

1500
01:07:57,589 --> 01:08:00,859
the edge of my seat

1501
01:07:58,339 --> 01:08:03,529
for a while to watch what happens when

1502
01:08:00,859 --> 01:08:07,609
the G quick format changes and as

1503
01:08:03,529 --> 01:08:09,890
expected it's already been ossified this

1504
01:08:07,609 --> 01:08:11,390
is this is like this is exactly what we

1505
01:08:09,890 --> 01:08:13,400
were afraid of and this is exactly what

1506
01:08:11,390 --> 01:08:15,618
you worried about and it seems like

1507
01:08:13,400 --> 01:08:19,880
maybe some of them are actually doing

1508
01:08:15,619 --> 01:08:22,339
updates which is promising but that's

1509
01:08:19,880 --> 01:08:23,989
something that you mentioned so the the

1510
01:08:22,339 --> 01:08:29,299
point that you are showing there with

1511
01:08:23,988 --> 01:08:32,209
the energy in too many audios is is in

1512
01:08:29,299 --> 01:08:33,889
the early key packets there so that

1513
01:08:32,210 --> 01:08:35,480
suggests a particular type of behavior

1514
01:08:33,889 --> 01:08:37,270
in middle box right where they allow a

1515
01:08:35,479 --> 01:08:40,879
few packets to go through and then die

1516
01:08:37,270 --> 01:08:42,440
and we've we've seen this before and I

1517
01:08:40,880 --> 01:08:44,270
wonder if this is actually it's

1518
01:08:42,439 --> 01:08:45,948
important enough now I mean missing this

1519
01:08:44,270 --> 01:08:47,989
again here and then one thing this is

1520
01:08:45,948 --> 01:08:49,939
important enough that this is the sort

1521
01:08:47,988 --> 01:08:52,309
of thing that you want to protect

1522
01:08:49,939 --> 01:08:53,629
against meaning that if if we keep

1523
01:08:52,310 --> 01:08:54,739
thinking that all packets are going to

1524
01:08:53,630 --> 01:08:57,319
go through or none of them are going to

1525
01:08:54,738 --> 01:08:58,698
go through it may not be it may not be

1526
01:08:57,319 --> 01:09:00,589
compatible with the way that middle

1527
01:08:58,698 --> 01:09:01,849
boxes build their architecture because I

1528
01:09:00,589 --> 01:09:03,649
imagine that some of this is basically

1529
01:09:01,850 --> 01:09:05,120
like you know the forwarding thread sort

1530
01:09:03,649 --> 01:09:06,469
of parting it passing it on to a

1531
01:09:05,120 --> 01:09:08,839
different thing that actually goes off

1532
01:09:06,469 --> 01:09:10,549
to do detection of what type of packet

1533
01:09:08,839 --> 01:09:12,408
this is and by the time that completes

1534
01:09:10,549 --> 01:09:15,049
and comes back you already forwarded a

1535
01:09:12,408 --> 01:09:16,580
few packets I'm not sure exactly what's

1536
01:09:15,049 --> 01:09:21,170
causing it to happen but we've seen this

1537
01:09:16,580 --> 01:09:22,880
it may be worthwhile two things it may

1538
01:09:21,170 --> 01:09:25,940
be worthwhile actually documenting some

1539
01:09:22,880 --> 01:09:27,889
of this detection for others to also be

1540
01:09:25,939 --> 01:09:30,710
able to use I think it's super useful

1541
01:09:27,889 --> 01:09:32,359
for non chromium clients to be able to

1542
01:09:30,710 --> 01:09:34,310
build this sort of detection the second

1543
01:09:32,359 --> 01:09:38,089
I wonder if this is something we can

1544
01:09:34,310 --> 01:09:40,790
specifically detect as behavior and use

1545
01:09:38,089 --> 01:09:42,738
for failover in Chrome yeah we've

1546
01:09:40,790 --> 01:09:47,089
thought about specifically detecting it

1547
01:09:42,738 --> 01:09:49,158
but it turns out the so far we've only

1548
01:09:47,089 --> 01:09:51,109
observed one vendor actually doing this

1549
01:09:49,158 --> 01:09:54,019
and so we can email them and ask them to

1550
01:09:51,109 --> 01:09:56,420
fix it usually and so we've done that

1551
01:09:54,020 --> 01:09:58,070
and because the concern is otherwise

1552
01:09:56,420 --> 01:10:00,130
we're aspiring the protocol on this

1553
01:09:58,070 --> 01:10:03,130
weird thing where we have this

1554
01:10:00,130 --> 01:10:05,800
workaround feature and then we're stuck

1555
01:10:03,130 --> 01:10:07,389
with that sort of forever and so and

1556
01:10:05,800 --> 01:10:09,610
everyone else has to build it too so I

1557
01:10:07,389 --> 01:10:11,320
mean I guess I'd be okay if Kron had to

1558
01:10:09,610 --> 01:10:12,820
edit because you know were early

1559
01:10:11,320 --> 01:10:14,710
adopters and we're pushing things but

1560
01:10:12,820 --> 01:10:17,259
like if every quick client on earth had

1561
01:10:14,710 --> 01:10:19,920
to add like a bunch of extra heuristics

1562
01:10:17,260 --> 01:10:22,989
for the rest of time that because sad

1563
01:10:19,920 --> 01:10:25,360
thank you so you don't have any insights

1564
01:10:22,989 --> 01:10:28,928
why this behavior of this window showed

1565
01:10:25,360 --> 01:10:30,639
up sir because you said it's one winter

1566
01:10:28,929 --> 01:10:33,489
but you don't have any insights what the

1567
01:10:30,639 --> 01:10:34,960
intention was there and the intention in

1568
01:10:33,489 --> 01:10:36,638
this case was they had a Enterprise

1569
01:10:34,960 --> 01:10:38,620
policy they had both monitoring consoles

1570
01:10:36,639 --> 01:10:42,610
and an enterprise policy and enterprise

1571
01:10:38,620 --> 01:10:44,739
policy allowed you to drop quick and the

1572
01:10:42,610 --> 01:10:45,969
way they drop unknown protocols is they

1573
01:10:44,739 --> 01:10:48,370
give it a few packets in each direction

1574
01:10:45,969 --> 01:10:49,570
and then if after two or three packets

1575
01:10:48,370 --> 01:10:52,510
they haven't figured out what protocol

1576
01:10:49,570 --> 01:10:55,210
it is then they start dropping it and so

1577
01:10:52,510 --> 01:10:57,219
quick classified in be 46 as an unknown

1578
01:10:55,210 --> 01:10:58,960
critical and then get into this weird

1579
01:10:57,219 --> 01:11:00,550
bin so that's the other thing I was

1580
01:10:58,960 --> 01:11:03,940
going to comment is this isn't good for

1581
01:11:00,550 --> 01:11:05,620
like any transport I seriously like like

1582
01:11:03,940 --> 01:11:08,739
unis people are thought like whether

1583
01:11:05,620 --> 01:11:10,870
it's you know SCTP over DT OS like all

1584
01:11:08,739 --> 01:11:12,250
these things have the property that like

1585
01:11:10,870 --> 01:11:13,449
if you complete the handshake and then

1586
01:11:12,250 --> 01:11:16,239
black hole it it's going to be like a

1587
01:11:13,449 --> 01:11:18,040
really bad time so for the general

1588
01:11:16,239 --> 01:11:19,750
interest of transport innovation on UDP

1589
01:11:18,040 --> 01:11:22,900
across the entire internet I would like

1590
01:11:19,750 --> 01:11:24,070
people to try to avoid doing this it's

1591
01:11:22,900 --> 01:11:27,009
not just for quick I mean this isn't

1592
01:11:24,070 --> 01:11:29,679
just for us this is a little bit more

1593
01:11:27,010 --> 01:11:31,360
yeah it's basically it seems like so

1594
01:11:29,679 --> 01:11:33,730
what I what I've seen people talk about

1595
01:11:31,360 --> 01:11:35,440
is that there are console on the console

1596
01:11:33,730 --> 01:11:38,019
of the middle box it basically says

1597
01:11:35,440 --> 01:11:40,419
packet received cannot classify cannot

1598
01:11:38,020 --> 01:11:42,070
classify and then it drops it so it's

1599
01:11:40,420 --> 01:11:44,139
possible that it's you know trying to do

1600
01:11:42,070 --> 01:11:46,059
some classification on a separate thread

1601
01:11:44,139 --> 01:11:48,489
and that it eventually times out or

1602
01:11:46,060 --> 01:11:51,850
gives up and then says I am done and

1603
01:11:48,489 --> 01:11:54,669
then it decides black hole but yeah this

1604
01:11:51,850 --> 01:11:56,139
is a huge issue unfortunately the people

1605
01:11:54,670 --> 01:11:59,260
who can change this aren't necessarily

1606
01:11:56,139 --> 01:12:01,239
in this room which is the frustration we

1607
01:11:59,260 --> 01:12:02,409
cut the line and we would like to people

1608
01:12:01,239 --> 01:12:03,730
to hurry up a little bit and if you're

1609
01:12:02,409 --> 01:12:07,750
quick you can still join the line but

1610
01:12:03,730 --> 01:12:10,259
please be quick all right thank you for

1611
01:12:07,750 --> 01:12:12,940
sharing this I'll try to be quick here

1612
01:12:10,260 --> 01:12:14,120
first of all a question when we see the

1613
01:12:12,940 --> 01:12:16,730
black holing is it

1614
01:12:14,120 --> 01:12:18,860
only on a per connection basis it's not

1615
01:12:16,730 --> 01:12:22,040
really like across the whole device to

1616
01:12:18,860 --> 01:12:25,389
the IP typically it is actually across

1617
01:12:22,040 --> 01:12:28,070
all the connections for that like

1618
01:12:25,390 --> 01:12:29,990
basically like every quick connection on

1619
01:12:28,070 --> 01:12:32,900
that hoe starts getting black hold yeah

1620
01:12:29,990 --> 01:12:34,160
okay because because it's a middle box

1621
01:12:32,900 --> 01:12:35,540
we're all quick connections are going

1622
01:12:34,160 --> 01:12:38,510
through yeah so it's it's sort of a

1623
01:12:35,540 --> 01:12:39,650
host-based not based thing yeah cuz

1624
01:12:38,510 --> 01:12:41,600
you'd mention the kind like the

1625
01:12:39,650 --> 01:12:42,980
background level because we're always

1626
01:12:41,600 --> 01:12:46,010
gonna have some things that happen to

1627
01:12:42,980 --> 01:12:48,139
drop off after four packets but it's not

1628
01:12:46,010 --> 01:12:50,630
really possible then to look at kind of

1629
01:12:48,140 --> 01:12:52,190
all the parallel connections and you can

1630
01:12:50,630 --> 01:12:54,020
see if oh if this other connection

1631
01:12:52,190 --> 01:12:55,730
dropped off and it was further along

1632
01:12:54,020 --> 01:12:57,550
maybe that's just a network impairment

1633
01:12:55,730 --> 01:13:01,280
but that would not work in this case

1634
01:12:57,550 --> 01:13:02,660
yeah I mean we don't really mean our

1635
01:13:01,280 --> 01:13:04,340
client side is not fine enough grain to

1636
01:13:02,660 --> 01:13:06,080
actually even prove that back but yeah I

1637
01:13:04,340 --> 01:13:07,460
don't know yeah unfortunate I think we

1638
01:13:06,080 --> 01:13:08,330
can say for sure whether or not that's

1639
01:13:07,460 --> 01:13:10,130
true yeah

1640
01:13:08,330 --> 01:13:11,570
I burn a trammel quick question I'll

1641
01:13:10,130 --> 01:13:14,930
take the rest of this offline probably

1642
01:13:11,570 --> 01:13:16,309
as the co-editor of the quick

1643
01:13:14,930 --> 01:13:17,510
manageability drop I'm gonna follow you

1644
01:13:16,310 --> 01:13:21,770
a couple of issues to take this

1645
01:13:17,510 --> 01:13:25,610
presentation into that draft the so you

1646
01:13:21,770 --> 01:13:27,170
said that the dropping all of the

1647
01:13:25,610 --> 01:13:28,519
packets for a connection is much better

1648
01:13:27,170 --> 01:13:30,140
than dropping some of the package for

1649
01:13:28,520 --> 01:13:31,400
the connection from user visibility

1650
01:13:30,140 --> 01:13:32,720
that's kind of obvious and I think we

1651
01:13:31,400 --> 01:13:35,120
should actually kind of write that down

1652
01:13:32,720 --> 01:13:38,420
and yell it from the tree cops in the

1653
01:13:35,120 --> 01:13:39,800
IETF and then you said that like so for

1654
01:13:38,420 --> 01:13:41,540
one of these you're basically you get

1655
01:13:39,800 --> 01:13:44,330
the first three packets and then you

1656
01:13:41,540 --> 01:13:45,560
drop are you seeing other things where

1657
01:13:44,330 --> 01:13:47,480
you basically get like intermittent

1658
01:13:45,560 --> 01:13:51,170
drops after you have actually like spun

1659
01:13:47,480 --> 01:13:52,190
up data um like so data channels like

1660
01:13:51,170 --> 01:13:53,510
you get like you know you get some

1661
01:13:52,190 --> 01:13:54,950
actual data it's like oh great great

1662
01:13:53,510 --> 01:13:56,510
now quick works and then you drop every

1663
01:13:54,950 --> 01:13:57,800
other packet or I mean like look can you

1664
01:13:56,510 --> 01:14:00,170
characterize a little bit more the kind

1665
01:13:57,800 --> 01:14:02,960
of drop patterns that you're seeing we

1666
01:14:00,170 --> 01:14:04,960
we do see some level of other like well

1667
01:14:02,960 --> 01:14:08,270
post inject dropouts yeah

1668
01:14:04,960 --> 01:14:10,970
anecdotally it seems to mostly be not

1669
01:14:08,270 --> 01:14:13,700
related we're out in nap times I was in

1670
01:14:10,970 --> 01:14:16,460
that poor and the fix for that is if you

1671
01:14:13,700 --> 01:14:19,250
like typically happens in the following

1672
01:14:16,460 --> 01:14:21,350
circumstance it's more like the than

1673
01:14:19,250 --> 01:14:22,610
that times out the server is sending a

1674
01:14:21,350 --> 01:14:24,650
bunch of packets to the client the

1675
01:14:22,610 --> 01:14:26,509
client stops sending for some period of

1676
01:14:24,650 --> 01:14:27,449
time and the net timeout instead of

1677
01:14:26,510 --> 01:14:29,910
being a you see

1678
01:14:27,449 --> 01:14:31,980
timeout is a fixed timeout so it's like

1679
01:14:29,910 --> 01:14:34,050
yeah you know at 60 seconds I'm going to

1680
01:14:31,980 --> 01:14:36,419
time out this UDP like a couple instead

1681
01:14:34,050 --> 01:14:38,460
of after 60 seconds of idle I will do

1682
01:14:36,420 --> 01:14:39,960
this I then then just send a ping to

1683
01:14:38,460 --> 01:14:41,520
reopen it I mean totally seem quite a

1684
01:14:39,960 --> 01:14:42,719
bit of that on non quick traffic as well

1685
01:14:41,520 --> 01:14:44,100
so there's like there's some there's

1686
01:14:42,719 --> 01:14:45,179
something that's in Java and the college

1687
01:14:44,100 --> 01:14:46,830
is another okay cool

1688
01:14:45,179 --> 01:14:54,900
it's not super common but it does happen

1689
01:14:46,830 --> 01:14:56,340
yeah okay so we see that you guys ask a

1690
01:14:54,900 --> 01:14:57,960
lot of great questions we have 50

1691
01:14:56,340 --> 01:14:59,310
minutes of content this fit into 45

1692
01:14:57,960 --> 01:15:02,400
minutes right now so we're gonna ask

1693
01:14:59,310 --> 01:15:04,050
Alexander who had 22 maybe 17 minutes or

1694
01:15:02,400 --> 01:15:06,030
something like that and similar for

1695
01:15:04,050 --> 01:15:07,560
Roland afterwards you cut a few minutes

1696
01:15:06,030 --> 01:15:10,290
off so that people can ask you questions

1697
01:15:07,560 --> 01:15:12,480
but otherwise uh up next is Alexander

1698
01:15:10,290 --> 01:15:21,590
about packet loss signaling for

1699
01:15:12,480 --> 01:15:26,040
encrypted protocols thank you so I will

1700
01:15:21,590 --> 01:15:29,400
we have as an operator we have the day

1701
01:15:26,040 --> 01:15:34,800
to take issue of what to do to locate

1702
01:15:29,400 --> 01:15:37,589
losses it may seem a bit strange but we

1703
01:15:34,800 --> 01:15:39,870
are not completely aware of what happens

1704
01:15:37,590 --> 01:15:43,050
in all nodes of our networks that's a

1705
01:15:39,870 --> 01:15:45,780
day to day truth so maybe for many

1706
01:15:43,050 --> 01:15:47,790
people networks are just dumb pipes but

1707
01:15:45,780 --> 01:15:50,460
it's only true if someone can look at

1708
01:15:47,790 --> 01:15:52,320
all the nodes and if you get some

1709
01:15:50,460 --> 01:15:54,239
Oh am I'm something that tells you okay

1710
01:15:52,320 --> 01:15:56,250
I got some drops on that interface and

1711
01:15:54,239 --> 01:15:59,070
you have app sorry no blind spots it

1712
01:15:56,250 --> 01:16:02,040
might work but in real world in the real

1713
01:15:59,070 --> 01:16:03,660
world it's not the case so what we do is

1714
01:16:02,040 --> 01:16:05,940
typically we do some liquor to me

1715
01:16:03,660 --> 01:16:08,699
we use some observer in the middle of

1716
01:16:05,940 --> 01:16:10,710
the path and try to say if some problem

1717
01:16:08,699 --> 01:16:14,009
occurs upstream or downstream from that

1718
01:16:10,710 --> 01:16:15,600
point and then reiterate we do this in a

1719
01:16:14,010 --> 01:16:18,960
day to day basis and have been done so

1720
01:16:15,600 --> 01:16:21,870
fro 30 years on TCP obviously using

1721
01:16:18,960 --> 01:16:22,890
sequence number and X that's trivial but

1722
01:16:21,870 --> 01:16:28,530
what do we do with the encrypted

1723
01:16:22,890 --> 01:16:31,020
transport very quick that's a much

1724
01:16:28,530 --> 01:16:32,940
tougher of course so quick as you may

1725
01:16:31,020 --> 01:16:36,390
know has something for RT t

1726
01:16:32,940 --> 01:16:40,889
measuring RTG with the spin bit but

1727
01:16:36,390 --> 01:16:44,730
nothing for us for now so we've got a

1728
01:16:40,890 --> 01:16:46,890
proposal to to solve the problem which

1729
01:16:44,730 --> 01:16:50,129
is that based on only two lost bits

1730
01:16:46,890 --> 01:16:52,560
which we named Q and L the Q which is

1731
01:16:50,130 --> 01:16:55,260
square signal and L which is the lost

1732
01:16:52,560 --> 01:16:58,470
Evan signal the square signal is just

1733
01:16:55,260 --> 01:17:01,260
one toggle every n packets so that's

1734
01:16:58,470 --> 01:17:04,590
like you're the one the alternate packet

1735
01:17:01,260 --> 01:17:08,040
packet marking also something mentioned

1736
01:17:04,590 --> 01:17:13,500
by kazuo yeah a year ago about earlier

1737
01:17:08,040 --> 01:17:15,630
in earlier loss detection discussions so

1738
01:17:13,500 --> 01:17:18,240
the U cube it is just flipped every N

1739
01:17:15,630 --> 01:17:19,710
packets so when you look at it at a

1740
01:17:18,240 --> 01:17:21,750
middle point you just count the

1741
01:17:19,710 --> 01:17:22,260
sequences and know how many packets have

1742
01:17:21,750 --> 01:17:25,140
been lost

1743
01:17:22,260 --> 01:17:28,290
upstream from the points the last seven

1744
01:17:25,140 --> 01:17:31,980
bit is fed by the stack itself and set

1745
01:17:28,290 --> 01:17:35,400
to 1 whenever some earlier packet has

1746
01:17:31,980 --> 01:17:37,290
been considered lost so by counting both

1747
01:17:35,400 --> 01:17:41,820
of them you get the upstream loss and

1748
01:17:37,290 --> 01:17:44,280
the end to end nose so the nth windows

1749
01:17:41,820 --> 01:17:46,920
is just a fraction with l equals to 1

1750
01:17:44,280 --> 01:17:48,269
and the upstream loss is the the

1751
01:17:46,920 --> 01:17:51,780
difference between the expected number

1752
01:17:48,270 --> 01:17:53,730
of Q and the observed number of Q's and

1753
01:17:51,780 --> 01:17:57,509
of course the downstream loss is the

1754
01:17:53,730 --> 01:18:00,620
difference roughly the difference so

1755
01:17:57,510 --> 01:18:03,570
we've been doing running an experiment

1756
01:18:00,620 --> 01:18:06,390
an orange network through real customers

1757
01:18:03,570 --> 01:18:09,570
with thousands of Relkin customers in

1758
01:18:06,390 --> 01:18:13,050
four countries with Akamai CD ends so

1759
01:18:09,570 --> 01:18:16,530
Akamai CD ends use a quick stack which

1760
01:18:13,050 --> 01:18:20,430
is based on chromium with proprietary

1761
01:18:16,530 --> 01:18:23,340
patches and in it we implemented the the

1762
01:18:20,430 --> 01:18:25,470
QL bits as you might know in the current

1763
01:18:23,340 --> 01:18:28,230
quick specification it's not possible to

1764
01:18:25,470 --> 01:18:31,310
add those bits anywhere in the packet so

1765
01:18:28,230 --> 01:18:32,849
we did use some ugly level free trick

1766
01:18:31,310 --> 01:18:35,910
you poked

1767
01:18:32,850 --> 01:18:40,820
those bits in the IP header in the TTL

1768
01:18:35,910 --> 01:18:44,400
high high order bits this a lot this is

1769
01:18:40,820 --> 01:18:45,660
completely ok it's a hack of course not

1770
01:18:44,400 --> 01:18:47,460
supposed to be generalised

1771
01:18:45,660 --> 01:18:49,230
but that's a way of doing a real-life

1772
01:18:47,460 --> 01:18:51,239
experiment today

1773
01:18:49,230 --> 01:18:53,790
with negotiation with version

1774
01:18:51,239 --> 01:18:55,889
negotiation in quick it's absolutely not

1775
01:18:53,790 --> 01:18:58,530
possible to do a large-scale experiment

1776
01:18:55,890 --> 01:19:01,050
for anybody but people holding a browser

1777
01:18:58,530 --> 01:19:05,599
or popular application we do not have

1778
01:19:01,050 --> 01:19:05,600
any of them so we were first to do that

1779
01:19:05,870 --> 01:19:10,620
okay the topology of the experiment is

1780
01:19:08,340 --> 01:19:13,260
the same for all four countries you

1781
01:19:10,620 --> 01:19:16,230
typically have an observer point which

1782
01:19:13,260 --> 01:19:19,440
is just below the Akamai CBN's serving

1783
01:19:16,230 --> 01:19:22,440
the access network the suspected usual

1784
01:19:19,440 --> 01:19:25,710
suspect in network troubleshooting of

1785
01:19:22,440 --> 01:19:28,769
course the internet paths and the access

1786
01:19:25,710 --> 01:19:31,830
network paths so whenever we start an

1787
01:19:28,770 --> 01:19:33,660
investigation in our networks even today

1788
01:19:31,830 --> 01:19:36,059
with TCP we'll always start at this

1789
01:19:33,660 --> 01:19:38,309
point because the key question to us

1790
01:19:36,060 --> 01:19:42,780
first is whether the responsibility is

1791
01:19:38,310 --> 01:19:46,199
ours or not the implementation details

1792
01:19:42,780 --> 01:19:48,420
are as follows so the quick stack patch

1793
01:19:46,199 --> 01:19:50,099
by can I just compute the qnn bits and

1794
01:19:48,420 --> 01:19:53,969
insert them in the in the TTL high bits

1795
01:19:50,100 --> 01:19:59,130
and then we had to put the value to a

1796
01:19:53,969 --> 01:20:02,520
out of the qubit so you you which was 64

1797
01:19:59,130 --> 01:20:05,580
as a trade off based on a few audio

1798
01:20:02,520 --> 01:20:09,600
experiments and we will see that it's

1799
01:20:05,580 --> 01:20:11,850
not so bad so this gives that also not

1800
01:20:09,600 --> 01:20:14,100
another constraint wisdom from the the

1801
01:20:11,850 --> 01:20:16,530
hiko the high collar used which is the

1802
01:20:14,100 --> 01:20:18,300
TTL high bits of course since we use to

1803
01:20:16,530 --> 01:20:22,170
high bits it means that TTL must be

1804
01:20:18,300 --> 01:20:25,320
below 63 but is no real constraint as

1805
01:20:22,170 --> 01:20:31,199
the Akamai server just set the value to

1806
01:20:25,320 --> 01:20:33,809
verse 63 so what we do to gather data at

1807
01:20:31,199 --> 01:20:36,780
the observation point is we do traffic

1808
01:20:33,810 --> 01:20:39,270
capture with step aggregators and we

1809
01:20:36,780 --> 01:20:42,540
only capture the downlink pass we don't

1810
01:20:39,270 --> 01:20:44,190
need the lag flow and also we truncate

1811
01:20:42,540 --> 01:20:47,489
the full payload is completely useless

1812
01:20:44,190 --> 01:20:50,160
so we only gather packet summaries with

1813
01:20:47,489 --> 01:20:52,559
timestamps IP ports the qnl bits and the

1814
01:20:50,160 --> 01:20:55,620
payload size for debugging the

1815
01:20:52,560 --> 01:20:58,590
segmentation works by top hole and time

1816
01:20:55,620 --> 01:21:00,840
out obviously because the we have no

1817
01:20:58,590 --> 01:21:02,100
insight on the exact signaling going on

1818
01:21:00,840 --> 01:21:04,980
in quick

1819
01:21:02,100 --> 01:21:08,070
and this allows to capture in one

1820
01:21:04,980 --> 01:21:10,830
compact text file per flow or would that

1821
01:21:08,070 --> 01:21:14,250
happens and then do various tests with

1822
01:21:10,830 --> 01:21:17,400
the post-processing of the signals so

1823
01:21:14,250 --> 01:21:18,960
both based on those files you will see

1824
01:21:17,400 --> 01:21:24,240
that both statistical and unit analysis

1825
01:21:18,960 --> 01:21:26,130
can be performed so here before going

1826
01:21:24,240 --> 01:21:28,950
into the analysis I'll adjust the

1827
01:21:26,130 --> 01:21:30,030
plotter CDF of the flow size because the

1828
01:21:28,950 --> 01:21:32,300
flow size is important

1829
01:21:30,030 --> 01:21:35,639
as you know that the cubit just counts

1830
01:21:32,300 --> 01:21:38,220
sequential consecutive packets with the

1831
01:21:35,640 --> 01:21:40,140
same value of course if you got fewer

1832
01:21:38,220 --> 01:21:42,900
than 64 pi packets in the flow you see

1833
01:21:40,140 --> 01:21:46,680
nothing so what I've done here is plot

1834
01:21:42,900 --> 01:21:51,450
the value of 640 which is 1010 1/2 K

1835
01:21:46,680 --> 01:21:53,910
odds of Q which gives a boundary and the

1836
01:21:51,450 --> 01:21:55,650
under image that the last chunk the

1837
01:21:53,910 --> 01:21:57,900
importance sadistically importance of

1838
01:21:55,650 --> 01:22:01,650
last rank which obviously is incomplete

1839
01:21:57,900 --> 01:22:05,099
so if you just clip the data set above

1840
01:22:01,650 --> 01:22:07,410
640 you get roughly 10% in the in the

1841
01:22:05,100 --> 01:22:14,580
worst case but that's enough given the

1842
01:22:07,410 --> 01:22:18,870
number of point captured so the review

1843
01:22:14,580 --> 01:22:21,180
the refusal we used to exploit the

1844
01:22:18,870 --> 01:22:23,220
desert are of two kinds first is

1845
01:22:21,180 --> 01:22:26,430
statistical you watch which calculus

1846
01:22:23,220 --> 01:22:28,320
kattappa lots so we just give the very

1847
01:22:26,430 --> 01:22:30,240
dimensional distribution of the loss

1848
01:22:28,320 --> 01:22:33,120
derived from the queue and from the l

1849
01:22:30,240 --> 01:22:34,860
bits and then the unit view if we want

1850
01:22:33,120 --> 01:22:37,320
to debug what happened on that point on

1851
01:22:34,860 --> 01:22:41,400
this connection we just plot an

1852
01:22:37,320 --> 01:22:43,950
individual cumulative display of the

1853
01:22:41,400 --> 01:22:46,170
Dallas's which is over the time in the

1854
01:22:43,950 --> 01:22:50,820
connection how many packets were lost

1855
01:22:46,170 --> 01:22:53,310
other Angwin or upstream so when we look

1856
01:22:50,820 --> 01:22:56,969
at the first kind of plot when it is we

1857
01:22:53,310 --> 01:22:59,490
analyze it this way we've got AB sum of

1858
01:22:56,970 --> 01:23:01,860
stream runs against end-to-end us the

1859
01:22:59,490 --> 01:23:03,719
diagonal of course means pure upstream

1860
01:23:01,860 --> 01:23:05,790
loss because when the packet is it is

1861
01:23:03,720 --> 01:23:08,370
plus upstream is also appears in the end

1862
01:23:05,790 --> 01:23:10,740
to end the vertical is pure downstream

1863
01:23:08,370 --> 01:23:12,830
loss it appears only on the end-to-end

1864
01:23:10,740 --> 01:23:15,599
measurement and not at all on the cubit

1865
01:23:12,830 --> 01:23:20,790
but the bottom right is

1866
01:23:15,600 --> 01:23:24,300
supposed to be impossible right so we

1867
01:23:20,790 --> 01:23:26,400
will see well then when we do unit

1868
01:23:24,300 --> 01:23:30,390
analysis you you select one of these

1869
01:23:26,400 --> 01:23:32,429
points and look at the the way that the

1870
01:23:30,390 --> 01:23:34,470
laws are spread over time in any one

1871
01:23:32,430 --> 01:23:36,750
given connection in this example you can

1872
01:23:34,470 --> 01:23:39,600
see that both are completely

1873
01:23:36,750 --> 01:23:41,940
synchronized which means that it's pure

1874
01:23:39,600 --> 01:23:44,160
upstream loss which is every time

1875
01:23:41,940 --> 01:23:49,110
there's a cat which is lost it's also

1876
01:23:44,160 --> 01:23:51,059
lost end-to-end in this other case you

1877
01:23:49,110 --> 01:23:55,799
see only end-to-end absolutely no

1878
01:23:51,060 --> 01:23:57,330
upstream so it's pure downstream this

1879
01:23:55,800 --> 01:23:59,640
case you see something which shouldn't

1880
01:23:57,330 --> 01:24:02,690
happen which is no end to end and

1881
01:23:59,640 --> 01:24:06,000
they're completely insane and

1882
01:24:02,690 --> 01:24:08,309
concentrated upstream loss which this

1883
01:24:06,000 --> 01:24:10,830
case was based on miss segmentation the

1884
01:24:08,310 --> 01:24:15,390
heuristics applied to the signal

1885
01:24:10,830 --> 01:24:17,070
counting the qubits is supposed to do

1886
01:24:15,390 --> 01:24:21,420
something about reordering I get

1887
01:24:17,070 --> 01:24:24,120
rubbering and in some case it does Polly

1888
01:24:21,420 --> 01:24:27,600
and also miss segmentation happens when

1889
01:24:24,120 --> 01:24:29,730
the timeout doesn't is not enough to

1890
01:24:27,600 --> 01:24:33,780
detect that some connection was reusing

1891
01:24:29,730 --> 01:24:36,410
the center pole in this extreme case

1892
01:24:33,780 --> 01:24:39,389
you've completely uncorrelated losses

1893
01:24:36,410 --> 01:24:43,380
which happened to be due to observer

1894
01:24:39,390 --> 01:24:45,420
pass saturation observers now we are

1895
01:24:43,380 --> 01:24:48,780
going to look at the four countries so

1896
01:24:45,420 --> 01:24:50,370
these are the four scatter plots quickly

1897
01:24:48,780 --> 01:24:53,070
you can see that there's one of them

1898
01:24:50,370 --> 01:24:58,890
which is an outlier the bottom left is

1899
01:24:53,070 --> 01:25:01,110
completely insane and we see why the

1900
01:24:58,890 --> 01:25:03,020
first one country one as you can see is

1901
01:25:01,110 --> 01:25:06,150
concerned the main energies on the

1902
01:25:03,020 --> 01:25:08,160
vertical axis which is pure downstream

1903
01:25:06,150 --> 01:25:11,339
loss there are a few points on the

1904
01:25:08,160 --> 01:25:14,700
diagonal which are really under they're

1905
01:25:11,340 --> 01:25:17,190
gonna which in some events of upstream

1906
01:25:14,700 --> 01:25:20,849
loss and there is also some noise in the

1907
01:25:17,190 --> 01:25:22,700
dragon area which after unit analysis

1908
01:25:20,850 --> 01:25:26,340
have been shown to be due to reordering

1909
01:25:22,700 --> 01:25:28,940
so again that's due to when reordering

1910
01:25:26,340 --> 01:25:32,340
happens the boundaries

1911
01:25:28,940 --> 01:25:36,919
consecutive packets with Q equals zero

1912
01:25:32,340 --> 01:25:40,170
and one must be somehow accounted for

1913
01:25:36,920 --> 01:25:43,860
one country true it's much cleaner the

1914
01:25:40,170 --> 01:25:45,870
noise from razoring is very low and we

1915
01:25:43,860 --> 01:25:49,739
also seem some energy on vertical axis

1916
01:25:45,870 --> 01:25:52,890
and a few spots on the diagonal winning

1917
01:25:49,739 --> 01:25:54,480
events of strong actionless you can also

1918
01:25:52,890 --> 01:25:57,530
see that they are not exactly on the

1919
01:25:54,480 --> 01:26:00,509
diagonal below and this has been

1920
01:25:57,530 --> 01:26:02,910
accounted for by the fact that in quick

1921
01:26:00,510 --> 01:26:05,460
you sometimes have packets going down

1922
01:26:02,910 --> 01:26:09,180
which are expandable these as for

1923
01:26:05,460 --> 01:26:11,570
example ax coming from window update so

1924
01:26:09,180 --> 01:26:16,280
we have corrected them to do that

1925
01:26:11,570 --> 01:26:18,870
country 3 3 is come insane 1 and after

1926
01:26:16,280 --> 01:26:21,420
after correlation with other flows on

1927
01:26:18,870 --> 01:26:23,010
the on the same capture pass from TCP it

1928
01:26:21,420 --> 01:26:25,920
was shown that it was completely

1929
01:26:23,010 --> 01:26:28,380
saturated capture chain so the method

1930
01:26:25,920 --> 01:26:31,260
also is able to detect something that

1931
01:26:28,380 --> 01:26:34,219
TCP could allow which is detected when

1932
01:26:31,260 --> 01:26:38,700
your measurement purchased doesn't work

1933
01:26:34,219 --> 01:26:44,130
country 3 is a cleaner tool and a few

1934
01:26:38,700 --> 01:26:47,010
outliers due to musical notation now you

1935
01:26:44,130 --> 01:26:49,860
see the CDF the summary or CDF films

1936
01:26:47,010 --> 01:26:52,080
from downstream loss ratio which gives

1937
01:26:49,860 --> 01:26:54,870
you the difference between the X and y

1938
01:26:52,080 --> 01:26:57,210
axis and the earlier drafts but plotting

1939
01:26:54,870 --> 01:27:00,030
them at the CDF gives us a quantitative

1940
01:26:57,210 --> 01:27:05,280
view that's better than the the scatter

1941
01:27:00,030 --> 01:27:07,830
plots okay so to summarize what we've

1942
01:27:05,280 --> 01:27:10,200
seen in the dragon area sometimes you

1943
01:27:07,830 --> 01:27:12,989
some noise is due to imperfection of the

1944
01:27:10,200 --> 01:27:15,239
denoising heuristics some is due to miss

1945
01:27:12,989 --> 01:27:17,759
Eckman session and some is due to

1946
01:27:15,239 --> 01:27:20,968
observe all's which obviously should not

1947
01:27:17,760 --> 01:27:23,370
happen in your life and the summer is

1948
01:27:20,969 --> 01:27:25,350
all these noises can be disambiguated by

1949
01:27:23,370 --> 01:27:28,440
unit analysis so we are not at all blind

1950
01:27:25,350 --> 01:27:30,210
and also the heuristics have been

1951
01:27:28,440 --> 01:27:35,489
quickly developed and could be improved

1952
01:27:30,210 --> 01:27:37,650
and reduce the noise as a wrap-up the

1953
01:27:35,489 --> 01:27:41,240
unilateral deployment was made possible

1954
01:27:37,650 --> 01:27:45,480
only because

1955
01:27:41,240 --> 01:27:46,889
we use we didn't use the quick vague

1956
01:27:45,480 --> 01:27:51,089
vehicle itself

1957
01:27:46,890 --> 01:27:52,970
that's all hack to that and that's the

1958
01:27:51,090 --> 01:27:56,880
only way to do a large-scale experiment

1959
01:27:52,970 --> 01:27:58,830
the signals were designed to restore

1960
01:27:56,880 --> 01:28:04,200
disappear like ability to debug networks

1961
01:27:58,830 --> 01:28:06,660
and they do worse and short of direct

1962
01:28:04,200 --> 01:28:10,170
quick support we are not we do not

1963
01:28:06,660 --> 01:28:12,330
expect to get in anytime soon and other

1964
01:28:10,170 --> 01:28:16,140
vehicles is needed so any suggestion are

1965
01:28:12,330 --> 01:28:18,630
open and the mechanism can be applied to

1966
01:28:16,140 --> 01:28:20,970
any other protocols quick centric the

1967
01:28:18,630 --> 01:28:25,080
only contribution that is expected from

1968
01:28:20,970 --> 01:28:28,620
the stack is the Elbit which is the the

1969
01:28:25,080 --> 01:28:33,420
mechanism by which the stack tells that

1970
01:28:28,620 --> 01:28:35,670
it has rust buckets so in the summer is

1971
01:28:33,420 --> 01:28:37,230
a tree it works and we really do need

1972
01:28:35,670 --> 01:28:39,390
something like that to keep the

1973
01:28:37,230 --> 01:28:41,339
beginning networks shot of that with

1974
01:28:39,390 --> 01:28:43,080
just the current state of quick and no

1975
01:28:41,340 --> 01:28:47,880
extensions we are we are completely

1976
01:28:43,080 --> 01:28:50,570
blind all right we can squeeze in like

1977
01:28:47,880 --> 01:28:50,570
one or two questions

1978
01:28:51,320 --> 01:28:57,000
yes but Google thanks for this data this

1979
01:28:54,390 --> 01:28:59,220
looks certainly interesting one question

1980
01:28:57,000 --> 01:29:01,590
I had is for the spin but there's a fair

1981
01:28:59,220 --> 01:29:04,020
amount of analysis of what happens if

1982
01:29:01,590 --> 01:29:08,910
one or the other one of the two end

1983
01:29:04,020 --> 01:29:12,120
points like tries to for lack of a

1984
01:29:08,910 --> 01:29:13,650
better word subvert the signal it seems

1985
01:29:12,120 --> 01:29:16,890
like it would be very easy for either

1986
01:29:13,650 --> 01:29:18,900
end point to sort of convince a middle

1987
01:29:16,890 --> 01:29:21,570
box like of whatever signal I wanted as

1988
01:29:18,900 --> 01:29:23,429
well as some pretty crazy signals have

1989
01:29:21,570 --> 01:29:25,889
you had any thoughts about the ability

1990
01:29:23,430 --> 01:29:30,360
to reject implementations that either

1991
01:29:25,890 --> 01:29:32,520
are buggy or just basically like you

1992
01:29:30,360 --> 01:29:33,809
know not complying with a with this

1993
01:29:32,520 --> 01:29:35,070
scheme or how to figure out when it's

1994
01:29:33,810 --> 01:29:41,730
negotiated pertaining the client server

1995
01:29:35,070 --> 01:29:45,929
in their heart leap spinning and so it's

1996
01:29:41,730 --> 01:29:48,059
a server-side right so for the for the

1997
01:29:45,930 --> 01:29:52,560
downstream path only the server sets the

1998
01:29:48,060 --> 01:29:54,300
bit and in the it's what we are

1999
01:29:52,560 --> 01:29:54,929
interesting in because it's where the

2000
01:29:54,300 --> 01:29:57,719
congestion

2001
01:29:54,929 --> 01:30:00,900
now networks okay so the most valuable

2002
01:29:57,719 --> 01:30:02,580
signal is unilateral my module at the

2003
01:30:00,900 --> 01:30:04,559
fact that right now you'd drop half of

2004
01:30:02,580 --> 01:30:09,090
these packets because the removing

2005
01:30:04,560 --> 01:30:12,420
header protection with them just to add

2006
01:30:09,090 --> 01:30:14,730
possess site or native for TCP is also

2007
01:30:12,420 --> 01:30:17,370
unencrypted and it's also subject to

2008
01:30:14,730 --> 01:30:19,139
gaming right somebody wants to send you

2009
01:30:17,370 --> 01:30:22,940
interest in TCP interesting-looking

2010
01:30:19,140 --> 01:30:22,940
disappear stream nothing stopping them

2011
01:30:22,969 --> 01:30:32,909
all right thanks so much Alexander so up

2012
01:30:31,440 --> 01:30:38,759
next we're gonna have Roland talk about

2013
01:30:32,909 --> 01:30:40,019
the RPI and you've got twenty minutes

2014
01:30:38,760 --> 01:30:42,570
for this and then we've got one last

2015
01:30:40,020 --> 01:30:45,870
presentation okay

2016
01:30:42,570 --> 01:30:47,549
thanks Dave so I apologize to the people

2017
01:30:45,870 --> 01:30:50,909
in the video in advance I'm gonna walk

2018
01:30:47,550 --> 01:30:53,400
off the video to start their animation

2019
01:30:50,909 --> 01:30:56,250
because my laptop didn't work with the

2020
01:30:53,400 --> 01:30:58,409
presenter thing right this is a talk

2021
01:30:56,250 --> 01:31:00,630
about the RPK wayback machine

2022
01:30:58,409 --> 01:31:04,980
my name is runs fresh Sakai I work for

2023
01:31:00,630 --> 01:31:07,080
an omlette labs and I hope if it's that

2024
01:31:04,980 --> 01:31:09,299
somebody recognizes this Logan Ziggy

2025
01:31:07,080 --> 01:31:12,739
says there is a 50% chance we'll end up

2026
01:31:09,300 --> 01:31:17,940
in 2011 hands up who knows quantum leap

2027
01:31:12,739 --> 01:31:20,339
there we go good right so I don't know

2028
01:31:17,940 --> 01:31:22,049
it labs we make rpki relying party

2029
01:31:20,340 --> 01:31:24,630
software which is called Bruce inator

2030
01:31:22,050 --> 01:31:26,880
and this has already seen quite a lot of

2031
01:31:24,630 --> 01:31:29,670
uptake in production for which we are

2032
01:31:26,880 --> 01:31:31,350
very happy but we also want to test

2033
01:31:29,670 --> 01:31:35,880
ourself for ourselves and to see how

2034
01:31:31,350 --> 01:31:37,620
robust it is and we found out that the

2035
01:31:35,880 --> 01:31:40,350
ripe ncc had a really really nice

2036
01:31:37,620 --> 01:31:43,349
dataset that had all of the rpki our

2037
01:31:40,350 --> 01:31:45,719
away data for all of the RI ours pretty

2038
01:31:43,350 --> 01:31:48,929
much since the inception of our PGI and

2039
01:31:45,719 --> 01:31:52,260
so this is really cool data so what we

2040
01:31:48,929 --> 01:31:55,140
wanted to do was use that data to test

2041
01:31:52,260 --> 01:31:59,969
route inator and we wanted to run all of

2042
01:31:55,140 --> 01:32:02,489
it through our validator software now we

2043
01:31:59,969 --> 01:32:03,780
got dumps into our gzip files and

2044
01:32:02,489 --> 01:32:06,120
towards the end I'll tell you where you

2045
01:32:03,780 --> 01:32:07,590
can find a mixer now open data and we

2046
01:32:06,120 --> 01:32:08,640
wrote a tool that we called siggy to

2047
01:32:07,590 --> 01:32:14,100
transfer this back in

2048
01:32:08,640 --> 01:32:16,650
RPK time so interlude L telling holding

2049
01:32:14,100 --> 01:32:21,270
Ziggy and telling Sam where he's gonna

2050
01:32:16,650 --> 01:32:24,000
go next right so what does Ziggy do it

2051
01:32:21,270 --> 01:32:27,060
is a Python script again open source URL

2052
01:32:24,000 --> 01:32:28,620
will be in one of the later slides and

2053
01:32:27,060 --> 01:32:31,680
you give it a date and what it'll do is

2054
01:32:28,620 --> 01:32:34,410
it'll try to figure out which of the RER

2055
01:32:31,680 --> 01:32:36,810
repository data needs to unpack it needs

2056
01:32:34,410 --> 01:32:38,610
to recreate the towels because the

2057
01:32:36,810 --> 01:32:41,400
towels are missing in the tarji set

2058
01:32:38,610 --> 01:32:43,950
files and then it uses a tool called

2059
01:32:41,400 --> 01:32:46,259
fake time to run the route inator for

2060
01:32:43,950 --> 01:32:48,360
the correct date and we did this for

2061
01:32:46,260 --> 01:32:50,640
data starting January 2011 until

2062
01:32:48,360 --> 01:32:51,690
February 2019 at least that those are

2063
01:32:50,640 --> 01:32:54,000
the graphs that I'm going to show you

2064
01:32:51,690 --> 01:32:55,950
but actually during this week I did some

2065
01:32:54,000 --> 01:32:57,420
more processing and I have some really

2066
01:32:55,950 --> 01:33:02,220
nice animations that I can show you that

2067
01:32:57,420 --> 01:33:04,200
go until Monday this week right for

2068
01:33:02,220 --> 01:33:06,330
those of you are less familiar with rpki

2069
01:33:04,200 --> 01:33:07,740
a quick recap of some of the jargon that

2070
01:33:06,330 --> 01:33:10,890
i'm going to be using throughout this

2071
01:33:07,740 --> 01:33:13,110
presentation the rpki is the resource

2072
01:33:10,890 --> 01:33:16,410
public key infrastructure this allows

2073
01:33:13,110 --> 01:33:18,389
you to set what are called route origin

2074
01:33:16,410 --> 01:33:20,730
authorizations and basically this

2075
01:33:18,390 --> 01:33:22,680
authorizes a certain AAS to announce

2076
01:33:20,730 --> 01:33:24,629
certain prefixes

2077
01:33:22,680 --> 01:33:26,610
this is cryptographically signed so he

2078
01:33:24,630 --> 01:33:29,700
can sort of validate that some a as was

2079
01:33:26,610 --> 01:33:32,190
allowed to originate that prefix and

2080
01:33:29,700 --> 01:33:34,170
what we typically deal with after

2081
01:33:32,190 --> 01:33:36,780
validation are called verified raw

2082
01:33:34,170 --> 01:33:39,570
payloads yes that is an acronym in an

2083
01:33:36,780 --> 01:33:41,849
acronym and this is a cryptographic a

2084
01:33:39,570 --> 01:33:48,210
valid statement about a prefix from an

2085
01:33:41,850 --> 01:33:50,730
hour away right so first of all if we

2086
01:33:48,210 --> 01:33:53,850
look at our PKI it started in 2011 but

2087
01:33:50,730 --> 01:33:56,459
it uptake sort of started slow and then

2088
01:33:53,850 --> 01:33:59,480
as you can see it is escalating towards

2089
01:33:56,460 --> 01:34:01,860
today it's really growing exponentially

2090
01:33:59,480 --> 01:34:03,780
what is also interesting is that the

2091
01:34:01,860 --> 01:34:07,889
historic data that we got actually

2092
01:34:03,780 --> 01:34:10,080
turned out to contain some flaws you can

2093
01:34:07,890 --> 01:34:12,570
see little arrow on the on the graph

2094
01:34:10,080 --> 01:34:15,360
that says first day right data validates

2095
01:34:12,570 --> 01:34:17,790
before that date something was off in

2096
01:34:15,360 --> 01:34:19,950
the manifest files that we got from ripe

2097
01:34:17,790 --> 01:34:22,080
ncc and it didn't validate and it is on

2098
01:34:19,950 --> 01:34:25,260
a road map to use old or

2099
01:34:22,080 --> 01:34:27,000
pti software to also validate that data

2100
01:34:25,260 --> 01:34:29,640
and see if we can make this graph cover

2101
01:34:27,000 --> 01:34:31,490
the whole period another interesting

2102
01:34:29,640 --> 01:34:35,130
thing that you can observe here is the

2103
01:34:31,490 --> 01:34:37,800
DES spike in the Green Line from AP neck

2104
01:34:35,130 --> 01:34:40,320
and these were three asses that suddenly

2105
01:34:37,800 --> 01:34:42,240
D aggregate all of their rows which

2106
01:34:40,320 --> 01:34:45,090
basically means they disable their max

2107
01:34:42,240 --> 01:34:47,820
max length attribute and rather than say

2108
01:34:45,090 --> 01:34:50,430
oh this is a pretty role that's valid

2109
01:34:47,820 --> 01:34:53,580
first say sixteen prefix and you can

2110
01:34:50,430 --> 01:34:55,920
have sub announcements of stretch 24

2111
01:34:53,580 --> 01:34:58,050
they remove the max length and basically

2112
01:34:55,920 --> 01:35:01,770
converted that into a whole bunch of

2113
01:34:58,050 --> 01:35:04,140
slash 24 rows and apparently this was a

2114
01:35:01,770 --> 01:35:06,750
mistake in some software and it got

2115
01:35:04,140 --> 01:35:09,690
fixed pretty quickly but the impact is

2116
01:35:06,750 --> 01:35:11,580
quite visible of course we also have to

2117
01:35:09,690 --> 01:35:14,940
look at ipv6 because that's a modern

2118
01:35:11,580 --> 01:35:17,340
protocol and again you can see more or

2119
01:35:14,940 --> 01:35:19,559
less the same trend it's it's far fewer

2120
01:35:17,340 --> 01:35:21,510
prefixes for which there are rows but

2121
01:35:19,560 --> 01:35:25,170
the trending growth is pretty similar

2122
01:35:21,510 --> 01:35:28,950
it's still growing exponentially is

2123
01:35:25,170 --> 01:35:30,540
growing up towards today and this is

2124
01:35:28,950 --> 01:35:36,900
good news so people are really starting

2125
01:35:30,540 --> 01:35:41,010
to apply this technology so what I also

2126
01:35:36,900 --> 01:35:43,320
looked at was the prefix size in VR PS

2127
01:35:41,010 --> 01:35:46,920
over time because the hypothesis behind

2128
01:35:43,320 --> 01:35:49,530
this was that as ipv4 exhaustion

2129
01:35:46,920 --> 01:35:52,380
continues you might expect to see fear

2130
01:35:49,530 --> 01:35:54,570
piece for smaller prefixes and actually

2131
01:35:52,380 --> 01:35:58,220
as you can see in this this graph that

2132
01:35:54,570 --> 01:36:07,049
is true so this is a CDF for five years

2133
01:35:58,220 --> 01:36:12,030
and in 2019 the fraction of prefixes

2134
01:36:07,050 --> 01:36:16,320
that are 24 is sort of let me see let me

2135
01:36:12,030 --> 01:36:17,700
say that so that's going down mmm I'm

2136
01:36:16,320 --> 01:36:21,750
trying to figure out what I wanted to

2137
01:36:17,700 --> 01:36:25,050
say there so the and the same is true

2138
01:36:21,750 --> 01:36:26,850
for mix lengths right the the when mixed

2139
01:36:25,050 --> 01:36:29,070
length is used you can again see that

2140
01:36:26,850 --> 01:36:30,630
the max length becomes smaller and

2141
01:36:29,070 --> 01:36:34,969
smaller and smaller over time so there

2142
01:36:30,630 --> 01:36:34,970
it's going down toward slash 24

2143
01:36:35,430 --> 01:36:40,739
for a v6 we see pretty much the same

2144
01:36:38,790 --> 01:36:44,190
thing again the prefix size is

2145
01:36:40,739 --> 01:36:47,879
decreasing over time so we see vir PS

2146
01:36:44,190 --> 01:36:50,790
for smaller prefixes and this is also to

2147
01:36:47,880 --> 01:36:51,989
form X length there are by the way at

2148
01:36:50,790 --> 01:36:53,430
the end of the presentation there are

2149
01:36:51,989 --> 01:36:55,679
many more graphs that I didn't have time

2150
01:36:53,430 --> 01:36:57,510
to put in because I would be way over

2151
01:36:55,680 --> 01:36:59,250
time if I present all of these but again

2152
01:36:57,510 --> 01:37:05,430
the takeaway from this is max length is

2153
01:36:59,250 --> 01:37:07,500
decreasing for post v4 and v6 right now

2154
01:37:05,430 --> 01:37:08,640
this one's a little bit interesting

2155
01:37:07,500 --> 01:37:11,730
right because there's been some debate

2156
01:37:08,640 --> 01:37:13,830
about whether or not you should use max

2157
01:37:11,730 --> 01:37:16,080
length or water or or if you should

2158
01:37:13,830 --> 01:37:18,239
prefer 2d aggregate and have lots of

2159
01:37:16,080 --> 01:37:20,580
rowers that cover smaller prefixes and

2160
01:37:18,239 --> 01:37:22,530
because the reasoning behind this is if

2161
01:37:20,580 --> 01:37:26,969
you have a max length but you don't and

2162
01:37:22,530 --> 01:37:28,380
now announce all of the sub prefixes

2163
01:37:26,969 --> 01:37:31,760
that are underneath that you're expose

2164
01:37:28,380 --> 01:37:35,880
yourself to high checking attempts and

2165
01:37:31,760 --> 01:37:40,680
what you can see is that max length use

2166
01:37:35,880 --> 01:37:42,600
over time was going down until about a

2167
01:37:40,680 --> 01:37:46,140
year ago and it's slowly starting to

2168
01:37:42,600 --> 01:37:49,050
rise again and while we can't confirm

2169
01:37:46,140 --> 01:37:52,440
this we think this might be because

2170
01:37:49,050 --> 01:37:54,360
people are now validating a lot more and

2171
01:37:52,440 --> 01:37:56,160
it turns out that people were announcing

2172
01:37:54,360 --> 01:37:59,130
sub prefixes that we're not covered by

2173
01:37:56,160 --> 01:38:00,809
the by the rowers and their

2174
01:37:59,130 --> 01:38:03,630
announcements were getting rejected

2175
01:38:00,810 --> 01:38:05,250
because of that and then to fix that if

2176
01:38:03,630 --> 01:38:07,620
you're announcing sub prefixes it's easy

2177
01:38:05,250 --> 01:38:10,200
to add a max length that is valid and

2178
01:38:07,620 --> 01:38:14,370
then your stuff will validate again so

2179
01:38:10,200 --> 01:38:16,530
it seems I mean this is kind of a hand

2180
01:38:14,370 --> 01:38:23,849
waving a bit but it seems that this is a

2181
01:38:16,530 --> 01:38:27,090
trend now again so average prefix size

2182
01:38:23,850 --> 01:38:28,950
so there's a note that says compare this

2183
01:38:27,090 --> 01:38:30,989
to Jeff story in in routing that was

2184
01:38:28,950 --> 01:38:32,820
because I use this slide at the right

2185
01:38:30,989 --> 01:38:36,320
meeting in Reykjavik where Jeff Hewson

2186
01:38:32,820 --> 01:38:39,179
presented something about the BGP table

2187
01:38:36,320 --> 01:38:40,469
where you also see a decreasing prefix

2188
01:38:39,180 --> 01:38:42,810
size in the announcements that are in

2189
01:38:40,469 --> 01:38:46,020
there well no surprise we see a

2190
01:38:42,810 --> 01:38:47,670
decreasing averaged prefix size in the

2191
01:38:46,020 --> 01:38:51,000
VR P's ball

2192
01:38:47,670 --> 01:38:56,429
again max length and the prefix size

2193
01:38:51,000 --> 01:38:58,380
that is in the row up right again for

2194
01:38:56,429 --> 01:39:00,600
ipv6 we see pretty much the same thing

2195
01:38:58,380 --> 01:39:06,179
right we see the average prefix size so

2196
01:39:00,600 --> 01:39:08,010
more rows for smaller prefixes now I'm

2197
01:39:06,179 --> 01:39:11,489
gonna go so this is interesting so this

2198
01:39:08,010 --> 01:39:13,290
is something that I did over the week we

2199
01:39:11,489 --> 01:39:15,769
I'm gonna walk around so I can store as

2200
01:39:13,290 --> 01:39:18,030
Mary you're gonna start it for me no

2201
01:39:15,770 --> 01:39:21,210
okay so I'm gonna walk around and start

2202
01:39:18,030 --> 01:39:26,880
that story on the video so what we did

2203
01:39:21,210 --> 01:39:37,170
here was I we have a tool that will

2204
01:39:26,880 --> 01:39:39,870
exist a video that one no oh okay I need

2205
01:39:37,170 --> 01:39:42,980
to click harder there we go

2206
01:39:39,870 --> 01:39:47,849
what this shows you this animation is

2207
01:39:42,980 --> 01:39:51,599
the coverage so this is the what we took

2208
01:39:47,850 --> 01:39:54,989
was route fuse data for announcements

2209
01:39:51,600 --> 01:39:57,660
that we see in BGP we took the veer

2210
01:39:54,989 --> 01:40:00,839
piece for certain dates and we use the

2211
01:39:57,660 --> 01:40:03,179
NRO stats to map those the prefixes that

2212
01:40:00,840 --> 01:40:06,150
we see in the announcements and in the

2213
01:40:03,179 --> 01:40:08,370
rowers to certain countries and what is

2214
01:40:06,150 --> 01:40:12,049
animation will show you is coverage so

2215
01:40:08,370 --> 01:40:14,570
these are this is the fraction of

2216
01:40:12,050 --> 01:40:17,460
announcements that are covered by Aurora

2217
01:40:14,570 --> 01:40:20,009
and this animation runs until this

2218
01:40:17,460 --> 01:40:22,440
Monday and hopefully it's kind of

2219
01:40:20,010 --> 01:40:24,660
visible on the screen what you should be

2220
01:40:22,440 --> 01:40:27,629
able to see in this is that it's slowly

2221
01:40:24,660 --> 01:40:29,489
getting darker and that means that we

2222
01:40:27,630 --> 01:40:34,310
see more and more and more announcements

2223
01:40:29,489 --> 01:40:36,629
that are actually covered by Aurora and

2224
01:40:34,310 --> 01:40:39,980
what you should also see is that we're

2225
01:40:36,630 --> 01:40:42,449
now April May June that this is

2226
01:40:39,980 --> 01:40:45,209
accelerating towards the end and I

2227
01:40:42,449 --> 01:40:47,730
apologize that the screens kind of

2228
01:40:45,210 --> 01:40:49,530
mangle the the nice colors but if you

2229
01:40:47,730 --> 01:40:52,889
want the graphs I can give it to you

2230
01:40:49,530 --> 01:40:55,370
sorry can we play it again of course we

2231
01:40:52,890 --> 01:40:55,370
can play it again

2232
01:40:55,469 --> 01:41:00,060
oh and yeah you're from South America

2233
01:40:58,860 --> 01:41:11,190
they're doing really well in South

2234
01:41:00,060 --> 01:41:13,500
America as you can see right now all of

2235
01:41:11,190 --> 01:41:16,080
the tools that we use to create this our

2236
01:41:13,500 --> 01:41:17,670
open source so he there's a slide at the

2237
01:41:16,080 --> 01:41:21,630
end where he which shows you where you

2238
01:41:17,670 --> 01:41:23,280
can grab them now there is one more

2239
01:41:21,630 --> 01:41:27,270
graph that I like to show you and this

2240
01:41:23,280 --> 01:41:31,759
one I like even more what this shows you

2241
01:41:27,270 --> 01:41:38,219
is accuracy and accuracy we define as

2242
01:41:31,760 --> 01:41:41,580
the fraction of covered announcements

2243
01:41:38,219 --> 01:41:45,510
that are valid right so and what we

2244
01:41:41,580 --> 01:41:48,269
graph here are those countries that have

2245
01:41:45,510 --> 01:41:50,570
an accuracy of 90% or over so I cut off

2246
01:41:48,270 --> 01:41:54,920
everything that has a lower accuracy

2247
01:41:50,570 --> 01:41:57,809
because this will show you again that

2248
01:41:54,920 --> 01:41:59,040
even there is already a high accuracy so

2249
01:41:57,810 --> 01:42:02,340
all of the countries that you see right

2250
01:41:59,040 --> 01:42:05,730
now on April 1st 2018 had an accuracy of

2251
01:42:02,340 --> 01:42:07,640
over 90% for the announcements that are

2252
01:42:05,730 --> 01:42:11,459
sort of for the prefixes that are

2253
01:42:07,640 --> 01:42:15,060
assigned to those specific countries but

2254
01:42:11,460 --> 01:42:18,780
what you will see is that the quality is

2255
01:42:15,060 --> 01:42:21,989
really improving a lot again what you

2256
01:42:18,780 --> 01:42:28,340
see here is a some kind of a disappeared

2257
01:42:21,989 --> 01:42:32,250
oops but the takeaway from this is that

2258
01:42:28,340 --> 01:42:35,489
quality is really really getting good so

2259
01:42:32,250 --> 01:42:38,460
if you are not filtering based on our

2260
01:42:35,489 --> 01:42:40,468
PPI you really should be doing that

2261
01:42:38,460 --> 01:42:42,660
because the quality of the data is very

2262
01:42:40,469 --> 01:42:48,030
very good right the accuracy is high and

2263
01:42:42,660 --> 01:42:49,830
can we go back to the slides I have to

2264
01:42:48,030 --> 01:42:52,190
stand here sorry America Mario's very

2265
01:42:49,830 --> 01:42:52,190
strict

2266
01:42:53,030 --> 01:43:00,449
right so those were those two let me

2267
01:42:58,590 --> 01:43:02,010
figure out if I can somehow if people

2268
01:43:00,449 --> 01:43:06,360
are interested send me an email I can I

2269
01:43:02,010 --> 01:43:08,520
can get videos for that right to

2270
01:43:06,360 --> 01:43:12,179
conclude we wanted to test route inator

2271
01:43:08,520 --> 01:43:14,820
and it turns out that RPG I took some

2272
01:43:12,179 --> 01:43:16,199
time to standardize properly right

2273
01:43:14,820 --> 01:43:19,620
because we couldn't validate some of the

2274
01:43:16,199 --> 01:43:21,719
older data the data raises lots of

2275
01:43:19,620 --> 01:43:24,330
questions but it also shows you that you

2276
01:43:21,719 --> 01:43:26,100
could deploy our PTI filtering in your

2277
01:43:24,330 --> 01:43:31,050
network today because the quality of the

2278
01:43:26,100 --> 01:43:32,670
data is actually very very good the next

2279
01:43:31,050 --> 01:43:34,380
step that we want to do is to compare

2280
01:43:32,670 --> 01:43:36,000
this against routing information in more

2281
01:43:34,380 --> 01:43:38,100
detail and we actually already did that

2282
01:43:36,000 --> 01:43:39,900
we submitted a paper to the ACM

2283
01:43:38,100 --> 01:43:41,610
measurement measurement conference that

2284
01:43:39,900 --> 01:43:43,889
was accepted so we'll be presenting that

2285
01:43:41,610 --> 01:43:46,409
in October in Amsterdam and also this is

2286
01:43:43,890 --> 01:43:48,420
some free advertising as the one of the

2287
01:43:46,409 --> 01:43:50,519
general chairs of IMC please come to

2288
01:43:48,420 --> 01:43:54,000
Amsterdam in October to the wonderful

2289
01:43:50,520 --> 01:43:57,360
internet measurement conference with

2290
01:43:54,000 --> 01:43:59,810
that I would like to give a big thank

2291
01:43:57,360 --> 01:44:02,309
you to the folks at the ripe NCC for

2292
01:43:59,810 --> 01:44:05,520
actually collecting and keeping this

2293
01:44:02,310 --> 01:44:08,130
data to a meal from ripe to help us make

2294
01:44:05,520 --> 01:44:10,080
this data available this data is now

2295
01:44:08,130 --> 01:44:12,060
available as open data so if you are a

2296
01:44:10,080 --> 01:44:15,480
researcher you want apply play with this

2297
01:44:12,060 --> 01:44:18,570
rpki data go grab it off the ripe FTP

2298
01:44:15,480 --> 01:44:21,030
server and and also grab our free OSS

2299
01:44:18,570 --> 01:44:23,880
tools ruminator the secure reading stats

2300
01:44:21,030 --> 01:44:26,580
which is what I used to do all of the

2301
01:44:23,880 --> 01:44:30,510
computation for the the maps that I

2302
01:44:26,580 --> 01:44:32,820
showed and I turned the repository for

2303
01:44:30,510 --> 01:44:34,860
city public earlier this week so you can

2304
01:44:32,820 --> 01:44:36,570
grab that I will actually now download

2305
01:44:34,860 --> 01:44:38,580
the data from the ripe archive see what

2306
01:44:36,570 --> 01:44:40,380
you do is you run it you give it a date

2307
01:44:38,580 --> 01:44:41,940
it will grab the right data it will run

2308
01:44:40,380 --> 01:44:43,380
routine a tour if you have a local copy

2309
01:44:41,940 --> 01:44:46,949
installed and it will give you the vir

2310
01:44:43,380 --> 01:44:49,140
piece for that date and with that I'm

2311
01:44:46,949 --> 01:44:57,928
open to questions can I now go back to

2312
01:44:49,140 --> 01:44:59,730
you Mike I Robert Kiyosaki ripe ncc one

2313
01:44:57,929 --> 01:45:01,350
suggestion I don't know about the exact

2314
01:44:59,730 --> 01:45:03,299
incremental value that you would get out

2315
01:45:01,350 --> 01:45:04,750
of this but if there was an option to

2316
01:45:03,300 --> 01:45:06,940
say disable manaphy

2317
01:45:04,750 --> 01:45:09,970
check then you could fill in the gap

2318
01:45:06,940 --> 01:45:12,429
that was before 2014 for the MC the

2319
01:45:09,970 --> 01:45:14,170
reason is the manifest is there to

2320
01:45:12,430 --> 01:45:16,480
protect the integrity of the whole set

2321
01:45:14,170 --> 01:45:18,460
and if it's fair that it was not

2322
01:45:16,480 --> 01:45:21,099
compromised you know in that time period

2323
01:45:18,460 --> 01:45:22,870
yes there is a footnote there but if you

2324
01:45:21,100 --> 01:45:24,820
assume that it wasn't then you would

2325
01:45:22,870 --> 01:45:26,590
feel that yeah yes

2326
01:45:24,820 --> 01:45:28,299
well it's certainly something we want to

2327
01:45:26,590 --> 01:45:29,920
do is it's just that with all the work

2328
01:45:28,300 --> 01:45:32,910
we've been doing on the tool set we

2329
01:45:29,920 --> 01:45:35,260
haven't had time to sort of add the flag

2330
01:45:32,910 --> 01:45:36,490
but we're certainly gonna do that and

2331
01:45:35,260 --> 01:45:39,010
we're probably also gonna make all of

2332
01:45:36,490 --> 01:45:40,179
the validated the data that we file a

2333
01:45:39,010 --> 01:45:41,770
date it will probably put it up

2334
01:45:40,180 --> 01:45:43,420
somewhere so that people G can just grab

2335
01:45:41,770 --> 01:45:46,720
the vir piece rather than having to do

2336
01:45:43,420 --> 01:45:51,100
run the validation themselves Oh Brian

2337
01:45:46,720 --> 01:45:54,040
Trammell former rpki skeptic thank you

2338
01:45:51,100 --> 01:45:55,780
very very much for putting all of this

2339
01:45:54,040 --> 01:45:57,700
stuff together like so the entire stack

2340
01:45:55,780 --> 01:45:59,410
one of the problems that we've had and

2341
01:45:57,700 --> 01:46:01,179
sort of trying to figure out what the

2342
01:45:59,410 --> 01:46:03,010
state of deployment of a lot of these

2343
01:46:01,180 --> 01:46:04,930
things are is that from the research

2344
01:46:03,010 --> 01:46:07,240
standpoint it's like oh you go and you

2345
01:46:04,930 --> 01:46:09,400
read a paper from 2011 and then you read

2346
01:46:07,240 --> 01:46:10,900
another paper from 2015 and you have two

2347
01:46:09,400 --> 01:46:13,210
points and are very hard to draw a line

2348
01:46:10,900 --> 01:46:16,990
and here you have data points from every

2349
01:46:13,210 --> 01:46:19,570
day and the line is very apparent one of

2350
01:46:16,990 --> 01:46:21,580
the the reasons I was in rpki skeptic is

2351
01:46:19,570 --> 01:46:22,809
sort of the the base rate fallacy

2352
01:46:21,580 --> 01:46:26,290
problem that you have when you're

2353
01:46:22,810 --> 01:46:29,680
enabling optional security um there's a

2354
01:46:26,290 --> 01:46:31,840
risk to turning validation on because

2355
01:46:29,680 --> 01:46:33,130
the data is you know there's problems

2356
01:46:31,840 --> 01:46:34,240
with the data you might actually start

2357
01:46:33,130 --> 01:46:35,200
projecting routes and you have

2358
01:46:34,240 --> 01:46:36,910
availability risk

2359
01:46:35,200 --> 01:46:39,880
um and you're creating African security

2360
01:46:36,910 --> 01:46:41,830
risk the number of it so if I were

2361
01:46:39,880 --> 01:46:44,800
trying to come up with a risk number

2362
01:46:41,830 --> 01:46:49,300
from your data set that would be one

2363
01:46:44,800 --> 01:46:51,280
over accuracy correct yes okay because

2364
01:46:49,300 --> 01:46:52,630
the things that are uncovered or are you

2365
01:46:51,280 --> 01:46:57,360
know not going to be a problem anyway

2366
01:46:52,630 --> 01:46:59,350
okay and those and the scale on the

2367
01:46:57,360 --> 01:47:02,170
geographical data you're showing was

2368
01:46:59,350 --> 01:47:06,340
like ninety nine ninety percent to 99

2369
01:47:02,170 --> 01:47:07,540
percent of aggregated prefixes or at

2370
01:47:06,340 --> 01:47:09,310
announcements announcements

2371
01:47:07,540 --> 01:47:10,630
announcements and you're kind of hoping

2372
01:47:09,310 --> 01:47:14,430
yeah and then the other quells

2373
01:47:10,630 --> 01:47:16,760
unique prefixes in announcements yeah

2374
01:47:14,430 --> 01:47:18,620
okay yep perfect thanks

2375
01:47:16,760 --> 01:47:20,060
okay thanks alright let's do this one

2376
01:47:18,620 --> 01:47:22,700
last question and we'll go to the last

2377
01:47:20,060 --> 01:47:25,280
presentation Montgomery it's more of a

2378
01:47:22,700 --> 01:47:27,500
comment on the last question is that

2379
01:47:25,280 --> 01:47:30,410
when you look at those accuracy numbers

2380
01:47:27,500 --> 01:47:32,300
you have to be careful to see if the

2381
01:47:30,410 --> 01:47:35,120
route that's invalid might well be

2382
01:47:32,300 --> 01:47:38,270
covered by another route that is valid

2383
01:47:35,120 --> 01:47:41,120
or not found we've looked at that and

2384
01:47:38,270 --> 01:47:43,870
the coverage is pretty high the coverage

2385
01:47:41,120 --> 01:47:46,670
that uses the same path as pretty high

2386
01:47:43,870 --> 01:47:52,330
coverage then ends up in the same origin

2387
01:47:46,670 --> 01:47:56,620
is pretty hot okay thank you Thanks so

2388
01:47:52,330 --> 01:47:59,720
[Applause]

2389
01:47:56,620 --> 01:48:02,510
so we had we had a little a bit of

2390
01:47:59,720 --> 01:48:04,370
juggling with the agenda and we decided

2391
01:48:02,510 --> 01:48:06,050
we decided to have you on come and talk

2392
01:48:04,370 --> 01:48:08,030
to us about his recycling large-scale

2393
01:48:06,050 --> 01:48:09,230
internet measurements for about 10

2394
01:48:08,030 --> 01:48:10,639
minutes and so we're gonna do is bump

2395
01:48:09,230 --> 01:48:12,559
the hackathon report that I would have

2396
01:48:10,640 --> 01:48:14,420
done but all is not lost there's a link

2397
01:48:12,560 --> 01:48:16,520
to the three minute hackathon talk that

2398
01:48:14,420 --> 01:48:18,080
I gave you can find it in the agenda so

2399
01:48:16,520 --> 01:48:20,930
in the in their updated slides for that

2400
01:48:18,080 --> 01:48:23,720
so take it away on thank you so this is

2401
01:48:20,930 --> 01:48:27,490
work we already presented at Pamela's

2402
01:48:23,720 --> 01:48:29,780
here and basically this all started out

2403
01:48:27,490 --> 01:48:31,790
well I've been doing intuit measurements

2404
01:48:29,780 --> 01:48:33,740
for the last couple of years I was here

2405
01:48:31,790 --> 01:48:36,320
at ITF in London and presented some

2406
01:48:33,740 --> 01:48:39,340
stuff about Google quick deployment so

2407
01:48:36,320 --> 01:48:41,900
yes this is a talk we're also quick ISM

2408
01:48:39,340 --> 01:48:44,780
but we also scanned follow up more we do

2409
01:48:41,900 --> 01:48:47,299
DNA scans TLS scans HTTP to scans and

2410
01:48:44,780 --> 01:48:49,580
the thing with these scans is we are

2411
01:48:47,300 --> 01:48:53,090
looking for something very specific but

2412
01:48:49,580 --> 01:48:56,480
if you for example do a tcp/ip v4 scan

2413
01:48:53,090 --> 01:48:58,730
on port 81 percent of all IPS will

2414
01:48:56,480 --> 01:49:02,269
actually give us an EXO answer what

2415
01:48:58,730 --> 01:49:04,040
about the remaining 99% right so the

2416
01:49:02,270 --> 01:49:06,020
idea basically that we had in this paper

2417
01:49:04,040 --> 01:49:07,640
Wars is there actually something we

2418
01:49:06,020 --> 01:49:09,710
aren't scanning for but we could have

2419
01:49:07,640 --> 01:49:13,130
scanned for all can we reuse the data

2420
01:49:09,710 --> 01:49:17,510
that we already have and to find that

2421
01:49:13,130 --> 01:49:18,950
out we basically captured all ICMP

2422
01:49:17,510 --> 01:49:21,280
traffic that words ingressing our

2423
01:49:18,950 --> 01:49:23,840
measurement networks as we do not

2424
01:49:21,280 --> 01:49:25,730
generate ICMP traffic for ourselves

2425
01:49:23,840 --> 01:49:27,290
this is either background traffic or

2426
01:49:25,730 --> 01:49:29,690
traffic that is actually generated by

2427
01:49:27,290 --> 01:49:30,709
our measurements so the idea was okay

2428
01:49:29,690 --> 01:49:33,049
let's study

2429
01:49:30,709 --> 01:49:35,420
ICMP and let's study what actually is in

2430
01:49:33,050 --> 01:49:38,389
there and we were surprised because

2431
01:49:35,420 --> 01:49:41,510
within a week we got what is it six

2432
01:49:38,389 --> 01:49:43,670
hundred thirty seven million icing

2433
01:49:41,510 --> 01:49:47,479
penises from a whole different number of

2434
01:49:43,670 --> 01:49:49,610
Phi piece over 53,000 autonomous system

2435
01:49:47,479 --> 01:49:51,979
and you can see a plot basically where

2436
01:49:49,610 --> 01:49:53,179
you can see that yeah well they

2437
01:49:51,979 --> 01:49:54,849
correspond to our measurements which

2438
01:49:53,179 --> 01:50:00,639
typically start at midnight if people

2439
01:49:54,849 --> 01:50:04,070
correctly set their and yeah

2440
01:50:00,639 --> 01:50:06,800
that's not going to detail into this and

2441
01:50:04,070 --> 01:50:09,679
we basically first thing that we looked

2442
01:50:06,800 --> 01:50:10,789
in Wars okay do it does it make it

2443
01:50:09,679 --> 01:50:13,729
different what we're actually scanning

2444
01:50:10,789 --> 01:50:16,249
for and yes it does so if we do like a

2445
01:50:13,729 --> 01:50:17,659
TCP scan on port 80 you can see yeah we

2446
01:50:16,249 --> 01:50:20,209
don't get a lot of destination

2447
01:50:17,659 --> 01:50:22,308
unreachable or port unreachable messages

2448
01:50:20,209 --> 01:50:24,409
which is obvious because you would use

2449
01:50:22,309 --> 01:50:27,019
probably reset for that but there are

2450
01:50:24,409 --> 01:50:28,848
still some of those it also makes a

2451
01:50:27,019 --> 01:50:31,369
difference whether or not we're simply

2452
01:50:28,849 --> 01:50:33,280
doing ipv4 scans we also do dns-based

2453
01:50:31,369 --> 01:50:35,449
scans where we have a lot of zone files

2454
01:50:33,280 --> 01:50:37,070
for example it'll be an Essbase and you

2455
01:50:35,449 --> 01:50:38,629
can see that we get a lot of destination

2456
01:50:37,070 --> 01:50:42,199
unreachable because host is prohibitive

2457
01:50:38,630 --> 01:50:44,510
messages if we do scans based on DNS

2458
01:50:42,199 --> 01:50:46,759
data and on the right you can see a

2459
01:50:44,510 --> 01:50:48,590
little table it summarizes basically

2460
01:50:46,760 --> 01:50:50,780
what kind of messages we go out and I'm

2461
01:50:48,590 --> 01:50:52,280
going to from some of those types and

2462
01:50:50,780 --> 01:50:56,780
see what we actually found when we

2463
01:50:52,280 --> 01:50:59,090
looked into those messages I think it

2464
01:50:56,780 --> 01:51:00,590
should start with redirect messages so

2465
01:50:59,090 --> 01:51:03,229
if you don't know what redirect messages

2466
01:51:00,590 --> 01:51:06,380
are they are basically used to signal a

2467
01:51:03,229 --> 01:51:09,829
better pass in your local network so

2468
01:51:06,380 --> 01:51:11,539
RFC 1820 1812 actually states these

2469
01:51:09,829 --> 01:51:13,249
three things and the most important one

2470
01:51:11,539 --> 01:51:15,228
it's in the middle it basically says

2471
01:51:13,249 --> 01:51:16,880
yeah well if the source address of the

2472
01:51:15,229 --> 01:51:20,059
packets on the same logical network is

2473
01:51:16,880 --> 01:51:22,099
you you may send these things however we

2474
01:51:20,059 --> 01:51:25,659
never are but we still got 18 million of

2475
01:51:22,099 --> 01:51:25,659
those messages over the public Internet

2476
01:51:26,800 --> 01:51:31,550
100,000 of those are network redirects

2477
01:51:29,329 --> 01:51:33,709
which the RSA says you must not send

2478
01:51:31,550 --> 01:51:37,519
Pickers they don't make sure we make any

2479
01:51:33,709 --> 01:51:39,380
lot of sense if you look at them well

2480
01:51:37,519 --> 01:51:41,539
but the majority of host redirects and

2481
01:51:39,380 --> 01:51:45,210
they affect roughly two thousand asses

2482
01:51:41,539 --> 01:51:50,330
and these are roughly four thousand

2483
01:51:45,210 --> 01:51:53,370
in these redirects roughly were 400,000

2484
01:51:50,330 --> 01:51:54,690
destinations and within all our DNS data

2485
01:51:53,370 --> 01:51:58,380
that we actually have we found also that

2486
01:51:54,690 --> 01:51:59,879
900 of them had an a record and some of

2487
01:51:58,380 --> 01:52:02,240
those actually redirect you to private

2488
01:51:59,880 --> 01:52:04,980
addresses or bruised left address spaces

2489
01:52:02,240 --> 01:52:07,170
okay this is not good

2490
01:52:04,980 --> 01:52:09,870
next we looked at source quench messages

2491
01:52:07,170 --> 01:52:12,270
so if you you probably remember that I

2492
01:52:09,870 --> 01:52:14,099
didn't actually really knew what source

2493
01:52:12,270 --> 01:52:17,940
quench was when I started this and it's

2494
01:52:14,100 --> 01:52:19,710
basically like easy ends grandparent so

2495
01:52:17,940 --> 01:52:21,929
the idea was when the route is congested

2496
01:52:19,710 --> 01:52:24,390
it's and the source bunch message to the

2497
01:52:21,930 --> 01:52:26,220
sender's however research found well

2498
01:52:24,390 --> 01:52:29,160
it's kind of unfair if you do that and

2499
01:52:26,220 --> 01:52:30,930
it can lead to blind attacks and you

2500
01:52:29,160 --> 01:52:34,080
guys said please don't send those in

2501
01:52:30,930 --> 01:52:36,480
1995 and you also said please ignore

2502
01:52:34,080 --> 01:52:39,210
those messages in 2012 and most actually

2503
01:52:36,480 --> 01:52:41,700
do that since 2005 yet we still found

2504
01:52:39,210 --> 01:52:44,250
that they're roughly 2 now a thousand I

2505
01:52:41,700 --> 01:52:47,760
piece located in over 350 asses that

2506
01:52:44,250 --> 01:52:49,560
still issue those messages mostly those

2507
01:52:47,760 --> 01:52:51,720
messages were issued in the destination

2508
01:52:49,560 --> 01:52:55,710
access but we also found some that were

2509
01:52:51,720 --> 01:53:00,390
issued on path I mean we look into some

2510
01:52:55,710 --> 01:53:02,070
vendor manuals of yeah some some router

2511
01:53:00,390 --> 01:53:04,550
manuals and we found that most of those

2512
01:53:02,070 --> 01:53:08,040
vendors also state that they removed it

2513
01:53:04,550 --> 01:53:10,260
in between 2000 2010 but you can still

2514
01:53:08,040 --> 01:53:11,790
see it takes decades to get stuff out of

2515
01:53:10,260 --> 01:53:13,290
the internet so whatever you're

2516
01:53:11,790 --> 01:53:18,750
standardizing people will use it forever

2517
01:53:13,290 --> 01:53:20,010
if I once activated it all right yeah we

2518
01:53:18,750 --> 01:53:23,580
also looked at another thing

2519
01:53:20,010 --> 01:53:26,070
fragmentation and if something gets

2520
01:53:23,580 --> 01:53:28,080
fragmented because as I said we also

2521
01:53:26,070 --> 01:53:31,799
scan for quick so our packets are

2522
01:53:28,080 --> 01:53:34,410
roughly 1000 fluid bytes and it as it

2523
01:53:31,800 --> 01:53:35,880
turns out or is we use a map default in

2524
01:53:34,410 --> 01:53:38,910
our scans and they don't set the don't

2525
01:53:35,880 --> 01:53:43,530
segment bit so we got some fragment time

2526
01:53:38,910 --> 01:53:45,510
exceeded messages from another couple of

2527
01:53:43,530 --> 01:53:48,380
scans where we do set those bits we see

2528
01:53:45,510 --> 01:53:50,520
that there's a bit of fragmentation so

2529
01:53:48,380 --> 01:53:52,830
yeah

2530
01:53:50,520 --> 01:53:54,780
another big bunch of messages that we

2531
01:53:52,830 --> 01:53:57,630
actually got were TTL exceeded messages

2532
01:53:54,780 --> 01:53:58,410
which were kind of what when I first saw

2533
01:53:57,630 --> 01:54:00,930
them because I was

2534
01:53:58,410 --> 01:54:03,150
well those internet paths actually so

2535
01:54:00,930 --> 01:54:05,730
long what are our TTL values and it

2536
01:54:03,150 --> 01:54:09,120
turns out it's the max in Z map and the

2537
01:54:05,730 --> 01:54:11,280
otherwise we take the Linux default so

2538
01:54:09,120 --> 01:54:12,990
we ask yourself other paths very long

2539
01:54:11,280 --> 01:54:15,570
are the many middle boxes tweaking our

2540
01:54:12,990 --> 01:54:18,990
titi outs or are there maybe routing

2541
01:54:15,570 --> 01:54:20,790
loops and we basically performed a whole

2542
01:54:18,990 --> 01:54:23,340
bunch of trace routes to see if there

2543
01:54:20,790 --> 01:54:29,070
are loops and we were able to basically

2544
01:54:23,340 --> 01:54:31,260
defined roughly 440,000 / 24 from

2545
01:54:29,070 --> 01:54:35,570
roughly 20,000 SS that were unreachable

2546
01:54:31,260 --> 01:54:38,870
dgo loop yeah

2547
01:54:35,570 --> 01:54:41,940
interestingly we thought we could find

2548
01:54:38,870 --> 01:54:44,599
130,000 that or the pass where we had

2549
01:54:41,940 --> 01:54:47,250
all a piece of all involved routers and

2550
01:54:44,600 --> 01:54:49,890
with simple checks we could see that

2551
01:54:47,250 --> 01:54:52,650
roughly 5,000 of those actually also

2552
01:54:49,890 --> 01:54:55,170
cross is boundaries of loops

2553
01:54:52,650 --> 01:54:56,629
however you can definitely make that

2554
01:54:55,170 --> 01:54:59,610
better

2555
01:54:56,630 --> 01:55:01,650
yeah then we also looked at whether or

2556
01:54:59,610 --> 01:55:03,780
not these loops are persistent so we

2557
01:55:01,650 --> 01:55:05,940
compared basically trace routes from two

2558
01:55:03,780 --> 01:55:08,580
weeks apart and we found that loops from

2559
01:55:05,940 --> 01:55:15,089
roughly 150 Isis disappeared but they

2560
01:55:08,580 --> 01:55:17,820
were still 404 subnets unreachable

2561
01:55:15,090 --> 01:55:20,070
we also found loops in our upstream ISP

2562
01:55:17,820 --> 01:55:21,719
in the German research network which was

2563
01:55:20,070 --> 01:55:23,940
nice because we can contact them and

2564
01:55:21,720 --> 01:55:27,570
they confirm the loops which they didn't

2565
01:55:23,940 --> 01:55:29,519
really like they fix the loops and for

2566
01:55:27,570 --> 01:55:31,769
her so we're specific they could tell us

2567
01:55:29,520 --> 01:55:34,680
basically it was a static route they had

2568
01:55:31,770 --> 01:55:37,260
once in one router then they removed it

2569
01:55:34,680 --> 01:55:39,210
another one but it was basically still

2570
01:55:37,260 --> 01:55:41,700
forwarding packets to the other router

2571
01:55:39,210 --> 01:55:43,230
but this rotor had no knowledge about

2572
01:55:41,700 --> 01:55:45,030
the drought anymore and send it to its

2573
01:55:43,230 --> 01:55:48,000
default route which was the first router

2574
01:55:45,030 --> 01:55:50,759
and yeah so it's that you loop

2575
01:55:48,000 --> 01:55:52,530
all right this brings me to my aunt so

2576
01:55:50,760 --> 01:55:54,090
as you probably know the internet is

2577
01:55:52,530 --> 01:55:57,300
full of defecation badly configured

2578
01:55:54,090 --> 01:55:59,090
systems we've got more things in our

2579
01:55:57,300 --> 01:56:01,710
paper

2580
01:55:59,090 --> 01:56:03,330
the nice thing I mean we all know that

2581
01:56:01,710 --> 01:56:04,770
but the nice thing is we could find that

2582
01:56:03,330 --> 01:56:06,680
without actually doing any new

2583
01:56:04,770 --> 01:56:08,520
measurements these were all done from

2584
01:56:06,680 --> 01:56:10,890
apart from the trace routes

2585
01:56:08,520 --> 01:56:11,790
we're all done using data that we

2586
01:56:10,890 --> 01:56:15,630
already cooked

2587
01:56:11,790 --> 01:56:18,150
what never looked at yeah lots of

2588
01:56:15,630 --> 01:56:20,310
routing loops our data set is partly

2589
01:56:18,150 --> 01:56:24,000
available until last month's will

2590
01:56:20,310 --> 01:56:27,870
visually our drives run full yeah thank

2591
01:56:24,000 --> 01:56:30,960
you all right we've got four minutes

2592
01:56:27,870 --> 01:56:34,200
left in the session yeah questions for

2593
01:56:30,960 --> 01:56:36,510
Yann or if we don't have those any other

2594
01:56:34,200 --> 01:56:39,090
comments on work for the group would be

2595
01:56:36,510 --> 01:56:41,400
great along the lines of ice for the

2596
01:56:39,090 --> 01:56:43,200
last three times we've participated in

2597
01:56:41,400 --> 01:56:45,650
the hackathon so we're welcome to Meaney

2598
01:56:43,200 --> 01:56:55,470
what can I talk about that anything

2599
01:56:45,650 --> 01:56:57,240
thanks young okay so um along the lines

2600
01:56:55,470 --> 01:56:59,670
of the invitation to talk about topics

2601
01:56:57,240 --> 01:57:02,370
for the group Mary and I have been

2602
01:56:59,670 --> 01:57:04,800
encouraging people to do measurement

2603
01:57:02,370 --> 01:57:06,330
work here not just report it so we've

2604
01:57:04,800 --> 01:57:10,140
been doing that and the hackathon and

2605
01:57:06,330 --> 01:57:11,370
the large-scale scope of it is what I've

2606
01:57:10,140 --> 01:57:14,700
been trying to do in the hackathon is

2607
01:57:11,370 --> 01:57:16,470
create an anima anonymity sets for world

2608
01:57:14,700 --> 01:57:18,179
wide web clients and there was some

2609
01:57:16,470 --> 01:57:19,440
really nice work at the nrw if you

2610
01:57:18,180 --> 01:57:21,330
haven't seen the program there check

2611
01:57:19,440 --> 01:57:22,799
that out about what can you learn from

2612
01:57:21,330 --> 01:57:24,990
an IP where they surveyed the

2613
01:57:22,800 --> 01:57:28,350
server-side IP addresses and what you

2614
01:57:24,990 --> 01:57:29,880
can learn from those and in PRG and I'm

2615
01:57:28,350 --> 01:57:32,070
also interested in doing this creating

2616
01:57:29,880 --> 01:57:34,350
anonymity sets somehow of the service

2617
01:57:32,070 --> 01:57:35,400
side so people can't profile encrypted

2618
01:57:34,350 --> 01:57:37,290
traffic and determine what you're

2619
01:57:35,400 --> 01:57:39,570
talking to so if that's something you're

2620
01:57:37,290 --> 01:57:41,010
interested in get in touch with me or

2621
01:57:39,570 --> 01:57:42,330
talk about it on the list or you might

2622
01:57:41,010 --> 01:57:44,880
be able to do it in Singapore the

2623
01:57:42,330 --> 01:57:47,420
hackathon feel like that's all we have

2624
01:57:44,880 --> 01:57:47,420
thanks so much

