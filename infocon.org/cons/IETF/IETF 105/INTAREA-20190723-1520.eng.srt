1
00:00:09,000 --> 00:01:07,799
how are you sir how much hello everyone

2
00:01:04,540 --> 00:01:13,080
so we're going to get started creation

3
00:01:07,799 --> 00:01:13,080
see all your conversations elsewhere

4
00:01:39,789 --> 00:01:49,189
hello everyone so welcome to the

5
00:01:42,200 --> 00:01:58,369
interrelation great thanks gamez that's

6
00:01:49,189 --> 00:01:59,000
good so welcome to Montreal one word of

7
00:01:58,369 --> 00:02:01,039
advice

8
00:01:59,000 --> 00:02:02,990
Seaforth room and then you can start in

9
00:02:01,039 --> 00:02:04,090
English we'll get you through in

10
00:02:02,990 --> 00:02:09,829
Montreal

11
00:02:04,090 --> 00:02:15,049
that's the homes so what Cardozo Higa

12
00:02:09,830 --> 00:02:17,000
cooks was seen every turn and this is

13
00:02:15,049 --> 00:02:20,450
another well I guess most of you know it

14
00:02:17,000 --> 00:02:22,519
but still a reminder to you that we

15
00:02:20,450 --> 00:02:26,510
participate and you agreed to follow the

16
00:02:22,519 --> 00:02:29,900
ITF processes and policies that all that

17
00:02:26,510 --> 00:02:33,530
we're saying is being recorded and if

18
00:02:29,900 --> 00:02:38,269
you have any questions or want more

19
00:02:33,530 --> 00:02:39,980
details please check the details so the

20
00:02:38,269 --> 00:02:42,350
minutes are taken the meeting is

21
00:02:39,980 --> 00:02:47,170
recorded the presence is lots of bushes

22
00:02:42,350 --> 00:02:49,820
are going around please write your name

23
00:02:47,170 --> 00:02:57,380
can we have someone helping us with the

24
00:02:49,820 --> 00:02:59,989
her path Ian it's not it was really very

25
00:02:57,380 --> 00:03:04,459
kind and very good at notes but we have

26
00:02:59,989 --> 00:03:06,560
a help from someone else I'm taking

27
00:03:04,459 --> 00:03:10,760
notes it's an easy meeting we don't

28
00:03:06,560 --> 00:03:19,940
expect much debate just copy-paste

29
00:03:10,760 --> 00:03:22,959
agenda good some no yeah anyone scribe

30
00:03:19,940 --> 00:03:22,959
for the inner path means

31
00:03:27,040 --> 00:03:39,620
we do need some ascribe to of the

32
00:03:30,709 --> 00:03:55,970
meeting so anyone wants to be

33
00:03:39,620 --> 00:04:10,359
volunteered to take notes what can

34
00:03:55,970 --> 00:04:16,100
someone start thank you thank you so

35
00:04:10,359 --> 00:04:19,220
tell me with backup great

36
00:04:16,100 --> 00:04:25,580
so Jabbar

37
00:04:19,220 --> 00:04:29,229
we have someone for gathering someone

38
00:04:25,580 --> 00:04:29,229
that can related question is from Jabbar

39
00:04:29,260 --> 00:04:37,370
these things entering great so the

40
00:04:34,550 --> 00:04:40,510
agenda this time it's actually a light

41
00:04:37,370 --> 00:04:43,610
one will give you the detailed update

42
00:04:40,510 --> 00:04:45,550
then we have Tommy percentage so we'll

43
00:04:43,610 --> 00:04:48,560
meet back up on their own notes there

44
00:04:45,550 --> 00:04:50,410
then we have Ron that is going to talk

45
00:04:48,560 --> 00:04:54,169
about the IP protocol second routing

46
00:04:50,410 --> 00:04:56,150
Vladimir on sock protocol and these

47
00:04:54,169 --> 00:05:00,198
guidelines and registration procedures

48
00:04:56,150 --> 00:05:03,849
or interfaces that infernal right any

49
00:05:00,199 --> 00:05:03,849
bashing or any comments to the agenda

50
00:05:04,180 --> 00:05:13,750
hearing none we'll move on to the chairs

51
00:05:08,630 --> 00:05:17,449
update so we have two drafts now on is G

52
00:05:13,750 --> 00:05:21,050
valuation IP fragmentation consider

53
00:05:17,449 --> 00:05:23,690
fragile so it's right now the very last

54
00:05:21,050 --> 00:05:26,960
steps and is geometric about evaluation

55
00:05:23,690 --> 00:05:29,599
and also the little gooey we have it

56
00:05:26,960 --> 00:05:32,510
there some revisions needed but no more

57
00:05:29,599 --> 00:05:36,010
major things so no publications but at

58
00:05:32,510 --> 00:05:36,010
least two drugs at advanced

59
00:05:37,470 --> 00:06:15,040
so without further ado we can move - did

60
00:06:13,630 --> 00:06:19,270
you track your sings we will start right

61
00:06:15,040 --> 00:06:21,780
now yeah I wasn't actually able to get

62
00:06:19,270 --> 00:06:21,780
on Dave Drucker

63
00:06:26,460 --> 00:06:36,640
thank you so I'll be sharing our updates

64
00:06:32,890 --> 00:06:39,640
on the provisioning domains draft that

65
00:06:36,640 --> 00:06:42,849
we have here in int area it is actually

66
00:06:39,640 --> 00:06:48,190
in working group last call we didn't get

67
00:06:42,850 --> 00:06:51,250
a ton of feedback but we did get some

68
00:06:48,190 --> 00:06:52,900
very good input from Ted Levin so I want

69
00:06:51,250 --> 00:06:58,090
to cover what were some of the updates

70
00:06:52,900 --> 00:07:01,239
we have in version o 5 which is the most

71
00:06:58,090 --> 00:07:03,159
recent published version and a lot of

72
00:07:01,240 --> 00:07:06,850
these were in response to the sector

73
00:07:03,160 --> 00:07:09,640
review that we got and then I also want

74
00:07:06,850 --> 00:07:11,080
to cover some of the points that were

75
00:07:09,640 --> 00:07:13,930
brought up in the most recent review

76
00:07:11,080 --> 00:07:17,469
during the last call from Ted we are

77
00:07:13,930 --> 00:07:21,340
currently in progress on building a oh

78
00:07:17,470 --> 00:07:23,740
six version and what I want to do here

79
00:07:21,340 --> 00:07:25,539
today is get feedback from the group on

80
00:07:23,740 --> 00:07:27,300
some of the changes and decisions that

81
00:07:25,540 --> 00:07:29,440
we're making based on this feedback

82
00:07:27,300 --> 00:07:31,590
validate that is what we want and if we

83
00:07:29,440 --> 00:07:36,030
are happy with it we will push a new

84
00:07:31,590 --> 00:07:36,030
update very shortly hopefully this week

85
00:07:37,480 --> 00:07:44,950
so to start out with the updates in

86
00:07:39,670 --> 00:07:47,410
version of five so I think some of the

87
00:07:44,950 --> 00:07:49,960
overall feedback that we got from the

88
00:07:47,410 --> 00:07:52,060
second review is just kind of needing

89
00:07:49,960 --> 00:07:54,479
more clarity at the beginning through

90
00:07:52,060 --> 00:07:56,650
the intro of the use cases how

91
00:07:54,480 --> 00:07:58,930
provisioning domains and discovery of

92
00:07:56,650 --> 00:08:01,739
multiple provisioning domains is really

93
00:07:58,930 --> 00:08:04,390
enabling a user who's on a network

94
00:08:01,740 --> 00:08:06,520
connected to one Wi-Fi router to be able

95
00:08:04,390 --> 00:08:08,229
to discover multiple up links and what

96
00:08:06,520 --> 00:08:12,159
is the actual user scenario driving this

97
00:08:08,230 --> 00:08:15,240
and what are the security guarantees or

98
00:08:12,160 --> 00:08:19,620
lack thereof so we added a bunch of text

99
00:08:15,240 --> 00:08:19,620
for more user examples here

100
00:08:20,320 --> 00:08:25,360
additionally we had some modifications

101
00:08:22,390 --> 00:08:27,010
to how we are doing the PVD additional

102
00:08:25,360 --> 00:08:31,210
information and as a reminder this is

103
00:08:27,010 --> 00:08:32,979
the extra information that we get back

104
00:08:31,210 --> 00:08:35,530
once we've already learned that PVD

105
00:08:32,979 --> 00:08:38,979
exists from the RA we can go fetch other

106
00:08:35,530 --> 00:08:41,978
other properties about it this had

107
00:08:38,979 --> 00:08:44,830
previously been using a X - scheme that

108
00:08:41,979 --> 00:08:47,070
is not recommended so we said don't use

109
00:08:44,830 --> 00:08:49,210
that use a vendor - game and we also

110
00:08:47,070 --> 00:08:51,430
clarified much more about how the ini

111
00:08:49,210 --> 00:08:55,150
registry and review would work for keys

112
00:08:51,430 --> 00:08:57,910
within this JSON object we also

113
00:08:55,150 --> 00:08:59,530
registered the media type for a PVD JSON

114
00:08:57,910 --> 00:09:03,010
to be more explicit about what type of

115
00:08:59,530 --> 00:09:05,800
information this is and we also

116
00:09:03,010 --> 00:09:09,160
clarified based on I think some feedback

117
00:09:05,800 --> 00:09:11,109
from Eric Klein the header values that

118
00:09:09,160 --> 00:09:14,500
we need for nested Ras and we cleaned up

119
00:09:11,110 --> 00:09:16,420
some of the text there all right so

120
00:09:14,500 --> 00:09:19,410
that's what we already have that was in

121
00:09:16,420 --> 00:09:22,599
the last call version of the document so

122
00:09:19,410 --> 00:09:25,420
based on the review we have a number of

123
00:09:22,600 --> 00:09:28,120
pending updates some of these are just

124
00:09:25,420 --> 00:09:31,000
editorial so I can just cover these here

125
00:09:28,120 --> 00:09:33,880
they're not quite as interesting and for

126
00:09:31,000 --> 00:09:36,310
reference this is the URL that we have

127
00:09:33,880 --> 00:09:37,600
of the document on github and if you

128
00:09:36,310 --> 00:09:39,369
want to download the slides and go

129
00:09:37,600 --> 00:09:42,160
follow that URL you can look at our

130
00:09:39,370 --> 00:09:43,810
current pull request you can comment you

131
00:09:42,160 --> 00:09:45,189
can tell us what is good or bad about

132
00:09:43,810 --> 00:09:48,270
the changes that we're proposing and

133
00:09:45,190 --> 00:09:48,270
that'd be very much appreciated

134
00:09:48,700 --> 00:09:54,130
so as far as the editorial changes we're

135
00:09:51,430 --> 00:09:56,410
doing or shortening the abstractors a

136
00:09:54,130 --> 00:09:58,420
little bit too much too wordy for an

137
00:09:56,410 --> 00:10:00,730
abstract and we are expanding the

138
00:09:58,420 --> 00:10:03,089
introduction a bit improving the flow

139
00:10:00,730 --> 00:10:07,720
based on some feedback from Ted and

140
00:10:03,090 --> 00:10:13,750
clarifying some of the examples we also

141
00:10:07,720 --> 00:10:16,960
added some more examples into how ipv4

142
00:10:13,750 --> 00:10:21,220
the adage to be before is kind of

143
00:10:16,960 --> 00:10:25,360
coexisting in the the world of explicit

144
00:10:21,220 --> 00:10:26,710
pvd's this was already somewhat implicit

145
00:10:25,360 --> 00:10:28,110
in the text but it wasn't really

146
00:10:26,710 --> 00:10:34,120
explained how it would work in practice

147
00:10:28,110 --> 00:10:36,750
so to cover this the thought is if you

148
00:10:34,120 --> 00:10:40,210
have two different up links let's say a

149
00:10:36,750 --> 00:10:41,890
Wi-Fi provider and a cell provider only

150
00:10:40,210 --> 00:10:45,250
one of them is going to be providing

151
00:10:41,890 --> 00:10:47,080
useful routable IP v4 all the way to the

152
00:10:45,250 --> 00:10:49,330
end client if I have source address

153
00:10:47,080 --> 00:10:51,490
selection for both so I would be able to

154
00:10:49,330 --> 00:10:54,610
associate one of those explicit pvd's

155
00:10:51,490 --> 00:10:58,540
with the DHCP v4 and any additional

156
00:10:54,610 --> 00:11:01,090
information let's say the the service is

157
00:10:58,540 --> 00:11:03,969
offered by my Wi-Fi service that I

158
00:11:01,090 --> 00:11:06,250
discover from that pvd's additional

159
00:11:03,970 --> 00:11:09,700
information those could apply to the

160
00:11:06,250 --> 00:11:13,750
Associated v4 connections whereas the

161
00:11:09,700 --> 00:11:18,670
other link would be forced to be v6 only

162
00:11:13,750 --> 00:11:20,200
in this case we also updated some of the

163
00:11:18,670 --> 00:11:25,060
references to how you handle case

164
00:11:20,200 --> 00:11:28,420
insensitivity comparisons for the fqdn

165
00:11:25,060 --> 00:11:31,300
for the PVD ID to just refer to how our

166
00:11:28,420 --> 00:11:33,729
c 43:43 does it rather than trying to

167
00:11:31,300 --> 00:11:35,890
explain it on our own which was not the

168
00:11:33,730 --> 00:11:39,970
best way to go all right so that's

169
00:11:35,890 --> 00:11:42,970
editorial updates so these next ones are

170
00:11:39,970 --> 00:11:46,360
more content changes and so these I

171
00:11:42,970 --> 00:11:47,770
would ask if you have an opinion on is

172
00:11:46,360 --> 00:11:49,390
this the right thing or not the right

173
00:11:47,770 --> 00:11:51,490
thing please do come up to the mic for

174
00:11:49,390 --> 00:11:53,020
each of these just give us a sense of if

175
00:11:51,490 --> 00:11:56,500
this is the right direction based on the

176
00:11:53,020 --> 00:11:59,710
working groups thoughts so Ted pointed

177
00:11:56,500 --> 00:12:02,110
out that the way we were specifying the

178
00:11:59,710 --> 00:12:05,430
coexistence

179
00:12:02,110 --> 00:12:07,960
integration of dhcpv6 information with

180
00:12:05,430 --> 00:12:12,520
pvd's and with multiple pvd's that come

181
00:12:07,960 --> 00:12:13,840
from Ras was not correct it was not

182
00:12:12,520 --> 00:12:17,020
really well thought out and it didn't

183
00:12:13,840 --> 00:12:19,210
actually work this is largely because I

184
00:12:17,020 --> 00:12:20,530
think this is not one of the major use

185
00:12:19,210 --> 00:12:22,360
cases of the striving this we just need

186
00:12:20,530 --> 00:12:23,890
to make sure that there is some

187
00:12:22,360 --> 00:12:25,540
consistent way to fold in this

188
00:12:23,890 --> 00:12:31,000
information something for the client to

189
00:12:25,540 --> 00:12:34,120
do so we had some discussions and thank

190
00:12:31,000 --> 00:12:36,250
you to Eric Lyon and Lorenzo for giving

191
00:12:34,120 --> 00:12:39,850
some guidance so let's see if this is

192
00:12:36,250 --> 00:12:42,340
kind of what we think we should do what

193
00:12:39,850 --> 00:12:46,090
I have in the pull requests currently is

194
00:12:42,340 --> 00:12:50,440
specifying that if you do have a DHCP

195
00:12:46,090 --> 00:12:54,280
message that does include addresses and

196
00:12:50,440 --> 00:12:57,580
prefix that's giving out to if those do

197
00:12:54,280 --> 00:13:00,100
match a Pio that came from an RA that is

198
00:12:57,580 --> 00:13:01,990
defining a PVD then you can associate

199
00:13:00,100 --> 00:13:06,310
that information with the PVD that you

200
00:13:01,990 --> 00:13:09,550
have either implicitly or explicitly if

201
00:13:06,310 --> 00:13:12,189
there is no Pio in your RA or if nothing

202
00:13:09,550 --> 00:13:15,699
matches this dhcpv6 then that is

203
00:13:12,190 --> 00:13:17,740
essentially a separate implicit PVD

204
00:13:15,700 --> 00:13:19,960
interface you cannot treat it as

205
00:13:17,740 --> 00:13:22,420
belonging to anything else it's just

206
00:13:19,960 --> 00:13:24,970
kind of off on its own and if you have

207
00:13:22,420 --> 00:13:26,439
stateless dhcpv6 information something

208
00:13:24,970 --> 00:13:29,410
that's not associated with an address or

209
00:13:26,440 --> 00:13:32,110
prefix then we just kind of associate

210
00:13:29,410 --> 00:13:33,490
that with any of the implicit people T's

211
00:13:32,110 --> 00:13:36,100
on the interface which is essentially

212
00:13:33,490 --> 00:13:39,040
the existing behavior just treat it with

213
00:13:36,100 --> 00:13:40,990
the the implicit configuration for the

214
00:13:39,040 --> 00:13:42,670
device but it's not necessarily

215
00:13:40,990 --> 00:13:44,110
associated with new explicit

216
00:13:42,670 --> 00:13:51,430
configuration that's coming through the

217
00:13:44,110 --> 00:13:58,180
RA so is this a viable resolution to

218
00:13:51,430 --> 00:14:00,670
this problem this is like dodging the

219
00:13:58,180 --> 00:14:04,030
problem and putting it and moving the

220
00:14:00,670 --> 00:14:05,319
problem to where we have to when you

221
00:14:04,030 --> 00:14:07,060
know one we need to select the PD

222
00:14:05,320 --> 00:14:08,290
because it's easy to say well I don't

223
00:14:07,060 --> 00:14:10,689
know where to put this I'm just gonna

224
00:14:08,290 --> 00:14:12,370
put it in its own box but the problem is

225
00:14:10,690 --> 00:14:15,660
if let's say I want

226
00:14:12,370 --> 00:14:18,010
these 56 only network right which okay

227
00:14:15,660 --> 00:14:20,050
but yeah I'm gonna disagree six only

228
00:14:18,010 --> 00:14:22,360
network and there's no Pio so go to

229
00:14:20,050 --> 00:14:24,219
address and I've got it full route

230
00:14:22,360 --> 00:14:26,010
okay so that default boot came from the

231
00:14:24,220 --> 00:14:28,750
RA there's no containers there's no Pio

232
00:14:26,010 --> 00:14:30,400
everything is off link and so those

233
00:14:28,750 --> 00:14:31,660
should actually go in one PVD because

234
00:14:30,400 --> 00:14:33,339
there's otherwise there's no people

235
00:14:31,660 --> 00:14:34,689
there's no single PD that I can select

236
00:14:33,339 --> 00:14:37,210
that will actually give me any

237
00:14:34,690 --> 00:14:39,550
connectivity do you want this to be

238
00:14:37,210 --> 00:14:42,160
compatible with an explicit PPD or is

239
00:14:39,550 --> 00:14:45,370
this just to manage how I connect to

240
00:14:42,160 --> 00:14:50,650
things like the PVD and what's the PVD

241
00:14:45,370 --> 00:14:53,110
for right I mean if it's only about the

242
00:14:50,650 --> 00:14:54,040
stack sort of like associated bits of

243
00:14:53,110 --> 00:14:56,050
things to each other

244
00:14:54,040 --> 00:14:58,800
mhm that's fine if I can't select

245
00:14:56,050 --> 00:15:01,779
something that's gonna give me you know

246
00:14:58,800 --> 00:15:04,029
connectivity then doesn't seem very

247
00:15:01,779 --> 00:15:05,140
useful so that's what I'm saying it's

248
00:15:04,029 --> 00:15:08,700
obviously like internally consistent

249
00:15:05,140 --> 00:15:12,760
it'll work it's just like one doesn't

250
00:15:08,700 --> 00:15:14,860
turn out to be very useful thing I think

251
00:15:12,760 --> 00:15:17,560
in that case I'm imagining just kind of

252
00:15:14,860 --> 00:15:19,300
falls into the existing behavior for

253
00:15:17,560 --> 00:15:26,020
devices and you just use it as an

254
00:15:19,300 --> 00:15:29,319
implicit local Braddock's request

255
00:15:26,020 --> 00:15:31,240
succeeds you know ten seconds after so

256
00:15:29,320 --> 00:15:32,740
dear now about this implicit PVD you

257
00:15:31,240 --> 00:15:34,630
know I'm gonna fall through

258
00:15:32,740 --> 00:15:36,850
now everything on this integration is

259
00:15:34,630 --> 00:15:38,820
now also in this implicitly we need even

260
00:15:36,850 --> 00:15:57,339
though everything else was containerized

261
00:15:38,820 --> 00:16:00,459
wasn't isn't the current state and now

262
00:15:57,339 --> 00:16:06,730
so look I got an NTP server from from DC

263
00:16:00,459 --> 00:16:12,880
v6 oh dear now you like D a great and so

264
00:16:06,730 --> 00:16:15,089
now that these I think Eric wants to say

265
00:16:12,880 --> 00:16:17,770
something but Ted

266
00:16:15,089 --> 00:16:19,240
go for Tatia so it just occurred to me

267
00:16:17,770 --> 00:16:21,930
when you when you read that last item

268
00:16:19,240 --> 00:16:24,310
that actually it doesn't make sense for

269
00:16:21,930 --> 00:16:26,380
stateless to only be associated with

270
00:16:24,310 --> 00:16:29,890
implicit pvd's stateless

271
00:16:26,380 --> 00:16:33,070
actually have a clear PVD that we can

272
00:16:29,890 --> 00:16:37,870
label it that we can associate it with

273
00:16:33,070 --> 00:16:42,310
yeah it really applies to every okay you

274
00:16:37,870 --> 00:16:44,880
can say that Eric Clint so if you didn't

275
00:16:42,310 --> 00:16:48,939
have a Pio to match addresses you got

276
00:16:44,880 --> 00:16:52,689
you could easily have an REO that covers

277
00:16:48,940 --> 00:16:54,640
it and and then you know that it's

278
00:16:52,690 --> 00:16:57,820
operationally you could say this is

279
00:16:54,640 --> 00:16:59,410
require yeah okay you know if you're not

280
00:16:57,820 --> 00:17:01,450
gonna donor pio because you don't vio

281
00:16:59,410 --> 00:17:04,810
and you can put an RA oh that's a /tt

282
00:17:01,450 --> 00:17:06,579
cord that covers the addresses you kind

283
00:17:04,810 --> 00:17:08,290
out and then you can identify that

284
00:17:06,579 --> 00:17:10,030
that's the explicit PVDF combined with

285
00:17:08,290 --> 00:17:14,920
and then on the second thing I was gonna

286
00:17:10,030 --> 00:17:17,040
say mm-hmm I think there would there

287
00:17:14,920 --> 00:17:19,449
obviously will need to be some kind of

288
00:17:17,040 --> 00:17:22,359
operating system API awareness to

289
00:17:19,449 --> 00:17:23,520
discover that there's these PBM some

290
00:17:22,359 --> 00:17:26,229
implicit some explicit they had

291
00:17:23,520 --> 00:17:28,359
information and nothing prevents you

292
00:17:26,230 --> 00:17:30,970
nothing prevents an application for

293
00:17:28,359 --> 00:17:32,310
mixing and matching information mister

294
00:17:30,970 --> 00:17:35,110
hoping for the best

295
00:17:32,310 --> 00:17:36,790
yep right the PPD's are there to say

296
00:17:35,110 --> 00:17:41,969
this is a consistent set of information

297
00:17:36,790 --> 00:17:41,970
is where we can guarantees associated

298
00:17:42,330 --> 00:17:48,340
don't work correct right we might work

299
00:17:46,600 --> 00:17:50,740
so you could say or I learned about an

300
00:17:48,340 --> 00:17:52,600
NTP server it's not part of any anybody

301
00:17:50,740 --> 00:17:57,940
but it's part of an implicit PVD I'll

302
00:17:52,600 --> 00:18:01,919
give it a shot yeah good point also if

303
00:17:57,940 --> 00:18:04,390
you have thoughts on that if you could

304
00:18:01,920 --> 00:18:05,950
write those down as like a comment on

305
00:18:04,390 --> 00:18:08,730
the PR or suggestive text that'd be

306
00:18:05,950 --> 00:18:08,730
great thank you

307
00:18:16,440 --> 00:18:21,310
when it's very same what matches right

308
00:18:19,420 --> 00:18:26,620
so it says like addresses and prefixes

309
00:18:21,310 --> 00:18:30,070
match yeah so if I got a slash 48 in a I

310
00:18:26,620 --> 00:18:32,770
APD right which will do mass like a

311
00:18:30,070 --> 00:18:35,919
slash 64 in the CIO right like but it's

312
00:18:32,770 --> 00:18:37,290
like a subset right so like I'm just

313
00:18:35,920 --> 00:18:38,820
trying to understand like you know

314
00:18:37,290 --> 00:18:40,379
would be mean my man so I think there's

315
00:18:38,820 --> 00:18:42,540
like a bit more description required

316
00:18:40,380 --> 00:18:44,970
because I think it doesn't match in my

317
00:18:42,540 --> 00:18:48,260
head can you man it looks like a foo

318
00:18:44,970 --> 00:18:53,460
slash 48 coming in I APD another thing

319
00:18:48,260 --> 00:18:55,620
who ABCD 64 yep right it falls another

320
00:18:53,460 --> 00:19:02,820
48 but I don't think it's alright so we

321
00:18:55,620 --> 00:19:04,169
want a one-way inclusion and stuff like

322
00:19:02,820 --> 00:19:05,820
that right instead of saying that

323
00:19:04,170 --> 00:19:06,870
prefixes and whatever because we don't

324
00:19:05,820 --> 00:19:09,179
know what's going to be defined for

325
00:19:06,870 --> 00:19:13,189
these TV sets right so that's how go

326
00:19:09,180 --> 00:19:13,190
into specifics the specific TV options

327
00:19:17,630 --> 00:19:23,150
feel we should try to be better than

328
00:19:19,710 --> 00:19:26,520
this I'm not quite sure how but I mean

329
00:19:23,150 --> 00:19:31,950
so you know one one thing that we do

330
00:19:26,520 --> 00:19:34,379
today right is is we use you know 6 7 24

331
00:19:31,950 --> 00:19:36,990
sorceress selection and it sort of knows

332
00:19:34,380 --> 00:19:38,490
how to do this mostly it sort of looks

333
00:19:36,990 --> 00:19:40,170
it's what some huge face and it's like

334
00:19:38,490 --> 00:19:42,540
well this is what I'm gonna do with it

335
00:19:40,170 --> 00:19:45,590
it comes up with things that it thinks

336
00:19:42,540 --> 00:19:49,920
are likely to work and I think you know

337
00:19:45,590 --> 00:19:51,360
that's that's you know maybe in the

338
00:19:49,920 --> 00:19:53,640
absence of our information it's like

339
00:19:51,360 --> 00:19:56,159
literally if you're on a TV 6 only

340
00:19:53,640 --> 00:19:58,080
network then like there's no other

341
00:19:56,160 --> 00:19:59,550
information that's workable then to use

342
00:19:58,080 --> 00:20:01,980
default route that you go from the RA

343
00:19:59,550 --> 00:20:04,290
and the AP address that you have right

344
00:20:01,980 --> 00:20:06,480
so I think in the real world

345
00:20:04,290 --> 00:20:07,920
mm-hmm it's actually gonna be a lot more

346
00:20:06,480 --> 00:20:10,050
common that the configuration is gonna

347
00:20:07,920 --> 00:20:13,230
work because no matter how smart the

348
00:20:10,050 --> 00:20:14,399
host our hosts are the network is still

349
00:20:13,230 --> 00:20:16,080
gonna have to contend with those that

350
00:20:14,400 --> 00:20:18,770
aren't smart and so it's probably gonna

351
00:20:16,080 --> 00:20:21,060
have to make those work somehow so I

352
00:20:18,770 --> 00:20:24,060
don't know how to write this in the

353
00:20:21,060 --> 00:20:26,580
draft but yeah but I do think maybe we

354
00:20:24,060 --> 00:20:27,810
should maybe I wonder if we could say

355
00:20:26,580 --> 00:20:30,050
look you know we're gonna open up the

356
00:20:27,810 --> 00:20:32,760
implicit interface PVD and linking

357
00:20:30,050 --> 00:20:34,649
essentially if unless everything is

358
00:20:32,760 --> 00:20:36,720
containerized we would just put you know

359
00:20:34,650 --> 00:20:39,420
we just upgrade the interface implicit

360
00:20:36,720 --> 00:20:44,340
PDD was with stuff that is controller I

361
00:20:39,420 --> 00:20:45,960
store something I know an MPI you by the

362
00:20:44,340 --> 00:20:47,340
way I think I think it's fine to say

363
00:20:45,960 --> 00:20:49,080
configuration error because the Piero

364
00:20:47,340 --> 00:20:50,330
can have no flag set in which case I

365
00:20:49,080 --> 00:20:52,699
think it's in currently

366
00:20:50,330 --> 00:20:56,029
foetidus Justin Noah thinking and really

367
00:20:52,700 --> 00:20:57,679
does nothing if you say a 2-0 l20 it

368
00:20:56,029 --> 00:20:59,630
specifically you're saying configuration

369
00:20:57,679 --> 00:21:03,110
error for which case in the case where

370
00:20:59,630 --> 00:21:05,149
you have you know that's that doesn't

371
00:21:03,110 --> 00:21:07,039
match any PIOs yep you just say it's a

372
00:21:05,149 --> 00:21:08,989
configuration error the thing that was

373
00:21:07,039 --> 00:21:10,760
upgraded in the network when the PVD was

374
00:21:08,990 --> 00:21:13,580
added yeah the thing that was configured

375
00:21:10,760 --> 00:21:17,960
to add the Peabody I did it wrong fr a

376
00:21:13,580 --> 00:21:19,820
has to then add a Pio and that Pio can

377
00:21:17,960 --> 00:21:21,470
have zero flag set which means it'll it

378
00:21:19,820 --> 00:21:22,309
won't touch any hosts in any way it

379
00:21:21,470 --> 00:21:28,309
won't affect anything

380
00:21:22,309 --> 00:21:32,799
yep I'm too confused to say what I was

381
00:21:28,309 --> 00:21:34,940
gonna say all right so I don't ask

382
00:21:32,799 --> 00:21:36,379
people who have comments and thoughts if

383
00:21:34,940 --> 00:21:39,830
you could just kind of add those

384
00:21:36,380 --> 00:21:41,179
comments to the PR here so we can make

385
00:21:39,830 --> 00:21:42,470
sure we incorporate those and we can go

386
00:21:41,179 --> 00:21:44,570
back and forth on text that would be

387
00:21:42,470 --> 00:21:47,210
great thank you for this input I think

388
00:21:44,570 --> 00:21:52,240
this is going to be the most nuanced

389
00:21:47,210 --> 00:21:52,240
parts to get right do you have some gory

390
00:21:54,519 --> 00:22:04,600
yeah okay all right so other changes I

391
00:22:02,299 --> 00:22:07,840
think they should be less controversial

392
00:22:04,600 --> 00:22:11,209
in the additional information

393
00:22:07,840 --> 00:22:12,740
Ted pointed out quite rightly that the

394
00:22:11,210 --> 00:22:14,889
fact that we had a name and localized

395
00:22:12,740 --> 00:22:19,370
name and error while those were cute

396
00:22:14,889 --> 00:22:21,289
they are concerning not really clear how

397
00:22:19,370 --> 00:22:23,959
use them potential security

398
00:22:21,289 --> 00:22:27,769
vulnerabilities or attack surfaces for

399
00:22:23,960 --> 00:22:31,340
spoofing so I have removed those and we

400
00:22:27,769 --> 00:22:32,929
are now just including the fqdn

401
00:22:31,340 --> 00:22:35,299
identifiers which is the identifier of

402
00:22:32,929 --> 00:22:37,159
the PPD within the JSON it allows you to

403
00:22:35,299 --> 00:22:39,350
validate that this is indeed the correct

404
00:22:37,159 --> 00:22:40,820
configuration and it essentially gives

405
00:22:39,350 --> 00:22:43,250
you a convenient way when you receive

406
00:22:40,820 --> 00:22:45,260
this PD information to say oh yeah and

407
00:22:43,250 --> 00:22:46,820
here is the identifier for the rest of

408
00:22:45,260 --> 00:22:49,419
this stuff so that's easy for an

409
00:22:46,820 --> 00:22:52,178
application or the system to consume

410
00:22:49,419 --> 00:22:55,370
just this makes sense to people

411
00:22:52,179 --> 00:23:00,340
you have nods does anyone have a problem

412
00:22:55,370 --> 00:23:02,199
with this great okay moving on

413
00:23:00,340 --> 00:23:04,240
we also expanded some of the security

414
00:23:02,200 --> 00:23:06,309
considerations there are points that

415
00:23:04,240 --> 00:23:09,360
we're just missing references and

416
00:23:06,309 --> 00:23:09,360
missing some explanation

417
00:23:09,720 --> 00:23:15,690
so there's validation that we have when

418
00:23:13,690 --> 00:23:18,039
we look at the additional information to

419
00:23:15,690 --> 00:23:19,950
validate that the prefixes match the

420
00:23:18,039 --> 00:23:21,759
prefixes that you or have been given

421
00:23:19,950 --> 00:23:24,460
kind of explained that a little bit

422
00:23:21,759 --> 00:23:28,509
better there's also some test texts

423
00:23:24,460 --> 00:23:31,600
about how a device could try to

424
00:23:28,509 --> 00:23:35,129
intercept things and run a net 66 to

425
00:23:31,600 --> 00:23:38,408
make it look like it is providing the

426
00:23:35,129 --> 00:23:40,539
prefixes that are detailed in the

427
00:23:38,409 --> 00:23:41,769
additional information and so allow a

428
00:23:40,539 --> 00:23:43,658
client to think that they're talking

429
00:23:41,769 --> 00:23:47,220
through the real router but they're

430
00:23:43,659 --> 00:23:50,110
actually have an intercept in the middle

431
00:23:47,220 --> 00:23:52,090
this was explained in the mitigation was

432
00:23:50,110 --> 00:23:56,559
explained but it was not super clear so

433
00:23:52,090 --> 00:23:59,649
we reworked that text the safety here is

434
00:23:56,559 --> 00:24:01,750
that the server that's actually running

435
00:23:59,649 --> 00:24:03,428
the initial information can validate

436
00:24:01,750 --> 00:24:06,190
that the client IP address that it's

437
00:24:03,429 --> 00:24:07,750
getting is within the current within the

438
00:24:06,190 --> 00:24:10,149
range that it gave out and so can

439
00:24:07,750 --> 00:24:14,230
validate that there is not some

440
00:24:10,149 --> 00:24:15,899
intermediate net6 fix there and there's

441
00:24:14,230 --> 00:24:18,639
also just some text we got at the end to

442
00:24:15,899 --> 00:24:21,668
really make explicit that what we're

443
00:24:18,639 --> 00:24:24,129
giving you is not a this is a safe

444
00:24:21,669 --> 00:24:27,299
trusted Network guarantee this is really

445
00:24:24,129 --> 00:24:31,240
just about detecting if this is a

446
00:24:27,299 --> 00:24:32,799
intended non misconfigured set of

447
00:24:31,240 --> 00:24:34,120
information to have two different

448
00:24:32,799 --> 00:24:35,740
networks coexisting at the same time it

449
00:24:34,120 --> 00:24:37,779
does not really add any more trust than

450
00:24:35,740 --> 00:24:39,929
you would have on your Wi-Fi network

451
00:24:37,779 --> 00:24:43,450
today

452
00:24:39,929 --> 00:24:45,340
so those are the main content changes I

453
00:24:43,450 --> 00:24:48,789
think the main one we need to continue

454
00:24:45,340 --> 00:24:50,889
working on is dhcpv6 once we clarify

455
00:24:48,789 --> 00:24:52,840
that we would like to publish a no 6

456
00:24:50,889 --> 00:25:00,370
version and then get some more review

457
00:24:52,840 --> 00:25:02,199
and yes please other input new issues

458
00:25:00,370 --> 00:25:06,100
none of those three but it was mentioned

459
00:25:02,200 --> 00:25:10,840
on your slide 3 which was the current

460
00:25:06,100 --> 00:25:13,320
yeah spike tube sorry maybe it was right

461
00:25:10,840 --> 00:25:18,658
someplace anyway ok yeah

462
00:25:13,320 --> 00:25:20,370
we have registered the media inside the

463
00:25:18,659 --> 00:25:24,030
document right now it does not contain

464
00:25:20,370 --> 00:25:27,989
any rationale for using Jason's that

465
00:25:24,030 --> 00:25:29,340
format the additional information in the

466
00:25:27,990 --> 00:25:31,710
United key industry people would argue

467
00:25:29,340 --> 00:25:33,720
we got secret parsers in our devices but

468
00:25:31,710 --> 00:25:34,860
we don't chase on parsers can we get

469
00:25:33,720 --> 00:25:37,169
this intervention so you should either

470
00:25:34,860 --> 00:25:39,090
argue this information is something that

471
00:25:37,169 --> 00:25:41,730
constrained devices do not need that

472
00:25:39,090 --> 00:25:44,399
would be one rationale or you have to

473
00:25:41,730 --> 00:25:47,130
argue and they need it so much that they

474
00:25:44,400 --> 00:25:48,659
should add a JSON parser or you should

475
00:25:47,130 --> 00:25:50,610
say and here's how you could do it let's

476
00:25:48,659 --> 00:25:52,590
see one well if you took the letter up

477
00:25:50,610 --> 00:25:54,299
from the last of three approaches which

478
00:25:52,590 --> 00:25:55,139
I'm not necessarily arguing before I'm

479
00:25:54,299 --> 00:25:58,110
saying you got to pick one of those

480
00:25:55,140 --> 00:26:00,570
three order the last one that means you

481
00:25:58,110 --> 00:26:04,639
say well which one does the router and

482
00:26:00,570 --> 00:26:04,639
Sudan are aces in both they're worried

483
00:26:06,140 --> 00:26:11,250
yes so there was already a issue that's

484
00:26:09,570 --> 00:26:12,809
brought up and when we added some of

485
00:26:11,250 --> 00:26:19,350
this registration of hey should we do

486
00:26:12,809 --> 00:26:21,480
see more great yeah my reaction to not

487
00:26:19,350 --> 00:26:22,799
having super in there currently just to

488
00:26:21,480 --> 00:26:26,070
kind of say what I'll say in the doc is

489
00:26:22,799 --> 00:26:27,720
I definitely don't want to have both and

490
00:26:26,070 --> 00:26:29,460
yeah I just present whichever one they

491
00:26:27,720 --> 00:26:33,299
ask for like that seems unnecessarily

492
00:26:29,460 --> 00:26:37,049
complex yes exactly so we agree that we

493
00:26:33,299 --> 00:26:39,179
should adopt in three at least as far as

494
00:26:37,049 --> 00:26:42,240
I'm aware at this point I don't see

495
00:26:39,179 --> 00:26:44,730
anything that's particularly important I

496
00:26:42,240 --> 00:27:02,010
would be driving IOT devices to need

497
00:26:44,730 --> 00:27:05,010
this but yeah or you could take an

498
00:27:02,010 --> 00:27:06,658
approach that says on some networks that

499
00:27:05,010 --> 00:27:08,309
might be constrained networks they don't

500
00:27:06,659 --> 00:27:10,289
have any strain devices you might choose

501
00:27:08,309 --> 00:27:13,520
to sin see we're only instead of JSON so

502
00:27:10,289 --> 00:27:15,870
you're not doing both one of these

503
00:27:13,520 --> 00:27:17,039
low-power lanes or sometimes of this

504
00:27:15,870 --> 00:27:18,149
magic type and everything on there is

505
00:27:17,039 --> 00:27:20,280
when it's constrained devices do

506
00:27:18,150 --> 00:27:22,440
something so right now I'm just pointing

507
00:27:20,280 --> 00:27:24,120
out that the document itself contains

508
00:27:22,440 --> 00:27:25,830
this interaction hell even if it's stick

509
00:27:24,120 --> 00:27:31,168
to the current approach okay thank you

510
00:27:25,830 --> 00:27:39,269
make sense oh who didn't get I'm here to

511
00:27:31,169 --> 00:27:41,070
talk about one thing that I did not get

512
00:27:39,269 --> 00:27:44,149
from the draft very well is the

513
00:27:41,070 --> 00:27:46,649
coexistence of things that are not

514
00:27:44,149 --> 00:27:49,258
addresses being assigned mm-hmm that

515
00:27:46,649 --> 00:27:53,070
still might affect other systems wearing

516
00:27:49,259 --> 00:27:53,730
that's such as you know who are your

517
00:27:53,070 --> 00:27:57,928
results

518
00:27:53,730 --> 00:28:00,629
yes so as I understand it please I very

519
00:27:57,929 --> 00:28:02,340
thrilled to be wrong about if you have

520
00:28:00,629 --> 00:28:06,689
multiple pvd's it seems like you might

521
00:28:02,340 --> 00:28:10,740
have multiple resolvers some from dis or

522
00:28:06,690 --> 00:28:14,340
P DS yes and some of them may in fact be

523
00:28:10,740 --> 00:28:17,519
four have difference with DNS views yes

524
00:28:14,340 --> 00:28:20,668
and there's no information coming down

525
00:28:17,519 --> 00:28:22,980
that says in this case use this PVD

526
00:28:20,669 --> 00:28:25,049
because an application calling the

527
00:28:22,980 --> 00:28:26,519
operating system they have no idea

528
00:28:25,049 --> 00:28:29,850
what's gonna go ahead am I correct so

529
00:28:26,519 --> 00:28:33,289
far can you clarify the last part about

530
00:28:29,850 --> 00:28:33,289
the application we'll have no idea

531
00:28:40,970 --> 00:28:49,289
possibly to concatenated lists of racers

532
00:28:45,659 --> 00:28:51,029
I think this is not yeah it's discussed

533
00:28:49,289 --> 00:28:52,710
a bit in the draft but I think it's

534
00:28:51,029 --> 00:28:55,799
really relying a little bit more on the

535
00:28:52,710 --> 00:28:57,720
main npvd architecture I think very

536
00:28:55,799 --> 00:29:01,259
specifically you should not be

537
00:28:57,720 --> 00:29:03,529
concatenated arbitrarily right so at

538
00:29:01,259 --> 00:29:05,970
least you know for our system what

539
00:29:03,529 --> 00:29:07,980
imagine each PVD becoming like an

540
00:29:05,970 --> 00:29:10,950
interface like a separate interface

541
00:29:07,980 --> 00:29:12,960
right and so the interface has a

542
00:29:10,950 --> 00:29:16,379
resolver when you do again at our info

543
00:29:12,960 --> 00:29:18,419
at least for us if you are not

544
00:29:16,379 --> 00:29:20,969
specifying a specific interface that you

545
00:29:18,419 --> 00:29:22,559
are scoping information to you get the

546
00:29:20,970 --> 00:29:23,460
resolver for the default interface and

547
00:29:22,559 --> 00:29:26,039
that's the only one you're going to be

548
00:29:23,460 --> 00:29:28,769
using then that if you explicitly select

549
00:29:26,039 --> 00:29:32,220
into another PVD you use its resolver

550
00:29:28,769 --> 00:29:35,360
and its local address the application

551
00:29:32,220 --> 00:29:35,360
the application must

552
00:29:36,120 --> 00:29:42,510
gather info alone is not PVD aware it

553
00:29:40,230 --> 00:29:45,690
doesn't also let you access the cellular

554
00:29:42,510 --> 00:29:47,700
link if you are on Wi-Fi network so it

555
00:29:45,690 --> 00:29:49,500
is it does not do this

556
00:29:47,700 --> 00:29:52,200
there are API is both on Android iOS

557
00:29:49,500 --> 00:29:54,090
other platforms that do let you specify

558
00:29:52,200 --> 00:29:59,460
the PVD that you want to be resolving

559
00:29:54,090 --> 00:30:02,760
into and that's what this relies on you

560
00:29:59,460 --> 00:30:04,470
are relying on yes applications we're

561
00:30:02,760 --> 00:30:11,270
using these services like the NTP

562
00:30:04,470 --> 00:30:14,430
service or this being aware absolutely I

563
00:30:11,270 --> 00:30:16,320
okay so i'll there is a section on kind

564
00:30:14,430 --> 00:30:18,720
of the dns client handling will just

565
00:30:16,320 --> 00:30:20,790
make sure to indicate i think what you

566
00:30:18,720 --> 00:30:47,040
want is the applications interaction to

567
00:30:20,790 --> 00:30:48,899
this that's great thank you I'm just

568
00:30:47,040 --> 00:30:50,700
gonna respond one of the things that was

569
00:30:48,900 --> 00:30:58,890
in the process when mid-foot shut down

570
00:30:50,700 --> 00:31:00,900
was an API document so going faster I

571
00:30:58,890 --> 00:31:03,000
was going to say it'd be really good to

572
00:31:00,900 --> 00:31:05,100
call the DNS thing and you've done that

573
00:31:03,000 --> 00:31:09,630
I mean the thing is you your lack of

574
00:31:05,100 --> 00:31:12,000
timers and then you have get a delay and

575
00:31:09,630 --> 00:31:14,730
you must send a particular time

576
00:31:12,000 --> 00:31:17,460
yeah do you actually mean you must send

577
00:31:14,730 --> 00:31:23,310
up the time with like some resolution or

578
00:31:17,460 --> 00:31:26,220
do you mean it must be late yeah yeah no

579
00:31:23,310 --> 00:31:29,550
be good to clarify because it may not be

580
00:31:26,220 --> 00:31:37,110
possible with the reality of the

581
00:31:29,550 --> 00:31:38,310
universe yeah okay if we have that in

582
00:31:37,110 --> 00:31:41,070
the notes I'll make sure to clarify that

583
00:31:38,310 --> 00:31:43,129
thank you great

584
00:31:41,070 --> 00:31:47,929
it's just nothing else I think we will

585
00:31:43,130 --> 00:31:47,930
go on with our work of revising

586
00:31:48,430 --> 00:31:55,750
so for the security companies they were

587
00:31:52,660 --> 00:31:59,860
all abreast from the the sector review

588
00:31:55,750 --> 00:32:05,170
um we believe so there was some of it

589
00:31:59,860 --> 00:32:07,929
that wasn't entirely clear to us on

590
00:32:05,170 --> 00:32:39,010
exactly what they want to change but yes

591
00:32:07,930 --> 00:32:42,010
we believe that is addressed okay Ron

592
00:32:39,010 --> 00:32:44,110
Bonica and I'm from Juniper Networks for

593
00:32:42,010 --> 00:32:48,570
about oh four years now there's been

594
00:32:44,110 --> 00:32:50,889
work going on in the IETF to establish

595
00:32:48,570 --> 00:32:54,399
segments routed traffic engineered

596
00:32:50,890 --> 00:32:57,160
programmable tunnels and there are two

597
00:32:54,400 --> 00:32:59,770
flavors of them an MPLS flavored and an

598
00:32:57,160 --> 00:33:03,790
ipv6 flavored depending on what porting

599
00:32:59,770 --> 00:33:06,730
plane you use this is a proposal for

600
00:33:03,790 --> 00:33:13,420
another kind of ipv6 flavored this is

601
00:33:06,730 --> 00:33:15,790
the 101 level expose on SR v6 plus it's

602
00:33:13,420 --> 00:33:17,860
intended so you can come into the spring

603
00:33:15,790 --> 00:33:19,300
working group tomorrow and understand

604
00:33:17,860 --> 00:33:20,080
what everybody's talking about because

605
00:33:19,300 --> 00:33:23,889
there'll be a very abbreviated

606
00:33:20,080 --> 00:33:34,560
presentation there so what problem we

607
00:33:23,890 --> 00:33:34,560
solving sorry

608
00:33:34,590 --> 00:33:43,300
whoops ignore that it didn't mean to put

609
00:33:38,770 --> 00:33:45,790
that there we want to implement a

610
00:33:43,300 --> 00:33:48,100
segment routing architecture we in one

611
00:33:45,790 --> 00:33:50,649
when code path state in a packet as

612
00:33:48,100 --> 00:33:52,990
opposed to encoding path state or it's

613
00:33:50,650 --> 00:33:55,900
storing path state in a transit router

614
00:33:52,990 --> 00:33:57,940
the way RSVP does we want to implement

615
00:33:55,900 --> 00:33:59,700
programmable paths and we'll talk about

616
00:33:57,940 --> 00:34:03,110
what a programmable path is late

617
00:33:59,700 --> 00:34:06,260
and we want to rely exclusively on ipv6

618
00:34:03,110 --> 00:34:09,569
Philby know MPLS anywheres in sight and

619
00:34:06,260 --> 00:34:10,918
we want to leverage existing ipv6

620
00:34:09,570 --> 00:34:14,400
features to the greatest degree possible

621
00:34:10,918 --> 00:34:16,199
and we want to minimize overhead a

622
00:34:14,400 --> 00:34:19,290
couple of reasons we want to minimize

623
00:34:16,199 --> 00:34:21,678
overhead first sill path encoding

624
00:34:19,290 --> 00:34:26,100
doesn't take many many bytes on the line

625
00:34:21,679 --> 00:34:27,950
second so it's this Asics friendly so to

626
00:34:26,100 --> 00:34:31,889
play the game we need some terminology

627
00:34:27,949 --> 00:34:34,139
the first is what's a path it provides a

628
00:34:31,889 --> 00:34:36,509
unidirectional connectivity from an

629
00:34:34,139 --> 00:34:37,770
ingress node to an egress node it can

630
00:34:36,510 --> 00:34:41,070
follow any path through the network

631
00:34:37,770 --> 00:34:43,620
least cost or a traffic engineered path

632
00:34:41,070 --> 00:34:45,810
it contains one or more segments and

633
00:34:43,620 --> 00:34:47,759
we'll define segments later it's

634
00:34:45,810 --> 00:34:51,449
programmable and we'll define what we

635
00:34:47,760 --> 00:34:53,400
mean by programmable later and a path is

636
00:34:51,449 --> 00:34:55,290
defined by the segments that it contains

637
00:34:53,400 --> 00:34:57,600
just like a line is defined by two

638
00:34:55,290 --> 00:35:01,350
points a path is defined by the segments

639
00:34:57,600 --> 00:35:03,210
it contains now what's a segment well a

640
00:35:01,350 --> 00:35:05,520
segment provides unidirectional

641
00:35:03,210 --> 00:35:07,710
connectivity from its ingress to egress

642
00:35:05,520 --> 00:35:09,960
so we have paths that provide

643
00:35:07,710 --> 00:35:11,910
unidirectional connectivity in segments

644
00:35:09,960 --> 00:35:15,540
inside them we'll see a picture of that

645
00:35:11,910 --> 00:35:17,670
in a minute it's programmable and we'll

646
00:35:15,540 --> 00:35:20,730
describe that a little more in a slide

647
00:35:17,670 --> 00:35:23,420
that's coming up its behavior is

648
00:35:20,730 --> 00:35:26,190
controlled by a topological instruction

649
00:35:23,420 --> 00:35:29,580
it's executed on the segment ingress

650
00:35:26,190 --> 00:35:32,340
node it defines the segments egress node

651
00:35:29,580 --> 00:35:35,910
and it defines the method by which the

652
00:35:32,340 --> 00:35:38,850
ingress node forwards packets to the

653
00:35:35,910 --> 00:35:40,920
egress node a segment is defined by its

654
00:35:38,850 --> 00:35:43,500
ingress node and the topological

655
00:35:40,920 --> 00:35:45,300
instruction that controls it and a

656
00:35:43,500 --> 00:35:49,800
segment can be controlled by multiple

657
00:35:45,300 --> 00:35:53,250
paths and there are exactly two types of

658
00:35:49,800 --> 00:35:56,180
segments strictly routed ones they're

659
00:35:53,250 --> 00:35:59,100
similar to adjacency segments in SR MPLS

660
00:35:56,180 --> 00:36:01,339
they the topological instruction that

661
00:35:59,100 --> 00:36:04,620
controls a strictly routed segment

662
00:36:01,340 --> 00:36:06,420
Ford's a packet over a specified link to

663
00:36:04,620 --> 00:36:09,390
the egress and then they were loosely

664
00:36:06,420 --> 00:36:11,340
route in one's the topological instruct

665
00:36:09,390 --> 00:36:12,890
instruction that controls a loosely

666
00:36:11,340 --> 00:36:14,900
routed segment

667
00:36:12,890 --> 00:36:19,269
Ford's the path a packet through the

668
00:36:14,900 --> 00:36:21,799
least-cost path to the egress node now

669
00:36:19,269 --> 00:36:25,160
next thing we have is the concept of a

670
00:36:21,799 --> 00:36:27,529
segment identifier a segment identifier

671
00:36:25,160 --> 00:36:31,339
identifies a segment it identifies that

672
00:36:27,529 --> 00:36:33,489
sex section of the topology because

673
00:36:31,339 --> 00:36:36,170
there's a one-to-one relationship

674
00:36:33,489 --> 00:36:39,859
between a segment and the topological

675
00:36:36,170 --> 00:36:42,200
instruction that controls it a segment

676
00:36:39,859 --> 00:36:44,089
identifier also identifies the

677
00:36:42,200 --> 00:36:48,259
topological instruction that controls

678
00:36:44,089 --> 00:36:51,078
the segment now a segment identifier

679
00:36:48,259 --> 00:36:54,220
identifies an instruction it does not

680
00:36:51,079 --> 00:36:56,480
contain the instruction therefore an

681
00:36:54,220 --> 00:37:00,910
instruction might take many many many

682
00:36:56,480 --> 00:37:05,299
bits to ins code a CID in SRV six-plus

683
00:37:00,910 --> 00:37:08,690
needs to be only 16 or 32 bits long SIDS

684
00:37:05,299 --> 00:37:11,989
are short they also have node local

685
00:37:08,690 --> 00:37:17,599
significance they're only processed by

686
00:37:11,989 --> 00:37:21,170
the ingress node so some things too to

687
00:37:17,599 --> 00:37:23,499
zero went on a Sid identifies a segment

688
00:37:21,170 --> 00:37:26,749
it identifies the topological

689
00:37:23,499 --> 00:37:29,660
instruction that controls a segment and

690
00:37:26,749 --> 00:37:32,209
it identifies the instruction it does

691
00:37:29,660 --> 00:37:37,759
not contain the instruction therefore it

692
00:37:32,210 --> 00:37:40,549
can be short now these are not the only

693
00:37:37,759 --> 00:37:44,329
instructions we said that segments are

694
00:37:40,549 --> 00:37:46,460
programmable paths are programmable yes

695
00:37:44,329 --> 00:37:48,230
they have topological instructions used

696
00:37:46,460 --> 00:37:51,049
to steer from here to there their

697
00:37:48,230 --> 00:37:54,289
routing things there were also service

698
00:37:51,049 --> 00:37:58,038
instructions they augment a path but

699
00:37:54,289 --> 00:37:59,960
don't define the path a path can exist

700
00:37:58,039 --> 00:38:01,670
with one set of service instructions or

701
00:37:59,960 --> 00:38:03,920
a different set of service instructions

702
00:38:01,670 --> 00:38:07,009
and we have two kinds of service

703
00:38:03,920 --> 00:38:09,589
instructions one is per segment service

704
00:38:07,009 --> 00:38:13,279
instructions they're executed on the

705
00:38:09,589 --> 00:38:15,589
segment egress node an example expose a

706
00:38:13,279 --> 00:38:19,099
packet to a specific firewall policy

707
00:38:15,589 --> 00:38:21,288
expose a packet to a specific sampling

708
00:38:19,099 --> 00:38:22,999
policy you can see how these kinds of

709
00:38:21,289 --> 00:38:25,069
instructions might get used in service

710
00:38:22,999 --> 00:38:27,649
function chaining

711
00:38:25,069 --> 00:38:29,929
then and these can be executed at the

712
00:38:27,650 --> 00:38:32,569
egress of any segment the first second

713
00:38:29,929 --> 00:38:35,239
third or last then we have per path

714
00:38:32,569 --> 00:38:37,910
service instructions they can only be

715
00:38:35,239 --> 00:38:41,179
executed at the path egress node at the

716
00:38:37,910 --> 00:38:45,038
egress of the final segment they always

717
00:38:41,179 --> 00:38:47,150
talk about D encapsulating a packet and

718
00:38:45,039 --> 00:38:49,609
multiplexing the payload or D

719
00:38:47,150 --> 00:38:52,009
multiplexing the payload for instance a

720
00:38:49,609 --> 00:38:54,589
service instruction might be D

721
00:38:52,009 --> 00:38:56,839
encapsulate the packet and forwarded it

722
00:38:54,589 --> 00:39:00,709
across this specified link into this VP

723
00:38:56,839 --> 00:39:03,140
M or D encapsulate the packet lookup the

724
00:39:00,709 --> 00:39:05,928
payload destination and this VPN routing

725
00:39:03,140 --> 00:39:10,609
table and forward it to the next stop

726
00:39:05,929 --> 00:39:13,819
that you find ok the things we said

727
00:39:10,609 --> 00:39:19,219
about segments this kind of is a picture

728
00:39:13,819 --> 00:39:23,630
to define it here we have a path the

729
00:39:19,219 --> 00:39:32,209
path contains three segments ACC D D D F

730
00:39:23,630 --> 00:39:35,539
a C and D or ingress nodes C D and F our

731
00:39:32,209 --> 00:39:40,788
egress nodes the topological instruction

732
00:39:35,539 --> 00:39:43,640
for AC is executed on a the service

733
00:39:40,789 --> 00:39:48,319
instruction if there is one for segment

734
00:39:43,640 --> 00:39:49,999
a is executed on C and the service

735
00:39:48,319 --> 00:39:54,739
instruction for the path if there is one

736
00:39:49,999 --> 00:39:56,479
is executed on F now all this has been

737
00:39:54,739 --> 00:40:01,880
nicely theoretical what does this have

738
00:39:56,479 --> 00:40:07,788
to do with ipv6 well paths are encoded

739
00:40:01,880 --> 00:40:09,859
in ipv6 header chains most everybody in

740
00:40:07,789 --> 00:40:12,049
this group knows what an ipv6 header

741
00:40:09,859 --> 00:40:16,669
chain is there's a base ipv6 header

742
00:40:12,049 --> 00:40:21,650
there extension headers sr v6 relies on

743
00:40:16,669 --> 00:40:23,390
three of them in particular but before

744
00:40:21,650 --> 00:40:26,319
we dive into that let's talk a little

745
00:40:23,390 --> 00:40:29,390
bit about how headers headers are

746
00:40:26,319 --> 00:40:34,429
encoded there's a recommended ordering

747
00:40:29,390 --> 00:40:36,890
hop-by-hop that are processed by every

748
00:40:34,429 --> 00:40:38,630
node destinations that precede routing

749
00:40:36,890 --> 00:40:40,759
they are

750
00:40:38,630 --> 00:40:43,039
processed by every segment end point

751
00:40:40,759 --> 00:40:45,650
there's a routing header also processed

752
00:40:43,039 --> 00:40:49,880
by every segment end point and a

753
00:40:45,650 --> 00:40:52,940
destination fragment authentication ESP

754
00:40:49,880 --> 00:40:54,559
and then a destination that is processed

755
00:40:52,940 --> 00:40:57,829
by the ultimate destination of the

756
00:40:54,559 --> 00:41:01,269
packet now you can see from this

757
00:40:57,829 --> 00:41:11,229
ordering a very natural way to encode

758
00:41:01,269 --> 00:41:15,200
instructions let's talk first about

759
00:41:11,229 --> 00:41:17,509
topological instructions a very natural

760
00:41:15,200 --> 00:41:25,009
way to encode a topological instruction

761
00:41:17,509 --> 00:41:28,460
is in a routing header every well let's

762
00:41:25,009 --> 00:41:30,880
say we can probably know we have to go

763
00:41:28,460 --> 00:41:30,880
through the whole thing

764
00:41:32,920 --> 00:41:38,799
the routing header has a segment list

765
00:41:36,200 --> 00:41:41,299
and a number of segments left if

766
00:41:38,799 --> 00:41:41,749
segments left is equal to 0 you skip

767
00:41:41,299 --> 00:41:44,749
over it

768
00:41:41,749 --> 00:41:47,180
if segments left is greater than 0 you

769
00:41:44,749 --> 00:41:49,999
decrement segments left over right the

770
00:41:47,180 --> 00:41:52,190
destination address and forward to the

771
00:41:49,999 --> 00:41:53,660
destination address so you can see how

772
00:41:52,190 --> 00:41:58,880
that's a natural place to put

773
00:41:53,660 --> 00:42:00,680
topological instructions now routing

774
00:41:58,880 --> 00:42:04,880
headers aren't used very widely in the

775
00:42:00,680 --> 00:42:08,690
internet and they're the one of the

776
00:42:04,880 --> 00:42:11,599
reasons is the size most routing headers

777
00:42:08,690 --> 00:42:15,170
that are defined today define every

778
00:42:11,599 --> 00:42:18,410
segment as an ipv6 address and they have

779
00:42:15,170 --> 00:42:20,420
8 bytes of overhead so let's say for a

780
00:42:18,410 --> 00:42:24,368
moment that you have a path with five

781
00:42:20,420 --> 00:42:28,099
segments five times sixteen bytes is

782
00:42:24,369 --> 00:42:30,170
8088 bytes long and all of a sudden you

783
00:42:28,099 --> 00:42:32,089
have 88 bytes of overhead in a world

784
00:42:30,170 --> 00:42:38,329
where the average packet might be 700

785
00:42:32,089 --> 00:42:40,190
bytes long it's not gonna work well so

786
00:42:38,329 --> 00:42:43,400
we've come up with something called the

787
00:42:40,190 --> 00:42:46,099
compressed routing header the compressed

788
00:42:43,400 --> 00:42:48,890
routing header just like any other

789
00:42:46,099 --> 00:42:51,320
routing header has a list of SIDS and a

790
00:42:48,890 --> 00:42:55,850
segments left in it each SID

791
00:42:51,320 --> 00:42:59,330
is either 16 or 32 bits long um you have

792
00:42:55,850 --> 00:43:02,740
something called an S fib it translates

793
00:42:59,330 --> 00:43:08,029
it's a data structure it translates

794
00:43:02,740 --> 00:43:10,310
acid' to an ipv6 address and the install

795
00:43:08,030 --> 00:43:12,620
instructions that it represents

796
00:43:10,310 --> 00:43:15,110
so as you're processing the routing

797
00:43:12,620 --> 00:43:17,750
header you look at segments left

798
00:43:15,110 --> 00:43:21,230
decrement it look at the CID lookup that

799
00:43:17,750 --> 00:43:23,810
said in in the S feb you now find the

800
00:43:21,230 --> 00:43:26,330
ipv6 address that it represents copy it

801
00:43:23,810 --> 00:43:29,180
to the destination and forward according

802
00:43:26,330 --> 00:43:31,040
to the instruction and that way you can

803
00:43:29,180 --> 00:43:34,040
get away with a really small routing

804
00:43:31,040 --> 00:43:36,470
header and here's what the routing

805
00:43:34,040 --> 00:43:38,900
header looks like when you have 16-bit

806
00:43:36,470 --> 00:43:46,399
encoding and when you have 32-bit

807
00:43:38,900 --> 00:43:48,440
encoding now let's talk about encoding

808
00:43:46,400 --> 00:43:50,270
service instructions service

809
00:43:48,440 --> 00:43:53,510
instructions we encode in a destination

810
00:43:50,270 --> 00:43:56,840
option setter and if it's a per segment

811
00:43:53,510 --> 00:43:59,150
service instruction what we do is encode

812
00:43:56,840 --> 00:44:01,580
it in the destination option header that

813
00:43:59,150 --> 00:44:03,890
comes before the routing header that's

814
00:44:01,580 --> 00:44:05,990
processed at every segment end point and

815
00:44:03,890 --> 00:44:10,129
what we actually put in there is a

816
00:44:05,990 --> 00:44:13,970
32-bit identifier that's an identifier

817
00:44:10,130 --> 00:44:16,490
for the path every note every segment

818
00:44:13,970 --> 00:44:19,549
end point that is part of that path that

819
00:44:16,490 --> 00:44:22,189
has a service in that path knows that

820
00:44:19,550 --> 00:44:24,650
32-bit identifier when it sees it it

821
00:44:22,190 --> 00:44:28,010
executes the service that it associates

822
00:44:24,650 --> 00:44:31,340
with that 32-bit identifier we also have

823
00:44:28,010 --> 00:44:34,310
a per path service instruction the per

824
00:44:31,340 --> 00:44:36,950
path service instruction is also a

825
00:44:34,310 --> 00:44:38,450
destination option header it's the

826
00:44:36,950 --> 00:44:40,339
destination option header that comes

827
00:44:38,450 --> 00:44:43,279
just before the upper layer header at

828
00:44:40,340 --> 00:44:46,450
the end of the chain again it's a 32-bit

829
00:44:43,280 --> 00:44:49,370
entity and it's a 32-bit instruction

830
00:44:46,450 --> 00:44:52,720
that tells the node what to do d

831
00:44:49,370 --> 00:44:58,549
encapsulate the packet and forward so

832
00:44:52,720 --> 00:45:03,350
what are the what are the salient pieces

833
00:44:58,550 --> 00:45:04,790
of SR v6 first that it is very specific

834
00:45:03,350 --> 00:45:06,470
about saying what

835
00:45:04,790 --> 00:45:09,050
pappa logical instruction what's a

836
00:45:06,470 --> 00:45:11,569
service instruction second

837
00:45:09,050 --> 00:45:14,480
it puts topological instructions in a

838
00:45:11,570 --> 00:45:17,300
routing header topological instructions

839
00:45:14,480 --> 00:45:19,220
have to do with routing seems like a

840
00:45:17,300 --> 00:45:23,660
routing header is a good place to put

841
00:45:19,220 --> 00:45:25,759
them service instructions well some of

842
00:45:23,660 --> 00:45:28,549
them are processed at every segment end

843
00:45:25,760 --> 00:45:31,400
point and we have destination options

844
00:45:28,550 --> 00:45:33,110
that precede the routing header that are

845
00:45:31,400 --> 00:45:35,390
processed exactly there that's the right

846
00:45:33,110 --> 00:45:37,940
place to put them we have service

847
00:45:35,390 --> 00:45:40,520
instructions that are processed only at

848
00:45:37,940 --> 00:45:42,920
the end of the path at the destination

849
00:45:40,520 --> 00:45:44,680
well gee that's why we call them

850
00:45:42,920 --> 00:45:47,390
destination options so we put them there

851
00:45:44,680 --> 00:45:50,779
the other salient piece is we'd never

852
00:45:47,390 --> 00:45:53,150
try to encode an instruction in the

853
00:45:50,780 --> 00:45:55,160
segment identifier the segment

854
00:45:53,150 --> 00:45:57,500
identifier identifies the segment it

855
00:45:55,160 --> 00:46:00,200
identifies the instruction it does not

856
00:45:57,500 --> 00:46:02,500
contain the instruction because of that

857
00:46:00,200 --> 00:46:04,730
the segment identifier is short and

858
00:46:02,500 --> 00:46:07,340
because of that you can get away with a

859
00:46:04,730 --> 00:46:09,290
very short routing extension header when

860
00:46:07,340 --> 00:46:14,870
you have a short extension header chain

861
00:46:09,290 --> 00:46:19,100
it's a sick friendly and you don't have

862
00:46:14,870 --> 00:46:21,109
to do ugly things to keep your extension

863
00:46:19,100 --> 00:46:24,259
header chain short the other nice thing

864
00:46:21,110 --> 00:46:27,440
about SR v6 is it doesn't change the

865
00:46:24,260 --> 00:46:29,330
semantics of the ipv6 address you'll see

866
00:46:27,440 --> 00:46:32,810
the only thing we ever put in the ipv6

867
00:46:29,330 --> 00:46:36,200
address field is an ipv6 address that

868
00:46:32,810 --> 00:46:38,540
identifies an interface the ipv6 address

869
00:46:36,200 --> 00:46:40,790
never contains an instruction that never

870
00:46:38,540 --> 00:46:43,250
contains anything else yes it might it

871
00:46:40,790 --> 00:46:44,509
might identify a loopback interface but

872
00:46:43,250 --> 00:46:46,220
that's the biggest stretch we make

873
00:46:44,510 --> 00:46:49,420
identifying a loopback interface as

874
00:46:46,220 --> 00:46:53,359
opposed to a physical interface or a a

875
00:46:49,420 --> 00:46:55,820
sub interface the drafts would like you

876
00:46:53,360 --> 00:46:58,040
to read probably won't get time to read

877
00:46:55,820 --> 00:47:01,780
them all the first ones the important

878
00:46:58,040 --> 00:47:04,070
one craft Bonica six-man comp I'm sorry

879
00:47:01,780 --> 00:47:06,170
the first ones not the important one

880
00:47:04,070 --> 00:47:11,090
those are the other drafts the draft

881
00:47:06,170 --> 00:47:14,810
would like you to read is that one craft

882
00:47:11,090 --> 00:47:17,360
Bonica spring SR v6 + it'll be presented

883
00:47:14,810 --> 00:47:22,450
in spring tomorrow and

884
00:47:17,360 --> 00:47:22,450
and in six-man the day after questions

885
00:47:36,220 --> 00:47:40,730
it's not clear yet whether they'll

886
00:47:38,450 --> 00:47:42,470
coexist whether they'll merge whether

887
00:47:40,730 --> 00:48:06,350
it's evolution all to be worked out

888
00:47:42,470 --> 00:48:08,230
tomorrow for my is there a acid'

889
00:48:06,350 --> 00:48:12,430
distribution protocol

890
00:48:08,230 --> 00:48:21,110
yes it's Isis and in fact well actually

891
00:48:12,430 --> 00:48:23,960
there are two of them if you are its

892
00:48:21,110 --> 00:48:29,300
Isis the OSPF one hasn't been written

893
00:48:23,960 --> 00:48:32,510
yet those are the only two for SIDS Isis

894
00:48:29,300 --> 00:48:35,690
and OSPF as for distributing service

895
00:48:32,510 --> 00:48:37,790
instructions per path well we have a

896
00:48:35,690 --> 00:48:39,800
mechanism for doing that when the

897
00:48:37,790 --> 00:48:43,240
service instruction is encoded in MPLS

898
00:48:39,800 --> 00:48:46,730
that's BGP so we're going to reuse BGP

899
00:48:43,240 --> 00:48:49,370
in fact it's one additional flag in BGP

900
00:48:46,730 --> 00:48:54,130
that says don't encode this in an MPLS

901
00:48:49,370 --> 00:48:54,130
label encoded in a destination option I

902
00:48:55,120 --> 00:49:03,859
believe it's an IDR and it is let's see

903
00:49:00,470 --> 00:49:08,770
which one is that it is drafts on Glee

904
00:49:03,860 --> 00:49:08,770
IDR VPN service sr v6 +

905
00:49:49,230 --> 00:49:57,210
so Vlad are you able to join the queue

906
00:50:01,680 --> 00:50:11,020
well hey I'm going to give you a quick

907
00:50:05,440 --> 00:50:12,730
update on socks v6 so next time there

908
00:50:11,020 --> 00:50:17,619
are two major features that we're

909
00:50:12,730 --> 00:50:20,410
looking at fields are all now aligned

910
00:50:17,619 --> 00:50:22,390
and that the clients can have a proxy

911
00:50:20,410 --> 00:50:24,328
resolve addresses on their behalf and

912
00:50:22,390 --> 00:50:27,098
then relay the answers back to them

913
00:50:24,329 --> 00:50:29,170
there are many more needs that have been

914
00:50:27,099 --> 00:50:31,500
made it into the dress but we won't be

915
00:50:29,170 --> 00:50:40,630
getting into those too many to discuss

916
00:50:31,500 --> 00:50:42,520
so next slide so I feel and socks has

917
00:50:40,630 --> 00:50:45,190
always suffered in that regard because

918
00:50:42,520 --> 00:50:48,609
of variable field lengths possibly the

919
00:50:45,190 --> 00:50:51,369
domain names are variable in size now

920
00:50:48,609 --> 00:50:54,310
that the feature sets of feature set of

921
00:50:51,369 --> 00:50:59,050
socks is rather mature we've set out to

922
00:50:54,310 --> 00:51:01,359
refactor the protocol so the only victim

923
00:50:59,050 --> 00:51:04,990
of this refactoring was the minor

924
00:51:01,359 --> 00:51:08,170
version minor field so it's now called

925
00:51:04,990 --> 00:51:10,419
sucks v6 rather than really 6.0

926
00:51:08,170 --> 00:51:12,550
otherwise everything made it intact in

927
00:51:10,420 --> 00:51:16,359
one form or another but they've all been

928
00:51:12,550 --> 00:51:26,770
shuffled around now all the figures in

929
00:51:16,359 --> 00:51:30,910
the draft for me to recall all the

930
00:51:26,770 --> 00:51:33,150
figures in this presentation so next

931
00:51:30,910 --> 00:51:33,149
slide please

932
00:51:33,510 --> 00:51:40,839
so said the domain names were the major

933
00:51:37,869 --> 00:51:44,380
thorn in our side now we've decided to

934
00:51:40,839 --> 00:51:46,480
keep the usual format for domain but we

935
00:51:44,380 --> 00:51:47,230
titled everything to the you know it's

936
00:51:46,480 --> 00:51:49,390
multiple of four

937
00:51:47,230 --> 00:51:52,660
it's rather straightforward so here you

938
00:51:49,390 --> 00:51:55,660
see how the domain name for some site

939
00:51:52,660 --> 00:51:57,970
dot org is M is encoded we've got a

940
00:51:55,660 --> 00:52:02,180
length let's bite then the actual

941
00:51:57,970 --> 00:52:08,450
address and then three bytes of padding

942
00:52:02,180 --> 00:52:09,919
our next type is so options also have

943
00:52:08,450 --> 00:52:12,620
undergone some refactoring

944
00:52:09,920 --> 00:52:16,520
so first up option kinds are now two

945
00:52:12,620 --> 00:52:18,859
bytes in size some option kinds used to

946
00:52:16,520 --> 00:52:20,960
have types and maybe response codes but

947
00:52:18,860 --> 00:52:23,510
there weren't that many of them so we've

948
00:52:20,960 --> 00:52:25,580
decided flat to threaten those so at the

949
00:52:23,510 --> 00:52:28,910
example I am showing here in the slide

950
00:52:25,580 --> 00:52:31,660
is the option whereby a proxy tells the

951
00:52:28,910 --> 00:52:34,279
kind that an ID opponent - token was

952
00:52:31,660 --> 00:52:37,040
accepted so the kind used to be

953
00:52:34,280 --> 00:52:38,600
idempotence and then the type would you

954
00:52:37,040 --> 00:52:40,910
should be called expenditure I'd apply

955
00:52:38,600 --> 00:52:42,950
and the response code was called success

956
00:52:40,910 --> 00:52:44,770
so now in Chapter seven this was

957
00:52:42,950 --> 00:52:46,970
replaced with an empty option that

958
00:52:44,770 --> 00:52:51,440
simply has a kind of either POTUS

959
00:52:46,970 --> 00:52:52,970
accepted now taxonomy is for auction

960
00:52:51,440 --> 00:52:55,570
still make sense for stock options or

961
00:52:52,970 --> 00:52:57,919
those haven't been modified but these

962
00:52:55,570 --> 00:52:59,960
these flattened option types affect

963
00:52:57,920 --> 00:53:02,870
idempotence option in session and

964
00:52:59,960 --> 00:53:10,100
session options so uh next slide please

965
00:53:02,870 --> 00:53:12,259
so this the other major feature options

966
00:53:10,100 --> 00:53:13,640
whereby the proxy can resolve an address

967
00:53:12,260 --> 00:53:16,520
and relay the response back to the

968
00:53:13,640 --> 00:53:19,100
client this is a non-standard feature

969
00:53:16,520 --> 00:53:20,990
currently available in source so what

970
00:53:19,100 --> 00:53:24,910
we've basically done with it is that we

971
00:53:20,990 --> 00:53:28,009
legitimized it these options imitate

972
00:53:24,910 --> 00:53:30,170
that do address resolution the semantics

973
00:53:28,010 --> 00:53:33,590
of get host by name of or get other info

974
00:53:30,170 --> 00:53:35,900
not also DNS so this kind of getting it

975
00:53:33,590 --> 00:53:38,240
any kind of TTL so the basic assumption

976
00:53:35,900 --> 00:53:40,130
is that you perform at a resolution and

977
00:53:38,240 --> 00:53:45,069
that you're supposed to use the address

978
00:53:40,130 --> 00:53:47,960
in the immediate future Oh next type is

979
00:53:45,070 --> 00:53:50,380
so this the way we do this is rather

980
00:53:47,960 --> 00:53:53,150
straightforward clients simply sends a

981
00:53:50,380 --> 00:53:56,450
resolution request as part of the Sox

982
00:53:53,150 --> 00:53:59,120
request if the client doesn't want I

983
00:53:56,450 --> 00:54:01,640
want to connect immediately to it to any

984
00:53:59,120 --> 00:54:03,640
host it can do so it can send the

985
00:54:01,640 --> 00:54:06,500
resolution request over no op so its

986
00:54:03,640 --> 00:54:11,060
purpose of the proxy simply perform for

987
00:54:06,500 --> 00:54:13,700
address resolution and nothing else if

988
00:54:11,060 --> 00:54:15,500
the address in the request in the

989
00:54:13,700 --> 00:54:18,020
request was a domain name

990
00:54:15,500 --> 00:54:20,210
the proxy since since back one option

991
00:54:18,020 --> 00:54:23,120
per supported layer 3 address in this in

992
00:54:20,210 --> 00:54:25,340
this case which it most like most like

993
00:54:23,120 --> 00:54:26,990
you gonna be an ipv4 option and I hope

994
00:54:25,340 --> 00:54:31,160
you before resolution option and an ipv6

995
00:54:26,990 --> 00:54:33,319
resolution option if it cannot fit

996
00:54:31,160 --> 00:54:35,750
sports resulting for example ipv6 but it

997
00:54:33,320 --> 00:54:38,420
cannot resolve domain name to an ipv6

998
00:54:35,750 --> 00:54:42,410
address it simply sends back an empty

999
00:54:38,420 --> 00:54:46,430
option the client knows that ipv6

1000
00:54:42,410 --> 00:54:48,970
resolution is on the table now if the

1001
00:54:46,430 --> 00:54:51,529
address was a regular IP address than

1002
00:54:48,970 --> 00:54:53,209
proxy performs reverse resolution and

1003
00:54:51,530 --> 00:54:57,400
sends back a list of all the domain

1004
00:54:53,210 --> 00:55:01,490
names next slide please

1005
00:54:57,400 --> 00:55:04,640
so the first use case for this is UDP so

1006
00:55:01,490 --> 00:55:06,290
I have a placed sake header on the right

1007
00:55:04,640 --> 00:55:09,710
you can see that I've highlighted the

1008
00:55:06,290 --> 00:55:11,870
address in red so all packets all UDP

1009
00:55:09,710 --> 00:55:15,530
packets that go through the proxy have

1010
00:55:11,870 --> 00:55:17,900
to be prefixed with this header if the

1011
00:55:15,530 --> 00:55:22,160
address is a rather long domain named

1012
00:55:17,900 --> 00:55:25,100
and then we're the client is going to

1013
00:55:22,160 --> 00:55:26,870
have a lot less space to work with

1014
00:55:25,100 --> 00:55:30,020
I mean further if you're for the actual

1015
00:55:26,870 --> 00:55:32,630
payload it's roughly the equivalent of

1016
00:55:30,020 --> 00:55:35,509
lowering the MTU so it's far better to

1017
00:55:32,630 --> 00:55:38,930
send an address resolution to ask

1018
00:55:35,510 --> 00:55:46,670
forever for a just resolution over over

1019
00:55:38,930 --> 00:55:55,850
TCP of course and then the IP header is

1020
00:55:46,670 --> 00:55:58,220
going to be a lot shorter next slide so

1021
00:55:55,850 --> 00:56:02,890
the other major use case is proxy flying

1022
00:55:58,220 --> 00:56:05,509
ups by LD preload basically we implement

1023
00:56:02,890 --> 00:56:10,040
all the API calls that you want to be

1024
00:56:05,510 --> 00:56:14,600
right like connect your info or whatnot

1025
00:56:10,040 --> 00:56:20,029
and then a client that doesn't natively

1026
00:56:14,600 --> 00:56:21,950
use Sox actually ends up using Sox now

1027
00:56:20,030 --> 00:56:25,340
in the network in the current networking

1028
00:56:21,950 --> 00:56:27,830
API address resolution is done

1029
00:56:25,340 --> 00:56:29,690
separately from the connect request so

1030
00:56:27,830 --> 00:56:32,299
clients don't know how to connect to a

1031
00:56:29,690 --> 00:56:35,869
certain domain without resolving it

1032
00:56:32,300 --> 00:56:37,880
first so if we don't implement the

1033
00:56:35,869 --> 00:56:41,869
replacement for get other info or get

1034
00:56:37,880 --> 00:56:43,609
host by name the application is simply

1035
00:56:41,869 --> 00:56:46,670
going to have to perform its own DNS

1036
00:56:43,609 --> 00:56:48,920
requests now this is obviously bad if

1037
00:56:46,670 --> 00:56:53,270
privacy's are concerned or if DNS is

1038
00:56:48,920 --> 00:56:56,359
censored and also if you can lead to

1039
00:56:53,270 --> 00:57:00,040
suboptimal use of CBN's if the proxy has

1040
00:56:56,359 --> 00:57:04,069
a significantly different vantage point

1041
00:57:00,040 --> 00:57:06,770
so that's about it for me

1042
00:57:04,070 --> 00:57:21,890
I don't think stalks is you need of any

1043
00:57:06,770 --> 00:57:32,359
more major features and then Schwartz

1044
00:57:21,890 --> 00:57:34,790
google it so there's a growing number of

1045
00:57:32,359 --> 00:57:39,859
applications that need more than address

1046
00:57:34,790 --> 00:57:41,390
records out of the dns one that's top of

1047
00:57:39,859 --> 00:57:46,759
mind for a lot of people use encrypted

1048
00:57:41,390 --> 00:57:50,598
SNI and so it's true it's as it stands

1049
00:57:46,760 --> 00:57:53,660
encrypted sni is essentially not

1050
00:57:50,599 --> 00:57:54,530
compatible with common proxy protocols

1051
00:57:53,660 --> 00:57:58,368
that exist today

1052
00:57:54,530 --> 00:58:00,770
like including subs that is if you want

1053
00:57:58,369 --> 00:58:04,580
to do encrypted sni through Sox what you

1054
00:58:00,770 --> 00:58:07,970
have to do as a client is form a DNS

1055
00:58:04,580 --> 00:58:10,299
query packet yourself and deliver it as

1056
00:58:07,970 --> 00:58:15,830
a generic UDP packet through the proxy

1057
00:58:10,300 --> 00:58:18,320
with Sox why BBB to a DNS server of your

1058
00:58:15,830 --> 00:58:20,869
choice and a crucial thing from my

1059
00:58:18,320 --> 00:58:23,060
perspective is that there is no way in

1060
00:58:20,869 --> 00:58:26,089
this system for the client to direct it

1061
00:58:23,060 --> 00:58:28,099
to a DNS server of the proxies choice so

1062
00:58:26,089 --> 00:58:29,480
the the application is actually forced

1063
00:58:28,099 --> 00:58:31,369
to hard-code

1064
00:58:29,480 --> 00:58:35,300
some set of DNS servers it cannot

1065
00:58:31,369 --> 00:58:37,820
discover them through the proxy so I'd

1066
00:58:35,300 --> 00:58:46,460
like to consider that classic use cases

1067
00:58:37,820 --> 00:58:50,240
you see but let's talk about it I mean

1068
00:58:46,460 --> 00:58:54,050
if that's the major use case for Sox

1069
00:58:50,240 --> 00:59:09,618
I am definitely willing to edit in the

1070
00:58:54,050 --> 00:59:11,030
draft and imported so is like you know

1071
00:59:09,619 --> 00:59:13,190
like there should be home this work

1072
00:59:11,030 --> 00:59:14,839
right and I was thinking like transpose

1073
00:59:13,190 --> 00:59:17,690
would be like a good home for it like

1074
00:59:14,839 --> 00:59:19,730
generally for this and like I didn't

1075
00:59:17,690 --> 00:59:22,339
talk to the transfer IDs and like you

1076
00:59:19,730 --> 00:59:24,050
know Corey's right behind me I think

1077
00:59:22,339 --> 00:59:26,180
that it would be good thing that you

1078
00:59:24,050 --> 00:59:28,490
actually present to them to the transfer

1079
00:59:26,180 --> 00:59:30,348
folks at least about this work and then

1080
00:59:28,490 --> 00:59:33,169
we'll try to like figure out like well

1081
00:59:30,349 --> 00:59:35,570
it's going to say because for me it's

1082
00:59:33,170 --> 00:59:37,310
God like legs in multiple areas and I

1083
00:59:35,570 --> 00:59:39,770
really think the transport is like the

1084
00:59:37,310 --> 00:59:41,109
most relevant place to do this but we

1085
00:59:39,770 --> 00:59:46,040
can discuss that after but he's

1086
00:59:41,109 --> 00:59:49,430
presented all right expect me to present

1087
00:59:46,040 --> 00:59:54,290
it to the transport session at this ITF

1088
00:59:49,430 --> 00:59:56,868
I could whip up some slides so learn

1089
00:59:54,290 --> 00:59:59,710
very fast him thinking of the florist is

1090
00:59:56,869 --> 00:59:59,710
vwg

1091
01:00:00,220 --> 01:00:06,919
we know to this drug at least existing

1092
01:00:03,710 --> 01:00:08,480
in previous TS vwg meetings I think it

1093
01:00:06,920 --> 01:00:11,690
would be quite happy to have a couple of

1094
01:00:08,480 --> 01:00:13,190
sites and really see if people have read

1095
01:00:11,690 --> 01:00:14,990
this is encouraging you to read it

1096
01:00:13,190 --> 01:00:16,820
because before we do that we can't

1097
01:00:14,990 --> 01:00:18,410
really make a decision but I think we

1098
01:00:16,820 --> 01:00:20,390
should try this in transport and see if

1099
01:00:18,410 --> 01:00:26,029
people who will buy it people will read

1100
01:00:20,390 --> 01:00:39,140
it and comment on it that meeting I

1101
01:00:26,030 --> 01:00:44,170
could probably whip up some slides don't

1102
01:00:39,140 --> 01:00:46,879
worry okay I'll write you an email yeah

1103
01:00:44,170 --> 01:00:50,020
and we will mention it on our agenda

1104
01:00:46,880 --> 01:00:50,020
all right thank you

1105
01:00:50,480 --> 01:00:55,800
tell me call the Apple so thank you

1106
01:00:53,820 --> 01:00:58,470
again if your presentations is it's a

1107
01:00:55,800 --> 01:01:00,720
very interesting topic Thanks so a

1108
01:00:58,470 --> 01:01:02,939
couple comments

1109
01:01:00,720 --> 01:01:08,220
I definitely liked what Ben was saying

1110
01:01:02,940 --> 01:01:10,530
about their needs for more DNS answers

1111
01:01:08,220 --> 01:01:14,160
that the application may want to be able

1112
01:01:10,530 --> 01:01:18,960
to get and even within the a and quad-a

1113
01:01:14,160 --> 01:01:21,180
answers you may have questions that are

1114
01:01:18,960 --> 01:01:23,760
raised by this about what order are you

1115
01:01:21,180 --> 01:01:26,220
giving those answers in are you actually

1116
01:01:23,760 --> 01:01:29,220
waiting on the proxy side for both in

1117
01:01:26,220 --> 01:01:32,310
quality responses for example you know

1118
01:01:29,220 --> 01:01:34,850
we have guidance for how and client

1119
01:01:32,310 --> 01:01:37,080
devices can do happy eyeballs and

1120
01:01:34,850 --> 01:01:40,950
ideally things would not necessarily

1121
01:01:37,080 --> 01:01:43,110
have to wait for both v4 and v6 in case

1122
01:01:40,950 --> 01:01:45,180
one is not coming back with an answer so

1123
01:01:43,110 --> 01:01:47,460
these are things that we could consider

1124
01:01:45,180 --> 01:01:48,839
and if we were passing DNS messages all

1125
01:01:47,460 --> 01:01:57,420
the way through the proxy maybe that

1126
01:01:48,840 --> 01:02:00,120
would solve some of these issues so I so

1127
01:01:57,420 --> 01:02:02,580
my approach up until now was to create

1128
01:02:00,120 --> 01:02:06,060
something that is simple enough and that

1129
01:02:02,580 --> 01:02:10,860
covers the use cases that are currently

1130
01:02:06,060 --> 01:02:14,070
in use by the to our team and yeah I

1131
01:02:10,860 --> 01:02:18,240
mean I'm definitely willing to modify it

1132
01:02:14,070 --> 01:02:20,730
to include more features that the Modi

1133
01:02:18,240 --> 01:02:24,509
and more DNS like features into this if

1134
01:02:20,730 --> 01:02:27,570
there's a need for them I think a lot of

1135
01:02:24,510 --> 01:02:30,570
this the motivation here is not just to

1136
01:02:27,570 --> 01:02:33,060
add features but it's taking into

1137
01:02:30,570 --> 01:02:34,950
account things that really are good

1138
01:02:33,060 --> 01:02:38,190
protections for the application like

1139
01:02:34,950 --> 01:02:39,810
PSNI or performance optimizations like

1140
01:02:38,190 --> 01:02:43,200
what we're doing with happy eyeballs

1141
01:02:39,810 --> 01:02:44,820
that maybe weren't around or worth being

1142
01:02:43,200 --> 01:02:46,830
considered in the original tour design

1143
01:02:44,820 --> 01:02:48,680
but do make sense when you take into

1144
01:02:46,830 --> 01:02:52,549
account the current situation of things

1145
01:02:48,680 --> 01:02:55,589
the other point I had was regarding the

1146
01:02:52,550 --> 01:03:00,910
UDP in your use case for needing to do

1147
01:02:55,590 --> 01:03:05,859
the resolution in order to do UDP don't

1148
01:03:00,910 --> 01:03:07,779
to do that right perfect

1149
01:03:05,859 --> 01:03:08,890
I mean you could have other schemes for

1150
01:03:07,779 --> 01:03:11,740
getting that same effect because

1151
01:03:08,890 --> 01:03:13,569
presumably when you are if you do the

1152
01:03:11,740 --> 01:03:15,758
lazy way of just sending the hostname

1153
01:03:13,569 --> 01:03:17,740
every single time for every packet the

1154
01:03:15,759 --> 01:03:19,599
the proxy hopefully isn't doing a new

1155
01:03:17,740 --> 01:03:21,640
resolution for each time right if it's

1156
01:03:19,599 --> 01:03:24,940
random remapping and so essentially

1157
01:03:21,640 --> 01:03:26,650
you're just establishing a flow mapping

1158
01:03:24,940 --> 01:03:28,480
so you could kind of just do a similar

1159
01:03:26,650 --> 01:03:30,430
thing of saying I want to start this UDP

1160
01:03:28,480 --> 01:03:32,740
flow it's to this and I'm just going to

1161
01:03:30,430 --> 01:03:37,750
use token one and just have a go very

1162
01:03:32,740 --> 01:03:46,808
short field the thing is UDP flows are

1163
01:03:37,750 --> 01:03:50,680
not tied to a five couple local bind

1164
01:03:46,809 --> 01:03:53,079
address there are other things we can

1165
01:03:50,680 --> 01:03:55,538
look at that don't did you separate out

1166
01:03:53,079 --> 01:03:58,210
the issues of what we get back for rich

1167
01:03:55,539 --> 01:04:05,650
DNS from the necessity so we need to

1168
01:03:58,210 --> 01:04:06,750
have efficient UDP practicing thank you

1169
01:04:05,650 --> 01:04:11,619
very much

1170
01:04:06,750 --> 01:04:16,049
so Nix this thing thanks for having me

1171
01:04:11,619 --> 01:04:16,049
thanks leather night

1172
01:04:20,540 --> 01:04:30,089
fullscreen thank you all right so West

1173
01:04:28,079 --> 01:04:31,470
ietf I present in an earlier version of

1174
01:04:30,089 --> 01:04:34,140
this and the issues that had been

1175
01:04:31,470 --> 01:04:35,669
brought up before that time and since

1176
01:04:34,140 --> 01:04:38,279
then new issues have been brought up and

1177
01:04:35,670 --> 01:04:41,160
so it's been a grab to address those in

1178
01:04:38,280 --> 01:04:43,170
204 this document is being a tea

1179
01:04:41,160 --> 01:04:47,040
sponsored by Suresh and reviewed by this

1180
01:04:43,170 --> 01:04:50,130
group and others it was a one at the

1181
01:04:47,040 --> 01:04:52,109
time that I presented it in an IETF 104

1182
01:04:50,130 --> 01:04:54,119
there's four issues I've started using

1183
01:04:52,109 --> 01:04:56,359
github to track them those are the four

1184
01:04:54,119 --> 01:04:58,500
issues I've got a slide on each of those

1185
01:04:56,359 --> 01:05:00,839
and I'm going to cover them not in

1186
01:04:58,500 --> 01:05:02,730
numerical order but in order of biggest

1187
01:05:00,839 --> 01:05:05,390
Moore's general down to the list most

1188
01:05:02,730 --> 01:05:08,820
specific ok all right

1189
01:05:05,390 --> 01:05:10,440
here's the biggest one ok this came up

1190
01:05:08,820 --> 01:05:13,770
and lots of discussion are on the

1191
01:05:10,440 --> 01:05:17,730
software if' tunnel document that was

1192
01:05:13,770 --> 01:05:19,829
doing the yang module for if' types ok

1193
01:05:17,730 --> 01:05:22,800
and so there was a bunch of people and a

1194
01:05:19,829 --> 01:05:24,780
bunch of confusion about oh this is

1195
01:05:22,800 --> 01:05:26,369
defining a new registry right shouldn't

1196
01:05:24,780 --> 01:05:28,500
you be adding new values when defining a

1197
01:05:26,369 --> 01:05:30,359
new registry right the resolution of

1198
01:05:28,500 --> 01:05:32,700
that discussion is no in fact it's not

1199
01:05:30,359 --> 01:05:34,859
defining a new registry it's defining a

1200
01:05:32,700 --> 01:05:36,509
new format for the same registry right

1201
01:05:34,859 --> 01:05:38,460
you can't have different values in the

1202
01:05:36,510 --> 01:05:40,829
yang module then appear in either the

1203
01:05:38,460 --> 01:05:43,560
mid module or the registry that least

1204
01:05:40,829 --> 01:05:47,069
lists them in a table ok it's really an

1205
01:05:43,560 --> 01:05:49,890
alternate format of the same registry ok

1206
01:05:47,069 --> 01:05:52,200
and so this was updated or this was

1207
01:05:49,890 --> 01:05:54,000
addressed in draft Oh 3 by clarifying

1208
01:05:52,200 --> 01:05:55,740
that they're just alternate formats in

1209
01:05:54,000 --> 01:06:00,569
the same way as you can get registries

1210
01:05:55,740 --> 01:06:02,790
some registries in XML or HTML or CSV

1211
01:06:00,569 --> 01:06:04,230
and this is just potentially two more

1212
01:06:02,790 --> 01:06:06,420
options you could get stuff in yang

1213
01:06:04,230 --> 01:06:08,310
format or mid format but it's exactly

1214
01:06:06,420 --> 01:06:10,170
the same values just like the values are

1215
01:06:08,310 --> 01:06:13,259
the same depending on whether you get it

1216
01:06:10,170 --> 01:06:15,440
in HTML or XML or CSV format it's the

1217
01:06:13,260 --> 01:06:17,609
same registry right so this tried to

1218
01:06:15,440 --> 01:06:19,230
express that it was a new section that

1219
01:06:17,609 --> 01:06:20,670
was added for this discussion right

1220
01:06:19,230 --> 01:06:24,740
because this wasn't discussed in the

1221
01:06:20,670 --> 01:06:26,940
draft before ok this also talks about

1222
01:06:24,740 --> 01:06:29,669
recommendations to Ayane as to how to

1223
01:06:26,940 --> 01:06:32,069
address this confusion in the website

1224
01:06:29,670 --> 01:06:32,670
without being prescriptive about UI or

1225
01:06:32,069 --> 01:06:36,270
whatever I just

1226
01:06:32,670 --> 01:06:39,420
concepts okay and so the gist of it is

1227
01:06:36,270 --> 01:06:42,299
that it proposes to present the mid and

1228
01:06:39,420 --> 01:06:44,579
yang modules for if' types and we'll see

1229
01:06:42,299 --> 01:06:46,950
tunnel types which is the other issues

1230
01:06:44,579 --> 01:06:48,750
as if they were available formats not

1231
01:06:46,950 --> 01:06:50,129
quote unquote registries so an example

1232
01:06:48,750 --> 01:06:52,079
of what I'm talking about

1233
01:06:50,130 --> 01:06:54,420
if you look on the left side this is

1234
01:06:52,079 --> 01:06:57,059
example of a page that has multiple

1235
01:06:54,420 --> 01:06:58,500
available formats you see XML HTML and

1236
01:06:57,059 --> 01:06:59,849
plain text this is actually on the same

1237
01:06:58,500 --> 01:07:01,410
page as the one that's on the right is

1238
01:06:59,849 --> 01:07:02,670
just way up at the top as the same

1239
01:07:01,410 --> 01:07:04,319
there's one page that's multiple

1240
01:07:02,670 --> 01:07:06,630
registration site the point is you have

1241
01:07:04,319 --> 01:07:08,400
some descriptive text it talks about how

1242
01:07:06,630 --> 01:07:09,900
you register a value and you have some

1243
01:07:08,400 --> 01:07:12,180
tables you have links to alternate

1244
01:07:09,900 --> 01:07:14,040
formats when you look at the if' type

1245
01:07:12,180 --> 01:07:16,169
one today you can see there's this

1246
01:07:14,040 --> 01:07:18,029
little note that says for everything

1247
01:07:16,170 --> 01:07:20,460
that's in the table right it needs to be

1248
01:07:18,030 --> 01:07:22,559
updated in the if' type nib and in the

1249
01:07:20,460 --> 01:07:23,490
if' type yang module which are separate

1250
01:07:22,559 --> 01:07:25,109
pages okay

1251
01:07:23,490 --> 01:07:27,629
separately down here you see available

1252
01:07:25,109 --> 01:07:29,069
formats okay so you can see how a reader

1253
01:07:27,630 --> 01:07:30,630
would say these are available formats

1254
01:07:29,069 --> 01:07:33,270
these are other registries that FB kept

1255
01:07:30,630 --> 01:07:35,940
consistent hence the confusion right so

1256
01:07:33,270 --> 01:07:37,349
the proposal is for I Anna and I was

1257
01:07:35,940 --> 01:07:38,700
chatting with Ayane early this week I

1258
01:07:37,349 --> 01:07:41,190
don't know if Michelle came into the

1259
01:07:38,700 --> 01:07:43,259
room yet she was going to try to be here

1260
01:07:41,190 --> 01:07:45,630
for this but this type of discussion

1261
01:07:43,260 --> 01:07:47,339
here should ideally be represented as if

1262
01:07:45,630 --> 01:07:49,109
they were available formats which is

1263
01:07:47,339 --> 01:07:51,390
more reflecting reality of how the

1264
01:07:49,109 --> 01:07:53,308
allocation happens right and so Ayanna's

1265
01:07:51,390 --> 01:07:55,170
has to do various tooling issues and is

1266
01:07:53,309 --> 01:07:57,359
doing tooling issues anyway as they're

1267
01:07:55,170 --> 01:07:59,040
rewriting their system to say hey can

1268
01:07:57,359 --> 01:08:00,930
you somehow incorporate this you can

1269
01:07:59,040 --> 01:08:04,440
imagine down here in the ideal world

1270
01:08:00,930 --> 01:08:05,700
you'd see CSV mid and yang okay and you

1271
01:08:04,440 --> 01:08:07,589
click on them and you get exactly the

1272
01:08:05,700 --> 01:08:09,540
same values and all three of them

1273
01:08:07,589 --> 01:08:10,770
they're just available formats right so

1274
01:08:09,540 --> 01:08:12,180
this is if you have a hard time figure

1275
01:08:10,770 --> 01:08:13,920
out what I'm talking about this is

1276
01:08:12,180 --> 01:08:15,480
trying to make it be real as an example

1277
01:08:13,920 --> 01:08:17,520
right and of course the look and feel

1278
01:08:15,480 --> 01:08:18,779
this website may change over time right

1279
01:08:17,520 --> 01:08:21,270
and so the document doesn't talk about

1280
01:08:18,779 --> 01:08:23,100
that and just says available formats

1281
01:08:21,270 --> 01:08:26,520
which is Lanna concept as opposed to

1282
01:08:23,100 --> 01:08:29,310
registry which is not and a concept okay

1283
01:08:26,520 --> 01:08:31,170
so that was the biggest change and as a

1284
01:08:29,310 --> 01:08:33,029
result this one the the document the

1285
01:08:31,170 --> 01:08:34,799
software if' tunnel document is now in

1286
01:08:33,029 --> 01:08:36,210
the RFC editor queue right this

1287
01:08:34,799 --> 01:08:36,540
discussion helped to resolve that as

1288
01:08:36,210 --> 01:08:44,189
well

1289
01:08:36,540 --> 01:08:48,269
okay next issue the tunnel type

1290
01:08:44,189 --> 01:08:49,889
was mentioned in this document and I

1291
01:08:48,270 --> 01:08:52,710
talked about it a little bit at last

1292
01:08:49,890 --> 01:08:54,630
IETF but there was certainly not equal

1293
01:08:52,710 --> 01:08:56,609
coverage write the document talked about

1294
01:08:54,630 --> 01:09:00,569
if' types right in the registration for

1295
01:08:56,609 --> 01:09:03,569
if' types but the tunnel type registry

1296
01:09:00,569 --> 01:09:05,609
is on the same page it must always have

1297
01:09:03,569 --> 01:09:07,319
the same designated experts it must

1298
01:09:05,609 --> 01:09:09,089
always have the same assignment policy

1299
01:09:07,319 --> 01:09:10,950
by RFC that's the requirement in the

1300
01:09:09,090 --> 01:09:13,410
actual RFC is that must be the same okay

1301
01:09:10,950 --> 01:09:15,420
and so part of the expert review because

1302
01:09:13,410 --> 01:09:18,540
it has the same experts myself and Dan

1303
01:09:15,420 --> 01:09:21,029
Ramos Connor the same experts part of

1304
01:09:18,540 --> 01:09:22,200
our job when a request comes in is to

1305
01:09:21,029 --> 01:09:23,849
verify they're asking for the right

1306
01:09:22,200 --> 01:09:25,620
thing right they're asking for a tunnel

1307
01:09:23,850 --> 01:09:28,080
type and we could come back and say no

1308
01:09:25,620 --> 01:09:30,120
no you really mean a tunnel tire an if'

1309
01:09:28,080 --> 01:09:31,559
type or vice-versa right that's part of

1310
01:09:30,120 --> 01:09:32,609
the review that we do just making sure

1311
01:09:31,560 --> 01:09:33,990
that they're asking for the right one

1312
01:09:32,609 --> 01:09:35,880
right what's the same experts for both

1313
01:09:33,990 --> 01:09:39,450
of them one is a subtype of the other

1314
01:09:35,880 --> 01:09:41,010
okay and so we said well given that

1315
01:09:39,450 --> 01:09:42,750
pretty much almost all the

1316
01:09:41,010 --> 01:09:44,970
considerations the same other than a

1317
01:09:42,750 --> 01:09:46,620
couple of language terminology we said

1318
01:09:44,970 --> 01:09:49,050
it would make sense to expand the

1319
01:09:46,620 --> 01:09:51,349
document to add in and tunnel type in

1320
01:09:49,050 --> 01:09:54,090
their various places okay so we did that

1321
01:09:51,350 --> 01:09:56,250
Hey and so as a result the title change

1322
01:09:54,090 --> 01:09:57,540
to have an tunnel types in the title

1323
01:09:56,250 --> 01:09:59,940
hey the title you should just say

1324
01:09:57,540 --> 01:10:01,410
guidelines and registration procedures

1325
01:09:59,940 --> 01:10:03,210
for interface types and now it's and

1326
01:10:01,410 --> 01:10:06,150
tunnel types and now the treatment is

1327
01:10:03,210 --> 01:10:09,270
equal well that was the intent but we

1328
01:10:06,150 --> 01:10:10,920
missed 103 and so this one is saying OOP

1329
01:10:09,270 --> 01:10:12,810
we missed a spot and so we needed to Rev

1330
01:10:10,920 --> 01:10:16,890
oh four we missed a spot which is this

1331
01:10:12,810 --> 01:10:20,310
one if you look at how you ask for a

1332
01:10:16,890 --> 01:10:22,080
value hey last time I talked about how

1333
01:10:20,310 --> 01:10:24,720
you can either ask for a value by

1334
01:10:22,080 --> 01:10:26,550
filling out a form by going to an ax

1335
01:10:24,720 --> 01:10:28,380
site and clicking on an assignment and

1336
01:10:26,550 --> 01:10:29,970
clicking a thing there's a specific form

1337
01:10:28,380 --> 01:10:31,740
for if' types or you can just send them

1338
01:10:29,970 --> 01:10:34,710
email and they'll accept it either way

1339
01:10:31,740 --> 01:10:37,530
right but if you look for tunnel types

1340
01:10:34,710 --> 01:10:39,510
there's no form okay you just have to

1341
01:10:37,530 --> 01:10:41,250
send email and there's not actually any

1342
01:10:39,510 --> 01:10:42,810
place in any document that says here's

1343
01:10:41,250 --> 01:10:44,730
the template you must use to fill out

1344
01:10:42,810 --> 01:10:46,410
the picture you know the the fields you

1345
01:10:44,730 --> 01:10:51,629
have to fill out even when sending email

1346
01:10:46,410 --> 01:10:55,080
and so as a result for example the iaf

1347
01:10:51,630 --> 01:10:56,670
type even the old RFC write this

1348
01:10:55,080 --> 01:10:57,989
sentence appears in the current one

1349
01:10:56,670 --> 01:10:59,460
which was copied from the

1350
01:10:57,989 --> 01:11:01,379
older version on the Internet interfaces

1351
01:10:59,460 --> 01:11:03,119
made by the one before that this

1352
01:11:01,380 --> 01:11:05,099
template describes the fields that must

1353
01:11:03,119 --> 01:11:06,659
be supplied in a registration request

1354
01:11:05,099 --> 01:11:07,710
suitable for adding that f-type registry

1355
01:11:06,659 --> 01:11:09,449
okay

1356
01:11:07,710 --> 01:11:11,249
so that means as designated experts we

1357
01:11:09,449 --> 01:11:12,598
don't accept ones that aren't missing

1358
01:11:11,249 --> 01:11:13,710
those fields we send it back saying

1359
01:11:12,599 --> 01:11:17,249
please follow the most and send it back

1360
01:11:13,710 --> 01:11:20,039
to us okay we can't apply that policy to

1361
01:11:17,249 --> 01:11:21,869
tunnel types right because tunnel types

1362
01:11:20,039 --> 01:11:23,820
have no must saying here's the field you

1363
01:11:21,869 --> 01:11:25,739
have to send us so there's kind of

1364
01:11:23,820 --> 01:11:27,539
conflicted with this argument that says

1365
01:11:25,739 --> 01:11:29,369
same assignment policy but by the way we

1366
01:11:27,539 --> 01:11:31,230
can't apply the same thing because this

1367
01:11:29,369 --> 01:11:32,909
must is missing right and so we said

1368
01:11:31,230 --> 01:11:34,289
sure unless you specify a template

1369
01:11:32,909 --> 01:11:35,610
because they're required the questions

1370
01:11:34,289 --> 01:11:38,130
are the same question so let's just say

1371
01:11:35,610 --> 01:11:39,690
that right okay and so now if I Anna

1372
01:11:38,130 --> 01:11:41,400
wants to have a forum they could do that

1373
01:11:39,690 --> 01:11:42,570
the document doesn't comment on whether

1374
01:11:41,400 --> 01:11:44,159
they should have a forum or not but now

1375
01:11:42,570 --> 01:11:45,539
it's free to you because there's a

1376
01:11:44,159 --> 01:11:47,579
specific set of fields that this is

1377
01:11:45,539 --> 01:11:49,170
proposing but happen to match the same

1378
01:11:47,579 --> 01:11:51,749
set of fields as you'd specify for an

1379
01:11:49,170 --> 01:11:57,900
if' type okay other than they say tunnel

1380
01:11:51,749 --> 01:11:59,969
instead of interface okay for the last

1381
01:11:57,900 --> 01:12:02,909
issue I'm gonna put this slide up this

1382
01:11:59,969 --> 01:12:06,210
slide I showed it last IETF okay last

1383
01:12:02,909 --> 01:12:09,420
ITF I explained that there's subtypes

1384
01:12:06,210 --> 01:12:10,860
like I F type 131 has different subtypes

1385
01:12:09,420 --> 01:12:14,010
of different types of tunnels you know

1386
01:12:10,860 --> 01:12:15,539
GRE and tirado and all the different

1387
01:12:14,010 --> 01:12:17,309
things attack on a soft wire and so us

1388
01:12:15,539 --> 01:12:19,409
it's a subtype relationship between I

1389
01:12:17,309 --> 01:12:20,670
have types and some types there are

1390
01:12:19,409 --> 01:12:23,129
things that are alternate value

1391
01:12:20,670 --> 01:12:25,679
relationships and last I ATF I explained

1392
01:12:23,130 --> 01:12:27,659
that here's the I F type for Ethernet

1393
01:12:25,679 --> 01:12:29,550
and then once upon a time there was all

1394
01:12:27,659 --> 01:12:31,530
these other values that were then later

1395
01:12:29,550 --> 01:12:33,150
deprecated saying you know really

1396
01:12:31,530 --> 01:12:35,190
shouldn't define new values just because

1397
01:12:33,150 --> 01:12:36,329
the maximum bandwidth changed right you

1398
01:12:35,190 --> 01:12:38,159
should just use this once these were

1399
01:12:36,329 --> 01:12:40,199
deprecated right but the point is there

1400
01:12:38,159 --> 01:12:42,900
are cases that use alternate values for

1401
01:12:40,199 --> 01:12:44,969
similar technologies another cases were

1402
01:12:42,900 --> 01:12:47,159
sub layers right where there's a D

1403
01:12:44,969 --> 01:12:49,139
multiplexing relationship or what have

1404
01:12:47,159 --> 01:12:51,388
you that means that it shows up twice in

1405
01:12:49,139 --> 01:12:53,340
the stack from top to bottom or IP or

1406
01:12:51,389 --> 01:12:54,960
whatever is at the top and the physical

1407
01:12:53,340 --> 01:12:56,489
network is at the bottom of the stack

1408
01:12:54,960 --> 01:12:58,460
okay there's a three relationship

1409
01:12:56,489 --> 01:13:02,459
subtype alternate values in sub layer

1410
01:12:58,460 --> 01:13:04,440
okay so the last issue was subtypes and

1411
01:13:02,460 --> 01:13:08,900
sub layers had discussion in the

1412
01:13:04,440 --> 01:13:12,030
document alternate values had none and

1413
01:13:08,900 --> 01:13:15,719
so there was a comment from

1414
01:13:12,030 --> 01:13:18,330
who said in Suresh posted the mail out

1415
01:13:15,720 --> 01:13:20,580
to says hey any feedback on adopting

1416
01:13:18,330 --> 01:13:22,590
this or me ad sponsoring at right and

1417
01:13:20,580 --> 01:13:24,269
one of meds comments one was covered by

1418
01:13:22,590 --> 01:13:26,430
a previous when I already covered and

1419
01:13:24,270 --> 01:13:28,380
this is his other one add some text to

1420
01:13:26,430 --> 01:13:29,970
encourage udp-based tunnel protocol

1421
01:13:28,380 --> 01:13:31,200
designers to register their own code

1422
01:13:29,970 --> 01:13:33,930
instead of reusing the one currently

1423
01:13:31,200 --> 01:13:35,160
assigned to the JIRA qdp and cap okay so

1424
01:13:33,930 --> 01:13:37,710
it's actually touching on that alternate

1425
01:13:35,160 --> 01:13:41,370
value thing right because in one case

1426
01:13:37,710 --> 01:13:42,750
back here we said the IETF said you

1427
01:13:41,370 --> 01:13:44,370
should not be using alternate value

1428
01:13:42,750 --> 01:13:46,710
should kind of reuse the same one right

1429
01:13:44,370 --> 01:13:48,180
and in the UDP tunnel case this is a

1430
01:13:46,710 --> 01:13:49,590
case where we actually want them to be

1431
01:13:48,180 --> 01:13:50,790
different and so what's the principle

1432
01:13:49,590 --> 01:13:52,200
behind that that's what this issue is

1433
01:13:50,790 --> 01:13:54,150
filing what's the principle behind that

1434
01:13:52,200 --> 01:13:55,860
and dan and I said well there actually

1435
01:13:54,150 --> 01:13:57,089
is an important principle behind here

1436
01:13:55,860 --> 01:13:59,160
okay which I'll show in the next slide

1437
01:13:57,090 --> 01:14:01,410
the text that we added because both of

1438
01:13:59,160 --> 01:14:04,500
these decisions are correct and we'll

1439
01:14:01,410 --> 01:14:04,800
say why okay and so we added the section

1440
01:14:04,500 --> 01:14:07,110
called

1441
01:14:04,800 --> 01:14:09,240
alternate values that says talks about

1442
01:14:07,110 --> 01:14:11,370
guidance for when you should consider

1443
01:14:09,240 --> 01:14:12,809
using an alternate value and when you

1444
01:14:11,370 --> 01:14:16,550
should try to either use an existing one

1445
01:14:12,810 --> 01:14:20,220
okay and so on the UDP issue that med

1446
01:14:16,550 --> 01:14:22,140
mentioned the UDP value by the way one

1447
01:14:20,220 --> 01:14:25,140
of the reasons that it's problematic as

1448
01:14:22,140 --> 01:14:27,360
the UDP value was originally added for

1449
01:14:25,140 --> 01:14:30,240
this RFC one two three for encapsulation

1450
01:14:27,360 --> 01:14:33,030
okay RFC one two three four is a way of

1451
01:14:30,240 --> 01:14:36,240
doing encapsulation over UDP that can

1452
01:14:33,030 --> 01:14:38,400
also encapsulate multicast packets okay

1453
01:14:36,240 --> 01:14:40,889
over a multicast distribution network

1454
01:14:38,400 --> 01:14:43,259
right many other UDP encapsulation

1455
01:14:40,890 --> 01:14:46,350
protocols tirado and so on cannot do

1456
01:14:43,260 --> 01:14:48,450
that okay and so this notion that says

1457
01:14:46,350 --> 01:14:49,740
well this particular UDP one doesn't

1458
01:14:48,450 --> 01:14:51,929
really work the other ones because the

1459
01:14:49,740 --> 01:14:53,700
expectations are wrong okay and that

1460
01:14:51,930 --> 01:14:56,330
gets to the core of this it says okay we

1461
01:14:53,700 --> 01:14:59,220
can generalize this problem okay and so

1462
01:14:56,330 --> 01:15:01,200
in this case when traído and these other

1463
01:14:59,220 --> 01:15:02,490
udp-based ones got their own value there

1464
01:15:01,200 --> 01:15:05,460
was a good reason for that and that's

1465
01:15:02,490 --> 01:15:07,200
what led us to this text okay after we

1466
01:15:05,460 --> 01:15:09,120
discussed these two examples we said

1467
01:15:07,200 --> 01:15:10,950
these are both examples of correct ones

1468
01:15:09,120 --> 01:15:12,360
and so we since they came to opposite

1469
01:15:10,950 --> 01:15:14,040
conclusions we talked about both

1470
01:15:12,360 --> 01:15:16,530
examples in the document as guidance

1471
01:15:14,040 --> 01:15:18,150
right so from this quote down to this

1472
01:15:16,530 --> 01:15:20,610
quote is the actual text in the document

1473
01:15:18,150 --> 01:15:23,009
right now and I tried to format it just

1474
01:15:20,610 --> 01:15:25,269
you can highlight and see says okay

1475
01:15:23,010 --> 01:15:27,850
there's two cases here okay you

1476
01:15:25,270 --> 01:15:29,650
use a new one whether it's AI f-type or

1477
01:15:27,850 --> 01:15:31,660
tunnel type use a new one

1478
01:15:29,650 --> 01:15:34,059
whenever key aspects such as a header

1479
01:15:31,660 --> 01:15:36,040
format of the link model okay are

1480
01:15:34,060 --> 01:15:37,600
significantly different right so in the

1481
01:15:36,040 --> 01:15:39,610
trade over says one two three four

1482
01:15:37,600 --> 01:15:40,870
versus various other softwares one the

1483
01:15:39,610 --> 01:15:43,900
link model is significantly different

1484
01:15:40,870 --> 01:15:45,190
and so therefore you should ask for a

1485
01:15:43,900 --> 01:15:47,410
new value right you shouldn't try to

1486
01:15:45,190 --> 01:15:50,019
reuse UDP you shouldn't try to reuse

1487
01:15:47,410 --> 01:15:51,309
Ethernet or whatever create a new value

1488
01:15:50,020 --> 01:15:54,280
if it's a new link model or header

1489
01:15:51,310 --> 01:15:56,680
format okay but reuse the same value

1490
01:15:54,280 --> 01:15:59,380
like in the multiple copies of Ethernet

1491
01:15:56,680 --> 01:16:01,060
example if the differences can be

1492
01:15:59,380 --> 01:16:03,250
expressed in differing values of

1493
01:16:01,060 --> 01:16:04,690
existing objects like link bandwidth

1494
01:16:03,250 --> 01:16:06,160
right this is a separate object you

1495
01:16:04,690 --> 01:16:08,710
don't need the if' type to figure that

1496
01:16:06,160 --> 01:16:10,720
out right and so in the Ethernet case

1497
01:16:08,710 --> 01:16:12,250
the only differences were ones that

1498
01:16:10,720 --> 01:16:14,170
could be expressed at other objects

1499
01:16:12,250 --> 01:16:16,600
already within other things in the same

1500
01:16:14,170 --> 01:16:18,850
table okay so in Ethernet one this

1501
01:16:16,600 --> 01:16:20,500
applied and in the UDP tunnel case this

1502
01:16:18,850 --> 01:16:22,240
one applied and this gives a more

1503
01:16:20,500 --> 01:16:41,440
generalized guidance that is hopefully

1504
01:16:22,240 --> 01:16:43,540
reusable in future I think that's really

1505
01:16:41,440 --> 01:16:44,679
good that you like you know somebody

1506
01:16:43,540 --> 01:16:46,780
file like you know the difference

1507
01:16:44,680 --> 01:16:50,470
between them so I am really happy that

1508
01:16:46,780 --> 01:16:53,320
you did it okay great thank you okay so

1509
01:16:50,470 --> 01:16:54,730
all of the issues that are addressed in

1510
01:16:53,320 --> 01:16:58,240
those ones are ones that were raised

1511
01:16:54,730 --> 01:17:00,610
since last IETF based on the two calls

1512
01:16:58,240 --> 01:17:02,349
right though the IETF last call on the

1513
01:17:00,610 --> 01:17:05,530
software is document and then Suresh is

1514
01:17:02,350 --> 01:17:08,020
call 480 sponsoring this one all of

1515
01:17:05,530 --> 01:17:09,550
these we believe have been addressed to

1516
01:17:08,020 --> 01:17:11,920
people satisfaction so we don't believe

1517
01:17:09,550 --> 01:17:14,290
that there are new issues okay and so

1518
01:17:11,920 --> 01:17:16,210
I'm just reporting that out but we think

1519
01:17:14,290 --> 01:17:17,950
that our job is done until any new

1520
01:17:16,210 --> 01:17:37,220
issues are raised and we invite the

1521
01:17:17,950 --> 01:17:40,309
community to raise any new ones so

1522
01:17:37,220 --> 01:17:41,510
something else right so I see Michelle

1523
01:17:40,310 --> 01:17:43,070
came in is there anything else you

1524
01:17:41,510 --> 01:17:45,560
wanted to add I did mention that the

1525
01:17:43,070 --> 01:17:47,570
tooling issues Ayane was investigating

1526
01:17:45,560 --> 01:17:49,070
in the future and so exactly how things

1527
01:17:47,570 --> 01:17:51,139
would affect a website was something

1528
01:17:49,070 --> 01:17:52,429
Ayane would decide I just mentioned

1529
01:17:51,140 --> 01:17:54,470
here's the principles from the community

1530
01:17:52,430 --> 01:17:56,570
for Anna to take into account yes

1531
01:17:54,470 --> 01:17:58,580
thumbs up okay for me deco that was just

1532
01:17:56,570 --> 01:18:10,219
a thumbs up from from Michelle on behalf

1533
01:17:58,580 --> 01:18:16,130
of Anna is there anything that transport

1534
01:18:10,220 --> 01:18:16,400
area needs to help with this no don't

1535
01:18:16,130 --> 01:18:17,930
think so

1536
01:18:16,400 --> 01:18:22,820
shall we just mention these going to

1537
01:18:17,930 --> 01:18:24,920
last call the only other write them that

1538
01:18:22,820 --> 01:18:26,809
there is an area that we want to get

1539
01:18:24,920 --> 01:18:28,820
specific review from which may or may

1540
01:18:26,810 --> 01:18:35,720
not affect this document which is ops

1541
01:18:28,820 --> 01:18:39,620
area right because this this first issue

1542
01:18:35,720 --> 01:18:43,160
here comes up whenever you have a case

1543
01:18:39,620 --> 01:18:45,410
where you want a mid and a yang module

1544
01:18:43,160 --> 01:18:47,420
to be defined as having always always

1545
01:18:45,410 --> 01:18:49,610
always the same values and they must

1546
01:18:47,420 --> 01:18:51,770
never differ so allocation of a value

1547
01:18:49,610 --> 01:18:53,960
affects both of them right in theory

1548
01:18:51,770 --> 01:18:56,240
this might actually be a precedent for

1549
01:18:53,960 --> 01:18:58,220
other cases beyond if' type and Tunnel

1550
01:18:56,240 --> 01:18:59,960
type I am not the designated expert for

1551
01:18:58,220 --> 01:19:04,070
any other ones okay so I am setting a

1552
01:18:59,960 --> 01:19:05,780
precedent here that the ops area ad or

1553
01:19:04,070 --> 01:19:08,000
whatever could choose to use in other

1554
01:19:05,780 --> 01:19:10,009
cases here that's not what this document

1555
01:19:08,000 --> 01:19:12,160
is doing but the IETF could choose to do

1556
01:19:10,010 --> 01:19:12,160
that

1557
01:19:16,970 --> 01:19:21,340
he said that transport area and ops peer

1558
01:19:20,120 --> 01:19:24,170
review would be welcome

1559
01:19:21,340 --> 01:19:38,770
right that's my co-author saying that

1560
01:19:24,170 --> 01:19:38,770
thank you you know I don't know timing

1561
01:19:40,150 --> 01:19:46,370
resources so I would be a little

1562
01:19:44,450 --> 01:19:49,769
concerned with of course you know you go

1563
01:19:46,370 --> 01:19:53,250
to IETF s call everything this looks

1564
01:19:49,770 --> 01:19:55,920
it gets approved might be sitting to her

1565
01:19:53,250 --> 01:19:58,470
a little while now the whole entire

1566
01:19:55,920 --> 01:19:59,970
thing to do there is if there's

1567
01:19:58,470 --> 01:20:02,520
something in the I Ana consideration

1568
01:19:59,970 --> 01:20:05,010
section that says and I'll try to find

1569
01:20:02,520 --> 01:20:07,170
the document do something similar

1570
01:20:05,010 --> 01:20:09,540
basically says that you're going to work

1571
01:20:07,170 --> 01:20:13,890
out the tooling the publication of the

1572
01:20:09,540 --> 01:20:16,470
document doesn't meet week for that so

1573
01:20:13,890 --> 01:20:18,150
if I can find what I'm thinking of I'll

1574
01:20:16,470 --> 01:20:20,070
send it to you and review the working

1575
01:20:18,150 --> 01:20:22,500
group wants to consider that so you

1576
01:20:20,070 --> 01:20:24,630
don't have to wait on publication for us

1577
01:20:22,500 --> 01:20:26,370
to do what we gotta do right we consider

1578
01:20:24,630 --> 01:20:28,080
this just requirements for the registry

1579
01:20:26,370 --> 01:20:31,550
the actual implementation will lag the

1580
01:20:28,080 --> 01:20:31,550
requirements obviously so yeah

1581
01:21:37,690 --> 01:21:40,820
[Music]

