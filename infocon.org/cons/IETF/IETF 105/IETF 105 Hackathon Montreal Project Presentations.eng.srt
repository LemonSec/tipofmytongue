1
00:00:09,799 --> 00:00:18,119
presentations in just a few minutes just

2
00:00:13,860 --> 00:00:20,610
one last reminder if you what we've seen

3
00:00:18,119 --> 00:00:24,360
is that PowerPoint presentations don't

4
00:00:20,610 --> 00:00:27,630
always work well from the Chromebook so

5
00:00:24,360 --> 00:00:29,279
if you have it in PowerPoint well we'll

6
00:00:27,630 --> 00:00:32,400
try to make it work it's just with mine

7
00:00:29,279 --> 00:00:35,190
it didn't work so well so it's safer if

8
00:00:32,400 --> 00:00:37,769
you if you use the PDF and if you have

9
00:00:35,190 --> 00:00:40,140
both the PDF and the PowerPoint up there

10
00:00:37,769 --> 00:00:45,239
we'll just choose the the PDF when it

11
00:00:40,140 --> 00:00:48,000
comes to return all so what we're going

12
00:00:45,239 --> 00:00:50,070
to do is download from the repo all the

13
00:00:48,000 --> 00:00:52,829
files so we have them locally here if

14
00:00:50,070 --> 00:00:53,640
you have not uploaded your presentation

15
00:00:52,829 --> 00:00:56,059
yet

16
00:00:53,640 --> 00:00:58,379
don't panic once we get through

17
00:00:56,059 --> 00:01:01,349
presenting all the ones that that we do

18
00:00:58,379 --> 00:01:04,800
have we'll go back and get ones that we

19
00:01:01,350 --> 00:01:08,460
missed so hopefully we'll give everyone

20
00:01:04,800 --> 00:01:09,780
a chance to present and if your files up

21
00:01:08,460 --> 00:01:11,460
there and you decide you don't want to

22
00:01:09,780 --> 00:01:13,940
present at the time we call you you can

23
00:01:11,460 --> 00:01:13,940
just let us know

24
00:01:24,710 --> 00:01:27,710
perfect

25
00:01:33,780 --> 00:01:39,060
so it's just gonna download everything

26
00:02:24,640 --> 00:02:30,730
okay so we're going to limit the

27
00:02:28,450 --> 00:02:32,880
presentations to three minutes if you

28
00:02:30,730 --> 00:02:38,590
can wrap up in less than three minutes

29
00:02:32,880 --> 00:02:40,780
then we'll have time for Q&A if you go

30
00:02:38,590 --> 00:02:42,820
over three minutes we'll have to cut you

31
00:02:40,780 --> 00:02:45,700
off so that we we we get through all

32
00:02:42,820 --> 00:02:48,250
these I'll be down here keeping time

33
00:02:45,700 --> 00:02:49,000
I'll give you a signal when you have one

34
00:02:48,250 --> 00:02:51,400
minute left

35
00:02:49,000 --> 00:02:52,180
and then I'll just let you know when

36
00:02:51,400 --> 00:02:55,770
that time's up

37
00:02:52,180 --> 00:02:58,209
hopefully it doesn't get to that point

38
00:02:55,770 --> 00:02:59,430
Barry's here he's going to be helping me

39
00:02:58,209 --> 00:03:03,880
with going through this these

40
00:02:59,430 --> 00:03:05,800
presentations and like I said we have

41
00:03:03,880 --> 00:03:07,690
the shared Chromebook up here that we'll

42
00:03:05,800 --> 00:03:09,190
all be using we'll give you a little

43
00:03:07,690 --> 00:03:11,410
guidance on how to use it it's fairly

44
00:03:09,190 --> 00:03:12,640
straightforward and bear with us as

45
00:03:11,410 --> 00:03:14,739
we're pulling in each of the

46
00:03:12,640 --> 00:03:18,119
presentations hopefully we've got it

47
00:03:14,739 --> 00:03:18,120
working so it flows pretty well

48
00:03:34,250 --> 00:03:42,410
I was just trying to get the downloads I

49
00:03:38,090 --> 00:03:58,050
forgot where Chrome puts downloads I

50
00:03:42,410 --> 00:04:01,170
just down remember what that was how we

51
00:03:58,050 --> 00:04:04,220
got that no I think when you down here

52
00:04:01,170 --> 00:04:04,220
one may be here files

53
00:04:13,650 --> 00:04:16,640
I'll use the default

54
00:04:20,238 --> 00:04:25,020
so we could just go through them the

55
00:04:22,710 --> 00:04:37,020
Optima and then once we're through we'll

56
00:04:25,020 --> 00:04:38,430
probably have to go and okay so I'm just

57
00:04:37,020 --> 00:04:41,159
gonna go through these in the order that

58
00:04:38,430 --> 00:04:46,800
they happen to get downloaded here

59
00:04:41,160 --> 00:04:48,510
so the first one is the floor is DNS so

60
00:04:46,800 --> 00:04:59,390
will somebody come up from the floor is

61
00:04:48,510 --> 00:04:59,390
DNS and give your presentation excuse me

62
00:05:00,580 --> 00:05:03,580
huh

63
00:05:06,280 --> 00:05:17,500
okay we'll do you later that's not a

64
00:05:13,099 --> 00:05:17,500
problem not a problem we'll do you later

65
00:05:19,330 --> 00:05:26,229
okay so let's go with the next one

66
00:05:22,990 --> 00:05:26,229
spin dump

67
00:05:47,039 --> 00:05:51,779
yeah it's quite the maze to get up here

68
00:05:49,589 --> 00:05:55,259
at after after he's done I'll try to

69
00:05:51,779 --> 00:05:57,020
give the next person a cue to move your

70
00:05:55,259 --> 00:05:59,699
way to the front of the room before you

71
00:05:57,020 --> 00:06:06,359
you know so we don't take as much time

72
00:05:59,699 --> 00:06:08,909
right okay so here's the presentation of

73
00:06:06,360 --> 00:06:13,439
the quick measurements table and our

74
00:06:08,909 --> 00:06:14,969
project we call spin dump so we've been

75
00:06:13,439 --> 00:06:18,930
working for a couple of ATF's on this

76
00:06:14,969 --> 00:06:21,058
spin dump tool it's a network latency

77
00:06:18,930 --> 00:06:24,449
measurement tool basically that looks at

78
00:06:21,059 --> 00:06:25,919
quick and other protocols today we had

79
00:06:24,449 --> 00:06:27,689
some ideas of implementing some

80
00:06:25,919 --> 00:06:32,188
experimental proposals for measuring

81
00:06:27,689 --> 00:06:33,569
packet loss so there are a few different

82
00:06:32,189 --> 00:06:35,249
proposals out on using some of the

83
00:06:33,569 --> 00:06:40,199
reserved bits in the short header of the

84
00:06:35,249 --> 00:06:41,939
quick packets so we needed also to

85
00:06:40,199 --> 00:06:44,009
create some sort of unified handling of

86
00:06:41,939 --> 00:06:45,930
quick versions because we now start see

87
00:06:44,009 --> 00:06:47,699
a lot of different versions and

88
00:06:45,930 --> 00:06:53,520
different uses of these experimental

89
00:06:47,699 --> 00:06:55,169
bits and yeah we try to do and what got

90
00:06:53,520 --> 00:06:57,258
done was that we made a table driven

91
00:06:55,169 --> 00:07:00,719
version of experimental and

92
00:06:57,259 --> 00:07:02,819
non-experimental quick versions we

93
00:07:00,719 --> 00:07:06,389
implemented two drafts of these lost

94
00:07:02,819 --> 00:07:09,269
measurement bits and we are currently

95
00:07:06,389 --> 00:07:14,009
developing sort of reporting of loss

96
00:07:09,269 --> 00:07:16,199
measurement events in our tool we're

97
00:07:14,009 --> 00:07:19,169
also integrating this into some testing

98
00:07:16,199 --> 00:07:21,689
environments using it for instance

99
00:07:19,169 --> 00:07:24,359
mininet test vm that we can use to test

100
00:07:21,689 --> 00:07:26,249
a lot of different networks scenarios

101
00:07:24,360 --> 00:07:30,240
basically we also did a bunch of bug

102
00:07:26,249 --> 00:07:32,870
fixes this is a list of how we are

103
00:07:30,240 --> 00:07:34,740
handling different quick versions so

104
00:07:32,870 --> 00:07:36,839
previously we had kind of nasty

105
00:07:34,740 --> 00:07:38,870
structures where different behaviors

106
00:07:36,839 --> 00:07:41,159
based on different quick versions

107
00:07:38,870 --> 00:07:43,469
basically we had go into every function

108
00:07:41,159 --> 00:07:45,569
and and and check which person it is now

109
00:07:43,469 --> 00:07:48,180
we have generalized this quite nicely so

110
00:07:45,569 --> 00:07:50,849
so that we can add new experimental

111
00:07:48,180 --> 00:07:53,099
versions with new support for different

112
00:07:50,849 --> 00:07:56,330
header formats etc and and yeah make it

113
00:07:53,099 --> 00:07:56,330
much more dynamic nice

114
00:07:56,700 --> 00:08:02,430
yep that's right so some of the lost

115
00:08:00,870 --> 00:08:07,380
detection proposals that got implemented

116
00:08:02,430 --> 00:08:09,570
was one that is based on these cue and

117
00:08:07,380 --> 00:08:12,900
orbits that will be presented at mapper

118
00:08:09,570 --> 00:08:14,909
G so we have that implemented and we

119
00:08:12,900 --> 00:08:20,219
also have these round-trip loss

120
00:08:14,910 --> 00:08:22,530
measurements so we have a bunch of

121
00:08:20,220 --> 00:08:25,380
proposals in there what did we learn was

122
00:08:22,530 --> 00:08:27,330
that supporting all quick versions is

123
00:08:25,380 --> 00:08:29,430
quite demanding it's quite demanding too

124
00:08:27,330 --> 00:08:30,960
especially when we have a protocol

125
00:08:29,430 --> 00:08:33,180
that's evolving and we have a lot of

126
00:08:30,960 --> 00:08:35,640
experimental proposals to have a nice

127
00:08:33,179 --> 00:08:40,349
structure of handling you know all of

128
00:08:35,640 --> 00:08:42,030
these different cases we see that both

129
00:08:40,350 --> 00:08:43,979
these loss detection proposals have

130
00:08:42,030 --> 00:08:46,319
measurements in real networks and we

131
00:08:43,979 --> 00:08:49,920
hope to be able to to facilitate more

132
00:08:46,320 --> 00:08:51,630
measurements of this but yeah problem is

133
00:08:49,920 --> 00:08:53,310
that we only have two reserved bits and

134
00:08:51,630 --> 00:08:57,900
to reserve bits for two proposals is

135
00:08:53,310 --> 00:09:00,660
quite not that much so this was done

136
00:08:57,900 --> 00:09:03,750
with me Marc seller yari Arcos investor

137
00:09:00,660 --> 00:09:07,230
Fabio Maru and Alex Andre you can find

138
00:09:03,750 --> 00:09:10,770
our tool the spin dump at at github and

139
00:09:07,230 --> 00:09:14,270
the new measurements proposals you can

140
00:09:10,770 --> 00:09:14,270
find at these links so yeah

141
00:09:15,280 --> 00:09:25,500
[Applause]

142
00:09:19,680 --> 00:09:25,500
okay thanks let's go on to the

143
00:09:39,830 --> 00:09:46,610
okay PTP notifications is next and

144
00:09:43,279 --> 00:09:49,670
kickoff nope sorry

145
00:09:46,610 --> 00:10:04,940
io am make your way to the front so we

146
00:09:49,670 --> 00:10:06,979
don't waste time okay use the right my

147
00:10:04,940 --> 00:10:11,060
name is Sachin vishwaroopa I'm from

148
00:10:06,980 --> 00:10:13,790
Cisco system and myself and of us we

149
00:10:11,060 --> 00:10:17,060
worked on the PTP notification I am for

150
00:10:13,790 --> 00:10:20,120
the first time for ITF as you can see as

151
00:10:17,060 --> 00:10:22,819
you can see I have not used the format

152
00:10:20,120 --> 00:10:26,450
and maybe next time we'll follow the

153
00:10:22,820 --> 00:10:30,170
same thing so essentially in Cisco I

154
00:10:26,450 --> 00:10:32,300
work on IP fabric as some of you may or

155
00:10:30,170 --> 00:10:34,640
may not be aware but these days the

156
00:10:32,300 --> 00:10:37,609
paradigm on the media also is changing

157
00:10:34,640 --> 00:10:40,880
it's moving away from the standard SDI

158
00:10:37,610 --> 00:10:43,010
to IP based fabrics and that's what we

159
00:10:40,880 --> 00:10:45,560
work on one of the key things there is

160
00:10:43,010 --> 00:10:48,890
the PTP as the synchronization between

161
00:10:45,560 --> 00:10:51,500
the your media gateways endpoints as

162
00:10:48,890 --> 00:10:53,899
well as the video audio sync is very

163
00:10:51,500 --> 00:10:56,029
critical and the accuracy needs to be

164
00:10:53,899 --> 00:10:59,839
less than 500 nano second and that's the

165
00:10:56,029 --> 00:11:02,570
reason we use PDP with the PDP today we

166
00:10:59,839 --> 00:11:04,339
actually have as I notice we have the

167
00:11:02,570 --> 00:11:08,240
standard for the yank already defined

168
00:11:04,339 --> 00:11:10,940
like RFC 85-75 but what is more critical

169
00:11:08,240 --> 00:11:13,190
for us to is to get the notification and

170
00:11:10,940 --> 00:11:14,690
that's because of the number of syncs

171
00:11:13,190 --> 00:11:17,149
which are involved in the PTP

172
00:11:14,690 --> 00:11:20,089
in the PTP like in the precision time

173
00:11:17,149 --> 00:11:22,730
protocol in a second we typically think

174
00:11:20,089 --> 00:11:25,459
8 times so we cannot expect network

175
00:11:22,730 --> 00:11:28,250
management system to sync and find out

176
00:11:25,459 --> 00:11:30,260
the deviation from those samples because

177
00:11:28,250 --> 00:11:33,680
if you think about one day for a single

178
00:11:30,260 --> 00:11:36,290
switch we generate around 700,000 the

179
00:11:33,680 --> 00:11:38,779
sample points and so we want to do it in

180
00:11:36,290 --> 00:11:40,819
a distributed fashion so what we are

181
00:11:38,779 --> 00:11:43,160
thinking is to extend what we have it

182
00:11:40,820 --> 00:11:49,459
today with the PTP yang to introduce

183
00:11:43,160 --> 00:11:50,779
like a new notification there okay this

184
00:11:49,459 --> 00:11:53,119
slide again talks about the

185
00:11:50,779 --> 00:11:53,570
synchronization I mean earlier when we

186
00:11:53,120 --> 00:11:55,250
star

187
00:11:53,570 --> 00:11:58,700
on the audio video right if you are

188
00:11:55,250 --> 00:12:02,510
using a lower signal or maybe think

189
00:11:58,700 --> 00:12:04,940
about like Ultra HD HD 4k 8 K now the

190
00:12:02,510 --> 00:12:06,950
buffer cannot be that big right so

191
00:12:04,940 --> 00:12:09,410
that's reason synchronization is

192
00:12:06,950 --> 00:12:11,450
critical I put some more things but more

193
00:12:09,410 --> 00:12:13,819
importantly you can think like audio and

194
00:12:11,450 --> 00:12:20,030
video needs to be insane and that's what

195
00:12:13,820 --> 00:12:23,810
we have been working on so these are the

196
00:12:20,030 --> 00:12:26,810
use cases what we wanted to address it

197
00:12:23,810 --> 00:12:28,849
in the hackathon so essentially for the

198
00:12:26,810 --> 00:12:31,550
live event we wanted to monitor and

199
00:12:28,850 --> 00:12:35,180
monitor why a notification again be

200
00:12:31,550 --> 00:12:37,550
depending upon the media profile the the

201
00:12:35,180 --> 00:12:40,130
duration and the state all those

202
00:12:37,550 --> 00:12:42,199
parameters need to vary and that second

203
00:12:40,130 --> 00:12:46,420
we wanted to do the configuration as

204
00:12:42,200 --> 00:12:49,580
well as generate the notification sure

205
00:12:46,420 --> 00:12:53,449
so in the hackathon we have the

206
00:12:49,580 --> 00:12:55,310
deliverables we defined today take a PTP

207
00:12:53,450 --> 00:12:57,460
egg notification model again we need to

208
00:12:55,310 --> 00:12:59,959
remove with the team we develop a

209
00:12:57,460 --> 00:13:01,670
third-party application on Cisco switch

210
00:12:59,960 --> 00:13:04,730
so the real deliverable here was a

211
00:13:01,670 --> 00:13:06,380
Python script which will consume on the

212
00:13:04,730 --> 00:13:08,930
switch and push it as a young

213
00:13:06,380 --> 00:13:10,760
notification to the existing product we

214
00:13:08,930 --> 00:13:13,310
have like a network management solution

215
00:13:10,760 --> 00:13:15,530
and we extended that to introduce a new

216
00:13:13,310 --> 00:13:20,050
REST API to consume that notification

217
00:13:15,530 --> 00:13:24,800
and overlay the PTP information on top

218
00:13:20,050 --> 00:13:26,270
so I mean it's kind of a chart but I am

219
00:13:24,800 --> 00:13:28,370
sharing the slide so you can see the

220
00:13:26,270 --> 00:13:30,770
example payload as well as notification

221
00:13:28,370 --> 00:13:34,070
and this is how the user interface looks

222
00:13:30,770 --> 00:13:36,079
like here what you are seeing is a swine

223
00:13:34,070 --> 00:13:38,930
leaf topology with Cisco switches and

224
00:13:36,080 --> 00:13:40,790
based upon the PTP offset threshold the

225
00:13:38,930 --> 00:13:43,250
switches at the runtime are color coded

226
00:13:40,790 --> 00:13:45,709
so based on the notification which

227
00:13:43,250 --> 00:13:48,860
WebSocket it dynamically updates the

228
00:13:45,710 --> 00:13:51,110
screen so based on the number of sample

229
00:13:48,860 --> 00:13:53,570
which has deviated we actually color

230
00:13:51,110 --> 00:13:55,460
code those and this was just idea just

231
00:13:53,570 --> 00:13:58,160
to demo that part and this is the back

232
00:13:55,460 --> 00:13:59,540
end where we introduced like a new

233
00:13:58,160 --> 00:14:01,310
application on the back end with the

234
00:13:59,540 --> 00:14:04,339
Python script which completely

235
00:14:01,310 --> 00:14:06,410
integrates with the cisco CLI so it's as

236
00:14:04,340 --> 00:14:07,059
if like a original part of the cisco

237
00:14:06,410 --> 00:14:08,649
it's coming

238
00:14:07,059 --> 00:14:11,049
from Cisco and you can monitor and

239
00:14:08,649 --> 00:14:13,269
control the notification part of it so

240
00:14:11,049 --> 00:14:15,249
that was the idea the whole idea is to

241
00:14:13,269 --> 00:14:15,789
take the notification and integrate into

242
00:14:15,249 --> 00:14:33,459
the PTP

243
00:14:15,789 --> 00:14:44,439
thank you okay IO am is up and il NP is

244
00:14:33,459 --> 00:14:47,919
on deck so this was a project to do IO

245
00:14:44,439 --> 00:14:50,379
am which is in situ operations and

246
00:14:47,919 --> 00:14:53,529
management basic idea if you're not

247
00:14:50,379 --> 00:14:56,219
familiar is to have an ipv6 extension

248
00:14:53,529 --> 00:15:00,249
header hop-by-hop option that contains

249
00:14:56,219 --> 00:15:02,139
an IO am option which is information

250
00:15:00,249 --> 00:15:03,879
that the router fills in as the packet

251
00:15:02,139 --> 00:15:05,789
goes along its path so the ideas were

252
00:15:03,879 --> 00:15:08,679
taken metrics and performance

253
00:15:05,789 --> 00:15:11,889
measurements from routers in a path so

254
00:15:08,679 --> 00:15:14,289
the goal we had today in yesterday was

255
00:15:11,889 --> 00:15:17,139
to implement something and show some

256
00:15:14,289 --> 00:15:20,439
interoperability there was a couple of

257
00:15:17,139 --> 00:15:23,189
drafts on the IOM one is on the specific

258
00:15:20,439 --> 00:15:26,529
option one is on the data format and

259
00:15:23,189 --> 00:15:30,009
what we did we brought up UDP paying

260
00:15:26,529 --> 00:15:32,409
just a little program to do a UDP ping

261
00:15:30,009 --> 00:15:35,859
that sets the extension header and the

262
00:15:32,409 --> 00:15:40,209
IOM option and we had a client-server

263
00:15:35,859 --> 00:15:42,579
one router and we were able to follow

264
00:15:40,209 --> 00:15:45,189
the path and have the information filled

265
00:15:42,579 --> 00:15:48,248
in the kernel implementation or the

266
00:15:45,189 --> 00:15:51,368
router was provided by Justin that's at

267
00:15:48,249 --> 00:15:52,869
this github and separately the client in

268
00:15:51,369 --> 00:15:55,059
the server code was a different

269
00:15:52,869 --> 00:15:57,699
implementation all of these are on Linux

270
00:15:55,059 --> 00:16:00,639
hopefully next IETF hackathon will have

271
00:15:57,699 --> 00:16:05,199
some more router or host implementations

272
00:16:00,639 --> 00:16:08,229
join in so the way this works for what

273
00:16:05,199 --> 00:16:10,718
we do we ping a remote host to add a few

274
00:16:08,229 --> 00:16:13,989
options and as you can see we got some

275
00:16:10,719 --> 00:16:15,459
response back and we parse the IOM

276
00:16:13,989 --> 00:16:17,729
message that we got back and sure enough

277
00:16:15,459 --> 00:16:21,280
the router filled it in

278
00:16:17,729 --> 00:16:24,340
so more interestingly as the

279
00:16:21,280 --> 00:16:28,030
note information this is directly from

280
00:16:24,340 --> 00:16:29,560
the IOM draft various pieces of

281
00:16:28,030 --> 00:16:32,350
information so I have the egress

282
00:16:29,560 --> 00:16:34,780
interface ingress interface time stamps

283
00:16:32,350 --> 00:16:36,970
transit delay things like that so

284
00:16:34,780 --> 00:16:39,400
there's quite a bit of information that

285
00:16:36,970 --> 00:16:43,360
we could potentially gather from the

286
00:16:39,400 --> 00:16:46,420
network in this fashion so we did learn

287
00:16:43,360 --> 00:16:48,580
a few things particularly trying to to

288
00:16:46,420 --> 00:16:51,209
get things done or operate getting the

289
00:16:48,580 --> 00:16:53,650
lengths right when we're parsing fields

290
00:16:51,210 --> 00:16:56,080
particularly fields that hold lengths

291
00:16:53,650 --> 00:16:57,610
that correlate to other lengths that was

292
00:16:56,080 --> 00:16:59,350
kind of interesting bit fields don't

293
00:16:57,610 --> 00:17:00,670
make things easier in this regard

294
00:16:59,350 --> 00:17:04,420
especially when they're split across

295
00:17:00,670 --> 00:17:08,379
byte boundaries and we also have a few

296
00:17:04,420 --> 00:17:10,990
suggestions to eye ppm particularly in

297
00:17:08,380 --> 00:17:13,689
some of the data formatting Paik data

298
00:17:10,990 --> 00:17:16,300
format for instance it's a lot easier to

299
00:17:13,689 --> 00:17:18,339
deal with fixed fields than variable

300
00:17:16,300 --> 00:17:20,790
length data in this regard so we

301
00:17:18,339 --> 00:17:24,698
probably have some good feedback on that

302
00:17:20,790 --> 00:17:26,199
wrapping it up so we had a good number

303
00:17:24,699 --> 00:17:29,080
of team members and a couple of

304
00:17:26,199 --> 00:17:45,600
first-timers at IU TAFE hackathon thank

305
00:17:29,080 --> 00:17:45,600
you okay I LNP is up and taps is on deck

306
00:17:56,350 --> 00:18:02,750
okay so just some background information

307
00:17:59,179 --> 00:18:04,610
on Island P we had the first demo of

308
00:18:02,750 --> 00:18:07,820
what will eventually be a public release

309
00:18:04,610 --> 00:18:10,399
of the code at the last IETF and we've

310
00:18:07,820 --> 00:18:12,918
just been developing that especially

311
00:18:10,400 --> 00:18:15,740
trying to fix some bugs that we found in

312
00:18:12,919 --> 00:18:18,080
a tie T of 1:04 which was very useful to

313
00:18:15,740 --> 00:18:20,510
to know about so the plan here was

314
00:18:18,080 --> 00:18:23,600
really to make sure that Island P could

315
00:18:20,510 --> 00:18:26,330
work over a real network that's the idea

316
00:18:23,600 --> 00:18:29,620
eventually and so what we had was a

317
00:18:26,330 --> 00:18:31,939
network that consisted of some low-end

318
00:18:29,620 --> 00:18:34,428
rooters but they are just commercial

319
00:18:31,940 --> 00:18:36,470
rooters they run ipv6 only the idea is

320
00:18:34,429 --> 00:18:38,360
that Island P works completely end to

321
00:18:36,470 --> 00:18:40,220
end so the core rooters just think

322
00:18:38,360 --> 00:18:42,320
you're running ipv6 whereas actually

323
00:18:40,220 --> 00:18:44,710
you're running Island P and the other

324
00:18:42,320 --> 00:18:47,480
thing that came through fortuitous

325
00:18:44,710 --> 00:18:51,049
conversation with Stefan BOTS mayor was

326
00:18:47,480 --> 00:18:53,360
some DNS improvements help with DNS in

327
00:18:51,049 --> 00:18:55,639
general and I'll say a little bit more

328
00:18:53,360 --> 00:18:57,320
about those in a slide coming up so

329
00:18:55,640 --> 00:18:59,390
these the key things that we managed to

330
00:18:57,320 --> 00:19:02,059
work out today we did some test runs

331
00:18:59,390 --> 00:19:04,490
with TCP over Island P running over

332
00:19:02,059 --> 00:19:06,200
these commercial rooters between two

333
00:19:04,490 --> 00:19:10,730
boxes that were running an island P

334
00:19:06,200 --> 00:19:13,970
modified Linux kernel and but running

335
00:19:10,730 --> 00:19:17,000
over these commercial rooters and we had

336
00:19:13,970 --> 00:19:19,159
some discussions on fixing a possible

337
00:19:17,000 --> 00:19:21,710
issue with DNS additional information

338
00:19:19,159 --> 00:19:22,940
processing and that was actually fixed

339
00:19:21,710 --> 00:19:25,340
so that was a good outcome

340
00:19:22,940 --> 00:19:27,620
I spoke to Stephan BOTS mayor and after

341
00:19:25,340 --> 00:19:30,049
I uploaded these slides I should also

342
00:19:27,620 --> 00:19:32,209
thank so I didn't put his name in but

343
00:19:30,049 --> 00:19:35,179
Peter spat chick she did the coding to

344
00:19:32,210 --> 00:19:37,690
put this fix into one of the the DNS

345
00:19:35,179 --> 00:19:41,510
servers so thank you for that as well

346
00:19:37,690 --> 00:19:44,299
this is the demo that we had running we

347
00:19:41,510 --> 00:19:47,690
had the it's not very easy to see but

348
00:19:44,299 --> 00:19:49,520
you've got two boxes at the what is your

349
00:19:47,690 --> 00:19:51,679
right hand edge running the island P

350
00:19:49,520 --> 00:19:55,400
code and in the middle we've got four

351
00:19:51,679 --> 00:19:59,720
little edge router boxes those are r1 r2

352
00:19:55,400 --> 00:20:02,149
r3 marked in the logical diagram and we

353
00:19:59,720 --> 00:20:04,700
emulated a mobile node moving across

354
00:20:02,149 --> 00:20:05,360
them so no mobile IP they're just

355
00:20:04,700 --> 00:20:08,330
unicast

356
00:20:05,360 --> 00:20:10,129
routing and what happened is that as the

357
00:20:08,330 --> 00:20:12,919
mobile node moves across this running a

358
00:20:10,130 --> 00:20:15,290
TCP flow from the blue node the

359
00:20:12,920 --> 00:20:17,990
correspondent node while it moves and we

360
00:20:15,290 --> 00:20:19,879
just wanted to see can Island P do what

361
00:20:17,990 --> 00:20:22,940
it's meant to do which is to change its

362
00:20:19,880 --> 00:20:26,570
location seamlessly as it moves across

363
00:20:22,940 --> 00:20:29,510
those different networks and the results

364
00:20:26,570 --> 00:20:31,070
we had showed here on this graph the

365
00:20:29,510 --> 00:20:32,780
individual throughput on the network

366
00:20:31,070 --> 00:20:35,210
shown on the top three facets of the

367
00:20:32,780 --> 00:20:37,549
graph and on the bottom graph is just

368
00:20:35,210 --> 00:20:39,320
the aggregate throughput you see at the

369
00:20:37,549 --> 00:20:41,900
correspondent node so that was pretty

370
00:20:39,320 --> 00:20:44,210
good we got a consistent TCP flow

371
00:20:41,900 --> 00:20:46,460
running across those commercial Reuters

372
00:20:44,210 --> 00:20:49,040
running Island P and to end they were

373
00:20:46,460 --> 00:20:51,890
just running unicast routing but we had

374
00:20:49,040 --> 00:20:55,280
a mobile node this was work that was

375
00:20:51,890 --> 00:20:57,860
done mainly by my PhD student who's

376
00:20:55,280 --> 00:20:59,570
working with me at the that's saying my

377
00:20:57,860 --> 00:21:01,668
time is up

378
00:20:59,570 --> 00:21:03,049
at the university of san andrews and we

379
00:21:01,669 --> 00:21:05,150
had some former students who also

380
00:21:03,049 --> 00:21:06,620
contributed some code and just some

381
00:21:05,150 --> 00:21:09,290
thanks to some people who've made it

382
00:21:06,620 --> 00:21:23,570
possible for me to be here today thank

383
00:21:09,290 --> 00:21:32,450
you very much Oki to NSF is next and tap

384
00:21:23,570 --> 00:21:34,490
is now taps hi hi I'm Theresa I'm

385
00:21:32,450 --> 00:21:36,410
presenting for the e taps table which is

386
00:21:34,490 --> 00:21:40,040
for transport services just a quick

387
00:21:36,410 --> 00:21:43,309
recap what taps is so we are developing

388
00:21:40,040 --> 00:21:45,320
a sort of an abstract API for different

389
00:21:43,309 --> 00:21:47,780
transport protocols and those are just

390
00:21:45,320 --> 00:21:49,850
the transferred protocols our current PI

391
00:21:47,780 --> 00:21:51,200
tabs implementation supports of course

392
00:21:49,850 --> 00:21:53,540
it will be nice to have quicken there as

393
00:21:51,200 --> 00:21:56,240
well so the idea is the application

394
00:21:53,540 --> 00:21:58,580
specifies some abstract requirements and

395
00:21:56,240 --> 00:21:59,960
then it gets a generic connection and

396
00:21:58,580 --> 00:22:01,730
the application doesn't have to care

397
00:21:59,960 --> 00:22:06,230
whether it's like a new transport

398
00:22:01,730 --> 00:22:07,700
protocol and this is being worked on by

399
00:22:06,230 --> 00:22:11,650
the tabs working group right now in

400
00:22:07,700 --> 00:22:13,970
those three drafts now in our PI tabs

401
00:22:11,650 --> 00:22:17,419
implementation we added a few things

402
00:22:13,970 --> 00:22:18,300
here at the hackathons so we have tests

403
00:22:17,419 --> 00:22:22,170
now

404
00:22:18,300 --> 00:22:24,270
and we worked on racing between

405
00:22:22,170 --> 00:22:26,250
different transport protocols so of

406
00:22:24,270 --> 00:22:28,230
course those are not really equivalent

407
00:22:26,250 --> 00:22:30,240
but if we have transport protocols that

408
00:22:28,230 --> 00:22:33,960
are sort of provide the same features

409
00:22:30,240 --> 00:22:35,790
then we can try them at the same time

410
00:22:33,960 --> 00:22:37,890
and sort of go happy eyeballs on them

411
00:22:35,790 --> 00:22:40,409
and we are working on that right now

412
00:22:37,890 --> 00:22:42,270
also we are working on getting multicast

413
00:22:40,410 --> 00:22:45,690
to work which is kind of work in

414
00:22:42,270 --> 00:22:47,940
progress also we have a nice interesting

415
00:22:45,690 --> 00:22:50,580
concept called framers so the idea is

416
00:22:47,940 --> 00:22:52,470
you get a byte stream from TCP but then

417
00:22:50,580 --> 00:22:55,110
you have a sort of a delimiter that

418
00:22:52,470 --> 00:22:57,420
limits your byte stream into messages

419
00:22:55,110 --> 00:22:59,909
and this is a concept that has been

420
00:22:57,420 --> 00:23:01,920
added to or that has been expanded in

421
00:22:59,910 --> 00:23:05,040
the recent draft and so we've been

422
00:23:01,920 --> 00:23:07,440
discussing framers a lot and there's

423
00:23:05,040 --> 00:23:09,300
also going to be a more discussion on

424
00:23:07,440 --> 00:23:11,190
this concept in the working group so we

425
00:23:09,300 --> 00:23:13,260
have some feedback because in our

426
00:23:11,190 --> 00:23:14,940
implementation we have implemented it

427
00:23:13,260 --> 00:23:16,710
and some parts were unclear also we're

428
00:23:14,940 --> 00:23:20,450
going to discuss how much we of this we

429
00:23:16,710 --> 00:23:22,370
have to specify from the tests we could

430
00:23:20,450 --> 00:23:24,960
fix some box in our implementation

431
00:23:22,370 --> 00:23:27,659
obviously but also we are sort of

432
00:23:24,960 --> 00:23:29,790
modeling the input that we get from the

433
00:23:27,660 --> 00:23:31,320
application and maybe also we're going

434
00:23:29,790 --> 00:23:34,560
to model the output sort of the

435
00:23:31,320 --> 00:23:36,270
resulting connection so let's see where

436
00:23:34,560 --> 00:23:38,220
this leads in terms of comparing

437
00:23:36,270 --> 00:23:40,800
different implementations and don't also

438
00:23:38,220 --> 00:23:43,710
we have some other minor additions to

439
00:23:40,800 --> 00:23:46,950
the draft so the people who were there

440
00:23:43,710 --> 00:23:49,590
the entire week and are mostly Jake Max

441
00:23:46,950 --> 00:23:51,090
and me also we had more discussions with

442
00:23:49,590 --> 00:23:53,070
people from the working group Philipp

443
00:23:51,090 --> 00:23:55,409
and told me for example and so thank you

444
00:23:53,070 --> 00:23:57,510
for thank you to everybody who

445
00:23:55,410 --> 00:24:12,570
contributed to that and this is the link

446
00:23:57,510 --> 00:24:16,070
to our repo okay I to NSF now and SR v6

447
00:24:12,570 --> 00:24:16,070
VPN yang next

448
00:24:23,150 --> 00:24:30,030
hello hello this is a poor zone from a

449
00:24:27,660 --> 00:24:33,900
sketchy you in Korea

450
00:24:30,030 --> 00:24:48,600
let me introduce I too and as a primal

451
00:24:33,900 --> 00:24:51,180
walk hack hackathon project this time so

452
00:24:48,600 --> 00:24:54,629
this time I - and I said hackathon

453
00:24:51,180 --> 00:24:57,390
project we want to pro concept the

454
00:24:54,630 --> 00:25:00,920
person / I - and I said framework can

455
00:24:57,390 --> 00:25:05,870
work on top of commercial public cloud

456
00:25:00,920 --> 00:25:11,490
platform it is called SOA you can see

457
00:25:05,870 --> 00:25:14,310
security on air so we approved our three

458
00:25:11,490 --> 00:25:17,400
interfaces on top of this commercial

459
00:25:14,310 --> 00:25:20,280
platform and also we demonstrated the

460
00:25:17,400 --> 00:25:28,950
security policy translator it works well

461
00:25:20,280 --> 00:25:31,860
so this is a building block and so this

462
00:25:28,950 --> 00:25:36,890
shows that our internet draft at Aitu

463
00:25:31,860 --> 00:25:39,899
and as a working guru this is a poster

464
00:25:36,890 --> 00:25:43,800
so this is our during the weekend we

465
00:25:39,900 --> 00:25:48,660
work together Tim Porter so this figure

466
00:25:43,800 --> 00:25:54,060
shows I - and SF so this is a nice I to

467
00:25:48,660 --> 00:25:56,520
NSF framework or project so so you may

468
00:25:54,060 --> 00:26:02,450
be familiar with this one so this time

469
00:25:56,520 --> 00:26:06,980
we embarked with commercial fiber NSF so

470
00:26:02,450 --> 00:26:10,710
here we inspire and also we used

471
00:26:06,980 --> 00:26:14,100
previously I will actually cut up open

472
00:26:10,710 --> 00:26:17,850
source the web filter so this time we

473
00:26:14,100 --> 00:26:20,790
combined the commercial power and open

474
00:26:17,850 --> 00:26:23,370
source - ricotta for web filter together

475
00:26:20,790 --> 00:26:28,460
on top of a commercial public cloud

476
00:26:23,370 --> 00:26:28,459
system developed by the a tiara in Korea

477
00:26:29,810 --> 00:26:39,210
so to slide a demonstrate

478
00:26:35,740 --> 00:26:46,000
a couple of yeah you can see

479
00:26:39,210 --> 00:26:49,029
demonstration here so the register to

480
00:26:46,000 --> 00:26:52,690
NSF of features and also consumer

481
00:26:49,029 --> 00:26:55,720
interface used to deliver the security

482
00:26:52,690 --> 00:27:00,179
policy in the high level point of view

483
00:26:55,720 --> 00:27:03,760
and then security controller translate

484
00:27:00,179 --> 00:27:06,490
halep policy into logger policy so this

485
00:27:03,760 --> 00:27:09,669
is a see you can see a one you see is

486
00:27:06,490 --> 00:27:12,010
one you get so we provide the user

487
00:27:09,669 --> 00:27:15,429
interface to easily configure that talk

488
00:27:12,010 --> 00:27:19,029
security functions using this test board

489
00:27:15,429 --> 00:27:22,630
yeah okay so we provided two or

490
00:27:19,029 --> 00:27:26,429
scenarios filtering and a filter so this

491
00:27:22,630 --> 00:27:28,630
time we prove our concept I turn accept

492
00:27:26,429 --> 00:27:31,750
interfaces working on top of a

493
00:27:28,630 --> 00:27:34,020
commercial platform also we show that

494
00:27:31,750 --> 00:27:35,380
the translator is working well so

495
00:27:34,020 --> 00:27:39,940
tomorrow

496
00:27:35,380 --> 00:27:42,789
hack demo our we can attempt to rate

497
00:27:39,940 --> 00:27:54,700
we'll be happy with your visit thank you

498
00:27:42,789 --> 00:28:07,510
for your listening thank you OKs rv6 VPN

499
00:27:54,700 --> 00:28:11,649
yang and coming up is LP when this is my

500
00:28:07,510 --> 00:28:15,309
co and about introduced hack project of

501
00:28:11,649 --> 00:28:16,418
i sr basics with in configuration unity

502
00:28:15,309 --> 00:28:19,149
module

503
00:28:16,419 --> 00:28:21,279
yes this is our hack plane and we know

504
00:28:19,149 --> 00:28:23,559
we already departments about sixty

505
00:28:21,279 --> 00:28:28,179
repent and the configure I saw a

506
00:28:23,559 --> 00:28:31,149
six-week serenade him a sorry six unit

507
00:28:28,179 --> 00:28:34,270
module and the sender as a v6 model is

508
00:28:31,149 --> 00:28:36,549
under development by ITF so we're

509
00:28:34,270 --> 00:28:39,639
looking forward pass to support its

510
00:28:36,549 --> 00:28:42,668
operators to controller use a TF Yamato

511
00:28:39,640 --> 00:28:46,630
to interact with vendors native young to

512
00:28:42,669 --> 00:28:49,360
and that to debridement and lacks a

513
00:28:46,630 --> 00:28:52,420
device and so the project

514
00:28:49,360 --> 00:28:55,270
here is we using ansible people can I

515
00:28:52,420 --> 00:28:58,630
have 200 models to configuration to

516
00:28:55,270 --> 00:29:01,480
config as our v6 repair and implements

517
00:28:58,630 --> 00:29:05,559
our key features in I have as our risk

518
00:29:01,480 --> 00:29:08,020
model also we want to develop event also

519
00:29:05,559 --> 00:29:11,590
we want to development and plug in to

520
00:29:08,020 --> 00:29:17,440
support standard llamada to translate to

521
00:29:11,590 --> 00:29:21,428
native module ok they said what we can

522
00:29:17,440 --> 00:29:23,830
we can work on what we got known and

523
00:29:21,429 --> 00:29:27,970
then we implement history and support

524
00:29:23,830 --> 00:29:30,668
applies one full as a recyclable and as

525
00:29:27,970 --> 00:29:34,059
a service 6 and as a wrist 6 will be

526
00:29:30,669 --> 00:29:37,270
involved and we also develop opened up

527
00:29:34,059 --> 00:29:39,040
to allow equipment ITF model to the

528
00:29:37,270 --> 00:29:41,710
vendor native your motive you can

529
00:29:39,040 --> 00:29:46,240
improve it I have idea of a service 6

530
00:29:41,710 --> 00:29:49,870
base model and output is 1/8 Abe as our

531
00:29:46,240 --> 00:29:53,500
basic model and here is function and

532
00:29:49,870 --> 00:29:56,799
workflow for the new device you can Iraq

533
00:29:53,500 --> 00:29:59,890
the implement I'd have module and for

534
00:29:56,799 --> 00:30:02,650
the laxative wise you can use a plugin

535
00:29:59,890 --> 00:30:06,190
to translate the standard model to the

536
00:30:02,650 --> 00:30:10,990
native module and the water we learned

537
00:30:06,190 --> 00:30:14,290
is that as our basic module can be proud

538
00:30:10,990 --> 00:30:17,320
to support sorry sixth service delivery

539
00:30:14,290 --> 00:30:20,230
and we use an spa playbook to extrait

540
00:30:17,320 --> 00:30:22,418
multiple tests and the here is problem

541
00:30:20,230 --> 00:30:25,210
is that the wonder that laxative wise

542
00:30:22,419 --> 00:30:27,400
may be only support until model and the

543
00:30:25,210 --> 00:30:29,500
operator or controller may want to

544
00:30:27,400 --> 00:30:31,900
deploy it ICF standard model as common

545
00:30:29,500 --> 00:30:35,940
interface to interact with multiple

546
00:30:31,900 --> 00:30:40,780
wonders so we the one who are apt to

547
00:30:35,940 --> 00:30:45,760
addresses issue and it will feel if I

548
00:30:40,780 --> 00:30:48,070
know okay if you like to if you are

549
00:30:45,760 --> 00:30:49,330
interested in the topic you can join

550
00:30:48,070 --> 00:30:52,450
tomorrow's

551
00:30:49,330 --> 00:30:56,049
happy hours and we all shows a demo and

552
00:30:52,450 --> 00:30:58,840
discusses a detail ok this is our team

553
00:30:56,049 --> 00:31:01,379
number since everyone's contribution

554
00:30:58,840 --> 00:31:01,379
thank you

555
00:31:02,670 --> 00:31:05,799
[Applause]

556
00:31:09,049 --> 00:31:16,309
okay LP 1 is now and PBT is coming up

557
00:31:14,100 --> 00:31:16,309
next

558
00:31:22,970 --> 00:31:28,739
good afternoon this is a report for the

559
00:31:25,980 --> 00:31:33,570
from the LP 1 open check table down in

560
00:31:28,739 --> 00:31:36,119
the back so at this hackathon similar to

561
00:31:33,570 --> 00:31:37,889
the previous few hackathons our goal was

562
00:31:36,119 --> 00:31:40,488
to improve the open-source

563
00:31:37,889 --> 00:31:43,289
implementation of shake-shake is a

564
00:31:40,489 --> 00:31:44,220
protocol defined at the LP one working

565
00:31:43,289 --> 00:31:46,499
group

566
00:31:44,220 --> 00:31:49,679
it's about compressing headers and

567
00:31:46,499 --> 00:31:51,989
providing fragmentation so that IP

568
00:31:49,679 --> 00:31:55,019
protocols can be transported over LP

569
00:31:51,989 --> 00:31:59,730
ones and LP ones are low bar wide area

570
00:31:55,019 --> 00:32:04,470
networks such as Laura when sig Fox n by

571
00:31:59,730 --> 00:32:06,899
utl GM or I Triple E 15.4 W which are

572
00:32:04,470 --> 00:32:11,059
characterized by very small payloads and

573
00:32:06,899 --> 00:32:15,418
very reduced bandwidth and energy

574
00:32:11,059 --> 00:32:17,970
resources the major draft is the first

575
00:32:15,419 --> 00:32:20,989
one shown here and we have a few

576
00:32:17,970 --> 00:32:25,499
continuation drafts so what we got done

577
00:32:20,989 --> 00:32:27,419
this weekend was merge several feature

578
00:32:25,499 --> 00:32:29,519
branches in our project we had had

579
00:32:27,419 --> 00:32:33,929
separate developments over the last few

580
00:32:29,519 --> 00:32:35,850
months and which resulted in basically

581
00:32:33,929 --> 00:32:38,039
the compression being in one branch and

582
00:32:35,850 --> 00:32:40,379
fragmentation in another branch and so

583
00:32:38,039 --> 00:32:44,340
we merged said so that they're now fully

584
00:32:40,379 --> 00:32:47,459
integrated and we got the basic tests

585
00:32:44,340 --> 00:32:49,109
running again and she details to be her

586
00:32:47,460 --> 00:32:52,259
and I out yet

587
00:32:49,109 --> 00:32:55,199
and one of the branch provides in the

588
00:32:52,259 --> 00:32:57,779
new fragmentation mode that was

589
00:32:55,200 --> 00:33:01,200
introduced last for including extensive

590
00:32:57,779 --> 00:33:04,529
tenting testing of that we added a few

591
00:33:01,200 --> 00:33:07,169
other functionalities simple OAM stuff

592
00:33:04,529 --> 00:33:11,909
like ping responses and all that stuff

593
00:33:07,169 --> 00:33:13,440
so that one major achievement and the

594
00:33:11,909 --> 00:33:14,400
other one is making the the project

595
00:33:13,440 --> 00:33:17,850
easier to use

596
00:33:14,400 --> 00:33:21,690
for newcomers so we created a user guide

597
00:33:17,850 --> 00:33:24,000
how you really run the code simply when

598
00:33:21,690 --> 00:33:26,040
you get started we added that into the

599
00:33:24,000 --> 00:33:29,610
Sphinx documentation of the project and

600
00:33:26,040 --> 00:33:32,750
we also would test plan for to do random

601
00:33:29,610 --> 00:33:35,750
testing of the fragmentation machine

602
00:33:32,750 --> 00:33:35,750
oops

603
00:33:35,780 --> 00:33:41,129
so yeah what we learned is that it's

604
00:33:38,730 --> 00:33:43,260
easy to diverge on such projects when

605
00:33:41,130 --> 00:33:46,950
you have contributors overseas that you

606
00:33:43,260 --> 00:33:49,650
quite don't know beforehand we also want

607
00:33:46,950 --> 00:33:51,450
we really want to lower the adoption

608
00:33:49,650 --> 00:33:54,380
barrier to this project so that

609
00:33:51,450 --> 00:33:56,970
newcomers can get used to it without

610
00:33:54,380 --> 00:34:01,620
draining too much of and the resources

611
00:33:56,970 --> 00:34:04,710
of the old-timers and also yeah we want

612
00:34:01,620 --> 00:34:06,449
to provide complete examples and we want

613
00:34:04,710 --> 00:34:10,409
to become the reference implementation

614
00:34:06,450 --> 00:34:13,889
for check and that's our team ten

615
00:34:10,409 --> 00:34:17,250
members one new hackathon member free

616
00:34:13,889 --> 00:34:20,790
people remote from Japan Spain in Chile

617
00:34:17,250 --> 00:34:23,489
which allowed us to run 24/7 over this

618
00:34:20,790 --> 00:34:25,100
weekend by having the Japanese guide and

619
00:34:23,489 --> 00:34:39,689
working while we were sleeping

620
00:34:25,100 --> 00:34:45,560
that's it thank you ok PBT is coming up

621
00:34:39,690 --> 00:34:45,560
and the next one after that is IP wave

622
00:34:52,449 --> 00:34:58,149
okay we have a PPT let's see how well

623
00:34:55,668 --> 00:34:58,149
that works

624
00:35:07,870 --> 00:35:21,180
click on present yes of course okay yeah

625
00:35:17,080 --> 00:35:21,180
I can not I'm not able to advance it

626
00:35:30,180 --> 00:35:35,049
okay

627
00:35:31,330 --> 00:35:40,509
so we've asked PBT to upload a PDF and

628
00:35:35,050 --> 00:35:47,580
we'll come back to it so for now I P

629
00:35:40,510 --> 00:35:47,580
wave and our arts to you is after that

630
00:35:52,920 --> 00:36:00,850
so this is a poor job so I want to share

631
00:35:58,120 --> 00:36:04,779
out the experience i py project basic

632
00:36:00,850 --> 00:36:09,130
product protocol project so the goal is

633
00:36:04,780 --> 00:36:13,420
to want to prove the IP version 6 over 8

634
00:36:09,130 --> 00:36:14,740
to that Alabang OCB wave I Triple E wave

635
00:36:13,420 --> 00:36:16,870
or logical Inc elaire

636
00:36:14,740 --> 00:36:19,359
the second one is a big hello neighbor

637
00:36:16,870 --> 00:36:23,109
discovery with the address of

638
00:36:19,360 --> 00:36:25,660
restoration and multi-hop da d and also

639
00:36:23,110 --> 00:36:29,470
we take advantage of intermediate of

640
00:36:25,660 --> 00:36:34,359
occurs in Bennett to reduce the ad time

641
00:36:29,470 --> 00:36:38,560
also it can short the initialization of

642
00:36:34,360 --> 00:36:41,080
a TCP UDP transmission so we prove the

643
00:36:38,560 --> 00:36:43,299
to trapped or she beat and also be

644
00:36:41,080 --> 00:36:47,170
cooler neighbor discovery trapped so

645
00:36:43,300 --> 00:36:49,330
this is a poster this is the Porter the

646
00:36:47,170 --> 00:36:51,160
team so this is a figure is of the

647
00:36:49,330 --> 00:36:53,080
vehicle and a tall architecture so you

648
00:36:51,160 --> 00:36:55,690
can see beaker can communicate each

649
00:36:53,080 --> 00:37:00,520
other using b2b also communicate the p2i

650
00:36:55,690 --> 00:37:02,890
so our idea is you can see the beaker

651
00:37:00,520 --> 00:37:05,280
even though it is not a communication

652
00:37:02,890 --> 00:37:07,930
range of lotus-eyed unit this is a

653
00:37:05,280 --> 00:37:11,020
providing internet connectivity to

654
00:37:07,930 --> 00:37:13,270
beaker so it can initiate the ad using

655
00:37:11,020 --> 00:37:16,060
intermediate beaker and register using

656
00:37:13,270 --> 00:37:18,340
multi RTD and also it was it are

657
00:37:16,060 --> 00:37:21,140
configured with the October IP address

658
00:37:18,340 --> 00:37:25,100
it can start the TCP UDP connection

659
00:37:21,140 --> 00:37:29,049
so we are probably using simulation this

660
00:37:25,100 --> 00:37:33,230
figure shows a sumo pilota simulator and

661
00:37:29,050 --> 00:37:36,620
also we use the OM therefore the truck

662
00:37:33,230 --> 00:37:40,010
simulator so you can see we using a

663
00:37:36,620 --> 00:37:42,290
three hub multi-hop dat to reduce the

664
00:37:40,010 --> 00:37:44,840
tid delay and also we can start the

665
00:37:42,290 --> 00:37:47,509
quickily or TCP connection so this is a

666
00:37:44,840 --> 00:37:50,240
protocol stack the left-hand side is

667
00:37:47,510 --> 00:37:52,820
that you can see waiver protocol stack

668
00:37:50,240 --> 00:37:54,919
this is IP this is a web server message

669
00:37:52,820 --> 00:37:58,370
protocol for safety so we implemented

670
00:37:54,920 --> 00:38:01,220
for our logical link on layer and ipv6

671
00:37:58,370 --> 00:38:05,029
over to the Lublin also neighbor

672
00:38:01,220 --> 00:38:07,310
discovery so so the simulation result is

673
00:38:05,030 --> 00:38:09,560
our neighbor discovery can lead use the

674
00:38:07,310 --> 00:38:13,130
legacy our neighbor discovery so yeah

675
00:38:09,560 --> 00:38:17,480
okay so we during the weekend we're all

676
00:38:13,130 --> 00:38:19,940
on the probe concept IP wave or CB and

677
00:38:17,480 --> 00:38:24,380
pickle neighbor discovery I can work for

678
00:38:19,940 --> 00:38:27,020
the mercury queuing network so you can

679
00:38:24,380 --> 00:38:29,930
take a look at the other material for

680
00:38:27,020 --> 00:38:33,790
video clip and also github or link thank

681
00:38:29,930 --> 00:38:33,790
you for your listening thank you yeah

682
00:38:38,740 --> 00:38:50,799
okay arts to you now and TLS one three

683
00:38:46,130 --> 00:38:50,800
SSH come on up for next

684
00:38:58,319 --> 00:39:10,799
so left forward okay all right okay arts

685
00:39:08,759 --> 00:39:13,559
to you is a feed of arts and culture

686
00:39:10,799 --> 00:39:17,038
listings we're looking to save the

687
00:39:13,559 --> 00:39:19,289
producers of arts events time and and

688
00:39:17,039 --> 00:39:24,079
help them bypass the intermediaries who

689
00:39:19,289 --> 00:39:24,079
have kind of taken over the their data

690
00:39:34,699 --> 00:39:40,949
okay so we want to improve the discovery

691
00:39:39,089 --> 00:39:42,749
and circulation of the arts events while

692
00:39:40,949 --> 00:39:47,400
we're here at ITF and we want to make

693
00:39:42,749 --> 00:39:50,189
the arts more machine readable so the

694
00:39:47,400 --> 00:39:52,619
problem is that the arts sector

695
00:39:50,189 --> 00:39:55,919
publishes its information in very

696
00:39:52,619 --> 00:39:59,039
fragmented ways and regrettably

697
00:39:55,919 --> 00:40:01,739
intermediate as intermediaries have

698
00:39:59,039 --> 00:40:07,409
become the authorities of compiled arts

699
00:40:01,739 --> 00:40:10,130
data so what we did here step one was a

700
00:40:07,409 --> 00:40:13,380
lot of preliminary data organization and

701
00:40:10,130 --> 00:40:15,989
step two was we constructed widgets for

702
00:40:13,380 --> 00:40:19,650
the users for public users to indicate

703
00:40:15,989 --> 00:40:22,469
their interest and once the once the

704
00:40:19,650 --> 00:40:25,559
games were made that helped us log the

705
00:40:22,469 --> 00:40:30,869
results and feed different information

706
00:40:25,559 --> 00:40:33,809
to the users so so the before picture of

707
00:40:30,869 --> 00:40:35,719
this as it is on the website you see all

708
00:40:33,809 --> 00:40:37,769
the arts events that are listed there

709
00:40:35,719 --> 00:40:42,329
where the user has not made any

710
00:40:37,769 --> 00:40:44,669
preferences and then the user plays one

711
00:40:42,329 --> 00:40:48,239
of two two of the games we created and

712
00:40:44,669 --> 00:40:50,848
then in the end we have recommended

713
00:40:48,239 --> 00:40:52,230
events for for the user and then the

714
00:40:50,849 --> 00:40:54,270
user can

715
00:40:52,230 --> 00:40:58,610
play the game again and we can learn

716
00:40:54,270 --> 00:41:03,900
more about the user so for the outcomes

717
00:40:58,610 --> 00:41:06,570
we have begun organizing our system to

718
00:41:03,900 --> 00:41:09,540
take into account these user preferences

719
00:41:06,570 --> 00:41:11,340
and there's a lot more discussion a lot

720
00:41:09,540 --> 00:41:14,400
more data needs to be generated before

721
00:41:11,340 --> 00:41:16,620
we can implement any of this and we have

722
00:41:14,400 --> 00:41:18,690
some questions going forward and I'm

723
00:41:16,620 --> 00:41:20,580
happy to speak with anyone who wants to

724
00:41:18,690 --> 00:41:32,550
know about this project ok thank you

725
00:41:20,580 --> 00:41:37,560
very much all right TLS 1.3 and mud

726
00:41:32,550 --> 00:41:40,590
onboarding is after that and this looks

727
00:41:37,560 --> 00:41:44,759
like TLS 1.3 is another PowerPoint so

728
00:41:40,590 --> 00:41:48,510
let me give that another try they wanted

729
00:41:44,760 --> 00:41:52,140
to go at the end all right yep

730
00:41:48,510 --> 00:41:53,760
I've also update uploaded the PDF okay

731
00:41:52,140 --> 00:41:56,450
so we'll catch you at the end when we do

732
00:41:53,760 --> 00:42:00,110
when we catch up on the uploads so mud

733
00:41:56,450 --> 00:42:12,600
mud onboarding is now and then dhcpv6

734
00:42:00,110 --> 00:42:13,470
after that okay everybody well it wasn't

735
00:42:12,600 --> 00:42:17,009
just me

736
00:42:13,470 --> 00:42:19,200
we muddled in anima acp work on that as

737
00:42:17,010 --> 00:42:22,380
well a couple of different drafts that

738
00:42:19,200 --> 00:42:23,250
are going on here so we have the RFC

739
00:42:22,380 --> 00:42:24,930
8520

740
00:42:23,250 --> 00:42:27,600
and we had a lot of projects running

741
00:42:24,930 --> 00:42:29,940
around at that center table there we had

742
00:42:27,600 --> 00:42:33,330
work on a mud mud reporter this is a

743
00:42:29,940 --> 00:42:34,740
mechanism by which manufacturers and

744
00:42:33,330 --> 00:42:36,810
network administrators can learn whether

745
00:42:34,740 --> 00:42:39,299
or not their devices are actually

746
00:42:36,810 --> 00:42:41,100
putting out policy recommendations that

747
00:42:39,300 --> 00:42:43,170
are useful to those devices or if

748
00:42:41,100 --> 00:42:45,000
there's a miss configuration some work

749
00:42:43,170 --> 00:42:47,340
on mud maker which generates the Jason

750
00:42:45,000 --> 00:42:49,710
the the guys from ceará labs completely

751
00:42:47,340 --> 00:42:51,780
redid the code which was nice because it

752
00:42:49,710 --> 00:42:54,480
was in PHP and my PHP which is really

753
00:42:51,780 --> 00:42:55,710
bad and now it's all in Python thank you

754
00:42:54,480 --> 00:42:57,330
guys

755
00:42:55,710 --> 00:42:59,340
there was the PP mud integration that

756
00:42:57,330 --> 00:43:02,310
was going on there was a verification

757
00:42:59,340 --> 00:43:03,710
mechanism that was being developed by

758
00:43:02,310 --> 00:43:05,940
the folks at NCC OE

759
00:43:03,710 --> 00:43:08,490
and then we had

760
00:43:05,940 --> 00:43:13,470
some grass work and discovery work going

761
00:43:08,490 --> 00:43:15,328
on and let's see here what did we plan

762
00:43:13,470 --> 00:43:16,770
to solve actually we just plan to all

763
00:43:15,329 --> 00:43:20,250
get together and figure out what to

764
00:43:16,770 --> 00:43:21,869
solve and that's what we did so as I

765
00:43:20,250 --> 00:43:24,839
mentioned a lot I think it covered a lot

766
00:43:21,869 --> 00:43:27,030
of this ground already on mud rip on mud

767
00:43:24,839 --> 00:43:29,099
reporting we got a guy back there Rangga

768
00:43:27,030 --> 00:43:31,310
who who sat there and basically coded

769
00:43:29,099 --> 00:43:33,810
the entire time got an 80%

770
00:43:31,310 --> 00:43:37,950
implementation in terms of what he can

771
00:43:33,810 --> 00:43:40,740
report out and we had a lot of bug fixes

772
00:43:37,950 --> 00:43:43,259
going on to to a bunch of this stuff the

773
00:43:40,740 --> 00:43:45,540
mud manager that Cisco did how to loop

774
00:43:43,260 --> 00:43:47,099
in it and it still has a loop in it but

775
00:43:45,540 --> 00:43:49,589
at least we know where it is and know

776
00:43:47,099 --> 00:43:50,970
how to avoid it and I'll be putting in a

777
00:43:49,589 --> 00:43:53,720
patch for that in fact I have a patch

778
00:43:50,970 --> 00:43:57,328
already and just needs to get committed

779
00:43:53,720 --> 00:43:59,129
so we had a lot of some interoperability

780
00:43:57,329 --> 00:44:00,990
testing going on we had a couple of guys

781
00:43:59,130 --> 00:44:02,970
here from c-calm who went and actually

782
00:44:00,990 --> 00:44:05,640
implemented mud right on the spot in our

783
00:44:02,970 --> 00:44:07,740
devices and tests against a number of

784
00:44:05,640 --> 00:44:09,328
mud managers in generating themselves a

785
00:44:07,740 --> 00:44:11,750
mud file that was appropriate and tested

786
00:44:09,329 --> 00:44:16,349
their acts we can now test their access

787
00:44:11,750 --> 00:44:18,359
and then we had some additional

788
00:44:16,349 --> 00:44:20,010
integration going on in terms of filters

789
00:44:18,359 --> 00:44:23,730
for east-west versus north/south in

790
00:44:20,010 --> 00:44:26,190
terms of the verification code and yeah

791
00:44:23,730 --> 00:44:29,160
we got a lot of work going on so we know

792
00:44:26,190 --> 00:44:31,200
also we need to fail fast we have on

793
00:44:29,160 --> 00:44:33,180
some of our code and we have a lot of

794
00:44:31,200 --> 00:44:35,129
work to do on the mod reporter just a

795
00:44:33,180 --> 00:44:37,950
couple screenshots of some of the stuff

796
00:44:35,130 --> 00:44:39,569
that went on here this is the the thing

797
00:44:37,950 --> 00:44:42,750
that will generate mud files in terms of

798
00:44:39,569 --> 00:44:44,400
the verification and here you got here

799
00:44:42,750 --> 00:44:45,810
you have dark and our gentleman from

800
00:44:44,400 --> 00:44:47,339
c-calm and in terms of them bringing

801
00:44:45,810 --> 00:44:50,190
their hardware that implemented mud are

802
00:44:47,339 --> 00:44:51,750
there in DPP or directly using things

803
00:44:50,190 --> 00:44:53,700
and here's the long list of people who

804
00:44:51,750 --> 00:44:55,260
actually did a lot of work and thanks to

805
00:44:53,700 --> 00:44:57,859
a bunch of organizations who are

806
00:44:55,260 --> 00:44:59,840
supporting them thank you

807
00:44:57,860 --> 00:45:02,250
[Applause]

808
00:44:59,840 --> 00:45:07,130
and it looks like a lot of first-timers

809
00:45:02,250 --> 00:45:13,580
on this one so that's great yeah okay

810
00:45:07,130 --> 00:45:13,580
dhcpv6 PD and then coin RG after that

811
00:45:17,810 --> 00:45:25,529
okay so hi this was a spontaneous

812
00:45:22,260 --> 00:45:28,200
project as you may have known there's

813
00:45:25,530 --> 00:45:31,500
HPV 6 PD on the heck of the network and

814
00:45:28,200 --> 00:45:33,720
I were chatting with people and I put

815
00:45:31,500 --> 00:45:36,210
together code for a fair outing to

816
00:45:33,720 --> 00:45:38,730
capture those packets pick up the

817
00:45:36,210 --> 00:45:41,150
appropriate routes and install them that

818
00:45:38,730 --> 00:45:49,350
wasn't previously possible now it is and

819
00:45:41,150 --> 00:45:54,000
that's it and we have a new record for

820
00:45:49,350 --> 00:46:06,270
shortest presentation thanks ok so coin

821
00:45:54,000 --> 00:46:08,700
RG and map RG after that hi everybody

822
00:46:06,270 --> 00:46:10,230
I'm sorry didn't use the the format in

823
00:46:08,700 --> 00:46:15,540
Quebec we call that being a distinct

824
00:46:10,230 --> 00:46:18,030
society this is the coin RG p4 hackathon

825
00:46:15,540 --> 00:46:19,230
and this was our first one as you can

826
00:46:18,030 --> 00:46:21,930
see because we didn't know about the

827
00:46:19,230 --> 00:46:23,430
format who are we we're actually a

828
00:46:21,930 --> 00:46:26,549
proposed research group we're still

829
00:46:23,430 --> 00:46:28,560
waiting to be a real one but we want to

830
00:46:26,550 --> 00:46:31,190
look at everything that works that deals

831
00:46:28,560 --> 00:46:33,830
with computing and the network and

832
00:46:31,190 --> 00:46:38,010
investigating this whole continuum of

833
00:46:33,830 --> 00:46:40,319
putting computation from the data center

834
00:46:38,010 --> 00:46:41,850
all the way to the edge we want to look

835
00:46:40,320 --> 00:46:43,830
at architectures we want to look at

836
00:46:41,850 --> 00:46:45,900
protocols and want to look at real world

837
00:46:43,830 --> 00:46:47,670
use cases and this is the reason that

838
00:46:45,900 --> 00:46:49,260
we're having this hackathon because

839
00:46:47,670 --> 00:46:52,470
there's a bunch of people invented a

840
00:46:49,260 --> 00:46:54,300
language is called p4 which is currently

841
00:46:52,470 --> 00:46:57,120
being used to do some specific

842
00:46:54,300 --> 00:47:00,330
programming and switches and we wanted

843
00:46:57,120 --> 00:47:02,880
to look at this ID of this cloud 2 edge

844
00:47:00,330 --> 00:47:05,880
computing continuum and p4 we didn't

845
00:47:02,880 --> 00:47:08,280
have a specific project except our

846
00:47:05,880 --> 00:47:10,799
remote participant most of us were

847
00:47:08,280 --> 00:47:12,329
pretty much new users

848
00:47:10,799 --> 00:47:14,699
and because of that we have to really

849
00:47:12,329 --> 00:47:17,189
give a shout to the company Montreal

850
00:47:14,699 --> 00:47:19,259
company who sent us two engineers for

851
00:47:17,189 --> 00:47:22,348
two days to help us setting up our

852
00:47:19,259 --> 00:47:24,539
environments and developing the code

853
00:47:22,349 --> 00:47:27,959
that is actually at the end we ended up

854
00:47:24,539 --> 00:47:30,599
doing real work which is like yay so

855
00:47:27,959 --> 00:47:33,660
what we did and yes we me and PL we are

856
00:47:30,599 --> 00:47:36,630
gone but hey thank you guys we did the

857
00:47:33,660 --> 00:47:39,390
basic examples we had actually one very

858
00:47:36,630 --> 00:47:41,579
very proficient sadly remote participant

859
00:47:39,390 --> 00:47:43,259
who actually implemented and started

860
00:47:41,579 --> 00:47:49,259
implementing an ipv6

861
00:47:43,259 --> 00:47:52,140
v6 switch machine learning in NP 4 he

862
00:47:49,259 --> 00:47:54,329
checked his code in the in the github

863
00:47:52,140 --> 00:47:58,140
and it's related to a work that was done

864
00:47:54,329 --> 00:47:59,999
before in ipv4 we had actually we

865
00:47:58,140 --> 00:48:02,729
actually poached people from other

866
00:47:59,999 --> 00:48:04,589
tables that you joined us we had 12

867
00:48:02,729 --> 00:48:06,709
participants at the end so that was

868
00:48:04,589 --> 00:48:10,019
actually pretty surprising for us and

869
00:48:06,709 --> 00:48:11,910
the people who we poached included

870
00:48:10,019 --> 00:48:15,538
people who started looking at p4 to

871
00:48:11,910 --> 00:48:17,308
golang and this morning we did packet

872
00:48:15,539 --> 00:48:19,709
filtering and we gathered a ton of

873
00:48:17,309 --> 00:48:21,479
information and I'm always done and so

874
00:48:19,709 --> 00:48:24,118
our next steps we want to continue

875
00:48:21,479 --> 00:48:25,979
gathering projects we think that you

876
00:48:24,119 --> 00:48:28,349
know we have a good chance to become a

877
00:48:25,979 --> 00:48:30,359
real research group so we would like to

878
00:48:28,349 --> 00:48:32,160
have a coin interim and we want to have

879
00:48:30,359 --> 00:48:34,949
another a Katan in Singapore has really

880
00:48:32,160 --> 00:48:37,410
got the heck of this and we would like

881
00:48:34,949 --> 00:48:40,289
to really really thank the hackathon

882
00:48:37,410 --> 00:48:43,109
organizers and our helpers and or

883
00:48:40,289 --> 00:48:47,459
participants thank you very much

884
00:48:43,110 --> 00:48:47,459
[Applause]

885
00:48:48,950 --> 00:49:07,529
okay map RG now and hackathon

886
00:48:57,359 --> 00:49:10,078
measurements is next good afternoon

887
00:49:07,530 --> 00:49:12,599
everyone so the measurement analysis for

888
00:49:10,079 --> 00:49:13,950
protocols Research Group participate in

889
00:49:12,599 --> 00:49:16,859
our third hackathon this time and I'll

890
00:49:13,950 --> 00:49:19,649
tell you what we were up to the problem

891
00:49:16,859 --> 00:49:22,650
that we were attacking on at this

892
00:49:19,650 --> 00:49:24,420
meeting during this hackathon rather was

893
00:49:22,650 --> 00:49:27,900
to produce a reference implementation

894
00:49:24,420 --> 00:49:31,140
for doing IP address aggregation two

895
00:49:27,900 --> 00:49:34,650
applications of this are doing address

896
00:49:31,140 --> 00:49:36,720
space anonymization where we where you a

897
00:49:34,650 --> 00:49:39,329
granade say you're at before address

898
00:49:36,720 --> 00:49:41,339
2/24 what do you do with ipv6 another

899
00:49:39,329 --> 00:49:43,049
application of it is for instance to

900
00:49:41,339 --> 00:49:44,700
find homogeneous populations for

901
00:49:43,049 --> 00:49:46,770
instance for content delivery networks

902
00:49:44,700 --> 00:49:49,259
to do matchmaking between the users and

903
00:49:46,770 --> 00:49:50,940
the content the specific problem to

904
00:49:49,260 --> 00:49:53,400
solve was how do we take something like

905
00:49:50,940 --> 00:49:55,500
a Patricia tree if you use Python or

906
00:49:53,400 --> 00:49:58,619
Perl you know this as net patricia or in

907
00:49:55,500 --> 00:49:59,970
python pi radix or patricia how do you

908
00:49:58,619 --> 00:50:01,589
use a data structure like that to

909
00:49:59,970 --> 00:50:03,390
represent all the activity in the entire

910
00:50:01,589 --> 00:50:04,828
internet it's too big when you have tens

911
00:50:03,390 --> 00:50:09,328
of billions or hundreds of billions of

912
00:50:04,829 --> 00:50:11,520
v6 addresses so so the the to solve it

913
00:50:09,329 --> 00:50:13,650
we decided to take an existing code base

914
00:50:11,520 --> 00:50:15,690
in see the agree tree which is an

915
00:50:13,650 --> 00:50:17,369
implementation of patricia tree and make

916
00:50:15,690 --> 00:50:19,349
portions of the tree immutable and i'll

917
00:50:17,369 --> 00:50:20,579
show you why that solves the problem but

918
00:50:19,349 --> 00:50:22,049
basically it allows you to solve the

919
00:50:20,579 --> 00:50:23,520
problem by partitioning it you can

920
00:50:22,049 --> 00:50:25,740
partition the set of addresses

921
00:50:23,520 --> 00:50:27,509
arbitrarily into small sets you can put

922
00:50:25,740 --> 00:50:28,859
them on a cluster and you produce an

923
00:50:27,510 --> 00:50:30,720
intermediate result where you can

924
00:50:28,859 --> 00:50:32,339
capture the state of the tree as you're

925
00:50:30,720 --> 00:50:36,779
performing some operation on it and then

926
00:50:32,339 --> 00:50:38,069
do it iteratively so so well what were

927
00:50:36,780 --> 00:50:39,930
the new ideas and what did the team

928
00:50:38,069 --> 00:50:41,609
agree on well the team it turns out

929
00:50:39,930 --> 00:50:42,930
today was just me so we agreed on

930
00:50:41,609 --> 00:50:45,299
everything and we agreed to use the

931
00:50:42,930 --> 00:50:47,069
agree tree and we agreed that this this

932
00:50:45,299 --> 00:50:48,599
partition this partitioning problem

933
00:50:47,069 --> 00:50:50,759
could be solved by making portions of

934
00:50:48,599 --> 00:50:53,609
the tree immutable so that's the new the

935
00:50:50,760 --> 00:50:55,650
novel design idea in a patricia tree the

936
00:50:53,609 --> 00:50:57,089
github upload is pending and I'll show

937
00:50:55,650 --> 00:50:57,450
I'll just show you exactly what it was

938
00:50:57,089 --> 00:50:58,950
because

939
00:50:57,450 --> 00:51:02,040
we managed to get it we managed to get

940
00:50:58,950 --> 00:51:03,509
it done in just a day so what we got

941
00:51:02,040 --> 00:51:06,690
done so he's imagine you have a set of

942
00:51:03,510 --> 00:51:08,760
active addresses here's 10 high 56 / 64

943
00:51:06,690 --> 00:51:10,200
s and you can punch them up into one of

944
00:51:08,760 --> 00:51:12,119
these trees that are commonly used it's

945
00:51:10,200 --> 00:51:13,740
kind of like a routing table so we put

946
00:51:12,119 --> 00:51:15,690
the tree we put him in the tree the leaf

947
00:51:13,740 --> 00:51:18,149
nodes are all those active addresses and

948
00:51:15,690 --> 00:51:20,070
then we run some operation which I call

949
00:51:18,150 --> 00:51:21,630
Agora 5 which aggregates them in some

950
00:51:20,070 --> 00:51:23,339
useful way based on your selection

951
00:51:21,630 --> 00:51:25,980
criteria like let's say I only want

952
00:51:23,339 --> 00:51:28,920
aggregates that represent at least 32 of

953
00:51:25,980 --> 00:51:30,119
those active users well the problem is

954
00:51:28,920 --> 00:51:31,859
if you run it the old way it'll

955
00:51:30,119 --> 00:51:33,060
aggregate up the whole tree because

956
00:51:31,859 --> 00:51:35,940
there was nothing there so that the

957
00:51:33,060 --> 00:51:38,130
simple idea is I just bound the tree or

958
00:51:35,940 --> 00:51:41,070
I put in immutable entries and and

959
00:51:38,130 --> 00:51:42,930
basically make a horizon or a border on

960
00:51:41,070 --> 00:51:45,540
the tree here here measured in red and

961
00:51:42,930 --> 00:51:48,540
so when I run an operation like an like

962
00:51:45,540 --> 00:51:51,060
a an aggregation its bounded by that red

963
00:51:48,540 --> 00:51:53,070
portion and we get a result an

964
00:51:51,060 --> 00:51:54,750
intermediate result that I can then do

965
00:51:53,070 --> 00:51:56,670
it early like safe on a MapReduce

966
00:51:54,750 --> 00:51:58,710
cluster with hundreds of machines and

967
00:51:56,670 --> 00:52:00,630
then so to give you an example why this

968
00:51:58,710 --> 00:52:02,369
is important you probably think in night

969
00:52:00,630 --> 00:52:04,470
before you know what a slash 24 is in

970
00:52:02,369 --> 00:52:07,200
ipv6 even with this small data set of

971
00:52:04,470 --> 00:52:09,029
180,000 active slash 64's this shows

972
00:52:07,200 --> 00:52:11,910
that about half of them reached this

973
00:52:09,030 --> 00:52:13,440
sufficient aggregation at slash 56 but

974
00:52:11,910 --> 00:52:15,810
another half of them needed to be

975
00:52:13,440 --> 00:52:17,310
aggregated slash 40 and today in the v6

976
00:52:15,810 --> 00:52:18,328
internet a lot of people use slash 48

977
00:52:17,310 --> 00:52:19,890
which is right in the middle and a

978
00:52:18,329 --> 00:52:21,900
horrible compromise because you could

979
00:52:19,890 --> 00:52:25,680
have a better answer or you're not not

980
00:52:21,900 --> 00:52:28,440
aggregating enough so what we learned is

981
00:52:25,680 --> 00:52:29,759
is that this is a can of best practice

982
00:52:28,440 --> 00:52:32,190
and will carry it to the working group

983
00:52:29,760 --> 00:52:33,780
and I made a couple design other design

984
00:52:32,190 --> 00:52:36,740
decisions again that were you know man

985
00:52:33,780 --> 00:52:39,030
unanimous so with just me I've based on

986
00:52:36,740 --> 00:52:41,729
publicly available open source code from

987
00:52:39,030 --> 00:52:44,369
some colleagues including Condor Ocho

988
00:52:41,730 --> 00:52:46,589
and we're gonna meet on Friday and I'll

989
00:52:44,369 --> 00:52:48,599
go over some more of the results so join

990
00:52:46,589 --> 00:52:50,840
us on Friday at mapper G if you can in

991
00:52:48,599 --> 00:52:54,019
the morning Thanks

992
00:52:50,840 --> 00:52:54,019
[Applause]

993
00:52:59,960 --> 00:53:12,720
okay measurements just just the one oh

994
00:53:08,340 --> 00:53:17,460
 okay got it and use the left and

995
00:53:12,720 --> 00:53:21,660
right buttons left and right okay so hi

996
00:53:17,460 --> 00:53:24,030
I'm I'm al Morton and I let a champion

997
00:53:21,660 --> 00:53:28,410
to project today on measurement using

998
00:53:24,030 --> 00:53:30,900
UDP to measure IP link capacity and we

999
00:53:28,410 --> 00:53:32,879
had Lynch Avot own remote and for

1000
00:53:30,900 --> 00:53:35,400
first-timers who all joined the project

1001
00:53:32,880 --> 00:53:39,630
because we put the asterisk next to the

1002
00:53:35,400 --> 00:53:42,420
name yes you're welcome

1003
00:53:39,630 --> 00:53:45,660
alright so here's the plan we have this

1004
00:53:42,420 --> 00:53:47,790
metric and method of measurement we have

1005
00:53:45,660 --> 00:53:50,540
the draft up ready for a five-minute

1006
00:53:47,790 --> 00:53:53,610
talk in IP p.m. Wednesday I think it is

1007
00:53:50,540 --> 00:53:55,890
our goal here was to gain UDP based

1008
00:53:53,610 --> 00:53:58,710
measurement experience with a get busy

1009
00:53:55,890 --> 00:54:00,750
one gigabit access at ietf everybody

1010
00:53:58,710 --> 00:54:02,970
knows how busy that can be and an

1011
00:54:00,750 --> 00:54:05,520
additional access types were made

1012
00:54:02,970 --> 00:54:08,399
possible by our volunteers that joined

1013
00:54:05,520 --> 00:54:10,200
and I just want to mention that you know

1014
00:54:08,400 --> 00:54:12,330
all the names here Ryan Hoffman from

1015
00:54:10,200 --> 00:54:14,939
Telus and Ryan's gonna speak a little

1016
00:54:12,330 --> 00:54:19,680
bit about his results and Timothy Karlin

1017
00:54:14,940 --> 00:54:21,930
Marian Dylan and Kyle Kyle wet all from

1018
00:54:19,680 --> 00:54:26,160
UNH at the interoperability lab thanks

1019
00:54:21,930 --> 00:54:29,310
so much for joining this ok so here we

1020
00:54:26,160 --> 00:54:30,899
go so we ran the tests we iterated some

1021
00:54:29,310 --> 00:54:32,580
measurement parameters we're gonna

1022
00:54:30,900 --> 00:54:34,940
revise the tool based on what we learned

1023
00:54:32,580 --> 00:54:36,750
and compared with a commercial tool

1024
00:54:34,940 --> 00:54:40,740
everybody knows what that commercial

1025
00:54:36,750 --> 00:54:43,920
tool is its okhla s-- so we we ran from

1026
00:54:40,740 --> 00:54:48,120
here side by side for the tests that I

1027
00:54:43,920 --> 00:54:50,070
ran to the UDP server in Middletown New

1028
00:54:48,120 --> 00:54:53,509
Jersey both servers and clients on the

1029
00:54:50,070 --> 00:54:56,250
same machines and here's a quick

1030
00:54:53,510 --> 00:54:59,100
representatives set of results with the

1031
00:54:56,250 --> 00:55:01,020
UDP speed test you know we're seeing the

1032
00:54:59,100 --> 00:55:02,819
effects of the traffic here we're only

1033
00:55:01,020 --> 00:55:05,309
getting into the 800 I mean it's a it's

1034
00:55:02,820 --> 00:55:09,540
a gigabit per second access

1035
00:55:05,309 --> 00:55:11,880
we're getting an 800 650 Okuma measuring

1036
00:55:09,540 --> 00:55:14,369
a lot lower we go back and measured with

1037
00:55:11,880 --> 00:55:17,490
you DPS T you now we got a lot closer to

1038
00:55:14,369 --> 00:55:18,900
the limit of one gigabit per second and

1039
00:55:17,490 --> 00:55:21,660
then in the afternoon on Saturday

1040
00:55:18,900 --> 00:55:23,250
everybody was pounding away here and we

1041
00:55:21,660 --> 00:55:25,950
really need to learn the signature of

1042
00:55:23,250 --> 00:55:27,270
what that that is and my time went away

1043
00:55:25,950 --> 00:55:30,270
what the hell oh there it is

1044
00:55:27,270 --> 00:55:32,630
oh my gosh it's only 46 seconds left go

1045
00:55:30,270 --> 00:55:32,630
go

1046
00:55:33,530 --> 00:55:39,960
so I wanted to include non congested

1047
00:55:36,900 --> 00:55:42,540
links so set up a connection between our

1048
00:55:39,960 --> 00:55:45,210
Telus lab at Hamilton Alberta with owls

1049
00:55:42,540 --> 00:55:47,819
New Jersey lab to perform the same kind

1050
00:55:45,210 --> 00:55:49,589
of test but in bulk so I'm using two

1051
00:55:47,819 --> 00:55:51,000
servers here in New Jersey just to be

1052
00:55:49,589 --> 00:55:53,308
able to get the bulk of tests that we

1053
00:55:51,000 --> 00:55:56,190
needed unfortunately the server in New

1054
00:55:53,309 --> 00:55:57,839
Jersey only had a GUI so this shows the

1055
00:55:56,190 --> 00:56:00,690
comparative results a consistent near

1056
00:55:57,839 --> 00:56:02,819
gig speed result with the UDP speed test

1057
00:56:00,690 --> 00:56:04,290
as opposed to the TCP test which was

1058
00:56:02,819 --> 00:56:05,880
highly variable really important

1059
00:56:04,290 --> 00:56:07,319
information for us because it's

1060
00:56:05,880 --> 00:56:09,480
difficult for a technician that's going

1061
00:56:07,319 --> 00:56:11,040
into a home selling a service and using

1062
00:56:09,480 --> 00:56:12,660
that test to reveal to the customer what

1063
00:56:11,040 --> 00:56:17,099
they're achievable speed is and it being

1064
00:56:12,660 --> 00:56:22,640
subpar the UNH folks walked in this

1065
00:56:17,099 --> 00:56:26,280
morning got this test running and and

1066
00:56:22,640 --> 00:56:28,740
and resolved a problem with their router

1067
00:56:26,280 --> 00:56:31,920
screening in the firewall on UDP traffic

1068
00:56:28,740 --> 00:56:34,319
and and made it work properly right

1069
00:56:31,920 --> 00:56:37,619
after that it was a great effort in just

1070
00:56:34,319 --> 00:56:38,880
a few hours here this morning and we

1071
00:56:37,619 --> 00:56:42,059
learned a lot of stuff for potential

1072
00:56:38,880 --> 00:56:43,049
development and and and you know you can

1073
00:56:42,059 --> 00:56:45,270
learn a lot from testing different

1074
00:56:43,049 --> 00:56:47,040
access types that's for sure thanks very

1075
00:56:45,270 --> 00:56:50,230
much

1076
00:56:47,040 --> 00:56:52,640
[Applause]

1077
00:56:50,230 --> 00:56:57,369
okay so I think that's all we have

1078
00:56:52,640 --> 00:56:57,368
downloaded let me go grab the new ones

1079
00:57:10,550 --> 00:57:22,730
yeah okay which yeah let me see

1080
00:57:19,510 --> 00:57:26,390
twenty-nine did we do DNS SD discovery

1081
00:57:22,730 --> 00:57:30,640
proxy what yeah

1082
00:57:26,390 --> 00:57:30,640
so DN SSD discovery proxy

1083
00:57:45,970 --> 00:57:53,000
hello I'll make this really fast so

1084
00:57:50,480 --> 00:57:55,130
we're here working on making discovery

1085
00:57:53,000 --> 00:57:59,030
work with less use of multicast because

1086
00:57:55,130 --> 00:58:00,829
multicast we're here making discovery

1087
00:57:59,030 --> 00:58:03,319
work with less reliance on multicast

1088
00:58:00,829 --> 00:58:05,829
because multicast is slow its unreliable

1089
00:58:03,319 --> 00:58:09,380
its wasteful of shared wireless spectrum

1090
00:58:05,829 --> 00:58:11,540
there's a list here of the drafts the

1091
00:58:09,380 --> 00:58:14,839
discovery proxy is based on the hybrid

1092
00:58:11,540 --> 00:58:17,599
draft which uses DNS push notifications

1093
00:58:14,839 --> 00:58:19,849
which in turn builds on DNS stateful

1094
00:58:17,599 --> 00:58:23,089
operations we've been building open code

1095
00:58:19,849 --> 00:58:26,750
for open wrt running on these little GL

1096
00:58:23,089 --> 00:58:29,990
inet AR 750s little pocket gigabit

1097
00:58:26,750 --> 00:58:33,500
router I was here working with Ted and

1098
00:58:29,990 --> 00:58:35,629
Barbara joined us thank you Barbara

1099
00:58:33,500 --> 00:58:38,630
we did a bunch of work with integration

1100
00:58:35,630 --> 00:58:40,400
open wrt package management dealing with

1101
00:58:38,630 --> 00:58:42,740
asynchronous change notifications with

1102
00:58:40,400 --> 00:58:45,130
you bus to really polish this code this

1103
00:58:42,740 --> 00:58:48,919
is all available on the ITF hackathon

1104
00:58:45,130 --> 00:58:50,930
github and we now have pre-built

1105
00:58:48,920 --> 00:58:53,240
packages you can download it yourself

1106
00:58:50,930 --> 00:58:55,220
and run this and in about five minutes

1107
00:58:53,240 --> 00:58:57,859
have your own discovery proxy running at

1108
00:58:55,220 --> 00:59:02,848
home thank you

1109
00:58:57,860 --> 00:59:02,849
[Applause]

1110
00:59:13,150 --> 00:59:21,580
okay WebRTC and then it looks like PBT

1111
00:59:18,830 --> 00:59:21,580
is after that

1112
00:59:28,859 --> 00:59:30,920
you

1113
00:59:46,299 --> 00:59:53,299
alright hey my name is Alex Anwar and

1114
00:59:51,619 --> 00:59:56,239
it's a very difficult name to say so

1115
00:59:53,299 --> 00:59:58,788
people call me dr. Alex I will represent

1116
00:59:56,239 --> 01:00:01,219
the team here about web out is here

1117
00:59:58,789 --> 01:00:03,349
about this is a technology to bring

1118
01:00:01,219 --> 01:00:06,589
real-time communication audio video and

1119
01:00:03,349 --> 01:00:09,469
data to the web and it has a ITF pendant

1120
01:00:06,589 --> 01:00:12,200
which is RTC web for all the protocols

1121
01:00:09,469 --> 01:00:15,499
the encryption the security the codecs

1122
01:00:12,200 --> 01:00:17,660
and so on the last missing piece is

1123
01:00:15,499 --> 01:00:19,879
called simulcast which is the capacity

1124
01:00:17,660 --> 01:00:22,788
to send a different resolution of audio

1125
01:00:19,880 --> 01:00:27,799
and video simultaneously over the wire

1126
01:00:22,789 --> 01:00:29,599
to finish this back at w3c so some of us

1127
01:00:27,799 --> 01:00:32,650
came around here today to try to push

1128
01:00:29,599 --> 01:00:34,940
that so that we can finally have a

1129
01:00:32,650 --> 01:00:37,279
finalized spec and people can implement

1130
01:00:34,940 --> 01:00:41,210
product on top of them we had two

1131
01:00:37,279 --> 01:00:45,410
browsers represented today Firefox and

1132
01:00:41,210 --> 01:00:48,410
Chrome the two others were excused for

1133
01:00:45,410 --> 01:00:50,210
visa reason and other things we had free

1134
01:00:48,410 --> 01:00:52,219
media server represented to give

1135
01:00:50,210 --> 01:00:54,559
feedback on implementation which is also

1136
01:00:52,219 --> 01:00:57,019
very important and finally free

1137
01:00:54,559 --> 01:00:59,680
application vendors that were using both

1138
01:00:57,019 --> 01:01:02,359
browsers and media servers to help

1139
01:00:59,680 --> 01:01:07,729
communicate about the needed and missing

1140
01:01:02,359 --> 01:01:09,920
functionalities and different bugs we

1141
01:01:07,729 --> 01:01:13,999
had different people going at it at a

1142
01:01:09,920 --> 01:01:15,859
different angle some of us just took

1143
01:01:13,999 --> 01:01:18,140
some bugs and went through it but

1144
01:01:15,859 --> 01:01:20,019
globally it was a very efficient session

1145
01:01:18,140 --> 01:01:23,719
we went through ten different bugs in

1146
01:01:20,019 --> 01:01:25,640
different browsers and we also helped

1147
01:01:23,719 --> 01:01:27,799
different vendors implement similar cast

1148
01:01:25,640 --> 01:01:29,900
in their media server or at least made

1149
01:01:27,799 --> 01:01:33,440
progress there and provide feedback to

1150
01:01:29,900 --> 01:01:35,329
to the missing pieces so all in all very

1151
01:01:33,440 --> 01:01:36,829
efficient session and we're very happy

1152
01:01:35,329 --> 01:01:38,960
and we made a lot of progress in two

1153
01:01:36,829 --> 01:01:43,099
days that would otherwise not have been

1154
01:01:38,960 --> 01:01:45,019
possible without the opportunity to have

1155
01:01:43,099 --> 01:01:47,239
a face-to-face the agathon gave us so

1156
01:01:45,019 --> 01:01:49,508
thanks to the sponsor and things too

1157
01:01:47,239 --> 01:01:49,509
charged

1158
01:01:50,140 --> 01:01:54,690
[Applause]

1159
01:02:03,849 --> 01:02:10,089
okay

1160
01:02:06,020 --> 01:02:10,089
the PBT

1161
01:02:24,249 --> 01:02:35,718
left and right my name is Lucy yeah

1162
01:02:32,329 --> 01:02:37,669
today I will introduce my project

1163
01:02:35,719 --> 01:02:41,390
poster card Bay Street Elementary for

1164
01:02:37,669 --> 01:02:44,719
inside of flow information elementary at

1165
01:02:41,390 --> 01:02:50,209
first I will introduce what is the post

1166
01:02:44,719 --> 01:02:53,150
card base at elementary as we know there

1167
01:02:50,209 --> 01:02:59,178
are already there have already been

1168
01:02:53,150 --> 01:03:04,699
defined for data types in ITF draft IOM

1169
01:02:59,179 --> 01:03:09,410
data including to type treat reason to

1170
01:03:04,699 --> 01:03:14,539
treating type when beauty and the luster

1171
01:03:09,410 --> 01:03:20,169
is a h2h type now we will define another

1172
01:03:14,539 --> 01:03:23,839
new one treating type called we call it

1173
01:03:20,169 --> 01:03:26,660
post a card base at elementary so what's

1174
01:03:23,839 --> 01:03:32,509
the different between the post card

1175
01:03:26,660 --> 01:03:35,749
based elementary and I am tracing type

1176
01:03:32,509 --> 01:03:38,659
at first we separates that elementary

1177
01:03:35,749 --> 01:03:45,109
instruct instruction header and the

1178
01:03:38,659 --> 01:03:49,689
metadata so like the like this picture

1179
01:03:45,109 --> 01:03:54,380
show the red one is the e structure and

1180
01:03:49,689 --> 01:03:58,549
the yellow one is a metadata postcard

1181
01:03:54,380 --> 01:04:03,199
will ship the metadata will she out hope

1182
01:03:58,549 --> 01:04:08,229
I hope at each node so the host as a

1183
01:04:03,199 --> 01:04:13,519
collector will get the postcard metadata

1184
01:04:08,229 --> 01:04:18,319
why then I will try why we introduced

1185
01:04:13,519 --> 01:04:23,479
this new type because we list three

1186
01:04:18,319 --> 01:04:27,439
reasons the first way is detect use this

1187
01:04:23,479 --> 01:04:32,419
type treason type we can detect the

1188
01:04:27,439 --> 01:04:36,109
location of the packet loss and and then

1189
01:04:32,419 --> 01:04:41,839
we can solve the

1190
01:04:36,110 --> 01:04:48,700
encapsulate encapsulation lens with the

1191
01:04:41,840 --> 01:04:48,700
fixed packet header sorry

1192
01:04:49,970 --> 01:04:56,899
and the last one is a different accused

1193
01:04:53,030 --> 01:05:06,890
priority from for the metadata from user

1194
01:04:56,900 --> 01:05:09,800
traffic and then and then the I feet

1195
01:05:06,890 --> 01:05:16,640
header definition at show is this

1196
01:05:09,800 --> 01:05:20,420
diagram aligned for octet island there

1197
01:05:16,640 --> 01:05:25,690
are a little different from the om type

1198
01:05:20,420 --> 01:05:35,170
I am header there is no lens bit and

1199
01:05:25,690 --> 01:05:35,170
there is no matter data okay

1200
01:05:37,720 --> 01:05:47,359
this page show this project in hexa at

1201
01:05:42,260 --> 01:05:53,870
first there are network domain include

1202
01:05:47,360 --> 01:05:58,610
for Reuters and a tester will send to

1203
01:05:53,870 --> 01:06:04,130
test of flows and and also receive this

1204
01:05:58,610 --> 01:06:08,810
to test of loss e IG v6 transport as the

1205
01:06:04,130 --> 01:06:13,250
transport protocol the Rooter for as the

1206
01:06:08,810 --> 01:06:20,450
inquest node to encapsulate the I feet

1207
01:06:13,250 --> 01:06:24,740
header and the Luther three as as a

1208
01:06:20,450 --> 01:06:28,939
quest node to Inc they capture list as I

1209
01:06:24,740 --> 01:06:32,839
feet header and Rooter six and the root

1210
01:06:28,940 --> 01:06:35,600
of 5 has the transit knows the yellow

1211
01:06:32,840 --> 01:06:41,140
yellow one is a matter data is collected

1212
01:06:35,600 --> 01:06:46,299
to the collector the collector framework

1213
01:06:41,140 --> 01:06:46,299
is circled by the - lon

1214
01:06:51,440 --> 01:07:00,740
we built the collector framework based

1215
01:06:55,800 --> 01:07:04,020
on the open source open source project

1216
01:07:00,740 --> 01:07:08,669
for example the Kafka as messy

1217
01:07:04,020 --> 01:07:13,820
distributes a message queues and the

1218
01:07:08,670 --> 01:07:18,510
readers as a memory DB and then the

1219
01:07:13,820 --> 01:07:25,740
grandfather as the GUI so we collect all

1220
01:07:18,510 --> 01:07:30,300
the metadata and and program to show the

1221
01:07:25,740 --> 01:07:34,250
following three case at first is a delay

1222
01:07:30,300 --> 01:07:40,260
delay monitor for each node and link and

1223
01:07:34,250 --> 01:07:43,740
into end we can see from this black pen

1224
01:07:40,260 --> 01:07:51,390
oh yeah on the right of the black pen oh

1225
01:07:43,740 --> 01:07:55,529
and kiss kiss - is a show us the packet

1226
01:07:51,390 --> 01:08:01,710
lost monitor just the file Peck his loss

1227
01:07:55,530 --> 01:08:06,680
and the last case is a path tracing in

1228
01:08:01,710 --> 01:08:09,560
sir is the left side yeah that's all

1229
01:08:06,680 --> 01:08:13,210
thank you

1230
01:08:09,560 --> 01:08:13,210
[Applause]

1231
01:08:30,069 --> 01:08:37,279
there's do that we have the floors the

1232
01:08:35,330 --> 01:08:41,750
floor is DNS we're ready for that one

1233
01:08:37,279 --> 01:08:43,929
and then it looks like l4s will be after

1234
01:08:41,750 --> 01:08:43,930
that

1235
01:08:53,710 --> 01:09:08,130
thank you use the left and right buttons

1236
01:08:56,850 --> 01:09:11,350
yep okay stand like this keep it tight

1237
01:09:08,130 --> 01:09:12,069
the Floridian so the floor is Dina

1238
01:09:11,350 --> 01:09:14,170
steams

1239
01:09:12,069 --> 01:09:16,809
so the the Dina's table was quite

1240
01:09:14,170 --> 01:09:19,450
eclectic group of people it's like the

1241
01:09:16,810 --> 01:09:21,940
the DNS protocol probably so we did

1242
01:09:19,450 --> 01:09:23,349
something about Dina's privacy dinner

1243
01:09:21,939 --> 01:09:26,080
support for specific networks

1244
01:09:23,350 --> 01:09:31,570
provisioning and miscellaneous stuff the

1245
01:09:26,080 --> 01:09:35,109
catch-all so to Dina's privacy work we

1246
01:09:31,569 --> 01:09:37,479
worked on was zone transfers of TLS sort

1247
01:09:35,109 --> 01:09:41,469
and so you want to protect your zone

1248
01:09:37,479 --> 01:09:44,889
it's encrypted etc salt is the push

1249
01:09:41,470 --> 01:09:49,060
model certain kind of subscription model

1250
01:09:44,890 --> 01:09:51,400
I'm sorry yes a subscription port no

1251
01:09:49,060 --> 01:09:55,630
proxy plugin for any web server by

1252
01:09:51,399 --> 01:09:58,900
pitter it's far CGI plug-in interface

1253
01:09:55,630 --> 01:10:01,840
and means the preparations for dot

1254
01:09:58,900 --> 01:10:04,509
Sandow invite so there's a lot been

1255
01:10:01,840 --> 01:10:08,530
discussions on Dow Indian s community

1256
01:10:04,510 --> 01:10:11,230
and about beside it and we think that

1257
01:10:08,530 --> 01:10:13,000
choice for end-users and deployment are

1258
01:10:11,230 --> 01:10:16,269
important so I think there's a good work

1259
01:10:13,000 --> 01:10:19,960
that we include this dough support in

1260
01:10:16,270 --> 01:10:23,050
different pieces of software good the

1261
01:10:19,960 --> 01:10:24,850
DNA support for specific network so DNS

1262
01:10:23,050 --> 01:10:27,280
is kind of the Swiss Army of the

1263
01:10:24,850 --> 01:10:30,220
Internet of course I'm working dinner so

1264
01:10:27,280 --> 01:10:34,679
I'm I'm have some specific view on this

1265
01:10:30,220 --> 01:10:36,910
but so for IDL and P presented already

1266
01:10:34,680 --> 01:10:41,680
there were some collaboration between

1267
01:10:36,910 --> 01:10:44,200
Stephan and the ILP group to extend part

1268
01:10:41,680 --> 01:10:48,280
of the implementation of DNS to work

1269
01:10:44,200 --> 01:10:50,470
with an identify locator split and in

1270
01:10:48,280 --> 01:10:52,960
some other situations in ipv6 only

1271
01:10:50,470 --> 01:10:55,720
setting but you had you asked for a quad

1272
01:10:52,960 --> 01:10:58,330
a there's only a a records it has to be

1273
01:10:55,720 --> 01:11:00,430
some middle box that has to do some

1274
01:10:58,330 --> 01:11:05,170
translation so does the DNS prefix this

1275
01:11:00,430 --> 01:11:06,820
coffee by mark implemented in bind again

1276
01:11:05,170 --> 01:11:09,970
DNS as

1277
01:11:06,820 --> 01:11:11,740
visioning tool here so for if you want

1278
01:11:09,970 --> 01:11:15,060
to do something with any cost and you

1279
01:11:11,740 --> 01:11:19,030
don't want to create and plus my gun for

1280
01:11:15,060 --> 01:11:21,220
DDoS attacks you want to have an any

1281
01:11:19,030 --> 01:11:23,519
cost open resolver with something like a

1282
01:11:21,220 --> 01:11:26,770
DNS server cookie so you protect your

1283
01:11:23,520 --> 01:11:30,790
open REE cursor for DDoS attacks with

1284
01:11:26,770 --> 01:11:33,730
spoof addresses this is implemented in

1285
01:11:30,790 --> 01:11:37,060
bind and inbound and is D another

1286
01:11:33,730 --> 01:11:39,459
provisioning thing is temporary records

1287
01:11:37,060 --> 01:11:41,980
in the DNS sometimes like the let's

1288
01:11:39,460 --> 01:11:43,810
encrypt ACM of the Acme protocol you

1289
01:11:41,980 --> 01:11:46,419
want to publish some information for a

1290
01:11:43,810 --> 01:11:49,810
short time in your dinner zone so you're

1291
01:11:46,420 --> 01:11:51,370
the owner of a domain name for gets your

1292
01:11:49,810 --> 01:11:54,130
certificate you have the timeout

1293
01:11:51,370 --> 01:11:56,769
resource records after that the

1294
01:11:54,130 --> 01:12:01,060
information is removed from your zone

1295
01:11:56,770 --> 01:12:04,750
another important thing is the HCP s SVC

1296
01:12:01,060 --> 01:12:09,370
this kind of a service records and it

1297
01:12:04,750 --> 01:12:11,260
has been a long-standing well problem to

1298
01:12:09,370 --> 01:12:13,150
solve actually so how do you provision

1299
01:12:11,260 --> 01:12:16,060
your web surface and how do you address

1300
01:12:13,150 --> 01:12:18,070
them in the DNS has been a number of

1301
01:12:16,060 --> 01:12:21,310
solutions over the years by the DS

1302
01:12:18,070 --> 01:12:24,040
community by the HCP community and this

1303
01:12:21,310 --> 01:12:26,200
proposal seems to be received this wrist

1304
01:12:24,040 --> 01:12:28,870
proposes receives positive feedback from

1305
01:12:26,200 --> 01:12:31,420
both working groups so it's a lot of

1306
01:12:28,870 --> 01:12:33,250
interest here and this entry's sorry

1307
01:12:31,420 --> 01:12:36,820
there's an implementation in Burma in

1308
01:12:33,250 --> 01:12:39,580
unbound the miscellaneous gets all we

1309
01:12:36,820 --> 01:12:42,280
did some work on llamo format in DNS

1310
01:12:39,580 --> 01:12:44,559
packets the original RFC is actually

1311
01:12:42,280 --> 01:12:46,840
about Jason but the original author of

1312
01:12:44,560 --> 01:12:49,450
the receive site as well jemelle is fine

1313
01:12:46,840 --> 01:12:52,030
it's readable and it's already in use in

1314
01:12:49,450 --> 01:12:55,179
the proof of concept of root server

1315
01:12:52,030 --> 01:12:58,290
measurements framework that's also

1316
01:12:55,180 --> 01:13:00,520
wrapping up we did a lot of Interop

1317
01:12:58,290 --> 01:13:04,420
between ourselves between different

1318
01:13:00,520 --> 01:13:07,420
groups the ILP group the web community I

1319
01:13:04,420 --> 01:13:10,350
think we have done some good work that's

1320
01:13:07,420 --> 01:13:13,539
all and these are yeah

1321
01:13:10,350 --> 01:13:13,539
[Applause]

1322
01:13:24,660 --> 01:13:29,280
okay l4 s and then wishy

1323
01:13:39,849 --> 01:13:45,429
who's the left and right thank you and I

1324
01:13:43,599 --> 01:13:47,079
want to thank every the organizers of

1325
01:13:45,429 --> 01:13:48,369
the whole thing as well thank you very

1326
01:13:47,079 --> 01:13:51,670
much

1327
01:13:48,369 --> 01:13:53,019
all right low latency low loss actually

1328
01:13:51,670 --> 01:13:56,639
it's a low latency low loss scalable

1329
01:13:53,020 --> 01:13:56,639
throughput got the name wrong

1330
01:13:56,820 --> 01:14:08,799
this is l4 s going on in the transport

1331
01:14:00,670 --> 01:14:09,670
area and tcp MN TSP WG right a bit of

1332
01:14:08,800 --> 01:14:10,329
background here but I'm looking with

1333
01:14:09,670 --> 01:14:14,260
dwell on it

1334
01:14:10,329 --> 01:14:17,849
there's the where our code is all linked

1335
01:14:14,260 --> 01:14:21,699
from and the specs we're working to I

1336
01:14:17,849 --> 01:14:24,699
have got a number of people we actually

1337
01:14:21,699 --> 01:14:26,500
expected to have more nearly all remote

1338
01:14:24,699 --> 01:14:31,629
and hardly anyone here but it worked out

1339
01:14:26,500 --> 01:14:34,829
the other way around something like

1340
01:14:31,630 --> 01:14:39,070
seven newcomers which was pretty good

1341
01:14:34,829 --> 01:14:44,619
and quite a few projects we didn't

1342
01:14:39,070 --> 01:14:46,239
expect I'll jump to the next slide and

1343
01:14:44,619 --> 01:14:47,860
then I'll come back we did plan

1344
01:14:46,239 --> 01:14:50,138
something something that didn't happen

1345
01:14:47,860 --> 01:14:53,710
with a bunch of people remote that were

1346
01:14:50,139 --> 01:14:59,170
all new just it became impractical it's

1347
01:14:53,710 --> 01:15:04,270
time in India basically and didn't quite

1348
01:14:59,170 --> 01:15:09,610
get to finishing but going back quite a

1349
01:15:04,270 --> 01:15:12,760
few projects to brought a testbed with

1350
01:15:09,610 --> 01:15:15,030
us God they all set up found there were

1351
01:15:12,760 --> 01:15:17,469
problems with like this Linux kernel

1352
01:15:15,030 --> 01:15:20,199
screwing up what we had the intended to

1353
01:15:17,469 --> 01:15:22,110
do etc had to rebuild things blah blah

1354
01:15:20,199 --> 01:15:25,178
blah

1355
01:15:22,110 --> 01:15:30,690
Richard got on well with Michael tooks

1356
01:15:25,179 --> 01:15:34,119
and implementing accurate ecn in FreeBSD

1357
01:15:30,690 --> 01:15:40,178
with Michael tooks and helping there was

1358
01:15:34,119 --> 01:15:45,820
also I suppose the highlight really was

1359
01:15:40,179 --> 01:15:50,650
the l4s testbed we had the SC people

1360
01:15:45,820 --> 01:15:52,210
come over and give us their Flint work

1361
01:15:50,650 --> 01:15:53,670
well they wanted us to evaluate on it

1362
01:15:52,210 --> 01:15:55,920
and we started working together

1363
01:15:53,670 --> 01:16:01,230
that which will probably continue during

1364
01:15:55,920 --> 01:16:04,620
the week that's right and I'll now come

1365
01:16:01,230 --> 01:16:07,549
on to that we started the first scenario

1366
01:16:04,620 --> 01:16:13,080
and we've got the others to do

1367
01:16:07,550 --> 01:16:15,450
also the ns3 implementation fast start

1368
01:16:13,080 --> 01:16:17,309
was added Richard made good progress on

1369
01:16:15,450 --> 01:16:20,010
the FreeBSD implementation which didn't

1370
01:16:17,310 --> 01:16:22,560
exist before this got the handshake and

1371
01:16:20,010 --> 01:16:26,550
the feedback working out of the protocol

1372
01:16:22,560 --> 01:16:29,150
to packet packet drill and we built a

1373
01:16:26,550 --> 01:16:31,680
good relationship with the STS ee team

1374
01:16:29,150 --> 01:16:33,620
that's we the elf Rose team but now

1375
01:16:31,680 --> 01:16:40,830
we're we're the elf rose and SCE teams

1376
01:16:33,620 --> 01:16:42,720
and what we learned well DC TCP behavior

1377
01:16:40,830 --> 01:16:44,070
keeps changing in recent Linux kernels

1378
01:16:42,720 --> 01:16:45,600
so I think we're gonna have to develop

1379
01:16:44,070 --> 01:16:49,799
some regression test for the maintainer

1380
01:16:45,600 --> 01:16:52,860
x' because it's just impossible for us

1381
01:16:49,800 --> 01:16:54,420
to use it at the moment we have to keep

1382
01:16:52,860 --> 01:17:00,630
going right back to an early version of

1383
01:16:54,420 --> 01:17:02,490
the kernel accurate ecn we now question

1384
01:17:00,630 --> 01:17:04,350
one of the although the most recent

1385
01:17:02,490 --> 01:17:06,120
change you made to the spec having tried

1386
01:17:04,350 --> 01:17:09,620
to implement it so we may go back on

1387
01:17:06,120 --> 01:17:09,620
that but we really think it and

1388
01:17:09,890 --> 01:17:14,400
discovered that a counter that crosses a

1389
01:17:13,110 --> 01:17:16,460
byte boundary obviously we knew it

1390
01:17:14,400 --> 01:17:18,719
crossed byte boundary but just made it

1391
01:17:16,460 --> 01:17:21,420
started thinking about cross compiling

1392
01:17:18,720 --> 01:17:22,530
and stuff made it a bit more challenging

1393
01:17:21,420 --> 01:17:25,920
to make sure that would compile

1394
01:17:22,530 --> 01:17:27,450
correctly and also learned that remote

1395
01:17:25,920 --> 01:17:30,440
attendance of newcomers that a hackathon

1396
01:17:27,450 --> 01:17:30,440
doesn't really work

1397
01:17:33,010 --> 01:17:36,209
[Applause]

1398
01:17:42,679 --> 01:17:47,900
okay where's the wishy here's the

1399
01:17:45,689 --> 01:17:47,900
machine

1400
01:17:57,530 --> 01:18:04,259
okay okay thank you so this is a report

1401
01:18:02,399 --> 01:18:07,229
from the wiki hacking activity here at

1402
01:18:04,260 --> 01:18:08,699
the IETF hackathon so we see I work on

1403
01:18:07,229 --> 01:18:10,320
IOT semantics and hypermedia

1404
01:18:08,699 --> 01:18:12,898
interoperability is a long-running

1405
01:18:10,320 --> 01:18:15,090
activity at the IETF is already our

1406
01:18:12,899 --> 01:18:16,439
sixth hackathon we are in the

1407
01:18:15,090 --> 01:18:18,059
engineering research group but of course

1408
01:18:16,439 --> 01:18:23,189
spanning work across multiple

1409
01:18:18,059 --> 01:18:25,019
organizations and individuals usually

1410
01:18:23,189 --> 01:18:26,880
our plan has been finding different ways

1411
01:18:25,019 --> 01:18:29,369
turn on and off lights those that's what

1412
01:18:26,880 --> 01:18:31,769
IOT is of course all about this time we

1413
01:18:29,369 --> 01:18:34,228
had a slightly different focus here we

1414
01:18:31,769 --> 01:18:36,389
work on two major topic one is this IOT

1415
01:18:34,229 --> 01:18:37,709
data model convergence so reducing

1416
01:18:36,389 --> 01:18:39,809
fragmentation increasing

1417
01:18:37,709 --> 01:18:42,389
interoperability on the data models and

1418
01:18:39,809 --> 01:18:43,889
then hypermedia for IOT but this time

1419
01:18:42,389 --> 01:18:47,099
instead of focusing on lights focusing

1420
01:18:43,889 --> 01:18:49,590
on making coffee the specifications

1421
01:18:47,099 --> 01:18:51,119
included in particle working on coral

1422
01:18:49,590 --> 01:18:52,860
the constraint restful application

1423
01:18:51,119 --> 01:18:54,179
language that has been in the tinting

1424
01:18:52,860 --> 01:18:56,030
research group quite some time and now

1425
01:18:54,179 --> 01:18:58,559
moving to the core working group for

1426
01:18:56,030 --> 01:19:00,599
Standardization but also specification

1427
01:18:58,559 --> 01:19:02,489
from other organisations so we've been

1428
01:19:00,599 --> 01:19:04,469
working actively on the one data model

1429
01:19:02,489 --> 01:19:07,110
simple definition format and then also

1430
01:19:04,469 --> 01:19:08,969
data models from other organizations in

1431
01:19:07,110 --> 01:19:14,098
part on omae's back works like with M 2

1432
01:19:08,969 --> 01:19:16,019
m and e p-- so models on the data model

1433
01:19:14,099 --> 01:19:18,149
convergence so we use that one data

1434
01:19:16,019 --> 01:19:21,599
model simple exponential format to do

1435
01:19:18,149 --> 01:19:22,889
data and model interchange so the format

1436
01:19:21,599 --> 01:19:24,749
is a language that you can use to

1437
01:19:22,889 --> 01:19:26,579
describe data models from variety of

1438
01:19:24,749 --> 01:19:27,929
different organizations and based on

1439
01:19:26,579 --> 01:19:30,090
those descriptions you can do for

1440
01:19:27,929 --> 01:19:32,579
example translators between those models

1441
01:19:30,090 --> 01:19:34,559
but also able to exchange model rate

1442
01:19:32,579 --> 01:19:35,789
model data so bring for example models

1443
01:19:34,559 --> 01:19:38,579
from different ecosystems to your

1444
01:19:35,789 --> 01:19:40,349
ecosystem we have been working on some

1445
01:19:38,579 --> 01:19:42,119
automated tools for this purpose so we

1446
01:19:40,349 --> 01:19:44,130
have this automatic conversion of if so

1447
01:19:42,119 --> 01:19:45,570
like with the models into SDF and we

1448
01:19:44,130 --> 01:19:48,059
spend some time in the hackathon

1449
01:19:45,570 --> 01:19:49,889
improving the tooling and in addition to

1450
01:19:48,059 --> 01:19:51,899
improvements we also discover quite a

1451
01:19:49,889 --> 01:19:53,519
few potential improvements on the SDF

1452
01:19:51,899 --> 01:19:56,820
language itself so on the data type

1453
01:19:53,519 --> 01:19:58,559
schema and constraints in the SDF

1454
01:19:56,820 --> 01:20:00,630
language will be using JSON schema for

1455
01:19:58,559 --> 01:20:02,669
doing the validation of the models but

1456
01:20:00,630 --> 01:20:06,269
also after this hackathon now we have a

1457
01:20:02,669 --> 01:20:08,398
tool for generating CDL schemas for the

1458
01:20:06,269 --> 01:20:10,530
port asdf language and we can use to all

1459
01:20:08,399 --> 01:20:12,900
the CDL tooling for that too

1460
01:20:10,530 --> 01:20:15,240
and as a side result of this activity

1461
01:20:12,900 --> 01:20:17,730
now we have also a JSON format proposal

1462
01:20:15,240 --> 01:20:19,460
for coral so you can use the usual JSON

1463
01:20:17,730 --> 01:20:24,150
tooling with your Whittaker

1464
01:20:19,460 --> 01:20:25,920
representations one activity on the data

1465
01:20:24,150 --> 01:20:28,589
models was this binary data extraction

1466
01:20:25,920 --> 01:20:31,170
so if you have something that is not an

1467
01:20:28,590 --> 01:20:33,210
easy useable JSON format or such you can

1468
01:20:31,170 --> 01:20:34,950
now use these tools for extract json-ld

1469
01:20:33,210 --> 01:20:37,200
from it we have playground deployment

1470
01:20:34,950 --> 01:20:38,370
available on that that you can post post

1471
01:20:37,200 --> 01:20:42,090
your data and get json-ld

1472
01:20:38,370 --> 01:20:43,890
representations back and the other big

1473
01:20:42,090 --> 01:20:45,540
one was proving coffee with hypermedia

1474
01:20:43,890 --> 01:20:48,030
so of course from the days of hyper

1475
01:20:45,540 --> 01:20:49,380
hyper media hypertext coffeepot control

1476
01:20:48,030 --> 01:20:51,120
protocol times will be wanting to do

1477
01:20:49,380 --> 01:20:53,250
this now we have modern tools and

1478
01:20:51,120 --> 01:20:54,870
protocols for this purpose so you have a

1479
01:20:53,250 --> 01:20:56,700
carrier crate coffee machine reference

1480
01:20:54,870 --> 01:20:59,309
scenario also known as Karstens coffee

1481
01:20:56,700 --> 01:21:00,990
machine you can discover and describe

1482
01:20:59,310 --> 01:21:02,940
your coffee machine discover menu

1483
01:21:00,990 --> 01:21:05,790
options make coffee selections and

1484
01:21:02,940 --> 01:21:07,769
finally get get some coffee brewed we

1485
01:21:05,790 --> 01:21:09,510
have now two open-source implementations

1486
01:21:07,770 --> 01:21:11,520
that use coop and coral to achieve

1487
01:21:09,510 --> 01:21:16,890
especially the first three steps the

1488
01:21:11,520 --> 01:21:18,660
last one we're still working on and this

1489
01:21:16,890 --> 01:21:20,670
is the set of people who are working in

1490
01:21:18,660 --> 01:21:23,280
our team this time we have one new

1491
01:21:20,670 --> 01:21:25,500
first-time member mike mackool and we

1492
01:21:23,280 --> 01:21:27,450
had two remote participants if you want

1493
01:21:25,500 --> 01:21:29,580
to see more information links

1494
01:21:27,450 --> 01:21:31,200
open-source implementations etc you can

1495
01:21:29,580 --> 01:21:35,340
go to our wiki page and L the

1496
01:21:31,200 --> 01:21:38,849
information is there thank you

1497
01:21:35,340 --> 01:21:38,850
[Applause]

1498
01:21:57,010 --> 01:22:00,010
sorry

1499
01:22:06,700 --> 01:22:14,170
okay I see the see the quick

1500
01:22:49,290 --> 01:22:53,550
hi this is the report from the quick

1501
01:22:51,960 --> 01:22:57,840
table where the big table in the middle

1502
01:22:53,550 --> 01:22:59,930
somewhere we are also the htv3 table

1503
01:22:57,840 --> 01:23:03,270
because that's kind of the same thing

1504
01:22:59,930 --> 01:23:05,240
this is our regular interrupt

1505
01:23:03,270 --> 01:23:08,040
spreadsheet it's getting pretty crowded

1506
01:23:05,240 --> 01:23:10,559
so we had 19 implementations that we're

1507
01:23:08,040 --> 01:23:14,670
tracking most of them are both client

1508
01:23:10,560 --> 01:23:17,940
and server each letter is a test that's

1509
01:23:14,670 --> 01:23:19,680
either passed or not passed we now have

1510
01:23:17,940 --> 01:23:22,589
three lines the first one is sort of the

1511
01:23:19,680 --> 01:23:25,650
table stakes basic protocol stuff second

1512
01:23:22,590 --> 01:23:27,420
row is quote-unquote advanced features

1513
01:23:25,650 --> 01:23:28,830
that should really be part of the first

1514
01:23:27,420 --> 01:23:30,780
row but they're not sufficiently widely

1515
01:23:28,830 --> 01:23:33,000
deployed yet that we can do that and the

1516
01:23:30,780 --> 01:23:35,120
third row is new which is a bunch of new

1517
01:23:33,000 --> 01:23:38,330
tests that specifically test htv3

1518
01:23:35,120 --> 01:23:40,410
compatibility you see a bunch of white

1519
01:23:38,330 --> 01:23:43,500
compared to what I showed in previous

1520
01:23:40,410 --> 01:23:46,170
hackathons that's because the - 22

1521
01:23:43,500 --> 01:23:48,930
drafts only dropped like maybe 10 days

1522
01:23:46,170 --> 01:23:50,880
ago so a bunch of implementations

1523
01:23:48,930 --> 01:23:54,210
basically didn't have time to update yet

1524
01:23:50,880 --> 01:23:55,350
so this should this should change but

1525
01:23:54,210 --> 01:23:57,960
this is the most remote nation we've

1526
01:23:55,350 --> 01:23:59,730
ever had we keep adding new ones so it's

1527
01:23:57,960 --> 01:24:02,510
looking pretty good most of them were

1528
01:23:59,730 --> 01:24:04,919
here a bunch of people also send

1529
01:24:02,510 --> 01:24:06,210
engineers specifically only to the

1530
01:24:04,920 --> 01:24:07,620
hackathon and they're not going to stay

1531
01:24:06,210 --> 01:24:09,960
around for the ITF which is kind of an

1532
01:24:07,620 --> 01:24:13,530
interesting development so it seems like

1533
01:24:09,960 --> 01:24:14,940
companies find at least more benefit in

1534
01:24:13,530 --> 01:24:16,759
hackathon and the actual standards

1535
01:24:14,940 --> 01:24:21,210
meeting which we should maybe consider

1536
01:24:16,760 --> 01:24:22,260
in some form so I've shown this a lot so

1537
01:24:21,210 --> 01:24:24,780
I'm not gonna spend too much more time

1538
01:24:22,260 --> 01:24:26,700
on this one thing that is also new is um

1539
01:24:24,780 --> 01:24:29,340
I don't know why this shows up like this

1540
01:24:26,700 --> 01:24:31,260
so there's a general yang guy I might

1541
01:24:29,340 --> 01:24:33,150
and Semien have done a bunch of work so

1542
01:24:31,260 --> 01:24:34,590
I don't know about researchers amongst

1543
01:24:33,150 --> 01:24:37,769
you probably know NS 3 which is a

1544
01:24:34,590 --> 01:24:41,970
network simulator and Jonna and Martin

1545
01:24:37,770 --> 01:24:44,570
have worked on allowing you to define an

1546
01:24:41,970 --> 01:24:46,740
NS 3 simulation so you can define

1547
01:24:44,570 --> 01:24:49,099
well-defined TCB cross traffic or

1548
01:24:46,740 --> 01:24:51,990
topologies and then you can plumb in

1549
01:24:49,100 --> 01:24:53,310
actual quick implementation into that

1550
01:24:51,990 --> 01:24:55,650
topology and you can do congestion

1551
01:24:53,310 --> 01:24:57,240
testing for example repeatable so it's

1552
01:24:55,650 --> 01:24:58,860
kind of nice it's kind of cool it's it's

1553
01:24:57,240 --> 01:25:00,300
early days is the first time we tried

1554
01:24:58,860 --> 01:25:02,880
this we plugged in nothing two or three

1555
01:25:00,300 --> 01:25:04,680
different ones this is a

1556
01:25:02,880 --> 01:25:05,820
sequence number of plots of the trends

1557
01:25:04,680 --> 01:25:07,200
where people will be very excited

1558
01:25:05,820 --> 01:25:08,670
because now quick starts it look like

1559
01:25:07,200 --> 01:25:10,470
TCP you can look at this graph and you

1560
01:25:08,670 --> 01:25:12,450
see what's going on which was hired

1561
01:25:10,470 --> 01:25:14,190
before because it's all encrypted so

1562
01:25:12,450 --> 01:25:16,920
with endpoint cooperation you can

1563
01:25:14,190 --> 01:25:19,759
generate plots like this this is from

1564
01:25:16,920 --> 01:25:23,220
the simulator with one of the stacks

1565
01:25:19,760 --> 01:25:24,900
we're using Robin Marx's tool

1566
01:25:23,220 --> 01:25:27,030
there's the login form it's being

1567
01:25:24,900 --> 01:25:28,799
defined called cue log he has tools to

1568
01:25:27,030 --> 01:25:30,660
visualize cue log into something like

1569
01:25:28,800 --> 01:25:32,370
this so on the bottom you see like how

1570
01:25:30,660 --> 01:25:34,080
the RTT changes that quick things it has

1571
01:25:32,370 --> 01:25:36,870
over the path and then you see that a

1572
01:25:34,080 --> 01:25:38,400
regular sequence number AK plot so this

1573
01:25:36,870 --> 01:25:39,870
is exciting because finally it means you

1574
01:25:38,400 --> 01:25:41,519
don't have to be like the look at the

1575
01:25:39,870 --> 01:25:42,840
bits anymore in order to understand

1576
01:25:41,520 --> 01:25:47,110
what's going on in terms of congestion

1577
01:25:42,840 --> 01:25:51,770
control so this is very cool thank you

1578
01:25:47,110 --> 01:25:54,599
[Applause]

1579
01:25:51,770 --> 01:25:57,360
okay if there's anyone other than TLS

1580
01:25:54,600 --> 01:25:59,160
1.3 who has who uploaded a presentation

1581
01:25:57,360 --> 01:26:05,480
and hasn't presented yet come up here

1582
01:25:59,160 --> 01:26:05,480
and see me and let's go find the TCP 1.3

1583
01:26:13,030 --> 01:26:25,620
you saw got it or TLS 1.3 I said TCP

1584
01:26:22,600 --> 01:26:25,620
brain check

1585
01:26:39,229 --> 01:26:46,010
okay okay but can you help us with the

1586
01:26:43,679 --> 01:26:48,570
slides please next slide

1587
01:26:46,010 --> 01:26:50,699
okay thank you very much so breathing

1588
01:26:48,570 --> 01:26:53,249
it's Logan from Mauritius from the

1589
01:26:50,699 --> 01:26:55,619
southwest home team so we are based in

1590
01:26:53,249 --> 01:27:02,269
Russia so we've done a bunch of work on

1591
01:26:55,619 --> 01:27:06,018
TLS 1.3 SSH SC Venu dscp code point and

1592
01:27:02,269 --> 01:27:09,630
ITF mobile up next slide please

1593
01:27:06,019 --> 01:27:14,369
Sotiris 1.3 our aim was to get more

1594
01:27:09,630 --> 01:27:16,559
applications running on TLS 1.3 dscp ID

1595
01:27:14,369 --> 01:27:19,259
it's a new code point but was just I

1596
01:27:16,559 --> 01:27:21,179
just became an RFC and we've been

1597
01:27:19,260 --> 01:27:24,749
working on in to integrating but into

1598
01:27:21,179 --> 01:27:27,920
open source projects that does the ITF

1599
01:27:24,749 --> 01:27:34,228
mobile app but we started working on

1600
01:27:27,920 --> 01:27:37,019
previous ITF when B is the SCE drop but

1601
01:27:34,229 --> 01:27:39,329
came up recently and when the last thing

1602
01:27:37,019 --> 01:27:40,639
but we work on was on duplicating Asif

1603
01:27:39,329 --> 01:27:45,058
or in SSH

1604
01:27:40,639 --> 01:27:47,820
so next slide please so I'm Terrace 1.3

1605
01:27:45,059 --> 01:27:50,940
we've worked mostly with go long base

1606
01:27:47,820 --> 01:27:55,139
software packages so matter moves it

1607
01:27:50,940 --> 01:28:00,419
says like slack alternative so the PIO

1608
01:27:55,139 --> 01:28:03,800
was sent check sm TP is another good run

1609
01:28:00,420 --> 01:28:08,039
package but still working progress and

1610
01:28:03,800 --> 01:28:10,979
mi niño which is for Amazon s3 it's

1611
01:28:08,039 --> 01:28:12,989
still written in golang we added the

1612
01:28:10,979 --> 01:28:17,309
we've added various one from free

1613
01:28:12,989 --> 01:28:22,289
support and lastly we've got TLS 1.3 api

1614
01:28:17,309 --> 01:28:24,769
integrated into PHP 7.4 and the last

1615
01:28:22,289 --> 01:28:28,409
thing is but we are developing

1616
01:28:24,769 --> 01:28:30,479
c-sharp library for TLS 1.3 called TLS

1617
01:28:28,409 --> 01:28:33,478
Rob and it got

1618
01:28:30,479 --> 01:28:35,039
refracted and it has some support for

1619
01:28:33,479 --> 01:28:39,059
hello retry and things like that

1620
01:28:35,039 --> 01:28:41,429
40s 1.3 in C shop so the other stuff

1621
01:28:39,059 --> 01:28:44,159
that we've been doing working on is dscp

1622
01:28:41,429 --> 01:28:47,099
early when you code point we integrated

1623
01:28:44,159 --> 01:28:51,900
the patch we integrated it into net

1624
01:28:47,099 --> 01:28:55,250
birth repeal was sent to OpenSSH

1625
01:28:51,900 --> 01:28:57,900
and it was also sent to enough tables

1626
01:28:55,250 --> 01:29:00,750
the other thing that we worked on was we

1627
01:28:57,900 --> 01:29:05,309
go by it up as I said there are links to

1628
01:29:00,750 --> 01:29:11,600
a screenshot and it's it has improved

1629
01:29:05,310 --> 01:29:15,390
compared to loss ITF resin versus shop

1630
01:29:11,600 --> 01:29:20,370
implementation of SSH but still running

1631
01:29:15,390 --> 01:29:23,670
with aqua and we duplicated but mostly

1632
01:29:20,370 --> 01:29:27,140
we work on an SV implementation for F to

1633
01:29:23,670 --> 01:29:31,980
curdle in freebsd based on paragraph but

1634
01:29:27,140 --> 01:29:34,260
Rodney and gelatin were published it's

1635
01:29:31,980 --> 01:29:37,019
still very basic but it's enough but we

1636
01:29:34,260 --> 01:29:42,570
can see SC packets on the wire on

1637
01:29:37,020 --> 01:29:45,239
Wireshark so next slide please so what

1638
01:29:42,570 --> 01:29:48,150
we learned basically was open source

1639
01:29:45,239 --> 01:29:51,299
project then to want to wait for new

1640
01:29:48,150 --> 01:29:54,179
dscp code points to become RFC before

1641
01:29:51,300 --> 01:29:59,250
accepting patches that's the case for

1642
01:29:54,179 --> 01:30:02,070
SSH so we wanted to wait our c4 in SSH

1643
01:29:59,250 --> 01:30:05,280
is mostly fading away it's mostly going

1644
01:30:02,070 --> 01:30:08,659
away we've not seen that many cases of

1645
01:30:05,280 --> 01:30:14,360
open source projects still shipping with

1646
01:30:08,659 --> 01:30:18,599
SCE is just starting so it's worth

1647
01:30:14,360 --> 01:30:20,880
looking more into that was also

1648
01:30:18,600 --> 01:30:25,020
overworked what was going on with over

1649
01:30:20,880 --> 01:30:30,179
SC developers and lastly go long 1.12

1650
01:30:25,020 --> 01:30:34,800
ships with TLS 1.3 P I so expect more

1651
01:30:30,179 --> 01:30:35,659
TLS 1.3 in software packages returning

1652
01:30:34,800 --> 01:30:41,489
Goa

1653
01:30:35,659 --> 01:30:44,909
so lost site so first basically yes we

1654
01:30:41,489 --> 01:30:48,120
are whole team here from Mauritius we

1655
01:30:44,909 --> 01:30:51,330
were grateful to my sponsor business cos

1656
01:30:48,120 --> 01:30:55,199
Venu who hast adjust and this possible

1657
01:30:51,330 --> 01:30:58,530
leaks as well to to our ripples where we

1658
01:30:55,199 --> 01:31:01,169
are some our results of over SC as well

1659
01:30:58,530 --> 01:31:04,170
as the code and for the ITF mobile app

1660
01:31:01,170 --> 01:31:05,230
we have it via over that link and we

1661
01:31:04,170 --> 01:31:09,520
also included

1662
01:31:05,230 --> 01:31:12,580
for TLS shop library so thank you for

1663
01:31:09,520 --> 01:31:17,950
everybody for listening to what we've

1664
01:31:12,580 --> 01:31:20,710
done thank you and it's it's interesting

1665
01:31:17,950 --> 01:31:24,460
to see an entire project remote that's

1666
01:31:20,710 --> 01:31:29,320
that's cool okay thank you anybody we

1667
01:31:24,460 --> 01:31:30,970
missed okay thank you everybody for

1668
01:31:29,320 --> 01:31:32,950
presenting and thank you everybody for

1669
01:31:30,970 --> 01:31:37,270
coming to the hackathon and Charles's

1670
01:31:32,950 --> 01:31:38,920
backup and thank you so much Barry for

1671
01:31:37,270 --> 01:31:40,570
helping with the presentations it's a

1672
01:31:38,920 --> 01:31:42,489
it's a lot to go through and it's it's

1673
01:31:40,570 --> 01:31:45,370
handy to have have helped have a couple

1674
01:31:42,489 --> 01:31:49,000
people roy's welcome to welcome more

1675
01:31:45,370 --> 01:31:51,760
help for the hackathon we also huge huge

1676
01:31:49,000 --> 01:31:53,500
thanks to our sponsors too I can they

1677
01:31:51,760 --> 01:31:55,270
really stepped up big as I mentioned not

1678
01:31:53,500 --> 01:31:58,210
only for this hackathon but for the next

1679
01:31:55,270 --> 01:32:00,850
two we'd really love to line up more

1680
01:31:58,210 --> 01:32:03,940
sponsors for the hackathon because as

1681
01:32:00,850 --> 01:32:06,010
you can see it's always it's it's quite

1682
01:32:03,940 --> 01:32:08,759
large and it takes a lot of money to

1683
01:32:06,010 --> 01:32:10,750
feed us and to have a space for us and

1684
01:32:08,760 --> 01:32:12,790
great to see that everyone gets so much

1685
01:32:10,750 --> 01:32:14,710
value out of it so if you're at a

1686
01:32:12,790 --> 01:32:17,350
company or an organization that has the

1687
01:32:14,710 --> 01:32:20,140
ability to sponsor we'd appreciate that

1688
01:32:17,350 --> 01:32:22,560
and thanks to Nova flow for helping out

1689
01:32:20,140 --> 01:32:25,420
this time around that was great as well

1690
01:32:22,560 --> 01:32:28,420
and thanks to all you really the

1691
01:32:25,420 --> 01:32:31,150
champions Ally thank you for having your

1692
01:32:28,420 --> 01:32:32,530
project welcoming newcomers we want to

1693
01:32:31,150 --> 01:32:35,769
continue to make this a great experience

1694
01:32:32,530 --> 01:32:36,820
for newcomers to not just for those of

1695
01:32:35,770 --> 01:32:38,530
us who have been working on the

1696
01:32:36,820 --> 01:32:41,049
standards for a long time so appreciate

1697
01:32:38,530 --> 01:32:42,190
those of you who did have new people in

1698
01:32:41,050 --> 01:32:45,760
your team when you helped them get

1699
01:32:42,190 --> 01:32:47,860
started that's just fantastic so and

1700
01:32:45,760 --> 01:32:49,989
thanks for you just paying attention to

1701
01:32:47,860 --> 01:32:51,700
all the presentations they were recorded

1702
01:32:49,989 --> 01:32:53,980
we'll have them they were live streamed

1703
01:32:51,700 --> 01:32:56,710
also so if you missed something you can

1704
01:32:53,980 --> 01:32:59,049
go and get it afterwards lastly if you

1705
01:32:56,710 --> 01:33:00,850
have you didn't present anything but you

1706
01:32:59,050 --> 01:33:04,630
still have some useful results to share

1707
01:33:00,850 --> 01:33:06,070
please do upload your presentation to

1708
01:33:04,630 --> 01:33:08,020
the github org

1709
01:33:06,070 --> 01:33:10,330
or if you want you can just send it to

1710
01:33:08,020 --> 01:33:12,010
me I'll all upload it for you if you

1711
01:33:10,330 --> 01:33:14,110
want to put your PowerPoint presentation

1712
01:33:12,010 --> 01:33:18,099
there or some other format that's fine

1713
01:33:14,110 --> 01:33:21,339
now just for up here we wanted the PDFs

1714
01:33:18,099 --> 01:33:30,280
and I think that's it Thanks good luck

1715
01:33:21,340 --> 01:33:32,610
with the rest of the IETF meeting and as

1716
01:33:30,280 --> 01:33:32,610
always

1717
01:33:37,520 --> 01:33:39,580
you

