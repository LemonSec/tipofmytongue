1
00:00:05,520 --> 00:00:09,660
in this session we've got a variety of

2
00:00:07,350 --> 00:00:12,870
different topics are we starting talking

3
00:00:09,660 --> 00:00:15,599
about securing ipv6 neighbor discovery

4
00:00:12,870 --> 00:00:17,669
and we've got Thomas shuffler all the

5
00:00:15,599 --> 00:00:42,210
way from Berlin that's talked about his

6
00:00:17,670 --> 00:00:45,090
work so this is better

7
00:00:42,210 --> 00:00:49,050
hello everybody I'm Thomas Schaffer I'm

8
00:00:45,090 --> 00:00:52,050
here from Germany Berlin and I'm going

9
00:00:49,050 --> 00:00:54,959
to present you some student work which

10
00:00:52,050 --> 00:00:58,620
we had done in collaboration with the

11
00:00:54,960 --> 00:01:02,870
University of Potsdam and what we were

12
00:00:58,620 --> 00:01:05,099
looking at was how can we secure a

13
00:01:02,870 --> 00:01:08,580
different way to secure neighbor

14
00:01:05,099 --> 00:01:11,399
discovery in access networks then what

15
00:01:08,580 --> 00:01:16,170
had been proposed previously and what is

16
00:01:11,400 --> 00:01:17,909
being implemented or proposed in several

17
00:01:16,170 --> 00:01:21,240
other aspects and we were actually

18
00:01:17,909 --> 00:01:23,640
trying to work this out by using an SDN

19
00:01:21,240 --> 00:01:26,280
approach where we actually build an

20
00:01:23,640 --> 00:01:30,000
application which collects all the

21
00:01:26,280 --> 00:01:32,600
neighbor discovery messages from from

22
00:01:30,000 --> 00:01:39,740
the network so this is the outline of

23
00:01:32,600 --> 00:01:42,210
the program well actually many of the

24
00:01:39,740 --> 00:01:44,130
comments I got from the reviews actually

25
00:01:42,210 --> 00:01:46,710
triggered me to go a little bit back in

26
00:01:44,130 --> 00:01:49,408
history and and talk about what paper

27
00:01:46,710 --> 00:01:53,880
discovery and ICMP issue is actually

28
00:01:49,409 --> 00:01:59,100
aren't how they can be exported I know

29
00:01:53,880 --> 00:02:02,939
I'll focus on what we did so IP v6 is

30
00:01:59,100 --> 00:02:06,059
kind of still the new protocol 20 years

31
00:02:02,939 --> 00:02:09,239
old now and ICMP

32
00:02:06,060 --> 00:02:12,360
is one of the big change changes in

33
00:02:09,239 --> 00:02:17,080
protocol in regards to what had been

34
00:02:12,360 --> 00:02:19,510
there in ipv4 and which is now May

35
00:02:17,080 --> 00:02:22,360
different from what we had before so we

36
00:02:19,510 --> 00:02:25,090
can say this Auto configuration and

37
00:02:22,360 --> 00:02:29,200
router discovery we have a different

38
00:02:25,090 --> 00:02:32,950
address resolution process then we had

39
00:02:29,200 --> 00:02:34,630
an IP before and we now have all kinds

40
00:02:32,950 --> 00:02:38,109
of other options which we have in order

41
00:02:34,630 --> 00:02:41,640
to do something like multicast discovery

42
00:02:38,110 --> 00:02:45,400
etc so all these changes actually led to

43
00:02:41,640 --> 00:02:47,799
a very new protocol fairly different

44
00:02:45,400 --> 00:02:50,170
protocol and what we had in ipv4 and

45
00:02:47,800 --> 00:02:52,660
this actually sort of now opens up

46
00:02:50,170 --> 00:02:56,829
several possibilities to actually

47
00:02:52,660 --> 00:03:00,190
exploit these kind of things and the

48
00:02:56,830 --> 00:03:03,850
maybe the most obvious change was a PDA

49
00:03:00,190 --> 00:03:07,090
address auto-configuration which changed

50
00:03:03,850 --> 00:03:10,120
the way IP addresses are assigned to us

51
00:03:07,090 --> 00:03:12,640
I mean we now have DHCP in all the

52
00:03:10,120 --> 00:03:15,250
networks so made for the end-user may

53
00:03:12,640 --> 00:03:17,470
not feel so different one from the end

54
00:03:15,250 --> 00:03:20,290
user perspective but at least the

55
00:03:17,470 --> 00:03:22,810
protocols are very very different so the

56
00:03:20,290 --> 00:03:24,790
assumption in ipv6 is basically that you

57
00:03:22,810 --> 00:03:27,040
do some sort of address also

58
00:03:24,790 --> 00:03:31,150
configuration and even if you are going

59
00:03:27,040 --> 00:03:34,000
to use IP if you if you haven't use DHCP

60
00:03:31,150 --> 00:03:36,670
is actually sort of store reliant on

61
00:03:34,000 --> 00:03:39,130
some of the the mechanisms here so by

62
00:03:36,670 --> 00:03:42,549
default all the hosts do stateless

63
00:03:39,130 --> 00:03:44,260
address auto-configuration and in order

64
00:03:42,550 --> 00:03:47,230
to configure address there's a way to

65
00:03:44,260 --> 00:03:49,329
maybe take some data from an identifier

66
00:03:47,230 --> 00:03:52,179
like a MAC address and and make this

67
00:03:49,330 --> 00:03:54,010
into a relatively six address and what

68
00:03:52,180 --> 00:03:55,600
you then do is you do so-called

69
00:03:54,010 --> 00:03:57,399
duplicate address detection which lets

70
00:03:55,600 --> 00:04:01,510
you know that this address is actually

71
00:03:57,400 --> 00:04:05,080
unique on the network and as I said you

72
00:04:01,510 --> 00:04:08,560
can also use the HTTP v6 but not as as

73
00:04:05,080 --> 00:04:12,220
widespread as it is in ipv4 and a lot of

74
00:04:08,560 --> 00:04:15,400
people don't ever actually implement it

75
00:04:12,220 --> 00:04:18,310
and even if you implemented it means

76
00:04:15,400 --> 00:04:22,380
that you still have to do some of the

77
00:04:18,310 --> 00:04:26,410
first steps in the application process

78
00:04:22,380 --> 00:04:29,200
so how does it

79
00:04:26,410 --> 00:04:31,270
work so basically what you do is you

80
00:04:29,200 --> 00:04:33,820
have a period six addresses now have

81
00:04:31,270 --> 00:04:35,740
something called a lifetime which may

82
00:04:33,820 --> 00:04:38,200
surprise people that it you have

83
00:04:35,740 --> 00:04:39,820
actually now sort of tentative addresses

84
00:04:38,200 --> 00:04:45,250
and preferred addresses and expired

85
00:04:39,820 --> 00:04:47,830
addresses and when you do generate a new

86
00:04:45,250 --> 00:04:50,020
address you actually set it and do to

87
00:04:47,830 --> 00:04:52,229
prove it in the in the state of being

88
00:04:50,020 --> 00:04:54,430
tentative and you need to make sure

89
00:04:52,230 --> 00:04:56,410
through the process of duplicated

90
00:04:54,430 --> 00:04:59,110
address detection it is address it's

91
00:04:56,410 --> 00:05:02,410
actually being unique on a networking

92
00:04:59,110 --> 00:05:06,640
you can actually use it so how this is

93
00:05:02,410 --> 00:05:08,680
works use sin of solicitation message to

94
00:05:06,640 --> 00:05:10,960
network where you set your source

95
00:05:08,680 --> 00:05:14,500
address to the unspecified address and

96
00:05:10,960 --> 00:05:16,870
then this gets sent out to the local

97
00:05:14,500 --> 00:05:19,060
network and if you don't ever expect to

98
00:05:16,870 --> 00:05:22,330
get a response back from this because

99
00:05:19,060 --> 00:05:25,180
sort of that's your way to say oh you're

100
00:05:22,330 --> 00:05:28,390
sure that this address is actually

101
00:05:25,180 --> 00:05:28,930
unique on a network so that's how it

102
00:05:28,390 --> 00:05:31,349
should work

103
00:05:28,930 --> 00:05:34,420
that's how most most of the times you

104
00:05:31,350 --> 00:05:38,740
what you see in the network but it's

105
00:05:34,420 --> 00:05:40,210
actually now possible to to attack these

106
00:05:38,740 --> 00:05:44,410
kind of protocol so it's very very easy

107
00:05:40,210 --> 00:05:47,229
to do this so and you can actually dust

108
00:05:44,410 --> 00:05:49,890
somebody just by replying to these kind

109
00:05:47,230 --> 00:05:52,660
of messages on the network and other

110
00:05:49,890 --> 00:05:55,780
attacks are possible as well so how does

111
00:05:52,660 --> 00:05:58,330
this thing actually work so if somebody

112
00:05:55,780 --> 00:06:00,669
just sort of some prankster or some some

113
00:05:58,330 --> 00:06:02,530
attacker actually sort of just monitors

114
00:06:00,669 --> 00:06:04,659
what's going on what's being sent out to

115
00:06:02,530 --> 00:06:07,599
the network and and just replies to this

116
00:06:04,660 --> 00:06:09,640
and and what happens then is that your

117
00:06:07,600 --> 00:06:12,130
host says oh sorry

118
00:06:09,640 --> 00:06:14,969
I just got an answer back I can't use

119
00:06:12,130 --> 00:06:18,310
his address and it may pick another one

120
00:06:14,970 --> 00:06:20,290
depending on the implementation but then

121
00:06:18,310 --> 00:06:22,750
again you do the same thing again and

122
00:06:20,290 --> 00:06:26,260
again and you actually does the the host

123
00:06:22,750 --> 00:06:32,080
from actually being active on under

124
00:06:26,260 --> 00:06:35,530
network that's just one example of what

125
00:06:32,080 --> 00:06:40,320
can happen in ipv6 never discoveries

126
00:06:35,530 --> 00:06:40,320
other attacks as well

127
00:06:40,330 --> 00:06:44,948
so what did people think about it so

128
00:06:42,789 --> 00:06:46,870
they said oh well we have this nice

129
00:06:44,949 --> 00:06:48,669
thing called IPSec so we just secured

130
00:06:46,870 --> 00:06:51,539
our neighbor exhale

131
00:06:48,669 --> 00:06:54,628
messages or neighbor protocol messages

132
00:06:51,539 --> 00:06:58,210
basic and then solve the problem solved

133
00:06:54,629 --> 00:07:01,539
the trouble is this doesn't really work

134
00:06:58,210 --> 00:07:04,479
because in order to set up an security

135
00:07:01,539 --> 00:07:06,729
Association you somehow have to have a

136
00:07:04,479 --> 00:07:08,080
valid IP address which you don't have

137
00:07:06,729 --> 00:07:10,419
because you are in the process of

138
00:07:08,080 --> 00:07:12,180
configuring one so this would actually

139
00:07:10,419 --> 00:07:15,729
require that you have previously

140
00:07:12,180 --> 00:07:18,069
configured manual security Association

141
00:07:15,729 --> 00:07:20,349
on your devices in order to join the

142
00:07:18,069 --> 00:07:25,300
network so kind of a chicken and egg

143
00:07:20,349 --> 00:07:28,990
problem here then people real assets we

144
00:07:25,300 --> 00:07:32,949
need something else and they secure

145
00:07:28,990 --> 00:07:36,550
neighbor discovery protocol which is a

146
00:07:32,949 --> 00:07:40,990
nice idea I like it very much

147
00:07:36,550 --> 00:07:43,210
unfortunately nobody sort of either

148
00:07:40,990 --> 00:07:45,069
implemented it or even if they

149
00:07:43,210 --> 00:07:47,698
implemented it we've found that there

150
00:07:45,069 --> 00:07:53,139
are some potential vulnerabilities

151
00:07:47,699 --> 00:07:56,199
against it just by sending or arbitrary

152
00:07:53,139 --> 00:07:58,659
messages you can actually cause and

153
00:07:56,199 --> 00:08:02,289
release also resource exhaustion attack

154
00:07:58,659 --> 00:08:04,779
and so I think that's probably the point

155
00:08:02,289 --> 00:08:07,710
where people set the odds dump all over

156
00:08:04,779 --> 00:08:11,500
then anymore and we don't implement it

157
00:08:07,710 --> 00:08:13,810
so how do we actually be as our research

158
00:08:11,500 --> 00:08:16,029
group actually cut you cut you this be

159
00:08:13,810 --> 00:08:19,389
sort of monitored all these activities

160
00:08:16,029 --> 00:08:22,379
we're very closely in a timeframe from

161
00:08:19,389 --> 00:08:25,659
15 years ago or something like this and

162
00:08:22,379 --> 00:08:27,430
we actually found and that's I don't

163
00:08:25,659 --> 00:08:30,460
know if it's known by everybody there's

164
00:08:27,430 --> 00:08:32,380
there's actually good X attack toolkit

165
00:08:30,460 --> 00:08:35,260
out there so if you ever wanted to play

166
00:08:32,380 --> 00:08:38,559
this yourself and find out what what's

167
00:08:35,260 --> 00:08:40,328
possible on on these these protocols and

168
00:08:38,559 --> 00:08:43,260
what what kind of attacks out there just

169
00:08:40,328 --> 00:08:45,939
actually did seek to occurred here so

170
00:08:43,260 --> 00:08:48,430
it's actually being developed by a guy

171
00:08:45,940 --> 00:08:51,310
in Berlin as well so I met this guy and

172
00:08:48,430 --> 00:08:53,239
he's a very very nice guy but sort of

173
00:08:51,310 --> 00:08:57,260
very interested in how

174
00:08:53,240 --> 00:09:02,480
to break ipv6 people came up with all

175
00:08:57,260 --> 00:09:04,040
kinds of changes to the protocols we now

176
00:09:02,480 --> 00:09:07,640
implemented something like route or

177
00:09:04,040 --> 00:09:10,610
advertisement guards and silicon on your

178
00:09:07,640 --> 00:09:14,209
access switches etc so kind of the

179
00:09:10,610 --> 00:09:16,220
problem sent seemed to come or gone out

180
00:09:14,209 --> 00:09:19,910
of focus and and nobody really cares

181
00:09:16,220 --> 00:09:23,029
anymore what we did is we in a couple

182
00:09:19,910 --> 00:09:25,839
years ago we started looking at ipv6

183
00:09:23,029 --> 00:09:29,600
support in IDs and specifically in snort

184
00:09:25,839 --> 00:09:32,570
and the developers they said yes we are

185
00:09:29,600 --> 00:09:34,850
ipv6 comfortable but this meant a we're

186
00:09:32,570 --> 00:09:37,220
only looking at layer 3 in not looking

187
00:09:34,850 --> 00:09:41,540
at specific protocols they didn't even

188
00:09:37,220 --> 00:09:44,089
have a way to distinguish an ipv6 ICMP

189
00:09:41,540 --> 00:09:46,640
message from an ipv4 ICMP message

190
00:09:44,089 --> 00:09:51,140
message so we did some implementations

191
00:09:46,640 --> 00:09:53,810
there to allow this distinction and so

192
00:09:51,140 --> 00:09:58,970
we looked at some of this in order to

193
00:09:53,810 --> 00:10:02,060
detect any P attacks in IDS's but then

194
00:09:58,970 --> 00:10:04,459
found it's maybe one way to do it but

195
00:10:02,060 --> 00:10:07,430
there's may be others and instead of

196
00:10:04,459 --> 00:10:10,670
using IDs we could actually use an SDN

197
00:10:07,430 --> 00:10:14,839
switch to do very much of the same thing

198
00:10:10,670 --> 00:10:16,130
so we could monitor or links and monitor

199
00:10:14,839 --> 00:10:18,680
what's going on and linked and

200
00:10:16,130 --> 00:10:21,439
potentially DSS also cheaper to deploy

201
00:10:18,680 --> 00:10:23,599
and maintain but once we do this we can

202
00:10:21,440 --> 00:10:26,570
actually go a little bit further and say

203
00:10:23,600 --> 00:10:30,800
oh well now we can also filter not only

204
00:10:26,570 --> 00:10:33,500
monitor or you can also put stuff on the

205
00:10:30,800 --> 00:10:35,779
network on the Sdn controller which

206
00:10:33,500 --> 00:10:37,279
allows us to give more control over

207
00:10:35,779 --> 00:10:42,770
what's actually going on in the network

208
00:10:37,279 --> 00:10:46,180
so we build NDP proxy or an intelligent

209
00:10:42,770 --> 00:10:49,430
selective proxy it's under

210
00:10:46,180 --> 00:10:52,849
discriminative lis proxying messages

211
00:10:49,430 --> 00:10:55,849
it's just as if there's a certain data

212
00:10:52,850 --> 00:11:00,860
metal net we implement this in the Rio

213
00:10:55,850 --> 00:11:02,600
framework in piping and what we do is we

214
00:11:00,860 --> 00:11:04,339
monitor the network and whenever we see

215
00:11:02,600 --> 00:11:06,680
a duplicate address detection message

216
00:11:04,339 --> 00:11:09,680
then we take this as the authentication

217
00:11:06,680 --> 00:11:12,469
hook for our data model so this

218
00:11:09,680 --> 00:11:15,040
generates a host cache entry in our

219
00:11:12,470 --> 00:11:18,050
controller and this allows us then to

220
00:11:15,040 --> 00:11:19,910
sort of distinguish between what we

221
00:11:18,050 --> 00:11:24,349
should forward or drop on on our

222
00:11:19,910 --> 00:11:27,110
networks other than this this is normal

223
00:11:24,350 --> 00:11:29,000
oh no scripts which for ipv4 and we

224
00:11:27,110 --> 00:11:30,589
additionally also implemented through

225
00:11:29,000 --> 00:11:32,420
our advertisement cards so actually our

226
00:11:30,589 --> 00:11:34,160
controller is the one who's who is

227
00:11:32,420 --> 00:11:35,810
sending out our attachments and if

228
00:11:34,160 --> 00:11:40,880
somebody else-- us that we just blocked

229
00:11:35,810 --> 00:11:45,020
this what we also did is we didn't want

230
00:11:40,880 --> 00:11:46,580
to have every kind of traffic or NDP

231
00:11:45,020 --> 00:11:48,110
traffic hitting the controller because

232
00:11:46,580 --> 00:11:50,839
this would potentially cause some

233
00:11:48,110 --> 00:11:54,260
performance issues so we managed this by

234
00:11:50,839 --> 00:11:57,890
using different priorities for our flow

235
00:11:54,260 --> 00:12:00,050
rules so we have a catch-all rule which

236
00:11:57,890 --> 00:12:02,660
has the lowest priority if somebody is

237
00:12:00,050 --> 00:12:06,380
known mecca's now and we have these

238
00:12:02,660 --> 00:12:08,630
flows to take a priority over them then

239
00:12:06,380 --> 00:12:11,180
we filter ipv6 messages it's such and

240
00:12:08,630 --> 00:12:13,670
then we have NDP traffic which we catch

241
00:12:11,180 --> 00:12:16,910
and if you know this guide and sort of

242
00:12:13,670 --> 00:12:20,810
this flow was actually taking priority

243
00:12:16,910 --> 00:12:23,329
over this so we should only ever see the

244
00:12:20,810 --> 00:12:25,459
first NDP package for certain flow and

245
00:12:23,330 --> 00:12:30,850
and all the subsequent messages should

246
00:12:25,459 --> 00:12:34,729
be switched directly from on the switch

247
00:12:30,850 --> 00:12:36,800
so the idea was to have to simply deploy

248
00:12:34,730 --> 00:12:39,380
so that we don't need to change any kind

249
00:12:36,800 --> 00:12:44,089
of if anything in the implementations or

250
00:12:39,380 --> 00:12:46,300
any protocols and have this running so

251
00:12:44,089 --> 00:12:49,070
here you see a big picture of our

252
00:12:46,300 --> 00:12:49,579
architecture I'm not going too much into

253
00:12:49,070 --> 00:12:54,680
this

254
00:12:49,579 --> 00:13:00,920
just some particularly of REO is

255
00:12:54,680 --> 00:13:02,989
actually this we need it to only have a

256
00:13:00,920 --> 00:13:04,939
single thread trying so we need to make

257
00:13:02,990 --> 00:13:07,510
this so that it's actually something of

258
00:13:04,940 --> 00:13:11,120
this coin going to be called in parallel

259
00:13:07,510 --> 00:13:14,050
so how do we learn learn the host on the

260
00:13:11,120 --> 00:13:16,579
network so we as I said we use the

261
00:13:14,050 --> 00:13:20,150
typical recitation Massachusetts

262
00:13:16,579 --> 00:13:22,219
whenever we see some body using a

263
00:13:20,150 --> 00:13:24,880
and specified source addressed and we

264
00:13:22,220 --> 00:13:26,690
take this as a hint it might be a new

265
00:13:24,880 --> 00:13:29,480
host on a network

266
00:13:26,690 --> 00:13:31,730
and whenever we see a second one then we

267
00:13:29,480 --> 00:13:33,920
block this this could lead potentially

268
00:13:31,730 --> 00:13:35,990
to the case that if somebody is moving

269
00:13:33,920 --> 00:13:39,380
from one port to the other with his

270
00:13:35,990 --> 00:13:42,500
machine that he himself blocking himself

271
00:13:39,380 --> 00:13:45,200
but we we just take this chance and sort

272
00:13:42,500 --> 00:13:47,480
of in after a certain computer world

273
00:13:45,200 --> 00:13:50,300
time period we actually drop these

274
00:13:47,480 --> 00:13:51,650
entries from the cache so it shouldn't

275
00:13:50,300 --> 00:13:53,839
be blocked forever it shouldn't be just

276
00:13:51,650 --> 00:13:59,150
blocked for a certain specific time

277
00:13:53,840 --> 00:14:02,300
period so and then so if we have our

278
00:13:59,150 --> 00:14:05,140
cache board our never cashed and we use

279
00:14:02,300 --> 00:14:09,969
it's never cashier in order to validate

280
00:14:05,140 --> 00:14:14,240
packets going between these entities and

281
00:14:09,970 --> 00:14:16,010
whenever we have a full active

282
00:14:14,240 --> 00:14:18,380
communication going on between some

283
00:14:16,010 --> 00:14:25,370
entities then we actually install flow

284
00:14:18,380 --> 00:14:28,610
in in in Sdn switch so when regular

285
00:14:25,370 --> 00:14:31,090
traffic should be actually also being

286
00:14:28,610 --> 00:14:35,150
able to cause these these flow entries

287
00:14:31,090 --> 00:14:36,740
and the idea is that when we have some

288
00:14:35,150 --> 00:14:39,560
bio direction or communication going on

289
00:14:36,740 --> 00:14:42,110
we actually have these going over the

290
00:14:39,560 --> 00:14:44,239
flows and we implement it as such that

291
00:14:42,110 --> 00:14:46,250
sort of whenever there's a new packet

292
00:14:44,240 --> 00:14:48,170
being triggered and we have a timeout

293
00:14:46,250 --> 00:14:50,150
period for them for the flow rules and

294
00:14:48,170 --> 00:14:51,860
they should be stay active as suit as

295
00:14:50,150 --> 00:14:53,750
long as there is active communication

296
00:14:51,860 --> 00:14:56,960
between the networks between the

297
00:14:53,750 --> 00:15:00,620
entities on a network so after a certain

298
00:14:56,960 --> 00:15:03,410
time period these flow rules may timeout

299
00:15:00,620 --> 00:15:06,830
if somebody's failing to send any new

300
00:15:03,410 --> 00:15:08,329
traffic or if somebody's maybe being

301
00:15:06,830 --> 00:15:12,860
removed from the network we'd not

302
00:15:08,330 --> 00:15:14,330
immediately remove these we remove two

303
00:15:12,860 --> 00:15:16,550
flow rules from the switch but we not

304
00:15:14,330 --> 00:15:20,360
immediately remove the hosts cache

305
00:15:16,550 --> 00:15:23,030
entries they will get purged after a

306
00:15:20,360 --> 00:15:25,520
certain time period but this is for

307
00:15:23,030 --> 00:15:30,110
longer than it is usually for a day idle

308
00:15:25,520 --> 00:15:33,420
time out on the floor flow rule so you

309
00:15:30,110 --> 00:15:35,670
tested us in basically

310
00:15:33,420 --> 00:15:41,420
of it in mini night but also some of it

311
00:15:35,670 --> 00:15:44,160
on some real open flow hardware so the

312
00:15:41,420 --> 00:15:46,949
basic functionality of onboarding ipv6

313
00:15:44,160 --> 00:15:49,920
horse is quite quite easy to implement

314
00:15:46,950 --> 00:15:53,400
and and works as intended the main

315
00:15:49,920 --> 00:15:57,060
challenge really is in maintaining this

316
00:15:53,400 --> 00:15:59,579
host cache because we don't we can't

317
00:15:57,060 --> 00:16:01,260
guarantee that we see all all the

318
00:15:59,580 --> 00:16:03,960
packets going on in the network and we

319
00:16:01,260 --> 00:16:06,810
don't can I mean the trying to keep it

320
00:16:03,960 --> 00:16:11,190
is if you have some host maybe shutting

321
00:16:06,810 --> 00:16:14,310
down or maybe going to sleep and not

322
00:16:11,190 --> 00:16:15,900
answering our pro packets when we trying

323
00:16:14,310 --> 00:16:19,439
to figure out if this hose is still

324
00:16:15,900 --> 00:16:21,449
active on the network we also did test

325
00:16:19,440 --> 00:16:24,360
some performance issues with this

326
00:16:21,450 --> 00:16:27,300
because sort of if basically now we are

327
00:16:24,360 --> 00:16:28,640
in the packet path and and whenever we

328
00:16:27,300 --> 00:16:32,370
need to process something then

329
00:16:28,640 --> 00:16:34,170
potentially take some time and we find

330
00:16:32,370 --> 00:16:36,480
out did it take some time which is

331
00:16:34,170 --> 00:16:40,459
mainly due to the fact that we have a

332
00:16:36,480 --> 00:16:44,040
non optimized host cache data structure

333
00:16:40,460 --> 00:16:46,080
the trouble here is that been in the

334
00:16:44,040 --> 00:16:49,260
norm of economics which can just sort of

335
00:16:46,080 --> 00:16:52,080
key on the mac address here we now have

336
00:16:49,260 --> 00:16:55,200
to check megatron's against different

337
00:16:52,080 --> 00:16:56,940
and potentially multiple ipv6 addresses

338
00:16:55,200 --> 00:17:00,600
so we have to go through the whole cache

339
00:16:56,940 --> 00:17:02,550
and this is done in tight and so it's

340
00:17:00,600 --> 00:17:05,849
not yet production ready but sort of

341
00:17:02,550 --> 00:17:09,810
that's and but these times are only true

342
00:17:05,849 --> 00:17:14,099
or these these these these times here in

343
00:17:09,810 --> 00:17:15,750
milliseconds or for just first ICMP

344
00:17:14,099 --> 00:17:19,409
packet being processed by the switch

345
00:17:15,750 --> 00:17:21,270
whatever we got they got these things

346
00:17:19,410 --> 00:17:23,760
it's the flows installed and all

347
00:17:21,270 --> 00:17:29,430
subsequent like it will be much more

348
00:17:23,760 --> 00:17:32,760
faster so what's our current limitations

349
00:17:29,430 --> 00:17:36,240
we are model of sort of assumes that we

350
00:17:32,760 --> 00:17:38,550
have one host per switch port that or

351
00:17:36,240 --> 00:17:40,980
our host doing actually doing duplicate

352
00:17:38,550 --> 00:17:43,530
address detection and the control sees

353
00:17:40,980 --> 00:17:47,290
all those messages and currently it only

354
00:17:43,530 --> 00:17:51,399
works with a single switch Network which

355
00:17:47,290 --> 00:17:54,700
need to be extended what sort of main

356
00:17:51,400 --> 00:17:56,140
challenge already hinted is really what

357
00:17:54,700 --> 00:17:59,290
happens if a horse is have an idea

358
00:17:56,140 --> 00:18:01,770
sleeping if or if house may change their

359
00:17:59,290 --> 00:18:08,970
mega trusses what they are doing -

360
00:18:01,770 --> 00:18:13,000
working out so that's actually something

361
00:18:08,970 --> 00:18:15,880
what we we found is that sort of it's

362
00:18:13,000 --> 00:18:17,860
actually is you feel it's a very good

363
00:18:15,880 --> 00:18:19,930
idea to use as the end to do this kind

364
00:18:17,860 --> 00:18:23,199
of things the trouble is that sort of as

365
00:18:19,930 --> 00:18:26,230
Ethernet and IP are not very very well

366
00:18:23,200 --> 00:18:27,820
integrated with each other so maybe it's

367
00:18:26,230 --> 00:18:31,210
time to change something like this and

368
00:18:27,820 --> 00:18:33,250
that we say oh well yes and I assume

369
00:18:31,210 --> 00:18:35,530
that switch isn't supposed to be a layer

370
00:18:33,250 --> 00:18:37,330
2 device but it never really was a pure

371
00:18:35,530 --> 00:18:38,830
layer 2 device so there's some

372
00:18:37,330 --> 00:18:42,280
interaction between these these layers

373
00:18:38,830 --> 00:18:45,820
and maybe it's time to get this but a

374
00:18:42,280 --> 00:18:47,649
bit more integrated in order to also

375
00:18:45,820 --> 00:18:50,740
issue some some security and reliability

376
00:18:47,650 --> 00:18:52,990
in networks and we see this already

377
00:18:50,740 --> 00:18:55,750
being implemented in something like well

378
00:18:52,990 --> 00:18:58,750
I find managed Wi-Fi networks where you

379
00:18:55,750 --> 00:19:00,790
have the same or similar situation and

380
00:18:58,750 --> 00:19:03,610
here we have mostly proprietary

381
00:19:00,790 --> 00:19:05,740
controller models and I would rather

382
00:19:03,610 --> 00:19:08,379
love to have something which is more

383
00:19:05,740 --> 00:19:12,070
open and more standardized so that we

384
00:19:08,380 --> 00:19:17,310
can actually use it in whatever we want

385
00:19:12,070 --> 00:19:22,540
to do it so yeah thing is we want to

386
00:19:17,310 --> 00:19:25,720
like support extend our work to work

387
00:19:22,540 --> 00:19:29,050
with multiple switches and maybe use a

388
00:19:25,720 --> 00:19:31,600
different framework maybe move away from

389
00:19:29,050 --> 00:19:35,020
open flow and use p4 but that's still

390
00:19:31,600 --> 00:19:37,000
not yet decided so if you want to have a

391
00:19:35,020 --> 00:19:40,030
look at our code it's you are right on

392
00:19:37,000 --> 00:19:41,830
the on the slide so you can go to a git

393
00:19:40,030 --> 00:19:43,600
repository where you can download this

394
00:19:41,830 --> 00:19:46,780
stuff and if you want to contact me here

395
00:19:43,600 --> 00:19:50,429
on my contact details so if there are

396
00:19:46,780 --> 00:19:50,430
any question I'm happy to answer

397
00:19:53,580 --> 00:19:58,570
so we probably have time for one quick

398
00:19:56,200 --> 00:20:08,980
question well the next presenter sets up

399
00:19:58,570 --> 00:20:10,450
I am curious whether you does your code

400
00:20:08,980 --> 00:20:15,160
assume no packet loss for the bad

401
00:20:10,450 --> 00:20:20,350
packets yeah basically you're gonna have

402
00:20:15,160 --> 00:20:24,309
a bad time okay yeah yeah because also

403
00:20:20,350 --> 00:20:25,899
there's a yeah yeah I've seen people do

404
00:20:24,309 --> 00:20:28,480
that in production of quotations and

405
00:20:25,900 --> 00:20:30,640
it's fallen over for them because for

406
00:20:28,480 --> 00:20:34,059
example I mean if you're in Wired maybe

407
00:20:30,640 --> 00:20:36,429
you're okay yeah it's a it's the target

408
00:20:34,059 --> 00:20:40,389
is wired Network so yeah if you're on

409
00:20:36,429 --> 00:20:42,880
Wi-Fi like no I am we were actually

410
00:20:40,390 --> 00:20:46,440
actively targeting wild wild networks

411
00:20:42,880 --> 00:20:49,299
because I feel like that's that's like

412
00:20:46,440 --> 00:20:53,650
neglected area so nobody really does

413
00:20:49,299 --> 00:20:55,750
does so for excess networks I don't see

414
00:20:53,650 --> 00:20:58,770
anybody doing it I mean we see a lot of

415
00:20:55,750 --> 00:21:02,440
activities you see like a lot of

416
00:20:58,770 --> 00:21:04,240
activity knee in Wi-Fi space but for for

417
00:21:02,440 --> 00:21:08,190
just ordinary switch Ethernet networks

418
00:21:04,240 --> 00:21:12,460
it's everybody assumes it's just there

419
00:21:08,190 --> 00:21:15,520
and you're right I mean it's a there's a

420
00:21:12,460 --> 00:21:17,860
whole lot of assumption here and the

421
00:21:15,520 --> 00:21:19,660
question is really should we maybe

422
00:21:17,860 --> 00:21:24,909
change some of the assumptions because

423
00:21:19,660 --> 00:21:28,570
sort of and it is transparent switching

424
00:21:24,910 --> 00:21:30,669
approach for Ethernet is head I mean has

425
00:21:28,570 --> 00:21:33,600
its merits it's working but it's also

426
00:21:30,669 --> 00:21:37,480
introducing a lot of troubles which may

427
00:21:33,600 --> 00:21:39,790
or may not have if he had a much better

428
00:21:37,480 --> 00:21:42,580
integration and finding out who we

429
00:21:39,790 --> 00:21:48,639
actually aren't and yeah and basically

430
00:21:42,580 --> 00:21:50,740
using git dodges a basically just that's

431
00:21:48,640 --> 00:21:54,760
the only thing we could use without

432
00:21:50,740 --> 00:21:57,130
changing any protocols it's yes maybe

433
00:21:54,760 --> 00:22:01,780
chat more on the break thanks for your

434
00:21:57,130 --> 00:22:04,150
talk so up next we have Sylvester not us

435
00:22:01,780 --> 00:22:05,230
from Ericsson research he says he's

436
00:22:04,150 --> 00:22:07,870
working with traffic man

437
00:22:05,230 --> 00:22:10,240
for twenty years and he's interested in

438
00:22:07,870 --> 00:22:11,830
finding practical scenarios where fast

439
00:22:10,240 --> 00:22:14,020
and precise control of resource sharing

440
00:22:11,830 --> 00:22:16,030
is needed among a high number of flows

441
00:22:14,020 --> 00:22:17,860
so I think if you've got practical

442
00:22:16,030 --> 00:22:29,320
problems like that perhaps find him in

443
00:22:17,860 --> 00:22:31,120
the break let's take it this time silver

444
00:22:29,320 --> 00:22:32,620
sir presenting our paper to both score

445
00:22:31,120 --> 00:22:34,719
statements fairness and multiple time

446
00:22:32,620 --> 00:22:37,750
scales paper together with my university

447
00:22:34,720 --> 00:22:41,200
colleagues you can find all our papers

448
00:22:37,750 --> 00:22:43,059
on our home page so our goal is to

449
00:22:41,200 --> 00:22:45,520
extend fairness to multiple time scales

450
00:22:43,059 --> 00:22:46,899
so first of all we want to define some

451
00:22:45,520 --> 00:22:48,580
kind of mood temperature fairness we

452
00:22:46,900 --> 00:22:50,470
want to be all done existing frameworks

453
00:22:48,580 --> 00:22:52,389
namely two frameworks one is the per

454
00:22:50,470 --> 00:22:55,540
packet value base cover stateless member

455
00:22:52,390 --> 00:22:57,429
the other is another paper of mine not

456
00:22:55,540 --> 00:23:00,010
with the same also as it is called moody

457
00:22:57,429 --> 00:23:03,220
time scale bandit profile and we also

458
00:23:00,010 --> 00:23:05,950
want to provide efficient and versatile

459
00:23:03,220 --> 00:23:08,020
in implementation and versatile meaning

460
00:23:05,950 --> 00:23:11,169
that we want to provide fine fine gain

461
00:23:08,020 --> 00:23:12,639
fairness on multiple time scales that is

462
00:23:11,169 --> 00:23:14,650
independent of traffic mixes and

463
00:23:12,640 --> 00:23:17,710
resource bandwidth and I also want to

464
00:23:14,650 --> 00:23:19,419
demonstrate some advantages and some

465
00:23:17,710 --> 00:23:23,200
motivation for this as an example

466
00:23:19,419 --> 00:23:25,299
motivation is T is from a paper getting

467
00:23:23,200 --> 00:23:27,010
a scheme to instantly serve up flows for

468
00:23:25,299 --> 00:23:28,960
improved performance by maintaining

469
00:23:27,010 --> 00:23:30,400
fairness between other participant flows

470
00:23:28,960 --> 00:23:32,559
remains an open significant design

471
00:23:30,400 --> 00:23:34,480
problem to be investigated and we think

472
00:23:32,559 --> 00:23:37,990
that we take a step forward in in that

473
00:23:34,480 --> 00:23:41,020
direction sorry

474
00:23:37,990 --> 00:23:42,640
so overview of course stateless resource

475
00:23:41,020 --> 00:23:44,520
sharing with the example of per packet

476
00:23:42,640 --> 00:23:46,990
value base course agency so sharing its

477
00:23:44,520 --> 00:23:49,090
it's a framework which allows a wide

478
00:23:46,990 --> 00:23:51,220
variety of detailed and flexible

479
00:23:49,090 --> 00:23:53,290
policies I will I will go to some of the

480
00:23:51,220 --> 00:23:55,030
details of these policies and enforces

481
00:23:53,290 --> 00:23:57,100
the policies for all traffic mixes and

482
00:23:55,030 --> 00:23:58,960
scales with the number of flows there

483
00:23:57,100 --> 00:24:00,699
are two components packet marking and

484
00:23:58,960 --> 00:24:02,799
the edge and resource node everywhere

485
00:24:00,700 --> 00:24:04,419
else mainly in the core which does a

486
00:24:02,799 --> 00:24:07,059
command scheduling so packet marking at

487
00:24:04,419 --> 00:24:08,559
the edge and codes the policies into

488
00:24:07,059 --> 00:24:10,870
value marked on each and every packet

489
00:24:08,559 --> 00:24:14,139
and there's a packet marker per flow

490
00:24:10,870 --> 00:24:17,260
flow being the unit where we have

491
00:24:14,140 --> 00:24:19,059
resource sharing policies and based on

492
00:24:17,260 --> 00:24:22,870
that packet marking the resource node

493
00:24:19,059 --> 00:24:24,639
doesn't know about policies flows it

494
00:24:22,870 --> 00:24:26,500
doesn't have to have separate keys it

495
00:24:24,640 --> 00:24:29,200
only does its behavior based on packet

496
00:24:26,500 --> 00:24:30,640
marking and packet marking only and we

497
00:24:29,200 --> 00:24:33,360
have very fast and simple

498
00:24:30,640 --> 00:24:37,179
implementations we actually had a paper

499
00:24:33,360 --> 00:24:38,860
one year and two years ago in a inr we

500
00:24:37,179 --> 00:24:40,809
about reduce resources of

501
00:24:38,860 --> 00:24:42,370
implementations but this paper is not

502
00:24:40,809 --> 00:24:44,799
about resource and implementation and we

503
00:24:42,370 --> 00:24:50,289
reveal in this paper use our resources

504
00:24:44,799 --> 00:24:52,179
implementation from last year so

505
00:24:50,289 --> 00:24:54,850
betrayed measurements and timescales

506
00:24:52,179 --> 00:24:57,220
botrytis derived measure there are all

507
00:24:54,850 --> 00:24:58,780
these great packet arrivals and these

508
00:24:57,220 --> 00:25:00,309
can be translated to bitrate and it

509
00:24:58,780 --> 00:25:02,830
which way it always has a timescale

510
00:25:00,309 --> 00:25:04,840
associated so it's a some kind of volume

511
00:25:02,830 --> 00:25:06,730
divided by some cut some time some kind

512
00:25:04,840 --> 00:25:09,220
of time and there are some natural

513
00:25:06,730 --> 00:25:12,039
timescales like OTT one second session

514
00:25:09,220 --> 00:25:14,169
duration may be one minute ten minutes

515
00:25:12,039 --> 00:25:16,030
and for example amounts is mostly cap is

516
00:25:14,169 --> 00:25:19,270
also a kind of like a bit rate limit

517
00:25:16,030 --> 00:25:21,190
over the month so you can see that some

518
00:25:19,270 --> 00:25:22,900
examples for the packet rival says if if

519
00:25:21,190 --> 00:25:25,510
in a normal TT more packet arrives and

520
00:25:22,900 --> 00:25:26,890
the RTT bit rate will be larger or there

521
00:25:25,510 --> 00:25:29,650
can be a session bit rate there can be

522
00:25:26,890 --> 00:25:31,270
bit rates averaged over pages which are

523
00:25:29,650 --> 00:25:33,220
larger than a session and then then

524
00:25:31,270 --> 00:25:35,230
these betrays will be smaller than the

525
00:25:33,220 --> 00:25:39,909
session that's right so why does that

526
00:25:35,230 --> 00:25:41,559
make sense that makes sense because we

527
00:25:39,909 --> 00:25:45,250
can have fairness and multiple times

528
00:25:41,559 --> 00:25:46,539
here so then do we measure a bit rate we

529
00:25:45,250 --> 00:25:48,250
can measure betrayed only when the

530
00:25:46,539 --> 00:25:50,500
source is active to describe for example

531
00:25:48,250 --> 00:25:53,409
the performance of the source but we can

532
00:25:50,500 --> 00:25:55,480
also measure betrayed during both active

533
00:25:53,409 --> 00:25:59,110
and inactive period to judge fairness of

534
00:25:55,480 --> 00:26:01,059
resource sharing so what can be a fan as

535
00:25:59,110 --> 00:26:03,610
goal a multiple time scale is to to

536
00:26:01,059 --> 00:26:05,440
balance the the bitrate measurements

537
00:26:03,610 --> 00:26:07,959
among these multiple time scales and for

538
00:26:05,440 --> 00:26:10,419
example to allow higher share on shorter

539
00:26:07,960 --> 00:26:13,659
time scales for flows below their fair

540
00:26:10,419 --> 00:26:16,360
share or longer time scales so there's

541
00:26:13,659 --> 00:26:18,250
an example there if we have the same

542
00:26:16,360 --> 00:26:20,740
fairness on each and every time so one

543
00:26:18,250 --> 00:26:22,659
to one sharing then there is the blue

544
00:26:20,740 --> 00:26:24,940
flow and blue flow is is having the same

545
00:26:22,659 --> 00:26:26,350
same resource all right like the yellow

546
00:26:24,940 --> 00:26:29,500
and it takes quite amount of time to

547
00:26:26,350 --> 00:26:33,199
download that loser but if you take into

548
00:26:29,500 --> 00:26:34,910
account that on a longer time scale

549
00:26:33,200 --> 00:26:36,950
the blue food didn't have any

550
00:26:34,910 --> 00:26:39,170
transmission you can allow a higher

551
00:26:36,950 --> 00:26:40,730
share on the shortest time scale so he

552
00:26:39,170 --> 00:26:44,180
said you cannot oh this one to five

553
00:26:40,730 --> 00:26:45,920
share and steal on the longer time scale

554
00:26:44,180 --> 00:26:48,860
the resource sharing remains one-to-one

555
00:26:45,920 --> 00:26:51,200
and assuming that the yellow user is

556
00:26:48,860 --> 00:26:52,760
downloading alone so the yellow users

557
00:26:51,200 --> 00:26:56,210
download time won't change why why the

558
00:26:52,760 --> 00:26:59,780
blue users stupid will be improved quite

559
00:26:56,210 --> 00:27:02,540
much and there's there is one more thing

560
00:26:59,780 --> 00:27:04,970
is this this is this was true for our

561
00:27:02,540 --> 00:27:07,100
previous paper but we also aim at smooth

562
00:27:04,970 --> 00:27:09,530
transition at at relations between the

563
00:27:07,100 --> 00:27:12,230
rates measured at different time scale

564
00:27:09,530 --> 00:27:14,629
so we don't want to have sudden rate

565
00:27:12,230 --> 00:27:16,670
changes when the relation between rates

566
00:27:14,630 --> 00:27:18,100
changes I will go to more more more the

567
00:27:16,670 --> 00:27:21,550
details later there are much more

568
00:27:18,100 --> 00:27:25,459
novelties compared to the previous table

569
00:27:21,550 --> 00:27:28,430
but first a short introduction to be a

570
00:27:25,460 --> 00:27:31,190
backpack if you are you marking like

571
00:27:28,430 --> 00:27:32,570
versatility so we define in the per

572
00:27:31,190 --> 00:27:35,830
pocket value framework we define

573
00:27:32,570 --> 00:27:38,300
policies throughput value functions and

574
00:27:35,830 --> 00:27:39,919
these are for a single time scale they

575
00:27:38,300 --> 00:27:41,480
provide a very fine-grained control

576
00:27:39,920 --> 00:27:44,090
which is independent of traffic mix and

577
00:27:41,480 --> 00:27:45,620
resource bandwidth so these these meet

578
00:27:44,090 --> 00:27:49,370
our requirements for a single time scale

579
00:27:45,620 --> 00:27:52,129
and if you have a traffic mix if you

580
00:27:49,370 --> 00:27:53,899
have a resource bandwidth then that will

581
00:27:52,130 --> 00:27:56,090
always result in something we call

582
00:27:53,900 --> 00:27:57,800
condition threshold value and condition

583
00:27:56,090 --> 00:28:01,879
threshold value is a horizontal line on

584
00:27:57,800 --> 00:28:03,830
this value function curves and if you

585
00:28:01,880 --> 00:28:05,000
take the intersection of the stupid

586
00:28:03,830 --> 00:28:08,000
value functions and the condition

587
00:28:05,000 --> 00:28:11,150
threshold values then you will get the

588
00:28:08,000 --> 00:28:12,770
stupid targets at all of the all of the

589
00:28:11,150 --> 00:28:14,300
congestion levels I have three examples

590
00:28:12,770 --> 00:28:16,460
here high congestion medium condition

591
00:28:14,300 --> 00:28:17,570
low condition and the high congestion

592
00:28:16,460 --> 00:28:19,160
there

593
00:28:17,570 --> 00:28:20,720
there are several traffic classes here

594
00:28:19,160 --> 00:28:22,610
but the interesting ones are the gold in

595
00:28:20,720 --> 00:28:24,140
the silver so in in case of high

596
00:28:22,610 --> 00:28:26,840
congestion you'd like out such to get

597
00:28:24,140 --> 00:28:28,990
wise this route of silver flows in case

598
00:28:26,840 --> 00:28:31,550
of low congestion we would like to have

599
00:28:28,990 --> 00:28:33,830
God flows get four times the super soap

600
00:28:31,550 --> 00:28:35,840
and and what is in-between is medium

601
00:28:33,830 --> 00:28:38,510
congestion when silver flies over the

602
00:28:35,840 --> 00:28:41,740
reach ten miles per second then those

603
00:28:38,510 --> 00:28:44,510
flaws can't just can't get can't just

604
00:28:41,740 --> 00:28:46,610
get the fall times but it gets the rest

605
00:28:44,510 --> 00:28:46,820
so it gets something between two times

606
00:28:46,610 --> 00:28:49,129
and

607
00:28:46,820 --> 00:28:50,870
four times so the rationale behind is to

608
00:28:49,130 --> 00:28:52,759
have some kind of for example mini

609
00:28:50,870 --> 00:28:54,289
movers you put Target and Auntie

610
00:28:52,759 --> 00:28:56,360
aluminum so you could put target is met

611
00:28:54,289 --> 00:28:58,309
for the lower priority flow we shouldn't

612
00:28:56,360 --> 00:29:00,110
prioritize the higher priority flow that

613
00:28:58,309 --> 00:29:02,960
much and this is again an illustration

614
00:29:00,110 --> 00:29:07,219
of the Versa type policies we can have

615
00:29:02,960 --> 00:29:10,519
with this framework and and again we

616
00:29:07,220 --> 00:29:13,100
just set based on these curves we

617
00:29:10,519 --> 00:29:14,779
redefine packet marking so how can we

618
00:29:13,100 --> 00:29:17,178
have packet barking based on a secret

619
00:29:14,779 --> 00:29:19,460
value curve we have incoming packets we

620
00:29:17,179 --> 00:29:21,379
measure the rate somehow so these are

621
00:29:19,460 --> 00:29:25,190
the rate based packet marking policies

622
00:29:21,379 --> 00:29:28,879
so we we measure for example rate 48 and

623
00:29:25,190 --> 00:29:31,940
then we determine a uniform random rate

624
00:29:28,879 --> 00:29:33,289
between 0 and that rate take the value

625
00:29:31,940 --> 00:29:36,200
of the stupid value function at that

626
00:29:33,289 --> 00:29:40,700
point and mark that packet value on the

627
00:29:36,200 --> 00:29:42,470
packet and just by having that marking

628
00:29:40,700 --> 00:29:44,779
and maximizing the transmitted packet

629
00:29:42,470 --> 00:29:46,669
value in the core we've realized a

630
00:29:44,779 --> 00:29:48,620
resource sharing target sum on this so

631
00:29:46,669 --> 00:29:50,389
there are other papers about how this

632
00:29:48,620 --> 00:29:53,449
how this happens but it's important to

633
00:29:50,389 --> 00:29:59,870
understand this this kind of thing for

634
00:29:53,450 --> 00:30:01,610
understanding this paper so but for this

635
00:29:59,870 --> 00:30:02,840
video single rate measurement a single

636
00:30:01,610 --> 00:30:05,240
time scale but if you want to have

637
00:30:02,840 --> 00:30:06,980
multiple time scales we need read to

638
00:30:05,240 --> 00:30:09,590
measure bit rates and multiple time

639
00:30:06,980 --> 00:30:11,659
scales and we actually introduce two

640
00:30:09,590 --> 00:30:13,370
different rate measurement algorithms we

641
00:30:11,659 --> 00:30:15,350
have token bucket base rate measurement

642
00:30:13,370 --> 00:30:17,029
organ for the RTT time scale only

643
00:30:15,350 --> 00:30:18,889
because we think that the token bucket

644
00:30:17,029 --> 00:30:20,419
based rate measurement models the first

645
00:30:18,889 --> 00:30:22,370
reboot and our fair share of the lot are

646
00:30:20,419 --> 00:30:24,860
not quite well it's a single part token

647
00:30:22,370 --> 00:30:26,809
bucket it's rate change changes when the

648
00:30:24,860 --> 00:30:29,959
bucket becomes empty or full details are

649
00:30:26,809 --> 00:30:31,490
in the paper and the the other rate

650
00:30:29,960 --> 00:30:34,580
measurement we used for longer time

651
00:30:31,490 --> 00:30:35,779
scales is it is a sliding window based

652
00:30:34,580 --> 00:30:37,340
rate measurement so the rate is

653
00:30:35,779 --> 00:30:40,759
basically the amount of bits arrived in

654
00:30:37,340 --> 00:30:42,379
the last time scale interval divided by

655
00:30:40,759 --> 00:30:44,210
the by the length of the time scale and

656
00:30:42,379 --> 00:30:46,428
it's actually an efficient efficient

657
00:30:44,210 --> 00:30:49,429
approximation of that OGG and TDM tv-ma

658
00:30:46,429 --> 00:30:50,960
and an interesting thing is about this

659
00:30:49,429 --> 00:30:52,100
rate instrument organs if you if you

660
00:30:50,960 --> 00:30:54,289
think about them is that learn

661
00:30:52,100 --> 00:30:55,899
transmissions thoughts if you if you

662
00:30:54,289 --> 00:30:58,010
would all timescales

663
00:30:55,899 --> 00:30:59,418
increasing and and have the rate

664
00:30:58,010 --> 00:31:00,620
measurement organs when the transmission

665
00:30:59,419 --> 00:31:02,600
starts the

666
00:31:00,620 --> 00:31:04,219
the bit rate on the smallest time scale

667
00:31:02,600 --> 00:31:06,110
is always larger than the bit rate on

668
00:31:04,220 --> 00:31:07,550
the next time scale and sense you can

669
00:31:06,110 --> 00:31:11,059
see an example there are like time scale

670
00:31:07,550 --> 00:31:14,840
ones like five subtank that and first

671
00:31:11,059 --> 00:31:17,210
the the once one second rate measurement

672
00:31:14,840 --> 00:31:19,010
reaches the since we put down the five

673
00:31:17,210 --> 00:31:22,370
second and 10 seconds and and the slicer

674
00:31:19,010 --> 00:31:24,260
version and the transmission stops so

675
00:31:22,370 --> 00:31:26,059
for new clothes arriving to the system

676
00:31:24,260 --> 00:31:27,559
they will have pretty big bit rate

677
00:31:26,059 --> 00:31:29,629
measurements or no time scales but they

678
00:31:27,559 --> 00:31:33,710
will still have moderate rate

679
00:31:29,630 --> 00:31:35,900
measurements along with time scales so

680
00:31:33,710 --> 00:31:38,540
how can we then define throughput on

681
00:31:35,900 --> 00:31:41,559
multiple time scales instead of having a

682
00:31:38,540 --> 00:31:45,470
single supa trial function per flow type

683
00:31:41,559 --> 00:31:48,200
we introduce once we put value function

684
00:31:45,470 --> 00:31:51,320
per time scale per flow type so for a

685
00:31:48,200 --> 00:31:53,059
single kind of flow instead of having

686
00:31:51,320 --> 00:31:54,770
one such function you're having for such

687
00:31:53,059 --> 00:32:00,230
functions and all of these have a time

688
00:31:54,770 --> 00:32:02,990
scale associated so so what does it mean

689
00:32:00,230 --> 00:32:06,500
we first defined dominant time scale so

690
00:32:02,990 --> 00:32:08,300
dominant time scale is then for example

691
00:32:06,500 --> 00:32:09,860
time scale R is the dominant when the

692
00:32:08,300 --> 00:32:13,070
rate measurement at that time scale is

693
00:32:09,860 --> 00:32:14,780
the largest and if there are more than

694
00:32:13,070 --> 00:32:17,540
one than the longest time scale applies

695
00:32:14,780 --> 00:32:19,639
and as an example have two fluids of the

696
00:32:17,540 --> 00:32:21,230
same flow type one has dominant time

697
00:32:19,640 --> 00:32:23,630
scale one the other tournaments go

698
00:32:21,230 --> 00:32:25,100
forward so one has just arrived the

699
00:32:23,630 --> 00:32:27,590
other has a long history in the system

700
00:32:25,100 --> 00:32:29,300
and we say that multi time scale

701
00:32:27,590 --> 00:32:33,830
research airing is such that they should

702
00:32:29,300 --> 00:32:36,559
share the bottleneck according to TV f4

703
00:32:33,830 --> 00:32:38,659
and TV as one so it is as if they would

704
00:32:36,559 --> 00:32:41,389
be different flow flow types in the

705
00:32:38,660 --> 00:32:43,940
single time scale framework so if you if

706
00:32:41,390 --> 00:32:46,520
you look at it then the the new flow is

707
00:32:43,940 --> 00:32:48,800
the is the blue one it should have much

708
00:32:46,520 --> 00:32:53,540
higher so you could share and the old

709
00:32:48,800 --> 00:32:55,040
old flow the green one but we also aim

710
00:32:53,540 --> 00:32:56,780
smooth transitions when the relation

711
00:32:55,040 --> 00:32:58,129
between our eyes change so if there is

712
00:32:56,780 --> 00:32:59,480
an oscillation between which is the

713
00:32:58,130 --> 00:33:00,620
dominant time scale we don't want to

714
00:32:59,480 --> 00:33:05,390
have an oscillation in the resource

715
00:33:00,620 --> 00:33:07,669
sharing so how do you achieve it there

716
00:33:05,390 --> 00:33:09,920
is something in our previous paper

717
00:33:07,670 --> 00:33:12,530
called mu times given the profile and it

718
00:33:09,920 --> 00:33:14,690
has a few go presidencies and the future

719
00:33:12,530 --> 00:33:17,510
chemicals associated with each of these

720
00:33:14,690 --> 00:33:19,160
and this can market given the preference

721
00:33:17,510 --> 00:33:23,230
if there are enough tokens at all of

722
00:33:19,160 --> 00:33:26,060
these buckets and in theory we could

723
00:33:23,230 --> 00:33:28,190
quantize smooth times get through it

724
00:33:26,060 --> 00:33:29,659
value function to an MTS be VP but is

725
00:33:28,190 --> 00:33:32,450
not practical because we would have

726
00:33:29,660 --> 00:33:35,390
thousands of token buckets but we can

727
00:33:32,450 --> 00:33:38,630
use that to approximate what happens we

728
00:33:35,390 --> 00:33:40,640
can we can look at multi times get

729
00:33:38,630 --> 00:33:43,190
bandwidth profile as an indirect measure

730
00:33:40,640 --> 00:33:46,580
mental operation rate on each time scale

731
00:33:43,190 --> 00:33:48,560
and limiting token buckets would would

732
00:33:46,580 --> 00:33:50,360
determine the measurement again I can't

733
00:33:48,560 --> 00:33:55,399
go through all of the details there but

734
00:33:50,360 --> 00:33:57,620
if you look at the look at what happens

735
00:33:55,400 --> 00:33:59,390
is that the transition between the

736
00:33:57,620 --> 00:34:00,889
street value function will happen at the

737
00:33:59,390 --> 00:34:04,280
rate measurements at the different time

738
00:34:00,890 --> 00:34:06,140
scales and by using that we can have an

739
00:34:04,280 --> 00:34:08,659
efficient packet marking based on these

740
00:34:06,140 --> 00:34:10,250
repeat value functions so you can

741
00:34:08,659 --> 00:34:12,649
measure bit rate for all of the time

742
00:34:10,250 --> 00:34:14,780
scales at these bit rates you can

743
00:34:12,649 --> 00:34:16,429
determine the distance between the

744
00:34:14,780 --> 00:34:20,000
street value function and that will

745
00:34:16,429 --> 00:34:22,760
result the blue region of difference we

746
00:34:20,000 --> 00:34:24,379
could write functions and similarly to

747
00:34:22,760 --> 00:34:26,990
the single x kilogram you can have a

748
00:34:24,379 --> 00:34:29,929
uniform random number determine the

749
00:34:26,989 --> 00:34:31,879
right region for for determining your

750
00:34:29,929 --> 00:34:33,409
packet value so you can choose between

751
00:34:31,879 --> 00:34:37,940
region 1 2 3 & 4

752
00:34:33,409 --> 00:34:39,500
based on relations between your random

753
00:34:37,940 --> 00:34:42,860
number and the measured bit rates and

754
00:34:39,500 --> 00:34:44,449
determine your your packet value

755
00:34:42,860 --> 00:34:50,720
accordingly and it's actually a pretty

756
00:34:44,449 --> 00:34:52,609
fast algorithm so what can be achieved

757
00:34:50,719 --> 00:34:54,080
with this we did some simulations to

758
00:34:52,610 --> 00:34:56,840
understand what happens in the system

759
00:34:54,080 --> 00:34:58,759
it's a pretty complex system can we

760
00:34:56,840 --> 00:35:00,950
achieve some kind of gains can be indeed

761
00:34:58,760 --> 00:35:04,160
boost new flares things like that so we

762
00:35:00,950 --> 00:35:05,810
use an s3 we use the same core scheduler

763
00:35:04,160 --> 00:35:07,910
like in our previous organ with a

764
00:35:05,810 --> 00:35:09,860
millisecond delay target we had several

765
00:35:07,910 --> 00:35:11,960
flows one flow consists of either a

766
00:35:09,860 --> 00:35:13,880
single DC TCP connection or for for

767
00:35:11,960 --> 00:35:15,950
cubic TCP connect on Josh connections

768
00:35:13,880 --> 00:35:18,140
which means faster slow start for for

769
00:35:15,950 --> 00:35:20,060
the cubic flowers we have thermally

770
00:35:18,140 --> 00:35:25,009
second one second five second and ten

771
00:35:20,060 --> 00:35:26,900
seconds this time skills and tvf for was

772
00:35:25,010 --> 00:35:28,359
gold and silver as in the single

773
00:35:26,900 --> 00:35:30,970
timescale t VF

774
00:35:28,359 --> 00:35:33,640
and in each and every time scale we we

775
00:35:30,970 --> 00:35:37,269
double the share so and timescale:1 we

776
00:35:33,640 --> 00:35:38,680
should have twice the share five time

777
00:35:37,269 --> 00:35:40,359
scale five we should have doubled the

778
00:35:38,680 --> 00:35:42,129
share time scale one four times the

779
00:35:40,359 --> 00:35:44,710
share and time scale that in a second

780
00:35:42,130 --> 00:35:48,150
eight times the share of the long time

781
00:35:44,710 --> 00:35:50,980
ten second average stupid

782
00:35:48,150 --> 00:35:53,980
so some simulation scenarios we had

783
00:35:50,980 --> 00:35:57,130
first greedy flows of the same traffic

784
00:35:53,980 --> 00:35:58,779
class and DC TCP the blue flow was in

785
00:35:57,130 --> 00:36:00,160
the system for longer time than the

786
00:35:58,779 --> 00:36:02,140
longest time scale and then the yellow

787
00:36:00,160 --> 00:36:04,868
flower light arrives to the system the

788
00:36:02,140 --> 00:36:08,920
left-hand side curve is the is with the

789
00:36:04,869 --> 00:36:11,349
multi time scale PPV and the right hand

790
00:36:08,920 --> 00:36:13,900
side curve is the reference so in the

791
00:36:11,349 --> 00:36:16,660
reference you can see that with the old

792
00:36:13,900 --> 00:36:18,700
framework we knew it converges to the

793
00:36:16,660 --> 00:36:20,589
fair share pretty fast we we have one

794
00:36:18,700 --> 00:36:22,989
second average throughput here so it's

795
00:36:20,589 --> 00:36:25,720
it's basically converges within one

796
00:36:22,989 --> 00:36:27,249
second but what happens with the multi

797
00:36:25,720 --> 00:36:29,769
time scale is that when the when a new

798
00:36:27,249 --> 00:36:31,538
flow arrives it is boosted first then

799
00:36:29,769 --> 00:36:36,069
there are some oscillations and then

800
00:36:31,539 --> 00:36:38,200
they converge to the fair share and how

801
00:36:36,069 --> 00:36:41,799
can you how can we visualize it or

802
00:36:38,200 --> 00:36:44,049
understand it me even more is to is to

803
00:36:41,799 --> 00:36:45,788
measure two things one is the one is we

804
00:36:44,049 --> 00:36:47,829
call the flow time averages and there is

805
00:36:45,789 --> 00:36:49,989
the five five second time being the

806
00:36:47,829 --> 00:36:51,670
average so the flow time average is the

807
00:36:49,989 --> 00:36:53,859
total amount of buys the flow has

808
00:36:51,670 --> 00:36:55,359
downloaded divided by the total amount

809
00:36:53,859 --> 00:36:57,640
of time the flow has spent in the system

810
00:36:55,359 --> 00:37:00,009
why the fisa five second time window

811
00:36:57,640 --> 00:37:02,078
average is basically looking back back

812
00:37:00,009 --> 00:37:03,430
back at the last five seconds and and

813
00:37:02,079 --> 00:37:05,440
see what was the average stupider

814
00:37:03,430 --> 00:37:08,078
including periods when the flavor wasn't

815
00:37:05,440 --> 00:37:09,970
even there and what you can see I

816
00:37:08,079 --> 00:37:12,039
highlighted some cases with the cubic

817
00:37:09,970 --> 00:37:14,649
multi timescale vs. there are friends so

818
00:37:12,039 --> 00:37:17,200
what you can see there is that the flow

819
00:37:14,650 --> 00:37:20,349
time averaged one this is a relative

820
00:37:17,200 --> 00:37:22,180
curve and one is the is the equal share

821
00:37:20,349 --> 00:37:24,430
it's it's not any more than the furture

822
00:37:22,180 --> 00:37:27,578
so the flow time averaged has a high

823
00:37:24,430 --> 00:37:29,558
boost at the beginning and actually the

824
00:37:27,579 --> 00:37:33,039
five second average fair share of the

825
00:37:29,559 --> 00:37:34,599
flow which is almost the the equal share

826
00:37:33,039 --> 00:37:38,619
in one second which means that in one

827
00:37:34,599 --> 00:37:42,170
second the flow can download as as much

828
00:37:38,619 --> 00:37:43,730
data as his equal share in the last

829
00:37:42,170 --> 00:37:46,370
second including the four seconds when

830
00:37:43,730 --> 00:37:48,680
he wasn't yet there but after a period

831
00:37:46,370 --> 00:37:50,690
you can say see that it will go to the

832
00:37:48,680 --> 00:37:52,370
equal sharing site it will converge to

833
00:37:50,690 --> 00:37:54,410
equal sharing with flows it's a flow is

834
00:37:52,370 --> 00:38:02,060
in the system for a long time it will

835
00:37:54,410 --> 00:38:04,940
have equal share with other flows I will

836
00:38:02,060 --> 00:38:08,600
show show this slide first so in this

837
00:38:04,940 --> 00:38:10,820
example there are continuous arrivals to

838
00:38:08,600 --> 00:38:13,790
tiny flows arrive to the system every 10

839
00:38:10,820 --> 00:38:16,160
second and you can see that the number

840
00:38:13,790 --> 00:38:18,940
of flows is of course increases say the

841
00:38:16,160 --> 00:38:21,770
the per flow equal bandwidth decreases

842
00:38:18,940 --> 00:38:23,960
but for each of the new flowers there

843
00:38:21,770 --> 00:38:25,910
are temporarily boosted each and every

844
00:38:23,960 --> 00:38:30,380
case independently of the number of

845
00:38:25,910 --> 00:38:34,490
flows and then they all converge to two

846
00:38:30,380 --> 00:38:36,290
to the equal share as we desired and

847
00:38:34,490 --> 00:38:38,600
there's another example here this is a

848
00:38:36,290 --> 00:38:41,029
very simple adaptive streaming model its

849
00:38:38,600 --> 00:38:44,720
inserts some kind of dialog to the

850
00:38:41,030 --> 00:38:47,950
system every 10 second and there is a an

851
00:38:44,720 --> 00:38:50,470
initial time an initial download and we

852
00:38:47,950 --> 00:38:53,960
show how much time does it take to

853
00:38:50,470 --> 00:38:57,740
download one second verse of video data

854
00:38:53,960 --> 00:38:59,780
and because the MTS the multi timescale

855
00:38:57,740 --> 00:39:02,000
resource sharing boosts the initial

856
00:38:59,780 --> 00:39:04,390
pause there is a much faster startup so

857
00:39:02,000 --> 00:39:07,340
the time display is much less and also

858
00:39:04,390 --> 00:39:11,900
every time it yes it's basically a lot

859
00:39:07,340 --> 00:39:14,750
about one side and it also feels a play

860
00:39:11,900 --> 00:39:17,480
after but for most foster stage it it

861
00:39:14,750 --> 00:39:24,110
defines and implements mu times E and s

862
00:39:17,480 --> 00:39:26,090
for far enough place so so this is this

863
00:39:24,110 --> 00:39:28,250
initial results really promising so we

864
00:39:26,090 --> 00:39:30,320
have some kind of multi times get

865
00:39:28,250 --> 00:39:31,970
fairness which works there are

866
00:39:30,320 --> 00:39:33,830
significant performance gain so

867
00:39:31,970 --> 00:39:36,439
advantage for new clothes for the

868
00:39:33,830 --> 00:39:37,940
starting phase and there is also better

869
00:39:36,440 --> 00:39:39,140
long time fairness for flows we don't

870
00:39:37,940 --> 00:39:41,000
know if behavior but there is a quite

871
00:39:39,140 --> 00:39:43,370
amount of future work we are not quite

872
00:39:41,000 --> 00:39:45,860
sure how it can be used what how is it

873
00:39:43,370 --> 00:39:47,180
useful so what is the for example what

874
00:39:45,860 --> 00:39:49,280
is the practical number of times has to

875
00:39:47,180 --> 00:39:51,980
be to reach real advantages for the

876
00:39:49,280 --> 00:39:53,540
users how shall this be dimensioned how

877
00:39:51,980 --> 00:39:54,890
shall we design the move to time scale

878
00:39:53,540 --> 00:39:56,090
sleep its value functions we use the

879
00:39:54,890 --> 00:39:59,210
simplest example week

880
00:39:56,090 --> 00:40:01,160
imagine does it make sense different to

881
00:39:59,210 --> 00:40:03,610
use different kind of policies in this

882
00:40:01,160 --> 00:40:06,950
TV s word for the Piraeus timescales and

883
00:40:03,610 --> 00:40:17,510
and what what we can find which can be

884
00:40:06,950 --> 00:40:18,649
redundant like further so we're still

885
00:40:17,510 --> 00:40:23,620
running a little bit behind but we've

886
00:40:18,650 --> 00:40:23,620
got time for one question mm-hmm

887
00:40:27,970 --> 00:40:30,970
questions

888
00:40:37,140 --> 00:40:41,109
yes I'll ask one quick one so are you

889
00:40:40,120 --> 00:40:43,540
thinking about this mainly in the

890
00:40:41,110 --> 00:40:45,010
context of like data center networks and

891
00:40:43,540 --> 00:40:49,570
data center workloads or would you see

892
00:40:45,010 --> 00:40:51,790
it in other types of networks our main

893
00:40:49,570 --> 00:40:54,670
focus is really access network and

894
00:40:51,790 --> 00:40:57,730
broadband users so it's it's not in data

895
00:40:54,670 --> 00:40:59,950
center it's it's more about smaller even

896
00:40:57,730 --> 00:41:02,050
smaller times guys but it's for example

897
00:40:59,950 --> 00:41:10,600
for residential access and fair sharing

898
00:41:02,050 --> 00:41:12,730
over over congested access things all

899
00:41:10,600 --> 00:41:35,589
right let's thank the presenter one last

900
00:41:12,730 --> 00:41:39,370
time Satya are you there can you unmute

901
00:41:35,590 --> 00:41:46,470
yourself Hey yeah I'm sure can you hear

902
00:41:39,370 --> 00:41:46,470
me okay yeah yeah we can see you too

903
00:41:48,160 --> 00:41:54,399
[Music]

904
00:41:51,180 --> 00:41:57,940
okay so your Center let me know when to

905
00:41:54,400 --> 00:42:00,730
advance the slides so for our last talk

906
00:41:57,940 --> 00:42:03,400
we've got Satya Kumaran money from

907
00:42:00,730 --> 00:42:05,920
University of Wisconsin and he's made

908
00:42:03,400 --> 00:42:09,730
presenting some work on managing time in

909
00:42:05,920 --> 00:42:10,800
the Internet hello everyone I'm Satya

910
00:42:09,730 --> 00:42:14,380
I'm from the University of

911
00:42:10,800 --> 00:42:16,450
wisconsin-madison and thanks to visa

912
00:42:14,380 --> 00:42:19,030
processing delays I'm currently in

913
00:42:16,450 --> 00:42:19,689
center Daylight Time which is an hour

914
00:42:19,030 --> 00:42:22,530
behind

915
00:42:19,690 --> 00:42:26,230
Montreal and today I'm going to be

916
00:42:22,530 --> 00:42:28,360
talking about our work in examining how

917
00:42:26,230 --> 00:42:30,370
current local time is reported by

918
00:42:28,360 --> 00:42:36,880
devices on the Internet

919
00:42:30,370 --> 00:42:37,299
next slide please can we go to the next

920
00:42:36,880 --> 00:42:49,650
slide please

921
00:42:37,300 --> 00:42:52,000
I think you skipped a slide yeah yeah so

922
00:42:49,650 --> 00:42:54,760
Internet time synchronization is useful

923
00:42:52,000 --> 00:42:57,220
for a variety of applications and these

924
00:42:54,760 --> 00:43:01,000
mechanisms synchronize clocks on devices

925
00:42:57,220 --> 00:43:03,879
to a common time scales such as UTC to

926
00:43:01,000 --> 00:43:05,830
make time more comprehensible people

927
00:43:03,880 --> 00:43:09,030
facing applications need to translate

928
00:43:05,830 --> 00:43:12,460
time from UTC to current local time and

929
00:43:09,030 --> 00:43:14,800
writing code to do this translation is

930
00:43:12,460 --> 00:43:18,010
notoriously difficult because several

931
00:43:14,800 --> 00:43:20,860
factors such as the daylight saving time

932
00:43:18,010 --> 00:43:23,530
rules and changes to these rules need to

933
00:43:20,860 --> 00:43:26,740
be considered further several edge cases

934
00:43:23,530 --> 00:43:29,500
need to be handled as well for example

935
00:43:26,740 --> 00:43:32,890
the island nation of Samoa skipped an

936
00:43:29,500 --> 00:43:35,290
entire day in December 2011 because they

937
00:43:32,890 --> 00:43:39,040
wanted to be on the tail the same time

938
00:43:35,290 --> 00:43:40,630
as Australia their closest trading

939
00:43:39,040 --> 00:43:46,120
partner on the other side of the

940
00:43:40,630 --> 00:43:49,540
International Dateline next like this so

941
00:43:46,120 --> 00:43:51,790
time zones originally alternated in the

942
00:43:49,540 --> 00:43:54,100
late 19th century in order to improve

943
00:43:51,790 --> 00:43:56,230
coordination in railway and Telegraph

944
00:43:54,100 --> 00:43:59,830
networks and the daylight saving time

945
00:43:56,230 --> 00:44:01,840
was introduced in 1918 in the u.s. in

946
00:43:59,830 --> 00:44:05,799
hopes of saving energy during the first

947
00:44:01,840 --> 00:44:08,440
world war and modern applications such

948
00:44:05,800 --> 00:44:11,740
as calendars need to handle and know

949
00:44:08,440 --> 00:44:14,740
about time zones and the time zone

950
00:44:11,740 --> 00:44:17,640
database is a critical asset that

951
00:44:14,740 --> 00:44:21,009
contains data and code that helps

952
00:44:17,640 --> 00:44:24,580
applications do this handling and this

953
00:44:21,010 --> 00:44:29,070
database was created by Arthur David

954
00:44:24,580 --> 00:44:33,390
Olsen in the early 1980s next like this

955
00:44:29,070 --> 00:44:36,610
so this time zone database consists of

956
00:44:33,390 --> 00:44:39,400
definition of time zones and the

957
00:44:36,610 --> 00:44:41,620
daylight saving time rules for every

958
00:44:39,400 --> 00:44:45,820
time zone and it contains both

959
00:44:41,620 --> 00:44:49,029
historical and current data so in this

960
00:44:45,820 --> 00:44:52,990
small snippet we have here we have bore

961
00:44:49,030 --> 00:44:55,130
a definition of a time zone and also the

962
00:44:52,990 --> 00:44:57,950
addition of DST phones

963
00:44:55,130 --> 00:45:01,249
so we've skipped a few lines here to

964
00:44:57,950 --> 00:45:04,308
save space and tidy so on top and we

965
00:45:01,249 --> 00:45:07,660
have the time zone definition for the

966
00:45:04,309 --> 00:45:12,529
New York Times here and it says until

967
00:45:07,660 --> 00:45:15,229
1883 New York was behind GMT by 4:00

968
00:45:12,529 --> 00:45:19,489
hour and 56 minutes and did not follow

969
00:45:15,229 --> 00:45:22,368
any daylight saving time and until 1967

970
00:45:19,489 --> 00:45:25,099
New York was behind GMT by 5 hours and

971
00:45:22,369 --> 00:45:29,059
had its own rules for observing daylight

972
00:45:25,099 --> 00:45:31,190
saving times and right now the daylight

973
00:45:29,059 --> 00:45:33,680
saving time in New York is same as the

974
00:45:31,190 --> 00:45:37,220
rest of the US and below that we have

975
00:45:33,680 --> 00:45:41,029
the DST rules currently in effect in the

976
00:45:37,220 --> 00:45:45,769
u.s. from 2007 the rule says that

977
00:45:41,029 --> 00:45:48,410
daylight savings start in March on the

978
00:45:45,769 --> 00:45:52,399
second Sunday where clocks are advanced

979
00:45:48,410 --> 00:45:55,609
by 1 R and end in November on the first

980
00:45:52,400 --> 00:45:58,279
Sunday so information like this is

981
00:45:55,609 --> 00:46:02,359
organized as text files in a typical

982
00:45:58,279 --> 00:46:05,420
unique style and bundled with code and

983
00:46:02,359 --> 00:46:08,538
reference implementations for C API

984
00:46:05,420 --> 00:46:12,109
functions to handle time zones and

985
00:46:08,539 --> 00:46:12,700
usually programs in the database next

986
00:46:12,109 --> 00:46:15,380
slide please

987
00:46:12,700 --> 00:46:18,589
so this database was placed in the

988
00:46:15,380 --> 00:46:22,219
public domain by Olson in 2009 and hence

989
00:46:18,589 --> 00:46:25,009
this is not owned by any entity the

990
00:46:22,219 --> 00:46:27,559
database is currently hosted by IAE and

991
00:46:25,009 --> 00:46:29,450
the process to update the database is

992
00:46:27,559 --> 00:46:32,630
defined in RFC

993
00:46:29,450 --> 00:46:34,598
six five five seven so the database is

994
00:46:32,630 --> 00:46:37,940
maintained by a community of volunteers

995
00:46:34,599 --> 00:46:41,029
and all decisions are finalized and

996
00:46:37,940 --> 00:46:42,559
published by a primary maintainer the

997
00:46:41,029 --> 00:46:46,190
current primary maintainer for the

998
00:46:42,559 --> 00:46:47,989
database a spa legged of UCLA the

999
00:46:46,190 --> 00:46:50,509
current version of this database has

1000
00:46:47,989 --> 00:46:52,309
three hundred and forty eight times

1001
00:46:50,509 --> 00:46:54,710
owned records for various time zones

1002
00:46:52,309 --> 00:46:57,799
across the internet oh sorry across the

1003
00:46:54,710 --> 00:47:00,710
world and this database is used by

1004
00:46:57,799 --> 00:47:03,890
almost all major operating systems such

1005
00:47:00,710 --> 00:47:07,900
as various flavors of Linux Android iOS

1006
00:47:03,890 --> 00:47:11,650
and various programming libraries

1007
00:47:07,900 --> 00:47:16,089
by TZ and Jorah time etc next slide

1008
00:47:11,650 --> 00:47:18,130
please so the actual rules for the time

1009
00:47:16,089 --> 00:47:22,058
zones and observing daylight saving time

1010
00:47:18,130 --> 00:47:25,000
is decided by the local corresponding

1011
00:47:22,059 --> 00:47:27,670
local government authorities and this

1012
00:47:25,000 --> 00:47:32,079
and this information and changes to such

1013
00:47:27,670 --> 00:47:34,510
rules are published either officially or

1014
00:47:32,079 --> 00:47:37,329
through the media and when such share

1015
00:47:34,510 --> 00:47:39,700
changes or updates are known the time

1016
00:47:37,329 --> 00:47:42,460
zone database community discusses such

1017
00:47:39,700 --> 00:47:45,189
changes the official time zone mailing

1018
00:47:42,460 --> 00:47:48,039
list and once the changes are finalized

1019
00:47:45,190 --> 00:47:49,930
a new release is prepared by the

1020
00:47:48,039 --> 00:47:53,289
maintainer and published at a known

1021
00:47:49,930 --> 00:47:57,009
location then it is up to the consumers

1022
00:47:53,289 --> 00:47:59,529
of this database to push these updates

1023
00:47:57,010 --> 00:48:01,420
to their end users which are typically

1024
00:47:59,529 --> 00:48:06,099
done through operating system updates

1025
00:48:01,420 --> 00:48:09,309
and any delay in this process has the

1026
00:48:06,099 --> 00:48:13,329
potential to cause major disruptions for

1027
00:48:09,309 --> 00:48:16,359
example in 2015 due to ongoing elections

1028
00:48:13,329 --> 00:48:18,990
the government of turkey decided to

1029
00:48:16,359 --> 00:48:22,328
delay the end of daylight saving time

1030
00:48:18,990 --> 00:48:24,700
and announced this change only three

1031
00:48:22,329 --> 00:48:28,950
weeks in advance to the actual date of

1032
00:48:24,700 --> 00:48:33,038
effect so what finally happened is the

1033
00:48:28,950 --> 00:48:37,180
update to the database being pushed was

1034
00:48:33,039 --> 00:48:40,930
delayed and the iOS update bundling

1035
00:48:37,180 --> 00:48:44,140
these changes reached the end users only

1036
00:48:40,930 --> 00:48:47,950
three days before the date of change so

1037
00:48:44,140 --> 00:48:50,700
what happened was a huge confusion on

1038
00:48:47,950 --> 00:48:54,220
what time of day it was

1039
00:48:50,700 --> 00:48:57,549
so given the wide use of the database

1040
00:48:54,220 --> 00:49:00,129
and huge impact the update process has

1041
00:48:57,549 --> 00:49:02,500
you are motivated to understand the

1042
00:49:00,130 --> 00:49:05,500
evolution of the database and the update

1043
00:49:02,500 --> 00:49:05,740
and maintenance processes next slide

1044
00:49:05,500 --> 00:49:10,180
please

1045
00:49:05,740 --> 00:49:13,089
yeah and for this analysis we use source

1046
00:49:10,180 --> 00:49:16,629
files from all 214 releases of the

1047
00:49:13,089 --> 00:49:19,089
database that span over 26 years they

1048
00:49:16,630 --> 00:49:20,229
also download the entire mailing list

1049
00:49:19,089 --> 00:49:24,130
archive

1050
00:49:20,229 --> 00:49:27,368
and perform text search on the archive

1051
00:49:24,130 --> 00:49:29,619
to identify problems and anomalies with

1052
00:49:27,369 --> 00:49:32,259
the database which will later discuss in

1053
00:49:29,619 --> 00:49:36,279
this talk to perform this analysis we

1054
00:49:32,259 --> 00:49:39,549
built a Python based processor tool that

1055
00:49:36,279 --> 00:49:43,089
can compare consecutive releases to

1056
00:49:39,549 --> 00:49:46,059
detect effective changes in zone and DST

1057
00:49:43,089 --> 00:49:49,630
rules and this tool is also capable of

1058
00:49:46,059 --> 00:49:51,940
identifying correction updates that is

1059
00:49:49,630 --> 00:49:55,989
updates that make changes to previous

1060
00:49:51,940 --> 00:50:01,959
updates so in total this tool identifies

1061
00:49:55,989 --> 00:50:04,769
about 2200 h2 zone and DST runs with 400

1062
00:50:01,959 --> 00:50:06,578
of those labeled as correction updates

1063
00:50:04,769 --> 00:50:12,279
next slide please

1064
00:50:06,579 --> 00:50:14,619
so based on this - what we do is we take

1065
00:50:12,279 --> 00:50:17,950
these updates and then classify them

1066
00:50:14,619 --> 00:50:21,099
into either making changes to time zones

1067
00:50:17,950 --> 00:50:24,489
or to DST rules and since we can extract

1068
00:50:21,099 --> 00:50:28,690
the release dates of this other updates

1069
00:50:24,489 --> 00:50:30,969
from the mailing list we also see

1070
00:50:28,690 --> 00:50:33,630
whether these updates make changes to

1071
00:50:30,969 --> 00:50:36,880
time stamps in the past or in the future

1072
00:50:33,630 --> 00:50:39,579
and from the charts on the right we can

1073
00:50:36,880 --> 00:50:42,910
see that make the majority of the

1074
00:50:39,579 --> 00:50:46,719
updates have to deal with the DST rules

1075
00:50:42,910 --> 00:50:49,598
so this shows the huge impact daylight

1076
00:50:46,719 --> 00:50:53,049
saving time has on managing time on the

1077
00:50:49,599 --> 00:50:55,930
internet and also an interesting fact is

1078
00:50:53,049 --> 00:50:59,410
even though the database does not make

1079
00:50:55,930 --> 00:51:03,339
any claims for the accuracy of historic

1080
00:50:59,410 --> 00:51:07,149
data before 1970 a majority of the

1081
00:51:03,339 --> 00:51:09,940
effort goes into improving the

1082
00:51:07,150 --> 00:51:13,660
historical accuracy of the database and

1083
00:51:09,940 --> 00:51:15,910
since we can also extract the release

1084
00:51:13,660 --> 00:51:19,739
states of this updates we assess the

1085
00:51:15,910 --> 00:51:22,420
timeliness of these updates and from our

1086
00:51:19,739 --> 00:51:24,940
assessment we see that about 80

1087
00:51:22,420 --> 00:51:27,249
percentage of the updates are published

1088
00:51:24,940 --> 00:51:30,519
within 100 days from their actual date

1089
00:51:27,249 --> 00:51:32,649
of effect and of that 20% of the odd

1090
00:51:30,519 --> 00:51:35,490
updates are published within

1091
00:51:32,650 --> 00:51:38,039
fifteen days or less from the date of

1092
00:51:35,490 --> 00:51:42,450
next slide please

1093
00:51:38,039 --> 00:51:46,299
then we also look at the community by

1094
00:51:42,450 --> 00:51:49,480
assessing the mailing list archives and

1095
00:51:46,299 --> 00:51:52,569
we see that over a span of 30 years we

1096
00:51:49,480 --> 00:51:57,460
have about 19 thousand emails in total

1097
00:51:52,569 --> 00:52:00,299
from 1,800 unique contributors from the

1098
00:51:57,460 --> 00:52:03,609
histogram on the right we see an

1099
00:52:00,299 --> 00:52:09,520
increasing trend in the number of emails

1100
00:52:03,609 --> 00:52:13,150
and contributors after 2012 particularly

1101
00:52:09,520 --> 00:52:16,809
after the adoption by I am and this

1102
00:52:13,150 --> 00:52:19,000
trend is correlated with an increasing

1103
00:52:16,809 --> 00:52:21,880
amount of the database particularly

1104
00:52:19,000 --> 00:52:25,420
after the adoption of mobile and smart

1105
00:52:21,880 --> 00:52:28,420
devices ingesting information from such

1106
00:52:25,420 --> 00:52:30,460
a large number of contributors is a

1107
00:52:28,420 --> 00:52:34,680
potential concern from a management

1108
00:52:30,460 --> 00:52:39,460
perspective next slide please

1109
00:52:34,680 --> 00:52:43,210
so earlier we saw that so most of the

1110
00:52:39,460 --> 00:52:46,779
updates deal with DST rule changes so

1111
00:52:43,210 --> 00:52:49,529
then we wanted to listen up both these

1112
00:52:46,779 --> 00:52:54,069
changes why do we see so many changes

1113
00:52:49,529 --> 00:52:57,160
Stevens our hypothesis is that DST rules

1114
00:52:54,069 --> 00:53:00,940
are often the changes to DST rules and

1115
00:52:57,160 --> 00:53:03,270
often administrative reasons that are

1116
00:53:00,940 --> 00:53:04,390
correlated with major events such as

1117
00:53:03,270 --> 00:53:07,538
Wohlers

1118
00:53:04,390 --> 00:53:12,788
policy changes or major I mean even sex

1119
00:53:07,539 --> 00:53:16,210
a travel to evaluate this hypothesis we

1120
00:53:12,789 --> 00:53:19,150
analyzed the sorry

1121
00:53:16,210 --> 00:53:21,279
also to evaluate this hypothesis we take

1122
00:53:19,150 --> 00:53:25,990
the most recent version of the data base

1123
00:53:21,279 --> 00:53:31,450
and count the number of updates made to

1124
00:53:25,990 --> 00:53:33,910
each time zone or DST rule we generate a

1125
00:53:31,450 --> 00:53:37,890
histogram of these changes which are

1126
00:53:33,910 --> 00:53:41,920
made by the government entities and then

1127
00:53:37,890 --> 00:53:45,640
we group these time zones by country and

1128
00:53:41,920 --> 00:53:46,130
then we look at the history of the

1129
00:53:45,640 --> 00:53:49,240
country

1130
00:53:46,130 --> 00:53:53,829
question so in this example shown here

1131
00:53:49,240 --> 00:53:58,029
so we see the histogram of rule changes

1132
00:53:53,829 --> 00:54:01,369
for North America and as we hypothesized

1133
00:53:58,029 --> 00:54:03,680
after eliminating all noise we see that

1134
00:54:01,369 --> 00:54:05,599
a huge number of changes correspond to

1135
00:54:03,680 --> 00:54:09,618
major events such as the world war and

1136
00:54:05,599 --> 00:54:13,009
policy updates such as the uniform time

1137
00:54:09,619 --> 00:54:15,200
Act or the aisle embargo that was in

1138
00:54:13,009 --> 00:54:18,109
effect during the energy crisis in the

1139
00:54:15,200 --> 00:54:21,950
u.s. so in addition to proving our

1140
00:54:18,109 --> 00:54:24,140
hypothesis this also shows that that the

1141
00:54:21,950 --> 00:54:26,359
time zone database provides a unique

1142
00:54:24,140 --> 00:54:31,129
perspective on world historical events

1143
00:54:26,359 --> 00:54:33,109
we see similar results from time zones

1144
00:54:31,130 --> 00:54:34,849
belonging to other countries which is

1145
00:54:33,109 --> 00:54:37,210
not shown here for space constraints

1146
00:54:34,849 --> 00:54:41,869
next slide please

1147
00:54:37,210 --> 00:54:43,940
so next we try to identify the problems

1148
00:54:41,869 --> 00:54:46,400
and anomalies that are related to the

1149
00:54:43,940 --> 00:54:48,920
database updates our intention here is

1150
00:54:46,400 --> 00:54:53,450
to highlight the importance and the

1151
00:54:48,920 --> 00:54:56,059
impact of these database updates so as

1152
00:54:53,450 --> 00:54:59,750
mentioned earlier about 19 percentage of

1153
00:54:56,059 --> 00:55:03,710
the updates are flagged as correction

1154
00:54:59,750 --> 00:55:05,450
updates by our tool so these are updates

1155
00:55:03,710 --> 00:55:07,359
that make changes to previous updates

1156
00:55:05,450 --> 00:55:10,970
and we see that most of these

1157
00:55:07,359 --> 00:55:12,500
Corrections arise due to incomplete

1158
00:55:10,970 --> 00:55:15,140
information being released by

1159
00:55:12,500 --> 00:55:18,769
authorities such as authorities just

1160
00:55:15,140 --> 00:55:21,500
announcing the start of a new DST policy

1161
00:55:18,769 --> 00:55:24,558
without an end date which later need to

1162
00:55:21,500 --> 00:55:30,019
be updated but some of those corruption

1163
00:55:24,559 --> 00:55:33,769
updates also related to errors that are

1164
00:55:30,019 --> 00:55:36,169
actually made in the database these

1165
00:55:33,769 --> 00:55:38,479
errors highlight the problems in the

1166
00:55:36,170 --> 00:55:40,880
informal update process that has ingest

1167
00:55:38,480 --> 00:55:44,710
data from a large number of contributors

1168
00:55:40,880 --> 00:55:49,700
and sometimes we see that even correct

1169
00:55:44,710 --> 00:55:53,259
database updates making unintended or

1170
00:55:49,700 --> 00:55:56,990
causing unintended bugs and other

1171
00:55:53,259 --> 00:55:58,930
software systems for example a provision

1172
00:55:56,990 --> 00:56:01,870
to include a negative

1173
00:55:58,930 --> 00:56:05,410
a time offset in the database broke

1174
00:56:01,870 --> 00:56:09,970
several software systems such as open

1175
00:56:05,410 --> 00:56:13,920
JDK the Qt framework etc another issue

1176
00:56:09,970 --> 00:56:17,620
that we noticed in the database are the

1177
00:56:13,920 --> 00:56:19,860
updates is the disruptions caused by

1178
00:56:17,620 --> 00:56:22,410
delayed updates which we saw earlier

1179
00:56:19,860 --> 00:56:26,650
next slide please

1180
00:56:22,410 --> 00:56:29,259
so based on our analysis we have come up

1181
00:56:26,650 --> 00:56:31,480
with a set of recommendations which are

1182
00:56:29,260 --> 00:56:34,120
intended to improve the security and

1183
00:56:31,480 --> 00:56:36,610
integrity of the overall system our

1184
00:56:34,120 --> 00:56:38,859
intention here is not to impugn any

1185
00:56:36,610 --> 00:56:40,930
individuals who are indeed contributed

1186
00:56:38,860 --> 00:56:44,830
significant time and energy in the

1187
00:56:40,930 --> 00:56:46,899
upkeep of the database rather our goal

1188
00:56:44,830 --> 00:56:49,000
here is to expand perspectives and to

1189
00:56:46,900 --> 00:56:52,450
start discussions about this critical

1190
00:56:49,000 --> 00:56:54,570
asset and as such we do not provide any

1191
00:56:52,450 --> 00:56:57,220
implementation for our accommodation

1192
00:56:54,570 --> 00:56:59,440
because these recommendations could be

1193
00:56:57,220 --> 00:57:02,290
implemented using standard open-source

1194
00:56:59,440 --> 00:57:04,630
tools and other commutations are

1195
00:57:02,290 --> 00:57:06,940
intentionally high level we believe that

1196
00:57:04,630 --> 00:57:11,220
the details should be fleshed out within

1197
00:57:06,940 --> 00:57:15,910
the dzt community next slide please

1198
00:57:11,220 --> 00:57:18,370
so our first recommendation is to codify

1199
00:57:15,910 --> 00:57:20,950
the overall update process by

1200
00:57:18,370 --> 00:57:23,970
introducing more formalization such as

1201
00:57:20,950 --> 00:57:28,120
standard release tools standard

1202
00:57:23,970 --> 00:57:30,100
documentation ticketing system to track

1203
00:57:28,120 --> 00:57:33,040
each and every update and most

1204
00:57:30,100 --> 00:57:36,670
importantly a test suite to ensure

1205
00:57:33,040 --> 00:57:38,650
correctness of the database we recommend

1206
00:57:36,670 --> 00:57:42,270
that these updates are treated in the

1207
00:57:38,650 --> 00:57:46,300
same way as Linux kernel patches and

1208
00:57:42,270 --> 00:57:49,960
then the overall update process is

1209
00:57:46,300 --> 00:57:52,960
extensively extensively really relies on

1210
00:57:49,960 --> 00:57:56,800
the primary maintainer or coordinator of

1211
00:57:52,960 --> 00:57:59,110
the database so for immortalized

1212
00:57:56,800 --> 00:58:02,470
motivated attacker or a government

1213
00:57:59,110 --> 00:58:04,770
entity it might be possible to introduce

1214
00:58:02,470 --> 00:58:08,720
unwanted updates into the database

1215
00:58:04,770 --> 00:58:12,259
through impersonation of the contributor

1216
00:58:08,720 --> 00:58:14,328
are the primary maintainer so we

1217
00:58:12,260 --> 00:58:17,599
recommend stronger cryptographic

1218
00:58:14,329 --> 00:58:19,819
measures to improve security and we also

1219
00:58:17,599 --> 00:58:22,160
believe that introducing more

1220
00:58:19,819 --> 00:58:25,038
formalization will also help in this

1221
00:58:22,160 --> 00:58:29,058
regard by introducing more transparency

1222
00:58:25,039 --> 00:58:31,309
and finally we also recommend an

1223
00:58:29,059 --> 00:58:33,470
independent third party audit of this

1224
00:58:31,309 --> 00:58:35,930
database which could be contacted

1225
00:58:33,470 --> 00:58:38,480
periodically and could test the database

1226
00:58:35,930 --> 00:58:43,750
from the perspective of end-users from

1227
00:58:38,480 --> 00:58:43,750
different time zones next slide please

1228
00:58:43,940 --> 00:58:50,960
so in summary we examine how the time

1229
00:58:47,960 --> 00:58:52,730
zone database is used by devices

1230
00:58:50,960 --> 00:58:55,849
connected on the internet and how it has

1231
00:58:52,730 --> 00:58:58,520
evolved we also look at the maintenance

1232
00:58:55,849 --> 00:59:01,010
and the update processes and we see that

1233
00:58:58,520 --> 00:59:04,880
daylight saving time has a huge impact

1234
00:59:01,010 --> 00:59:07,130
on the update process and we also see a

1235
00:59:04,880 --> 00:59:09,200
huge amount of effort gone into

1236
00:59:07,130 --> 00:59:11,510
maintaining the historical accuracy of

1237
00:59:09,200 --> 00:59:15,230
the database based on our observations

1238
00:59:11,510 --> 00:59:18,500
we come up with a set of proposals that

1239
00:59:15,230 --> 00:59:20,869
will aimed at enhancing the security and

1240
00:59:18,500 --> 00:59:24,369
integrity of the database our goal here

1241
00:59:20,869 --> 00:59:27,010
is to draw more attention and resources

1242
00:59:24,369 --> 00:59:29,500
towards improving this critical asset

1243
00:59:27,010 --> 00:59:36,640
next slide please

1244
00:59:29,500 --> 00:59:36,640
thank you let's thank the presenter

1245
00:59:40,070 --> 00:59:49,250
it's a lot of time for question hello

1246
00:59:47,220 --> 00:59:52,470
you mentioned the necessity of having

1247
00:59:49,250 --> 00:59:55,140
safeguards against malicious leads of

1248
00:59:52,470 --> 00:59:58,049
the database you mentioned a lot of

1249
00:59:55,140 --> 01:00:00,779
changes that were actually fixes for

1250
00:59:58,050 --> 01:00:04,410
previous changes but did you notice any

1251
01:00:00,780 --> 01:00:08,670
actual malicious update in the last 26

1252
01:00:04,410 --> 01:00:09,390
years so we have not seen any malicious

1253
01:00:08,670 --> 01:00:11,940
updates

1254
01:00:09,390 --> 01:00:16,069
but you've seen errors that were cast or

1255
01:00:11,940 --> 01:00:16,070
arrested where unintentionally caused

1256
01:00:16,520 --> 01:00:23,970
but we do believe there is a weak link

1257
01:00:19,800 --> 01:00:30,570
and this could potentially be exploited

1258
01:00:23,970 --> 01:00:33,390
by malicious actors yeah my concern was

1259
01:00:30,570 --> 01:00:36,090
it's may not be necessary to add new

1260
01:00:33,390 --> 01:00:38,160
process new rules new security for

1261
01:00:36,090 --> 01:00:41,640
something that may never happen but we

1262
01:00:38,160 --> 01:00:44,580
do believe there is a possibility for an

1263
01:00:41,640 --> 01:00:47,310
attack due to the informal update

1264
01:00:44,580 --> 01:00:51,870
process that is involved and as we've

1265
01:00:47,310 --> 01:00:54,390
seen any delay or unintel entrie could

1266
01:00:51,870 --> 01:00:59,609
cause mass confusion

1267
01:00:54,390 --> 01:01:02,190
totally uncertainty of time so this

1268
01:00:59,610 --> 01:01:13,260
could potentially be used by any

1269
01:01:02,190 --> 01:01:18,870
malicious actor hi Kunz you recommend it

1270
01:01:13,260 --> 01:01:20,550
if using tests as this is not code what

1271
01:01:18,870 --> 01:01:24,750
are you testing and how are you going to

1272
01:01:20,550 --> 01:01:26,550
so the database actually contains data

1273
01:01:24,750 --> 01:01:30,840
and also code

1274
01:01:26,550 --> 01:01:34,200
so there are this compiler that compiles

1275
01:01:30,840 --> 01:01:38,640
all this data to binary files that are

1276
01:01:34,200 --> 01:01:42,779
later used by system utilities so test

1277
01:01:38,640 --> 01:01:46,730
could test that code and also it could

1278
01:01:42,780 --> 01:01:46,730
test the validity of the entries itself

1279
01:01:47,630 --> 01:01:51,810
the whole point of this talk was on the

1280
01:01:50,010 --> 01:01:52,560
data know that code which is just a

1281
01:01:51,810 --> 01:01:54,570
sample

1282
01:01:52,560 --> 01:01:59,070
anyway is that those concerned about

1283
01:01:54,570 --> 01:02:03,090
being incorrect right so that's not be

1284
01:01:59,070 --> 01:02:05,370
so yeah so finally what this data

1285
01:02:03,090 --> 01:02:08,160
accomplishes is for every time zone it

1286
01:02:05,370 --> 01:02:11,130
gives you the effective offset from UTC

1287
01:02:08,160 --> 01:02:14,310
so the tests could actually make sure

1288
01:02:11,130 --> 01:02:18,570
all these offsets are indeed correct so

1289
01:02:14,310 --> 01:02:20,759
that could be out the whole point is

1290
01:02:18,570 --> 01:02:23,070
this is the database of those offsets

1291
01:02:20,760 --> 01:02:28,530
are so what are you testing again check

1292
01:02:23,070 --> 01:02:31,500
right so so some of the time zones could

1293
01:02:28,530 --> 01:02:33,620
be selected where the test could

1294
01:02:31,500 --> 01:02:38,820
manually checked for offsets we could

1295
01:02:33,620 --> 01:02:40,589
the test could pick certain time zones

1296
01:02:38,820 --> 01:02:44,120
for example the central Daylight Time

1297
01:02:40,590 --> 01:02:47,220
where the offset is well known and then

1298
01:02:44,120 --> 01:02:49,380
make sure the data is indeed consistent

1299
01:02:47,220 --> 01:02:51,810
with that so randomly

1300
01:02:49,380 --> 01:02:53,040
time zones across the world can be

1301
01:02:51,810 --> 01:02:58,200
picked and then could be checked for

1302
01:02:53,040 --> 01:03:00,690
consistency so your test is a separate

1303
01:02:58,200 --> 01:03:02,279
database of timezone data of which you

1304
01:03:00,690 --> 01:03:09,960
test your time zone database against

1305
01:03:02,280 --> 01:03:10,830
yeah maybe in a limited scenario yes one

1306
01:03:09,960 --> 01:03:15,780
last quick question

1307
01:03:10,830 --> 01:03:18,750
Anjaneya I just have to say thank you

1308
01:03:15,780 --> 01:03:22,290
for doing this work excuse me my dogs is

1309
01:03:18,750 --> 01:03:24,780
kind of leaving me um but this work is I

1310
01:03:22,290 --> 01:03:27,690
think super useful because it shines

1311
01:03:24,780 --> 01:03:31,860
light on hidden parts of the internet

1312
01:03:27,690 --> 01:03:34,650
that we take for granted and I disagree

1313
01:03:31,860 --> 01:03:37,770
with the first person here the Mike who

1314
01:03:34,650 --> 01:03:39,570
said if there's been no attack why do we

1315
01:03:37,770 --> 01:03:40,860
need to worry about this I think we need

1316
01:03:39,570 --> 01:03:42,540
to worry about this because it is a

1317
01:03:40,860 --> 01:03:45,450
weakling and I think you're exactly on

1318
01:03:42,540 --> 01:03:47,490
the right track with that in terms of

1319
01:03:45,450 --> 01:03:49,169
figuring out what tests to you here I

1320
01:03:47,490 --> 01:03:51,299
think that's completely reasonable to do

1321
01:03:49,170 --> 01:03:53,160
that design elsewhere but I think it is

1322
01:03:51,300 --> 01:03:54,660
important that we do some testing and I

1323
01:03:53,160 --> 01:03:57,500
completely agree with the general

1324
01:03:54,660 --> 01:04:00,299
recommendations that you have my

1325
01:03:57,500 --> 01:04:03,510
question to you is do you have any

1326
01:04:00,300 --> 01:04:05,820
particular areas in the IETF

1327
01:04:03,510 --> 01:04:08,010
that could look at this or is this

1328
01:04:05,820 --> 01:04:10,410
something that you have to toss over to

1329
01:04:08,010 --> 01:04:12,120
the TCD debe community and hope that

1330
01:04:10,410 --> 01:04:16,109
they come up with the process is there

1331
01:04:12,120 --> 01:04:18,960
something with the idea yeah I think the

1332
01:04:16,110 --> 01:04:22,380
RFC six five five seven that describes

1333
01:04:18,960 --> 01:04:25,380
the update process could be looked at

1334
01:04:22,380 --> 01:04:27,810
again because some of the processes are

1335
01:04:25,380 --> 01:04:32,000
left at the discussion of the user and

1336
01:04:27,810 --> 01:04:35,160
for example something like using PGP

1337
01:04:32,000 --> 01:04:40,650
signatures to sign the database is left

1338
01:04:35,160 --> 01:04:42,990
the text just mentions that the

1339
01:04:40,650 --> 01:04:46,890
signature should be used not must be

1340
01:04:42,990 --> 01:04:49,649
used so some of these security measures

1341
01:04:46,890 --> 01:04:51,180
could be made mandatory and then the

1342
01:04:49,650 --> 01:05:01,350
Archie could be looked at so that is

1343
01:04:51,180 --> 01:05:02,940
something that I ATF can do thank you

1344
01:05:01,350 --> 01:05:05,279
all right

1345
01:05:02,940 --> 01:05:06,960
think thanks for taking some time out of

1346
01:05:05,280 --> 01:05:08,610
your breaks guys let's thank the

1347
01:05:06,960 --> 01:05:14,070
presenter one last time thanks for

1348
01:05:08,610 --> 01:05:15,600
sticking around and if the presenters

1349
01:05:14,070 --> 01:05:17,010
for the next session want to come and

1350
01:05:15,600 --> 01:05:21,440
test their laptops and meet their

1351
01:05:17,010 --> 01:05:21,440
session chair just come up here

1352
01:05:35,510 --> 01:05:38,569
[Music]

