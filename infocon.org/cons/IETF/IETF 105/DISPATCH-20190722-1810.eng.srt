1
00:00:06,050 --> 00:00:10,770
hi everyone it's time to get started

2
00:00:08,130 --> 00:00:13,559
with a dispatch meeting I'd like to

3
00:00:10,770 --> 00:00:15,989
think thank Matt Miller for being our

4
00:00:13,559 --> 00:00:34,260
Jeff described and Vijay and Pete for

5
00:00:15,990 --> 00:00:36,660
taking notes for us all righty so this

6
00:00:34,260 --> 00:00:38,219
is Spanish working group if you don't

7
00:00:36,660 --> 00:00:44,519
want to be here about this patch stuff

8
00:00:38,219 --> 00:00:46,409
then time to go okay here's the note

9
00:00:44,519 --> 00:00:50,850
well you probably would have seen this

10
00:00:46,409 --> 00:00:53,429
more than once today this backwards and

11
00:00:50,850 --> 00:00:55,859
okay here we go so we actually have very

12
00:00:53,429 --> 00:00:57,510
few things on dispatch this time we have

13
00:00:55,859 --> 00:00:59,429
web transport Victor's going to talk

14
00:00:57,510 --> 00:01:01,229
about that and then we have several

15
00:00:59,429 --> 00:01:02,789
things in the art area that we're going

16
00:01:01,229 --> 00:01:05,280
to talk about there's a new proposal

17
00:01:02,789 --> 00:01:06,720
called rip and then we're going to talk

18
00:01:05,280 --> 00:01:10,460
about this will be a fun discussion the

19
00:01:06,720 --> 00:01:13,979
BCP 190 I put the ability to trance

20
00:01:10,460 --> 00:01:17,039
okay dispatch okay so as a reminder here

21
00:01:13,979 --> 00:01:18,929
are our IHF 106 deadlines and again we

22
00:01:17,040 --> 00:01:20,549
drive those so hopefully there's a

23
00:01:18,930 --> 00:01:23,039
little bit of mailing list discussion

24
00:01:20,549 --> 00:01:26,759
before people before the meeting right

25
00:01:23,039 --> 00:01:28,439
so my deadline is October 4th October

26
00:01:26,759 --> 00:01:29,969
7th it's always a good just to let us

27
00:01:28,439 --> 00:01:31,860
know that you're gonna bring something

28
00:01:29,969 --> 00:01:33,780
forward so we can play on time because

29
00:01:31,860 --> 00:01:35,130
as you notice we only got an hour slot

30
00:01:33,780 --> 00:01:37,920
this time because we didn't anticipate

31
00:01:35,130 --> 00:01:39,689
much and of course at the last minute

32
00:01:37,920 --> 00:01:43,100
stuff came in so it's always helpful to

33
00:01:39,689 --> 00:01:45,449
let us know ahead of time all righty

34
00:01:43,100 --> 00:01:46,770
okay again working with deadlines if you

35
00:01:45,450 --> 00:01:48,840
make the deadlines you're from the list

36
00:01:46,770 --> 00:01:51,869
if you're not then you kind of come

37
00:01:48,840 --> 00:01:53,520
towards you know if time allows sort of

38
00:01:51,869 --> 00:01:55,229
thing and again it's helpful if you've

39
00:01:53,520 --> 00:01:57,780
got a dispatch item you want us to

40
00:01:55,229 --> 00:01:59,369
dispatch to put dispatch in the name

41
00:01:57,780 --> 00:02:01,890
it's a little bit easier to find in the

42
00:01:59,369 --> 00:02:03,450
tracker and there is a way again there

43
00:02:01,890 --> 00:02:04,710
was a ticket open I should follow up on

44
00:02:03,450 --> 00:02:07,170
that and whether or not you can do every

45
00:02:04,710 --> 00:02:10,530
places from the document and any

46
00:02:07,170 --> 00:02:12,750
questions contact the chairs mailing

47
00:02:10,530 --> 00:02:16,500
list so for general discussion of art

48
00:02:12,750 --> 00:02:17,740
topics its art at IETF org and then for

49
00:02:16,500 --> 00:02:19,360
actual work that

50
00:02:17,740 --> 00:02:39,400
want to move forward dispatch an IETF

51
00:02:19,360 --> 00:02:47,320
noise okay yeah could you switch to the

52
00:02:39,400 --> 00:02:51,190
what thanks bird slides yeah yeah hello

53
00:02:47,320 --> 00:02:54,280
everyone my name is victor vasily if I

54
00:02:51,190 --> 00:02:56,140
worked for Google I worked on quick and

55
00:02:54,280 --> 00:02:58,000
TLS before but today I'm going to talk

56
00:02:56,140 --> 00:03:15,239
about new works that I want to bring to

57
00:02:58,000 --> 00:03:18,910
ATF is this better

58
00:03:15,240 --> 00:03:21,520
alright I picked her a silly if I worked

59
00:03:18,910 --> 00:03:23,590
on TLS and quits I want to talk about

60
00:03:21,520 --> 00:03:27,010
web Transport which is the new work I

61
00:03:23,590 --> 00:03:30,460
want to bring to ITF that is currently

62
00:03:27,010 --> 00:03:33,609
already a consideration and w3c web and

63
00:03:30,460 --> 00:03:36,610
compassion community group so just to

64
00:03:33,610 --> 00:03:38,980
introduce you to the problem so web

65
00:03:36,610 --> 00:03:42,010
applications traditionally used only

66
00:03:38,980 --> 00:03:44,679
HTTP is a transport HTTP is a response

67
00:03:42,010 --> 00:03:47,170
request protocol means that you will

68
00:03:44,680 --> 00:03:50,740
only get traffic from server if you send

69
00:03:47,170 --> 00:03:52,690
a request first around 2010 people

70
00:03:50,740 --> 00:03:54,690
realize this as a problem so we

71
00:03:52,690 --> 00:03:58,960
introduced a protocol called WebSocket

72
00:03:54,690 --> 00:04:02,500
which allows to speak subject to

73
00:03:58,960 --> 00:04:06,100
security constraint arbitrary TCP

74
00:04:02,500 --> 00:04:12,400
traffic but it runs over TCP so it's

75
00:04:06,100 --> 00:04:14,019
reliable ordered and that is enough for

76
00:04:12,400 --> 00:04:16,600
some applications but not for others

77
00:04:14,020 --> 00:04:20,760
around some time later we introduced the

78
00:04:16,600 --> 00:04:25,630
new API called rtcdatachannel which is a

79
00:04:20,760 --> 00:04:28,539
peer-to-peer DTLS over HTTP and it has a

80
00:04:25,630 --> 00:04:31,370
API which is very similar to WebSockets

81
00:04:28,540 --> 00:04:34,910
except your messages can be more

82
00:04:31,370 --> 00:04:38,750
sent and received out of order or marked

83
00:04:34,910 --> 00:04:42,020
as unreliable in general rtcdatachannel

84
00:04:38,750 --> 00:04:44,090
is inherently peer-to-peer which means

85
00:04:42,020 --> 00:04:46,909
you need

86
00:04:44,090 --> 00:04:48,979
it's designed to communication between

87
00:04:46,910 --> 00:04:53,510
browsers and peers which might be behind

88
00:04:48,979 --> 00:04:56,330
net so it doesn't you can fit and so you

89
00:04:53,510 --> 00:04:58,610
can fit it inside into the use case of

90
00:04:56,330 --> 00:05:01,010
talking client-to-server and there are

91
00:04:58,610 --> 00:05:05,090
special provisions of standards called I

92
00:05:01,010 --> 00:05:07,610
slide which is a way to use data channel

93
00:05:05,090 --> 00:05:10,219
and client-server setting but in

94
00:05:07,610 --> 00:05:12,440
practice it doesn't work that well and

95
00:05:10,220 --> 00:05:14,210
I've had conversations with many

96
00:05:12,440 --> 00:05:16,280
developers I'll talk later but which

97
00:05:14,210 --> 00:05:19,190
doesn't works as well so this leaves us

98
00:05:16,280 --> 00:05:21,320
with a gap feature gap that we want

99
00:05:19,190 --> 00:05:24,710
something that is client-server like web

100
00:05:21,320 --> 00:05:28,460
sockets but supports unreliable or

101
00:05:24,710 --> 00:05:30,710
unordered delivery and the proposals I'm

102
00:05:28,460 --> 00:05:33,260
going to talk about is called web

103
00:05:30,710 --> 00:05:37,340
transport and it adds effectively just

104
00:05:33,260 --> 00:05:42,590
said so why would you want something

105
00:05:37,340 --> 00:05:45,409
like this and the answer is for many

106
00:05:42,590 --> 00:05:47,479
years people have been asking browser

107
00:05:45,410 --> 00:05:50,660
developers to add some things that's

108
00:05:47,479 --> 00:05:53,030
roughly like WebSockets but for UDP it's

109
00:05:50,660 --> 00:05:55,330
being a repeated request and we've

110
00:05:53,030 --> 00:05:58,669
reached out to some of those people and

111
00:05:55,330 --> 00:06:00,380
there are wide variety of use case where

112
00:05:58,669 --> 00:06:05,210
you'd want set but the two main use

113
00:06:00,380 --> 00:06:07,880
cases is one there are lots of people

114
00:06:05,210 --> 00:06:12,109
who want this for online video games

115
00:06:07,880 --> 00:06:14,719
because video games traditionally our

116
00:06:12,110 --> 00:06:16,789
latency sensitive in the second wide use

117
00:06:14,720 --> 00:06:20,030
cases people really want this for live

118
00:06:16,789 --> 00:06:26,360
streaming especially live streaming with

119
00:06:20,030 --> 00:06:28,869
low latency and the proposal we have is

120
00:06:26,360 --> 00:06:32,210
called web transport web transport is

121
00:06:28,870 --> 00:06:34,550
it's not a one protocol but it's a

122
00:06:32,210 --> 00:06:37,099
framework for making protocols which are

123
00:06:34,550 --> 00:06:40,010
usable on the web and you can use them

124
00:06:37,099 --> 00:06:42,080
interchangeably so the idea is if you

125
00:06:40,010 --> 00:06:45,650
have a transport protocol which provides

126
00:06:42,080 --> 00:06:47,750
strings and data grams

127
00:06:45,650 --> 00:06:51,049
streams by streams a million streams

128
00:06:47,750 --> 00:06:53,030
which are like quick streams or like an

129
00:06:51,050 --> 00:06:54,500
individual TCP connection or their

130
00:06:53,030 --> 00:06:56,830
streams of bytes potentially

131
00:06:54,500 --> 00:06:59,480
bi-directional or Union directional and

132
00:06:56,830 --> 00:07:02,000
datagrams when I say data rounds I mean

133
00:06:59,480 --> 00:07:05,870
saints which are shaped like UDP

134
00:07:02,000 --> 00:07:07,580
datagrams but in order to become be

135
00:07:05,870 --> 00:07:10,000
compatible with web transports the

136
00:07:07,580 --> 00:07:12,469
Transfer Protocol has to be subject to

137
00:07:10,000 --> 00:07:14,990
multiple security constraints which are

138
00:07:12,470 --> 00:07:17,120
outlined in the draft but notably your

139
00:07:14,990 --> 00:07:20,450
transport has to be an to end encrypted

140
00:07:17,120 --> 00:07:23,390
you have to support TRS I you have to

141
00:07:20,450 --> 00:07:25,580
support Origin Jack's and you have to

142
00:07:23,390 --> 00:07:29,150
make sure continuously that your

143
00:07:25,580 --> 00:07:31,690
protocol is that your server is still

144
00:07:29,150 --> 00:07:33,710
willing to talk to you and so sir

145
00:07:31,690 --> 00:07:36,380
requirements will be familiar especially

146
00:07:33,710 --> 00:07:39,020
to those who work with data channels

147
00:07:36,380 --> 00:07:41,750
because those are essentially similar

148
00:07:39,020 --> 00:07:43,880
very similar requirements so when I say

149
00:07:41,750 --> 00:07:47,320
protocol framework originally this was

150
00:07:43,880 --> 00:07:49,880
the one protocol called quick transport

151
00:07:47,320 --> 00:07:52,310
not eventually people brought ABS that

152
00:07:49,880 --> 00:07:55,580
quick is not always usable and it would

153
00:07:52,310 --> 00:07:58,760
be really bad for us to just fail hard

154
00:07:55,580 --> 00:08:01,820
if quick is blocked in the network so we

155
00:07:58,760 --> 00:08:04,610
defined a family of protocols which are

156
00:08:01,820 --> 00:08:06,110
usable interchangeably and the one of

157
00:08:04,610 --> 00:08:07,520
them is called quick transferred and

158
00:08:06,110 --> 00:08:11,120
quick transport is very similar to

159
00:08:07,520 --> 00:08:13,310
WebSocket I'll talk about differences

160
00:08:11,120 --> 00:08:16,670
but quick transport is basically

161
00:08:13,310 --> 00:08:20,660
WebSocket over quick fallback transport

162
00:08:16,670 --> 00:08:23,630
is a simulation of that semantics but

163
00:08:20,660 --> 00:08:26,900
over TCP for cases when quic is blocked

164
00:08:23,630 --> 00:08:29,420
and HTTP free transport is a probably

165
00:08:26,900 --> 00:08:33,260
most interesting here and most complex

166
00:08:29,420 --> 00:08:35,060
it allows you to create streams and send

167
00:08:33,260 --> 00:08:37,760
data grams within existing HTTP

168
00:08:35,059 --> 00:08:43,159
connections and this is particularly

169
00:08:37,760 --> 00:08:45,280
useful if you because it if you have an

170
00:08:43,159 --> 00:08:47,569
existing connection it allows you bypass

171
00:08:45,280 --> 00:08:50,900
congestion control flow start and

172
00:08:47,570 --> 00:08:52,460
establishment latency but it also can't

173
00:08:50,900 --> 00:08:55,220
Zufall limitations that now you're

174
00:08:52,460 --> 00:08:57,550
sharing your connection with other

175
00:08:55,220 --> 00:08:57,550
traffic

176
00:08:57,730 --> 00:09:03,249
so just to elaborate on what are exactly

177
00:09:01,359 --> 00:09:06,609
properties of quick transfers compared

178
00:09:03,249 --> 00:09:08,259
to data channel first like obviously one

179
00:09:06,609 --> 00:09:13,239
of them is peer-to-peer now so it's

180
00:09:08,259 --> 00:09:15,790
direct but and we do a bunch of say we

181
00:09:13,239 --> 00:09:17,709
remove a lot of sayings from the model

182
00:09:15,790 --> 00:09:19,809
of data channel which makes it easier

183
00:09:17,709 --> 00:09:22,089
for the common case of client-server for

184
00:09:19,809 --> 00:09:24,549
instance in data channel you have to

185
00:09:22,089 --> 00:09:27,160
provide certificates of both peers

186
00:09:24,549 --> 00:09:29,079
out-of-band in order to establish trust

187
00:09:27,160 --> 00:09:31,660
between two parties and in good

188
00:09:29,079 --> 00:09:35,649
transportation so a PKI similar to

189
00:09:31,660 --> 00:09:38,499
WebSockets we don't have to use eyes you

190
00:09:35,649 --> 00:09:40,059
have a slightly different and I would

191
00:09:38,499 --> 00:09:44,160
say richer Mahmut model of

192
00:09:40,059 --> 00:09:47,738
communications and data channels and

193
00:09:44,160 --> 00:09:50,139
some most notably you don't have to use

194
00:09:47,739 --> 00:09:55,179
user space SCTP you have to use quick

195
00:09:50,139 --> 00:09:57,939
and this is on some level are really

196
00:09:55,179 --> 00:10:00,669
important because one of the feedback we

197
00:09:57,939 --> 00:10:02,799
got from the developers who were talking

198
00:10:00,669 --> 00:10:04,989
we were talking about why they don't use

199
00:10:02,799 --> 00:10:07,539
data channels especially in context of

200
00:10:04,989 --> 00:10:09,519
web games is that a lot of them compared

201
00:10:07,539 --> 00:10:14,679
to complaint about complexity of

202
00:10:09,519 --> 00:10:18,339
implementing entire rtcdatachannel stack

203
00:10:14,679 --> 00:10:23,410
and SCTP was noted as a particular pain

204
00:10:18,339 --> 00:10:25,779
point even on top of WebSocket we do

205
00:10:23,410 --> 00:10:27,879
bring a lot of improvements which are

206
00:10:25,779 --> 00:10:30,039
just not just like the obvious

207
00:10:27,879 --> 00:10:32,829
improvement of unreliable on order

208
00:10:30,039 --> 00:10:35,470
delivery for instance we you no longer

209
00:10:32,829 --> 00:10:38,199
have the WebSocket masking protocol

210
00:10:35,470 --> 00:10:39,819
which was added for plain text

211
00:10:38,199 --> 00:10:41,829
WebSockets and we don't have to use it

212
00:10:39,819 --> 00:10:50,139
because we encrypt all traffic by

213
00:10:41,829 --> 00:10:52,569
default that were true if you're doing

214
00:10:50,139 --> 00:10:56,379
TLS as opposed to quick as your

215
00:10:52,569 --> 00:10:58,689
underlying substrate then and you're

216
00:10:56,379 --> 00:11:00,489
using a stream cipher like RC for GCM

217
00:10:58,689 --> 00:11:02,709
and the attacker can produce essentially

218
00:11:00,489 --> 00:11:05,499
any bit pattern he wants in the wire by

219
00:11:02,709 --> 00:11:08,018
by simply X by X holding the keys from

220
00:11:05,499 --> 00:11:10,040
one side together and then producing

221
00:11:08,019 --> 00:11:17,120
producing counter

222
00:11:10,040 --> 00:11:18,639
masking or flipped plaintext so if you

223
00:11:17,120 --> 00:11:22,449
said to if you think this is a problem

224
00:11:18,639 --> 00:11:22,449
it is still potentially a problem

225
00:11:22,630 --> 00:11:29,660
you mean the problem on quick and quick

226
00:11:26,660 --> 00:11:31,610
but I wouldn't ALS um it wouldn't be

227
00:11:29,660 --> 00:11:35,839
with quick because quick but but

228
00:11:31,610 --> 00:11:36,889
remember so the reason the masking

229
00:11:35,839 --> 00:11:38,149
exists in the first place is because

230
00:11:36,889 --> 00:11:40,670
there it's because they're intercepting

231
00:11:38,149 --> 00:11:42,350
proxies that would intercept TCP take

232
00:11:40,670 --> 00:11:44,660
things that look like HTTP and they get

233
00:11:42,350 --> 00:11:47,990
confused and if your underlying

234
00:11:44,660 --> 00:11:50,980
substrate is T is TLS over TCP then you

235
00:11:47,990 --> 00:11:50,980
don't potential the same problem

236
00:11:53,230 --> 00:11:57,889
interesting I don't know if you do and

237
00:11:56,480 --> 00:12:06,529
the supreme have improved in recipient

238
00:11:57,889 --> 00:12:09,259
proxies quite some time ago but the

239
00:12:06,529 --> 00:12:12,860
other saying is that WebSockets involve

240
00:12:09,259 --> 00:12:15,079
a special shaman base handshaking

241
00:12:12,860 --> 00:12:18,529
headers and we use the that then

242
00:12:15,079 --> 00:12:21,109
quick enforcing al Pianist mandatory so

243
00:12:18,529 --> 00:12:24,439
we rely on LPN to avoid cross protocol

244
00:12:21,110 --> 00:12:26,959
attacks and as our improvement is unlike

245
00:12:24,440 --> 00:12:29,449
WebSockets we do not chip cookies or any

246
00:12:26,959 --> 00:12:31,160
credentials by default and assumes that

247
00:12:29,449 --> 00:12:35,329
the application has to communicate this

248
00:12:31,160 --> 00:12:38,689
explicitly which I believe is it a good

249
00:12:35,329 --> 00:12:42,979
improvement of the privacy and security

250
00:12:38,690 --> 00:12:45,920
surface of the protocol that's basically

251
00:12:42,980 --> 00:12:49,660
the overview of the protocol there are

252
00:12:45,920 --> 00:12:53,180
lots of details that could go over in

253
00:12:49,660 --> 00:12:55,779
but I want to hear what people here

254
00:12:53,180 --> 00:12:55,779
think about this

255
00:13:02,490 --> 00:13:07,860
you heard me asked us before but now

256
00:13:04,320 --> 00:13:11,310
we're in a bigger arena so partial

257
00:13:07,860 --> 00:13:15,750
reliability sorry repair to pay on

258
00:13:11,310 --> 00:13:17,599
Facebook so if we want to do these

259
00:13:15,750 --> 00:13:21,089
things for a real-time communication

260
00:13:17,600 --> 00:13:22,380
often that means skipping past something

261
00:13:21,089 --> 00:13:23,850
that has consumed some part of the

262
00:13:22,380 --> 00:13:27,269
offset space because it's no longer

263
00:13:23,850 --> 00:13:28,620
relevant to the application so being

264
00:13:27,269 --> 00:13:30,360
able to read things piecemeal or at

265
00:13:28,620 --> 00:13:32,699
least being able to bias towards the

266
00:13:30,360 --> 00:13:39,199
most recent data is an important aspect

267
00:13:32,699 --> 00:13:43,410
Thanks so modern Thompson I'm

268
00:13:39,199 --> 00:13:46,589
tentatively supportive of of this this

269
00:13:43,410 --> 00:13:49,079
notion I do recognize that the sort of

270
00:13:46,589 --> 00:13:51,720
space of partial reliability or

271
00:13:49,079 --> 00:13:53,310
unreliable transport from a

272
00:13:51,720 --> 00:13:54,690
client-server perspective is really

273
00:13:53,310 --> 00:13:58,649
really awkward when you when you're

274
00:13:54,690 --> 00:14:01,430
forced used WebRTC and there's some

275
00:13:58,649 --> 00:14:05,220
opportunities here to to use quick more

276
00:14:01,430 --> 00:14:06,420
providing for backs to HTTP and web

277
00:14:05,220 --> 00:14:08,760
servers and all those sorts of other

278
00:14:06,420 --> 00:14:12,599
things that we have there's a bunch of

279
00:14:08,760 --> 00:14:16,380
complexity here with respect to getting

280
00:14:12,600 --> 00:14:18,480
the api's right so that that works so I

281
00:14:16,380 --> 00:14:19,980
think that whatever work we do here will

282
00:14:18,480 --> 00:14:23,519
need to because they coordinated with

283
00:14:19,980 --> 00:14:25,380
the groups in the w3c that if they

284
00:14:23,519 --> 00:14:29,209
decide to take up the work I'll have to

285
00:14:25,380 --> 00:14:31,829
negotiate that yes this is definitely

286
00:14:29,209 --> 00:14:35,939
there is a lot of API discussion to be

287
00:14:31,829 --> 00:14:40,349
had and fortunately I sing the boffo to

288
00:14:35,940 --> 00:14:44,880
say at the Turturro zero I saw and

289
00:14:40,350 --> 00:14:47,880
Barnardo's icing is yeah I did want to

290
00:14:44,880 --> 00:14:50,189
add to echos point though it's not just

291
00:14:47,880 --> 00:14:53,339
to TCP that suffers with it from this

292
00:14:50,190 --> 00:14:57,269
problem if you were able to know the

293
00:14:53,339 --> 00:14:59,850
keys and absent some difficulty with

294
00:14:57,269 --> 00:15:02,959
getting the packetization right you

295
00:14:59,850 --> 00:15:07,199
could predict the ciphertext of

296
00:15:02,959 --> 00:15:09,329
something and therefore influence the

297
00:15:07,199 --> 00:15:12,969
ciphertext of something you could make a

298
00:15:09,329 --> 00:15:15,910
UDP packet look a lot like a DNS packet

299
00:15:12,970 --> 00:15:18,069
and there's a bunch of networks out

300
00:15:15,910 --> 00:15:20,980
there that look at their nest packets

301
00:15:18,069 --> 00:15:25,329
and produce responses I don't know what

302
00:15:20,980 --> 00:15:25,660
you do that with that but it's just food

303
00:15:25,329 --> 00:15:29,099
for thought

304
00:15:25,660 --> 00:15:29,100
there's some work to be done there

305
00:15:31,230 --> 00:15:37,449
Justin Uberti Google this sort of

306
00:15:34,149 --> 00:15:38,620
speaking from the rqc standpoint I think

307
00:15:37,449 --> 00:15:41,769
you could probably make all the stuff

308
00:15:38,620 --> 00:15:43,389
work with data channels but we are

309
00:15:41,769 --> 00:15:45,610
definitely hearing the same thing that

310
00:15:43,389 --> 00:15:47,050
it's just really really difficult people

311
00:15:45,610 --> 00:15:49,540
are having a hand roll their server

312
00:15:47,050 --> 00:15:51,939
stacks if we had had quick available to

313
00:15:49,540 --> 00:15:53,709
us doulton GTI one three you know eight

314
00:15:51,939 --> 00:15:55,420
years ago maybe minder made some

315
00:15:53,709 --> 00:15:56,920
different choices I think this can be

316
00:15:55,420 --> 00:16:03,599
really useful and people will flock to

317
00:15:56,920 --> 00:16:06,128
it okay

318
00:16:03,600 --> 00:16:08,529
till now he and God I'm gonna try and

319
00:16:06,129 --> 00:16:10,829
keep this short because my voice isn't

320
00:16:08,529 --> 00:16:10,829
cooperating

321
00:16:11,370 --> 00:16:21,509
so I like the direction that you're

322
00:16:16,120 --> 00:16:21,509
talking about I'm not psychic reconsider

323
00:16:25,889 --> 00:16:32,889
the this reminds me of a discussion we

324
00:16:30,459 --> 00:16:36,040
had before though and I wanna raise the

325
00:16:32,889 --> 00:16:39,970
question of is there anything beyond an

326
00:16:36,040 --> 00:16:43,120
API in this partly because the protocol

327
00:16:39,970 --> 00:16:44,410
mechanisms why should reliability we

328
00:16:43,120 --> 00:16:45,759
talked about as a feature here for

329
00:16:44,410 --> 00:16:48,550
example also as a service that gets

330
00:16:45,759 --> 00:16:51,730
offered up through the CPI is ultimately

331
00:16:48,550 --> 00:16:53,769
going to have to be built into order may

332
00:16:51,730 --> 00:16:55,509
be quick and then you'd have to figure

333
00:16:53,769 --> 00:16:58,420
out the protocol mechanisms necessary

334
00:16:55,509 --> 00:17:00,490
for building it into quick and then it

335
00:16:58,420 --> 00:17:02,349
gets surfaced up and this reminds me

336
00:17:00,490 --> 00:17:04,270
exactly of a discussion we had a while

337
00:17:02,350 --> 00:17:04,720
ago and that turned into a working group

338
00:17:04,270 --> 00:17:09,639
called

339
00:17:04,720 --> 00:17:10,900
taps and that's part of my sort of I'm

340
00:17:09,640 --> 00:17:13,990
trying to figure out how to square this

341
00:17:10,900 --> 00:17:16,720
away with that conversation and Tommy

342
00:17:13,990 --> 00:17:18,429
here is saying he disturbs and that's

343
00:17:16,720 --> 00:17:20,709
that's sort of where I am in my head

344
00:17:18,429 --> 00:17:24,490
it's not clear to me what the difference

345
00:17:20,709 --> 00:17:26,350
between this and apps is are you asking

346
00:17:24,490 --> 00:17:27,970
difference between this and taps

347
00:17:26,349 --> 00:17:30,759
the difference between this and abs are

348
00:17:27,970 --> 00:17:33,519
more generally what does what is dead

349
00:17:30,759 --> 00:17:36,250
and you have beyond just an API and I

350
00:17:33,519 --> 00:17:40,720
say just not because it's simple but

351
00:17:36,250 --> 00:17:43,630
what's there to do here beyond there are

352
00:17:40,720 --> 00:17:46,029
so quick transporter cars some wire

353
00:17:43,630 --> 00:17:49,330
changes for like stuff like origin

354
00:17:46,029 --> 00:17:52,169
checks but those are relatively simple

355
00:17:49,330 --> 00:17:56,740
HTTP free transport requires like some

356
00:17:52,169 --> 00:17:59,370
sayings to fit or Batory data in to http

357
00:17:56,740 --> 00:18:02,980
free and those have to be well defined

358
00:17:59,370 --> 00:18:05,320
so that's that's the wire part and this

359
00:18:02,980 --> 00:18:07,720
is a major part of why we're bringing it

360
00:18:05,320 --> 00:18:11,740
here if because if it was just simply an

361
00:18:07,720 --> 00:18:14,820
API we could have it would have been to

362
00:18:11,740 --> 00:18:17,860
some extent out of scope of IETF but

363
00:18:14,820 --> 00:18:26,009
this requires a lot of work on how to

364
00:18:17,860 --> 00:18:26,008
figure out the wire protocol yeah so I I

365
00:18:26,700 --> 00:18:35,769
could are you tearing this thing so I

366
00:18:34,269 --> 00:18:38,559
was saying that this is if you can't

367
00:18:35,769 --> 00:18:42,909
specify the requirements and then they

368
00:18:38,559 --> 00:18:45,908
turn into protocol building units that's

369
00:18:42,909 --> 00:18:49,090
fine but that transport itself is simply

370
00:18:45,909 --> 00:18:53,500
an API there are so it goes into working

371
00:18:49,090 --> 00:18:56,559
groups I think : would you mind if I let

372
00:18:53,500 --> 00:19:03,490
Bernard in before you please do okay

373
00:18:56,559 --> 00:19:08,620
Bernard I'm pushing the red bug you're

374
00:19:03,490 --> 00:19:11,980
on Bernard speak Bernard if you're

375
00:19:08,620 --> 00:19:14,168
speaking Bernard you're muted coming out

376
00:19:11,980 --> 00:19:20,009
yes yes all right

377
00:19:14,169 --> 00:19:23,860
so I just had a security point of

378
00:19:20,009 --> 00:19:28,149
meaning the agent 33 trans Lord and a

379
00:19:23,860 --> 00:19:31,320
quick transport are they equivalently

380
00:19:28,149 --> 00:19:34,870
secure it seems linearly HTTP 3 version

381
00:19:31,320 --> 00:19:40,240
can inherit some of the things from web

382
00:19:34,870 --> 00:19:43,360
sockets courts all that stuff is there

383
00:19:40,240 --> 00:19:45,790
and also potentially fall back with the

384
00:19:43,360 --> 00:19:49,000
issues that echo readies the potentially

385
00:19:45,790 --> 00:19:52,240
their the quick transport just uses an

386
00:19:49,000 --> 00:19:53,860
IP address and a port doesn't need I

387
00:19:52,240 --> 00:19:55,240
guess much in the way of protocol work

388
00:19:53,860 --> 00:19:57,429
but from a security point of view could

389
00:19:55,240 --> 00:19:58,960
you comment on that is there differences

390
00:19:57,430 --> 00:20:00,370
in the security requirements and

391
00:19:58,960 --> 00:20:02,290
function now also the functionality

392
00:20:00,370 --> 00:20:04,179
seems pretty similar right you can do

393
00:20:02,290 --> 00:20:06,510
everything in the HTTP 3 that you can do

394
00:20:04,180 --> 00:20:10,860
in the quick transport is that right

395
00:20:06,510 --> 00:20:14,970
basically yeah in terms of security

396
00:20:10,860 --> 00:20:17,560
requirements I believe like they're both

397
00:20:14,970 --> 00:20:20,380
there are slightly different strata

398
00:20:17,560 --> 00:20:23,379
models but with HTTP free transfer - you

399
00:20:20,380 --> 00:20:25,150
have to watch out for like once you are

400
00:20:23,380 --> 00:20:27,310
allowed to create streams within a

401
00:20:25,150 --> 00:20:29,520
connection you have to make sure that

402
00:20:27,310 --> 00:20:32,470
you do not create too many streams and

403
00:20:29,520 --> 00:20:35,620
within an eat up all the flow control

404
00:20:32,470 --> 00:20:39,520
window from regular HTTP traffic but

405
00:20:35,620 --> 00:20:42,669
others and that they all have required

406
00:20:39,520 --> 00:20:44,560
plenty of obtain on both parties side so

407
00:20:42,670 --> 00:20:48,220
I believe it should be safe from that

408
00:20:44,560 --> 00:20:50,649
perspective as they both require TLS yes

409
00:20:48,220 --> 00:20:52,420
so I guess basically to ecers point

410
00:20:50,650 --> 00:20:54,160
those threats that I could talked about

411
00:20:52,420 --> 00:20:55,840
wouldn't exist in the quick transport

412
00:20:54,160 --> 00:20:57,030
but they would in the HTTP 3 with

413
00:20:55,840 --> 00:21:03,280
fallback I guess

414
00:20:57,030 --> 00:21:04,870
all right probably I won't use any more

415
00:21:03,280 --> 00:21:08,730
and I need to talk with our more about

416
00:21:04,870 --> 00:21:08,729
this class of attacks okay Thank You

417
00:21:09,030 --> 00:21:14,500
Colin jegs my comment is actually sure I

418
00:21:12,310 --> 00:21:15,669
don't know whether this is exactly the

419
00:21:14,500 --> 00:21:17,440
right solution or not or what the

420
00:21:15,670 --> 00:21:18,790
technical security deals are but I think

421
00:21:17,440 --> 00:21:20,230
I have a real need for something like

422
00:21:18,790 --> 00:21:22,090
this and it would be really useful to be

423
00:21:20,230 --> 00:21:26,290
able to do this and using the whole web

424
00:21:22,090 --> 00:21:28,090
RTC data channel stack is is just into

425
00:21:26,290 --> 00:21:29,649
it is too difficult it's a bar too high

426
00:21:28,090 --> 00:21:31,360
to reach so we need something much

427
00:21:29,650 --> 00:21:34,450
simpler than that that allows us to do

428
00:21:31,360 --> 00:21:39,340
it I think we proceed with something

429
00:21:34,450 --> 00:21:40,990
along these lines that's ready to talk

430
00:21:39,340 --> 00:21:42,159
about the dispatched question I think

431
00:21:40,990 --> 00:21:43,840
this is a big enough piece of work that

432
00:21:42,160 --> 00:21:46,780
it needs a pause and a working group

433
00:21:43,840 --> 00:21:49,899
rather than being assigned to an

434
00:21:46,780 --> 00:21:51,610
existing working group or otherwise

435
00:21:49,900 --> 00:21:54,250
dispatched certainly I don't think it's

436
00:21:51,610 --> 00:21:56,139
ready for a tea sponsorship and I will

437
00:21:54,250 --> 00:21:58,900
we go for those of you who have very

438
00:21:56,140 --> 00:22:01,000
very long memories that when quick was

439
00:21:58,900 --> 00:22:02,770
started one of the things inside cool

440
00:22:01,000 --> 00:22:05,470
that was considered was just taking the

441
00:22:02,770 --> 00:22:07,930
WebRTC data channels back and just

442
00:22:05,470 --> 00:22:10,150
making that real easy you can see we

443
00:22:07,930 --> 00:22:10,840
didn't go there we went somewhere else

444
00:22:10,150 --> 00:22:13,030
entirely

445
00:22:10,840 --> 00:22:14,560
and I think we're at the risk of kind of

446
00:22:13,030 --> 00:22:17,950
coming back and making some of the same

447
00:22:14,560 --> 00:22:21,210
mistakes we made an RTC web for example

448
00:22:17,950 --> 00:22:24,250
though the WebSockets API imitation

449
00:22:21,210 --> 00:22:26,140
again if we don't start with saying at

450
00:22:24,250 --> 00:22:28,600
above here are the requirements that

451
00:22:26,140 --> 00:22:31,210
we're trying to meet and here are the

452
00:22:28,600 --> 00:22:33,250
design spaces of api's than I want and I

453
00:22:31,210 --> 00:22:36,820
think that we may end up saying that

454
00:22:33,250 --> 00:22:40,210
what you end up wanting is quick with

455
00:22:36,820 --> 00:22:44,350
some of the data channel capabilities

456
00:22:40,210 --> 00:22:48,070
built into quick native rather than HTTP

457
00:22:44,350 --> 00:22:49,480
3 or WebSockets like models and I would

458
00:22:48,070 --> 00:22:54,610
really like to start there

459
00:22:49,480 --> 00:22:56,620
rather than really retrofitting thank

460
00:22:54,610 --> 00:22:59,050
you I agree that we need the more

461
00:22:56,620 --> 00:23:03,040
specific list of requirements and I

462
00:22:59,050 --> 00:23:04,780
actually have something like sip list

463
00:23:03,040 --> 00:23:10,210
but they didn't put this on the slides

464
00:23:04,780 --> 00:23:13,810
because of time constraints so I really

465
00:23:10,210 --> 00:23:15,300
like that direction so internally with

466
00:23:13,810 --> 00:23:17,200
the older son system to do that

467
00:23:15,300 --> 00:23:20,560
bi-directional communication based

468
00:23:17,200 --> 00:23:23,860
actually - we already put a job actually

469
00:23:20,560 --> 00:23:26,620
is to discuss how we did that actually

470
00:23:23,860 --> 00:23:29,169
we try to solve very similar problem in

471
00:23:26,620 --> 00:23:37,300
different the problem space deafening a

472
00:23:29,170 --> 00:23:38,800
wish to catch a high branch Ramo +1 to

473
00:23:37,300 --> 00:23:41,620
the it seems like there needs to be a

474
00:23:38,800 --> 00:23:43,060
bar for this and actually encouragement

475
00:23:41,620 --> 00:23:44,500
to put that together for Singapore like

476
00:23:43,060 --> 00:23:46,270
it seems like it's actually pretty good

477
00:23:44,500 --> 00:23:49,000
shape to take there

478
00:23:46,270 --> 00:23:51,580
I did have another I got in line because

479
00:23:49,000 --> 00:23:53,350
I hadn't heard Rana speak yet and say

480
00:23:51,580 --> 00:23:57,580
the word taps so when I want to say the

481
00:23:53,350 --> 00:24:00,040
word taps the war taps was in original

482
00:23:57,580 --> 00:24:02,439
version but yeah yeah we're aware of us

483
00:24:00,040 --> 00:24:05,080
taps okay we're looking so I like I'd

484
00:24:02,440 --> 00:24:06,299
like to make a more specific sort of

485
00:24:05,080 --> 00:24:08,289
suggestion here

486
00:24:06,299 --> 00:24:10,150
specifically you're looking at basically

487
00:24:08,289 --> 00:24:12,490
having this this web transport run on

488
00:24:10,150 --> 00:24:14,409
top of three underlying potential

489
00:24:12,490 --> 00:24:16,630
transports which have somewhat different

490
00:24:14,409 --> 00:24:17,770
contracts one of the big differences

491
00:24:16,630 --> 00:24:19,450
between them is some of them are

492
00:24:17,770 --> 00:24:22,000
streamed and some of them are not um

493
00:24:19,450 --> 00:24:23,950
this is exactly sort of the kind of

494
00:24:22,000 --> 00:24:25,690
situation that the Cape's API was

495
00:24:23,950 --> 00:24:27,789
designed to look at

496
00:24:25,690 --> 00:24:29,650
I would suggest having a look at least

497
00:24:27,789 --> 00:24:32,169
at the taps architecture and if there's

498
00:24:29,650 --> 00:24:34,000
anything in the taps architecture that

499
00:24:32,169 --> 00:24:35,620
doesn't cover what you're trying to do

500
00:24:34,000 --> 00:24:36,789
we would very much like to know about it

501
00:24:35,620 --> 00:24:40,539
in taps because we want to finish that

502
00:24:36,789 --> 00:24:42,879
by Singapore yes so so short to answer

503
00:24:40,539 --> 00:24:44,950
is we believe that it would be useful to

504
00:24:42,880 --> 00:24:48,159
provide the taps like app ability in

505
00:24:44,950 --> 00:24:50,500
that JPI for this yes we do not want to

506
00:24:48,159 --> 00:24:53,440
actually bake it like on zero browser

507
00:24:50,500 --> 00:24:57,070
API because it's kind of too low high

508
00:24:53,440 --> 00:24:58,390
level compared to what we want that's a

509
00:24:57,070 --> 00:25:00,668
short answer but we've definitely

510
00:24:58,390 --> 00:25:02,500
considered and this is something I wrote

511
00:25:00,669 --> 00:25:07,120
up let's talk a bit also more into the

512
00:25:02,500 --> 00:25:09,100
long unit sorry thanks am i I'm SEF

513
00:25:07,120 --> 00:25:11,168
gentle I've just gotten back off the

514
00:25:09,100 --> 00:25:13,209
weekend hanging out at D Web talking to

515
00:25:11,169 --> 00:25:14,950
a bunch of people doing and working on

516
00:25:13,210 --> 00:25:19,320
debt working on ipfs and a bunch of

517
00:25:14,950 --> 00:25:22,360
these other technologies one of the big

518
00:25:19,320 --> 00:25:23,789
the sentiment there is that WebRTC has

519
00:25:22,360 --> 00:25:26,080
not been useful for a lot of folks

520
00:25:23,789 --> 00:25:28,030
they've found a lot of difficulty in

521
00:25:26,080 --> 00:25:30,428
using web proxies a web RTC to build

522
00:25:28,030 --> 00:25:31,658
peer-to-peer systems and hence the need

523
00:25:30,429 --> 00:25:33,280
for things like Beeker browser to be

524
00:25:31,659 --> 00:25:36,640
able to actually add application level

525
00:25:33,280 --> 00:25:39,100
like explicitly implement protocols like

526
00:25:36,640 --> 00:25:41,200
that in the browser because of a lack of

527
00:25:39,100 --> 00:25:42,789
more protocols like this so I just want

528
00:25:41,200 --> 00:25:43,900
to say like as someone representing all

529
00:25:42,789 --> 00:25:46,179
of the folks that I talked to on the

530
00:25:43,900 --> 00:25:48,030
weekend there's a lot of demand for more

531
00:25:46,179 --> 00:25:52,210
ways that we can do networking so

532
00:25:48,030 --> 00:25:54,039
generally support it cool so we are at

533
00:25:52,210 --> 00:25:56,650
about five minutes before the end of

534
00:25:54,039 --> 00:25:58,059
this discussion so I would appreciate if

535
00:25:56,650 --> 00:25:59,590
people can we've already had some

536
00:25:58,059 --> 00:26:01,120
comments about what do we do next and

537
00:25:59,590 --> 00:26:05,049
comments in that direction would be

538
00:26:01,120 --> 00:26:07,570
highly appreciated right to quick

539
00:26:05,049 --> 00:26:09,580
technical points and then all next I

540
00:26:07,570 --> 00:26:11,700
guess one I'm sort of cautiously

541
00:26:09,580 --> 00:26:13,720
optimistic about this I'm vaguely sad

542
00:26:11,700 --> 00:26:16,179
that people seem so sad about data

543
00:26:13,720 --> 00:26:17,990
channels but visit of life so there we

544
00:26:16,179 --> 00:26:19,309
are I'm

545
00:26:17,990 --> 00:26:20,480
I don't think this will solve your debt

546
00:26:19,309 --> 00:26:21,760
problem because there's a specific

547
00:26:20,480 --> 00:26:23,899
client server mechanism and so

548
00:26:21,760 --> 00:26:27,110
unfortunately your continue to be sad by

549
00:26:23,899 --> 00:26:29,059
digital's um in terms of we do next this

550
00:26:27,110 --> 00:26:32,059
is clearly like way way too big to just

551
00:26:29,059 --> 00:26:34,100
a tea sponsor or take to a poop down so

552
00:26:32,059 --> 00:26:37,360
I think like the right answer is off so

553
00:26:34,100 --> 00:26:37,360
I would encourage you to ask for one in

554
00:26:43,870 --> 00:26:50,899
school but so could you clarify for me

555
00:26:48,679 --> 00:26:53,899
is HTTP three transport built on top of

556
00:26:50,899 --> 00:26:59,959
quick transport on top of quick

557
00:26:53,899 --> 00:27:03,320
transferred oh no it's so it seems quick

558
00:26:59,960 --> 00:27:05,960
transport implemented by browsers yes

559
00:27:03,320 --> 00:27:08,149
quick transport is basically quick but

560
00:27:05,960 --> 00:27:11,090
with origin filled that's the simplest

561
00:27:08,149 --> 00:27:14,750
way to describe it and it's a very

562
00:27:11,090 --> 00:27:15,350
low-level primitive it's very simple but

563
00:27:14,750 --> 00:27:19,820
it's not

564
00:27:15,350 --> 00:27:22,850
it's used by HTTP three transport yes

565
00:27:19,820 --> 00:27:27,110
and as much as like they both use quick

566
00:27:22,850 --> 00:27:30,668
but that's it that's okay that's good to

567
00:27:27,110 --> 00:27:34,039
know I I just will say for my use cases

568
00:27:30,669 --> 00:27:35,659
HTTP three transport provides all the

569
00:27:34,039 --> 00:27:38,000
benefits that I would want out of quick

570
00:27:35,659 --> 00:27:39,679
transport so I don't have a use case for

571
00:27:38,000 --> 00:27:44,350
quick transport it might be easier to

572
00:27:39,679 --> 00:27:44,350
dispatch without quick transport yeah

573
00:27:45,669 --> 00:27:52,250
repair to pay on I remember this time I

574
00:27:49,070 --> 00:27:53,990
just wanted to really quickly say that I

575
00:27:52,250 --> 00:27:56,570
really dislike the idea of quick

576
00:27:53,990 --> 00:27:59,080
transport because I like the idea of

577
00:27:56,570 --> 00:28:02,029
having one protocol that I can dispatch

578
00:27:59,080 --> 00:28:04,279
age-3 for instance because people have

579
00:28:02,029 --> 00:28:06,230
said is that the same well yes but it's

580
00:28:04,279 --> 00:28:08,600
also a superset because HTTP implies

581
00:28:06,230 --> 00:28:09,799
caching and caching is a way to get

582
00:28:08,600 --> 00:28:10,990
scalability and that's a huge

583
00:28:09,799 --> 00:28:13,940
differentiator

584
00:28:10,990 --> 00:28:16,010
suzay short answer is I've thought a lot

585
00:28:13,940 --> 00:28:17,899
about quick transfers versus H Freight

586
00:28:16,010 --> 00:28:19,908
transferred and I've talked to a lot of

587
00:28:17,899 --> 00:28:22,010
people and depending on what you want to

588
00:28:19,909 --> 00:28:25,070
use it for you will either really want

589
00:28:22,010 --> 00:28:27,049
one or other because quick transport is

590
00:28:25,070 --> 00:28:29,539
useful for example online games which

591
00:28:27,049 --> 00:28:31,230
just do exchange real time staff and

592
00:28:29,539 --> 00:28:33,510
they don't want to

593
00:28:31,230 --> 00:28:35,130
all aged free overhead but you will

594
00:28:33,510 --> 00:28:37,470
obviously want h free transport to

595
00:28:35,130 --> 00:28:40,470
understand why I want both and I think

596
00:28:37,470 --> 00:28:42,630
we can fix it by fixing HTTP as opposed

597
00:28:40,470 --> 00:28:44,370
to trying to have raw sockets which is

598
00:28:42,630 --> 00:28:46,860
terrible bad you've seen it it's bad

599
00:28:44,370 --> 00:28:48,418
right let's let's make HTTP work really

600
00:28:46,860 --> 00:28:50,939
efficiently for these use cases which

601
00:28:48,419 --> 00:28:54,470
may which may require some extensions

602
00:28:50,940 --> 00:28:56,220
there anyway I'm done

603
00:28:54,470 --> 00:28:57,600
Martin since you were heading for the

604
00:28:56,220 --> 00:29:01,470
mic we have time for one more thing if

605
00:28:57,600 --> 00:29:03,299
you want to say it Mike if burthen after

606
00:29:01,470 --> 00:29:06,480
martin mountain thompson in terms of

607
00:29:03,299 --> 00:29:08,549
dispatching this they the w3c is

608
00:29:06,480 --> 00:29:10,640
obviously gonna have to build an API in

609
00:29:08,549 --> 00:29:13,760
order to support this I suggest that we

610
00:29:10,640 --> 00:29:16,410
simply respond to a request from them

611
00:29:13,760 --> 00:29:19,440
and then talk about creating a working

612
00:29:16,410 --> 00:29:22,049
group in that context now might mean

613
00:29:19,440 --> 00:29:24,809
that we wait to have the buff until they

614
00:29:22,049 --> 00:29:28,129
make their decision but it might also

615
00:29:24,809 --> 00:29:30,720
mean that we can skip the buffing part

616
00:29:28,130 --> 00:29:32,760
we have a liaison we should continue a

617
00:29:30,720 --> 00:29:35,580
conversation with them this is not going

618
00:29:32,760 --> 00:29:39,379
to happen on its own correct so we need

619
00:29:35,580 --> 00:29:39,379
to we need to sort that relationship out

620
00:29:39,410 --> 00:29:45,540
around somewhere and we have a layer

621
00:29:42,000 --> 00:29:47,850
self here so okay so what I've heard is

622
00:29:45,540 --> 00:29:50,250
that several people have expressed

623
00:29:47,850 --> 00:29:51,240
interest several people to express that

624
00:29:50,250 --> 00:29:53,190
this is something that would need the

625
00:29:51,240 --> 00:29:56,910
buff and we definitely need to

626
00:29:53,190 --> 00:29:58,160
coordinate with wc3 and figure out how

627
00:29:56,910 --> 00:30:03,450
to move forward on that

628
00:29:58,160 --> 00:30:06,330
yeah just before I go there is a side

629
00:30:03,450 --> 00:30:08,220
meeting I well in which I want to go in

630
00:30:06,330 --> 00:30:10,799
like the finer points and like quick

631
00:30:08,220 --> 00:30:16,620
versus HTTP free transport and that's in

632
00:30:10,799 --> 00:30:19,010
Tuesday 3:20 p.m. yeah so that's all on

633
00:30:16,620 --> 00:30:19,010
my part

634
00:30:42,860 --> 00:31:20,389
yes what now Paul no it's the same it's

635
00:30:48,920 --> 00:31:22,400
a joint okay there we go okay all right

636
00:31:20,390 --> 00:31:25,610
okay people if you can be quiet we're

637
00:31:22,400 --> 00:31:27,290
continuing the session here so the box

638
00:31:25,610 --> 00:31:30,530
just to highlight moths that are going

639
00:31:27,290 --> 00:31:32,629
on there is the the mob spa on Thursday

640
00:31:30,530 --> 00:31:40,330
and this was related people remember we

641
00:31:32,630 --> 00:31:43,130
had the G GI e topic so how did okay oh

642
00:31:40,330 --> 00:31:47,409
okay sorry about that someone messed up

643
00:31:43,130 --> 00:31:49,790
probably me and then there's the ad Bob

644
00:31:47,410 --> 00:31:51,500
applications doing DNS I didn't put when

645
00:31:49,790 --> 00:31:54,470
that one was down so people can look at

646
00:31:51,500 --> 00:31:55,760
their agenda side meetings there is a

647
00:31:54,470 --> 00:31:56,690
side meeting and Eric I don't know if

648
00:31:55,760 --> 00:31:58,070
you want to say something really fast

649
00:31:56,690 --> 00:31:59,360
for international shaking because I just

650
00:31:58,070 --> 00:32:00,350
went through and looked at side meetings

651
00:31:59,360 --> 00:32:02,240
and looked at once it might be

652
00:32:00,350 --> 00:32:03,439
interesting because that people don't

653
00:32:02,240 --> 00:32:05,450
say if they're closed or general

654
00:32:03,440 --> 00:32:06,620
interest so if you want a bunch of

655
00:32:05,450 --> 00:32:08,140
people they or don't want a bunch of

656
00:32:06,620 --> 00:32:09,320
people they might well say something

657
00:32:08,140 --> 00:32:12,200
well I

658
00:32:09,320 --> 00:32:14,990
Eric Berger and this is the ITF so we're

659
00:32:12,200 --> 00:32:17,690
using an ITF room so it's open however

660
00:32:14,990 --> 00:32:19,610
it's mostly going to be regulators and

661
00:32:17,690 --> 00:32:22,070
policy makers from various countries

662
00:32:19,610 --> 00:32:24,620
around the world so if you're thinking

663
00:32:22,070 --> 00:32:27,200
this is where Jim and I are gonna do a

664
00:32:24,620 --> 00:32:28,549
knock-down drag-out steel cage match of

665
00:32:27,200 --> 00:32:31,280
international shake and you'll be

666
00:32:28,549 --> 00:32:33,410
disappointed but if you're interested in

667
00:32:31,280 --> 00:32:37,879
other countries other than the US and

668
00:32:33,410 --> 00:32:40,190
Canada adopting stir and shake and then

669
00:32:37,880 --> 00:32:42,410
feel free to come although the room I

670
00:32:40,190 --> 00:32:45,020
think only seats 16 I didn't expect lots

671
00:32:42,410 --> 00:32:47,390
and lots of people the show so okay send

672
00:32:45,020 --> 00:32:49,668
me emails if you do you want to go okay

673
00:32:47,390 --> 00:32:51,440
and it's the color room I think it's

674
00:32:49,669 --> 00:32:53,790
Kohler and not Collier awesome right

675
00:32:51,440 --> 00:32:56,340
there earn the cold line

676
00:32:53,790 --> 00:32:58,440
okay alrighty and then Victor already

677
00:32:56,340 --> 00:32:59,639
mentioned his his web transport had a

678
00:32:58,440 --> 00:33:01,050
question after it because it had a

679
00:32:59,640 --> 00:33:02,340
question in the agenda but it sounds

680
00:33:01,050 --> 00:33:03,450
like you're having it you're on right

681
00:33:02,340 --> 00:33:06,659
okay

682
00:33:03,450 --> 00:33:09,480
yep it's on and then there's an HTTP

683
00:33:06,660 --> 00:33:10,860
priorities thing in Van Horn and again I

684
00:33:09,480 --> 00:33:13,140
just pull things that look like they

685
00:33:10,860 --> 00:33:16,469
might be interesting so so months to say

686
00:33:13,140 --> 00:33:19,100
30 seconds on what that's about mr.

687
00:33:16,470 --> 00:33:21,960
Nottingham is that yours HTTP priorities

688
00:33:19,100 --> 00:33:22,969
so I mean I can speak to them when we're

689
00:33:21,960 --> 00:33:27,210
trying to work out what to do with

690
00:33:22,970 --> 00:33:29,010
signaling of priorities in HTTP okay did

691
00:33:27,210 --> 00:33:32,310
you get the web pack one that's on -

692
00:33:29,010 --> 00:33:34,590
more money - just saw that goodbye an

693
00:33:32,310 --> 00:33:36,240
email there the web packaging say media

694
00:33:34,590 --> 00:33:39,360
don't know what time it's tomorrow

695
00:33:36,240 --> 00:33:40,680
morning tomorrow morning Abbot session

696
00:33:39,360 --> 00:33:44,820
Jeffrey you want to say which room it is

697
00:33:40,680 --> 00:33:46,380
it's in in Van Horne 8:30 okay okay yeah

698
00:33:44,820 --> 00:33:47,460
and again there's the link in there for

699
00:33:46,380 --> 00:33:48,510
where you can go look at all of them

700
00:33:47,460 --> 00:33:53,940
because there may be others that you're

701
00:33:48,510 --> 00:33:56,129
interested in okay there's something

702
00:33:53,940 --> 00:33:58,470
will decide meetings and you may

703
00:33:56,130 --> 00:34:03,030
remember that you're working on

704
00:33:58,470 --> 00:34:04,740
encryption for email so that users can

705
00:34:03,030 --> 00:34:07,379
actually use it and there was a mailing

706
00:34:04,740 --> 00:34:09,770
list called meetup and we all now also

707
00:34:07,380 --> 00:34:12,120
having site meetings on the topic and

708
00:34:09,770 --> 00:34:15,449
the next time meeting will be on

709
00:34:12,120 --> 00:34:23,399
Wednesday afternoon I think it was free

710
00:34:15,449 --> 00:34:25,859
20 in the room up there in-situ can send

711
00:34:23,399 --> 00:34:28,759
an email as well but fun topic is like

712
00:34:25,860 --> 00:34:32,480
synchronization of private piece which

713
00:34:28,760 --> 00:34:32,480
affect a lot of interest

714
00:34:34,219 --> 00:34:39,569
sorry the the new working groups I'm

715
00:34:36,719 --> 00:34:42,230
aware of is the the bimmy or did we

716
00:34:39,570 --> 00:34:50,280
charter that while I was sleeping

717
00:34:42,230 --> 00:34:53,370
this is very new I'm quite certain we

718
00:34:50,280 --> 00:35:00,360
have a rum working group which was

719
00:34:53,370 --> 00:35:01,859
chartered since ID f-104 then was too

720
00:35:00,360 --> 00:35:03,380
far from the microphone but he said this

721
00:35:01,860 --> 00:35:05,660
is the fake news

722
00:35:03,380 --> 00:35:07,130
I failed I found the chai guess I found

723
00:35:05,660 --> 00:35:08,990
the Charter and thought it was work yeah

724
00:35:07,130 --> 00:35:15,190
it says what happened but there's a

725
00:35:08,990 --> 00:35:15,189
working group called rum chartered since

726
00:35:16,990 --> 00:35:42,140
but whatever oh oh right paw words to

727
00:35:30,410 --> 00:35:46,730
word I'll even remember what the acronym

728
00:35:42,140 --> 00:35:49,609
is real a user machine okay

729
00:35:46,730 --> 00:35:56,540
it's basically discussing an interface

730
00:35:49,610 --> 00:36:04,550
for a graphical user device primarily

731
00:35:56,540 --> 00:36:07,220
for the video relay services okay you

732
00:36:04,550 --> 00:36:08,480
know please come before we before we get

733
00:36:07,220 --> 00:36:10,609
into the topics there's just one thing

734
00:36:08,480 --> 00:36:13,210
that I wanted to say and I don't know

735
00:36:10,610 --> 00:36:17,030
Adam wants to say something as well

736
00:36:13,210 --> 00:36:19,610
this is Barry liebe Hart ad with the the

737
00:36:17,030 --> 00:36:22,670
adsr currently have currently asked the

738
00:36:19,610 --> 00:36:24,980
NomCom to fill two-part ad positions

739
00:36:22,670 --> 00:36:28,460
because adam and alexei are ending their

740
00:36:24,980 --> 00:36:30,380
terms at this time but we are having a

741
00:36:28,460 --> 00:36:32,360
meeting later this week the art ADEs

742
00:36:30,380 --> 00:36:34,730
about deciding whether we really want to

743
00:36:32,360 --> 00:36:38,750
fill two art ad positions or just one

744
00:36:34,730 --> 00:36:40,550
and drop down to two 80s in the area so

745
00:36:38,750 --> 00:36:43,430
we'll be figuring that out this week and

746
00:36:40,550 --> 00:36:50,210
and we'll let NomCom know our decision

747
00:36:43,430 --> 00:36:55,339
and they'll let you know input to that

748
00:36:50,210 --> 00:36:56,450
will not be unwelcome so before we start

749
00:36:55,340 --> 00:36:58,970
this the one thing I wanted to mention

750
00:36:56,450 --> 00:37:00,290
is that there is a group of people and

751
00:36:58,970 --> 00:37:01,549
this was posted to the art list I just

752
00:37:00,290 --> 00:37:02,840
want to make certain everyone has

753
00:37:01,550 --> 00:37:04,760
noticed it there was if there's a group

754
00:37:02,840 --> 00:37:06,410
of people putting together a formal

755
00:37:04,760 --> 00:37:11,060
specification of the robots exclusion

756
00:37:06,410 --> 00:37:12,470
protocol which menos robots.txt I am my

757
00:37:11,060 --> 00:37:13,910
inclination at this point is to ad

758
00:37:12,470 --> 00:37:15,799
sponsor this I think would be a very

759
00:37:13,910 --> 00:37:17,310
very good thing to have an RFC that

760
00:37:15,800 --> 00:37:19,980
formally defines this with

761
00:37:17,310 --> 00:37:22,380
modern BNF and and all the bells and

762
00:37:19,980 --> 00:37:23,850
whistles that come around that if you

763
00:37:22,380 --> 00:37:26,220
have any concerns about that course of

764
00:37:23,850 --> 00:37:29,130
action or if you want to like give input

765
00:37:26,220 --> 00:37:36,930
to the document please reach out and let

766
00:37:29,130 --> 00:37:38,850
us know Thanks okay I'm going to be

767
00:37:36,930 --> 00:37:39,509
talking about this or rip stuff here for

768
00:37:38,850 --> 00:37:44,279
a second

769
00:37:39,510 --> 00:37:46,020
so next slide please I where we're at a

770
00:37:44,280 --> 00:37:47,370
very early stage on this draft

771
00:37:46,020 --> 00:37:48,990
okay the authors don't even agree on

772
00:37:47,370 --> 00:37:50,700
what to do we're still sort of thinking

773
00:37:48,990 --> 00:37:52,290
about it much of the stuff that I see

774
00:37:50,700 --> 00:37:53,850
coming up that we discussed earlier

775
00:37:52,290 --> 00:37:55,650
today and some of the other sessions

776
00:37:53,850 --> 00:37:57,000
they just make me rethink that there's

777
00:37:55,650 --> 00:37:59,430
much better ways to do some of the

778
00:37:57,000 --> 00:38:00,690
things they're in here so this is I want

779
00:37:59,430 --> 00:38:02,580
you to get a feeling for the problem

780
00:38:00,690 --> 00:38:04,950
we're trying to solve and we're trying

781
00:38:02,580 --> 00:38:05,940
to get a bunch of people to come and get

782
00:38:04,950 --> 00:38:08,069
their input make sure we've got a

783
00:38:05,940 --> 00:38:10,620
variety of riot requirements into it and

784
00:38:08,070 --> 00:38:14,880
it meets an interesting solution and it

785
00:38:10,620 --> 00:38:17,580
is around the space of sending media in

786
00:38:14,880 --> 00:38:21,990
a more cloud friendly way so next slide

787
00:38:17,580 --> 00:38:24,420
please the problem that we've been

788
00:38:21,990 --> 00:38:26,819
looking at is we start building all of

789
00:38:24,420 --> 00:38:28,500
these cloud services and they might have

790
00:38:26,820 --> 00:38:30,840
WebRTC coming up with them and they

791
00:38:28,500 --> 00:38:33,030
typically needed to take a sip trunk of

792
00:38:30,840 --> 00:38:36,290
some form to take some voice over to the

793
00:38:33,030 --> 00:38:38,880
PSTN or maybe over or to a you know

794
00:38:36,290 --> 00:38:40,230
voice recognition API or Texas speech

795
00:38:38,880 --> 00:38:44,130
very there's a bunch of use case we'll

796
00:38:40,230 --> 00:38:46,440
talk about those in a minute but sip was

797
00:38:44,130 --> 00:38:48,540
not very friendly in the way that it

798
00:38:46,440 --> 00:38:50,970
worked in coming into large current

799
00:38:48,540 --> 00:38:52,170
cloud deployments it's there's a lot of

800
00:38:50,970 --> 00:38:53,430
infrastructure that's been built for

801
00:38:52,170 --> 00:38:55,980
those that we can't particularly take

802
00:38:53,430 --> 00:38:57,390
advantage of and this protocol that

803
00:38:55,980 --> 00:38:59,160
we're looking at is how can we do a

804
00:38:57,390 --> 00:39:00,390
better job of that make it easier for us

805
00:38:59,160 --> 00:39:02,670
make it easier for that type of

806
00:39:00,390 --> 00:39:04,410
connection to work so we're we're

807
00:39:02,670 --> 00:39:06,660
looking at this is you know if you take

808
00:39:04,410 --> 00:39:07,890
WebEx going to or you know I've got

809
00:39:06,660 --> 00:39:09,270
cloud conferencing service you know

810
00:39:07,890 --> 00:39:10,560
there's there's there's end users and

811
00:39:09,270 --> 00:39:12,270
the devices that might be using WebRTC

812
00:39:10,560 --> 00:39:13,650
or something like that up to a cloud

813
00:39:12,270 --> 00:39:15,180
service or who knows what they're using

814
00:39:13,650 --> 00:39:17,430
it's a cloud service that's doing a

815
00:39:15,180 --> 00:39:20,790
bunch of processing it inevitably has to

816
00:39:17,430 --> 00:39:22,109
do some subtracted a off to a service

817
00:39:20,790 --> 00:39:23,880
provider that'll connect it up to the

818
00:39:22,110 --> 00:39:25,800
PSTN and what we're looking at is

819
00:39:23,880 --> 00:39:28,170
replacing that link at the top one on

820
00:39:25,800 --> 00:39:30,090
the green here between the cloud service

821
00:39:28,170 --> 00:39:30,779
and the service provider it's not about

822
00:39:30,090 --> 00:39:32,099
what go

823
00:39:30,779 --> 00:39:33,599
down to the endpoints or any of those

824
00:39:32,099 --> 00:39:36,359
things it's a cloud-to-cloud sort of

825
00:39:33,599 --> 00:39:38,130
thing that's you know less than 20 years

826
00:39:36,359 --> 00:39:42,509
old it's a sort of modernized version of

827
00:39:38,130 --> 00:39:43,729
it so next slide so later on I'm going

828
00:39:42,509 --> 00:39:46,469
to talk a little bit about the technical

829
00:39:43,729 --> 00:39:48,239
properties of this hour but we're gonna

830
00:39:46,469 --> 00:39:49,679
run media over HTTP

831
00:39:48,239 --> 00:39:53,969
we've had several discussions about that

832
00:39:49,679 --> 00:39:55,739
in various forms day of h3 and we're

833
00:39:53,969 --> 00:39:59,669
going to try and have a very simple

834
00:39:55,739 --> 00:40:01,529
replacement that gets rid of many of the

835
00:39:59,669 --> 00:40:03,929
problems that we've had with sip SDP and

836
00:40:01,529 --> 00:40:07,140
RTP and there's a lot of reasons we want

837
00:40:03,929 --> 00:40:08,999
to do this a the big ones are there are

838
00:40:07,140 --> 00:40:11,219
all kinds of services that were built

839
00:40:08,999 --> 00:40:13,109
for scaling large-scale websites are

840
00:40:11,219 --> 00:40:14,819
already out there they're very easy to

841
00:40:13,109 --> 00:40:16,679
use you're familiar with them you've

842
00:40:14,819 --> 00:40:18,479
used them like auto scaling I mean load

843
00:40:16,679 --> 00:40:19,769
balancing is something that you can do

844
00:40:18,479 --> 00:40:21,118
and sip you could build all of this

845
00:40:19,769 --> 00:40:22,979
every one of these things you could

846
00:40:21,119 --> 00:40:24,929
build and sip but they're already built

847
00:40:22,979 --> 00:40:28,618
as deployed an incredibly scalable way

848
00:40:24,929 --> 00:40:32,069
on every major cloud service I you know

849
00:40:28,619 --> 00:40:33,809
H a we did it one way doing assuming a

850
00:40:32,069 --> 00:40:36,538
certain sort of design and sip it's very

851
00:40:33,809 --> 00:40:40,679
hard to do I you know high availability

852
00:40:36,539 --> 00:40:42,659
in a modern cloud world where various

853
00:40:40,679 --> 00:40:44,069
idioms will just be rebooted and things

854
00:40:42,659 --> 00:40:45,359
like that as part of the surface it

855
00:40:44,069 --> 00:40:46,679
wasn't you know sip wasn't designed

856
00:40:45,359 --> 00:40:48,449
quite for that type of high reliability

857
00:40:46,679 --> 00:40:50,400
was designed for a different type so API

858
00:40:48,449 --> 00:40:52,199
gateways being able to use those being

859
00:40:50,400 --> 00:40:55,499
able to use all the modern web das

860
00:40:52,199 --> 00:40:56,819
prevention tools service meshes all the

861
00:40:55,499 --> 00:40:58,408
application monitoring there there's

862
00:40:56,819 --> 00:40:59,969
just an incredible amount of

863
00:40:58,409 --> 00:41:02,609
infrastructure that's been made for

864
00:40:59,969 --> 00:41:04,739
building these HTTP based services and

865
00:41:02,609 --> 00:41:06,749
we want to be able to take advantage of

866
00:41:04,739 --> 00:41:08,939
those in a really easy way so that's

867
00:41:06,749 --> 00:41:12,779
where this that's the design space that

868
00:41:08,939 --> 00:41:14,969
we're trying to deal with next slide as

869
00:41:12,779 --> 00:41:16,890
I mentioned you know this is this is a

870
00:41:14,969 --> 00:41:19,019
logical extension of people starting to

871
00:41:16,890 --> 00:41:20,969
move you know we went into the WebRTC

872
00:41:19,019 --> 00:41:22,169
stuff this moves the other chunk of it

873
00:41:20,969 --> 00:41:24,089
that was never what was always out of

874
00:41:22,169 --> 00:41:27,989
scope for WebRTC which was how do you do

875
00:41:24,089 --> 00:41:29,189
those cross cloud links next slide so

876
00:41:27,989 --> 00:41:31,169
I'm going to talk about a couple of the

877
00:41:29,189 --> 00:41:35,640
actual sort of use cases that are the

878
00:41:31,169 --> 00:41:38,729
drivings yes next class please so you

879
00:41:35,640 --> 00:41:40,739
know one is the general telecom apps and

880
00:41:38,729 --> 00:41:42,209
bringing those into like a wet past type

881
00:41:40,739 --> 00:41:43,469
environment so we're seeing more and

882
00:41:42,209 --> 00:41:44,160
more of those you see companies like

883
00:41:43,469 --> 00:41:46,860
twill

884
00:41:44,160 --> 00:41:49,560
others Google there's all kinds that

885
00:41:46,860 --> 00:41:51,120
have various infrastructure for building

886
00:41:49,560 --> 00:41:54,840
these things and how do we connect them

887
00:41:51,120 --> 00:41:56,370
together the calling surfacing anything

888
00:41:54,840 --> 00:41:58,440
you'll call call centers in that type of

889
00:41:56,370 --> 00:41:59,910
area right now is in a large transition

890
00:41:58,440 --> 00:42:01,950
from being premise-based to being

891
00:41:59,910 --> 00:42:04,020
cloud-based and as they move to that

892
00:42:01,950 --> 00:42:06,810
they want to be able to use that so the

893
00:42:04,020 --> 00:42:08,040
leading cloud call center providers are

894
00:42:06,810 --> 00:42:09,720
also trying to deal with that if you're

895
00:42:08,040 --> 00:42:12,330
trying to embed those into your website

896
00:42:09,720 --> 00:42:14,160
have a website that has easy chat it's

897
00:42:12,330 --> 00:42:16,380
very common to see WebRTC used for that

898
00:42:14,160 --> 00:42:18,750
now to talk from your browser or your

899
00:42:16,380 --> 00:42:19,740
device up to the cloud service but

900
00:42:18,750 --> 00:42:21,360
there's not a good way to get those

901
00:42:19,740 --> 00:42:24,379
cloud services down to the other parts

902
00:42:21,360 --> 00:42:24,380
of it next slide

903
00:42:25,170 --> 00:42:31,020
SIP trunking just basic connecting to

904
00:42:28,140 --> 00:42:32,400
the PSTN you'll see you might not think

905
00:42:31,020 --> 00:42:33,450
that that's a that's a huge part but I

906
00:42:32,400 --> 00:42:35,670
mean like keep in mind that is the

907
00:42:33,450 --> 00:42:39,210
profitable part of Skype right that is

908
00:42:35,670 --> 00:42:41,220
you know a key part of every whether

909
00:42:39,210 --> 00:42:42,900
it's hangouts or WebEx or any of these

910
00:42:41,220 --> 00:42:44,430
call centers it's a very important part

911
00:42:42,900 --> 00:42:45,750
of all these systems is connectivity to

912
00:42:44,430 --> 00:42:47,430
that system even though people are

913
00:42:45,750 --> 00:42:48,990
largely IP based they still need the

914
00:42:47,430 --> 00:42:50,669
option to be able to do that for a

915
00:42:48,990 --> 00:42:54,020
certain percentage of their calls it's a

916
00:42:50,670 --> 00:42:56,910
very painful part of doing it next slide

917
00:42:54,020 --> 00:42:58,770
so I'm gonna jump in to give you a

918
00:42:56,910 --> 00:43:00,210
little bit of flavor of the way we're

919
00:42:58,770 --> 00:43:02,820
thinking about this problem this is

920
00:43:00,210 --> 00:43:06,570
obviously very early and would change

921
00:43:02,820 --> 00:43:08,100
wildly and where we ghost next slide the

922
00:43:06,570 --> 00:43:09,630
general information flows you start

923
00:43:08,100 --> 00:43:11,640
thinking about what needs to go from one

924
00:43:09,630 --> 00:43:13,740
cloud to the other cloud it's really not

925
00:43:11,640 --> 00:43:15,359
very much information and it's pretty

926
00:43:13,740 --> 00:43:17,009
simple in these cases largely because

927
00:43:15,360 --> 00:43:19,440
they're constrained and we're trying to

928
00:43:17,010 --> 00:43:21,450
currently constrain to just voice on

929
00:43:19,440 --> 00:43:23,520
PSTN Interop we expand out beyond voice

930
00:43:21,450 --> 00:43:27,419
later so one thing that you need to know

931
00:43:23,520 --> 00:43:29,310
is hey what codecs and parameters does

932
00:43:27,420 --> 00:43:30,810
this other side support and it's a very

933
00:43:29,310 --> 00:43:32,490
static thing you can get from the

934
00:43:30,810 --> 00:43:34,290
service provider we support the

935
00:43:32,490 --> 00:43:36,000
following things that's it it doesn't

936
00:43:34,290 --> 00:43:37,560
change on a call by call basis it

937
00:43:36,000 --> 00:43:39,660
doesn't change on the day by day basis

938
00:43:37,560 --> 00:43:41,940
it's a pretty static thing next when you

939
00:43:39,660 --> 00:43:43,649
go to set up a call you can say set up a

940
00:43:41,940 --> 00:43:46,140
call like of this you don't need an

941
00:43:43,650 --> 00:43:47,730
offer answer like like just just ask the

942
00:43:46,140 --> 00:43:51,629
web community how much they love offer

943
00:43:47,730 --> 00:43:53,280
answer and it says yes or no that's how

944
00:43:51,630 --> 00:43:54,390
things work on the web it's very simple

945
00:43:53,280 --> 00:43:55,530
information one you could set up it's

946
00:43:54,390 --> 00:43:56,180
just use this codec this phone number

947
00:43:55,530 --> 00:43:58,430
perhaps

948
00:43:56,180 --> 00:44:00,140
ah then we get some basic events back

949
00:43:58,430 --> 00:44:01,730
there are very few handful events that

950
00:44:00,140 --> 00:44:03,288
are any interest to what's happening

951
00:44:01,730 --> 00:44:05,390
with a call you know it's it's

952
00:44:03,289 --> 00:44:08,150
proceeding it's ringing its ended it

953
00:44:05,390 --> 00:44:10,098
failed this it's pretty simple the media

954
00:44:08,150 --> 00:44:11,660
stuff is a little bit more and then we

955
00:44:10,099 --> 00:44:13,069
need the media back and forth and I

956
00:44:11,660 --> 00:44:14,808
think a lot of the sort of things I saw

957
00:44:13,069 --> 00:44:16,069
in mobs today early on and here today

958
00:44:14,809 --> 00:44:18,079
there are different ways to do media

959
00:44:16,069 --> 00:44:19,849
we've been doing it with the most

960
00:44:18,079 --> 00:44:22,520
brain-dead technique that's been proven

961
00:44:19,849 --> 00:44:24,440
to work for a long time is multiple long

962
00:44:22,520 --> 00:44:29,240
poles over h3 and I'll talk a little bit

963
00:44:24,440 --> 00:44:30,799
about that later next slide the

964
00:44:29,240 --> 00:44:33,558
capabilities of what we think that you

965
00:44:30,799 --> 00:44:35,480
should be able to describe is really the

966
00:44:33,559 --> 00:44:37,809
code actually support maximum bit rates

967
00:44:35,480 --> 00:44:40,910
size of samples whether you need to

968
00:44:37,809 --> 00:44:42,710
force to use constant bitrate or not a

969
00:44:40,910 --> 00:44:44,390
few other little things but I'd say that

970
00:44:42,710 --> 00:44:46,730
very minimal set when we went through

971
00:44:44,390 --> 00:44:48,740
everything that was an SDP and said what

972
00:44:46,730 --> 00:44:50,599
parts of it do you actually need for

973
00:44:48,740 --> 00:44:52,459
this type of system this is pretty much

974
00:44:50,599 --> 00:44:53,839
it we throw it in a JSON document like a

975
00:44:52,460 --> 00:44:58,130
JSON record and call it a day

976
00:44:53,839 --> 00:45:00,200
next advertisements what we do numbered

977
00:44:58,130 --> 00:45:01,789
call call our idea of the caller which

978
00:45:00,200 --> 00:45:04,029
always brings collect big questions next

979
00:45:01,789 --> 00:45:04,029
slide

980
00:45:04,270 --> 00:45:09,319
lag here we're gonna use passport sounds

981
00:45:07,789 --> 00:45:11,119
really complicated it's a JSON object

982
00:45:09,319 --> 00:45:12,680
with like three things in it you know

983
00:45:11,119 --> 00:45:18,440
who you called who you're calling the

984
00:45:12,680 --> 00:45:20,089
time signed next slide the protocol

985
00:45:18,440 --> 00:45:22,160
mappings of this of how we map it into

986
00:45:20,089 --> 00:45:23,960
h3 there's just you know there's some

987
00:45:22,160 --> 00:45:25,700
various API calls that we hit we hit a

988
00:45:23,960 --> 00:45:27,260
few to get the things I've talked about

989
00:45:25,700 --> 00:45:29,390
like getting the capacity creating a new

990
00:45:27,260 --> 00:45:32,569
call once you have a call you can

991
00:45:29,390 --> 00:45:36,170
basically pull for the events and you

992
00:45:32,569 --> 00:45:38,029
basically set up a bunch of concurrent

993
00:45:36,170 --> 00:45:41,630
transactions for the forward and

994
00:45:38,029 --> 00:45:43,760
backwards media next slide the basic

995
00:45:41,630 --> 00:45:45,829
media approach that I talk to is you at

996
00:45:43,760 --> 00:45:47,869
the beginning you know do a bunch of

997
00:45:45,829 --> 00:45:49,490
posts to set up these concurrent

998
00:45:47,869 --> 00:45:51,230
transactions for the media and when the

999
00:45:49,490 --> 00:45:53,328
other side wants to send you some media

1000
00:45:51,230 --> 00:45:55,609
when it has the first RTP packet along

1001
00:45:53,329 --> 00:45:57,470
it sends that to you over the connection

1002
00:45:55,609 --> 00:46:01,279
and we mark that connection as in use

1003
00:45:57,470 --> 00:46:03,470
without my way we call them and until

1004
00:46:01,279 --> 00:46:06,500
that is act it's in use and when the

1005
00:46:03,470 --> 00:46:08,629
next RTP packet arrives you would send

1006
00:46:06,500 --> 00:46:09,980
it over a different byway until it was

1007
00:46:08,630 --> 00:46:11,720
actually a third one arrived

1008
00:46:09,980 --> 00:46:13,430
the previous ones actor reuse it so it's

1009
00:46:11,720 --> 00:46:15,950
a very simple transaction it has a knack

1010
00:46:13,430 --> 00:46:17,270
of every packet there's many ways we

1011
00:46:15,950 --> 00:46:18,618
could probably do better than this and

1012
00:46:17,270 --> 00:46:26,750
we can talk about how we want to hit

1013
00:46:18,619 --> 00:46:29,660
those yeah sure we're not questions just

1014
00:46:26,750 --> 00:46:32,270
my my comment is I think it would be

1015
00:46:29,660 --> 00:46:37,040
interesting to explore how this might be

1016
00:46:32,270 --> 00:46:39,800
done within the web transport trial

1017
00:46:37,040 --> 00:46:42,230
which actually is real code to see if it

1018
00:46:39,800 --> 00:46:44,480
can be done better or if the changes are

1019
00:46:42,230 --> 00:46:46,160
needed to make it more efficient but

1020
00:46:44,480 --> 00:46:50,119
this is exactly the kind of flow that

1021
00:46:46,160 --> 00:46:52,190
was was thought about there yeah so

1022
00:46:50,119 --> 00:46:53,869
that's that I totally agree Ben and

1023
00:46:52,190 --> 00:46:57,590
having watched previous presentation I'd

1024
00:46:53,869 --> 00:46:59,510
love to try that I know Justin also has

1025
00:46:57,590 --> 00:47:01,460
some ideas a lot of experience in data

1026
00:46:59,510 --> 00:47:04,190
on various ways we could do this so I

1027
00:47:01,460 --> 00:47:06,680
think that this is whether you could

1028
00:47:04,190 --> 00:47:09,200
actually play with it and actually try

1029
00:47:06,680 --> 00:47:15,379
it out and get feedback on it anyway

1030
00:47:09,200 --> 00:47:15,589
cool we'll do it explain yeah no I'm

1031
00:47:15,380 --> 00:47:19,310
fine

1032
00:47:15,590 --> 00:47:22,310
that's our events one more slide after

1033
00:47:19,310 --> 00:47:24,259
this that we've go with the security is

1034
00:47:22,310 --> 00:47:26,359
a really easy model with this too it's

1035
00:47:24,260 --> 00:47:27,770
all exactly how we do web security

1036
00:47:26,359 --> 00:47:29,630
there's no special encryption for the

1037
00:47:27,770 --> 00:47:32,509
media no special anything it's just TLS

1038
00:47:29,630 --> 00:47:35,480
but one way we off with a token the

1039
00:47:32,510 --> 00:47:37,790
clinton the other way and it is not an

1040
00:47:35,480 --> 00:47:40,010
indian security model this is this is a

1041
00:47:37,790 --> 00:47:41,540
from the cloud provider over to the PSTN

1042
00:47:40,010 --> 00:47:44,810
provider okay it's not trying to

1043
00:47:41,540 --> 00:47:46,190
accomplish that i think that's pretty

1044
00:47:44,810 --> 00:47:48,529
much one more slide let me just okay

1045
00:47:46,190 --> 00:47:50,480
we're done so questions about this and

1046
00:47:48,530 --> 00:47:51,680
then i'm gonna add like make my ass for

1047
00:47:50,480 --> 00:47:52,910
what i want people to do so to any

1048
00:47:51,680 --> 00:47:56,379
questions about the sort of general

1049
00:47:52,910 --> 00:48:00,020
space we're proposing and thinking about

1050
00:47:56,380 --> 00:48:01,550
Ronnie I'm a bit confused because I

1051
00:48:00,020 --> 00:48:03,680
don't understand what the relation

1052
00:48:01,550 --> 00:48:06,109
between PSTN and all these codecs that

1053
00:48:03,680 --> 00:48:09,500
you want to negotiate because piston is

1054
00:48:06,109 --> 00:48:13,940
g.711 so what are we doing here I don't

1055
00:48:09,500 --> 00:48:17,450
understand the case the this is for a

1056
00:48:13,940 --> 00:48:21,200
cloud service like WebEx to be able to

1057
00:48:17,450 --> 00:48:23,299
have a very web friendly way that runs

1058
00:48:21,200 --> 00:48:23,730
in modern cloud centers to set up what

1059
00:48:23,300 --> 00:48:26,070
we use

1060
00:48:23,730 --> 00:48:27,690
do with a sip trunk over to a service

1061
00:48:26,070 --> 00:48:30,420
provider that was providing us PSC and

1062
00:48:27,690 --> 00:48:32,190
termination like comcast muslin adi when

1063
00:48:30,420 --> 00:48:35,369
you say PSTN you also clean mobile

1064
00:48:32,190 --> 00:48:43,859
network to you right just oh yeah sorry

1065
00:48:35,369 --> 00:48:45,420
I meant just my mistake in using the

1066
00:48:43,859 --> 00:48:49,140
word PSTN I understand your question now

1067
00:48:45,420 --> 00:48:51,330
Ronnie I mean I mean the existing haha I

1068
00:48:49,140 --> 00:48:54,270
don't know whatever that thing is that

1069
00:48:51,330 --> 00:48:56,549
useful what we call Eric Kreeger

1070
00:48:54,270 --> 00:49:01,320
are you calling weak all interconnected

1071
00:48:56,550 --> 00:49:02,700
point okay you know like I don't know

1072
00:49:01,320 --> 00:49:04,350
how people make these these sip gateways

1073
00:49:02,700 --> 00:49:06,480
and they connect to something whatever

1074
00:49:04,350 --> 00:49:11,490
is on the other side of that is DNS is

1075
00:49:06,480 --> 00:49:12,750
seven you know that yeah and sixty

1076
00:49:11,490 --> 00:49:15,540
percent of the time it's connected

1077
00:49:12,750 --> 00:49:17,880
through a not sip interface to get to

1078
00:49:15,540 --> 00:49:19,500
sip on the other side so either way I

1079
00:49:17,880 --> 00:49:21,030
don't care what I want to do is not

1080
00:49:19,500 --> 00:49:22,830
think about the SIP I want to think

1081
00:49:21,030 --> 00:49:24,570
about the web stuff and not have to deal

1082
00:49:22,830 --> 00:49:25,740
with all that crap I don't want to worry

1083
00:49:24,570 --> 00:49:29,820
about whether it's called void

1084
00:49:25,740 --> 00:49:33,229
interconnected voice mobile or PSTN okay

1085
00:49:29,820 --> 00:49:36,600
so we um we're working this on github

1086
00:49:33,230 --> 00:49:38,310
super welcome comments on github PRS any

1087
00:49:36,600 --> 00:49:41,670
of those things love to work with people

1088
00:49:38,310 --> 00:49:44,940
on that please like let us know if

1089
00:49:41,670 --> 00:49:46,920
you're willing to participate if people

1090
00:49:44,940 --> 00:49:48,720
are super interested in this I'm have

1091
00:49:46,920 --> 00:49:50,190
blocked off a room at 8:30 tomorrow

1092
00:49:48,720 --> 00:49:51,569
morning where people where I'm glad to

1093
00:49:50,190 --> 00:49:53,460
talk about it more but really I think

1094
00:49:51,570 --> 00:49:55,020
the best thing to do is just go get on

1095
00:49:53,460 --> 00:49:56,790
github and start hacking this forward

1096
00:49:55,020 --> 00:50:00,509
and let us know what people need so

1097
00:49:56,790 --> 00:50:02,730
questions comments on that Benedict I'm

1098
00:50:00,510 --> 00:50:05,010
obligated to note and I don't expect a

1099
00:50:02,730 --> 00:50:06,510
response but cough is a authorization

1100
00:50:05,010 --> 00:50:09,930
protocol and you have it as a

1101
00:50:06,510 --> 00:50:18,230
authentication protocol it's like that's

1102
00:50:09,930 --> 00:50:18,230
really embarrassing thank you

1103
00:50:18,750 --> 00:50:22,260
what are those I never want to know what

1104
00:50:20,940 --> 00:50:25,280
those are again and yesterday early

1105
00:50:22,260 --> 00:50:25,280
media know 2:40

1106
00:50:35,920 --> 00:50:39,070
[Music]

1107
00:51:13,109 --> 00:51:17,460
hello my name is Devin O'Brien and I'm

1108
00:51:15,630 --> 00:51:22,250
with Google Chrome and I'm here to talk

1109
00:51:17,460 --> 00:51:22,250
about a certificate transparency and BCP

1110
00:51:24,230 --> 00:51:32,609
198 okay

1111
00:51:27,420 --> 00:51:36,930
so upfront just a brief background on

1112
00:51:32,609 --> 00:51:38,549
what RFC 696 tube is is is it is the

1113
00:51:36,930 --> 00:51:40,529
second version of the certificate

1114
00:51:38,549 --> 00:51:45,089
transparency protocol that iterates on

1115
00:51:40,529 --> 00:51:48,329
696 - which has been deployed for some

1116
00:51:45,089 --> 00:51:51,599
time now but in the final stage of

1117
00:51:48,329 --> 00:51:53,670
definition of 696 you piss we have

1118
00:51:51,599 --> 00:51:56,400
received a discuss item saying that it

1119
00:51:53,670 --> 00:51:59,279
violates be CP 190 and so TL DR or

1120
00:51:56,400 --> 00:52:03,150
asking for an exception to complying

1121
00:51:59,279 --> 00:52:05,190
with section 2.3 of e CP 194 696 OOP

1122
00:52:03,150 --> 00:52:08,880
this and so we'll get into that here in

1123
00:52:05,190 --> 00:52:10,559
just a sec some quick background the

1124
00:52:08,880 --> 00:52:13,710
purpose of certificate transparency is

1125
00:52:10,559 --> 00:52:16,140
to publicly log all issues TLS

1126
00:52:13,710 --> 00:52:18,089
certificates at the point of issuance

1127
00:52:16,140 --> 00:52:19,558
for the most part such that anyone can

1128
00:52:18,089 --> 00:52:23,460
audit them and we can detect miss

1129
00:52:19,559 --> 00:52:26,130
issuance the 696 - is the original one

1130
00:52:23,460 --> 00:52:30,089
and this is draft 32 is the current

1131
00:52:26,130 --> 00:52:32,609
version of V 2 and certificate

1132
00:52:30,089 --> 00:52:35,130
transparency enforcing user agents like

1133
00:52:32,609 --> 00:52:37,288
a browser for example require proof that

1134
00:52:35,130 --> 00:52:39,000
a TLS certificate has been logged in one

1135
00:52:37,289 --> 00:52:40,180
of these or several of these logs in

1136
00:52:39,000 --> 00:52:43,510
order to sex success

1137
00:52:40,180 --> 00:52:46,210
validate the certificate and the

1138
00:52:43,510 --> 00:52:48,190
behavior of logs is heavily dictated by

1139
00:52:46,210 --> 00:52:52,859
existing user agent policies such as

1140
00:52:48,190 --> 00:52:52,859
chromium CD policy or apple CT policy

1141
00:52:53,160 --> 00:52:57,040
and and this is sort of the the gist of

1142
00:52:55,780 --> 00:53:00,460
really what I want to get into here is

1143
00:52:57,040 --> 00:53:01,990
that CT is an adversarial verifiable

1144
00:53:00,460 --> 00:53:03,520
protocol that is specifically designed

1145
00:53:01,990 --> 00:53:06,189
to limit their reliance and trusted

1146
00:53:03,520 --> 00:53:08,980
third parties and so the the main use

1147
00:53:06,190 --> 00:53:12,339
case here is reducing reliance and CAS

1148
00:53:08,980 --> 00:53:14,650
but one of the inherent designs of this

1149
00:53:12,339 --> 00:53:16,119
was also to not sort of kicked the

1150
00:53:14,650 --> 00:53:20,230
trusted third party can down the road

1151
00:53:16,119 --> 00:53:22,839
and then trust CT logs and so we achieve

1152
00:53:20,230 --> 00:53:24,400
verifiability through a set of by

1153
00:53:22,839 --> 00:53:28,210
limiting CT logs to a limited set of

1154
00:53:24,400 --> 00:53:30,790
behaviors and it's a non goal of ours to

1155
00:53:28,210 --> 00:53:32,380
add flexibility to these log operators

1156
00:53:30,790 --> 00:53:33,849
in such a way that could be gamified to

1157
00:53:32,380 --> 00:53:39,910
sort of counteract some of the overall

1158
00:53:33,849 --> 00:53:41,619
goals of certificate transparency and so

1159
00:53:39,910 --> 00:53:42,848
getting kind of right into this I want

1160
00:53:41,619 --> 00:53:44,680
to talk about the approach that we're

1161
00:53:42,849 --> 00:53:46,299
recommending here and then following

1162
00:53:44,680 --> 00:53:47,649
this I have an analysis of alternatives

1163
00:53:46,299 --> 00:53:51,720
so that we can really get have that

1164
00:53:47,650 --> 00:53:54,790
conversation draft 31 of 6960 of this

1165
00:53:51,720 --> 00:53:57,430
before we try to accommodate BCD 190

1166
00:53:54,790 --> 00:53:59,558
with the well-known language it

1167
00:53:57,430 --> 00:54:02,140
basically specifies this that the log

1168
00:53:59,559 --> 00:54:04,380
server prefix which is one of of a set

1169
00:54:02,140 --> 00:54:06,400
of log parameters that includes log key

1170
00:54:04,380 --> 00:54:10,900
maximum merge delay a couple of the

1171
00:54:06,400 --> 00:54:12,339
parameters for a CT log is specified and

1172
00:54:10,900 --> 00:54:14,799
it may include a path as well as a

1173
00:54:12,339 --> 00:54:16,150
server name and a port these two entries

1174
00:54:14,799 --> 00:54:18,190
here are just examples of two of the

1175
00:54:16,150 --> 00:54:20,859
api's that are defined and it's log

1176
00:54:18,190 --> 00:54:24,730
server slash CTE slash be to submit

1177
00:54:20,859 --> 00:54:26,920
entry and so to this to just sort of

1178
00:54:24,730 --> 00:54:28,780
hone in the point that log server has

1179
00:54:26,920 --> 00:54:31,030
some flexibility into it these are three

1180
00:54:28,780 --> 00:54:32,770
world real world examples of existing

1181
00:54:31,030 --> 00:54:35,829
logs we have a digit cert log which

1182
00:54:32,770 --> 00:54:38,770
shows column slash log we have a Google

1183
00:54:35,829 --> 00:54:40,359
log that is log slash Aragon 2019 where

1184
00:54:38,770 --> 00:54:43,210
that's the name of the log itself and

1185
00:54:40,359 --> 00:54:45,190
then verify there one just comes

1186
00:54:43,210 --> 00:54:51,400
straight off of the base

1187
00:54:45,190 --> 00:54:54,490
as well so to adjust there was some

1188
00:54:51,400 --> 00:54:57,309
discussion on thread about alternatives

1189
00:54:54,490 --> 00:54:59,890
to the existing approach and one of them

1190
00:54:57,309 --> 00:55:05,020
was not well known but if you pull from

1191
00:54:59,890 --> 00:55:07,299
the RFC 57 50 85 it says in Section 1.1

1192
00:55:05,020 --> 00:55:09,250
that well moans are not intended for the

1193
00:55:07,299 --> 00:55:11,410
general general information retrieval or

1194
00:55:09,250 --> 00:55:15,130
establishment of large URI namespaces on

1195
00:55:11,410 --> 00:55:16,808
the web and additionally that was

1196
00:55:15,130 --> 00:55:18,880
discussing on the thread was that the

1197
00:55:16,809 --> 00:55:21,549
well-known space is often restricted by

1198
00:55:18,880 --> 00:55:23,410
service providers which would limit

1199
00:55:21,549 --> 00:55:27,490
certain deployment scenarios for log

1200
00:55:23,410 --> 00:55:28,930
operators unless they got exceptions so

1201
00:55:27,490 --> 00:55:31,720
if I may just quickly and I'm speaking

1202
00:55:28,930 --> 00:55:34,538
only as an individual up here RFC 57 85

1203
00:55:31,720 --> 00:55:36,730
has been obsoleted by a document that

1204
00:55:34,539 --> 00:55:37,539
was specifically designed to remove this

1205
00:55:36,730 --> 00:55:41,109
oh okay

1206
00:55:37,539 --> 00:55:48,609
sorry I put it I actually I sent you an

1207
00:55:41,109 --> 00:55:49,598
email on this apparently you didn't one

1208
00:55:48,609 --> 00:55:52,538
of the other ones that was heavily

1209
00:55:49,599 --> 00:55:53,710
debated was the use of directories but

1210
00:55:52,539 --> 00:55:57,849
as I mentioned in one of the previous

1211
00:55:53,710 --> 00:56:00,039
slides weird he were keen on reducing

1212
00:55:57,849 --> 00:56:03,099
the ability for log operators to hide

1213
00:56:00,039 --> 00:56:08,440
miss behaviors through shenanigans and

1214
00:56:03,099 --> 00:56:10,270
so we don't want to give log upper to

1215
00:56:08,440 --> 00:56:12,819
the ability to sort of hide this

1216
00:56:10,270 --> 00:56:14,440
issuance if you will through behaviors

1217
00:56:12,819 --> 00:56:16,569
like constantly changing the directories

1218
00:56:14,440 --> 00:56:18,160
and so one of the goals is to to fix the

1219
00:56:16,569 --> 00:56:21,160
log operator behaviors in such a way

1220
00:56:18,160 --> 00:56:25,240
that the behavior is well defined and is

1221
00:56:21,160 --> 00:56:28,210
verifiable and I did in addition to this

1222
00:56:25,240 --> 00:56:30,430
there is already a set of log parameters

1223
00:56:28,210 --> 00:56:33,099
that are sent down which is as I

1224
00:56:30,430 --> 00:56:35,109
mentioned hash algorithm key ID key ID

1225
00:56:33,099 --> 00:56:39,220
maximum merge delay and currently the

1226
00:56:35,109 --> 00:56:40,720
log server parameter and a switch to

1227
00:56:39,220 --> 00:56:43,709
directory would basically bifurcate

1228
00:56:40,720 --> 00:56:50,879
these and add additional complexity here

1229
00:56:43,710 --> 00:56:54,309
and it's on the move to directory would

1230
00:56:50,880 --> 00:56:55,660
have a introducing beauty around how

1231
00:56:54,309 --> 00:56:58,120
often it should be refreshed what is

1232
00:56:55,660 --> 00:57:02,370
stale what is fresh

1233
00:56:58,120 --> 00:57:04,710
and lastly we considered URL templates

1234
00:57:02,370 --> 00:57:07,089
but currently this would require a

1235
00:57:04,710 --> 00:57:09,130
significant increase in client-side

1236
00:57:07,090 --> 00:57:11,820
implementation logic that is otherwise

1237
00:57:09,130 --> 00:57:15,880
completely on required by the protocol

1238
00:57:11,820 --> 00:57:17,890
we have deployed 696 to the original

1239
00:57:15,880 --> 00:57:19,780
version of CT by certificate authorities

1240
00:57:17,890 --> 00:57:22,210
law of operators and multiple user

1241
00:57:19,780 --> 00:57:24,100
agents and none of the members of the

1242
00:57:22,210 --> 00:57:28,920
ecosystem have expressed concerns with

1243
00:57:24,100 --> 00:57:30,580
this specification the increased

1244
00:57:28,920 --> 00:57:32,650
implementation logic would also

1245
00:57:30,580 --> 00:57:34,020
discourage diverse implementation of Ct

1246
00:57:32,650 --> 00:57:36,520
auditors which are not always

1247
00:57:34,020 --> 00:57:39,130
implemented by very large well-funded

1248
00:57:36,520 --> 00:57:41,710
tech companies like user agents and that

1249
00:57:39,130 --> 00:57:44,500
would we would like to encourage that

1250
00:57:41,710 --> 00:57:47,110
broad implementation and sort of lastly

1251
00:57:44,500 --> 00:57:49,060
on this point in a real world scenario

1252
00:57:47,110 --> 00:57:51,460
using URL templates it would likely

1253
00:57:49,060 --> 00:57:52,720
ossify the entire ecosystem with ossify

1254
00:57:51,460 --> 00:57:55,390
on the exact same structure we currently

1255
00:57:52,720 --> 00:57:56,859
have and we pointed to a an example of

1256
00:57:55,390 --> 00:58:01,420
where this actually happened with weirds

1257
00:57:56,860 --> 00:58:03,910
with some discussion on that point and

1258
00:58:01,420 --> 00:58:05,770
this is just some backup and this was

1259
00:58:03,910 --> 00:58:07,810
scraped together by some people in the

1260
00:58:05,770 --> 00:58:10,030
trans working group about various

1261
00:58:07,810 --> 00:58:13,630
protocols either in ITF or not that

1262
00:58:10,030 --> 00:58:15,430
don't follow this section of BCP 190 so

1263
00:58:13,630 --> 00:58:33,550
I'd like to open for discussion on this

1264
00:58:15,430 --> 00:58:35,080
point so my perspective on this I both a

1265
00:58:33,550 --> 00:58:37,300
domain that's kind of the primary

1266
00:58:35,080 --> 00:58:39,730
concern of PCP 190 is don't put

1267
00:58:37,300 --> 00:58:42,670
restrictions on domain owners I operate

1268
00:58:39,730 --> 00:58:46,240
a CT log I'm also a consumer of CT logs

1269
00:58:42,670 --> 00:58:48,310
so I use this as a client and I've also

1270
00:58:46,240 --> 00:58:53,290
just worked a lot with HTTP API is in

1271
00:58:48,310 --> 00:58:57,250
the past and so from my perspective the

1272
00:58:53,290 --> 00:59:00,100
CT API is defined in 69-62 is PI it's

1273
00:58:57,250 --> 00:59:01,480
been zero burden and I think it makes a

1274
00:59:00,100 --> 00:59:06,790
lot of sense to keep the same approach

1275
00:59:01,480 --> 00:59:07,330
for v2 and generally speaking I think

1276
00:59:06,790 --> 00:59:09,910
you know

1277
00:59:07,330 --> 00:59:12,790
I spent some time looking at the history

1278
00:59:09,910 --> 00:59:14,220
of the discussion on BCP 190 which some

1279
00:59:12,790 --> 00:59:18,220
of you probably remember started as

1280
00:59:14,220 --> 00:59:19,270
draft nodding him get off my lawn and I

1281
00:59:18,220 --> 00:59:22,180
looked at some of the motivating

1282
00:59:19,270 --> 00:59:24,970
examples early on and there's three main

1283
00:59:22,180 --> 00:59:28,330
things it prohibits you know don't add

1284
00:59:24,970 --> 00:59:30,430
query parameters to try URLs and the

1285
00:59:28,330 --> 00:59:35,020
motivating example for this at the time

1286
00:59:30,430 --> 00:59:37,359
was the URI signing draft where you

1287
00:59:35,020 --> 00:59:38,650
would take a URL that existed and append

1288
00:59:37,360 --> 00:59:41,260
some query parameters with like a

1289
00:59:38,650 --> 00:59:42,550
signature and so on and that you know

1290
00:59:41,260 --> 00:59:45,550
does this transformation that is

1291
00:59:42,550 --> 00:59:47,880
invasive on existing URL so you know

1292
00:59:45,550 --> 00:59:50,050
fine I think that's totally reasonable

1293
00:59:47,880 --> 00:59:53,800
there's also things you have collisions

1294
00:59:50,050 --> 00:59:55,780
with paths so PCP 190 says don't specify

1295
00:59:53,800 --> 00:59:56,890
an absolute path on a server somebody

1296
00:59:55,780 --> 00:59:59,260
might be running something else there

1297
00:59:56,890 --> 01:00:01,660
and then the third thing which is

1298
00:59:59,260 --> 01:00:05,440
section 2.3 which is what we're talking

1299
01:00:01,660 --> 01:00:07,899
about here there's even if the server

1300
01:00:05,440 --> 01:00:10,180
operator specifies a prefix out-of-band

1301
01:00:07,900 --> 01:00:13,570
like in these examples slash log or

1302
01:00:10,180 --> 01:00:16,410
slash logs are gone 2019 even then you

1303
01:00:13,570 --> 01:00:19,120
as a protocol designer you can't say

1304
01:00:16,410 --> 01:00:21,430
within that space it'll be flashed et

1305
01:00:19,120 --> 01:00:22,890
/bg such submit entry you have to

1306
01:00:21,430 --> 01:00:27,009
indirect that through some other

1307
01:00:22,890 --> 01:00:29,230
mechanism and the other perspective I

1308
01:00:27,010 --> 01:00:31,630
have on this is as a co-author on acne

1309
01:00:29,230 --> 01:00:34,720
which ran into a similar objection early

1310
01:00:31,630 --> 01:00:36,070
on and we decided we actually went

1311
01:00:34,720 --> 01:00:38,379
through also a couple of rounds of

1312
01:00:36,070 --> 01:00:40,960
iteration on okay how do we work around

1313
01:00:38,380 --> 01:00:43,240
this thing on the first iteration was

1314
01:00:40,960 --> 01:00:45,970
bad we use link headers that didn't

1315
01:00:43,240 --> 01:00:47,979
actually adequately model our space we

1316
01:00:45,970 --> 01:00:50,910
needed to change kind of mid protocol

1317
01:00:47,980 --> 01:00:56,740
and we adopted the directory structure

1318
01:00:50,910 --> 01:00:59,620
actually during this process for 69-62

1319
01:00:56,740 --> 01:01:03,370
Biss I suggested let's just try

1320
01:00:59,620 --> 01:01:04,569
directories again and when Rob tried to

1321
01:01:03,370 --> 01:01:06,549
add that to the draft he realized

1322
01:01:04,570 --> 01:01:08,800
there's actually some bugs in this and

1323
01:01:06,550 --> 01:01:10,510
he filed an errata against Acme that

1324
01:01:08,800 --> 01:01:12,970
unfortunately due to deployed behavior

1325
01:01:10,510 --> 01:01:14,320
we can now fix so you know basically

1326
01:01:12,970 --> 01:01:16,299
what I've seen is adding these

1327
01:01:14,320 --> 01:01:18,219
unnecessary in directions

1328
01:01:16,299 --> 01:01:19,839
produces bugs and has like a lot of

1329
01:01:18,219 --> 01:01:21,489
potential to produce bugs and at the

1330
01:01:19,839 --> 01:01:24,639
same time the normal and accepted

1331
01:01:21,489 --> 01:01:27,729
practice for specifying API is that use

1332
01:01:24,639 --> 01:01:29,469
HTTP is you have a prefix and under the

1333
01:01:27,729 --> 01:01:32,229
prefix you have a number of paths that

1334
01:01:29,469 --> 01:01:33,579
do certain things document ellipse we

1335
01:01:32,229 --> 01:01:35,129
would we're we're out of time and we

1336
01:01:33,579 --> 01:01:37,359
have other people in line can you wrap

1337
01:01:35,129 --> 01:01:42,609
that's it that's all I want to say thank

1338
01:01:37,359 --> 01:01:44,409
you thank you we've lined up frozen if

1339
01:01:42,609 --> 01:01:45,639
there's people around it and we're

1340
01:01:44,409 --> 01:01:48,579
technically out of time for it with who

1341
01:01:45,639 --> 01:01:51,339
everyone be fast victor Oh silly if I

1342
01:01:48,579 --> 01:01:53,859
will be very fast nobody should ever be

1343
01:01:51,339 --> 01:01:56,409
forced to follow DCP 190 a section to

1344
01:01:53,859 --> 01:02:01,379
point free if it doesn't make sense in

1345
01:01:56,409 --> 01:02:04,419
context I personally believe that like

1346
01:02:01,379 --> 01:02:06,459
it has been shown two slides with good

1347
01:02:04,419 --> 01:02:08,408
all of the protocols which people use in

1348
01:02:06,459 --> 01:02:09,939
real world extremely successfully like

1349
01:02:08,409 --> 01:02:12,819
say gates protocol which did not follow

1350
01:02:09,939 --> 01:02:15,308
it and two just fine so I do not believe

1351
01:02:12,819 --> 01:02:30,308
we should add extra complexity just to

1352
01:02:15,309 --> 01:02:33,309
satisfy those requirements the

1353
01:02:30,309 --> 01:02:34,869
transparency law auditor and I wanted to

1354
01:02:33,309 --> 01:02:37,749
underscore that certificate transparency

1355
01:02:34,869 --> 01:02:40,059
isn't a normal protocol it's a

1356
01:02:37,749 --> 01:02:41,799
verifiable protocol and that means that

1357
01:02:40,059 --> 01:02:43,779
the protocol needs to facilitate

1358
01:02:41,799 --> 01:02:45,579
auditing and and the discovery of this

1359
01:02:43,779 --> 01:02:47,319
behavior and one of the things we've

1360
01:02:45,579 --> 01:02:49,239
learned since the deployment of version

1361
01:02:47,319 --> 01:02:51,159
1 of certificate transparency is that

1362
01:02:49,239 --> 01:02:53,049
it's really hard to anticipate all the

1363
01:02:51,159 --> 01:02:55,089
ways that a blog could misbehave and

1364
01:02:53,049 --> 01:02:58,209
this makes it really hard to ride an

1365
01:02:55,089 --> 01:03:01,119
auditor of that secure and I think this

1366
01:02:58,209 --> 01:03:02,558
and the antidote to this which i think

1367
01:03:01,119 --> 01:03:05,799
is also a problem that will apply to

1368
01:03:02,559 --> 01:03:07,499
other verifiable protocols is to make

1369
01:03:05,799 --> 01:03:10,739
the protocol as rigid as possible

1370
01:03:07,499 --> 01:03:13,928
because that reduces the number of ways

1371
01:03:10,739 --> 01:03:15,429
analog could have misbehave and so while

1372
01:03:13,929 --> 01:03:17,409
it may be appropriate for a non

1373
01:03:15,429 --> 01:03:19,509
verifiable protocol and to have to

1374
01:03:17,409 --> 01:03:21,459
follow be CP 190

1375
01:03:19,509 --> 01:03:23,229
I think that in the case of verifiable

1376
01:03:21,459 --> 01:03:25,149
protocols it's important for the

1377
01:03:23,229 --> 01:03:27,069
security of those protocols to have to

1378
01:03:25,149 --> 01:03:29,999
give the protocol designers flexibility

1379
01:03:27,069 --> 01:03:32,999
in in locking down the protocol

1380
01:03:29,999 --> 01:03:38,428
to make it more verifiable and that's

1381
01:03:32,999 --> 01:03:40,738
all I have to say thanks the Callanetics

1382
01:03:38,429 --> 01:03:44,219
I mean it's clear that the best current

1383
01:03:40,739 --> 01:03:46,289
practice of every single deployed API

1384
01:03:44,219 --> 01:03:48,329
service in the real world today is to

1385
01:03:46,289 --> 01:03:51,419
use prefixes exactly like you use them

1386
01:03:48,329 --> 01:04:01,469
here this 190 is just out of whack and

1387
01:03:51,419 --> 01:04:11,699
we should deprecated BCD 190 we're out

1388
01:04:01,469 --> 01:04:14,849
of time take it to the list sorry no if

1389
01:04:11,699 --> 01:04:18,539
I give me more country we do want to

1390
01:04:14,849 --> 01:04:19,079
have a side meeting on this so if this

1391
01:04:18,539 --> 01:04:21,449
week

1392
01:04:19,079 --> 01:04:23,519
there's not one scheduled yet because it

1393
01:04:21,449 --> 01:04:24,929
wasn't clear that the people who cared

1394
01:04:23,519 --> 01:04:27,149
about this were necessarily paying

1395
01:04:24,929 --> 01:04:30,059
attention and so we want to make certain

1396
01:04:27,149 --> 01:04:31,649
that after this discussion we got a

1397
01:04:30,059 --> 01:04:32,939
meeting together where the interested

1398
01:04:31,649 --> 01:04:35,638
parties were able to get together in a

1399
01:04:32,939 --> 01:04:37,019
room and talk about this so what I'd

1400
01:04:35,639 --> 01:04:39,029
like to see is the people who have an

1401
01:04:37,019 --> 01:04:41,249
interest in this topic coordinate

1402
01:04:39,029 --> 01:04:43,679
amongst themselves on the art mailing

1403
01:04:41,249 --> 01:04:44,848
list to find a time where they can get

1404
01:04:43,679 --> 01:04:50,219
together in one of the side meeting

1405
01:04:44,849 --> 01:04:51,179
rooms this week it's I would like to see

1406
01:04:50,219 --> 01:04:52,859
this as the beginning of the

1407
01:04:51,179 --> 01:04:56,039
conversation we clearly did not reach

1408
01:04:52,859 --> 01:05:11,399
any conclusions we ran out of time thank

1409
01:04:56,039 --> 01:05:14,779
you anyone have the other blue sheet has

1410
01:05:11,399 --> 01:05:14,779
anyone not signed a blue sheet

