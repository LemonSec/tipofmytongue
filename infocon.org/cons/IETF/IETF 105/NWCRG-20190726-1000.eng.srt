1
00:00:13,840 --> 00:01:16,340
and we need someone to take notes their

2
00:00:21,560 --> 00:01:20,020
hands yeah there's a conflict with

3
00:01:16,340 --> 00:01:20,020
something else we were discussing

4
00:01:20,710 --> 00:01:23,809
[Music]

5
00:01:26,660 --> 00:01:29,819
[Music]

6
00:01:43,270 --> 00:01:46,348
[Music]

7
00:02:28,590 --> 00:02:35,330
look what you get that better no you're

8
00:02:31,140 --> 00:02:35,329
too young to choke

9
00:03:17,320 --> 00:03:22,698
[Music]

10
00:03:26,040 --> 00:03:48,130
egle person in fact that comes up okay I

11
00:03:46,660 --> 00:03:50,590
think we're going to start since some

12
00:03:48,130 --> 00:03:54,340
people need to leave and it's Friday so

13
00:03:50,590 --> 00:03:55,930
thank you for showing up again this is

14
00:03:54,340 --> 00:03:59,380
the coding for efficient network

15
00:03:55,930 --> 00:04:01,750
communication research group where we do

16
00:03:59,380 --> 00:04:10,900
all kinds of fun things to recover lost

17
00:04:01,750 --> 00:04:13,239
packets so again okay so a goal

18
00:04:10,900 --> 00:04:15,340
obviously is to foster research in

19
00:04:13,239 --> 00:04:19,358
network and application layer coding and

20
00:04:15,340 --> 00:04:22,210
to improve network performance and so

21
00:04:19,358 --> 00:04:25,780
what we are doing for those of you who

22
00:04:22,210 --> 00:04:28,510
historically were not with us we started

23
00:04:25,780 --> 00:04:30,599
very much by looking at codes and coding

24
00:04:28,510 --> 00:04:33,250
libraries because there was some

25
00:04:30,600 --> 00:04:37,360
development that was interesting but

26
00:04:33,250 --> 00:04:39,220
we've really really fast moved in to

27
00:04:37,360 --> 00:04:42,970
protocols to facilitate the use of

28
00:04:39,220 --> 00:04:45,250
coding and also more and more moving

29
00:04:42,970 --> 00:04:48,610
into real world applications and and

30
00:04:45,250 --> 00:04:50,710
work in progress and we know that

31
00:04:48,610 --> 00:04:52,780
there's currently work that may be done

32
00:04:50,710 --> 00:04:55,060
in the IETF related to this and

33
00:04:52,780 --> 00:04:58,919
obviously the expertise of this group is

34
00:04:55,060 --> 00:04:58,919
going to be very important

35
00:04:59,290 --> 00:05:05,310
so this is the usual note well I know

36
00:05:03,760 --> 00:05:10,210
that there's going to be another

37
00:05:05,310 --> 00:05:12,880
approach to coding later in the

38
00:05:10,210 --> 00:05:13,780
presentation and I hope the people

39
00:05:12,880 --> 00:05:16,870
Mihiel

40
00:05:13,780 --> 00:05:18,429
and company that you have really looked

41
00:05:16,870 --> 00:05:21,730
at note well because I know you work for

42
00:05:18,430 --> 00:05:23,410
a company so if there's any IP are

43
00:05:21,730 --> 00:05:29,260
related to your presentation please

44
00:05:23,410 --> 00:05:30,820
mention it we really have moved I think

45
00:05:29,260 --> 00:05:33,640
this group has done it much better than

46
00:05:30,820 --> 00:05:38,890
my other group we have moved very much

47
00:05:33,640 --> 00:05:41,320
into the github to maintain the list of

48
00:05:38,890 --> 00:05:43,960
papers and drafts and related material

49
00:05:41,320 --> 00:05:46,120
obviously the Charter is did that

50
00:05:43,960 --> 00:05:48,580
attract her like everybody else we have

51
00:05:46,120 --> 00:05:52,360
a mailing list that you probably all are

52
00:05:48,580 --> 00:05:55,570
all subscribe to our slides are going to

53
00:05:52,360 --> 00:05:57,880
be on the github and under data tracker

54
00:05:55,570 --> 00:06:01,659
and we're going to have net echo and

55
00:05:57,880 --> 00:06:03,370
actually when we did the you who got to

56
00:06:01,660 --> 00:06:06,040
put that when we did the hackathon that

57
00:06:03,370 --> 00:06:07,900
was also a slack channel which was

58
00:06:06,040 --> 00:06:09,490
interesting for the people who were part

59
00:06:07,900 --> 00:06:13,719
of the hackathon to be able to

60
00:06:09,490 --> 00:06:17,680
collaborate so this is the agenda we

61
00:06:13,720 --> 00:06:19,210
have in fact six presentation I think

62
00:06:17,680 --> 00:06:23,440
the hackathon feedback was going to be

63
00:06:19,210 --> 00:06:26,849
pretty fast then we have a update on

64
00:06:23,440 --> 00:06:31,150
that we're coding and satellite then

65
00:06:26,850 --> 00:06:35,200
updates on what we are doing for coding

66
00:06:31,150 --> 00:06:37,510
for quick and there's actually three

67
00:06:35,200 --> 00:06:39,190
presentations on that there's the

68
00:06:37,510 --> 00:06:41,260
approach that we're doing which we do

69
00:06:39,190 --> 00:06:43,090
here then quick and you're going to see

70
00:06:41,260 --> 00:06:45,789
that there's a presentation that does it

71
00:06:43,090 --> 00:06:48,310
as some kind of a quick tunnel or I see

72
00:06:45,790 --> 00:06:51,310
it coding tunnels were quick and then

73
00:06:48,310 --> 00:06:53,350
I'm going to do a small presentation on

74
00:06:51,310 --> 00:06:55,540
what's going on with the other groups

75
00:06:53,350 --> 00:07:00,190
that are related to this actually at the

76
00:06:55,540 --> 00:07:02,110
chairs dinner on Wednesday we all

77
00:07:00,190 --> 00:07:04,030
recognize that they should be more

78
00:07:02,110 --> 00:07:07,030
collaborations between the different

79
00:07:04,030 --> 00:07:10,450
groups because a lot of time what we're

80
00:07:07,030 --> 00:07:14,989
doing is closely related

81
00:07:10,450 --> 00:07:18,680
buzzie its she was about 180 intern

82
00:07:14,990 --> 00:07:22,100
dress loser in the group we will talk

83
00:07:18,680 --> 00:07:25,250
about a few of them today morning so I

84
00:07:22,100 --> 00:07:28,520
did not mention them in the lists but

85
00:07:25,250 --> 00:07:32,110
otherwise there was no update for the

86
00:07:28,520 --> 00:07:34,310
network korean forces yen and yen

87
00:07:32,110 --> 00:07:36,890
requirements and challenges engine draft

88
00:07:34,310 --> 00:07:38,510
so we discussed with the authors and

89
00:07:36,890 --> 00:07:42,469
they explained that didn't have time to

90
00:07:38,510 --> 00:07:46,430
do that for this side chef meeting so

91
00:07:42,470 --> 00:07:49,610
their position and agreed to to have it

92
00:07:46,430 --> 00:07:54,470
ready for for next idea so so the idea

93
00:07:49,610 --> 00:07:57,710
is to send this dating document to both

94
00:07:54,470 --> 00:08:00,020
our group and IC energy to give to get a

95
00:07:57,710 --> 00:08:02,150
feeling of both groups and if this

96
00:08:00,020 --> 00:08:04,669
feeling is positive then we may and

97
00:08:02,150 --> 00:08:06,729
research classical this is what we

98
00:08:04,670 --> 00:08:13,550
decided last time so it's still valid

99
00:08:06,730 --> 00:08:17,450
yes Dave just by way of advertising the

100
00:08:13,550 --> 00:08:20,510
the base protocol specs for CCN have

101
00:08:17,450 --> 00:08:23,719
been published as RFC s experimental RFC

102
00:08:20,510 --> 00:08:27,230
so we have a concrete pretty stable base

103
00:08:23,720 --> 00:08:30,290
to do the binding of any protocol

104
00:08:27,230 --> 00:08:33,530
machinery that you for the network

105
00:08:30,290 --> 00:08:34,849
hurting to refer to so something we

106
00:08:33,530 --> 00:08:37,159
might want to tell them is when they

107
00:08:34,849 --> 00:08:40,660
change their references to the MC

108
00:08:37,159 --> 00:08:43,669
version thanks okay thank you

109
00:08:40,659 --> 00:08:46,510
there was a slight update from the RNC

110
00:08:43,669 --> 00:08:49,819
based symbol representation documents

111
00:08:46,510 --> 00:08:54,470
not much difference but the office did

112
00:08:49,820 --> 00:08:57,770
not believe it was meaningful to have a

113
00:08:54,470 --> 00:09:01,370
new presentation today there was a much

114
00:08:57,770 --> 00:09:03,439
bigger update for the bats coding scheme

115
00:09:01,370 --> 00:09:06,560
for multi of data transport documents

116
00:09:03,440 --> 00:09:10,670
and I hope we will be able to discuss

117
00:09:06,560 --> 00:09:13,760
about this at next ITF in Singapore and

118
00:09:10,670 --> 00:09:15,979
finally the good news also is not work

119
00:09:13,760 --> 00:09:19,400
being done in this group but closely

120
00:09:15,980 --> 00:09:23,490
rated the free documents that I pushed

121
00:09:19,400 --> 00:09:25,920
forward in DTS vwg working group or

122
00:09:23,490 --> 00:09:28,319
fake frame extension for sliding window

123
00:09:25,920 --> 00:09:30,149
codes and the second one on Alice's

124
00:09:28,319 --> 00:09:34,709
lining Widow cards and the third one on

125
00:09:30,149 --> 00:09:39,329
tini mg42 PNG for being used in RC and

126
00:09:34,709 --> 00:09:42,779
perhaps somewhere else protocols all

127
00:09:39,329 --> 00:09:45,779
those free documents of being accepting

128
00:09:42,779 --> 00:09:48,240
the grid by GE and now there are the

129
00:09:45,779 --> 00:09:50,300
I've CID talked you so that's the good

130
00:09:48,240 --> 00:09:50,300
news

131
00:09:51,319 --> 00:09:58,769
so for next time

132
00:09:55,139 --> 00:10:01,980
we can say today that there will be a

133
00:09:58,769 --> 00:10:05,869
katana at next ITF that will also be a

134
00:10:01,980 --> 00:10:09,499
new meeting at next ITF in Singapore so

135
00:10:05,869 --> 00:10:14,009
just to tell you so that you can make

136
00:10:09,499 --> 00:10:23,639
arrangements so that's all for the chest

137
00:10:14,009 --> 00:10:27,449
slides so next presentation is a quick

138
00:10:23,639 --> 00:10:35,850
update on the icater on what we did from

139
00:10:27,449 --> 00:10:40,079
this time so this is the swift codec a

140
00:10:35,850 --> 00:10:43,679
katana just to remind you the goals of

141
00:10:40,079 --> 00:10:46,079
this Agathon is to design reference open

142
00:10:43,679 --> 00:10:48,689
source and free correct for slanging

143
00:10:46,079 --> 00:10:53,189
window cards this is the third time you

144
00:10:48,689 --> 00:10:54,899
meet the we we did the work we organized

145
00:10:53,189 --> 00:10:57,299
the work in such a way to be able to in

146
00:10:54,899 --> 00:10:59,819
the first step produce something that is

147
00:10:57,299 --> 00:11:02,549
somewhat compatible with what we did in

148
00:10:59,819 --> 00:11:04,679
the I'll see draft so just end-to-end

149
00:11:02,549 --> 00:11:07,019
encoding and decoding no nothing in the

150
00:11:04,679 --> 00:11:08,459
middle that's the first step and the

151
00:11:07,019 --> 00:11:10,110
second step would be to improve this

152
00:11:08,459 --> 00:11:11,670
further improve this correct so as to be

153
00:11:10,110 --> 00:11:14,069
able to do Rhian coding within the

154
00:11:11,670 --> 00:11:18,589
network if there is a desire for doing

155
00:11:14,069 --> 00:11:22,410
this the goal of course is to facilitate

156
00:11:18,589 --> 00:11:25,679
tests testings batch markings and also

157
00:11:22,410 --> 00:11:29,299
adoption another goal is to challenge

158
00:11:25,679 --> 00:11:33,389
our Jerrica api in the draft that

159
00:11:29,299 --> 00:11:35,790
specifies our to interact with such a

160
00:11:33,389 --> 00:11:36,279
collection of something else that would

161
00:11:35,790 --> 00:11:41,379
become

162
00:11:36,279 --> 00:11:44,079
so in terms of API so this time the team

163
00:11:41,379 --> 00:11:49,810
was a bit smaller than it used to be in

164
00:11:44,079 --> 00:11:51,609
the past we were free people silic was

165
00:11:49,810 --> 00:11:54,910
there for the two days Saturday and

166
00:11:51,610 --> 00:11:58,389
Sunday but was obliged to work also in a

167
00:11:54,910 --> 00:11:59,920
different project so he was he was

168
00:11:58,389 --> 00:12:00,759
sharing his time between these two

169
00:11:59,920 --> 00:12:03,550
projects

170
00:12:00,759 --> 00:12:06,100
Francois Michel was there on Saturday

171
00:12:03,550 --> 00:12:08,199
remotely but he contributed actively and

172
00:12:06,100 --> 00:12:09,639
as far as I'm concerned I was supposed

173
00:12:08,199 --> 00:12:10,990
to be there both from Saturday and

174
00:12:09,639 --> 00:12:13,990
Sunday and fortunately I had some

175
00:12:10,990 --> 00:12:18,970
programs and I was only able to to

176
00:12:13,990 --> 00:12:21,999
attend this Sunday so that's all of this

177
00:12:18,970 --> 00:12:24,309
to say that okay we didn't make as much

178
00:12:21,999 --> 00:12:28,480
progress as we anticipated as we would

179
00:12:24,309 --> 00:12:31,589
decide but okay it's like we also add

180
00:12:28,480 --> 00:12:34,629
some contributions from umeå we would

181
00:12:31,589 --> 00:12:36,790
since the previous ITF meeting managed

182
00:12:34,629 --> 00:12:38,199
to further update some parts of the

183
00:12:36,790 --> 00:12:42,490
correction she will continue on doing

184
00:12:38,199 --> 00:12:44,410
that so anyway we achieved to do a few

185
00:12:42,490 --> 00:12:46,959
things first of all we change the

186
00:12:44,410 --> 00:12:48,699
license that's something important just

187
00:12:46,959 --> 00:12:50,800
to make it clear we move to something

188
00:12:48,699 --> 00:12:53,079
which is compatible with the IGF

189
00:12:50,800 --> 00:12:55,329
requirements in terms of documents and

190
00:12:53,079 --> 00:13:00,399
code means inside document so this is a

191
00:12:55,329 --> 00:13:03,939
simplified bsd license the ending part

192
00:13:00,399 --> 00:13:06,759
is more or less well the main part of

193
00:13:03,939 --> 00:13:09,370
the encoder is done we still have to

194
00:13:06,759 --> 00:13:14,949
include a few additional work a foolish

195
00:13:09,370 --> 00:13:17,529
move method for sharing a few things

196
00:13:14,949 --> 00:13:19,059
anyway but most of it is done the

197
00:13:17,529 --> 00:13:21,160
decoder is in progress that's the most

198
00:13:19,059 --> 00:13:24,910
complicated part this is where we have

199
00:13:21,160 --> 00:13:27,579
to manage and solve linear systems and

200
00:13:24,910 --> 00:13:31,480
do all this complex mathematical

201
00:13:27,579 --> 00:13:34,388
machinery we managed to more or less

202
00:13:31,480 --> 00:13:35,949
finalize the demo application so it's

203
00:13:34,389 --> 00:13:39,550
not working from the moment because we

204
00:13:35,949 --> 00:13:42,639
don't do decoding but it's in good shape

205
00:13:39,550 --> 00:13:44,979
it's almost done and the Python wrapper

206
00:13:42,639 --> 00:13:47,019
and testimo in Python this is also

207
00:13:44,980 --> 00:13:49,230
something where we made much much

208
00:13:47,019 --> 00:13:49,230
progress

209
00:13:49,280 --> 00:13:56,780
we've fixed one thing in the generic API

210
00:13:52,160 --> 00:13:59,270
internet draft mistake in the way we

211
00:13:56,780 --> 00:14:01,000
specify the point or it was a point or

212
00:13:59,270 --> 00:14:03,110
it should have been a renewable point or

213
00:14:01,000 --> 00:14:05,240
something like that and then we still a

214
00:14:03,110 --> 00:14:07,190
few open points that we did not manage

215
00:14:05,240 --> 00:14:10,910
to fly if I will still need to think

216
00:14:07,190 --> 00:14:14,330
about it again so the next step in for

217
00:14:10,910 --> 00:14:17,510
fight EF I kep on in the next ITF

218
00:14:14,330 --> 00:14:19,730
Agathon will be to have something that's

219
00:14:17,510 --> 00:14:22,280
working that managed to do encoding and

220
00:14:19,730 --> 00:14:24,920
decoding and interoperate I think it may

221
00:14:22,280 --> 00:14:29,060
be physical if we manage to do some work

222
00:14:24,920 --> 00:14:31,189
in between and then we will continue as

223
00:14:29,060 --> 00:14:32,810
I said with the oil and sea so being

224
00:14:31,190 --> 00:14:37,040
able to do rien coding within the

225
00:14:32,810 --> 00:14:39,729
network so that's the goal I don't know

226
00:14:37,040 --> 00:14:50,900
if there's any comment question no ok

227
00:14:39,730 --> 00:14:54,230
custom custom moment how would you

228
00:14:50,900 --> 00:14:56,810
characterize the performance of what you

229
00:14:54,230 --> 00:14:59,540
are doing is this high-performance of

230
00:14:56,810 --> 00:15:01,430
limitation is just proof of concept

231
00:14:59,540 --> 00:15:03,560
implementation that the goal is to have

232
00:15:01,430 --> 00:15:07,489
a proof of concept which is functional

233
00:15:03,560 --> 00:15:10,130
and all those performance optimization

234
00:15:07,490 --> 00:15:12,290
stuff that should be done will be left

235
00:15:10,130 --> 00:15:14,780
for volunteers who won't have an

236
00:15:12,290 --> 00:15:18,110
interest in doing so so what the goal of

237
00:15:14,780 --> 00:15:21,620
this - Timo is really - to have a

238
00:15:18,110 --> 00:15:24,200
functional connection before you agree

239
00:15:21,620 --> 00:15:27,260
with that so what what level of

240
00:15:24,200 --> 00:15:31,670
performance improvement version will you

241
00:15:27,260 --> 00:15:33,620
will get this effect attend faster I

242
00:15:31,670 --> 00:15:35,290
think there will be potential for

243
00:15:33,620 --> 00:15:37,340
performance improvement at the end a

244
00:15:35,290 --> 00:15:39,790
significant performance improvement for

245
00:15:37,340 --> 00:15:42,200
what I saw in the mathematical

246
00:15:39,790 --> 00:15:45,199
operations then with a few things we can

247
00:15:42,200 --> 00:15:46,760
that could be done but whoever wants to

248
00:15:45,200 --> 00:15:49,940
contribute on this particular point is

249
00:15:46,760 --> 00:15:52,189
welcome of course to do that now also

250
00:15:49,940 --> 00:15:54,140
some conflict of interest for some of us

251
00:15:52,190 --> 00:15:59,030
myself included I have a proprietary

252
00:15:54,140 --> 00:16:00,949
implementation of this so the limits to

253
00:15:59,030 --> 00:16:02,030
what I can do in this context but we

254
00:16:00,950 --> 00:16:04,850
will have something from

255
00:16:02,030 --> 00:16:06,980
for sure and since it is open-source bsd

256
00:16:04,850 --> 00:16:08,810
open BSD license

257
00:16:06,980 --> 00:16:12,400
anybody can further improve it it's

258
00:16:08,810 --> 00:17:19,329
totally free and I've pretty sure that

259
00:16:12,400 --> 00:17:21,650
people will do that okay hello everyone

260
00:17:19,329 --> 00:17:27,500
this is an update from the draft on

261
00:17:21,650 --> 00:17:29,330
networking for satellite systems we were

262
00:17:27,500 --> 00:17:32,230
in working who pressed call process

263
00:17:29,330 --> 00:17:36,050
since the last ACF and we had lots of

264
00:17:32,230 --> 00:17:37,880
comments from john and lloyd and

265
00:17:36,050 --> 00:17:40,340
yourself forgot you on the slide sorry

266
00:17:37,880 --> 00:17:43,910
for theft I should have put it some like

267
00:17:40,340 --> 00:17:46,429
and many others well basically think

268
00:17:43,910 --> 00:17:48,080
there were some very deep changes in all

269
00:17:46,430 --> 00:17:50,720
the wording and lots of different

270
00:17:48,080 --> 00:17:52,699
aspects on the draft rather than just

271
00:17:50,720 --> 00:17:55,730
presenting a deef as we did a lot

272
00:17:52,700 --> 00:17:58,730
recently for this draft I'd rather I

273
00:17:55,730 --> 00:18:00,980
prefer to present it all again and also

274
00:17:58,730 --> 00:18:02,900
for some of the use cases where with a

275
00:18:00,980 --> 00:18:08,000
net recording is of interest we haven't

276
00:18:02,900 --> 00:18:11,330
read some experimental results so I will

277
00:18:08,000 --> 00:18:13,990
go through the document

278
00:18:11,330 --> 00:18:16,879
and first starting with the abstract

279
00:18:13,990 --> 00:18:18,680
where we insist on the fact that we

280
00:18:16,880 --> 00:18:22,400
follow and we base everything on the

281
00:18:18,680 --> 00:18:24,860
taxonomic document so coding in the

282
00:18:22,400 --> 00:18:26,810
document is a linear combination of

283
00:18:24,860 --> 00:18:29,050
packets and operates above the network

284
00:18:26,810 --> 00:18:31,520
layer and it's true that for that

285
00:18:29,050 --> 00:18:33,379
previous versions of the draft was not

286
00:18:31,520 --> 00:18:36,860
always very clear if there were lots of

287
00:18:33,380 --> 00:18:39,080
small issues in wordings so I think for

288
00:18:36,860 --> 00:18:41,149
that and the reviews in the comments we

289
00:18:39,080 --> 00:18:46,100
received our very own food in improving

290
00:18:41,150 --> 00:18:48,110
the document so we have the break TVs to

291
00:18:46,100 --> 00:18:51,800
detail what is a multi gateway satellite

292
00:18:48,110 --> 00:18:53,870
systems to identify cases where ad

293
00:18:51,800 --> 00:18:57,139
encoding is what happened so we have

294
00:18:53,870 --> 00:18:59,179
residual losses and to end we have some

295
00:18:57,140 --> 00:19:00,980
multicast services as we want to make on

296
00:18:59,180 --> 00:19:03,770
a level and many other use case which I

297
00:19:00,980 --> 00:19:06,530
will go through now and the main

298
00:19:03,770 --> 00:19:08,960
objective then is to contribute to

299
00:19:06,530 --> 00:19:11,570
larger debugging deployment of coding

300
00:19:08,960 --> 00:19:13,580
techniques in SATCOM systems or

301
00:19:11,570 --> 00:19:17,330
four-second systems may not have to be

302
00:19:13,580 --> 00:19:19,280
specific but at least deployed and we

303
00:19:17,330 --> 00:19:24,470
try to identify some open research

304
00:19:19,280 --> 00:19:26,720
issues and the end of the document so if

305
00:19:24,470 --> 00:19:30,260
we go more into the details on what the

306
00:19:26,720 --> 00:19:33,020
taxonomy document says is that we do not

307
00:19:30,260 --> 00:19:35,150
consider a physical layer coding all

308
00:19:33,020 --> 00:19:38,780
that is physical layer related is out of

309
00:19:35,150 --> 00:19:40,370
the scope of the document we have FEC

310
00:19:38,780 --> 00:19:44,899
that operates above the network layer

311
00:19:40,370 --> 00:19:47,080
and we only have a combination linear

312
00:19:44,900 --> 00:19:49,400
combination of packets we don't know any

313
00:19:47,080 --> 00:19:50,600
application level coding such as it

314
00:19:49,400 --> 00:19:55,790
could be the case to compress the video

315
00:19:50,600 --> 00:19:59,030
flow for example and we see that this

316
00:19:55,790 --> 00:20:02,720
activity has been very widely discussed

317
00:19:59,030 --> 00:20:04,550
in the research community and we think

318
00:20:02,720 --> 00:20:07,010
document Alps in the notifying we're

319
00:20:04,550 --> 00:20:09,169
using coding is relevant just a quick

320
00:20:07,010 --> 00:20:11,720
clarification question you actually mean

321
00:20:09,170 --> 00:20:15,230
above the network layer or in or above

322
00:20:11,720 --> 00:20:18,530
the network layer in or above ah I mean

323
00:20:15,230 --> 00:20:20,600
we don't because if you say above you

324
00:20:18,530 --> 00:20:23,690
can't do recoding in a router okay I

325
00:20:20,600 --> 00:20:24,830
should what we should say is we do not

326
00:20:23,690 --> 00:20:27,530
do layered

327
00:20:24,830 --> 00:20:29,870
cutting because if that's not what the

328
00:20:27,530 --> 00:20:33,379
slide says just hope that's not what the

329
00:20:29,870 --> 00:20:35,000
document says it is what the document

330
00:20:33,380 --> 00:20:39,680
says so thank you for that

331
00:20:35,000 --> 00:20:42,680
and we will have to make an update I

332
00:20:39,680 --> 00:20:46,670
will look at a note later or not to

333
00:20:42,680 --> 00:20:50,720
forget thank you

334
00:20:46,670 --> 00:20:55,190
so this is a description of what you can

335
00:20:50,720 --> 00:20:58,970
find in to the generic satellite system

336
00:20:55,190 --> 00:21:02,360
today following the gbps2 standard so

337
00:20:58,970 --> 00:21:04,610
when I say above the network layer is

338
00:21:02,360 --> 00:21:07,310
that we don't play with these BB frames

339
00:21:04,610 --> 00:21:09,409
and specific DBS to latest standards

340
00:21:07,310 --> 00:21:13,460
because this is very out of the scope of

341
00:21:09,410 --> 00:21:17,090
the ITF and what so it's so this is I

342
00:21:13,460 --> 00:21:18,620
think most more to introduce some of the

343
00:21:17,090 --> 00:21:25,010
wording that I used in the rest of the

344
00:21:18,620 --> 00:21:26,419
documents as towards for the first use

345
00:21:25,010 --> 00:21:29,660
case I will now go through the different

346
00:21:26,420 --> 00:21:33,790
use cases and for all some of them these

347
00:21:29,660 --> 00:21:38,390
are not high level description use cases

348
00:21:33,790 --> 00:21:40,540
this one is the use case where basically

349
00:21:38,390 --> 00:21:42,650
we have two satellite terminals

350
00:21:40,540 --> 00:21:45,170
communicating to each other to the

351
00:21:42,650 --> 00:21:48,020
recording server on the return link we

352
00:21:45,170 --> 00:21:50,510
have with we have settled at Terminal A

353
00:21:48,020 --> 00:21:53,090
who sends a satellite on Nibiru things

354
00:21:50,510 --> 00:21:56,120
be and basically the coding server sent

355
00:21:53,090 --> 00:22:00,020
a and B on the forward link so that is

356
00:21:56,120 --> 00:22:01,669
huge capacity optimization we have

357
00:22:00,020 --> 00:22:04,100
introduced this use case not really

358
00:22:01,670 --> 00:22:05,840
because there are lots of industrial and

359
00:22:04,100 --> 00:22:08,179
application use cases that are relevant

360
00:22:05,840 --> 00:22:09,560
but this is something that we can do and

361
00:22:08,180 --> 00:22:14,900
has been demonstrated using will

362
00:22:09,560 --> 00:22:17,330
satellites in a SMS 2010 so we should at

363
00:22:14,900 --> 00:22:20,630
least that's why we mention it they've

364
00:22:17,330 --> 00:22:24,470
the variable multicast when we have a

365
00:22:20,630 --> 00:22:28,940
multicast and flow going to different

366
00:22:24,470 --> 00:22:31,670
users satellite terminal ay and B but we

367
00:22:28,940 --> 00:22:34,280
have packets losses so a and B can send

368
00:22:31,670 --> 00:22:35,969
the to the mallika server the packets

369
00:22:34,280 --> 00:22:41,940
that are not received and

370
00:22:35,969 --> 00:22:45,749
a em flow can induce coded packets to

371
00:22:41,940 --> 00:22:47,839
recover what has been lost we agree that

372
00:22:45,749 --> 00:22:50,399
this could be done by lots of other

373
00:22:47,839 --> 00:22:56,190
multicast about CAD systems such as norm

374
00:22:50,399 --> 00:22:57,899
or fruit but they do not use the limited

375
00:22:56,190 --> 00:23:00,239
to block coding and the newt actually

376
00:22:57,899 --> 00:23:03,498
supports sliding window schemes so that

377
00:23:00,239 --> 00:23:07,979
is why we mentioned that in the document

378
00:23:03,499 --> 00:23:10,049
another use case is it would access if

379
00:23:07,979 --> 00:23:12,299
when you have and that is really typical

380
00:23:10,049 --> 00:23:15,779
in many satakam applications when you

381
00:23:12,299 --> 00:23:18,149
have ample users in the boat or in oil

382
00:23:15,779 --> 00:23:19,769
platform or whatever there is not only

383
00:23:18,149 --> 00:23:23,099
the satellite satellite is one of the

384
00:23:19,769 --> 00:23:26,719
many links that are available so we can

385
00:23:23,099 --> 00:23:29,579
have a CPE on the end user side and a

386
00:23:26,719 --> 00:23:32,489
concentrator in the operator network so

387
00:23:29,579 --> 00:23:34,948
we have lots of MPCP for example could

388
00:23:32,489 --> 00:23:38,249
go through these networks and sometimes

389
00:23:34,949 --> 00:23:40,679
there are packet losses on one of these

390
00:23:38,249 --> 00:23:43,619
links and in using coding techniques

391
00:23:40,679 --> 00:23:47,729
could be introduced both at the CPE or

392
00:23:43,619 --> 00:23:50,458
the concentrator to cover an cup from

393
00:23:47,729 --> 00:23:54,419
packet losses so this is open lots of

394
00:23:50,459 --> 00:23:56,839
research questions on how do you impact

395
00:23:54,419 --> 00:23:59,099
on MPT CP congestion control for example

396
00:23:56,839 --> 00:24:07,639
so that's why we mentioned that in this

397
00:23:59,099 --> 00:24:11,249
document this use case concerns a lot

398
00:24:07,639 --> 00:24:15,478
more than the others I think that in

399
00:24:11,249 --> 00:24:18,299
this figure you have basically your web

400
00:24:15,479 --> 00:24:20,519
applications every hour that com-system

401
00:24:18,299 --> 00:24:22,949
a multi gateway system so if you look at

402
00:24:20,519 --> 00:24:24,839
the operator thank you that fat growing

403
00:24:22,949 --> 00:24:27,239
segment this is what good light look

404
00:24:24,839 --> 00:24:29,609
could look like we have tens of gateways

405
00:24:27,239 --> 00:24:31,349
in Europe for example and then you have

406
00:24:29,609 --> 00:24:34,139
a satellite that you use a dvb-s to

407
00:24:31,349 --> 00:24:36,299
standards to send the data from the

408
00:24:34,139 --> 00:24:38,399
Gateway to that right Tammy no and the

409
00:24:36,299 --> 00:24:41,999
user DiBiase's to standards for the

410
00:24:38,399 --> 00:24:46,649
returning so we have apart from some

411
00:24:41,999 --> 00:24:48,690
regions where we have rain fades and

412
00:24:46,649 --> 00:24:51,449
packet losses we can

413
00:24:48,690 --> 00:24:54,900
consider in general that even error of a

414
00:24:51,450 --> 00:24:56,580
link and we have a IOT but the problem

415
00:24:54,900 --> 00:24:58,530
is most of the users today are

416
00:24:56,580 --> 00:25:02,189
connecting through the satellite box

417
00:24:58,530 --> 00:25:05,340
with Wi-Fi loss Wi-Fi link so in this

418
00:25:02,190 --> 00:25:08,010
case we don't have only an IOT network

419
00:25:05,340 --> 00:25:12,560
but we also have an IAT with losses

420
00:25:08,010 --> 00:25:15,780
network and in this case I think that if

421
00:25:12,560 --> 00:25:18,149
people working on quick and fake are

422
00:25:15,780 --> 00:25:19,680
looking for use cases if they can make

423
00:25:18,150 --> 00:25:22,530
it work in this use case that would help

424
00:25:19,680 --> 00:25:25,440
us a lot so if you want sizing numbers

425
00:25:22,530 --> 00:25:28,139
or use cases that would be very relevant

426
00:25:25,440 --> 00:25:33,710
for you to experiment and for us to have

427
00:25:28,140 --> 00:25:36,030
the results because this is we have not

428
00:25:33,710 --> 00:25:38,400
experimented network coding in this

429
00:25:36,030 --> 00:25:40,080
version but we have a satellite at home

430
00:25:38,400 --> 00:25:41,880
we have a good wave of satellite

431
00:25:40,080 --> 00:25:43,470
terminal so this is a real experiment

432
00:25:41,880 --> 00:25:47,250
you think a real satellite flying above

433
00:25:43,470 --> 00:25:49,740
and basically we have an HTTP to

434
00:25:47,250 --> 00:25:52,920
transfer of 2 megabytes file from the

435
00:25:49,740 --> 00:25:56,370
two endpoints and here we have one

436
00:25:52,920 --> 00:25:59,100
opossum classes I will not go deep into

437
00:25:56,370 --> 00:26:00,239
the details but because I have all the

438
00:25:59,100 --> 00:26:02,520
results and show you if you are

439
00:26:00,240 --> 00:26:04,320
interested you can have a chat but

440
00:26:02,520 --> 00:26:07,860
basically if we look at the page loading

441
00:26:04,320 --> 00:26:09,929
time without these losses there is no

442
00:26:07,860 --> 00:26:15,479
congestion is only one to make by

443
00:26:09,930 --> 00:26:19,260
megabytes file transfer basically we

444
00:26:15,480 --> 00:26:21,540
have we compare these PDF without and

445
00:26:19,260 --> 00:26:23,850
with losses and what we can see is that

446
00:26:21,540 --> 00:26:27,480
when you have one person losses for the

447
00:26:23,850 --> 00:26:29,879
median median page loading time we have

448
00:26:27,480 --> 00:26:33,000
more than five seconds increase and for

449
00:26:29,880 --> 00:26:36,030
the 80% of the cases we have 18 seconds

450
00:26:33,000 --> 00:26:38,880
increase and so we go from 11 to 30

451
00:26:36,030 --> 00:26:40,740
seconds so that very bad quality of

452
00:26:38,880 --> 00:26:42,390
experience so we need to do we are

453
00:26:40,740 --> 00:26:44,430
trying to find ways of doing something

454
00:26:42,390 --> 00:26:47,400
about that if you see the solution maybe

455
00:26:44,430 --> 00:26:48,960
you want to L a press that may be an

456
00:26:47,400 --> 00:26:51,150
interesting with reduce case we have

457
00:26:48,960 --> 00:26:53,280
platforms if you want to experiment so

458
00:26:51,150 --> 00:26:56,510
contact me if you want to experiment

459
00:26:53,280 --> 00:26:56,510
your solutions in this use case

460
00:26:57,100 --> 00:27:02,590
another use case we haven't satellite is

461
00:26:59,409 --> 00:27:04,510
that I told you that in this use case we

462
00:27:02,590 --> 00:27:06,250
have no losses but there are cases where

463
00:27:04,510 --> 00:27:10,149
we have loss reasons that are a

464
00:27:06,250 --> 00:27:11,950
satellite link and we think that in

465
00:27:10,149 --> 00:27:14,979
these cases the physical layer is very

466
00:27:11,950 --> 00:27:18,340
constrained so providing higher layers

467
00:27:14,980 --> 00:27:21,010
relevancy can help in releasing the

468
00:27:18,340 --> 00:27:22,539
constraints on the physical layer sorry

469
00:27:21,010 --> 00:27:23,950
for mentioning the physical layer here

470
00:27:22,539 --> 00:27:26,620
and this is more something that I'm not

471
00:27:23,950 --> 00:27:28,360
really perfectly familiar with but what

472
00:27:26,620 --> 00:27:30,820
I can tell you is that we have basically

473
00:27:28,360 --> 00:27:33,370
the losses pattern you have when you are

474
00:27:30,820 --> 00:27:36,549
an antenna on the train so we can see

475
00:27:33,370 --> 00:27:40,120
that we have this we have very low snr

476
00:27:36,549 --> 00:27:43,240
areas of the DBS 2x standard so you have

477
00:27:40,120 --> 00:27:45,100
here the signal-to-noise ratios and the

478
00:27:43,240 --> 00:27:48,720
modulations that are used and in this

479
00:27:45,100 --> 00:27:51,760
context we have raised your losses and

480
00:27:48,720 --> 00:27:55,539
the picks with here are basically the

481
00:27:51,760 --> 00:28:00,700
poles along the railway so you have

482
00:27:55,539 --> 00:28:03,399
repeated losses in in another case we

483
00:28:00,700 --> 00:28:05,889
have been looking at we have an LMS so

484
00:28:03,399 --> 00:28:08,229
basically mobile and mobile user so

485
00:28:05,889 --> 00:28:10,689
neither in moving through the trees a

486
00:28:08,230 --> 00:28:15,010
lot of issues so we have this kind of

487
00:28:10,690 --> 00:28:16,870
patterns these traces are available and

488
00:28:15,010 --> 00:28:18,820
then to the lists if you want to play

489
00:28:16,870 --> 00:28:20,590
with that we have we can easily play

490
00:28:18,820 --> 00:28:23,379
them in open source tools we have so if

491
00:28:20,590 --> 00:28:26,199
you want to so to put that in your

492
00:28:23,380 --> 00:28:28,389
experiments but would be great we have

493
00:28:26,200 --> 00:28:30,519
been another use case that is very

494
00:28:28,389 --> 00:28:33,639
trendy in that calm industry at the

495
00:28:30,519 --> 00:28:35,110
moment is using optical links but the

496
00:28:33,639 --> 00:28:36,969
problem with optical link that we have

497
00:28:35,110 --> 00:28:42,158
at the moment it's at sometimes a cloud

498
00:28:36,970 --> 00:28:45,159
and so we have on a very short fading

499
00:28:42,159 --> 00:28:48,490
even's I don't understand everything in

500
00:28:45,159 --> 00:28:50,889
this figure but I put it here and the

501
00:28:48,490 --> 00:28:55,179
reference just to explain that basically

502
00:28:50,889 --> 00:28:58,418
we have lots of people working on it and

503
00:28:55,179 --> 00:29:02,409
we want to explain them that they're not

504
00:28:58,419 --> 00:29:05,260
there's not much needs in improving a

505
00:29:02,409 --> 00:29:06,470
lot of equal layer let her let us deal

506
00:29:05,260 --> 00:29:09,010
with

507
00:29:06,470 --> 00:29:12,920
improving the quality of experience and

508
00:29:09,010 --> 00:29:14,510
dealing with these losses so we expect

509
00:29:12,920 --> 00:29:16,880
to do some measurements in this use case

510
00:29:14,510 --> 00:29:19,400
in the next coming months but we have

511
00:29:16,880 --> 00:29:22,850
done some results with the previous

512
00:29:19,400 --> 00:29:25,340
traces I had shown earlier so that's the

513
00:29:22,850 --> 00:29:28,750
train that the mobile user so this is an

514
00:29:25,340 --> 00:29:31,820
open source tool we have and we we

515
00:29:28,750 --> 00:29:33,200
through port so if you want to use it it

516
00:29:31,820 --> 00:29:35,300
here everything is on the wiki

517
00:29:33,200 --> 00:29:37,280
everything is available so we have a

518
00:29:35,300 --> 00:29:40,280
gateway of that comm satellite terminal

519
00:29:37,280 --> 00:29:43,610
between the fat and the factory know we

520
00:29:40,280 --> 00:29:45,610
have we induce these losses and we have

521
00:29:43,610 --> 00:29:49,129
on top of that Anu has recorded shadow

522
00:29:45,610 --> 00:29:52,879
with a sliding window effect with the K

523
00:29:49,130 --> 00:29:54,470
or 4 in the age of 20 I hope I think the

524
00:29:52,880 --> 00:29:56,780
room is familiar with these kind of

525
00:29:54,470 --> 00:29:59,990
schemes if you want more details we can

526
00:29:56,780 --> 00:30:04,790
have a chat but basically what I show

527
00:29:59,990 --> 00:30:06,680
here is the residual losses so on the

528
00:30:04,790 --> 00:30:08,800
train case because the pattern is very

529
00:30:06,680 --> 00:30:12,100
big you are we can actually find the

530
00:30:08,800 --> 00:30:15,169
parameterization and K value of K that

531
00:30:12,100 --> 00:30:17,750
solve all the problem with at some point

532
00:30:15,170 --> 00:30:21,290
K is too high and basically we have

533
00:30:17,750 --> 00:30:25,610
residual losses Servais and in the other

534
00:30:21,290 --> 00:30:27,740
case the pattern is so strange that we

535
00:30:25,610 --> 00:30:32,060
can we can't actually do anything with

536
00:30:27,740 --> 00:30:36,550
the basic scheme represented so I think

537
00:30:32,060 --> 00:30:39,050
that this is very open research issue

538
00:30:36,550 --> 00:30:42,950
that may be of interest for the persons

539
00:30:39,050 --> 00:30:45,440
in this group we also are trying to see

540
00:30:42,950 --> 00:30:48,500
all this impact on TCP first and then

541
00:30:45,440 --> 00:30:50,600
when we have mpeg-dash traffic and

542
00:30:48,500 --> 00:30:52,760
because that is the use case that we are

543
00:30:50,600 --> 00:30:55,370
interested in and we think that is very

544
00:30:52,760 --> 00:30:56,870
at least funny to look at because when

545
00:30:55,370 --> 00:30:59,120
you have all these multiple layers that

546
00:30:56,870 --> 00:31:02,449
play to each other and strange things

547
00:30:59,120 --> 00:31:10,750
happen with at least interesting use

548
00:31:02,450 --> 00:31:10,750
case and so how much time do I have left

549
00:31:11,530 --> 00:31:19,690
so another but that we go still card

550
00:31:16,420 --> 00:31:23,140
question what are the C's what are the

551
00:31:19,690 --> 00:31:28,020
little C labels the picture you just had

552
00:31:23,140 --> 00:31:34,750
no the picture you just put up okay C's

553
00:31:28,020 --> 00:31:36,970
cccc I think that yeah if I am might be

554
00:31:34,750 --> 00:31:41,230
beating in the legend here is where we

555
00:31:36,970 --> 00:31:43,120
could add meta coding because a network

556
00:31:41,230 --> 00:31:44,800
function block is basically we have IP

557
00:31:43,120 --> 00:31:48,070
packets coming in and that IP packets

558
00:31:44,800 --> 00:31:50,350
coming out and so we can that is where

559
00:31:48,070 --> 00:31:52,480
we have all these pipes and all lots of

560
00:31:50,350 --> 00:31:55,510
firewalls and all these things you could

561
00:31:52,480 --> 00:31:58,090
expect and access gateways as they have

562
00:31:55,510 --> 00:32:04,720
IP packets coming in they could also do

563
00:31:58,090 --> 00:32:07,720
some things on it and so one of the the

564
00:32:04,720 --> 00:32:09,070
trend at the moment is to try to thought

565
00:32:07,720 --> 00:32:10,930
basically that is a use case where we

566
00:32:09,070 --> 00:32:12,760
have lots of gateway and overs for lots

567
00:32:10,930 --> 00:32:14,170
of values reasons we may want to move

568
00:32:12,760 --> 00:32:16,450
the traffic from one gateway to another

569
00:32:14,170 --> 00:32:18,970
and in this case we may have losses so

570
00:32:16,450 --> 00:32:23,170
we may be that may be a use case of

571
00:32:18,970 --> 00:32:28,480
interest for network owning enough of

572
00:32:23,170 --> 00:32:30,940
the research challenge part so we know

573
00:32:28,480 --> 00:32:33,700
that we have proprietary solutions to

574
00:32:30,940 --> 00:32:36,940
hosts coding techniques in terms of

575
00:32:33,700 --> 00:32:39,970
deployment we are I know that it is

576
00:32:36,940 --> 00:32:42,310
possible but then we have a problem

577
00:32:39,970 --> 00:32:44,190
on the interactions that is something

578
00:32:42,310 --> 00:32:47,500
that has been discussed in the group and

579
00:32:44,190 --> 00:32:49,720
that basically what we are doing at the

580
00:32:47,500 --> 00:32:53,770
moment is looking at the fact that when

581
00:32:49,720 --> 00:32:56,050
you are adding with agency and you

582
00:32:53,770 --> 00:32:58,090
basically induce lots of jitter on the

583
00:32:56,050 --> 00:32:59,889
end-to-end and we don't know if RAC

584
00:32:58,090 --> 00:33:01,540
timers actually work well in this

585
00:32:59,890 --> 00:33:04,140
context so if you forget all the

586
00:33:01,540 --> 00:33:08,020
duplexing in TCP and only rely on rack

587
00:33:04,140 --> 00:33:11,470
we have in our case we have

588
00:33:08,020 --> 00:33:13,150
retransmission that low earlier that may

589
00:33:11,470 --> 00:33:15,460
happen and that would have an impact on

590
00:33:13,150 --> 00:33:18,370
the depending on the size of the buffer

591
00:33:15,460 --> 00:33:20,200
of your reer doing window in your Metro

592
00:33:18,370 --> 00:33:23,659
cooling scheme you may have an impact on

593
00:33:20,200 --> 00:33:28,130
how a rack total weights disorder

594
00:33:23,660 --> 00:33:32,560
we are doing and if and well out of all

595
00:33:28,130 --> 00:33:35,650
the pockets another important thing is

596
00:33:32,560 --> 00:33:38,840
it is a good thing to have real

597
00:33:35,650 --> 00:33:40,880
variability and to have more resiliency

598
00:33:38,840 --> 00:33:43,790
but the problem is that capacity is

599
00:33:40,880 --> 00:33:46,790
expensive in the satellite so there's a

600
00:33:43,790 --> 00:33:49,010
trade-off in how much residency you had

601
00:33:46,790 --> 00:33:51,950
and how much you can improve the quality

602
00:33:49,010 --> 00:33:55,070
of experience but how much does it costs

603
00:33:51,950 --> 00:33:59,650
in capacity because that's a big open

604
00:33:55,070 --> 00:34:02,510
question we have and then that is more

605
00:33:59,650 --> 00:34:04,760
related to another working group that is

606
00:34:02,510 --> 00:34:10,040
all the neutralization thing it's more

607
00:34:04,760 --> 00:34:12,350
because we have lots of CTE and gateways

608
00:34:10,040 --> 00:34:14,330
and data centers now we are moving

609
00:34:12,350 --> 00:34:17,779
toward this in satellite so basically we

610
00:34:14,330 --> 00:34:19,399
can ask easily these coding techniques

611
00:34:17,780 --> 00:34:21,649
end to end and between at least two

612
00:34:19,399 --> 00:34:23,359
endpoints which more how do we integrate

613
00:34:21,649 --> 00:34:24,918
this solution in and virtualized

614
00:34:23,360 --> 00:34:26,330
environment that is something that is

615
00:34:24,918 --> 00:34:28,339
maybe not a research challenge but at

616
00:34:26,330 --> 00:34:29,270
least something to do cuts debris

617
00:34:28,340 --> 00:34:35,360
because when you go deep into the

618
00:34:29,270 --> 00:34:37,759
details that way issues may commit and

619
00:34:35,360 --> 00:34:40,940
then interactions with DTN because that

620
00:34:37,760 --> 00:34:44,570
is something that came out in the

621
00:34:40,940 --> 00:34:47,600
discussions so basically how to network

622
00:34:44,570 --> 00:34:51,919
coding Interac who is against a current

623
00:34:47,600 --> 00:34:53,899
amount we have to open issues on the

624
00:34:51,918 --> 00:34:55,730
github because we have very happy to use

625
00:34:53,899 --> 00:34:57,940
github so if you have any comments of

626
00:34:55,730 --> 00:35:00,920
the document we are happy to welcome

627
00:34:57,940 --> 00:35:03,620
emails but issues on the github is way

628
00:35:00,920 --> 00:35:05,660
better because it's very easier way for

629
00:35:03,620 --> 00:35:07,990
us to explain to you how we assess your

630
00:35:05,660 --> 00:35:09,920
comments so we had a comment on

631
00:35:07,990 --> 00:35:17,870
virtualization and the research

632
00:35:09,920 --> 00:35:23,690
challenges were basically we proposed to

633
00:35:17,870 --> 00:35:27,200
close it because the question was

634
00:35:23,690 --> 00:35:29,720
because we are punting now our comments

635
00:35:27,200 --> 00:35:32,899
was that there were no ID on what the

636
00:35:29,720 --> 00:35:34,640
section means so do we want to be

637
00:35:32,900 --> 00:35:35,600
authorized antennas or virtualize

638
00:35:34,640 --> 00:35:38,750
reflector

639
00:35:35,600 --> 00:35:40,690
so that is not what we want to do but we

640
00:35:38,750 --> 00:35:44,390
try to make it clearer in the text and

641
00:35:40,690 --> 00:35:47,900
then another comment was on DTN and all

642
00:35:44,390 --> 00:35:50,089
these ccsd's stuff we don't want to mess

643
00:35:47,900 --> 00:35:51,770
with CCSD yes that's an also standard it

644
00:35:50,090 --> 00:35:53,990
has its specific use case in satellite

645
00:35:51,770 --> 00:35:56,509
industry and we don't want to consider

646
00:35:53,990 --> 00:35:59,959
that and so we just and we explained in

647
00:35:56,510 --> 00:36:02,960
this document that we are just using DVB

648
00:35:59,960 --> 00:36:07,850
as an example of what a satellite system

649
00:36:02,960 --> 00:36:09,280
is and not as a base line and we don't

650
00:36:07,850 --> 00:36:13,279
have a specific location trail

651
00:36:09,280 --> 00:36:16,880
even if rid of it so we published a

652
00:36:13,280 --> 00:36:20,300
closed issue as well yes just one

653
00:36:16,880 --> 00:36:23,270
comment you already sent an email to

654
00:36:20,300 --> 00:36:26,210
least mentioning those two open issues

655
00:36:23,270 --> 00:36:32,600
if I remember correctly we receive no

656
00:36:26,210 --> 00:36:36,410
feedback on it so I suggest you just

657
00:36:32,600 --> 00:36:38,509
reply to this and say explicitly what

658
00:36:36,410 --> 00:36:41,290
you have said now okay we propose to

659
00:36:38,510 --> 00:36:43,610
close unless there is opposition okay

660
00:36:41,290 --> 00:36:45,350
but do that on the list and not on the

661
00:36:43,610 --> 00:36:49,790
github because I'm not sure that it'll

662
00:36:45,350 --> 00:36:56,000
be so much below it as far as I'm

663
00:36:49,790 --> 00:36:57,620
concerned I'm Network easier for us we

664
00:36:56,000 --> 00:37:01,810
just copy paste it what we received by

665
00:36:57,620 --> 00:37:05,210
emails in the github to the end changing

666
00:37:01,810 --> 00:37:09,049
the pre quest anything it's clearer but

667
00:37:05,210 --> 00:37:11,960
then ok so send it to the list make it

668
00:37:09,050 --> 00:37:18,590
clear that you want to close those two

669
00:37:11,960 --> 00:37:22,100
commands open questions and yes so

670
00:37:18,590 --> 00:37:25,220
what's next step so we received comments

671
00:37:22,100 --> 00:37:26,330
from Scott recently yesterday thank you

672
00:37:25,220 --> 00:37:30,439
very much

673
00:37:26,330 --> 00:37:33,740
I suggest you answer those commands

674
00:37:30,440 --> 00:37:35,960
during a date and then I see no reason

675
00:37:33,740 --> 00:37:37,339
not to start a new working group a

676
00:37:35,960 --> 00:37:40,250
result group it's not a working group

677
00:37:37,340 --> 00:37:46,480
research group Lascaux on this dating

678
00:37:40,250 --> 00:38:16,810
documents okay no opinion no it's okay

679
00:37:46,480 --> 00:38:18,940
thank you so this is a technical

680
00:38:16,810 --> 00:38:22,390
presentation of what we have done for

681
00:38:18,940 --> 00:38:25,420
this coding for quick document we change

682
00:38:22,390 --> 00:38:27,670
a lot of things I as I will explain so

683
00:38:25,420 --> 00:38:32,500
this is joint work with Francois my shoe

684
00:38:27,670 --> 00:38:35,349
and onion so just a summary of what we

685
00:38:32,500 --> 00:38:38,260
the situation at previous ITF there were

686
00:38:35,349 --> 00:38:42,190
two proposals for adding quick earth

687
00:38:38,260 --> 00:38:44,470
adding FEC within quick the one that I

688
00:38:42,190 --> 00:38:46,480
mentioned here is the the one what was

689
00:38:44,470 --> 00:38:50,470
implemented in previous revision of this

690
00:38:46,480 --> 00:38:56,140
document the idea was to do that within

691
00:38:50,470 --> 00:39:00,098
a stream you know stream notion of trim

692
00:38:56,140 --> 00:39:03,150
from quick with good properties meaning

693
00:39:00,099 --> 00:39:05,680
that some of the streams have more

694
00:39:03,150 --> 00:39:09,099
requirements in terms of reliability and

695
00:39:05,680 --> 00:39:12,430
others so it makes sense to protect more

696
00:39:09,099 --> 00:39:16,030
new streams than the rest there was also

697
00:39:12,430 --> 00:39:18,430
a good property that it was possible to

698
00:39:16,030 --> 00:39:20,740
do that without changing at all at all

699
00:39:18,430 --> 00:39:23,589
the quick sauce packet you're in your

700
00:39:20,740 --> 00:39:26,200
packets so that's great to do that but

701
00:39:23,589 --> 00:39:28,599
of course there are consequences side

702
00:39:26,200 --> 00:39:30,669
effects one of those side effect is the

703
00:39:28,599 --> 00:39:34,470
fact that okay this is a stream concept

704
00:39:30,670 --> 00:39:38,140
so being a stream concept there is no

705
00:39:34,470 --> 00:39:41,589
separate there's no boundary no notion

706
00:39:38,140 --> 00:39:44,368
of boundaries and it's doesn't it's not

707
00:39:41,589 --> 00:39:47,140
something that could be easily

708
00:39:44,369 --> 00:39:49,660
applicated to data graham approach

709
00:39:47,140 --> 00:39:52,000
another way to transport data transport

710
00:39:49,660 --> 00:39:53,500
build within quick so that's not very

711
00:39:52,000 --> 00:39:56,079
good from this point of view there's

712
00:39:53,500 --> 00:39:59,470
also another side effect that was a bit

713
00:39:56,079 --> 00:40:00,070
annoying this notion of stream makes it

714
00:39:59,470 --> 00:40:02,200
in post

715
00:40:00,070 --> 00:40:04,180
it makes it possible for a symbol to

716
00:40:02,200 --> 00:40:08,160
straddle several packets and that's

717
00:40:04,180 --> 00:40:11,140
something that we don't want so much so

718
00:40:08,160 --> 00:40:13,390
the second proposal from Francois was

719
00:40:11,140 --> 00:40:18,220
doing it totally differently the idea

720
00:40:13,390 --> 00:40:20,500
was to protect packets to consider

721
00:40:18,220 --> 00:40:23,140
packets consider the payload of this

722
00:40:20,500 --> 00:40:27,400
packet and to segment this payload into

723
00:40:23,140 --> 00:40:29,980
symbols so as to do a protection for all

724
00:40:27,400 --> 00:40:31,720
those frames within these packets within

725
00:40:29,980 --> 00:40:34,000
those packets so it's another way to do

726
00:40:31,720 --> 00:40:35,620
that it preserves packet boundaries

727
00:40:34,000 --> 00:40:38,380
that's a good point when you recover

728
00:40:35,620 --> 00:40:41,440
something you know that it fits inside a

729
00:40:38,380 --> 00:40:43,150
given quick packets you also had this

730
00:40:41,440 --> 00:40:44,950
good property that saucy motion ever

731
00:40:43,150 --> 00:40:48,220
straddles they were quick packets so

732
00:40:44,950 --> 00:40:51,279
that's also something nice with some

733
00:40:48,220 --> 00:40:52,330
additional one side effects that's okay

734
00:40:51,280 --> 00:40:54,820
we need to change which will be the

735
00:40:52,330 --> 00:40:58,600
original quick packets but something

736
00:40:54,820 --> 00:41:00,880
that can accommodate and it's also bit

737
00:40:58,600 --> 00:41:04,569
more difficult to try to protect a

738
00:41:00,880 --> 00:41:06,190
subset of a packet so do that think that

739
00:41:04,570 --> 00:41:08,920
we will elaborate a little bit more in

740
00:41:06,190 --> 00:41:11,740
this presentation too much into details

741
00:41:08,920 --> 00:41:14,500
at the moment so we add discussion so

742
00:41:11,740 --> 00:41:16,629
together and we decided to change

743
00:41:14,500 --> 00:41:19,180
totally the way we propose to do

744
00:41:16,630 --> 00:41:21,790
efficient quick and to follow what more

745
00:41:19,180 --> 00:41:23,620
or less what consol was proposing namely

746
00:41:21,790 --> 00:41:28,240
doing that

747
00:41:23,620 --> 00:41:30,400
inside packet cross packet friends so

748
00:41:28,240 --> 00:41:33,640
that's what is now implementing in this

749
00:41:30,400 --> 00:41:35,320
every revision of this document we added

750
00:41:33,640 --> 00:41:38,799
a few additional features as I will

751
00:41:35,320 --> 00:41:41,440
explain so many things are still the

752
00:41:38,800 --> 00:41:44,440
same several key architectural concepts

753
00:41:41,440 --> 00:41:46,990
remain one of them being that we apply

754
00:41:44,440 --> 00:41:49,480
FEC encoding and decoding before doing

755
00:41:46,990 --> 00:41:51,640
encryption which means that middle boxes

756
00:41:49,480 --> 00:41:54,490
will not be able to do anything from

757
00:41:51,640 --> 00:41:56,259
this data flow it will be an encrypting

758
00:41:54,490 --> 00:41:59,350
data flow no way to distinguish between

759
00:41:56,260 --> 00:42:02,700
source and repair packets there's no way

760
00:41:59,350 --> 00:42:06,400
to do that that's the first aspect

761
00:42:02,700 --> 00:42:08,980
another aspect is that as before we try

762
00:42:06,400 --> 00:42:11,410
to provide a generic picture which is

763
00:42:08,980 --> 00:42:13,960
compatible Morris with any fax scheme

764
00:42:11,410 --> 00:42:17,049
that we may want to use within quick

765
00:42:13,960 --> 00:42:20,410
and we have moved we move all the facts

766
00:42:17,050 --> 00:42:22,810
keep specific considerations our to do

767
00:42:20,410 --> 00:42:25,629
that with such or such cut for instance

768
00:42:22,810 --> 00:42:28,000
within a separate dedicated internet

769
00:42:25,630 --> 00:42:31,000
drafts so that's the case with this

770
00:42:28,000 --> 00:42:35,650
existing with the existing I'll see for

771
00:42:31,000 --> 00:42:37,839
quick internet draft the third point

772
00:42:35,650 --> 00:42:40,630
that we kept is that we absolutely want

773
00:42:37,839 --> 00:42:42,460
to be congestion control compatible we

774
00:42:40,630 --> 00:42:44,440
do not want to interfere with the way a

775
00:42:42,460 --> 00:42:48,369
congestion control may happen within

776
00:42:44,440 --> 00:42:50,980
quick so we use dedicated recovered

777
00:42:48,369 --> 00:42:52,720
friends to inform the sender that some

778
00:42:50,980 --> 00:42:54,910
packet has been lost but has been

779
00:42:52,720 --> 00:42:58,359
recovered by a fish decoding at the

780
00:42:54,910 --> 00:43:01,060
receiver so so that the sender can take

781
00:42:58,359 --> 00:43:03,250
it into account do whatever you need to

782
00:43:01,060 --> 00:43:04,720
do from a congestion control point of

783
00:43:03,250 --> 00:43:08,500
view notion from this point of view and

784
00:43:04,720 --> 00:43:10,509
of course avoid reasoning retransmitting

785
00:43:08,500 --> 00:43:13,089
this packet that has been recorded so

786
00:43:10,510 --> 00:43:15,609
that's something which i think is also

787
00:43:13,089 --> 00:43:16,119
important for acceptance of efficient

788
00:43:15,609 --> 00:43:17,710
quick

789
00:43:16,119 --> 00:43:19,150
yes different tell me you go away if

790
00:43:17,710 --> 00:43:20,619
you're gonna cover this in minute so two

791
00:43:19,150 --> 00:43:23,320
questions came up and put this down

792
00:43:20,619 --> 00:43:25,089
number one is do you have a sense as to

793
00:43:23,320 --> 00:43:27,070
whether this scheme is more friendly to

794
00:43:25,089 --> 00:43:28,839
multipath than the old scheme my

795
00:43:27,070 --> 00:43:37,570
intuition says it is more friendly to

796
00:43:28,839 --> 00:43:41,070
multipath but I'm not sure yes maybe

797
00:43:37,570 --> 00:43:44,260
because there is this way yes so similar

798
00:43:41,070 --> 00:43:46,330
straddle several packets quick packets

799
00:43:44,260 --> 00:43:47,680
and if you send one on one side and

800
00:43:46,330 --> 00:43:50,020
you're the one on the other side maybe

801
00:43:47,680 --> 00:43:53,169
it will reduce the probability of having

802
00:43:50,020 --> 00:43:55,359
a packet loss that's involved so simple

803
00:43:53,170 --> 00:43:57,369
roses yeah especially if multipath has

804
00:43:55,359 --> 00:43:58,630
done not on a stream basis itself but on

805
00:43:57,369 --> 00:44:00,849
a packet basis huh

806
00:43:58,630 --> 00:44:02,230
the second thing is this recovery frame

807
00:44:00,849 --> 00:44:04,480
thinks is very nice have you thought

808
00:44:02,230 --> 00:44:07,390
about whether this also could be used to

809
00:44:04,480 --> 00:44:09,369
change the level of coding so that you

810
00:44:07,390 --> 00:44:12,759
get recovered frames in there's very few

811
00:44:09,369 --> 00:44:15,550
of them based on your current coding you

812
00:44:12,760 --> 00:44:19,180
might want to reduce the coding or

813
00:44:15,550 --> 00:44:21,640
increase it if the covered frames are

814
00:44:19,180 --> 00:44:24,419
showing a lot of recovered frames yes

815
00:44:21,640 --> 00:44:25,788
maybe it could be used to piggyback some

816
00:44:24,420 --> 00:44:29,930
statistics

817
00:44:25,789 --> 00:44:33,829
thus under more it could be done for in

818
00:44:29,930 --> 00:44:37,819
yes for help in the center setting the

819
00:44:33,829 --> 00:44:40,490
right cadre the right amount of repaired

820
00:44:37,819 --> 00:44:42,650
data that he wants to send maybe maybe

821
00:44:40,490 --> 00:44:44,808
that's something we work on but thanks

822
00:44:42,650 --> 00:44:47,539
yeah but anyway the goal was a bit

823
00:44:44,809 --> 00:44:49,819
different but yes we could take

824
00:44:47,539 --> 00:44:51,850
advantage of this for doing additional

825
00:44:49,819 --> 00:44:54,549
things yeah thank you

826
00:44:51,850 --> 00:45:00,680
[Music]

827
00:44:54,549 --> 00:45:03,980
so the the key point in all those in

828
00:45:00,680 --> 00:45:06,769
this work is the question I'll doing not

829
00:45:03,980 --> 00:45:09,460
quick packets to source symbols that's

830
00:45:06,769 --> 00:45:12,618
really the key aspects and there are

831
00:45:09,460 --> 00:45:15,140
several things to consider first of all

832
00:45:12,619 --> 00:45:18,289
of course the quick sauce packet is of

833
00:45:15,140 --> 00:45:22,670
variable size but we absolutely want to

834
00:45:18,289 --> 00:45:25,640
keep the symbol size fixed for the world

835
00:45:22,670 --> 00:45:28,460
ration of a quick connection because

836
00:45:25,640 --> 00:45:31,368
next things much simpler to manage

837
00:45:28,460 --> 00:45:34,490
within the encoder and decoder if we

838
00:45:31,369 --> 00:45:36,890
have this fixed property fixed size

839
00:45:34,490 --> 00:45:39,890
property so now the question that arises

840
00:45:36,890 --> 00:45:43,308
is what is the appropriate size for

841
00:45:39,890 --> 00:45:45,828
those symbols should we keep a perimeter

842
00:45:43,309 --> 00:45:48,109
and the big e perimeter is this so

843
00:45:45,829 --> 00:45:51,109
single size so should we keep a small

844
00:45:48,109 --> 00:45:53,450
symbol size should we use a larger civil

845
00:45:51,109 --> 00:45:55,808
size of course if we use larger assimil

846
00:45:53,450 --> 00:45:58,578
size that will be perhaps the

847
00:45:55,809 --> 00:46:01,099
opportunity to fit all the quick packet

848
00:45:58,579 --> 00:46:03,769
payload within a single so symbol mu so

849
00:46:01,099 --> 00:46:05,690
that makes things easier to manage but

850
00:46:03,769 --> 00:46:09,379
at the same time if we have variable

851
00:46:05,690 --> 00:46:11,900
size bluntly viable size sauce packets a

852
00:46:09,380 --> 00:46:14,329
lot of small sauce packets and from x

853
00:46:11,900 --> 00:46:15,319
times bigger sauce packets then it's a

854
00:46:14,329 --> 00:46:17,660
waste

855
00:46:15,319 --> 00:46:19,460
it will include it will generate more

856
00:46:17,660 --> 00:46:21,470
overhead transmission over it so there

857
00:46:19,460 --> 00:46:23,599
is a waste of efficiency from this point

858
00:46:21,470 --> 00:46:25,399
of view so we need to find balance there

859
00:46:23,599 --> 00:46:28,099
are small aspects to take into account

860
00:46:25,400 --> 00:46:31,130
to find the appropriate balance this is

861
00:46:28,099 --> 00:46:33,349
there is no single magic value for this

862
00:46:31,130 --> 00:46:35,359
symbol size will depends on the use case

863
00:46:33,349 --> 00:46:38,000
so we need to to have a better

864
00:46:35,359 --> 00:46:39,860
understanding of what type of data will

865
00:46:38,000 --> 00:46:42,260
be carried within this

866
00:46:39,860 --> 00:46:44,300
quick connection most probably so that's

867
00:46:42,260 --> 00:46:46,700
something that will not be fixed inside

868
00:46:44,300 --> 00:46:48,580
these documents into a generic framework

869
00:46:46,700 --> 00:46:51,850
that's something that remains to be

870
00:46:48,580 --> 00:46:53,660
adjusted based on the use case based on

871
00:46:51,850 --> 00:46:55,970
deployment considerations

872
00:46:53,660 --> 00:46:58,490
so it will be so but we have this

873
00:46:55,970 --> 00:47:01,850
flexibility to manage at the same time

874
00:46:58,490 --> 00:47:04,399
small or larger size since symbol size

875
00:47:01,850 --> 00:47:10,190
in this document that's what simple is

876
00:47:04,400 --> 00:47:13,340
most important so let me explain how we

877
00:47:10,190 --> 00:47:15,770
do this quick packets to source symbol

878
00:47:13,340 --> 00:47:18,170
mapping so that two steps the first step

879
00:47:15,770 --> 00:47:20,720
is the one that is now on his right it

880
00:47:18,170 --> 00:47:23,950
consists in segmenting quick packets

881
00:47:20,720 --> 00:47:28,689
quick packet payload in fact into chunks

882
00:47:23,950 --> 00:47:33,910
so the way we do that is the following

883
00:47:28,690 --> 00:47:36,980
we add first of all we add padding to

884
00:47:33,910 --> 00:47:42,440
packet payload in order to be a multiple

885
00:47:36,980 --> 00:47:47,420
of e minus one plus this a minus v

886
00:47:42,440 --> 00:47:49,790
initial chunk so we need to add this to

887
00:47:47,420 --> 00:47:54,410
have a multiple number of chunks well no

888
00:47:49,790 --> 00:47:57,290
sorry the the the padded sorry the

889
00:47:54,410 --> 00:48:01,100
padded length must be a multiple of e

890
00:47:57,290 --> 00:48:03,830
minus one and E minus five why does the

891
00:48:01,100 --> 00:48:08,060
difference between a minus 5 and E minus

892
00:48:03,830 --> 00:48:09,860
1 will be explained later the way we do

893
00:48:08,060 --> 00:48:13,490
that is by prepending

894
00:48:09,860 --> 00:48:16,400
packing frames to the payload so this

895
00:48:13,490 --> 00:48:21,830
the quic protocol has this nice feature

896
00:48:16,400 --> 00:48:24,640
that we can add padding and 1 byte 0 1 0

897
00:48:21,830 --> 00:48:29,930
bytes padding is itself a padding frame

898
00:48:24,640 --> 00:48:31,910
so this is a result value so by doing by

899
00:48:29,930 --> 00:48:34,279
putting this padding at the beginning

900
00:48:31,910 --> 00:48:36,819
rather than the end of the packet

901
00:48:34,280 --> 00:48:41,240
payload it makes it possible for decoder

902
00:48:36,820 --> 00:48:46,010
to skip all those padding frames even if

903
00:48:41,240 --> 00:48:47,569
the size of the frame is not specified

904
00:48:46,010 --> 00:48:49,960
on the other friend is not specified

905
00:48:47,570 --> 00:48:52,680
which is something which may happen so

906
00:48:49,960 --> 00:48:54,690
this is a bit complex but by

907
00:48:52,680 --> 00:48:56,419
that at the beginning of the parrot

908
00:48:54,690 --> 00:48:59,400
instead of at the end of the period

909
00:48:56,420 --> 00:49:01,710
removes this requirement to have an

910
00:48:59,400 --> 00:49:04,290
additional signalling film that will

911
00:49:01,710 --> 00:49:07,440
tell you how long it is how long the

912
00:49:04,290 --> 00:49:10,950
payload is so that - for the receiver to

913
00:49:07,440 --> 00:49:12,780
skip the final padding if we are doing

914
00:49:10,950 --> 00:49:16,200
that this way so it's something that is

915
00:49:12,780 --> 00:49:19,849
a quite efficient so we do that that

916
00:49:16,200 --> 00:49:24,029
padding and we then segment this padded

917
00:49:19,849 --> 00:49:25,829
packet payload into chunks so in this

918
00:49:24,030 --> 00:49:27,390
example we have three packets wick wick

919
00:49:25,829 --> 00:49:29,609
packets and as you can see there are

920
00:49:27,390 --> 00:49:32,040
four chunks for the first one three for

921
00:49:29,609 --> 00:49:32,640
the second and front ones so that's the

922
00:49:32,040 --> 00:49:34,650
first step

923
00:49:32,640 --> 00:49:36,629
we have chunks now so what do we do with

924
00:49:34,650 --> 00:49:38,520
chunks now we need to we need to do a

925
00:49:36,630 --> 00:49:40,619
mapping between chunks and source

926
00:49:38,520 --> 00:49:43,410
symbols and the way we do that is by

927
00:49:40,619 --> 00:49:45,480
prepending one bytes of metadata I will

928
00:49:43,410 --> 00:49:48,328
explain you what is inside this one byte

929
00:49:45,480 --> 00:49:50,099
metadata and then for the first chunk we

930
00:49:48,329 --> 00:49:51,540
have this additional packet number which

931
00:49:50,099 --> 00:49:54,119
is a quick packet number which is

932
00:49:51,540 --> 00:49:59,270
protected explicitly in the first row

933
00:49:54,119 --> 00:50:01,530
symbol of a quick packet so the

934
00:49:59,270 --> 00:50:04,520
association of this metadata press

935
00:50:01,530 --> 00:50:08,069
packet number press packet trunk is

936
00:50:04,520 --> 00:50:10,619
constitute this awesome so that's for

937
00:50:08,069 --> 00:50:12,960
the first chunk of a quick packet and

938
00:50:10,619 --> 00:50:15,359
the remaining chunks of sauce packets

939
00:50:12,960 --> 00:50:18,359
only this metadata there is no need to

940
00:50:15,359 --> 00:50:20,430
repeat the packets and number that will

941
00:50:18,359 --> 00:50:24,000
be anywhere protected by the previous

942
00:50:20,430 --> 00:50:25,558
awesome so in that case we simple is

943
00:50:24,000 --> 00:50:28,559
this method that I went back metadata

944
00:50:25,559 --> 00:50:32,760
press packet choke and all of these

945
00:50:28,559 --> 00:50:35,010
constitute disassemble so that's the way

946
00:50:32,760 --> 00:50:37,710
it works so now what we put inside this

947
00:50:35,010 --> 00:50:38,490
metadata byte well it's pretty simple

948
00:50:37,710 --> 00:50:41,339
there are three bytes

949
00:50:38,490 --> 00:50:43,470
sorry there are three bits that are used

950
00:50:41,339 --> 00:50:45,599
the first one is just to indicate the N

951
00:50:43,470 --> 00:50:48,359
field is just to indicate that there is

952
00:50:45,599 --> 00:50:53,760
a packet number that will follow four

953
00:50:48,359 --> 00:50:56,250
bytes packet number the s and E bits are

954
00:50:53,760 --> 00:50:58,559
there to seen all that okay this is the

955
00:50:56,250 --> 00:50:59,400
first chunk of a quick packets for the

956
00:50:58,559 --> 00:51:03,359
fatherís

957
00:50:59,400 --> 00:51:04,589
s start needs or the last chunk of a

958
00:51:03,359 --> 00:51:05,609
quick packet for the e

959
00:51:04,589 --> 00:51:09,599
bits

960
00:51:05,609 --> 00:51:11,308
and with this we can inform the decoder

961
00:51:09,599 --> 00:51:14,039
we can infer the receiver after decoding

962
00:51:11,309 --> 00:51:15,749
back okay that's the first chunk that's

963
00:51:14,039 --> 00:51:18,089
the last chunk those chunks are in the

964
00:51:15,749 --> 00:51:21,029
middle or maybe there's a single chunk

965
00:51:18,089 --> 00:51:22,859
for a given packet payload that's the

966
00:51:21,029 --> 00:51:25,499
only chunk because there will be at the

967
00:51:22,859 --> 00:51:28,259
same time the first and last bits that

968
00:51:25,499 --> 00:51:33,450
will be set so that's an easy way to do

969
00:51:28,259 --> 00:51:35,369
that and as I said I said number this is

970
00:51:33,450 --> 00:51:38,808
also important to add this quick packet

971
00:51:35,369 --> 00:51:42,119
number inside some of the chunks because

972
00:51:38,809 --> 00:51:44,339
no sorry not the tracks but the source

973
00:51:42,119 --> 00:51:48,989
symbols because it's something important

974
00:51:44,339 --> 00:51:52,049
for decoder to indicate what packets has

975
00:51:48,989 --> 00:51:53,249
been recovered by the FEC decoding

976
00:51:52,049 --> 00:51:55,440
process

977
00:51:53,249 --> 00:51:57,419
I remember that I is this recovered

978
00:51:55,440 --> 00:51:59,039
frame that will go to the sender to

979
00:51:57,420 --> 00:52:04,499
indicate to the sender that this frame

980
00:51:59,039 --> 00:52:06,869
has this packet has been decoded as been

981
00:52:04,499 --> 00:52:09,419
lost but decoded so we need to indicate

982
00:52:06,869 --> 00:52:11,999
to the receiver which packet it is and

983
00:52:09,420 --> 00:52:15,769
since the quick header is not protected

984
00:52:11,999 --> 00:52:19,169
by FEC itself we need to carry this

985
00:52:15,769 --> 00:52:21,238
information in some other way and we do

986
00:52:19,170 --> 00:52:23,190
that by including this quick packet

987
00:52:21,239 --> 00:52:26,759
number inside the first symbol of our

988
00:52:23,190 --> 00:52:28,230
packets so that's a trick to inform the

989
00:52:26,759 --> 00:52:30,690
decoder we went from the sender that

990
00:52:28,230 --> 00:52:33,299
this this packet and not another one has

991
00:52:30,690 --> 00:52:35,249
been recovered so that's why it's

992
00:52:33,299 --> 00:52:38,759
important so the big picture now which

993
00:52:35,249 --> 00:52:43,499
way so that we have this quick packet we

994
00:52:38,759 --> 00:52:45,690
do padding initial padding we split the

995
00:52:43,499 --> 00:52:48,779
contents of this packet payload plus

996
00:52:45,690 --> 00:52:52,529
padding into chunks in this example we

997
00:52:48,779 --> 00:52:55,230
have four tracks and then we create with

998
00:52:52,529 --> 00:52:57,660
this additional metadata and potentially

999
00:52:55,230 --> 00:52:59,880
for the first chunk for the first sample

1000
00:52:57,660 --> 00:53:03,149
the packet number we create those source

1001
00:52:59,880 --> 00:53:03,690
symbols and this way it's working it's

1002
00:53:03,150 --> 00:53:06,690
working

1003
00:53:03,690 --> 00:53:10,230
I just want to convince you that it's

1004
00:53:06,690 --> 00:53:13,829
working that's a an example so let's

1005
00:53:10,230 --> 00:53:15,839
imagine that in orange we received or

1006
00:53:13,829 --> 00:53:18,569
read accordion or maybe something is

1007
00:53:15,839 --> 00:53:19,680
missing several soft symbols at the

1008
00:53:18,569 --> 00:53:23,009
beginning and

1009
00:53:19,680 --> 00:53:25,140
for the for the for the last part and in

1010
00:53:23,010 --> 00:53:27,660
the middle at some point of time the

1011
00:53:25,140 --> 00:53:30,569
decoder can decode those for source

1012
00:53:27,660 --> 00:53:33,180
signals so by looking at the first pie

1013
00:53:30,570 --> 00:53:36,360
at the first bite of each source symbol

1014
00:53:33,180 --> 00:53:38,370
it will determine that for the first one

1015
00:53:36,360 --> 00:53:41,850
this is the first drink or the packet

1016
00:53:38,370 --> 00:53:44,100
for the last so simple it really

1017
00:53:41,850 --> 00:53:47,040
determined at this last one and was to

1018
00:53:44,100 --> 00:53:49,319
in the middle just in window so it will

1019
00:53:47,040 --> 00:53:52,320
determine all of this and you will be

1020
00:53:49,320 --> 00:53:55,170
able to construct by removing those

1021
00:53:52,320 --> 00:53:58,110
additional bytes M meta data bytes

1022
00:53:55,170 --> 00:54:01,590
remove that but you will reconstruct the

1023
00:53:58,110 --> 00:54:03,810
original quick packets and be able to do

1024
00:54:01,590 --> 00:54:08,670
what he has to do with this recovered

1025
00:54:03,810 --> 00:54:11,009
sauce packet quick sauce packets so it

1026
00:54:08,670 --> 00:54:16,410
explains why we need to add two

1027
00:54:11,010 --> 00:54:19,620
additional metadata stuff then we change

1028
00:54:16,410 --> 00:54:22,080
just a little bit the the original quick

1029
00:54:19,620 --> 00:54:25,549
packets with this approach we need to

1030
00:54:22,080 --> 00:54:27,660
carry this additional fact sauce FBI

1031
00:54:25,550 --> 00:54:30,300
fact payload information so that's

1032
00:54:27,660 --> 00:54:32,640
signaling information that we need to

1033
00:54:30,300 --> 00:54:34,560
put inside the original quick packets

1034
00:54:32,640 --> 00:54:36,930
but carries sauce packets the source

1035
00:54:34,560 --> 00:54:39,120
data or a journal data to the send to

1036
00:54:36,930 --> 00:54:43,230
the receiver we need to do that just to

1037
00:54:39,120 --> 00:54:48,600
the receiver decoder okay that's that

1038
00:54:43,230 --> 00:54:51,000
quick packet carries this do so symbols

1039
00:54:48,600 --> 00:54:54,450
we have this awesome or identifier that

1040
00:54:51,000 --> 00:54:57,450
is typically inside this additional

1041
00:54:54,450 --> 00:55:00,180
frame if we are dealing with block codes

1042
00:54:57,450 --> 00:55:02,640
maybe we will also have an indication of

1043
00:55:00,180 --> 00:55:05,190
an identification of the block it

1044
00:55:02,640 --> 00:55:07,230
corresponds to for the few things like

1045
00:55:05,190 --> 00:55:10,110
that that we need to be that needs to be

1046
00:55:07,230 --> 00:55:11,970
carried inside quick packets original

1047
00:55:10,110 --> 00:55:15,720
should quick packets and concerning the

1048
00:55:11,970 --> 00:55:16,649
repair frames we can transmit them in

1049
00:55:15,720 --> 00:55:21,629
additional

1050
00:55:16,650 --> 00:55:23,460
quick packets we can perhaps put several

1051
00:55:21,630 --> 00:55:25,680
with their frames together inside the

1052
00:55:23,460 --> 00:55:28,380
same quick packet it's not a big deal it

1053
00:55:25,680 --> 00:55:31,540
is small enough if E is small enough to

1054
00:55:28,380 --> 00:55:33,850
be able to let it's not a big deal

1055
00:55:31,540 --> 00:55:37,509
and those a repair friends will be

1056
00:55:33,850 --> 00:55:39,850
identified as such I added catchy repair

1057
00:55:37,510 --> 00:55:41,590
frame identified so it's

1058
00:55:39,850 --> 00:55:43,180
backward-compatible both of them and

1059
00:55:41,590 --> 00:55:45,700
backward compatible but because a

1060
00:55:43,180 --> 00:55:48,460
receiver that does not know anything

1061
00:55:45,700 --> 00:55:53,140
about offici will skip those frames and

1062
00:55:48,460 --> 00:55:57,670
that's that's it so there are few open

1063
00:55:53,140 --> 00:56:03,069
points one of them being the possibility

1064
00:55:57,670 --> 00:56:08,230
perhaps to ignore some of the friends in

1065
00:56:03,070 --> 00:56:13,690
this process because these frames are

1066
00:56:08,230 --> 00:56:15,900
not that important from the we can avoid

1067
00:56:13,690 --> 00:56:19,350
protecting them with the fishing

1068
00:56:15,900 --> 00:56:25,660
techniques that's the case of perhaps

1069
00:56:19,350 --> 00:56:28,270
acknowledgement frames so and it also be

1070
00:56:25,660 --> 00:56:31,720
the case for non real-time non the less

1071
00:56:28,270 --> 00:56:36,030
sensitive streams maybe so we may want

1072
00:56:31,720 --> 00:56:38,799
to do that I'm not totally sure it's

1073
00:56:36,030 --> 00:56:41,470
important in any case if we want to do

1074
00:56:38,800 --> 00:56:43,330
that it means that we need to inform the

1075
00:56:41,470 --> 00:56:45,430
receiver we need to keep both encoder

1076
00:56:43,330 --> 00:56:48,400
and decoder synchronized so it means

1077
00:56:45,430 --> 00:56:50,169
additional signalling and at the moment

1078
00:56:48,400 --> 00:56:51,820
we don't really know how to do this

1079
00:56:50,170 --> 00:56:54,250
additional signal and so there are point

1080
00:56:51,820 --> 00:56:59,520
questions yeah this is something that

1081
00:56:54,250 --> 00:57:03,880
needs to be experimenting implementing

1082
00:56:59,520 --> 00:57:05,890
we need to have more background more

1083
00:57:03,880 --> 00:57:07,930
information more thoughts on those or

1084
00:57:05,890 --> 00:57:11,250
techniques if we really want to do that

1085
00:57:07,930 --> 00:57:14,319
otherwise we protect the full payload

1086
00:57:11,250 --> 00:57:17,200
quick packet so it's say always possible

1087
00:57:14,320 --> 00:57:18,760
there's also this choice of this symbol

1088
00:57:17,200 --> 00:57:22,390
size parameter that's I already

1089
00:57:18,760 --> 00:57:25,210
mentioned next next things to be done

1090
00:57:22,390 --> 00:57:27,069
well we need to add 8 the IOC for quick

1091
00:57:25,210 --> 00:57:28,390
documents we need not have time to do

1092
00:57:27,070 --> 00:57:30,820
that presently switched you're

1093
00:57:28,390 --> 00:57:33,970
compatible with its general France in

1094
00:57:30,820 --> 00:57:35,800
the previous version of this framework

1095
00:57:33,970 --> 00:57:37,600
document so that's something neatly done

1096
00:57:35,800 --> 00:57:39,310
and of course we need to experiment and

1097
00:57:37,600 --> 00:57:41,759
from this point of view from this point

1098
00:57:39,310 --> 00:57:46,210
we do Swift connect will be quite useful

1099
00:57:41,760 --> 00:57:52,540
that's all drift attorneys talk there's

1100
00:57:46,210 --> 00:57:54,160
a Francois will discuss about neon

1101
00:57:52,540 --> 00:58:00,000
progress in plantation reference

1102
00:57:54,160 --> 00:58:02,319
implementation for these yes sir again

1103
00:58:00,000 --> 00:58:05,650
be a little bit cautious about not

1104
00:58:02,320 --> 00:58:09,790
protecting acts I think if you look at

1105
00:58:05,650 --> 00:58:14,140
the net impact on performance it may be

1106
00:58:09,790 --> 00:58:16,029
more so than you imagined okay yeah this

1107
00:58:14,140 --> 00:58:19,480
is something that we discussed quickly

1108
00:58:16,030 --> 00:58:22,630
with a young sweat trio Jeff there was

1109
00:58:19,480 --> 00:58:25,000
some belief that could make sense to

1110
00:58:22,630 --> 00:58:28,840
avoid protecting them but well that's

1111
00:58:25,000 --> 00:58:31,410
another point for Jess so I'm scratching

1112
00:58:28,840 --> 00:58:34,960
my head about one thing

1113
00:58:31,410 --> 00:58:39,210
the presentation is seems to be it seems

1114
00:58:34,960 --> 00:58:42,580
to be oriented toward systemic codes and

1115
00:58:39,210 --> 00:58:44,770
so it's actually you do or replaying

1116
00:58:42,580 --> 00:58:47,259
support nonsense systemic codes and if

1117
00:58:44,770 --> 00:58:51,610
so what happens just all the packets or

1118
00:58:47,260 --> 00:58:54,100
repair packets by default we have in

1119
00:58:51,610 --> 00:58:57,100
mind this systematic approach works and

1120
00:58:54,100 --> 00:58:59,620
both the source and the Republicans but

1121
00:58:57,100 --> 00:59:01,420
if we want to avoid sending sauce

1122
00:58:59,620 --> 00:59:03,100
packets it's not a big deal it's just a

1123
00:59:01,420 --> 00:59:08,650
matter of producing more repair targets

1124
00:59:03,100 --> 00:59:10,540
and sending more about that gets so yeah

1125
00:59:08,650 --> 00:59:12,250
it seems straightforward just because

1126
00:59:10,540 --> 00:59:13,779
some of the description basically said

1127
00:59:12,250 --> 00:59:17,110
well you know I don't need to worry

1128
00:59:13,780 --> 00:59:20,530
about the repair packets right but if

1129
00:59:17,110 --> 00:59:23,860
it's a yeah yeah everything's in a

1130
00:59:20,530 --> 00:59:25,510
repair okay I always mentioning thank

1131
00:59:23,860 --> 00:59:26,830
you yeah intuitively it seems like

1132
00:59:25,510 --> 00:59:32,170
everything was okay but I just want to

1133
00:59:26,830 --> 00:59:34,330
check I think the assumption it is that

1134
00:59:32,170 --> 00:59:39,340
it is a systematic code it's because it

1135
00:59:34,330 --> 00:59:40,990
helps so much of the decoding so true so

1136
00:59:39,340 --> 00:59:42,700
that I think it's not a bad assumption

1137
00:59:40,990 --> 00:59:46,180
but I agree with you it should be much

1138
00:59:42,700 --> 00:59:48,069
it should be generic it's just nice if

1139
00:59:46,180 --> 00:59:52,359
we check and make sure we haven't done

1140
00:59:48,070 --> 00:59:54,470
something you know like silly that makes

1141
00:59:52,360 --> 00:59:56,270
non-systematic hose not work

1142
00:59:54,470 --> 00:59:58,549
when it doesn't you know when you could

1143
00:59:56,270 --> 01:00:04,220
have done something just as easy and

1144
00:59:58,550 --> 01:00:05,690
they both yeah okay Thank You Brandon

1145
01:00:04,220 --> 01:00:08,689
Williams aye

1146
01:00:05,690 --> 01:00:10,579
I don't get a clear indication of

1147
01:00:08,690 --> 01:00:15,369
whether you've looked really carefully

1148
01:00:10,579 --> 01:00:20,960
at how well this approach aligns with

1149
01:00:15,369 --> 01:00:23,960
the API approach in any other any other

1150
01:00:20,960 --> 01:00:28,280
document does it did you do you see any

1151
01:00:23,960 --> 01:00:39,800
challenges presented from the API should

1152
01:00:28,280 --> 01:00:43,369
be able to be Bafa separates documents

1153
01:00:39,800 --> 01:00:47,329
for different aspects or the same big

1154
01:00:43,369 --> 01:00:50,780
picture I don't see I don't think there

1155
01:00:47,329 --> 01:00:56,119
is a much dependency on that if you need

1156
01:00:50,780 --> 01:01:00,819
to just know what wasn't clear whether

1157
01:00:56,119 --> 01:01:03,680
any anything fell out of sort of the

1158
01:01:00,819 --> 01:01:07,550
quick specific discussions that might

1159
01:01:03,680 --> 01:01:09,470
drive drive any change I don t think so

1160
01:01:07,550 --> 01:01:12,319
at the moment I saw some that's not like

1161
01:01:09,470 --> 01:01:15,500
a validation of the API yes but the idea

1162
01:01:12,319 --> 01:01:17,750
to to ever to use this API and switch

1163
01:01:15,500 --> 01:01:22,450
connect inside existing C

1164
01:01:17,750 --> 01:01:25,250
implementations of quick and John Porter

1165
01:01:22,450 --> 01:01:28,220
quick observation that at least as we

1166
01:01:25,250 --> 01:01:31,670
presented it N equals s so it's

1167
01:01:28,220 --> 01:01:33,980
redundant there's a systematic a non

1168
01:01:31,670 --> 01:01:35,869
systematic code would that help in this

1169
01:01:33,980 --> 01:01:38,180
context idea was brought earlier of

1170
01:01:35,869 --> 01:01:39,829
being able to adapt how much code extra

1171
01:01:38,180 --> 01:01:41,419
coding you're putting in because I'm

1172
01:01:39,829 --> 01:01:44,359
definitely interested in that because of

1173
01:01:41,420 --> 01:01:45,920
my latency over satellite that has the

1174
01:01:44,359 --> 01:01:48,740
error if I go into rain fade can I

1175
01:01:45,920 --> 01:01:51,680
increase the coding on the fly if I can

1176
01:01:48,740 --> 01:01:53,359
detect I have a higher loss rate etc the

1177
01:01:51,680 --> 01:01:54,980
it I'm assuming it's gonna depend

1178
01:01:53,359 --> 01:01:58,130
somewhat on which code you pick on how

1179
01:01:54,980 --> 01:02:01,280
easy it is hard to do that it depends on

1180
01:01:58,130 --> 01:02:02,990
the nature and the code with a sweet fun

1181
01:02:01,280 --> 01:02:05,390
slanging window codes it's pretty easy

1182
01:02:02,990 --> 01:02:06,939
to add more repair packets it's just a

1183
01:02:05,390 --> 01:02:09,700
matter of creating if you

1184
01:02:06,940 --> 01:02:12,460
new linear combination of what is at the

1185
01:02:09,700 --> 01:02:16,328
moment inside the training coding window

1186
01:02:12,460 --> 01:02:19,240
and send it so it's pretty easy with

1187
01:02:16,329 --> 01:02:23,440
also code star constraints okay

1188
01:02:19,240 --> 01:02:27,279
but yes we have this Plex ability to use

1189
01:02:23,440 --> 01:02:31,210
whatever we want in terms of code inside

1190
01:02:27,280 --> 01:02:34,839
the this quick protocol so at least this

1191
01:02:31,210 --> 01:02:36,460
is the way we want to design it so so

1192
01:02:34,839 --> 01:02:38,078
this we just want to make sure there's

1193
01:02:36,460 --> 01:02:48,869
some flexibility what kind of

1194
01:02:38,079 --> 01:02:53,260
information you could pass back okay

1195
01:02:48,869 --> 01:02:58,270
this looks like it probably constrains

1196
01:02:53,260 --> 01:03:01,030
us to if we're doing hybrid air q2 doing

1197
01:02:58,270 --> 01:03:03,609
type 1 doesn't look like it would

1198
01:03:01,030 --> 01:03:06,400
support a type 2 or am I missing

1199
01:03:03,609 --> 01:03:11,130
something and thanked 1 and type 2 what

1200
01:03:06,400 --> 01:03:15,339
do you refer to type 2 would be an

1201
01:03:11,130 --> 01:03:18,700
incremental redundancy hybrid a RQ where

1202
01:03:15,339 --> 01:03:22,900
additional repair packets are sent in

1203
01:03:18,700 --> 01:03:25,569
response to an ack as opposed to repair

1204
01:03:22,900 --> 01:03:26,859
packets are you just pick a priori how

1205
01:03:25,569 --> 01:03:29,980
many you're going to send and perhaps

1206
01:03:26,859 --> 01:03:32,500
adapt at least by the number in that

1207
01:03:29,980 --> 01:03:37,000
case if I remember and I understand

1208
01:03:32,500 --> 01:03:39,040
correctly those additional repair kits

1209
01:03:37,000 --> 01:03:43,270
are referring to the ones that have been

1210
01:03:39,040 --> 01:03:46,089
identified as being lost no try to

1211
01:03:43,270 --> 01:03:48,579
figuring out what it means well so

1212
01:03:46,089 --> 01:03:50,710
there's no actual retransmission so

1213
01:03:48,579 --> 01:03:52,690
perhaps a RQ becomes a misnomer in this

1214
01:03:50,710 --> 01:03:55,000
case it's just a matter of sending

1215
01:03:52,690 --> 01:03:58,660
additional repair packets in sufficient

1216
01:03:55,000 --> 01:04:00,400
numbers to allow for essentially

1217
01:03:58,660 --> 01:04:04,180
increasing dynamically the error

1218
01:04:00,400 --> 01:04:06,790
correcting capacity of the code yeah the

1219
01:04:04,180 --> 01:04:08,529
only constraints in that case is to

1220
01:04:06,790 --> 01:04:11,099
manage this lining window in an

1221
01:04:08,530 --> 01:04:13,450
appropriate way because once this all

1222
01:04:11,099 --> 01:04:15,339
packets have been removed from the

1223
01:04:13,450 --> 01:04:19,720
sliding window and then there's nowhere

1224
01:04:15,339 --> 01:04:20,900
for the encoder to produce repair CMOS

1225
01:04:19,720 --> 01:04:24,839
really

1226
01:04:20,900 --> 01:04:29,370
protecting news packets so it's not more

1227
01:04:24,840 --> 01:04:32,010
a matter of using correctly those FEC

1228
01:04:29,370 --> 01:04:35,009
codes if we are discussing that signing

1229
01:04:32,010 --> 01:04:36,890
window cuts than anything else it's a

1230
01:04:35,010 --> 01:04:39,510
matter of choosing it in the right way

1231
01:04:36,890 --> 01:04:41,040
compared to what we what are your

1232
01:04:39,510 --> 01:04:42,900
requirements yeah

1233
01:04:41,040 --> 01:04:44,580
so they've written somebody's made a

1234
01:04:42,900 --> 01:04:47,910
nice comment and it's just sort of flew

1235
01:04:44,580 --> 01:04:50,390
by which is um the way you've described

1236
01:04:47,910 --> 01:04:52,770
the encoding s and n bits are redundant

1237
01:04:50,390 --> 01:04:56,490
because you can only put set the N bit

1238
01:04:52,770 --> 01:04:58,200
if the S bit is set and it's invalid to

1239
01:04:56,490 --> 01:05:00,479
have a packet with the S bits that and

1240
01:04:58,200 --> 01:05:02,129
not the end bit set what I mean is

1241
01:05:00,480 --> 01:05:05,100
there's some kind of activity there that

1242
01:05:02,130 --> 01:05:08,250
you meant to describe and didn't yes the

1243
01:05:05,100 --> 01:05:12,630
N bit which which means that okay there

1244
01:05:08,250 --> 01:05:17,070
will be this I get another identifier

1245
01:05:12,630 --> 01:05:19,830
inside this or symbol is something for

1246
01:05:17,070 --> 01:05:22,170
which I don't have a clear idea at the

1247
01:05:19,830 --> 01:05:25,350
moment is it option or not I'm in the

1248
01:05:22,170 --> 01:05:27,600
slides I mentioned optional that's

1249
01:05:25,350 --> 01:05:34,529
something we need to discuss and figure

1250
01:05:27,600 --> 01:05:36,150
out saying the the the packet number is

1251
01:05:34,530 --> 01:05:38,280
always in the first packet which is so

1252
01:05:36,150 --> 01:05:45,030
yeah yeah yeah and it's an error

1253
01:05:38,280 --> 01:05:49,470
yeah some other chunk have I mentioned

1254
01:05:45,030 --> 01:05:54,210
yeah it's it's optional but this is

1255
01:05:49,470 --> 01:05:55,919
something we need to yes at the moment

1256
01:05:54,210 --> 01:05:57,300
we have this in mind but maybe it's a

1257
01:05:55,920 --> 01:06:01,770
mistake that's something we need to

1258
01:05:57,300 --> 01:06:04,830
discuss and evaluate is it really all

1259
01:06:01,770 --> 01:06:06,900
the time is it all the time required to

1260
01:06:04,830 --> 01:06:08,279
have it all that you know that's only

1261
01:06:06,900 --> 01:06:13,640
point but I should have mentioned this

1262
01:06:08,280 --> 01:06:13,640
in this yeah good good

1263
01:06:20,460 --> 01:06:33,940
yeah yeah no okay but yeah that's the

1264
01:06:32,350 --> 01:06:38,980
point an additional point point that I

1265
01:06:33,940 --> 01:06:44,100
should mention is yes sure we don't

1266
01:06:38,980 --> 01:06:46,780
claim to we have fixed all the problems

1267
01:06:44,100 --> 01:06:49,390
especially when we see how many

1268
01:06:46,780 --> 01:06:56,560
discussions life description dying the

1269
01:06:49,390 --> 01:06:59,470
quick show is a working group so you

1270
01:06:56,560 --> 01:07:01,299
know we are in between us I will say but

1271
01:06:59,470 --> 01:07:03,549
once we go to a quick working group

1272
01:07:01,300 --> 01:07:05,860
there will be many many more comments on

1273
01:07:03,550 --> 01:07:07,780
the specific aspects so we need to

1274
01:07:05,860 --> 01:07:11,400
clarify all of them as much as possible

1275
01:07:07,780 --> 01:07:18,150
and we'll see after and surely the

1276
01:07:11,400 --> 01:07:22,170
number is one of them yes okay thank you

1277
01:07:18,150 --> 01:07:25,720
so now I will if the floor to Francois

1278
01:07:22,170 --> 01:07:33,270
will talk about is interpretation of all

1279
01:07:25,720 --> 01:07:39,540
of this can you hear me yes okay great

1280
01:07:33,270 --> 01:07:39,540
wait wait wait I need to show this light

1281
01:07:45,060 --> 01:07:59,259
it's not a big deal okay so they're

1282
01:07:56,920 --> 01:08:01,330
coding for quick current working

1283
01:07:59,260 --> 01:08:06,220
progress reference implementation so

1284
01:08:01,330 --> 01:08:08,080
next slide so compared to the promised

1285
01:08:06,220 --> 01:08:11,350
version the draft has changed quite a

1286
01:08:08,080 --> 01:08:13,630
lot and at the same time we had a no

1287
01:08:11,350 --> 01:08:17,049
made version of an implementation of a

1288
01:08:13,630 --> 01:08:21,130
fake extension or quick that we made but

1289
01:08:17,049 --> 01:08:23,529
that was based on no version of of a

1290
01:08:21,130 --> 01:08:26,589
quick implementation and it was also in

1291
01:08:23,529 --> 01:08:29,259
the multipath extension so it was quite

1292
01:08:26,589 --> 01:08:32,109
complicated to maintain and complicated

1293
01:08:29,260 --> 01:08:32,670
to make evolve so we decided to propose

1294
01:08:32,109 --> 01:08:36,690
a new

1295
01:08:32,670 --> 01:08:39,509
fermentation from scratch and whose goal

1296
01:08:36,689 --> 01:08:42,960
is to be simple easy to learn and to

1297
01:08:39,509 --> 01:08:46,109
play with and the goal is also to stay

1298
01:08:42,960 --> 01:08:48,810
up to date with the draft specification

1299
01:08:46,109 --> 01:08:52,230
and also with the the base quick

1300
01:08:48,810 --> 01:08:55,859
indentation which is quick googly so

1301
01:08:52,229 --> 01:08:57,899
next time and so if you want to check

1302
01:08:55,859 --> 01:09:02,009
the source codes it's available on

1303
01:08:57,899 --> 01:09:04,528
github the slide are also on the NW c RG

1304
01:09:02,009 --> 01:09:07,620
github so you will be able to get the

1305
01:09:04,529 --> 01:09:09,870
link there currently the implementation

1306
01:09:07,620 --> 01:09:13,380
only supports a block code

1307
01:09:09,870 --> 01:09:16,469
it's easier and the RSC specification is

1308
01:09:13,380 --> 01:09:18,230
still evolving we currently provide a

1309
01:09:16,469 --> 01:09:21,870
simple kisara

1310
01:09:18,229 --> 01:09:27,509
and we already use the recovered frame

1311
01:09:21,870 --> 01:09:29,429
as I explained and so currently what we

1312
01:09:27,509 --> 01:09:31,830
are doing is that we are not protecting

1313
01:09:29,429 --> 01:09:35,549
add frames so we can discuss about that

1314
01:09:31,830 --> 01:09:37,559
you are stepping out of the or the

1315
01:09:35,549 --> 01:09:41,569
packet payload we protect the packet

1316
01:09:37,560 --> 01:09:46,699
payload and the implementation is

1317
01:09:41,569 --> 01:09:46,699
closely tied the design of the draft

1318
01:09:48,380 --> 01:09:54,840
frame with you you can fight them to

1319
01:09:51,540 --> 01:09:58,920
have a block that has a different format

1320
01:09:54,840 --> 01:10:05,489
deeper frame and fixity it is the same

1321
01:09:58,920 --> 01:10:09,330
for the recalls next so if you want a

1322
01:10:05,489 --> 01:10:12,178
simple example say that you can see

1323
01:10:09,330 --> 01:10:15,750
green onion type implement read

1324
01:10:12,179 --> 01:10:17,489
functions and you should be able to to

1325
01:10:15,750 --> 01:10:19,080
make it work so for example you can

1326
01:10:17,489 --> 01:10:21,089
decide to implement a block-based

1327
01:10:19,080 --> 01:10:24,000
already currently and you can also

1328
01:10:21,090 --> 01:10:25,980
decide to implement convolution of skins

1329
01:10:24,000 --> 01:10:30,660
and stuff but it's a little bit more

1330
01:10:25,980 --> 01:10:31,349
complicated and excite so what do we do

1331
01:10:30,660 --> 01:10:34,019
next

1332
01:10:31,350 --> 01:10:36,810
so first to add a sliding window fix

1333
01:10:34,020 --> 01:10:39,840
scheme and also wire the code with the

1334
01:10:36,810 --> 01:10:42,000
swift codec what's it done we would like

1335
01:10:39,840 --> 01:10:44,010
to add a proper test shoot so currently

1336
01:10:42,000 --> 01:10:45,810
the the quick go test shoot is still

1337
01:10:44,010 --> 01:10:46,320
working but we would like to add new

1338
01:10:45,810 --> 01:10:50,130
unit

1339
01:10:46,320 --> 01:10:52,320
- to test the extension and we would

1340
01:10:50,130 --> 01:10:54,900
also like to move forward in a general

1341
01:10:52,320 --> 01:10:56,969
way to have a more clever simple

1342
01:10:54,900 --> 01:10:59,160
scheduling because currently it works

1343
01:10:56,970 --> 01:11:03,330
but it's not really efficient because we

1344
01:10:59,160 --> 01:11:05,280
do not do things very cleverly and we

1345
01:11:03,330 --> 01:11:06,690
can also try to run wire new

1346
01:11:05,280 --> 01:11:09,570
applications about the implementation

1347
01:11:06,690 --> 01:11:12,089
because we chose a quick go because it's

1348
01:11:09,570 --> 01:11:14,670
an implementation that provides the rich

1349
01:11:12,090 --> 01:11:17,810
API which is easy to use and play with

1350
01:11:14,670 --> 01:11:21,480
so that's something we already try to do

1351
01:11:17,810 --> 01:11:22,830
next slide and so finally there is a

1352
01:11:21,480 --> 01:11:25,110
list of other interesting

1353
01:11:22,830 --> 01:11:27,120
implementations to look at so there is

1354
01:11:25,110 --> 01:11:30,120
first a quick which will be presented in

1355
01:11:27,120 --> 01:11:32,309
less than five minutes and finally we

1356
01:11:30,120 --> 01:11:35,070
will also present another quick

1357
01:11:32,310 --> 01:11:37,830
implementation at signal 19 which is

1358
01:11:35,070 --> 01:11:41,370
done with the paper which basically

1359
01:11:37,830 --> 01:11:44,670
revisits the way on how we can deploy in

1360
01:11:41,370 --> 01:11:45,900
a complex extension such as effect so

1361
01:11:44,670 --> 01:11:49,170
the the source code of this

1362
01:11:45,900 --> 01:11:51,990
implementation will also be publicly

1363
01:11:49,170 --> 01:11:54,150
available so you can stay tuned and you

1364
01:11:51,990 --> 01:11:56,820
can get access to it after your sitcom

1365
01:11:54,150 --> 01:12:02,849
so next slide so thank you very much and

1366
01:11:56,820 --> 01:12:13,740
feel free to ask your questions if you

1367
01:12:02,850 --> 01:12:19,560
are also just 100 mean name to me

1368
01:12:13,740 --> 01:12:21,630
oh we have the old one we have this new

1369
01:12:19,560 --> 01:12:24,480
one and we have the the one for for

1370
01:12:21,630 --> 01:12:29,340
sitcom so three bands but the old one I

1371
01:12:24,480 --> 01:12:31,910
think will get rid of it okay you you

1372
01:12:29,340 --> 01:12:34,110
always to continue with the quick go

1373
01:12:31,910 --> 01:12:37,470
implementation to maintain it as the

1374
01:12:34,110 --> 01:12:40,799
main reference implementation yes this

1375
01:12:37,470 --> 01:12:46,740
one and the second one the the destroyer

1376
01:12:40,800 --> 01:12:50,990
and that it is one and the cecum so the

1377
01:12:46,740 --> 01:12:50,990
quick go and the seeker go though okay

1378
01:12:54,920 --> 01:13:04,969
no comment no question so no okay so

1379
01:12:59,810 --> 01:13:07,310
Thank You Francois and keep it in touch

1380
01:13:04,969 --> 01:13:10,070
and if you have a new resource

1381
01:13:07,310 --> 01:13:13,360
experimental results on excite here you

1382
01:13:10,070 --> 01:13:13,360
will be welcome of course

1383
01:13:33,699 --> 01:13:39,799
okay so next presentation is for our

1384
01:13:37,070 --> 01:13:46,549
quick and was a quick and fake approach

1385
01:13:39,800 --> 01:13:55,119
so me I can you hear me can you go on

1386
01:13:46,550 --> 01:13:55,119
the night we are waiting for you

1387
01:14:03,240 --> 01:14:17,130
or Josue or somebody can you click the

1388
01:14:07,950 --> 01:14:21,990
button so you start talking to us okay

1389
01:14:17,130 --> 01:14:24,420
in the news you're on the lists we can

1390
01:14:21,990 --> 01:14:27,210
see you on meta group but without the

1391
01:14:24,420 --> 01:14:35,310
action from you we won't be able to give

1392
01:14:27,210 --> 01:14:45,330
you the flow so go ask the mic on

1393
01:14:35,310 --> 01:14:47,790
mythical okay so we are going to swap

1394
01:14:45,330 --> 01:14:49,519
the last two presentations so now

1395
01:14:47,790 --> 01:14:51,810
managers they will talk about

1396
01:14:49,520 --> 01:14:55,470
relationship with other initiatives and

1397
01:14:51,810 --> 01:14:58,310
then we will come back to you nice okay

1398
01:14:55,470 --> 01:15:06,180
I don't know if you can hear me but

1399
01:14:58,310 --> 01:15:11,640
let's do that okay so like I said at the

1400
01:15:06,180 --> 01:15:14,820
beginning there was a strong I think

1401
01:15:11,640 --> 01:15:18,270
need and a strong opinion about starting

1402
01:15:14,820 --> 01:15:20,099
to link a lot of groups together and you

1403
01:15:18,270 --> 01:15:22,440
know we're essentially a service for in

1404
01:15:20,100 --> 01:15:24,660
the network so we obviously have links

1405
01:15:22,440 --> 01:15:26,400
to other people and there's other groups

1406
01:15:24,660 --> 01:15:29,990
who are looking at ways of implementing

1407
01:15:26,400 --> 01:15:32,580
the coding so obviously they also have

1408
01:15:29,990 --> 01:15:36,000
implement well issues or they actually

1409
01:15:32,580 --> 01:15:42,900
have related issues so they are gonna

1410
01:15:36,000 --> 01:15:47,550
get so we've had it's sad that they've

1411
01:15:42,900 --> 01:15:50,250
just left but we've had a long-running

1412
01:15:47,550 --> 01:15:52,410
relationship with ICN RG which dates

1413
01:15:50,250 --> 01:15:55,950
back to a paper I wrote about ten years

1414
01:15:52,410 --> 01:15:58,880
ago and this led to this idea of network

1415
01:15:55,950 --> 01:16:01,139
coding for content centric networking

1416
01:15:58,880 --> 01:16:02,940
requirements and challenges there's the

1417
01:16:01,140 --> 01:16:06,440
draft that was discussed at the

1418
01:16:02,940 --> 01:16:10,320
beginning and it is going to be a joint

1419
01:16:06,440 --> 01:16:13,589
that we're coding and I see NRG RFC when

1420
01:16:10,320 --> 01:16:16,280
it comes to that and it's it's been

1421
01:16:13,590 --> 01:16:19,380
reviewed as

1422
01:16:16,280 --> 01:16:22,050
they saw mentioned but this is has been

1423
01:16:19,380 --> 01:16:23,820
I think one example of a relationship

1424
01:16:22,050 --> 01:16:25,500
that has worked really well between the

1425
01:16:23,820 --> 01:16:27,449
two groups and there was a bit of a

1426
01:16:25,500 --> 01:16:30,210
win-win because it showed that you could

1427
01:16:27,449 --> 01:16:32,369
implement and that were coding inside a

1428
01:16:30,210 --> 01:16:37,860
information centric network so that was

1429
01:16:32,369 --> 01:16:40,500
very nice coin this is really new coin

1430
01:16:37,860 --> 01:16:44,690
we had a coin with my other co-chair

1431
01:16:40,500 --> 01:16:47,940
group and we had a hackathon on Saturday

1432
01:16:44,690 --> 01:16:50,489
where we started looking at things that

1433
01:16:47,940 --> 01:16:53,638
could be done with p4 which is this

1434
01:16:50,489 --> 01:16:56,839
language allows you to program low level

1435
01:16:53,639 --> 01:17:00,329
switching and there's actually a group

1436
01:16:56,840 --> 01:17:03,719
with Salvatori Signorelli and his team

1437
01:17:00,329 --> 01:17:06,599
and Lisbon are actually low looking at

1438
01:17:03,719 --> 01:17:08,849
an implementation of network coding in

1439
01:17:06,599 --> 01:17:10,889
p4 which was one of the projects that I

1440
01:17:08,849 --> 01:17:16,199
had on my list actually it's fun that

1441
01:17:10,889 --> 01:17:18,929
they're doing it and this also is

1442
01:17:16,199 --> 01:17:22,138
interesting for another reason

1443
01:17:18,929 --> 01:17:25,079
that it will prove that the ideas of

1444
01:17:22,139 --> 01:17:27,599
doing re-encoding in switches inside the

1445
01:17:25,079 --> 01:17:29,579
network can be done really fast so that

1446
01:17:27,599 --> 01:17:35,489
could be interesting results they were

1447
01:17:29,579 --> 01:17:37,650
not ready for this IETF they are going

1448
01:17:35,489 --> 01:17:39,449
to upload their paper and they want to

1449
01:17:37,650 --> 01:17:42,629
write a draft on it and it's going to be

1450
01:17:39,449 --> 01:17:44,789
a joint coin network coding draft so it

1451
01:17:42,630 --> 01:17:47,460
will be submitted in both groups and we

1452
01:17:44,789 --> 01:17:50,369
hope that it's going to be presented in

1453
01:17:47,460 --> 01:17:52,349
Singapore in both groups so that's going

1454
01:17:50,369 --> 01:17:55,889
to be fun and really show the present

1455
01:17:52,349 --> 01:17:58,199
the relationship so this is actually

1456
01:17:55,889 --> 01:17:59,760
something that I've been involved since

1457
01:17:58,199 --> 01:18:02,190
Monday and a few of us have been

1458
01:17:59,760 --> 01:18:04,469
involved since Monday there was a non

1459
01:18:02,190 --> 01:18:06,178
forming buff on Monday about something

1460
01:18:04,469 --> 01:18:10,829
called loops which is some kind of hop

1461
01:18:06,179 --> 01:18:13,079
by hop performance optimization and with

1462
01:18:10,829 --> 01:18:16,349
FEC on selected paths there was a

1463
01:18:13,079 --> 01:18:18,980
mention of Swift in the presentation

1464
01:18:16,349 --> 01:18:21,809
there was no mention of the other

1465
01:18:18,980 --> 01:18:23,869
potential codecs but obviously soif is

1466
01:18:21,809 --> 01:18:27,059
really the work of Swift is related

1467
01:18:23,869 --> 01:18:28,500
there was you know we know from the work

1468
01:18:27,059 --> 01:18:29,310
that we've done here that congestion

1469
01:18:28,500 --> 01:18:31,440
control

1470
01:18:29,310 --> 01:18:33,420
will be an issue you saw from the quick

1471
01:18:31,440 --> 01:18:35,730
presentation that we now signal that the

1472
01:18:33,420 --> 01:18:37,230
packet has been recovered so that we

1473
01:18:35,730 --> 01:18:39,719
don't start messing up with the

1474
01:18:37,230 --> 01:18:42,360
congestion control they have there's

1475
01:18:39,720 --> 01:18:46,410
been a lot of work in this group on this

1476
01:18:42,360 --> 01:18:48,630
and it's going to be important I think

1477
01:18:46,410 --> 01:18:50,490
for it for the loops if it ever becomes

1478
01:18:48,630 --> 01:18:56,400
and yes you have Kirsten you have a

1479
01:18:50,490 --> 01:18:59,790
question yeah gasps mom and I'm one of

1480
01:18:56,400 --> 01:19:03,089
the proponents of this both this is

1481
01:18:59,790 --> 01:19:05,910
actually not top I hope this is meant to

1482
01:19:03,090 --> 01:19:08,220
be used on path segments which of course

1483
01:19:05,910 --> 01:19:14,430
may be single ops but in many cases

1484
01:19:08,220 --> 01:19:16,740
actually for me the hop-by-hop was Pat

1485
01:19:14,430 --> 01:19:18,660
segment so it's me not writing it right

1486
01:19:16,740 --> 01:19:21,840
but I I understood it was different

1487
01:19:18,660 --> 01:19:27,750
segments so basically the the point is

1488
01:19:21,840 --> 01:19:30,690
that within a path that generally is

1489
01:19:27,750 --> 01:19:33,330
okay there may be a challenged subset

1490
01:19:30,690 --> 01:19:35,759
and you may want to install something at

1491
01:19:33,330 --> 01:19:40,559
the ingress and egress of that challenge

1492
01:19:35,760 --> 01:19:41,310
subset through to fix things and mainly

1493
01:19:40,560 --> 01:19:44,850
right now we're looking at

1494
01:19:41,310 --> 01:19:47,670
retransmission and FEC is just another

1495
01:19:44,850 --> 01:19:52,320
option that has been implemented by the

1496
01:19:47,670 --> 01:19:57,750
people who are building property

1497
01:19:52,320 --> 01:20:01,710
prototypes of this and the main point is

1498
01:19:57,750 --> 01:20:05,520
this is don't look don't touch things so

1499
01:20:01,710 --> 01:20:08,970
we don't care what we transpose long as

1500
01:20:05,520 --> 01:20:12,390
it is a package so if it's quick great

1501
01:20:08,970 --> 01:20:15,060
if it's something else also wait no but

1502
01:20:12,390 --> 01:20:18,170
I mean I mean that the the reason I

1503
01:20:15,060 --> 01:20:21,050
mentioned quick on the slide is that

1504
01:20:18,170 --> 01:20:24,240
there was a question from John

1505
01:20:21,050 --> 01:20:26,130
particular about how quick would work

1506
01:20:24,240 --> 01:20:28,230
but there was a presentation on quick

1507
01:20:26,130 --> 01:20:30,810
with work so that's why I said there's a

1508
01:20:28,230 --> 01:20:33,660
quick the presentation that we just

1509
01:20:30,810 --> 01:20:35,640
skipped and that's sad actually it does

1510
01:20:33,660 --> 01:20:37,769
some kind of a network coding tunnel and

1511
01:20:35,640 --> 01:20:42,690
that could be another solution that you

1512
01:20:37,770 --> 01:20:45,150
guys could look at so yeah I

1513
01:20:42,690 --> 01:20:49,679
yeah don't look don't touch also

1514
01:20:45,150 --> 01:20:51,929
includes that we don't talk to the host

1515
01:20:49,680 --> 01:20:55,500
so whatever the host does is it's

1516
01:20:51,930 --> 01:20:58,710
completely opaque of course the ingress

1517
01:20:55,500 --> 01:21:01,520
or the egress might actually be the host

1518
01:20:58,710 --> 01:21:05,850
in the end yeah so that's an interesting

1519
01:21:01,520 --> 01:21:09,530
special case but the things supposed to

1520
01:21:05,850 --> 01:21:12,239
be really simple and get by without

1521
01:21:09,530 --> 01:21:14,210
talking to the host yeah and actually if

1522
01:21:12,239 --> 01:21:16,739
you saw the presentations from Nicholas

1523
01:21:14,210 --> 01:21:18,540
though some of his architectures looked

1524
01:21:16,739 --> 01:21:21,150
a lot like some of the slides I saw on

1525
01:21:18,540 --> 01:21:23,219
Monday so I think there's so the message

1526
01:21:21,150 --> 01:21:24,929
here is that you know there is

1527
01:21:23,219 --> 01:21:28,380
collaboration we're all in them saying

1528
01:21:24,930 --> 01:21:32,640
mailing lists and you know again

1529
01:21:28,380 --> 01:21:35,280
historically we ended up being a

1530
01:21:32,640 --> 01:21:39,900
research group because the IETF was not

1531
01:21:35,280 --> 01:21:41,940
ready five six years ago for a working

1532
01:21:39,900 --> 01:21:43,799
group that dealt with the type of

1533
01:21:41,940 --> 01:21:45,690
architectures that would discuss in here

1534
01:21:43,800 --> 01:21:48,390
so we ended up being a research group

1535
01:21:45,690 --> 01:21:50,489
but in the meantime a lot of the people

1536
01:21:48,390 --> 01:21:52,650
involved have actually worked on

1537
01:21:50,489 --> 01:21:55,259
real-world implementation and that could

1538
01:21:52,650 --> 01:21:57,360
be if your group gets chartered that

1539
01:21:55,260 --> 01:22:00,000
could be a way for some of the work that

1540
01:21:57,360 --> 01:22:03,210
was done here to move into the IETF

1541
01:22:00,000 --> 01:22:04,949
because there's people in this room who

1542
01:22:03,210 --> 01:22:06,660
know that the type of architecture

1543
01:22:04,949 --> 01:22:09,570
you're discussing with loops including

1544
01:22:06,660 --> 01:22:12,090
FEC is actually running code and a lot

1545
01:22:09,570 --> 01:22:14,519
of different implementations may be more

1546
01:22:12,090 --> 01:22:16,800
proprietary maybe a little bit more less

1547
01:22:14,520 --> 01:22:19,290
known there's probably ways that some of

1548
01:22:16,800 --> 01:22:23,790
these things may end up being you know

1549
01:22:19,290 --> 01:22:26,580
in the public domain so it's just this I

1550
01:22:23,790 --> 01:22:28,230
made you know and again I'm talking

1551
01:22:26,580 --> 01:22:31,530
about collaboration and this one is not

1552
01:22:28,230 --> 01:22:33,980
between a two research groups but

1553
01:22:31,530 --> 01:22:40,050
between a research group and a potential

1554
01:22:33,980 --> 01:22:41,940
so what the idea is that most of us have

1555
01:22:40,050 --> 01:22:43,530
been working on something for a while so

1556
01:22:41,940 --> 01:22:46,400
for me this would be twenty years ago

1557
01:22:43,530 --> 01:22:49,400
and we did the first thing of this kind

1558
01:22:46,400 --> 01:22:49,400
and

1559
01:22:49,610 --> 01:22:54,110
this is something that can be

1560
01:22:51,200 --> 01:22:57,679
standardized but of course the the fec

1561
01:22:54,110 --> 01:23:01,519
part is the the more interesting part

1562
01:22:57,680 --> 01:23:03,260
and there we definitely hope to get very

1563
01:23:01,520 --> 01:23:03,590
good input from this reciprocal thank

1564
01:23:03,260 --> 01:23:06,610
you

1565
01:23:03,590 --> 01:23:15,140
there's a question I think I make that

1566
01:23:06,610 --> 01:23:18,530
depends on you know is connected okay so

1567
01:23:15,140 --> 01:23:23,000
that's it yeah that's it we are also

1568
01:23:18,530 --> 01:23:25,639
looking at links to other groups and but

1569
01:23:23,000 --> 01:23:27,280
those were the ones that right now we're

1570
01:23:25,640 --> 01:23:30,470
the ones that were the most likely

1571
01:23:27,280 --> 01:23:36,769
candidate so if there's no other

1572
01:23:30,470 --> 01:23:38,300
questions I'll we'll go we'll move to

1573
01:23:36,770 --> 01:23:50,390
the presentation that was supposed to be

1574
01:23:38,300 --> 01:23:57,530
before me thank you wait yes we can wait

1575
01:23:50,390 --> 01:24:04,030
a few seconds I'm okay these are the

1576
01:23:57,530 --> 01:24:04,030
consequences of submitting my room sorry

1577
01:24:05,890 --> 01:24:12,140
okay it's working so tell me when you

1578
01:24:08,900 --> 01:24:16,759
want me to change slides okay okay thank

1579
01:24:12,140 --> 01:24:20,120
you part of the day good morning to the

1580
01:24:16,760 --> 01:24:22,100
personal attendees my name is Mihai

1581
01:24:20,120 --> 01:24:25,910
I'm a PhD student from University of

1582
01:24:22,100 --> 01:24:28,970
Montana and Caroline Research Center we

1583
01:24:25,910 --> 01:24:31,970
don't have any patents nothing dangerous

1584
01:24:28,970 --> 01:24:34,670
here so and all the participants that

1585
01:24:31,970 --> 01:24:36,620
are mentioned here this slider are okay

1586
01:24:34,670 --> 01:24:38,690
me is presenting publicly the contents

1587
01:24:36,620 --> 01:24:41,360
of this presentation I'm going to

1588
01:24:38,690 --> 01:24:44,000
present a robust week or our week which

1589
01:24:41,360 --> 01:24:46,429
is another implementation of fact week

1590
01:24:44,000 --> 01:24:52,310
are a lot to the work that was presented

1591
01:24:46,430 --> 01:24:55,730
in construction next I kiss thank you so

1592
01:24:52,310 --> 01:24:57,440
as I mention we were developing it in

1593
01:24:55,730 --> 01:24:59,759
parallel so we follow the different

1594
01:24:57,440 --> 01:25:04,139
approach use different results

1595
01:24:59,760 --> 01:25:06,360
which could be good review later which

1596
01:25:04,140 --> 01:25:08,850
one is going to be better in which cases

1597
01:25:06,360 --> 01:25:11,610
if there will be in a different book we

1598
01:25:08,850 --> 01:25:13,650
will consider in the future you have a

1599
01:25:11,610 --> 01:25:16,380
link to the github where we have this

1600
01:25:13,650 --> 01:25:25,139
project as I will mention later

1601
01:25:16,380 --> 01:25:27,030
these include more features next I have

1602
01:25:25,140 --> 01:25:30,840
a question says Marshall say without the

1603
01:25:27,030 --> 01:25:33,690
chair Harry the chair at your last

1604
01:25:30,840 --> 01:25:36,480
statement says which quick fec is better

1605
01:25:33,690 --> 01:25:39,870
and in which cases and is it worth

1606
01:25:36,480 --> 01:25:42,480
merging I think I have an answer to this

1607
01:25:39,870 --> 01:25:45,090
I think we don't know which quick fec is

1608
01:25:42,480 --> 01:25:49,019
best because we're still testing these

1609
01:25:45,090 --> 01:25:53,010
things and the worth merging my

1610
01:25:49,020 --> 01:25:56,100
experience in network coding would say

1611
01:25:53,010 --> 01:25:59,610
that merging them is probably not a good

1612
01:25:56,100 --> 01:26:02,390
idea I think a decision that we made

1613
01:25:59,610 --> 01:26:05,489
when we started working with Google on

1614
01:26:02,390 --> 01:26:09,660
on the quicken FEC was that we were

1615
01:26:05,489 --> 01:26:11,339
going to give operators a choice of the

1616
01:26:09,660 --> 01:26:13,800
code that we're going to use in our case

1617
01:26:11,340 --> 01:26:16,200
it's inside and in your case it could be

1618
01:26:13,800 --> 01:26:18,180
that they also decide to use your

1619
01:26:16,200 --> 01:26:20,340
approach but I don't think both together

1620
01:26:18,180 --> 01:26:24,900
would work because then you would have a

1621
01:26:20,340 --> 01:26:27,350
lot of issues with repair packets which

1622
01:26:24,900 --> 01:26:30,000
ones are repairs we are above the

1623
01:26:27,350 --> 01:26:31,860
encryption you're below I don't think

1624
01:26:30,000 --> 01:26:34,500
there's a way that we could make a work

1625
01:26:31,860 --> 01:26:35,420
so I think that's the answer to your to

1626
01:26:34,500 --> 01:26:41,370
your last light

1627
01:26:35,420 --> 01:26:44,130
I think I was referring more to today

1628
01:26:41,370 --> 01:26:51,680
good practice for these cases that's all

1629
01:26:44,130 --> 01:26:57,840
I was thinking yes okay next one okay

1630
01:26:51,680 --> 01:27:02,250
according to code with badness encoded

1631
01:26:57,840 --> 01:27:07,230
version we didn't know so much document

1632
01:27:02,250 --> 01:27:07,860
exam we mean codes after Egyptian for

1633
01:27:07,230 --> 01:27:10,139
two reasons

1634
01:27:07,860 --> 01:27:12,780
the first one is because it seems more

1635
01:27:10,140 --> 01:27:14,969
simpler limitation

1636
01:27:12,780 --> 01:27:17,429
and the second reason is because this

1637
01:27:14,969 --> 01:27:20,039
way we can evolve towards quick with

1638
01:27:17,429 --> 01:27:22,769
network coding in a more easier and

1639
01:27:20,039 --> 01:27:26,489
easier way this is Mary Jo say again

1640
01:27:22,769 --> 01:27:29,429
question the fact that you're coding

1641
01:27:26,489 --> 01:27:32,058
after the encryption but also puts kind

1642
01:27:29,429 --> 01:27:34,469
of zeep encoded packets and in the clear

1643
01:27:32,059 --> 01:27:36,119
how are you going to deal with the fact

1644
01:27:34,469 --> 01:27:40,469
that people would know that this is an

1645
01:27:36,119 --> 01:27:42,119
encoded packet like if I'm on the line

1646
01:27:40,469 --> 01:27:45,599
and I'm looking at things going through

1647
01:27:42,119 --> 01:27:48,360
I will probably be able to see that it's

1648
01:27:45,599 --> 01:27:50,960
an encoded packets how do you plan to

1649
01:27:48,360 --> 01:27:53,759
deal with the security issues of that

1650
01:27:50,960 --> 01:27:57,989
well well the security issues

1651
01:27:53,760 --> 01:27:58,699
I do adopt directly by tweet so that's

1652
01:27:57,989 --> 01:28:03,089
our idea

1653
01:27:58,699 --> 01:28:06,030
there is an encryption of I and you

1654
01:28:03,090 --> 01:28:15,030
don't really see the difference

1655
01:28:06,030 --> 01:28:20,429
Oh even if you see the difference we

1656
01:28:15,030 --> 01:28:24,690
need to review that so far over that

1657
01:28:20,429 --> 01:28:31,289
week has enough mechanisms to to avoid

1658
01:28:24,690 --> 01:28:34,469
the split issues okay the packet our

1659
01:28:31,289 --> 01:28:39,420
budget so we will not expecting anything

1660
01:28:34,469 --> 01:28:43,079
interview here I'm trying to depict this

1661
01:28:39,420 --> 01:28:45,630
off well I would week we never couldn't

1662
01:28:43,079 --> 01:28:51,478
look like before and after routing

1663
01:28:45,630 --> 01:28:56,249
before and after decoding so in sent

1664
01:28:51,479 --> 01:28:59,820
over in emergent a minute if you encode

1665
01:28:56,249 --> 01:29:04,789
before encryption is impossible or very

1666
01:28:59,820 --> 01:29:08,518
very hard to record it in mediate notes

1667
01:29:04,789 --> 01:29:11,999
however if you in encode after detection

1668
01:29:08,519 --> 01:29:16,429
the product is much easier apart from

1669
01:29:11,999 --> 01:29:16,429
being possible next time please

1670
01:29:17,450 --> 01:29:23,450
some technical details here we took we

1671
01:29:20,300 --> 01:29:27,430
are basing our code on we go budget by

1672
01:29:23,450 --> 01:29:30,710
estimate not assuming we took the coffee

1673
01:29:27,430 --> 01:29:34,490
after the release division Oh simple we

1674
01:29:30,710 --> 01:29:44,270
want to be that we have implemented only

1675
01:29:34,490 --> 01:29:47,870
one coding scheme with every second call

1676
01:29:44,270 --> 01:29:50,750
it packet how because it depends on

1677
01:29:47,870 --> 01:29:56,120
where loss is observe so far we have a

1678
01:29:50,750 --> 01:29:58,970
four byte header four by four big packet

1679
01:29:56,120 --> 01:30:09,769
right well this will show you change in

1680
01:29:58,970 --> 01:30:12,620
the next future much the parts that we

1681
01:30:09,770 --> 01:30:17,410
have added or we have changed in the

1682
01:30:12,620 --> 01:30:21,650
original Greek decoder encoded the

1683
01:30:17,410 --> 01:30:23,120
adaptive polling rate of I mean so it

1684
01:30:21,650 --> 01:30:25,580
will be the station retina hard to

1685
01:30:23,120 --> 01:30:28,849
buffer the packets that will need to be

1686
01:30:25,580 --> 01:30:33,730
coded okay next

1687
01:30:28,850 --> 01:30:38,620
looks like this our adaptive coding rate

1688
01:30:33,730 --> 01:30:38,620
of this is number of technicians

1689
01:30:41,270 --> 01:30:47,420
I have significant with with with Michel

1690
01:30:44,720 --> 01:30:53,270
but Francois he was speaking so clearly

1691
01:30:47,420 --> 01:30:58,390
that I didn't company so adaptive

1692
01:30:53,270 --> 01:31:01,810
algorithm just in the last end coalition

1693
01:30:58,390 --> 01:31:07,130
periods nasty transmissions and

1694
01:31:01,810 --> 01:31:09,110
retransmissions and then based on some

1695
01:31:07,130 --> 01:31:10,970
promises that is that we configure which

1696
01:31:09,110 --> 01:31:13,219
we can define as aggressiveness

1697
01:31:10,970 --> 01:31:17,630
parameters we decide if we need to

1698
01:31:13,220 --> 01:31:22,940
increase or decrease the ratio is

1699
01:31:17,630 --> 01:31:23,409
according ratio and how much on the

1700
01:31:22,940 --> 01:31:27,280
graphic

1701
01:31:23,409 --> 01:31:31,420
little check that shows or even for

1702
01:31:27,280 --> 01:31:36,639
losses little burden should define a

1703
01:31:31,420 --> 01:31:42,159
more constant win rate one detail we

1704
01:31:36,639 --> 01:31:45,280
threaten said we try to not to go beyond

1705
01:31:42,159 --> 01:32:06,480
to congestion control window so we can

1706
01:31:45,280 --> 01:32:16,239
recover any moment is there a more like

1707
01:32:06,480 --> 01:32:18,730
eat chicken that's fine okay but could

1708
01:32:16,239 --> 01:32:24,299
you hear more or less okay the previous

1709
01:32:18,730 --> 01:32:27,190
parts please somebody answer on the chat

1710
01:32:24,300 --> 01:32:31,290
or we can leave the dose above the

1711
01:32:27,190 --> 01:32:31,290
previous part for later for the question

1712
01:32:31,349 --> 01:32:42,250
okay for the question next I'd kiss okay

1713
01:32:38,469 --> 01:32:47,920
yeah it's our code what we simulations

1714
01:32:42,250 --> 01:32:53,219
and physical setup which other art week

1715
01:32:47,920 --> 01:32:58,510
isn't in pairing them up each session so

1716
01:32:53,219 --> 01:33:00,250
we have considered for simulations three

1717
01:32:58,510 --> 01:33:03,940
cases wireless network

1718
01:33:00,250 --> 01:33:07,750
no no more typical war fine solar

1719
01:33:03,940 --> 01:33:10,480
network and satellite communications in

1720
01:33:07,750 --> 01:33:13,179
physical setup we had solar Network

1721
01:33:10,480 --> 01:33:17,610
parents Wi-Fi we had two kinds of

1722
01:33:13,179 --> 01:33:20,949
traffic both transfer and we're browsing

1723
01:33:17,610 --> 01:33:23,290
as the output attic see the main output

1724
01:33:20,949 --> 01:33:26,348
is the completion ratio that is the time

1725
01:33:23,290 --> 01:33:28,630
in which our quick sense the necessary

1726
01:33:26,349 --> 01:33:32,320
information divided by the time that

1727
01:33:28,630 --> 01:33:33,250
normally could do that as you can see in

1728
01:33:32,320 --> 01:33:35,920
both transfer we had

1729
01:33:33,250 --> 01:33:39,940
of significant improvements in the in

1730
01:33:35,920 --> 01:33:43,090
all cases however in web browsing the

1731
01:33:39,940 --> 01:33:48,339
improvement is not that that big we

1732
01:33:43,090 --> 01:33:51,340
believe that it's because our adaptive

1733
01:33:48,340 --> 01:33:53,290
preto algorithm is not optimized for the

1734
01:33:51,340 --> 01:33:57,120
slow start phase in the congestion

1735
01:33:53,290 --> 01:34:01,470
control window we are working on it and

1736
01:33:57,120 --> 01:34:04,360
the summary which is the next slide

1737
01:34:01,470 --> 01:34:09,280
thank you so as a summary we have a

1738
01:34:04,360 --> 01:34:13,000
different approach to the FAQ which is

1739
01:34:09,280 --> 01:34:14,440
easy to evolve into network coding the

1740
01:34:13,000 --> 01:34:16,090
work is as I said the work is not over

1741
01:34:14,440 --> 01:34:20,500
we are going to clean it more each more

1742
01:34:16,090 --> 01:34:24,610
features more coding schemes random

1743
01:34:20,500 --> 01:34:27,580
linear coding result we want to update

1744
01:34:24,610 --> 01:34:32,710
our base coat and also include multi

1745
01:34:27,580 --> 01:34:37,750
packs and network coding so if you have

1746
01:34:32,710 --> 01:34:41,650
any questions I won't very fast sure and

1747
01:34:37,750 --> 01:34:49,840
show you have questions hello

1748
01:34:41,650 --> 01:34:54,339
it's Nicaraguan on the satellite axis

1749
01:34:49,840 --> 01:34:57,730
you can consider 500 milliseconds OGG 20

1750
01:34:54,340 --> 01:35:03,310
Meg's downstream and 5 megabits upstream

1751
01:34:57,730 --> 01:35:08,919
that's basically what you have in SATCOM

1752
01:35:03,310 --> 01:35:11,470
accesses you can change the simulation

1753
01:35:08,920 --> 01:35:15,630
parameters to 20 megabits down streams

1754
01:35:11,470 --> 01:35:24,400
for satellite link and 500 millisecond

1755
01:35:15,630 --> 01:35:27,130
okay thank you thank you we have it's

1756
01:35:24,400 --> 01:35:29,200
I was curious about the relationship

1757
01:35:27,130 --> 01:35:31,360
between what you're doing and congestion

1758
01:35:29,200 --> 01:35:33,280
control maybe well can you also go back

1759
01:35:31,360 --> 01:35:38,500
even one more slide I think that is

1760
01:35:33,280 --> 01:35:39,960
dislike that as it isn't it so if I

1761
01:35:38,500 --> 01:35:43,210
understand this correctly you're not

1762
01:35:39,960 --> 01:35:44,830
changing the congestion control or like

1763
01:35:43,210 --> 01:35:46,330
you working with the congestion all

1764
01:35:44,830 --> 01:35:49,240
inside quick because it's supposed to be

1765
01:35:46,330 --> 01:35:51,930
transparent to that so then we bring

1766
01:35:49,240 --> 01:35:55,300
only the losses that don't play a role

1767
01:35:51,930 --> 01:35:58,960
however is that this is preferred to

1768
01:35:55,300 --> 01:36:01,390
congestion control okay so how do you

1769
01:35:58,960 --> 01:36:05,460
ensure that you're not hiding losses

1770
01:36:01,390 --> 01:36:05,460
that affect the congestion for response

1771
01:36:12,000 --> 01:36:17,380
well if if there is a loss

1772
01:36:15,130 --> 01:36:19,690
normally congestion troll should respond

1773
01:36:17,380 --> 01:36:22,390
to that right so if you repair all

1774
01:36:19,690 --> 01:36:26,830
losses then you're ruining congestion

1775
01:36:22,390 --> 01:36:29,260
control okay where we are delaying the

1776
01:36:26,830 --> 01:36:33,550
control losses so if you cannot recover

1777
01:36:29,260 --> 01:36:35,050
that we don't pour that loss so we we

1778
01:36:33,550 --> 01:36:38,470
have one loss we are waiting for the

1779
01:36:35,050 --> 01:36:41,290
equity packet if we start to receive

1780
01:36:38,470 --> 01:36:44,440
packets from the new generation we

1781
01:36:41,290 --> 01:36:49,540
report that loss if not request as

1782
01:36:44,440 --> 01:36:51,309
received packet okay okay okay

1783
01:36:49,540 --> 01:36:52,900
I'd have to read the details I guess if

1784
01:36:51,310 --> 01:37:01,860
you you're probably working on a paper

1785
01:36:52,900 --> 01:37:01,860
on this there okay thank you

1786
01:37:03,150 --> 01:37:11,110
Brandon Williams the the specific

1787
01:37:08,040 --> 01:37:14,170
difference between this mechanism and

1788
01:37:11,110 --> 01:37:17,559
the the other one that sits above the

1789
01:37:14,170 --> 01:37:19,930
encryption layer that I'm curious

1790
01:37:17,560 --> 01:37:22,600
whether you have thoughts about is the

1791
01:37:19,930 --> 01:37:26,050
it seems to me that the parameters you

1792
01:37:22,600 --> 01:37:29,070
want or the desirable characteristics

1793
01:37:26,050 --> 01:37:34,060
that you want from the network differ

1794
01:37:29,070 --> 01:37:37,250
distinctly between a bowl between a bulk

1795
01:37:34,060 --> 01:37:42,200
data transfer that wants to be reliable

1796
01:37:37,250 --> 01:37:46,100
and say video-streaming that doesn't put

1797
01:37:42,200 --> 01:37:48,050
as high a priority and reliability how

1798
01:37:46,100 --> 01:37:50,120
do you see being able to make the

1799
01:37:48,050 --> 01:37:52,160
necessary trade-offs there if you're

1800
01:37:50,120 --> 01:37:54,980
sitting beneath the encryption layer and

1801
01:37:52,160 --> 01:37:56,720
can't tell the difference between the

1802
01:37:54,980 --> 01:38:00,950
packets that are associated with

1803
01:37:56,720 --> 01:38:10,160
reliable and unreliable transport use

1804
01:38:00,950 --> 01:38:14,150
cases okay we can actually detect I mean

1805
01:38:10,160 --> 01:38:24,190
we should be or not observing them in

1806
01:38:14,150 --> 01:38:27,490
the session module so this is not this

1807
01:38:24,190 --> 01:38:29,900
algorithm this implementation is

1808
01:38:27,490 --> 01:38:38,090
embedded into peak so we can see which

1809
01:38:29,900 --> 01:38:42,379
packets are a priority answered so the

1810
01:38:38,090 --> 01:38:44,960
do you mean that I didn't get the sense

1811
01:38:42,380 --> 01:38:47,150
from the talk and maybe I need to read

1812
01:38:44,960 --> 01:38:50,320
the document to get a better better idea

1813
01:38:47,150 --> 01:38:56,809
I didn't get the sense that you were

1814
01:38:50,320 --> 01:38:59,780
selectively applying the the FEC or that

1815
01:38:56,810 --> 01:39:04,970
you have the capability to have any kind

1816
01:38:59,780 --> 01:39:08,900
of differences applied between between

1817
01:39:04,970 --> 01:39:13,970
different streams are you selectively

1818
01:39:08,900 --> 01:39:19,190
applying the no right no we don't we

1819
01:39:13,970 --> 01:39:20,750
don't we just our fact we transfer and

1820
01:39:19,190 --> 01:39:24,860
the browser but so far we are not

1821
01:39:20,750 --> 01:39:28,550
different do you have a do you have a

1822
01:39:24,860 --> 01:39:32,089
plan to look into that and develop a

1823
01:39:28,550 --> 01:39:36,830
more a more clear mechanism for being

1824
01:39:32,090 --> 01:39:42,410
able to selectively apply a fact at the

1825
01:39:36,830 --> 01:39:49,040
layer where you're applying it hmm we

1826
01:39:42,410 --> 01:39:49,610
can't not host feature okay and then

1827
01:39:49,040 --> 01:39:50,929
that

1828
01:39:49,610 --> 01:39:53,480
that seems like something that's going

1829
01:39:50,929 --> 01:39:56,179
to be something that's going to be

1830
01:39:53,480 --> 01:39:59,449
important for you to for you to look

1831
01:39:56,179 --> 01:40:01,190
into that certainly is one of one of the

1832
01:39:59,449 --> 01:40:04,070
things that has come up in discussions

1833
01:40:01,190 --> 01:40:06,949
about applying fact for quick that some

1834
01:40:04,070 --> 01:40:11,360
streams will benefit in some streams

1835
01:40:06,949 --> 01:40:13,759
won't benefit much and and you know

1836
01:40:11,360 --> 01:40:15,559
there's a desire to be selective about

1837
01:40:13,760 --> 01:40:18,110
it as well as selective about the

1838
01:40:15,560 --> 01:40:20,420
parameters that are applied based on the

1839
01:40:18,110 --> 01:40:24,170
nature of the individual stream okay I'm

1840
01:40:20,420 --> 01:40:30,110
taking over this is immersion say again

1841
01:40:24,170 --> 01:40:32,810
I go back to what Michael was saying you

1842
01:40:30,110 --> 01:40:35,900
know I've done a lot of this coding with

1843
01:40:32,810 --> 01:40:38,449
congestion control maybe too much and I

1844
01:40:35,900 --> 01:40:41,989
have the impression you really need to

1845
01:40:38,449 --> 01:40:44,000
look into how you will interact with

1846
01:40:41,989 --> 01:40:47,509
congestion control because right now

1847
01:40:44,000 --> 01:40:51,080
you're correcting all the losses but the

1848
01:40:47,510 --> 01:40:53,690
congestion control does not know the

1849
01:40:51,080 --> 01:40:57,710
nature of the recovery that you're doing

1850
01:40:53,690 --> 01:41:00,049
and maybe the thing that we're lost were

1851
01:40:57,710 --> 01:41:02,690
things that should be lost and should

1852
01:41:00,050 --> 01:41:05,270
not be recovered because there was

1853
01:41:02,690 --> 01:41:09,199
something that was needed in order to

1854
01:41:05,270 --> 01:41:11,929
prevent you know buffer overflows and a

1855
01:41:09,199 --> 01:41:13,940
ton of things so you need to really I

1856
01:41:11,929 --> 01:41:17,210
think look at your implementation in

1857
01:41:13,940 --> 01:41:19,969
terms of how it works especially in the

1858
01:41:17,210 --> 01:41:23,929
congested network where the losses will

1859
01:41:19,969 --> 01:41:26,659
not be due to physical layer read you

1860
01:41:23,929 --> 01:41:29,000
know residual errors but obviously

1861
01:41:26,659 --> 01:41:32,509
because it was needed to drop the

1862
01:41:29,000 --> 01:41:35,389
packets to maintain Network integrity

1863
01:41:32,510 --> 01:41:37,280
and I think what you proposed here I

1864
01:41:35,389 --> 01:41:39,920
think it works when there's no

1865
01:41:37,280 --> 01:41:43,659
congestion and it's great but if you get

1866
01:41:39,920 --> 01:41:46,190
into a more like the I would say the

1867
01:41:43,659 --> 01:41:48,199
architecture that Carsten was mentioning

1868
01:41:46,190 --> 01:41:50,619
when you have more than one path

1869
01:41:48,199 --> 01:41:54,259
segments who have very different

1870
01:41:50,619 --> 01:41:57,349
characteristics maybe on your wireless

1871
01:41:54,260 --> 01:41:59,780
path segment there is very little law

1872
01:41:57,350 --> 01:42:02,000
very little congestion and all your

1873
01:41:59,780 --> 01:42:03,440
losses are due to physical layer

1874
01:42:02,000 --> 01:42:05,870
residual error

1875
01:42:03,440 --> 01:42:10,299
but once you get on the wired part of

1876
01:42:05,870 --> 01:42:13,099
the network it may be a very different

1877
01:42:10,300 --> 01:42:14,810
very something very different happening

1878
01:42:13,100 --> 01:42:17,510
and I'm speaking from experience here

1879
01:42:14,810 --> 01:42:19,730
and you may not want to be very as

1880
01:42:17,510 --> 01:42:22,520
aggressive as correcting everything and

1881
01:42:19,730 --> 01:42:25,790
since you do not know what these packets

1882
01:42:22,520 --> 01:42:27,949
are I think you need to really look at

1883
01:42:25,790 --> 01:42:30,680
how you're going to make sure that

1884
01:42:27,949 --> 01:42:33,440
you're not creating actually making

1885
01:42:30,680 --> 01:42:35,480
things worse for the network and even

1886
01:42:33,440 --> 01:42:47,599
you know sending things into congestion

1887
01:42:35,480 --> 01:42:53,860
collapse okay thank you I think we're

1888
01:42:47,600 --> 01:42:53,860
done thank you thank you very much okay

1889
01:42:54,280 --> 01:43:00,110
okay so I guess we're we finished early

1890
01:42:57,500 --> 01:43:02,510
which is always good so thank you for

1891
01:43:00,110 --> 01:43:05,719
coming and I guess everybody's going

1892
01:43:02,510 --> 01:43:09,830
home in the next few hours few days and

1893
01:43:05,719 --> 01:43:11,989
have a safe trip back and next time for

1894
01:43:09,830 --> 01:43:15,019
people who came from far we're going to

1895
01:43:11,989 --> 01:43:16,940
be the ones the people on the east coast

1896
01:43:15,020 --> 01:43:19,130
of the US are going to be the one doing

1897
01:43:16,940 --> 01:43:21,559
the long trek so we'll see you in

1898
01:43:19,130 --> 01:43:23,710
Singapore hopefully not too jetlag thank

1899
01:43:21,560 --> 01:43:23,710
you

