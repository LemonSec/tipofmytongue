1
00:02:06,299 --> 00:02:12,549
all right people I know I really don't

2
00:02:09,699 --> 00:02:17,798
have a voice but I'm gonna try and use

3
00:02:12,549 --> 00:02:19,900
whatever I've got this is IC crg if you

4
00:02:17,799 --> 00:02:29,769
are here for anything else you might be

5
00:02:19,900 --> 00:02:33,489
pleasantly surprised cuz we have more

6
00:02:29,769 --> 00:02:36,810
fun than anybody answers can somebody

7
00:02:33,489 --> 00:02:36,810
give the doors in the back please

8
00:02:39,209 --> 00:02:45,310
okay I'll need

9
00:02:42,370 --> 00:02:53,410
well let's I'm gonna start now because

10
00:02:45,310 --> 00:02:59,160
we are 132 can everybody understand the

11
00:02:53,410 --> 00:03:03,010
words I'm speaking good thank you

12
00:02:59,160 --> 00:03:03,609
well I I almost Thank You Marvin I'm

13
00:03:03,010 --> 00:03:15,690
sorry

14
00:03:03,609 --> 00:03:17,760
yes all right so not well note well

15
00:03:15,690 --> 00:03:21,579
important if you've not seen this before

16
00:03:17,760 --> 00:03:23,679
please look it up Google IETF and not

17
00:03:21,579 --> 00:03:26,709
well and you'll find good information

18
00:03:23,680 --> 00:03:29,109
about IPR disclosures about the work

19
00:03:26,709 --> 00:03:29,710
that gets discussed here if you're not

20
00:03:29,109 --> 00:03:31,390
familiar with

21
00:03:29,710 --> 00:03:35,250
please familiarize yourself with this

22
00:03:31,390 --> 00:03:35,250
before talking about nothing

23
00:03:36,000 --> 00:03:51,460
sorry please bring this or what does the

24
00:03:45,310 --> 00:03:53,380
doctor go this the agenda is as follows

25
00:03:51,460 --> 00:03:57,190
but before we get into the rest of the

26
00:03:53,380 --> 00:04:05,370
agenda I need a jabber scribe somebody

27
00:03:57,190 --> 00:04:08,200
on jabber jabber scribe Chavis Kaiba

28
00:04:05,370 --> 00:04:13,930
Thank You Maria where's the JavaScript

29
00:04:08,200 --> 00:04:19,029
who's taking minutes then I'm gonna name

30
00:04:13,930 --> 00:04:26,560
you in a second we need some rated

31
00:04:19,029 --> 00:04:31,960
minutes thank you sir

32
00:04:26,560 --> 00:04:36,280
thank you again okay so we will be

33
00:04:31,960 --> 00:04:38,020
talking about VBR v2 which is a brand

34
00:04:36,280 --> 00:04:42,580
new BB r if you not been paying

35
00:04:38,020 --> 00:04:46,479
attention so Neal zero you'll be talking

36
00:04:42,580 --> 00:04:50,250
about that and you have an exciting what

37
00:04:46,480 --> 00:04:55,420
do we call it let bad double

38
00:04:50,250 --> 00:04:57,370
presentation what's that double feature

39
00:04:55,420 --> 00:04:59,610
thank you that was the yeah my brains

40
00:04:57,370 --> 00:05:02,710
also not really functional at this point

41
00:04:59,610 --> 00:05:04,900
yeah double feature only batch we've got

42
00:05:02,710 --> 00:05:06,760
Praveen from Microsoft talking about it

43
00:05:04,900 --> 00:05:07,330
that plus plus some of you may have seen

44
00:05:06,760 --> 00:05:09,760
that before

45
00:05:07,330 --> 00:05:12,820
but it's it was popular so we're

46
00:05:09,760 --> 00:05:15,250
bringing it back and we have our LED

47
00:05:12,820 --> 00:05:19,780
back from Marcelo which will build on

48
00:05:15,250 --> 00:05:20,950
this to do receiver side congestion

49
00:05:19,780 --> 00:05:24,640
control so this is going to be

50
00:05:20,950 --> 00:05:26,530
interesting I hope and if time permits

51
00:05:24,640 --> 00:05:30,130
we might have some time for a

52
00:05:26,530 --> 00:05:34,330
presentation from ana Donny's group at

53
00:05:30,130 --> 00:05:37,510
Maui before we get into these wonderful

54
00:05:34,330 --> 00:05:40,120
presentations I just want to take a few

55
00:05:37,510 --> 00:05:42,130
minutes of your time to discuss a

56
00:05:40,120 --> 00:05:47,740
direction in which

57
00:05:42,130 --> 00:05:49,960
we are trying to go so this is just

58
00:05:47,740 --> 00:05:53,770
kicking off a discussion this is getting

59
00:05:49,960 --> 00:05:56,229
the conversation started ICC RG used to

60
00:05:53,770 --> 00:05:59,740
has published documents in the past and

61
00:05:56,230 --> 00:06:02,080
we would like to start doing that again

62
00:05:59,740 --> 00:06:04,180
there's the context is that there's new

63
00:06:02,080 --> 00:06:06,280
an important work coming through ICC RG

64
00:06:04,180 --> 00:06:09,100
now and this is something that we are

65
00:06:06,280 --> 00:06:11,739
seeing as consistent presentations

66
00:06:09,100 --> 00:06:14,320
coming through these are experimental

67
00:06:11,740 --> 00:06:16,450
algorithms they need continuous review

68
00:06:14,320 --> 00:06:18,430
they need feedback from the community

69
00:06:16,450 --> 00:06:20,830
they go through iterations and they come

70
00:06:18,430 --> 00:06:23,050
back this seems more and more like a

71
00:06:20,830 --> 00:06:25,359
process that should turn into something

72
00:06:23,050 --> 00:06:28,960
sort of an eruption some sort of

73
00:06:25,360 --> 00:06:30,610
publication eventually be BRM get back

74
00:06:28,960 --> 00:06:34,180
dismiss are strong candidates at this

75
00:06:30,610 --> 00:06:36,490
point the brand new high star plus plus

76
00:06:34,180 --> 00:06:38,800
and also based chirping our early

77
00:06:36,490 --> 00:06:42,910
candidates but we'd like to see this

78
00:06:38,800 --> 00:06:45,940
sort of practice start to happen I'm

79
00:06:42,910 --> 00:06:48,070
completely aware of the fact that this

80
00:06:45,940 --> 00:06:49,930
needs a few things and has implications

81
00:06:48,070 --> 00:06:53,380
this needs commitment from the authors

82
00:06:49,930 --> 00:06:56,650
to keep coming doing things that they

83
00:06:53,380 --> 00:06:58,990
might otherwise not do this needs us to

84
00:06:56,650 --> 00:07:01,060
agree on what it means to adopt

85
00:06:58,990 --> 00:07:03,100
something what it means for a research

86
00:07:01,060 --> 00:07:06,460
group toward out the document so to

87
00:07:03,100 --> 00:07:08,190
speak it also does mean that we need to

88
00:07:06,460 --> 00:07:13,390
agree on what it means to publish

89
00:07:08,190 --> 00:07:15,010
document what do we if I I see crg says

90
00:07:13,390 --> 00:07:17,800
that we it's going to get published as

91
00:07:15,010 --> 00:07:21,039
an ICC IG document what should that

92
00:07:17,800 --> 00:07:24,070
signal to the community we do need to

93
00:07:21,040 --> 00:07:27,000
figure this out but I think we can solve

94
00:07:24,070 --> 00:07:28,930
these problems this is not intractable

95
00:07:27,000 --> 00:07:31,660
so that's something I just like to kick

96
00:07:28,930 --> 00:07:33,340
off a discussion and if anybody has any

97
00:07:31,660 --> 00:07:35,440
thoughts on this I will leave a couple

98
00:07:33,340 --> 00:07:41,409
of minutes otherwise we can convey this

99
00:07:35,440 --> 00:07:44,190
homeless Michael well so no thoughts

100
00:07:41,410 --> 00:07:44,190
seriously

101
00:07:46,560 --> 00:07:54,240
hi I was closer to the microphone so I

102
00:07:48,880 --> 00:07:57,670
stood up Brian Trammell uh do it um so I

103
00:07:54,240 --> 00:08:04,090
Spencer here so I can borrow back my pan

104
00:07:57,670 --> 00:08:07,270
orgy chair at UM the like so soap an

105
00:08:04,090 --> 00:08:08,859
orgy basically has this like a more

106
00:08:07,270 --> 00:08:10,479
focused set of research questions that

107
00:08:08,860 --> 00:08:12,400
it's looking at at least right now it

108
00:08:10,480 --> 00:08:16,120
might you know mutate into something a

109
00:08:12,400 --> 00:08:17,620
little bit broader and we've um sort of

110
00:08:16,120 --> 00:08:19,570
kept cozy and internet drafts which were

111
00:08:17,620 --> 00:08:22,090
adopted internet rush the thing for the

112
00:08:19,570 --> 00:08:27,010
for the the research group and the

113
00:08:22,090 --> 00:08:28,210
process runs um a whole lot like a

114
00:08:27,010 --> 00:08:29,830
working group right like so you

115
00:08:28,210 --> 00:08:32,919
basically just put the put the process

116
00:08:29,830 --> 00:08:36,939
over runs fine one question that we have

117
00:08:32,919 --> 00:08:39,280
in terms of the types of documents that

118
00:08:36,940 --> 00:08:40,780
we have in the research group are are

119
00:08:39,280 --> 00:08:42,699
these things that we basically just want

120
00:08:40,780 --> 00:08:44,319
to keep the document as an internet

121
00:08:42,700 --> 00:08:45,970
draft and keep it alive within the

122
00:08:44,320 --> 00:08:49,390
research group where that you know draft

123
00:08:45,970 --> 00:08:50,530
I RTF Arg label at the front means this

124
00:08:49,390 --> 00:08:52,120
is something that the research group is

125
00:08:50,530 --> 00:08:54,550
thinking about not necessarily that it's

126
00:08:52,120 --> 00:08:55,600
ever going to be published as a document

127
00:08:54,550 --> 00:08:58,270
right licks or something that's talking

128
00:08:55,600 --> 00:09:00,670
about sort of frameworks for how you

129
00:08:58,270 --> 00:09:02,319
would consider research in congestion

130
00:09:00,670 --> 00:09:03,370
control algorithms we're not really sure

131
00:09:02,320 --> 00:09:04,960
that we're gonna publish any the

132
00:09:03,370 --> 00:09:06,400
documents out of pan or G as rfcs I

133
00:09:04,960 --> 00:09:08,800
think that clearly the experimental

134
00:09:06,400 --> 00:09:10,240
RFC's for um for some of the

135
00:09:08,800 --> 00:09:12,609
experimental algorithms that make sense

136
00:09:10,240 --> 00:09:14,800
to publish here but you might also want

137
00:09:12,610 --> 00:09:16,089
to consider that some of these documents

138
00:09:14,800 --> 00:09:20,380
you might want to just sort of keep them

139
00:09:16,089 --> 00:09:22,720
as research group IDs as sort of kind of

140
00:09:20,380 --> 00:09:23,140
like living documents for for what's

141
00:09:22,720 --> 00:09:27,940
going on

142
00:09:23,140 --> 00:09:33,490
thanks Mike Aversa yes I very much agree

143
00:09:27,940 --> 00:09:34,589
with it in my experience the issue the

144
00:09:33,490 --> 00:09:38,050
issue with doing this

145
00:09:34,589 --> 00:09:40,540
my experience with telling people that

146
00:09:38,050 --> 00:09:43,870
we can publish things directly in as

147
00:09:40,540 --> 00:09:45,370
ECoG was that their response usually was

148
00:09:43,870 --> 00:09:46,600
that they have this business in the

149
00:09:45,370 --> 00:09:52,360
other room and it's very interesting

150
00:09:46,600 --> 00:09:55,089
idea Bob I like something I don't know I

151
00:09:52,360 --> 00:09:58,279
I don't know probably it just smells too

152
00:09:55,089 --> 00:10:02,449
much of this is a useless i RTF document

153
00:09:58,279 --> 00:10:12,670
or I don't know I don't know I just

154
00:10:02,449 --> 00:10:15,740
never had people wanting to do it your

155
00:10:12,670 --> 00:10:20,839
affair has been tapped by the mic I'm a

156
00:10:15,740 --> 00:10:21,860
TS vwg chair I think I want to try and

157
00:10:20,839 --> 00:10:23,779
understand what the differences between

158
00:10:21,860 --> 00:10:27,529
so be publishing something here I'm

159
00:10:23,779 --> 00:10:31,100
taking one of these two TS vwg which you

160
00:10:27,529 --> 00:10:32,629
could do as well so there is a

161
00:10:31,100 --> 00:10:35,329
difference because these groups are

162
00:10:32,629 --> 00:10:37,459
different and the process is different

163
00:10:35,329 --> 00:10:39,079
and that doesn't mean you shouldn't do

164
00:10:37,459 --> 00:10:41,180
it here and be able to do it there but

165
00:10:39,079 --> 00:10:42,709
we need to be clear to the community

166
00:10:41,180 --> 00:10:45,439
that reads these what that difference is

167
00:10:42,709 --> 00:10:48,109
and I don't know yeah so this is

168
00:10:45,439 --> 00:10:49,849
deliberately not going into that yeah

169
00:10:48,110 --> 00:10:51,889
yeah absolutely and hundred wasn't aware

170
00:10:49,850 --> 00:10:53,149
of the fact that I think that the

171
00:10:51,889 --> 00:10:55,160
leadership and the community are all

172
00:10:53,149 --> 00:10:59,809
confused about where these documents

173
00:10:55,160 --> 00:11:02,719
ought to go at the moment okay -

174
00:10:59,809 --> 00:11:05,600
Westland I get to almost take on my

175
00:11:02,720 --> 00:11:07,250
former aide transporte here this

176
00:11:05,600 --> 00:11:11,029
actually goes back to when I was a

177
00:11:07,250 --> 00:11:13,040
previous term because that's when me and

178
00:11:11,029 --> 00:11:15,410
Laura said it worked quite hard really I

179
00:11:13,040 --> 00:11:17,389
said could then set devices the odd

180
00:11:15,410 --> 00:11:20,170
years to establish this process of

181
00:11:17,389 --> 00:11:23,959
trying to bring in things into a society

182
00:11:20,170 --> 00:11:26,540
do incremental specification first and

183
00:11:23,959 --> 00:11:29,149
then when algorithms were proved we

184
00:11:26,540 --> 00:11:31,370
could move them on into the ITF that was

185
00:11:29,149 --> 00:11:34,370
the intention of the process back then

186
00:11:31,370 --> 00:11:37,970
ten years ago and I think there's

187
00:11:34,370 --> 00:11:39,920
definitely value publishing specs

188
00:11:37,970 --> 00:11:42,709
experimentals as a starting point and

189
00:11:39,920 --> 00:11:44,660
then see what reached when we get high

190
00:11:42,709 --> 00:11:46,790
maturity and deployment experience and

191
00:11:44,660 --> 00:11:50,379
all these things we can move them into

192
00:11:46,790 --> 00:11:50,379
ITF when they're suitable so

193
00:11:56,350 --> 00:12:01,700
David Barack the other cheater cheater

194
00:11:59,570 --> 00:12:04,640
who happens to be here in Montreal I

195
00:12:01,700 --> 00:12:06,260
mostly want a plus-one Magnus's view of

196
00:12:04,640 --> 00:12:10,130
how the world should work is very nice

197
00:12:06,260 --> 00:12:13,730
analogy between ICC RGS relations the

198
00:12:10,130 --> 00:12:16,790
transport area with a CFR G's

199
00:12:13,730 --> 00:12:20,030
relationship to the security area this

200
00:12:16,790 --> 00:12:22,520
is where the deep expertise exists on

201
00:12:20,030 --> 00:12:24,829
the congestion control algorithms

202
00:12:22,520 --> 00:12:28,699
including every last little detail that

203
00:12:24,830 --> 00:12:30,350
you have to get right or else and like

204
00:12:28,700 --> 00:12:32,570
Magnus I'd be very comfortable looking

205
00:12:30,350 --> 00:12:34,790
to this group to nail the algorithms to

206
00:12:32,570 --> 00:12:36,110
the floor and then the rest the IETF TC

207
00:12:34,790 --> 00:12:37,939
GG and Beyond can figure out how to

208
00:12:36,110 --> 00:12:39,740
pilot protocols so just to be clear

209
00:12:37,940 --> 00:12:42,230
David for a moment and we'll be Magnus

210
00:12:39,740 --> 00:12:44,030
as well are you proposing that are you

211
00:12:42,230 --> 00:12:45,560
suggesting that we can keep experimental

212
00:12:44,030 --> 00:12:50,079
that we publish it so many documents

213
00:12:45,560 --> 00:12:53,329
here if you find that useful as part of

214
00:12:50,080 --> 00:13:01,070
maturing and nailing the alchemist the

215
00:12:53,330 --> 00:13:03,200
floor go for it I jumped up when Michael

216
00:13:01,070 --> 00:13:05,450
said you know there wasn't much interest

217
00:13:03,200 --> 00:13:08,300
in people wanting to write things in the

218
00:13:05,450 --> 00:13:11,810
ICC idea and I wondered whether going

219
00:13:08,300 --> 00:13:16,300
back to Magnus is so I'm Bob Briscoe

220
00:13:11,810 --> 00:13:19,459
going back to may was this point that

221
00:13:16,300 --> 00:13:22,430
where where this process came from was

222
00:13:19,460 --> 00:13:26,210
where IETF group would ask the ICC RG to

223
00:13:22,430 --> 00:13:28,040
do expert review and that sort of broken

224
00:13:26,210 --> 00:13:29,360
apart because there's so many transport

225
00:13:28,040 --> 00:13:32,510
protocols now that would use the same

226
00:13:29,360 --> 00:13:35,000
congestion control and so it occurred to

227
00:13:32,510 --> 00:13:38,660
me that TSP WG might be the place that

228
00:13:35,000 --> 00:13:41,740
would ask ICC RG now for all the

229
00:13:38,660 --> 00:13:44,719
transport protocols and it would be a

230
00:13:41,740 --> 00:13:50,900
and then that might that that might give

231
00:13:44,720 --> 00:13:52,490
a bit more cachet to having a ICC RG RSC

232
00:13:50,900 --> 00:13:54,620
about your your congestion control

233
00:13:52,490 --> 00:13:58,900
because it it's something that is used

234
00:13:54,620 --> 00:13:58,900
for a number of transport protocols

235
00:14:04,180 --> 00:14:08,930
Samiha could have been as an as an

236
00:14:06,680 --> 00:14:11,060
individual my opinion is that we should

237
00:14:08,930 --> 00:14:13,579
not talk about processes right now and

238
00:14:11,060 --> 00:14:15,380
like it doesn't really matter we I would

239
00:14:13,580 --> 00:14:17,630
be super excited to work on congestion

240
00:14:15,380 --> 00:14:19,339
controls in a like cooperative manner

241
00:14:17,630 --> 00:14:21,080
where we all talk about problems and

242
00:14:19,339 --> 00:14:22,310
finding solutions together write them

243
00:14:21,080 --> 00:14:24,680
down make sure that we have a

244
00:14:22,310 --> 00:14:26,719
description which is like readable and

245
00:14:24,680 --> 00:14:31,819
implementable and we all like and then

246
00:14:26,720 --> 00:14:33,860
we can figure out what to do with it so

247
00:14:31,820 --> 00:14:35,690
my name is Michael sharp speaking as TCP

248
00:14:33,860 --> 00:14:37,550
I'm sorry I came late because this slide

249
00:14:35,690 --> 00:14:39,110
was not on the other gender so I haven't

250
00:14:37,550 --> 00:14:40,579
seen it there was another room I just

251
00:14:39,110 --> 00:14:43,100
want to point that I disagreed is this

252
00:14:40,580 --> 00:14:45,380
what is written here and it would rico

253
00:14:43,100 --> 00:14:48,740
require recharging tcp Mbita also

254
00:14:45,380 --> 00:14:50,360
disagree right now I just avoid a big

255
00:14:48,740 --> 00:14:51,950
minus one on this one here I don't know

256
00:14:50,360 --> 00:14:53,240
what has been said before but it

257
00:14:51,950 --> 00:15:04,190
disagree with what is written on the

258
00:14:53,240 --> 00:15:07,160
slide I disagree with the publication of

259
00:15:04,190 --> 00:15:09,560
experimental algorithms such as hi start

260
00:15:07,160 --> 00:15:11,779
in this year she because this is in

261
00:15:09,560 --> 00:15:14,479
charter of TCP M so if the authors want

262
00:15:11,779 --> 00:15:17,329
to come to T CBM the Charter allows that

263
00:15:14,480 --> 00:15:19,160
and I is a grievous changing that part

264
00:15:17,329 --> 00:15:25,099
of the Charter right now without having

265
00:15:19,160 --> 00:15:26,719
a bigger process discussion but it

266
00:15:25,100 --> 00:15:28,490
doesn't matter I mean this is Isis here

267
00:15:26,720 --> 00:15:34,640
G right if Isis here G wants to do it

268
00:15:28,490 --> 00:15:36,560
they can do it sure but if that implies

269
00:15:34,640 --> 00:15:37,939
that people will say it will come to

270
00:15:36,560 --> 00:15:40,099
tease you and say that we don't do

271
00:15:37,940 --> 00:15:43,760
things that are in shorter then this is

272
00:15:40,100 --> 00:15:46,700
a different story so just be clear the

273
00:15:43,760 --> 00:15:49,399
slide here does not talk about TCP M the

274
00:15:46,700 --> 00:15:56,450
slightly talks about what ICC RG is

275
00:15:49,399 --> 00:15:58,970
going to do if if this means that people

276
00:15:56,450 --> 00:16:01,160
start showing up to IC c RG more that's

277
00:15:58,970 --> 00:16:02,540
a good thing for IC c RG the last I

278
00:16:01,160 --> 00:16:04,760
think your point is right that there's a

279
00:16:02,540 --> 00:16:06,800
scoping that scoping overlap between the

280
00:16:04,760 --> 00:16:08,360
two for sure and maybe this is something

281
00:16:06,800 --> 00:16:11,599
that we need to go off and discuss what

282
00:16:08,360 --> 00:16:14,090
to do about but I would like to have the

283
00:16:11,600 --> 00:16:16,280
concession about publication do I see

284
00:16:14,090 --> 00:16:18,380
that's a fair that's a fair point but

285
00:16:16,280 --> 00:16:20,839
just as I said the last point here is a

286
00:16:18,380 --> 00:16:22,430
TCP individual draft so stresses to be

287
00:16:20,840 --> 00:16:23,870
and brightener so there is overlap and

288
00:16:22,430 --> 00:16:25,550
what we have here on this bag just to be

289
00:16:23,870 --> 00:16:32,150
clear also that's all being adopted by

290
00:16:25,550 --> 00:16:33,380
DCAM yet so Matt Mathis I think at the

291
00:16:32,150 --> 00:16:35,270
end of the day what we're arguing about

292
00:16:33,380 --> 00:16:41,990
is what you need to do in order to put -

293
00:16:35,270 --> 00:16:43,910
I CCR G - a document name and maybe that

294
00:16:41,990 --> 00:16:46,130
should just be a self selection process

295
00:16:43,910 --> 00:16:49,579
to help some of us find other documents

296
00:16:46,130 --> 00:16:52,430
easier and just recognizing that sort of

297
00:16:49,580 --> 00:16:55,670
the rules are anybody can put - ICC RG

298
00:16:52,430 --> 00:17:01,339
in a file name is sufficient to address

299
00:16:55,670 --> 00:17:05,200
the topics on this line calling you'll

300
00:17:01,340 --> 00:17:09,730
have the last word hi Colin Perkins um I

301
00:17:05,200 --> 00:17:12,140
mean I clearly think you know publishing

302
00:17:09,730 --> 00:17:16,370
congestion control algorithms is this

303
00:17:12,140 --> 00:17:18,470
clearly in scope of ACC oh gee you know

304
00:17:16,369 --> 00:17:20,929
experimental algorithms potentially even

305
00:17:18,470 --> 00:17:22,819
in informational our grooms if we we

306
00:17:20,930 --> 00:17:25,250
believe something is mature enough I

307
00:17:22,819 --> 00:17:29,179
think it is something I see see a G

308
00:17:25,250 --> 00:17:32,210
could certainly do equally this is the

309
00:17:29,180 --> 00:17:34,850
IRT F and doesn't set standards so we

310
00:17:32,210 --> 00:17:37,100
need to be clear on boundaries in the

311
00:17:34,850 --> 00:17:38,719
scope of what we're doing and we need to

312
00:17:37,100 --> 00:17:43,010
very much understand the relation with

313
00:17:38,720 --> 00:17:45,410
the IETF groups and someone brought up

314
00:17:43,010 --> 00:17:49,700
the crypto forum group earlier and

315
00:17:45,410 --> 00:17:51,170
that's been enough that someone brought

316
00:17:49,700 --> 00:17:54,080
up the crypto forum research group

317
00:17:51,170 --> 00:17:56,780
earlier what one of the difficulties

318
00:17:54,080 --> 00:17:58,970
with that group has always been knowing

319
00:17:56,780 --> 00:18:01,520
precisely where its boundaries lie and

320
00:17:58,970 --> 00:18:03,800
what's what what's research and what

321
00:18:01,520 --> 00:18:06,290
what's the standards and I think I think

322
00:18:03,800 --> 00:18:07,730
they generally get it right but it's

323
00:18:06,290 --> 00:18:09,649
always something that they have to be

324
00:18:07,730 --> 00:18:11,390
very careful of so I think if you're

325
00:18:09,650 --> 00:18:17,090
going this way I think it's a good thing

326
00:18:11,390 --> 00:18:18,410
but be careful of the scope thank you so

327
00:18:17,090 --> 00:18:22,520
much for that discussion you'll have to

328
00:18:18,410 --> 00:18:24,500
continue this later in our list or in

329
00:18:22,520 --> 00:18:27,660
Singapore but they're going to move on

330
00:18:24,500 --> 00:18:31,070
next to Neil's presentation

331
00:18:27,660 --> 00:18:31,070
on bbr

332
00:18:46,810 --> 00:18:48,840
Oh

333
00:18:59,260 --> 00:19:02,820
Steen testing there we go

334
00:19:05,320 --> 00:19:13,960
okay hi I'm Neil Cardwell I'm gonna talk

335
00:19:10,510 --> 00:19:15,700
about VBR version two a model based

336
00:19:13,960 --> 00:19:17,770
congestion control give a quick update

337
00:19:15,700 --> 00:19:20,290
of some work that is going on in our

338
00:19:17,770 --> 00:19:23,590
group at Google this joint work with

339
00:19:20,290 --> 00:19:26,409
each on in sohail Priya Ranjan you suck

340
00:19:23,590 --> 00:19:32,379
Ian and Victor and bin and Matt and Van

341
00:19:26,410 --> 00:19:35,080
Jacobson just a quick outline wanted to

342
00:19:32,380 --> 00:19:37,840
talk about an open-source alpha or a

343
00:19:35,080 --> 00:19:38,340
preview release that we sent out last

344
00:19:37,840 --> 00:19:41,280
night

345
00:19:38,340 --> 00:19:44,290
we'll talk about the status of the code

346
00:19:41,280 --> 00:19:46,899
some quick lab test results to give a

347
00:19:44,290 --> 00:19:48,940
flavor of the behavior and and where

348
00:19:46,900 --> 00:19:52,450
we're trying to head and then talk about

349
00:19:48,940 --> 00:19:59,700
the deployment status at Google and wrap

350
00:19:52,450 --> 00:20:02,890
it up so we've just yesterday released

351
00:19:59,700 --> 00:20:07,870
an open-source alpha or preview release

352
00:20:02,890 --> 00:20:09,700
of the TCP BB r v2 code and the quick

353
00:20:07,870 --> 00:20:12,520
release is coming very soon as well I

354
00:20:09,700 --> 00:20:14,710
think probably later on today and the

355
00:20:12,520 --> 00:20:19,179
goal here of this particular release is

356
00:20:14,710 --> 00:20:22,270
to enable research collaborators to do

357
00:20:19,179 --> 00:20:26,980
some testing try out their ideas get

358
00:20:22,270 --> 00:20:29,639
more real-world test miles on PBR and we

359
00:20:26,980 --> 00:20:32,830
encourage researchers to dive in and

360
00:20:29,640 --> 00:20:37,660
evaluate the algorithm the code help

361
00:20:32,830 --> 00:20:40,770
improve the PBR in general and of course

362
00:20:37,660 --> 00:20:43,570
we welcome patches with solutions to

363
00:20:40,770 --> 00:20:47,100
issues that were aware of and issues

364
00:20:43,570 --> 00:20:50,649
that researchers find along the way the

365
00:20:47,100 --> 00:20:53,520
slides have the URL with a hyperlink

366
00:20:50,650 --> 00:20:57,850
that you can drill through to get to the

367
00:20:53,520 --> 00:21:00,100
TCP and quick versions of the code and

368
00:20:57,850 --> 00:21:04,209
in particular I would also note that the

369
00:21:00,100 --> 00:21:08,020
TCP source tree there also includes the

370
00:21:04,210 --> 00:21:09,250
scripts that we use to run these tests

371
00:21:08,020 --> 00:21:11,770
and generate the graphs for this

372
00:21:09,250 --> 00:21:13,090
particular slide deck so that people can

373
00:21:11,770 --> 00:21:15,460
see what the details are and

374
00:21:13,090 --> 00:21:18,459
use those as perhaps a starting point

375
00:21:15,460 --> 00:21:21,130
for experimentation and I would just

376
00:21:18,460 --> 00:21:24,100
remark that these tests are using

377
00:21:21,130 --> 00:21:28,240
network emulation using the Linux net

378
00:21:24,100 --> 00:21:30,730
m-q disk and for an algorithm for an

379
00:21:28,240 --> 00:21:33,400
overview of the algorithm itself I would

380
00:21:30,730 --> 00:21:37,270
point people to the slides in the video

381
00:21:33,400 --> 00:21:41,260
for the IETF 104 presentation as well as

382
00:21:37,270 --> 00:21:45,220
some discussion in the IETF 102 slides

383
00:21:41,260 --> 00:21:48,520
as well so what's new and and what's

384
00:21:45,220 --> 00:21:51,010
changed between BPR version 1 and you

385
00:21:48,520 --> 00:21:52,360
are version 2 we've talked about this a

386
00:21:51,010 --> 00:21:55,230
little bit before but just to sort of

387
00:21:52,360 --> 00:21:57,429
recap the properties that we are

388
00:21:55,230 --> 00:22:01,030
maintaining between version 1 and

389
00:21:57,430 --> 00:22:05,950
version 2 are obtaining high throughput

390
00:22:01,030 --> 00:22:12,129
with a targeted level of random packet

391
00:22:05,950 --> 00:22:14,440
loss and also being able to bound the

392
00:22:12,130 --> 00:22:17,170
amount of queuing delay that a flow is

393
00:22:14,440 --> 00:22:20,020
is causing despite the fact that it

394
00:22:17,170 --> 00:22:23,320
might be traveling through a very buffer

395
00:22:20,020 --> 00:22:24,970
blooded path but then the improvements

396
00:22:23,320 --> 00:22:28,419
that we are looking at from version one

397
00:22:24,970 --> 00:22:32,590
to version two as we've discussed at the

398
00:22:28,420 --> 00:22:36,160
previous IETF include first improved

399
00:22:32,590 --> 00:22:39,550
coexistence when BB rb2 shares a

400
00:22:36,160 --> 00:22:42,190
bottleneck with we know or cubic much

401
00:22:39,550 --> 00:22:46,110
lower loss rates for cases where the

402
00:22:42,190 --> 00:22:50,260
bottleneck buffer is on the smaller side

403
00:22:46,110 --> 00:22:52,330
on higher throughput for paths with high

404
00:22:50,260 --> 00:22:55,840
degrees of aggregation which is common

405
00:22:52,330 --> 00:22:59,409
with Wi-Fi bottlenecks DOCSIS cellular

406
00:22:55,840 --> 00:23:03,370
they all use a lot of aggregation v2

407
00:22:59,410 --> 00:23:10,120
includes support for DC TCP or alpha s

408
00:23:03,370 --> 00:23:12,969
style ecn signals and we've also reduced

409
00:23:10,120 --> 00:23:15,340
the amount of throughput hit that the

410
00:23:12,970 --> 00:23:17,680
flows take for entering the probe RTT

411
00:23:15,340 --> 00:23:21,879
phase where the flows try to cooperate

412
00:23:17,680 --> 00:23:24,280
to expose the min RT t of the path and

413
00:23:21,880 --> 00:23:25,810
so in the following slides we'll run

414
00:23:24,280 --> 00:23:26,990
through a few tests just to sort of

415
00:23:25,810 --> 00:23:30,169
illustrate the

416
00:23:26,990 --> 00:23:32,120
the general flavor of the behavior and

417
00:23:30,170 --> 00:23:34,700
illustrate some of the core properties

418
00:23:32,120 --> 00:23:38,600
that we've maintained or and in some

419
00:23:34,700 --> 00:23:40,370
cases added to v2 and throughout these

420
00:23:38,600 --> 00:23:42,770
the metrics that we're looking at

421
00:23:40,370 --> 00:23:46,429
include throughput cueing latency

422
00:23:42,770 --> 00:23:52,129
retransmit rate fairness that sort of

423
00:23:46,430 --> 00:23:55,160
thing so just a tour through some some

424
00:23:52,130 --> 00:24:01,690
lab test results so first if we think

425
00:23:55,160 --> 00:24:04,280
about surviving random loss v2 continues

426
00:24:01,690 --> 00:24:06,650
to maintain the property that v1 had

427
00:24:04,280 --> 00:24:09,470
that it's able to achieve high

428
00:24:06,650 --> 00:24:11,960
throughput even with a targeted level of

429
00:24:09,470 --> 00:24:15,440
random packet loss so here's an example

430
00:24:11,960 --> 00:24:17,240
of an experiment where we take either we

431
00:24:15,440 --> 00:24:20,720
take one flow and it's either cubic or

432
00:24:17,240 --> 00:24:22,670
bbr or BB our version two and we send it

433
00:24:20,720 --> 00:24:24,890
through an emulated path where the link

434
00:24:22,670 --> 00:24:27,860
bandwidth is one gigabit the min RTT is

435
00:24:24,890 --> 00:24:29,930
hundred milliseconds as the bdp of

436
00:24:27,860 --> 00:24:32,750
buffer and then we do a bulk transfer

437
00:24:29,930 --> 00:24:35,900
with a particular level of random packet

438
00:24:32,750 --> 00:24:39,980
loss spanning orders of magnitude to the

439
00:24:35,900 --> 00:24:43,760
x-axis is log scale here so we can see

440
00:24:39,980 --> 00:24:46,370
that you know cubic is achieving low

441
00:24:43,760 --> 00:24:50,120
throughputs as is well known it's very

442
00:24:46,370 --> 00:24:53,120
sensitive to packet loss whereas PBR

443
00:24:50,120 --> 00:24:55,370
version one is achieving a high

444
00:24:53,120 --> 00:24:59,120
throughput up to about fifteen percent

445
00:24:55,370 --> 00:25:00,320
loss rate we'll sort of see the the

446
00:24:59,120 --> 00:25:00,830
corollaries of this in some of the

447
00:25:00,320 --> 00:25:03,800
follow-on

448
00:25:00,830 --> 00:25:05,689
tests but with PBR version one that

449
00:25:03,800 --> 00:25:08,480
level of loss tolerance is sort of

450
00:25:05,690 --> 00:25:11,840
implicit in the magnitude of the

451
00:25:08,480 --> 00:25:15,920
bandwidth probing that it's doing

452
00:25:11,840 --> 00:25:20,120
by contrast PBR version two is an

453
00:25:15,920 --> 00:25:24,710
algorithm designed around including an

454
00:25:20,120 --> 00:25:28,159
explicit loss threshold of a level of

455
00:25:24,710 --> 00:25:31,640
packet loss that it's trying to target

456
00:25:28,160 --> 00:25:33,860
so for example here the sender was

457
00:25:31,640 --> 00:25:37,660
configured with a loss threshold of two

458
00:25:33,860 --> 00:25:40,639
percent which means that if the

459
00:25:37,660 --> 00:25:42,560
short-term or sort of instantaneous loss

460
00:25:40,640 --> 00:25:44,630
rate that its measured of the last round

461
00:25:42,560 --> 00:25:47,149
trip time is is two percent it takes

462
00:25:44,630 --> 00:25:49,550
that as an explicit hint that that's an

463
00:25:47,150 --> 00:25:53,840
operating point that is has too many

464
00:25:49,550 --> 00:25:55,850
packets in flight and so well and it's

465
00:25:53,840 --> 00:25:58,820
bandwidth probing and then try to leave

466
00:25:55,850 --> 00:26:01,399
some Headroom in the in the path for

467
00:25:58,820 --> 00:26:03,379
other flows to obtain so that's why the

468
00:26:01,400 --> 00:26:07,460
curve has this shape here so you can see

469
00:26:03,380 --> 00:26:09,200
at low at low random loss rates

470
00:26:07,460 --> 00:26:11,210
it's achieving high throughput but it's

471
00:26:09,200 --> 00:26:13,310
not quite as high as BPR version one

472
00:26:11,210 --> 00:26:15,370
because it is trying to explicitly leave

473
00:26:13,310 --> 00:26:18,590
some Headroom in the path or other flows

474
00:26:15,370 --> 00:26:21,979
to discover available bandwidth and to

475
00:26:18,590 --> 00:26:23,330
keep queuing and losses low and then you

476
00:26:21,980 --> 00:26:26,390
can see that the VBR version to

477
00:26:23,330 --> 00:26:30,470
throughput sort of it's reduced right

478
00:26:26,390 --> 00:26:32,750
around the the 1% to 2% range there

479
00:26:30,470 --> 00:26:36,350
which is because of that explicit loss

480
00:26:32,750 --> 00:26:38,930
threshold of 2% why does it fall off at

481
00:26:36,350 --> 00:26:44,949
that point well the if you sort of

482
00:26:38,930 --> 00:26:47,090
configure 1% random loss then you know

483
00:26:44,950 --> 00:26:49,040
obviously the losses are gonna vary

484
00:26:47,090 --> 00:26:50,959
round-trip two round-trip time so you

485
00:26:49,040 --> 00:26:55,220
get this sort of falling off in this

486
00:26:50,960 --> 00:26:57,380
flavor so that's that's one example

487
00:26:55,220 --> 00:27:01,400
another here if we take a scenario where

488
00:26:57,380 --> 00:27:03,680
where we've got a bottleneck with with

489
00:27:01,400 --> 00:27:06,370
deep buffers one thing one property that

490
00:27:03,680 --> 00:27:09,680
we've carried over from b1 to b2 is that

491
00:27:06,370 --> 00:27:12,649
PBR is able to use its model of the

492
00:27:09,680 --> 00:27:15,110
network path and generate an estimate of

493
00:27:12,650 --> 00:27:18,290
the bdp of the path and then bound the

494
00:27:15,110 --> 00:27:21,560
in-flight data based on that estimate to

495
00:27:18,290 --> 00:27:23,990
keep latency queuing latency reasonably

496
00:27:21,560 --> 00:27:26,810
low so here's a test that's very similar

497
00:27:23,990 --> 00:27:31,580
to test that we showed way back in IETF

498
00:27:26,810 --> 00:27:35,870
97 so this is showing either 2 cubic or

499
00:27:31,580 --> 00:27:38,000
two VBR or BB are two flows entering in

500
00:27:35,870 --> 00:27:40,939
staggered times the link bandwidth is 50

501
00:27:38,000 --> 00:27:43,340
megabits minar tt's 30 milliseconds and

502
00:27:40,940 --> 00:27:47,270
then we run a ball test for a while at

503
00:27:43,340 --> 00:27:50,120
various buffer depths and here on the

504
00:27:47,270 --> 00:27:51,260
x-axis is the buffer size as a multiple

505
00:27:50,120 --> 00:27:53,029
of the BDP

506
00:27:51,260 --> 00:27:56,120
and then on the y-axis is the median

507
00:27:53,029 --> 00:27:58,039
smooth round trip time sample that we

508
00:27:56,120 --> 00:28:00,559
obtained and you can see you know as

509
00:27:58,039 --> 00:28:02,629
well not as is well-known cubic will

510
00:28:00,559 --> 00:28:04,940
sort of fill any buffer you give it

511
00:28:02,630 --> 00:28:08,809
quite quickly and sort of hang out at

512
00:28:04,940 --> 00:28:10,549
that buffer occupancy so as the buffers

513
00:28:08,809 --> 00:28:10,879
are bigger than your RT T's are always

514
00:28:10,549 --> 00:28:14,120
bigger

515
00:28:10,880 --> 00:28:15,769
whereas vvr version 1 and 2 no matter

516
00:28:14,120 --> 00:28:18,199
the buffer depth they will have their

517
00:28:15,769 --> 00:28:19,789
estimate of the bdp and they'll bound

518
00:28:18,200 --> 00:28:21,559
their in-flight based on that to keep

519
00:28:19,789 --> 00:28:26,149
the latency within a more reasonable

520
00:28:21,559 --> 00:28:30,470
range so something new in MPP our

521
00:28:26,149 --> 00:28:34,850
version 2 is support for DC TCP or l4 s

522
00:28:30,470 --> 00:28:37,070
style ecn signals so I have a couple

523
00:28:34,850 --> 00:28:41,570
slides here with an experiment with that

524
00:28:37,070 --> 00:28:43,820
kind of ecn so the emulated scenario

525
00:28:41,570 --> 00:28:46,428
here is a one gigabit path with the one

526
00:28:43,820 --> 00:28:50,149
millisecond round-trip time so a more of

527
00:28:46,429 --> 00:28:55,010
a data center style scenario their

528
00:28:50,149 --> 00:28:57,860
bottleneck here is has a essentially a

529
00:28:55,010 --> 00:28:59,899
FIFO with the maximum depth of 1,000

530
00:28:57,860 --> 00:29:02,389
packets which is 12 milliseconds at this

531
00:28:59,899 --> 00:29:06,500
bandwidth but the interesting thing here

532
00:29:02,389 --> 00:29:10,219
is that it's doing DC TCP or l4 s style

533
00:29:06,500 --> 00:29:13,580
ecn marking it on packets that had more

534
00:29:10,220 --> 00:29:15,500
than a 242 microsecond sojourn time

535
00:29:13,580 --> 00:29:17,840
which is basically saying once the queue

536
00:29:15,500 --> 00:29:20,529
gets to be 20 packets or more then

537
00:29:17,840 --> 00:29:24,649
there's a sort of step up and you get

538
00:29:20,529 --> 00:29:28,250
ecn marks on on packets for queues of

539
00:29:24,649 --> 00:29:29,750
that length or longer and so the

540
00:29:28,250 --> 00:29:32,809
behavior we can see here in this kind of

541
00:29:29,750 --> 00:29:36,289
scenario is that for BB our version 1 it

542
00:29:32,809 --> 00:29:38,840
doesn't use ecn and so as you add more

543
00:29:36,289 --> 00:29:43,610
flows on the x-axis you can see that the

544
00:29:38,840 --> 00:29:46,309
queues get quite long and in fact tend

545
00:29:43,610 --> 00:29:50,629
to hang out right around 12 milliseconds

546
00:29:46,309 --> 00:29:53,230
and that's largely because the this test

547
00:29:50,630 --> 00:29:56,630
is only 10 seconds and so the flows are

548
00:29:53,230 --> 00:29:59,480
unable to sort of loosely synchronize

549
00:29:56,630 --> 00:30:01,879
and coordinate to expose them in RTT of

550
00:29:59,480 --> 00:30:03,870
the path and so BB ours is unable to

551
00:30:01,879 --> 00:30:05,850
bound

552
00:30:03,870 --> 00:30:09,600
the in flight in a in a way that we'd

553
00:30:05,850 --> 00:30:12,360
like and on a experiment this chart by

554
00:30:09,600 --> 00:30:13,709
contrast if we look at DC TCP and BB our

555
00:30:12,360 --> 00:30:16,229
version 2 they were able to use those

556
00:30:13,710 --> 00:30:20,460
ECM signals to keep the queue right

557
00:30:16,230 --> 00:30:23,070
around the EC n marking threshold for

558
00:30:20,460 --> 00:30:25,049
smaller numbers of flows and only had

559
00:30:23,070 --> 00:30:27,418
very large numbers of flows do you start

560
00:30:25,049 --> 00:30:30,720
to see it make excursions above that

561
00:30:27,419 --> 00:30:33,270
target range with BB r2 being slightly

562
00:30:30,720 --> 00:30:35,490
more aggressive in its probing and thus

563
00:30:33,270 --> 00:30:38,789
having slightly higher RT T's with

564
00:30:35,490 --> 00:30:40,470
larger numbers of flows if we look so

565
00:30:38,789 --> 00:30:41,820
that's the latency picture in this kind

566
00:30:40,470 --> 00:30:44,640
of experiment we look at the loss rate

567
00:30:41,820 --> 00:30:46,889
picture it's even more dramatic notice

568
00:30:44,640 --> 00:30:51,539
we've switched to a log scale on the

569
00:30:46,890 --> 00:30:55,440
y-axis because the the VBR version 1 B

570
00:30:51,539 --> 00:30:57,629
because it is not doesn't have time to

571
00:30:55,440 --> 00:30:59,490
learn them in RT t of the path it allows

572
00:30:57,630 --> 00:31:01,140
the queue to be quite long and the in

573
00:30:59,490 --> 00:31:03,990
the retransmit rate is it's just about

574
00:31:01,140 --> 00:31:08,250
10% at higher numbers of flows whereas

575
00:31:03,990 --> 00:31:11,309
of course the BB r2 and DC TCP flows are

576
00:31:08,250 --> 00:31:13,559
able to maintain very short queues most

577
00:31:11,309 --> 00:31:20,580
of the time and have retransmit rates

578
00:31:13,559 --> 00:31:24,139
below a tenth of a percent so in the

579
00:31:20,580 --> 00:31:28,049
next experiment we are illustrating

580
00:31:24,140 --> 00:31:30,059
another component of the BB are oh yeah

581
00:31:28,049 --> 00:31:31,830
of course like sure does the fact that

582
00:31:30,059 --> 00:31:33,480
those plots any stuff at the start at 10

583
00:31:31,830 --> 00:31:36,899
mean it was 0 before 10

584
00:31:33,480 --> 00:31:39,870
yeah because of the log scale I was

585
00:31:36,899 --> 00:31:42,510
unable to get the zeros to show up but

586
00:31:39,870 --> 00:31:44,489
yeah if with one flow of course you see

587
00:31:42,510 --> 00:31:49,679
TCP and BB are to have the zero zero

588
00:31:44,490 --> 00:31:52,950
drops oh they were I only tried what I

589
00:31:49,679 --> 00:31:58,950
do I did one for 10 40 and 100 so at 1 &

590
00:31:52,950 --> 00:32:01,230
4 flows they had zero drops so another

591
00:31:58,950 --> 00:32:04,950
property of BB our version two is it has

592
00:32:01,230 --> 00:32:08,159
an explicit strategy for coexisting with

593
00:32:04,950 --> 00:32:11,580
with Reno and cubic flows within a

594
00:32:08,159 --> 00:32:14,360
particular performance envelope and this

595
00:32:11,580 --> 00:32:16,889
slide is just to sort of illustrate the

596
00:32:14,360 --> 00:32:17,639
flavor of that obviously if you're

597
00:32:16,890 --> 00:32:20,479
talking about

598
00:32:17,639 --> 00:32:23,458
is to do a complete evaluation is a very

599
00:32:20,479 --> 00:32:25,109
large and dimensional space lots of

600
00:32:23,459 --> 00:32:27,239
tests you need to run but this is just

601
00:32:25,109 --> 00:32:30,718
one to illustrate some of the key

602
00:32:27,239 --> 00:32:32,729
dynamics here so this is a bulk

603
00:32:30,719 --> 00:32:35,489
throughput test where there's one cubic

604
00:32:32,729 --> 00:32:38,519
flow and one flow that's either media or

605
00:32:35,489 --> 00:32:41,609
VBR version two it's sort of the 15 mil

606
00:32:38,519 --> 00:32:44,369
50 megabit bottleneck with a 30

607
00:32:41,609 --> 00:32:47,908
millisecond 30 millisecond mid RTT and

608
00:32:44,369 --> 00:32:50,488
it's a three second bulk throughput test

609
00:32:47,909 --> 00:32:52,979
with varying about far depths here on

610
00:32:50,489 --> 00:32:55,169
the x-axis and then we're showing the

611
00:32:52,979 --> 00:32:57,989
throughput of the bbr version 1 or

612
00:32:55,169 --> 00:33:01,379
version 2 flow and then basically cubic

613
00:32:57,989 --> 00:33:04,739
gets the rest so we can see here at at

614
00:33:01,379 --> 00:33:08,699
lower buffer depths bbr version 1

615
00:33:04,739 --> 00:33:11,969
grabbed you know sort of 43 to 45

616
00:33:08,700 --> 00:33:14,489
megabits it whereas bbr version 2

617
00:33:11,969 --> 00:33:16,320
because it has an explicit strategy

618
00:33:14,489 --> 00:33:19,229
about how it's going to probe for

619
00:33:16,320 --> 00:33:22,259
bandwidth and bound it's in flight it's

620
00:33:19,229 --> 00:33:24,299
able to have a throughput that's much

621
00:33:22,259 --> 00:33:28,079
closer to the approximate fair share

622
00:33:24,299 --> 00:33:30,329
they're reasonably low buffer depths and

623
00:33:28,079 --> 00:33:36,749
of course as the buffers are deeper and

624
00:33:30,329 --> 00:33:39,239
deeper the cubic tends to build such an

625
00:33:36,749 --> 00:33:41,219
enormous queues that be be our

626
00:33:39,239 --> 00:33:45,169
throughput does tend to gradually fall

627
00:33:41,219 --> 00:33:45,169
off as the buffers are deeper and deeper

628
00:33:45,709 --> 00:33:52,440
but we expect in the in the common case

629
00:33:48,029 --> 00:33:55,109
the the buffers should tend to be around

630
00:33:52,440 --> 00:33:57,450
one BTP or to be DP and in well

631
00:33:55,109 --> 00:33:58,619
provisioned networks so we expect that

632
00:33:57,450 --> 00:34:03,149
the common case should be quite

633
00:33:58,619 --> 00:34:05,399
reasonable so another aspect that we

634
00:34:03,149 --> 00:34:11,489
wanted to highlight was that bbr version

635
00:34:05,399 --> 00:34:15,418
2 because of it uses loss as a signal

636
00:34:11,489 --> 00:34:17,489
and uses that to dynamically adapt the

637
00:34:15,418 --> 00:34:20,308
amount of in-flight data it's willing to

638
00:34:17,489 --> 00:34:21,149
maintain it has considerably lower loss

639
00:34:20,309 --> 00:34:25,019
rates than v1

640
00:34:21,149 --> 00:34:26,699
in shallow buffer situations so in this

641
00:34:25,018 --> 00:34:31,060
experiment we're looking at the

642
00:34:26,699 --> 00:34:34,239
retransmit rate for an ensemble of bulk

643
00:34:31,060 --> 00:34:37,750
close the here the link bandwidth has a

644
00:34:34,239 --> 00:34:40,419
gigabit min RTT is 100 milliseconds it's

645
00:34:37,750 --> 00:34:43,270
quite a big BDP and then it's a

646
00:34:40,420 --> 00:34:45,700
five-minute test and the buffer here is

647
00:34:43,270 --> 00:34:49,750
very tiny relative to the BGP it's about

648
00:34:45,699 --> 00:34:52,149
2% of the bdp but that can be quite

649
00:34:49,750 --> 00:34:55,380
representative of the situation you have

650
00:34:52,150 --> 00:34:58,150
if you build a high speed when out of

651
00:34:55,380 --> 00:35:00,280
commodities which is with shia labeouf

652
00:34:58,150 --> 00:35:03,760
errs this is the kind of scenario that

653
00:35:00,280 --> 00:35:07,510
the flows will need to deal with and so

654
00:35:03,760 --> 00:35:11,230
here we can see that cubic by virtue of

655
00:35:07,510 --> 00:35:16,050
its design and sensitivity to loss keeps

656
00:35:11,230 --> 00:35:19,150
the loss rate quite low BB our version 1

657
00:35:16,050 --> 00:35:21,550
because it is agnostic to loss and

658
00:35:19,150 --> 00:35:25,420
because of a couple other factors tends

659
00:35:21,550 --> 00:35:27,940
to have tends toward a 15% loss rate if

660
00:35:25,420 --> 00:35:30,400
there are large numbers of flows and you

661
00:35:27,940 --> 00:35:33,160
can see that in the PPR version one line

662
00:35:30,400 --> 00:35:37,750
or by contrast PPR version two because

663
00:35:33,160 --> 00:35:40,839
of its model is more rich and includes

664
00:35:37,750 --> 00:35:43,900
loss as a signal to feed that model it's

665
00:35:40,840 --> 00:35:47,290
able to keep the loss rates bounded in

666
00:35:43,900 --> 00:35:48,450
the region that is below its targeted

667
00:35:47,290 --> 00:35:51,040
lost threshold

668
00:35:48,450 --> 00:35:54,029
did you was there a question that you

669
00:35:51,040 --> 00:35:56,770
wanted okay thank you

670
00:35:54,030 --> 00:35:58,090
so those are the labs lab tests that we

671
00:35:56,770 --> 00:36:02,200
wanted to sort of run through to convey

672
00:35:58,090 --> 00:36:03,310
a flavor obviously this is is algorithm

673
00:36:02,200 --> 00:36:06,970
and the code is still a work in progress

674
00:36:03,310 --> 00:36:08,740
and obviously more tests will need to be

675
00:36:06,970 --> 00:36:10,810
run but we wanted to sort of convey the

676
00:36:08,740 --> 00:36:11,979
the flavor of where we're at and where

677
00:36:10,810 --> 00:36:13,750
we would like to have it in the

678
00:36:11,980 --> 00:36:18,070
properties that we'd like to maintain

679
00:36:13,750 --> 00:36:20,680
and to add so a quick note on the status

680
00:36:18,070 --> 00:36:23,290
of the the algorithm in the code so um

681
00:36:20,680 --> 00:36:25,450
there are some remaining issues that we

682
00:36:23,290 --> 00:36:28,779
are aware of in the PPR B 2 algorithm

683
00:36:25,450 --> 00:36:31,180
where we'd like to improve things it can

684
00:36:28,780 --> 00:36:33,580
happen that flows that experience ecn or

685
00:36:31,180 --> 00:36:36,700
loss early on in their lifetime but

686
00:36:33,580 --> 00:36:41,350
never thereafter sometimes don't reach

687
00:36:36,700 --> 00:36:43,180
their full fair share we can have Q

688
00:36:41,350 --> 00:36:44,830
pressure that's higher than desired when

689
00:36:43,180 --> 00:36:49,419
there are large aggregates of

690
00:36:44,830 --> 00:36:51,220
the BRV 2 flows and we can and it's also

691
00:36:49,420 --> 00:36:54,640
case that the the ecn response is not

692
00:36:51,220 --> 00:36:56,830
really well tuned for both for very long

693
00:36:54,640 --> 00:37:00,279
our TTS in the hundreds of milliseconds

694
00:36:56,830 --> 00:37:03,180
and it's also not quite tuned for cases

695
00:37:00,280 --> 00:37:05,380
with more flows than slots in the bdp

696
00:37:03,180 --> 00:37:08,490
and I would note that both of those

697
00:37:05,380 --> 00:37:14,830
issues are sort of shared with DC TCP

698
00:37:08,490 --> 00:37:18,700
which is also so far intended and and

699
00:37:14,830 --> 00:37:22,720
deployed so far for cases within a data

700
00:37:18,700 --> 00:37:24,730
center so these are sort of not problems

701
00:37:22,720 --> 00:37:25,480
unique to PBR version two but sort of

702
00:37:24,730 --> 00:37:28,630
more general

703
00:37:25,480 --> 00:37:30,850
in the ecn ecosystem and I'm glad that

704
00:37:28,630 --> 00:37:34,420
there are people doing work on in this

705
00:37:30,850 --> 00:37:36,100
area and the l4s community and of course

706
00:37:34,420 --> 00:37:39,640
we're continuing to refine the algorithm

707
00:37:36,100 --> 00:37:44,080
and we welcome ideas about how to handle

708
00:37:39,640 --> 00:37:47,379
all of these issues so where are we in

709
00:37:44,080 --> 00:37:51,190
our deployment with this code as I

710
00:37:47,380 --> 00:37:53,080
mentioned in March we do have a global

711
00:37:51,190 --> 00:37:55,930
experiment running on YouTube for a few

712
00:37:53,080 --> 00:37:59,590
percent of users and what we see so far

713
00:37:55,930 --> 00:38:01,390
is that it it's has much lower queuing

714
00:37:59,590 --> 00:38:03,130
delays than cubic and even slightly

715
00:38:01,390 --> 00:38:07,120
lower than PBR version one

716
00:38:03,130 --> 00:38:09,700
it reduces considerably the the packet

717
00:38:07,120 --> 00:38:13,390
loss rates versus V one and gets them

718
00:38:09,700 --> 00:38:16,830
closer to cubic then then V one

719
00:38:13,390 --> 00:38:19,690
we're also using this code internally in

720
00:38:16,830 --> 00:38:22,180
experiments between and within some

721
00:38:19,690 --> 00:38:26,200
Google Data Centers and what we're

722
00:38:22,180 --> 00:38:30,129
seeing there is that bbr v2 has lower

723
00:38:26,200 --> 00:38:32,370
tail latency compared to the previous DC

724
00:38:30,130 --> 00:38:36,370
TCP style congestion control that was

725
00:38:32,370 --> 00:38:40,210
it's deployed for TCP within Google Data

726
00:38:36,370 --> 00:38:42,700
Centers and we also in our deployment

727
00:38:40,210 --> 00:38:45,580
and testing we found in really

728
00:38:42,700 --> 00:38:48,790
interesting performance issue with the

729
00:38:45,580 --> 00:38:52,240
linux AK implementation that turned out

730
00:38:48,790 --> 00:38:55,810
to be a surprisingly high impact issue

731
00:38:52,240 --> 00:38:57,609
for for data center performance which we

732
00:38:55,810 --> 00:38:58,630
can talk about offline but the basic

733
00:38:57,610 --> 00:39:00,809
flavor is kind of inch

734
00:38:58,630 --> 00:39:04,119
seeing where the the Linux

735
00:39:00,809 --> 00:39:07,269
acknowledgement code actually does not

736
00:39:04,119 --> 00:39:09,819
just check to see if you've accumulated

737
00:39:07,269 --> 00:39:15,970
more than one MSS of unacknowledged data

738
00:39:09,819 --> 00:39:18,279
it also wants to be able to advertise a

739
00:39:15,970 --> 00:39:19,930
receive window that's as big as the

740
00:39:18,279 --> 00:39:23,019
previous receive window it advertised

741
00:39:19,930 --> 00:39:24,910
which essentially means that it very

742
00:39:23,019 --> 00:39:26,799
often ends up waiting for the

743
00:39:24,910 --> 00:39:29,230
application to read all the data out of

744
00:39:26,799 --> 00:39:31,750
the socket before it then sends an

745
00:39:29,230 --> 00:39:33,579
acknowledgement advertising the same and

746
00:39:31,750 --> 00:39:36,519
I can see Matt frowning over here and

747
00:39:33,579 --> 00:39:38,710
then it before it decides to send an

748
00:39:36,519 --> 00:39:42,189
acknowledgement which can sort of

749
00:39:38,710 --> 00:39:44,710
include the application in the RTT loop

750
00:39:42,190 --> 00:39:49,210
of the congestion control and cause some

751
00:39:44,710 --> 00:39:51,670
serious latency issues anyway that was

752
00:39:49,210 --> 00:39:54,460
an interesting issue and it's it's a

753
00:39:51,670 --> 00:39:58,329
common issue too in the core TCP stack

754
00:39:54,460 --> 00:39:59,980
but we happen to run into it during this

755
00:39:58,329 --> 00:40:02,200
testing of this transition we can talk

756
00:39:59,980 --> 00:40:05,470
about it offline a few queries anyway

757
00:40:02,200 --> 00:40:07,720
we're continuing to iterate using both

758
00:40:05,470 --> 00:40:11,379
production experiments as part of the

759
00:40:07,720 --> 00:40:16,959
gradual rollout and also control lab

760
00:40:11,380 --> 00:40:19,299
tests so in conclusion we've open

761
00:40:16,960 --> 00:40:22,930
sourced a first sort of alpha alpha or

762
00:40:19,299 --> 00:40:25,450
preview release of PBR version two it's

763
00:40:22,930 --> 00:40:27,730
ready for folks to take it out for a

764
00:40:25,450 --> 00:40:30,549
spin in a research experiment context

765
00:40:27,730 --> 00:40:33,849
and we obviously invite researchers to

766
00:40:30,549 --> 00:40:37,000
share ideas for test cases or test

767
00:40:33,849 --> 00:40:39,789
Suites metrics that they think we

768
00:40:37,000 --> 00:40:43,000
shouldn't be looking at sharing their

769
00:40:39,789 --> 00:40:45,460
test results is great we're more than

770
00:40:43,000 --> 00:40:47,619
open to algorithm or code ideas or

771
00:40:45,460 --> 00:40:49,809
patches and we're always happy to look

772
00:40:47,619 --> 00:40:51,640
at packet traces if you're taking a

773
00:40:49,809 --> 00:40:56,589
first bin and run into a surprising

774
00:40:51,640 --> 00:41:00,779
issue and in conclusion work on PBR V 2

775
00:40:56,589 --> 00:41:04,180
continues both at Google and we're also

776
00:41:00,779 --> 00:41:07,569
in communication with the FreeBSD TCP

777
00:41:04,180 --> 00:41:09,890
team at Netflix who's also working on

778
00:41:07,569 --> 00:41:14,259
bbr as well

779
00:41:09,890 --> 00:41:15,558
so yeah any any questions or comments

780
00:41:14,259 --> 00:41:17,930
thank you

781
00:41:15,559 --> 00:41:20,089
so Goering Fair has thanks for bringing

782
00:41:17,930 --> 00:41:22,640
this here because it's significantly

783
00:41:20,089 --> 00:41:24,380
different to the previous bbr instances

784
00:41:22,640 --> 00:41:24,799
and it seems to be having a really good

785
00:41:24,380 --> 00:41:27,170
way

786
00:41:24,799 --> 00:41:29,420
how much ditch have you on different

787
00:41:27,170 --> 00:41:31,459
experimental results in your labs

788
00:41:29,420 --> 00:41:32,809
because it looks like your points didn't

789
00:41:31,459 --> 00:41:34,219
have a confidence intervals or anything

790
00:41:32,809 --> 00:41:35,569
so I'm kind of wondering whether you to

791
00:41:34,219 --> 00:41:37,309
lots of different snares different

792
00:41:35,569 --> 00:41:38,979
delays different traffic mixes or

793
00:41:37,309 --> 00:41:41,239
whether it was really just a first cut

794
00:41:38,979 --> 00:41:47,808
yeah I think I would characterize this

795
00:41:41,239 --> 00:41:50,119
is the first cut to give a sense of the

796
00:41:47,809 --> 00:41:51,440
flavor of the behaviors that we're

797
00:41:50,119 --> 00:41:54,619
looking for the properties that we're

798
00:41:51,440 --> 00:41:57,709
looking for and I I agree and take your

799
00:41:54,619 --> 00:41:59,209
point that a congestion control needs a

800
00:41:57,709 --> 00:42:01,848
lot more experiments than the ones we

801
00:41:59,209 --> 00:42:05,719
showed on the slide before you say you

802
00:42:01,849 --> 00:42:07,279
know you're ready for yes

803
00:42:05,719 --> 00:42:09,049
to illustrate as I said I'm pleased you

804
00:42:07,279 --> 00:42:11,390
brought this here I'm curious about the

805
00:42:09,049 --> 00:42:13,788
high RTT thing because I'm I have size

806
00:42:11,390 --> 00:42:16,609
later on in the ITF about high RTT and

807
00:42:13,789 --> 00:42:19,190
other things you think there's a way we

808
00:42:16,609 --> 00:42:22,239
could look at high RTT in this and

809
00:42:19,190 --> 00:42:26,719
figure out what to do you mean for the

810
00:42:22,239 --> 00:42:31,969
DCN in a high RTT question yeah yeah

811
00:42:26,719 --> 00:42:34,190
absolutely so the I think the direction

812
00:42:31,969 --> 00:42:35,390
that we so I actually haven't in I'm

813
00:42:34,190 --> 00:42:36,769
working with an intern right now to

814
00:42:35,390 --> 00:42:40,578
actually do experiments in this

815
00:42:36,769 --> 00:42:44,359
direction the I think my hunch is that

816
00:42:40,579 --> 00:42:47,569
what makes sense would be to include a

817
00:42:44,359 --> 00:42:51,499
response to ecn that is in the rate

818
00:42:47,569 --> 00:42:53,779
space so that flows with different itt's

819
00:42:51,499 --> 00:42:55,308
as if they're responding in an in the

820
00:42:53,779 --> 00:42:58,339
rate dimension then everybody can

821
00:42:55,309 --> 00:43:01,279
respond in a similar way despite having

822
00:42:58,339 --> 00:43:03,589
different itt's the issue with long RT

823
00:43:01,279 --> 00:43:07,190
T's and C purely see you and based

824
00:43:03,589 --> 00:43:11,989
algorithm that sort of happens

825
00:43:07,190 --> 00:43:15,109
immediately is the the long RT t flows

826
00:43:11,989 --> 00:43:16,940
in the stream of ecn signals they they

827
00:43:15,109 --> 00:43:19,848
get will sort of see an oscillation

828
00:43:16,940 --> 00:43:22,009
between EC unmarked and clear and it can

829
00:43:19,849 --> 00:43:23,630
happen on the scale of milliseconds but

830
00:43:22,009 --> 00:43:25,460
if you're RT long you know if you're art

831
00:43:23,630 --> 00:43:27,890
100 milliseconds you may see a whole

832
00:43:25,460 --> 00:43:30,470
saga of up and down and up and down but

833
00:43:27,890 --> 00:43:33,170
that means that every RTT of yours has

834
00:43:30,470 --> 00:43:35,359
ecn marks and so using a classical style

835
00:43:33,170 --> 00:43:38,030
algorithm you do multiplicative decrease

836
00:43:35,360 --> 00:43:40,820
every single RTT of your life until you

837
00:43:38,030 --> 00:43:44,090
converge down to a Sealand of two and if

838
00:43:40,820 --> 00:43:46,490
you're sharing with a flow that has an

839
00:43:44,090 --> 00:43:48,770
RTT of 50 microseconds and it has a

840
00:43:46,490 --> 00:43:50,149
Seawind of - it's quite happy it's got a

841
00:43:48,770 --> 00:43:52,190
nice high throughput if you're but

842
00:43:50,150 --> 00:43:53,630
obviously if you're RTD 100 milliseconds

843
00:43:52,190 --> 00:43:56,630
you're Sealand of - makes you very

844
00:43:53,630 --> 00:43:58,910
unhappy so but I think if if all the

845
00:43:56,630 --> 00:44:01,520
flows are responding in rate by reducing

846
00:43:58,910 --> 00:44:04,120
the rate that might allow us to have

847
00:44:01,520 --> 00:44:08,440
good solution here I think that's fun

848
00:44:04,120 --> 00:44:11,930
look to see more of them okay thank you

849
00:44:08,440 --> 00:44:15,620
thanks Neil Martin Duke first question

850
00:44:11,930 --> 00:44:19,970
are you planning to do a draft of v2 and

851
00:44:15,620 --> 00:44:23,359
if so how long you wait yes so we are

852
00:44:19,970 --> 00:44:24,970
one of our next to do items now that the

853
00:44:23,360 --> 00:44:27,680
code is out there is to update the

854
00:44:24,970 --> 00:44:29,980
internet draft that currently is

855
00:44:27,680 --> 00:44:34,640
describing v1 and update it to cover v2

856
00:44:29,980 --> 00:44:36,110
that is definitely something we agree is

857
00:44:34,640 --> 00:44:38,779
important and we know it's particularly

858
00:44:36,110 --> 00:44:42,050
important for folks that are part of the

859
00:44:38,780 --> 00:44:43,370
open-source ecosystem so we're yes

860
00:44:42,050 --> 00:44:45,500
that's on our to-do list

861
00:44:43,370 --> 00:44:47,990
we actually independent implementation

862
00:44:45,500 --> 00:44:49,370
we find it very useful to have 60 points

863
00:44:47,990 --> 00:44:52,640
like the drafts rather than just trying

864
00:44:49,370 --> 00:44:54,740
to track your code sure seven question

865
00:44:52,640 --> 00:44:56,060
could we return to the loss versus

866
00:44:54,740 --> 00:45:01,310
throughput graph which i think is the

867
00:44:56,060 --> 00:45:03,170
first graph yeah yes okay so I I'm not

868
00:45:01,310 --> 00:45:06,920
sure I fully understood what you said

869
00:45:03,170 --> 00:45:08,510
here so the cliff at 2% is a purely

870
00:45:06,920 --> 00:45:12,860
there's a lot of configuration parameter

871
00:45:08,510 --> 00:45:15,440
that's right that's right okay so so

872
00:45:12,860 --> 00:45:17,750
that's fine so if you didn't care about

873
00:45:15,440 --> 00:45:18,950
loss rate you could just turn it up to I

874
00:45:17,750 --> 00:45:21,410
guess that's 20 and you would

875
00:45:18,950 --> 00:45:23,569
essentially match the BB r1 curve at

876
00:45:21,410 --> 00:45:25,520
least where the cliff is I believe so

877
00:45:23,570 --> 00:45:26,870
yes okay so but going all the way to the

878
00:45:25,520 --> 00:45:29,780
left edge of the graph you're

879
00:45:26,870 --> 00:45:32,750
sacrificing about 10% of your throughput

880
00:45:29,780 --> 00:45:34,700
and is that so what is the trade-off

881
00:45:32,750 --> 00:45:36,960
there is that you are friendlier to

882
00:45:34,700 --> 00:45:41,069
cubic in that regime

883
00:45:36,960 --> 00:45:44,550
the so the the basic flavor there is

884
00:45:41,070 --> 00:45:47,670
that PBR b2 is trying to leave some

885
00:45:44,550 --> 00:45:49,860
Headroom in the system either in free

886
00:45:47,670 --> 00:45:52,620
slots in the buffer or free slots in the

887
00:45:49,860 --> 00:45:54,540
wire so that newly entering flows can

888
00:45:52,620 --> 00:45:57,630
grab some bandwidth without causing

889
00:45:54,540 --> 00:46:01,290
massive packet loss and so that flows

890
00:45:57,630 --> 00:46:02,580
with lower throughput can increase can

891
00:46:01,290 --> 00:46:05,100
discover that more bandwidth is

892
00:46:02,580 --> 00:46:08,549
available again without causing massive

893
00:46:05,100 --> 00:46:13,080
packet loss so the the this is kind of

894
00:46:08,550 --> 00:46:16,740
similar to for example the the rapid

895
00:46:13,080 --> 00:46:20,759
convergence mechanism in cubic where if

896
00:46:16,740 --> 00:46:22,350
cubic thinks that its fair share is

897
00:46:20,760 --> 00:46:28,380
falling because somebody else is entered

898
00:46:22,350 --> 00:46:31,020
then the cubic curve actually sort of

899
00:46:28,380 --> 00:46:35,460
spends a lot of time at 85 percent of

900
00:46:31,020 --> 00:46:37,110
the previous W max instead of 100

901
00:46:35,460 --> 00:46:39,300
percent in order to leave the headroom

902
00:46:37,110 --> 00:46:40,890
for other flows to sort of discover that

903
00:46:39,300 --> 00:46:42,720
there is more bandwidth available so

904
00:46:40,890 --> 00:46:45,810
mostly fairness but you're also gaining

905
00:46:42,720 --> 00:46:48,089
a some RTT benefit yeah exactly so this

906
00:46:45,810 --> 00:46:50,970
is primarily been motivated by fairness

907
00:46:48,090 --> 00:46:56,240
but also it reduces Q pressure and lean

908
00:46:50,970 --> 00:46:56,240
C impact loss it also to pointing in the

909
00:47:00,900 --> 00:47:03,949
[Music]

910
00:47:12,530 --> 00:47:17,610
yes

911
00:47:13,740 --> 00:47:19,680
okay so first question is why the

912
00:47:17,610 --> 00:47:21,930
traditional choices for buffer sizes I

913
00:47:19,680 --> 00:47:23,819
noticed that you went from one time VDP

914
00:47:21,930 --> 00:47:28,799
to about 100 times B DP and for shallow

915
00:47:23,820 --> 00:47:34,050
buffers point two so the question is why

916
00:47:28,800 --> 00:47:38,420
didn't you sell in those sizes we came

917
00:47:34,050 --> 00:47:38,420
out the tits it was catch a question

918
00:47:49,470 --> 00:48:04,339
it's a going back in here um we lost but

919
00:48:01,170 --> 00:48:06,239
I mean if you can mute your mic when

920
00:48:04,339 --> 00:48:08,788
you're not speaking that would be

921
00:48:06,239 --> 00:48:15,359
helpful so if you come back on the

922
00:48:08,789 --> 00:48:17,759
meanwhile Jake okay yeah I J holin with

923
00:48:15,359 --> 00:48:20,369
regard to the l4 s style ACN marking

924
00:48:17,759 --> 00:48:24,509
that's referring to the the receiver

925
00:48:20,369 --> 00:48:28,499
response being 1c he bit her or ze mark

926
00:48:24,509 --> 00:48:31,349
or is that yeah it's her so it's

927
00:48:28,499 --> 00:48:35,999
referring to both the fact that it's

928
00:48:31,349 --> 00:48:39,450
expecting the ecn marks to happen at a

929
00:48:35,999 --> 00:48:43,890
low threshold of Q and the fact that we

930
00:48:39,450 --> 00:48:46,919
are expecting the receiver to reflect

931
00:48:43,890 --> 00:48:52,348
the EC on marks on a sort of per packet

932
00:48:46,920 --> 00:48:54,869
basis rather than echoing the see e

933
00:48:52,349 --> 00:48:56,549
marks as having been experienced for an

934
00:48:54,869 --> 00:48:59,160
entire round trip time and until that's

935
00:48:56,549 --> 00:49:02,940
acknowledged with the CW are a bit so

936
00:48:59,160 --> 00:49:06,629
it's the essentially DC TCP style or ecn

937
00:49:02,940 --> 00:49:08,219
yeah did you try the easy end with the

938
00:49:06,630 --> 00:49:12,059
with like the home routers that do the

939
00:49:08,219 --> 00:49:17,400
marketing person uh no we haven't tried

940
00:49:12,059 --> 00:49:19,529
that yet my men just standing is that

941
00:49:17,400 --> 00:49:22,979
most of the home routers that do easy on

942
00:49:19,529 --> 00:49:27,660
marking our RFC three one six eight

943
00:49:22,979 --> 00:49:33,859
style it's so and we don't really intend

944
00:49:27,660 --> 00:49:42,890
to have B BRV to use that style of EC on

945
00:49:33,859 --> 00:49:42,890
yeah okay thank you thank you

946
00:49:43,440 --> 00:49:48,370
yeah sorry Praveen is trying to get a

947
00:49:46,150 --> 00:49:49,810
headset so if you can do the Arlette but

948
00:49:48,370 --> 00:49:51,490
stuff first and then come back to

949
00:49:49,810 --> 00:49:56,590
proving data so we make that part of

950
00:49:51,490 --> 00:49:59,740
these work it'd be better if we could do

951
00:49:56,590 --> 00:50:02,380
thanks again me the plan was to have

952
00:49:59,740 --> 00:50:15,359
that that because I like that sort of

953
00:50:02,380 --> 00:50:15,360
builds on that what do you think Marcelo

954
00:50:17,580 --> 00:50:31,840
it doesn't work for you right

955
00:50:29,400 --> 00:50:33,160
well gates he said he would also be

956
00:50:31,840 --> 00:50:35,260
willing to give it a shot without an

957
00:50:33,160 --> 00:50:42,730
headset but I'm not convinced that it

958
00:50:35,260 --> 00:50:50,170
was but then he won't hear anything from

959
00:50:42,730 --> 00:50:52,900
us if you want to stop if you want to

960
00:50:50,170 --> 00:50:55,180
give it a try you can give it a try I

961
00:50:52,900 --> 00:50:57,010
mean probably hearing this if you want

962
00:50:55,180 --> 00:50:59,490
to give it a try come on let's give it a

963
00:50:57,010 --> 00:51:03,060
shot because it might be better if

964
00:50:59,490 --> 00:51:03,060
Marcelo follows you

965
00:51:13,780 --> 00:51:37,180
can you hear us yes very need your mic

966
00:51:31,600 --> 00:51:38,110
first so if you can speak if you can

967
00:51:37,180 --> 00:51:49,270
move you Mike

968
00:51:38,110 --> 00:51:50,260
now try questions I think that's

969
00:51:49,270 --> 00:51:53,640
perfectly alright

970
00:51:50,260 --> 00:51:53,640
this is not a long talk

971
00:52:25,380 --> 00:52:30,760
no you audios freaking super badly okay

972
00:52:28,840 --> 00:52:32,770
so let me try to figure out that sub

973
00:52:30,760 --> 00:52:38,290
situation then and you can both Marshall

974
00:52:32,770 --> 00:52:40,840
first so you can you move back from the

975
00:52:38,290 --> 00:52:46,390
mic just a little bit can you hear me

976
00:52:40,840 --> 00:52:49,540
now okay let's do that

977
00:52:46,390 --> 00:52:52,770
and I'll be more than are like that and

978
00:52:49,540 --> 00:52:52,770
we'll see when yeah that's it

979
00:53:00,960 --> 00:53:13,480
okay yeah okay good afternoon I am

980
00:53:08,799 --> 00:53:18,759
Marcello Angelo and I'm going to talk

981
00:53:13,480 --> 00:53:21,609
about receive based LED but mechanism

982
00:53:18,759 --> 00:53:25,650
this work that we have done with Alberto

983
00:53:21,609 --> 00:53:33,029
Ana Praveen Daniel and Gabi

984
00:53:25,650 --> 00:53:37,180
so I guess well more or less

985
00:53:33,029 --> 00:53:39,490
so I guess everyone won't know here

986
00:53:37,180 --> 00:53:41,769
knows what LED but is right I'll let

987
00:53:39,490 --> 00:53:44,399
buddy is a congestion controller that

988
00:53:41,769 --> 00:53:47,109
provides less than my best effort

989
00:53:44,400 --> 00:53:49,390
essentially defines a queuing delay

990
00:53:47,109 --> 00:53:51,308
target team right and increases and

991
00:53:49,390 --> 00:53:54,730
decreases the congestion we know based

992
00:53:51,309 --> 00:53:57,009
on whether the measured queuing delay is

993
00:53:54,730 --> 00:53:59,769
above or below the target

994
00:53:57,009 --> 00:54:02,440
all right the queuing delay space the

995
00:53:59,769 --> 00:54:05,910
Qun will delays inferred from the

996
00:54:02,440 --> 00:54:10,329
one-way delay experienced by the packets

997
00:54:05,910 --> 00:54:12,489
so let but there has been a few

998
00:54:10,329 --> 00:54:15,400
shortcomings identified regarding LED

999
00:54:12,489 --> 00:54:18,849
but in particularly exhibits or internet

1000
00:54:15,400 --> 00:54:21,609
but fairness properties and they have

1001
00:54:18,849 --> 00:54:24,549
been reported difficulties measuring the

1002
00:54:21,609 --> 00:54:26,828
one-way delay in particular in tcp even

1003
00:54:24,549 --> 00:54:28,230
if you use the tcp time stop option

1004
00:54:26,829 --> 00:54:30,460
right

1005
00:54:28,230 --> 00:54:32,410
the reason for these are several

1006
00:54:30,460 --> 00:54:34,359
including the fact that you don't know

1007
00:54:32,410 --> 00:54:39,368
what the time the timestamps are

1008
00:54:34,359 --> 00:54:42,130
expressed on and also that when you have

1009
00:54:39,369 --> 00:54:46,329
clock drift it's very hard to measure

1010
00:54:42,130 --> 00:54:47,980
because because you're using this you're

1011
00:54:46,329 --> 00:54:50,470
using these measurements in order to try

1012
00:54:47,980 --> 00:54:53,559
to determine how much you're sending

1013
00:54:50,470 --> 00:55:04,750
it's hard to distinguish error from log

1014
00:54:53,559 --> 00:55:08,740
right so actually

1015
00:55:04,750 --> 00:55:12,580
yes thank you okay

1016
00:55:08,740 --> 00:55:16,149
sorry well not so what we were proposing

1017
00:55:12,580 --> 00:55:19,150
here is a receive driven version of late

1018
00:55:16,150 --> 00:55:22,330
right so the idea that we are proposing

1019
00:55:19,150 --> 00:55:24,640
here is we're going to make a congestion

1020
00:55:22,330 --> 00:55:28,930
controller that runs on the receiver

1021
00:55:24,640 --> 00:55:32,140
right that is less than best effort is

1022
00:55:28,930 --> 00:55:34,120
inspiring LED but well it's very close

1023
00:55:32,140 --> 00:55:35,859
to let but plus plus that's why it was

1024
00:55:34,120 --> 00:55:37,630
interesting for Praveen to present LED

1025
00:55:35,860 --> 00:55:39,880
but plus plus before him and I present

1026
00:55:37,630 --> 00:55:42,340
this first but later but that's fine

1027
00:55:39,880 --> 00:55:44,350
right so the idea here is a congestion

1028
00:55:42,340 --> 00:55:46,360
control would run in the in the receiver

1029
00:55:44,350 --> 00:55:48,339
and the receiver we contract will

1030
00:55:46,360 --> 00:55:52,450
control the sender through the receiver

1031
00:55:48,340 --> 00:55:55,690
wind okay one significant change is that

1032
00:55:52,450 --> 00:55:57,669
we're going to measure the RTT instead

1033
00:55:55,690 --> 00:55:58,810
of measuring the one-way delay so we're

1034
00:55:57,670 --> 00:56:01,660
going to estimate the queuing delay

1035
00:55:58,810 --> 00:56:05,830
using the RTT rather than the one-way

1036
00:56:01,660 --> 00:56:08,950
delay so what are the motivations why we

1037
00:56:05,830 --> 00:56:11,230
want to do this so so we have

1038
00:56:08,950 --> 00:56:16,990
essentially three motivations to

1039
00:56:11,230 --> 00:56:20,410
regarding deployment models one is this

1040
00:56:16,990 --> 00:56:22,990
is widely use for distributing operating

1041
00:56:20,410 --> 00:56:24,640
systems updates right some operating

1042
00:56:22,990 --> 00:56:28,930
systems updates are being done through

1043
00:56:24,640 --> 00:56:32,109
syrians and there have been observed

1044
00:56:28,930 --> 00:56:35,379
that in many cases CDN surrogates do not

1045
00:56:32,110 --> 00:56:37,360
support LED but and also it's hard to

1046
00:56:35,380 --> 00:56:39,520
convey well there is no signal in to

1047
00:56:37,360 --> 00:56:43,830
convey if they did support that but

1048
00:56:39,520 --> 00:56:46,780
which content must be distributed using

1049
00:56:43,830 --> 00:56:49,270
TCP cubic and which one could be

1050
00:56:46,780 --> 00:56:51,220
distributed using LED right so the

1051
00:56:49,270 --> 00:56:55,450
situation is that the operating system

1052
00:56:51,220 --> 00:56:57,189
gets uploaded to the CD to a CDN using

1053
00:56:55,450 --> 00:56:59,500
LED but because the the source actually

1054
00:56:57,190 --> 00:57:02,830
supports that but but the distribution

1055
00:56:59,500 --> 00:57:07,600
from the CDN surrogate to the client is

1056
00:57:02,830 --> 00:57:10,690
not benefiting from Lebanon right if we

1057
00:57:07,600 --> 00:57:13,540
have a receive based version of LED but

1058
00:57:10,690 --> 00:57:15,550
this could actually enable the transfer

1059
00:57:13,540 --> 00:57:18,240
using LED but from the pseudo rate that

1060
00:57:15,550 --> 00:57:19,920
is oblivious to led but to

1061
00:57:18,240 --> 00:57:22,859
the client who is actually will be

1062
00:57:19,920 --> 00:57:25,710
controlling using less advanced effort

1063
00:57:22,860 --> 00:57:27,240
congestion control and a similar

1064
00:57:25,710 --> 00:57:30,330
situation of course when you have

1065
00:57:27,240 --> 00:57:33,990
something like a proxy or a firewall or

1066
00:57:30,330 --> 00:57:36,540
stuff like that that terminates the TCP

1067
00:57:33,990 --> 00:57:38,250
connection right so the leg between the

1068
00:57:36,540 --> 00:57:41,009
source that is using LED butt to the

1069
00:57:38,250 --> 00:57:43,740
proxy is protected by LED but in the

1070
00:57:41,010 --> 00:57:45,750
sense that it is using LED but but the

1071
00:57:43,740 --> 00:57:49,529
leg between the proxy and the final

1072
00:57:45,750 --> 00:57:51,540
client is no longer using it right so if

1073
00:57:49,530 --> 00:57:53,640
you have a receiver receiver driven

1074
00:57:51,540 --> 00:57:57,350
version of this this would enable the

1075
00:57:53,640 --> 00:58:05,150
use of LED but in the second leg right

1076
00:57:57,350 --> 00:58:07,170
and the other one is regarding how

1077
00:58:05,150 --> 00:58:10,410
mobile device for instance in this case

1078
00:58:07,170 --> 00:58:13,830
right that is downloading content from

1079
00:58:10,410 --> 00:58:16,379
multiple sources could actually enable

1080
00:58:13,830 --> 00:58:20,819
some way of distinguishing priorities if

1081
00:58:16,380 --> 00:58:23,070
you want or what type of what type of

1082
00:58:20,820 --> 00:58:24,960
traffic is willing to devote more to

1083
00:58:23,070 --> 00:58:27,240
most of his bandwidth right so let's

1084
00:58:24,960 --> 00:58:30,540
suppose in this case that you are you

1085
00:58:27,240 --> 00:58:33,029
have a mobile phone you're having you're

1086
00:58:30,540 --> 00:58:35,220
watching a video and then you receive

1087
00:58:33,030 --> 00:58:38,700
what's up call one thing that you may

1088
00:58:35,220 --> 00:58:40,529
want to do is use humming in general

1089
00:58:38,700 --> 00:58:43,680
when you're watching the video use TCP

1090
00:58:40,530 --> 00:58:45,300
and then if downloading your files or

1091
00:58:43,680 --> 00:58:48,720
whatever using TCP and then when you're

1092
00:58:45,300 --> 00:58:50,640
when you're a phone call comes in you

1093
00:58:48,720 --> 00:58:54,839
may want to start using less than best a

1094
00:58:50,640 --> 00:58:57,060
for for and your background download all

1095
00:58:54,840 --> 00:59:01,350
right so if you if you are able to if

1096
00:58:57,060 --> 00:59:05,549
you enable the the the end the end the

1097
00:59:01,350 --> 00:59:08,940
client to determine which flows are led

1098
00:59:05,550 --> 00:59:13,460
but and which flows are a regular TCP

1099
00:59:08,940 --> 00:59:17,550
then you will empower the the client to

1100
00:59:13,460 --> 00:59:19,260
manage its incoming link capacity by a

1101
00:59:17,550 --> 00:59:21,500
seer assigning different congestion

1102
00:59:19,260 --> 00:59:24,720
controllers to different to different

1103
00:59:21,500 --> 00:59:26,820
flows right so these are the three main

1104
00:59:24,720 --> 00:59:29,939
use cases that we have in mind CDN

1105
00:59:26,820 --> 00:59:31,559
distribution proxies and enabling the

1106
00:59:29,940 --> 00:59:32,849
user to define its

1107
00:59:31,559 --> 00:59:36,709
references by setting different

1108
00:59:32,849 --> 00:59:36,709
congestion controllers okay

1109
00:59:37,099 --> 00:59:44,219
so this is in general about the

1110
00:59:42,449 --> 00:59:48,239
algorithm piece probably falls more into

1111
00:59:44,219 --> 00:59:51,420
a lead plus plus but the the goals for

1112
00:59:48,239 --> 00:59:54,029
the design is basically essentially what

1113
00:59:51,420 --> 00:59:57,719
I what I assumed the original lead bath

1114
00:59:54,029 --> 01:00:01,259
designs goals word that is if you have

1115
00:59:57,719 --> 01:00:04,229
some latency sensitive delay sensitive

1116
01:00:01,259 --> 01:00:07,769
traffic like voice when you're using

1117
01:00:04,229 --> 01:00:09,899
lead but it should not add I mean the

1118
01:00:07,769 --> 01:00:12,660
delay that it adds should be bounded to

1119
01:00:09,900 --> 01:00:15,989
some target right if you have several

1120
01:00:12,660 --> 01:00:18,420
lead but flows they should be they

1121
01:00:15,989 --> 01:00:19,979
should that should be fair between each

1122
01:00:18,420 --> 01:00:23,099
other right they should equally split

1123
01:00:19,979 --> 01:00:25,049
the traffic if you only have led but it

1124
01:00:23,099 --> 01:00:28,019
should be able to use the full capacity

1125
01:00:25,049 --> 01:00:31,709
of the link and if you have if LED but

1126
01:00:28,019 --> 01:00:33,569
is competing with standard TCP by step

1127
01:00:31,709 --> 01:00:36,269
or type of type of congestion control

1128
01:00:33,569 --> 01:00:40,199
then basically let that should move away

1129
01:00:36,269 --> 01:00:44,189
and give most of the capacity to the TCP

1130
01:00:40,199 --> 01:00:46,439
flows so the algorithm that we're

1131
01:00:44,189 --> 01:00:49,499
proposing is essentially we are using

1132
01:00:46,439 --> 01:00:51,689
the the round tip time in order to

1133
01:00:49,499 --> 01:00:54,149
estimate the queuing delay so we measure

1134
01:00:51,689 --> 01:00:56,939
the base Rowntree time as the historical

1135
01:00:54,150 --> 01:00:59,939
minimum and we measure the current

1136
01:00:56,939 --> 01:01:03,420
round-trip time as a filter off of last

1137
01:00:59,939 --> 01:01:06,618
few samples we estimate from that the

1138
01:01:03,420 --> 01:01:09,539
current queuing delay we define a target

1139
01:01:06,619 --> 01:01:15,660
for what should should be the queuing

1140
01:01:09,539 --> 01:01:17,429
delay and we essentially build an ideal

1141
01:01:15,660 --> 01:01:20,098
increase multiplicative decrease based

1142
01:01:17,429 --> 01:01:21,749
on the on how much you are a above the

1143
01:01:20,099 --> 01:01:25,380
target right so if you are above the

1144
01:01:21,749 --> 01:01:27,538
target you you you do if you're below

1145
01:01:25,380 --> 01:01:29,099
the target you doing a naive increase if

1146
01:01:27,539 --> 01:01:35,130
you're below the target you do a

1147
01:01:29,099 --> 01:01:37,859
multiplicative decrease okay so this

1148
01:01:35,130 --> 01:01:39,929
this was most about like that plus plus

1149
01:01:37,859 --> 01:01:42,449
that is the the congestion control

1150
01:01:39,929 --> 01:01:44,219
itself then I'm going to dive deeper

1151
01:01:42,449 --> 01:01:45,539
into the details on how do you do it

1152
01:01:44,219 --> 01:01:48,269
from the receive side

1153
01:01:45,539 --> 01:01:50,789
all right so we're going to do this

1154
01:01:48,269 --> 01:01:52,558
controlling the receive window so the

1155
01:01:50,789 --> 01:01:54,539
first observation is a received window

1156
01:01:52,559 --> 01:01:56,969
has already is being used for something

1157
01:01:54,539 --> 01:01:59,279
right you use it for flow control the

1158
01:01:56,969 --> 01:02:02,609
idea here is you will calculate a

1159
01:01:59,279 --> 01:02:05,099
congestion window on the receiver you'll

1160
01:02:02,609 --> 01:02:07,769
obtain a value you will obtain a value

1161
01:02:05,099 --> 01:02:10,259
from the flow control right and you will

1162
01:02:07,769 --> 01:02:13,038
convey the minimum value of the two so

1163
01:02:10,259 --> 01:02:16,249
you one or both flow a flow control and

1164
01:02:13,039 --> 01:02:22,369
the congestion control on the receiver

1165
01:02:16,249 --> 01:02:25,229
the idea here is that usually the the

1166
01:02:22,369 --> 01:02:28,919
flows are not limited by the flow

1167
01:02:25,229 --> 01:02:31,049
control in general so the the limiting

1168
01:02:28,919 --> 01:02:33,689
factor should be the congestion

1169
01:02:31,049 --> 01:02:35,729
controller running on the receiver so

1170
01:02:33,689 --> 01:02:39,868
essentially the receive window will in

1171
01:02:35,729 --> 01:02:42,749
generally express the congestion control

1172
01:02:39,869 --> 01:02:44,639
wind right the interaction with the

1173
01:02:42,749 --> 01:02:49,348
sender's congestion control again

1174
01:02:44,639 --> 01:02:50,999
because the window actually used by the

1175
01:02:49,349 --> 01:02:53,249
sender is the minimum of the congestion

1176
01:02:50,999 --> 01:02:55,198
window and the receive window because

1177
01:02:53,249 --> 01:02:57,779
the receive window is carrying the the

1178
01:02:55,199 --> 01:03:00,869
the LED but the lab but calculated

1179
01:02:57,779 --> 01:03:03,089
window n LED but will be more aggressive

1180
01:03:00,869 --> 01:03:06,419
in reducing so it's likely to have a

1181
01:03:03,089 --> 01:03:09,149
smaller window than normal congestion

1182
01:03:06,419 --> 01:03:11,038
control what usually will happen is that

1183
01:03:09,149 --> 01:03:12,868
the LED bad congestion control will take

1184
01:03:11,039 --> 01:03:14,369
over and will be the one prevailing

1185
01:03:12,869 --> 01:03:20,459
because it will be the one expects

1186
01:03:14,369 --> 01:03:22,979
pressing a smaller window so the other

1187
01:03:20,459 --> 01:03:25,229
thing that we need to take care if we

1188
01:03:22,979 --> 01:03:28,049
try to do this is we should avoid

1189
01:03:25,229 --> 01:03:29,939
shrinking the window right because we

1190
01:03:28,049 --> 01:03:31,529
have this multiplicative decrease what

1191
01:03:29,939 --> 01:03:33,269
may happen is that at some point we need

1192
01:03:31,529 --> 01:03:36,149
to express our window that it's has

1193
01:03:33,269 --> 01:03:39,569
previous value right this is likely to

1194
01:03:36,149 --> 01:03:41,759
be in most cases more than the number of

1195
01:03:39,569 --> 01:03:43,288
bytes the I mean the amount that you

1196
01:03:41,759 --> 01:03:44,909
need to receive and to reduce the window

1197
01:03:43,289 --> 01:03:46,529
is likely to be more than the amount of

1198
01:03:44,909 --> 01:03:50,069
lights that you have we seen the packet

1199
01:03:46,529 --> 01:03:52,259
that you will send the ACK for so if you

1200
01:03:50,069 --> 01:03:54,569
actually reduce the window in hive right

1201
01:03:52,259 --> 01:03:58,950
away you will end up shrinking the

1202
01:03:54,569 --> 01:04:00,570
window which is not recommended so

1203
01:03:58,950 --> 01:04:04,410
essentially what we're going to do is

1204
01:04:00,570 --> 01:04:08,480
we're going to drain enough packets from

1205
01:04:04,410 --> 01:04:11,339
the in flight in order to accumulate

1206
01:04:08,480 --> 01:04:13,440
enough space in order to be able to

1207
01:04:11,339 --> 01:04:18,570
reduce the window without shrinking

1208
01:04:13,440 --> 01:04:20,339
right this this can be done because you

1209
01:04:18,570 --> 01:04:22,230
don't do I'm going to placate it

1210
01:04:20,339 --> 01:04:23,310
decrease more than once per round trip

1211
01:04:22,230 --> 01:04:25,710
time right

1212
01:04:23,310 --> 01:04:28,020
so essentially because you only reduce

1213
01:04:25,710 --> 01:04:29,700
it once at most once per round the time

1214
01:04:28,020 --> 01:04:31,320
you have enough packets to drain in

1215
01:04:29,700 --> 01:04:33,750
order to then be able to express

1216
01:04:31,320 --> 01:04:36,780
whatever window you want smaller than it

1217
01:04:33,750 --> 01:04:41,040
is so that that that should be feasible

1218
01:04:36,780 --> 01:04:43,740
and then the other problem that actually

1219
01:04:41,040 --> 01:04:46,880
media suggested when I was talking to

1220
01:04:43,740 --> 01:04:49,799
her about this for a while ago is

1221
01:04:46,880 --> 01:04:52,230
regarding windows scale-up ships right

1222
01:04:49,800 --> 01:04:56,180
window scale is as you probably are

1223
01:04:52,230 --> 01:04:59,400
aware of I change of the units on the

1224
01:04:56,180 --> 01:05:03,810
that you express the receive window

1225
01:04:59,400 --> 01:05:06,150
right so actually window scale values

1226
01:05:03,810 --> 01:05:09,180
between zero and one result in units

1227
01:05:06,150 --> 01:05:11,280
that are less than the usual maximum

1228
01:05:09,180 --> 01:05:12,690
segment size all right so you see that

1229
01:05:11,280 --> 01:05:16,050
that's not a big problem because usually

1230
01:05:12,690 --> 01:05:18,540
you want to decrease your window size or

1231
01:05:16,050 --> 01:05:23,400
increase your window size in one MSS I

1232
01:05:18,540 --> 01:05:26,400
mean or more or less right if you have

1233
01:05:23,400 --> 01:05:27,900
values that are larger than 12 12 foot

1234
01:05:26,400 --> 01:05:30,150
basically will be twelve thirteen and

1235
01:05:27,900 --> 01:05:31,920
fourteen that basically implies that one

1236
01:05:30,150 --> 01:05:34,829
change in one units in the in the

1237
01:05:31,920 --> 01:05:39,030
receive window will be more than one MSS

1238
01:05:34,829 --> 01:05:40,560
right in that may generate problems in

1239
01:05:39,030 --> 01:05:42,599
the sense that your congestion control

1240
01:05:40,560 --> 01:05:44,880
now is much more coarse because the

1241
01:05:42,599 --> 01:05:51,930
units it can express itself are much

1242
01:05:44,880 --> 01:05:55,920
larger than one MSS right so we have

1243
01:05:51,930 --> 01:05:58,200
make a set of measurements we have

1244
01:05:55,920 --> 01:06:00,810
observe that values between 12 and 14

1245
01:05:58,200 --> 01:06:02,669
are very very rarely used today right

1246
01:06:00,810 --> 01:06:04,980
they exhibit a bunch of other problems

1247
01:06:02,670 --> 01:06:07,230
regarding window shrinking and and and

1248
01:06:04,980 --> 01:06:09,240
other things so I guess that's that's

1249
01:06:07,230 --> 01:06:10,270
the reason why we are not very used

1250
01:06:09,240 --> 01:06:11,740
today

1251
01:06:10,270 --> 01:06:14,259
[Applause]

1252
01:06:11,740 --> 01:06:16,750
we wouldn't I mean if we want to vote

1253
01:06:14,260 --> 01:06:18,850
that down this path we will need to

1254
01:06:16,750 --> 01:06:21,880
probably do a bit more experiments

1255
01:06:18,850 --> 01:06:23,830
regarding the stability and and how

1256
01:06:21,880 --> 01:06:26,260
expressive the the congestion control

1257
01:06:23,830 --> 01:06:28,509
will be if you use these larger values

1258
01:06:26,260 --> 01:06:31,150
in any case in any case the value of the

1259
01:06:28,510 --> 01:06:33,220
window scale is set by the client so the

1260
01:06:31,150 --> 01:06:35,590
client could actually set whatever

1261
01:06:33,220 --> 01:06:37,390
I mean values between up to eleven right

1262
01:06:35,590 --> 01:06:40,240
if he's trying to use lead but a

1263
01:06:37,390 --> 01:06:42,040
roulette pot and that doesn't impose any

1264
01:06:40,240 --> 01:06:42,759
conditions on the traffic in the other

1265
01:06:42,040 --> 01:06:46,480
direction

1266
01:06:42,760 --> 01:06:50,770
so that can be another way of working

1267
01:06:46,480 --> 01:06:54,160
around this so as I said we're using

1268
01:06:50,770 --> 01:06:55,800
there RT teens through the one-way delay

1269
01:06:54,160 --> 01:06:58,180
[Applause]

1270
01:06:55,800 --> 01:07:00,160
doing this has a fundamental problem

1271
01:06:58,180 --> 01:07:02,740
that is you include the queuing delay on

1272
01:07:00,160 --> 01:07:04,089
the reverse path there's nothing I mean

1273
01:07:02,740 --> 01:07:05,709
I don't think there's much we can do

1274
01:07:04,090 --> 01:07:07,660
about this oh I haven't come up with

1275
01:07:05,710 --> 01:07:09,400
anything we can do about this this

1276
01:07:07,660 --> 01:07:11,890
basically means that you will be overly

1277
01:07:09,400 --> 01:07:14,920
conservative that you will react also to

1278
01:07:11,890 --> 01:07:17,980
congestion in the reverse path that's

1279
01:07:14,920 --> 01:07:20,920
that's it right and we need to deal with

1280
01:07:17,980 --> 01:07:24,550
a few other issues in order to to make

1281
01:07:20,920 --> 01:07:27,070
this work in particular a fairly common

1282
01:07:24,550 --> 01:07:28,900
case I guess it will be peer receivers

1283
01:07:27,070 --> 01:07:31,600
in the sense that you're only receiving

1284
01:07:28,900 --> 01:07:33,580
packets and you're not so if you're only

1285
01:07:31,600 --> 01:07:35,380
receiving packets if you want to measure

1286
01:07:33,580 --> 01:07:37,810
the rounding time you cannot send it and

1287
01:07:35,380 --> 01:07:39,160
match it with the ACK you will because

1288
01:07:37,810 --> 01:07:41,890
you're only receiving packets and

1289
01:07:39,160 --> 01:07:44,020
sending acts in order to do that we will

1290
01:07:41,890 --> 01:07:46,600
use the the timestamp options to match

1291
01:07:44,020 --> 01:07:48,400
acts that we have sent in packets that

1292
01:07:46,600 --> 01:07:53,140
are coming back data packets that are

1293
01:07:48,400 --> 01:07:54,820
coming back so that that should work the

1294
01:07:53,140 --> 01:07:57,700
other situation that we may have because

1295
01:07:54,820 --> 01:08:00,130
we are handling pure receivers is that

1296
01:07:57,700 --> 01:08:03,160
because we are going to match an AK with

1297
01:08:00,130 --> 01:08:06,790
a packet we may have an artificial

1298
01:08:03,160 --> 01:08:10,210
increase RTT because the source is not

1299
01:08:06,790 --> 01:08:11,710
sending packets right so there are we

1300
01:08:10,210 --> 01:08:13,420
have identified two reasons why the

1301
01:08:11,710 --> 01:08:15,400
source is not sending packet one is

1302
01:08:13,420 --> 01:08:17,830
because it has no data to send well in

1303
01:08:15,400 --> 01:08:20,080
this case either you don't care because

1304
01:08:17,830 --> 01:08:22,210
you're not managing anything because

1305
01:08:20,080 --> 01:08:23,890
there is no traffic or either this

1306
01:08:22,210 --> 01:08:25,000
happen once in a while for instance you

1307
01:08:23,890 --> 01:08:27,580
have blocks of the

1308
01:08:25,000 --> 01:08:29,920
that you're sending right every time the

1309
01:08:27,580 --> 01:08:33,729
block ends you have some times of period

1310
01:08:29,920 --> 01:08:36,430
without data the way we deal with this

1311
01:08:33,729 --> 01:08:39,580
is essentially we filter so instead of

1312
01:08:36,430 --> 01:08:41,770
measuring the current mounted time you

1313
01:08:39,580 --> 01:08:43,509
do a filter of the last 10 packets so

1314
01:08:41,770 --> 01:08:46,060
probably you get rid of that sample that

1315
01:08:43,509 --> 01:08:49,210
is that is that it's outside that has

1316
01:08:46,060 --> 01:08:53,680
this artificially increase RTT right so

1317
01:08:49,210 --> 01:08:56,049
probably that that should work and the

1318
01:08:53,680 --> 01:08:57,790
other case where you may the sender may

1319
01:08:56,049 --> 01:09:00,130
not be able to receive later is because

1320
01:08:57,790 --> 01:09:01,569
you are clamping down the the the the

1321
01:09:00,130 --> 01:09:03,850
receive window so if you are

1322
01:09:01,569 --> 01:09:05,170
artificially telling him that he can not

1323
01:09:03,850 --> 01:09:06,819
send because you're reducing the the

1324
01:09:05,170 --> 01:09:11,350
receive window he won't be able to send

1325
01:09:06,819 --> 01:09:12,549
and at that point you the rtt will be

1326
01:09:11,350 --> 01:09:15,130
increased because you're not allowing

1327
01:09:12,549 --> 01:09:17,589
him to send it but that's fine because

1328
01:09:15,130 --> 01:09:20,560
you actually know when you're doing that

1329
01:09:17,589 --> 01:09:24,009
so you can simply avoid measuring while

1330
01:09:20,560 --> 01:09:26,670
you're reducing the the receive window

1331
01:09:24,009 --> 01:09:29,649
right so you can accommodate for this

1332
01:09:26,670 --> 01:09:31,630
the other problem that we have encounter

1333
01:09:29,649 --> 01:09:33,429
while doing this is regarding the real

1334
01:09:31,630 --> 01:09:35,410
reality of the timestamp values right

1335
01:09:33,430 --> 01:09:37,299
the timestamp values have depending on

1336
01:09:35,410 --> 01:09:39,130
the clock but you use for that has a

1337
01:09:37,299 --> 01:09:40,630
given the molarity you may end up with

1338
01:09:39,130 --> 01:09:43,089
multiple packets going with the same

1339
01:09:40,630 --> 01:09:44,650
time sample all right so that that makes

1340
01:09:43,089 --> 01:09:48,460
harder too much because you don't know

1341
01:09:44,649 --> 01:09:49,750
which one matches with which one because

1342
01:09:48,460 --> 01:09:53,080
we don't really need to measure all that

1343
01:09:49,750 --> 01:09:55,120
all the packets just what we simply do

1344
01:09:53,080 --> 01:09:57,400
is we might we measure the first one

1345
01:09:55,120 --> 01:09:58,960
right the first time stamp that we send

1346
01:09:57,400 --> 01:10:00,250
we are you in value in the first one

1347
01:09:58,960 --> 01:10:03,190
that that would receive with the same

1348
01:10:00,250 --> 01:10:07,200
value and we drop all the other samples

1349
01:10:03,190 --> 01:10:09,849
that we have right and that gives us an

1350
01:10:07,200 --> 01:10:15,460
proper original measurement of the of

1351
01:10:09,850 --> 01:10:18,420
the rtt so molar design choices internet

1352
01:10:15,460 --> 01:10:20,920
what furnace has been addressed using

1353
01:10:18,420 --> 01:10:22,900
multiplicative decrease that has been I

1354
01:10:20,920 --> 01:10:24,940
mean this there is there is a paper that

1355
01:10:22,900 --> 01:10:27,160
explains why this case I mean I guess is

1356
01:10:24,940 --> 01:10:29,860
fairly well understood reacting to

1357
01:10:27,160 --> 01:10:32,950
packet lost what we do is similar a slit

1358
01:10:29,860 --> 01:10:34,750
but we do a multiplicative decrease the

1359
01:10:32,950 --> 01:10:37,389
coefficients for multiplicative decrease

1360
01:10:34,750 --> 01:10:38,620
regarding time and regarding loss don't

1361
01:10:37,390 --> 01:10:40,210
know do not have to be

1362
01:10:38,620 --> 01:10:41,860
same I mean we actually play with

1363
01:10:40,210 --> 01:10:44,440
different values right so you have a

1364
01:10:41,860 --> 01:10:49,660
multiplicative decrease a parameter for

1365
01:10:44,440 --> 01:10:53,019
loss and for time right regarding

1366
01:10:49,660 --> 01:10:55,000
bootstrapping what we do is instead of

1367
01:10:53,020 --> 01:10:58,780
starting the problem here is how do you

1368
01:10:55,000 --> 01:11:01,030
manage to to to ramp up right what we do

1369
01:10:58,780 --> 01:11:03,340
here essentially we start with whatever

1370
01:11:01,030 --> 01:11:06,340
flow control whatever window the flow

1371
01:11:03,340 --> 01:11:09,730
control gives that is usually a large

1372
01:11:06,340 --> 01:11:13,570
window right and that basically gives

1373
01:11:09,730 --> 01:11:16,959
enough room to for the for the for the

1374
01:11:13,570 --> 01:11:17,670
sender to to ramp up and then we take it

1375
01:11:16,960 --> 01:11:21,070
from there

1376
01:11:17,670 --> 01:11:22,960
and regarding path changes what we do is

1377
01:11:21,070 --> 01:11:25,570
the same thing that led but does that is

1378
01:11:22,960 --> 01:11:28,690
we keep a history of the last I don't

1379
01:11:25,570 --> 01:11:30,670
know 10 minutes and in order to forget L

1380
01:11:28,690 --> 01:11:34,450
I mean we only keep the history for 10

1381
01:11:30,670 --> 01:11:36,130
minutes so we forget measured values

1382
01:11:34,450 --> 01:11:39,490
that are older than that so if we change

1383
01:11:36,130 --> 01:11:44,920
path we only keep the old path for 10

1384
01:11:39,490 --> 01:11:48,670
minutes so we have implemented this we

1385
01:11:44,920 --> 01:11:51,550
have run a bunch of experiments the the

1386
01:11:48,670 --> 01:11:53,620
experimental setup is is very simple as

1387
01:11:51,550 --> 01:11:56,440
you can see we have two clients we have

1388
01:11:53,620 --> 01:12:02,019
two servers the clients are running late

1389
01:11:56,440 --> 01:12:03,940
but or or else this is there's a few

1390
01:12:02,020 --> 01:12:07,030
results that we have so for instance in

1391
01:12:03,940 --> 01:12:10,480
this case what we have is a voice call

1392
01:12:07,030 --> 01:12:13,540
that is using you have a base delay of

1393
01:12:10,480 --> 01:12:16,410
50 milliseconds you see observe here at

1394
01:12:13,540 --> 01:12:19,090
the beginning that the voice is

1395
01:12:16,410 --> 01:12:22,599
experienced the 50 milliseconds plus a

1396
01:12:19,090 --> 01:12:25,930
bit of delay in this case you see are

1397
01:12:22,600 --> 01:12:29,110
led but kicking in we have a target of

1398
01:12:25,930 --> 01:12:32,410
about 100 milliseconds with almost there

1399
01:12:29,110 --> 01:12:34,630
most of the time right and essentially

1400
01:12:32,410 --> 01:12:38,410
we keep we show that that it keeps the

1401
01:12:34,630 --> 01:12:42,580
the delay bounded when a LED

1402
01:12:38,410 --> 01:12:45,130
butt-kissing bigger than internet but

1403
01:12:42,580 --> 01:12:48,070
fairness what we have here are two are

1404
01:12:45,130 --> 01:12:49,960
led but flows we have one that is using

1405
01:12:48,070 --> 01:12:52,690
most of the capacity when it's alone

1406
01:12:49,960 --> 01:12:57,340
right the second one kicks in

1407
01:12:52,690 --> 01:13:03,699
they somehow managed to agree in a

1408
01:12:57,340 --> 01:13:06,100
regional liquid split between regarding

1409
01:13:03,699 --> 01:13:09,870
solo performance when are led but is

1410
01:13:06,100 --> 01:13:12,489
alone the capacity of actually using the

1411
01:13:09,870 --> 01:13:14,199
whole capacity of the channel depends on

1412
01:13:12,489 --> 01:13:18,339
the the different set of parameters that

1413
01:13:14,199 --> 01:13:19,900
you choose we I mean all these

1414
01:13:18,340 --> 01:13:22,260
experience have been done with a with a

1415
01:13:19,900 --> 01:13:26,110
given set of parameters that we somehow

1416
01:13:22,260 --> 01:13:29,800
analytically obtain and what we observe

1417
01:13:26,110 --> 01:13:32,500
is that roughly if the if the if the

1418
01:13:29,800 --> 01:13:35,409
ramping time is not very very high you

1419
01:13:32,500 --> 01:13:38,290
manage to be somehow near full

1420
01:13:35,409 --> 01:13:41,469
utilization of the link as the

1421
01:13:38,290 --> 01:13:43,960
round-trip time increases it has harder

1422
01:13:41,469 --> 01:13:45,850
time reaching to the full utilization

1423
01:13:43,960 --> 01:13:47,620
again this is depending on the

1424
01:13:45,850 --> 01:13:50,889
relationship between the multiplicative

1425
01:13:47,620 --> 01:13:53,620
decrease parameters and has a

1426
01:13:50,889 --> 01:13:58,239
relationship with the with the fairness

1427
01:13:53,620 --> 01:14:00,159
issue right interferes with TCP so there

1428
01:13:58,239 --> 01:14:02,138
are two modes of interference with TCP

1429
01:14:00,159 --> 01:14:04,750
either you're working you're reacting to

1430
01:14:02,139 --> 01:14:06,400
losses or you're reluctant to delay that

1431
01:14:04,750 --> 01:14:08,440
really depends on the size of the buffer

1432
01:14:06,400 --> 01:14:10,989
of the bottleneck right if you're

1433
01:14:08,440 --> 01:14:13,059
reacting to delay right if there is

1434
01:14:10,989 --> 01:14:18,759
enough buffer in the bottleneck so that

1435
01:14:13,060 --> 01:14:20,830
you measure the the target T you observe

1436
01:14:18,760 --> 01:14:24,730
here that essentially you have our LED

1437
01:14:20,830 --> 01:14:26,710
but then TCP kits in unlit but goes way

1438
01:14:24,730 --> 01:14:29,949
down it just basically stays with one

1439
01:14:26,710 --> 01:14:32,380
are a congestion window one gives all

1440
01:14:29,949 --> 01:14:36,150
the rest to TCP and then when TCP

1441
01:14:32,380 --> 01:14:40,000
disappears or LED but kicks in again and

1442
01:14:36,150 --> 01:14:42,190
if there is not enough buffer in the in

1443
01:14:40,000 --> 01:14:45,370
the bottleneck in order to observe the

1444
01:14:42,190 --> 01:14:48,210
target delay then both of them will

1445
01:14:45,370 --> 01:14:52,199
react to losses but because of the

1446
01:14:48,210 --> 01:14:54,699
parameters that are led but is using are

1447
01:14:52,199 --> 01:14:57,460
much more aggressive that the ones that

1448
01:14:54,699 --> 01:15:00,940
TCP is using what we observe is that led

1449
01:14:57,460 --> 01:15:04,480
by a LED but uses more than what it used

1450
01:15:00,940 --> 01:15:05,619
when it has a relay base but overall it

1451
01:15:04,480 --> 01:15:12,339
leaves most of the

1452
01:15:05,619 --> 01:15:14,080
of the capacity to disobey so okay so

1453
01:15:12,340 --> 01:15:17,380
the other thing that we have done is we

1454
01:15:14,080 --> 01:15:20,760
have played with LED bad plus plus stuff

1455
01:15:17,380 --> 01:15:23,739
that Praveen we will present and

1456
01:15:20,760 --> 01:15:26,260
essentially when they are both competing

1457
01:15:23,739 --> 01:15:27,400
they play nicely with each other more or

1458
01:15:26,260 --> 01:15:30,489
less right

1459
01:15:27,400 --> 01:15:35,230
when TCP enters both of them disappear

1460
01:15:30,489 --> 01:15:40,049
most and then when TCP goes away they

1461
01:15:35,230 --> 01:15:46,718
they they they share again the capacity

1462
01:15:40,050 --> 01:15:49,270
equally between okay and then in order

1463
01:15:46,719 --> 01:15:51,909
to wrap up I mean I was wondering if

1464
01:15:49,270 --> 01:15:54,460
this is the type of stuff that I see TIG

1465
01:15:51,909 --> 01:15:58,239
would be potentially interesting working

1466
01:15:54,460 --> 01:16:00,190
on Thank You Marcelo I just change that

1467
01:15:58,239 --> 01:16:03,250
question a little bit and see how that

1468
01:16:00,190 --> 01:16:05,400
people here would like to be good be

1469
01:16:03,250 --> 01:16:07,719
interesting working with Marcelo even

1470
01:16:05,400 --> 01:16:09,129
important at least in my mind it would

1471
01:16:07,719 --> 01:16:13,420
be cousin seeing something like this

1472
01:16:09,130 --> 01:16:16,560
deployed but yes questions we have a

1473
01:16:13,420 --> 01:16:16,560
just a few minutes

1474
01:16:22,239 --> 01:16:30,530
J holin this is very cool work thank you

1475
01:16:25,939 --> 01:16:33,519
I might be I'm not sure I had time but I

1476
01:16:30,530 --> 01:16:37,789
might be interested in like me that's

1477
01:16:33,519 --> 01:16:38,389
the I guess that's all I want to say for

1478
01:16:37,789 --> 01:16:46,610
now thank you

1479
01:16:38,389 --> 01:16:48,409
Thank You Neal card well I think this is

1480
01:16:46,610 --> 01:16:52,009
this seems like very interesting and

1481
01:16:48,409 --> 01:16:54,169
generally useful work is this add a

1482
01:16:52,010 --> 01:16:58,729
couple of questions is this work so far

1483
01:16:54,169 --> 01:17:01,760
in a simulator or with no no this is

1484
01:16:58,729 --> 01:17:03,889
this this has been done in and I mean we

1485
01:17:01,760 --> 01:17:06,380
have a Linux implementation on this and

1486
01:17:03,889 --> 01:17:09,439
we have a bunch of virtual machines and

1487
01:17:06,380 --> 01:17:12,769
and I mean a little icing barked okay

1488
01:17:09,439 --> 01:17:14,659
okay and then maybe you mentioned this

1489
01:17:12,769 --> 01:17:17,630
but I missed it what what how do you

1490
01:17:14,659 --> 01:17:19,579
imagine picking the delay target or

1491
01:17:17,630 --> 01:17:21,949
delay budget I'm sorry once again how do

1492
01:17:19,579 --> 01:17:25,869
you what's the plan for picking the

1493
01:17:21,949 --> 01:17:29,928
delay budget so what we have done is as

1494
01:17:25,869 --> 01:17:33,709
lame-ass using the leg but one okay that

1495
01:17:29,929 --> 01:17:36,979
it's a hundred milliseconds the praveen

1496
01:17:33,709 --> 01:17:42,398
has been using 60 milliseconds in in in

1497
01:17:36,979 --> 01:17:46,340
that in Inlet but plus plus so I mean

1498
01:17:42,399 --> 01:17:49,280
okay thank you I mean there is some

1499
01:17:46,340 --> 01:17:51,499
rationale in the in in the receive all

1500
01:17:49,280 --> 01:17:53,749
why hundred millisecond make sense and

1501
01:17:51,499 --> 01:17:57,438
there is some rationale why I'm just

1502
01:17:53,749 --> 01:18:01,669
leveraging on on them to to do yes

1503
01:17:57,439 --> 01:18:04,760
Johan actually I also like this work

1504
01:18:01,669 --> 01:18:08,689
because some we have similar sorts but

1505
01:18:04,760 --> 01:18:12,679
different quite differently my questions

1506
01:18:08,689 --> 01:18:14,809
are is any plans you know like can work

1507
01:18:12,679 --> 01:18:19,239
for you seen signals or something sorry

1508
01:18:14,809 --> 01:18:24,199
I came up here you okay my questions and

1509
01:18:19,239 --> 01:18:27,018
Rachel then the thoughts in the future

1510
01:18:24,199 --> 01:18:30,728
that could you know also works together

1511
01:18:27,019 --> 01:18:33,349
is easy and signals with ECM signals and

1512
01:18:30,729 --> 01:18:36,679
so we easy Ennis

1513
01:18:33,349 --> 01:18:39,139
if I understand it correctly it will

1514
01:18:36,679 --> 01:18:41,840
essentially be the same as US law so the

1515
01:18:39,139 --> 01:18:44,869
response to this will be the same as as

1516
01:18:41,840 --> 01:18:49,670
loss right so I mean I understand that

1517
01:18:44,869 --> 01:18:52,369
what led but does yeah sorry no I'm

1518
01:18:49,670 --> 01:18:56,840
asking media let but reacts to to ecn

1519
01:18:52,369 --> 01:18:58,339
Marxist and same as losses okay let but

1520
01:18:56,840 --> 01:19:00,560
is that you usually try to avoid losses

1521
01:18:58,340 --> 01:19:02,030
and also try to avoid a situation where

1522
01:19:00,560 --> 01:19:03,679
geteasy anything else but if you get

1523
01:19:02,030 --> 01:19:05,119
easy and singers it's the same reaction

1524
01:19:03,679 --> 01:19:11,840
and it's the same reaction as we knew

1525
01:19:05,119 --> 01:19:15,409
right answer the other question about

1526
01:19:11,840 --> 01:19:17,510
the delay target so this whole thing was

1527
01:19:15,409 --> 01:19:18,860
was proposed by patron at some point and

1528
01:19:17,510 --> 01:19:21,409
they also had a lower delay target at

1529
01:19:18,860 --> 01:19:22,940
the very beginning and then they

1530
01:19:21,409 --> 01:19:24,710
increased the 200 milliseconds at some

1531
01:19:22,940 --> 01:19:28,699
point because their scenario was mainly

1532
01:19:24,710 --> 01:19:30,050
to avoid a congestion in the basically

1533
01:19:28,699 --> 01:19:32,059
in the home router where the buffers are

1534
01:19:30,050 --> 01:19:33,800
usually very big while still having a

1535
01:19:32,060 --> 01:19:35,630
reader like behavior in the core network

1536
01:19:33,800 --> 01:19:38,389
where buffers are smaller and you can

1537
01:19:35,630 --> 01:19:40,070
compete like equally and the right

1538
01:19:38,389 --> 01:19:42,290
rational which is in the draft is that

1539
01:19:40,070 --> 01:19:45,290
you want to stay below 150 milliseconds

1540
01:19:42,290 --> 01:19:47,810
because that's the maximum you can cope

1541
01:19:45,290 --> 01:19:53,960
with for like any kind of interactions

1542
01:19:47,810 --> 01:19:56,420
between humans Thanks and thank you so

1543
01:19:53,960 --> 01:19:58,699
much Marcelo please find them and talk

1544
01:19:56,420 --> 01:20:01,190
to them if you're interested in more

1545
01:19:58,699 --> 01:20:03,559
work and I'm hoping that this actually

1546
01:20:01,190 --> 01:20:06,530
gather some steam because I think this

1547
01:20:03,560 --> 01:20:09,230
is a very different type of work in that

1548
01:20:06,530 --> 01:20:11,110
it's receiver side and I do think that

1549
01:20:09,230 --> 01:20:13,610
there's a lot of value on this

1550
01:20:11,110 --> 01:20:16,489
motivational muscle dimension are very

1551
01:20:13,610 --> 01:20:18,380
important so thank you again for the

1552
01:20:16,489 --> 01:20:20,059
work and for presenting it you're gonna

1553
01:20:18,380 --> 01:20:24,639
move on to the last presentation which

1554
01:20:20,060 --> 01:20:29,739
is praveen probing can you come up with

1555
01:20:24,639 --> 01:20:29,739
and hopefully we can do this

1556
01:20:34,530 --> 01:20:39,518
the wrong trevean okay I'm gonna try

1557
01:20:37,570 --> 01:20:42,130
without the camera if you can hear me

1558
01:20:39,519 --> 01:20:48,429
please say yes we'll just give it a

1559
01:20:42,130 --> 01:20:53,649
movements till you try to get protein

1560
01:20:48,429 --> 01:20:56,439
yeah can you hear me yes yay

1561
01:20:53,649 --> 01:20:59,649
sorry for the mishap there with the

1562
01:20:56,439 --> 01:21:02,260
headset so could do this without video

1563
01:20:59,649 --> 01:21:04,149
can we get easier so this is plus plus

1564
01:21:02,260 --> 01:21:06,189
condition control for background traffic

1565
01:21:04,149 --> 01:21:10,749
this was originally presented in IETF

1566
01:21:06,189 --> 01:21:12,189
100 that presentation included some test

1567
01:21:10,749 --> 01:21:13,829
results and graphs today I'm going to

1568
01:21:12,189 --> 01:21:16,419
skip over them because of lack of time

1569
01:21:13,829 --> 01:21:18,099
but this is not a recap the algorithm

1570
01:21:16,419 --> 01:21:22,570
and then I'm going to talk about next

1571
01:21:18,099 --> 01:21:25,570
steps so let's go to the next slide so

1572
01:21:22,570 --> 01:21:29,709
this is a quick recap of what led by RFC

1573
01:21:25,570 --> 01:21:31,509
68 17 said it's a less than best effort

1574
01:21:29,709 --> 01:21:33,849
congestion control algorithm applied on

1575
01:21:31,510 --> 01:21:36,489
the sender as opposed to the receive set

1576
01:21:33,849 --> 01:21:38,469
presentation that muscle adjusted the

1577
01:21:36,489 --> 01:21:39,968
goal is to compare it's a deal in this

1578
01:21:38,469 --> 01:21:41,889
condition control algorithm so you

1579
01:21:39,969 --> 01:21:45,249
measure the minimum observed either over

1580
01:21:41,889 --> 01:21:47,289
an observation window if the currently

1581
01:21:45,249 --> 01:21:49,840
observed delay is less than your target

1582
01:21:47,289 --> 01:21:52,059
then you increase the condition if the

1583
01:21:49,840 --> 01:21:54,369
delays higher than target then you

1584
01:21:52,059 --> 01:21:55,899
decrease the condition window the

1585
01:21:54,369 --> 01:21:57,429
original actually did not have any

1586
01:21:55,899 --> 01:22:00,130
strict requirements of slow start there

1587
01:21:57,429 --> 01:22:02,679
was a solution to avoid it and it also

1588
01:22:00,130 --> 01:22:04,149
reacts for packet loss because the goal

1589
01:22:02,679 --> 01:22:06,130
here is less than best effort so

1590
01:22:04,149 --> 01:22:11,949
reactive packet loss and other condition

1591
01:22:06,130 --> 01:22:13,840
signals just extended TCP next by P 3 so

1592
01:22:11,949 --> 01:22:16,419
we found about your progress with led by

1593
01:22:13,840 --> 01:22:19,320
both documented and existing research as

1594
01:22:16,419 --> 01:22:22,959
well as powerful our own experimentation

1595
01:22:19,320 --> 01:22:24,610
so some of the problems with TCP one of

1596
01:22:22,959 --> 01:22:26,709
the problems is one big data

1597
01:22:24,610 --> 01:22:29,199
measurements there is no standard clock

1598
01:22:26,709 --> 01:22:30,789
frequency and there's also like a clock

1599
01:22:29,199 --> 01:22:32,409
skew problem so we could come up with

1600
01:22:30,789 --> 01:22:33,969
like custom schemes to solve this but

1601
01:22:32,409 --> 01:22:36,638
those are very difficult to get right in

1602
01:22:33,969 --> 01:22:38,590
practice the other problem that like

1603
01:22:36,639 --> 01:22:40,840
that has is a late comer advantage so

1604
01:22:38,590 --> 01:22:43,030
one flow starts early

1605
01:22:40,840 --> 01:22:46,060
then like that enters the networking

1606
01:22:43,030 --> 01:22:49,750
later there it measures a higher base

1607
01:22:46,060 --> 01:22:51,280
degree and it will inject more nearly

1608
01:22:49,750 --> 01:22:53,410
into the network it will not be able to

1609
01:22:51,280 --> 01:22:55,420
detect that there's other traffic and

1610
01:22:53,410 --> 01:22:57,130
back off there's also a well known

1611
01:22:55,420 --> 01:22:59,440
interred like that fairness problem

1612
01:22:57,130 --> 01:23:01,840
there's a paper there that you can refer

1613
01:22:59,440 --> 01:23:05,440
to so if you have multiple that but

1614
01:23:01,840 --> 01:23:08,770
close it because it results were stable

1615
01:23:05,440 --> 01:23:11,230
q but there's no fair sharing and of

1616
01:23:08,770 --> 01:23:12,490
course the problem with slow start you

1617
01:23:11,230 --> 01:23:13,780
know what should be done for like

1618
01:23:12,490 --> 01:23:16,030
background connections

1619
01:23:13,780 --> 01:23:17,559
there's also latency tough problem which

1620
01:23:16,030 --> 01:23:18,790
is very interesting favor very not

1621
01:23:17,560 --> 01:23:20,830
running late bad connection which is

1622
01:23:18,790 --> 01:23:23,050
possible with like you know large

1623
01:23:20,830 --> 01:23:25,990
background transfers file uploads photo

1624
01:23:23,050 --> 01:23:27,700
uploads and such the connection keeps

1625
01:23:25,990 --> 01:23:28,630
measuring a higher base delay over a

1626
01:23:27,700 --> 01:23:31,480
longer period of time

1627
01:23:28,630 --> 01:23:33,790
this ratcheting effort effect is very

1628
01:23:31,480 --> 01:23:36,429
easily reproducible in by even in that

1629
01:23:33,790 --> 01:23:38,860
measurements and then that's the lower

1630
01:23:36,430 --> 01:23:40,540
latency competition problem so if if the

1631
01:23:38,860 --> 01:23:42,969
link is actually very good and the

1632
01:23:40,540 --> 01:23:45,160
latency is very low then the target

1633
01:23:42,970 --> 01:23:47,020
either has never reached so let bat

1634
01:23:45,160 --> 01:23:49,840
compete very aggressively with standard

1635
01:23:47,020 --> 01:23:52,060
easy so away with let y plus plus first

1636
01:23:49,840 --> 01:23:55,750
will solve all of these problems next

1637
01:23:52,060 --> 01:23:57,250
five weeks so this is incremented

1638
01:23:55,750 --> 01:23:59,410
currently as a condition control

1639
01:23:57,250 --> 01:24:02,440
algorithm for TCP in the Windows

1640
01:23:59,410 --> 01:24:03,940
operating system the enhancements over

1641
01:24:02,440 --> 01:24:05,889
that bad are these from annex though

1642
01:24:03,940 --> 01:24:07,509
instead of using one waiting the

1643
01:24:05,890 --> 01:24:10,630
measurements means round-trip time

1644
01:24:07,510 --> 01:24:12,100
measurements we do know slower than we

1645
01:24:10,630 --> 01:24:16,210
know condition window increase so there

1646
01:24:12,100 --> 01:24:19,240
is a adaptive factor that we introduced

1647
01:24:16,210 --> 01:24:22,030
for ramping up much slower than standard

1648
01:24:19,240 --> 01:24:24,219
PCP similarly when we get to last the

1649
01:24:22,030 --> 01:24:26,969
decreases multiplicative but the the

1650
01:24:24,220 --> 01:24:30,820
reduction factors are in adaptive and

1651
01:24:26,970 --> 01:24:33,700
then the slowstar is modified in several

1652
01:24:30,820 --> 01:24:35,280
ways to be slower than Breno as well as

1653
01:24:33,700 --> 01:24:37,170
to incorporate mechanism that

1654
01:24:35,280 --> 01:24:40,500
very similar to hi start we use DNA as a

1655
01:24:37,170 --> 01:24:42,090
signal to exert slow start and the most

1656
01:24:40,500 --> 01:24:44,940
interesting one is the initial and

1657
01:24:42,090 --> 01:24:47,039
periodic slow down because the some of

1658
01:24:44,940 --> 01:24:49,259
the problems mentioned require measuring

1659
01:24:47,039 --> 01:24:52,349
a very accurate base daily for that you

1660
01:24:49,260 --> 01:24:56,010
need to eat traffic so that you are able

1661
01:24:52,349 --> 01:24:57,750
to measure the accurate base level this

1662
01:24:56,010 --> 01:25:00,329
has been shipping as part of Windows for

1663
01:24:57,750 --> 01:25:03,449
a while it's currently used by several

1664
01:25:00,329 --> 01:25:09,420
scenarios pretty broadly deployed at

1665
01:25:03,449 --> 01:25:11,339
this point next bit please so why don't

1666
01:25:09,420 --> 01:25:13,789
time let's see it's pretty easily

1667
01:25:11,340 --> 01:25:16,320
available is already implemented in TCP

1668
01:25:13,789 --> 01:25:18,090
of course the disadvantage is that we

1669
01:25:16,320 --> 01:25:20,759
would measure during both productions

1670
01:25:18,090 --> 01:25:24,150
because but because this is a less than

1671
01:25:20,760 --> 01:25:27,420
best effort algorithm it's okay to be

1672
01:25:24,150 --> 01:25:30,719
more conservative than what you ideally

1673
01:25:27,420 --> 01:25:33,360
like there's of course the other problem

1674
01:25:30,719 --> 01:25:35,940
of receiver anyways and delayed action

1675
01:25:33,360 --> 01:25:38,280
TCP which to be accounted for if you

1676
01:25:35,940 --> 01:25:41,549
measuring round-trip time so some of the

1677
01:25:38,280 --> 01:25:43,110
medications for these problems are to

1678
01:25:41,550 --> 01:25:45,360
enable the TCP time stamp option by

1679
01:25:43,110 --> 01:25:46,650
default and to filter the RTD samples

1680
01:25:45,360 --> 01:25:48,989
this is actually a solution from the

1681
01:25:46,650 --> 01:25:51,150
addition of lightweight RFC so pick the

1682
01:25:48,989 --> 01:25:55,259
minimum of the most reason for RTD

1683
01:25:51,150 --> 01:25:57,150
samples and use a target delay of 60

1684
01:25:55,260 --> 01:26:00,210
milliseconds this value is very

1685
01:25:57,150 --> 01:26:01,589
deliberate I noticed there was a

1686
01:26:00,210 --> 01:26:03,119
discussion about this in the analyte

1687
01:26:01,590 --> 01:26:06,480
representation but this value is very

1688
01:26:03,119 --> 01:26:08,969
deliberate so because of why they accept

1689
01:26:06,480 --> 01:26:10,320
everything is 150 and if targaryen

1690
01:26:08,969 --> 01:26:12,449
hundred milliseconds system is very

1691
01:26:10,320 --> 01:26:15,750
little room for on the other delays a

1692
01:26:12,449 --> 01:26:17,129
propagation delay is 0 degree so that's

1693
01:26:15,750 --> 01:26:20,039
why we pick the value of 60 milliseconds

1694
01:26:17,130 --> 01:26:23,730
and it's also larger than the typical

1695
01:26:20,039 --> 01:26:25,530
TCP delay DAC timeout on both Linux and

1696
01:26:23,730 --> 01:26:27,299
Windows now there are of course like

1697
01:26:25,530 --> 01:26:29,179
legacy systems which use higher values

1698
01:26:27,300 --> 01:26:33,480
but in practice this works out very well

1699
01:26:29,179 --> 01:26:35,820
now next slide please so what is more

1700
01:26:33,480 --> 01:26:38,940
than we know this is basically

1701
01:26:35,820 --> 01:26:41,519
introducing the reduction factor f and

1702
01:26:38,940 --> 01:26:43,969
that factor is not a constant it so it's

1703
01:26:41,520 --> 01:26:46,340
an ongoing value based on the ratio

1704
01:26:43,969 --> 01:26:51,320
we target billion the measured based

1705
01:26:46,340 --> 01:26:53,020
divide and we pick a maximum of 16

1706
01:26:51,320 --> 01:26:55,309
because it gives us a trade-off between

1707
01:26:53,020 --> 01:26:57,110
responsiveness and performance of course

1708
01:26:55,310 --> 01:26:59,090
implementations are free to experiment

1709
01:26:57,110 --> 01:27:01,699
with that value but we find 16 to be

1710
01:26:59,090 --> 01:27:03,860
every me sweetheart this saw is

1711
01:27:01,699 --> 01:27:05,239
basically the agency competition problem

1712
01:27:03,860 --> 01:27:08,870
so if you deploy Ledbetter on the low

1713
01:27:05,239 --> 01:27:10,309
latency link it would still it will

1714
01:27:08,870 --> 01:27:13,099
still be less than best effort it will

1715
01:27:10,310 --> 01:27:15,250
not interfere with flows the next back

1716
01:27:13,100 --> 01:27:18,800
please

1717
01:27:15,250 --> 01:27:21,110
so this is to magnificus decreases to

1718
01:27:18,800 --> 01:27:23,590
solve the internet bad fairness problem

1719
01:27:21,110 --> 01:27:27,019
this was actually suggested in the paper

1720
01:27:23,590 --> 01:27:31,580
again this introduces a additional

1721
01:27:27,020 --> 01:27:34,640
factor view and we also specify the

1722
01:27:31,580 --> 01:27:36,320
values that we experimental your iPad so

1723
01:27:34,640 --> 01:27:40,340
using the constant value of 1 and the

1724
01:27:36,320 --> 01:27:42,199
decrease coefficient could be 0.5 the

1725
01:27:40,340 --> 01:27:43,550
other thing that needs to be ensured is

1726
01:27:42,199 --> 01:27:46,969
that the condition window never drops

1727
01:27:43,550 --> 01:27:49,400
below two packets so this is required so

1728
01:27:46,969 --> 01:27:50,960
that middle boxes don't time the flow

1729
01:27:49,400 --> 01:27:52,759
out so we don't want long period of

1730
01:27:50,960 --> 01:27:55,460
silence so you maintain at least a

1731
01:27:52,760 --> 01:27:57,580
minimum rate to the network next slide

1732
01:27:55,460 --> 01:27:57,580
please

1733
01:27:58,630 --> 01:28:04,130
you know so slope is exponential and

1734
01:28:01,610 --> 01:28:06,440
that can cause like massive loss in it

1735
01:28:04,130 --> 01:28:10,699
cost also has other flows to back off so

1736
01:28:06,440 --> 01:28:12,949
what we do here is three things first we

1737
01:28:10,699 --> 01:28:14,360
apply the reduction factor f to the

1738
01:28:12,949 --> 01:28:15,860
condition window increase to live slow

1739
01:28:14,360 --> 01:28:18,620
start that makes it slower than we know

1740
01:28:15,860 --> 01:28:21,650
we also limit the initial condition will

1741
01:28:18,620 --> 01:28:24,559
go to two packets versus the de facto

1742
01:28:21,650 --> 01:28:26,239
standard of ten packets now and there is

1743
01:28:24,560 --> 01:28:27,890
a high start like mechanism it's not

1744
01:28:26,239 --> 01:28:28,549
exactly high start but very similar is

1745
01:28:27,890 --> 01:28:30,620
the target

1746
01:28:28,550 --> 01:28:32,750
if the to delay is measured to be at

1747
01:28:30,620 --> 01:28:34,250
least 3/4 of the target than may exist

1748
01:28:32,750 --> 01:28:37,280
will start immediately and move it to

1749
01:28:34,250 --> 01:28:38,690
condition events but this this high

1750
01:28:37,280 --> 01:28:40,699
straight leg algorithm is only applied

1751
01:28:38,690 --> 01:28:42,589
during the initial slow start subsequent

1752
01:28:40,699 --> 01:28:48,049
slow starts you know used to be recorded

1753
01:28:42,590 --> 01:28:51,770
as Thresh right next week least initials

1754
01:28:48,050 --> 01:28:52,750
Peter it's not on so periodically led by

1755
01:28:51,770 --> 01:28:54,910
plus plus will enter

1756
01:28:52,750 --> 01:28:57,160
to an office where me condition windows

1757
01:28:54,910 --> 01:28:59,110
again frozen it to packets for at least

1758
01:28:57,160 --> 01:29:00,820
two round-trip times and then it will

1759
01:28:59,110 --> 01:29:02,830
look slow start again backward solution

1760
01:29:00,820 --> 01:29:04,840
Alice's thrush value and the way here is

1761
01:29:02,830 --> 01:29:06,850
to not have more than 10% drop in

1762
01:29:04,840 --> 01:29:09,190
throughput because we are probing for

1763
01:29:06,850 --> 01:29:12,220
activity so the way we calculated that

1764
01:29:09,190 --> 01:29:14,110
is from the entry of the slowdown and

1765
01:29:12,220 --> 01:29:15,700
the time taken to reach of crisis Thresh

1766
01:29:14,110 --> 01:29:18,880
we might declare at that value in mine

1767
01:29:15,700 --> 01:29:22,360
so it's effectively it's basically a

1768
01:29:18,880 --> 01:29:23,920
round of like 10 this was the latest

1769
01:29:22,360 --> 01:29:27,190
interest problem it also helps with

1770
01:29:23,920 --> 01:29:32,860
solving the late common problem next

1771
01:29:27,190 --> 01:29:34,960
slide please so the graph was submitted

1772
01:29:32,860 --> 01:29:36,280
just yesterday I don't know if people

1773
01:29:34,960 --> 01:29:38,640
have gotten a chance to link it but

1774
01:29:36,280 --> 01:29:41,800
please go get it and give us feedback

1775
01:29:38,640 --> 01:29:44,140
there is a Ramsey IPR disclosure that we

1776
01:29:41,800 --> 01:29:45,880
just posted I think the numbers three

1777
01:29:44,140 --> 01:29:49,720
six by one I couldn't get it in time for

1778
01:29:45,880 --> 01:29:53,590
these presentation but I make sure the

1779
01:29:49,720 --> 01:29:55,870
slider operator later and then the next

1780
01:29:53,590 --> 01:29:59,350
step would be should this document be

1781
01:29:55,870 --> 01:30:01,240
adopted in ic CLG or some other working

1782
01:29:59,350 --> 01:30:03,940
group from our point of view this is

1783
01:30:01,240 --> 01:30:07,290
widely deployed at this point there are

1784
01:30:03,940 --> 01:30:12,809
a few or research areas for future but

1785
01:30:07,290 --> 01:30:12,810
this is production road questions I

1786
01:30:13,860 --> 01:30:17,230
don't know if you have any time for

1787
01:30:15,700 --> 01:30:21,269
questions well if anybody has a burning

1788
01:30:17,230 --> 01:30:21,269
question to the mic like right now I

1789
01:30:21,600 --> 01:30:24,960
going to opening

1790
01:30:26,749 --> 01:30:32,989
I was just a little curious about the 16

1791
01:30:29,090 --> 01:30:34,820
millisecond threshold where their

1792
01:30:32,989 --> 01:30:39,049
experiments with lower values it would

1793
01:30:34,820 --> 01:30:41,900
be great if a lower value might work the

1794
01:30:39,050 --> 01:30:44,179
main concern is the uniDAC time out in

1795
01:30:41,900 --> 01:30:45,909
Spencer so even though we filter our

1796
01:30:44,179 --> 01:30:49,070
kitty samples it's still possible that

1797
01:30:45,909 --> 01:30:51,228
there would be problems which be used a

1798
01:30:49,070 --> 01:30:53,659
lower value I think let's do that at

1799
01:30:51,229 --> 01:30:55,159
time what is like 40 motivated so that's

1800
01:30:53,659 --> 01:30:58,129
the reason we picked away the high up on

1801
01:30:55,159 --> 01:31:02,780
that but again this value is certainly

1802
01:30:58,130 --> 01:31:06,920
subject more experiments Jake and also

1803
01:31:02,780 --> 01:31:09,409
on a choice at the target delay is there

1804
01:31:06,920 --> 01:31:12,860
is there some reason not to use a

1805
01:31:09,409 --> 01:31:18,920
dynamic value to discover it and try to

1806
01:31:12,860 --> 01:31:21,139
hit like adjust to a difference ah it's

1807
01:31:18,920 --> 01:31:22,699
it's certainly possible again maybe I

1808
01:31:21,139 --> 01:31:24,559
think that when you certainly open to

1809
01:31:22,699 --> 01:31:27,049
more experimentation but in practice

1810
01:31:24,559 --> 01:31:32,530
this value really works well on a

1811
01:31:27,050 --> 01:31:35,059
variety of networks thank you yes

1812
01:31:32,530 --> 01:31:37,699
respect request which is is it possible

1813
01:31:35,059 --> 01:31:39,440
that you can make the value configurable

1814
01:31:37,699 --> 01:31:40,999
based on the Matt's actually because in

1815
01:31:39,440 --> 01:31:43,489
new transports like quick we now

1816
01:31:40,999 --> 01:31:45,889
explicitly communicate that that way now

1817
01:31:43,489 --> 01:31:47,239
would make it more useful in cyclic well

1818
01:31:45,889 --> 01:31:49,479
that's a great solution here for quick

1819
01:31:47,239 --> 01:31:52,339
we can certainly do that

1820
01:31:49,479 --> 01:31:56,780
nicholae informedness i have two points

1821
01:31:52,340 --> 01:31:59,630
to make first CDG is an igneous kernel

1822
01:31:56,780 --> 01:32:01,880
and has lower than best default mode it

1823
01:31:59,630 --> 01:32:05,719
might be worse considering in the

1824
01:32:01,880 --> 01:32:07,670
evaluations and also ATMs has shown to

1825
01:32:05,719 --> 01:32:10,249
be a big problem for that but episodes

1826
01:32:07,670 --> 01:32:14,900
in the past you're not always the best

1827
01:32:10,249 --> 01:32:17,409
afford anymore in pick um it's the

1828
01:32:14,900 --> 01:32:19,579
presentation and this one is worse

1829
01:32:17,409 --> 01:32:26,299
evaluating all these works when you have

1830
01:32:19,579 --> 01:32:27,799
an issue and on the past feedback Thank

1831
01:32:26,300 --> 01:32:30,050
You blogging I hope that the feedback

1832
01:32:27,800 --> 01:32:31,969
was useful about the question of

1833
01:32:30,050 --> 01:32:33,590
adopting let's take that the list

1834
01:32:31,969 --> 01:32:38,570
listen in the figure what that really

1835
01:32:33,590 --> 01:32:40,460
means but I think that will resolve this

1836
01:32:38,570 --> 01:32:42,830
along with the other question of

1837
01:32:40,460 --> 01:32:46,219
I hope you had a lot of documents but I

1838
01:32:42,830 --> 01:32:48,650
give you a presentation and thank you

1839
01:32:46,219 --> 01:32:52,850
everybody see you all in Singapore on

1840
01:32:48,650 --> 01:32:55,969
the list before that I would like to ask

1841
01:32:52,850 --> 01:32:58,429
a quick question of the room how many

1842
01:32:55,969 --> 01:33:02,960
people think that 3168 is a barrier to

1843
01:32:58,429 --> 01:33:05,320
progress find mat in the corridor and

1844
01:33:02,960 --> 01:33:05,320
tell him

