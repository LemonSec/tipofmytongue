1
00:00:04,590 --> 00:00:13,920
is to be a JavaScript where is Brian

2
00:00:08,240 --> 00:00:16,890
okay in and fell and Tony will be taking

3
00:00:13,920 --> 00:00:23,550
notes thank you guys and blue sheets are

4
00:00:16,890 --> 00:00:26,789
going around already a our agenda for

5
00:00:23,550 --> 00:00:33,480
today editorial will kick us off with a

6
00:00:26,789 --> 00:00:35,610
job profile a with for 25 minutes M then

7
00:00:33,480 --> 00:00:38,040
Aaron will talk about a Roth for

8
00:00:35,610 --> 00:00:42,690
browser-based apps for 25 minutes

9
00:00:38,040 --> 00:00:44,850
Danielle will have to is a sessions to

10
00:00:42,690 --> 00:00:48,449
talk about the indie pop and and they

11
00:00:44,850 --> 00:00:51,810
push the quests and the Annabelle I

12
00:00:48,450 --> 00:00:54,150
don't see here yet she'll have a ten

13
00:00:51,810 --> 00:00:57,390
minutes and I will wrap it up with ten

14
00:00:54,150 --> 00:01:12,109
minutes of what a mr. Jones yeah

15
00:00:57,390 --> 00:01:12,109
so let's get going Victoria all right

16
00:01:33,670 --> 00:01:48,259
Victoria yours sorry see if it works

17
00:01:42,770 --> 00:01:50,210
oh yeah is this is this a PDF or is it

18
00:01:48,259 --> 00:01:53,869
okay so it probably I'll draw it from

19
00:01:50,210 --> 00:01:56,030
here yeah you'll do it yourself yeah

20
00:01:53,869 --> 00:01:57,490
yeah okay let me know when when the

21
00:01:56,030 --> 00:02:00,409
drawing all right

22
00:01:57,490 --> 00:02:02,030
Bonjour everybody and welcome thank you

23
00:02:00,409 --> 00:02:04,479
for taking the time to come here and

24
00:02:02,030 --> 00:02:08,000
hear about the progress we made with

25
00:02:04,479 --> 00:02:11,810
generated profile for both to access

26
00:02:08,000 --> 00:02:17,870
tokens how many of you guys read this

27
00:02:11,810 --> 00:02:21,890
back hey that's not bad at all

28
00:02:17,870 --> 00:02:24,950
thank you can we go faster so for the

29
00:02:21,890 --> 00:02:27,078
benefit of the ones I did not read this

30
00:02:24,950 --> 00:02:30,560
back and for the ones of you who read it

31
00:02:27,079 --> 00:02:33,470
while having drinks or other stimulants

32
00:02:30,560 --> 00:02:36,470
I'll give you a very quick recap of

33
00:02:33,470 --> 00:02:38,959
what's in there and above all why we are

34
00:02:36,470 --> 00:02:40,790
doing this because that will inform the

35
00:02:38,959 --> 00:02:42,890
various things that you need to decide

36
00:02:40,790 --> 00:02:44,959
and then I'll very quickly go through

37
00:02:42,890 --> 00:02:47,268
some of the main changes thanks to

38
00:02:44,959 --> 00:02:49,940
everyone who gave a feedback and induced

39
00:02:47,269 --> 00:02:53,060
those changes and then I'll place on the

40
00:02:49,940 --> 00:02:53,750
table free open issues and at least for

41
00:02:53,060 --> 00:02:57,560
one called

42
00:02:53,750 --> 00:03:04,070
for consensus all right so it's the very

43
00:02:57,560 --> 00:03:08,780
cup thank you great so why are we doing

44
00:03:04,070 --> 00:03:12,260
this once again in a you know current

45
00:03:08,780 --> 00:03:14,150
user most for a physician service for

46
00:03:12,260 --> 00:03:18,048
trying to use dread abilities for access

47
00:03:14,150 --> 00:03:19,370
tokens arise I have made formal

48
00:03:18,049 --> 00:03:21,769
presentations in which have presented

49
00:03:19,370 --> 00:03:25,070
some research showing that they more or

50
00:03:21,769 --> 00:03:27,199
less every vendor uses conveys with some

51
00:03:25,070 --> 00:03:29,870
information they just use different

52
00:03:27,199 --> 00:03:31,790
syntax and so there is no in

53
00:03:29,870 --> 00:03:33,920
very easily opportunity for

54
00:03:31,790 --> 00:03:37,120
interoperability and also given that

55
00:03:33,920 --> 00:03:40,488
everyone did these in organic fashion

56
00:03:37,120 --> 00:03:43,010
very often they went through our to say

57
00:03:40,489 --> 00:03:45,590
utilitarian routes which led them to do

58
00:03:43,010 --> 00:03:48,099
things with we might define anti

59
00:03:45,590 --> 00:03:51,159
patterns and similar so very clearly a

60
00:03:48,099 --> 00:03:53,569
guidance voice is not just a problem of

61
00:03:51,159 --> 00:03:56,060
interoperability and finally something

62
00:03:53,569 --> 00:03:58,819
that I failed to highlight during other

63
00:03:56,060 --> 00:04:00,879
updates one thing with you observe very

64
00:03:58,819 --> 00:04:03,828
often in the market is the fact that

65
00:04:00,879 --> 00:04:08,060
more and more products are asking

66
00:04:03,829 --> 00:04:10,670
clients to send ID tokens well instead

67
00:04:08,060 --> 00:04:13,730
they should ask for access tokens reason

68
00:04:10,670 --> 00:04:16,459
being that in order to actually make a

69
00:04:13,730 --> 00:04:18,560
job they need to have a stable format

70
00:04:16,459 --> 00:04:20,478
that they refer to they need to have the

71
00:04:18,560 --> 00:04:22,789
information but we typically get in the

72
00:04:20,478 --> 00:04:24,440
ID token so the outcome is that if you

73
00:04:22,789 --> 00:04:26,719
want to use Google methods you've got to

74
00:04:24,440 --> 00:04:28,520
send them your ID token there are a

75
00:04:26,720 --> 00:04:30,919
number of flaws in Amazon but require

76
00:04:28,520 --> 00:04:34,460
you to do the same so the hope is that

77
00:04:30,919 --> 00:04:36,200
if we create a profile but actually

78
00:04:34,460 --> 00:04:39,138
place in the access token where things

79
00:04:36,200 --> 00:04:43,280
but those products need then we will

80
00:04:39,139 --> 00:04:46,550
curb that practice thank you

81
00:04:43,280 --> 00:04:49,760
so in nutshell what we did we define a

82
00:04:46,550 --> 00:04:52,580
layout where we lay down the values

83
00:04:49,760 --> 00:04:54,590
claims that represent most of the

84
00:04:52,580 --> 00:04:57,500
concepts and type of information but

85
00:04:54,590 --> 00:04:59,989
we've seen vendors are already placing

86
00:04:57,500 --> 00:05:03,889
in their existing in production access

87
00:04:59,990 --> 00:05:05,990
tokens we laid down some rules about for

88
00:05:03,889 --> 00:05:08,510
example determining what should go in

89
00:05:05,990 --> 00:05:11,000
the audience how you would mark certain

90
00:05:08,510 --> 00:05:14,599
parameters and resource into the actual

91
00:05:11,000 --> 00:05:17,210
content of a claim of a token then we

92
00:05:14,599 --> 00:05:20,000
went down with details about how you

93
00:05:17,210 --> 00:05:23,000
validate this talking like classic

94
00:05:20,000 --> 00:05:25,300
enumeration of rules and then we took

95
00:05:23,000 --> 00:05:29,750
finally this opportunity to advise

96
00:05:25,300 --> 00:05:32,720
implementers for pitfalls piracy shows

97
00:05:29,750 --> 00:05:34,460
the security you might encounter when

98
00:05:32,720 --> 00:05:37,669
you place with kind of information in

99
00:05:34,460 --> 00:05:39,739
the access token and if you want to dig

100
00:05:37,669 --> 00:05:42,990
deeper into this we have a couple of

101
00:05:39,740 --> 00:05:47,220
links in other events in which I covered

102
00:05:42,990 --> 00:05:49,610
and just to make these a bit more

103
00:05:47,220 --> 00:05:51,900
concretely Caesar what is smallest

104
00:05:49,610 --> 00:05:55,259
durability access token would look like

105
00:05:51,900 --> 00:05:57,659
and I'm sure there is nothing surprising

106
00:05:55,259 --> 00:06:00,919
in there is like basically what you

107
00:05:57,660 --> 00:06:03,330
would find in a skeleton ID token plus

108
00:06:00,919 --> 00:06:06,000
one indication about who is the client

109
00:06:03,330 --> 00:06:07,469
ID plus with scopes and then if you look

110
00:06:06,000 --> 00:06:15,349
at this back there are other things that

111
00:06:07,470 --> 00:06:15,349
can be done any questions so far

112
00:06:16,070 --> 00:06:21,659
did anyone have our coffee did you check

113
00:06:20,310 --> 00:06:24,900
all of your emails or are you still

114
00:06:21,660 --> 00:06:26,270
checking your emails Zack wore Facebook

115
00:06:24,900 --> 00:06:30,179
for walk or whatever you are using

116
00:06:26,270 --> 00:06:32,849
alright let's look at the open issues so

117
00:06:30,180 --> 00:06:35,009
very quickly what we did our way doesn't

118
00:06:32,849 --> 00:06:37,259
say on it Donny as a question got had a

119
00:06:35,009 --> 00:06:41,099
face it's just too mean Edlund so

120
00:06:37,259 --> 00:06:45,449
question is are you go back can you go

121
00:06:41,099 --> 00:06:46,469
back one slide one more so you said

122
00:06:45,449 --> 00:06:49,880
something you were talking about

123
00:06:46,470 --> 00:06:52,169
guidance on token validation if your

124
00:06:49,880 --> 00:06:56,159
guidance meant to be normative and do

125
00:06:52,169 --> 00:06:57,570
you expect to have some conformance do

126
00:06:56,159 --> 00:06:59,479
you expect conformance to come out of

127
00:06:57,570 --> 00:07:02,789
that

128
00:06:59,479 --> 00:07:04,710
so like certain libraries would meet

129
00:07:02,789 --> 00:07:07,620
certain validation libraries would meet

130
00:07:04,710 --> 00:07:11,000
certain conformance criterias you mean

131
00:07:07,620 --> 00:07:13,830
official tests to certify that's

132
00:07:11,000 --> 00:07:17,370
something that could be used for library

133
00:07:13,830 --> 00:07:20,370
conformance well I guess that's and

134
00:07:17,370 --> 00:07:25,320
that's it possible outcome that to me if

135
00:07:20,370 --> 00:07:28,400
he sees it didn't look quite all the way

136
00:07:25,320 --> 00:07:33,389
normative when I was looking at it I

137
00:07:28,400 --> 00:07:35,340
think it's fairly now maybe I'm missing

138
00:07:33,389 --> 00:07:39,030
vien once or the semantics of normative

139
00:07:35,340 --> 00:07:41,940
verses but to me very spirit of visa is

140
00:07:39,030 --> 00:07:44,489
to help library implementers to know

141
00:07:41,940 --> 00:07:47,039
exactly what to do when they receive is

142
00:07:44,490 --> 00:07:49,590
talking and how to decide whether they

143
00:07:47,039 --> 00:07:52,199
should accept it or not they exactly in

144
00:07:49,590 --> 00:07:55,830
the same fashion as we have done for the

145
00:07:52,199 --> 00:07:56,870
ID tokens back here you have exact steps

146
00:07:55,830 --> 00:07:59,150
that you are supposed to

147
00:07:56,870 --> 00:08:08,530
in order to say whether this is valid or

148
00:07:59,150 --> 00:08:10,969
not did I answer the question all right

149
00:08:08,530 --> 00:08:13,039
Marquis is not having an adverse

150
00:08:10,970 --> 00:08:17,780
reaction so are you satisfied a mere

151
00:08:13,040 --> 00:08:19,820
answer you know more of a normative

152
00:08:17,780 --> 00:08:24,919
document to come out not necessarily

153
00:08:19,820 --> 00:08:28,849
just a guidance so you add you want an

154
00:08:24,920 --> 00:08:31,010
extra level something like open ID we'd

155
00:08:28,850 --> 00:08:33,560
be looking for to do some conformance

156
00:08:31,010 --> 00:08:35,659
testing and stuff yeah well I think they

157
00:08:33,559 --> 00:08:39,159
got a lot of a guidance in here is

158
00:08:35,659 --> 00:08:41,839
definitely amenable to be turned into

159
00:08:39,159 --> 00:08:47,770
conformance testing so I think it's a

160
00:08:41,840 --> 00:08:50,540
possibility for sure great all right so

161
00:08:47,770 --> 00:08:54,620
summarizing the changes since the

162
00:08:50,540 --> 00:08:57,890
earlier episodes at first all the claims

163
00:08:54,620 --> 00:09:01,910
in there were mostly mapping having that

164
00:08:57,890 --> 00:09:03,860
source map to open ID and instead we

165
00:09:01,910 --> 00:09:06,800
changed visa to actually go all the way

166
00:09:03,860 --> 00:09:09,890
to they draw a specification which makes

167
00:09:06,800 --> 00:09:12,920
more sense then in the place where we

168
00:09:09,890 --> 00:09:14,750
mentioned that that we would have tokens

169
00:09:12,920 --> 00:09:16,849
which represent identity I was only

170
00:09:14,750 --> 00:09:19,390
mentioning open ID and instead now I

171
00:09:16,850 --> 00:09:23,390
extended it to mention also

172
00:09:19,390 --> 00:09:27,020
introspection and basically explicitly

173
00:09:23,390 --> 00:09:30,050
opened up to any identity potential

174
00:09:27,020 --> 00:09:32,060
source of identity claims so pretty much

175
00:09:30,050 --> 00:09:34,579
and then also mentioned there clearly

176
00:09:32,060 --> 00:09:36,770
vector opposition servers are free to

177
00:09:34,580 --> 00:09:38,660
place whatever attribute they want in

178
00:09:36,770 --> 00:09:42,680
there as long as we don't have

179
00:09:38,660 --> 00:09:44,630
collisions and similar then I added more

180
00:09:42,680 --> 00:09:47,089
details in the privacy sections in

181
00:09:44,630 --> 00:09:49,220
particular as a result of early feedback

182
00:09:47,090 --> 00:09:51,860
and also misunderstandings thank for

183
00:09:49,220 --> 00:09:54,020
example people are started saying things

184
00:09:51,860 --> 00:09:56,450
to effect over now that I know where

185
00:09:54,020 --> 00:09:58,610
formative access token then I can look

186
00:09:56,450 --> 00:10:00,920
inside the real access token from a

187
00:09:58,610 --> 00:10:03,470
client which clearly not a good idea

188
00:10:00,920 --> 00:10:08,180
so I added language explicitly to

189
00:10:03,470 --> 00:10:10,480
prevent that then although I'm told that

190
00:10:08,180 --> 00:10:12,099
it's super early I

191
00:10:10,480 --> 00:10:17,139
anyway already with all the restoration

192
00:10:12,100 --> 00:10:20,290
templates for jana and then for the off

193
00:10:17,139 --> 00:10:23,230
time i had an open issue so i'll hold on

194
00:10:20,290 --> 00:10:26,160
that and then i had in initial note

195
00:10:23,230 --> 00:10:29,589
which i was saying a number of existing

196
00:10:26,160 --> 00:10:31,660
access tokens in production carry

197
00:10:29,589 --> 00:10:33,880
information about whoever the user

198
00:10:31,660 --> 00:10:36,189
authenticated directly with a physician

199
00:10:33,880 --> 00:10:39,189
server or through an identity provider

200
00:10:36,190 --> 00:10:41,170
and a field reference up but turns out

201
00:10:39,190 --> 00:10:44,560
that if there was no interest from

202
00:10:41,170 --> 00:10:46,420
anyone to actually make anything

203
00:10:44,560 --> 00:10:51,029
normative in there so i just took it out

204
00:10:46,420 --> 00:10:53,410
and then i had a note in there about

205
00:10:51,029 --> 00:10:55,120
finding out whoever victorian is

206
00:10:53,410 --> 00:10:57,430
actually a user token or an application

207
00:10:55,120 --> 00:10:58,930
token and I have an opening from that

208
00:10:57,430 --> 00:11:05,739
but for the time being I just took out

209
00:10:58,930 --> 00:11:08,199
the note okay so here is a released all

210
00:11:05,740 --> 00:11:10,240
the things that the gardener the most

211
00:11:08,199 --> 00:11:13,089
interest and the most discussion but

212
00:11:10,240 --> 00:11:15,190
didn't end up with a clear conclusion on

213
00:11:13,089 --> 00:11:20,589
the list so I'm how big and we can use

214
00:11:15,190 --> 00:11:22,959
this time to come to a conclusion so let

215
00:11:20,589 --> 00:11:25,029
and it basically is a the thing about

216
00:11:22,959 --> 00:11:26,829
distinguishing between subject type and

217
00:11:25,029 --> 00:11:29,230
then some discussion about the affinity

218
00:11:26,829 --> 00:11:31,420
of time behavior and then whoever to

219
00:11:29,230 --> 00:11:34,690
recommend infected together encryption

220
00:11:31,420 --> 00:11:37,689
or anything but to use symmetric keys

221
00:11:34,690 --> 00:11:40,380
for signing or securing the access

222
00:11:37,690 --> 00:11:45,459
tokens so let's look at the first one

223
00:11:40,380 --> 00:11:48,550
thank you so here the idea is existing

224
00:11:45,459 --> 00:11:50,500
access tokens in the market for various

225
00:11:48,550 --> 00:11:53,740
vendors have mechanisms that are used

226
00:11:50,500 --> 00:11:58,620
for the API to determine whoever this

227
00:11:53,740 --> 00:12:03,730
token was issued for a resource owner or

228
00:11:58,620 --> 00:12:07,180
for a or for an application as in does

229
00:12:03,730 --> 00:12:10,029
the subject represent a user or an app

230
00:12:07,180 --> 00:12:12,399
and it very is a variant which is a was

231
00:12:10,029 --> 00:12:14,560
of a token obtained through a

232
00:12:12,399 --> 00:12:18,040
confidential client or for a public line

233
00:12:14,560 --> 00:12:21,010
what is a like let's simply find it just

234
00:12:18,040 --> 00:12:22,420
look at users versus applications and a

235
00:12:21,010 --> 00:12:25,150
very different ways in which people

236
00:12:22,420 --> 00:12:28,120
achieve this like for it

237
00:12:25,150 --> 00:12:31,810
identity server doesn't include a sub

238
00:12:28,120 --> 00:12:33,910
claim when the token is issued through

239
00:12:31,810 --> 00:12:36,369
client credential grant there was a

240
00:12:33,910 --> 00:12:39,969
discussion released and the consensus

241
00:12:36,370 --> 00:12:42,160
was mostly toward we must include if

242
00:12:39,970 --> 00:12:43,810
it's like if we have a sub sub that has

243
00:12:42,160 --> 00:12:45,670
to represent an entity but was

244
00:12:43,810 --> 00:12:48,670
authenticated and in the case of a up

245
00:12:45,670 --> 00:12:51,729
Israel so you've got to have sub in all

246
00:12:48,670 --> 00:12:53,620
cases so we ended up saying about the

247
00:12:51,730 --> 00:12:55,630
yeah we do need a 12-man so we cannot

248
00:12:53,620 --> 00:12:57,070
use these mechanism backwards guys were

249
00:12:55,630 --> 00:13:00,180
using for the third winning

250
00:12:57,070 --> 00:13:03,880
whoever dave token is an up or not then

251
00:13:00,180 --> 00:13:05,829
Carla from octa proposed maybe we can

252
00:13:03,880 --> 00:13:08,680
have a claim a grantee type which

253
00:13:05,830 --> 00:13:11,830
includes the grant that was used for

254
00:13:08,680 --> 00:13:14,079
obtaining wins and the apology for jock

255
00:13:11,830 --> 00:13:15,760
already has this claim but they're in

256
00:13:14,080 --> 00:13:19,060
Veliz they were a number of voices

257
00:13:15,760 --> 00:13:21,520
saying we shouldn't burn the burden the

258
00:13:19,060 --> 00:13:23,170
resource server with knowledge about

259
00:13:21,520 --> 00:13:25,300
this because it's an implementation

260
00:13:23,170 --> 00:13:27,670
detail on the client and of a different

261
00:13:25,300 --> 00:13:30,939
server so we basically excluded that

262
00:13:27,670 --> 00:13:32,469
approach then there was a longer

263
00:13:30,940 --> 00:13:34,780
discussion about whether we should

264
00:13:32,470 --> 00:13:37,270
impose a but in the case of an up token

265
00:13:34,780 --> 00:13:39,250
you just have the sub equal to the

266
00:13:37,270 --> 00:13:41,949
client ID but Vento also doesn't work

267
00:13:39,250 --> 00:13:43,960
well because a lot of current

268
00:13:41,950 --> 00:13:47,170
implementations use different internal

269
00:13:43,960 --> 00:13:48,970
mechanisms for generating client IDs and

270
00:13:47,170 --> 00:13:50,770
the subjects in their own formats

271
00:13:48,970 --> 00:13:51,970
subject can also be different depending

272
00:13:50,770 --> 00:13:55,030
on the relying party

273
00:13:51,970 --> 00:13:56,800
so the and also you don't want to allow

274
00:13:55,030 --> 00:13:59,439
people to choose their own client ID

275
00:13:56,800 --> 00:14:01,719
because especially for entity ends up

276
00:13:59,440 --> 00:14:04,090
being a mess up for security reasons

277
00:14:01,720 --> 00:14:06,310
that we heard during the meeting earlier

278
00:14:04,090 --> 00:14:08,530
in a week and then finally there was

279
00:14:06,310 --> 00:14:10,359
another proposal but we didn't really

280
00:14:08,530 --> 00:14:13,360
vote on which was let's just have a

281
00:14:10,360 --> 00:14:16,570
claim a new claim that states the

282
00:14:13,360 --> 00:14:19,360
natural or the subject is in the service

283
00:14:16,570 --> 00:14:24,220
and represents resource owner or a sub

284
00:14:19,360 --> 00:14:28,000
represents a application so here

285
00:14:24,220 --> 00:14:30,340
basically I'm asking you guys do you

286
00:14:28,000 --> 00:14:33,130
have any idea for solving this for me

287
00:14:30,340 --> 00:14:35,080
they are like I would love it whether

288
00:14:33,130 --> 00:14:37,689
the last one let's say having a new

289
00:14:35,080 --> 00:14:38,200
claim that expresses wins but I'm also

290
00:14:37,690 --> 00:14:42,160
up

291
00:14:38,200 --> 00:14:45,160
the outcome of this is complicated with

292
00:14:42,160 --> 00:14:48,459
as bad implications and so let's not do

293
00:14:45,160 --> 00:14:51,130
this at all and let's leave every vendor

294
00:14:48,460 --> 00:14:53,890
to worry about this aspect in their own

295
00:14:51,130 --> 00:14:58,240
and let's not have it in the intro

296
00:14:53,890 --> 00:14:59,860
profile just richer so two things one if

297
00:14:58,240 --> 00:15:02,050
you are letting your clients pick their

298
00:14:59,860 --> 00:15:03,880
own client ID you're already opening

299
00:15:02,050 --> 00:15:06,699
yourself to be yeah we said we don't

300
00:15:03,880 --> 00:15:09,730
want to do it yeah yeah so that's where

301
00:15:06,700 --> 00:15:11,230
most of the problem of this usually

302
00:15:09,730 --> 00:15:12,970
comes in because if the AAS is

303
00:15:11,230 --> 00:15:15,010
controlling the namespace of the clients

304
00:15:12,970 --> 00:15:17,170
you can make sure that you know the

305
00:15:15,010 --> 00:15:19,180
client ID looks like a client ID

306
00:15:17,170 --> 00:15:21,280
whatever that's supposed to look like or

307
00:15:19,180 --> 00:15:23,319
if you're letting your users pick you

308
00:15:21,280 --> 00:15:26,890
know gooood x' as their username

309
00:15:23,320 --> 00:15:30,340
something else is probably wrong the

310
00:15:26,890 --> 00:15:31,810
other thing is that okay so I guess it's

311
00:15:30,340 --> 00:15:33,940
three things because the other thing is

312
00:15:31,810 --> 00:15:35,380
that in a deployment that I did we

313
00:15:33,940 --> 00:15:39,220
played around with having the grant type

314
00:15:35,380 --> 00:15:43,390
claim there and it really it wasn't very

315
00:15:39,220 --> 00:15:44,500
helpful as it turned out so we we ended

316
00:15:43,390 --> 00:15:50,110
up dropping that and just

317
00:15:44,500 --> 00:15:52,090
differentiating based on the it's like

318
00:15:50,110 --> 00:15:55,960
the subject and there's a client ID

319
00:15:52,090 --> 00:15:57,850
claim that comes back from introspection

320
00:15:55,960 --> 00:15:59,590
so if the subject and client ID are the

321
00:15:57,850 --> 00:16:03,400
same then that signals that this is a

322
00:15:59,590 --> 00:16:05,620
direct client token Justin do you want

323
00:16:03,400 --> 00:16:13,930
elaborate on why you concluded that it

324
00:16:05,620 --> 00:16:15,790
wasn't helpful basically we we figured

325
00:16:13,930 --> 00:16:18,370
out that it was kind of a weird bit of

326
00:16:15,790 --> 00:16:21,699
signaling of like how this token showed

327
00:16:18,370 --> 00:16:25,570
up instead of like what this token was

328
00:16:21,700 --> 00:16:28,000
and what it meant so it's it's basically

329
00:16:25,570 --> 00:16:29,740
it's saying how somebody got this token

330
00:16:28,000 --> 00:16:31,240
and not necessarily what this token

331
00:16:29,740 --> 00:16:35,860
should be good for and who this token

332
00:16:31,240 --> 00:16:37,840
represents and so it was I don't know it

333
00:16:35,860 --> 00:16:40,570
was just kind of a weird mental jump I

334
00:16:37,840 --> 00:16:43,240
mean it's it is a handy shortcut because

335
00:16:40,570 --> 00:16:44,560
you're probably doing that the other

336
00:16:43,240 --> 00:16:46,360
thing and this isn't something that we

337
00:16:44,560 --> 00:16:48,280
ran into in production but the other

338
00:16:46,360 --> 00:16:51,160
thing that we thought it was that

339
00:16:48,280 --> 00:16:52,120
clients can use you know client

340
00:16:51,160 --> 00:16:55,029
assertions

341
00:16:52,120 --> 00:16:56,860
to get a token on their own

342
00:16:55,029 --> 00:17:00,370
that's not client credentials grant type

343
00:16:56,860 --> 00:17:02,740
and so it's not necessarily the right

344
00:17:00,370 --> 00:17:04,480
signal it's kind of it's standing in for

345
00:17:02,740 --> 00:17:06,699
something else which is that the subject

346
00:17:04,480 --> 00:17:08,199
is the client ID and so that's that's

347
00:17:06,699 --> 00:17:09,549
the logic that we went which I think is

348
00:17:08,199 --> 00:17:13,929
the third yeah

349
00:17:09,549 --> 00:17:17,949
the third option there finally Annabelle

350
00:17:13,929 --> 00:17:21,130
has a draft for subject identifier is

351
00:17:17,949 --> 00:17:26,919
that why you're here okay but we should

352
00:17:21,130 --> 00:17:28,380
do that I think and fantastic Annabelle

353
00:17:26,919 --> 00:17:31,210
thinks that's a bad idea

354
00:17:28,380 --> 00:17:34,900
and it's her draft so she's probably the

355
00:17:31,210 --> 00:17:37,150
expert but perhaps something like that

356
00:17:34,900 --> 00:17:40,120
that that allows a little bit more

357
00:17:37,150 --> 00:17:43,419
structured definition could be adopted

358
00:17:40,120 --> 00:17:45,729
into this because that will what allow

359
00:17:43,419 --> 00:17:48,669
us to have more than just a single claim

360
00:17:45,730 --> 00:17:51,309
can you expand on what these draft

361
00:17:48,669 --> 00:17:54,159
so this draft is in the second dense

362
00:17:51,309 --> 00:17:58,450
group and it's for security event tokens

363
00:17:54,159 --> 00:18:00,730
that basically says there is a an object

364
00:17:58,450 --> 00:18:02,470
structure for different types of user

365
00:18:00,730 --> 00:18:05,980
subjects so you can have more than just

366
00:18:02,470 --> 00:18:10,270
a single subject string in the job but

367
00:18:05,980 --> 00:18:13,120
it's all sort of collected into one sub

368
00:18:10,270 --> 00:18:14,918
object so you can have an issue or an

369
00:18:13,120 --> 00:18:17,199
subject field within that you can have

370
00:18:14,919 --> 00:18:20,409
an email identifier a phone identifier

371
00:18:17,200 --> 00:18:22,809
each of them with a type field as well

372
00:18:20,409 --> 00:18:25,929
so is visa something that goes into a

373
00:18:22,809 --> 00:18:27,879
value of a sub claim no no there it's

374
00:18:25,929 --> 00:18:29,620
it's its own claim separate yeah and

375
00:18:27,880 --> 00:18:32,770
there are rules about how it has to

376
00:18:29,620 --> 00:18:36,189
relate to the subject claim and it's not

377
00:18:32,770 --> 00:18:38,379
intended for use in this space but from

378
00:18:36,190 --> 00:18:41,049
a distance there seems you know squint

379
00:18:38,380 --> 00:18:43,270
right and they look close alright thank

380
00:18:41,049 --> 00:18:43,980
you now I'll tell you why that's a bad

381
00:18:43,270 --> 00:18:49,000
idea

382
00:18:43,980 --> 00:18:51,760
Annabella Backman Amazon so I that idea

383
00:18:49,000 --> 00:18:54,700
flashed through my head and the idea of

384
00:18:51,760 --> 00:18:57,370
using subject identifier for this the

385
00:18:54,700 --> 00:19:00,429
reason I think it's a bad idea is that

386
00:18:57,370 --> 00:19:02,620
what that draft talks about is subject

387
00:19:00,429 --> 00:19:04,780
identifiers and types of subject

388
00:19:02,620 --> 00:19:10,030
identifiers so does not talk about types

389
00:19:04,780 --> 00:19:12,490
subject so it's saying I am pointing to

390
00:19:10,030 --> 00:19:16,389
some principle that is the subject and

391
00:19:12,490 --> 00:19:19,170
I'm pointing to it using for example an

392
00:19:16,390 --> 00:19:22,210
email address or a phone number or

393
00:19:19,170 --> 00:19:25,180
theoretically a key pair or any number

394
00:19:22,210 --> 00:19:28,780
of things that we might define down the

395
00:19:25,180 --> 00:19:31,260
road it's entirely possible that we will

396
00:19:28,780 --> 00:19:35,620
have subject identifier types that are

397
00:19:31,260 --> 00:19:37,930
ambiguous as to if they could be handles

398
00:19:35,620 --> 00:19:40,560
to a user they could be handles to an

399
00:19:37,930 --> 00:19:43,240
app they could be handles to an

400
00:19:40,560 --> 00:19:46,510
organizational entity any number of

401
00:19:43,240 --> 00:19:51,100
things so I I would not it might be

402
00:19:46,510 --> 00:19:52,660
interesting to look at that draft as you

403
00:19:51,100 --> 00:19:54,370
mate maybe there's a parallel approach

404
00:19:52,660 --> 00:19:58,120
to follow here

405
00:19:54,370 --> 00:20:01,090
but I would not say throw subject

406
00:19:58,120 --> 00:20:03,459
identifiers at this specifically alright

407
00:20:01,090 --> 00:20:08,110
um now what I actually got up to up here

408
00:20:03,460 --> 00:20:11,140
to say is two things I agree with not

409
00:20:08,110 --> 00:20:16,379
using grant type in particular because

410
00:20:11,140 --> 00:20:19,570
it is tightly coupling this concept to

411
00:20:16,380 --> 00:20:20,800
specific protocol implementation details

412
00:20:19,570 --> 00:20:24,340
and doesn't really make sense to tie

413
00:20:20,800 --> 00:20:26,470
those together what what makes sense as

414
00:20:24,340 --> 00:20:30,370
a mapping between those two which grant

415
00:20:26,470 --> 00:20:33,310
types apply to which you know subject

416
00:20:30,370 --> 00:20:34,750
types that mapping may change over time

417
00:20:33,310 --> 00:20:36,760
it's going to get more complex as new

418
00:20:34,750 --> 00:20:38,470
grant types are introduced as new

419
00:20:36,760 --> 00:20:40,300
subject types are introduced it's

420
00:20:38,470 --> 00:20:42,070
unstable and it would be really

421
00:20:40,300 --> 00:20:43,540
burdensome to try and ask the resource

422
00:20:42,070 --> 00:20:47,320
servers to all figure that out and

423
00:20:43,540 --> 00:20:48,940
understand that if if you're having your

424
00:20:47,320 --> 00:20:50,230
resource servers understand that then at

425
00:20:48,940 --> 00:20:51,910
that point there's probably enough

426
00:20:50,230 --> 00:20:53,890
coupling between your authorization

427
00:20:51,910 --> 00:20:55,210
server and your resource server that you

428
00:20:53,890 --> 00:21:01,120
don't need a standard way to do this

429
00:20:55,210 --> 00:21:04,390
anyway I had a third point which

430
00:21:01,120 --> 00:21:06,969
hopefully says how we do it yes no no

431
00:21:04,390 --> 00:21:10,030
actually of course not that would be

432
00:21:06,970 --> 00:21:12,850
easy I was wondering if you could

433
00:21:10,030 --> 00:21:16,060
quickly summarize what the use cases are

434
00:21:12,850 --> 00:21:18,699
that people are solving or trying to

435
00:21:16,060 --> 00:21:21,309
solve by differentiating between

436
00:21:18,700 --> 00:21:23,409
user and appetizer or what are the

437
00:21:21,309 --> 00:21:27,309
surprises where they need some specific

438
00:21:23,409 --> 00:21:29,440
mechanism to do that so I tried to tease

439
00:21:27,309 --> 00:21:33,489
these out from any people aback we're

440
00:21:29,440 --> 00:21:37,570
already doing these and these Kaiser was

441
00:21:33,489 --> 00:21:39,039
mixed with a case in which the API wants

442
00:21:37,570 --> 00:21:41,320
to know whether the client was a

443
00:21:39,039 --> 00:21:43,960
confidential or not mostly because of

444
00:21:41,320 --> 00:21:46,210
that gives more guarantees about better

445
00:21:43,960 --> 00:21:51,279
client ID actually being a client and

446
00:21:46,210 --> 00:21:55,330
the other case is for when they want one

447
00:21:51,279 --> 00:21:59,320
particular client ID to be say the one

448
00:21:55,330 --> 00:22:01,210
but actually they've the one here is the

449
00:21:59,320 --> 00:22:03,789
only one that can call and there are

450
00:22:01,210 --> 00:22:06,220
certain our physician servers that can

451
00:22:03,789 --> 00:22:08,200
use the same client ID in a different

452
00:22:06,220 --> 00:22:10,779
capacity you can have a client ID but

453
00:22:08,200 --> 00:22:13,929
when you are using it from an iOS app is

454
00:22:10,779 --> 00:22:15,759
just doing the public client flow with

455
00:22:13,929 --> 00:22:18,070
code when you are using it on a server

456
00:22:15,759 --> 00:22:19,509
side instead you can do the proper kind

457
00:22:18,070 --> 00:22:22,658
of credentials okay that sounds like

458
00:22:19,509 --> 00:22:25,059
it's less about user versus app and more

459
00:22:22,659 --> 00:22:29,590
about how what are these circumstances

460
00:22:25,059 --> 00:22:31,869
under which this client and byte by

461
00:22:29,590 --> 00:22:34,299
client here I mean remote piece of code

462
00:22:31,869 --> 00:22:36,759
that is calling me what are the

463
00:22:34,299 --> 00:22:38,019
circumstances under which it's been

464
00:22:36,759 --> 00:22:40,659
authenticated and what the circumstances

465
00:22:38,019 --> 00:22:43,239
under which whatever user may be

466
00:22:40,659 --> 00:22:45,039
interacting with it was authenticated by

467
00:22:43,239 --> 00:22:49,239
me and I think that's very different

468
00:22:45,039 --> 00:22:51,279
from user and applicator versus app as

469
00:22:49,239 --> 00:22:55,090
two different subject types what I think

470
00:22:51,279 --> 00:22:57,609
of is kind of three legged OAuth versus

471
00:22:55,090 --> 00:23:00,369
two-legged OAuth like is there a user

472
00:22:57,609 --> 00:23:05,080
involved in this relationship at all or

473
00:23:00,369 --> 00:23:09,070
is this just a client calling on behalf

474
00:23:05,080 --> 00:23:10,749
of itself so I really think you're

475
00:23:09,070 --> 00:23:13,619
probably asking the wrong question here

476
00:23:10,749 --> 00:23:16,330
so yeah and if you're just gonna go in

477
00:23:13,619 --> 00:23:19,840
time check you have a few minutes over

478
00:23:16,330 --> 00:23:23,109
so see wanna try to I think you have one

479
00:23:19,840 --> 00:23:26,230
more point so you write yeah do I have

480
00:23:23,109 --> 00:23:29,259
points but okay it's a good point thank

481
00:23:26,230 --> 00:23:30,669
you thank you Justin richer what Annabel

482
00:23:29,259 --> 00:23:32,360
just said and I have a concrete example

483
00:23:30,669 --> 00:23:34,610
for that if people want to talk about it

484
00:23:32,360 --> 00:23:37,370
with medical records so great just it

485
00:23:34,610 --> 00:23:40,129
exists okay so on in the interest of

486
00:23:37,370 --> 00:23:42,709
time for this point we'll go back to

487
00:23:40,130 --> 00:23:46,100
release and I left week Lisa to be

488
00:23:42,710 --> 00:23:48,679
rather than subject type determining

489
00:23:46,100 --> 00:23:51,529
whoever the client was a confidential

490
00:23:48,679 --> 00:23:54,350
gossip actually a vindication get ladder

491
00:23:51,529 --> 00:23:56,179
to be okay I think Annabelle made a very

492
00:23:54,350 --> 00:23:58,039
good point we need to rethink the

493
00:23:56,179 --> 00:24:01,039
question here and maybe reach out to the

494
00:23:58,039 --> 00:24:03,470
guys again I think that that was very

495
00:24:01,039 --> 00:24:09,889
good insight great thank you

496
00:24:03,470 --> 00:24:12,950
okay these are is another tough one the

497
00:24:09,889 --> 00:24:16,668
idea is that when you use these access

498
00:24:12,950 --> 00:24:18,950
tokens in for example a first party

499
00:24:16,669 --> 00:24:20,929
scenario in which the access token is

500
00:24:18,950 --> 00:24:23,090
way only artifact that you are sending

501
00:24:20,929 --> 00:24:24,710
to API there are a number of the things

502
00:24:23,090 --> 00:24:26,418
that you normally get in the ID token

503
00:24:24,710 --> 00:24:29,750
such as the time at which you

504
00:24:26,419 --> 00:24:31,669
authenticated and the type of

505
00:24:29,750 --> 00:24:33,529
authentication that you use and similar

506
00:24:31,669 --> 00:24:36,409
become important because you might have

507
00:24:33,529 --> 00:24:38,659
policies that you want to enact on top

508
00:24:36,409 --> 00:24:41,510
of these depending on what you receive

509
00:24:38,659 --> 00:24:43,730
and so basically we need to take these

510
00:24:41,510 --> 00:24:46,669
information and place it in the access

511
00:24:43,730 --> 00:24:48,740
token as well and a lot of providers are

512
00:24:46,669 --> 00:24:50,750
already doing this organically in the

513
00:24:48,740 --> 00:24:52,880
wild of course we challenge what we have

514
00:24:50,750 --> 00:24:55,549
in here is that the momentum of

515
00:24:52,880 --> 00:24:59,539
education is not corresponding to what

516
00:24:55,549 --> 00:25:01,450
to be a lifetime lifetime of a token so

517
00:24:59,539 --> 00:25:05,000
basically here we are placing claims

518
00:25:01,450 --> 00:25:06,919
whose value is determined elsewhere like

519
00:25:05,000 --> 00:25:07,820
for example the moment in which you

520
00:25:06,919 --> 00:25:10,159
sanidine

521
00:25:07,820 --> 00:25:12,350
and you got your first batch of tokens

522
00:25:10,159 --> 00:25:14,090
or if in the middle of a current session

523
00:25:12,350 --> 00:25:15,949
you have to do a step-up authentication

524
00:25:14,090 --> 00:25:19,459
and then we authenticate from time

525
00:25:15,950 --> 00:25:21,980
changes and the method of authentication

526
00:25:19,460 --> 00:25:23,690
changes when next time you use the

527
00:25:21,980 --> 00:25:27,919
corresponding Refresh token we need to

528
00:25:23,690 --> 00:25:31,789
reflect it into into a claim to the

529
00:25:27,919 --> 00:25:33,620
token and here like they need from the

530
00:25:31,789 --> 00:25:36,019
practical and business perspective it's

531
00:25:33,620 --> 00:25:39,709
very clear let's say people already do

532
00:25:36,019 --> 00:25:41,559
this so but at the same time when we

533
00:25:39,710 --> 00:25:44,299
discussed these some people on the list

534
00:25:41,559 --> 00:25:46,070
expressed unease so I just want to give

535
00:25:44,299 --> 00:25:50,000
the opportunity to other people

536
00:25:46,070 --> 00:25:52,850
that unease to bring their concerns and

537
00:25:50,000 --> 00:25:56,150
if you have alternative solutions that

538
00:25:52,850 --> 00:25:58,219
of course still deliver on the

539
00:25:56,150 --> 00:26:07,580
requirement then this is your

540
00:25:58,220 --> 00:26:11,390
opportunity apparent Campbell thing I

541
00:26:07,580 --> 00:26:13,639
one of the doubters and I continue my

542
00:26:11,390 --> 00:26:15,740
doubt but I accept that it's gonna be in

543
00:26:13,640 --> 00:26:17,480
here because yeah requirements and

544
00:26:15,740 --> 00:26:19,040
people are going in anyway but I get I

545
00:26:17,480 --> 00:26:22,100
do get really nervous about what like

546
00:26:19,040 --> 00:26:28,510
what you just said a step authentication

547
00:26:22,100 --> 00:26:32,120
in a session after token was issued

548
00:26:28,510 --> 00:26:35,330
should somehow be reflected in the auth

549
00:26:32,120 --> 00:26:38,479
time of the next token on refresh that's

550
00:26:35,330 --> 00:26:41,090
that sort of thing is is like drawing a

551
00:26:38,480 --> 00:26:44,600
lot of links between things that aren't

552
00:26:41,090 --> 00:26:46,699
really linked and I'd like to see it at

553
00:26:44,600 --> 00:26:50,449
least clarified to this is this is the

554
00:26:46,700 --> 00:26:53,240
auth time or the AMR whatever that was

555
00:26:50,450 --> 00:26:56,420
used at the time of authentication that

556
00:26:53,240 --> 00:26:57,700
the grant was approved or I don't know

557
00:26:56,420 --> 00:27:00,290
the right language it's hard but

558
00:26:57,700 --> 00:27:02,050
creating some sort of ephemeral and

559
00:27:00,290 --> 00:27:04,310
imaginary link between an ongoing

560
00:27:02,050 --> 00:27:06,919
session and however one might describe

561
00:27:04,310 --> 00:27:10,610
that and issued access to friends off of

562
00:27:06,920 --> 00:27:12,320
some other artifact the Refresh token I

563
00:27:10,610 --> 00:27:14,419
think is it's super confusing and

564
00:27:12,320 --> 00:27:16,970
potentially dangerous I agree it's

565
00:27:14,420 --> 00:27:18,080
confusing for the dangerous I think we

566
00:27:16,970 --> 00:27:20,390
should yeah

567
00:27:18,080 --> 00:27:22,010
expand it I think about it we lever to

568
00:27:20,390 --> 00:27:24,320
solve this problem somehow anyway

569
00:27:22,010 --> 00:27:27,080
because I get to make another example

570
00:27:24,320 --> 00:27:28,909
say that you have this access token tied

571
00:27:27,080 --> 00:27:31,010
it to a session we were certain token

572
00:27:28,910 --> 00:27:33,530
the Refresh token and the Refresh token

573
00:27:31,010 --> 00:27:36,379
is a supporting rotation and save it

574
00:27:33,530 --> 00:27:38,180
someone abuses the rotation and uses the

575
00:27:36,380 --> 00:27:44,360
wrong token and have a right time and

576
00:27:38,180 --> 00:27:46,490
now you have to gets a revoke all the

577
00:27:44,360 --> 00:27:48,320
Refresh tokens and allegedly also the

578
00:27:46,490 --> 00:27:50,510
access tokens that were issued as part

579
00:27:48,320 --> 00:27:53,300
of that so you rarely ever that link is

580
00:27:50,510 --> 00:27:55,970
just vector in this case you are you are

581
00:27:53,300 --> 00:27:58,870
using that link to reflect potential

582
00:27:55,970 --> 00:28:01,299
changes in the off time

583
00:27:58,870 --> 00:28:03,760
but in the other case instead of you use

584
00:28:01,299 --> 00:28:06,789
it for doing verification but the thing

585
00:28:03,760 --> 00:28:09,340
is this link between session refresh

586
00:28:06,789 --> 00:28:13,240
tokens and access tokens already exists

587
00:28:09,340 --> 00:28:15,580
in various other aspects part of that is

588
00:28:13,240 --> 00:28:18,549
when you say allegedly it doesn't exist

589
00:28:15,580 --> 00:28:21,399
it's potentially some link that's done

590
00:28:18,549 --> 00:28:25,139
at implementation time and and even if

591
00:28:21,400 --> 00:28:27,400
it does exist it's super weird to have a

592
00:28:25,140 --> 00:28:29,580
step-up authentication that happens in a

593
00:28:27,400 --> 00:28:32,590
completely different context and have

594
00:28:29,580 --> 00:28:33,939
access tokens reflecting that were

595
00:28:32,590 --> 00:28:36,820
issued off of a different authentication

596
00:28:33,940 --> 00:28:41,740
context reflecting that sort of in some

597
00:28:36,820 --> 00:28:45,309
magical real time sorry guys yeah yeah I

598
00:28:41,740 --> 00:28:47,860
need to cut the line here and you can

599
00:28:45,309 --> 00:28:50,168
drop oh okay sorry if we are skipping

600
00:28:47,860 --> 00:28:53,080
goes to the last point there so you

601
00:28:50,169 --> 00:28:55,840
can't you can talk about this the last

602
00:28:53,080 --> 00:28:58,629
point but I don't want it okay great so

603
00:28:55,840 --> 00:28:59,020
fun Annabelle you're good to to come

604
00:28:58,630 --> 00:29:03,190
soon

605
00:28:59,020 --> 00:29:05,320
I just want to give an alternative view

606
00:29:03,190 --> 00:29:10,919
of where that would be useful and that's

607
00:29:05,320 --> 00:29:14,590
if you are doing an oauth2 authorization

608
00:29:10,919 --> 00:29:16,510
request in a context where an earlier

609
00:29:14,590 --> 00:29:19,418
say password-based authentication

610
00:29:16,510 --> 00:29:20,140
happened but because of the nature of

611
00:29:19,419 --> 00:29:21,970
the oauth2

612
00:29:20,140 --> 00:29:24,220
authorization request you need to do

613
00:29:21,970 --> 00:29:27,580
step up at that time then you're going

614
00:29:24,220 --> 00:29:28,840
to have a case where your password based

615
00:29:27,580 --> 00:29:32,439
authentication might have happened

616
00:29:28,840 --> 00:29:34,720
yesterday but your step of your

617
00:29:32,440 --> 00:29:37,900
two-factor whatever you're doing happens

618
00:29:34,720 --> 00:29:39,820
now so having having those as two

619
00:29:37,900 --> 00:29:43,720
different pieces of information could be

620
00:29:39,820 --> 00:29:47,230
valuable having said that I think given

621
00:29:43,720 --> 00:29:50,020
the ambiguity of the term step up and to

622
00:29:47,230 --> 00:29:52,900
factor and all of that and the wide

623
00:29:50,020 --> 00:29:57,280
variety of implementations I think it's

624
00:29:52,900 --> 00:30:00,340
gonna be very hard to really formalize a

625
00:29:57,280 --> 00:30:01,360
nomenclature for all the different

626
00:30:00,340 --> 00:30:03,899
things we're gonna want to talk about

627
00:30:01,360 --> 00:30:07,149
here so this may be a place where just

628
00:30:03,900 --> 00:30:09,190
having the an opportunity for the

629
00:30:07,149 --> 00:30:11,929
different vendors to plug in whatever

630
00:30:09,190 --> 00:30:14,930
they need might be more useful

631
00:30:11,930 --> 00:30:17,210
great tech for time reason not but I

632
00:30:14,930 --> 00:30:19,070
think what I'll call this out

633
00:30:17,210 --> 00:30:21,050
specifically Melissa there is a very

634
00:30:19,070 --> 00:30:26,929
language image spec which is along those

635
00:30:21,050 --> 00:30:29,169
lines so let's look at great just

636
00:30:26,930 --> 00:30:33,260
perfect so Anna here I'll just present

637
00:30:29,170 --> 00:30:36,950
basically we Ave at the very beginning

638
00:30:33,260 --> 00:30:39,710
of a recommendation to use a symmetric

639
00:30:36,950 --> 00:30:42,350
crypto for signing tokens because it's

640
00:30:39,710 --> 00:30:45,260
just easier for people to have a fixed

641
00:30:42,350 --> 00:30:47,419
sequence of stats for retrieving stuff

642
00:30:45,260 --> 00:30:49,129
for metadata and similar I don't

643
00:30:47,420 --> 00:30:52,850
suggested that we should actually

644
00:30:49,130 --> 00:30:55,070
require it and I'm not against it but at

645
00:30:52,850 --> 00:30:57,500
the same time I know that privacy

646
00:30:55,070 --> 00:31:00,040
conscious people were pushing to also

647
00:30:57,500 --> 00:31:01,700
include in their recommendation to use

648
00:31:00,040 --> 00:31:03,530
authenticated encryption

649
00:31:01,700 --> 00:31:06,350
the thing is reka indicating the

650
00:31:03,530 --> 00:31:09,649
corruption today the only specs we have

651
00:31:06,350 --> 00:31:12,169
all use symmetric kids and if that makes

652
00:31:09,650 --> 00:31:14,360
me very uneasy because now I'm leaving

653
00:31:12,170 --> 00:31:15,820
as exercise to the reader something

654
00:31:14,360 --> 00:31:18,949
which is super important which is

655
00:31:15,820 --> 00:31:21,020
acquiring their stuff you use for

656
00:31:18,950 --> 00:31:25,520
tracking tokens and at the same time

657
00:31:21,020 --> 00:31:27,590
like I saw basically here I wanted to

658
00:31:25,520 --> 00:31:30,080
hear from you guys what that parent will

659
00:31:27,590 --> 00:31:33,199
be run on yeah yeah I agree we're

660
00:31:30,080 --> 00:31:42,800
another fan okay sorry thank great thank

661
00:31:33,200 --> 00:31:47,380
you Thank You Aaron my chance jwe does

662
00:31:42,800 --> 00:31:53,030
authenticated encryption but first by

663
00:31:47,380 --> 00:31:56,480
using public key key derivation so the

664
00:31:53,030 --> 00:31:59,149
symmetric key is a transient artifact

665
00:31:56,480 --> 00:32:01,510
it's all doesn't done using public key

666
00:31:59,150 --> 00:32:01,510
cryptography

667
00:32:15,340 --> 00:32:26,750
okay this is gonna be a whirlwind I'm

668
00:32:18,260 --> 00:32:28,429
Aaron Preki great look at that so if

669
00:32:26,750 --> 00:32:29,840
you're who here has read this draft ever

670
00:32:28,429 --> 00:32:35,299
curiosity this is a fun game to play

671
00:32:29,840 --> 00:32:37,459
great okay a few of you so the summary

672
00:32:35,299 --> 00:32:39,020
of this of this draft is that it is

673
00:32:37,460 --> 00:32:40,730
recommendations for people who are

674
00:32:39,020 --> 00:32:42,408
building browser-based apps or

675
00:32:40,730 --> 00:32:43,610
JavaScript based apps or single page

676
00:32:42,409 --> 00:32:48,140
apps whatever you want to call them that

677
00:32:43,610 --> 00:32:50,389
are doing auth to in a browser which

678
00:32:48,140 --> 00:32:52,370
typically means that that the browser

679
00:32:50,390 --> 00:32:54,169
ends up holding the access token but

680
00:32:52,370 --> 00:32:56,360
we'll get into some of that so that's

681
00:32:54,169 --> 00:32:58,159
the sort of overall scope the read this

682
00:32:56,360 --> 00:33:00,610
is sort of supposed to be the parallel

683
00:32:58,159 --> 00:33:04,490
to the native apps best practices that

684
00:33:00,610 --> 00:33:06,649
that we already have this is a summary

685
00:33:04,490 --> 00:33:08,120
of what the document currently says some

686
00:33:06,650 --> 00:33:08,360
of these points are currently up for

687
00:33:08,120 --> 00:33:10,729
debate

688
00:33:08,360 --> 00:33:13,908
so the recommendation for browser based

689
00:33:10,730 --> 00:33:16,010
apps use auth code flow plus pixie do

690
00:33:13,909 --> 00:33:17,179
not must not return access tokens in the

691
00:33:16,010 --> 00:33:20,150
front channel which rules out the

692
00:33:17,179 --> 00:33:22,130
implicit flow completely must use the

693
00:33:20,150 --> 00:33:26,090
oauth2 state parameter for CSRF

694
00:33:22,130 --> 00:33:27,679
protection it absolutely requires exact

695
00:33:26,090 --> 00:33:32,139
redirect URI matching that's actually

696
00:33:27,679 --> 00:33:34,909
changed from last last time we met and

697
00:33:32,140 --> 00:33:36,679
there is a recommendation that access

698
00:33:34,909 --> 00:33:39,830
authorization servers should not return

699
00:33:36,679 --> 00:33:41,240
refresh tokens and that one is one of

700
00:33:39,830 --> 00:33:42,889
the points we're going to talk about but

701
00:33:41,240 --> 00:33:46,070
that is what we had currently discussed

702
00:33:42,890 --> 00:33:48,919
before we started having discussions on

703
00:33:46,070 --> 00:33:51,830
the list so some changes since the last

704
00:33:48,919 --> 00:33:53,840
meaning exact redirect URI is new it

705
00:33:51,830 --> 00:33:57,889
used to say same domain redirect URI

706
00:33:53,840 --> 00:33:59,600
matching which yeah I did a whole

707
00:33:57,890 --> 00:34:02,090
restructuring of the document to split

708
00:33:59,600 --> 00:34:03,860
this into describing essentially three

709
00:34:02,090 --> 00:34:07,280
architectural patterns for this kind of

710
00:34:03,860 --> 00:34:09,889
app deployment and one is architecture

711
00:34:07,280 --> 00:34:11,179
patterns is when your everything's on

712
00:34:09,889 --> 00:34:13,550
the same domain the resource server the

713
00:34:11,179 --> 00:34:15,560
client and the authorization server and

714
00:34:13,550 --> 00:34:17,450
there was a bunch of clarifications and

715
00:34:15,560 --> 00:34:19,779
typo fixes that a bunch of you help me

716
00:34:17,449 --> 00:34:23,159
find so thanks for that

717
00:34:19,780 --> 00:34:26,620
this is one of the architecture patterns

718
00:34:23,159 --> 00:34:31,750
single page app with a back-end and in

719
00:34:26,620 --> 00:34:33,460
this case this is this is one of the

720
00:34:31,750 --> 00:34:35,050
things that I think we need to discuss a

721
00:34:33,460 --> 00:34:36,490
little bit more about what we actually

722
00:34:35,050 --> 00:34:38,380
want to recommend here the

723
00:34:36,489 --> 00:34:40,060
recommendation here is basically that if

724
00:34:38,380 --> 00:34:41,950
you if your single page app has a

725
00:34:40,060 --> 00:34:44,650
back-end then you should actually do o

726
00:34:41,949 --> 00:34:47,020
auth in the backend component and not do

727
00:34:44,650 --> 00:34:49,930
OAuth in the in the JavaScript code at

728
00:34:47,020 --> 00:34:52,540
all the question then becomes do we say

729
00:34:49,929 --> 00:34:53,889
anything about whether or not the access

730
00:34:52,540 --> 00:34:55,719
token should actually live in the

731
00:34:53,889 --> 00:34:57,220
JavaScript app or if that should be

732
00:34:55,719 --> 00:34:59,589
something that is not the access token

733
00:34:57,220 --> 00:35:03,959
like an encrypted session cookie or some

734
00:34:59,590 --> 00:35:05,980
other thing that's a point up for debate

735
00:35:03,960 --> 00:35:07,630
this is one of the architectures one of

736
00:35:05,980 --> 00:35:10,870
the other architectures is a single page

737
00:35:07,630 --> 00:35:13,080
app without a back-end which i think is

738
00:35:10,870 --> 00:35:15,700
probably actually a less common pattern

739
00:35:13,080 --> 00:35:16,750
but it is still possible to do this and

740
00:35:15,700 --> 00:35:18,370
plenty of people do have situations

741
00:35:16,750 --> 00:35:19,900
where this is necessary and that is

742
00:35:18,370 --> 00:35:22,450
where your JavaScript app is served from

743
00:35:19,900 --> 00:35:24,310
a web host that doesn't have any dynamic

744
00:35:22,450 --> 00:35:25,600
back-end itself and it talks then

745
00:35:24,310 --> 00:35:27,490
directly to the resource server in

746
00:35:25,600 --> 00:35:30,100
efficient servers and in this case the

747
00:35:27,490 --> 00:35:32,350
browser app does in fact carry ahold the

748
00:35:30,100 --> 00:35:34,330
access token it has to actually have

749
00:35:32,350 --> 00:35:37,140
access to it and you can't do any cookie

750
00:35:34,330 --> 00:35:41,319
level protections of it

751
00:35:37,140 --> 00:35:42,910
so same doing applications this is one

752
00:35:41,320 --> 00:35:46,030
of the ones that's gotten a lot of

753
00:35:42,910 --> 00:35:48,310
discussion on the list which I think we

754
00:35:46,030 --> 00:35:50,260
need to come to an agreement on what

755
00:35:48,310 --> 00:35:54,970
exactly is the scope of this document

756
00:35:50,260 --> 00:35:56,500
recommending here so same two main

757
00:35:54,970 --> 00:35:58,209
applications what I mean by this is that

758
00:35:56,500 --> 00:36:00,790
when everything is on the same domain or

759
00:35:58,210 --> 00:36:02,680
sub domains so if everything is off of

760
00:36:00,790 --> 00:36:05,860
example comm like resource server

761
00:36:02,680 --> 00:36:09,970
example API two example com auth dot

762
00:36:05,860 --> 00:36:12,250
example comm and app example com they

763
00:36:09,970 --> 00:36:14,439
can all share cookies on example com so

764
00:36:12,250 --> 00:36:16,600
you had end up actually not needing off

765
00:36:14,440 --> 00:36:19,540
at all for one and if you do still want

766
00:36:16,600 --> 00:36:21,160
to use OAuth there are ways to protect

767
00:36:19,540 --> 00:36:23,529
it better than actually having the

768
00:36:21,160 --> 00:36:28,540
access token end up in accessible from

769
00:36:23,530 --> 00:36:31,630
JavaScript so right now the document

770
00:36:28,540 --> 00:36:32,440
says maybe you should just avoid using

771
00:36:31,630 --> 00:36:35,530
OAuth and do some

772
00:36:32,440 --> 00:36:37,089
on your own maybe that's not the best

773
00:36:35,530 --> 00:36:41,500
recommendation we should be making for

774
00:36:37,089 --> 00:36:43,569
an OAuth spec but it does but but

775
00:36:41,500 --> 00:36:45,670
actually using OAuth as written in this

776
00:36:43,569 --> 00:36:49,930
situation is actually worse because

777
00:36:45,670 --> 00:36:52,660
there are more holes that can open up

778
00:36:49,930 --> 00:36:56,500
when you have this protection mechanism

779
00:36:52,660 --> 00:36:58,629
that is already otherwise there so

780
00:36:56,500 --> 00:37:00,400
that's a first point the redirect the

781
00:36:58,630 --> 00:37:03,130
redirect step where everything's being

782
00:37:00,400 --> 00:37:04,810
passed around over redirects is where a

783
00:37:03,130 --> 00:37:06,940
lot of the flaws come from an OAuth or a

784
00:37:04,810 --> 00:37:08,140
lot of the holes come from and you don't

785
00:37:06,940 --> 00:37:10,900
actually need to do that if everything's

786
00:37:08,140 --> 00:37:13,060
on the same domain but having a

787
00:37:10,900 --> 00:37:14,829
separation between a s and RS and all

788
00:37:13,060 --> 00:37:16,328
that is useful because it lets you

789
00:37:14,829 --> 00:37:20,800
centralize your account management and

790
00:37:16,329 --> 00:37:22,089
MFA and all that so there's a couple

791
00:37:20,800 --> 00:37:24,849
different approaches we could do we go

792
00:37:22,089 --> 00:37:26,078
here I guess we could say that the scope

793
00:37:24,849 --> 00:37:27,849
of this document assumes that you're

794
00:37:26,079 --> 00:37:30,310
going to be using OAuth already and we

795
00:37:27,849 --> 00:37:32,500
ignore the case that you might not use

796
00:37:30,310 --> 00:37:35,290
OAuth and only talk about how to do

797
00:37:32,500 --> 00:37:36,970
OAuth in this case in which case what

798
00:37:35,290 --> 00:37:39,550
exactly do we say about this case is

799
00:37:36,970 --> 00:37:41,680
there anything unique about this case or

800
00:37:39,550 --> 00:37:44,079
we try to say that there is a particular

801
00:37:41,680 --> 00:37:47,379
recommendation for same domain

802
00:37:44,079 --> 00:37:50,369
applications that maybe doesn't use

803
00:37:47,380 --> 00:37:54,910
OAuth maybe uses OAuth in as a new way

804
00:37:50,369 --> 00:37:56,589
so I'm curious about thoughts on this

805
00:37:54,910 --> 00:37:58,598
bucket this is one of the three the

806
00:37:56,589 --> 00:38:00,549
three architecture patterns which we

807
00:37:58,599 --> 00:38:03,210
discussed in the last meeting and on the

808
00:38:00,550 --> 00:38:07,810
lists and now we're kind of seeing that

809
00:38:03,210 --> 00:38:09,280
some some questions around it I'm gonna

810
00:38:07,810 --> 00:38:10,210
look forward really quick yeah okay

811
00:38:09,280 --> 00:38:13,349
let's talk about this one and then I

812
00:38:10,210 --> 00:38:13,349
have a bunch of other open questions

813
00:38:13,710 --> 00:38:17,650
Justin richer yes this absolutely this

814
00:38:16,180 --> 00:38:19,810
discussion absolutely needs to be in

815
00:38:17,650 --> 00:38:21,640
scope because people coming in outside

816
00:38:19,810 --> 00:38:23,650
of the auth working group are going to

817
00:38:21,640 --> 00:38:26,410
be saying I have a browser-based app

818
00:38:23,650 --> 00:38:28,210
I've heard of ooofff what do I do and if

819
00:38:26,410 --> 00:38:30,578
I get to an official document that says

820
00:38:28,210 --> 00:38:32,890
hey if your app looks like this don't

821
00:38:30,579 --> 00:38:35,230
use OAuth I might actually do the right

822
00:38:32,890 --> 00:38:38,770
thing and not use OAuth so I think it

823
00:38:35,230 --> 00:38:42,520
would be a dangerous disservice to the

824
00:38:38,770 --> 00:38:44,770
Internet if we remove this part of the

825
00:38:42,520 --> 00:38:47,140
document that said we do have to be very

826
00:38:44,770 --> 00:38:49,749
clear about

827
00:38:47,140 --> 00:38:51,788
the boundaries around this which I think

828
00:38:49,749 --> 00:38:53,410
we can continue to clean up the language

829
00:38:51,789 --> 00:38:57,880
there was some discussion on the list in

830
00:38:53,410 --> 00:39:00,759
the last couple of weeks about framing

831
00:38:57,880 --> 00:39:03,039
this in terms of if your back end still

832
00:39:00,759 --> 00:39:06,430
does oh off that's fine but that's

833
00:39:03,039 --> 00:39:10,630
outside the scope of this document the

834
00:39:06,430 --> 00:39:12,700
other part of this is that I know a lot

835
00:39:10,630 --> 00:39:16,390
of developers will look at their SP a

836
00:39:12,700 --> 00:39:19,419
with a back end and will see a back end

837
00:39:16,390 --> 00:39:21,999
less SP a with an API that they're

838
00:39:19,420 --> 00:39:25,480
calling even if it's on the same domain

839
00:39:21,999 --> 00:39:29,470
and all of that other stuff conceptually

840
00:39:25,480 --> 00:39:32,980
in a lot of cases the SP a developer and

841
00:39:29,470 --> 00:39:34,450
the API developer are separated from

842
00:39:32,980 --> 00:39:37,089
each other so they're seeing them as

843
00:39:34,450 --> 00:39:39,308
decoupled services and therefore looking

844
00:39:37,089 --> 00:39:41,589
at Oh F as the solution for doing that

845
00:39:39,309 --> 00:39:43,599
so because this really addresses a

846
00:39:41,589 --> 00:39:45,578
deployment pattern and not necessarily

847
00:39:43,599 --> 00:39:47,349
an application type we have to be

848
00:39:45,579 --> 00:39:49,900
careful with how we describe that so

849
00:39:47,349 --> 00:39:52,239
that we are routing people to make the

850
00:39:49,900 --> 00:39:54,220
right decisions I think that's

851
00:39:52,239 --> 00:39:57,220
absolutely possible and absolutely

852
00:39:54,220 --> 00:40:02,919
necessary that we keep this in this

853
00:39:57,220 --> 00:40:05,529
document the audio of zero

854
00:40:02,920 --> 00:40:08,499
I agree four hundred percent that we

855
00:40:05,529 --> 00:40:12,460
needed to be giving guidance to people

856
00:40:08,499 --> 00:40:15,368
they and if the guidance is for this

857
00:40:12,460 --> 00:40:17,470
particular deployment don't use off use

858
00:40:15,369 --> 00:40:19,599
these other mechanisms that what we

859
00:40:17,470 --> 00:40:22,419
should say the thing right there I will

860
00:40:19,599 --> 00:40:23,980
be careful about is helping people to

861
00:40:22,420 --> 00:40:27,400
understand the implications of a choice

862
00:40:23,980 --> 00:40:30,130
exactly this is something that I'm

863
00:40:27,400 --> 00:40:33,759
trying to do on our cellular product but

864
00:40:30,130 --> 00:40:35,499
the thing is if people do that and they

865
00:40:33,759 --> 00:40:37,930
write our API with some meter world

866
00:40:35,499 --> 00:40:40,919
which expects a cook as opposed to a

867
00:40:37,930 --> 00:40:43,930
talker and then maybe take miss API and

868
00:40:40,920 --> 00:40:46,059
expose it to other clients and now is

869
00:40:43,930 --> 00:40:47,499
API is expecting the cookie than the

870
00:40:46,059 --> 00:40:49,680
other clients will not be able to use or

871
00:40:47,499 --> 00:40:51,519
even in the future they make

872
00:40:49,680 --> 00:40:54,038
architectural changes and these

873
00:40:51,519 --> 00:40:55,209
deployment no longer works people needed

874
00:40:54,039 --> 00:40:57,849
to understand that they need to

875
00:40:55,210 --> 00:40:59,310
backtrack from his approach and then use

876
00:40:57,849 --> 00:41:01,440
the other one and then

877
00:40:59,310 --> 00:41:03,840
if it's likely that their future looks

878
00:41:01,440 --> 00:41:05,700
that way then perhaps they should use

879
00:41:03,840 --> 00:41:08,130
off in this particular case because

880
00:41:05,700 --> 00:41:10,020
otherwise we'll do their work twice so

881
00:41:08,130 --> 00:41:12,150
long story short I think we should tell

882
00:41:10,020 --> 00:41:15,270
people this is a simple and way of doing

883
00:41:12,150 --> 00:41:16,860
this or might not be the right tool but

884
00:41:15,270 --> 00:41:18,360
we also need to have them understand

885
00:41:16,860 --> 00:41:20,210
what are the implications of an

886
00:41:18,360 --> 00:41:32,580
architectural choice is moving forward

887
00:41:20,210 --> 00:41:34,020
yep thanks on the mic sorry I wanted to

888
00:41:32,580 --> 00:41:36,150
clarify it doesn't necessarily mean

889
00:41:34,020 --> 00:41:37,650
backtracking from from there are

890
00:41:36,150 --> 00:41:39,600
critical choices it might mean

891
00:41:37,650 --> 00:41:42,870
augmenting them it is totally possible

892
00:41:39,600 --> 00:41:46,549
that a API can accept a cookie or an

893
00:41:42,870 --> 00:41:46,549
access token of protective there's like

894
00:41:56,180 --> 00:42:00,950
but it might be hard repeat that though

895
00:42:04,130 --> 00:42:12,410
sorry Pizza Pizza us

896
00:42:07,910 --> 00:42:12,410
he said depending on the developer stock

897
00:42:14,810 --> 00:42:22,049
which is fair but I actually came up

898
00:42:19,650 --> 00:42:25,050
here to be jabbar scribe on behalf of

899
00:42:22,050 --> 00:42:27,270
dr. Torsten ladder staff yes comm he

900
00:42:25,050 --> 00:42:32,070
says I think same domain applications do

901
00:42:27,270 --> 00:42:33,630
not belong into this BCP if you want to

902
00:42:32,070 --> 00:42:35,970
describe that pattern write up another

903
00:42:33,630 --> 00:42:37,950
ID we need to either describe it with

904
00:42:35,970 --> 00:42:39,720
all the consequences including the

905
00:42:37,950 --> 00:42:42,750
threat analysis and security recommend

906
00:42:39,720 --> 00:42:44,399
recommend a shion's so okay so I'm

907
00:42:42,750 --> 00:42:50,730
hearing a couple different things here

908
00:42:44,400 --> 00:42:53,820
and possibly probably committing this

909
00:42:50,730 --> 00:42:57,360
analyst but possibly one of the ways to

910
00:42:53,820 --> 00:42:59,700
reconcile this is not calling it same

911
00:42:57,360 --> 00:43:02,370
domain applications and instead trying

912
00:42:59,700 --> 00:43:04,529
to find a pattern that describes this

913
00:43:02,370 --> 00:43:11,490
architecture other than the fact they're

914
00:43:04,530 --> 00:43:13,140
on the same domain because it's

915
00:43:11,490 --> 00:43:15,450
that's not a distinction that Olof

916
00:43:13,140 --> 00:43:16,830
normally makes so maybe that's not the

917
00:43:15,450 --> 00:43:20,220
appropriate distinction to be making in

918
00:43:16,830 --> 00:43:23,580
the spec but we need to find I think to

919
00:43:20,220 --> 00:43:25,319
Justin's point we need to find a what

920
00:43:23,580 --> 00:43:27,600
are people going to be looking for in

921
00:43:25,320 --> 00:43:28,710
this document when they have the

922
00:43:27,600 --> 00:43:30,870
situation we're trying to describe

923
00:43:28,710 --> 00:43:33,960
what's what's their keywords they're

924
00:43:30,870 --> 00:43:37,470
gonna be looking for and that way we can

925
00:43:33,960 --> 00:43:39,150
still cover this content but maybe not

926
00:43:37,470 --> 00:43:41,189
with the same caveats or same

927
00:43:39,150 --> 00:43:44,400
distinctions which I think would also

928
00:43:41,190 --> 00:43:46,470
address Hurston's point I think yeah we

929
00:43:44,400 --> 00:43:49,260
probably have to discuss this a little

930
00:43:46,470 --> 00:43:51,480
bit further but it sounded like very

931
00:43:49,260 --> 00:43:53,370
different advice from different set of

932
00:43:51,480 --> 00:43:57,030
yeah so we have to find out what that or

933
00:43:53,370 --> 00:43:58,529
we have to find out what maturity at

934
00:43:57,030 --> 00:44:00,570
least thinks which direction we should

935
00:43:58,530 --> 00:44:01,800
go because I thought that was actually

936
00:44:00,570 --> 00:44:04,440
quite good

937
00:44:01,800 --> 00:44:06,120
in the sense that you are recommending

938
00:44:04,440 --> 00:44:08,100
not to use ours but you're not saying

939
00:44:06,120 --> 00:44:10,049
what what else they should be using so

940
00:44:08,100 --> 00:44:11,940
in some sense we're not doing a straight

941
00:44:10,050 --> 00:44:15,690
analysis for the other solution that may

942
00:44:11,940 --> 00:44:17,700
not be an idea of topic at all I don't

943
00:44:15,690 --> 00:44:20,010
know yeah that's also also a good point

944
00:44:17,700 --> 00:44:21,509
if if we're gonna say don't do this we

945
00:44:20,010 --> 00:44:25,620
should probably have somewhere else to

946
00:44:21,510 --> 00:44:26,760
send people to tell them what to do okay

947
00:44:25,620 --> 00:44:28,620
so it sounds like we're not gonna be

948
00:44:26,760 --> 00:44:30,120
able to get through this one in any more

949
00:44:28,620 --> 00:44:32,339
progress here so let's move on to the

950
00:44:30,120 --> 00:44:37,350
next because I do have a bunch of other

951
00:44:32,340 --> 00:44:39,030
do you have something else it's fine if

952
00:44:37,350 --> 00:44:42,089
it's not in scope but I think there's a

953
00:44:39,030 --> 00:44:45,090
real opportunity for sort of complicity

954
00:44:42,090 --> 00:44:46,890
by omission if there's nothing no

955
00:44:45,090 --> 00:44:48,120
mention of it in the document people

956
00:44:46,890 --> 00:44:49,859
will come to it and assume that means

957
00:44:48,120 --> 00:44:51,359
it's the right thing to do so I don't

958
00:44:49,860 --> 00:44:53,700
know if it needs to be an architectural

959
00:44:51,360 --> 00:44:58,500
pattern or even just description in out

960
00:44:53,700 --> 00:45:00,270
of scope it doesn't mean this something

961
00:44:58,500 --> 00:45:01,950
some mention of the possibility that

962
00:45:00,270 --> 00:45:03,630
this is not the only way to do it I

963
00:45:01,950 --> 00:45:05,730
think it is necessary in the document I

964
00:45:03,630 --> 00:45:09,840
don't know how but in green with Justin

965
00:45:05,730 --> 00:45:12,360
there okay thank you any other points on

966
00:45:09,840 --> 00:45:14,960
this topic from people who I haven't

967
00:45:12,360 --> 00:45:16,579
heard from yet no okay

968
00:45:14,960 --> 00:45:22,099
so there's a handful of other open

969
00:45:16,579 --> 00:45:23,920
questions what's the time check ten

970
00:45:22,099 --> 00:45:31,190
minutes left

971
00:45:23,920 --> 00:45:33,829
okay these are I think small issues but

972
00:45:31,190 --> 00:45:36,770
these are all ones that we were not that

973
00:45:33,829 --> 00:45:38,240
year there was some points on the list

974
00:45:36,770 --> 00:45:43,099
that I went back and forth on we didn't

975
00:45:38,240 --> 00:45:45,500
come to an agreement on yet so let's

976
00:45:43,099 --> 00:45:48,309
just are the top state right now this

977
00:45:45,500 --> 00:45:50,710
effect says use it for CSRF protection

978
00:45:48,309 --> 00:45:53,480
even though it also says use pixie

979
00:45:50,710 --> 00:45:55,970
security best practice says you can use

980
00:45:53,480 --> 00:45:58,609
pixie force tape for CSRF protection so

981
00:45:55,970 --> 00:46:01,520
those things don't quite match there are

982
00:45:58,609 --> 00:46:03,109
some issues with the fact that the the

983
00:46:01,520 --> 00:46:05,690
client doesn't know that a/s supports

984
00:46:03,109 --> 00:46:07,490
pixie but in this spec the S has to

985
00:46:05,690 --> 00:46:10,010
support pixie so the client should be

986
00:46:07,490 --> 00:46:12,379
able to know do we actually want to

987
00:46:10,010 --> 00:46:14,059
still say that state has to use for csr

988
00:46:12,380 --> 00:46:17,380
protection or should I take that out

989
00:46:14,059 --> 00:46:24,710
because theoretically is covered by

990
00:46:17,380 --> 00:46:25,400
security BCP and using pixie any strong

991
00:46:24,710 --> 00:46:26,930
opinions

992
00:46:25,400 --> 00:46:32,329
if not we'll just skip it and deal with

993
00:46:26,930 --> 00:46:35,868
it later I think so so we have very

994
00:46:32,329 --> 00:46:37,579
carefully designed the language that we

995
00:46:35,869 --> 00:46:40,119
have in the security BCPs or probably a

996
00:46:37,579 --> 00:46:45,349
reference to that would be fine that

997
00:46:40,119 --> 00:46:48,140
which means so you state you must also

998
00:46:45,349 --> 00:46:51,400
use pixie if you're actually used pixie

999
00:46:48,140 --> 00:46:53,598
you might want to drop state under some

1000
00:46:51,400 --> 00:46:54,650
circumstances oh that doesn't sound good

1001
00:46:53,599 --> 00:46:56,450
at all because right now it actually

1002
00:46:54,650 --> 00:47:00,290
says you must use state for CSRF

1003
00:46:56,450 --> 00:47:05,868
protection and I'll be rolling that back

1004
00:47:00,290 --> 00:47:13,430
into like and I don't think this is

1005
00:47:05,869 --> 00:47:15,770
special - okay really I think unless we

1006
00:47:13,430 --> 00:47:18,440
identify something that's really special

1007
00:47:15,770 --> 00:47:20,720
to the SPS yeah if there's nothing you

1008
00:47:18,440 --> 00:47:25,510
need to SP a situation then it is

1009
00:47:20,720 --> 00:47:25,509
probably better to not mention it yeah

1010
00:47:29,580 --> 00:47:39,360
from Jabra Phillips's leave it out or

1011
00:47:31,890 --> 00:47:41,299
rough BCP covers it okay um I'm gonna

1012
00:47:39,360 --> 00:47:45,300
come back to refresh tokens in a minute

1013
00:47:41,300 --> 00:47:48,840
pass for grant right now there is it

1014
00:47:45,300 --> 00:47:51,180
basically says you should use auth code

1015
00:47:48,840 --> 00:47:52,730
and pixie but if you really need to you

1016
00:47:51,180 --> 00:47:55,169
can use the password grant

1017
00:47:52,730 --> 00:47:58,050
can we just say you can't use the

1018
00:47:55,170 --> 00:48:02,070
password grant because I don't think

1019
00:47:58,050 --> 00:48:04,140
that's a good idea for anybody I'm

1020
00:48:02,070 --> 00:48:05,120
seeing a bunch of nods of yes let's kill

1021
00:48:04,140 --> 00:48:08,250
it

1022
00:48:05,120 --> 00:48:10,259
I'm a chopped Bradley yubico I'm in

1023
00:48:08,250 --> 00:48:13,230
favor of removing the password crap

1024
00:48:10,260 --> 00:48:15,120
because it's just great that also means

1025
00:48:13,230 --> 00:48:16,710
I can simplify I can make it a must use

1026
00:48:15,120 --> 00:48:22,049
auth code and pixie which clarifies

1027
00:48:16,710 --> 00:48:26,670
everything in the scope as well there's

1028
00:48:22,050 --> 00:48:29,160
a plus one from Torsten great okay

1029
00:48:26,670 --> 00:48:34,040
that's pretty that's pretty raising my

1030
00:48:29,160 --> 00:48:36,029
plus 1000 okay great

1031
00:48:34,040 --> 00:48:39,690
section nine point eight in the document

1032
00:48:36,030 --> 00:48:41,750
it this is I might just talk to Torsten

1033
00:48:39,690 --> 00:48:44,070
about this there there is a list of

1034
00:48:41,750 --> 00:48:47,670
security issues specifically with the

1035
00:48:44,070 --> 00:48:50,010
implicit flow a lot of these refer out

1036
00:48:47,670 --> 00:48:51,450
to the security BCP for the details and

1037
00:48:50,010 --> 00:48:54,360
there's just a summary of them there are

1038
00:48:51,450 --> 00:48:56,430
a couple in there that are I didn't see

1039
00:48:54,360 --> 00:48:58,320
in the security BCP that are unique to

1040
00:48:56,430 --> 00:49:01,529
the implicit flow and I put them in here

1041
00:48:58,320 --> 00:49:03,150
because people you're writing JavaScript

1042
00:49:01,530 --> 00:49:05,160
apps are coming out this with the

1043
00:49:03,150 --> 00:49:07,110
history of having used the implicit flow

1044
00:49:05,160 --> 00:49:09,089
and I wanted to specifically call out

1045
00:49:07,110 --> 00:49:10,590
like here's all the reasons not to do

1046
00:49:09,090 --> 00:49:14,610
that which is why you should be doing

1047
00:49:10,590 --> 00:49:17,460
this instead I think it was Torsen who

1048
00:49:14,610 --> 00:49:20,070
suggested just saying hey go read the

1049
00:49:17,460 --> 00:49:22,050
security BCP for this but I think it's

1050
00:49:20,070 --> 00:49:25,170
important to keep a reference to these

1051
00:49:22,050 --> 00:49:29,010
in this document because of the baggage

1052
00:49:25,170 --> 00:49:31,380
of because of the history just enricher

1053
00:49:29,010 --> 00:49:32,760
plus one we need to keep in mind what

1054
00:49:31,380 --> 00:49:33,780
people are going to be looking for and

1055
00:49:32,760 --> 00:49:35,310
what people are going to be using this

1056
00:49:33,780 --> 00:49:37,380
document for and that's more important

1057
00:49:35,310 --> 00:49:39,690
than our idealistic structure of

1058
00:49:37,380 --> 00:49:42,900
documents and information

1059
00:49:39,690 --> 00:49:45,210
okay my goal here is not to repeat not

1060
00:49:42,900 --> 00:49:48,030
to duplicate all the analysis and and

1061
00:49:45,210 --> 00:49:50,190
the the content insecurity BCP I would

1062
00:49:48,030 --> 00:49:51,329
but I do want to have a summary of when

1063
00:49:50,190 --> 00:49:53,609
there isn't overlap I want to summarize

1064
00:49:51,329 --> 00:49:56,069
it and then link out to it I think

1065
00:49:53,609 --> 00:49:59,339
that's I think that's safe and you still

1066
00:49:56,069 --> 00:50:01,410
refer to that yeah yeah refer normally

1067
00:49:59,339 --> 00:50:03,180
refer to the security BCP when it when

1068
00:50:01,410 --> 00:50:04,259
it mentions one of the points I'm trying

1069
00:50:03,180 --> 00:50:10,230
to make but I think people are gonna be

1070
00:50:04,260 --> 00:50:11,819
looking for it here instead okay for the

1071
00:50:10,230 --> 00:50:15,530
oh yeah this I kind of mentioned this

1072
00:50:11,819 --> 00:50:19,319
for the single page app with a back end

1073
00:50:15,530 --> 00:50:21,059
do we need an indication that the access

1074
00:50:19,319 --> 00:50:22,349
token may be sent to the browser and I

1075
00:50:21,059 --> 00:50:24,270
guess that would be an indication to the

1076
00:50:22,349 --> 00:50:26,490
resource server or authorization server

1077
00:50:24,270 --> 00:50:28,380
that this access token actually may end

1078
00:50:26,490 --> 00:50:30,660
up in a browser which is not a

1079
00:50:28,380 --> 00:50:31,470
confidential client which has a totally

1080
00:50:30,660 --> 00:50:33,779
different threat model than the

1081
00:50:31,470 --> 00:50:35,279
confidential client this is an

1082
00:50:33,780 --> 00:50:37,140
interesting one and there's no mention

1083
00:50:35,280 --> 00:50:38,190
of this right now in the document and I

1084
00:50:37,140 --> 00:50:41,970
don't actually know of anything else

1085
00:50:38,190 --> 00:50:44,190
that's sort of doing this the benefit to

1086
00:50:41,970 --> 00:50:46,078
this is that the a s would be able to

1087
00:50:44,190 --> 00:50:48,569
make better decisions about token

1088
00:50:46,079 --> 00:50:52,289
lifetimes and when every prompts rough

1089
00:50:48,569 --> 00:50:54,029
indication things like that as it is

1090
00:50:52,289 --> 00:50:56,549
right now if you write an OAuth app and

1091
00:50:54,029 --> 00:50:57,750
you just go and you get a client ID and

1092
00:50:56,549 --> 00:51:00,359
client secret and then just don't use

1093
00:50:57,750 --> 00:51:02,849
the secret the a s is gonna think that

1094
00:51:00,359 --> 00:51:04,710
it's a confidential client the S may

1095
00:51:02,849 --> 00:51:06,809
know that the grant happened without the

1096
00:51:04,710 --> 00:51:09,180
secret but there isn't really an

1097
00:51:06,809 --> 00:51:11,789
indication that whether that access

1098
00:51:09,180 --> 00:51:18,839
token is you know held tight or ends up

1099
00:51:11,789 --> 00:51:20,460
in a browser okay so I don't know what

1100
00:51:18,839 --> 00:51:22,349
the solution would be here we we need to

1101
00:51:20,460 --> 00:51:24,299
talk about what mechanism to actually

1102
00:51:22,349 --> 00:51:28,740
use for this but it wouldn't need to be

1103
00:51:24,299 --> 00:51:31,440
some sort of communication about the

1104
00:51:28,740 --> 00:51:33,419
access token or about the grant that

1105
00:51:31,440 --> 00:51:35,279
says the client is probably gonna give

1106
00:51:33,420 --> 00:51:38,010
this to a browser which is a much less

1107
00:51:35,279 --> 00:51:39,630
trusted environment does this sound like

1108
00:51:38,010 --> 00:51:41,670
something people would like to have a

1109
00:51:39,630 --> 00:51:44,970
mechanism for and then we figure out

1110
00:51:41,670 --> 00:51:46,920
what the mechanism is later some nods

1111
00:51:44,970 --> 00:51:48,419
some nods anybody really opposed to this

1112
00:51:46,920 --> 00:51:50,569
is anybody like think this is totally

1113
00:51:48,420 --> 00:51:50,569
pointless

1114
00:51:52,099 --> 00:51:56,719
not securing alright I just question do

1115
00:51:54,410 --> 00:51:58,879
you really need to send access to a

1116
00:51:56,719 --> 00:52:04,640
computer browser well this kind of use

1117
00:51:58,880 --> 00:52:06,319
case that is a good question in it makes

1118
00:52:04,640 --> 00:52:09,979
some deployments easier because you can

1119
00:52:06,319 --> 00:52:15,619
avoid having a separate session with the

1120
00:52:09,979 --> 00:52:19,459
server um we could also say don't do

1121
00:52:15,619 --> 00:52:21,019
that and like force you to require to

1122
00:52:19,459 --> 00:52:23,839
send it to make a session but then that

1123
00:52:21,019 --> 00:52:25,549
does is like limit your architecture a

1124
00:52:23,839 --> 00:52:28,308
little bit it requires you to do

1125
00:52:25,549 --> 00:52:30,259
something else I wouldn't be opposed to

1126
00:52:28,309 --> 00:52:33,940
making that a requirement for this

1127
00:52:30,259 --> 00:52:35,859
architecture though because it does

1128
00:52:33,940 --> 00:52:38,660
clean it up

1129
00:52:35,859 --> 00:52:41,569
Anabelle back in an Amazon um else I

1130
00:52:38,660 --> 00:52:44,058
think there are use cases or access

1131
00:52:41,569 --> 00:52:46,609
tokens and other kinds of credentials

1132
00:52:44,059 --> 00:52:50,719
being sent down to the browser and use

1133
00:52:46,609 --> 00:52:53,089
directly from there tonight can I enter

1134
00:52:50,719 --> 00:52:54,619
that it does it does it is the

1135
00:52:53,089 --> 00:52:57,828
particular case of there is a back-end

1136
00:52:54,619 --> 00:52:59,539
that's gonna be proxying API calls so

1137
00:52:57,829 --> 00:53:02,869
this is this is this particular case for

1138
00:52:59,539 --> 00:53:05,989
the case where the total yes in the case

1139
00:53:02,869 --> 00:53:11,150
where the the access token is actually

1140
00:53:05,989 --> 00:53:13,599
being acquired by a back-end but is yeah

1141
00:53:11,150 --> 00:53:15,619
there's there's communities for

1142
00:53:13,599 --> 00:53:17,719
acquiring it on the back end and then

1143
00:53:15,619 --> 00:53:23,719
supplying it to the front-end for use

1144
00:53:17,719 --> 00:53:26,690
from there they're what actually add up

1145
00:53:23,719 --> 00:53:29,239
to here to say is that I'm not strongly

1146
00:53:26,690 --> 00:53:31,729
opposed to a signal that this token is

1147
00:53:29,239 --> 00:53:34,160
going to be sent to the browser but I

1148
00:53:31,729 --> 00:53:37,218
think we have to be realistic about the

1149
00:53:34,160 --> 00:53:39,709
fact that we're handing access tokens to

1150
00:53:37,219 --> 00:53:42,499
a client and oftentimes we don't know

1151
00:53:39,709 --> 00:53:46,848
what the hell they're doing with them so

1152
00:53:42,499 --> 00:53:49,968
I be cautious about creating a false

1153
00:53:46,849 --> 00:53:52,910
sense of confidence in the client

1154
00:53:49,969 --> 00:53:56,449
behavior by including something like

1155
00:53:52,910 --> 00:53:58,788
this it's ultimately kind of opt-in on

1156
00:53:56,449 --> 00:54:02,420
the part of the client anyway and if you

1157
00:53:58,789 --> 00:54:05,720
are being really sophisticated you can

1158
00:54:02,420 --> 00:54:09,070
probably detect things like this without

1159
00:54:05,720 --> 00:54:09,069
an overt signal okay

1160
00:54:09,260 --> 00:54:13,490
jabber on jabber on behalf of Torsten he

1161
00:54:11,720 --> 00:54:16,160
says I don't believe this is a good idea

1162
00:54:13,490 --> 00:54:20,020
without Sundra constraining which I

1163
00:54:16,160 --> 00:54:23,359
think makes it really hard but um in a

1164
00:54:20,020 --> 00:54:24,920
Brian here on my own behalf I I think I

1165
00:54:23,359 --> 00:54:26,509
kind of agree with that about it I feel

1166
00:54:24,920 --> 00:54:29,240
like trying to build explicit signals

1167
00:54:26,510 --> 00:54:33,320
here is a super slippery slope that gets

1168
00:54:29,240 --> 00:54:34,848
hard like we're gonna have a I mean this

1169
00:54:33,320 --> 00:54:36,740
is one specific instance but it's like

1170
00:54:34,849 --> 00:54:38,540
you you want some kind of signal here

1171
00:54:36,740 --> 00:54:40,160
for a client to tell you just how

1172
00:54:38,540 --> 00:54:44,320
promiscuous they're gonna be with the

1173
00:54:40,160 --> 00:54:50,118
access token it's like I it feels really

1174
00:54:44,320 --> 00:54:51,770
yeah okay okay not good to me it's like

1175
00:54:50,119 --> 00:54:53,390
you know I don't know when I set my

1176
00:54:51,770 --> 00:54:54,560
password with a provider they don't ask

1177
00:54:53,390 --> 00:54:56,060
me are you gonna share this with

1178
00:54:54,560 --> 00:54:58,940
somebody else and make different

1179
00:54:56,060 --> 00:55:01,670
decisions about rotation policy based on

1180
00:54:58,940 --> 00:55:04,810
my bad decisions or my my signalling

1181
00:55:01,670 --> 00:55:08,480
intent about my bad decisions it's

1182
00:55:04,810 --> 00:55:10,849
that's a fair point right nothing that

1183
00:55:08,480 --> 00:55:12,200
it's gonna happen it's like everything's

1184
00:55:10,849 --> 00:55:18,500
on a protector it might be a good idea

1185
00:55:12,200 --> 00:55:20,930
but yeah victory of zero I think we have

1186
00:55:18,500 --> 00:55:23,570
a argument about there we can't protect

1187
00:55:20,930 --> 00:55:25,669
everyone in every situation doesn't mean

1188
00:55:23,570 --> 00:55:28,010
that we shouldn't when we already have

1189
00:55:25,670 --> 00:55:29,930
some knowledge of a topology in this

1190
00:55:28,010 --> 00:55:31,430
particular topology we know what's going

1191
00:55:29,930 --> 00:55:33,980
to happen because we are telling the

1192
00:55:31,430 --> 00:55:36,740
implementer how we want them to behave

1193
00:55:33,980 --> 00:55:39,230
and at that point they're given what we

1194
00:55:36,740 --> 00:55:41,839
said earlier about the scenario in which

1195
00:55:39,230 --> 00:55:43,670
the resource owner the source server

1196
00:55:41,839 --> 00:55:46,029
wants to know whether we are being

1197
00:55:43,670 --> 00:55:49,369
called by a confidential client or not

1198
00:55:46,030 --> 00:55:51,650
in this case it seems that having

1199
00:55:49,369 --> 00:55:53,990
something that helps we're positioned

1200
00:55:51,650 --> 00:55:56,869
server at least to avoid whatever would

1201
00:55:53,990 --> 00:56:00,529
be used for signaling this was a secure

1202
00:55:56,869 --> 00:56:01,880
client is should be a must

1203
00:56:00,530 --> 00:56:04,460
let's say that I wouldn't feel

1204
00:56:01,880 --> 00:56:07,220
comfortable with recommending people to

1205
00:56:04,460 --> 00:56:10,070
do this without also telling them here

1206
00:56:07,220 --> 00:56:11,899
is a way of somewhat defusing their

1207
00:56:10,070 --> 00:56:13,369
potential power or this socket and then

1208
00:56:11,900 --> 00:56:15,200
it's true where people can take your

1209
00:56:13,369 --> 00:56:18,010
talk as simplicity and a public folder

1210
00:56:15,200 --> 00:56:19,480
Google Drive and you cannot prevent that

1211
00:56:18,010 --> 00:56:21,760
in this particular case I think what

1212
00:56:19,480 --> 00:56:23,770
that we very least even if we don't make

1213
00:56:21,760 --> 00:56:26,080
a mechanism even if we don't invent a

1214
00:56:23,770 --> 00:56:27,850
parameter we should put in the notes if

1215
00:56:26,080 --> 00:56:29,529
there is any way for you to tell that

1216
00:56:27,850 --> 00:56:31,390
the authorization server a particular

1217
00:56:29,530 --> 00:56:33,130
physicians have an implementation that's

1218
00:56:31,390 --> 00:56:38,290
your intent then you should make it

1219
00:56:33,130 --> 00:56:41,560
manifest okay and Annabel Backman Amazon

1220
00:56:38,290 --> 00:56:44,080
I think we should think about what the

1221
00:56:41,560 --> 00:56:46,900
alternatives are here for the from a

1222
00:56:44,080 --> 00:56:49,120
topological standpoint if I'm a client

1223
00:56:46,900 --> 00:56:50,740
and I'm passing an access token down to

1224
00:56:49,120 --> 00:56:54,730
the browser so the browser can make

1225
00:56:50,740 --> 00:56:57,450
calls directly the alternative topology

1226
00:56:54,730 --> 00:57:00,490
there is presumably be the browser

1227
00:56:57,450 --> 00:57:02,859
client making a call up to my end point

1228
00:57:00,490 --> 00:57:06,569
and I'm resolving some kind of session

1229
00:57:02,860 --> 00:57:09,460
token' or something in the cookie to

1230
00:57:06,570 --> 00:57:12,030
look up an access token and a database

1231
00:57:09,460 --> 00:57:16,770
in my side in which case I'm already

1232
00:57:12,030 --> 00:57:18,820
dependent on something in the browser

1233
00:57:16,770 --> 00:57:20,050
like it made it may or may not be

1234
00:57:18,820 --> 00:57:23,140
exposed to JavaScript

1235
00:57:20,050 --> 00:57:24,340
once again my access token going to the

1236
00:57:23,140 --> 00:57:25,600
browser or what does that mean does that

1237
00:57:24,340 --> 00:57:27,180
mean I'm giving it to JavaScript does

1238
00:57:25,600 --> 00:57:32,049
that mean I'm putting in a cookie that

1239
00:57:27,180 --> 00:57:35,589
you'd have to distinguish that but my

1240
00:57:32,050 --> 00:57:39,670
point is that we already have to think

1241
00:57:35,590 --> 00:57:42,100
about the downstream effects of the

1242
00:57:39,670 --> 00:57:43,930
clients decision of how to how to

1243
00:57:42,100 --> 00:57:44,940
authenticate their own and how to secure

1244
00:57:43,930 --> 00:57:47,319
their own

1245
00:57:44,940 --> 00:57:49,270
kinnor actions with the with the browser

1246
00:57:47,320 --> 00:57:50,830
client that impacts us whether the

1247
00:57:49,270 --> 00:57:52,600
access token is stored in the client or

1248
00:57:50,830 --> 00:57:56,230
in the browser or in this on the server

1249
00:57:52,600 --> 00:57:58,600
side you can kind of cut line after

1250
00:57:56,230 --> 00:58:01,900
Brian it's actually about four Torsten

1251
00:57:58,600 --> 00:58:04,360
again be a jobber why using a back-end

1252
00:58:01,900 --> 00:58:08,950
if in the end you send the eighty to the

1253
00:58:04,360 --> 00:58:11,910
browser so that is a fair question some

1254
00:58:08,950 --> 00:58:11,910
people do it is the answer

1255
00:58:12,300 --> 00:58:22,480
reasons is the answer and ITP

1256
00:58:16,890 --> 00:58:25,420
okay I think I'm out of time but there's

1257
00:58:22,480 --> 00:58:26,950
this whole whole topic which we

1258
00:58:25,420 --> 00:58:29,680
unfortunately now will have a lot of

1259
00:58:26,950 --> 00:58:31,779
discussion time for visit but the topic

1260
00:58:29,680 --> 00:58:34,930
is refresh tokens

1261
00:58:31,780 --> 00:58:36,600
in single-page apps there was a lot of

1262
00:58:34,930 --> 00:58:39,129
good accession discussion on the list

1263
00:58:36,600 --> 00:58:41,290
reasons that it's a good idea and also

1264
00:58:39,130 --> 00:58:45,010
reasons it's a bad idea and I'm not

1265
00:58:41,290 --> 00:58:49,360
seeing a lot of ways to reconcile this

1266
00:58:45,010 --> 00:58:51,340
guidance right now the the document says

1267
00:58:49,360 --> 00:58:53,590
you should not include ascend refresh

1268
00:58:51,340 --> 00:58:57,330
tokens to browsers that feels like not

1269
00:58:53,590 --> 00:59:00,730
enough of a guidance for the situation

1270
00:58:57,330 --> 00:59:04,270
there are a lot of reasons the good idea

1271
00:59:00,730 --> 00:59:09,430
reasons is the idea so some ways to

1272
00:59:04,270 --> 00:59:11,860
resolve this situation we could say

1273
00:59:09,430 --> 00:59:13,779
there should be no bearer refresh token

1274
00:59:11,860 --> 00:59:16,210
so it requires some sort of proof of

1275
00:59:13,780 --> 00:59:17,920
possession which is sort of undefined in

1276
00:59:16,210 --> 00:59:19,300
this situation right now we could

1277
00:59:17,920 --> 00:59:21,340
require that refresh tokens have a

1278
00:59:19,300 --> 00:59:23,200
limited lifetime and that would either

1279
00:59:21,340 --> 00:59:25,180
either time based or based on

1280
00:59:23,200 --> 00:59:27,310
authentication session we could leave

1281
00:59:25,180 --> 00:59:30,220
that part up to people but requiring

1282
00:59:27,310 --> 00:59:32,710
that they have a limited lifetime would

1283
00:59:30,220 --> 00:59:34,270
I think helps some of the concerns

1284
00:59:32,710 --> 00:59:36,070
people have with issuing refresh tokens

1285
00:59:34,270 --> 00:59:37,390
to the browser requiring that they

1286
00:59:36,070 --> 00:59:39,010
rotate is probably good idea it's also

1287
00:59:37,390 --> 00:59:41,319
mention about security BCP I feel like

1288
00:59:39,010 --> 00:59:43,060
that's worth again calling out here and

1289
00:59:41,320 --> 00:59:47,470
saying go look at the security BCP for

1290
00:59:43,060 --> 00:59:50,290
the details if they are rotated should

1291
00:59:47,470 --> 00:59:52,600
the new one get the new lifetime again

1292
00:59:50,290 --> 00:59:55,509
or keep the same total lifetime of of

1293
00:59:52,600 --> 00:59:58,299
the initial refresh token because if

1294
00:59:55,510 --> 00:59:59,620
they extend out the the lifetime then

1295
00:59:58,300 --> 01:00:00,850
it's essentially an infinitely long

1296
00:59:59,620 --> 01:00:04,450
Refresh token which was one of the

1297
01:00:00,850 --> 01:00:06,100
concerns about browser apps or do we

1298
01:00:04,450 --> 01:00:08,439
just take out any mention of refresh

1299
01:00:06,100 --> 01:00:11,110
tokens from this document because there

1300
01:00:08,440 --> 01:00:13,540
isn't an agreement and you are just

1301
01:00:11,110 --> 01:00:17,650
gonna go and figure out figure out on

1302
01:00:13,540 --> 01:00:19,090
your own anyway so that's the list of

1303
01:00:17,650 --> 01:00:22,090
potential decisions that came up with

1304
01:00:19,090 --> 01:00:23,860
based on the discussions I don't know

1305
01:00:22,090 --> 01:00:26,980
what the right answer is I feel like not

1306
01:00:23,860 --> 01:00:31,150
mentioning it as bad I'm kind of leaning

1307
01:00:26,980 --> 01:00:33,880
towards definitely requiring rotation

1308
01:00:31,150 --> 01:00:35,830
and not like having to extend a lifetime

1309
01:00:33,880 --> 01:00:38,470
and making sure that's clear because

1310
01:00:35,830 --> 01:00:42,430
that helps eliminate some of the attacks

1311
01:00:38,470 --> 01:00:44,080
people were describing I don't want to

1312
01:00:42,430 --> 01:00:45,009
not require bearer tokens big bear

1313
01:00:44,080 --> 01:00:45,339
refresh tokens because there isn't

1314
01:00:45,010 --> 01:00:46,809
really

1315
01:00:45,339 --> 01:00:50,019
solution for that right now so it

1316
01:00:46,809 --> 01:00:54,400
doesn't feel practical I go ahead okay

1317
01:00:50,019 --> 01:00:58,749
but right last comment yeah go ahead cut

1318
01:00:54,400 --> 01:01:00,609
the mic spa's need a way to get fresh

1319
01:00:58,749 --> 01:01:03,308
access tokens or access tokens for

1320
01:01:00,609 --> 01:01:04,930
another RS with using resource

1321
01:01:03,309 --> 01:01:06,309
indicators without refreshed hook and

1322
01:01:04,930 --> 01:01:08,109
what's a reliable way to get those

1323
01:01:06,309 --> 01:01:10,299
iframes rely on third-party cookie

1324
01:01:08,109 --> 01:01:11,828
access which is in the crosshairs of

1325
01:01:10,299 --> 01:01:14,440
pretty much every browser vendor

1326
01:01:11,829 --> 01:01:18,489
nowadays constantly redirecting blows

1327
01:01:14,440 --> 01:01:21,099
you act so no so does pop up since it

1328
01:01:18,489 --> 01:01:22,569
requires in user interaction either we

1329
01:01:21,099 --> 01:01:24,670
put forth restrictions on the ass and

1330
01:01:22,569 --> 01:01:27,489
client to be able to get refresh tokens

1331
01:01:24,670 --> 01:01:30,039
eg using pop Center constrained rotating

1332
01:01:27,489 --> 01:01:32,229
on every use something else or get

1333
01:01:30,039 --> 01:01:34,390
searching for a completely new mechanism

1334
01:01:32,229 --> 01:01:37,629
oh Jesus

1335
01:01:34,390 --> 01:01:45,160
we need sorry apologies no need to proxy

1336
01:01:37,630 --> 01:01:49,869
Brian Aaron is on the same I'm glad you

1337
01:01:45,160 --> 01:01:51,910
got city okay well that was the fun

1338
01:01:49,869 --> 01:01:53,589
that's a fun discussion I guess we'll do

1339
01:01:51,910 --> 01:01:55,210
with that one is I will actually put the

1340
01:01:53,589 --> 01:01:56,369
other little proposal on make a new

1341
01:01:55,210 --> 01:01:59,559
thread on the list we can talk about

1342
01:01:56,369 --> 01:02:09,849
that again there and keep it going so

1343
01:01:59,559 --> 01:02:13,210
thank you very much hello Dan is that

1344
01:02:09,849 --> 01:02:15,729
from Liscomb I'd like to present two

1345
01:02:13,210 --> 01:02:19,239
things today the first thing is the

1346
01:02:15,729 --> 01:02:22,149
earth to zero demonstration of proof of

1347
01:02:19,239 --> 01:02:24,900
precession at the application layer or D

1348
01:02:22,150 --> 01:02:24,900
pop shot

1349
01:02:25,739 --> 01:02:31,749
what do we want to solve for the

1350
01:02:27,789 --> 01:02:34,359
solution as you might know the or

1351
01:02:31,749 --> 01:02:39,968
security PCP and we've just also seen

1352
01:02:34,359 --> 01:02:42,729
the SP a BCP makes yeah good points of

1353
01:02:39,969 --> 01:02:45,789
using similar constraint tokens but

1354
01:02:42,729 --> 01:02:47,828
currently we do not have suitable

1355
01:02:45,789 --> 01:02:50,349
mechanisms for sender constraints

1356
01:02:47,829 --> 01:02:52,029
constraint oaken's for SP ace and

1357
01:02:50,349 --> 01:02:57,160
probably also some other requirements in

1358
01:02:52,029 --> 01:02:59,320
areas we have MPLS which is good

1359
01:02:57,160 --> 01:03:04,420
you cannot really use that in browser

1360
01:02:59,320 --> 01:03:07,690
and we also token binding with the lack

1361
01:03:04,420 --> 01:03:10,960
of browser support and the future is

1362
01:03:07,690 --> 01:03:13,600
pretty unclear of that therefore in

1363
01:03:10,960 --> 01:03:18,490
Stuttgart at the last world security

1364
01:03:13,600 --> 01:03:21,730
workshop we started drafting a solution

1365
01:03:18,490 --> 01:03:23,399
on the application layer and I think

1366
01:03:21,730 --> 01:03:25,540
Brian came up also with a name for that

1367
01:03:23,400 --> 01:03:29,590
that's on the bottom right corner

1368
01:03:25,540 --> 01:03:34,660
he sought an es fan yeah that's our

1369
01:03:29,590 --> 01:03:37,480
Deepak came to be what we want to do the

1370
01:03:34,660 --> 01:03:41,350
main goal of deep pop is to prevent

1371
01:03:37,480 --> 01:03:44,290
token replay at a different endpoint

1372
01:03:41,350 --> 01:03:46,150
more precisely if an adversary is able

1373
01:03:44,290 --> 01:03:49,350
to get hold of an access token or

1374
01:03:46,150 --> 01:03:52,300
refresh token because the adversary

1375
01:03:49,350 --> 01:03:54,370
setup a counterfeit authorization server

1376
01:03:52,300 --> 01:03:57,760
or a resource server then the adversary

1377
01:03:54,370 --> 01:04:02,620
should not be able to replay that token

1378
01:03:57,760 --> 01:04:05,380
at a different endpoint authorization or

1379
01:04:02,620 --> 01:04:08,529
resource server so that's the main goal

1380
01:04:05,380 --> 01:04:11,470
of Depot as I already said we started

1381
01:04:08,530 --> 01:04:15,340
discussing discussions in March I

1382
01:04:11,470 --> 01:04:19,209
created the first draft in product

1383
01:04:15,340 --> 01:04:22,420
during the last ITF meeting and now we

1384
01:04:19,210 --> 01:04:24,850
are at version zero two and this is what

1385
01:04:22,420 --> 01:04:26,350
the current proposal looks like we have

1386
01:04:24,850 --> 01:04:28,990
the client on the left and we're in the

1387
01:04:26,350 --> 01:04:32,520
client sense the token request to das

1388
01:04:28,990 --> 01:04:34,870
then the client attaches a deeper proof

1389
01:04:32,520 --> 01:04:38,080
what that looks like we see in a moment

1390
01:04:34,870 --> 01:04:41,620
and then the client gets back if the AI

1391
01:04:38,080 --> 01:04:44,620
supports D pop a an access token that is

1392
01:04:41,620 --> 01:04:47,920
deeper bound this is signaled by the

1393
01:04:44,620 --> 01:04:50,650
token type D pop and also refresh tokens

1394
01:04:47,920 --> 01:04:56,890
for public lines at least that our two

1395
01:04:50,650 --> 01:04:59,200
bound to that deeper key n on when the

1396
01:04:56,890 --> 01:05:01,359
client wants to use an access token for

1397
01:04:59,200 --> 01:05:04,450
example then it also has attached a

1398
01:05:01,360 --> 01:05:07,300
deeper proof to that one and it's not

1399
01:05:04,450 --> 01:05:10,000
worth a that we use the same proof

1400
01:05:07,300 --> 01:05:10,200
structure the date token structures or

1401
01:05:10,000 --> 01:05:14,579
two

1402
01:05:10,200 --> 01:05:16,049
say in the token request and in the exit

1403
01:05:14,579 --> 01:05:28,920
when the access token or Refresh token

1404
01:05:16,050 --> 01:05:31,890
say used it's this okay this is what ad

1405
01:05:28,920 --> 01:05:34,109
prop proof looks like in a header you

1406
01:05:31,890 --> 01:05:38,700
can see that we have a type of epub plus

1407
01:05:34,109 --> 01:05:43,140
JWT and we have a public key and in the

1408
01:05:38,700 --> 01:05:46,848
body of the JWT we have things such as a

1409
01:05:43,140 --> 01:05:49,290
token ID we have the HTTP method of the

1410
01:05:46,849 --> 01:05:53,010
HTTP request to which the token is

1411
01:05:49,290 --> 01:05:55,290
attached we have the HTTP URI and we

1412
01:05:53,010 --> 01:05:57,770
have a timestamp and all of this is of

1413
01:05:55,290 --> 01:06:01,940
course signed with the private key that

1414
01:05:57,770 --> 01:06:06,500
belongs to the public key in the header

1415
01:06:01,940 --> 01:06:10,380
in the token request the depop token is

1416
01:06:06,500 --> 01:06:14,220
added to a new HTTP header called depop

1417
01:06:10,380 --> 01:06:15,960
and when as I already said so this is

1418
01:06:14,220 --> 01:06:18,209
additional to all the stuff that we

1419
01:06:15,960 --> 01:06:21,480
already have in the token request which

1420
01:06:18,210 --> 01:06:22,290
is completely unchanged if the a has

1421
01:06:21,480 --> 01:06:25,470
supports

1422
01:06:22,290 --> 01:06:27,529
depop then the AAS will send back the

1423
01:06:25,470 --> 01:06:31,709
access token with token type deeper

1424
01:06:27,530 --> 01:06:33,420
otherwise if it doesn't support deeper

1425
01:06:31,710 --> 01:06:35,880
then everything will go as normal and

1426
01:06:33,420 --> 01:06:40,440
the client will see that the AAS does

1427
01:06:35,880 --> 01:06:44,609
not support deeper now the resource

1428
01:06:40,440 --> 01:06:46,260
access in the resource access there is

1429
01:06:44,609 --> 01:06:48,598
an authorization header as before but

1430
01:06:46,260 --> 01:06:51,450
the token type is not Vera that is depop

1431
01:06:48,599 --> 01:06:55,020
therefore the header is depop and then

1432
01:06:51,450 --> 01:06:57,240
the access token and there's a deep

1433
01:06:55,020 --> 01:07:02,329
opera as before with the deeper proof

1434
01:06:57,240 --> 01:07:04,589
belonging to the resource axis in the

1435
01:07:02,329 --> 01:07:08,099
introspection response or if you have

1436
01:07:04,589 --> 01:07:10,950
agile UT access token there's a CNF

1437
01:07:08,099 --> 01:07:14,460
claim signaling that the access token is

1438
01:07:10,950 --> 01:07:19,348
bound to some key and in the CNF claim

1439
01:07:14,460 --> 01:07:22,349
there so Jake 80s to five six claim

1440
01:07:19,349 --> 01:07:23,670
which is the basics before URL encoding

1441
01:07:22,349 --> 01:07:26,640
of the JW key

1442
01:07:23,670 --> 01:07:30,180
2:56 thumbprint of the public key to

1443
01:07:26,640 --> 01:07:32,160
which the token is bound that is the

1444
01:07:30,180 --> 01:07:34,440
resource other can check that a deeper

1445
01:07:32,160 --> 01:07:39,390
proof was presented for that access

1446
01:07:34,440 --> 01:07:40,500
token regarding the security of PC of

1447
01:07:39,390 --> 01:07:42,750
the pop

1448
01:07:40,500 --> 01:07:46,020
we have server features that prevent

1449
01:07:42,750 --> 01:07:49,920
token replay we have the jei the token

1450
01:07:46,020 --> 01:07:55,079
ID and IIT the time stamp which together

1451
01:07:49,920 --> 01:07:57,420
can be used to to maintain a list of

1452
01:07:55,079 --> 01:08:00,119
tokens that have been seen and that

1453
01:07:57,420 --> 01:08:02,910
would in theory be still valid we also

1454
01:08:00,119 --> 01:08:06,780
have HTTP URI and HTTP method which bind

1455
01:08:02,910 --> 01:08:10,020
this token to the access or through

1456
01:08:06,780 --> 01:08:13,829
there to the request status make to

1457
01:08:10,020 --> 01:08:16,080
prevent a swapping of Depot tokens Depot

1458
01:08:13,829 --> 01:08:18,179
proofs with other JW teas that are

1459
01:08:16,080 --> 01:08:21,750
traded somewhere we also have a tad

1460
01:08:18,179 --> 01:08:23,310
claim which has the unique value that

1461
01:08:21,750 --> 01:08:25,290
must be checked

1462
01:08:23,310 --> 01:08:30,150
we don't allow the signature algorithm

1463
01:08:25,290 --> 01:08:32,160
um and regarding message integrity which

1464
01:08:30,149 --> 01:08:33,870
is not guaranteed by the prop as you can

1465
01:08:32,160 --> 01:08:35,429
see there is no signature about the

1466
01:08:33,870 --> 01:08:37,130
message buddy

1467
01:08:35,429 --> 01:08:40,489
of course you have the transport layer

1468
01:08:37,130 --> 01:08:43,969
of course use enter and TLS if possible

1469
01:08:40,488 --> 01:08:49,278
but really if you want to prevent that a

1470
01:08:43,969 --> 01:08:51,480
token resource endpoint that is

1471
01:08:49,279 --> 01:08:55,140
manipulated or that is malicious

1472
01:08:51,479 --> 01:08:59,459
uses the token at the same URI at the

1473
01:08:55,140 --> 01:09:02,069
honest endpoint then you can or with

1474
01:08:59,460 --> 01:09:04,170
changing the request body then you can

1475
01:09:02,069 --> 01:09:06,449
also bring your own data and sign it in

1476
01:09:04,170 --> 01:09:08,100
the Deepak token so it's extendable if

1477
01:09:06,448 --> 01:09:10,169
you really want to do that but it's

1478
01:09:08,100 --> 01:09:14,520
definitely out of the scope of this

1479
01:09:10,170 --> 01:09:19,339
specification M TLS is a more rather

1480
01:09:14,520 --> 01:09:23,040
robust mechanism if possible use M TLS

1481
01:09:19,339 --> 01:09:28,350
but as I already said in some situations

1482
01:09:23,040 --> 01:09:33,988
is it's just not possible okay

1483
01:09:28,350 --> 01:09:35,000
Honus yeah speaking as as myself here we

1484
01:09:33,988 --> 01:09:36,769
have it

1485
01:09:35,000 --> 01:09:38,210
team working group items that pretty

1486
01:09:36,770 --> 01:09:41,600
much do the same stuff they don't have

1487
01:09:38,210 --> 01:09:45,589
this shiny named of um and I was

1488
01:09:41,600 --> 01:09:48,140
wondering on whether you had sort of

1489
01:09:45,589 --> 01:09:49,700
like considered that work because one

1490
01:09:48,140 --> 01:09:52,370
part of the work is is actually split

1491
01:09:49,700 --> 01:09:54,108
into documents one part is the key

1492
01:09:52,370 --> 01:09:55,940
transport which we talked about last

1493
01:09:54,109 --> 01:09:59,570
time where it was made his comment about

1494
01:09:55,940 --> 01:10:02,299
do we need to add a proof there and

1495
01:09:59,570 --> 01:10:04,429
which was followed up with this formal

1496
01:10:02,300 --> 01:10:07,280
analysis and then we have the second

1497
01:10:04,430 --> 01:10:10,220
piece of work which Justin was asked or

1498
01:10:07,280 --> 01:10:13,730
is be heading the assigning which of

1499
01:10:10,220 --> 01:10:15,200
course has the very same does mean a

1500
01:10:13,730 --> 01:10:18,190
more or less the same stuff in a you

1501
01:10:15,200 --> 01:10:22,030
know in we have different incarnation

1502
01:10:18,190 --> 01:10:25,509
incarnations because there were issues

1503
01:10:22,030 --> 01:10:29,059
challenges I think that's yet to say

1504
01:10:25,510 --> 01:10:31,280
request signing had always had some

1505
01:10:29,060 --> 01:10:34,730
challenges in this group so I'm curious

1506
01:10:31,280 --> 01:10:38,090
on why what motivated you to come up

1507
01:10:34,730 --> 01:10:39,830
with a completely new mechanism instead

1508
01:10:38,090 --> 01:10:43,910
of just reusing what you already hadn't

1509
01:10:39,830 --> 01:10:46,280
had to sort of get that finalized so I

1510
01:10:43,910 --> 01:10:47,900
think others here my chimed in on that

1511
01:10:46,280 --> 01:10:51,440
because they're more familiar with the

1512
01:10:47,900 --> 01:10:55,610
other drafts I can say that depop is a

1513
01:10:51,440 --> 01:10:59,960
very simple very concise mechanism that

1514
01:10:55,610 --> 01:11:03,980
is we also have already some working

1515
01:10:59,960 --> 01:11:06,080
implementations of that because it

1516
01:11:03,980 --> 01:11:08,299
doesn't actually it actually does less

1517
01:11:06,080 --> 01:11:12,019
like from a functionality point of view

1518
01:11:08,300 --> 01:11:14,090
and what we previously did with the ACE

1519
01:11:12,020 --> 01:11:16,040
working group we tried to as you

1520
01:11:14,090 --> 01:11:18,440
remember we tried to balance this work

1521
01:11:16,040 --> 01:11:20,240
with ace and RTC web because they needed

1522
01:11:18,440 --> 01:11:25,129
the approved possession mechanism and

1523
01:11:20,240 --> 01:11:27,500
they also encoded the fields in co-op

1524
01:11:25,130 --> 01:11:29,450
and we had the corresponding but in HTTP

1525
01:11:27,500 --> 01:11:32,090
because we said that we would do the

1526
01:11:29,450 --> 01:11:34,400
HTTP stuff here the core there is

1527
01:11:32,090 --> 01:11:36,920
working group does the court stuff there

1528
01:11:34,400 --> 01:11:38,509
so there was kind of a understanding and

1529
01:11:36,920 --> 01:11:41,000
so now we I'm feeling we're doing the

1530
01:11:38,510 --> 01:11:44,300
same thing twice even like you had in

1531
01:11:41,000 --> 01:11:47,170
earlier slides you have this you call it

1532
01:11:44,300 --> 01:11:50,050
a deep op pro possession

1533
01:11:47,170 --> 01:11:53,190
I forgot what the name was in the other

1534
01:11:50,050 --> 01:12:02,550
case because it was also finding the key

1535
01:11:53,190 --> 01:12:09,519
to the token so yep well maybe correct

1536
01:12:02,550 --> 01:12:11,680
okay so not so camera alright so oh you

1537
01:12:09,520 --> 01:12:15,130
know kind of wondering the the

1538
01:12:11,680 --> 01:12:22,060
graduation ship of this draft to the key

1539
01:12:15,130 --> 01:12:25,690
distribution draft which is and and then

1540
01:12:22,060 --> 01:12:29,680
also there's a draft that I wrote a

1541
01:12:25,690 --> 01:12:32,440
while ago which is called j-pop of which

1542
01:12:29,680 --> 01:12:36,420
a part of the spec was actually taken

1543
01:12:32,440 --> 01:12:39,820
out to become an TLS but this one is

1544
01:12:36,420 --> 01:12:42,340
looks like trying to do more that's the

1545
01:12:39,820 --> 01:12:44,469
same thing except that this can only be

1546
01:12:42,340 --> 01:12:47,140
used for code for Wow in that case

1547
01:12:44,470 --> 01:12:50,470
because we arrived Jpop is wrong on key

1548
01:12:47,140 --> 01:12:59,980
description we can actually be useful it

1549
01:12:50,470 --> 01:13:02,320
was the first oh yeah Brian try to put

1550
01:12:59,980 --> 01:13:06,070
some color on on the origins and some

1551
01:13:02,320 --> 01:13:09,130
new history here to it but these not

1552
01:13:06,070 --> 01:13:13,570
address but talk to honest questions a

1553
01:13:09,130 --> 01:13:15,640
default came out of I think a desire and

1554
01:13:13,570 --> 01:13:20,620
a real need from developers using this

1555
01:13:15,640 --> 01:13:24,580
stuff for a simplified concise mechanism

1556
01:13:20,620 --> 01:13:26,140
to do public key proof of possession for

1557
01:13:24,580 --> 01:13:28,660
an access token both at the

1558
01:13:26,140 --> 01:13:30,970
authorization server and the resource

1559
01:13:28,660 --> 01:13:32,950
server and while it bears a lot of

1560
01:13:30,970 --> 01:13:37,720
similarity to some other things that are

1561
01:13:32,950 --> 01:13:40,599
in progress it it it does I think it

1562
01:13:37,720 --> 01:13:46,780
does more with less its it delivers that

1563
01:13:40,600 --> 01:13:48,610
public key proof and for both the the

1564
01:13:46,780 --> 01:13:51,070
delivery and binding the access tokens

1565
01:13:48,610 --> 01:13:52,839
with the authorization server as well as

1566
01:13:51,070 --> 01:13:55,150
using them at the resource server so

1567
01:13:52,840 --> 01:13:57,190
it's it has a lot of conceptual

1568
01:13:55,150 --> 01:13:59,290
similarities but I think it's it's

1569
01:13:57,190 --> 01:14:00,928
significantly simpler has a more

1570
01:13:59,290 --> 01:14:04,469
straightforward model and is

1571
01:14:00,929 --> 01:14:07,949
much more concise me I asked you on

1572
01:14:04,469 --> 01:14:09,810
explaining me where it is simpler for

1573
01:14:07,949 --> 01:14:11,040
the two interfaces for the interface

1574
01:14:09,810 --> 01:14:14,159
from the client or authorization

1575
01:14:11,040 --> 01:14:23,640
Southwest more simplicity in their

1576
01:14:14,159 --> 01:14:25,139
tedious in its both in the well in in my

1577
01:14:23,640 --> 01:14:27,030
view it's simpler in the key

1578
01:14:25,140 --> 01:14:29,159
distribution because there's there's not

1579
01:14:27,030 --> 01:14:31,500
the overhead of the potential of

1580
01:14:29,159 --> 01:14:34,250
symmetric keys the key distribution

1581
01:14:31,500 --> 01:14:36,330
itself works the same way for both

1582
01:14:34,250 --> 01:14:39,330
presentation that are us and they ask

1583
01:14:36,330 --> 01:14:40,949
it's it's the authors it's the client

1584
01:14:39,330 --> 01:14:42,840
saying here's my key

1585
01:14:40,949 --> 01:14:45,269
here's proof of it this is what I want

1586
01:14:42,840 --> 01:14:46,290
to use and it's I imagine it's super

1587
01:14:45,270 --> 01:14:48,300
simple for more information

1588
01:14:46,290 --> 01:14:50,550
implementation is quite a symmetric keys

1589
01:14:48,300 --> 01:14:52,770
because because we worked with these

1590
01:14:50,550 --> 01:14:54,300
other groups that asked for symmetric

1591
01:14:52,770 --> 01:14:56,850
keys and they have isometric Easterday

1592
01:14:54,300 --> 01:14:58,230
that's why it's in there because because

1593
01:14:56,850 --> 01:15:00,030
we had to align with these other groups

1594
01:14:58,230 --> 01:15:01,830
so I think you're giving that sort of a

1595
01:15:00,030 --> 01:15:03,150
natural tension here that that you're

1596
01:15:01,830 --> 01:15:04,710
working with those other groups and

1597
01:15:03,150 --> 01:15:09,750
they've taken on a lot of time just me

1598
01:15:04,710 --> 01:15:12,989
it's like but despite the there's work

1599
01:15:09,750 --> 01:15:14,520
here that's bits aimed at deployment and

1600
01:15:12,989 --> 01:15:16,230
use in the wild and I know there's other

1601
01:15:14,520 --> 01:15:19,280
groups that's building on top of all off

1602
01:15:16,230 --> 01:15:23,099
but this is specifically geared at

1603
01:15:19,280 --> 01:15:25,409
deployment and usage and the possession

1604
01:15:23,100 --> 01:15:29,010
distribution stuff has taken on a role

1605
01:15:25,409 --> 01:15:30,989
of being an underpinning for additional

1606
01:15:29,010 --> 01:15:36,170
work within aids I guess I guess other

1607
01:15:30,989 --> 01:15:39,080
working on how to wear on RTC web so I

1608
01:15:36,170 --> 01:15:41,310
there's some tension there but this was

1609
01:15:39,080 --> 01:15:44,940
maybe an end-around from that work

1610
01:15:41,310 --> 01:15:47,989
because it has a more explicit and

1611
01:15:44,940 --> 01:15:49,650
straightforward goal including not

1612
01:15:47,989 --> 01:15:51,299
symmetric keys because there's no

1613
01:15:49,650 --> 01:15:52,530
mechanism for proof of symmetric keys

1614
01:15:51,300 --> 01:15:54,420
and trying to account for that

1615
01:15:52,530 --> 01:15:56,489
significantly complicates things as

1616
01:15:54,420 --> 01:16:00,290
you're probably we're trying to have

1617
01:15:56,489 --> 01:16:00,290
written it in in the document

1618
01:16:03,610 --> 01:16:12,610
I mean I frankly I've wondered at times

1619
01:16:11,000 --> 01:16:19,580
whether the the pop t-distribution

1620
01:16:12,610 --> 01:16:21,230
document shouldn't actually we had that

1621
01:16:19,580 --> 01:16:23,000
discussion and this group decided that

1622
01:16:21,230 --> 01:16:43,429
it wants it has to be here because it's

1623
01:16:23,000 --> 01:16:46,520
the HTTP but so on that topic of

1624
01:16:43,430 --> 01:16:48,170
symmetric I will say I was going to

1625
01:16:46,520 --> 01:16:51,620
actually ask the question of why the

1626
01:16:48,170 --> 01:16:56,890
specs specifically limits this to ace

1627
01:16:51,620 --> 01:17:00,670
use of asymmetric signature algorithms

1628
01:16:56,890 --> 01:17:03,590
we found that there are use cases where

1629
01:17:00,670 --> 01:17:06,680
asymmetric signatures are still just too

1630
01:17:03,590 --> 01:17:09,200
slow the idea was to make this as simple

1631
01:17:06,680 --> 01:17:13,210
as possible okay so I guess a question

1632
01:17:09,200 --> 01:17:16,090
none for the working group is is there a

1633
01:17:13,210 --> 01:17:21,100
significant enough win in terms of

1634
01:17:16,090 --> 01:17:24,320
simplification to warrant having a

1635
01:17:21,100 --> 01:17:28,240
mechanism for proof of possession that

1636
01:17:24,320 --> 01:17:33,309
is specific to asymmetric signatures or

1637
01:17:28,240 --> 01:17:36,880
does the proliferation of pop methods

1638
01:17:33,310 --> 01:17:41,240
outweigh the that that simplicity gain

1639
01:17:36,880 --> 01:17:43,910
the other comment I have on this is the

1640
01:17:41,240 --> 01:17:47,630
draft mentions being able to bring your

1641
01:17:43,910 --> 01:17:49,880
own data piece but it doesn't really get

1642
01:17:47,630 --> 01:17:54,260
into exactly how that would fit into it

1643
01:17:49,880 --> 01:17:57,290
the the the job it doesn't provide any

1644
01:17:54,260 --> 01:18:01,100
likes like III would expect to see at

1645
01:17:57,290 --> 01:18:02,930
least some claims defined for the

1646
01:18:01,100 --> 01:18:06,440
typical things somebody is going to want

1647
01:18:02,930 --> 01:18:08,770
to sign like a request body or headers

1648
01:18:06,440 --> 01:18:08,769
or

1649
01:18:10,730 --> 01:18:17,428
yeah yeah so maybe we can draw from out

1650
01:18:14,670 --> 01:18:22,920
get to some of why that is important in

1651
01:18:17,429 --> 01:18:25,349
my talk yeah okay good so the origin of

1652
01:18:22,920 --> 01:18:27,449
this came to security I'm gonna cut the

1653
01:18:25,349 --> 01:18:29,940
line sorry I'm gonna cut the line no

1654
01:18:27,449 --> 01:18:32,610
John Bradley yubico so the origin of

1655
01:18:29,940 --> 01:18:34,619
this came from the security workshop

1656
01:18:32,610 --> 01:18:37,589
where we're specifically focusing on

1657
01:18:34,619 --> 01:18:39,780
what could we do for single page

1658
01:18:37,590 --> 01:18:43,050
applications to do proof of possession

1659
01:18:39,780 --> 01:18:50,730
should token binding not come to

1660
01:18:43,050 --> 01:18:54,300
fruition so we set out we said okay we

1661
01:18:50,730 --> 01:18:56,549
could use web crypto and create an onyx

1662
01:18:54,300 --> 01:18:59,789
portable key in the browser and these

1663
01:18:56,550 --> 01:19:01,730
would be the mechanisms they that we

1664
01:18:59,789 --> 01:19:04,079
could do it so that's why is there no

1665
01:19:01,730 --> 01:19:06,509
symmetric keys because there is no way

1666
01:19:04,079 --> 01:19:08,159
of protecting a symmetric key in the

1667
01:19:06,510 --> 01:19:11,969
browser and being able to do proof of

1668
01:19:08,159 --> 01:19:14,039
possession so this describes how we can

1669
01:19:11,969 --> 01:19:17,369
address that particular use case if the

1670
01:19:14,039 --> 01:19:19,710
working this lays out a way to do it if

1671
01:19:17,369 --> 01:19:23,130
the working group wants us to refactor

1672
01:19:19,710 --> 01:19:28,760
yes we did take the ideas of Justin's

1673
01:19:23,130 --> 01:19:30,980
draft which is not currently active and

1674
01:19:28,760 --> 01:19:38,179
but I believe it's expired

1675
01:19:30,980 --> 01:19:41,848
so so okay so it's expired for reasons

1676
01:19:38,179 --> 01:19:45,449
so it is entirely possible to profile

1677
01:19:41,849 --> 01:19:47,610
should we reconstitute that document we

1678
01:19:45,449 --> 01:19:49,110
could profile that document this is what

1679
01:19:47,610 --> 01:19:53,989
we specified is a subset of that

1680
01:19:49,110 --> 01:19:57,329
document and arguably the way that we're

1681
01:19:53,989 --> 01:20:01,440
publishing the key to the authorization

1682
01:19:57,329 --> 01:20:03,780
server at the at the endpoint is a

1683
01:20:01,440 --> 01:20:06,178
subset of key distribution but we're not

1684
01:20:03,780 --> 01:20:09,349
distributing a key we're using a very

1685
01:20:06,179 --> 01:20:11,820
small set of that so could we do this as

1686
01:20:09,349 --> 01:20:16,219
profiles of those documents should those

1687
01:20:11,820 --> 01:20:20,308
documents actually be active sure but

1688
01:20:16,219 --> 01:20:22,590
this is essentially our core use case

1689
01:20:20,309 --> 01:20:23,340
document if you want us to refactor it

1690
01:20:22,590 --> 01:20:26,190
to

1691
01:20:23,340 --> 01:20:28,860
use other specs okay but those other

1692
01:20:26,190 --> 01:20:31,348
specs have to actually exist didn't be

1693
01:20:28,860 --> 01:20:33,420
making progress but this is a concrete

1694
01:20:31,349 --> 01:20:39,150
use case of people something that people

1695
01:20:33,420 --> 01:20:41,820
actually want to do to bind tokens as we

1696
01:20:39,150 --> 01:20:43,469
talked about in Aaron's presentation

1697
01:20:41,820 --> 01:20:45,360
there is no way

1698
01:20:43,469 --> 01:20:46,949
currently for you to actually do group

1699
01:20:45,360 --> 01:20:49,080
uh possession of the Refresh token in

1700
01:20:46,949 --> 01:20:51,089
the browser should somebody use this

1701
01:20:49,080 --> 01:20:52,769
mechanism they can't actually protect

1702
01:20:51,090 --> 01:20:55,800
the Refresh token in the browser

1703
01:20:52,770 --> 01:20:58,800
so this is a real use case there is I

1704
01:20:55,800 --> 01:21:01,560
think we need to actually address the

1705
01:20:58,800 --> 01:21:05,040
use case if we want to address it in the

1706
01:21:01,560 --> 01:21:07,679
very narrow sense and yes we took out

1707
01:21:05,040 --> 01:21:09,210
all of the other stuff that addresses a

1708
01:21:07,679 --> 01:21:10,590
bunch of other use cases so that we

1709
01:21:09,210 --> 01:21:12,449
could actually focus on what's the

1710
01:21:10,590 --> 01:21:15,210
minimum that we need to do this we want

1711
01:21:12,449 --> 01:21:17,009
to refactor this to point to the other

1712
01:21:15,210 --> 01:21:18,330
specs I'm perfectly okay with doing that

1713
01:21:17,010 --> 01:21:21,060
we're not saying that the other specs

1714
01:21:18,330 --> 01:21:24,360
don't have value but we needed to focus

1715
01:21:21,060 --> 01:21:26,909
in on what is this use case how can we

1716
01:21:24,360 --> 01:21:32,299
we solve it exactly how we format the

1717
01:21:26,909 --> 01:21:32,299
spec I'm completely okay II plus one

1718
01:21:32,900 --> 01:21:39,179
Mike Jones Microsoft I'm actually

1719
01:21:35,489 --> 01:21:42,320
representing right now our engineering

1720
01:21:39,179 --> 01:21:45,300
teams who did a detailed analysis of

1721
01:21:42,320 --> 01:21:47,759
whether and how they would use the spec

1722
01:21:45,300 --> 01:21:51,690
and there were three sets of comments

1723
01:21:47,760 --> 01:21:57,389
they had one was they want to use

1724
01:21:51,690 --> 01:22:01,348
different pop keys for access tokens and

1725
01:21:57,389 --> 01:22:03,540
refresh tokens it's my belief doing a

1726
01:22:01,349 --> 01:22:07,349
cursory analysis that they could just

1727
01:22:03,540 --> 01:22:11,519
use different keys in the request and

1728
01:22:07,349 --> 01:22:14,520
have that work and the keys are not just

1729
01:22:11,520 --> 01:22:17,880
maintained as state between different

1730
01:22:14,520 --> 01:22:21,599
requests off the top of your head am i

1731
01:22:17,880 --> 01:22:24,000
right yep I think some could be okay

1732
01:22:21,599 --> 01:22:31,880
think about that but I think I was right

1733
01:22:24,000 --> 01:22:36,050
when I told them that second they were a

1734
01:22:31,880 --> 01:22:39,170
little bit surprised by the tokens

1735
01:22:36,050 --> 01:22:42,790
issued being bearer tokens and then

1736
01:22:39,170 --> 01:22:48,260
there's secondly being a perv

1737
01:22:42,790 --> 01:22:50,719
that's distinct from the token which

1738
01:22:48,260 --> 01:22:54,829
it's up to the recipient to check the

1739
01:22:50,719 --> 01:23:00,409
proof using information in the bearer

1740
01:22:54,829 --> 01:23:03,019
token that it actually is attested to

1741
01:23:00,409 --> 01:23:06,829
you now I understand the reasons for

1742
01:23:03,020 --> 01:23:08,960
that that all of that you could by

1743
01:23:06,829 --> 01:23:14,199
adding this proof header continue

1744
01:23:08,960 --> 01:23:19,449
sending the access tokens using 6750

1745
01:23:14,199 --> 01:23:24,169
using authorization bearer token and

1746
01:23:19,449 --> 01:23:26,299
resources that don't understand that

1747
01:23:24,170 --> 01:23:29,000
there's also prevents nothing that's not

1748
01:23:26,300 --> 01:23:31,940
how it's currently in the traffic so

1749
01:23:29,000 --> 01:23:35,090
currently we're using the yeah so we're

1750
01:23:31,940 --> 01:23:36,860
using the okay educate the D pop this is

1751
01:23:35,090 --> 01:23:39,290
the this is how we do resource access

1752
01:23:36,860 --> 01:23:42,409
currently and as you can see it's not a

1753
01:23:39,290 --> 01:23:44,030
better talker because it's not so it

1754
01:23:42,409 --> 01:23:46,790
says D pop and then you provide the

1755
01:23:44,030 --> 01:23:49,909
header okay they would actually be happy

1756
01:23:46,790 --> 01:23:52,400
with that because they don't want to

1757
01:23:49,909 --> 01:23:55,699
just add information to that existing

1758
01:23:52,400 --> 01:23:58,420
there because some resources would break

1759
01:23:55,699 --> 01:24:01,159
even though they're not supposed to yeah

1760
01:23:58,420 --> 01:24:03,290
thank you I will report that back to

1761
01:24:01,159 --> 01:24:05,980
them there and the third thing which I

1762
01:24:03,290 --> 01:24:08,389
failed an issue on several months ago is

1763
01:24:05,980 --> 01:24:11,119
despite some of the sentiments in the

1764
01:24:08,389 --> 01:24:13,369
working group for years we're going to

1765
01:24:11,119 --> 01:24:17,269
continue using the implicit flow and

1766
01:24:13,369 --> 01:24:20,360
that's not up for negotiation so they

1767
01:24:17,270 --> 01:24:22,940
want a description of how to use deep up

1768
01:24:20,360 --> 01:24:24,170
with the implicit flow if they're going

1769
01:24:22,940 --> 01:24:26,989
to use it at all

1770
01:24:24,170 --> 01:24:30,440
so that could either happen in this

1771
01:24:26,989 --> 01:24:33,409
draft or I could create a separate draft

1772
01:24:30,440 --> 01:24:35,150
but if we're going to use d pop but

1773
01:24:33,409 --> 01:24:39,170
Microsoft there must be an implicit

1774
01:24:35,150 --> 01:24:41,690
binding so I think this is something we

1775
01:24:39,170 --> 01:24:43,579
should talk about after way if they're

1776
01:24:41,690 --> 01:24:46,040
working group decides to adopt this item

1777
01:24:43,579 --> 01:24:48,530
to to discuss

1778
01:24:46,040 --> 01:24:51,140
what the working group thinks about this

1779
01:24:48,530 --> 01:24:54,860
that's fine but I'd also like to talk to

1780
01:24:51,140 --> 01:24:56,840
you and some of the authors about what

1781
01:24:54,860 --> 01:24:58,910
technically you think that binding

1782
01:24:56,840 --> 01:25:01,400
should look like and I want to get it

1783
01:24:58,910 --> 01:25:05,030
written down and it's a working of

1784
01:25:01,400 --> 01:25:07,969
decision whether to adopt that piece of

1785
01:25:05,030 --> 01:25:11,030
it or not but I have a mandate from my

1786
01:25:07,970 --> 01:25:13,640
employer to create it either in this

1787
01:25:11,030 --> 01:25:17,330
draft or as a separate draft if we're

1788
01:25:13,640 --> 01:25:20,650
ever going to use any of this yeah and I

1789
01:25:17,330 --> 01:25:20,650
just wanted to put that on the record

1790
01:25:21,160 --> 01:25:27,650
okay Brian off mic said he would be

1791
01:25:25,700 --> 01:25:31,870
happy to see it in a separate draft and

1792
01:25:27,650 --> 01:25:31,870
would work on it with me Thank You

1793
01:25:32,860 --> 01:25:36,650
Justin Richard to that last point I

1794
01:25:34,910 --> 01:25:40,870
would be unhappy to see it in the same

1795
01:25:36,650 --> 01:25:43,280
draft so plus one to Brian's point so

1796
01:25:40,870 --> 01:25:44,480
all right since my name was tossed

1797
01:25:43,280 --> 01:25:48,410
around a bunch I figure I should get in

1798
01:25:44,480 --> 01:25:51,019
the mic line having tried to spec out

1799
01:25:48,410 --> 01:25:52,730
HTTP signing and implemented a number of

1800
01:25:51,020 --> 01:25:54,460
different signature methods I think one

1801
01:25:52,730 --> 01:25:59,320
of which we're gonna hear about later

1802
01:25:54,460 --> 01:26:01,010
it's really hard it's really really

1803
01:25:59,320 --> 01:26:04,009
surprisingly hard

1804
01:26:01,010 --> 01:26:07,100
I'm with Annabel that there should be a

1805
01:26:04,010 --> 01:26:09,410
few additional fields but I mean that's

1806
01:26:07,100 --> 01:26:11,090
it you have a structure we can add that

1807
01:26:09,410 --> 01:26:13,489
we can specify that that's great

1808
01:26:11,090 --> 01:26:16,580
signing headers and signing body very

1809
01:26:13,489 --> 01:26:22,280
important in other types of requests

1810
01:26:16,580 --> 01:26:27,410
yeah yeah totally I really like this

1811
01:26:22,280 --> 01:26:30,469
approach I agree with pennis in

1812
01:26:27,410 --> 01:26:33,710
principle that having a server provided

1813
01:26:30,470 --> 01:26:35,720
key to enable symmetrical keys and stuff

1814
01:26:33,710 --> 01:26:37,910
like that helps a lot of different use

1815
01:26:35,720 --> 01:26:40,400
cases embedded use cases especially

1816
01:26:37,910 --> 01:26:43,910
because of key generation costs but

1817
01:26:40,400 --> 01:26:46,219
other use cases potentially as well and

1818
01:26:43,910 --> 01:26:49,460
even having the server generate a an

1819
01:26:46,220 --> 01:26:54,140
asymmetrical key pair makes sense I know

1820
01:26:49,460 --> 01:26:55,670
but it makes them deep hug does not have

1821
01:26:54,140 --> 01:26:58,670
that functionality I know how does can I

1822
01:26:55,670 --> 01:26:59,570
finish my sentence none of the documents

1823
01:26:58,670 --> 01:27:02,650
has

1824
01:26:59,570 --> 01:27:05,449
the capability to service I generate

1825
01:27:02,650 --> 01:27:07,369
asymmetric keeping I thought that pop

1826
01:27:05,449 --> 01:27:08,808
distribution allowed that okay well

1827
01:27:07,369 --> 01:27:09,339
that's a gap in pop distribution in that

1828
01:27:08,809 --> 01:27:15,579
style

1829
01:27:09,340 --> 01:27:17,809
so anyway ultimately if this is

1830
01:27:15,579 --> 01:27:21,920
cryptographically agile enough I think

1831
01:27:17,809 --> 01:27:23,840
those are details that will fall out the

1832
01:27:21,920 --> 01:27:25,340
mode of the client presenting and

1833
01:27:23,840 --> 01:27:27,619
proving possession of that's an

1834
01:27:25,340 --> 01:27:30,050
important part proving possession of the

1835
01:27:27,619 --> 01:27:33,139
key that it is saying I'm going to use

1836
01:27:30,050 --> 01:27:34,820
is a really really important pattern and

1837
01:27:33,139 --> 01:27:37,940
that actually solves the security use

1838
01:27:34,820 --> 01:27:40,130
cases for the majority of ways that we

1839
01:27:37,940 --> 01:27:42,138
want this thing to get used because if

1840
01:27:40,130 --> 01:27:44,059
the server provides a key the client

1841
01:27:42,139 --> 01:27:49,489
hasn't proved yet that it can actually

1842
01:27:44,059 --> 01:27:51,019
use that key to do anything so I like

1843
01:27:49,489 --> 01:27:53,959
this pattern so much that I also

1844
01:27:51,019 --> 01:27:56,989
invented it because this is how

1845
01:27:53,960 --> 01:28:01,219
currently key proofing in possession

1846
01:27:56,989 --> 01:28:04,489
works inside of X Y Z so it's the same

1847
01:28:01,219 --> 01:28:06,530
kinds of structures and yes before

1848
01:28:04,489 --> 01:28:11,718
Hannes asked I was aware of my other

1849
01:28:06,530 --> 01:28:14,630
draft for HTTP signing so and I

1850
01:28:11,719 --> 01:28:18,050
purposefully didn't use it for this

1851
01:28:14,630 --> 01:28:21,619
because that is a really complicated

1852
01:28:18,050 --> 01:28:23,719
thing and there really has not been

1853
01:28:21,619 --> 01:28:26,480
enough energy in the working group to

1854
01:28:23,719 --> 01:28:28,909
move that forward possibly because we

1855
01:28:26,480 --> 01:28:30,379
have cabbage signatures we have a bunch

1856
01:28:28,909 --> 01:28:33,098
of other things that have been making

1857
01:28:30,380 --> 01:28:36,349
progress that people could use instead

1858
01:28:33,099 --> 01:28:38,989
ultimately I don't care where that draft

1859
01:28:36,349 --> 01:28:42,260
lives if we were to take all of the

1860
01:28:38,989 --> 01:28:44,449
proofing stuff in here and paste it into

1861
01:28:42,260 --> 01:28:47,480
the HTTP signatures draft and call that

1862
01:28:44,449 --> 01:28:51,440
the new version fine you know like

1863
01:28:47,480 --> 01:28:53,750
whatever if and I think that we might be

1864
01:28:51,440 --> 01:28:55,820
able to do that if we extend a couple of

1865
01:28:53,750 --> 01:28:59,960
fields with some normalization rules you

1866
01:28:55,820 --> 01:29:03,469
know that's all doable so yeah at the

1867
01:28:59,960 --> 01:29:05,480
end of the day message signing and four

1868
01:29:03,469 --> 01:29:07,639
key possession is something that we need

1869
01:29:05,480 --> 01:29:11,360
something that we have needed for many

1870
01:29:07,639 --> 01:29:13,220
years but we haven't solved yet because

1871
01:29:11,360 --> 01:29:16,099
it is really really really hard and we

1872
01:29:13,220 --> 01:29:20,590
getting stuck on little bits and details

1873
01:29:16,100 --> 01:29:20,590
instead of just trying to do something

1874
01:29:22,750 --> 01:29:27,260
howdy roomie didn't you is the

1875
01:29:24,770 --> 01:29:30,020
responsibility taking new technical

1876
01:29:27,260 --> 01:29:31,280
position on what we just kind of talked

1877
01:29:30,020 --> 01:29:33,890
about here that's for the working group

1878
01:29:31,280 --> 01:29:35,750
to talk about what I would strongly urge

1879
01:29:33,890 --> 01:29:37,310
before we talk about we're group

1880
01:29:35,750 --> 01:29:39,440
adoption we make sure that we better

1881
01:29:37,310 --> 01:29:41,180
understand the equities of perhaps other

1882
01:29:39,440 --> 01:29:43,250
working groups put them on the table I

1883
01:29:41,180 --> 01:29:44,960
actually don't know all those equities

1884
01:29:43,250 --> 01:29:48,110
are we sure check and make sure we

1885
01:29:44,960 --> 01:29:50,690
surface them as we reason about what to

1886
01:29:48,110 --> 01:29:52,610
do here and ditto I heard that again

1887
01:29:50,690 --> 01:29:54,559
this is kind of my first real meeting

1888
01:29:52,610 --> 01:29:55,910
with this working group you know as we

1889
01:29:54,560 --> 01:29:57,320
talked about past decisions the fact

1890
01:29:55,910 --> 01:29:58,880
that we don't remember what we decided

1891
01:29:57,320 --> 01:30:00,200
and that's kind of coming with your same

1892
01:29:58,880 --> 01:30:02,180
vacuity and that let's just kind of

1893
01:30:00,200 --> 01:30:03,590
surface that as we figure out what you

1894
01:30:02,180 --> 01:30:06,170
know with the scope of it and boxes of

1895
01:30:03,590 --> 01:30:07,700
some of these drafts and so what let's

1896
01:30:06,170 --> 01:30:11,120
again surface what the equities might be

1897
01:30:07,700 --> 01:30:14,570
in the other words - okay thank you

1898
01:30:11,120 --> 01:30:16,700
yeah that's good - Mary so I wouldn't

1899
01:30:14,570 --> 01:30:18,019
I'm gonna be able to adopt this document

1900
01:30:16,700 --> 01:30:23,900
at this time so over here take it

1901
01:30:18,020 --> 01:30:27,050
offline okay just go ahead okay yes okay

1902
01:30:23,900 --> 01:30:39,259
my next presentation is about this it's

1903
01:30:27,050 --> 01:30:41,930
not right no it's not yeah that works

1904
01:30:39,260 --> 01:30:45,800
okay my next presentation is about push

1905
01:30:41,930 --> 01:30:47,570
request objects and the aim here is to

1906
01:30:45,800 --> 01:30:50,480
find out whether there's interested in

1907
01:30:47,570 --> 01:30:54,679
this working group to go forward with

1908
01:30:50,480 --> 01:30:57,679
developing something in the IGF what

1909
01:30:54,680 --> 01:31:02,210
approach to request objects you might

1910
01:30:57,680 --> 01:31:04,940
know that there's the JA draft that

1911
01:31:02,210 --> 01:31:09,830
moves request object management to the a

1912
01:31:04,940 --> 01:31:13,250
s so this is an extension that would

1913
01:31:09,830 --> 01:31:18,080
move the request object management to

1914
01:31:13,250 --> 01:31:23,420
the a s as I already said this was

1915
01:31:18,080 --> 01:31:26,000
developed in the open IDF RP area based

1916
01:31:23,420 --> 01:31:27,050
on experience gathered in open banking /

1917
01:31:26,000 --> 01:31:32,510
BST -

1918
01:31:27,050 --> 01:31:35,690
context what is the rationale here as

1919
01:31:32,510 --> 01:31:38,720
you might know in JA we have a mechanism

1920
01:31:35,690 --> 01:31:41,509
that ensures the integrity authenticity

1921
01:31:38,720 --> 01:31:46,370
confidentiality of the authorization

1922
01:31:41,510 --> 01:31:50,960
request by essentially signing all that

1923
01:31:46,370 --> 01:31:54,860
stuff or whatever and the problem is if

1924
01:31:50,960 --> 01:31:59,330
you put the signed draught for example

1925
01:31:54,860 --> 01:32:01,309
in a you know authorization request by

1926
01:31:59,330 --> 01:32:04,820
value you would put it in a request

1927
01:32:01,310 --> 01:32:07,250
parameter you end up with very lengthy

1928
01:32:04,820 --> 01:32:09,440
URLs there might be a lot of scopes in

1929
01:32:07,250 --> 01:32:13,790
them for example and the job itself is

1930
01:32:09,440 --> 01:32:18,230
very long if your effort so there's a

1931
01:32:13,790 --> 01:32:21,290
method to to transport it by reference

1932
01:32:18,230 --> 01:32:26,959
called the request your eye where you

1933
01:32:21,290 --> 01:32:29,330
put the shot somewhere on some URI and

1934
01:32:26,960 --> 01:32:30,770
then in the authorization request you

1935
01:32:29,330 --> 01:32:32,900
have the parameter called

1936
01:32:30,770 --> 01:32:35,540
request your eye that refers to that

1937
01:32:32,900 --> 01:32:39,379
your eye so the a s goes to that your

1938
01:32:35,540 --> 01:32:43,550
eye and takes the job from there problem

1939
01:32:39,380 --> 01:32:46,640
with that is the client if it puts it on

1940
01:32:43,550 --> 01:32:49,400
its own server needs to handle inbound

1941
01:32:46,640 --> 01:32:53,210
requests from the a s which is a new

1942
01:32:49,400 --> 01:32:56,089
thing the client needs to store a

1943
01:32:53,210 --> 01:32:59,210
potential large number of objects and

1944
01:32:56,090 --> 01:33:03,560
also handle cleanup for them

1945
01:32:59,210 --> 01:33:05,960
there's might be delays in the

1946
01:33:03,560 --> 01:33:08,900
authorization if you have problems with

1947
01:33:05,960 --> 01:33:11,750
latency or if the request URI is not

1948
01:33:08,900 --> 01:33:15,230
available and the a s also has to make

1949
01:33:11,750 --> 01:33:17,390
outbound HTTP requests that is you enter

1950
01:33:15,230 --> 01:33:20,809
the whole domain of service site request

1951
01:33:17,390 --> 01:33:23,410
forgery problems which are a lot met

1952
01:33:20,810 --> 01:33:26,210
there are some input from you so just

1953
01:33:23,410 --> 01:33:29,930
clarification the jaw graft actually

1954
01:33:26,210 --> 01:33:32,480
doesn't quiet clients to store no it

1955
01:33:29,930 --> 01:33:35,750
does not the jaw draft says put it

1956
01:33:32,480 --> 01:33:38,330
somewhere can be on the client can be on

1957
01:33:35,750 --> 01:33:40,180
the a s can be somewhere else and at

1958
01:33:38,330 --> 01:33:44,200
least open how to

1959
01:33:40,180 --> 01:33:46,120
how to do that yeah that's right so this

1960
01:33:44,200 --> 01:33:49,780
this this is kind of left open in the

1961
01:33:46,120 --> 01:33:52,300
draft so the post request object is

1962
01:33:49,780 --> 01:33:57,610
essentially a description on how to do

1963
01:33:52,300 --> 01:34:00,070
that the idea is to move the staff to

1964
01:33:57,610 --> 01:34:02,170
the air so the responsibility for

1965
01:34:00,070 --> 01:34:05,559
managing these request objects by

1966
01:34:02,170 --> 01:34:07,690
creating a new request object endpoint

1967
01:34:05,560 --> 01:34:11,050
so the client calls this endpoint

1968
01:34:07,690 --> 01:34:14,019
delivers the request objects say with a

1969
01:34:11,050 --> 01:34:19,090
post request the client is then provided

1970
01:34:14,020 --> 01:34:22,210
a unique your I to that request the

1971
01:34:19,090 --> 01:34:23,670
contents there and this is then used as

1972
01:34:22,210 --> 01:34:26,050
the request your ID parameter

1973
01:34:23,670 --> 01:34:28,480
essentially the jar draft already

1974
01:34:26,050 --> 01:34:32,650
foresees exactly that I think there's a

1975
01:34:28,480 --> 01:34:35,799
sentence somehow outlining this idea but

1976
01:34:32,650 --> 01:34:39,460
this makes it more concrete

1977
01:34:35,800 --> 01:34:42,730
there could be two modes the reakless

1978
01:34:39,460 --> 01:34:44,260
object could be stored as a job if you

1979
01:34:42,730 --> 01:34:47,500
need the features like signing

1980
01:34:44,260 --> 01:34:49,900
encryption whatever or it could be a raw

1981
01:34:47,500 --> 01:34:52,990
request object just in JSON format to

1982
01:34:49,900 --> 01:34:55,900
keep it more simple this would look like

1983
01:34:52,990 --> 01:34:59,679
this this is the post request to create

1984
01:34:55,900 --> 01:35:02,290
the resource up they request object so

1985
01:34:59,680 --> 01:35:04,300
you would send a post request and in a

1986
01:35:02,290 --> 01:35:06,760
post request you will have a jason with

1987
01:35:04,300 --> 01:35:08,880
all the parameters that you otherwise

1988
01:35:06,760 --> 01:35:11,920
would find in the authorization request

1989
01:35:08,880 --> 01:35:15,400
you could also have this as a dot then

1990
01:35:11,920 --> 01:35:20,280
you just post the draw it somewhere in

1991
01:35:15,400 --> 01:35:22,629
the response you get a request your I

1992
01:35:20,280 --> 01:35:26,679
containing enough entropy sir that it's

1993
01:35:22,630 --> 01:35:28,510
unguessable by somebody else and then

1994
01:35:26,680 --> 01:35:32,440
when you send your authorization request

1995
01:35:28,510 --> 01:35:34,150
all you need to send is one single

1996
01:35:32,440 --> 01:35:36,460
parameter request URI containing

1997
01:35:34,150 --> 01:35:42,580
whatever you receive before you request

1998
01:35:36,460 --> 01:35:44,710
URI that is the mechanism as I already

1999
01:35:42,580 --> 01:35:46,900
said it has some advantages there's no

2000
01:35:44,710 --> 01:35:49,900
reakless object management on the client

2001
01:35:46,900 --> 01:35:52,768
itself deployments can choose from these

2002
01:35:49,900 --> 01:35:56,369
two options to have a JSON or jot

2003
01:35:52,769 --> 01:35:58,710
we can have client authentication at the

2004
01:35:56,369 --> 01:36:01,499
endpoint where the request object is

2005
01:35:58,710 --> 01:36:04,289
posted so you can refuse unauthorized

2006
01:36:01,499 --> 01:36:06,570
clients very early in the process and

2007
01:36:04,289 --> 01:36:08,489
also you can have patterns where the

2008
01:36:06,570 --> 01:36:10,440
authorization process itself relies on

2009
01:36:08,489 --> 01:36:12,480
the identity of the client because you

2010
01:36:10,440 --> 01:36:16,348
know her essentially proving the

2011
01:36:12,480 --> 01:36:18,928
identity of the client and also because

2012
01:36:16,349 --> 01:36:21,749
we now have the option to transport very

2013
01:36:18,929 --> 01:36:25,489
large authorization request requests

2014
01:36:21,749 --> 01:36:27,659
this is also a good foundation to convey

2015
01:36:25,489 --> 01:36:30,058
something like rich authorization

2016
01:36:27,659 --> 01:36:32,460
requests aka structured scopes where you

2017
01:36:30,059 --> 01:36:34,650
put a lot of information in them sorry

2018
01:36:32,460 --> 01:36:38,130
are not limited for example by the size

2019
01:36:34,650 --> 01:36:41,909
of the URI while still having a defined

2020
01:36:38,130 --> 01:36:44,130
implementation pattern so the question

2021
01:36:41,909 --> 01:36:49,070
is what are your opinions shall we bring

2022
01:36:44,130 --> 01:36:52,739
this to the ITF or rather not correct

2023
01:36:49,070 --> 01:36:53,820
hierarchy um I I think all these are

2024
01:36:52,739 --> 01:36:55,440
very good points this makes a lot of

2025
01:36:53,820 --> 01:36:59,299
sense I just wanted to point out that

2026
01:36:55,440 --> 01:37:01,739
this is almost exactly what I

2027
01:36:59,300 --> 01:37:06,539
implemented when Justin first are

2028
01:37:01,739 --> 01:37:08,339
talking about XYZ last year the initial

2029
01:37:06,539 --> 01:37:11,489
thoughts behind that I I did almost

2030
01:37:08,340 --> 01:37:14,070
exactly this just as a plain object not

2031
01:37:11,489 --> 01:37:16,348
with a non wrapped in the job and it was

2032
01:37:14,070 --> 01:37:18,599
super easy to add to an existing OAuth

2033
01:37:16,349 --> 01:37:19,980
server that I had and I made a lot of

2034
01:37:18,599 --> 01:37:27,119
sense so I just wanna throw out there

2035
01:37:19,980 --> 01:37:30,749
thank you john bradley yubico one of the

2036
01:37:27,119 --> 01:37:33,900
jar authors so jar has been in flight

2037
01:37:30,749 --> 01:37:39,059
for a while perhaps too long as it

2038
01:37:33,900 --> 01:37:42,360
closes in on completion again shortly we

2039
01:37:39,059 --> 01:37:44,730
prop you know things have developed over

2040
01:37:42,360 --> 01:37:48,598
time and this pattern has become clearer

2041
01:37:44,730 --> 01:37:51,690
and clearer as being preferable we left

2042
01:37:48,599 --> 01:37:54,510
it open jar open to this pattern but

2043
01:37:51,690 --> 01:37:56,940
didn't include a whole bunch of new text

2044
01:37:54,510 --> 01:37:59,150
you know have we had the timing been

2045
01:37:56,940 --> 01:38:03,449
different this might have gone into jar

2046
01:37:59,150 --> 01:38:06,120
but we don't necessarily want to reopen

2047
01:38:03,449 --> 01:38:07,440
and extend those people are

2048
01:38:06,120 --> 01:38:09,420
some people are counting on jar

2049
01:38:07,440 --> 01:38:11,190
finishing so that for some of the

2050
01:38:09,420 --> 01:38:13,950
payment stuff we don't necessarily want

2051
01:38:11,190 --> 01:38:16,950
to delay that so doing this as a

2052
01:38:13,950 --> 01:38:19,830
separate draft make sense will probably

2053
01:38:16,950 --> 01:38:25,860
debate whether or not the raw format or

2054
01:38:19,830 --> 01:38:29,190
an unsigned joj is preferable so there

2055
01:38:25,860 --> 01:38:34,070
are a few details that in it that I that

2056
01:38:29,190 --> 01:38:37,589
probably merit discussion but yeah as an

2057
01:38:34,070 --> 01:38:38,639
elaboration of jar this is probably

2058
01:38:37,590 --> 01:38:41,340
should happen so that we have a

2059
01:38:38,640 --> 01:38:42,660
consistent way of not doing it and as I

2060
01:38:41,340 --> 01:38:47,930
say we would have done it in jarhead

2061
01:38:42,660 --> 01:38:51,510
timing potentially been different yep

2062
01:38:47,930 --> 01:38:55,650
Annabel Backman Amazon so I want to

2063
01:38:51,510 --> 01:39:00,780
point out that this is very similar to

2064
01:38:55,650 --> 01:39:03,690
what the device authorization draft

2065
01:39:00,780 --> 01:39:06,960
defines in terms of we're pushing a

2066
01:39:03,690 --> 01:39:10,049
request up to the and endpoint on the a

2067
01:39:06,960 --> 01:39:13,050
s we're getting a URL back and then

2068
01:39:10,050 --> 01:39:16,230
we're opening that up or were in this

2069
01:39:13,050 --> 01:39:18,840
case you're adding that to an author an

2070
01:39:16,230 --> 01:39:20,490
authorization request but ultimately

2071
01:39:18,840 --> 01:39:22,830
you're getting a URL and you're you're

2072
01:39:20,490 --> 01:39:28,340
opening it up the only real difference

2073
01:39:22,830 --> 01:39:31,680
is the if the other direction how the

2074
01:39:28,340 --> 01:39:34,620
response then gets back to the client so

2075
01:39:31,680 --> 01:39:38,340
so it seems a little bit weird to me for

2076
01:39:34,620 --> 01:39:41,099
us to standardize two different methods

2077
01:39:38,340 --> 01:39:44,010
to do very potentially three different

2078
01:39:41,100 --> 01:39:46,890
methods to do this same address the same

2079
01:39:44,010 --> 01:39:51,680
challenge of how do I securely make this

2080
01:39:46,890 --> 01:39:54,180
request to the AAS at I know device

2081
01:39:51,680 --> 01:39:55,950
authorization is very far along in the

2082
01:39:54,180 --> 01:39:59,310
process and I don't necessarily want to

2083
01:39:55,950 --> 01:40:00,900
say we should derail that but maybe we

2084
01:39:59,310 --> 01:40:05,250
should be we should look at the fact

2085
01:40:00,900 --> 01:40:07,349
that we're treating both sides of this

2086
01:40:05,250 --> 01:40:10,110
transaction they get to the a s and get

2087
01:40:07,350 --> 01:40:11,460
back as if they're intrinsically linked

2088
01:40:10,110 --> 01:40:13,170
as if the mechanisms by which that

2089
01:40:11,460 --> 01:40:15,240
happens are intrinsically linked and

2090
01:40:13,170 --> 01:40:19,309
maybe we should be coupled those and

2091
01:40:15,240 --> 01:40:24,019
look at standardizing those separately

2092
01:40:19,309 --> 01:40:26,530
gonna cut the mic after that thank you

2093
01:40:24,020 --> 01:40:29,420
for that introduction a development

2094
01:40:26,530 --> 01:40:31,880
Jessamyn richer so you know obviously

2095
01:40:29,420 --> 01:40:33,349
this once again this pattern shares a

2096
01:40:31,880 --> 01:40:34,909
lot with X Y Z because I stole all the

2097
01:40:33,349 --> 01:40:37,130
best ideas from everybody and puts in

2098
01:40:34,909 --> 01:40:38,598
one thing I mean a lot of the motivation

2099
01:40:37,130 --> 01:40:40,849
was noticing that there was a lot of

2100
01:40:38,599 --> 01:40:45,500
overlap between things like the device

2101
01:40:40,849 --> 01:40:47,000
flow and request object registration but

2102
01:40:45,500 --> 01:40:49,610
I actually went to try to do the

2103
01:40:47,000 --> 01:40:53,960
exercise of collapsing those two within

2104
01:40:49,610 --> 01:40:56,239
ooofff - you really can't do it it it

2105
01:40:53,960 --> 01:40:59,059
there there are bits and assumptions

2106
01:40:56,239 --> 01:41:02,509
made on both sides that it's if we were

2107
01:40:59,059 --> 01:41:04,219
to try to like twist this into device

2108
01:41:02,510 --> 01:41:07,400
flow or make device flow like that it

2109
01:41:04,219 --> 01:41:10,070
would break the models for both of them

2110
01:41:07,400 --> 01:41:12,019
right so unfortunately I think that if

2111
01:41:10,070 --> 01:41:13,730
we do want to bring this in as an OAuth

2112
01:41:12,020 --> 01:41:17,630
2 extension it does need to be its own

2113
01:41:13,730 --> 01:41:21,860
thing and that is a shame but to me that

2114
01:41:17,630 --> 01:41:24,710
is also motivation for next generation

2115
01:41:21,860 --> 01:41:28,190
protocol that doesn't have those same

2116
01:41:24,710 --> 01:41:29,719
assumptions that can actually split you

2117
01:41:28,190 --> 01:41:32,058
know how you get the user there and how

2118
01:41:29,719 --> 01:41:36,679
you get the user back which is exactly

2119
01:41:32,059 --> 01:41:39,530
the structure that XYZ has I mean this

2120
01:41:36,679 --> 01:41:43,039
this is the world that this that that

2121
01:41:39,530 --> 01:41:46,639
project came out of right and that's

2122
01:41:43,039 --> 01:41:50,889
said I've implemented this I do think it

2123
01:41:46,639 --> 01:41:54,860
makes a lot of sense it does solve some

2124
01:41:50,889 --> 01:41:56,900
key use cases it's being very very

2125
01:41:54,860 --> 01:41:58,940
similar things are being used today in

2126
01:41:56,900 --> 01:42:01,009
the financial space some of the

2127
01:41:58,940 --> 01:42:04,428
proprietary some of them sort of pseudo

2128
01:42:01,010 --> 01:42:06,349
proprietary cabal's and so having a

2129
01:42:04,429 --> 01:42:10,909
standardized way to do this I think is a

2130
01:42:06,349 --> 01:42:15,289
really good idea there is an open issue

2131
01:42:10,909 --> 01:42:18,259
about the about the request format which

2132
01:42:15,289 --> 01:42:20,329
I have some strong opinions on and maybe

2133
01:42:18,260 --> 01:42:22,280
some sad acquiescence about where it's

2134
01:42:20,329 --> 01:42:26,329
probably going to go after talking with

2135
01:42:22,280 --> 01:42:28,670
Brian but you know if we bring this into

2136
01:42:26,329 --> 01:42:32,659
the IETF that will all obviously need to

2137
01:42:28,670 --> 01:42:34,940
be aligned I think we should bring it in

2138
01:42:32,659 --> 01:42:40,638
I think it fits under the group's

2139
01:42:34,940 --> 01:42:44,000
umbrella and you know just to reiterate

2140
01:42:40,639 --> 01:42:48,469
I think this is more motivation for

2141
01:42:44,000 --> 01:42:51,260
working on a new protocol that also does

2142
01:42:48,469 --> 01:42:53,750
this stuff but in a cleaner and better

2143
01:42:51,260 --> 01:42:57,079
kind of way without all of the legacy

2144
01:42:53,750 --> 01:43:03,560
baggage that this of necessity has to

2145
01:42:57,079 --> 01:43:07,519
deal with so just a couple of

2146
01:43:03,560 --> 01:43:09,889
clarification game this has rated the

2147
01:43:07,520 --> 01:43:13,030
scope of this document they're sending

2148
01:43:09,889 --> 01:43:16,520
the request URI to the authorization so

2149
01:43:13,030 --> 01:43:19,009
what actually is covered by char so it's

2150
01:43:16,520 --> 01:43:22,400
out of scope this document there then

2151
01:43:19,010 --> 01:43:25,429
it's called the the scope this document

2152
01:43:22,400 --> 01:43:28,400
I think should be just pushing the

2153
01:43:25,429 --> 01:43:30,260
request object to the the authorization

2154
01:43:28,400 --> 01:43:32,000
server and just getting back a response

2155
01:43:30,260 --> 01:43:36,139
which includes there because your

2156
01:43:32,000 --> 01:43:39,139
repeater so small concise look yeah yeah

2157
01:43:36,139 --> 01:43:44,630
yeah you know I just wanted to make sure

2158
01:43:39,139 --> 01:43:46,940
that people understand yeah okay good so

2159
01:43:44,630 --> 01:44:15,409
on so how many people read the draft

2160
01:43:46,940 --> 01:44:17,509
show for hands please okay we want to so

2161
01:44:15,409 --> 01:44:21,980
it's their interest group to go into

2162
01:44:17,510 --> 01:44:23,510
that yeah it's not about process

2163
01:44:21,980 --> 01:44:24,799
specific structures so for all the

2164
01:44:23,510 --> 01:44:26,360
whispering for kind of everyone else I

2165
01:44:24,800 --> 01:44:28,520
mean the specific thing is we're talking

2166
01:44:26,360 --> 01:44:30,409
about a clarify Burundian we're speaking

2167
01:44:28,520 --> 01:44:31,639
about is this the idea we want to bring

2168
01:44:30,409 --> 01:44:33,769
in we're not talking about a specific

2169
01:44:31,639 --> 01:44:37,820
document might as the documents that say

2170
01:44:33,770 --> 01:44:40,570
the okay except history yeah okay so I'm

2171
01:44:37,820 --> 01:44:44,829
gonna then call for a hum here and see

2172
01:44:40,570 --> 01:44:49,210
get the feeling of the room okay

2173
01:44:44,829 --> 01:44:50,829
good sorry I really dude I just want to

2174
01:44:49,210 --> 01:44:52,869
clarify the hub is that we think we want

2175
01:44:50,829 --> 01:45:02,710
to bring the idea into discussion

2176
01:44:52,869 --> 01:45:04,089
exactly correct yes right as an

2177
01:45:02,710 --> 01:45:07,329
organization thing I was confused

2178
01:45:04,090 --> 01:45:08,440
whether the document is an ID or not no

2179
01:45:07,329 --> 01:45:11,199
it's not

2180
01:45:08,440 --> 01:45:12,428
in some sense we can't really Humbert as

2181
01:45:11,199 --> 01:45:14,589
someone is going to write up an

2182
01:45:12,429 --> 01:45:16,599
individual document to bring it to the

2183
01:45:14,590 --> 01:45:17,949
group I think what what we've seen on

2184
01:45:16,599 --> 01:45:21,030
the microphone is a couple of papers

2185
01:45:17,949 --> 01:45:23,500
saying or that sounds like a good idea

2186
01:45:21,030 --> 01:45:25,059
so Romi genius we can get again to

2187
01:45:23,500 --> 01:45:27,670
clarify the hum we're about to do is

2188
01:45:25,059 --> 01:45:30,130
that someone that participates in the

2189
01:45:27,670 --> 01:45:31,630
IETF community has an idea and would

2190
01:45:30,130 --> 01:45:34,300
like feedback from the community in a

2191
01:45:31,630 --> 01:45:35,500
very concrete way that he should he and

2192
01:45:34,300 --> 01:45:37,599
his team should work a lot harder and

2193
01:45:35,500 --> 01:45:39,219
bring something to the ITF which then

2194
01:45:37,599 --> 01:45:41,679
we'll decide further again if there's a

2195
01:45:39,219 --> 01:45:43,540
draft except that you actually check

2196
01:45:41,679 --> 01:45:47,679
charter scope and the rest of it exactly

2197
01:45:43,540 --> 01:45:50,650
yeah so that long freeze is the aam okay

2198
01:45:47,679 --> 01:45:54,130
if you are I guess you've heard the

2199
01:45:50,650 --> 01:45:58,119
request here so so I'm gonna ask you to

2200
01:45:54,130 --> 01:46:01,059
harm to support this or not so if you

2201
01:45:58,119 --> 01:46:07,960
support this bringing this work to the

2202
01:46:01,059 --> 01:46:10,599
IDF please hum now if you're against

2203
01:46:07,960 --> 01:46:15,790
bringing this work to the IDF please hum

2204
01:46:10,599 --> 01:46:18,190
now perfect thank you thank you I've

2205
01:46:15,790 --> 01:46:20,079
heard almost everyone how many or

2206
01:46:18,190 --> 01:46:21,669
everyone humming in the direction of to

2207
01:46:20,079 --> 01:46:26,259
bring this to the IGF which is a

2208
01:46:21,670 --> 01:46:30,059
non-binding yeah every way but that is

2209
01:46:26,260 --> 01:46:33,059
your feedback thank you thank you

2210
01:46:30,059 --> 01:46:33,059
aníbal

2211
01:46:46,819 --> 01:46:50,519
so this is gonna be interesting so just

2212
01:46:49,019 --> 01:46:53,369
looked in like half my slides are

2213
01:46:50,519 --> 01:46:56,309
missing so that's cool so I'll kind of

2214
01:46:53,369 --> 01:46:58,318
wing part of this that's okay so um what

2215
01:46:56,309 --> 01:47:03,510
I want to talk to you all about is how

2216
01:46:58,319 --> 01:47:06,059
we do HTTP requests signing in AWS using

2217
01:47:03,510 --> 01:47:11,489
a format that we call signature version

2218
01:47:06,059 --> 01:47:16,169
four guess why so in brief quickly up

2219
01:47:11,489 --> 01:47:17,938
why and what is this all about there's

2220
01:47:16,169 --> 01:47:20,849
three specific things we're looking for

2221
01:47:17,939 --> 01:47:24,780
the three specific things that we get

2222
01:47:20,849 --> 01:47:28,139
out of request signing in AWS first is

2223
01:47:24,780 --> 01:47:30,300
authentication of the the client that's

2224
01:47:28,139 --> 01:47:32,729
making the request second we do it for

2225
01:47:30,300 --> 01:47:35,089
message integrity which means we're

2226
01:47:32,729 --> 01:47:36,749
actually signing a significant amount of

2227
01:47:35,089 --> 01:47:38,068
significant number of the different

2228
01:47:36,749 --> 01:47:40,469
parts of the request as you'll see and

2229
01:47:38,069 --> 01:47:41,939
then we have some element of replay

2230
01:47:40,469 --> 01:47:43,969
prevention that we get out of this as

2231
01:47:41,939 --> 01:47:43,969
well

2232
01:47:44,629 --> 01:47:53,669
virtually all requests to AWS api's are

2233
01:47:49,139 --> 01:47:57,179
signed using signature version 4 there's

2234
01:47:53,669 --> 01:48:00,179
a few exceptions like anonymous request

2235
01:47:57,179 --> 01:48:02,429
to s3 but for the most part if you're

2236
01:48:00,179 --> 01:48:06,839
using AWS your you're signing things

2237
01:48:02,429 --> 01:48:09,389
using this algorithm as far as what goes

2238
01:48:06,839 --> 01:48:10,919
into these signatures like I said we're

2239
01:48:09,389 --> 01:48:12,929
doing it for message integrity which

2240
01:48:10,919 --> 01:48:15,269
means we're hitting a lot of different

2241
01:48:12,929 --> 01:48:18,179
parts of the request method endpoint

2242
01:48:15,269 --> 01:48:21,030
path time stamp query string parameters

2243
01:48:18,179 --> 01:48:22,619
body and some of the headers and I'll

2244
01:48:21,030 --> 01:48:26,188
show you how some of that works in a

2245
01:48:22,619 --> 01:48:29,938
moment and then we're we're using H Mac

2246
01:48:26,189 --> 01:48:33,059
sha-256 with a key that is derived from

2247
01:48:29,939 --> 01:48:35,459
a shared secret to do that which is why

2248
01:48:33,059 --> 01:48:41,069
I was asking about symmetric versus

2249
01:48:35,459 --> 01:48:43,139
asymmetric earlier so there's three two

2250
01:48:41,069 --> 01:48:45,479
we will walk you through what this

2251
01:48:43,139 --> 01:48:47,969
signature version four algorithm looks

2252
01:48:45,479 --> 01:48:51,209
like there's three basic steps we have

2253
01:48:47,969 --> 01:48:53,099
to canonicalize a request we then use

2254
01:48:51,209 --> 01:48:55,019
that to construct a string that we're

2255
01:48:53,099 --> 01:48:57,419
going to sign and then we sign that

2256
01:48:55,019 --> 01:48:59,669
string and stick that in the HTTP

2257
01:48:57,419 --> 01:49:00,360
request I'm going to go through this

2258
01:48:59,669 --> 01:49:02,580
part a little bit

2259
01:49:00,360 --> 01:49:03,900
quickly because if you really really

2260
01:49:02,580 --> 01:49:06,660
want to see it you can go check it out

2261
01:49:03,900 --> 01:49:07,469
on the public documentation but just to

2262
01:49:06,660 --> 01:49:12,000
give you an idea of what we're talking

2263
01:49:07,470 --> 01:49:13,530
about I'm gonna go through this so so to

2264
01:49:12,000 --> 01:49:16,590
start with let's talk about how we

2265
01:49:13,530 --> 01:49:18,660
canonicalize this thing the top there

2266
01:49:16,590 --> 01:49:22,590
I've got kind of an example HTTP

2267
01:49:18,660 --> 01:49:25,080
requests to a example service at the

2268
01:49:22,590 --> 01:49:27,480
bottom is the format of kind of what

2269
01:49:25,080 --> 01:49:29,400
goes into this canonicalized version of

2270
01:49:27,480 --> 01:49:31,339
the request like I said we have the

2271
01:49:29,400 --> 01:49:33,660
request method we have a

2272
01:49:31,340 --> 01:49:35,400
canonicalization the docs call it a

2273
01:49:33,660 --> 01:49:38,639
canonical URI what it really is is a

2274
01:49:35,400 --> 01:49:41,940
canonical version of the past component

2275
01:49:38,640 --> 01:49:44,240
of the URL that you're heading and then

2276
01:49:41,940 --> 01:49:46,799
we have a canonicalized query string and

2277
01:49:44,240 --> 01:49:48,599
canonicalized headers and lists of the

2278
01:49:46,800 --> 01:49:52,260
headers that you are actually signing

2279
01:49:48,600 --> 01:49:57,570
and then we also include a hash of the

2280
01:49:52,260 --> 01:49:59,460
request payload in that so we just kind

2281
01:49:57,570 --> 01:50:01,170
of walk through this make it clear we

2282
01:49:59,460 --> 01:50:04,170
start with the method then we

2283
01:50:01,170 --> 01:50:05,700
canonicalize the path by we provide some

2284
01:50:04,170 --> 01:50:08,040
pretty specific instructions on how you

2285
01:50:05,700 --> 01:50:09,990
can analyze that we do reference some

2286
01:50:08,040 --> 01:50:12,630
RFC's for that

2287
01:50:09,990 --> 01:50:15,750
likewise for query string we reference

2288
01:50:12,630 --> 01:50:20,250
some rfcs we also have specifics like

2289
01:50:15,750 --> 01:50:24,660
you're gonna sort them by by parameter

2290
01:50:20,250 --> 01:50:32,040
name then by value etc headers it's a

2291
01:50:24,660 --> 01:50:33,660
very similar sort of thing and then I'll

2292
01:50:32,040 --> 01:50:37,530
tell you that's a hash of a payload and

2293
01:50:33,660 --> 01:50:39,960
you'll believe me so that that's that's

2294
01:50:37,530 --> 01:50:42,960
canonicalization of the of the request

2295
01:50:39,960 --> 01:50:50,670
next step is we take that and put it

2296
01:50:42,960 --> 01:50:51,840
into you a string to actually sign and I

2297
01:50:50,670 --> 01:50:54,510
think I actually skipped a step

2298
01:50:51,840 --> 01:50:56,730
my example there but that's okay oh no I

2299
01:50:54,510 --> 01:50:58,290
didn't okay so the the actual string

2300
01:50:56,730 --> 01:51:01,110
design has a few different components

2301
01:50:58,290 --> 01:51:02,969
first we say we specify the exact

2302
01:51:01,110 --> 01:51:07,019
algorithm we're using in this case it's

2303
01:51:02,969 --> 01:51:10,590
this tag AWS for H max sha-256 all sig

2304
01:51:07,020 --> 01:51:12,869
v4 uses that but it could change we put

2305
01:51:10,590 --> 01:51:14,849
in a timestamp for when we're making the

2306
01:51:12,869 --> 01:51:19,019
request we put in this thing we call a

2307
01:51:14,849 --> 01:51:20,820
credential scope which relates to how we

2308
01:51:19,020 --> 01:51:24,330
derive the key that we're going to use

2309
01:51:20,820 --> 01:51:28,349
to sign this when we derived that key we

2310
01:51:24,330 --> 01:51:29,610
bind it to the day the region your

2311
01:51:28,349 --> 01:51:31,440
communicator but yes region you're

2312
01:51:29,610 --> 01:51:34,019
communicating with and the AWS service

2313
01:51:31,440 --> 01:51:35,580
you're communicating with and then

2314
01:51:34,020 --> 01:51:38,219
there's finally that the hash of the

2315
01:51:35,580 --> 01:51:41,130
canonical request we just created so you

2316
01:51:38,219 --> 01:51:46,110
create that and you sign it with a

2317
01:51:41,130 --> 01:51:49,550
derived key as I said the derived key we

2318
01:51:46,110 --> 01:51:53,119
generated using date region and service

2319
01:51:49,550 --> 01:51:56,010
it's basically a series of chained H max

2320
01:51:53,119 --> 01:52:03,780
starting with a secret key that both you

2321
01:51:56,010 --> 01:52:05,880
and AWS know mm-hmm you like I said do a

2322
01:52:03,780 --> 01:52:07,590
bunch of trying to change H max you

2323
01:52:05,880 --> 01:52:09,300
generate this key and then you sign your

2324
01:52:07,590 --> 01:52:13,580
string to sign and you have a signature

2325
01:52:09,300 --> 01:52:16,920
and then you stuff that generally into a

2326
01:52:13,580 --> 01:52:19,739
header in your HTTP request and you're

2327
01:52:16,920 --> 01:52:22,170
good to go and that's the end of what my

2328
01:52:19,739 --> 01:52:24,388
actual slides contain whoops now let's

2329
01:52:22,170 --> 01:52:26,909
talk about why we do some of this stuff

2330
01:52:24,389 --> 01:52:31,469
and some of the lessons we learned I

2331
01:52:26,909 --> 01:52:33,540
want to start with this so minutes three

2332
01:52:31,469 --> 01:52:36,330
minutes cool all right let's go quickly

2333
01:52:33,540 --> 01:52:39,060
then to start with some obvious stuff

2334
01:52:36,330 --> 01:52:40,889
crypto agility it's good it's important

2335
01:52:39,060 --> 01:52:44,730
that's one of the reasons we're on v4

2336
01:52:40,889 --> 01:52:46,980
and not v1 because we had to add that so

2337
01:52:44,730 --> 01:52:50,790
that H max shot 256 bit bear and that's

2338
01:52:46,980 --> 01:52:53,638
important another thing we ran into over

2339
01:52:50,790 --> 01:52:55,230
the years protocol agility we started

2340
01:52:53,639 --> 01:52:57,659
out with a protocol that was very query

2341
01:52:55,230 --> 01:52:59,580
string oriented and so we were just kind

2342
01:52:57,659 --> 01:53:01,619
of signing query string parameters over

2343
01:52:59,580 --> 01:53:02,969
time that changed we needed to put stuff

2344
01:53:01,619 --> 01:53:05,030
in the body we need to put stuff in

2345
01:53:02,969 --> 01:53:07,040
headers etc etc we need

2346
01:53:05,030 --> 01:53:10,070
to extend the format to enable us to

2347
01:53:07,040 --> 01:53:12,920
sign more of the HTTP requests in as a

2348
01:53:10,070 --> 01:53:15,469
whole because different protocols are

2349
01:53:12,920 --> 01:53:17,540
running on top of HTTP are gonna put

2350
01:53:15,470 --> 01:53:23,930
that different value on different parts

2351
01:53:17,540 --> 01:53:25,490
of the request canonicalization that was

2352
01:53:23,930 --> 01:53:28,130
a big thing we talked I mentioned that

2353
01:53:25,490 --> 01:53:29,840
word a whole lot of times there we are

2354
01:53:28,130 --> 01:53:32,300
if you look at our documentation it is

2355
01:53:29,840 --> 01:53:37,430
very specific about how we canonicalize

2356
01:53:32,300 --> 01:53:39,860
these things because you have to be even

2357
01:53:37,430 --> 01:53:42,140
something like URL encoding you can't

2358
01:53:39,860 --> 01:53:44,780
just say go follow this RFC because

2359
01:53:42,140 --> 01:53:47,660
guess what the RFC changes or the

2360
01:53:44,780 --> 01:53:49,910
recommend the list of of reserved

2361
01:53:47,660 --> 01:53:51,470
characters change and then you have to

2362
01:53:49,910 --> 01:53:52,610
deal with the fact that older libraries

2363
01:53:51,470 --> 01:53:57,560
aren't doing it that way a newer

2364
01:53:52,610 --> 01:53:59,269
libraries are you can't just say URL

2365
01:53:57,560 --> 01:54:00,710
encode and assume that the API is gonna

2366
01:53:59,270 --> 01:54:02,900
do it right because if you look at

2367
01:54:00,710 --> 01:54:05,210
languages take JavaScript for example

2368
01:54:02,900 --> 01:54:07,370
there's like three different encoding

2369
01:54:05,210 --> 01:54:08,780
related methods you could call and they

2370
01:54:07,370 --> 01:54:11,780
all encode things slightly differently

2371
01:54:08,780 --> 01:54:14,120
so we have to be very specific about

2372
01:54:11,780 --> 01:54:19,490
that sort of thing

2373
01:54:14,120 --> 01:54:21,370
it gets alright yeah going back to the

2374
01:54:19,490 --> 01:54:23,719
assigning different parts of the request

2375
01:54:21,370 --> 01:54:26,090
there's a reason that we specify what

2376
01:54:23,720 --> 01:54:28,280
headers were signing and there's a

2377
01:54:26,090 --> 01:54:30,200
reason we specify explicit ordering for

2378
01:54:28,280 --> 01:54:33,320
query string parameters it's because

2379
01:54:30,200 --> 01:54:34,820
again you have to here it's not so much

2380
01:54:33,320 --> 01:54:38,450
an issue of how are things getting

2381
01:54:34,820 --> 01:54:41,120
canonicalized but an issue of middlemen

2382
01:54:38,450 --> 01:54:42,710
between the person who is actually true

2383
01:54:41,120 --> 01:54:44,870
the code that's actually trying to make

2384
01:54:42,710 --> 01:54:48,260
the request and your server that's going

2385
01:54:44,870 --> 01:54:49,880
to receive it the obvious middlemen are

2386
01:54:48,260 --> 01:54:52,070
things like proxies and load balancers

2387
01:54:49,880 --> 01:54:53,450
and whatnot even if you throw those out

2388
01:54:52,070 --> 01:54:57,110
you still got middlemen because you've

2389
01:54:53,450 --> 01:54:59,480
got browsers you've got SDKs you've got

2390
01:54:57,110 --> 01:55:03,440
language libraries that are gonna get in

2391
01:54:59,480 --> 01:55:06,469
your way in case you don't believe me

2392
01:55:03,440 --> 01:55:09,290
just think about every API that lets you

2393
01:55:06,470 --> 01:55:11,840
specify query string parameters as a map

2394
01:55:09,290 --> 01:55:14,510
maps are unordered how are those going

2395
01:55:11,840 --> 01:55:17,090
into the URL you don't know so you have

2396
01:55:14,510 --> 01:55:20,140
to have a specify how you're ordering

2397
01:55:17,090 --> 01:55:22,910
those and how you're signing those

2398
01:55:20,140 --> 01:55:24,680
more fun with headers going back to

2399
01:55:22,910 --> 01:55:26,300
protocol agility I talked about protocol

2400
01:55:24,680 --> 01:55:29,300
agility for what's running on top of

2401
01:55:26,300 --> 01:55:33,830
HTTP but what about protocol agility for

2402
01:55:29,300 --> 01:55:37,310
HTTP itself when we went from 1.1 to 2.0

2403
01:55:33,830 --> 01:55:39,890
the host header changed from host 2 :

2404
01:55:37,310 --> 01:55:41,930
Authority and so we had a bunch of

2405
01:55:39,890 --> 01:55:43,700
services that were expecting the host

2406
01:55:41,930 --> 01:55:45,650
header to be signed and required you to

2407
01:55:43,700 --> 01:55:48,710
sign the host header but now there's no

2408
01:55:45,650 --> 01:55:50,509
more host header so what are you what's

2409
01:55:48,710 --> 01:55:51,980
the client signing because they don't

2410
01:55:50,510 --> 01:55:55,340
necessarily know if this request is

2411
01:55:51,980 --> 01:55:59,150
going over HTTP 11.1 or HTTP 2.0 it

2412
01:55:55,340 --> 01:56:01,400
might change over as it's sent over the

2413
01:55:59,150 --> 01:56:03,440
wire so they have to deal with that as

2414
01:56:01,400 --> 01:56:05,089
well we thankfully because of the

2415
01:56:03,440 --> 01:56:07,339
flexibility in our protocol that you

2416
01:56:05,090 --> 01:56:08,630
specify what headers you're signing we

2417
01:56:07,340 --> 01:56:10,100
were actually able to deal with that

2418
01:56:08,630 --> 01:56:11,840
just with some code changes and

2419
01:56:10,100 --> 01:56:15,710
documentation changes we didn't actually

2420
01:56:11,840 --> 01:56:20,570
have to Rev the format so that was kind

2421
01:56:15,710 --> 01:56:25,090
of a positive there the the last thing

2422
01:56:20,570 --> 01:56:27,530
I'll say real quick if I've got one cool

2423
01:56:25,090 --> 01:56:31,250
performance I mentioned a little bit

2424
01:56:27,530 --> 01:56:32,630
earlier with asymmetric crypto there's

2425
01:56:31,250 --> 01:56:33,620
two to two different places where we

2426
01:56:32,630 --> 01:56:36,290
kind of ran into some interesting

2427
01:56:33,620 --> 01:56:38,960
performance challenges one is symmetric

2428
01:56:36,290 --> 01:56:41,019
versus asymmetric asymmetric would be

2429
01:56:38,960 --> 01:56:44,630
awesome does great security properties

2430
01:56:41,020 --> 01:56:47,720
but there are honestly scenarios where

2431
01:56:44,630 --> 01:56:50,920
it is just still too slow and likely

2432
01:56:47,720 --> 01:56:53,840
always will be because as things improve

2433
01:56:50,920 --> 01:56:55,430
to make asymmetric crypto faster they're

2434
01:56:53,840 --> 01:56:58,520
also going to be improving to make other

2435
01:56:55,430 --> 01:57:00,500
parts of the system faster and so you're

2436
01:56:58,520 --> 01:57:02,090
still going to be looking at increases

2437
01:57:00,500 --> 01:57:04,430
in latency at potentially double the

2438
01:57:02,090 --> 01:57:08,810
cost of the API call so that's something

2439
01:57:04,430 --> 01:57:12,410
we have to think about lastly is I

2440
01:57:08,810 --> 01:57:13,850
mentioned Rick body was saying the body

2441
01:57:12,410 --> 01:57:17,690
of the request the fact that we sign a

2442
01:57:13,850 --> 01:57:20,990
hash of it not the full thing that's

2443
01:57:17,690 --> 01:57:23,360
again why we run version 4 not version 1

2444
01:57:20,990 --> 01:57:26,300
or 2 or 3 that was something we realized

2445
01:57:23,360 --> 01:57:29,179
hey this is not a great idea so another

2446
01:57:26,300 --> 01:57:30,260
reason for flexibility in what parts of

2447
01:57:29,180 --> 01:57:31,400
the request you're signing and how

2448
01:57:30,260 --> 01:57:33,380
you're signing those

2449
01:57:31,400 --> 01:57:36,679
and that was my world warden to earth

2450
01:57:33,380 --> 01:57:38,720
through AWS Sigma 4 if you google AWS

2451
01:57:36,680 --> 01:57:40,310
signature version 4 you will find our

2452
01:57:38,720 --> 01:57:42,500
public documentation on it if you want

2453
01:57:40,310 --> 01:57:45,350
to dive into that and see a little bit

2454
01:57:42,500 --> 01:57:48,620
more there's also source code for all of

2455
01:57:45,350 --> 01:57:49,820
our client SDKs pretty much on github

2456
01:57:48,620 --> 01:57:52,849
you could look at how we actually do it

2457
01:57:49,820 --> 01:57:55,570
there I are you planning to bring this

2458
01:57:52,850 --> 01:57:59,390
work as a specification to the idea

2459
01:57:55,570 --> 01:58:02,740
facilitation or um that's an interesting

2460
01:57:59,390 --> 01:58:02,740
thing to explore

2461
01:58:02,980 --> 01:58:11,799
yeah I think our presumption is that

2462
01:58:06,530 --> 01:58:13,280
there wouldn't be interest but yeah ok

2463
01:58:11,800 --> 01:58:17,270
ok thank you

2464
01:58:13,280 --> 01:58:19,190
so I'm just going through this quickly

2465
01:58:17,270 --> 01:58:23,000
so we've talked about a nested jaw to

2466
01:58:19,190 --> 01:58:27,139
him last last time what was missing is a

2467
01:58:23,000 --> 01:58:30,050
use cases so the issue was there in JSON

2468
01:58:27,140 --> 01:58:32,360
today it defines the concept of a nested

2469
01:58:30,050 --> 01:58:37,460
jawed but it has a limitation of that

2470
01:58:32,360 --> 01:58:40,280
the enclosing dot doesn't have its own a

2471
01:58:37,460 --> 01:58:43,790
claims and so the goal is to extend that

2472
01:58:40,280 --> 01:58:46,820
that that concept and allow the

2473
01:58:43,790 --> 01:58:49,310
enclosing jar to have its own claims if

2474
01:58:46,820 --> 01:58:49,700
there are two use cases that I'm aware

2475
01:58:49,310 --> 01:58:53,780
of

2476
01:58:49,700 --> 01:58:56,540
one is that native app that a interact

2477
01:58:53,780 --> 01:58:59,719
with two different authorization servers

2478
01:58:56,540 --> 01:59:02,210
what one is that that the native as

2479
01:58:59,720 --> 01:59:05,590
aware of that first authorization server

2480
01:59:02,210 --> 01:59:07,910
but not that the second one in and

2481
01:59:05,590 --> 01:59:10,430
because we don't have time and I'm not

2482
01:59:07,910 --> 01:59:14,059
going to go through that the flow itself

2483
01:59:10,430 --> 01:59:16,310
in the second use case is a use case

2484
01:59:14,060 --> 01:59:19,340
actually and now it's too late actually

2485
01:59:16,310 --> 01:59:22,280
to affect this this document because

2486
01:59:19,340 --> 01:59:29,060
it's a it's a think already with there

2487
01:59:22,280 --> 01:59:32,360
is G and that a allows that in or needs

2488
01:59:29,060 --> 01:59:36,110
look at that same concept of a nested

2489
01:59:32,360 --> 01:59:39,980
jot one inside the the other and with

2490
01:59:36,110 --> 01:59:43,580
with two different a claims in and we've

2491
01:59:39,980 --> 01:59:45,370
talked about em I'll talk about the

2492
01:59:43,580 --> 01:59:48,610
example so we've talked about

2493
01:59:45,370 --> 01:59:52,599
defining a content type and a new claim

2494
01:59:48,610 --> 01:59:54,730
to kind of define how would you nest

2495
01:59:52,600 --> 01:59:57,670
those a together range rights

2496
01:59:54,730 --> 01:59:58,750
so I want to say too much because we're

2497
01:59:57,670 --> 02:00:01,270
gonna have time right now

2498
01:59:58,750 --> 02:00:03,130
go ahead I just quickly wanted to say

2499
02:00:01,270 --> 02:00:05,200
that that passport document is just

2500
02:00:03,130 --> 02:00:09,490
submitted from the work group asking for

2501
02:00:05,200 --> 02:00:11,019
publication rights okay okay maybe it's

2502
02:00:09,490 --> 02:00:15,040
doable so we'll see

2503
02:00:11,020 --> 02:00:19,510
so who read the document any show of

2504
02:00:15,040 --> 02:00:32,760
hands one two three okay

2505
02:00:19,510 --> 02:00:35,620
for em I don't know if it's that's not

2506
02:00:32,760 --> 02:00:37,930
not enough people I would say have read

2507
02:00:35,620 --> 02:00:43,180
it to make the make a call for adoption

2508
02:00:37,930 --> 02:00:47,800
um yeah I think we will okay yeah so

2509
02:00:43,180 --> 02:00:53,920
it's to read it okay okay good I don't

2510
02:00:47,800 --> 02:00:56,440
have failure perfectly okay okay perfect

2511
02:00:53,920 --> 02:00:58,630
okay and I will add the second use case

2512
02:00:56,440 --> 02:01:03,820
that the still use case it's not in the

2513
02:00:58,630 --> 02:01:08,650
document but thank you all and yeah see

2514
02:01:03,820 --> 02:01:10,150
you next time I guess thank you can I

2515
02:01:08,650 --> 02:01:12,700
have a last word

2516
02:01:10,150 --> 02:01:14,469
so administrative leave coming in again

2517
02:01:12,700 --> 02:01:16,300
no value judgment all the work what's

2518
02:01:14,470 --> 02:01:17,680
really with really always excites me

2519
02:01:16,300 --> 02:01:19,660
we're not coming off as the tight link

2520
02:01:17,680 --> 02:01:21,640
of people have code I'm doing this thing

2521
02:01:19,660 --> 02:01:23,380
like I need this addition and kind of

2522
02:01:21,640 --> 02:01:25,270
the fast inner you know interplay is

2523
02:01:23,380 --> 02:01:27,640
phenomenal but from the governance

2524
02:01:25,270 --> 02:01:28,750
artifacts we have there is a lotta lot

2525
02:01:27,640 --> 02:01:30,460
of insight into what's actually

2526
02:01:28,750 --> 02:01:32,530
happening and what's on deck and what's

2527
02:01:30,460 --> 02:01:35,950
the next step miles the latest miles

2528
02:01:32,530 --> 02:01:38,080
games are July 27 TM it's tough to tell

2529
02:01:35,950 --> 02:01:40,450
from the Charter what working group

2530
02:01:38,080 --> 02:01:42,250
documents yeah beyond so in the coming

2531
02:01:40,450 --> 02:01:43,809
months we're gonna polish that on bill

2532
02:01:42,250 --> 02:01:46,390
and let's just put that out there now

2533
02:01:43,810 --> 02:01:47,890
that's just to make sure again my

2534
02:01:46,390 --> 02:01:49,600
primary driver here is that we know

2535
02:01:47,890 --> 02:01:51,730
where we're going and one of my key

2536
02:01:49,600 --> 02:01:53,230
things is there are folks that don't

2537
02:01:51,730 --> 02:01:55,030
participate here and they don't

2538
02:01:53,230 --> 02:01:56,089
understand that this being Adam gate

2539
02:01:55,030 --> 02:01:58,009
doesn't mean we're not doing

2540
02:01:56,090 --> 02:01:59,900
work so our ability to talk about future

2541
02:01:58,010 --> 02:02:01,520
milestones is signals to the community

2542
02:01:59,900 --> 02:02:03,710
that we have a lot of work to do to kind

2543
02:02:01,520 --> 02:02:04,280
of keep watching the space that's a good

2544
02:02:03,710 --> 02:02:06,320
point

2545
02:02:04,280 --> 02:02:27,500
thanks Roman we have planned to do this

2546
02:02:06,320 --> 02:02:31,400
already since 2017 at myself I rebuild

2547
02:02:27,500 --> 02:02:34,330
but I would post questions and then we

2548
02:02:31,400 --> 02:02:34,330
can we should

2549
02:02:53,470 --> 02:02:55,530
you

