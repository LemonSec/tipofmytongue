1
00:00:04,550 --> 00:00:21,860
Oh Oh all we need is I can do actually I

2
00:00:13,250 --> 00:00:27,650
can do the Jambo but but no taker is

3
00:00:21,860 --> 00:00:38,480
important - that's right I know it's

4
00:00:27,650 --> 00:00:40,250
it's gonna be rough - to do that it does

5
00:00:38,480 --> 00:00:41,809
make it does make me wonder if this

6
00:00:40,250 --> 00:00:45,679
working group should ever meet in person

7
00:00:41,809 --> 00:01:01,160
again it may be that we don't need to

8
00:00:45,679 --> 00:01:04,760
that the mailing list is sufficient we

9
00:01:01,160 --> 00:01:06,679
can we could always we could just say

10
00:01:04,760 --> 00:01:14,750
we'll meet in the isg room or something

11
00:01:06,680 --> 00:01:16,880
like that okay we're now up to five

12
00:01:14,750 --> 00:01:19,990
people plus a chair in the room that's

13
00:01:16,880 --> 00:01:19,990
that's really exciting

14
00:01:28,520 --> 00:01:34,289
[Music]

15
00:01:31,530 --> 00:01:35,550
and it's time start yeah let's let's get

16
00:01:34,290 --> 00:01:40,470
started because I have a plane to catch

17
00:01:35,550 --> 00:01:42,179
- so good afternoon to everybody and

18
00:01:40,470 --> 00:01:50,130
welcome - welcome to the ultimate

19
00:01:42,180 --> 00:01:51,960
session of the IETF 105 and can I figure

20
00:01:50,130 --> 00:02:08,820
out how to change the slide even with

21
00:01:51,960 --> 00:02:14,040
the keyboard no hello yeah I made it

22
00:02:08,820 --> 00:02:17,160
fullscreen whoops it just changed a

23
00:02:14,040 --> 00:02:19,310
bunch of times what's going on this is

24
00:02:17,160 --> 00:02:28,709
very strange

25
00:02:19,310 --> 00:02:34,940
that's about five slides back well at

26
00:02:28,709 --> 00:02:38,450
least we got to know well okay well

27
00:02:34,940 --> 00:02:47,489
we'll do it this way

28
00:02:38,450 --> 00:02:50,880
Wow more people yay okay

29
00:02:47,489 --> 00:02:56,640
so presumably by at this point in IETF

30
00:02:50,880 --> 00:03:01,890
everyone has seemed to note well and so

31
00:02:56,640 --> 00:03:06,779
what we're gonna do is good heavens Wow

32
00:03:01,890 --> 00:03:09,630
that's saying things slow kind of go

33
00:03:06,780 --> 00:03:12,420
through document status and stuff like

34
00:03:09,630 --> 00:03:15,120
that and then each of the active working

35
00:03:12,420 --> 00:03:20,880
group drafts we have a presentation on

36
00:03:15,120 --> 00:03:22,440
each of those so congratulations to

37
00:03:20,880 --> 00:03:34,230
everybody that was involved in J map

38
00:03:22,440 --> 00:03:39,569
core so it is now RFC 8620 J map Noah

39
00:03:34,230 --> 00:03:40,700
witnessed applause I've ever had let's

40
00:03:39,569 --> 00:03:43,700
do it again

41
00:03:40,700 --> 00:03:43,700
congratulations

42
00:03:44,520 --> 00:03:47,569
[Applause]

43
00:03:51,010 --> 00:04:01,190
arguably I'm fixing stuff in it so yeah

44
00:03:57,260 --> 00:04:03,440
so the another one is imminent basically

45
00:04:01,190 --> 00:04:09,560
we are waiting for our scheduler to post

46
00:04:03,440 --> 00:04:13,010
new okay oh okay fine

47
00:04:09,560 --> 00:04:14,420
okay I'll I'll do that them I just

48
00:04:13,010 --> 00:04:16,250
wanted to say this is Neil Jenkins we do

49
00:04:14,420 --> 00:04:19,519
have our first day roster for Jame up

50
00:04:16,250 --> 00:04:26,870
cause well what's a minor issue in the

51
00:04:19,519 --> 00:04:29,150
JSON in one of the examples yeah yeah

52
00:04:26,870 --> 00:04:31,580
that's exactly what what I said you know

53
00:04:29,150 --> 00:04:33,320
if there is no writer nobody's bothering

54
00:04:31,580 --> 00:04:36,560
curie to implement so that's not

55
00:04:33,320 --> 00:04:37,849
necessarily a bad thing but yes you

56
00:04:36,560 --> 00:04:44,150
might be able to start on the base

57
00:04:37,850 --> 00:04:50,840
document right away and we've already

58
00:04:44,150 --> 00:04:52,700
got an errata item right today I'm

59
00:04:50,840 --> 00:04:55,159
District I'm distracted by all of it

60
00:04:52,700 --> 00:05:01,789
although the cool cool new toys and red

61
00:04:55,160 --> 00:05:05,539
buttons up here so sorry okay so Jim at

62
00:05:01,789 --> 00:05:09,800
male real soon now and we're gonna talk

63
00:05:05,539 --> 00:05:14,050
about calendars WebSocket s/mime and MDM

64
00:05:09,800 --> 00:05:14,050
drafts that are that are currently there

65
00:05:16,870 --> 00:05:22,789
so let's start with WebSocket and let me

66
00:05:20,900 --> 00:05:27,370
see if I can figure out how to get this

67
00:05:22,789 --> 00:05:27,370
thing out of full screen so I can check

68
00:05:30,849 --> 00:05:39,560
in WebSocket yeah here we go okay

69
00:05:37,910 --> 00:05:43,450
web second I think this is getting

70
00:05:39,560 --> 00:05:43,450
pretty close to being fully baked

71
00:05:43,990 --> 00:05:48,710
version oh three I published early

72
00:05:46,610 --> 00:05:51,140
earlier this week most people probably

73
00:05:48,710 --> 00:05:55,250
saw Oh two was one small change which

74
00:05:51,140 --> 00:05:58,099
I'll get into as we move along here

75
00:05:55,250 --> 00:06:00,770
oh really it works that way because

76
00:05:58,100 --> 00:06:05,090
here's the list of changes since the

77
00:06:00,770 --> 00:06:07,669
last IETF real quickly so I renamed one

78
00:06:05,090 --> 00:06:11,000
of the capabilities that's mostly just

79
00:06:07,670 --> 00:06:13,880
for cosmetic purposes the originally I

80
00:06:11,000 --> 00:06:15,890
had set up the push capability to be a

81
00:06:13,880 --> 00:06:19,340
query parameter on the URL that has been

82
00:06:15,890 --> 00:06:23,510
changed to its own separate true/false

83
00:06:19,340 --> 00:06:25,849
capability we added a @ type argument to

84
00:06:23,510 --> 00:06:27,770
the request object which means that all

85
00:06:25,850 --> 00:06:30,650
the objects going to and from the server

86
00:06:27,770 --> 00:06:32,870
all have a type so that the client and

87
00:06:30,650 --> 00:06:36,020
server knows what it's receiving quite

88
00:06:32,870 --> 00:06:38,180
quickly and we I say added a push state

89
00:06:36,020 --> 00:06:41,349
argument to the state change object I

90
00:06:38,180 --> 00:06:44,990
will get into that in another slide and

91
00:06:41,350 --> 00:06:47,410
finally we added two new objects a

92
00:06:44,990 --> 00:06:50,169
website could push enable and disable

93
00:06:47,410 --> 00:06:55,870
disable is what was added an oh three

94
00:06:50,169 --> 00:06:58,549
the enable was in Oh - next slide please

95
00:06:55,870 --> 00:07:02,120
okay so Ford notify take no

96
00:06:58,550 --> 00:07:04,580
notifications discovery there is the new

97
00:07:02,120 --> 00:07:05,690
capability supports WebSocket push put

98
00:07:04,580 --> 00:07:07,359
it in bold so everybody knows what we're

99
00:07:05,690 --> 00:07:10,340
talking about

100
00:07:07,360 --> 00:07:13,370
very very simple true/false property I

101
00:07:10,340 --> 00:07:17,109
don't think there's any reason to argue

102
00:07:13,370 --> 00:07:20,180
or discuss that next slide please

103
00:07:17,110 --> 00:07:22,850
so enabling push notifications here is

104
00:07:20,180 --> 00:07:25,700
the new object very simple it has the

105
00:07:22,850 --> 00:07:27,440
type you list the data types that you

106
00:07:25,700 --> 00:07:33,250
want to receive from the server in an

107
00:07:27,440 --> 00:07:36,140
array and the last argument is the last

108
00:07:33,250 --> 00:07:37,640
overall state that you received from a

109
00:07:36,140 --> 00:07:39,380
push notification from the server so

110
00:07:37,640 --> 00:07:41,900
where this is useful is if you're

111
00:07:39,380 --> 00:07:43,880
reconnecting to a server you can give it

112
00:07:41,900 --> 00:07:46,669
this state and presumably this server

113
00:07:43,880 --> 00:07:48,500
would then push all updates from this

114
00:07:46,669 --> 00:07:50,240
state up to the current states it's a

115
00:07:48,500 --> 00:07:53,360
quick way for the the client to refresh

116
00:07:50,240 --> 00:07:55,000
his cache and get up to date next slide

117
00:07:53,360 --> 00:07:57,970
please

118
00:07:55,000 --> 00:08:01,130
here's the notification format which is

119
00:07:57,970 --> 00:08:05,110
identical to the state change object

120
00:08:01,130 --> 00:08:08,699
document in core with the new push state

121
00:08:05,110 --> 00:08:11,400
property at the end if the server

122
00:08:08,699 --> 00:08:13,319
can support an overall state it would

123
00:08:11,400 --> 00:08:14,698
include this on all the notifications so

124
00:08:13,319 --> 00:08:19,080
the desert that so the client knows

125
00:08:14,699 --> 00:08:22,680
exactly where everything is at the next

126
00:08:19,080 --> 00:08:25,560
slide please and finally a very very

127
00:08:22,680 --> 00:08:28,710
simple object to disable notifications

128
00:08:25,560 --> 00:08:32,130
if the client for some reason don't like

129
00:08:28,710 --> 00:08:34,949
what wishes to receive them that's

130
00:08:32,130 --> 00:08:37,380
pretty much it in this draft anybody

131
00:08:34,950 --> 00:08:41,729
have any questions or comments or

132
00:08:37,380 --> 00:08:44,130
outstanding issues with this as Neil

133
00:08:41,729 --> 00:08:49,230
Jenkins Sara yes I've read this I think

134
00:08:44,130 --> 00:08:51,329
is some looks fine and ready to publish

135
00:08:49,230 --> 00:08:54,089
just one quick comment on that push date

136
00:08:51,329 --> 00:08:56,819
thing it's basically analogous to the

137
00:08:54,089 --> 00:09:00,510
last event ID thing that's already built

138
00:08:56,820 --> 00:09:03,529
into a server sent events events halls

139
00:09:00,510 --> 00:09:06,480
which is the way you connect push

140
00:09:03,529 --> 00:09:07,649
without WebSockets so it's just giving

141
00:09:06,480 --> 00:09:11,089
you the same functionality over the

142
00:09:07,649 --> 00:09:15,449
WebSockets bread's yep yep thank you

143
00:09:11,089 --> 00:09:18,300
so I personally I think this is ready

144
00:09:15,449 --> 00:09:20,760
for a working group last call

145
00:09:18,300 --> 00:09:26,069
I don't we put that up to the list Jim

146
00:09:20,760 --> 00:09:28,939
how does that work I don't know I have

147
00:09:26,070 --> 00:09:31,410
seen I don't have a lot of context so

148
00:09:28,940 --> 00:09:33,600
let's ask Ron but I think I think

149
00:09:31,410 --> 00:09:44,399
probably just send it out to the list

150
00:09:33,600 --> 00:09:47,250
okay sounds good okay great

151
00:09:44,399 --> 00:09:49,709
just a point of interest this actually

152
00:09:47,250 --> 00:09:51,990
other than the push stuff is has been

153
00:09:49,709 --> 00:09:54,439
implemented in the server side at fast

154
00:09:51,990 --> 00:09:56,940
mail and in the cyrus server and

155
00:09:54,440 --> 00:09:59,160
hopefully we will start to have a client

156
00:09:56,940 --> 00:10:04,339
side at least for testing purposes

157
00:09:59,160 --> 00:10:13,610
fairly soon so hey thank you thank you

158
00:10:04,339 --> 00:10:13,610
okay next item is calendars

159
00:10:14,030 --> 00:10:24,500
and that will be Neil and I'll train

160
00:10:20,060 --> 00:10:25,839
keepers my decentered process today

161
00:10:24,500 --> 00:10:32,110
[Music]

162
00:10:25,840 --> 00:10:35,210
that's better come on okay so I

163
00:10:32,110 --> 00:10:37,970
published an initial 0-0 draw for this a

164
00:10:35,210 --> 00:10:40,820
while back that was pretty basic there's

165
00:10:37,970 --> 00:10:44,420
still quite a few things to add so I'm

166
00:10:40,820 --> 00:10:46,330
going to give a quick overview of what

167
00:10:44,420 --> 00:10:48,860
this is trying to achieve what the

168
00:10:46,330 --> 00:10:50,720
general data model is and then talk

169
00:10:48,860 --> 00:10:51,890
about something open issues and see if

170
00:10:50,720 --> 00:10:55,730
you've got any people in the room or on

171
00:10:51,890 --> 00:10:58,760
the meet echo that want to put forward

172
00:10:55,730 --> 00:11:01,120
some opinions on those issues so we can

173
00:10:58,760 --> 00:11:06,140
go to the next slide please

174
00:11:01,120 --> 00:11:10,190
so Jess calendar is giving a way to

175
00:11:06,140 --> 00:11:12,650
access calendar data over J map so it's

176
00:11:10,190 --> 00:11:16,490
kind of an equivalent CalDAV much like J

177
00:11:12,650 --> 00:11:19,400
map mail is an equivalent to IMAP but

178
00:11:16,490 --> 00:11:22,040
like in that equivalence more efficient

179
00:11:19,400 --> 00:11:24,410
easier to use more consistent there's a

180
00:11:22,040 --> 00:11:25,520
single setup point and you get access to

181
00:11:24,410 --> 00:11:27,380
all of the different bits of data

182
00:11:25,520 --> 00:11:29,839
without having setup separately or email

183
00:11:27,380 --> 00:11:32,810
your calendar and eventually we'll do

184
00:11:29,839 --> 00:11:35,630
chairs no J map contacts as well this is

185
00:11:32,810 --> 00:11:36,829
just calendars not trying to do tasks or

186
00:11:35,630 --> 00:11:39,560
journal entries which you can do with

187
00:11:36,830 --> 00:11:42,589
card out but is rarely actually part of

188
00:11:39,560 --> 00:11:44,930
the same system in practice so doesn't

189
00:11:42,589 --> 00:11:45,980
actually I think main since necessary

190
00:11:44,930 --> 00:11:47,630
between the same document you can always

191
00:11:45,980 --> 00:11:50,780
add that as a separate J map extension

192
00:11:47,630 --> 00:11:54,170
with its own capability later and just

193
00:11:50,780 --> 00:11:55,699
like with the male spec we want to be

194
00:11:54,170 --> 00:11:57,920
able to provide access to the same date

195
00:11:55,700 --> 00:12:00,110
of are both CalDAV and J map Kalen

196
00:11:57,920 --> 00:12:02,300
doesn't have it be a consistent view so

197
00:12:00,110 --> 00:12:03,589
that you can use both clients at the

198
00:12:02,300 --> 00:12:05,689
same time and there's not great paths

199
00:12:03,589 --> 00:12:09,050
because nothing can is going to be able

200
00:12:05,690 --> 00:12:10,580
to cut over overnight so yes we don't

201
00:12:09,050 --> 00:12:11,569
want to radically change the data model

202
00:12:10,580 --> 00:12:13,670
so that's not possible

203
00:12:11,570 --> 00:12:15,770
we're going to use jazz calendar for the

204
00:12:13,670 --> 00:12:19,370
event data model this is in last call

205
00:12:15,770 --> 00:12:22,670
over in collects its JSON representation

206
00:12:19,370 --> 00:12:24,560
of calendar data that's much nice to

207
00:12:22,670 --> 00:12:26,900
work with it's again hopefully an

208
00:12:24,560 --> 00:12:27,949
eventual successor to iCalendar it's if

209
00:12:26,900 --> 00:12:29,689
you've not seen that

210
00:12:27,950 --> 00:12:32,240
go have a look at the calyx stuff if

211
00:12:29,690 --> 00:12:36,260
you're interested okay let's move on

212
00:12:32,240 --> 00:12:39,320
next slide so just quick overview of the

213
00:12:36,260 --> 00:12:42,200
general data model so an account here is

214
00:12:39,320 --> 00:12:44,840
a J map account which is kind of a

215
00:12:42,200 --> 00:12:46,820
consistency model it's saying within an

216
00:12:44,840 --> 00:12:48,800
account you have properties that must be

217
00:12:46,820 --> 00:12:51,050
enforced like unique IDs within that

218
00:12:48,800 --> 00:12:52,550
account and be able to do certain things

219
00:12:51,050 --> 00:12:53,900
as transactions within an account where

220
00:12:52,550 --> 00:12:57,439
there isn't that requirement across

221
00:12:53,900 --> 00:12:59,480
accounts so you have an account that

222
00:12:57,440 --> 00:13:01,850
represents calendar users so in a shared

223
00:12:59,480 --> 00:13:04,190
system you might have an awful lot of

224
00:13:01,850 --> 00:13:06,250
these this could be an individual it

225
00:13:04,190 --> 00:13:08,960
could be a resource it could be a

226
00:13:06,250 --> 00:13:11,270
location a room anything scheduled

227
00:13:08,960 --> 00:13:14,020
you've build query this with standard J

228
00:13:11,270 --> 00:13:18,140
map methods so that you can for example

229
00:13:14,020 --> 00:13:20,329
query for search for a room if you have

230
00:13:18,140 --> 00:13:23,390
permission to see that and then from

231
00:13:20,330 --> 00:13:25,340
there the calendar user object gives you

232
00:13:23,390 --> 00:13:27,530
an account ID where you can fetch the

233
00:13:25,340 --> 00:13:34,010
calendar and the events to see all query

234
00:13:27,530 --> 00:13:36,880
the availability on that resource so yes

235
00:13:34,010 --> 00:13:39,380
so if you have a simple server it can

236
00:13:36,880 --> 00:13:40,460
can just support a single user it

237
00:13:39,380 --> 00:13:41,960
doesn't have to worry about the calendar

238
00:13:40,460 --> 00:13:44,090
user stuff or anything you just get the

239
00:13:41,960 --> 00:13:45,770
calendaring calendar events data but for

240
00:13:44,090 --> 00:13:47,270
anything that's doing more sophisticated

241
00:13:45,770 --> 00:13:49,280
shared use the calendar calendaring

242
00:13:47,270 --> 00:13:52,730
you'll have this kind of top-level

243
00:13:49,280 --> 00:13:53,959
directory of calendar entities which

244
00:13:52,730 --> 00:13:55,430
then reference the different accounts

245
00:13:53,960 --> 00:13:59,270
for the actual calendar data for that

246
00:13:55,430 --> 00:14:00,859
entity that's the demo overview it's

247
00:13:59,270 --> 00:14:03,079
anyone have any comments or stuff they

248
00:14:00,860 --> 00:14:05,630
want to say on that

249
00:14:03,080 --> 00:14:07,460
I think this Maps fairly cleanly to Cal

250
00:14:05,630 --> 00:14:08,870
dev if you have an experience with that

251
00:14:07,460 --> 00:14:10,880
the calendar users are different

252
00:14:08,870 --> 00:14:13,100
principles is that right Ken and then

253
00:14:10,880 --> 00:14:16,880
yeah the calendar data would be within

254
00:14:13,100 --> 00:14:19,580
that but in Calif I have a question how

255
00:14:16,880 --> 00:14:21,410
are shared calendars handled how a

256
00:14:19,580 --> 00:14:25,190
calendars what's right I miss how are

257
00:14:21,410 --> 00:14:30,020
they handled these you know so users use

258
00:14:25,190 --> 00:14:34,310
disjoint calendars yes so an account is

259
00:14:30,020 --> 00:14:36,860
the kind of a data consistency thing

260
00:14:34,310 --> 00:14:38,750
like you can only have a calendar event

261
00:14:36,860 --> 00:14:40,310
with a particular UID can only exist

262
00:14:38,750 --> 00:14:41,290
once within an account but it may exist

263
00:14:40,310 --> 00:14:44,770
in different accounts

264
00:14:41,290 --> 00:14:46,750
so in this example maybe the accountant

265
00:14:44,770 --> 00:14:47,199
left is my calendar data and the one on

266
00:14:46,750 --> 00:14:49,440
the right

267
00:14:47,200 --> 00:14:53,530
corresponds to Ken's he could share

268
00:14:49,440 --> 00:14:56,410
access to his data to me so I could see

269
00:14:53,530 --> 00:14:57,699
both accounts and I can but I might look

270
00:14:56,410 --> 00:14:59,980
at their sharing permissions are done on

271
00:14:57,700 --> 00:15:01,240
a per calendar basis so he could share

272
00:14:59,980 --> 00:15:03,130
one of those calendars but not the other

273
00:15:01,240 --> 00:15:05,320
one for example or you could share one

274
00:15:03,130 --> 00:15:07,420
vide only and one just read free/busy so

275
00:15:05,320 --> 00:15:16,540
I can see these busy but I can't see all

276
00:15:07,420 --> 00:15:20,170
his information so my sense yes okay so

277
00:15:16,540 --> 00:15:22,930
I'm just going to some of the open

278
00:15:20,170 --> 00:15:27,670
issues here see if there's any news in

279
00:15:22,930 --> 00:15:31,569
the room so we've sanded GMAT methods

280
00:15:27,670 --> 00:15:33,670
you have calendar event is a datatype

281
00:15:31,570 --> 00:15:36,190
which represents an event and you'll be

282
00:15:33,670 --> 00:15:37,990
able to get it by ID and normally you

283
00:15:36,190 --> 00:15:39,430
can fetch changes which tells you the

284
00:15:37,990 --> 00:15:42,010
IDS of objects that have been created

285
00:15:39,430 --> 00:15:45,569
update or destroyed since your current

286
00:15:42,010 --> 00:15:47,950
state in the client we're going to want

287
00:15:45,570 --> 00:15:51,100
so there's a sophisticated calendar

288
00:15:47,950 --> 00:15:52,510
clients will be able to get an event

289
00:15:51,100 --> 00:15:54,520
that has a recurrence rule and

290
00:15:52,510 --> 00:15:57,250
recurrence exceptions and just expand

291
00:15:54,520 --> 00:15:59,439
that itself in the client to know when

292
00:15:57,250 --> 00:16:03,040
it's actually the occurrences are but I

293
00:15:59,440 --> 00:16:04,510
think that we want a option when you

294
00:16:03,040 --> 00:16:05,980
query the events to ask the server to

295
00:16:04,510 --> 00:16:09,310
the expansion for you which will allow

296
00:16:05,980 --> 00:16:10,660
very simple kind of probably not hole

297
00:16:09,310 --> 00:16:12,400
clients but people just want to

298
00:16:10,660 --> 00:16:14,530
integrate with calendar data to be able

299
00:16:12,400 --> 00:16:16,030
to not worry about some of the more

300
00:16:14,530 --> 00:16:19,000
complicated bits and still get the data

301
00:16:16,030 --> 00:16:23,319
they need so the question I have is

302
00:16:19,000 --> 00:16:24,730
whether we want to also let they have

303
00:16:23,320 --> 00:16:26,830
some kind of mode that lets you get the

304
00:16:24,730 --> 00:16:28,390
changes whilst having the expanded

305
00:16:26,830 --> 00:16:30,250
events so the trouble is there could be

306
00:16:28,390 --> 00:16:31,510
infinite expanded events so there could

307
00:16:30,250 --> 00:16:33,160
be an infinite number of changes if you

308
00:16:31,510 --> 00:16:36,250
change you're going event and you're

309
00:16:33,160 --> 00:16:39,189
fetching the expanded ones so the only

310
00:16:36,250 --> 00:16:42,240
way I could think of this working was if

311
00:16:39,190 --> 00:16:47,140
you had some requirement that the IDS of

312
00:16:42,240 --> 00:16:49,330
single of occurrences are the prefix of

313
00:16:47,140 --> 00:16:51,400
that ID is the same as the ID of the

314
00:16:49,330 --> 00:16:54,610
master thing master event which would

315
00:16:51,400 --> 00:16:56,019
then come through in your / changes but

316
00:16:54,610 --> 00:16:57,790
pretty expensive processes you have to

317
00:16:56,019 --> 00:16:59,950
not just do a lookup but scan everything

318
00:16:57,790 --> 00:17:01,660
for prefix matches and also breaks the

319
00:16:59,950 --> 00:17:03,610
idea that IDs have no semantic meaning

320
00:17:01,660 --> 00:17:05,319
to the client so I think my inclination

321
00:17:03,610 --> 00:17:07,510
is just to say if you're asking the

322
00:17:05,319 --> 00:17:09,250
server to expand events you don't get

323
00:17:07,510 --> 00:17:11,740
Delta changes you still know that

324
00:17:09,250 --> 00:17:12,760
something's changed because but at that

325
00:17:11,740 --> 00:17:15,040
point you just have to evaluate your

326
00:17:12,760 --> 00:17:16,420
entire case and ask again this is

327
00:17:15,040 --> 00:17:18,849
probably gonna give me simply simple

328
00:17:16,420 --> 00:17:21,400
clients anyway so I don't think we too

329
00:17:18,849 --> 00:17:32,049
much data anyone someone stepped up yet

330
00:17:21,400 --> 00:17:34,030
Mike here we go I'd say CalDAV has a

331
00:17:32,049 --> 00:17:37,450
form of expanded query but it's pretty

332
00:17:34,030 --> 00:17:39,100
useless actually it it assumes that the

333
00:17:37,450 --> 00:17:40,870
client could do almost nothing and for

334
00:17:39,100 --> 00:17:43,928
some reason turned everything into UTC

335
00:17:40,870 --> 00:17:45,370
and things the the expanded query I

336
00:17:43,929 --> 00:17:49,990
would like to have seen is one that

337
00:17:45,370 --> 00:17:53,590
treated the instances essentially as as

338
00:17:49,990 --> 00:17:57,549
I as a separate event you know a fully

339
00:17:53,590 --> 00:18:00,340
populated event that looked much like

340
00:17:57,549 --> 00:18:03,879
the master event but with the

341
00:18:00,340 --> 00:18:06,790
appropriate time and date in it but we I

342
00:18:03,880 --> 00:18:08,230
my recollections we put that in assuming

343
00:18:06,790 --> 00:18:09,760
that we would have some really simple

344
00:18:08,230 --> 00:18:13,000
client at the other end that could do

345
00:18:09,760 --> 00:18:15,460
almost nothing and in that case I think

346
00:18:13,000 --> 00:18:17,080
I don't think we need to worry too much

347
00:18:15,460 --> 00:18:18,880
about this infinite changes thing are

348
00:18:17,080 --> 00:18:23,340
you delivering the events is probably

349
00:18:18,880 --> 00:18:25,450
enough yeah thanks Mike yeah I agree and

350
00:18:23,340 --> 00:18:29,020
certainly in terms of the options I plan

351
00:18:25,450 --> 00:18:30,580
to add is yes you can ask the server to

352
00:18:29,020 --> 00:18:32,139
expand events and if you do ask it you

353
00:18:30,580 --> 00:18:33,370
can optionally also ask it to change it

354
00:18:32,140 --> 00:18:34,929
to UTC if you don't want to deal with

355
00:18:33,370 --> 00:18:36,459
time zones as well but that's optional

356
00:18:34,929 --> 00:18:40,830
so you can get them with the time zones

357
00:18:36,460 --> 00:18:43,480
but expanded if if that's what you want

358
00:18:40,830 --> 00:18:47,918
which i think is what you're asking can

359
00:18:43,480 --> 00:18:50,559
can register I agree are you an having

360
00:18:47,919 --> 00:18:52,809
expansion done in changes it seems like

361
00:18:50,559 --> 00:18:55,750
it might be more apropos to the query

362
00:18:52,809 --> 00:18:57,340
method show me the expanded results

363
00:18:55,750 --> 00:19:00,669
within a certain time period kind of

364
00:18:57,340 --> 00:19:03,280
thing seems more useful than having it

365
00:19:00,669 --> 00:19:04,990
expand a recurrence rule just because I

366
00:19:03,280 --> 00:19:05,870
changed the title in a never ending

367
00:19:04,990 --> 00:19:10,250
event

368
00:19:05,870 --> 00:19:12,350
yeah sorry I I think yeah I think maybe

369
00:19:10,250 --> 00:19:14,870
kind of consensus here that we don't

370
00:19:12,350 --> 00:19:16,668
need if you if you're doing expansion on

371
00:19:14,870 --> 00:19:19,010
the server you don't get the exact

372
00:19:16,669 --> 00:19:21,020
changes whereas if you're not it's it's

373
00:19:19,010 --> 00:19:23,779
trivial to do the actual changes like we

374
00:19:21,020 --> 00:19:25,429
normally do in J map the way will work

375
00:19:23,779 --> 00:19:28,370
yes with expansion you'll do a calendar

376
00:19:25,429 --> 00:19:30,380
event query and say expand this and the

377
00:19:28,370 --> 00:19:32,029
IDS will get back will be IDs for the

378
00:19:30,380 --> 00:19:33,919
expanded events rather than for the

379
00:19:32,029 --> 00:19:35,299
master event you get multiple ones you

380
00:19:33,919 --> 00:19:37,250
have to time range the query if you're

381
00:19:35,299 --> 00:19:38,600
doing expansion you can't obviously ask

382
00:19:37,250 --> 00:19:40,970
for everything cuz it could be infinite

383
00:19:38,600 --> 00:19:42,740
and then you just ask those IDs or the

384
00:19:40,970 --> 00:19:45,980
standard get and it will serve return

385
00:19:42,740 --> 00:19:47,960
you like Mike said the full event as

386
00:19:45,980 --> 00:19:53,330
though it were that instance of it with

387
00:19:47,960 --> 00:19:55,340
the right date and everything okay I

388
00:19:53,330 --> 00:19:56,418
think happy that let's move on to next

389
00:19:55,340 --> 00:20:01,100
one

390
00:19:56,419 --> 00:20:04,399
what was this oh yeah okay so the

391
00:20:01,100 --> 00:20:06,260
calendar event object is representing an

392
00:20:04,399 --> 00:20:08,120
event and as I mentioned at the

393
00:20:06,260 --> 00:20:10,669
beginning this is basically a giant

394
00:20:08,120 --> 00:20:12,830
object which is data format puts in last

395
00:20:10,669 --> 00:20:14,659
call and almost finished but there's a

396
00:20:12,830 --> 00:20:17,299
few extra properties that specific J map

397
00:20:14,659 --> 00:20:19,820
on it its ID which is its ID within J

398
00:20:17,299 --> 00:20:22,190
map calendar ID the idea the calendar it

399
00:20:19,820 --> 00:20:27,408
belongs to and possibly will let you

400
00:20:22,190 --> 00:20:28,789
request UTC start which is what we

401
00:20:27,409 --> 00:20:30,740
mentioned before the server would

402
00:20:28,789 --> 00:20:32,330
calculate what the UTC start is giving

403
00:20:30,740 --> 00:20:34,279
current times and information obviously

404
00:20:32,330 --> 00:20:36,350
we don't store it as UTC in the server

405
00:20:34,279 --> 00:20:39,799
because timezones can and do change at

406
00:20:36,350 --> 00:20:42,139
any point but if the client wants to

407
00:20:39,799 --> 00:20:43,760
request it they can ask for what it is

408
00:20:42,140 --> 00:20:46,220
given current information

409
00:20:43,760 --> 00:20:47,690
there's no we're not expecting the

410
00:20:46,220 --> 00:20:48,919
server to market has changed if times

411
00:20:47,690 --> 00:20:50,360
and information change so anything like

412
00:20:48,919 --> 00:20:53,000
that though this is can be clearly

413
00:20:50,360 --> 00:20:54,500
marked computed property so given that

414
00:20:53,000 --> 00:20:57,350
we have these extra properties to add

415
00:20:54,500 --> 00:20:58,880
but J's calendar can be extended with

416
00:20:57,350 --> 00:21:00,320
arbitrary action properties we have a

417
00:20:58,880 --> 00:21:02,990
kind of name spacing issue because

418
00:21:00,320 --> 00:21:05,120
they're all in the same namespace so I

419
00:21:02,990 --> 00:21:07,100
can't see two options here and I think

420
00:21:05,120 --> 00:21:08,840
what's been suggested to me is the but

421
00:21:07,100 --> 00:21:10,490
the best thing is guest calendar will

422
00:21:08,840 --> 00:21:12,168
have a registry of property names and

423
00:21:10,490 --> 00:21:13,610
we'll just reserve any ones that we want

424
00:21:12,169 --> 00:21:15,230
to use within J map so that they're not

425
00:21:13,610 --> 00:21:16,760
used in Jeff's calendar and so if you

426
00:21:15,230 --> 00:21:17,899
see those that came up anything else is

427
00:21:16,760 --> 00:21:19,549
Jay's calendar and just gets written

428
00:21:17,899 --> 00:21:21,229
straight through to the object

429
00:21:19,549 --> 00:21:24,889
the other alternative I see is we define

430
00:21:21,230 --> 00:21:26,929
exactly which ones we expect we jairs

431
00:21:24,890 --> 00:21:29,090
calendar and you have to prefix custom :

432
00:21:26,929 --> 00:21:30,110
or something to access the others but as

433
00:21:29,090 --> 00:21:31,459
soon as I heard of the registry idea I

434
00:21:30,110 --> 00:21:33,740
was like oh yes that's that's probably

435
00:21:31,460 --> 00:21:35,409
much better way of doing it so that's

436
00:21:33,740 --> 00:21:37,309
why I plan to do is anyone got any

437
00:21:35,409 --> 00:21:40,789
comments on that I see general nodding

438
00:21:37,309 --> 00:21:43,700
in the room for the registry yeah okay I

439
00:21:40,789 --> 00:21:49,908
think that's straightforward them so

440
00:21:43,700 --> 00:21:52,399
from move on to the next shoe okay so

441
00:21:49,909 --> 00:21:54,890
this is just a kind of a query should we

442
00:21:52,399 --> 00:21:56,360
allow an event within an account to

443
00:21:54,890 --> 00:21:58,669
belong to multiple calendars in that

444
00:21:56,360 --> 00:22:00,529
account so this is kind of treating the

445
00:21:58,669 --> 00:22:03,679
calendars more like labels and folders

446
00:22:00,529 --> 00:22:05,929
if you like so a bit analogous to how

447
00:22:03,679 --> 00:22:07,940
you can do that with mail potentially if

448
00:22:05,929 --> 00:22:10,549
you want to with with gamer which is a

449
00:22:07,940 --> 00:22:11,990
bit more flexible and powerful and I was

450
00:22:10,549 --> 00:22:14,059
kind of thinking that I liked the idea

451
00:22:11,990 --> 00:22:15,620
of the symmetry but I think overall I

452
00:22:14,059 --> 00:22:19,010
don't think this is a good idea if we

453
00:22:15,620 --> 00:22:20,959
scroll down as a few more cons here one

454
00:22:19,010 --> 00:22:22,789
of main troubles is calendar it belongs

455
00:22:20,960 --> 00:22:24,890
to us various properties like what are

456
00:22:22,789 --> 00:22:26,510
the default alerts this calendar it's

457
00:22:24,890 --> 00:22:28,610
quite common to have different ones for

458
00:22:26,510 --> 00:22:30,830
different calendars what's the time zone

459
00:22:28,610 --> 00:22:33,439
for this calendar potentially and ACLs

460
00:22:30,830 --> 00:22:34,850
and so if an event is in multiple for

461
00:22:33,440 --> 00:22:37,490
example do you get the alerts from all

462
00:22:34,850 --> 00:22:41,449
of the different calendars or just one

463
00:22:37,490 --> 00:22:42,980
it gets a bit more complicated and the

464
00:22:41,450 --> 00:22:44,750
kind of the bigger downside to me is

465
00:22:42,980 --> 00:22:46,490
just that no one seems to be doing this

466
00:22:44,750 --> 00:22:48,620
even with their own proprietary models

467
00:22:46,490 --> 00:22:51,020
so a it's going to be harder for

468
00:22:48,620 --> 00:22:52,789
existing clients to adopt game at

469
00:22:51,020 --> 00:22:54,889
calendars if this is something in there

470
00:22:52,789 --> 00:22:57,140
and secondly actually is there any

471
00:22:54,890 --> 00:23:00,289
demand for this or is it just more

472
00:22:57,140 --> 00:23:02,570
complicated and it seems adding

473
00:23:00,289 --> 00:23:04,010
complexity when there's no demand is and

474
00:23:02,570 --> 00:23:05,899
the biggest con as well potentially it

475
00:23:04,010 --> 00:23:08,510
doesn't actually map very easily to

476
00:23:05,899 --> 00:23:10,158
CalDAV because Cal that doesn't support

477
00:23:08,510 --> 00:23:12,230
this and explicitly you cannot have the

478
00:23:10,159 --> 00:23:14,020
same scheduled UID in different

479
00:23:12,230 --> 00:23:16,789
calendars in the same accounting car dev

480
00:23:14,020 --> 00:23:20,149
but run your I think more proponent of

481
00:23:16,789 --> 00:23:23,480
this yeah you can have a non-scheduled

482
00:23:20,149 --> 00:23:27,439
UID in multiple calendars in Cal dev but

483
00:23:23,480 --> 00:23:31,730
one of the one of the big issues is that

484
00:23:27,440 --> 00:23:33,650
this does kind of map Pakal dev or the

485
00:23:31,730 --> 00:23:36,110
related issue with cal def that if you

486
00:23:33,650 --> 00:23:38,540
move something in a client the client

487
00:23:36,110 --> 00:23:39,860
then has to calculate a move command on

488
00:23:38,540 --> 00:23:41,450
the server rather than being able to

489
00:23:39,860 --> 00:23:43,429
upload the new one and then delete the

490
00:23:41,450 --> 00:23:45,220
old one or you've got a race condition

491
00:23:43,430 --> 00:23:47,300
where you have to delete the old one

492
00:23:45,220 --> 00:23:49,120
there's a bunch of different ways in

493
00:23:47,300 --> 00:23:53,780
which you could wind up with the data in

494
00:23:49,120 --> 00:23:55,909
two different calendars so I think it's

495
00:23:53,780 --> 00:23:57,770
it's cleaner and clearer and the server

496
00:23:55,910 --> 00:23:59,900
can always just reject an attempt to set

497
00:23:57,770 --> 00:24:05,210
multiple calendars if it doesn't support

498
00:23:59,900 --> 00:24:06,050
it I didn't quite further but I I mean I

499
00:24:05,210 --> 00:24:08,120
think I got the UM

500
00:24:06,050 --> 00:24:09,440
you are still in favor of having support

501
00:24:08,120 --> 00:24:12,080
for multiple calendars for an event I

502
00:24:09,440 --> 00:24:13,220
wasn't quite sure why I mean J map to

503
00:24:12,080 --> 00:24:14,750
move it between counters is just an

504
00:24:13,220 --> 00:24:16,610
update the calendar ID property so it's

505
00:24:14,750 --> 00:24:19,760
very simple and it's a single command

506
00:24:16,610 --> 00:24:22,010
there's no create and then destroy yeah

507
00:24:19,760 --> 00:24:25,250
but a Cal dev client talking to it

508
00:24:22,010 --> 00:24:28,129
similarly particularly because something

509
00:24:25,250 --> 00:24:29,720
could wind up with the same ID I think

510
00:24:28,130 --> 00:24:31,190
you could reject an attempt to set

511
00:24:29,720 --> 00:24:33,860
something with the same ID that has

512
00:24:31,190 --> 00:24:36,950
different content in a different

513
00:24:33,860 --> 00:24:38,570
calendar with this already exists but if

514
00:24:36,950 --> 00:24:40,930
it has exactly the same content it

515
00:24:38,570 --> 00:24:43,580
should just become a second calendar ID

516
00:24:40,930 --> 00:24:47,390
because that way you it's easier to

517
00:24:43,580 --> 00:24:49,580
recover from data being restored into

518
00:24:47,390 --> 00:24:51,320
another calendar that's in the same

519
00:24:49,580 --> 00:24:52,510
namespace and a bunch of conditions like

520
00:24:51,320 --> 00:24:55,520
that

521
00:24:52,510 --> 00:24:57,740
how would you map that to caldo though

522
00:24:55,520 --> 00:25:01,430
like if it's a scheduled event you're

523
00:24:57,740 --> 00:25:04,130
not allowed to do that in Calif yeah if

524
00:25:01,430 --> 00:25:08,150
assuming the server actually enforces

525
00:25:04,130 --> 00:25:09,710
that restriction right you would you

526
00:25:08,150 --> 00:25:13,940
would then enforce the same restriction

527
00:25:09,710 --> 00:25:15,860
if was a scheduled event but we

528
00:25:13,940 --> 00:25:18,620
certainly we've run into issues with our

529
00:25:15,860 --> 00:25:20,209
implementation and clients that don't

530
00:25:18,620 --> 00:25:25,070
like the idea of an event not being

531
00:25:20,210 --> 00:25:28,640
Eldar exists in multiple calendars on

532
00:25:25,070 --> 00:25:30,500
the Cal dev level will keep Bron there

533
00:25:28,640 --> 00:25:33,890
but also recognize Ken how about that

534
00:25:30,500 --> 00:25:37,720
yeah ken Murchison so Ron when you say

535
00:25:33,890 --> 00:25:40,850
our clients are you talking about our

536
00:25:37,720 --> 00:25:41,420
our UI or actual cab that Cal deaf

537
00:25:40,850 --> 00:25:44,120
clients have

538
00:25:41,420 --> 00:25:45,620
the problem not challenged Calvet plants

539
00:25:44,120 --> 00:25:49,820
having issues talking to our CalDAV

540
00:25:45,620 --> 00:25:51,560
server that it rejected the event being

541
00:25:49,820 --> 00:25:54,260
credible hopeful telling us because they

542
00:25:51,560 --> 00:25:56,149
would try and upload it when accounting

543
00:25:54,260 --> 00:25:59,390
for deleting the old well other than

544
00:25:56,150 --> 00:26:01,840
copy of fun things that I remove I mean

545
00:25:59,390 --> 00:26:05,920
the fact that the copy command exists LF

546
00:26:01,840 --> 00:26:11,270
you can't use it within a one account

547
00:26:05,920 --> 00:26:12,950
yes and our server disallows it for the

548
00:26:11,270 --> 00:26:14,540
the reason Neil mentioned earlier that

549
00:26:12,950 --> 00:26:19,070
with scheduled events they can only be

550
00:26:14,540 --> 00:26:22,280
on one calendar yeah that would be k-map

551
00:26:19,070 --> 00:26:27,470
compatible I believe other other vendors

552
00:26:22,280 --> 00:26:28,910
do the same thing one UID per users set

553
00:26:27,470 --> 00:26:30,890
of calendars now if you got something

554
00:26:28,910 --> 00:26:33,320
shared or whatnot that might change

555
00:26:30,890 --> 00:26:36,190
things slightly but I'm not sure with

556
00:26:33,320 --> 00:26:38,780
the use cases and maybe I'm just a dunce

557
00:26:36,190 --> 00:26:40,700
corrected discontinuity between because

558
00:26:38,780 --> 00:26:42,139
you can have the same event on account

559
00:26:40,700 --> 00:26:45,470
of the shed into your space for another

560
00:26:42,140 --> 00:26:47,680
user but you can't have a the same event

561
00:26:45,470 --> 00:26:51,260
on two calendars within your own user

562
00:26:47,680 --> 00:26:53,120
the use cases mrs. Barry the use cases I

563
00:26:51,260 --> 00:26:55,250
share a calendar with you and I share a

564
00:26:53,120 --> 00:26:57,770
different calendar with Ron and I want

565
00:26:55,250 --> 00:27:02,630
you both to see the same vent so I put

566
00:26:57,770 --> 00:27:05,120
it in both calendars so it's in mmm and

567
00:27:02,630 --> 00:27:07,580
of course that's that's a contrived use

568
00:27:05,120 --> 00:27:11,750
case but if you make it a little more

569
00:27:07,580 --> 00:27:14,419
complicated it's a real use case it's

570
00:27:11,750 --> 00:27:16,070
somewhat contrived but yes iced it is

571
00:27:14,420 --> 00:27:18,980
based in reality it's like I can kind of

572
00:27:16,070 --> 00:27:20,810
see maybe we'll take this one to the

573
00:27:18,980 --> 00:27:22,610
list then and see there's some wider

574
00:27:20,810 --> 00:27:23,720
feedback given that I think I'll be to

575
00:27:22,610 --> 00:27:26,060
me will not currently in the room that

576
00:27:23,720 --> 00:27:30,710
have opinions that someone else wants to

577
00:27:26,060 --> 00:27:33,649
speak go ahead I was just trying to

578
00:27:30,710 --> 00:27:37,210
history as I recollect the only reason

579
00:27:33,650 --> 00:27:39,440
for the restriction was that at the time

580
00:27:37,210 --> 00:27:41,750
Cyrus and we're afraid didn't want to

581
00:27:39,440 --> 00:27:43,340
have to limit your scheduling to a

582
00:27:41,750 --> 00:27:46,280
specific calendar they want to do a

583
00:27:43,340 --> 00:27:49,570
search for the UID across all your

584
00:27:46,280 --> 00:27:52,730
calendars to find it but it does it

585
00:27:49,570 --> 00:27:54,320
promises it is inconsistent that all

586
00:27:52,730 --> 00:27:55,190
over the place you can have multiple

587
00:27:54,320 --> 00:28:00,010
events of the

588
00:27:55,190 --> 00:28:03,860
new ID yeah we have this one restriction

589
00:28:00,010 --> 00:28:06,440
yeah I mean J map I think already is

590
00:28:03,860 --> 00:28:10,060
gonna have a restriction of a UID can

591
00:28:06,440 --> 00:28:22,550
only exist once anywhere in the account

592
00:28:10,060 --> 00:28:25,639
so that kind of avoids so you walk has

593
00:28:22,550 --> 00:28:27,590
shared is a different account it's the

594
00:28:25,640 --> 00:28:30,440
client wise it's the same it's the same

595
00:28:27,590 --> 00:28:32,959
deal it looks the same in the end

596
00:28:30,440 --> 00:28:34,730
yeah the client may want to merge those

597
00:28:32,960 --> 00:28:36,320
in its display it's true it's the same

598
00:28:34,730 --> 00:28:38,840
day to initiate the product that they

599
00:28:36,320 --> 00:28:40,189
use what what ended up happening was

600
00:28:38,840 --> 00:28:44,240
that we end up with all the same

601
00:28:40,190 --> 00:28:47,300
problems because of sharing and instead

602
00:28:44,240 --> 00:28:49,130
of solving those issues up front so that

603
00:28:47,300 --> 00:28:50,960
you could allow for the possibility of

604
00:28:49,130 --> 00:28:53,570
the same event turning up in two

605
00:28:50,960 --> 00:28:55,010
different places it was pushed out other

606
00:28:53,570 --> 00:28:58,629
way and said oh won't happen and then

607
00:28:55,010 --> 00:28:58,629
sharing came along and it did happen so

608
00:29:00,400 --> 00:29:06,140
I mean there's all sorts of reasons why

609
00:29:04,700 --> 00:29:07,820
it might happen you might as well I

610
00:29:06,140 --> 00:29:09,470
think Bronk mentioned one what if you

611
00:29:07,820 --> 00:29:11,270
import a whole batch of events so we're

612
00:29:09,470 --> 00:29:15,380
gonna filter every one of them to make

613
00:29:11,270 --> 00:29:17,389
sure saying the UID doesn't turn up this

614
00:29:15,380 --> 00:29:20,170
is Daniel con Gilmore at the mic here I

615
00:29:17,390 --> 00:29:23,240
just want a second what Mike is saying I

616
00:29:20,170 --> 00:29:27,020
regularly run into this problem not via

617
00:29:23,240 --> 00:29:29,720
J map oh just with the calendar files in

618
00:29:27,020 --> 00:29:31,670
a calendar client where I import an

619
00:29:29,720 --> 00:29:34,790
event and then I move it to a different

620
00:29:31,670 --> 00:29:37,490
calendar and then I get an update about

621
00:29:34,790 --> 00:29:40,040
that event with the same UID and I

622
00:29:37,490 --> 00:29:41,360
import it and then it's got a deal with

623
00:29:40,040 --> 00:29:42,530
the fact you've got two things with the

624
00:29:41,360 --> 00:29:44,270
same UID but they're in different

625
00:29:42,530 --> 00:29:45,830
calendars and then I try to merge them

626
00:29:44,270 --> 00:29:47,750
and they're different because it was an

627
00:29:45,830 --> 00:29:51,110
update these things happen in the real

628
00:29:47,750 --> 00:29:54,770
world yes yes and I think the problem

629
00:29:51,110 --> 00:29:56,510
will all arose because because sorry I

630
00:29:54,770 --> 00:29:58,520
wanted to simplify the world right down

631
00:29:56,510 --> 00:30:00,560
to something really easy to deal with

632
00:29:58,520 --> 00:30:05,360
unfortunately the world was more

633
00:30:00,560 --> 00:30:07,100
complicated than that okay I think we'll

634
00:30:05,360 --> 00:30:09,529
take this one to the list afterwards

635
00:30:07,100 --> 00:30:12,230
then and write up a bit more

636
00:30:09,529 --> 00:30:14,120
and because I think this yes definitely

637
00:30:12,230 --> 00:30:16,970
people not in the room on right now that

638
00:30:14,120 --> 00:30:21,340
will have some opinions so I consider

639
00:30:16,970 --> 00:30:24,200
this one unresolved and move on is that

640
00:30:21,340 --> 00:30:25,129
there's enough discussion that it could

641
00:30:24,200 --> 00:30:36,259
be have it on the list

642
00:30:25,129 --> 00:30:37,969
yeah okay let's go okay so this is so

643
00:30:36,259 --> 00:30:39,379
the moment you get main you just get

644
00:30:37,970 --> 00:30:41,990
push events for state changes on the

645
00:30:39,379 --> 00:30:45,469
server but obviously current events can

646
00:30:41,990 --> 00:30:48,499
have alerts and clients can calculate

647
00:30:45,470 --> 00:30:52,639
when those fire themselves but again for

648
00:30:48,499 --> 00:30:54,019
things like web hooks or various other

649
00:30:52,639 --> 00:30:56,269
integrations will just less

650
00:30:54,019 --> 00:30:57,590
sophisticated clients might want the

651
00:30:56,269 --> 00:30:59,450
server to be able to calculate when

652
00:30:57,590 --> 00:31:01,759
should this alert fire and just push an

653
00:30:59,450 --> 00:31:06,200
event to say hey this alerts just gone

654
00:31:01,759 --> 00:31:07,369
off so firstly so if you did that it's

655
00:31:06,200 --> 00:31:08,659
not a state change event will have to

656
00:31:07,369 --> 00:31:10,369
define a different type of push event

657
00:31:08,659 --> 00:31:12,230
that's okay it's already got a type on

658
00:31:10,369 --> 00:31:16,220
it so we can extend that to push

659
00:31:12,230 --> 00:31:19,580
different types down is this something

660
00:31:16,220 --> 00:31:21,080
that we think should be added to the

661
00:31:19,580 --> 00:31:24,350
spec the ability for the server to push

662
00:31:21,080 --> 00:31:25,970
when alerts fires to clients and if so

663
00:31:24,350 --> 00:31:27,259
is this something that's just a

664
00:31:25,970 --> 00:31:30,919
mandatory part of the spec or is it a

665
00:31:27,259 --> 00:31:33,289
separate capability I think of my two

666
00:31:30,919 --> 00:31:34,850
main questions and then there's kind

667
00:31:33,289 --> 00:31:36,408
some kind of syntax Oh question over how

668
00:31:34,850 --> 00:31:37,789
we set it up but that's not actually

669
00:31:36,409 --> 00:31:40,249
that important we can work that out so

670
00:31:37,789 --> 00:31:42,259
my question is yes do we think that's a

671
00:31:40,249 --> 00:31:44,960
capability that we need in servers and

672
00:31:42,259 --> 00:31:47,899
is it a mandatory capability or optional

673
00:31:44,960 --> 00:31:58,850
one anyone got I need someone's from the

674
00:31:47,899 --> 00:32:06,830
floor with a virtual floor it still slow

675
00:31:58,850 --> 00:32:09,139
okay sorry my button with yes I can just

676
00:32:06,830 --> 00:32:11,689
turn myself on but I thought I'd be

677
00:32:09,139 --> 00:32:14,449
polite I think this is the kind of thing

678
00:32:11,690 --> 00:32:16,580
that it's it's actually perfectly fine

679
00:32:14,450 --> 00:32:20,299
to be in a separate capability because

680
00:32:16,580 --> 00:32:22,000
it requires the server to have to keep

681
00:32:20,299 --> 00:32:24,280
track of alarms

682
00:32:22,000 --> 00:32:26,950
yeah it's quite a long time to do this

683
00:32:24,280 --> 00:32:28,210
yeah I I don't think it's a bad thing to

684
00:32:26,950 --> 00:32:30,430
put that kind of thing in a separate

685
00:32:28,210 --> 00:32:32,200
capability we built a nice powerful

686
00:32:30,430 --> 00:32:34,630
capability system and I saw the

687
00:32:32,200 --> 00:32:37,570
discussion about extension mechanisms

688
00:32:34,630 --> 00:32:40,090
rusting shut says as I don't think we've

689
00:32:37,570 --> 00:32:41,919
got into any risk of our extension

690
00:32:40,090 --> 00:32:43,300
mechanism rusting shut but this it's

691
00:32:41,920 --> 00:32:44,740
perfectly fine for this to be a separate

692
00:32:43,300 --> 00:32:48,149
capability and then it's not mandatory

693
00:32:44,740 --> 00:32:48,150
and everyone's happy

694
00:32:48,390 --> 00:32:55,450
can everyone it is a lot of work for the

695
00:32:52,720 --> 00:32:57,970
server I guess my question will be will

696
00:32:55,450 --> 00:32:59,740
the clients even use it are those gonna

697
00:32:57,970 --> 00:33:01,150
do deal alerts on their own anyway it's

698
00:32:59,740 --> 00:33:02,890
kind of like the whole time zone thing

699
00:33:01,150 --> 00:33:04,060
we push time zones the clients to throw

700
00:33:02,890 --> 00:33:05,770
it away immediately and do their own

701
00:33:04,060 --> 00:33:07,659
thing with this be it's in the same

702
00:33:05,770 --> 00:33:09,700
realm I don't have the answer I'm just

703
00:33:07,660 --> 00:33:13,470
asking the notion it's good question I

704
00:33:09,700 --> 00:33:16,990
don't know I I see in the generic case

705
00:33:13,470 --> 00:33:20,950
having probably more people interested

706
00:33:16,990 --> 00:33:22,510
in using it for I said kind of like web

707
00:33:20,950 --> 00:33:24,040
hooks so if you do it create a push

708
00:33:22,510 --> 00:33:25,900
subscription on the server and it does a

709
00:33:24,040 --> 00:33:27,159
call back rather than pushing that

710
00:33:25,900 --> 00:33:29,710
directly to a client it does some other

711
00:33:27,160 --> 00:33:32,530
action and so you can you could use this

712
00:33:29,710 --> 00:33:32,890
system to like if this then that kind of

713
00:33:32,530 --> 00:33:35,260
thing

714
00:33:32,890 --> 00:33:37,120
trigger when an event alert fires it

715
00:33:35,260 --> 00:33:41,020
does some other arbitrary thing off

716
00:33:37,120 --> 00:33:45,820
somewhere else potentially but yeah it's

717
00:33:41,020 --> 00:33:51,400
a bit hazy as a use case I give you okay

718
00:33:45,820 --> 00:33:54,129
Mike go ahead sounds like my argument

719
00:33:51,400 --> 00:33:55,810
against doing too much with with all

720
00:33:54,130 --> 00:33:58,510
arms and things because the actual thing

721
00:33:55,810 --> 00:34:00,669
that's raising the alert probably needs

722
00:33:58,510 --> 00:34:02,080
to know much more about where you are

723
00:34:00,670 --> 00:34:05,410
what you're doing and all the rest of it

724
00:34:02,080 --> 00:34:07,449
then the server is going to know it just

725
00:34:05,410 --> 00:34:08,710
doesn't seem a very useful well the

726
00:34:07,450 --> 00:34:10,570
thing that receives it wouldn't have to

727
00:34:08,710 --> 00:34:11,980
actually do anything or show the user

728
00:34:10,570 --> 00:34:14,800
anything no but if it's not going to do

729
00:34:11,980 --> 00:34:17,918
anything I mean for example if you're if

730
00:34:14,800 --> 00:34:19,870
you're 20 minutes away for an event and

731
00:34:17,918 --> 00:34:21,310
you've got an alert set for five minutes

732
00:34:19,870 --> 00:34:23,649
ahead of the event beto that is

733
00:34:21,310 --> 00:34:25,719
absolutely no use to you you want do you

734
00:34:23,649 --> 00:34:27,250
want the alert 20 minutes in advance and

735
00:34:25,719 --> 00:34:28,469
so you better get moving to get to the

736
00:34:27,250 --> 00:34:32,520
event

737
00:34:28,469 --> 00:34:36,868
so it just seems a not an enormous ly

738
00:34:32,520 --> 00:34:39,270
useful hmm yes I think at least felt for

739
00:34:36,869 --> 00:34:41,040
for regular alerts for users I mean I

740
00:34:39,270 --> 00:34:42,899
can see maybe in process control or

741
00:34:41,040 --> 00:34:46,199
something like that kind of thing which

742
00:34:42,899 --> 00:34:47,879
is not too far-fetched but so maybe we

743
00:34:46,199 --> 00:34:50,578
don't want this in the spec at all then

744
00:34:47,879 --> 00:34:54,690
I don't know if it seems much yeah I've

745
00:34:50,579 --> 00:34:56,099
been client put it off yes I think it's

746
00:34:54,690 --> 00:35:04,140
probably going to end up not being used

747
00:34:56,099 --> 00:35:06,030
much okay and this is kind of say we

748
00:35:04,140 --> 00:35:08,549
leave it out of the core Jayma

749
00:35:06,030 --> 00:35:10,890
accountant respect and if somebody comes

750
00:35:08,550 --> 00:35:12,510
up with a valid use case or strong need

751
00:35:10,890 --> 00:35:13,859
we'll use it as an extension yeah I mean

752
00:35:12,510 --> 00:35:15,270
giving it clearly would be a separate

753
00:35:13,859 --> 00:35:16,529
capability anyway almost doesn't matter

754
00:35:15,270 --> 00:35:18,089
if it's in its own document or a

755
00:35:16,530 --> 00:35:19,829
separate document it's much remoteness

756
00:35:18,089 --> 00:35:20,910
and the other way of looking at it of

757
00:35:19,829 --> 00:35:22,920
course is even if you're doing a

758
00:35:20,910 --> 00:35:25,348
server-side it's essentially having a

759
00:35:22,920 --> 00:35:31,440
client on the server just handling

760
00:35:25,349 --> 00:35:34,619
alerts hmm okay I guess I'll leave it up

761
00:35:31,440 --> 00:35:36,230
for now then which makes life easier and

762
00:35:34,619 --> 00:35:44,359
if yeah someone really wants it will

763
00:35:36,230 --> 00:35:46,920
okay it's at the document for it okay so

764
00:35:44,359 --> 00:35:48,299
we need to be able to send high-tech

765
00:35:46,920 --> 00:35:49,740
messages for scheduling when you do

766
00:35:48,300 --> 00:35:53,190
certain things like you create an event

767
00:35:49,740 --> 00:35:55,680
that has invitees this is how interval

768
00:35:53,190 --> 00:35:58,319
scheduling works so I think the main

769
00:35:55,680 --> 00:36:00,000
question is whether these are just sent

770
00:35:58,319 --> 00:36:02,849
implicitly because you create an event

771
00:36:00,000 --> 00:36:04,560
with them or explicitly I think J map

772
00:36:02,849 --> 00:36:06,869
style definitely tends to be a bit more

773
00:36:04,560 --> 00:36:08,819
explicit but if it's explicit how

774
00:36:06,869 --> 00:36:11,609
explicit is it just an argument to a

775
00:36:08,819 --> 00:36:13,650
calendar event set to say send I tip and

776
00:36:11,609 --> 00:36:15,359
anything that any change you make that

777
00:36:13,650 --> 00:36:16,710
should send 90 thing the server works

778
00:36:15,359 --> 00:36:18,810
out the appropriate thing send and sends

779
00:36:16,710 --> 00:36:21,359
it or is it actually more explicit than

780
00:36:18,810 --> 00:36:27,930
that where the client says do this do

781
00:36:21,359 --> 00:36:30,090
that in some more precise way if that

782
00:36:27,930 --> 00:36:35,368
makes sense

783
00:36:30,090 --> 00:36:38,200
that's my me yeah it's me again yeah my

784
00:36:35,369 --> 00:36:40,510
whole problem with with the I tip thing

785
00:36:38,200 --> 00:36:43,509
about when how you send messages is that

786
00:36:40,510 --> 00:36:46,480
it it it says it has sort of wording

787
00:36:43,510 --> 00:36:48,430
like send a message when something

788
00:36:46,480 --> 00:36:51,520
important changes well well who makes

789
00:36:48,430 --> 00:36:53,680
that decision you know if you change if

790
00:36:51,520 --> 00:36:55,630
you change in a location universe to

791
00:36:53,680 --> 00:36:57,580
another room in a building that may be

792
00:36:55,630 --> 00:37:02,140
extremely important to one of the

793
00:36:57,580 --> 00:37:04,540
attendees it's not up to the to the

794
00:37:02,140 --> 00:37:07,750
organizer whatever to decide what's

795
00:37:04,540 --> 00:37:09,930
important and and so my feeling has

796
00:37:07,750 --> 00:37:12,700
always been that any change or to be

797
00:37:09,930 --> 00:37:14,379
transmitted to the client see a the

798
00:37:12,700 --> 00:37:16,390
question is does the client bother

799
00:37:14,380 --> 00:37:17,770
telling the user that something's

800
00:37:16,390 --> 00:37:20,890
changed and that's much easier to

801
00:37:17,770 --> 00:37:23,160
determine at the client end that the at

802
00:37:20,890 --> 00:37:26,020
the server side or the originating side

803
00:37:23,160 --> 00:37:28,029
yes except for I'm it messages often

804
00:37:26,020 --> 00:37:31,960
will end up in the users mailbox which

805
00:37:28,030 --> 00:37:33,280
is why on this miss Trixie wait isn't

806
00:37:31,960 --> 00:37:37,630
that isn't that just a sort of an

807
00:37:33,280 --> 00:37:42,520
implementation issue it is I think the

808
00:37:37,630 --> 00:37:44,770
main question here though is probably

809
00:37:42,520 --> 00:37:46,330
exactly what misses to send we can't

810
00:37:44,770 --> 00:37:48,609
define exactly because it's going to

811
00:37:46,330 --> 00:37:50,319
depend a bit on what the server wants to

812
00:37:48,609 --> 00:37:53,319
do or what it thinks client wants to do

813
00:37:50,320 --> 00:37:55,660
so perhaps we document those as a best

814
00:37:53,320 --> 00:37:58,630
common practice separate document well

815
00:37:55,660 --> 00:38:00,730
yeah I would agree with that one of the

816
00:37:58,630 --> 00:38:05,140
problems with I tip has been that it

817
00:38:00,730 --> 00:38:07,210
didn't make it absolutely clear it sort

818
00:38:05,140 --> 00:38:08,650
of said you don't you don't have to send

819
00:38:07,210 --> 00:38:10,960
this you don't have to send that so

820
00:38:08,650 --> 00:38:13,600
everybody starts sending everything and

821
00:38:10,960 --> 00:38:16,480
in reality you you could send much more

822
00:38:13,600 --> 00:38:19,299
compact messages than people are sending

823
00:38:16,480 --> 00:38:21,630
and and we should probably encourage

824
00:38:19,300 --> 00:38:21,630
that

825
00:38:24,990 --> 00:38:31,419
can to give another coming yeah I like

826
00:38:29,830 --> 00:38:33,970
what Mike said but I also would say

827
00:38:31,420 --> 00:38:37,270
let's not make the same mistake we made

828
00:38:33,970 --> 00:38:39,700
with kal dev with implicit scheduling

829
00:38:37,270 --> 00:38:40,840
and you have a situation where you're

830
00:38:39,700 --> 00:38:42,279
just trying to move stuff onto a

831
00:38:40,840 --> 00:38:43,540
calendar from an external source and we

832
00:38:42,280 --> 00:38:46,120
start firing off a bunch of events I

833
00:38:43,540 --> 00:38:49,060
think yeah this this should always the

834
00:38:46,120 --> 00:38:51,400
client should always tell us yes do my

835
00:38:49,060 --> 00:38:53,560
scheduling requests or no let's get that

836
00:38:51,400 --> 00:38:55,810
in there from from day one absolutely

837
00:38:53,560 --> 00:38:57,820
always control i I think just the

838
00:38:55,810 --> 00:39:00,400
question really is more about is it just

839
00:38:57,820 --> 00:39:03,610
a simple yes/no send scheduling stuff

840
00:39:00,400 --> 00:39:04,750
for these changes or is it more you send

841
00:39:03,610 --> 00:39:06,850
the changes and you send a separate

842
00:39:04,750 --> 00:39:16,660
method call to say now send these I tip

843
00:39:06,850 --> 00:39:18,430
messages just say yes yes no send

844
00:39:16,660 --> 00:39:19,779
scheduling messages that's probably the

845
00:39:18,430 --> 00:39:21,220
simplest option we'll start with that

846
00:39:19,780 --> 00:39:23,970
men and then see if we come up with use

847
00:39:21,220 --> 00:39:23,970
cases that's not covered

848
00:39:24,120 --> 00:39:28,420
yeah that's kind of where we're getting

849
00:39:27,040 --> 00:39:31,180
to with card up at the moment with the

850
00:39:28,420 --> 00:39:32,620
extra stuff that's in calyx right now

851
00:39:31,180 --> 00:39:35,549
basically gives you that okay on/off

852
00:39:32,620 --> 00:39:38,140
capability so it would match that okay

853
00:39:35,550 --> 00:39:40,720
what one obnoxious thing that showed up

854
00:39:38,140 --> 00:39:43,990
for fast mail users just recently with

855
00:39:40,720 --> 00:39:45,700
this was that if you're missing the

856
00:39:43,990 --> 00:39:50,140
correct ackles on the calendar

857
00:39:45,700 --> 00:39:52,350
scheduling outbox then the CalDAV set

858
00:39:50,140 --> 00:39:56,020
works the PO the footworks

859
00:39:52,350 --> 00:39:59,650
but it just sets a scheduled status 3.8

860
00:39:56,020 --> 00:40:00,850
which means permission denied which at

861
00:39:59,650 --> 00:40:04,270
the moment it's not even mapped through

862
00:40:00,850 --> 00:40:06,160
to jer map so the user can't see that

863
00:40:04,270 --> 00:40:08,009
their scheduling message wasn't sent it

864
00:40:06,160 --> 00:40:10,299
just silently didn't happen for them

865
00:40:08,010 --> 00:40:12,250
yeah that's nasty we can give proper

866
00:40:10,300 --> 00:40:14,530
error messages with J map if you try I

867
00:40:12,250 --> 00:40:16,060
say I want to send I'm a poor whatever I

868
00:40:14,530 --> 00:40:17,680
tip and we can't we can just reject the

869
00:40:16,060 --> 00:40:20,529
whole change and say sorry we can't

870
00:40:17,680 --> 00:40:23,529
because this yeah yeah the difficult

871
00:40:20,530 --> 00:40:25,660
part there is is the whole when a server

872
00:40:23,530 --> 00:40:29,280
rejects anything that's not entirely

873
00:40:25,660 --> 00:40:31,210
correct then the client could lose

874
00:40:29,280 --> 00:40:33,880
significant changes if someone's done a

875
00:40:31,210 --> 00:40:35,830
lot of editing on the event do they want

876
00:40:33,880 --> 00:40:37,900
it to fail to save

877
00:40:35,830 --> 00:40:40,240
I mean that's just an extent up to a

878
00:40:37,900 --> 00:40:42,160
client handle though the client knows

879
00:40:40,240 --> 00:40:44,560
what it's sent it can not just throw it

880
00:40:42,160 --> 00:40:46,839
away if if the server gives a mess error

881
00:40:44,560 --> 00:40:48,009
that's just I this is the message though

882
00:40:46,840 --> 00:40:50,980
that the data was fine but I couldn't

883
00:40:48,010 --> 00:40:52,480
send I tip because of reason the client

884
00:40:50,980 --> 00:40:53,710
can then prompt the user as well do you

885
00:40:52,480 --> 00:40:58,480
want to save this anyway without sending

886
00:40:53,710 --> 00:41:00,670
the messages or what they the difficult

887
00:40:58,480 --> 00:41:05,190
case always to see you walk away or you

888
00:41:00,670 --> 00:41:08,020
you close your client after hitting save

889
00:41:05,190 --> 00:41:10,450
there's nowhere else like you have to

890
00:41:08,020 --> 00:41:12,160
correct the issue before you can save

891
00:41:10,450 --> 00:41:16,450
your data or you have to copy paste it

892
00:41:12,160 --> 00:41:18,220
out into a separate document it's not a

893
00:41:16,450 --> 00:41:22,919
good user experience to not be able to

894
00:41:18,220 --> 00:41:26,410
save the intermediate state somehow

895
00:41:22,920 --> 00:41:28,090
somehow is yeah bit very going if I

896
00:41:26,410 --> 00:41:32,799
don't see any obvious way of doing that

897
00:41:28,090 --> 00:41:40,240
but if you have a suggestion no not not

898
00:41:32,800 --> 00:41:41,790
at 3:00 a.m. but ok so that the issue

899
00:41:40,240 --> 00:41:44,049
Braun's describing has to do with

900
00:41:41,790 --> 00:41:46,570
scheduling on shared calendars which we

901
00:41:44,050 --> 00:41:48,730
all know is a mess and I think it's

902
00:41:46,570 --> 00:41:49,870
incumbent upon us just kind of

903
00:41:48,730 --> 00:41:51,100
straighten that out as part of it I

904
00:41:49,870 --> 00:41:54,640
think that will be much clearer in this

905
00:41:51,100 --> 00:41:56,230
yes and if we can get it right with Jane

906
00:41:54,640 --> 00:41:57,490
of calendars perhaps we can filter some

907
00:41:56,230 --> 00:42:03,580
of that back down to kill that for

908
00:41:57,490 --> 00:42:05,649
legacy systems yeah ok Henry

909
00:42:03,580 --> 00:42:08,250
oh I was just I was just gonna say that

910
00:42:05,650 --> 00:42:15,370
Bron Bron raised the the old issue of

911
00:42:08,250 --> 00:42:18,340
draft events really which was was

912
00:42:15,370 --> 00:42:21,310
shouted down years ago but keeps popping

913
00:42:18,340 --> 00:42:23,350
up again so I mean that would sort of

914
00:42:21,310 --> 00:42:25,870
solve it if you're implicitly creating a

915
00:42:23,350 --> 00:42:28,299
draft event as your as you're working it

916
00:42:25,870 --> 00:42:30,370
will not disappear it'll just be still

917
00:42:28,300 --> 00:42:31,720
draft that's fairly straightforward for

918
00:42:30,370 --> 00:42:33,190
creating if you're updating an existing

919
00:42:31,720 --> 00:42:35,319
one I think gets a bit trickier because

920
00:42:33,190 --> 00:42:37,300
you still need the one that's the

921
00:42:35,320 --> 00:42:39,550
current status plus possibly a draft to

922
00:42:37,300 --> 00:42:41,710
change to it that's a bit well I guess

923
00:42:39,550 --> 00:42:44,830
you can copy it into a draft yeah but

924
00:42:41,710 --> 00:42:46,690
it's then copy it back again okay well

925
00:42:44,830 --> 00:42:48,040
we should maybe have a look at this on

926
00:42:46,690 --> 00:42:49,060
the list of whether there's something we

927
00:42:48,040 --> 00:42:50,440
can do a drafts

928
00:42:49,060 --> 00:42:51,880
she that reminds me to my completely

929
00:42:50,440 --> 00:42:54,490
forgotten mental now maybe want to do

930
00:42:51,880 --> 00:43:01,290
something about having a trash place to

931
00:42:54,490 --> 00:43:03,609
put calendar so I know okay I

932
00:43:01,290 --> 00:43:08,020
implemented it it cost me so many

933
00:43:03,610 --> 00:43:10,510
problems but maybe maybe gone

934
00:43:08,020 --> 00:43:13,560
maybe okay I have got something to say

935
00:43:10,510 --> 00:43:16,030
about the next slide if we all right

936
00:43:13,560 --> 00:43:19,420
I'll just leave you there then yeah

937
00:43:16,030 --> 00:43:21,850
thank you okay this is just about adding

938
00:43:19,420 --> 00:43:23,380
support for the capabilities of MV

939
00:43:21,850 --> 00:43:26,470
availability which is artsy seven nine

940
00:43:23,380 --> 00:43:28,360
five three I think this is definitely

941
00:43:26,470 --> 00:43:37,209
accept the capability and I'm inclined

942
00:43:28,360 --> 00:43:39,460
to punt it to an extension but the work

943
00:43:37,210 --> 00:43:42,820
I do though Asus which is when I you

944
00:43:39,460 --> 00:43:45,670
know we did the soap stuff this is also

945
00:43:42,820 --> 00:43:48,280
P and I finished that and they said

946
00:43:45,670 --> 00:43:49,420
that's all that's all great if we do so

947
00:43:48,280 --> 00:43:51,730
but what we really want to do is

948
00:43:49,420 --> 00:43:54,490
something is Jason and that was a long

949
00:43:51,730 --> 00:43:57,690
time ago and and I think they will be

950
00:43:54,490 --> 00:44:02,979
very interested in this whole train map

951
00:43:57,690 --> 00:44:07,300
thing but they are they really love the

952
00:44:02,980 --> 00:44:09,190
availability so the there's gonna be a

953
00:44:07,300 --> 00:44:11,560
method I'm currently calling calendar

954
00:44:09,190 --> 00:44:13,390
user slash get availability which looks

955
00:44:11,560 --> 00:44:14,799
at your free busy time is your free busy

956
00:44:13,390 --> 00:44:16,930
report essentially I'm going to make

957
00:44:14,800 --> 00:44:18,940
sure that the way that response would

958
00:44:16,930 --> 00:44:20,470
also work once you have support for Via

959
00:44:18,940 --> 00:44:23,080
Rail ability even if you already have it

960
00:44:20,470 --> 00:44:25,029
just you can't set afire J map and I

961
00:44:23,080 --> 00:44:26,590
think and then we we can add this on

962
00:44:25,030 --> 00:44:31,360
extra I think we definitely want to add

963
00:44:26,590 --> 00:44:33,940
it it's just whether we tried twister as

964
00:44:31,360 --> 00:44:36,970
well is that he's already implemented in

965
00:44:33,940 --> 00:44:38,800
a very simple form Apple I think uses it

966
00:44:36,970 --> 00:44:40,629
for their office hours yes we were

967
00:44:38,800 --> 00:44:43,000
experiment here that spasming tarts the

968
00:44:40,630 --> 00:44:45,160
only thing you can set there yeah it

969
00:44:43,000 --> 00:44:53,560
creates of the availability object it's

970
00:44:45,160 --> 00:44:55,450
it's very simple so I'm curious are we

971
00:44:53,560 --> 00:44:57,640
thinking about leaving it out of the the

972
00:44:55,450 --> 00:44:58,839
base spec because we think nobody's

973
00:44:57,640 --> 00:45:00,859
going to use it or because we think it's

974
00:44:58,840 --> 00:45:02,640
too difficult or some

975
00:45:00,859 --> 00:45:05,369
because I think it's quite a bit of

976
00:45:02,640 --> 00:45:10,799
extra complexity to add into the spec

977
00:45:05,369 --> 00:45:14,789
and so I yeah we think about doing the

978
00:45:10,799 --> 00:45:20,720
equivalent I mean if we if we assume

979
00:45:14,789 --> 00:45:24,269
that we can store and one thing is

980
00:45:20,720 --> 00:45:27,149
company or the the my mind's gone blank

981
00:45:24,269 --> 00:45:29,129
the entity types being you know can us

982
00:45:27,150 --> 00:45:32,210
just our events cows just for tasks

983
00:45:29,130 --> 00:45:35,190
counters just availability are we gonna

984
00:45:32,210 --> 00:45:39,630
specify that from the outset so I think

985
00:45:35,190 --> 00:45:41,279
we should and then it becomes real very

986
00:45:39,630 --> 00:45:44,579
easy because you say oh this collection

987
00:45:41,279 --> 00:45:46,170
holds availability I mean that's kind of

988
00:45:44,579 --> 00:45:47,609
implicitly the case at the moment

989
00:45:46,170 --> 00:45:49,260
because there's only events in the

990
00:45:47,609 --> 00:45:50,640
system so a calendar can only contain

991
00:45:49,260 --> 00:45:52,440
events as soon as we add other types yes

992
00:45:50,640 --> 00:45:54,118
we would want to say whether you're

993
00:45:52,440 --> 00:45:56,130
allowed multiple in one calendar or

994
00:45:54,119 --> 00:45:58,589
whether availability has to be in a

995
00:45:56,130 --> 00:46:00,000
separate one you recommend availability

996
00:45:58,589 --> 00:46:04,519
should be complete in a separate

997
00:46:00,000 --> 00:46:07,170
calendar - well I we've gone with CalDAV

998
00:46:04,519 --> 00:46:09,629
keeps causing problems and the reason

999
00:46:07,170 --> 00:46:15,079
they went they did that in CalDAV is

1000
00:46:09,630 --> 00:46:15,079
because there was the danger of people

1001
00:46:15,799 --> 00:46:20,160
simply deleting a calendar because they

1002
00:46:18,480 --> 00:46:23,490
thought it contained only events when it

1003
00:46:20,160 --> 00:46:25,339
contain events and tests and and that

1004
00:46:23,490 --> 00:46:29,578
was the reason they moved away from

1005
00:46:25,339 --> 00:46:31,680
mixed entity types in collections yeah I

1006
00:46:29,579 --> 00:46:32,880
certainly I think Tarson events that was

1007
00:46:31,680 --> 00:46:35,009
a terrible idea that those were mixed

1008
00:46:32,880 --> 00:46:36,359
together into calendars I don't think we

1009
00:46:35,009 --> 00:46:37,680
would do the same with Gerry Matt but as

1010
00:46:36,359 --> 00:46:39,359
I said at the beginning this there's no

1011
00:46:37,680 --> 00:46:41,940
tasks in this moment we're just looking

1012
00:46:39,359 --> 00:46:43,589
events availability is a bit less clear

1013
00:46:41,940 --> 00:46:45,450
in my mind whether that should always be

1014
00:46:43,589 --> 00:46:48,359
in a separate calendar or should be

1015
00:46:45,450 --> 00:46:51,000
combined with a single what well I think

1016
00:46:48,359 --> 00:46:53,220
you run the same problem if it's a real

1017
00:46:51,000 --> 00:46:55,500
thing that people who do queries on a

1018
00:46:53,220 --> 00:46:58,049
collection that are filtered to a

1019
00:46:55,500 --> 00:47:01,140
certain type think that's all there is

1020
00:46:58,049 --> 00:47:04,829
in there and and then they simply delete

1021
00:47:01,140 --> 00:47:06,390
it thinking they're not and so they

1022
00:47:04,829 --> 00:47:09,990
throw away a whole load of other stuff

1023
00:47:06,390 --> 00:47:11,700
well the other like in in J map is the V

1024
00:47:09,990 --> 00:47:13,348
availability things wouldn't have to be

1025
00:47:11,700 --> 00:47:15,118
tied to a calendar at all they belong

1026
00:47:13,349 --> 00:47:17,190
just to the calendar user overall so

1027
00:47:15,119 --> 00:47:18,150
they've just is this an account the only

1028
00:47:17,190 --> 00:47:19,140
reason they'd need to be tied to a

1029
00:47:18,150 --> 00:47:20,400
calendars if you wanted to manage

1030
00:47:19,140 --> 00:47:21,839
permissions separately for different

1031
00:47:20,400 --> 00:47:24,299
people on the availability which you

1032
00:47:21,839 --> 00:47:26,640
probably want yeah you would actually

1033
00:47:24,299 --> 00:47:28,140
yes and the real power of availability

1034
00:47:26,640 --> 00:47:33,269
comes will you present different

1035
00:47:28,140 --> 00:47:38,420
availability to different people so I I

1036
00:47:33,269 --> 00:47:41,189
would I would argue for from the outset

1037
00:47:38,420 --> 00:47:44,249
indicating what type of thing is inside

1038
00:47:41,190 --> 00:47:45,749
a calendar collection and looking making

1039
00:47:44,249 --> 00:47:48,868
that part of the space expect so we

1040
00:47:45,749 --> 00:47:52,738
start off in that that state okay that's

1041
00:47:48,869 --> 00:47:55,739
easy s'matter yep this is Ken again I

1042
00:47:52,739 --> 00:47:57,779
have no strong opinion on single

1043
00:47:55,739 --> 00:47:58,170
entities and calendars but I'm fine

1044
00:47:57,779 --> 00:48:02,430
either way

1045
00:47:58,170 --> 00:48:03,839
as far as availability goes personally I

1046
00:48:02,430 --> 00:48:07,348
would lean towards putting it in the

1047
00:48:03,839 --> 00:48:09,119
base spec because Mike's then keen is

1048
00:48:07,349 --> 00:48:10,710
saying in the past and bronze current

1049
00:48:09,119 --> 00:48:12,690
Kalman and I was standing just because

1050
00:48:10,710 --> 00:48:14,369
free/busy isn't as useful as

1051
00:48:12,690 --> 00:48:16,979
availability is just not just because my

1052
00:48:14,369 --> 00:48:18,829
counter says I'm free 3:00 a.m. doesn't

1053
00:48:16,979 --> 00:48:22,129
really mean I'm available for a meeting

1054
00:48:18,829 --> 00:48:25,009
and I think availability captures that

1055
00:48:22,130 --> 00:48:29,249
yes one when can you schedule with me

1056
00:48:25,009 --> 00:48:31,529
okay I will look again at keeping in the

1057
00:48:29,249 --> 00:48:32,339
base back under certainly at least part

1058
00:48:31,529 --> 00:48:35,279
of it needs to be under a separate

1059
00:48:32,339 --> 00:48:37,319
capability I think but well I can I can

1060
00:48:35,279 --> 00:48:39,650
certainly provide some help with that

1061
00:48:37,319 --> 00:48:42,719
yeah that's great thanks Mike

1062
00:48:39,650 --> 00:48:44,819
ok I think that's I think that's it some

1063
00:48:42,719 --> 00:48:46,200
time I've got been several several

1064
00:48:44,819 --> 00:48:48,719
issues here it sounded like you had a

1065
00:48:46,200 --> 00:48:50,640
good sense of the room on several of

1066
00:48:48,719 --> 00:48:53,279
them but if you could take them all to

1067
00:48:50,640 --> 00:48:55,979
the list and you know we want to confirm

1068
00:48:53,279 --> 00:48:58,920
the consensus there Joel money will do

1069
00:48:55,979 --> 00:49:01,348
that I think oh I bet that's great

1070
00:48:58,920 --> 00:49:02,999
there's one other issue that that's come

1071
00:49:01,349 --> 00:49:04,380
up with this that wasn't on those slides

1072
00:49:02,999 --> 00:49:07,919
that I wanted to just mention to the

1073
00:49:04,380 --> 00:49:10,619
room and that is the idea of per user

1074
00:49:07,920 --> 00:49:15,450
data and what belongs to a user and what

1075
00:49:10,619 --> 00:49:18,059
what is shared between users in IMAP we

1076
00:49:15,450 --> 00:49:20,549
share the scene we have peruse the same

1077
00:49:18,059 --> 00:49:22,890
state and shared everything else in our

1078
00:49:20,549 --> 00:49:24,299
server and there's no way to tell

1079
00:49:22,890 --> 00:49:26,700
well there is because there's an

1080
00:49:24,299 --> 00:49:28,020
annotation that you can query but

1081
00:49:26,700 --> 00:49:29,848
general there's no way to tell which

1082
00:49:28,020 --> 00:49:34,140
parameters are shared where and shared

1083
00:49:29,849 --> 00:49:35,880
in which one's a individual to user yes

1084
00:49:34,140 --> 00:49:37,560
they're quite a few properties will need

1085
00:49:35,880 --> 00:49:39,420
to be per user I guess the main question

1086
00:49:37,560 --> 00:49:41,400
is do we just document which ones those

1087
00:49:39,420 --> 00:49:42,839
are in the spec or does the server get

1088
00:49:41,400 --> 00:49:44,820
to decide in a certain manner in which

1089
00:49:42,839 --> 00:49:46,980
case it would have to advertise which

1090
00:49:44,820 --> 00:49:49,170
ones are per user I was inclined of just

1091
00:49:46,980 --> 00:49:51,990
document which one should be per user in

1092
00:49:49,170 --> 00:50:01,950
a spec but maybe there's other opinions

1093
00:49:51,990 --> 00:50:03,598
on that okay thanks Neil and just a

1094
00:50:01,950 --> 00:50:06,149
reminder of several people who've come

1095
00:50:03,599 --> 00:50:07,770
in blue sheets are right behind Barry

1096
00:50:06,150 --> 00:50:12,680
there please make sure that you've

1097
00:50:07,770 --> 00:50:12,680
signed the blue sheets and Alexi is up

1098
00:50:14,240 --> 00:50:19,680
all right so obviously if this anything

1099
00:50:18,030 --> 00:50:23,839
happens to this document it probably

1100
00:50:19,680 --> 00:50:23,839
will have to be edgy sponsored by Barry

1101
00:50:26,210 --> 00:50:38,280
yes right so I was lucky enough this

1102
00:50:34,440 --> 00:50:41,069
week that I have some sleepless hours

1103
00:50:38,280 --> 00:50:45,210
and I had a chance to think a little bit

1104
00:50:41,069 --> 00:50:46,890
more about so basically the at the

1105
00:50:45,210 --> 00:50:52,380
moment the document only contains the

1106
00:50:46,890 --> 00:50:54,328
basic as my signature verification there

1107
00:50:52,380 --> 00:50:55,890
is one extra thing that might be added

1108
00:50:54,329 --> 00:51:00,329
which I will talk about on the slides

1109
00:50:55,890 --> 00:51:02,848
and advanced feature if there is a

1110
00:51:00,329 --> 00:51:06,329
desire to talk of cooperating server and

1111
00:51:02,849 --> 00:51:09,710
store your private key in the server you

1112
00:51:06,329 --> 00:51:12,569
can do encryption decryption and signing

1113
00:51:09,710 --> 00:51:21,180
top but that's probably separate

1114
00:51:12,569 --> 00:51:23,910
capability yes right so in order to

1115
00:51:21,180 --> 00:51:27,450
report the status as mine status

1116
00:51:23,910 --> 00:51:32,598
response property can be requested and

1117
00:51:27,450 --> 00:51:35,598
it's a string with some simple structure

1118
00:51:32,599 --> 00:51:35,599
yes

1119
00:51:36,970 --> 00:51:42,049
so unknown is when the server cannot

1120
00:51:39,800 --> 00:51:44,120
figure out you know it might be

1121
00:51:42,050 --> 00:51:46,640
multi-part sign message for example but

1122
00:51:44,120 --> 00:51:49,880
of a format that the server doesn't know

1123
00:51:46,640 --> 00:51:54,470
so for example can be like open PGP but

1124
00:51:49,880 --> 00:51:58,640
well this is as man sign is the status

1125
00:51:54,470 --> 00:52:01,970
that server knows it's s/mime signed but

1126
00:51:58,640 --> 00:52:04,279
didn't try to verification yet

1127
00:52:01,970 --> 00:52:08,750
and then once verification is done it's

1128
00:52:04,280 --> 00:52:13,910
either yes mine verified or assigned

1129
00:52:08,750 --> 00:52:18,740
verified or sign failed nil raise the

1130
00:52:13,910 --> 00:52:20,779
good question this week about when does

1131
00:52:18,740 --> 00:52:22,430
the server turn just signed and when

1132
00:52:20,780 --> 00:52:29,420
does the server returns and verified

1133
00:52:22,430 --> 00:52:33,500
sign failed so this is very loosely

1134
00:52:29,420 --> 00:52:36,860
based on my implementation and there if

1135
00:52:33,500 --> 00:52:39,320
you just want a list of messages you

1136
00:52:36,860 --> 00:52:41,390
just return sign if if you want to

1137
00:52:39,320 --> 00:52:44,030
actually view a specific message then

1138
00:52:41,390 --> 00:52:46,400
you will verify it the reason for this

1139
00:52:44,030 --> 00:52:51,070
is verification operation might be quite

1140
00:52:46,400 --> 00:52:51,070
expensive so you want to delay this

1141
00:52:52,090 --> 00:53:01,100
Daniel this is Dan Gilmore I recommend

1142
00:52:58,010 --> 00:53:03,710
cutting down the number of statuses here

1143
00:53:01,100 --> 00:53:06,500
I recommend two statuses only and not

1144
00:53:03,710 --> 00:53:09,610
for the statuses are signed and verified

1145
00:53:06,500 --> 00:53:12,550
and nothing those are the two statuses

1146
00:53:09,610 --> 00:53:15,320
it's not clear to me as a user

1147
00:53:12,550 --> 00:53:18,290
what I gained from learning sign failed

1148
00:53:15,320 --> 00:53:21,170
compared to unknown we found that we had

1149
00:53:18,290 --> 00:53:23,210
the same situation true in D Kim where a

1150
00:53:21,170 --> 00:53:25,160
DCAM signature that doesn't validate

1151
00:53:23,210 --> 00:53:28,100
should not be treated any differently

1152
00:53:25,160 --> 00:53:30,109
than the deccan signature whatsoever I

1153
00:53:28,100 --> 00:53:34,610
know many people do but it's a mistake

1154
00:53:30,110 --> 00:53:37,850
and and as a as a user of an email

1155
00:53:34,610 --> 00:53:39,800
client it is not clear to me that a big

1156
00:53:37,850 --> 00:53:40,970
red warning sign just because there

1157
00:53:39,800 --> 00:53:43,400
happens to be something that looked like

1158
00:53:40,970 --> 00:53:45,020
a mess mime signature makes any sense

1159
00:53:43,400 --> 00:53:47,060
whatsoever because it doesn't defend me

1160
00:53:45,020 --> 00:53:47,690
against an adversary who's trying to

1161
00:53:47,060 --> 00:53:49,609
forge the

1162
00:53:47,690 --> 00:53:53,690
things that just stripped the signature

1163
00:53:49,609 --> 00:53:55,848
and remove the big red warning so so I

1164
00:53:53,690 --> 00:54:00,440
think I think for a cognitive load for

1165
00:53:55,849 --> 00:54:02,329
the users the the only two states you

1166
00:54:00,440 --> 00:54:04,430
want are this has been verified and

1167
00:54:02,329 --> 00:54:05,810
verified needs to cover quite a bit of

1168
00:54:04,430 --> 00:54:06,259
ground more than what you've described

1169
00:54:05,810 --> 00:54:07,849
here

1170
00:54:06,260 --> 00:54:10,310
I think verified needs to cover that the

1171
00:54:07,849 --> 00:54:12,410
timestamp of the signature matches to

1172
00:54:10,310 --> 00:54:14,450
some level the time the date stamp in

1173
00:54:12,410 --> 00:54:15,470
the message that the sender was the same

1174
00:54:14,450 --> 00:54:17,450
as the certificate the certificate

1175
00:54:15,470 --> 00:54:21,439
itself has been validated and so forth

1176
00:54:17,450 --> 00:54:25,490
yes yes most of this is implied slight

1177
00:54:21,440 --> 00:54:28,310
difficulty is the efficiency thing where

1178
00:54:25,490 --> 00:54:33,040
you defer the verification ya know the

1179
00:54:28,310 --> 00:54:36,049
other part is that in my implementation

1180
00:54:33,040 --> 00:54:39,500
if the sender certificate expires it

1181
00:54:36,050 --> 00:54:41,990
moved to sign failed right so but I mean

1182
00:54:39,500 --> 00:54:44,089
we can return this information in some

1183
00:54:41,990 --> 00:54:47,209
other way if it let us see a draft that

1184
00:54:44,089 --> 00:54:49,310
explains how to how to check signatures

1185
00:54:47,210 --> 00:54:53,180
in the context of store-and-forward data

1186
00:54:49,310 --> 00:54:54,380
with expiring certificates because I

1187
00:54:53,180 --> 00:54:55,759
don't think anyone's ever actually

1188
00:54:54,380 --> 00:54:56,960
written that down I have some strong

1189
00:54:55,760 --> 00:54:58,940
opinions about what the right thing to

1190
00:54:56,960 --> 00:55:01,280
do is and that you want to evaluate the

1191
00:54:58,940 --> 00:55:04,220
signature at the time that the things

1192
00:55:01,280 --> 00:55:06,319
claimed to be read and you want it to

1193
00:55:04,220 --> 00:55:08,868
fail if the timestamp of the message

1194
00:55:06,319 --> 00:55:11,089
itself differs from the timestamp of the

1195
00:55:08,869 --> 00:55:12,829
signature so you're evaluating stuff at

1196
00:55:11,089 --> 00:55:15,560
the time the message claims to have been

1197
00:55:12,829 --> 00:55:18,680
and your ich and you are required then

1198
00:55:15,560 --> 00:55:20,119
to be showing that date stamp and the

1199
00:55:18,680 --> 00:55:22,368
context of the messaging the dates tab

1200
00:55:20,119 --> 00:55:24,290
appropriately which may mean for a male

1201
00:55:22,369 --> 00:55:25,730
that you also want to check to make sure

1202
00:55:24,290 --> 00:55:27,589
that if it's in reply to some other

1203
00:55:25,730 --> 00:55:29,060
messages that it's time stamp is

1204
00:55:27,589 --> 00:55:31,130
actually after the messages that it

1205
00:55:29,060 --> 00:55:33,680
replied to for some definition of after

1206
00:55:31,130 --> 00:55:35,300
no I'm just saying that you wish you one

1207
00:55:33,680 --> 00:55:37,940
is you want the mail user agent to think

1208
00:55:35,300 --> 00:55:39,829
very clearly about what this signal

1209
00:55:37,940 --> 00:55:41,720
actually means and just because I sent a

1210
00:55:39,829 --> 00:55:43,730
message with the key that I later that

1211
00:55:41,720 --> 00:55:45,859
later expired and certificate it's

1212
00:55:43,730 --> 00:55:48,109
silent that's later expired doesn't mean

1213
00:55:45,859 --> 00:55:50,089
that it should show up as as nothing

1214
00:55:48,109 --> 00:55:52,910
once the certificate expires that

1215
00:55:50,089 --> 00:55:55,520
doesn't make sense yes it wouldn't show

1216
00:55:52,910 --> 00:55:58,520
it wouldn't show as nothing and before

1217
00:55:55,520 --> 00:56:00,470
you asked to go for probe for statuses

1218
00:55:58,520 --> 00:56:01,450
till two but yeah I understand yeah I

1219
00:56:00,470 --> 00:56:03,879
understand

1220
00:56:01,450 --> 00:56:08,169
sounds like you have some ideas so maybe

1221
00:56:03,880 --> 00:56:13,599
we can think of some text and we can see

1222
00:56:08,170 --> 00:56:14,770
if we agree you say the date of the

1223
00:56:13,599 --> 00:56:17,109
message but there are many dates

1224
00:56:14,770 --> 00:56:18,130
involved inside a message and how many

1225
00:56:17,109 --> 00:56:20,140
of those can be forged

1226
00:56:18,130 --> 00:56:22,240
sothey you need to be more specific

1227
00:56:20,140 --> 00:56:24,279
about which date so probably the one it

1228
00:56:22,240 --> 00:56:25,390
was received by your server no because

1229
00:56:24,280 --> 00:56:28,500
the date had a field you can write

1230
00:56:25,390 --> 00:56:33,578
whatever you want into that no one is

1231
00:56:28,500 --> 00:56:35,559
g/kg is saying is if it's a signed

1232
00:56:33,579 --> 00:56:37,240
message maybe you don't want people to

1233
00:56:35,559 --> 00:56:40,390
be able to put any date they want it

1234
00:56:37,240 --> 00:56:52,000
needs to connect to when it was signed

1235
00:56:40,390 --> 00:56:53,890
in a reasonable way so if I put ways to

1236
00:56:52,000 --> 00:56:58,510
fudge this but what what I wanted to

1237
00:56:53,890 --> 00:57:01,680
respond to to Daniel know is I don't

1238
00:56:58,510 --> 00:57:04,119
want to start getting into all sorts of

1239
00:57:01,680 --> 00:57:07,299
tying things together and message

1240
00:57:04,119 --> 00:57:09,970
threads and validating relative to the

1241
00:57:07,299 --> 00:57:11,740
reply to to the in reply to and that

1242
00:57:09,970 --> 00:57:16,140
kind of stuff that's just getting way

1243
00:57:11,740 --> 00:57:22,720
out of the scope of a signature mm-hmm

1244
00:57:16,140 --> 00:57:24,609
the signature is not saying that that

1245
00:57:22,720 --> 00:57:26,589
this is in reply to that other message

1246
00:57:24,609 --> 00:57:28,750
and therefore it has to be later than

1247
00:57:26,589 --> 00:57:31,029
the other message is is a semantic

1248
00:57:28,750 --> 00:57:35,619
content of the message and that's not

1249
00:57:31,030 --> 00:57:39,420
what the signature is for okay all right

1250
00:57:35,619 --> 00:57:42,220
let's take a second here from bran yeah

1251
00:57:39,420 --> 00:57:44,799
what I wanted to comment on was debug

1252
00:57:42,220 --> 00:57:47,020
ability one of the things that really

1253
00:57:44,799 --> 00:57:49,030
frustrates me about DNS SEC is that you

1254
00:57:47,020 --> 00:57:50,410
just get back in an X domain when you

1255
00:57:49,030 --> 00:57:54,250
request something and what's actually

1256
00:57:50,410 --> 00:57:56,348
happening is a key signing failure but

1257
00:57:54,250 --> 00:57:59,380
the domain totally exists so the record

1258
00:57:56,349 --> 00:58:01,059
totally exists I think it's great to

1259
00:57:59,380 --> 00:58:06,339
have something that just tells you yes

1260
00:58:01,059 --> 00:58:08,020
signed verified or not known but it

1261
00:58:06,339 --> 00:58:10,750
needs to be a property that can be

1262
00:58:08,020 --> 00:58:14,920
fetched for anyone developing or testing

1263
00:58:10,750 --> 00:58:17,349
or for a support department to

1264
00:58:14,920 --> 00:58:18,640
ask the user can you tell me what what

1265
00:58:17,349 --> 00:58:21,010
this shows

1266
00:58:18,640 --> 00:58:23,440
so it actually might need to be visible

1267
00:58:21,010 --> 00:58:25,510
through the user as well so that they

1268
00:58:23,440 --> 00:58:28,150
can report to support here's why my

1269
00:58:25,510 --> 00:58:32,079
message has an issue rather than being

1270
00:58:28,150 --> 00:58:35,980
completely undo bugga ball actually I

1271
00:58:32,079 --> 00:58:39,309
think a real feel but same concept it's

1272
00:58:35,980 --> 00:58:42,609
easy to get caught up with the attacker

1273
00:58:39,309 --> 00:58:47,289
case and make the regular case very hard

1274
00:58:42,609 --> 00:58:49,589
to use although without the attack case

1275
00:58:47,289 --> 00:58:51,789
the regular case doesn't matter anyway

1276
00:58:49,589 --> 00:58:53,769
there's Neil Jenkins I just want to make

1277
00:58:51,789 --> 00:58:55,240
a quick point we go back to all that

1278
00:58:53,769 --> 00:58:58,450
other stuff just about from a J Matt

1279
00:58:55,240 --> 00:59:01,538
point of view if this does have a signed

1280
00:58:58,450 --> 00:59:05,140
state that's I've not verified it yet

1281
00:59:01,539 --> 00:59:08,619
but I want to I think the way to do that

1282
00:59:05,140 --> 00:59:10,569
would be to say if you request one of

1283
00:59:08,619 --> 00:59:11,890
these properties body structure HTML

1284
00:59:10,569 --> 00:59:14,049
body they say neither body properties

1285
00:59:11,890 --> 00:59:16,480
right then you can expect if you fetch

1286
00:59:14,049 --> 00:59:18,309
at the same time the signed state it

1287
00:59:16,480 --> 00:59:20,140
will be verified or failed or whatever

1288
00:59:18,309 --> 00:59:22,690
right and after that it will be cached

1289
00:59:20,140 --> 00:59:24,038
basically about that where's if you

1290
00:59:22,690 --> 00:59:25,509
fetch it without fetching all those

1291
00:59:24,039 --> 00:59:27,369
properties at the same time you may only

1292
00:59:25,509 --> 00:59:33,220
get back up signs they if we keep those

1293
00:59:27,369 --> 00:59:35,319
values ok dkg here so Bron I completely

1294
00:59:33,220 --> 00:59:40,839
agree with you that there may be good

1295
00:59:35,319 --> 00:59:43,210
cause to have debugging data and I don't

1296
00:59:40,839 --> 00:59:44,980
think this is the place to do that maybe

1297
00:59:43,210 --> 00:59:46,750
there's an additional thing that you can

1298
00:59:44,980 --> 00:59:48,400
ask for debugging information about how

1299
00:59:46,750 --> 00:59:51,910
the Signet verification signature

1300
00:59:48,400 --> 00:59:53,200
verification failed but given the number

1301
00:59:51,910 --> 00:59:55,420
of ways that I think signature

1302
00:59:53,200 --> 00:59:57,609
verifications can fail I think it's a

1303
00:59:55,420 --> 01:00:00,339
mistake to try to put that in this

1304
00:59:57,609 --> 01:00:02,500
status value which looks very much like

1305
01:00:00,339 --> 01:00:04,660
something we are encouraging the user

1306
01:00:02,500 --> 01:00:06,910
agent to display directly to these ok

1307
01:00:04,660 --> 01:00:08,440
yeah if they're going to return

1308
01:00:06,910 --> 01:00:09,700
information about the failure it's

1309
01:00:08,440 --> 01:00:12,339
probably going to be a separate property

1310
01:00:09,700 --> 01:00:14,379
but yes I agree absolutely it may even

1311
01:00:12,339 --> 01:00:23,410
be a free-form textual field that says

1312
01:00:14,380 --> 01:00:26,170
yes right right yeah I don't know Brown

1313
01:00:23,410 --> 01:00:27,940
did you want to go ahead i but I

1314
01:00:26,170 --> 01:00:29,850
gentleman behind you in line who's next

1315
01:00:27,940 --> 01:00:32,680
hey Steph gentle I just want to say that

1316
01:00:29,850 --> 01:00:34,630
the like to read or under saying I'm

1317
01:00:32,680 --> 01:00:37,720
imagining the ideal UI to be something

1318
01:00:34,630 --> 01:00:39,340
like what browsers do today which is you

1319
01:00:37,720 --> 01:00:41,169
know if there's like a other scenario

1320
01:00:39,340 --> 01:00:42,820
here I can see exactly why the

1321
01:00:41,170 --> 01:00:44,410
certificate failure why that seems

1322
01:00:42,820 --> 01:00:47,020
fairly check right like that's what I

1323
01:00:44,410 --> 01:00:49,750
would I think well I mean a lot of

1324
01:00:47,020 --> 01:00:50,980
developers use that you know like I know

1325
01:00:49,750 --> 01:00:52,480
that my mom doesn't click on that button

1326
01:00:50,980 --> 01:00:56,410
but I certainly do when I'm building web

1327
01:00:52,480 --> 01:00:58,720
site from and yeah sorry can I just want

1328
01:00:56,410 --> 01:01:02,890
to do my usual pushback against using my

1329
01:00:58,720 --> 01:01:05,410
mom as a non dico user we are gendered

1330
01:01:02,890 --> 01:01:07,210
space we're heavily male there's a bunch

1331
01:01:05,410 --> 01:01:08,620
of assumptions there and I know it I

1332
01:01:07,210 --> 01:01:10,420
know it's not an intentional thing I

1333
01:01:08,620 --> 01:01:11,680
just my mom happens to technical user

1334
01:01:10,420 --> 01:01:13,300
let's not make those assumptions about

1335
01:01:11,680 --> 01:01:17,379
people who might be in the room or might

1336
01:01:13,300 --> 01:01:20,110
not be in the room so yeah I mean I I

1337
01:01:17,380 --> 01:01:22,900
think it's kind of funny to use the

1338
01:01:20,110 --> 01:01:24,940
browser model as the model that we're

1339
01:01:22,900 --> 01:01:27,040
working from a because when the browser

1340
01:01:24,940 --> 01:01:29,800
model fails you don't see the site at

1341
01:01:27,040 --> 01:01:36,880
all right and that's not at all the case

1342
01:01:29,800 --> 01:01:38,080
here right as someone who's debugging a

1343
01:01:36,880 --> 01:01:39,100
lot of certificate errors I'm not

1344
01:01:38,080 --> 01:01:40,120
actually convinced that this also

1345
01:01:39,100 --> 01:01:41,350
thought through you doesn't show you

1346
01:01:40,120 --> 01:01:43,120
then there are multiple failures for

1347
01:01:41,350 --> 01:01:44,650
example if you have it if you have an

1348
01:01:43,120 --> 01:01:46,420
expired certificate that also doesn't

1349
01:01:44,650 --> 01:01:48,490
match it'll usually tell you one of

1350
01:01:46,420 --> 01:01:52,810
those two problems but not the other so

1351
01:01:48,490 --> 01:01:55,209
okay I think bronze next all right if I

1352
01:01:52,810 --> 01:01:59,080
can remember what my my other point was

1353
01:01:55,210 --> 01:02:03,520
here I in terms of the gem happiness of

1354
01:01:59,080 --> 01:02:05,319
it as a server implementer I prefer thee

1355
01:02:03,520 --> 01:02:06,670
if you requested this property really

1356
01:02:05,320 --> 01:02:09,490
calculate it for you if you don't

1357
01:02:06,670 --> 01:02:12,070
request that we don't I can I can see

1358
01:02:09,490 --> 01:02:16,930
why you might want to when fetching a

1359
01:02:12,070 --> 01:02:18,040
listing I guess have it pre calculate

1360
01:02:16,930 --> 01:02:22,990
without having to fetch the body

1361
01:02:18,040 --> 01:02:25,450
structure on it but it is the question

1362
01:02:22,990 --> 01:02:27,370
then becomes do you bump the state when

1363
01:02:25,450 --> 01:02:28,899
you calculate it because if you don't

1364
01:02:27,370 --> 01:02:32,549
bump the state when you calculate it

1365
01:02:28,900 --> 01:02:32,550
then how do you know it's changed

1366
01:02:35,710 --> 01:02:44,090
and yeah you can define the kind of

1367
01:02:42,320 --> 01:02:46,550
exception is but yeah the General James

1368
01:02:44,090 --> 01:02:48,470
mandates would have it don't quite match

1369
01:02:46,550 --> 01:02:50,450
to it gets calculated to keep fetch

1370
01:02:48,470 --> 01:02:52,970
specific other properties a bit weird

1371
01:02:50,450 --> 01:02:55,490
like me I mean I know if I implement it

1372
01:02:52,970 --> 01:02:57,560
in saris IMAP then what would happen is

1373
01:02:55,490 --> 01:03:01,430
at the time it got calculated it would

1374
01:02:57,560 --> 01:03:02,750
either set a keyword or it would set an

1375
01:03:01,430 --> 01:03:04,339
annotation and either way that would

1376
01:03:02,750 --> 01:03:06,590
bump the mod sequence so it would

1377
01:03:04,340 --> 01:03:11,060
actually report that message just having

1378
01:03:06,590 --> 01:03:13,850
changed Neil Jenkins just on the browser

1379
01:03:11,060 --> 01:03:16,009
I think actually the lesson learnt there

1380
01:03:13,850 --> 01:03:17,990
is moving away from showing Miz's

1381
01:03:16,010 --> 01:03:20,690
trusted to not showing anything new

1382
01:03:17,990 --> 01:03:23,240
passes and showing big red warning signs

1383
01:03:20,690 --> 01:03:26,570
to you know don't go here if it fails

1384
01:03:23,240 --> 01:03:30,439
that's the only state because users do

1385
01:03:26,570 --> 01:03:32,480
not notice like this this is fine notice

1386
01:03:30,440 --> 01:03:36,110
the absence of it this is fine notice of

1387
01:03:32,480 --> 01:03:38,840
Keating they have any so but I know you

1388
01:03:36,110 --> 01:03:41,240
have use cases perhaps that it different

1389
01:03:38,840 --> 01:03:42,500
I don't sorry

1390
01:03:41,240 --> 01:03:45,620
this is dkg you won't there's one more

1391
01:03:42,500 --> 01:03:47,810
thing that I wanted to add I think bran

1392
01:03:45,620 --> 01:03:49,640
is right to think about what it means to

1393
01:03:47,810 --> 01:03:51,860
do the verification how that changes the

1394
01:03:49,640 --> 01:03:54,259
state of the message and I want a flag

1395
01:03:51,860 --> 01:03:57,740
that perhaps what you want in this state

1396
01:03:54,260 --> 01:04:00,590
is the timestamp that then for for if it

1397
01:03:57,740 --> 01:04:02,060
comes back signed as opposed to not

1398
01:04:00,590 --> 01:04:04,160
signed which of the two states I'm

1399
01:04:02,060 --> 01:04:07,430
recommending what you may want to have

1400
01:04:04,160 --> 01:04:09,680
also is signed and verified and a

1401
01:04:07,430 --> 01:04:11,240
timestamp when it was verified now I am

1402
01:04:09,680 --> 01:04:14,120
NOT a big fan of moving the

1403
01:04:11,240 --> 01:04:15,799
cryptographic utility into the server so

1404
01:04:14,120 --> 01:04:17,720
the fact that this is situated in the

1405
01:04:15,800 --> 01:04:18,590
server makes me uneasy but if you're

1406
01:04:17,720 --> 01:04:20,600
going to be doing the cryptographic

1407
01:04:18,590 --> 01:04:22,160
verification in the server the thing

1408
01:04:20,600 --> 01:04:24,140
that I want from my cryptographic verify

1409
01:04:22,160 --> 01:04:26,330
are is actually a cached time stamp that

1410
01:04:24,140 --> 01:04:28,430
says I saw this thing and I verified it

1411
01:04:26,330 --> 01:04:30,380
at time T it's very different for me to

1412
01:04:28,430 --> 01:04:32,210
get the message I'd look at a message on

1413
01:04:30,380 --> 01:04:34,700
my on my laptop and I get and I'm

1414
01:04:32,210 --> 01:04:36,920
looking at it in 2019 and it's from a

1415
01:04:34,700 --> 01:04:39,350
message that was in 2002 and right as

1416
01:04:36,920 --> 01:04:41,630
signature verified then if I what I had

1417
01:04:39,350 --> 01:04:44,360
that is actually a timestamp from my

1418
01:04:41,630 --> 01:04:46,730
trusted user agent that says I actually

1419
01:04:44,360 --> 01:04:48,040
did verify this in 2002 that's

1420
01:04:46,730 --> 01:04:49,930
semantically different

1421
01:04:48,040 --> 01:04:52,560
and so I think you might want it to say

1422
01:04:49,930 --> 01:04:55,629
signed and verified with the time stamp

1423
01:04:52,560 --> 01:04:59,380
yeah you have to verify it in 2002

1424
01:04:55,630 --> 01:05:01,750
because if you verify in 2019 using the

1425
01:04:59,380 --> 01:05:04,870
key that was valid in 2002 that key has

1426
01:05:01,750 --> 01:05:07,800
existed for 17 years and if it's been

1427
01:05:04,870 --> 01:05:10,660
cracked or leaked in that time then that

1428
01:05:07,800 --> 01:05:12,130
message could be faked that still might

1429
01:05:10,660 --> 01:05:14,410
be relevant right I might be have just

1430
01:05:12,130 --> 01:05:17,230
imported an archive of messages and they

1431
01:05:14,410 --> 01:05:18,790
use it right so so there may be a

1432
01:05:17,230 --> 01:05:20,440
circumstance where the where the user

1433
01:05:18,790 --> 01:05:21,670
agent will decide what to display based

1434
01:05:20,440 --> 01:05:23,830
on a timestamp of the verification

1435
01:05:21,670 --> 01:05:26,380
compared to the timestamp of the of the

1436
01:05:23,830 --> 01:05:28,509
message but I but that is one thing that

1437
01:05:26,380 --> 01:05:30,250
I think should be bundled with a

1438
01:05:28,510 --> 01:05:32,050
signature verification is a timestamp

1439
01:05:30,250 --> 01:05:33,280
check about a and I don't know exactly

1440
01:05:32,050 --> 01:05:35,110
what that means and I don't know how we

1441
01:05:33,280 --> 01:05:36,760
make the user agent use it but I'm happy

1442
01:05:35,110 --> 01:05:39,250
to work with folks to think about what

1443
01:05:36,760 --> 01:05:41,110
what the semantics are there okay you

1444
01:05:39,250 --> 01:05:43,150
mean timestamp of when it was initially

1445
01:05:41,110 --> 01:05:44,980
verified well the first time it was your

1446
01:05:43,150 --> 01:05:46,900
earliest verification I don't think you

1447
01:05:44,980 --> 01:05:48,310
gain anything by storing additional

1448
01:05:46,900 --> 01:05:48,880
attempts at there I don't think you do

1449
01:05:48,310 --> 01:05:51,400
either

1450
01:05:48,880 --> 01:05:53,170
you need a chain of custody and you need

1451
01:05:51,400 --> 01:05:56,710
to verify it with a key that's valid

1452
01:05:53,170 --> 01:06:01,470
every time that that the previous valid

1453
01:05:56,710 --> 01:06:04,300
key expires really okay okay

1454
01:06:01,470 --> 01:06:06,490
there are some where developers cases

1455
01:06:04,300 --> 01:06:08,920
when you don't have you didn't instill

1456
01:06:06,490 --> 01:06:11,229
trust anchor when you're testing and it

1457
01:06:08,920 --> 01:06:13,270
failed and then you know you install it

1458
01:06:11,230 --> 01:06:15,130
and then later it succeeded but anyway

1459
01:06:13,270 --> 01:06:16,870
yeah I'm not I don't know no they only

1460
01:06:15,130 --> 01:06:18,310
but that's I'm not suggesting that you

1461
01:06:16,870 --> 01:06:20,680
store a timestamp for when the signature

1462
01:06:18,310 --> 01:06:22,570
verification fails agree even suggesting

1463
01:06:20,680 --> 01:06:24,490
that you store for when it succeeds fine

1464
01:06:22,570 --> 01:06:26,050
I'd like to move the discussion along

1465
01:06:24,490 --> 01:06:34,299
because we're we're taking a lot longer

1466
01:06:26,050 --> 01:06:37,900
than budgeted here right so if we want

1467
01:06:34,300 --> 01:06:41,530
to do signing sign encryption decryption

1468
01:06:37,900 --> 01:06:45,280
then there is identity object which

1469
01:06:41,530 --> 01:06:47,740
extended with as my own credentials now

1470
01:06:45,280 --> 01:06:49,650
at the moment this key ID which is like

1471
01:06:47,740 --> 01:06:53,529
a blob ID and various other IDs and

1472
01:06:49,650 --> 01:06:55,660
certificate you can retrieve private key

1473
01:06:53,530 --> 01:06:57,990
is not retrievable through this

1474
01:06:55,660 --> 01:06:57,990
interface

1475
01:06:58,100 --> 01:07:03,990
if somebody really wants this we can

1476
01:07:00,480 --> 01:07:10,170
discuss but that's probably safer

1477
01:07:03,990 --> 01:07:12,660
default and also additionally you can

1478
01:07:10,170 --> 01:07:14,720
mark the private key whether it's only

1479
01:07:12,660 --> 01:07:17,640
for signing for encryption or both you

1480
01:07:14,720 --> 01:07:19,350
can also mark a special case if it's

1481
01:07:17,640 --> 01:07:21,509
expired but you still want to be able to

1482
01:07:19,350 --> 01:07:24,150
decrypt all mail you can mark both of

1483
01:07:21,510 --> 01:07:26,510
them as false then it might be able to

1484
01:07:24,150 --> 01:07:36,990
decrypt it but it's not usable for

1485
01:07:26,510 --> 01:07:41,120
sending stuff out next slide so yeah I

1486
01:07:36,990 --> 01:07:41,120
was trying to figure out how to exactly

1487
01:07:45,050 --> 01:07:50,610
create a constructor message which is

1488
01:07:47,490 --> 01:07:54,240
decrypted or with if it's a Buckley

1489
01:07:50,610 --> 01:07:57,900
signed how to extract them payload so I

1490
01:07:54,240 --> 01:08:00,149
think with with some help from Neal you

1491
01:07:57,900 --> 01:08:05,310
suggested I had attribute to email

1492
01:08:00,150 --> 01:08:07,080
parsed oh well basically it's mime

1493
01:08:05,310 --> 01:08:09,240
decode default is false so nothing is

1494
01:08:07,080 --> 01:08:12,380
done if it's true then the blob is first

1495
01:08:09,240 --> 01:08:17,099
attempted to be decrypted and/or

1496
01:08:12,380 --> 01:08:20,730
stripped from signature unpack from CMS

1497
01:08:17,100 --> 01:08:22,680
basically and then it will be parsed and

1498
01:08:20,729 --> 01:08:25,139
then at the end of this there will be a

1499
01:08:22,680 --> 01:08:33,060
new message with new blog new message

1500
01:08:25,140 --> 01:08:35,160
which you can act on next slide on the

1501
01:08:33,060 --> 01:08:39,600
sending side email submission object

1502
01:08:35,160 --> 01:08:47,160
needs to be extended with at the moment

1503
01:08:39,600 --> 01:08:48,800
I made these two objects maybe it's

1504
01:08:47,160 --> 01:08:52,790
efficient to make them just boolean's

1505
01:08:48,800 --> 01:08:55,410
but if we need any more information oh

1506
01:08:52,790 --> 01:08:58,160
yeah actually so yeah in this case you

1507
01:08:55,410 --> 01:08:58,160
can actually say

1508
01:09:01,080 --> 01:09:06,130
you can possibly have multiple keys and

1509
01:09:04,569 --> 01:09:09,000
you want to specify which one you want

1510
01:09:06,130 --> 01:09:11,620
to use although if you specify identity

1511
01:09:09,000 --> 01:09:17,109
it might not be needed so when you think

1512
01:09:11,620 --> 01:09:19,000
a bit about this this seems for defined

1513
01:09:17,109 --> 01:09:20,920
in the model which is the service

1514
01:09:19,000 --> 01:09:23,410
basically doing the encryption kind of

1515
01:09:20,920 --> 01:09:25,090
on the edge going out right so yeah so

1516
01:09:23,410 --> 01:09:27,790
just to be clear if you do this it's

1517
01:09:25,090 --> 01:09:29,260
just the version that sent that is s my

1518
01:09:27,790 --> 01:09:31,630
encrypted and will sign to the version

1519
01:09:29,260 --> 01:09:34,660
you store locally in your send copy is

1520
01:09:31,630 --> 01:09:36,670
not because this is just my it to the

1521
01:09:34,660 --> 01:09:42,939
actual submission yep that's what you're

1522
01:09:36,670 --> 01:09:45,010
intending you probably will store the

1523
01:09:42,939 --> 01:09:50,109
encrypted message in your sent folder

1524
01:09:45,010 --> 01:09:54,910
but right it basically allows you to do

1525
01:09:50,109 --> 01:09:57,040
transformations before you send mission

1526
01:09:54,910 --> 01:09:58,720
then out I said because that implies to

1527
01:09:57,040 --> 01:10:00,280
me something that just happens to the

1528
01:09:58,720 --> 01:10:01,870
submitted message that sent out not your

1529
01:10:00,280 --> 01:10:03,429
copy I think you probably want to do as

1530
01:10:01,870 --> 01:10:05,920
part of email slash says potentially

1531
01:10:03,430 --> 01:10:07,300
then to say create this and also when

1532
01:10:05,920 --> 01:10:09,850
you create it encrypt it and will sign

1533
01:10:07,300 --> 01:10:13,750
it that's the five four three two two

1534
01:10:09,850 --> 01:10:15,220
message I'm not created also move it to

1535
01:10:13,750 --> 01:10:16,060
a different object where they must have

1536
01:10:15,220 --> 01:10:17,710
just created

1537
01:10:16,060 --> 01:10:21,880
yes opposed awesome Michelle P as well

1538
01:10:17,710 --> 01:10:27,450
yes that's a good point all right the

1539
01:10:21,880 --> 01:10:31,720
copy will sending out yes good point

1540
01:10:27,450 --> 01:10:35,110
Daniel Kanagawa I'm really sad about

1541
01:10:31,720 --> 01:10:37,420
this work the idea of moving the secret

1542
01:10:35,110 --> 01:10:39,790
key material that is the users

1543
01:10:37,420 --> 01:10:43,300
cryptographic identity and capability

1544
01:10:39,790 --> 01:10:47,080
for seeing intended data into the server

1545
01:10:43,300 --> 01:10:48,820
I think it causes problems for other

1546
01:10:47,080 --> 01:10:50,830
people in the ecosystem who are trying

1547
01:10:48,820 --> 01:10:53,259
to understand what end-to-end encrypted

1548
01:10:50,830 --> 01:10:55,420
email actually means the fact that

1549
01:10:53,260 --> 01:10:57,250
you've moved it there I understand that

1550
01:10:55,420 --> 01:10:59,290
anyone can leak clear text any critics

1551
01:10:57,250 --> 01:11:02,320
they have access to you but I just want

1552
01:10:59,290 --> 01:11:04,030
to point out that I think this work is

1553
01:11:02,320 --> 01:11:05,920
radically different than the signature

1554
01:11:04,030 --> 01:11:08,259
verification work and I think it's wrong

1555
01:11:05,920 --> 01:11:09,820
in a in an entirely separate document

1556
01:11:08,260 --> 01:11:12,970
and I don't think it would be right to

1557
01:11:09,820 --> 01:11:14,440
try to conflate the two because I well

1558
01:11:12,970 --> 01:11:16,360
well it

1559
01:11:14,440 --> 01:11:18,250
Tribble vaguely with the signature

1560
01:11:16,360 --> 01:11:20,019
verification work because you're relying

1561
01:11:18,250 --> 01:11:21,820
on this other party to do the checks for

1562
01:11:20,020 --> 01:11:23,920
you in this case you're actually relying

1563
01:11:21,820 --> 01:11:27,099
on the other party not to compromise the

1564
01:11:23,920 --> 01:11:29,860
security the confidentiality of correct

1565
01:11:27,100 --> 01:11:31,780
the messages and not to forge messages

1566
01:11:29,860 --> 01:11:34,330
as you which otherwise they wouldn't be

1567
01:11:31,780 --> 01:11:36,009
capable doing so I strongly recommend if

1568
01:11:34,330 --> 01:11:38,380
you're gonna work on this that you work

1569
01:11:36,010 --> 01:11:41,620
on it in some separate draft not in the

1570
01:11:38,380 --> 01:11:43,420
same draft yeah once they come new

1571
01:11:41,620 --> 01:11:45,130
drinkin's I mean I actually think there

1572
01:11:43,420 --> 01:11:47,260
is a use case here which is generally

1573
01:11:45,130 --> 01:11:49,060
you have a kind of Yemeni corporate like

1574
01:11:47,260 --> 01:11:50,890
company which is a trusted boundary if

1575
01:11:49,060 --> 01:11:51,940
you like the outside and the stuff and

1576
01:11:50,890 --> 01:11:54,010
there's other boundary things are

1577
01:11:51,940 --> 01:11:55,809
encrypt or decrypt it for Jones it's not

1578
01:11:54,010 --> 01:11:58,840
about end-to-end encryption that is a

1579
01:11:55,810 --> 01:12:01,690
different use case but that's I think

1580
01:11:58,840 --> 01:12:03,220
that's where this is kind of a where

1581
01:12:01,690 --> 01:12:06,849
s/mime in general is kind of more useful

1582
01:12:03,220 --> 01:12:09,190
I hear you say it's not about end-to-end

1583
01:12:06,850 --> 01:12:10,930
encryption but when the user who's

1584
01:12:09,190 --> 01:12:12,519
outside of that system is sending mail

1585
01:12:10,930 --> 01:12:16,060
to them do they think it's about end end

1586
01:12:12,520 --> 01:12:18,790
encryption yeah I don't either and that

1587
01:12:16,060 --> 01:12:20,350
causes that paints a very confusing

1588
01:12:18,790 --> 01:12:22,660
picture for people who are trying to say

1589
01:12:20,350 --> 01:12:24,640
you're trying to use email who are not

1590
01:12:22,660 --> 01:12:26,019
the operators of this system who are

1591
01:12:24,640 --> 01:12:31,240
trying to understand what it means when

1592
01:12:26,020 --> 01:12:33,730
they send now I was just going to say

1593
01:12:31,240 --> 01:12:35,530
with that it is not necessarily always

1594
01:12:33,730 --> 01:12:37,750
the case that the client and the server

1595
01:12:35,530 --> 01:12:40,780
are operated by two different parties

1596
01:12:37,750 --> 01:12:43,900
your server might be your home box that

1597
01:12:40,780 --> 01:12:46,330
is sitting underneath your TV and it is

1598
01:12:43,900 --> 01:12:48,639
fully controlled and owned by you that

1599
01:12:46,330 --> 01:12:51,460
your client is talking to securely and

1600
01:12:48,640 --> 01:12:54,370
that is then holding your keys the the

1601
01:12:51,460 --> 01:12:57,250
Apple model where the server where

1602
01:12:54,370 --> 01:12:58,690
everything's pushed to Apple devices to

1603
01:12:57,250 --> 01:13:00,690
the point that I can't get a one time

1604
01:12:58,690 --> 01:13:04,540
password without owning an Apple device

1605
01:13:00,690 --> 01:13:07,509
in order to to talk to their server even

1606
01:13:04,540 --> 01:13:10,150
in that case the server might be the

1607
01:13:07,510 --> 01:13:11,980
more powerful device that your watch is

1608
01:13:10,150 --> 01:13:15,969
talking to that's sitting in your pocket

1609
01:13:11,980 --> 01:13:17,799
I understand that Braun and I think I

1610
01:13:15,970 --> 01:13:20,100
mean certainly there are use cases where

1611
01:13:17,800 --> 01:13:22,120
it would have the same fundamental

1612
01:13:20,100 --> 01:13:24,790
confidentiality and integrity properties

1613
01:13:22,120 --> 01:13:26,890
and authenticity properties as it would

1614
01:13:24,790 --> 01:13:27,720
if it was asserted on the local device

1615
01:13:26,890 --> 01:13:29,820
that you hold

1616
01:13:27,720 --> 01:13:31,080
but when we define this we have to be

1617
01:13:29,820 --> 01:13:32,309
aware of the context that we're defining

1618
01:13:31,080 --> 01:13:34,950
it in and the context that we're

1619
01:13:32,310 --> 01:13:36,480
defining it in is that many people will

1620
01:13:34,950 --> 01:13:38,220
be using this with servers that they

1621
01:13:36,480 --> 01:13:41,339
don't have the same level of reliability

1622
01:13:38,220 --> 01:13:46,280
oh yeah I agree with either a separate

1623
01:13:41,340 --> 01:13:48,150
documents a good idea okay is that it

1624
01:13:46,280 --> 01:13:54,870
yeah I think that's it

1625
01:13:48,150 --> 01:14:02,420
all right thank you relaxing and so the

1626
01:13:54,870 --> 01:14:02,420
next we have yes

1627
01:14:03,300 --> 01:14:12,690
so about the Indian art I put Sebastian

1628
01:14:09,480 --> 01:14:17,490
the Russian zero two at the beginning of

1629
01:14:12,690 --> 01:14:21,150
the week the idea is that it make it

1630
01:14:17,490 --> 01:14:26,580
simpler using more concepts from Drake

1631
01:14:21,150 --> 01:14:29,129
that Chrome so next slide please so a

1632
01:14:26,580 --> 01:14:33,360
man changes the men change is the

1633
01:14:29,130 --> 01:14:37,040
following is defining super MD and

1634
01:14:33,360 --> 01:14:41,490
object with a very basic set method

1635
01:14:37,040 --> 01:14:43,890
using only create and the past method so

1636
01:14:41,490 --> 01:14:49,440
we replace the previous session who was

1637
01:14:43,890 --> 01:14:55,710
extended the material object Neff slide

1638
01:14:49,440 --> 01:15:00,480
please so no vengeance set response is

1639
01:14:55,710 --> 01:15:05,480
similar to standard set metered so as

1640
01:15:00,480 --> 01:15:05,480
against Ypres thank you latest comments

1641
01:15:06,410 --> 01:15:16,470
the only caveat is that is returning no

1642
01:15:10,770 --> 01:15:20,310
more miss Effie mission but just use the

1643
01:15:16,470 --> 01:15:22,650
passive response from the endian so in

1644
01:15:20,310 --> 01:15:25,410
this case we are sending an email

1645
01:15:22,650 --> 01:15:28,259
because an Indian is is somewhat an

1646
01:15:25,410 --> 01:15:32,700
email without adding an miss efficient

1647
01:15:28,260 --> 01:15:38,310
to to follow it but given that its

1648
01:15:32,700 --> 01:15:41,360
servers often a sudden forget message I

1649
01:15:38,310 --> 01:15:41,360
think it's very talky

1650
01:15:42,550 --> 01:15:53,800
next please the erection has some save a

1651
01:15:49,269 --> 01:15:57,699
little fix he is a dating game ocurro of

1652
01:15:53,800 --> 01:16:00,070
attrition and remove a registration of

1653
01:15:57,699 --> 01:16:05,199
the Nvidia registered keyword and some

1654
01:16:00,070 --> 01:16:16,209
typos and next slide that's it any

1655
01:16:05,199 --> 01:16:19,119
question no questions very I think the

1656
01:16:16,209 --> 01:16:19,539
general model is expecting now it's much

1657
01:16:19,119 --> 01:16:22,329
more

1658
01:16:19,539 --> 01:16:24,579
j-mac evil one for a better word yeah I

1659
01:16:22,329 --> 01:16:26,110
need to actually read through the latest

1660
01:16:24,579 --> 01:16:31,539
version again properly but this thing's

1661
01:16:26,110 --> 01:16:34,808
pretty reasonable thank you it's Bronwyn

1662
01:16:31,539 --> 01:16:38,259
I have one more comment on it I wonder

1663
01:16:34,809 --> 01:16:40,059
whether MTN is clear enough as a name

1664
01:16:38,260 --> 01:16:42,280
whether we want a longer name for the

1665
01:16:40,059 --> 01:16:45,010
object just that this is a global

1666
01:16:42,280 --> 01:17:03,699
namespace for all things that will be

1667
01:16:45,010 --> 01:17:07,420
jam up later yeah it might be good idea

1668
01:17:03,699 --> 01:17:10,659
to actually expand that out of it this

1669
01:17:07,420 --> 01:17:13,979
is very I don't want to belabor this or

1670
01:17:10,659 --> 01:17:16,388
you know make a bike shed out of it

1671
01:17:13,979 --> 01:17:18,489
mdn is certainly a well enough known

1672
01:17:16,389 --> 01:17:21,209
term that I wouldn't worry about it but

1673
01:17:18,489 --> 01:17:21,209
I don't feel strong

1674
01:17:24,350 --> 01:17:31,400
okay I don't need it just jumped up a

1675
01:17:26,480 --> 01:17:34,669
bit all right looks like the queue is

1676
01:17:31,400 --> 01:17:40,429
empty now so Thank You Raphael there any

1677
01:17:34,670 --> 01:17:41,900
other yes people are shaking their heads

1678
01:17:40,430 --> 01:17:45,230
please sign the blue sheets if you

1679
01:17:41,900 --> 01:17:48,980
haven't already and thank you for coming

1680
01:17:45,230 --> 01:17:51,110
to this session and thank you to the

1681
01:17:48,980 --> 01:17:53,299
remote participants and particularly to

1682
01:17:51,110 --> 01:17:59,360
the remote chair I was up at some

1683
01:17:53,300 --> 01:18:01,070
crazy-ass yeah indeed it's a good just

1684
01:17:59,360 --> 01:18:05,719
just about to thank you thanks for

1685
01:18:01,070 --> 01:18:08,380
running at Jim and see you next one All

1686
01:18:05,720 --> 01:18:08,380
Right see you then

