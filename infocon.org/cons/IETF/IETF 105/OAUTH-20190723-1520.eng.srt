1
00:01:10,789 --> 00:01:43,770
all right okay and let's okay welcome

2
00:01:40,170 --> 00:01:48,749
everyone to the first session of faith

3
00:01:43,770 --> 00:01:51,449
and we have two sessions a one today and

4
00:01:48,749 --> 00:01:54,119
the other one is Friday morning Friday

5
00:01:51,450 --> 00:01:57,630
morning we have two hours and now we

6
00:01:54,119 --> 00:02:04,459
have an hour and a half so let's get

7
00:01:57,630 --> 00:02:05,908
going I think that is that note well

8
00:02:04,459 --> 00:02:10,050
bye-bye now

9
00:02:05,909 --> 00:02:13,549
hopefully you're familiar with this so

10
00:02:10,050 --> 00:02:18,010
in the blue sheets are out there already

11
00:02:13,549 --> 00:02:45,700
we're looking for EM javis pride

12
00:02:18,010 --> 00:03:00,040
many taker volunteers jabber or many

13
00:02:45,700 --> 00:03:08,409
take anybody amis don't even know what

14
00:03:00,040 --> 00:03:17,548
is yeah yeah net are you all in jabber

15
00:03:08,409 --> 00:03:17,548
no no anybody in jabber no okay

16
00:03:22,709 --> 00:03:33,699
anybody can help us with jabber

17
00:03:25,620 --> 00:03:35,650
no nothing you just need to relay a

18
00:03:33,699 --> 00:03:37,829
question yeah just just relaying

19
00:03:35,650 --> 00:03:52,239
questions not going to type anything

20
00:03:37,829 --> 00:03:54,940
it's easier thank you okay let's get

21
00:03:52,239 --> 00:03:57,790
going so our agenda and we have ten

22
00:03:54,940 --> 00:04:00,639
minutes for a chairs update and then

23
00:03:57,790 --> 00:04:04,750
Daniel will talk about the office

24
00:04:00,639 --> 00:04:07,780
workshop for five minutes in a dick will

25
00:04:04,750 --> 00:04:11,139
entertain us say about reciprocal or off

26
00:04:07,780 --> 00:04:16,659
after that Daniel will then talk about

27
00:04:11,139 --> 00:04:18,820
security BCP and then Justin will will

28
00:04:16,659 --> 00:04:21,779
entertain us this time of what's really

29
00:04:18,820 --> 00:04:24,280
a lot transactional authorization and

30
00:04:21,779 --> 00:04:27,789
hopefully we'll have enough time for

31
00:04:24,280 --> 00:04:30,429
Anibal if if we can't get that we'll

32
00:04:27,789 --> 00:04:31,279
have to just squeeze it into Friday

33
00:04:30,430 --> 00:04:34,669
we'll see

34
00:04:31,279 --> 00:04:36,939
okay okay so let's get started with that

35
00:04:34,669 --> 00:04:40,519
without date

36
00:04:36,939 --> 00:04:43,039
thanks for to Roman we had made lots of

37
00:04:40,519 --> 00:04:49,969
progress recently hey thank you and and

38
00:04:43,039 --> 00:04:53,229
to that authors too and so um it the

39
00:04:49,969 --> 00:04:57,079
first one we're gonna talk about this in

40
00:04:53,229 --> 00:05:01,008
later a I think on Friday that which is

41
00:04:57,079 --> 00:05:03,349
the the access talking dot in the

42
00:05:01,009 --> 00:05:06,649
profile for that Vittoria we'll talk

43
00:05:03,349 --> 00:05:10,789
about this on Friday in that browser

44
00:05:06,649 --> 00:05:13,969
based app we'll discuss this - on Friday

45
00:05:10,789 --> 00:05:15,529
a device flow I think it's say in the

46
00:05:13,969 --> 00:05:19,610
editor queue and there are some

47
00:05:15,529 --> 00:05:22,459
editorial changes it's hopefully will be

48
00:05:19,610 --> 00:05:26,659
done soon a I don't think there is

49
00:05:22,459 --> 00:05:29,509
anything blocking there in incremental

50
00:05:26,659 --> 00:05:32,359
authorization I think that this is

51
00:05:29,509 --> 00:05:39,619
something that we the chairs will will

52
00:05:32,359 --> 00:05:41,179
have to pick up a name and write up on

53
00:05:39,619 --> 00:05:42,979
this one I think that the document is

54
00:05:41,179 --> 00:05:46,128
ready to move on but we were kind of

55
00:05:42,979 --> 00:05:51,289
trying to clean up stuff because we had

56
00:05:46,129 --> 00:05:52,939
lots of faith other documents and don't

57
00:05:51,289 --> 00:05:58,669
know what the latest willed it with this

58
00:05:52,939 --> 00:06:03,789
one the jar Roman I think it's it has a

59
00:05:58,669 --> 00:06:03,789
discuss if I remember and

60
00:06:18,610 --> 00:06:23,960
right oh right so this is the

61
00:06:21,550 --> 00:06:25,879
long-standing document that was delayed

62
00:06:23,960 --> 00:06:27,650
we didn't have enough balance where

63
00:06:25,879 --> 00:06:30,440
there is an issue cut with the state

64
00:06:27,650 --> 00:06:32,929
then has put a discus on it so we need a

65
00:06:30,440 --> 00:06:34,310
follow-up to discuss that that had so I

66
00:06:32,930 --> 00:06:38,180
think we're gonna need a new draft to

67
00:06:34,310 --> 00:06:42,620
address this Kaulitz okay I'm believe

68
00:06:38,180 --> 00:06:44,870
the hops here okay yes look at you yeah

69
00:06:42,620 --> 00:06:52,340
it's really terrible what this document

70
00:06:44,870 --> 00:06:57,349
things through so far yeah Jana Jana

71
00:06:52,340 --> 00:07:02,869
okay enjoy we're putting all their oath

72
00:06:57,349 --> 00:07:09,699
because I'm a tentative job concern was

73
00:07:02,870 --> 00:07:09,699
all up between the choke place so they

74
00:07:18,729 --> 00:07:27,889
get closest to the mic yeah so this is

75
00:07:23,509 --> 00:07:35,569
that second right so the discuss was

76
00:07:27,889 --> 00:07:39,319
about the concerns between the child

77
00:07:35,569 --> 00:07:41,870
claims and all the parameters both Lucas

78
00:07:39,319 --> 00:07:45,289
parameters because your oath because

79
00:07:41,870 --> 00:07:48,080
parameters are recorded inside the

80
00:07:45,289 --> 00:07:51,159
jumped so there has to be some kind of

81
00:07:48,080 --> 00:07:55,550
coordination between Diana ratios or

82
00:07:51,159 --> 00:08:04,669
Lucas parameter and jolt and that's what

83
00:07:55,550 --> 00:08:07,130
we have that Campbell thing at one point

84
00:08:04,669 --> 00:08:10,190
the same issue was raised with respect

85
00:08:07,130 --> 00:08:14,150
to effectively the same document and the

86
00:08:10,190 --> 00:08:16,370
open ID baby connect working and I

87
00:08:14,150 --> 00:08:18,198
understanding was that it had been

88
00:08:16,370 --> 00:08:19,639
decided there that that document on

89
00:08:18,199 --> 00:08:23,629
morado

90
00:08:19,639 --> 00:08:25,129
sir the most commonly used cleanse those

91
00:08:23,629 --> 00:08:29,289
that were most likely subject to

92
00:08:25,129 --> 00:08:32,959
collusion in the ANA registry for OAuth

93
00:08:29,289 --> 00:08:35,000
parameter names did that did that ever

94
00:08:32,958 --> 00:08:40,098
happen or is that being considered as

95
00:08:35,000 --> 00:08:44,630
part of the solution it did it it did

96
00:08:40,099 --> 00:08:53,240
not I've gotten two different answers so

97
00:08:44,630 --> 00:08:54,829
I don't know dozen I don't know but they

98
00:08:53,240 --> 00:09:01,070
have not even Denikin's registered

99
00:08:54,829 --> 00:09:02,989
alexia so should that does that need to

100
00:09:01,070 --> 00:09:04,699
be considered before we do something

101
00:09:02,990 --> 00:09:06,440
else with their registries to try to

102
00:09:04,699 --> 00:09:08,630
combine them but the scope of what you

103
00:09:06,440 --> 00:09:18,529
said they're not was a little bit

104
00:09:08,630 --> 00:09:23,480
concerning so I'll definitely look into

105
00:09:18,529 --> 00:09:25,269
that all right so it's two separate

106
00:09:23,480 --> 00:09:31,899
registries right yes there has been some

107
00:09:25,269 --> 00:09:39,649
fixed advising died and the coordination

108
00:09:31,899 --> 00:09:42,250
because so it's what I should actually

109
00:09:39,649 --> 00:09:47,290
register all the authorization trainer

110
00:09:42,250 --> 00:09:47,290
authorization paradis into the JWT

111
00:09:49,810 --> 00:09:54,859
is this something you guys could sort

112
00:09:52,459 --> 00:09:57,680
out during this week and come up with a

113
00:09:54,860 --> 00:10:06,019
sort of an idea I think them till the

114
00:09:57,680 --> 00:10:08,329
next session how is that reaching we

115
00:10:06,019 --> 00:10:15,649
would really like to finish this awesome

116
00:10:08,329 --> 00:10:27,140
in Picasa this was for sure okay um

117
00:10:15,649 --> 00:10:29,529
thank you a BCP oh yeah gotta discuss -

118
00:10:27,140 --> 00:10:29,529
okay

119
00:10:33,560 --> 00:10:42,209
or that in Iran's document Mike you Mike

120
00:10:38,820 --> 00:10:49,320
what's that what's that Elly just

121
00:10:42,209 --> 00:10:51,750
literally BCP what's what's the latest

122
00:10:49,320 --> 00:10:54,089
on that document it has a we believe a

123
00:10:51,750 --> 00:11:19,140
discuss like what's the first plan for

124
00:10:54,089 --> 00:11:21,570
that yeah we have reviewing the comments

125
00:11:19,140 --> 00:11:28,770
there's responses but she created just

126
00:11:21,570 --> 00:11:31,310
some of them response to the rest of

127
00:11:28,770 --> 00:11:34,050
them it wasn't the kind of discuss that

128
00:11:31,310 --> 00:11:35,880
you know it's at the tenor of we're

129
00:11:34,050 --> 00:11:38,459
going to stop the document it was the

130
00:11:35,880 --> 00:11:41,490
kind of discuss where we're trying to

131
00:11:38,459 --> 00:11:52,439
improve the exposition of the text okay

132
00:11:41,490 --> 00:11:55,760
and so here create responses to that

133
00:11:52,440 --> 00:12:03,870
discussing progress okay awesome

134
00:11:55,760 --> 00:12:05,760
good thanks Mike okay um I think there

135
00:12:03,870 --> 00:12:09,209
was the good progress with the

136
00:12:05,760 --> 00:12:13,319
introspection response documents I think

137
00:12:09,209 --> 00:12:14,670
they have it's waiting to anything there

138
00:12:13,320 --> 00:12:17,970
were some changes made based on my

139
00:12:14,670 --> 00:12:27,300
review all the issues were cleared but

140
00:12:17,970 --> 00:12:29,610
there's one minor finesse okay MPLS I

141
00:12:27,300 --> 00:12:36,750
think you it's a idea of last call

142
00:12:29,610 --> 00:12:38,760
already right yeah so the key

143
00:12:36,750 --> 00:12:41,310
distribution one is an interesting topic

144
00:12:38,760 --> 00:12:42,750
because last time I talked about this

145
00:12:41,310 --> 00:12:44,160
briefly and then there was this question

146
00:12:42,750 --> 00:12:48,000
that came up of what

147
00:12:44,160 --> 00:12:51,810
in a case where the key that the client

148
00:12:48,000 --> 00:12:55,199
is presenting for inclusion into the

149
00:12:51,810 --> 00:12:57,209
access token it's not the same that is

150
00:12:55,199 --> 00:12:59,899
being used for authentication by the

151
00:12:57,209 --> 00:13:05,008
client to the authorization server and

152
00:12:59,899 --> 00:13:07,560
we tabled that issue and a co-worker of

153
00:13:05,009 --> 00:13:10,920
mine did a formal analysis of it in

154
00:13:07,560 --> 00:13:14,790
which concluded that it's fine from that

155
00:13:10,920 --> 00:13:16,050
point of view and I he posted it to the

156
00:13:14,790 --> 00:13:17,759
list but there was no follow-up

157
00:13:16,050 --> 00:13:21,209
discussion on this afterwards so maybe

158
00:13:17,759 --> 00:13:23,790
this is also a topic that a few of us

159
00:13:21,209 --> 00:13:27,138
Daniel and and and I and maybe who

160
00:13:23,790 --> 00:13:29,550
someone else who who is into that topic

161
00:13:27,139 --> 00:13:31,980
should discuss to me we can come up with

162
00:13:29,550 --> 00:13:34,680
a story specifically in the context of

163
00:13:31,980 --> 00:13:37,500
people because it touches on that aspect

164
00:13:34,680 --> 00:13:40,050
as well and if if you guys think we

165
00:13:37,500 --> 00:13:45,089
should nevertheless sort of have a

166
00:13:40,050 --> 00:13:46,979
separate mechanism to prove possession

167
00:13:45,089 --> 00:13:49,110
of the private key from the client to

168
00:13:46,980 --> 00:13:50,519
the authorization server in the

169
00:13:49,110 --> 00:13:52,769
specification which is currently not

170
00:13:50,519 --> 00:13:54,689
they are currently it's only from it

171
00:13:52,769 --> 00:13:57,779
would be done from the client to the

172
00:13:54,689 --> 00:13:59,519
resource server then we need to do that

173
00:13:57,779 --> 00:14:03,870
as soon as possible because this is a

174
00:13:59,519 --> 00:14:06,449
document that's fits into the ace work

175
00:14:03,870 --> 00:14:07,980
where we tried to make alignment and you

176
00:14:06,449 --> 00:14:10,410
may remember all these discussions that

177
00:14:07,980 --> 00:14:13,769
we had with the ACE group and so this is

178
00:14:10,410 --> 00:14:18,719
sort of the HTTP part of the counterpart

179
00:14:13,769 --> 00:14:21,180
of what they have been doing in coop so

180
00:14:18,720 --> 00:14:24,089
we need to figure this out I understand

181
00:14:21,180 --> 00:14:26,339
that this is maybe a little bit beyond

182
00:14:24,089 --> 00:14:28,559
what most people want to look at form an

183
00:14:26,339 --> 00:14:33,589
analysis of specifications but I think

184
00:14:28,559 --> 00:14:33,589
it's a good good thing that we do that

185
00:14:33,620 --> 00:14:43,470
Robin do you have a plus-one

186
00:14:35,670 --> 00:14:45,750
anytime we can Alice was actually

187
00:14:43,470 --> 00:14:47,850
something that we did a tutorial on at

188
00:14:45,750 --> 00:14:50,309
the our security workshop which I think

189
00:14:47,850 --> 00:14:55,829
Oh a security workshop and will again be

190
00:14:50,309 --> 00:14:58,738
covered later okay good thanks and okay

191
00:14:55,829 --> 00:15:02,099
reciprocal I often talk about later on a

192
00:14:58,739 --> 00:15:04,679
resource indication I think it's a idea

193
00:15:02,100 --> 00:15:07,259
last call a skills topic we'll talk

194
00:15:04,679 --> 00:15:11,279
about this later on and and how can

195
00:15:07,259 --> 00:15:14,459
exchange a same thing it's a thing idea

196
00:15:11,279 --> 00:15:15,959
last call is it now token exchange has

197
00:15:14,459 --> 00:15:18,779
progressed it's been approved by the I

198
00:15:15,959 --> 00:15:20,219
USGS is the editors cute okay quite

199
00:15:18,779 --> 00:15:25,799
close okay awesome

200
00:15:20,220 --> 00:15:31,470
good and kill him okay next let's move

201
00:15:25,799 --> 00:15:34,649
on how do we get amethyst no that's not

202
00:15:31,470 --> 00:15:39,149
what was how do you accept this thing

203
00:15:34,649 --> 00:15:41,540
okay okay Danielle do you wanna come up

204
00:15:39,149 --> 00:15:41,540
here please

205
00:15:59,869 --> 00:16:09,959
yeah yeah yeah screen it go try now

206
00:16:05,240 --> 00:16:12,679
yeah thank you as many of you know we

207
00:16:09,959 --> 00:16:18,209
have this Roth security workshop since

208
00:16:12,679 --> 00:16:21,059
2016 the fourth edition of which we held

209
00:16:18,209 --> 00:16:25,469
in March in Stuttgart Germany the

210
00:16:21,059 --> 00:16:27,420
security workshop is a place where we

211
00:16:25,470 --> 00:16:30,350
have three days of talks and escape

212
00:16:27,420 --> 00:16:35,219
discussions we have lots of time to

213
00:16:30,350 --> 00:16:38,999
discuss is discuss issues in death much

214
00:16:35,220 --> 00:16:41,399
more than we have at this event it

215
00:16:38,999 --> 00:16:43,470
started out as a venue to discuss

216
00:16:41,399 --> 00:16:46,799
security topics but nowadays of course

217
00:16:43,470 --> 00:16:51,470
we also talk about many other topics in

218
00:16:46,799 --> 00:16:54,589
the earth space and of MediConnect space

219
00:16:51,470 --> 00:17:00,480
at the latest iteration of this workshop

220
00:16:54,589 --> 00:17:03,899
we not only had a pre-scheduled schedule

221
00:17:00,480 --> 00:17:06,010
but also an unconference time which I

222
00:17:03,899 --> 00:17:07,990
think was very useful

223
00:17:06,010 --> 00:17:10,629
people can upload a lot of interesting

224
00:17:07,990 --> 00:17:15,549
topics and a lot of also spontaneous

225
00:17:10,630 --> 00:17:19,240
ideas to discuss stuff now the question

226
00:17:15,549 --> 00:17:21,280
is where do we want to hold the next

227
00:17:19,240 --> 00:17:23,949
event and so as you can see the last

228
00:17:21,280 --> 00:17:26,349
ones were in Korea Germany and Zurich in

229
00:17:23,949 --> 00:17:30,150
Switzerland train to Italy an intricate

230
00:17:26,349 --> 00:17:34,199
in Germany and I would like to find a

231
00:17:30,150 --> 00:17:38,140
location and a time for the next event

232
00:17:34,200 --> 00:17:40,929
where can we do that well I heard two

233
00:17:38,140 --> 00:17:45,400
proposals regarding that first one is

234
00:17:40,929 --> 00:17:48,160
Stein enorm he proposes to do something

235
00:17:45,400 --> 00:17:51,640
in Norway there are multiple locations

236
00:17:48,160 --> 00:17:53,620
possible for example Oslo at run time of

237
00:17:51,640 --> 00:17:58,240
course they are also much more remote

238
00:17:53,620 --> 00:18:00,040
places in Norway where we could go which

239
00:17:58,240 --> 00:18:03,280
is essentially a trade-off between

240
00:18:00,040 --> 00:18:11,740
travel time and location quality thanks

241
00:18:03,280 --> 00:18:14,440
Robert what's that yeah and we can also

242
00:18:11,740 --> 00:18:16,419
do that and stood that at the group of

243
00:18:14,440 --> 00:18:18,429
course as they said they would at least

244
00:18:16,419 --> 00:18:22,090
fill in if nobody else would do that

245
00:18:18,429 --> 00:18:23,890
they could host the event as well when

246
00:18:22,090 --> 00:18:27,850
would we do that well if we have it in

247
00:18:23,890 --> 00:18:31,210
Europe then maybe not we don't attach it

248
00:18:27,850 --> 00:18:36,850
to the ITF event 107 which in Vancouver

249
00:18:31,210 --> 00:18:41,440
but we might do that and may where the

250
00:18:36,850 --> 00:18:44,860
EIC is Munich or close to the ITF 108

251
00:18:41,440 --> 00:18:46,480
event which is in Madrid Spain I do an

252
00:18:44,860 --> 00:18:50,490
assent that Spain is not exactly close

253
00:18:46,480 --> 00:18:50,490
to Norway but I think it's close enough

254
00:18:51,090 --> 00:19:00,330
it's the same continent exactly okay

255
00:18:56,669 --> 00:19:04,390
does anybody have another proposal

256
00:19:00,330 --> 00:19:07,840
something that is in favor or against

257
00:19:04,390 --> 00:19:10,630
one of these locations so if you if you

258
00:19:07,840 --> 00:19:13,178
have some contact to universities or if

259
00:19:10,630 --> 00:19:15,280
your company is willing to host such an

260
00:19:13,179 --> 00:19:19,809
event and we are talking about like a 50

261
00:19:15,280 --> 00:19:35,559
person pair of events s say 70 was 70

262
00:19:19,809 --> 00:19:41,619
then you want to go to the microphone oh

263
00:19:35,559 --> 00:19:44,379
yeah the computing science department at

264
00:19:41,619 --> 00:19:48,759
UBC is quite likely to want to sponsor

265
00:19:44,379 --> 00:19:55,799
something like that so if people want me

266
00:19:48,759 --> 00:19:55,799
to pursue it then I can I like Norway I

267
00:19:55,830 --> 00:20:02,468
have reason to go to Tron time so I'm

268
00:19:59,229 --> 00:20:06,399
sound with that make uber is also not

269
00:20:02,469 --> 00:20:13,599
well but very cool study I see I may be

270
00:20:06,399 --> 00:20:16,809
here it's good so um please think about

271
00:20:13,599 --> 00:20:19,928
it and please ask your employer or

272
00:20:16,809 --> 00:20:22,418
friends from the University we would

273
00:20:19,929 --> 00:20:35,589
like obviously start planning fairly

274
00:20:22,419 --> 00:20:44,710
soon yeah if you want to host there okay

275
00:20:35,589 --> 00:20:47,589
Scandinavia going strong send us a

276
00:20:44,710 --> 00:20:49,299
letter that's Oslo I should eat says

277
00:20:47,589 --> 00:21:04,119
that she can check on for drug

278
00:20:49,299 --> 00:21:07,989
sponsoring first all UK in terms of

279
00:21:04,119 --> 00:21:11,499
places that we've been Scandinavia is

280
00:21:07,989 --> 00:21:13,679
more diverse than Vancouver yeah that's

281
00:21:11,499 --> 00:21:13,679
right

282
00:21:25,490 --> 00:21:31,850
okay so if you have a good ideas or know

283
00:21:28,590 --> 00:21:36,000
somebody who's willing to sponsor this

284
00:21:31,850 --> 00:21:38,539
just contact me we are probably make a

285
00:21:36,000 --> 00:22:05,460
decision here soon thank you

286
00:21:38,539 --> 00:22:09,809
thanks Daniel dick lower everybody so

287
00:22:05,460 --> 00:22:12,509
the last time I talked about this Hans

288
00:22:09,809 --> 00:22:18,389
was confused as to how it worked so I

289
00:22:12,509 --> 00:22:19,649
put together you were I was giving you

290
00:22:18,389 --> 00:22:24,120
the benefit of the doubt about other

291
00:22:19,649 --> 00:22:25,559
things but it wasn't clear at times I

292
00:22:24,120 --> 00:22:27,120
get confused thinking about it like

293
00:22:25,559 --> 00:22:29,639
who's doing what and where is it going

294
00:22:27,120 --> 00:22:31,500
because it's you you're you're switching

295
00:22:29,639 --> 00:22:35,939
back and forth quite a bit and so I

296
00:22:31,500 --> 00:22:37,769
added to the draft ASCII art diagram

297
00:22:35,940 --> 00:22:40,070
which I've got in Nice art here is that

298
00:22:37,769 --> 00:22:42,899
big enough people can kind of see that

299
00:22:40,070 --> 00:22:53,580
people in the back can you read it ok

300
00:22:42,899 --> 00:22:56,489
excellent that's beyond my graphical

301
00:22:53,580 --> 00:22:58,949
capabilities but also the ASCII art then

302
00:22:56,490 --> 00:23:04,799
is in the text version also as opposed

303
00:22:58,950 --> 00:23:10,500
to not and I already grew it so this was

304
00:23:04,799 --> 00:23:12,539
easy to do in keynote so this is just

305
00:23:10,500 --> 00:23:14,220
your standard Oh awesome how you go and

306
00:23:12,539 --> 00:23:16,529
you get an authorization request to the

307
00:23:14,220 --> 00:23:20,399
resource owner you get some kind of

308
00:23:16,529 --> 00:23:22,919
grant back and then make a call with

309
00:23:20,399 --> 00:23:24,779
that grant and then this is the one

310
00:23:22,919 --> 00:23:26,940
place where things change which is the

311
00:23:24,779 --> 00:23:28,710
authorization server says hey I would

312
00:23:26,940 --> 00:23:31,230
like to go and get a token as well

313
00:23:28,710 --> 00:23:33,389
optionally and can go and put in a

314
00:23:31,230 --> 00:23:37,260
request of which scopes it would like to

315
00:23:33,389 --> 00:23:41,059
have at that point

316
00:23:37,260 --> 00:23:45,389
the plans really starting to change to

317
00:23:41,059 --> 00:23:47,010
be the resource owner and it's saying

318
00:23:45,389 --> 00:23:48,479
okay well here's what the reciprocal

319
00:23:47,010 --> 00:23:50,158
this is what the other guy wanted if he

320
00:23:48,480 --> 00:23:52,529
asked it otherwise it's potentially

321
00:23:50,159 --> 00:23:56,130
pre-configured what the other what party

322
00:23:52,529 --> 00:24:02,279
he wanted and then the resource runner

323
00:23:56,130 --> 00:24:05,389
calls the Aussie server did you have

324
00:24:02,279 --> 00:24:12,179
something you wanted to add Mike

325
00:24:05,389 --> 00:24:18,949
okay can I can I start again thank you

326
00:24:12,179 --> 00:24:21,389
Mike so that it hands over the grant and

327
00:24:18,950 --> 00:24:23,639
party B knows the context because it's

328
00:24:21,389 --> 00:24:25,590
getting back its access token and so

329
00:24:23,639 --> 00:24:27,330
that's why we can sort of do this behind

330
00:24:25,590 --> 00:24:30,330
the scenes because you've got context

331
00:24:27,330 --> 00:24:33,779
there before the resource owner sends

332
00:24:30,330 --> 00:24:36,990
out over there's likely some interaction

333
00:24:33,779 --> 00:24:38,700
because from a user experience point of

334
00:24:36,990 --> 00:24:41,100
view if you've if you're going through

335
00:24:38,700 --> 00:24:43,019
the browser you're back over at the

336
00:24:41,100 --> 00:24:45,840
party that started off making the

337
00:24:43,019 --> 00:24:49,139
request and then you can ask the user is

338
00:24:45,840 --> 00:24:50,908
it okay for the other party to acts do

339
00:24:49,139 --> 00:24:53,370
these things with you and so you would

340
00:24:50,909 --> 00:24:55,620
be getting consent from the user at this

341
00:24:53,370 --> 00:24:58,139
point before you make this call over and

342
00:24:55,620 --> 00:24:59,729
so you make the call over the other side

343
00:24:58,139 --> 00:25:02,699
knows which user it is because the

344
00:24:59,730 --> 00:25:05,610
access token and ends a grant over and

345
00:25:02,700 --> 00:25:07,710
the client then goes and does the

346
00:25:05,610 --> 00:25:11,908
reverse of essentially what was see

347
00:25:07,710 --> 00:25:13,590
there and oops oops I was I pushed the

348
00:25:11,909 --> 00:25:20,130
wrong button back and then it gets back

349
00:25:13,590 --> 00:25:23,610
it's access token that'll make sense or

350
00:25:20,130 --> 00:25:26,220
is it still confusing okay so that's not

351
00:25:23,610 --> 00:25:29,428
about it which hopefully makes it more

352
00:25:26,220 --> 00:25:35,639
clear to people what is going on in the

353
00:25:29,429 --> 00:25:39,570
process I think last time people made a

354
00:25:35,639 --> 00:25:41,908
couple of comments on the dock which I

355
00:25:39,570 --> 00:25:43,289
didn't take his notes and and I didn't

356
00:25:41,909 --> 00:25:45,900
put him in there so if they could make

357
00:25:43,289 --> 00:25:48,809
those comments again

358
00:25:45,900 --> 00:25:50,850
well actually I think I did take him as

359
00:25:48,809 --> 00:25:55,168
notes but I don't have that laptop

360
00:25:50,850 --> 00:25:57,809
anymore so they went away and everything

361
00:25:55,169 --> 00:25:58,890
is it Gordon you too obscene I know but

362
00:25:57,809 --> 00:26:01,110
that's something I don't know that it

363
00:25:58,890 --> 00:26:05,659
was in the minutes of the meeting it was

364
00:26:01,110 --> 00:26:09,959
something I wrote down okay so I think

365
00:26:05,659 --> 00:26:11,580
maybe we're ready for last call on this

366
00:26:09,960 --> 00:26:16,470
or people people to read it over and

367
00:26:11,580 --> 00:26:20,490
look at some knits of anything so can we

368
00:26:16,470 --> 00:26:28,649
can we see shelf hand to read this

369
00:26:20,490 --> 00:26:39,840
document diagrams the only main

370
00:26:28,649 --> 00:26:58,699
difference two three four okay was that

371
00:26:39,840 --> 00:27:02,610
you half read it Brian yeah so yeah I

372
00:26:58,700 --> 00:27:05,700
guess okay we didn't see any significant

373
00:27:02,610 --> 00:27:12,658
kind of changes or requests to change

374
00:27:05,700 --> 00:27:14,490
something so I it seems to me so so yeah

375
00:27:12,659 --> 00:27:16,860
it seems to me I think it will force

376
00:27:14,490 --> 00:27:19,890
also people to kind of look at it again

377
00:27:16,860 --> 00:27:22,979
so I I think we it makes sense to call

378
00:27:19,890 --> 00:27:23,340
for a wake up last call and see how that

379
00:27:22,980 --> 00:27:26,880
goes

380
00:27:23,340 --> 00:27:40,559
right so it's it that's we think we'll

381
00:27:26,880 --> 00:27:42,299
be doing here good is it launches into

382
00:27:40,559 --> 00:27:44,129
this diagram immediately so there's no

383
00:27:42,299 --> 00:27:46,200
like a one paragraph introduction and

384
00:27:44,130 --> 00:27:48,870
then there's this diagram it's something

385
00:27:46,200 --> 00:27:51,659
that would be helpful I think is to just

386
00:27:48,870 --> 00:27:54,239
prepare the user with a you space right

387
00:27:51,659 --> 00:27:57,179
in the in the introduction you have this

388
00:27:54,240 --> 00:27:58,100
sort of generalized here's here's why

389
00:27:57,179 --> 00:28:01,250
we're try

390
00:27:58,100 --> 00:28:03,439
to do this right but I think before we

391
00:28:01,250 --> 00:28:03,890
get to the actual flow which is great by

392
00:28:03,440 --> 00:28:08,180
the way

393
00:28:03,890 --> 00:28:10,940
you know kudos today but I think that

394
00:28:08,180 --> 00:28:13,520
we're really helpful to have a use case

395
00:28:10,940 --> 00:28:17,060
as something that the reader to use the

396
00:28:13,520 --> 00:28:21,170
flow to read against and I know I did

397
00:28:17,060 --> 00:28:22,850
say this at one time but I I know

398
00:28:21,170 --> 00:28:26,000
there's nothing to be done here but I

399
00:28:22,850 --> 00:28:27,709
hate the word reciprocal because we have

400
00:28:26,000 --> 00:28:30,110
a mutual draft and now we have a

401
00:28:27,710 --> 00:28:37,040
reciprocal draft and the mutual draft is

402
00:28:30,110 --> 00:28:39,139
all gone right and because that does

403
00:28:37,040 --> 00:28:40,820
this funds as well if there were another

404
00:28:39,140 --> 00:28:44,090
word in English that you can think of

405
00:28:40,820 --> 00:28:45,970
that wonderful but that's just a

406
00:28:44,090 --> 00:28:48,919
suggestion

407
00:28:45,970 --> 00:28:50,600
Thanks now if you have a no less

408
00:28:48,920 --> 00:28:53,840
adjusted word since we did move from

409
00:28:50,600 --> 00:28:58,699
mutual to reciprocal yeah to keep the

410
00:28:53,840 --> 00:29:10,970
different mutual because it's otherwise

411
00:28:58,700 --> 00:29:14,480
confusing right go ahead Dana what we're

412
00:29:10,970 --> 00:29:17,330
talking about at least if there are two

413
00:29:14,480 --> 00:29:21,670
resource orders or just one in this case

414
00:29:17,330 --> 00:29:24,889
it's just one resource or in doing these

415
00:29:21,670 --> 00:29:30,800
authorization from for the both parties

416
00:29:24,890 --> 00:29:38,150
right did you have my question I

417
00:29:30,800 --> 00:29:39,950
understand the current thinking the use

418
00:29:38,150 --> 00:29:43,310
cases I think of there's one resource

419
00:29:39,950 --> 00:29:45,860
owner but I'm thinking there's

420
00:29:43,310 --> 00:29:51,169
situations where there may be more than

421
00:29:45,860 --> 00:29:52,370
one but I'm not sure so I don't know I

422
00:29:51,170 --> 00:29:56,780
don't know yeah let me let me think

423
00:29:52,370 --> 00:29:58,280
about that's a good comment yeah yeah

424
00:29:56,780 --> 00:30:00,710
and then I'd have to change your diagram

425
00:29:58,280 --> 00:30:06,980
and just say resource owner instead of a

426
00:30:00,710 --> 00:30:07,340
and B yeah that's a good comment as was

427
00:30:06,980 --> 00:30:09,740
the

428
00:30:07,340 --> 00:30:17,209
the suggestion to add a use case I will

429
00:30:09,740 --> 00:30:18,920
do that thank you okay I think if if you

430
00:30:17,210 --> 00:30:20,720
can update that the draft with the

431
00:30:18,920 --> 00:30:22,910
latest comment just to address those and

432
00:30:20,720 --> 00:30:26,360
then we'll we'll call for a wittle blast

433
00:30:22,910 --> 00:30:35,200
call now that bogans okay so it's good

434
00:30:26,360 --> 00:30:35,199
okay I will do thank you thank you okay

435
00:30:37,750 --> 00:30:45,730
yeah that's good yeah I think Daniel

436
00:30:59,560 --> 00:31:04,030
well use the browser

437
00:31:16,330 --> 00:31:28,300
well this is Friday let me just asatyam

438
00:31:25,330 --> 00:31:32,740
the first slide is not that important

439
00:31:28,300 --> 00:31:35,320
so it's me again hello so I'd like to

440
00:31:32,740 --> 00:31:37,930
talk about the author security best card

441
00:31:35,320 --> 00:31:42,820
practice it's currently your working

442
00:31:37,930 --> 00:31:49,120
group draft and it's very close to yeah

443
00:31:42,820 --> 00:31:49,740
finish state what does it what's in the

444
00:31:49,120 --> 00:31:54,639
draft

445
00:31:49,740 --> 00:31:57,400
well this BCP refines and enhances the

446
00:31:54,640 --> 00:32:01,900
security guidance that we already give

447
00:31:57,400 --> 00:32:05,080
for example in our c 68 19 and also in

448
00:32:01,900 --> 00:32:09,460
the security considerations of 67 49 and

449
00:32:05,080 --> 00:32:13,720
sixty seven fifty the important thing

450
00:32:09,460 --> 00:32:17,140
here is that we have a updated and more

451
00:32:13,720 --> 00:32:21,850
comprehensive threat model than before

452
00:32:17,140 --> 00:32:23,950
we have described many attacks that were

453
00:32:21,850 --> 00:32:27,780
discovered recently over the last years

454
00:32:23,950 --> 00:32:29,680
let's say and we have concrete

455
00:32:27,780 --> 00:32:32,770
actionable recommendations for

456
00:32:29,680 --> 00:32:37,570
implementers of oauth2

457
00:32:32,770 --> 00:32:42,520
to defend against these attacks what did

458
00:32:37,570 --> 00:32:45,669
we do since the last ITF well I have not

459
00:32:42,520 --> 00:32:47,950
been to many changes one changes that we

460
00:32:45,670 --> 00:32:50,980
now discourage the use of the resource

461
00:32:47,950 --> 00:32:54,760
owner password credentials grant we say

462
00:32:50,980 --> 00:32:58,360
it must not be used I think the reason

463
00:32:54,760 --> 00:32:59,710
is pretty clear this grant type exposes

464
00:32:58,360 --> 00:33:01,510
credentials to the client it's

465
00:32:59,710 --> 00:33:06,090
essentially a plant men in the middle

466
00:33:01,510 --> 00:33:08,680
attack it increases the attack surface

467
00:33:06,090 --> 00:33:12,459
that users exposed to our users

468
00:33:08,680 --> 00:33:14,740
credentials and it's not are not easily

469
00:33:12,460 --> 00:33:16,600
adaptable to many modern authentication

470
00:33:14,740 --> 00:33:17,380
mechanisms like two-factor

471
00:33:16,600 --> 00:33:20,980
authentication

472
00:33:17,380 --> 00:33:23,170
web authentication web crypto and the

473
00:33:20,980 --> 00:33:26,280
mighty self authentication that you have

474
00:33:23,170 --> 00:33:26,280
for example at Google

475
00:33:26,350 --> 00:33:31,990
we say the resource on a password

476
00:33:28,150 --> 00:33:36,760
credentials grant must not be used the

477
00:33:31,990 --> 00:33:40,630
next thing is input by via madam he

478
00:33:36,760 --> 00:33:43,030
noticed that in some rare cases a client

479
00:33:40,630 --> 00:33:45,490
may be able to impersonate a resource

480
00:33:43,030 --> 00:33:48,668
owner that can happen if there's a

481
00:33:45,490 --> 00:33:51,010
confusion between this cell claim that

482
00:33:48,669 --> 00:33:54,010
is used for a client in the client

483
00:33:51,010 --> 00:33:56,140
credentials grant and the sub claim that

484
00:33:54,010 --> 00:33:59,169
is used for a resource owner in the

485
00:33:56,140 --> 00:34:02,080
authorization code grant this may happen

486
00:33:59,169 --> 00:34:05,890
if for example the client uses dynamic

487
00:34:02,080 --> 00:34:08,290
registration and the client itself can

488
00:34:05,890 --> 00:34:14,520
influence its sub value that is later

489
00:34:08,290 --> 00:34:17,529
used by the AES for that client yes just

490
00:34:14,520 --> 00:34:20,440
how the client is not allowed to choose

491
00:34:17,530 --> 00:34:22,300
its client ID in dynamic registration so

492
00:34:20,440 --> 00:34:24,850
with us anyway it to essentially

493
00:34:22,300 --> 00:34:32,320
influence that ok so just if it's a live

494
00:34:24,850 --> 00:34:35,469
set some other field and then it I would

495
00:34:32,320 --> 00:34:37,629
recommend that that language be very

496
00:34:35,469 --> 00:34:40,658
clear that it's not talking about

497
00:34:37,629 --> 00:34:43,060
picking client IDs yeah that's right

498
00:34:40,659 --> 00:34:46,800
yeah I think I think it should be a fit

499
00:34:43,060 --> 00:34:52,239
but we can't talk about them yeah ok

500
00:34:46,800 --> 00:34:54,220
yeah and then the yes so the subtle

501
00:34:52,239 --> 00:34:58,359
value might be influencing them confused

502
00:34:54,219 --> 00:35:00,580
for a set value of a resource owner so

503
00:34:58,359 --> 00:35:03,009
the recommendation is clear the client

504
00:35:00,580 --> 00:35:04,810
should not be able to select or

505
00:35:03,010 --> 00:35:10,300
influence the set value that is later

506
00:35:04,810 --> 00:35:14,590
used for the client the next batch of

507
00:35:10,300 --> 00:35:18,700
changes is around pixie we encourage the

508
00:35:14,590 --> 00:35:22,990
use of the pixie mode sha-256 instead of

509
00:35:18,700 --> 00:35:26,560
the plane mode this is because the

510
00:35:22,990 --> 00:35:28,240
authorization request might leak to an

511
00:35:26,560 --> 00:35:30,100
attacker or parts of it might lead to an

512
00:35:28,240 --> 00:35:35,560
attacker or whatever so it's a really

513
00:35:30,100 --> 00:35:37,470
good idea if the pixie challenge is a

514
00:35:35,560 --> 00:35:40,410
hash of the verifier

515
00:35:37,470 --> 00:35:44,220
not the verifier itself therefore we say

516
00:35:40,410 --> 00:35:46,049
that the client should use a pixel

517
00:35:44,220 --> 00:35:48,330
Coachella or should use pixie code

518
00:35:46,050 --> 00:35:50,010
challenge methods that do not expose the

519
00:35:48,330 --> 00:35:54,869
pixie verify and the authorization

520
00:35:50,010 --> 00:35:58,140
request which currently is the sha-256

521
00:35:54,869 --> 00:36:00,960
mode essentially we also say that

522
00:35:58,140 --> 00:36:05,509
authorization service must support big

523
00:36:00,960 --> 00:36:08,160
zoo because pix is super useful

524
00:36:05,510 --> 00:36:11,310
optimization service should publish

525
00:36:08,160 --> 00:36:15,149
pizzas abroad we go back to that point

526
00:36:11,310 --> 00:36:17,369
in a moment and we say that under

527
00:36:15,150 --> 00:36:22,020
certain conditions that we define in the

528
00:36:17,369 --> 00:36:25,859
BCP pixie may replace state for CSF

529
00:36:22,020 --> 00:36:28,590
protection and if pixie is used instead

530
00:36:25,859 --> 00:36:31,380
of State for CSF protection then you're

531
00:36:28,590 --> 00:36:34,619
free to use state to carry application

532
00:36:31,380 --> 00:36:37,040
state or whatever you want we have

533
00:36:34,619 --> 00:36:41,580
defined the conditions under which

534
00:36:37,040 --> 00:36:43,740
client may opt not to use state but

535
00:36:41,580 --> 00:36:45,390
pixie for CSF protection because it's

536
00:36:43,740 --> 00:36:51,720
very important that the client knows

537
00:36:45,390 --> 00:36:55,890
what a does in this case is so yeah so

538
00:36:51,720 --> 00:37:00,500
we have essentially two open topics that

539
00:36:55,890 --> 00:37:04,700
we'd like to discuss the first thing is

540
00:37:00,500 --> 00:37:10,109
do we want to make meter data so our sis

541
00:37:04,700 --> 00:37:14,430
84 14 is metadata mandatory the

542
00:37:10,109 --> 00:37:17,339
background is a client can rely on the

543
00:37:14,430 --> 00:37:22,618
protection that pixie provides only when

544
00:37:17,339 --> 00:37:24,450
they know that AAAS supports pixie so in

545
00:37:22,619 --> 00:37:27,089
particular if line need to know if the

546
00:37:24,450 --> 00:37:30,660
air supports pixie for example when they

547
00:37:27,089 --> 00:37:34,890
want to drop using state as a CSF

548
00:37:30,660 --> 00:37:38,790
protection so the question is kindly we

549
00:37:34,890 --> 00:37:42,029
say the AAS should use metadata to

550
00:37:38,790 --> 00:37:46,619
announced support for pixie but we could

551
00:37:42,030 --> 00:37:49,050
also say the AAS must use metadata to

552
00:37:46,619 --> 00:37:49,910
announce the support for pixie and

553
00:37:49,050 --> 00:37:52,549
because we also say

554
00:37:49,910 --> 00:37:56,328
that every a s must support pixie this

555
00:37:52,549 --> 00:37:59,240
would mean that the metadata our C

556
00:37:56,329 --> 00:38:04,809
essentially becomes a mandatory to

557
00:37:59,240 --> 00:38:08,868
implement for or authorization service

558
00:38:04,809 --> 00:38:20,000
in your opinion would this be a good

559
00:38:08,869 --> 00:38:22,069
idea I think that maybe mandating the

560
00:38:20,000 --> 00:38:24,530
use of metadata no matter how tempting

561
00:38:22,069 --> 00:38:26,660
it may be for some of us might be a step

562
00:38:24,530 --> 00:38:29,809
too far I think it's probably okay to

563
00:38:26,660 --> 00:38:31,879
say if das doesn't advertise Pixy units

564
00:38:29,809 --> 00:38:34,700
metadata or have a metadata you can't

565
00:38:31,880 --> 00:38:37,520
assume that the server does pixie so

566
00:38:34,700 --> 00:38:39,770
it's not safe to rely on it yeah that's

567
00:38:37,520 --> 00:38:44,559
essentially the consensus yet so I think

568
00:38:39,770 --> 00:38:44,559
that's probably okay yeah

569
00:38:53,650 --> 00:39:00,710
Victoria rzf looking actively our

570
00:38:58,640 --> 00:39:02,058
physicians have a sidewalk with I don't

571
00:39:00,710 --> 00:39:05,059
think about these would be reason enough

572
00:39:02,059 --> 00:39:07,970
to catch your to actually adopt metadata

573
00:39:05,059 --> 00:39:11,029
mostly because most of them are already

574
00:39:07,970 --> 00:39:13,009
use the open and he committed for the

575
00:39:11,029 --> 00:39:16,279
information that we needed to publish

576
00:39:13,010 --> 00:39:19,609
such as signing keys if value suppose it

577
00:39:16,279 --> 00:39:22,940
claims and signal so if you wanted to

578
00:39:19,609 --> 00:39:25,009
meet what they already have if you find

579
00:39:22,940 --> 00:39:26,930
a way or bottom visa to they open at the

580
00:39:25,010 --> 00:39:30,799
connect metadata she's ecstatic at it

581
00:39:26,930 --> 00:39:32,750
but why we use banana you could I think

582
00:39:30,799 --> 00:39:35,450
you'll have more success in trying to

583
00:39:32,750 --> 00:39:37,430
get people to know but the official

584
00:39:35,450 --> 00:39:39,740
server method if I haven't seen a lot of

585
00:39:37,430 --> 00:39:44,379
people would go to the lecture just

586
00:39:39,740 --> 00:39:44,379
reveals yeah John

587
00:39:47,289 --> 00:39:52,729
there's no reason why it is same

588
00:39:50,019 --> 00:39:56,299
metadata entries can't be in the open ID

589
00:39:52,729 --> 00:39:59,749
Connect metadata that's sort of the

590
00:39:56,299 --> 00:40:03,619
world normally works anyways and we have

591
00:39:59,749 --> 00:40:06,879
this sort of pod situation because of

592
00:40:03,619 --> 00:40:11,690
get off my lawn

593
00:40:06,880 --> 00:40:14,210
the way that multi-tenant metadata works

594
00:40:11,690 --> 00:40:19,880
is slightly different between open ID

595
00:40:14,210 --> 00:40:30,890
connect and a watt but in general it's

596
00:40:19,880 --> 00:40:33,289
the same I am tracking from octo would

597
00:40:30,890 --> 00:40:36,710
it be another alternate to say that it's

598
00:40:33,289 --> 00:40:38,930
he should be announced in documentation

599
00:40:36,710 --> 00:40:40,940
with that like be an acceptable way for

600
00:40:38,930 --> 00:40:46,940
clients to know whether the AES supports

601
00:40:40,940 --> 00:40:49,190
it documentation like one knows which is

602
00:40:46,940 --> 00:40:52,839
talking about seems like that it's other

603
00:40:49,190 --> 00:40:57,200
things yeah actually I so this is a bit

604
00:40:52,839 --> 00:41:00,380
abbreviated sir one solution could be to

605
00:40:57,200 --> 00:41:04,549
write that all the the text that we

606
00:41:00,380 --> 00:41:06,440
would use would be AAS must use meter

607
00:41:04,549 --> 00:41:08,839
data to announced support for pixie or

608
00:41:06,440 --> 00:41:10,099
another way that is implementation

609
00:41:08,839 --> 00:41:20,499
specific which could be the

610
00:41:10,099 --> 00:41:20,499
documentation okay

611
00:41:22,440 --> 00:41:34,900
okay so I any other comments on that no

612
00:41:31,260 --> 00:41:39,220
okay so yeah one one solution would be

613
00:41:34,900 --> 00:41:44,230
must or so must meter data or another

614
00:41:39,220 --> 00:41:47,980
implementation specific way okay and the

615
00:41:44,230 --> 00:41:50,680
next topic is an attack that is possible

616
00:41:47,980 --> 00:41:52,690
on the earth under certain circumstances

617
00:41:50,680 --> 00:41:57,970
that we discussed them stood guard

618
00:41:52,690 --> 00:42:00,670
briefly and that I'd like to discuss a

619
00:41:57,970 --> 00:42:02,470
bit more here because I'd like to write

620
00:42:00,670 --> 00:42:04,870
something on this attack in the BCP

621
00:42:02,470 --> 00:42:07,569
because we know of this attack we need

622
00:42:04,870 --> 00:42:11,529
to write something and yeah the question

623
00:42:07,570 --> 00:42:13,660
is what we write it's called the pixie

624
00:42:11,530 --> 00:42:15,400
chosen challenged attack although it's

625
00:42:13,660 --> 00:42:19,569
not a direct attack on pixie that it

626
00:42:15,400 --> 00:42:22,060
circumvents pixie in a way in order to

627
00:42:19,570 --> 00:42:25,410
launch that attack we need an attacker

628
00:42:22,060 --> 00:42:27,730
that can read the authorization response

629
00:42:25,410 --> 00:42:30,580
there are many ways in which this could

630
00:42:27,730 --> 00:42:33,100
happen for example costly your is leaked

631
00:42:30,580 --> 00:42:38,069
or locked somewhere maybe because

632
00:42:33,100 --> 00:42:40,360
there's a mix of attack but all this

633
00:42:38,070 --> 00:42:42,880
component used on the mobile device

634
00:42:40,360 --> 00:42:45,760
which leaks this your eyes or something

635
00:42:42,880 --> 00:42:48,970
like that and an attacker needs to be

636
00:42:45,760 --> 00:42:52,870
able to bring his victim to open some

637
00:42:48,970 --> 00:42:58,750
arbitrary URI and now the attack works

638
00:42:52,870 --> 00:43:02,980
as follows the attacker starts a session

639
00:42:58,750 --> 00:43:06,820
with a client and gets the authorization

640
00:43:02,980 --> 00:43:08,890
request your eye from the client so the

641
00:43:06,820 --> 00:43:10,840
attacker just starts okay says just

642
00:43:08,890 --> 00:43:15,100
start a new session get the

643
00:43:10,840 --> 00:43:17,620
authorization your I now the attacker

644
00:43:15,100 --> 00:43:22,240
forwards that authorization UI to the

645
00:43:17,620 --> 00:43:24,970
victim unmodified and a victim will open

646
00:43:22,240 --> 00:43:27,509
that your eye and see the authorization

647
00:43:24,970 --> 00:43:32,129
/ authentication dialog at

648
00:43:27,510 --> 00:43:34,800
yes why would the victim now authorize /

649
00:43:32,130 --> 00:43:37,140
authenticate well maybe because the

650
00:43:34,800 --> 00:43:38,970
victim was expecting something like that

651
00:43:37,140 --> 00:43:43,190
but maybe for a different map so the

652
00:43:38,970 --> 00:43:51,180
victim might be tricked into authorizing

653
00:43:43,190 --> 00:43:53,250
the client the victim doesn't even see

654
00:43:51,180 --> 00:43:54,629
anything regarding authorization

655
00:43:53,250 --> 00:43:55,230
authentication we'll get back to that in

656
00:43:54,630 --> 00:44:00,440
a moment

657
00:43:55,230 --> 00:44:02,640
so the victim authenticate and

658
00:44:00,440 --> 00:44:07,110
authorizes the client to access our data

659
00:44:02,640 --> 00:44:10,529
and then the redirection back to the

660
00:44:07,110 --> 00:44:13,500
client happens but now since we are new

661
00:44:10,530 --> 00:44:15,840
users browser not in the attackers

662
00:44:13,500 --> 00:44:18,150
browser the redirection back to the

663
00:44:15,840 --> 00:44:19,680
client will not be accepted by the

664
00:44:18,150 --> 00:44:22,620
client because the client doesn't have a

665
00:44:19,680 --> 00:44:24,629
session with that user and as I said

666
00:44:22,620 --> 00:44:26,940
before now the attacker can read the

667
00:44:24,630 --> 00:44:31,740
redirection response the authorization

668
00:44:26,940 --> 00:44:35,100
response so the code leaks to the

669
00:44:31,740 --> 00:44:38,509
attacker and the attacker can send that

670
00:44:35,100 --> 00:44:41,700
code and whatever else is in that URI

671
00:44:38,510 --> 00:44:44,700
through the client the client will

672
00:44:41,700 --> 00:44:47,790
exchange the code for a token and will

673
00:44:44,700 --> 00:44:51,089
use that token from now on in a session

674
00:44:47,790 --> 00:44:53,910
to which the attacker has access to so

675
00:44:51,090 --> 00:44:55,640
the attacker can use the grants

676
00:44:53,910 --> 00:45:03,210
associated with that access token

677
00:44:55,640 --> 00:45:06,600
through the client okay so essentially

678
00:45:03,210 --> 00:45:09,990
what happens is the authentication /

679
00:45:06,600 --> 00:45:16,170
authorization part is out sourced by the

680
00:45:09,990 --> 00:45:19,529
attacker to the victim so what can we do

681
00:45:16,170 --> 00:45:21,510
against that as it turns out none of the

682
00:45:19,530 --> 00:45:25,590
existing defenses involve help against

683
00:45:21,510 --> 00:45:28,230
that we could use token binding yeah but

684
00:45:25,590 --> 00:45:31,680
there's the lack of support famously in

685
00:45:28,230 --> 00:45:33,300
some browsers we could use the form post

686
00:45:31,680 --> 00:45:35,190
response mode which would be a

687
00:45:33,300 --> 00:45:37,550
relatively big change depending on what

688
00:45:35,190 --> 00:45:41,930
your implementation looks like

689
00:45:37,550 --> 00:45:44,210
it's also not suitable for apps we could

690
00:45:41,930 --> 00:45:49,700
check the origin or referer header at

691
00:45:44,210 --> 00:45:51,260
bas so that the hess would see that the

692
00:45:49,700 --> 00:45:52,689
authorization request comes from a

693
00:45:51,260 --> 00:45:55,700
different religion

694
00:45:52,690 --> 00:45:57,160
unfortunately the authorization request

695
00:45:55,700 --> 00:45:59,118
is a get request and the fetch

696
00:45:57,160 --> 00:46:03,618
specification says that there's no

697
00:45:59,119 --> 00:46:05,690
original error in such a request

698
00:46:03,619 --> 00:46:09,740
yeah and that's essentially the end of

699
00:46:05,690 --> 00:46:11,690
the things that we could do I discussed

700
00:46:09,740 --> 00:46:13,640
this with John yesterday and we came up

701
00:46:11,690 --> 00:46:16,369
with a new mechanism a relatively simple

702
00:46:13,640 --> 00:46:20,230
mechanism which could defend against

703
00:46:16,369 --> 00:46:23,869
this attack and I called this mechanism

704
00:46:20,230 --> 00:46:28,730
eyeball which may or may not resemble

705
00:46:23,869 --> 00:46:30,950
the Scandinavian furniture but it stands

706
00:46:28,730 --> 00:46:36,200
for integrity verification faltered and

707
00:46:30,950 --> 00:46:39,740
authorization requests the idea is as I

708
00:46:36,200 --> 00:46:41,509
said relatively simple das needs to

709
00:46:39,740 --> 00:46:45,828
check that the authorization request

710
00:46:41,510 --> 00:46:47,839
actually comes from the client itself

711
00:46:45,829 --> 00:46:49,579
not from the attacker so the attacker

712
00:46:47,839 --> 00:46:50,290
didn't forward anything to the users

713
00:46:49,579 --> 00:46:57,230
browser

714
00:46:50,290 --> 00:47:01,640
how would it do that the idea is that

715
00:46:57,230 --> 00:47:06,950
the client in its metadata publish a

716
00:47:01,640 --> 00:47:09,710
so-called I value or I the client then

717
00:47:06,950 --> 00:47:11,118
before redirecting the user through the

718
00:47:09,710 --> 00:47:13,910
authorization server

719
00:47:11,119 --> 00:47:18,020
Stross the authorization request URI in

720
00:47:13,910 --> 00:47:21,770
the web storage of the user's browser in

721
00:47:18,020 --> 00:47:24,099
its on its own origin of course now the

722
00:47:21,770 --> 00:47:30,049
users being redirected to the a s and

723
00:47:24,099 --> 00:47:35,569
the a s then opens an iframe from the I

724
00:47:30,049 --> 00:47:38,059
value RI and sends a post message to

725
00:47:35,569 --> 00:47:40,640
that iframe that post message would just

726
00:47:38,059 --> 00:47:46,400
contain the authorization request URI as

727
00:47:40,640 --> 00:47:50,450
it's seen by the a s the I

728
00:47:46,400 --> 00:47:52,970
would check the local storage of the of

729
00:47:50,450 --> 00:47:55,730
the client because it's running on the

730
00:47:52,970 --> 00:47:58,160
clients origin would then see okay

731
00:47:55,730 --> 00:48:01,160
there's an entry of that URI and would

732
00:47:58,160 --> 00:48:04,129
then answer okay and if it doesn't

733
00:48:01,160 --> 00:48:08,960
answer okay das doesn't continue with

734
00:48:04,130 --> 00:48:11,180
the authorization flow so what we're

735
00:48:08,960 --> 00:48:14,960
doing is we're ensuring the integrity

736
00:48:11,180 --> 00:48:20,390
and origin of all the data in the

737
00:48:14,960 --> 00:48:24,260
authorization request your I and while

738
00:48:20,390 --> 00:48:26,299
this seems like a big change I think

739
00:48:24,260 --> 00:48:28,760
it's actually not such a big change

740
00:48:26,299 --> 00:48:31,430
because for example if you don't have

741
00:48:28,760 --> 00:48:33,950
JavaScript enabled you can safely fall

742
00:48:31,430 --> 00:48:36,950
back to a mode which doesn't provide

743
00:48:33,950 --> 00:48:44,328
provide the protection by Iowa but still

744
00:48:36,950 --> 00:48:49,299
works we can we have integrity / origin

745
00:48:44,329 --> 00:48:53,299
checks for not only the pixi data or

746
00:48:49,299 --> 00:48:55,940
yeah anything so we have the full

747
00:48:53,299 --> 00:48:59,690
authorization request URI that is

748
00:48:55,940 --> 00:49:02,180
checked so state nonce request your I if

749
00:48:59,690 --> 00:49:05,299
you're using that and also the redirect

750
00:49:02,180 --> 00:49:08,868
URI so is and we're also getting rid of

751
00:49:05,299 --> 00:49:12,799
many or most of the attacks targeting

752
00:49:08,869 --> 00:49:15,109
the redirect URI and this is this

753
00:49:12,799 --> 00:49:18,200
mechanism protects against at least

754
00:49:15,109 --> 00:49:20,420
three attacks that I know of the pixie

755
00:49:18,200 --> 00:49:24,410
trolls and challenge attack attacks

756
00:49:20,420 --> 00:49:26,630
using a manipulator redirect URI and at

757
00:49:24,410 --> 00:49:32,580
least one very end of the AAS mix at

758
00:49:26,630 --> 00:49:36,060
attack another person

759
00:49:32,580 --> 00:49:39,930
so this is this is value as I said I

760
00:49:36,060 --> 00:49:42,390
came up with John and I came up with the

761
00:49:39,930 --> 00:49:45,890
idea yesterday so I wrote a draft on

762
00:49:42,390 --> 00:49:45,890
that and I'd like to hear your feedback

763
00:49:47,000 --> 00:49:52,410
so sorry is that a separate draft or is

764
00:49:50,490 --> 00:49:55,290
it both of this that's a separate raft

765
00:49:52,410 --> 00:49:58,759
so in the security disappear we would

766
00:49:55,290 --> 00:50:01,170
probably make this informal reference

767
00:49:58,760 --> 00:50:03,960
because we would not say you have to

768
00:50:01,170 --> 00:50:06,030
implement that but we this is one way to

769
00:50:03,960 --> 00:50:07,470
do it you could also use token binding

770
00:50:06,030 --> 00:50:09,110
if you know the browser supports you

771
00:50:07,470 --> 00:50:11,220
could also use the forum post mode if

772
00:50:09,110 --> 00:50:14,640
you are willing to change your

773
00:50:11,220 --> 00:50:16,379
implementation or you could opt for not

774
00:50:14,640 --> 00:50:27,810
doing anything like this if this is not

775
00:50:16,380 --> 00:50:33,690
in your attacker model this is the best

776
00:50:27,810 --> 00:50:37,460
idea I'm not proud I'm not don't feel

777
00:50:33,690 --> 00:50:40,350
clean about it or anything but it is

778
00:50:37,460 --> 00:50:42,330
anything it's pretty much the only

779
00:50:40,350 --> 00:50:45,870
effective thing that we could think of

780
00:50:42,330 --> 00:50:51,390
without token binding so combining would

781
00:50:45,870 --> 00:50:54,540
be a better solution this does run the

782
00:50:51,390 --> 00:50:58,650
risk of being blocked in Safari by

783
00:50:54,540 --> 00:51:02,790
apples somewhat over actually I don't

784
00:50:58,650 --> 00:51:05,280
think so so I I checked some of the

785
00:51:02,790 --> 00:51:10,370
documentation that is available and they

786
00:51:05,280 --> 00:51:13,410
say yeah at some point of my church

787
00:51:10,370 --> 00:51:17,670
because we're doing something using post

788
00:51:13,410 --> 00:51:22,020
message with iframes cross-site it could

789
00:51:17,670 --> 00:51:26,750
get swept up in anti tracking technology

790
00:51:22,020 --> 00:51:26,750
in the future so it's not without risk

791
00:51:27,920 --> 00:51:36,270
but it's something you could do so the

792
00:51:32,610 --> 00:51:38,650
current status regarding its islets I

793
00:51:36,270 --> 00:51:42,580
read some documentation on the

794
00:51:38,650 --> 00:51:45,310
and tracking protection mechanism by

795
00:51:42,580 --> 00:51:47,890
Apple maybe there's somebody who knows

796
00:51:45,310 --> 00:51:52,540
this stuff better than I but as far as I

797
00:51:47,890 --> 00:51:57,330
understand the current policy is that if

798
00:51:52,540 --> 00:52:00,580
you interact with some website and then

799
00:51:57,330 --> 00:52:03,490
this website is used in a third-party

800
00:52:00,580 --> 00:52:05,819
context then then it's fine so cookies

801
00:52:03,490 --> 00:52:10,060
or web search will be preserved in that

802
00:52:05,820 --> 00:52:11,740
sequence of events what's that an

803
00:52:10,060 --> 00:52:13,090
umbrella yeah so top-level window

804
00:52:11,740 --> 00:52:15,669
contacts your interact with the client

805
00:52:13,090 --> 00:52:17,110
that's work that what we see here and

806
00:52:15,670 --> 00:52:20,110
then it's loaded in a third party

807
00:52:17,110 --> 00:52:26,350
context that should be fine with the

808
00:52:20,110 --> 00:52:29,010
current stats I understand Chrome and

809
00:52:26,350 --> 00:52:31,029
Firefox also are supposed to be blocking

810
00:52:29,010 --> 00:52:33,400
local storage

811
00:52:31,030 --> 00:52:37,120
when third-party cookies are disabled so

812
00:52:33,400 --> 00:52:39,370
this is not just a Safari issue given me

813
00:52:37,120 --> 00:52:42,819
increased attention on things like third

814
00:52:39,370 --> 00:52:45,370
party cookie settings this strikes me as

815
00:52:42,820 --> 00:52:48,220
any solution that has a very short

816
00:52:45,370 --> 00:52:52,270
effective lifetime yes sir as far as I

817
00:52:48,220 --> 00:52:55,600
know the blocking again effects cookies

818
00:52:52,270 --> 00:52:57,880
set in a third party context this cookie

819
00:52:55,600 --> 00:53:01,720
/ rep stores would not be set in a third

820
00:52:57,880 --> 00:53:04,960
party context but read their cookie

821
00:53:01,720 --> 00:53:06,810
settings generally block reading as well

822
00:53:04,960 --> 00:53:11,020
otherwise they're pretty ineffective

823
00:53:06,810 --> 00:53:14,410
from all origins so that's also just

824
00:53:11,020 --> 00:53:17,670
can't speak to specifics but yeah I

825
00:53:14,410 --> 00:53:24,460
would I would be very nervous about this

826
00:53:17,670 --> 00:53:25,990
surviving future reservations it you may

827
00:53:24,460 --> 00:53:28,840
need at least no sorry later wasn't it

828
00:53:25,990 --> 00:53:31,120
it looks like you you're like a bunch of

829
00:53:28,840 --> 00:53:32,620
stuff like you're a cookie or and a lot

830
00:53:31,120 --> 00:53:34,330
of other stuff relate to do it is being

831
00:53:32,620 --> 00:53:37,089
sandbox that's how it appears to the

832
00:53:34,330 --> 00:53:38,680
browser right so you it looks like you

833
00:53:37,090 --> 00:53:41,260
have a cookie or in your hammer as

834
00:53:38,680 --> 00:53:44,230
locals or is sometimes but if nothing

835
00:53:41,260 --> 00:53:47,320
ever persists so you know it's like an

836
00:53:44,230 --> 00:53:51,070
empty it's an empty object always so you

837
00:53:47,320 --> 00:54:03,640
know it's not gonna it's not gonna be

838
00:53:51,070 --> 00:54:06,160
it's not me to experience yeah hi yeah

839
00:54:03,640 --> 00:54:09,250
if you can't redirect the user to like a

840
00:54:06,160 --> 00:54:15,990
main browser window in the flow then

841
00:54:09,250 --> 00:54:17,110
this proxy wait to the mic Philip says

842
00:54:15,990 --> 00:54:19,240
WebKit's

843
00:54:17,110 --> 00:54:21,220
IPT 2.0 is famous for blocking

844
00:54:19,240 --> 00:54:23,560
cross-origin access to local storage so

845
00:54:21,220 --> 00:54:26,290
disabling javascript isn't the only case

846
00:54:23,560 --> 00:54:28,240
it is in the only case of fallback would

847
00:54:26,290 --> 00:54:32,560
have to run for our set

848
00:54:28,240 --> 00:54:34,839
that's what so disable javascript isn't

849
00:54:32,560 --> 00:54:45,400
the only case a fallback would have to

850
00:54:34,840 --> 00:54:48,280
run for yeah let's write all the details

851
00:54:45,400 --> 00:54:50,800
of the technics really not how to'

852
00:54:48,280 --> 00:54:55,270
combining with citrus I'm wondering

853
00:54:50,800 --> 00:54:59,520
aloud there are a great number of

854
00:54:55,270 --> 00:55:17,830
similarities between token by name works

855
00:54:59,520 --> 00:55:20,259
in an alternative technically runs into

856
00:55:17,830 --> 00:55:21,790
the same crossover Chenin issues etc

857
00:55:20,260 --> 00:55:24,130
because you're trying to use it in the

858
00:55:21,790 --> 00:55:27,850
browser but what this does is Gerren

859
00:55:24,130 --> 00:55:31,270
provide the IDP a guarantee that the

860
00:55:27,850 --> 00:55:33,460
request from the client is coming

861
00:55:31,270 --> 00:55:36,460
through the same browser that the client

862
00:55:33,460 --> 00:55:39,640
said at the request to Deepak was not

863
00:55:36,460 --> 00:55:43,150
bound to the browser so it will just say

864
00:55:39,640 --> 00:55:45,839
this is this is from the IP but it might

865
00:55:43,150 --> 00:55:45,840
be in a different browser

866
00:55:49,260 --> 00:55:54,820
well the sentence essentially the goal

867
00:55:52,090 --> 00:55:57,070
of token binding because you have the

868
00:55:54,820 --> 00:56:00,070
refer token binding that signed by the

869
00:55:57,070 --> 00:56:01,750
browser coming through so you get it

870
00:56:00,070 --> 00:56:04,810
provided in the referred token binding

871
00:56:01,750 --> 00:56:06,730
at the a s and when it goes back you can

872
00:56:04,810 --> 00:56:09,400
make sure that it went into end through

873
00:56:06,730 --> 00:56:12,940
the same browser etc so this is this is

874
00:56:09,400 --> 00:56:17,730
doing sort of at the application level a

875
00:56:12,940 --> 00:56:17,730
cookie thing that emulates referred to

876
00:56:18,930 --> 00:56:25,230
we can maybe we can do a say site

877
00:56:22,000 --> 00:56:29,850
session on that at a later and discuss

878
00:56:25,230 --> 00:56:32,170
yeah mitigations also remind us that

879
00:56:29,850 --> 00:56:33,940
rendering a blank page on every

880
00:56:32,170 --> 00:56:36,790
authorization endpoint do you execute

881
00:56:33,940 --> 00:56:43,390
this just blows a nice UX that might

882
00:56:36,790 --> 00:56:53,460
concern so yeah you could hide it

883
00:56:43,390 --> 00:56:58,870
something not sure anyway so we need to

884
00:56:53,460 --> 00:57:02,650
wrap this session up so what I will do

885
00:56:58,870 --> 00:57:04,450
is I will describe this attack or my

886
00:57:02,650 --> 00:57:07,540
planners to describe this attack in the

887
00:57:04,450 --> 00:57:09,640
OAuth PCP security PCP and also

888
00:57:07,540 --> 00:57:11,590
discussed some of the mitigations which

889
00:57:09,640 --> 00:57:14,379
might or might not include this

890
00:57:11,590 --> 00:57:15,760
mitigation but we need to talk about the

891
00:57:14,380 --> 00:57:18,970
attack because we know of the attacks

892
00:57:15,760 --> 00:57:25,810
are we shouldn't yeah just leave it out

893
00:57:18,970 --> 00:57:28,779
from the BCP but other than that the BCP

894
00:57:25,810 --> 00:57:34,290
is almost ready for publication so there

895
00:57:28,780 --> 00:57:34,290
are no big things we need to change and

896
00:57:34,320 --> 00:57:42,010
was it yeah

897
00:57:39,180 --> 00:57:45,120
yeah Vittoria sorry

898
00:57:42,010 --> 00:57:49,030
one thing about they must not use wrong

899
00:57:45,120 --> 00:57:51,069
ice apartment but I think it would be

900
00:57:49,030 --> 00:57:52,930
nice if we'd have some kind of answer

901
00:57:51,070 --> 00:57:55,060
for some of those scenarios where people

902
00:57:52,930 --> 00:57:58,000
have absolutely no alternative like

903
00:57:55,060 --> 00:57:59,500
missing area where I stumbled upon very

904
00:57:58,000 --> 00:58:04,350
often in the last few years when we were

905
00:57:59,500 --> 00:58:07,240
trying not to make visible was a secret

906
00:58:04,350 --> 00:58:10,210
connection strings that imagine that you

907
00:58:07,240 --> 00:58:12,759
already are a wealth of states that to

908
00:58:10,210 --> 00:58:15,370
be the last 20 years you want to be able

909
00:58:12,760 --> 00:58:16,930
to use Wall Street Aziza yeah but no

910
00:58:15,370 --> 00:58:18,880
opportunity whatsoever of throwing

911
00:58:16,930 --> 00:58:22,569
anything at all because it's a

912
00:58:18,880 --> 00:58:24,610
connection stream so we can serve with

913
00:58:22,570 --> 00:58:27,160
that people don't use property but

914
00:58:24,610 --> 00:58:29,950
people will keep having to use these

915
00:58:27,160 --> 00:58:32,730
kind of things enemies the attempted use

916
00:58:29,950 --> 00:58:37,299
of physical servers as they are an

917
00:58:32,730 --> 00:58:39,820
authorizer it's very so those guys will

918
00:58:37,300 --> 00:58:42,220
be in non-compliance so if it's anything

919
00:58:39,820 --> 00:58:46,000
at all that we can do for both scenarios

920
00:58:42,220 --> 00:58:48,580
that we deem wins matter than then we

921
00:58:46,000 --> 00:58:52,090
should hint that otherwise we'll just

922
00:58:48,580 --> 00:58:53,680
tell people you guys are orphaned we put

923
00:58:52,090 --> 00:59:06,160
all your way from the house of a father

924
00:58:53,680 --> 00:59:08,259
you cannot use ourself yeah well it's

925
00:59:06,160 --> 00:59:10,600
not like it's not like everything on the

926
00:59:08,260 --> 00:59:12,670
web needs to be your arthritis no it's

927
00:59:10,600 --> 00:59:16,509
that solution might just be all of the

928
00:59:12,670 --> 00:59:17,860
XS so I suggest we can watch people now

929
00:59:16,510 --> 00:59:20,560
saying if you wanna be self-sufficient

930
00:59:17,860 --> 00:59:22,690
that autism for example instead of

931
00:59:20,560 --> 00:59:24,279
leaving people in these people in which

932
00:59:22,690 --> 00:59:27,340
they really want to do the right thing

933
00:59:24,280 --> 00:59:29,170
that we even know yeah so we should just

934
00:59:27,340 --> 00:59:31,600
get splitted saying yeah sorry

935
00:59:29,170 --> 00:59:33,520
the your scenario you can't solve this

936
00:59:31,600 --> 00:59:39,310
Nadya using X there maybe you could

937
00:59:33,520 --> 00:59:40,630
propose the text for the that's fine now

938
00:59:39,310 --> 00:59:44,350
just for the through Google Translate

939
00:59:40,630 --> 00:59:46,270
any hope you guys yeah I feel a little

940
00:59:44,350 --> 00:59:48,730
bit uneasy about the fact that you just

941
00:59:46,270 --> 00:59:51,740
discussed this attack we had done it's

942
00:59:48,730 --> 00:59:54,890
very brand new baby no it's not then

943
00:59:51,740 --> 00:59:57,950
we first talked about that attack about

944
00:59:54,890 --> 01:00:01,540
one and a half years years ago well

945
00:59:57,950 --> 01:00:05,960
presented a PC or a security workshop

946
01:00:01,540 --> 01:00:08,119
but essentially might take away from the

947
01:00:05,960 --> 01:00:10,220
discussion sofa is like the beep it's a

948
01:00:08,119 --> 01:00:11,990
new document that you knew solution D

949
01:00:10,220 --> 01:00:13,459
the other solutions are not really why

950
01:00:11,990 --> 01:00:15,560
ever yeah but that document is

951
01:00:13,460 --> 01:00:16,099
essentially out of the scope of the DCP

952
01:00:15,560 --> 01:00:18,740
sir

953
01:00:16,099 --> 01:00:20,630
why is that so it's it's an old attack

954
01:00:18,740 --> 01:00:25,430
and we decided we would address it by

955
01:00:20,630 --> 01:00:29,089
using token binding for the request

956
01:00:25,430 --> 01:00:30,710
response and given that that may not be

957
01:00:29,089 --> 01:00:33,890
an option for a large number of people

958
01:00:30,710 --> 01:00:36,950
we came up with an alternative

959
01:00:33,890 --> 01:00:41,660
so the what's new is the alternative not

960
01:00:36,950 --> 01:00:43,490
the attack but we do need I see it is

961
01:00:41,660 --> 01:00:46,609
ready for publication in front of me and

962
01:00:43,490 --> 01:00:49,598
I feel sort of uneasy about sending the

963
01:00:46,609 --> 01:00:53,569
document over to Roman and say oh here's

964
01:00:49,599 --> 01:00:56,359
now the best current practice and then

965
01:00:53,570 --> 01:00:58,490
he would look at the dis lights of this

966
01:00:56,359 --> 01:01:01,250
meeting and say are you really sure

967
01:00:58,490 --> 01:01:09,290
and I'm not um you know what I'm what I

968
01:01:01,250 --> 01:01:20,630
mean well it's not like we don't have

969
01:01:09,290 --> 01:01:24,950
any mitigation we do have you know the

970
01:01:20,630 --> 01:01:27,109
oh the spec that we have that uses token

971
01:01:24,950 --> 01:01:29,799
binding provides a mitigation for this

972
01:01:27,109 --> 01:01:35,359
which we thought would be would cover it

973
01:01:29,800 --> 01:01:37,700
we can say use that also this will

974
01:01:35,359 --> 01:01:42,670
probably not be so unfortunately not be

975
01:01:37,700 --> 01:01:42,669
the last attack that we ever discover so

976
01:01:49,420 --> 01:01:53,380
simple and actionable recommendations

977
01:01:58,100 --> 01:02:04,490
[Music]

978
01:02:00,190 --> 01:02:12,440
declaring the ECP a lot of conversation

979
01:02:04,490 --> 01:02:13,459
we said and so that is so we have to so

980
01:02:12,440 --> 01:02:16,490
we have to continue that conversation

981
01:02:13,460 --> 01:02:19,820
try to come up with a good story but it

982
01:02:16,490 --> 01:02:20,569
is thanks for for trying hard and using

983
01:02:19,820 --> 01:02:24,380
the time yesterday

984
01:02:20,570 --> 01:02:25,460
come here a few something okay think we

985
01:02:24,380 --> 01:02:29,650
are running out of time

986
01:02:25,460 --> 01:02:29,650
yeah yeah we do okay thank you Thanks

987
01:02:49,460 --> 01:02:55,710
all right can you feel screen that

988
01:02:51,839 --> 01:03:01,220
please can you can you fullscreen that

989
01:02:55,710 --> 01:03:04,800
please thank you all right well there's

990
01:03:01,220 --> 01:03:07,709
is another yet yeah it's not there yet

991
01:03:04,800 --> 01:03:09,390
so if it did now there we go except the

992
01:03:07,710 --> 01:03:12,810
clicker is not working yeah there we go

993
01:03:09,390 --> 01:03:14,609
okay we're good sorry I've got about 18

994
01:03:12,810 --> 01:03:17,720
minutes for 68 slides so we're gonna do

995
01:03:14,609 --> 01:03:23,369
what we can I'm going to talk about

996
01:03:17,720 --> 01:03:25,450
who's who I don't shut up dick my name

997
01:03:23,369 --> 01:03:28,540
is Justin richer I'm gonna talk what

998
01:03:25,450 --> 01:03:28,540
[Music]

999
01:03:30,800 --> 01:03:39,930
okay thank you stop talking now dick so

1000
01:03:37,220 --> 01:03:42,299
we're gonna be talking about

1001
01:03:39,930 --> 01:03:45,149
transactional authorization because if

1002
01:03:42,300 --> 01:03:49,829
you look at where OS started about a

1003
01:03:45,150 --> 01:03:51,569
decade or more ago we had two rfcs and

1004
01:03:49,829 --> 01:03:55,560
the world seemed nice and simple but

1005
01:03:51,569 --> 01:03:57,690
today it looks more like this there's a

1006
01:03:55,560 --> 01:03:59,190
lot of other stuff that's going on in

1007
01:03:57,690 --> 01:04:01,560
the world that you need to understand in

1008
01:03:59,190 --> 01:04:04,890
order to understand what's happening

1009
01:04:01,560 --> 01:04:06,299
with OAuth and it's arguable that a new

1010
01:04:04,890 --> 01:04:07,680
developer needs to be able to thread

1011
01:04:06,300 --> 01:04:09,329
their way through all of these and

1012
01:04:07,680 --> 01:04:11,578
that's why we're building so many

1013
01:04:09,329 --> 01:04:13,890
different DCPS to help people guide

1014
01:04:11,579 --> 01:04:16,440
through all of this space in addition to

1015
01:04:13,890 --> 01:04:18,540
that as we were just hearing there are a

1016
01:04:16,440 --> 01:04:20,819
lot of cases where auth doesn't fit and

1017
01:04:18,540 --> 01:04:23,430
so I've been thinking that

1018
01:04:20,819 --> 01:04:25,050
ooofff - as we know it and as we have it

1019
01:04:23,430 --> 01:04:27,390
built today is really starting to reach

1020
01:04:25,050 --> 01:04:29,339
its edges so over the last year or so

1021
01:04:27,390 --> 01:04:31,920
I've started to do an experiment of

1022
01:04:29,339 --> 01:04:34,410
trying to see what it could look like if

1023
01:04:31,920 --> 01:04:36,180
we kind of started with a new base so

1024
01:04:34,410 --> 01:04:38,940
something that was not specifically

1025
01:04:36,180 --> 01:04:41,098
OAuth 2 compatible and that has led me

1026
01:04:38,940 --> 01:04:42,089
to the XYZ project so named because on a

1027
01:04:41,099 --> 01:04:43,859
lark I bought the domain

1028
01:04:42,089 --> 01:04:46,710
Oh XYZ and that seemed like a reasonable

1029
01:04:43,859 --> 01:04:48,359
place to host this so that is a website

1030
01:04:46,710 --> 01:04:50,910
you can go to and follow along during

1031
01:04:48,359 --> 01:04:53,460
the talk I want to reiterate here that

1032
01:04:50,910 --> 01:04:55,649
this is not an extension to OAuth 2 this

1033
01:04:53,460 --> 01:04:57,690
is not a profile of OAuth 2 this is not

1034
01:04:55,650 --> 01:04:59,680
wire compatible with OAuth 2 and that's

1035
01:04:57,690 --> 01:05:02,140
on purpose and I'll get

1036
01:04:59,680 --> 01:05:03,549
- why in just a bit a lot of the

1037
01:05:02,140 --> 01:05:06,040
problems that we have with OAuth - and a

1038
01:05:03,550 --> 01:05:07,780
lot of the attacks we have are dealing

1039
01:05:06,040 --> 01:05:12,730
with the front Channel and now the front

1040
01:05:07,780 --> 01:05:15,340
Channel is a wonderful it's it's a

1041
01:05:12,730 --> 01:05:17,200
wonderful innovation that's been used in

1042
01:05:15,340 --> 01:05:18,580
the OAuth and open ID worlds because the

1043
01:05:17,200 --> 01:05:20,980
user is there in the browser is an

1044
01:05:18,580 --> 01:05:22,390
incredibly flexible platform but on the

1045
01:05:20,980 --> 01:05:23,770
downside there's a whole lot of stuff

1046
01:05:22,390 --> 01:05:25,060
that can go wrong when you're pushing

1047
01:05:23,770 --> 01:05:29,080
information through the front channel

1048
01:05:25,060 --> 01:05:30,759
now this is all reasonable to work with

1049
01:05:29,080 --> 01:05:32,920
except for the fact that OAuth 2 puts

1050
01:05:30,760 --> 01:05:34,810
lots of things through the front channel

1051
01:05:32,920 --> 01:05:36,760
right there's a lot of stuff that goes

1052
01:05:34,810 --> 01:05:38,380
on and this causes a lot of problems so

1053
01:05:36,760 --> 01:05:42,880
many problems that we've got a whole

1054
01:05:38,380 --> 01:05:45,880
list and an ever-growing list of specs

1055
01:05:42,880 --> 01:05:47,440
to close holes in the front channel so

1056
01:05:45,880 --> 01:05:48,880
we're basically closing holes that we

1057
01:05:47,440 --> 01:05:52,180
created in the first place so my

1058
01:05:48,880 --> 01:05:53,980
proposal started with the idea of let's

1059
01:05:52,180 --> 01:05:56,169
not use the front channel unless we

1060
01:05:53,980 --> 01:05:59,380
absolutely have to let's only use it for

1061
01:05:56,170 --> 01:06:01,510
very specific things and as I started to

1062
01:05:59,380 --> 01:06:04,060
work on that I tried to take a step back

1063
01:06:01,510 --> 01:06:07,270
of how could we do that with an OAuth

1064
01:06:04,060 --> 01:06:09,730
like protocol and I kind of stumbled

1065
01:06:07,270 --> 01:06:12,970
into the idea of using a transaction as

1066
01:06:09,730 --> 01:06:14,500
the key thing now o auth has always been

1067
01:06:12,970 --> 01:06:16,450
transactional it's all about the client

1068
01:06:14,500 --> 01:06:17,860
getting a token and then getting it

1069
01:06:16,450 --> 01:06:20,020
authorized from using a token and Center

1070
01:06:17,860 --> 01:06:21,580
and so forth what I decided to do with

1071
01:06:20,020 --> 01:06:25,150
this project was make that transaction

1072
01:06:21,580 --> 01:06:27,100
sort of the singular key element so this

1073
01:06:25,150 --> 01:06:30,040
is the intent registration pattern

1074
01:06:27,100 --> 01:06:32,770
people are using this in extensions to

1075
01:06:30,040 --> 01:06:34,560
OAuth today open banking UK Sivas using

1076
01:06:32,770 --> 01:06:39,910
it families got their own edition of it

1077
01:06:34,560 --> 01:06:42,279
and what I decided to do was if instead

1078
01:06:39,910 --> 01:06:45,310
of trying to build something with OAuth

1079
01:06:42,280 --> 01:06:48,130
to build a protocol based on this

1080
01:06:45,310 --> 01:06:50,200
concept to begin with now the client

1081
01:06:48,130 --> 01:06:52,710
starts by talking directly to the a s in

1082
01:06:50,200 --> 01:06:55,509
the back-channel and sending a JSON post

1083
01:06:52,710 --> 01:06:57,640
because it's 2019 we can use JSON in a

1084
01:06:55,510 --> 01:07:00,280
request yay

1085
01:06:57,640 --> 01:07:02,140
and it contains a bunch of different

1086
01:07:00,280 --> 01:07:04,210
information about what the client is

1087
01:07:02,140 --> 01:07:05,379
trying to do first off there's this

1088
01:07:04,210 --> 01:07:07,270
notion of what I want

1089
01:07:05,380 --> 01:07:09,640
Torsten loader steps got a really great

1090
01:07:07,270 --> 01:07:10,900
blog post that talks about structured

1091
01:07:09,640 --> 01:07:12,020
scopes and the kinds of things we want

1092
01:07:10,900 --> 01:07:13,940
to see there you

1093
01:07:12,020 --> 01:07:15,470
on a garden path about the actual things

1094
01:07:13,940 --> 01:07:17,270
in here because as far as I'm concerned

1095
01:07:15,470 --> 01:07:19,040
there's a whole lot of debate that needs

1096
01:07:17,270 --> 01:07:20,840
to happen the important thing here is

1097
01:07:19,040 --> 01:07:23,690
that those are rich objects there are

1098
01:07:20,840 --> 01:07:26,300
adjacent objects that can describe in

1099
01:07:23,690 --> 01:07:28,490
greater detail what the client is asking

1100
01:07:26,300 --> 01:07:29,750
for next the client needs to be able to

1101
01:07:28,490 --> 01:07:31,640
tell the authorization server how to

1102
01:07:29,750 --> 01:07:35,300
recognize me now this could be something

1103
01:07:31,640 --> 01:07:37,819
so the client is going to send a key or

1104
01:07:35,300 --> 01:07:40,250
key reference to the server much like it

1105
01:07:37,820 --> 01:07:43,100
does with with depop and related things

1106
01:07:40,250 --> 01:07:45,260
like that now this might be a key that

1107
01:07:43,100 --> 01:07:46,490
the server knows before and it kind of

1108
01:07:45,260 --> 01:07:48,110
understands that there are certain

1109
01:07:46,490 --> 01:07:50,299
rights associated with it or it could be

1110
01:07:48,110 --> 01:07:51,890
a key that the client has generated on

1111
01:07:50,300 --> 01:07:55,100
device because it's a mobile application

1112
01:07:51,890 --> 01:07:57,049
installation instance and it's able to

1113
01:07:55,100 --> 01:07:58,370
create that key pair and started off the

1114
01:07:57,050 --> 01:08:00,230
important thing is that the client has

1115
01:07:58,370 --> 01:08:01,940
to prove possession of all referenced

1116
01:08:00,230 --> 01:08:03,800
keys with every call that it makes to

1117
01:08:01,940 --> 01:08:07,820
the authorization server we'll come back

1118
01:08:03,800 --> 01:08:09,350
to that refrain I think this is a place

1119
01:08:07,820 --> 01:08:11,870
where we need to be flexible the thing

1120
01:08:09,350 --> 01:08:14,870
that I have SPECT right now is just take

1121
01:08:11,870 --> 01:08:16,549
that post body use the detached jws put

1122
01:08:14,870 --> 01:08:18,470
it in the header call it a day we could

1123
01:08:16,549 --> 01:08:20,810
use cabbage signatures we can use em TLS

1124
01:08:18,470 --> 01:08:21,950
binding there's a lot of different

1125
01:08:20,810 --> 01:08:23,359
things we could do and I think there's a

1126
01:08:21,950 --> 01:08:26,000
lot of good innovation we can do there

1127
01:08:23,359 --> 01:08:28,520
next up the client can say a little bit

1128
01:08:26,000 --> 01:08:30,380
about itself so this is more the user

1129
01:08:28,520 --> 01:08:31,760
facing information its display name its

1130
01:08:30,380 --> 01:08:33,290
URI and stuff like that this isn't

1131
01:08:31,760 --> 01:08:35,150
really functional information about the

1132
01:08:33,290 --> 01:08:36,589
client because I found that in

1133
01:08:35,149 --> 01:08:39,620
implementing this over the years so

1134
01:08:36,589 --> 01:08:42,830
Ott's model of the client as an entity

1135
01:08:39,620 --> 01:08:45,080
being a hanging point for a lot of

1136
01:08:42,830 --> 01:08:47,089
things like what rights of access what

1137
01:08:45,080 --> 01:08:49,670
types of functions you can do and stuff

1138
01:08:47,089 --> 01:08:52,309
like that ends up being a little a

1139
01:08:49,670 --> 01:08:53,720
little bit weird so in this case this is

1140
01:08:52,310 --> 01:08:55,970
the client just saying here's how I

1141
01:08:53,720 --> 01:08:57,440
describe myself how you recognize me

1142
01:08:55,970 --> 01:08:59,569
what I can do those are all different

1143
01:08:57,439 --> 01:09:01,009
things they may be strongly associated

1144
01:08:59,569 --> 01:09:04,010
with each other but they are really

1145
01:09:01,010 --> 01:09:06,380
different subsets of information this

1146
01:09:04,010 --> 01:09:08,359
got brought up Vittorio actually raised

1147
01:09:06,380 --> 01:09:09,770
this a little bit I think we really need

1148
01:09:08,359 --> 01:09:11,240
to have a separate way to say this is

1149
01:09:09,770 --> 01:09:12,890
the information I know about the user

1150
01:09:11,240 --> 01:09:14,450
this could be an assertion this could be

1151
01:09:12,890 --> 01:09:17,390
a set of verifiable credentials that I'm

1152
01:09:14,450 --> 01:09:19,250
posting this could be a user name

1153
01:09:17,390 --> 01:09:20,390
password this could be any number of

1154
01:09:19,250 --> 01:09:21,649
things that I've collected to know about

1155
01:09:20,390 --> 01:09:23,849
the user that I want to be able to tell

1156
01:09:21,649 --> 01:09:25,979
the das

1157
01:09:23,849 --> 01:09:27,690
we need to have a flexible way to assert

1158
01:09:25,979 --> 01:09:30,979
that information to the EAS and let the

1159
01:09:27,689 --> 01:09:33,960
AAAS make its decisions and finally and

1160
01:09:30,979 --> 01:09:36,479
we need to be able to describe to the a

1161
01:09:33,960 --> 01:09:40,439
s how the client can interact with the

1162
01:09:36,479 --> 01:09:42,118
AH with the user so this is where we

1163
01:09:40,439 --> 01:09:43,738
bridge to that front channel there are

1164
01:09:42,118 --> 01:09:47,130
two parts to it and it's basically how

1165
01:09:43,738 --> 01:09:49,259
can I get the user there and how can I

1166
01:09:47,130 --> 01:09:50,790
get the user back in this particular

1167
01:09:49,259 --> 01:09:53,040
example I'm saying I can send the user

1168
01:09:50,790 --> 01:09:55,619
to an arbitrary URL and when I get them

1169
01:09:53,040 --> 01:09:58,199
back I'm going to be doing a redirect to

1170
01:09:55,619 --> 01:10:00,780
a URI that I host the canonical auth

1171
01:09:58,199 --> 01:10:02,070
code flow so at this point the AAS has

1172
01:10:00,780 --> 01:10:03,809
all of this information and it can

1173
01:10:02,070 --> 01:10:05,820
decide what to do with it it may very

1174
01:10:03,810 --> 01:10:08,250
well decide that it has everything it

1175
01:10:05,820 --> 01:10:10,079
needs to do to issue an access token

1176
01:10:08,250 --> 01:10:11,760
because that's the client credentials

1177
01:10:10,079 --> 01:10:13,530
flow that's a lot of the token exchange

1178
01:10:11,760 --> 01:10:15,599
flows that's all the resource owner to

1179
01:10:13,530 --> 01:10:17,309
flow there's a lot of cases in OAuth

1180
01:10:15,599 --> 01:10:19,619
where we're already doing this but we're

1181
01:10:17,310 --> 01:10:21,599
doing different specialized things in

1182
01:10:19,619 --> 01:10:22,889
order to do that or the auth server can

1183
01:10:21,599 --> 01:10:24,150
look at all of that and say hey this

1184
01:10:22,889 --> 01:10:25,650
isn't good enough and I need to talk to

1185
01:10:24,150 --> 01:10:28,739
the user I need to talk to the user

1186
01:10:25,650 --> 01:10:32,070
myself so I am going to send you to a an

1187
01:10:28,739 --> 01:10:34,019
arbitrary URL that I host this URL needs

1188
01:10:32,070 --> 01:10:36,929
to be unique for the given transaction

1189
01:10:34,020 --> 01:10:38,820
request so this is not a an

1190
01:10:36,929 --> 01:10:40,409
authorization endpoint URL that the

1191
01:10:38,820 --> 01:10:42,299
client adds stuff to this is something

1192
01:10:40,409 --> 01:10:44,119
that is generated and handed to the

1193
01:10:42,300 --> 01:10:46,829
client just in response to this request

1194
01:10:44,119 --> 01:10:49,699
because each step in this process needs

1195
01:10:46,829 --> 01:10:52,440
to point to the next this closes the

1196
01:10:49,699 --> 01:10:54,570
mix-up attack and a lot of other things

1197
01:10:52,440 --> 01:10:56,759
that happen in the OAuth discovery space

1198
01:10:54,570 --> 01:10:58,349
because the client starts at one URL it

1199
01:10:56,760 --> 01:11:00,329
gets pointed to every next step that

1200
01:10:58,349 --> 01:11:02,520
actually proposed this in the OAuth

1201
01:11:00,329 --> 01:11:04,320
world like ten years ago or something

1202
01:11:02,520 --> 01:11:08,699
like that we decided not to listen I

1203
01:11:04,320 --> 01:11:12,269
don't know why the client then sends the

1204
01:11:08,699 --> 01:11:14,098
user over to that URL and it does not

1205
01:11:12,270 --> 01:11:16,619
add any query parameters it does not

1206
01:11:14,099 --> 01:11:18,750
have a client ID it does not add a state

1207
01:11:16,619 --> 01:11:20,549
it doesn't do anything like that alright

1208
01:11:18,750 --> 01:11:22,530
any information that the client needs to

1209
01:11:20,550 --> 01:11:24,300
register for this is all sent in the

1210
01:11:22,530 --> 01:11:25,679
back-channel before any of this happens

1211
01:11:24,300 --> 01:11:27,060
so that all the client needs to do is

1212
01:11:25,679 --> 01:11:28,980
say hey I've got this URL

1213
01:11:27,060 --> 01:11:30,300
I'll get the user over there and the

1214
01:11:28,980 --> 01:11:32,040
authorization server looks up the

1215
01:11:30,300 --> 01:11:34,500
transaction information based on that

1216
01:11:32,040 --> 01:11:36,090
unique incoming URL that tells us what

1217
01:11:34,500 --> 01:11:37,400
client we're talking to what keys have

1218
01:11:36,090 --> 01:11:39,140
been verified what's being

1219
01:11:37,400 --> 01:11:41,210
or maybe even information about what

1220
01:11:39,140 --> 01:11:43,640
user we're expecting which can close a

1221
01:11:41,210 --> 01:11:46,690
lot of the the attacker problems

1222
01:11:43,640 --> 01:11:49,610
including the the pixie based attack

1223
01:11:46,690 --> 01:11:51,230
that we were hearing about before if the

1224
01:11:49,610 --> 01:11:53,750
client knows something about what use

1225
01:11:51,230 --> 01:11:56,150
the user is user does everything that

1226
01:11:53,750 --> 01:11:58,340
you would expect here and then they get

1227
01:11:56,150 --> 01:11:59,870
sent back right now I've got a separate

1228
01:11:58,340 --> 01:12:02,210
state parameter that the client had pre

1229
01:11:59,870 --> 01:12:04,429
registered with that transaction request

1230
01:12:02,210 --> 01:12:06,860
and an interaction handle that comes

1231
01:12:04,429 --> 01:12:09,550
back to the client and then the client

1232
01:12:06,860 --> 01:12:12,259
needs to validate that state value and

1233
01:12:09,550 --> 01:12:14,330
send that back to the authorization

1234
01:12:12,260 --> 01:12:16,969
server now something that I kind of

1235
01:12:14,330 --> 01:12:18,920
glossed over before was that when I got

1236
01:12:16,969 --> 01:12:20,780
back the interaction URL I was given

1237
01:12:18,920 --> 01:12:22,520
what's called a transaction handle that

1238
01:12:20,780 --> 01:12:24,949
transaction handle is now used by the

1239
01:12:22,520 --> 01:12:27,050
client that's the first field they're in

1240
01:12:24,949 --> 01:12:28,519
saying I want to continue the

1241
01:12:27,050 --> 01:12:30,890
transaction that I had already started

1242
01:12:28,520 --> 01:12:32,300
and to prove that I actually sent the

1243
01:12:30,890 --> 01:12:34,040
user and went and did something I have

1244
01:12:32,300 --> 01:12:35,780
this trans I this interaction handle

1245
01:12:34,040 --> 01:12:40,190
this is analogous to the authorization

1246
01:12:35,780 --> 01:12:41,870
code right the client still has to prove

1247
01:12:40,190 --> 01:12:43,009
possession of all keys that it

1248
01:12:41,870 --> 01:12:44,989
referenced when it started the

1249
01:12:43,010 --> 01:12:47,000
transaction even though it's now just

1250
01:12:44,989 --> 01:12:49,070
presenting that transaction handle it

1251
01:12:47,000 --> 01:12:50,989
has to have be able to show that it

1252
01:12:49,070 --> 01:12:53,480
still has control of all of the keys it

1253
01:12:50,989 --> 01:12:55,190
had when it started that and if this

1254
01:12:53,480 --> 01:12:56,659
auth server decides that everything is

1255
01:12:55,190 --> 01:13:00,019
all hunky-dory it can send back an

1256
01:12:56,659 --> 01:13:01,159
access token and we are good to go now I

1257
01:13:00,020 --> 01:13:03,110
can keep talking about this notion of

1258
01:13:01,159 --> 01:13:06,830
handles and so far we've seen how that

1259
01:13:03,110 --> 01:13:08,269
they can be used for the for continuing

1260
01:13:06,830 --> 01:13:11,000
the transaction these can be used

1261
01:13:08,270 --> 01:13:12,560
actually all throughout the system so it

1262
01:13:11,000 --> 01:13:14,120
might seem a little funny to people that

1263
01:13:12,560 --> 01:13:15,710
like we're doing kind of a dynamic

1264
01:13:14,120 --> 01:13:17,179
registration thing every time we're

1265
01:13:15,710 --> 01:13:18,650
always sending client information we're

1266
01:13:17,179 --> 01:13:20,000
always sending key information stuff

1267
01:13:18,650 --> 01:13:23,690
like that that's kind of silly right I

1268
01:13:20,000 --> 01:13:24,980
agree because the server can issue in

1269
01:13:23,690 --> 01:13:26,830
response to either an initial

1270
01:13:24,980 --> 01:13:29,809
transaction or an out-of-band

1271
01:13:26,830 --> 01:13:31,730
interaction with the developer a client

1272
01:13:29,810 --> 01:13:36,199
handle and key handle that the client

1273
01:13:31,730 --> 01:13:40,400
can use in lieu of the the actual JSON

1274
01:13:36,199 --> 01:13:42,650
document and the transaction request

1275
01:13:40,400 --> 01:13:44,659
then looks more like this so instead of

1276
01:13:42,650 --> 01:13:46,129
sending an object I send in this case a

1277
01:13:44,659 --> 01:13:48,320
string because it was a bearer type

1278
01:13:46,130 --> 01:13:49,500
handle it might be a hash of a string or

1279
01:13:48,320 --> 01:13:50,969
any number of cryptic

1280
01:13:49,500 --> 01:13:54,060
ethically bound operations that we could

1281
01:13:50,970 --> 01:13:55,530
do with these things and I send those

1282
01:13:54,060 --> 01:13:57,060
over and the auth server looks it up and

1283
01:13:55,530 --> 01:13:58,469
says oh I know which client this is

1284
01:13:57,060 --> 01:14:00,960
referring to this is effectively

1285
01:13:58,470 --> 01:14:05,820
replacing a client secret but not giving

1286
01:14:00,960 --> 01:14:08,190
up that key binding right the access

1287
01:14:05,820 --> 01:14:10,049
token itself can also come back with the

1288
01:14:08,190 --> 01:14:12,809
transaction handle and why would we want

1289
01:14:10,050 --> 01:14:15,030
to do that well in olt we decided that

1290
01:14:12,810 --> 01:14:16,530
access tokens can now expire and so we

1291
01:14:15,030 --> 01:14:18,120
had to invent this weird thing called a

1292
01:14:16,530 --> 01:14:19,860
refresh token which was kind of a bearer

1293
01:14:18,120 --> 01:14:21,660
token but kind of not and only in some

1294
01:14:19,860 --> 01:14:23,370
circumstances and stuff like that well I

1295
01:14:21,660 --> 01:14:25,050
got to thinking that what is a refresh

1296
01:14:23,370 --> 01:14:26,430
token except saying that I want to

1297
01:14:25,050 --> 01:14:27,720
continue this transaction that I had

1298
01:14:26,430 --> 01:14:31,260
already started with you and I already

1299
01:14:27,720 --> 01:14:33,390
got approved so we can use the same

1300
01:14:31,260 --> 01:14:35,160
transaction handle mechanism that we use

1301
01:14:33,390 --> 01:14:37,140
to get the token in the first place to

1302
01:14:35,160 --> 01:14:38,880
get refresh tokens so I'm just saying

1303
01:14:37,140 --> 01:14:41,550
that that whole thing that we did before

1304
01:14:38,880 --> 01:14:44,100
if you still trust me then I'm just

1305
01:14:41,550 --> 01:14:47,220
asking for the next access token that's

1306
01:14:44,100 --> 01:14:49,320
associated with this transaction and

1307
01:14:47,220 --> 01:14:53,910
again the client has to prove its keys

1308
01:14:49,320 --> 01:14:56,280
every time what if I've got a really

1309
01:14:53,910 --> 01:14:58,650
trusted client and I want and the a/s

1310
01:14:56,280 --> 01:15:00,509
decides that you know what you've done

1311
01:14:58,650 --> 01:15:02,759
all of these claims maybe it's not the

1312
01:15:00,510 --> 01:15:04,110
resource owner but it's a third party

1313
01:15:02,760 --> 01:15:05,490
requesting party kind of thing

1314
01:15:04,110 --> 01:15:07,320
looma has this notion called the

1315
01:15:05,490 --> 01:15:11,010
persistent claims token we can use the

1316
01:15:07,320 --> 01:15:12,719
user handle in this protocol to do the

1317
01:15:11,010 --> 01:15:14,460
same kind of thing that's that's a

1318
01:15:12,720 --> 01:15:20,250
different rabbit hole we're gonna go

1319
01:15:14,460 --> 01:15:22,650
quick and next up is scopes a lot of the

1320
01:15:20,250 --> 01:15:24,750
a lot of the discussion around Torsten

1321
01:15:22,650 --> 01:15:26,549
x' structured scope example is that the

1322
01:15:24,750 --> 01:15:27,990
simple scopes are all are still really

1323
01:15:26,550 --> 01:15:31,320
really useful but I got to thinking what

1324
01:15:27,990 --> 01:15:34,019
is a scope except a shorthand way to say

1325
01:15:31,320 --> 01:15:38,639
I want this actually rather complicated

1326
01:15:34,020 --> 01:15:41,310
slice of API well if we just extend this

1327
01:15:38,640 --> 01:15:42,690
notion of a handle representing an

1328
01:15:41,310 --> 01:15:46,790
object with the client would otherwise

1329
01:15:42,690 --> 01:15:49,589
send we can now have an API decide that

1330
01:15:46,790 --> 01:15:52,590
if you want this particular set of API

1331
01:15:49,590 --> 01:15:54,030
rights use this magical string which

1332
01:15:52,590 --> 01:15:55,770
also happens to be human readable and

1333
01:15:54,030 --> 01:15:57,540
typable in other words it's an OAuth

1334
01:15:55,770 --> 01:16:00,450
scope one of the coolest things about

1335
01:15:57,540 --> 01:16:01,980
this though is that you can combine the

1336
01:16:00,450 --> 01:16:05,429
string based scope

1337
01:16:01,980 --> 01:16:07,080
with the object based sort of more

1338
01:16:05,430 --> 01:16:09,690
detailed requests which is something

1339
01:16:07,080 --> 01:16:13,080
that developers have asked for four

1340
01:16:09,690 --> 01:16:15,900
years in the OAuth space and there are

1341
01:16:13,080 --> 01:16:17,340
clear semantics of how those things

1342
01:16:15,900 --> 01:16:19,349
stick together because each of those

1343
01:16:17,340 --> 01:16:21,930
simple strings unpacks to one of those

1344
01:16:19,350 --> 01:16:23,190
objects and that's something that you

1345
01:16:21,930 --> 01:16:27,090
need to be able to deal with any way

1346
01:16:23,190 --> 01:16:29,190
inside your API very very quickly this

1347
01:16:27,090 --> 01:16:31,230
works for the device flow as well I'm

1348
01:16:29,190 --> 01:16:34,410
basically going to say I cannot send the

1349
01:16:31,230 --> 01:16:37,019
user to an arbitrary URL so I'm gonna

1350
01:16:34,410 --> 01:16:39,000
instead send them to a static URL that

1351
01:16:37,020 --> 01:16:40,770
maybe has been configured on a webpage

1352
01:16:39,000 --> 01:16:43,830
or is in the little sticker that came on

1353
01:16:40,770 --> 01:16:46,530
my box but I can chirp out a user code

1354
01:16:43,830 --> 01:16:48,360
and send to the user so okay that's

1355
01:16:46,530 --> 01:16:50,790
great I'm gonna tell the user go here

1356
01:16:48,360 --> 01:16:52,230
enter that code user shows up does

1357
01:16:50,790 --> 01:16:54,000
everything that you would expect enters

1358
01:16:52,230 --> 01:16:55,440
the code and then the off server can

1359
01:16:54,000 --> 01:16:56,940
look up the transaction based on that

1360
01:16:55,440 --> 01:16:58,919
user code because it can no longer do it

1361
01:16:56,940 --> 01:17:01,820
based on the incoming URL because it's

1362
01:16:58,920 --> 01:17:04,590
no longer an arbitrary runtime URL

1363
01:17:01,820 --> 01:17:07,980
meanwhile the device can go and poke the

1364
01:17:04,590 --> 01:17:09,870
server and say that I want to be able to

1365
01:17:07,980 --> 01:17:12,269
continue this transaction are we ready

1366
01:17:09,870 --> 01:17:14,280
yet and the server anytime it gets poked

1367
01:17:12,270 --> 01:17:16,380
with one of these transaction continue

1368
01:17:14,280 --> 01:17:17,940
messages can basically say yeah we're

1369
01:17:16,380 --> 01:17:19,230
not done yet you know we're still

1370
01:17:17,940 --> 01:17:20,219
waiting for somebody to go click a

1371
01:17:19,230 --> 01:17:22,679
button or something like that

1372
01:17:20,220 --> 01:17:24,960
hold off wait 30 seconds and by the way

1373
01:17:22,680 --> 01:17:28,050
next time you talk to me here's a brand

1374
01:17:24,960 --> 01:17:29,910
new transaction handle this has to get

1375
01:17:28,050 --> 01:17:31,970
rotated every single time through this

1376
01:17:29,910 --> 01:17:34,620
was something that we found in the to

1377
01:17:31,970 --> 01:17:36,060
protocol this closes a whole bunch of

1378
01:17:34,620 --> 01:17:37,980
problems when you rotate this kind of

1379
01:17:36,060 --> 01:17:39,660
thing same thing by the way with the

1380
01:17:37,980 --> 01:17:41,759
refresh token analog every time you

1381
01:17:39,660 --> 01:17:43,680
would continue in transaction there you

1382
01:17:41,760 --> 01:17:45,360
rotate the handle any time you come back

1383
01:17:43,680 --> 01:17:47,160
from an interaction if it's not ready

1384
01:17:45,360 --> 01:17:51,929
yet or you can do more things you rotate

1385
01:17:47,160 --> 01:17:53,970
the handle so and since we had this

1386
01:17:51,930 --> 01:17:55,830
discussion with the device flow what

1387
01:17:53,970 --> 01:17:57,870
about a combined URL well what is a

1388
01:17:55,830 --> 01:18:00,840
combined URL except saying that I can

1389
01:17:57,870 --> 01:18:02,220
send the user to an arbitrary URL except

1390
01:18:00,840 --> 01:18:04,590
that now I'm saying I can send them

1391
01:18:02,220 --> 01:18:07,620
there by painting a QR code instead of

1392
01:18:04,590 --> 01:18:09,150
by you know sort of artificially mashing

1393
01:18:07,620 --> 01:18:12,750
these things together you should be able

1394
01:18:09,150 --> 01:18:13,889
to use these things side-by-side with

1395
01:18:12,750 --> 01:18:15,360
each other there are two different ways

1396
01:18:13,890 --> 01:18:20,610
that I can get the user over to the

1397
01:18:15,360 --> 01:18:22,650
server to to interact all right what

1398
01:18:20,610 --> 01:18:23,699
about identity and just wrote a Aaron

1399
01:18:22,650 --> 01:18:25,799
correct you just wrote a great blog post

1400
01:18:23,699 --> 01:18:28,349
about this I think that we can pass

1401
01:18:25,800 --> 01:18:30,090
identity assertions back just like we're

1402
01:18:28,350 --> 01:18:31,920
doing with OAuth today we can protect an

1403
01:18:30,090 --> 01:18:34,530
identity API just like we're doing with

1404
01:18:31,920 --> 01:18:38,310
open ID connect to know off today and we

1405
01:18:34,530 --> 01:18:39,719
can also send identity assertions like I

1406
01:18:38,310 --> 01:18:42,510
said at the beginning in ways that it

1407
01:18:39,719 --> 01:18:44,580
really hard to do with OAuth 2 we can

1408
01:18:42,510 --> 01:18:46,500
also bind tokens and very deep Popish

1409
01:18:44,580 --> 01:18:48,269
kind of ways and OAuth M TLS kind of

1410
01:18:46,500 --> 01:18:49,590
ways because we have a mechanism for the

1411
01:18:48,270 --> 01:18:51,780
client to be able to present improve

1412
01:18:49,590 --> 01:18:53,820
keys already to the authorization server

1413
01:18:51,780 --> 01:18:55,440
we can extend that and say that this

1414
01:18:53,820 --> 01:18:57,299
access token that's coming back is no

1415
01:18:55,440 --> 01:18:58,710
longer a bearer access token is bound to

1416
01:18:57,300 --> 01:19:00,360
a specific key that I can then reference

1417
01:18:58,710 --> 01:19:02,790
and you have to use the same proofing

1418
01:19:00,360 --> 01:19:04,830
mechanisms to do that a lot of the

1419
01:19:02,790 --> 01:19:06,600
concepts of OAuth 2 are there they've

1420
01:19:04,830 --> 01:19:08,489
just been you see a lot of like

1421
01:19:06,600 --> 01:19:10,440
underscore handle going on here because

1422
01:19:08,489 --> 01:19:13,619
there's there's really a lot of

1423
01:19:10,440 --> 01:19:17,099
abstraction that you can gain from this

1424
01:19:13,619 --> 01:19:20,280
by stepping back from the sort of

1425
01:19:17,100 --> 01:19:22,380
syntactic details of both to itself and

1426
01:19:20,280 --> 01:19:24,540
trying to look at things a little bit

1427
01:19:22,380 --> 01:19:26,010
differently if you really want to get

1428
01:19:24,540 --> 01:19:29,190
down to it this came from a conversation

1429
01:19:26,010 --> 01:19:33,060
I had with Chuck Mortimer over at

1430
01:19:29,190 --> 01:19:36,360
Salesforce you could send in your client

1431
01:19:33,060 --> 01:19:38,070
ID or client secret as your client

1432
01:19:36,360 --> 01:19:40,380
handle and use it as your key handle you

1433
01:19:38,070 --> 01:19:42,659
can send in your scopes as resource

1434
01:19:40,380 --> 01:19:45,300
handles I mean a lot of this does kind

1435
01:19:42,659 --> 01:19:48,179
of collapse into the same same types of

1436
01:19:45,300 --> 01:19:51,449
concepts but in ways that allow you to

1437
01:19:48,179 --> 01:19:55,070
also do it in a more rich and robust way

1438
01:19:51,449 --> 01:19:58,290
without losing the simple expressivity

1439
01:19:55,070 --> 01:19:59,429
huge bunch of pros and cons I think

1440
01:19:58,290 --> 01:20:02,310
there are a lot of pros to this I

1441
01:19:59,429 --> 01:20:05,550
started working on this in earnest maybe

1442
01:20:02,310 --> 01:20:07,739
about a year ago trying to hack apart or

1443
01:20:05,550 --> 01:20:10,469
off and see how it could be a little bit

1444
01:20:07,739 --> 01:20:12,388
different it out of the box does a wider

1445
01:20:10,469 --> 01:20:14,400
set of use cases I mean them and the

1446
01:20:12,389 --> 01:20:17,630
more legacy use cases that I throw at it

1447
01:20:14,400 --> 01:20:20,489
the more I find that stuff actually fits

1448
01:20:17,630 --> 01:20:22,679
uses some multi modal JSON in order to

1449
01:20:20,489 --> 01:20:27,299
make everything you know fairly clean

1450
01:20:22,679 --> 01:20:29,310
and and you know expressive I can do

1451
01:20:27,300 --> 01:20:30,840
static and dynamic things there's a few

1452
01:20:29,310 --> 01:20:34,260
moving parts which is generally better

1453
01:20:30,840 --> 01:20:36,620
for security cons biggest one it is not

1454
01:20:34,260 --> 01:20:40,980
backwards compatible this is not a off -

1455
01:20:36,620 --> 01:20:43,440
it's just not we can do a lot of the

1456
01:20:40,980 --> 01:20:45,150
things that this protocol does with

1457
01:20:43,440 --> 01:20:47,450
OAuth 2 as a base we're already seeing

1458
01:20:45,150 --> 01:20:49,679
it with happy resource object

1459
01:20:47,450 --> 01:20:52,040
registration we're seeing it with deep

1460
01:20:49,680 --> 01:20:54,090
hop a lot of the bits and pieces are

1461
01:20:52,040 --> 01:20:57,470
ideas that are pulled from these other

1462
01:20:54,090 --> 01:21:00,450
things but it's drastically simplified

1463
01:20:57,470 --> 01:21:02,280
when we start with a different

1464
01:21:00,450 --> 01:21:05,099
syntactical and more importantly a

1465
01:21:02,280 --> 01:21:08,130
semantic model base to build off of

1466
01:21:05,100 --> 01:21:11,220
alright it is a huge huge drawback that

1467
01:21:08,130 --> 01:21:13,590
it is not a lot too compatible but I do

1468
01:21:11,220 --> 01:21:16,730
think that these things can be deployed

1469
01:21:13,590 --> 01:21:19,130
side by side with similar or related

1470
01:21:16,730 --> 01:21:21,240
backing systems so you can have one

1471
01:21:19,130 --> 01:21:23,310
registration system and you know a

1472
01:21:21,240 --> 01:21:24,630
transaction endpoint and an OAuth token

1473
01:21:23,310 --> 01:21:28,110
endpoint that kind of live side by side

1474
01:21:24,630 --> 01:21:29,880
a downside is multi modal JSON because

1475
01:21:28,110 --> 01:21:32,519
that's kind of tricky to parse and some

1476
01:21:29,880 --> 01:21:35,160
in some cases but I will say I have

1477
01:21:32,520 --> 01:21:36,450
implemented this in Java which is one of

1478
01:21:35,160 --> 01:21:38,309
the most annoyingly strongly typed

1479
01:21:36,450 --> 01:21:39,240
languages out there so if it's possible

1480
01:21:38,310 --> 01:21:40,890
in Java

1481
01:21:39,240 --> 01:21:43,170
I think it's possible in almost anything

1482
01:21:40,890 --> 01:21:45,540
and my codes up on github it's linked

1483
01:21:43,170 --> 01:21:48,060
from the site so it's you know you can

1484
01:21:45,540 --> 01:21:49,500
do it we don't know how this scales yet

1485
01:21:48,060 --> 01:21:52,350
there's a lot of questions about

1486
01:21:49,500 --> 01:21:53,730
statefulness and statelessness and quite

1487
01:21:52,350 --> 01:21:57,090
frankly we don't know what's broken yet

1488
01:21:53,730 --> 01:21:58,650
but with that I'm gonna ask that do we

1489
01:21:57,090 --> 01:22:01,650
want to make this a working group item I

1490
01:21:58,650 --> 01:22:03,809
think that OSU is fantastic and it will

1491
01:22:01,650 --> 01:22:05,730
continue to live for a very long time

1492
01:22:03,810 --> 01:22:08,220
because it solves tons of use cases

1493
01:22:05,730 --> 01:22:09,389
really really really well and I think a

1494
01:22:08,220 --> 01:22:11,760
lot of the extensions that we're doing

1495
01:22:09,390 --> 01:22:14,880
to OAuth make a lot of sense we should

1496
01:22:11,760 --> 01:22:18,900
keep doing that I am proposing that we

1497
01:22:14,880 --> 01:22:22,080
work on this as well as a sort of future

1498
01:22:18,900 --> 01:22:22,740
edition of authorization and delegation

1499
01:22:22,080 --> 01:22:24,780
protocols

1500
01:22:22,740 --> 01:22:27,000
I'm already building and deploying this

1501
01:22:24,780 --> 01:22:29,940
with at least one of my clients probably

1502
01:22:27,000 --> 01:22:33,330
a couple more because we are hitting use

1503
01:22:29,940 --> 01:22:36,230
cases that ooofff cannot solve and so

1504
01:22:33,330 --> 01:22:36,230
we're looking for something new

1505
01:22:39,639 --> 01:22:45,250
I think you put a lot of work into this

1506
01:22:42,489 --> 01:22:47,860
it incorporates a lot of the extensions

1507
01:22:45,250 --> 01:22:48,880
that we've done it a lot a wife will not

1508
01:22:47,860 --> 01:22:52,469
live forever

1509
01:22:48,880 --> 01:22:59,469
much like WS bed may not live forever on

1510
01:22:52,469 --> 01:23:01,929
Cano B I think it may be useful to adopt

1511
01:22:59,469 --> 01:23:06,309
this as perhaps experimental at this

1512
01:23:01,929 --> 01:23:08,679
point and work on it get the experience

1513
01:23:06,309 --> 01:23:10,389
so that at some point in the future

1514
01:23:08,679 --> 01:23:12,610
right you know I don't think that we

1515
01:23:10,389 --> 01:23:15,250
necessarily want a signal people that

1516
01:23:12,610 --> 01:23:19,900
you know this is necessarily maturer yet

1517
01:23:15,250 --> 01:23:21,909
oh it's not I'll tell you that bring it

1518
01:23:19,900 --> 01:23:23,829
in as experimental and say this is stuff

1519
01:23:21,909 --> 01:23:26,820
that we're looking at for the future we

1520
01:23:23,829 --> 01:23:30,790
want to develop it so that by the time a

1521
01:23:26,820 --> 01:23:32,679
watt starts people start hitting real

1522
01:23:30,790 --> 01:23:36,219
boundaries with a lot that they can't do

1523
01:23:32,679 --> 01:23:38,309
maybe we will have something that can be

1524
01:23:36,219 --> 01:23:41,190
deployed so I think it's something

1525
01:23:38,309 --> 01:23:46,420
that's worth the work we're tracking

1526
01:23:41,190 --> 01:23:52,480
okay thank you no Jenkins past mail I

1527
01:23:46,420 --> 01:23:53,679
just wanted to say I'm sorry can you

1528
01:23:52,480 --> 01:23:56,290
speak of course I think a statement

1529
01:23:53,679 --> 01:23:59,380
sounds really good mrs. Flores is worth

1530
01:23:56,290 --> 01:24:01,920
more and the particularly kind of

1531
01:23:59,380 --> 01:24:06,340
continuation token idea in fact that you

1532
01:24:01,920 --> 01:24:08,139
have yes that the handle process where

1533
01:24:06,340 --> 01:24:10,210
you kind of managing a state machine

1534
01:24:08,139 --> 01:24:13,389
almost everything right down to you

1535
01:24:10,210 --> 01:24:14,980
that's a model that we use which allow

1536
01:24:13,389 --> 01:24:18,699
authentication phones like that and find

1537
01:24:14,980 --> 01:24:22,089
it very advantageous I think all right

1538
01:24:18,699 --> 01:24:24,730
thank you yeah I mean the idea of it

1539
01:24:22,090 --> 01:24:28,119
being a kind of a state machine is

1540
01:24:24,730 --> 01:24:31,119
absolutely not new to this but it's more

1541
01:24:28,119 --> 01:24:33,549
it forces its explicit it forces it to

1542
01:24:31,119 --> 01:24:36,130
the foreground because I mean I've

1543
01:24:33,550 --> 01:24:37,719
written like a half dozen oh i'll server

1544
01:24:36,130 --> 01:24:41,550
implementations at this point in my life

1545
01:24:37,719 --> 01:24:46,869
and that's what you do anyway

1546
01:24:41,550 --> 01:24:49,300
exactly right exactly thank you

1547
01:24:46,869 --> 01:24:52,509
that's the idea hi weird you did you as

1548
01:24:49,300 --> 01:24:54,070
the eg so figure

1549
01:24:52,510 --> 01:24:55,989
they want to tackle one thing or not my

1550
01:24:54,070 --> 01:24:59,710
quick squint is that we wouldn't need to

1551
01:24:55,989 --> 01:25:02,980
talk about the Charter okay no that's

1552
01:24:59,710 --> 01:25:05,530
that's a great point and about Batman

1553
01:25:02,980 --> 01:25:07,690
Amazon um yeah I think this is great

1554
01:25:05,530 --> 01:25:09,190
work and something we definitely want to

1555
01:25:07,690 --> 01:25:13,570
dive into I want to call attention to

1556
01:25:09,190 --> 01:25:16,780
the fact that none of this overall idea

1557
01:25:13,570 --> 01:25:19,960
of handles and and we're closing what

1558
01:25:16,780 --> 01:25:21,239
not is specific to authorization and I

1559
01:25:19,960 --> 01:25:25,600
think there's sort of an underlying

1560
01:25:21,239 --> 01:25:28,480
protocol here that has is more broadly

1561
01:25:25,600 --> 01:25:29,050
applicable and worth breaking out as its

1562
01:25:28,480 --> 01:25:31,750
own thing

1563
01:25:29,050 --> 01:25:33,640
all right so questions to the ID maybe

1564
01:25:31,750 --> 01:25:36,570
we should consider an XYZ working group

1565
01:25:33,640 --> 01:25:37,920
if this if there's wider applicability I

1566
01:25:36,570 --> 01:25:46,690
don't know

1567
01:25:37,920 --> 01:25:47,800
absolutely christened drawing box yet is

1568
01:25:46,690 --> 01:25:50,500
there specific things we're doing

1569
01:25:47,800 --> 01:25:53,380
relative to you Oh odd polish a kind of

1570
01:25:50,500 --> 01:25:56,590
security right this is not that you can

1571
01:25:53,380 --> 01:25:59,140
yeah I'm just gonna quickly elaborate on

1572
01:25:56,590 --> 01:26:02,760
what I mean by that sense might not be

1573
01:25:59,140 --> 01:26:05,070
clear to how I'm thinking about this but

1574
01:26:02,760 --> 01:26:09,100
essentially what you have here is a

1575
01:26:05,070 --> 01:26:13,989
mechanism for kicking the end user out

1576
01:26:09,100 --> 01:26:17,830
to another context to do to do something

1577
01:26:13,989 --> 01:26:19,330
secure fashion right um usually and

1578
01:26:17,830 --> 01:26:21,100
especially in this base 50 of that as

1579
01:26:19,330 --> 01:26:23,980
needing to authenticate or authorize

1580
01:26:21,100 --> 01:26:26,920
something but that could be any number

1581
01:26:23,980 --> 01:26:30,700
of things such as needing to fix up an

1582
01:26:26,920 --> 01:26:33,430
expired credit card because a credit

1583
01:26:30,700 --> 01:26:35,590
card on file is expired and thus the API

1584
01:26:33,430 --> 01:26:39,010
call that the device tries to make fail

1585
01:26:35,590 --> 01:26:41,470
right anything where the end user needs

1586
01:26:39,010 --> 01:26:45,850
to be punted to a different context in

1587
01:26:41,470 --> 01:26:48,610
order to do something interactive this

1588
01:26:45,850 --> 01:26:52,180
was a positive yeah thank you for that

1589
01:26:48,610 --> 01:26:55,030
example and the that kind of thinking is

1590
01:26:52,180 --> 01:26:56,350
exactly why in the straw man that I've

1591
01:26:55,030 --> 01:26:59,070
written so far I've called it the

1592
01:26:56,350 --> 01:27:02,230
interaction URI and not the

1593
01:26:59,070 --> 01:27:04,360
authorization URI because if you

1594
01:27:02,230 --> 01:27:06,440
actually look at the uma to

1595
01:27:04,360 --> 01:27:08,539
specifications

1596
01:27:06,440 --> 01:27:10,940
the requesting party gets sent to

1597
01:27:08,539 --> 01:27:14,300
interact and provide a bunch of claims

1598
01:27:10,940 --> 01:27:15,888
and umas very very hand wavy about what

1599
01:27:14,300 --> 01:27:17,780
that means it could very well be

1600
01:27:15,889 --> 01:27:20,179
entering credit card information there

1601
01:27:17,780 --> 01:27:24,409
and so yeah that is that is well within

1602
01:27:20,179 --> 01:27:26,150
the boundaries of my thinking on this as

1603
01:27:24,409 --> 01:27:29,749
well and whether that means that this is

1604
01:27:26,150 --> 01:27:32,089
a larger thing than just authorization I

1605
01:27:29,749 --> 01:27:36,079
don't know but yeah we use a very

1606
01:27:32,090 --> 01:27:38,139
similar pattern internally for look at

1607
01:27:36,079 --> 01:27:41,018
using it between like authorization

1608
01:27:38,139 --> 01:27:43,309
services and the authentication stack

1609
01:27:41,019 --> 01:27:45,320
those are separate and then essentially

1610
01:27:43,309 --> 01:27:47,360
within the authentication stack breaking

1611
01:27:45,320 --> 01:27:50,840
up parts of the authentication process

1612
01:27:47,360 --> 01:27:52,969
into independent workflows that operate

1613
01:27:50,840 --> 01:27:54,889
separate from one another and have their

1614
01:27:52,969 --> 01:27:59,320
own trust boundaries around them right

1615
01:27:54,889 --> 01:28:06,530
so I have three minutes so please cut

1616
01:27:59,320 --> 01:28:08,509
the card so a few questions few comments

1617
01:28:06,530 --> 01:28:13,690
darling is this working group started

1618
01:28:08,510 --> 01:28:16,909
off working on OAuth 1 and then moved to

1619
01:28:13,690 --> 01:28:20,178
when I was working on Goa - we tried to

1620
01:28:16,909 --> 01:28:23,239
keep a number of the semantics and

1621
01:28:20,179 --> 01:28:25,219
thinking that we didn't break the it

1622
01:28:23,239 --> 01:28:29,239
wasn't an extension of OAuth 1 sort of

1623
01:28:25,219 --> 01:28:31,999
like I think for the same reasons you're

1624
01:28:29,239 --> 01:28:33,320
saying it needs to break I would agree

1625
01:28:31,999 --> 01:28:35,900
with those

1626
01:28:33,320 --> 01:28:38,989
I wish we were smarter back then and was

1627
01:28:35,900 --> 01:28:40,369
abused more of a back-channel handle the

1628
01:28:38,989 --> 01:28:42,379
reason we didn't is we were sort of

1629
01:28:40,369 --> 01:28:43,159
following on what we thought did work in

1630
01:28:42,380 --> 01:28:44,749
O'Laughlin

1631
01:28:43,159 --> 01:28:49,699
yeah and taking the parts that didn't

1632
01:28:44,749 --> 01:28:52,340
work out so I myself I'm a big advocate

1633
01:28:49,699 --> 01:28:55,489
of that I think that the challenge is

1634
01:28:52,340 --> 01:28:57,590
going to be people got a lot of stuff

1635
01:28:55,489 --> 01:29:00,379
deployed right yeah one advantage of it

1636
01:28:57,590 --> 01:29:02,239
is that the model about how I'm a API

1637
01:29:00,380 --> 01:29:04,099
calls doesn't change which is where most

1638
01:29:02,239 --> 01:29:05,869
of all the code is yes it's just

1639
01:29:04,099 --> 01:29:07,219
changing how you go about getting those

1640
01:29:05,869 --> 01:29:10,070
right

1641
01:29:07,219 --> 01:29:14,210
I wrote this comment on the list and I

1642
01:29:10,070 --> 01:29:15,469
think for us to get traction of people

1643
01:29:14,210 --> 01:29:17,840
being interested in working

1644
01:29:15,469 --> 01:29:20,300
this ended up being like some Perl 6

1645
01:29:17,840 --> 01:29:23,090
forever project that who knows what it

1646
01:29:20,300 --> 01:29:25,280
solves which I worry about them with the

1647
01:29:23,090 --> 01:29:28,460
let's capture in the use cases what

1648
01:29:25,280 --> 01:29:30,980
we're doing one thing is addressing

1649
01:29:28,460 --> 01:29:32,989
issues with OAuth 2 and I think even

1650
01:29:30,980 --> 01:29:35,120
more importantly would be one of the use

1651
01:29:32,989 --> 01:29:37,370
cases this solves that we can't easily

1652
01:29:35,120 --> 01:29:40,219
solve with that a lot too because that

1653
01:29:37,370 --> 01:29:42,440
will drive adoption of people using it

1654
01:29:40,219 --> 01:29:43,910
and they'll say oh and it'll also do

1655
01:29:42,440 --> 01:29:45,679
everything I must and was about to so

1656
01:29:43,910 --> 01:29:48,380
I'll just use that all the way right I

1657
01:29:45,680 --> 01:29:50,210
think that solving new use cases will

1658
01:29:48,380 --> 01:29:52,430
enable us to bring a bunch of energy I'm

1659
01:29:50,210 --> 01:29:54,469
working on it as opposed to fixing

1660
01:29:52,430 --> 01:29:57,290
something that could be better but

1661
01:29:54,469 --> 01:30:00,489
already works yeah I I couldn't agree

1662
01:29:57,290 --> 01:30:03,710
more and what has been driving my

1663
01:30:00,489 --> 01:30:05,120
implementation of this is is a set of

1664
01:30:03,710 --> 01:30:08,480
use cases which would be happy to talk

1665
01:30:05,120 --> 01:30:11,120
with you offline about spaces where os/2

1666
01:30:08,480 --> 01:30:13,309
doesn't work because of the nature of

1667
01:30:11,120 --> 01:30:15,410
kind of where the user and clients sit

1668
01:30:13,310 --> 01:30:18,949
in the process don't fit with OAuth twos

1669
01:30:15,410 --> 01:30:22,760
model wait not offline the rest of the

1670
01:30:18,949 --> 01:30:40,460
group also knows about that okay that's

1671
01:30:22,760 --> 01:30:42,710
the summary I think that listing idea

1672
01:30:40,460 --> 01:30:44,510
and then decide which things are in

1673
01:30:42,710 --> 01:30:45,800
scope and which are out of scope because

1674
01:30:44,510 --> 01:30:48,560
one of the things we're working groups

1675
01:30:45,800 --> 01:30:50,150
really go sideways everybody is on the

1676
01:30:48,560 --> 01:30:51,350
same page of what we're solving and

1677
01:30:50,150 --> 01:30:53,239
someone says well it doesn't solve my

1678
01:30:51,350 --> 01:30:55,550
thing and I want this and right we're

1679
01:30:53,239 --> 01:30:57,919
really arguing for down in the technical

1680
01:30:55,550 --> 01:31:02,420
details even though we haven't got a

1681
01:30:57,920 --> 01:31:05,210
lineman arm which yeah I agree and I

1682
01:31:02,420 --> 01:31:08,210
really think that the the sunrise of

1683
01:31:05,210 --> 01:31:10,430
this is in the new use cases that don't

1684
01:31:08,210 --> 01:31:11,630
fit the old model I'm with him so

1685
01:31:10,430 --> 01:31:13,730
writing writing those down I am

1686
01:31:11,630 --> 01:31:14,780
absolutely right now sorry guys we are

1687
01:31:13,730 --> 01:31:20,870
running out of time

1688
01:31:14,780 --> 01:31:22,730
Jim ordering and doing the work here

1689
01:31:20,870 --> 01:31:24,890
rather than a new working group because

1690
01:31:22,730 --> 01:31:28,849
because this is so much building on what

1691
01:31:24,890 --> 01:31:29,760
we've learned in in doing oauth2 I would

1692
01:31:28,850 --> 01:31:32,940
be afraid of the new

1693
01:31:29,760 --> 01:31:34,620
can group losing some of the what good

1694
01:31:32,940 --> 01:31:37,950
knowledge here thank you yeah okay

1695
01:31:34,620 --> 01:31:40,230
thanks yeah this is something that we

1696
01:31:37,950 --> 01:31:41,670
need to take with Roman and discuss

1697
01:31:40,230 --> 01:31:43,830
offline okay awesome

1698
01:31:41,670 --> 01:31:45,260
perfect thanks thank Justin appreciate

1699
01:31:43,830 --> 01:31:46,150
it

1700
01:31:45,260 --> 01:31:48,150
[Music]

1701
01:31:46,150 --> 01:31:54,889
[Applause]

1702
01:31:48,150 --> 01:31:54,889
Friday oh thank you guys

1703
01:31:55,800 --> 01:31:58,909
[Music]

