1
00:00:13,040 --> 00:00:17,279
so

2
00:00:13,599 --> 00:00:22,240
this is 7g hello everyone once again

3
00:00:17,279 --> 00:00:26,560
and let's start with the chair slides

4
00:00:22,240 --> 00:00:26,560
i hope everyone can see them

5
00:00:26,880 --> 00:00:33,760
so alexa nicole nicholson

6
00:00:30,640 --> 00:00:37,120
we have the chairs uh this session

7
00:00:33,760 --> 00:00:38,160
has been recorded we have a minute taker

8
00:00:37,120 --> 00:00:40,879
in code md

9
00:00:38,160 --> 00:00:42,559
it's alexa manikov we have a jabber

10
00:00:40,879 --> 00:00:45,920
commercially

11
00:00:42,559 --> 00:00:50,078
this is genital jonathan holland

12
00:00:45,920 --> 00:00:50,559
uh you can find the participant guide

13
00:00:50,079 --> 00:00:53,199
and

14
00:00:50,559 --> 00:00:54,000
some assistance and you can report

15
00:00:53,199 --> 00:00:56,960
issues

16
00:00:54,000 --> 00:00:58,079
the links that that you can find on the

17
00:00:56,960 --> 00:01:00,719
slides

18
00:00:58,079 --> 00:01:03,680
new shades are generated automatically

19
00:01:00,719 --> 00:01:06,720
based on the data tracker information

20
00:01:03,680 --> 00:01:08,320
and the minutes will be able using this

21
00:01:06,720 --> 00:01:12,798
link

22
00:01:08,320 --> 00:01:16,479
this is an opal i send you

23
00:01:12,799 --> 00:01:20,000
know this well but uh if not

24
00:01:16,479 --> 00:01:20,000
please follow these links

25
00:01:23,520 --> 00:01:30,720
so this is cephergy an

26
00:01:26,640 --> 00:01:32,799
irtf group you can find some information

27
00:01:30,720 --> 00:01:36,479
about the irpfi

28
00:01:32,799 --> 00:01:39,600
in rc7418

29
00:01:36,479 --> 00:01:40,240
there they have conducts research it's

30
00:01:39,600 --> 00:01:43,600
not

31
00:01:40,240 --> 00:01:43,600
development organization

32
00:01:43,840 --> 00:01:50,320
we have an agenda published at the

33
00:01:47,360 --> 00:01:52,799
tracker all the slides are uploaded so

34
00:01:50,320 --> 00:01:52,798
let's start

35
00:01:53,119 --> 00:01:56,960
so we have the following agenda

36
00:01:57,200 --> 00:02:05,360
if some agenda bash

37
00:02:01,200 --> 00:02:05,360
is needed please tell me now

38
00:02:05,840 --> 00:02:11,280
no then let's start with the chair

39
00:02:08,878 --> 00:02:11,280
slides

40
00:02:11,840 --> 00:02:18,560
so we have a new rfc this is

41
00:02:15,440 --> 00:02:20,840
rfc 8937

42
00:02:18,560 --> 00:02:22,959
randomness improvements for security

43
00:02:20,840 --> 00:02:26,319
protocols

44
00:02:22,959 --> 00:02:29,599
we don't have any new rfcs in

45
00:02:26,319 --> 00:02:31,760
withdrawals in rsc editors queue we have

46
00:02:29,599 --> 00:02:35,679
a document in isu review

47
00:02:31,760 --> 00:02:37,920
in fact it's after itf conflict review

48
00:02:35,680 --> 00:02:39,680
but there were some minor concerns so we

49
00:02:37,920 --> 00:02:43,760
hope that after the meeting

50
00:02:39,680 --> 00:02:46,560
the authors can update their draft and

51
00:02:43,760 --> 00:02:47,200
the argument 2 will finally go to the

52
00:02:46,560 --> 00:02:50,319
rfc

53
00:02:47,200 --> 00:02:52,399
active student we don't have any new

54
00:02:50,319 --> 00:02:55,599
drafts in irview

55
00:02:52,400 --> 00:02:57,440
and we have plenty of active drafts of

56
00:02:55,599 --> 00:03:01,119
the research group

57
00:02:57,440 --> 00:03:06,319
first of all it's spec 2

58
00:03:01,120 --> 00:03:06,319
it has undergone a security review

59
00:03:07,040 --> 00:03:13,519
thanks to scott fleur and bjornhauser

60
00:03:11,440 --> 00:03:14,720
there are some minor concerns about the

61
00:03:13,519 --> 00:03:17,519
documents so

62
00:03:14,720 --> 00:03:18,000
i will hope that after the meeting the

63
00:03:17,519 --> 00:03:21,280
document

64
00:03:18,000 --> 00:03:25,680
will be updated a little and

65
00:03:21,280 --> 00:03:25,680
it can be moved to

66
00:03:27,440 --> 00:03:34,480
sheffield's review chapters right

67
00:03:30,640 --> 00:03:37,279
up and then to rsd review

68
00:03:34,480 --> 00:03:38,798
we have a new version of hashtag

69
00:03:37,280 --> 00:03:43,519
document

70
00:03:38,799 --> 00:03:47,840
it has also undergone a security review

71
00:03:43,519 --> 00:03:47,840
it was done by thomas

72
00:03:49,519 --> 00:03:55,439
there are some small concerns

73
00:03:52,560 --> 00:03:56,400
about the document i think that after

74
00:03:55,439 --> 00:04:00,400
the meeting we'll

75
00:03:56,400 --> 00:04:02,799
discuss it with after the itf

76
00:04:00,400 --> 00:04:04,400
109 meeting we'll discuss it with chris

77
00:04:02,799 --> 00:04:07,680
wood and the authors

78
00:04:04,400 --> 00:04:10,640
and proceed to the document

79
00:04:07,680 --> 00:04:11,519
we have recently obtained a security

80
00:04:10,640 --> 00:04:15,839
review

81
00:04:11,519 --> 00:04:15,840
for vrf documents

82
00:04:16,798 --> 00:04:23,679
some update is needed but

83
00:04:19,918 --> 00:04:26,479
all replies from those source

84
00:04:23,680 --> 00:04:27,840
have been approved by the reviewer so we

85
00:04:26,479 --> 00:04:31,520
think that

86
00:04:27,840 --> 00:04:35,280
we'll we can go to a research group

87
00:04:31,520 --> 00:04:35,280
last call pretty soon

88
00:04:35,680 --> 00:04:44,080
kangaroo 12 has gone

89
00:04:39,919 --> 00:04:46,960
under second residual plasco voperf

90
00:04:44,080 --> 00:04:48,639
is updated and we'll have some update on

91
00:04:46,960 --> 00:04:51,840
this document today

92
00:04:48,639 --> 00:04:55,199
at the meeting we have hpk document

93
00:04:51,840 --> 00:04:57,119
updated also it the research group

94
00:04:55,199 --> 00:05:00,400
pascal is done

95
00:04:57,120 --> 00:05:04,639
now it's waiting for shepherd's review

96
00:05:00,400 --> 00:05:07,679
personally it's me so i hope that

97
00:05:04,639 --> 00:05:10,880
the week after the meeting

98
00:05:07,680 --> 00:05:14,000
will be enough to prepare the shepherd's

99
00:05:10,880 --> 00:05:15,440
review we have been less document

100
00:05:14,000 --> 00:05:18,880
updated

101
00:05:15,440 --> 00:05:22,400
some news about page and friendly curves

102
00:05:18,880 --> 00:05:25,039
the document has been updated there are

103
00:05:22,400 --> 00:05:26,560
a lot of concerns from reselling group

104
00:05:25,039 --> 00:05:30,960
last call

105
00:05:26,560 --> 00:05:30,960
namely from ernest rick

106
00:05:31,039 --> 00:05:35,759
i hope that a lot of concerns have been

107
00:05:34,160 --> 00:05:40,400
addressed in the draft

108
00:05:35,759 --> 00:05:43,600
so it's in an active phase of work

109
00:05:40,400 --> 00:05:46,719
we have a restricted curve

110
00:05:43,600 --> 00:05:50,000
update today at the meeting as draft

111
00:05:46,720 --> 00:05:51,039
has been updated also we have a new

112
00:05:50,000 --> 00:05:54,800
draft

113
00:05:51,039 --> 00:05:57,360
aed limits that was adopted in summer

114
00:05:54,800 --> 00:05:58,479
we have a status update today at the

115
00:05:57,360 --> 00:06:02,479
meeting

116
00:05:58,479 --> 00:06:06,000
and to pay documents

117
00:06:02,479 --> 00:06:09,440
that were the winners of the pack

118
00:06:06,000 --> 00:06:12,160
contest the opec and cpace

119
00:06:09,440 --> 00:06:13,440
for both of them we have status update

120
00:06:12,160 --> 00:06:18,840
today

121
00:06:13,440 --> 00:06:21,840
and the world is in the active phase now

122
00:06:18,840 --> 00:06:22,638
so information will be given in the

123
00:06:21,840 --> 00:06:26,560
states update

124
00:06:22,639 --> 00:06:29,199
slides about three

125
00:06:26,560 --> 00:06:31,759
related work items we don't have any

126
00:06:29,199 --> 00:06:36,560
news about

127
00:06:31,759 --> 00:06:39,440
c2pq draft from both of them

128
00:06:36,560 --> 00:06:40,639
and we have two drafts in discussion

129
00:06:39,440 --> 00:06:43,440
it's

130
00:06:40,639 --> 00:06:44,639
draft by philip hambacher about

131
00:06:43,440 --> 00:06:47,360
threshold signatures

132
00:06:44,639 --> 00:06:48,639
elliptic curves and drafts from chelsea

133
00:06:47,360 --> 00:06:52,560
combo

134
00:06:48,639 --> 00:06:55,680
about frost one of the

135
00:06:52,560 --> 00:06:58,639
set of schemes of surgical signatures

136
00:06:55,680 --> 00:06:59,840
we have a lot of comments during

137
00:06:58,639 --> 00:07:04,319
adoption call

138
00:06:59,840 --> 00:07:07,599
and we'll discuss this with alexanik

139
00:07:04,319 --> 00:07:11,039
next week or maybe

140
00:07:07,599 --> 00:07:14,240
before the end of this of november

141
00:07:11,039 --> 00:07:18,080
and some drafts are expired

142
00:07:14,240 --> 00:07:18,080
also we have uh some

143
00:07:18,560 --> 00:07:24,400
erratas on rfcs that have been published

144
00:07:22,240 --> 00:07:28,160
before

145
00:07:24,400 --> 00:07:30,799
i hope that we can ask criteria panel to

146
00:07:28,160 --> 00:07:32,560
help us with them

147
00:07:30,800 --> 00:07:34,639
a brief reminder about peterborough

148
00:07:32,560 --> 00:07:37,759
panel

149
00:07:34,639 --> 00:07:40,960
currently 33 panel members

150
00:07:37,759 --> 00:07:45,000
do all reviews for all 7g

151
00:07:40,960 --> 00:07:47,919
drafts before they just go to

152
00:07:45,000 --> 00:07:51,599
messagegroup.com

153
00:07:47,919 --> 00:07:55,520
we also ask panel members to help us

154
00:07:51,599 --> 00:07:58,800
with erratas or with documents

155
00:07:55,520 --> 00:08:01,840
going for example during

156
00:07:58,800 --> 00:08:01,840
pack selection process

157
00:08:02,639 --> 00:08:09,280
the members of crypto panel members

158
00:08:06,080 --> 00:08:12,719
on duty are on slides many thanks for

159
00:08:09,280 --> 00:08:17,280
all of them a lot of good reviews

160
00:08:12,720 --> 00:08:17,280
i have been made by them thanks a lot

161
00:08:17,599 --> 00:08:26,659
so any questions for the chairs

162
00:08:21,199 --> 00:08:29,819
or about the status of the drafts

163
00:08:26,660 --> 00:08:29,819
[Music]

164
00:08:31,919 --> 00:08:38,559
no questions then let's go to the

165
00:08:35,120 --> 00:08:42,799
first serious update it's

166
00:08:38,559 --> 00:08:42,799
opaque by chris wood

167
00:08:43,200 --> 00:08:51,680
chris please start sharing

168
00:08:46,560 --> 00:08:51,680
your screen i'll show you my screen

169
00:08:52,839 --> 00:08:55,839
okay

170
00:09:06,839 --> 00:09:09,839
nice

171
00:09:28,399 --> 00:09:33,680
i'm getting no feedback

172
00:09:31,760 --> 00:09:35,040
can you hear me can someone just confirm

173
00:09:33,680 --> 00:09:38,800
whether or not you can hear me

174
00:09:35,040 --> 00:09:42,160
yeah okay thank you

175
00:09:38,800 --> 00:09:43,599
all right i'll flip back i just got like

176
00:09:42,160 --> 00:09:46,000
13 text messages okay

177
00:09:43,600 --> 00:09:48,839
um yeah so thanks everyone uh just going

178
00:09:46,000 --> 00:09:52,000
to give a sort of brief update on opaque

179
00:09:48,839 --> 00:09:53,040
um since the last meeting uh we

180
00:09:52,000 --> 00:09:55,760
submitted the first

181
00:09:53,040 --> 00:09:57,839
uh official iot version of the draft and

182
00:09:55,760 --> 00:10:00,959
have been working with uh hugo and kevin

183
00:09:57,839 --> 00:10:04,079
facebook um and uh getting this ready

184
00:10:00,959 --> 00:10:04,800
uh for you know actually shipping

185
00:10:04,079 --> 00:10:07,040
software

186
00:10:04,800 --> 00:10:09,120
down the road with uh test vectors and

187
00:10:07,040 --> 00:10:11,439
reference implementations and a lot more

188
00:10:09,120 --> 00:10:12,720
protocol specification clarity um but

189
00:10:11,440 --> 00:10:14,800
there's still some more issues to be

190
00:10:12,720 --> 00:10:16,800
covered

191
00:10:14,800 --> 00:10:18,719
in resolve so what i'll do today is talk

192
00:10:16,800 --> 00:10:20,240
about sort of just a high level overview

193
00:10:18,720 --> 00:10:23,279
of the protocol

194
00:10:20,240 --> 00:10:26,560
highlight some of the aspects that have

195
00:10:23,279 --> 00:10:29,439
changed since hugo's initial version

196
00:10:26,560 --> 00:10:30,640
point to some open issues uh that you

197
00:10:29,440 --> 00:10:32,959
know

198
00:10:30,640 --> 00:10:33,680
i'm hopeful that people here will chime

199
00:10:32,959 --> 00:10:36,160
in and

200
00:10:33,680 --> 00:10:38,000
uh you know give us feedback on uh and

201
00:10:36,160 --> 00:10:39,279
then discuss any uh next steps

202
00:10:38,000 --> 00:10:42,880
afterwards

203
00:10:39,279 --> 00:10:42,880
um so

204
00:10:44,320 --> 00:10:47,839
all right um so a high level summary of

205
00:10:46,640 --> 00:10:48,959
opaque for those who aren't familiar

206
00:10:47,839 --> 00:10:49,440
with the topic and haven't heard the

207
00:10:48,959 --> 00:10:52,719
draft

208
00:10:49,440 --> 00:10:56,399
um opaque as it says here is uh

209
00:10:52,720 --> 00:10:57,839
is unauthenticated um or an asymmetric

210
00:10:56,399 --> 00:11:00,480
peak

211
00:10:57,839 --> 00:11:01,600
which effectively takes a various

212
00:11:00,480 --> 00:11:02,320
assortment of cryptographic

213
00:11:01,600 --> 00:11:03,920
constructions

214
00:11:02,320 --> 00:11:06,560
one of which being an oprf a hash

215
00:11:03,920 --> 00:11:08,560
function a memory hard function

216
00:11:06,560 --> 00:11:10,399
such as argon or script and an

217
00:11:08,560 --> 00:11:12,399
authenticated key exchange protocol

218
00:11:10,399 --> 00:11:16,320
glues them all together or compiles them

219
00:11:12,399 --> 00:11:18,480
together into a strong apek

220
00:11:16,320 --> 00:11:21,440
by strong we mean that it's resistant to

221
00:11:18,480 --> 00:11:23,360
pre-computation attacks

222
00:11:21,440 --> 00:11:24,800
wherein you have access to the salt and

223
00:11:23,360 --> 00:11:28,000
you can pre-compute

224
00:11:24,800 --> 00:11:30,000
values that might be in a password file

225
00:11:28,000 --> 00:11:32,399
stored on the server so in case that's

226
00:11:30,000 --> 00:11:34,800
compromised bad things don't happen

227
00:11:32,399 --> 00:11:35,920
in the case of augmented or asymmetric

228
00:11:34,800 --> 00:11:39,120
we mean that the

229
00:11:35,920 --> 00:11:41,360
client server don't both share a copy of

230
00:11:39,120 --> 00:11:43,519
the same password

231
00:11:41,360 --> 00:11:44,959
unlike cpase which is symmetric in this

232
00:11:43,519 --> 00:11:48,480
case

233
00:11:44,959 --> 00:11:49,119
um opaque consists of two phases or two

234
00:11:48,480 --> 00:11:51,360
rounds

235
00:11:49,120 --> 00:11:53,120
during the first phase clients will use

236
00:11:51,360 --> 00:11:54,000
their password to register a set of

237
00:11:53,120 --> 00:11:56,079
credentials

238
00:11:54,000 --> 00:11:57,839
with the server and this is a set of

239
00:11:56,079 --> 00:11:59,680
public key credentials

240
00:11:57,839 --> 00:12:02,079
that are used to key the underlying

241
00:11:59,680 --> 00:12:05,760
authenticated key exchange protocol

242
00:12:02,079 --> 00:12:07,760
to actually derive a new secret and then

243
00:12:05,760 --> 00:12:09,120
there's the actual online authentication

244
00:12:07,760 --> 00:12:11,439
flow which

245
00:12:09,120 --> 00:12:12,880
runs sort of the same uh set of

246
00:12:11,440 --> 00:12:14,079
cryptographic operations as in

247
00:12:12,880 --> 00:12:16,639
registration

248
00:12:14,079 --> 00:12:18,000
but importantly recovers the the

249
00:12:16,639 --> 00:12:19,920
credentials that were stored during

250
00:12:18,000 --> 00:12:22,800
registration and then uses them to

251
00:12:19,920 --> 00:12:24,319
complete the authenticate key exchange

252
00:12:22,800 --> 00:12:25,839
so there's this nice sort of decoupling

253
00:12:24,320 --> 00:12:27,760
and separation between the two

254
00:12:25,839 --> 00:12:29,680
uh and i'll describe that visually a

255
00:12:27,760 --> 00:12:32,319
little bit later on

256
00:12:29,680 --> 00:12:33,920
um and the registration flow um

257
00:12:32,320 --> 00:12:34,399
effectively three messages back and

258
00:12:33,920 --> 00:12:37,519
forth

259
00:12:34,399 --> 00:12:38,399
uh between the client and the server the

260
00:12:37,519 --> 00:12:40,639
first

261
00:12:38,399 --> 00:12:42,160
round trip uh request response between

262
00:12:40,639 --> 00:12:44,720
the client and the server

263
00:12:42,160 --> 00:12:45,439
its purpose is to basically compute an

264
00:12:44,720 --> 00:12:50,000
opr

265
00:12:45,440 --> 00:12:52,240
uh over um the client's password so pw

266
00:12:50,000 --> 00:12:55,279
in this particular case

267
00:12:52,240 --> 00:12:58,399
that thing is cut off um and a

268
00:12:55,279 --> 00:13:00,639
per user opr key that's stored

269
00:12:58,399 --> 00:13:01,600
alongside the you know the user's

270
00:13:00,639 --> 00:13:04,800
password file

271
00:13:01,600 --> 00:13:08,560
um in the in the password table um

272
00:13:04,800 --> 00:13:11,760
on the server side and then from

273
00:13:08,560 --> 00:13:12,800
the output of that opr the client

274
00:13:11,760 --> 00:13:14,160
constructs

275
00:13:12,800 --> 00:13:16,000
what's called an envelope which

276
00:13:14,160 --> 00:13:17,360
effectively just carries credentials

277
00:13:16,000 --> 00:13:19,279
that are necessary

278
00:13:17,360 --> 00:13:20,720
to complete the authenticate exchange

279
00:13:19,279 --> 00:13:23,600
change later on

280
00:13:20,720 --> 00:13:25,200
um the server instructs the client uh in

281
00:13:23,600 --> 00:13:25,680
terms of you know what credentials need

282
00:13:25,200 --> 00:13:27,360
to be

283
00:13:25,680 --> 00:13:28,719
encrypted what credentials need to be

284
00:13:27,360 --> 00:13:29,920
authenticated and what needs to go in

285
00:13:28,720 --> 00:13:31,200
this envelope

286
00:13:29,920 --> 00:13:33,279
and then the client just hopefully

287
00:13:31,200 --> 00:13:33,839
uploads that to the server so the server

288
00:13:33,279 --> 00:13:37,839
can store

289
00:13:33,839 --> 00:13:41,199
alongside this per user opr key

290
00:13:37,839 --> 00:13:46,399
very simple um the

291
00:13:41,199 --> 00:13:49,920
credentials are extensible so to speak

292
00:13:46,399 --> 00:13:52,959
and they are composed of a variety or

293
00:13:49,920 --> 00:13:54,959
a combination of uh what we call secret

294
00:13:52,959 --> 00:13:57,040
values and authenticated values

295
00:13:54,959 --> 00:13:59,439
um the secret values are those that are

296
00:13:57,040 --> 00:14:00,560
encrypted uh so the server does not have

297
00:13:59,440 --> 00:14:02,800
access to them

298
00:14:00,560 --> 00:14:04,959
uh minimally that includes the private

299
00:14:02,800 --> 00:14:06,240
key of the user so sku in this

300
00:14:04,959 --> 00:14:09,199
particular case

301
00:14:06,240 --> 00:14:10,959
um authenticated values are those that

302
00:14:09,199 --> 00:14:13,279
just simply need to be authenticated

303
00:14:10,959 --> 00:14:15,040
in order to get the proof of security

304
00:14:13,279 --> 00:14:17,439
that opaque requires

305
00:14:15,040 --> 00:14:18,639
so in this example pks which is

306
00:14:17,440 --> 00:14:21,120
highlighted in green is

307
00:14:18,639 --> 00:14:21,920
authenticated um and included in the

308
00:14:21,120 --> 00:14:23,360
envelope

309
00:14:21,920 --> 00:14:25,040
and applications are free to choose

310
00:14:23,360 --> 00:14:27,680
whichever sort of uh

311
00:14:25,040 --> 00:14:29,599
you know credential structure is you

312
00:14:27,680 --> 00:14:31,519
know important for their particular

313
00:14:29,600 --> 00:14:33,519
you know instantiation or for their

314
00:14:31,519 --> 00:14:35,040
particular use case

315
00:14:33,519 --> 00:14:37,120
you know some applications might

316
00:14:35,040 --> 00:14:39,760
additionally want to specify

317
00:14:37,120 --> 00:14:41,360
both an identity of the user idu as well

318
00:14:39,760 --> 00:14:42,639
as an identity of the server and include

319
00:14:41,360 --> 00:14:44,240
that in the envelope

320
00:14:42,639 --> 00:14:46,079
or they just might want to use you know

321
00:14:44,240 --> 00:14:48,240
raw public keys as the identities of

322
00:14:46,079 --> 00:14:50,560
each peer

323
00:14:48,240 --> 00:14:52,320
but the important bit is that uh the the

324
00:14:50,560 --> 00:14:56,079
way this credential structure is

325
00:14:52,320 --> 00:14:58,560
uh constructed is uh you know

326
00:14:56,079 --> 00:15:00,000
flexible the server allows basically

327
00:14:58,560 --> 00:15:01,599
tells the client what to put in it the

328
00:15:00,000 --> 00:15:03,120
client obeys and happily

329
00:15:01,600 --> 00:15:05,199
and provides the encrypted and

330
00:15:03,120 --> 00:15:07,600
authenticated response to the server

331
00:15:05,199 --> 00:15:09,439
um all of which uh you know the secrecy

332
00:15:07,600 --> 00:15:12,399
of this and the authenticity of this is

333
00:15:09,440 --> 00:15:12,959
uh protected by the output of the opr

334
00:15:12,399 --> 00:15:17,360
this

335
00:15:12,959 --> 00:15:17,359
is f of ku with the user's password

336
00:15:17,839 --> 00:15:21,360
so after you do a registration you know

337
00:15:20,160 --> 00:15:22,880
so to speak offline

338
00:15:21,360 --> 00:15:24,399
uh there is then the online

339
00:15:22,880 --> 00:15:26,000
authentication flow

340
00:15:24,399 --> 00:15:28,160
you may notice that it has a very kind

341
00:15:26,000 --> 00:15:31,279
of similar flow to the registration flow

342
00:15:28,160 --> 00:15:32,800
importantly there is this opr evaluation

343
00:15:31,279 --> 00:15:35,040
you know request response between the

344
00:15:32,800 --> 00:15:38,000
client and the server

345
00:15:35,040 --> 00:15:40,319
importantly however in addition to the

346
00:15:38,000 --> 00:15:41,759
opr output so to speak being sent back

347
00:15:40,320 --> 00:15:46,959
from the server to the client

348
00:15:41,759 --> 00:15:48,800
the server also sends the um

349
00:15:46,959 --> 00:15:51,279
also sends the envelope that corresponds

350
00:15:48,800 --> 00:15:54,079
to the particular user's identity

351
00:15:51,279 --> 00:15:55,519
um for obvious reasons perhaps and

352
00:15:54,079 --> 00:15:58,239
that's because the

353
00:15:55,519 --> 00:15:59,360
um uh the client uses the output of the

354
00:15:58,240 --> 00:16:01,920
eop

355
00:15:59,360 --> 00:16:02,800
and the the envelope they just got um

356
00:16:01,920 --> 00:16:06,399
from the

357
00:16:02,800 --> 00:16:08,319
uh sorry hold on

358
00:16:06,399 --> 00:16:09,440
just muting notifications someone texted

359
00:16:08,320 --> 00:16:12,560
me

360
00:16:09,440 --> 00:16:14,639
um uh uses the upper the opr that it

361
00:16:12,560 --> 00:16:17,680
just got as well as the envelope

362
00:16:14,639 --> 00:16:19,759
to decrypt the credentials uh

363
00:16:17,680 --> 00:16:22,239
and derive some additional keying

364
00:16:19,759 --> 00:16:23,759
material which we call an export key uh

365
00:16:22,240 --> 00:16:25,120
we'll get into that but it's discussed

366
00:16:23,759 --> 00:16:27,120
in the draft

367
00:16:25,120 --> 00:16:28,800
and then run an authenticated key change

368
00:16:27,120 --> 00:16:31,839
using those credentials

369
00:16:28,800 --> 00:16:33,359
um but typically in

370
00:16:31,839 --> 00:16:34,880
you know an actual instantiation of

371
00:16:33,360 --> 00:16:36,800
opaque you would run these two

372
00:16:34,880 --> 00:16:38,880
pieces together you would run the

373
00:16:36,800 --> 00:16:42,000
authenticated key exchange inline

374
00:16:38,880 --> 00:16:45,360
with the actual execution implication of

375
00:16:42,000 --> 00:16:46,160
opaque protocol and you do it in such a

376
00:16:45,360 --> 00:16:48,000
way that the

377
00:16:46,160 --> 00:16:50,079
the opaque protocol messages are

378
00:16:48,000 --> 00:16:52,560
included in the transcript

379
00:16:50,079 --> 00:16:54,479
for the ake in question so for example

380
00:16:52,560 --> 00:16:56,880
if you're running you know opaque with

381
00:16:54,480 --> 00:16:58,480
triple d helmet as is one of the

382
00:16:56,880 --> 00:17:00,320
variants described in the draft

383
00:16:58,480 --> 00:17:01,759
you would simply include the credential

384
00:17:00,320 --> 00:17:04,079
request and response

385
00:17:01,759 --> 00:17:05,919
which are effectively the messages to

386
00:17:04,079 --> 00:17:07,438
carry out the opr evaluation

387
00:17:05,919 --> 00:17:09,280
as well as transfer the envelope from

388
00:17:07,439 --> 00:17:11,039
server to client

389
00:17:09,280 --> 00:17:12,879
in the flights from the client to the

390
00:17:11,039 --> 00:17:14,400
server and respectively in the flight

391
00:17:12,880 --> 00:17:16,640
from the server to the client

392
00:17:14,400 --> 00:17:18,240
and the rest of the ake specific bits

393
00:17:16,640 --> 00:17:22,319
those particular two

394
00:17:18,240 --> 00:17:24,240
triple the h sort of remain unchanged

395
00:17:22,319 --> 00:17:26,959
the draft goes into details for a triple

396
00:17:24,240 --> 00:17:30,160
dhs one of the instantiated akes

397
00:17:26,959 --> 00:17:32,720
about how to derive keys necessary to

398
00:17:30,160 --> 00:17:34,400
both encrypt you know parts of this

399
00:17:32,720 --> 00:17:36,240
particular handshake if you were to use

400
00:17:34,400 --> 00:17:38,320
this how to authenticate parts

401
00:17:36,240 --> 00:17:40,000
of this handshake and importantly and

402
00:17:38,320 --> 00:17:40,799
ultimately how to derive like a session

403
00:17:40,000 --> 00:17:42,880
secret

404
00:17:40,799 --> 00:17:43,840
that is then used for the output of the

405
00:17:42,880 --> 00:17:44,960
ake

406
00:17:43,840 --> 00:17:47,760
which is the whole point of running

407
00:17:44,960 --> 00:17:50,880
opaque

408
00:17:47,760 --> 00:17:53,039
um in the draft uh because we

409
00:17:50,880 --> 00:17:54,000
tried to describe opaque in sort of a

410
00:17:53,039 --> 00:17:57,280
modular way

411
00:17:54,000 --> 00:17:59,200
um we have this notion of configuration

412
00:17:57,280 --> 00:18:00,559
a configuration fully specifies

413
00:17:59,200 --> 00:18:02,320
basically everything you would need to

414
00:18:00,559 --> 00:18:04,240
instantiate in order to implement a

415
00:18:02,320 --> 00:18:06,639
particular version of opaque

416
00:18:04,240 --> 00:18:07,440
um so as i was alluding to before this

417
00:18:06,640 --> 00:18:11,200
includes

418
00:18:07,440 --> 00:18:14,160
minimally the opr a particular

419
00:18:11,200 --> 00:18:15,520
you know group and and cipher suite it

420
00:18:14,160 --> 00:18:19,039
references in fact

421
00:18:15,520 --> 00:18:22,080
the other irtf draft uh on oprs

422
00:18:19,039 --> 00:18:25,120
um a cryptographic hash function

423
00:18:22,080 --> 00:18:28,399
a memory hard function um and an ake

424
00:18:25,120 --> 00:18:29,918
so to uh obviously or two

425
00:18:28,400 --> 00:18:32,960
perhaps examples of this might be you

426
00:18:29,919 --> 00:18:35,520
know prf instantiated with restretto

427
00:18:32,960 --> 00:18:36,480
i'm using shot512 a variant of argon

428
00:18:35,520 --> 00:18:38,480
with you know

429
00:18:36,480 --> 00:18:41,440
fixed parameters or applications

430
00:18:38,480 --> 00:18:43,600
specified planners and triple

431
00:18:41,440 --> 00:18:45,039
um alternatively another instantiation

432
00:18:43,600 --> 00:18:46,480
might be using

433
00:18:45,039 --> 00:18:50,400
you know one of the nist curves with

434
00:18:46,480 --> 00:18:52,480
shop256 script and tls 1.3 is the ake

435
00:18:50,400 --> 00:18:53,919
um if you have access to the slides and

436
00:18:52,480 --> 00:18:55,760
you're you're following along the link

437
00:18:53,919 --> 00:18:57,200
here actually points to a draft over in

438
00:18:55,760 --> 00:18:59,760
the tls working group

439
00:18:57,200 --> 00:19:02,160
unfortunately expired but goes into at

440
00:18:59,760 --> 00:19:03,919
least some initial detail in terms of

441
00:19:02,160 --> 00:19:07,520
how you might integrate opaque into tlc

442
00:19:03,919 --> 00:19:09,679
1.3 as a variant of sigma

443
00:19:07,520 --> 00:19:11,600
and there's work being done underway to

444
00:19:09,679 --> 00:19:13,840
sort of resurrect and bring that back to

445
00:19:11,600 --> 00:19:13,840
life

446
00:19:14,000 --> 00:19:17,679
um so from an application perspective uh

447
00:19:16,720 --> 00:19:19,280
there's really

448
00:19:17,679 --> 00:19:20,960
not much you need to do in order to make

449
00:19:19,280 --> 00:19:21,840
use of opaque as it's currently

450
00:19:20,960 --> 00:19:23,760
specified

451
00:19:21,840 --> 00:19:25,039
um for starters minimally you have to

452
00:19:23,760 --> 00:19:27,600
actually you know

453
00:19:25,039 --> 00:19:29,120
select a configuration um which is one

454
00:19:27,600 --> 00:19:31,520
of these tuples previously

455
00:19:29,120 --> 00:19:32,959
presented you have to choose a

456
00:19:31,520 --> 00:19:34,080
credential structure that makes sense

457
00:19:32,960 --> 00:19:36,880
for your application

458
00:19:34,080 --> 00:19:38,159
um although we can just specify some

459
00:19:36,880 --> 00:19:39,840
same defaults

460
00:19:38,160 --> 00:19:41,280
in the draft and you know hopefully

461
00:19:39,840 --> 00:19:43,520
encourage applications to use these

462
00:19:41,280 --> 00:19:45,120
defaults

463
00:19:43,520 --> 00:19:48,799
one of the defaults might be just simply

464
00:19:45,120 --> 00:19:50,879
using raw public keys as identities

465
00:19:48,799 --> 00:19:52,080
and you know sort of punting other kind

466
00:19:50,880 --> 00:19:54,240
of identifying information

467
00:19:52,080 --> 00:19:56,720
outside of opic as it's strictly

468
00:19:54,240 --> 00:20:00,480
unnecessary

469
00:19:56,720 --> 00:20:01,840
and excuse me finally there's

470
00:20:00,480 --> 00:20:03,520
this is additional output that i was

471
00:20:01,840 --> 00:20:05,439
alluding to earlier of opaque called an

472
00:20:03,520 --> 00:20:07,840
export key

473
00:20:05,440 --> 00:20:08,799
and this is really uh its purpose is

474
00:20:07,840 --> 00:20:10,158
meant to be used

475
00:20:08,799 --> 00:20:12,400
or it's meant to be used as something

476
00:20:10,159 --> 00:20:12,400
that

477
00:20:13,440 --> 00:20:16,640
is truly application specific it's an

478
00:20:15,280 --> 00:20:18,480
extra key

479
00:20:16,640 --> 00:20:20,000
applications can derive more keys from

480
00:20:18,480 --> 00:20:22,480
it do whatever they want with

481
00:20:20,000 --> 00:20:24,080
it to do more application fun business

482
00:20:22,480 --> 00:20:25,600
stuff

483
00:20:24,080 --> 00:20:27,600
think of it just like a normal exporter

484
00:20:25,600 --> 00:20:30,799
like interface to tls or

485
00:20:27,600 --> 00:20:30,799
hpke for example

486
00:20:31,440 --> 00:20:35,200
there are you know use cases floating

487
00:20:33,919 --> 00:20:39,200
around

488
00:20:35,200 --> 00:20:40,720
i'm aware of one

489
00:20:39,200 --> 00:20:42,799
but i don't actually recall the details

490
00:20:40,720 --> 00:20:46,000
now so perhaps

491
00:20:42,799 --> 00:20:46,000
someone can fill that in later

492
00:20:46,559 --> 00:20:49,760
there are a number of open issues on the

493
00:20:47,840 --> 00:20:51,918
draft um

494
00:20:49,760 --> 00:20:53,440
uh these are some i think of the more

495
00:20:51,919 --> 00:20:55,919
important ones to

496
00:20:53,440 --> 00:20:57,520
complete right now uh the first of which

497
00:20:55,919 --> 00:21:00,159
is um

498
00:20:57,520 --> 00:21:02,000
uh you know how much detail in terms of

499
00:21:00,159 --> 00:21:05,039
the actual akes that we need to go into

500
00:21:02,000 --> 00:21:05,039
this particular document

501
00:21:05,600 --> 00:21:09,678
without hopefully discussing the issue

502
00:21:07,360 --> 00:21:12,719
here this basically asks the question

503
00:21:09,679 --> 00:21:14,159
do we fully specify an ake and its wire

504
00:21:12,720 --> 00:21:15,919
format

505
00:21:14,159 --> 00:21:17,679
in this document right here or do we

506
00:21:15,919 --> 00:21:19,919
simply provide a template

507
00:21:17,679 --> 00:21:22,480
for other akes and for applications to

508
00:21:19,919 --> 00:21:23,200
build out akes like triple dh like sigma

509
00:21:22,480 --> 00:21:26,720
i

510
00:21:23,200 --> 00:21:29,120
uh or sigma r if they wanted to um

511
00:21:26,720 --> 00:21:30,080
and if we go down either path um you

512
00:21:29,120 --> 00:21:32,000
know what sort of

513
00:21:30,080 --> 00:21:33,120
what sort of design choices or defaults

514
00:21:32,000 --> 00:21:35,840
do we pick

515
00:21:33,120 --> 00:21:37,918
um and how many like what what sort of

516
00:21:35,840 --> 00:21:39,600
test factors do we need to provide

517
00:21:37,919 --> 00:21:41,120
and this is actually i think a fairly

518
00:21:39,600 --> 00:21:43,439
fundamental um

519
00:21:41,120 --> 00:21:44,799
an important piece to resolve fairly

520
00:21:43,440 --> 00:21:46,559
quickly

521
00:21:44,799 --> 00:21:47,918
so people have thoughts about which way

522
00:21:46,559 --> 00:21:49,840
to go on this particular issue that

523
00:21:47,919 --> 00:21:52,960
would be lovely

524
00:21:49,840 --> 00:21:55,439
if you could share them uh another uh

525
00:21:52,960 --> 00:21:56,559
issue that's worth discussing perhaps is

526
00:21:55,440 --> 00:21:59,200
how parameters for

527
00:21:56,559 --> 00:22:01,440
memory hard functions are negotiated um

528
00:21:59,200 --> 00:22:03,120
for a particular application use case

529
00:22:01,440 --> 00:22:05,600
um whether or not they're transferred in

530
00:22:03,120 --> 00:22:07,280
band during registration or if they're

531
00:22:05,600 --> 00:22:09,199
you know communicated outside

532
00:22:07,280 --> 00:22:11,678
it's sort of in the wrapper protocol for

533
00:22:09,200 --> 00:22:13,039
opaque

534
00:22:11,679 --> 00:22:14,799
and then there's some other issues as

535
00:22:13,039 --> 00:22:16,879
well um uh

536
00:22:14,799 --> 00:22:18,158
and a link to the github repositories

537
00:22:16,880 --> 00:22:21,039
here and as well as

538
00:22:18,159 --> 00:22:21,760
um on the title slide i encourage you to

539
00:22:21,039 --> 00:22:24,840
check it out

540
00:22:21,760 --> 00:22:26,080
uh file more issues help us improve the

541
00:22:24,840 --> 00:22:27,918
draft

542
00:22:26,080 --> 00:22:29,840
as far as implementations are concerned

543
00:22:27,919 --> 00:22:32,480
um i'm aware of

544
00:22:29,840 --> 00:22:33,439
at least three that are um coming up to

545
00:22:32,480 --> 00:22:35,760
speed a

546
00:22:33,440 --> 00:22:36,720
fourth one recently that's not listed

547
00:22:35,760 --> 00:22:39,200
here

548
00:22:36,720 --> 00:22:40,799
just happened over the weekend there is

549
00:22:39,200 --> 00:22:44,000
a reference implementation based

550
00:22:40,799 --> 00:22:46,080
on a built-in sage um

551
00:22:44,000 --> 00:22:47,600
uh using the reference implementation

552
00:22:46,080 --> 00:22:50,639
for the erf code

553
00:22:47,600 --> 00:22:52,240
uh or for the opr standard

554
00:22:50,640 --> 00:22:55,760
there is a rust implementation as well

555
00:22:52,240 --> 00:22:57,919
as a go one underway

556
00:22:55,760 --> 00:22:59,679
these are not yet interoperable but we

557
00:22:57,919 --> 00:23:01,280
hope that once we nail down perhaps some

558
00:22:59,679 --> 00:23:02,799
of those particulars around wire formats

559
00:23:01,280 --> 00:23:04,480
for the a keys that we can

560
00:23:02,799 --> 00:23:05,840
in fact produce test specters to make

561
00:23:04,480 --> 00:23:08,240
sure these things actually communicate

562
00:23:05,840 --> 00:23:11,520
with one another

563
00:23:08,240 --> 00:23:14,559
um and that's that's basically it

564
00:23:11,520 --> 00:23:16,879
um so like i said this is

565
00:23:14,559 --> 00:23:16,879
um

566
00:23:17,600 --> 00:23:20,158
sorry go ahead

567
00:23:20,640 --> 00:23:23,840
someone unmuted

568
00:23:26,080 --> 00:23:28,240
no

569
00:23:29,679 --> 00:23:33,280
um okay um anyways basically saying this

570
00:23:32,080 --> 00:23:34,799
is uh

571
00:23:33,280 --> 00:23:36,799
it's at a state where we can implement

572
00:23:34,799 --> 00:23:38,559
it we have various

573
00:23:36,799 --> 00:23:40,158
interested people bringing up

574
00:23:38,559 --> 00:23:43,039
implementations and we're working

575
00:23:40,159 --> 00:23:45,360
to converge on you know interoperability

576
00:23:43,039 --> 00:23:48,640
but of course feedback in terms of

577
00:23:45,360 --> 00:23:49,918
presentation design decisions apis

578
00:23:48,640 --> 00:23:52,640
all that sort of thing is of course

579
00:23:49,919 --> 00:24:05,840
welcome so at this point i think

580
00:23:52,640 --> 00:24:07,840
i just pause for any questions

581
00:24:05,840 --> 00:24:19,439
i cannot hear anything i don't know if

582
00:24:07,840 --> 00:24:22,639
people are talking

583
00:24:19,440 --> 00:24:22,640
two people have joined the queue

584
00:24:22,960 --> 00:24:33,919
who's managing the queue

585
00:24:32,080 --> 00:24:36,158
quick question while that's uh being

586
00:24:33,919 --> 00:24:38,640
sorted out um

587
00:24:36,159 --> 00:24:40,480
i'm wondering if and this is kind of a

588
00:24:38,640 --> 00:24:42,559
dumb question but i'm wondering if who

589
00:24:40,480 --> 00:24:44,240
initiates the ake

590
00:24:42,559 --> 00:24:46,080
i'm wondering if it's possible for the

591
00:24:44,240 --> 00:24:49,679
server to to initiate

592
00:24:46,080 --> 00:24:52,799
the ake and send the first message

593
00:24:49,679 --> 00:24:54,559
along with its response um

594
00:24:52,799 --> 00:24:57,279
with its response from the opr

595
00:24:54,559 --> 00:24:57,279
evaluation

596
00:24:57,360 --> 00:25:02,479
it needs the client's input uh from the

597
00:24:59,919 --> 00:25:04,880
opr to actually produce its response

598
00:25:02,480 --> 00:25:06,080
um so i'm not sure how that would work

599
00:25:04,880 --> 00:25:09,520
um

600
00:25:06,080 --> 00:25:12,799
i guess on the wire so it's at minimum

601
00:25:09,520 --> 00:25:14,320
a two round protocol a three round

602
00:25:12,799 --> 00:25:17,840
because you need key confirmation

603
00:25:14,320 --> 00:25:17,840
um from the client to the server

604
00:25:24,320 --> 00:25:29,200
i guess bjorn is in the queue next maybe

605
00:25:26,320 --> 00:25:32,399
he can just start talking

606
00:25:29,200 --> 00:25:32,880
uh chris one question from me uh during

607
00:25:32,400 --> 00:25:35,200
the

608
00:25:32,880 --> 00:25:36,880
pack selection process we've had a lot

609
00:25:35,200 --> 00:25:40,960
of security reviews

610
00:25:36,880 --> 00:25:44,240
uh and hugo has made a lot of

611
00:25:40,960 --> 00:25:45,279
efforts to provide security assessment

612
00:25:44,240 --> 00:25:48,240
of opaque

613
00:25:45,279 --> 00:25:49,440
and my question is whether something is

614
00:25:48,240 --> 00:25:51,440
needed

615
00:25:49,440 --> 00:25:53,200
regarding the security security

616
00:25:51,440 --> 00:25:55,520
assessment of

617
00:25:53,200 --> 00:25:56,960
opaque maybe some security proofs or

618
00:25:55,520 --> 00:25:59,279
some

619
00:25:56,960 --> 00:26:01,200
detailed security proofs and some models

620
00:25:59,279 --> 00:26:04,559
or everything is ready

621
00:26:01,200 --> 00:26:06,240
in this sense uh no in fact i think

622
00:26:04,559 --> 00:26:07,918
the changes that we've made since the

623
00:26:06,240 --> 00:26:09,679
initial individual draft have made the

624
00:26:07,919 --> 00:26:10,880
analysis a lot easier

625
00:26:09,679 --> 00:26:13,120
you may recall that one of the

626
00:26:10,880 --> 00:26:16,559
requirements for early versions of

627
00:26:13,120 --> 00:26:18,639
opaque was a key committing aad

628
00:26:16,559 --> 00:26:19,600
however we've sort of worked around that

629
00:26:18,640 --> 00:26:20,960
issue

630
00:26:19,600 --> 00:26:22,879
by using a one-time pad like

631
00:26:20,960 --> 00:26:25,360
construction for

632
00:26:22,880 --> 00:26:25,919
authentication and or rather encryption

633
00:26:25,360 --> 00:26:28,399
of

634
00:26:25,919 --> 00:26:29,760
envelope values so um in some sense the

635
00:26:28,400 --> 00:26:32,880
design decisions we made

636
00:26:29,760 --> 00:26:34,480
um have uh simplified the lives uh of

637
00:26:32,880 --> 00:26:37,600
those who might analyze it

638
00:26:34,480 --> 00:26:38,799
however um various instantiations of

639
00:26:37,600 --> 00:26:41,918
opaque

640
00:26:38,799 --> 00:26:45,039
like opaque and tls 1.3 in particular

641
00:26:41,919 --> 00:26:48,400
those deviate a bit from

642
00:26:45,039 --> 00:26:51,120
opaque in its purest form as written and

643
00:26:48,400 --> 00:26:52,159
i think if that were to come to fruition

644
00:26:51,120 --> 00:26:55,760
that would require

645
00:26:52,159 --> 00:26:57,360
additional analysis uh either from um

646
00:26:55,760 --> 00:26:58,960
you know people on the crypto review

647
00:26:57,360 --> 00:27:01,360
panel or the community

648
00:26:58,960 --> 00:27:04,720
um in particular because the tls

649
00:27:01,360 --> 00:27:08,000
integration one of the tls integration

650
00:27:04,720 --> 00:27:09,679
options is uh uh

651
00:27:08,000 --> 00:27:12,000
it's effectively using opaque to

652
00:27:09,679 --> 00:27:13,840
authenticate the already established

653
00:27:12,000 --> 00:27:18,000
session secret from tls rather than

654
00:27:13,840 --> 00:27:20,480
derive a new output session secret key

655
00:27:18,000 --> 00:27:22,080
which is subtle but an important

656
00:27:20,480 --> 00:27:24,000
difference between the two so

657
00:27:22,080 --> 00:27:25,520
uh tldr i don't think the the current

658
00:27:24,000 --> 00:27:28,880
draft requires you know any

659
00:27:25,520 --> 00:27:32,320
new analysis further instantiations

660
00:27:28,880 --> 00:27:35,360
certainly will if that makes sense

661
00:27:32,320 --> 00:27:37,918
okay sent a lot make sense uh please any

662
00:27:35,360 --> 00:27:37,918
other questions

663
00:27:39,919 --> 00:27:47,120
one two three

664
00:27:43,520 --> 00:27:50,879
okay thanks a lot chris uh please the

665
00:27:47,120 --> 00:28:03,039
next slide from your house your please

666
00:27:50,880 --> 00:28:06,640
share the screen

667
00:28:03,039 --> 00:28:06,640
yes we see a screen please start

668
00:28:07,440 --> 00:28:17,840
but don't hear you please turn your

669
00:28:10,480 --> 00:28:17,840
audio on

670
00:28:23,200 --> 00:28:28,399
so i'd like to give you an update to

671
00:28:25,919 --> 00:28:28,399
this

672
00:28:28,840 --> 00:28:31,840
day

673
00:28:34,559 --> 00:28:39,039
so in the newly formed editor teams the

674
00:28:37,360 --> 00:28:42,559
first step we've been doing is

675
00:28:39,039 --> 00:28:46,640
to make a plan on our objectives and

676
00:28:42,559 --> 00:28:49,360
the deliveries that we want to produce

677
00:28:46,640 --> 00:28:50,480
and and of course the rfc document is

678
00:28:49,360 --> 00:28:53,360
one important aspect

679
00:28:50,480 --> 00:28:56,399
but we also aimed at providing public

680
00:28:53,360 --> 00:29:00,158
code and scripts for the test vectors

681
00:28:56,399 --> 00:29:00,559
and also public reference implementation

682
00:29:00,159 --> 00:29:02,399
for

683
00:29:00,559 --> 00:29:03,918
some curves for some variants of the

684
00:29:02,399 --> 00:29:07,120
protocol

685
00:29:03,919 --> 00:29:10,399
and we also agreed on um

686
00:29:07,120 --> 00:29:14,080
that we for the cpa draft we will be

687
00:29:10,399 --> 00:29:15,279
aiming at focusing on implementation

688
00:29:14,080 --> 00:29:18,639
efficiency

689
00:29:15,279 --> 00:29:21,279
which means you have to to decide

690
00:29:18,640 --> 00:29:22,880
for the draft and whether you would like

691
00:29:21,279 --> 00:29:26,480
to have a more generic

692
00:29:22,880 --> 00:29:30,480
option and

693
00:29:26,480 --> 00:29:35,279
specifying an abstract protocol or

694
00:29:30,480 --> 00:29:35,279
a draft which allows for optimized

695
00:29:35,679 --> 00:29:38,799
solutions for several curves or

696
00:29:37,600 --> 00:29:43,279
exploiting

697
00:29:38,799 --> 00:29:45,200
a specific properties of some primitive

698
00:29:43,279 --> 00:29:46,640
which means of course some additional

699
00:29:45,200 --> 00:29:50,559
work and

700
00:29:46,640 --> 00:29:52,240
we decided to aim at

701
00:29:50,559 --> 00:29:54,158
trying to find the possible

702
00:29:52,240 --> 00:29:56,159
optimizations in order to

703
00:29:54,159 --> 00:29:57,200
make implementations easier and more

704
00:29:56,159 --> 00:30:00,799
secure

705
00:29:57,200 --> 00:30:03,200
and to make implementations

706
00:30:00,799 --> 00:30:04,158
more efficient as efficient as possible

707
00:30:03,200 --> 00:30:06,320
and this

708
00:30:04,159 --> 00:30:08,000
means a little bit more work for the

709
00:30:06,320 --> 00:30:12,720
security analysis in order to make

710
00:30:08,000 --> 00:30:16,080
sure that none of the variations will

711
00:30:12,720 --> 00:30:16,080
have an impact on security

712
00:30:16,159 --> 00:30:21,440
so there with respect to the current

713
00:30:20,000 --> 00:30:24,559
draft we aim

714
00:30:21,440 --> 00:30:26,559
to change the text and the

715
00:30:24,559 --> 00:30:29,279
specifications such that it no longer

716
00:30:26,559 --> 00:30:32,639
refers generically to groups

717
00:30:29,279 --> 00:30:35,279
or groups model negation but

718
00:30:32,640 --> 00:30:36,000
to elliptic curves only because this is

719
00:30:35,279 --> 00:30:37,840
the

720
00:30:36,000 --> 00:30:40,159
domain where we see the application of

721
00:30:37,840 --> 00:30:43,360
departure

722
00:30:40,159 --> 00:30:46,080
currently there are two types of

723
00:30:43,360 --> 00:30:47,360
diffie-harmon protocols considered in

724
00:30:46,080 --> 00:30:50,480
the draft

725
00:30:47,360 --> 00:30:51,678
which is firstly a single coordinate if

726
00:30:50,480 --> 00:30:53,919
you haven't

727
00:30:51,679 --> 00:30:55,760
on adwords and montgomery curves using

728
00:30:53,919 --> 00:30:59,200
alligator

729
00:30:55,760 --> 00:31:03,039
which have a small cofactor and then

730
00:30:59,200 --> 00:31:04,480
we have a specification for x-coordinate

731
00:31:03,039 --> 00:31:08,720
only different harmonic

732
00:31:04,480 --> 00:31:11,600
wires curve such as e2 256

733
00:31:08,720 --> 00:31:12,159
and we agreed that we should be adding a

734
00:31:11,600 --> 00:31:15,439
third

735
00:31:12,159 --> 00:31:16,480
alternative which operates on the full

736
00:31:15,440 --> 00:31:18,880
group

737
00:31:16,480 --> 00:31:20,799
using both coordinates for instance if

738
00:31:18,880 --> 00:31:23,279
you want to use departure with ear

739
00:31:20,799 --> 00:31:23,279
strata

740
00:31:23,679 --> 00:31:27,370
and seeing these variants you have

741
00:31:26,320 --> 00:31:29,039
slight variation

742
00:31:27,370 --> 00:31:32,080
[Music]

743
00:31:29,039 --> 00:31:34,720
between the different

744
00:31:32,080 --> 00:31:37,840
types and different instances

745
00:31:34,720 --> 00:31:41,200
specifically regarding the properties

746
00:31:37,840 --> 00:31:44,240
of the hash to curve algorithm the map

747
00:31:41,200 --> 00:31:47,360
to point algorithm and

748
00:31:44,240 --> 00:31:48,880
we sort need to make have a explicit

749
00:31:47,360 --> 00:31:52,399
security analysis of

750
00:31:48,880 --> 00:31:55,360
all the slide variations as a first step

751
00:31:52,399 --> 00:31:57,279
before accurately specifying it in the

752
00:31:55,360 --> 00:31:59,959
rfc

753
00:31:57,279 --> 00:32:02,159
for instance if you're looking at the

754
00:31:59,960 --> 00:32:04,480
x25519 protocol

755
00:32:02,159 --> 00:32:06,080
the secret scalars will not be sampled

756
00:32:04,480 --> 00:32:09,840
uniformly

757
00:32:06,080 --> 00:32:12,960
between zero and the group order

758
00:32:09,840 --> 00:32:15,519
but you will having clamping function

759
00:32:12,960 --> 00:32:17,360
and which something which doesn't apply

760
00:32:15,519 --> 00:32:21,519
for the short verifiers curves

761
00:32:17,360 --> 00:32:22,158
and we aim it and consider all of these

762
00:32:21,519 --> 00:32:24,640
details

763
00:32:22,159 --> 00:32:26,240
so that existing libraries could be

764
00:32:24,640 --> 00:32:30,080
reused and there's

765
00:32:26,240 --> 00:32:30,080
for instance no need for an um

766
00:32:30,840 --> 00:32:38,639
x25519 variant that uses

767
00:32:33,760 --> 00:32:41,679
uniformly sampled scalars

768
00:32:38,640 --> 00:32:44,799
so the security analysis is the main

769
00:32:41,679 --> 00:32:46,480
of the main work item that we are

770
00:32:44,799 --> 00:32:47,918
working on there and the editor team at

771
00:32:46,480 --> 00:32:51,679
the moment

772
00:32:47,919 --> 00:32:55,840
as a preliminary result like we i can

773
00:32:51,679 --> 00:32:58,159
give you uh information that we found in

774
00:32:55,840 --> 00:32:59,519
option for providing tight bounds for

775
00:32:58,159 --> 00:33:02,960
all the

776
00:32:59,519 --> 00:33:06,240
different variants and

777
00:33:02,960 --> 00:33:10,000
we will we saw that the

778
00:33:06,240 --> 00:33:13,440
we could reduce the assumption set up

779
00:33:10,000 --> 00:33:16,640
from the gap simultaneously hermann and

780
00:33:13,440 --> 00:33:19,679
gab computational difficult problems to

781
00:33:16,640 --> 00:33:22,799
weaker assumptions that uh

782
00:33:19,679 --> 00:33:25,360
in this step we saw that

783
00:33:22,799 --> 00:33:27,200
we could reduce security for curves

784
00:33:25,360 --> 00:33:28,719
which have a small cofactor

785
00:33:27,200 --> 00:33:30,720
to the problems on the prime or the

786
00:33:28,720 --> 00:33:33,440
subgroup

787
00:33:30,720 --> 00:33:34,720
and maybe it's interesting for the hash

788
00:33:33,440 --> 00:33:38,320
to curve group

789
00:33:34,720 --> 00:33:42,000
we found an important important

790
00:33:38,320 --> 00:33:42,000
formal requirement for the map

791
00:33:42,480 --> 00:33:45,840
which allows the reduction

792
00:33:45,919 --> 00:33:49,039
of the problems for the full group which

793
00:33:48,320 --> 00:33:50,960
is that's

794
00:33:49,039 --> 00:33:52,559
if you're having a point which could not

795
00:33:50,960 --> 00:33:55,679
be generated by the

796
00:33:52,559 --> 00:33:57,678
map-to-point algorithm

797
00:33:55,679 --> 00:33:59,200
we need the property that there must be

798
00:33:57,679 --> 00:34:01,760
an efficient algorithm for

799
00:33:59,200 --> 00:34:03,360
finding an exponent such that the scalar

800
00:34:01,760 --> 00:34:04,240
multiplication of this point with this

801
00:34:03,360 --> 00:34:07,039
exponent

802
00:34:04,240 --> 00:34:08,159
is on the map that's a property which is

803
00:34:07,039 --> 00:34:10,079
provided by all

804
00:34:08,159 --> 00:34:13,919
currently discussed mappings from hash

805
00:34:10,079 --> 00:34:16,159
to curve or used for estradiol or dcaf

806
00:34:13,918 --> 00:34:17,839
when on average every second experiment

807
00:34:16,159 --> 00:34:21,440
will do

808
00:34:17,839 --> 00:34:25,279
and with this property it's possible to

809
00:34:21,440 --> 00:34:27,599
er to reduce the hardness of the

810
00:34:25,280 --> 00:34:29,520
simultaneous difficult problem on the

811
00:34:27,599 --> 00:34:30,399
subset of points that could be generated

812
00:34:29,520 --> 00:34:31,918
by the map

813
00:34:30,399 --> 00:34:33,759
to the simultaneous if you haven't

814
00:34:31,918 --> 00:34:35,918
problem on the group

815
00:34:33,760 --> 00:34:37,760
or the prime order group subgroup

816
00:34:35,918 --> 00:34:39,759
respectively

817
00:34:37,760 --> 00:34:42,480
discussion of these aspects was not

818
00:34:39,760 --> 00:34:44,639
considered to be suitable for the rfc

819
00:34:42,480 --> 00:34:45,839
and we are prepared preparing a separate

820
00:34:44,639 --> 00:34:47,839
paper uh

821
00:34:45,839 --> 00:34:49,599
discussing all these implementation

822
00:34:47,839 --> 00:34:51,839
details as a first step

823
00:34:49,599 --> 00:34:52,639
and that's the currently the main aspect

824
00:34:51,839 --> 00:34:56,159
in our

825
00:34:52,639 --> 00:34:56,159
weekly meeting in the editor team

826
00:34:58,079 --> 00:35:01,359
regarding the reference implementations

827
00:35:01,040 --> 00:35:03,200
we

828
00:35:01,359 --> 00:35:04,640
presently have an uh reference

829
00:35:03,200 --> 00:35:07,919
implementation and text has vector

830
00:35:04,640 --> 00:35:11,759
generation for x25519 and alligator

831
00:35:07,920 --> 00:35:14,839
it's currently still held at my private

832
00:35:11,760 --> 00:35:19,040
github repository there's a new

833
00:35:14,839 --> 00:35:21,599
github git repository under hood of cfrg

834
00:35:19,040 --> 00:35:23,520
setup but we still need to transfer the

835
00:35:21,599 --> 00:35:25,599
code to this repository

836
00:35:23,520 --> 00:35:26,880
and as a next step similar reference

837
00:35:25,599 --> 00:35:30,400
implementation and test vector

838
00:35:26,880 --> 00:35:30,400
generation for short by extras

839
00:35:31,520 --> 00:35:37,040
will be the next step at least in sage

840
00:35:35,040 --> 00:35:39,680
in my opinion it would be preferable to

841
00:35:37,040 --> 00:35:41,359
have also python and ansi c

842
00:35:39,680 --> 00:35:44,399
implementation so that we could check

843
00:35:41,359 --> 00:35:46,880
that all of these three inter-operate

844
00:35:44,400 --> 00:35:46,880
neatly

845
00:35:48,160 --> 00:35:54,560
any suggestion uh regarding how to

846
00:35:52,400 --> 00:35:56,839
prepare this reference implementation

847
00:35:54,560 --> 00:35:59,520
for maybe python and

848
00:35:56,839 --> 00:36:02,640
nzcc would be welcomed by us

849
00:35:59,520 --> 00:36:04,240
so it would be

850
00:36:02,640 --> 00:36:06,000
good to have a small self-contained

851
00:36:04,240 --> 00:36:09,118
library don't which doesn't

852
00:36:06,000 --> 00:36:10,839
have the need for um pulling in a lot of

853
00:36:09,119 --> 00:36:13,680
a lot of code and of course it should be

854
00:36:10,839 --> 00:36:15,599
a high quality constant time code

855
00:36:13,680 --> 00:36:18,240
so any suggestion would be helpful and

856
00:36:15,599 --> 00:36:18,240
would be welcome

857
00:36:19,440 --> 00:36:24,320
so as a summary i'd like to say that we

858
00:36:23,680 --> 00:36:26,799
mainly have

859
00:36:24,320 --> 00:36:27,760
organized our team and started the work

860
00:36:26,800 --> 00:36:29,760
unfortunately

861
00:36:27,760 --> 00:36:31,119
we are don't having the speed that i'd

862
00:36:29,760 --> 00:36:34,560
like to have

863
00:36:31,119 --> 00:36:38,079
also because of the pandemic situation

864
00:36:34,560 --> 00:36:39,520
it's slowing down the current activity

865
00:36:38,079 --> 00:36:42,400
is providing

866
00:36:39,520 --> 00:36:44,800
tight security bonds and reductions for

867
00:36:42,400 --> 00:36:47,760
all the tiny implementation differences

868
00:36:44,800 --> 00:36:49,920
that we considered and the next

869
00:36:47,760 --> 00:36:52,800
important step will be to have

870
00:36:49,920 --> 00:36:55,200
scripts and test vectors and reference

871
00:36:52,800 --> 00:36:59,760
implementations for the

872
00:36:55,200 --> 00:36:59,759
alternative implementations thank you

873
00:37:00,240 --> 00:37:11,520
thank you bjorn um

874
00:37:08,800 --> 00:37:13,200
and one question for me uh viewer maybe

875
00:37:11,520 --> 00:37:16,720
i have missed something but

876
00:37:13,200 --> 00:37:18,839
uh could you tell me uh are there any

877
00:37:16,720 --> 00:37:20,078
ideas or maybe

878
00:37:18,840 --> 00:37:23,599
[Music]

879
00:37:20,079 --> 00:37:26,320
drafts or some discussions about

880
00:37:23,599 --> 00:37:27,200
integration of cpas to existing itf

881
00:37:26,320 --> 00:37:30,240
protocols

882
00:37:27,200 --> 00:37:33,520
you have such documents for fro

883
00:37:30,240 --> 00:37:36,720
for opaque and for spec 2.

884
00:37:33,520 --> 00:37:40,480
do you have any process here for

885
00:37:36,720 --> 00:37:44,720
cpas so what i've been doing is

886
00:37:40,480 --> 00:37:45,599
i've been in contact with others

887
00:37:44,720 --> 00:37:49,439
interested in

888
00:37:45,599 --> 00:37:49,440
providing a draft for tls

889
00:37:49,760 --> 00:37:56,160
i have a list of uh of

890
00:37:52,880 --> 00:37:58,160
uh of persons in in order to perceive

891
00:37:56,160 --> 00:38:03,118
them but i didn't find time

892
00:37:58,160 --> 00:38:04,480
to to to prepare a draft for a tls

893
00:38:03,119 --> 00:38:05,599
integration but that would be the next

894
00:38:04,480 --> 00:38:07,839
step

895
00:38:05,599 --> 00:38:07,839
that

896
00:38:09,599 --> 00:38:13,920
but there's no document at the moment

897
00:38:11,520 --> 00:38:18,240
and no

898
00:38:13,920 --> 00:38:23,119
but no progress there

899
00:38:18,240 --> 00:38:25,680
okay any comments or other questions

900
00:38:23,119 --> 00:38:25,680
please speak

901
00:38:30,320 --> 00:38:37,440
okay thanks a hello bjorn

902
00:38:33,520 --> 00:38:41,440
then we have the next uh presentation

903
00:38:37,440 --> 00:38:44,320
from andre de valence uh respect to play

904
00:38:41,440 --> 00:38:44,320
plus dkf

905
00:38:45,680 --> 00:38:48,879
yes please start a screen

906
00:38:51,839 --> 00:38:54,880
i am

907
00:38:55,119 --> 00:39:03,760
hoping to share my screen

908
00:38:58,800 --> 00:39:03,760
yes we see screen and

909
00:39:04,160 --> 00:39:08,640
hopefully uh does that slide show up

910
00:39:09,440 --> 00:39:13,520
yes we have we see the slide so please

911
00:39:12,160 --> 00:39:17,680
start

912
00:39:13,520 --> 00:39:17,680
ah great um

913
00:39:18,400 --> 00:39:21,920
i see um i'm

914
00:39:26,839 --> 00:39:29,839
just

915
00:39:35,119 --> 00:39:41,440
sorry about that um all right uh so

916
00:39:38,160 --> 00:39:45,440
um uh i'm gonna

917
00:39:41,440 --> 00:39:48,640
give an update on uh ristrato 255 and

918
00:39:45,440 --> 00:39:51,760
uh decaf448 the draft is

919
00:39:48,640 --> 00:39:54,879
uh the the name of the draft is there

920
00:39:51,760 --> 00:39:58,240
um first uh first things first what

921
00:39:54,880 --> 00:40:00,480
problem are we trying to solve here

922
00:39:58,240 --> 00:40:02,399
currently you're uh you're not we don't

923
00:40:00,480 --> 00:40:06,400
see your slides

924
00:40:02,400 --> 00:40:11,839
oh really we see your screen with

925
00:40:06,400 --> 00:40:11,839
your window window

926
00:40:14,640 --> 00:40:17,680
that's unfortunate

927
00:40:19,200 --> 00:40:24,160
uh does it make a difference if i don't

928
00:40:21,680 --> 00:40:26,879
full screen

929
00:40:24,160 --> 00:40:26,879
the slides

930
00:40:28,160 --> 00:40:32,078
no it does not

931
00:40:36,160 --> 00:40:39,759
are you trying to figure out how to see

932
00:40:37,440 --> 00:40:42,800
your your notes

933
00:40:39,760 --> 00:40:44,800
yeah maybe i can use the um

934
00:40:42,800 --> 00:40:47,359
no i'm i'm just trying to figure out how

935
00:40:44,800 --> 00:40:50,720
to get the um

936
00:40:47,359 --> 00:40:54,960
okay uh let me share this live

937
00:40:50,720 --> 00:40:57,118
uh great it can be either

938
00:40:54,960 --> 00:40:58,480
i think you see the live place so tell

939
00:40:57,119 --> 00:41:01,599
me right

940
00:40:58,480 --> 00:41:04,839
when you want right um

941
00:41:01,599 --> 00:41:07,839
so uh here we are um again

942
00:41:04,839 --> 00:41:07,839
next

943
00:41:09,119 --> 00:41:13,839
so the first thing is what problem are

944
00:41:11,520 --> 00:41:16,960
we trying to solve

945
00:41:13,839 --> 00:41:19,440
next which is

946
00:41:16,960 --> 00:41:21,680
uh you're an implementer of a

947
00:41:19,440 --> 00:41:24,240
cryptographic protocol that has just

948
00:41:21,680 --> 00:41:26,480
come out and you start opening up the

949
00:41:24,240 --> 00:41:28,879
paper that describes it it says

950
00:41:26,480 --> 00:41:30,079
let g denote a cyclic group of prime

951
00:41:28,880 --> 00:41:32,560
order p

952
00:41:30,079 --> 00:41:33,440
um and now as an implementer you have to

953
00:41:32,560 --> 00:41:37,599
translate this

954
00:41:33,440 --> 00:41:40,720
from the abstract requirements to some

955
00:41:37,599 --> 00:41:42,960
concrete instantiation using probably an

956
00:41:40,720 --> 00:41:45,839
elliptic curve group

957
00:41:42,960 --> 00:41:47,680
next which means that you need to choose

958
00:41:45,839 --> 00:41:51,200
what kind of elliptic curve to use

959
00:41:47,680 --> 00:41:54,560
next um and there's two

960
00:41:51,200 --> 00:41:57,279
common choices that people have

961
00:41:54,560 --> 00:41:58,560
mostly settled on via stress curve or an

962
00:41:57,280 --> 00:42:01,839
edwards curve

963
00:41:58,560 --> 00:42:03,520
next the virus stress curves give you

964
00:42:01,839 --> 00:42:05,839
prime order groups which is what you

965
00:42:03,520 --> 00:42:07,440
want whereas edwards curves only ever

966
00:42:05,839 --> 00:42:11,359
give you

967
00:42:07,440 --> 00:42:12,800
a prime order times a small cofactor

968
00:42:11,359 --> 00:42:14,560
but on the other hand they have the

969
00:42:12,800 --> 00:42:17,200
fastest formulas next

970
00:42:14,560 --> 00:42:19,359
and next and they have uh complete

971
00:42:17,200 --> 00:42:20,720
formulas so they work with all inputs

972
00:42:19,359 --> 00:42:22,640
and it's easy to implement them in

973
00:42:20,720 --> 00:42:23,118
constant time the kind of sad face is

974
00:42:22,640 --> 00:42:27,200
there

975
00:42:23,119 --> 00:42:28,960
because um on uh

976
00:42:27,200 --> 00:42:31,118
on virus stress curves although complete

977
00:42:28,960 --> 00:42:33,280
formulas do exist they're much slower

978
00:42:31,119 --> 00:42:34,480
so okay we only have a small conceptual

979
00:42:33,280 --> 00:42:37,680
mismatch here

980
00:42:34,480 --> 00:42:39,760
um how how bad could that be what's

981
00:42:37,680 --> 00:42:43,040
wrong with a small cofactor

982
00:42:39,760 --> 00:42:44,800
um well the

983
00:42:43,040 --> 00:42:47,040
the big problem is that the security

984
00:42:44,800 --> 00:42:49,760
analysis for the abstract protocol does

985
00:42:47,040 --> 00:42:52,880
not apply to its concrete implementation

986
00:42:49,760 --> 00:42:54,160
um if you want to do full validation

987
00:42:52,880 --> 00:42:56,800
that some point is

988
00:42:54,160 --> 00:42:57,520
in a prime order subgroup already you

989
00:42:56,800 --> 00:42:59,440
need to do

990
00:42:57,520 --> 00:43:01,359
essentially a scalar multiplication and

991
00:42:59,440 --> 00:43:02,240
that negates whatever speed up you would

992
00:43:01,359 --> 00:43:04,400
get

993
00:43:02,240 --> 00:43:05,839
or you can try to do some kind of ad hoc

994
00:43:04,400 --> 00:43:08,079
protocol tweaks like

995
00:43:05,839 --> 00:43:08,880
oh for this protocol we'll handle the

996
00:43:08,079 --> 00:43:11,520
cofactor

997
00:43:08,880 --> 00:43:12,000
by um you know in this part of the

998
00:43:11,520 --> 00:43:14,240
protocol

999
00:43:12,000 --> 00:43:16,960
we'll multiply by a cofactor and then

1000
00:43:14,240 --> 00:43:20,560
we'll also multiply you know over here

1001
00:43:16,960 --> 00:43:23,040
and uh so on um

1002
00:43:20,560 --> 00:43:23,759
but that means that these tweaks that

1003
00:43:23,040 --> 00:43:25,839
you do

1004
00:43:23,760 --> 00:43:26,960
um not only do you have to analyze them

1005
00:43:25,839 --> 00:43:30,000
but they also cause

1006
00:43:26,960 --> 00:43:31,280
kind of subtle quote features so as an

1007
00:43:30,000 --> 00:43:35,480
example of this

1008
00:43:31,280 --> 00:43:38,880
um rfc 8032 which standardizes

1009
00:43:35,480 --> 00:43:41,680
ed25519 does not actually require

1010
00:43:38,880 --> 00:43:43,520
a conformant implementations to agree on

1011
00:43:41,680 --> 00:43:46,879
whether or not a signature is valid

1012
00:43:43,520 --> 00:43:50,319
next this is ultimately

1013
00:43:46,880 --> 00:43:52,960
downstream of different behavior between

1014
00:43:50,319 --> 00:43:54,079
batch and single verification and that's

1015
00:43:52,960 --> 00:43:57,599
ultimately downstream

1016
00:43:54,079 --> 00:43:59,680
of a cofactor so that's pretty bad

1017
00:43:57,599 --> 00:44:02,000
for applications involving consensus

1018
00:43:59,680 --> 00:44:02,879
maybe for a protocol like tls it doesn't

1019
00:44:02,000 --> 00:44:05,680
matter

1020
00:44:02,880 --> 00:44:05,680
but um

1021
00:44:06,720 --> 00:44:10,879
if you're doing say like a a distributed

1022
00:44:09,359 --> 00:44:13,040
system that would be important

1023
00:44:10,880 --> 00:44:15,040
um and the tweaks that you have to do

1024
00:44:13,040 --> 00:44:16,960
like this key clamping

1025
00:44:15,040 --> 00:44:18,319
um cause a lot of issues whenever you

1026
00:44:16,960 --> 00:44:21,760
try to do something

1027
00:44:18,319 --> 00:44:24,160
beyond just the the basic protocol

1028
00:44:21,760 --> 00:44:25,440
and this is the happy path case right

1029
00:44:24,160 --> 00:44:28,960
the bad case is

1030
00:44:25,440 --> 00:44:30,319
next um you just have a catastrophic

1031
00:44:28,960 --> 00:44:31,680
failure where something is totally

1032
00:44:30,319 --> 00:44:34,960
insecure

1033
00:44:31,680 --> 00:44:37,440
so how do you fix this mismatch uh

1034
00:44:34,960 --> 00:44:38,720
this the answer is uh you can use decaf

1035
00:44:37,440 --> 00:44:42,720
and rustretto

1036
00:44:38,720 --> 00:44:45,359
um what are these uh

1037
00:44:42,720 --> 00:44:47,439
these are uh construction originally by

1038
00:44:45,359 --> 00:44:50,640
mike hamburg of a prime order group

1039
00:44:47,440 --> 00:44:53,040
next and uh what they do is they use a

1040
00:44:50,640 --> 00:44:54,720
non-prime order curve internally to

1041
00:44:53,040 --> 00:44:56,319
implement all of the group operations

1042
00:44:54,720 --> 00:44:58,720
with no overhead

1043
00:44:56,319 --> 00:44:59,680
and then all of the work happens in this

1044
00:44:58,720 --> 00:45:02,399
canonical

1045
00:44:59,680 --> 00:45:04,399
non-malleable encoding of group elements

1046
00:45:02,400 --> 00:45:05,520
that provides you with a prime order

1047
00:45:04,400 --> 00:45:08,560
group

1048
00:45:05,520 --> 00:45:12,160
and it comes batteries included with a

1049
00:45:08,560 --> 00:45:15,839
single hash to group method that's uh

1050
00:45:12,160 --> 00:45:18,480
that fully encapsulates all of the

1051
00:45:15,839 --> 00:45:19,839
elliptic curve related math so it's

1052
00:45:18,480 --> 00:45:21,280
agnostic to

1053
00:45:19,839 --> 00:45:23,599
you know how am i doing domain

1054
00:45:21,280 --> 00:45:25,280
separation am i using sha2 am i using

1055
00:45:23,599 --> 00:45:28,960
shape et cetera et cetera

1056
00:45:25,280 --> 00:45:29,839
um but all of the the intricacies of the

1057
00:45:28,960 --> 00:45:33,599
curve math

1058
00:45:29,839 --> 00:45:36,880
are are contained next

1059
00:45:33,599 --> 00:45:39,760
so how does this work um

1060
00:45:36,880 --> 00:45:41,599
as the full uh explanation you can find

1061
00:45:39,760 --> 00:45:43,440
on the ristrato group website so this is

1062
00:45:41,599 --> 00:45:45,119
just kind of a conceptual overview

1063
00:45:43,440 --> 00:45:47,040
we're going to work with three families

1064
00:45:45,119 --> 00:45:49,520
of curves next

1065
00:45:47,040 --> 00:45:50,160
uh there's montgomery curves next they

1066
00:45:49,520 --> 00:45:52,319
have this

1067
00:45:50,160 --> 00:45:54,720
um formula that you might have seen

1068
00:45:52,319 --> 00:45:55,200
before here i'm writing it in terms of u

1069
00:45:54,720 --> 00:45:57,520
and v

1070
00:45:55,200 --> 00:45:58,480
but other elsewhere you might see as x

1071
00:45:57,520 --> 00:46:02,319
and y

1072
00:45:58,480 --> 00:46:04,960
next um these are famous because they

1073
00:46:02,319 --> 00:46:06,960
support very fast um pseudo

1074
00:46:04,960 --> 00:46:09,760
multiplication where if you have the

1075
00:46:06,960 --> 00:46:10,160
the v coordinate of one point you can

1076
00:46:09,760 --> 00:46:13,200
get

1077
00:46:10,160 --> 00:46:14,640
uh the scalar multiple um

1078
00:46:13,200 --> 00:46:16,640
and they're also convenient if you do

1079
00:46:14,640 --> 00:46:18,560
zero knowledge proofs because

1080
00:46:16,640 --> 00:46:20,078
if you're in an arithmetic circuit they

1081
00:46:18,560 --> 00:46:23,839
require very few constraints

1082
00:46:20,079 --> 00:46:26,960
next so we have edwards curves also

1083
00:46:23,839 --> 00:46:29,119
um they have this formula uh

1084
00:46:26,960 --> 00:46:30,880
these are irrational equivalent to

1085
00:46:29,119 --> 00:46:33,280
montgomery curves

1086
00:46:30,880 --> 00:46:35,520
uh they have the fastest known formulas

1087
00:46:33,280 --> 00:46:37,839
for curve operations next

1088
00:46:35,520 --> 00:46:40,240
and uh the really cool thing is that

1089
00:46:37,839 --> 00:46:42,960
those formulas also allow

1090
00:46:40,240 --> 00:46:44,959
parallelism within curve operations so

1091
00:46:42,960 --> 00:46:46,560
you can do very fun things with

1092
00:46:44,960 --> 00:46:48,880
cindy that's very nice for

1093
00:46:46,560 --> 00:46:51,040
implementations the third is jacobi

1094
00:46:48,880 --> 00:46:54,640
coordinate curves

1095
00:46:51,040 --> 00:46:57,599
uh which are more exotic and

1096
00:46:54,640 --> 00:46:58,960
uh not really used very much but the

1097
00:46:57,599 --> 00:47:00,480
reason that they're relevant here is

1098
00:46:58,960 --> 00:47:03,520
that it's very easy to write down

1099
00:47:00,480 --> 00:47:05,200
four points of order two um

1100
00:47:03,520 --> 00:47:07,040
and that means that you can efficiently

1101
00:47:05,200 --> 00:47:10,640
encode a point

1102
00:47:07,040 --> 00:47:13,279
mod this uh two torsion of order four

1103
00:47:10,640 --> 00:47:15,279
and so that gets rid of a cofactor four

1104
00:47:13,280 --> 00:47:17,280
we don't use jacobi coordinate curves

1105
00:47:15,280 --> 00:47:20,240
so the next thing that we do is we link

1106
00:47:17,280 --> 00:47:24,160
up these different curves using esogenes

1107
00:47:20,240 --> 00:47:28,479
um curves are are connected on

1108
00:47:24,160 --> 00:47:31,200
this isogeny graph where the

1109
00:47:28,480 --> 00:47:33,440
uh the curve that's in the center is a

1110
00:47:31,200 --> 00:47:36,480
jacobi coordinate curve for some kind of

1111
00:47:33,440 --> 00:47:39,119
parameter choices a and d and it's

1112
00:47:36,480 --> 00:47:39,680
two exogenous to two different edwards

1113
00:47:39,119 --> 00:47:41,599
curves

1114
00:47:39,680 --> 00:47:43,440
as well as a montgomery curve and then

1115
00:47:41,599 --> 00:47:46,800
that montgomery curve is

1116
00:47:43,440 --> 00:47:48,480
um uh equivalent to a

1117
00:47:46,800 --> 00:47:50,800
a third edwards curve so there's a lot

1118
00:47:48,480 --> 00:47:53,839
of different curves floating around

1119
00:47:50,800 --> 00:47:55,520
um next um but the idea is that we're

1120
00:47:53,839 --> 00:47:57,359
going to use these isogenies to do the

1121
00:47:55,520 --> 00:47:59,200
encoding so we already got this nice

1122
00:47:57,359 --> 00:48:01,598
encoding on the jacobi cortic

1123
00:47:59,200 --> 00:48:04,799
we specify an encoding there and then we

1124
00:48:01,599 --> 00:48:06,880
use isogenes to transport that encoding

1125
00:48:04,800 --> 00:48:09,119
to different curve shapes so we can do

1126
00:48:06,880 --> 00:48:12,880
define the encoding starting with

1127
00:48:09,119 --> 00:48:14,079
um this jacobi quartic where it's very

1128
00:48:12,880 --> 00:48:15,839
easy to write down

1129
00:48:14,079 --> 00:48:17,520
and then we transport that over to a

1130
00:48:15,839 --> 00:48:19,440
curve that we might want to use

1131
00:48:17,520 --> 00:48:20,800
uh for actually doing the group

1132
00:48:19,440 --> 00:48:24,559
operations

1133
00:48:20,800 --> 00:48:25,599
uh next and uh finally there's an extra

1134
00:48:24,559 --> 00:48:28,319
step to handle

1135
00:48:25,599 --> 00:48:29,760
cofactor eight instead of cofactor four

1136
00:48:28,319 --> 00:48:32,480
next

1137
00:48:29,760 --> 00:48:35,599
um and this kind of lets you see at a

1138
00:48:32,480 --> 00:48:38,079
conceptual level the difference between

1139
00:48:35,599 --> 00:48:39,280
decaf and ristretto so using this

1140
00:48:38,079 --> 00:48:42,800
diagram again

1141
00:48:39,280 --> 00:48:44,800
next decaf starts with a

1142
00:48:42,800 --> 00:48:46,319
curve that was defined as an edwards

1143
00:48:44,800 --> 00:48:50,079
curve

1144
00:48:46,319 --> 00:48:52,558
n448 and it transports from the jacobi

1145
00:48:50,079 --> 00:48:53,040
cortex to that edwards curve in the top

1146
00:48:52,559 --> 00:48:56,319
left

1147
00:48:53,040 --> 00:48:59,520
uh directly whereas ristretto uh

1148
00:48:56,319 --> 00:49:02,240
was designed to work with curve25519

1149
00:48:59,520 --> 00:49:04,319
so instead which was originally

1150
00:49:02,240 --> 00:49:07,040
specified as a montgomery curve

1151
00:49:04,319 --> 00:49:08,880
so instead it uses the um places the

1152
00:49:07,040 --> 00:49:10,558
edwards curve in the position

1153
00:49:08,880 --> 00:49:11,920
in the bottom right and it also handles

1154
00:49:10,559 --> 00:49:15,040
for factor a

1155
00:49:11,920 --> 00:49:18,240
next um but actually although

1156
00:49:15,040 --> 00:49:20,079
when we sort of this is a conceptual

1157
00:49:18,240 --> 00:49:20,720
picture when we tell implementers what

1158
00:49:20,079 --> 00:49:22,720
to do

1159
00:49:20,720 --> 00:49:24,558
we provide them with concrete formulas

1160
00:49:22,720 --> 00:49:26,480
that collapse all of this into just you

1161
00:49:24,559 --> 00:49:29,200
know do these operations

1162
00:49:26,480 --> 00:49:31,599
um it is also possible for

1163
00:49:29,200 --> 00:49:35,759
implementations to use any curve

1164
00:49:31,599 --> 00:49:37,040
in this graph and remain totally wire

1165
00:49:35,760 --> 00:49:38,880
compatible with all other

1166
00:49:37,040 --> 00:49:39,960
implementations which is very cool

1167
00:49:38,880 --> 00:49:41,920
so we have two concrete

1168
00:49:39,960 --> 00:49:44,400
parameterizations

1169
00:49:41,920 --> 00:49:47,440
one is restretto 255 this can be

1170
00:49:44,400 --> 00:49:49,280
implemented using curve25519

1171
00:49:47,440 --> 00:49:50,960
either the edwards or the montgomery

1172
00:49:49,280 --> 00:49:54,720
form or you can implement it with

1173
00:49:50,960 --> 00:49:56,640
a different exogenous curve um 128 bit

1174
00:49:54,720 --> 00:49:59,520
security level the security is exactly

1175
00:49:56,640 --> 00:50:02,960
the same as the security of curve 25 509

1176
00:49:59,520 --> 00:50:06,000
and we've already seen uh

1177
00:50:02,960 --> 00:50:06,559
a lot of adoption um for zero knowledge

1178
00:50:06,000 --> 00:50:09,359
proofs

1179
00:50:06,559 --> 00:50:10,559
private set intersection pics etc

1180
00:50:09,359 --> 00:50:12,078
basically you know any

1181
00:50:10,559 --> 00:50:13,760
crypto protocol that you could think of

1182
00:50:12,079 --> 00:50:16,800
that would be fun

1183
00:50:13,760 --> 00:50:20,319
uh and there's decaf 448

1184
00:50:16,800 --> 00:50:23,760
um this uses the edwards 448 curve

1185
00:50:20,319 --> 00:50:26,800
uh goldilocks next uh so you get a

1186
00:50:23,760 --> 00:50:27,200
224 bit security level and you would use

1187
00:50:26,800 --> 00:50:29,839
this

1188
00:50:27,200 --> 00:50:30,399
basically uh wherever you use ed four

1189
00:50:29,839 --> 00:50:33,599
four eight

1190
00:50:30,400 --> 00:50:36,079
so for the same um basically all the

1191
00:50:33,599 --> 00:50:38,240
same criteria for choosing between

1192
00:50:36,079 --> 00:50:40,079
uh ed two five five one nine and four

1193
00:50:38,240 --> 00:50:43,040
four eight as a signature scheme

1194
00:50:40,079 --> 00:50:43,760
would apply to dcaf448 versus restreto

1195
00:50:43,040 --> 00:50:47,279
255

1196
00:50:43,760 --> 00:50:47,839
next um so the current status of these

1197
00:50:47,280 --> 00:50:50,960
things

1198
00:50:47,839 --> 00:50:54,480
uh we have test vectors for all of the

1199
00:50:50,960 --> 00:50:56,400
encoding and decoding and

1200
00:50:54,480 --> 00:50:58,079
the various functions and the test

1201
00:50:56,400 --> 00:51:01,280
vectors are made so that you get

1202
00:50:58,079 --> 00:51:04,559
coverage of all of the edge cases

1203
00:51:01,280 --> 00:51:06,800
in the procedures which is quite nice

1204
00:51:04,559 --> 00:51:08,319
we rewrote a lot of the language in the

1205
00:51:06,800 --> 00:51:11,440
draft last year

1206
00:51:08,319 --> 00:51:14,558
to address a first round of feedback

1207
00:51:11,440 --> 00:51:18,880
uh from mailing list participants

1208
00:51:14,559 --> 00:51:21,520
and we've also added explicit

1209
00:51:18,880 --> 00:51:22,160
a section on dcaf448 adding that into

1210
00:51:21,520 --> 00:51:25,119
the spec

1211
00:51:22,160 --> 00:51:25,598
adding in uh parameters test vectors for

1212
00:51:25,119 --> 00:51:28,640
that

1213
00:51:25,599 --> 00:51:30,400
next um and

1214
00:51:28,640 --> 00:51:32,400
uh we don't think that there are any

1215
00:51:30,400 --> 00:51:36,000
more outstanding issues with

1216
00:51:32,400 --> 00:51:39,280
the spec so it is you know in some

1217
00:51:36,000 --> 00:51:42,480
sense ready to go for the next

1218
00:51:39,280 --> 00:51:46,000
um round of

1219
00:51:42,480 --> 00:51:49,200
feedback comments um

1220
00:51:46,000 --> 00:51:51,839
other kinds of um you know

1221
00:51:49,200 --> 00:51:52,480
the next round of the standardization uh

1222
00:51:51,839 --> 00:51:54,720
process

1223
00:51:52,480 --> 00:51:56,240
so i'm sorry about the screw up with the

1224
00:51:54,720 --> 00:51:58,160
slides but um

1225
00:51:56,240 --> 00:52:00,959
i'd be totally happy to answer any

1226
00:51:58,160 --> 00:52:03,200
questions if anybody has

1227
00:52:00,960 --> 00:52:03,200
them

1228
00:52:17,040 --> 00:52:32,319
you know we can't hear you please turn

1229
00:52:19,839 --> 00:52:37,200
your audio on now

1230
00:52:32,319 --> 00:52:37,200
we can hear you please tell the question

1231
00:52:45,599 --> 00:52:50,960
okay uh while bjorn

1232
00:52:51,920 --> 00:52:58,960
maybe is dealing with some issues uh

1233
00:52:55,520 --> 00:53:02,559
henry can i ask you to

1234
00:52:58,960 --> 00:53:05,920
remind the chairs about the next steps

1235
00:53:02,559 --> 00:53:09,520
namely uh security review

1236
00:53:05,920 --> 00:53:10,319
uh next week if no comments from the

1237
00:53:09,520 --> 00:53:13,680
group

1238
00:53:10,319 --> 00:53:17,040
occurs this week

1239
00:53:13,680 --> 00:53:20,319
uh so i'm

1240
00:53:17,040 --> 00:53:23,359
um please send us a reminder there's a

1241
00:53:20,319 --> 00:53:29,839
reminder next week if okay no

1242
00:53:23,359 --> 00:53:29,839
command secure this week okay great

1243
00:53:30,400 --> 00:53:37,119
okay sorry do you hear me now yes yes

1244
00:53:34,000 --> 00:53:39,920
okay so uh the question

1245
00:53:37,119 --> 00:53:40,839
that i'm having is do you plan to

1246
00:53:39,920 --> 00:53:43,920
synchronize

1247
00:53:40,839 --> 00:53:46,400
your hash to curve operation

1248
00:53:43,920 --> 00:53:47,440
with the algorithm from the hash to

1249
00:53:46,400 --> 00:53:50,960
curve draft or

1250
00:53:47,440 --> 00:53:51,760
do you expect that decaf and restrictor

1251
00:53:50,960 --> 00:53:54,240
will be

1252
00:53:51,760 --> 00:53:56,400
having slightly different hash to curve

1253
00:53:54,240 --> 00:53:59,759
algorithms in the future

1254
00:53:56,400 --> 00:54:02,880
so um hope

1255
00:53:59,760 --> 00:54:06,240
i i think ideally what we would do is

1256
00:54:02,880 --> 00:54:09,359
have the um uh so

1257
00:54:06,240 --> 00:54:11,839
as i mentioned the um the division

1258
00:54:09,359 --> 00:54:14,000
that is in the draft that we have now is

1259
00:54:11,839 --> 00:54:17,599
basically at the boundary of

1260
00:54:14,000 --> 00:54:20,240
um the symmetric crypto um

1261
00:54:17,599 --> 00:54:20,880
so i think it's totally use uh totally

1262
00:54:20,240 --> 00:54:24,240
useful

1263
00:54:20,880 --> 00:54:27,359
for there to be a really good spec

1264
00:54:24,240 --> 00:54:30,879
of how to properly

1265
00:54:27,359 --> 00:54:34,960
do domain separation and everything

1266
00:54:30,880 --> 00:54:38,400
but in order to have compatibility with

1267
00:54:34,960 --> 00:54:39,280
existing implementations and systems

1268
00:54:38,400 --> 00:54:42,400
that do

1269
00:54:39,280 --> 00:54:45,280
like slightly different choices um

1270
00:54:42,400 --> 00:54:46,640
i think it probably makes sense to keep

1271
00:54:45,280 --> 00:54:49,440
the same kind of

1272
00:54:46,640 --> 00:54:52,078
um you know you feed the this is the

1273
00:54:49,440 --> 00:54:56,480
place where you put in the uniform bytes

1274
00:54:52,079 --> 00:54:58,240
and then the curve math happens

1275
00:54:56,480 --> 00:54:59,599
so ideally maybe it would be possible

1276
00:54:58,240 --> 00:55:03,359
for the hash to curve

1277
00:54:59,599 --> 00:55:06,720
um draft to say if you want to do hash

1278
00:55:03,359 --> 00:55:09,598
to curve to ristretto you first do this

1279
00:55:06,720 --> 00:55:11,118
symmetric operations and then you plug

1280
00:55:09,599 --> 00:55:14,160
that into this

1281
00:55:11,119 --> 00:55:19,200
um uniform map from the

1282
00:55:14,160 --> 00:55:21,839
uh ristretto uh rfc or drafter

1283
00:55:19,200 --> 00:55:21,839
a spec

1284
00:55:24,799 --> 00:55:28,559
thank you please chris

1285
00:55:29,920 --> 00:55:36,000
yeah i just want i haven't been here

1286
00:55:32,960 --> 00:55:38,160
yes uh yeah um

1287
00:55:36,000 --> 00:55:39,839
uh thanks henry the uh the hashtag draft

1288
00:55:38,160 --> 00:55:42,399
uh basically does what you suggest now

1289
00:55:39,839 --> 00:55:43,599
um great in the next we have uh

1290
00:55:42,400 --> 00:55:46,880
basically specified

1291
00:55:43,599 --> 00:55:48,640
two ways to take arbitrary input along

1292
00:55:46,880 --> 00:55:50,559
with domain separation stuff

1293
00:55:48,640 --> 00:55:52,879
and produce an input that you can just

1294
00:55:50,559 --> 00:55:55,599
pipe right into um

1295
00:55:52,880 --> 00:55:56,160
uh basically the the the from uniform

1296
00:55:55,599 --> 00:55:58,799
bytes

1297
00:55:56,160 --> 00:56:00,558
um or whatever the the function name is

1298
00:55:58,799 --> 00:56:03,839
certainly in your document so

1299
00:56:00,559 --> 00:56:03,839
uh respected

1300
00:56:03,920 --> 00:56:07,760
so i think everything is good to go from

1301
00:56:05,440 --> 00:56:09,119
a um a hashing to ristredo and decap

1302
00:56:07,760 --> 00:56:12,880
perspective

1303
00:56:09,119 --> 00:56:14,839
cool so just to to highlight the the

1304
00:56:12,880 --> 00:56:17,440
reason that it's

1305
00:56:14,839 --> 00:56:18,319
um uh that this is i think a really good

1306
00:56:17,440 --> 00:56:21,599
approach

1307
00:56:18,319 --> 00:56:26,400
is that the uniform map that's defined

1308
00:56:21,599 --> 00:56:29,839
currently in the um decaffeinato

1309
00:56:26,400 --> 00:56:31,200
spec is made so that implementations

1310
00:56:29,839 --> 00:56:33,279
that use different internal

1311
00:56:31,200 --> 00:56:35,279
representations can still be wire

1312
00:56:33,280 --> 00:56:37,359
compatible on their hash to curve

1313
00:56:35,280 --> 00:56:39,119
so you could imagine for instance like a

1314
00:56:37,359 --> 00:56:42,400
a small space

1315
00:56:39,119 --> 00:56:47,760
um could use like a montgomery form

1316
00:56:42,400 --> 00:56:47,760
and still be um compatible

1317
00:56:48,880 --> 00:56:52,160
i agree and it fits very nicely with the

1318
00:56:50,559 --> 00:56:56,160
astro curve yeah so i think the

1319
00:56:52,160 --> 00:56:56,160
separation is perfect

1320
00:56:57,200 --> 00:57:01,759
uh thanks a lot any other questions

1321
00:57:05,520 --> 00:57:09,920
so no patience thank you henry

1322
00:57:11,119 --> 00:57:16,319
martin share a stream martin thompson

1323
00:57:17,839 --> 00:57:26,640
right ah yes

1324
00:57:20,880 --> 00:57:28,720
apparently i want to share my screen

1325
00:57:26,640 --> 00:57:30,960
there we are yes this should be

1326
00:57:28,720 --> 00:57:35,839
relatively short

1327
00:57:30,960 --> 00:57:35,839
uh there's not a lot going on here uh

1328
00:57:36,160 --> 00:57:39,200
quick status update and a couple of

1329
00:57:38,720 --> 00:57:42,640
points

1330
00:57:39,200 --> 00:57:45,200
on the open issues that we have so

1331
00:57:42,640 --> 00:57:45,839
i think felix did most of the work here

1332
00:57:45,200 --> 00:57:55,839
but

1333
00:57:45,839 --> 00:57:55,839
we've taken in the most

1334
00:58:11,760 --> 00:58:37,839
a large amount of authentication

1335
00:58:23,760 --> 00:58:37,839
we missed about 30 seconds martin

1336
00:58:38,160 --> 00:58:41,920
uh plain textile is going to be split

1337
00:58:41,119 --> 00:58:43,280
and

1338
00:58:41,920 --> 00:58:45,520
we can provide two inputs to the

1339
00:58:43,280 --> 00:58:46,720
functions that we have that will allow

1340
00:58:45,520 --> 00:58:48,960
people who have

1341
00:58:46,720 --> 00:58:50,799
uh reduces where there is more

1342
00:58:48,960 --> 00:58:54,160
authenticated than encrypted

1343
00:58:50,799 --> 00:58:57,440
data they'll be able to get tighter

1344
00:58:54,160 --> 00:59:00,558
limits in there in the

1345
00:58:57,440 --> 00:59:01,520
applications there are two things that i

1346
00:59:00,559 --> 00:59:03,599
think we

1347
00:59:01,520 --> 00:59:06,160
probably need help with and one of the

1348
00:59:03,599 --> 00:59:09,200
things that i was looking for here

1349
00:59:06,160 --> 00:59:09,598
was help i don't think that we currently

1350
00:59:09,200 --> 00:59:12,720
have

1351
00:59:09,599 --> 00:59:16,160
any good analysis of siv and

1352
00:59:12,720 --> 00:59:16,640
um there's been some discussion about

1353
00:59:16,160 --> 00:59:20,558
what

1354
00:59:16,640 --> 00:59:24,078
to do with adding an siv mode

1355
00:59:20,559 --> 00:59:26,559
section we don't have anything there

1356
00:59:24,079 --> 00:59:28,400
and we don't have anything currently

1357
00:59:26,559 --> 00:59:31,280
planned for dealing with

1358
00:59:28,400 --> 00:59:32,000
pq in this space we do know that once

1359
00:59:31,280 --> 00:59:34,000
quantum computers

1360
00:59:32,000 --> 00:59:35,680
are around there's going to be very

1361
00:59:34,000 --> 00:59:37,599
different limits

1362
00:59:35,680 --> 00:59:39,279
if we have an assumption of a quantum

1363
00:59:37,599 --> 00:59:41,680
computer of a certain size

1364
00:59:39,280 --> 00:59:43,359
but um we don't currently have any plans

1365
00:59:41,680 --> 00:59:47,118
to do anything about that one and my

1366
00:59:43,359 --> 00:59:49,119
proposal here would be to

1367
00:59:47,119 --> 00:59:50,720
proceed and say that the document is

1368
00:59:49,119 --> 00:59:53,359
done just

1369
00:59:50,720 --> 00:59:54,640
including some caveats and notes about

1370
00:59:53,359 --> 00:59:57,920
these things rather than

1371
00:59:54,640 --> 01:00:01,839
having complete analysis of those

1372
00:59:57,920 --> 01:00:01,839
in light of things like pq

1373
01:00:02,000 --> 01:00:06,079
any comments that's all i have

1374
01:00:06,160 --> 01:00:11,279
please comment questions yes yes

1375
01:00:13,119 --> 01:00:16,000
yeah please pick up

1376
01:00:20,400 --> 01:00:24,880
yeah please turn your audio on and pick

1377
01:00:22,960 --> 01:00:29,839
up

1378
01:00:24,880 --> 01:00:29,839
apparently audio is on but muted

1379
01:00:47,839 --> 01:00:52,000
so notice that dan asked in chat whether

1380
01:00:50,000 --> 01:00:55,040
this would be limits for

1381
01:00:52,000 --> 01:00:58,640
sov generically or the specific

1382
01:00:55,040 --> 01:00:59,680
gcm sov mode uh what's in the draft

1383
01:00:58,640 --> 01:01:02,720
currently is

1384
01:00:59,680 --> 01:01:03,359
very specific to specific instantiations

1385
01:01:02,720 --> 01:01:05,118
of

1386
01:01:03,359 --> 01:01:06,640
usage even to the point where we have

1387
01:01:05,119 --> 01:01:25,839
the randomized uh

1388
01:01:06,640 --> 01:01:25,839
knots which is the name

1389
01:01:34,160 --> 01:01:41,440
i'm gonna stop now

1390
01:01:38,319 --> 01:01:41,440
okay any other questions

1391
01:01:42,960 --> 01:01:48,000
then let's pick up and you can speak up

1392
01:01:50,839 --> 01:01:56,078
now

1393
01:01:52,960 --> 01:02:07,839
please publish the unimpeded send

1394
01:01:56,079 --> 01:02:07,839
out button on the top

1395
01:02:18,960 --> 01:02:24,760
you broke up in your response about sivs

1396
01:02:22,000 --> 01:02:28,480
so i'm i'm wondering whether this is

1397
01:02:24,760 --> 01:02:33,280
gcmsiv's limits or

1398
01:02:28,480 --> 01:02:35,520
or the more generic siv mode itself

1399
01:02:33,280 --> 01:02:36,319
yeah sorry about that dan that's me

1400
01:02:35,520 --> 01:02:39,280
dicko

1401
01:02:36,319 --> 01:02:40,319
um the the draft currently has very

1402
01:02:39,280 --> 01:02:42,000
specific

1403
01:02:40,319 --> 01:02:44,079
limits in terms of specific

1404
01:02:42,000 --> 01:02:45,359
instantiations of the aeads

1405
01:02:44,079 --> 01:02:46,960
including things like having the nonce

1406
01:02:45,359 --> 01:02:47,359
randomization that we use in tls and

1407
01:02:46,960 --> 01:02:49,520
other

1408
01:02:47,359 --> 01:02:51,038
settings so i would expect if we were

1409
01:02:49,520 --> 01:02:53,759
going to do anything

1410
01:02:51,039 --> 01:02:54,799
for siv it would be specifically aes gcm

1411
01:02:53,760 --> 01:02:58,240
siv with a

1412
01:02:54,799 --> 01:03:01,200
particular set of bounds

1413
01:02:58,240 --> 01:03:04,078
on all the parameters rather than

1414
01:03:01,200 --> 01:03:04,078
something very generic

1415
01:03:04,480 --> 01:03:07,200
okay thank you

1416
01:03:09,520 --> 01:03:17,839
thank you please

1417
01:03:24,160 --> 01:03:29,759
okay so just relaying from jabba um

1418
01:03:27,440 --> 01:03:31,680
it says so i just read the drafts and

1419
01:03:29,760 --> 01:03:33,760
i'm missing terms like gigabytes

1420
01:03:31,680 --> 01:03:35,759
it has things like p the probability of

1421
01:03:33,760 --> 01:03:37,839
an attack which i don't know where

1422
01:03:35,760 --> 01:03:39,200
people can take from

1423
01:03:37,839 --> 01:03:40,799
so i think it should have some kind of

1424
01:03:39,200 --> 01:03:45,759
table with actual gigabytes you need

1425
01:03:40,799 --> 01:03:47,920
before you need to re-key

1426
01:03:45,760 --> 01:03:48,960
is an interesting point but

1427
01:03:47,920 --> 01:03:51,520
unfortunately

1428
01:03:48,960 --> 01:03:52,160
the way that the deciphers are used it

1429
01:03:51,520 --> 01:03:54,559
very

1430
01:03:52,160 --> 01:03:55,359
very much depends on uh specifics of

1431
01:03:54,559 --> 01:03:58,079
things like

1432
01:03:55,359 --> 01:03:59,279
number of bytes in each message number

1433
01:03:58,079 --> 01:04:01,440
of messages

1434
01:03:59,280 --> 01:04:02,799
and a bunch of other parameters so we

1435
01:04:01,440 --> 01:04:05,680
can't do something as simple as

1436
01:04:02,799 --> 01:04:06,240
this many gigabytes unless we have some

1437
01:04:05,680 --> 01:04:08,480
bounds

1438
01:04:06,240 --> 01:04:09,520
on on that analysis so if you look at

1439
01:04:08,480 --> 01:04:12,559
the way

1440
01:04:09,520 --> 01:04:15,680
that some implementations are doing that

1441
01:04:12,559 --> 01:04:17,280
um they need to have

1442
01:04:15,680 --> 01:04:19,359
understandings of things like typical

1443
01:04:17,280 --> 01:04:21,520
message sizes and

1444
01:04:19,359 --> 01:04:22,880
um other other constraints on the

1445
01:04:21,520 --> 01:04:23,359
implementation like the the split

1446
01:04:22,880 --> 01:04:26,559
between

1447
01:04:23,359 --> 01:04:28,400
aad and plain text so yes

1448
01:04:26,559 --> 01:04:29,680
we could make a very big table with many

1449
01:04:28,400 --> 01:04:33,760
dimensions but

1450
01:04:29,680 --> 01:04:34,960
um that's pretty much self-service

1451
01:04:33,760 --> 01:04:37,039
the other thing is that we don't know

1452
01:04:34,960 --> 01:04:38,720
what people's tolerances are for for

1453
01:04:37,039 --> 01:04:40,240
attack probability we don't actually

1454
01:04:38,720 --> 01:04:43,279
have any real

1455
01:04:40,240 --> 01:04:45,200
good um guidance here on

1456
01:04:43,280 --> 01:04:46,720
on whether two to the minus 57 which is

1457
01:04:45,200 --> 01:04:49,279
a number that tls used

1458
01:04:46,720 --> 01:04:50,558
or to the minus 40 would be acceptable

1459
01:04:49,280 --> 01:04:53,280
and so that's

1460
01:04:50,559 --> 01:04:54,240
kind of something we're leaving up to to

1461
01:04:53,280 --> 01:04:57,119
people to

1462
01:04:54,240 --> 01:04:57,118
decide on their own

1463
01:04:58,000 --> 01:05:01,920
i would like to support martin here

1464
01:04:59,520 --> 01:05:05,038
because really if you

1465
01:05:01,920 --> 01:05:07,520
add such a multi-dimensional table into

1466
01:05:05,039 --> 01:05:10,880
the draft

1467
01:05:07,520 --> 01:05:13,680
you can always miss

1468
01:05:10,880 --> 01:05:14,240
the issues with minor issues that are

1469
01:05:13,680 --> 01:05:16,480
used

1470
01:05:14,240 --> 01:05:18,640
in the security proofs with the

1471
01:05:16,480 --> 01:05:21,920
probabilities that depend of

1472
01:05:18,640 --> 01:05:22,960
on many many factors so in fact uh such

1473
01:05:21,920 --> 01:05:25,920
a table

1474
01:05:22,960 --> 01:05:26,880
uh will dismiss some part of the

1475
01:05:25,920 --> 01:05:31,359
information

1476
01:05:26,880 --> 01:05:34,240
that is listed in the in the draft so

1477
01:05:31,359 --> 01:05:36,078
i would support martin that this table

1478
01:05:34,240 --> 01:05:39,439
is not a

1479
01:05:36,079 --> 01:05:41,760
best idea possible yeah so there's

1480
01:05:39,440 --> 01:05:42,640
um some discussion in chat there uh

1481
01:05:41,760 --> 01:05:44,559
chris

1482
01:05:42,640 --> 01:05:46,400
um with a little bit of help from me put

1483
01:05:44,559 --> 01:05:48,400
up a thing on github that

1484
01:05:46,400 --> 01:05:49,839
allows you to put a little slider back

1485
01:05:48,400 --> 01:05:51,680
and forth and see what the limits might

1486
01:05:49,839 --> 01:05:53,839
be under certain assumptions

1487
01:05:51,680 --> 01:05:55,440
so there are some tools here that just

1488
01:05:53,839 --> 01:05:57,440
use the the analysis that we have in the

1489
01:05:55,440 --> 01:06:00,880
draft

1490
01:05:57,440 --> 01:06:00,880
it's just a little multi-dimensional

1491
01:06:02,880 --> 01:06:06,559
thank you any other questions

1492
01:06:11,200 --> 01:06:16,240
[Music]

1493
01:06:12,799 --> 01:06:20,079
okay thank you and then the

1494
01:06:16,240 --> 01:06:22,799
next slide from armando armando please

1495
01:06:20,079 --> 01:06:22,799
share your screen

1496
01:06:28,160 --> 01:06:32,640
hello so you can hear me

1497
01:06:34,960 --> 01:06:37,440
all right

1498
01:06:38,799 --> 01:06:43,200
all right so okay my name is armando i'm

1499
01:06:41,520 --> 01:06:46,640
gonna present the status

1500
01:06:43,200 --> 01:06:50,480
of oblivious of the random functions

1501
01:06:46,640 --> 01:06:53,598
you see using prime order groups

1502
01:06:50,480 --> 01:06:57,039
so just to recall

1503
01:06:53,599 --> 01:06:58,839
and operf is uh the short for oblivious

1504
01:06:57,039 --> 01:07:01,680
drum function

1505
01:06:58,839 --> 01:07:03,839
as also chris

1506
01:07:01,680 --> 01:07:04,879
was mentioned in the talk about the back

1507
01:07:03,839 --> 01:07:08,558
this is one of the

1508
01:07:04,880 --> 01:07:10,000
fundamental parts of opaque so i'm going

1509
01:07:08,559 --> 01:07:13,039
to explain a little bit

1510
01:07:10,000 --> 01:07:16,480
uh how does this protocol works

1511
01:07:13,039 --> 01:07:20,160
so an opr ref is on to party

1512
01:07:16,480 --> 01:07:23,520
a one round three protocol between

1513
01:07:20,160 --> 01:07:26,839
between a server and a client so

1514
01:07:23,520 --> 01:07:28,319
in this case they want to compute

1515
01:07:26,839 --> 01:07:30,720
collaboratively uh

1516
01:07:28,319 --> 01:07:32,000
the output of uh sort of the random

1517
01:07:30,720 --> 01:07:35,839
function

1518
01:07:32,000 --> 01:07:40,319
in this case the client has some input x

1519
01:07:35,839 --> 01:07:42,880
and the server holds our a private key

1520
01:07:40,319 --> 01:07:44,720
and we want that the at the end of the

1521
01:07:42,880 --> 01:07:49,200
protocol the client learns

1522
01:07:44,720 --> 01:07:51,520
uh a the output of the prf

1523
01:07:49,200 --> 01:07:52,558
in such a way that is oblivious that

1524
01:07:51,520 --> 01:07:55,920
means that the client

1525
01:07:52,559 --> 01:07:58,400
only learns uh the output y but doesn't

1526
01:07:55,920 --> 01:08:01,520
learn anything about decay

1527
01:07:58,400 --> 01:08:04,000
and at the same time

1528
01:08:01,520 --> 01:08:05,038
we don't want that the server can learn

1529
01:08:04,000 --> 01:08:09,039
anything about the

1530
01:08:05,039 --> 01:08:11,599
client input or outputs

1531
01:08:09,039 --> 01:08:12,240
so we can extend that protocol and say

1532
01:08:11,599 --> 01:08:14,480
that this

1533
01:08:12,240 --> 01:08:16,479
is not only oblivious but also

1534
01:08:14,480 --> 01:08:19,040
verifiable

1535
01:08:16,479 --> 01:08:20,399
if that means that that the server now

1536
01:08:19,040 --> 01:08:24,080
can

1537
01:08:20,399 --> 01:08:27,439
commit to uh to the key that is used

1538
01:08:24,080 --> 01:08:31,040
for computing this prf and

1539
01:08:27,439 --> 01:08:33,358
returns a proof of of

1540
01:08:31,040 --> 01:08:34,399
that is used by the client to uh

1541
01:08:33,359 --> 01:08:36,799
actually

1542
01:08:34,399 --> 01:08:38,158
verifies what whether the pro was

1543
01:08:36,799 --> 01:08:41,600
computed with the

1544
01:08:38,158 --> 01:08:44,639
server key so in the in

1545
01:08:41,600 --> 01:08:46,080
when we are in this verifier mode mode

1546
01:08:44,640 --> 01:08:49,920
we say that we are

1547
01:08:46,080 --> 01:08:53,439
in the case of of a b of prf

1548
01:08:49,920 --> 01:08:54,158
okay so uh the protocol has a setup

1549
01:08:53,439 --> 01:08:56,080
phase where

1550
01:08:54,158 --> 01:08:58,158
uh basically the client and the server

1551
01:08:56,080 --> 01:09:02,559
agree on a cypher suite

1552
01:08:58,158 --> 01:09:05,920
id and for the server uh

1553
01:09:02,560 --> 01:09:06,480
they just compute uh the this the secret

1554
01:09:05,920 --> 01:09:09,120
key that

1555
01:09:06,479 --> 01:09:09,599
is used for for the protocol and there

1556
01:09:09,120 --> 01:09:12,238
are some

1557
01:09:09,600 --> 01:09:13,440
other uh additional contacts both for

1558
01:09:12,238 --> 01:09:16,639
client and server

1559
01:09:13,439 --> 01:09:19,358
uh just to that are

1560
01:09:16,640 --> 01:09:20,400
information that use is used during the

1561
01:09:19,359 --> 01:09:22,880
protocol

1562
01:09:20,399 --> 01:09:24,318
so in the online phase so the client

1563
01:09:22,880 --> 01:09:27,440
starts the communication

1564
01:09:24,319 --> 01:09:29,839
by uh blinding some input that he has

1565
01:09:27,439 --> 01:09:31,599
we can think of this input like a on on

1566
01:09:29,839 --> 01:09:34,880
the right bytes

1567
01:09:31,600 --> 01:09:35,920
this blind operation produces two uh two

1568
01:09:34,880 --> 01:09:39,359
output which is

1569
01:09:35,920 --> 01:09:42,399
an error and applied blended element

1570
01:09:39,359 --> 01:09:43,040
so this blended element is sent to the

1571
01:09:42,399 --> 01:09:46,080
server

1572
01:09:43,040 --> 01:09:47,359
which operates uh using this evaluate

1573
01:09:46,080 --> 01:09:50,318
function

1574
01:09:47,359 --> 01:09:51,199
which actually applies this a private

1575
01:09:50,319 --> 01:09:54,960
operation

1576
01:09:51,198 --> 01:09:54,960
and producing this evol

1577
01:09:56,640 --> 01:10:03,360
evil part of of computation

1578
01:09:59,920 --> 01:10:04,080
and this level is sent back to the

1579
01:10:03,360 --> 01:10:06,559
client

1580
01:10:04,080 --> 01:10:08,080
uh which uses this online operation

1581
01:10:06,560 --> 01:10:10,880
which actually reverses

1582
01:10:08,080 --> 01:10:11,679
uh in certain way the the blind that was

1583
01:10:10,880 --> 01:10:14,880
used

1584
01:10:11,679 --> 01:10:16,080
uh to get this unblinded element or

1585
01:10:14,880 --> 01:10:18,960
unblinded part

1586
01:10:16,080 --> 01:10:20,159
which finally is used together with the

1587
01:10:18,960 --> 01:10:22,960
input and some

1588
01:10:20,159 --> 01:10:24,799
um additional information to produce the

1589
01:10:22,960 --> 01:10:29,520
final output which is the

1590
01:10:24,800 --> 01:10:32,719
the the whole point of the opr uh

1591
01:10:29,520 --> 01:10:35,679
this is this whole uh protocol is

1592
01:10:32,719 --> 01:10:36,800
just the opref in the in the vo prf

1593
01:10:35,679 --> 01:10:40,480
there there's a

1594
01:10:36,800 --> 01:10:43,360
uh uh during the on blind so this

1595
01:10:40,480 --> 01:10:44,718
the client is able to uh verify the

1596
01:10:43,360 --> 01:10:47,360
proof that is same

1597
01:10:44,719 --> 01:10:49,840
inside of the evaluation made by the

1598
01:10:47,360 --> 01:10:54,080
server

1599
01:10:49,840 --> 01:10:56,960
the latest changes on the draft uh we're

1600
01:10:54,080 --> 01:10:57,360
including some uh two new cipher suite

1601
01:10:56,960 --> 01:11:00,800
for

1602
01:10:57,360 --> 01:11:01,679
uh restaurant and decaf groups and also

1603
01:11:00,800 --> 01:11:05,040
we updated

1604
01:11:01,679 --> 01:11:06,960
uh details about the hashing uh to group

1605
01:11:05,040 --> 01:11:08,800
because inside of the protocol we need

1606
01:11:06,960 --> 01:11:12,080
to do hashing to

1607
01:11:08,800 --> 01:11:14,239
the group and hashing to scalar uh

1608
01:11:12,080 --> 01:11:15,679
and and this is uh fully explained in

1609
01:11:14,239 --> 01:11:18,959
the draft now

1610
01:11:15,679 --> 01:11:19,679
so we are the section uh about additive

1611
01:11:18,960 --> 01:11:22,560
blending

1612
01:11:19,679 --> 01:11:23,360
uh blinding sorry uh this kind of

1613
01:11:22,560 --> 01:11:26,480
blinding

1614
01:11:23,360 --> 01:11:28,880
is allows to decline to produce fast

1615
01:11:26,480 --> 01:11:29,919
faster blinding than the than the

1616
01:11:28,880 --> 01:11:33,199
natural way

1617
01:11:29,920 --> 01:11:34,800
uh also uh well

1618
01:11:33,199 --> 01:11:37,360
as i mentioned there's a complete

1619
01:11:34,800 --> 01:11:39,520
specification of cyphers parameters

1620
01:11:37,360 --> 01:11:40,719
there are also test vectors available

1621
01:11:39,520 --> 01:11:44,480
and there are some

1622
01:11:40,719 --> 01:11:47,040
a lot of editorial improvements

1623
01:11:44,480 --> 01:11:49,839
as i mentioned these are the a cipher

1624
01:11:47,040 --> 01:11:51,920
suit proposed

1625
01:11:49,840 --> 01:11:54,480
there are two ciphers suit based on one

1626
01:11:51,920 --> 01:11:57,120
on roseretto one on

1627
01:11:54,480 --> 01:11:57,919
and three surfaces corresponding to

1628
01:11:57,120 --> 01:12:01,360
three nest

1629
01:11:57,920 --> 01:12:05,280
curves um and to the corresponding uh

1630
01:12:01,360 --> 01:12:07,599
security levels uh also there

1631
01:12:05,280 --> 01:12:08,880
there's a range for uh experimental

1632
01:12:07,600 --> 01:12:12,320
surface suites or

1633
01:12:08,880 --> 01:12:15,040
additional surface suites uh

1634
01:12:12,320 --> 01:12:17,199
finally there are some uh

1635
01:12:15,040 --> 01:12:18,560
implementations out there so we maintain

1636
01:12:17,199 --> 01:12:22,080
our reference implementation

1637
01:12:18,560 --> 01:12:24,640
in the in this hit hub repository

1638
01:12:22,080 --> 01:12:25,679
which uh together with the with the

1639
01:12:24,640 --> 01:12:29,600
draft by itself

1640
01:12:25,679 --> 01:12:33,199
it has some uh generation

1641
01:12:29,600 --> 01:12:36,400
of test vectors using sage and python

1642
01:12:33,199 --> 01:12:37,759
scripts uh some other compatible

1643
01:12:36,400 --> 01:12:41,360
implementations are

1644
01:12:37,760 --> 01:12:43,120
in these languages uh mainly in go

1645
01:12:41,360 --> 01:12:45,040
ah there are some implementations of

1646
01:12:43,120 --> 01:12:47,519
rust and also in c

1647
01:12:45,040 --> 01:12:50,719
and c blueprints which is uh supported

1648
01:12:47,520 --> 01:12:53,600
in boring ssl

1649
01:12:50,719 --> 01:12:54,880
well finally i will open for questions

1650
01:12:53,600 --> 01:12:58,800
and

1651
01:12:54,880 --> 01:13:04,159
any feedback is welcome for us

1652
01:12:58,800 --> 01:13:09,679
thanks so much

1653
01:13:04,159 --> 01:13:09,679
uh thanks a lot uh questions

1654
01:13:14,480 --> 01:13:22,799
no advance your advice

1655
01:13:19,199 --> 01:13:26,080
okay thank you armando and

1656
01:13:22,800 --> 01:13:29,520
the last presentation for today is

1657
01:13:26,080 --> 01:13:32,800
secure cryptoconfig from kai

1658
01:13:29,520 --> 01:13:32,800
i please share stream

1659
01:13:33,840 --> 01:13:47,840
and i think in a couple of seconds we'll

1660
01:13:37,120 --> 01:13:47,840
see you screen

1661
01:13:48,800 --> 01:13:55,440
i want to select the document

1662
01:13:52,400 --> 01:13:58,400
we still see only the so do you see

1663
01:13:55,440 --> 01:14:00,159
any play start here okay thank you hi my

1664
01:13:58,400 --> 01:14:01,839
name is minderman

1665
01:14:00,159 --> 01:14:04,639
i'm from germany and i'm going to talk

1666
01:14:01,840 --> 01:14:06,960
about the cqo cryptoconfig

1667
01:14:04,640 --> 01:14:08,400
um so what is it in a nutshell this is

1668
01:14:06,960 --> 01:14:10,320
already a summary

1669
01:14:08,400 --> 01:14:11,679
and but i will get into the details a

1670
01:14:10,320 --> 01:14:14,239
little bit more so

1671
01:14:11,679 --> 01:14:16,000
it builds up on the hopefully known

1672
01:14:14,239 --> 01:14:17,919
courser format

1673
01:14:16,000 --> 01:14:19,600
and there will be a process that

1674
01:14:17,920 --> 01:14:23,280
publishes yearly

1675
01:14:19,600 --> 01:14:25,040
a selected a list of secure algorithms

1676
01:14:23,280 --> 01:14:26,960
including their configuration so not

1677
01:14:25,040 --> 01:14:30,320
only the algorithm but also

1678
01:14:26,960 --> 01:14:32,560
detect length non-slings and so on and

1679
01:14:30,320 --> 01:14:34,000
there will be software libraries that

1680
01:14:32,560 --> 01:14:34,960
implement these script recovery

1681
01:14:34,000 --> 01:14:38,080
algorithms

1682
01:14:34,960 --> 01:14:40,080
and provide a simplified interface for

1683
01:14:38,080 --> 01:14:43,120
common cryptophagy

1684
01:14:40,080 --> 01:14:44,640
operations and they use a course as

1685
01:14:43,120 --> 01:14:47,760
output format

1686
01:14:44,640 --> 01:14:48,480
and use scc configurations from above to

1687
01:14:47,760 --> 01:14:51,760
allow both

1688
01:14:48,480 --> 01:14:53,360
automatic and default and easier manual

1689
01:14:51,760 --> 01:14:55,600
selection of algorithms

1690
01:14:53,360 --> 01:14:56,880
and their parameters so this is the

1691
01:14:55,600 --> 01:15:00,719
summary already

1692
01:14:56,880 --> 01:15:03,280
now we come to a motivation

1693
01:15:00,719 --> 01:15:05,040
there are certain problems with current

1694
01:15:03,280 --> 01:15:06,080
implementations of cryptography

1695
01:15:05,040 --> 01:15:09,280
algorithms

1696
01:15:06,080 --> 01:15:09,280
and the apis

1697
01:15:09,520 --> 01:15:14,080
so what are these problems mainly it's

1698
01:15:12,480 --> 01:15:17,280
it's difficult to choose

1699
01:15:14,080 --> 01:15:19,040
the secure parameters or a combination

1700
01:15:17,280 --> 01:15:21,599
of secure parameters

1701
01:15:19,040 --> 01:15:23,519
and that's very difficult also it's very

1702
01:15:21,600 --> 01:15:26,800
difficult for the libraries

1703
01:15:23,520 --> 01:15:28,320
to establish secure defaults so to have

1704
01:15:26,800 --> 01:15:30,960
it secure in the future

1705
01:15:28,320 --> 01:15:32,880
it's easy to make it one one time secure

1706
01:15:30,960 --> 01:15:34,000
but it's a little bit more difficult to

1707
01:15:32,880 --> 01:15:37,600
make it

1708
01:15:34,000 --> 01:15:39,679
future proof and it's difficult to make

1709
01:15:37,600 --> 01:15:42,400
the libraries misuse resistant so

1710
01:15:39,679 --> 01:15:44,480
everybody can use the great algorithms

1711
01:15:42,400 --> 01:15:45,679
we just heard about before this

1712
01:15:44,480 --> 01:15:48,159
presentation

1713
01:15:45,679 --> 01:15:49,840
so let me give you an example and so

1714
01:15:48,159 --> 01:15:50,799
there are several parameters that you

1715
01:15:49,840 --> 01:15:54,080
have to choose

1716
01:15:50,800 --> 01:15:56,080
as developer for a aes it's

1717
01:15:54,080 --> 01:15:57,679
what key length do you choose which

1718
01:15:56,080 --> 01:16:00,640
block mode do i choose

1719
01:15:57,679 --> 01:16:02,400
which or do i need padding algorithm

1720
01:16:00,640 --> 01:16:04,640
which tag length do i choose

1721
01:16:02,400 --> 01:16:05,759
and which noise length and how do i

1722
01:16:04,640 --> 01:16:08,080
generate these

1723
01:16:05,760 --> 01:16:09,600
the content of these parameters and then

1724
01:16:08,080 --> 01:16:11,920
the next question

1725
01:16:09,600 --> 01:16:13,040
um how can i change these settings in

1726
01:16:11,920 --> 01:16:15,679
the future

1727
01:16:13,040 --> 01:16:17,519
and i still can decrypt all what i

1728
01:16:15,679 --> 01:16:20,880
encrypted before

1729
01:16:17,520 --> 01:16:22,640
a second example this is about argon 2

1730
01:16:20,880 --> 01:16:24,480
which is the more recent

1731
01:16:22,640 --> 01:16:26,320
standard which we already heard

1732
01:16:24,480 --> 01:16:29,440
something about today as well

1733
01:16:26,320 --> 01:16:30,880
so there are a lot um other parameters

1734
01:16:29,440 --> 01:16:33,839
format of the input string

1735
01:16:30,880 --> 01:16:35,520
length of non's number of reds length of

1736
01:16:33,840 --> 01:16:38,719
the tag number of bytes

1737
01:16:35,520 --> 01:16:42,719
number of passes and then there are even

1738
01:16:38,719 --> 01:16:44,800
three different types of argon too and

1739
01:16:42,719 --> 01:16:46,000
how do i choose a secure combination or

1740
01:16:44,800 --> 01:16:47,840
a sufficient

1741
01:16:46,000 --> 01:16:49,840
sufficiently secure combination of these

1742
01:16:47,840 --> 01:16:50,480
algorithms and what is great about this

1743
01:16:49,840 --> 01:16:52,800
standard

1744
01:16:50,480 --> 01:16:54,559
it already has a section which uh

1745
01:16:52,800 --> 01:16:57,440
clarifies this a little bit

1746
01:16:54,560 --> 01:16:58,480
yet this is still in practice very um

1747
01:16:57,440 --> 01:17:01,040
difficult for

1748
01:16:58,480 --> 01:17:02,159
for developers to choose anything of

1749
01:17:01,040 --> 01:17:04,400
this

1750
01:17:02,159 --> 01:17:05,519
so in practice usually developers rely

1751
01:17:04,400 --> 01:17:08,159
on example code

1752
01:17:05,520 --> 01:17:09,520
which they find through google and then

1753
01:17:08,159 --> 01:17:12,799
most oftenly they find

1754
01:17:09,520 --> 01:17:16,080
insecure example code but they

1755
01:17:12,800 --> 01:17:17,760
still are not the experts this is what

1756
01:17:16,080 --> 01:17:20,400
i'm going to come to here

1757
01:17:17,760 --> 01:17:21,760
so i'm talking about software developers

1758
01:17:20,400 --> 01:17:24,400
expectations

1759
01:17:21,760 --> 01:17:25,440
versus the algorithm flexibility that we

1760
01:17:24,400 --> 01:17:27,839
want to have

1761
01:17:25,440 --> 01:17:29,280
with all that that you develop in the in

1762
01:17:27,840 --> 01:17:31,360
the cfrg

1763
01:17:29,280 --> 01:17:33,440
so my assumption is that the developers

1764
01:17:31,360 --> 01:17:35,920
are not security experts

1765
01:17:33,440 --> 01:17:38,080
and this secure cryptoconfig i'm talking

1766
01:17:35,920 --> 01:17:40,159
about is also not for the experts

1767
01:17:38,080 --> 01:17:41,440
there should always be the algorithm

1768
01:17:40,159 --> 01:17:44,639
flexibility

1769
01:17:41,440 --> 01:17:45,599
and the performance tiny things that you

1770
01:17:44,640 --> 01:17:47,600
can tune

1771
01:17:45,600 --> 01:17:48,640
to make it really perfect but i'm really

1772
01:17:47,600 --> 01:17:51,199
talking about

1773
01:17:48,640 --> 01:17:53,920
the average joe the developer that is

1774
01:17:51,199 --> 01:17:55,280
not a security expert and they expect

1775
01:17:53,920 --> 01:17:57,199
because that's what they learn and

1776
01:17:55,280 --> 01:18:00,000
that's what we describe

1777
01:17:57,199 --> 01:18:01,519
to them symmetric encryption uses a key

1778
01:18:00,000 --> 01:18:04,080
and a plain text

1779
01:18:01,520 --> 01:18:05,040
and that's it but as i showed you in

1780
01:18:04,080 --> 01:18:06,800
example one

1781
01:18:05,040 --> 01:18:10,159
you need to specify a lot more

1782
01:18:06,800 --> 01:18:13,280
parameters to really use it in practice

1783
01:18:10,159 --> 01:18:15,759
and also for hashing you only expect

1784
01:18:13,280 --> 01:18:17,679
to put in a plain text and not select

1785
01:18:15,760 --> 01:18:19,920
various different parameters for argon

1786
01:18:17,679 --> 01:18:19,920
2.

1787
01:18:20,320 --> 01:18:24,159
okay and what is the secure crypto

1788
01:18:21,920 --> 01:18:26,400
config now in my proposal that we

1789
01:18:24,159 --> 01:18:27,920
we work on and the secure crypto

1790
01:18:26,400 --> 01:18:30,799
conflict is come from my

1791
01:18:27,920 --> 01:18:32,400
uh comprised of three things first it's

1792
01:18:30,800 --> 01:18:34,239
a process that is repeated

1793
01:18:32,400 --> 01:18:36,799
every two years at least that's my

1794
01:18:34,239 --> 01:18:38,080
proposal for a new set of default

1795
01:18:36,800 --> 01:18:40,640
configurations

1796
01:18:38,080 --> 01:18:41,760
for standardized cryptography primitives

1797
01:18:40,640 --> 01:18:43,840
is published

1798
01:18:41,760 --> 01:18:45,520
in a standardized standardized machine

1799
01:18:43,840 --> 01:18:49,679
readable format

1800
01:18:45,520 --> 01:18:52,880
then a cp cryptoconfig interface

1801
01:18:49,679 --> 01:18:54,560
is described that has common apis to use

1802
01:18:52,880 --> 01:18:56,719
cryptography primitives

1803
01:18:54,560 --> 01:18:58,480
and software that's offered by the

1804
01:18:56,719 --> 01:19:00,560
standard libraries it's always easy to

1805
01:18:58,480 --> 01:19:01,199
create a separate new library but this

1806
01:19:00,560 --> 01:19:04,400
will be

1807
01:19:01,199 --> 01:19:05,839
coming outdated very soon so it's always

1808
01:19:04,400 --> 01:19:07,519
the best thing is to improve the

1809
01:19:05,840 --> 01:19:09,600
standard libraries

1810
01:19:07,520 --> 01:19:11,040
and finally the third part is use

1811
01:19:09,600 --> 01:19:14,480
courser at least that's

1812
01:19:11,040 --> 01:19:17,120
what i found it could be the best choice

1813
01:19:14,480 --> 01:19:18,480
for the format and because you can store

1814
01:19:17,120 --> 01:19:20,320
the parameters

1815
01:19:18,480 --> 01:19:22,000
in the output of the cryptographic

1816
01:19:20,320 --> 01:19:25,440
primitive and then later

1817
01:19:22,000 --> 01:19:27,360
on use this headers and keys and

1818
01:19:25,440 --> 01:19:29,120
parameters from the output

1819
01:19:27,360 --> 01:19:30,880
as input and derive everything from

1820
01:19:29,120 --> 01:19:34,000
there instead of having it

1821
01:19:30,880 --> 01:19:36,480
hard coded in your application code and

1822
01:19:34,000 --> 01:19:39,679
can change the parameters anymore

1823
01:19:36,480 --> 01:19:41,120
and below you see the links um where i

1824
01:19:39,679 --> 01:19:44,239
worked on this already

1825
01:19:41,120 --> 01:19:45,920
together with a student and

1826
01:19:44,239 --> 01:19:47,678
what does the process look like look

1827
01:19:45,920 --> 01:19:49,920
like

1828
01:19:47,679 --> 01:19:50,880
to make it a little bit more visual we

1829
01:19:49,920 --> 01:19:54,320
see at the top

1830
01:19:50,880 --> 01:19:56,960
um various organizations these are just

1831
01:19:54,320 --> 01:19:58,960
some of them it can also be other

1832
01:19:56,960 --> 01:20:00,080
participants of course this was an early

1833
01:19:58,960 --> 01:20:04,719
suggestion from me

1834
01:20:00,080 --> 01:20:06,960
the bse missed ietf irtf cfrg

1835
01:20:04,719 --> 01:20:08,400
you name it and they come out together

1836
01:20:06,960 --> 01:20:11,600
and agree on

1837
01:20:08,400 --> 01:20:14,559
on a certain parameter set for different

1838
01:20:11,600 --> 01:20:16,239
classification levels this is optional i

1839
01:20:14,560 --> 01:20:18,080
have a question afterwards to this if

1840
01:20:16,239 --> 01:20:20,239
this is a good idea or not

1841
01:20:18,080 --> 01:20:21,760
and then they publish this parameter set

1842
01:20:20,239 --> 01:20:25,360
so which algorithm

1843
01:20:21,760 --> 01:20:28,960
which mode which padding is secure for

1844
01:20:25,360 --> 01:20:30,719
what use case and then

1845
01:20:28,960 --> 01:20:32,480
they make that available of course in

1846
01:20:30,719 --> 01:20:34,880
machinery machine readable format

1847
01:20:32,480 --> 01:20:35,759
and then of course the cryptography

1848
01:20:34,880 --> 01:20:37,679
libraries

1849
01:20:35,760 --> 01:20:39,440
they need to be adapted and they must

1850
01:20:37,679 --> 01:20:42,320
support this because otherwise

1851
01:20:39,440 --> 01:20:43,440
it's already not usable and people still

1852
01:20:42,320 --> 01:20:46,480
have to um

1853
01:20:43,440 --> 01:20:49,040
google how can i use aw aes

1854
01:20:46,480 --> 01:20:50,239
in java for example so this there is

1855
01:20:49,040 --> 01:20:52,639
something that has to be done by

1856
01:20:50,239 --> 01:20:55,599
cryptography library developers

1857
01:20:52,639 --> 01:20:57,440
and this is the previous draft um as you

1858
01:20:55,600 --> 01:20:59,760
see on the right in this description

1859
01:20:57,440 --> 01:21:01,839
i i used previously the cryptographic

1860
01:20:59,760 --> 01:21:04,480
message syntax cms

1861
01:21:01,840 --> 01:21:04,960
but um someone at the presentation told

1862
01:21:04,480 --> 01:21:07,759
me that

1863
01:21:04,960 --> 01:21:09,840
corsair would be a better choice so i

1864
01:21:07,760 --> 01:21:11,120
changed it for the secure cryptoconfig

1865
01:21:09,840 --> 01:21:12,880
draft

1866
01:21:11,120 --> 01:21:14,639
and when these libraries are updated

1867
01:21:12,880 --> 01:21:17,440
then applications

1868
01:21:14,639 --> 01:21:18,800
obviously can use that these libraries

1869
01:21:17,440 --> 01:21:21,519
in an easy way

1870
01:21:18,800 --> 01:21:23,440
and only specify their required

1871
01:21:21,520 --> 01:21:25,280
classification level or derive that from

1872
01:21:23,440 --> 01:21:27,280
the document maybe they want to encrypt

1873
01:21:25,280 --> 01:21:29,679
or hash or sign

1874
01:21:27,280 --> 01:21:31,120
and then they automatically use the

1875
01:21:29,679 --> 01:21:33,199
correct algorithms

1876
01:21:31,120 --> 01:21:36,239
from the library and they don't have to

1877
01:21:33,199 --> 01:21:38,239
choose all these parameters

1878
01:21:36,239 --> 01:21:40,480
so what are the building blocks for the

1879
01:21:38,239 --> 01:21:42,879
secure cryptoconfig

1880
01:21:40,480 --> 01:21:45,040
it's first the configuration with all

1881
01:21:42,880 --> 01:21:46,880
these parameters i talked about

1882
01:21:45,040 --> 01:21:48,159
and there could also there could of

1883
01:21:46,880 --> 01:21:49,920
course be many per

1884
01:21:48,159 --> 01:21:51,360
algorithm because we have a lot of

1885
01:21:49,920 --> 01:21:54,320
different combinations

1886
01:21:51,360 --> 01:21:55,360
as i talked about aes with different

1887
01:21:54,320 --> 01:21:57,599
padding modes

1888
01:21:55,360 --> 01:21:58,719
you have block modes you have tag length

1889
01:21:57,600 --> 01:22:01,600
you have non-slangs

1890
01:21:58,719 --> 01:22:02,719
etc and there should be one distinct

1891
01:22:01,600 --> 01:22:04,960
configuration

1892
01:22:02,719 --> 01:22:06,000
for each of these possible

1893
01:22:04,960 --> 01:22:09,280
configurations

1894
01:22:06,000 --> 01:22:09,920
with a unique name and i think a good

1895
01:22:09,280 --> 01:22:13,199
idea

1896
01:22:09,920 --> 01:22:16,400
would be to use the course and like um

1897
01:22:13,199 --> 01:22:19,280
piana registry because they already have

1898
01:22:16,400 --> 01:22:19,679
names for these combinations and at

1899
01:22:19,280 --> 01:22:22,000
least

1900
01:22:19,679 --> 01:22:23,520
it's important that they really specify

1901
01:22:22,000 --> 01:22:26,400
all required parameters

1902
01:22:23,520 --> 01:22:27,360
so developers only need to put in the

1903
01:22:26,400 --> 01:22:29,519
key

1904
01:22:27,360 --> 01:22:32,159
and the plain text and that's it in case

1905
01:22:29,520 --> 01:22:34,880
of encryption

1906
01:22:32,159 --> 01:22:36,559
yes in the output again it's possible

1907
01:22:34,880 --> 01:22:38,639
for input again because

1908
01:22:36,560 --> 01:22:40,639
if you want to decrypt you need to know

1909
01:22:38,639 --> 01:22:43,600
what algorithm was used

1910
01:22:40,639 --> 01:22:45,199
and what what's the nonce length etc and

1911
01:22:43,600 --> 01:22:46,639
you need to get all this information

1912
01:22:45,199 --> 01:22:47,440
from the output code and this is

1913
01:22:46,639 --> 01:22:50,639
currently not

1914
01:22:47,440 --> 01:22:51,280
there in any known implementation i know

1915
01:22:50,639 --> 01:22:52,480
of

1916
01:22:51,280 --> 01:22:54,800
at least not in the standard

1917
01:22:52,480 --> 01:22:56,959
implementations there are libraries

1918
01:22:54,800 --> 01:23:00,239
but they will be coming quickly outdated

1919
01:22:56,960 --> 01:23:01,600
so i'm not configuring these

1920
01:23:00,239 --> 01:23:03,519
and what could this look like in

1921
01:23:01,600 --> 01:23:07,040
practice i already um

1922
01:23:03,520 --> 01:23:10,480
write on an interface with the student

1923
01:23:07,040 --> 01:23:12,880
and you see only just a quick

1924
01:23:10,480 --> 01:23:15,678
view here for encryption you only need

1925
01:23:12,880 --> 01:23:18,480
to specify the key and the plain text

1926
01:23:15,679 --> 01:23:19,280
and also for the decryption you only

1927
01:23:18,480 --> 01:23:21,360
only need to

1928
01:23:19,280 --> 01:23:23,519
specify the key the ciphertext and that

1929
01:23:21,360 --> 01:23:25,440
all these algorithm modes

1930
01:23:23,520 --> 01:23:26,800
so this is basically just an interface

1931
01:23:25,440 --> 01:23:29,519
for java now

1932
01:23:26,800 --> 01:23:30,080
for the java standard library and this

1933
01:23:29,520 --> 01:23:32,159
is what

1934
01:23:30,080 --> 01:23:34,000
this is what i would expect in the

1935
01:23:32,159 --> 01:23:36,559
future to be offered by java

1936
01:23:34,000 --> 01:23:37,199
itself and not an interface but it's not

1937
01:23:36,560 --> 01:23:40,239
easy to

1938
01:23:37,199 --> 01:23:43,759
change the standard implementation

1939
01:23:40,239 --> 01:23:47,040
so easily okay um coming to a summary

1940
01:23:43,760 --> 01:23:48,960
um what does the secure cryptographic

1941
01:23:47,040 --> 01:23:51,600
secure cryptocontact offer it defines

1942
01:23:48,960 --> 01:23:55,360
common use cases for recovery

1943
01:23:51,600 --> 01:23:56,480
operations then it offers a standardized

1944
01:23:55,360 --> 01:23:59,040
configuration set

1945
01:23:56,480 --> 01:24:01,360
for all required parameters of widely

1946
01:23:59,040 --> 01:24:04,080
available cryptography algorithms for

1947
01:24:01,360 --> 01:24:06,639
each common use case mentioned above

1948
01:24:04,080 --> 01:24:07,840
and then it establishes a process to

1949
01:24:06,639 --> 01:24:10,320
continuously provide

1950
01:24:07,840 --> 01:24:11,520
updated configuration sets based on

1951
01:24:10,320 --> 01:24:14,799
existing

1952
01:24:11,520 --> 01:24:17,679
standardization processes of the ietf

1953
01:24:14,800 --> 01:24:18,560
also um the ssc allows then cryptography

1954
01:24:17,679 --> 01:24:21,120
algorithms

1955
01:24:18,560 --> 01:24:23,440
and now libraries to use these

1956
01:24:21,120 --> 01:24:26,960
standardized output formats

1957
01:24:23,440 --> 01:24:29,199
and for cryptography operations also

1958
01:24:26,960 --> 01:24:30,960
the sdc allows cryptography libraries to

1959
01:24:29,199 --> 01:24:34,239
change their defaults

1960
01:24:30,960 --> 01:24:34,800
because it's all put in the output

1961
01:24:34,239 --> 01:24:36,959
formats

1962
01:24:34,800 --> 01:24:38,880
so they can change their defaults in the

1963
01:24:36,960 --> 01:24:40,800
future to stay secure

1964
01:24:38,880 --> 01:24:43,040
right now there's no easy way to do that

1965
01:24:40,800 --> 01:24:44,639
without putting everything in the output

1966
01:24:43,040 --> 01:24:46,320
formats by default

1967
01:24:44,639 --> 01:24:48,239
and this would ensure backwards

1968
01:24:46,320 --> 01:24:51,440
compatibility um

1969
01:24:48,239 --> 01:24:53,360
yes and there are

1970
01:24:51,440 --> 01:24:54,480
some open questions which i want to pose

1971
01:24:53,360 --> 01:24:56,159
here just um

1972
01:24:54,480 --> 01:24:58,718
quickly how to proceed with

1973
01:24:56,159 --> 01:25:00,320
standardization this is even a good idea

1974
01:24:58,719 --> 01:25:01,840
to do this to make this easier for

1975
01:25:00,320 --> 01:25:04,559
developers

1976
01:25:01,840 --> 01:25:05,679
is causing the appropriate format to use

1977
01:25:04,560 --> 01:25:08,560
for this

1978
01:25:05,679 --> 01:25:08,880
which is the appropriate ayanna registry

1979
01:25:08,560 --> 01:25:11,920
to

1980
01:25:08,880 --> 01:25:14,480
specify the algorithms i think cos is

1981
01:25:11,920 --> 01:25:16,320
already very good what are commonly

1982
01:25:14,480 --> 01:25:18,000
common cryptography use cases

1983
01:25:16,320 --> 01:25:19,519
for developers that should be supported

1984
01:25:18,000 --> 01:25:21,760
by the sec

1985
01:25:19,520 --> 01:25:23,840
and what is the appropriate security

1986
01:25:21,760 --> 01:25:24,400
level for what are appropriate security

1987
01:25:23,840 --> 01:25:26,560
levels

1988
01:25:24,400 --> 01:25:29,040
because you have to select some

1989
01:25:26,560 --> 01:25:32,239
parameters for a certain use case

1990
01:25:29,040 --> 01:25:34,000
i guess and what format

1991
01:25:32,239 --> 01:25:36,000
should be used for the cryptographic

1992
01:25:34,000 --> 01:25:36,480
signature of the publish configurations

1993
01:25:36,000 --> 01:25:39,760
because

1994
01:25:36,480 --> 01:25:41,678
it should also be secure and not be um

1995
01:25:39,760 --> 01:25:44,880
changed by someone

1996
01:25:41,679 --> 01:25:48,320
and there are more difficult

1997
01:25:44,880 --> 01:25:50,960
questions but they might come afterwards

1998
01:25:48,320 --> 01:25:53,440
yes thank you for your attention i will

1999
01:25:50,960 --> 01:25:56,719
now switch to my browser to see you

2000
01:25:53,440 --> 01:25:56,719
maybe and hear you

2001
01:25:56,880 --> 01:26:09,360
thanks thanks thanks a lot guys

2002
01:26:00,560 --> 01:26:12,080
please questions comments

2003
01:26:09,360 --> 01:26:12,080
eric please

2004
01:26:13,520 --> 01:26:17,600
um thanks for the presentation oh hang

2005
01:26:15,600 --> 01:26:20,159
on a second there we go

2006
01:26:17,600 --> 01:26:21,520
security um i think some interesting

2007
01:26:20,159 --> 01:26:22,719
ideas here and i think you're onto

2008
01:26:21,520 --> 01:26:25,040
something important about saying that

2009
01:26:22,719 --> 01:26:27,280
it's hard to pick the right parameters

2010
01:26:25,040 --> 01:26:28,880
um so i think some process for getting

2011
01:26:27,280 --> 01:26:29,599
parameter recommendations um would be

2012
01:26:28,880 --> 01:26:31,120
valuable

2013
01:26:29,600 --> 01:26:33,199
i i think i'm less sanguine about the

2014
01:26:31,120 --> 01:26:35,679
idea that you're going to have machine

2015
01:26:33,199 --> 01:26:37,120
readable and machine updatable profiles

2016
01:26:35,679 --> 01:26:38,000
um that seems like a real recipe for

2017
01:26:37,120 --> 01:26:39,120
interrupt failures

2018
01:26:38,000 --> 01:26:40,800
um i see what you're saying about

2019
01:26:39,120 --> 01:26:41,199
encoding them in the wire but the fact

2020
01:26:40,800 --> 01:26:42,639
is

2021
01:26:41,199 --> 01:26:44,719
if imagine we have two cozy

2022
01:26:42,639 --> 01:26:46,560
implementations one of which um

2023
01:26:44,719 --> 01:26:47,920
is like just implemented normal way and

2024
01:26:46,560 --> 01:26:49,520
doesn't allow secure update

2025
01:26:47,920 --> 01:26:51,280
is an update and one of which takes this

2026
01:26:49,520 --> 01:26:52,639
thing so now basically

2027
01:26:51,280 --> 01:26:54,400
you know the real probability is you

2028
01:26:52,639 --> 01:26:56,239
generate parameters um

2029
01:26:54,400 --> 01:26:58,000
you know which uh with other person

2030
01:26:56,239 --> 01:26:59,440
can't read um because who says the other

2031
01:26:58,000 --> 01:27:01,679
person supports every possible fair

2032
01:26:59,440 --> 01:27:04,080
every possible aes key size for instance

2033
01:27:01,679 --> 01:27:05,440
so um you know we spent a lot of time

2034
01:27:04,080 --> 01:27:06,719
trying to like have manufacturers

2035
01:27:05,440 --> 01:27:08,320
interrupt and this would basically break

2036
01:27:06,719 --> 01:27:12,159
that so i think that like

2037
01:27:08,320 --> 01:27:12,480
um you know uh um so i guess i guess i

2038
01:27:12,159 --> 01:27:13,759
think

2039
01:27:12,480 --> 01:27:16,000
i think the part about like trying to

2040
01:27:13,760 --> 01:27:17,280
specify like good uh good parameters is

2041
01:27:16,000 --> 01:27:18,000
a good plan but i think the part about

2042
01:27:17,280 --> 01:27:20,559
trying to

2043
01:27:18,000 --> 01:27:22,960
have it be um machine readable and

2044
01:27:20,560 --> 01:27:32,320
self-updating is overreach

2045
01:27:22,960 --> 01:27:37,760
okay thank you for your feedback

2046
01:27:32,320 --> 01:27:37,759
um any other comments questions

2047
01:27:38,540 --> 01:27:41,640
[Music]

2048
01:27:43,600 --> 01:27:51,040
no all right please

2049
01:27:47,760 --> 01:27:53,360
yeah hi um i'll just mention oh wow

2050
01:27:51,040 --> 01:27:54,080
let's turn off the video that looks cool

2051
01:27:53,360 --> 01:27:55,759
um

2052
01:27:54,080 --> 01:27:57,360
red hat is doing a lot of work on

2053
01:27:55,760 --> 01:28:00,719
standardizing

2054
01:27:57,360 --> 01:28:02,960
um crypto profiles uh

2055
01:28:00,719 --> 01:28:04,719
so it might be i don't think don't

2056
01:28:02,960 --> 01:28:06,320
recall if it's in red hat or fedora

2057
01:28:04,719 --> 01:28:07,920
but it might be worth taking a look at

2058
01:28:06,320 --> 01:28:10,320
that for a way to see

2059
01:28:07,920 --> 01:28:11,920
you know formats and what they did and

2060
01:28:10,320 --> 01:28:15,280
they were pushing to make all

2061
01:28:11,920 --> 01:28:18,400
crypto using programs

2062
01:28:15,280 --> 01:28:19,120
do that all right can you please post a

2063
01:28:18,400 --> 01:28:22,879
link in

2064
01:28:19,120 --> 01:28:24,880
the chat uh

2065
01:28:22,880 --> 01:28:26,239
yeah i can post it yeah it'd be a google

2066
01:28:24,880 --> 01:28:26,840
search query but i'll see what i can

2067
01:28:26,239 --> 01:28:30,638
find

2068
01:28:26,840 --> 01:28:33,600
okay bob moskowitz just said fedora 33.

2069
01:28:30,639 --> 01:28:33,600
he's got it in beta

2070
01:28:34,080 --> 01:28:36,480
thank you

2071
01:28:38,880 --> 01:28:45,679
okay thanks for the command comment any

2072
01:28:41,920 --> 01:28:45,679
more comments on guys likes

2073
01:28:51,360 --> 01:28:55,280
ok thank you

2074
01:28:55,440 --> 01:29:02,480
then maybe some other business

2075
01:28:59,920 --> 01:29:03,760
i have some discussions in the chat i

2076
01:29:02,480 --> 01:29:06,799
would like to

2077
01:29:03,760 --> 01:29:07,840
comment on two questions uh raised in

2078
01:29:06,800 --> 01:29:10,639
the chat

2079
01:29:07,840 --> 01:29:12,800
first of all about spake two draft there

2080
01:29:10,639 --> 01:29:14,719
was a question from jonathan holland

2081
01:29:12,800 --> 01:29:17,280
about

2082
01:29:14,719 --> 01:29:18,639
moving on with space to draft a

2083
01:29:17,280 --> 01:29:22,320
situation here is

2084
01:29:18,639 --> 01:29:25,440
the space to draft predated

2085
01:29:22,320 --> 01:29:29,759
the pack selection process uh

2086
01:29:25,440 --> 01:29:33,040
a lot of ideas of how to

2087
01:29:29,760 --> 01:29:36,000
implement spec 2 inside dls for example

2088
01:29:33,040 --> 01:29:37,120
was developed before the back selection

2089
01:29:36,000 --> 01:29:39,840
process

2090
01:29:37,120 --> 01:29:40,800
so after some discussions we discussed

2091
01:29:39,840 --> 01:29:44,480
not to stop

2092
01:29:40,800 --> 01:29:47,520
the speak to draft and we discussed this

2093
01:29:44,480 --> 01:29:51,040
as a class meeting in fact

2094
01:29:47,520 --> 01:29:54,639
there is an um a disclaimer

2095
01:29:51,040 --> 01:29:56,639
in the space to draft now that

2096
01:29:54,639 --> 01:29:59,600
the draft is not a result of

2097
01:29:56,639 --> 01:29:59,600
acceleration process

2098
01:30:00,560 --> 01:30:07,199
unlike cpace and opec

2099
01:30:04,159 --> 01:30:10,559
and so we think that it

2100
01:30:07,199 --> 01:30:13,759
wouldn't be wise to stop spell to draft

2101
01:30:10,560 --> 01:30:16,800
but it's the only exception and

2102
01:30:13,760 --> 01:30:19,679
we don't plan to do this with any

2103
01:30:16,800 --> 01:30:20,320
paychecks so we understand the question

2104
01:30:19,679 --> 01:30:23,920
but

2105
01:30:20,320 --> 01:30:28,080
it was a result of a lot of discussions

2106
01:30:23,920 --> 01:30:31,199
uh between the chairs

2107
01:30:28,080 --> 01:30:33,760
and the second question from dkg about

2108
01:30:31,199 --> 01:30:36,559
the order of the presentations

2109
01:30:33,760 --> 01:30:37,199
the question was connected with the fact

2110
01:30:36,560 --> 01:30:41,199
that

2111
01:30:37,199 --> 01:30:44,559
voperf slides

2112
01:30:41,199 --> 01:30:47,678
were after opec slides

2113
01:30:44,560 --> 01:30:48,080
and yes i agree that since the slides

2114
01:30:47,679 --> 01:30:51,120
for

2115
01:30:48,080 --> 01:30:55,199
video perf

2116
01:30:51,120 --> 01:30:55,199
which has a lot of

2117
01:30:56,880 --> 01:31:03,760
slides with recalling what oprf's are

2118
01:31:01,199 --> 01:31:05,040
they will be useful before opec but

2119
01:31:03,760 --> 01:31:06,960
since we think that

2120
01:31:05,040 --> 01:31:08,880
we thought that it could be just a

2121
01:31:06,960 --> 01:31:12,239
status update slides with

2122
01:31:08,880 --> 01:31:15,199
uh divs etc they

2123
01:31:12,239 --> 01:31:16,638
won't be useful before open so we

2124
01:31:15,199 --> 01:31:20,080
decided to

2125
01:31:16,639 --> 01:31:20,960
start with two new documents opaque and

2126
01:31:20,080 --> 01:31:24,000
cpas

2127
01:31:20,960 --> 01:31:27,360
uh which were adopted after the

2128
01:31:24,000 --> 01:31:30,639
election process but i agree that we'll

2129
01:31:27,360 --> 01:31:31,839
try our best to address this concern in

2130
01:31:30,639 --> 01:31:34,960
the future

2131
01:31:31,840 --> 01:31:36,960
thanks a lot for this comment

2132
01:31:34,960 --> 01:31:38,719
please any other business any other

2133
01:31:36,960 --> 01:31:45,840
comments considerations

2134
01:31:38,719 --> 01:31:45,840
for saferg

2135
01:31:47,679 --> 01:31:53,120
maybe some comments from my co-chairs

2136
01:31:50,239 --> 01:31:53,120
alex and nick

2137
01:31:56,960 --> 01:31:59,840
oh it's all good here

2138
01:32:01,840 --> 01:32:05,920
no comments thanks everybody for uh

2139
01:32:04,159 --> 01:32:07,679
coming out at this time

2140
01:32:05,920 --> 01:32:13,840
uh even though we're not physically in

2141
01:32:07,679 --> 01:32:13,840
the time zone

2142
01:32:15,360 --> 01:32:22,719
okay then thanks everyone for coming

2143
01:32:20,000 --> 01:32:22,719
have a nice day

2144
01:32:24,320 --> 01:32:27,840
goodbye thank you

2145
01:32:38,840 --> 01:32:45,760
bye

2146
01:32:41,360 --> 01:32:45,759
now it works

