1
00:00:39,120 --> 00:00:45,839
well at least now i can hear a few

2
00:00:42,399 --> 00:00:45,840
even if i sound bad

3
00:00:59,840 --> 00:01:02,879
he sounded good to me

4
00:01:04,959 --> 00:01:09,119
okay i just moved to the laptop

5
00:01:07,280 --> 00:01:12,560
microphone instead of the

6
00:01:09,119 --> 00:01:14,080
earphone microphone so anyway i'll be

7
00:01:12,560 --> 00:01:17,040
monitoring the jab room

8
00:01:14,080 --> 00:01:17,039
on my phone so

9
00:01:18,000 --> 00:01:22,159
if anybody has audio problems like i did

10
00:01:20,159 --> 00:01:27,840
then i can

11
00:01:22,159 --> 00:01:27,840
just relay it

12
00:01:34,799 --> 00:01:37,920
so i have no idea but i actually managed

13
00:01:36,640 --> 00:01:41,840
to replace the

14
00:01:37,920 --> 00:01:41,840
slides because

15
00:01:42,479 --> 00:01:46,399
people don't tell me what they have

16
00:01:43,920 --> 00:01:46,399
changed

17
00:01:49,759 --> 00:01:52,880
so i don't know if the combined version

18
00:01:51,280 --> 00:01:55,840
actually has all the

19
00:01:52,880 --> 00:01:55,839
latest versions because

20
00:01:58,799 --> 00:02:09,840
i just hope it did sit correctly

21
00:02:32,160 --> 00:02:36,000
so i think we are two minutes passed so

22
00:02:35,680 --> 00:02:39,360
i think

23
00:02:36,000 --> 00:02:39,360
we should start then

24
00:02:41,519 --> 00:02:47,440
so this is ipsec m.a

25
00:02:44,560 --> 00:02:48,319
working group i guess people are hearing

26
00:02:47,440 --> 00:02:51,840
me

27
00:02:48,319 --> 00:02:51,839
if not say something

28
00:02:54,480 --> 00:02:59,200
loud and clear taro yeah then i find the

29
00:02:57,120 --> 00:03:01,200
proper window to go forward

30
00:02:59,200 --> 00:03:02,640
the meat echo window doesn't work for

31
00:03:01,200 --> 00:03:04,480
moving next slide

32
00:03:02,640 --> 00:03:05,920
so this is the note well and everybody

33
00:03:04,480 --> 00:03:07,359
has probably seen this couple of times

34
00:03:05,920 --> 00:03:09,359
already and we'll see it a couple of

35
00:03:07,360 --> 00:03:11,200
more times

36
00:03:09,360 --> 00:03:12,319
so the first things we don't need blue

37
00:03:11,200 --> 00:03:13,280
sheets because they are taken

38
00:03:12,319 --> 00:03:16,480
automatically

39
00:03:13,280 --> 00:03:19,840
but we brought with some note takers and

40
00:03:16,480 --> 00:03:19,840
chopper scribe

41
00:03:22,560 --> 00:03:28,560
so anybody

42
00:03:26,239 --> 00:03:32,640
you know volunteering to taking notes in

43
00:03:28,560 --> 00:03:34,560
the uh

44
00:03:32,640 --> 00:03:36,879
for the meeting there is already

45
00:03:34,560 --> 00:03:40,480
pre-filled stuff in the

46
00:03:36,879 --> 00:03:42,560
uh coding id so

47
00:03:40,480 --> 00:03:44,079
it should be very easy and just write in

48
00:03:42,560 --> 00:03:47,680
the stuff that actually

49
00:03:44,080 --> 00:03:50,799
discards not or or questions ask

50
00:03:47,680 --> 00:03:52,239
answers and so on right and i'll be

51
00:03:50,799 --> 00:03:54,720
monitoring the uh

52
00:03:52,239 --> 00:03:56,319
java room so i don't think we need an

53
00:03:54,720 --> 00:04:00,239
extra scribe for that

54
00:03:56,319 --> 00:04:04,159
okay but note taker would be nice

55
00:04:00,239 --> 00:04:04,159
yeah even necessary

56
00:04:04,720 --> 00:04:08,319
is our normal stuff for michael here no

57
00:04:07,439 --> 00:04:11,680
he's not here

58
00:04:08,319 --> 00:04:15,839
he knew not to be here to be able so he

59
00:04:11,680 --> 00:04:15,840
did end up writing notes

60
00:04:16,238 --> 00:04:20,078
and of course most of the useless stuff

61
00:04:17,839 --> 00:04:23,198
are actually also

62
00:04:20,079 --> 00:04:23,199
presenting something

63
00:04:24,479 --> 00:04:27,120
all right

64
00:04:27,520 --> 00:04:31,758
we'll probably try to i could no it's

65
00:04:29,919 --> 00:04:32,960
too hard for me to try to take it at the

66
00:04:31,759 --> 00:04:43,840
same time so

67
00:04:32,960 --> 00:04:43,840
it would be very useful to get somebody

68
00:04:48,960 --> 00:04:52,080
i don't think daniel is presenting

69
00:04:50,400 --> 00:04:54,719
anything today

70
00:04:52,080 --> 00:04:54,719
no he isn't

71
00:04:58,960 --> 00:05:02,560
without having something to present

72
00:05:04,479 --> 00:05:07,680
so i'm really bad at taking notes but uh

73
00:05:07,440 --> 00:05:11,280
i

74
00:05:07,680 --> 00:05:13,199
i can give a try all right people can go

75
00:05:11,280 --> 00:05:16,400
there and help

76
00:05:13,199 --> 00:05:20,000
that's all okay good okay

77
00:05:16,400 --> 00:05:23,039
so this is our agenda

78
00:05:20,000 --> 00:05:25,440
so we are right on schedule

79
00:05:23,039 --> 00:05:26,960
so we have uh five minutes for the

80
00:05:25,440 --> 00:05:27,840
document status then we have a couple of

81
00:05:26,960 --> 00:05:30,719
work items

82
00:05:27,840 --> 00:05:32,880
uh actually the young model for ip

83
00:05:30,720 --> 00:05:35,440
traffic flows securities

84
00:05:32,880 --> 00:05:37,039
problem it's in the middle of the work

85
00:05:35,440 --> 00:05:38,000
either or the new item i don't know and

86
00:05:37,039 --> 00:05:42,800
then we have a couple of new

87
00:05:38,000 --> 00:05:46,080
items any comments on the agenda

88
00:05:42,800 --> 00:05:48,000
if not we go forward so

89
00:05:46,080 --> 00:05:50,080
our status report so we have one

90
00:05:48,000 --> 00:05:53,360
document that is in itf last call now

91
00:05:50,080 --> 00:05:56,560
ipv6 ipv4 codes

92
00:05:53,360 --> 00:05:57,919
and i think it's it will be finishing

93
00:05:56,560 --> 00:06:00,479
in couple of weeks or something like

94
00:05:57,919 --> 00:06:02,880
that it's starts started

95
00:06:00,479 --> 00:06:04,479
then we have a couple of documents that

96
00:06:02,880 --> 00:06:08,159
are still in ongoing the

97
00:06:04,479 --> 00:06:11,758
gi version 2 is got got to

98
00:06:08,160 --> 00:06:14,319
i think quite a big right but he still

99
00:06:11,759 --> 00:06:15,919
hasn't been getting that much review i

100
00:06:14,319 --> 00:06:16,240
think ice version 2 intermediate should

101
00:06:15,919 --> 00:06:19,280
be

102
00:06:16,240 --> 00:06:22,319
ready quite soon i think

103
00:06:19,280 --> 00:06:23,039
and i think the multiple key extensions

104
00:06:22,319 --> 00:06:25,840
and

105
00:06:23,039 --> 00:06:27,360
those things are and the liabilities

106
00:06:25,840 --> 00:06:28,799
those we actually have a couple of other

107
00:06:27,360 --> 00:06:32,560
systems

108
00:06:28,800 --> 00:06:32,560
uh presentations later for the last two

109
00:06:32,840 --> 00:06:38,719
ones

110
00:06:35,120 --> 00:06:41,759
or any comments on the current

111
00:06:38,720 --> 00:06:42,400
working group status um only the the

112
00:06:41,759 --> 00:06:46,160
drafting

113
00:06:42,400 --> 00:06:49,679
is wrong in the ipfs but that's okay i

114
00:06:46,160 --> 00:06:53,599
think everybody got that

115
00:06:49,680 --> 00:06:55,039
yeah all right so

116
00:06:53,599 --> 00:06:55,630
they're saying a couple of people in the

117
00:06:55,039 --> 00:06:56,960
queue so

118
00:06:55,630 --> 00:06:59,759
[Music]

119
00:06:56,960 --> 00:07:00,239
cigar sacco do you have some comment

120
00:06:59,759 --> 00:07:02,880
question

121
00:07:00,240 --> 00:07:02,880
if you just

122
00:07:14,840 --> 00:07:17,840
no

123
00:07:21,599 --> 00:07:24,800
i couldn't really hear what he was

124
00:07:23,280 --> 00:07:27,840
saying

125
00:07:24,800 --> 00:07:29,759
but paul yeah i think he said that he

126
00:07:27,840 --> 00:07:32,080
had raised his hand before by accident

127
00:07:29,759 --> 00:07:34,160
or something because he was there

128
00:07:32,080 --> 00:07:35,199
okay i just wanted to make a quick note

129
00:07:34,160 --> 00:07:36,400
since we're not talking about

130
00:07:35,199 --> 00:07:39,039
intermediate that

131
00:07:36,400 --> 00:07:39,840
we have done interrupt uh with a number

132
00:07:39,039 --> 00:07:42,960
of parties

133
00:07:39,840 --> 00:07:46,479
so um i think we're pretty good there

134
00:07:42,960 --> 00:07:50,239
for uh moving the document forward

135
00:07:46,479 --> 00:07:50,240
yeah go ahead valerie

136
00:07:50,960 --> 00:07:55,280
i really want uh also to talk about

137
00:07:53,759 --> 00:07:58,479
intermediate

138
00:07:55,280 --> 00:07:58,479
it's quite ready for

139
00:07:59,280 --> 00:08:05,758
and we have at least three interoperable

140
00:08:02,639 --> 00:08:07,440
implementations so i think it it's

141
00:08:05,759 --> 00:08:11,039
absolutely ready for

142
00:08:07,440 --> 00:08:13,199
group class all right good yeah

143
00:08:11,039 --> 00:08:14,159
i i i know that i have you actually get

144
00:08:13,199 --> 00:08:15,919
getting your emails

145
00:08:14,160 --> 00:08:17,599
but i have been to too busy with other

146
00:08:15,919 --> 00:08:18,318
things to be able to actually go through

147
00:08:17,599 --> 00:08:21,120
it and

148
00:08:18,319 --> 00:08:24,479
and uh put it forward so but i will try

149
00:08:21,120 --> 00:08:24,479
to get it after this meeting

150
00:08:25,280 --> 00:08:33,039
all right yeah if nothing else

151
00:08:28,960 --> 00:08:35,598
yeah ipv4 codes the thing is the

152
00:08:33,039 --> 00:08:37,000
last call is ending on december 1st so

153
00:08:35,599 --> 00:08:40,640
really yeah we can have

154
00:08:37,000 --> 00:08:43,679
some all right

155
00:08:40,640 --> 00:08:45,680
so let's go forward

156
00:08:43,679 --> 00:08:49,519
so then we have a couple of proven

157
00:08:45,680 --> 00:08:52,479
presentations and let's start with then

158
00:08:49,519 --> 00:08:54,240
with paul and i will be showing the

159
00:08:52,480 --> 00:08:56,320
slides and just say next when you want

160
00:08:54,240 --> 00:08:59,839
to go forward

161
00:08:56,320 --> 00:08:59,839
okay well that's easy here next

162
00:09:03,600 --> 00:09:10,000
um okay so an update on labeled ipsec um

163
00:09:08,000 --> 00:09:11,279
there are just a few minor fix ups in

164
00:09:10,000 --> 00:09:13,519
the text there's a little bit of added

165
00:09:11,279 --> 00:09:15,360
text in the security section

166
00:09:13,519 --> 00:09:16,640
and we added an implementation section

167
00:09:15,360 --> 00:09:20,839
but currently only

168
00:09:16,640 --> 00:09:24,240
librisfon on linux has implemented this

169
00:09:20,839 --> 00:09:24,959
um so we have implemented in librisfon

170
00:09:24,240 --> 00:09:27,440
it is

171
00:09:24,959 --> 00:09:29,119
working with sc linux as the the

172
00:09:27,440 --> 00:09:29,920
underlying security system that

173
00:09:29,120 --> 00:09:31,600
transfers

174
00:09:29,920 --> 00:09:33,519
that uses the labels that are

175
00:09:31,600 --> 00:09:37,200
transmitted and so for

176
00:09:33,519 --> 00:09:39,680
for rel for red hat we now have a uh

177
00:09:37,200 --> 00:09:42,240
a path forward from ike v1 to ikv2 which

178
00:09:39,680 --> 00:09:44,319
is why why we wanted to have this

179
00:09:42,240 --> 00:09:46,240
so um there's no interrupt testing done

180
00:09:44,320 --> 00:09:47,600
if anyone else has implemented this i

181
00:09:46,240 --> 00:09:49,360
would like to

182
00:09:47,600 --> 00:09:51,440
to interrupt test it that we are using

183
00:09:49,360 --> 00:09:54,560
private number 241

184
00:09:51,440 --> 00:09:56,959
um and i think it's ready for

185
00:09:54,560 --> 00:10:00,239
broken group last call we only had minor

186
00:09:56,959 --> 00:10:03,359
changes at this point um

187
00:10:00,240 --> 00:10:05,920
maybe to an early code point but

188
00:10:03,360 --> 00:10:05,920
yeah that's it

189
00:10:08,560 --> 00:10:12,399
yes so it's called what it is this is

190
00:10:11,440 --> 00:10:15,519
actually the

191
00:10:12,399 --> 00:10:19,760
241 is in uh i just tried remember what

192
00:10:15,519 --> 00:10:22,880
was the core point

193
00:10:19,760 --> 00:10:24,399
which registry this is i i don't think

194
00:10:22,880 --> 00:10:27,600
we had an early code point yet

195
00:10:24,399 --> 00:10:29,279
um which register this uh

196
00:10:27,600 --> 00:10:32,240
code private number you are using is

197
00:10:29,279 --> 00:10:34,079
taken from it it is it's not a

198
00:10:32,240 --> 00:10:34,720
notification this is something i try to

199
00:10:34,079 --> 00:10:40,479
remember

200
00:10:34,720 --> 00:10:40,480
oh it was a no it's a traffic selector

201
00:10:40,720 --> 00:10:46,320
yeah okay yeah so those are expert

202
00:10:42,800 --> 00:10:48,240
review stuff

203
00:10:46,320 --> 00:10:49,760
so yeah if you tickle the stable and we

204
00:10:48,240 --> 00:10:51,279
can start the last call then i think we

205
00:10:49,760 --> 00:10:54,480
are going to actually keep that because

206
00:10:51,279 --> 00:10:56,160
as i said therefore there is no official

207
00:10:54,480 --> 00:10:57,680
early code point we start you starting

208
00:10:56,160 --> 00:10:59,680
to email and or

209
00:10:57,680 --> 00:11:00,880
request a code point to be allocated and

210
00:10:59,680 --> 00:11:03,120
then because it goes to the expert

211
00:11:00,880 --> 00:11:06,079
review and and so on it actually goes

212
00:11:03,120 --> 00:11:08,720
directly to and so so you can just start

213
00:11:06,079 --> 00:11:08,719
that yourself

214
00:11:10,560 --> 00:11:15,839
but anyway so any other comments on the

215
00:11:12,720 --> 00:11:15,839
label ipsec

216
00:11:17,920 --> 00:11:22,160
has anybody read this document

217
00:11:26,959 --> 00:11:30,239
we could do the show of hands but i

218
00:11:28,560 --> 00:11:32,560
don't think we really want

219
00:11:30,240 --> 00:11:33,440
no i don't we don't want to do that but

220
00:11:32,560 --> 00:11:36,640
it would be so bad

221
00:11:33,440 --> 00:11:36,640
planning on implementing it

222
00:11:38,240 --> 00:11:43,839
yeah all right so anyway let's go

223
00:11:40,800 --> 00:11:43,839
forward with that one then

224
00:11:44,560 --> 00:11:57,359
okay the next one is iptfs

225
00:11:47,600 --> 00:11:59,760
update from christian hope

226
00:11:57,360 --> 00:11:59,760
oops

227
00:12:00,800 --> 00:12:07,839
i clicked the wrong button okay

228
00:12:04,160 --> 00:12:13,519
hi yeah so uh this is the update to the

229
00:12:07,839 --> 00:12:13,519
iptfs draft next slide please

230
00:12:14,320 --> 00:12:20,160
so we published two drafts uh one

231
00:12:17,360 --> 00:12:22,399
during the meeting after the cut off the

232
00:12:20,160 --> 00:12:24,639
gate opened

233
00:12:22,399 --> 00:12:25,600
the changes were largely based on list

234
00:12:24,639 --> 00:12:28,639
discussions

235
00:12:25,600 --> 00:12:30,720
um uh one of the additions was a

236
00:12:28,639 --> 00:12:31,440
clarification that the fragments need to

237
00:12:30,720 --> 00:12:34,560
follow in

238
00:12:31,440 --> 00:12:37,839
uh subsequent sequence numbers uh

239
00:12:34,560 --> 00:12:38,479
we added a zero comp on receive sort of

240
00:12:37,839 --> 00:12:40,399
feature

241
00:12:38,480 --> 00:12:42,000
but this uh generate a lot of discussion

242
00:12:40,399 --> 00:12:45,760
i got a slide on that

243
00:12:42,000 --> 00:12:48,079
and then um we published a new version

244
00:12:45,760 --> 00:12:51,760
where we removed the zero conf

245
00:12:48,079 --> 00:12:54,560
we removed the ip protocol number

246
00:12:51,760 --> 00:12:56,240
we did retain the payload type and we

247
00:12:54,560 --> 00:12:57,518
made some congestion control changes

248
00:12:56,240 --> 00:13:00,000
i've got another side and that's the

249
00:12:57,519 --> 00:13:00,000
next slide

250
00:13:02,800 --> 00:13:06,160
so the ip protocol number originally at

251
00:13:05,519 --> 00:13:08,639
108

252
00:13:06,160 --> 00:13:09,839
uh benjamin and said do the request uh

253
00:13:08,639 --> 00:13:12,079
tarot

254
00:13:09,839 --> 00:13:13,120
said this is too much trouble to justify

255
00:13:12,079 --> 00:13:16,638
this

256
00:13:13,120 --> 00:13:18,639
um so we do need to

257
00:13:16,639 --> 00:13:20,000
to have uh we don't always have

258
00:13:18,639 --> 00:13:22,639
state-based negotiation like

259
00:13:20,000 --> 00:13:23,360
ike so we're going to keep the payload

260
00:13:22,639 --> 00:13:24,560
type

261
00:13:23,360 --> 00:13:26,880
but we're just going to have it be an

262
00:13:24,560 --> 00:13:27,760
esp payload type and pick the number

263
00:13:26,880 --> 00:13:30,959
five

264
00:13:27,760 --> 00:13:33,360
this does happen to correspond with ipv5

265
00:13:30,959 --> 00:13:34,239
which is not actually deployed and used

266
00:13:33,360 --> 00:13:36,880
so the number

267
00:13:34,240 --> 00:13:38,480
wouldn't actually conflict with anything

268
00:13:36,880 --> 00:13:40,320
um

269
00:13:38,480 --> 00:13:42,000
it seems that was our backup plan and

270
00:13:40,320 --> 00:13:43,600
it's pretty straightforward

271
00:13:42,000 --> 00:13:46,079
it's not gonna we don't have to ask

272
00:13:43,600 --> 00:13:46,079
anybody

273
00:13:46,839 --> 00:13:52,320
um zero comp received support so this

274
00:13:50,160 --> 00:13:54,399
this was just this is really just about

275
00:13:52,320 --> 00:13:55,440
uh it's very simple to implement um you

276
00:13:54,399 --> 00:13:58,639
can receive ipt

277
00:13:55,440 --> 00:14:01,120
fest frames um and uh

278
00:13:58,639 --> 00:14:02,000
it's useful in non-like scenarios it's

279
00:14:01,120 --> 00:14:04,160
just goes to one of these

280
00:14:02,000 --> 00:14:05,839
things where the more configuration you

281
00:14:04,160 --> 00:14:08,719
have to get right the more chances

282
00:14:05,839 --> 00:14:10,800
of getting it wrong so you know we saw

283
00:14:08,720 --> 00:14:13,680
this as a nice addition

284
00:14:10,800 --> 00:14:15,599
um it doesn't you know it's not it's not

285
00:14:13,680 --> 00:14:17,760
like critical to have it it just makes

286
00:14:15,600 --> 00:14:20,720
it easier to deploy

287
00:14:17,760 --> 00:14:22,639
but so this was controversial um and so

288
00:14:20,720 --> 00:14:25,440
we removed it

289
00:14:22,639 --> 00:14:25,440
next slide please

290
00:14:26,639 --> 00:14:30,000
so the congestion control uh i made

291
00:14:29,760 --> 00:14:33,680
these

292
00:14:30,000 --> 00:14:34,240
changes uh to match rfc 5348 which is

293
00:14:33,680 --> 00:14:36,880
the

294
00:14:34,240 --> 00:14:38,880
the reference um implementation that's

295
00:14:36,880 --> 00:14:40,079
tcp friendly that we're referencing in

296
00:14:38,880 --> 00:14:43,279
the document

297
00:14:40,079 --> 00:14:44,079
uh and we we identified these changes as

298
00:14:43,279 --> 00:14:47,040
good to make

299
00:14:44,079 --> 00:14:48,638
in a pre-transport review and during the

300
00:14:47,040 --> 00:14:51,040
implementation of it

301
00:14:48,639 --> 00:14:52,480
uh the primary changes are before we had

302
00:14:51,040 --> 00:14:54,319
this last sequence number

303
00:14:52,480 --> 00:14:56,079
and because we were sending at a fixed

304
00:14:54,320 --> 00:14:58,560
rate we thought okay if

305
00:14:56,079 --> 00:15:00,160
if the sender you know if the receiver

306
00:14:58,560 --> 00:15:01,680
sends back the last sequence number that

307
00:15:00,160 --> 00:15:05,120
it received

308
00:15:01,680 --> 00:15:08,319
you could sort of in inter interpolate

309
00:15:05,120 --> 00:15:11,279
interpolate um the time that you sent it

310
00:15:08,320 --> 00:15:11,600
based on the sequence number uh this is

311
00:15:11,279 --> 00:15:14,000
just

312
00:15:11,600 --> 00:15:16,480
this ended up just being overly clever

313
00:15:14,000 --> 00:15:17,600
uh it also you know if people down the

314
00:15:16,480 --> 00:15:20,160
road want to

315
00:15:17,600 --> 00:15:20,800
do different types of things with the

316
00:15:20,160 --> 00:15:23,360
non-fixed

317
00:15:20,800 --> 00:15:24,240
time uh not you know non-constant rate

318
00:15:23,360 --> 00:15:26,639
sending

319
00:15:24,240 --> 00:15:27,279
uh it doesn't work for that uh so it

320
00:15:26,639 --> 00:15:29,920
just

321
00:15:27,279 --> 00:15:31,360
seemed better to go with what you know

322
00:15:29,920 --> 00:15:34,560
the standard way to do it

323
00:15:31,360 --> 00:15:36,720
right which is what tcp does and dccp

324
00:15:34,560 --> 00:15:39,199
does and everything else seems to do

325
00:15:36,720 --> 00:15:40,399
which is that you send a timestamp uh

326
00:15:39,199 --> 00:15:42,160
the sender sends

327
00:15:40,399 --> 00:15:44,000
a timestamp which is opaque to the

328
00:15:42,160 --> 00:15:44,719
receiver so there's no synchronization

329
00:15:44,000 --> 00:15:47,440
issues

330
00:15:44,720 --> 00:15:48,480
it's just a number um but you know it'll

331
00:15:47,440 --> 00:15:51,519
be its clock

332
00:15:48,480 --> 00:15:53,440
when it sends it and the receiver

333
00:15:51,519 --> 00:15:54,560
then marks the time locally when it

334
00:15:53,440 --> 00:15:56,320
receives it

335
00:15:54,560 --> 00:15:58,319
and when it echoes that and then it puts

336
00:15:56,320 --> 00:15:59,519
that value in in the echo field and

337
00:15:58,320 --> 00:16:02,000
returns it

338
00:15:59,519 --> 00:16:03,519
along with that it sends the echo delay

339
00:16:02,000 --> 00:16:05,440
so you know it

340
00:16:03,519 --> 00:16:07,120
didn't time stamp when it received and

341
00:16:05,440 --> 00:16:07,440
when it sends it back it looks at the

342
00:16:07,120 --> 00:16:10,240
new

343
00:16:07,440 --> 00:16:11,920
the latest clock and gives a delta so it

344
00:16:10,240 --> 00:16:14,880
sends a delta back

345
00:16:11,920 --> 00:16:15,199
along with the echoed value uh and then

346
00:16:14,880 --> 00:16:17,439
the

347
00:16:15,199 --> 00:16:19,680
the sender on receiving that echoed

348
00:16:17,440 --> 00:16:20,480
value can just take the current clock

349
00:16:19,680 --> 00:16:22,638
minus the

350
00:16:20,480 --> 00:16:25,440
echoed value minus the delay and that's

351
00:16:22,639 --> 00:16:29,360
the actual round trip time

352
00:16:25,440 --> 00:16:29,360
without needing any synchronization

353
00:16:29,519 --> 00:16:33,199
additionally to that we added the

354
00:16:31,120 --> 00:16:35,360
transmit delay

355
00:16:33,199 --> 00:16:36,800
and needed this because you can get in

356
00:16:35,360 --> 00:16:37,360
situations where you're you know if

357
00:16:36,800 --> 00:16:40,959
you're

358
00:16:37,360 --> 00:16:44,399
uh you know if you're going from dc to

359
00:16:40,959 --> 00:16:47,279
san francisco or um new york to

360
00:16:44,399 --> 00:16:48,160
uh london right you've got a long round

361
00:16:47,279 --> 00:16:50,639
trip

362
00:16:48,160 --> 00:16:52,079
uh but if you're going across a data

363
00:16:50,639 --> 00:16:53,279
center your round trip time can be

364
00:16:52,079 --> 00:16:55,680
really tiny

365
00:16:53,279 --> 00:16:56,320
uh but the actual logical round trip

366
00:16:55,680 --> 00:16:58,239
time is

367
00:16:56,320 --> 00:16:59,920
based on your send rates right because

368
00:16:58,240 --> 00:17:01,839
you have a transmission delay

369
00:16:59,920 --> 00:17:03,279
you're only sending packets every so

370
00:17:01,839 --> 00:17:05,839
often

371
00:17:03,279 --> 00:17:07,280
to match a certain bandwidth so the

372
00:17:05,839 --> 00:17:09,678
transmit delay uh is

373
00:17:07,280 --> 00:17:11,280
the the sender of this value this is

374
00:17:09,679 --> 00:17:12,799
saying what that value you know what

375
00:17:11,280 --> 00:17:15,039
that transmission delay is

376
00:17:12,799 --> 00:17:17,520
and it knows what that is because that's

377
00:17:15,039 --> 00:17:20,240
exactly how often it sends a packet

378
00:17:17,520 --> 00:17:21,039
so it just puts that value in there this

379
00:17:20,240 --> 00:17:22,880
can change

380
00:17:21,039 --> 00:17:24,240
in congestion control because you might

381
00:17:22,880 --> 00:17:26,720
be slowing down

382
00:17:24,240 --> 00:17:27,439
so you need to keep reporting it so

383
00:17:26,720 --> 00:17:29,440
basically

384
00:17:27,439 --> 00:17:30,720
uh you take you take these two round

385
00:17:29,440 --> 00:17:33,919
trip times

386
00:17:30,720 --> 00:17:36,000
the one the actual one on the wire

387
00:17:33,919 --> 00:17:37,679
and the transmit delay which is your

388
00:17:36,000 --> 00:17:38,720
train your transmit delay plus their

389
00:17:37,679 --> 00:17:40,559
transmit delay

390
00:17:38,720 --> 00:17:44,480
and you pick the bigger one and that's

391
00:17:40,559 --> 00:17:47,840
your actual round-trip time estimate

392
00:17:44,480 --> 00:17:47,840
okay next slide

393
00:17:48,320 --> 00:17:51,520
so the open issues from the last meeting

394
00:17:51,039 --> 00:17:53,600
was

395
00:17:51,520 --> 00:17:55,120
were that uh job had suggested that we

396
00:17:53,600 --> 00:17:56,959
should do a transport review

397
00:17:55,120 --> 00:17:58,719
i think that's a good idea i think that

398
00:17:56,960 --> 00:18:00,799
the idea here is that you know everybody

399
00:17:58,720 --> 00:18:02,080
in this room is an expert on ipsec

400
00:18:00,799 --> 00:18:04,879
and they can understand the basic

401
00:18:02,080 --> 00:18:07,520
protocol here and it all looks good

402
00:18:04,880 --> 00:18:09,039
but you know people you know are

403
00:18:07,520 --> 00:18:10,559
thinking well we don't really know

404
00:18:09,039 --> 00:18:12,879
too much about congestion control so we

405
00:18:10,559 --> 00:18:16,240
need to get a transport review

406
00:18:12,880 --> 00:18:19,039
um so our latest version is based on uh

407
00:18:16,240 --> 00:18:20,720
implementation experience it does work

408
00:18:19,039 --> 00:18:22,000
the previous version actually worked too

409
00:18:20,720 --> 00:18:23,520
but it was just as i mentioned it was

410
00:18:22,000 --> 00:18:25,039
just overly clever and a little bit

411
00:18:23,520 --> 00:18:26,879
restricting

412
00:18:25,039 --> 00:18:28,080
uh we also had a meeting with david

413
00:18:26,880 --> 00:18:30,720
black from transport

414
00:18:28,080 --> 00:18:32,559
area and um you know got some good

415
00:18:30,720 --> 00:18:35,280
feedback and he said yeah you know

416
00:18:32,559 --> 00:18:38,480
just put the put the review in and we're

417
00:18:35,280 --> 00:18:38,480
ready to go on this i think

418
00:18:38,720 --> 00:18:44,240
next slide please if i can

419
00:18:42,160 --> 00:18:45,679
interrupt uh we have asked for a

420
00:18:44,240 --> 00:18:47,760
transport area review and

421
00:18:45,679 --> 00:18:50,640
uh it's still pending it's assigned to

422
00:18:47,760 --> 00:18:52,640
joe touch not to david black and uh

423
00:18:50,640 --> 00:18:54,160
they still haven't uh completed the

424
00:18:52,640 --> 00:18:57,360
review so

425
00:18:54,160 --> 00:18:59,280
oh okay well i i didn't even know

426
00:18:57,360 --> 00:19:00,959
um we should probably well if they

427
00:18:59,280 --> 00:19:02,480
haven't have they started but we should

428
00:19:00,960 --> 00:19:03,039
let them know that we did this update to

429
00:19:02,480 --> 00:19:06,880
add that

430
00:19:03,039 --> 00:19:08,720
the ts val t echo change they'll

431
00:19:06,880 --> 00:19:10,799
probably should tell them but we don't

432
00:19:08,720 --> 00:19:14,080
see any progress we only see

433
00:19:10,799 --> 00:19:15,520
when they complete a review um

434
00:19:14,080 --> 00:19:16,879
most of most of the people when they

435
00:19:15,520 --> 00:19:18,080
start to do the review they do the

436
00:19:16,880 --> 00:19:20,640
latest version anyway

437
00:19:18,080 --> 00:19:22,000
for the uh for the draft right they

438
00:19:20,640 --> 00:19:23,919
don't do that

439
00:19:22,000 --> 00:19:25,840
we didn't request for specific version

440
00:19:23,919 --> 00:19:27,760
we asked for the latest version so when

441
00:19:25,840 --> 00:19:31,520
they start doing the review they

442
00:19:27,760 --> 00:19:33,200
usually take the latest one but

443
00:19:31,520 --> 00:19:34,400
email to the reviewer saying that

444
00:19:33,200 --> 00:19:36,160
there's new version might be a good

445
00:19:34,400 --> 00:19:37,360
thing if they have already started but i

446
00:19:36,160 --> 00:19:38,960
don't think

447
00:19:37,360 --> 00:19:41,199
people do it very quickly when they

448
00:19:38,960 --> 00:19:42,080
start yeah but you only asked for it

449
00:19:41,200 --> 00:19:46,320
until like

450
00:19:42,080 --> 00:19:49,439
november 2nd so it's two weeks ago

451
00:19:46,320 --> 00:19:52,879
oh i don't even remember asking no

452
00:19:49,440 --> 00:19:53,760
terrorist oh i was talking with other

453
00:19:52,880 --> 00:19:55,200
people this and that

454
00:19:53,760 --> 00:19:57,440
they were saying yes we should do a

455
00:19:55,200 --> 00:19:59,280
transport area and then i just i

456
00:19:57,440 --> 00:20:00,960
put it and asked for the transportatory

457
00:19:59,280 --> 00:20:03,440
80s and they said oh it was just an

458
00:20:00,960 --> 00:20:04,960
you know early review for the uh

459
00:20:03,440 --> 00:20:08,799
transfer trip

460
00:20:04,960 --> 00:20:12,000
and i did that oh okay thanks

461
00:20:08,799 --> 00:20:14,000
um so the uh

462
00:20:12,000 --> 00:20:15,840
so the other notes uh we again we do

463
00:20:14,000 --> 00:20:17,919
have an uh implementation as we did in

464
00:20:15,840 --> 00:20:18,720
vpp and the ike changes we did in strong

465
00:20:17,919 --> 00:20:20,960
swan

466
00:20:18,720 --> 00:20:22,159
as part of that i did the vpp to strong

467
00:20:20,960 --> 00:20:24,480
swan or i

468
00:20:22,159 --> 00:20:25,919
made it work together uh there was some

469
00:20:24,480 --> 00:20:27,120
stuff out there but it wasn't fully

470
00:20:25,919 --> 00:20:29,600
functional

471
00:20:27,120 --> 00:20:30,719
um and we do have congestion control

472
00:20:29,600 --> 00:20:34,320
support in this

473
00:20:30,720 --> 00:20:36,320
um like b2 support and

474
00:20:34,320 --> 00:20:38,240
we're in a publication process now so we

475
00:20:36,320 --> 00:20:40,720
have to go through some bureaucracy

476
00:20:38,240 --> 00:20:43,840
to actually get it published um but

477
00:20:40,720 --> 00:20:46,799
we're hoping to release this next month

478
00:20:43,840 --> 00:20:47,678
and um as always we're open to

479
00:20:46,799 --> 00:20:50,720
collaborating and

480
00:20:47,679 --> 00:20:53,280
interoperability testing

481
00:20:50,720 --> 00:20:53,280
next slide

482
00:20:54,799 --> 00:20:58,400
so we think that moving forward we think

483
00:20:56,559 --> 00:20:59,918
that all the issues on the you know the

484
00:20:58,400 --> 00:21:01,280
base document outside of the congestion

485
00:20:59,919 --> 00:21:03,679
control have been addressed

486
00:21:01,280 --> 00:21:07,120
in this current version it was really

487
00:21:03,679 --> 00:21:10,720
the ip protocol number allocation and uh

488
00:21:07,120 --> 00:21:12,320
and that zero comp thing um

489
00:21:10,720 --> 00:21:14,000
now that i know that the transport

490
00:21:12,320 --> 00:21:14,960
review is happening that that action is

491
00:21:14,000 --> 00:21:16,480
going

492
00:21:14,960 --> 00:21:17,919
so we were going to say is this can we

493
00:21:16,480 --> 00:21:18,799
do this part of the working group last

494
00:21:17,919 --> 00:21:21,919
call which is pretty

495
00:21:18,799 --> 00:21:24,639
pretty normal um yeah so

496
00:21:21,919 --> 00:21:27,039
that's the question i guess to the

497
00:21:24,640 --> 00:21:27,039
chairs

498
00:21:27,919 --> 00:21:31,200
next slide i think that's saying

499
00:21:31,919 --> 00:21:39,760
yeah yeah so

500
00:21:35,919 --> 00:21:42,320
for doing this uh so

501
00:21:39,760 --> 00:21:44,080
so for working group last call i have to

502
00:21:42,320 --> 00:21:45,520
read it myself before i can actually see

503
00:21:44,080 --> 00:21:47,280
if it actually

504
00:21:45,520 --> 00:21:48,720
i would usually read them before i i

505
00:21:47,280 --> 00:21:50,639
could actually see if it's

506
00:21:48,720 --> 00:21:52,080
ready i mean when i was actually reading

507
00:21:50,640 --> 00:21:53,280
it quickly i realized that

508
00:21:52,080 --> 00:21:55,520
then i wrote this this congress

509
00:21:53,280 --> 00:21:57,360
congestion control stuff and then i

510
00:21:55,520 --> 00:21:59,760
realized that i have to ask for the

511
00:21:57,360 --> 00:22:01,280
transport area uh for the protocol ip

512
00:21:59,760 --> 00:22:03,600
protocol number as i said

513
00:22:01,280 --> 00:22:05,039
i don't think we the reason i was

514
00:22:03,600 --> 00:22:06,799
objecting is i was saying that i don't

515
00:22:05,039 --> 00:22:07,679
think we need an early version because

516
00:22:06,799 --> 00:22:09,840
we can do our

517
00:22:07,679 --> 00:22:11,520
internal testing with you know just by

518
00:22:09,840 --> 00:22:12,320
version two and saying okay if you have

519
00:22:11,520 --> 00:22:15,360
this

520
00:22:12,320 --> 00:22:15,840
you know thing there then you can do it

521
00:22:15,360 --> 00:22:18,320
uh

522
00:22:15,840 --> 00:22:20,399
but the i think we can still allocate

523
00:22:18,320 --> 00:22:22,320
the ip protocol operating that

524
00:22:20,400 --> 00:22:24,080
might be better better if you actually

525
00:22:22,320 --> 00:22:24,559
need to have an ip protocol of course i

526
00:22:24,080 --> 00:22:26,320
was

527
00:22:24,559 --> 00:22:28,158
what i was saying we could just use zero

528
00:22:26,320 --> 00:22:29,840
or something like that said that

529
00:22:28,159 --> 00:22:31,520
ignore the ip protocol number because we

530
00:22:29,840 --> 00:22:34,559
know what is in there

531
00:22:31,520 --> 00:22:35,840
i mean for esp it's a transport mode or

532
00:22:34,559 --> 00:22:38,158
tunnel mode and

533
00:22:35,840 --> 00:22:38,959
the protocol number is for tunnel mode

534
00:22:38,159 --> 00:22:42,000
it's actually

535
00:22:38,960 --> 00:22:44,320
completely useless it actually is never

536
00:22:42,000 --> 00:22:45,520
ever anything else than the one of this

537
00:22:44,320 --> 00:22:47,439
you know but for

538
00:22:45,520 --> 00:22:48,639
a transfer mortgage needed so i was

539
00:22:47,440 --> 00:22:49,919
thinking about a little bit similar kind

540
00:22:48,640 --> 00:22:52,480
of thing

541
00:22:49,919 --> 00:22:54,159
so uh i i think that that i think that

542
00:22:52,480 --> 00:22:55,679
we could do the um

543
00:22:54,159 --> 00:22:58,159
you know why don't we stick with the

544
00:22:55,679 --> 00:22:58,880
value five uh you know as a esp

545
00:22:58,159 --> 00:23:02,480
transport

546
00:22:58,880 --> 00:23:03,760
uh payload type and you know it's not

547
00:23:02,480 --> 00:23:05,520
really squatting but

548
00:23:03,760 --> 00:23:07,360
no one's gonna use that because it's

549
00:23:05,520 --> 00:23:09,520
allocated but unused

550
00:23:07,360 --> 00:23:10,959
that was our thinking actually i think

551
00:23:09,520 --> 00:23:13,918
lou is in the room and he's

552
00:23:10,960 --> 00:23:15,840
co-author on ipv5 work so he was like

553
00:23:13,919 --> 00:23:18,000
we'll just use that

554
00:23:15,840 --> 00:23:18,000
so

555
00:23:19,120 --> 00:23:24,320
if that's okay i mean we we can try to

556
00:23:22,480 --> 00:23:26,720
do the ib protocol number but i

557
00:23:24,320 --> 00:23:28,240
i i don't want to hold the work up on on

558
00:23:26,720 --> 00:23:29,919
that because it doesn't seem

559
00:23:28,240 --> 00:23:32,159
critical and like you were saying if

560
00:23:29,919 --> 00:23:35,200
people do want to use it outside

561
00:23:32,159 --> 00:23:37,200
we could always do that work either way

562
00:23:35,200 --> 00:23:40,000
i think we just we're just interested in

563
00:23:37,200 --> 00:23:40,000
moving it forward

564
00:23:43,440 --> 00:23:46,640
so if you don't think it's controversial

565
00:23:44,880 --> 00:23:49,679
we can ask for the ip you know

566
00:23:46,640 --> 00:23:52,240
allocation uh

567
00:23:49,679 --> 00:23:52,880
yeah but i think the ip allocates i

568
00:23:52,240 --> 00:23:55,600
don't remember

569
00:23:52,880 --> 00:23:56,720
what the allocation policy theory is for

570
00:23:55,600 --> 00:23:58,879
for normal is it

571
00:23:56,720 --> 00:24:00,720
is it actually standardization required

572
00:23:58,880 --> 00:24:03,600
or what but i don't think it's expected

573
00:24:00,720 --> 00:24:04,159
i think it's higher bar so so to get it

574
00:24:03,600 --> 00:24:05,840
before

575
00:24:04,159 --> 00:24:08,080
they actually go into the publication

576
00:24:05,840 --> 00:24:09,840
requested and addressed the allocation

577
00:24:08,080 --> 00:24:11,520
is going to be required earlier location

578
00:24:09,840 --> 00:24:12,399
but of course the question is if it's if

579
00:24:11,520 --> 00:24:15,840
it's

580
00:24:12,400 --> 00:24:18,000
almost ready then it's not that far away

581
00:24:15,840 --> 00:24:19,678
but yeah and of course with the early

582
00:24:18,000 --> 00:24:21,200
allocation stuff it's also that you have

583
00:24:19,679 --> 00:24:21,600
to after a year you i think you have

584
00:24:21,200 --> 00:24:22,960
only

585
00:24:21,600 --> 00:24:24,719
one year or something like that and you

586
00:24:22,960 --> 00:24:26,320
have to re-request it and put

587
00:24:24,720 --> 00:24:28,720
that kind of things and we have been

588
00:24:26,320 --> 00:24:32,480
slow sometimes

589
00:24:28,720 --> 00:24:35,120
or should i say able to plan

590
00:24:32,480 --> 00:24:36,159
so uh just to jump in ben kadek as the

591
00:24:35,120 --> 00:24:40,080
area director

592
00:24:36,159 --> 00:24:41,919
the ip protocol number allocation

593
00:24:40,080 --> 00:24:43,199
registration procedure is either

594
00:24:41,919 --> 00:24:47,039
standards action or

595
00:24:43,200 --> 00:24:49,520
isg approval so yeah this is a standard

596
00:24:47,039 --> 00:24:51,200
thing yeah yeah it's a fairly heavy bar

597
00:24:49,520 --> 00:24:53,840
uh but we can still

598
00:24:51,200 --> 00:24:55,760
request an early allocation uh and with

599
00:24:53,840 --> 00:24:59,039
the early allocation

600
00:24:55,760 --> 00:25:00,158
if it is granted then you know after a

601
00:24:59,039 --> 00:25:03,520
year we can

602
00:25:00,159 --> 00:25:04,080
uh renew it just with the working group

603
00:25:03,520 --> 00:25:06,240
chairs

604
00:25:04,080 --> 00:25:07,120
saying yeah we're still working on this

605
00:25:06,240 --> 00:25:08,799
and after

606
00:25:07,120 --> 00:25:11,039
you know the second year then the isg

607
00:25:08,799 --> 00:25:14,559
has to approve it but we

608
00:25:11,039 --> 00:25:16,400
tend to be happy to renew them

609
00:25:14,559 --> 00:25:17,840
if the draft is still something that we

610
00:25:16,400 --> 00:25:21,200
think is going to happen

611
00:25:17,840 --> 00:25:23,120
it's just the need to ask for renewal

612
00:25:21,200 --> 00:25:24,240
is a way to make sure the things that

613
00:25:23,120 --> 00:25:27,439
are dead

614
00:25:24,240 --> 00:25:28,960
actually go away quickly we don't want

615
00:25:27,440 --> 00:25:31,679
some early allocation to

616
00:25:28,960 --> 00:25:33,600
linger there forever but not actually

617
00:25:31,679 --> 00:25:37,120
get finished up

618
00:25:33,600 --> 00:25:38,719
yeah so i i i think there are

619
00:25:37,120 --> 00:25:40,479
most of the things i did because i think

620
00:25:38,720 --> 00:25:42,880
as long as you're only using it in

621
00:25:40,480 --> 00:25:44,480
that i still don't think we actually

622
00:25:42,880 --> 00:25:46,640
need that because we can always

623
00:25:44,480 --> 00:25:48,559
negotiate like version two if we

624
00:25:46,640 --> 00:25:49,840
actually have some other uses for it

625
00:25:48,559 --> 00:25:52,639
outside like

626
00:25:49,840 --> 00:25:54,240
an ipsec then i think we need that one

627
00:25:52,640 --> 00:25:55,679
definitely and then but then i actually

628
00:25:54,240 --> 00:25:56,480
would not want to get you know more

629
00:25:55,679 --> 00:25:58,240
feedback from

630
00:25:56,480 --> 00:26:00,000
people who are actually using it

631
00:25:58,240 --> 00:26:02,400
somewhere else than in ipsec

632
00:26:00,000 --> 00:26:03,919
because of course there's nobody here

633
00:26:02,400 --> 00:26:05,760
who would actually have any comments

634
00:26:03,919 --> 00:26:06,799
about how to use it outside ipsec

635
00:26:05,760 --> 00:26:09,600
because i think

636
00:26:06,799 --> 00:26:12,080
people here are working on this to get

637
00:26:09,600 --> 00:26:14,399
it working on right basis

638
00:26:12,080 --> 00:26:15,439
yeah that's so this is our motivation

639
00:26:14,400 --> 00:26:18,400
for just saying

640
00:26:15,440 --> 00:26:19,679
forget it right we just we we have

641
00:26:18,400 --> 00:26:22,320
people that want to see this

642
00:26:19,679 --> 00:26:23,520
you know get standardized so it's you

643
00:26:22,320 --> 00:26:25,918
know it's just easier

644
00:26:23,520 --> 00:26:26,879
to go the with the flow here and so

645
00:26:25,919 --> 00:26:29,120
that's why

646
00:26:26,880 --> 00:26:30,400
let's just do the esp protocol payload

647
00:26:29,120 --> 00:26:33,199
type right and

648
00:26:30,400 --> 00:26:34,559
like you said uh tarot it doesn't it

649
00:26:33,200 --> 00:26:36,159
doesn't actually have to be an ip

650
00:26:34,559 --> 00:26:38,799
protocol number even right we

651
00:26:36,159 --> 00:26:39,760
because we own the esp payload type

652
00:26:38,799 --> 00:26:41,520
space

653
00:26:39,760 --> 00:26:42,960
so you know we'll just pick five and

654
00:26:41,520 --> 00:26:44,400
that way we're picking we're picking a

655
00:26:42,960 --> 00:26:45,679
number no one's ever going to allocate

656
00:26:44,400 --> 00:26:47,679
because it's already allocated so if

657
00:26:45,679 --> 00:26:49,679
down the road somebody wants to do this

658
00:26:47,679 --> 00:26:51,360
they can write their draft that uses it

659
00:26:49,679 --> 00:26:52,000
and then they can do the ip allocation

660
00:26:51,360 --> 00:26:53,279
number

661
00:26:52,000 --> 00:26:55,120
you know they can do the allocation

662
00:26:53,279 --> 00:26:56,240
request as a part of what they're doing

663
00:26:55,120 --> 00:26:59,840
and i think that matches what you're

664
00:26:56,240 --> 00:26:59,840
saying yeah

665
00:27:00,799 --> 00:27:07,679
all right any other comments on this

666
00:27:04,000 --> 00:27:10,480
topic the question for ben is uh whether

667
00:27:07,679 --> 00:27:13,440
we're going to get uh sat down if we do

668
00:27:10,480 --> 00:27:15,840
um follow this advice and just stick a

669
00:27:13,440 --> 00:27:18,880
five in there

670
00:27:15,840 --> 00:27:19,520
uh it's possible that we will get pushed

671
00:27:18,880 --> 00:27:23,120
back i

672
00:27:19,520 --> 00:27:26,158
don't have a super great sense

673
00:27:23,120 --> 00:27:28,320
right off the top of my head um

674
00:27:26,159 --> 00:27:29,679
i i think if somebody's going to comment

675
00:27:28,320 --> 00:27:31,678
then we are then

676
00:27:29,679 --> 00:27:33,200
it happens at the late of the ist

677
00:27:31,679 --> 00:27:34,320
process and then we can say okay we

678
00:27:33,200 --> 00:27:35,840
allocate a new one

679
00:27:34,320 --> 00:27:38,799
we are looking at the proper ip number

680
00:27:35,840 --> 00:27:40,799
then that's our solution in that case if

681
00:27:38,799 --> 00:27:43,039
they come back

682
00:27:40,799 --> 00:27:44,000
like a five then we say okay let's

683
00:27:43,039 --> 00:27:46,080
allocate a new one

684
00:27:44,000 --> 00:27:48,640
how about five because we can actually

685
00:27:46,080 --> 00:27:48,639
try that

686
00:27:49,039 --> 00:27:52,399
so what we can actually do at that point

687
00:27:51,039 --> 00:27:54,000
if we say that the five is actually

688
00:27:52,399 --> 00:27:55,840
never going to be used

689
00:27:54,000 --> 00:27:57,840
we can actually then later make an you

690
00:27:55,840 --> 00:27:59,279
know proposal to ist and say that okay

691
00:27:57,840 --> 00:28:03,520
how about we actually

692
00:27:59,279 --> 00:28:03,520
repurpose this number five to is used

693
00:28:04,399 --> 00:28:07,520
so that you you don't need to change

694
00:28:05,919 --> 00:28:10,480
code and we don't actually

695
00:28:07,520 --> 00:28:12,480
you know you still get an ip proper ip

696
00:28:10,480 --> 00:28:15,919
allocation number

697
00:28:12,480 --> 00:28:18,480
but you know so we can go forward yeah

698
00:28:15,919 --> 00:28:18,480
that sounds great

699
00:28:19,600 --> 00:28:26,559
all right so anything else here

700
00:28:23,840 --> 00:28:30,000
no i think i think we go to the i'll

701
00:28:26,559 --> 00:28:34,879
skip this backup slides and go to the

702
00:28:30,000 --> 00:28:34,880
young model for ip traffic

703
00:28:35,520 --> 00:28:38,480
iptfs

704
00:28:39,360 --> 00:28:44,158
okay go ahead uh okay yeah so this is an

705
00:28:42,640 --> 00:28:46,720
update on the yang model

706
00:28:44,159 --> 00:28:47,200
for ippfs uh yeah as you mentioned this

707
00:28:46,720 --> 00:28:50,240
is

708
00:28:47,200 --> 00:28:52,960
go ahead we'll i'll get to that

709
00:28:50,240 --> 00:28:54,960
so uh the changes since 108 uh just some

710
00:28:52,960 --> 00:28:56,320
reminders the um

711
00:28:54,960 --> 00:28:58,720
you know the objective here is just to

712
00:28:56,320 --> 00:29:00,399
get a yang model to support iptfs

713
00:28:58,720 --> 00:29:02,080
uh the approaches that we're going to

714
00:29:00,399 --> 00:29:04,479
augment the only ip

715
00:29:02,080 --> 00:29:06,158
second model that we can find which

716
00:29:04,480 --> 00:29:08,399
looks you know done

717
00:29:06,159 --> 00:29:10,640
which is this uh sdn ipsec flow

718
00:29:08,399 --> 00:29:13,520
protection it actually works pretty well

719
00:29:10,640 --> 00:29:14,880
there was um there was an open issue

720
00:29:13,520 --> 00:29:15,840
with it it didn't actually work

721
00:29:14,880 --> 00:29:18,480
originally because

722
00:29:15,840 --> 00:29:20,158
they'd split the essay database and the

723
00:29:18,480 --> 00:29:23,200
policy database and they put it

724
00:29:20,159 --> 00:29:24,840
into iklis so they have two models they

725
00:29:23,200 --> 00:29:28,399
have a iklis and the ike

726
00:29:24,840 --> 00:29:30,959
version and to use it you know we want

727
00:29:28,399 --> 00:29:34,158
to have stats and stuff in the assay

728
00:29:30,960 --> 00:29:35,840
in the essays so it wasn't useful to us

729
00:29:34,159 --> 00:29:37,520
if somebody using ike couldn't have

730
00:29:35,840 --> 00:29:39,678
stats so

731
00:29:37,520 --> 00:29:40,799
we went through a bunch of rounds with

732
00:29:39,679 --> 00:29:43,760
the authors

733
00:29:40,799 --> 00:29:44,320
and came to the to the compromise that

734
00:29:43,760 --> 00:29:46,879
you know

735
00:29:44,320 --> 00:29:48,158
please just set your they have these

736
00:29:46,880 --> 00:29:50,000
notifications

737
00:29:48,159 --> 00:29:51,840
for the iklas mode to implement the

738
00:29:50,000 --> 00:29:53,600
eclipse mode and so we asked them to

739
00:29:51,840 --> 00:29:55,840
mark them as features

740
00:29:53,600 --> 00:29:57,918
um and what that means in yang is that

741
00:29:55,840 --> 00:30:00,639
you don't have to do them

742
00:29:57,919 --> 00:30:03,279
um so that means somebody you know can

743
00:30:00,640 --> 00:30:05,840
use the iklas and ike model together

744
00:30:03,279 --> 00:30:07,120
uh even in the ike case right there and

745
00:30:05,840 --> 00:30:08,080
they can put that you know they can use

746
00:30:07,120 --> 00:30:10,559
the assay database

747
00:30:08,080 --> 00:30:12,000
from the i-class model so that got us to

748
00:30:10,559 --> 00:30:15,279
where we needed to be

749
00:30:12,000 --> 00:30:19,360
uh and so we we updated uh the latest

750
00:30:15,279 --> 00:30:21,840
version to refer to the the um

751
00:30:19,360 --> 00:30:24,080
to the latest versions of of those uh

752
00:30:21,840 --> 00:30:26,080
the sdn ipsec flow protection

753
00:30:24,080 --> 00:30:27,600
that one uh that the version the base

754
00:30:26,080 --> 00:30:28,158
document there seems like it's moving

755
00:30:27,600 --> 00:30:30,719
forward

756
00:30:28,159 --> 00:30:31,520
uh it's get you know getting basic i

757
00:30:30,720 --> 00:30:33,360
think

758
00:30:31,520 --> 00:30:34,639
uh benjamin probably he's been working

759
00:30:33,360 --> 00:30:38,879
with tom patch

760
00:30:34,640 --> 00:30:38,880
to get that sort of nailed down but

761
00:30:39,120 --> 00:30:43,360
seems fine uh next slide

762
00:30:44,559 --> 00:30:50,480
um i think i might have yeah

763
00:30:47,919 --> 00:30:50,960
so this is what i just talked to so uh

764
00:30:50,480 --> 00:30:52,080
it's

765
00:30:50,960 --> 00:30:54,000
they intentionally left the essay

766
00:30:52,080 --> 00:30:56,080
database out um

767
00:30:54,000 --> 00:30:57,360
and they're missing some information yes

768
00:30:56,080 --> 00:31:00,559
say oh so

769
00:30:57,360 --> 00:31:04,320
uh i should mention also we put

770
00:31:00,559 --> 00:31:07,918
some basic uh ipsec counters into the

771
00:31:04,320 --> 00:31:10,639
into the um ike model and the sa

772
00:31:07,919 --> 00:31:13,279
and it's just uh rx packets and bytes

773
00:31:10,640 --> 00:31:18,399
received our octets received and

774
00:31:13,279 --> 00:31:20,960
transmit received and drops um

775
00:31:18,399 --> 00:31:20,959
next slide

776
00:31:22,000 --> 00:31:25,840
so these are the things that we we have

777
00:31:24,159 --> 00:31:28,559
inside there to configure which is

778
00:31:25,840 --> 00:31:30,320
whether you want congestion control

779
00:31:28,559 --> 00:31:32,480
the fixed size of the packet or if you

780
00:31:30,320 --> 00:31:34,720
want to use path mtu or if you want to

781
00:31:32,480 --> 00:31:37,039
use that path mtv to lower it

782
00:31:34,720 --> 00:31:38,480
um the bit rate either specified as l3

783
00:31:37,039 --> 00:31:42,320
or lt bitrate

784
00:31:38,480 --> 00:31:44,480
and whether to allow fragmentation um

785
00:31:42,320 --> 00:31:46,080
you know you can add to these vendors

786
00:31:44,480 --> 00:31:49,279
can add to these if they want later

787
00:31:46,080 --> 00:31:52,080
but that that's the standard settings

788
00:31:49,279 --> 00:31:52,080
next slide please

789
00:31:52,159 --> 00:31:54,950
uh these are the statistics that i

790
00:31:54,080 --> 00:31:56,080
mentioned um

791
00:31:54,950 --> 00:31:58,799
[Music]

792
00:31:56,080 --> 00:31:59,199
the uh the top ones of the ipsec counter

793
00:31:58,799 --> 00:32:01,360
is

794
00:31:59,200 --> 00:32:02,240
very basic both of these are also

795
00:32:01,360 --> 00:32:04,719
implemented as

796
00:32:02,240 --> 00:32:06,480
features so somebody input you know

797
00:32:04,720 --> 00:32:08,080
wanting to do a minimal implementation

798
00:32:06,480 --> 00:32:09,440
doesn't actually have to input either of

799
00:32:08,080 --> 00:32:11,600
these they just have to do the

800
00:32:09,440 --> 00:32:15,679
configuration

801
00:32:11,600 --> 00:32:18,240
um next slide please

802
00:32:15,679 --> 00:32:19,679
so uh we we'd like to uh and we this is

803
00:32:18,240 --> 00:32:21,200
pretty straightforward stuff so we'd

804
00:32:19,679 --> 00:32:22,720
like to ask for working group adoption

805
00:32:21,200 --> 00:32:28,080
on this

806
00:32:22,720 --> 00:32:30,320
but that's our last site i think

807
00:32:28,080 --> 00:32:32,000
okay i have i don't remember if this is

808
00:32:30,320 --> 00:32:33,279
actually this probably isn't our charter

809
00:32:32,000 --> 00:32:33,600
because i think young models for this

810
00:32:33,279 --> 00:32:34,960
and

811
00:32:33,600 --> 00:32:37,918
so i don't think we actually need to do

812
00:32:34,960 --> 00:32:40,080
anything for that and uh but this is

813
00:32:37,919 --> 00:32:41,919
quite new stuff i don't think there has

814
00:32:40,080 --> 00:32:43,439
been that many people who actually read

815
00:32:41,919 --> 00:32:47,519
this

816
00:32:43,440 --> 00:32:48,880
so that i would like to you know

817
00:32:47,519 --> 00:32:50,559
we're gonna have of course we can

818
00:32:48,880 --> 00:32:52,399
actually start a working group out of

819
00:32:50,559 --> 00:32:55,600
sinkhole and then people will probably

820
00:32:52,399 --> 00:32:57,120
hopefully read it and comment on it

821
00:32:55,600 --> 00:32:59,199
yeah that that probably would be good

822
00:32:57,120 --> 00:33:02,479
it's because nobody likes to read yang

823
00:32:59,200 --> 00:33:04,720
so if we we might be waiting forever uh

824
00:33:02,480 --> 00:33:06,000
if we do the call it might cause the

825
00:33:04,720 --> 00:33:07,919
people to read it it's really

826
00:33:06,000 --> 00:33:10,880
straightforward it's you know

827
00:33:07,919 --> 00:33:13,600
it is only a few pages i think uh yeah

828
00:33:10,880 --> 00:33:15,360
it's just configuration and stats

829
00:33:13,600 --> 00:33:16,799
one of the question i had actually is

830
00:33:15,360 --> 00:33:18,320
because

831
00:33:16,799 --> 00:33:20,639
this actually i have no idea about the

832
00:33:18,320 --> 00:33:23,519
angle but you were having this

833
00:33:20,640 --> 00:33:25,120
things here saying that i assume uh

834
00:33:23,519 --> 00:33:26,960
these ones these configuration

835
00:33:25,120 --> 00:33:30,399
parameters are something that can be

836
00:33:26,960 --> 00:33:32,159
changed on the fly so so somebody gonna

837
00:33:30,399 --> 00:33:33,039
go and say that okay i want to change

838
00:33:32,159 --> 00:33:35,279
the bitrate

839
00:33:33,039 --> 00:33:36,960
to be something different which is this

840
00:33:35,279 --> 00:33:37,679
has actually always been problem with

841
00:33:36,960 --> 00:33:39,200
you know

842
00:33:37,679 --> 00:33:40,799
if people have been trying to use the

843
00:33:39,200 --> 00:33:41,200
traffic flow confidence they have been

844
00:33:40,799 --> 00:33:42,879
okay

845
00:33:41,200 --> 00:33:44,399
how do i actually configure it because

846
00:33:42,880 --> 00:33:45,440
it's very stupid to put them in a

847
00:33:44,399 --> 00:33:47,760
configuration file and

848
00:33:45,440 --> 00:33:50,559
reload the whole system but if they can

849
00:33:47,760 --> 00:33:52,000
actually use young to change this

850
00:33:50,559 --> 00:33:54,000
i assume these are actually something

851
00:33:52,000 --> 00:33:56,559
that you are going to be

852
00:33:54,000 --> 00:33:57,360
changed on the fly right yeah usually

853
00:33:56,559 --> 00:33:59,360
usually i mean

854
00:33:57,360 --> 00:34:00,879
it would be up to the implementation but

855
00:33:59,360 --> 00:34:02,959
usually yang works that way

856
00:34:00,880 --> 00:34:04,080
like you would you wouldn't have yeah i

857
00:34:02,960 --> 00:34:05,600
mean it you know if in our

858
00:34:04,080 --> 00:34:07,120
implementation if you change the bit

859
00:34:05,600 --> 00:34:08,960
rate we would just change the packet

860
00:34:07,120 --> 00:34:11,520
delay

861
00:34:08,960 --> 00:34:12,960
yeah so so the question is that actually

862
00:34:11,520 --> 00:34:17,119
one of the things i actually

863
00:34:12,960 --> 00:34:19,199
had realized that actually

864
00:34:17,119 --> 00:34:21,520
having you know algorithms that kind of

865
00:34:19,199 --> 00:34:23,199
things in young also

866
00:34:21,520 --> 00:34:24,800
that would also probably allow them to

867
00:34:23,199 --> 00:34:27,839
be changed is there actually any way to

868
00:34:24,800 --> 00:34:30,560
in young say that you can't modify this

869
00:34:27,839 --> 00:34:31,279
after it has been insta installed you

870
00:34:30,560 --> 00:34:33,679
can't do that

871
00:34:31,280 --> 00:34:34,720
um in syntax but you would do it in the

872
00:34:33,679 --> 00:34:36,079
description

873
00:34:34,719 --> 00:34:38,239
you could say in the description this

874
00:34:36,079 --> 00:34:39,919
could if you modify this it will read

875
00:34:38,239 --> 00:34:40,479
you know we'll do a renegotiation in the

876
00:34:39,918 --> 00:34:41,839
usa

877
00:34:40,480 --> 00:34:43,760
or something you can put that in the

878
00:34:41,839 --> 00:34:45,199
description yeah because one of the

879
00:34:43,760 --> 00:34:46,800
things i realized that

880
00:34:45,199 --> 00:34:48,560
there's i didn't see that kind of things

881
00:34:46,800 --> 00:34:49,839
into sdn stuff and i was thinking but i

882
00:34:48,560 --> 00:34:52,399
should probably actually

883
00:34:49,839 --> 00:34:53,679
comment and mark ask them actually

884
00:34:52,399 --> 00:34:55,199
somebody should go through the

885
00:34:53,679 --> 00:34:56,480
model through and check out which of

886
00:34:55,199 --> 00:34:57,200
those are something that needs to be

887
00:34:56,480 --> 00:34:58,640
changed

888
00:34:57,200 --> 00:35:00,839
but anyways that's actually a little bit

889
00:34:58,640 --> 00:35:02,240
different so anybody has any comments on

890
00:35:00,839 --> 00:35:04,799
this

891
00:35:02,240 --> 00:35:04,799
document

892
00:35:11,920 --> 00:35:14,720
i guess no

893
00:35:15,440 --> 00:35:19,520
so i think we can actually probably

894
00:35:18,320 --> 00:35:23,040
start a new working group

895
00:35:19,520 --> 00:35:23,040
adoption call for this

896
00:35:23,440 --> 00:35:26,640
if anybody had that have any objections

897
00:35:25,119 --> 00:35:27,680
to do that i will probably do that one

898
00:35:26,640 --> 00:35:30,879
also after

899
00:35:27,680 --> 00:35:34,720
the meeting is over

900
00:35:30,880 --> 00:35:37,119
so did we so are we going to do the

901
00:35:34,720 --> 00:35:39,279
working class call on the iptfs draft

902
00:35:37,119 --> 00:35:39,280
too

903
00:35:40,160 --> 00:35:44,000
i have to check it i i will read it

904
00:35:41,839 --> 00:35:46,400
through it i actually i actually want to

905
00:35:44,000 --> 00:35:48,000
yeah yeah actually i have to check out

906
00:35:46,400 --> 00:35:49,839
the drafts but

907
00:35:48,000 --> 00:35:51,520
the adoption calls are easier the

908
00:35:49,839 --> 00:35:55,279
working club last course is a little bit

909
00:35:51,520 --> 00:35:55,280
more but i i i need to check it because

910
00:35:56,400 --> 00:36:00,000
probably we to start a working group

911
00:35:58,240 --> 00:36:02,879
last call for that also but uh we have

912
00:36:00,000 --> 00:36:02,880
to check out it first

913
00:36:03,440 --> 00:36:06,320
okay thank you

914
00:36:07,119 --> 00:36:11,359
all right and probably actually we want

915
00:36:10,160 --> 00:36:14,560
to finish the

916
00:36:11,359 --> 00:36:16,319
transport area early review first anyway

917
00:36:14,560 --> 00:36:17,920
let's see if we get any more comments

918
00:36:16,320 --> 00:36:20,320
from there

919
00:36:17,920 --> 00:36:22,400
um one thing that came up on the jab

920
00:36:20,320 --> 00:36:24,320
room that uh

921
00:36:22,400 --> 00:36:26,320
four years ago there was a draft by

922
00:36:24,320 --> 00:36:30,079
muhammad

923
00:36:26,320 --> 00:36:33,440
about deprecating ipe version 5 as

924
00:36:30,079 --> 00:36:36,400
another over again isg statement so

925
00:36:33,440 --> 00:36:36,960
it's back to available so using it now

926
00:36:36,400 --> 00:36:41,839
is

927
00:36:36,960 --> 00:36:41,839
squatting okay

928
00:36:42,720 --> 00:36:47,359
i think that the actual situation is

929
00:36:45,200 --> 00:36:50,720
maybe a little bit more subtle than that

930
00:36:47,359 --> 00:36:53,279
because it's marked as reserved

931
00:36:50,720 --> 00:36:54,720
it's not marked as unallocated or

932
00:36:53,280 --> 00:36:57,280
available for allocation

933
00:36:54,720 --> 00:36:59,520
so it's sort of squatting but sort of

934
00:36:57,280 --> 00:36:59,520
not

935
00:37:01,040 --> 00:37:09,839
all right thank you

936
00:37:05,040 --> 00:37:09,839
okay so then skip these ones

937
00:37:09,920 --> 00:37:13,440
next one is valerie

938
00:37:13,760 --> 00:37:17,200
and this is now moving from the work

939
00:37:16,160 --> 00:37:18,960
items to the

940
00:37:17,200 --> 00:37:21,279
new work items something that they are

941
00:37:18,960 --> 00:37:36,240
not really our

942
00:37:21,280 --> 00:37:39,760
charter currently

943
00:37:36,240 --> 00:37:43,598
uh hello hello yeah hearing

944
00:37:39,760 --> 00:37:48,560
yeah go ahead here fine okay

945
00:37:43,599 --> 00:37:48,560
so let's preload uh inaccurate tool next

946
00:37:48,839 --> 00:37:54,400
please um

947
00:37:50,800 --> 00:37:57,440
so there is just about motivation and

948
00:37:54,400 --> 00:38:00,800
we have a working draft multiple

949
00:37:57,440 --> 00:38:04,880
key e that addresses uh issues of using

950
00:38:00,800 --> 00:38:07,200
uh large keys and multiple latch keys

951
00:38:04,880 --> 00:38:08,160
that are common in post quantum key

952
00:38:07,200 --> 00:38:11,439
exchange method

953
00:38:08,160 --> 00:38:12,799
methods in like two but this draft still

954
00:38:11,440 --> 00:38:16,880
limits the size of

955
00:38:12,800 --> 00:38:19,280
any single key to 64 kilobytes

956
00:38:16,880 --> 00:38:20,720
and it's the maximum size of okay to

957
00:38:19,280 --> 00:38:23,760
preload

958
00:38:20,720 --> 00:38:27,200
and if we look uh at the neast

959
00:38:23,760 --> 00:38:30,520
uh current uh state or the third round

960
00:38:27,200 --> 00:38:32,160
so most candidates uh fit into in this

961
00:38:30,520 --> 00:38:35,680
restriction

962
00:38:32,160 --> 00:38:38,640
however some national regulators like

963
00:38:35,680 --> 00:38:40,560
bci recommends still recommends using

964
00:38:38,640 --> 00:38:43,720
classic macaris

965
00:38:40,560 --> 00:38:46,880
key exchange with smallest key size of

966
00:38:43,720 --> 00:38:49,200
255 kilobytes and with more conservative

967
00:38:46,880 --> 00:38:53,280
parameters up to one megabyte

968
00:38:49,200 --> 00:38:58,240
so it doesn't work with uh the current

969
00:38:53,280 --> 00:39:00,640
uh draft ipc uh iq to multiple key

970
00:38:58,240 --> 00:39:02,560
so another consideration that we have in

971
00:39:00,640 --> 00:39:06,078
mind is that

972
00:39:02,560 --> 00:39:08,880
probably with post quantum signatures uh

973
00:39:06,079 --> 00:39:10,880
uh will always have uh either signature

974
00:39:08,880 --> 00:39:12,800
size or public key size

975
00:39:10,880 --> 00:39:15,680
that will exceed that would probably

976
00:39:12,800 --> 00:39:19,599
exceed 64 kilobytes limit

977
00:39:15,680 --> 00:39:22,160
uh so they in this case yes

978
00:39:19,599 --> 00:39:23,599
they wouldn't fit in hours in set

979
00:39:22,160 --> 00:39:26,480
reloads

980
00:39:23,599 --> 00:39:26,480
so next please

981
00:39:27,359 --> 00:39:30,400
uh so what's the goals of this document

982
00:39:29,839 --> 00:39:33,520
the goal

983
00:39:30,400 --> 00:39:36,560
is uh to define a way uh

984
00:39:33,520 --> 00:39:39,520
some way of using of transferring

985
00:39:36,560 --> 00:39:42,480
specific data blocks in like two that

986
00:39:39,520 --> 00:39:42,800
that are greater than 64 kilobytes uh so

987
00:39:42,480 --> 00:39:45,599
the

988
00:39:42,800 --> 00:39:46,400
these data blocks are public keys for

989
00:39:45,599 --> 00:39:49,520
key exchange

990
00:39:46,400 --> 00:39:52,800
signatures and certificates and

991
00:39:49,520 --> 00:39:55,520
uh we want to do to make it the backward

992
00:39:52,800 --> 00:39:56,720
backward compatible and um

993
00:39:55,520 --> 00:39:59,280
[Music]

994
00:39:56,720 --> 00:40:01,359
we also want to address reliability and

995
00:39:59,280 --> 00:40:05,119
transference at large data

996
00:40:01,359 --> 00:40:08,480
in iq2 and uh

997
00:40:05,119 --> 00:40:11,760
we want to introduce as as as minimum

998
00:40:08,480 --> 00:40:16,480
uh changes to the current protocol

999
00:40:11,760 --> 00:40:16,480
as possible so next please

1000
00:40:17,200 --> 00:40:22,960
and not a goal and

1001
00:40:20,240 --> 00:40:24,399
we don't have a goal to to to define a

1002
00:40:22,960 --> 00:40:26,720
generic way

1003
00:40:24,400 --> 00:40:28,800
generic mechanism like we choose at any

1004
00:40:26,720 --> 00:40:33,040
below it can be greater than 64

1005
00:40:28,800 --> 00:40:36,800
turbines so we don't want to uh

1006
00:40:33,040 --> 00:40:40,560
introduce a new blood vermont it's just

1007
00:40:36,800 --> 00:40:44,800
some very specific data block

1008
00:40:40,560 --> 00:40:48,240
that can exceed 64 kilobytes

1009
00:40:44,800 --> 00:40:48,240
so next please

1010
00:40:49,200 --> 00:40:52,720
and the draft currently discuss several

1011
00:40:51,680 --> 00:40:56,879
approaches

1012
00:40:52,720 --> 00:40:56,879
and it is not yet in the draft but

1013
00:40:57,040 --> 00:41:04,560
we came to agreement among the authors

1014
00:41:01,280 --> 00:41:07,599
that the the way forward

1015
00:41:04,560 --> 00:41:11,119
the best way forward as we can see it is

1016
00:41:07,599 --> 00:41:13,119
uh as a follower so if if the data

1017
00:41:11,119 --> 00:41:16,079
doesn't fit into signal payload

1018
00:41:13,119 --> 00:41:18,160
then split data into chunks uh each

1019
00:41:16,079 --> 00:41:21,440
smaller than 64 kilobytes

1020
00:41:18,160 --> 00:41:25,680
and put these chunks

1021
00:41:21,440 --> 00:41:28,480
into successive reloads at the same time

1022
00:41:25,680 --> 00:41:29,279
so receiving site will concatenate data

1023
00:41:28,480 --> 00:41:32,800
that it will

1024
00:41:29,280 --> 00:41:36,640
extract from this and

1025
00:41:32,800 --> 00:41:40,240
it works well if if if a

1026
00:41:36,640 --> 00:41:43,279
message contains only can contain

1027
00:41:40,240 --> 00:41:45,919
only one preload well in ixtake machine

1028
00:41:43,280 --> 00:41:48,160
the message contain only one one payload

1029
00:41:45,920 --> 00:41:50,640
of this time in the message

1030
00:41:48,160 --> 00:41:52,319
uh so it's true for key exchanging hours

1031
00:41:50,640 --> 00:41:54,400
it's a single payload there's no

1032
00:41:52,319 --> 00:41:57,200
ambiguity of

1033
00:41:54,400 --> 00:41:58,800
extracting data from them and it's not

1034
00:41:57,200 --> 00:42:00,640
true for safety loads because

1035
00:41:58,800 --> 00:42:02,000
there are multiple there can be multiple

1036
00:42:00,640 --> 00:42:05,279
set loads and

1037
00:42:02,000 --> 00:42:08,720
each with uh certificates if if he

1038
00:42:05,280 --> 00:42:10,720
uh uh put a single

1039
00:42:08,720 --> 00:42:13,118
certificate into multiple state but set

1040
00:42:10,720 --> 00:42:17,520
the load it would be possible to

1041
00:42:13,119 --> 00:42:19,680
to properly uh

1042
00:42:17,520 --> 00:42:21,839
distinguish between several certificates

1043
00:42:19,680 --> 00:42:24,720
but it can be workaround

1044
00:42:21,839 --> 00:42:26,720
it's a problem but it's not not not

1045
00:42:24,720 --> 00:42:30,399
showstopper

1046
00:42:26,720 --> 00:42:32,720
and so

1047
00:42:30,400 --> 00:42:33,760
there is a pro another problem is that

1048
00:42:32,720 --> 00:42:36,720
uh all these

1049
00:42:33,760 --> 00:42:36,960
loads if they appear in encrypted reload

1050
00:42:36,720 --> 00:42:39,680
is

1051
00:42:36,960 --> 00:42:40,480
an encrypted load size won't fit into 64

1052
00:42:39,680 --> 00:42:43,359
kilobytes

1053
00:42:40,480 --> 00:42:45,599
it's it's clear that it will be greater

1054
00:42:43,359 --> 00:42:46,078
so it's it can be also work around

1055
00:42:45,599 --> 00:42:48,160
because

1056
00:42:46,079 --> 00:42:49,520
the size of encryptable load can be

1057
00:42:48,160 --> 00:42:51,680
always uh

1058
00:42:49,520 --> 00:42:53,200
deducted from the size of like message

1059
00:42:51,680 --> 00:42:54,078
because it's always the last ballot and

1060
00:42:53,200 --> 00:42:57,439
the message

1061
00:42:54,079 --> 00:43:00,000
so it's the length if you encrypted for

1062
00:42:57,440 --> 00:43:02,560
load it's useless is useless it can be

1063
00:43:00,000 --> 00:43:05,440
set to say zero or something like that

1064
00:43:02,560 --> 00:43:12,400
it doesn't mean it's it's not needed

1065
00:43:05,440 --> 00:43:16,480
so it's not a big deal so next please

1066
00:43:12,400 --> 00:43:19,920
so this is an example just

1067
00:43:16,480 --> 00:43:22,960
high-level example how it can be looked

1068
00:43:19,920 --> 00:43:26,000
so you can see that there are

1069
00:43:22,960 --> 00:43:29,040
several key exchange reloads

1070
00:43:26,000 --> 00:43:30,240
that all contain a single uh in inside

1071
00:43:29,040 --> 00:43:33,920
intermediate exchange

1072
00:43:30,240 --> 00:43:37,439
that all contain a single uh public key

1073
00:43:33,920 --> 00:43:40,319
and note that uh in the

1074
00:43:37,440 --> 00:43:41,680
initiator uh request message in the

1075
00:43:40,319 --> 00:43:44,240
responder's response

1076
00:43:41,680 --> 00:43:46,078
the number of these loads can be

1077
00:43:44,240 --> 00:43:50,000
different so the size is the

1078
00:43:46,079 --> 00:43:50,720
the size of the key exchange in request

1079
00:43:50,000 --> 00:43:53,760
and response

1080
00:43:50,720 --> 00:43:54,399
can be different that's very well suited

1081
00:43:53,760 --> 00:43:57,200
for

1082
00:43:54,400 --> 00:43:59,839
uh encapsulation exchange methods that

1083
00:43:57,200 --> 00:44:02,960
is common for what quantum cryptography

1084
00:43:59,839 --> 00:44:05,440
and also in like also you can see that

1085
00:44:02,960 --> 00:44:08,079
we can put several hours below it and

1086
00:44:05,440 --> 00:44:10,640
see if signature doesn't fit into one so

1087
00:44:08,079 --> 00:44:10,640
next please

1088
00:44:12,000 --> 00:44:16,079
so discussion this this approach is

1089
00:44:15,520 --> 00:44:17,920
simple

1090
00:44:16,079 --> 00:44:19,599
it's easy to implement it's very easy to

1091
00:44:17,920 --> 00:44:21,440
implement

1092
00:44:19,599 --> 00:44:23,359
it doesn't touch alex state machine at

1093
00:44:21,440 --> 00:44:25,280
all and doesn't touch sequence of

1094
00:44:23,359 --> 00:44:27,440
exchanges

1095
00:44:25,280 --> 00:44:29,200
it allows a mountain data to be

1096
00:44:27,440 --> 00:44:31,040
different in different directions so for

1097
00:44:29,200 --> 00:44:32,560
key encapsulation messaging works very

1098
00:44:31,040 --> 00:44:36,319
well

1099
00:44:32,560 --> 00:44:37,359
so the contrast it does require some

1100
00:44:36,319 --> 00:44:39,279
tweaks

1101
00:44:37,359 --> 00:44:40,640
like handling something laws differently

1102
00:44:39,280 --> 00:44:45,760
than others

1103
00:44:40,640 --> 00:44:45,759
well and

1104
00:44:46,160 --> 00:44:49,440
it's also well regardless well this

1105
00:44:48,560 --> 00:44:53,440
approach uh

1106
00:44:49,440 --> 00:44:55,760
because it it it uses the same messages

1107
00:44:53,440 --> 00:44:56,960
as usual like exchanges the size of the

1108
00:44:55,760 --> 00:45:00,640
message can grow

1109
00:44:56,960 --> 00:45:04,000
can grow to a very large

1110
00:45:00,640 --> 00:45:07,279
value so udp will probably

1111
00:45:04,000 --> 00:45:09,920
not be a good choice for transparency so

1112
00:45:07,280 --> 00:45:11,680
we we anticipate that and tcp will be

1113
00:45:09,920 --> 00:45:14,720
using this case

1114
00:45:11,680 --> 00:45:18,560
and i think that um we address

1115
00:45:14,720 --> 00:45:21,520
the issue that uh not the issue but

1116
00:45:18,560 --> 00:45:25,040
i think we will will introduce a new mod

1117
00:45:21,520 --> 00:45:28,720
when ike will switch from udp to tcp

1118
00:45:25,040 --> 00:45:32,000
and esp will remain in uh

1119
00:45:28,720 --> 00:45:34,799
plane or edp encapsulation if it

1120
00:45:32,000 --> 00:45:35,839
if it possible so it will it will avoid

1121
00:45:34,800 --> 00:45:39,680
a necessity

1122
00:45:35,839 --> 00:45:43,279
to um encapsulate

1123
00:45:39,680 --> 00:45:45,279
the ipc in gcp because

1124
00:45:43,280 --> 00:45:47,040
for performance reasons it's not very

1125
00:45:45,280 --> 00:45:50,240
good idea so

1126
00:45:47,040 --> 00:45:53,520
either we do all in tcp

1127
00:45:50,240 --> 00:45:57,200
or we do i can tcp and ip second udp

1128
00:45:53,520 --> 00:45:58,880
on play so i think it will address

1129
00:45:57,200 --> 00:46:01,040
uh the reliability and transfer in the

1130
00:45:58,880 --> 00:46:03,920
religion that i like

1131
00:46:01,040 --> 00:46:03,920
so next please

1132
00:46:05,599 --> 00:46:12,000
so um the purpose of this

1133
00:46:09,040 --> 00:46:12,319
presentation is to guard and working

1134
00:46:12,000 --> 00:46:15,920
group

1135
00:46:12,319 --> 00:46:19,119
interest in this topic so

1136
00:46:15,920 --> 00:46:22,160
is it is this problem worth to address

1137
00:46:19,119 --> 00:46:25,200
and is the suggestion suggested approach

1138
00:46:22,160 --> 00:46:29,040
a real number so these are questions

1139
00:46:25,200 --> 00:46:32,000
to the group

1140
00:46:29,040 --> 00:46:32,000
what about adoption

1141
00:46:32,319 --> 00:46:35,839
yeah so if anybody has any comments come

1142
00:46:34,560 --> 00:46:38,640
to you know

1143
00:46:35,839 --> 00:46:39,839
i might from my personal view i think

1144
00:46:38,640 --> 00:46:41,200
this is

1145
00:46:39,839 --> 00:46:43,440
hard to answer the questions i think

1146
00:46:41,200 --> 00:46:46,720
this is worth of addressing

1147
00:46:43,440 --> 00:46:47,520
and i think uh i think actually it would

1148
00:46:46,720 --> 00:46:49,520
be better to do

1149
00:46:47,520 --> 00:46:51,200
some other approach to that i was

1150
00:46:49,520 --> 00:46:53,040
thinking about having one bit in the

1151
00:46:51,200 --> 00:46:54,799
reserve fields of the header to say that

1152
00:46:53,040 --> 00:46:57,839
this is not the last one

1153
00:46:54,800 --> 00:46:59,599
meaning the not the last fragment

1154
00:46:57,839 --> 00:47:01,759
and that would indicate whether you need

1155
00:46:59,599 --> 00:47:04,720
to combine it with the next one or

1156
00:47:01,760 --> 00:47:06,400
or or whether it's a standalone and that

1157
00:47:04,720 --> 00:47:08,839
would actually solve the problem that it

1158
00:47:06,400 --> 00:47:12,319
actually would work with any

1159
00:47:08,839 --> 00:47:16,160
payload type regardless uh

1160
00:47:12,319 --> 00:47:17,040
what it is and of course it will

1161
00:47:16,160 --> 00:47:18,560
still mean that if there's

1162
00:47:17,040 --> 00:47:19,279
implementations who check the reserve

1163
00:47:18,560 --> 00:47:21,599
then uh

1164
00:47:19,280 --> 00:47:22,319
like barf if there's non-zero values

1165
00:47:21,599 --> 00:47:24,160
there

1166
00:47:22,319 --> 00:47:26,160
that they will barf but that's happening

1167
00:47:24,160 --> 00:47:28,399
anyway because i mean if you have any

1168
00:47:26,160 --> 00:47:30,640
payload that kind of payloads they will

1169
00:47:28,400 --> 00:47:34,559
not talk with the old versions that

1170
00:47:30,640 --> 00:47:36,960
don't support this anyway so

1171
00:47:34,559 --> 00:47:40,079
uh but that's that's my comment so i

1172
00:47:36,960 --> 00:47:40,079
think you're up next

1173
00:47:40,640 --> 00:47:46,720
um yeah hi so um i think it's worth

1174
00:47:44,960 --> 00:47:49,359
as an individual i think it's worth

1175
00:47:46,720 --> 00:47:53,118
doing um i think we had

1176
00:47:49,359 --> 00:47:55,920
um previously uh needs for uh

1177
00:47:53,119 --> 00:47:58,880
larger payloads like where with uh uh

1178
00:47:55,920 --> 00:48:01,839
config payload when we wanted to send a

1179
00:47:58,880 --> 00:48:03,920
large amount of routes well they're not

1180
00:48:01,839 --> 00:48:05,520
routes they're

1181
00:48:03,920 --> 00:48:07,680
traffic selectors in the config payload

1182
00:48:05,520 --> 00:48:12,079
but um yeah the same thing

1183
00:48:07,680 --> 00:48:15,040
um and we were limited by the 64k which

1184
00:48:12,079 --> 00:48:15,760
was okay but nothing um what i'm

1185
00:48:15,040 --> 00:48:19,119
wondering is

1186
00:48:15,760 --> 00:48:19,839
why not uh go to the um well to me

1187
00:48:19,119 --> 00:48:22,640
obvious

1188
00:48:19,839 --> 00:48:23,200
solution of just uh changing the payload

1189
00:48:22,640 --> 00:48:25,680
format

1190
00:48:23,200 --> 00:48:27,598
to accommodate uh like a three byte or

1191
00:48:25,680 --> 00:48:30,078
four byte um

1192
00:48:27,599 --> 00:48:30,960
uh payload length and then you get then

1193
00:48:30,079 --> 00:48:32,640
you're not limited by

1194
00:48:30,960 --> 00:48:35,760
64k and of course negotiate that

1195
00:48:32,640 --> 00:48:38,160
capability in the initial exchange

1196
00:48:35,760 --> 00:48:39,440
well uh the motivation what uh

1197
00:48:38,160 --> 00:48:41,920
simplicity

1198
00:48:39,440 --> 00:48:44,240
so this approach is very simple and uh

1199
00:48:41,920 --> 00:48:47,520
it doesn't require any change to

1200
00:48:44,240 --> 00:48:50,879
uh belong parsing or well a little

1201
00:48:47,520 --> 00:48:51,680
very little change so that's why it was

1202
00:48:50,880 --> 00:48:54,640
taken but

1203
00:48:51,680 --> 00:48:56,319
uh if you if you want to change a

1204
00:48:54,640 --> 00:48:59,680
generic preload format

1205
00:48:56,319 --> 00:49:00,800
well it's possible i agree it probably

1206
00:48:59,680 --> 00:49:02,720
was to discuss

1207
00:49:00,800 --> 00:49:04,880
but it's a major change to to the

1208
00:49:02,720 --> 00:49:09,839
protocol

1209
00:49:04,880 --> 00:49:12,319
to me having uh getting uh several

1210
00:49:09,839 --> 00:49:13,440
payloads of the same type and then

1211
00:49:12,319 --> 00:49:16,319
knowing that

1212
00:49:13,440 --> 00:49:18,400
when you get these pills you have to

1213
00:49:16,319 --> 00:49:20,880
merge them into a

1214
00:49:18,400 --> 00:49:22,240
large payload at the receiver and that's

1215
00:49:20,880 --> 00:49:24,480
more complex than

1216
00:49:22,240 --> 00:49:25,279
just having an alternate failure but

1217
00:49:24,480 --> 00:49:27,599
that's

1218
00:49:25,280 --> 00:49:28,480
probably implementation dependent i

1219
00:49:27,599 --> 00:49:31,520
think i think

1220
00:49:28,480 --> 00:49:32,319
it was to discuss and on the other on

1221
00:49:31,520 --> 00:49:34,960
the other side

1222
00:49:32,319 --> 00:49:35,839
if you want to make well it's just one

1223
00:49:34,960 --> 00:49:39,200
use case

1224
00:49:35,839 --> 00:49:41,279
uh large balloons uh the other case is

1225
00:49:39,200 --> 00:49:42,399
to make like messages as small as

1226
00:49:41,280 --> 00:49:44,640
possible well

1227
00:49:42,400 --> 00:49:47,119
not not for this particular large key

1228
00:49:44,640 --> 00:49:50,400
exchange method but using ike for iot

1229
00:49:47,119 --> 00:49:52,240
on on on the like and we are trying to

1230
00:49:50,400 --> 00:49:54,800
make as small as possible

1231
00:49:52,240 --> 00:49:56,000
and for this reason to enlarge a generic

1232
00:49:54,800 --> 00:49:58,480
reload for mods

1233
00:49:56,000 --> 00:50:00,000
so that it will take not not not for

1234
00:49:58,480 --> 00:50:02,480
children not to take

1235
00:50:00,000 --> 00:50:03,680
provide but for example eight bytes it's

1236
00:50:02,480 --> 00:50:07,440
not very good idea

1237
00:50:03,680 --> 00:50:09,759
it must at least support both formats as

1238
00:50:07,440 --> 00:50:12,000
compact and large and something like

1239
00:50:09,760 --> 00:50:12,000
that

1240
00:50:12,960 --> 00:50:15,839
i guess that makes sense

1241
00:50:18,079 --> 00:50:30,079
so uh call for adaption

1242
00:50:26,559 --> 00:50:34,000
so so let me see

1243
00:50:30,079 --> 00:50:35,920
this is wondering if this is

1244
00:50:34,000 --> 00:50:37,440
not really an or a charter but i would i

1245
00:50:35,920 --> 00:50:38,559
think we can actually still consider

1246
00:50:37,440 --> 00:50:41,680
this as part of the

1247
00:50:38,559 --> 00:50:42,400
post quantum algorithm stuff so so

1248
00:50:41,680 --> 00:50:44,480
because it's

1249
00:50:42,400 --> 00:50:46,880
needed for certain algorithms so we can

1250
00:50:44,480 --> 00:50:49,280
actually do this even if it's not

1251
00:50:46,880 --> 00:50:51,280
explicitly mentioned in the charter i

1252
00:50:49,280 --> 00:50:52,960
would really like to see

1253
00:50:51,280 --> 00:50:54,720
a couple of comments on people and

1254
00:50:52,960 --> 00:50:56,000
actually i was really thinking about we

1255
00:50:54,720 --> 00:50:57,359
should probably have a little bit more

1256
00:50:56,000 --> 00:50:59,440
discussion about

1257
00:50:57,359 --> 00:51:01,680
what would be the best way of you know

1258
00:50:59,440 --> 00:51:02,240
having pros and cons on different things

1259
00:51:01,680 --> 00:51:04,640
on on

1260
00:51:02,240 --> 00:51:06,240
on for the actual you know

1261
00:51:04,640 --> 00:51:08,558
implementation

1262
00:51:06,240 --> 00:51:10,479
you know either having you know i think

1263
00:51:08,559 --> 00:51:11,520
three octaves is too low it's too short

1264
00:51:10,480 --> 00:51:13,200
i think four octaves

1265
00:51:11,520 --> 00:51:15,680
length is needed unless you actually

1266
00:51:13,200 --> 00:51:17,439
really but actually i think you actually

1267
00:51:15,680 --> 00:51:19,359
if you say one megabyte is most of those

1268
00:51:17,440 --> 00:51:20,720
then x3 octatch actually would be enough

1269
00:51:19,359 --> 00:51:22,960
for most of those

1270
00:51:20,720 --> 00:51:25,279
and that would actually be that even if

1271
00:51:22,960 --> 00:51:28,559
you actually have you know

1272
00:51:25,280 --> 00:51:29,680
if you ever have more payloads that has

1273
00:51:28,559 --> 00:51:31,359
more than you know

1274
00:51:29,680 --> 00:51:33,919
three octet lengths that means that we

1275
00:51:31,359 --> 00:51:35,920
have more than 255

1276
00:51:33,920 --> 00:51:37,440
uh fragments or these kind of payloads

1277
00:51:35,920 --> 00:51:38,400
that need to combine together which

1278
00:51:37,440 --> 00:51:42,160
actually start to get

1279
00:51:38,400 --> 00:51:42,160
really a little bit annoying already

1280
00:51:42,240 --> 00:51:45,279
and and that's actually it's one of

1281
00:51:43,599 --> 00:51:46,640
those you know question is if you

1282
00:51:45,280 --> 00:51:48,480
actually have that big

1283
00:51:46,640 --> 00:51:50,240
payload then i think you know chasing

1284
00:51:48,480 --> 00:51:52,160
the payload format to be

1285
00:51:50,240 --> 00:51:53,839
would be either better because i mean if

1286
00:51:52,160 --> 00:51:55,680
you have have to combine you know

1287
00:51:53,839 --> 00:51:58,799
hundreds of these

1288
00:51:55,680 --> 00:52:00,960
then it gets a little bit annoying

1289
00:51:58,800 --> 00:52:02,160
i think at that point we're using tcpa

1290
00:52:00,960 --> 00:52:03,920
anyway

1291
00:52:02,160 --> 00:52:06,160
yeah but we are using yeah yeah of

1292
00:52:03,920 --> 00:52:08,000
course but even in tcp

1293
00:52:06,160 --> 00:52:10,000
you know the yeah the payload format is

1294
00:52:08,000 --> 00:52:11,040
still i mean if you use this method that

1295
00:52:10,000 --> 00:52:14,319
we have you know

1296
00:52:11,040 --> 00:52:15,440
multiple of same payloads with maximum

1297
00:52:14,319 --> 00:52:18,720
length of uh

1298
00:52:15,440 --> 00:52:20,720
64 case and we want to send one megabyte

1299
00:52:18,720 --> 00:52:24,959
we still have what we have

1300
00:52:20,720 --> 00:52:28,160
let me see 32

1301
00:52:24,960 --> 00:52:30,839
sorry 16 16 you know

1302
00:52:28,160 --> 00:52:33,839
payloads we have to come by to send one

1303
00:52:30,839 --> 00:52:33,839
megabyte

1304
00:52:34,240 --> 00:52:39,520
so but anyway so i

1305
00:52:37,280 --> 00:52:41,200
so i think we don't want to get people

1306
00:52:39,520 --> 00:52:45,359
to read this document

1307
00:52:41,200 --> 00:52:46,078
uh this is so so do you have the craft

1308
00:52:45,359 --> 00:52:48,319
that is already

1309
00:52:46,079 --> 00:52:49,359
in the that has all the discussion about

1310
00:52:48,319 --> 00:52:51,279
this

1311
00:52:49,359 --> 00:52:53,040
uh there is a draft but it's mostly

1312
00:52:51,280 --> 00:52:55,119
discussed uh

1313
00:52:53,040 --> 00:52:57,040
different uh warehouse methods uh

1314
00:52:55,119 --> 00:53:00,400
approaches of uh

1315
00:52:57,040 --> 00:53:03,040
putting uh large it's interactive too

1316
00:53:00,400 --> 00:53:04,079
and so so it's not really so i don't

1317
00:53:03,040 --> 00:53:05,759
think actually it would be

1318
00:53:04,079 --> 00:53:07,680
ready for the working group adoption for

1319
00:53:05,760 --> 00:53:08,079
that kind of talk but yet i i think we

1320
00:53:07,680 --> 00:53:10,319
would know

1321
00:53:08,079 --> 00:53:11,440
there's a little bit we need to update

1322
00:53:10,319 --> 00:53:13,359
all right yeah

1323
00:53:11,440 --> 00:53:15,760
yeah but if you actually would take this

1324
00:53:13,359 --> 00:53:18,400
document this uh

1325
00:53:15,760 --> 00:53:18,800
different approaches to the list and we

1326
00:53:18,400 --> 00:53:20,880
could have

1327
00:53:18,800 --> 00:53:22,800
started discussing on the list about

1328
00:53:20,880 --> 00:53:24,559
what would be the best of the

1329
00:53:22,800 --> 00:53:25,920
different approaches and what would be

1330
00:53:24,559 --> 00:53:27,359
the good things and bad things about

1331
00:53:25,920 --> 00:53:28,720
those because

1332
00:53:27,359 --> 00:53:30,319
people have different views and

1333
00:53:28,720 --> 00:53:31,680
different and as i said they were

1334
00:53:30,319 --> 00:53:33,200
actually yeah one of the things that

1335
00:53:31,680 --> 00:53:33,839
people also wanted to see was actually

1336
00:53:33,200 --> 00:53:35,359
transport

1337
00:53:33,839 --> 00:53:38,480
and configuration payload they wanted to

1338
00:53:35,359 --> 00:53:40,319
transport like whole configuration files

1339
00:53:38,480 --> 00:53:42,160
where you have a text file which has you

1340
00:53:40,319 --> 00:53:43,839
know the whole configuration

1341
00:53:42,160 --> 00:53:44,879
and that can be actually quite big and

1342
00:53:43,839 --> 00:53:46,880
that's what's one of the things that

1343
00:53:44,880 --> 00:53:47,280
they were saying oh we won't use gfk set

1344
00:53:46,880 --> 00:53:49,119
to

1345
00:53:47,280 --> 00:53:51,520
set the configuration to all of our

1346
00:53:49,119 --> 00:53:57,599
remote devices

1347
00:53:51,520 --> 00:54:00,640
and then we'll say no but anyway so

1348
00:53:57,599 --> 00:54:00,640
any other comments on this

1349
00:54:03,760 --> 00:54:11,839
if not we move to the next one which is

1350
00:54:08,480 --> 00:54:11,839
valerie doing the

1351
00:54:13,280 --> 00:54:20,400
encrypted dns yes

1352
00:54:17,839 --> 00:54:20,400
let's please

1353
00:54:22,800 --> 00:54:26,720
so this uh this draft was presented in

1354
00:54:26,000 --> 00:54:30,720
uh

1355
00:54:26,720 --> 00:54:34,399
itf 108 and um

1356
00:54:30,720 --> 00:54:37,839
since we received some comments

1357
00:54:34,400 --> 00:54:39,839
and uh one comment was a complexity

1358
00:54:37,839 --> 00:54:43,200
induced by

1359
00:54:39,839 --> 00:54:46,160
mixing attributes in one in a single

1360
00:54:43,200 --> 00:54:46,160
attribute format

1361
00:54:46,559 --> 00:54:53,760
well we checked with doc

1362
00:54:49,760 --> 00:54:57,359
authors and they expressed a desire to

1363
00:54:53,760 --> 00:55:01,440
to have a port number in in

1364
00:54:57,359 --> 00:55:01,440
to be configurable and

1365
00:55:02,319 --> 00:55:09,040
it was a desire to supply a dog

1366
00:55:05,599 --> 00:55:12,559
origin blade uh so uh

1367
00:55:09,040 --> 00:55:16,240
we issued uh next uh new version uh

1368
00:55:12,559 --> 00:55:20,240
which incorporated this yes next place

1369
00:55:16,240 --> 00:55:21,359
uh all these changes so there is a new

1370
00:55:20,240 --> 00:55:24,959
single attribute

1371
00:55:21,359 --> 00:55:25,759
uh new attach sorry attribute format is

1372
00:55:24,960 --> 00:55:28,960
the same but

1373
00:55:25,760 --> 00:55:30,720
we introduced six different attribute

1374
00:55:28,960 --> 00:55:33,920
types with the same format

1375
00:55:30,720 --> 00:55:35,040
for so that each each type of

1376
00:55:33,920 --> 00:55:38,880
intercontinental

1377
00:55:35,040 --> 00:55:42,960
and uh ip uh family

1378
00:55:38,880 --> 00:55:46,640
is carried in into this into dedicated

1379
00:55:42,960 --> 00:55:47,200
attribute type so uh we included port

1380
00:55:46,640 --> 00:55:50,400
number

1381
00:55:47,200 --> 00:55:52,480
in this format and we remove

1382
00:55:50,400 --> 00:55:53,680
scope beat because it was controversial

1383
00:55:52,480 --> 00:55:56,960
and

1384
00:55:53,680 --> 00:55:59,598
actually the most common that it is not

1385
00:55:56,960 --> 00:55:59,599
okay to use

1386
00:55:59,760 --> 00:56:02,880
encrypted dns servers outside tonight

1387
00:56:01,650 --> 00:56:06,960
[Music]

1388
00:56:02,880 --> 00:56:06,960
so next please

1389
00:56:09,119 --> 00:56:16,240
so separate attribute types uh it's it's

1390
00:56:12,640 --> 00:56:19,440
there is a trade-off between complexity

1391
00:56:16,240 --> 00:56:22,319
and the size of the message uh

1392
00:56:19,440 --> 00:56:23,200
so we decided to simplify processing uh

1393
00:56:22,319 --> 00:56:26,319
so that

1394
00:56:23,200 --> 00:56:29,680
each encrypted dns has

1395
00:56:26,319 --> 00:56:32,960
has its dedicated attribute type

1396
00:56:29,680 --> 00:56:35,040
uh so it's it's like negotiation client

1397
00:56:32,960 --> 00:56:35,680
includes all the attribute encrypted and

1398
00:56:35,040 --> 00:56:37,599
it

1399
00:56:35,680 --> 00:56:38,799
encrypted dns type it supports and the

1400
00:56:37,599 --> 00:56:41,839
server returns back

1401
00:56:38,799 --> 00:56:44,559
one or probably a few of them which

1402
00:56:41,839 --> 00:56:45,599
it's also supported it is configured

1403
00:56:44,559 --> 00:56:48,480
then as

1404
00:56:45,599 --> 00:56:50,000
uh but each attribute type each

1405
00:56:48,480 --> 00:56:53,440
attribute can contain several

1406
00:56:50,000 --> 00:56:53,920
addresses well uh the the reason for

1407
00:56:53,440 --> 00:56:57,680
this

1408
00:56:53,920 --> 00:57:00,640
simplification the justification for it

1409
00:56:57,680 --> 00:57:01,680
is that in additive working group

1410
00:57:00,640 --> 00:57:05,200
encrypted dns

1411
00:57:01,680 --> 00:57:08,640
is mostly considered as equivalent

1412
00:57:05,200 --> 00:57:12,319
uh to unencrypted

1413
00:57:08,640 --> 00:57:16,078
encrypted resolvers are equivalent to

1414
00:57:12,319 --> 00:57:19,759
uh 53 uh

1415
00:57:16,079 --> 00:57:22,480
resolvers so it it must

1416
00:57:19,760 --> 00:57:24,240
it must return the same response when

1417
00:57:22,480 --> 00:57:27,760
whatever

1418
00:57:24,240 --> 00:57:28,879
encrypted dns you use so from this point

1419
00:57:27,760 --> 00:57:30,640
of view

1420
00:57:28,880 --> 00:57:32,160
point of view there must not be any

1421
00:57:30,640 --> 00:57:35,920
difference

1422
00:57:32,160 --> 00:57:39,520
you for example would choose uh

1423
00:57:35,920 --> 00:57:42,640
one of the supported encrypted dns types

1424
00:57:39,520 --> 00:57:44,880
and uh we have the same results

1425
00:57:42,640 --> 00:57:46,078
in create so it's it's like like

1426
00:57:44,880 --> 00:57:47,680
negotiation

1427
00:57:46,079 --> 00:57:50,559
that's why we decided to separate

1428
00:57:47,680 --> 00:57:55,279
attribute title for each indiana style

1429
00:57:50,559 --> 00:57:57,760
and next please

1430
00:57:55,280 --> 00:57:59,839
so portable is included for as a comment

1431
00:57:57,760 --> 00:58:03,200
from uh

1432
00:57:59,839 --> 00:58:07,040
dog authors and

1433
00:58:03,200 --> 00:58:08,799
it's the same for all ipa traces and

1434
00:58:07,040 --> 00:58:11,200
if dns servers have different port

1435
00:58:08,799 --> 00:58:13,839
numbers and several a little bit

1436
00:58:11,200 --> 00:58:16,399
of the same time might be returned so

1437
00:58:13,839 --> 00:58:16,400
let's please

1438
00:58:17,839 --> 00:58:22,240
and scope beat is removed yes by request

1439
00:58:20,960 --> 00:58:24,880
is it's our

1440
00:58:22,240 --> 00:58:25,680
recommend that client outside of the

1441
00:58:24,880 --> 00:58:30,319
internal

1442
00:58:25,680 --> 00:58:33,440
scope of the truck server outside

1443
00:58:30,319 --> 00:58:36,558
so next please so

1444
00:58:33,440 --> 00:58:39,040
this is a new format it's it's the same

1445
00:58:36,559 --> 00:58:41,920
format for all attribute types

1446
00:58:39,040 --> 00:58:42,880
it's very simple so it contains port

1447
00:58:41,920 --> 00:58:45,920
number

1448
00:58:42,880 --> 00:58:48,839
number of addresses list of addresses

1449
00:58:45,920 --> 00:58:51,839
and authentication domain name next

1450
00:58:48,839 --> 00:58:54,799
please

1451
00:58:51,839 --> 00:58:56,720
and what about doc specific uh dog

1452
00:58:54,799 --> 00:59:01,280
servers may support more than one

1453
00:58:56,720 --> 00:59:03,919
template and the client uses well-known

1454
00:59:01,280 --> 00:59:05,200
we recent four to discover these

1455
00:59:03,920 --> 00:59:09,599
templates

1456
00:59:05,200 --> 00:59:13,520
this like uh shown in this example and

1457
00:59:09,599 --> 00:59:16,559
uh it is covered by the in the draft

1458
00:59:13,520 --> 00:59:19,599
by tv home and it's just

1459
00:59:16,559 --> 00:59:20,240
an example and we we will use whatever

1460
00:59:19,599 --> 00:59:24,319
mechanism

1461
00:59:20,240 --> 00:59:24,319
the devoking group will choose

1462
00:59:24,799 --> 00:59:27,359
yes please

1463
00:59:28,960 --> 00:59:33,760
so comment questions it seems that hd

1464
00:59:32,640 --> 00:59:36,240
working group is not

1465
00:59:33,760 --> 00:59:38,160
interested in this draft because they're

1466
00:59:36,240 --> 00:59:41,359
more focused on

1467
00:59:38,160 --> 00:59:43,680
uh basic negative functionality

1468
00:59:41,359 --> 00:59:44,799
so if ipsec can be working group is

1469
00:59:43,680 --> 00:59:48,799
interested

1470
00:59:44,799 --> 00:59:51,200
so it's probably the right time to adopt

1471
00:59:48,799 --> 00:59:51,200
this drop

1472
00:59:54,079 --> 01:00:01,839
all right so we have a couple of people

1473
00:59:55,599 --> 01:00:01,839
into you so you already tommy

1474
01:00:02,000 --> 01:00:08,960
hello can you hear me yep

1475
01:00:05,520 --> 01:00:14,640
great yes thank you for presenting this

1476
01:00:08,960 --> 01:00:16,319
um moving definitely the document seems

1477
01:00:14,640 --> 01:00:18,319
in better shape than it had before i

1478
01:00:16,319 --> 01:00:20,880
like some of the changes

1479
01:00:18,319 --> 01:00:22,319
regarding the relationship with adb

1480
01:00:20,880 --> 01:00:26,839
specifically

1481
01:00:22,319 --> 01:00:30,000
i actually would like to urge us to

1482
01:00:26,839 --> 01:00:31,279
not necessarily adopt or move this work

1483
01:00:30,000 --> 01:00:34,400
forward and what more

1484
01:00:31,280 --> 01:00:37,280
has been done in

1485
01:00:34,400 --> 01:00:40,240
addi specifically some of the mechanisms

1486
01:00:37,280 --> 01:00:40,240
we're looking at there

1487
01:00:41,520 --> 01:00:45,200
would define ways of getting the other

1488
01:00:44,400 --> 01:00:48,240
information

1489
01:00:45,200 --> 01:00:52,720
about essentially the alternative

1490
01:00:48,240 --> 01:00:55,919
encrypted dns protocols in

1491
01:00:52,720 --> 01:00:57,439
in other ways let's say from

1492
01:00:55,920 --> 01:01:00,079
being able to look up a dns record that

1493
01:00:57,440 --> 01:01:02,960
lists out to the details

1494
01:01:00,079 --> 01:01:05,280
and it could be that all we want in the

1495
01:01:02,960 --> 01:01:05,280
ike

1496
01:01:05,359 --> 01:01:09,920
information is just what is the name

1497
01:01:08,319 --> 01:01:11,119
that we need to authenticate of the

1498
01:01:09,920 --> 01:01:13,599
resolver

1499
01:01:11,119 --> 01:01:16,319
and the other details like the

1500
01:01:13,599 --> 01:01:19,280
alternative protocols or the ports

1501
01:01:16,319 --> 01:01:20,480
could be handled in a more generic

1502
01:01:19,280 --> 01:01:22,480
mechanism and that

1503
01:01:20,480 --> 01:01:26,960
may not be the case but it may be the

1504
01:01:22,480 --> 01:01:26,960
case and i don't think we should

1505
01:01:27,040 --> 01:01:34,640
jump the gun here and end up

1506
01:01:30,799 --> 01:01:37,520
having a conflicting approach i think

1507
01:01:34,640 --> 01:01:39,759
in general what we could do in ike

1508
01:01:37,520 --> 01:01:40,240
should align with whatever we end up

1509
01:01:39,760 --> 01:01:44,240
putting

1510
01:01:40,240 --> 01:01:46,558
into dhcp and ra for bootstrapping

1511
01:01:44,240 --> 01:01:53,839
trust in the same way of the encrypted

1512
01:01:46,559 --> 01:01:53,839
resolver name

1513
01:02:02,079 --> 01:02:09,680
so you suggest to it

1514
01:02:06,559 --> 01:02:11,440
yeah but as mentioned in the uh

1515
01:02:09,680 --> 01:02:12,720
discussion let's not adopt it or

1516
01:02:11,440 --> 01:02:16,240
progress it

1517
01:02:12,720 --> 01:02:19,279
until we get a bit further okay

1518
01:02:16,240 --> 01:02:22,399
so as mentioned in the job room

1519
01:02:19,280 --> 01:02:24,799
uh the existing trust is different

1520
01:02:22,400 --> 01:02:27,119
from or trusted posture it's different

1521
01:02:24,799 --> 01:02:30,799
for dhcp as opposed to ike

1522
01:02:27,119 --> 01:02:32,640
in like we already know who the um

1523
01:02:30,799 --> 01:02:35,119
the gateway is the other batteries the

1524
01:02:32,640 --> 01:02:37,279
pier whereas in dcp we're just

1525
01:02:35,119 --> 01:02:38,480
sending him out of broadcast and waiting

1526
01:02:37,280 --> 01:02:41,119
for

1527
01:02:38,480 --> 01:02:42,799
some information there so the challenges

1528
01:02:41,119 --> 01:02:46,480
are different

1529
01:02:42,799 --> 01:02:48,559
yes and a vpn is certainly more

1530
01:02:46,480 --> 01:02:49,920
more of a trusted source but that

1531
01:02:48,559 --> 01:02:52,480
doesn't mean that

1532
01:02:49,920 --> 01:02:53,839
we should have divergent approaches to

1533
01:02:52,480 --> 01:02:57,359
how we communicate

1534
01:02:53,839 --> 01:02:59,359
the details and also if we design this

1535
01:02:57,359 --> 01:03:02,558
right we may not need to

1536
01:02:59,359 --> 01:03:03,279
have an ike extension for every little

1537
01:03:02,559 --> 01:03:05,839
detail

1538
01:03:03,280 --> 01:03:06,640
of encrypted dns protocol changes that

1539
01:03:05,839 --> 01:03:09,839
come up

1540
01:03:06,640 --> 01:03:12,078
and it looks like the way this is going

1541
01:03:09,839 --> 01:03:13,038
you know if there's another protocol

1542
01:03:12,079 --> 01:03:15,680
after

1543
01:03:13,039 --> 01:03:19,039
doq that comes up we would have to keep

1544
01:03:15,680 --> 01:03:19,038
adding more and more extensions

1545
01:03:23,920 --> 01:03:31,119
i think that was actually what paul next

1546
01:03:27,039 --> 01:03:33,920
i think

1547
01:03:31,119 --> 01:03:34,960
okay so i'm actually a little concerned

1548
01:03:33,920 --> 01:03:36,799
about the fact that

1549
01:03:34,960 --> 01:03:38,319
there is like not like a certificate

1550
01:03:36,799 --> 01:03:39,920
payload

1551
01:03:38,319 --> 01:03:41,520
so that you can actually get the

1552
01:03:39,920 --> 01:03:44,799
certificate of the

1553
01:03:41,520 --> 01:03:47,599
you know doe or dot server

1554
01:03:44,799 --> 01:03:49,920
from basically you know a trusted ikev2

1555
01:03:47,599 --> 01:03:49,920
peer

1556
01:03:50,079 --> 01:03:53,440
because that would be a really good way

1557
01:03:51,359 --> 01:03:55,119
of kickstarting that trust relationship

1558
01:03:53,440 --> 01:03:56,799
to the name server

1559
01:03:55,119 --> 01:03:59,280
if it's a public one then sure there

1560
01:03:56,799 --> 01:04:01,119
might be public discovery mechanisms you

1561
01:03:59,280 --> 01:04:03,680
can use but if it's like a

1562
01:04:01,119 --> 01:04:05,760
an internal one and there's a split vpn

1563
01:04:03,680 --> 01:04:07,598
and so there's a split dns as well with

1564
01:04:05,760 --> 01:04:09,520
an internal only zone

1565
01:04:07,599 --> 01:04:11,440
and the name is internal only zone and

1566
01:04:09,520 --> 01:04:12,880
how you reach that name without actually

1567
01:04:11,440 --> 01:04:13,599
getting to the name server so i think

1568
01:04:12,880 --> 01:04:14,799
there's

1569
01:04:13,599 --> 01:04:17,119
there's definitely an additional

1570
01:04:14,799 --> 01:04:19,200
bootstrap problem that might need to be

1571
01:04:17,119 --> 01:04:21,200
resolved and that might require

1572
01:04:19,200 --> 01:04:23,279
actually sending some kind of cert

1573
01:04:21,200 --> 01:04:25,520
payload for the

1574
01:04:23,280 --> 01:04:27,839
for the tls connection or the https

1575
01:04:25,520 --> 01:04:27,839
connection

1576
01:04:37,440 --> 01:04:44,400
hello can you hear me

1577
01:04:41,039 --> 01:04:45,760
yeah hello yeah hey yeah

1578
01:04:44,400 --> 01:04:48,160
i would i would like to respond to some

1579
01:04:45,760 --> 01:04:50,319
of the comments from tommy and walter

1580
01:04:48,160 --> 01:04:51,759
uh the first one is that uh this graph

1581
01:04:50,319 --> 01:04:53,680
does not define

1582
01:04:51,760 --> 01:04:55,520
the some of the mechanisms for

1583
01:04:53,680 --> 01:04:56,558
discovering for example the doh

1584
01:04:55,520 --> 01:04:58,079
templates

1585
01:04:56,559 --> 01:04:59,760
it's pretty much relying on the work

1586
01:04:58,079 --> 01:05:02,240
that's happening in add and we are not

1587
01:04:59,760 --> 01:05:04,480
defining any iq2 extension for

1588
01:05:02,240 --> 01:05:05,279
conveying that uhuri templates the only

1589
01:05:04,480 --> 01:05:07,119
reason

1590
01:05:05,280 --> 01:05:09,760
why you see in addition to the resolver

1591
01:05:07,119 --> 01:05:11,599
name that the ip addresses and port

1592
01:05:09,760 --> 01:05:12,160
numbers are being converted is to avoid

1593
01:05:11,599 --> 01:05:14,720
any

1594
01:05:12,160 --> 01:05:16,960
uh dns or 53 lookup that is to basically

1595
01:05:14,720 --> 01:05:18,720
avoid a clear texting slot

1596
01:05:16,960 --> 01:05:20,079
that was the reason for adding the

1597
01:05:18,720 --> 01:05:22,480
portables and

1598
01:05:20,079 --> 01:05:24,160
ip address uh but we can definitely wait

1599
01:05:22,480 --> 01:05:25,440
for the outcome of the discussions that

1600
01:05:24,160 --> 01:05:26,799
i think many of us

1601
01:05:25,440 --> 01:05:28,640
including tommy and we're actively

1602
01:05:26,799 --> 01:05:31,839
participating in uh

1603
01:05:28,640 --> 01:05:34,400
i had working group uh

1604
01:05:31,839 --> 01:05:36,400
uh the other one that i wanted to bring

1605
01:05:34,400 --> 01:05:37,920
up was the uh

1606
01:05:36,400 --> 01:05:40,240
comment that was brought up with regard

1607
01:05:37,920 --> 01:05:42,400
to uh using uh private certificates

1608
01:05:40,240 --> 01:05:44,240
uh uh what we have been assuming in this

1609
01:05:42,400 --> 01:05:46,319
draft is though the

1610
01:05:44,240 --> 01:05:48,078
dns server is going to be hosted on uh

1611
01:05:46,319 --> 01:05:49,359
private ip addresses and it will be

1612
01:05:48,079 --> 01:05:51,920
within the

1613
01:05:49,359 --> 01:05:54,160
vpn providers network only for the vpn

1614
01:05:51,920 --> 01:05:56,079
clients who connect to it

1615
01:05:54,160 --> 01:05:58,399
it can still have a public certificate

1616
01:05:56,079 --> 01:06:00,079
but use private ip addresses and the vpn

1617
01:05:58,400 --> 01:06:01,200
provider can still get use acme and

1618
01:06:00,079 --> 01:06:04,319
other protocols

1619
01:06:01,200 --> 01:06:06,240
to have an public domain name and get a

1620
01:06:04,319 --> 01:06:09,119
public certificate but make sure that

1621
01:06:06,240 --> 01:06:10,319
uh that internal uh dns server is only

1622
01:06:09,119 --> 01:06:12,480
reachable

1623
01:06:10,319 --> 01:06:14,079
uh by the vpn connected clients and not

1624
01:06:12,480 --> 01:06:17,119
by anybody outside the network

1625
01:06:14,079 --> 01:06:19,359
so we did not see a reason for uh

1626
01:06:17,119 --> 01:06:20,480
sending the certificate fingerprint back

1627
01:06:19,359 --> 01:06:22,960
to the client for authentication

1628
01:06:20,480 --> 01:06:22,960
purposes

1629
01:06:28,400 --> 01:06:33,200
okay so i think that was lost from the

1630
01:06:31,520 --> 01:06:36,079
queue

1631
01:06:33,200 --> 01:06:37,118
uh our ad was saying that we have to

1632
01:06:36,079 --> 01:06:38,960
resharper anyway

1633
01:06:37,119 --> 01:06:40,480
for this work so we can't actually just

1634
01:06:38,960 --> 01:06:42,319
adopt it yet

1635
01:06:40,480 --> 01:06:44,160
so we have to but but actually that

1636
01:06:42,319 --> 01:06:45,839
doesn't mean that that actually gives us

1637
01:06:44,160 --> 01:06:47,279
some time the question is that to

1638
01:06:45,839 --> 01:06:49,359
actually want to

1639
01:06:47,280 --> 01:06:50,640
add recharger to do this kind of work

1640
01:06:49,359 --> 01:06:54,319
also

1641
01:06:50,640 --> 01:06:55,920
and uh i think there's uh

1642
01:06:54,319 --> 01:06:57,440
we probably want to go up or go to list

1643
01:06:55,920 --> 01:06:59,440
and ask the list

1644
01:06:57,440 --> 01:07:01,039
whether people are saying that this is

1645
01:06:59,440 --> 01:07:02,559
item that we should be adding and we

1646
01:07:01,039 --> 01:07:03,839
probably want to get some other things

1647
01:07:02,559 --> 01:07:06,400
also

1648
01:07:03,839 --> 01:07:07,759
uh perhaps that we have to check out

1649
01:07:06,400 --> 01:07:09,039
what other i think currently all the

1650
01:07:07,760 --> 01:07:10,799
other things that we have

1651
01:07:09,039 --> 01:07:12,559
are already in the charter but this one

1652
01:07:10,799 --> 01:07:14,640
is isn't so

1653
01:07:12,559 --> 01:07:16,799
but there will be some other things that

1654
01:07:14,640 --> 01:07:17,920
are not

1655
01:07:16,799 --> 01:07:19,920
so we should probably ask those

1656
01:07:17,920 --> 01:07:22,160
questions uh at the same time in the

1657
01:07:19,920 --> 01:07:22,160
list

1658
01:07:25,839 --> 01:07:29,839
all right so if nothing else then we go

1659
01:07:28,720 --> 01:07:33,680
to the next

1660
01:07:29,839 --> 01:07:37,680
which is valerie

1661
01:07:33,680 --> 01:07:37,680
revised keep processing live version 2.

1662
01:07:38,720 --> 01:07:45,118
so i watched cookie processor

1663
01:07:42,079 --> 01:07:45,119
uh next please

1664
01:07:46,000 --> 01:07:49,119
so this is just a reminder slides that

1665
01:07:48,160 --> 01:07:53,200
reminds uh

1666
01:07:49,119 --> 01:07:56,880
how case used in ip2 so if a responder

1667
01:07:53,200 --> 01:07:59,919
feels that it's under attack it returns

1668
01:07:56,880 --> 01:08:01,039
a notification containing cookie keeping

1669
01:07:59,920 --> 01:08:04,319
load state

1670
01:08:01,039 --> 01:08:07,359
and initiator it sends its initial

1671
01:08:04,319 --> 01:08:10,799
request including this cookie which is

1672
01:08:07,359 --> 01:08:15,680
an opaque block initiating

1673
01:08:10,799 --> 01:08:15,680
and then i cause in icos

1674
01:08:15,760 --> 01:08:22,400
the initiator sequence message is fed

1675
01:08:18,960 --> 01:08:26,640
into the out payload calculation

1676
01:08:22,399 --> 01:08:28,399
to to see that

1677
01:08:26,640 --> 01:08:30,799
authentication that the client is

1678
01:08:28,399 --> 01:08:33,920
authenticated and

1679
01:08:30,799 --> 01:08:39,839
no changes was introduced

1680
01:08:33,920 --> 01:08:39,839
by the attack in japan the next piece

1681
01:08:40,080 --> 01:08:46,399
so uh we encourage uh a couple of

1682
01:08:43,279 --> 01:08:49,359
problem scenarios so

1683
01:08:46,399 --> 01:08:52,318
this is the first problem scenario uh

1684
01:08:49,359 --> 01:08:55,920
consider the network that is very bad

1685
01:08:52,319 --> 01:08:59,520
and introduces long delays

1686
01:08:55,920 --> 01:09:03,600
and high packet loss so initiated first

1687
01:08:59,520 --> 01:09:06,640
signs like i say need request responder

1688
01:09:03,600 --> 01:09:08,400
response with cookie it feels it only

1689
01:09:06,640 --> 01:09:12,080
feels that it's under attack

1690
01:09:08,399 --> 01:09:14,080
and it responds with a cookie

1691
01:09:12,080 --> 01:09:16,318
but this message contains cookie

1692
01:09:14,080 --> 01:09:17,120
requests is delayed for quite a long

1693
01:09:16,319 --> 01:09:20,640
time

1694
01:09:17,120 --> 01:09:22,000
so that initiated times out and recents

1695
01:09:20,640 --> 01:09:25,600
its initial

1696
01:09:22,000 --> 01:09:29,198
request without any cooking uh

1697
01:09:25,600 --> 01:09:32,000
at this point when responder receives

1698
01:09:29,198 --> 01:09:32,799
this request second time it doesn't feel

1699
01:09:32,000 --> 01:09:35,600
as it's

1700
01:09:32,799 --> 01:09:36,399
under attack because situation has

1701
01:09:35,600 --> 01:09:39,199
changed

1702
01:09:36,399 --> 01:09:39,519
and it's just a response with uh i can

1703
01:09:39,198 --> 01:09:42,559
say

1704
01:09:39,520 --> 01:09:45,199
it responds and

1705
01:09:42,560 --> 01:09:46,880
considers uh the like saying it

1706
01:09:45,198 --> 01:09:50,158
completed

1707
01:09:46,880 --> 01:09:53,440
and this uh response is also delayed

1708
01:09:50,158 --> 01:09:55,360
and uh after some time the

1709
01:09:53,439 --> 01:09:56,799
initiator receives the initial response

1710
01:09:55,360 --> 01:10:00,400
from the responder

1711
01:09:56,800 --> 01:10:04,400
containing cookie and it presents

1712
01:10:00,400 --> 01:10:08,639
a rack 2 including this cookie

1713
01:10:04,400 --> 01:10:11,280
into the request but this request uh

1714
01:10:08,640 --> 01:10:13,600
get lost in the network after some time

1715
01:10:11,280 --> 01:10:16,960
the network initiator receives

1716
01:10:13,600 --> 01:10:18,560
resp to response and also consider that

1717
01:10:16,960 --> 01:10:21,120
i can say need completed

1718
01:10:18,560 --> 01:10:22,080
so at this point both initiate and

1719
01:10:21,120 --> 01:10:24,159
responder

1720
01:10:22,080 --> 01:10:25,360
uh things that i can say in it has

1721
01:10:24,159 --> 01:10:28,320
completed but

1722
01:10:25,360 --> 01:10:30,960
they have different view on what was the

1723
01:10:28,320 --> 01:10:34,480
most recent request message

1724
01:10:30,960 --> 01:10:38,080
from initiator so initiator since

1725
01:10:34,480 --> 01:10:41,519
thinks that it's uh wreck 2

1726
01:10:38,080 --> 01:10:44,960
well responded since that it's uh

1727
01:10:41,520 --> 01:10:47,040
sorry respond to things that it's

1728
01:10:44,960 --> 01:10:48,400
regular and the chat it seems like it's

1729
01:10:47,040 --> 01:10:51,519
right too

1730
01:10:48,400 --> 01:10:54,639
so as a result uh since

1731
01:10:51,520 --> 01:10:57,280
these messages will be fed into our

1732
01:10:54,640 --> 01:11:00,080
load calculation the authentication was

1733
01:10:57,280 --> 01:11:02,719
well will be failed

1734
01:11:00,080 --> 01:11:02,719
the next please

1735
01:11:03,360 --> 01:11:06,960
and a very similar scenario but a little

1736
01:11:05,920 --> 01:11:09,120
bit different

1737
01:11:06,960 --> 01:11:10,800
it's also very bad network with long

1738
01:11:09,120 --> 01:11:13,920
delays a packet loss

1739
01:11:10,800 --> 01:11:16,239
at in this scenario uh

1740
01:11:13,920 --> 01:11:18,719
responder feels that it's under attack

1741
01:11:16,239 --> 01:11:20,320
in both cases but it changes cookie

1742
01:11:18,719 --> 01:11:22,719
generation secret between

1743
01:11:20,320 --> 01:11:23,599
receiving the first and the recent i can

1744
01:11:22,719 --> 01:11:25,679
say need to

1745
01:11:23,600 --> 01:11:27,920
understand that like i say need a

1746
01:11:25,679 --> 01:11:28,960
request so it generates different

1747
01:11:27,920 --> 01:11:32,159
cookies

1748
01:11:28,960 --> 01:11:35,679
and at the end when i can say it

1749
01:11:32,159 --> 01:11:36,239
is completed uh again initiate the

1750
01:11:35,679 --> 01:11:38,560
response

1751
01:11:36,239 --> 01:11:39,440
has have different views on what was the

1752
01:11:38,560 --> 01:11:41,040
most recent

1753
01:11:39,440 --> 01:11:42,719
request message from the from the

1754
01:11:41,040 --> 01:11:45,519
initiator uh

1755
01:11:42,719 --> 01:11:46,000
because uh initiate a sense is that it

1756
01:11:45,520 --> 01:11:48,880
will

1757
01:11:46,000 --> 01:11:51,280
it contains cookie c1 while responder

1758
01:11:48,880 --> 01:11:54,159
thinks that it contains cookie c2

1759
01:11:51,280 --> 01:11:56,719
and again authentication will frame so

1760
01:11:54,159 --> 01:11:56,719
next please

1761
01:11:57,440 --> 01:12:01,360
uh what is the source of the program the

1762
01:11:59,760 --> 01:12:03,199
source is it like a sir

1763
01:12:01,360 --> 01:12:06,000
like i say immediate request can be sent

1764
01:12:03,199 --> 01:12:09,519
several times with different content

1765
01:12:06,000 --> 01:12:12,719
and depending on the responder state and

1766
01:12:09,520 --> 01:12:16,000
uh since it is later played into

1767
01:12:12,719 --> 01:12:20,000
into the house below calculation if

1768
01:12:16,000 --> 01:12:22,080
uh like i say meet is completed

1769
01:12:20,000 --> 01:12:23,520
when initiator and responder have

1770
01:12:22,080 --> 01:12:24,320
different view on what was the most

1771
01:12:23,520 --> 01:12:27,600
recent

1772
01:12:24,320 --> 01:12:31,040
i can say need request so in this case

1773
01:12:27,600 --> 01:12:33,760
uh authentication will fail despite

1774
01:12:31,040 --> 01:12:34,640
that all the credentials of the

1775
01:12:33,760 --> 01:12:37,760
initiator

1776
01:12:34,640 --> 01:12:41,199
and responder are correct

1777
01:12:37,760 --> 01:12:44,080
and they if the network is better

1778
01:12:41,199 --> 01:12:45,839
they would complete i could say house

1779
01:12:44,080 --> 01:12:51,360
without any errors

1780
01:12:45,840 --> 01:12:54,640
so next please

1781
01:12:51,360 --> 01:12:57,440
so what is similarity of this problem

1782
01:12:54,640 --> 01:12:58,239
well uh from the first on the first

1783
01:12:57,440 --> 01:13:01,360
glance

1784
01:12:58,239 --> 01:13:04,480
there are a lot of preconditions so

1785
01:13:01,360 --> 01:13:07,120
network must be really bad with high

1786
01:13:04,480 --> 01:13:10,799
probability of packet loss in delay

1787
01:13:07,120 --> 01:13:12,960
and responder state must be

1788
01:13:10,800 --> 01:13:14,960
changed must be changing quite

1789
01:13:12,960 --> 01:13:16,880
frequently for this to happen

1790
01:13:14,960 --> 01:13:19,360
either changing cookie generation secret

1791
01:13:16,880 --> 01:13:21,360
or changing response between the

1792
01:13:19,360 --> 01:13:23,440
responders mindset whether it is under

1793
01:13:21,360 --> 01:13:25,679
attack or not under attack

1794
01:13:23,440 --> 01:13:27,040
so it it it's probably it's rare in

1795
01:13:25,679 --> 01:13:30,560
normal conditions

1796
01:13:27,040 --> 01:13:33,600
but we run into this issue during a

1797
01:13:30,560 --> 01:13:35,920
stress test extra steps and from

1798
01:13:33,600 --> 01:13:37,840
our observation it was up to a few

1799
01:13:35,920 --> 01:13:39,840
percent up to five percent depending on

1800
01:13:37,840 --> 01:13:43,040
the network and the reported

1801
01:13:39,840 --> 01:13:46,960
offices that failed due to this problem

1802
01:13:43,040 --> 01:13:50,400
and the the worst thing that it's

1803
01:13:46,960 --> 01:13:52,880
there diagnostics is absolutely

1804
01:13:50,400 --> 01:13:55,759
unclear for the customers because they

1805
01:13:52,880 --> 01:13:58,239
see that authentication failed and they

1806
01:13:55,760 --> 01:14:00,239
started checking their certificates and

1807
01:13:58,239 --> 01:14:03,280
sharing keys and everything is correct

1808
01:14:00,239 --> 01:14:05,199
but there are messages that

1809
01:14:03,280 --> 01:14:08,639
authentication is available

1810
01:14:05,199 --> 01:14:11,199
and i think that it's a protocol for

1811
01:14:08,640 --> 01:14:11,199
next please

1812
01:14:13,120 --> 01:14:20,239
and so what's the proposed solution

1813
01:14:16,800 --> 01:14:23,600
uh i think that uh we can

1814
01:14:20,239 --> 01:14:26,639
work around this situation by excluding

1815
01:14:23,600 --> 01:14:28,640
cookie uh into from there i can say

1816
01:14:26,640 --> 01:14:30,239
i can say you need request message if it

1817
01:14:28,640 --> 01:14:33,360
is present

1818
01:14:30,239 --> 01:14:36,559
so uh every

1819
01:14:33,360 --> 01:14:39,679
every functionality that is

1820
01:14:36,560 --> 01:14:43,040
tied to cookie like

1821
01:14:39,679 --> 01:14:44,960
in technology token will be retained

1822
01:14:43,040 --> 01:14:47,040
but it is not fed into the house

1823
01:14:44,960 --> 01:14:50,159
followed compilation

1824
01:14:47,040 --> 01:14:50,159
and uh next please

1825
01:14:52,000 --> 01:14:59,920
so how this can how this can look

1826
01:14:56,080 --> 01:15:02,480
like uh the shelter sends uh

1827
01:14:59,920 --> 01:15:04,080
like i said in each request message a

1828
01:15:02,480 --> 01:15:06,639
responder that supports

1829
01:15:04,080 --> 01:15:09,120
this revised cookie processor includes

1830
01:15:06,640 --> 01:15:11,760
cookie notification containing cookie

1831
01:15:09,120 --> 01:15:13,679
and an empty revised cookie notification

1832
01:15:11,760 --> 01:15:16,640
just to indicate that it supports

1833
01:15:13,679 --> 01:15:18,400
this extension if uh initiator doesn't

1834
01:15:16,640 --> 01:15:20,320
support this extension it will

1835
01:15:18,400 --> 01:15:21,519
respond as usual it will ignore a

1836
01:15:20,320 --> 01:15:24,400
revised cookie and

1837
01:15:21,520 --> 01:15:25,520
everything will work or doesn't work as

1838
01:15:24,400 --> 01:15:29,040
as it currently

1839
01:15:25,520 --> 01:15:29,840
happens but if initiator also supports

1840
01:15:29,040 --> 01:15:32,880
this extension

1841
01:15:29,840 --> 01:15:34,640
it will place a cookie into the

1842
01:15:32,880 --> 01:15:36,719
revised cookie into the new revised

1843
01:15:34,640 --> 01:15:40,400
cookie notification

1844
01:15:36,719 --> 01:15:42,400
in uh recent uh request message

1845
01:15:40,400 --> 01:15:43,679
so this will indicate this one

1846
01:15:42,400 --> 01:15:45,360
indication for the responders that

1847
01:15:43,679 --> 01:15:47,760
respond to that initiator also support

1848
01:15:45,360 --> 01:15:53,040
this extension

1849
01:15:47,760 --> 01:15:56,480
ah so next please

1850
01:15:53,040 --> 01:15:58,080
so if most peers agrees

1851
01:15:56,480 --> 01:16:00,159
upon using this extension then the

1852
01:15:58,080 --> 01:16:03,440
cookie procession is changing

1853
01:16:00,159 --> 01:16:06,960
so no change in cookie functionality so

1854
01:16:03,440 --> 01:16:08,159
the very first thing that uh responder

1855
01:16:06,960 --> 01:16:10,719
must do is

1856
01:16:08,159 --> 01:16:11,599
if the message contains revised cookie

1857
01:16:10,719 --> 01:16:14,480
notification

1858
01:16:11,600 --> 01:16:15,280
is to check if the if the cookie data is

1859
01:16:14,480 --> 01:16:18,080
well it

1860
01:16:15,280 --> 01:16:18,080
correct and

1861
01:16:18,800 --> 01:16:22,080
if it if it doesn't it behaves exactly

1862
01:16:21,760 --> 01:16:27,360
as

1863
01:16:22,080 --> 01:16:30,400
uh requires rfc 72 1997 and 98

1864
01:16:27,360 --> 01:16:34,799
sorry 96 high crito and

1865
01:16:30,400 --> 01:16:37,199
uh requested nothing uh probably

1866
01:16:34,800 --> 01:16:38,800
in most cases it requires another cookie

1867
01:16:37,199 --> 01:16:41,199
uh what what is change

1868
01:16:38,800 --> 01:16:42,159
what is the change the change is into in

1869
01:16:41,199 --> 01:16:45,280
the output

1870
01:16:42,159 --> 01:16:48,879
calculation so it is calculated

1871
01:16:45,280 --> 01:16:52,400
uh according to the

1872
01:16:48,880 --> 01:16:56,000
rfc uh 7996

1873
01:16:52,400 --> 01:16:57,839
like initiators assigned tabs is a real

1874
01:16:56,000 --> 01:17:01,440
message one and one's

1875
01:16:57,840 --> 01:17:04,080
our data and marked id for initiate

1876
01:17:01,440 --> 01:17:05,040
so the change is that real message one

1877
01:17:04,080 --> 01:17:08,320
is

1878
01:17:05,040 --> 01:17:11,519
uh modified before

1879
01:17:08,320 --> 01:17:13,440
uh using is this formula so if revised

1880
01:17:11,520 --> 01:17:16,080
cookie notified below it is present

1881
01:17:13,440 --> 01:17:16,480
in real message one so it is removed as

1882
01:17:16,080 --> 01:17:19,600
if

1883
01:17:16,480 --> 01:17:22,480
as if it it wasn't there

1884
01:17:19,600 --> 01:17:22,480
so the next place

1885
01:17:23,920 --> 01:17:30,400
this is how it is done so you can see

1886
01:17:27,120 --> 01:17:30,960
that on the left that's a message that

1887
01:17:30,400 --> 01:17:34,159
wasn't

1888
01:17:30,960 --> 01:17:36,400
uh really received a real message one

1889
01:17:34,159 --> 01:17:37,199
so uh revised cookie notification is

1890
01:17:36,400 --> 01:17:39,599
removed

1891
01:17:37,199 --> 01:17:40,559
and two fields are updated next below

1892
01:17:39,600 --> 01:17:43,760
the niketa

1893
01:17:40,560 --> 01:17:46,640
and message lane a very simple update

1894
01:17:43,760 --> 01:17:48,000
obviously for this field so is this uh

1895
01:17:46,640 --> 01:17:51,360
updated message is spread

1896
01:17:48,000 --> 01:17:56,800
into the house below calculation

1897
01:17:51,360 --> 01:17:56,799
so next please so that's all

1898
01:17:56,840 --> 01:18:01,520
so our questions and easiest problem was

1899
01:17:59,920 --> 01:18:05,199
to address

1900
01:18:01,520 --> 01:18:13,760
and is this approach reasonable and

1901
01:18:05,199 --> 01:18:17,120
what about adoption

1902
01:18:13,760 --> 01:18:17,120
paul go ahead

1903
01:18:17,360 --> 01:18:21,759
i had a question so if you initiate if

1904
01:18:20,239 --> 01:18:25,519
the client initiates

1905
01:18:21,760 --> 01:18:28,080
i can say in it and then it um

1906
01:18:25,520 --> 01:18:29,520
it it doesn't get a response it tries

1907
01:18:28,080 --> 01:18:32,080
again and then eventually

1908
01:18:29,520 --> 01:18:33,280
um it will abort the exchange and try a

1909
01:18:32,080 --> 01:18:36,159
new exchange

1910
01:18:33,280 --> 01:18:39,120
it will likely create a new ke payload

1911
01:18:36,159 --> 01:18:42,719
for that new ike essay in it

1912
01:18:39,120 --> 01:18:46,640
yes so then

1913
01:18:42,719 --> 01:18:50,640
in case it's not it's not the case again

1914
01:18:46,640 --> 01:18:53,679
that where we're considering here

1915
01:18:50,640 --> 01:18:57,040
it's just uh well here

1916
01:18:53,679 --> 01:18:58,320
client doesn't uh turned out so that it

1917
01:18:57,040 --> 01:19:02,719
completely

1918
01:18:58,320 --> 01:19:02,719
uh well right you know

1919
01:19:04,000 --> 01:19:07,040
the case you're fixing is the

1920
01:19:05,280 --> 01:19:08,559
re-transmit case right where it's free

1921
01:19:07,040 --> 01:19:11,519
transfers mid case

1922
01:19:08,560 --> 01:19:12,880
exactly but but it's not fixing where

1923
01:19:11,520 --> 01:19:14,800
the client restarts

1924
01:19:12,880 --> 01:19:16,480
which if you you're talking about so

1925
01:19:14,800 --> 01:19:19,920
many seconds of delay

1926
01:19:16,480 --> 01:19:22,718
for this to happen like you know i think

1927
01:19:19,920 --> 01:19:24,560
like things like iphones stop after 10

1928
01:19:22,719 --> 01:19:26,960
seconds and do a new one

1929
01:19:24,560 --> 01:19:28,239
so do you really do you really hit this

1930
01:19:26,960 --> 01:19:29,840
case or not

1931
01:19:28,239 --> 01:19:32,159
if you restart then you will have the

1932
01:19:29,840 --> 01:19:34,159
different spi's yeah so

1933
01:19:32,159 --> 01:19:35,199
it's different different type spi is

1934
01:19:34,159 --> 01:19:38,480
different to say

1935
01:19:35,199 --> 01:19:41,120
so it's it will be different we can see

1936
01:19:38,480 --> 01:19:44,159
i consider only the case when

1937
01:19:41,120 --> 01:19:47,360
well uh initiated first

1938
01:19:44,159 --> 01:19:50,320
sends uh initial i can say request if

1939
01:19:47,360 --> 01:19:50,880
response doesn't appear within say one

1940
01:19:50,320 --> 01:19:53,440
second

1941
01:19:50,880 --> 01:19:55,920
it sends it initially initial request

1942
01:19:53,440 --> 01:19:58,799
just just exactly as it is

1943
01:19:55,920 --> 01:19:59,920
and uh after another second it resets it

1944
01:19:58,800 --> 01:20:03,120
again

1945
01:19:59,920 --> 01:20:04,880
and it's it's repeated a few times

1946
01:20:03,120 --> 01:20:07,920
before timed out

1947
01:20:04,880 --> 01:20:13,760
and starting a new completely new

1948
01:20:07,920 --> 01:20:13,760
i can say so it's just a transmission

1949
01:20:14,239 --> 01:20:19,519
so if it doesn't receive a response you

1950
01:20:16,400 --> 01:20:22,480
resent your request

1951
01:20:19,520 --> 01:20:23,360
right okay yeah so i i think i'm a

1952
01:20:22,480 --> 01:20:25,839
little bit

1953
01:20:23,360 --> 01:20:26,400
in agreement with with joaf on on the

1954
01:20:25,840 --> 01:20:28,719
chat

1955
01:20:26,400 --> 01:20:30,480
where he's like is this case worth

1956
01:20:28,719 --> 01:20:32,159
fixing because you're already assuming

1957
01:20:30,480 --> 01:20:33,440
that there's so many packet loss in such

1958
01:20:32,159 --> 01:20:35,519
slow network

1959
01:20:33,440 --> 01:20:36,960
even if you get a tunnel up what what's

1960
01:20:35,520 --> 01:20:38,880
left to do with it it's going to be

1961
01:20:36,960 --> 01:20:41,920
unusable

1962
01:20:38,880 --> 01:20:46,159
well i don't know

1963
01:20:41,920 --> 01:20:49,280
again if it depends

1964
01:20:46,159 --> 01:20:51,440
we encourage we didn't encounter

1965
01:20:49,280 --> 01:20:52,880
this problem in stress test of course

1966
01:20:51,440 --> 01:20:56,159
it's stress test

1967
01:20:52,880 --> 01:20:57,040
it was uh about uh several thousand or

1968
01:20:56,159 --> 01:21:00,239
ten thousand

1969
01:20:57,040 --> 01:21:03,120
of eye connections that simultaneously

1970
01:21:00,239 --> 01:21:05,360
i clients uh not data type clients but

1971
01:21:03,120 --> 01:21:07,920
uh emulated like clients that

1972
01:21:05,360 --> 01:21:08,480
simultaneously at the same time going to

1973
01:21:07,920 --> 01:21:11,760
the

1974
01:21:08,480 --> 01:21:13,199
respondent and the network was so

1975
01:21:11,760 --> 01:21:15,920
simulated was

1976
01:21:13,199 --> 01:21:18,000
especially related but not very good

1977
01:21:15,920 --> 01:21:19,120
network conditions with long delays and

1978
01:21:18,000 --> 01:21:20,880
packet loss

1979
01:21:19,120 --> 01:21:22,960
and we didn't count as a problem in

1980
01:21:20,880 --> 01:21:25,600
these conditions i understand that

1981
01:21:22,960 --> 01:21:26,880
in real life it is very rare so that

1982
01:21:25,600 --> 01:21:31,199
thousands of

1983
01:21:26,880 --> 01:21:31,199
initiators and attack

1984
01:21:31,360 --> 01:21:34,559
single responding with a great network

1985
01:21:33,920 --> 01:21:39,040
but

1986
01:21:34,560 --> 01:21:40,159
well my my reason for this um

1987
01:21:39,040 --> 01:21:42,880
[Music]

1988
01:21:40,159 --> 01:21:43,280
to this draft is that from my point of

1989
01:21:42,880 --> 01:21:46,320
view

1990
01:21:43,280 --> 01:21:49,920
it's it it's definitely a protocol flow

1991
01:21:46,320 --> 01:21:53,120
so if you protocol ended up with uh

1992
01:21:49,920 --> 01:21:56,639
timed out or i don't know or

1993
01:21:53,120 --> 01:21:58,880
for example temperate message

1994
01:21:56,639 --> 01:22:00,320
but it's ended up with authentication

1995
01:21:58,880 --> 01:22:04,400
failed a customer

1996
01:22:00,320 --> 01:22:05,759
is it's it's very it's very unusual

1997
01:22:04,400 --> 01:22:07,839
what what's what's happened my

1998
01:22:05,760 --> 01:22:10,159
certificate is okay

1999
01:22:07,840 --> 01:22:11,520
my shared key is okay the authentication

2000
01:22:10,159 --> 01:22:14,638
failed

2001
01:22:11,520 --> 01:22:17,760
so if uh timed out is is is okay

2002
01:22:14,639 --> 01:22:21,520
it's it's a metal condition

2003
01:22:17,760 --> 01:22:24,239
uh temperate message so by the acme

2004
01:22:21,520 --> 01:22:25,360
but actually check is also a key samsung

2005
01:22:24,239 --> 01:22:28,159
problem with network

2006
01:22:25,360 --> 01:22:29,120
but authentication free it's something

2007
01:22:28,159 --> 01:22:32,000
function

2008
01:22:29,120 --> 01:22:34,000
problem with my certificate and that is

2009
01:22:32,000 --> 01:22:37,760
for customer it is very

2010
01:22:34,000 --> 01:22:40,239
annoying and it's very i don't know

2011
01:22:37,760 --> 01:22:41,440
it's not a good thing particular

2012
01:22:40,239 --> 01:22:44,638
reaction must be different

2013
01:22:41,440 --> 01:22:47,040
in this case sure and one

2014
01:22:44,639 --> 01:22:49,440
other minor suggestion which i'm not

2015
01:22:47,040 --> 01:22:51,920
sure if it's worse or better

2016
01:22:49,440 --> 01:22:53,919
instead of having to notify and i can

2017
01:22:51,920 --> 01:22:56,159
say in it you could also of course

2018
01:22:53,920 --> 01:22:57,760
encode it as part of the cookie and say

2019
01:22:56,159 --> 01:22:59,440
like if the cookie has

2020
01:22:57,760 --> 01:23:00,960
starts with this string then you can do

2021
01:22:59,440 --> 01:23:01,839
something with it too

2022
01:23:00,960 --> 01:23:03,760
and you don't have to send a

2023
01:23:01,840 --> 01:23:05,360
notification but i don't know if it's

2024
01:23:03,760 --> 01:23:08,080
worse or not

2025
01:23:05,360 --> 01:23:08,400
i i thought about this but i decided

2026
01:23:08,080 --> 01:23:13,519
that

2027
01:23:08,400 --> 01:23:13,519
it's more heck than to use and notify

2028
01:23:15,600 --> 01:23:19,199
compatible because somebody might be

2029
01:23:17,199 --> 01:23:22,559
using exactly that's beginning of the

2030
01:23:19,199 --> 01:23:22,559
cookie that you're sending

2031
01:23:23,199 --> 01:23:28,080
if you call it revised cookie string or

2032
01:23:25,760 --> 01:23:28,080
something

2033
01:23:32,239 --> 01:23:35,839
it's a queue

2034
01:23:39,520 --> 01:23:43,760
scotland i guess our oversight actually

2035
01:23:46,840 --> 01:23:49,840
yeah

2036
01:23:57,920 --> 01:24:03,840
so scott you can just unmute yourself

2037
01:23:59,760 --> 01:24:03,840
and start talking

2038
01:24:08,000 --> 01:24:10,560
or not

2039
01:24:13,360 --> 01:24:17,440
okay i was in the queue to channel

2040
01:24:15,600 --> 01:24:19,679
scott's message from the

2041
01:24:17,440 --> 01:24:22,159
driver room uh wouldn't having the

2042
01:24:19,679 --> 01:24:23,840
implementation select the fresh ike spi

2043
01:24:22,159 --> 01:24:25,759
when it changes cookies solve this

2044
01:24:23,840 --> 01:24:27,199
problem without the need for protocol

2045
01:24:25,760 --> 01:24:31,840
change

2046
01:24:27,199 --> 01:24:34,638
uh well

2047
01:24:31,840 --> 01:24:35,280
actually it is responder who changes who

2048
01:24:34,639 --> 01:24:38,880
who

2049
01:24:35,280 --> 01:24:40,719
generates a new cookie so responder

2050
01:24:38,880 --> 01:24:41,920
just responds to the request and it

2051
01:24:40,719 --> 01:24:45,120
cannot uh

2052
01:24:41,920 --> 01:24:48,480
change i conspire and for

2053
01:24:45,120 --> 01:24:50,320
initiator it's it's it's quite

2054
01:24:48,480 --> 01:24:52,320
possible to receive several different

2055
01:24:50,320 --> 01:24:55,120
cookies because

2056
01:24:52,320 --> 01:24:55,679
it's in the draft uh sorry it's in the

2057
01:24:55,120 --> 01:24:58,239
rfc

2058
01:24:55,679 --> 01:25:00,639
i critique it's quite possible situation

2059
01:24:58,239 --> 01:25:02,559
when uh initiator receives a first

2060
01:25:00,639 --> 01:25:04,320
cookie request with cookie one and then

2061
01:25:02,560 --> 01:25:07,600
cookie request with cookie two

2062
01:25:04,320 --> 01:25:09,920
and it just resends it uh because it's a

2063
01:25:07,600 --> 01:25:12,639
big block for the initiative it's just

2064
01:25:09,920 --> 01:25:12,639
sent us back

2065
01:25:13,199 --> 01:25:16,719
actually i think in this case where we

2066
01:25:15,280 --> 01:25:18,400
actually have a cookie and

2067
01:25:16,719 --> 01:25:19,760
you change the secret i think most of

2068
01:25:18,400 --> 01:25:20,559
the case is actually the responder

2069
01:25:19,760 --> 01:25:23,920
cookie

2070
01:25:20,560 --> 01:25:27,440
because if this is the stateless thing

2071
01:25:23,920 --> 01:25:28,000
the responder spi are going to be

2072
01:25:27,440 --> 01:25:30,960
different

2073
01:25:28,000 --> 01:25:32,480
because this is sending is spi uh

2074
01:25:30,960 --> 01:25:34,960
responded spiv zero

2075
01:25:32,480 --> 01:25:36,400
and he's responding with some spi so

2076
01:25:34,960 --> 01:25:38,239
this case actually would be actually

2077
01:25:36,400 --> 01:25:42,159
detected by that because

2078
01:25:38,239 --> 01:25:44,080
whatever spi he's going to be using here

2079
01:25:42,159 --> 01:25:45,199
is going to be matching whatever cookie

2080
01:25:44,080 --> 01:25:47,600
he actually sent that

2081
01:25:45,199 --> 01:25:49,360
actually i think the cookie usually has

2082
01:25:47,600 --> 01:25:55,840
10 spi

2083
01:25:49,360 --> 01:25:55,839
extras in it there so it actually is

2084
01:26:06,159 --> 01:26:09,839
here when we get this in actually

2085
01:26:08,320 --> 01:26:12,000
actually yeah so we actually

2086
01:26:09,840 --> 01:26:15,040
create the state here when we actually

2087
01:26:12,000 --> 01:26:15,040
get this one

2088
01:26:15,520 --> 01:26:20,400
and uh yeah actually yeah it's still

2089
01:26:18,880 --> 01:26:23,840
it's still a problem yeah i don't think

2090
01:26:20,400 --> 01:26:23,839
it actually solves the problem

2091
01:26:28,239 --> 01:26:32,638
there has been comments about a chopper

2092
01:26:30,400 --> 01:26:34,879
that devised cookies probably

2093
01:26:32,639 --> 01:26:36,000
hopefully only tested you know

2094
01:26:34,880 --> 01:26:41,120
placeholder not a real

2095
01:26:36,000 --> 01:26:41,120
name but anyway so

2096
01:26:42,960 --> 01:26:48,960
so this is um this is not in

2097
01:26:46,960 --> 01:26:50,080
our charter but this actually i think

2098
01:26:48,960 --> 01:26:52,719
this is a

2099
01:26:50,080 --> 01:26:55,040
small change in in in the sunset some

2100
01:26:52,719 --> 01:26:55,040
sense

2101
01:26:57,679 --> 01:27:00,719
so

2102
01:26:57,990 --> 01:27:02,480
[Music]

2103
01:27:00,719 --> 01:27:04,000
we had had long discussion about this

2104
01:27:02,480 --> 01:27:05,919
earlier uh when

2105
01:27:04,000 --> 01:27:07,520
we did this problem was found out and

2106
01:27:05,920 --> 01:27:07,920
we've discussed about what to do with

2107
01:27:07,520 --> 01:27:09,840
that

2108
01:27:07,920 --> 01:27:12,880
i had a other proposal and i think it's

2109
01:27:09,840 --> 01:27:12,880
actually about the same

2110
01:27:13,760 --> 01:27:18,800
so next question is what to do with that

2111
01:27:16,719 --> 01:27:21,040
this document

2112
01:27:18,800 --> 01:27:22,960
and this does this actually go into this

2113
01:27:21,040 --> 01:27:23,519
minor modifications or do we actually

2114
01:27:22,960 --> 01:27:26,080
need to

2115
01:27:23,520 --> 01:27:28,480
uh recharge it for this so that's for

2116
01:27:26,080 --> 01:27:28,480
the band

2117
01:27:30,960 --> 01:27:34,159
right i think that this would fit into

2118
01:27:33,679 --> 01:27:37,440
the

2119
01:27:34,159 --> 01:27:40,080
general maintenance uh

2120
01:27:37,440 --> 01:27:42,799
small topic sorts of things i don't feel

2121
01:27:40,080 --> 01:27:46,159
like we need to recharter to do this

2122
01:27:42,800 --> 01:27:46,560
all right good then we have to discuss

2123
01:27:46,159 --> 01:27:49,199
about

2124
01:27:46,560 --> 01:27:50,400
so i will probably uh take it to the

2125
01:27:49,199 --> 01:27:52,239
list and and then

2126
01:27:50,400 --> 01:27:53,679
if the list is uh agreeing that we

2127
01:27:52,239 --> 01:27:54,879
should actually work on this then we

2128
01:27:53,679 --> 01:27:56,880
should you know

2129
01:27:54,880 --> 01:27:58,560
start probably you know working on this

2130
01:27:56,880 --> 01:28:00,480
but i think we want to verify that on

2131
01:27:58,560 --> 01:28:05,280
the list also

2132
01:28:00,480 --> 01:28:05,280
all right so the next one is not valerie

2133
01:28:07,600 --> 01:28:10,000
and

2134
01:28:11,520 --> 01:28:15,920
fall go ahead okay um

2135
01:28:14,680 --> 01:28:19,040
[Music]

2136
01:28:15,920 --> 01:28:21,040
so this is a work i'm mostly done by by

2137
01:28:19,040 --> 01:28:26,159
stephen glasser and anthony anthony

2138
01:28:21,040 --> 01:28:26,159
um so uh next slide

2139
01:28:26,960 --> 01:28:31,600
so that the current the current problem

2140
01:28:29,360 --> 01:28:34,000
that we are trying to fix is that

2141
01:28:31,600 --> 01:28:36,560
um an ipsec assay is typically bound to

2142
01:28:34,000 --> 01:28:38,000
only one cpu and so when you have a big

2143
01:28:36,560 --> 01:28:39,920
pipe and you do

2144
01:28:38,000 --> 01:28:42,639
like you know 10 gigs or more over that

2145
01:28:39,920 --> 01:28:45,280
pipe and you enable ipsec and suddenly

2146
01:28:42,639 --> 01:28:47,440
your performance drops dramatically to

2147
01:28:45,280 --> 01:28:49,440
you know three four gig or something

2148
01:28:47,440 --> 01:28:51,360
um and so if you got a nick that can

2149
01:28:49,440 --> 01:28:52,719
even do more than 10 gig then you know

2150
01:28:51,360 --> 01:28:53,920
you see a significant drop in

2151
01:28:52,719 --> 01:28:55,520
performance

2152
01:28:53,920 --> 01:28:56,960
so what we really want to do is see if

2153
01:28:55,520 --> 01:29:00,080
you can use multiple

2154
01:28:56,960 --> 01:29:03,440
cpus in a way that makes sense

2155
01:29:00,080 --> 01:29:06,080
uh performance wise um additionally

2156
01:29:03,440 --> 01:29:08,799
if you do qos services then you would

2157
01:29:06,080 --> 01:29:12,480
need different ipsec assays

2158
01:29:08,800 --> 01:29:13,920
to uh to to to get the right traffic on

2159
01:29:12,480 --> 01:29:16,799
the right sa

2160
01:29:13,920 --> 01:29:19,040
um and also if you do more than one

2161
01:29:16,800 --> 01:29:20,480
ipsec essay so if you do one ipsec say

2162
01:29:19,040 --> 01:29:22,719
per cpu

2163
01:29:20,480 --> 01:29:24,480
um then you run into issues that if you

2164
01:29:22,719 --> 01:29:26,480
if you have multiple ip seconds with the

2165
01:29:24,480 --> 01:29:28,159
exact same traffic selectors that some

2166
01:29:26,480 --> 01:29:28,959
implementations might delete the old

2167
01:29:28,159 --> 01:29:30,799
ones

2168
01:29:28,960 --> 01:29:32,320
because they they think the duplicate

2169
01:29:30,800 --> 01:29:33,840
that means that you should delete the

2170
01:29:32,320 --> 01:29:38,000
old one

2171
01:29:33,840 --> 01:29:39,199
so um and and also we wanted to do some

2172
01:29:38,000 --> 01:29:41,840
negotiation where

2173
01:29:39,199 --> 01:29:44,719
um we basically say how many of these

2174
01:29:41,840 --> 01:29:46,960
parallel ipsec essays we want to use

2175
01:29:44,719 --> 01:29:48,639
uh so that we uh so both parties know

2176
01:29:46,960 --> 01:29:50,080
beforehand and don't try to set up too

2177
01:29:48,639 --> 01:29:52,560
many of them

2178
01:29:50,080 --> 01:29:53,920
um so so that's basically what we what

2179
01:29:52,560 --> 01:29:57,280
we set out to do

2180
01:29:53,920 --> 01:29:57,280
um so next slide

2181
01:29:57,840 --> 01:30:01,600
um so so one thing that needed some more

2182
01:30:00,719 --> 01:30:04,639
clarification

2183
01:30:01,600 --> 01:30:06,639
in in in how to handle ipsec essays that

2184
01:30:04,639 --> 01:30:08,080
have identical traffic selectors and

2185
01:30:06,639 --> 01:30:09,760
to make sure that people just don't

2186
01:30:08,080 --> 01:30:13,199
delete the old ones and

2187
01:30:09,760 --> 01:30:16,000
assuming that they have been replaced

2188
01:30:13,199 --> 01:30:18,239
and we are suggesting uh notify payloads

2189
01:30:16,000 --> 01:30:20,159
to convey some information about these

2190
01:30:18,239 --> 01:30:21,280
duplicate ipsec essays that we're going

2191
01:30:20,159 --> 01:30:23,280
to install

2192
01:30:21,280 --> 01:30:24,880
so one of them is the num q1 which is

2193
01:30:23,280 --> 01:30:27,519
basically telling telling

2194
01:30:24,880 --> 01:30:28,239
or negotiating between the peers how

2195
01:30:27,520 --> 01:30:30,239
many

2196
01:30:28,239 --> 01:30:32,320
duplicate ipsec assays you want and then

2197
01:30:30,239 --> 01:30:32,959
you can put you know one on each cpu and

2198
01:30:32,320 --> 01:30:36,639
keep them

2199
01:30:32,960 --> 01:30:38,159
sticky on that cpu um and we have a q

2200
01:30:36,639 --> 01:30:40,960
info uh notify

2201
01:30:38,159 --> 01:30:42,400
um for the qos case where we think that

2202
01:30:40,960 --> 01:30:43,360
you know some information needs to be

2203
01:30:42,400 --> 01:30:45,920
conveyed like

2204
01:30:43,360 --> 01:30:48,159
this is the ipsec safe for this specific

2205
01:30:45,920 --> 01:30:51,040
quality of service

2206
01:30:48,159 --> 01:30:51,040
so next slide

2207
01:30:53,280 --> 01:31:00,080
so there's an implementation in linux

2208
01:30:57,120 --> 01:31:01,840
the draft has links to it this was done

2209
01:31:00,080 --> 01:31:05,120
by steven classer

2210
01:31:01,840 --> 01:31:07,600
and this includes like where you can do

2211
01:31:05,120 --> 01:31:08,559
an on-demand acquiring message per cpu

2212
01:31:07,600 --> 01:31:11,040
so you can

2213
01:31:08,560 --> 01:31:12,719
if you have 16 cpus you can you can say

2214
01:31:11,040 --> 01:31:14,639
you can do up to 16

2215
01:31:12,719 --> 01:31:16,000
but if there's only two cpus sending

2216
01:31:14,639 --> 01:31:17,199
traffic over the tunnel you could just

2217
01:31:16,000 --> 01:31:20,320
set up two cpu

2218
01:31:17,199 --> 01:31:21,919
to ipsec essays

2219
01:31:20,320 --> 01:31:23,679
there are some catches there because if

2220
01:31:21,920 --> 01:31:25,600
you do something friends like a ping it

2221
01:31:23,679 --> 01:31:27,600
might you know switch to another cpu and

2222
01:31:25,600 --> 01:31:32,239
then you you end up setting

2223
01:31:27,600 --> 01:31:32,239
more essays than you really need but

2224
01:31:32,639 --> 01:31:36,800
so there's some tuning that might be

2225
01:31:34,639 --> 01:31:38,639
might might work or sometimes it just

2226
01:31:36,800 --> 01:31:40,480
might not work that they are on demand

2227
01:31:38,639 --> 01:31:41,120
and you'll fire most of them up anyway

2228
01:31:40,480 --> 01:31:42,400
but

2229
01:31:41,120 --> 01:31:44,400
we thought it would be good to at least

2230
01:31:42,400 --> 01:31:47,360
have the option to um

2231
01:31:44,400 --> 01:31:49,040
to slowly bring them up on demand then

2232
01:31:47,360 --> 01:31:49,920
there's a libris one on the strong side

2233
01:31:49,040 --> 01:31:52,000
implementation

2234
01:31:49,920 --> 01:31:53,360
anthony is on most of that work so

2235
01:31:52,000 --> 01:31:55,120
they're definitely not

2236
01:31:53,360 --> 01:31:57,679
independent implementations at this

2237
01:31:55,120 --> 01:32:01,199
point i would say

2238
01:31:57,679 --> 01:32:02,159
but they they do prove uh give the proof

2239
01:32:01,199 --> 01:32:05,519
of concept that

2240
01:32:02,159 --> 01:32:08,638
that this is working um

2241
01:32:05,520 --> 01:32:08,639
so next slide

2242
01:32:09,360 --> 01:32:13,519
so this is a benchmark um you can see

2243
01:32:11,520 --> 01:32:16,639
black is the unencrypted traffic like

2244
01:32:13,520 --> 01:32:18,480
depending on how many cpus you use um

2245
01:32:16,639 --> 01:32:20,000
red is basically the universe where we

2246
01:32:18,480 --> 01:32:21,759
live now um if you

2247
01:32:20,000 --> 01:32:23,760
you know you set up one episode saying

2248
01:32:21,760 --> 01:32:27,199
you're limited to you know

2249
01:32:23,760 --> 01:32:28,960
about four gigs of traffic um regardless

2250
01:32:27,199 --> 01:32:30,638
of how many cpus you have

2251
01:32:28,960 --> 01:32:33,360
and if you set up multiple tunnels

2252
01:32:30,639 --> 01:32:35,920
multiple ipsec assays

2253
01:32:33,360 --> 01:32:39,120
per cpu then it basically you know

2254
01:32:35,920 --> 01:32:39,120
climbs up linearly

2255
01:32:39,440 --> 01:32:43,839
so so so this is a big advantage if you

2256
01:32:41,360 --> 01:32:44,480
have like a single ipsec assay to a data

2257
01:32:43,840 --> 01:32:46,080
center

2258
01:32:44,480 --> 01:32:48,480
and you basically want to use something

2259
01:32:46,080 --> 01:32:48,480
like this

2260
01:32:48,560 --> 01:32:51,679
so next slide

2261
01:32:52,800 --> 01:32:57,360
um some issues um that

2262
01:32:55,840 --> 01:32:59,280
you know we could use input of the

2263
01:32:57,360 --> 01:33:02,080
working group for um

2264
01:32:59,280 --> 01:33:03,440
one is there was some talk about how to

2265
01:33:02,080 --> 01:33:06,480
negotiate the exact

2266
01:33:03,440 --> 01:33:09,759
number um that you want to do because

2267
01:33:06,480 --> 01:33:12,718
a cpu is not a really um specific

2268
01:33:09,760 --> 01:33:14,800
measure of computational power um so

2269
01:33:12,719 --> 01:33:15,360
just saying like i have four cpus

2270
01:33:14,800 --> 01:33:17,840
doesn't

2271
01:33:15,360 --> 01:33:18,639
really also tell you how powerful they

2272
01:33:17,840 --> 01:33:20,480
are maybe

2273
01:33:18,639 --> 01:33:22,400
the other end will only do two and you

2274
01:33:20,480 --> 01:33:24,000
know versus the forum on the smaller

2275
01:33:22,400 --> 01:33:27,360
device that's good

2276
01:33:24,000 --> 01:33:29,840
so um so initially um we put in

2277
01:33:27,360 --> 01:33:30,799
the preferred and maximum um and then

2278
01:33:29,840 --> 01:33:34,239
you know um

2279
01:33:30,800 --> 01:33:35,280
they can pick the the highest one that

2280
01:33:34,239 --> 01:33:36,959
fits within the max

2281
01:33:35,280 --> 01:33:40,159
that's the highest preferred one that

2282
01:33:36,960 --> 01:33:40,159
fixed within the max value

2283
01:33:40,800 --> 01:33:43,840
we're also thinking of whether there's

2284
01:33:43,199 --> 01:33:47,440
use in

2285
01:33:43,840 --> 01:33:50,880
signaling on on sort of a cpu id so that

2286
01:33:47,440 --> 01:33:53,040
both ends can sort of keep sync

2287
01:33:50,880 --> 01:33:54,639
about which which cpus to to keep

2288
01:33:53,040 --> 01:33:58,000
something on

2289
01:33:54,639 --> 01:33:59,920
um but that is also conveying some

2290
01:33:58,000 --> 01:34:01,600
internal state of these machines so

2291
01:33:59,920 --> 01:34:03,679
so we're also a little uncomfortable

2292
01:34:01,600 --> 01:34:04,000
doing that so we're not sure if there's

2293
01:34:03,679 --> 01:34:06,880
value

2294
01:34:04,000 --> 01:34:09,199
in doing this or not now for the queue

2295
01:34:06,880 --> 01:34:10,880
info if it's only qos then maybe we

2296
01:34:09,199 --> 01:34:12,400
don't need a subregistry but if

2297
01:34:10,880 --> 01:34:15,120
if this is going to be used for more

2298
01:34:12,400 --> 01:34:16,559
than one type of information then

2299
01:34:15,120 --> 01:34:18,400
probably we should give a way of

2300
01:34:16,560 --> 01:34:20,480
structuring this information so that you

2301
01:34:18,400 --> 01:34:24,320
know we can standardize

2302
01:34:20,480 --> 01:34:26,000
some of this information being exchanged

2303
01:34:24,320 --> 01:34:28,239
there's also some corner cases where

2304
01:34:26,000 --> 01:34:30,560
like vincent if um

2305
01:34:28,239 --> 01:34:31,440
if you if you agreed to eight ipsec

2306
01:34:30,560 --> 01:34:33,520
assays and you

2307
01:34:31,440 --> 01:34:35,678
you've installed seven and both of them

2308
01:34:33,520 --> 01:34:38,480
both sides

2309
01:34:35,679 --> 01:34:39,520
initiate for the final slot then you end

2310
01:34:38,480 --> 01:34:42,239
up with nine

2311
01:34:39,520 --> 01:34:44,080
ipsec assay so should the draft say

2312
01:34:42,239 --> 01:34:46,159
something about that or

2313
01:34:44,080 --> 01:34:47,760
do we leave this as a local

2314
01:34:46,159 --> 01:34:49,519
implementation where maybe

2315
01:34:47,760 --> 01:34:50,960
one end will delete one or maybe they'll

2316
01:34:49,520 --> 01:34:55,440
just leave 9

2317
01:34:50,960 --> 01:34:57,679
running a bigger issue is

2318
01:34:55,440 --> 01:34:59,678
ipsec re-keying because that changes the

2319
01:34:57,679 --> 01:35:02,400
spine numbers and with some of the

2320
01:34:59,679 --> 01:35:04,960
the hardware um support that's being

2321
01:35:02,400 --> 01:35:07,519
used here that might actually change

2322
01:35:04,960 --> 01:35:09,440
uh for instance the cpu that it's bound

2323
01:35:07,520 --> 01:35:11,679
to so it might switch to different cpu

2324
01:35:09,440 --> 01:35:14,159
because its spine number changes

2325
01:35:11,679 --> 01:35:15,920
and so then you you you run into issues

2326
01:35:14,159 --> 01:35:19,199
where

2327
01:35:15,920 --> 01:35:21,840
one cpu is like underutilized and one is

2328
01:35:19,199 --> 01:35:24,879
over utilized

2329
01:35:21,840 --> 01:35:26,400
and then there's also issues with net

2330
01:35:24,880 --> 01:35:27,119
mapping and that mapping is it's the

2331
01:35:26,400 --> 01:35:30,480
same thing

2332
01:35:27,119 --> 01:35:32,320
with rss you um that those gets

2333
01:35:30,480 --> 01:35:34,400
those values are hashed so if the the

2334
01:35:32,320 --> 01:35:36,159
net route in between changes the mapping

2335
01:35:34,400 --> 01:35:37,759
and changes the hash then it might also

2336
01:35:36,159 --> 01:35:40,000
change the affinity

2337
01:35:37,760 --> 01:35:43,840
or the queue where the where this work

2338
01:35:40,000 --> 01:35:43,840
will end up on

2339
01:35:44,000 --> 01:35:47,119
so next slide

2340
01:35:49,440 --> 01:35:55,440
um so some hardware related um

2341
01:35:52,719 --> 01:35:56,320
things that maybe we should or should

2342
01:35:55,440 --> 01:36:00,159
not dive

2343
01:35:56,320 --> 01:36:02,239
into in the draft um so the assumption

2344
01:36:00,159 --> 01:36:04,400
is that you know

2345
01:36:02,239 --> 01:36:06,400
the sender has no issues to pick which

2346
01:36:04,400 --> 01:36:07,839
cpu it will use it's only the receiver

2347
01:36:06,400 --> 01:36:09,599
that needs to distribute the load

2348
01:36:07,840 --> 01:36:10,960
properly

2349
01:36:09,600 --> 01:36:12,880
and that's where that's where the real

2350
01:36:10,960 --> 01:36:14,960
hardware support is needed so

2351
01:36:12,880 --> 01:36:16,159
most network cards these days support

2352
01:36:14,960 --> 01:36:18,560
rss

2353
01:36:16,159 --> 01:36:21,759
um usually the only supporters for udp

2354
01:36:18,560 --> 01:36:23,840
and tcp they don't support it for esp

2355
01:36:21,760 --> 01:36:25,920
even though you can sort of sneak in the

2356
01:36:23,840 --> 01:36:28,159
same offset because the

2357
01:36:25,920 --> 01:36:30,080
um they're using it for basically

2358
01:36:28,159 --> 01:36:32,559
creating a random hash

2359
01:36:30,080 --> 01:36:33,920
and since for esp the spine number

2360
01:36:32,560 --> 01:36:35,520
overlaps with the udp

2361
01:36:33,920 --> 01:36:38,400
port number you can use that too because

2362
01:36:35,520 --> 01:36:38,400
it's also random

2363
01:36:38,880 --> 01:36:42,159
but some some hardware implementations

2364
01:36:40,639 --> 01:36:45,199
now support rss

2365
01:36:42,159 --> 01:36:47,119
natively for the esp protocol and then

2366
01:36:45,199 --> 01:36:50,159
there's also the n-tuple support

2367
01:36:47,119 --> 01:36:52,320
um which is also usually not available

2368
01:36:50,159 --> 01:36:54,159
for for the spy selector to usually also

2369
01:36:52,320 --> 01:36:56,960
only look at the

2370
01:36:54,159 --> 01:36:59,119
the port numbers um and the the source

2371
01:36:56,960 --> 01:37:01,440
and destination ip addresses

2372
01:36:59,119 --> 01:37:02,880
but not go not go deeper into the packet

2373
01:37:01,440 --> 01:37:06,080
to look at the spy

2374
01:37:02,880 --> 01:37:06,960
to select this on so that would be nice

2375
01:37:06,080 --> 01:37:10,000
if it's available

2376
01:37:06,960 --> 01:37:11,840
um but that's usually not the case and

2377
01:37:10,000 --> 01:37:13,679
we see that like like virtual nicks are

2378
01:37:11,840 --> 01:37:15,760
also starting to play in this space and

2379
01:37:13,679 --> 01:37:17,679
trying to aggregate things and

2380
01:37:15,760 --> 01:37:19,280
bind multiple virtual nicks together and

2381
01:37:17,679 --> 01:37:21,040
so they're they're also

2382
01:37:19,280 --> 01:37:25,440
playing in this space where we have sort

2383
01:37:21,040 --> 01:37:30,960
of you know a virtual hardware solutions

2384
01:37:25,440 --> 01:37:30,960
um and next slide

2385
01:37:32,400 --> 01:37:36,960
so so i mean for us this fixes a

2386
01:37:35,199 --> 01:37:38,719
practical problems like we need to bring

2387
01:37:36,960 --> 01:37:40,719
up the performance of uh

2388
01:37:38,719 --> 01:37:42,800
you know of a tunnel between two

2389
01:37:40,719 --> 01:37:44,400
endpoints where you have like you know

2390
01:37:42,800 --> 01:37:46,080
you don't have thousands of essays but

2391
01:37:44,400 --> 01:37:49,040
you only have one of them

2392
01:37:46,080 --> 01:37:51,040
um so this is one way of of solving it

2393
01:37:49,040 --> 01:37:52,400
and so the question is

2394
01:37:51,040 --> 01:37:54,639
does the working group think this is a

2395
01:37:52,400 --> 01:37:56,799
good way of doing it um it

2396
01:37:54,639 --> 01:37:58,800
sort of requires hardly any protocol

2397
01:37:56,800 --> 01:38:00,880
changes just like some

2398
01:37:58,800 --> 01:38:03,679
fine tuning and telling people how to

2399
01:38:00,880 --> 01:38:07,280
deal with duplicate ipsec essays

2400
01:38:03,679 --> 01:38:08,480
um so so we're interested in in both the

2401
01:38:07,280 --> 01:38:10,159
hearing from the working group and

2402
01:38:08,480 --> 01:38:11,119
hearing from hardware vendors to see if

2403
01:38:10,159 --> 01:38:12,799
they're

2404
01:38:11,119 --> 01:38:14,559
if they're looking into this problem too

2405
01:38:12,800 --> 01:38:16,880
and and and

2406
01:38:14,560 --> 01:38:18,800
getting us the right uh the right access

2407
01:38:16,880 --> 01:38:21,520
to the hardware to to start using their

2408
01:38:18,800 --> 01:38:21,520
their hardware

2409
01:38:22,400 --> 01:38:26,000
um and then there's a if you do one more

2410
01:38:24,400 --> 01:38:27,440
slide there's a bonus slide where it

2411
01:38:26,000 --> 01:38:30,960
explains some of the

2412
01:38:27,440 --> 01:38:34,080
current uh linux based commands wherever

2413
01:38:30,960 --> 01:38:37,199
it's doing some of these things

2414
01:38:34,080 --> 01:38:39,360
um so that's

2415
01:38:37,199 --> 01:38:41,360
roughly it um if people have some

2416
01:38:39,360 --> 01:38:44,080
implementation specific questions

2417
01:38:41,360 --> 01:38:47,199
um it should probably be answered by

2418
01:38:44,080 --> 01:38:47,199
stefan or anthony

2419
01:38:56,840 --> 01:39:01,119
um

2420
01:38:58,639 --> 01:39:02,000
uh it's not a question it's a comment i

2421
01:39:01,119 --> 01:39:06,000
think that it's

2422
01:39:02,000 --> 01:39:08,800
a very interesting uh work

2423
01:39:06,000 --> 01:39:12,400
and we discussed with paul and with

2424
01:39:08,800 --> 01:39:12,400
anthony and his technique

2425
01:39:20,239 --> 01:39:25,040
requested to be adopted and so i'm ready

2426
01:39:23,280 --> 01:39:28,719
to review it

2427
01:39:25,040 --> 01:39:32,080
and i think we discussed with paul

2428
01:39:28,719 --> 01:39:33,600
about the generic uh general approach of

2429
01:39:32,080 --> 01:39:34,719
negotiation of these things in

2430
01:39:33,600 --> 01:39:39,119
agriculture

2431
01:39:34,719 --> 01:39:41,840
and i'm glad that so

2432
01:39:39,119 --> 01:39:42,320
the drum didn't go into too much detail

2433
01:39:41,840 --> 01:39:45,600
on the

2434
01:39:42,320 --> 01:39:49,360
hardware and internals

2435
01:39:45,600 --> 01:39:52,960
specifically is i think it's quite

2436
01:39:49,360 --> 01:39:52,960
right my margin of

2437
01:39:53,040 --> 01:39:57,519
not to go into so so that's why i'm

2438
01:39:55,119 --> 01:39:59,199
against cpuid

2439
01:39:57,520 --> 01:40:00,960
well it's probably it should be

2440
01:39:59,199 --> 01:40:02,159
discussed but it's i think it's too

2441
01:40:00,960 --> 01:40:04,400
specific

2442
01:40:02,159 --> 01:40:05,759
but some negotiation must take place and

2443
01:40:04,400 --> 01:40:09,199
so i support the drought

2444
01:40:05,760 --> 01:40:14,480
and will be radiant happy to review it

2445
01:40:09,199 --> 01:40:16,719
and you know participate participate

2446
01:40:14,480 --> 01:40:18,480
yeah we would definitely like like more

2447
01:40:16,719 --> 01:40:20,639
input from people about the discussion

2448
01:40:18,480 --> 01:40:22,559
of like you know things like a cpu id

2449
01:40:20,639 --> 01:40:24,960
like like is there much to be gained or

2450
01:40:22,560 --> 01:40:27,040
is that like local implementation

2451
01:40:24,960 --> 01:40:28,639
details that should not be exposed or

2452
01:40:27,040 --> 01:40:30,000
that has like little value

2453
01:40:28,639 --> 01:40:37,840
that i think that's a good discussion to

2454
01:40:30,000 --> 01:40:37,840
have on the list

2455
01:40:38,400 --> 01:40:42,480
okay next kristen

2456
01:40:45,760 --> 01:40:52,159
hi so this reminds me of the

2457
01:40:48,960 --> 01:40:54,159
new esp uh work uh

2458
01:40:52,159 --> 01:40:55,839
i wonder if this is uh you know came out

2459
01:40:54,159 --> 01:40:58,559
of that

2460
01:40:55,840 --> 01:41:00,800
so no this was actually that it predates

2461
01:40:58,560 --> 01:41:04,719
that actually a number of itfs

2462
01:41:00,800 --> 01:41:07,840
um so so yeah some of it

2463
01:41:04,719 --> 01:41:10,159
can solve similar problems but um

2464
01:41:07,840 --> 01:41:11,199
we found at least that the the the new

2465
01:41:10,159 --> 01:41:13,440
esp work

2466
01:41:11,199 --> 01:41:14,719
is trying to do a lot more a lot of

2467
01:41:13,440 --> 01:41:16,960
different things is trying to do

2468
01:41:14,719 --> 01:41:20,159
multicast and a whole lot of other

2469
01:41:16,960 --> 01:41:22,080
issues that are that we fear takes

2470
01:41:20,159 --> 01:41:23,599
like will take a lot more time to get

2471
01:41:22,080 --> 01:41:25,519
into a further stage than

2472
01:41:23,600 --> 01:41:26,960
just getting this out and this is like a

2473
01:41:25,520 --> 01:41:28,320
concrete problem right like

2474
01:41:26,960 --> 01:41:29,760
people have a connection to a data

2475
01:41:28,320 --> 01:41:30,960
center they they want to encrypt it and

2476
01:41:29,760 --> 01:41:33,199
they can't

2477
01:41:30,960 --> 01:41:35,199
so so yeah i'm hoping to do something

2478
01:41:33,199 --> 01:41:36,638
quickly and smaller instead of doing

2479
01:41:35,199 --> 01:41:40,000
waiting for

2480
01:41:36,639 --> 01:41:41,760
espv4 to come out yeah it

2481
01:41:40,000 --> 01:41:44,960
definitely seems easier to get through

2482
01:41:41,760 --> 01:41:47,920
um i just as an implementation point

2483
01:41:44,960 --> 01:41:49,600
um even without like an rss support you

2484
01:41:47,920 --> 01:41:50,639
know just having been in like vpp or

2485
01:41:49,600 --> 01:41:53,119
whatever

2486
01:41:50,639 --> 01:41:55,840
um you know if i'm rece if i'm receiving

2487
01:41:53,119 --> 01:41:59,519
it i can fan out based on the spi

2488
01:41:55,840 --> 01:42:02,960
uh even on one cpu right uh i can do 40

2489
01:41:59,520 --> 01:42:05,679
i can do 40 gig uh on a single

2490
01:42:02,960 --> 01:42:07,040
core if all i'm doing is looking at you

2491
01:42:05,679 --> 01:42:09,199
know the spi and then immediately

2492
01:42:07,040 --> 01:42:11,280
handing it off to another core

2493
01:42:09,199 --> 01:42:12,799
to do decrypt and all that right so this

2494
01:42:11,280 --> 01:42:15,440
is even useful

2495
01:42:12,800 --> 01:42:17,040
i think out without hardware support i

2496
01:42:15,440 --> 01:42:18,799
think you can probably get up to you

2497
01:42:17,040 --> 01:42:20,239
know 40 gig

2498
01:42:18,800 --> 01:42:21,840
just you know doing the initial

2499
01:42:20,239 --> 01:42:29,839
filtering in the fbi

2500
01:42:21,840 --> 01:42:29,840
so i think this is good good stuff

2501
01:42:30,960 --> 01:42:35,920
okay then i had some comments about

2502
01:42:34,000 --> 01:42:38,719
actually i was asking i understand the

2503
01:42:35,920 --> 01:42:41,600
new preferred max is probably per ike

2504
01:42:38,719 --> 01:42:44,080
configuration right

2505
01:42:41,600 --> 01:42:45,760
ipsec because you you you could have

2506
01:42:44,080 --> 01:42:49,040
multiple tunnels

2507
01:42:45,760 --> 01:42:49,440
where you want um 16 spread like let's

2508
01:42:49,040 --> 01:42:51,280
say

2509
01:42:49,440 --> 01:42:52,960
you've got your data center tunnel and a

2510
01:42:51,280 --> 01:42:55,119
management tunnel you don't want your

2511
01:42:52,960 --> 01:42:57,760
management panel to have 16 either

2512
01:42:55,119 --> 01:42:59,920
if your production one has one okay so

2513
01:42:57,760 --> 01:42:59,920
okay

2514
01:43:01,679 --> 01:43:05,199
yeah the one of the questions that i

2515
01:43:04,159 --> 01:43:06,719
have there are that

2516
01:43:05,199 --> 01:43:08,320
i would actually assume that you're

2517
01:43:06,719 --> 01:43:09,520
actually going to have you know to

2518
01:43:08,320 --> 01:43:11,280
prefer to be like

2519
01:43:09,520 --> 01:43:12,719
three times what you have a cpus

2520
01:43:11,280 --> 01:43:14,480
especially because i mean

2521
01:43:12,719 --> 01:43:17,199
that will actually solve lots of the

2522
01:43:14,480 --> 01:43:19,360
other cases it solves the corner cases

2523
01:43:17,199 --> 01:43:22,000
it doesn't matter if you have you know

2524
01:43:19,360 --> 01:43:23,280
eight or nine if if your limit is 24 and

2525
01:43:22,000 --> 01:43:25,440
25

2526
01:43:23,280 --> 01:43:28,480
and it solves the problem of hashing

2527
01:43:25,440 --> 01:43:31,440
because if you have lots of those

2528
01:43:28,480 --> 01:43:32,638
randomly has they will spread out with

2529
01:43:31,440 --> 01:43:34,159
all the tpus

2530
01:43:32,639 --> 01:43:36,320
otherwise you have to have a certain

2531
01:43:34,159 --> 01:43:38,320
problem that you have to allocate cspi

2532
01:43:36,320 --> 01:43:42,239
so that they actually hash into the

2533
01:43:38,320 --> 01:43:44,320
certain you know cpu

2534
01:43:42,239 --> 01:43:45,759
which might make it very difficult if

2535
01:43:44,320 --> 01:43:48,480
you don't know how the hashing is done

2536
01:43:45,760 --> 01:43:50,320
in the hardware

2537
01:43:48,480 --> 01:43:51,919
so i i think it would be much more

2538
01:43:50,320 --> 01:43:54,080
interesting to just say that okay use

2539
01:43:51,920 --> 01:43:56,719
the big enough number

2540
01:43:54,080 --> 01:43:57,280
so so you get like three or four spi's

2541
01:43:56,719 --> 01:44:00,719
or

2542
01:43:57,280 --> 01:44:02,320
essays for each cpu

2543
01:44:00,719 --> 01:44:06,239
and it will still you know spread out

2544
01:44:02,320 --> 01:44:09,519
the load evenly

2545
01:44:06,239 --> 01:44:12,400
the question is the queue info qr info i

2546
01:44:09,520 --> 01:44:13,679
i don't under i mean if it if it needs a

2547
01:44:12,400 --> 01:44:15,440
super registered then it probably needs

2548
01:44:13,679 --> 01:44:17,760
to have a standardization way of

2549
01:44:15,440 --> 01:44:20,879
putting something in there if it's just

2550
01:44:17,760 --> 01:44:23,360
opaque they stop for the implementation

2551
01:44:20,880 --> 01:44:24,480
uh for two implementers that know each

2552
01:44:23,360 --> 01:44:25,679
other then

2553
01:44:24,480 --> 01:44:27,040
i don't think we actually need a super

2554
01:44:25,679 --> 01:44:28,639
extra but if you need to have a super

2555
01:44:27,040 --> 01:44:31,199
extend we probably also want to

2556
01:44:28,639 --> 01:44:33,520
specify what's in there like what's

2557
01:44:31,199 --> 01:44:36,480
really in there

2558
01:44:33,520 --> 01:44:38,719
so so so right now the only the only use

2559
01:44:36,480 --> 01:44:40,959
we have for it is qos so we could

2560
01:44:38,719 --> 01:44:42,480
we could tailor it to qrs only and have

2561
01:44:40,960 --> 01:44:44,400
it specifically for that

2562
01:44:42,480 --> 01:44:46,638
um but we're wondering maybe other

2563
01:44:44,400 --> 01:44:48,400
people have other

2564
01:44:46,639 --> 01:44:50,080
bits of information that is useful for

2565
01:44:48,400 --> 01:44:53,360
them to to to

2566
01:44:50,080 --> 01:44:55,119
inform the peers of for for this so

2567
01:44:53,360 --> 01:44:56,880
if nobody comes up with anything new

2568
01:44:55,119 --> 01:44:58,000
maybe we will just reduce it and say

2569
01:44:56,880 --> 01:45:01,600
like we'll just do

2570
01:44:58,000 --> 01:45:03,360
a specific qrs one and no no

2571
01:45:01,600 --> 01:45:06,400
so then it would be like you know qos

2572
01:45:03,360 --> 01:45:06,400
info specifically

2573
01:45:15,679 --> 01:45:18,159
gallery

2574
01:45:19,440 --> 01:45:25,839
well uh it's just a comment not about

2575
01:45:22,480 --> 01:45:29,440
uh this job but probably more about

2576
01:45:25,840 --> 01:45:33,199
it's just some association

2577
01:45:29,440 --> 01:45:36,799
uh so this draft is uh concerned with uh

2578
01:45:33,199 --> 01:45:40,000
uh high performance issues uh for pck

2579
01:45:36,800 --> 01:45:43,280
and uh actually if you send uh

2580
01:45:40,000 --> 01:45:44,560
very small packets like yp packets with

2581
01:45:43,280 --> 01:45:47,920
high rate

2582
01:45:44,560 --> 01:45:51,040
then i our head

2583
01:45:47,920 --> 01:45:55,760
that esp implies is very

2584
01:45:51,040 --> 01:45:55,760
high and even if network is

2585
01:45:55,920 --> 01:46:02,560
fast you will lose a quite noticeable

2586
01:45:59,840 --> 01:46:02,880
percentage of its performance and so

2587
01:46:02,560 --> 01:46:06,880
that

2588
01:46:02,880 --> 01:46:06,880
i think that iptfs

2589
01:46:07,040 --> 01:46:13,880
can be seen as more generic mechanism

2590
01:46:10,840 --> 01:46:15,280
of uh not only for traffic flow

2591
01:46:13,880 --> 01:46:19,760
confidentiality

2592
01:46:15,280 --> 01:46:22,719
but also for paycheck and taking a few

2593
01:46:19,760 --> 01:46:23,440
smaller packets into one esp package

2594
01:46:22,719 --> 01:46:26,560
that will

2595
01:46:23,440 --> 01:46:30,000
improve performance if uh

2596
01:46:26,560 --> 01:46:32,639
packets are very small so it's probably

2597
01:46:30,000 --> 01:46:34,320
uh just consideration for christian is

2598
01:46:32,639 --> 01:46:36,119
that

2599
01:46:34,320 --> 01:46:37,599
it is not only for traffic for

2600
01:46:36,119 --> 01:46:40,400
confidentiality

2601
01:46:37,600 --> 01:46:41,440
it has other applications it probably

2602
01:46:40,400 --> 01:46:46,159
which was mentioned

2603
01:46:41,440 --> 01:46:46,159
in the job just a comment

2604
01:46:47,600 --> 01:46:51,600
yeah that's true and we had a two on our

2605
01:46:49,199 --> 01:46:52,879
list of of you know similar workouts

2606
01:46:51,600 --> 01:46:55,920
being done right now

2607
01:46:52,880 --> 01:46:58,880
um so so yeah if

2608
01:46:55,920 --> 01:47:00,719
if if the new esp could do something as

2609
01:46:58,880 --> 01:47:02,480
well where it can like sort of

2610
01:47:00,719 --> 01:47:04,719
group a number of small packets together

2611
01:47:02,480 --> 01:47:06,239
into one um

2612
01:47:04,719 --> 01:47:08,000
and do that based on like you know

2613
01:47:06,239 --> 01:47:10,559
similarly to how how

2614
01:47:08,000 --> 01:47:12,080
modern kernels or nic cards do this gso

2615
01:47:10,560 --> 01:47:14,480
or other other features

2616
01:47:12,080 --> 01:47:16,000
that would be great to have um but that

2617
01:47:14,480 --> 01:47:16,959
would be a much more substantial

2618
01:47:16,000 --> 01:47:23,840
substantive

2619
01:47:16,960 --> 01:47:23,840
change than than doing this

2620
01:47:28,000 --> 01:47:31,760
um all right so um freddie haven't read

2621
01:47:30,880 --> 01:47:34,000
the draft so

2622
01:47:31,760 --> 01:47:35,520
this could be a stupid question but um

2623
01:47:34,000 --> 01:47:39,679
what does it do that uh

2624
01:47:35,520 --> 01:47:39,679
rfc 6311 doesn't do

2625
01:47:40,800 --> 01:47:45,679
63 11 63 11.

2626
01:47:47,440 --> 01:47:53,119
so i say again 63 11 allows you to have

2627
01:47:50,960 --> 01:47:56,159
parallel essays

2628
01:47:53,119 --> 01:47:59,360
it says with the same selectors but

2629
01:47:56,159 --> 01:47:59,759
right so i mean so so 7296 also allows

2630
01:47:59,360 --> 01:48:02,480
that

2631
01:47:59,760 --> 01:48:04,080
uh but this is you're giving a little

2632
01:48:02,480 --> 01:48:05,119
more information as to why they're being

2633
01:48:04,080 --> 01:48:07,920
used so that

2634
01:48:05,119 --> 01:48:09,199
so both sides know that they're going to

2635
01:48:07,920 --> 01:48:12,960
uh

2636
01:48:09,199 --> 01:48:16,839
you know that you want them and also

2637
01:48:12,960 --> 01:48:18,080
the point was to negotiate how many you

2638
01:48:16,840 --> 01:48:20,080
want

2639
01:48:18,080 --> 01:48:21,760
like what we wanted to avoid was a

2640
01:48:20,080 --> 01:48:23,360
situation where one end goes and

2641
01:48:21,760 --> 01:48:25,119
installs more and more and more until

2642
01:48:23,360 --> 01:48:26,799
they get t as unavailable because the

2643
01:48:25,119 --> 01:48:29,040
other end is tired of installing more of

2644
01:48:26,800 --> 01:48:29,040
them

2645
01:48:29,600 --> 01:48:32,800
and so we were hoping that this would

2646
01:48:30,960 --> 01:48:34,320
like make it clearer from both sides

2647
01:48:32,800 --> 01:48:36,239
that they can sort of expect how many

2648
01:48:34,320 --> 01:48:38,559
they will have

2649
01:48:36,239 --> 01:48:39,678
so it's so from an eye point of view

2650
01:48:38,560 --> 01:48:41,600
it's not a big

2651
01:48:39,679 --> 01:48:43,360
big change the the bigger change is

2652
01:48:41,600 --> 01:48:45,040
actually at the kernel level

2653
01:48:43,360 --> 01:48:47,759
where you know you're you're making sure

2654
01:48:45,040 --> 01:48:50,400
that certain ipsec assays remain on one

2655
01:48:47,760 --> 01:48:50,400
cpu and

2656
01:48:50,880 --> 01:48:56,000
doing all that work so um

2657
01:48:54,000 --> 01:48:57,679
how do you handle the asymmetric case

2658
01:48:56,000 --> 01:49:00,719
where um

2659
01:48:57,679 --> 01:49:01,600
one side has um like eight cpus the

2660
01:49:00,719 --> 01:49:04,880
other side has a

2661
01:49:01,600 --> 01:49:07,440
six current and

2662
01:49:04,880 --> 01:49:08,719
stefan can correct me uh if i'm wrong

2663
01:49:07,440 --> 01:49:11,919
but currently

2664
01:49:08,719 --> 01:49:13,280
um we install all the inbound essays

2665
01:49:11,920 --> 01:49:16,159
because you have to

2666
01:49:13,280 --> 01:49:20,000
but we only install one outbound sa per

2667
01:49:16,159 --> 01:49:23,440
cpu so if you get multiple ones then

2668
01:49:20,000 --> 01:49:23,440
you just don't use half of them

2669
01:49:26,239 --> 01:49:30,718
it means the other end doesn't get the

2670
01:49:28,239 --> 01:49:33,759
benefit of having multiple s's

2671
01:49:30,719 --> 01:49:35,599
because you are not using them yeah but

2672
01:49:33,760 --> 01:49:36,480
that one is the one so so that one is

2673
01:49:35,599 --> 01:49:38,320
the one that has

2674
01:49:36,480 --> 01:49:43,280
you know presumably the bigger cpus

2675
01:49:38,320 --> 01:49:45,679
anyway right

2676
01:49:43,280 --> 01:49:46,960
yeah so on the eighth on the eight-way

2677
01:49:45,679 --> 01:49:51,199
machine you'd have

2678
01:49:46,960 --> 01:49:51,199
uh two cores that never decrypt

2679
01:49:52,639 --> 01:49:57,199
because the this a's are not used on the

2680
01:49:54,960 --> 01:50:00,560
other side

2681
01:49:57,199 --> 01:50:00,559
are you feeling the key or are you

2682
01:50:00,800 --> 01:50:03,199
right

2683
01:50:08,159 --> 01:50:11,839
okay christian

2684
01:50:13,840 --> 01:50:17,440
is the is the q info uh sort of an idea

2685
01:50:16,719 --> 01:50:20,000
of like

2686
01:50:17,440 --> 01:50:21,280
you you want to maybe pick certain cpus

2687
01:50:20,000 --> 01:50:23,280
based on the

2688
01:50:21,280 --> 01:50:25,119
you know you're saying like this is a

2689
01:50:23,280 --> 01:50:28,320
high priority

2690
01:50:25,119 --> 01:50:30,719
um you know uh like voice traffic and so

2691
01:50:28,320 --> 01:50:32,880
please give it to an unloaded cpu is

2692
01:50:30,719 --> 01:50:32,880
that

2693
01:50:35,040 --> 01:50:39,840
i can't hear you

2694
01:50:41,599 --> 01:50:46,639
sorry i was probably muted um

2695
01:50:45,360 --> 01:50:48,639
we don't want to we don't want to go

2696
01:50:46,639 --> 01:50:50,320
into the the implementation itself like

2697
01:50:48,639 --> 01:50:50,800
it's just to negotiate and say like this

2698
01:50:50,320 --> 01:50:52,639
is the

2699
01:50:50,800 --> 01:50:53,920
the quality of service you know voip

2700
01:50:52,639 --> 01:50:55,840
super important

2701
01:50:53,920 --> 01:50:57,679
and how you deal with that on the other

2702
01:50:55,840 --> 01:50:59,440
hand it's up to the other end but like

2703
01:50:57,679 --> 01:51:01,440
like at least you have two different

2704
01:50:59,440 --> 01:51:03,759
ipsec essays to encrypt like you know

2705
01:51:01,440 --> 01:51:06,879
your bulk unimportant stuff and your

2706
01:51:03,760 --> 01:51:10,480
super important stuff yeah okay

2707
01:51:06,880 --> 01:51:12,560
so this reminds me of uh the uh

2708
01:51:10,480 --> 01:51:13,919
in routing we have admin tags right so

2709
01:51:12,560 --> 01:51:16,320
it's like coloring

2710
01:51:13,920 --> 01:51:17,280
where you don't assign you know you

2711
01:51:16,320 --> 01:51:20,000
don't standardize

2712
01:51:17,280 --> 01:51:20,719
the the semantics of the value it's just

2713
01:51:20,000 --> 01:51:23,520
opaque

2714
01:51:20,719 --> 01:51:25,679
uh so yeah this makes sense to me for

2715
01:51:23,520 --> 01:51:27,840
sure

2716
01:51:25,679 --> 01:51:29,440
yeah so in the most important opaque

2717
01:51:27,840 --> 01:51:31,599
yeah in the most simplest version we

2718
01:51:29,440 --> 01:51:32,638
just sent the qos bits around right like

2719
01:51:31,599 --> 01:51:35,840
what is it

2720
01:51:32,639 --> 01:51:35,840
six bits i think

2721
01:51:41,119 --> 01:51:46,159
all right so i think that's

2722
01:51:44,239 --> 01:51:48,000
it for that one and then we move to the

2723
01:51:46,159 --> 01:51:50,719
i question one graveyard which is not

2724
01:51:48,000 --> 01:51:52,880
our working group item because it's not

2725
01:51:50,719 --> 01:51:55,520
it's i'm talking about i question one

2726
01:51:52,880 --> 01:51:56,960
even if i original first version of the

2727
01:51:55,520 --> 01:51:58,400
agenda i was talking like version 2

2728
01:51:56,960 --> 01:52:02,639
graveyard

2729
01:51:58,400 --> 01:52:06,638
by mistake but that was fixed so

2730
01:52:02,639 --> 01:52:08,159
fall yeah so funny enough even though so

2731
01:52:06,639 --> 01:52:10,000
next slide yeah

2732
01:52:08,159 --> 01:52:11,839
for enough even though it has not been

2733
01:52:10,000 --> 01:52:14,480
adopted yet

2734
01:52:11,840 --> 01:52:16,239
if you look at the ietf 108 action items

2735
01:52:14,480 --> 01:52:18,000
for the chairs that says perhaps go to

2736
01:52:16,239 --> 01:52:20,000
working group last call so

2737
01:52:18,000 --> 01:52:22,159
apparently the chairs were jumping to

2738
01:52:20,000 --> 01:52:25,679
make this happen

2739
01:52:22,159 --> 01:52:27,519
anyway um so only a very

2740
01:52:25,679 --> 01:52:29,599
few small changes made us mostly the

2741
01:52:27,520 --> 01:52:31,440
text from sean turner to make sure that

2742
01:52:29,599 --> 01:52:33,440
we were not seeing anything that either

2743
01:52:31,440 --> 01:52:36,638
ayanna or isg

2744
01:52:33,440 --> 01:52:38,559
couldn't couldn't be instructed to do um

2745
01:52:36,639 --> 01:52:40,000
so all the work has really been done and

2746
01:52:38,560 --> 01:52:41,679
um i think it

2747
01:52:40,000 --> 01:52:43,679
we should just get it done or we should

2748
01:52:41,679 --> 01:52:45,840
just drop it but but like

2749
01:52:43,679 --> 01:52:47,440
it clarifies the anna registries it adds

2750
01:52:45,840 --> 01:52:50,000
a deprecated column

2751
01:52:47,440 --> 01:52:51,839
it i think it you know it will make sure

2752
01:52:50,000 --> 01:52:53,440
that people who are implementing gang

2753
01:52:51,840 --> 01:52:54,880
won't start implementing all this old

2754
01:52:53,440 --> 01:52:56,239
stuff anymore because it's clearly

2755
01:52:54,880 --> 01:52:58,880
deprecated and

2756
01:52:56,239 --> 01:53:00,718
um and think it's very useful to do um

2757
01:52:58,880 --> 01:53:02,480
it's also just really nice to have an

2758
01:53:00,719 --> 01:53:06,080
rfc number where you can point to people

2759
01:53:02,480 --> 01:53:06,080
and say like don't use ikv one

2760
01:53:06,960 --> 01:53:10,960
so the last question was of time when we

2761
01:53:09,520 --> 01:53:14,080
think about whether it would be a

2762
01:53:10,960 --> 01:53:16,719
working group document or a church

2763
01:53:14,080 --> 01:53:19,040
because i think they are they are

2764
01:53:16,719 --> 01:53:19,040
chartered

2765
01:53:19,280 --> 01:53:24,159
also but so

2766
01:53:25,040 --> 01:53:29,440
so if ben has any comment on that or

2767
01:53:28,080 --> 01:53:31,040
do we actually do this i think there's a

2768
01:53:29,440 --> 01:53:31,759
working group by the way is this a okay

2769
01:53:31,040 --> 01:53:34,800
for a vertical

2770
01:53:31,760 --> 01:53:36,639
item or should we take this an ad

2771
01:53:34,800 --> 01:53:39,599
spencer

2772
01:53:36,639 --> 01:53:41,520
i mean if we need to bend the

2773
01:53:39,599 --> 01:53:43,119
interpretation of the charter to do this

2774
01:53:41,520 --> 01:53:45,119
i think this is clearly the right

2775
01:53:43,119 --> 01:53:47,199
place to do this work so let's just do

2776
01:53:45,119 --> 01:53:47,199
it

2777
01:53:47,280 --> 01:53:52,639
i will then make a broken group adapter

2778
01:53:53,040 --> 01:53:56,880
a it's something that we should be doing

2779
01:53:54,960 --> 01:54:02,159
and

2780
01:53:56,880 --> 01:54:02,159
all right any other comments on this

2781
01:54:02,239 --> 01:54:06,559
if not then if anybody out there said

2782
01:54:04,560 --> 01:54:08,880
kristen has something or

2783
01:54:06,560 --> 01:54:10,000
oh it was still left over from the

2784
01:54:08,880 --> 01:54:13,440
previous one

2785
01:54:10,000 --> 01:54:22,000
all right so any other items in last

2786
01:54:13,440 --> 01:54:24,638
four six minutes we have still left

2787
01:54:22,000 --> 01:54:27,280
i don't see anybody jumping onto the

2788
01:54:24,639 --> 01:54:31,199
queue or going to the

2789
01:54:27,280 --> 01:54:34,000
jobber or anything like that so i think

2790
01:54:31,199 --> 01:54:34,960
that's it so thank you for the

2791
01:54:34,000 --> 01:54:38,080
presentations i

2792
01:54:34,960 --> 01:54:40,400
i will try to as i wasn't

2793
01:54:38,080 --> 01:54:42,080
able to collect all the you know the

2794
01:54:40,400 --> 01:54:42,400
action items that i was supposed to do

2795
01:54:42,080 --> 01:54:44,559
so

2796
01:54:42,400 --> 01:54:46,638
if anybody has any action items i should

2797
01:54:44,560 --> 01:54:47,440
be doing send me an email after this

2798
01:54:46,639 --> 01:54:48,960
meeting

2799
01:54:47,440 --> 01:54:51,119
remind me that this was something that

2800
01:54:48,960 --> 01:54:53,119
we agreed on because i i most likely

2801
01:54:51,119 --> 01:54:56,000
forgot most of the things that we

2802
01:54:53,119 --> 01:54:56,000
agreed on here

2803
01:54:58,080 --> 01:55:02,239
all right i think that's it oh christian

2804
01:55:01,599 --> 01:55:05,840
is still

2805
01:55:02,239 --> 01:55:05,839
oh no

2806
01:55:09,199 --> 01:55:19,839
bye everyone yeah okay i think that's it

2807
01:55:14,000 --> 01:55:19,840
see you next time

