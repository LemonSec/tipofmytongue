1
00:00:14,920 --> 00:00:17,920
uh

2
00:00:28,400 --> 00:00:36,079
okay i think it's

3
00:00:31,920 --> 00:00:36,079
about time so we can maybe

4
00:00:36,160 --> 00:00:39,120
get started

5
00:00:42,239 --> 00:00:49,760
so this is uh an official idea

6
00:00:46,559 --> 00:00:52,879
meeting it's the cozy

7
00:00:49,760 --> 00:00:56,640
meeting has you

8
00:00:52,879 --> 00:01:01,920
know it's virtual meeting and that's

9
00:00:56,640 --> 00:01:01,920
using the bangkok time zone and

10
00:01:03,280 --> 00:01:12,560
that's where the picture was taken from

11
00:01:08,080 --> 00:01:15,679
so as an official itf meeting the

12
00:01:12,560 --> 00:01:18,560
not well applies

13
00:01:15,680 --> 00:01:21,040
please make yourself familiar with it

14
00:01:18,560 --> 00:01:21,040
before

15
00:01:21,280 --> 00:01:27,520
saying anything or writing comments

16
00:01:24,560 --> 00:01:27,920
etc please if you are not familiar with

17
00:01:27,520 --> 00:01:31,039
it

18
00:01:27,920 --> 00:01:31,040
read it right now

19
00:01:31,759 --> 00:01:36,880
uh so this is the agenda for today we

20
00:01:35,520 --> 00:01:40,079
will start with

21
00:01:36,880 --> 00:01:41,679
the administrative and then we will go

22
00:01:40,079 --> 00:01:46,000
through the document

23
00:01:41,680 --> 00:01:50,720
statuses and then go to

24
00:01:46,000 --> 00:01:55,840
our rechartering and counter signatures

25
00:01:50,720 --> 00:02:00,640
document and the certificate compression

26
00:01:55,840 --> 00:02:00,640
is there any bashing of this agenda

27
00:02:06,000 --> 00:02:09,840
i'll take that as a no

28
00:02:13,120 --> 00:02:20,480
so the document status

29
00:02:17,280 --> 00:02:23,760
uh we have a few documents that

30
00:02:20,480 --> 00:02:27,200
are waiting for edits

31
00:02:23,760 --> 00:02:30,640
otherwise they are in iesg evaluation

32
00:02:27,200 --> 00:02:34,238
those are namely the 81

33
00:02:30,640 --> 00:02:37,839
52 bis struck document and the

34
00:02:34,239 --> 00:02:37,840
x 509 document

35
00:02:38,400 --> 00:02:46,319
um on my site for the x509 document

36
00:02:42,720 --> 00:02:49,280
there are a few more things i need to

37
00:02:46,319 --> 00:02:52,720
to look at and then i'll be able to

38
00:02:49,280 --> 00:02:56,879
publish a new revision of the document

39
00:02:52,720 --> 00:03:01,599
so i hope this to happen in the next

40
00:02:56,879 --> 00:03:01,599
one two weeks and the most

41
00:03:02,959 --> 00:03:10,400
and we have two documents that are

42
00:03:06,159 --> 00:03:15,280
waiting uh that has missing preferences

43
00:03:10,400 --> 00:03:18,480
those are the 51 82

44
00:03:15,280 --> 00:03:23,280
51 8150 b

45
00:03:18,480 --> 00:03:27,518
sucks and the hashtags documents

46
00:03:23,280 --> 00:03:32,000
and we have the counter

47
00:03:27,519 --> 00:03:36,159
sign document that we are going to

48
00:03:32,000 --> 00:03:36,159
that is going to be presented separately

49
00:03:42,080 --> 00:03:47,840
maybe kirsten doesn't hear me since

50
00:04:03,360 --> 00:04:09,519
okay it seems that people

51
00:04:06,400 --> 00:04:10,239
have some audio issues and i will take

52
00:04:09,519 --> 00:04:14,400
this

53
00:04:10,239 --> 00:04:18,959
a moment then while waiting maybe for

54
00:04:14,400 --> 00:04:22,479
them to reconnect to also ask if

55
00:04:18,959 --> 00:04:25,840
people would volunteer for helping with

56
00:04:22,479 --> 00:04:28,880
jabber and with the minutes

57
00:04:25,840 --> 00:04:30,880
we'll be monitoring this with matthew as

58
00:04:28,880 --> 00:04:35,520
well but

59
00:04:30,880 --> 00:04:35,520
please do help with those items

60
00:04:37,759 --> 00:04:46,080
so okay then

61
00:04:40,960 --> 00:04:46,080
i think we can continue with the slides

62
00:04:46,240 --> 00:04:52,720
so about the

63
00:04:50,000 --> 00:04:52,720
chartering

64
00:04:53,199 --> 00:04:58,160
this is a short summary of what we have

65
00:04:56,320 --> 00:05:02,159
been discussing over the last

66
00:04:58,160 --> 00:05:06,240
few meetings so hopefully it's not

67
00:05:02,160 --> 00:05:11,840
any surprise for anyone

68
00:05:06,240 --> 00:05:11,840
we are going to review and

69
00:05:12,400 --> 00:05:20,080
accept new algorithms

70
00:05:16,560 --> 00:05:24,720
for example coming from icfrg

71
00:05:20,080 --> 00:05:27,280
and maybe

72
00:05:24,720 --> 00:05:28,880
some others but it will be much harder

73
00:05:27,280 --> 00:05:32,479
to

74
00:05:28,880 --> 00:05:35,840
evaluate them and we would be working on

75
00:05:32,479 --> 00:05:35,840
certificate compression

76
00:05:36,479 --> 00:05:44,320
either from direct mapping

77
00:05:39,840 --> 00:05:47,440
from x509 certificates or

78
00:05:44,320 --> 00:05:49,759
as we call it sybor optimized where the

79
00:05:47,440 --> 00:05:51,840
signature is

80
00:05:49,759 --> 00:05:54,479
computed on the silver structure

81
00:05:51,840 --> 00:05:54,479
directly

82
00:06:01,759 --> 00:06:11,280
okay so ah

83
00:06:06,319 --> 00:06:15,919
yes i there is a pull request that

84
00:06:11,280 --> 00:06:18,318
should be making some

85
00:06:15,919 --> 00:06:22,880
improvements on the language of the

86
00:06:18,319 --> 00:06:24,639
charter but are there any

87
00:06:22,880 --> 00:06:26,400
points that you would like to discuss

88
00:06:24,639 --> 00:06:35,840
now about the proposed

89
00:06:26,400 --> 00:06:35,840
new charter anything at all

90
00:06:44,560 --> 00:06:52,960
it seems that everyone is happy with the

91
00:06:49,599 --> 00:06:56,159
proposed charter so

92
00:06:52,960 --> 00:06:58,400
if you have any new comments of course

93
00:06:56,160 --> 00:07:02,000
feel free to

94
00:06:58,400 --> 00:07:07,280
raise them in the mailing list

95
00:07:02,000 --> 00:07:07,280
otherwise we will continue with this

96
00:07:09,440 --> 00:07:16,479
okay and with that we can move to

97
00:07:13,440 --> 00:07:31,840
the counter signatures and

98
00:07:16,479 --> 00:07:31,840
the rest please join the queue

99
00:07:35,120 --> 00:07:43,360
okay can you hear me yeah

100
00:07:38,720 --> 00:07:43,360
good okay um

101
00:07:43,440 --> 00:07:46,400
next slide please

102
00:07:48,800 --> 00:07:53,360
so the the first thing is this is jim

103
00:07:52,240 --> 00:07:56,879
shad's work

104
00:07:53,360 --> 00:08:00,639
um he deserves all the credit for it

105
00:07:56,879 --> 00:08:03,759
and i agreed to

106
00:08:00,639 --> 00:08:08,000
serve as the document editor since jim

107
00:08:03,759 --> 00:08:10,479
passed mostly i think what needs done

108
00:08:08,000 --> 00:08:12,639
is to help with the approval and

109
00:08:10,479 --> 00:08:15,680
publication processes

110
00:08:12,639 --> 00:08:17,599
but jim deserves all the credit for the

111
00:08:15,680 --> 00:08:21,599
technical content

112
00:08:17,599 --> 00:08:22,719
and so i intend that my name be removed

113
00:08:21,599 --> 00:08:26,000
from the document

114
00:08:22,720 --> 00:08:31,039
when uh right before it's published as

115
00:08:26,000 --> 00:08:31,039
an rfc next slide please

116
00:08:33,839 --> 00:08:37,680
at this point the body of the document

117
00:08:36,640 --> 00:08:40,718
is done

118
00:08:37,679 --> 00:08:44,079
but the examples

119
00:08:40,719 --> 00:08:47,760
uh jim envisioned five

120
00:08:44,080 --> 00:08:50,959
two of which he did and three of which

121
00:08:47,760 --> 00:08:55,839
uh are just placeholders uh

122
00:08:50,959 --> 00:08:59,518
next slide please

123
00:08:55,839 --> 00:09:00,640
it's uh the code that jim used to make

124
00:08:59,519 --> 00:09:03,920
those examples

125
00:09:00,640 --> 00:09:03,920
is available in github

126
00:09:04,080 --> 00:09:08,000
i don't know if ever anyone is

127
00:09:06,160 --> 00:09:11,279
interested in helping to produce

128
00:09:08,000 --> 00:09:14,720
the other three examples

129
00:09:11,279 --> 00:09:16,480
if if so please reach out to me

130
00:09:14,720 --> 00:09:18,080
and we can work together to make that

131
00:09:16,480 --> 00:09:21,680
happen

132
00:09:18,080 --> 00:09:22,959
if not we can remove those placeholders

133
00:09:21,680 --> 00:09:27,359
and be ready for

134
00:09:22,959 --> 00:09:29,760
working group last call totally up to

135
00:09:27,360 --> 00:09:31,680
whether people think they're willing

136
00:09:29,760 --> 00:09:32,319
they have the time and interest to work

137
00:09:31,680 --> 00:09:36,640
on

138
00:09:32,320 --> 00:09:39,120
producing those three other examples

139
00:09:36,640 --> 00:09:51,839
that's my last slide so that's where we

140
00:09:39,120 --> 00:09:51,839
stand is there any discussion

141
00:09:56,000 --> 00:10:02,600
okay so i seen jabber that

142
00:09:59,200 --> 00:10:03,920
michael think he would love to

143
00:10:02,600 --> 00:10:06,320
[Music]

144
00:10:03,920 --> 00:10:08,399
have the time to help but maybe he

145
00:10:06,320 --> 00:10:12,000
wouldn't so

146
00:10:08,399 --> 00:10:15,040
yes for now he seems to be okay

147
00:10:12,000 --> 00:10:19,120
with removing the

148
00:10:15,040 --> 00:10:21,120
placeholders um

149
00:10:19,120 --> 00:10:22,320
it's interesting that michael was also

150
00:10:21,120 --> 00:10:23,920
the one who said

151
00:10:22,320 --> 00:10:26,320
without working through one of the

152
00:10:23,920 --> 00:10:27,439
examples he didn't understand the body

153
00:10:26,320 --> 00:10:31,040
of the document

154
00:10:27,440 --> 00:10:33,680
um so i take michael's comment to mean

155
00:10:31,040 --> 00:10:34,160
that the two examples that are there are

156
00:10:33,680 --> 00:10:37,519
enough

157
00:10:34,160 --> 00:10:37,519
to get that understanding

158
00:10:43,839 --> 00:10:50,480
okay so

159
00:10:47,040 --> 00:10:52,719
all right so um if if that's the

160
00:10:50,480 --> 00:10:55,600
direction or if no one is willing to

161
00:10:52,720 --> 00:10:58,839
help make make those i will be glad to

162
00:10:55,600 --> 00:11:02,320
remove those uh three empty sections

163
00:10:58,839 --> 00:11:06,079
and and post it

164
00:11:02,320 --> 00:11:06,079
i'll do that promptly

165
00:11:06,320 --> 00:11:09,200
okay thank you

166
00:11:13,360 --> 00:11:29,839
okay moving forward to the

167
00:11:16,560 --> 00:11:29,839
certificate compression

168
00:11:40,839 --> 00:11:43,839
jump

169
00:11:46,240 --> 00:11:50,480
so sorry yeah working with you around to

170
00:11:50,160 --> 00:11:54,160
get

171
00:11:50,480 --> 00:11:57,279
the slide numbers and correct

172
00:11:54,160 --> 00:12:01,600
aspect ratio on this present

173
00:11:57,279 --> 00:12:01,600
but i guess we go with this um

174
00:12:02,639 --> 00:12:08,720
so we have

175
00:12:05,680 --> 00:12:11,839
done quite we had

176
00:12:08,720 --> 00:12:13,519
done quite a lot and made a zero two

177
00:12:11,839 --> 00:12:16,560
version incorporating

178
00:12:13,519 --> 00:12:19,200
some of the comments and then i had

179
00:12:16,560 --> 00:12:20,719
more time and made it zero three version

180
00:12:19,200 --> 00:12:22,800
incorporating

181
00:12:20,720 --> 00:12:24,160
trying to address basically all the

182
00:12:22,800 --> 00:12:27,599
comments that was

183
00:12:24,160 --> 00:12:27,920
receivable during the summer from hank

184
00:12:27,600 --> 00:12:31,360
and

185
00:12:27,920 --> 00:12:34,319
russ and hillary and also the

186
00:12:31,360 --> 00:12:35,279
last weeks from or a month ago or

187
00:12:34,320 --> 00:12:39,040
something from

188
00:12:35,279 --> 00:12:41,120
jim uh can

189
00:12:39,040 --> 00:12:42,719
move on this is quite a lot of slide

190
00:12:41,120 --> 00:12:45,200
trying to

191
00:12:42,720 --> 00:12:46,959
describe the whole quite a lot we don't

192
00:12:45,200 --> 00:12:48,800
have time to discuss everything was

193
00:12:46,959 --> 00:12:51,920
going to

194
00:12:48,800 --> 00:12:52,319
present the changes the high level and

195
00:12:51,920 --> 00:12:55,519
then

196
00:12:52,320 --> 00:12:59,920
go to things i think needed to discuss

197
00:12:55,519 --> 00:12:59,920
so first high level can move on

198
00:13:02,160 --> 00:13:08,480
so i think first is quite early it's not

199
00:13:06,560 --> 00:13:08,880
adopted it's not even in the shorter yet

200
00:13:08,480 --> 00:13:12,320
so

201
00:13:08,880 --> 00:13:17,519
i think to be able to decide

202
00:13:12,320 --> 00:13:21,120
on to discuss detailed encoding we need

203
00:13:17,519 --> 00:13:24,560
first what the scope is and

204
00:13:21,120 --> 00:13:28,240
the periscope the scope of the authors

205
00:13:24,560 --> 00:13:30,479
how this began was to create a seaboard

206
00:13:28,240 --> 00:13:35,560
encoding of a very small

207
00:13:30,480 --> 00:13:36,720
or not very small but a subset of rfc

208
00:13:35,560 --> 00:13:40,719
795

209
00:13:36,720 --> 00:13:43,680
then it grew to the whole of rc 7925

210
00:13:40,720 --> 00:13:44,320
and then people started wanting i triple

211
00:13:43,680 --> 00:13:48,000
e

212
00:13:44,320 --> 00:13:50,560
and generalized time and so on so

213
00:13:48,000 --> 00:13:52,079
this scope in number what should be

214
00:13:50,560 --> 00:13:56,638
encoded has

215
00:13:52,079 --> 00:13:56,638
grown uh

216
00:13:56,959 --> 00:14:03,199
and so at this point we

217
00:14:00,000 --> 00:14:05,839
believe that the best way forward is to

218
00:14:03,199 --> 00:14:06,399
create a seabor encoding of a quite

219
00:14:05,839 --> 00:14:09,600
large

220
00:14:06,399 --> 00:14:12,800
subset of five zero eight

221
00:14:09,600 --> 00:14:15,839
c five two eight zero basically what is

222
00:14:12,800 --> 00:14:19,120
in active use at least

223
00:14:15,839 --> 00:14:23,760
among for the use cases that would

224
00:14:19,120 --> 00:14:27,199
have any relation to cosi and

225
00:14:23,760 --> 00:14:30,880
what we have done the last

226
00:14:27,199 --> 00:14:33,920
last month is to try to make sure

227
00:14:30,880 --> 00:14:37,839
that we can do this while still

228
00:14:33,920 --> 00:14:41,839
achieving extremely high compression or

229
00:14:37,839 --> 00:14:45,519
encoding for very constrained

230
00:14:41,839 --> 00:14:48,000
certificates for example 7925

231
00:14:45,519 --> 00:14:49,120
and we believe that's possible so we

232
00:14:48,000 --> 00:14:52,639
don't think these

233
00:14:49,120 --> 00:14:55,600
contradicted each other we can support

234
00:14:52,639 --> 00:14:57,079
very much of five to eighty and still

235
00:14:55,600 --> 00:15:01,760
achieve

236
00:14:57,079 --> 00:15:06,079
138 140 bytes compression of very

237
00:15:01,760 --> 00:15:06,079
constrained ot certificates

238
00:15:09,040 --> 00:15:14,480
any comments on this otherwise you can

239
00:15:11,040 --> 00:15:14,480
move on next slide

240
00:15:19,440 --> 00:15:23,920
so the scope that has been discussed i

241
00:15:22,639 --> 00:15:25,360
guess we will discuss more in the

242
00:15:23,920 --> 00:15:29,599
shorter is to do

243
00:15:25,360 --> 00:15:30,000
compression of existing 509 site and

244
00:15:29,600 --> 00:15:33,040
then

245
00:15:30,000 --> 00:15:36,639
also natively side certs

246
00:15:33,040 --> 00:15:40,639
and basically we natively sign search

247
00:15:36,639 --> 00:15:42,320
you get basically for free it's

248
00:15:40,639 --> 00:15:44,000
a very small addition to the

249
00:15:42,320 --> 00:15:46,399
specification

250
00:15:44,000 --> 00:15:48,240
uh i don't think that has really been

251
00:15:46,399 --> 00:15:51,120
discussed but i think in

252
00:15:48,240 --> 00:15:52,639
the proposal is to only support their

253
00:15:51,120 --> 00:15:54,320
encoded circuits

254
00:15:52,639 --> 00:15:57,680
as you can see in this list there's a

255
00:15:54,320 --> 00:15:57,680
lot of other encodings

256
00:16:00,320 --> 00:16:02,560
and

257
00:16:05,040 --> 00:16:11,599
let's see and the proposal is to

258
00:16:08,480 --> 00:16:15,759
do encodings for actively used parts

259
00:16:11,600 --> 00:16:18,959
of rfc 5280

260
00:16:15,759 --> 00:16:18,959
not all of it

261
00:16:19,680 --> 00:16:23,439
but i think in some cases making a

262
00:16:22,800 --> 00:16:26,560
choice

263
00:16:23,440 --> 00:16:29,440
affects how how much you can

264
00:16:26,560 --> 00:16:30,399
can save in compression encoding and

265
00:16:29,440 --> 00:16:33,920
sometimes it

266
00:16:30,399 --> 00:16:39,759
does not so it's a

267
00:16:33,920 --> 00:16:42,079
bit case the case the suggestion is to

268
00:16:39,759 --> 00:16:43,600
differentiate encoding in the

269
00:16:42,079 --> 00:16:46,160
specification from

270
00:16:43,600 --> 00:16:47,920
profiling profiling could be done in

271
00:16:46,160 --> 00:16:50,000
other documents like seven

272
00:16:47,920 --> 00:16:51,040
nine to five but i think we probably

273
00:16:50,000 --> 00:16:54,720
want

274
00:16:51,040 --> 00:16:57,519
some section or appendix in the document

275
00:16:54,720 --> 00:16:58,560
documenting how how you achieve very

276
00:16:57,519 --> 00:17:01,680
small

277
00:16:58,560 --> 00:17:06,079
sizes which might

278
00:17:01,680 --> 00:17:06,079
refer also might refer to other drops

279
00:17:06,959 --> 00:17:09,679
next slide

280
00:17:11,280 --> 00:17:19,119
this is a very high level of the current

281
00:17:15,520 --> 00:17:20,400
form thing with high level changes is

282
00:17:19,119 --> 00:17:23,280
that

283
00:17:20,400 --> 00:17:25,199
see the things in red here are removed

284
00:17:23,280 --> 00:17:28,559
from their encoder it's

285
00:17:25,199 --> 00:17:32,160
duplicated signal altitudes and then

286
00:17:28,559 --> 00:17:34,240
the issue unique and subject unique ids

287
00:17:32,160 --> 00:17:35,679
currency estimates do not support this

288
00:17:34,240 --> 00:17:38,799
they seem to be seldom

289
00:17:35,679 --> 00:17:41,120
used green here is

290
00:17:38,799 --> 00:17:41,918
a new field which is the seaboard

291
00:17:41,120 --> 00:17:44,799
certificate

292
00:17:41,919 --> 00:17:45,520
type used right now to differentiate

293
00:17:44,799 --> 00:17:48,639
between

294
00:17:45,520 --> 00:17:51,120
compressed their certificate and

295
00:17:48,640 --> 00:17:52,559
natively signed and then the suggestion

296
00:17:51,120 --> 00:17:55,840
is to split up

297
00:17:52,559 --> 00:17:59,440
two of the fields into two items

298
00:17:55,840 --> 00:18:02,879
to not have to encode them as an array

299
00:17:59,440 --> 00:18:06,559
which may save some bytes

300
00:18:02,880 --> 00:18:07,120
and may or may not make the thing easier

301
00:18:06,559 --> 00:18:09,440
to

302
00:18:07,120 --> 00:18:09,439
read

303
00:18:13,440 --> 00:18:19,039
in comments otherwise we move on

304
00:18:22,160 --> 00:18:31,919
so a list of changes

305
00:18:28,160 --> 00:18:35,200
uh so there's

306
00:18:31,919 --> 00:18:36,400
two updates one was submitted two weeks

307
00:18:35,200 --> 00:18:38,880
ago and

308
00:18:36,400 --> 00:18:39,600
the zero three was submitted this

309
00:18:38,880 --> 00:18:42,160
morning

310
00:18:39,600 --> 00:18:42,799
the changes has been communicated in the

311
00:18:42,160 --> 00:18:46,480
past

312
00:18:42,799 --> 00:18:49,760
weeks so

313
00:18:46,480 --> 00:18:52,880
the encoding of issue and subject is

314
00:18:49,760 --> 00:18:54,240
completely rewritten as suggested by

315
00:18:52,880 --> 00:18:56,720
people on the list

316
00:18:54,240 --> 00:18:58,799
in this during summer they can now

317
00:18:56,720 --> 00:19:03,760
encode

318
00:18:58,799 --> 00:19:07,360
most rfc 5280

319
00:19:03,760 --> 00:19:10,039
subject and issues they only

320
00:19:07,360 --> 00:19:11,199
currently only printable string and

321
00:19:10,039 --> 00:19:14,559
utf-8

322
00:19:11,200 --> 00:19:17,840
is supported and these are the thing rfc

323
00:19:14,559 --> 00:19:21,120
5280 says that it says that you must use

324
00:19:17,840 --> 00:19:21,120
this for new certificates

325
00:19:21,200 --> 00:19:28,240
then the algorithms are made explicit

326
00:19:25,120 --> 00:19:31,600
before there was default algorithms

327
00:19:28,240 --> 00:19:34,480
uh now they are made explicit and this

328
00:19:31,600 --> 00:19:35,120
this increases encoding with two bytes

329
00:19:34,480 --> 00:19:37,440
but

330
00:19:35,120 --> 00:19:38,559
we think it's worth it to have them

331
00:19:37,440 --> 00:19:41,679
explicit and not

332
00:19:38,559 --> 00:19:45,280
having optional value that

333
00:19:41,679 --> 00:19:45,280
might or not exist

334
00:19:46,000 --> 00:19:50,799
extensions move to a separate paragraph

335
00:19:47,919 --> 00:19:53,919
that's suggested by jim

336
00:19:50,799 --> 00:19:57,120
the cddl is

337
00:19:53,919 --> 00:19:58,799
not duplicated anymore

338
00:19:57,120 --> 00:20:00,159
then a new section of compliant

339
00:19:58,799 --> 00:20:02,879
requirements

340
00:20:00,160 --> 00:20:05,679
detailing what you need to implement of

341
00:20:02,880 --> 00:20:08,640
this draft or maybe say that you don't

342
00:20:05,679 --> 00:20:10,880
need to implement very little is

343
00:20:08,640 --> 00:20:14,600
mandatory to implement

344
00:20:10,880 --> 00:20:17,919
this is for to do to write

345
00:20:14,600 --> 00:20:18,719
02203 is added generalized time as

346
00:20:17,919 --> 00:20:22,960
suggested by

347
00:20:18,720 --> 00:20:26,159
jim to support dates between 2050

348
00:20:22,960 --> 00:20:29,679
this is one thing that moves this

349
00:20:26,159 --> 00:20:35,760
draft to support

350
00:20:29,679 --> 00:20:39,679
more than seven nine to five

351
00:20:35,760 --> 00:20:42,480
then the tls registry

352
00:20:39,679 --> 00:20:43,360
it was previously suggested to do this

353
00:20:42,480 --> 00:20:46,080
as a tls

354
00:20:43,360 --> 00:20:47,439
compression hillary suggested that this

355
00:20:46,080 --> 00:20:49,918
is more a type

356
00:20:47,440 --> 00:20:51,840
so we have updated this document to do

357
00:20:49,919 --> 00:20:54,640
that

358
00:20:51,840 --> 00:20:57,439
this should be coordinated with the tls

359
00:20:54,640 --> 00:21:00,840
working group in the future

360
00:20:57,440 --> 00:21:03,039
uh add the support for a lot more

361
00:21:00,840 --> 00:21:06,559
algorithms

362
00:21:03,039 --> 00:21:10,240
this is just iana registrations

363
00:21:06,559 --> 00:21:11,280
then a lot more i implemented large part

364
00:21:10,240 --> 00:21:14,320
of the drought which

365
00:21:11,280 --> 00:21:18,240
made me add a lot

366
00:21:14,320 --> 00:21:18,240
more stricter text on

367
00:21:18,559 --> 00:21:24,879
regarding parts of encoding to make this

368
00:21:22,080 --> 00:21:25,840
implementable hopefully in a

369
00:21:24,880 --> 00:21:31,840
interoperable

370
00:21:25,840 --> 00:21:31,840
way next slide

371
00:21:35,120 --> 00:21:40,639
uh tried to reduce the number of ins

372
00:21:38,400 --> 00:21:43,840
hank commented that he did not

373
00:21:40,640 --> 00:21:46,320
like the large number of negative

374
00:21:43,840 --> 00:21:48,080
but i think they are very efficient for

375
00:21:46,320 --> 00:21:51,840
the encoding so they are not

376
00:21:48,080 --> 00:21:54,000
gone but they are fewer

377
00:21:51,840 --> 00:21:55,039
then the title is updated based on a

378
00:21:54,000 --> 00:21:57,520
comment from jim

379
00:21:55,039 --> 00:22:00,320
and kirsten just commented on the list

380
00:21:57,520 --> 00:22:02,879
that we should change the file name also

381
00:22:00,320 --> 00:22:02,879
i agree

382
00:22:03,679 --> 00:22:09,200
then abstract and intro was updated to

383
00:22:07,679 --> 00:22:10,880
sorry it's up to date with the rest of

384
00:22:09,200 --> 00:22:14,080
the document

385
00:22:10,880 --> 00:22:17,600
added text on what is not supported

386
00:22:14,080 --> 00:22:17,600
in five to eighty

387
00:22:17,760 --> 00:22:22,080
added support for raw relative yds for

388
00:22:21,200 --> 00:22:25,679
algorithms and

389
00:22:22,080 --> 00:22:29,199
extensions you can encode this as a

390
00:22:25,679 --> 00:22:30,799
daring code string can discuss whether

391
00:22:29,200 --> 00:22:33,360
that should be

392
00:22:30,799 --> 00:22:34,000
done or not it's added now to show that

393
00:22:33,360 --> 00:22:36,559
it's

394
00:22:34,000 --> 00:22:36,559
possible

395
00:22:37,200 --> 00:22:45,640
more info than the cdl is updated

396
00:22:41,919 --> 00:22:46,960
to follow the recommendations in rfc

397
00:22:45,640 --> 00:22:49,360
8742

398
00:22:46,960 --> 00:22:51,440
and that's an array and states that it's

399
00:22:49,360 --> 00:22:54,879
a separate sequence

400
00:22:51,440 --> 00:22:55,679
uh can be has us that maybe it's better

401
00:22:54,880 --> 00:22:59,120
to add this

402
00:22:55,679 --> 00:23:01,200
uh to to uh array anyway

403
00:22:59,120 --> 00:23:02,799
if that's one byte and might have

404
00:23:01,200 --> 00:23:06,480
benefits in

405
00:23:02,799 --> 00:23:11,679
understanding and maybe to use cdl

406
00:23:06,480 --> 00:23:13,039
courses i think 138 or 139 bytes does

407
00:23:11,679 --> 00:23:16,799
not really matter for

408
00:23:13,039 --> 00:23:17,919
this document so if it has benefits i

409
00:23:16,799 --> 00:23:21,360
think which

410
00:23:17,919 --> 00:23:23,360
can or should do that fixed

411
00:23:21,360 --> 00:23:25,360
so an empty subject can be encoded i

412
00:23:23,360 --> 00:23:28,158
think that was the comment from somebody

413
00:23:25,360 --> 00:23:32,719
on the list this summer

414
00:23:28,159 --> 00:23:36,080
the extension encoding is completely

415
00:23:32,720 --> 00:23:40,320
rewritten it was very 7925

416
00:23:36,080 --> 00:23:43,600
specific it also had several problems

417
00:23:40,320 --> 00:23:47,360
some errors it was not

418
00:23:43,600 --> 00:23:50,879
well defined so that has hopefully

419
00:23:47,360 --> 00:23:53,918
the new is well defined and support

420
00:23:50,880 --> 00:23:56,919
much more then in the

421
00:23:53,919 --> 00:23:58,400
effort to support much larger part of

422
00:23:56,919 --> 00:24:01,440
5280

423
00:23:58,400 --> 00:24:02,320
i had a lot of ana registrations for

424
00:24:01,440 --> 00:24:06,559
extensions

425
00:24:02,320 --> 00:24:06,559
extended gears extension subject names

426
00:24:08,480 --> 00:24:14,320
more specific encoding and

427
00:24:11,679 --> 00:24:15,600
as an example now that this can compress

428
00:24:14,320 --> 00:24:18,240
quite general

429
00:24:15,600 --> 00:24:19,360
certificates an example encoding of the

430
00:24:18,240 --> 00:24:23,120
tool site f

431
00:24:19,360 --> 00:24:26,639
org certificate was added

432
00:24:23,120 --> 00:24:29,039
an acknowledgement and now russ is in

433
00:24:26,640 --> 00:24:29,039
the queue

434
00:24:29,760 --> 00:24:34,000
um i'm just a little bit confused why

435
00:24:32,159 --> 00:24:37,919
you need relativoid

436
00:24:34,000 --> 00:24:41,279
nothing in 5280 uses a relativoid

437
00:24:37,919 --> 00:24:41,279
where do you see it coming in

438
00:24:41,760 --> 00:24:47,919
it was in for to support

439
00:24:45,200 --> 00:24:48,960
extensions when i post a lot of

440
00:24:47,919 --> 00:24:53,679
certificates

441
00:24:48,960 --> 00:24:55,360
i saw that it pops up a lot of

442
00:24:53,679 --> 00:24:57,200
extensions and for example u.s

443
00:24:55,360 --> 00:24:59,279
government also there is a lot of

444
00:24:57,200 --> 00:25:01,760
private extensions that probably nobody

445
00:24:59,279 --> 00:25:04,799
else use so

446
00:25:01,760 --> 00:25:05,440
this my understanding of a relative oil

447
00:25:04,799 --> 00:25:07,760
is that

448
00:25:05,440 --> 00:25:09,360
you don't have you just skip the zero

449
00:25:07,760 --> 00:25:12,480
six and the

450
00:25:09,360 --> 00:25:15,918
size and it's the rest

451
00:25:12,480 --> 00:25:19,760
or have i misunderstood relative

452
00:25:15,919 --> 00:25:23,279
oids so relativoid is an asn-1

453
00:25:19,760 --> 00:25:26,960
type of its own okay and

454
00:25:23,279 --> 00:25:30,640
and um you have to know

455
00:25:26,960 --> 00:25:34,320
the base that you're adding the

456
00:25:30,640 --> 00:25:36,799
uh transmitted parts uh

457
00:25:34,320 --> 00:25:37,360
basically there's an assumed prefix you

458
00:25:36,799 --> 00:25:39,760
set

459
00:25:37,360 --> 00:25:42,719
you transmit the suffix if you don't

460
00:25:39,760 --> 00:25:45,679
know the prefix you can't create it

461
00:25:42,720 --> 00:25:46,400
okay yeah that was not the intention and

462
00:25:45,679 --> 00:25:49,039
i think

463
00:25:46,400 --> 00:25:50,480
some of the web pages i used for

464
00:25:49,039 --> 00:25:53,520
information used

465
00:25:50,480 --> 00:25:56,880
the incorrect term um ah

466
00:25:53,520 --> 00:25:58,240
okay so the idea here was only to skip

467
00:25:56,880 --> 00:26:00,720
the zero six

468
00:25:58,240 --> 00:26:01,440
they're encoding for oid and the size

469
00:26:00,720 --> 00:26:04,960
because

470
00:26:01,440 --> 00:26:07,279
these are sure

471
00:26:04,960 --> 00:26:08,240
that makes sense because you can figure

472
00:26:07,279 --> 00:26:12,000
the rest out

473
00:26:08,240 --> 00:26:15,600
fro without that um yep

474
00:26:12,000 --> 00:26:16,880
but which is different the problem is

475
00:26:15,600 --> 00:26:19,600
what relativoid

476
00:26:16,880 --> 00:26:20,480
means to people who know what asn1 is

477
00:26:19,600 --> 00:26:22,320
yeah

478
00:26:20,480 --> 00:26:23,520
yeah then the terminology should be

479
00:26:22,320 --> 00:26:28,320
changed yeah

480
00:26:23,520 --> 00:26:28,320
okay what you said makes sense

481
00:26:34,000 --> 00:26:42,320
good how much time do we have

482
00:26:38,480 --> 00:26:42,320
left for this presentation

483
00:26:42,960 --> 00:26:50,799
any um well has no one

484
00:26:46,640 --> 00:26:54,960
objected to the agenda i think we can

485
00:26:50,799 --> 00:26:57,760
use pretty much all the rest of the time

486
00:26:54,960 --> 00:26:59,039
i mean if anyone has problems with that

487
00:26:57,760 --> 00:27:01,919
please raise them but

488
00:26:59,039 --> 00:27:01,919
otherwise yes

489
00:27:05,039 --> 00:27:09,919
okay yeah then we can go into talking

490
00:27:08,480 --> 00:27:13,440
more

491
00:27:09,919 --> 00:27:16,960
about the issues or

492
00:27:13,440 --> 00:27:20,960
more details is there any more

493
00:27:16,960 --> 00:27:25,520
comments on the high level

494
00:27:20,960 --> 00:27:28,960
aspects or the all the changes will be

495
00:27:25,520 --> 00:27:35,840
discussed in in more details i think

496
00:27:28,960 --> 00:27:35,840
later in the slides or some of them

497
00:27:40,000 --> 00:27:48,480
no let's uh next slide on

498
00:27:45,120 --> 00:27:52,158
so more low level discussion about

499
00:27:48,480 --> 00:27:52,159
the details

500
00:27:53,360 --> 00:27:58,320
i think here is nothing new this is just

501
00:27:57,120 --> 00:28:02,320
a summary

502
00:27:58,320 --> 00:28:05,520
version is uh um

503
00:28:02,320 --> 00:28:07,520
to be zero three is your unique id and

504
00:28:05,520 --> 00:28:10,960
subject unique id is not

505
00:28:07,520 --> 00:28:14,320
supported and draft

506
00:28:10,960 --> 00:28:16,320
adds a zebra certificate type that

507
00:28:14,320 --> 00:28:18,158
currently the difference between a

508
00:28:16,320 --> 00:28:21,200
compressed

509
00:28:18,159 --> 00:28:23,600
and the natively signed certificate and

510
00:28:21,200 --> 00:28:27,200
of course it could be used for

511
00:28:23,600 --> 00:28:27,199
other things in the future

512
00:28:28,799 --> 00:28:31,840
and next slide

513
00:28:34,159 --> 00:28:41,520
so serial number signature value it was

514
00:28:39,200 --> 00:28:42,880
some discussion in the summer about

515
00:28:41,520 --> 00:28:44,879
serial

516
00:28:42,880 --> 00:28:47,039
number whether it should be encoders

517
00:28:44,880 --> 00:28:50,159
into a byte

518
00:28:47,039 --> 00:28:52,960
uh encoding is as a

519
00:28:50,159 --> 00:28:53,440
simple integer has it does not really

520
00:28:52,960 --> 00:28:55,360
work

521
00:28:53,440 --> 00:28:57,760
because then you can only support very

522
00:28:55,360 --> 00:29:01,199
short serial numbers

523
00:28:57,760 --> 00:29:05,360
siberians also comes in

524
00:29:01,200 --> 00:29:08,000
discrete sizes 8 16 32 and 64.

525
00:29:05,360 --> 00:29:10,320
so it's not efficient encoded so

526
00:29:08,000 --> 00:29:13,840
therefore the

527
00:29:10,320 --> 00:29:16,720
suggestion is to encode it as a byte

528
00:29:13,840 --> 00:29:17,360
it was recently a comment on the list

529
00:29:16,720 --> 00:29:20,559
from

530
00:29:17,360 --> 00:29:24,879
carson that says that

531
00:29:20,559 --> 00:29:28,399
this should be specified as an unwrapped

532
00:29:24,880 --> 00:29:32,480
big num that seems or a

533
00:29:28,399 --> 00:29:36,080
big you int that seems to make a lot of

534
00:29:32,480 --> 00:29:39,039
sense my feeling is that that's

535
00:29:36,080 --> 00:29:41,199
already what the draft is doing on the

536
00:29:39,039 --> 00:29:44,399
low level and

537
00:29:41,200 --> 00:29:45,279
carlson suggestions would probably mean

538
00:29:44,399 --> 00:29:48,479
that

539
00:29:45,279 --> 00:29:51,600
the cddl is changed

540
00:29:48,480 --> 00:29:55,679
maybe kyrsten wants to

541
00:29:51,600 --> 00:29:59,199
elaborate on this

542
00:29:55,679 --> 00:30:01,679
yeah i even checked the city but

543
00:29:59,200 --> 00:30:03,679
but what i wanted to to avoid is that we

544
00:30:01,679 --> 00:30:08,320
have remnants of

545
00:30:03,679 --> 00:30:10,080
weird der sein bit handling

546
00:30:08,320 --> 00:30:12,399
which are always a bad thing when you

547
00:30:10,080 --> 00:30:14,240
have hashes or

548
00:30:12,399 --> 00:30:15,439
public keys and things like that because

549
00:30:14,240 --> 00:30:17,360
they might

550
00:30:15,440 --> 00:30:20,880
happen to have their topmost bit set and

551
00:30:17,360 --> 00:30:23,918
then you run into the dr

552
00:30:20,880 --> 00:30:25,840
signed integer trap and

553
00:30:23,919 --> 00:30:27,279
i would like to keep us free of that

554
00:30:25,840 --> 00:30:30,000
trap

555
00:30:27,279 --> 00:30:30,720
yeah the specification right after a

556
00:30:30,000 --> 00:30:33,520
comment from

557
00:30:30,720 --> 00:30:35,200
jim the specifications now say that you

558
00:30:33,520 --> 00:30:38,879
you always remove this

559
00:30:35,200 --> 00:30:42,399
um serious zero sign bit

560
00:30:38,880 --> 00:30:44,559
if present so i think

561
00:30:42,399 --> 00:30:45,439
on the low level i think i think the

562
00:30:44,559 --> 00:30:48,960
draft is

563
00:30:45,440 --> 00:30:50,480
doing what you what you suggest

564
00:30:48,960 --> 00:30:53,520
basically but of course it

565
00:30:50,480 --> 00:30:56,880
does not use the big any big unwrapped

566
00:30:53,520 --> 00:30:56,879
big num terminology

567
00:31:03,120 --> 00:31:06,959
maybe you can it would be very good if

568
00:31:05,200 --> 00:31:10,080
you couldn't maybe you can

569
00:31:06,960 --> 00:31:14,320
come with some complete complete

570
00:31:10,080 --> 00:31:17,678
suggestion how to change the this

571
00:31:14,320 --> 00:31:22,480
to big num or big you win or

572
00:31:17,679 --> 00:31:22,480
so i think it sounds like a good idea

573
00:31:23,519 --> 00:31:31,279
then signature value

574
00:31:27,120 --> 00:31:34,959
so this the previous

575
00:31:31,279 --> 00:31:35,760
specification did not really did you say

576
00:31:34,960 --> 00:31:39,120
that you

577
00:31:35,760 --> 00:31:42,320
removed unnecessary field and padding

578
00:31:39,120 --> 00:31:43,039
which is not really enough specification

579
00:31:42,320 --> 00:31:46,000
so

580
00:31:43,039 --> 00:31:48,000
has added a lot of things basically

581
00:31:46,000 --> 00:31:53,440
stating that

582
00:31:48,000 --> 00:31:56,880
for for in general you just take the

583
00:31:53,440 --> 00:32:00,799
their encoded value ecdsa

584
00:31:56,880 --> 00:32:05,039
is specially treated and they are

585
00:32:00,799 --> 00:32:05,760
then the the encoding is a concatenation

586
00:32:05,039 --> 00:32:09,279
of

587
00:32:05,760 --> 00:32:12,480
two integers

588
00:32:09,279 --> 00:32:12,960
padded to the same length where the

589
00:32:12,480 --> 00:32:17,519
length

590
00:32:12,960 --> 00:32:20,640
is given by this formula

591
00:32:17,519 --> 00:32:23,360
and it was updated after a comment from

592
00:32:20,640 --> 00:32:25,440
renee it should not say curve order but

593
00:32:23,360 --> 00:32:29,360
the size of the largest

594
00:32:25,440 --> 00:32:32,640
prime order subgroup

595
00:32:29,360 --> 00:32:36,479
it also gives explicit value for

596
00:32:32,640 --> 00:32:43,840
for the neast p curves which is 32 48

597
00:32:36,480 --> 00:32:43,840
and 66.

598
00:32:44,320 --> 00:32:52,320
next slide understand comments

599
00:32:48,240 --> 00:32:52,320
so subject public

600
00:32:52,799 --> 00:32:59,360
key so this is split

601
00:32:56,080 --> 00:33:04,639
into two fields

602
00:32:59,360 --> 00:33:04,639
where one is an int specifying the

603
00:33:05,279 --> 00:33:11,039
the algorithm and for some of the always

604
00:33:08,960 --> 00:33:13,200
also the curve

605
00:33:11,039 --> 00:33:16,000
in red text here support point

606
00:33:13,200 --> 00:33:19,279
compressed x-509 search

607
00:33:16,000 --> 00:33:23,200
well after submitting this presentation

608
00:33:19,279 --> 00:33:26,399
i we realized that this could supported

609
00:33:23,200 --> 00:33:29,039
quite easily without increasing the size

610
00:33:26,399 --> 00:33:32,139
so that is actually supported in the

611
00:33:29,039 --> 00:33:34,720
zero 3 version by using

612
00:33:32,140 --> 00:33:37,760
[Music]

613
00:33:34,720 --> 00:33:41,279
some other values on the octet

614
00:33:37,760 --> 00:33:44,039
so what is added if

615
00:33:41,279 --> 00:33:45,679
zero four is the value for uh

616
00:33:44,039 --> 00:33:48,480
uncompressed

617
00:33:45,679 --> 00:33:50,399
in in in in the their encoded

618
00:33:48,480 --> 00:33:50,840
certificate and two and three are used

619
00:33:50,399 --> 00:33:53,760
for

620
00:33:50,840 --> 00:33:56,879
compressed so this

621
00:33:53,760 --> 00:33:58,000
in the seaboard encoding we use two and

622
00:33:56,880 --> 00:33:59,840
three now for

623
00:33:58,000 --> 00:34:01,120
something that was uncompressed in the

624
00:33:59,840 --> 00:34:04,320
certificate

625
00:34:01,120 --> 00:34:06,799
and minus two and three four

626
00:34:04,320 --> 00:34:09,279
if it was already compressed in the

627
00:34:06,799 --> 00:34:13,918
certificate

628
00:34:09,280 --> 00:34:18,399
uh then signature algorithm this

629
00:34:13,918 --> 00:34:18,399
duplicate signature is removed

630
00:34:18,839 --> 00:34:25,040
uh then

631
00:34:22,000 --> 00:34:28,159
signature algoriths

632
00:34:25,040 --> 00:34:31,199
it's in general these are

633
00:34:28,159 --> 00:34:34,560
in the city bits this is an oid

634
00:34:31,199 --> 00:34:37,040
plus a parameter which is of type

635
00:34:34,560 --> 00:34:37,040
annie

636
00:34:37,839 --> 00:34:47,359
many or most algorithmic parameters

637
00:34:43,440 --> 00:34:47,359
some exceptions are

638
00:34:47,760 --> 00:34:51,520
or is the encryption public keys and

639
00:34:50,480 --> 00:34:54,800
signatures

640
00:34:51,520 --> 00:34:58,560
pkcs 1.5 they have

641
00:34:54,800 --> 00:35:02,079
parameters equals null the draft now

642
00:34:58,560 --> 00:35:03,839
states that um you just

643
00:35:02,079 --> 00:35:07,280
treat them as they are not there and

644
00:35:03,839 --> 00:35:10,720
then you have to put back the null

645
00:35:07,280 --> 00:35:13,920
of used for the pss

646
00:35:10,720 --> 00:35:17,839
algorithms and ecc public keys they

647
00:35:13,920 --> 00:35:21,440
do have parameters i don't know how

648
00:35:17,839 --> 00:35:22,960
well used pss or it's some of the pss

649
00:35:21,440 --> 00:35:25,920
the pss with short

650
00:35:22,960 --> 00:35:28,960
two is using parameters it says which

651
00:35:25,920 --> 00:35:28,960
short tree is not

652
00:35:29,520 --> 00:35:33,280
ecc public keys have parameters where

653
00:35:32,400 --> 00:35:37,760
you can

654
00:35:33,280 --> 00:35:40,640
specify an arbitrary elliptic curve

655
00:35:37,760 --> 00:35:42,320
or they use a parameter which is a named

656
00:35:40,640 --> 00:35:45,839
curve

657
00:35:42,320 --> 00:35:49,359
so the suggestion in this in the draft

658
00:35:45,839 --> 00:35:52,799
is to not support

659
00:35:49,359 --> 00:35:56,078
pss with short two and

660
00:35:52,800 --> 00:35:58,640
only support ecc public keys

661
00:35:56,079 --> 00:35:59,760
with named curves and then encode the

662
00:35:58,640 --> 00:36:02,799
name code

663
00:35:59,760 --> 00:36:06,400
curve in the integer uh

664
00:36:02,800 --> 00:36:06,960
also added a relative or it's not a

665
00:36:06,400 --> 00:36:10,240
relative

666
00:36:06,960 --> 00:36:13,920
way support for a raw or id

667
00:36:10,240 --> 00:36:17,680
so you can support

668
00:36:13,920 --> 00:36:20,320
keys public key size that have not been

669
00:36:17,680 --> 00:36:20,319
registered

670
00:36:22,400 --> 00:36:25,760
i think maybe next slide is a

671
00:36:24,240 --> 00:36:30,560
continuation of

672
00:36:25,760 --> 00:36:30,560
these slides we can probably go to next

673
00:36:31,520 --> 00:36:38,400
and here is so

674
00:36:34,640 --> 00:36:40,720
in the last versions we made tables with

675
00:36:38,400 --> 00:36:42,400
supported algorithms and basically

676
00:36:40,720 --> 00:36:45,759
looked at all the

677
00:36:42,400 --> 00:36:49,359
algorithms without parameters that

678
00:36:45,760 --> 00:36:53,599
have that are could potentially be

679
00:36:49,359 --> 00:36:56,000
used and also like future

680
00:36:53,599 --> 00:36:57,760
things like hash based signatures that

681
00:36:56,000 --> 00:37:00,079
have registrations but

682
00:36:57,760 --> 00:37:02,000
i don't know if they're in use in

683
00:37:00,079 --> 00:37:05,520
practice

684
00:37:02,000 --> 00:37:06,720
uh should also probably differentiate

685
00:37:05,520 --> 00:37:10,400
between

686
00:37:06,720 --> 00:37:13,839
one and two byte identifiers so that

687
00:37:10,400 --> 00:37:16,079
things that are used for constrained iot

688
00:37:13,839 --> 00:37:17,279
and are actually used get one byte and

689
00:37:16,079 --> 00:37:20,839
the rest get

690
00:37:17,280 --> 00:37:25,280
two byte identifiers

691
00:37:20,839 --> 00:37:25,279
um and uh

692
00:37:25,680 --> 00:37:31,279
two five five and by stress coordinate

693
00:37:28,480 --> 00:37:33,680
should probably be added in the future

694
00:37:31,280 --> 00:37:34,480
and as a comment from carson this summer

695
00:37:33,680 --> 00:37:39,040
one is

696
00:37:34,480 --> 00:37:41,520
needed in root certificates

697
00:37:39,040 --> 00:37:42,880
which is self-signed so the signature

698
00:37:41,520 --> 00:37:46,160
doesn't really matter

699
00:37:42,880 --> 00:37:47,200
if it's weak there yeah are there any

700
00:37:46,160 --> 00:37:50,640
comments which

701
00:37:47,200 --> 00:37:53,680
algorithms to support is this

702
00:37:50,640 --> 00:37:56,560
is the assumptions made here

703
00:37:53,680 --> 00:37:57,520
sound do we need to support any more

704
00:37:56,560 --> 00:38:00,880
algorithms with

705
00:37:57,520 --> 00:38:04,320
with parameters i think that

706
00:38:00,880 --> 00:38:07,680
could be done by just adding that

707
00:38:04,320 --> 00:38:10,800
um you identify it with a integer

708
00:38:07,680 --> 00:38:10,799
or an array

709
00:38:13,119 --> 00:38:19,760
do we need to support i think pss

710
00:38:16,320 --> 00:38:23,280
with um short two and

711
00:38:19,760 --> 00:38:26,320
elliptic curve with arbitrary

712
00:38:23,280 --> 00:38:28,480
coordinates i think these are the one

713
00:38:26,320 --> 00:38:30,800
and do we see any future algorithms

714
00:38:28,480 --> 00:38:34,720
having parameter the current trend seems

715
00:38:30,800 --> 00:38:37,440
to be in peaks to

716
00:38:34,720 --> 00:38:47,839
not use any parameters and encode

717
00:38:37,440 --> 00:38:47,839
everything in the oid

718
00:38:54,720 --> 00:38:58,640
there's a comment from ulla here on

719
00:38:57,280 --> 00:39:00,240
maybe you want to take it himself but

720
00:38:58,640 --> 00:39:02,640
it's about

721
00:39:00,240 --> 00:39:04,000
ayana procedures for one versus two byte

722
00:39:02,640 --> 00:39:07,598
decisions

723
00:39:04,000 --> 00:39:07,599
for new registrations in the future

724
00:39:10,560 --> 00:39:19,359
yeah if for this draft i have added

725
00:39:15,599 --> 00:39:22,240
that so there are um

726
00:39:19,359 --> 00:39:23,040
for these new these are new registers

727
00:39:22,240 --> 00:39:25,839
for the

728
00:39:23,040 --> 00:39:27,040
seaboard certificate created by the

729
00:39:25,839 --> 00:39:30,560
seaboard certificate

730
00:39:27,040 --> 00:39:33,839
draw of them for i think the

731
00:39:30,560 --> 00:39:38,160
current what the suggestion now is that

732
00:39:33,839 --> 00:39:41,200
one might require itf action i think

733
00:39:38,160 --> 00:39:42,160
and or standard action or and you might

734
00:39:41,200 --> 00:39:57,839
require

735
00:39:42,160 --> 00:39:57,839
just expert review

736
00:39:58,079 --> 00:40:05,839
it's good okay if there's no more

737
00:40:02,160 --> 00:40:08,078
comments let's move

738
00:40:05,839 --> 00:40:08,078
on

739
00:40:09,599 --> 00:40:17,280
so is your subject so there was

740
00:40:13,440 --> 00:40:20,800
quite a lot of comments from i think

741
00:40:17,280 --> 00:40:24,160
larry hank maybe

742
00:40:20,800 --> 00:40:28,079
russ or him also about

743
00:40:24,160 --> 00:40:31,759
issue and subject early versions of this

744
00:40:28,079 --> 00:40:32,160
draft had a very strict profiling which

745
00:40:31,760 --> 00:40:36,079
is

746
00:40:32,160 --> 00:40:36,078
where it assumed extremely much

747
00:40:36,839 --> 00:40:43,279
uh

748
00:40:38,640 --> 00:40:45,680
about the subject and issue

749
00:40:43,280 --> 00:40:47,920
and those especially comments about the

750
00:40:45,680 --> 00:40:52,240
issue that we cannot really make

751
00:40:47,920 --> 00:40:55,359
such strict assumptions

752
00:40:52,240 --> 00:40:59,040
the current draft

753
00:40:55,359 --> 00:40:59,040
tries to basically support

754
00:40:59,119 --> 00:41:01,599
everything

755
00:41:03,040 --> 00:41:08,640
except that it's only support printed

756
00:41:05,599 --> 00:41:08,640
string and utf

757
00:41:08,880 --> 00:41:16,319
8. i think that is

758
00:41:12,400 --> 00:41:20,720
should be okay also makes

759
00:41:16,319 --> 00:41:24,160
try to make optimizations so

760
00:41:20,720 --> 00:41:29,118
as in general everything is coded as a

761
00:41:24,160 --> 00:41:31,598
array of relative distinguished names

762
00:41:29,119 --> 00:41:35,520
but there's if there's only one relative

763
00:41:31,599 --> 00:41:37,760
distinguished train the array is omitted

764
00:41:35,520 --> 00:41:39,440
the relative distinguished name is

765
00:41:37,760 --> 00:41:42,640
itself encoded as an

766
00:41:39,440 --> 00:41:46,640
array and this was

767
00:41:42,640 --> 00:41:50,560
based on a comment on

768
00:41:46,640 --> 00:41:54,480
that we should not use use map as the

769
00:41:50,560 --> 00:41:54,480
theoretically the order of the map

770
00:41:54,720 --> 00:42:02,399
is it's unordered so we change this

771
00:41:58,640 --> 00:42:03,359
also to an array and if the array only

772
00:42:02,400 --> 00:42:06,480
contains one

773
00:42:03,359 --> 00:42:10,560
attribute it's encoded as a

774
00:42:06,480 --> 00:42:14,160
text string now it only con contains a

775
00:42:10,560 --> 00:42:17,359
utf string encoded common name it's

776
00:42:14,160 --> 00:42:20,319
the array it's array is omitted and

777
00:42:17,359 --> 00:42:23,480
its encoders only a text string and if

778
00:42:20,319 --> 00:42:28,160
the text string contains the ui

779
00:42:23,480 --> 00:42:31,839
ui 64 it's encoded as

780
00:42:28,160 --> 00:42:34,960
eight bytes instead

781
00:42:31,839 --> 00:42:38,720
and further this specification says that

782
00:42:34,960 --> 00:42:41,839
if the eui 64 is

783
00:42:38,720 --> 00:42:45,439
created from mac

784
00:42:41,839 --> 00:42:48,160
48 it's encoded as a

785
00:42:45,440 --> 00:42:48,160
six byte

786
00:42:50,960 --> 00:42:54,720
byte string instead

787
00:42:54,800 --> 00:42:58,480
here there's a lot of several issues on

788
00:42:57,680 --> 00:43:01,839
the github

789
00:42:58,480 --> 00:43:05,599
created one thing is that

790
00:43:01,839 --> 00:43:10,839
i think the unclear whether

791
00:43:05,599 --> 00:43:13,520
the how the eui 64 is encoded in the

792
00:43:10,839 --> 00:43:16,319
certificate

793
00:43:13,520 --> 00:43:17,040
i don't know if that is really specified

794
00:43:16,319 --> 00:43:20,800
well

795
00:43:17,040 --> 00:43:25,200
in some draft we assume it's

796
00:43:20,800 --> 00:43:29,280
on this form where x's are

797
00:43:25,200 --> 00:43:32,399
hex and if it was created by a max

798
00:43:29,280 --> 00:43:35,680
48 you have ff f e

799
00:43:32,400 --> 00:43:38,800
in the middle uh then

800
00:43:35,680 --> 00:43:39,759
reading i triple e specifications i just

801
00:43:38,800 --> 00:43:42,800
got more

802
00:43:39,760 --> 00:43:46,000
confused seems to be ff f

803
00:43:42,800 --> 00:43:48,400
e or ffff in the middle

804
00:43:46,000 --> 00:43:49,280
also both wikipedia and i'll typically

805
00:43:48,400 --> 00:43:52,720
says that the

806
00:43:49,280 --> 00:43:56,000
eui 64 encoding from a mac

807
00:43:52,720 --> 00:44:01,439
address is deprecated

808
00:43:56,000 --> 00:44:03,200
so maybe we should not encourage that

809
00:44:01,440 --> 00:44:04,560
i.e we should not have any special

810
00:44:03,200 --> 00:44:08,879
handling of

811
00:44:04,560 --> 00:44:12,240
mac address and also a related issue is

812
00:44:08,880 --> 00:44:15,200
that mac address is today

813
00:44:12,240 --> 00:44:16,479
very much in some cases some

814
00:44:15,200 --> 00:44:20,078
environments

815
00:44:16,480 --> 00:44:23,040
randomized so basically it's not

816
00:44:20,079 --> 00:44:24,960
suitable for having a certificate but

817
00:44:23,040 --> 00:44:28,160
maybe it's because of that

818
00:44:24,960 --> 00:44:31,599
this practice has been deprecated

819
00:44:28,160 --> 00:44:35,279
um i think there's people in here that

820
00:44:31,599 --> 00:44:38,640
knows and carsten is in queue

821
00:44:35,280 --> 00:44:42,079
please go ahead because i just ran into

822
00:44:38,640 --> 00:44:45,040
one of my usual little issues

823
00:44:42,079 --> 00:44:45,920
when you try to have an invertible

824
00:44:45,040 --> 00:44:49,920
encoding

825
00:44:45,920 --> 00:44:51,520
of the mac addresses into binary and

826
00:44:49,920 --> 00:44:54,400
back into text

827
00:44:51,520 --> 00:44:55,599
then you run into lowercase uppercase

828
00:44:54,400 --> 00:44:59,440
issues

829
00:44:55,599 --> 00:45:03,280
so i have no idea how x509 handles the

830
00:44:59,440 --> 00:45:07,920
case here they probably should have some

831
00:45:03,280 --> 00:45:09,680
some determinate algorithm for that but

832
00:45:07,920 --> 00:45:12,960
i don't know so let's

833
00:45:09,680 --> 00:45:16,399
check that and of course in general

834
00:45:12,960 --> 00:45:20,000
whether mac addresses are a

835
00:45:16,400 --> 00:45:21,839
very useful subjects uh we will have to

836
00:45:20,000 --> 00:45:22,880
decide this from the corpus that there

837
00:45:21,839 --> 00:45:24,880
is no

838
00:45:22,880 --> 00:45:26,640
value judgment here it's just the

839
00:45:24,880 --> 00:45:27,760
question do people use that or do they

840
00:45:26,640 --> 00:45:31,680
not use that

841
00:45:27,760 --> 00:45:33,359
and if they use we should support it

842
00:45:31,680 --> 00:45:34,960
and i don't think we have privacy

843
00:45:33,359 --> 00:45:37,759
considerations here because if they

844
00:45:34,960 --> 00:45:40,079
already are using mac addresses then

845
00:45:37,760 --> 00:45:41,040
they already have made the decision not

846
00:45:40,079 --> 00:45:46,880
to be

847
00:45:41,040 --> 00:45:49,759
very privacy aware

848
00:45:46,880 --> 00:45:51,440
good uh a very good comment i have not

849
00:45:49,760 --> 00:45:53,839
thought about the lower upper

850
00:45:51,440 --> 00:45:54,480
case i guess that goes back to if there

851
00:45:53,839 --> 00:45:58,839
is any

852
00:45:54,480 --> 00:46:00,720
format for how you encode a ui 64 in a

853
00:45:58,839 --> 00:46:03,920
certificate i would like to

854
00:46:00,720 --> 00:46:06,160
answer fraser's question in the chat

855
00:46:03,920 --> 00:46:07,440
does it make sense to have these special

856
00:46:06,160 --> 00:46:10,560
cases

857
00:46:07,440 --> 00:46:14,240
um really the question is who's

858
00:46:10,560 --> 00:46:15,520
going to do these conversions

859
00:46:14,240 --> 00:46:17,680
i mean the whole point is that the

860
00:46:15,520 --> 00:46:21,200
constraint device never sees

861
00:46:17,680 --> 00:46:22,799
sn1 so the the conversion is done on a

862
00:46:21,200 --> 00:46:26,000
less constrained

863
00:46:22,800 --> 00:46:28,400
device and there we should have the

864
00:46:26,000 --> 00:46:29,440
the power to add a couple of lines of

865
00:46:28,400 --> 00:46:32,560
code to do

866
00:46:29,440 --> 00:46:32,880
such a special case so i'm i'm generally

867
00:46:32,560 --> 00:46:36,880
in

868
00:46:32,880 --> 00:46:39,839
in favor of uh doing encodings of

869
00:46:36,880 --> 00:46:40,160
really expensive text-based encodings

870
00:46:39,839 --> 00:46:44,480
like

871
00:46:40,160 --> 00:46:48,078
like this three bytes uh per byte

872
00:46:44,480 --> 00:46:50,160
uh hex encoding of mac addresses

873
00:46:48,079 --> 00:46:51,359
that since mac addresses already are not

874
00:46:50,160 --> 00:46:54,078
exactly small

875
00:46:51,359 --> 00:46:55,520
that's probably worth it if they are

876
00:46:54,079 --> 00:46:56,800
actually used and that's something that

877
00:46:55,520 --> 00:46:59,520
i don't know

878
00:46:56,800 --> 00:47:00,960
yeah this saves a lot of bytes i think

879
00:46:59,520 --> 00:47:04,160
it saves like 18

880
00:47:00,960 --> 00:47:11,839
bytes if you have a going from text

881
00:47:04,160 --> 00:47:11,839
representation to six bytes

882
00:47:14,160 --> 00:47:20,399
for the explanation um

883
00:47:18,000 --> 00:47:21,440
any more comments on this i think this

884
00:47:20,400 --> 00:47:24,720
is something

885
00:47:21,440 --> 00:47:26,720
we definitely need more input on from

886
00:47:24,720 --> 00:47:30,000
people at

887
00:47:26,720 --> 00:47:38,879
new eui 64 and

888
00:47:30,000 --> 00:47:42,720
practices in this field

889
00:47:38,880 --> 00:47:42,720
uh maybe move on

890
00:47:46,640 --> 00:47:53,520
yes there is so here is uh

891
00:47:50,240 --> 00:47:56,640
yeah so this is continuation about so

892
00:47:53,520 --> 00:47:59,839
we created a table and a red

893
00:47:56,640 --> 00:48:03,680
registry for attribute

894
00:47:59,839 --> 00:48:05,599
types and

895
00:48:03,680 --> 00:48:08,720
the proposal right now is to only

896
00:48:05,599 --> 00:48:09,280
support printable string and utf-8

897
00:48:08,720 --> 00:48:11,520
string

898
00:48:09,280 --> 00:48:12,559
and the difference between them or

899
00:48:11,520 --> 00:48:16,079
signal

900
00:48:12,559 --> 00:48:18,960
as the sign of the value

901
00:48:16,079 --> 00:48:19,760
you see here so a utf printable string

902
00:48:18,960 --> 00:48:23,359
is

903
00:48:19,760 --> 00:48:26,160
1 and the utf string comma name is

904
00:48:23,359 --> 00:48:26,160
-1

905
00:48:28,400 --> 00:48:34,640
if anybody i i

906
00:48:31,599 --> 00:48:36,640
anything else all does not seem to

907
00:48:34,640 --> 00:48:39,040
support me i guess there is has not been

908
00:48:36,640 --> 00:48:42,319
any new inventions on how to

909
00:48:39,040 --> 00:48:43,119
on attribute types either since 5 280

910
00:48:42,319 --> 00:48:45,759
was

911
00:48:43,119 --> 00:48:45,760
written

912
00:48:46,880 --> 00:48:50,720
something we identify was the printable

913
00:48:49,040 --> 00:48:54,720
string only constrained

914
00:48:50,720 --> 00:48:57,759
contains 6.2 bits of the information per

915
00:48:54,720 --> 00:48:59,598
character it could be compressed but i

916
00:48:57,760 --> 00:49:03,839
don't know if that's a

917
00:48:59,599 --> 00:49:06,240
good id then for example in tls

918
00:49:03,839 --> 00:49:07,119
you could if this is a certificate type

919
00:49:06,240 --> 00:49:10,399
you could use

920
00:49:07,119 --> 00:49:12,880
compression on top of this and then

921
00:49:10,400 --> 00:49:15,040
compressing each string in this in some

922
00:49:12,880 --> 00:49:17,760
way would probably

923
00:49:15,040 --> 00:49:19,040
increase the total size and also it

924
00:49:17,760 --> 00:49:21,440
makes it

925
00:49:19,040 --> 00:49:23,440
much harder then you cannot read the

926
00:49:21,440 --> 00:49:26,800
text strings in uh

927
00:49:23,440 --> 00:49:30,079
in for example cbr.me or any c board

928
00:49:26,800 --> 00:49:32,640
encoder easily but it's just a

929
00:49:30,079 --> 00:49:32,640
note that

930
00:49:33,520 --> 00:49:38,640
there could be room for compression

931
00:49:42,839 --> 00:49:47,680
um

932
00:49:44,000 --> 00:49:47,680
organization point

933
00:49:49,520 --> 00:49:53,520
identifier is that

934
00:49:54,960 --> 00:50:01,440
yeah organization okay

935
00:49:58,319 --> 00:50:03,759
so suggestion here from steve fans to

936
00:50:01,440 --> 00:50:03,760
add

937
00:50:04,000 --> 00:50:13,839
a new attribute type i guess

938
00:50:14,160 --> 00:50:19,279
seems good i added to the list and here

939
00:50:17,520 --> 00:50:22,480
it's

940
00:50:19,280 --> 00:50:24,640
here it's very easy to add

941
00:50:22,480 --> 00:50:26,000
adding new attribute types as long as

942
00:50:24,640 --> 00:50:26,720
they have the same encoding it's

943
00:50:26,000 --> 00:50:29,119
just

944
00:50:26,720 --> 00:50:32,879
[Music]

945
00:50:29,119 --> 00:50:32,880
a registration of a new int

946
00:50:37,359 --> 00:50:42,319
okay next slide

947
00:50:43,280 --> 00:50:49,920
so validity

948
00:50:46,319 --> 00:50:52,240
was a comment from jim to add

949
00:50:49,920 --> 00:50:53,599
generalized time as well we have done

950
00:50:52,240 --> 00:50:57,680
that

951
00:50:53,599 --> 00:51:00,880
in there zero three

952
00:50:57,680 --> 00:51:04,399
both you tc time and general's time the

953
00:51:00,880 --> 00:51:07,200
proposal is to encode them using

954
00:51:04,400 --> 00:51:09,359
a horner's method with different bases

955
00:51:07,200 --> 00:51:13,359
as you can see the formula

956
00:51:09,359 --> 00:51:16,000
here on the slide and uts utc time and

957
00:51:13,359 --> 00:51:18,319
generalized time can be encoded

958
00:51:16,000 --> 00:51:20,839
the difference they encode as four or

959
00:51:18,319 --> 00:51:23,839
five byte

960
00:51:20,839 --> 00:51:23,839
respectively

961
00:51:24,400 --> 00:51:28,400
and the coding can quite easily be done

962
00:51:27,280 --> 00:51:32,400
by

963
00:51:28,400 --> 00:51:36,079
modeling and subtraction operations

964
00:51:32,400 --> 00:51:39,599
also comment from jim why we don't use

965
00:51:36,079 --> 00:51:42,559
you this unix time and

966
00:51:39,599 --> 00:51:43,280
there is i think that can be discussed

967
00:51:42,559 --> 00:51:46,400
there's

968
00:51:43,280 --> 00:51:49,920
some some disadvantages one

969
00:51:46,400 --> 00:51:52,960
is that unix time cannot support leap

970
00:51:49,920 --> 00:51:58,559
seconds which is a part

971
00:51:52,960 --> 00:51:58,559
of x of rfc 5280

972
00:51:58,880 --> 00:52:05,520
also when implementing i

973
00:52:02,160 --> 00:52:06,558
my feeling is that there is unix time is

974
00:52:05,520 --> 00:52:11,040
not

975
00:52:06,559 --> 00:52:13,200
back to and from unix time is not really

976
00:52:11,040 --> 00:52:14,240
well supported on all systems or

977
00:52:13,200 --> 00:52:17,439
platforms but

978
00:52:14,240 --> 00:52:17,759
maybe i'm right wrong and also at least

979
00:52:17,440 --> 00:52:20,960
on

980
00:52:17,760 --> 00:52:23,440
ins c c plus plus

981
00:52:20,960 --> 00:52:25,839
one of the i don't remember if it was

982
00:52:23,440 --> 00:52:28,880
two unix timer from you next time

983
00:52:25,839 --> 00:52:32,480
made use of local time

984
00:52:28,880 --> 00:52:35,440
by default so if you want unix

985
00:52:32,480 --> 00:52:35,839
if you want utc time you need to add

986
00:52:35,440 --> 00:52:38,880
your

987
00:52:35,839 --> 00:52:38,880
time soon

988
00:52:40,720 --> 00:52:45,680
having i don't know if if you don't have

989
00:52:43,839 --> 00:52:46,000
it supported implement implementing unix

990
00:52:45,680 --> 00:52:49,520
time

991
00:52:46,000 --> 00:52:53,200
is a lot more complicated than

992
00:52:49,520 --> 00:52:53,200
implementing this

993
00:52:56,640 --> 00:53:00,000
as you need to know a lot of about leap

994
00:52:59,680 --> 00:53:02,399
year

995
00:53:00,000 --> 00:53:05,280
handling the leap year handling is so

996
00:53:02,400 --> 00:53:05,280
complicated that

997
00:53:05,359 --> 00:53:07,839
unix

998
00:53:10,000 --> 00:53:16,480
committee actually got it wrong for the

999
00:53:13,040 --> 00:53:16,480
first specification

1000
00:53:16,880 --> 00:53:20,960
but otherwise the unix time and this

1001
00:53:19,599 --> 00:53:25,760
encoding would create

1002
00:53:20,960 --> 00:53:28,720
would use exactly as many bytes

1003
00:53:25,760 --> 00:53:30,000
boot representation you can compare

1004
00:53:28,720 --> 00:53:33,118
directly

1005
00:53:30,000 --> 00:53:36,160
with this formula you cannot

1006
00:53:33,119 --> 00:53:39,520
calculate differences in

1007
00:53:36,160 --> 00:53:42,720
time time periods from the compressed

1008
00:53:39,520 --> 00:53:44,160
values that you can do in unix time as

1009
00:53:42,720 --> 00:53:57,839
it just

1010
00:53:44,160 --> 00:54:00,078
counting the number of seconds

1011
00:53:57,839 --> 00:54:00,078
and

1012
00:54:08,720 --> 00:54:15,839
transparency comments that five to eight

1013
00:54:12,480 --> 00:54:19,520
requires the time to be in utc

1014
00:54:15,839 --> 00:54:22,640
um that is

1015
00:54:19,520 --> 00:54:25,839
i my understanding is that or

1016
00:54:22,640 --> 00:54:27,040
five to 80 requires that if if you use

1017
00:54:25,839 --> 00:54:30,720
the time

1018
00:54:27,040 --> 00:54:33,200
previous earlier than 2050 and you're

1019
00:54:30,720 --> 00:54:36,720
forced to use generalized time if you

1020
00:54:33,200 --> 00:54:39,040
have a time after 2050

1021
00:54:36,720 --> 00:54:40,480
but my understanding is that that's not

1022
00:54:39,040 --> 00:54:44,480
always followed in

1023
00:54:40,480 --> 00:54:46,559
practice for example brazil has

1024
00:54:44,480 --> 00:54:47,680
government has requirements that you

1025
00:54:46,559 --> 00:54:50,160
shall always use

1026
00:54:47,680 --> 00:54:51,680
generalized time for example you

1027
00:54:50,160 --> 00:54:55,118
misunderstood my comment

1028
00:54:51,680 --> 00:54:58,640
the the time is always

1029
00:54:55,119 --> 00:55:03,599
in utc uh okay sorry yeah the

1030
00:54:58,640 --> 00:55:06,960
format is uh before

1031
00:55:03,599 --> 00:55:06,960
yes whether or not

1032
00:55:07,200 --> 00:55:12,799
the decade digits are carried or not

1033
00:55:10,559 --> 00:55:12,799
yes

1034
00:55:19,520 --> 00:55:22,640
and i don't think there is only carries

1035
00:55:22,160 --> 00:55:26,720
second

1036
00:55:22,640 --> 00:55:26,720
so i don't know uh

1037
00:55:26,960 --> 00:55:34,240
i can't think of in a certificate where

1038
00:55:28,880 --> 00:55:35,599
a leap second matters

1039
00:55:34,240 --> 00:55:37,520
it's just a matter of could you

1040
00:55:35,599 --> 00:55:39,280
reproduce the digits

1041
00:55:37,520 --> 00:55:42,480
that appeared in the certificate so you

1042
00:55:39,280 --> 00:55:42,480
could check the signature

1043
00:55:45,599 --> 00:55:51,839
i think in unix time you cannot but on

1044
00:55:49,359 --> 00:55:57,920
the other hand lip seconds is a very

1045
00:55:51,839 --> 00:56:01,119
small small corner case and probably not

1046
00:55:57,920 --> 00:56:02,160
used but what matters in responding to

1047
00:56:01,119 --> 00:56:05,200
jim's comment

1048
00:56:02,160 --> 00:56:07,118
is that you could reproduce the string

1049
00:56:05,200 --> 00:56:10,720
of digits

1050
00:56:07,119 --> 00:56:12,319
so the signature will check yeah

1051
00:56:10,720 --> 00:56:13,959
that you can definitely do with both

1052
00:56:12,319 --> 00:56:16,960
encodings right

1053
00:56:13,960 --> 00:56:20,400
maybe okay if there is

1054
00:56:16,960 --> 00:56:23,599
more discussion needed we can uh

1055
00:56:20,400 --> 00:56:25,440
move it to the list it seems that you

1056
00:56:23,599 --> 00:56:28,480
have a few more

1057
00:56:25,440 --> 00:56:30,160
sites to present john yeah let's move to

1058
00:56:28,480 --> 00:56:32,799
the next slide

1059
00:56:30,160 --> 00:56:33,920
yeah you have like four minutes just for

1060
00:56:32,799 --> 00:56:37,280
information

1061
00:56:33,920 --> 00:56:41,200
yeah thank you so extensions

1062
00:56:37,280 --> 00:56:43,520
ex so this the previous suggestion had

1063
00:56:41,200 --> 00:56:44,720
it was very limited it was meant to be

1064
00:56:43,520 --> 00:56:49,040
very limited

1065
00:56:44,720 --> 00:56:52,799
so this has been completely rewritten

1066
00:56:49,040 --> 00:56:56,000
and now we can encode i think

1067
00:56:52,799 --> 00:56:58,799
basically any

1068
00:56:56,000 --> 00:56:59,280
certificates on the web but of course of

1069
00:56:58,799 --> 00:57:02,960
course

1070
00:56:59,280 --> 00:57:05,520
unless a lot of the extensions more

1071
00:57:02,960 --> 00:57:06,160
non-iot extensions are than just the

1072
00:57:05,520 --> 00:57:09,440
integer

1073
00:57:06,160 --> 00:57:11,359
followed by their encoded byte string

1074
00:57:09,440 --> 00:57:14,799
which is

1075
00:57:11,359 --> 00:57:18,000
not very nice

1076
00:57:14,799 --> 00:57:18,000
can go to the next slide

1077
00:57:18,559 --> 00:57:23,040
so here is the current ayana

1078
00:57:21,400 --> 00:57:26,720
registrations

1079
00:57:23,040 --> 00:57:30,400
we have one table for extensions

1080
00:57:26,720 --> 00:57:33,919
one for extended key usage and one for

1081
00:57:30,400 --> 00:57:36,079
subject alt names i think these are not

1082
00:57:33,920 --> 00:57:38,240
all the subject alternatives was just

1083
00:57:36,079 --> 00:57:40,960
the ones i

1084
00:57:38,240 --> 00:57:42,879
had time to specify right now i think we

1085
00:57:40,960 --> 00:57:46,000
need a lot of input on

1086
00:57:42,880 --> 00:57:48,960
which ex what should be what should the

1087
00:57:46,000 --> 00:57:52,079
initial registration for these

1088
00:57:48,960 --> 00:57:55,440
tables be assuming we assume we

1089
00:57:52,079 --> 00:57:57,240
agree on this encoding the current

1090
00:57:55,440 --> 00:58:00,079
specification do a lot of

1091
00:57:57,240 --> 00:58:02,078
optimization with key usage and basic

1092
00:58:00,079 --> 00:58:04,640
constraints basically

1093
00:58:02,079 --> 00:58:06,079
encoding a lot of things in the integer

1094
00:58:04,640 --> 00:58:08,960
that might not

1095
00:58:06,079 --> 00:58:09,920
actually be worth it in the end and i

1096
00:58:08,960 --> 00:58:13,200
think

1097
00:58:09,920 --> 00:58:16,559
we might want to simplify

1098
00:58:13,200 --> 00:58:20,839
this and take one or two bytes

1099
00:58:16,559 --> 00:58:23,839
extra encoding for encoding

1100
00:58:20,839 --> 00:58:23,839
um

1101
00:58:28,000 --> 00:58:30,640
next slide

1102
00:58:31,599 --> 00:58:38,480
okay yeah next slide so yeah

1103
00:58:34,880 --> 00:58:42,400
so this is yes the overview of

1104
00:58:38,480 --> 00:58:45,760
course and tls and i registered all

1105
00:58:42,400 --> 00:58:46,720
everything based on x5 i thought it was

1106
00:58:45,760 --> 00:58:50,559
easier to

1107
00:58:46,720 --> 00:58:53,680
remove if you don't need change the tls

1108
00:58:50,559 --> 00:58:56,720
to its certificate type instead

1109
00:58:53,680 --> 00:58:58,799
uh gesture to coordinate this with the

1110
00:58:56,720 --> 00:59:03,279
tls working group and this

1111
00:58:58,799 --> 00:59:06,400
maybe when the cosi has adopted

1112
00:59:03,280 --> 00:59:07,520
adopted work on that on this if cozy do

1113
00:59:06,400 --> 00:59:10,160
that

1114
00:59:07,520 --> 00:59:10,160
next slide

1115
00:59:11,839 --> 00:59:19,119
and here is an example

1116
00:59:15,119 --> 00:59:22,799
encoding of the tools itf

1117
00:59:19,119 --> 00:59:26,680
certificate and you

1118
00:59:22,799 --> 00:59:28,559
this this was original their encoding is

1119
00:59:26,680 --> 00:59:32,399
1650 bytes

1120
00:59:28,559 --> 00:59:35,680
the cbor encoding is 1374

1121
00:59:32,400 --> 00:59:39,200
so you save 270 bytes

1122
00:59:35,680 --> 00:59:42,240
but that is only 16

1123
00:59:39,200 --> 00:59:44,640
compared to the 56 percent in the very

1124
00:59:42,240 --> 00:59:47,759
constrained certificate

1125
00:59:44,640 --> 00:59:48,799
and as you can see the gr what is marked

1126
00:59:47,760 --> 00:59:52,640
with green here

1127
00:59:48,799 --> 00:59:56,880
is the extensions in 7925

1128
00:59:52,640 --> 00:59:59,759
which we have defined cbor

1129
00:59:56,880 --> 01:00:00,240
encoding for the values the other areas

1130
00:59:59,760 --> 01:00:02,400
take

1131
01:00:00,240 --> 01:00:03,839
that their encoding are taken just from

1132
01:00:02,400 --> 01:00:06,480
the certificate

1133
01:00:03,839 --> 01:00:07,359
and i think this is it should be

1134
01:00:06,480 --> 01:00:10,960
discussed

1135
01:00:07,359 --> 01:00:14,400
which extension should be

1136
01:00:10,960 --> 01:00:18,079
we should hand write encodings for or if

1137
01:00:14,400 --> 01:00:21,839
can we come up with a general c-bor

1138
01:00:18,079 --> 01:00:23,359
encoding that just takes the sequences

1139
01:00:21,839 --> 01:00:27,040
and sets of

1140
01:00:23,359 --> 01:00:31,119
asn 1 and map them to

1141
01:00:27,040 --> 01:00:34,640
to see more probably for the

1142
01:00:31,119 --> 01:00:36,480
for the rfc 7925 you probably want some

1143
01:00:34,640 --> 01:00:39,118
special handling but

1144
01:00:36,480 --> 01:00:40,640
for the other you you would probably be

1145
01:00:39,119 --> 01:00:44,480
best with a general

1146
01:00:40,640 --> 01:00:44,480
thing if it can be constructed

1147
01:00:47,040 --> 01:00:50,960
i think that's it probably the last

1148
01:00:49,839 --> 01:00:55,119
title

1149
01:00:50,960 --> 01:00:58,960
yeah we would very much want

1150
01:00:55,119 --> 01:01:02,400
more reviews uh

1151
01:00:58,960 --> 01:01:05,680
people trying to implement this i have

1152
01:01:02,400 --> 01:01:10,000
implemented a dairy inc there to

1153
01:01:05,680 --> 01:01:12,319
seabor which supports large part of

1154
01:01:10,000 --> 01:01:13,920
this i will the plan is to try to

1155
01:01:12,319 --> 01:01:18,480
release that as

1156
01:01:13,920 --> 01:01:21,680
open source in the coming months i will

1157
01:01:18,480 --> 01:01:23,599
write to the list when that happens

1158
01:01:21,680 --> 01:01:25,839
and of course more discussion on the

1159
01:01:23,599 --> 01:01:25,839
list

1160
01:01:29,680 --> 01:01:36,640
okay thank you john

1161
01:01:33,200 --> 01:01:39,839
so i think we are

1162
01:01:36,640 --> 01:01:41,920
approximately right on time so

1163
01:01:39,839 --> 01:01:43,119
thank you everyone for your

1164
01:01:41,920 --> 01:01:46,240
participation

1165
01:01:43,119 --> 01:01:48,240
if there are any questions and comments

1166
01:01:46,240 --> 01:01:51,439
please

1167
01:01:48,240 --> 01:01:57,200
give them on the list

1168
01:01:51,440 --> 01:01:57,200
and yes see you around have a nice day

1169
01:01:57,839 --> 01:02:07,839
thank you

1170
01:04:58,799 --> 01:05:00,880
you

