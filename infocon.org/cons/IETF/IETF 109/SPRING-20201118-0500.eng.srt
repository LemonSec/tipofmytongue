1
00:00:43,840 --> 00:00:45,920
you

2
00:01:05,040 --> 00:01:08,880
okay so we're going to start bruno is

3
00:01:08,000 --> 00:01:10,479
jim

4
00:01:08,880 --> 00:01:12,640
sorry sorry intro i just want to make

5
00:01:10,479 --> 00:01:14,880
sure that the slides are showing

6
00:01:12,640 --> 00:01:16,960
correctly on the screen

7
00:01:14,880 --> 00:01:18,399
yes for me it's not full screen it's up

8
00:01:16,960 --> 00:01:20,640
to you

9
00:01:18,400 --> 00:01:20,640
okay

10
00:01:24,159 --> 00:01:28,880
thank you gentlemen i apparently had

11
00:01:25,759 --> 00:01:32,000
lost my audio reception

12
00:01:28,880 --> 00:01:34,399
but i'm now hearing that thank you we

13
00:01:32,000 --> 00:01:34,400
hear you

14
00:01:36,159 --> 00:01:40,560
so we're going to start uh because we

15
00:01:38,479 --> 00:01:43,679
have a full agenda

16
00:01:40,560 --> 00:01:46,640
so you are in the spring meeting

17
00:01:43,680 --> 00:01:46,640
next slide please

18
00:01:47,600 --> 00:01:52,798
this is no dweller so please not well

19
00:01:50,240 --> 00:01:54,880
this is a set of rules

20
00:01:52,799 --> 00:01:56,960
that we need to comply that all of you

21
00:01:54,880 --> 00:02:00,960
need to comply with

22
00:01:56,960 --> 00:02:04,000
including related to ipr disclosure

23
00:02:00,960 --> 00:02:07,679
uh i'm going to assume that

24
00:02:04,000 --> 00:02:10,479
we're aware this is the third day

25
00:02:07,680 --> 00:02:10,479
next one please

26
00:02:11,200 --> 00:02:16,399
so this is the agenda for for today so

27
00:02:14,080 --> 00:02:18,640
we have full uh full agenda

28
00:02:16,400 --> 00:02:22,080
so we're going to ask each speaker to

29
00:02:18,640 --> 00:02:25,359
stick to the allocated time slot

30
00:02:22,080 --> 00:02:28,560
which includes both presentations on

31
00:02:25,360 --> 00:02:30,640
comments from the working group

32
00:02:28,560 --> 00:02:33,040
and if we have too much or too detailed

33
00:02:30,640 --> 00:02:36,238
commands they will have to be follow up

34
00:02:33,040 --> 00:02:40,879
in the meaningless

35
00:02:36,239 --> 00:02:40,879
any comment or agenda matching

36
00:02:43,440 --> 00:02:48,400
no so otherwise next next slide please

37
00:02:48,879 --> 00:02:52,000
so regarding the meeting the minutes are

38
00:02:50,800 --> 00:02:56,080
collaborative

39
00:02:52,000 --> 00:02:58,640
uh you can connect and uh contribute

40
00:02:56,080 --> 00:02:59,440
and also correct whatever you want

41
00:02:58,640 --> 00:03:01,839
including

42
00:02:59,440 --> 00:03:03,040
your name and your comments so you don't

43
00:03:01,840 --> 00:03:05,599
have to wait for the

44
00:03:03,040 --> 00:03:07,840
minutes to be published you can correct

45
00:03:05,599 --> 00:03:10,879
right now

46
00:03:07,840 --> 00:03:15,519
in terms of queue management

47
00:03:10,879 --> 00:03:18,319
yes something term of management

48
00:03:15,519 --> 00:03:18,800
there is a change for that meeting you

49
00:03:18,319 --> 00:03:21,119
can

50
00:03:18,800 --> 00:03:23,360
under the queue by pressing the right

51
00:03:21,120 --> 00:03:24,879
hand icon

52
00:03:23,360 --> 00:03:27,920
but then you need to separately send

53
00:03:24,879 --> 00:03:27,920
audio to speech

54
00:03:28,080 --> 00:03:31,040
so you have two actions

55
00:03:31,200 --> 00:03:34,879
and please mute yourself when you're not

56
00:03:33,040 --> 00:03:37,519
speaking that we could not have a

57
00:03:34,879 --> 00:03:38,480
background noise and finally you need to

58
00:03:37,519 --> 00:03:41,760
be warned that

59
00:03:38,480 --> 00:03:43,518
sessions are being recorded

60
00:03:41,760 --> 00:03:45,280
to clarify bruno's comment about the

61
00:03:43,519 --> 00:03:47,920
queue you use your hand to

62
00:03:45,280 --> 00:03:48,319
put yourself on the queue then wait till

63
00:03:47,920 --> 00:03:51,280
we

64
00:03:48,319 --> 00:03:51,760
till bruno or one of us calls on you

65
00:03:51,280 --> 00:03:53,840
then

66
00:03:51,760 --> 00:03:55,439
then you then unmute yourself and speak

67
00:03:53,840 --> 00:03:57,280
we do not control we will not

68
00:03:55,439 --> 00:03:59,680
mute or on you me you unless something

69
00:03:57,280 --> 00:04:02,799
goes wrong

70
00:03:59,680 --> 00:04:06,319
yes absolutely you're the one sending

71
00:04:02,799 --> 00:04:06,319
your audio on closing

72
00:04:06,959 --> 00:04:10,000
in time of our working of documents and

73
00:04:08,720 --> 00:04:14,519
working status

74
00:04:10,000 --> 00:04:18,238
so we have five new working documents

75
00:04:14,519 --> 00:04:21,040
srv600 policy young

76
00:04:18,238 --> 00:04:22,078
resource aware segments segment

77
00:04:21,040 --> 00:04:28,639
protections

78
00:04:22,079 --> 00:04:31,600
or srt paths on the bfd for screening

79
00:04:28,639 --> 00:04:32,320
next one uh in time for working for

80
00:04:31,600 --> 00:04:34,720
adoption

81
00:04:32,320 --> 00:04:37,199
we have a call for three documents

82
00:04:34,720 --> 00:04:37,199
currently

83
00:04:37,440 --> 00:04:40,639
one regarding t wampa

84
00:04:39,350 --> 00:04:44,080
[Music]

85
00:04:40,639 --> 00:04:47,360
and one with t1 stomp both have

86
00:04:44,080 --> 00:04:49,599
related the draft being uh adopted uh in

87
00:04:47,360 --> 00:04:53,840
code for adoption in ipm workloads so

88
00:04:49,600 --> 00:04:53,840
already draft for ibm extensions

89
00:04:54,080 --> 00:04:57,359
you may want to follow that also in 90

90
00:04:56,000 --> 00:04:59,280
pm

91
00:04:57,360 --> 00:05:01,120
and we also have a call for adoption for

92
00:04:59,280 --> 00:05:06,400
i savvy six past segment

93
00:05:01,120 --> 00:05:10,320
which is ending in a in a small week

94
00:05:06,400 --> 00:05:13,840
next week

95
00:05:10,320 --> 00:05:15,520
in terms of the future or next working

96
00:05:13,840 --> 00:05:19,280
class call

97
00:05:15,520 --> 00:05:21,039
we are first spring and sh sr

98
00:05:19,280 --> 00:05:23,039
so working press code has been requested

99
00:05:21,039 --> 00:05:25,599
by otters

100
00:05:23,039 --> 00:05:27,440
the shepherd sent commands underneath so

101
00:05:25,600 --> 00:05:30,240
so we are waiting for the

102
00:05:27,440 --> 00:05:31,919
feedback from the orders and next on the

103
00:05:30,240 --> 00:05:35,360
queue will be um

104
00:05:31,919 --> 00:05:36,320
mps pass segment for which the authors

105
00:05:35,360 --> 00:05:39,440
have requested them

106
00:05:36,320 --> 00:05:41,680
watching that's cool

107
00:05:39,440 --> 00:05:44,479
i think today some some more people will

108
00:05:41,680 --> 00:05:48,160
ask for foreign

109
00:05:44,479 --> 00:05:51,680
in terms of isg processing we have a

110
00:05:48,160 --> 00:05:53,520
special network programming document

111
00:05:51,680 --> 00:05:55,039
which is progressing but we still have

112
00:05:53,520 --> 00:05:58,639
one remaining discuss from

113
00:05:55,039 --> 00:06:00,080
ben and then we have the sr young

114
00:05:58,639 --> 00:06:04,319
document which has

115
00:06:00,080 --> 00:06:04,318
just started the ietf last call

116
00:06:05,280 --> 00:06:07,840
next one

117
00:06:08,560 --> 00:06:15,440
so we have another meeting to this week

118
00:06:11,919 --> 00:06:19,039
on friday at least by friday

119
00:06:15,440 --> 00:06:22,880
uh regarding the topic of sr compression

120
00:06:19,039 --> 00:06:25,120
for the ipv6 data planner the wall slot

121
00:06:22,880 --> 00:06:27,440
of friday is dedicated to this subject

122
00:06:25,120 --> 00:06:30,000
and more specifically to to discuss the

123
00:06:27,440 --> 00:06:31,919
work of the design team

124
00:06:30,000 --> 00:06:33,199
so there is one draft on the agenda

125
00:06:31,919 --> 00:06:36,318
which is the

126
00:06:33,199 --> 00:06:38,880
following so it would be uh

127
00:06:36,319 --> 00:06:40,240
more effective if everyone could read

128
00:06:38,880 --> 00:06:41,919
the draft before

129
00:06:40,240 --> 00:06:45,039
so that we can have a productive

130
00:06:41,919 --> 00:06:49,039
discussion on the draft

131
00:06:45,039 --> 00:06:49,039
rather than commenting

132
00:06:50,720 --> 00:06:55,680
and one more thing today on the agenda

133
00:06:54,319 --> 00:06:59,520
we have two slots

134
00:06:55,680 --> 00:07:02,560
regarding the the failure of the segment

135
00:06:59,520 --> 00:07:06,719
endpoint or the segment it's the

136
00:07:02,560 --> 00:07:10,160
9 on antenna it turns out that

137
00:07:06,720 --> 00:07:12,960
we have at least five or six document

138
00:07:10,160 --> 00:07:14,840
documents related to that subject so we

139
00:07:12,960 --> 00:07:18,000
have the segment endpoint

140
00:07:14,840 --> 00:07:20,960
failed and

141
00:07:18,000 --> 00:07:21,599
probably we need more coordination on

142
00:07:20,960 --> 00:07:25,440
that

143
00:07:21,599 --> 00:07:25,919
subject because not all documents are

144
00:07:25,440 --> 00:07:30,240
aligned

145
00:07:25,919 --> 00:07:32,479
on terminology framework

146
00:07:30,240 --> 00:07:34,560
and also we could better align between

147
00:07:32,479 --> 00:07:35,280
the two working groups between because

148
00:07:34,560 --> 00:07:39,199
some others

149
00:07:35,280 --> 00:07:41,039
are focusing on rtgwg

150
00:07:39,199 --> 00:07:43,599
once a working group and some others are

151
00:07:41,039 --> 00:07:47,919
focused in spring working up

152
00:07:43,599 --> 00:07:49,878
which is going to help for for alignment

153
00:07:47,919 --> 00:07:51,919
so we're discussing with the chairs of

154
00:07:49,879 --> 00:07:54,800
rtgwg

155
00:07:51,919 --> 00:07:56,080
on one option that we are considering is

156
00:07:54,800 --> 00:07:59,039
a dedicated session

157
00:07:56,080 --> 00:08:03,359
on that topic it could be an interim

158
00:07:59,039 --> 00:08:03,360
meeting or a meeting for march

159
00:08:04,800 --> 00:08:11,120
and thank you for that

160
00:08:08,160 --> 00:08:13,840
so next is the esketana reading sr

161
00:08:11,120 --> 00:08:13,840
policy

162
00:08:15,680 --> 00:08:22,560
uh good morning uh afternoon evening

163
00:08:19,680 --> 00:08:24,240
uh so this is an update on uh the sr

164
00:08:22,560 --> 00:08:28,080
policy architecture draft

165
00:08:24,240 --> 00:08:28,080
uh yes next slide please

166
00:08:29,440 --> 00:08:33,440
so uh this is just an overview of what

167
00:08:31,280 --> 00:08:35,519
the draft covers uh i mean

168
00:08:33,440 --> 00:08:36,880
i believe all the participants are aware

169
00:08:35,519 --> 00:08:39,760
of it uh

170
00:08:36,880 --> 00:08:41,439
just wanted to flash that slide you

171
00:08:39,760 --> 00:08:45,439
could move to the next one

172
00:08:41,440 --> 00:08:47,440
please jim uh so this draft uh

173
00:08:45,440 --> 00:08:50,240
has been around for a long time now and

174
00:08:47,440 --> 00:08:53,279
it was also presented at the last itf uh

175
00:08:50,240 --> 00:08:54,080
with some updates uh as we know it has a

176
00:08:53,279 --> 00:08:57,120
lot of

177
00:08:54,080 --> 00:08:58,000
deployments uh and implementations as

178
00:08:57,120 --> 00:08:59,519
well

179
00:08:58,000 --> 00:09:01,519
and it's you know one of the important

180
00:08:59,519 --> 00:09:03,600
milestones there are a lot of

181
00:09:01,519 --> 00:09:05,440
other documents in spring and other

182
00:09:03,600 --> 00:09:06,640
working groups that have dependencies on

183
00:09:05,440 --> 00:09:09,600
it

184
00:09:06,640 --> 00:09:10,319
so we want to see how we can take this

185
00:09:09,600 --> 00:09:14,160
work uh

186
00:09:10,320 --> 00:09:17,760
to conclusion uh next slide

187
00:09:14,160 --> 00:09:18,240
uh so uh what are the key updates since

188
00:09:17,760 --> 00:09:22,240
the

189
00:09:18,240 --> 00:09:23,440
last uh last itf meeting and first i

190
00:09:22,240 --> 00:09:25,600
would like to thank

191
00:09:23,440 --> 00:09:26,880
the working group for you know review

192
00:09:25,600 --> 00:09:29,120
and inputs

193
00:09:26,880 --> 00:09:30,880
for all the all of them and they've been

194
00:09:29,120 --> 00:09:34,399
off on the list mostly

195
00:09:30,880 --> 00:09:37,360
and a few offline so the main

196
00:09:34,399 --> 00:09:39,200
part is the composite i would think is a

197
00:09:37,360 --> 00:09:40,320
composite candidate path construct and

198
00:09:39,200 --> 00:09:43,440
we'll talk about it

199
00:09:40,320 --> 00:09:44,080
more uh in the next slide uh apart from

200
00:09:43,440 --> 00:09:46,399
that

201
00:09:44,080 --> 00:09:47,480
there are updates to the srv6 segment

202
00:09:46,399 --> 00:09:51,040
types and

203
00:09:47,480 --> 00:09:53,920
srv6bcd in this document uh

204
00:09:51,040 --> 00:09:55,920
this is for alignment with the srv6

205
00:09:53,920 --> 00:09:59,279
network programming draft which is

206
00:09:55,920 --> 00:10:02,959
you know now uh almost through the

207
00:09:59,279 --> 00:10:04,079
isd evaluation uh these changes are

208
00:10:02,959 --> 00:10:08,000
related to

209
00:10:04,079 --> 00:10:10,399
the fact that we have you know behaviors

210
00:10:08,000 --> 00:10:11,839
uh which are associated with segments so

211
00:10:10,399 --> 00:10:14,160
we have changes

212
00:10:11,839 --> 00:10:16,000
to allow optional specification of those

213
00:10:14,160 --> 00:10:17,519
behavior and sit structure for the

214
00:10:16,000 --> 00:10:20,880
segment types

215
00:10:17,519 --> 00:10:21,279
and then for the srv6bc as well we can

216
00:10:20,880 --> 00:10:24,800
have

217
00:10:21,279 --> 00:10:27,839
multiple visits associated to the same

218
00:10:24,800 --> 00:10:30,560
sr policy uh with you know different

219
00:10:27,839 --> 00:10:32,240
behavior so we wanted to add some of

220
00:10:30,560 --> 00:10:34,959
those clarifications

221
00:10:32,240 --> 00:10:36,079
in this text and then there were some

222
00:10:34,959 --> 00:10:40,719
questions

223
00:10:36,079 --> 00:10:43,920
about colors and bgp multipath scenario

224
00:10:40,720 --> 00:10:46,079
we just added some editorial updates to

225
00:10:43,920 --> 00:10:49,360
clarify those

226
00:10:46,079 --> 00:10:51,279
and then as part of the srt protection

227
00:10:49,360 --> 00:10:51,600
segment protection discussion there was

228
00:10:51,279 --> 00:10:54,320
a

229
00:10:51,600 --> 00:10:55,839
action item to provide some

230
00:10:54,320 --> 00:10:59,040
clarification of

231
00:10:55,839 --> 00:11:01,200
ti lfa considerations or applicability

232
00:10:59,040 --> 00:11:02,399
so there is just a small text added

233
00:11:01,200 --> 00:11:05,120
there based on

234
00:11:02,399 --> 00:11:06,079
inputs and i know there are editorial

235
00:11:05,120 --> 00:11:09,839
updates

236
00:11:06,079 --> 00:11:14,160
needs as well on the draft

237
00:11:09,839 --> 00:11:17,040
next slide please

238
00:11:14,160 --> 00:11:18,480
so one of the uh so as i mentioned one

239
00:11:17,040 --> 00:11:19,680
of the changes is the composite

240
00:11:18,480 --> 00:11:22,800
candidate path and

241
00:11:19,680 --> 00:11:25,599
uh let's look at the motivation for this

242
00:11:22,800 --> 00:11:26,959
uh today sr policy has you know a

243
00:11:25,600 --> 00:11:30,399
dynamic uh

244
00:11:26,959 --> 00:11:33,599
or explicit candidate path right

245
00:11:30,399 --> 00:11:36,480
and let's say that we have a

246
00:11:33,600 --> 00:11:38,560
sr policy with a dynamic candidate path

247
00:11:36,480 --> 00:11:39,600
and it's you know has its objectives so

248
00:11:38,560 --> 00:11:43,599
objectives could be

249
00:11:39,600 --> 00:11:46,720
as an example that affinity to

250
00:11:43,600 --> 00:11:49,839
our preference for nodes and links in

251
00:11:46,720 --> 00:11:53,760
the you know blue or red or green plane

252
00:11:49,839 --> 00:11:55,920
and then we have a steering of services

253
00:11:53,760 --> 00:11:57,360
let's say p and q over different sr

254
00:11:55,920 --> 00:11:59,760
policies

255
00:11:57,360 --> 00:12:01,440
let's take example using bgp based

256
00:11:59,760 --> 00:12:03,680
hearing

257
00:12:01,440 --> 00:12:06,720
so that those service flows stay in the

258
00:12:03,680 --> 00:12:09,519
blue or red plane respectively

259
00:12:06,720 --> 00:12:10,000
but then we have some other use cases or

260
00:12:09,519 --> 00:12:13,440
new use

261
00:12:10,000 --> 00:12:15,360
cases i would say where there is a

262
00:12:13,440 --> 00:12:18,480
different service that needs steering

263
00:12:15,360 --> 00:12:20,880
in a load balance manner over these

264
00:12:18,480 --> 00:12:21,600
two different parts which means let's

265
00:12:20,880 --> 00:12:24,959
say

266
00:12:21,600 --> 00:12:27,200
kind of a 70 30 kind of a load sharing

267
00:12:24,959 --> 00:12:29,518
between the blue and red planes

268
00:12:27,200 --> 00:12:30,560
and then similarly we may have another

269
00:12:29,519 --> 00:12:33,920
one which

270
00:12:30,560 --> 00:12:34,800
wants a load sharing between uh another

271
00:12:33,920 --> 00:12:38,160
uh

272
00:12:34,800 --> 00:12:40,240
pair of planes in a different uh load

273
00:12:38,160 --> 00:12:43,120
sharing factor

274
00:12:40,240 --> 00:12:43,680
uh so the objective or the purpose of uh

275
00:12:43,120 --> 00:12:45,279
this comp

276
00:12:43,680 --> 00:12:46,880
introducing this composite candidate

277
00:12:45,279 --> 00:12:49,360
path is to you know

278
00:12:46,880 --> 00:12:50,079
provide a solution for such use cases so

279
00:12:49,360 --> 00:12:52,160
that

280
00:12:50,079 --> 00:12:54,160
we can have a combination of individual

281
00:12:52,160 --> 00:12:58,079
path objectives and

282
00:12:54,160 --> 00:13:01,519
achieve load balance steering over them

283
00:12:58,079 --> 00:13:01,519
okay next slide please

284
00:13:02,560 --> 00:13:09,199
uh so today we have two types

285
00:13:06,399 --> 00:13:11,519
of candidate pass explicit and dynamic

286
00:13:09,200 --> 00:13:12,800
and here the proposal is to introduce a

287
00:13:11,519 --> 00:13:14,480
new type

288
00:13:12,800 --> 00:13:16,479
which is we're calling it a composite

289
00:13:14,480 --> 00:13:19,360
candidate path

290
00:13:16,480 --> 00:13:20,079
and a composite candidate path would be

291
00:13:19,360 --> 00:13:24,560
nothing but

292
00:13:20,079 --> 00:13:27,599
it would uh you know include uh

293
00:13:24,560 --> 00:13:30,719
a weight as well as a kind of a

294
00:13:27,600 --> 00:13:33,600
let's say pointer or indirection to uh

295
00:13:30,720 --> 00:13:35,120
other policy other sr policies to the

296
00:13:33,600 --> 00:13:37,040
same endpoint

297
00:13:35,120 --> 00:13:38,399
with different colors like we saw in the

298
00:13:37,040 --> 00:13:41,120
previous slide

299
00:13:38,399 --> 00:13:41,839
you know color 1 would mean blue plane

300
00:13:41,120 --> 00:13:44,959
color

301
00:13:41,839 --> 00:13:48,320
2 could mean red plane

302
00:13:44,959 --> 00:13:51,040
and and this is to allow

303
00:13:48,320 --> 00:13:51,600
kind of a combination in a flexible

304
00:13:51,040 --> 00:13:54,160
manner

305
00:13:51,600 --> 00:13:56,320
of uh the intended uh you know

306
00:13:54,160 --> 00:13:59,120
objectives

307
00:13:56,320 --> 00:14:00,480
uh want to uh stress or highlight that

308
00:13:59,120 --> 00:14:04,320
the unit of signaling

309
00:14:00,480 --> 00:14:06,560
from protocols bgp psap

310
00:14:04,320 --> 00:14:08,399
and even you know from a model

311
00:14:06,560 --> 00:14:10,160
perspective young model perspective

312
00:14:08,399 --> 00:14:13,040
it would kind of remain the candidate

313
00:14:10,160 --> 00:14:15,760
path and overall the rules of selection

314
00:14:13,040 --> 00:14:17,680
of the candidate path the preference

315
00:14:15,760 --> 00:14:20,079
you know that which one is active and

316
00:14:17,680 --> 00:14:23,120
the overall framework of sr policy

317
00:14:20,079 --> 00:14:25,599
is uh you know not really changed

318
00:14:23,120 --> 00:14:27,279
so we've had some discussions uh welcome

319
00:14:25,600 --> 00:14:30,959
feedback and inputs on this

320
00:14:27,279 --> 00:14:35,199
uh as well further

321
00:14:30,959 --> 00:14:37,199
next slide please as part of this

322
00:14:35,199 --> 00:14:38,399
candidate composite candidate path there

323
00:14:37,199 --> 00:14:40,719
have been discussion on

324
00:14:38,399 --> 00:14:42,160
you know color usage and how it is

325
00:14:40,720 --> 00:14:45,440
managed

326
00:14:42,160 --> 00:14:47,600
or how it should be managed today all sr

327
00:14:45,440 --> 00:14:49,760
policies have color associated with them

328
00:14:47,600 --> 00:14:51,760
right it's part of the identification of

329
00:14:49,760 --> 00:14:53,760
the sr policy

330
00:14:51,760 --> 00:14:55,120
you know it's that's color and an end

331
00:14:53,760 --> 00:14:57,279
point

332
00:14:55,120 --> 00:15:00,320
and draft has different steering

333
00:14:57,279 --> 00:15:03,600
mechanisms over sr policy

334
00:15:00,320 --> 00:15:06,160
those based on bgp leverage this color

335
00:15:03,600 --> 00:15:08,480
there are other mechanisms like bc which

336
00:15:06,160 --> 00:15:10,959
do not leverage the color

337
00:15:08,480 --> 00:15:12,000
and then there are other mechanisms in

338
00:15:10,959 --> 00:15:15,040
the draft which may

339
00:15:12,000 --> 00:15:16,000
or may not you know leverage or you know

340
00:15:15,040 --> 00:15:18,240
use color

341
00:15:16,000 --> 00:15:20,480
uh i would say that these may be

342
00:15:18,240 --> 00:15:23,440
implementation specific uh

343
00:15:20,480 --> 00:15:25,120
uh mechanisms that uh that you know may

344
00:15:23,440 --> 00:15:27,440
be there

345
00:15:25,120 --> 00:15:28,240
so uh a discussion point for the working

346
00:15:27,440 --> 00:15:30,720
group uh

347
00:15:28,240 --> 00:15:32,000
has been do we you know allocate or

348
00:15:30,720 --> 00:15:35,360
reserve a separate

349
00:15:32,000 --> 00:15:38,720
block for colors uh you know as

350
00:15:35,360 --> 00:15:42,240
has been requested by some members

351
00:15:38,720 --> 00:15:44,639
or do we allow the operator to manage

352
00:15:42,240 --> 00:15:47,600
this color space based on their

353
00:15:44,639 --> 00:15:49,920
you know deployment designs you know

354
00:15:47,600 --> 00:15:50,240
also leveraging whatever is available to

355
00:15:49,920 --> 00:15:51,839
the

356
00:15:50,240 --> 00:15:54,480
implementations that they are working

357
00:15:51,839 --> 00:15:56,720
with so this is something that

358
00:15:54,480 --> 00:15:59,199
would look to get inputs from the

359
00:15:56,720 --> 00:16:01,759
working group

360
00:15:59,199 --> 00:16:01,758
next slide

361
00:16:02,720 --> 00:16:05,839
uh so i believe we are progressing well

362
00:16:05,199 --> 00:16:08,240
towards

363
00:16:05,839 --> 00:16:08,880
working group last call and would like

364
00:16:08,240 --> 00:16:12,160
to check

365
00:16:08,880 --> 00:16:13,360
with the working group if you know we

366
00:16:12,160 --> 00:16:15,920
believe we are

367
00:16:13,360 --> 00:16:18,639
ready uh uh you know to go there or how

368
00:16:15,920 --> 00:16:18,639
we can get there

369
00:16:18,880 --> 00:16:23,839
yes questions yes

370
00:16:25,759 --> 00:16:28,959
can you mute yourself

371
00:16:29,279 --> 00:16:32,959
this is the dark with juniper networks

372
00:16:31,519 --> 00:16:36,240
can you hear me

373
00:16:32,959 --> 00:16:40,079
yes oh uh um can you

374
00:16:36,240 --> 00:16:40,079
go back to slide seven please get them

375
00:16:43,279 --> 00:16:49,519
uh jim the previous yes yeah thank you

376
00:16:46,720 --> 00:16:50,639
oh okay so this is about the block

377
00:16:49,519 --> 00:16:54,639
allocation

378
00:16:50,639 --> 00:16:57,680
for dynamically instantiated sr policies

379
00:16:54,639 --> 00:16:58,240
um we've had exchanges on the email

380
00:16:57,680 --> 00:17:02,880
about

381
00:16:58,240 --> 00:17:04,079
about that iem in favor of allocating a

382
00:17:02,880 --> 00:17:07,919
separate block

383
00:17:04,079 --> 00:17:11,280
for dynamically created

384
00:17:07,919 --> 00:17:12,319
policies uh a separate block of colors i

385
00:17:11,280 --> 00:17:15,439
mean

386
00:17:12,319 --> 00:17:16,319
uh for those uh dynamically created as

387
00:17:15,439 --> 00:17:18,160
our policies

388
00:17:16,319 --> 00:17:20,639
specifically when they are created by a

389
00:17:18,160 --> 00:17:22,720
controller

390
00:17:20,640 --> 00:17:24,240
i'm not sure you want to throw the onus

391
00:17:22,720 --> 00:17:27,679
on the operator

392
00:17:24,240 --> 00:17:29,360
to manage uh such blocks from different

393
00:17:27,679 --> 00:17:31,440
from the many head ends they have in the

394
00:17:29,360 --> 00:17:34,559
network

395
00:17:31,440 --> 00:17:37,039
it will become cumbersome so um

396
00:17:34,559 --> 00:17:39,360
eventually it has to be learned uh

397
00:17:37,039 --> 00:17:40,640
dynamically maybe via a psap or some

398
00:17:39,360 --> 00:17:43,039
other protocol

399
00:17:40,640 --> 00:17:45,440
uh i just wanted to sound this out i

400
00:17:43,039 --> 00:17:47,840
know we've had extreme exchanges on that

401
00:17:45,440 --> 00:17:47,840
so

402
00:17:47,919 --> 00:17:54,000
okay uh sure uh and uh

403
00:17:50,960 --> 00:17:56,960
the uh the motivation for that would be

404
00:17:54,000 --> 00:17:58,799
uh direct if you could clarify that uh

405
00:17:56,960 --> 00:18:00,960
what we

406
00:17:58,799 --> 00:18:03,360
what would you see as the concern if we

407
00:18:00,960 --> 00:18:06,480
were not to do that

408
00:18:03,360 --> 00:18:08,399
yeah so the idea is for hierarchical sr

409
00:18:06,480 --> 00:18:09,679
policies that were introduced uh

410
00:18:08,400 --> 00:18:11,440
i don't know if you're hearing me right

411
00:18:09,679 --> 00:18:14,880
now you are yes yes

412
00:18:11,440 --> 00:18:17,039
yes yes okay uh the hierarchical

413
00:18:14,880 --> 00:18:19,360
sr policies that you introduced i think

414
00:18:17,039 --> 00:18:21,280
there are on the previous slide side six

415
00:18:19,360 --> 00:18:22,399
uh or maybe i'm i'm not sure i'm not

416
00:18:21,280 --> 00:18:25,120
keeping track

417
00:18:22,400 --> 00:18:28,240
um where you presented those uh with

418
00:18:25,120 --> 00:18:30,080
color one and color two

419
00:18:28,240 --> 00:18:31,440
if you can flash that again it might

420
00:18:30,080 --> 00:18:33,439
help

421
00:18:31,440 --> 00:18:34,799
okay okay so basically what you're

422
00:18:33,440 --> 00:18:38,000
saying is there are

423
00:18:34,799 --> 00:18:39,918
some that which do not use uh or we do

424
00:18:38,000 --> 00:18:40,880
not may not operate or may not wish to

425
00:18:39,919 --> 00:18:44,240
use them for

426
00:18:40,880 --> 00:18:46,720
uh steering based on color

427
00:18:44,240 --> 00:18:48,640
right and you know there are other

428
00:18:46,720 --> 00:18:52,720
mechanisms like bcd also

429
00:18:48,640 --> 00:18:55,440
so you're saying that for such it would

430
00:18:52,720 --> 00:18:56,320
you would like to have a different color

431
00:18:55,440 --> 00:18:58,960
right yeah

432
00:18:56,320 --> 00:19:01,200
the practical key is the b set uh i did

433
00:18:58,960 --> 00:19:04,000
mention that and the other one is the

434
00:19:01,200 --> 00:19:05,120
hierarchical policies um as we thought

435
00:19:04,000 --> 00:19:07,919
right

436
00:19:05,120 --> 00:19:09,360
okay sure thanks i think we can we'll

437
00:19:07,919 --> 00:19:14,559
look for more inputs

438
00:19:09,360 --> 00:19:14,559
and take it forward thank you no problem

439
00:19:14,720 --> 00:19:17,200
shut up

440
00:19:19,440 --> 00:19:23,200
uh i'm shady from juniper networks can

441
00:19:21,840 --> 00:19:26,240
you hear me

442
00:19:23,200 --> 00:19:28,310
yes hi siddha yeah so

443
00:19:26,240 --> 00:19:31,200
regarding the composite

444
00:19:28,310 --> 00:19:34,639
[Music]

445
00:19:31,200 --> 00:19:38,000
candidate path so um

446
00:19:34,640 --> 00:19:40,960
we are introducing one more level of

447
00:19:38,000 --> 00:19:44,320
ecmp right which is a hierarchical like

448
00:19:40,960 --> 00:19:46,640
we already had an igp cmp and a

449
00:19:44,320 --> 00:19:48,720
per segment list awaited ecmp and this

450
00:19:46,640 --> 00:19:51,919
is one more level of

451
00:19:48,720 --> 00:19:54,559
a weighted ecmp and and on top like if

452
00:19:51,919 --> 00:19:56,960
there is a bgp service resolving which

453
00:19:54,559 --> 00:20:00,480
which has multipath enabled then that

454
00:19:56,960 --> 00:20:04,000
will be the next level of uh

455
00:20:00,480 --> 00:20:05,039
hierarchy for the ecmp uh it's possible

456
00:20:04,000 --> 00:20:08,000
that that some

457
00:20:05,039 --> 00:20:09,440
platforms may not be capable of doing uh

458
00:20:08,000 --> 00:20:12,080
so many hierarchies and

459
00:20:09,440 --> 00:20:14,960
it will be good some text can be written

460
00:20:12,080 --> 00:20:17,439
uh what should happen in that case

461
00:20:14,960 --> 00:20:18,720
right you know thanks for bringing that

462
00:20:17,440 --> 00:20:20,320
point and i i

463
00:20:18,720 --> 00:20:22,559
completely agree with you there uh

464
00:20:20,320 --> 00:20:24,799
shadda uh this hierarchy that we're

465
00:20:22,559 --> 00:20:27,760
talking about is actually more

466
00:20:24,799 --> 00:20:29,600
like a from a conceptual or of you know

467
00:20:27,760 --> 00:20:33,200
framework perspective

468
00:20:29,600 --> 00:20:36,480
how the draft does not talk about how

469
00:20:33,200 --> 00:20:38,640
they get manifested in the forwarding uh

470
00:20:36,480 --> 00:20:39,600
but if you would like some text to be

471
00:20:38,640 --> 00:20:41,840
added uh

472
00:20:39,600 --> 00:20:43,840
may i suggest that you propose some text

473
00:20:41,840 --> 00:20:46,639
and we can discuss offline and

474
00:20:43,840 --> 00:20:48,480
or on the list and uh you know you can

475
00:20:46,640 --> 00:20:52,799
definitely add it yeah

476
00:20:48,480 --> 00:20:52,799
yeah sure thank you

477
00:21:00,799 --> 00:21:05,200
yeah i have a comment of the composite

478
00:21:03,120 --> 00:21:08,239
uh kennedy parts as well

479
00:21:05,200 --> 00:21:11,039
for me uh you introduce a new kind of

480
00:21:08,240 --> 00:21:12,320
uh kennedy pass it's good but it's a

481
00:21:11,039 --> 00:21:16,320
little bit hard to understand

482
00:21:12,320 --> 00:21:19,360
and i'm glad you can add more text to

483
00:21:16,320 --> 00:21:20,000
us describe it and also do we really

484
00:21:19,360 --> 00:21:24,639
need

485
00:21:20,000 --> 00:21:24,640
to specify that the uh

486
00:21:24,880 --> 00:21:31,440
the end point of the uh can

487
00:21:28,720 --> 00:21:32,559
composite candidate pause should be

488
00:21:31,440 --> 00:21:34,640
identical

489
00:21:32,559 --> 00:21:37,440
must be must be identical i i'm not

490
00:21:34,640 --> 00:21:37,440
really sure about that

491
00:21:37,520 --> 00:21:41,840
uh yes because uh otherwise uh you know

492
00:21:40,559 --> 00:21:44,320
they are

493
00:21:41,840 --> 00:21:45,199
it would be kind of i mean i think it

494
00:21:44,320 --> 00:21:47,678
would be very odd

495
00:21:45,200 --> 00:21:49,039
right to have them go to different

496
00:21:47,679 --> 00:21:52,320
endpoints

497
00:21:49,039 --> 00:21:56,158
it would not fit under the

498
00:21:52,320 --> 00:21:56,559
in the hierarchy right so so maybe i'm

499
00:21:56,159 --> 00:21:59,600
not

500
00:21:56,559 --> 00:22:02,559
getting maybe the point and we can

501
00:21:59,600 --> 00:22:04,080
sure perhaps discuss of the list more

502
00:22:02,559 --> 00:22:07,360
details yes

503
00:22:04,080 --> 00:22:10,320
and and yeah and please uh do

504
00:22:07,360 --> 00:22:12,080
suggest or propose text for any more

505
00:22:10,320 --> 00:22:15,439
clarifications that you think

506
00:22:12,080 --> 00:22:18,879
we should add in there for the draft yes

507
00:22:15,440 --> 00:22:18,880
thank you thank you

508
00:22:24,840 --> 00:22:27,840
noise

509
00:22:31,679 --> 00:22:35,360
a very short comment about

510
00:22:35,760 --> 00:22:42,879
separate colors block

511
00:22:39,440 --> 00:22:45,280
block for non-bgp cases

512
00:22:42,880 --> 00:22:46,240
i think it might bring additional

513
00:22:45,280 --> 00:22:48,480
complexity

514
00:22:46,240 --> 00:22:50,640
because it will require like color

515
00:22:48,480 --> 00:22:54,159
negotiation etc

516
00:22:50,640 --> 00:22:55,840
so from one side it could be helpful but

517
00:22:54,159 --> 00:22:59,760
from another i think

518
00:22:55,840 --> 00:22:59,760
more complexity in this case

519
00:23:00,559 --> 00:23:05,840
uh sure but i i think i mean

520
00:23:03,919 --> 00:23:09,200
i think we have opinions on both side

521
00:23:05,840 --> 00:23:12,399
and we can we can you know work out

522
00:23:09,200 --> 00:23:15,520
the consensus how to go about it

523
00:23:12,400 --> 00:23:17,919
on the list i guess that better

524
00:23:15,520 --> 00:23:17,918
thank you

525
00:23:21,280 --> 00:23:24,960
okay uh thanks uh

526
00:23:25,120 --> 00:23:28,639
okay so so in term of last call uh maybe

527
00:23:27,200 --> 00:23:30,640
we need uh

528
00:23:28,640 --> 00:23:33,120
sometimes to discuss the new additions

529
00:23:30,640 --> 00:23:36,880
in term of color on the

530
00:23:33,120 --> 00:23:39,039
yes we should wait for uh these

531
00:23:36,880 --> 00:23:40,159
conversations to reach our consensus and

532
00:23:39,039 --> 00:23:45,279
then

533
00:23:40,159 --> 00:23:51,840
uh yeah yeah perhaps

534
00:23:45,279 --> 00:23:51,840
thank you thank you next is the rudiger

535
00:23:58,159 --> 00:24:07,520
digger okay thank you

536
00:24:04,240 --> 00:24:07,520
i'm not hearing you

537
00:24:11,039 --> 00:24:16,960
and the idea here suggestion is to apply

538
00:24:14,080 --> 00:24:16,960
segment routing

539
00:24:17,279 --> 00:24:23,360
as an additional mpls trace route option

540
00:24:21,039 --> 00:24:24,799
to lower the total number of end-to-end

541
00:24:23,360 --> 00:24:27,760
lsp validations

542
00:24:24,799 --> 00:24:29,520
as compared to a commodity mpls trace

543
00:24:27,760 --> 00:24:32,720
route

544
00:24:29,520 --> 00:24:35,760
now there's a little text on uh

545
00:24:32,720 --> 00:24:39,120
what other frameworks uh clearly there

546
00:24:35,760 --> 00:24:44,320
if there is a high number of ecmp path

547
00:24:39,120 --> 00:24:44,320
um then the suggested method

548
00:24:45,039 --> 00:24:50,799
leads to a better usage of the

549
00:24:48,000 --> 00:24:54,720
forwarding addresses

550
00:24:50,799 --> 00:24:57,840
which are used to validate the paths

551
00:24:54,720 --> 00:25:01,200
if ecmp is present

552
00:24:57,840 --> 00:25:05,840
it kind of filters out addresses

553
00:25:01,200 --> 00:25:10,720
which go to a part of the network and

554
00:25:05,840 --> 00:25:14,158
well i'd suggest to go on to the next

555
00:25:10,720 --> 00:25:14,559
slide soon there are two things i'd like

556
00:25:14,159 --> 00:25:16,400
to

557
00:25:14,559 --> 00:25:18,799
learn from vendors if they have

558
00:25:16,400 --> 00:25:22,000
implemented that independently

559
00:25:18,799 --> 00:25:25,120
we are applying that for ldp

560
00:25:22,000 --> 00:25:26,880
mpls in dodge telecom segment routing

561
00:25:25,120 --> 00:25:28,158
isn't operational so i didn't check

562
00:25:26,880 --> 00:25:31,200
whether

563
00:25:28,159 --> 00:25:33,679
uh this has been implemented by some of

564
00:25:31,200 --> 00:25:35,279
our vendors and there are more out uh

565
00:25:33,679 --> 00:25:37,200
which are not operational on dutch

566
00:25:35,279 --> 00:25:40,840
telecom i just

567
00:25:37,200 --> 00:25:43,120
would like to know the idea is not that

568
00:25:40,840 --> 00:25:45,760
uh

569
00:25:43,120 --> 00:25:47,279
that that creative that others can't

570
00:25:45,760 --> 00:25:50,640
have it

571
00:25:47,279 --> 00:25:53,600
if there are implementations already out

572
00:25:50,640 --> 00:25:56,000
uh our operators uh like functionality

573
00:25:53,600 --> 00:26:00,320
that is something that i can tell okay

574
00:25:56,000 --> 00:26:00,320
then please switch to the next slide

575
00:26:01,200 --> 00:26:11,360
right this is an example and

576
00:26:05,679 --> 00:26:14,240
it calculates some paths there are 4096

577
00:26:11,360 --> 00:26:15,439
available by all the interfaces and the

578
00:26:14,240 --> 00:26:18,320
parallelity

579
00:26:15,440 --> 00:26:19,200
just think about that the network shown

580
00:26:18,320 --> 00:26:22,080
is also

581
00:26:19,200 --> 00:26:24,080
symmetric on a lower part which i didn't

582
00:26:22,080 --> 00:26:26,960
include in the picture

583
00:26:24,080 --> 00:26:29,039
and then if you start an mpls trace

584
00:26:26,960 --> 00:26:32,720
route with 32

585
00:26:29,039 --> 00:26:35,840
multipath ip addresses uh of course

586
00:26:32,720 --> 00:26:38,960
uh already behind the source router

587
00:26:35,840 --> 00:26:41,760
on the left hand side half of them

588
00:26:38,960 --> 00:26:42,720
go to the lower part and half of them go

589
00:26:41,760 --> 00:26:47,279
to the upper one

590
00:26:42,720 --> 00:26:50,559
except expecting ideal ecmp

591
00:26:47,279 --> 00:26:52,880
and at the router 110 you have left

592
00:26:50,559 --> 00:26:55,760
eight ip destination addresses which

593
00:26:52,880 --> 00:26:58,880
would go to the eight interfaces to

594
00:26:55,760 --> 00:27:01,919
router one two one and another eight

595
00:26:58,880 --> 00:27:05,120
to 120 and ecmp

596
00:27:01,919 --> 00:27:07,600
is not an exact method

597
00:27:05,120 --> 00:27:08,158
the result will be that some interfaces

598
00:27:07,600 --> 00:27:11,279
will see

599
00:27:08,159 --> 00:27:12,159
two ip addresses being routed across it

600
00:27:11,279 --> 00:27:15,120
and others

601
00:27:12,159 --> 00:27:15,760
will see no ip address being routed so

602
00:27:15,120 --> 00:27:19,199
what happens

603
00:27:15,760 --> 00:27:22,720
in rfc ad29 or

604
00:27:19,200 --> 00:27:26,159
rfc 8287 maybe

605
00:27:22,720 --> 00:27:27,200
trace route is that the source router

606
00:27:26,159 --> 00:27:30,399
will start to

607
00:27:27,200 --> 00:27:33,600
measure with another 32 ip addresses

608
00:27:30,399 --> 00:27:38,959
and you will have the same effect again

609
00:27:33,600 --> 00:27:42,480
and only 16 will go to router 110

610
00:27:38,960 --> 00:27:44,240
this increases the likeliness that

611
00:27:42,480 --> 00:27:45,520
you can pass it but you will have the

612
00:27:44,240 --> 00:27:50,320
same problem likely

613
00:27:45,520 --> 00:27:54,240
if you arrive at r120 with

614
00:27:50,320 --> 00:27:57,480
14 or 15 ip addresses only then the next

615
00:27:54,240 --> 00:28:00,480
12 interfaces connecting r120 with

616
00:27:57,480 --> 00:28:00,480
r130

617
00:28:00,960 --> 00:28:04,240
might also be difficult to address them

618
00:28:03,279 --> 00:28:07,840
all so

619
00:28:04,240 --> 00:28:11,120
in operations you will see

620
00:28:07,840 --> 00:28:12,639
what i'd like to call gray interfaces

621
00:28:11,120 --> 00:28:14,559
which you cannot address and then you

622
00:28:12,640 --> 00:28:15,120
will have to start again from rs with

623
00:28:14,559 --> 00:28:18,879
another

624
00:28:15,120 --> 00:28:18,879
set of addresses and

625
00:28:19,760 --> 00:28:23,760
as far as i can tell our staff continues

626
00:28:22,640 --> 00:28:27,520
to tell us

627
00:28:23,760 --> 00:28:30,879
that yeah you in some cases you cannot

628
00:28:27,520 --> 00:28:32,320
address or test all interfaces from a

629
00:28:30,880 --> 00:28:34,559
router start to

630
00:28:32,320 --> 00:28:36,000
with a traceroute to router destination

631
00:28:34,559 --> 00:28:40,080
if you use

632
00:28:36,000 --> 00:28:45,679
ping as it is and the idea which is

633
00:28:40,080 --> 00:28:49,360
shown on the next slide please

634
00:28:45,679 --> 00:28:52,799
is to add segment routing functionality

635
00:28:49,360 --> 00:28:54,959
and that would allow you if a router

636
00:28:52,799 --> 00:28:58,320
source on the left hand side

637
00:28:54,960 --> 00:29:03,039
adds a top label like

638
00:28:58,320 --> 00:29:06,158
for example the notes it

639
00:29:03,039 --> 00:29:10,000
the s is missing notes it 110

640
00:29:06,159 --> 00:29:11,039
and forwards a packet to 110 by segment

641
00:29:10,000 --> 00:29:14,320
routing

642
00:29:11,039 --> 00:29:17,679
and then the and that packet is a simple

643
00:29:14,320 --> 00:29:20,480
a commodity mpls oam packet

644
00:29:17,679 --> 00:29:21,039
uh with of course corrected uh round

645
00:29:20,480 --> 00:29:25,360
trip time

646
00:29:21,039 --> 00:29:28,879
stuff like that uh not roundup time

647
00:29:25,360 --> 00:29:32,959
uh okay i'm a bit tired

648
00:29:28,880 --> 00:29:35,679
sorry uh but but the uh

649
00:29:32,960 --> 00:29:38,159
time to live has to be set correctly uh

650
00:29:35,679 --> 00:29:41,039
then you can forward up to 32

651
00:29:38,159 --> 00:29:42,000
ip destination addresses to that router

652
00:29:41,039 --> 00:29:45,679
you can ignore

653
00:29:42,000 --> 00:29:49,520
um ecmp stuff and and

654
00:29:45,679 --> 00:29:51,600
enable ip packets with a full set of

655
00:29:49,520 --> 00:29:53,039
destination addresses to reach the

656
00:29:51,600 --> 00:29:56,639
router

657
00:29:53,039 --> 00:29:56,960
and that can be done also repeatedly you

658
00:29:56,640 --> 00:30:00,480
could

659
00:29:56,960 --> 00:30:02,159
do that with a packet sent to r120 or

660
00:30:00,480 --> 00:30:05,600
r121

661
00:30:02,159 --> 00:30:06,159
if that is of interest uh what you need

662
00:30:05,600 --> 00:30:09,760
to do

663
00:30:06,159 --> 00:30:10,559
here is we do not need any new protocol

664
00:30:09,760 --> 00:30:14,720
components

665
00:30:10,559 --> 00:30:17,678
so mpls om can stay like this

666
00:30:14,720 --> 00:30:18,399
this is a local improvement on routers

667
00:30:17,679 --> 00:30:20,960
you of course

668
00:30:18,399 --> 00:30:22,559
need to adopt the implementation and you

669
00:30:20,960 --> 00:30:25,600
need a different

670
00:30:22,559 --> 00:30:26,799
state engine inside of the routers we

671
00:30:25,600 --> 00:30:30,000
have implemented that

672
00:30:26,799 --> 00:30:33,360
and our operators like it

673
00:30:30,000 --> 00:30:34,320
that is it if there are comments please

674
00:30:33,360 --> 00:30:38,000
go to the list

675
00:30:34,320 --> 00:30:38,879
and i'd also appreciate if vendors have

676
00:30:38,000 --> 00:30:42,240
implemented that

677
00:30:38,880 --> 00:30:45,679
already to talk to me of course because

678
00:30:42,240 --> 00:30:49,679
i'm not sure whether i'm the only one

679
00:30:45,679 --> 00:30:51,919
right um yep

680
00:30:49,679 --> 00:30:53,279
this is an individual draft if you like

681
00:30:51,919 --> 00:30:55,919
the idea uh

682
00:30:53,279 --> 00:30:57,039
yeah please pick up give a discussion so

683
00:30:55,919 --> 00:30:59,039
that the work can be

684
00:30:57,039 --> 00:31:00,640
picked up if you like it thank you very

685
00:30:59,039 --> 00:31:05,840
much if there are questions of course

686
00:31:00,640 --> 00:31:05,840
i'm happy to answer

687
00:31:06,159 --> 00:31:10,399
thank you bigger maybe if you have

688
00:31:08,480 --> 00:31:11,679
specific questions you can send it on

689
00:31:10,399 --> 00:31:13,600
the list

690
00:31:11,679 --> 00:31:15,360
and eventually the replies could be

691
00:31:13,600 --> 00:31:17,360
private if it's implementation or

692
00:31:15,360 --> 00:31:19,840
roadmap specific

693
00:31:17,360 --> 00:31:22,320
sure could be an idea to kick off the

694
00:31:19,840 --> 00:31:22,320
discussion

695
00:31:22,720 --> 00:31:26,399
if there are no other questions we can

696
00:31:24,320 --> 00:31:29,279
move to a agenda for

697
00:31:26,399 --> 00:31:29,279
generic cnv

698
00:31:31,679 --> 00:31:38,399
hi uh can you hear me yes

699
00:31:34,799 --> 00:31:40,480
okay uh hi uh i'm naked uh from cisco

700
00:31:38,399 --> 00:31:42,399
um so i'll be presenting this draft on

701
00:31:40,480 --> 00:31:46,640
behalf of my co-authors

702
00:31:42,399 --> 00:31:48,879
next slide please

703
00:31:46,640 --> 00:31:50,480
okay so let me start with uh the problem

704
00:31:48,880 --> 00:31:53,679
that we are trying to solve with this uh

705
00:31:50,480 --> 00:31:55,200
draft so uh currently uh you know uh

706
00:31:53,679 --> 00:31:57,039
i'm sure uh you know i've noticed there

707
00:31:55,200 --> 00:31:58,080
are different types of segment ideas

708
00:31:57,039 --> 00:32:00,240
that are proposed with

709
00:31:58,080 --> 00:32:01,360
different uh forwarding you know

710
00:32:00,240 --> 00:32:03,519
instruction or

711
00:32:01,360 --> 00:32:05,039
forwarding semantic associated to these

712
00:32:03,519 --> 00:32:07,440
uh segment ids

713
00:32:05,039 --> 00:32:09,279
so when the segment routing is applied

714
00:32:07,440 --> 00:32:10,080
on mpls data plane we are actually

715
00:32:09,279 --> 00:32:12,320
leveraging

716
00:32:10,080 --> 00:32:14,480
extending and leveraging the the

717
00:32:12,320 --> 00:32:16,960
machinery defined in rfc 8029

718
00:32:14,480 --> 00:32:18,960
for the oem purpose like i know path

719
00:32:16,960 --> 00:32:20,799
validation trace group etc

720
00:32:18,960 --> 00:32:22,000
so in order to do that one of the

721
00:32:20,799 --> 00:32:24,879
primary requirement

722
00:32:22,000 --> 00:32:26,000
right now um as for rfc age 29 is to

723
00:32:24,880 --> 00:32:28,960
define

724
00:32:26,000 --> 00:32:30,559
a new target fac stacks of tlb for each

725
00:32:28,960 --> 00:32:32,559
of the segment id so

726
00:32:30,559 --> 00:32:34,879
this is more like a one-on-one kind of

727
00:32:32,559 --> 00:32:36,158
uh mapping right now where for each of

728
00:32:34,880 --> 00:32:40,640
the segment id

729
00:32:36,159 --> 00:32:43,760
we define a new target fcc stack sub plv

730
00:32:40,640 --> 00:32:45,600
with its own definition so this requires

731
00:32:43,760 --> 00:32:47,360
basically a lot of you know effort and

732
00:32:45,600 --> 00:32:49,678
standardization and also

733
00:32:47,360 --> 00:32:51,360
uh either a domain wide or a node-wide

734
00:32:49,679 --> 00:32:52,799
software upgrade so that uh you know the

735
00:32:51,360 --> 00:32:54,399
initiator of the responder can

736
00:32:52,799 --> 00:32:57,039
understand what uh you know

737
00:32:54,399 --> 00:32:57,600
um sub-tlb is it uh they can pass the

738
00:32:57,039 --> 00:33:00,240
data

739
00:32:57,600 --> 00:33:01,678
uh included uh perform the effect

740
00:33:00,240 --> 00:33:03,120
validation and respond back with the

741
00:33:01,679 --> 00:33:05,120
positive negative response

742
00:33:03,120 --> 00:33:06,320
this basically racers scalability

743
00:33:05,120 --> 00:33:10,479
challenges

744
00:33:06,320 --> 00:33:12,480
um can you go to the next slide

745
00:33:10,480 --> 00:33:13,679
so this is a partial list of uh those

746
00:33:12,480 --> 00:33:16,159
are some of those i know

747
00:33:13,679 --> 00:33:16,720
uh sr effects that are defined recently

748
00:33:16,159 --> 00:33:19,039
so

749
00:33:16,720 --> 00:33:20,559
uh we uh we do start trying uh trying to

750
00:33:19,039 --> 00:33:22,480
uh you know define the standards or

751
00:33:20,559 --> 00:33:25,360
redefine the uh

752
00:33:22,480 --> 00:33:26,080
new sub plbs for uh these um you know sr

753
00:33:25,360 --> 00:33:29,199
effects

754
00:33:26,080 --> 00:33:30,879
uh including the flex algo uh and we

755
00:33:29,200 --> 00:33:33,120
started noticing that i know there seems

756
00:33:30,880 --> 00:33:34,080
to be a plethora of new uh segment ideas

757
00:33:33,120 --> 00:33:36,799
that are coming up and

758
00:33:34,080 --> 00:33:39,678
uh it may not scale if we were to come

759
00:33:36,799 --> 00:33:40,799
up with a new target fcc stacks of plp

760
00:33:39,679 --> 00:33:45,360
for each of these

761
00:33:40,799 --> 00:33:45,360
you know segment ids next slide

762
00:33:46,000 --> 00:33:50,159
so it's not only about you know the

763
00:33:48,559 --> 00:33:52,639
standardization effort or

764
00:33:50,159 --> 00:33:54,000
the upgrades but also the amount of

765
00:33:52,640 --> 00:33:56,080
information required

766
00:33:54,000 --> 00:33:57,039
by the initiator to be included in the

767
00:33:56,080 --> 00:34:00,080
uh

768
00:33:57,039 --> 00:34:04,080
probe or you know the um

769
00:34:00,080 --> 00:34:05,840
the sub tlb in the oem pro and also the

770
00:34:04,080 --> 00:34:08,560
amount of information that needs to be

771
00:34:05,840 --> 00:34:11,199
processed and you know

772
00:34:08,560 --> 00:34:13,040
need to validate basically the effect so

773
00:34:11,199 --> 00:34:16,480
that the responder can reply back with a

774
00:34:13,040 --> 00:34:16,480
positive or negative response

775
00:34:16,960 --> 00:34:22,480
next slide

776
00:34:20,000 --> 00:34:24,320
so uh we took one step back instead of

777
00:34:22,480 --> 00:34:27,119
uh you know blindly defining

778
00:34:24,320 --> 00:34:29,119
news of tlbs uh we thought if there is

779
00:34:27,119 --> 00:34:30,399
any scalable way where we can try to

780
00:34:29,119 --> 00:34:32,159
address this challenge

781
00:34:30,399 --> 00:34:33,440
and uh that's what you know we did with

782
00:34:32,159 --> 00:34:36,159
uh this draft

783
00:34:33,440 --> 00:34:38,000
so instead of defining a one-on-one

784
00:34:36,159 --> 00:34:39,440
basis kind of uh you know segment uh

785
00:34:38,000 --> 00:34:40,639
targeted fcc stack for each of the

786
00:34:39,440 --> 00:34:43,520
segment id

787
00:34:40,639 --> 00:34:44,480
we tried defining one generic segment id

788
00:34:43,520 --> 00:34:47,119
that that could be

789
00:34:44,480 --> 00:34:48,800
applied to validate different types of

790
00:34:47,119 --> 00:34:50,879
you know segment ids

791
00:34:48,800 --> 00:34:53,359
so as part of this what we did is we

792
00:34:50,879 --> 00:34:54,799
proposed a new sub tlp that only carries

793
00:34:53,359 --> 00:34:55,759
the segment id that needs to be

794
00:34:54,800 --> 00:34:57,760
validated

795
00:34:55,760 --> 00:34:59,599
and from the validation the effect

796
00:34:57,760 --> 00:35:01,280
validation point of view

797
00:34:59,599 --> 00:35:03,440
there are two main things that basically

798
00:35:01,280 --> 00:35:05,760
any responding node will do

799
00:35:03,440 --> 00:35:07,280
so when whenever the probe you know

800
00:35:05,760 --> 00:35:09,040
reaches the particular

801
00:35:07,280 --> 00:35:11,200
node the the responding or the

802
00:35:09,040 --> 00:35:13,920
validating node will perform two

803
00:35:11,200 --> 00:35:15,680
basic check one is it the lsp endpoint

804
00:35:13,920 --> 00:35:17,440
for that particular segment id

805
00:35:15,680 --> 00:35:19,279
and did it receive the probe on the

806
00:35:17,440 --> 00:35:22,320
right incoming interface

807
00:35:19,280 --> 00:35:23,359
so by performing this basic to

808
00:35:22,320 --> 00:35:26,000
validation

809
00:35:23,359 --> 00:35:28,160
uh we were able to uh you know validate

810
00:35:26,000 --> 00:35:32,880
different types of segment id using

811
00:35:28,160 --> 00:35:35,520
just one single uh generic sr sub plp

812
00:35:32,880 --> 00:35:35,520
next slide please

813
00:35:35,920 --> 00:35:39,200
so this is the subtly lb uh that we

814
00:35:38,079 --> 00:35:41,119
defined in the draft

815
00:35:39,200 --> 00:35:44,078
um as you could notice uh it simply will

816
00:35:41,119 --> 00:35:48,960
carry the 20 bit uh segment id

817
00:35:44,079 --> 00:35:48,960
that needs to be validated next one

818
00:35:49,520 --> 00:35:53,599
so uh we included a couple of examples

819
00:35:51,760 --> 00:35:55,440
to uh you know explain how

820
00:35:53,599 --> 00:35:58,160
uh this uh you know sub tlp could be

821
00:35:55,440 --> 00:36:01,200
used for validating different types of

822
00:35:58,160 --> 00:36:01,920
segment ids so in this scenario this

823
00:36:01,200 --> 00:36:03,680
basically

824
00:36:01,920 --> 00:36:05,760
include both you know the prefix set for

825
00:36:03,680 --> 00:36:07,520
both the default algorithm and also

826
00:36:05,760 --> 00:36:10,640
flexible algorithm so let's take an

827
00:36:07,520 --> 00:36:12,800
example where node 8 is assigned with

828
00:36:10,640 --> 00:36:14,640
a perfect segment id of sixteen zero

829
00:36:12,800 --> 00:36:15,440
zero zero eight for uh the default

830
00:36:14,640 --> 00:36:17,680
algorithm

831
00:36:15,440 --> 00:36:19,440
and uh sixteen one two eight eight for

832
00:36:17,680 --> 00:36:22,480
uh the flex algorithm algo

833
00:36:19,440 --> 00:36:24,160
128 so the node one when it wants to

834
00:36:22,480 --> 00:36:25,960
validate any of these prefixes let's

835
00:36:24,160 --> 00:36:28,560
assume that it wants to validate

836
00:36:25,960 --> 00:36:29,440
16008 it simply will include this

837
00:36:28,560 --> 00:36:32,640
segment id

838
00:36:29,440 --> 00:36:33,280
as part of the sub tlv in the mpls oem

839
00:36:32,640 --> 00:36:35,759
pro

840
00:36:33,280 --> 00:36:38,079
the request and you know one will send

841
00:36:35,760 --> 00:36:40,320
the traffic

842
00:36:38,079 --> 00:36:42,800
when node 8 receive it like i mentioned

843
00:36:40,320 --> 00:36:45,280
earlier it performs two basic things

844
00:36:42,800 --> 00:36:46,640
is it the uh lsp endpoint for sixteen

845
00:36:45,280 --> 00:36:48,240
zero zero zero eight

846
00:36:46,640 --> 00:36:50,640
and did it receive it on the right

847
00:36:48,240 --> 00:36:52,879
incoming interface so depending on

848
00:36:50,640 --> 00:36:54,078
how uh the uh you know the algo is

849
00:36:52,880 --> 00:36:55,520
enabled in case of

850
00:36:54,079 --> 00:36:57,680
you know different interfaces for

851
00:36:55,520 --> 00:36:59,359
different algorithm or if both algo are

852
00:36:57,680 --> 00:37:02,078
enabled on the same interface

853
00:36:59,359 --> 00:37:02,960
uh it can validate if it uh if it is the

854
00:37:02,079 --> 00:37:04,480
end point

855
00:37:02,960 --> 00:37:06,480
and if it received the probe on the

856
00:37:04,480 --> 00:37:06,960
right incoming interface so based on

857
00:37:06,480 --> 00:37:09,680
this

858
00:37:06,960 --> 00:37:11,280
node 8 will respond back to node 1 which

859
00:37:09,680 --> 00:37:12,720
is the initiator with a positive or a

860
00:37:11,280 --> 00:37:16,880
negative response

861
00:37:12,720 --> 00:37:17,520
next slide so this is another example

862
00:37:16,880 --> 00:37:20,800
where

863
00:37:17,520 --> 00:37:23,119
you know the same machinery can be used

864
00:37:20,800 --> 00:37:26,880
to validate um the adjacency set

865
00:37:23,119 --> 00:37:26,880
so in this case note 7 assigned

866
00:37:26,960 --> 00:37:34,240
parallel adjacency 9 which is

867
00:37:30,000 --> 00:37:36,480
9378 so node 7 can load balance between

868
00:37:34,240 --> 00:37:39,439
link 1 and link 2 to

869
00:37:36,480 --> 00:37:40,720
node 8 when the topmost segment id is

870
00:37:39,440 --> 00:37:42,480
9378

871
00:37:40,720 --> 00:37:45,040
so in this case when node 1 want to

872
00:37:42,480 --> 00:37:46,960
validate 9378 it simply will include

873
00:37:45,040 --> 00:37:49,200
this 9378 in

874
00:37:46,960 --> 00:37:50,560
excuse me in the mpls probe and will

875
00:37:49,200 --> 00:37:53,279
minister the traffic

876
00:37:50,560 --> 00:37:54,240
and when eight receives it again it

877
00:37:53,280 --> 00:37:57,040
performs the

878
00:37:54,240 --> 00:37:57,359
basic two check am i the lsp endpoint

879
00:37:57,040 --> 00:37:58,880
and

880
00:37:57,359 --> 00:38:01,040
did i receive it on the right incoming

881
00:37:58,880 --> 00:38:03,599
interface so in this case

882
00:38:01,040 --> 00:38:04,560
eight can receive the traffic when 9378

883
00:38:03,599 --> 00:38:05,920
is the uh

884
00:38:04,560 --> 00:38:07,759
you know adjacency segment it can

885
00:38:05,920 --> 00:38:09,119
receive the traffic either on the link

886
00:38:07,760 --> 00:38:11,359
one or on link two

887
00:38:09,119 --> 00:38:12,880
so as long as these two basic validation

888
00:38:11,359 --> 00:38:14,480
are checked

889
00:38:12,880 --> 00:38:16,160
node eight will respond back with a

890
00:38:14,480 --> 00:38:16,880
positive response and if any of these

891
00:38:16,160 --> 00:38:18,319
fail

892
00:38:16,880 --> 00:38:22,000
it will respond back with the negative

893
00:38:18,320 --> 00:38:22,000
response next slide

894
00:38:22,240 --> 00:38:26,240
so this is a another example for

895
00:38:23,920 --> 00:38:28,160
parallel set where you know

896
00:38:26,240 --> 00:38:29,279
instead of terminating both the links on

897
00:38:28,160 --> 00:38:31,118
the same

898
00:38:29,280 --> 00:38:33,040
node we're actually terminating it on

899
00:38:31,119 --> 00:38:36,560
different nodes in this case

900
00:38:33,040 --> 00:38:39,599
9378 is load balanced by node 7

901
00:38:36,560 --> 00:38:40,720
to node 8 and also node 88 so again you

902
00:38:39,599 --> 00:38:43,359
know the same procedure

903
00:38:40,720 --> 00:38:44,560
can be applied here and as long as we

904
00:38:43,359 --> 00:38:46,000
are terminating it on the right

905
00:38:44,560 --> 00:38:49,440
interface will be getting a positive

906
00:38:46,000 --> 00:38:49,440
response next slide

907
00:38:50,960 --> 00:38:55,839
so uh one thing uh uh i was kept telling

908
00:38:53,920 --> 00:38:58,880
this like uh you know one of the

909
00:38:55,839 --> 00:39:00,240
uh check to ensure that uh basically as

910
00:38:58,880 --> 00:39:01,359
part of the validation one of the things

911
00:39:00,240 --> 00:39:03,118
that we do is

912
00:39:01,359 --> 00:39:05,520
to ensure that we are receiving the

913
00:39:03,119 --> 00:39:08,240
probe on the right incoming interface

914
00:39:05,520 --> 00:39:09,359
to do that we we basically introduce

915
00:39:08,240 --> 00:39:10,640
this again this is a local

916
00:39:09,359 --> 00:39:13,040
implementation matter but

917
00:39:10,640 --> 00:39:15,040
we included this one one approach as

918
00:39:13,040 --> 00:39:17,680
part of the draft where

919
00:39:15,040 --> 00:39:19,599
each of the node can maintain a table

920
00:39:17,680 --> 00:39:20,640
which is a segment id to the interface

921
00:39:19,599 --> 00:39:23,280
mapping table

922
00:39:20,640 --> 00:39:24,240
which could be easily used to perform

923
00:39:23,280 --> 00:39:25,680
the uh

924
00:39:24,240 --> 00:39:27,680
the check if if you are receiving it on

925
00:39:25,680 --> 00:39:30,078
the right incoming interface so

926
00:39:27,680 --> 00:39:30,799
in this table each of the node will have

927
00:39:30,079 --> 00:39:33,920
all the

928
00:39:30,800 --> 00:39:35,839
local prefix uh sets along with the

929
00:39:33,920 --> 00:39:37,760
respective interface for example if it

930
00:39:35,839 --> 00:39:39,680
is a prefix set that is

931
00:39:37,760 --> 00:39:41,359
associated with the default algorithm

932
00:39:39,680 --> 00:39:43,279
then it could be

933
00:39:41,359 --> 00:39:44,720
you know it can receive the pro from any

934
00:39:43,280 --> 00:39:48,079
of the incoming interface

935
00:39:44,720 --> 00:39:51,598
wherein if it is another so it also

936
00:39:48,079 --> 00:39:53,680
includes the adjacency sid assigned by

937
00:39:51,599 --> 00:39:56,480
the directly connected nodes

938
00:39:53,680 --> 00:39:58,078
for itself so in this case node 8 will

939
00:39:56,480 --> 00:40:02,400
include its prefix set

940
00:39:58,079 --> 00:40:04,480
uh for you know algo0 and also algo128

941
00:40:02,400 --> 00:40:05,920
and it also includes the adjacency set

942
00:40:04,480 --> 00:40:08,480
assigned by node seven

943
00:40:05,920 --> 00:40:10,560
for eight so you would notice that you

944
00:40:08,480 --> 00:40:12,079
know we are not required to maintain any

945
00:40:10,560 --> 00:40:13,599
other details including its own

946
00:40:12,079 --> 00:40:16,079
adjacency set or even

947
00:40:13,599 --> 00:40:17,520
uh the adjacency say designed by node

948
00:40:16,079 --> 00:40:19,920
for uh five or six

949
00:40:17,520 --> 00:40:21,839
all it needs to do is like you know the

950
00:40:19,920 --> 00:40:24,160
include the adjacency set assigned by

951
00:40:21,839 --> 00:40:26,000
the directly connected nodes for itself

952
00:40:24,160 --> 00:40:27,680
so using this table will be able to

953
00:40:26,000 --> 00:40:30,400
validate if you are receiving

954
00:40:27,680 --> 00:40:31,759
the um the probe on the right incoming

955
00:40:30,400 --> 00:40:34,240
interface or not

956
00:40:31,760 --> 00:40:34,240
next slide

957
00:40:36,319 --> 00:40:40,880
yeah so in a nutshell what we are trying

958
00:40:38,800 --> 00:40:43,359
to do was uh you know define

959
00:40:40,880 --> 00:40:44,480
one targeted fcc stack that could help

960
00:40:43,359 --> 00:40:47,598
us validate

961
00:40:44,480 --> 00:40:49,920
multiple types of segment ids so um

962
00:40:47,599 --> 00:40:51,040
one it uh of course drastically reduce

963
00:40:49,920 --> 00:40:52,880
the

964
00:40:51,040 --> 00:40:54,319
standardization effort so we don't

965
00:40:52,880 --> 00:40:55,280
anymore need to have a one-on-one

966
00:40:54,319 --> 00:40:56,720
mapping

967
00:40:55,280 --> 00:40:58,160
for right now for each of the segment

968
00:40:56,720 --> 00:40:58,879
ids we don't need a targeted efficiency

969
00:40:58,160 --> 00:41:01,520
stack

970
00:40:58,880 --> 00:41:02,319
and two we drastically reduce the number

971
00:41:01,520 --> 00:41:04,160
of uh

972
00:41:02,319 --> 00:41:06,480
or the the volume of information that

973
00:41:04,160 --> 00:41:08,078
needs to be included by the initiator

974
00:41:06,480 --> 00:41:09,760
and also the volume of information that

975
00:41:08,079 --> 00:41:13,040
needs to be validated by the uh

976
00:41:09,760 --> 00:41:14,640
the responder and um it could be easily

977
00:41:13,040 --> 00:41:17,040
extendable to accommodate

978
00:41:14,640 --> 00:41:17,920
any future segment ids as long as uh you

979
00:41:17,040 --> 00:41:20,720
know

980
00:41:17,920 --> 00:41:21,119
we're able to use those basic checks

981
00:41:20,720 --> 00:41:23,359
next

982
00:41:21,119 --> 00:41:23,359
please

983
00:41:24,560 --> 00:41:31,359
yeah so uh this draft request um one

984
00:41:28,000 --> 00:41:34,560
um you know uh sub plb uh allocated for

985
00:41:31,359 --> 00:41:36,880
uh tlb type 116 and 21. um

986
00:41:34,560 --> 00:41:38,799
so we are not requesting any new return

987
00:41:36,880 --> 00:41:40,720
code or returns of code we are actually

988
00:41:38,800 --> 00:41:41,839
uh you know reusing the ones that are

989
00:41:40,720 --> 00:41:46,078
defined as part of

990
00:41:41,839 --> 00:41:49,279
8029 and also rfc 80 8287

991
00:41:46,079 --> 00:41:51,520
so this draft doesn't request any new

992
00:41:49,280 --> 00:41:54,240
return code or return support

993
00:41:51,520 --> 00:41:54,240
next step please

994
00:41:55,040 --> 00:41:58,079
yeah so we uh we have this draft

995
00:41:57,119 --> 00:42:00,240
presented in

996
00:41:58,079 --> 00:42:01,680
mpls during last ietf and we'll be

997
00:42:00,240 --> 00:42:04,640
presenting this in

998
00:42:01,680 --> 00:42:05,200
this ietf as well uh so we welcome any

999
00:42:04,640 --> 00:42:08,960
uh

1000
00:42:05,200 --> 00:42:11,520
feedback uh you know we strongly uh

1001
00:42:08,960 --> 00:42:12,400
encourage um the group to read this

1002
00:42:11,520 --> 00:42:15,520
draft and

1003
00:42:12,400 --> 00:42:17,200
share your comments any textual

1004
00:42:15,520 --> 00:42:19,680
contributions are always welcome

1005
00:42:17,200 --> 00:42:20,319
and uh we'll be requesting the mpls

1006
00:42:19,680 --> 00:42:23,359
stairs for

1007
00:42:20,319 --> 00:42:23,359
work group adoption soon

1008
00:42:27,200 --> 00:42:31,839
see hi

1009
00:42:32,079 --> 00:42:36,880
yeah me now yes okay yes how do you

1010
00:42:35,280 --> 00:42:38,160
handle the any cassettes and is there

1011
00:42:36,880 --> 00:42:39,680
any procedure that you

1012
00:42:38,160 --> 00:42:41,359
recommend that the initiator when it

1013
00:42:39,680 --> 00:42:42,160
receives multiple replies and if some

1014
00:42:41,359 --> 00:42:45,200
reply doesn't

1015
00:42:42,160 --> 00:42:46,960
doesn't come in how do you handle that

1016
00:42:45,200 --> 00:42:48,640
so in case of any cast we are not going

1017
00:42:46,960 --> 00:42:50,400
to replicate right so we are not going

1018
00:42:48,640 --> 00:42:53,200
to receive it from multiple uh

1019
00:42:50,400 --> 00:42:54,960
responses unlike the p2mp in case of any

1020
00:42:53,200 --> 00:42:55,839
case we are going to terminate it on the

1021
00:42:54,960 --> 00:42:59,200
nearest

1022
00:42:55,839 --> 00:43:12,160
uh addre or node so i think you know

1023
00:42:59,200 --> 00:43:15,520
we won't be expecting multiple responses

1024
00:43:12,160 --> 00:43:17,680
uh one question so like uh here

1025
00:43:15,520 --> 00:43:19,839
uh does it mean that we just need like

1026
00:43:17,680 --> 00:43:22,879
one bottom effect

1027
00:43:19,839 --> 00:43:25,839
to be validated at the far end oh we

1028
00:43:22,880 --> 00:43:28,480
still need uh like a stack of all the

1029
00:43:25,839 --> 00:43:31,279
facts for each segment

1030
00:43:28,480 --> 00:43:31,839
um so it depends uh it depends on you

1031
00:43:31,280 --> 00:43:33,599
know

1032
00:43:31,839 --> 00:43:35,599
what you want to validate if it does

1033
00:43:33,599 --> 00:43:36,880
multiple effect that needs to be

1034
00:43:35,599 --> 00:43:39,280
validated then

1035
00:43:36,880 --> 00:43:41,839
we may need to include more than one but

1036
00:43:39,280 --> 00:43:43,760
if it is just uh the the bottom most uh

1037
00:43:41,839 --> 00:43:47,040
effect in case of ping then we just need

1038
00:43:43,760 --> 00:43:47,040
to include the bottom most one

1039
00:43:47,119 --> 00:43:55,839
okay thanks

1040
00:43:59,680 --> 00:44:06,839
okay thank you now yeah thank you

1041
00:44:03,119 --> 00:44:09,839
next is a sharla for seamless ssr

1042
00:44:06,839 --> 00:44:09,839
routine

1043
00:44:12,480 --> 00:44:17,119
hello can you hear me yes

1044
00:44:17,680 --> 00:44:22,960
yes so i will be presenting updates to

1045
00:44:20,319 --> 00:44:24,720
the seamless sr draft on behalf of my

1046
00:44:22,960 --> 00:44:27,440
co-authors

1047
00:44:24,720 --> 00:44:27,759
so this was presented in the last iatf

1048
00:44:27,440 --> 00:44:31,440
and

1049
00:44:27,760 --> 00:44:37,839
and we will go through the updates

1050
00:44:31,440 --> 00:44:37,839
to the draft and next slide please

1051
00:44:38,000 --> 00:44:43,280
so um and we will also see one of the

1052
00:44:41,119 --> 00:44:46,319
use cases how it is uh

1053
00:44:43,280 --> 00:44:48,160
solved using segment seamless sr

1054
00:44:46,319 --> 00:44:49,440
which is the end to end low latency use

1055
00:44:48,160 --> 00:44:52,240
case

1056
00:44:49,440 --> 00:44:52,240
next slide please

1057
00:44:55,040 --> 00:45:01,680
so um these are the updates

1058
00:44:58,160 --> 00:45:04,480
on the draft so we added details on how

1059
00:45:01,680 --> 00:45:05,759
intra domain flex algo can be realized

1060
00:45:04,480 --> 00:45:08,640
with pgpct

1061
00:45:05,760 --> 00:45:10,160
basically if you have multiple igp

1062
00:45:08,640 --> 00:45:13,520
domains and each domain has

1063
00:45:10,160 --> 00:45:16,879
deployed a flex algo so

1064
00:45:13,520 --> 00:45:21,520
bgpct can be used to interconnect these

1065
00:45:16,880 --> 00:45:25,839
um and the the flex algorithm

1066
00:45:21,520 --> 00:45:28,400
number can can directly map to the color

1067
00:45:25,839 --> 00:45:30,799
and that color can directly map to the

1068
00:45:28,400 --> 00:45:33,359
transport class

1069
00:45:30,800 --> 00:45:34,240
route target that is carried in bgpct

1070
00:45:33,359 --> 00:45:37,200
and that's how

1071
00:45:34,240 --> 00:45:38,560
you get an end to end connectivity uh

1072
00:45:37,200 --> 00:45:41,839
for that particular

1073
00:45:38,560 --> 00:45:44,799
uh flex algo so

1074
00:45:41,839 --> 00:45:46,560
the other detail that the next detail

1075
00:45:44,800 --> 00:45:47,920
that we added is about color only

1076
00:45:46,560 --> 00:45:50,960
policies

1077
00:45:47,920 --> 00:45:54,560
so let's say there are two domains

1078
00:45:50,960 --> 00:45:55,920
um both are deploying color only

1079
00:45:54,560 --> 00:45:59,520
policies

1080
00:45:55,920 --> 00:46:02,800
so from one domain the color only policy

1081
00:45:59,520 --> 00:46:03,200
uh can be advertised in bgpct to the

1082
00:46:02,800 --> 00:46:05,520
other

1083
00:46:03,200 --> 00:46:07,040
uh domain and so that you get an

1084
00:46:05,520 --> 00:46:09,280
end-to-end connectivity for this

1085
00:46:07,040 --> 00:46:12,560
particular color-only policy

1086
00:46:09,280 --> 00:46:15,119
so in the bgp ct the the the

1087
00:46:12,560 --> 00:46:17,520
in the nlri portion the prefix will be

1088
00:46:15,119 --> 00:46:20,960
zero zero zero and the color

1089
00:46:17,520 --> 00:46:21,920
uh uh will be encoded in the uh route

1090
00:46:20,960 --> 00:46:23,680
target

1091
00:46:21,920 --> 00:46:26,079
uh and there will to to be able to

1092
00:46:23,680 --> 00:46:29,598
advertise multiple of these color only

1093
00:46:26,079 --> 00:46:31,680
policies the route distinguisher enables

1094
00:46:29,599 --> 00:46:34,319
advertisement of these multiple

1095
00:46:31,680 --> 00:46:38,000
color-only policies end-to-end

1096
00:46:34,319 --> 00:46:41,440
and we added some details on the

1097
00:46:38,000 --> 00:46:44,560
use cases and examples

1098
00:46:41,440 --> 00:46:47,200
explaining how these use cases

1099
00:46:44,560 --> 00:46:48,799
work so one is this data sovereignty use

1100
00:46:47,200 --> 00:46:53,118
case

1101
00:46:48,800 --> 00:46:53,119
another is interconnecting ip fabric

1102
00:46:53,440 --> 00:47:00,640
dc use case so basically this use case

1103
00:46:56,880 --> 00:47:00,640
talks about if you have to create

1104
00:47:01,040 --> 00:47:05,040
diverse paths across two dc's how that

1105
00:47:04,400 --> 00:47:09,200
can be

1106
00:47:05,040 --> 00:47:09,200
done using bgpct

1107
00:47:09,599 --> 00:47:14,720
so the next update that we added is

1108
00:47:12,640 --> 00:47:15,920
translating transport classes across

1109
00:47:14,720 --> 00:47:18,720
domains so

1110
00:47:15,920 --> 00:47:19,680
imagine there are two domains uh where

1111
00:47:18,720 --> 00:47:22,558
the

1112
00:47:19,680 --> 00:47:23,118
the colors are do not match like for

1113
00:47:22,559 --> 00:47:25,839
example

1114
00:47:23,119 --> 00:47:28,640
a red color in one domain has a

1115
00:47:25,839 --> 00:47:28,640
different meaning

1116
00:47:28,720 --> 00:47:33,919
in another main so and that maps

1117
00:47:31,920 --> 00:47:35,760
the red color in one domain maps to a

1118
00:47:33,920 --> 00:47:39,200
green color in the other domain

1119
00:47:35,760 --> 00:47:41,920
so this could usually happen when uh

1120
00:47:39,200 --> 00:47:42,720
you know these two are cooperating

1121
00:47:41,920 --> 00:47:46,319
domains

1122
00:47:42,720 --> 00:47:47,680
um uh it could also happen if it's a

1123
00:47:46,319 --> 00:47:51,440
result of some

1124
00:47:47,680 --> 00:47:54,480
network mergers

1125
00:47:51,440 --> 00:47:57,119
so an example has been added

1126
00:47:54,480 --> 00:47:58,559
you know to explain how exactly this

1127
00:47:57,119 --> 00:48:00,319
translating

1128
00:47:58,559 --> 00:48:02,079
the colors across the domain works

1129
00:48:00,319 --> 00:48:04,400
basically the idea is

1130
00:48:02,079 --> 00:48:05,599
the nlri which is the prefix and the

1131
00:48:04,400 --> 00:48:07,680
route distinguisher

1132
00:48:05,599 --> 00:48:09,599
remains same and the route target

1133
00:48:07,680 --> 00:48:12,879
changes across domains

1134
00:48:09,599 --> 00:48:15,520
uh to appropriately

1135
00:48:12,880 --> 00:48:15,520
use the

1136
00:48:16,240 --> 00:48:22,720
the transport tunnels which map to the

1137
00:48:19,839 --> 00:48:26,078
uh required intent

1138
00:48:22,720 --> 00:48:27,759
uh so we also talk about automatic

1139
00:48:26,079 --> 00:48:29,920
creation of transport classes we have

1140
00:48:27,760 --> 00:48:33,920
some details in the next slide

1141
00:48:29,920 --> 00:48:35,760
so uh uh for details of all these

1142
00:48:33,920 --> 00:48:38,960
updates please

1143
00:48:35,760 --> 00:48:41,359
go through the draft and let us know

1144
00:48:38,960 --> 00:48:43,680
if you have any comments next slide

1145
00:48:41,359 --> 00:48:43,680
please

1146
00:48:46,240 --> 00:48:50,479
so automatic creation of these transport

1147
00:48:49,520 --> 00:48:53,520
class so

1148
00:48:50,480 --> 00:48:54,960
so bgp ct is is very similar to bgplu

1149
00:48:53,520 --> 00:48:58,160
right it runs from on the

1150
00:48:54,960 --> 00:49:00,319
border routers and then it it ca it has

1151
00:48:58,160 --> 00:49:00,319
this

1152
00:49:00,480 --> 00:49:04,319
route target which corresponds to this

1153
00:49:02,240 --> 00:49:08,000
transport classes

1154
00:49:04,319 --> 00:49:10,000
um so you would you would require

1155
00:49:08,000 --> 00:49:11,920
these transport classes to be configured

1156
00:49:10,000 --> 00:49:15,359
on these border

1157
00:49:11,920 --> 00:49:17,920
routers so this is an

1158
00:49:15,359 --> 00:49:19,920
uh this automatic creation of transport

1159
00:49:17,920 --> 00:49:21,200
classes explains how that configuration

1160
00:49:19,920 --> 00:49:23,760
can be avoided

1161
00:49:21,200 --> 00:49:25,118
when you have the transport tunnels that

1162
00:49:23,760 --> 00:49:27,520
um that

1163
00:49:25,119 --> 00:49:28,839
with color that maps uh directly to

1164
00:49:27,520 --> 00:49:32,079
these

1165
00:49:28,839 --> 00:49:34,160
uh transport classes uh

1166
00:49:32,079 --> 00:49:35,200
which are which are in turn translated

1167
00:49:34,160 --> 00:49:38,558
into the

1168
00:49:35,200 --> 00:49:41,680
uh route target in the bpg pct so

1169
00:49:38,559 --> 00:49:45,280
um so it's

1170
00:49:41,680 --> 00:49:46,160
kind of um greatly simplifies the

1171
00:49:45,280 --> 00:49:49,280
operations

1172
00:49:46,160 --> 00:49:52,319
um having this automatically happen

1173
00:49:49,280 --> 00:49:52,960
so um the first case is when when when

1174
00:49:52,319 --> 00:49:56,000
the

1175
00:49:52,960 --> 00:49:57,359
transport nulls are based on bgp srte so

1176
00:49:56,000 --> 00:49:59,839
there is this 32-bit

1177
00:49:57,359 --> 00:50:02,319
uh policy color in the sr policy and i

1178
00:49:59,839 --> 00:50:03,359
that translates to a 32-bit transport

1179
00:50:02,319 --> 00:50:06,640
class

1180
00:50:03,359 --> 00:50:10,160
route target uh similarly

1181
00:50:06,640 --> 00:50:11,359
when when the um transport is based on

1182
00:50:10,160 --> 00:50:14,640
flex algo

1183
00:50:11,359 --> 00:50:15,759
the 8-bit algorithm translate to 32-bit

1184
00:50:14,640 --> 00:50:20,160
transport class

1185
00:50:15,760 --> 00:50:20,160
route target and when it is on

1186
00:50:20,640 --> 00:50:24,078
when the tunnels are created based on

1187
00:50:22,319 --> 00:50:26,880
psep the 32-bit color

1188
00:50:24,079 --> 00:50:29,280
in the sr policy identifier tlv that

1189
00:50:26,880 --> 00:50:30,319
translates into a 32-bit transport class

1190
00:50:29,280 --> 00:50:33,839
rt so once

1191
00:50:30,319 --> 00:50:38,079
you have the tunnels created with with

1192
00:50:33,839 --> 00:50:42,558
any of these mechanisms and you have

1193
00:50:38,079 --> 00:50:44,480
bgp sessions created

1194
00:50:42,559 --> 00:50:46,079
across your borders and you enable this

1195
00:50:44,480 --> 00:50:48,240
new family

1196
00:50:46,079 --> 00:50:50,640
um then you automatic you can

1197
00:50:48,240 --> 00:50:55,359
automatically get end-to-end

1198
00:50:50,640 --> 00:50:57,200
tunnels um by this auto

1199
00:50:55,359 --> 00:50:59,119
with use of this automatic creation of

1200
00:50:57,200 --> 00:51:01,919
transport classes

1201
00:50:59,119 --> 00:51:01,920
next slide please

1202
00:51:05,440 --> 00:51:12,319
so here is the use case on

1203
00:51:08,720 --> 00:51:16,480
how can we do end-to-end low latency

1204
00:51:12,319 --> 00:51:20,640
using this seamless sr

1205
00:51:16,480 --> 00:51:22,480
approach so imagine we have these metro

1206
00:51:20,640 --> 00:51:26,078
core metro domains

1207
00:51:22,480 --> 00:51:28,800
different igp domains so intra domain

1208
00:51:26,079 --> 00:51:32,480
low latency paths

1209
00:51:28,800 --> 00:51:34,319
they can be calculated using any of the

1210
00:51:32,480 --> 00:51:35,520
inter domain tunneling mechanisms such

1211
00:51:34,319 --> 00:51:40,160
as flex algo or

1212
00:51:35,520 --> 00:51:44,559
srte or rsvp so the problem is to find

1213
00:51:40,160 --> 00:51:48,480
lowest latency path from pe2 to pe6

1214
00:51:44,559 --> 00:51:48,480
which spans across multiple domains

1215
00:51:48,839 --> 00:51:54,558
so solution is to define a low latency

1216
00:51:52,160 --> 00:51:58,000
transport class

1217
00:51:54,559 --> 00:51:59,760
and then use this intra domain

1218
00:51:58,000 --> 00:52:01,520
accumulate this intra domain latency

1219
00:51:59,760 --> 00:52:04,960
metric in bgp

1220
00:52:01,520 --> 00:52:07,839
so there is this draft ietf

1221
00:52:04,960 --> 00:52:10,240
uh idr performance routing this defines

1222
00:52:07,839 --> 00:52:10,240
a new

1223
00:52:10,559 --> 00:52:14,079
new latency metrics of tlv in the aigp

1224
00:52:13,440 --> 00:52:17,359
attribute

1225
00:52:14,079 --> 00:52:20,800
accumulated igp attribute so this

1226
00:52:17,359 --> 00:52:22,720
accumulated latency metric works very

1227
00:52:20,800 --> 00:52:24,720
similar to

1228
00:52:22,720 --> 00:52:27,118
accumulated igp metric that is instead

1229
00:52:24,720 --> 00:52:28,000
of igp metric it accumulates the latency

1230
00:52:27,119 --> 00:52:31,040
metric

1231
00:52:28,000 --> 00:52:33,520
for example in this rightmost metro

1232
00:52:31,040 --> 00:52:35,599
the latency metric is 10 for the lower

1233
00:52:33,520 --> 00:52:39,599
path and for the

1234
00:52:35,599 --> 00:52:43,359
upper path from abr 7 to p6 also it's 10

1235
00:52:39,599 --> 00:52:43,359
and when the bgp

1236
00:52:43,440 --> 00:52:49,280
advertises this from abr8 to abr

1237
00:52:46,640 --> 00:52:51,118
six uh in the bottom path it will add

1238
00:52:49,280 --> 00:52:53,119
the latency metric of two which

1239
00:52:51,119 --> 00:52:56,400
corresponds to that latency

1240
00:52:53,119 --> 00:52:58,800
for that link ibr6 to avr8

1241
00:52:56,400 --> 00:53:02,720
similarly uh the bottom path the latency

1242
00:52:58,800 --> 00:53:02,720
is 5 so that adds on to this

1243
00:53:04,559 --> 00:53:08,480
latency 10 plus 5 then becomes 15. this

1244
00:53:07,520 --> 00:53:11,520
continues

1245
00:53:08,480 --> 00:53:14,160
on every border router the latency keeps

1246
00:53:11,520 --> 00:53:17,200
getting added onto the the

1247
00:53:14,160 --> 00:53:19,200
existing latency

1248
00:53:17,200 --> 00:53:20,640
and when you receive on pe 2 on the

1249
00:53:19,200 --> 00:53:22,640
ingress when you receive

1250
00:53:20,640 --> 00:53:23,759
both the advertisements from abr 1 and

1251
00:53:22,640 --> 00:53:27,118
abr 2

1252
00:53:23,760 --> 00:53:29,920
for pe 6 the advertisement received from

1253
00:53:27,119 --> 00:53:33,359
abr one has the latency metric of 42

1254
00:53:29,920 --> 00:53:34,400
and the advertisement received from abr

1255
00:53:33,359 --> 00:53:37,520
2 has

1256
00:53:34,400 --> 00:53:40,160
a latency metric of 36

1257
00:53:37,520 --> 00:53:40,160
35

1258
00:53:40,960 --> 00:53:44,640
i don't see the slide now

1259
00:53:47,280 --> 00:53:59,119
yes jim we have rushed the slides

1260
00:53:56,079 --> 00:54:01,920
um so i can continue so we

1261
00:53:59,119 --> 00:54:03,920
so basically what happens is when when

1262
00:54:01,920 --> 00:54:06,240
these two latency metric is received

1263
00:54:03,920 --> 00:54:08,160
similar to how the aigp metric is used

1264
00:54:06,240 --> 00:54:11,520
for bgp best part selection

1265
00:54:08,160 --> 00:54:14,399
selection in a similar way um this

1266
00:54:11,520 --> 00:54:14,880
uh sub tlv from the accumulated latency

1267
00:54:14,400 --> 00:54:17,200
metric

1268
00:54:14,880 --> 00:54:18,160
is used for bgp best path selection and

1269
00:54:17,200 --> 00:54:21,520
that's how

1270
00:54:18,160 --> 00:54:23,920
the lower path which has lowest latency

1271
00:54:21,520 --> 00:54:26,400
metric uh gets um

1272
00:54:23,920 --> 00:54:26,400
chosen

1273
00:54:27,599 --> 00:54:32,160
so that that's pretty much we had so we

1274
00:54:30,319 --> 00:54:35,680
i had request

1275
00:54:32,160 --> 00:54:36,720
review and comments from the working

1276
00:54:35,680 --> 00:54:39,520
group

1277
00:54:36,720 --> 00:54:42,160
and also request possibility of working

1278
00:54:39,520 --> 00:54:42,160
group adoption

1279
00:54:49,440 --> 00:54:52,480
i lost my internet connection for a

1280
00:54:51,119 --> 00:54:54,720
couple of seconds but

1281
00:54:52,480 --> 00:54:57,359
back now so sorry i didn't switch the

1282
00:54:54,720 --> 00:54:57,359
slides there

1283
00:54:57,599 --> 00:55:00,160
thank you jim

1284
00:55:03,760 --> 00:55:09,839
okay uh

1285
00:55:06,799 --> 00:55:13,440
thanks shraddha for the update

1286
00:55:09,839 --> 00:55:15,520
uh the the draft as i believe

1287
00:55:13,440 --> 00:55:16,720
has actually three parts or three

1288
00:55:15,520 --> 00:55:20,079
components uh

1289
00:55:16,720 --> 00:55:23,279
you know it goes into use cases it goes

1290
00:55:20,079 --> 00:55:26,960
into requirements and then it has a

1291
00:55:23,280 --> 00:55:30,319
you know a proposal based on bgpct

1292
00:55:26,960 --> 00:55:31,839
and uh you know i believe uh for the

1293
00:55:30,319 --> 00:55:35,759
problem statement uh

1294
00:55:31,839 --> 00:55:38,960
there are uh there are several uh

1295
00:55:35,760 --> 00:55:39,520
solutions available uh i'm sure you are

1296
00:55:38,960 --> 00:55:42,160
aware of

1297
00:55:39,520 --> 00:55:42,880
uh you know things like hierarchical uh

1298
00:55:42,160 --> 00:55:45,118
pce

1299
00:55:42,880 --> 00:55:46,880
and uh you know other flavors and

1300
00:55:45,119 --> 00:55:48,559
options i'm not sure if

1301
00:55:46,880 --> 00:55:51,200
there are informational drafts about

1302
00:55:48,559 --> 00:55:54,640
that out anywhere

1303
00:55:51,200 --> 00:55:55,439
my question would be is would it not be

1304
00:55:54,640 --> 00:55:58,558
better

1305
00:55:55,440 --> 00:56:02,160
for us as a working group to

1306
00:55:58,559 --> 00:56:03,599
first look at the use cases and the

1307
00:56:02,160 --> 00:56:07,279
requirements

1308
00:56:03,599 --> 00:56:10,720
and you know try to you know

1309
00:56:07,280 --> 00:56:12,960
work on them uh you know while we have

1310
00:56:10,720 --> 00:56:15,040
already solutions that are

1311
00:56:12,960 --> 00:56:18,160
you know and other solutions that are

1312
00:56:15,040 --> 00:56:18,160
already under development

1313
00:56:19,839 --> 00:56:23,119
uh so uh

1314
00:56:25,119 --> 00:56:28,720
yeah so the requirements in the use

1315
00:56:26,799 --> 00:56:31,839
cases yeah definitely

1316
00:56:28,720 --> 00:56:32,399
we can look at them and discuss them uh

1317
00:56:31,839 --> 00:56:35,040
so this

1318
00:56:32,400 --> 00:56:36,240
i believe uh the proposal is is a

1319
00:56:35,040 --> 00:56:39,040
different

1320
00:56:36,240 --> 00:56:42,879
solution than the existing solution so

1321
00:56:39,040 --> 00:56:45,920
it's using bgp based mechanism to

1322
00:56:42,880 --> 00:56:48,480
interconnect multiple domains um

1323
00:56:45,920 --> 00:56:50,480
as far as i understand the existing uh

1324
00:56:48,480 --> 00:56:51,280
solutions are mostly label stacking

1325
00:56:50,480 --> 00:56:55,599
solutions

1326
00:56:51,280 --> 00:56:58,640
um uh where which do not use bgp as uh

1327
00:56:55,599 --> 00:56:58,640
uh you know

1328
00:56:59,280 --> 00:57:05,200
bgp as a mechanism to interconnect uh

1329
00:57:02,720 --> 00:57:06,959
multiple domains so so this architecture

1330
00:57:05,200 --> 00:57:08,879
is mostly an extension to the same

1331
00:57:06,960 --> 00:57:11,520
existing seamless mpls

1332
00:57:08,880 --> 00:57:12,880
architecture and mostly trying to create

1333
00:57:11,520 --> 00:57:15,520
multiple

1334
00:57:12,880 --> 00:57:18,880
um you know bringing in the ability to

1335
00:57:15,520 --> 00:57:21,359
create multiple colored parts end to end

1336
00:57:18,880 --> 00:57:23,200
right i mean i understand uh this thing

1337
00:57:21,359 --> 00:57:25,359
uh my point was that

1338
00:57:23,200 --> 00:57:27,279
there are there are these requirements

1339
00:57:25,359 --> 00:57:29,440
there are the use cases

1340
00:57:27,280 --> 00:57:30,640
uh and i i believe all of this work is

1341
00:57:29,440 --> 00:57:32,960
informational because

1342
00:57:30,640 --> 00:57:36,319
you know this is all about a design

1343
00:57:32,960 --> 00:57:38,000
seamless mpls was also informational

1344
00:57:36,319 --> 00:57:40,000
so my suggestion would be that as a

1345
00:57:38,000 --> 00:57:43,920
working group we tackle

1346
00:57:40,000 --> 00:57:46,799
the requirement and use case first

1347
00:57:43,920 --> 00:57:47,760
and try to you know capture what is

1348
00:57:46,799 --> 00:57:51,040
there

1349
00:57:47,760 --> 00:57:53,920
plus you know so that it's not

1350
00:57:51,040 --> 00:57:56,480
that there is only one solution that's

1351
00:57:53,920 --> 00:57:58,000
available there the working group should

1352
00:57:56,480 --> 00:57:59,760
uh you know if you're documenting

1353
00:57:58,000 --> 00:58:02,559
solution we should have

1354
00:57:59,760 --> 00:58:04,640
you know other solutions also documented

1355
00:58:02,559 --> 00:58:07,200
yeah that's a fair point

1356
00:58:04,640 --> 00:58:08,160
yeah so i mean we can collaborate and

1357
00:58:07,200 --> 00:58:11,680
discuss

1358
00:58:08,160 --> 00:58:14,160
further offline thank you

1359
00:58:11,680 --> 00:58:14,160
maurice

1360
00:58:20,400 --> 00:58:27,200
oh sorry just one comment uh

1361
00:58:23,599 --> 00:58:30,000
i think uh in introductional part a more

1362
00:58:27,200 --> 00:58:32,078
uh comparison or differentiation is

1363
00:58:30,000 --> 00:58:34,839
needed with bgplu

1364
00:58:32,079 --> 00:58:36,160
because currently there is just one

1365
00:58:34,839 --> 00:58:39,119
sentence

1366
00:58:36,160 --> 00:58:41,118
but this solution is better than bgplu

1367
00:58:39,119 --> 00:58:43,839
so i think

1368
00:58:41,119 --> 00:58:45,599
more comparison is needed about this

1369
00:58:43,839 --> 00:58:46,240
yeah sure i'll add more text to the

1370
00:58:45,599 --> 00:58:49,599
draft

1371
00:58:46,240 --> 00:58:53,200
just just for information so

1372
00:58:49,599 --> 00:58:55,760
bgplu um it could give

1373
00:58:53,200 --> 00:58:57,919
a best path from like you want to go

1374
00:58:55,760 --> 00:59:00,720
from pe1 to pe6 which is

1375
00:58:57,920 --> 00:59:03,359
residing in another domain which you plu

1376
00:59:00,720 --> 00:59:07,200
could give you a best path

1377
00:59:03,359 --> 00:59:09,920
um that's one single best path and here

1378
00:59:07,200 --> 00:59:12,078
we are adding the ability to you know

1379
00:59:09,920 --> 00:59:13,520
create multiple paths one green path one

1380
00:59:12,079 --> 00:59:16,799
right path and one blue path

1381
00:59:13,520 --> 00:59:18,720
that's that's the uh at a very high

1382
00:59:16,799 --> 00:59:20,960
level yeah but agree i will add more

1383
00:59:18,720 --> 00:59:20,959
text

1384
00:59:28,960 --> 00:59:33,200
replying to katan's comment i think

1385
00:59:31,680 --> 00:59:34,799
we're looking at two distinct

1386
00:59:33,200 --> 00:59:39,040
requirements here

1387
00:59:34,799 --> 00:59:41,759
one requirement is for coarse-grained te

1388
00:59:39,040 --> 00:59:42,240
between networks that value autonomy

1389
00:59:41,760 --> 00:59:44,400
another

1390
00:59:42,240 --> 00:59:46,000
is for fine-grained te between networks

1391
00:59:44,400 --> 00:59:48,559
that are must much more tightly

1392
00:59:46,000 --> 00:59:51,839
coupled so i think that this draft

1393
00:59:48,559 --> 00:59:51,839
should probably go forward

1394
00:59:54,640 --> 01:00:06,480
satisfying the first requirement

1395
01:00:01,520 --> 01:00:09,839
oh yes ron that's a very valid point

1396
01:00:06,480 --> 01:00:12,640
uh can i respond uh so uh

1397
01:00:09,839 --> 01:00:13,279
yeah i think that was that that was my

1398
01:00:12,640 --> 01:00:15,200
that was

1399
01:00:13,280 --> 01:00:16,400
entirely my point is that we need to

1400
01:00:15,200 --> 01:00:18,240
have this

1401
01:00:16,400 --> 01:00:19,839
clear or better understanding of the

1402
01:00:18,240 --> 01:00:23,439
requirements

1403
01:00:19,839 --> 01:00:25,759
uh no in the working group that was my

1404
01:00:23,440 --> 01:00:25,760
point

1405
01:00:26,839 --> 01:00:29,839
yep

1406
01:00:32,960 --> 01:00:36,480
you hear me yes

1407
01:00:36,559 --> 01:00:43,520
um yeah i'm also responding to ketan

1408
01:00:40,799 --> 01:00:44,640
i would say that if this document is

1409
01:00:43,520 --> 01:00:48,319
targeted as

1410
01:00:44,640 --> 01:00:50,879
a standards track document

1411
01:00:48,319 --> 01:00:51,599
then having a solution would be

1412
01:00:50,880 --> 01:00:53,760
important

1413
01:00:51,599 --> 01:00:54,960
as having a requirements document would

1414
01:00:53,760 --> 01:00:56,720
be important

1415
01:00:54,960 --> 01:01:00,079
so that we are not coming up with too

1416
01:00:56,720 --> 01:01:03,200
many solutions for the same problem

1417
01:01:00,079 --> 01:01:06,000
given that it's targeted right now as

1418
01:01:03,200 --> 01:01:06,640
informational i think it's fine for it

1419
01:01:06,000 --> 01:01:10,160
to

1420
01:01:06,640 --> 01:01:12,240
set out what its goals are and uh

1421
01:01:10,160 --> 01:01:13,680
and set out how it wants to achieve

1422
01:01:12,240 --> 01:01:15,839
those goals

1423
01:01:13,680 --> 01:01:17,118
i think the overhead of writing a

1424
01:01:15,839 --> 01:01:19,200
requirements document

1425
01:01:17,119 --> 01:01:21,040
is probably not the best way to deal

1426
01:01:19,200 --> 01:01:21,680
with it the other thing i'd like to

1427
01:01:21,040 --> 01:01:24,880
point out

1428
01:01:21,680 --> 01:01:28,000
is that um

1429
01:01:24,880 --> 01:01:29,599
we've we've gone over the

1430
01:01:28,000 --> 01:01:31,040
you know whether we should have

1431
01:01:29,599 --> 01:01:34,079
hierarchy or not

1432
01:01:31,040 --> 01:01:37,440
and hierarchy has a lot of good

1433
01:01:34,079 --> 01:01:38,559
sides to it which is you do information

1434
01:01:37,440 --> 01:01:42,240
hiding

1435
01:01:38,559 --> 01:01:42,240
uh you don't blow up um

1436
01:01:42,400 --> 01:01:47,760
you know any one domain or in the case

1437
01:01:45,760 --> 01:01:50,640
of hierarchical controllers

1438
01:01:47,760 --> 01:01:52,960
any one controller at the same time you

1439
01:01:50,640 --> 01:01:54,240
lose granularity you lose end-to-end

1440
01:01:52,960 --> 01:01:56,079
visibility

1441
01:01:54,240 --> 01:01:58,160
so there are trade-offs and it's not the

1442
01:01:56,079 --> 01:02:01,599
case that one solution will fit all

1443
01:01:58,160 --> 01:02:04,799
so i think if you have two

1444
01:02:01,599 --> 01:02:05,119
different approaches so long as they're

1445
01:02:04,799 --> 01:02:08,559
not

1446
01:02:05,119 --> 01:02:13,599
standards it's it should be a fine thing

1447
01:02:08,559 --> 01:02:13,599
to document both thanks

1448
01:02:17,039 --> 01:02:20,160
that is a great presentation i read the

1449
01:02:19,520 --> 01:02:22,240
document

1450
01:02:20,160 --> 01:02:24,160
and i strongly feel this is this should

1451
01:02:22,240 --> 01:02:27,038
be adopted i think it's very useful

1452
01:02:24,160 --> 01:02:28,480
uh uh i think that you documented both

1453
01:02:27,039 --> 01:02:29,039
use cases and requirements and the

1454
01:02:28,480 --> 01:02:31,039
solution

1455
01:02:29,039 --> 01:02:33,760
uh the possibility of how to implement

1456
01:02:31,039 --> 01:02:34,799
this uh the way the seamless mpl is used

1457
01:02:33,760 --> 01:02:36,880
in backhaul

1458
01:02:34,799 --> 01:02:37,839
uh there's a huge potential for this and

1459
01:02:36,880 --> 01:02:40,960
i i

1460
01:02:37,839 --> 01:02:49,839
really support this thanks

1461
01:02:40,960 --> 01:02:49,839
thanks so much

1462
01:02:51,280 --> 01:02:55,119
i mean i agree with all that is said in

1463
01:02:53,520 --> 01:02:57,520
substance for sure

1464
01:02:55,119 --> 01:02:58,480
uh this draft is currently marked as

1465
01:02:57,520 --> 01:03:01,038
standard stack

1466
01:02:58,480 --> 01:03:02,160
so that was one part the other part is

1467
01:03:01,039 --> 01:03:05,119
that uh

1468
01:03:02,160 --> 01:03:07,279
we definitely want to present in all the

1469
01:03:05,119 --> 01:03:09,839
choices and all the solutions

1470
01:03:07,280 --> 01:03:11,039
and therefore it is you know if we are

1471
01:03:09,839 --> 01:03:13,440
doing informational

1472
01:03:11,039 --> 01:03:14,640
documents for the solution then as a

1473
01:03:13,440 --> 01:03:17,200
working group we should

1474
01:03:14,640 --> 01:03:18,400
try to present you know the various

1475
01:03:17,200 --> 01:03:21,919
options

1476
01:03:18,400 --> 01:03:25,200
so that operators can make the choices

1477
01:03:21,920 --> 01:03:27,599
i still feel that there is a value to

1478
01:03:25,200 --> 01:03:28,558
have a requirements separately discussed

1479
01:03:27,599 --> 01:03:30,960
and worked on

1480
01:03:28,559 --> 01:03:32,240
in this case because it would again help

1481
01:03:30,960 --> 01:03:33,200
whoever is looking at those

1482
01:03:32,240 --> 01:03:35,839
informational

1483
01:03:33,200 --> 01:03:38,000
documents to kind of like you know have

1484
01:03:35,839 --> 01:03:39,279
a reference point to compare the pros

1485
01:03:38,000 --> 01:03:45,839
and cons

1486
01:03:39,280 --> 01:03:45,839
you know for their specific use cases

1487
01:03:48,319 --> 01:03:51,599
we're going to close the queue of

1488
01:03:49,839 --> 01:03:52,720
security on on run and just as a

1489
01:03:51,599 --> 01:03:55,119
reminder you

1490
01:03:52,720 --> 01:03:56,839
you don't have to restate the the points

1491
01:03:55,119 --> 01:03:59,839
you've made before

1492
01:03:56,839 --> 01:03:59,839
everything

1493
01:04:01,200 --> 01:04:04,799
i don't want to get out of the queue um

1494
01:04:03,039 --> 01:04:08,960
i didn't mean to stay on

1495
01:04:04,799 --> 01:04:08,960
sorry welcome

1496
01:04:09,119 --> 01:04:12,240
a solutions document is all well and

1497
01:04:11,359 --> 01:04:15,920
good

1498
01:04:12,240 --> 01:04:17,919
however we shouldn't make the

1499
01:04:15,920 --> 01:04:19,119
solution document block on the

1500
01:04:17,920 --> 01:04:20,720
requirements document

1501
01:04:19,119 --> 01:04:22,319
i'm sorry i said that wrong it's all

1502
01:04:20,720 --> 01:04:23,439
well and good to have a requirements

1503
01:04:22,319 --> 01:04:25,359
document

1504
01:04:23,440 --> 01:04:27,200
but we shouldn't make the solutions

1505
01:04:25,359 --> 01:04:29,598
document block on it

1506
01:04:27,200 --> 01:04:32,160
we have some bitter experience where we

1507
01:04:29,599 --> 01:04:34,400
have solutions blocking on

1508
01:04:32,160 --> 01:04:35,920
requirements documents for ridiculous

1509
01:04:34,400 --> 01:04:40,480
amounts of time and we don't want to

1510
01:04:35,920 --> 01:04:43,599
repeat that experience

1511
01:04:40,480 --> 01:04:46,640
okay so we're going to try the new tool

1512
01:04:43,599 --> 01:04:49,839
uh we're going to do a show of hands

1513
01:04:46,640 --> 01:04:51,520
um so who have read the document

1514
01:04:49,839 --> 01:04:53,680
and if you have read do you believe it's

1515
01:04:51,520 --> 01:04:56,960
a it's a good start

1516
01:04:53,680 --> 01:04:58,640
sorry if so raise your hand if you

1517
01:04:56,960 --> 01:05:09,839
believe it's not a good start

1518
01:04:58,640 --> 01:05:09,839
do not raise your hand explicitly

1519
01:05:19,280 --> 01:05:22,880
okay so we have a fair number of people

1520
01:05:21,280 --> 01:05:26,400
who have read the draft

1521
01:05:22,880 --> 01:05:30,240
22 percent on diverse opinions

1522
01:05:26,400 --> 01:05:33,119
so uh we we would welcome more

1523
01:05:30,240 --> 01:05:36,160
discussion on the list

1524
01:05:33,119 --> 01:05:37,760
but if the main discussion is to um i

1525
01:05:36,160 --> 01:05:41,200
mean a discussion on the

1526
01:05:37,760 --> 01:05:43,680
on the subject if the discussion is

1527
01:05:41,200 --> 01:05:44,960
what it must be about splitting the

1528
01:05:43,680 --> 01:05:48,319
document into or

1529
01:05:44,960 --> 01:05:50,480
or not it's something that we can

1530
01:05:48,319 --> 01:05:52,720
discuss later by two i mean requirements

1531
01:05:50,480 --> 01:05:54,799
on solution

1532
01:05:52,720 --> 01:05:55,919
but i would welcome some discussion on

1533
01:05:54,799 --> 01:06:01,119
on the solution

1534
01:05:55,920 --> 01:06:05,839
being proposed thank you

1535
01:06:01,119 --> 01:06:05,839
next is zafar for iom

1536
01:06:08,400 --> 01:06:15,520
hi can you hear me bob yes

1537
01:06:11,440 --> 01:06:19,039
oh great many thanks all

1538
01:06:15,520 --> 01:06:23,599
and i will be presenting this draft on

1539
01:06:19,039 --> 01:06:26,640
iom encapsulation in srv6 network

1540
01:06:23,599 --> 01:06:29,119
uh on behalf of my co-authors next

1541
01:06:26,640 --> 01:06:29,118
actually

1542
01:06:29,440 --> 01:06:34,720
so this draft has been around for quite

1543
01:06:31,839 --> 01:06:37,200
some time since uh october 2018.

1544
01:06:34,720 --> 01:06:37,839
it was for presented in nps working

1545
01:06:37,200 --> 01:06:40,558
group

1546
01:06:37,839 --> 01:06:41,680
around november 2018 since then there

1547
01:06:40,559 --> 01:06:44,720
had been multiple

1548
01:06:41,680 --> 01:06:46,000
presentations to ippm and sixth grade

1549
01:06:44,720 --> 01:06:50,480
working group uh

1550
01:06:46,000 --> 01:06:50,480
as well next type please

1551
01:06:50,799 --> 01:06:58,559
so the draft uh really takes uh

1552
01:06:54,559 --> 01:07:02,240
how we can carry iom

1553
01:06:58,559 --> 01:07:05,760
define encapsulation in srvc

1554
01:07:02,240 --> 01:07:06,319
network for the use cases for example

1555
01:07:05,760 --> 01:07:09,440
that

1556
01:07:06,319 --> 01:07:12,960
i own data collection from a te

1557
01:07:09,440 --> 01:07:16,720
part where the focus is

1558
01:07:12,960 --> 01:07:19,839
to get the data from the end points

1559
01:07:16,720 --> 01:07:20,879
segment endpoints only and not all the

1560
01:07:19,839 --> 01:07:24,160
transit node

1561
01:07:20,880 --> 01:07:25,280
in the network because in teapot a lot

1562
01:07:24,160 --> 01:07:29,359
of times that segment

1563
01:07:25,280 --> 01:07:33,200
endpoint have very specific topological

1564
01:07:29,359 --> 01:07:36,240
behavior and because also

1565
01:07:33,200 --> 01:07:36,960
iom data collection on a hub by hop

1566
01:07:36,240 --> 01:07:40,319
basis is

1567
01:07:36,960 --> 01:07:42,480
is expensive uh for is expensive

1568
01:07:40,319 --> 01:07:43,680
process in terms of the hardware

1569
01:07:42,480 --> 01:07:47,520
resources

1570
01:07:43,680 --> 01:07:50,319
and mtu usage on the packet

1571
01:07:47,520 --> 01:07:51,440
uh so this is a very sweet spot to

1572
01:07:50,319 --> 01:07:54,880
collect the ion

1573
01:07:51,440 --> 01:07:56,960
data from the segment endpoints and not

1574
01:07:54,880 --> 01:08:01,240
all the nodes uh in the network so

1575
01:07:56,960 --> 01:08:04,400
that is the focus now iom data fields

1576
01:08:01,240 --> 01:08:07,520
encapsulations that can be

1577
01:08:04,400 --> 01:08:11,760
uh carried in various protocols uh like

1578
01:08:07,520 --> 01:08:14,319
nss chinese ipv6 hopper hop header

1579
01:08:11,760 --> 01:08:16,480
ipv4 mpls and here we're talking and

1580
01:08:14,319 --> 01:08:18,719
focusing on srv6

1581
01:08:16,479 --> 01:08:21,198
and the data collection from the

1582
01:08:18,719 --> 01:08:21,198
endpoints

1583
01:08:21,520 --> 01:08:28,480
to achieve that iom ionm

1584
01:08:25,600 --> 01:08:30,239
encapsulated packet as the encapsulation

1585
01:08:28,479 --> 01:08:31,198
is not defined here because we use

1586
01:08:30,238 --> 01:08:34,318
encapsulation

1587
01:08:31,198 --> 01:08:37,040
for inm that is defined is i draft ietf

1588
01:08:34,319 --> 01:08:40,719
ippm ionm data

1589
01:08:37,040 --> 01:08:44,719
but carry that information inside

1590
01:08:40,719 --> 01:08:46,799
srh within the sr htld

1591
01:08:44,719 --> 01:08:49,439
the draft defined procedure for ingress

1592
01:08:46,799 --> 01:08:51,839
node how we achieve this

1593
01:08:49,439 --> 01:08:52,639
the segment endpoint node and the egress

1594
01:08:51,839 --> 01:08:56,719
node

1595
01:08:52,640 --> 01:08:58,480
and we're going to go over this um

1596
01:08:56,719 --> 01:09:00,399
and then draft does not introduce any

1597
01:08:58,479 --> 01:09:04,000
new procedure

1598
01:09:00,399 --> 01:09:06,238
or ion encoding uh which is uh which is

1599
01:09:04,000 --> 01:09:08,479
as defined in ppm with input next type

1600
01:09:06,238 --> 01:09:08,479
please

1601
01:09:09,359 --> 01:09:13,279
so let's talk about the procedure for

1602
01:09:11,040 --> 01:09:16,158
the ingress mode

1603
01:09:13,279 --> 01:09:18,319
so ingress node based on the local

1604
01:09:16,158 --> 01:09:21,040
configuration

1605
01:09:18,319 --> 01:09:23,359
associated with the policy or any other

1606
01:09:21,040 --> 01:09:27,120
srvs encapsulation

1607
01:09:23,359 --> 01:09:29,679
may decide that i need to monitor

1608
01:09:27,120 --> 01:09:30,799
and collect ironm data from all segment

1609
01:09:29,679 --> 01:09:33,520
endpoints

1610
01:09:30,799 --> 01:09:35,839
in that case implementation on the

1611
01:09:33,520 --> 01:09:35,839
ingress

1612
01:09:36,080 --> 01:09:42,559
takes well encapsulation srv6

1613
01:09:39,359 --> 01:09:47,359
header decide

1614
01:09:42,560 --> 01:09:50,960
and and and will add a pre-allocated

1615
01:09:47,359 --> 01:09:53,839
tlv in the packet

1616
01:09:50,960 --> 01:09:55,920
and that pre-allocated srhtlv is also

1617
01:09:53,839 --> 01:09:56,480
deterministic in segment routing network

1618
01:09:55,920 --> 01:09:59,520
because

1619
01:09:56,480 --> 01:10:01,519
the segment list is known

1620
01:09:59,520 --> 01:10:02,719
so you know how many points are there in

1621
01:10:01,520 --> 01:10:03,920
the network

1622
01:10:02,719 --> 01:10:06,640
so that's an advantage it's

1623
01:10:03,920 --> 01:10:10,000
deterministic and

1624
01:10:06,640 --> 01:10:10,880
then the endpoint node there's no local

1625
01:10:10,000 --> 01:10:14,159
configuration again

1626
01:10:10,880 --> 01:10:16,800
may insert local ion m data

1627
01:10:14,159 --> 01:10:18,719
as the packet leaves from the english

1628
01:10:16,800 --> 01:10:21,360
node

1629
01:10:18,719 --> 01:10:21,360
next like this

1630
01:10:24,800 --> 01:10:28,880
at the end point which is the transit

1631
01:10:26,719 --> 01:10:29,600
node so all ipv6 transit mode will

1632
01:10:28,880 --> 01:10:33,280
ignore

1633
01:10:29,600 --> 01:10:36,960
because this is typical ip6 forwarding

1634
01:10:33,280 --> 01:10:38,880
so not look at the srh i will not add

1635
01:10:36,960 --> 01:10:40,640
the data the segment endpoint node

1636
01:10:38,880 --> 01:10:42,480
where the destination address is set to

1637
01:10:40,640 --> 01:10:45,360
a local save

1638
01:10:42,480 --> 01:10:45,919
will determine that there is a tlb with

1639
01:10:45,360 --> 01:10:48,639
will

1640
01:10:45,920 --> 01:10:50,560
and if a local configuration on a

1641
01:10:48,640 --> 01:10:55,120
segment endpoint node

1642
01:10:50,560 --> 01:10:59,120
allows to do iom data collection

1643
01:10:55,120 --> 01:11:02,719
then only that node will

1644
01:10:59,120 --> 01:11:03,440
look into or find the presence of the

1645
01:11:02,719 --> 01:11:06,640
srh

1646
01:11:03,440 --> 01:11:09,759
tlv based on the segment

1647
01:11:06,640 --> 01:11:10,960
list or segment left field determine the

1648
01:11:09,760 --> 01:11:13,679
offset

1649
01:11:10,960 --> 01:11:15,679
at which it should be recording the ion

1650
01:11:13,679 --> 01:11:18,880
information

1651
01:11:15,679 --> 01:11:20,159
and then forward the packet to the next

1652
01:11:18,880 --> 01:11:22,880
segment

1653
01:11:20,159 --> 01:11:23,920
so this will happen segment by segment

1654
01:11:22,880 --> 01:11:27,840
basis

1655
01:11:23,920 --> 01:11:27,840
next slide please

1656
01:11:28,239 --> 01:11:33,280
the interest node behaves very much like

1657
01:11:31,520 --> 01:11:36,400
segment endpoint node because

1658
01:11:33,280 --> 01:11:39,120
it has a local set

1659
01:11:36,400 --> 01:11:40,879
and it is processing the local set and

1660
01:11:39,120 --> 01:11:41,280
that local state has a behavior that

1661
01:11:40,880 --> 01:11:44,400
okay

1662
01:11:41,280 --> 01:11:48,719
i'm allowed to do the iom

1663
01:11:44,400 --> 01:11:52,320
data collection and and transport

1664
01:11:48,719 --> 01:11:55,679
and and at that node

1665
01:11:52,320 --> 01:11:56,719
will then as part of the processing will

1666
01:11:55,679 --> 01:12:00,719
look at the

1667
01:11:56,719 --> 01:12:01,280
uh srhlv process will will add the local

1668
01:12:00,719 --> 01:12:04,880
data

1669
01:12:01,280 --> 01:12:07,599
at the requested segment

1670
01:12:04,880 --> 01:12:08,800
uh or actually requested offset based on

1671
01:12:07,600 --> 01:12:11,920
dsl now sl

1672
01:12:08,800 --> 01:12:15,280
zero and then send the packet off for a

1673
01:12:11,920 --> 01:12:18,480
telemetry collector which is configured

1674
01:12:15,280 --> 01:12:23,759
so that's in inertia uh what is uh

1675
01:12:18,480 --> 01:12:27,519
what is this procedure next right

1676
01:12:23,760 --> 01:12:28,400
so there are a couple of things one is

1677
01:12:27,520 --> 01:12:30,239
that

1678
01:12:28,400 --> 01:12:31,440
um we would like to get working group

1679
01:12:30,239 --> 01:12:34,959
feedback on this

1680
01:12:31,440 --> 01:12:36,799
uh draft uh we are also

1681
01:12:34,960 --> 01:12:38,239
priming this for working with options so

1682
01:12:36,800 --> 01:12:41,440
we welcome all the

1683
01:12:38,239 --> 01:12:44,159
question and comment uh one question for

1684
01:12:41,440 --> 01:12:45,199
the chair would be that we believe that

1685
01:12:44,159 --> 01:12:48,000
the work

1686
01:12:45,199 --> 01:12:48,879
should happen in uh spring uh it doesn't

1687
01:12:48,000 --> 01:12:52,480
change

1688
01:12:48,880 --> 01:12:53,199
um any encapsulation 5 ppm the drop does

1689
01:12:52,480 --> 01:12:56,639
not change

1690
01:12:53,199 --> 01:12:57,719
the srs tlv it uses added as is defined

1691
01:12:56,640 --> 01:13:01,760
in rfc

1692
01:12:57,719 --> 01:13:06,480
kd754 uh so it's a simple use

1693
01:13:01,760 --> 01:13:06,480
of what is already defined for srv6

1694
01:13:07,440 --> 01:13:11,360
any question please many things

1695
01:13:15,520 --> 01:13:22,719
um so as i understand

1696
01:13:18,880 --> 01:13:26,480
uh you are uh describing how to use

1697
01:13:22,719 --> 01:13:26,480
iom trace options

1698
01:13:27,679 --> 01:13:34,000
yes how to use iom trace

1699
01:13:31,040 --> 01:13:34,000
option there yes

1700
01:13:34,560 --> 01:13:42,320
yes so um um

1701
01:13:38,480 --> 01:13:44,480
i am trace options uh is only one way

1702
01:13:42,320 --> 01:13:47,120
uh to collect and transport the

1703
01:13:44,480 --> 01:13:50,400
telemetry information collected based

1704
01:13:47,120 --> 01:13:53,840
on um ima

1705
01:13:50,400 --> 01:13:58,159
space id and i am

1706
01:13:53,840 --> 01:14:00,400
trace type so in ippm working group

1707
01:13:58,159 --> 01:14:04,799
there is a working group draft

1708
01:14:00,400 --> 01:14:07,519
that's called direct expert

1709
01:14:04,800 --> 01:14:08,880
which basically does not require any

1710
01:14:07,520 --> 01:14:13,040
information

1711
01:14:08,880 --> 01:14:16,880
uh being stored in the packet in the

1712
01:14:13,040 --> 01:14:20,400
irm packet itself so this information is

1713
01:14:16,880 --> 01:14:24,400
uh exported as name suggests

1714
01:14:20,400 --> 01:14:27,679
directly from each node that generates

1715
01:14:24,400 --> 01:14:31,120
uh their uh information uh

1716
01:14:27,679 --> 01:14:34,239
to a collector uh

1717
01:14:31,120 --> 01:14:35,599
in my opinion that method of collecting

1718
01:14:34,239 --> 01:14:38,799
and transporting

1719
01:14:35,600 --> 01:14:40,320
telemetry information has a number of

1720
01:14:38,800 --> 01:14:43,120
advantages

1721
01:14:40,320 --> 01:14:44,000
uh also in ippm working group that we

1722
01:14:43,120 --> 01:14:47,199
had meeting

1723
01:14:44,000 --> 01:14:49,600
uh monday uh we discussed there is

1724
01:14:47,199 --> 01:14:50,719
another proposal on hybrid two-step

1725
01:14:49,600 --> 01:14:55,679
method

1726
01:14:50,719 --> 01:14:58,880
which is a combination of iam trace

1727
01:14:55,679 --> 01:15:03,360
option and direct expert so basically

1728
01:14:58,880 --> 01:15:03,360
what it creates it creates a

1729
01:15:03,840 --> 01:15:11,120
follow-up packet which is out of band

1730
01:15:07,360 --> 01:15:14,320
which is again advantage similar to

1731
01:15:11,120 --> 01:15:15,840
direct expert so their network resources

1732
01:15:14,320 --> 01:15:19,360
especially for

1733
01:15:15,840 --> 01:15:22,880
uh services uh critical to

1734
01:15:19,360 --> 01:15:24,799
uh delay and packet laws does not

1735
01:15:22,880 --> 01:15:28,239
require in

1736
01:15:24,800 --> 01:15:31,280
more bandwidth because uh in ip trace

1737
01:15:28,239 --> 01:15:34,559
options in iom trace

1738
01:15:31,280 --> 01:15:35,360
options method uh the telemetry

1739
01:15:34,560 --> 01:15:38,640
information

1740
01:15:35,360 --> 01:15:39,440
uh consumes uh the bandwidth of the

1741
01:15:38,640 --> 01:15:42,880
network because

1742
01:15:39,440 --> 01:15:46,000
it's in that so have you considered this

1743
01:15:42,880 --> 01:15:47,840
other out-of-band methods to collect uh

1744
01:15:46,000 --> 01:15:48,640
information and what you see as

1745
01:15:47,840 --> 01:15:53,040
advantage

1746
01:15:48,640 --> 01:15:55,679
of iem trace option

1747
01:15:53,040 --> 01:15:57,040
so i agree that out of band collection

1748
01:15:55,679 --> 01:16:00,400
or direct export

1749
01:15:57,040 --> 01:16:03,519
is uh is a definite

1750
01:16:00,400 --> 01:16:04,559
method that in some cases would be

1751
01:16:03,520 --> 01:16:07,679
preferred

1752
01:16:04,560 --> 01:16:11,040
and in fact there is a orbit

1753
01:16:07,679 --> 01:16:14,880
uh behavior also in sra that is defined

1754
01:16:11,040 --> 01:16:18,080
along the same line to do an outer band

1755
01:16:14,880 --> 01:16:21,520
uh export of the packet

1756
01:16:18,080 --> 01:16:24,880
from the segment endpoints uh

1757
01:16:21,520 --> 01:16:28,880
so but that does not

1758
01:16:24,880 --> 01:16:32,159
change the uh advantages

1759
01:16:28,880 --> 01:16:35,360
of uh doing the data collection

1760
01:16:32,159 --> 01:16:37,440
in the packet um we cannot

1761
01:16:35,360 --> 01:16:38,960
be deciding that one way or the other

1762
01:16:37,440 --> 01:16:40,320
one way is better than the other because

1763
01:16:38,960 --> 01:16:42,480
in direct export

1764
01:16:40,320 --> 01:16:44,719
the problem is the correlation of the

1765
01:16:42,480 --> 01:16:45,519
packets at the controller because you

1766
01:16:44,719 --> 01:16:47,280
have to

1767
01:16:45,520 --> 01:16:48,880
collect these copy of the packet from

1768
01:16:47,280 --> 01:16:51,440
everywhere and then correlate

1769
01:16:48,880 --> 01:16:52,880
so there are pros and cons uh and this

1770
01:16:51,440 --> 01:16:55,839
is why i mean there are two

1771
01:16:52,880 --> 01:16:57,840
methods that are defined and and what

1772
01:16:55,840 --> 01:17:00,560
you propose for the hybrid two step is

1773
01:16:57,840 --> 01:17:03,520
is very interesting proposal and i think

1774
01:17:00,560 --> 01:17:06,239
is also sort of orthogonal

1775
01:17:03,520 --> 01:17:07,600
uh in terms of we cannot be in defining

1776
01:17:06,239 --> 01:17:08,799
solution we can be cherry picking one

1777
01:17:07,600 --> 01:17:11,600
versus the other because

1778
01:17:08,800 --> 01:17:12,560
they both have their own space and

1779
01:17:11,600 --> 01:17:14,560
advantages

1780
01:17:12,560 --> 01:17:15,679
here the advantage is that we are

1781
01:17:14,560 --> 01:17:18,800
collecting

1782
01:17:15,679 --> 01:17:20,159
data only from segment endpoints which

1783
01:17:18,800 --> 01:17:22,159
are important nodes

1784
01:17:20,159 --> 01:17:24,159
and we are collecting only if the node

1785
01:17:22,159 --> 01:17:28,639
supports the data

1786
01:17:24,159 --> 01:17:31,920
and because we are deterministic uh

1787
01:17:28,640 --> 01:17:34,320
from the behavior point of view uh and

1788
01:17:31,920 --> 01:17:36,480
from pre-allocated space point of view

1789
01:17:34,320 --> 01:17:37,840
so the mpu issue then a lot of other

1790
01:17:36,480 --> 01:17:40,959
issues are addressed

1791
01:17:37,840 --> 01:17:41,520
uh in in that case so i think it is

1792
01:17:40,960 --> 01:17:44,320
simple

1793
01:17:41,520 --> 01:17:45,360
it is also a very sweet spot for srv6

1794
01:17:44,320 --> 01:17:49,120
network

1795
01:17:45,360 --> 01:17:51,199
um that's how i feel it but but i'm not

1796
01:17:49,120 --> 01:17:52,320
we're not suggesting that direct export

1797
01:17:51,199 --> 01:17:55,440
should not be done or

1798
01:17:52,320 --> 01:17:57,679
one word actually uh it's interesting so

1799
01:17:55,440 --> 01:18:00,960
you you brought their uh

1800
01:17:57,679 --> 01:18:01,679
mtu and i think that mtu is a more

1801
01:18:00,960 --> 01:18:06,159
concern

1802
01:18:01,679 --> 01:18:10,080
for iom trace option because

1803
01:18:06,159 --> 01:18:13,120
you have to control the number of nodes

1804
01:18:10,080 --> 01:18:15,199
that generate telemetry information and

1805
01:18:13,120 --> 01:18:16,480
amount of uh telemetry information

1806
01:18:15,199 --> 01:18:20,000
because otherwise

1807
01:18:16,480 --> 01:18:20,799
you may exceed uh mtu size of your data

1808
01:18:20,000 --> 01:18:23,760
pack

1809
01:18:20,800 --> 01:18:25,120
the advantage of direct expert and

1810
01:18:23,760 --> 01:18:28,239
hybrid two-step

1811
01:18:25,120 --> 01:18:30,640
that there is no limit

1812
01:18:28,239 --> 01:18:32,159
because i i can hardly imagine that the

1813
01:18:30,640 --> 01:18:35,440
note will generate

1814
01:18:32,159 --> 01:18:36,320
uh more information in a direct export

1815
01:18:35,440 --> 01:18:40,239
mode more than

1816
01:18:36,320 --> 01:18:42,960
mtu and hybrid two-step

1817
01:18:40,239 --> 01:18:44,400
allows to generate a sequence of

1818
01:18:42,960 --> 01:18:47,679
follow-up packets

1819
01:18:44,400 --> 01:18:51,199
from one packet and actually

1820
01:18:47,679 --> 01:18:54,880
it collects them as it follows

1821
01:18:51,199 --> 01:18:57,120
their uh irm packet so there is no

1822
01:18:54,880 --> 01:18:58,320
uh additional information required for

1823
01:18:57,120 --> 01:19:01,360
correlation

1824
01:18:58,320 --> 01:19:04,400
as for uh challenge

1825
01:19:01,360 --> 01:19:08,080
to do correlation with a direct expert

1826
01:19:04,400 --> 01:19:11,440
yes you are right it requires additional

1827
01:19:08,080 --> 01:19:12,000
information to being collected from the

1828
01:19:11,440 --> 01:19:14,400
node

1829
01:19:12,000 --> 01:19:15,440
so that correlation of information can

1830
01:19:14,400 --> 01:19:18,559
be done

1831
01:19:15,440 --> 01:19:21,678
by the collector but

1832
01:19:18,560 --> 01:19:22,080
again there are trade-offs but i believe

1833
01:19:21,679 --> 01:19:24,960
that

1834
01:19:22,080 --> 01:19:27,440
out-of-band methods to collect and

1835
01:19:24,960 --> 01:19:30,960
transport telemetry information

1836
01:19:27,440 --> 01:19:34,320
uh have to be seriously considerate

1837
01:19:30,960 --> 01:19:37,600
and i cannot agree that we should

1838
01:19:34,320 --> 01:19:40,159
not uh recommend and

1839
01:19:37,600 --> 01:19:43,679
champion methods that we believe are

1840
01:19:40,159 --> 01:19:43,679
better suited for the network

1841
01:19:44,000 --> 01:19:50,000
so uh coming back just one answer if yes

1842
01:19:48,159 --> 01:19:51,519
and then we stop we can probably feel

1843
01:19:50,000 --> 01:19:53,679
like um

1844
01:19:51,520 --> 01:19:54,800
what i meant to say is that because

1845
01:19:53,679 --> 01:19:58,480
segment list

1846
01:19:54,800 --> 01:20:00,960
are deterministic fewer nodes

1847
01:19:58,480 --> 01:20:03,040
and known to the node that is

1848
01:20:00,960 --> 01:20:06,480
encapsulating the packet

1849
01:20:03,040 --> 01:20:09,679
the the mtu size and data

1850
01:20:06,480 --> 01:20:10,718
amount is deterministic so you don't run

1851
01:20:09,679 --> 01:20:13,440
into a lot of

1852
01:20:10,719 --> 01:20:13,760
problem that you would run otherwise for

1853
01:20:13,440 --> 01:20:16,879
the

1854
01:20:13,760 --> 01:20:20,159
i o m tracing in the data packet

1855
01:20:16,880 --> 01:20:23,360
um so while i'm not disagreeing

1856
01:20:20,159 --> 01:20:26,000
that direct export is a very good viable

1857
01:20:23,360 --> 01:20:28,080
option i'm not saying that this method

1858
01:20:26,000 --> 01:20:31,199
provide a very sweet spot

1859
01:20:28,080 --> 01:20:34,639
for in-band facing

1860
01:20:31,199 --> 01:20:36,080
in the package it's already running out

1861
01:20:34,639 --> 01:20:38,239
of time so we're going to

1862
01:20:36,080 --> 01:20:39,679
cut the queue uh greg if you can uh

1863
01:20:38,239 --> 01:20:41,280
start to thread on the mailing list to

1864
01:20:39,679 --> 01:20:44,480
discuss the trade-off

1865
01:20:41,280 --> 01:20:47,840
on run and on and on

1866
01:20:44,480 --> 01:20:47,839
or everywhere

1867
01:20:56,719 --> 01:21:00,320
first i agree with everything that craig

1868
01:20:58,480 --> 01:21:02,080
had in the

1869
01:21:00,320 --> 01:21:04,239
second i have some questions about your

1870
01:21:02,080 --> 01:21:07,600
reliance on the srh tlv

1871
01:21:04,239 --> 01:21:09,919
field it's clear how this would work

1872
01:21:07,600 --> 01:21:11,840
in the situation where the srh is the

1873
01:21:09,920 --> 01:21:12,960
only mechanism you're using for traffic

1874
01:21:11,840 --> 01:21:15,600
here

1875
01:21:12,960 --> 01:21:17,600
it contributes a little bit to srh float

1876
01:21:15,600 --> 01:21:19,440
but at least it's understandable

1877
01:21:17,600 --> 01:21:21,120
it's not quite clear how this would work

1878
01:21:19,440 --> 01:21:23,120
if you're using the microscope for

1879
01:21:21,120 --> 01:21:26,480
traffic steering

1880
01:21:23,120 --> 01:21:28,559
um when you hit a

1881
01:21:26,480 --> 01:21:32,559
node that's specified in the microscope

1882
01:21:28,560 --> 01:21:32,560
but you have to look at the srh anyway

1883
01:21:40,639 --> 01:21:47,040
so that that is a behavior uh part

1884
01:21:43,840 --> 01:21:50,320
and that decision is based on a local

1885
01:21:47,040 --> 01:21:51,120
determination on the on the field on the

1886
01:21:50,320 --> 01:21:53,440
set

1887
01:21:51,120 --> 01:21:54,719
that is uh being processed an

1888
01:21:53,440 --> 01:21:58,159
intermediate node

1889
01:21:54,719 --> 01:22:00,480
if tlb is present uh and is allowed

1890
01:21:58,159 --> 01:22:02,638
so that that node from a local

1891
01:22:00,480 --> 01:22:04,320
configuration then yes

1892
01:22:02,639 --> 01:22:10,000
so even though you're routing through a

1893
01:22:04,320 --> 01:22:12,960
micro site you'd still look at the srh

1894
01:22:10,000 --> 01:22:15,120
yes srh tlv and and all the other

1895
01:22:12,960 --> 01:22:19,920
parameters are equally

1896
01:22:15,120 --> 01:22:19,920
equally applicable to the microsegments

1897
01:22:22,840 --> 01:22:26,159
okay i

1898
01:22:24,400 --> 01:22:28,320
i may have a follow-up question because

1899
01:22:26,159 --> 01:22:32,000
uh in the draft you use this

1900
01:22:28,320 --> 01:22:33,599
slr segment left index

1901
01:22:32,000 --> 01:22:35,600
and uh with microsoft it would be

1902
01:22:33,600 --> 01:22:38,480
different but we can follow up on the

1903
01:22:35,600 --> 01:22:39,120
yes i think we can follow up but but the

1904
01:22:38,480 --> 01:22:42,959
scope

1905
01:22:39,120 --> 01:22:42,960
yeah we can follow up on the list

1906
01:22:44,480 --> 01:22:48,559
yeah hello this is the zappa i have a

1907
01:22:46,560 --> 01:22:49,920
question regarding the relation between

1908
01:22:48,560 --> 01:22:53,360
this draft and

1909
01:22:49,920 --> 01:22:56,000
the ir might be stuff

1910
01:22:53,360 --> 01:22:57,759
because i guess that the same effect can

1911
01:22:56,000 --> 01:22:59,760
be

1912
01:22:57,760 --> 01:23:03,280
you can achieve the same effect by using

1913
01:22:59,760 --> 01:23:07,840
the destination option editor

1914
01:23:03,280 --> 01:23:07,840
together with the sd range

1915
01:23:08,560 --> 01:23:13,120
so uh i i think we can take it offline

1916
01:23:11,199 --> 01:23:16,159
but but

1917
01:23:13,120 --> 01:23:19,040
one point is that with the ip

1918
01:23:16,159 --> 01:23:20,879
v6 especially with the hop by hop option

1919
01:23:19,040 --> 01:23:23,920
when you use hobbyhop option

1920
01:23:20,880 --> 01:23:26,800
you collect data from all the hops

1921
01:23:23,920 --> 01:23:28,960
and and in this use case we are trying

1922
01:23:26,800 --> 01:23:31,920
to collect data for the

1923
01:23:28,960 --> 01:23:33,199
uh segment endpoints only so that is the

1924
01:23:31,920 --> 01:23:35,760
major difference

1925
01:23:33,199 --> 01:23:37,120
uh that the data collection is from a

1926
01:23:35,760 --> 01:23:38,960
fewer places

1927
01:23:37,120 --> 01:23:41,360
is is more deterministic in terms of how

1928
01:23:38,960 --> 01:23:43,760
many segment endpoints we have

1929
01:23:41,360 --> 01:23:44,400
but we can take it offline yeah yeah i

1930
01:23:43,760 --> 01:23:46,719
know i mean

1931
01:23:44,400 --> 01:23:47,519
because we had similar discussion in six

1932
01:23:46,719 --> 01:23:49,600
months

1933
01:23:47,520 --> 01:23:50,800
and in the end yeah you can't have the

1934
01:23:49,600 --> 01:23:53,840
same

1935
01:23:50,800 --> 01:23:56,639
uh effect you measure for each segment

1936
01:23:53,840 --> 01:23:57,760
if you use the destination option rather

1937
01:23:56,639 --> 01:23:59,840
uh together with the

1938
01:23:57,760 --> 01:24:01,360
yes reach but anyway we can take it

1939
01:23:59,840 --> 01:24:03,600
offline

1940
01:24:01,360 --> 01:24:05,759
okay that's how are you presenting two

1941
01:24:03,600 --> 01:24:08,639
to six months or so

1942
01:24:05,760 --> 01:24:09,440
i have presented this to six men uh a

1943
01:24:08,639 --> 01:24:11,679
few times

1944
01:24:09,440 --> 01:24:12,638
already like at least a couple of times

1945
01:24:11,679 --> 01:24:14,000
uh

1946
01:24:12,639 --> 01:24:15,679
that would be the kind of discussion

1947
01:24:14,000 --> 01:24:16,800
which is better suited for for six

1948
01:24:15,679 --> 01:24:18,560
months

1949
01:24:16,800 --> 01:24:21,520
yeah and this is goes back to my

1950
01:24:18,560 --> 01:24:24,080
question also uh bruno that uh

1951
01:24:21,520 --> 01:24:25,360
yeah yeah but but i think it'd be a good

1952
01:24:24,080 --> 01:24:28,080
at the moment i would like

1953
01:24:25,360 --> 01:24:30,159
the cheers to uh discuss this with uh

1954
01:24:28,080 --> 01:24:32,559
with six men cheers

1955
01:24:30,159 --> 01:24:33,759
and i think bm chair in terms of the

1956
01:24:32,560 --> 01:24:35,120
proper home

1957
01:24:33,760 --> 01:24:39,040
we have stuff we have started the

1958
01:24:35,120 --> 01:24:39,040
discussion with different chairs andrew

1959
01:24:40,480 --> 01:24:45,440
thanks i just wanted to to ask that

1960
01:24:43,280 --> 01:24:46,800
since there seem to be multiple methods

1961
01:24:45,440 --> 01:24:49,519
of doing this

1962
01:24:46,800 --> 01:24:51,440
would it not be useful to have a fully

1963
01:24:49,520 --> 01:24:53,440
defined requirements document

1964
01:24:51,440 --> 01:24:54,879
so that we can then look at the

1965
01:24:53,440 --> 01:24:57,599
requirements vis-a-vis

1966
01:24:54,880 --> 01:24:58,400
all the other solutions and then work

1967
01:24:57,600 --> 01:25:00,800
from there

1968
01:24:58,400 --> 01:25:00,799
thanks

1969
01:25:02,960 --> 01:25:09,280
yeah so there's a lot of work in ippm

1970
01:25:06,080 --> 01:25:12,320
uh for uh for the work you've done

1971
01:25:09,280 --> 01:25:14,880
uh in terms of all uh

1972
01:25:12,320 --> 01:25:17,199
requirements as well as uh i think i

1973
01:25:14,880 --> 01:25:17,840
think framework as well so ippm working

1974
01:25:17,199 --> 01:25:21,120
group

1975
01:25:17,840 --> 01:25:23,360
for ion has worked on all of those

1976
01:25:21,120 --> 01:25:25,920
things before defining the encoding

1977
01:25:23,360 --> 01:25:27,440
and here is uh the draft really uses the

1978
01:25:25,920 --> 01:25:28,800
encoding which is already defined by

1979
01:25:27,440 --> 01:25:32,638
ippm

1980
01:25:28,800 --> 01:25:34,400
uh and use it uh for

1981
01:25:32,639 --> 01:25:36,639
segment output network for a service

1982
01:25:34,400 --> 01:25:38,799
example

1983
01:25:36,639 --> 01:25:40,000
so i mean we can discuss it offline in

1984
01:25:38,800 --> 01:25:41,760
terms of what exactly

1985
01:25:40,000 --> 01:25:43,840
you would mean but i think the scope

1986
01:25:41,760 --> 01:25:47,520
what you're asking for requirement

1987
01:25:43,840 --> 01:25:51,040
and um and other

1988
01:25:47,520 --> 01:25:52,400
aspects uh is is ippm would be better

1989
01:25:51,040 --> 01:25:54,960
suited place

1990
01:25:52,400 --> 01:25:58,320
for that discussion and i think that

1991
01:25:54,960 --> 01:25:58,320
work is done there

1992
01:26:06,840 --> 01:26:09,840
already

1993
01:26:21,040 --> 01:26:28,239
me now yeah okay uh quick question

1994
01:26:24,719 --> 01:26:31,520
uh so is there a trv allow us to like

1995
01:26:28,239 --> 01:26:34,239
skip some segment so because like each

1996
01:26:31,520 --> 01:26:34,880
uh end of segment endpoint processing

1997
01:26:34,239 --> 01:26:38,559
the date

1998
01:26:34,880 --> 01:26:40,320
may influence the metric so if they are

1999
01:26:38,560 --> 01:26:42,639
allowed to like to incremental

2000
01:26:40,320 --> 01:26:45,199
environment so that will get

2001
01:26:42,639 --> 01:26:45,199
more accurate

2002
01:26:45,760 --> 01:26:51,920
if your question is like if the the rfc

2003
01:26:50,280 --> 01:26:55,840
8754

2004
01:26:51,920 --> 01:26:58,000
uh mentioned that uh tlb processing

2005
01:26:55,840 --> 01:26:59,840
is only based on a local decision a

2006
01:26:58,000 --> 01:27:03,440
local configuration data at a

2007
01:26:59,840 --> 01:27:06,800
segment outing segment endpoint node so

2008
01:27:03,440 --> 01:27:10,000
uh a segment endpoint node uh can escape

2009
01:27:06,800 --> 01:27:12,719
based on a local decision uh they

2010
01:27:10,000 --> 01:27:14,639
they don't not capability also or

2011
01:27:12,719 --> 01:27:15,520
because based on local decision policy

2012
01:27:14,639 --> 01:27:20,159
decision

2013
01:27:15,520 --> 01:27:22,960
and not to even look at the sr html

2014
01:27:20,159 --> 01:27:24,159
so it's very well defined uh yeah so the

2015
01:27:22,960 --> 01:27:26,400
consonant is like a comma

2016
01:27:24,159 --> 01:27:28,400
allow the header enter to control this

2017
01:27:26,400 --> 01:27:31,920
so that you know so we can get a

2018
01:27:28,400 --> 01:27:34,239
end to end accurate like a telemetry

2019
01:27:31,920 --> 01:27:34,239
metric

2020
01:27:34,719 --> 01:27:41,360
you mean you mean head and controls

2021
01:27:37,760 --> 01:27:43,199
which node will send yeah which like i

2022
01:27:41,360 --> 01:27:45,280
had understood okay i like to measure

2023
01:27:43,199 --> 01:27:45,678
like a from the segment one two segment

2024
01:27:45,280 --> 01:27:48,080
five

2025
01:27:45,679 --> 01:27:50,560
i want to skip like a segment like a two

2026
01:27:48,080 --> 01:27:50,559
three four

2027
01:27:50,719 --> 01:27:56,000
yeah i think we should we should discuss

2028
01:27:52,400 --> 01:27:58,320
this offline uh okay because um

2029
01:27:56,000 --> 01:28:00,880
i think the local decision point is very

2030
01:27:58,320 --> 01:28:03,440
clear but from head and control

2031
01:28:00,880 --> 01:28:05,040
we should discuss it right now okay so

2032
01:28:03,440 --> 01:28:06,480
we have a lot of commands

2033
01:28:05,040 --> 01:28:09,040
it would be good to start multiple

2034
01:28:06,480 --> 01:28:11,919
threads on the emailing list

2035
01:28:09,040 --> 01:28:12,840
regarding what information we need to

2036
01:28:11,920 --> 01:28:15,760
send

2037
01:28:12,840 --> 01:28:16,880
how inbound outbound how to put in the

2038
01:28:15,760 --> 01:28:19,920
packet

2039
01:28:16,880 --> 01:28:22,400
so please uh start the threads either

2040
01:28:19,920 --> 01:28:22,400
the orders

2041
01:28:22,960 --> 01:28:27,600
thank you thanks for point to point

2042
01:28:26,159 --> 01:28:29,519
thank you

2043
01:28:27,600 --> 01:28:30,719
we're a bit late on the schedule so

2044
01:28:29,520 --> 01:28:33,760
eventually we need to move

2045
01:28:30,719 --> 01:28:38,159
one slot to friday but for

2046
01:28:33,760 --> 01:28:38,159
everyone else please uh consider the

2047
01:28:40,840 --> 01:28:45,920
timing

2048
01:28:42,320 --> 01:28:45,920
oh can you hear me yes

2049
01:28:48,159 --> 01:28:51,920
uh so i like to uh present this uh draft

2050
01:28:50,960 --> 01:28:54,719
of a p2mp

2051
01:28:51,920 --> 01:28:55,280
uh transport using chain on behalf of

2052
01:28:54,719 --> 01:28:57,440
this

2053
01:28:55,280 --> 01:28:59,679
this group of co-authors next slide

2054
01:28:57,440 --> 01:28:59,678
please

2055
01:29:01,760 --> 01:29:06,560
uh so to do uh ptme transport in second

2056
01:29:04,880 --> 01:29:10,000
routing uh there are

2057
01:29:06,560 --> 01:29:13,360
uh traditionally two methods the first

2058
01:29:10,000 --> 01:29:14,719
one is ingress replication it uses the

2059
01:29:13,360 --> 01:29:16,639
p2p tunnels

2060
01:29:14,719 --> 01:29:18,080
uh it states this in the core but

2061
01:29:16,639 --> 01:29:21,199
there's no traffic of

2062
01:29:18,080 --> 01:29:21,519
optimization uh the second method will

2063
01:29:21,199 --> 01:29:25,199
be

2064
01:29:21,520 --> 01:29:28,000
a controller driven p2mp3 uh this can

2065
01:29:25,199 --> 01:29:31,040
achieve a maximum traffic organization

2066
01:29:28,000 --> 01:29:34,560
but ultra but it also introduces uh

2067
01:29:31,040 --> 01:29:38,400
a p2mp3 state on each every branch node

2068
01:29:34,560 --> 01:29:41,920
so the core uh become for

2069
01:29:38,400 --> 01:29:43,759
so in this draft we consider two

2070
01:29:41,920 --> 01:29:45,120
fundamental principles of segment

2071
01:29:43,760 --> 01:29:48,400
routing

2072
01:29:45,120 --> 01:29:52,080
one is status core and second second one

2073
01:29:48,400 --> 01:29:54,719
is uh

2074
01:29:52,080 --> 01:29:57,760
uh the second one is uh you know single

2075
01:29:54,719 --> 01:30:00,800
point provisioning on ingress routers

2076
01:29:57,760 --> 01:30:03,920
so based on that uh in this draft we're

2077
01:30:00,800 --> 01:30:05,360
proposing a new mechanism for building a

2078
01:30:03,920 --> 01:30:09,280
stateless

2079
01:30:05,360 --> 01:30:11,759
p2mp transport we use a new type of

2080
01:30:09,280 --> 01:30:12,800
tunnels called the p2mp chain tunnels or

2081
01:30:11,760 --> 01:30:16,880
simply p2mb

2082
01:30:12,800 --> 01:30:19,920
chains each pdm btn can reach

2083
01:30:16,880 --> 01:30:24,000
multiple leaf nodes along the path

2084
01:30:19,920 --> 01:30:26,880
it is provisioned only on the root node

2085
01:30:24,000 --> 01:30:28,480
without involving any transit routers so

2086
01:30:26,880 --> 01:30:31,360
with this mechanism

2087
01:30:28,480 --> 01:30:32,799
we'll be able to achieve traffic

2088
01:30:31,360 --> 01:30:35,360
optimization

2089
01:30:32,800 --> 01:30:37,600
and also maintain a status core at the

2090
01:30:35,360 --> 01:30:40,480
same time

2091
01:30:37,600 --> 01:30:40,480
next slide please

2092
01:30:41,760 --> 01:30:47,679
so a pdm chain is a single path tunnel

2093
01:30:45,280 --> 01:30:50,559
which can reach a reach multiple leaf

2094
01:30:47,679 --> 01:30:53,440
nodes along the this single path

2095
01:30:50,560 --> 01:30:55,520
to reach all the leaf nodes the the

2096
01:30:53,440 --> 01:30:59,120
roots send packets over

2097
01:30:55,520 --> 01:31:02,719
a one or a small set of p2mp

2098
01:30:59,120 --> 01:31:06,480
chains so the mechanism is generic

2099
01:31:02,719 --> 01:31:09,679
uh it's applicable to all the topologies

2100
01:31:06,480 --> 01:31:13,519
uh it uh benefited most

2101
01:31:09,679 --> 01:31:16,880
for ring topology and for linear and uh

2102
01:31:13,520 --> 01:31:18,480
or you know semi-linear topology uh in a

2103
01:31:16,880 --> 01:31:19,120
ring topology as you can see in the

2104
01:31:18,480 --> 01:31:22,718
picture

2105
01:31:19,120 --> 01:31:26,000
first picture uh for each

2106
01:31:22,719 --> 01:31:29,360
um in a multi multicast stream

2107
01:31:26,000 --> 01:31:32,239
we will only need one p2mp chain

2108
01:31:29,360 --> 01:31:33,839
in a linear topology uh as we see you

2109
01:31:32,239 --> 01:31:35,678
can see in the second picture

2110
01:31:33,840 --> 01:31:38,239
to reach the four leaf nodes on the

2111
01:31:35,679 --> 01:31:41,679
right uh we would only need uh

2112
01:31:38,239 --> 01:31:42,799
two pdm chains instead of four p2p

2113
01:31:41,679 --> 01:31:45,120
tunnels

2114
01:31:42,800 --> 01:31:46,239
so this uh significantly reduces the

2115
01:31:45,120 --> 01:31:48,000
amount of traffic

2116
01:31:46,239 --> 01:31:49,360
and the number of tunnels across the

2117
01:31:48,000 --> 01:31:52,239
domain

2118
01:31:49,360 --> 01:31:52,239
next slide please

2119
01:31:54,239 --> 01:31:58,718
next slide please yeah so how do we

2120
01:31:56,639 --> 01:32:01,840
build the p2mb chain

2121
01:31:58,719 --> 01:32:04,960
so uh on a pwm chain there there is

2122
01:32:01,840 --> 01:32:08,080
one tail end leaf node which is uh

2123
01:32:04,960 --> 01:32:11,360
just a normal receiver

2124
01:32:08,080 --> 01:32:14,239
uh this is the node l2 in the picture

2125
01:32:11,360 --> 01:32:16,000
and there may be a one or multiple

2126
01:32:14,239 --> 01:32:19,120
transit leaf nodes

2127
01:32:16,000 --> 01:32:21,199
on the chain these are

2128
01:32:19,120 --> 01:32:23,599
this these nodes are both transient

2129
01:32:21,199 --> 01:32:27,839
routers and receivers

2130
01:32:23,600 --> 01:32:31,679
we call them fun nodes this would be the

2131
01:32:27,840 --> 01:32:35,920
node l1 in this picture so on

2132
01:32:31,679 --> 01:32:39,040
a node l1 for each incoming packet p

2133
01:32:35,920 --> 01:32:42,080
we we replace replicate it

2134
01:32:39,040 --> 01:32:45,040
to make a copy p1 we call this

2135
01:32:42,080 --> 01:32:45,600
a chain replication and then we forward

2136
01:32:45,040 --> 01:32:49,280
the packet

2137
01:32:45,600 --> 01:32:51,920
p downstream along the path and we

2138
01:32:49,280 --> 01:32:53,599
process the copy p1 locally as a

2139
01:32:51,920 --> 01:32:55,440
receiver

2140
01:32:53,600 --> 01:32:56,639
so in this draft that we model this

2141
01:32:55,440 --> 01:32:59,519
whole you know uh

2142
01:32:56,639 --> 01:33:01,360
forwarding behavior of part note as a

2143
01:32:59,520 --> 01:33:06,639
new type of segment called bus

2144
01:33:01,360 --> 01:33:09,599
segment uh it seed is called a bot set

2145
01:33:06,639 --> 01:33:10,000
so with that uh with that we can uh you

2146
01:33:09,600 --> 01:33:13,120
know

2147
01:33:10,000 --> 01:33:13,840
build a p2mb chain uh by using a city

2148
01:33:13,120 --> 01:33:16,960
list

2149
01:33:13,840 --> 01:33:18,159
with bot nodes represented by their bot

2150
01:33:16,960 --> 01:33:19,840
sets

2151
01:33:18,159 --> 01:33:22,080
and this set list only need to be

2152
01:33:19,840 --> 01:33:24,880
provisioned on the root node

2153
01:33:22,080 --> 01:33:25,840
in a similar manner to you know regular

2154
01:33:24,880 --> 01:33:30,400
point-to-point

2155
01:33:25,840 --> 01:33:30,400
tunnel next slide please

2156
01:33:30,880 --> 01:33:36,639
so some properties of bad segments

2157
01:33:34,159 --> 01:33:37,199
bar segments are nodal segments on each

2158
01:33:36,639 --> 01:33:40,400
router

2159
01:33:37,199 --> 01:33:44,239
there is one for sr mps

2160
01:33:40,400 --> 01:33:47,599
and another one for srv6

2161
01:33:44,239 --> 01:33:48,480
uh there are global segments uh there

2162
01:33:47,600 --> 01:33:52,080
the boxes are

2163
01:33:48,480 --> 01:33:53,199
allocated from srgb there are lot of

2164
01:33:52,080 --> 01:33:55,760
segments

2165
01:33:53,199 --> 01:33:56,960
through the shortest path but they can

2166
01:33:55,760 --> 01:33:59,600
also use together with

2167
01:33:56,960 --> 01:34:02,560
other types of segments to build

2168
01:33:59,600 --> 01:34:06,320
exclusive paths

2169
01:34:02,560 --> 01:34:07,920
they may be advertised by isis ospf and

2170
01:34:06,320 --> 01:34:11,920
pgp

2171
01:34:07,920 --> 01:34:14,800
so uh boss segments are you know

2172
01:34:11,920 --> 01:34:15,760
very similar to known segments it's uh

2173
01:34:14,800 --> 01:34:19,360
except that

2174
01:34:15,760 --> 01:34:21,120
you know the type of forwarding behavior

2175
01:34:19,360 --> 01:34:23,440
they represent

2176
01:34:21,120 --> 01:34:24,480
there are common and shareable building

2177
01:34:23,440 --> 01:34:26,719
blocks you know

2178
01:34:24,480 --> 01:34:28,559
following instructions for stateless

2179
01:34:26,719 --> 01:34:32,239
p2mp tunnels

2180
01:34:28,560 --> 01:34:36,880
next slide please

2181
01:34:32,239 --> 01:34:39,440
so let's look at example um so in this

2182
01:34:36,880 --> 01:34:40,080
uh this picture we have a multicast

2183
01:34:39,440 --> 01:34:43,199
stream

2184
01:34:40,080 --> 01:34:45,679
to four leaf nodes l1 to l4

2185
01:34:43,199 --> 01:34:48,000
and then we are using two p2mp chains a

2186
01:34:45,679 --> 01:34:51,440
red one a green one

2187
01:34:48,000 --> 01:34:54,239
the red chain uh takes the shortest path

2188
01:34:51,440 --> 01:34:55,440
from the root to l1 and then from l1 to

2189
01:34:54,239 --> 01:34:59,040
l2

2190
01:34:55,440 --> 01:35:03,119
so it's synthesis very very simple

2191
01:34:59,040 --> 01:35:08,000
which is a b1 which is the bot set of l1

2192
01:35:03,119 --> 01:35:11,040
and then n2 which is the node set of l2

2193
01:35:08,000 --> 01:35:12,000
and the green chain takes a explicit

2194
01:35:11,040 --> 01:35:15,119
path

2195
01:35:12,000 --> 01:35:18,239
you know to l3 and the l4

2196
01:35:15,119 --> 01:35:22,000
so it's c list is a1 a2

2197
01:35:18,239 --> 01:35:25,119
a3 a4 a5 which are all adjacent c6

2198
01:35:22,000 --> 01:35:28,320
and then b3 which is the bot state

2199
01:35:25,119 --> 01:35:33,199
bus set of l3 and then a6

2200
01:35:28,320 --> 01:35:33,199
is a7 to 2l4

2201
01:35:34,239 --> 01:35:37,119
next slide please

2202
01:35:37,440 --> 01:35:45,678
uh next please i'll skip this example

2203
01:35:42,400 --> 01:35:46,400
so this is diagram of the generic model

2204
01:35:45,679 --> 01:35:49,040
of

2205
01:35:46,400 --> 01:35:50,320
bi-second behavior we have incoming

2206
01:35:49,040 --> 01:35:54,960
packet p

2207
01:35:50,320 --> 01:35:58,400
and we replicate it to make a call p1

2208
01:35:54,960 --> 01:35:58,960
for packet p we perform next on the bot

2209
01:35:58,400 --> 01:36:00,799
set

2210
01:35:58,960 --> 01:36:02,239
and then we forward p based on the next

2211
01:36:00,800 --> 01:36:05,360
set

2212
01:36:02,239 --> 01:36:08,638
for p1 we do a sequence of uh next

2213
01:36:05,360 --> 01:36:09,360
on all the p2mp chances and then we

2214
01:36:08,639 --> 01:36:13,199
process

2215
01:36:09,360 --> 01:36:15,839
you know we receive this p1 locally

2216
01:36:13,199 --> 01:36:15,839
next please

2217
01:36:16,639 --> 01:36:19,920
uh this is the same diagram uh in the

2218
01:36:19,199 --> 01:36:25,839
case of

2219
01:36:19,920 --> 01:36:28,560
uh you know map to srnps

2220
01:36:25,840 --> 01:36:31,199
when in the case where a packet has a

2221
01:36:28,560 --> 01:36:34,400
inner you know innermost service label

2222
01:36:31,199 --> 01:36:37,280
the route need to insert

2223
01:36:34,400 --> 01:36:38,719
a a special purpose label called the end

2224
01:36:37,280 --> 01:36:41,360
of chain label

2225
01:36:38,719 --> 01:36:42,000
between the service label and the ptme

2226
01:36:41,360 --> 01:36:46,159
chain

2227
01:36:42,000 --> 01:36:49,600
labels so that when we you know pop

2228
01:36:46,159 --> 01:36:51,599
labels of p1 we know where to stop

2229
01:36:49,600 --> 01:36:53,520
and we can you know keep the service

2230
01:36:51,600 --> 01:36:56,800
people with the packet

2231
01:36:53,520 --> 01:36:59,600
for local processing

2232
01:36:56,800 --> 01:36:59,600
next slide please

2233
01:37:02,400 --> 01:37:08,159
i'll skip this example of enter chain

2234
01:37:05,280 --> 01:37:12,960
labor next please

2235
01:37:08,159 --> 01:37:16,159
so in the case of srv6 we

2236
01:37:12,960 --> 01:37:20,080
proposed to encode all the ptmp transit

2237
01:37:16,159 --> 01:37:23,519
in a dedicated srh so that when we

2238
01:37:20,080 --> 01:37:26,480
process p1 you know locally we just

2239
01:37:23,520 --> 01:37:27,280
would just remove the outer ipv6 header

2240
01:37:26,480 --> 01:37:30,559
and the

2241
01:37:27,280 --> 01:37:35,840
srh and then we process the remaining

2242
01:37:30,560 --> 01:37:35,840
p1 locally next please

2243
01:37:36,159 --> 01:37:40,320
uh for path computation um

2244
01:37:40,480 --> 01:37:48,480
a p2m chain is essentially a single path

2245
01:37:43,760 --> 01:37:51,600
so pdm chain computation uh can uh

2246
01:37:48,480 --> 01:37:54,480
can be you know uh based on algorithm

2247
01:37:51,600 --> 01:37:55,920
extended from the traditional p2p path

2248
01:37:54,480 --> 01:37:59,119
computation

2249
01:37:55,920 --> 01:38:02,639
uh this draft uh does provide

2250
01:37:59,119 --> 01:38:05,920
some considerations uh specific to

2251
01:38:02,639 --> 01:38:07,520
p2mp chain so but but due to the

2252
01:38:05,920 --> 01:38:09,199
time constraint i will not go to the

2253
01:38:07,520 --> 01:38:12,239
details

2254
01:38:09,199 --> 01:38:12,239
next next please

2255
01:38:12,639 --> 01:38:16,239
so we welcome fifag from the working

2256
01:38:15,119 --> 01:38:19,360
group

2257
01:38:16,239 --> 01:38:22,879
uh in the next

2258
01:38:19,360 --> 01:38:24,320
version uh we we we plan to specify you

2259
01:38:22,880 --> 01:38:28,800
know uh

2260
01:38:24,320 --> 01:38:28,799
product extensions for bus segment

2261
01:38:28,840 --> 01:38:32,480
advertisement

2262
01:38:30,480 --> 01:38:34,799
thank you that's it yeah that's what i

2263
01:38:32,480 --> 01:38:37,599
had here thank you so we already used

2264
01:38:34,800 --> 01:38:38,159
a minute slot uh if you can have short

2265
01:38:37,600 --> 01:38:45,840
comments

2266
01:38:38,159 --> 01:38:45,839
from uh from the queue and again please

2267
01:38:51,520 --> 01:38:54,880
yeah thanks uh as as far as i understand

2268
01:38:54,080 --> 01:38:58,320
this

2269
01:38:54,880 --> 01:39:01,520
um this has been drop and continue

2270
01:38:58,320 --> 01:39:02,000
and there's no forking apart from at the

2271
01:39:01,520 --> 01:39:04,880
root

2272
01:39:02,000 --> 01:39:04,880
do i have that right

2273
01:39:05,040 --> 01:39:11,280
the there may be forking at the root

2274
01:39:08,080 --> 01:39:14,320
if the the multicast stream

2275
01:39:11,280 --> 01:39:17,599
uh can take you know more than one chain

2276
01:39:14,320 --> 01:39:18,159
right like my question is there's no

2277
01:39:17,600 --> 01:39:22,480
forking

2278
01:39:18,159 --> 01:39:22,480
anywhere else apart from at the root

2279
01:39:23,199 --> 01:39:29,678
right correct yes right so

2280
01:39:26,320 --> 01:39:32,080
there are some topologies where this um

2281
01:39:29,679 --> 01:39:33,360
really doesn't work well the simplest

2282
01:39:32,080 --> 01:39:37,679
one is the

2283
01:39:33,360 --> 01:39:41,119
uh inverted letter y topology

2284
01:39:37,679 --> 01:39:43,440
where there's um where you would

2285
01:39:41,119 --> 01:39:44,480
normally consider a point-to-multi-point

2286
01:39:43,440 --> 01:39:47,519
fork

2287
01:39:44,480 --> 01:39:48,480
but you either have to send two copies

2288
01:39:47,520 --> 01:39:51,600
down the root

2289
01:39:48,480 --> 01:39:54,718
of the of the of the tree or

2290
01:39:51,600 --> 01:39:57,840
you have to return from one of the

2291
01:39:54,719 --> 01:40:00,239
buds returned back up um into the

2292
01:39:57,840 --> 01:40:03,040
network

2293
01:40:00,239 --> 01:40:04,799
so that that's uh while this works

2294
01:40:03,040 --> 01:40:05,440
really nicely in all the examples you

2295
01:40:04,800 --> 01:40:08,719
drew

2296
01:40:05,440 --> 01:40:11,839
i suspect it it falls apart in

2297
01:40:08,719 --> 01:40:15,280
um in other example topologies

2298
01:40:11,840 --> 01:40:18,239
uh the uh

2299
01:40:15,280 --> 01:40:19,599
this mechanism you know uh as i

2300
01:40:18,239 --> 01:40:22,879
mentioned in the

2301
01:40:19,600 --> 01:40:25,920
early slide of benefits

2302
01:40:22,880 --> 01:40:29,119
ring topology and

2303
01:40:25,920 --> 01:40:32,239
linear and semi-linear topology

2304
01:40:29,119 --> 01:40:33,440
you know the goal is you won't be able

2305
01:40:32,239 --> 01:40:35,678
to achieve

2306
01:40:33,440 --> 01:40:36,638
the maximum ideal you know traffic

2307
01:40:35,679 --> 01:40:39,520
organization

2308
01:40:36,639 --> 01:40:41,360
in all topologies you know one one one

2309
01:40:39,520 --> 01:40:44,639
example would be the you know the

2310
01:40:41,360 --> 01:40:46,880
example you just gave but

2311
01:40:44,639 --> 01:40:47,920
in in general i think you know we

2312
01:40:46,880 --> 01:40:52,080
believe

2313
01:40:47,920 --> 01:40:56,480
that uh in certain type of apologies

2314
01:40:52,080 --> 01:40:59,280
and with a certain uh constraint

2315
01:40:56,480 --> 01:41:00,239
fed to the path computation you know you

2316
01:40:59,280 --> 01:41:05,440
should be able to

2317
01:41:00,239 --> 01:41:08,320
you know you know uh achieve a certain

2318
01:41:05,440 --> 01:41:08,719
level of optimization yeah right right

2319
01:41:08,320 --> 01:41:10,639
okay

2320
01:41:08,719 --> 01:41:12,800
that makes it that that makes it a

2321
01:41:10,639 --> 01:41:18,080
useful tool rather than a global

2322
01:41:12,800 --> 01:41:19,360
solution yeah yeah

2323
01:41:18,080 --> 01:41:21,119
hi emin thanks for interesting

2324
01:41:19,360 --> 01:41:24,080
presentation uh

2325
01:41:21,119 --> 01:41:26,239
question and comment question uh why

2326
01:41:24,080 --> 01:41:28,400
don't you use binding seeds that just

2327
01:41:26,239 --> 01:41:29,919
local and follow the nodal seed it's an

2328
01:41:28,400 --> 01:41:33,839
existing technology we know how to

2329
01:41:29,920 --> 01:41:33,840
distribute those labels in seeds

2330
01:41:34,080 --> 01:41:37,360
uh how do i use the binding set it could

2331
01:41:36,000 --> 01:41:40,080
be you could use binding

2332
01:41:37,360 --> 01:41:41,519
seed as a batch it just to define

2333
01:41:40,080 --> 01:41:44,960
functional replicate

2334
01:41:41,520 --> 01:41:46,000
on lookup right oh the idea is the same

2335
01:41:44,960 --> 01:41:48,560
but uh

2336
01:41:46,000 --> 01:41:50,080
you know but we want it to be routable

2337
01:41:48,560 --> 01:41:53,119
just like uh

2338
01:41:50,080 --> 01:41:54,400
just like uh you know uh notes it so in

2339
01:41:53,119 --> 01:41:58,000
the simple case

2340
01:41:54,400 --> 01:42:01,599
you know your sid list can be just can

2341
01:41:58,000 --> 01:42:01,600
consist of just the budset

2342
01:42:02,960 --> 01:42:07,520
and yeah so it would be great to see to

2343
01:42:05,440 --> 01:42:10,879
each of the analysis between using

2344
01:42:07,520 --> 01:42:13,280
local binding sheet values yeah i think

2345
01:42:10,880 --> 01:42:14,080
it's introducing a link if you go to my

2346
01:42:13,280 --> 01:42:17,599
example

2347
01:42:14,080 --> 01:42:21,440
one you can see that uh you know

2348
01:42:17,600 --> 01:42:21,440
okay could you go back to

2349
01:42:21,760 --> 01:42:25,119
the slide i think we are certain time

2350
01:42:23,199 --> 01:42:28,559
i'll read the draft and comment okay

2351
01:42:25,119 --> 01:42:31,679
okay the general comment the computation

2352
01:42:28,560 --> 01:42:33,760
logic probably should be described in pc

2353
01:42:31,679 --> 01:42:34,960
but now you're looking over something

2354
01:42:33,760 --> 01:42:37,520
like stainer tree

2355
01:42:34,960 --> 01:42:39,520
right so i would be really interested to

2356
01:42:37,520 --> 01:42:41,360
see what it takes to compute

2357
01:42:39,520 --> 01:42:43,840
most optimized topology for this kind of

2358
01:42:41,360 --> 01:42:43,839
scenario

2359
01:42:44,400 --> 01:42:59,679
yeah sure thank you

2360
01:42:57,280 --> 01:43:00,480
there by mistake uh because i was never

2361
01:42:59,679 --> 01:43:11,840
removed

2362
01:43:00,480 --> 01:43:11,839
from the kids

2363
01:43:13,360 --> 01:43:18,000
a question for the cigar so if we have

2364
01:43:15,520 --> 01:43:21,199
like a large number of destination

2365
01:43:18,000 --> 01:43:24,800
so uh how do we do like a ttr

2366
01:43:21,199 --> 01:43:27,678
uh manipulation so in uniform mode

2367
01:43:24,800 --> 01:43:30,480
so any consideration to allow you know

2368
01:43:27,679 --> 01:43:33,440
so that trend don't like terminate early

2369
01:43:30,480 --> 01:43:35,199
and also any consideration of their uh

2370
01:43:33,440 --> 01:43:36,159
settings the depths the labor stack

2371
01:43:35,199 --> 01:43:39,440
depth

2372
01:43:36,159 --> 01:43:42,080
yeah that's actually in the uh

2373
01:43:39,440 --> 01:43:42,559
yeah uh if you have a large number of

2374
01:43:42,080 --> 01:43:45,679
leaves

2375
01:43:42,560 --> 01:43:48,800
you'll probably use a a number of uh

2376
01:43:45,679 --> 01:43:51,600
you know chains

2377
01:43:48,800 --> 01:43:53,600
and for your path computation you can

2378
01:43:51,600 --> 01:43:56,960
specify a number of constraints

2379
01:43:53,600 --> 01:44:00,480
one would be the you know uh maximum hop

2380
01:43:56,960 --> 01:44:03,840
hop count you know to limit the

2381
01:44:00,480 --> 01:44:05,199
end to end delay only per per chain

2382
01:44:03,840 --> 01:44:08,560
basis

2383
01:44:05,199 --> 01:44:11,040
right okay so yeah

2384
01:44:08,560 --> 01:44:14,000
that that yeah that your your maximum

2385
01:44:11,040 --> 01:44:17,679
hop delay will be derived from the

2386
01:44:14,000 --> 01:44:19,440
uh yeah maximum hop count will be

2387
01:44:17,679 --> 01:44:20,880
should be derived from the you know

2388
01:44:19,440 --> 01:44:22,879
maximum delay you allow

2389
01:44:20,880 --> 01:44:24,320
your network you know for a packet to

2390
01:44:22,880 --> 01:44:29,440
accumulate

2391
01:44:24,320 --> 01:44:29,440
from the route to your uh tail end leave

2392
01:44:29,600 --> 01:44:34,639
yeah okay thanks okay thank you

2393
01:44:32,800 --> 01:44:35,920
so so in general there is a set of

2394
01:44:34,639 --> 01:44:37,679
trade-offs

2395
01:44:35,920 --> 01:44:40,000
uh involved it would be good if the

2396
01:44:37,679 --> 01:44:42,639
draft discussed a bit more so

2397
01:44:40,000 --> 01:44:42,639
this trade-off

2398
01:44:43,360 --> 01:44:49,040
next is uh thank you

2399
01:44:46,880 --> 01:44:49,040
they

2400
01:44:52,880 --> 01:44:57,119
yeah i will present this uh thank you

2401
01:44:55,600 --> 01:45:00,159
for cheering

2402
01:44:57,119 --> 01:45:02,719
um this job to introduce the redundancy

2403
01:45:00,159 --> 01:45:07,679
production magazine for for the second

2404
01:45:02,719 --> 01:45:09,760
routine paradigm and next page please

2405
01:45:07,679 --> 01:45:10,719
although it is a zero zero version

2406
01:45:09,760 --> 01:45:14,400
dropped

2407
01:45:10,719 --> 01:45:15,600
it has a history for several uh for

2408
01:45:14,400 --> 01:45:18,799
about two years

2409
01:45:15,600 --> 01:45:19,840
and we first introduced this work to at

2410
01:45:18,800 --> 01:45:22,960
104

2411
01:45:19,840 --> 01:45:26,400
uh to the deadnet working group uh as

2412
01:45:22,960 --> 01:45:28,880
the srv6 uh data plan

2413
01:45:26,400 --> 01:45:30,000
encapsulation for the deterministic

2414
01:45:28,880 --> 01:45:33,119
networking

2415
01:45:30,000 --> 01:45:36,639
and in the following um in following

2416
01:45:33,119 --> 01:45:40,000
meetings that uh we proposed this

2417
01:45:36,639 --> 01:45:40,800
to to then that six-man and uh working

2418
01:45:40,000 --> 01:45:44,000
groups

2419
01:45:40,800 --> 01:45:47,040
and the the dead networking group

2420
01:45:44,000 --> 01:45:50,320
chairs suggest us to move this work to

2421
01:45:47,040 --> 01:45:51,440
a spring working work because uh uh for

2422
01:45:50,320 --> 01:45:54,960
the supervision

2423
01:45:51,440 --> 01:45:58,320
since we are we are we are making the

2424
01:45:54,960 --> 01:45:59,199
uh we are making the new extensions

2425
01:45:58,320 --> 01:46:03,599
based on the

2426
01:45:59,199 --> 01:46:03,599
srv6 okay next to this

2427
01:46:04,320 --> 01:46:08,239
um we think that redundancy protection

2428
01:46:06,639 --> 01:46:10,880
is one of the mechanism to

2429
01:46:08,239 --> 01:46:12,480
achieve the service protection and the

2430
01:46:10,880 --> 01:46:14,639
service protection actually is

2431
01:46:12,480 --> 01:46:15,519
one is one of the three techniques

2432
01:46:14,639 --> 01:46:18,880
defined

2433
01:46:15,520 --> 01:46:21,520
uh for the uh deterministic networking

2434
01:46:18,880 --> 01:46:21,920
and the second reason we we propose this

2435
01:46:21,520 --> 01:46:24,000
work

2436
01:46:21,920 --> 01:46:25,760
is there's there's a new requirement for

2437
01:46:24,000 --> 01:46:26,560
the network and for the services like

2438
01:46:25,760 --> 01:46:29,600
the

2439
01:46:26,560 --> 01:46:32,800
the cloud ar or cloud games they

2440
01:46:29,600 --> 01:46:36,080
this kind of services requires

2441
01:46:32,800 --> 01:46:36,400
more strict rsa guarantees for example

2442
01:46:36,080 --> 01:46:39,360
the

2443
01:46:36,400 --> 01:46:41,519
end-to-end reliability so this

2444
01:46:39,360 --> 01:46:44,480
redundancy protections follows the

2445
01:46:41,520 --> 01:46:45,360
principle of the prey off that stands

2446
01:46:44,480 --> 01:46:47,678
for the

2447
01:46:45,360 --> 01:46:49,119
package replication elimination and

2448
01:46:47,679 --> 01:46:51,440
ordering function

2449
01:46:49,119 --> 01:46:52,799
that are originally defined for the

2450
01:46:51,440 --> 01:46:55,759
event net

2451
01:46:52,800 --> 01:46:57,440
and in this draft and this documentary

2452
01:46:55,760 --> 01:46:59,920
extends the capabilities

2453
01:46:57,440 --> 01:47:01,119
in the sr paradigm to support this

2454
01:46:59,920 --> 01:47:03,920
mapping though

2455
01:47:01,119 --> 01:47:03,920
next page please

2456
01:47:05,280 --> 01:47:09,360
and here is the example is now real for

2457
01:47:07,280 --> 01:47:12,320
this uh for this function

2458
01:47:09,360 --> 01:47:14,799
and first the r1 receive the flows and

2459
01:47:12,320 --> 01:47:17,280
encapsulate the segments to steer the

2460
01:47:14,800 --> 01:47:18,719
the packet still the flows to the

2461
01:47:17,280 --> 01:47:22,159
redundancy node

2462
01:47:18,719 --> 01:47:25,520
and under redundancy note and the

2463
01:47:22,159 --> 01:47:29,040
flows will be the flows are replicated

2464
01:47:25,520 --> 01:47:32,239
into two copies and sends through

2465
01:47:29,040 --> 01:47:32,639
sends through the different paths um to

2466
01:47:32,239 --> 01:47:36,400
the

2467
01:47:32,639 --> 01:47:39,199
merging node and at the morning note

2468
01:47:36,400 --> 01:47:40,960
if the the first the first correctly

2469
01:47:39,199 --> 01:47:43,759
received package will be

2470
01:47:40,960 --> 01:47:44,800
uh transmitted to r2 and the second

2471
01:47:43,760 --> 01:47:48,800
package

2472
01:47:44,800 --> 01:47:52,239
um which will be called a redundant

2473
01:47:48,800 --> 01:47:54,480
packet will be eliminated

2474
01:47:52,239 --> 01:47:55,599
and if one of the paths between the

2475
01:47:54,480 --> 01:47:58,559
redundancy node

2476
01:47:55,600 --> 01:47:59,280
and the merging node fails and the

2477
01:47:58,560 --> 01:48:01,920
packet

2478
01:47:59,280 --> 01:48:04,719
the the service won't be interrupted

2479
01:48:01,920 --> 01:48:08,159
since we have this redundancy path

2480
01:48:04,719 --> 01:48:10,320
and if the and currently the

2481
01:48:08,159 --> 01:48:12,400
um the merging node can actually provide

2482
01:48:10,320 --> 01:48:14,960
the functionality of the ordering

2483
01:48:12,400 --> 01:48:15,679
but it is optional it is defined

2484
01:48:14,960 --> 01:48:19,280
optional

2485
01:48:15,679 --> 01:48:19,280
so far next please

2486
01:48:21,119 --> 01:48:24,639
yeah in this draft we define two uh new

2487
01:48:24,239 --> 01:48:26,959
uh

2488
01:48:24,639 --> 01:48:28,639
segments one is the redundancy segment

2489
01:48:26,960 --> 01:48:30,800
and the merging segment

2490
01:48:28,639 --> 01:48:32,960
and this two segment performs the packet

2491
01:48:30,800 --> 01:48:35,679
replication illumination order

2492
01:48:32,960 --> 01:48:36,800
function on the redundancy node and the

2493
01:48:35,679 --> 01:48:40,159
merging node

2494
01:48:36,800 --> 01:48:42,880
respectively and on the redundancy node

2495
01:48:40,159 --> 01:48:44,159
the segment redundancy segment is

2496
01:48:42,880 --> 01:48:47,360
associated with the

2497
01:48:44,159 --> 01:48:51,040
redundancy policy and it will be

2498
01:48:47,360 --> 01:48:54,080
explained later to steer the flow and

2499
01:48:51,040 --> 01:48:58,239
um there are two new uh behavior and

2500
01:48:54,080 --> 01:49:01,840
r and m and m are defined for these two

2501
01:48:58,239 --> 01:49:05,280
segments and on the redundancy note

2502
01:49:01,840 --> 01:49:08,560
um yeah there is also metadata

2503
01:49:05,280 --> 01:49:11,920
um to be encapsulated on the

2504
01:49:08,560 --> 01:49:15,360
density node uh and remove it

2505
01:49:11,920 --> 01:49:18,000
at the on the modding mode and this

2506
01:49:15,360 --> 01:49:19,920
so far the the metadata the flow

2507
01:49:18,000 --> 01:49:23,840
identification and sequence number

2508
01:49:19,920 --> 01:49:27,199
are the uh metadata defined uh here

2509
01:49:23,840 --> 01:49:29,679
um one is to identify the unique flow

2510
01:49:27,199 --> 01:49:31,839
another is to identify the package

2511
01:49:29,679 --> 01:49:35,280
sequence of one flow

2512
01:49:31,840 --> 01:49:38,960
and for the redundancy policy uh

2513
01:49:35,280 --> 01:49:42,320
we it is it it it is uh

2514
01:49:38,960 --> 01:49:45,119
it is a variant of the sr policy and

2515
01:49:42,320 --> 01:49:46,080
it includes the more than one order more

2516
01:49:45,119 --> 01:49:48,159
than one other

2517
01:49:46,080 --> 01:49:50,000
list of a segment between the redundancy

2518
01:49:48,159 --> 01:49:53,280
node and the merging node

2519
01:49:50,000 --> 01:49:56,320
and we we defined it the last

2520
01:49:53,280 --> 01:49:58,719
um because the um

2521
01:49:56,320 --> 01:50:00,880
because the redundancy note is actually

2522
01:49:58,719 --> 01:50:04,080
specifying the path between the

2523
01:50:00,880 --> 01:50:05,920
redundancy of uh the relentless policy

2524
01:50:04,080 --> 01:50:08,000
actually specifying the path between the

2525
01:50:05,920 --> 01:50:10,560
revenues node and the merging node

2526
01:50:08,000 --> 01:50:12,560
so we assume that the the last segment

2527
01:50:10,560 --> 01:50:16,560
of the ordered list is always the march

2528
01:50:12,560 --> 01:50:16,560
segment next please

2529
01:50:18,080 --> 01:50:21,280
uh yeah this page and the following page

2530
01:50:20,719 --> 01:50:24,639
are the

2531
01:50:21,280 --> 01:50:28,080
uh the behavior of the suit code

2532
01:50:24,639 --> 01:50:31,119
uh suit code uh for the end r and and

2533
01:50:28,080 --> 01:50:34,480
m behaviors uh i won't go through

2534
01:50:31,119 --> 01:50:37,360
uh one by one by one or lambda line uh

2535
01:50:34,480 --> 01:50:38,638
maybe we can go to the the second

2536
01:50:37,360 --> 01:50:40,559
following page

2537
01:50:38,639 --> 01:50:42,239
there is a figure that i can explain

2538
01:50:40,560 --> 01:50:45,679
here um

2539
01:50:42,239 --> 01:50:48,000
so on the uh rep i think i will explain

2540
01:50:45,679 --> 01:50:49,920
uh more on the redundancy node emoji

2541
01:50:48,000 --> 01:50:52,960
notes so on the redundancy note

2542
01:50:49,920 --> 01:50:56,159
actually we will create two more uh two

2543
01:50:52,960 --> 01:50:59,520
uh new srh header and this headers

2544
01:50:56,159 --> 01:51:02,559
include will be uh the segment list

2545
01:50:59,520 --> 01:51:05,119
will be um

2546
01:51:02,560 --> 01:51:06,239
encapsulated uh triggered by the

2547
01:51:05,119 --> 01:51:09,519
redundancy

2548
01:51:06,239 --> 01:51:13,360
pulse policy so um the

2549
01:51:09,520 --> 01:51:16,719
srh will indicate the the pass from

2550
01:51:13,360 --> 01:51:19,839
for the for the primary parts and the uh

2551
01:51:16,719 --> 01:51:22,880
and srh will indicate the

2552
01:51:19,840 --> 01:51:26,639
second part and on the merging note

2553
01:51:22,880 --> 01:51:27,040
the uh uh there so on the other merging

2554
01:51:26,639 --> 01:51:29,040
note

2555
01:51:27,040 --> 01:51:30,239
if the if the package is not the

2556
01:51:29,040 --> 01:51:32,960
redundancy

2557
01:51:30,239 --> 01:51:34,320
packet and the package will be

2558
01:51:32,960 --> 01:51:37,360
encapsulated with a new

2559
01:51:34,320 --> 01:51:40,559
srh to to steer the packet to the

2560
01:51:37,360 --> 01:51:43,920
to the end of the uh to the

2561
01:51:40,560 --> 01:51:46,960
to the end of the pass yes

2562
01:51:43,920 --> 01:51:50,239
and um if

2563
01:51:46,960 --> 01:51:53,280
it um yeah yes uh to the

2564
01:51:50,239 --> 01:51:57,119
to the note 2 and if if uh

2565
01:51:53,280 --> 01:52:00,000
if it happens in the other um other uh

2566
01:51:57,119 --> 01:52:00,799
cases like it's the redundant packet it

2567
01:52:00,000 --> 01:52:04,080
will be

2568
01:52:00,800 --> 01:52:09,119
uh chopped um

2569
01:52:04,080 --> 01:52:09,119
yes i think that's yeah next please

2570
01:52:12,560 --> 01:52:16,560
yes we would like to because this work

2571
01:52:16,239 --> 01:52:20,080
is

2572
01:52:16,560 --> 01:52:22,320
um is first the initials

2573
01:52:20,080 --> 01:52:23,199
from the working group that networking

2574
01:52:22,320 --> 01:52:26,480
group so

2575
01:52:23,199 --> 01:52:29,598
uh here we propose this this generalized

2576
01:52:26,480 --> 01:52:32,879
uh redundancy protection mechanism

2577
01:52:29,599 --> 01:52:35,199
to spring and we would like to

2578
01:52:32,880 --> 01:52:38,159
expect more comments and discussions and

2579
01:52:35,199 --> 01:52:38,159
maybe calculations

2580
01:52:42,840 --> 01:52:45,840
okay

2581
01:52:48,239 --> 01:52:51,839
if you could go back one slide

2582
01:52:56,960 --> 01:53:00,560
okay in this slide the redundancy node

2583
01:52:59,840 --> 01:53:05,760
replaces

2584
01:53:00,560 --> 01:53:08,880
srh1 with either srh2 or srh3

2585
01:53:05,760 --> 01:53:12,040
and since there's is it possible that

2586
01:53:08,880 --> 01:53:15,440
srh2 or 3 are actually longer than

2587
01:53:12,040 --> 01:53:15,440
srh101 was

2588
01:53:16,880 --> 01:53:21,199
yeah i i'd like to yeah uh actually i'm

2589
01:53:20,080 --> 01:53:24,480
very happy to

2590
01:53:21,199 --> 01:53:24,960
to have to to um to explain more on this

2591
01:53:24,480 --> 01:53:27,360
page

2592
01:53:24,960 --> 01:53:28,400
on this uh figure actually we just

2593
01:53:27,360 --> 01:53:31,119
defined this

2594
01:53:28,400 --> 01:53:32,159
redundancy node and the multi-node or

2595
01:53:31,119 --> 01:53:35,598
the

2596
01:53:32,159 --> 01:53:39,440
redundancy segment and merging segment

2597
01:53:35,599 --> 01:53:43,840
uh it defines a pair of segments

2598
01:53:39,440 --> 01:53:46,879
that um yeah i i will first

2599
01:53:43,840 --> 01:53:50,560
answer your question i think that um we

2600
01:53:46,880 --> 01:53:52,400
um we define this uh these two segments

2601
01:53:50,560 --> 01:53:54,719
and in between these two segments or

2602
01:53:52,400 --> 01:53:57,280
between these two notes that is the

2603
01:53:54,719 --> 01:53:58,400
the functionality of the uh redundancy

2604
01:53:57,280 --> 01:54:00,800
protection

2605
01:53:58,400 --> 01:54:02,799
actually before before the redundancy

2606
01:54:00,800 --> 01:54:07,520
mode or after the merging node

2607
01:54:02,800 --> 01:54:11,199
it is just purely uh as our as our

2608
01:54:07,520 --> 01:54:15,119
um srv6 domain

2609
01:54:11,199 --> 01:54:18,080
so um we would like to split this

2610
01:54:15,119 --> 01:54:19,598
uh if we use this simple uh simple case

2611
01:54:18,080 --> 01:54:22,559
we would like to split this

2612
01:54:19,599 --> 01:54:25,040
two into three parts one is three part

2613
01:54:22,560 --> 01:54:28,080
from node one to the another z node

2614
01:54:25,040 --> 01:54:31,199
and at the at the node one the rsr

2615
01:54:28,080 --> 01:54:32,400
srh indicates that only indicates the

2616
01:54:31,199 --> 01:54:34,719
the segment list

2617
01:54:32,400 --> 01:54:36,960
from node one to the redundancy node it

2618
01:54:34,719 --> 01:54:40,159
doesn't include the other passes

2619
01:54:36,960 --> 01:54:42,480
towards two node two and

2620
01:54:40,159 --> 01:54:43,839
on the redundancy note that it will

2621
01:54:42,480 --> 01:54:46,959
specify the path

2622
01:54:43,840 --> 01:54:49,599
from redundancy node to the marginal and

2623
01:54:46,960 --> 01:54:50,400
uh on the marginality to replace the new

2624
01:54:49,599 --> 01:54:54,400
7 list

2625
01:54:50,400 --> 01:54:56,719
to the to the node 2.

2626
01:54:54,400 --> 01:54:58,638
so the packet may be longer when it

2627
01:54:56,719 --> 01:55:00,719
leaves the redundancy node than it was

2628
01:54:58,639 --> 01:55:05,599
when it entered the redundancy node

2629
01:55:00,719 --> 01:55:09,440
is that correct yeah i i understand so

2630
01:55:05,599 --> 01:55:11,440
um is that is there any concern um

2631
01:55:09,440 --> 01:55:12,879
well yes it's the same concern with

2632
01:55:11,440 --> 01:55:14,960
header insertion

2633
01:55:12,880 --> 01:55:19,840
um if the packet is longer you may hit

2634
01:55:14,960 --> 01:55:19,840
uh hit mtu problems

2635
01:55:20,080 --> 01:55:27,679
um yeah i yeah okay but

2636
01:55:24,320 --> 01:55:30,880
um yeah i i suppose that this is

2637
01:55:27,679 --> 01:55:32,880
um yeah this is a problem but

2638
01:55:30,880 --> 01:55:33,920
maybe this is not a problem that we

2639
01:55:32,880 --> 01:55:37,360
should uh

2640
01:55:33,920 --> 01:55:40,239
i mean this is not the scope of this uh

2641
01:55:37,360 --> 01:55:40,960
of the of of this uh redundancy

2642
01:55:40,239 --> 01:55:44,080
production

2643
01:55:40,960 --> 01:55:44,800
uh i mean it's a generalized problem

2644
01:55:44,080 --> 01:55:47,040
here

2645
01:55:44,800 --> 01:55:47,040
um

2646
01:55:49,599 --> 01:55:53,119
it's a generic problem with header

2647
01:55:51,280 --> 01:55:56,880
insertion yeah but you've hit the same

2648
01:55:53,119 --> 01:55:56,880
problem by making the header longer

2649
01:55:59,360 --> 01:56:06,320
uh yeah um actually i'm not quite uh

2650
01:56:02,719 --> 01:56:09,520
quite uh known about this uh i'm tube uh

2651
01:56:06,320 --> 01:56:12,719
problem but i think i will i will

2652
01:56:09,520 --> 01:56:14,000
maybe reply you uh later if i understand

2653
01:56:12,719 --> 01:56:17,040
the relation between the

2654
01:56:14,000 --> 01:56:19,440
mq problem and the and how we can use

2655
01:56:17,040 --> 01:56:20,880
how we can avoid or solve this problem

2656
01:56:19,440 --> 01:56:23,598
in our case

2657
01:56:20,880 --> 01:56:24,639
sure yeah i think i will reply you later

2658
01:56:23,599 --> 01:56:27,040
okay

2659
01:56:24,639 --> 01:56:27,040
thank you

2660
01:56:33,840 --> 01:56:37,679
issue can be solved by like for example

2661
01:56:36,239 --> 01:56:40,239
compression

2662
01:56:37,679 --> 01:56:40,880
mechanisms that will be another topic on

2663
01:56:40,239 --> 01:56:46,239
friday

2664
01:56:40,880 --> 01:56:46,239
welcome guys all right

2665
01:56:52,560 --> 01:56:57,840
all right

2666
01:57:06,080 --> 01:57:12,880
all right we are not hearing you

2667
01:57:11,440 --> 01:57:15,119
okay can you send your comment on the

2668
01:57:12,880 --> 01:57:15,119
list

2669
01:57:15,840 --> 01:57:19,520
okay so we are running we are going to

2670
01:57:18,239 --> 01:57:22,959
cut the queue

2671
01:57:19,520 --> 01:57:26,400
uh we are running a bit late um

2672
01:57:22,960 --> 01:57:30,000
we had three items in the agenda

2673
01:57:26,400 --> 01:57:33,040
two are from uh ymo and they are related

2674
01:57:30,000 --> 01:57:36,840
to the uh the

2675
01:57:33,040 --> 01:57:38,159
the failure of the endpoint of the

2676
01:57:36,840 --> 01:57:40,800
segment

2677
01:57:38,159 --> 01:57:42,480
so we discussed a bit at the beginning

2678
01:57:40,800 --> 01:57:44,400
of the meeting and we are going to have

2679
01:57:42,480 --> 01:57:47,440
a dedicated

2680
01:57:44,400 --> 01:57:50,839
session for this subject

2681
01:57:47,440 --> 01:57:52,559
there are at least five rc draft or six

2682
01:57:50,840 --> 01:57:55,119
drafts

2683
01:57:52,560 --> 01:57:56,080
for that subject or regarding the

2684
01:57:55,119 --> 01:57:59,199
failure

2685
01:57:56,080 --> 01:58:00,880
not failure of the endpoint so it makes

2686
01:57:59,199 --> 01:58:02,480
sense to have a coordination between

2687
01:58:00,880 --> 01:58:04,159
other drafts and have a dedicated

2688
01:58:02,480 --> 01:58:06,718
meeting

2689
01:58:04,159 --> 01:58:08,638
and given that uh we're going to skip

2690
01:58:06,719 --> 01:58:11,360
the two slides for more way more

2691
01:58:08,639 --> 01:58:12,159
to gain time and to avoid the having

2692
01:58:11,360 --> 01:58:15,280
repetition

2693
01:58:12,159 --> 01:58:16,879
for the next meeting thank you very much

2694
01:58:15,280 --> 01:58:19,040
for for your understanding we have

2695
01:58:16,880 --> 01:58:20,320
discussed

2696
01:58:19,040 --> 01:58:22,400
so we have here a few minutes for the

2697
01:58:20,320 --> 01:58:22,880
young modeller maybe we could focus on

2698
01:58:22,400 --> 01:58:25,759
the

2699
01:58:22,880 --> 01:58:25,760
first two slides

2700
01:58:25,920 --> 01:58:29,119
because i don't think there is much

2701
01:58:27,280 --> 01:58:32,080
point in discussing the detail of the

2702
01:58:29,119 --> 01:58:32,080
model at this point

2703
01:58:32,400 --> 01:58:38,799
and this is young uh no this is uh

2704
01:58:36,719 --> 01:58:40,960
i don't know who's speaking hey uh this

2705
01:58:38,800 --> 01:58:42,080
is yeah

2706
01:58:40,960 --> 01:58:44,719
yeah so here actually i'm going to

2707
01:58:42,080 --> 01:58:45,840
present uh sr segment uh sr service

2708
01:58:44,719 --> 01:58:49,040
programming yang

2709
01:58:45,840 --> 01:58:50,560
data model on behalf of our draft

2710
01:58:49,040 --> 01:58:52,480
co-authors can you please go to the next

2711
01:58:50,560 --> 01:58:54,880
slide

2712
01:58:52,480 --> 01:58:56,320
this young model is based on the sr

2713
01:58:54,880 --> 01:58:57,599
service programming architecture

2714
01:58:56,320 --> 01:59:03,519
described in the

2715
01:58:57,599 --> 01:59:06,480
ietf draft next slide please

2716
01:59:03,520 --> 01:59:06,960
yeah uh this yang model uh covers the

2717
01:59:06,480 --> 01:59:10,159
base

2718
01:59:06,960 --> 01:59:12,159
sr segment sr service programming model

2719
01:59:10,159 --> 01:59:15,360
which is common for both

2720
01:59:12,159 --> 01:59:18,400
sr aware and srn aware services and

2721
01:59:15,360 --> 01:59:23,199
yang model for sr another

2722
01:59:18,400 --> 01:59:23,199
service proxy uh next page please

2723
01:59:23,760 --> 01:59:26,960
this yang model consists of four yang

2724
01:59:26,080 --> 01:59:30,159
modules

2725
01:59:26,960 --> 01:59:32,880
uh which are shown in the uh green boxes

2726
01:59:30,159 --> 01:59:33,759
the middle sr service programming model

2727
01:59:32,880 --> 01:59:37,040
is the base

2728
01:59:33,760 --> 01:59:40,560
sr service programming model the

2729
01:59:37,040 --> 01:59:43,440
bottom green box shows the sr another

2730
01:59:40,560 --> 01:59:43,920
service module which augments the base

2731
01:59:43,440 --> 01:59:46,879
sr

2732
01:59:43,920 --> 01:59:47,679
service programming module similarly any

2733
01:59:46,880 --> 01:59:50,480
new sr

2734
01:59:47,679 --> 01:59:52,480
aware services could be modeled by

2735
01:59:50,480 --> 01:59:57,919
augmenting the base sr service

2736
01:59:52,480 --> 01:59:59,759
programming module next slide please

2737
01:59:57,920 --> 02:00:02,080
this is the base sr

2738
01:59:59,760 --> 02:00:03,040
service programming yang configuration

2739
02:00:02,080 --> 02:00:05,519
model

2740
02:00:03,040 --> 02:00:06,800
this is a list of service program

2741
02:00:05,520 --> 02:00:09,440
indexed by name

2742
02:00:06,800 --> 02:00:09,840
the key attributes are highlighted in

2743
02:00:09,440 --> 02:00:13,199
the

2744
02:00:09,840 --> 02:00:15,040
red boxes the first one is like sr sr

2745
02:00:13,199 --> 02:00:18,559
service programming behavior

2746
02:00:15,040 --> 02:00:22,480
this would be a sr aware static proxy

2747
02:00:18,560 --> 02:00:25,360
uh dynamic proxy etc the second one is

2748
02:00:22,480 --> 02:00:26,959
the service type and service instance

2749
02:00:25,360 --> 02:00:29,839
represent a service

2750
02:00:26,960 --> 02:00:31,360
in this in the case of fsr aware this is

2751
02:00:29,840 --> 02:00:33,920
the exact service which

2752
02:00:31,360 --> 02:00:34,799
is offered and in the case of uh sr

2753
02:00:33,920 --> 02:00:37,520
another

2754
02:00:34,800 --> 02:00:38,320
service proxy this is the service which

2755
02:00:37,520 --> 02:00:41,840
has been

2756
02:00:38,320 --> 02:00:44,719
proxied for next one is the sid assigned

2757
02:00:41,840 --> 02:00:45,599
or allocated for this sr service

2758
02:00:44,719 --> 02:00:48,560
programming

2759
02:00:45,599 --> 02:00:49,280
the last one is uh ssr service container

2760
02:00:48,560 --> 02:00:52,080
which would be

2761
02:00:49,280 --> 02:00:54,159
augmented by sr aware and sr another

2762
02:00:52,080 --> 02:00:57,519
service specific data models

2763
02:00:54,159 --> 02:00:59,598
uh next like please dragon ball um

2764
02:00:57,520 --> 02:01:01,360
yes sorry we don't have time to to

2765
02:00:59,599 --> 02:01:04,800
review the wall uh young model

2766
02:01:01,360 --> 02:01:08,239
in detail okay i think the

2767
02:01:04,800 --> 02:01:10,480
the goal of the presentation was to uh

2768
02:01:08,239 --> 02:01:13,440
to raise the awareness of the draft on

2769
02:01:10,480 --> 02:01:15,598
the proposition to to the work group

2770
02:01:13,440 --> 02:01:17,119
but uh ernst you can think input on

2771
02:01:15,599 --> 02:01:18,800
feedback

2772
02:01:17,119 --> 02:01:20,880
yeah sure i think the detail of the

2773
02:01:18,800 --> 02:01:22,960
young model could be uh could be read

2774
02:01:20,880 --> 02:01:25,040
from the draft rather than presenting

2775
02:01:22,960 --> 02:01:28,960
inside

2776
02:01:25,040 --> 02:01:37,840
okay sure yeah thank you yeah thanks

2777
02:01:28,960 --> 02:01:37,840
do we have a comment on the mic

2778
02:01:40,560 --> 02:01:46,000
otherwise thank you again uh mo for

2779
02:01:44,000 --> 02:01:49,360
accepting to to delay your presentation

2780
02:01:46,000 --> 02:01:49,360
for the dedicating meeting

2781
02:01:49,520 --> 02:01:53,760
also we have a meeting on friday which

2782
02:01:52,560 --> 02:01:56,880
is dedicated to

2783
02:01:53,760 --> 02:01:59,280
to one draft which is uh

2784
02:01:56,880 --> 02:02:01,760
the requirements from the design team

2785
02:01:59,280 --> 02:02:04,320
for the discussion corporation

2786
02:02:01,760 --> 02:02:07,599
so please read the draft so that we can

2787
02:02:04,320 --> 02:02:12,080
have a useful discussion

2788
02:02:07,599 --> 02:02:14,880
thank you for your time and see you on

2789
02:02:12,080 --> 02:02:14,880
on friday

2790
02:02:15,119 --> 02:02:19,839
thank you bye

2791
02:02:48,159 --> 02:02:50,239
you

