1
00:00:09,519 --> 00:00:12,480
okay i'll

2
00:00:10,320 --> 00:00:14,879
go ahead and get started if you're okay

3
00:00:12,480 --> 00:00:17,520
uh co-chairs

4
00:00:14,880 --> 00:00:19,840
yeah it's okay with me uh what about

5
00:00:17,520 --> 00:00:19,840
mark

6
00:00:20,160 --> 00:00:23,680
yeah what about 10 should we wait or

7
00:00:23,119 --> 00:00:31,519
what do you

8
00:00:23,680 --> 00:00:34,719
uh no i'm sending him a message

9
00:00:31,519 --> 00:00:37,120
all right i'll go ahead uh welcome to

10
00:00:34,719 --> 00:00:40,239
the mpls working group session

11
00:00:37,120 --> 00:00:44,239
um today is friday the last day uh in

12
00:00:40,239 --> 00:00:47,839
this iedf109 this is a two-hour session

13
00:00:44,239 --> 00:00:51,120
uh i am tariq and we have loa

14
00:00:47,840 --> 00:00:54,800
and nick as co-chairs our work

15
00:00:51,120 --> 00:00:56,718
working group secretary is mack chen um

16
00:00:54,800 --> 00:00:59,839
he's lost in action right now but we'll

17
00:00:56,719 --> 00:00:59,840
find them

18
00:01:00,480 --> 00:01:06,320
next this is uh

19
00:01:03,680 --> 00:01:08,240
yeah i probably have seen this uh slide

20
00:01:06,320 --> 00:01:11,439
multiple times by now

21
00:01:08,240 --> 00:01:12,640
um this is the note well which governs

22
00:01:11,439 --> 00:01:14,880
the policies uh

23
00:01:12,640 --> 00:01:17,200
of your contributions and attendance or

24
00:01:14,880 --> 00:01:20,479
participation in itf

25
00:01:17,200 --> 00:01:24,080
um as usual if you've not read it or

26
00:01:20,479 --> 00:01:24,080
you're not acquainted with it please do

27
00:01:24,840 --> 00:01:27,840
so

28
00:01:27,920 --> 00:01:33,119
uh the blue sheets uh as usual they're

29
00:01:31,040 --> 00:01:34,320
for online meetings they you don't have

30
00:01:33,119 --> 00:01:36,799
to sign in

31
00:01:34,320 --> 00:01:37,919
um they're automatically collected um

32
00:01:36,799 --> 00:01:40,560
the meet echo

33
00:01:37,920 --> 00:01:41,920
if you're here then you've you've uh you

34
00:01:40,560 --> 00:01:46,000
have the right url

35
00:01:41,920 --> 00:01:47,040
um jabber uh is integrated into meet

36
00:01:46,000 --> 00:01:49,680
echo so we'll

37
00:01:47,040 --> 00:01:51,360
um i think nick and lowa will be taking

38
00:01:49,680 --> 00:01:55,280
care of any questions that pop

39
00:01:51,360 --> 00:01:56,000
up uh minute taking uh we have the kodi

40
00:01:55,280 --> 00:01:59,520
md

41
00:01:56,000 --> 00:02:01,920
link uh please uh if you uh if you can

42
00:01:59,520 --> 00:02:03,520
contribute to a minute taken please do

43
00:02:01,920 --> 00:02:06,840
please do so

44
00:02:03,520 --> 00:02:10,399
um the agenda is published online

45
00:02:06,840 --> 00:02:13,440
so and i'll be uh presenting uh

46
00:02:10,399 --> 00:02:16,239
that in a minute uh so take a look if if

47
00:02:13,440 --> 00:02:20,000
you have issues please raise it

48
00:02:16,239 --> 00:02:21,680
slides are also available for offline

49
00:02:20,000 --> 00:02:23,800
[Music]

50
00:02:21,680 --> 00:02:26,800
taking a look

51
00:02:23,800 --> 00:02:30,879
[Music]

52
00:02:26,800 --> 00:02:33,440
so here's the agenda we have

53
00:02:30,879 --> 00:02:35,760
10 items on the agenda it's a two-hour

54
00:02:33,440 --> 00:02:38,959
session

55
00:02:35,760 --> 00:02:40,959
we think that we will be on time

56
00:02:38,959 --> 00:02:42,319
um if you have any issues with this

57
00:02:40,959 --> 00:02:46,000
agenda please raise it

58
00:02:42,319 --> 00:02:48,238
um otherwise i'll proceed

59
00:02:46,000 --> 00:02:50,239
we ask the presenters as usual to stick

60
00:02:48,239 --> 00:02:53,840
to the time slot

61
00:02:50,239 --> 00:02:53,840
they're assigned they're assigned

62
00:02:55,519 --> 00:02:58,160
10 items

63
00:03:00,319 --> 00:03:07,839
in terms of errata this time we have uh

64
00:03:04,560 --> 00:03:11,440
two reported erratas looks like

65
00:03:07,840 --> 00:03:14,480
a pdf has corrupted the formatting

66
00:03:11,440 --> 00:03:17,599
um there is a

67
00:03:14,480 --> 00:03:21,760
for rfc 6428

68
00:03:17,599 --> 00:03:25,920
the reported issue is with the remote

69
00:03:21,760 --> 00:03:29,760
vfd discriminator the suggestion

70
00:03:25,920 --> 00:03:32,798
is to reset it on timeout

71
00:03:29,760 --> 00:03:35,760
or on on the transitioning to the down

72
00:03:32,799 --> 00:03:38,400
um i did quote rfc which i don't have

73
00:03:35,760 --> 00:03:42,159
the number now because of

74
00:03:38,400 --> 00:03:44,720
you know the garbling of the text but

75
00:03:42,159 --> 00:03:46,319
the suggestion is that if a period of

76
00:03:44,720 --> 00:03:47,359
detection time passes without the

77
00:03:46,319 --> 00:03:50,399
receipt of a valid

78
00:03:47,360 --> 00:03:53,280
authenticated bfd packet uh the

79
00:03:50,400 --> 00:03:54,000
the the discriminator must be set to

80
00:03:53,280 --> 00:03:56,319
zero

81
00:03:54,000 --> 00:03:57,120
so this is kind of an agreement we will

82
00:03:56,319 --> 00:04:00,798
take it back

83
00:03:57,120 --> 00:04:06,080
with the ad and uh and

84
00:04:00,799 --> 00:04:08,720
see how to progress on this errata

85
00:04:06,080 --> 00:04:11,599
anyone wants to make any comment on this

86
00:04:08,720 --> 00:04:11,599
radar field free

87
00:04:13,200 --> 00:04:20,759
okay i guess no one has an issue

88
00:04:17,120 --> 00:04:24,720
uh the second errata reported on rfc

89
00:04:20,759 --> 00:04:28,160
6512 it's a typo

90
00:04:24,720 --> 00:04:31,600
since p1 has no root should be

91
00:04:28,160 --> 00:04:35,840
since p1 has no route

92
00:04:31,600 --> 00:04:35,840
again this is a simple table typo

93
00:04:39,040 --> 00:04:45,360
in terms of liaisons we have

94
00:04:42,160 --> 00:04:47,840
received one liaison in response to a

95
00:04:45,360 --> 00:04:52,080
previous liaison with

96
00:04:47,840 --> 00:04:54,638
with otnt it's an itu

97
00:04:52,080 --> 00:04:58,719
[Music]

98
00:04:54,639 --> 00:05:00,720
research group um and uh

99
00:04:58,720 --> 00:05:01,759
you will see that there is a response

100
00:05:00,720 --> 00:05:05,360
from

101
00:05:01,759 --> 00:05:08,479
actually this is a response uh

102
00:05:05,360 --> 00:05:11,680
this is from mpls to itu

103
00:05:08,479 --> 00:05:13,039
and there is a uh response back from itu

104
00:05:11,680 --> 00:05:16,880
to npls on the same

105
00:05:13,039 --> 00:05:19,919
uh uh on the same matter

106
00:05:16,880 --> 00:05:24,080
um we have another uh separate

107
00:05:19,919 --> 00:05:29,520
uh liaison from itu to mpls

108
00:05:24,080 --> 00:05:32,080
about mplstp documents for information

109
00:05:29,520 --> 00:05:35,039
so if you go to the link you will see

110
00:05:32,080 --> 00:05:35,039
all the documents that

111
00:05:35,280 --> 00:05:39,840
that this liaison is all about

112
00:05:41,520 --> 00:05:46,560
co-chairs feel free to add if i'm

113
00:05:43,759 --> 00:05:46,560
missing something

114
00:05:50,840 --> 00:05:55,520
okay

115
00:05:52,720 --> 00:05:55,919
can you hear me yes i can hear you yeah

116
00:05:55,520 --> 00:06:00,000
okay

117
00:05:55,919 --> 00:06:02,400
but i think we should actually thank

118
00:06:00,000 --> 00:06:03,600
scott mansfield he's doing most of the

119
00:06:02,400 --> 00:06:06,000
work

120
00:06:03,600 --> 00:06:06,960
putting the associations together on our

121
00:06:06,000 --> 00:06:08,720
side

122
00:06:06,960 --> 00:06:11,198
and make sure that they actually respond

123
00:06:08,720 --> 00:06:11,199
on time

124
00:06:11,360 --> 00:06:17,680
so he's doing a very good job

125
00:06:14,800 --> 00:06:18,960
and please if he wants support on anyone

126
00:06:17,680 --> 00:06:21,840
in the working group

127
00:06:18,960 --> 00:06:21,840
please help him

128
00:06:22,000 --> 00:06:24,560
that's okay

129
00:06:25,039 --> 00:06:33,199
okay thank you laura

130
00:06:30,080 --> 00:06:35,520
i'll move on to the document status

131
00:06:33,199 --> 00:06:37,840
so we've we've not had any new rfcs

132
00:06:35,520 --> 00:06:40,159
since iedf108

133
00:06:37,840 --> 00:06:42,719
but we do have three our three drafts or

134
00:06:40,160 --> 00:06:47,600
documents that are in rc editor

135
00:06:42,720 --> 00:06:50,639
queue and they will become rc soon

136
00:06:47,600 --> 00:06:53,840
we do have one document in iesg it was

137
00:06:50,639 --> 00:06:56,160
expired but uh the authors uh this week

138
00:06:53,840 --> 00:06:58,799
they have refreshed the document

139
00:06:56,160 --> 00:07:02,000
um there are some outstanding isu review

140
00:06:58,800 --> 00:07:04,000
comments that are being worked on this

141
00:07:02,000 --> 00:07:06,560
is the feedback i got from the authors

142
00:07:04,000 --> 00:07:06,560
on this one

143
00:07:06,800 --> 00:07:10,479
there are no new working group documents

144
00:07:09,120 --> 00:07:12,319
that were adopted

145
00:07:10,479 --> 00:07:15,280
although we have received a number of

146
00:07:12,319 --> 00:07:18,800
requests for working group adoption

147
00:07:15,280 --> 00:07:21,198
and we will see that we're taking action

148
00:07:18,800 --> 00:07:21,199
on those

149
00:07:23,360 --> 00:07:27,919
in terms of working group updated

150
00:07:25,919 --> 00:07:32,240
working group documents we have the

151
00:07:27,919 --> 00:07:35,198
mpls static gang it was updated and

152
00:07:32,240 --> 00:07:36,639
this was waiting on the base mpls base

153
00:07:35,199 --> 00:07:39,759
yang which is now

154
00:07:36,639 --> 00:07:40,639
in mature state it's going to become rc

155
00:07:39,759 --> 00:07:43,680
soon

156
00:07:40,639 --> 00:07:46,960
so this will progress quicker now

157
00:07:43,680 --> 00:07:50,720
given the dependency is also

158
00:07:46,960 --> 00:07:55,520
almost complete the second draft here

159
00:07:50,720 --> 00:07:57,759
the rmr mpls is little bit controversial

160
00:07:55,520 --> 00:08:00,000
this was in iesg and it was returned

161
00:07:57,759 --> 00:08:02,160
back to the working group

162
00:08:00,000 --> 00:08:04,720
we were discussing it just before we

163
00:08:02,160 --> 00:08:07,280
started the session

164
00:08:04,720 --> 00:08:07,919
lowa might have some words to say about

165
00:08:07,280 --> 00:08:11,440
it

166
00:08:07,919 --> 00:08:13,840
or and we expect some update from

167
00:08:11,440 --> 00:08:15,919
that shares on this i will stop here and

168
00:08:13,840 --> 00:08:16,638
uh you know ask if laura wants to add

169
00:08:15,919 --> 00:08:20,639
anything

170
00:08:16,639 --> 00:08:20,639
uh on this document

171
00:08:21,360 --> 00:08:27,280
not anything substantial i think

172
00:08:24,639 --> 00:08:28,879
the true statement at the moment is that

173
00:08:27,280 --> 00:08:31,119
we have not finished the discussion

174
00:08:28,879 --> 00:08:33,599
among the chairs what we actually want

175
00:08:31,120 --> 00:08:36,320
to do it will take a couple of days

176
00:08:33,599 --> 00:08:36,959
next week and then we will send out a

177
00:08:36,320 --> 00:08:40,000
statement

178
00:08:36,958 --> 00:08:42,478
either from work group shares or on the

179
00:08:40,000 --> 00:08:42,479
shepherd

180
00:08:42,958 --> 00:08:49,040
thank you okay thank you

181
00:08:46,720 --> 00:08:50,080
the next uh updated working group

182
00:08:49,040 --> 00:08:54,399
document of

183
00:08:50,080 --> 00:08:56,959
interest we have the mpls bfd directed

184
00:08:54,399 --> 00:08:58,160
uh this is uh also controversial there

185
00:08:56,959 --> 00:09:00,800
it was uh

186
00:08:58,160 --> 00:09:02,399
it's been lingering for a while but we

187
00:09:00,800 --> 00:09:05,599
have a follow-up

188
00:09:02,399 --> 00:09:05,920
uh with a meeting with the authors and

189
00:09:05,600 --> 00:09:09,279
uh

190
00:09:05,920 --> 00:09:12,160
reviewer carlos underway

191
00:09:09,279 --> 00:09:13,600
so my understanding is nick is arranging

192
00:09:12,160 --> 00:09:15,680
that

193
00:09:13,600 --> 00:09:18,640
i will pause here again and ask if nick

194
00:09:15,680 --> 00:09:18,640
wants to add anything

195
00:09:26,800 --> 00:09:33,439
that's it okay

196
00:09:30,800 --> 00:09:34,640
the next one here uh the lsp ping

197
00:09:33,440 --> 00:09:36,800
registries update

198
00:09:34,640 --> 00:09:38,480
uh it is in worker group last call at

199
00:09:36,800 --> 00:09:42,240
the moment

200
00:09:38,480 --> 00:09:42,240
recently expired um

201
00:09:42,320 --> 00:09:45,920
documents they are working group

202
00:09:43,920 --> 00:09:49,839
documents um so this

203
00:09:45,920 --> 00:09:51,199
the first one is rmr it has an rmr

204
00:09:49,839 --> 00:09:54,240
dependency on the

205
00:09:51,200 --> 00:09:56,080
on the base rmr draft and this is the

206
00:09:54,240 --> 00:09:59,120
one that we are going to uh

207
00:09:56,080 --> 00:10:02,399
make a decision on uh

208
00:09:59,120 --> 00:10:07,040
soon and the decision will reflect on

209
00:10:02,399 --> 00:10:07,040
on this expired document

210
00:10:07,600 --> 00:10:15,040
we have the lsp ping ospv3 code point

211
00:10:12,000 --> 00:10:15,920
we have emailed the authors uh notifying

212
00:10:15,040 --> 00:10:19,680
them that

213
00:10:15,920 --> 00:10:20,399
this expired and uh we have a progress

214
00:10:19,680 --> 00:10:24,479
update

215
00:10:20,399 --> 00:10:27,839
towards the end i'll also expand on that

216
00:10:24,480 --> 00:10:30,959
um before i flip to the next slide

217
00:10:27,839 --> 00:10:34,320
feel free to interrupt or add

218
00:10:30,959 --> 00:10:37,119
if there's uh anything from the offers

219
00:10:34,320 --> 00:10:37,120
on these drops

220
00:10:39,600 --> 00:10:41,920
okay

221
00:10:42,640 --> 00:10:49,040
any new individual documents

222
00:10:45,839 --> 00:10:53,440
we have one by loa about the

223
00:10:49,040 --> 00:10:57,439
structure of ayana registries in mpls

224
00:10:53,440 --> 00:11:01,360
so this is an interesting document

225
00:10:57,440 --> 00:11:04,959
to organize the code point structure

226
00:11:01,360 --> 00:11:07,519
in ayanna there are some

227
00:11:04,959 --> 00:11:08,079
issues that were raised by the ayana

228
00:11:07,519 --> 00:11:11,040
people

229
00:11:08,079 --> 00:11:12,719
that tools do not support the proposed

230
00:11:11,040 --> 00:11:15,279
structure

231
00:11:12,720 --> 00:11:17,680
so i understand that lowell you will be

232
00:11:15,279 --> 00:11:19,760
uh following up with the uh

233
00:11:17,680 --> 00:11:20,880
with the ayanna people on what can be

234
00:11:19,760 --> 00:11:23,040
done uh

235
00:11:20,880 --> 00:11:24,160
and i will pause here if you want to add

236
00:11:23,040 --> 00:11:28,240
anything on that

237
00:11:24,160 --> 00:11:31,680
feel free to jump on the mic

238
00:11:28,240 --> 00:11:34,959
i i can just say that

239
00:11:31,680 --> 00:11:35,439
i sent the draft to ayanna at the same

240
00:11:34,959 --> 00:11:38,479
time

241
00:11:35,440 --> 00:11:41,040
as i first first hosted it

242
00:11:38,480 --> 00:11:43,600
and that was actually the day before the

243
00:11:41,040 --> 00:11:46,719
cut-off so there was not much time

244
00:11:43,600 --> 00:11:50,240
i got the response from amanda and

245
00:11:46,720 --> 00:11:54,240
amanda's point is that

246
00:11:50,240 --> 00:11:58,000
she likes what you want to do but

247
00:11:54,240 --> 00:12:01,120
the current tools are not supporting

248
00:11:58,000 --> 00:12:01,920
one more hierarchy a hierarchical level

249
00:12:01,120 --> 00:12:05,040
in the

250
00:12:01,920 --> 00:12:08,959
end radiuses and

251
00:12:05,040 --> 00:12:11,599
i'm going to talk to um

252
00:12:08,959 --> 00:12:14,239
both two people and diana people and see

253
00:12:11,600 --> 00:12:14,240
what we can do

254
00:12:15,120 --> 00:12:22,720
okay thank you

255
00:12:19,279 --> 00:12:24,720
uh moving on uh the the drafts colored

256
00:12:22,720 --> 00:12:26,000
in blue are on the agenda so i'll skip

257
00:12:24,720 --> 00:12:29,360
over those

258
00:12:26,000 --> 00:12:29,360
they will be presented today

259
00:12:30,320 --> 00:12:38,399
that's it updated individual documents

260
00:12:34,800 --> 00:12:41,040
we have the lsp ping genetics said

261
00:12:38,399 --> 00:12:42,639
uh this was presented multiple times and

262
00:12:41,040 --> 00:12:46,160
we received from the author's

263
00:12:42,639 --> 00:12:49,600
request for adoption um

264
00:12:46,160 --> 00:12:52,240
so there were these two documents the

265
00:12:49,600 --> 00:12:53,120
egress tlv for nelfek as well as this

266
00:12:52,240 --> 00:12:56,399
one they

267
00:12:53,120 --> 00:12:59,360
seem to be related

268
00:12:56,399 --> 00:13:00,480
the chairs have discussed this and uh

269
00:12:59,360 --> 00:13:02,720
we're going to ask

270
00:13:00,480 --> 00:13:04,839
for the author's coordination or at

271
00:13:02,720 --> 00:13:08,079
least

272
00:13:04,839 --> 00:13:09,200
discussing uh potential duplication

273
00:13:08,079 --> 00:13:12,399
there

274
00:13:09,200 --> 00:13:16,160
and get uh getting um you know back

275
00:13:12,399 --> 00:13:17,040
reciprocating back on on what comes out

276
00:13:16,160 --> 00:13:19,360
of it

277
00:13:17,040 --> 00:13:22,480
and based on that we will proceed with a

278
00:13:19,360 --> 00:13:22,480
request with adoption

279
00:13:22,560 --> 00:13:26,000
the second draft here is also it was

280
00:13:25,440 --> 00:13:28,800
also

281
00:13:26,000 --> 00:13:30,079
notified that it's ready for adoption

282
00:13:28,800 --> 00:13:33,839
and

283
00:13:30,079 --> 00:13:36,800
we have initiated an mpls review

284
00:13:33,839 --> 00:13:39,760
from the team in the eta for that as

285
00:13:36,800 --> 00:13:42,399
december 7.

286
00:13:39,760 --> 00:13:43,839
the rest we have two drafts on the

287
00:13:42,399 --> 00:13:47,440
agenda

288
00:13:43,839 --> 00:13:47,440
and other ones the

289
00:13:47,519 --> 00:13:50,959
there's not much happening on them

290
00:13:53,839 --> 00:13:58,000
again uh the alive individual documents

291
00:13:56,959 --> 00:14:01,359
without update

292
00:13:58,000 --> 00:14:04,800
uh we have one which is on the agenda

293
00:14:01,360 --> 00:14:05,440
the rest of them are for now they are

294
00:14:04,800 --> 00:14:08,880
not

295
00:14:05,440 --> 00:14:12,639
actively being worked on uh

296
00:14:08,880 --> 00:14:16,000
carrick that is a truth with

297
00:14:12,639 --> 00:14:18,720
a couple of the things we need to

298
00:14:16,000 --> 00:14:19,440
say when we talked about it i forgot

299
00:14:18,720 --> 00:14:23,519
about it

300
00:14:19,440 --> 00:14:25,680
but all the sfl drafts are

301
00:14:23,519 --> 00:14:27,839
requested to be progressed by the

302
00:14:25,680 --> 00:14:28,959
authors to the next state so that means

303
00:14:27,839 --> 00:14:31,600
that you have

304
00:14:28,959 --> 00:14:33,119
documents that should be able to work in

305
00:14:31,600 --> 00:14:35,279
group class call

306
00:14:33,120 --> 00:14:37,279
and documents should do the working

307
00:14:35,279 --> 00:14:38,880
group adoption

308
00:14:37,279 --> 00:14:41,120
so we have it we have a mail from the

309
00:14:38,880 --> 00:14:43,839
author okay that's good

310
00:14:41,120 --> 00:14:45,360
thank you uh yeah we have one document

311
00:14:43,839 --> 00:14:48,720
uh

312
00:14:45,360 --> 00:14:50,880
here for sfl at least i see it yeah uh

313
00:14:48,720 --> 00:14:53,199
the other one is adopted in my

314
00:14:50,880 --> 00:14:55,519
understanding so

315
00:14:53,199 --> 00:14:57,120
that's the one that still needs to be

316
00:14:55,519 --> 00:15:02,240
conducted

317
00:14:57,120 --> 00:15:02,240
okay anything else you want to add

318
00:15:04,160 --> 00:15:07,040
are you taking kiwi

319
00:15:07,680 --> 00:15:16,079
we will i it has been a little bit

320
00:15:12,320 --> 00:15:17,839
uh well my heat has been too big

321
00:15:16,079 --> 00:15:20,800
i haven't really been able to dig down

322
00:15:17,839 --> 00:15:24,000
to it but uh we are almost there

323
00:15:20,800 --> 00:15:27,839
and i think i will check chatbot

324
00:15:24,000 --> 00:15:27,839
all the sfl documents

325
00:15:30,880 --> 00:15:34,000
okay i'll progress in the interest of

326
00:15:32,959 --> 00:15:37,279
time uh

327
00:15:34,000 --> 00:15:38,720
i do have 15 yes please

328
00:15:37,279 --> 00:15:40,399
i i don't know if you've noticed you

329
00:15:38,720 --> 00:15:41,600
have four people with their hands raised

330
00:15:40,399 --> 00:15:45,360
in the queue

331
00:15:41,600 --> 00:15:49,440
i honestly didn't notice because i can't

332
00:15:45,360 --> 00:15:49,440
but thank you for noting that down

333
00:15:49,519 --> 00:15:56,880
stewart do you still want to comment on

334
00:15:53,600 --> 00:15:58,480
i only to understand when the chairs are

335
00:15:56,880 --> 00:16:01,279
going to get around to doing any

336
00:15:58,480 --> 00:16:02,639
doing the last two sfl documents because

337
00:16:01,279 --> 00:16:04,880
they have been

338
00:16:02,639 --> 00:16:09,839
uh in this state pretty well since the

339
00:16:04,880 --> 00:16:09,839
last ietf

340
00:16:13,759 --> 00:16:18,800
no i think i think it's one or two weeks

341
00:16:16,480 --> 00:16:22,079
from now

342
00:16:18,800 --> 00:16:23,758
and we need to clean up a bit next week

343
00:16:22,079 --> 00:16:26,160
after the meeting and then we go on to

344
00:16:23,759 --> 00:16:26,160
do that

345
00:16:26,480 --> 00:16:32,959
they are next in line

346
00:16:29,519 --> 00:16:34,880
thank you all right

347
00:16:32,959 --> 00:16:37,839
anybody i i know that there's someone

348
00:16:34,880 --> 00:16:37,839
else in the queue

349
00:16:38,240 --> 00:16:40,560
go ahead

350
00:16:43,600 --> 00:16:48,399
i don't see anyone i think

351
00:16:48,480 --> 00:16:50,959
craig in

352
00:16:55,600 --> 00:16:59,120
yeah i had a couple of comments about

353
00:16:58,560 --> 00:17:02,800
alarm

354
00:16:59,120 --> 00:17:05,520
as well as the nff rr so

355
00:17:02,800 --> 00:17:07,839
we are working on larp in terms of

356
00:17:05,520 --> 00:17:10,160
filling in some of the

357
00:17:07,839 --> 00:17:11,359
things that we said we'd work on but we

358
00:17:10,160 --> 00:17:14,400
haven't yet

359
00:17:11,359 --> 00:17:16,559
which is um how do you do restart how do

360
00:17:14,400 --> 00:17:18,799
you make it more robust and a few other

361
00:17:16,559 --> 00:17:21,918
things like that

362
00:17:18,799 --> 00:17:25,119
and for the nff rr

363
00:17:21,919 --> 00:17:28,319
we had made a request for earlier

364
00:17:25,119 --> 00:17:30,320
allocation of a good point and

365
00:17:28,319 --> 00:17:32,799
i think the response was we should make

366
00:17:30,320 --> 00:17:35,840
it a working group document first

367
00:17:32,799 --> 00:17:37,760
we try to update the document to reflect

368
00:17:35,840 --> 00:17:39,360
some of the discussions that have been

369
00:17:37,760 --> 00:17:41,520
on the list

370
00:17:39,360 --> 00:17:43,760
the question is what else do we need to

371
00:17:41,520 --> 00:17:43,760
do

372
00:17:45,280 --> 00:17:49,360
uh that's a good question so there is a

373
00:17:47,919 --> 00:17:52,000
process that mpls

374
00:17:49,360 --> 00:17:53,678
uh working group does for adoption they

375
00:17:52,000 --> 00:17:56,559
we do ask for

376
00:17:53,679 --> 00:17:57,520
a review from uh two of the reviewer

377
00:17:56,559 --> 00:17:59,440
teams and

378
00:17:57,520 --> 00:18:00,960
and that usually takes another two weeks

379
00:17:59,440 --> 00:18:02,960
uh so

380
00:18:00,960 --> 00:18:05,200
based on now based on your request i

381
00:18:02,960 --> 00:18:06,400
expect hiliti that we will initiate that

382
00:18:05,200 --> 00:18:08,320
review and

383
00:18:06,400 --> 00:18:10,160
it will get into the process of being

384
00:18:08,320 --> 00:18:14,960
adopted

385
00:18:10,160 --> 00:18:14,960
okay thank you thank you

386
00:18:15,840 --> 00:18:23,439
how big is the nssr nssrr

387
00:18:20,240 --> 00:18:26,480
document how big

388
00:18:23,440 --> 00:18:29,600
in terms of pages

389
00:18:26,480 --> 00:18:32,880
pages it's um eight 10 pages

390
00:18:29,600 --> 00:18:34,639
okay how important is the earlier

391
00:18:32,880 --> 00:18:39,120
location

392
00:18:34,640 --> 00:18:40,960
all the implementations going on

393
00:18:39,120 --> 00:18:42,719
yes we do have a prototype

394
00:18:40,960 --> 00:18:45,760
implementation

395
00:18:42,720 --> 00:18:48,799
um and um you know it's

396
00:18:45,760 --> 00:18:51,360
it involves doing stuff in microcode so

397
00:18:48,799 --> 00:18:53,039
you know it's not something that if we

398
00:18:51,360 --> 00:18:54,840
went into production we'd like to know

399
00:18:53,039 --> 00:18:56,400
that that's the one that we're going to

400
00:18:54,840 --> 00:18:59,840
use

401
00:18:56,400 --> 00:19:01,440
so it's

402
00:18:59,840 --> 00:19:03,760
yeah i mean there's a prototype

403
00:19:01,440 --> 00:19:04,400
implementation beyond that we'd like to

404
00:19:03,760 --> 00:19:07,120
make it

405
00:19:04,400 --> 00:19:08,640
real because especially in the evpn use

406
00:19:07,120 --> 00:19:12,239
case

407
00:19:08,640 --> 00:19:14,960
there are um issues when the ce dies

408
00:19:12,240 --> 00:19:14,960
you get a loop

409
00:19:15,360 --> 00:19:18,879
okay i will look at the document and see

410
00:19:17,600 --> 00:19:21,918
what they can do

411
00:19:18,880 --> 00:19:26,480
maybe we can expedite

412
00:19:21,919 --> 00:19:28,720
the working group adoption which

413
00:19:26,480 --> 00:19:31,280
means that the working group chairs read

414
00:19:28,720 --> 00:19:34,080
and say that it's okay

415
00:19:31,280 --> 00:19:34,080
yeah okay

416
00:19:34,400 --> 00:19:42,320
i mean not doing an amphilisarcy review

417
00:19:37,520 --> 00:19:42,320
in that case so okay

418
00:19:46,880 --> 00:19:50,559
all right okay i'll come back to you on

419
00:19:49,760 --> 00:19:54,640
lr

420
00:19:50,559 --> 00:19:58,080
with an update thank you kiriti

421
00:19:54,640 --> 00:20:01,200
uh anyone else in the queue without nick

422
00:19:58,080 --> 00:20:02,559
yeah next is rather okay should i go

423
00:20:01,200 --> 00:20:04,960
ahead

424
00:20:02,559 --> 00:20:07,039
uh yeah hello so i wanted to just give

425
00:20:04,960 --> 00:20:11,919
an update on draft in

426
00:20:07,039 --> 00:20:15,840
mpl domain a.m i just did an update

427
00:20:11,919 --> 00:20:17,440
at night so we uh the four points that

428
00:20:15,840 --> 00:20:21,039
uh

429
00:20:17,440 --> 00:20:21,039
the registry that we were using

430
00:20:30,720 --> 00:20:34,480
it's better to have a separate registry

431
00:20:32,720 --> 00:20:37,120
created for subtleties and

432
00:20:34,480 --> 00:20:38,480
and i've done that update and posted uh

433
00:20:37,120 --> 00:20:41,600
the latest version

434
00:20:38,480 --> 00:20:44,880
uh and i think that

435
00:20:41,600 --> 00:20:46,158
you know it's it's ready for an adoption

436
00:20:44,880 --> 00:20:48,640
call

437
00:20:46,159 --> 00:20:50,720
chairs can look into it and take a

438
00:20:48,640 --> 00:20:54,320
decision

439
00:20:50,720 --> 00:20:56,480
okay another another update on

440
00:20:54,320 --> 00:20:58,320
another draft which is a working group

441
00:20:56,480 --> 00:21:01,520
draft

442
00:20:58,320 --> 00:21:05,360
draft ietf mpls

443
00:21:01,520 --> 00:21:08,960
ep oem so uh this was adopted uh

444
00:21:05,360 --> 00:21:10,879
uh wait wait last time and hello

445
00:21:08,960 --> 00:21:12,400
i think we have that later on again

446
00:21:10,880 --> 00:21:14,080
though don't we

447
00:21:12,400 --> 00:21:16,240
yeah we have we don't have it on the

448
00:21:14,080 --> 00:21:19,199
agenda we have a progress

449
00:21:16,240 --> 00:21:19,840
update on uh on working group documents

450
00:21:19,200 --> 00:21:23,120
uh

451
00:21:19,840 --> 00:21:26,480
still i haven't uh so

452
00:21:23,120 --> 00:21:30,000
hold your thought until then thank you

453
00:21:26,480 --> 00:21:33,280
thank you anyone else in the queue

454
00:21:30,000 --> 00:21:33,280
yeah last one is greg

455
00:21:33,360 --> 00:21:36,000
great go ahead

456
00:21:37,039 --> 00:21:44,158
i'm not confused but

457
00:21:40,480 --> 00:21:46,559
uh what i see in a data tracker on

458
00:21:44,159 --> 00:21:47,919
mpls point-to-point uh to point to

459
00:21:46,559 --> 00:21:51,840
multi-point pfd

460
00:21:47,919 --> 00:21:54,960
is that it's marked as a candidate for

461
00:21:51,840 --> 00:21:54,959
working group adoption

462
00:21:57,440 --> 00:22:00,400
so um

463
00:22:01,280 --> 00:22:08,080
okay we'll have to see how the uh

464
00:22:05,120 --> 00:22:09,120
um co-chairs are you aware of uh you

465
00:22:08,080 --> 00:22:12,639
know

466
00:22:09,120 --> 00:22:14,479
which document is it uh the

467
00:22:12,640 --> 00:22:16,080
the one that i will be presenting later

468
00:22:14,480 --> 00:22:20,159
today okay

469
00:22:16,080 --> 00:22:24,960
so greg

470
00:22:20,159 --> 00:22:28,720
and everyone else there is

471
00:22:24,960 --> 00:22:29,200
just one point one way of actually

472
00:22:28,720 --> 00:22:32,880
getting

473
00:22:29,200 --> 00:22:36,480
a document into uh

474
00:22:32,880 --> 00:22:38,960
the working group and it is making it

475
00:22:36,480 --> 00:22:40,159
a document for candidates who work in

476
00:22:38,960 --> 00:22:42,799
group adoption

477
00:22:40,159 --> 00:22:44,960
so when we start doing things like

478
00:22:42,799 --> 00:22:48,080
reviews and talking to the

479
00:22:44,960 --> 00:22:51,360
authors and suggesting things

480
00:22:48,080 --> 00:22:54,480
we need to put it in

481
00:22:51,360 --> 00:22:57,039
in the candidate status that's what

482
00:22:54,480 --> 00:22:58,240
that's what i see currently in a data

483
00:22:57,039 --> 00:22:59,600
tracker

484
00:22:58,240 --> 00:23:01,840
yeah and did it for working group

485
00:22:59,600 --> 00:23:05,039
adoption yes

486
00:23:01,840 --> 00:23:08,320
you should see that okay good

487
00:23:05,039 --> 00:23:11,120
okay the next thing is actually

488
00:23:08,320 --> 00:23:12,639
we will start the adoption poll that's

489
00:23:11,120 --> 00:23:16,399
when the state has changed

490
00:23:12,640 --> 00:23:19,600
so when when we say if this document

491
00:23:16,400 --> 00:23:23,039
is for any working group within

492
00:23:19,600 --> 00:23:24,559
itf it is for mpls then we market this

493
00:23:23,039 --> 00:23:26,400
candidate

494
00:23:24,559 --> 00:23:28,720
and that means that he can work with it

495
00:23:26,400 --> 00:23:33,280
otherwise we can't do anything

496
00:23:28,720 --> 00:23:33,280
great okay thank you

497
00:23:33,520 --> 00:23:37,679
okay so that's it from the queue okay

498
00:23:36,159 --> 00:23:40,320
thank you

499
00:23:37,679 --> 00:23:43,440
i'll move on to the progress reports so

500
00:23:40,320 --> 00:23:46,559
these are working group documents that

501
00:23:43,440 --> 00:23:50,159
are active the first one is spl

502
00:23:46,559 --> 00:23:53,200
terminology the current revision is four

503
00:23:50,159 --> 00:23:56,320
uh the working group last call is issued

504
00:23:53,200 --> 00:23:59,360
for this um eta is

505
00:23:56,320 --> 00:23:59,360
uh two weeks from now

506
00:23:59,679 --> 00:24:06,880
the second one is mpl static king and uh

507
00:24:04,240 --> 00:24:08,480
it has the next steps of addressing any

508
00:24:06,880 --> 00:24:10,080
outstanding comments from the young

509
00:24:08,480 --> 00:24:12,799
doctors review

510
00:24:10,080 --> 00:24:13,678
and adding a json instance of the data

511
00:24:12,799 --> 00:24:15,279
model

512
00:24:13,679 --> 00:24:18,000
and then we'll proceed to working group

513
00:24:15,279 --> 00:24:20,640
class call

514
00:24:18,000 --> 00:24:22,080
the third one is mldp yang the current

515
00:24:20,640 --> 00:24:25,360
the revision is seven

516
00:24:22,080 --> 00:24:25,678
uh it is in young doctors review uh but

517
00:24:25,360 --> 00:24:29,039
i

518
00:24:25,679 --> 00:24:29,360
heard from uh the authors that there are

519
00:24:29,039 --> 00:24:32,080
no

520
00:24:29,360 --> 00:24:32,959
outstanding issues at least from the

521
00:24:32,080 --> 00:24:36,240
review of

522
00:24:32,960 --> 00:24:36,880
young doctors that was done and they're

523
00:24:36,240 --> 00:24:38,320
ready for

524
00:24:36,880 --> 00:24:40,320
progressing at the working group last

525
00:24:38,320 --> 00:24:43,439
call so this is also

526
00:24:40,320 --> 00:24:47,520
uh in the queue for being a

527
00:24:43,440 --> 00:24:49,600
working group class called

528
00:24:47,520 --> 00:24:52,799
i'll move on to the next slide unless

529
00:24:49,600 --> 00:24:52,799
there are someone in the queue

530
00:24:54,960 --> 00:25:00,080
the mpls vfd directed

531
00:24:58,000 --> 00:25:02,000
its current revision is 14 we already

532
00:25:00,080 --> 00:25:04,158
mentioned that uh

533
00:25:02,000 --> 00:25:05,679
the chairs are coordinating and meeting

534
00:25:04,159 --> 00:25:07,600
with uh

535
00:25:05,679 --> 00:25:10,240
between offers and their viewers to

536
00:25:07,600 --> 00:25:15,039
converge on on this one

537
00:25:10,240 --> 00:25:17,840
the rmr we already talked about uh

538
00:25:15,039 --> 00:25:18,799
a decision that the chairs have to make

539
00:25:17,840 --> 00:25:22,080
about

540
00:25:18,799 --> 00:25:24,320
about this the status of this document

541
00:25:22,080 --> 00:25:26,080
and the last the next one is is

542
00:25:24,320 --> 00:25:29,120
dependent on

543
00:25:26,080 --> 00:25:30,960
on the base nmr and uh it's going to be

544
00:25:29,120 --> 00:25:33,918
affected by the decision that

545
00:25:30,960 --> 00:25:33,919
we will make on that

546
00:25:34,159 --> 00:25:39,840
uh i presume no one is in the queue

547
00:25:36,480 --> 00:25:39,840
because i wasn't interrupted

548
00:25:39,919 --> 00:25:48,080
i have one small comment

549
00:25:43,039 --> 00:25:52,640
um so we also have an rmr

550
00:25:48,080 --> 00:25:56,080
a teeth document and it's also dependent

551
00:25:52,640 --> 00:26:00,320
on the base base document

552
00:25:56,080 --> 00:26:02,158
so we need to coordinate with

553
00:26:00,320 --> 00:26:05,360
the these working group shares they need

554
00:26:02,159 --> 00:26:05,360
to follow what we're doing

555
00:26:05,520 --> 00:26:13,918
yeah good point i agree

556
00:26:11,600 --> 00:26:13,918
okay

557
00:26:14,720 --> 00:26:22,000
uh the ospf v3 code points uh

558
00:26:19,520 --> 00:26:23,200
this one we already mentioned lightly

559
00:26:22,000 --> 00:26:24,960
that

560
00:26:23,200 --> 00:26:26,240
it is expired and we're asking the

561
00:26:24,960 --> 00:26:28,960
authors to refresh

562
00:26:26,240 --> 00:26:30,960
and the early allocation of the code

563
00:26:28,960 --> 00:26:34,520
points will only progress

564
00:26:30,960 --> 00:26:38,559
on an active document uh the

565
00:26:34,520 --> 00:26:40,559
mplsrsr epuam

566
00:26:38,559 --> 00:26:42,320
it was recently adopted by the working

567
00:26:40,559 --> 00:26:45,600
group and

568
00:26:42,320 --> 00:26:49,010
the working group is invited

569
00:26:45,600 --> 00:26:51,279
to to give comments and review

570
00:26:49,010 --> 00:26:54,400
[Music]

571
00:26:51,279 --> 00:26:58,240
uh i have one one quick questions

572
00:26:54,400 --> 00:27:02,559
do we have any author of the

573
00:26:58,240 --> 00:27:07,840
mpls lsb ping ospf v3 code point

574
00:27:02,559 --> 00:27:07,840
uh in the meeting

575
00:27:14,960 --> 00:27:21,120
can you hear me yes yes

576
00:27:18,080 --> 00:27:23,279
yeah there's nagandra so

577
00:27:21,120 --> 00:27:25,840
i'm working on updating this i uh

578
00:27:23,279 --> 00:27:28,159
circulated the updated one just to get a

579
00:27:25,840 --> 00:27:30,158
confirmation from the co-authors uh by

580
00:27:28,159 --> 00:27:35,840
today or tomorrow we'll be updating um

581
00:27:30,159 --> 00:27:35,840
the new version ah okay thanks

582
00:27:36,159 --> 00:27:41,279
okay i think this is the last slide i

583
00:27:40,159 --> 00:27:46,000
have here

584
00:27:41,279 --> 00:27:48,799
um the lsp ping registries update

585
00:27:46,000 --> 00:27:51,279
uh it is in working group last call

586
00:27:48,799 --> 00:27:53,679
there are some outstanding comments

587
00:27:51,279 --> 00:27:55,840
uh we are requesting the working group

588
00:27:53,679 --> 00:28:00,080
to review this document

589
00:27:55,840 --> 00:28:03,199
and provide um feedback

590
00:28:00,080 --> 00:28:06,080
so this is an open invitation

591
00:28:03,200 --> 00:28:06,960
to give feedback on this document the

592
00:28:06,080 --> 00:28:10,879
last one

593
00:28:06,960 --> 00:28:14,000
is an sfl document uh i heard stewart

594
00:28:10,880 --> 00:28:15,039
raise concerns it is ready for working

595
00:28:14,000 --> 00:28:18,080
group last call

596
00:28:15,039 --> 00:28:21,440
and uh it shares need to trigger the

597
00:28:18,080 --> 00:28:24,480
the wglc the working group class called

598
00:28:21,440 --> 00:28:28,799
and uh uh yeah um we have to do that

599
00:28:24,480 --> 00:28:31,120
right after a meeting this session yeah

600
00:28:28,799 --> 00:28:31,840
with this i conclude my progress report

601
00:28:31,120 --> 00:28:35,678
um

602
00:28:31,840 --> 00:28:37,678
before i start okay i have a question

603
00:28:35,679 --> 00:28:43,120
for stewart

604
00:28:37,679 --> 00:28:45,440
uh are there any dependents

605
00:28:43,120 --> 00:28:46,320
no that the courser is not dependent i i

606
00:28:45,440 --> 00:28:50,440
mean

607
00:28:46,320 --> 00:28:54,000
should i take the uh rfc

608
00:28:50,440 --> 00:28:57,760
6374 sfl first or should i

609
00:28:54,000 --> 00:29:01,120
try to adopt the individual draft first

610
00:28:57,760 --> 00:29:04,440
or you cannot do it do it in any order

611
00:29:01,120 --> 00:29:07,918
uh there is a reference as i recall from

612
00:29:04,440 --> 00:29:10,240
6374 to the control draft

613
00:29:07,919 --> 00:29:12,240
i can't remember whether i left it in or

614
00:29:10,240 --> 00:29:14,799
not but i believe there's a reference

615
00:29:12,240 --> 00:29:16,399
so you probably should take the the two

616
00:29:14,799 --> 00:29:18,240
i mean they're both as

617
00:29:16,399 --> 00:29:21,279
far along as they're going to be until

618
00:29:18,240 --> 00:29:24,559
the working group gives me input

619
00:29:21,279 --> 00:29:26,799
okay the point is that it takes a little

620
00:29:24,559 --> 00:29:29,039
bit longer to get the adoption poll

621
00:29:26,799 --> 00:29:30,158
than it takes to get to what your class

622
00:29:29,039 --> 00:29:33,120
called

623
00:29:30,159 --> 00:29:34,559
can i without any serious problems start

624
00:29:33,120 --> 00:29:38,239
to work in group household

625
00:29:34,559 --> 00:29:40,240
uh now yes there is no reason not to do

626
00:29:38,240 --> 00:29:43,440
the working group last call now

627
00:29:40,240 --> 00:29:43,440
okay good thanks

628
00:29:44,880 --> 00:29:48,320
okay anyone else in the queue

629
00:29:50,240 --> 00:29:58,960
nope okay the next on our agenda is uh

630
00:29:55,679 --> 00:30:01,440
is rakesh i believe and uh

631
00:29:58,960 --> 00:30:03,360
it's about mpls data plane encapsulation

632
00:30:01,440 --> 00:30:07,840
4 and c2am

633
00:30:03,360 --> 00:30:07,840
um rakesh are you there

634
00:30:09,860 --> 00:30:12,949
[Music]

635
00:30:19,520 --> 00:30:23,520
hi everyone my name is rakesh gandhi and

636
00:30:22,000 --> 00:30:26,559
i'm presenting

637
00:30:23,520 --> 00:30:28,559
the mpls data plane encapsulation draft

638
00:30:26,559 --> 00:30:31,918
for iom

639
00:30:28,559 --> 00:30:37,039
on behalf of the authors listed and next

640
00:30:31,919 --> 00:30:39,039
slide please so agenda is

641
00:30:37,039 --> 00:30:41,679
we'll take a look at the requirements

642
00:30:39,039 --> 00:30:45,039
and scope the history and updates since

643
00:30:41,679 --> 00:30:46,799
uh the last itf and the summary as well

644
00:30:45,039 --> 00:30:51,279
as next steps

645
00:30:46,799 --> 00:30:53,600
next slide please

646
00:30:51,279 --> 00:30:55,600
so the requirement is to transport the

647
00:30:53,600 --> 00:30:59,360
iom data fields with

648
00:30:55,600 --> 00:31:02,000
mpls encapsulation and iom

649
00:30:59,360 --> 00:31:03,120
has oem information like timestamps and

650
00:31:02,000 --> 00:31:05,679
and

651
00:31:03,120 --> 00:31:06,158
many other fields that's uh defined in

652
00:31:05,679 --> 00:31:09,039
the

653
00:31:06,159 --> 00:31:10,240
ippm working group there are three

654
00:31:09,039 --> 00:31:13,679
drafts uh

655
00:31:10,240 --> 00:31:16,720
that listed here being worked on

656
00:31:13,679 --> 00:31:20,640
uh so this is the the scope and

657
00:31:16,720 --> 00:31:25,200
edge to edge as well as a hub by hop iom

658
00:31:20,640 --> 00:31:25,200
is in the scope and next slide please

659
00:31:27,360 --> 00:31:31,279
so the draft has been around for a

660
00:31:29,360 --> 00:31:35,279
couple of years

661
00:31:31,279 --> 00:31:38,320
it was in spring and was transferred to

662
00:31:35,279 --> 00:31:40,799
mpls working group about a year ago

663
00:31:38,320 --> 00:31:41,678
this was presented at the last itf and

664
00:31:40,799 --> 00:31:44,320
um

665
00:31:41,679 --> 00:31:44,840
we'll focus on the delta since uh the

666
00:31:44,320 --> 00:31:49,360
last

667
00:31:44,840 --> 00:31:49,360
meeting next slide please

668
00:31:50,399 --> 00:31:56,559
so there are a few changes updates made

669
00:31:53,519 --> 00:31:59,279
based on the review comments received um

670
00:31:56,559 --> 00:31:59,678
since last itf this protocol type field

671
00:31:59,279 --> 00:32:02,720
is

672
00:31:59,679 --> 00:32:02,720
0 0 1 0

673
00:32:02,880 --> 00:32:07,120
there is a text that explains why

674
00:32:06,480 --> 00:32:09,679
different

675
00:32:07,120 --> 00:32:11,600
labels used for the hop by hop and hyh

676
00:32:09,679 --> 00:32:13,360
basically to optimize the processing on

677
00:32:11,600 --> 00:32:15,120
transit nodes

678
00:32:13,360 --> 00:32:17,439
there is tax added for the msd

679
00:32:15,120 --> 00:32:21,678
consideration

680
00:32:17,440 --> 00:32:24,880
the diagrams or the the headers is

681
00:32:21,679 --> 00:32:26,640
updated to show the extension label and

682
00:32:24,880 --> 00:32:30,080
few editorial changes

683
00:32:26,640 --> 00:32:32,880
there is no open items at this point

684
00:32:30,080 --> 00:32:32,879
next slide please

685
00:32:35,039 --> 00:32:41,600
so just to recap the the the mpls header

686
00:32:39,679 --> 00:32:43,440
it contains the extension label as well

687
00:32:41,600 --> 00:32:46,480
as the indicator label that says that

688
00:32:43,440 --> 00:32:49,440
there is iom data

689
00:32:46,480 --> 00:32:51,760
populated underneath and next slide

690
00:32:49,440 --> 00:32:51,760
please

691
00:32:53,840 --> 00:32:57,120
and similarly there is a variant of it

692
00:32:55,679 --> 00:33:00,880
that includes the

693
00:32:57,120 --> 00:33:04,000
this iom flow indicator label

694
00:33:00,880 --> 00:33:06,159
um as well as the protocol type and the

695
00:33:04,000 --> 00:33:10,480
flow label and block number

696
00:33:06,159 --> 00:33:13,760
and next slide please

697
00:33:10,480 --> 00:33:15,120
so uh we we are uh requesting uh for hoh

698
00:33:13,760 --> 00:33:18,158
case uh

699
00:33:15,120 --> 00:33:19,518
uh two uh uh special extended special

700
00:33:18,159 --> 00:33:22,960
purpose labels uh

701
00:33:19,519 --> 00:33:25,519
for it uh for the indicator labels

702
00:33:22,960 --> 00:33:27,600
um in a variant it could be allocated by

703
00:33:25,519 --> 00:33:30,640
controller or

704
00:33:27,600 --> 00:33:34,158
signal but prefer

705
00:33:30,640 --> 00:33:39,120
the ii location values um

706
00:33:34,159 --> 00:33:41,279
as well next slide please

707
00:33:39,120 --> 00:33:43,518
and the same case for the hub by hop so

708
00:33:41,279 --> 00:33:46,640
there are two labels um

709
00:33:43,519 --> 00:33:52,159
uh requested for mine as well

710
00:33:46,640 --> 00:33:54,640
and next slide please

711
00:33:52,159 --> 00:33:56,799
so uh we welcome your comments and

712
00:33:54,640 --> 00:33:58,399
suggestions uh many thanks to all the

713
00:33:56,799 --> 00:34:00,480
review comments um

714
00:33:58,399 --> 00:34:02,158
that we have received uh we are

715
00:34:00,480 --> 00:34:05,600
requesting a working group

716
00:34:02,159 --> 00:34:07,519
adoption for this draft um since the the

717
00:34:05,600 --> 00:34:08,239
base work is done in ipv and working

718
00:34:07,519 --> 00:34:11,199
group

719
00:34:08,239 --> 00:34:13,598
uh we plan to keep them in the loop out

720
00:34:11,199 --> 00:34:21,839
progress for this work

721
00:34:13,599 --> 00:34:21,839
so that's all i had there thanks

722
00:34:24,079 --> 00:34:28,720
in the queue greg you want to go ahead

723
00:34:30,879 --> 00:34:35,839
presentation um can you um

724
00:34:36,239 --> 00:34:43,040
again explain their interpretation of

725
00:34:40,239 --> 00:34:43,040
uh two

726
00:34:43,679 --> 00:34:50,800
extended special uh purpose labels

727
00:34:48,480 --> 00:34:50,800
um

728
00:34:53,440 --> 00:34:56,800
maybe i missed a question could you

729
00:34:55,040 --> 00:35:00,160
please repeat greg yes

730
00:34:56,800 --> 00:35:05,280
um so what's the interpretation why are

731
00:35:00,160 --> 00:35:08,480
two uh special labels being requested

732
00:35:05,280 --> 00:35:08,480
for each use case

733
00:35:09,760 --> 00:35:13,680
so uh these are indicator label right so

734
00:35:12,560 --> 00:35:15,680
the indic when the

735
00:35:13,680 --> 00:35:17,200
the header process is just like you know

736
00:35:15,680 --> 00:35:20,399
entropy label in the

737
00:35:17,200 --> 00:35:23,520
uh label indicator label

738
00:35:20,400 --> 00:35:25,440
that ali else kind of thing so

739
00:35:23,520 --> 00:35:28,000
it when you're processing it tells you

740
00:35:25,440 --> 00:35:30,720
that there is an iom data field

741
00:35:28,000 --> 00:35:33,040
and then it can be used to trigger the

742
00:35:30,720 --> 00:35:36,000
iom processing um

743
00:35:33,040 --> 00:35:36,000
so you activate it

744
00:35:36,800 --> 00:35:41,119
right but for uh entropy label

745
00:35:39,440 --> 00:35:45,839
indication we're using just

746
00:35:41,119 --> 00:35:45,839
one entropy a special purpose label

747
00:35:46,880 --> 00:35:59,839
yeah so if you go to the figure um

748
00:35:51,280 --> 00:35:59,839
if you go back on slide

749
00:36:01,280 --> 00:36:08,400
number seven please

750
00:36:04,720 --> 00:36:11,240
yeah yeah so um

751
00:36:08,400 --> 00:36:14,240
if you don't have this protocol type

752
00:36:11,240 --> 00:36:14,240
0010

753
00:36:14,480 --> 00:36:22,079
if a transit node does ecmp

754
00:36:18,240 --> 00:36:25,040
hashing using the ip header

755
00:36:22,079 --> 00:36:26,320
it could if if the value happens to be

756
00:36:25,040 --> 00:36:30,040
zero zero

757
00:36:26,320 --> 00:36:33,280
um uh the the for ipv4 or

758
00:36:30,040 --> 00:36:35,200
ipv6 case it might think that there is

759
00:36:33,280 --> 00:36:38,560
ip address there and it could do

760
00:36:35,200 --> 00:36:42,319
uh incorrect hashing so this is uh

761
00:36:38,560 --> 00:36:45,520
to fix that

762
00:36:42,320 --> 00:36:47,119
hashing issue it's not mandatory but if

763
00:36:45,520 --> 00:36:49,839
there is a customer

764
00:36:47,119 --> 00:36:51,359
who has ipv based hashing and need this

765
00:36:49,839 --> 00:36:53,759
then

766
00:36:51,359 --> 00:36:55,839
we recommend to use this indicator label

767
00:36:53,760 --> 00:36:58,960
with zero zero one zero so that the

768
00:36:55,839 --> 00:36:58,960
hashing is not broken

769
00:36:59,920 --> 00:37:06,240
okay but again here on the figure so

770
00:37:03,200 --> 00:37:09,598
uh you have extension label and then uh

771
00:37:06,240 --> 00:37:11,520
the special purpose label or extended

772
00:37:09,599 --> 00:37:12,560
special purpose labels so total labels

773
00:37:11,520 --> 00:37:15,759
are a special

774
00:37:12,560 --> 00:37:17,680
extended special purpose label but i

775
00:37:15,760 --> 00:37:19,200
if i understand correctly so you

776
00:37:17,680 --> 00:37:22,240
mentioned that you

777
00:37:19,200 --> 00:37:26,000
request allocation of two

778
00:37:22,240 --> 00:37:26,000
extended special purpose labels

779
00:37:26,240 --> 00:37:32,640
so yeah so we'll see where the second

780
00:37:29,440 --> 00:37:34,960
uh the other one uh would be used

781
00:37:32,640 --> 00:37:37,839
so if you go to the slide number six

782
00:37:34,960 --> 00:37:37,839
previous slide

783
00:37:39,680 --> 00:37:44,560
so this is a indicator label so this is

784
00:37:42,079 --> 00:37:46,560
without the protocol type field

785
00:37:44,560 --> 00:37:48,078
um and the next one was with the

786
00:37:46,560 --> 00:37:51,200
protocol type field and the

787
00:37:48,079 --> 00:37:52,960
label so there is a variant to it so uh

788
00:37:51,200 --> 00:37:54,240
there are two different formats uh

789
00:37:52,960 --> 00:37:58,320
that's why there are two

790
00:37:54,240 --> 00:38:01,598
i i i yeah i wonder if we can reduce it

791
00:37:58,320 --> 00:38:05,280
just to one use case just to

792
00:38:01,599 --> 00:38:07,680
make it more make it simpler

793
00:38:05,280 --> 00:38:09,760
yeah i'm fine with it but we added the

794
00:38:07,680 --> 00:38:11,759
second use case based on the review

795
00:38:09,760 --> 00:38:14,640
comments and the

796
00:38:11,760 --> 00:38:16,240
working group had um raised this issue

797
00:38:14,640 --> 00:38:19,359
um

798
00:38:16,240 --> 00:38:22,720
that's why it's there well

799
00:38:19,359 --> 00:38:25,359
i think that if we want to have a

800
00:38:22,720 --> 00:38:26,319
general backward compatible case then

801
00:38:25,359 --> 00:38:29,520
use their

802
00:38:26,320 --> 00:38:32,560
case on slide seven

803
00:38:29,520 --> 00:38:35,200
and we have one

804
00:38:32,560 --> 00:38:37,920
extended special purpose label wouldn't

805
00:38:35,200 --> 00:38:37,919
it make sense

806
00:38:38,000 --> 00:38:42,000
yeah if uh if working group is okay with

807
00:38:40,240 --> 00:38:44,640
that uh yeah

808
00:38:42,000 --> 00:38:45,680
i mean no issue from that point of view

809
00:38:44,640 --> 00:38:48,720
it's just uh you

810
00:38:45,680 --> 00:38:49,040
adding one more um label in the stack

811
00:38:48,720 --> 00:38:51,439
and

812
00:38:49,040 --> 00:38:52,800
there is msd consideration and all that

813
00:38:51,440 --> 00:38:56,400
stuff right so

814
00:38:52,800 --> 00:38:57,440
um it is fine if working group says we

815
00:38:56,400 --> 00:38:59,920
are okay with

816
00:38:57,440 --> 00:39:02,480
the slide number seven uh indicator

817
00:38:59,920 --> 00:39:05,839
label uh that's fine as well

818
00:39:02,480 --> 00:39:09,359
yeah okay i i think that's something to

819
00:39:05,839 --> 00:39:10,480
discuss uh you know because just make it

820
00:39:09,359 --> 00:39:13,520
simpler less

821
00:39:10,480 --> 00:39:15,680
options always good okay thank you

822
00:39:13,520 --> 00:39:18,160
yeah thank you and uh yeah we can uh

823
00:39:15,680 --> 00:39:20,160
have uh email uh discussion and uh

824
00:39:18,160 --> 00:39:21,520
this working group has consensus to just

825
00:39:20,160 --> 00:39:24,799
go with that uh

826
00:39:21,520 --> 00:39:27,359
no issues okay anyone else in the queue

827
00:39:24,800 --> 00:39:29,280
uh i don't think so yeah i think that

828
00:39:27,359 --> 00:39:31,520
since this is individual draft it's

829
00:39:29,280 --> 00:39:33,040
uh for offers to decide where they want

830
00:39:31,520 --> 00:39:35,359
to go

831
00:39:33,040 --> 00:39:35,359
all right

832
00:39:36,560 --> 00:39:40,839
okay thank you rakesh uh i'll move on to

833
00:39:39,359 --> 00:39:43,598
the next uh

834
00:39:40,839 --> 00:39:47,839
plot uh

835
00:39:43,599 --> 00:39:57,839
we have lsp ping for sr path sids

836
00:39:47,839 --> 00:39:57,839
xiao you're presenting europe

837
00:40:00,480 --> 00:40:10,880
uh xiao you're able

838
00:40:03,520 --> 00:40:13,440
and can you try your audio

839
00:40:10,880 --> 00:40:13,440
i shall

840
00:40:22,640 --> 00:40:29,279
can you still hear me

841
00:40:25,680 --> 00:40:32,879
i do yes okay it went uh

842
00:40:29,280 --> 00:40:34,319
that silent um i think xiao was having

843
00:40:32,880 --> 00:40:38,960
some technical issues

844
00:40:34,319 --> 00:40:38,960
yeah and now he's gone

845
00:40:43,680 --> 00:40:47,598
okay good thank you all right i'll flip

846
00:40:46,160 --> 00:40:50,640
to

847
00:40:47,599 --> 00:40:53,680
your slides and please go ahead

848
00:40:50,640 --> 00:40:56,720
okay uh hello everyone uh it's xiaomi

849
00:40:53,680 --> 00:41:00,078
speaking here this presentation is on

850
00:40:56,720 --> 00:41:04,839
lsp ping for sr pass seat

851
00:41:00,079 --> 00:41:07,839
this is a 0-0 version draft next slide

852
00:41:04,839 --> 00:41:07,839
please

853
00:41:09,280 --> 00:41:11,520
uh

854
00:41:13,040 --> 00:41:16,800
okay this job is straightforward it

855
00:41:16,079 --> 00:41:20,240
provides

856
00:41:16,800 --> 00:41:23,920
a target effect stack tv definitions for

857
00:41:20,240 --> 00:41:27,279
past segment id specifically

858
00:41:23,920 --> 00:41:27,920
two new sub tvs are defined they are

859
00:41:27,280 --> 00:41:31,359
called

860
00:41:27,920 --> 00:41:34,880
sr candidate pass pass sid sub tuv

861
00:41:31,359 --> 00:41:38,799
and sr segment list past srdc

862
00:41:34,880 --> 00:41:43,280
sub-qv at the same time this chart

863
00:41:38,800 --> 00:41:47,599
augments the spp for sr procedures

864
00:41:43,280 --> 00:41:51,200
defined in rfc 8287

865
00:41:47,599 --> 00:41:55,520
to make the procedures complete

866
00:41:51,200 --> 00:41:58,399
when the pinned object is past it

867
00:41:55,520 --> 00:41:58,400
next slide please

868
00:42:01,440 --> 00:42:06,640
this slide illustrates the principle of

869
00:42:04,960 --> 00:42:10,319
past segment

870
00:42:06,640 --> 00:42:13,759
with ampere's data plane path segment

871
00:42:10,319 --> 00:42:16,800
is a type of sr segment

872
00:42:13,760 --> 00:42:18,400
path segment with mps data plane is

873
00:42:16,800 --> 00:42:21,520
defined

874
00:42:18,400 --> 00:42:22,800
in spring group for spring working group

875
00:42:21,520 --> 00:42:26,160
draft

876
00:42:22,800 --> 00:42:26,720
spring mpls pass segment the path

877
00:42:26,160 --> 00:42:29,440
segment

878
00:42:26,720 --> 00:42:30,000
label would immediately follow the

879
00:42:29,440 --> 00:42:33,440
forwarding

880
00:42:30,000 --> 00:42:36,800
labels and it's normally

881
00:42:33,440 --> 00:42:39,680
used by the egress nodes for past

882
00:42:36,800 --> 00:42:39,680
identification

883
00:42:39,839 --> 00:42:49,279
next slide please

884
00:42:45,440 --> 00:42:52,400
uh about past segment allocation

885
00:42:49,280 --> 00:42:54,960
as described in the

886
00:42:52,400 --> 00:42:56,480
working group dropped spring mpis path

887
00:42:54,960 --> 00:42:59,680
segment

888
00:42:56,480 --> 00:43:00,880
there are several ways for allocating

889
00:42:59,680 --> 00:43:04,078
the path segment

890
00:43:00,880 --> 00:43:06,560
to the ingress node

891
00:43:04,079 --> 00:43:07,839
the first way uh path segment is

892
00:43:06,560 --> 00:43:11,040
allocated by the

893
00:43:07,839 --> 00:43:11,759
egress node through a communication

894
00:43:11,040 --> 00:43:14,240
channel

895
00:43:11,760 --> 00:43:16,400
between the egress node and the ingress

896
00:43:14,240 --> 00:43:19,200
node

897
00:43:16,400 --> 00:43:22,319
currently the details of this way are

898
00:43:19,200 --> 00:43:22,319
for further study

899
00:43:22,480 --> 00:43:29,119
in other words tier now there is no uh

900
00:43:25,839 --> 00:43:30,000
proposed protocol for allocating pass

901
00:43:29,119 --> 00:43:34,640
segment

902
00:43:30,000 --> 00:43:34,640
to the ingress node by the egress node

903
00:43:34,880 --> 00:43:39,520
the second way a path segment can be

904
00:43:37,760 --> 00:43:42,560
allocated

905
00:43:39,520 --> 00:43:46,400
by the centralized the controller

906
00:43:42,560 --> 00:43:50,000
using psep there are already working

907
00:43:46,400 --> 00:43:50,000
group jobs on this way

908
00:43:50,319 --> 00:43:53,440
the third way a path segment can be

909
00:43:52,400 --> 00:43:56,640
allocated by

910
00:43:53,440 --> 00:44:00,640
a centralized controller using

911
00:43:56,640 --> 00:44:03,759
bgpsr policy there are also

912
00:44:00,640 --> 00:44:06,640
working group charts on this way

913
00:44:03,760 --> 00:44:08,079
the fourth way pass segment can be

914
00:44:06,640 --> 00:44:11,359
allocated by a centralized

915
00:44:08,079 --> 00:44:14,480
controller by configuration there's

916
00:44:11,359 --> 00:44:17,920
already working group jobs to

917
00:44:14,480 --> 00:44:17,920
sr policy yeah model

918
00:44:18,240 --> 00:44:24,399
also as described in a working group job

919
00:44:21,280 --> 00:44:27,040
a spring ampers path segment

920
00:44:24,400 --> 00:44:29,280
if pass segment is allocated by a

921
00:44:27,040 --> 00:44:32,079
centralized controller

922
00:44:29,280 --> 00:44:33,760
then the controller must make sure that

923
00:44:32,079 --> 00:44:36,800
the egress node

924
00:44:33,760 --> 00:44:38,720
knows the path segment and it can

925
00:44:36,800 --> 00:44:41,520
process it

926
00:44:38,720 --> 00:44:41,520
next slide please

927
00:44:46,400 --> 00:44:50,079
this figure defines the format of sr

928
00:44:49,520 --> 00:44:53,920
candidate

929
00:44:50,079 --> 00:44:57,680
pass process id sub tov

930
00:44:53,920 --> 00:45:01,599
as specified in working group draft idr

931
00:44:57,680 --> 00:45:05,598
sr policy pass segment the path segment

932
00:45:01,599 --> 00:45:07,440
can be used to identify an sr candidate

933
00:45:05,599 --> 00:45:10,480
path

934
00:45:07,440 --> 00:45:13,520
that's why this subtly is defined

935
00:45:10,480 --> 00:45:16,079
for spping as

936
00:45:13,520 --> 00:45:17,280
specified in working group chapter

937
00:45:16,079 --> 00:45:21,280
spring segment

938
00:45:17,280 --> 00:45:25,040
routing policy an sr candidate path

939
00:45:21,280 --> 00:45:28,640
can be identified through the tuple

940
00:45:25,040 --> 00:45:31,520
head end color endpoint

941
00:45:28,640 --> 00:45:33,598
protocol origin originator and the

942
00:45:31,520 --> 00:45:36,640
discriminator

943
00:45:33,599 --> 00:45:38,160
so these type of fields are specified as

944
00:45:36,640 --> 00:45:41,920
the

945
00:45:38,160 --> 00:45:47,839
validation keys of this subuv

946
00:45:41,920 --> 00:45:50,720
next slide please

947
00:45:47,839 --> 00:45:51,599
this figure defines the format of sr

948
00:45:50,720 --> 00:45:54,799
second the list

949
00:45:51,599 --> 00:45:58,880
pass sid sub tuv as

950
00:45:54,800 --> 00:46:02,319
specified in working group draft idr

951
00:45:58,880 --> 00:46:06,319
sr policy pass segment the path segment

952
00:46:02,319 --> 00:46:09,520
can be used to identify an sr path

953
00:46:06,319 --> 00:46:13,920
that's defined defined specified by

954
00:46:09,520 --> 00:46:14,560
a seed list that's why this subtly is

955
00:46:13,920 --> 00:46:17,280
defined

956
00:46:14,560 --> 00:46:17,279
for svp

957
00:46:17,599 --> 00:46:20,960
as specified in a working group dropped

958
00:46:20,400 --> 00:46:24,079
spring

959
00:46:20,960 --> 00:46:27,599
segment routing policy

960
00:46:24,079 --> 00:46:31,440
and individual draft lp

961
00:46:27,599 --> 00:46:33,920
idr sr pass protection

962
00:46:31,440 --> 00:46:34,960
the sr path can be identified through

963
00:46:33,920 --> 00:46:38,800
the tuple

964
00:46:34,960 --> 00:46:41,680
head end color endpoint

965
00:46:38,800 --> 00:46:43,040
protocol origin originator discriminator

966
00:46:41,680 --> 00:46:46,879
and

967
00:46:43,040 --> 00:46:48,400
segmentalist id so these type of fields

968
00:46:46,880 --> 00:46:53,280
are specified

969
00:46:48,400 --> 00:46:57,839
as the validation keys of this sub-tuv

970
00:46:53,280 --> 00:46:57,839
next slide is

971
00:46:59,839 --> 00:47:07,359
past the fact validation procedures

972
00:47:04,000 --> 00:47:08,640
are augmented to the fact validation

973
00:47:07,359 --> 00:47:14,319
procedures

974
00:47:08,640 --> 00:47:17,759
defined in rc8287

975
00:47:14,319 --> 00:47:21,839
when the target fact stack sub tuv is

976
00:47:17,760 --> 00:47:25,280
sr candidate pass passes id sub uv

977
00:47:21,839 --> 00:47:27,680
the receiving node would

978
00:47:25,280 --> 00:47:30,480
firstly check the basic length of the

979
00:47:27,680 --> 00:47:34,240
received sub-tuv

980
00:47:30,480 --> 00:47:37,440
and then secondly validates that

981
00:47:34,240 --> 00:47:38,240
the past segment id is signaled or

982
00:47:37,440 --> 00:47:41,920
provisioned

983
00:47:38,240 --> 00:47:41,919
for the sr candidate path

984
00:47:42,000 --> 00:47:47,040
when the deceived protocol origin field

985
00:47:45,040 --> 00:47:51,119
is 10

986
00:47:47,040 --> 00:47:54,160
which means he sat the receiving node

987
00:47:51,119 --> 00:47:57,680
would validate that the pass id

988
00:47:54,160 --> 00:48:01,598
pass seat matches with the

989
00:47:57,680 --> 00:48:03,598
psap tuple identifying the sr candidate

990
00:48:01,599 --> 00:48:05,680
path

991
00:48:03,599 --> 00:48:06,800
when the receiving protocol origin field

992
00:48:05,680 --> 00:48:10,160
is 20

993
00:48:06,800 --> 00:48:12,400
which means bgp sr policy

994
00:48:10,160 --> 00:48:14,240
the receiving node will validate that

995
00:48:12,400 --> 00:48:17,280
the password

996
00:48:14,240 --> 00:48:20,640
match with the pgp tunnel

997
00:48:17,280 --> 00:48:23,680
a pgp tuple identifying the

998
00:48:20,640 --> 00:48:23,680
exa candidate path

999
00:48:24,160 --> 00:48:30,480
when the receiving token origin field is

1000
00:48:27,359 --> 00:48:33,279
30 which means by configuration the

1001
00:48:30,480 --> 00:48:36,640
receiving node would validate that

1002
00:48:33,280 --> 00:48:41,200
the passage match with the young tuple

1003
00:48:36,640 --> 00:48:44,000
identifying the exact candidate path

1004
00:48:41,200 --> 00:48:44,000
next slide please

1005
00:48:47,599 --> 00:48:54,720
so uh the procedures to check and

1006
00:48:50,880 --> 00:48:58,400
validate the received as a second

1007
00:48:54,720 --> 00:49:01,759
list pass see the sub-tuv

1008
00:48:58,400 --> 00:49:05,119
are similar with the last one and

1009
00:49:01,760 --> 00:49:08,720
the only difference is that

1010
00:49:05,119 --> 00:49:10,800
this tov includes one more validation

1011
00:49:08,720 --> 00:49:14,839
key

1012
00:49:10,800 --> 00:49:16,559
than the previous sub-tuv that's called

1013
00:49:14,839 --> 00:49:22,160
the

1014
00:49:16,559 --> 00:49:22,160
segment list id next slide please

1015
00:49:27,200 --> 00:49:32,078
here we list some considerations we have

1016
00:49:30,480 --> 00:49:36,079
in mind

1017
00:49:32,079 --> 00:49:40,880
when writing this job the first one

1018
00:49:36,079 --> 00:49:46,240
currently it seems there is no protocol

1019
00:49:40,880 --> 00:49:50,559
on allocating posit by the egress node

1020
00:49:46,240 --> 00:49:54,959
if it's brought up later the new target

1021
00:49:50,559 --> 00:49:56,960
effect might be defined

1022
00:49:54,960 --> 00:49:59,040
the second one currently it seems

1023
00:49:56,960 --> 00:50:02,480
there's no psat

1024
00:49:59,040 --> 00:50:06,640
details on allocating a past seat

1025
00:50:02,480 --> 00:50:06,640
to identify an sr segment list

1026
00:50:07,359 --> 00:50:14,400
which is outside the scope of this job

1027
00:50:11,280 --> 00:50:15,920
because this draft is just for extending

1028
00:50:14,400 --> 00:50:18,240
svp

1029
00:50:15,920 --> 00:50:19,280
to validate the control plane to data

1030
00:50:18,240 --> 00:50:23,439
plane

1031
00:50:19,280 --> 00:50:23,440
synchronization or pass it

1032
00:50:23,760 --> 00:50:28,640
the third one currently it seems there's

1033
00:50:26,559 --> 00:50:32,000
no young details

1034
00:50:28,640 --> 00:50:34,640
on allocating policies

1035
00:50:32,000 --> 00:50:36,960
which is also outside the scope of this

1036
00:50:34,640 --> 00:50:36,960
chart

1037
00:50:37,040 --> 00:50:41,839
the fourth one currently uh asp chase

1038
00:50:40,720 --> 00:50:45,520
route

1039
00:50:41,839 --> 00:50:48,880
is mentioned in this draft however

1040
00:50:45,520 --> 00:50:53,599
the use case for passive trace route is

1041
00:50:48,880 --> 00:50:56,640
still unclear to the authors

1042
00:50:53,599 --> 00:51:01,839
and the weather is really needed is for

1043
00:50:56,640 --> 00:51:01,839
further study next slide please

1044
00:51:04,160 --> 00:51:08,879
so our next steps will ask for more

1045
00:51:06,640 --> 00:51:11,359
reviews and comments

1046
00:51:08,880 --> 00:51:13,760
we'll revise this draft to resolve

1047
00:51:11,359 --> 00:51:17,040
received comments

1048
00:51:13,760 --> 00:51:20,240
and then at some point

1049
00:51:17,040 --> 00:51:24,079
we may ask for working group adoption

1050
00:51:20,240 --> 00:51:24,558
that's all thank you uh anyone in the

1051
00:51:24,079 --> 00:51:25,600
queue

1052
00:51:24,559 --> 00:51:27,599
and nick laura

1053
00:51:25,600 --> 00:51:30,640
[Music]

1054
00:51:27,599 --> 00:51:30,640
yes uh

1055
00:51:33,119 --> 00:51:39,280
so two questions first like uh

1056
00:51:36,480 --> 00:51:39,680
the the past set is a list of labels so

1057
00:51:39,280 --> 00:51:41,599
like

1058
00:51:39,680 --> 00:51:43,118
how do we align fact stack with the

1059
00:51:41,599 --> 00:51:47,280
level stack

1060
00:51:43,119 --> 00:51:47,280
and to fix that change procedure

1061
00:51:48,960 --> 00:51:52,160
so the second question is we might need

1062
00:51:51,359 --> 00:51:55,200
a

1063
00:51:52,160 --> 00:51:58,240
type of field in the sub trv to define

1064
00:51:55,200 --> 00:52:00,078
uh to separate theory type for ipv4 and

1065
00:51:58,240 --> 00:52:03,598
ipv6 types

1066
00:52:00,079 --> 00:52:05,440
so basically in tr v format

1067
00:52:03,599 --> 00:52:07,119
shall not use error information for the

1068
00:52:05,440 --> 00:52:09,920
purpose of t

1069
00:52:07,119 --> 00:52:10,319
so use the substitution to derive the

1070
00:52:09,920 --> 00:52:12,720
type

1071
00:52:10,319 --> 00:52:13,920
is not a good practice and not flexible

1072
00:52:12,720 --> 00:52:16,879
for future

1073
00:52:13,920 --> 00:52:18,800
modification so it's better to align

1074
00:52:16,880 --> 00:52:24,480
with other rfcc drafts

1075
00:52:18,800 --> 00:52:28,160
in this area like rfc8287 rfc829

1076
00:52:24,480 --> 00:52:29,359
so in both case ipv4 and ipv6 are either

1077
00:52:28,160 --> 00:52:33,839
use two types

1078
00:52:29,359 --> 00:52:33,839
or user type field to element ambiguous

1079
00:52:35,440 --> 00:52:42,000
yeah that's it okay thank you

1080
00:52:39,920 --> 00:52:43,680
so your ques your first question is

1081
00:52:42,000 --> 00:52:46,559
about

1082
00:52:43,680 --> 00:52:47,520
alignment between uh label stack and

1083
00:52:46,559 --> 00:52:50,559
effect

1084
00:52:47,520 --> 00:52:50,559
right yes

1085
00:52:52,559 --> 00:52:59,599
so this uh fact uh subtly

1086
00:52:56,480 --> 00:53:03,359
is taken within the

1087
00:52:59,599 --> 00:53:06,640
pink package so uh

1088
00:53:03,359 --> 00:53:07,359
i i i i don't know uh whether we need to

1089
00:53:06,640 --> 00:53:12,160
uh

1090
00:53:07,359 --> 00:53:12,558
align like uh in rfc 829 so it defines

1091
00:53:12,160 --> 00:53:14,399
that

1092
00:53:12,559 --> 00:53:15,599
basically the label stack and the fact

1093
00:53:14,400 --> 00:53:19,359
the number of london

1094
00:53:15,599 --> 00:53:19,359
atoms in this respect should match

1095
00:53:19,520 --> 00:53:22,880
so how do we match these numbers because

1096
00:53:22,079 --> 00:53:25,200
like uh

1097
00:53:22,880 --> 00:53:26,319
the past segment will like populate a

1098
00:53:25,200 --> 00:53:29,520
list of labels

1099
00:53:26,319 --> 00:53:32,160
but here we just use one fact type like

1100
00:53:29,520 --> 00:53:35,040
do we like you know push mob facts to

1101
00:53:32,160 --> 00:53:35,040
extend the label

1102
00:53:36,720 --> 00:53:40,640
okay i understand it i i need to check

1103
00:53:39,680 --> 00:53:43,680
that

1104
00:53:40,640 --> 00:53:46,799
i've seen 1829

1105
00:53:43,680 --> 00:53:49,919
so i will give you a response maybe uh

1106
00:53:46,800 --> 00:53:52,240
by email thanks

1107
00:53:49,920 --> 00:53:52,240
thank you

1108
00:53:53,040 --> 00:53:57,839
so far go ahead

1109
00:54:03,200 --> 00:54:10,480
so far yes can you hear me yes

1110
00:54:07,200 --> 00:54:13,680
okay very good uh okay so uh

1111
00:54:10,480 --> 00:54:15,760
basically there is a draft that uh

1112
00:54:13,680 --> 00:54:18,558
is on the agenda as well and i like to

1113
00:54:15,760 --> 00:54:22,319
point out because this is a good example

1114
00:54:18,559 --> 00:54:25,359
of uh some complexity that comes in

1115
00:54:22,319 --> 00:54:26,880
in mpls onn machine

1116
00:54:25,359 --> 00:54:28,480
the draft that i'm referring to is one

1117
00:54:26,880 --> 00:54:29,920
that again are going to present is on

1118
00:54:28,480 --> 00:54:33,920
the sr generic label

1119
00:54:29,920 --> 00:54:36,799
uh sub tlv there the idea here

1120
00:54:33,920 --> 00:54:38,000
the idea is to simplify this and not to

1121
00:54:36,799 --> 00:54:41,599
make it more

1122
00:54:38,000 --> 00:54:43,359
complex and keep chasing as we define

1123
00:54:41,599 --> 00:54:46,240
new and new set type

1124
00:54:43,359 --> 00:54:46,799
uh keep changing a definition of fact

1125
00:54:46,240 --> 00:54:49,598
but

1126
00:54:46,799 --> 00:54:50,640
really extend an notion similar to the

1127
00:54:49,599 --> 00:54:53,520
nilfak

1128
00:54:50,640 --> 00:54:54,960
and add some egress validation

1129
00:54:53,520 --> 00:54:58,400
associated with it

1130
00:54:54,960 --> 00:55:00,480
so i would like that you take a look at

1131
00:54:58,400 --> 00:55:04,480
that draft as well and then see

1132
00:55:00,480 --> 00:55:08,640
how it actually works for your use case

1133
00:55:04,480 --> 00:55:10,240
and if we can uh i mean we can

1134
00:55:08,640 --> 00:55:11,598
work a little bit more offline as well

1135
00:55:10,240 --> 00:55:13,118
talk a little bit more offline to

1136
00:55:11,599 --> 00:55:15,839
explain and discuss

1137
00:55:13,119 --> 00:55:16,799
but i think uh we can do a

1138
00:55:15,839 --> 00:55:20,960
simplification

1139
00:55:16,799 --> 00:55:20,960
using the sr general sub

1140
00:55:22,000 --> 00:55:29,440
thank you i i know that's a draft

1141
00:55:26,000 --> 00:55:33,040
by kumar i think these two

1142
00:55:29,440 --> 00:55:36,559
methods are complimentary to each other

1143
00:55:33,040 --> 00:55:40,799
because using just one

1144
00:55:36,559 --> 00:55:45,359
sr label it can validate

1145
00:55:40,799 --> 00:55:48,720
some some some part some portion of the

1146
00:55:45,359 --> 00:55:51,920
scope but it cannot be used to

1147
00:55:48,720 --> 00:55:54,879
validate the uh synchronization between

1148
00:55:51,920 --> 00:55:56,480
uh data plane and control plane so i

1149
00:55:54,880 --> 00:56:01,359
think uh

1150
00:55:56,480 --> 00:56:01,359
this job to maybe is also needed

1151
00:56:03,119 --> 00:56:06,880
so and and that's the that's the main

1152
00:56:05,359 --> 00:56:07,359
thing is that the synchronization

1153
00:56:06,880 --> 00:56:10,160
between

1154
00:56:07,359 --> 00:56:10,799
control plane and data plane um is a

1155
00:56:10,160 --> 00:56:13,040
goal that

1156
00:56:10,799 --> 00:56:14,319
that ampersand machinery started with

1157
00:56:13,040 --> 00:56:17,839
but it has

1158
00:56:14,319 --> 00:56:20,640
a large cost for deployments

1159
00:56:17,839 --> 00:56:23,599
uh as service provider deploy new

1160
00:56:20,640 --> 00:56:26,558
technologies on m start to become behind

1161
00:56:23,599 --> 00:56:28,000
um and and there are some challenges so

1162
00:56:26,559 --> 00:56:30,319
i

1163
00:56:28,000 --> 00:56:31,280
so i think just for that and just

1164
00:56:30,319 --> 00:56:34,240
chasing that

1165
00:56:31,280 --> 00:56:34,559
that role for defining a new effect type

1166
00:56:34,240 --> 00:56:37,680
i'm

1167
00:56:34,559 --> 00:56:40,000
i'm personally don't like that uh

1168
00:56:37,680 --> 00:56:42,000
but but anyway i think we should talk a

1169
00:56:40,000 --> 00:56:44,640
little bit more and then see

1170
00:56:42,000 --> 00:56:47,040
at least for the data plane validity how

1171
00:56:44,640 --> 00:56:49,200
can you use the sr generic label uh

1172
00:56:47,040 --> 00:56:52,720
subtle

1173
00:56:49,200 --> 00:56:52,720
for the past segment use case

1174
00:56:52,960 --> 00:56:59,280
okay uh we can discuss the

1175
00:56:56,160 --> 00:57:03,920
offline thank you

1176
00:56:59,280 --> 00:57:03,920
okay thank you mike uh matt go ahead

1177
00:57:05,839 --> 00:57:09,440
let's show you about uh so what's the

1178
00:57:08,640 --> 00:57:13,520
purpose of

1179
00:57:09,440 --> 00:57:15,280
to carry what it did

1180
00:57:13,520 --> 00:57:19,119
that's a good question i was gonna ask

1181
00:57:15,280 --> 00:57:19,119
it okay i'll remove my hand

1182
00:57:19,839 --> 00:57:27,040
uh the purpose

1183
00:57:23,119 --> 00:57:31,040
is to check whether the power segment

1184
00:57:27,040 --> 00:57:31,040
allocated to the ingress node

1185
00:57:31,680 --> 00:57:38,799
can can

1186
00:57:35,599 --> 00:57:42,079
be forwarded before the to the correct

1187
00:57:38,799 --> 00:57:45,520
egress node the euclid's node can check

1188
00:57:42,079 --> 00:57:48,799
whether it is the right

1189
00:57:45,520 --> 00:57:53,119
pass segment is the correct segment

1190
00:57:48,799 --> 00:57:56,000
that's allocated to the ingress node so

1191
00:57:53,119 --> 00:57:58,559
that that that that's the intention of

1192
00:57:56,000 --> 00:57:58,559
this job

1193
00:57:59,280 --> 00:58:02,799
but then you can allocate it for per

1194
00:58:01,359 --> 00:58:07,440
policy right why

1195
00:58:02,799 --> 00:58:11,440
per candidate path and per segment list

1196
00:58:07,440 --> 00:58:14,640
uh because uh uh there are there are uh

1197
00:58:11,440 --> 00:58:18,319
there is a working group draft uh

1198
00:58:14,640 --> 00:58:22,558
in idr working group i think

1199
00:58:18,319 --> 00:58:25,839
for idr uh part segment

1200
00:58:22,559 --> 00:58:28,960
uh in that draft uh per segment can be

1201
00:58:25,839 --> 00:58:32,799
uh i can be used to identify the

1202
00:58:28,960 --> 00:58:36,720
uh two different things uh one thing is

1203
00:58:32,799 --> 00:58:40,160
sr candidate path the other thing is

1204
00:58:36,720 --> 00:58:43,598
sr pass specified by seed list

1205
00:58:40,160 --> 00:58:47,520
so we followed that

1206
00:58:43,599 --> 00:58:51,839
definition and defined the two sub tvs

1207
00:58:47,520 --> 00:58:51,839
for the two different things

1208
00:58:53,119 --> 00:59:04,079
okay i assume zafar make you already

1209
00:58:57,359 --> 00:59:05,920
out of the queue she

1210
00:59:04,079 --> 00:59:07,119
okay do you want to go in for the

1211
00:59:05,920 --> 00:59:09,359
purpose of this

1212
00:59:07,119 --> 00:59:11,119
so because of like we don't have like a

1213
00:59:09,359 --> 00:59:13,040
date pass validation so it's

1214
00:59:11,119 --> 00:59:14,960
this is a pure control plan ingress

1215
00:59:13,040 --> 00:59:17,040
egress kind of audit

1216
00:59:14,960 --> 00:59:18,559
so why would not do it in enrollment

1217
00:59:17,040 --> 00:59:20,720
protocol instead of doing

1218
00:59:18,559 --> 00:59:20,720
o

1219
00:59:23,280 --> 00:59:28,240
control do me a control plane validation

1220
00:59:26,640 --> 00:59:30,400
yeah because like i don't see any

1221
00:59:28,240 --> 00:59:31,680
dispatch validation part so we cannot

1222
00:59:30,400 --> 00:59:34,240
validate the control plan

1223
00:59:31,680 --> 00:59:35,839
between kendrick and the date pass so

1224
00:59:34,240 --> 00:59:37,520
because the label stack cannot be

1225
00:59:35,839 --> 00:59:41,040
validated in there like a

1226
00:59:37,520 --> 00:59:43,680
header right so you so

1227
00:59:41,040 --> 00:59:45,680
go back to the like a fact i understand

1228
00:59:43,680 --> 00:59:48,879
i understand it

1229
00:59:45,680 --> 00:59:52,240
yeah maybe maybe

1230
00:59:48,880 --> 00:59:55,680
there is also other method to validate

1231
00:59:52,240 --> 00:59:58,879
this um

1232
00:59:55,680 --> 01:00:00,799
well we will see yeah

1233
00:59:58,880 --> 01:00:02,240
all right chang uh can you make it quick

1234
01:00:00,799 --> 01:00:05,520
please uh we're uh

1235
01:00:02,240 --> 01:00:08,558
uh we're over time okay okay

1236
01:00:05,520 --> 01:00:12,160
uh welcome to join the pro second work

1237
01:00:08,559 --> 01:00:13,440
and luckily i have the order of the pgp

1238
01:00:12,160 --> 01:00:17,040
policy

1239
01:00:13,440 --> 01:00:17,359
jobs and i think it's that it's valuable

1240
01:00:17,040 --> 01:00:21,119
to

1241
01:00:17,359 --> 01:00:24,480
do something uh associated with

1242
01:00:21,119 --> 01:00:27,040
to a part segment but i don't really

1243
01:00:24,480 --> 01:00:28,799
think the mechanism is valid right now

1244
01:00:27,040 --> 01:00:32,240
i'll take some time to read it

1245
01:00:28,799 --> 01:00:35,440
thank you thank you thank you

1246
01:00:32,240 --> 01:00:36,319
all right okay thanks i'll switch over

1247
01:00:35,440 --> 01:00:40,160
to the next

1248
01:00:36,319 --> 01:00:40,160
presentation and the interest of time

1249
01:00:40,839 --> 01:00:47,599
okay greg thank you uh

1250
01:00:44,880 --> 01:00:48,240
thank you and greg you're up next okay

1251
01:00:47,599 --> 01:00:51,760
great

1252
01:00:48,240 --> 01:00:54,078
um next slide please

1253
01:00:51,760 --> 01:00:54,079
all right

1254
01:00:55,440 --> 01:01:03,040
okay so uh this is an update to uh

1255
01:00:58,960 --> 01:01:06,720
our draft on uh point to multipoint

1256
01:01:03,040 --> 01:01:11,279
uh bfd applicability to mpos

1257
01:01:06,720 --> 01:01:15,279
lsp and uh so

1258
01:01:11,280 --> 01:01:18,559
uh we have uh two new

1259
01:01:15,280 --> 01:01:19,200
experts joining the work um welcome

1260
01:01:18,559 --> 01:01:23,119
donald

1261
01:01:19,200 --> 01:01:24,000
and guyan and um so to recap the

1262
01:01:23,119 --> 01:01:28,160
motivation

1263
01:01:24,000 --> 01:01:33,119
that uh point to multipoint mpls lsps

1264
01:01:28,160 --> 01:01:37,759
are uh being used and uh will be used

1265
01:01:33,119 --> 01:01:41,119
so their issue is that uh rfc 5884

1266
01:01:37,760 --> 01:01:44,799
that defined only point-to-multipoint

1267
01:01:41,119 --> 01:01:48,240
uh bfd applicability

1268
01:01:44,799 --> 01:01:51,280
to mpos lsp uh recently

1269
01:01:48,240 --> 01:01:54,879
uh two rfc has been published by the

1270
01:01:51,280 --> 01:01:57,640
working group it's rfc 8562

1271
01:01:54,880 --> 01:01:59,200
for bfd for multi-point networks and

1272
01:01:57,640 --> 01:02:02,160
8563

1273
01:01:59,200 --> 01:02:06,960
uh bfd for multi-point networks with

1274
01:02:02,160 --> 01:02:10,558
active tails um

1275
01:02:06,960 --> 01:02:11,760
i believe that um the uh the letter one

1276
01:02:10,559 --> 01:02:14,880
the active tales

1277
01:02:11,760 --> 01:02:18,240
is more interesting because it allows

1278
01:02:14,880 --> 01:02:21,440
uh the root to learn of their

1279
01:02:18,240 --> 01:02:21,919
uh state of the multicast distribution

1280
01:02:21,440 --> 01:02:26,000
tree

1281
01:02:21,920 --> 01:02:29,440
from their uh point of view of the tail

1282
01:02:26,000 --> 01:02:29,440
um next uh

1283
01:02:31,760 --> 01:02:38,559
yes and to mention that um seamless

1284
01:02:34,960 --> 01:02:41,520
bfd seems not to be uh

1285
01:02:38,559 --> 01:02:42,720
at least now defined uh how it works

1286
01:02:41,520 --> 01:02:47,359
over

1287
01:02:42,720 --> 01:02:50,959
multi-point multi-class networks

1288
01:02:47,359 --> 01:02:50,960
uh because um

1289
01:02:51,119 --> 01:02:54,960
point to multipoint bd uh uses demand

1290
01:02:54,319 --> 01:02:58,160
mode

1291
01:02:54,960 --> 01:03:01,119
and uh there is no three-way handshake

1292
01:02:58,160 --> 01:03:03,038
it requires bootstrapping uh the

1293
01:03:01,119 --> 01:03:06,079
bootstrapping that uh we'd

1294
01:03:03,039 --> 01:03:07,119
uh propose uh uh could be using the

1295
01:03:06,079 --> 01:03:10,559
periodic uh

1296
01:03:07,119 --> 01:03:12,640
lsp ping so if we have if uh

1297
01:03:10,559 --> 01:03:13,839
a new tail joins the multicast

1298
01:03:12,640 --> 01:03:17,038
distribution tree

1299
01:03:13,839 --> 01:03:18,640
then the next uh lsp thing will

1300
01:03:17,039 --> 01:03:22,400
bootstrap

1301
01:03:18,640 --> 01:03:26,240
um the session uh there are

1302
01:03:22,400 --> 01:03:28,319
some uh changes to the process of

1303
01:03:26,240 --> 01:03:31,520
bootstrapping as defined in

1304
01:03:28,319 --> 01:03:35,279
our rfc 5884 so

1305
01:03:31,520 --> 01:03:38,640
uh because um

1306
01:03:35,280 --> 01:03:40,799
their head end does not is not

1307
01:03:38,640 --> 01:03:42,799
interested in a discriminator and

1308
01:03:40,799 --> 01:03:46,240
actually the tail does not allocate

1309
01:03:42,799 --> 01:03:46,960
one for the bfd session so we recommend

1310
01:03:46,240 --> 01:03:50,078
to use

1311
01:03:46,960 --> 01:03:54,160
uh do not require mode for the lsp thing

1312
01:03:50,079 --> 01:03:54,160
that includes the discriminator

1313
01:03:54,319 --> 01:03:58,079
also uh there are point to multi-point

1314
01:03:57,200 --> 01:04:02,319
vd session

1315
01:03:58,079 --> 01:04:05,440
over mpls osp can be uh

1316
01:04:02,319 --> 01:04:09,839
bootstrapped using a bgp pfd

1317
01:04:05,440 --> 01:04:15,280
attribute that is defined in um

1318
01:04:09,839 --> 01:04:15,279
best document on nvpn uh fast failover

1319
01:04:16,000 --> 01:04:22,640
so what uh changed um

1320
01:04:19,599 --> 01:04:25,760
historically for um

1321
01:04:22,640 --> 01:04:28,799
ipudp encapsulated in

1322
01:04:25,760 --> 01:04:32,160
ip edp encapsulated oem packets

1323
01:04:28,799 --> 01:04:35,119
in under mpls uh

1324
01:04:32,160 --> 01:04:35,118
we used to use

1325
01:04:35,520 --> 01:04:42,079
ipv4 loopback range or

1326
01:04:38,880 --> 01:04:42,960
recommend to use any address from that

1327
01:04:42,079 --> 01:04:46,880
range

1328
01:04:42,960 --> 01:04:46,880
and then for ipv6

1329
01:04:46,960 --> 01:04:53,280
ipv4 mapped addresses so basically the

1330
01:04:50,079 --> 01:04:56,480
same address is mapped into ipv6

1331
01:04:53,280 --> 01:04:57,839
what is interesting that in ipv6 this

1332
01:04:56,480 --> 01:05:01,359
address range doesn't have

1333
01:04:57,839 --> 01:05:02,720
any special meaning so it's not the

1334
01:05:01,359 --> 01:05:06,640
loopback addresses

1335
01:05:02,720 --> 01:05:06,640
and i was demonstrated that

1336
01:05:07,039 --> 01:05:13,760
available uh ipv6 uh stack

1337
01:05:10,880 --> 01:05:15,760
uh will generate a ping to the one of

1338
01:05:13,760 --> 01:05:19,520
any of these addresses

1339
01:05:15,760 --> 01:05:23,680
so um it was recommended that to use

1340
01:05:19,520 --> 01:05:27,038
uh the only i look back

1341
01:05:23,680 --> 01:05:31,118
uh address that is defined for ipv6

1342
01:05:27,039 --> 01:05:34,240
in rfc 4291 address one slash

1343
01:05:31,119 --> 01:05:38,319
128 is the only loopback

1344
01:05:34,240 --> 01:05:41,759
for ipv6 and since we're using one

1345
01:05:38,319 --> 01:05:44,799
address for ipv6 um

1346
01:05:41,760 --> 01:05:45,920
it would be logical to use uh one

1347
01:05:44,799 --> 01:05:48,880
address

1348
01:05:45,920 --> 01:05:50,079
for ipv4 encapsulation ipedp

1349
01:05:48,880 --> 01:05:53,920
encapsulation

1350
01:05:50,079 --> 01:05:57,680
of oem packets so in this specification

1351
01:05:53,920 --> 01:06:01,200
uh we're proposing to use uh 128

1352
01:05:57,680 --> 01:06:04,279
7 0 0 1 slash 32

1353
01:06:01,200 --> 01:06:08,799
and one slash 128 for

1354
01:06:04,280 --> 01:06:12,880
ipv6 as destination ip addresses

1355
01:06:08,799 --> 01:06:12,880
using ipudp encapsulation

1356
01:06:13,359 --> 01:06:21,160
the udp port will be as

1357
01:06:17,440 --> 01:06:24,160
for single hub bfd 370

1358
01:06:21,160 --> 01:06:24,160
3784

1359
01:06:28,000 --> 01:06:35,920
and the source port number will be

1360
01:06:32,079 --> 01:06:39,119
in a dynamic range of port numbers

1361
01:06:35,920 --> 01:06:39,119
okay next slide please

1362
01:06:42,319 --> 01:06:49,599
rc 8563 defines uh

1363
01:06:45,760 --> 01:06:52,880
three types of uh head notification

1364
01:06:49,599 --> 01:06:55,200
uh the multicast polling uh their

1365
01:06:52,880 --> 01:06:56,480
composite wallet which combines uh

1366
01:06:55,200 --> 01:06:59,118
multicast falling

1367
01:06:56,480 --> 01:07:01,280
using their multicast distribution three

1368
01:06:59,119 --> 01:07:04,319
and then unicast following

1369
01:07:01,280 --> 01:07:07,280
uh using paths um

1370
01:07:04,319 --> 01:07:09,520
that are not using the same links as a

1371
01:07:07,280 --> 01:07:13,039
multicast distribution three

1372
01:07:09,520 --> 01:07:16,720
um another and the third uh option

1373
01:07:13,039 --> 01:07:19,599
uh but not defined but uh mentioned

1374
01:07:16,720 --> 01:07:20,399
in the rfc is head notification without

1375
01:07:19,599 --> 01:07:23,599
polling

1376
01:07:20,400 --> 01:07:26,640
so in this draft uh we provide a

1377
01:07:23,599 --> 01:07:27,680
more detailed uh explanation of the

1378
01:07:26,640 --> 01:07:29,598
mechanics

1379
01:07:27,680 --> 01:07:32,240
and how head notification without

1380
01:07:29,599 --> 01:07:35,599
polling operates so basically it's uns

1381
01:07:32,240 --> 01:07:38,720
solicited event triggered uh option

1382
01:07:35,599 --> 01:07:38,720
uh next slide please

1383
01:07:39,200 --> 01:07:42,558
if you can uh wrap it up uh yep three

1384
01:07:42,240 --> 01:07:45,759
more

1385
01:07:42,559 --> 01:07:49,520
so uh this diagram just presents uh

1386
01:07:45,760 --> 01:07:52,640
their mechanics as that uh we have a p

1387
01:07:49,520 --> 01:07:55,680
and p one that is a head end and

1388
01:07:52,640 --> 01:07:59,440
p four five and six as

1389
01:07:55,680 --> 01:08:02,640
it tails and uh if we um

1390
01:07:59,440 --> 01:08:06,480
network failure occurs then

1391
01:08:02,640 --> 01:08:09,759
uh the tails will generate unicast pole

1392
01:08:06,480 --> 01:08:10,960
uh to uh the head end and head end will

1393
01:08:09,760 --> 01:08:14,799
send the unicast

1394
01:08:10,960 --> 01:08:16,080
final and then can take corrective

1395
01:08:14,799 --> 01:08:18,880
actions

1396
01:08:16,080 --> 01:08:18,880
next slide please

1397
01:08:20,479 --> 01:08:25,678
so uh we welcome common suggestions and

1398
01:08:23,359 --> 01:08:27,759
questions about the proposed solution

1399
01:08:25,679 --> 01:08:29,679
and as i've mentioned uh in the

1400
01:08:27,759 --> 01:08:31,920
discussion uh earlier

1401
01:08:29,679 --> 01:08:32,960
uh i really appreciate that this

1402
01:08:31,920 --> 01:08:34,960
document being

1403
01:08:32,960 --> 01:08:36,319
put as a candidate for working group

1404
01:08:34,960 --> 01:08:39,759
adoption

1405
01:08:36,319 --> 01:08:43,759
thank you

1406
01:08:39,759 --> 01:08:47,600
thank you greg uh anyone in the queue

1407
01:08:43,759 --> 01:08:52,319
uh no she was empty

1408
01:08:47,600 --> 01:08:56,239
okay thanks thank you greg

1409
01:08:52,319 --> 01:08:57,040
next up we have uh i think it's deepti

1410
01:08:56,238 --> 01:09:06,799
or shraddha

1411
01:08:57,040 --> 01:09:09,839
um we have egress dlv nil for denfak

1412
01:09:06,799 --> 01:09:13,920
is someone coming up to the mic

1413
01:09:09,839 --> 01:09:17,198
oh am i audible yes you are

1414
01:09:13,920 --> 01:09:19,359
go ahead hi i am deepti uh and uh

1415
01:09:17,198 --> 01:09:21,358
along with the authors we are presenting

1416
01:09:19,359 --> 01:09:23,440
egress tlb for the new effect as

1417
01:09:21,359 --> 01:09:26,400
extension to the nilfek

1418
01:09:23,439 --> 01:09:26,399
next site please

1419
01:09:27,520 --> 01:09:31,679
so now in this slides uh we will be

1420
01:09:30,479 --> 01:09:34,238
touching the

1421
01:09:31,679 --> 01:09:35,040
springtea requirement for the om and how

1422
01:09:34,238 --> 01:09:38,318
nilfek

1423
01:09:35,040 --> 01:09:39,120
fits in that picture and egress tlv how

1424
01:09:38,319 --> 01:09:42,400
it completes

1425
01:09:39,120 --> 01:09:44,880
the uh uh how

1426
01:09:42,399 --> 01:09:46,399
how it completes the whole uh om

1427
01:09:44,880 --> 01:09:50,480
requirement

1428
01:09:46,399 --> 01:09:52,719
with the example uh next slides please

1429
01:09:50,479 --> 01:09:52,718
sure

1430
01:09:55,600 --> 01:09:59,840
so uh the srt paths are built by

1431
01:09:58,320 --> 01:10:01,759
stacking the labels

1432
01:09:59,840 --> 01:10:03,360
that represents the nodes and links in

1433
01:10:01,760 --> 01:10:06,400
the using the

1434
01:10:03,360 --> 01:10:07,519
adjacency set node set and all this this

1435
01:10:06,400 --> 01:10:11,120
give requirement

1436
01:10:07,520 --> 01:10:11,679
uh so the basic om is not uh basically

1437
01:10:11,120 --> 01:10:14,159
hop by

1438
01:10:11,679 --> 01:10:16,080
hop basis which give rise to a ping and

1439
01:10:14,159 --> 01:10:19,120
trace route for this path

1440
01:10:16,080 --> 01:10:20,960
now the idea to you verify these labels

1441
01:10:19,120 --> 01:10:23,760
stack by sending the mpls

1442
01:10:20,960 --> 01:10:26,560
or echo request packet with entire label

1443
01:10:23,760 --> 01:10:29,920
stack along with the same data

1444
01:10:26,560 --> 01:10:32,080
along on the same data plane as used by

1445
01:10:29,920 --> 01:10:35,280
the data traffic

1446
01:10:32,080 --> 01:10:37,519
in certain use cases where the srt paths

1447
01:10:35,280 --> 01:10:38,800
are built by controller the hidden

1448
01:10:37,520 --> 01:10:40,960
routers may not

1449
01:10:38,800 --> 01:10:43,679
have the complete database of the

1450
01:10:40,960 --> 01:10:46,159
network or may not be aware of the fact

1451
01:10:43,679 --> 01:10:47,840
associated with the labels that are used

1452
01:10:46,159 --> 01:10:52,159
in the label stack

1453
01:10:47,840 --> 01:10:54,400
like static lsp labels and others

1454
01:10:52,159 --> 01:10:56,559
there is another use case where the

1455
01:10:54,400 --> 01:10:58,559
router in the network are not upgraded

1456
01:10:56,560 --> 01:11:00,159
to support the fake validation for the

1457
01:10:58,560 --> 01:11:03,440
srt path

1458
01:11:00,159 --> 01:11:06,159
this nature of the srt paths raises

1459
01:11:03,440 --> 01:11:09,759
additional consideration for fault

1460
01:11:06,159 --> 01:11:09,759
detection and isolation

1461
01:11:10,840 --> 01:11:15,920
so

1462
01:11:13,040 --> 01:11:15,920
it is useful

1463
01:11:16,080 --> 01:11:20,559
it is useful to have the ability to

1464
01:11:18,800 --> 01:11:23,040
traverse the paths

1465
01:11:20,560 --> 01:11:24,719
using ping and trace route without

1466
01:11:23,040 --> 01:11:29,760
having to obtain the fact

1467
01:11:24,719 --> 01:11:29,760
for each label uh next slide please

1468
01:11:32,120 --> 01:11:37,519
rfc8029 support this mixing

1469
01:11:34,320 --> 01:11:41,440
mechanism using a new effect

1470
01:11:37,520 --> 01:11:43,920
now neil feck as outermost fake of a

1471
01:11:41,440 --> 01:11:45,599
target stack or is the knee effect then

1472
01:11:43,920 --> 01:11:48,080
the node

1473
01:11:45,600 --> 01:11:50,880
skip the target validation and goes

1474
01:11:48,080 --> 01:11:53,519
directly for the label stack validation

1475
01:11:50,880 --> 01:11:54,719
so we can always build an intelligent

1476
01:11:53,520 --> 01:11:57,040
application

1477
01:11:54,719 --> 01:11:58,239
which will help to validate or do the

1478
01:11:57,040 --> 01:12:00,719
extra

1479
01:11:58,239 --> 01:12:01,519
additional verification on the ingress

1480
01:12:00,719 --> 01:12:04,880
for the

1481
01:12:01,520 --> 01:12:07,679
uh on using the data

1482
01:12:04,880 --> 01:12:09,199
sent by the transit node to verify the

1483
01:12:07,679 --> 01:12:12,480
data plane

1484
01:12:09,199 --> 01:12:15,360
uh data forwarding plane

1485
01:12:12,480 --> 01:12:17,919
uh is same as the label stack path

1486
01:12:15,360 --> 01:12:17,920
provided

1487
01:12:19,040 --> 01:12:23,760
this also helps us to verify the backup

1488
01:12:21,760 --> 01:12:27,199
parts

1489
01:12:23,760 --> 01:12:30,800
before using it as a primary path

1490
01:12:27,199 --> 01:12:33,040
so since the knee effect carries only

1491
01:12:30,800 --> 01:12:34,159
label information and no fake related

1492
01:12:33,040 --> 01:12:38,960
information

1493
01:12:34,159 --> 01:12:41,120
it may happen that uh

1494
01:12:38,960 --> 01:12:43,120
that there is a high possibility that

1495
01:12:41,120 --> 01:12:45,679
the packet may be misforwarded

1496
01:12:43,120 --> 01:12:48,400
to incorrect destination even though the

1497
01:12:45,679 --> 01:12:51,199
ping and trace route returns success

1498
01:12:48,400 --> 01:12:52,239
there is another thing when router in

1499
01:12:51,199 --> 01:12:55,839
the label the

1500
01:12:52,239 --> 01:12:58,159
stack path receives mpls eco request

1501
01:12:55,840 --> 01:12:59,679
there is no definite way to decide on

1502
01:12:58,159 --> 01:13:02,320
whether it's egress

1503
01:12:59,679 --> 01:13:04,400
or transit and it solely depends on the

1504
01:13:02,320 --> 01:13:08,159
receive label stack

1505
01:13:04,400 --> 01:13:12,080
thus ah to use nif

1506
01:13:08,159 --> 01:13:14,719
in the for the srt parts where fake

1507
01:13:12,080 --> 01:13:15,519
validation is not possible we should

1508
01:13:14,719 --> 01:13:18,880
have

1509
01:13:15,520 --> 01:13:20,800
additional information regarding egress

1510
01:13:18,880 --> 01:13:22,560
so that the egress validation can be

1511
01:13:20,800 --> 01:13:25,120
completed

1512
01:13:22,560 --> 01:13:26,000
so if with the help of the egress

1513
01:13:25,120 --> 01:13:28,400
information

1514
01:13:26,000 --> 01:13:29,280
we will be it will help to determine if

1515
01:13:28,400 --> 01:13:32,000
the receiver

1516
01:13:29,280 --> 01:13:32,639
receiving router is egress or transit

1517
01:13:32,000 --> 01:13:35,520
and

1518
01:13:32,640 --> 01:13:36,239
it will additionally ensure that the

1519
01:13:35,520 --> 01:13:38,560
packet

1520
01:13:36,239 --> 01:13:41,199
is received on the correct destination

1521
01:13:38,560 --> 01:13:46,480
as destined by the label path

1522
01:13:41,199 --> 01:13:49,360
next slide piece

1523
01:13:46,480 --> 01:13:50,480
so uh this is where the egress tl we

1524
01:13:49,360 --> 01:13:52,880
come into picture

1525
01:13:50,480 --> 01:13:53,519
so this is a very simple tlb which has

1526
01:13:52,880 --> 01:13:57,120
the

1527
01:13:53,520 --> 01:13:58,080
uh end point uh the srt path end point

1528
01:13:57,120 --> 01:14:00,239
as a prefix

1529
01:13:58,080 --> 01:14:02,159
inserted in it so even if we have

1530
01:14:00,239 --> 01:14:05,440
multiple knee effect

1531
01:14:02,159 --> 01:14:06,080
the last nail effect end point will be

1532
01:14:05,440 --> 01:14:09,120
the

1533
01:14:06,080 --> 01:14:12,159
prefix used in the egress tlv

1534
01:14:09,120 --> 01:14:15,679
now how it helps in our determining the

1535
01:14:12,159 --> 01:14:20,639
egress validation is uh as nilfek as in

1536
01:14:15,679 --> 01:14:24,239
rfc 8029 uh if the outermost uh

1537
01:14:20,640 --> 01:14:26,560
effect is neil feck all the

1538
01:14:24,239 --> 01:14:27,519
transit node will avoid to do the fact

1539
01:14:26,560 --> 01:14:29,840
validation

1540
01:14:27,520 --> 01:14:31,120
so the label stack will use to forward

1541
01:14:29,840 --> 01:14:32,960
the packet

1542
01:14:31,120 --> 01:14:34,640
at the last neighbor when the label

1543
01:14:32,960 --> 01:14:37,199
stack is

1544
01:14:34,640 --> 01:14:38,000
like reached to the last label last

1545
01:14:37,199 --> 01:14:40,960
router

1546
01:14:38,000 --> 01:14:43,120
there it will check for the egress dlv

1547
01:14:40,960 --> 01:14:45,679
and the prefix is matching with the

1548
01:14:43,120 --> 01:14:46,159
any of the interface ip addresses or the

1549
01:14:45,679 --> 01:14:49,679
local

1550
01:14:46,159 --> 01:14:50,159
uh loopback address and thus determine

1551
01:14:49,679 --> 01:14:53,760
key

1552
01:14:50,159 --> 01:14:56,960
that is the egress for this path or not

1553
01:14:53,760 --> 01:14:58,560
in case if it is failed to uh match with

1554
01:14:56,960 --> 01:15:02,719
the

1555
01:14:58,560 --> 01:15:05,040
uh uh any of the interface ip address

1556
01:15:02,719 --> 01:15:08,960
it will send a failure saying that it is

1557
01:15:05,040 --> 01:15:11,840
a non-compliant or no mapping is present

1558
01:15:08,960 --> 01:15:11,840
next slide please

1559
01:15:13,360 --> 01:15:16,400
so this is the example uh where i'm

1560
01:15:15,920 --> 01:15:18,800
taking

1561
01:15:16,400 --> 01:15:19,679
like a srt route with the label stack

1562
01:15:18,800 --> 01:15:23,040
provided

1563
01:15:19,679 --> 01:15:25,840
uh it has four segments

1564
01:15:23,040 --> 01:15:25,840
next slide

1565
01:15:28,719 --> 01:15:32,320
so this is the trace route path as per

1566
01:15:30,960 --> 01:15:36,320
the previous image

1567
01:15:32,320 --> 01:15:39,360
r1 r2 r4 r5 r6 r7

1568
01:15:36,320 --> 01:15:40,559
so the destination uh as per the label

1569
01:15:39,360 --> 01:15:42,960
stack the destiny

1570
01:15:40,560 --> 01:15:44,719
endpoint is r7 and we are starting a

1571
01:15:42,960 --> 01:15:48,560
trace route from r1

1572
01:15:44,719 --> 01:15:49,360
so the behavior on r2 r4 r5 r6 is given

1573
01:15:48,560 --> 01:15:52,480
in the

1574
01:15:49,360 --> 01:15:55,280
next lines

1575
01:15:52,480 --> 01:15:55,280
next slide please

1576
01:15:56,560 --> 01:16:02,000
so when the request is going it will

1577
01:15:58,800 --> 01:16:05,360
send the eagerness ple will be added

1578
01:16:02,000 --> 01:16:08,960
as given in the

1579
01:16:05,360 --> 01:16:12,719
in the slide with the end point of the

1580
01:16:08,960 --> 01:16:14,880
srt path the verification

1581
01:16:12,719 --> 01:16:17,600
on all the nodes will happen based on

1582
01:16:14,880 --> 01:16:17,600
the nail fact

1583
01:16:18,080 --> 01:16:21,840
next slide

1584
01:16:23,440 --> 01:16:30,000
so all in where the uh the advantage of

1585
01:16:26,560 --> 01:16:32,239
adding a nil like a egress tlv is

1586
01:16:30,000 --> 01:16:34,560
uh none of the in between routers like

1587
01:16:32,239 --> 01:16:38,080
transit router need to be upgraded

1588
01:16:34,560 --> 01:16:41,199
to to accommodate the uh egress

1589
01:16:38,080 --> 01:16:42,640
tlv as it is optional and on the transit

1590
01:16:41,199 --> 01:16:44,320
router we are not checking for the

1591
01:16:42,640 --> 01:16:46,840
egress tlv

1592
01:16:44,320 --> 01:16:49,840
so it helps to have the backward

1593
01:16:46,840 --> 01:16:49,840
compatibility

1594
01:16:52,239 --> 01:16:58,000
so on each router we will be checking

1595
01:16:54,800 --> 01:17:00,640
based on the label stack provided

1596
01:16:58,000 --> 01:17:02,719
and it will behave the behavior will be

1597
01:17:00,640 --> 01:17:06,239
same as given by the nil effect

1598
01:17:02,719 --> 01:17:06,239
in rfc8029

1599
01:17:06,320 --> 01:17:09,120
next slide please

1600
01:17:10,480 --> 01:17:14,839
we can go to the next slide at the end

1601
01:17:12,960 --> 01:17:17,040
of the

1602
01:17:14,840 --> 01:17:20,159
slide yeah

1603
01:17:17,040 --> 01:17:22,480
next slide so here

1604
01:17:20,159 --> 01:17:23,679
once uh on r7 when the label stack

1605
01:17:22,480 --> 01:17:26,718
reached to the

1606
01:17:23,679 --> 01:17:27,920
last label it will go and verify for the

1607
01:17:26,719 --> 01:17:30,960
egress tlv

1608
01:17:27,920 --> 01:17:32,640
if it matches with the interface on any

1609
01:17:30,960 --> 01:17:36,080
of the ip address on the

1610
01:17:32,640 --> 01:17:38,400
r7 with uh so it will return uh with the

1611
01:17:36,080 --> 01:17:39,120
thing key it is a egress for this label

1612
01:17:38,400 --> 01:17:42,080
stack

1613
01:17:39,120 --> 01:17:44,719
and does the egress validation can be

1614
01:17:42,080 --> 01:17:47,519
achieved using the knee effect

1615
01:17:44,719 --> 01:17:47,520
next slide please

1616
01:17:49,120 --> 01:17:53,199
we request uh the reviews and comments

1617
01:17:52,080 --> 01:17:56,840
on this

1618
01:17:53,199 --> 01:17:59,839
along with uh like working group

1619
01:17:56,840 --> 01:17:59,840
adoption

1620
01:18:01,199 --> 01:18:06,719
okay thank you uh

1621
01:18:04,719 --> 01:18:07,920
anyone in the queue yeah we have two

1622
01:18:06,719 --> 01:18:10,880
people in the queue

1623
01:18:07,920 --> 01:18:10,880
uh xiang

1624
01:18:11,440 --> 01:18:16,960
uh yes so a couple questions here so

1625
01:18:14,800 --> 01:18:18,800
uh as like uh what group chair already

1626
01:18:16,960 --> 01:18:19,120
mentioned this has a confliction with

1627
01:18:18,800 --> 01:18:22,560
the

1628
01:18:19,120 --> 01:18:25,519
like sr generic theory uh

1629
01:18:22,560 --> 01:18:27,920
so another thing is uh i assume this

1630
01:18:25,520 --> 01:18:31,600
solution is for prefix said only

1631
01:18:27,920 --> 01:18:32,640
so if it's for ipv4 or ipv6 prefix so

1632
01:18:31,600 --> 01:18:35,040
why might not use

1633
01:18:32,640 --> 01:18:36,080
existing panoramic ipv for prefix

1634
01:18:35,040 --> 01:18:40,080
subtree

1635
01:18:36,080 --> 01:18:43,120
that has been there for many years

1636
01:18:40,080 --> 01:18:45,760
yeah yeah okay

1637
01:18:43,120 --> 01:18:48,239
no you can complete the question and how

1638
01:18:45,760 --> 01:18:48,800
we handle adrian's is it so if the last

1639
01:18:48,239 --> 01:18:52,400
uh

1640
01:18:48,800 --> 01:18:54,719
segment is not a prefix set and

1641
01:18:52,400 --> 01:18:56,559
so for buying like for binances these

1642
01:18:54,719 --> 01:18:59,520
kind of things are like upstream

1643
01:18:56,560 --> 01:19:00,800
uh root assigned or popped labels so how

1644
01:18:59,520 --> 01:19:05,040
to take a egress

1645
01:19:00,800 --> 01:19:07,120
for this so another thing is like

1646
01:19:05,040 --> 01:19:08,719
i noticed that you have two trvc in the

1647
01:19:07,120 --> 01:19:11,760
effect so

1648
01:19:08,719 --> 01:19:14,400
one equals trv and new vector trb

1649
01:19:11,760 --> 01:19:15,679
then how we align their fax stack and

1650
01:19:14,400 --> 01:19:19,519
the label stack

1651
01:19:15,679 --> 01:19:21,520
so according to rfc8029 so

1652
01:19:19,520 --> 01:19:22,880
fact stack and the label stack should

1653
01:19:21,520 --> 01:19:25,280
match so the number of

1654
01:19:22,880 --> 01:19:27,760
atoms should match so then they can you

1655
01:19:25,280 --> 01:19:31,040
know so just break it

1656
01:19:27,760 --> 01:19:31,679
see uh yeah uh currently for in this

1657
01:19:31,040 --> 01:19:34,159
case

1658
01:19:31,679 --> 01:19:36,800
for the complete label stack only one

1659
01:19:34,159 --> 01:19:38,879
nail effect is sent

1660
01:19:36,800 --> 01:19:40,719
because uh sending a multiple meal

1661
01:19:38,880 --> 01:19:41,760
effect doesn't make any sense and uh

1662
01:19:40,719 --> 01:19:45,040
neil feck

1663
01:19:41,760 --> 01:19:46,000
does provide to give the uh it can send

1664
01:19:45,040 --> 01:19:49,280
for the one

1665
01:19:46,000 --> 01:19:53,360
label and it can send for the multiple

1666
01:19:49,280 --> 01:19:57,120
labels as per the same rfc8029

1667
01:19:53,360 --> 01:19:58,960
so that is uh one the answer to

1668
01:19:57,120 --> 01:20:00,880
so my question is there are the number

1669
01:19:58,960 --> 01:20:04,159
of labels and the number of effects

1670
01:20:00,880 --> 01:20:08,239
should match so now

1671
01:20:04,159 --> 01:20:11,679
use the nil tlv uh nilfex up tlv

1672
01:20:08,239 --> 01:20:13,519
uh that uh requirement is not uh

1673
01:20:11,679 --> 01:20:15,199
how it need to be followed as per the

1674
01:20:13,520 --> 01:20:18,639
rfc

1675
01:20:15,199 --> 01:20:20,320
you can i think unless you change their

1676
01:20:18,639 --> 01:20:21,280
like i've seen like a fake validation

1677
01:20:20,320 --> 01:20:23,679
procedure

1678
01:20:21,280 --> 01:20:24,719
so there's no way to like map one label

1679
01:20:23,679 --> 01:20:28,320
to two sub

1680
01:20:24,719 --> 01:20:30,719
effect here no uh the thing is uh

1681
01:20:28,320 --> 01:20:33,040
once uh the outer label outermost fake

1682
01:20:30,719 --> 01:20:33,040
stack

1683
01:20:35,199 --> 01:20:41,519
you avoid the uh the router

1684
01:20:38,800 --> 01:20:43,679
doesn't go for the validation it just

1685
01:20:41,520 --> 01:20:47,840
skipped the fake stack validation

1686
01:20:43,679 --> 01:20:47,840
so there is no

1687
01:20:48,400 --> 01:20:51,679
i don't think you get my point i think

1688
01:20:50,000 --> 01:20:53,920
like you hear you mentioned like

1689
01:20:51,679 --> 01:20:56,159
the procedure only works for ping if you

1690
01:20:53,920 --> 01:20:57,280
have chris road so the rfc defend you

1691
01:20:56,159 --> 01:21:00,000
have to

1692
01:20:57,280 --> 01:21:01,199
have the full fat stack corresponding to

1693
01:21:00,000 --> 01:21:04,400
the full lego stack

1694
01:21:01,199 --> 01:21:07,120
i can uh point you to the section

1695
01:21:04,400 --> 01:21:08,879
which tells that it does not so there is

1696
01:21:07,120 --> 01:21:12,559
a section on the

1697
01:21:08,880 --> 01:21:15,600
rfc 80294.4.1

1698
01:21:12,560 --> 01:21:18,880
like start validation effect validation

1699
01:21:15,600 --> 01:21:20,719
where it tells clearly if the outermost

1700
01:21:18,880 --> 01:21:23,440
effect of the target fake stack

1701
01:21:20,719 --> 01:21:24,159
is the knee effect then the note must

1702
01:21:23,440 --> 01:21:27,199
keep the

1703
01:21:24,159 --> 01:21:28,480
target fake validation completely okay

1704
01:21:27,199 --> 01:21:30,960
it's good at this time to

1705
01:21:28,480 --> 01:21:32,638
take this discussion uh on the mailing

1706
01:21:30,960 --> 01:21:34,480
list

1707
01:21:32,639 --> 01:21:35,760
on the mailing list provide the

1708
01:21:34,480 --> 01:21:38,239
reference

1709
01:21:35,760 --> 01:21:40,480
deepti uh so that we can follow up on

1710
01:21:38,239 --> 01:21:40,480
that

1711
01:21:40,719 --> 01:21:46,880
zafar you're up next

1712
01:21:44,159 --> 01:21:47,360
so uh thanks i have a similar question

1713
01:21:46,880 --> 01:21:51,120
uh

1714
01:21:47,360 --> 01:21:53,040
like uh jay has uh said so but i'll

1715
01:21:51,120 --> 01:21:55,440
come to the rest of the question that i

1716
01:21:53,040 --> 01:21:58,719
had which is not covered

1717
01:21:55,440 --> 01:22:01,040
so basically um

1718
01:21:58,719 --> 01:22:02,080
there was some discussion in the context

1719
01:22:01,040 --> 01:22:06,000
of the generic

1720
01:22:02,080 --> 01:22:07,679
uh effect tlv um

1721
01:22:06,000 --> 01:22:10,000
and and then one of the one of the thing

1722
01:22:07,679 --> 01:22:12,159
that came out of that discussion was we

1723
01:22:10,000 --> 01:22:13,520
extend the nil fact uh with uh we're

1724
01:22:12,159 --> 01:22:16,719
discussing with shredder

1725
01:22:13,520 --> 01:22:20,000
so we had discussed this in past uh some

1726
01:22:16,719 --> 01:22:22,800
uh and and then i i think what

1727
01:22:20,000 --> 01:22:23,520
in the genetic fact uh draft what we try

1728
01:22:22,800 --> 01:22:26,639
to do is we

1729
01:22:23,520 --> 01:22:29,360
also try to address the agency state

1730
01:22:26,639 --> 01:22:30,159
the peer node peer sets it and flex i'll

1731
01:22:29,360 --> 01:22:32,719
go

1732
01:22:30,159 --> 01:22:33,440
uh what would be good is to have that

1733
01:22:32,719 --> 01:22:36,400
discussion

1734
01:22:33,440 --> 01:22:38,960
a bit more uh we did with the draft

1735
01:22:36,400 --> 01:22:38,960
authors

1736
01:22:39,040 --> 01:22:45,760
so in the context of the sr generic

1737
01:22:42,080 --> 01:22:48,320
labels of tlb there is a lot of synergy

1738
01:22:45,760 --> 01:22:48,960
between the two drafts they address the

1739
01:22:48,320 --> 01:22:51,280
goals

1740
01:22:48,960 --> 01:22:53,120
are similar we have been talking as well

1741
01:22:51,280 --> 01:22:55,040
uh quite a bit on this and we did

1742
01:22:53,120 --> 01:22:55,920
discuss this as well the new use of just

1743
01:22:55,040 --> 01:22:57,840
mailbag

1744
01:22:55,920 --> 01:23:00,400
and extender for egress validation it'd

1745
01:22:57,840 --> 01:23:03,760
be good to have that discussion

1746
01:23:00,400 --> 01:23:06,159
sure i'll uh i will be like uh

1747
01:23:03,760 --> 01:23:07,040
uh go for it like we can have a

1748
01:23:06,159 --> 01:23:09,519
discussion

1749
01:23:07,040 --> 01:23:11,760
maybe uh on the mailing list or have a

1750
01:23:09,520 --> 01:23:16,000
call later

1751
01:23:11,760 --> 01:23:20,880
sure yeah thanks your friends

1752
01:23:16,000 --> 01:23:24,320
thanks just to answer to zafar's

1753
01:23:20,880 --> 01:23:27,199
question so um the little fake

1754
01:23:24,320 --> 01:23:29,599
um the idea is to you know have a

1755
01:23:27,199 --> 01:23:32,480
generic way of

1756
01:23:29,600 --> 01:23:34,159
being able to traverse the data path

1757
01:23:32,480 --> 01:23:36,799
without having to validate

1758
01:23:34,159 --> 01:23:38,719
um the the actual synchronization

1759
01:23:36,800 --> 01:23:42,000
between control plane and

1760
01:23:38,719 --> 01:23:42,480
uh data plane so if you if you think of

1761
01:23:42,000 --> 01:23:45,600
uh

1762
01:23:42,480 --> 01:23:46,400
validation in in a at a scale of one to

1763
01:23:45,600 --> 01:23:50,000
five

1764
01:23:46,400 --> 01:23:50,719
the actual validation um definition of

1765
01:23:50,000 --> 01:23:54,000
feck

1766
01:23:50,719 --> 01:23:54,719
for each uh of the sits and validation

1767
01:23:54,000 --> 01:23:57,840
of that

1768
01:23:54,719 --> 01:24:00,719
um stands at five

1769
01:23:57,840 --> 01:24:02,000
the validation level and uh the nilfek

1770
01:24:00,719 --> 01:24:04,800
based

1771
01:24:02,000 --> 01:24:06,719
validation um stands at one because it's

1772
01:24:04,800 --> 01:24:07,679
not really doing any kind of validation

1773
01:24:06,719 --> 01:24:11,120
and i think

1774
01:24:07,679 --> 01:24:11,120
the generic sid

1775
01:24:11,679 --> 01:24:15,920
mechanism that you're proposing stands

1776
01:24:14,000 --> 01:24:20,400
somewhere at 2.5 uh

1777
01:24:15,920 --> 01:24:22,480
and yeah you can have discussion and uh

1778
01:24:20,400 --> 01:24:23,759
yeah yeah that except there is some

1779
01:24:22,480 --> 01:24:26,879
validation that

1780
01:24:23,760 --> 01:24:29,679
is done not not much but and

1781
01:24:26,880 --> 01:24:30,560
given this my feedback is as i mentioned

1782
01:24:29,679 --> 01:24:32,639
in the beginning is

1783
01:24:30,560 --> 01:24:34,080
uh for the office of the two drafts to

1784
01:24:32,639 --> 01:24:37,360
get together and

1785
01:24:34,080 --> 01:24:37,760
uh it's possibly that we end up with an

1786
01:24:37,360 --> 01:24:41,040
ill

1787
01:24:37,760 --> 01:24:41,679
fec extension um you know going through

1788
01:24:41,040 --> 01:24:44,080
as well

1789
01:24:41,679 --> 01:24:44,960
as charla said it is the data plane

1790
01:24:44,080 --> 01:24:47,920
validation

1791
01:24:44,960 --> 01:24:51,280
at the end point yeah i think yes you

1792
01:24:47,920 --> 01:24:54,719
need we did discuss this option in uh

1793
01:24:51,280 --> 01:24:58,080
earlier thanks okay

1794
01:24:54,719 --> 01:25:00,320
thank you all right i don't see anyone

1795
01:24:58,080 --> 01:25:03,519
in the queue so i'll move on to the next

1796
01:25:00,320 --> 01:25:07,040
uh the next uh slot

1797
01:25:03,520 --> 01:25:10,320
is there's nagendra go ahead

1798
01:25:07,040 --> 01:25:12,480
yeah um thank you uh hi i'm nagendra

1799
01:25:10,320 --> 01:25:13,679
from cisco i'll be presenting this draft

1800
01:25:12,480 --> 01:25:17,599
on behalf of my

1801
01:25:13,679 --> 01:25:17,600
co-authors next flight

1802
01:25:19,920 --> 01:25:23,520
yeah so the basic motivation behind this

1803
01:25:22,320 --> 01:25:25,440
draft i think i know

1804
01:25:23,520 --> 01:25:28,400
uh we um we discussed this at least a

1805
01:25:25,440 --> 01:25:31,678
couple of times in the previous um

1806
01:25:28,400 --> 01:25:34,239
slides or presentations so um

1807
01:25:31,679 --> 01:25:35,360
uh with segment routing we are seeing

1808
01:25:34,239 --> 01:25:37,678
different types of

1809
01:25:35,360 --> 01:25:39,280
you know segment ids being proposed but

1810
01:25:37,679 --> 01:25:40,719
different forwarding semantics

1811
01:25:39,280 --> 01:25:44,880
associated to that

1812
01:25:40,719 --> 01:25:47,679
so um uh based on rfc 1829

1813
01:25:44,880 --> 01:25:48,480
we we go with a one-on-one kind of

1814
01:25:47,679 --> 01:25:51,440
mapping for

1815
01:25:48,480 --> 01:25:53,280
uh for each segment id or effect will

1816
01:25:51,440 --> 01:25:56,000
have a new targeted

1817
01:25:53,280 --> 01:25:57,120
target fcc stack sub pl be defined which

1818
01:25:56,000 --> 01:25:59,360
basically is used

1819
01:25:57,120 --> 01:26:01,199
to validate the particular graphic in

1820
01:25:59,360 --> 01:26:03,040
this case you know the segment id

1821
01:26:01,199 --> 01:26:05,678
so this basically requires you know

1822
01:26:03,040 --> 01:26:07,840
defining new target fec stack

1823
01:26:05,679 --> 01:26:09,760
sub plp for each of the segment id and

1824
01:26:07,840 --> 01:26:10,159
work on standardizing so you know a lot

1825
01:26:09,760 --> 01:26:12,320
of

1826
01:26:10,159 --> 01:26:13,280
efforts involved in defining and

1827
01:26:12,320 --> 01:26:15,599
standardizing

1828
01:26:13,280 --> 01:26:17,440
and it also requires either domain void

1829
01:26:15,600 --> 01:26:18,080
or node wide upgrade software upgraded

1830
01:26:17,440 --> 01:26:19,440
so that the

1831
01:26:18,080 --> 01:26:21,199
ingress can include the relevant

1832
01:26:19,440 --> 01:26:22,719
information that is required to be

1833
01:26:21,199 --> 01:26:26,080
included as part of the

1834
01:26:22,719 --> 01:26:28,400
uh the targeted fcc stack and uh the

1835
01:26:26,080 --> 01:26:29,679
responder can i know interpret those

1836
01:26:28,400 --> 01:26:31,679
information and then

1837
01:26:29,679 --> 01:26:33,199
send a positive negative response based

1838
01:26:31,679 --> 01:26:35,600
on the validation so this basically

1839
01:26:33,199 --> 01:26:38,638
raises scalability challenges

1840
01:26:35,600 --> 01:26:38,639
um next life

1841
01:26:41,440 --> 01:26:44,559
so this is a partial list of some of the

1842
01:26:44,000 --> 01:26:47,760
uh

1843
01:26:44,560 --> 01:26:49,440
you know srfx we took a stab writing you

1844
01:26:47,760 --> 01:26:50,000
know different drafts addressing or

1845
01:26:49,440 --> 01:26:52,000
defining

1846
01:26:50,000 --> 01:26:53,440
a different target deficiency stack for

1847
01:26:52,000 --> 01:26:56,400
each of these assets

1848
01:26:53,440 --> 01:26:56,879
and we started realizing that you know

1849
01:26:56,400 --> 01:26:59,360
with the

1850
01:26:56,880 --> 01:27:01,600
plethora of segment id is being proposed

1851
01:26:59,360 --> 01:27:04,320
uh it may not be scalable to uh you know

1852
01:27:01,600 --> 01:27:06,960
introduce new target fec stack and

1853
01:27:04,320 --> 01:27:08,080
you know have a always on uh

1854
01:27:06,960 --> 01:27:10,719
implementation of

1855
01:27:08,080 --> 01:27:11,679
oem so uh that's why you know we took

1856
01:27:10,719 --> 01:27:14,960
one step back

1857
01:27:11,679 --> 01:27:17,280
and started looking into other ways to

1858
01:27:14,960 --> 01:27:19,760
see if we can solve this problem

1859
01:27:17,280 --> 01:27:19,759
next time

1860
01:27:21,840 --> 01:27:26,080
so uh it's not only about uh you know

1861
01:27:23,760 --> 01:27:26,639
standardization efforts uh required to

1862
01:27:26,080 --> 01:27:28,639
define

1863
01:27:26,639 --> 01:27:29,840
and uh you know implement these new uh

1864
01:27:28,639 --> 01:27:32,560
target deficiency

1865
01:27:29,840 --> 01:27:34,560
but uh depending on the uh the volume of

1866
01:27:32,560 --> 01:27:36,960
information that needs to be carried

1867
01:27:34,560 --> 01:27:37,920
so that the responder can validate we

1868
01:27:36,960 --> 01:27:39,760
basically need

1869
01:27:37,920 --> 01:27:41,440
a lot of information that may or may not

1870
01:27:39,760 --> 01:27:43,199
be available in the initiator for

1871
01:27:41,440 --> 01:27:45,280
example the initiative in it

1872
01:27:43,199 --> 01:27:46,480
originate the oem probe we need to

1873
01:27:45,280 --> 01:27:48,639
include different types of

1874
01:27:46,480 --> 01:27:50,638
information that uh you know that

1875
01:27:48,639 --> 01:27:51,440
sometimes uh even the initiator may not

1876
01:27:50,639 --> 01:27:53,120
be aware of

1877
01:27:51,440 --> 01:27:54,719
and the same goes through with the

1878
01:27:53,120 --> 01:27:56,320
responder where the responder

1879
01:27:54,719 --> 01:27:58,159
need to understand all this information

1880
01:27:56,320 --> 01:28:00,880
included in the uh you know target

1881
01:27:58,159 --> 01:28:02,960
deficiency stacks of tlb so that it can

1882
01:28:00,880 --> 01:28:04,159
validate perform the relevant validation

1883
01:28:02,960 --> 01:28:09,440
and respond back with

1884
01:28:04,159 --> 01:28:09,440
the the right response next line

1885
01:28:11,920 --> 01:28:16,400
so we took a step of solving this

1886
01:28:13,920 --> 01:28:19,600
problem by uh you know defining

1887
01:28:16,400 --> 01:28:21,519
a very basic um uh segment id which

1888
01:28:19,600 --> 01:28:23,280
uh or a very basic um targeted

1889
01:28:21,520 --> 01:28:24,080
deficiencies like sub plb that only

1890
01:28:23,280 --> 01:28:25,920
carries

1891
01:28:24,080 --> 01:28:27,360
the segment id that needs to be

1892
01:28:25,920 --> 01:28:29,040
validated so

1893
01:28:27,360 --> 01:28:30,559
from the effect validation procedures

1894
01:28:29,040 --> 01:28:31,920
point of view it basically does two

1895
01:28:30,560 --> 01:28:34,320
things one is

1896
01:28:31,920 --> 01:28:34,960
uh is this probe terminating on the

1897
01:28:34,320 --> 01:28:37,040
right uh

1898
01:28:34,960 --> 01:28:38,480
end point uh in other words the

1899
01:28:37,040 --> 01:28:40,080
responder when it receives the probe

1900
01:28:38,480 --> 01:28:41,360
will check two things one is like you

1901
01:28:40,080 --> 01:28:44,639
know i might be a

1902
01:28:41,360 --> 01:28:47,040
lsp endpoint for the segment id and two

1903
01:28:44,639 --> 01:28:49,360
did i receive it did i receive this

1904
01:28:47,040 --> 01:28:52,000
probe on the right incoming interface

1905
01:28:49,360 --> 01:28:53,759
so uh by simply using these two uh

1906
01:28:52,000 --> 01:28:54,480
validation you are able to validate

1907
01:28:53,760 --> 01:28:57,600
quite a few

1908
01:28:54,480 --> 01:28:59,759
segment ids next slide

1909
01:28:57,600 --> 01:29:01,199
uh nagendra since this is uh what was

1910
01:28:59,760 --> 01:29:05,440
presented before

1911
01:29:01,199 --> 01:29:07,919
if you can make it quicker yeah sure

1912
01:29:05,440 --> 01:29:08,719
yeah you had five minutes on the agenda

1913
01:29:07,920 --> 01:29:11,280
okay

1914
01:29:08,719 --> 01:29:12,159
so this is the uh subtly lv that we

1915
01:29:11,280 --> 01:29:14,719
defined uh

1916
01:29:12,159 --> 01:29:16,159
as you can see we just you know carry

1917
01:29:14,719 --> 01:29:18,560
only the 20-bit uh

1918
01:29:16,159 --> 01:29:20,159
segment id that needs to be validated

1919
01:29:18,560 --> 01:29:24,159
next slide

1920
01:29:20,159 --> 01:29:26,000
sure so uh this is an example of

1921
01:29:24,159 --> 01:29:27,679
uh how the prefix set can be validated

1922
01:29:26,000 --> 01:29:29,520
so we included an example where

1923
01:29:27,679 --> 01:29:31,760
we have both you know default algorithm

1924
01:29:29,520 --> 01:29:32,880
and also a flexible algorithm or plex

1925
01:29:31,760 --> 01:29:36,560
algo128

1926
01:29:32,880 --> 01:29:37,120
so 16008 is the uh prefix set for algoz

1927
01:29:36,560 --> 01:29:40,239
zero for

1928
01:29:37,120 --> 01:29:42,159
node eight and 16 128 eight for uh you

1929
01:29:40,239 --> 01:29:44,239
know algo128 for node eight

1930
01:29:42,159 --> 01:29:46,080
so when node one wants to validate uh

1931
01:29:44,239 --> 01:29:46,718
any of these prefix all it needs to do

1932
01:29:46,080 --> 01:29:49,280
is

1933
01:29:46,719 --> 01:29:50,719
include the relevant set in the um uh as

1934
01:29:49,280 --> 01:29:53,519
the sub plb

1935
01:29:50,719 --> 01:29:54,320
and send the pro when node 8 receive it

1936
01:29:53,520 --> 01:29:55,440
like i said you know it will be

1937
01:29:54,320 --> 01:29:58,400
performing two

1938
01:29:55,440 --> 01:29:59,919
uh validations one is am i the uh lsp

1939
01:29:58,400 --> 01:30:02,000
endpoint for this uh you know

1940
01:29:59,920 --> 01:30:03,280
uh and did i receive it on the right

1941
01:30:02,000 --> 01:30:05,920
incoming interface

1942
01:30:03,280 --> 01:30:07,920
so uh using these two we were able to uh

1943
01:30:05,920 --> 01:30:10,639
you know identify not just the uh

1944
01:30:07,920 --> 01:30:12,320
the default but also any flex i'll go um

1945
01:30:10,639 --> 01:30:16,560
you know uh since prefix

1946
01:30:12,320 --> 01:30:16,559
can be validated next slide

1947
01:30:17,360 --> 01:30:20,880
so this is an example of parallel set

1948
01:30:19,679 --> 01:30:23,600
from note 7

1949
01:30:20,880 --> 01:30:25,199
we have 9378 which is a parallel

1950
01:30:23,600 --> 01:30:26,880
adjacency set that could be load balance

1951
01:30:25,199 --> 01:30:27,440
between link one or link two to node

1952
01:30:26,880 --> 01:30:29,280
eight

1953
01:30:27,440 --> 01:30:31,599
again uh you know if one want to

1954
01:30:29,280 --> 01:30:33,199
validate 9378

1955
01:30:31,600 --> 01:30:35,760
which is the adjacency parallel

1956
01:30:33,199 --> 01:30:37,040
adjacency said it simply include 9378

1957
01:30:35,760 --> 01:30:39,440
and send the probe

1958
01:30:37,040 --> 01:30:40,320
node 8 when it receives it checks if it

1959
01:30:39,440 --> 01:30:42,320
is the lsp

1960
01:30:40,320 --> 01:30:43,759
endpoint and did i receive it on the

1961
01:30:42,320 --> 01:30:46,719
right incoming interface

1962
01:30:43,760 --> 01:30:47,199
so the uh the incoming interface mapping

1963
01:30:46,719 --> 01:30:48,719
we

1964
01:30:47,199 --> 01:30:50,638
we do have a slide that will be

1965
01:30:48,719 --> 01:30:52,159
explaining about that uh but these are

1966
01:30:50,639 --> 01:30:53,440
the two basic uh you know validation

1967
01:30:52,159 --> 01:30:57,519
that will be done by the uh

1968
01:30:53,440 --> 01:31:02,080
uh egress next slide

1969
01:30:57,520 --> 01:31:04,400
yeah i think we can skip this next slide

1970
01:31:02,080 --> 01:31:06,320
okay so uh in order to perform this

1971
01:31:04,400 --> 01:31:07,920
interface uh validation um

1972
01:31:06,320 --> 01:31:10,480
did i receive it on the right incoming

1973
01:31:07,920 --> 01:31:11,600
interface we basically follow a simple

1974
01:31:10,480 --> 01:31:14,879
mechanism where

1975
01:31:11,600 --> 01:31:16,320
each node will maintain all the local

1976
01:31:14,880 --> 01:31:18,159
you know segment ids like the prefix

1977
01:31:16,320 --> 01:31:19,519
segment with all the in incoming

1978
01:31:18,159 --> 01:31:21,920
interface as any

1979
01:31:19,520 --> 01:31:24,159
and it also includes the adjacency

1980
01:31:21,920 --> 01:31:26,000
segment ids assigned by the directly

1981
01:31:24,159 --> 01:31:29,120
connected uh next ops

1982
01:31:26,000 --> 01:31:30,800
to itself for example from node 8 point

1983
01:31:29,120 --> 01:31:32,400
of view it will include sixteen zero

1984
01:31:30,800 --> 01:31:34,159
zero zero eight and sixteen one twenty

1985
01:31:32,400 --> 01:31:34,719
eight eight which are the prefix set for

1986
01:31:34,159 --> 01:31:37,519
uh

1987
01:31:34,719 --> 01:31:38,320
default algorithm and flex algorithm uh

1988
01:31:37,520 --> 01:31:40,560
128

1989
01:31:38,320 --> 01:31:42,000
and it also includes all the adjacency

1990
01:31:40,560 --> 01:31:45,120
set assigned only by

1991
01:31:42,000 --> 01:31:49,040
node seven for node 8. uh

1992
01:31:45,120 --> 01:31:50,960
9178 93789 9278 or the adjacency

1993
01:31:49,040 --> 01:31:52,159
designed by seven for eight so these are

1994
01:31:50,960 --> 01:31:55,199
the information that will be

1995
01:31:52,159 --> 01:31:56,960
included in no dates uh table but the

1996
01:31:55,199 --> 01:31:58,000
relevant incoming interface for example

1997
01:31:56,960 --> 01:31:59,520
9178

1998
01:31:58,000 --> 01:32:02,159
will be marked with the incoming

1999
01:31:59,520 --> 01:32:04,320
interface of link 1 and 9278 with the

2000
01:32:02,159 --> 01:32:05,519
incoming interface of link 2. so using

2001
01:32:04,320 --> 01:32:08,000
this database

2002
01:32:05,520 --> 01:32:09,840
any node can when it receives the probe

2003
01:32:08,000 --> 01:32:12,400
will be able to validate if

2004
01:32:09,840 --> 01:32:13,040
you know it's the end point for that

2005
01:32:12,400 --> 01:32:15,679
particular

2006
01:32:13,040 --> 01:32:17,840
uh uh sig and if it received the probe

2007
01:32:15,679 --> 01:32:20,320
on the right incoming interface

2008
01:32:17,840 --> 01:32:20,320
next slide

2009
01:32:21,679 --> 01:32:26,080
yeah so uh in a nutshell we are defining

2010
01:32:23,920 --> 01:32:28,400
one uh targeted fcc stack

2011
01:32:26,080 --> 01:32:30,320
that is capable of you know validating

2012
01:32:28,400 --> 01:32:33,280
multiple uh segment ids

2013
01:32:30,320 --> 01:32:34,960
uh so this uh drastically reduce the uh

2014
01:32:33,280 --> 01:32:36,400
you know i mean uh the standardization

2015
01:32:34,960 --> 01:32:38,480
effort that are required

2016
01:32:36,400 --> 01:32:40,000
and also drastically reduce the volume

2017
01:32:38,480 --> 01:32:43,120
of information that is required

2018
01:32:40,000 --> 01:32:45,520
to be you know inserted by the initiator

2019
01:32:43,120 --> 01:32:47,280
and the details that needs to be

2020
01:32:45,520 --> 01:32:49,520
validated by the responder

2021
01:32:47,280 --> 01:32:50,719
so it is also extendable to accommodate

2022
01:32:49,520 --> 01:32:54,000
you know any new or

2023
01:32:50,719 --> 01:32:56,320
future segment ids

2024
01:32:54,000 --> 01:32:58,800
um so from the iana point of view we are

2025
01:32:56,320 --> 01:33:01,599
requesting uh you know uh once up tlb

2026
01:32:58,800 --> 01:33:03,760
from tlb type one sixteen and twenty one

2027
01:33:01,600 --> 01:33:05,600
uh we are not introducing any new uh

2028
01:33:03,760 --> 01:33:07,600
uh written codes or return suppose we

2029
01:33:05,600 --> 01:33:08,000
are actually uh reusing the existing

2030
01:33:07,600 --> 01:33:09,280
cell

2031
01:33:08,000 --> 01:33:11,600
return code and subcode which are

2032
01:33:09,280 --> 01:33:16,000
defined in 1829 and e287

2033
01:33:11,600 --> 01:33:17,679
next slide yeah so uh like uh tarek was

2034
01:33:16,000 --> 01:33:18,880
mentioning i know we uh we presented

2035
01:33:17,679 --> 01:33:22,000
this draft uh in the

2036
01:33:18,880 --> 01:33:25,520
in the past uh in other idf uh so

2037
01:33:22,000 --> 01:33:29,360
we welcome any uh you know comments and

2038
01:33:25,520 --> 01:33:31,760
we also request for workgroup adoption

2039
01:33:29,360 --> 01:33:34,239
thank you nagendra uh anyone in the

2040
01:33:31,760 --> 01:33:39,199
queue nick

2041
01:33:34,239 --> 01:33:39,199
yes greg yes first right

2042
01:33:40,159 --> 01:33:44,080
um so if i understood correctly so you

2043
01:33:42,960 --> 01:33:49,520
mentioned that

2044
01:33:44,080 --> 01:33:49,519
uh each segment

2045
01:33:49,679 --> 01:33:53,280
each node supporting segment routing

2046
01:33:52,400 --> 01:33:55,920
must now

2047
01:33:53,280 --> 01:33:58,239
add the information about the adjacency

2048
01:33:55,920 --> 01:34:02,000
sids

2049
01:33:58,239 --> 01:34:06,000
and its immediate neighbors right

2050
01:34:02,000 --> 01:34:06,880
so that does look like a hell of a lot

2051
01:34:06,000 --> 01:34:09,679
of information

2052
01:34:06,880 --> 01:34:12,480
additionally has to be stored within the

2053
01:34:09,679 --> 01:34:12,480
sr domain

2054
01:34:12,719 --> 01:34:17,440
so like i said it's not required to

2055
01:34:15,520 --> 01:34:19,679
maintain all the adjacency segment id

2056
01:34:17,440 --> 01:34:20,960
assigned by all the nodes it's only the

2057
01:34:19,679 --> 01:34:23,040
adjacency segment id

2058
01:34:20,960 --> 01:34:24,800
assigned by the directly connected node

2059
01:34:23,040 --> 01:34:28,400
for uh itself so uh

2060
01:34:24,800 --> 01:34:33,040
that's uh i can imagine that will be

2061
01:34:28,400 --> 01:34:35,040
uh thousands of immediate neighbors

2062
01:34:33,040 --> 01:34:37,040
yeah so you anyway have all those

2063
01:34:35,040 --> 01:34:37,519
information in the uh database uh in

2064
01:34:37,040 --> 01:34:40,159
your

2065
01:34:37,520 --> 01:34:41,040
igp database so it's either a matter of

2066
01:34:40,159 --> 01:34:44,839
having it in

2067
01:34:41,040 --> 01:34:46,000
another database or just reuse the

2068
01:34:44,840 --> 01:34:49,360
existing

2069
01:34:46,000 --> 01:34:52,719
yeah but that probably needs to be

2070
01:34:49,360 --> 01:34:56,480
really uh clearly stated because

2071
01:34:52,719 --> 01:34:59,360
um it's a trade-off so basically

2072
01:34:56,480 --> 01:35:00,879
it's not clear benefits their price to

2073
01:34:59,360 --> 01:35:02,880
be paid

2074
01:35:00,880 --> 01:35:04,320
yeah so uh so this is more of an

2075
01:35:02,880 --> 01:35:06,400
implementation matter

2076
01:35:04,320 --> 01:35:08,000
we are not suggesting uh this is one of

2077
01:35:06,400 --> 01:35:09,040
the best practices that you could use to

2078
01:35:08,000 --> 01:35:12,639
have it as a

2079
01:35:09,040 --> 01:35:14,880
you know separate table but this is

2080
01:35:12,639 --> 01:35:16,960
not a mandatory table that you you're

2081
01:35:14,880 --> 01:35:18,239
required to have so uh if you think you

2082
01:35:16,960 --> 01:35:20,960
know that's going to be a

2083
01:35:18,239 --> 01:35:21,280
overload um the solution still can rely

2084
01:35:20,960 --> 01:35:23,280
on

2085
01:35:21,280 --> 01:35:25,360
igp database to fetch that information

2086
01:35:23,280 --> 01:35:27,280
so

2087
01:35:25,360 --> 01:35:29,040
okay i don't want to speculate about the

2088
01:35:27,280 --> 01:35:33,920
implementation but

2089
01:35:29,040 --> 01:35:33,920
definitely something to be added to this

2090
01:35:34,560 --> 01:35:45,600
issue would be helpful

2091
01:35:39,679 --> 01:35:45,600
okay if you can make it quick please

2092
01:35:48,000 --> 01:35:52,080
quick question for the trfv case if the

2093
01:35:50,639 --> 01:35:54,639
packet

2094
01:35:52,080 --> 01:35:55,440
goes like a protected part so the packet

2095
01:35:54,639 --> 01:35:57,760
comes from

2096
01:35:55,440 --> 01:36:00,719
a different interface shall we feel the

2097
01:35:57,760 --> 01:36:00,719
egress validation

2098
01:36:01,679 --> 01:36:04,000
um

2099
01:36:04,800 --> 01:36:12,560
good question so uh

2100
01:36:08,000 --> 01:36:15,679
if the if it is an adjacency sid and

2101
01:36:12,560 --> 01:36:18,080
if the uh link failed and if it is

2102
01:36:15,679 --> 01:36:20,000
steered over the backup path okay we

2103
01:36:18,080 --> 01:36:22,080
haven't thought about this

2104
01:36:20,000 --> 01:36:23,360
uh i don't think we included anything

2105
01:36:22,080 --> 01:36:25,280
around this uh

2106
01:36:23,360 --> 01:36:27,040
we can think about this and we can add

2107
01:36:25,280 --> 01:36:30,320
something in the draft

2108
01:36:27,040 --> 01:36:32,400
okay thank you all right

2109
01:36:30,320 --> 01:36:35,840
anyone else in the queue i guess not

2110
01:36:32,400 --> 01:36:35,839
i'll move on to the next

2111
01:36:37,520 --> 01:36:43,679
okay next we have uh either yao or greg

2112
01:36:45,119 --> 01:36:50,159
mpls based service function path

2113
01:36:47,679 --> 01:36:54,239
consistency verification

2114
01:36:50,159 --> 01:36:58,000
hello can you hear me yes

2115
01:36:54,239 --> 01:37:02,320
okay hi i'm yolo from

2116
01:36:58,000 --> 01:37:04,400
zt my presentation is about mpl space

2117
01:37:02,320 --> 01:37:06,320
so this function pass consistent

2118
01:37:04,400 --> 01:37:09,119
consistency verification

2119
01:37:06,320 --> 01:37:09,119
next slide please

2120
01:37:11,280 --> 01:37:15,040
oh amperes can be used to realize

2121
01:37:13,679 --> 01:37:17,199
service function paths

2122
01:37:15,040 --> 01:37:19,199
so far there are two methods one is

2123
01:37:17,199 --> 01:37:20,638
based on where service programming where

2124
01:37:19,199 --> 01:37:23,599
each service function

2125
01:37:20,639 --> 01:37:26,320
is related with an mps label another is

2126
01:37:23,600 --> 01:37:29,040
defining ifc8595

2127
01:37:26,320 --> 01:37:31,199
and and ps label step is used to carry

2128
01:37:29,040 --> 01:37:32,000
the logical presentation or congrats

2129
01:37:31,199 --> 01:37:35,678
edge

2130
01:37:32,000 --> 01:37:38,560
and the basic unit

2131
01:37:35,679 --> 01:37:40,960
comprises two labels and one provides a

2132
01:37:38,560 --> 01:37:43,119
context within the sfc scope

2133
01:37:40,960 --> 01:37:45,920
and the other carries a label to show

2134
01:37:43,119 --> 01:37:50,080
which service function is truly enacted

2135
01:37:45,920 --> 01:37:51,280
and it is called sfc mps in this draft

2136
01:37:50,080 --> 01:37:54,239
for simple

2137
01:37:51,280 --> 01:37:56,159
this document uh defines extensions of

2138
01:37:54,239 --> 01:37:58,799
the mpl's health speaking

2139
01:37:56,159 --> 01:38:00,559
to support the revocation between the

2140
01:37:58,800 --> 01:38:03,760
control management plan

2141
01:38:00,560 --> 01:38:08,239
and the data translate for sfcsr

2142
01:38:03,760 --> 01:38:08,239
and sfcmps next like this

2143
01:38:09,920 --> 01:38:14,480
and this draft has been presented on

2144
01:38:12,000 --> 01:38:16,719
last intern meeting and get some helpful

2145
01:38:14,480 --> 01:38:18,400
suggestions from laura and here are

2146
01:38:16,719 --> 01:38:21,360
published instead

2147
01:38:18,400 --> 01:38:23,119
and the first pioneer sections of

2148
01:38:21,360 --> 01:38:26,559
consideration sections have been

2149
01:38:23,119 --> 01:38:29,199
added for newly defined tavs and

2150
01:38:26,560 --> 01:38:30,080
acronyms section and security

2151
01:38:29,199 --> 01:38:33,119
consideration

2152
01:38:30,080 --> 01:38:35,440
section has been added and the use of

2153
01:38:33,119 --> 01:38:37,040
the special process label in the active

2154
01:38:35,440 --> 01:38:40,080
oem mechanism

2155
01:38:37,040 --> 01:38:41,199
for sfc and ps is introduced in this

2156
01:38:40,080 --> 01:38:45,440
version

2157
01:38:41,199 --> 01:38:48,080
next slide please

2158
01:38:45,440 --> 01:38:50,320
uh the new tvs have been been introduced

2159
01:38:48,080 --> 01:38:53,440
last time so i'll go through it quickly

2160
01:38:50,320 --> 01:38:54,400
now first and sfc validation tier v is

2161
01:38:53,440 --> 01:38:56,879
defined

2162
01:38:54,400 --> 01:38:58,320
if an npo's echo request for reply

2163
01:38:56,880 --> 01:39:01,360
contains this tv

2164
01:38:58,320 --> 01:39:01,840
it is an sfc validation message this

2165
01:39:01,360 --> 01:39:05,040
deal

2166
01:39:01,840 --> 01:39:08,719
contains subjects only in reply message

2167
01:39:05,040 --> 01:39:12,400
two tovs are defined separately for sfc

2168
01:39:08,719 --> 01:39:13,280
sr and sfc and prs which is used to

2169
01:39:12,400 --> 01:39:15,839
carry the

2170
01:39:13,280 --> 01:39:17,360
sfp detailed information in the reply

2171
01:39:15,840 --> 01:39:20,320
message

2172
01:39:17,360 --> 01:39:20,320
and next slide please

2173
01:39:21,280 --> 01:39:26,239
and this page sfc basic unit flex sub tv

2174
01:39:24,800 --> 01:39:30,000
is defined only for

2175
01:39:26,239 --> 01:39:30,799
sfc and prs unlike standard mps

2176
01:39:30,000 --> 01:39:33,639
forwarding

2177
01:39:30,800 --> 01:39:34,960
which is based on a single label in

2178
01:39:33,639 --> 01:39:37,520
ifc8595

2179
01:39:34,960 --> 01:39:38,159
packet forwarding is based on the basic

2180
01:39:37,520 --> 01:39:40,800
unit

2181
01:39:38,159 --> 01:39:42,879
which is two labels so the new flat

2182
01:39:40,800 --> 01:39:44,560
suburb can be used to carry the

2183
01:39:42,880 --> 01:39:47,040
corresponding fact info

2184
01:39:44,560 --> 01:39:47,760
of the base of the unit the node that

2185
01:39:47,040 --> 01:39:50,719
receives an

2186
01:39:47,760 --> 01:39:51,119
lc pin with the new flex sub tree will

2187
01:39:50,719 --> 01:39:54,480
check

2188
01:39:51,119 --> 01:39:54,719
if it is hardy and whether it advertises

2189
01:39:54,480 --> 01:39:57,280
at

2190
01:39:54,719 --> 01:39:59,280
service function type and if the

2191
01:39:57,280 --> 01:40:02,239
validation is not passed

2192
01:39:59,280 --> 01:40:03,280
no generator and amperes have reply with

2193
01:40:02,239 --> 01:40:09,280
a narrow code

2194
01:40:03,280 --> 01:40:09,280
as defining a 29 and next slide this

2195
01:40:11,199 --> 01:40:14,799
and this slide introduces using special

2196
01:40:13,840 --> 01:40:18,000
purpose labels

2197
01:40:14,800 --> 01:40:20,639
in sfc and pos generally

2198
01:40:18,000 --> 01:40:22,800
the processing functions supported by

2199
01:40:20,639 --> 01:40:24,960
service functions are limited

2200
01:40:22,800 --> 01:40:26,480
service functions may not be capable of

2201
01:40:24,960 --> 01:40:29,760
processing the

2202
01:40:26,480 --> 01:40:31,440
sfp om payload and may drop the package

2203
01:40:29,760 --> 01:40:33,520
after receiving it

2204
01:40:31,440 --> 01:40:34,719
so and so this function for water need

2205
01:40:33,520 --> 01:40:39,119
to identify an

2206
01:40:34,719 --> 01:40:41,920
oem package with sfp scope

2207
01:40:39,119 --> 01:40:43,599
and we introduced the user and in

2208
01:40:41,920 --> 01:40:46,800
special purpose labor unit

2209
01:40:43,600 --> 01:40:48,000
in the basic unit of mps label stack for

2210
01:40:46,800 --> 01:40:50,400
sfc

2211
01:40:48,000 --> 01:40:51,679
it allows for global functional match

2212
01:40:50,400 --> 01:40:55,199
between unless edge

2213
01:40:51,679 --> 01:40:57,920
and sfc and pos more specially

2214
01:40:55,199 --> 01:41:00,000
we many discuss about the generic

2215
01:40:57,920 --> 01:41:05,840
associated channel label

2216
01:41:00,000 --> 01:41:08,880
next slide please

2217
01:41:05,840 --> 01:41:12,239
npr's generic associated channel is

2218
01:41:08,880 --> 01:41:15,199
introduced in ifc 5586

2219
01:41:12,239 --> 01:41:17,199
and oem and other control message can be

2220
01:41:15,199 --> 01:41:20,638
exchanged over it

2221
01:41:17,199 --> 01:41:21,839
the genetic gl is the generic associated

2222
01:41:20,639 --> 01:41:24,719
channel label

2223
01:41:21,840 --> 01:41:25,679
which is used to differentiate specific

2224
01:41:24,719 --> 01:41:29,119
packets

2225
01:41:25,679 --> 01:41:30,080
like gh packets from others in this

2226
01:41:29,119 --> 01:41:33,199
packet

2227
01:41:30,080 --> 01:41:36,239
the usage of the gl is expanded if the

2228
01:41:33,199 --> 01:41:37,040
gao immediately follows the sfc contact

2229
01:41:36,239 --> 01:41:40,320
symbol

2230
01:41:37,040 --> 01:41:41,199
the packet is recognized as an srp om

2231
01:41:40,320 --> 01:41:44,799
package

2232
01:41:41,199 --> 01:41:47,839
and below are the processing rules and

2233
01:41:44,800 --> 01:41:48,960
in so first and sf has must not pass the

2234
01:41:47,840 --> 01:41:51,679
on package

2235
01:41:48,960 --> 01:41:53,040
to local service function instance so as

2236
01:41:51,679 --> 01:41:56,000
fc proxy

2237
01:41:53,040 --> 01:41:56,880
and the next two rules i'll introduce

2238
01:41:56,000 --> 01:42:01,840
later so

2239
01:41:56,880 --> 01:42:01,840
the next one please

2240
01:42:02,480 --> 01:42:06,559
uh in the labor swiping mode there's

2241
01:42:04,560 --> 01:42:09,199
only one basic unit and

2242
01:42:06,560 --> 01:42:11,119
one gl in the package while in level

2243
01:42:09,199 --> 01:42:13,919
stacking mode or mixed mode

2244
01:42:11,119 --> 01:42:15,199
the dl may be presenting one more time

2245
01:42:13,920 --> 01:42:19,520
in one or more basic

2246
01:42:15,199 --> 01:42:24,480
units in an sfp packet bring an ss

2247
01:42:19,520 --> 01:42:28,080
sfc and ps packet uh next slide please

2248
01:42:24,480 --> 01:42:31,280
okay three more minutes please okay

2249
01:42:28,080 --> 01:42:33,360
and this is the last slide and this is a

2250
01:42:31,280 --> 01:42:35,599
package processing flow of the service

2251
01:42:33,360 --> 01:42:38,480
function for water as introduced before

2252
01:42:35,600 --> 01:42:40,159
if the sfc contacts label is followed by

2253
01:42:38,480 --> 01:42:43,360
a special purpose label

2254
01:42:40,159 --> 01:42:46,480
gl it is recognized and as a

2255
01:42:43,360 --> 01:42:48,960
sfp oam package then service function

2256
01:42:46,480 --> 01:42:50,000
for water will enter the spo processing

2257
01:42:48,960 --> 01:42:53,679
procedure

2258
01:42:50,000 --> 01:42:56,719
it decreases the ttl in sf label

2259
01:42:53,679 --> 01:42:57,520
and if the tto is not zero the om packet

2260
01:42:56,719 --> 01:43:00,560
is

2261
01:42:57,520 --> 01:43:02,719
processed as defining 85.95

2262
01:43:00,560 --> 01:43:04,400
sent to the next service function for

2263
01:43:02,719 --> 01:43:07,040
order if the tdl

2264
01:43:04,400 --> 01:43:08,799
is zero the own packet is sent to the

2265
01:43:07,040 --> 01:43:12,320
local control plan

2266
01:43:08,800 --> 01:43:14,080
if the om packet contains service sfc

2267
01:43:12,320 --> 01:43:15,840
validation trv

2268
01:43:14,080 --> 01:43:17,840
the service function for order will

2269
01:43:15,840 --> 01:43:21,199
generate and reply message

2270
01:43:17,840 --> 01:43:25,119
with the sfc info subtly included

2271
01:43:21,199 --> 01:43:26,239
if the basic unit flux backstab trv is

2272
01:43:25,119 --> 01:43:29,280
introduced

2273
01:43:26,239 --> 01:43:31,280
and the service function for order will

2274
01:43:29,280 --> 01:43:33,280
validate the package as i introduced

2275
01:43:31,280 --> 01:43:37,040
before and there's an

2276
01:43:33,280 --> 01:43:42,320
update of ic8595

2277
01:43:37,040 --> 01:43:45,360
and we in the in the query as well

2278
01:43:42,320 --> 01:43:47,119
in life c8595 it says if an

2279
01:43:45,360 --> 01:43:48,559
service function for order decrements

2280
01:43:47,119 --> 01:43:51,759
the ttl to zero

2281
01:43:48,560 --> 01:43:54,400
it must discard the packet and we just

2282
01:43:51,760 --> 01:43:55,840
expect this package to be sent to the

2283
01:43:54,400 --> 01:43:58,320
local control plan

2284
01:43:55,840 --> 01:43:59,600
conversation control to trace service

2285
01:43:58,320 --> 01:44:03,040
function path

2286
01:43:59,600 --> 01:44:04,080
and next slide and your feedbacks and

2287
01:44:03,040 --> 01:44:07,600
comments are welcome

2288
01:44:04,080 --> 01:44:12,239
and much it thanks

2289
01:44:07,600 --> 01:44:12,239
thank you uh anyone in the queue

2290
01:44:14,560 --> 01:44:22,880
no i see someone or is it

2291
01:44:18,159 --> 01:44:22,879
the presenter yeah oh it's me

2292
01:44:23,600 --> 01:44:31,600
all right okay thank you so much we

2293
01:44:27,119 --> 01:44:31,599
um all right i'll move on to the next

2294
01:44:32,840 --> 01:44:35,840
presenter

2295
01:44:36,239 --> 01:44:42,159
uh you have uh

2296
01:44:39,920 --> 01:44:42,159
wine

2297
01:44:43,679 --> 01:44:50,480
okay are you presenting as well

2298
01:44:47,360 --> 01:44:53,040
oh yeah i'm presenting this as well

2299
01:44:50,480 --> 01:44:54,320
oh okay okay okay please don't do it

2300
01:44:53,040 --> 01:44:56,800
quickly

2301
01:44:54,320 --> 01:44:57,679
okay okay i'm presenting the draft on

2302
01:44:56,800 --> 01:45:00,639
behalf of

2303
01:44:57,679 --> 01:45:03,199
the authors and this informational draft

2304
01:45:00,639 --> 01:45:06,159
illustrates the usage of past segments

2305
01:45:03,199 --> 01:45:07,360
in sr and peers and here's interworking

2306
01:45:06,159 --> 01:45:10,159
scenario

2307
01:45:07,360 --> 01:45:10,159
next slide please

2308
01:45:12,719 --> 01:45:17,199
the past segment is defined as a new

2309
01:45:14,719 --> 01:45:19,600
type of sediment and has been adopted

2310
01:45:17,199 --> 01:45:22,000
adopted in spring working group her

2311
01:45:19,600 --> 01:45:23,360
settlement is introduced for sr pass

2312
01:45:22,000 --> 01:45:25,199
identification

2313
01:45:23,360 --> 01:45:27,519
the past settlement will not be popped

2314
01:45:25,199 --> 01:45:28,799
off until it reaches the egress note of

2315
01:45:27,520 --> 01:45:31,760
the srpr

2316
01:45:28,800 --> 01:45:33,280
it can be used by the egress node for

2317
01:45:31,760 --> 01:45:35,760
performance measurement

2318
01:45:33,280 --> 01:45:36,559
bi-directional path correlation and

2319
01:45:35,760 --> 01:45:40,239
end-to-end

2320
01:45:36,560 --> 01:45:41,119
protection in sr and npr's interwoven

2321
01:45:40,239 --> 01:45:43,440
scenario

2322
01:45:41,119 --> 01:45:44,159
pass segments can also be used to

2323
01:45:43,440 --> 01:45:46,879
implement

2324
01:45:44,159 --> 01:45:48,559
these functions two scenarios are

2325
01:45:46,880 --> 01:45:51,040
introduced in this draft

2326
01:45:48,560 --> 01:45:52,800
nesting of past segments and stitch

2327
01:45:51,040 --> 01:45:55,600
focus segments

2328
01:45:52,800 --> 01:45:55,600
next slide please

2329
01:45:57,440 --> 01:46:00,559
these are the updates uh from last

2330
01:45:59,679 --> 01:46:03,520
version

2331
01:46:00,560 --> 01:46:06,000
the usage of past segments in si and

2332
01:46:03,520 --> 01:46:07,040
peers and amperes interworking has been

2333
01:46:06,000 --> 01:46:09,679
clarified

2334
01:46:07,040 --> 01:46:11,199
as i mentioned in the previous slide it

2335
01:46:09,679 --> 01:46:13,440
can be used for

2336
01:46:11,199 --> 01:46:15,759
performance measurement protection and

2337
01:46:13,440 --> 01:46:17,759
to achieve bi-directional parts

2338
01:46:15,760 --> 01:46:19,360
and there are some modifications about

2339
01:46:17,760 --> 01:46:22,639
the necessary assignment

2340
01:46:19,360 --> 01:46:23,440
and the stage of assessment and using

2341
01:46:22,639 --> 01:46:26,880
finding it

2342
01:46:23,440 --> 01:46:30,719
to stitch the tesla list and osp

2343
01:46:26,880 --> 01:46:33,520
across multiple commands is also added

2344
01:46:30,719 --> 01:46:33,520
next slide please

2345
01:46:35,760 --> 01:46:39,280
the nesting or path segments represents

2346
01:46:38,639 --> 01:46:42,320
end to end

2347
01:46:39,280 --> 01:46:45,040
encapsulation in the packet from an sr

2348
01:46:42,320 --> 01:46:46,799
appears domain to an amperes domain

2349
01:46:45,040 --> 01:46:49,679
which is encapsulated

2350
01:46:46,800 --> 01:46:50,080
in the ingress node and in the english

2351
01:46:49,679 --> 01:46:53,280
nodes

2352
01:46:50,080 --> 01:46:55,840
and encapsulated at the equest nodes

2353
01:46:53,280 --> 01:46:56,719
the transition notes are not can the

2354
01:46:55,840 --> 01:46:58,880
border nodes

2355
01:46:56,719 --> 01:47:00,080
of the domains are not aware of the

2356
01:46:58,880 --> 01:47:03,440
nesting of

2357
01:47:00,080 --> 01:47:06,880
class id and the srsp

2358
01:47:03,440 --> 01:47:09,360
and rpo and pslsps may be stitched

2359
01:47:06,880 --> 01:47:12,159
across the man's face binding state

2360
01:47:09,360 --> 01:47:12,159
next like this

2361
01:47:14,639 --> 01:47:18,560
in the staging of past segments the

2362
01:47:17,159 --> 01:47:22,000
srlsds and

2363
01:47:18,560 --> 01:47:25,040
rpmpls lsps at least

2364
01:47:22,000 --> 01:47:25,360
independently each domain which consists

2365
01:47:25,040 --> 01:47:28,320
of

2366
01:47:25,360 --> 01:47:29,199
sr which consists of a systelis or mpls

2367
01:47:28,320 --> 01:47:31,280
label

2368
01:47:29,199 --> 01:47:32,960
the end-to-end bi-directional path

2369
01:47:31,280 --> 01:47:36,400
across in the

2370
01:47:32,960 --> 01:47:39,280
srm peers and nps network is

2371
01:47:36,400 --> 01:47:41,920
split into multiple parts which can be

2372
01:47:39,280 --> 01:47:45,920
identified by the corresponding

2373
01:47:41,920 --> 01:47:48,159
switching of pass segments the ssids

2374
01:47:45,920 --> 01:47:49,119
will be popped out at the border node in

2375
01:47:48,159 --> 01:47:52,000
each domain

2376
01:47:49,119 --> 01:47:53,119
and correlate it to the s-pass id of

2377
01:47:52,000 --> 01:47:55,600
next domain

2378
01:47:53,119 --> 01:47:56,639
the staging of past segments can support

2379
01:47:55,600 --> 01:47:59,760
the end-to-end

2380
01:47:56,639 --> 01:48:02,800
path stitching and monitoring

2381
01:47:59,760 --> 01:48:02,800
and next like this

2382
01:48:03,440 --> 01:48:06,799
many authors will continue working on

2383
01:48:05,679 --> 01:48:09,600
this draft

2384
01:48:06,800 --> 01:48:10,239
on solutions for the interworking with

2385
01:48:09,600 --> 01:48:12,239
parking

2386
01:48:10,239 --> 01:48:13,280
pass segments and comments and

2387
01:48:12,239 --> 01:48:18,480
discussions that will

2388
01:48:13,280 --> 01:48:21,199
welcome that's all thanks

2389
01:48:18,480 --> 01:48:21,678
okay thank you i have a question for you

2390
01:48:21,199 --> 01:48:25,519
um

2391
01:48:21,679 --> 01:48:27,199
uh um this is dark and my question is

2392
01:48:25,520 --> 01:48:28,320
you are creating state at the border

2393
01:48:27,199 --> 01:48:31,119
nodes so

2394
01:48:28,320 --> 01:48:33,440
this is per path state uh for creating

2395
01:48:31,119 --> 01:48:37,440
these path segments right

2396
01:48:33,440 --> 01:48:41,199
oh yeah okay i thought the idea is

2397
01:48:37,440 --> 01:48:44,400
to not create uh states on transit nodes

2398
01:48:41,199 --> 01:48:45,759
in that case in segment routing but now

2399
01:48:44,400 --> 01:48:49,679
we're bringing path state

2400
01:48:45,760 --> 01:48:49,679
and the world into the transit notes

2401
01:48:51,119 --> 01:48:57,679
in past segments uh most of

2402
01:48:54,800 --> 01:48:58,400
the the nodes are have no states but i

2403
01:48:57,679 --> 01:49:01,040
think

2404
01:48:58,400 --> 01:49:01,759
at the bottom of those uh we can have

2405
01:49:01,040 --> 01:49:04,719
space

2406
01:49:01,760 --> 01:49:05,760
for the inter intel uh inter scenario

2407
01:49:04,719 --> 01:49:09,119
for the interworking

2408
01:49:05,760 --> 01:49:13,040
scenario and for example like uh

2409
01:49:09,119 --> 01:49:15,839
financing they it also has states i

2410
01:49:13,040 --> 01:49:15,840
think

2411
01:49:16,000 --> 01:49:22,320
is not purpose uh here it says

2412
01:49:19,199 --> 01:49:22,320
it's purpose state

2413
01:49:24,360 --> 01:49:32,719
a past page

2414
01:49:29,840 --> 01:49:33,760
maintained between each part segments

2415
01:49:32,719 --> 01:49:36,880
i'll

2416
01:49:33,760 --> 01:49:40,400
take my comment offline no problem

2417
01:49:36,880 --> 01:49:40,400
okay thanks thank you

2418
01:49:41,280 --> 01:49:48,080
uh okay greedy is that

2419
01:49:45,280 --> 01:49:48,080
greedy go ahead

2420
01:49:54,400 --> 01:50:00,080
kiriti do you want to ask a question

2421
01:49:57,760 --> 01:50:00,880
um can you hear me i'm the presenter for

2422
01:50:00,080 --> 01:50:04,239
the next

2423
01:50:00,880 --> 01:50:05,360
uh for the last uh slide deck i got it

2424
01:50:04,239 --> 01:50:07,759
okay thank you

2425
01:50:05,360 --> 01:50:11,839
all right i'll switch over to the next

2426
01:50:07,760 --> 01:50:11,840
slides then

2427
01:50:18,239 --> 01:50:24,638
the next uh one i have is for thomas

2428
01:50:22,239 --> 01:50:26,320
that's right that's me can you hear me

2429
01:50:24,639 --> 01:50:28,639
all right okay

2430
01:50:26,320 --> 01:50:29,440
okay yes i can hear your comments

2431
01:50:28,639 --> 01:50:32,400
perfect

2432
01:50:29,440 --> 01:50:32,879
thank you good thomas graf from swisscom

2433
01:50:32,400 --> 01:50:35,598
um

2434
01:50:32,880 --> 01:50:38,320
i'm presenting the draft export for

2435
01:50:35,599 --> 01:50:38,639
offer ample ssr label type information

2436
01:50:38,320 --> 01:50:43,679
in

2437
01:50:38,639 --> 01:50:43,679
ipfix next slide please

2438
01:50:45,520 --> 01:50:50,400
so the problem statement is

2439
01:50:48,560 --> 01:50:53,440
you see on the right side this is a

2440
01:50:50,400 --> 01:50:57,119
packet ipfix packet capture of an mls

2441
01:50:53,440 --> 01:50:59,598
sr implementation understood well where

2442
01:50:57,119 --> 01:51:01,280
ample assessor is using the existing

2443
01:50:59,599 --> 01:51:04,639
amples data plane

2444
01:51:01,280 --> 01:51:06,159
and therefore the the ipfix packet

2445
01:51:04,639 --> 01:51:09,199
capture is more or less

2446
01:51:06,159 --> 01:51:12,000
uh identical to to to mpls

2447
01:51:09,199 --> 01:51:14,320
with one notable uh difference which is

2448
01:51:12,000 --> 01:51:16,639
the ample stop label type

2449
01:51:14,320 --> 01:51:18,239
which is referring to the protocol

2450
01:51:16,639 --> 01:51:21,360
providing the label

2451
01:51:18,239 --> 01:51:23,440
in this case it's uh ldp

2452
01:51:21,360 --> 01:51:25,280
even though ldp is not covered in the

2453
01:51:23,440 --> 01:51:29,839
network

2454
01:51:25,280 --> 01:51:33,920
next slide please

2455
01:51:29,840 --> 01:51:35,520
so looking at iana into the ipfix mpls

2456
01:51:33,920 --> 01:51:38,719
label type registry

2457
01:51:35,520 --> 01:51:39,920
we see the problem and palace sr is not

2458
01:51:38,719 --> 01:51:43,119
present there

2459
01:51:39,920 --> 01:51:46,560
so currently only uh the the

2460
01:51:43,119 --> 01:51:48,000
the existing routing protocol not

2461
01:51:46,560 --> 01:51:52,800
covering ample ssr

2462
01:51:48,000 --> 01:51:52,800
listed next slide please

2463
01:51:53,599 --> 01:51:59,599
and uh i received two ipfix

2464
01:51:57,040 --> 01:52:02,400
doctor reviews and in this doctor

2465
01:51:59,599 --> 01:52:04,560
reviews uh we

2466
01:52:02,400 --> 01:52:05,598
we noticed that currently the rich

2467
01:52:04,560 --> 01:52:08,719
history is

2468
01:52:05,599 --> 01:52:10,000
is not being properly set up uh there is

2469
01:52:08,719 --> 01:52:13,119
a hidden

2470
01:52:10,000 --> 01:52:15,679
uh requestor section and

2471
01:52:13,119 --> 01:52:17,679
actually the column on the reference and

2472
01:52:15,679 --> 01:52:22,080
the column on the request

2473
01:52:17,679 --> 01:52:24,000
is should be vice versa so in the

2474
01:52:22,080 --> 01:52:25,840
example below that's how the rich

2475
01:52:24,000 --> 01:52:26,800
history should be fixed and it's i'm

2476
01:52:25,840 --> 01:52:30,800
currently

2477
01:52:26,800 --> 01:52:33,760
awaiting feedback from ayanna

2478
01:52:30,800 --> 01:52:33,760
next slide please

2479
01:52:35,199 --> 01:52:39,119
i received so far feedback from spring

2480
01:52:38,400 --> 01:52:44,320
and palace

2481
01:52:39,119 --> 01:52:45,119
lsr and ops awg at itf 108 i requested

2482
01:52:44,320 --> 01:52:48,239
adoption at

2483
01:52:45,119 --> 01:52:51,679
ops awg and received feedback

2484
01:52:48,239 --> 01:52:54,429
uh in regards to review as a city type

2485
01:52:51,679 --> 01:52:55,760
and fix the existing

2486
01:52:54,430 --> 01:53:00,320
[Music]

2487
01:52:55,760 --> 01:53:03,599
i-46 switch history which i just

2488
01:53:00,320 --> 01:53:05,840
presented before the src type was

2489
01:53:03,599 --> 01:53:07,280
removed from the the latest version of

2490
01:53:05,840 --> 01:53:11,840
the draft in favor

2491
01:53:07,280 --> 01:53:14,320
of the draft spring esser

2492
01:53:11,840 --> 01:53:15,280
in section 8 3 there's a nice

2493
01:53:14,320 --> 01:53:17,840
description

2494
01:53:15,280 --> 01:53:18,800
basically covering the same aspect so

2495
01:53:17,840 --> 01:53:21,920
you can get

2496
01:53:18,800 --> 01:53:24,400
the same src type information

2497
01:53:21,920 --> 01:53:26,719
through young push versus implementing

2498
01:53:24,400 --> 01:53:29,119
in ipfix and high prefix has some

2499
01:53:26,719 --> 01:53:32,480
limitations in terms of

2500
01:53:29,119 --> 01:53:35,920
packet sizes and

2501
01:53:32,480 --> 01:53:39,678
yep i'm aiming for do an

2502
01:53:35,920 --> 01:53:41,040
another call for option at ops awg at

2503
01:53:39,679 --> 01:53:43,599
itf 110

2504
01:53:41,040 --> 01:53:44,719
and in between i'm looking forward for

2505
01:53:43,599 --> 01:53:48,800
receiving feedback

2506
01:53:44,719 --> 01:53:51,199
from the emperor's working group as well

2507
01:53:48,800 --> 01:53:51,199
thank you

2508
01:53:53,599 --> 01:53:57,119
i have a question to you thomas just

2509
01:53:55,520 --> 01:54:00,560
clarification

2510
01:53:57,119 --> 01:54:04,559
of course um so

2511
01:54:00,560 --> 01:54:07,440
you dropped src type so uh

2512
01:54:04,560 --> 01:54:08,719
what's left in uh that identifies it's a

2513
01:54:07,440 --> 01:54:11,119
segment routing

2514
01:54:08,719 --> 01:54:11,119
label

2515
01:54:11,920 --> 01:54:15,440
it's just basically about the the label

2516
01:54:15,040 --> 01:54:19,519
type

2517
01:54:15,440 --> 01:54:22,559
so for which label protocol uh

2518
01:54:19,520 --> 01:54:24,400
defined the label and and

2519
01:54:22,560 --> 01:54:27,360
would i be able to tell the protocol

2520
01:54:24,400 --> 01:54:31,119
like ospf isis or bgp

2521
01:54:27,360 --> 01:54:32,159
exactly that's why the ia46 registry is

2522
01:54:31,119 --> 01:54:34,880
there

2523
01:54:32,159 --> 01:54:36,320
it defines which label protocol provided

2524
01:54:34,880 --> 01:54:39,520
the label

2525
01:54:36,320 --> 01:54:40,719
okay okay that's fine right this src

2526
01:54:39,520 --> 01:54:43,360
type was more uh

2527
01:54:40,719 --> 01:54:44,560
which city type so for each for instance

2528
01:54:43,360 --> 01:54:48,000
adjacency sit

2529
01:54:44,560 --> 01:54:51,679
or fix it and so on

2530
01:54:48,000 --> 01:54:55,199
okay yeah thank you

2531
01:54:51,679 --> 01:54:55,199
sure welcome

2532
01:54:55,920 --> 01:55:00,560
any other questions i don't see anyone

2533
01:54:58,239 --> 01:55:03,759
in the queue

2534
01:55:00,560 --> 01:55:07,199
okay thank you thomas we

2535
01:55:03,760 --> 01:55:10,480
we have another uh presentation

2536
01:55:07,199 --> 01:55:12,638
uh but it was supposed to be jeffrey

2537
01:55:10,480 --> 01:55:14,159
i'm not sure if kiriti you're uh filling

2538
01:55:12,639 --> 01:55:17,199
in for jeffrey

2539
01:55:14,159 --> 01:55:19,280
and if you are we uh we didn't receive

2540
01:55:17,199 --> 01:55:19,919
the slides so i cannot present them

2541
01:55:19,280 --> 01:55:23,519
right now

2542
01:55:19,920 --> 01:55:23,520
i think uh mark did

2543
01:55:24,080 --> 01:55:31,679
if he did i can check they weren't uh

2544
01:55:27,280 --> 01:55:31,679
okay let me see oh okay cool

2545
01:55:41,280 --> 01:55:46,320
go ahead okay thanks and thank you mark

2546
01:55:44,840 --> 01:55:50,159
for

2547
01:55:46,320 --> 01:55:52,880
for accommodating us um the presentation

2548
01:55:50,159 --> 01:55:53,519
um so basically what we're saying here

2549
01:55:52,880 --> 01:55:56,639
is

2550
01:55:53,520 --> 01:56:00,560
um we have this um

2551
01:55:56,639 --> 01:56:03,920
we have in ipv6 this mechanism for

2552
01:56:00,560 --> 01:56:03,920
fragmentation and other

2553
01:56:04,239 --> 01:56:08,959
other functions on packets for example

2554
01:56:07,199 --> 01:56:13,360
inserting an esp header

2555
01:56:08,960 --> 01:56:16,400
and such things so we have the need

2556
01:56:13,360 --> 01:56:19,440
in non-ip environments

2557
01:56:16,400 --> 01:56:22,638
to do such things so we'll give you an

2558
01:56:19,440 --> 01:56:22,638
example on the next slide

2559
01:56:24,800 --> 01:56:28,080
so for example in evpn you get an

2560
01:56:27,599 --> 01:56:31,679
ethernet

2561
01:56:28,080 --> 01:56:35,199
packet from the customer at the pe

2562
01:56:31,679 --> 01:56:36,159
and if that packet maybe by itself is

2563
01:56:35,199 --> 01:56:39,598
bigger than the

2564
01:56:36,159 --> 01:56:42,080
path mtu or after you add

2565
01:56:39,599 --> 01:56:43,840
the mpls label as the service label as

2566
01:56:42,080 --> 01:56:45,599
well as the tunnel label it becomes too

2567
01:56:43,840 --> 01:56:48,639
big

2568
01:56:45,599 --> 01:56:51,040
you can't fragment it so a workaround is

2569
01:56:48,639 --> 01:56:54,480
to say okay let's do mpls over ip

2570
01:56:51,040 --> 01:56:56,800
so mkls over udp or mpls over gre

2571
01:56:54,480 --> 01:56:58,638
and then fragment the ip packet but

2572
01:56:56,800 --> 01:57:02,000
that's a lot of overhead

2573
01:56:58,639 --> 01:57:04,800
that's a lot of uh you know it's a

2574
01:57:02,000 --> 01:57:06,880
much heavier function plus you're not

2575
01:57:04,800 --> 01:57:09,599
using mpls in the transport you're using

2576
01:57:06,880 --> 01:57:11,360
ip and maybe you had this nice

2577
01:57:09,599 --> 01:57:13,440
traffic engineered path that you wanted

2578
01:57:11,360 --> 01:57:17,040
to use for this evpn

2579
01:57:13,440 --> 01:57:20,719
all that goes out the window so um

2580
01:57:17,040 --> 01:57:24,080
there are solutions to this uh in pw

2581
01:57:20,719 --> 01:57:25,520
uh there was an uh there is an rfc uh

2582
01:57:24,080 --> 01:57:28,559
many thanks to stuart

2583
01:57:25,520 --> 01:57:32,159
for pointing it out um and

2584
01:57:28,560 --> 01:57:32,560
what it does is um put a control word

2585
01:57:32,159 --> 01:57:36,320
and

2586
01:57:32,560 --> 01:57:38,400
have some things to indicate the

2587
01:57:36,320 --> 01:57:39,360
user sequence numbers to indicate the

2588
01:57:38,400 --> 01:57:41,040
fragments

2589
01:57:39,360 --> 01:57:42,559
uh use bits to say this the first

2590
01:57:41,040 --> 01:57:44,480
fragment that's the last fragment and

2591
01:57:42,560 --> 01:57:46,800
you can do it that way

2592
01:57:44,480 --> 01:57:49,040
uh but we're looking at a more generic

2593
01:57:46,800 --> 01:57:51,119
solution not just for pseudo wires but

2594
01:57:49,040 --> 01:57:52,639
for evpn which doesn't use the control

2595
01:57:51,119 --> 01:57:55,920
word um

2596
01:57:52,639 --> 01:57:59,679
but also uh in you know in principle for

2597
01:57:55,920 --> 01:58:03,199
other protocols so maybe peer

2598
01:57:59,679 --> 01:58:06,000
maybe your mpls in general

2599
01:58:03,199 --> 01:58:06,879
so the thing that we're looking at is to

2600
01:58:06,000 --> 01:58:10,639
use the

2601
01:58:06,880 --> 01:58:13,760
ipv6 functions like for example the

2602
01:58:10,639 --> 01:58:13,760
fragmentation header

2603
01:58:14,159 --> 01:58:18,879
it's relatively independent of ipv6

2604
01:58:17,840 --> 01:58:21,440
itself

2605
01:58:18,880 --> 01:58:23,360
so the big the big difference is the

2606
01:58:21,440 --> 01:58:24,320
identification feel for the fragment

2607
01:58:23,360 --> 01:58:28,080
itself

2608
01:58:24,320 --> 01:58:30,559
but and so

2609
01:58:28,080 --> 01:58:31,519
if you already have uh ipv6

2610
01:58:30,560 --> 01:58:34,400
fragmentation

2611
01:58:31,520 --> 01:58:36,480
in your hardware maybe it's a relatively

2612
01:58:34,400 --> 01:58:40,799
small tweak to use it in other

2613
01:58:36,480 --> 01:58:40,799
contexts so next slide

2614
01:58:43,920 --> 01:58:49,440
so the idea is to use fragmentation

2615
01:58:47,040 --> 01:58:53,040
reassembly function

2616
01:58:49,440 --> 01:58:55,040
and so in the case of evpn we would say

2617
01:58:53,040 --> 01:58:56,159
put the service label and then fragment

2618
01:58:55,040 --> 01:58:59,119
the packet

2619
01:58:56,159 --> 01:59:02,000
uh using you'll see on the next slide

2620
01:58:59,119 --> 01:59:05,199
the generic fragmentation header

2621
01:59:02,000 --> 01:59:07,599
and then on top of that put another

2622
01:59:05,199 --> 01:59:09,919
label that says fragmentation is next

2623
01:59:07,599 --> 01:59:12,000
and then on top of that put the tunnel

2624
01:59:09,920 --> 01:59:16,239
label so the packet would look like

2625
01:59:12,000 --> 01:59:21,040
turner label gfh label the

2626
01:59:16,239 --> 01:59:21,040
the fragmentation header followed by the

2627
01:59:21,119 --> 01:59:27,040
service label so the eager spe would see

2628
01:59:24,639 --> 01:59:29,599
the gfh label reassemble the packet

2629
01:59:27,040 --> 01:59:31,360
and then say okay there's more mpls or

2630
01:59:29,599 --> 01:59:34,880
just a service label and then

2631
01:59:31,360 --> 01:59:37,040
it would know how to um

2632
01:59:34,880 --> 01:59:38,159
you know hand that off to the right

2633
01:59:37,040 --> 01:59:39,519
customer

2634
01:59:38,159 --> 01:59:41,040
because essentially at that point the

2635
01:59:39,520 --> 01:59:44,159
service label just tells you which

2636
01:59:41,040 --> 01:59:48,719
interface you're going out of

2637
01:59:44,159 --> 01:59:52,080
next slide so what you see here

2638
01:59:48,719 --> 01:59:56,239
on top is the fragmentation header

2639
01:59:52,080 --> 01:59:59,599
in a in a standard ipv6

2640
01:59:56,239 --> 02:00:03,360
and below that how we are suggesting

2641
01:59:59,599 --> 02:00:03,679
changing it to accommodate fragmentation

2642
02:00:03,360 --> 02:00:07,839
in

2643
02:00:03,679 --> 02:00:10,800
other contexts so um ipv6 has this very

2644
02:00:07,840 --> 02:00:12,719
interesting tlb structure where the t

2645
02:00:10,800 --> 02:00:14,880
comes from the previous header and then

2646
02:00:12,719 --> 02:00:17,679
the l and v are typically in this

2647
02:00:14,880 --> 02:00:18,320
insider so the previous header would

2648
02:00:17,679 --> 02:00:20,719
have

2649
02:00:18,320 --> 02:00:21,840
or the previous thingy would have said

2650
02:00:20,719 --> 02:00:23,360
what's coming up next is the

2651
02:00:21,840 --> 02:00:26,239
fragmentation header

2652
02:00:23,360 --> 02:00:26,639
so we don't have that so we need to do

2653
02:00:26,239 --> 02:00:28,400
that

2654
02:00:26,639 --> 02:00:30,800
outside of this so that's why we have a

2655
02:00:28,400 --> 02:00:32,719
gfh label that says

2656
02:00:30,800 --> 02:00:33,920
what comes next is a fragmentation

2657
02:00:32,719 --> 02:00:36,719
header

2658
02:00:33,920 --> 02:00:39,040
the gfx label could be signaled or it

2659
02:00:36,719 --> 02:00:41,440
could be a special purpose label

2660
02:00:39,040 --> 02:00:42,400
details to be figured out but

2661
02:00:41,440 --> 02:00:44,320
essentially

2662
02:00:42,400 --> 02:00:46,000
that's how you know that this is a

2663
02:00:44,320 --> 02:00:50,880
fragmentation header

2664
02:00:46,000 --> 02:00:54,400
in in the payload the fragmentation

2665
02:00:50,880 --> 02:00:55,360
header itself we're starting with this

2666
02:00:54,400 --> 02:00:58,638
nibble

2667
02:00:55,360 --> 02:01:00,480
of zeros uh this was um from a

2668
02:00:58,639 --> 02:01:03,040
suggestion from stuart

2669
02:01:00,480 --> 02:01:04,480
um the next header will then tell you

2670
02:01:03,040 --> 02:01:06,480
that when you're done with this

2671
02:01:04,480 --> 02:01:08,400
you still have mpls because the service

2672
02:01:06,480 --> 02:01:10,879
level is to come up

2673
02:01:08,400 --> 02:01:11,598
the header length tells you how to do

2674
02:01:10,880 --> 02:01:14,960
the

2675
02:01:11,599 --> 02:01:18,480
identification again in the context of

2676
02:01:14,960 --> 02:01:21,199
ipv6 the identification is just

2677
02:01:18,480 --> 02:01:23,280
you know for a given packet you just

2678
02:01:21,199 --> 02:01:24,719
generate a new identification number

2679
02:01:23,280 --> 02:01:27,440
all the fragments will have that same

2680
02:01:24,719 --> 02:01:31,040
number and then you put them together

2681
02:01:27,440 --> 02:01:34,320
but in the case of ip

2682
02:01:31,040 --> 02:01:36,320
i mean if you're not doing ipv6 you may

2683
02:01:34,320 --> 02:01:39,679
not have enough contacts just with

2684
02:01:36,320 --> 02:01:43,199
that four byte number the identification

2685
02:01:39,679 --> 02:01:47,760
so you might have to add the source pe

2686
02:01:43,199 --> 02:01:50,239
um loopback address you may

2687
02:01:47,760 --> 02:01:51,360
depending on if you're doing it for

2688
02:01:50,239 --> 02:01:54,718
ethernet you

2689
02:01:51,360 --> 02:01:57,920
might want to write a source ethernet

2690
02:01:54,719 --> 02:01:59,920
i apologize so so

2691
02:01:57,920 --> 02:02:01,280
um yeah i'll just take a couple of

2692
02:01:59,920 --> 02:02:06,239
minutes if you guys can

2693
02:02:01,280 --> 02:02:06,239
you know if uh i couldn't kill us off

2694
02:02:07,199 --> 02:02:10,879
or two minutes that would be great thank

2695
02:02:08,719 --> 02:02:14,159
you yeah yeah yeah

2696
02:02:10,880 --> 02:02:16,480
so so basically uh the idea is that

2697
02:02:14,159 --> 02:02:17,598
you embed a fragmentation header in

2698
02:02:16,480 --> 02:02:20,239
different uh

2699
02:02:17,599 --> 02:02:21,760
protocols in different ways so in mpls

2700
02:02:20,239 --> 02:02:25,598
you have this generic fragment

2701
02:02:21,760 --> 02:02:28,639
fragment header label gfx label

2702
02:02:25,599 --> 02:02:30,159
um and and then you're able to fragment

2703
02:02:28,639 --> 02:02:32,880
the package use the full

2704
02:02:30,159 --> 02:02:34,960
you know use the normal mpls otherwise

2705
02:02:32,880 --> 02:02:36,560
and then at the egress you can then put

2706
02:02:34,960 --> 02:02:40,239
it back together

2707
02:02:36,560 --> 02:02:40,239
next slide sure

2708
02:02:42,080 --> 02:02:46,000
so um again this this is the description

2709
02:02:45,440 --> 02:02:48,480
of what's

2710
02:02:46,000 --> 02:02:50,080
in the header so i'll um i've mostly

2711
02:02:48,480 --> 02:02:52,400
said all that so let's go to the next

2712
02:02:50,080 --> 02:02:52,400
slide

2713
02:02:53,440 --> 02:02:59,040
um so the idea is then to solve the mpls

2714
02:02:56,639 --> 02:03:00,239
evpn fragmentation problem without

2715
02:02:59,040 --> 02:03:03,119
incurring the ipe

2716
02:03:00,239 --> 02:03:04,879
uh overhead or you know avoiding the

2717
02:03:03,119 --> 02:03:06,719
mpls tunnel

2718
02:03:04,880 --> 02:03:08,560
but then we could also do it for other

2719
02:03:06,719 --> 02:03:10,639
things besides fragmentation so if you

2720
02:03:08,560 --> 02:03:12,880
want to do esp or something you can use

2721
02:03:10,639 --> 02:03:16,639
an esp header

2722
02:03:12,880 --> 02:03:16,960
and um finally the the solution works

2723
02:03:16,639 --> 02:03:19,280
for

2724
02:03:16,960 --> 02:03:20,320
mpls for beer or hopefully it works for

2725
02:03:19,280 --> 02:03:22,559
mpls for brf

2726
02:03:20,320 --> 02:03:24,080
ethernet could be used for pseudo wires

2727
02:03:22,560 --> 02:03:27,920
and vpls

2728
02:03:24,080 --> 02:03:29,519
uh the goal is to um the goal here is

2729
02:03:27,920 --> 02:03:31,679
just to

2730
02:03:29,520 --> 02:03:33,440
sort of give you a heads up uh we're

2731
02:03:31,679 --> 02:03:35,920
presenting this so we've at this point

2732
02:03:33,440 --> 02:03:39,678
presented this in tsvwg

2733
02:03:35,920 --> 02:03:43,360
uh pierre um and um

2734
02:03:39,679 --> 02:03:43,360
i think we've also presented in best

2735
02:03:43,520 --> 02:03:48,079
so the idea is to essentially make

2736
02:03:46,400 --> 02:03:51,440
everyone aware of this

2737
02:03:48,079 --> 02:03:53,040
and then you know find a place to

2738
02:03:51,440 --> 02:03:56,719
standardize it so i think the next slide

2739
02:03:53,040 --> 02:04:00,560
has that

2740
02:03:56,719 --> 02:04:00,800
uh yeah so do we find a home in ts dsvwg

2741
02:04:00,560 --> 02:04:02,560
or

2742
02:04:00,800 --> 02:04:04,000
into area or you know that's something

2743
02:04:02,560 --> 02:04:05,679
that we have to figure out

2744
02:04:04,000 --> 02:04:07,840
but we're just putting the idea in front

2745
02:04:05,679 --> 02:04:10,639
of you guys uh we love your comments

2746
02:04:07,840 --> 02:04:11,199
thank you stuart for your comments uh

2747
02:04:10,639 --> 02:04:13,280
and

2748
02:04:11,199 --> 02:04:15,919
yeah we have work to do but uh we will

2749
02:04:13,280 --> 02:04:18,800
continue discussions

2750
02:04:15,920 --> 02:04:19,440
thank you for the time thank you kiriti

2751
02:04:18,800 --> 02:04:22,480
uh

2752
02:04:19,440 --> 02:04:23,360
we don't have time for uh too many

2753
02:04:22,480 --> 02:04:25,598
questions

2754
02:04:23,360 --> 02:04:27,360
stewart if it was quick go ahead i see

2755
02:04:25,599 --> 02:04:29,280
that you're in the queue

2756
02:04:27,360 --> 02:04:30,400
so i i think what the first thing i

2757
02:04:29,280 --> 02:04:32,719
would say is that

2758
02:04:30,400 --> 02:04:35,440
putting a tight field in mpls is

2759
02:04:32,719 --> 02:04:38,400
actually an architectural change to mpls

2760
02:04:35,440 --> 02:04:40,638
and we need a proper discussion about

2761
02:04:38,400 --> 02:04:42,159
that rather than sort of sneaking it in

2762
02:04:40,639 --> 02:04:44,800
i don't mean sneaking rather than sort

2763
02:04:42,159 --> 02:04:48,559
of putting it on the back of the draft

2764
02:04:44,800 --> 02:04:50,880
so if we separate the type from the ac

2765
02:04:48,560 --> 02:04:52,400
fragmentation method we should also

2766
02:04:50,880 --> 02:04:55,679
seriously consider

2767
02:04:52,400 --> 02:04:57,839
upgrading rfc 4623

2768
02:04:55,679 --> 02:04:59,760
to add the additional field that you you

2769
02:04:57,840 --> 02:05:03,119
need 4623

2770
02:04:59,760 --> 02:05:06,159
is a standard track method of doing

2771
02:05:03,119 --> 02:05:07,759
um fragmentation in this context so i

2772
02:05:06,159 --> 02:05:08,879
see two problems and we should discuss

2773
02:05:07,760 --> 02:05:11,040
them separately

2774
02:05:08,880 --> 02:05:13,760
and we should uh do the right thing for

2775
02:05:11,040 --> 02:05:16,800
the mpls architecture

2776
02:05:13,760 --> 02:05:18,000
so could you explain um the type field

2777
02:05:16,800 --> 02:05:20,239
are you talking about the next header

2778
02:05:18,000 --> 02:05:22,880
which is

2779
02:05:20,239 --> 02:05:23,360
yeah next header we've avoided having

2780
02:05:22,880 --> 02:05:26,239
that

2781
02:05:23,360 --> 02:05:27,040
uh in everything else we've done in mpls

2782
02:05:26,239 --> 02:05:30,320
by

2783
02:05:27,040 --> 02:05:32,159
uh making what follows a function of the

2784
02:05:30,320 --> 02:05:35,040
bottom label

2785
02:05:32,159 --> 02:05:35,040
now those are the top

2786
02:05:37,840 --> 02:05:41,599
yeah the thing is you you need to

2787
02:05:39,760 --> 02:05:42,480
terminate the label stack so that you

2788
02:05:41,599 --> 02:05:44,560
know that

2789
02:05:42,480 --> 02:05:46,239
um and so you're sort of terminating the

2790
02:05:44,560 --> 02:05:47,040
label stack in the middle of the label

2791
02:05:46,239 --> 02:05:49,119
stack

2792
02:05:47,040 --> 02:05:51,360
so you need to come back so you you have

2793
02:05:49,119 --> 02:05:54,400
the top label which is the tunnel label

2794
02:05:51,360 --> 02:05:56,000
then you have this gfh label and then

2795
02:05:54,400 --> 02:05:58,480
you need to insert the gfh

2796
02:05:56,000 --> 02:06:00,239
the the fragment header in between and

2797
02:05:58,480 --> 02:06:03,280
then you need to go back to the

2798
02:06:00,239 --> 02:06:06,320
mpls level so you're putting a

2799
02:06:03,280 --> 02:06:07,040
fake end of stack not really fake but

2800
02:06:06,320 --> 02:06:09,040
kind of fake

2801
02:06:07,040 --> 02:06:10,159
end of stack fit but you need to go back

2802
02:06:09,040 --> 02:06:12,400
to the stack well

2803
02:06:10,159 --> 02:06:13,280
wait a minute karitee the the other guy

2804
02:06:12,400 --> 02:06:14,320
needs to me

2805
02:06:13,280 --> 02:06:17,199
you need to know the other guy can

2806
02:06:14,320 --> 02:06:20,320
expect this so your peer

2807
02:06:17,199 --> 02:06:22,000
should really issue a label um with the

2808
02:06:20,320 --> 02:06:25,119
instructions

2809
02:06:22,000 --> 02:06:27,440
yeah right so uh given that you've got

2810
02:06:25,119 --> 02:06:28,079
the labels agreed and the capabilities

2811
02:06:27,440 --> 02:06:32,879
agreed

2812
02:06:28,079 --> 02:06:32,880
you don't need uh to do that

2813
02:06:34,400 --> 02:06:37,440
that's that's one way of doing it so so

2814
02:06:37,040 --> 02:06:39,599
you

2815
02:06:37,440 --> 02:06:40,799
when you see a gfh header you can say

2816
02:06:39,599 --> 02:06:42,880
whether or not the

2817
02:06:40,800 --> 02:06:44,079
end of stack bit is set i'm going to

2818
02:06:42,880 --> 02:06:47,360
assume that the next few

2819
02:06:44,079 --> 02:06:48,480
bytes are a fragment header which has a

2820
02:06:47,360 --> 02:06:50,159
tlv

2821
02:06:48,480 --> 02:06:51,919
i mean it has a length wheel so i know

2822
02:06:50,159 --> 02:06:55,040
exactly how many bytes there are

2823
02:06:51,920 --> 02:06:58,320
and then i go back to uh to

2824
02:06:55,040 --> 02:07:00,159
mpls and yeah that's perfectly

2825
02:06:58,320 --> 02:07:01,679
good way of doing it right that is the

2826
02:07:00,159 --> 02:07:02,559
normal way to do it now we want to do

2827
02:07:01,679 --> 02:07:04,960
something different

2828
02:07:02,560 --> 02:07:06,239
that's fine but we need to go that do

2829
02:07:04,960 --> 02:07:07,520
that with our eyes open

2830
02:07:06,239 --> 02:07:09,440
and understand the full set of

2831
02:07:07,520 --> 02:07:11,360
consequences and why we're making the

2832
02:07:09,440 --> 02:07:12,960
change and if we are making the change

2833
02:07:11,360 --> 02:07:15,040
are we making the most general change

2834
02:07:12,960 --> 02:07:17,199
that we're servicing to the future

2835
02:07:15,040 --> 02:07:19,040
thank you the thing is if you don't put

2836
02:07:17,199 --> 02:07:21,440
canadians

2837
02:07:19,040 --> 02:07:23,040
or over time yeah okay we'll take it to

2838
02:07:21,440 --> 02:07:25,360
the list yeah

2839
02:07:23,040 --> 02:07:27,199
it's actually interesting discussion it

2840
02:07:25,360 --> 02:07:28,320
would be beneficial to take it to the

2841
02:07:27,199 --> 02:07:32,320
list and

2842
02:07:28,320 --> 02:07:35,360
you know we will okay thank you stewart

2843
02:07:32,320 --> 02:07:37,840
yeah i apologize no problem i i

2844
02:07:35,360 --> 02:07:38,400
i hate to cut it here but we are over

2845
02:07:37,840 --> 02:07:41,440
time and

2846
02:07:38,400 --> 02:07:42,480
i apologize so jeffrey um let's take it

2847
02:07:41,440 --> 02:07:45,598
to the list please

2848
02:07:42,480 --> 02:07:47,040
thank you all right

2849
02:07:45,599 --> 02:07:50,159
thank you and see you next time

2850
02:07:47,040 --> 02:07:52,560
everybody bye

2851
02:07:50,159 --> 02:07:52,559
bye

2852
02:07:53,280 --> 02:07:58,320
so there's a bug because i can't cut my

2853
02:07:55,920 --> 02:07:58,320
audio

2854
02:08:02,079 --> 02:08:05,280
so we can continue the discussion until

2855
02:08:04,560 --> 02:08:09,360
i um

2856
02:08:05,280 --> 02:08:11,599
amid echo kicks us out right

2857
02:08:09,360 --> 02:08:13,440
so if you don't put the end of stack bit

2858
02:08:11,599 --> 02:08:15,360
on the gfh label

2859
02:08:13,440 --> 02:08:17,759
um you know somebody's going to process

2860
02:08:15,360 --> 02:08:21,119
this and do ecmp based on everything

2861
02:08:17,760 --> 02:08:23,280
and treating the zero zero nibble field

2862
02:08:21,119 --> 02:08:24,880
as a label and that's going to screw up

2863
02:08:23,280 --> 02:08:26,400
everything so you put the end of stack

2864
02:08:24,880 --> 02:08:28,400
bit there

2865
02:08:26,400 --> 02:08:30,159
and you're right if you say that the

2866
02:08:28,400 --> 02:08:33,199
semantics of the gfx

2867
02:08:30,159 --> 02:08:35,040
label is that um

2868
02:08:33,199 --> 02:08:37,280
yeah the end of stack bit is on but it's

2869
02:08:35,040 --> 02:08:38,880
only so to prevent ecmp from doing

2870
02:08:37,280 --> 02:08:41,840
stupid things

2871
02:08:38,880 --> 02:08:42,239
and once you've processed it uh it is

2872
02:08:41,840 --> 02:08:44,239
still

2873
02:08:42,239 --> 02:08:45,360
i mean it's a it's a fake end of stack

2874
02:08:44,239 --> 02:08:46,718
bit

2875
02:08:45,360 --> 02:08:48,480
it's not going to make the stack but

2876
02:08:46,719 --> 02:08:49,360
it's a relay stack bit because you've

2877
02:08:48,480 --> 02:08:52,480
agreed

2878
02:08:49,360 --> 02:08:53,440
to set this logical um lsp up between

2879
02:08:52,480 --> 02:08:55,598
the two peers

2880
02:08:53,440 --> 02:08:57,678
i mean the first thing is that it's a

2881
02:08:55,599 --> 02:09:00,400
fundamental of mpls that the two peers

2882
02:08:57,679 --> 02:09:03,840
understand in advance what's going on

2883
02:09:00,400 --> 02:09:04,400
yes actually so the the next header

2884
02:09:03,840 --> 02:09:08,639
field

2885
02:09:04,400 --> 02:09:09,519
in the gf gfh itself is not mpls and the

2886
02:09:08,639 --> 02:09:12,880
gfh

2887
02:09:09,520 --> 02:09:14,880
itself is not an pos thing no

2888
02:09:12,880 --> 02:09:16,159
so you created a essentially you've

2889
02:09:14,880 --> 02:09:17,920
created a pseudo wire

2890
02:09:16,159 --> 02:09:19,360
that's carrying a pseudo wire i think is

2891
02:09:17,920 --> 02:09:23,119
what you've done

2892
02:09:19,360 --> 02:09:26,320
um no no no no no not like that either

2893
02:09:23,119 --> 02:09:28,799
it's really that's uh uh so

2894
02:09:26,320 --> 02:09:29,519
put put mpos first on the side for one

2895
02:09:28,800 --> 02:09:32,560
moment

2896
02:09:29,520 --> 02:09:35,040
okay consider forget about mpos

2897
02:09:32,560 --> 02:09:35,679
let's just say we are doing doing the uh

2898
02:09:35,040 --> 02:09:38,639
uh

2899
02:09:35,679 --> 02:09:40,800
fragmentation for ethernet okay uh

2900
02:09:38,639 --> 02:09:42,960
without ip without mpls at all it's just

2901
02:09:40,800 --> 02:09:46,000
a pure ethernet pure layer too

2902
02:09:42,960 --> 02:09:49,280
we're doing fragmentation so we put this

2903
02:09:46,000 --> 02:09:51,840
uh with as long as signs uh

2904
02:09:49,280 --> 02:09:52,719
uh either time for the forgive to

2905
02:09:51,840 --> 02:09:55,840
indicate that the

2906
02:09:52,719 --> 02:09:59,280
gfh for follows and then

2907
02:09:55,840 --> 02:10:01,199
and then after that that

2908
02:09:59,280 --> 02:10:02,320
that gfh the next header value in the

2909
02:10:01,199 --> 02:10:05,280
gfc

2910
02:10:02,320 --> 02:10:06,159
gfh will tell you what's coming after

2911
02:10:05,280 --> 02:10:09,840
the

2912
02:10:06,159 --> 02:10:15,839
uh uh uh after the gfc

2913
02:10:09,840 --> 02:10:15,840
gfh so now coming back

2914
02:10:23,119 --> 02:10:26,159
right i'm first i'm just using ethernet

2915
02:10:25,679 --> 02:10:28,639
as a

2916
02:10:26,159 --> 02:10:29,280
as an example to to to put it so is

2917
02:10:28,639 --> 02:10:31,280
ethernet

2918
02:10:29,280 --> 02:10:33,040
is ethernet the bearer or is ethernet

2919
02:10:31,280 --> 02:10:36,079
the thing that's been carried

2920
02:10:33,040 --> 02:10:38,960
the either that is the barrier well well

2921
02:10:36,079 --> 02:10:39,360
um that's an 802 discussion isn't it

2922
02:10:38,960 --> 02:10:42,000
right

2923
02:10:39,360 --> 02:10:43,119
no yeah it is i'm just i'm just using

2924
02:10:42,000 --> 02:10:46,639
that as an example

2925
02:10:43,119 --> 02:10:47,839
so to to to put out to put mpos on the

2926
02:10:46,639 --> 02:10:50,880
site for one moment

2927
02:10:47,840 --> 02:10:52,880
okay so put just forget about mpos just

2928
02:10:50,880 --> 02:10:53,760
imagine just pretend that we're doing

2929
02:10:52,880 --> 02:10:57,840
this for

2930
02:10:53,760 --> 02:10:57,840
uh for either a

2931
02:10:58,000 --> 02:11:03,840
so we assign either type to to indicate

2932
02:11:01,440 --> 02:11:07,040
that the gfh follows

2933
02:11:03,840 --> 02:11:07,920
and then and and the next header in the

2934
02:11:07,040 --> 02:11:10,079
gfh

2935
02:11:07,920 --> 02:11:12,400
will tell what what would be the

2936
02:11:10,079 --> 02:11:14,480
original uh either type

2937
02:11:12,400 --> 02:11:16,879
we imagine that when you're not doing

2938
02:11:14,480 --> 02:11:18,799
the gf fragmentation

2939
02:11:16,880 --> 02:11:21,199
there is either time to tell you what

2940
02:11:18,800 --> 02:11:24,800
what's coming after ethernet header

2941
02:11:21,199 --> 02:11:28,799
now with the gfh the next header value

2942
02:11:24,800 --> 02:11:31,920
in the e uh in the gfh

2943
02:11:28,800 --> 02:11:35,119
will be the the either either type

2944
02:11:31,920 --> 02:11:38,719
so right now now we put

2945
02:11:35,119 --> 02:11:41,839
put mpos back we don't have a either

2946
02:11:38,719 --> 02:11:41,840
type for mpos

2947
02:11:42,000 --> 02:11:46,880
that's why we need a mpos label uh to

2948
02:11:45,440 --> 02:11:49,519
indicate that gfh

2949
02:11:46,880 --> 02:11:52,159
follows i think that's what you mean and

2950
02:11:49,520 --> 02:11:54,239
that's already designed in this proposal

2951
02:11:52,159 --> 02:11:56,719
no the way that the way you would

2952
02:11:54,239 --> 02:11:59,280
normally

2953
02:11:56,719 --> 02:12:00,320
well what i was going to say is if we

2954
02:11:59,280 --> 02:12:03,440
did this hack

2955
02:12:00,320 --> 02:12:05,040
that you suggested for mpls

2956
02:12:03,440 --> 02:12:06,638
then the next header field could be

2957
02:12:05,040 --> 02:12:09,280
empty so that

2958
02:12:06,639 --> 02:12:10,560
we're not sneaking in a protocol type

2959
02:12:09,280 --> 02:12:12,880
although we're not sneaking in a

2960
02:12:10,560 --> 02:12:15,119
protocol type you're not saying that

2961
02:12:12,880 --> 02:12:17,040
because what the protocol people wanted

2962
02:12:15,119 --> 02:12:17,920
the people who wanted a protocol type in

2963
02:12:17,040 --> 02:12:20,880
mpls

2964
02:12:17,920 --> 02:12:22,079
wanted you to say this an evpn packet

2965
02:12:20,880 --> 02:12:24,960
it's ethernet

2966
02:12:22,079 --> 02:12:27,119
after the mpls stack or just an i you

2967
02:12:24,960 --> 02:12:27,119
know

2968
02:12:27,360 --> 02:12:30,639
and we're not doing that we're just

2969
02:12:28,719 --> 02:12:33,760
saying we broke the label stack

2970
02:12:30,639 --> 02:12:36,480
um into two parts and we're sort of

2971
02:12:33,760 --> 02:12:40,079
stitching them back together

2972
02:12:36,480 --> 02:12:42,879
but we could say that you know a gfh

2973
02:12:40,079 --> 02:12:44,639
label has the well-known semantics that

2974
02:12:42,880 --> 02:12:46,239
yes it has an end of stack bit but

2975
02:12:44,639 --> 02:12:48,159
there's actually one more label or there

2976
02:12:46,239 --> 02:12:50,879
are actually more labels operate

2977
02:12:48,159 --> 02:12:52,000
so once you get rid of the gfh header go

2978
02:12:50,880 --> 02:12:53,280
back to mpls

2979
02:12:52,000 --> 02:12:55,440
and that's the only thing that you would

2980
02:12:53,280 --> 02:12:58,480
do um i think

2981
02:12:55,440 --> 02:13:00,480
that might work we have to look at

2982
02:12:58,480 --> 02:13:03,598
other situations where we might want to

2983
02:13:00,480 --> 02:13:07,919
use this in the context of mpls

2984
02:13:03,599 --> 02:13:10,239
um and in that case you'd say

2985
02:13:07,920 --> 02:13:11,920
yeah don't use the next header field but

2986
02:13:10,239 --> 02:13:13,519
in the case that

2987
02:13:11,920 --> 02:13:16,480
jeffrey was talking about you would need

2988
02:13:13,520 --> 02:13:17,199
the next header field go ahead yeah so i

2989
02:13:16,480 --> 02:13:20,480
i just

2990
02:13:17,199 --> 02:13:24,159
think that uh we've got 20 years of uh

2991
02:13:20,480 --> 02:13:26,799
really clean architecture and uh i i i

2992
02:13:24,159 --> 02:13:28,000
it seems to me to be wrong to just

2993
02:13:26,800 --> 02:13:29,760
change that without

2994
02:13:28,000 --> 02:13:31,920
huge amounts of thought about the

2995
02:13:29,760 --> 02:13:35,599
implications and the ramifications

2996
02:13:31,920 --> 02:13:37,520
so so far what what we would normally do

2997
02:13:35,599 --> 02:13:39,440
you you've got us in the mpls world

2998
02:13:37,520 --> 02:13:39,840
you've got a sudower going between the

2999
02:13:39,440 --> 02:13:43,519
two

3000
02:13:39,840 --> 02:13:44,239
the two points yes you you decide that

3001
02:13:43,520 --> 02:13:47,520
you want

3002
02:13:44,239 --> 02:13:49,040
to uh have a fragmenting pseudo-wire so

3003
02:13:47,520 --> 02:13:51,119
normally what you do

3004
02:13:49,040 --> 02:13:53,840
is you tunnel the sudo wire over another

3005
02:13:51,119 --> 02:13:56,159
sudo wire wouldn't you

3006
02:13:53,840 --> 02:13:57,360
uh no you tunnel it over something that

3007
02:13:56,159 --> 02:14:00,559
you could actually

3008
02:13:57,360 --> 02:14:02,239
fragment so you'd normally i mean

3009
02:14:00,560 --> 02:14:03,840
supposing we created a fragmenting

3010
02:14:02,239 --> 02:14:07,119
pseudo wire which is

3011
02:14:03,840 --> 02:14:09,199
what um essentially a pseudo wire

3012
02:14:07,119 --> 02:14:10,480
supporting 4623 is

3013
02:14:09,199 --> 02:14:12,320
but you say you need this extra

3014
02:14:10,480 --> 02:14:12,879
identification field so we're going to

3015
02:14:12,320 --> 02:14:14,960
add

3016
02:14:12,880 --> 02:14:17,520
the identification field in now we're

3017
02:14:14,960 --> 02:14:21,040
completely clean in terms of

3018
02:14:17,520 --> 02:14:23,760
uh existing um designs and architectures

3019
02:14:21,040 --> 02:14:25,040
you you you create a pseudo wire between

3020
02:14:23,760 --> 02:14:27,199
these two endpoints

3021
02:14:25,040 --> 02:14:29,040
it's got this fragmentation property and

3022
02:14:27,199 --> 02:14:32,239
a property of the pseudo-wire label

3023
02:14:29,040 --> 02:14:33,840
is that it says what is underneath

3024
02:14:32,239 --> 02:14:35,280
that's the stamp that's that's the

3025
02:14:33,840 --> 02:14:36,480
architecture that we've had in place for

3026
02:14:35,280 --> 02:14:38,960
nearly 20 years

3027
02:14:36,480 --> 02:14:41,519
and i'm fine with doing something new if

3028
02:14:38,960 --> 02:14:43,360
something new is the right thing to do

3029
02:14:41,520 --> 02:14:45,199
but uh if you can do it with the

3030
02:14:43,360 --> 02:14:48,480
existing it's almost proved uh

3031
02:14:45,199 --> 02:14:50,239
extremely um valuable to to take a more

3032
02:14:48,480 --> 02:14:54,000
conservative approach

3033
02:14:50,239 --> 02:14:57,280
so far so here's the thing

3034
02:14:54,000 --> 02:15:01,280
um the idea is to

3035
02:14:57,280 --> 02:15:04,880
reuse the the fragmentation header

3036
02:15:01,280 --> 02:15:07,199
and while the immediate sort of

3037
02:15:04,880 --> 02:15:09,040
reason for doing this was an evpn over

3038
02:15:07,199 --> 02:15:12,079
mpls case

3039
02:15:09,040 --> 02:15:13,360
mkls doesn't have fragmentation so if

3040
02:15:12,079 --> 02:15:15,519
there was a way

3041
02:15:13,360 --> 02:15:17,280
that we could you know do generic

3042
02:15:15,520 --> 02:15:19,760
fragmentation for mpls

3043
02:15:17,280 --> 02:15:21,679
for ethernet for beer i don't know

3044
02:15:19,760 --> 02:15:22,960
enough about beer to talk about that but

3045
02:15:21,679 --> 02:15:25,040
jeffy does

3046
02:15:22,960 --> 02:15:27,280
then i think if we would then say we

3047
02:15:25,040 --> 02:15:29,119
have a generic mechanism what we need in

3048
02:15:27,280 --> 02:15:32,159
that generic mechanism

3049
02:15:29,119 --> 02:15:35,199
is a way to tell the outer thingy

3050
02:15:32,159 --> 02:15:36,638
um like if it was ethernet you use the

3051
02:15:35,199 --> 02:15:38,799
ether type to say there's an

3052
02:15:36,639 --> 02:15:40,480
there's a fragmenting header there and

3053
02:15:38,800 --> 02:15:42,159
then and then go back to

3054
02:15:40,480 --> 02:15:45,280
whatever you're doing so if you were

3055
02:15:42,159 --> 02:15:48,159
carrying an iss packet over ethernet

3056
02:15:45,280 --> 02:15:49,199
you would have an ether type of isis but

3057
02:15:48,159 --> 02:15:50,559
you would replace it with the

3058
02:15:49,199 --> 02:15:52,879
fragmenting thingy

3059
02:15:50,560 --> 02:15:54,159
and then you put the isis ether type in

3060
02:15:52,880 --> 02:15:57,360
the next header

3061
02:15:54,159 --> 02:15:59,280
so we're trying to keep the architecture

3062
02:15:57,360 --> 02:16:00,320
general so we could use it in multiple

3063
02:15:59,280 --> 02:16:03,440
cases

3064
02:16:00,320 --> 02:16:05,119
the specific case of a pseudo wire we

3065
02:16:03,440 --> 02:16:08,320
might be able to do something different

3066
02:16:05,119 --> 02:16:10,320
but if you wanted to or i mean there was

3067
02:16:08,320 --> 02:16:12,400
a proposal to do mpls sac

3068
02:16:10,320 --> 02:16:14,960
which is you know how do i carry an esd

3069
02:16:12,400 --> 02:16:17,280
header in mpls

3070
02:16:14,960 --> 02:16:18,719
without actually encoding it inside of

3071
02:16:17,280 --> 02:16:22,559
ipsec

3072
02:16:18,719 --> 02:16:25,119
so i i think the idea is to say

3073
02:16:22,560 --> 02:16:27,599
is this idea of a fragmenting header or

3074
02:16:25,119 --> 02:16:30,480
an esp header or whatever

3075
02:16:27,599 --> 02:16:31,199
sufficiently interesting to take it out

3076
02:16:30,480 --> 02:16:34,240
of the ip

3077
02:16:31,199 --> 02:16:35,840
context and put it in mpls put it in

3078
02:16:34,240 --> 02:16:37,920
ethernet put it in beer

3079
02:16:35,840 --> 02:16:40,558
maybe you know specifically for survives

3080
02:16:37,920 --> 02:16:43,439
maybe generally so that's basically

3081
02:16:40,558 --> 02:16:43,438
what we're looking at

3082
02:16:44,879 --> 02:16:48,799
uh yeah we've just got to meet echo um

3083
02:16:47,760 --> 02:16:50,880
note

3084
02:16:48,799 --> 02:16:50,879
so

3085
02:16:52,799 --> 02:16:57,358
i just think this is sufficiently

3086
02:16:54,318 --> 02:16:59,840
important and sufficiently fundamental

3087
02:16:57,359 --> 02:17:01,120
that we need a proper you know thought

3088
02:16:59,840 --> 02:17:03,200
process and uh

3089
02:17:01,120 --> 02:17:04,160
to decide what we're going to do because

3090
02:17:03,200 --> 02:17:07,519
so far we've not

3091
02:17:04,160 --> 02:17:09,920
needed to do this um and

3092
02:17:07,519 --> 02:17:12,840
so far we've had very clue g solutions

3093
02:17:09,920 --> 02:17:15,359
to fragmenting mpls

3094
02:17:12,840 --> 02:17:17,679
well normally you don't need to fragment

3095
02:17:15,359 --> 02:17:18,639
mpls because normally ip sorts it out

3096
02:17:17,679 --> 02:17:20,478
for you

3097
02:17:18,638 --> 02:17:22,398
i mean when i say it sorts out for you

3098
02:17:20,478 --> 02:17:24,638
pmtu discovery fails

3099
02:17:22,398 --> 02:17:25,519
uh a packet gets dropped or something

3100
02:17:24,638 --> 02:17:28,959
the pmt

3101
02:17:25,519 --> 02:17:31,599
discovery runs and um

3102
02:17:28,959 --> 02:17:33,279
you're back not needing to do the um the

3103
02:17:31,599 --> 02:17:35,519
fragmentation again

3104
02:17:33,280 --> 02:17:36,399
um i don't think that works for surewise

3105
02:17:35,519 --> 02:17:39,840
but anyway

3106
02:17:36,398 --> 02:17:42,799
we can we can have this discussion

3107
02:17:39,840 --> 02:17:43,840
um ipv6 running over pseudowire will do

3108
02:17:42,799 --> 02:17:48,000
exactly this

3109
02:17:43,840 --> 02:17:51,120
uh yes the the ip won't get through

3110
02:17:48,000 --> 02:17:57,840
and so it will say oh i've got a problem

3111
02:17:51,120 --> 02:17:57,840
what i would do is to reduce my mtu

3112
02:17:58,240 --> 02:18:02,000
that's how it works has always worked

3113
02:18:05,519 --> 02:18:08,960
it has to work it's the only way it can

3114
02:18:07,359 --> 02:18:12,639
work

3115
02:18:08,959 --> 02:18:12,959
and no one's complaining do you actually

3116
02:18:12,638 --> 02:18:16,718
get

3117
02:18:12,959 --> 02:18:20,478
an echo reply saying um

3118
02:18:16,718 --> 02:18:24,080
it broke i mean you're stuck

3119
02:18:20,478 --> 02:18:25,519
unless you inside the inside the pseudo

3120
02:18:24,080 --> 02:18:26,799
wire itself you won't but at the pseudo

3121
02:18:25,519 --> 02:18:29,840
wire end point

3122
02:18:26,799 --> 02:18:32,160
oh no i don't know how this doesn't work

3123
02:18:29,840 --> 02:18:34,000
i mean i've just complained about it in

3124
02:18:32,160 --> 02:18:34,799
the 20 years we've been doing this so it

3125
02:18:34,000 --> 02:18:37,040
must work no

3126
02:18:34,799 --> 02:18:39,039
we have but we have done it by you know

3127
02:18:37,040 --> 02:18:40,880
sticking it inside of ip

3128
02:18:39,040 --> 02:18:42,719
anyway i think we should get off i i

3129
02:18:40,879 --> 02:18:43,518
don't want the medical guys to get mad

3130
02:18:42,718 --> 02:18:46,638
at us

3131
02:18:43,519 --> 02:18:47,920
but but um i i don't disagree with you

3132
02:18:46,638 --> 02:18:49,759
that we should think through this

3133
02:18:47,920 --> 02:18:51,679
um i don't think we're trying to sneak a

3134
02:18:49,760 --> 02:18:53,519
protocol header inside this

3135
02:18:51,679 --> 02:18:55,200
we're just trying to say we broke the

3136
02:18:53,519 --> 02:18:56,639
label stack into two pieces please

3137
02:18:55,200 --> 02:18:58,399
stitch them back together

3138
02:18:56,638 --> 02:18:59,839
there are lots of people who want you to

3139
02:18:58,398 --> 02:19:01,679
do that along the years

3140
02:18:59,840 --> 02:19:03,040
if we're gonna do it we should do it

3141
02:19:01,679 --> 02:19:06,080
properly

3142
02:19:03,040 --> 02:19:06,719
okay sure all right okay talk to you

3143
02:19:06,080 --> 02:19:21,840
soon

3144
02:19:06,718 --> 02:19:21,839
enjoy your jet lag or whatever thank you

3145
02:19:26,318 --> 02:19:28,398
you

