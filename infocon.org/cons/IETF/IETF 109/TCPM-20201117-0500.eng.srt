1
00:00:05,120 --> 00:00:09,280
king

2
00:00:05,920 --> 00:00:31,840
and in this shared uh editor used for

3
00:00:09,280 --> 00:00:31,839
note taking okay

4
00:00:49,280 --> 00:00:59,840
so should we give people a minute or two

5
00:00:51,520 --> 00:00:59,840
to join

6
00:02:34,840 --> 00:02:37,840
um

7
00:03:10,000 --> 00:03:13,120
so i guess we can start

8
00:03:13,200 --> 00:03:20,879
welcome everybody to the tcpm meeting

9
00:03:16,879 --> 00:03:24,959
um we have three coaches

10
00:03:20,879 --> 00:03:28,798
yoshi was running the slides today

11
00:03:24,959 --> 00:03:32,080
michael scharf and myself um

12
00:03:28,799 --> 00:03:35,440
next slide

13
00:03:32,080 --> 00:03:36,799
is the note well um i put everything on

14
00:03:35,440 --> 00:03:40,640
there you have seen it

15
00:03:36,799 --> 00:03:43,040
um in other working groups and uh

16
00:03:40,640 --> 00:03:43,679
if you want to read it uh with more

17
00:03:43,040 --> 00:03:47,440
details

18
00:03:43,680 --> 00:03:52,239
using the links you can go to the url

19
00:03:47,440 --> 00:03:52,239
shown on the top of the page next slide

20
00:03:53,519 --> 00:04:00,879
gory is taking notes thank you for that

21
00:03:57,439 --> 00:04:05,280
michael is looking at the

22
00:04:00,879 --> 00:04:05,280
java and relaying

23
00:04:05,519 --> 00:04:12,080
any input there in case you

24
00:04:08,879 --> 00:04:16,798
are submitting a draft

25
00:04:12,080 --> 00:04:20,079
where you expect tcpm to look at

26
00:04:16,798 --> 00:04:23,198
use tcpm in the name of the draft

27
00:04:20,079 --> 00:04:25,600
so we can find it easily using the data

28
00:04:23,199 --> 00:04:29,919
tracker tool

29
00:04:25,600 --> 00:04:33,600
next slide this is the agenda

30
00:04:29,919 --> 00:04:35,840
um we have a packed agenda so

31
00:04:33,600 --> 00:04:38,080
we have 120 minutes and we have

32
00:04:35,840 --> 00:04:39,599
presentations for 120 minutes

33
00:04:38,080 --> 00:04:42,159
we started with the working group status

34
00:04:39,600 --> 00:04:45,280
hopefully not for 15 minutes

35
00:04:42,160 --> 00:04:47,199
we have presentations on four working

36
00:04:45,280 --> 00:04:50,320
group documents

37
00:04:47,199 --> 00:04:54,160
the yang one then

38
00:04:50,320 --> 00:04:58,000
the two ecn related ones

39
00:04:54,160 --> 00:05:01,360
and then rc 793 biz

40
00:04:58,000 --> 00:05:04,639
from west and then we have um

41
00:05:01,360 --> 00:05:08,080
a couple of individual documents drafts

42
00:05:04,639 --> 00:05:10,479
um tcp egg rate we have seen that

43
00:05:08,080 --> 00:05:10,479
already

44
00:05:11,280 --> 00:05:19,359
timestamp extension which is new

45
00:05:15,280 --> 00:05:22,880
then we have mptcp presentations

46
00:05:19,360 --> 00:05:26,000
rob e and then two

47
00:05:22,880 --> 00:05:30,960
further documents for mptcp

48
00:05:26,000 --> 00:05:35,280
then we have a well

49
00:05:30,960 --> 00:05:38,200
short presentation on rfc 6937

50
00:05:35,280 --> 00:05:39,758
bis which is proportional rate reduction

51
00:05:38,200 --> 00:05:42,960
[Music]

52
00:05:39,759 --> 00:05:47,520
this is basically the beginning of this

53
00:05:42,960 --> 00:05:51,120
process and then the last presentation

54
00:05:47,520 --> 00:05:54,960
is not about a draft but about a paper

55
00:05:51,120 --> 00:05:59,039
tcpls i should note

56
00:05:54,960 --> 00:05:59,039
um next slide

57
00:05:59,680 --> 00:06:04,560
this is the the status of the working

58
00:06:02,080 --> 00:06:05,680
group documents we have the rto consider

59
00:06:04,560 --> 00:06:08,479
which is an

60
00:06:05,680 --> 00:06:10,080
auth 48 so it's done from the working

61
00:06:08,479 --> 00:06:13,280
group perspective

62
00:06:10,080 --> 00:06:14,240
we have the rack document and the slide

63
00:06:13,280 --> 00:06:18,479
is wrong

64
00:06:14,240 --> 00:06:19,280
the uh the isg last call was triggered i

65
00:06:18,479 --> 00:06:22,479
think

66
00:06:19,280 --> 00:06:24,880
an hour ago so this is also

67
00:06:22,479 --> 00:06:25,520
past handling of the working group we

68
00:06:24,880 --> 00:06:29,199
have

69
00:06:25,520 --> 00:06:32,240
rfc 793 this which is

70
00:06:29,199 --> 00:06:33,930
uh it's a wars and working group last

71
00:06:32,240 --> 00:06:35,199
call so

72
00:06:33,930 --> 00:06:36,880
[Music]

73
00:06:35,199 --> 00:06:39,520
we haven't officially stopped the

74
00:06:36,880 --> 00:06:41,919
working through class core but

75
00:06:39,520 --> 00:06:44,318
it was running and we have an update on

76
00:06:41,919 --> 00:06:47,120
this document

77
00:06:44,319 --> 00:06:48,639
for the presentation on this then we

78
00:06:47,120 --> 00:06:52,800
have um

79
00:06:48,639 --> 00:06:54,720
the 21 40 bis

80
00:06:52,800 --> 00:06:56,400
um the authors are working on it we

81
00:06:54,720 --> 00:06:57,759
don't have an active draft on it that's

82
00:06:56,400 --> 00:07:01,198
why it's red

83
00:06:57,759 --> 00:07:05,039
um we have accurate ecn and generalized

84
00:07:01,199 --> 00:07:05,039
dcn where we are presentations

85
00:07:05,199 --> 00:07:10,479
from bob we have tcp edo we've also

86
00:07:08,160 --> 00:07:10,479
known

87
00:07:10,639 --> 00:07:14,800
active document right now so it's with

88
00:07:12,560 --> 00:07:18,319
the authors

89
00:07:14,800 --> 00:07:21,360
and we have hivestar plus plus um

90
00:07:18,319 --> 00:07:22,960
and the yang document i put the

91
00:07:21,360 --> 00:07:26,400
milestones in

92
00:07:22,960 --> 00:07:28,239
parenthesis uh and you see i

93
00:07:26,400 --> 00:07:30,159
it's good to to make this overview

94
00:07:28,240 --> 00:07:31,440
because we've figured out that we don't

95
00:07:30,160 --> 00:07:34,240
have a milestone for the

96
00:07:31,440 --> 00:07:35,840
yang document but we will discuss this

97
00:07:34,240 --> 00:07:38,240
uh when we come to that

98
00:07:35,840 --> 00:07:39,758
i should also note that uh so this is

99
00:07:38,240 --> 00:07:42,240
the the list of

100
00:07:39,759 --> 00:07:43,360
current working group documents um

101
00:07:42,240 --> 00:07:46,960
upcoming work

102
00:07:43,360 --> 00:07:50,319
um in in the sense of biz documents

103
00:07:46,960 --> 00:07:53,680
we have also um um

104
00:07:50,319 --> 00:07:57,280
83 12 bis which is cubic

105
00:07:53,680 --> 00:07:58,879
um work was started on that but we

106
00:07:57,280 --> 00:07:59,440
haven't seen the presentation on that i

107
00:07:58,879 --> 00:08:02,080
think it's

108
00:07:59,440 --> 00:08:05,000
uh up for next for the next meeting and

109
00:08:02,080 --> 00:08:08,159
we still have on the to-do list uh

110
00:08:05,000 --> 00:08:10,639
3465 this which is abc

111
00:08:08,160 --> 00:08:12,000
ah we haven't seen it for that but this

112
00:08:10,639 --> 00:08:15,520
is upcoming so this

113
00:08:12,000 --> 00:08:18,639
this is on the radar um

114
00:08:15,520 --> 00:08:20,479
next slide and i think it's

115
00:08:18,639 --> 00:08:23,360
it's all we have for for the working

116
00:08:20,479 --> 00:08:23,359
group slides right

117
00:08:24,840 --> 00:08:31,758
yeah uh so

118
00:08:27,840 --> 00:08:41,760
that would mean um any agenda bashing

119
00:08:31,759 --> 00:08:45,360
if you go back one slide

120
00:08:41,760 --> 00:08:45,360
alaris you want the screen

121
00:08:48,959 --> 00:08:55,839
we can't hear you we

122
00:08:52,320 --> 00:08:55,839
can't hear you

123
00:08:57,920 --> 00:09:02,399
how about now now it's much better hey

124
00:09:01,040 --> 00:09:03,839
good morning from finland

125
00:09:02,399 --> 00:09:05,360
i don't want to bash the agenda i just

126
00:09:03,839 --> 00:09:05,920
want to quickly point out that we

127
00:09:05,360 --> 00:09:07,760
started

128
00:09:05,920 --> 00:09:10,479
the work you probably saw the email to

129
00:09:07,760 --> 00:09:14,640
revise rfc 8312 which is

130
00:09:10,480 --> 00:09:16,800
cubic um and there's a repo for it and

131
00:09:14,640 --> 00:09:18,000
there was a dash 0 individual draft

132
00:09:16,800 --> 00:09:19,599
yesterday

133
00:09:18,000 --> 00:09:21,279
there's not a ton of changes that we're

134
00:09:19,600 --> 00:09:24,959
planning on making it's basically

135
00:09:21,279 --> 00:09:26,880
bringing the spec back in line with what

136
00:09:24,959 --> 00:09:28,719
at least is doing and hopefully we can

137
00:09:26,880 --> 00:09:30,399
hear from windows and other

138
00:09:28,720 --> 00:09:33,200
implementations that

139
00:09:30,399 --> 00:09:34,320
um they're doing also what linux is

140
00:09:33,200 --> 00:09:36,399
currently doing or

141
00:09:34,320 --> 00:09:38,560
we can also see if there's other changes

142
00:09:36,399 --> 00:09:41,200
that we might want to roll into the spec

143
00:09:38,560 --> 00:09:42,560
and then push to linux um i expect this

144
00:09:41,200 --> 00:09:44,080
to move pretty quickly

145
00:09:42,560 --> 00:09:45,839
um and obviously we're going to ask for

146
00:09:44,080 --> 00:09:48,800
working group adoption at some point

147
00:09:45,839 --> 00:09:49,120
soon um which i hope will be a non-event

148
00:09:48,800 --> 00:09:50,719
and

149
00:09:49,120 --> 00:09:52,080
and this could this could basically be

150
00:09:50,720 --> 00:09:53,519
done in a couple of weeks or a couple of

151
00:09:52,080 --> 00:09:55,040
months i don't i don't think this will

152
00:09:53,519 --> 00:09:57,279
need a long time so

153
00:09:55,040 --> 00:09:58,640
um if you're interested in this i know

154
00:09:57,279 --> 00:10:00,320
that a bunch of quick people are

155
00:09:58,640 --> 00:10:01,839
implementing cubic for the first time

156
00:10:00,320 --> 00:10:03,839
based on the rfc and they've

157
00:10:01,839 --> 00:10:05,360
given some feedback if you're interested

158
00:10:03,839 --> 00:10:06,800
in this sort of please follow along in

159
00:10:05,360 --> 00:10:10,079
the github repo and

160
00:10:06,800 --> 00:10:10,079
interact there thank you

161
00:10:13,440 --> 00:10:20,000
thank you um can you actually can you go

162
00:10:17,040 --> 00:10:22,079
back one slide yeah but beforehand

163
00:10:20,000 --> 00:10:23,920
rather i'd like to know chris monk we

164
00:10:22,079 --> 00:10:27,760
have one question

165
00:10:23,920 --> 00:10:27,760
what's the status of the draft

166
00:10:28,160 --> 00:10:33,839
of which that the cubic one

167
00:10:43,360 --> 00:10:48,800
okay maybe move on to the next one which

168
00:10:46,720 --> 00:10:50,480
so the status of which draft are you are

169
00:10:48,800 --> 00:10:53,839
you asking for

170
00:10:50,480 --> 00:10:55,519
the cubic one yeah so that's five like

171
00:10:53,839 --> 00:10:58,160
uh

172
00:10:55,519 --> 00:10:59,120
right the status at the moment is an

173
00:10:58,160 --> 00:11:02,160
individual

174
00:10:59,120 --> 00:11:04,480
draft and oh are you asking

175
00:11:02,160 --> 00:11:06,560
um about what because it says standards

176
00:11:04,480 --> 00:11:09,040
track

177
00:11:06,560 --> 00:11:10,959
is that what you're asking because you

178
00:11:09,040 --> 00:11:12,399
know

179
00:11:10,959 --> 00:11:14,000
the structure of the document may be

180
00:11:12,399 --> 00:11:15,360
changed depends on the

181
00:11:14,000 --> 00:11:17,279
heat and the status it could be

182
00:11:15,360 --> 00:11:20,560
information it could be you know

183
00:11:17,279 --> 00:11:22,320
proper standard yeah so the

184
00:11:20,560 --> 00:11:24,000
so the structure of the document at the

185
00:11:22,320 --> 00:11:27,200
moment is exactly like um

186
00:11:24,000 --> 00:11:29,760
we had an rfc 8312 so that diffing

187
00:11:27,200 --> 00:11:31,200
the changes in the future is easier um i

188
00:11:29,760 --> 00:11:32,399
optimistically i didn't want to

189
00:11:31,200 --> 00:11:34,720
have a long discussion about it so i

190
00:11:32,399 --> 00:11:36,640
didn't say anything about it i submitted

191
00:11:34,720 --> 00:11:38,160
it with a target for standard strike

192
00:11:36,640 --> 00:11:40,319
simply because i think

193
00:11:38,160 --> 00:11:42,000
it's time for cubic became a standard

194
00:11:40,320 --> 00:11:43,440
strike document i know we typically

195
00:11:42,000 --> 00:11:45,760
don't do this for congestion control

196
00:11:43,440 --> 00:11:47,839
algorithms but for this one it

197
00:11:45,760 --> 00:11:49,279
it kind of seems like a no-brainer and

198
00:11:47,839 --> 00:11:50,880
we can certainly discuss this when it

199
00:11:49,279 --> 00:11:52,720
comes to adoption time

200
00:11:50,880 --> 00:11:54,399
um i don't feel strongly about this but

201
00:11:52,720 --> 00:11:56,800
i at least wanted to try and make the

202
00:11:54,399 --> 00:11:59,839
argument that we should do that

203
00:11:56,800 --> 00:11:59,839
okay thank you

204
00:12:01,600 --> 00:12:05,920
okay so yoshi can you go back one slide

205
00:12:08,839 --> 00:12:16,560
listen i think that this one perfect

206
00:12:12,639 --> 00:12:20,079
so um anyone

207
00:12:16,560 --> 00:12:20,079
wanting to change the agenda

208
00:12:22,880 --> 00:12:27,360
if that's not the case then we start

209
00:12:24,880 --> 00:12:30,160
with the yang presentation

210
00:12:27,360 --> 00:12:30,800
maj are you there i think you are there

211
00:12:30,160 --> 00:12:33,120
yep yes

212
00:12:30,800 --> 00:12:35,680
i am and yoshi is presenting the slides

213
00:12:33,120 --> 00:12:35,680
for everyone

214
00:12:36,839 --> 00:12:39,839
okay

215
00:12:51,839 --> 00:12:59,600
all right so i will be talking about uh

216
00:12:55,279 --> 00:13:02,399
the updates to the yang model draft

217
00:12:59,600 --> 00:13:04,800
uh since it became a workgroup document

218
00:13:02,399 --> 00:13:06,320
i'm sorry it says zero zero here but

219
00:13:04,800 --> 00:13:09,199
actually it means

220
00:13:06,320 --> 00:13:10,639
it includes zero zero and zero one zero

221
00:13:09,200 --> 00:13:13,680
zero doesn't have too many

222
00:13:10,639 --> 00:13:16,560
i don't have any changes per se

223
00:13:13,680 --> 00:13:16,560
next slide please

224
00:13:16,800 --> 00:13:22,319
all right as i said zero zero was the

225
00:13:19,279 --> 00:13:24,079
individual draft that was

226
00:13:22,320 --> 00:13:25,839
just the name change was made and

227
00:13:24,079 --> 00:13:27,359
submitted so

228
00:13:25,839 --> 00:13:29,680
really no change from the individual

229
00:13:27,360 --> 00:13:34,720
draft and the last one that was

230
00:13:29,680 --> 00:13:36,560
discussed next slide please

231
00:13:34,720 --> 00:13:38,639
so the updates between zero zero and

232
00:13:36,560 --> 00:13:41,119
zero one are

233
00:13:38,639 --> 00:13:43,440
mostly to address the the comments that

234
00:13:41,120 --> 00:13:45,040
we received on the mailing list

235
00:13:43,440 --> 00:13:47,680
we'll talk a little bit about the

236
00:13:45,040 --> 00:13:48,319
include tcp options versus ignore tcp

237
00:13:47,680 --> 00:13:51,359
options

238
00:13:48,320 --> 00:13:54,320
in the next slide um

239
00:13:51,360 --> 00:13:55,279
sorry i'm not quite ready to go to the

240
00:13:54,320 --> 00:13:59,199
next slide

241
00:13:55,279 --> 00:14:02,639
okay um we for the accept

242
00:13:59,199 --> 00:14:04,719
ao mismatch versus accept key mismatch

243
00:14:02,639 --> 00:14:06,720
we accepted that change and have

244
00:14:04,720 --> 00:14:09,920
incorporated that

245
00:14:06,720 --> 00:14:12,399
in the upcoming changes

246
00:14:09,920 --> 00:14:13,439
and then there was a request to add the

247
00:14:12,399 --> 00:14:16,639
complete

248
00:14:13,440 --> 00:14:19,360
tree diagram for the model which

249
00:14:16,639 --> 00:14:21,279
i believe we had done in the appendix of

250
00:14:19,360 --> 00:14:24,639
the draft

251
00:14:21,279 --> 00:14:27,760
um and as a process we supposed to have

252
00:14:24,639 --> 00:14:28,240
a idea of copyright statements in the

253
00:14:27,760 --> 00:14:31,839
model

254
00:14:28,240 --> 00:14:35,920
so went ahead and added that

255
00:14:31,839 --> 00:14:37,920
um we decided that i think we

256
00:14:35,920 --> 00:14:39,439
the draft needed an additional reference

257
00:14:37,920 --> 00:14:42,959
to the keychain model

258
00:14:39,440 --> 00:14:44,160
as described in rfc 8177 because that is

259
00:14:42,959 --> 00:14:46,479
something

260
00:14:44,160 --> 00:14:49,600
that would be needed if anyone was

261
00:14:46,480 --> 00:14:52,639
trying to configure tcpao

262
00:14:49,600 --> 00:14:55,760
and then we opportunistically looked

263
00:14:52,639 --> 00:14:57,519
took the draft that draft touch tcpm

264
00:14:55,760 --> 00:15:01,760
aortas vectors

265
00:14:57,519 --> 00:15:05,279
has some good examples on ao

266
00:15:01,760 --> 00:15:05,839
and we took uh that as a basis for

267
00:15:05,279 --> 00:15:07,439
giving

268
00:15:05,839 --> 00:15:09,839
setting up an example of how to

269
00:15:07,440 --> 00:15:14,639
configure tcpao

270
00:15:09,839 --> 00:15:18,000
so that example is now also in the draft

271
00:15:14,639 --> 00:15:20,560
um finally the security considerations

272
00:15:18,000 --> 00:15:25,839
section has been updated to

273
00:15:20,560 --> 00:15:29,199
as um required by rfc

274
00:15:25,839 --> 00:15:32,079
and guidelines to the authors of these

275
00:15:29,199 --> 00:15:33,439
yang model traps and we have gone ahead

276
00:15:32,079 --> 00:15:36,079
and identified nodes

277
00:15:33,440 --> 00:15:37,279
that we believe are vulnerable for

278
00:15:36,079 --> 00:15:42,239
either reading writing

279
00:15:37,279 --> 00:15:42,240
or execution next slide

280
00:15:43,040 --> 00:15:46,639
so there was some discussion on the

281
00:15:44,880 --> 00:15:50,320
mailing list about

282
00:15:46,639 --> 00:15:53,199
what to call uh essentially when tcpaos

283
00:15:50,320 --> 00:15:57,440
include tcp options

284
00:15:53,199 --> 00:16:00,639
so rfc 7950 which is the yang 1.1

285
00:15:57,440 --> 00:16:01,440
rc has the following definition for

286
00:16:00,639 --> 00:16:03,120
default

287
00:16:01,440 --> 00:16:04,880
not definition but it has the following

288
00:16:03,120 --> 00:16:06,399
description for default value of the

289
00:16:04,880 --> 00:16:09,680
leaf

290
00:16:06,399 --> 00:16:11,680
so it's a little the value of the leaf

291
00:16:09,680 --> 00:16:12,719
you can almost imagine it's what the

292
00:16:11,680 --> 00:16:14,880
server would use

293
00:16:12,720 --> 00:16:15,839
if the leaf did not exist in the data

294
00:16:14,880 --> 00:16:18,079
tree

295
00:16:15,839 --> 00:16:19,519
meaning as the data tree what i mean

296
00:16:18,079 --> 00:16:22,479
what is passed down

297
00:16:19,519 --> 00:16:24,320
as configuration so it doesn't exist

298
00:16:22,480 --> 00:16:25,839
that's what the default value will be

299
00:16:24,320 --> 00:16:29,519
used

300
00:16:25,839 --> 00:16:31,360
so with that in mind um and based on

301
00:16:29,519 --> 00:16:33,600
what's being discussed in the mailing

302
00:16:31,360 --> 00:16:35,680
list it seems the consensus

303
00:16:33,600 --> 00:16:38,480
is around setting the node to default

304
00:16:35,680 --> 00:16:40,319
true but keeping the name include tcp

305
00:16:38,480 --> 00:16:44,000
options

306
00:16:40,320 --> 00:16:46,480
um now some have suggested well

307
00:16:44,000 --> 00:16:47,519
why not just rename include tcp options

308
00:16:46,480 --> 00:16:51,360
itself

309
00:16:47,519 --> 00:16:52,399
because the word include is a key word

310
00:16:51,360 --> 00:16:55,600
in yang

311
00:16:52,399 --> 00:16:57,839
and it's used to include other models

312
00:16:55,600 --> 00:16:59,519
but its meaning here is different and in

313
00:16:57,839 --> 00:17:03,040
my mind at least it's clear

314
00:16:59,519 --> 00:17:05,919
so um if you do want to change it

315
00:17:03,040 --> 00:17:06,879
what are the options we haven't run i

316
00:17:05,919 --> 00:17:10,000
think

317
00:17:06,880 --> 00:17:13,600
joe mentioned options

318
00:17:10,000 --> 00:17:15,520
to rename it to options covered by mac

319
00:17:13,599 --> 00:17:17,119
so we can discuss that so i'll pause

320
00:17:15,520 --> 00:17:19,280
there for a minute

321
00:17:17,119 --> 00:17:22,159
and see if anyone has any questions

322
00:17:19,280 --> 00:17:22,160
before i proceed

323
00:17:28,160 --> 00:17:35,039
okay as

324
00:17:31,280 --> 00:17:39,760
no questions uh so let's move to the

325
00:17:35,039 --> 00:17:39,760
i think what's the final slide

326
00:17:40,000 --> 00:17:44,320
all right so as soon as next steps are

327
00:17:41,840 --> 00:17:46,000
concerned uh we're looking at possible

328
00:17:44,320 --> 00:17:49,120
implementations of the model

329
00:17:46,000 --> 00:17:51,280
on in linux and then

330
00:17:49,120 --> 00:17:53,280
and if that happens we'll present the

331
00:17:51,280 --> 00:17:55,918
results of that implementation in this

332
00:17:53,280 --> 00:17:55,918
working group

333
00:17:56,160 --> 00:18:04,400
and that's pretty much it thank you

334
00:18:00,080 --> 00:18:04,399
um questions

335
00:18:07,440 --> 00:18:12,640
so we are we are missing a milestone so

336
00:18:10,320 --> 00:18:16,240
we we adopted the document but we missed

337
00:18:12,640 --> 00:18:19,520
adding a milestone to uh

338
00:18:16,240 --> 00:18:22,320
to the working group so this

339
00:18:19,520 --> 00:18:23,200
we had some sort of discussion um

340
00:18:22,320 --> 00:18:26,720
yesterday so

341
00:18:23,200 --> 00:18:28,000
i would suggest a milestone of april

342
00:18:26,720 --> 00:18:31,600
next year

343
00:18:28,000 --> 00:18:32,400
which allows another feedback round on

344
00:18:31,600 --> 00:18:34,799
at the next

345
00:18:32,400 --> 00:18:36,880
tcpm meet or at the tcpa meeting of the

346
00:18:34,799 --> 00:18:38,240
next ietf and then going to work into

347
00:18:36,880 --> 00:18:40,799
class call

348
00:18:38,240 --> 00:18:40,799
are there

349
00:18:41,679 --> 00:18:45,520
comments on that milestone

350
00:18:51,120 --> 00:18:55,199
if not then we will negotiate with the

351
00:18:54,000 --> 00:18:59,520
ad

352
00:18:55,200 --> 00:19:03,600
and thank you for the presentation

353
00:18:59,520 --> 00:19:05,679
so the next is bob

354
00:19:03,600 --> 00:19:08,000
bobset has two presentations more

355
00:19:05,679 --> 00:19:08,960
accurate ecn feedback and tcpm in ecm

356
00:19:08,000 --> 00:19:13,200
plus

357
00:19:08,960 --> 00:19:17,440
um he has one set of slides so

358
00:19:13,200 --> 00:19:17,440
um yeah she can bring that up

359
00:19:21,200 --> 00:19:28,000
hi can you hear me perfect

360
00:19:25,039 --> 00:19:29,600
good well um these slides are actually

361
00:19:28,000 --> 00:19:32,799
in the opposite order to

362
00:19:29,600 --> 00:19:33,840
the agenda so but um yeah we'll go

363
00:19:32,799 --> 00:19:34,960
straight to that one then we'll jump to

364
00:19:33,840 --> 00:19:38,000
the first one

365
00:19:34,960 --> 00:19:40,799
um okay so this is a status

366
00:19:38,000 --> 00:19:42,880
update on um more accurate ecn feedback

367
00:19:40,799 --> 00:19:46,480
in tcp the draft there is 13

368
00:19:42,880 --> 00:19:49,840
next slide please um

369
00:19:46,480 --> 00:19:49,840
a very quick recap

370
00:19:49,919 --> 00:19:56,320
explicit congestion notification um

371
00:19:53,120 --> 00:19:57,600
feedback in original tcp only allowed

372
00:19:56,320 --> 00:20:00,639
for one

373
00:19:57,600 --> 00:20:01,918
or more um feedback of congestion

374
00:20:00,640 --> 00:20:04,320
indications per

375
00:20:01,919 --> 00:20:06,240
round trip because that was all tcp

376
00:20:04,320 --> 00:20:10,559
needed at the time but um

377
00:20:06,240 --> 00:20:10,559
this is to allow more than one next

378
00:20:12,640 --> 00:20:17,120
the um yeah sorry next

379
00:20:17,360 --> 00:20:23,520
yep so essentially there's two fields

380
00:20:21,120 --> 00:20:25,199
um in the accuracy and protocol a three

381
00:20:23,520 --> 00:20:28,799
bit field in the main header

382
00:20:25,200 --> 00:20:31,440
um repurposing three flag bits

383
00:20:28,799 --> 00:20:32,840
um to make a counter after the handshake

384
00:20:31,440 --> 00:20:35,600
and an option

385
00:20:32,840 --> 00:20:38,639
next

386
00:20:35,600 --> 00:20:41,918
so um activity since

387
00:20:38,640 --> 00:20:42,960
the last update which was in april um

388
00:20:41,919 --> 00:20:46,640
you'll see there's been quite a few

389
00:20:42,960 --> 00:20:49,840
drafts sorry you probably can't read

390
00:20:46,640 --> 00:20:50,640
that image at the top but it um says

391
00:20:49,840 --> 00:20:54,320
that in

392
00:20:50,640 --> 00:20:56,080
october um if you read the text

393
00:20:54,320 --> 00:20:57,360
the um there was just some minor

394
00:20:56,080 --> 00:21:00,399
editorial fixes and

395
00:20:57,360 --> 00:21:02,639
that that reminded michael that um

396
00:21:00,400 --> 00:21:03,840
i hadn't dealt with the field order

397
00:21:02,640 --> 00:21:08,960
which i thought i had

398
00:21:03,840 --> 00:21:11,280
so um i dealt with that and also

399
00:21:08,960 --> 00:21:12,640
um at the same time realized the reason

400
00:21:11,280 --> 00:21:16,399
i hadn't dealt with it was because i

401
00:21:12,640 --> 00:21:19,360
found another um to-do list uh

402
00:21:16,400 --> 00:21:20,559
my to-do list had a fork in it um so

403
00:21:19,360 --> 00:21:22,719
there were two other things

404
00:21:20,559 --> 00:21:24,799
which i will i have separate slides on

405
00:21:22,720 --> 00:21:28,640
so i'll go straight to the next

406
00:21:24,799 --> 00:21:32,000
um slide please

407
00:21:28,640 --> 00:21:35,520
yeah so this was what michael wanted

408
00:21:32,000 --> 00:21:38,880
um to deal with the field order

409
00:21:35,520 --> 00:21:43,280
which previously had um um

410
00:21:38,880 --> 00:21:44,960
the receiving implementation um

411
00:21:43,280 --> 00:21:46,480
taking the order from the first the

412
00:21:44,960 --> 00:21:49,919
initial value which

413
00:21:46,480 --> 00:21:53,120
was um fragile to implement

414
00:21:49,919 --> 00:21:56,159
so um i've switched

415
00:21:53,120 --> 00:21:59,600
to a different way of doing it which is

416
00:21:56,159 --> 00:22:02,960
much simpler suggested by michael

417
00:21:59,600 --> 00:22:05,600
and that's to just use two option kinds

418
00:22:02,960 --> 00:22:07,360
um one for each order you'll see here

419
00:22:05,600 --> 00:22:09,360
the problem is that

420
00:22:07,360 --> 00:22:10,959
we want to be able to use either one two

421
00:22:09,360 --> 00:22:12,320
or three fields that's where the square

422
00:22:10,960 --> 00:22:15,919
brackets are there

423
00:22:12,320 --> 00:22:20,240
in inside the fields um

424
00:22:15,919 --> 00:22:22,559
and so but but depending on which

425
00:22:20,240 --> 00:22:23,280
counter is changing whether it's the

426
00:22:22,559 --> 00:22:26,240
echoing

427
00:22:23,280 --> 00:22:27,678
sd0 or st1 depending on which one is

428
00:22:26,240 --> 00:22:30,720
changing more often

429
00:22:27,679 --> 00:22:31,520
um you you the implementation might want

430
00:22:30,720 --> 00:22:35,039
to use

431
00:22:31,520 --> 00:22:38,320
a different order to for efficiency

432
00:22:35,039 --> 00:22:40,240
so you've got each tv 0 condition is

433
00:22:38,320 --> 00:22:41,360
experienced in east d1 or the other way

434
00:22:40,240 --> 00:22:43,840
around east he won

435
00:22:41,360 --> 00:22:45,199
congestion experience and he sees zero

436
00:22:43,840 --> 00:22:48,399
um

437
00:22:45,200 --> 00:22:51,600
so the rest of the slide just explains

438
00:22:48,400 --> 00:22:52,880
um the process that we went through to

439
00:22:51,600 --> 00:22:56,719
get to this

440
00:22:52,880 --> 00:22:58,880
decision there were two alternatives

441
00:22:56,720 --> 00:23:02,080
um either the uh well two main

442
00:22:58,880 --> 00:23:05,840
alternatives either two option kinds or

443
00:23:02,080 --> 00:23:08,799
um adding a flags bite um

444
00:23:05,840 --> 00:23:10,639
which elbow proposed and he had a use

445
00:23:08,799 --> 00:23:13,600
for one of the flags

446
00:23:10,640 --> 00:23:15,039
um i've said no other proposals were

447
00:23:13,600 --> 00:23:16,559
forthcoming that's um

448
00:23:15,039 --> 00:23:19,360
michael's pointed out that's wrong since

449
00:23:16,559 --> 00:23:22,799
i wrote these slides on the list

450
00:23:19,360 --> 00:23:26,879
um that there was one where

451
00:23:22,799 --> 00:23:29,360
you could have a flag um an extra

452
00:23:26,880 --> 00:23:30,480
byte for one of the orders and not the

453
00:23:29,360 --> 00:23:31,520
other so that you could use the length

454
00:23:30,480 --> 00:23:34,799
field

455
00:23:31,520 --> 00:23:37,039
instead of the kind field um i'll come

456
00:23:34,799 --> 00:23:39,918
on to that

457
00:23:37,039 --> 00:23:41,120
so the concern of not having a flags

458
00:23:39,919 --> 00:23:45,039
bite is you haven't

459
00:23:41,120 --> 00:23:48,320
got future extensibility um

460
00:23:45,039 --> 00:23:50,000
but the downside of that is

461
00:23:48,320 --> 00:23:52,158
you have to burn one bite of option

462
00:23:50,000 --> 00:23:54,640
space on most packets

463
00:23:52,159 --> 00:23:57,120
um because you're sending this option um

464
00:23:54,640 --> 00:24:00,799
quite frequently

465
00:23:57,120 --> 00:24:03,360
um and in the draft for

466
00:24:00,799 --> 00:24:04,080
i think since the beginning but it was

467
00:24:03,360 --> 00:24:06,240
probably added

468
00:24:04,080 --> 00:24:08,639
maybe you know draft one or something

469
00:24:06,240 --> 00:24:11,440
there's been a forward compatibility

470
00:24:08,640 --> 00:24:12,720
um which would allow you to add a flags

471
00:24:11,440 --> 00:24:15,600
bite

472
00:24:12,720 --> 00:24:17,279
by saying that the the implement the

473
00:24:15,600 --> 00:24:18,719
receiving implementation has to

474
00:24:17,279 --> 00:24:22,080
understand

475
00:24:18,720 --> 00:24:25,360
lengths that are not valid um for the

476
00:24:22,080 --> 00:24:27,520
for the current specification and it

477
00:24:25,360 --> 00:24:29,199
just reads three byte fields

478
00:24:27,520 --> 00:24:31,120
or at least up to three three byte

479
00:24:29,200 --> 00:24:34,320
fields um

480
00:24:31,120 --> 00:24:37,199
uh and ignores the rest and so

481
00:24:34,320 --> 00:24:37,918
if you had lengths five eight or seven

482
00:24:37,200 --> 00:24:39,600
um

483
00:24:37,919 --> 00:24:41,279
you would read the three bite fields if

484
00:24:39,600 --> 00:24:44,639
you had length six

485
00:24:41,279 --> 00:24:47,919
um nine or um whatever i just said

486
00:24:44,640 --> 00:24:51,440
11 in other words one more bite then

487
00:24:47,919 --> 00:24:52,799
um you could you could or in the future

488
00:24:51,440 --> 00:24:56,559
the working group

489
00:24:52,799 --> 00:25:00,639
could define um a flags bite

490
00:24:56,559 --> 00:25:03,039
to stick on the end of um either a

491
00:25:00,640 --> 00:25:05,200
one one three bite field two bite fields

492
00:25:03,039 --> 00:25:07,520
or three three bite fields

493
00:25:05,200 --> 00:25:09,440
to to allow future extensibility if we

494
00:25:07,520 --> 00:25:11,760
do need a flags bite

495
00:25:09,440 --> 00:25:14,159
um or any other extensibility we might

496
00:25:11,760 --> 00:25:16,080
want to well not any other

497
00:25:14,159 --> 00:25:17,760
you know you're slightly limited but

498
00:25:16,080 --> 00:25:20,158
you've got a reasonable amount of

499
00:25:17,760 --> 00:25:22,000
flexibility just by allowing that bit of

500
00:25:20,159 --> 00:25:25,840
forward compatibility so

501
00:25:22,000 --> 00:25:27,679
um the the logic of choosing the two

502
00:25:25,840 --> 00:25:28,000
option kinds means it's most efficient

503
00:25:27,679 --> 00:25:31,520
for

504
00:25:28,000 --> 00:25:35,039
now um given

505
00:25:31,520 --> 00:25:35,039
we um have

506
00:25:35,279 --> 00:25:41,840
um or we don't need the flags by it

507
00:25:38,720 --> 00:25:43,440
but we can add one in the future so it's

508
00:25:41,840 --> 00:25:44,879
sort of best work both worlds just to

509
00:25:43,440 --> 00:25:46,480
explain

510
00:25:44,880 --> 00:25:48,400
why we don't need a flags bike now

511
00:25:46,480 --> 00:25:51,600
because ilpo proposed one

512
00:25:48,400 --> 00:25:55,520
flag bit or two sorry two flag bits

513
00:25:51,600 --> 00:25:58,879
um to be used for a counter

514
00:25:55,520 --> 00:26:01,760
of um which

515
00:25:58,880 --> 00:26:03,279
field in future you would assume was

516
00:26:01,760 --> 00:26:04,320
changing if you didn't get any of the

517
00:26:03,279 --> 00:26:06,480
fields

518
00:26:04,320 --> 00:26:07,520
um but the problem with that was it was

519
00:26:06,480 --> 00:26:11,760
designed for

520
00:26:07,520 --> 00:26:13,840
atklos um in case there was that class

521
00:26:11,760 --> 00:26:15,360
but it didn't allow for the fact that it

522
00:26:13,840 --> 00:26:18,639
itself could get lost

523
00:26:15,360 --> 00:26:22,000
so um it seemed a bit circular

524
00:26:18,640 --> 00:26:24,240
so we don't really have any um robust

525
00:26:22,000 --> 00:26:27,919
proposals for a flags bite

526
00:26:24,240 --> 00:26:28,799
so let's leave it as the possibility of

527
00:26:27,919 --> 00:26:31,440
future

528
00:26:28,799 --> 00:26:32,400
extensibility and use two kinds that was

529
00:26:31,440 --> 00:26:36,000
the conclusion

530
00:26:32,400 --> 00:26:37,760
that's what written up um and

531
00:26:36,000 --> 00:26:41,200
we can have discussion about that at the

532
00:26:37,760 --> 00:26:43,600
end i'm hoping to allow time for that

533
00:26:41,200 --> 00:26:43,600
next

534
00:26:46,880 --> 00:26:51,039
right so the other um change i found on

535
00:26:49,440 --> 00:26:54,720
my to-do list was

536
00:26:51,039 --> 00:26:57,039
to add in a recommendation not a

537
00:26:54,720 --> 00:27:00,720
requirement

538
00:26:57,039 --> 00:27:03,919
to check that you're not getting

539
00:27:00,720 --> 00:27:07,279
constant congestion exposure marking

540
00:27:03,919 --> 00:27:10,720
on every packet and it's

541
00:27:07,279 --> 00:27:14,400
um written flexibly so that um

542
00:27:10,720 --> 00:27:14,799
implementers can use future experience

543
00:27:14,400 --> 00:27:17,440
on what

544
00:27:14,799 --> 00:27:19,440
mangling has found to change things but

545
00:27:17,440 --> 00:27:20,080
um it says for three or four rounds if

546
00:27:19,440 --> 00:27:23,440
you

547
00:27:20,080 --> 00:27:26,879
continually get um ce marking then

548
00:27:23,440 --> 00:27:28,320
disable ecm um but still

549
00:27:26,880 --> 00:27:30,399
feedback any you get from the other

550
00:27:28,320 --> 00:27:32,720
direction in case it's an asymmetric

551
00:27:30,399 --> 00:27:36,320
problem

552
00:27:32,720 --> 00:27:39,360
right and that's current practice in

553
00:27:36,320 --> 00:27:41,600
at least three um

554
00:27:39,360 --> 00:27:42,799
implementations i know of of of normal

555
00:27:41,600 --> 00:27:45,760
ecm

556
00:27:42,799 --> 00:27:45,760
uh classicising

557
00:27:46,159 --> 00:27:49,840
so um next slide

558
00:27:51,120 --> 00:27:54,719
and the final um change we've made this

559
00:27:54,000 --> 00:27:58,960
time round

560
00:27:54,720 --> 00:28:02,480
other than the odd um editorial fix

561
00:27:58,960 --> 00:28:05,360
is to um

562
00:28:02,480 --> 00:28:06,960
considerably beef up the section on

563
00:28:05,360 --> 00:28:11,840
recommendations for middle boxes and

564
00:28:06,960 --> 00:28:15,360
and clarify and um and divide it up into

565
00:28:11,840 --> 00:28:17,360
four sections which it talked about but

566
00:28:15,360 --> 00:28:18,559
didn't really it wasn't really clear

567
00:28:17,360 --> 00:28:20,799
what you were talking about

568
00:28:18,559 --> 00:28:22,480
as you went through the section so we've

569
00:28:20,799 --> 00:28:25,760
put subheadings in

570
00:28:22,480 --> 00:28:26,080
and there's no change to the um sections

571
00:28:25,760 --> 00:28:28,559
are

572
00:28:26,080 --> 00:28:30,399
subsections on proxies and normalizers

573
00:28:28,559 --> 00:28:33,678
other than putting a heading on them

574
00:28:30,399 --> 00:28:36,320
and then um

575
00:28:33,679 --> 00:28:37,840
there's there's more clarification on

576
00:28:36,320 --> 00:28:41,279
the last two

577
00:28:37,840 --> 00:28:43,520
on ack filtering um well actually with

578
00:28:41,279 --> 00:28:44,480
there's a there's a important change on

579
00:28:43,520 --> 00:28:48,080
act filtering not just

580
00:28:44,480 --> 00:28:51,679
clarification now it previously said

581
00:28:48,080 --> 00:28:54,000
you should not coalesce at all um

582
00:28:51,679 --> 00:28:55,600
but we've put a condition on the

583
00:28:54,000 --> 00:28:58,080
conditioned on that

584
00:28:55,600 --> 00:28:58,719
and that is that if it's an accurate ecm

585
00:28:58,080 --> 00:29:02,480
packet

586
00:28:58,720 --> 00:29:06,000
and um if the middle box that's doing it

587
00:29:02,480 --> 00:29:09,679
can ec and mark the idea being here that

588
00:29:06,000 --> 00:29:12,720
you continue doing act filtering um

589
00:29:09,679 --> 00:29:14,240
otherwise if you're doing act filtering

590
00:29:12,720 --> 00:29:16,080
to improve the performance like on a

591
00:29:14,240 --> 00:29:18,880
satellite link or

592
00:29:16,080 --> 00:29:20,080
well you know any challenged upstream

593
00:29:18,880 --> 00:29:23,520
link

594
00:29:20,080 --> 00:29:25,520
but if you're if you're ecn marking

595
00:29:23,520 --> 00:29:27,279
you're essentially giving the

596
00:29:25,520 --> 00:29:28,639
responsibility for doing act filtering

597
00:29:27,279 --> 00:29:30,320
to the end system and you're giving it

598
00:29:28,640 --> 00:29:31,360
the information or the network is giving

599
00:29:30,320 --> 00:29:34,879
it the information

600
00:29:31,360 --> 00:29:38,840
to do that because accurate ecn can

601
00:29:34,880 --> 00:29:41,520
pick up ecn information on

602
00:29:38,840 --> 00:29:45,199
purex and

603
00:29:41,520 --> 00:29:48,720
we will leave the specification

604
00:29:45,200 --> 00:29:50,559
of that um of potential

605
00:29:48,720 --> 00:29:52,320
um congestion control of the axe stream

606
00:29:50,559 --> 00:29:54,720
for the future but we

607
00:29:52,320 --> 00:29:56,320
we've got the mechanism now in there and

608
00:29:54,720 --> 00:29:57,520
we've got a recommendation to middle

609
00:29:56,320 --> 00:29:59,439
boxes

610
00:29:57,520 --> 00:30:00,879
of how to give that information to the

611
00:29:59,440 --> 00:30:03,120
end systems

612
00:30:00,880 --> 00:30:04,799
um and that will also allow things like

613
00:30:03,120 --> 00:30:08,320
encryption to be used in future

614
00:30:04,799 --> 00:30:11,679
if you want um so that the

615
00:30:08,320 --> 00:30:14,799
um the end systems

616
00:30:11,679 --> 00:30:16,080
um can have a way of doing act filtering

617
00:30:14,799 --> 00:30:19,440
themselves

618
00:30:16,080 --> 00:30:21,600
um for their own performance

619
00:30:19,440 --> 00:30:23,760
it's been some list discussion on this

620
00:30:21,600 --> 00:30:27,520
some considerable discussion

621
00:30:23,760 --> 00:30:29,760
um i don't know whether gory wants to

622
00:30:27,520 --> 00:30:32,720
complete that discussion because it was

623
00:30:29,760 --> 00:30:36,080
rather long discussion and

624
00:30:32,720 --> 00:30:39,200
i think i um was the last

625
00:30:36,080 --> 00:30:42,639
one um so if gauri wants to

626
00:30:39,200 --> 00:30:43,279
um respond to that um please do on the

627
00:30:42,640 --> 00:30:46,399
list or

628
00:30:43,279 --> 00:30:50,000
now if you want if it's quick but um

629
00:30:46,399 --> 00:30:52,000
the the essential idea

630
00:30:50,000 --> 00:30:53,600
is what i've just stated above and it

631
00:30:52,000 --> 00:30:55,919
would have allow

632
00:30:53,600 --> 00:30:57,840
no act congestion control at all if

633
00:30:55,919 --> 00:31:02,840
which was gory's concern

634
00:30:57,840 --> 00:31:05,039
um but it allows us to add it in the

635
00:31:02,840 --> 00:31:08,559
future

636
00:31:05,039 --> 00:31:11,600
um the next one on segmentation offload

637
00:31:08,559 --> 00:31:14,879
no sorry not next slide the next bullet

638
00:31:11,600 --> 00:31:18,559
go back please um yeah

639
00:31:14,880 --> 00:31:21,120
the segmentation offload um

640
00:31:18,559 --> 00:31:23,519
we've just described better how

641
00:31:21,120 --> 00:31:27,600
incremental deployment would happen

642
00:31:23,519 --> 00:31:30,399
from today's um practice

643
00:31:27,600 --> 00:31:32,959
where if you see or if a offload

644
00:31:30,399 --> 00:31:36,080
hardware sees these in flags change

645
00:31:32,960 --> 00:31:39,840
it ejects as much of a segment as it's

646
00:31:36,080 --> 00:31:45,039
um as it's built from the cache

647
00:31:39,840 --> 00:31:47,519
um to allowing the field to change

648
00:31:45,039 --> 00:31:48,640
um but ejecting it before it wraps this

649
00:31:47,519 --> 00:31:52,720
is the three bit

650
00:31:48,640 --> 00:31:55,200
field um and so we described how that

651
00:31:52,720 --> 00:31:58,000
incremental deployment would happen

652
00:31:55,200 --> 00:31:58,000
right next

653
00:31:58,799 --> 00:32:04,559
so just now the procedural side um

654
00:32:02,080 --> 00:32:05,199
just to explain that accurate ecn which

655
00:32:04,559 --> 00:32:08,080
is um

656
00:32:05,200 --> 00:32:08,880
the second draft there in the middle is

657
00:32:08,080 --> 00:32:11,918
now

658
00:32:08,880 --> 00:32:15,279
intended for proposed standard um

659
00:32:11,919 --> 00:32:16,880
the ecn plus plus draft

660
00:32:15,279 --> 00:32:19,360
that's experimental depends on it

661
00:32:16,880 --> 00:32:22,000
normatively

662
00:32:19,360 --> 00:32:23,120
and they're both hanging at the moment

663
00:32:22,000 --> 00:32:27,519
waiting for

664
00:32:23,120 --> 00:32:30,639
um the allocation of ect1

665
00:32:27,519 --> 00:32:32,159
in that tsp wg draft down there the l4s

666
00:32:30,640 --> 00:32:35,120
one

667
00:32:32,159 --> 00:32:35,679
which has a milestone for next april and

668
00:32:35,120 --> 00:32:38,959
the

669
00:32:35,679 --> 00:32:42,240
um that

670
00:32:38,960 --> 00:32:44,720
sets up the possibility of future um

671
00:32:42,240 --> 00:32:46,159
drafts on congestion control that could

672
00:32:44,720 --> 00:32:48,480
depend normatively on

673
00:32:46,159 --> 00:32:49,679
accurate ecm so accurate ecm doesn't

674
00:32:48,480 --> 00:32:52,799
depend on anything else

675
00:32:49,679 --> 00:32:55,200
but other things depend on it um it's

676
00:32:52,799 --> 00:32:58,639
the conclusion of this slide

677
00:32:55,200 --> 00:33:02,960
next you're coming to an end

678
00:32:58,640 --> 00:33:04,559
hopefully yep that is the end um so

679
00:33:02,960 --> 00:33:06,559
um i've said ready for wedding group

680
00:33:04,559 --> 00:33:09,360
last call as i said there's that

681
00:33:06,559 --> 00:33:10,799
um conversation with gary to complete

682
00:33:09,360 --> 00:33:14,320
whether he's happy with that

683
00:33:10,799 --> 00:33:17,360
um argument and if not we can

684
00:33:14,320 --> 00:33:19,279
make a um minor changes

685
00:33:17,360 --> 00:33:21,760
to the text before any working group

686
00:33:19,279 --> 00:33:26,320
last call and there's also

687
00:33:21,760 --> 00:33:30,158
a conversation that excuse me

688
00:33:26,320 --> 00:33:33,519
that um uh under the subject

689
00:33:30,159 --> 00:33:37,679
error in accurate ecn where there's

690
00:33:33,519 --> 00:33:38,799
um a possible wording change to clarify

691
00:33:37,679 --> 00:33:42,159
um

692
00:33:38,799 --> 00:33:44,320
the um which again is a conversation

693
00:33:42,159 --> 00:33:47,840
that hasn't quite finished on the list

694
00:33:44,320 --> 00:33:47,840
um to clarify

695
00:33:48,240 --> 00:33:54,960
excuse me um i'm just trying to

696
00:33:51,360 --> 00:33:58,080
think of how to describe it briefly

697
00:33:54,960 --> 00:34:02,480
the um the

698
00:33:58,080 --> 00:34:02,480
possibility that a um

699
00:34:03,760 --> 00:34:08,719
an ack of a pure act or

700
00:34:07,039 --> 00:34:10,239
at the moment the way the wording is

701
00:34:08,719 --> 00:34:11,598
stated it looks like you've got to

702
00:34:10,239 --> 00:34:13,918
akapurak

703
00:34:11,599 --> 00:34:14,800
um so we've just got to make that clear

704
00:34:13,918 --> 00:34:18,799
um

705
00:34:14,800 --> 00:34:22,320
without precluding um possible

706
00:34:18,800 --> 00:34:25,119
acts of pure acts in the future um

707
00:34:22,320 --> 00:34:25,919
in a sort of keep alive type situation

708
00:34:25,119 --> 00:34:28,079
that

709
00:34:25,918 --> 00:34:30,480
um i mentioned on the list but we can

710
00:34:28,079 --> 00:34:34,240
deal with that on the list

711
00:34:30,480 --> 00:34:36,639
and um yoshi is offered to help with

712
00:34:34,239 --> 00:34:38,879
that as well

713
00:34:36,639 --> 00:34:38,879
okay

714
00:34:39,839 --> 00:34:43,839
so thank you um so any questions and

715
00:34:43,040 --> 00:34:46,079
otherwise

716
00:34:43,839 --> 00:34:47,359
um yeah i'd like to hear what the chairs

717
00:34:46,079 --> 00:34:49,280
believe the current

718
00:34:47,359 --> 00:34:52,319
statuses regarding whether this would go

719
00:34:49,280 --> 00:34:52,320
to working group last call

720
00:34:52,719 --> 00:34:56,158
so i think michael was first in there

721
00:34:57,359 --> 00:35:01,520
yeah hi this is mike michael speaking

722
00:34:59,280 --> 00:35:04,160
from the floor just a quick comment

723
00:35:01,520 --> 00:35:05,440
um since i mean i agree with the current

724
00:35:04,160 --> 00:35:06,720
content of the document so it's

725
00:35:05,440 --> 00:35:07,680
pointless to argue about the

726
00:35:06,720 --> 00:35:10,240
alternatives

727
00:35:07,680 --> 00:35:12,480
but bob i think your reasoning against

728
00:35:10,240 --> 00:35:15,200
links encoding is not entirely correct

729
00:35:12,480 --> 00:35:17,280
and i will follow up on that on the list

730
00:35:15,200 --> 00:35:19,520
and that's to me that's an example you

731
00:35:17,280 --> 00:35:21,760
should actually have the discussion

732
00:35:19,520 --> 00:35:23,599
before the meeting on the list so i will

733
00:35:21,760 --> 00:35:25,040
not have any discussion here for the

734
00:35:23,599 --> 00:35:26,720
sake of time but

735
00:35:25,040 --> 00:35:28,640
i think what you just said is not

736
00:35:26,720 --> 00:35:30,959
entirely correct the trade-offs

737
00:35:28,640 --> 00:35:33,200
with the different encodings and it's a

738
00:35:30,960 --> 00:35:36,240
bit concerning to me that you have not

739
00:35:33,200 --> 00:35:38,240
discussed this on the list before doing

740
00:35:36,240 --> 00:35:40,879
edits to the document but as i said

741
00:35:38,240 --> 00:35:41,680
belongs on the list yeah i apologize for

742
00:35:40,880 --> 00:35:44,960
that that was

743
00:35:41,680 --> 00:35:47,839
like i say because um i

744
00:35:44,960 --> 00:35:48,640
i lost my to-do list half of my to-do

745
00:35:47,839 --> 00:35:51,520
list

746
00:35:48,640 --> 00:35:55,040
sorry about that okay so i'm closing the

747
00:35:51,520 --> 00:35:55,040
queue and gloria's next

748
00:35:57,440 --> 00:36:03,040
so my comment was was um

749
00:36:00,880 --> 00:36:04,079
yes bob i would like to come back and

750
00:36:03,040 --> 00:36:07,839
re-read the

751
00:36:04,079 --> 00:36:10,320
act filtering text and see

752
00:36:07,839 --> 00:36:11,920
whether it could be improved i think we

753
00:36:10,320 --> 00:36:13,599
should do it in a separate thread

754
00:36:11,920 --> 00:36:15,680
because it got a bit complicated

755
00:36:13,599 --> 00:36:16,720
and i'm going to do that soon yeah i

756
00:36:15,680 --> 00:36:19,759
would agree with that

757
00:36:16,720 --> 00:36:19,759
there's more to that

758
00:36:21,520 --> 00:36:29,280
okay okay so this means

759
00:36:25,200 --> 00:36:31,040
um please continue discussion on the

760
00:36:29,280 --> 00:36:34,880
list and if things

761
00:36:31,040 --> 00:36:35,520
are resolved we can come back to working

762
00:36:34,880 --> 00:36:37,200
in class

763
00:36:35,520 --> 00:36:39,599
to the question related to what your

764
00:36:37,200 --> 00:36:42,560
class call um

765
00:36:39,599 --> 00:36:44,560
you have a slider regarding ecm plus

766
00:36:42,560 --> 00:36:48,960
plus

767
00:36:44,560 --> 00:36:48,960
yep um just three one slide

768
00:36:49,040 --> 00:36:55,119
again and you have three minutes left

769
00:36:52,240 --> 00:36:56,000
okay it's very easy we just refreshed

770
00:36:55,119 --> 00:36:58,400
this draft

771
00:36:56,000 --> 00:36:59,520
um there's been no changes it's just

772
00:36:58,400 --> 00:37:01,920
waiting

773
00:36:59,520 --> 00:37:03,520
uh in a holding pattern for the um

774
00:37:01,920 --> 00:37:06,560
accurate ec and draft

775
00:37:03,520 --> 00:37:09,839
um they were just minor changes

776
00:37:06,560 --> 00:37:13,599
that's it you have two minutes

777
00:37:09,839 --> 00:37:15,839
discussion if you want um on maybe on

778
00:37:13,599 --> 00:37:19,200
what the status of both these is

779
00:37:15,839 --> 00:37:19,200
regarding working group last school

780
00:37:22,560 --> 00:37:25,599
thank you is gory still in the queue or

781
00:37:24,960 --> 00:37:30,160
is

782
00:37:25,599 --> 00:37:30,160
did you did you never uh you didn't

783
00:37:31,520 --> 00:37:36,079
yeah i guess um since this is since the

784
00:37:34,839 --> 00:37:38,160
um

785
00:37:36,079 --> 00:37:39,680
the ecm plus plus is referring to the

786
00:37:38,160 --> 00:37:42,399
more accurate one

787
00:37:39,680 --> 00:37:44,799
and the more accurate one needs some

788
00:37:42,400 --> 00:37:47,280
discussion on the mailing list

789
00:37:44,800 --> 00:37:47,280
i would say

790
00:37:48,160 --> 00:37:55,118
we wait until the um

791
00:37:51,359 --> 00:37:56,640
the more accurate is um finished

792
00:37:55,119 --> 00:38:00,480
before starting and working the glass

793
00:37:56,640 --> 00:38:00,480
call on the generalized one

794
00:38:01,280 --> 00:38:06,880
yep thank you that's reasonable okay

795
00:38:04,400 --> 00:38:09,920
thank you for the presentation um if

796
00:38:06,880 --> 00:38:09,920
there are no questions

797
00:38:11,760 --> 00:38:16,560
then we move on to 793 biz wes

798
00:38:17,599 --> 00:38:23,359
okay and can you hear me perfect

799
00:38:20,960 --> 00:38:23,359
all right

800
00:38:24,400 --> 00:38:31,599
so uh we have been uh working on

801
00:38:28,000 --> 00:38:36,480
updating rxd73 for a while

802
00:38:31,599 --> 00:38:39,599
and there was a working group last call

803
00:38:36,480 --> 00:38:43,200
some time ago a few sets of

804
00:38:39,599 --> 00:38:46,079
comments came in and

805
00:38:43,200 --> 00:38:47,279
the revision that's posted now revision

806
00:38:46,079 --> 00:38:50,160
19

807
00:38:47,280 --> 00:38:51,520
addresses most of those comments the

808
00:38:50,160 --> 00:38:56,000
small number

809
00:38:51,520 --> 00:38:59,359
that are left dangling are itemized here

810
00:38:56,000 --> 00:39:00,480
and i'm planning on trying to drive

811
00:38:59,359 --> 00:39:04,240
these to closure

812
00:39:00,480 --> 00:39:06,960
in the near term uh by starting a threat

813
00:39:04,240 --> 00:39:08,240
on each of them and proposing a path

814
00:39:06,960 --> 00:39:12,000
forward

815
00:39:08,240 --> 00:39:15,680
um i think that uh none of them

816
00:39:12,000 --> 00:39:19,520
are uh huge

817
00:39:15,680 --> 00:39:21,520
compatibility issues they're mainly just

818
00:39:19,520 --> 00:39:23,359
questions of what we want the messaging

819
00:39:21,520 --> 00:39:27,200
to be in this

820
00:39:23,359 --> 00:39:30,720
document so to go through them

821
00:39:27,200 --> 00:39:33,359
really quickly in case they give

822
00:39:30,720 --> 00:39:34,160
anyone strong ideas about what we should

823
00:39:33,359 --> 00:39:37,119
do

824
00:39:34,160 --> 00:39:38,960
uh there's a question on how we phrase

825
00:39:37,119 --> 00:39:40,480
uh the fact that options must have a

826
00:39:38,960 --> 00:39:43,680
length field

827
00:39:40,480 --> 00:39:45,520
um it's it's really a matter of uh big

828
00:39:43,680 --> 00:39:47,680
must or little must

829
00:39:45,520 --> 00:39:49,359
um so i think we just need to find

830
00:39:47,680 --> 00:39:49,919
specific wording that people can agree

831
00:39:49,359 --> 00:39:53,598
on

832
00:39:49,920 --> 00:39:57,520
there uh there's also

833
00:39:53,599 --> 00:39:59,760
a uh suggestion to

834
00:39:57,520 --> 00:40:01,520
use a capital should for some of the

835
00:39:59,760 --> 00:40:03,359
commonly used options

836
00:40:01,520 --> 00:40:04,880
that to say that they should be

837
00:40:03,359 --> 00:40:07,759
supported in

838
00:40:04,880 --> 00:40:09,280
implementations and that would be uh

839
00:40:07,760 --> 00:40:12,480
regarding time stamps

840
00:40:09,280 --> 00:40:15,200
window scaling and sac

841
00:40:12,480 --> 00:40:17,359
i think that's a good suggestion and i

842
00:40:15,200 --> 00:40:20,240
think it's in the spirit of things we've

843
00:40:17,359 --> 00:40:21,440
done uh previously like in the tcp

844
00:40:20,240 --> 00:40:24,720
roadmap

845
00:40:21,440 --> 00:40:28,000
so i think it's probably

846
00:40:24,720 --> 00:40:31,279
okay uh but i would uh

847
00:40:28,000 --> 00:40:32,960
definitely like to hear if there's more

848
00:40:31,280 --> 00:40:34,560
working group support for that or if

849
00:40:32,960 --> 00:40:38,400
there's any pushback

850
00:40:34,560 --> 00:40:40,720
because it is uh slightly i would say

851
00:40:38,400 --> 00:40:43,119
outside of our scope of not changing

852
00:40:40,720 --> 00:40:44,799
anything that the standards track

853
00:40:43,119 --> 00:40:47,839
documents say

854
00:40:44,800 --> 00:40:50,240
uh should be done

855
00:40:47,839 --> 00:40:51,359
in a tcp implementation which was sort

856
00:40:50,240 --> 00:40:54,879
of the

857
00:40:51,359 --> 00:40:58,240
ground rule going in on this document

858
00:40:54,880 --> 00:41:01,599
when we started that work

859
00:40:58,240 --> 00:41:04,640
uh same thing actually true for the

860
00:41:01,599 --> 00:41:08,000
the next two bullets which are

861
00:41:04,640 --> 00:41:09,440
syn timeouts having a requirement of uh

862
00:41:08,000 --> 00:41:12,880
three minutes

863
00:41:09,440 --> 00:41:16,160
uh praveen suggested that that is uh

864
00:41:12,880 --> 00:41:18,800
a large number and um

865
00:41:16,160 --> 00:41:19,440
well that's i guess hard to argue

866
00:41:18,800 --> 00:41:22,160
against

867
00:41:19,440 --> 00:41:23,760
uh it's also true that changing that is

868
00:41:22,160 --> 00:41:26,799
sort of outside the scope that

869
00:41:23,760 --> 00:41:29,760
we uh chartered this

870
00:41:26,800 --> 00:41:32,640
document for so i would really like to

871
00:41:29,760 --> 00:41:36,160
hear if anyone else has thoughts on that

872
00:41:32,640 --> 00:41:38,960
and uh additionally i think there's

873
00:41:36,160 --> 00:41:39,520
a good suggestion that we should say

874
00:41:38,960 --> 00:41:42,640
that

875
00:41:39,520 --> 00:41:45,280
um rfc 5681

876
00:41:42,640 --> 00:41:46,560
congestion control is uh a sort of

877
00:41:45,280 --> 00:41:49,520
baseline

878
00:41:46,560 --> 00:41:51,920
that must be supported but that of

879
00:41:49,520 --> 00:41:52,720
course other algorithms can be supported

880
00:41:51,920 --> 00:41:55,760
as they are

881
00:41:52,720 --> 00:41:56,240
in common implementations and those can

882
00:41:55,760 --> 00:41:59,839
be

883
00:41:56,240 --> 00:41:59,839
uh optionally enabled

884
00:42:00,240 --> 00:42:03,598
so these are the these are the kinds of

885
00:42:02,720 --> 00:42:06,319
things that we're

886
00:42:03,599 --> 00:42:06,800
still trying to finalize i plan to start

887
00:42:06,319 --> 00:42:10,160
a

888
00:42:06,800 --> 00:42:11,440
thread on each of them to uh to get them

889
00:42:10,160 --> 00:42:13,118
taken care of but

890
00:42:11,440 --> 00:42:14,880
of course if you have any thoughts on

891
00:42:13,119 --> 00:42:17,520
them during the meeting here please feel

892
00:42:14,880 --> 00:42:20,880
free to shout them out

893
00:42:17,520 --> 00:42:22,960
um i would like to uh

894
00:42:20,880 --> 00:42:24,240
i have so two more charts and then maybe

895
00:42:22,960 --> 00:42:26,160
we'll come back to this one if anyone

896
00:42:24,240 --> 00:42:30,240
wants to say anything

897
00:42:26,160 --> 00:42:33,279
so i'll go to the next chart

898
00:42:30,240 --> 00:42:34,560
which is a plan for next steps so get

899
00:42:33,280 --> 00:42:37,920
closure on the items

900
00:42:34,560 --> 00:42:41,599
uh previously mentioned uh i want to

901
00:42:37,920 --> 00:42:43,359
update the draft however we agree and uh

902
00:42:41,599 --> 00:42:46,319
also work a little bit more on the

903
00:42:43,359 --> 00:42:48,799
changes from rfc 793 section

904
00:42:46,319 --> 00:42:50,240
and then i think this revision 20 that

905
00:42:48,800 --> 00:42:53,520
will be posted

906
00:42:50,240 --> 00:42:54,879
should be uh ready to go forward unless

907
00:42:53,520 --> 00:42:57,280
there's some reason to keep the working

908
00:42:54,880 --> 00:43:00,319
group last call open for

909
00:42:57,280 --> 00:43:02,640
even longer um

910
00:43:00,319 --> 00:43:04,160
either way is is fine with me but i

911
00:43:02,640 --> 00:43:07,279
would i would think that it's getting

912
00:43:04,160 --> 00:43:08,319
ready for ad review um or for the

913
00:43:07,280 --> 00:43:11,680
working group

914
00:43:08,319 --> 00:43:13,359
shepard review at least if you go to the

915
00:43:11,680 --> 00:43:16,399
next chart

916
00:43:13,359 --> 00:43:19,279
i just wanted to briefly acknowledge

917
00:43:16,400 --> 00:43:21,280
the huge number of people that have been

918
00:43:19,280 --> 00:43:25,119
contributing to this over the years

919
00:43:21,280 --> 00:43:26,960
i think the activity level is hard to

920
00:43:25,119 --> 00:43:28,160
see because we've been working on it so

921
00:43:26,960 --> 00:43:32,079
long and sort of

922
00:43:28,160 --> 00:43:35,118
uh individuals contribute in spurts

923
00:43:32,079 --> 00:43:35,839
uh over the years uh but this has

924
00:43:35,119 --> 00:43:38,400
actually

925
00:43:35,839 --> 00:43:39,440
been uh quite quite a number of people

926
00:43:38,400 --> 00:43:40,720
have contributed this

927
00:43:39,440 --> 00:43:42,480
over the years and i just wanted to

928
00:43:40,720 --> 00:43:45,439
acknowledge that here

929
00:43:42,480 --> 00:43:47,040
so that's all i have i think there's a

930
00:43:45,440 --> 00:43:48,400
couple people in the queue

931
00:43:47,040 --> 00:43:51,040
and if you want to go back to the first

932
00:43:48,400 --> 00:43:54,319
chart i would welcome any input on

933
00:43:51,040 --> 00:43:57,920
those questions thank you

934
00:43:54,319 --> 00:44:01,599
bob yeah i was just a

935
00:43:57,920 --> 00:44:04,560
feedback on the last point about 5681

936
00:44:01,599 --> 00:44:06,160
um from praveen um i was just thinking

937
00:44:04,560 --> 00:44:08,400
if it's a challenge device and

938
00:44:06,160 --> 00:44:09,520
um so it's implemented co-app or

939
00:44:08,400 --> 00:44:11,200
something similar

940
00:44:09,520 --> 00:44:12,800
i'm not quite sure why you would want to

941
00:44:11,200 --> 00:44:13,759
say it's got to have the baseline in it

942
00:44:12,800 --> 00:44:16,319
as well

943
00:44:13,760 --> 00:44:18,480
um that seems like a just purely

944
00:44:16,319 --> 00:44:23,759
implementation choice not a

945
00:44:18,480 --> 00:44:26,079
um something that should go in an rfc

946
00:44:23,760 --> 00:44:26,079
okay

947
00:44:27,359 --> 00:44:40,960
martin you're next

948
00:44:37,440 --> 00:44:40,960
can you hear me yes

949
00:44:41,440 --> 00:44:46,560
uh yeah uh similar to bob's comment um

950
00:44:44,800 --> 00:44:48,720
i think it's a little odd to say that

951
00:44:46,560 --> 00:44:50,640
you must implement 5681

952
00:44:48,720 --> 00:44:51,759
um that we would say that a tcp

953
00:44:50,640 --> 00:44:53,680
implementation that just

954
00:44:51,760 --> 00:44:54,960
jumps straight into cubic or something

955
00:44:53,680 --> 00:44:58,240
would be

956
00:44:54,960 --> 00:44:59,760
wrong somehow um

957
00:44:58,240 --> 00:45:01,520
i'm not sure what the language is i'll

958
00:44:59,760 --> 00:45:02,960
think about it a little bit and when you

959
00:45:01,520 --> 00:45:05,839
start that thread maybe i'll have

960
00:45:02,960 --> 00:45:05,839
something better

961
00:45:06,000 --> 00:45:10,520
yeah so i think this the the source of

962
00:45:08,240 --> 00:45:14,078
this is uh

963
00:45:10,520 --> 00:45:17,599
1122 actually says that

964
00:45:14,079 --> 00:45:20,800
sort of reno is the you must implement

965
00:45:17,599 --> 00:45:23,119
for congestion control and we

966
00:45:20,800 --> 00:45:24,480
have never changed that over the years

967
00:45:23,119 --> 00:45:28,160
although we've

968
00:45:24,480 --> 00:45:31,280
implem adjusted and incremented

969
00:45:28,160 --> 00:45:34,799
the description of reno from

970
00:45:31,280 --> 00:45:38,240
uh what 1122 had through uh

971
00:45:34,800 --> 00:45:41,599
2581 and 5681

972
00:45:38,240 --> 00:45:43,759
over the years i don't think uh anything

973
00:45:41,599 --> 00:45:48,480
changed the 1122 requirement

974
00:45:43,760 --> 00:45:48,480
that that is the sort of basis

975
00:45:50,319 --> 00:45:53,920
i mean it is true that we don't have a

976
00:45:52,160 --> 00:45:56,078
ton of standards in this area

977
00:45:53,920 --> 00:45:58,560
uh although i guess lars is doing his

978
00:45:56,079 --> 00:46:00,560
best to fix that

979
00:45:58,560 --> 00:46:03,520
okay well i'll think about it some more

980
00:46:00,560 --> 00:46:06,480
and when you you know send an email

981
00:46:03,520 --> 00:46:07,759
yeah maybe some kind of instant reaction

982
00:46:06,480 --> 00:46:10,400
is the right

983
00:46:07,760 --> 00:46:10,400
way to say it

984
00:46:12,880 --> 00:46:15,839
to now

985
00:46:19,200 --> 00:46:22,799
if you're saying something we can't hear

986
00:46:20,640 --> 00:46:22,799
you

987
00:46:27,680 --> 00:46:43,839
we can see you but we can't hear you

988
00:46:30,720 --> 00:46:43,839
at least i can't hear you

989
00:46:57,760 --> 00:47:03,920
can you hear me now yes

990
00:47:00,800 --> 00:47:04,480
ah okay magic i just had to toggle it

991
00:47:03,920 --> 00:47:07,839
again

992
00:47:04,480 --> 00:47:09,440
um so just very quickly i don't have a

993
00:47:07,839 --> 00:47:12,560
good suggestion on the text here

994
00:47:09,440 --> 00:47:14,960
but i would strongly recommend in

995
00:47:12,560 --> 00:47:17,839
general that we move away from trying to

996
00:47:14,960 --> 00:47:20,880
standardize uh uh these things in the

997
00:47:17,839 --> 00:47:23,040
the uh tcp rfc at least

998
00:47:20,880 --> 00:47:24,079
be very much it's it's a question really

999
00:47:23,040 --> 00:47:26,000
of whether we want to

1000
00:47:24,079 --> 00:47:27,359
hang on to something that we've written

1001
00:47:26,000 --> 00:47:29,040
down like 30 years ago

1002
00:47:27,359 --> 00:47:30,799
or we want to reflect what common

1003
00:47:29,040 --> 00:47:33,520
practice is these days

1004
00:47:30,800 --> 00:47:34,720
and for all practical purposes almost

1005
00:47:33,520 --> 00:47:38,800
nobody uses

1006
00:47:34,720 --> 00:47:41,439
reno uh widely speaking so

1007
00:47:38,800 --> 00:47:43,359
we we should consider that um

1008
00:47:41,440 --> 00:47:45,359
republishing something with just

1009
00:47:43,359 --> 00:47:49,040
text because it's already there i think

1010
00:47:45,359 --> 00:47:49,040
i would argue is not the most sensible

1011
00:47:50,839 --> 00:47:55,040
thing

1012
00:47:52,319 --> 00:47:55,040
okay thank you

1013
00:47:55,760 --> 00:48:00,839
bob are you stood in queue or

1014
00:47:57,800 --> 00:48:00,839
[Music]

1015
00:48:03,920 --> 00:48:11,119
the answers no

1016
00:48:07,720 --> 00:48:11,118
anyone else

1017
00:48:18,839 --> 00:48:21,839
gary

1018
00:48:25,599 --> 00:48:35,839
gory at least i can't hear you

1019
00:48:29,839 --> 00:48:35,839
if you're saying something

1020
00:48:40,880 --> 00:48:43,280
martin

1021
00:48:45,520 --> 00:48:48,640
that worked this time great uh yeah i

1022
00:48:47,440 --> 00:48:50,559
just uh i

1023
00:48:48,640 --> 00:48:52,240
i kind of i would like to support

1024
00:48:50,559 --> 00:48:54,960
johnner's remarks and

1025
00:48:52,240 --> 00:48:56,558
um this would be challenging to word and

1026
00:48:54,960 --> 00:48:59,520
maybe this opening can of worm but like

1027
00:48:56,559 --> 00:49:01,760
in a perfect world

1028
00:48:59,520 --> 00:49:02,800
i think this document described in some

1029
00:49:01,760 --> 00:49:04,559
way

1030
00:49:02,800 --> 00:49:06,160
the characteristics of what we would

1031
00:49:04,559 --> 00:49:08,000
want in a congestion control and you

1032
00:49:06,160 --> 00:49:10,720
know we can offer examples

1033
00:49:08,000 --> 00:49:10,720
but uh

1034
00:49:11,040 --> 00:49:14,240
do we have a document today that that

1035
00:49:12,880 --> 00:49:17,280
really

1036
00:49:14,240 --> 00:49:19,919
kind of puts out the

1037
00:49:17,280 --> 00:49:21,119
the expectations of a new congestion

1038
00:49:19,920 --> 00:49:24,079
control and kind of the st

1039
00:49:21,119 --> 00:49:25,520
and kind of the the things that the the

1040
00:49:24,079 --> 00:49:28,839
the qualities it needs to have

1041
00:49:25,520 --> 00:49:31,839
to sort of be judged to be friendly

1042
00:49:28,839 --> 00:49:33,359
um it's probably too

1043
00:49:31,839 --> 00:49:34,960
large of a thing to put in this draft

1044
00:49:33,359 --> 00:49:36,720
but but if there's something succinct we

1045
00:49:34,960 --> 00:49:39,119
can say in that area that maybe

1046
00:49:36,720 --> 00:49:40,399
fall short of an actual full spec that

1047
00:49:39,119 --> 00:49:43,520
would be

1048
00:49:40,400 --> 00:49:45,520
valuable i'm i'm actually thinking the

1049
00:49:43,520 --> 00:49:48,960
right thing to do is to say an ietf

1050
00:49:45,520 --> 00:49:52,319
standards track congestion control is

1051
00:49:48,960 --> 00:49:56,839
what must be included and others

1052
00:49:52,319 --> 00:50:02,000
uh can be included at an implementer's

1053
00:49:56,839 --> 00:50:02,000
will i like that

1054
00:50:02,880 --> 00:50:05,839
sounds good to me too

1055
00:50:10,839 --> 00:50:15,359
janna and i'm closing the queue after

1056
00:50:13,599 --> 00:50:19,119
now

1057
00:50:15,359 --> 00:50:20,400
um i i would gently uh push back against

1058
00:50:19,119 --> 00:50:23,200
that

1059
00:50:20,400 --> 00:50:25,200
um again for the same reason i don't see

1060
00:50:23,200 --> 00:50:26,558
a reason to require an id standard

1061
00:50:25,200 --> 00:50:28,078
congestion controller when nobody's

1062
00:50:26,559 --> 00:50:29,200
going to follow that requirement

1063
00:50:28,079 --> 00:50:31,680
now we're requiring because we want to

1064
00:50:29,200 --> 00:50:35,680
be consistent with our document set

1065
00:50:31,680 --> 00:50:36,960
or are we trying to reflect reality here

1066
00:50:35,680 --> 00:50:38,319
we certainly be consistent with our own

1067
00:50:36,960 --> 00:50:39,440
document set if that's what we want to

1068
00:50:38,319 --> 00:50:42,400
try and do

1069
00:50:39,440 --> 00:50:44,559
i would try to move away from that and

1070
00:50:42,400 --> 00:50:44,559
and

1071
00:50:45,599 --> 00:50:49,599
martin duke's question is a good one and

1072
00:50:48,240 --> 00:50:51,919
that's something that we actually tried

1073
00:50:49,599 --> 00:50:53,200
to chase for the quick

1074
00:50:51,920 --> 00:50:55,760
loss direction and congressional control

1075
00:50:53,200 --> 00:50:58,000
draft um

1076
00:50:55,760 --> 00:50:59,280
and unfortunately that isn't a good set

1077
00:50:58,000 --> 00:51:01,119
of common principles

1078
00:50:59,280 --> 00:51:03,119
uh or a document that says okay here's

1079
00:51:01,119 --> 00:51:05,599
what a condition control

1080
00:51:03,119 --> 00:51:07,119
uh condition control ought to have as as

1081
00:51:05,599 --> 00:51:11,040
its properties

1082
00:51:07,119 --> 00:51:12,800
um but but

1083
00:51:11,040 --> 00:51:14,079
just because we don't have that doesn't

1084
00:51:12,800 --> 00:51:17,520
mean that we

1085
00:51:14,079 --> 00:51:19,680
we we cite the one

1086
00:51:17,520 --> 00:51:21,359
algorithm that we haven't required even

1087
00:51:19,680 --> 00:51:25,598
though we know nobody's going to really

1088
00:51:21,359 --> 00:51:27,359
care about that so i mean i'm i'm

1089
00:51:25,599 --> 00:51:28,640
i'd be personally comfortable with in

1090
00:51:27,359 --> 00:51:29,759
the document saying that

1091
00:51:28,640 --> 00:51:32,640
you need some sort of condition

1092
00:51:29,760 --> 00:51:36,400
controller and uh

1093
00:51:32,640 --> 00:51:39,839
and it's that that

1094
00:51:36,400 --> 00:51:40,720
we have one in 5681 and there are other

1095
00:51:39,839 --> 00:51:42,640
alternative ones

1096
00:51:40,720 --> 00:51:43,839
yes we can point to cubic if you want

1097
00:51:42,640 --> 00:51:45,598
and we can even point to something

1098
00:51:43,839 --> 00:51:47,920
that's not an rfc form

1099
00:51:45,599 --> 00:51:49,280
uh bbr is used commonly these days and

1100
00:51:47,920 --> 00:51:52,480
despite what we think about it

1101
00:51:49,280 --> 00:51:54,319
it is being commonly used so

1102
00:51:52,480 --> 00:51:55,599
i i think that this value in being able

1103
00:51:54,319 --> 00:51:58,000
to simply say

1104
00:51:55,599 --> 00:51:58,720
uh that it is it is it is reasonable to

1105
00:51:58,000 --> 00:52:05,359
consider the

1106
00:51:58,720 --> 00:52:10,480
controllers and not require 56.81

1107
00:52:05,359 --> 00:52:13,598
thank you so there's work to do on

1108
00:52:10,480 --> 00:52:13,599
793 biz

1109
00:52:15,760 --> 00:52:22,240
thank you wes thank you and

1110
00:52:19,200 --> 00:52:24,799
um yeah

1111
00:52:22,240 --> 00:52:26,000
i'm not sure i i see a screen share is

1112
00:52:24,800 --> 00:52:29,599
being shared

1113
00:52:26,000 --> 00:52:29,599
but i don't see any slides

1114
00:52:31,520 --> 00:52:37,200
so next up is tcpa great request from

1115
00:52:34,720 --> 00:52:37,200
charles

1116
00:52:41,440 --> 00:52:48,319
hello can you hear me yes

1117
00:52:44,960 --> 00:52:48,880
okay hello everyone my name is carlos

1118
00:52:48,319 --> 00:52:50,960
gomez

1119
00:52:48,880 --> 00:52:53,040
i'm going to present the updated version

1120
00:52:50,960 --> 00:52:55,839
of the draft entitled tcp act

1121
00:52:53,040 --> 00:52:58,079
rate request option star option next

1122
00:52:55,839 --> 00:52:58,078
please

1123
00:52:59,440 --> 00:53:02,960
first of all a reminder of the

1124
00:53:01,119 --> 00:53:05,359
motivation for this draft

1125
00:53:02,960 --> 00:53:07,200
delayedpax is a widely used mechanism

1126
00:53:05,359 --> 00:53:08,000
which is intended to reduce protocol

1127
00:53:07,200 --> 00:53:09,839
overhead

1128
00:53:08,000 --> 00:53:12,720
however it may also contribute to

1129
00:53:09,839 --> 00:53:15,119
suboptimal performance in some scenarios

1130
00:53:12,720 --> 00:53:17,040
we have identified two sets of such

1131
00:53:15,119 --> 00:53:18,640
scenarios in terms of the congestion

1132
00:53:17,040 --> 00:53:20,960
window size in use

1133
00:53:18,640 --> 00:53:22,799
the first one being so-called large

1134
00:53:20,960 --> 00:53:24,640
congestion window scenarios meaning

1135
00:53:22,800 --> 00:53:26,000
congestion windows size much greater

1136
00:53:24,640 --> 00:53:28,480
than the mss

1137
00:53:26,000 --> 00:53:29,119
and the other one uh so-called small

1138
00:53:28,480 --> 00:53:31,680
congestion

1139
00:53:29,119 --> 00:53:33,440
window scenarios uh meaning congestion

1140
00:53:31,680 --> 00:53:36,558
windows size up to the order of

1141
00:53:33,440 --> 00:53:39,280
one nss so in the first

1142
00:53:36,559 --> 00:53:41,440
set large congestion window scenarios

1143
00:53:39,280 --> 00:53:42,000
saving up to one of every 2x which is

1144
00:53:41,440 --> 00:53:44,240
what we can

1145
00:53:42,000 --> 00:53:46,000
get with the latex maybe insufficient

1146
00:53:44,240 --> 00:53:47,680
for example to mitigate performance

1147
00:53:46,000 --> 00:53:48,720
limitations due to symmetric path

1148
00:53:47,680 --> 00:53:50,078
capacity

1149
00:53:48,720 --> 00:53:52,000
or if we want to reduce the

1150
00:53:50,079 --> 00:53:54,640
computational cost of the sender

1151
00:53:52,000 --> 00:53:56,079
receiver and network load of having too

1152
00:53:54,640 --> 00:53:58,558
many x

1153
00:53:56,079 --> 00:53:59,599
and in the small congestion window

1154
00:53:58,559 --> 00:54:01,839
scenarios

1155
00:53:59,599 --> 00:54:03,599
uh for example we have data centers

1156
00:54:01,839 --> 00:54:05,599
where the bandwidth delay product may be

1157
00:54:03,599 --> 00:54:08,160
up to the order of one mss

1158
00:54:05,599 --> 00:54:09,760
so in that case the led x will incur a

1159
00:54:08,160 --> 00:54:12,879
delay much greater than the

1160
00:54:09,760 --> 00:54:15,920
rtt therefore possibly degrading

1161
00:54:12,880 --> 00:54:18,160
performance severely and also

1162
00:54:15,920 --> 00:54:21,119
in transactional data exchanges or when

1163
00:54:18,160 --> 00:54:23,279
the congestion window has decreased

1164
00:54:21,119 --> 00:54:24,240
eliciting immediate acts may help avoid

1165
00:54:23,280 --> 00:54:26,000
idle times

1166
00:54:24,240 --> 00:54:27,520
and may help allow faster congestion

1167
00:54:26,000 --> 00:54:31,280
window growth

1168
00:54:27,520 --> 00:54:32,160
next please so on the status of the

1169
00:54:31,280 --> 00:54:34,800
draft

1170
00:54:32,160 --> 00:54:36,879
there was some prior discussion before

1171
00:54:34,800 --> 00:54:39,280
the initial version of the draft on

1172
00:54:36,880 --> 00:54:40,640
in the area of sender control of tcp x

1173
00:54:39,280 --> 00:54:44,240
which converts to defining

1174
00:54:40,640 --> 00:54:47,040
utcp options serving to purposes

1175
00:54:44,240 --> 00:54:48,160
allowing a tcp sender to request a given

1176
00:54:47,040 --> 00:54:50,960
accredit

1177
00:54:48,160 --> 00:54:52,000
or to request an immediate act from a

1178
00:54:50,960 --> 00:54:53,599
receiver

1179
00:54:52,000 --> 00:54:55,119
the initial version was presented in the

1180
00:54:53,599 --> 00:54:57,599
last itf and

1181
00:54:55,119 --> 00:54:59,359
today presenting 001 which aims to

1182
00:54:57,599 --> 00:55:00,480
address the comments received in the

1183
00:54:59,359 --> 00:55:02,240
last itf

1184
00:55:00,480 --> 00:55:04,559
by the way thanks to everyone who gave

1185
00:55:02,240 --> 00:55:08,240
comments which have been very valuable

1186
00:55:04,559 --> 00:55:09,839
and also we added some explanation on

1187
00:55:08,240 --> 00:55:12,879
how a tcp endpoint

1188
00:55:09,839 --> 00:55:15,200
announces support of this option next

1189
00:55:12,880 --> 00:55:15,200
please

1190
00:55:15,680 --> 00:55:20,319
so about the updates in dash 01 the

1191
00:55:18,559 --> 00:55:21,920
first update is in section one

1192
00:55:20,319 --> 00:55:23,759
uh this is intended to address the

1193
00:55:21,920 --> 00:55:25,760
comment by stuart tjer

1194
00:55:23,760 --> 00:55:26,880
well now we have expanded the motivation

1195
00:55:25,760 --> 00:55:29,680
for the need to use

1196
00:55:26,880 --> 00:55:30,480
immediate acts in some iot environments

1197
00:55:29,680 --> 00:55:33,118
there are some

1198
00:55:30,480 --> 00:55:33,760
iot devices with really constrained

1199
00:55:33,119 --> 00:55:36,160
memory

1200
00:55:33,760 --> 00:55:37,440
with enough ram only for some buffer of

1201
00:55:36,160 --> 00:55:40,720
one mss

1202
00:55:37,440 --> 00:55:41,520
so in that case due to delayed x a

1203
00:55:40,720 --> 00:55:43,439
sender

1204
00:55:41,520 --> 00:55:45,440
may need to wait for the delete act

1205
00:55:43,440 --> 00:55:47,680
timeout and receive and process the act

1206
00:55:45,440 --> 00:55:48,480
to be able to transmit the next data

1207
00:55:47,680 --> 00:55:50,720
segment

1208
00:55:48,480 --> 00:55:51,680
and this has been given as a reason

1209
00:55:50,720 --> 00:55:55,759
sometimes

1210
00:55:51,680 --> 00:55:58,078
for not using tcp in some iot scenarios

1211
00:55:55,760 --> 00:55:59,280
then in section three there are two new

1212
00:55:58,079 --> 00:56:01,440
features that

1213
00:55:59,280 --> 00:56:03,839
were actually suggested in the last idf

1214
00:56:01,440 --> 00:56:07,280
which have been added to this option

1215
00:56:03,839 --> 00:56:10,480
the first one was a suggestion by

1216
00:56:07,280 --> 00:56:12,720
janna by which tcp sender

1217
00:56:10,480 --> 00:56:14,240
in this case can indicate that it has

1218
00:56:12,720 --> 00:56:18,078
some reordering tolerance

1219
00:56:14,240 --> 00:56:21,118
by setting a new field in this option

1220
00:56:18,079 --> 00:56:22,880
uh which we call ignore order here and

1221
00:56:21,119 --> 00:56:23,839
in that case the tcp receiver must

1222
00:56:22,880 --> 00:56:26,400
continue to send

1223
00:56:23,839 --> 00:56:27,200
uh monarch every our data segments even

1224
00:56:26,400 --> 00:56:29,680
when uh

1225
00:56:27,200 --> 00:56:31,839
reordering occurs by the way here we

1226
00:56:29,680 --> 00:56:34,960
have used the same name for the field

1227
00:56:31,839 --> 00:56:37,440
as in the draft that janna pointed to

1228
00:56:34,960 --> 00:56:38,559
which is uh drafting the context of the

1229
00:56:37,440 --> 00:56:40,880
quick protocol

1230
00:56:38,559 --> 00:56:42,799
um we use the same name to somehow

1231
00:56:40,880 --> 00:56:44,960
minimize confusion there but

1232
00:56:42,799 --> 00:56:46,000
if this is inappropriate just please let

1233
00:56:44,960 --> 00:56:48,720
us know

1234
00:56:46,000 --> 00:56:49,520
and uh the second new feature added to

1235
00:56:48,720 --> 00:56:53,040
the option

1236
00:56:49,520 --> 00:56:56,400
is uh was actually a suggestion by gory

1237
00:56:53,040 --> 00:56:58,000
so here tcp center can request now an

1238
00:56:56,400 --> 00:56:59,280
immediate act for a data segment and

1239
00:56:58,000 --> 00:57:02,319
also for the subsequent

1240
00:56:59,280 --> 00:57:07,040
and data segments thanks again for the

1241
00:57:02,319 --> 00:57:07,040
suggestions and uh next please

1242
00:57:07,359 --> 00:57:10,799
so this would be the updated option

1243
00:57:10,000 --> 00:57:13,280
format

1244
00:57:10,799 --> 00:57:14,720
which now includes two new fields which

1245
00:57:13,280 --> 00:57:16,640
correspond to the two

1246
00:57:14,720 --> 00:57:17,759
new features mentioned in the previous

1247
00:57:16,640 --> 00:57:20,240
slide

1248
00:57:17,760 --> 00:57:21,760
the first field is the inner order field

1249
00:57:20,240 --> 00:57:24,558
which is a one byte

1250
00:57:21,760 --> 00:57:24,960
field which is boolean may be set to

1251
00:57:24,559 --> 00:57:28,160
true

1252
00:57:24,960 --> 00:57:31,280
or false and uh the next fill

1253
00:57:28,160 --> 00:57:33,359
is n which uh indicates the number of

1254
00:57:31,280 --> 00:57:34,480
subsequent data segments for which we

1255
00:57:33,359 --> 00:57:38,319
are requesting

1256
00:57:34,480 --> 00:57:41,520
immediate x when power is set to zero

1257
00:57:38,319 --> 00:57:42,400
so uh here there's a question that maybe

1258
00:57:41,520 --> 00:57:44,079
answered maybe

1259
00:57:42,400 --> 00:57:46,559
today or on the list depending on

1260
00:57:44,079 --> 00:57:47,280
available time uh which is that perhaps

1261
00:57:46,559 --> 00:57:51,040
we might

1262
00:57:47,280 --> 00:57:53,760
want to consider uh to save one byte

1263
00:57:51,040 --> 00:57:55,599
uh for example thinking about iot

1264
00:57:53,760 --> 00:57:56,640
environments where every single byte is

1265
00:57:55,599 --> 00:58:00,319
is relevant

1266
00:57:56,640 --> 00:58:02,160
so um we might want to reduce the size

1267
00:58:00,319 --> 00:58:04,240
of the r field from eight bits to seven

1268
00:58:02,160 --> 00:58:07,279
bits and perhaps use the remaining

1269
00:58:04,240 --> 00:58:09,520
one bit as the ignore or the field

1270
00:58:07,280 --> 00:58:12,240
therefore reducing the total size of the

1271
00:58:09,520 --> 00:58:15,759
option from seven bytes to six bytes

1272
00:58:12,240 --> 00:58:15,759
um next please

1273
00:58:17,760 --> 00:58:24,559
and the other update in the draft

1274
00:58:21,280 --> 00:58:26,480
is that uh now we explain that the tcp

1275
00:58:24,559 --> 00:58:29,839
endpoint announces that it supports

1276
00:58:26,480 --> 00:58:32,640
the tar option by including the option

1277
00:58:29,839 --> 00:58:36,319
format in package with the same bit set

1278
00:58:32,640 --> 00:58:38,640
um however well in that case the r

1279
00:58:36,319 --> 00:58:39,920
ignore order and end fields would be

1280
00:58:38,640 --> 00:58:42,480
ignored

1281
00:58:39,920 --> 00:58:43,440
and that would be perhaps an alternative

1282
00:58:42,480 --> 00:58:46,880
which could be

1283
00:58:43,440 --> 00:58:48,960
uh using a dedicated short

1284
00:58:46,880 --> 00:58:51,200
for byte format without the r in our

1285
00:58:48,960 --> 00:58:54,480
order and end fields

1286
00:58:51,200 --> 00:58:56,960
but perhaps using a second code point

1287
00:58:54,480 --> 00:58:58,480
dedicated just to announce this support

1288
00:58:56,960 --> 00:59:00,000
so well that's perhaps another

1289
00:58:58,480 --> 00:59:03,680
alternative that we might

1290
00:59:00,000 --> 00:59:04,079
consider so that is actually all from my

1291
00:59:03,680 --> 00:59:05,839
site

1292
00:59:04,079 --> 00:59:19,839
so i don't know if there may be comments

1293
00:59:05,839 --> 00:59:19,839
or questions

1294
00:59:22,480 --> 00:59:25,599
thank you jonathan

1295
00:59:26,400 --> 00:59:32,799
yes i have um

1296
00:59:29,599 --> 00:59:35,839
i read this through this morning and

1297
00:59:32,799 --> 00:59:39,440
um something like question one occurred

1298
00:59:35,839 --> 00:59:42,640
to me or just on reading that

1299
00:59:39,440 --> 00:59:45,920
um but what i

1300
00:59:42,640 --> 00:59:49,200
noticed was that the

1301
00:59:45,920 --> 00:59:52,000
ignore order field and the n field

1302
00:59:49,200 --> 00:59:52,720
are mutually exclusive based on the

1303
00:59:52,000 --> 00:59:58,319
value of

1304
00:59:52,720 --> 00:59:58,319
r so they could be overlaid on the same

1305
00:59:58,839 --> 01:00:04,400
byte

1306
01:00:00,880 --> 01:00:06,240
okay um

1307
01:00:04,400 --> 01:00:08,000
yeah that's that's an interesting

1308
01:00:06,240 --> 01:00:10,959
alternative that uh

1309
01:00:08,000 --> 01:00:12,079
yeah we hadn't thought about so yeah

1310
01:00:10,960 --> 01:00:15,119
thanks for

1311
01:00:12,079 --> 01:00:18,880
for bringing this up so yeah let's

1312
01:00:15,119 --> 01:00:18,880
let's analyze this as well

1313
01:00:19,359 --> 01:00:24,000
richard and i'm closing the queue after

1314
01:00:26,839 --> 01:00:29,839
richard

1315
01:00:30,559 --> 01:00:43,839
richard i can't hear you if you're

1316
01:00:33,359 --> 01:00:43,839
saying something

1317
01:00:47,440 --> 01:00:57,839
right

1318
01:01:06,720 --> 01:01:14,959
okay so you got some feedback charts um

1319
01:01:11,839 --> 01:01:16,640
and i would say just continue the

1320
01:01:14,960 --> 01:01:19,280
discussion on the list

1321
01:01:16,640 --> 01:01:20,640
and thanks for the presentation okay

1322
01:01:19,280 --> 01:01:24,720
thank you

1323
01:01:20,640 --> 01:01:29,440
so next is kevin on

1324
01:01:24,720 --> 01:01:29,439
extensible timestamps

1325
01:01:33,200 --> 01:01:39,839
hey can um can you hear me

1326
01:01:36,839 --> 01:01:39,839
yes

1327
01:01:42,960 --> 01:01:49,200
hi this is kevin um i'm president

1328
01:01:46,799 --> 01:01:50,640
i'm going to presentation present this

1329
01:01:49,200 --> 01:01:55,520
tcp ets

1330
01:01:50,640 --> 01:02:01,520
for extensible timestamp options

1331
01:01:55,520 --> 01:02:05,359
accessories so we designed this

1332
01:02:01,520 --> 01:02:08,640
new option called ets in order to

1333
01:02:05,359 --> 01:02:12,640
subsume the the

1334
01:02:08,640 --> 01:02:16,160
ifc 732

1335
01:02:12,640 --> 01:02:19,520
to 3 the original timestamp

1336
01:02:16,160 --> 01:02:22,640
and we in this option we

1337
01:02:19,520 --> 01:02:26,240
exchange the maximum act delay

1338
01:02:22,640 --> 01:02:29,279
in the handshake we propose to use a

1339
01:02:26,240 --> 01:02:32,319
final clock granularity

1340
01:02:29,280 --> 01:02:33,520
that is one microsecond per time stem

1341
01:02:32,319 --> 01:02:37,599
tick

1342
01:02:33,520 --> 01:02:40,799
and we introduce an echo reply delay

1343
01:02:37,599 --> 01:02:44,079
for measured network quality

1344
01:02:40,799 --> 01:02:47,440
and and

1345
01:02:44,079 --> 01:02:49,839
this option will allow us to use

1346
01:02:47,440 --> 01:02:50,880
unique hardware timestamp for better

1347
01:02:49,839 --> 01:02:56,000
natural quality

1348
01:02:50,880 --> 01:02:56,000
measurement extra piece

1349
01:02:56,480 --> 01:03:04,319
so the motivation for this option

1350
01:02:59,920 --> 01:03:06,799
first is for doing content control

1351
01:03:04,319 --> 01:03:06,799
so we

1352
01:03:07,520 --> 01:03:12,160
we want to precisely measure the network

1353
01:03:12,400 --> 01:03:19,760
or host or host delay

1354
01:03:15,760 --> 01:03:19,760
for accurate and precise

1355
01:03:19,839 --> 01:03:25,759
network quality that can enable us

1356
01:03:22,880 --> 01:03:27,520
for simple effective data center content

1357
01:03:25,760 --> 01:03:30,720
control algorithms

1358
01:03:27,520 --> 01:03:33,038
especially aided by unique hardware

1359
01:03:30,720 --> 01:03:37,038
timestamping

1360
01:03:33,039 --> 01:03:40,319
for example in the swift paper

1361
01:03:37,039 --> 01:03:40,319
published in sitcom

1362
01:03:41,520 --> 01:03:49,119
it is using the power time stamp

1363
01:03:45,440 --> 01:03:51,119
to compute the rdt that is

1364
01:03:49,119 --> 01:03:52,880
traverse through the network and use

1365
01:03:51,119 --> 01:03:56,839
that as a signal to

1366
01:03:52,880 --> 01:03:59,839
conjunct pendulum the second motivation

1367
01:03:56,839 --> 01:03:59,839
is

1368
01:04:00,160 --> 01:04:07,118
we want to have a meccans

1369
01:04:03,200 --> 01:04:10,799
mechanism in loss recovery

1370
01:04:07,119 --> 01:04:13,839
to have a better

1371
01:04:10,799 --> 01:04:13,839
a minimum rto

1372
01:04:14,079 --> 01:04:20,319
estimation so in the legacy

1373
01:04:17,359 --> 01:04:22,160
implemented implementation the minimum

1374
01:04:20,319 --> 01:04:25,440
rtl is set to

1375
01:04:22,160 --> 01:04:29,839
200 milliseconds which which might be

1376
01:04:25,440 --> 01:04:33,760
two on and the third

1377
01:04:29,839 --> 01:04:37,520
motivation here is to improve the pacing

1378
01:04:33,760 --> 01:04:39,200
rate computation as we compute the

1379
01:04:37,520 --> 01:04:43,038
pacing rate by

1380
01:04:39,200 --> 01:04:46,558
k times conjunction window divided by

1381
01:04:43,039 --> 01:04:50,720
smooth rtd and

1382
01:04:46,559 --> 01:04:54,559
this srtd is measured by the ltd that

1383
01:04:50,720 --> 01:04:58,480
includes the delay x so

1384
01:04:54,559 --> 01:05:03,760
it will bloated hugely

1385
01:04:58,480 --> 01:05:03,760
say 100 times than the natural quality

1386
01:05:04,079 --> 01:05:13,680
next size piece

1387
01:05:08,799 --> 01:05:13,680
uh the existing problem in the

1388
01:05:15,559 --> 01:05:21,920
rfv7323

1389
01:05:17,280 --> 01:05:23,200
timestamp option is that the delay from

1390
01:05:21,920 --> 01:05:27,280
the delayed act

1391
01:05:23,200 --> 01:05:30,319
are included in the rdt measurement

1392
01:05:27,280 --> 01:05:34,880
and rdd cannot

1393
01:05:30,319 --> 01:05:38,880
can only be measured only if the

1394
01:05:34,880 --> 01:05:39,520
pack advanced snd the una which is the

1395
01:05:38,880 --> 01:05:43,280
left

1396
01:05:39,520 --> 01:05:43,280
edge of the sending window

1397
01:05:43,520 --> 01:05:47,440
and house side delays are included in

1398
01:05:45,920 --> 01:05:52,160
this rtd measurement

1399
01:05:47,440 --> 01:05:52,160
for example in in

1400
01:05:52,319 --> 01:06:00,000
in the network the cpu can

1401
01:05:55,599 --> 01:06:03,119
wait can can sleep and wake up

1402
01:06:00,000 --> 01:06:05,520
in an rtt in a round trip

1403
01:06:03,119 --> 01:06:06,799
and this waking up delay will be

1404
01:06:05,520 --> 01:06:11,599
measured in the

1405
01:06:06,799 --> 01:06:15,359
rtd and we can observe that

1406
01:06:11,599 --> 01:06:16,480
in data center network this cpu waking

1407
01:06:15,359 --> 01:06:20,558
up time

1408
01:06:16,480 --> 01:06:23,280
can be longer than the network led

1409
01:06:20,559 --> 01:06:24,960
and another problem is that clock

1410
01:06:23,280 --> 01:06:29,039
frequency

1411
01:06:24,960 --> 01:06:32,799
is too converse versus the modern

1412
01:06:29,039 --> 01:06:37,680
data center network with usual with

1413
01:06:32,799 --> 01:06:37,680
rdt less than 100 microseconds

1414
01:06:38,400 --> 01:06:41,359
next size please

1415
01:06:42,079 --> 01:06:51,039
so in this proposed new

1416
01:06:46,240 --> 01:06:56,720
ets option we

1417
01:06:51,039 --> 01:06:56,720
use an exid

1418
01:06:58,480 --> 01:07:05,839
the ts val and t secr are

1419
01:07:02,559 --> 01:07:07,680
just have the same semantics in the

1420
01:07:05,839 --> 01:07:11,920
original rfc

1421
01:07:07,680 --> 01:07:15,680
but they are in microsecond unit

1422
01:07:11,920 --> 01:07:18,079
and we include etr

1423
01:07:15,680 --> 01:07:18,078
delay

1424
01:07:19,599 --> 01:07:23,359
and we specify the units of this ccr

1425
01:07:22,400 --> 01:07:26,400
name

1426
01:07:23,359 --> 01:07:29,440
so this ecr delay can be

1427
01:07:26,400 --> 01:07:32,480
in microsecond or milliseconds but

1428
01:07:29,440 --> 01:07:36,079
its unit is specified in this

1429
01:07:32,480 --> 01:07:39,359
option and then we include

1430
01:07:36,079 --> 01:07:40,000
max accolade but this this last field

1431
01:07:39,359 --> 01:07:42,960
mac

1432
01:07:40,000 --> 01:07:44,000
actually only presented in the in the

1433
01:07:42,960 --> 01:07:47,920
handshake

1434
01:07:44,000 --> 01:07:50,160
in the same package so in the

1435
01:07:47,920 --> 01:07:53,039
in the regular pack in the database is

1436
01:07:50,160 --> 01:07:57,279
followed by the handshake

1437
01:07:53,039 --> 01:08:00,079
it will not have this mac actually

1438
01:07:57,280 --> 01:08:00,079
next slide please

1439
01:08:01,200 --> 01:08:09,200
so here is the example

1440
01:08:04,319 --> 01:08:11,680
in the handshake so we will include

1441
01:08:09,200 --> 01:08:13,118
gcr delay in all package but only

1442
01:08:11,680 --> 01:08:17,200
include mac

1443
01:08:13,119 --> 01:08:17,200
max add delay in the handshake

1444
01:08:21,040 --> 01:08:29,040
next slide please

1445
01:08:25,520 --> 01:08:33,440
so here is how we compute

1446
01:08:29,040 --> 01:08:36,719
this ecr delay uh this idea can be

1447
01:08:33,439 --> 01:08:39,839
computed by this algorithm

1448
01:08:36,719 --> 01:08:42,319
so we will have ts

1449
01:08:39,839 --> 01:08:42,318
latest

1450
01:08:44,080 --> 01:08:50,839
and this ts the latest clock

1451
01:08:47,520 --> 01:08:56,560
be the arrival time of the segment

1452
01:08:50,839 --> 01:08:56,559
that with the latest ts value

1453
01:08:57,359 --> 01:09:03,920
and when sending them and package

1454
01:09:00,799 --> 01:09:07,278
we will calculate the

1455
01:09:03,920 --> 01:09:10,560
pse tsccr to be test recent

1456
01:09:07,279 --> 01:09:14,239
as defined in the original rfc

1457
01:09:10,560 --> 01:09:18,239
and the latest act delay to beat the

1458
01:09:14,238 --> 01:09:23,040
sending time of this segment minus the

1459
01:09:18,238 --> 01:09:27,120
ts that latest clock

1460
01:09:23,040 --> 01:09:31,839
and ts ecrh

1461
01:09:27,120 --> 01:09:35,519
equals to ts style latest

1462
01:09:31,839 --> 01:09:39,439
minus the tsa tsccr

1463
01:09:35,520 --> 01:09:41,679
and then this ecr delay equals to

1464
01:09:39,439 --> 01:09:42,559
the submission of two components which

1465
01:09:41,679 --> 01:09:45,759
is

1466
01:09:42,560 --> 01:09:49,199
the latest activate plus the ts

1467
01:09:45,759 --> 01:09:54,640
ecrh so in the next i will show

1468
01:09:49,198 --> 01:09:54,639
two examples uh demonstrates how we

1469
01:09:54,960 --> 01:10:00,640
how we compare these two components and

1470
01:09:57,440 --> 01:10:00,639
what's the meaning of these two

1471
01:10:00,840 --> 01:10:05,440
components

1472
01:10:02,320 --> 01:10:08,719
uh also note that you see so

1473
01:10:05,440 --> 01:10:12,239
also note that each idea is zero when

1474
01:10:08,719 --> 01:10:16,239
there's no act delay and the

1475
01:10:12,239 --> 01:10:18,879
tcci is the latest received timestamp

1476
01:10:16,239 --> 01:10:18,879
next piece

1477
01:10:20,159 --> 01:10:28,719
so here is the example we showed

1478
01:10:24,239 --> 01:10:28,718
how we compute the natural quantity

1479
01:10:28,960 --> 01:10:33,120
so first the natural entity is defined

1480
01:10:31,760 --> 01:10:37,120
by the time

1481
01:10:33,120 --> 01:10:41,040
from when the data segment if

1482
01:10:37,120 --> 01:10:42,719
leaves the sender until when it arrived

1483
01:10:41,040 --> 01:10:46,080
at the receiver

1484
01:10:42,719 --> 01:10:48,960
plus the time from when

1485
01:10:46,080 --> 01:10:49,600
the corresponding act leave that data

1486
01:10:48,960 --> 01:10:52,880
receiver

1487
01:10:49,600 --> 01:10:56,840
until the act received the data center

1488
01:10:52,880 --> 01:10:59,840
so in the example

1489
01:10:56,840 --> 01:10:59,840
here

1490
01:11:01,920 --> 01:11:08,320
tcpas at time one send the

1491
01:11:05,199 --> 01:11:12,080
packet to tcb

1492
01:11:08,320 --> 01:11:15,280
and and the ad is delayed

1493
01:11:12,080 --> 01:11:18,719
and at time

1494
01:11:15,280 --> 01:11:22,239
equals to 10 the tcp will

1495
01:11:18,719 --> 01:11:26,719
act a packet back so in the ack

1496
01:11:22,239 --> 01:11:30,080
it will have this kccr equals to 1

1497
01:11:26,719 --> 01:11:33,120
echo in the test value and

1498
01:11:30,080 --> 01:11:36,800
the ecr delay is

1499
01:11:33,120 --> 01:11:40,000
8 which is compared by

1500
01:11:36,800 --> 01:11:42,560
the calculation on the right so

1501
01:11:40,000 --> 01:11:42,560
we have the

1502
01:11:43,120 --> 01:11:50,480
green color mark marked

1503
01:11:46,800 --> 01:11:54,400
to the latest act delay

1504
01:11:50,480 --> 01:11:57,519
that is the the time from

1505
01:11:54,400 --> 01:12:00,719
when the act is sent to

1506
01:11:57,520 --> 01:12:01,360
the time this this data package is

1507
01:12:00,719 --> 01:12:03,760
received

1508
01:12:01,360 --> 01:12:06,320
so it's 10 minus 2

1509
01:12:03,760 --> 01:12:10,480
[Music]

1510
01:12:06,320 --> 01:12:11,120
which is 8 so so when the t3a received

1511
01:12:10,480 --> 01:12:15,120
this act

1512
01:12:11,120 --> 01:12:18,320
it can compute this network t

1513
01:12:15,120 --> 01:12:21,599
by 11 which is the

1514
01:12:18,320 --> 01:12:25,599
arrival time of this act minus

1515
01:12:21,600 --> 01:12:28,800
one which is the tccr

1516
01:12:25,600 --> 01:12:32,000
minus ecl delay

1517
01:12:28,800 --> 01:12:36,080
which is eight so it

1518
01:12:32,000 --> 01:12:39,280
will get the rtt to be two

1519
01:12:36,080 --> 01:12:40,239
which is the the time that this package

1520
01:12:39,280 --> 01:12:43,280
travels

1521
01:12:40,239 --> 01:12:43,280
through the network

1522
01:12:45,360 --> 01:12:52,639
next please please leave some

1523
01:12:48,880 --> 01:12:56,880
time for questions okay sure

1524
01:12:52,640 --> 01:13:00,480
um how many minutes do i have

1525
01:12:56,880 --> 01:13:05,840
three okay uh so

1526
01:13:00,480 --> 01:13:05,839
here's the another example shows that we

1527
01:13:06,480 --> 01:13:09,839
use the

1528
01:13:11,920 --> 01:13:16,400
x pcr delay to

1529
01:13:16,480 --> 01:13:22,320
compute the network dt when

1530
01:13:19,980 --> 01:13:25,759
[Music]

1531
01:13:22,320 --> 01:13:28,799
when the ack

1532
01:13:25,760 --> 01:13:32,320
is is acting uh

1533
01:13:28,800 --> 01:13:35,679
two packets

1534
01:13:32,320 --> 01:13:37,840
so the tcpa is sent to send the first

1535
01:13:35,679 --> 01:13:39,920
package that is delayed

1536
01:13:37,840 --> 01:13:41,120
the act is delayed and then send another

1537
01:13:39,920 --> 01:13:44,080
package

1538
01:13:41,120 --> 01:13:44,080
at time 5.

1539
01:13:44,560 --> 01:13:51,760
it arrives time t3b at time 6

1540
01:13:48,080 --> 01:13:56,719
and then t3b send the act back

1541
01:13:51,760 --> 01:14:00,080
so in this act it has ecr to b1

1542
01:13:56,719 --> 01:14:04,480
and ecr delay is to be

1543
01:14:00,080 --> 01:14:07,760
four which which is computed by the

1544
01:14:04,480 --> 01:14:07,759
equation on the right

1545
01:14:08,000 --> 01:14:15,840
uh here the ts ecrh

1546
01:14:11,679 --> 01:14:15,840
is from

1547
01:14:16,239 --> 01:14:23,040
t1 to t5 so it's it is four

1548
01:14:20,480 --> 01:14:25,360
and then when the sender received this

1549
01:14:23,040 --> 01:14:28,400
act it can compute this

1550
01:14:25,360 --> 01:14:31,920
uh naturality to be

1551
01:14:28,400 --> 01:14:36,799
seven which is the arrival time minus

1552
01:14:31,920 --> 01:14:42,080
one minus four so this is the rdt of

1553
01:14:36,800 --> 01:14:45,040
p1 prime which is the second package

1554
01:14:42,080 --> 01:14:45,040
next race please

1555
01:14:46,880 --> 01:14:53,520
okay so yeah uh

1556
01:14:50,320 --> 01:14:57,120
i guess this the second

1557
01:14:53,520 --> 01:15:00,320
last slice before discussion

1558
01:14:57,120 --> 01:15:04,239
so so we also exchanged the

1559
01:15:00,320 --> 01:15:07,440
maximum act delay in the sim package

1560
01:15:04,239 --> 01:15:08,718
during the handshake so this maximum

1561
01:15:07,440 --> 01:15:11,759
activate can be

1562
01:15:08,719 --> 01:15:13,930
used to binding the

1563
01:15:11,760 --> 01:15:16,969
minimum rtl

1564
01:15:13,930 --> 01:15:16,969
[Music]

1565
01:15:17,920 --> 01:15:22,840
which which will be useful for computing

1566
01:15:21,440 --> 01:15:26,080
the

1567
01:15:22,840 --> 01:15:29,920
rto uh timer

1568
01:15:26,080 --> 01:15:29,920
yeah next size piece

1569
01:15:30,640 --> 01:15:38,480
so in the discussion um

1570
01:15:33,840 --> 01:15:41,679
i will quick discuss some um

1571
01:15:38,480 --> 01:15:43,199
interaction with pause check so this

1572
01:15:41,679 --> 01:15:46,640
required that we

1573
01:15:43,199 --> 01:15:47,919
disable the pause check if the

1574
01:15:46,640 --> 01:15:51,040
connection is idle

1575
01:15:47,920 --> 01:15:54,719
for say

1576
01:15:51,040 --> 01:15:59,760
half an hour and if your

1577
01:15:54,719 --> 01:15:59,760
detection algorithm will stay the same

1578
01:16:01,600 --> 01:16:03,840
and

1579
01:16:04,640 --> 01:16:10,960
the transmission timeout we don't uh

1580
01:16:08,320 --> 01:16:12,799
it's not affected so it is using the

1581
01:16:10,960 --> 01:16:16,159
same mechanism

1582
01:16:12,800 --> 01:16:20,800
and we this option we're left

1583
01:16:16,159 --> 01:16:23,679
with left space for three sac blocks

1584
01:16:20,800 --> 01:16:23,679
acceleration

1585
01:16:24,560 --> 01:16:31,840
um please come to an end yeah mailbox

1586
01:16:28,480 --> 01:16:35,839
security we don't add new security

1587
01:16:31,840 --> 01:16:35,840
so for future extension

1588
01:16:36,640 --> 01:16:44,719
can be append at the end of this option

1589
01:16:41,199 --> 01:16:46,159
i think that's it doing it any questions

1590
01:16:44,719 --> 01:16:50,400
comments

1591
01:16:46,159 --> 01:16:52,400
thank you richard so can you hear me now

1592
01:16:50,400 --> 01:16:54,239
yes i can hear you and i'm closing the

1593
01:16:52,400 --> 01:16:57,280
line after

1594
01:16:54,239 --> 01:17:01,280
very quickly with

1595
01:16:57,280 --> 01:17:03,599
the soon option option to be really

1596
01:17:01,280 --> 01:17:05,519
much more space efficient and for ideas

1597
01:17:03,600 --> 01:17:06,000
how to do this i would like to refer to

1598
01:17:05,520 --> 01:17:08,560
the

1599
01:17:06,000 --> 01:17:09,520
tcpm timestamp negotiation draft that

1600
01:17:08,560 --> 01:17:12,640
i've had

1601
01:17:09,520 --> 01:17:15,760
a couple years ago and also i believe

1602
01:17:12,640 --> 01:17:17,600
this must need to be an exclusive

1603
01:17:15,760 --> 01:17:20,800
dedicated option it could be an

1604
01:17:17,600 --> 01:17:22,400
extension of 73 uh 23

1605
01:17:20,800 --> 01:17:23,840
and just differentiated by the length

1606
01:17:22,400 --> 01:17:28,559
field again

1607
01:17:23,840 --> 01:17:28,560
thank you thank you bob qnx

1608
01:17:28,800 --> 01:17:32,080
oh i'll just say plus one because that

1609
01:17:30,640 --> 01:17:33,199
was nearly exactly what i was going to

1610
01:17:32,080 --> 01:17:37,120
say

1611
01:17:33,199 --> 01:17:37,120
the point is the timestamp yep

1612
01:17:38,070 --> 01:17:41,608
[Music]

1613
01:17:42,840 --> 01:17:45,840
um

1614
01:17:52,080 --> 01:17:56,080
lydia are you saying something

1615
01:17:56,800 --> 01:18:02,640
you know yes yes sorry i was

1616
01:18:00,400 --> 01:18:04,480
yeah probably my mic and a problem so i

1617
01:18:02,640 --> 01:18:07,760
was saying um this is good work

1618
01:18:04,480 --> 01:18:08,480
um and delayed act should be considered

1619
01:18:07,760 --> 01:18:10,640
during the

1620
01:18:08,480 --> 01:18:11,839
calculation of retransmission timeout

1621
01:18:10,640 --> 01:18:13,760
and the draft

1622
01:18:11,840 --> 01:18:15,679
or at least a slice mentioned that those

1623
01:18:13,760 --> 01:18:18,960
would not be affected by

1624
01:18:15,679 --> 01:18:21,360
this change or this new um

1625
01:18:18,960 --> 01:18:22,320
addition in the timestamp so i was

1626
01:18:21,360 --> 01:18:24,559
wondering what is

1627
01:18:22,320 --> 01:18:25,440
like what what what is the target use

1628
01:18:24,560 --> 01:18:27,360
case for

1629
01:18:25,440 --> 01:18:29,599
calculating the network rtt i have one

1630
01:18:27,360 --> 01:18:31,360
in mind but i would like to know what

1631
01:18:29,600 --> 01:18:34,159
the author were

1632
01:18:31,360 --> 01:18:34,639
thinking about the use case for this

1633
01:18:34,159 --> 01:18:38,159
he's

1634
01:18:34,640 --> 01:18:41,360
mainly using this controller

1635
01:18:38,159 --> 01:18:41,759
exactly yeah so yeah so ledpad is one of

1636
01:18:41,360 --> 01:18:43,759
them

1637
01:18:41,760 --> 01:18:45,199
and i have been recently seeing some

1638
01:18:43,760 --> 01:18:48,000
problems with

1639
01:18:45,199 --> 01:18:50,239
delayed rtt uh sorry delete x and the

1640
01:18:48,000 --> 01:18:53,520
rtt gets really inflated

1641
01:18:50,239 --> 01:18:54,080
when the network rtt is actually not so

1642
01:18:53,520 --> 01:18:57,600
definitely

1643
01:18:54,080 --> 01:19:00,719
this is something i would look into um

1644
01:18:57,600 --> 01:19:06,159
thank you thank you

1645
01:19:00,719 --> 01:19:06,159
very much next and last

1646
01:19:06,719 --> 01:19:09,840
yeah great work

1647
01:19:14,880 --> 01:19:20,400
we have an echo so yeah the the max

1648
01:19:18,480 --> 01:19:21,759
dealer is actually a really uh useful

1649
01:19:20,400 --> 01:19:23,599
thing uh it

1650
01:19:21,760 --> 01:19:25,040
solves the they may not your problem in

1651
01:19:23,600 --> 01:19:26,320
the data center so i think that's very

1652
01:19:25,040 --> 01:19:28,320
very useful

1653
01:19:26,320 --> 01:19:29,840
i'm not very convinced about coupling

1654
01:19:28,320 --> 01:19:32,960
that with timestamps

1655
01:19:29,840 --> 01:19:34,480
but i will continue to review this draft

1656
01:19:32,960 --> 01:19:36,400
one question i have is are you

1657
01:19:34,480 --> 01:19:38,239
considering considering to publish this

1658
01:19:36,400 --> 01:19:41,040
as experimental or are you

1659
01:19:38,239 --> 01:19:41,839
planning to request like a formal uh

1660
01:19:41,040 --> 01:19:45,280
option type

1661
01:19:41,840 --> 01:19:48,800
of those yeah we we are requesting

1662
01:19:45,280 --> 01:19:52,800
for formal option kind

1663
01:19:48,800 --> 01:19:52,800
after we get in ifc

1664
01:19:55,120 --> 01:20:00,080
okay so we have to stop here

1665
01:19:58,159 --> 01:20:01,519
we have five minutes behind the schedule

1666
01:20:00,080 --> 01:20:07,040
so uh

1667
01:20:01,520 --> 01:20:07,040
i think next is mptcp rob e

1668
01:20:10,639 --> 01:20:15,280
hello michael speaking can you hear me

1669
01:20:12,800 --> 01:20:18,080
yes i'm very good

1670
01:20:15,280 --> 01:20:19,360
if you can be shorter than 10 minutes

1671
01:20:18,080 --> 01:20:22,639
that would be perfect

1672
01:20:19,360 --> 01:20:25,040
i will do my best um so

1673
01:20:22,639 --> 01:20:26,239
i want to give you an update to the

1674
01:20:25,040 --> 01:20:29,360
multi-part tcp

1675
01:20:26,239 --> 01:20:32,400
robust session establishment we proposed

1676
01:20:29,360 --> 01:20:35,199
some ideas ago that's some

1677
01:20:32,400 --> 01:20:36,960
joint work and presentation from ciao

1678
01:20:35,199 --> 01:20:39,759
and colleagues from huawei and myself

1679
01:20:36,960 --> 01:20:39,760
next slide please

1680
01:20:40,000 --> 01:20:45,440
so just a short recap so multiple tcp

1681
01:20:43,520 --> 01:20:47,199
ruby robust establishment is a set of

1682
01:20:45,440 --> 01:20:51,360
extensions to regular

1683
01:20:47,199 --> 01:20:54,879
mptcp it do not distinguish between

1684
01:20:51,360 --> 01:20:58,839
the old mptcp rse 6824

1685
01:20:54,880 --> 01:21:02,639
and the newer one we support both

1686
01:20:58,840 --> 01:21:05,440
and uh the idea is to design

1687
01:21:02,639 --> 01:21:06,239
a robust establishment process for mptcp

1688
01:21:05,440 --> 01:21:09,120
sessions

1689
01:21:06,239 --> 01:21:11,199
which is not given by the aforementioned

1690
01:21:09,120 --> 01:21:14,719
rfcs

1691
01:21:11,199 --> 01:21:16,719
we propose several mechanisms that the

1692
01:21:14,719 --> 01:21:18,239
ruby timer which uses the

1693
01:21:16,719 --> 01:21:21,199
re-transmission timer

1694
01:21:18,239 --> 01:21:22,959
tcp retransmission timer to probe

1695
01:21:21,199 --> 01:21:25,440
subsequent paths

1696
01:21:22,960 --> 01:21:26,080
uh we have the aerobic sim and ether

1697
01:21:25,440 --> 01:21:29,599
both

1698
01:21:26,080 --> 01:21:31,679
are firing simultaneously the handshake

1699
01:21:29,600 --> 01:21:33,679
process on all available parts

1700
01:21:31,679 --> 01:21:34,880
and last but not least we have the ruby

1701
01:21:33,679 --> 01:21:38,560
ips

1702
01:21:34,880 --> 01:21:42,080
which makes some smart decisions

1703
01:21:38,560 --> 01:21:46,080
um on which path

1704
01:21:42,080 --> 01:21:47,679
is the best one to start the initial

1705
01:21:46,080 --> 01:21:50,559
handshake process

1706
01:21:47,679 --> 01:21:50,560
next slide please

1707
01:21:53,199 --> 01:21:59,280
so what has been done so far

1708
01:21:56,239 --> 01:22:00,879
um as i said it was presented some eight

1709
01:21:59,280 --> 01:22:04,639
years ago

1710
01:22:00,880 --> 01:22:07,120
it was 90 f-106 where we presented it

1711
01:22:04,639 --> 01:22:10,719
the first time

1712
01:22:07,120 --> 01:22:14,159
for 107 then we

1713
01:22:10,719 --> 01:22:15,199
prepared a hackathon contribution

1714
01:22:14,159 --> 01:22:18,320
unfortunately

1715
01:22:15,199 --> 01:22:21,919
that has not happened did you covet

1716
01:22:18,320 --> 01:22:23,759
19. nevertheless uh everything we

1717
01:22:21,920 --> 01:22:27,120
planned for the hackathon then we

1718
01:22:23,760 --> 01:22:31,360
presented in itf 108

1719
01:22:27,120 --> 01:22:35,280
so we performed all

1720
01:22:31,360 --> 01:22:36,960
the things we prepared for the hackathon

1721
01:22:35,280 --> 01:22:40,880
and we tried to

1722
01:22:36,960 --> 01:22:41,520
do their uh offline and represented the

1723
01:22:40,880 --> 01:22:44,960
results

1724
01:22:41,520 --> 01:22:46,400
then as i said in 108 and these results

1725
01:22:44,960 --> 01:22:49,679
were very promising and

1726
01:22:46,400 --> 01:22:52,000
uh presented that there is a benefit of

1727
01:22:49,679 --> 01:22:53,120
applying robert's establishment to

1728
01:22:52,000 --> 01:22:55,920
multiples tcp

1729
01:22:53,120 --> 01:22:55,920
next slide please

1730
01:22:59,440 --> 01:23:04,719
last time at itf 108 we requested

1731
01:23:03,840 --> 01:23:06,719
adoption

1732
01:23:04,719 --> 01:23:07,760
however there were some concerns from

1733
01:23:06,719 --> 01:23:10,960
the

1734
01:23:07,760 --> 01:23:15,280
tcpm chairs in respect to

1735
01:23:10,960 --> 01:23:16,560
ipr i think we made some clarifications

1736
01:23:15,280 --> 01:23:18,480
in the meantime on

1737
01:23:16,560 --> 01:23:20,320
that please follow the links in this

1738
01:23:18,480 --> 01:23:23,440
presentation to see

1739
01:23:20,320 --> 01:23:25,679
what we updated there

1740
01:23:23,440 --> 01:23:27,519
and there was another concern from the

1741
01:23:25,679 --> 01:23:32,840
tcpm chairs

1742
01:23:27,520 --> 01:23:36,480
that we shall include the multi-pass tcp

1743
01:23:32,840 --> 01:23:38,560
experts um into the development of the

1744
01:23:36,480 --> 01:23:41,040
draft and

1745
01:23:38,560 --> 01:23:43,679
i think we did this can you please go to

1746
01:23:41,040 --> 01:23:43,679
the next slide

1747
01:23:45,040 --> 01:23:48,239
so here you will find the link to the

1748
01:23:47,440 --> 01:23:51,519
discussion

1749
01:23:48,239 --> 01:23:54,080
we started so far we have not received

1750
01:23:51,520 --> 01:23:54,880
any objections however there was some

1751
01:23:54,080 --> 01:23:59,920
feedback from

1752
01:23:54,880 --> 01:23:59,920
olivier in respect to local answer

1753
01:24:00,000 --> 01:24:07,840
i think we gave some answers

1754
01:24:04,400 --> 01:24:10,879
or some guidelines uh to this

1755
01:24:07,840 --> 01:24:12,239
um in in the sense that we

1756
01:24:10,880 --> 01:24:14,320
let me conclude that robert's

1757
01:24:12,239 --> 01:24:16,480
establishment is something optional

1758
01:24:14,320 --> 01:24:17,599
so it has not to be applied it can be

1759
01:24:16,480 --> 01:24:20,000
selected

1760
01:24:17,600 --> 01:24:21,679
by by sender and probably also by

1761
01:24:20,000 --> 01:24:23,679
receiver

1762
01:24:21,679 --> 01:24:24,719
so in case of load balancers i fully

1763
01:24:23,679 --> 01:24:27,760
agree that would be an

1764
01:24:24,719 --> 01:24:30,960
issue but load balancer

1765
01:24:27,760 --> 01:24:33,280
has not to select or has not to support

1766
01:24:30,960 --> 01:24:34,320
robust establishment it's more something

1767
01:24:33,280 --> 01:24:37,360
which i see

1768
01:24:34,320 --> 01:24:41,040
um either to be end to end applied

1769
01:24:37,360 --> 01:24:42,239
or maybe in such cases where we have

1770
01:24:41,040 --> 01:24:45,360
multiple tcp

1771
01:24:42,239 --> 01:24:46,799
proxies as it is for example in 3 gbp 80

1772
01:24:45,360 --> 01:24:49,679
triple s

1773
01:24:46,800 --> 01:24:50,560
um the next iteration of the draft we

1774
01:24:49,679 --> 01:24:54,159
plan for

1775
01:24:50,560 --> 01:24:58,560
itf 110 and again

1776
01:24:54,159 --> 01:24:58,559
i want to put the question here

1777
01:24:59,679 --> 01:25:05,360
can we jointly adopt the draft document

1778
01:25:06,080 --> 01:25:12,239
so thank you um

1779
01:25:09,120 --> 01:25:15,280
so you you said you clarified the ipr

1780
01:25:12,239 --> 01:25:16,799
um declaration um

1781
01:25:15,280 --> 01:25:19,120
at least when i looked at it there's no

1782
01:25:16,800 --> 01:25:22,000
statement about the license

1783
01:25:19,120 --> 01:25:22,559
except for it's very fair and equal and

1784
01:25:22,000 --> 01:25:25,440
then

1785
01:25:22,560 --> 01:25:26,159
exactly exactly that the current status

1786
01:25:25,440 --> 01:25:29,599
yeah okay so

1787
01:25:26,159 --> 01:25:31,920
but so it's it's uh

1788
01:25:29,600 --> 01:25:33,920
my understanding it's something which is

1789
01:25:31,920 --> 01:25:36,400
so you're making no statement about

1790
01:25:33,920 --> 01:25:40,560
if if it's possible to include it in an

1791
01:25:36,400 --> 01:25:43,360
open source implementation

1792
01:25:40,560 --> 01:25:43,920
um that is a good point uh to be honest

1793
01:25:43,360 --> 01:25:46,080
um i

1794
01:25:43,920 --> 01:25:48,800
i think huawei is currently discussing

1795
01:25:46,080 --> 01:25:52,080
this on internally to make their

1796
01:25:48,800 --> 01:25:53,600
code open source so far there is no

1797
01:25:52,080 --> 01:25:57,040
result from this

1798
01:25:53,600 --> 01:26:00,239
internal discussion but maybe jiao

1799
01:25:57,040 --> 01:26:00,960
can jump in if there are some updates so

1800
01:26:00,239 --> 01:26:05,599
she

1801
01:26:00,960 --> 01:26:08,159
i think she is part here of this session

1802
01:26:05,600 --> 01:26:09,760
depending on the time i would say get

1803
01:26:08,159 --> 01:26:13,920
that to the mailing list

1804
01:26:09,760 --> 01:26:17,199
okay um anyone uh

1805
01:26:13,920 --> 01:26:19,840
lars be quick i'm very

1806
01:26:17,199 --> 01:26:21,519
possible for you hi yes why so if you

1807
01:26:19,840 --> 01:26:22,239
guys open source your code that's great

1808
01:26:21,520 --> 01:26:24,159
but i think

1809
01:26:22,239 --> 01:26:26,799
the question is actually whether other

1810
01:26:24,159 --> 01:26:28,960
people can implement the specification

1811
01:26:26,800 --> 01:26:30,480
given the licensing declaration in open

1812
01:26:28,960 --> 01:26:33,920
source without the need

1813
01:26:30,480 --> 01:26:35,440
to get a license from you i think that's

1814
01:26:33,920 --> 01:26:38,719
that's the question

1815
01:26:35,440 --> 01:26:42,159
yeah okay um

1816
01:26:38,719 --> 01:26:44,159
so is that the only hurdle you see

1817
01:26:42,159 --> 01:26:46,799
to getting adopted or is that there's

1818
01:26:44,159 --> 01:26:46,799
something else

1819
01:26:47,920 --> 01:26:54,719
does anyone else have an opinion on this

1820
01:26:51,679 --> 01:26:54,719
on adopting

1821
01:26:55,280 --> 01:27:00,400
narus for me this is sort of necessary

1822
01:26:58,800 --> 01:27:01,440
right that we that we get over that

1823
01:27:00,400 --> 01:27:03,120
before we can

1824
01:27:01,440 --> 01:27:04,239
like there's no point in adopting

1825
01:27:03,120 --> 01:27:05,679
something that you know you need a

1826
01:27:04,239 --> 01:27:08,718
license to implement

1827
01:27:05,679 --> 01:27:11,840
um so okay one without that i'm willing

1828
01:27:08,719 --> 01:27:13,920
to have a further discussion

1829
01:27:11,840 --> 01:27:14,960
okay yeah because then we lose probably

1830
01:27:13,920 --> 01:27:17,600
some time if

1831
01:27:14,960 --> 01:27:19,520
um and and i would like to do things in

1832
01:27:17,600 --> 01:27:22,080
parallel if possible so

1833
01:27:19,520 --> 01:27:23,600
if you know there are other hurdles seen

1834
01:27:22,080 --> 01:27:28,000
from your side

1835
01:27:23,600 --> 01:27:31,040
um we could work on getting them around

1836
01:27:28,000 --> 01:27:33,840
in the meantime when we clarify the ipr

1837
01:27:31,040 --> 01:27:33,840
stuff

1838
01:27:36,639 --> 01:27:40,320
so i think the ipr stuff is kind of a

1839
01:27:39,120 --> 01:27:42,719
central thing

1840
01:27:40,320 --> 01:27:44,080
taking that a lot of tcp implementations

1841
01:27:42,719 --> 01:27:46,880
are in the kernel

1842
01:27:44,080 --> 01:27:50,159
provided by os vendors and some of the

1843
01:27:46,880 --> 01:27:50,159
os's are open source

1844
01:27:50,560 --> 01:27:55,600
like linux or freebsd or other stuff

1845
01:27:59,280 --> 01:28:05,519
okay thank you yeah um

1846
01:28:02,880 --> 01:28:07,520
thanks for the presentation next is um

1847
01:28:05,520 --> 01:28:15,840
accurate data scheduling

1848
01:28:07,520 --> 01:28:15,840
by server and mptcp

1849
01:28:16,400 --> 01:28:24,480
hello hi this is

1850
01:28:19,679 --> 01:28:27,199
okay this is this slide is a

1851
01:28:24,480 --> 01:28:30,480
status report about the work on air

1852
01:28:27,199 --> 01:28:33,040
created scheduling by serving mbtcp

1853
01:28:30,480 --> 01:28:33,759
in fact we have submitted a new version

1854
01:28:33,040 --> 01:28:37,440
for

1855
01:28:33,760 --> 01:28:37,440
this job and next

1856
01:28:38,480 --> 01:28:46,718
yeah this is

1857
01:28:43,600 --> 01:28:49,440
we have a server meet a new version and

1858
01:28:46,719 --> 01:28:50,320
we update some a description of the use

1859
01:28:49,440 --> 01:28:53,678
case

1860
01:28:50,320 --> 01:28:54,400
uh update the definition of mp

1861
01:28:53,679 --> 01:28:57,840
navigation

1862
01:28:54,400 --> 01:28:57,839
option and

1863
01:28:58,320 --> 01:29:03,360
from the mail list discussion uh data

1864
01:29:01,360 --> 01:29:07,120
scheduling on client will receive

1865
01:29:03,360 --> 01:29:10,000
mp navigation will be considered later

1866
01:29:07,120 --> 01:29:11,519
the last one is security will be

1867
01:29:10,000 --> 01:29:14,159
considered because we

1868
01:29:11,520 --> 01:29:14,560
want to analyze the possibility whether

1869
01:29:14,159 --> 01:29:16,879
uh

1870
01:29:14,560 --> 01:29:18,239
this option will be abused by our

1871
01:29:16,880 --> 01:29:21,600
attacker

1872
01:29:18,239 --> 01:29:22,159
uh and the underneath the list paragraph

1873
01:29:21,600 --> 01:29:25,520
leave the

1874
01:29:22,159 --> 01:29:26,159
key points if i start right in the tcp

1875
01:29:25,520 --> 01:29:29,760
email list

1876
01:29:26,159 --> 01:29:33,120
discussion uh some

1877
01:29:29,760 --> 01:29:36,239
they said what advantages comparing to

1878
01:29:33,120 --> 01:29:39,519
current energy priority option

1879
01:29:36,239 --> 01:29:41,040
and also how about this scheduling one

1880
01:29:39,520 --> 01:29:42,880
client when clients

1881
01:29:41,040 --> 01:29:45,040
and the server have completing or

1882
01:29:42,880 --> 01:29:47,920
different strategies

1883
01:29:45,040 --> 01:29:48,719
and the next is how to implement such

1884
01:29:47,920 --> 01:29:52,639
kind of

1885
01:29:48,719 --> 01:29:56,239
logic last one is uh

1886
01:29:52,639 --> 01:29:57,199
this should be also our input for empty

1887
01:29:56,239 --> 01:30:00,159
quick

1888
01:29:57,199 --> 01:30:00,719
yeah this is all that i can collect from

1889
01:30:00,159 --> 01:30:04,839
the

1890
01:30:00,719 --> 01:30:06,159
melissa discussion okay let's go to next

1891
01:30:04,840 --> 01:30:09,360
page

1892
01:30:06,159 --> 01:30:11,679
oh i have i updated the description

1893
01:30:09,360 --> 01:30:12,799
about the use case as you can see in the

1894
01:30:11,679 --> 01:30:15,199
pictures

1895
01:30:12,800 --> 01:30:16,159
the server have multiple and four

1896
01:30:15,199 --> 01:30:19,199
adjusts

1897
01:30:16,159 --> 01:30:23,280
and this this suggests belongs

1898
01:30:19,199 --> 01:30:26,239
to two operator operators

1899
01:30:23,280 --> 01:30:28,000
uh for uh for scenario one that is

1900
01:30:26,239 --> 01:30:30,959
server have a tour he can

1901
01:30:28,000 --> 01:30:32,080
detect the performance of each network

1902
01:30:30,960 --> 01:30:35,920
interface

1903
01:30:32,080 --> 01:30:38,480
we with interface form that uh uh the

1904
01:30:35,920 --> 01:30:39,120
the kpi of one network interface is not

1905
01:30:38,480 --> 01:30:41,678
better

1906
01:30:39,120 --> 01:30:42,239
than before he will change the traffic

1907
01:30:41,679 --> 01:30:44,400
from

1908
01:30:42,239 --> 01:30:45,440
this one to another one that with better

1909
01:30:44,400 --> 01:30:48,960
kpi

1910
01:30:45,440 --> 01:30:52,480
and for scenario two is that a new a new

1911
01:30:48,960 --> 01:30:55,600
uh network interface uh be added

1912
01:30:52,480 --> 01:30:56,718
during an mp tcp session and the third

1913
01:30:55,600 --> 01:30:59,280
one

1914
01:30:56,719 --> 01:31:00,560
uh just of uh or one requirement is for

1915
01:30:59,280 --> 01:31:03,599
tests that want to

1916
01:31:00,560 --> 01:31:07,600
change some traffic to the new one for

1917
01:31:03,600 --> 01:31:10,159
uh for test the network interface

1918
01:31:07,600 --> 01:31:11,280
uh and scenario three is just for

1919
01:31:10,159 --> 01:31:14,400
operating

1920
01:31:11,280 --> 01:31:16,239
operation requirement that for for the

1921
01:31:14,400 --> 01:31:20,400
service owner he wants to

1922
01:31:16,239 --> 01:31:24,400
provide his keep his uh vip user with

1923
01:31:20,400 --> 01:31:27,120
with uh subflow that with a better kpi

1924
01:31:24,400 --> 01:31:27,519
better performance the last one is that

1925
01:31:27,120 --> 01:31:30,559
that

1926
01:31:27,520 --> 01:31:34,000
the mg's mptcp server

1927
01:31:30,560 --> 01:31:37,120
hope to adjust the traffic uh based on

1928
01:31:34,000 --> 01:31:40,239
the changes in the network of course

1929
01:31:37,120 --> 01:31:43,120
this these four scenarios what we found

1930
01:31:40,239 --> 01:31:43,519
for the requirements okay let's go to

1931
01:31:43,120 --> 01:31:47,519
next

1932
01:31:43,520 --> 01:31:48,159
page uh this uh this is the definition

1933
01:31:47,520 --> 01:31:50,880
for these

1934
01:31:48,159 --> 01:31:52,960
options that can send a send from server

1935
01:31:50,880 --> 01:31:57,840
to client to inform

1936
01:31:52,960 --> 01:32:01,600
a server requirement to the client

1937
01:31:57,840 --> 01:32:04,639
i think the gsid is used

1938
01:32:01,600 --> 01:32:06,800
to uh to use it to

1939
01:32:04,639 --> 01:32:08,080
identify the target network in the face

1940
01:32:06,800 --> 01:32:11,840
that the server wants to

1941
01:32:08,080 --> 01:32:14,559
traffic the traffic to okay let's go to

1942
01:32:11,840 --> 01:32:17,679
the next page

1943
01:32:14,560 --> 01:32:20,239
uh let's that's the

1944
01:32:17,679 --> 01:32:22,080
plan for our work we think that

1945
01:32:20,239 --> 01:32:25,519
scheduling on client will receive

1946
01:32:22,080 --> 01:32:29,040
mp navigation will be considered

1947
01:32:25,520 --> 01:32:32,639
we will consider it in in you more

1948
01:32:29,040 --> 01:32:35,360
in details about how to implement it

1949
01:32:32,639 --> 01:32:36,159
and and the important is the security

1950
01:32:35,360 --> 01:32:39,839
problem

1951
01:32:36,159 --> 01:32:41,920
and we we are planning to arrange a demo

1952
01:32:39,840 --> 01:32:44,880
for it if required

1953
01:32:41,920 --> 01:32:47,120
in fact we have a f1 developer he is

1954
01:32:44,880 --> 01:32:50,000
also the core author of this chapter

1955
01:32:47,120 --> 01:32:50,639
he told me that if this draft is

1956
01:32:50,000 --> 01:32:54,560
valuable

1957
01:32:50,639 --> 01:32:58,080
to a tcpm group and the demo is required

1958
01:32:54,560 --> 01:33:01,120
he can put some uh some some time

1959
01:32:58,080 --> 01:33:04,719
on this on this work

1960
01:33:01,120 --> 01:33:06,880
if because of the some uncontrolled

1961
01:33:04,719 --> 01:33:08,000
effect zone we cannot promise the

1962
01:33:06,880 --> 01:33:10,480
timeline for this

1963
01:33:08,000 --> 01:33:12,239
demo but if required we can discover

1964
01:33:10,480 --> 01:33:16,320
with our team yeah

1965
01:33:12,239 --> 01:33:16,320
that's all for the chat

1966
01:33:16,960 --> 01:33:23,920
thank you other questions or comments

1967
01:33:20,960 --> 01:33:24,480
i guess lars is in the queue but he just

1968
01:33:23,920 --> 01:33:28,159
didn't

1969
01:33:24,480 --> 01:33:37,839
leave last time okay

1970
01:33:28,159 --> 01:33:37,839
or am i wrong no

1971
01:33:43,360 --> 01:33:50,320
okay so um

1972
01:33:47,040 --> 01:33:51,199
no comments here you have another

1973
01:33:50,320 --> 01:33:54,400
presentation

1974
01:33:51,199 --> 01:33:56,960
on fault management right

1975
01:33:54,400 --> 01:33:56,960
oh yes

1976
01:34:01,040 --> 01:34:08,639
yeah okay this is go ahead okay

1977
01:34:04,639 --> 01:34:12,400
this is also our new idea for mptcp

1978
01:34:08,639 --> 01:34:15,199
uh it's also from uh from our uh

1979
01:34:12,400 --> 01:34:16,719
operation requirement that we want uh

1980
01:34:15,199 --> 01:34:19,280
enhancement in

1981
01:34:16,719 --> 01:34:22,320
current fort management we have

1982
01:34:19,280 --> 01:34:26,400
submitted the chapter to jcpm group

1983
01:34:22,320 --> 01:34:26,400
okay next page yeah

1984
01:34:27,360 --> 01:34:33,759
this this has described the use case

1985
01:34:30,400 --> 01:34:36,879
for why we need our enhancement on mpdp

1986
01:34:33,760 --> 01:34:38,159
fault management as you can see in the

1987
01:34:36,880 --> 01:34:40,239
future

1988
01:34:38,159 --> 01:34:43,839
there are multiple paths between client

1989
01:34:40,239 --> 01:34:43,839
one client to another server

1990
01:34:44,800 --> 01:34:50,719
when when two parts are uh encode

1991
01:34:47,920 --> 01:34:51,119
encounter the problems this problem will

1992
01:34:50,719 --> 01:34:53,600
uh

1993
01:34:51,119 --> 01:34:54,559
cause the the parts cannot be used for

1994
01:34:53,600 --> 01:34:56,880
data

1995
01:34:54,560 --> 01:34:57,600
transmission you mean that the problem

1996
01:34:56,880 --> 01:35:01,679
is happened

1997
01:34:57,600 --> 01:35:04,480
suddenly so uh we can use other

1998
01:35:01,679 --> 01:35:05,760
we have used other parts to transfer the

1999
01:35:04,480 --> 01:35:10,320
problem of the

2000
01:35:05,760 --> 01:35:13,360
of this rom subflows to to the server

2001
01:35:10,320 --> 01:35:16,880
you have as sure by the

2002
01:35:13,360 --> 01:35:19,519
green errors and the server can collect

2003
01:35:16,880 --> 01:35:20,480
all the all the wrong info all around

2004
01:35:19,520 --> 01:35:23,920
info and

2005
01:35:20,480 --> 01:35:26,879
he can use the info from multiple

2006
01:35:23,920 --> 01:35:28,239
from multiple clients to determine which

2007
01:35:26,880 --> 01:35:32,000
which node is wrong

2008
01:35:28,239 --> 01:35:35,360
on the path yeah this is the

2009
01:35:32,000 --> 01:35:42,320
key key idea for for the

2010
01:35:35,360 --> 01:35:45,759
so uh okay let's go to next page

2011
01:35:42,320 --> 01:35:49,040
oh and this is the flow for the

2012
01:35:45,760 --> 01:35:52,000
for the re firm uh for the solution

2013
01:35:49,040 --> 01:35:53,519
uh during uh mp gdp session there are

2014
01:35:52,000 --> 01:35:55,119
multiple subflows

2015
01:35:53,520 --> 01:35:58,239
and the client determined that one

2016
01:35:55,119 --> 01:36:01,839
ongoing flow is 40 and this 40 is

2017
01:35:58,239 --> 01:36:02,879
is suddenly so uh what how he can

2018
01:36:01,840 --> 01:36:05,920
determine the

2019
01:36:02,880 --> 01:36:07,520
this problem maybe what a client can

2020
01:36:05,920 --> 01:36:10,800
have a tour he can

2021
01:36:07,520 --> 01:36:14,000
listen to the part he can detect the

2022
01:36:10,800 --> 01:36:15,760
the problems and another way he can

2023
01:36:14,000 --> 01:36:19,280
receive the report from

2024
01:36:15,760 --> 01:36:19,760
the third part uh tour on the network

2025
01:36:19,280 --> 01:36:22,559
and

2026
01:36:19,760 --> 01:36:23,440
the network the tour can report the

2027
01:36:22,560 --> 01:36:25,600
problem

2028
01:36:23,440 --> 01:36:27,440
of the network to the client and the

2029
01:36:25,600 --> 01:36:31,440
client can determine the course

2030
01:36:27,440 --> 01:36:35,360
and he he can send the fourth

2031
01:36:31,440 --> 01:36:38,799
the the 40 reason to the server

2032
01:36:35,360 --> 01:36:43,759
why another subflow that running will

2033
01:36:38,800 --> 01:36:43,760
and the server can receive these options

2034
01:36:44,080 --> 01:36:47,040
and next page

2035
01:36:47,280 --> 01:36:52,559
we use we think we think we

2036
01:36:50,320 --> 01:36:54,639
we define a new option that's called

2037
01:36:52,560 --> 01:36:57,679
force announcement

2038
01:36:54,639 --> 01:36:58,400
uh option and this option uh have uh the

2039
01:36:57,679 --> 01:37:01,760
main

2040
01:36:58,400 --> 01:37:05,119
changes to current uh uh to to this

2041
01:37:01,760 --> 01:37:08,239
main changes to this option is that we

2042
01:37:05,119 --> 01:37:10,320
define of course and the destination

2043
01:37:08,239 --> 01:37:11,678
destination address id and the source

2044
01:37:10,320 --> 01:37:14,639
address id

2045
01:37:11,679 --> 01:37:15,199
the course we know that there is a

2046
01:37:14,639 --> 01:37:19,280
reason

2047
01:37:15,199 --> 01:37:21,599
have defined in a current mpdp protocol

2048
01:37:19,280 --> 01:37:23,119
if it can reduce we can add some new

2049
01:37:21,600 --> 01:37:26,080
values to this

2050
01:37:23,119 --> 01:37:28,080
uh grid field and the definition address

2051
01:37:26,080 --> 01:37:29,440
id and the source suggests that is used

2052
01:37:28,080 --> 01:37:33,519
to identify

2053
01:37:29,440 --> 01:37:38,159
the 4g subflows to the server

2054
01:37:33,520 --> 01:37:42,159
and that's all our uh our suggestion

2055
01:37:38,159 --> 01:37:45,280
for the option uh next page

2056
01:37:42,159 --> 01:37:48,799
and i think uh oh that's all

2057
01:37:45,280 --> 01:37:52,880
our suggestion and

2058
01:37:48,800 --> 01:37:52,880
adding comments are welcome yeah

2059
01:37:52,960 --> 01:37:56,480
yeah are there comments or questions

2060
01:38:01,040 --> 01:38:08,560
okay yoshi can you hear me yes yeah okay

2061
01:38:04,719 --> 01:38:09,920
yes okay so i have one navigation on

2062
01:38:08,560 --> 01:38:13,119
this draft

2063
01:38:09,920 --> 01:38:16,560
yeah so when something happened

2064
01:38:13,119 --> 01:38:19,599
on the subflow then even client side

2065
01:38:16,560 --> 01:38:20,400
can receive something like a reset

2066
01:38:19,600 --> 01:38:23,520
target or

2067
01:38:20,400 --> 01:38:25,920
icmp bucket it could be timeout

2068
01:38:23,520 --> 01:38:27,040
and then so i've tried to understand the

2069
01:38:25,920 --> 01:38:31,840
use case

2070
01:38:27,040 --> 01:38:31,840
that this approach can be useful

2071
01:38:34,960 --> 01:38:38,320
i think this info is used before the

2072
01:38:37,360 --> 01:38:41,839
softcam

2073
01:38:38,320 --> 01:38:44,159
uh uses an input to determine

2074
01:38:41,840 --> 01:38:45,360
which depending on the path uh which

2075
01:38:44,159 --> 01:38:48,480
notice

2076
01:38:45,360 --> 01:38:51,920
is the forehead as

2077
01:38:48,480 --> 01:38:54,718
yeah immediately maybe

2078
01:38:51,920 --> 01:38:55,440
from from one plant from from one plant

2079
01:38:54,719 --> 01:38:58,080
is cannot

2080
01:38:55,440 --> 01:38:59,119
determine the the location but from

2081
01:38:58,080 --> 01:39:01,280
multiple

2082
01:38:59,119 --> 01:39:02,480
uh from multiple clients if we all

2083
01:39:01,280 --> 01:39:04,800
report that to the sub

2084
01:39:02,480 --> 01:39:06,080
the the subflow over the all one

2085
01:39:04,800 --> 01:39:08,000
machines around i think

2086
01:39:06,080 --> 01:39:09,199
the server can use to determine the

2087
01:39:08,000 --> 01:39:14,560
pushing

2088
01:39:09,199 --> 01:39:14,559
now this is the operating uh requirement

2089
01:39:15,840 --> 01:39:20,000
yeah to some extent i understand but uh

2090
01:39:18,159 --> 01:39:23,119
maybe you can clarify

2091
01:39:20,000 --> 01:39:27,840
in your draft in the next version

2092
01:39:23,119 --> 01:39:27,839
yeah yes i will do it if yeah

2093
01:39:30,239 --> 01:39:34,638
thank you any other comments

2094
01:39:39,440 --> 01:39:45,759
okay then thank you for the presentation

2095
01:39:42,480 --> 01:39:48,799
and um next up this

2096
01:39:45,760 --> 01:39:51,840
is matt we can see him um

2097
01:39:48,800 --> 01:39:55,840
so um

2098
01:39:51,840 --> 01:39:55,840
go ahead

2099
01:39:57,760 --> 01:40:02,000
we can see you but we can't hear you

2100
01:40:05,040 --> 01:40:13,760
like say something is that good

2101
01:40:08,639 --> 01:40:15,840
level yes no it's okay okay

2102
01:40:13,760 --> 01:40:17,920
it's good to be speaking to the ietf

2103
01:40:15,840 --> 01:40:21,600
again it's been a couple years

2104
01:40:17,920 --> 01:40:24,239
um i'm here today to

2105
01:40:21,600 --> 01:40:25,040
ask to bring proportional weight

2106
01:40:24,239 --> 01:40:28,879
reduction

2107
01:40:25,040 --> 01:40:36,800
in as a work item for tcpm to

2108
01:40:28,880 --> 01:40:40,080
bring it to proposed standard next slide

2109
01:40:36,800 --> 01:40:42,560
uh just to recap prr

2110
01:40:40,080 --> 01:40:45,360
the idea the primary mode the primary

2111
01:40:42,560 --> 01:40:47,520
function of prr is to control

2112
01:40:45,360 --> 01:40:48,480
the essentially congestion control

2113
01:40:47,520 --> 01:40:51,119
during recovery

2114
01:40:48,480 --> 01:40:52,320
determining how much data to send to

2115
01:40:51,119 --> 01:40:55,040
smoothly

2116
01:40:52,320 --> 01:40:55,759
go from the old in-flight down to the

2117
01:40:55,040 --> 01:41:00,080
new ss

2118
01:40:55,760 --> 01:41:03,679
thresh it's fairly straightforward

2119
01:41:00,080 --> 01:41:05,920
and it's widely deployed the

2120
01:41:03,679 --> 01:41:06,800
interesting part of it is what happens

2121
01:41:05,920 --> 01:41:09,360
when there is

2122
01:41:06,800 --> 01:41:11,920
more loss when there is loss which takes

2123
01:41:09,360 --> 01:41:16,480
the flight size down below the target

2124
01:41:11,920 --> 01:41:19,840
ss thresh and

2125
01:41:16,480 --> 01:41:21,678
that in during that case it sends data

2126
01:41:19,840 --> 01:41:23,920
more aggressively than it was receiving

2127
01:41:21,679 --> 01:41:24,639
receiving acts and this is all described

2128
01:41:23,920 --> 01:41:28,000
in the

2129
01:41:24,639 --> 01:41:31,600
current document 6937

2130
01:41:28,000 --> 01:41:35,679
and prr is currently used everywhere

2131
01:41:31,600 --> 01:41:38,719
in by all con congestion controls

2132
01:41:35,679 --> 01:41:38,719
next slide

2133
01:41:40,480 --> 01:41:46,718
uh by all estimations

2134
01:41:43,600 --> 01:41:48,239
a vast majority of the web traffic is is

2135
01:41:46,719 --> 01:41:50,159
prr

2136
01:41:48,239 --> 01:41:51,839
somebody thought somebody told me that

2137
01:41:50,159 --> 01:41:53,759
they thought 50 i think it's actually

2138
01:41:51,840 --> 01:41:56,880
considerably more than that

2139
01:41:53,760 --> 01:42:01,119
given the the high volume

2140
01:41:56,880 --> 01:42:02,560
of this operating system is listed there

2141
01:42:01,119 --> 01:42:03,679
there have been no changes to the

2142
01:42:02,560 --> 01:42:05,920
algorithms that were in the original

2143
01:42:03,679 --> 01:42:09,040
document

2144
01:42:05,920 --> 01:42:11,840
however in 2015

2145
01:42:09,040 --> 01:42:12,960
one of the sources of situat of the

2146
01:42:11,840 --> 01:42:16,480
situation where

2147
01:42:12,960 --> 01:42:19,440
prr the slow start reduction bound was

2148
01:42:16,480 --> 01:42:20,799
discovered to cause excess losses was

2149
01:42:19,440 --> 01:42:23,360
identified and that is

2150
01:42:20,800 --> 01:42:23,920
policers that suddenly changed their

2151
01:42:23,360 --> 01:42:25,839
rate by

2152
01:42:23,920 --> 01:42:28,880
a very large step a larger step than the

2153
01:42:25,840 --> 01:42:31,280
cc congestion control

2154
01:42:28,880 --> 01:42:32,800
change the consequence of this is you

2155
01:42:31,280 --> 01:42:35,840
get into a state where

2156
01:42:32,800 --> 01:42:38,080
say the path went from 10 megabits to

2157
01:42:35,840 --> 01:42:39,600
a token rate of one megabit the

2158
01:42:38,080 --> 01:42:41,040
congestion control picked some

2159
01:42:39,600 --> 01:42:44,320
reasonable rate like

2160
01:42:41,040 --> 01:42:47,519
five or seven megabits and the

2161
01:42:44,320 --> 01:42:49,040
network drops every nine out of ten or

2162
01:42:47,520 --> 01:42:52,400
seven out of ten

2163
01:42:49,040 --> 01:42:55,679
or four out of five packets

2164
01:42:52,400 --> 01:42:59,119
and the congestion control had no

2165
01:42:55,679 --> 01:43:01,600
warning what the new rate was and

2166
01:42:59,119 --> 01:43:02,799
both of the algorithms in the current

2167
01:43:01,600 --> 01:43:06,880
rfc

2168
01:43:02,800 --> 01:43:08,560
don't handle it very well in 2015

2169
01:43:06,880 --> 01:43:10,800
there was another heuristic discovered

2170
01:43:08,560 --> 01:43:12,159
that lets you dynamically switch between

2171
01:43:10,800 --> 01:43:13,920
the two algorithms

2172
01:43:12,159 --> 01:43:17,679
and the consequence behaves much better

2173
01:43:13,920 --> 01:43:17,679
than either algorithm by itself

2174
01:43:18,159 --> 01:43:20,400
so

2175
01:43:23,040 --> 01:43:27,920
next slide um we'd like to introduce it

2176
01:43:26,080 --> 01:43:29,600
as a work item

2177
01:43:27,920 --> 01:43:31,679
i don't think it'll take very long i'm

2178
01:43:29,600 --> 01:43:33,679
hoping two ietfs but sometimes these

2179
01:43:31,679 --> 01:43:36,639
things have a long tail

2180
01:43:33,679 --> 01:43:37,360
um i can imagine getting most of the way

2181
01:43:36,639 --> 01:43:41,040
through

2182
01:43:37,360 --> 01:43:44,239
this for the next reir ir

2183
01:43:41,040 --> 01:43:47,440
i etf and then

2184
01:43:44,239 --> 01:43:48,678
follow up on some of those things as one

2185
01:43:47,440 --> 01:43:52,000
of the authors of

2186
01:43:48,679 --> 01:43:55,360
6937 rereading it later

2187
01:43:52,000 --> 01:43:57,920
it's much much too verbose

2188
01:43:55,360 --> 01:43:59,440
and and it's annoying to read and i

2189
01:43:57,920 --> 01:44:01,199
would like to make it

2190
01:43:59,440 --> 01:44:03,360
if i'd had more time i would have made

2191
01:44:01,199 --> 01:44:05,839
it shorter as they say

2192
01:44:03,360 --> 01:44:06,400
um and focus on what implementers need

2193
01:44:05,840 --> 01:44:08,800
to know

2194
01:44:06,400 --> 01:44:10,480
and a lot of the prior results and the

2195
01:44:08,800 --> 01:44:13,040
prior explanations

2196
01:44:10,480 --> 01:44:13,759
are available in the existing document

2197
01:44:13,040 --> 01:44:15,920
um

2198
01:44:13,760 --> 01:44:17,520
and can be included by reference by

2199
01:44:15,920 --> 01:44:21,040
non-normative reference so

2200
01:44:17,520 --> 01:44:23,679
because they're it's non-standard so any

2201
01:44:21,040 --> 01:44:23,679
questions

2202
01:44:25,440 --> 01:44:32,400
sure any questions any comments uh

2203
01:44:28,719 --> 01:44:32,400
supporting this work or

2204
01:44:32,880 --> 01:44:39,119
richard so i

2205
01:44:35,920 --> 01:44:42,159
can hear me yes yes i like this

2206
01:44:39,119 --> 01:44:43,119
work i like to make this the proposed

2207
01:44:42,159 --> 01:44:45,119
standard

2208
01:44:43,119 --> 01:44:47,199
uh looking into the heuristics and i

2209
01:44:45,119 --> 01:44:48,000
wanted to update your list freebsd is

2210
01:44:47,199 --> 01:44:50,320
now also

2211
01:44:48,000 --> 01:44:52,159
doing a pr but not by default you have

2212
01:44:50,320 --> 01:44:55,679
to explicitly enable it

2213
01:44:52,159 --> 01:44:58,638
it's been included a couple weeks ago

2214
01:44:55,679 --> 01:44:58,639
cool thank you

2215
01:45:00,840 --> 01:45:03,840
jonathan

2216
01:45:04,000 --> 01:45:12,639
yes um you said that

2217
01:45:07,199 --> 01:45:16,239
it is only active during fast recovery

2218
01:45:12,639 --> 01:45:20,880
what about in when dealing with an ecn

2219
01:45:16,239 --> 01:45:22,799
mark so the the linux

2220
01:45:20,880 --> 01:45:24,000
cn implementation has a state they call

2221
01:45:22,800 --> 01:45:26,400
cwr

2222
01:45:24,000 --> 01:45:27,440
congestion window reduction which

2223
01:45:26,400 --> 01:45:30,400
normally takes

2224
01:45:27,440 --> 01:45:33,360
one round trip and uses prr it's exactly

2225
01:45:30,400 --> 01:45:36,480
parallel to recovery

2226
01:45:33,360 --> 01:45:39,759
right so

2227
01:45:36,480 --> 01:45:43,519
i'm actually not familiar with how that

2228
01:45:39,760 --> 01:45:43,520
code matches against the standards

2229
01:45:43,760 --> 01:45:52,320
right i i think um it might be worth

2230
01:45:47,760 --> 01:45:52,320
uh addressing that in the new version

2231
01:45:52,880 --> 01:45:57,040
i i figure some ecn discussions will

2232
01:45:56,159 --> 01:45:58,070
come up

2233
01:45:57,040 --> 01:46:00,719
um and they should be

2234
01:45:58,070 --> 01:46:03,840
[Music]

2235
01:46:00,719 --> 01:46:06,320
okay it should be more specific but

2236
01:46:03,840 --> 01:46:08,159
it's out of scope for us to make major

2237
01:46:06,320 --> 01:46:09,759
specifications of ecn that aren't

2238
01:46:08,159 --> 01:46:13,839
already

2239
01:46:09,760 --> 01:46:13,840
baked someplace else

2240
01:46:14,480 --> 01:46:17,678
praveen you're up next

2241
01:46:20,320 --> 01:46:26,000
photo of this work uh standard i have

2242
01:46:23,600 --> 01:46:27,920
one question so the 2015 problem

2243
01:46:26,000 --> 01:46:29,840
uh observed with policers is there

2244
01:46:27,920 --> 01:46:32,880
recent data to suggest that

2245
01:46:29,840 --> 01:46:32,880
that is still a problem

2246
01:46:34,480 --> 01:46:37,839
um i

2247
01:46:38,840 --> 01:46:43,840
yes um i know

2248
01:46:41,679 --> 01:46:45,679
that people are very aware of now that

2249
01:46:43,840 --> 01:46:46,800
we've seen policers are very aware of

2250
01:46:45,679 --> 01:46:49,280
the consequences of

2251
01:46:46,800 --> 01:46:50,880
policers in the network um it would be

2252
01:46:49,280 --> 01:46:52,559
nice to eradicate them

2253
01:46:50,880 --> 01:46:54,239
but there's some older hardware that

2254
01:46:52,560 --> 01:46:57,840
that's sort of the default way of

2255
01:46:54,239 --> 01:46:58,400
doing traffic management and as it moves

2256
01:46:57,840 --> 01:47:01,199
out

2257
01:46:58,400 --> 01:47:01,839
especially into the southern hemisphere

2258
01:47:01,199 --> 01:47:09,839
it's

2259
01:47:01,840 --> 01:47:09,840
it's still very prevalent

2260
01:47:17,840 --> 01:47:23,360
we can see you you can't hear me how we

2261
01:47:21,920 --> 01:47:26,719
can hear you

2262
01:47:23,360 --> 01:47:29,199
okay wow okay this is magic

2263
01:47:26,719 --> 01:47:30,400
we'll finally get this right someday um

2264
01:47:29,199 --> 01:47:32,799
thank you for bringing this up

2265
01:47:30,400 --> 01:47:34,400
uh here and i i i'd be supportive of

2266
01:47:32,800 --> 01:47:37,600
moving this forward pr

2267
01:47:34,400 --> 01:47:41,320
has been used quite extensively uh one

2268
01:47:37,600 --> 01:47:44,639
one uh thing to note is um

2269
01:47:41,320 --> 01:47:46,000
6937un says that prr is a form of soft

2270
01:47:44,639 --> 01:47:49,760
pacing

2271
01:47:46,000 --> 01:47:51,840
um i want to ask if uh if anyone has

2272
01:47:49,760 --> 01:47:55,119
documented or has looked into the

2273
01:47:51,840 --> 01:47:58,239
the uh interaction between prr

2274
01:47:55,119 --> 01:48:01,360
and pacing i think that would be worth

2275
01:47:58,239 --> 01:48:02,638
some text going forward given that a lot

2276
01:48:01,360 --> 01:48:04,960
of implementations and a lot of

2277
01:48:02,639 --> 01:48:06,080
deployments are using pacing by default

2278
01:48:04,960 --> 01:48:07,679
these days

2279
01:48:06,080 --> 01:48:10,000
uh it would be important to consider

2280
01:48:07,679 --> 01:48:12,719
what the both the value

2281
01:48:10,000 --> 01:48:15,360
of prr in the face of pacing and also

2282
01:48:12,719 --> 01:48:19,119
the interaction between pacing and prr

2283
01:48:15,360 --> 01:48:22,239
would be

2284
01:48:19,119 --> 01:48:23,759
that's that's a good point um

2285
01:48:22,239 --> 01:48:25,360
thinking about it there's a there's a

2286
01:48:23,760 --> 01:48:26,719
sort of a complicated piece which has to

2287
01:48:25,360 --> 01:48:27,679
do with how do you manage the time

2288
01:48:26,719 --> 01:48:29,520
stamps the

2289
01:48:27,679 --> 01:48:31,040
schedule times on the packets for the

2290
01:48:29,520 --> 01:48:33,600
pacing

2291
01:48:31,040 --> 01:48:36,239
and that's the kind of thing that the

2292
01:48:33,600 --> 01:48:37,840
ietf hasn't specified very well

2293
01:48:36,239 --> 01:48:39,519
it doesn't normally specify as an

2294
01:48:37,840 --> 01:48:41,679
implementation detail

2295
01:48:39,520 --> 01:48:44,800
but it matters a lot for the answer of

2296
01:48:41,679 --> 01:48:44,800
your to your question

2297
01:48:44,960 --> 01:48:48,400
i think it matters a lot in terms of how

2298
01:48:46,560 --> 01:48:53,199
people think about

2299
01:48:48,400 --> 01:48:56,638
um deploying both pacing and pr

2300
01:48:53,199 --> 01:48:58,839
yes yes and and and for instance when we

2301
01:48:56,639 --> 01:49:01,600
run

2302
01:48:58,840 --> 01:49:03,840
um when when we run

2303
01:49:01,600 --> 01:49:03,840
um

2304
01:49:05,920 --> 01:49:08,400
i'm sorry

2305
01:49:10,080 --> 01:49:13,040
there's some complica there's some

2306
01:49:11,440 --> 01:49:14,239
complicated state changes between when

2307
01:49:13,040 --> 01:49:15,119
you're pacing when you're window

2308
01:49:14,239 --> 01:49:19,598
controlled

2309
01:49:15,119 --> 01:49:24,000
and they bother me too

2310
01:49:19,599 --> 01:49:24,000
quite frankly yep

2311
01:49:25,199 --> 01:49:28,320
i would personally i'd be interested in

2312
01:49:26,880 --> 01:49:29,199
understanding the value proposition of

2313
01:49:28,320 --> 01:49:32,400
prr

2314
01:49:29,199 --> 01:49:33,759
if i was to have pacing

2315
01:49:32,400 --> 01:49:35,440
like my understanding is generally that

2316
01:49:33,760 --> 01:49:38,000
if you have pacing

2317
01:49:35,440 --> 01:49:39,759
prr shouldn't really be adding too much

2318
01:49:38,000 --> 01:49:43,119
value

2319
01:49:39,760 --> 01:49:44,960
um i i i would like to hear that

2320
01:49:43,119 --> 01:49:47,280
what do you think about that but we've

2321
01:49:44,960 --> 01:49:48,880
also encountered some environments where

2322
01:49:47,280 --> 01:49:50,880
window control is absolutely the right

2323
01:49:48,880 --> 01:49:53,599
way to go

2324
01:49:50,880 --> 01:49:54,239
for instance the data center and so you

2325
01:49:53,599 --> 01:49:56,560
need

2326
01:49:54,239 --> 01:50:00,000
prr and the data center it makes a

2327
01:49:56,560 --> 01:50:00,000
difference in the data data center

2328
01:50:03,199 --> 01:50:07,759
let me explain a little bit about pacing

2329
01:50:05,520 --> 01:50:11,520
and pr

2330
01:50:07,760 --> 01:50:14,960
so single pr as uh when you get

2331
01:50:11,520 --> 01:50:18,080
the x pr will try to release

2332
01:50:14,960 --> 01:50:19,040
a certain amount of traffic sort of at

2333
01:50:18,080 --> 01:50:21,199
the

2334
01:50:19,040 --> 01:50:22,320
some ratio of the amount that's been

2335
01:50:21,199 --> 01:50:25,519
delivered by

2336
01:50:22,320 --> 01:50:28,159
what the act would indicate so typically

2337
01:50:25,520 --> 01:50:30,880
in the normal cases you get an act of

2338
01:50:28,159 --> 01:50:32,400
two packets or one packet which then you

2339
01:50:30,880 --> 01:50:34,320
release those

2340
01:50:32,400 --> 01:50:35,920
but in the case when you actually get

2341
01:50:34,320 --> 01:50:39,040
some kind of ad compression

2342
01:50:35,920 --> 01:50:41,760
during fast recovery or accident

2343
01:50:39,040 --> 01:50:42,880
um due to middle boxes you could have

2344
01:50:41,760 --> 01:50:46,159
actually released

2345
01:50:42,880 --> 01:50:47,840
say 10 packets 15 packets into the

2346
01:50:46,159 --> 01:50:50,960
network because

2347
01:50:47,840 --> 01:50:54,000
um and then this kind of uh burst

2348
01:50:50,960 --> 01:50:54,719
will have to be handled by the say linux

2349
01:50:54,000 --> 01:50:56,880
pacing

2350
01:50:54,719 --> 01:50:58,639
which will break up this burst based on

2351
01:50:56,880 --> 01:51:01,119
the current pacing rate

2352
01:50:58,639 --> 01:51:03,840
and the pacing rate at least say in the

2353
01:51:01,119 --> 01:51:05,440
cubic model is still based on c1 divided

2354
01:51:03,840 --> 01:51:08,000
by the rtt

2355
01:51:05,440 --> 01:51:09,759
um so that's sort of the relationship

2356
01:51:08,000 --> 01:51:13,440
between prr

2357
01:51:09,760 --> 01:51:14,080
and and pacing um so pr is still at

2358
01:51:13,440 --> 01:51:16,960
clock

2359
01:51:14,080 --> 01:51:17,440
but in case of when the act is being

2360
01:51:16,960 --> 01:51:20,480
seen

2361
01:51:17,440 --> 01:51:23,360
or compressed you still need the

2362
01:51:20,480 --> 01:51:24,959
sort of a more fine granularity pacing

2363
01:51:23,360 --> 01:51:27,440
to break up the burst

2364
01:51:24,960 --> 01:51:28,880
so that's the way to think about pr and

2365
01:51:27,440 --> 01:51:32,400
pacing

2366
01:51:28,880 --> 01:51:36,800
so i'm closing the lineup thank you

2367
01:51:32,400 --> 01:51:36,799
sorry if could i get in there quickly

2368
01:51:37,760 --> 01:51:41,920
oh thank you um i i i completely agree

2369
01:51:40,800 --> 01:51:43,920
with that acting is

2370
01:51:41,920 --> 01:51:45,520
is the is the one i was thinking about

2371
01:51:43,920 --> 01:51:48,080
which actually

2372
01:51:45,520 --> 01:51:49,360
was uh i think for me the question was

2373
01:51:48,080 --> 01:51:51,360
given that i will need

2374
01:51:49,360 --> 01:51:53,040
pacing to deal with all of those

2375
01:51:51,360 --> 01:51:56,159
conditions anyways

2376
01:51:53,040 --> 01:51:58,320
what does pr offer to me as as

2377
01:51:56,159 --> 01:51:59,199
if i've already deployed pacing what

2378
01:51:58,320 --> 01:52:02,559
does it offer

2379
01:51:59,199 --> 01:52:04,879
in addition that was my question youtube

2380
01:52:02,560 --> 01:52:07,760
sure let's clear up in the subsequent

2381
01:52:04,880 --> 01:52:07,760
text update yeah

2382
01:52:08,639 --> 01:52:17,760
okay so um i heard support

2383
01:52:13,520 --> 01:52:19,840
for work or tcp i'm working on this so

2384
01:52:17,760 --> 01:52:20,880
um we need to get this on the mailing

2385
01:52:19,840 --> 01:52:24,080
list and discuss it

2386
01:52:20,880 --> 01:52:26,320
between the chairs um

2387
01:52:24,080 --> 01:52:28,080
you can think about a potential

2388
01:52:26,320 --> 01:52:31,199
milestone

2389
01:52:28,080 --> 01:52:33,519
a realistic milestone i think this

2390
01:52:31,199 --> 01:52:34,799
could be finished because we need to add

2391
01:52:33,520 --> 01:52:38,000
a master if we

2392
01:52:34,800 --> 01:52:38,000
adopt this okay

2393
01:52:38,320 --> 01:52:43,440
sounds good okay thank you this brings

2394
01:52:41,840 --> 01:52:48,400
us to the last presentation

2395
01:52:43,440 --> 01:52:48,400
olivier are you there i guess yes

2396
01:52:50,480 --> 01:52:55,280
so this is about a paper tcp

2397
01:52:56,840 --> 01:52:59,840
alice

2398
01:53:00,560 --> 01:53:05,440
uh yes so this is um tcpls this is a

2399
01:53:03,679 --> 01:53:10,719
joint work with florenta roche

2400
01:53:05,440 --> 01:53:12,960
in emory asuka from uc luva next slide

2401
01:53:10,719 --> 01:53:14,800
so if we look at what's happening with

2402
01:53:12,960 --> 01:53:17,199
tcp and tls is that

2403
01:53:14,800 --> 01:53:18,880
both protocols are often used together

2404
01:53:17,199 --> 01:53:21,759
especially in the one

2405
01:53:18,880 --> 01:53:22,800
and tls provides security and tcp

2406
01:53:21,760 --> 01:53:24,560
provides connection

2407
01:53:22,800 --> 01:53:26,719
abstraction reliability congestion

2408
01:53:24,560 --> 01:53:28,719
control and it's still the most popular

2409
01:53:26,719 --> 01:53:30,400
transport protocol today

2410
01:53:28,719 --> 01:53:32,239
and if we look at what's happening on

2411
01:53:30,400 --> 01:53:34,799
the wide area networks

2412
01:53:32,239 --> 01:53:36,239
it's very likely that tcp and tls could

2413
01:53:34,800 --> 01:53:40,560
always be used together

2414
01:53:36,239 --> 01:53:42,959
next slide so let's go back to tcp and

2415
01:53:40,560 --> 01:53:45,440
in tcp when tcp was designed we have

2416
01:53:42,960 --> 01:53:46,800
we have a very simple separation between

2417
01:53:45,440 --> 01:53:48,559
the control channel

2418
01:53:46,800 --> 01:53:51,360
and the data channel in tcp so the

2419
01:53:48,560 --> 01:53:52,960
control channel is part of the tcp adder

2420
01:53:51,360 --> 01:53:55,360
with the tcp option which has a

2421
01:53:52,960 --> 01:53:57,199
restricted length and the data

2422
01:53:55,360 --> 01:54:00,239
is part of the payload of the tcp

2423
01:53:57,199 --> 01:54:03,280
segment next slide

2424
01:54:00,239 --> 01:54:05,919
now let's look at tls 1.3 and a quick

2425
01:54:03,280 --> 01:54:07,440
summary in one slide in tls 1.3 you have

2426
01:54:05,920 --> 01:54:09,360
a secure handshake

2427
01:54:07,440 --> 01:54:11,119
where the client sends the client hello

2428
01:54:09,360 --> 01:54:14,159
message which can contain some

2429
01:54:11,119 --> 01:54:15,759
options as an extension field the server

2430
01:54:14,159 --> 01:54:17,519
replies with a server hello

2431
01:54:15,760 --> 01:54:18,800
which also contains some options that

2432
01:54:17,520 --> 01:54:20,719
are encrypted

2433
01:54:18,800 --> 01:54:22,960
it provides the finish message and it

2434
01:54:20,719 --> 01:54:24,880
can also include some application data

2435
01:54:22,960 --> 01:54:26,719
and then the client concludes with the

2436
01:54:24,880 --> 01:54:28,320
finished message all this information

2437
01:54:26,719 --> 01:54:30,239
can be placed

2438
01:54:28,320 --> 01:54:32,480
inside the the payload of the syn

2439
01:54:30,239 --> 01:54:34,480
packets if you want to do zero rtt with

2440
01:54:32,480 --> 01:54:38,000
tls 1.3

2441
01:54:34,480 --> 01:54:38,480
and then sorry once you have established

2442
01:54:38,000 --> 01:54:41,440
the

2443
01:54:38,480 --> 01:54:44,638
tls handshake you can exchange tls

2444
01:54:41,440 --> 01:54:46,960
records and what's nice in tls 1.3

2445
01:54:44,639 --> 01:54:47,920
is that all the tls record they appeared

2446
01:54:46,960 --> 01:54:51,280
in the payload

2447
01:54:47,920 --> 01:54:54,639
as of type 23 and the real type

2448
01:54:51,280 --> 01:54:55,360
of the tls record is encoded in the

2449
01:54:54,639 --> 01:54:57,520
encrypted

2450
01:54:55,360 --> 01:54:59,119
and authenticated field as a true type

2451
01:54:57,520 --> 01:55:02,000
which is the last byte

2452
01:54:59,119 --> 01:55:04,239
of the tls record which means that all

2453
01:55:02,000 --> 01:55:06,960
the tls information that you send

2454
01:55:04,239 --> 01:55:10,159
from middle boxes is always application

2455
01:55:06,960 --> 01:55:12,639
level data type 23 for tls 1.3

2456
01:55:10,159 --> 01:55:12,638
next slide

2457
01:55:13,440 --> 01:55:17,519
so what we could do is that we could

2458
01:55:15,679 --> 01:55:20,080
integrate tls and tcp

2459
01:55:17,520 --> 01:55:22,880
closely together so we could use tls

2460
01:55:20,080 --> 01:55:24,639
record to carry tcp control information

2461
01:55:22,880 --> 01:55:27,199
and in fact what's possible is that we

2462
01:55:24,639 --> 01:55:29,840
could have two control channels for tcp

2463
01:55:27,199 --> 01:55:31,119
one which is the regular tcp options and

2464
01:55:29,840 --> 01:55:35,920
the second one which is

2465
01:55:31,119 --> 01:55:38,400
using encrypted tls records next slide

2466
01:55:35,920 --> 01:55:40,400
so we have two control channels uh one

2467
01:55:38,400 --> 01:55:42,239
in the tcp header and another one on the

2468
01:55:40,400 --> 01:55:43,598
tls record which gives us lots of

2469
01:55:42,239 --> 01:55:46,000
extensibility

2470
01:55:43,599 --> 01:55:47,679
and unlimited space to exchange tcp

2471
01:55:46,000 --> 01:55:50,960
options in the tls reports

2472
01:55:47,679 --> 01:55:52,960
next slide so

2473
01:55:50,960 --> 01:55:54,080
let's use let's look at some things that

2474
01:55:52,960 --> 01:55:57,199
we could do by

2475
01:55:54,080 --> 01:55:58,880
closely integrating tcp and tls and i

2476
01:55:57,199 --> 01:56:00,400
have a few examples but you probably

2477
01:55:58,880 --> 01:56:02,480
have other ideas

2478
01:56:00,400 --> 01:56:05,040
so first example is securing multi-pass

2479
01:56:02,480 --> 01:56:07,040
tcp when we designed multi-party cpa we

2480
01:56:05,040 --> 01:56:08,560
decided to put the token in the steel

2481
01:56:07,040 --> 01:56:10,080
synap

2482
01:56:08,560 --> 01:56:12,239
which is the key which is exchanging

2483
01:56:10,080 --> 01:56:13,360
clear and then we had issues with

2484
01:56:12,239 --> 01:56:16,718
authenticating

2485
01:56:13,360 --> 01:56:20,000
address and making address reliable

2486
01:56:16,719 --> 01:56:23,280
if you want to do that with tcpls

2487
01:56:20,000 --> 01:56:25,360
you could use the tls handshake and

2488
01:56:23,280 --> 01:56:26,800
the secrets which is negotiated during

2489
01:56:25,360 --> 01:56:29,519
the letter check

2490
01:56:26,800 --> 01:56:31,760
and derive a multi-party ttp key from

2491
01:56:29,520 --> 01:56:33,920
this information which would be secure

2492
01:56:31,760 --> 01:56:35,599
and you could use tls records to

2493
01:56:33,920 --> 01:56:37,760
exchange the add address option which

2494
01:56:35,599 --> 01:56:39,280
makes the address option both reliable

2495
01:56:37,760 --> 01:56:41,199
and authenticated

2496
01:56:39,280 --> 01:56:43,440
and we could still keep remove address

2497
01:56:41,199 --> 01:56:45,759
as a regular tcp option because it needs

2498
01:56:43,440 --> 01:56:48,320
to be sent without reliability

2499
01:56:45,760 --> 01:56:48,320
next slide

2500
01:56:49,119 --> 01:56:54,159
another example is tfo in tfo we have a

2501
01:56:52,719 --> 01:56:57,760
tfo option

2502
01:56:54,159 --> 01:57:01,679
which uses uh small size cookies

2503
01:56:57,760 --> 01:57:02,800
uh to exchange and to validate the

2504
01:57:01,679 --> 01:57:06,320
client

2505
01:57:02,800 --> 01:57:07,840
uh using tcpls we could use tls0 ltt

2506
01:57:06,320 --> 01:57:09,599
and then code information in the

2507
01:57:07,840 --> 01:57:10,080
clientele and in the server halo which

2508
01:57:09,599 --> 01:57:12,080
would allow

2509
01:57:10,080 --> 01:57:13,199
us to use cookies that are much larger

2510
01:57:12,080 --> 01:57:16,639
than the current

2511
01:57:13,199 --> 01:57:18,559
tfo option obviously using longer

2512
01:57:16,639 --> 01:57:20,080
information in the payload of the scene

2513
01:57:18,560 --> 01:57:21,599
and of the simplestack

2514
01:57:20,080 --> 01:57:23,360
could create some issues with middle

2515
01:57:21,599 --> 01:57:25,360
boxes but if you look at the

2516
01:57:23,360 --> 01:57:28,400
measurements that christoph

2517
01:57:25,360 --> 01:57:29,360
from apple mentioned a few years ago he

2518
01:57:28,400 --> 01:57:32,559
showed that

2519
01:57:29,360 --> 01:57:34,480
it doesn't seem that tfo is blocked by

2520
01:57:32,560 --> 01:57:36,239
the presence of long payload in the

2521
01:57:34,480 --> 01:57:38,320
scene or the synagogue but it's more the

2522
01:57:36,239 --> 01:57:39,440
tcp options that creates problems with

2523
01:57:38,320 --> 01:57:42,000
middle boxes

2524
01:57:39,440 --> 01:57:42,000
next slide

2525
01:57:43,119 --> 01:57:46,239
another example is that with tcpls we

2526
01:57:45,840 --> 01:57:48,960
would have

2527
01:57:46,239 --> 01:57:51,040
more space for tcp options since tcp

2528
01:57:48,960 --> 01:57:52,880
options could be part of a new type of

2529
01:57:51,040 --> 01:57:54,960
tls record

2530
01:57:52,880 --> 01:57:57,119
and we have already implemented that in

2531
01:57:54,960 --> 01:57:59,679
the tcpls prototype

2532
01:57:57,119 --> 01:58:01,679
so you could exchange the tcp option

2533
01:57:59,679 --> 01:58:03,199
during the handshake so for example the

2534
01:58:01,679 --> 01:58:05,199
server hello can provide

2535
01:58:03,199 --> 01:58:07,360
an additional option in the synack with

2536
01:58:05,199 --> 01:58:09,919
the encrypted extension

2537
01:58:07,360 --> 01:58:12,159
we can define a tls record to carry tcp

2538
01:58:09,920 --> 01:58:13,760
option and we have done that for the

2539
01:58:12,159 --> 01:58:16,080
user timeout option which is not

2540
01:58:13,760 --> 01:58:18,000
supported by linux but we can put this

2541
01:58:16,080 --> 01:58:20,639
user timeout option

2542
01:58:18,000 --> 01:58:22,719
in tcpls and then when the client or the

2543
01:58:20,639 --> 01:58:25,679
server receives the tls record that

2544
01:58:22,719 --> 01:58:27,840
contains the the user timeout option

2545
01:58:25,679 --> 01:58:29,599
then it can do the set socket option

2546
01:58:27,840 --> 01:58:32,400
it's also possible to do a late

2547
01:58:29,599 --> 01:58:36,159
negotiation of the tcp extensions

2548
01:58:32,400 --> 01:58:36,159
using tcpls next slide

2549
01:58:37,119 --> 01:58:41,519
we could have tls records that are used

2550
01:58:39,520 --> 01:58:44,960
to

2551
01:58:41,520 --> 01:58:45,840
encode tcp keep alive that allow that

2552
01:58:44,960 --> 01:58:48,080
allow to check

2553
01:58:45,840 --> 01:58:49,599
whether tcp connection is still alive by

2554
01:58:48,080 --> 01:58:51,599
just sending dummy data

2555
01:58:49,599 --> 01:58:53,280
inside tls records and you have a kind

2556
01:58:51,599 --> 01:58:55,520
of new ping pong

2557
01:58:53,280 --> 01:58:56,400
tcpls record which is not part of the

2558
01:58:55,520 --> 01:59:00,000
data

2559
01:58:56,400 --> 01:59:02,000
next slide you can do

2560
01:59:00,000 --> 01:59:03,679
secure connection release by having a

2561
01:59:02,000 --> 01:59:06,960
new type of tls record

2562
01:59:03,679 --> 01:59:09,119
that marks the end of the tcpls station

2563
01:59:06,960 --> 01:59:10,320
and which cannot be caused by middle

2564
01:59:09,119 --> 01:59:12,719
boxes

2565
01:59:10,320 --> 01:59:15,119
which cannot be sent by middle boxes

2566
01:59:12,719 --> 01:59:17,840
next slide

2567
01:59:15,119 --> 01:59:18,799
you can do api balls by having the

2568
01:59:17,840 --> 01:59:21,599
server

2569
01:59:18,800 --> 01:59:22,159
provide its alternate ipv4 or ipv6

2570
01:59:21,599 --> 01:59:25,040
address

2571
01:59:22,159 --> 01:59:26,879
in the server hello encrypted extension

2572
01:59:25,040 --> 01:59:28,239
so this information is encrypted and

2573
01:59:26,880 --> 01:59:30,080
authenticated

2574
01:59:28,239 --> 01:59:31,280
and so the client learns the internet

2575
01:59:30,080 --> 01:59:33,760
address of the server

2576
01:59:31,280 --> 01:59:34,719
and it can try to create the tcp

2577
01:59:33,760 --> 01:59:38,080
connection

2578
01:59:34,719 --> 01:59:40,639
over the ipv4 if it started over ipv6

2579
01:59:38,080 --> 01:59:40,639
next slide

2580
01:59:41,440 --> 01:59:45,519
another interesting point is to do

2581
01:59:43,040 --> 01:59:48,080
connection migration so you can do with

2582
01:59:45,520 --> 01:59:50,480
tcpls connection migration as you do it

2583
01:59:48,080 --> 01:59:52,639
using quick today so you have a

2584
01:59:50,480 --> 01:59:54,799
smartphone that wants to move from

2585
01:59:52,639 --> 01:59:58,000
cellular to wi-fi or the opposite while

2586
01:59:54,800 --> 01:59:59,440
preserving the established tcpls station

2587
01:59:58,000 --> 02:00:01,679
and the solution that we have

2588
01:59:59,440 --> 02:00:03,678
implemented right now in the tcpls

2589
02:00:01,679 --> 02:00:05,040
prototype is that the server provides a

2590
02:00:03,679 --> 02:00:07,679
connection identifier

2591
02:00:05,040 --> 02:00:09,040
and a cookie in the server hello message

2592
02:00:07,679 --> 02:00:11,440
which is encrypted

2593
02:00:09,040 --> 02:00:12,880
and then based on this information the

2594
02:00:11,440 --> 02:00:16,159
client can create a

2595
02:00:12,880 --> 02:00:17,920
tcpls subflow to the server using that

2596
02:00:16,159 --> 02:00:19,839
information and the server matches the

2597
02:00:17,920 --> 02:00:22,639
subfloor to the previously

2598
02:00:19,840 --> 02:00:24,239
established tcpls connection and then

2599
02:00:22,639 --> 02:00:26,080
the server and the client can move the

2600
02:00:24,239 --> 02:00:27,119
data transfer to the new subflow when

2601
02:00:26,080 --> 02:00:29,679
there is an event

2602
02:00:27,119 --> 02:00:31,759
so in the example you see that the

2603
02:00:29,679 --> 02:00:34,400
client and the server are connected to a

2604
02:00:31,760 --> 02:00:37,920
30 megabits per second link

2605
02:00:34,400 --> 02:00:40,638
and the client receives ipv4 and ipv6

2606
02:00:37,920 --> 02:00:43,040
addresses from the server and it starts

2607
02:00:40,639 --> 02:00:45,040
over ipv4 and after some time it decides

2608
02:00:43,040 --> 02:00:46,960
to switch to ipv6

2609
02:00:45,040 --> 02:00:48,560
and the connection continues without any

2610
02:00:46,960 --> 02:00:51,119
problem for the application

2611
02:00:48,560 --> 02:00:51,119
next slide

2612
02:00:52,159 --> 02:00:57,440
so to conclude this was a heads up to

2613
02:00:55,199 --> 02:00:59,360
show you that tcp and tls should not

2614
02:00:57,440 --> 02:01:01,040
always be considered as separate and

2615
02:00:59,360 --> 02:01:03,119
independent protocols

2616
02:01:01,040 --> 02:01:04,960
and there are many benefits that can be

2617
02:01:03,119 --> 02:01:07,280
uh obtained

2618
02:01:04,960 --> 02:01:08,159
by coupling these two protocols together

2619
02:01:07,280 --> 02:01:09,920
and it's possible

2620
02:01:08,159 --> 02:01:12,000
to efficiently combine them together

2621
02:01:09,920 --> 02:01:13,920
there are more details in the paper

2622
02:01:12,000 --> 02:01:15,440
and there is a running code which is

2623
02:01:13,920 --> 02:01:17,520
based on picot tls

2624
02:01:15,440 --> 02:01:19,440
and if you have ideas on things that you

2625
02:01:17,520 --> 02:01:20,560
would like to do with tcpls please

2626
02:01:19,440 --> 02:01:22,159
contact us

2627
02:01:20,560 --> 02:01:24,080
and we would be happy to discuss with

2628
02:01:22,159 --> 02:01:27,119
you

2629
02:01:24,080 --> 02:01:27,119
thank you for the presentation

2630
02:01:30,560 --> 02:01:36,000
thanks olivier uh i'm assuming i can be

2631
02:01:34,840 --> 02:01:39,280
heard

2632
02:01:36,000 --> 02:01:41,199
so uh how does this work with uh with

2633
02:01:39,280 --> 02:01:42,480
uh proxies that terminate the tcp

2634
02:01:41,199 --> 02:01:46,159
connection but not the tl

2635
02:01:42,480 --> 02:01:48,400
connection uh http connect

2636
02:01:46,159 --> 02:01:49,519
mind but there's a lot of metal boxes do

2637
02:01:48,400 --> 02:01:51,040
this as well where they

2638
02:01:49,520 --> 02:01:54,480
terminate the tcp connection but they'll

2639
02:01:51,040 --> 02:01:56,159
just uh become

2640
02:01:54,480 --> 02:01:57,519
they'll forward the bytes that are in

2641
02:01:56,159 --> 02:02:00,638
the tcp connection

2642
02:01:57,520 --> 02:02:02,800
along to the next top

2643
02:02:00,639 --> 02:02:05,119
but then the tcp options that are sent

2644
02:02:02,800 --> 02:02:07,920
in the tcp header won't work but the tcp

2645
02:02:05,119 --> 02:02:11,199
options that you would send in a tls

2646
02:02:07,920 --> 02:02:14,000
would work and it's also with this

2647
02:02:11,199 --> 02:02:16,559
solution it's also possible to detect

2648
02:02:14,000 --> 02:02:19,280
this kind of proxies because you could

2649
02:02:16,560 --> 02:02:21,440
take the tcp segment that you send you

2650
02:02:19,280 --> 02:02:22,000
put it in a tls record and you encrypt

2651
02:02:21,440 --> 02:02:24,559
it

2652
02:02:22,000 --> 02:02:26,480
and so on the server side you check that

2653
02:02:24,560 --> 02:02:27,360
the tcp segment that was sent by the

2654
02:02:26,480 --> 02:02:28,879
client

2655
02:02:27,360 --> 02:02:30,480
is the same that was received by the

2656
02:02:28,880 --> 02:02:31,920
server so you could have the sequence

2657
02:02:30,480 --> 02:02:34,000
number

2658
02:02:31,920 --> 02:02:36,239
i get that so you can detect the

2659
02:02:34,000 --> 02:02:38,320
presence of a proxy

2660
02:02:36,239 --> 02:02:40,320
right now i get that and and and what

2661
02:02:38,320 --> 02:02:41,920
i'm saying is is it's not to detect the

2662
02:02:40,320 --> 02:02:44,480
presence of a proxy but

2663
02:02:41,920 --> 02:02:46,159
the negotiation so if i send the options

2664
02:02:44,480 --> 02:02:46,799
that i am trying to negotiate with my

2665
02:02:46,159 --> 02:02:50,159
tcp

2666
02:02:46,800 --> 02:02:53,119
peer and i send them via tls it goes

2667
02:02:50,159 --> 02:02:53,598
to let's say it goes to the next so if i

2668
02:02:53,119 --> 02:02:55,199
if say

2669
02:02:53,599 --> 02:02:56,800
it's two segmented connections like this

2670
02:02:55,199 --> 02:02:57,519
right and i'm trying to negotiate with

2671
02:02:56,800 --> 02:02:59,520
my peer

2672
02:02:57,520 --> 02:03:01,440
but i end up negotiating this with that

2673
02:02:59,520 --> 02:03:04,480
end point now this end things that

2674
02:03:01,440 --> 02:03:05,440
it's peaking those options with i don't

2675
02:03:04,480 --> 02:03:07,598
know how to explain this

2676
02:03:05,440 --> 02:03:09,199
uh without a picture but uh i'm

2677
02:03:07,599 --> 02:03:11,280
negotiating tcp options with the peer

2678
02:03:09,199 --> 02:03:15,040
with whom i'm not speaking tcp

2679
02:03:11,280 --> 02:03:17,280
does that make sense yes

2680
02:03:15,040 --> 02:03:18,880
so what does that mean in terms of what

2681
02:03:17,280 --> 02:03:22,880
we've just negotiated

2682
02:03:18,880 --> 02:03:25,840
so let's negotiate sac through this

2683
02:03:22,880 --> 02:03:27,119
so i can detect that i have a proxy and

2684
02:03:25,840 --> 02:03:31,360
i can stop using

2685
02:03:27,119 --> 02:03:34,559
the tcpls tcp options in the tls record

2686
02:03:31,360 --> 02:03:36,320
because there is a proxy on the path

2687
02:03:34,560 --> 02:03:39,360
right i'm saying that you would have to

2688
02:03:36,320 --> 02:03:39,360
uh otherwise yeah basically

2689
02:03:40,000 --> 02:03:43,679
so you can check that so you could you

2690
02:03:42,080 --> 02:03:44,960
could exchange for example the tcp

2691
02:03:43,679 --> 02:03:47,119
sequence numbers

2692
02:03:44,960 --> 02:03:48,960
in a tls record to check that you have

2693
02:03:47,119 --> 02:03:50,719
the same values of the tcp sequence

2694
02:03:48,960 --> 02:03:51,760
numbers for the scene and the synap for

2695
02:03:50,719 --> 02:03:53,679
example

2696
02:03:51,760 --> 02:03:54,960
and then based on that you can detect

2697
02:03:53,679 --> 02:03:57,280
whether you have

2698
02:03:54,960 --> 02:03:58,880
a proxy on the path or you can do more

2699
02:03:57,280 --> 02:04:00,480
advanced heuristics to detect

2700
02:03:58,880 --> 02:04:02,719
that there is a proxy on the past and if

2701
02:04:00,480 --> 02:04:04,638
there is a tcp proxy on the past

2702
02:04:02,719 --> 02:04:08,079
then you have issues because you don't

2703
02:04:04,639 --> 02:04:08,079
terminate the connection correctly

2704
02:04:08,159 --> 02:04:13,040
but we can detect that uh efficiently

2705
02:04:14,159 --> 02:04:17,679
right just a note we are over time and i

2706
02:04:16,400 --> 02:04:22,638
think we are kicked out

2707
02:04:17,679 --> 02:04:25,920
in a minute so um yoshi you have

2708
02:04:22,639 --> 02:04:27,440
whatever time is left okay uh

2709
02:04:25,920 --> 02:04:29,360
so thanks for presenting a very

2710
02:04:27,440 --> 02:04:30,239
interesting idea i like you know reading

2711
02:04:29,360 --> 02:04:33,598
your paper

2712
02:04:30,239 --> 02:04:36,638
and then so one naive question i have

2713
02:04:33,599 --> 02:04:39,520
is um this technology

2714
02:04:36,639 --> 02:04:41,840
contains a lot of stuff it has similar

2715
02:04:39,520 --> 02:04:45,199
type grip it has similar feature for

2716
02:04:41,840 --> 02:04:47,840
mpdcp so if we can if you

2717
02:04:45,199 --> 02:04:50,559
proceed this idea it can be replacing of

2718
02:04:47,840 --> 02:04:53,520
mpdcp while it can be a replacement of

2719
02:04:50,560 --> 02:04:54,719
this grip and then i'm basically

2720
02:04:53,520 --> 02:04:56,960
wondering

2721
02:04:54,719 --> 02:04:58,719
how to how do you want to proceed this

2722
02:04:56,960 --> 02:05:01,599
idea in idea

2723
02:04:58,719 --> 02:05:03,040
and especially if this seems to be too

2724
02:05:01,599 --> 02:05:06,079
big for tcp and working

2725
02:05:03,040 --> 02:05:08,400
with my understanding yes

2726
02:05:06,079 --> 02:05:10,239
so first our objective is to understand

2727
02:05:08,400 --> 02:05:11,759
what are the real use case where

2728
02:05:10,239 --> 02:05:15,440
coupling the two would provide

2729
02:05:11,760 --> 02:05:17,440
most of the benefit and then to uh

2730
02:05:15,440 --> 02:05:19,040
to develop running code and to extend

2731
02:05:17,440 --> 02:05:20,159
the running code so that we can do

2732
02:05:19,040 --> 02:05:22,079
experiments

2733
02:05:20,159 --> 02:05:23,920
and once we have running code and we

2734
02:05:22,079 --> 02:05:25,040
know that the solution works then we can

2735
02:05:23,920 --> 02:05:28,320
come to the itf

2736
02:05:25,040 --> 02:05:30,079
and bring the ids to the itf but i think

2737
02:05:28,320 --> 02:05:32,799
what's important now is that

2738
02:05:30,079 --> 02:05:35,360
if you are if within tcpm you are

2739
02:05:32,800 --> 02:05:38,320
blocked by the difficulty of exchanging

2740
02:05:35,360 --> 02:05:40,239
tcp options or exchanging tcp options

2741
02:05:38,320 --> 02:05:42,320
that would need to be reliable

2742
02:05:40,239 --> 02:05:44,159
maybe think that if your use case

2743
02:05:42,320 --> 02:05:46,079
involves tls anyway

2744
02:05:44,159 --> 02:05:48,159
then you could use tls as a way to

2745
02:05:46,079 --> 02:05:49,040
exchange the reliable tcp option that

2746
02:05:48,159 --> 02:05:52,079
you would like to

2747
02:05:49,040 --> 02:05:55,199
to exchange

2748
02:05:52,079 --> 02:05:58,239
i see that means you want to limit

2749
02:05:55,199 --> 02:06:00,000
some features to some extent at first

2750
02:05:58,239 --> 02:06:02,079
so we will need to prioritize and we

2751
02:06:00,000 --> 02:06:04,560
need to see what where there is

2752
02:06:02,079 --> 02:06:05,599
most of the benefit by coupling the two

2753
02:06:04,560 --> 02:06:07,520
together

2754
02:06:05,599 --> 02:06:09,599
and there are parts where there is no

2755
02:06:07,520 --> 02:06:12,239
benefit so for example doing sac

2756
02:06:09,599 --> 02:06:14,000
it's not possible to do sac with tcpls

2757
02:06:12,239 --> 02:06:16,480
but for mptcp you can do

2758
02:06:14,000 --> 02:06:18,079
ad address and you can simplify the

2759
02:06:16,480 --> 02:06:20,159
exchange of the keys so there is a

2760
02:06:18,079 --> 02:06:21,840
benefit for mptcp

2761
02:06:20,159 --> 02:06:23,598
there are other benefits that you could

2762
02:06:21,840 --> 02:06:25,280
do so we are discussing congestion

2763
02:06:23,599 --> 02:06:27,280
control and things like that

2764
02:06:25,280 --> 02:06:29,840
you might know that congestion control

2765
02:06:27,280 --> 02:06:30,719
now it can be implemented using ebpf on

2766
02:06:29,840 --> 02:06:33,119
linux

2767
02:06:30,719 --> 02:06:34,239
so it's possible with this approach to

2768
02:06:33,119 --> 02:06:36,400
exchange the

2769
02:06:34,239 --> 02:06:38,000
ebpf congestion control scheme over a

2770
02:06:36,400 --> 02:06:40,239
tcpls connection

2771
02:06:38,000 --> 02:06:42,079
so the server could send a different

2772
02:06:40,239 --> 02:06:43,598
congestion control scheme to the client

2773
02:06:42,079 --> 02:06:45,440
to adapt the client to the current

2774
02:06:43,599 --> 02:06:47,599
networking conditions because you can

2775
02:06:45,440 --> 02:06:49,839
encode the ebpf code

2776
02:06:47,599 --> 02:06:50,960
that contains the congestion controller

2777
02:06:49,840 --> 02:06:53,040
inside tls

2778
02:06:50,960 --> 02:06:54,719
records that are sent by the server so

2779
02:06:53,040 --> 02:06:57,440
there are lots of opportunities by

2780
02:06:54,719 --> 02:07:01,599
coupling the two together

2781
02:06:57,440 --> 02:07:03,839
okay thank you thank you

2782
02:07:01,599 --> 02:07:04,960
thank you very much for this interesting

2783
02:07:03,840 --> 02:07:08,000
presentation

2784
02:07:04,960 --> 02:07:11,920
um i think this concludes

2785
02:07:08,000 --> 02:07:13,360
this tcpm session um thank you for

2786
02:07:11,920 --> 02:07:17,440
participating

2787
02:07:13,360 --> 02:07:27,839
and joining and see you at the next idf

2788
02:07:17,440 --> 02:07:27,839
bye bye

2789
02:07:44,719 --> 02:07:46,800
you

