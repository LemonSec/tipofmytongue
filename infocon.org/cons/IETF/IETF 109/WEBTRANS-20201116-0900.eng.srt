1
00:02:44,720 --> 00:02:50,160
okay i think we'll get started this is

2
00:02:47,920 --> 00:02:52,238
the ietf 109

3
00:02:50,160 --> 00:02:54,480
meeting of the web transport working

4
00:02:52,239 --> 00:02:54,480
group

5
00:02:58,400 --> 00:03:02,840
a few meeting tips morning afternoon all

6
00:03:01,519 --> 00:03:05,360
the time everyone

7
00:03:02,840 --> 00:03:06,640
actually bernard if you want to enable

8
00:03:05,360 --> 00:03:08,879
the video as we're going through the

9
00:03:06,640 --> 00:03:09,839
chair slides so people can see how

10
00:03:08,879 --> 00:03:12,879
personable we're

11
00:03:09,840 --> 00:03:16,239
nice we are or how sleepy

12
00:03:12,879 --> 00:03:19,280
um let me

13
00:03:16,239 --> 00:03:22,480
let me see here i'll enable

14
00:03:19,280 --> 00:03:22,480
uh video

15
00:03:22,879 --> 00:03:30,159
okay and go back to slides

16
00:03:27,040 --> 00:03:32,000
uh so the session is being recorded

17
00:03:30,159 --> 00:03:33,760
and if you're here you're automatically

18
00:03:32,000 --> 00:03:37,840
in the blue sheets

19
00:03:33,760 --> 00:03:39,519
um please join the session jabber room

20
00:03:37,840 --> 00:03:41,280
and use headphones although i'm not

21
00:03:39,519 --> 00:03:42,640
doing that i'm using an echo cancelling

22
00:03:41,280 --> 00:03:45,599
speakerphone

23
00:03:42,640 --> 00:03:49,119
and state your full name before speaking

24
00:03:45,599 --> 00:03:52,399
so we can get you into the minutes

25
00:03:49,120 --> 00:03:55,920
david do you want to give a few tips

26
00:03:52,400 --> 00:03:56,959
so the medical tool makes sense but it's

27
00:03:55,920 --> 00:04:00,000
not necessarily very

28
00:03:56,959 --> 00:04:01,599
intuitive so um

29
00:04:00,000 --> 00:04:02,879
you need to do separate things like if

30
00:04:01,599 --> 00:04:04,238
you want to speak you need to first

31
00:04:02,879 --> 00:04:07,359
enter the queue

32
00:04:04,239 --> 00:04:08,159
and then like the chairs will call on

33
00:04:07,360 --> 00:04:10,640
you

34
00:04:08,159 --> 00:04:12,239
at some point um you'll have to manually

35
00:04:10,640 --> 00:04:13,439
leave the queue yourself when you're

36
00:04:12,239 --> 00:04:15,519
done speaking

37
00:04:13,439 --> 00:04:17,120
but also once we call on you we'll just

38
00:04:15,519 --> 00:04:19,199
say something we don't have a button to

39
00:04:17,120 --> 00:04:21,680
press to let you in like last time

40
00:04:19,199 --> 00:04:23,520
so you need to yourself enable your

41
00:04:21,680 --> 00:04:24,160
audio by unmuting so that's the button

42
00:04:23,520 --> 00:04:26,400
here

43
00:04:24,160 --> 00:04:28,160
and then when you're done you like kind

44
00:04:26,400 --> 00:04:29,280
of stop by saying you're done and then

45
00:04:28,160 --> 00:04:32,479
you mute

46
00:04:29,280 --> 00:04:34,880
and we'll move on to the next person we

47
00:04:32,479 --> 00:04:36,560
encourage folks to use their camera if

48
00:04:34,880 --> 00:04:37,360
they're comfortable it's a lot easier to

49
00:04:36,560 --> 00:04:39,040
understand

50
00:04:37,360 --> 00:04:40,240
each other especially across like

51
00:04:39,040 --> 00:04:41,120
different accents and everything when

52
00:04:40,240 --> 00:04:42,560
you can kind of

53
00:04:41,120 --> 00:04:44,800
see the person you're talking to but

54
00:04:42,560 --> 00:04:48,720
that's not a requirement by any means

55
00:04:44,800 --> 00:04:51,520
uh yeah also you need to leave the queue

56
00:04:48,720 --> 00:04:57,840
yourself if you don't actually press the

57
00:04:51,520 --> 00:04:57,840
tool to leave it you'll stay in it

58
00:04:58,479 --> 00:05:04,240
okay the note well uh just a reminder of

59
00:05:01,840 --> 00:05:05,198
itf policies you've probably heard this

60
00:05:04,240 --> 00:05:06,800
several times

61
00:05:05,199 --> 00:05:08,560
already if you've been attending other

62
00:05:06,800 --> 00:05:10,800
meetings uh

63
00:05:08,560 --> 00:05:12,400
and by participating you agree to follow

64
00:05:10,800 --> 00:05:15,440
itf

65
00:05:12,400 --> 00:05:16,719
proceed processes and policies and

66
00:05:15,440 --> 00:05:19,840
definitive information

67
00:05:16,720 --> 00:05:20,880
is in the document listed below and

68
00:05:19,840 --> 00:05:23,520
other bcps

69
00:05:20,880 --> 00:05:24,000
if you want more info please talk to the

70
00:05:23,520 --> 00:05:27,039
working group

71
00:05:24,000 --> 00:05:27,039
chairs or the ids

72
00:05:27,919 --> 00:05:33,758
so at this meeting the agenda is posted

73
00:05:30,720 --> 00:05:33,759
and it's up to date

74
00:05:34,080 --> 00:05:38,479
we will want a volunteer for notetaker i

75
00:05:36,639 --> 00:05:39,520
believe we have a volunteer for jabber

76
00:05:38,479 --> 00:05:41,840
scribe

77
00:05:39,520 --> 00:05:44,159
but we will want somebody to take notes

78
00:05:41,840 --> 00:05:48,080
we have the kodi md

79
00:05:44,160 --> 00:05:50,720
at this link so it's easy to do

80
00:05:48,080 --> 00:05:52,400
but we do need a volunteer so we can

81
00:05:50,720 --> 00:05:54,960
keep notes for what is about to

82
00:05:52,400 --> 00:05:54,960
transpire

83
00:05:56,400 --> 00:06:07,840
do we have a volunteer

84
00:06:08,880 --> 00:06:12,479
until we have someone who can help take

85
00:06:10,479 --> 00:06:13,919
notes it's really not that much work

86
00:06:12,479 --> 00:06:16,000
and there's really no pressure we're not

87
00:06:13,919 --> 00:06:21,840
expecting the notes to be perfect

88
00:06:16,000 --> 00:06:21,840
um right like it's just

89
00:06:22,800 --> 00:06:26,400
i'm assuming that maybe everyone is

90
00:06:24,639 --> 00:06:27,759
clamoring to volunteer for note-taking

91
00:06:26,400 --> 00:06:34,239
but they haven't figured out how to use

92
00:06:27,759 --> 00:06:36,080
the audio tool

93
00:06:34,240 --> 00:06:37,520
for the link so that we can verify we

94
00:06:36,080 --> 00:06:38,560
can actually get into the notes this

95
00:06:37,520 --> 00:06:42,080
time

96
00:06:38,560 --> 00:06:43,680
yes so from me deco there if you click

97
00:06:42,080 --> 00:06:44,960
in the top right there's a link to the

98
00:06:43,680 --> 00:06:46,080
note meeting tool and you can either

99
00:06:44,960 --> 00:06:49,840
have it in line or

100
00:06:46,080 --> 00:06:49,840
you can open another tab

101
00:06:50,240 --> 00:06:55,520
yeah uh if it's working the way we think

102
00:06:52,639 --> 00:06:58,800
it is you should see the agenda

103
00:06:55,520 --> 00:07:03,840
in the tool when you open it

104
00:06:58,800 --> 00:07:03,840
at least that's what i think i put there

105
00:07:11,360 --> 00:07:17,280
okay i can do that thank you so much

106
00:07:14,560 --> 00:07:21,759
mike we really appreciate it

107
00:07:17,280 --> 00:07:23,758
we really do okay so here is the agenda

108
00:07:21,759 --> 00:07:25,199
um we had i have the preliminaries which

109
00:07:23,759 --> 00:07:27,599
you've just talked about we should

110
00:07:25,199 --> 00:07:30,240
probably uh do the agenda bash as well

111
00:07:27,599 --> 00:07:32,000
david will handle a cue

112
00:07:30,240 --> 00:07:34,240
and then we're going to have will law

113
00:07:32,000 --> 00:07:37,360
from the w3c web transport working group

114
00:07:34,240 --> 00:07:40,400
give us a little update luke will

115
00:07:37,360 --> 00:07:43,440
give us some developer feedback from the

116
00:07:40,400 --> 00:07:46,239
web transport origin trial

117
00:07:43,440 --> 00:07:47,199
then we'll have victor do the overview

118
00:07:46,240 --> 00:07:50,720
and requirements

119
00:07:47,199 --> 00:07:54,879
eric will do http 2 and then

120
00:07:50,720 --> 00:07:57,599
victor will do the quick and http 3

121
00:07:54,879 --> 00:07:59,599
drafts and then we'll have the wrap up

122
00:07:57,599 --> 00:08:03,039
and hopefully a bunch of time

123
00:07:59,599 --> 00:08:05,280
for discussion during this session

124
00:08:03,039 --> 00:08:06,400
uh is there anybody who'd like to bash

125
00:08:05,280 --> 00:08:12,159
the agenda or have

126
00:08:06,400 --> 00:08:14,878
another suggestion

127
00:08:12,160 --> 00:08:15,599
okay so we'd like to turn over the floor

128
00:08:14,879 --> 00:08:27,840
to will

129
00:08:15,599 --> 00:08:27,840
law are you there will

130
00:08:28,080 --> 00:08:33,679
well you need to uh if you're there

131
00:08:31,520 --> 00:08:36,478
you need to press the audio tool to

132
00:08:33,679 --> 00:08:36,478
unmute yourself

133
00:08:37,039 --> 00:08:41,760
not seeing him in the currently present

134
00:08:39,839 --> 00:08:44,320
participant list

135
00:08:41,760 --> 00:08:45,439
okay well i can i can give his slide

136
00:08:44,320 --> 00:08:48,800
probably well enough

137
00:08:45,440 --> 00:08:52,959
uh for now uh so i will i will do it

138
00:08:48,800 --> 00:08:53,760
um the w3c web transport working group

139
00:08:52,959 --> 00:08:55,599
has been

140
00:08:53,760 --> 00:08:57,439
established and the charter has been

141
00:08:55,600 --> 00:08:58,959
published

142
00:08:57,440 --> 00:09:00,880
and the working group has been created

143
00:08:58,959 --> 00:09:01,359
and all that they did hold meetings

144
00:09:00,880 --> 00:09:05,920
during

145
00:09:01,360 --> 00:09:07,920
the w3c tpac held two two-hour meetings

146
00:09:05,920 --> 00:09:10,240
and now they have set up bi-weekly

147
00:09:07,920 --> 00:09:14,560
meetings at an alternating time slot of

148
00:09:10,240 --> 00:09:17,920
7 a.m or 4 p.m pacific

149
00:09:14,560 --> 00:09:18,800
and it's all on the w3c web transport

150
00:09:17,920 --> 00:09:21,279
wiki

151
00:09:18,800 --> 00:09:22,399
so you can go and find out all about it

152
00:09:21,279 --> 00:09:25,519
we have some

153
00:09:22,399 --> 00:09:27,120
draft editors and

154
00:09:25,519 --> 00:09:29,360
there's been a call for consensus to

155
00:09:27,120 --> 00:09:30,399
adopt the existing web transport api

156
00:09:29,360 --> 00:09:33,760
spec

157
00:09:30,399 --> 00:09:35,279
and so the it's now in the w3c web

158
00:09:33,760 --> 00:09:37,600
transport github

159
00:09:35,279 --> 00:09:39,200
so you can look for it there there are

160
00:09:37,600 --> 00:09:41,360
lots of issues that have been filed by

161
00:09:39,200 --> 00:09:44,640
various people including folks

162
00:09:41,360 --> 00:09:47,040
that are part of this meeting and

163
00:09:44,640 --> 00:09:48,160
so work is underway and if you're

164
00:09:47,040 --> 00:09:51,279
interested please

165
00:09:48,160 --> 00:09:53,760
please participate

166
00:09:51,279 --> 00:09:55,680
all right so um now we're going to have

167
00:09:53,760 --> 00:09:58,160
some developer feedback

168
00:09:55,680 --> 00:10:00,000
um luke will tell us a little bit about

169
00:09:58,160 --> 00:10:00,640
what is experienced i have also have a

170
00:10:00,000 --> 00:10:03,920
few uh

171
00:10:00,640 --> 00:10:06,800
observations to make so luke i'd like to

172
00:10:03,920 --> 00:10:06,800
hand the floor to you

173
00:10:06,959 --> 00:10:13,839
hello everyone um so i'm luke

174
00:10:10,800 --> 00:10:17,199
uh i am a software engineer at twitch

175
00:10:13,839 --> 00:10:19,279
um and also amazon

176
00:10:17,200 --> 00:10:20,480
we were purchased a while ago and always

177
00:10:19,279 --> 00:10:23,040
forget about that

178
00:10:20,480 --> 00:10:24,240
um but uh yeah we've been messing around

179
00:10:23,040 --> 00:10:27,279
with web transport

180
00:10:24,240 --> 00:10:30,800
um quite a bit and uh have

181
00:10:27,279 --> 00:10:32,880
some things i want to just talk about um

182
00:10:30,800 --> 00:10:35,120
yeah so just to be clear for everybody

183
00:10:32,880 --> 00:10:36,959
uh luke's gonna be giving feedback on

184
00:10:35,120 --> 00:10:38,800
the web transport origin trial here's

185
00:10:36,959 --> 00:10:41,199
some basic info about it

186
00:10:38,800 --> 00:10:43,519
uh basically if you've got chromer edge

187
00:10:41,200 --> 00:10:45,200
up to m88 like the canary

188
00:10:43,519 --> 00:10:47,200
you can play with it um you should

189
00:10:45,200 --> 00:10:50,640
probably i guess

190
00:10:47,200 --> 00:10:52,160
do uh um for the latest api if you're

191
00:10:50,640 --> 00:10:55,199
just working from the

192
00:10:52,160 --> 00:10:57,760
api draft i guess m87 or later is

193
00:10:55,200 --> 00:10:58,320
is a good thing um and there's some

194
00:10:57,760 --> 00:11:01,600
various

195
00:10:58,320 --> 00:11:02,880
uh info on the web uh to get more

196
00:11:01,600 --> 00:11:06,160
experience with the api but

197
00:11:02,880 --> 00:11:09,040
go ahead luke yeah so um

198
00:11:06,160 --> 00:11:10,719
to that extent as well the uh there's a

199
00:11:09,040 --> 00:11:13,360
few hurdles to get the api going

200
00:11:10,720 --> 00:11:14,079
um but the stream part of the api quick

201
00:11:13,360 --> 00:11:16,480
transport

202
00:11:14,079 --> 00:11:17,920
works somewhat well i'll go into some of

203
00:11:16,480 --> 00:11:20,640
the specific bugs

204
00:11:17,920 --> 00:11:21,199
uh and the datagram um component works

205
00:11:20,640 --> 00:11:23,519
uh

206
00:11:21,200 --> 00:11:24,640
as well uh and you have to do stuff with

207
00:11:23,519 --> 00:11:26,720
self-signed certs

208
00:11:24,640 --> 00:11:28,720
uh so but there's there's guides out

209
00:11:26,720 --> 00:11:31,839
there uh which is great

210
00:11:28,720 --> 00:11:34,000
um so yeah um just some

211
00:11:31,839 --> 00:11:35,279
some some heads up why we're trying to

212
00:11:34,000 --> 00:11:39,120
use quick transport

213
00:11:35,279 --> 00:11:39,760
um so uh the first problem we're trying

214
00:11:39,120 --> 00:11:42,399
to deal with

215
00:11:39,760 --> 00:11:43,439
is head of line blocking um surprise

216
00:11:42,399 --> 00:11:47,920
surprise

217
00:11:43,440 --> 00:11:52,079
it's kind of why quick was designed

218
00:11:47,920 --> 00:11:55,120
to power hv3 because as we've noticed

219
00:11:52,079 --> 00:11:56,959
when you deliver a lot of media it's

220
00:11:55,120 --> 00:11:59,200
usually sequential

221
00:11:56,959 --> 00:12:00,000
um you know like we're streaming this

222
00:11:59,200 --> 00:12:02,000
video call

223
00:12:00,000 --> 00:12:03,440
or you'd be streaming watching uh a

224
00:12:02,000 --> 00:12:05,360
video download

225
00:12:03,440 --> 00:12:08,320
and anytime you have congestion it just

226
00:12:05,360 --> 00:12:11,360
causes the queue to backup

227
00:12:08,320 --> 00:12:12,079
either when you're uh contributing to a

228
00:12:11,360 --> 00:12:14,399
website

229
00:12:12,079 --> 00:12:15,279
um like you're creating a new uh a

230
00:12:14,399 --> 00:12:18,560
stream

231
00:12:15,279 --> 00:12:20,240
uh we use rtmp at twitch and

232
00:12:18,560 --> 00:12:21,760
congestion causes back pressure which

233
00:12:20,240 --> 00:12:24,560
increases latency

234
00:12:21,760 --> 00:12:26,399
um and then in my half i work on the uh

235
00:12:24,560 --> 00:12:30,079
distribution team like the cdn

236
00:12:26,399 --> 00:12:33,440
uh team we run our own uh uh

237
00:12:30,079 --> 00:12:35,120
low latency live video cdn and again if

238
00:12:33,440 --> 00:12:35,680
any time your network sputters just a

239
00:12:35,120 --> 00:12:38,720
little bit

240
00:12:35,680 --> 00:12:40,000
it causes a roadblock um increases

241
00:12:38,720 --> 00:12:41,760
latency so we really want to

242
00:12:40,000 --> 00:12:43,040
use quick more than anything to

243
00:12:41,760 --> 00:12:45,680
investigate

244
00:12:43,040 --> 00:12:46,560
um how to solve this and this is some

245
00:12:45,680 --> 00:12:49,839
interesting

246
00:12:46,560 --> 00:12:53,599
like ramifications with uh

247
00:12:49,839 --> 00:12:57,920
um uh yeah how to do it

248
00:12:53,600 --> 00:12:57,920
um so next slide

249
00:12:58,959 --> 00:13:06,719
um the crux of our

250
00:13:02,079 --> 00:13:09,439
idea and how to do uh low latency video

251
00:13:06,720 --> 00:13:10,560
is that we really want to break video

252
00:13:09,440 --> 00:13:13,839
into components

253
00:13:10,560 --> 00:13:15,359
such that if there is um congestion

254
00:13:13,839 --> 00:13:18,079
they're independent of each other

255
00:13:15,360 --> 00:13:20,320
um so we want multiplex multiplexing we

256
00:13:18,079 --> 00:13:22,880
want to have multiple requests in flight

257
00:13:20,320 --> 00:13:24,800
uh and i think more critically we want

258
00:13:22,880 --> 00:13:26,160
to prior to prioritize such that if

259
00:13:24,800 --> 00:13:28,079
there is congestion we make sure the

260
00:13:26,160 --> 00:13:30,880
important data gets there first

261
00:13:28,079 --> 00:13:32,000
um so we're using quick transport um i

262
00:13:30,880 --> 00:13:33,680
went through and run my own quick

263
00:13:32,000 --> 00:13:36,399
implementation because we're uh

264
00:13:33,680 --> 00:13:37,519
we're a go shop and the existing uh

265
00:13:36,399 --> 00:13:40,000
quick wasn't there

266
00:13:37,519 --> 00:13:41,040
uh and yeah we're we're right now

267
00:13:40,000 --> 00:13:44,079
running experiments

268
00:13:41,040 --> 00:13:44,800
uh for employees using um the origin

269
00:13:44,079 --> 00:13:47,040
trial

270
00:13:44,800 --> 00:13:48,079
uh and we wanna try to hit some

271
00:13:47,040 --> 00:13:50,160
production traffic

272
00:13:48,079 --> 00:13:53,519
uh next uh early next year to try and

273
00:13:50,160 --> 00:13:56,639
see how it works

274
00:13:53,519 --> 00:13:59,120
uh next slide um

275
00:13:56,639 --> 00:14:00,560
one thing we've had a large debate over

276
00:13:59,120 --> 00:14:04,399
is why not

277
00:14:00,560 --> 00:14:06,079
uh htv3 um it's really because low

278
00:14:04,399 --> 00:14:09,440
latency is hard to do

279
00:14:06,079 --> 00:14:12,800
um especially over such

280
00:14:09,440 --> 00:14:14,800
long stateful connections um

281
00:14:12,800 --> 00:14:16,000
you have to go into the area of like

282
00:14:14,800 --> 00:14:17,680
http push

283
00:14:16,000 --> 00:14:19,680
and you have to start mapping well i'm

284
00:14:17,680 --> 00:14:20,959
gonna have to make the client do these

285
00:14:19,680 --> 00:14:23,839
requests in this order

286
00:14:20,959 --> 00:14:25,040
this frequency um and it also gets

287
00:14:23,839 --> 00:14:28,399
difficult when you wanna

288
00:14:25,040 --> 00:14:31,519
have the same api for contributing and

289
00:14:28,399 --> 00:14:33,680
distributing video uh you have to you

290
00:14:31,519 --> 00:14:36,480
have to deal with firewalls so if

291
00:14:33,680 --> 00:14:37,680
the client is pushing video it's a

292
00:14:36,480 --> 00:14:39,279
different api than the clients

293
00:14:37,680 --> 00:14:42,399
downloading video

294
00:14:39,279 --> 00:14:45,360
um so it's really nice to have

295
00:14:42,399 --> 00:14:46,959
like a quick based api where it's just

296
00:14:45,360 --> 00:14:47,680
arbitrary streams it doesn't matter who

297
00:14:46,959 --> 00:14:49,760
initiates

298
00:14:47,680 --> 00:14:52,239
doesn't matter who's receiving uh the

299
00:14:49,760 --> 00:14:54,800
api is symmetric in that regard

300
00:14:52,240 --> 00:14:55,680
um and quick transport is so simple we

301
00:14:54,800 --> 00:14:59,279
don't

302
00:14:55,680 --> 00:15:02,719
we don't need uh

303
00:14:59,279 --> 00:15:05,279
connection pooling like hp3 transport

304
00:15:02,720 --> 00:15:06,399
there's almost no point having fallback

305
00:15:05,279 --> 00:15:09,680
hv2

306
00:15:06,399 --> 00:15:10,880
transport support um

307
00:15:09,680 --> 00:15:13,599
because we just don't want to work with

308
00:15:10,880 --> 00:15:16,000
tcp um

309
00:15:13,600 --> 00:15:17,440
we want to use quick uh and also it's

310
00:15:16,000 --> 00:15:18,399
nice that datagram's a potential

311
00:15:17,440 --> 00:15:22,000
fallback

312
00:15:18,399 --> 00:15:23,920
so this is if we do run into issues

313
00:15:22,000 --> 00:15:25,760
with let's just say the quick

314
00:15:23,920 --> 00:15:28,560
implementation it's always nice

315
00:15:25,760 --> 00:15:29,839
knowing that you have this like uh swiss

316
00:15:28,560 --> 00:15:31,119
army knife of being able to do it

317
00:15:29,839 --> 00:15:35,519
yourself

318
00:15:31,120 --> 00:15:37,920
um so next slide

319
00:15:35,519 --> 00:15:38,880
um i've gone through and filed quite a

320
00:15:37,920 --> 00:15:41,599
few bugs

321
00:15:38,880 --> 00:15:42,399
with the chrome implementation um which

322
00:15:41,600 --> 00:15:46,320
is great

323
00:15:42,399 --> 00:15:49,360
um more or less the

324
00:15:46,320 --> 00:15:52,399
state machine um just needed

325
00:15:49,360 --> 00:15:55,120
some to be able to handle few uh

326
00:15:52,399 --> 00:15:56,399
a few cases better a lot of stuff where

327
00:15:55,120 --> 00:15:57,920
um

328
00:15:56,399 --> 00:15:59,680
really the only case that worked out of

329
00:15:57,920 --> 00:16:02,560
the box was if uh

330
00:15:59,680 --> 00:16:03,279
was remote initiated unidirectional

331
00:16:02,560 --> 00:16:04,880
streams were

332
00:16:03,279 --> 00:16:06,320
great otherwise there's always like

333
00:16:04,880 --> 00:16:09,360
little subtle issues with

334
00:16:06,320 --> 00:16:10,800
every other configuration um

335
00:16:09,360 --> 00:16:12,480
so here's just a few tickets if you want

336
00:16:10,800 --> 00:16:14,560
to go through i think most of them are

337
00:16:12,480 --> 00:16:17,120
being worked on some of them are fixed

338
00:16:14,560 --> 00:16:17,920
um i know the using the entire cpu core

339
00:16:17,120 --> 00:16:21,279
is fixed

340
00:16:17,920 --> 00:16:24,319
um that was just a busy loop in the

341
00:16:21,279 --> 00:16:25,920
kind of like the wake up logic um but

342
00:16:24,320 --> 00:16:28,880
we've run into a few things like

343
00:16:25,920 --> 00:16:30,000
uh half closed streams for example

344
00:16:28,880 --> 00:16:33,279
should the

345
00:16:30,000 --> 00:16:35,279
uh would transport api require

346
00:16:33,279 --> 00:16:37,279
half closed or it should just be vague

347
00:16:35,279 --> 00:16:40,560
or does it defer to quick

348
00:16:37,279 --> 00:16:44,079
just a few things that needed like um

349
00:16:40,560 --> 00:16:44,319
uh the draft to mention it explicitly so

350
00:16:44,079 --> 00:16:47,519
that

351
00:16:44,320 --> 00:16:51,199
implementations don't miss it

352
00:16:47,519 --> 00:16:54,720
um let's see and then final slide

353
00:16:51,199 --> 00:16:55,439
um so quick transport's working great

354
00:16:54,720 --> 00:16:58,560
for us for

355
00:16:55,440 --> 00:17:00,160
distribution uh purposes um

356
00:16:58,560 --> 00:17:01,839
we're thinking about using it for

357
00:17:00,160 --> 00:17:04,240
contribution but there's a few things we

358
00:17:01,839 --> 00:17:07,520
would need of the streams api

359
00:17:04,240 --> 00:17:09,359
um so this is a little like a feature

360
00:17:07,520 --> 00:17:12,240
bucket list at the very end

361
00:17:09,359 --> 00:17:13,760
um but prioritization we're really

362
00:17:12,240 --> 00:17:17,039
concerned about congestion control

363
00:17:13,760 --> 00:17:18,400
and i know it's very hard to do like a

364
00:17:17,039 --> 00:17:22,319
way to pick things out

365
00:17:18,400 --> 00:17:24,400
um and some issues with datagrams

366
00:17:22,319 --> 00:17:26,159
like if you try and send a high rate of

367
00:17:24,400 --> 00:17:28,160
datagrams you run into

368
00:17:26,160 --> 00:17:30,160
fighting with the underlying congestion

369
00:17:28,160 --> 00:17:32,559
control mechanism

370
00:17:30,160 --> 00:17:33,520
uh that you also don't have control over

371
00:17:32,559 --> 00:17:36,160
um

372
00:17:33,520 --> 00:17:37,280
but yeah that's it uh i i think i've

373
00:17:36,160 --> 00:17:40,480
given

374
00:17:37,280 --> 00:17:43,120
more fine detailed uh uh

375
00:17:40,480 --> 00:17:44,080
feedback by posting issues uh at least

376
00:17:43,120 --> 00:17:47,360
on github

377
00:17:44,080 --> 00:17:48,159
uh and yeah if anybody has any specific

378
00:17:47,360 --> 00:17:51,120
questions as well

379
00:17:48,160 --> 00:17:53,120
about what the uh the origin trials are

380
00:17:51,120 --> 00:17:55,039
uh like but it's been great so far

381
00:17:53,120 --> 00:17:56,479
um just being able to run quick

382
00:17:55,039 --> 00:17:58,480
transport in the browser

383
00:17:56,480 --> 00:18:01,840
it's been a lifesaver even before h3

384
00:17:58,480 --> 00:18:01,840
support is uh you know ready

385
00:18:03,280 --> 00:18:09,120
okay thank you luke um i just wanted to

386
00:18:06,559 --> 00:18:12,160
give a little bit of

387
00:18:09,120 --> 00:18:15,360
feedback um this

388
00:18:12,160 --> 00:18:16,559
is the requirements and use cases that

389
00:18:15,360 --> 00:18:18,719
the w3c

390
00:18:16,559 --> 00:18:20,480
is developing i'm not going to talk

391
00:18:18,720 --> 00:18:22,799
about any all of these but

392
00:18:20,480 --> 00:18:25,840
just make your observation about a few

393
00:18:22,799 --> 00:18:25,840
of these use cases

394
00:18:26,080 --> 00:18:30,000
in particular i wanted to talk a little

395
00:18:27,919 --> 00:18:31,120
bit about low latency streaming use

396
00:18:30,000 --> 00:18:33,360
cases

397
00:18:31,120 --> 00:18:34,879
uh such as game streaming and remote

398
00:18:33,360 --> 00:18:36,639
desktop and then

399
00:18:34,880 --> 00:18:38,799
a few what i would call large scale

400
00:18:36,640 --> 00:18:41,280
events use cases these are for a lot of

401
00:18:38,799 --> 00:18:43,760
participants like at least ten thousand

402
00:18:41,280 --> 00:18:45,520
um things like company meetings or

403
00:18:43,760 --> 00:18:48,320
concerts political gatherings sporting

404
00:18:45,520 --> 00:18:50,320
events stuff like this

405
00:18:48,320 --> 00:18:52,080
the distinction between these two is the

406
00:18:50,320 --> 00:18:52,639
large-scale events generally don't have

407
00:18:52,080 --> 00:18:55,439
the same

408
00:18:52,640 --> 00:18:57,360
tight latency requirements so for many

409
00:18:55,440 --> 00:18:58,400
of these things like a second delay is

410
00:18:57,360 --> 00:19:01,360
okay

411
00:18:58,400 --> 00:19:01,840
uh whereas the low latency it's uh needs

412
00:19:01,360 --> 00:19:04,719
uh

413
00:19:01,840 --> 00:19:06,320
as low latency as possible because

414
00:19:04,720 --> 00:19:07,840
you're talking about uh things that

415
00:19:06,320 --> 00:19:12,159
could be disrupted by

416
00:19:07,840 --> 00:19:13,918
by uh additional latency so um

417
00:19:12,160 --> 00:19:15,280
a little bit on the low latency

418
00:19:13,919 --> 00:19:17,760
streaming use cases

419
00:19:15,280 --> 00:19:20,160
uh and the primary ones i i work with a

420
00:19:17,760 --> 00:19:23,760
lot of developers

421
00:19:20,160 --> 00:19:26,000
in the gaming and remote desktop cases

422
00:19:23,760 --> 00:19:27,760
they are almost always focused on quick

423
00:19:26,000 --> 00:19:28,960
transport that's the thing that they ask

424
00:19:27,760 --> 00:19:30,799
me about and they want to learn more

425
00:19:28,960 --> 00:19:33,200
about so they were using a bunch of them

426
00:19:30,799 --> 00:19:34,480
we're looking at the origin trial

427
00:19:33,200 --> 00:19:36,720
one thing i think it's important to

428
00:19:34,480 --> 00:19:38,160
understand and this is true of any use

429
00:19:36,720 --> 00:19:39,840
case is to understand whether it's a

430
00:19:38,160 --> 00:19:41,520
green field use case

431
00:19:39,840 --> 00:19:42,879
whether people have something they're

432
00:19:41,520 --> 00:19:46,080
already doing

433
00:19:42,880 --> 00:19:47,679
doing it with and then if they do you

434
00:19:46,080 --> 00:19:49,120
have to understand what the bar is to

435
00:19:47,679 --> 00:19:50,720
get them to move from whatever they're

436
00:19:49,120 --> 00:19:51,520
doing now to to what you want them to

437
00:19:50,720 --> 00:19:53,120
move to

438
00:19:51,520 --> 00:19:55,679
so in this particular case for these

439
00:19:53,120 --> 00:19:59,199
things we see the

440
00:19:55,679 --> 00:20:02,960
developers are using today webrtc

441
00:19:59,200 --> 00:20:04,720
the data channel with rtp audio video

442
00:20:02,960 --> 00:20:06,080
so in the case of the remote desktop

443
00:20:04,720 --> 00:20:07,520
typically the audio video

444
00:20:06,080 --> 00:20:08,960
they'll use whoever to see screen

445
00:20:07,520 --> 00:20:10,400
sharing and then the data channel for

446
00:20:08,960 --> 00:20:11,679
the keyboard and mouse events and

447
00:20:10,400 --> 00:20:14,960
control

448
00:20:11,679 --> 00:20:17,760
um for gaming there's we see

449
00:20:14,960 --> 00:20:18,080
client server game streaming which is

450
00:20:17,760 --> 00:20:21,120
done

451
00:20:18,080 --> 00:20:24,399
exclusively with the data channel

452
00:20:21,120 --> 00:20:27,120
so they send the audio video and the

453
00:20:24,400 --> 00:20:29,039
control trap of the keyboard mouse stuff

454
00:20:27,120 --> 00:20:32,879
over the data channel

455
00:20:29,039 --> 00:20:36,640
we've also seen gaming

456
00:20:32,880 --> 00:20:40,000
done with rtp audio and video as well

457
00:20:36,640 --> 00:20:42,400
um with the data channel being used

458
00:20:40,000 --> 00:20:43,679
uh for the for the keyboard and mouse uh

459
00:20:42,400 --> 00:20:46,880
as well

460
00:20:43,679 --> 00:20:50,000
um and i would mention that there's

461
00:20:46,880 --> 00:20:52,000
a number of developers who use

462
00:20:50,000 --> 00:20:53,840
both client server and peer-to-peer use

463
00:20:52,000 --> 00:20:55,600
cases so for example

464
00:20:53,840 --> 00:20:57,360
um you could stream a game from the

465
00:20:55,600 --> 00:20:59,678
cloud but you could also stream it from

466
00:20:57,360 --> 00:21:01,600
your game console to a mobile device

467
00:20:59,679 --> 00:21:03,679
or the remote desktop could be a remote

468
00:21:01,600 --> 00:21:05,520
desktop in the cloud

469
00:21:03,679 --> 00:21:07,280
or you could be just doing a remote

470
00:21:05,520 --> 00:21:10,639
desktop with your desktop

471
00:21:07,280 --> 00:21:12,879
your own desktop for example as well

472
00:21:10,640 --> 00:21:14,400
so a bunch of these developers they're

473
00:21:12,880 --> 00:21:16,240
supporting both client server and

474
00:21:14,400 --> 00:21:18,159
peer-to-peer

475
00:21:16,240 --> 00:21:19,360
and they like to have a single code base

476
00:21:18,159 --> 00:21:20,799
they don't want to have to write a

477
00:21:19,360 --> 00:21:22,559
completely different

478
00:21:20,799 --> 00:21:24,879
uh implementation for peer-to-peer

479
00:21:22,559 --> 00:21:26,559
versus client server

480
00:21:24,880 --> 00:21:28,559
and that's one of the reasons they like

481
00:21:26,559 --> 00:21:29,520
webrtc is because it kind of gives them

482
00:21:28,559 --> 00:21:31,360
both

483
00:21:29,520 --> 00:21:32,639
and yes for the client server case they

484
00:21:31,360 --> 00:21:35,520
need ice

485
00:21:32,640 --> 00:21:36,880
um but it's more important to them in

486
00:21:35,520 --> 00:21:38,559
general to have

487
00:21:36,880 --> 00:21:40,400
the ability to write one code base than

488
00:21:38,559 --> 00:21:42,080
it is to get rid of ice

489
00:21:40,400 --> 00:21:43,919
so i know we pitched one of the things

490
00:21:42,080 --> 00:21:44,639
about web transport is we get rid of ice

491
00:21:43,919 --> 00:21:46,159
and

492
00:21:44,640 --> 00:21:48,559
the answer from a bunch of these

493
00:21:46,159 --> 00:21:49,120
developers is i'll keep the ice if i can

494
00:21:48,559 --> 00:21:51,120
keep

495
00:21:49,120 --> 00:21:52,479
do the peer-to-peer so a lot of these

496
00:21:51,120 --> 00:21:54,158
folks have a strong interest

497
00:21:52,480 --> 00:21:55,679
in the in the peer-to-peer extension to

498
00:21:54,159 --> 00:21:58,559
great transport as well

499
00:21:55,679 --> 00:21:59,919
um a few other things um these some of

500
00:21:58,559 --> 00:22:02,158
these applications are pretty high

501
00:21:59,919 --> 00:22:05,200
performance like the game streaming

502
00:22:02,159 --> 00:22:07,280
uh and what i mean by this is that the

503
00:22:05,200 --> 00:22:08,480
streams themselves may not be huge in

504
00:22:07,280 --> 00:22:10,158
terms of bandwidth

505
00:22:08,480 --> 00:22:11,840
but often the the things that you're

506
00:22:10,159 --> 00:22:13,600
streaming to are not very high

507
00:22:11,840 --> 00:22:15,360
performance so it can be for example an

508
00:22:13,600 --> 00:22:16,799
older game console or something that's

509
00:22:15,360 --> 00:22:19,199
not very powerful

510
00:22:16,799 --> 00:22:22,158
um so some of these folks were having

511
00:22:19,200 --> 00:22:24,159
issues with the data channel because uh

512
00:22:22,159 --> 00:22:26,400
the the way the javascript uh back

513
00:22:24,159 --> 00:22:28,720
pressure is implemented in data channel

514
00:22:26,400 --> 00:22:30,400
so offering them potentially a better

515
00:22:28,720 --> 00:22:32,960
back pressure was it was a very

516
00:22:30,400 --> 00:22:36,080
attractive aspect of web transport

517
00:22:32,960 --> 00:22:39,919
um but as luke just mentioned

518
00:22:36,080 --> 00:22:41,918
it's not for de for uh for web transport

519
00:22:39,919 --> 00:22:43,280
for reliable web transport it does

520
00:22:41,919 --> 00:22:45,440
solve a lot of the back pressure

521
00:22:43,280 --> 00:22:48,000
problems kind of nicely so you

522
00:22:45,440 --> 00:22:49,360
uh you don't have to have basically what

523
00:22:48,000 --> 00:22:50,880
we saw with the data channels they were

524
00:22:49,360 --> 00:22:52,559
doing a lot of application layer

525
00:22:50,880 --> 00:22:54,640
acknowledgement

526
00:22:52,559 --> 00:22:56,559
but for datagrams you still need the app

527
00:22:54,640 --> 00:22:58,559
layer acknowledgement so

528
00:22:56,559 --> 00:22:59,840
in some ways if for developers who are

529
00:22:58,559 --> 00:23:02,799
using datagrams

530
00:22:59,840 --> 00:23:03,360
uh in this scenario they're not seeing a

531
00:23:02,799 --> 00:23:05,679
lower

532
00:23:03,360 --> 00:23:07,199
level of complexity with web transport

533
00:23:05,679 --> 00:23:08,240
and they were kind of hoping that web

534
00:23:07,200 --> 00:23:10,080
transport would

535
00:23:08,240 --> 00:23:11,360
allow them to get rid of the application

536
00:23:10,080 --> 00:23:13,039
layer acting that they were doing to

537
00:23:11,360 --> 00:23:14,559
make the data channel function

538
00:23:13,039 --> 00:23:16,080
uh but they're not they're not seeing

539
00:23:14,559 --> 00:23:17,918
that advantage they still have to do

540
00:23:16,080 --> 00:23:19,918
their application layer acting

541
00:23:17,919 --> 00:23:21,440
um the other thing is that they're

542
00:23:19,919 --> 00:23:24,480
asking about

543
00:23:21,440 --> 00:23:25,039
just some basic devops issues like for

544
00:23:24,480 --> 00:23:27,039
example

545
00:23:25,039 --> 00:23:28,799
say they bring down a gaming server is

546
00:23:27,039 --> 00:23:31,840
there a way to migrate these

547
00:23:28,799 --> 00:23:34,960
uh web transport connections

548
00:23:31,840 --> 00:23:36,879
uh to another to another server um

549
00:23:34,960 --> 00:23:38,559
so there's just some practical aspects

550
00:23:36,880 --> 00:23:39,919
of the clustering and draining that they

551
00:23:38,559 --> 00:23:40,799
they wanted to understand how to do

552
00:23:39,919 --> 00:23:43,520
better

553
00:23:40,799 --> 00:23:44,960
um i've also heard the uh bandwidth

554
00:23:43,520 --> 00:23:47,200
allocation it's a little bit different

555
00:23:44,960 --> 00:23:48,559
maybe than luke's prioritization

556
00:23:47,200 --> 00:23:50,320
um but they wanted to be able to

557
00:23:48,559 --> 00:23:52,240
allocate uh

558
00:23:50,320 --> 00:23:53,600
bandwidth between the datagram flows and

559
00:23:52,240 --> 00:23:54,640
the streams and the reason is that the

560
00:23:53,600 --> 00:23:56,799
datagram

561
00:23:54,640 --> 00:23:58,880
is used for control traffic so they

562
00:23:56,799 --> 00:24:01,039
don't want to be choked off

563
00:23:58,880 --> 00:24:03,279
um and they don't want like the audio

564
00:24:01,039 --> 00:24:04,640
video to take

565
00:24:03,279 --> 00:24:06,000
to take so much of the bandwidth that

566
00:24:04,640 --> 00:24:07,679
the control traffic for example

567
00:24:06,000 --> 00:24:09,520
experiences delays

568
00:24:07,679 --> 00:24:11,760
um so that's the kind of thing they

569
00:24:09,520 --> 00:24:14,080
weren't i don't think they cared about

570
00:24:11,760 --> 00:24:15,279
uh priority in the sense of dscp or

571
00:24:14,080 --> 00:24:18,080
anything like that but just

572
00:24:15,279 --> 00:24:21,520
making sure that their um their control

573
00:24:18,080 --> 00:24:23,600
traffic had a certain minimum balance

574
00:24:21,520 --> 00:24:24,720
okay a little bit on the event streaming

575
00:24:23,600 --> 00:24:28,158
this use case

576
00:24:24,720 --> 00:24:29,520
um there was more interest in http 3

577
00:24:28,159 --> 00:24:31,200
transport as i mentioned the other one

578
00:24:29,520 --> 00:24:32,960
was quick transport

579
00:24:31,200 --> 00:24:34,240
and the folks i've talked to here the

580
00:24:32,960 --> 00:24:37,039
existing solution is

581
00:24:34,240 --> 00:24:38,960
hls so that's what they consider to be

582
00:24:37,039 --> 00:24:41,120
the incumbent

583
00:24:38,960 --> 00:24:42,640
you would hear a lot because hls is a

584
00:24:41,120 --> 00:24:44,959
pretty mature technology

585
00:24:42,640 --> 00:24:46,880
you can a lot of great support in cloud

586
00:24:44,960 --> 00:24:49,520
infrastructure and cdns

587
00:24:46,880 --> 00:24:51,200
stuff like this so here they they had a

588
00:24:49,520 --> 00:24:53,760
concern about whether they could get the

589
00:24:51,200 --> 00:24:56,080
same level of ecosystem support

590
00:24:53,760 --> 00:24:57,600
uh for http 3 transport they could get

591
00:24:56,080 --> 00:24:59,678
with hls

592
00:24:57,600 --> 00:25:01,520
so a couple of things is is they wanted

593
00:24:59,679 --> 00:25:02,799
to know whether we supported on mobile

594
00:25:01,520 --> 00:25:04,639
platforms like

595
00:25:02,799 --> 00:25:07,840
you know will i be able to get this on

596
00:25:04,640 --> 00:25:09,679
all of my mobile operating systems

597
00:25:07,840 --> 00:25:12,240
also would it be widely supported in

598
00:25:09,679 --> 00:25:13,600
browsers of course some of these

599
00:25:12,240 --> 00:25:16,080
questions i can't really answer right

600
00:25:13,600 --> 00:25:18,080
now but um they were a little bit

601
00:25:16,080 --> 00:25:20,960
concerned about the complexity of the

602
00:25:18,080 --> 00:25:22,799
protocol and pooling issues with http 3

603
00:25:20,960 --> 00:25:24,000
um and whether it would inter-operate

604
00:25:22,799 --> 00:25:25,600
and i'll talk a little bit more about

605
00:25:24,000 --> 00:25:26,880
that but quick transport didn't worry

606
00:25:25,600 --> 00:25:28,879
them at all because they

607
00:25:26,880 --> 00:25:29,919
uh for the other cases because it's so

608
00:25:28,880 --> 00:25:31,600
simple it's like

609
00:25:29,919 --> 00:25:33,039
yeah we think this will enter very

610
00:25:31,600 --> 00:25:34,399
likely to inter-operate and

611
00:25:33,039 --> 00:25:36,240
be the kind of thing people could

612
00:25:34,400 --> 00:25:37,200
implement wildly but hp3 they weren't so

613
00:25:36,240 --> 00:25:40,320
sure

614
00:25:37,200 --> 00:25:42,000
um and then they went looking uh talking

615
00:25:40,320 --> 00:25:44,879
to their server vendors and they got

616
00:25:42,000 --> 00:25:46,159
some disturbing feedback which is that

617
00:25:44,880 --> 00:25:48,320
um

618
00:25:46,159 --> 00:25:50,640
most of the http 3 server vendors were

619
00:25:48,320 --> 00:25:52,399
not planning to implement http 3

620
00:25:50,640 --> 00:25:54,159
transport

621
00:25:52,400 --> 00:25:56,080
so that kind of meant if they were using

622
00:25:54,159 --> 00:25:58,559
a stock kind of a server

623
00:25:56,080 --> 00:26:00,720
they would have to implement their own

624
00:25:58,559 --> 00:26:03,039
server combination of http 3 and

625
00:26:00,720 --> 00:26:04,320
http transport probably within a

626
00:26:03,039 --> 00:26:05,919
framework and then

627
00:26:04,320 --> 00:26:07,918
for the folks who were using node they

628
00:26:05,919 --> 00:26:09,520
discovered oops i don't have a

629
00:26:07,919 --> 00:26:11,520
there's no quick module that's going to

630
00:26:09,520 --> 00:26:12,400
be available in any reasonable amount of

631
00:26:11,520 --> 00:26:14,720
time

632
00:26:12,400 --> 00:26:16,159
due to i guess some blocking issues with

633
00:26:14,720 --> 00:26:18,559
openssl

634
00:26:16,159 --> 00:26:20,559
and so they're kind of stuck with python

635
00:26:18,559 --> 00:26:21,760
and aio quick

636
00:26:20,559 --> 00:26:23,120
and for the people who are comfortable

637
00:26:21,760 --> 00:26:25,520
with python that wasn't a really big

638
00:26:23,120 --> 00:26:28,080
deal but if they weren't it was

639
00:26:25,520 --> 00:26:30,240
um and then they would ask questions

640
00:26:28,080 --> 00:26:32,399
like will http 3 transport be supported

641
00:26:30,240 --> 00:26:33,279
widely by cdns you know hard to answer

642
00:26:32,400 --> 00:26:35,679
that

643
00:26:33,279 --> 00:26:37,279
um and then there was a few folks doing

644
00:26:35,679 --> 00:26:38,799
this event streaming for like company

645
00:26:37,279 --> 00:26:41,200
events who are interested in enterprise

646
00:26:38,799 --> 00:26:43,120
and this got interesting

647
00:26:41,200 --> 00:26:44,320
because a lot of these enterprises they

648
00:26:43,120 --> 00:26:47,199
think of http

649
00:26:44,320 --> 00:26:48,720
2 http is the thing they use as a

650
00:26:47,200 --> 00:26:52,080
transport of last

651
00:26:48,720 --> 00:26:53,120
resort so you know a lot of enterprises

652
00:26:52,080 --> 00:26:55,520
they block udp

653
00:26:53,120 --> 00:26:57,840
traffic they don't even necessarily

654
00:26:55,520 --> 00:27:00,000
allow tcp on all ports

655
00:26:57,840 --> 00:27:01,678
uh and the problem is in these kind of

656
00:27:00,000 --> 00:27:03,520
an enterprise it's it's likely that

657
00:27:01,679 --> 00:27:06,159
quick wouldn't work

658
00:27:03,520 --> 00:27:08,080
um and so we talked a little bit and

659
00:27:06,159 --> 00:27:10,720
said well we can do this http 2

660
00:27:08,080 --> 00:27:12,879
failover and the problem there was if

661
00:27:10,720 --> 00:27:14,559
you're an enterprise that doesn't allow

662
00:27:12,880 --> 00:27:17,440
that's that tightly controlled you

663
00:27:14,559 --> 00:27:19,840
probably don't support http 2 either

664
00:27:17,440 --> 00:27:21,840
so it wasn't clear that http 2 transport

665
00:27:19,840 --> 00:27:23,279
would really help them much

666
00:27:21,840 --> 00:27:25,199
that this would this would help them

667
00:27:23,279 --> 00:27:26,640
with this enterprise problem

668
00:27:25,200 --> 00:27:29,200
things are very different from the folks

669
00:27:26,640 --> 00:27:30,480
who are more uh on the consumer side

670
00:27:29,200 --> 00:27:32,480
because they don't encounter a lot of

671
00:27:30,480 --> 00:27:34,559
these crazy firewalls

672
00:27:32,480 --> 00:27:36,240
but this was just something out there so

673
00:27:34,559 --> 00:27:38,960
a bunch of questions among the

674
00:27:36,240 --> 00:27:39,919
um customer base about http 3 transport

675
00:27:38,960 --> 00:27:42,080
and how

676
00:27:39,919 --> 00:27:44,320
um how much how much take-up it would

677
00:27:42,080 --> 00:27:46,840
get in the in the ecosystem

678
00:27:44,320 --> 00:27:49,840
um and also interoperability due to

679
00:27:46,840 --> 00:27:49,840
complexity

680
00:27:50,000 --> 00:27:54,080
okay are there any questions about this

681
00:27:52,720 --> 00:27:57,440
feedback before we jump

682
00:27:54,080 --> 00:27:58,000
to the next uh session let's drain the

683
00:27:57,440 --> 00:28:01,600
queue

684
00:27:58,000 --> 00:28:04,640
uh so i have a speaking notice well as

685
00:28:01,600 --> 00:28:05,439
chair i'll say one of our main goals for

686
00:28:04,640 --> 00:28:08,000
this session

687
00:28:05,440 --> 00:28:08,559
today oh sorry i forgot to enable the

688
00:28:08,000 --> 00:28:10,480
camera

689
00:28:08,559 --> 00:28:13,760
there we go one of our main goals for

690
00:28:10,480 --> 00:28:16,799
the session today is kind of

691
00:28:13,760 --> 00:28:17,760
getting out of the transport zoo um as

692
00:28:16,799 --> 00:28:20,720
we've been calling it

693
00:28:17,760 --> 00:28:22,240
uh making some decisions in terms of of

694
00:28:20,720 --> 00:28:23,679
all the possible transports we have

695
00:28:22,240 --> 00:28:25,600
which ones we want to actually

696
00:28:23,679 --> 00:28:27,520
like focus on and which ones we want to

697
00:28:25,600 --> 00:28:30,959
like work on

698
00:28:27,520 --> 00:28:33,200
um so but with all my chair hat on i

699
00:28:30,960 --> 00:28:34,159
have some clarification questions for

700
00:28:33,200 --> 00:28:37,200
luke

701
00:28:34,159 --> 00:28:40,320
um so uh yeah

702
00:28:37,200 --> 00:28:41,039
perfect cool um so the first one you

703
00:28:40,320 --> 00:28:43,760
mentioned

704
00:28:41,039 --> 00:28:46,240
that um you weren't interested in an h2

705
00:28:43,760 --> 00:28:49,120
fallback so just out of curiosity

706
00:28:46,240 --> 00:28:50,720
if on a network that blocks udp and

707
00:28:49,120 --> 00:28:53,279
quick

708
00:28:50,720 --> 00:28:53,760
what would you use instead or would you

709
00:28:53,279 --> 00:28:55,200
just say

710
00:28:53,760 --> 00:28:57,200
my feature doesn't work and that's also

711
00:28:55,200 --> 00:29:00,080
a reasonable option i'm just curious

712
00:28:57,200 --> 00:29:00,960
yeah so we we uh use hls for

713
00:29:00,080 --> 00:29:04,000
distribution

714
00:29:00,960 --> 00:29:05,840
um and we would fall back to hls as well

715
00:29:04,000 --> 00:29:09,279
for third party cdn support if

716
00:29:05,840 --> 00:29:11,279
our first party cdn is overwhelmed um

717
00:29:09,279 --> 00:29:13,360
so we're mostly looking for quick as

718
00:29:11,279 --> 00:29:15,600
kind of a uh

719
00:29:13,360 --> 00:29:17,039
extra functionality and if it doesn't

720
00:29:15,600 --> 00:29:19,600
work we'll just fall back to the

721
00:29:17,039 --> 00:29:20,559
you know the backup um that being said

722
00:29:19,600 --> 00:29:23,039
like we could

723
00:29:20,559 --> 00:29:26,000
technically do our approach with tcp but

724
00:29:23,039 --> 00:29:28,320
you just have fighting tcp flows um

725
00:29:26,000 --> 00:29:30,880
and requests so it's just easier to

726
00:29:28,320 --> 00:29:30,879
require quick

727
00:29:31,039 --> 00:29:35,520
well but i guess just the my question is

728
00:29:33,600 --> 00:29:37,520
you know if quick isn't there you need

729
00:29:35,520 --> 00:29:39,120
something you can't require quick

730
00:29:37,520 --> 00:29:40,879
because some users don't have access to

731
00:29:39,120 --> 00:29:42,559
it and so then it's either

732
00:29:40,880 --> 00:29:44,399
you have a fallback inside you know

733
00:29:42,559 --> 00:29:47,200
underneath the javascript layer

734
00:29:44,399 --> 00:29:48,719
like that could be h2 transport or you

735
00:29:47,200 --> 00:29:50,399
manually at your layer fall back to

736
00:29:48,720 --> 00:29:52,960
something else like hls i think they're

737
00:29:50,399 --> 00:29:56,158
both reasonable options i'm just

738
00:29:52,960 --> 00:29:57,360
oh so uh if we did h2 transport

739
00:29:56,159 --> 00:29:58,880
i think the performance would actually

740
00:29:57,360 --> 00:30:00,320
be worse than falling back to a

741
00:29:58,880 --> 00:30:04,320
different protocol

742
00:30:00,320 --> 00:30:05,678
um uh based on based on the the way

743
00:30:04,320 --> 00:30:07,279
we're prioritizing data

744
00:30:05,679 --> 00:30:08,880
because we expect the prioritization to

745
00:30:07,279 --> 00:30:10,320
take effect but if under the hood we're

746
00:30:08,880 --> 00:30:12,080
using tcp

747
00:30:10,320 --> 00:30:14,320
um and they're you know the kernel

748
00:30:12,080 --> 00:30:17,600
doesn't prioritize we're just gonna have

749
00:30:14,320 --> 00:30:19,279
more buffering it's a little hard to

750
00:30:17,600 --> 00:30:21,840
explain but

751
00:30:19,279 --> 00:30:23,440
yeah i heard that same uh approach david

752
00:30:21,840 --> 00:30:25,678
which is that they would just fall back

753
00:30:23,440 --> 00:30:28,000
to hls

754
00:30:25,679 --> 00:30:29,679
yeah no i think for especially for use

755
00:30:28,000 --> 00:30:33,200
cases that are already on the market

756
00:30:29,679 --> 00:30:34,320
or in production today uh with something

757
00:30:33,200 --> 00:30:35,760
it's natural to

758
00:30:34,320 --> 00:30:38,158
fall back to what they already have

759
00:30:35,760 --> 00:30:40,399
built today that makes sense

760
00:30:38,159 --> 00:30:42,240
cortex and then i had a second question

761
00:30:40,399 --> 00:30:45,439
for you luke which was

762
00:30:42,240 --> 00:30:47,600
you mentioned uh quick transport and

763
00:30:45,440 --> 00:30:49,200
preferring that to h3 transport

764
00:30:47,600 --> 00:30:51,360
you know one of the main questions we're

765
00:30:49,200 --> 00:30:54,799
trying to answer today is

766
00:30:51,360 --> 00:30:55,520
do we do we want to build one of them do

767
00:30:54,799 --> 00:30:57,360
we want to build

768
00:30:55,520 --> 00:30:58,879
both of them do we want to build neither

769
00:30:57,360 --> 00:31:00,399
i'm guessing it's not going to be the

770
00:30:58,880 --> 00:31:02,880
neither but

771
00:31:00,399 --> 00:31:04,479
in your case it sounds like you prefer

772
00:31:02,880 --> 00:31:06,399
quick transport if the working group

773
00:31:04,480 --> 00:31:08,159
were to decide to reach consensus that

774
00:31:06,399 --> 00:31:10,320
we only wanted to

775
00:31:08,159 --> 00:31:13,120
build h3 transport what would be your

776
00:31:10,320 --> 00:31:13,120
main objection

777
00:31:14,880 --> 00:31:19,120
i think you're still muted oh go ahead i

778
00:31:17,600 --> 00:31:20,480
saw it on the mailing list i've left

779
00:31:19,120 --> 00:31:23,760
some feedback but

780
00:31:20,480 --> 00:31:25,200
um it's really just h3 transport is more

781
00:31:23,760 --> 00:31:27,440
complicated to implement

782
00:31:25,200 --> 00:31:28,720
for in our case no benefit because our

783
00:31:27,440 --> 00:31:32,399
web server doesn't

784
00:31:28,720 --> 00:31:33,039
handle h3 requests it would only create

785
00:31:32,399 --> 00:31:36,320
this

786
00:31:33,039 --> 00:31:38,240
um web transport connection so it kind

787
00:31:36,320 --> 00:31:39,279
of seems redundant to also have h3

788
00:31:38,240 --> 00:31:41,200
support

789
00:31:39,279 --> 00:31:42,640
uh my my implementation doesn't even

790
00:31:41,200 --> 00:31:44,960
support h3

791
00:31:42,640 --> 00:31:47,760
um so it's more like do you is the

792
00:31:44,960 --> 00:31:51,519
complexity worth it and for us it's like

793
00:31:47,760 --> 00:31:53,039
no okay so from your perspective if i'm

794
00:31:51,519 --> 00:31:53,440
understanding correctly you're building

795
00:31:53,039 --> 00:31:56,240
your

796
00:31:53,440 --> 00:31:57,519
own stack from scratch and in that

797
00:31:56,240 --> 00:32:00,320
scenario

798
00:31:57,519 --> 00:32:02,480
having to also build h3 is more work for

799
00:32:00,320 --> 00:32:04,720
limited benefit if you're not

800
00:32:02,480 --> 00:32:06,240
the main value add would be pooling and

801
00:32:04,720 --> 00:32:08,640
if you're not using it you're having

802
00:32:06,240 --> 00:32:10,799
more complexity with less

803
00:32:08,640 --> 00:32:12,840
with no benefit cool thanks that makes

804
00:32:10,799 --> 00:32:16,799
sense

805
00:32:12,840 --> 00:32:19,360
and yeah also david for the

806
00:32:16,799 --> 00:32:20,639
um for the low latency streaming cases

807
00:32:19,360 --> 00:32:21,918
they liked the quick transfer because

808
00:32:20,640 --> 00:32:23,039
they could conceivably get the

809
00:32:21,919 --> 00:32:25,200
peer-to-peer

810
00:32:23,039 --> 00:32:27,760
without building an http 3 server into

811
00:32:25,200 --> 00:32:29,279
their browser or their backend so

812
00:32:27,760 --> 00:32:31,679
that's why they like the quick transport

813
00:32:29,279 --> 00:32:31,679
for those

814
00:32:37,360 --> 00:32:47,918
anyone else in the queue

815
00:32:43,440 --> 00:32:47,919
okay i think uh victor you're up

816
00:32:49,679 --> 00:32:56,080
um okay

817
00:32:53,039 --> 00:32:59,440
uh so i have

818
00:32:56,080 --> 00:33:03,360
uh my main question i guess is

819
00:32:59,440 --> 00:33:04,559
the so do i understand correctly that

820
00:33:03,360 --> 00:33:08,320
you serve

821
00:33:04,559 --> 00:33:11,720
uh directly video from

822
00:33:08,320 --> 00:33:12,960
there is no reverse proxy or any other

823
00:33:11,720 --> 00:33:15,120
intermediation

824
00:33:12,960 --> 00:33:16,320
in your use case because one of the

825
00:33:15,120 --> 00:33:19,918
reasons people

826
00:33:16,320 --> 00:33:23,120
are interested in http free transport

827
00:33:19,919 --> 00:33:26,159
uh is the

828
00:33:23,120 --> 00:33:28,639
for things like priorities uh you can

829
00:33:26,159 --> 00:33:31,440
not prioritize on your socket

830
00:33:28,640 --> 00:33:33,360
but if you have priorities that need to

831
00:33:31,440 --> 00:33:35,120
cross a reverse proxy

832
00:33:33,360 --> 00:33:37,279
you would have to communicate that and

833
00:33:35,120 --> 00:33:40,799
http provides that way

834
00:33:37,279 --> 00:33:43,120
so if you're using you if you do not

835
00:33:40,799 --> 00:33:46,720
have any form of reverse proxy in from

836
00:33:43,120 --> 00:33:50,239
your video server uh uh i guess you're

837
00:33:46,720 --> 00:33:50,240
not interested that's why i'm asking

838
00:33:51,279 --> 00:33:55,600
so we would we would use any form of h3

839
00:33:54,640 --> 00:33:57,760
prioritization

840
00:33:55,600 --> 00:33:58,959
as an alternative um but yeah we we

841
00:33:57,760 --> 00:34:02,399
right now have a

842
00:33:58,960 --> 00:34:03,679
uh we assign users to a host directly

843
00:34:02,399 --> 00:34:05,039
um if you go to twitch and look at the

844
00:34:03,679 --> 00:34:06,240
network tab you'll you'll see when you

845
00:34:05,039 --> 00:34:09,119
start a video session

846
00:34:06,240 --> 00:34:10,079
you're uh you're signed with a specific

847
00:34:09,119 --> 00:34:12,079
host name

848
00:34:10,079 --> 00:34:13,359
um and that host is then able to

849
00:34:12,079 --> 00:34:16,720
prioritize traffic

850
00:34:13,359 --> 00:34:18,319
um okay from two hosts then we couldn't

851
00:34:16,719 --> 00:34:22,078
do it

852
00:34:18,320 --> 00:34:24,000
oh okay and there is no direct

853
00:34:22,079 --> 00:34:26,159
is there it's a direct connection to the

854
00:34:24,000 --> 00:34:28,000
quick server in question

855
00:34:26,159 --> 00:34:29,359
yep yeah we don't have any uh load

856
00:34:28,000 --> 00:34:31,280
balancers we push

857
00:34:29,359 --> 00:34:33,279
a little too much data to have load

858
00:34:31,280 --> 00:34:35,280
balancers

859
00:34:33,280 --> 00:34:39,119
um we have an application load balancing

860
00:34:35,280 --> 00:34:39,119
tier kind of like out of band

861
00:34:43,440 --> 00:34:47,918
hey everyone the chairs completely

862
00:34:45,679 --> 00:34:48,560
messed up the q management here so uh

863
00:34:47,918 --> 00:34:51,359
hold on

864
00:34:48,560 --> 00:34:53,440
bernard let me handle the queue and uh

865
00:34:51,359 --> 00:34:56,000
so we have five more people in it

866
00:34:53,440 --> 00:34:57,200
uh well actually four ian sweat you're

867
00:34:56,000 --> 00:35:00,400
next

868
00:34:57,200 --> 00:35:03,598
cool um thank you david um

869
00:35:00,400 --> 00:35:06,800
so uh just fyi um i think that

870
00:35:03,599 --> 00:35:09,119
it's very likely that bbr2 would become

871
00:35:06,800 --> 00:35:12,800
the default congestion control and quick

872
00:35:09,119 --> 00:35:15,280
and q at the end of q1 uh 2021

873
00:35:12,800 --> 00:35:16,000
um is very close to done after a lot of

874
00:35:15,280 --> 00:35:18,240
work

875
00:35:16,000 --> 00:35:20,400
so i think i am fairly optimistic about

876
00:35:18,240 --> 00:35:21,839
that i do think that is in much better

877
00:35:20,400 --> 00:35:25,200
congestion controller than

878
00:35:21,839 --> 00:35:28,799
either bbr1 or cubic for

879
00:35:25,200 --> 00:35:30,879
um yes sorry victory clarified uh yes in

880
00:35:28,800 --> 00:35:32,720
the google quick slash chromium

881
00:35:30,880 --> 00:35:34,160
implementation i cannot guarantee it for

882
00:35:32,720 --> 00:35:36,240
anyone else obviously

883
00:35:34,160 --> 00:35:37,359
um but you know if you wanted to you can

884
00:35:36,240 --> 00:35:39,759
just like

885
00:35:37,359 --> 00:35:40,880
yank whatever we have at the end of q1

886
00:35:39,760 --> 00:35:43,359
um

887
00:35:40,880 --> 00:35:44,960
i highly support the direction of making

888
00:35:43,359 --> 00:35:47,598
a decision on these transports because i

889
00:35:44,960 --> 00:35:50,960
think moving forward is important

890
00:35:47,599 --> 00:35:53,119
on the fallback issue based on my

891
00:35:50,960 --> 00:35:54,320
discussions with youtube they also do

892
00:35:53,119 --> 00:35:57,520
not need a fallback

893
00:35:54,320 --> 00:35:58,480
to tcp because if they were to have a

894
00:35:57,520 --> 00:36:00,240
fallback

895
00:35:58,480 --> 00:36:02,640
they would actually prefer to use http

896
00:36:00,240 --> 00:36:05,759
1.1 and their current solution

897
00:36:02,640 --> 00:36:08,240
um and although that being said

898
00:36:05,760 --> 00:36:09,839
as long as they can say i only want to

899
00:36:08,240 --> 00:36:10,959
use quick transport if i actually get

900
00:36:09,839 --> 00:36:12,640
quick transport

901
00:36:10,960 --> 00:36:15,359
i think they would be happy to use quick

902
00:36:12,640 --> 00:36:17,680
transport so it's not that they're

903
00:36:15,359 --> 00:36:18,960
um because they're importing our stack

904
00:36:17,680 --> 00:36:21,118
anyway the cost of

905
00:36:18,960 --> 00:36:22,640
the implementation cost is low but the

906
00:36:21,119 --> 00:36:23,280
they would definitely not want to fall

907
00:36:22,640 --> 00:36:25,759
back to

908
00:36:23,280 --> 00:36:26,880
h2 transport they would only want to

909
00:36:25,760 --> 00:36:30,000
fall back to

910
00:36:26,880 --> 00:36:31,280
each one so as long as that

911
00:36:30,000 --> 00:36:33,040
functionality is preserved then i think

912
00:36:31,280 --> 00:36:35,359
we're all good

913
00:36:33,040 --> 00:36:35,359
thanks

914
00:36:36,240 --> 00:36:38,720
lucas

915
00:36:39,359 --> 00:36:45,040
hello can you hear me yes

916
00:36:43,040 --> 00:36:46,720
great uh thanks for the presentation

917
00:36:45,040 --> 00:36:48,640
luke uh it was good to see

918
00:36:46,720 --> 00:36:50,078
uh some more detail on on some of the

919
00:36:48,640 --> 00:36:51,839
stuff you've been working on

920
00:36:50,079 --> 00:36:54,560
i've been following some of the issues

921
00:36:51,839 --> 00:36:57,520
um some of those i experienced myself

922
00:36:54,560 --> 00:36:59,759
so i was playing with web transport um i

923
00:36:57,520 --> 00:37:00,800
basically borrowed heavily from google's

924
00:36:59,760 --> 00:37:03,680
example client

925
00:37:00,800 --> 00:37:05,119
code um but then wrote my own web

926
00:37:03,680 --> 00:37:08,240
transport server on top of

927
00:37:05,119 --> 00:37:09,119
ish and that was really an experiment to

928
00:37:08,240 --> 00:37:13,359
see

929
00:37:09,119 --> 00:37:13,359
for an existing stack how much wicked

930
00:37:13,839 --> 00:37:19,040
that obviously leverages datagram and so

931
00:37:16,960 --> 00:37:20,640
as when i started this work some of that

932
00:37:19,040 --> 00:37:22,160
was

933
00:37:20,640 --> 00:37:24,240
changes to the library to support

934
00:37:22,160 --> 00:37:25,759
datagram and i kind of expected web

935
00:37:24,240 --> 00:37:28,240
transport might

936
00:37:25,760 --> 00:37:29,280
take some changes to the library too but

937
00:37:28,240 --> 00:37:31,919
in the end

938
00:37:29,280 --> 00:37:32,560
it didn't i was able to just modify our

939
00:37:31,920 --> 00:37:36,640
example

940
00:37:32,560 --> 00:37:40,240
client and server to um

941
00:37:36,640 --> 00:37:43,920
speak quick transport let's say that way

942
00:37:40,240 --> 00:37:44,479
that was quite low impact uh i i suspect

943
00:37:43,920 --> 00:37:48,160
for me

944
00:37:44,480 --> 00:37:50,079
like adding hp3 transport to that

945
00:37:48,160 --> 00:37:52,640
toy server would have been quite simple

946
00:37:50,079 --> 00:37:54,880
too because all the existing http

947
00:37:52,640 --> 00:37:56,240
3 heavy lifting would have been there

948
00:37:54,880 --> 00:37:58,880
but then

949
00:37:56,240 --> 00:37:59,839
like the fact i didn't do that is maybe

950
00:37:58,880 --> 00:38:02,400
telling that

951
00:37:59,839 --> 00:38:04,320
it's kind of a bit superfluous again i

952
00:38:02,400 --> 00:38:07,119
didn't need connection pooling in this

953
00:38:04,320 --> 00:38:08,880
this toy example um all i was doing was

954
00:38:07,119 --> 00:38:09,920
echoing something back it's not as

955
00:38:08,880 --> 00:38:12,240
complicated as

956
00:38:09,920 --> 00:38:13,440
video streaming or anything but you can

957
00:38:12,240 --> 00:38:16,000
see how

958
00:38:13,440 --> 00:38:18,320
somebody who's coming kind of new into

959
00:38:16,000 --> 00:38:21,599
quick would want to do the easiest

960
00:38:18,320 --> 00:38:24,720
thing in maybe in some respect

961
00:38:21,599 --> 00:38:25,280
um so yeah i think some of the questions

962
00:38:24,720 --> 00:38:28,240
i had

963
00:38:25,280 --> 00:38:29,680
have been answered in terms of luke the

964
00:38:28,240 --> 00:38:31,680
the kind of

965
00:38:29,680 --> 00:38:33,919
what work did it take on the server side

966
00:38:31,680 --> 00:38:35,440
for you to to implement this stuff

967
00:38:33,920 --> 00:38:37,920
um but it seems that you're quite

968
00:38:35,440 --> 00:38:39,599
targeted towards this use case so i

969
00:38:37,920 --> 00:38:40,960
i think i already got the answer there

970
00:38:39,599 --> 00:38:44,400
um so

971
00:38:40,960 --> 00:38:46,079
yeah just cheers for sharing and i i do

972
00:38:44,400 --> 00:38:48,480
agree that it would be good

973
00:38:46,079 --> 00:38:49,280
for us to come to some answer on what

974
00:38:48,480 --> 00:38:52,160
people

975
00:38:49,280 --> 00:38:53,520
want from either quick transport or http

976
00:38:52,160 --> 00:39:00,399
3 transport and

977
00:38:53,520 --> 00:39:02,320
and how the the fallbacks all relate

978
00:39:00,400 --> 00:39:03,760
and you absolutely need to tell me where

979
00:39:02,320 --> 00:39:06,640
i can buy that hat

980
00:39:03,760 --> 00:39:06,640
uh eric kinnear

981
00:39:08,800 --> 00:39:15,040
really nice to have uh some more

982
00:39:12,240 --> 00:39:16,560
concrete uses of you know here's what

983
00:39:15,040 --> 00:39:18,400
i'm actually doing and how i need to

984
00:39:16,560 --> 00:39:21,200
send it and what that means

985
00:39:18,400 --> 00:39:22,240
um a couple of questions i had i think

986
00:39:21,200 --> 00:39:24,000
datagrams

987
00:39:22,240 --> 00:39:26,078
do have congestion control and you kind

988
00:39:24,000 --> 00:39:29,200
of spoke to that

989
00:39:26,079 --> 00:39:30,720
in contrast to the to the slides um and

990
00:39:29,200 --> 00:39:33,520
it seemed as though

991
00:39:30,720 --> 00:39:34,799
the not having control over that uh i

992
00:39:33,520 --> 00:39:36,560
don't want to say that's a feature

993
00:39:34,800 --> 00:39:38,000
not a bug but i thought one of the one

994
00:39:36,560 --> 00:39:39,279
of the benefits that we

995
00:39:38,000 --> 00:39:40,480
people had been talking about previously

996
00:39:39,280 --> 00:39:42,000
and it'd be really interesting to see if

997
00:39:40,480 --> 00:39:43,040
this holds up in practice or if it

998
00:39:42,000 --> 00:39:43,760
actually turns out that it's more

999
00:39:43,040 --> 00:39:46,640
annoying

1000
00:39:43,760 --> 00:39:48,880
than it is helpful is being able to

1001
00:39:46,640 --> 00:39:50,799
share that congestion control context

1002
00:39:48,880 --> 00:39:52,000
with the other data that you're

1003
00:39:50,800 --> 00:39:52,640
potentially sending to that same

1004
00:39:52,000 --> 00:39:55,520
endpoint

1005
00:39:52,640 --> 00:39:56,799
under the idea that much of that data is

1006
00:39:55,520 --> 00:39:59,040
almost certainly taking

1007
00:39:56,800 --> 00:40:00,000
the same if not a very similar route and

1008
00:39:59,040 --> 00:40:02,160
therefore

1009
00:40:00,000 --> 00:40:03,920
a congestion controller that can

1010
00:40:02,160 --> 00:40:05,440
appropriately manage the amount of data

1011
00:40:03,920 --> 00:40:07,119
that you're shoving through that pipe

1012
00:40:05,440 --> 00:40:08,640
is going to be happier than many

1013
00:40:07,119 --> 00:40:11,119
instances of congestion controllers that

1014
00:40:08,640 --> 00:40:12,799
are trying to achieve an equilibrium

1015
00:40:11,119 --> 00:40:15,040
um so it'd be really interesting to see

1016
00:40:12,800 --> 00:40:15,920
if we can find any data about that or or

1017
00:40:15,040 --> 00:40:17,599
if it's just

1018
00:40:15,920 --> 00:40:19,520
you know hey i've got a congestion

1019
00:40:17,599 --> 00:40:21,760
controller built into my thing

1020
00:40:19,520 --> 00:40:24,160
right now and so it's it's annoying to

1021
00:40:21,760 --> 00:40:25,760
have this mode where it's not there um

1022
00:40:24,160 --> 00:40:28,000
the only other thought that kind of

1023
00:40:25,760 --> 00:40:29,520
comes with that is about the application

1024
00:40:28,000 --> 00:40:30,480
layer acts i think folks were mentioning

1025
00:40:29,520 --> 00:40:33,680
in the chat

1026
00:40:30,480 --> 00:40:36,160
that it's uh in theory if you had an api

1027
00:40:33,680 --> 00:40:39,118
uh the datagrams are act and so if you

1028
00:40:36,160 --> 00:40:41,040
had an api that exposed that to you

1029
00:40:39,119 --> 00:40:42,560
you wouldn't need application layer x

1030
00:40:41,040 --> 00:40:43,839
anymore

1031
00:40:42,560 --> 00:40:46,078
and from that perspective if you're

1032
00:40:43,839 --> 00:40:48,160
doing your own quick implementation

1033
00:40:46,079 --> 00:40:50,160
that seems a lot harder to me than

1034
00:40:48,160 --> 00:40:51,359
either using someone else's quick or h3

1035
00:40:50,160 --> 00:40:52,960
implementation

1036
00:40:51,359 --> 00:40:54,319
but that might be one of those cases

1037
00:40:52,960 --> 00:40:56,240
where if you needed those acts to be

1038
00:40:54,319 --> 00:40:57,759
available and no implementation did it

1039
00:40:56,240 --> 00:41:00,160
that could drive you to doing a lot more

1040
00:40:57,760 --> 00:41:03,359
work so i think

1041
00:41:00,160 --> 00:41:06,640
if we can get a clearer picture on

1042
00:41:03,359 --> 00:41:09,279
the actual places that we need

1043
00:41:06,640 --> 00:41:11,279
certain features i think we have a long

1044
00:41:09,280 --> 00:41:12,880
list of pros and cons of each side

1045
00:41:11,280 --> 00:41:14,319
and we need to kind of figure out which

1046
00:41:12,880 --> 00:41:16,800
ones actually matter and which ones we

1047
00:41:14,319 --> 00:41:16,800
don't care about

1048
00:41:20,319 --> 00:41:23,839
we haven't gone down this route but one

1049
00:41:21,680 --> 00:41:27,279
of the problems with the control

1050
00:41:23,839 --> 00:41:28,880
with datagrams um is that you don't know

1051
00:41:27,280 --> 00:41:30,720
when the packets could be dropped by web

1052
00:41:28,880 --> 00:41:32,160
transport so you have to

1053
00:41:30,720 --> 00:41:34,560
implement your own congest control on

1054
00:41:32,160 --> 00:41:37,279
top and you kind of have almost like

1055
00:41:34,560 --> 00:41:39,279
uh two two algorithms and you take the

1056
00:41:37,280 --> 00:41:42,640
minimum of both of them so

1057
00:41:39,280 --> 00:41:44,800
if for example chrome is using bbr for

1058
00:41:42,640 --> 00:41:47,040
sending and then you're

1059
00:41:44,800 --> 00:41:49,040
using cubic on top of that to avoid

1060
00:41:47,040 --> 00:41:49,359
overwhelming the web transport api you

1061
00:41:49,040 --> 00:41:52,319
just

1062
00:41:49,359 --> 00:41:54,319
you have a really low throughput um so

1063
00:41:52,319 --> 00:41:56,960
it would be great to get the low level

1064
00:41:54,319 --> 00:41:58,560
either some back pressure or expose some

1065
00:41:56,960 --> 00:42:02,240
underlying state

1066
00:41:58,560 --> 00:42:03,759
uh and for the duplicate axe i i didn't

1067
00:42:02,240 --> 00:42:04,720
realize this until we talked about it on

1068
00:42:03,760 --> 00:42:06,960
github

1069
00:42:04,720 --> 00:42:08,959
um but because datagrams don't have flow

1070
00:42:06,960 --> 00:42:10,079
control there's definitely states where

1071
00:42:08,960 --> 00:42:13,760
the quick packet could be

1072
00:42:10,079 --> 00:42:16,640
act yet the datagram was actually never

1073
00:42:13,760 --> 00:42:18,800
delivered to the application um so i

1074
00:42:16,640 --> 00:42:21,520
don't think you can use the underlying

1075
00:42:18,800 --> 00:42:22,800
acts of the datagrams unfortunately

1076
00:42:21,520 --> 00:42:24,000
thank you

1077
00:42:22,800 --> 00:42:25,200
that's a that's a really good

1078
00:42:24,000 --> 00:42:27,839
distinction because i think the

1079
00:42:25,200 --> 00:42:29,759
reliability side of that is definitely

1080
00:42:27,839 --> 00:42:31,119
like if you had that signal then you

1081
00:42:29,760 --> 00:42:33,040
wouldn't have to build a second thing

1082
00:42:31,119 --> 00:42:34,560
but if there's a case where

1083
00:42:33,040 --> 00:42:36,720
it can be act and not delivered then

1084
00:42:34,560 --> 00:42:37,040
you've got a problem thank you yeah i

1085
00:42:36,720 --> 00:42:39,359
run

1086
00:42:37,040 --> 00:42:41,119
i ran into this with data channels uh

1087
00:42:39,359 --> 00:42:44,400
with webrtc as well with the

1088
00:42:41,119 --> 00:42:46,400
sctp um where i just wanted to reuse the

1089
00:42:44,400 --> 00:42:48,400
existing axe under the hood

1090
00:42:46,400 --> 00:42:50,800
um but i had to build my own on top of

1091
00:42:48,400 --> 00:42:54,160
it and it just caused double the packets

1092
00:42:50,800 --> 00:42:57,119
but it was unavoidable all right

1093
00:42:54,160 --> 00:42:57,680
uh sorry folks i cut the cue after alan

1094
00:42:57,119 --> 00:43:00,560
which i'm

1095
00:42:57,680 --> 00:43:02,000
hoping that everyone heard because i

1096
00:43:00,560 --> 00:43:02,799
wasn't sure i might have muted at the

1097
00:43:02,000 --> 00:43:07,680
time

1098
00:43:02,800 --> 00:43:09,040
um and uh daniel i see your videos on if

1099
00:43:07,680 --> 00:43:09,680
you want to speak please join the queue

1100
00:43:09,040 --> 00:43:12,800
using the

1101
00:43:09,680 --> 00:43:14,000
andreas thing uh or

1102
00:43:12,800 --> 00:43:16,240
oh you're just saying all right all

1103
00:43:14,000 --> 00:43:17,760
right cool sounds good um all right then

1104
00:43:16,240 --> 00:43:18,720
we're gonna go on to victor's next

1105
00:43:17,760 --> 00:43:21,520
presentation

1106
00:43:18,720 --> 00:43:22,399
and let's try to keep the conversation

1107
00:43:21,520 --> 00:43:24,000
or

1108
00:43:22,400 --> 00:43:25,599
the comments a little bit shorter now

1109
00:43:24,000 --> 00:43:26,640
because we are like running into our

1110
00:43:25,599 --> 00:43:28,319
time and we really want to make

1111
00:43:26,640 --> 00:43:28,879
decisions at the other meeting so thanks

1112
00:43:28,319 --> 00:43:32,960
everyone

1113
00:43:28,880 --> 00:43:32,960
and victor you're up

1114
00:43:36,319 --> 00:43:40,079
okay apparently i didn't configure the

1115
00:43:38,560 --> 00:43:43,440
camera in advance so

1116
00:43:40,079 --> 00:43:46,480
uh i'm sorry you can't see me but

1117
00:43:43,440 --> 00:43:49,040
i want to give an update on the

1118
00:43:46,480 --> 00:43:51,680
one draft we've actually adopted that's

1119
00:43:49,040 --> 00:43:54,640
the web transport overview draft

1120
00:43:51,680 --> 00:43:56,960
so the goal is roughly to sum up what

1121
00:43:54,640 --> 00:44:00,480
the requirements in web transport api

1122
00:43:56,960 --> 00:44:00,480
are and

1123
00:44:01,119 --> 00:44:05,839
what are the common properties and the

1124
00:44:03,359 --> 00:44:07,359
semantics we expect from web transfer

1125
00:44:05,839 --> 00:44:11,200
protocols

1126
00:44:07,359 --> 00:44:14,160
now the specific uh

1127
00:44:11,200 --> 00:44:15,839
this we adopted it it i presented it

1128
00:44:14,160 --> 00:44:18,240
last time and i think

1129
00:44:15,839 --> 00:44:20,078
we adopt we adopted it even before the

1130
00:44:18,240 --> 00:44:23,839
previous meeting but there is one big

1131
00:44:20,079 --> 00:44:23,839
update next slide

1132
00:44:24,560 --> 00:44:31,119
uh yeah it's just a reminder that like

1133
00:44:28,160 --> 00:44:31,520
there is a github repo and it has issues

1134
00:44:31,119 --> 00:44:35,040
and

1135
00:44:31,520 --> 00:44:37,119
i'm not sure we might want to set up

1136
00:44:35,040 --> 00:44:39,359
i don't believe we have like an

1137
00:44:37,119 --> 00:44:41,200
automated email to summarize all of the

1138
00:44:39,359 --> 00:44:44,240
issues but we should

1139
00:44:41,200 --> 00:44:47,279
uh but there is a github uh

1140
00:44:44,240 --> 00:44:48,959
repository for the tripo and it has some

1141
00:44:47,280 --> 00:44:50,480
issues which i discussed at the previous

1142
00:44:48,960 --> 00:44:53,119
meeting but

1143
00:44:50,480 --> 00:44:53,599
there is a new pull request that i wrote

1144
00:44:53,119 --> 00:44:55,760
and

1145
00:44:53,599 --> 00:44:58,960
that's the request which relates to the

1146
00:44:55,760 --> 00:45:03,280
idea of headers next slide

1147
00:44:58,960 --> 00:45:05,040
so out of proposed transport the two

1148
00:45:03,280 --> 00:45:08,240
transport already have headers

1149
00:45:05,040 --> 00:45:10,319
h2 transport and h3 transport naturally

1150
00:45:08,240 --> 00:45:11,279
had http headers and we were just using

1151
00:45:10,319 --> 00:45:14,240
those

1152
00:45:11,280 --> 00:45:14,240
so h

1153
00:45:14,319 --> 00:45:21,359
so quick transport first didn't have

1154
00:45:17,440 --> 00:45:22,560
any headers uh and we had some clever

1155
00:45:21,359 --> 00:45:25,359
tricks to get

1156
00:45:22,560 --> 00:45:26,240
away with not sending them that did not

1157
00:45:25,359 --> 00:45:30,119
work

1158
00:45:26,240 --> 00:45:32,959
uh then we added a very bespoke

1159
00:45:30,119 --> 00:45:35,440
unidirectional header format called

1160
00:45:32,960 --> 00:45:36,880
client indication and that is what's

1161
00:45:35,440 --> 00:45:41,760
currently in the chrome

1162
00:45:36,880 --> 00:45:44,319
uh implementation in the origin trial

1163
00:45:41,760 --> 00:45:45,119
and in the latest revision of the draft

1164
00:45:44,319 --> 00:45:47,200
which is still

1165
00:45:45,119 --> 00:45:49,359
yet to upload because i also need to

1166
00:45:47,200 --> 00:45:52,960
solve some issues with error handling

1167
00:45:49,359 --> 00:45:54,000
there are actual fully featured headers

1168
00:45:52,960 --> 00:45:57,599
which i tried

1169
00:45:54,000 --> 00:45:59,599
to basically replicate the

1170
00:45:57,599 --> 00:46:01,119
http fields where there was an

1171
00:45:59,599 --> 00:46:04,720
equivalent http field

1172
00:46:01,119 --> 00:46:07,359
and there is but that's uh uh the fields

1173
00:46:04,720 --> 00:46:08,640
defined our origins here authority path

1174
00:46:07,359 --> 00:46:11,920
status

1175
00:46:08,640 --> 00:46:14,560
uh and the proposal

1176
00:46:11,920 --> 00:46:15,920
is that since all of the proposed

1177
00:46:14,560 --> 00:46:19,279
transports

1178
00:46:15,920 --> 00:46:22,960
uh have those headers we should

1179
00:46:19,280 --> 00:46:24,240
expose we should define those headers as

1180
00:46:22,960 --> 00:46:27,599
a shared property

1181
00:46:24,240 --> 00:46:29,680
of any transport that's web transport

1182
00:46:27,599 --> 00:46:31,440
just like having streams and having

1183
00:46:29,680 --> 00:46:34,560
datagrams and having

1184
00:46:31,440 --> 00:46:36,079
origin chat is a shared property and i

1185
00:46:34,560 --> 00:46:38,640
wrote up a pull request

1186
00:46:36,079 --> 00:46:39,599
and everyone is welcome to review and

1187
00:46:38,640 --> 00:46:42,319
comment it

1188
00:46:39,599 --> 00:46:44,079
and that's basically all of the updates

1189
00:46:42,319 --> 00:46:57,839
from the very draft

1190
00:46:44,079 --> 00:46:57,839
uh anyone has any questions or comments

1191
00:47:02,800 --> 00:47:08,960
well thank you victor that was

1192
00:47:05,640 --> 00:47:11,920
incredibly fast

1193
00:47:08,960 --> 00:47:13,040
that really brought us back to uh the

1194
00:47:11,920 --> 00:47:16,480
agenda time

1195
00:47:13,040 --> 00:47:19,599
yeah um i'm getting reports

1196
00:47:16,480 --> 00:47:21,839
from a bunch of people that

1197
00:47:19,599 --> 00:47:23,440
medico is going through some serious

1198
00:47:21,839 --> 00:47:26,640
technical issues

1199
00:47:23,440 --> 00:47:28,319
um if you're

1200
00:47:26,640 --> 00:47:29,839
trying to speak or join the queue and

1201
00:47:28,319 --> 00:47:31,759
it's not working please like

1202
00:47:29,839 --> 00:47:33,119
say oh i was gonna say say so in the

1203
00:47:31,760 --> 00:47:35,440
jabber but apparently

1204
00:47:33,119 --> 00:47:39,839
the meet echo chat is busted as well go

1205
00:47:35,440 --> 00:47:39,839
ahead lucas

1206
00:47:41,200 --> 00:47:44,399
uh yeah so my my hat's available for

1207
00:47:43,920 --> 00:47:47,040
free

1208
00:47:44,400 --> 00:47:48,800
on the snapchat filter thing uh i'll

1209
00:47:47,040 --> 00:47:51,759
send links around later

1210
00:47:48,800 --> 00:47:53,359
but the serious point um victor uh just

1211
00:47:51,760 --> 00:47:54,640
a question about this change i just

1212
00:47:53,359 --> 00:47:58,240
wonder if

1213
00:47:54,640 --> 00:47:59,839
um depending on the direction of like

1214
00:47:58,240 --> 00:48:01,439
whether people want quick transport and

1215
00:47:59,839 --> 00:48:04,720
not the rest of them if

1216
00:48:01,440 --> 00:48:06,559
if this proposal is still like the thing

1217
00:48:04,720 --> 00:48:09,200
you think is the best option

1218
00:48:06,559 --> 00:48:09,760
um but so it's gonna be http style even

1219
00:48:09,200 --> 00:48:13,279
if

1220
00:48:09,760 --> 00:48:21,839
we don't use the http style transport

1221
00:48:13,280 --> 00:48:21,839
i wondered if you could clarify please

1222
00:48:40,480 --> 00:48:43,760
i'm sorry i kind of misheard the end of

1223
00:48:42,559 --> 00:48:45,520
that uh

1224
00:48:43,760 --> 00:48:47,359
question was that aimed at me or at

1225
00:48:45,520 --> 00:48:51,119
someone else

1226
00:48:47,359 --> 00:48:53,440
uh victor okay that's what i thought

1227
00:48:51,119 --> 00:48:53,440
victor

1228
00:49:00,480 --> 00:49:03,839
it appears the doctor is dropped off the

1229
00:49:02,480 --> 00:49:06,880
list

1230
00:49:03,839 --> 00:49:08,640
list uh oh yeah and he's sending me

1231
00:49:06,880 --> 00:49:10,880
messages on chats saying that he can't

1232
00:49:08,640 --> 00:49:16,960
get into medical anymore

1233
00:49:10,880 --> 00:49:19,119
um it's okay

1234
00:49:16,960 --> 00:49:20,960
uh yes thanks lucas please bring it to

1235
00:49:19,119 --> 00:49:24,240
the list or ideally even an issue

1236
00:49:20,960 --> 00:49:28,160
uh and we'll we'll get that sorted um

1237
00:49:24,240 --> 00:49:31,279
yeah that's not great um

1238
00:49:28,160 --> 00:49:35,040
all right i think we'll move on to

1239
00:49:31,280 --> 00:49:38,480
eric's presentation so what i'm getting

1240
00:49:35,040 --> 00:49:40,079
from folks is apparently j if you

1241
00:49:38,480 --> 00:49:42,559
you're in meet echo now and you can hear

1242
00:49:40,079 --> 00:49:44,079
us don't touch anything it'll keep

1243
00:49:42,559 --> 00:49:45,839
working but if you refresh or anything

1244
00:49:44,079 --> 00:49:51,680
you won't be able to get back in

1245
00:49:45,839 --> 00:49:51,680
so um all right um eric if you wanna

1246
00:49:51,920 --> 00:50:01,119
uh join uh audio and video

1247
00:49:59,040 --> 00:50:02,558
oh i don't see eric in the participant

1248
00:50:01,119 --> 00:50:06,480
list anymore

1249
00:50:02,559 --> 00:50:06,480
uh okay um

1250
00:50:06,640 --> 00:50:14,799
well this is a mess um

1251
00:50:11,280 --> 00:50:18,000
do you want me to talk to the h2 slides

1252
00:50:14,800 --> 00:50:19,680
uh so that's an option

1253
00:50:18,000 --> 00:50:21,359
uh yeah because i was gonna say we could

1254
00:50:19,680 --> 00:50:22,960
also do the next presentation then come

1255
00:50:21,359 --> 00:50:26,558
back but if victor's gone

1256
00:50:22,960 --> 00:50:30,079
we can't do that so

1257
00:50:26,559 --> 00:50:31,760
yeah let me um yeah let's do that out

1258
00:50:30,079 --> 00:50:33,520
and if you can uh

1259
00:50:31,760 --> 00:50:35,599
uh yeah i haven't practiced but i'll try

1260
00:50:33,520 --> 00:50:37,680
to keep it short yeah

1261
00:50:35,599 --> 00:50:39,200
all right cool awesome thanks so eric

1262
00:50:37,680 --> 00:50:39,839
was saying that it was pretty short and

1263
00:50:39,200 --> 00:50:42,960
then you

1264
00:50:39,839 --> 00:50:45,520
yeah go ahead okay go ahead and roll to

1265
00:50:42,960 --> 00:50:45,520
the next slide

1266
00:50:45,760 --> 00:50:49,359
uh yeah next one

1267
00:50:50,880 --> 00:50:55,280
okay so uh we'll just give what's been

1268
00:50:53,599 --> 00:50:57,920
going on since the last itf

1269
00:50:55,280 --> 00:50:58,319
uh there's um some github issues have

1270
00:50:57,920 --> 00:50:59,599
been

1271
00:50:58,319 --> 00:51:01,520
filed and a little bit of discussion

1272
00:50:59,599 --> 00:51:04,480
there's some outstanding prs

1273
00:51:01,520 --> 00:51:06,079
um and basically all of hq transport is

1274
00:51:04,480 --> 00:51:08,640
kind of in a holding pattern waiting for

1275
00:51:06,079 --> 00:51:10,800
the working group to move forward on

1276
00:51:08,640 --> 00:51:12,879
what are we doing with http in general

1277
00:51:10,800 --> 00:51:14,400
uh because h2 is definitely

1278
00:51:12,880 --> 00:51:16,559
you know sort of the last on the packing

1279
00:51:14,400 --> 00:51:17,839
order uh in terms of transport so we're

1280
00:51:16,559 --> 00:51:19,599
not going to do http at all we're not

1281
00:51:17,839 --> 00:51:23,839
going to do http 2.

1282
00:51:19,599 --> 00:51:23,839
next slide

1283
00:51:24,160 --> 00:51:27,279
uh okay so one of the issues uh in the

1284
00:51:26,400 --> 00:51:28,880
draft was about

1285
00:51:27,280 --> 00:51:30,720
uh the original draft didn't mention

1286
00:51:28,880 --> 00:51:32,480
unidirectional stream support

1287
00:51:30,720 --> 00:51:34,240
uh and a question about whether we want

1288
00:51:32,480 --> 00:51:36,400
to uh

1289
00:51:34,240 --> 00:51:37,839
sort of have streams that are half

1290
00:51:36,400 --> 00:51:40,000
closed by specification

1291
00:51:37,839 --> 00:51:41,759
or just sort of have you know

1292
00:51:40,000 --> 00:51:43,839
bi-directional streams where

1293
00:51:41,760 --> 00:51:45,520
you know it's the one side just doesn't

1294
00:51:43,839 --> 00:51:48,720
send and i think

1295
00:51:45,520 --> 00:51:49,040
uh this next slide just talks about like

1296
00:51:48,720 --> 00:51:50,799
the

1297
00:51:49,040 --> 00:51:52,720
proposed uh pr and there's like

1298
00:51:50,800 --> 00:51:54,559
basically adding a a flag kind of like

1299
00:51:52,720 --> 00:51:57,118
speedy had which was like

1300
00:51:54,559 --> 00:51:58,400
just starts uh one half and the half

1301
00:51:57,119 --> 00:52:02,319
closed date

1302
00:51:58,400 --> 00:52:05,920
um and this kind of maps to the way uh

1303
00:52:02,319 --> 00:52:08,480
quick streams work more naturally

1304
00:52:05,920 --> 00:52:08,480
next slide

1305
00:52:10,480 --> 00:52:14,240
there's an issue open uh about being

1306
00:52:12,480 --> 00:52:16,160
able to um

1307
00:52:14,240 --> 00:52:18,240
open streams that additional round trips

1308
00:52:16,160 --> 00:52:21,040
uh for people who might need a refresher

1309
00:52:18,240 --> 00:52:23,040
so that h2 and h3 drafts

1310
00:52:21,040 --> 00:52:24,480
because they can multiplex multiple web

1311
00:52:23,040 --> 00:52:25,440
transport sessions on the same

1312
00:52:24,480 --> 00:52:27,599
connection

1313
00:52:25,440 --> 00:52:28,720
they're sort of one step where you're

1314
00:52:27,599 --> 00:52:30,319
sending uh

1315
00:52:28,720 --> 00:52:32,078
you're opening a stream that's defining

1316
00:52:30,319 --> 00:52:34,640
your session and then

1317
00:52:32,079 --> 00:52:35,440
you're opening additional streams that

1318
00:52:34,640 --> 00:52:37,520
are

1319
00:52:35,440 --> 00:52:38,480
uh kind of hanging off that session and

1320
00:52:37,520 --> 00:52:40,640
so uh

1321
00:52:38,480 --> 00:52:41,920
there's just an open issue to discuss

1322
00:52:40,640 --> 00:52:43,200
like is there a way to do that in one

1323
00:52:41,920 --> 00:52:46,400
round trip can you

1324
00:52:43,200 --> 00:52:48,240
um hang can can you send uh

1325
00:52:46,400 --> 00:52:49,920
the new web transport streams

1326
00:52:48,240 --> 00:52:51,200
referencing the connect stream

1327
00:52:49,920 --> 00:52:52,400
before you've received acknowledgement

1328
00:52:51,200 --> 00:52:54,319
from the other side that it's going to

1329
00:52:52,400 --> 00:52:58,000
that the handshake is going to succeed

1330
00:52:54,319 --> 00:53:00,079
um and uh

1331
00:52:58,000 --> 00:53:01,760
the there's sort of an interesting

1332
00:53:00,079 --> 00:53:05,599
interaction with h3 here because

1333
00:53:01,760 --> 00:53:07,359
h3 uh the streams could also arrive out

1334
00:53:05,599 --> 00:53:10,079
of order in h2 they can't

1335
00:53:07,359 --> 00:53:11,520
uh so you could end up the receiver can

1336
00:53:10,079 --> 00:53:14,480
end up with an h3

1337
00:53:11,520 --> 00:53:15,200
street if we allowed this the h3 draft

1338
00:53:14,480 --> 00:53:17,359
you could

1339
00:53:15,200 --> 00:53:19,200
end up with a web transport stream that

1340
00:53:17,359 --> 00:53:20,078
has no session established for it yet if

1341
00:53:19,200 --> 00:53:21,279
you were trying to do it in a single

1342
00:53:20,079 --> 00:53:21,920
round trip so i think this issue is

1343
00:53:21,280 --> 00:53:25,200
still open

1344
00:53:21,920 --> 00:53:28,720
we have any proposed resolution for it

1345
00:53:25,200 --> 00:53:30,720
next slide

1346
00:53:28,720 --> 00:53:32,399
um datagrams there's still not a

1347
00:53:30,720 --> 00:53:34,959
definition of what exactly the

1348
00:53:32,400 --> 00:53:36,240
datagram support looks like in h2

1349
00:53:34,960 --> 00:53:37,839
transport again we're not working on it

1350
00:53:36,240 --> 00:53:40,078
hard because we're waiting for

1351
00:53:37,839 --> 00:53:41,520
a nod from the working group here uh i

1352
00:53:40,079 --> 00:53:45,040
think on the issue

1353
00:53:41,520 --> 00:53:47,680
i proposed a strawman h2 frame

1354
00:53:45,040 --> 00:53:48,880
uh that we could use to transmit

1355
00:53:47,680 --> 00:53:51,520
datagrams that would be perfectly

1356
00:53:48,880 --> 00:53:51,520
serviceable

1357
00:53:52,319 --> 00:54:02,960
next slide

1358
00:53:56,880 --> 00:54:02,960
uh okay yeah i've covered all that next

1359
00:54:07,359 --> 00:54:11,680
okay i haven't read the slide yet so

1360
00:54:09,040 --> 00:54:13,920
give me a second

1361
00:54:11,680 --> 00:54:15,680
i mean i think and this will just maybe

1362
00:54:13,920 --> 00:54:18,640
feed into the broader discussion about

1363
00:54:15,680 --> 00:54:19,440
http versus quick transport so you know

1364
00:54:18,640 --> 00:54:22,160
the http

1365
00:54:19,440 --> 00:54:23,599
transports you know have this feature

1366
00:54:22,160 --> 00:54:25,118
where you can multiplex the sessions

1367
00:54:23,599 --> 00:54:26,400
right whereas quick transport doesn't

1368
00:54:25,119 --> 00:54:30,559
have that feature so

1369
00:54:26,400 --> 00:54:30,559
if you want to have you know multiple

1370
00:54:30,720 --> 00:54:34,000
column web transport sessions with quick

1371
00:54:32,720 --> 00:54:35,279
transport you have to open multiple

1372
00:54:34,000 --> 00:54:36,319
connections each one's sort of

1373
00:54:35,280 --> 00:54:38,319
independent

1374
00:54:36,319 --> 00:54:39,440
um and i you know i hear people saying

1375
00:54:38,319 --> 00:54:42,720
complexity

1376
00:54:39,440 --> 00:54:44,160
uh around uh the h3 draft and

1377
00:54:42,720 --> 00:54:46,160
i'm trying to like put my finger on what

1378
00:54:44,160 --> 00:54:49,598
is the complexity there

1379
00:54:46,160 --> 00:54:51,520
and uh one aspect that one aspect of it

1380
00:54:49,599 --> 00:54:53,280
is this sort of

1381
00:54:51,520 --> 00:54:54,720
being able to to pool or multiplex

1382
00:54:53,280 --> 00:54:56,720
multiple sessions together

1383
00:54:54,720 --> 00:54:58,720
uh obviously h3 has just you know some

1384
00:54:56,720 --> 00:54:59,520
additional complexity some of it i think

1385
00:54:58,720 --> 00:55:01,520
is trivial

1386
00:54:59,520 --> 00:55:03,440
and some of it i think you know like for

1387
00:55:01,520 --> 00:55:07,119
example you know q-pack or

1388
00:55:03,440 --> 00:55:08,480
headers is like non-trivial um so anyway

1389
00:55:07,119 --> 00:55:10,640
you know the ability to traverse

1390
00:55:08,480 --> 00:55:13,599
intermediaries uh

1391
00:55:10,640 --> 00:55:14,960
using these uh you know session streams

1392
00:55:13,599 --> 00:55:16,480
and multiplex together i think is one of

1393
00:55:14,960 --> 00:55:20,079
the sort of key differentiators between

1394
00:55:16,480 --> 00:55:21,520
the http world and non-http world next

1395
00:55:20,079 --> 00:55:24,640
slide

1396
00:55:21,520 --> 00:55:28,400
i think that's it point of order as

1397
00:55:24,640 --> 00:55:28,879
a chair i have been informed by the ietf

1398
00:55:28,400 --> 00:55:33,040
chair

1399
00:55:28,880 --> 00:55:34,559
that the data tracker authentication vm

1400
00:55:33,040 --> 00:55:37,440
completely fell over and they're gonna

1401
00:55:34,559 --> 00:55:39,280
reboot it but it means that it's gonna

1402
00:55:37,440 --> 00:55:41,200
at some point it's gonna kick everyone

1403
00:55:39,280 --> 00:55:42,880
out of the meeting it's gonna take two

1404
00:55:41,200 --> 00:55:44,480
minutes to reboot and then you're all

1405
00:55:42,880 --> 00:55:47,359
gonna be able to join again

1406
00:55:44,480 --> 00:55:49,040
so i'm gonna say like keep let's keep

1407
00:55:47,359 --> 00:55:50,160
going let's keep talking but if you're

1408
00:55:49,040 --> 00:55:53,440
kicked out

1409
00:55:50,160 --> 00:55:55,440
uh go make yourself a beverage and

1410
00:55:53,440 --> 00:55:57,760
come back in a few minutes and we'll

1411
00:55:55,440 --> 00:56:00,160
resume hopefully it'll be good so

1412
00:55:57,760 --> 00:56:02,880
but otherwise yeah keep going on let's

1413
00:56:00,160 --> 00:56:04,399
do it

1414
00:56:02,880 --> 00:56:06,079
uh okay i'll take questions if anybody

1415
00:56:04,400 --> 00:56:07,839
wants to talk about h2 but i kind of

1416
00:56:06,079 --> 00:56:08,640
recommend that it's we should move on to

1417
00:56:07,839 --> 00:56:10,960
h3 and

1418
00:56:08,640 --> 00:56:12,400
frame most of it in terms of where are

1419
00:56:10,960 --> 00:56:13,839
we going to transport wise i don't think

1420
00:56:12,400 --> 00:56:14,480
arguing about the details of h2 is

1421
00:56:13,839 --> 00:56:17,839
important

1422
00:56:14,480 --> 00:56:17,839
right now

1423
00:56:26,559 --> 00:56:45,839
the queue is open if

1424
00:56:29,680 --> 00:56:45,839
anyone is still in here

1425
00:56:46,559 --> 00:56:52,880
go ahead daniel uh so you

1426
00:56:50,079 --> 00:56:53,200
enable your microphone by clicking the

1427
00:56:52,880 --> 00:56:58,240
uh

1428
00:56:53,200 --> 00:57:01,598
unmute audio button can you hear me now

1429
00:56:58,240 --> 00:57:03,200
no yes oh okay great

1430
00:57:01,599 --> 00:57:05,760
yeah i was just wondering i'm sure i

1431
00:57:03,200 --> 00:57:08,000
misunderstood but i i thought

1432
00:57:05,760 --> 00:57:09,920
okay so quick transport has multiplex

1433
00:57:08,000 --> 00:57:12,000
streaming

1434
00:57:09,920 --> 00:57:13,839
um is that is that not the case so i

1435
00:57:12,000 --> 00:57:16,799
mean that is definitely the case i just

1436
00:57:13,839 --> 00:57:19,119
didn't understand in terms of https

1437
00:57:16,799 --> 00:57:21,839
so quick transport allows you to have

1438
00:57:19,119 --> 00:57:23,920
multiple streams on one connection

1439
00:57:21,839 --> 00:57:25,759
but it only allows you to specify a

1440
00:57:23,920 --> 00:57:29,760
single web transport

1441
00:57:25,760 --> 00:57:32,559
uri whereas h2 and h3 transports

1442
00:57:29,760 --> 00:57:34,079
let you open multiple sessions within

1443
00:57:32,559 --> 00:57:37,359
the same connection

1444
00:57:34,079 --> 00:57:39,920
using different web transport uris and

1445
00:57:37,359 --> 00:57:41,680
directing subgroups of streams towards

1446
00:57:39,920 --> 00:57:42,559
these different virtual sessions within

1447
00:57:41,680 --> 00:57:44,640
the connection

1448
00:57:42,559 --> 00:57:46,079
i think that's um like i said i think

1449
00:57:44,640 --> 00:57:48,160
it's a key difference between the sort

1450
00:57:46,079 --> 00:57:51,119
of two transport worlds and i think

1451
00:57:48,160 --> 00:57:52,480
um it's also where some people i think

1452
00:57:51,119 --> 00:57:54,000
that's where some of the complexity that

1453
00:57:52,480 --> 00:57:55,359
people point to h3 or h2

1454
00:57:54,000 --> 00:58:09,839
and say oh it's complex i think that's

1455
00:57:55,359 --> 00:58:09,839
where some of it's coming from

1456
01:00:07,200 --> 01:00:11,200
uh testing can anyone hear me it sounds

1457
01:00:10,480 --> 01:00:15,839
like we're

1458
01:00:11,200 --> 01:00:15,839
somewhat back yes

1459
01:00:16,240 --> 01:00:20,959
great um

1460
01:00:18,190 --> 01:00:24,880
[Music]

1461
01:00:20,960 --> 01:00:24,880
yeah well this is not ideal

1462
01:00:27,520 --> 01:00:30,319
but um got kicked out did you get an

1463
01:00:29,119 --> 01:00:31,040
answer to your question or would you

1464
01:00:30,319 --> 01:00:33,359
like me to

1465
01:00:31,040 --> 01:00:34,720
repeat i did i did as soon as as soon as

1466
01:00:33,359 --> 01:00:37,119
i heard uh uris

1467
01:00:34,720 --> 01:00:39,520
i i understood we do not have i see i'm

1468
01:00:37,119 --> 01:00:41,280
a transports person

1469
01:00:39,520 --> 01:00:43,119
so i'm like what do you mean we don't

1470
01:00:41,280 --> 01:00:44,240
have multiplexing we multiplexed the

1471
01:00:43,119 --> 01:00:46,720
streams in quick

1472
01:00:44,240 --> 01:00:49,680
but we do not have uris so that that was

1473
01:00:46,720 --> 01:00:49,680
that was the confusion

1474
01:00:54,839 --> 01:00:59,599
great

1475
01:00:56,240 --> 01:01:01,520
right um eric kinnear since you were

1476
01:00:59,599 --> 01:01:03,680
gonna give this presentation

1477
01:01:01,520 --> 01:01:07,759
and uh i'll ended up doing it is there

1478
01:01:03,680 --> 01:01:07,759
anything you want to add by any chance

1479
01:01:07,920 --> 01:01:13,280
yeah mostly just a thank you column

1480
01:01:13,440 --> 01:01:17,280
um thank you alan i don't think there's

1481
01:01:15,359 --> 01:01:18,720
anything else major tad i think

1482
01:01:17,280 --> 01:01:20,960
a really nice job of covering a lot of

1483
01:01:18,720 --> 01:01:24,000
this um in terms of

1484
01:01:20,960 --> 01:01:26,480
other other items

1485
01:01:24,000 --> 01:01:26,480
in here

1486
01:01:29,040 --> 01:01:32,160
there's intermediary stuff we talked a

1487
01:01:31,200 --> 01:01:33,439
little bit about that

1488
01:01:32,160 --> 01:01:35,839
i think the main thing is just can we

1489
01:01:33,440 --> 01:01:39,839
leave the zoo and can we actually

1490
01:01:35,839 --> 01:01:39,839
make a decision

1491
01:01:45,760 --> 01:01:50,400
thanks eric do we have any and seriously

1492
01:01:48,960 --> 01:01:53,040
thanks alan for

1493
01:01:50,400 --> 01:01:53,599
stepping in uh eric can probably meet

1494
01:01:53,040 --> 01:01:57,359
echo

1495
01:01:53,599 --> 01:01:57,359
both oh alan and beer

1496
01:01:57,760 --> 01:02:02,640
daniel the question uh yes what exactly

1497
01:02:01,680 --> 01:02:06,240
does it mean uh

1498
01:02:02,640 --> 01:02:09,839
leave the transport zoo oh

1499
01:02:06,240 --> 01:02:12,879
the uh no worries

1500
01:02:09,839 --> 01:02:14,480
it was at a previous web session that we

1501
01:02:12,880 --> 01:02:15,680
have all these transports that we're

1502
01:02:14,480 --> 01:02:17,680
trying to figure out

1503
01:02:15,680 --> 01:02:18,720
which ones we should build and i think

1504
01:02:17,680 --> 01:02:20,720
victor

1505
01:02:18,720 --> 01:02:22,160
called it the the big transport zoo the

1506
01:02:20,720 --> 01:02:23,919
first time and so

1507
01:02:22,160 --> 01:02:25,520
now the running joke is let's get out of

1508
01:02:23,920 --> 01:02:27,440
the zoo

1509
01:02:25,520 --> 01:02:29,520
okay so when you figure out whether it's

1510
01:02:27,440 --> 01:02:32,640
going to be h3 transport h2

1511
01:02:29,520 --> 01:02:35,599
transport uh tcp transport udp

1512
01:02:32,640 --> 01:02:36,400
transporter or whichever set of that

1513
01:02:35,599 --> 01:02:38,319
it's going to be

1514
01:02:36,400 --> 01:02:39,760
then we will be out of the transport

1515
01:02:38,319 --> 01:02:42,400
suit

1516
01:02:39,760 --> 01:02:43,039
exactly it's so the main question is

1517
01:02:42,400 --> 01:02:44,880
saying

1518
01:02:43,039 --> 01:02:46,880
which of these do we need which of these

1519
01:02:44,880 --> 01:02:48,480
should we build and like in what order

1520
01:02:46,880 --> 01:02:50,240
and we're hoping we have some time at

1521
01:02:48,480 --> 01:02:52,240
the end of the session uh tonight

1522
01:02:50,240 --> 01:02:54,879
uh that we're hoping to really answer

1523
01:02:52,240 --> 01:02:54,879
these questions

1524
01:02:55,839 --> 01:02:58,880
all right any of course yeah and i

1525
01:02:58,480 --> 01:03:02,160
should

1526
01:02:58,880 --> 01:03:05,920
i've clarified that my apologies um

1527
01:03:02,160 --> 01:03:11,038
any further questions on h2

1528
01:03:05,920 --> 01:03:14,839
or should we move on to h3

1529
01:03:11,039 --> 01:03:17,520
all right let's move on uh is victor

1530
01:03:14,839 --> 01:03:18,880
back yes i see victor in the participant

1531
01:03:17,520 --> 01:03:22,079
list victor you want to

1532
01:03:18,880 --> 01:03:31,839
re-enable um audio

1533
01:03:22,079 --> 01:03:31,839
there you go all right

1534
01:03:38,480 --> 01:03:41,760
you're you're marked as not muted on

1535
01:03:40,480 --> 01:03:45,440
meat echo but

1536
01:03:41,760 --> 01:03:48,640
i can't hear you

1537
01:03:45,440 --> 01:03:52,160
sorry i had other layer of mute

1538
01:03:48,640 --> 01:03:53,839
okay so i'm going to give update on h3

1539
01:03:52,160 --> 01:03:57,440
quick and then

1540
01:03:53,839 --> 01:04:01,279
uh i'll give update on the transfer zoo

1541
01:03:57,440 --> 01:04:01,280
uh so next slide

1542
01:04:02,559 --> 01:04:09,280
so just as a reminder h3 transport

1543
01:04:05,599 --> 01:04:12,720
is h2 transport but that's over h3

1544
01:04:09,280 --> 01:04:15,760
uh it has the datagram support

1545
01:04:12,720 --> 01:04:19,439
through quick datagram uh

1546
01:04:15,760 --> 01:04:22,319
and the specific mechanism for embedding

1547
01:04:19,440 --> 01:04:24,880
uh datagram vintage free is described in

1548
01:04:22,319 --> 01:04:28,000
draftskin as a quick date-free

1549
01:04:24,880 --> 01:04:30,799
datagram uh their draft

1550
01:04:28,000 --> 01:04:33,200
we are currently converting it with

1551
01:04:30,799 --> 01:04:35,200
design decisions and hd transport there

1552
01:04:33,200 --> 01:04:37,279
is a pull request i wrote

1553
01:04:35,200 --> 01:04:38,480
uh everyone is encouraged to take a look

1554
01:04:37,280 --> 01:04:41,599
at it

1555
01:04:38,480 --> 01:04:44,079
it includes switching from

1556
01:04:41,599 --> 01:04:45,760
using transfer parameters to negotiate

1557
01:04:44,079 --> 01:04:48,400
web transfer support to using

1558
01:04:45,760 --> 01:04:50,079
an http free setting because that's more

1559
01:04:48,400 --> 01:04:52,640
application layer and that just makes

1560
01:04:50,079 --> 01:04:52,640
more sense

1561
01:04:53,039 --> 01:04:59,839
there is a uh redesigned to

1562
01:04:56,640 --> 01:05:01,520
use stream ids as like identifier for

1563
01:04:59,839 --> 01:05:05,200
web transport sessions

1564
01:05:01,520 --> 01:05:07,680
uh that is also design decisions that

1565
01:05:05,200 --> 01:05:09,439
was in h2 and that made more sense and

1566
01:05:07,680 --> 01:05:11,440
that allowed me to deliver

1567
01:05:09,440 --> 01:05:12,799
two paragraphs of text from the specs so

1568
01:05:11,440 --> 01:05:16,160
that's nice

1569
01:05:12,799 --> 01:05:18,319
uh and that's basically it uh i did some

1570
01:05:16,160 --> 01:05:19,279
other minor adjustments but everyone is

1571
01:05:18,319 --> 01:05:21,279
welcome

1572
01:05:19,280 --> 01:05:22,960
to take a look at that pull request for

1573
01:05:21,280 --> 01:05:26,799
all of the details

1574
01:05:22,960 --> 01:05:28,960
next slide uh

1575
01:05:26,799 --> 01:05:31,280
quick transport quick transport actually

1576
01:05:28,960 --> 01:05:33,280
get more update and not publish a draft

1577
01:05:31,280 --> 01:05:34,160
because there are still i need to fix

1578
01:05:33,280 --> 01:05:36,160
the

1579
01:05:34,160 --> 01:05:38,399
story with error handling and error

1580
01:05:36,160 --> 01:05:40,078
codes but the basic idea of quick

1581
01:05:38,400 --> 01:05:44,000
transport if you're not familiar

1582
01:05:40,079 --> 01:05:45,760
it's a quick but it has a handshake

1583
01:05:44,000 --> 01:05:47,280
in front of it but after you're done

1584
01:05:45,760 --> 01:05:49,280
with the handshake you can treat your

1585
01:05:47,280 --> 01:05:51,520
web transport connection as if it was

1586
01:05:49,280 --> 01:05:54,559
just a regular quick socket

1587
01:05:51,520 --> 01:05:56,559
uh so it has lpn values that's dedicated

1588
01:05:54,559 --> 01:05:58,240
for it and that's not http

1589
01:05:56,559 --> 01:06:00,000
and that allows us to avoid cross

1590
01:05:58,240 --> 01:06:03,118
protocol attacks

1591
01:06:00,000 --> 01:06:04,559
it has its own dedicated uri scheme

1592
01:06:03,119 --> 01:06:06,480
called quick transport

1593
01:06:04,559 --> 01:06:10,079
quick dash transport column slash slash

1594
01:06:06,480 --> 01:06:13,520
and it has the same syntax as http urls

1595
01:06:10,079 --> 01:06:15,760
uh so we re so as i mentioned before we

1596
01:06:13,520 --> 01:06:18,079
used to have a very bespoke

1597
01:06:15,760 --> 01:06:19,599
header format we have a new format

1598
01:06:18,079 --> 01:06:22,079
that's bespoke but now

1599
01:06:19,599 --> 01:06:24,079
it's used to have numbers as keys now it

1600
01:06:22,079 --> 01:06:25,839
has strings as keys

1601
01:06:24,079 --> 01:06:28,720
and those follow roughly the same

1602
01:06:25,839 --> 01:06:33,839
semantics as http

1603
01:06:28,720 --> 01:06:37,118
and the reason i want this is one having

1604
01:06:33,839 --> 01:06:39,279
header names as strings instead of

1605
01:06:37,119 --> 01:06:41,359
keys is greater for extensibility

1606
01:06:39,280 --> 01:06:44,000
because this lots

1607
01:06:41,359 --> 01:06:44,880
people who are rolling their own things

1608
01:06:44,000 --> 01:06:47,760
on top of this

1609
01:06:44,880 --> 01:06:50,000
to uh add their own headers without

1610
01:06:47,760 --> 01:06:51,760
having to fear any collision

1611
01:06:50,000 --> 01:06:53,039
uh because otherwise it'd have to work

1612
01:06:51,760 --> 01:06:56,720
with numbers

1613
01:06:53,039 --> 01:06:59,039
uh and that's the main reason uh

1614
01:06:56,720 --> 01:07:01,839
uh it's still easy to parse it's

1615
01:06:59,039 --> 01:07:05,200
basically 16-bit lens prefixed

1616
01:07:01,839 --> 01:07:07,440
strings everywhere and

1617
01:07:05,200 --> 01:07:08,720
one of the main conceits of great

1618
01:07:07,440 --> 01:07:11,359
transport is that you get

1619
01:07:08,720 --> 01:07:13,359
exactly one quick connection per your

1620
01:07:11,359 --> 01:07:15,520
instance of your transport

1621
01:07:13,359 --> 01:07:18,000
uh that is step optimal if you open a

1622
01:07:15,520 --> 01:07:20,240
lot of web transport connections

1623
01:07:18,000 --> 01:07:21,359
uh because you do not get any pulling

1624
01:07:20,240 --> 01:07:23,759
and this

1625
01:07:21,359 --> 01:07:26,078
also allows another hand allows you to

1626
01:07:23,760 --> 01:07:28,079
do a lot of things like

1627
01:07:26,079 --> 01:07:30,880
swapping in your custom congestion

1628
01:07:28,079 --> 01:07:34,160
controller on the server side etc

1629
01:07:30,880 --> 01:07:37,839
uh that's you would not be able to as

1630
01:07:34,160 --> 01:07:42,319
easily get away with uh if you are

1631
01:07:37,839 --> 01:07:44,558
uh just using uh http free

1632
01:07:42,319 --> 01:07:46,799
and one connection for everything next

1633
01:07:44,559 --> 01:07:46,799
slide

1634
01:07:46,960 --> 01:07:50,640
uh so this is an example of how quick

1635
01:07:50,079 --> 01:07:53,920
transport

1636
01:07:50,640 --> 01:07:56,160
url scheme uh if you do not remember

1637
01:07:53,920 --> 01:07:58,079
this says i've not updated this slide

1638
01:07:56,160 --> 01:08:01,520
but all of the highlighted values

1639
01:07:58,079 --> 01:08:05,039
are now sent completely in

1640
01:08:01,520 --> 01:08:11,280
the handshake so that's another update

1641
01:08:05,039 --> 01:08:14,559
slash improvement uh next slide uh

1642
01:08:11,280 --> 01:08:16,560
as a reminder that that's this draft is

1643
01:08:14,559 --> 01:08:20,000
actually implemented in chrome there

1644
01:08:16,560 --> 01:08:23,040
are instructions on how to uh do

1645
01:08:20,000 --> 01:08:25,279
things with it if and uh i think corey

1646
01:08:23,040 --> 01:08:27,198
bernard went earlier today so i'm not

1647
01:08:25,279 --> 01:08:30,799
going to go back into this

1648
01:08:27,198 --> 01:08:34,158
uh now let's get to the

1649
01:08:30,799 --> 01:08:36,640
great transport zoo uh i regret to

1650
01:08:34,158 --> 01:08:40,879
inform everyone here that we've been

1651
01:08:36,640 --> 01:08:40,880
uh approved for a third season of this

1652
01:08:43,439 --> 01:08:47,678
the great transport zoo is where we look

1653
01:08:45,600 --> 01:08:49,839
at all of our transport and decide which

1654
01:08:47,679 --> 01:08:51,520
ones we want and which ones we don't and

1655
01:08:49,839 --> 01:08:52,318
there are four options which means that

1656
01:08:51,520 --> 01:08:54,960
there are

1657
01:08:52,319 --> 01:08:55,600
two to the four power two to the power

1658
01:08:54,960 --> 01:08:58,799
four

1659
01:08:55,600 --> 01:09:00,159
variants uh and we're largely arguing

1660
01:08:58,799 --> 01:09:03,759
for three or four of them

1661
01:09:00,158 --> 01:09:05,358
i think at this point but uh there are

1662
01:09:03,759 --> 01:09:07,679
three of four dimensions there is a

1663
01:09:05,359 --> 01:09:08,719
hypothetical fallback transport which i

1664
01:09:07,679 --> 01:09:10,560
didn't think

1665
01:09:08,719 --> 01:09:12,560
i think is this point no one seriously

1666
01:09:10,560 --> 01:09:14,880
considers because uh

1667
01:09:12,560 --> 01:09:16,640
if you want to do that uh it was ideas

1668
01:09:14,880 --> 01:09:18,080
that you could roll a transport on top

1669
01:09:16,640 --> 01:09:20,080
of websocket but you can do it

1670
01:09:18,080 --> 01:09:21,839
completely yourself so we don't need an

1671
01:09:20,080 --> 01:09:24,880
atf working here for this

1672
01:09:21,839 --> 01:09:24,880
uh next slide

1673
01:09:28,080 --> 01:09:31,839
so as an overview there are like very

1674
01:09:30,960 --> 01:09:34,880
easy

1675
01:09:31,839 --> 01:09:38,559
axis uh that you can split

1676
01:09:34,880 --> 01:09:41,759
dedicated versus pooled quick versus tcp

1677
01:09:38,560 --> 01:09:43,759
and those are the kind of defining

1678
01:09:41,759 --> 01:09:46,960
characteristic of those

1679
01:09:43,759 --> 01:09:48,880
those used to be less defining with last

1680
01:09:46,960 --> 01:09:52,239
updates to quick transportation free

1681
01:09:48,880 --> 01:09:54,800
transport etc i feel like they're

1682
01:09:52,238 --> 01:09:56,159
most important in characteristics of all

1683
01:09:54,800 --> 01:10:03,840
of those

1684
01:09:56,159 --> 01:10:03,839
uh next slide

1685
01:10:03,920 --> 01:10:10,880
so here is however there has been

1686
01:10:07,360 --> 01:10:14,880
some interesting details that happened

1687
01:10:10,880 --> 01:10:15,440
on api layer uh so one thing we did is

1688
01:10:14,880 --> 01:10:17,760
we've

1689
01:10:15,440 --> 01:10:19,199
we updated the api somewhere in

1690
01:10:17,760 --> 01:10:21,600
september and that's

1691
01:10:19,199 --> 01:10:23,519
in the very latest versions of chrome

1692
01:10:21,600 --> 01:10:25,440
where we notice that there is a very

1693
01:10:23,520 --> 01:10:26,560
similar redundancy if you look at the

1694
01:10:25,440 --> 01:10:28,239
old approach

1695
01:10:26,560 --> 01:10:30,320
you will notice that the choice of

1696
01:10:28,239 --> 01:10:33,759
transport is indicated twice

1697
01:10:30,320 --> 01:10:37,679
once in the constructor name once in

1698
01:10:33,760 --> 01:10:40,640
the euro url scheme and of course

1699
01:10:37,679 --> 01:10:43,120
that's redundant so we renamed the api

1700
01:10:40,640 --> 01:10:46,239
entry point to web transport

1701
01:10:43,120 --> 01:10:50,239
and that had a very nice side effect of

1702
01:10:46,239 --> 01:10:51,919
uh basically now uh before that

1703
01:10:50,239 --> 01:10:53,440
in order to implement all of the

1704
01:10:51,920 --> 01:10:56,239
transport we would have to write

1705
01:10:53,440 --> 01:10:57,519
uh codes for all of those javascript

1706
01:10:56,239 --> 01:11:00,320
classes

1707
01:10:57,520 --> 01:11:00,960
and that added a lot of cost but now

1708
01:11:00,320 --> 01:11:03,599
that this is

1709
01:11:00,960 --> 01:11:05,199
entirely dispatched by url this moves

1710
01:11:03,600 --> 01:11:07,440
the problem

1711
01:11:05,199 --> 01:11:10,559
of actually picking the transfer down to

1712
01:11:07,440 --> 01:11:10,559
the network layer which

1713
01:11:10,960 --> 01:11:15,280
removes overhead from shipping multiple

1714
01:11:13,360 --> 01:11:18,320
transports or

1715
01:11:15,280 --> 01:11:21,440
uh both

1716
01:11:18,320 --> 01:11:27,840
on technical level but also i feel

1717
01:11:21,440 --> 01:11:27,839
on conceptual level uh martin uh you

1718
01:11:30,080 --> 01:11:33,280
thanks victor for noticing so quickly

1719
01:11:31,520 --> 01:11:36,400
i'm sorry about being so slow to

1720
01:11:33,280 --> 01:11:38,480
jump in um so um

1721
01:11:36,400 --> 01:11:40,159
point of clarification there when you

1722
01:11:38,480 --> 01:11:43,519
have these two

1723
01:11:40,159 --> 01:11:45,679
say quick transport or um https one

1724
01:11:43,520 --> 01:11:47,679
the fallback methods aren't necessarily

1725
01:11:45,679 --> 01:11:50,719
done by the browser

1726
01:11:47,679 --> 01:11:53,920
are they in the quick transport version

1727
01:11:50,719 --> 01:11:56,159
so they might be doing the http version

1728
01:11:53,920 --> 01:11:57,520
in the new quick transfers there is no

1729
01:11:56,159 --> 01:11:59,920
automatic fallback

1730
01:11:57,520 --> 01:12:01,520
if you because quick transport only

1731
01:11:59,920 --> 01:12:05,360
exists over quick and you

1732
01:12:01,520 --> 01:12:08,560
basically get to do this manually

1733
01:12:05,360 --> 01:12:10,799
and in http version you

1734
01:12:08,560 --> 01:12:11,840
have to delegate this to the browser

1735
01:12:10,800 --> 01:12:14,080
because

1736
01:12:11,840 --> 01:12:16,400
the browser is the only entity that

1737
01:12:14,080 --> 01:12:19,519
knows the state of your socket pulse

1738
01:12:16,400 --> 01:12:22,799
uh so it if if it knows whether you have

1739
01:12:19,520 --> 01:12:26,000
h2 or h3 that means uh

1740
01:12:22,800 --> 01:12:26,239
uh it will find the appropriate socket

1741
01:12:26,000 --> 01:12:29,520
and

1742
01:12:26,239 --> 01:12:32,239
opens the session on that yeah yeah um

1743
01:12:29,520 --> 01:12:32,800
i guess my point was that uh if you pick

1744
01:12:32,239 --> 01:12:34,879
the

1745
01:12:32,800 --> 01:12:36,000
new approach number one there's

1746
01:12:34,880 --> 01:12:38,800
potentially a fallback

1747
01:12:36,000 --> 01:12:40,400
involved that requires new api surface

1748
01:12:38,800 --> 01:12:44,080
of some

1749
01:12:40,400 --> 01:12:47,759
shape there is a potential

1750
01:12:44,080 --> 01:12:51,199
for new api to add

1751
01:12:47,760 --> 01:12:54,640
more control over what exactly happens

1752
01:12:51,199 --> 01:12:55,040
uh but the basic point i'm trying to

1753
01:12:54,640 --> 01:12:58,080
make

1754
01:12:55,040 --> 01:13:00,480
is uh that there is still it's still

1755
01:12:58,080 --> 01:13:00,800
much easier conceptually because you can

1756
01:13:00,480 --> 01:13:04,080
just

1757
01:13:00,800 --> 01:13:07,280
this is now just a knob you tweak

1758
01:13:04,080 --> 01:13:09,040
instead of like completely different

1759
01:13:07,280 --> 01:13:12,080
uh things that require completely

1760
01:13:09,040 --> 01:13:12,080
different code paths

1761
01:13:12,480 --> 01:13:19,839
good good thank you thank you uh

1762
01:13:16,320 --> 01:13:19,840
next slide

1763
01:13:20,640 --> 01:13:24,320
uh so just to clarify conceptually the

1764
01:13:23,520 --> 01:13:27,600
difference so

1765
01:13:24,320 --> 01:13:29,840
this is uh this is the first

1766
01:13:27,600 --> 01:13:31,040
the very first this is how it looked

1767
01:13:29,840 --> 01:13:33,600
before

1768
01:13:31,040 --> 01:13:35,120
and on the next slide you can see that

1769
01:13:33,600 --> 01:13:38,880
uh

1770
01:13:35,120 --> 01:13:41,280
thanks to this uh there is one less box

1771
01:13:38,880 --> 01:13:43,199
and actually one less arrow is what's

1772
01:13:41,280 --> 01:13:45,440
more important because

1773
01:13:43,199 --> 01:13:46,799
a lot of implementation expense here is

1774
01:13:45,440 --> 01:13:50,159
uh crossing

1775
01:13:46,800 --> 01:13:52,719
the sandbox boundary uh

1776
01:13:50,159 --> 01:13:52,719
next slide

1777
01:13:53,840 --> 01:13:58,080
so uh here is so i've made repeatedly

1778
01:13:57,120 --> 01:14:01,280
the observations

1779
01:13:58,080 --> 01:14:04,400
that as i've

1780
01:14:01,280 --> 01:14:06,080
uh as we've refactored more and more

1781
01:14:04,400 --> 01:14:08,559
both quick transport and each free

1782
01:14:06,080 --> 01:14:12,239
transport they become more and more

1783
01:14:08,560 --> 01:14:15,600
similar semantically and at this point

1784
01:14:12,239 --> 01:14:18,080
i am there is some debate to this but at

1785
01:14:15,600 --> 01:14:21,199
this point i am basically convinced that

1786
01:14:18,080 --> 01:14:23,360
http free transport exists primarily as

1787
01:14:21,199 --> 01:14:24,639
quick transport with uh connection

1788
01:14:23,360 --> 01:14:27,920
pooling

1789
01:14:24,640 --> 01:14:29,440
uh and that kind of makes sense because

1790
01:14:27,920 --> 01:14:32,560
if you think about it there

1791
01:14:29,440 --> 01:14:33,919
is no really substantial difference for

1792
01:14:32,560 --> 01:14:39,040
them to be

1793
01:14:33,920 --> 01:14:39,040
different entities uh next slide

1794
01:14:40,560 --> 01:14:46,880
so one of the ideas i had is uh

1795
01:14:44,480 --> 01:14:47,599
we have quick transport and http free

1796
01:14:46,880 --> 01:14:51,840
transport

1797
01:14:47,600 --> 01:14:55,360
uh but uh

1798
01:14:51,840 --> 01:14:58,480
we could uh so currently we

1799
01:14:55,360 --> 01:15:01,120
disambigate in by scheme but it

1800
01:14:58,480 --> 01:15:03,120
is actually like that's a choice made by

1801
01:15:01,120 --> 01:15:04,159
client and that makes them semantically

1802
01:15:03,120 --> 01:15:07,599
different

1803
01:15:04,159 --> 01:15:09,679
but we can also even delegate that

1804
01:15:07,600 --> 01:15:12,880
decision to the server

1805
01:15:09,679 --> 01:15:16,400
by uh offering

1806
01:15:12,880 --> 01:15:17,360
both http free as and web transport as a

1807
01:15:16,400 --> 01:15:20,480
lpn

1808
01:15:17,360 --> 01:15:22,639
so if you just want a quick transport

1809
01:15:20,480 --> 01:15:23,599
you just offer a quick transport and

1810
01:15:22,640 --> 01:15:25,920
then it will

1811
01:15:23,600 --> 01:15:27,280
offer both of those and you get quick

1812
01:15:25,920 --> 01:15:29,280
transport and

1813
01:15:27,280 --> 01:15:30,480
that is perfectly simple from the server

1814
01:15:29,280 --> 01:15:33,360
perspective

1815
01:15:30,480 --> 01:15:35,678
and if you want http free transport if

1816
01:15:33,360 --> 01:15:37,599
there is an existing socket and

1817
01:15:35,679 --> 01:15:39,600
existing http free connection in the

1818
01:15:37,600 --> 01:15:43,040
socket poll that supports that

1819
01:15:39,600 --> 01:15:46,800
you will get http free transport on that

1820
01:15:43,040 --> 01:15:47,360
http free connection uh alternatively it

1821
01:15:46,800 --> 01:15:50,840
will

1822
01:15:47,360 --> 01:15:52,000
establish that connection a new to that

1823
01:15:50,840 --> 01:15:55,440
server

1824
01:15:52,000 --> 01:15:58,000
and uh i

1825
01:15:55,440 --> 01:15:59,678
the reason i like this is that this

1826
01:15:58,000 --> 01:16:02,880
allows us to make progress

1827
01:15:59,679 --> 01:16:05,679
uh without making any assumption of

1828
01:16:02,880 --> 01:16:07,679
uh what we're actually uh what

1829
01:16:05,679 --> 01:16:10,960
transports we're actually using

1830
01:16:07,679 --> 01:16:13,520
but i do believe uh

1831
01:16:10,960 --> 01:16:15,120
uh we still should make progress on that

1832
01:16:13,520 --> 01:16:18,800
because

1833
01:16:15,120 --> 01:16:20,719
this this this is logical but

1834
01:16:18,800 --> 01:16:21,920
we still should actually decide which

1835
01:16:20,719 --> 01:16:24,719
transfer we're shipping

1836
01:16:21,920 --> 01:16:24,719
uh next slide

1837
01:16:26,080 --> 01:16:34,000
uh okay so uh i

1838
01:16:30,080 --> 01:16:37,199
have uh my observation here

1839
01:16:34,000 --> 01:16:39,840
so speaking of path forward

1840
01:16:37,199 --> 01:16:40,559
uh i am basically at this point

1841
01:16:39,840 --> 01:16:44,320
convinced

1842
01:16:40,560 --> 01:16:45,920
that uh the question is not like which

1843
01:16:44,320 --> 01:16:49,040
one of those we want but

1844
01:16:45,920 --> 01:16:51,360
uh should we implement http free

1845
01:16:49,040 --> 01:16:53,440
transport and is it worth it and let me

1846
01:16:51,360 --> 01:16:56,559
elaborate on that now that you've

1847
01:16:53,440 --> 01:16:59,919
imp now that we've implemented uh

1848
01:16:56,560 --> 01:17:03,440
like once you implement the top layer

1849
01:16:59,920 --> 01:17:06,239
which is uh like the web api

1850
01:17:03,440 --> 01:17:07,919
and the middle layer which is your the

1851
01:17:06,239 --> 01:17:09,199
things that crosses your sandbox

1852
01:17:07,920 --> 01:17:12,239
boundary and make sure

1853
01:17:09,199 --> 01:17:14,239
that flow control etc is preserved

1854
01:17:12,239 --> 01:17:16,000
now the only there's a bottom layer

1855
01:17:14,239 --> 01:17:18,879
which is a protocol which is the only

1856
01:17:16,000 --> 01:17:19,600
parts that's different between those two

1857
01:17:18,880 --> 01:17:21,679
but

1858
01:17:19,600 --> 01:17:22,880
if you're implementing http free

1859
01:17:21,679 --> 01:17:25,280
transfers the measure

1860
01:17:22,880 --> 01:17:26,480
marginal cost of implementing quick

1861
01:17:25,280 --> 01:17:30,080
transport for both

1862
01:17:26,480 --> 01:17:32,320
web browser and even the server but

1863
01:17:30,080 --> 01:17:33,760
web browser is the only one which really

1864
01:17:32,320 --> 01:17:36,559
has to ship both

1865
01:17:33,760 --> 01:17:38,960
uh is a fairly minimal the google

1866
01:17:36,560 --> 01:17:39,920
implementation is 2 000 lines of c plus

1867
01:17:38,960 --> 01:17:42,159
plus

1868
01:17:39,920 --> 01:17:44,800
and that's not that much that's at least

1869
01:17:42,159 --> 01:17:48,799
10 times less than

1870
01:17:44,800 --> 01:17:51,040
our http stack that's approximately

1871
01:17:48,800 --> 01:17:53,360
five times less than just a file that

1872
01:17:51,040 --> 01:17:57,840
decodes all of the quick frames

1873
01:17:53,360 --> 01:18:00,080
uh it is very little code comparatively

1874
01:17:57,840 --> 01:18:03,120
and those 2000 clients includes the

1875
01:18:00,080 --> 01:18:05,360
integration test uh and the unit tests

1876
01:18:03,120 --> 01:18:07,519
obviously

1877
01:18:05,360 --> 01:18:09,920
and the reason i believe that quick

1878
01:18:07,520 --> 01:18:13,600
transport is particularly appealing

1879
01:18:09,920 --> 01:18:17,440
is that if you think of the other

1880
01:18:13,600 --> 01:18:18,880
elements in the ecosystem as http 2 as

1881
01:18:17,440 --> 01:18:22,239
http free

1882
01:18:18,880 --> 01:18:24,719
uh quick transport is kind of http one

1883
01:18:22,239 --> 01:18:26,000
of web transport because it is the

1884
01:18:24,719 --> 01:18:29,120
simplest thing that can

1885
01:18:26,000 --> 01:18:31,600
work uh and it is sufficient

1886
01:18:29,120 --> 01:18:32,559
and optimal for a lot of cases for

1887
01:18:31,600 --> 01:18:34,960
instance

1888
01:18:32,560 --> 01:18:37,040
if you're doing video streaming and you

1889
01:18:34,960 --> 01:18:39,440
have a dedicated server you connect to

1890
01:18:37,040 --> 01:18:42,560
and you do not have any form of pulling

1891
01:18:39,440 --> 01:18:45,360
that you care about you will probably

1892
01:18:42,560 --> 01:18:46,239
want to have a quick transport and

1893
01:18:45,360 --> 01:18:49,360
that's

1894
01:18:46,239 --> 01:18:51,360
as that is what luke mentioned and

1895
01:18:49,360 --> 01:18:54,000
this is also true for instance for

1896
01:18:51,360 --> 01:18:56,559
youtube youtube does not use http 2

1897
01:18:54,000 --> 01:18:58,560
for video serving it always uses http 1

1898
01:18:56,560 --> 01:18:59,280
because http 2 is just a necessary

1899
01:18:58,560 --> 01:19:01,920
overhead

1900
01:18:59,280 --> 01:19:02,480
that it doesn't benefit from uh so

1901
01:19:01,920 --> 01:19:06,320
that's

1902
01:19:02,480 --> 01:19:09,440
uh one example and

1903
01:19:06,320 --> 01:19:12,159
so the main the two main questions are

1904
01:19:09,440 --> 01:19:15,759
do we want right pulling and do we want

1905
01:19:12,159 --> 01:19:18,639
to provide tcp fall back now before

1906
01:19:15,760 --> 01:19:20,840
we go in depth into the stew and like in

1907
01:19:18,640 --> 01:19:22,239
the discussion i kind of want to give my

1908
01:19:20,840 --> 01:19:25,920
perspective

1909
01:19:22,239 --> 01:19:26,320
uh my personal feeling about one is yes

1910
01:19:25,920 --> 01:19:28,800
so

1911
01:19:26,320 --> 01:19:30,159
i will know that this is hard and the

1912
01:19:28,800 --> 01:19:32,320
reason is that we

1913
01:19:30,159 --> 01:19:33,280
as we've observed every sufficiently

1914
01:19:32,320 --> 01:19:35,440
advanced protocol

1915
01:19:33,280 --> 01:19:37,679
eventually evolves into supporting

1916
01:19:35,440 --> 01:19:39,440
pulling http does that

1917
01:19:37,679 --> 01:19:41,520
websocket does that even though there

1918
01:19:39,440 --> 01:19:46,000
are some obstacles to shipping that

1919
01:19:41,520 --> 01:19:49,280
so this is like an incremental step

1920
01:19:46,000 --> 01:19:53,280
uh number two the reason i believe tcp

1921
01:19:49,280 --> 01:19:55,519
fallback would be good is not that it is

1922
01:19:53,280 --> 01:19:59,199
of immediate use to

1923
01:19:55,520 --> 01:20:01,040
everyone who uses web transport right

1924
01:19:59,199 --> 01:20:02,400
who would immediately adopt web

1925
01:20:01,040 --> 01:20:04,400
transport right now

1926
01:20:02,400 --> 01:20:06,320
because if you're adopting web transport

1927
01:20:04,400 --> 01:20:08,960
right now you're probably

1928
01:20:06,320 --> 01:20:09,679
someone who has a lot of resources to

1929
01:20:08,960 --> 01:20:11,360
experiment

1930
01:20:09,679 --> 01:20:13,280
and you probably have an existing

1931
01:20:11,360 --> 01:20:14,239
solution which works over tcp so you

1932
01:20:13,280 --> 01:20:17,440
would not want to

1933
01:20:14,239 --> 01:20:19,360
replace that now the reason if you're

1934
01:20:17,440 --> 01:20:22,559
building a solution from

1935
01:20:19,360 --> 01:20:23,519
a new i believe that web transport will

1936
01:20:22,560 --> 01:20:26,560
be

1937
01:20:23,520 --> 01:20:29,440
widespread much earlier then

1938
01:20:26,560 --> 01:20:31,360
we will get rid of all udp blocking

1939
01:20:29,440 --> 01:20:32,480
which is i believe we will probably

1940
01:20:31,360 --> 01:20:35,280
never get rid of

1941
01:20:32,480 --> 01:20:37,759
because i do not see firewalls and

1942
01:20:35,280 --> 01:20:40,400
enterprise policies ever going away

1943
01:20:37,760 --> 01:20:41,360
so i believe there will be demand for

1944
01:20:40,400 --> 01:20:44,879
solutions that

1945
01:20:41,360 --> 01:20:48,159
are architected from completely a new

1946
01:20:44,880 --> 01:20:51,760
uh to support

1947
01:20:48,159 --> 01:20:51,759
automatic fallback and

1948
01:20:53,120 --> 01:20:56,239
this is a

1949
01:20:56,480 --> 01:21:00,000
this is not something we might benefit

1950
01:20:59,280 --> 01:21:02,800
immediately

1951
01:21:00,000 --> 01:21:04,560
from the immediate users we've talked to

1952
01:21:02,800 --> 01:21:06,560
but this is definitely something that

1953
01:21:04,560 --> 01:21:09,360
makes sense long-term

1954
01:21:06,560 --> 01:21:10,560
uh that is my perspective and i would

1955
01:21:09,360 --> 01:21:15,839
now like to

1956
01:21:10,560 --> 01:21:15,840
get into discussion

1957
01:21:27,120 --> 01:21:31,920
um all right thanks victor actually

1958
01:21:30,080 --> 01:21:33,440
maybe go go back one slide bernards as

1959
01:21:31,920 --> 01:21:36,960
we that way we can still have the

1960
01:21:33,440 --> 01:21:39,678
questions on the screen uh so yes folks

1961
01:21:36,960 --> 01:21:43,280
uh please join the queue now and alan

1962
01:21:39,679 --> 01:21:45,199
you're up first

1963
01:21:43,280 --> 01:21:47,679
uh okay so the i mean i think the

1964
01:21:45,199 --> 01:21:50,000
question i want to highlight is that

1965
01:21:47,679 --> 01:21:51,600
pooling can mean two different things

1966
01:21:50,000 --> 01:21:54,800
one of them is

1967
01:21:51,600 --> 01:21:57,040
i can pool multiple

1968
01:21:54,800 --> 01:21:58,719
like web transport uris together in the

1969
01:21:57,040 --> 01:22:00,880
same connection as i was talking about

1970
01:21:58,719 --> 01:22:02,400
the other one is can i pool web

1971
01:22:00,880 --> 01:22:05,360
transport on the same

1972
01:22:02,400 --> 01:22:05,679
connection as my http traffic and

1973
01:22:05,360 --> 01:22:07,280
they're

1974
01:22:05,679 --> 01:22:08,840
kind of two separate questions right

1975
01:22:07,280 --> 01:22:10,880
quick transport as it's currently

1976
01:22:08,840 --> 01:22:11,440
defined will never let you do the one

1977
01:22:10,880 --> 01:22:12,880
where you

1978
01:22:11,440 --> 01:22:14,080
can stick it on with your http

1979
01:22:12,880 --> 01:22:15,199
connection you'll always need a second

1980
01:22:14,080 --> 01:22:19,040
connection

1981
01:22:15,199 --> 01:22:21,440
um and i think personally that there are

1982
01:22:19,040 --> 01:22:23,199
i want to speak to pooling web transport

1983
01:22:21,440 --> 01:22:25,120
with http together

1984
01:22:23,199 --> 01:22:27,360
um because it has some distinct

1985
01:22:25,120 --> 01:22:30,400
advantages uh

1986
01:22:27,360 --> 01:22:32,159
so all of that traffic will end up

1987
01:22:30,400 --> 01:22:34,000
sharing the same congestion controller

1988
01:22:32,159 --> 01:22:35,679
the streams on that

1989
01:22:34,000 --> 01:22:37,280
connection can be prioritized with

1990
01:22:35,679 --> 01:22:40,880
respect to each other

1991
01:22:37,280 --> 01:22:44,000
and there is some non-zero amount

1992
01:22:40,880 --> 01:22:47,199
of server-side cost uh for having

1993
01:22:44,000 --> 01:22:50,159
connections so uh if i'm

1994
01:22:47,199 --> 01:22:51,599
doing something in uh as a client and i

1995
01:22:50,159 --> 01:22:52,638
have an http connection and then all of

1996
01:22:51,600 --> 01:22:53,520
a sudden i want a web transport

1997
01:22:52,639 --> 01:22:55,280
connection

1998
01:22:53,520 --> 01:22:56,560
uh i don't have to have two connections

1999
01:22:55,280 --> 01:22:58,800
i can just keep using the one that i

2000
01:22:56,560 --> 01:23:07,840
already have

2001
01:22:58,800 --> 01:23:07,840
that's all

2002
01:23:11,280 --> 01:23:14,719
uh okay eric

2003
01:23:19,199 --> 01:23:22,559
i like the framing that you've got here

2004
01:23:21,600 --> 01:23:25,440
for

2005
01:23:22,560 --> 01:23:26,239
uh how can we kind of unify this down

2006
01:23:25,440 --> 01:23:28,239
into

2007
01:23:26,239 --> 01:23:29,759
an api that is just i'm doing web

2008
01:23:28,239 --> 01:23:30,638
transport and i'm not trying to pick up

2009
01:23:29,760 --> 01:23:32,719
front

2010
01:23:30,639 --> 01:23:35,120
i think in a lot of other areas we talk

2011
01:23:32,719 --> 01:23:36,719
a lot about expressing the properties

2012
01:23:35,120 --> 01:23:37,360
that we need from the transport and

2013
01:23:36,719 --> 01:23:39,120
having it

2014
01:23:37,360 --> 01:23:41,199
do the right thing in terms of providing

2015
01:23:39,120 --> 01:23:43,920
you those properties we saw

2016
01:23:41,199 --> 01:23:45,040
i think was bernard's table uh of the

2017
01:23:43,920 --> 01:23:46,239
different use cases

2018
01:23:45,040 --> 01:23:47,760
you know some of them said i need

2019
01:23:46,239 --> 01:23:49,199
unidirectional some of them said i need

2020
01:23:47,760 --> 01:23:50,800
bi-directional some of them said i need

2021
01:23:49,199 --> 01:23:53,120
ordering some of them said i need

2022
01:23:50,800 --> 01:23:54,719
unordered um and then there's a whole

2023
01:23:53,120 --> 01:23:57,840
set of things that

2024
01:23:54,719 --> 01:24:01,040
uh are perfectly fine if you don't have

2025
01:23:57,840 --> 01:24:02,400
uh unordered or unreliable data um those

2026
01:24:01,040 --> 01:24:04,400
being distinct items

2027
01:24:02,400 --> 01:24:06,400
uh some of them are you know i am not

2028
01:24:04,400 --> 01:24:08,159
willing to even consider

2029
01:24:06,400 --> 01:24:10,320
having this conversation with whoever's

2030
01:24:08,159 --> 01:24:12,159
on the other end if i can't have x thing

2031
01:24:10,320 --> 01:24:14,639
that i believe is critical

2032
01:24:12,159 --> 01:24:16,239
um and so i think having a having an api

2033
01:24:14,639 --> 01:24:19,520
that we can use to

2034
01:24:16,239 --> 01:24:21,678
express that spectrum of need from

2035
01:24:19,520 --> 01:24:22,960
i'd really like this to i'm not even

2036
01:24:21,679 --> 01:24:23,920
willing to show up to the table if i

2037
01:24:22,960 --> 01:24:28,320
don't have it

2038
01:24:23,920 --> 01:24:30,480
uh is potentially of value

2039
01:24:28,320 --> 01:24:32,000
i'm not totally sure that we can distill

2040
01:24:30,480 --> 01:24:34,000
all of that down into just

2041
01:24:32,000 --> 01:24:36,159
do we want pooling in his tcp fallback

2042
01:24:34,000 --> 01:24:39,840
necessary but i think

2043
01:24:36,159 --> 01:24:42,000
if we can focus in on um

2044
01:24:39,840 --> 01:24:43,280
how does someone as a consumer of this

2045
01:24:42,000 --> 01:24:46,800
api interact

2046
01:24:43,280 --> 01:24:47,519
with uh what they need and how do they

2047
01:24:46,800 --> 01:24:51,120
then

2048
01:24:47,520 --> 01:24:53,920
use what they get back from it um

2049
01:24:51,120 --> 01:24:54,400
we're probably going to be in good shape

2050
01:24:53,920 --> 01:24:56,400
because

2051
01:24:54,400 --> 01:24:58,159
some of the concerns around is somebody

2052
01:24:56,400 --> 01:25:00,719
going to implement x versus

2053
01:24:58,159 --> 01:25:01,360
y seems a little bit like they have to

2054
01:25:00,719 --> 01:25:04,560
do

2055
01:25:01,360 --> 01:25:06,639
you know amount of work something

2056
01:25:04,560 --> 01:25:08,080
uh and so it's not super clear to me

2057
01:25:06,639 --> 01:25:09,840
that that's a

2058
01:25:08,080 --> 01:25:11,440
that trying to guess it at what people

2059
01:25:09,840 --> 01:25:15,520
are willing to support

2060
01:25:11,440 --> 01:25:18,799
is as useful of a benchmark as

2061
01:25:15,520 --> 01:25:21,040
the what properties do we get from these

2062
01:25:18,800 --> 01:25:24,400
transports and which ones

2063
01:25:21,040 --> 01:25:24,400
do we need and which ones can we do

2064
01:25:24,840 --> 01:25:27,840
without

2065
01:25:33,199 --> 01:25:36,400
look i think you're next

2066
01:25:38,000 --> 01:25:44,320
uh hello again um so

2067
01:25:41,280 --> 01:25:46,800
in regards to pulling connections um

2068
01:25:44,320 --> 01:25:48,799
i do want to at least talk about what

2069
01:25:46,800 --> 01:25:51,040
situations that would be useful

2070
01:25:48,800 --> 01:25:53,120
um as it would actually improve the

2071
01:25:51,040 --> 01:25:56,239
experience for connection pooling

2072
01:25:53,120 --> 01:25:57,360
uh and in my mind you get you share the

2073
01:25:56,239 --> 01:26:01,519
congest control

2074
01:25:57,360 --> 01:26:02,880
um uh calculations which is great um

2075
01:26:01,520 --> 01:26:05,280
but you kind of need to have two

2076
01:26:02,880 --> 01:26:08,320
connections to the same host

2077
01:26:05,280 --> 01:26:10,320
that max you know that that uh both of

2078
01:26:08,320 --> 01:26:12,639
them need to transfer a lot of data

2079
01:26:10,320 --> 01:26:13,360
as well for that to even be a benefit so

2080
01:26:12,639 --> 01:26:16,800
you kind of have this

2081
01:26:13,360 --> 01:26:18,639
case where you have two uh you know tran

2082
01:26:16,800 --> 01:26:20,239
web uh web transport connections of the

2083
01:26:18,639 --> 01:26:21,600
same host or

2084
01:26:20,239 --> 01:26:23,599
and they're both using a lot of data or

2085
01:26:21,600 --> 01:26:25,280
you need to have an hdb connection and a

2086
01:26:23,600 --> 01:26:27,520
transport connection again using a lot

2087
01:26:25,280 --> 01:26:29,040
of data otherwise quick does a pretty

2088
01:26:27,520 --> 01:26:31,440
good job of connection pooling

2089
01:26:29,040 --> 01:26:32,960
um you can use the same socket you know

2090
01:26:31,440 --> 01:26:34,080
zero rtt if you wanted to make a new

2091
01:26:32,960 --> 01:26:36,880
connection

2092
01:26:34,080 --> 01:26:37,679
um i'm just failing to see the use case

2093
01:26:36,880 --> 01:26:40,320
as which

2094
01:26:37,679 --> 01:26:40,880
pooling is actually um an improvement

2095
01:26:40,320 --> 01:26:44,719
over

2096
01:26:40,880 --> 01:26:46,880
dialing a new uh connection um

2097
01:26:44,719 --> 01:26:48,400
so that's that's at least my feedback in

2098
01:26:46,880 --> 01:26:52,480
there and for number two

2099
01:26:48,400 --> 01:26:53,040
tcp fallback um i think the problem is

2100
01:26:52,480 --> 01:26:55,120
that the

2101
01:26:53,040 --> 01:26:57,120
web transfer api is the same for all the

2102
01:26:55,120 --> 01:26:57,840
transports but the functionality is not

2103
01:26:57,120 --> 01:27:00,639
the same

2104
01:26:57,840 --> 01:27:01,840
as in we may you might get that nice

2105
01:27:00,639 --> 01:27:03,199
like pretending like we're using

2106
01:27:01,840 --> 01:27:04,320
datagrams for pretending like you're

2107
01:27:03,199 --> 01:27:06,960
using you know

2108
01:27:04,320 --> 01:27:07,759
multiplex streams but if you're actually

2109
01:27:06,960 --> 01:27:09,120
under the hood

2110
01:27:07,760 --> 01:27:11,040
you have head of blind blocking because

2111
01:27:09,120 --> 01:27:13,760
using tcp

2112
01:27:11,040 --> 01:27:14,719
there's no point like i mean it's nice

2113
01:27:13,760 --> 01:27:16,800
it it

2114
01:27:14,719 --> 01:27:18,159
encourages adoption if you can have the

2115
01:27:16,800 --> 01:27:20,239
same api

2116
01:27:18,159 --> 01:27:21,759
um but it would be something that for

2117
01:27:20,239 --> 01:27:24,000
example i would explicitly try and

2118
01:27:21,760 --> 01:27:26,080
disable i would not want tcp because

2119
01:27:24,000 --> 01:27:27,199
that would just ruin my application

2120
01:27:26,080 --> 01:27:33,840
i would need to disable that

2121
01:27:27,199 --> 01:27:33,839
functionality for that fallback

2122
01:27:36,639 --> 01:27:43,120
okay by the way can yeah someone hear me

2123
01:27:40,880 --> 01:27:44,800
we can hear you okay because i've been

2124
01:27:43,120 --> 01:27:45,679
doing cue management for a while and i

2125
01:27:44,800 --> 01:27:49,280
realized

2126
01:27:45,679 --> 01:27:51,040
that no one was hearing me so grumpf

2127
01:27:49,280 --> 01:27:52,800
uh okay so i had to reconnect audio and

2128
01:27:51,040 --> 01:27:56,800
we're back all right thanks a lot luke

2129
01:27:52,800 --> 01:28:00,320
uh victor you're in the queue apparently

2130
01:27:56,800 --> 01:28:03,199
uh yeah i had to i

2131
01:28:00,320 --> 01:28:03,679
yes i wanted to say something i have

2132
01:28:03,199 --> 01:28:06,638
first

2133
01:28:03,679 --> 01:28:08,800
to regarding to looks remark it it is in

2134
01:28:06,639 --> 01:28:11,840
fact the case that we do need

2135
01:28:08,800 --> 01:28:12,719
to add a knob to api to express last

2136
01:28:11,840 --> 01:28:16,320
something like

2137
01:28:12,719 --> 01:28:16,639
i only want quick or i don't care if i

2138
01:28:16,320 --> 01:28:19,920
get

2139
01:28:16,639 --> 01:28:22,159
quick or tcp or i want quicker tcp but i

2140
01:28:19,920 --> 01:28:25,840
want to know which one i'm using

2141
01:28:22,159 --> 01:28:29,120
uh and there i do

2142
01:28:25,840 --> 01:28:32,320
agree with that now my remark is

2143
01:28:29,120 --> 01:28:36,159
another aspect of http i

2144
01:28:32,320 --> 01:28:39,759
forgot that i realized long time ago

2145
01:28:36,159 --> 01:28:43,280
is that http is due to metadata

2146
01:28:39,760 --> 01:28:46,080
is more amenable to intermediation

2147
01:28:43,280 --> 01:28:47,759
namely things about think about aspects

2148
01:28:46,080 --> 01:28:51,040
like priority

2149
01:28:47,760 --> 01:28:52,800
you can in http provides you with a way

2150
01:28:51,040 --> 01:28:54,159
to communicate priorities of your

2151
01:28:52,800 --> 01:28:57,120
individual streams but

2152
01:28:54,159 --> 01:28:59,040
uh that's not something you can do on

2153
01:28:57,120 --> 01:29:01,199
real quick because real quick has no way

2154
01:28:59,040 --> 01:29:04,239
to communicate that kind of metadata

2155
01:29:01,199 --> 01:29:07,440
and all of that metadata is just an

2156
01:29:04,239 --> 01:29:10,480
api call uh that's

2157
01:29:07,440 --> 01:29:12,480
an example of another consideration that

2158
01:29:10,480 --> 01:29:15,678
i think that was mentioned sometime

2159
01:29:12,480 --> 01:29:18,638
long ago but i forgot uh anyway uh

2160
01:29:15,679 --> 01:29:18,639
that's my remark

2161
01:29:23,520 --> 01:29:27,679
martin it takes a little while to come

2162
01:29:26,320 --> 01:29:30,719
through

2163
01:29:27,679 --> 01:29:31,920
um so victor's point there about uh

2164
01:29:30,719 --> 01:29:33,679
priority

2165
01:29:31,920 --> 01:29:35,120
is an interesting one but i don't think

2166
01:29:33,679 --> 01:29:37,040
it's particularly relevant here

2167
01:29:35,120 --> 01:29:39,040
um because you're not going to be able

2168
01:29:37,040 --> 01:29:41,600
to use the http level signaling

2169
01:29:39,040 --> 01:29:42,080
to get priority signals back and forth

2170
01:29:41,600 --> 01:29:44,000
and

2171
01:29:42,080 --> 01:29:45,519
quick has priority or any quick

2172
01:29:44,000 --> 01:29:46,960
implementation should have priority

2173
01:29:45,520 --> 01:29:48,480
anyway

2174
01:29:46,960 --> 01:29:50,800
and it's just a question of how you're

2175
01:29:48,480 --> 01:29:52,159
signaling it i was going to get back to

2176
01:29:50,800 --> 01:29:54,159
the intermediation

2177
01:29:52,159 --> 01:29:55,759
question though because alan made a

2178
01:29:54,159 --> 01:29:58,879
couple of points about

2179
01:29:55,760 --> 01:30:02,080
mixing these in with http and

2180
01:29:58,880 --> 01:30:02,719
i wanted to ask alan who when he gets to

2181
01:30:02,080 --> 01:30:06,159
his

2182
01:30:02,719 --> 01:30:08,480
point in the queue can answer

2183
01:30:06,159 --> 01:30:09,199
what specific benefits are you looking

2184
01:30:08,480 --> 01:30:11,360
to have

2185
01:30:09,199 --> 01:30:13,040
because my experience with at least

2186
01:30:11,360 --> 01:30:14,559
websockets has been that

2187
01:30:13,040 --> 01:30:16,400
they tend to be terminated by different

2188
01:30:14,560 --> 01:30:19,440
machines that deal with different

2189
01:30:16,400 --> 01:30:21,120
sort of services and how

2190
01:30:19,440 --> 01:30:22,960
how do you imagine the relationship

2191
01:30:21,120 --> 01:30:24,159
between the the http that's going on the

2192
01:30:22,960 --> 01:30:25,920
same connection and the

2193
01:30:24,159 --> 01:30:27,440
quick that's and the sorry the web

2194
01:30:25,920 --> 01:30:28,800
transport streams that are going on the

2195
01:30:27,440 --> 01:30:31,519
same connection

2196
01:30:28,800 --> 01:30:33,199
to be such that you're gaining benefits

2197
01:30:31,520 --> 01:30:35,440
from that i can see how you might

2198
01:30:33,199 --> 01:30:36,239
benefit from that a congestion

2199
01:30:35,440 --> 01:30:39,440
controller

2200
01:30:36,239 --> 01:30:41,919
being aware of um the current

2201
01:30:39,440 --> 01:30:43,280
path state but i can't see very many

2202
01:30:41,920 --> 01:30:45,520
ways in which the

2203
01:30:43,280 --> 01:30:47,280
the co-hosting of the same two things

2204
01:30:45,520 --> 01:30:50,639
can can be of benefit

2205
01:30:47,280 --> 01:30:51,440
and there's um uh yeah the other thing

2206
01:30:50,639 --> 01:30:54,480
was

2207
01:30:51,440 --> 01:30:56,000
victor pointed out the um

2208
01:30:54,480 --> 01:30:57,678
intermediation point and i think it's a

2209
01:30:56,000 --> 01:31:00,560
really important one

2210
01:30:57,679 --> 01:31:02,639
we saw with web transport that not a lot

2211
01:31:00,560 --> 01:31:05,440
of intermediation goes on because

2212
01:31:02,639 --> 01:31:06,719
it is there's no application level

2213
01:31:05,440 --> 01:31:07,678
semantics being expressed in these

2214
01:31:06,719 --> 01:31:10,159
protocols

2215
01:31:07,679 --> 01:31:11,199
there's no generic functionality that an

2216
01:31:10,159 --> 01:31:14,320
intermediary can

2217
01:31:11,199 --> 01:31:15,199
hook into to provide value so they tend

2218
01:31:14,320 --> 01:31:18,239
to be just dumb

2219
01:31:15,199 --> 01:31:20,159
connections back to back end servers

2220
01:31:18,239 --> 01:31:22,000
and with no value added by an

2221
01:31:20,159 --> 01:31:22,638
intermediary no extra load balancing

2222
01:31:22,000 --> 01:31:27,280
capabilities

2223
01:31:22,639 --> 01:31:30,080
what have you so i i am sort of strongly

2224
01:31:27,280 --> 01:31:31,360
now leaning toward the non-pooled case

2225
01:31:30,080 --> 01:31:34,080
in fact

2226
01:31:31,360 --> 01:31:35,759
but i'm very much still of the view that

2227
01:31:34,080 --> 01:31:39,600
only one

2228
01:31:35,760 --> 01:31:39,600
is necessary of the quick options

2229
01:31:42,239 --> 01:31:45,839
makes sense daniel

2230
01:31:46,800 --> 01:31:50,000
uh you're muted

2231
01:31:52,880 --> 01:31:56,480
muted i'll be brief because this has

2232
01:31:54,639 --> 01:31:56,960
been touched on twice already in the

2233
01:31:56,480 --> 01:31:59,199
queue

2234
01:31:56,960 --> 01:32:00,719
i was just going to say that you know as

2235
01:31:59,199 --> 01:32:03,839
far as the api goes you

2236
01:32:00,719 --> 01:32:06,400
absolutely have to be able to inform

2237
01:32:03,840 --> 01:32:07,520
the the caller of what the heck what the

2238
01:32:06,400 --> 01:32:09,280
heck we did

2239
01:32:07,520 --> 01:32:11,360
like i can't just if they if they ask

2240
01:32:09,280 --> 01:32:12,800
for quick i can't just switch to tcp

2241
01:32:11,360 --> 01:32:15,599
they have to know

2242
01:32:12,800 --> 01:32:17,440
i mean the the principle of least

2243
01:32:15,600 --> 01:32:20,880
surprise

2244
01:32:17,440 --> 01:32:24,559
am i still hello

2245
01:32:20,880 --> 01:32:26,639
my screen just went oh okay

2246
01:32:24,560 --> 01:32:27,920
yeah uh um that's all i wanted to say so

2247
01:32:26,639 --> 01:32:30,480
i wanted to to

2248
01:32:27,920 --> 01:32:31,360
not only second second the idea of of

2249
01:32:30,480 --> 01:32:34,559
informing the

2250
01:32:31,360 --> 01:32:35,040
the user um through the api but also say

2251
01:32:34,560 --> 01:32:37,199
that

2252
01:32:35,040 --> 01:32:39,120
very emphatically in support of it thank

2253
01:32:37,199 --> 01:32:42,320
you

2254
01:32:39,120 --> 01:32:44,880
cheers thanks ecker

2255
01:32:42,320 --> 01:32:45,519
um so with regard to both these points i

2256
01:32:44,880 --> 01:32:47,840
think

2257
01:32:45,520 --> 01:32:49,520
um i agree with martin that like there

2258
01:32:47,840 --> 01:32:51,920
should be one quick transport

2259
01:32:49,520 --> 01:32:53,600
um um i've got back up back and forth

2260
01:32:51,920 --> 01:32:56,719
with a fair bit or there should be um

2261
01:32:53,600 --> 01:32:58,239
h3 or quick um i sort of read victor's

2262
01:32:56,719 --> 01:33:00,560
uh victor's met under the mailing list

2263
01:32:58,239 --> 01:33:01,919
about how quick was growing more like h3

2264
01:33:00,560 --> 01:33:03,520
kind of confused me frankly

2265
01:33:01,920 --> 01:33:05,440
um because it seems like maybe they're

2266
01:33:03,520 --> 01:33:08,239
the same thing um

2267
01:33:05,440 --> 01:33:09,360
um so i mean i guess i am also trying to

2268
01:33:08,239 --> 01:33:10,799
figure out what pulling means

2269
01:33:09,360 --> 01:33:13,040
and not saying a lot here on benefit

2270
01:33:10,800 --> 01:33:14,239
there um i'm not sure that

2271
01:33:13,040 --> 01:33:17,280
but i'm not sure that actually dictates

2272
01:33:14,239 --> 01:33:19,759
the question of which which which uh um

2273
01:33:17,280 --> 01:33:20,719
uh we which quick base transport we

2274
01:33:19,760 --> 01:33:22,800
should have

2275
01:33:20,719 --> 01:33:23,920
um you know i think it's really quite

2276
01:33:22,800 --> 01:33:25,440
disappointing that we're going to end up

2277
01:33:23,920 --> 01:33:28,159
apparently with mask

2278
01:33:25,440 --> 01:33:28,799
um having um being based on http plus

2279
01:33:28,159 --> 01:33:30,080
datagrams

2280
01:33:28,800 --> 01:33:31,840
and the web transport based on some

2281
01:33:30,080 --> 01:33:33,600
other thing that seems like kind of like

2282
01:33:31,840 --> 01:33:36,080
really ideal to figure out like if you

2283
01:33:33,600 --> 01:33:39,199
want to push data raw datagrams over uh

2284
01:33:36,080 --> 01:33:40,239
over quick um to http servers um whether

2285
01:33:39,199 --> 01:33:41,440
you should do that with these

2286
01:33:40,239 --> 01:33:42,559
what kind of transfer that should look

2287
01:33:41,440 --> 01:33:43,360
like um seems like really something i

2288
01:33:42,560 --> 01:33:46,080
want to be able to do

2289
01:33:43,360 --> 01:33:46,559
and i remember as i recall the time when

2290
01:33:46,080 --> 01:33:48,480
mask

2291
01:33:46,560 --> 01:33:50,080
and in fact rick proposed there's a

2292
01:33:48,480 --> 01:33:51,199
bunch of discussion about how it might

2293
01:33:50,080 --> 01:33:51,840
be should ought to be in principle

2294
01:33:51,199 --> 01:33:53,919
possible

2295
01:33:51,840 --> 01:33:55,440
to implement them entirely in javascript

2296
01:33:53,920 --> 01:33:56,960
using facilities offered by the browser

2297
01:33:55,440 --> 01:33:59,839
that obviously will not be the case

2298
01:33:56,960 --> 01:34:00,159
if we um if mask is specified on http

2299
01:33:59,840 --> 01:34:02,400
and

2300
01:34:00,159 --> 01:34:03,360
quick and web transfer specifies quick

2301
01:34:02,400 --> 01:34:05,920
transport so

2302
01:34:03,360 --> 01:34:07,440
um i do think like that there should be

2303
01:34:05,920 --> 01:34:08,719
only one but like that the scope of

2304
01:34:07,440 --> 01:34:09,759
there should be only one probably like

2305
01:34:08,719 --> 01:34:10,560
it's like somewhat wider than this

2306
01:34:09,760 --> 01:34:14,080
working group

2307
01:34:10,560 --> 01:34:15,040
um on the topic of tcp fallback um i i

2308
01:34:14,080 --> 01:34:16,559
certainly agree with what i've heard

2309
01:34:15,040 --> 01:34:17,360
it's a number of times which we need to

2310
01:34:16,560 --> 01:34:19,440
um

2311
01:34:17,360 --> 01:34:20,880
uh notify people we there's some knob of

2312
01:34:19,440 --> 01:34:21,599
some kind to let people control slash

2313
01:34:20,880 --> 01:34:23,520
notify

2314
01:34:21,600 --> 01:34:25,199
whether they have tcp or not um i do

2315
01:34:23,520 --> 01:34:26,159
think sometimes people are necessary all

2316
01:34:25,199 --> 01:34:28,480
the data shows

2317
01:34:26,159 --> 01:34:30,400
that um you don't you don't reliably get

2318
01:34:28,480 --> 01:34:30,879
um ddp transport through like a like a

2319
01:34:30,400 --> 01:34:33,759
large

2320
01:34:30,880 --> 01:34:34,800
large number of connections and many of

2321
01:34:33,760 --> 01:34:36,800
these connections although they have

2322
01:34:34,800 --> 01:34:38,719
inferior performance if they have tcp

2323
01:34:36,800 --> 01:34:40,400
um still can do acceptable performance

2324
01:34:38,719 --> 01:34:43,679
of various things over tcp

2325
01:34:40,400 --> 01:34:45,839
um and so um you know

2326
01:34:43,679 --> 01:34:47,199
if you want people to if you think part

2327
01:34:45,840 --> 01:34:50,159
if you think part of the problem

2328
01:34:47,199 --> 01:34:51,759
with you know as i think people do with

2329
01:34:50,159 --> 01:34:53,599
websockets is the api stank

2330
01:34:51,760 --> 01:34:54,800
and you'd like people to have one api

2331
01:34:53,600 --> 01:34:56,000
that having forced them to switch it

2332
01:34:54,800 --> 01:34:57,440
between web sockets and web transport

2333
01:34:56,000 --> 01:34:59,119
when they really wanted to go like a

2334
01:34:57,440 --> 01:35:00,480
datagram extraction that kind of works

2335
01:34:59,119 --> 01:35:02,559
um seems like really kind of a bad

2336
01:35:00,480 --> 01:35:04,159
choice so i do think we need to pee

2337
01:35:02,560 --> 01:35:08,560
um and i'd better think we maybe you

2338
01:35:04,159 --> 01:35:08,559
turn it off or or be sad if you got it

2339
01:35:12,800 --> 01:35:17,360
thanks ecker uh eric kinnear i saw that

2340
01:35:16,320 --> 01:35:18,639
you were at the top of the queue and

2341
01:35:17,360 --> 01:35:19,759
you're not at the bottom like

2342
01:35:18,639 --> 01:35:22,560
was that a mistake or did you

2343
01:35:19,760 --> 01:35:22,560
intentionally go down

2344
01:35:22,639 --> 01:35:25,199
uh i removed one comment and had a

2345
01:35:24,159 --> 01:35:26,480
different one so let's keep going and

2346
01:35:25,199 --> 01:35:29,839
we'll come back

2347
01:35:26,480 --> 01:35:29,839
cool sounds good uh alan

2348
01:35:30,560 --> 01:35:35,600
so um to address martin's question um

2349
01:35:33,840 --> 01:35:37,360
so i mean i think one of the primary

2350
01:35:35,600 --> 01:35:40,960
drivers is scale

2351
01:35:37,360 --> 01:35:44,480
so um you know so i work at facebook

2352
01:35:40,960 --> 01:35:47,040
and uh we that you know

2353
01:35:44,480 --> 01:35:48,080
basically every phone has in the world

2354
01:35:47,040 --> 01:35:49,199
has a connection to facebook it's

2355
01:35:48,080 --> 01:35:53,440
probably an exaggeration

2356
01:35:49,199 --> 01:35:55,519
but there's lots of them um and

2357
01:35:53,440 --> 01:35:57,119
we do http stuff right there's lots of

2358
01:35:55,520 --> 01:35:57,760
reasons why there should be an http

2359
01:35:57,119 --> 01:36:01,759
connection

2360
01:35:57,760 --> 01:36:05,280
from every app but then

2361
01:36:01,760 --> 01:36:07,920
there are also non-http use cases uh

2362
01:36:05,280 --> 01:36:08,880
that are going to go to the same place

2363
01:36:07,920 --> 01:36:11,119
particularly

2364
01:36:08,880 --> 01:36:12,159
sort of more published subscribe based

2365
01:36:11,119 --> 01:36:14,400
models

2366
01:36:12,159 --> 01:36:15,599
um or notification real time things

2367
01:36:14,400 --> 01:36:17,040
there's obviously ways to kind of clue

2368
01:36:15,600 --> 01:36:19,119
to that with http but

2369
01:36:17,040 --> 01:36:22,000
we get a lot of asks from people who are

2370
01:36:19,119 --> 01:36:23,920
trying to develop these abstractions

2371
01:36:22,000 --> 01:36:25,360
and so now we're faced with okay well

2372
01:36:23,920 --> 01:36:27,600
we're gonna have one

2373
01:36:25,360 --> 01:36:28,960
http connection from every phone and now

2374
01:36:27,600 --> 01:36:31,440
we're also gonna have a

2375
01:36:28,960 --> 01:36:33,360
web transport connection or if we don't

2376
01:36:31,440 --> 01:36:36,480
have any ability to pool

2377
01:36:33,360 --> 01:36:37,360
multiple web transport uris into the

2378
01:36:36,480 --> 01:36:39,839
same connection

2379
01:36:37,360 --> 01:36:41,839
we're gonna have one web transport

2380
01:36:39,840 --> 01:36:45,119
connection for potentially every

2381
01:36:41,840 --> 01:36:47,440
user of web transport um

2382
01:36:45,119 --> 01:36:48,639
which is just not really gonna work um

2383
01:36:47,440 --> 01:36:50,638
you know these things are all

2384
01:36:48,639 --> 01:36:52,880
end up getting terminated at one place

2385
01:36:50,639 --> 01:36:54,480
and in terms of what intermediation or a

2386
01:36:52,880 --> 01:36:55,360
proxy can do there it's not doing very

2387
01:36:54,480 --> 01:36:57,839
much but it is

2388
01:36:55,360 --> 01:36:59,519
routing right so you might have you know

2389
01:36:57,840 --> 01:37:01,600
some uses on the phone which are

2390
01:36:59,520 --> 01:37:03,040
being terminated in edge pop and those

2391
01:37:01,600 --> 01:37:04,880
web transport use cases are being

2392
01:37:03,040 --> 01:37:06,719
grounded to a data center

2393
01:37:04,880 --> 01:37:08,239
where that service is running but other

2394
01:37:06,719 --> 01:37:09,600
web transport uis are being routed to

2395
01:37:08,239 --> 01:37:11,759
other data centers

2396
01:37:09,600 --> 01:37:12,639
um off the same connection to the pop so

2397
01:37:11,760 --> 01:37:14,400
that and

2398
01:37:12,639 --> 01:37:15,920
in terms of okay well you guys have your

2399
01:37:14,400 --> 01:37:16,719
own app why don't you just write your

2400
01:37:15,920 --> 01:37:18,400
own extension

2401
01:37:16,719 --> 01:37:20,000
and why are you bothering the ietf with

2402
01:37:18,400 --> 01:37:22,960
this use case which maybe is only

2403
01:37:20,000 --> 01:37:25,199
specific for you um you know there's

2404
01:37:22,960 --> 01:37:26,320
more and more push to use native stacks

2405
01:37:25,199 --> 01:37:28,400
and so this we're a little bit out of

2406
01:37:26,320 --> 01:37:29,199
the web context of web transport but

2407
01:37:28,400 --> 01:37:32,879
since we're

2408
01:37:29,199 --> 01:37:35,599
talking about a protocol here um

2409
01:37:32,880 --> 01:37:37,600
you know we for example like we would

2410
01:37:35,600 --> 01:37:39,840
love there's there are lightweight apps

2411
01:37:37,600 --> 01:37:41,280
that would like to not use our http

2412
01:37:39,840 --> 01:37:42,480
stack but want to use the native stack

2413
01:37:41,280 --> 01:37:44,159
or they want to use a thinner

2414
01:37:42,480 --> 01:37:46,159
stack than the one that we've developed

2415
01:37:44,159 --> 01:37:47,040
and it's very challenging if there's not

2416
01:37:46,159 --> 01:37:49,040
a standard way

2417
01:37:47,040 --> 01:37:50,960
to do this kind of thing over an http

2418
01:37:49,040 --> 01:37:51,519
connection to to get that implementation

2419
01:37:50,960 --> 01:37:53,600
happening

2420
01:37:51,520 --> 01:37:55,199
uh in other contexts and there's also

2421
01:37:53,600 --> 01:37:57,119
you know then we have the same thing of

2422
01:37:55,199 --> 01:37:58,719
all those products that run in apps also

2423
01:37:57,119 --> 01:38:01,280
we're going to run the web

2424
01:37:58,719 --> 01:38:02,400
and the web developers are don't want to

2425
01:38:01,280 --> 01:38:04,000
or the people who are developing that

2426
01:38:02,400 --> 01:38:05,199
code don't want to know like oh

2427
01:38:04,000 --> 01:38:06,400
i have to write it one way in the app

2428
01:38:05,199 --> 01:38:08,400
but then i have a totally different

2429
01:38:06,400 --> 01:38:10,960
protocol or way i handle things

2430
01:38:08,400 --> 01:38:12,239
when i'm running in a browser context

2431
01:38:10,960 --> 01:38:17,840
okay so it's got a long-winded answer

2432
01:38:12,239 --> 01:38:17,839
but i think i covered it

2433
01:38:21,040 --> 01:38:23,760
uh jonah

2434
01:38:26,719 --> 01:38:34,159
thank you uh can you hear see me

2435
01:38:31,760 --> 01:38:36,400
hear you you've pressed the camera

2436
01:38:34,159 --> 01:38:38,480
button but i

2437
01:38:36,400 --> 01:38:40,159
i'm seeing like a red thing where it's

2438
01:38:38,480 --> 01:38:40,718
failing to come through but at least we

2439
01:38:40,159 --> 01:38:44,400
can hear you

2440
01:38:40,719 --> 01:38:48,159
as long as you can hear me

2441
01:38:44,400 --> 01:38:51,040
um so alan's making me think about this

2442
01:38:48,159 --> 01:38:52,159
but uh so i i came up this i'll say i'll

2443
01:38:51,040 --> 01:38:54,320
say what i can represent

2444
01:38:52,159 --> 01:38:55,679
and also see what talent's making me

2445
01:38:54,320 --> 01:38:58,480
think about

2446
01:38:55,679 --> 01:38:59,600
so some others have also noted this on

2447
01:38:58,480 --> 01:39:02,559
the jabber chat but

2448
01:38:59,600 --> 01:39:03,440
i just want to generally draw gently

2449
01:39:02,560 --> 01:39:06,159
draw

2450
01:39:03,440 --> 01:39:07,759
attention to the fact that this i fear

2451
01:39:06,159 --> 01:39:08,480
that this might be trying to do too many

2452
01:39:07,760 --> 01:39:10,560
things

2453
01:39:08,480 --> 01:39:12,000
at the same time and in doing that it

2454
01:39:10,560 --> 01:39:16,000
does seem a little bit

2455
01:39:12,000 --> 01:39:19,199
like taps and that scares me

2456
01:39:16,000 --> 01:39:21,040
partly because that's that's uh

2457
01:39:19,199 --> 01:39:23,678
when when something's not driven very

2458
01:39:21,040 --> 01:39:25,600
strongly by one application

2459
01:39:23,679 --> 01:39:27,760
that tends to have a flavor of trying to

2460
01:39:25,600 --> 01:39:29,920
satisfy a lot of requirements

2461
01:39:27,760 --> 01:39:31,760
so with that i'll ask the ques i want to

2462
01:39:29,920 --> 01:39:33,440
ask the question of how many of these

2463
01:39:31,760 --> 01:39:36,639
are actually use cases

2464
01:39:33,440 --> 01:39:38,799
that are currently uh in play how many

2465
01:39:36,639 --> 01:39:40,320
people want to use which particular use

2466
01:39:38,800 --> 01:39:45,360
cases the question i would ask

2467
01:39:40,320 --> 01:39:45,360
now i i came up to say this sounds like

2468
01:39:45,520 --> 01:39:48,800
if we wanted to be an evolution of

2469
01:39:46,960 --> 01:39:51,440
websockets then

2470
01:39:48,800 --> 01:39:51,920
quick transport seems like a good step

2471
01:39:51,440 --> 01:39:53,759
forward

2472
01:39:51,920 --> 01:39:56,000
with a backup as something like web

2473
01:39:53,760 --> 01:39:58,239
sockets it would have

2474
01:39:56,000 --> 01:39:59,520
be easier to see this as an evolution in

2475
01:39:58,239 --> 01:40:02,879
that sense

2476
01:39:59,520 --> 01:40:04,639
but um and and therefore i would answer

2477
01:40:02,880 --> 01:40:06,080
the questions that you have there as

2478
01:40:04,639 --> 01:40:08,000
well maybe pulling connections is not

2479
01:40:06,080 --> 01:40:10,719
that much worth it and tcp

2480
01:40:08,000 --> 01:40:12,560
fallback i would say in general uh you

2481
01:40:10,719 --> 01:40:13,520
definitely want tcp fallback if you want

2482
01:40:12,560 --> 01:40:15,760
whatever api

2483
01:40:13,520 --> 01:40:17,600
you are using to basically work all the

2484
01:40:15,760 --> 01:40:21,440
time it's because we can't assume that

2485
01:40:17,600 --> 01:40:24,719
quick will work all the time um

2486
01:40:21,440 --> 01:40:26,400
but yeah uh alan allen is uh ireland

2487
01:40:24,719 --> 01:40:28,000
has made a good point that there are

2488
01:40:26,400 --> 01:40:30,638
cases and in fact he's

2489
01:40:28,000 --> 01:40:32,800
strongly suggesting that it might be

2490
01:40:30,639 --> 01:40:34,960
necessary to pool connections

2491
01:40:32,800 --> 01:40:36,719
um in which case then i would ask is

2492
01:40:34,960 --> 01:40:40,560
quick transport necessary

2493
01:40:36,719 --> 01:40:40,560
should we just go to http 3 transport

2494
01:40:44,719 --> 01:40:50,800
thanks jana bernard

2495
01:40:47,760 --> 01:40:53,119
or yeah go ahead uh

2496
01:40:50,800 --> 01:40:54,880
janna asked some question and i'm trying

2497
01:40:53,119 --> 01:40:55,759
to remember what was the very question

2498
01:40:54,880 --> 01:40:57,840
at the beginning

2499
01:40:55,760 --> 01:41:00,080
oh the question was are there use cases

2500
01:40:57,840 --> 01:41:00,800
that are for each of those and my answer

2501
01:41:00,080 --> 01:41:04,239
is

2502
01:41:00,800 --> 01:41:07,040
i believe that for each of the proposed

2503
01:41:04,239 --> 01:41:09,678
uh transfers there is at least one uh

2504
01:41:07,040 --> 01:41:12,480
person who is like

2505
01:41:09,679 --> 01:41:14,080
actively interested in it existing which

2506
01:41:12,480 --> 01:41:16,239
is why those web transports

2507
01:41:14,080 --> 01:41:17,440
uh which why we defined all of those in

2508
01:41:16,239 --> 01:41:23,199
first place

2509
01:41:17,440 --> 01:41:23,199
uh but that's my answer anyway bernard

2510
01:41:27,360 --> 01:41:32,799
okay um yeah i wanted to

2511
01:41:30,480 --> 01:41:35,678
follow up on what alan said uh because

2512
01:41:32,800 --> 01:41:39,199
i'm hearing some of the same things that

2513
01:41:35,679 --> 01:41:40,960
um there is a desire to pool http with

2514
01:41:39,199 --> 01:41:44,320
web transport

2515
01:41:40,960 --> 01:41:46,239
and i uh and not just web

2516
01:41:44,320 --> 01:41:48,320
transports with each other but but it

2517
01:41:46,239 --> 01:41:50,638
pooling them together

2518
01:41:48,320 --> 01:41:52,400
some of the scenarios i've heard if you

2519
01:41:50,639 --> 01:41:54,000
think about it

2520
01:41:52,400 --> 01:41:56,879
it's both for the scalability which

2521
01:41:54,000 --> 01:41:59,199
allen mentioned um also the traversal

2522
01:41:56,880 --> 01:42:00,239
issues just just to have everything go

2523
01:41:59,199 --> 01:42:03,199
over the same

2524
01:42:00,239 --> 01:42:03,678
connection but also because i think

2525
01:42:03,199 --> 01:42:07,119
there's

2526
01:42:03,679 --> 01:42:10,639
a desire to significantly extend the web

2527
01:42:07,119 --> 01:42:12,799
so that you have not just uh

2528
01:42:10,639 --> 01:42:15,360
request responses that are reliable but

2529
01:42:12,800 --> 01:42:19,199
can also get datagrams

2530
01:42:15,360 --> 01:42:21,679
um coming back now

2531
01:42:19,199 --> 01:42:23,519
so in some ways with what they're

2532
01:42:21,679 --> 01:42:24,800
looking for is an entirely new web

2533
01:42:23,520 --> 01:42:26,960
ecosystem

2534
01:42:24,800 --> 01:42:28,239
that supports datagrams kind of natively

2535
01:42:26,960 --> 01:42:30,880
as part of as part

2536
01:42:28,239 --> 01:42:33,040
naturally as part of the web um it is a

2537
01:42:30,880 --> 01:42:35,360
big ask because you're essentially

2538
01:42:33,040 --> 01:42:37,440
you want all of this you want web

2539
01:42:35,360 --> 01:42:39,280
transfer to work with http 3

2540
01:42:37,440 --> 01:42:41,678
to work with masks so it's kind of like

2541
01:42:39,280 --> 01:42:43,040
an entirely new ecosystem so it's a very

2542
01:42:41,679 --> 01:42:44,560
big bet

2543
01:42:43,040 --> 01:42:46,320
um you know and there are many many ways

2544
01:42:44,560 --> 01:42:46,800
in which that that could fail if pieces

2545
01:42:46,320 --> 01:42:50,159
of it

2546
01:42:46,800 --> 01:42:52,080
don't work together um but that's

2547
01:42:50,159 --> 01:42:53,199
that's kind of what i hear is that is

2548
01:42:52,080 --> 01:42:55,119
that there's a

2549
01:42:53,199 --> 01:42:57,280
they would see that if you could make

2550
01:42:55,119 --> 01:42:59,839
everything work and get the pooling of

2551
01:42:57,280 --> 01:43:02,000
both that would be the biggest win

2552
01:42:59,840 --> 01:43:03,760
it's also probably the hardest thing to

2553
01:43:02,000 --> 01:43:06,320
actually make work

2554
01:43:03,760 --> 01:43:08,080
um which is the tricky part because when

2555
01:43:06,320 --> 01:43:09,599
you know i've gotten into trying to

2556
01:43:08,080 --> 01:43:10,000
figure out what would be needed to do it

2557
01:43:09,600 --> 01:43:11,440
it

2558
01:43:10,000 --> 01:43:13,440
does seem like there are a lot of moving

2559
01:43:11,440 --> 01:43:17,040
parts but it is

2560
01:43:13,440 --> 01:43:17,040
it is a big win if you can make it all

2561
01:43:22,840 --> 01:43:25,840
work

2562
01:43:28,880 --> 01:43:32,159
yeah i would second a lot of what i

2563
01:43:31,840 --> 01:43:36,960
think

2564
01:43:32,159 --> 01:43:38,799
ecker was saying uh which is that

2565
01:43:36,960 --> 01:43:40,800
i think it is it is very important that

2566
01:43:38,800 --> 01:43:43,440
we end up with just one thing

2567
01:43:40,800 --> 01:43:45,600
um but i think if we want to be able to

2568
01:43:43,440 --> 01:43:47,759
deploy this stuff

2569
01:43:45,600 --> 01:43:48,880
everywhere we're going to need something

2570
01:43:47,760 --> 01:43:51,119
for the cases where

2571
01:43:48,880 --> 01:43:52,000
quick isn't getting through and and we

2572
01:43:51,119 --> 01:43:55,920
know we have that

2573
01:43:52,000 --> 01:43:59,199
for web pages that are using http

2574
01:43:55,920 --> 01:44:01,679
uh because we can fall back to h1 and h2

2575
01:43:59,199 --> 01:44:02,400
um but we haven't defined what you do

2576
01:44:01,679 --> 01:44:06,000
for

2577
01:44:02,400 --> 01:44:09,199
the rest of the things that use quick

2578
01:44:06,000 --> 01:44:11,360
as a transport without http and i was

2579
01:44:09,199 --> 01:44:12,239
uh really excited when we when we were

2580
01:44:11,360 --> 01:44:14,639
doing

2581
01:44:12,239 --> 01:44:16,080
quick and separating out the kind of

2582
01:44:14,639 --> 01:44:19,679
multiplexed streaming

2583
01:44:16,080 --> 01:44:20,880
side of things from the http semantics

2584
01:44:19,679 --> 01:44:23,119
side of things

2585
01:44:20,880 --> 01:44:25,199
uh but i think either we need to hop on

2586
01:44:23,119 --> 01:44:26,480
the hdp bandwagon and use that to go

2587
01:44:25,199 --> 01:44:29,919
across everything

2588
01:44:26,480 --> 01:44:30,718
or uh and i i say this not particularly

2589
01:44:29,920 --> 01:44:32,639
caring

2590
01:44:30,719 --> 01:44:34,159
uh what we end up with as long as we

2591
01:44:32,639 --> 01:44:36,480
meet those needs

2592
01:44:34,159 --> 01:44:38,159
or we go with some of the kind of

2593
01:44:36,480 --> 01:44:38,559
fallback transport style thing which i

2594
01:44:38,159 --> 01:44:41,280
think

2595
01:44:38,560 --> 01:44:42,080
victor had in the other section of that

2596
01:44:41,280 --> 01:44:44,800
grid

2597
01:44:42,080 --> 01:44:45,840
of options but i think we need we need

2598
01:44:44,800 --> 01:44:48,560
some way

2599
01:44:45,840 --> 01:44:49,040
both for web transport and potentially

2600
01:44:48,560 --> 01:44:51,679
even

2601
01:44:49,040 --> 01:44:53,519
just in the you know rest of quick and

2602
01:44:51,679 --> 01:44:56,480
the other use cases for quick

2603
01:44:53,520 --> 01:44:57,920
to be able to have that fall back either

2604
01:44:56,480 --> 01:44:59,280
it seems like we end up pushing

2605
01:44:57,920 --> 01:45:00,639
everything that needs that fall back up

2606
01:44:59,280 --> 01:45:03,199
to h3 and then

2607
01:45:00,639 --> 01:45:04,080
you know kind of side going sideways

2608
01:45:03,199 --> 01:45:05,360
stage two

2609
01:45:04,080 --> 01:45:07,440
or we need to define something that

2610
01:45:05,360 --> 01:45:09,280
allows us to do that kind of

2611
01:45:07,440 --> 01:45:10,799
uh uni bi-directional stream

2612
01:45:09,280 --> 01:45:13,360
multiplexing

2613
01:45:10,800 --> 01:45:14,560
uh over something that does traverse the

2614
01:45:13,360 --> 01:45:15,519
corners of the internet where quick

2615
01:45:14,560 --> 01:45:17,760
doesn't

2616
01:45:15,520 --> 01:45:18,800
um and and we can do that without http

2617
01:45:17,760 --> 01:45:20,719
and that would be great

2618
01:45:18,800 --> 01:45:23,920
but it does seem as though some sort of

2619
01:45:20,719 --> 01:45:23,920
a fallback is necessary

2620
01:45:28,320 --> 01:45:34,480
thanks eric um so

2621
01:45:31,520 --> 01:45:34,880
to try to get us to converge a little

2622
01:45:34,480 --> 01:45:38,799
bit

2623
01:45:34,880 --> 01:45:40,560
here and uh i'm

2624
01:45:38,800 --> 01:45:42,239
i guess speaking as chair trying to

2625
01:45:40,560 --> 01:45:44,000
formulate the consensus that's emerging

2626
01:45:42,239 --> 01:45:45,759
but please feel free to speak up if you

2627
01:45:44,000 --> 01:45:48,320
think i'm getting it wrong

2628
01:45:45,760 --> 01:45:50,639
i'm getting a sense from the room that

2629
01:45:48,320 --> 01:45:53,840
most of the folks who have spoken up

2630
01:45:50,639 --> 01:45:56,159
agree that of at least

2631
01:45:53,840 --> 01:45:58,480
if we look at the quick base transport

2632
01:45:56,159 --> 01:46:01,519
so quick transform http 3 transport i

2633
01:45:58,480 --> 01:46:03,360
think we have consensus that we only

2634
01:46:01,520 --> 01:46:06,800
need one of the two

2635
01:46:03,360 --> 01:46:08,480
um i like is the

2636
01:46:06,800 --> 01:46:10,560
main sense i'm getting from most people

2637
01:46:08,480 --> 01:46:12,799
in the room uh then

2638
01:46:10,560 --> 01:46:13,920
if that's the case and we need to pick

2639
01:46:12,800 --> 01:46:17,360
one

2640
01:46:13,920 --> 01:46:21,119
uh let's tease apart what proper

2641
01:46:17,360 --> 01:46:24,159
what are the pros and cons of each and

2642
01:46:21,119 --> 01:46:25,199
the main ones i'm seeing and please jump

2643
01:46:24,159 --> 01:46:28,719
into the qtad

2644
01:46:25,199 --> 01:46:32,638
more is h3 transport

2645
01:46:28,719 --> 01:46:36,320
allows pooling so what that means

2646
01:46:32,639 --> 01:46:38,239
is if you you know you you

2647
01:46:36,320 --> 01:46:39,759
sorry what just just a point of order

2648
01:46:38,239 --> 01:46:41,040
maybe we could get consensus on that

2649
01:46:39,760 --> 01:46:42,080
point you just made about there should

2650
01:46:41,040 --> 01:46:43,519
be only one

2651
01:46:42,080 --> 01:46:45,119
and then we can move on from there

2652
01:46:43,520 --> 01:46:46,159
because i think that i think that

2653
01:46:45,119 --> 01:46:50,080
yeah actually that's so that's a very

2654
01:46:46,159 --> 01:46:50,080
good idea uh thanks hecker um

2655
01:46:50,800 --> 01:46:55,679
yeah uh bernard does that sound good uh

2656
01:46:53,679 --> 01:46:58,080
to try to do a hum about the

2657
01:46:55,679 --> 01:46:59,679
of specifically quick transport and b3

2658
01:46:58,080 --> 01:47:02,559
transport if people agree that we there

2659
01:46:59,679 --> 01:47:02,560
should only be one

2660
01:47:03,360 --> 01:47:11,280
you're muted bernard

2661
01:47:08,320 --> 01:47:11,920
i'm going to assume yes so we tested out

2662
01:47:11,280 --> 01:47:15,360
this

2663
01:47:11,920 --> 01:47:16,800
uh virtual hum

2664
01:47:15,360 --> 01:47:18,799
tool at the beginning of the session and

2665
01:47:16,800 --> 01:47:23,840
it seemed to work so

2666
01:47:18,800 --> 01:47:23,840
let me type in the question

2667
01:47:25,280 --> 01:47:28,639
victor says he has a question before the

2668
01:47:27,520 --> 01:47:31,920
hum

2669
01:47:28,639 --> 01:47:34,560
uh go right uh speak up victor

2670
01:47:31,920 --> 01:47:35,679
i wanted to ask specifically ecker and

2671
01:47:34,560 --> 01:47:37,679
martin

2672
01:47:35,679 --> 01:47:39,360
since they repeat as his point why do

2673
01:47:37,679 --> 01:47:41,600
you believe that there should be only

2674
01:47:39,360 --> 01:47:41,599
one

2675
01:47:43,440 --> 01:47:47,440
um okay uh martin recker if one of you

2676
01:47:46,560 --> 01:47:50,960
two wants to

2677
01:47:47,440 --> 01:47:52,239
speak up uh about this

2678
01:47:50,960 --> 01:47:54,639
i would have thought the burden of proof

2679
01:47:52,239 --> 01:47:57,839
is on people asking for two

2680
01:47:54,639 --> 01:48:01,119
um i want fewer things and

2681
01:47:57,840 --> 01:48:02,719
i don't necessarily see that we need

2682
01:48:01,119 --> 01:48:04,719
the complexity unless until the

2683
01:48:02,719 --> 01:48:06,480
complexity is justified

2684
01:48:04,719 --> 01:48:09,679
i haven't seen any real justification

2685
01:48:06,480 --> 01:48:09,678
for the complexity

2686
01:48:12,400 --> 01:48:15,759
thanks yeah now that that makes sense

2687
01:48:14,560 --> 01:48:19,520
like at the end of the day

2688
01:48:15,760 --> 01:48:20,480
um our job as you know writing itf

2689
01:48:19,520 --> 01:48:22,719
protocols is

2690
01:48:20,480 --> 01:48:24,480
generally not to make the biggest buffet

2691
01:48:22,719 --> 01:48:26,639
available is to

2692
01:48:24,480 --> 01:48:28,638
try to find one thing that works i i

2693
01:48:26,639 --> 01:48:30,000
think i'm from a personal level not as

2694
01:48:28,639 --> 01:48:31,119
chair really in agreement with martin on

2695
01:48:30,000 --> 01:48:35,119
that one

2696
01:48:31,119 --> 01:48:38,320
um david um

2697
01:48:35,119 --> 01:48:39,440
if you don't mind um i think

2698
01:48:38,320 --> 01:48:41,280
that there's been a parallel

2699
01:48:39,440 --> 01:48:41,678
conversation going on on the on the on

2700
01:48:41,280 --> 01:48:44,880
this

2701
01:48:41,679 --> 01:48:46,320
on the channel chat channel

2702
01:48:44,880 --> 01:48:47,840
and you might want to hear out what

2703
01:48:46,320 --> 01:48:48,480
philip has to offer he's been in the

2704
01:48:47,840 --> 01:48:50,400
queue

2705
01:48:48,480 --> 01:48:52,320
just because it's it might help people

2706
01:48:50,400 --> 01:48:54,239
make up their minds the idea here is to

2707
01:48:52,320 --> 01:48:57,119
offer an alternative way of doing

2708
01:48:54,239 --> 01:48:58,239
pooling without having to do http 3 this

2709
01:48:57,119 --> 01:49:00,320
would be mask

2710
01:48:58,239 --> 01:49:01,280
and quick transfer right i'm just

2711
01:49:00,320 --> 01:49:03,199
suggesting that

2712
01:49:01,280 --> 01:49:04,800
before you ask the question it might be

2713
01:49:03,199 --> 01:49:06,559
helpful for people to consider that as

2714
01:49:04,800 --> 01:49:09,040
well

2715
01:49:06,560 --> 01:49:12,320
okay um philip if you want to jump in

2716
01:49:09,040 --> 01:49:12,320
and make your case go ahead

2717
01:49:12,880 --> 01:49:18,159
hi so um i

2718
01:49:16,080 --> 01:49:20,000
when we had the discussion about whether

2719
01:49:18,159 --> 01:49:22,480
we want pooling or not

2720
01:49:20,000 --> 01:49:24,719
um i came with the idea that we can

2721
01:49:22,480 --> 01:49:27,919
implement part of the pooling

2722
01:49:24,719 --> 01:49:29,119
just by adding mask beneath web

2723
01:49:27,920 --> 01:49:31,360
transports

2724
01:49:29,119 --> 01:49:32,239
so with this you'll have don't have to

2725
01:49:31,360 --> 01:49:34,719
care about another

2726
01:49:32,239 --> 01:49:35,440
layer of hole punching or session setup

2727
01:49:34,719 --> 01:49:38,080
because you can

2728
01:49:35,440 --> 01:49:39,199
just reuse the http three session you

2729
01:49:38,080 --> 01:49:42,080
used

2730
01:49:39,199 --> 01:49:42,400
um and then piggyback on this session

2731
01:49:42,080 --> 01:49:44,559
with

2732
01:49:42,400 --> 01:49:45,839
mask all the web transport streams you

2733
01:49:44,560 --> 01:49:48,560
need within a pool

2734
01:49:45,840 --> 01:49:50,239
you could also try to add some kind of

2735
01:49:48,560 --> 01:49:54,400
prioritization

2736
01:49:50,239 --> 01:49:57,839
uh of fate sharing within this

2737
01:49:54,400 --> 01:49:59,040
and so you could get away with pooling

2738
01:49:57,840 --> 01:50:02,080
at this layer

2739
01:49:59,040 --> 01:50:04,560
and still having the simple um

2740
01:50:02,080 --> 01:50:05,840
quick transport uh semantics beneath

2741
01:50:04,560 --> 01:50:07,840
also this

2742
01:50:05,840 --> 01:50:10,400
if you have a multiplexed use case where

2743
01:50:07,840 --> 01:50:12,880
if a load balancer

2744
01:50:10,400 --> 01:50:14,480
only this you load balancer needs to

2745
01:50:12,880 --> 01:50:16,320
talk http 3

2746
01:50:14,480 --> 01:50:17,678
and you can get the much easier quick

2747
01:50:16,320 --> 01:50:20,080
transport

2748
01:50:17,679 --> 01:50:23,199
at the back end systems so this would be

2749
01:50:20,080 --> 01:50:25,679
a compromise of both designs

2750
01:50:23,199 --> 01:50:28,960
without having to define those protocols

2751
01:50:25,679 --> 01:50:28,960
at the web transport level

2752
01:50:29,199 --> 01:50:32,719
thanks philip so to add to the context

2753
01:50:31,840 --> 01:50:36,159
as uh

2754
01:50:32,719 --> 01:50:38,960
someone who is enthusiastic about mask

2755
01:50:36,159 --> 01:50:40,879
uh so that that would definitely work it

2756
01:50:38,960 --> 01:50:45,040
would involve double encryption

2757
01:50:40,880 --> 01:50:46,800
for um for quick and on top of that it

2758
01:50:45,040 --> 01:50:49,199
would also like require browsers to

2759
01:50:46,800 --> 01:50:50,639
implement mask which well

2760
01:50:49,199 --> 01:50:52,638
i'm okay with but i'm not sure if

2761
01:50:50,639 --> 01:50:53,360
everyone is but that's definitely an

2762
01:50:52,639 --> 01:50:56,800
alternate

2763
01:50:53,360 --> 01:50:58,639
view as well but um thanks uh we're

2764
01:50:56,800 --> 01:50:59,840
we're 10 minutes to time so i'm gonna

2765
01:50:58,639 --> 01:51:03,679
switch now to the

2766
01:50:59,840 --> 01:51:06,000
um to the to the hum so the

2767
01:51:03,679 --> 01:51:07,199
and of course because i switched away

2768
01:51:06,000 --> 01:51:11,599
forgot what i typed

2769
01:51:07,199 --> 01:51:16,159
thank you but so here's the question um

2770
01:51:11,599 --> 01:51:19,119
the um the tool is going to say

2771
01:51:16,159 --> 01:51:20,400
do you want to raise your hand or not uh

2772
01:51:19,119 --> 01:51:21,920
and so if you

2773
01:51:20,400 --> 01:51:23,519
raise your hand it means there should

2774
01:51:21,920 --> 01:51:26,000
only be one

2775
01:51:23,520 --> 01:51:27,599
if you do not it means you think we

2776
01:51:26,000 --> 01:51:30,719
should do both

2777
01:51:27,599 --> 01:51:33,199
so all right i clicked the button so

2778
01:51:30,719 --> 01:51:34,880
if if you believe we should only do one

2779
01:51:33,199 --> 01:51:35,759
of quick transport entry transport click

2780
01:51:34,880 --> 01:51:39,040
raise your hand

2781
01:51:35,760 --> 01:51:42,159
now if you think we should do both click

2782
01:51:39,040 --> 01:51:42,159
do not raise your hand

2783
01:51:42,719 --> 01:51:48,159
do not raise your hand

2784
01:51:46,000 --> 01:51:50,400
here click do not now right here i'm

2785
01:51:48,159 --> 01:51:50,400
done

2786
01:51:55,119 --> 01:52:00,880
disappear before i go to click it oh

2787
01:51:58,639 --> 01:52:02,080
sorry i messed up i pressed the wrong of

2788
01:52:00,880 --> 01:52:05,280
the button again

2789
01:52:02,080 --> 01:52:06,000
uh let me let me restart it i apologize

2790
01:52:05,280 --> 01:52:10,080
people

2791
01:52:06,000 --> 01:52:10,080
i'm nice thank you all right uh

2792
01:52:11,280 --> 01:52:14,320
yeah the the button from the cherished

2793
01:52:13,599 --> 01:52:16,719
perspective

2794
01:52:14,320 --> 01:52:17,679
looks like a confirm your choice when it

2795
01:52:16,719 --> 01:52:19,360
means just

2796
01:52:17,679 --> 01:52:20,960
stop everyone else from voting which is

2797
01:52:19,360 --> 01:52:22,639
really what not what i was trying to do

2798
01:52:20,960 --> 01:52:26,080
apologies everyone

2799
01:52:22,639 --> 01:52:31,840
um all right let's all let it sit for

2800
01:52:26,080 --> 01:52:31,840
for a bit um

2801
01:52:32,159 --> 01:52:36,239
but i think the intention actually was

2802
01:52:33,599 --> 01:52:38,960
to ask two questions if you want to have

2803
01:52:36,239 --> 01:52:38,959
one or the other

2804
01:52:39,440 --> 01:52:44,080
right now the question is if you think

2805
01:52:42,239 --> 01:52:46,080
we should only have one

2806
01:52:44,080 --> 01:52:48,080
raise your hand if you think we should

2807
01:52:46,080 --> 01:52:49,760
do both do not raise your hand

2808
01:52:48,080 --> 01:52:51,280
what i'm saying is if you think we

2809
01:52:49,760 --> 01:52:52,080
should we should do both should be a

2810
01:52:51,280 --> 01:52:54,159
separate

2811
01:52:52,080 --> 01:52:56,840
question or separate show hands or

2812
01:52:54,159 --> 01:52:58,960
whatever that was the intention but it's

2813
01:52:56,840 --> 01:53:00,800
fine

2814
01:52:58,960 --> 01:53:02,880
i'm not sure i understand maria but

2815
01:53:00,800 --> 01:53:04,480
maybe we can take it offline

2816
01:53:02,880 --> 01:53:06,000
because you could ask both the questions

2817
01:53:04,480 --> 01:53:07,919
and then you could just say

2818
01:53:06,000 --> 01:53:10,000
people could just not raise their hand

2819
01:53:07,920 --> 01:53:11,280
for any question indicating that they

2820
01:53:10,000 --> 01:53:13,040
don't care whatever that's why you

2821
01:53:11,280 --> 01:53:13,920
should ask two separate questions but

2822
01:53:13,040 --> 01:53:15,519
anyway

2823
01:53:13,920 --> 01:53:17,119
i see that that sounds like it would

2824
01:53:15,520 --> 01:53:22,159
take longer though

2825
01:53:17,119 --> 01:53:22,159
but normal by not doing anything yeah

2826
01:53:22,400 --> 01:53:26,559
all right uh i'm going to end it now in

2827
01:53:26,080 --> 01:53:28,960
the next

2828
01:53:26,560 --> 01:53:31,360
10 seconds if you haven't voted go right

2829
01:53:28,960 --> 01:53:31,360
ahead

2830
01:53:33,360 --> 01:53:39,759
all right um

2831
01:53:36,400 --> 01:53:42,400
so then i i guess

2832
01:53:39,760 --> 01:53:43,679
in the i'm not so i i i see the numbers

2833
01:53:42,400 --> 01:53:45,360
i don't know if everyone else

2834
01:53:43,679 --> 01:53:48,320
does i don't know if i'm supposed to

2835
01:53:45,360 --> 01:53:50,639
share them in the spirit of the hums

2836
01:53:48,320 --> 01:53:53,679
um you can see them all right well then

2837
01:53:50,639 --> 01:53:56,000
so it was 19

2838
01:53:53,679 --> 01:53:57,520
19 raised your hand and 10 do not raise

2839
01:53:56,000 --> 01:54:00,480
your hand so

2840
01:53:57,520 --> 01:54:01,599
let's say two-thirds one-third so not a

2841
01:54:00,480 --> 01:54:05,199
clear

2842
01:54:01,599 --> 01:54:10,400
absolute consensus that's for sure

2843
01:54:05,199 --> 01:54:13,440
um victor you want to say something

2844
01:54:10,400 --> 01:54:14,080
yeah i actually have the proposal that i

2845
01:54:13,440 --> 01:54:16,559
believe

2846
01:54:14,080 --> 01:54:18,559
with which i want to believe which would

2847
01:54:16,560 --> 01:54:21,679
allow us to move ahead

2848
01:54:18,560 --> 01:54:24,000
and i i want to first reply to my ideas

2849
01:54:21,679 --> 01:54:27,679
of why i did not raise my hand

2850
01:54:24,000 --> 01:54:29,199
and if you don't mind that can i

2851
01:54:27,679 --> 01:54:32,000
sure but make it quick because we have

2852
01:54:29,199 --> 01:54:35,678
five minutes left so my basic logic

2853
01:54:32,000 --> 01:54:38,639
is that there can the argument for

2854
01:54:35,679 --> 01:54:39,280
is that when our web developers who have

2855
01:54:38,639 --> 01:54:42,560
different

2856
01:54:39,280 --> 01:54:43,840
uh opinions on the pulling slash

2857
01:54:42,560 --> 01:54:46,400
complexity tradeoff

2858
01:54:43,840 --> 01:54:47,840
and argument against are we should not

2859
01:54:46,400 --> 01:54:49,679
define too many sayings

2860
01:54:47,840 --> 01:54:51,760
and that's too many things to implement

2861
01:54:49,679 --> 01:54:52,239
for browser and the reason i'm leaning

2862
01:54:51,760 --> 01:54:55,599
towards

2863
01:54:52,239 --> 01:54:57,839
argument 4 is that i personally and i'm

2864
01:54:55,599 --> 01:54:58,159
not sure if there are ietf documents but

2865
01:54:57,840 --> 01:55:00,800
i

2866
01:54:58,159 --> 01:55:02,080
personally trying to favor uh problems

2867
01:55:00,800 --> 01:55:04,560
of web developers

2868
01:55:02,080 --> 01:55:06,800
against concerns of browser implementers

2869
01:55:04,560 --> 01:55:10,239
or theoretical people

2870
01:55:06,800 --> 01:55:13,520
now my specific proposal is that we

2871
01:55:10,239 --> 01:55:15,199
adopt quick transport as a starting

2872
01:55:13,520 --> 01:55:17,520
point because it sounds that it

2873
01:55:15,199 --> 01:55:18,799
satisfies at least some use cases for

2874
01:55:17,520 --> 01:55:22,000
everyone

2875
01:55:18,800 --> 01:55:24,239
but we do not preclude adoption of http

2876
01:55:22,000 --> 01:55:26,719
transport in case we decide that the

2877
01:55:24,239 --> 01:55:28,959
working group

2878
01:55:26,719 --> 01:55:30,639
in case there is a practical experience

2879
01:55:28,960 --> 01:55:32,800
that shows it's beneficial and the

2880
01:55:30,639 --> 01:55:36,080
working group has resources

2881
01:55:32,800 --> 01:55:39,040
to ship that draft that way

2882
01:55:36,080 --> 01:55:41,519
it's kind of we are learning to walk

2883
01:55:39,040 --> 01:55:46,880
before we're learning to run

2884
01:55:41,520 --> 01:55:49,040
that is my opinion um

2885
01:55:46,880 --> 01:55:51,760
ecker do you have a is that a response

2886
01:55:49,040 --> 01:55:51,760
specific to this

2887
01:55:54,480 --> 01:55:59,678
however the chairs won uh or i'm asking

2888
01:55:58,080 --> 01:56:01,040
are you gonna respond directly to what

2889
01:55:59,679 --> 01:56:01,520
victor is saying or do something yes i

2890
01:56:01,040 --> 01:56:05,280
was

2891
01:56:01,520 --> 01:56:06,960
i was go ahead okay um yeah i guess i

2892
01:56:05,280 --> 01:56:08,559
would not be in favor of that proposal

2893
01:56:06,960 --> 01:56:10,080
um because that seems to bake in quick

2894
01:56:08,560 --> 01:56:11,280
transport and then have a high priority

2895
01:56:10,080 --> 01:56:13,840
we'll end up doing both

2896
01:56:11,280 --> 01:56:14,800
so i think like we've i think we are

2897
01:56:13,840 --> 01:56:16,000
getting close to having the information

2898
01:56:14,800 --> 01:56:17,199
we need to make a decision and if we're

2899
01:56:16,000 --> 01:56:18,960
not we should induce that information

2900
01:56:17,199 --> 01:56:20,400
and make a decision rather than

2901
01:56:18,960 --> 01:56:23,040
rather than deciding on one would like

2902
01:56:20,400 --> 01:56:27,280
them maybe we'll adopt another later

2903
01:56:23,040 --> 01:56:30,639
so thanks thanks uh ecker um

2904
01:56:27,280 --> 01:56:34,159
so i'm thinking so it sounds like

2905
01:56:30,639 --> 01:56:37,280
there's a majority of folks who

2906
01:56:34,159 --> 01:56:39,440
would prefer to only do one and

2907
01:56:37,280 --> 01:56:40,800
one of the interesting things here is

2908
01:56:39,440 --> 01:56:43,919
that we're

2909
01:56:40,800 --> 01:56:46,800
we're not time-bound so my

2910
01:56:43,920 --> 01:56:47,679
gut tells me that maybe we should pick

2911
01:56:46,800 --> 01:56:50,639
one

2912
01:56:47,679 --> 01:56:51,760
to start only adopt one of the two for

2913
01:56:50,639 --> 01:56:53,920
now

2914
01:56:51,760 --> 01:56:54,960
and we can always adopt a second one

2915
01:56:53,920 --> 01:56:58,080
down the road

2916
01:56:54,960 --> 01:56:59,920
that sounds like something where i am

2917
01:56:58,080 --> 01:57:00,880
yes effectively kicking the can down the

2918
01:56:59,920 --> 01:57:02,880
road but at least

2919
01:57:00,880 --> 01:57:04,400
we it allows us to pick one for now and

2920
01:57:02,880 --> 01:57:06,639
to focus on one

2921
01:57:04,400 --> 01:57:08,400
for now so we can actually like get

2922
01:57:06,639 --> 01:57:10,320
going and adopt one and

2923
01:57:08,400 --> 01:57:11,920
like start you know interop testing as

2924
01:57:10,320 --> 01:57:15,599
opposed to only having chrome

2925
01:57:11,920 --> 01:57:18,800
implement this um do folks have thoughts

2926
01:57:15,599 --> 01:57:20,400
on this proposal

2927
01:57:18,800 --> 01:57:21,920
and i'm realizing we're getting really

2928
01:57:20,400 --> 01:57:24,719
short on time so

2929
01:57:21,920 --> 01:57:27,920
please keep your your comments as short

2930
01:57:24,719 --> 01:57:29,679
as possible alan go ahead

2931
01:57:27,920 --> 01:57:31,280
okay i i think i just wanted a second

2932
01:57:29,679 --> 01:57:33,679
what ecker said which is that

2933
01:57:31,280 --> 01:57:34,320
uh if we if we're adopting quick

2934
01:57:33,679 --> 01:57:36,880
transport

2935
01:57:34,320 --> 01:57:37,440
now and there's it just creates a high

2936
01:57:36,880 --> 01:57:39,119
bar

2937
01:57:37,440 --> 01:57:41,119
to adopt a degree when it sounds like

2938
01:57:39,119 --> 01:57:42,480
there is consistent about which

2939
01:57:41,119 --> 01:57:45,440
direction we're going

2940
01:57:42,480 --> 01:57:47,040
i mean i really view h3 as a superset of

2941
01:57:45,440 --> 01:57:49,519
what quick transport can do

2942
01:57:47,040 --> 01:57:51,360
and you know you don't have to use the

2943
01:57:49,520 --> 01:57:53,280
features that you're not using

2944
01:57:51,360 --> 01:57:54,400
or that you don't want to so i just

2945
01:57:53,280 --> 01:57:55,519
don't think that adopting quick

2946
01:57:54,400 --> 01:57:58,559
transport right now is

2947
01:57:55,520 --> 01:58:01,920
what i've been favoring okay

2948
01:57:58,560 --> 01:58:01,920
thanks alan erkinear

2949
01:58:03,440 --> 01:58:07,759
that i think there's a there's a risk

2950
01:58:05,679 --> 01:58:09,840
here i don't necessarily

2951
01:58:07,760 --> 01:58:11,199
care as much about which one we pick

2952
01:58:09,840 --> 01:58:12,880
although i think we do have a set of

2953
01:58:11,199 --> 01:58:16,400
needs that we need to fulfill

2954
01:58:12,880 --> 01:58:17,920
but i i think going with one and then

2955
01:58:16,400 --> 01:58:20,320
telling ourselves that we're maybe gonna

2956
01:58:17,920 --> 01:58:21,760
go with the other uh

2957
01:58:20,320 --> 01:58:22,960
it would be really unfortunate if we

2958
01:58:21,760 --> 01:58:23,599
ended up in a place where we're trying

2959
01:58:22,960 --> 01:58:25,599
to get a

2960
01:58:23,599 --> 01:58:26,639
the earliest implementers of everybody

2961
01:58:25,599 --> 01:58:28,320
to actually interrupt

2962
01:58:26,639 --> 01:58:29,920
and we find out that you know half of

2963
01:58:28,320 --> 01:58:31,119
people do one and half of people ended

2964
01:58:29,920 --> 01:58:31,840
up having to do the other because they

2965
01:58:31,119 --> 01:58:33,119
needed some

2966
01:58:31,840 --> 01:58:35,119
thing that wasn't available in the first

2967
01:58:33,119 --> 01:58:38,239
one

2968
01:58:35,119 --> 01:58:40,080
okay um uh all right

2969
01:58:38,239 --> 01:58:41,839
i hear you back in the queue if yes

2970
01:58:40,080 --> 01:58:43,840
please 30 seconds because we're almost

2971
01:58:41,840 --> 01:58:48,400
at time

2972
01:58:43,840 --> 01:58:50,880
and then i'm cutting the queue

2973
01:58:48,400 --> 01:58:52,320
um so yeah i mean i think i i'm happy

2974
01:58:50,880 --> 01:58:53,360
for us to choose one

2975
01:58:52,320 --> 01:58:55,679
but i think we should choose one of the

2976
01:58:53,360 --> 01:58:57,280
pieces that's the one we want and

2977
01:58:55,679 --> 01:58:58,719
then yes we could always add one later

2978
01:58:57,280 --> 01:58:59,759
but i think we should choose one the

2979
01:58:58,719 --> 01:59:00,880
theory that we're like just getting

2980
01:58:59,760 --> 01:59:02,719
experience we should choose the one we

2981
01:59:00,880 --> 01:59:03,760
think is the right one um so i guess i'm

2982
01:59:02,719 --> 01:59:05,199
saying like i don't think we should

2983
01:59:03,760 --> 01:59:06,320
shortcut that discussion i think we try

2984
01:59:05,199 --> 01:59:08,879
to decide it

2985
01:59:06,320 --> 01:59:10,880
oh no absolutely and i wasn't proposing

2986
01:59:08,880 --> 01:59:12,480
to pick anyone in particular i was

2987
01:59:10,880 --> 01:59:15,440
saying that we should

2988
01:59:12,480 --> 01:59:17,040
pick one and but clearly we're not going

2989
01:59:15,440 --> 01:59:17,919
to pick one in the room today because

2990
01:59:17,040 --> 01:59:22,400
we're out of time

2991
01:59:17,920 --> 01:59:24,960
the uh the av issues did really

2992
01:59:22,400 --> 01:59:25,519
hurt our flow here which is unfortunate

2993
01:59:24,960 --> 01:59:27,920
um

2994
01:59:25,520 --> 01:59:29,440
so uh we're we're at time on the session

2995
01:59:27,920 --> 01:59:32,480
we

2996
01:59:29,440 --> 01:59:34,320
did not come to a resolution on

2997
01:59:32,480 --> 01:59:37,119
getting out of the transport zoo i

2998
01:59:34,320 --> 01:59:40,880
sincerely apologize as chair for that

2999
01:59:37,119 --> 01:59:42,080
um but we will do better i i'm thinking

3000
01:59:40,880 --> 01:59:43,760
that

3001
01:59:42,080 --> 01:59:45,119
we should need to accelerate this

3002
01:59:43,760 --> 01:59:47,199
because uh having

3003
01:59:45,119 --> 01:59:48,719
progress happen every four months at atf

3004
01:59:47,199 --> 01:59:51,280
is not good enough

3005
01:59:48,719 --> 01:59:52,480
so i'm thinking that an interim might be

3006
01:59:51,280 --> 01:59:55,920
a good idea here

3007
01:59:52,480 --> 01:59:56,879
in the near future so we can try to hash

3008
01:59:55,920 --> 01:59:58,800
out so like

3009
01:59:56,880 --> 02:00:00,320
maybe get all this discussion happening

3010
01:59:58,800 --> 02:00:02,320
on the list and then have another

3011
02:00:00,320 --> 02:00:04,000
like interim meeting sometime in the not

3012
02:00:02,320 --> 02:00:05,119
too distant future to really try to

3013
02:00:04,000 --> 02:00:07,440
drive this home

3014
02:00:05,119 --> 02:00:08,639
i would really love us to like get to a

3015
02:00:07,440 --> 02:00:11,519
point where we can

3016
02:00:08,639 --> 02:00:12,800
pick some number of the protocols to

3017
02:00:11,520 --> 02:00:14,080
adopt them in the working group so we

3018
02:00:12,800 --> 02:00:17,520
can actually

3019
02:00:14,080 --> 02:00:19,679
move from zoo visiting to protocol

3020
02:00:17,520 --> 02:00:22,639
design

3021
02:00:19,679 --> 02:00:23,520
on that note we are exactly at time

3022
02:00:22,639 --> 02:00:25,760
thanks to

3023
02:00:23,520 --> 02:00:28,000
all our presenters and to everyone who

3024
02:00:25,760 --> 02:00:30,880
took the time to attend especially

3025
02:00:28,000 --> 02:00:31,440
folks who are in unpleasant time zones

3026
02:00:30,880 --> 02:00:33,440
so

3027
02:00:31,440 --> 02:00:36,400
thanks everyone and uh bernard you have

3028
02:00:33,440 --> 02:00:40,400
any closing statements

3029
02:00:36,400 --> 02:00:44,638
uh no just we will set up the interim uh

3030
02:00:40,400 --> 02:00:47,759
scheduling requests and get going

3031
02:00:44,639 --> 02:00:50,480
all right thanks everyone and enjoy the

3032
02:00:47,760 --> 02:00:54,320
rest of your day or night

3033
02:00:50,480 --> 02:00:56,400
cheers take care everybody and remember

3034
02:00:54,320 --> 02:00:59,040
nobody escapes from the transport zoo

3035
02:00:56,400 --> 02:00:59,040
that easily

3036
02:01:01,040 --> 02:01:05,119
we'll get out of there someday we will i

3037
02:01:03,440 --> 02:01:09,839
promise you that

3038
02:01:05,119 --> 02:01:09,839
keep the faith thanks guys

3039
02:01:10,920 --> 02:01:13,920
cheers

