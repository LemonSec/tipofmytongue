1
00:00:09,280 --> 00:00:17,920
i

2
00:00:09,599 --> 00:00:17,920
i heard you there speak there michael

3
00:00:19,199 --> 00:00:22,240
i'm just seeing if i could pipe youtube

4
00:00:21,359 --> 00:00:24,400
out

5
00:00:22,240 --> 00:00:26,959
uh back through so i could play some

6
00:00:24,400 --> 00:00:28,840
elevator music

7
00:00:26,960 --> 00:00:31,599
in that case it's okay that it didn't

8
00:00:28,840 --> 00:00:35,040
work it's okay that it didn't work yeah

9
00:00:31,599 --> 00:00:37,600
but you know girl from epinephrine

10
00:00:35,040 --> 00:00:40,000
is apparently the canonical elevator

11
00:00:37,600 --> 00:00:40,000
music

12
00:00:41,120 --> 00:00:44,320
i'm not sure i'm glad to know that but

13
00:00:42,840 --> 00:00:46,239
okay yeah

14
00:00:44,320 --> 00:00:47,840
apparently it's it's in all the movies

15
00:00:46,239 --> 00:00:48,160
whenever they're standing in an elevator

16
00:00:47,840 --> 00:00:52,239
they

17
00:00:48,160 --> 00:00:52,239
that's what they play all right

18
00:00:55,600 --> 00:01:02,000
so militia is your audio up and running

19
00:00:58,800 --> 00:01:02,718
um uh can you hear me can you confirm

20
00:01:02,000 --> 00:01:04,959
that you

21
00:01:02,719 --> 00:01:06,400
can hear me i can hear you that sounds

22
00:01:04,959 --> 00:01:10,240
good thank you

23
00:01:06,400 --> 00:01:13,439
okay perfect all right we'll give it um

24
00:01:10,240 --> 00:01:15,600
the traditional extra minute or two

25
00:01:13,439 --> 00:01:17,279
i don't know that we have two hours

26
00:01:15,600 --> 00:01:18,479
worth of discussion this morning or this

27
00:01:17,280 --> 00:01:19,600
afternoon or this evening wherever you

28
00:01:18,479 --> 00:01:23,039
are

29
00:01:19,600 --> 00:01:27,839
so we'll start at uh two going on for

30
00:01:23,040 --> 00:01:27,840
three past the hour

31
00:01:39,680 --> 00:01:44,079
now it does work for me i hit reload by

32
00:01:52,840 --> 00:01:55,840
mistake

33
00:03:16,480 --> 00:03:20,879
okay i guess it's three minutes past so

34
00:03:21,120 --> 00:03:25,040
assuming we're all ready to rock and

35
00:03:22,480 --> 00:03:26,798
roll we should start

36
00:03:25,040 --> 00:03:28,640
so again good morning good afternoon

37
00:03:26,799 --> 00:03:30,720
good evening wherever you are um

38
00:03:28,640 --> 00:03:32,159
welcome to the itf 109 lake working

39
00:03:30,720 --> 00:03:34,400
group meeting

40
00:03:32,159 --> 00:03:35,440
my name is stephen farrell i'm one of

41
00:03:34,400 --> 00:03:37,920
your chairs and

42
00:03:35,440 --> 00:03:37,920
militia

43
00:03:42,080 --> 00:03:45,760
is muted but is it another one of your

44
00:03:43,840 --> 00:03:49,280
chairs

45
00:03:45,760 --> 00:03:49,280
this is hello everyone

46
00:03:50,319 --> 00:03:57,839
great uh so

47
00:03:53,680 --> 00:04:00,159
we have the let me just go over here

48
00:03:57,840 --> 00:04:01,920
so you can see the working group

49
00:04:00,159 --> 00:04:04,480
character link to the main list

50
00:04:01,920 --> 00:04:05,200
jabber room if you're in jabber

51
00:04:04,480 --> 00:04:08,720
otherwise

52
00:04:05,200 --> 00:04:12,560
then in mid echo you take a link and the

53
00:04:08,720 --> 00:04:14,879
ether pad for where meeting notes can be

54
00:04:12,560 --> 00:04:16,399
collaboratively taken and michael has

55
00:04:14,879 --> 00:04:17,839
michael richardson has volunteered to

56
00:04:16,399 --> 00:04:20,159
take notes in the pad michael is that

57
00:04:17,839 --> 00:04:20,159
correct

58
00:04:22,479 --> 00:04:31,039
pat yes excellent thank you

59
00:04:28,320 --> 00:04:31,680
with that all right we have the note

60
00:04:31,040 --> 00:04:34,639
well

61
00:04:31,680 --> 00:04:35,759
it's i guess the first time this week

62
00:04:34,639 --> 00:04:39,040
you'll be seeing this

63
00:04:35,759 --> 00:04:39,680
for some of you at least um it's a

64
00:04:39,040 --> 00:04:42,639
reminder that

65
00:04:39,680 --> 00:04:44,160
atf policies apply this this slide

66
00:04:42,639 --> 00:04:46,400
itself is not those policies you should

67
00:04:44,160 --> 00:04:48,800
go read those

68
00:04:46,400 --> 00:04:51,280
but by participating you agree to these

69
00:04:48,800 --> 00:04:51,280
policies

70
00:04:52,320 --> 00:04:59,199
here's our agenda and we're at

71
00:04:56,000 --> 00:04:59,919
point zero we'll be talking john we'll

72
00:04:59,199 --> 00:05:03,199
be talking about

73
00:04:59,919 --> 00:05:05,680
uh ad hoc and the

74
00:05:03,199 --> 00:05:07,919
issues we have with that and then

75
00:05:05,680 --> 00:05:11,199
francesca has a slot afterwards

76
00:05:07,919 --> 00:05:12,880
and then we have one aob item

77
00:05:11,199 --> 00:05:16,560
uh which i think was also john was this

78
00:05:12,880 --> 00:05:18,800
militia sorry i don't recall right now

79
00:05:16,560 --> 00:05:20,560
i'll go ahead sorry um so we have one

80
00:05:18,800 --> 00:05:23,039
arb item at the end

81
00:05:20,560 --> 00:05:25,840
uh which is to discuss relationship with

82
00:05:23,039 --> 00:05:25,840
kosei and so on

83
00:05:25,919 --> 00:05:30,719
so with that does anybody want to bash

84
00:05:27,840 --> 00:05:30,719
the agenda some

85
00:05:31,120 --> 00:05:34,320
now it's time if you want to add

86
00:05:33,120 --> 00:05:39,840
something or

87
00:05:34,320 --> 00:05:39,840
tell us something about the agenda

88
00:05:40,560 --> 00:05:43,919
so let's just add in the minute that for

89
00:05:42,720 --> 00:05:45,680
a year in the iob

90
00:05:43,919 --> 00:05:47,198
slot we will discuss the late related

91
00:05:45,680 --> 00:05:51,199
work at the iitf

92
00:05:47,199 --> 00:05:53,840
109 and this will be led by euron

93
00:05:51,199 --> 00:05:53,840
great thank you

94
00:05:55,600 --> 00:06:01,039
yeah uh so

95
00:05:59,199 --> 00:06:02,560
assuming that means that we have nothing

96
00:06:01,039 --> 00:06:05,199
else in the agenda

97
00:06:02,560 --> 00:06:06,400
um i did have one piece of administrator

98
00:06:05,199 --> 00:06:08,240
to check and we'll com

99
00:06:06,400 --> 00:06:09,599
we'll go to the list with this as well

100
00:06:08,240 --> 00:06:11,440
um i just wanted to note that there's

101
00:06:09,600 --> 00:06:15,199
been a bunch of discussion in

102
00:06:11,440 --> 00:06:16,639
the github repo issues um

103
00:06:15,199 --> 00:06:18,080
which is a fine thing and something

104
00:06:16,639 --> 00:06:19,440
that's entirely okay for a working group

105
00:06:18,080 --> 00:06:21,440
to do

106
00:06:19,440 --> 00:06:22,800
but it you know for some people it suits

107
00:06:21,440 --> 00:06:23,199
them well to work that way for other

108
00:06:22,800 --> 00:06:26,960
people

109
00:06:23,199 --> 00:06:28,960
less well so i just wanted to check uh

110
00:06:26,960 --> 00:06:30,318
if anybody has a problem with that or if

111
00:06:28,960 --> 00:06:31,599
everybody's okay with it and again we'll

112
00:06:30,319 --> 00:06:34,000
confirm this on the list that

113
00:06:31,600 --> 00:06:35,600
we there's a kind of process for saying

114
00:06:34,000 --> 00:06:37,919
that discussion in

115
00:06:35,600 --> 00:06:38,960
on github issues is a fine thing to do

116
00:06:37,919 --> 00:06:40,159
it does mean of course that anything

117
00:06:38,960 --> 00:06:41,840
substantive gets brought to the mining

118
00:06:40,160 --> 00:06:43,440
list but

119
00:06:41,840 --> 00:06:46,840
if that's a thing somebody has a comment

120
00:06:43,440 --> 00:06:49,360
on or wants to talk about now is a good

121
00:06:46,840 --> 00:06:51,440
time

122
00:06:49,360 --> 00:06:53,440
um i just wanted to request the chairs

123
00:06:51,440 --> 00:06:54,719
to there's a config you can do that will

124
00:06:53,440 --> 00:06:57,599
send a summary

125
00:06:54,720 --> 00:06:58,639
like a weekly summary to the list i

126
00:06:57,599 --> 00:07:01,360
don't know how to do it

127
00:06:58,639 --> 00:07:04,240
but it's possible and it's in the github

128
00:07:01,360 --> 00:07:07,280
rfc somewhere

129
00:07:04,240 --> 00:07:08,800
sure uh we can try to i've seen those in

130
00:07:07,280 --> 00:07:10,080
other working groups and i find them

131
00:07:08,800 --> 00:07:12,720
useless myself but

132
00:07:10,080 --> 00:07:14,479
if people wanted sure we can do that i i

133
00:07:12,720 --> 00:07:15,360
find that it's useful for the simple

134
00:07:14,479 --> 00:07:17,758
reason that

135
00:07:15,360 --> 00:07:19,520
it goes in the archives it links back to

136
00:07:17,759 --> 00:07:21,120
the issues which are now closed and so

137
00:07:19,520 --> 00:07:23,039
when you go back to the archives to find

138
00:07:21,120 --> 00:07:24,479
out what happened you see that message

139
00:07:23,039 --> 00:07:26,400
and you're like oh the discussion was

140
00:07:24,479 --> 00:07:28,960
over there and that's why you didn't

141
00:07:26,400 --> 00:07:30,880
find it in the archive

142
00:07:28,960 --> 00:07:32,719
fair point okay so we'll take an action

143
00:07:30,880 --> 00:07:36,159
for one of the chairs to

144
00:07:32,720 --> 00:07:37,759
tweak that button and github somehow

145
00:07:36,160 --> 00:07:40,400
and again we will bring this up on the

146
00:07:37,759 --> 00:07:43,919
list with a pointer to the right

147
00:07:40,400 --> 00:07:45,520
reference for uh in the the guest

148
00:07:43,919 --> 00:07:46,560
working group that they have a document

149
00:07:45,520 --> 00:07:46,960
about this so we'll bring that to the

150
00:07:46,560 --> 00:07:51,199
list

151
00:07:46,960 --> 00:07:53,198
shortly okay so with that i think that's

152
00:07:51,199 --> 00:07:59,840
our administrivia

153
00:07:53,199 --> 00:07:59,840
and i believe

154
00:08:00,240 --> 00:08:06,479
this is the correct next slide

155
00:08:03,599 --> 00:08:07,280
please correct me from wrong yeah so

156
00:08:06,479 --> 00:08:09,919
this is the

157
00:08:07,280 --> 00:08:11,119
slide set for the next two points one

158
00:08:09,919 --> 00:08:14,240
and two

159
00:08:11,120 --> 00:08:16,639
great and with that i shall mute and let

160
00:08:14,240 --> 00:08:19,759
you run away john

161
00:08:16,639 --> 00:08:22,720
thank you uh by

162
00:08:19,759 --> 00:08:24,400
by the way do we have should do people

163
00:08:22,720 --> 00:08:27,599
raise hands or they just

164
00:08:24,400 --> 00:08:30,400
talk or

165
00:08:27,599 --> 00:08:31,440
when they want to say something people

166
00:08:30,400 --> 00:08:36,478
can raise their hands

167
00:08:31,440 --> 00:08:38,000
inside of uh meet echo

168
00:08:36,479 --> 00:08:40,080
but i guess if you if you give people a

169
00:08:38,000 --> 00:08:41,679
chance and say you know that's a good

170
00:08:40,080 --> 00:08:43,039
time to ask questions

171
00:08:41,679 --> 00:08:45,920
as you go through the new slides that

172
00:08:43,039 --> 00:08:48,689
would be fine too yeah

173
00:08:45,920 --> 00:08:50,399
good we can go to the next slide

174
00:08:48,690 --> 00:08:53,760
[Music]

175
00:08:50,399 --> 00:08:57,440
so this is point one on the agenda

176
00:08:53,760 --> 00:08:58,080
changes and there has been two versions

177
00:08:57,440 --> 00:09:02,720
since

178
00:08:58,080 --> 00:09:02,720
the last itef meeting 108.

179
00:09:03,279 --> 00:09:07,680
the changes from zero zero to zero one

180
00:09:05,680 --> 00:09:11,199
was

181
00:09:07,680 --> 00:09:14,239
removal of the psk method because it was

182
00:09:11,200 --> 00:09:17,760
agreed that the asymmetric method was

183
00:09:14,240 --> 00:09:20,800
fast enough and there was basically

184
00:09:17,760 --> 00:09:21,200
no difference in message size then

185
00:09:20,800 --> 00:09:24,959
there's

186
00:09:21,200 --> 00:09:29,120
removal of examples with certificate

187
00:09:24,959 --> 00:09:31,599
by value and some editorial changes

188
00:09:29,120 --> 00:09:33,200
and then changes from zero one to zero

189
00:09:31,600 --> 00:09:36,720
two which was

190
00:09:33,200 --> 00:09:38,240
submitted two weeks ago also not so many

191
00:09:36,720 --> 00:09:41,440
changes

192
00:09:38,240 --> 00:09:42,080
uh those requested to have a use of ad

193
00:09:41,440 --> 00:09:44,160
hoc

194
00:09:42,080 --> 00:09:46,880
section in the beginning to better

195
00:09:44,160 --> 00:09:49,120
describe the use cases

196
00:09:46,880 --> 00:09:51,839
this came from the people doing formal

197
00:09:49,120 --> 00:09:51,839
verification

198
00:09:51,920 --> 00:09:59,360
then there's a new sub section added

199
00:09:55,680 --> 00:10:02,839
and more text inline to

200
00:09:59,360 --> 00:10:04,640
clarify the encoding of the bitstring

201
00:10:02,839 --> 00:10:07,200
identifiers

202
00:10:04,640 --> 00:10:08,720
there was comments on people looking at

203
00:10:07,200 --> 00:10:12,399
the test vectors

204
00:10:08,720 --> 00:10:14,800
and so on questioning if it was

205
00:10:12,399 --> 00:10:17,279
correct so now a lot more clarification

206
00:10:14,800 --> 00:10:20,560
has been added

207
00:10:17,279 --> 00:10:24,000
and then there's text added on what

208
00:10:20,560 --> 00:10:24,319
an identity these and what a small set

209
00:10:24,000 --> 00:10:29,519
of

210
00:10:24,320 --> 00:10:29,519
identities can be in practice

211
00:10:29,760 --> 00:10:34,880
there's new text on

212
00:10:32,959 --> 00:10:37,040
and also that was requested by the

213
00:10:34,880 --> 00:10:39,600
people doing formal verification

214
00:10:37,040 --> 00:10:41,519
then add the text on key confirmation

215
00:10:39,600 --> 00:10:42,240
and there's a now as a recommendation

216
00:10:41,519 --> 00:10:45,519
that

217
00:10:42,240 --> 00:10:47,279
the responder had have received explicit

218
00:10:45,519 --> 00:10:50,800
key confirmation

219
00:10:47,279 --> 00:10:53,519
of the key prk 4 3m

220
00:10:50,800 --> 00:10:54,000
before storing the long key material

221
00:10:53,519 --> 00:10:57,120
long

222
00:10:54,000 --> 00:10:59,600
term can still send

223
00:10:57,120 --> 00:11:01,680
messages but should probably have key

224
00:10:59,600 --> 00:11:05,440
confirmation before

225
00:11:01,680 --> 00:11:06,560
storing it and these identities and give

226
00:11:05,440 --> 00:11:09,600
confirmation will

227
00:11:06,560 --> 00:11:10,319
we will come back to in the issues then

228
00:11:09,600 --> 00:11:14,399
there is

229
00:11:10,320 --> 00:11:16,160
test vectors for static dv hellmann

230
00:11:14,399 --> 00:11:18,160
previous version only had test vectors

231
00:11:16,160 --> 00:11:21,120
for signatures

232
00:11:18,160 --> 00:11:22,240
and i think francesca will talk more

233
00:11:21,120 --> 00:11:25,360
about test vectors

234
00:11:22,240 --> 00:11:28,720
in her presentation about interrupt and

235
00:11:25,360 --> 00:11:43,839
then there is editorial changes

236
00:11:28,720 --> 00:11:43,839
so any comments on that

237
00:11:46,959 --> 00:11:53,518
um you're on here can you hear me

238
00:11:50,399 --> 00:11:54,160
yes yeah i just wanted to add that we'd

239
00:11:53,519 --> 00:11:57,519
start

240
00:11:54,160 --> 00:11:59,760
uh this uh new subsection on bitstring

241
00:11:57,519 --> 00:12:02,399
identifiers there was still some

242
00:11:59,760 --> 00:12:04,480
some confusion around that so steven uh

243
00:12:02,399 --> 00:12:05,600
uh risdysoff has provided feedback and

244
00:12:04,480 --> 00:12:06,959
we're

245
00:12:05,600 --> 00:12:09,120
trying to make it even more clear what

246
00:12:06,959 --> 00:12:10,319
what's the purpose of this

247
00:12:09,120 --> 00:12:12,800
and maybe you should say a few words

248
00:12:10,320 --> 00:12:12,800
about that

249
00:12:13,279 --> 00:12:20,000
okay yeah i have not seen that

250
00:12:16,959 --> 00:12:22,319
discussion yeah that's good um

251
00:12:20,000 --> 00:12:23,519
just point out that bit string the

252
00:12:22,320 --> 00:12:26,800
encoding of b string

253
00:12:23,519 --> 00:12:27,760
identifier is absolutely needed it's

254
00:12:26,800 --> 00:12:30,000
like saves

255
00:12:27,760 --> 00:12:31,600
four bytes which is essential to get it

256
00:12:30,000 --> 00:12:36,839
to fit in

257
00:12:31,600 --> 00:12:39,839
lorawan and five hop

258
00:12:36,839 --> 00:12:39,839
sixties

259
00:12:40,639 --> 00:12:43,760
unless there any more comments i guess

260
00:12:43,440 --> 00:12:48,160
we

261
00:12:43,760 --> 00:12:48,160
go to the next part on agenda

262
00:12:49,120 --> 00:12:55,920
so the the rest of your presentation are

263
00:12:52,320 --> 00:12:58,959
is open issues

264
00:12:55,920 --> 00:13:02,479
and most of them

265
00:12:58,959 --> 00:13:05,760
are quite old

266
00:13:02,480 --> 00:13:08,079
but there was now with the latest

267
00:13:05,760 --> 00:13:09,120
mails it has increased the discussion on

268
00:13:08,079 --> 00:13:12,479
github which is

269
00:13:09,120 --> 00:13:15,279
great it has also spawned some

270
00:13:12,480 --> 00:13:15,279
new issues

271
00:13:15,680 --> 00:13:23,519
um so my plan is to go through them

272
00:13:20,240 --> 00:13:23,519
one by one and

273
00:13:23,600 --> 00:13:27,040
allow all the discussion we need to have

274
00:13:26,079 --> 00:13:29,359
on them and

275
00:13:27,040 --> 00:13:30,319
if we don't have time with all of them i

276
00:13:29,360 --> 00:13:33,519
would

277
00:13:30,320 --> 00:13:37,600
suggest that we have an interim meeting

278
00:13:33,519 --> 00:13:37,600
somewhere after this meeting

279
00:13:38,160 --> 00:13:41,279
i don't know if somebody wants some

280
00:13:40,160 --> 00:13:44,880
other order

281
00:13:41,279 --> 00:13:45,279
we can fix this but otherwise i plan to

282
00:13:44,880 --> 00:13:48,720
go

283
00:13:45,279 --> 00:13:51,920
through them according to this order and

284
00:13:48,720 --> 00:13:55,279
there's one or several slides per

285
00:13:51,920 --> 00:13:56,639
per issue or issue group so some of

286
00:13:55,279 --> 00:13:59,360
these

287
00:13:56,639 --> 00:14:00,639
consist of several issues and some of

288
00:13:59,360 --> 00:14:03,839
the research are also

289
00:14:00,639 --> 00:14:03,839
related so

290
00:14:08,240 --> 00:14:15,279
otherwise unless there is any comments

291
00:14:12,880 --> 00:14:17,839
i think we move on to agreement and

292
00:14:15,279 --> 00:14:17,839
negotiation

293
00:14:20,160 --> 00:14:23,519
so agreement the negotiation of

294
00:14:22,480 --> 00:14:27,440
parameters

295
00:14:23,519 --> 00:14:31,519
this is issue 11 and 23

296
00:14:27,440 --> 00:14:34,720
and this is more uh

297
00:14:31,519 --> 00:14:37,600
check that to so that

298
00:14:34,720 --> 00:14:39,199
this has been properly discussed and

299
00:14:37,600 --> 00:14:42,800
agreed otherwise

300
00:14:39,199 --> 00:14:48,079
this is not part of some this is more

301
00:14:42,800 --> 00:14:48,079
just how things happen to be as the

302
00:14:48,320 --> 00:14:52,800
protocol was built so you could consider

303
00:14:51,680 --> 00:14:56,000
other

304
00:14:52,800 --> 00:14:58,719
options here but basically ad hoc has

305
00:14:56,000 --> 00:15:00,480
several options and parameters the

306
00:14:58,720 --> 00:15:00,959
documents state that some of them must

307
00:15:00,480 --> 00:15:04,160
be

308
00:15:00,959 --> 00:15:06,959
agreed beforehand like the method

309
00:15:04,160 --> 00:15:07,519
the transport and correlation and the

310
00:15:06,959 --> 00:15:12,560
use

311
00:15:07,519 --> 00:15:16,240
and format of the auxiliary data

312
00:15:12,560 --> 00:15:19,518
the cypher suits they are negotiated or

313
00:15:16,240 --> 00:15:23,440
verified and then

314
00:15:19,519 --> 00:15:26,240
there are some cozy parameters

315
00:15:23,440 --> 00:15:27,680
namely the how to identify the

316
00:15:26,240 --> 00:15:31,360
credentials and

317
00:15:27,680 --> 00:15:35,680
how to structure the identifier that are

318
00:15:31,360 --> 00:15:38,480
on the fly chosen by the

319
00:15:35,680 --> 00:15:38,479
participants

320
00:15:38,720 --> 00:15:42,160
and all of these have different

321
00:15:41,120 --> 00:15:44,800
trade-offs

322
00:15:42,160 --> 00:15:46,399
agreeing beforehand of course reduces

323
00:15:44,800 --> 00:15:50,240
flexibility we of course

324
00:15:46,399 --> 00:15:52,639
make sure that it's a very easy solution

325
00:15:50,240 --> 00:15:54,720
negotiation might increase message sizes

326
00:15:52,639 --> 00:15:57,120
and round trips

327
00:15:54,720 --> 00:15:59,839
letting the parties choose things inside

328
00:15:57,120 --> 00:16:03,920
the protocols

329
00:15:59,839 --> 00:16:05,600
may allow an own path attacker to

330
00:16:03,920 --> 00:16:08,079
to deduce things from the messen site

331
00:16:05,600 --> 00:16:10,720
and block things

332
00:16:08,079 --> 00:16:11,120
and also you might run into problem

333
00:16:10,720 --> 00:16:14,639
where

334
00:16:11,120 --> 00:16:18,079
something is not supported

335
00:16:14,639 --> 00:16:21,279
and the discussion on github so far is

336
00:16:18,079 --> 00:16:24,880
a comment that people

337
00:16:21,279 --> 00:16:27,680
that person was happy with the current

338
00:16:24,880 --> 00:16:27,680
configuration

339
00:16:33,519 --> 00:16:41,199
okay let's see see

340
00:16:37,440 --> 00:16:41,199
tls there yeah good

341
00:16:46,720 --> 00:16:51,839
any comments on agreement negotiation

342
00:16:58,880 --> 00:17:02,399
maybe one comment from for me you're on

343
00:17:01,519 --> 00:17:04,000
but

344
00:17:02,399 --> 00:17:06,559
i mean when when it's stated here that

345
00:17:04,000 --> 00:17:11,359
the parameters agreed beforehand it's

346
00:17:06,559 --> 00:17:15,678
basically understood that the initiator

347
00:17:11,359 --> 00:17:21,839
decides and and the responder

348
00:17:15,679 --> 00:17:21,839
uh so declines if it if it can't support

349
00:17:22,480 --> 00:17:28,000
so it's basically it's a very crude

350
00:17:24,880 --> 00:17:30,480
negotiation but it's still

351
00:17:28,000 --> 00:17:32,240
it's the principal possible that

352
00:17:30,480 --> 00:17:36,080
initiator and responders suppose

353
00:17:32,240 --> 00:17:39,520
support different methods

354
00:17:36,080 --> 00:17:42,639
and the initiator decides with message

355
00:17:39,520 --> 00:17:42,639
one which method is going to be

356
00:17:44,640 --> 00:17:49,679
oh she has a clarification oh michael is

357
00:17:47,280 --> 00:17:49,678
in the cube

358
00:17:52,400 --> 00:17:56,720
my suggestion is that maybe we should

359
00:17:54,880 --> 00:17:59,840
add a

360
00:17:56,720 --> 00:18:01,840
appendix with an example such that

361
00:17:59,840 --> 00:18:02,879
someone who is invoking ad hoc in their

362
00:18:01,840 --> 00:18:05,039
protocol

363
00:18:02,880 --> 00:18:07,039
will be informed that the following

364
00:18:05,039 --> 00:18:08,080
parameters must be agreed on beforehand

365
00:18:07,039 --> 00:18:10,080
in other words you better put them in

366
00:18:08,080 --> 00:18:13,120
your document that uses ad hoc

367
00:18:10,080 --> 00:18:17,120
uh as as to what you intend to do

368
00:18:13,120 --> 00:18:19,199
for those and

369
00:18:17,120 --> 00:18:21,918
so that people don't forget something as

370
00:18:19,200 --> 00:18:21,919
a kind of a

371
00:18:22,080 --> 00:18:27,039
proto applicability statement block

372
00:18:25,120 --> 00:18:28,799
maybe

373
00:18:27,039 --> 00:18:30,799
also as we add things or subtract things

374
00:18:28,799 --> 00:18:32,639
or to change our mind then at least

375
00:18:30,799 --> 00:18:35,200
we'll know what what we've we're

376
00:18:32,640 --> 00:18:35,200
supposed to say

377
00:18:35,520 --> 00:18:39,280
i i don't think we're going to change

378
00:18:36,640 --> 00:18:42,080
our mind a lot but it could be

379
00:18:39,280 --> 00:18:42,960
yeah that sounds like a good idea i

380
00:18:42,080 --> 00:18:45,520
think

381
00:18:42,960 --> 00:18:47,280
i think every it is mentioned but it's

382
00:18:45,520 --> 00:18:48,320
probably a little bit spread out in the

383
00:18:47,280 --> 00:18:51,760
document so

384
00:18:48,320 --> 00:18:57,840
having uh easy to find

385
00:18:51,760 --> 00:18:57,840
list is probably a very good idea

386
00:19:02,559 --> 00:19:08,559
um unless there any more

387
00:19:05,919 --> 00:19:10,080
comments i assume we have the working

388
00:19:08,559 --> 00:19:13,440
assumption that

389
00:19:10,080 --> 00:19:25,039
this stays as is but keep

390
00:19:13,440 --> 00:19:26,799
the github issue open for some more time

391
00:19:25,039 --> 00:19:28,080
yeah that sounds like a good plan let's

392
00:19:26,799 --> 00:19:31,520
start with an action point

393
00:19:28,080 --> 00:19:34,639
that essentially we add a subsection on

394
00:19:31,520 --> 00:19:36,320
or clarifying what these uh negotiated

395
00:19:34,640 --> 00:19:38,000
parameters

396
00:19:36,320 --> 00:19:53,840
negotiated than the great parameters

397
00:19:38,000 --> 00:19:53,840
from before so add this in the draft

398
00:19:56,000 --> 00:20:00,000
then i guess we can go to the next slide

399
00:20:01,600 --> 00:20:09,120
so re-keying us of

400
00:20:04,880 --> 00:20:12,159
all oscar aad this might

401
00:20:09,120 --> 00:20:15,600
suggest basically that this is

402
00:20:12,159 --> 00:20:18,159
not ad hoc but this has been discussed

403
00:20:15,600 --> 00:20:19,600
in it this was brought up in a lake

404
00:20:18,159 --> 00:20:23,120
working group

405
00:20:19,600 --> 00:20:27,600
and there's a choice to do this

406
00:20:23,120 --> 00:20:30,000
in ad hoc or or score so

407
00:20:27,600 --> 00:20:32,158
see if audi is currently working on a

408
00:20:30,000 --> 00:20:32,880
document specifying equations to

409
00:20:32,159 --> 00:20:36,240
calculate

410
00:20:32,880 --> 00:20:37,280
aad limits you might have seen the

411
00:20:36,240 --> 00:20:39,679
document or

412
00:20:37,280 --> 00:20:40,799
the previous discussion on lake when

413
00:20:39,679 --> 00:20:44,400
this was brought up

414
00:20:40,799 --> 00:20:47,679
or the discussion in tls or quick

415
00:20:44,400 --> 00:20:51,280
and basically the questions that you

416
00:20:47,679 --> 00:20:52,480
put limits on the number of encryption

417
00:20:51,280 --> 00:20:55,678
operations

418
00:20:52,480 --> 00:20:57,600
and the number of four jury attempts

419
00:20:55,679 --> 00:20:59,200
that you allow so these are the

420
00:20:57,600 --> 00:21:02,320
different parties

421
00:20:59,200 --> 00:21:05,919
it's the client and the server

422
00:21:02,320 --> 00:21:07,039
have two different limits and tls dtls

423
00:21:05,919 --> 00:21:09,360
and quick has

424
00:21:07,039 --> 00:21:12,158
adopted very strict limits based on

425
00:21:09,360 --> 00:21:12,158
these equations

426
00:21:12,799 --> 00:21:19,120
uh and but these

427
00:21:16,159 --> 00:21:21,280
the limits themselves are not following

428
00:21:19,120 --> 00:21:24,959
from the equations there's a lot of

429
00:21:21,280 --> 00:21:28,639
assumptions you one assumption is what

430
00:21:24,960 --> 00:21:32,559
target probability you want um

431
00:21:28,640 --> 00:21:35,440
for either to an attacker distinguishing

432
00:21:32,559 --> 00:21:36,799
the ciphertext from a random string or

433
00:21:35,440 --> 00:21:40,159
achieving

434
00:21:36,799 --> 00:21:43,280
a single forgery

435
00:21:40,159 --> 00:21:44,480
the equations does not handle multiple

436
00:21:43,280 --> 00:21:47,200
forgeries

437
00:21:44,480 --> 00:21:49,440
that's much more complicated to

438
00:21:47,200 --> 00:21:52,559
calculate

439
00:21:49,440 --> 00:21:53,360
another factor is packet length so plain

440
00:21:52,559 --> 00:21:56,080
text plus

441
00:21:53,360 --> 00:21:57,039
additional data for integrity only plain

442
00:21:56,080 --> 00:22:00,399
text for

443
00:21:57,039 --> 00:22:00,400
the confidentiality

444
00:22:01,280 --> 00:22:06,559
and here you get you can have higher

445
00:22:05,039 --> 00:22:10,240
limits if you

446
00:22:06,559 --> 00:22:11,200
have smaller messages and you accept a

447
00:22:10,240 --> 00:22:14,960
lower

448
00:22:11,200 --> 00:22:15,360
probability um having strictly necessary

449
00:22:14,960 --> 00:22:18,000
is

450
00:22:15,360 --> 00:22:18,479
not a problem at all if re-keying is

451
00:22:18,000 --> 00:22:21,440
easy

452
00:22:18,480 --> 00:22:22,960
if requiring is not easy it might cause

453
00:22:21,440 --> 00:22:26,080
problems

454
00:22:22,960 --> 00:22:28,960
so this is not these aad limits is

455
00:22:26,080 --> 00:22:30,480
not at all a problem for ad hoc it

456
00:22:28,960 --> 00:22:33,679
docused each key

457
00:22:30,480 --> 00:22:35,360
only once it might be a problem for os

458
00:22:33,679 --> 00:22:37,919
score

459
00:22:35,360 --> 00:22:39,039
and re-keying for os score can be done

460
00:22:37,919 --> 00:22:42,320
either in

461
00:22:39,039 --> 00:22:45,120
or erdog or oscor

462
00:22:42,320 --> 00:22:46,080
as an example dtl is at the limit for

463
00:22:45,120 --> 00:22:49,280
ccm

464
00:22:46,080 --> 00:22:52,320
with a 16 byte tag

465
00:22:49,280 --> 00:22:52,840
to 2 to the power of 23 and 2 to the

466
00:22:52,320 --> 00:22:55,840
power

467
00:22:52,840 --> 00:22:55,840
23.8

468
00:22:56,159 --> 00:23:02,640
and q is the confidentiality limit and v

469
00:22:59,600 --> 00:23:06,719
is the forgery limit

470
00:23:02,640 --> 00:23:06,720
dtls also state that given the

471
00:23:06,880 --> 00:23:14,480
probability target for tls

472
00:23:10,400 --> 00:23:17,520
which was decided for tls 103 i think

473
00:23:14,480 --> 00:23:20,640
you cannot get ccm 8

474
00:23:17,520 --> 00:23:24,000
to work and dtls103 states that

475
00:23:20,640 --> 00:23:29,039
ccm8 must not be used unless you take

476
00:23:24,000 --> 00:23:31,760
additional safeguards so i think

477
00:23:29,039 --> 00:23:33,360
my feelings here is that the iot

478
00:23:31,760 --> 00:23:36,799
community should

479
00:23:33,360 --> 00:23:42,000
discuss more what reasonable

480
00:23:36,799 --> 00:23:46,480
limits for q and v are for ccm8

481
00:23:42,000 --> 00:23:47,919
ccm8 is very very well used in the iot

482
00:23:46,480 --> 00:23:51,600
community

483
00:23:47,919 --> 00:23:54,960
and it's not

484
00:23:51,600 --> 00:23:58,158
clear that the tls limits or

485
00:23:54,960 --> 00:24:00,000
is the ones that should apply to all

486
00:23:58,159 --> 00:24:04,240
other protocols

487
00:24:00,000 --> 00:24:07,440
and also my suggestion and water scene

488
00:24:04,240 --> 00:24:10,559
is that this is better done in

489
00:24:07,440 --> 00:24:13,760
oscor and the core working group

490
00:24:10,559 --> 00:24:13,760
than in edoc

491
00:24:17,679 --> 00:24:21,760
comments opinions

492
00:24:24,799 --> 00:24:33,840
and this is on the agenda for the core

493
00:24:28,640 --> 00:24:33,840
working group on friday

494
00:24:37,919 --> 00:24:46,320
so you have michael in the queue and

495
00:24:39,279 --> 00:24:49,520
then me in the queue good

496
00:24:46,320 --> 00:24:52,559
so i i guess i can't understand

497
00:24:49,520 --> 00:24:54,158
um this is not specific to ccm8 it's

498
00:24:52,559 --> 00:24:55,840
just we use it a lot there's lots of

499
00:24:54,159 --> 00:24:58,960
other algorithms that have

500
00:24:55,840 --> 00:25:00,320
limits where you must re-key it um going

501
00:24:58,960 --> 00:25:03,360
back to 3ds

502
00:25:00,320 --> 00:25:06,559
does that um so i don't understand

503
00:25:03,360 --> 00:25:08,639
and everything else in detail in tls and

504
00:25:06,559 --> 00:25:09,600
ipsec and all this stuff we've always

505
00:25:08,640 --> 00:25:12,000
just

506
00:25:09,600 --> 00:25:14,240
had run the re the keying the keying

507
00:25:12,000 --> 00:25:16,400
protocol again to re-key it

508
00:25:14,240 --> 00:25:17,919
we've never done this at the so-called

509
00:25:16,400 --> 00:25:19,760
transport layer

510
00:25:17,919 --> 00:25:21,200
um so i don't know why this would be

511
00:25:19,760 --> 00:25:25,200
different in

512
00:25:21,200 --> 00:25:28,480
uh os core and ad hoc um

513
00:25:25,200 --> 00:25:30,799
there and and and i don't know

514
00:25:28,480 --> 00:25:33,279
if you're if it's really specific for

515
00:25:30,799 --> 00:25:36,320
ccm or that's just we have some advice

516
00:25:33,279 --> 00:25:36,320
right now about that

517
00:25:36,480 --> 00:25:41,360
uh i think the reason why you might

518
00:25:40,080 --> 00:25:44,399
start want to

519
00:25:41,360 --> 00:25:46,639
want want to do things on the

520
00:25:44,400 --> 00:25:48,720
record layer or the oscar layer is that

521
00:25:46,640 --> 00:25:51,840
if if you set this

522
00:25:48,720 --> 00:25:55,120
um re-keying a

523
00:25:51,840 --> 00:25:57,600
period so short that it starts to get a

524
00:25:55,120 --> 00:25:59,520
problem to rerun the handshake

525
00:25:57,600 --> 00:26:01,199
at least for very constrained iot

526
00:25:59,520 --> 00:26:04,240
devices

527
00:26:01,200 --> 00:26:06,640
um and i think basically

528
00:26:04,240 --> 00:26:08,080
the the equations here are not specific

529
00:26:06,640 --> 00:26:10,640
for ccm8

530
00:26:08,080 --> 00:26:11,760
it's i think they're quite generic for

531
00:26:10,640 --> 00:26:16,080
any

532
00:26:11,760 --> 00:26:19,919
algorithm with the 64 bit

533
00:26:16,080 --> 00:26:23,199
tag and if you then put

534
00:26:19,919 --> 00:26:27,360
forgery probability uh

535
00:26:23,200 --> 00:26:27,360
as what is it

536
00:26:28,400 --> 00:26:34,799
low as tls has

537
00:26:31,679 --> 00:26:36,320
done then then basically you cannot use

538
00:26:34,799 --> 00:26:40,799
64 byte

539
00:26:36,320 --> 00:26:44,080
tags basically or it you get very very

540
00:26:40,799 --> 00:26:47,200
frequent re-keying

541
00:26:44,080 --> 00:26:49,199
at least with the packet sizes that tls

542
00:26:47,200 --> 00:27:06,000
dtls has calculated with

543
00:26:49,200 --> 00:27:08,240
which is two to a power of 14 bytes

544
00:27:06,000 --> 00:27:09,760
that wasn't i i understood all that but

545
00:27:08,240 --> 00:27:10,640
that didn't tell me why we should do it

546
00:27:09,760 --> 00:27:14,158
in os core

547
00:27:10,640 --> 00:27:16,240
rather than uh i didn't understand why

548
00:27:14,159 --> 00:27:17,919
i mean either way right it's gonna

549
00:27:16,240 --> 00:27:20,240
involve the same crypto operations

550
00:27:17,919 --> 00:27:22,720
unless i don't understand

551
00:27:20,240 --> 00:27:23,919
so i don't unders i guess i don't don't

552
00:27:22,720 --> 00:27:27,039
know what would be the

553
00:27:23,919 --> 00:27:29,600
advantage of doing an os core ah yeah

554
00:27:27,039 --> 00:27:30,960
no no it might not at all involve the

555
00:27:29,600 --> 00:27:33,520
same crypto operation

556
00:27:30,960 --> 00:27:34,000
i think in on the ad hoc level

557
00:27:33,520 --> 00:27:36,799
everything

558
00:27:34,000 --> 00:27:39,360
is already done you can just if you want

559
00:27:36,799 --> 00:27:42,240
you can rerun ad hoc and that would

560
00:27:39,360 --> 00:27:44,559
solve the problem what you can do on the

561
00:27:42,240 --> 00:27:48,240
record layer is that you can

562
00:27:44,559 --> 00:27:51,520
do things without asymmetric crypto so

563
00:27:48,240 --> 00:27:52,559
one option is that you you have a master

564
00:27:51,520 --> 00:27:55,918
key and

565
00:27:52,559 --> 00:27:58,080
periodically you derive like you have

566
00:27:55,919 --> 00:27:59,760
the oscar master key and periodically

567
00:27:58,080 --> 00:28:03,120
you derive

568
00:27:59,760 --> 00:28:05,919
send new sender key from that key

569
00:28:03,120 --> 00:28:07,199
you can also hash the sender key

570
00:28:05,919 --> 00:28:10,240
periodically

571
00:28:07,200 --> 00:28:13,440
which also gives you forward secrecy or

572
00:28:10,240 --> 00:28:16,640
you can exchange new keys

573
00:28:13,440 --> 00:28:20,080
in the au score

574
00:28:16,640 --> 00:28:22,559
level with psk protection so

575
00:28:20,080 --> 00:28:24,000
all of this you could do much much much

576
00:28:22,559 --> 00:28:31,840
more cheaper than

577
00:28:24,000 --> 00:28:31,840
rerunning ad hoc

578
00:28:33,440 --> 00:28:37,919
so i i i'm assuming michael's questions

579
00:28:36,399 --> 00:28:39,439
finished with they've not jumped back in

580
00:28:37,919 --> 00:28:42,640
michael uh so i had a

581
00:28:39,440 --> 00:28:45,919
just a comment last question uh

582
00:28:42,640 --> 00:28:47,360
is it documented somewhere in a way that

583
00:28:45,919 --> 00:28:50,240
would be friendly for

584
00:28:47,360 --> 00:28:52,000
a developer of a let's say a small

585
00:28:50,240 --> 00:28:52,720
device that is going to be deployed for

586
00:28:52,000 --> 00:28:54,960
a long time

587
00:28:52,720 --> 00:28:56,799
um well i i don't think that should be

588
00:28:54,960 --> 00:28:58,399
an ad hoc probably but

589
00:28:56,799 --> 00:29:02,320
is there text somewhere that such a

590
00:28:58,399 --> 00:29:02,320
developer could read and know what to do

591
00:29:03,440 --> 00:29:07,039
not right now right now they would have

592
00:29:05,760 --> 00:29:10,158
to read the

593
00:29:07,039 --> 00:29:13,360
uh see if rga aad limits

594
00:29:10,159 --> 00:29:16,799
documents and there's no reference

595
00:29:13,360 --> 00:29:19,918
to that from os core

596
00:29:16,799 --> 00:29:24,399
but that would

597
00:29:19,919 --> 00:29:24,399
presumably be the outcome of the core

598
00:29:24,840 --> 00:29:29,520
discussions

599
00:29:26,880 --> 00:29:30,159
okay so as a suggestion i think it would

600
00:29:29,520 --> 00:29:32,320
be good

601
00:29:30,159 --> 00:29:33,440
if somewhere there was a developer

602
00:29:32,320 --> 00:29:35,360
friendly

603
00:29:33,440 --> 00:29:37,679
reference here because a lot of people

604
00:29:35,360 --> 00:29:39,600
won't understand all these details

605
00:29:37,679 --> 00:29:41,120
and will either never change keys or

606
00:29:39,600 --> 00:29:44,559
change them all the time

607
00:29:41,120 --> 00:29:45,918
um so if somebody was happy to write

608
00:29:44,559 --> 00:29:48,320
some text like that that would be great

609
00:29:45,919 --> 00:29:50,880
and i'm sure if a home for it could be

610
00:29:48,320 --> 00:29:50,879
found somewhere

611
00:29:52,960 --> 00:29:59,679
could probably fit in some some text in

612
00:29:56,399 --> 00:30:01,840
ad hoc also this is quite this is quite

613
00:29:59,679 --> 00:30:03,840
related to other

614
00:30:01,840 --> 00:30:05,279
other reasons to do rikki and like

615
00:30:03,840 --> 00:30:09,840
getting forward or

616
00:30:05,279 --> 00:30:09,840
backward secrecy so

617
00:30:10,640 --> 00:30:14,640
probably a dog should also have some

618
00:30:12,240 --> 00:30:17,600
section of recommendations for

619
00:30:14,640 --> 00:30:17,600
how often you should

620
00:30:17,760 --> 00:30:21,200
how long you should use your session

621
00:30:19,360 --> 00:30:25,600
keys or or how

622
00:30:21,200 --> 00:30:25,600
often you should redo ad hoc

623
00:30:26,559 --> 00:30:30,080
okay thanks and then i have been in the

624
00:30:34,840 --> 00:30:37,840
queue

625
00:30:47,679 --> 00:30:51,279
roughly getting back to michael's point

626
00:30:50,000 --> 00:30:53,760
uh in terms of

627
00:30:51,279 --> 00:30:54,559
you know is this something specific to

628
00:30:53,760 --> 00:30:56,879
ccm8

629
00:30:54,559 --> 00:30:58,399
is this something specific to oscar or

630
00:30:56,880 --> 00:31:02,840
ad hoc

631
00:30:58,399 --> 00:31:05,600
um and like yes this is a fairly

632
00:31:02,840 --> 00:31:07,360
generic topic i think the specific

633
00:31:05,600 --> 00:31:11,760
formulas and specific limits

634
00:31:07,360 --> 00:31:13,760
are specific to ccm8 and i think that

635
00:31:11,760 --> 00:31:15,600
from a practical point of view part of

636
00:31:13,760 --> 00:31:18,799
why we're going to be stuck doing it

637
00:31:15,600 --> 00:31:21,918
in oscore or maybe ad hoc

638
00:31:18,799 --> 00:31:23,840
as opposed to somewhere else is that

639
00:31:21,919 --> 00:31:25,279
gtls and the tls working group

640
00:31:23,840 --> 00:31:25,840
essentially feels like they can get away

641
00:31:25,279 --> 00:31:29,039
with saying

642
00:31:25,840 --> 00:31:30,320
don't use ccm8 but i don't think that

643
00:31:29,039 --> 00:31:32,960
that would really fly if

644
00:31:30,320 --> 00:31:34,158
if oscar said don't use ccm8 because

645
00:31:32,960 --> 00:31:36,960
people are using it already

646
00:31:34,159 --> 00:31:39,440
and you know telling them to not do that

647
00:31:36,960 --> 00:31:43,679
is not really going to be effective

648
00:31:39,440 --> 00:31:46,880
so the the way that this analysis would

649
00:31:43,679 --> 00:31:48,080
sort of take form would presumably be to

650
00:31:46,880 --> 00:31:50,720
say

651
00:31:48,080 --> 00:31:51,519
well yes maybe we can accept the lower

652
00:31:50,720 --> 00:31:54,799
security

653
00:31:51,519 --> 00:31:55,679
your attack success probability in some

654
00:31:54,799 --> 00:31:58,320
of these cases

655
00:31:55,679 --> 00:31:59,760
and maybe it depends on how strongly we

656
00:31:58,320 --> 00:32:01,200
care about the particular data in

657
00:31:59,760 --> 00:32:04,799
question

658
00:32:01,200 --> 00:32:07,360
um but i think that probably

659
00:32:04,799 --> 00:32:08,480
oscor is going to have to you know look

660
00:32:07,360 --> 00:32:11,678
at the formulas and

661
00:32:08,480 --> 00:32:14,080
figure out what is actually appropriate

662
00:32:11,679 --> 00:32:16,799
for the iot environments

663
00:32:14,080 --> 00:32:17,439
in order to save that we could use this

664
00:32:16,799 --> 00:32:20,080
um

665
00:32:17,440 --> 00:32:22,159
and i think michael was sort of talking

666
00:32:20,080 --> 00:32:25,039
and typing into the chat

667
00:32:22,159 --> 00:32:26,080
about how yes we shouldn't be rerunning

668
00:32:25,039 --> 00:32:27,840
ad hoc every time

669
00:32:26,080 --> 00:32:30,480
and i agree that's the right way to go i

670
00:32:27,840 --> 00:32:33,360
think john had also mentioned that

671
00:32:30,480 --> 00:32:34,159
so my my sense here is that probably

672
00:32:33,360 --> 00:32:37,199
oscor

673
00:32:34,159 --> 00:32:40,399
or maybe ad hoc is going to be stuck

674
00:32:37,200 --> 00:32:44,320
talking about ccm8

675
00:32:40,399 --> 00:32:44,559
safety and when it's appropriate to use

676
00:32:44,320 --> 00:32:45,100
it

677
00:32:44,559 --> 00:32:48,180
and how

678
00:32:45,100 --> 00:32:48,179
[Music]

679
00:32:51,840 --> 00:32:58,158
and i guess michael jumped back in the

680
00:32:53,840 --> 00:32:58,158
queue so presumably he wants to respond

681
00:32:59,600 --> 00:33:03,678
uh okay so ben so if i understand what

682
00:33:02,240 --> 00:33:06,880
you're telling me is that

683
00:33:03,679 --> 00:33:10,240
because the limits of ccm8 are quite low

684
00:33:06,880 --> 00:33:12,000
um that tls is saying we will solve this

685
00:33:10,240 --> 00:33:13,120
problem by just not using that algorithm

686
00:33:12,000 --> 00:33:15,919
and that's simply not an

687
00:33:13,120 --> 00:33:17,760
option here um right should i get that

688
00:33:15,919 --> 00:33:18,080
correct okay so that's very interesting

689
00:33:17,760 --> 00:33:22,480
to

690
00:33:18,080 --> 00:33:24,879
to understand um so um

691
00:33:22,480 --> 00:33:25,600
so i don't know what that would mean if

692
00:33:24,880 --> 00:33:28,880
i

693
00:33:25,600 --> 00:33:31,918
if i do dtls to set up an os

694
00:33:28,880 --> 00:33:34,720
core oscore uh context um

695
00:33:31,919 --> 00:33:35,840
and then there was no way to well i

696
00:33:34,720 --> 00:33:38,320
guess you'd have to run

697
00:33:35,840 --> 00:33:39,199
the re-key algorithm there so all i'm

698
00:33:38,320 --> 00:33:41,360
really saying though

699
00:33:39,200 --> 00:33:43,039
is that it just seems it seems bizarre

700
00:33:41,360 --> 00:33:45,120
to me to put a re-key whether

701
00:33:43,039 --> 00:33:46,240
john suggested no we can do master keys

702
00:33:45,120 --> 00:33:47,600
and all sorts of other stuff

703
00:33:46,240 --> 00:33:49,679
well it seems to me if we're going to do

704
00:33:47,600 --> 00:33:51,279
that it should be an ad hoc not an os

705
00:33:49,679 --> 00:33:53,600
core that's what i'm trying to say

706
00:33:51,279 --> 00:33:55,279
really okay

707
00:33:53,600 --> 00:33:56,639
i don't care how you do it well maybe i

708
00:33:55,279 --> 00:33:58,240
do care but but

709
00:33:56,640 --> 00:34:00,000
it just seems to me that we should we

710
00:33:58,240 --> 00:34:02,640
should write that down in the key

711
00:34:00,000 --> 00:34:05,919
agreement process not in the other part

712
00:34:02,640 --> 00:34:07,440
um unless there's some strong reason to

713
00:34:05,919 --> 00:34:11,119
do it another way i don't understand

714
00:34:07,440 --> 00:34:12,960
why that would be uh okay

715
00:34:11,119 --> 00:34:15,359
i mean i think it comes up in dts

716
00:34:12,960 --> 00:34:17,679
because dtls is both the key exchange

717
00:34:15,359 --> 00:34:19,520
and the record protection algorithm

718
00:34:17,679 --> 00:34:21,280
and i guess i had been seeing it as

719
00:34:19,520 --> 00:34:22,800
saying if when you're using the record

720
00:34:21,280 --> 00:34:26,320
protection algorithm

721
00:34:22,800 --> 00:34:27,040
you need to do the key update mechanism

722
00:34:26,320 --> 00:34:30,639
which is a

723
00:34:27,040 --> 00:34:34,000
in protocol message for dtls

724
00:34:30,639 --> 00:34:36,399
after however many records and

725
00:34:34,000 --> 00:34:37,280
for ad hoc and oscar we of course have

726
00:34:36,399 --> 00:34:39,118
the

727
00:34:37,280 --> 00:34:41,040
key agreement and the record protection

728
00:34:39,119 --> 00:34:42,320
in separate documents and so it actually

729
00:34:41,040 --> 00:34:44,480
becomes more important

730
00:34:42,320 --> 00:34:46,800
to think about which one it's attached

731
00:34:44,480 --> 00:34:48,719
to in the documentation

732
00:34:46,800 --> 00:34:51,040
i don't have a super strong opinion off

733
00:34:48,719 --> 00:34:54,158
the top of my head so it's

734
00:34:51,040 --> 00:34:54,159
something to think about at least

735
00:34:56,159 --> 00:35:03,760
i think maybe keep it

736
00:34:59,359 --> 00:35:07,520
open and see where the discussions in

737
00:35:03,760 --> 00:35:10,560
core on friday is going and

738
00:35:07,520 --> 00:35:13,759
probably this should be some

739
00:35:10,560 --> 00:35:16,799
information in both ad hoc and

740
00:35:13,760 --> 00:35:18,000
if needed if there will be some update

741
00:35:16,800 --> 00:35:22,160
document to

742
00:35:18,000 --> 00:35:22,160
oscore which of course be there as well

743
00:35:23,520 --> 00:35:34,800
yeah that certainly sounds reasonable

744
00:35:30,880 --> 00:35:37,680
yeah you're around here i just want to

745
00:35:34,800 --> 00:35:39,920
remind you that we also need for oscor

746
00:35:37,680 --> 00:35:41,440
itself

747
00:35:39,920 --> 00:35:44,240
assuming you're keying oscar with

748
00:35:41,440 --> 00:35:48,240
symmetric keys you also need

749
00:35:44,240 --> 00:35:50,160
for that case to have instructions about

750
00:35:48,240 --> 00:35:51,919
how frequently you need to re-key and

751
00:35:50,160 --> 00:35:53,839
how to do it

752
00:35:51,920 --> 00:35:57,599
so if we do it in off court and we solve

753
00:35:53,839 --> 00:36:00,240
it both for for the case when you key it

754
00:35:57,599 --> 00:36:01,280
with asymmetric keys and with symmetric

755
00:36:00,240 --> 00:36:03,040
keys

756
00:36:01,280 --> 00:36:04,560
but i agree with with what's been stated

757
00:36:03,040 --> 00:36:06,560
here that

758
00:36:04,560 --> 00:36:08,240
we should have text in both documents

759
00:36:06,560 --> 00:36:09,839
explaining the problem

760
00:36:08,240 --> 00:36:13,839
but i think the mechanism to solve it

761
00:36:09,839 --> 00:36:13,839
should be enough score

762
00:36:29,119 --> 00:36:34,320
good um any more comment on this or

763
00:36:32,640 --> 00:36:36,720
should we move to the next

764
00:36:34,320 --> 00:36:36,720
issue

765
00:36:39,200 --> 00:36:45,200
it's a comment from jonathan in the

766
00:36:42,880 --> 00:36:45,200
chat

767
00:36:47,920 --> 00:36:55,040
yeah yeah that's

768
00:36:51,599 --> 00:36:58,240
good now we only talked about the second

769
00:36:55,040 --> 00:37:00,880
um where to do i think the

770
00:36:58,240 --> 00:37:01,359
my i guess jonathan's comment here

771
00:37:00,880 --> 00:37:04,880
discuss

772
00:37:01,359 --> 00:37:07,920
about the yeah

773
00:37:04,880 --> 00:37:10,560
i i agree that lake would be a better

774
00:37:07,920 --> 00:37:14,800
place to have discussion about

775
00:37:10,560 --> 00:37:17,680
um this the crypto and security

776
00:37:14,800 --> 00:37:19,040
parts of these equations and what they

777
00:37:17,680 --> 00:37:22,160
mean and

778
00:37:19,040 --> 00:37:26,079
um this is not only

779
00:37:22,160 --> 00:37:29,440
oscar i guess ccm8 is used

780
00:37:26,079 --> 00:37:32,079
in most constrained iot

781
00:37:29,440 --> 00:37:37,839
so it would be good to have a more

782
00:37:32,079 --> 00:37:37,839
general discussion about that

783
00:37:52,000 --> 00:37:55,920
okay so i guess we should keep this one

784
00:37:53,920 --> 00:37:58,240
open and continue the discussion on

785
00:37:55,920 --> 00:38:01,280
github before closing

786
00:37:58,240 --> 00:38:04,078
yeah definitely i think

787
00:38:01,280 --> 00:38:06,000
it should be this will probably not be

788
00:38:04,079 --> 00:38:19,839
closed in a while

789
00:38:06,000 --> 00:38:19,839
if this is going to be discussed in core

790
00:38:25,599 --> 00:38:32,400
so you'd like the next slide john yep

791
00:38:28,320 --> 00:38:36,160
yes please so

792
00:38:32,400 --> 00:38:39,920
next point is future proofing ad hoc

793
00:38:36,160 --> 00:38:40,399
and this is two different slides and two

794
00:38:39,920 --> 00:38:43,040
different

795
00:38:40,400 --> 00:38:43,920
issues so let's start with issue number

796
00:38:43,040 --> 00:38:47,279
19

797
00:38:43,920 --> 00:38:50,400
is shall we replace hkdf with a more

798
00:38:47,280 --> 00:38:53,680
general extract and expand to

799
00:38:50,400 --> 00:38:57,280
allow kmac

800
00:38:53,680 --> 00:39:00,078
so basically hmac is

801
00:38:57,280 --> 00:39:00,640
was designed and is needed to mitigate

802
00:39:00,079 --> 00:39:05,119
length

803
00:39:00,640 --> 00:39:08,480
extension weaknesses in md5 sha-1 shot 2

804
00:39:05,119 --> 00:39:09,839
and shot 3 and shake does not have this

805
00:39:08,480 --> 00:39:11,680
weakness

806
00:39:09,839 --> 00:39:13,359
and therefore nist has standardized the

807
00:39:11,680 --> 00:39:16,399
more simple and efficient

808
00:39:13,359 --> 00:39:16,400
kmac mode

809
00:39:16,800 --> 00:39:20,560
currently the addock document says that

810
00:39:18,720 --> 00:39:25,279
you shall use

811
00:39:20,560 --> 00:39:25,279
hmac in hkdf

812
00:39:25,359 --> 00:39:31,680
but as has been also been suggested and

813
00:39:28,960 --> 00:39:34,720
discussed for the hpke

814
00:39:31,680 --> 00:39:37,759
document in cfrd

815
00:39:34,720 --> 00:39:42,160
the suggestion is to specify ad hoc

816
00:39:37,760 --> 00:39:45,920
in terms of extract and expand

817
00:39:42,160 --> 00:39:49,040
instead of hkdf extractance band

818
00:39:45,920 --> 00:39:51,440
and then you use hmac

819
00:39:49,040 --> 00:39:52,640
when the hash function is short two and

820
00:39:51,440 --> 00:39:56,400
use kmac

821
00:39:52,640 --> 00:40:00,078
when the hash function is shake

822
00:39:56,400 --> 00:40:03,440
and i already

823
00:40:00,079 --> 00:40:05,599
sent the mail to cfrg

824
00:40:03,440 --> 00:40:07,920
yesterday and quickly got the response

825
00:40:05,599 --> 00:40:11,200
there from hillary

826
00:40:07,920 --> 00:40:13,440
who suggested the following

827
00:40:11,200 --> 00:40:14,720
adaptation to kmac for extract and

828
00:40:13,440 --> 00:40:17,920
expand

829
00:40:14,720 --> 00:40:20,480
and could be discussed whether

830
00:40:17,920 --> 00:40:22,480
it should include a context obviously

831
00:40:20,480 --> 00:40:26,960
the hkdf

832
00:40:22,480 --> 00:40:30,640
use does not use a context as specified

833
00:40:26,960 --> 00:40:33,680
but hillary pointed out that kmac

834
00:40:30,640 --> 00:40:39,359
could use the constant context

835
00:40:33,680 --> 00:40:42,879
that's the kdf extraction and expansion

836
00:40:39,359 --> 00:40:45,520
and the comments on gpa

837
00:40:42,880 --> 00:40:47,440
github was is positive that this is

838
00:40:45,520 --> 00:40:51,280
something we should

839
00:40:47,440 --> 00:40:55,440
probably do i myself feel that there is

840
00:40:51,280 --> 00:40:59,680
we should do this to be open to

841
00:40:55,440 --> 00:41:04,319
not only kmac but also any future

842
00:40:59,680 --> 00:41:04,319
kdfs that are specified

843
00:41:04,839 --> 00:41:10,560
um and there is

844
00:41:07,200 --> 00:41:12,720
a question from sean how well why the

845
00:41:10,560 --> 00:41:16,480
implement the kmac is

846
00:41:12,720 --> 00:41:19,520
i don't really know shake is

847
00:41:16,480 --> 00:41:23,200
i feel is having quite

848
00:41:19,520 --> 00:41:26,160
quite some implementation and growing

849
00:41:23,200 --> 00:41:26,720
kmac is basically if you have shake you

850
00:41:26,160 --> 00:41:30,720
have

851
00:41:26,720 --> 00:41:34,240
kmac but the kmx specification is quite

852
00:41:30,720 --> 00:41:37,359
new so i i don't

853
00:41:34,240 --> 00:41:39,439
think there's probably not many apis but

854
00:41:37,359 --> 00:41:49,839
you can if you have shake you can very

855
00:41:39,440 --> 00:41:49,839
very very easily do it yourself

856
00:41:50,800 --> 00:41:55,920
yes the discussion in hpk was

857
00:41:56,079 --> 00:42:02,400
definitely the same thing i think what

858
00:41:59,359 --> 00:42:03,119
they decided was that they did not

859
00:42:02,400 --> 00:42:07,359
mention

860
00:42:03,119 --> 00:42:09,040
kmac but the document

861
00:42:07,359 --> 00:42:10,880
they made the document or the document

862
00:42:09,040 --> 00:42:13,680
the boss

863
00:42:10,880 --> 00:42:17,839
general in terms of extract and expand

864
00:42:13,680 --> 00:42:17,839
the auto set

865
00:42:21,839 --> 00:42:31,839
any comments on this

866
00:42:42,240 --> 00:42:46,399
let's do in comment yep i think it was

867
00:42:44,880 --> 00:42:50,160
one comment from

868
00:42:46,400 --> 00:42:52,480
from tim in the in the

869
00:42:50,160 --> 00:42:53,920
issue tracker which was basically

870
00:42:52,480 --> 00:42:56,000
supportive

871
00:42:53,920 --> 00:42:58,000
well yeah i think that was basically

872
00:42:56,000 --> 00:42:58,480
both from from peter and timothy there

873
00:42:58,000 --> 00:43:01,599
was

874
00:42:58,480 --> 00:43:04,960
yeah that was good support and and also

875
00:43:01,599 --> 00:43:04,960
with respect to implementation

876
00:43:06,720 --> 00:43:13,839
so so yes you're in the queue or

877
00:43:21,359 --> 00:43:24,839
militia i see you on thecube yes can you

878
00:43:23,920 --> 00:43:27,359
hear me

879
00:43:24,839 --> 00:43:28,720
yeah i'm having some little issues with

880
00:43:27,359 --> 00:43:30,880
uh with i'm using my mic

881
00:43:28,720 --> 00:43:32,799
sorry about that so uh essentially what

882
00:43:30,880 --> 00:43:35,200
i wanted to say i want to judge john

883
00:43:32,800 --> 00:43:36,160
uh that based on the understanding of

884
00:43:35,200 --> 00:43:38,879
this issue

885
00:43:36,160 --> 00:43:41,040
adding kmac would mean adding another

886
00:43:38,880 --> 00:43:41,920
element in the cypher suit with which we

887
00:43:41,040 --> 00:43:44,720
would be

888
00:43:41,920 --> 00:43:45,920
increasing the complexity right so uh i

889
00:43:44,720 --> 00:43:47,919
have a question

890
00:43:45,920 --> 00:43:49,839
i have a question whether it's possible

891
00:43:47,920 --> 00:43:52,800
to do uh

892
00:43:49,839 --> 00:43:55,040
hkdf with shake and what are the

893
00:43:52,800 --> 00:43:59,000
disadvantages of this

894
00:43:55,040 --> 00:44:02,800
yes you you can use um

895
00:43:59,000 --> 00:44:05,839
hmac with shake it requires

896
00:44:02,800 --> 00:44:08,480
you need to run shake double the amount

897
00:44:05,839 --> 00:44:12,400
of time basically

898
00:44:08,480 --> 00:44:16,160
the plan was not to include this in

899
00:44:12,400 --> 00:44:18,400
register any shake kmac cipher suits

900
00:44:16,160 --> 00:44:19,600
as currently specified you can use ad

901
00:44:18,400 --> 00:44:20,800
hoc with all the

902
00:44:19,600 --> 00:44:24,160
[Music]

903
00:44:20,800 --> 00:44:29,440
cosi algoriths

904
00:44:24,160 --> 00:44:29,440
if you use a private cypher suit

905
00:44:29,520 --> 00:44:35,680
the plan was to

906
00:44:32,560 --> 00:44:38,799
instead of having hkdf expand to use

907
00:44:35,680 --> 00:44:42,078
expand and extract and then

908
00:44:38,800 --> 00:44:45,119
have a line saying that if you have

909
00:44:42,079 --> 00:44:48,960
short 2 then you use h

910
00:44:45,119 --> 00:44:52,560
hmac hkdf and if you have

911
00:44:48,960 --> 00:44:55,680
shake then you use kmac

912
00:44:52,560 --> 00:44:58,720
and give give formulas

913
00:44:55,680 --> 00:45:00,720
like the ones here how you do that that

914
00:44:58,720 --> 00:45:05,839
will not be something people

915
00:45:00,720 --> 00:45:05,839
need to need to implement

916
00:45:10,560 --> 00:45:13,759
okay i see so essentially you're saying

917
00:45:12,400 --> 00:45:15,520
if the if the hash

918
00:45:13,760 --> 00:45:16,880
if the hash function is shaped that by

919
00:45:15,520 --> 00:45:19,599
default we would be using

920
00:45:16,880 --> 00:45:20,160
kmac and therefore not be adding it to

921
00:45:19,599 --> 00:45:23,359
the

922
00:45:20,160 --> 00:45:23,359
district okay i see

923
00:45:25,680 --> 00:45:30,560
so we have uh stephen and timothy in the

924
00:45:28,480 --> 00:45:34,640
queue

925
00:45:30,560 --> 00:45:36,240
yes is there any reason why the answer

926
00:45:34,640 --> 00:45:46,160
here should be different for

927
00:45:36,240 --> 00:45:48,399
ad hoc and hpke

928
00:45:46,160 --> 00:45:48,399
no

929
00:45:49,359 --> 00:45:54,000
so i guess my suggestion in that case is

930
00:45:51,920 --> 00:45:57,440
if there's no reason for them to differ

931
00:45:54,000 --> 00:46:00,480
we should probably have them the same

932
00:45:57,440 --> 00:46:03,520
or then find a reason otherwise i

933
00:46:00,480 --> 00:46:08,160
i think i think

934
00:46:03,520 --> 00:46:10,720
one difference is that hpk was very far

935
00:46:08,160 --> 00:46:12,799
i actually commented on this a long time

936
00:46:10,720 --> 00:46:14,640
ago but then the authors

937
00:46:12,800 --> 00:46:16,720
did not do anything then there was a

938
00:46:14,640 --> 00:46:19,839
comment now when they are very late in

939
00:46:16,720 --> 00:46:22,720
the process and they did not want to

940
00:46:19,839 --> 00:46:23,440
add any new formulas but they said it

941
00:46:22,720 --> 00:46:25,680
was

942
00:46:23,440 --> 00:46:28,960
general so i think the change is that

943
00:46:25,680 --> 00:46:31,359
the difference is that ad hoc is a lot

944
00:46:28,960 --> 00:46:32,560
earlier in the standardization process

945
00:46:31,359 --> 00:46:36,560
so it

946
00:46:32,560 --> 00:46:39,839
i would suggest to add like formulas

947
00:46:36,560 --> 00:46:43,839
like this into the draw to explain how

948
00:46:39,839 --> 00:46:43,839
how one would use kmac

949
00:46:47,200 --> 00:46:53,439
okay yeah i mean i i guess

950
00:46:50,880 --> 00:46:55,280
generally i'm i'm adding adding more

951
00:46:53,440 --> 00:46:57,359
options for people to implement

952
00:46:55,280 --> 00:46:58,720
is not something that is that friendly

953
00:46:57,359 --> 00:47:00,160
towards implementers but

954
00:46:58,720 --> 00:47:02,319
if that's the right thing to do i guess

955
00:47:00,160 --> 00:47:02,319
but

956
00:47:08,839 --> 00:47:11,839
tim

957
00:47:27,680 --> 00:47:30,720
did you want to say something

958
00:47:37,359 --> 00:47:44,558
so there is an army button in the uh

959
00:47:40,960 --> 00:47:47,119
in this in in the upper left

960
00:47:44,559 --> 00:47:48,240
corner that you should hit can you hear

961
00:47:47,119 --> 00:47:51,520
me now

962
00:47:48,240 --> 00:47:52,160
yes okay sorry uh yeah i was only

963
00:47:51,520 --> 00:47:54,960
wondering

964
00:47:52,160 --> 00:47:55,520
uh if there was a substantial difference

965
00:47:54,960 --> 00:47:58,880
between

966
00:47:55,520 --> 00:48:02,020
a shake software implementation and uh

967
00:47:58,880 --> 00:48:03,200
the sha software implementation um

968
00:48:02,020 --> 00:48:07,839
[Music]

969
00:48:03,200 --> 00:48:07,839
i don't know if anybody knows this

970
00:48:17,839 --> 00:48:23,359
i guess not i can look it up maybe

971
00:48:32,839 --> 00:48:37,520
later

972
00:48:34,880 --> 00:48:38,720
comment on michael's commentary so so

973
00:48:37,520 --> 00:48:42,240
both

974
00:48:38,720 --> 00:48:45,520
shot two and shake are currently

975
00:48:42,240 --> 00:49:03,839
uh possible to use in hedok

976
00:48:45,520 --> 00:49:03,839
as they are registered cozy algoriths

977
00:49:21,040 --> 00:49:28,480
okay seems to be posted to

978
00:49:25,119 --> 00:49:32,160
to to make the change from

979
00:49:28,480 --> 00:49:35,440
to extract and the span similar to hpk

980
00:49:32,160 --> 00:49:38,879
e and that's otherwise i think let's

981
00:49:35,440 --> 00:49:43,040
discuss more on github maybe

982
00:49:38,880 --> 00:49:45,680
and just understanding christian's

983
00:49:43,040 --> 00:49:47,599
comment here when he says i understood

984
00:49:45,680 --> 00:49:50,720
it already be a choice of

985
00:49:47,599 --> 00:49:54,079
charter with hkdf shake with kmac

986
00:49:50,720 --> 00:49:57,118
and so on so that i mean

987
00:49:54,079 --> 00:50:00,559
the so the the difference would be

988
00:49:57,119 --> 00:50:02,960
that if you decide to implement shake

989
00:50:00,559 --> 00:50:03,760
then or if the cypher suite says shake

990
00:50:02,960 --> 00:50:07,760
then

991
00:50:03,760 --> 00:50:09,040
you need to have kmac and yeah so yeah

992
00:50:07,760 --> 00:50:12,240
and that's well it's a good question

993
00:50:09,040 --> 00:50:14,319
is that is that too complex

994
00:50:12,240 --> 00:50:15,680
thing to have uh is it obvious is it

995
00:50:14,319 --> 00:50:18,880
better that we

996
00:50:15,680 --> 00:50:18,879
stick to hkdf

997
00:50:19,359 --> 00:50:26,400
i i think the the the idea is to

998
00:50:22,880 --> 00:50:28,960
decrease the complexity for somebody

999
00:50:26,400 --> 00:50:29,520
that in the future only wants to support

1000
00:50:28,960 --> 00:50:32,400
shake

1001
00:50:29,520 --> 00:50:34,880
and not short to then you don't need to

1002
00:50:32,400 --> 00:50:34,880
implement

1003
00:50:38,839 --> 00:50:41,839
hmac

1004
00:50:44,400 --> 00:50:47,680
yep good point let's let's take it to

1005
00:50:46,319 --> 00:50:50,558
the issue so

1006
00:50:47,680 --> 00:50:53,598
shake plus hmac shake would not be a

1007
00:50:50,559 --> 00:50:56,000
thing is what you're saying

1008
00:50:53,599 --> 00:50:57,440
yes okay and i think we're all on

1009
00:50:56,000 --> 00:50:58,640
agreement with that i think everyone's

1010
00:50:57,440 --> 00:51:00,559
in agreement with that

1011
00:50:58,640 --> 00:51:09,839
and maybe a surprise that that was even

1012
00:51:00,559 --> 00:51:09,839
a consideration

1013
00:51:10,160 --> 00:51:17,920
okay good then we

1014
00:51:13,920 --> 00:51:22,880
i guess the the plan is to

1015
00:51:17,920 --> 00:51:25,119
move ahead with this um then

1016
00:51:22,880 --> 00:51:27,040
uh but let's discuss let's keep the

1017
00:51:25,119 --> 00:51:30,079
issue open on the

1018
00:51:27,040 --> 00:51:30,800
github let's move to the next slide

1019
00:51:30,079 --> 00:51:34,400
maybe

1020
00:51:30,800 --> 00:51:37,440
unless there's any more uh so

1021
00:51:34,400 --> 00:51:41,760
this is a different issue under the

1022
00:51:37,440 --> 00:51:41,760
future proofing ad hoc

1023
00:51:42,559 --> 00:51:44,800
so

1024
00:51:45,920 --> 00:51:53,760
ad hoc currently uses elliptic

1025
00:51:49,680 --> 00:51:57,040
curve dv hellmann both for key exchange

1026
00:51:53,760 --> 00:51:59,599
and for authentication in one of the

1027
00:51:57,040 --> 00:51:59,599
methods

1028
00:52:01,280 --> 00:52:09,359
and all the new peak you see

1029
00:52:04,880 --> 00:52:12,960
algos for from a nist is expected to be

1030
00:52:09,359 --> 00:52:15,279
be specified as key encapsulation

1031
00:52:12,960 --> 00:52:18,960
methods

1032
00:52:15,280 --> 00:52:20,480
uh therefore it might be a good idea to

1033
00:52:18,960 --> 00:52:24,079
specify ad hoc

1034
00:52:20,480 --> 00:52:27,680
in terms of key encapsulation

1035
00:52:24,079 --> 00:52:33,119
methods so it's prepared to be used with

1036
00:52:27,680 --> 00:52:36,960
future chem algorithms uh

1037
00:52:33,119 --> 00:52:40,319
for divi hellman i think this would be a

1038
00:52:36,960 --> 00:52:43,839
purely specification change

1039
00:52:40,319 --> 00:52:46,880
depending yeah depending a bit

1040
00:52:43,839 --> 00:52:49,279
on exactly what you do there was would

1041
00:52:46,880 --> 00:52:50,880
definitely not be a change to message

1042
00:52:49,280 --> 00:52:54,400
size

1043
00:52:50,880 --> 00:52:58,480
uh cfrdhpe

1044
00:52:54,400 --> 00:53:01,760
is the has done a great job of defining

1045
00:52:58,480 --> 00:53:04,800
exact interfaces for both un

1046
00:53:01,760 --> 00:53:08,000
authenticated and unauthenticated

1047
00:53:04,800 --> 00:53:11,359
chem if

1048
00:53:08,000 --> 00:53:13,760
you would use implement ad hoc

1049
00:53:11,359 --> 00:53:15,040
variants of these interfaces there would

1050
00:53:13,760 --> 00:53:17,680
be no

1051
00:53:15,040 --> 00:53:19,960
change to the implementations if you

1052
00:53:17,680 --> 00:53:23,759
want to follow the seder code in

1053
00:53:19,960 --> 00:53:26,720
hpke then there would be

1054
00:53:23,760 --> 00:53:29,440
implementation changes but no changes to

1055
00:53:26,720 --> 00:53:32,640
message sizes

1056
00:53:29,440 --> 00:53:36,079
so the interfaces defined by hpke

1057
00:53:32,640 --> 00:53:37,598
is generatekeeper that's easy to

1058
00:53:36,079 --> 00:53:41,119
understand you generate the

1059
00:53:37,599 --> 00:53:42,960
private and public key then you have

1060
00:53:41,119 --> 00:53:44,720
on the left side you have the methods

1061
00:53:42,960 --> 00:53:46,079
that will be needed for the signature

1062
00:53:44,720 --> 00:53:50,558
method so it's only

1063
00:53:46,079 --> 00:53:53,040
key exchange so ncap takes a public key

1064
00:53:50,559 --> 00:53:54,880
and generates a shared secret and

1065
00:53:53,040 --> 00:53:58,558
encryption

1066
00:53:54,880 --> 00:53:58,960
and in the dv helmand case the ch secret

1067
00:53:58,559 --> 00:54:03,680
is

1068
00:53:58,960 --> 00:54:06,400
e to the power of x y and encryption is

1069
00:54:03,680 --> 00:54:06,960
the the the other the new public key

1070
00:54:06,400 --> 00:54:09,839
basically

1071
00:54:06,960 --> 00:54:10,079
g to the power of y and then you have

1072
00:54:09,839 --> 00:54:13,359
the

1073
00:54:10,079 --> 00:54:15,680
d cap where you take encryption which in

1074
00:54:13,359 --> 00:54:18,240
different minus c to power

1075
00:54:15,680 --> 00:54:19,279
y and you take your own secret key which

1076
00:54:18,240 --> 00:54:22,399
is x

1077
00:54:19,280 --> 00:54:23,200
and you get the same shared secret in

1078
00:54:22,400 --> 00:54:25,280
the

1079
00:54:23,200 --> 00:54:27,919
hellmann case you would need the

1080
00:54:25,280 --> 00:54:30,960
authenticated ncap functions

1081
00:54:27,920 --> 00:54:32,480
where you in addition to the ephemeral

1082
00:54:30,960 --> 00:54:36,079
public key

1083
00:54:32,480 --> 00:54:39,200
pkr you also input your own

1084
00:54:36,079 --> 00:54:42,720
secret staticky in erdoc

1085
00:54:39,200 --> 00:54:45,680
the secret staticky is called

1086
00:54:42,720 --> 00:54:47,040
r on the respondent side and i on the

1087
00:54:45,680 --> 00:54:49,440
initiator's

1088
00:54:47,040 --> 00:54:49,440
side

1089
00:54:50,839 --> 00:54:57,200
and uh reading up about this after the

1090
00:54:54,880 --> 00:55:00,319
issue was created it seems

1091
00:54:57,200 --> 00:55:03,359
very likely that future camps will

1092
00:55:00,319 --> 00:55:03,759
adhere to the general keeper and captain

1093
00:55:03,359 --> 00:55:06,480
d

1094
00:55:03,760 --> 00:55:07,040
cab but maybe not as clear that they

1095
00:55:06,480 --> 00:55:10,400
would

1096
00:55:07,040 --> 00:55:15,839
adhere to the cfrt hpk

1097
00:55:10,400 --> 00:55:19,280
authm cap auth dcap interfaces

1098
00:55:15,839 --> 00:55:22,960
uh seems to be an open research

1099
00:55:19,280 --> 00:55:26,720
question at this time um

1100
00:55:22,960 --> 00:55:26,720
but i'm not sure

1101
00:55:27,040 --> 00:55:32,720
a problem is that while

1102
00:55:30,160 --> 00:55:34,399
the ephemeral key is only used one time

1103
00:55:32,720 --> 00:55:38,078
in this auth end cap

1104
00:55:34,400 --> 00:55:41,200
inside what end cap function it

1105
00:55:38,079 --> 00:55:41,520
basically needs to be done used twice

1106
00:55:41,200 --> 00:55:44,640
for

1107
00:55:41,520 --> 00:55:46,839
encapsulation which does not necessarily

1108
00:55:44,640 --> 00:55:50,480
work with all the pqc

1109
00:55:46,839 --> 00:55:51,440
algoriths comments on github was

1110
00:55:50,480 --> 00:55:54,640
generally

1111
00:55:51,440 --> 00:55:59,040
positive but

1112
00:55:54,640 --> 00:56:01,440
i think if we are sure that

1113
00:55:59,040 --> 00:56:03,040
if this will lead to that we can just

1114
00:56:01,440 --> 00:56:05,040
plug in pqc algorithms

1115
00:56:03,040 --> 00:56:07,680
and i think this is a good thing to do

1116
00:56:05,040 --> 00:56:09,920
if we are unsure that that will work

1117
00:56:07,680 --> 00:56:13,040
then i think this is just

1118
00:56:09,920 --> 00:56:15,119
making the document

1119
00:56:13,040 --> 00:56:16,319
it might make the document harder to

1120
00:56:15,119 --> 00:56:19,359
understand for

1121
00:56:16,319 --> 00:56:23,200
people that are used to elliptic curtis

1122
00:56:19,359 --> 00:56:27,520
helmand and not to key encapsulation

1123
00:56:23,200 --> 00:56:30,480
methods um

1124
00:56:27,520 --> 00:56:33,920
i think maybe a way forward would be to

1125
00:56:30,480 --> 00:56:33,920
ask cfrdy for

1126
00:56:42,839 --> 00:56:45,839
advice

1127
00:56:46,480 --> 00:56:49,920
any comments on this

1128
00:56:51,680 --> 00:56:55,919
i don't think it's worth doing only for

1129
00:56:53,839 --> 00:56:56,839
the key exchange if we cannot do it for

1130
00:56:55,920 --> 00:56:59,839
the

1131
00:56:56,839 --> 00:56:59,839
authenticated

1132
00:57:10,839 --> 00:57:13,839
gaps

1133
00:57:15,440 --> 00:57:18,880
so so just just one comment that we in

1134
00:57:17,440 --> 00:57:22,799
the requirements document

1135
00:57:18,880 --> 00:57:26,000
for lake we actually said that uh public

1136
00:57:22,799 --> 00:57:27,759
that post quantum is out of scope so

1137
00:57:26,000 --> 00:57:29,040
it doesn't mean that we don't have to

1138
00:57:27,760 --> 00:57:31,280
take

1139
00:57:29,040 --> 00:57:34,000
take it into account in this way but we

1140
00:57:31,280 --> 00:57:36,160
are not obliged to

1141
00:57:34,000 --> 00:57:37,040
to support that in in this version of

1142
00:57:36,160 --> 00:57:40,640
the

1143
00:57:37,040 --> 00:57:43,839
of the document yeah i think the

1144
00:57:40,640 --> 00:57:46,160
plan is not to try to standardize any

1145
00:57:43,839 --> 00:57:50,160
pqc algorith

1146
00:57:46,160 --> 00:57:54,160
this time it's just to if this is the

1147
00:57:50,160 --> 00:57:56,960
future way authenticated

1148
00:57:54,160 --> 00:57:57,759
public key encryption and key exchange

1149
00:57:56,960 --> 00:58:01,119
interfaces

1150
00:57:57,760 --> 00:58:01,760
will look like it might be a very good

1151
00:58:01,119 --> 00:58:09,839
idea to

1152
00:58:01,760 --> 00:58:09,839
adopt to that already today

1153
00:58:21,280 --> 00:58:24,400
and the algorithms themselves will not

1154
00:58:23,359 --> 00:58:27,440
necessarily

1155
00:58:24,400 --> 00:58:29,440
need to specify these interfaces

1156
00:58:27,440 --> 00:58:33,200
themselves but they

1157
00:58:29,440 --> 00:58:36,559
it would be necessary that they can be

1158
00:58:33,200 --> 00:58:37,558
made to work with the old authenticated

1159
00:58:36,559 --> 00:58:40,559
cap

1160
00:58:37,559 --> 00:58:40,559
interfaces

1161
00:58:41,950 --> 00:58:46,960
[Music]

1162
00:58:43,760 --> 00:58:50,240
if there's not any more comments

1163
00:58:46,960 --> 00:58:53,520
i suggest that i formulate the

1164
00:58:50,240 --> 00:58:55,680
message to cfrg and

1165
00:58:53,520 --> 00:58:56,960
let's see what see if all this says

1166
00:58:55,680 --> 00:58:59,598
about this

1167
00:58:56,960 --> 00:59:00,240
could also formulate the mail to the

1168
00:58:59,599 --> 00:59:04,319
nist

1169
00:59:00,240 --> 00:59:07,279
pqc standardization list

1170
00:59:04,319 --> 00:59:08,000
and then we could see based on that we

1171
00:59:07,280 --> 00:59:11,520
can

1172
00:59:08,000 --> 00:59:15,119
discuss this more so

1173
00:59:11,520 --> 00:59:19,440
just a clarification question ignoring

1174
00:59:15,119 --> 00:59:24,480
post quantum is the proposal to

1175
00:59:19,440 --> 00:59:28,240
make ad hoc apis look more like hpke

1176
00:59:24,480 --> 00:59:30,160
yes okay uh i i think that sounds like a

1177
00:59:28,240 --> 00:59:31,520
quite a good idea because

1178
00:59:30,160 --> 00:59:34,640
it seems that people seem to like the

1179
00:59:31,520 --> 00:59:38,000
the interface in hpk so

1180
00:59:34,640 --> 00:59:40,000
i think the interface so what you're

1181
00:59:38,000 --> 00:59:42,880
saying is that it might be a good idea

1182
00:59:40,000 --> 00:59:45,920
even if we don't

1183
00:59:42,880 --> 00:59:47,040
are not sure that the future pqc

1184
00:59:45,920 --> 00:59:50,559
algorithms will

1185
00:59:47,040 --> 00:59:55,359
be a plug and play here

1186
00:59:50,559 --> 00:59:58,319
yes the idea of adopting to hpke is good

1187
00:59:55,359 --> 00:59:59,520
certainly i mean yeah the the api the

1188
00:59:58,319 --> 01:00:02,000
apis that

1189
00:59:59,520 --> 01:00:05,200
that it includes people seem to like so

1190
01:00:02,000 --> 01:00:05,200
that seems like a reasonable idea

1191
01:00:06,420 --> 01:00:10,320
[Music]

1192
01:00:10,799 --> 01:00:15,839
that's a good point

1193
01:00:20,640 --> 01:00:28,078
would you then suggest just using the

1194
01:00:24,000 --> 01:00:28,559
same api or using the seder code also

1195
01:00:28,079 --> 01:00:31,680
that

1196
01:00:28,559 --> 01:00:35,200
um hpka

1197
01:00:31,680 --> 01:00:38,399
are uh providing for

1198
01:00:35,200 --> 01:00:39,040
authencap and old decap i think that

1199
01:00:38,400 --> 01:00:42,160
would

1200
01:00:39,040 --> 01:00:46,558
be very possible to do but it would

1201
01:00:42,160 --> 01:00:46,558
definitely change the test vectors

1202
01:00:51,520 --> 01:00:58,559
i i guess i'm neutral um so but i i

1203
01:00:56,960 --> 01:00:59,920
the more like these things are i guess

1204
01:00:58,559 --> 01:01:01,599
that would that would help people

1205
01:00:59,920 --> 01:01:04,640
implementing to some extent

1206
01:01:01,599 --> 01:01:07,119
but again i'm neutral so yeah but i

1207
01:01:04,640 --> 01:01:10,480
think that might be

1208
01:01:07,119 --> 01:01:14,160
that might be a

1209
01:01:10,480 --> 01:01:16,799
then you might be able to reuse hpke

1210
01:01:14,160 --> 01:01:17,520
implementation for the associates would

1211
01:01:16,799 --> 01:01:25,839
have

1212
01:01:17,520 --> 01:01:25,839
might have benefits

1213
01:01:27,200 --> 01:01:30,799
there's a comment by tara here which i

1214
01:01:29,359 --> 01:01:31,200
didn't understand terry would you like

1215
01:01:30,799 --> 01:01:33,359
to

1216
01:01:31,200 --> 01:01:35,040
take this this comment about the ad

1217
01:01:33,359 --> 01:01:39,839
interface and how that

1218
01:01:35,040 --> 01:01:39,839
applies here

1219
01:01:53,359 --> 01:02:00,319
can you hear me now yeah yes yeah so

1220
01:01:56,640 --> 01:02:02,480
so i i mean ip second secret cell and

1221
01:02:00,319 --> 01:02:03,359
so on we had this issue with aid

1222
01:02:02,480 --> 01:02:05,200
algorithms

1223
01:02:03,359 --> 01:02:06,480
because early early days we have a

1224
01:02:05,200 --> 01:02:07,200
separate you know authentication and

1225
01:02:06,480 --> 01:02:09,599
separate

1226
01:02:07,200 --> 01:02:10,480
encryption algorithm i did cause some

1227
01:02:09,599 --> 01:02:12,559
problems

1228
01:02:10,480 --> 01:02:14,559
later when we every now everything is

1229
01:02:12,559 --> 01:02:16,880
aad algorithms

1230
01:02:14,559 --> 01:02:18,160
for example last ever sorry secret cell

1231
01:02:16,880 --> 01:02:19,680
there was lots of issues

1232
01:02:18,160 --> 01:02:21,359
because the interfaces don't really

1233
01:02:19,680 --> 01:02:24,078
support

1234
01:02:21,359 --> 01:02:25,598
the aad algorithms that are used now

1235
01:02:24,079 --> 01:02:28,400
don't really support the way that the

1236
01:02:25,599 --> 01:02:29,520
security is doing things so if you move

1237
01:02:28,400 --> 01:02:32,960
things to use

1238
01:02:29,520 --> 01:02:35,520
you know something that is

1239
01:02:32,960 --> 01:02:37,119
going to be used by future algorithms it

1240
01:02:35,520 --> 01:02:38,640
knows also it also makes so that we

1241
01:02:37,119 --> 01:02:39,039
don't actually use any features that are

1242
01:02:38,640 --> 01:02:49,839
not

1243
01:02:39,039 --> 01:02:49,839
allowed by that

1244
01:02:57,599 --> 01:03:05,520
sorry could you i my phone just rang

1245
01:03:01,760 --> 01:03:07,920
could you repeat what you you said

1246
01:03:05,520 --> 01:03:08,960
you heard you just began talking about

1247
01:03:07,920 --> 01:03:12,319
the ada

1248
01:03:08,960 --> 01:03:15,280
and that it was good to adopt to that

1249
01:03:12,319 --> 01:03:16,960
early was that their understanding it

1250
01:03:15,280 --> 01:03:19,760
would have been easier if you had

1251
01:03:16,960 --> 01:03:20,720
adopted that in earlier in about yeah

1252
01:03:19,760 --> 01:03:22,400
good

1253
01:03:20,720 --> 01:03:25,118
because we didn't do that we ended up

1254
01:03:22,400 --> 01:03:27,359
problems but we then started you know

1255
01:03:25,119 --> 01:03:28,559
start to form things in this way and

1256
01:03:27,359 --> 01:03:30,000
then we realized that oh

1257
01:03:28,559 --> 01:03:31,760
we are doing some things that we can't

1258
01:03:30,000 --> 01:03:34,240
actually do there with that

1259
01:03:31,760 --> 01:03:35,599
framework and for example the secure

1260
01:03:34,240 --> 01:03:37,200
cell was having did that they actually

1261
01:03:35,599 --> 01:03:38,559
encrypted the length which means that

1262
01:03:37,200 --> 01:03:41,919
before they can actually

1263
01:03:38,559 --> 01:03:45,200
record the pocket they have to you know

1264
01:03:41,920 --> 01:03:47,440
decrypt the first uh first block

1265
01:03:45,200 --> 01:03:49,759
before they can actually verify the hash

1266
01:03:47,440 --> 01:03:51,440
and aad algorithms doesn't allow that to

1267
01:03:49,760 --> 01:03:53,280
be done very easily

1268
01:03:51,440 --> 01:03:55,920
and that kind of we ended up in some

1269
01:03:53,280 --> 01:03:55,920
issues there

1270
01:03:56,839 --> 01:04:02,720
good um

1271
01:03:59,440 --> 01:04:05,920
christian had a a question

1272
01:04:02,720 --> 01:04:08,959
here on the chat how this would affect

1273
01:04:05,920 --> 01:04:12,000
cozy apis

1274
01:04:08,960 --> 01:04:13,920
with this use then hpk apis rather than

1275
01:04:12,000 --> 01:04:17,440
encodes the apis that's

1276
01:04:13,920 --> 01:04:20,250
that's a good question which i

1277
01:04:17,440 --> 01:04:23,469
don't have an answer to right now i

1278
01:04:20,250 --> 01:04:23,469
[Music]

1279
01:04:24,839 --> 01:04:27,839
think

1280
01:04:46,559 --> 01:04:50,880
so generally i think the people are

1281
01:04:48,160 --> 01:04:55,839
positively inclined to doing this change

1282
01:04:50,880 --> 01:04:55,839
yes does anyone object

1283
01:04:59,520 --> 01:05:04,720
i hear none so i guess we should be

1284
01:05:02,960 --> 01:05:08,640
doing this john

1285
01:05:04,720 --> 01:05:10,240
yeah let's have the working assumption

1286
01:05:08,640 --> 01:05:14,160
that we will

1287
01:05:10,240 --> 01:05:16,319
do this i think it requires a more

1288
01:05:14,160 --> 01:05:17,200
investigation how it will affect

1289
01:05:16,319 --> 01:05:20,000
different things

1290
01:05:17,200 --> 01:05:21,759
and which will probably result in more

1291
01:05:20,000 --> 01:05:25,200
discussion but

1292
01:05:21,760 --> 01:05:27,119
let's move ahead with

1293
01:05:25,200 --> 01:05:29,200
with analyzing and trying to specify

1294
01:05:27,119 --> 01:05:33,039
this

1295
01:05:29,200 --> 01:05:37,839
sounds good okay

1296
01:05:33,039 --> 01:05:37,839
next slide

1297
01:05:42,640 --> 01:05:47,759
so more ways to identify certificates

1298
01:05:48,240 --> 01:05:53,618
c5u and c5t

1299
01:05:50,510 --> 01:05:53,619
[Music]

1300
01:05:53,680 --> 01:06:00,558
so these are two quite different

1301
01:05:56,960 --> 01:06:03,760
two different issues so currently

1302
01:06:00,559 --> 01:06:09,119
the assumption in the addock document

1303
01:06:03,760 --> 01:06:09,119
is that you use x5t or x5zu

1304
01:06:09,680 --> 01:06:14,240
to identify a certificate x509

1305
01:06:13,039 --> 01:06:16,960
certificates

1306
01:06:14,240 --> 01:06:17,598
and if you're using a raw public key

1307
01:06:16,960 --> 01:06:21,440
that is

1308
01:06:17,599 --> 01:06:24,640
identified with a kit which the entities

1309
01:06:21,440 --> 01:06:25,200
shows themselves it's just a variable

1310
01:06:24,640 --> 01:06:27,839
length

1311
01:06:25,200 --> 01:06:27,839
byte string

1312
01:06:29,839 --> 01:06:35,920
cosy working group is planning to work

1313
01:06:32,960 --> 01:06:39,440
on seaboard certificate

1314
01:06:35,920 --> 01:06:42,559
it's in the draft charter and that would

1315
01:06:39,440 --> 01:06:43,440
very likely result in new identifiers

1316
01:06:42,559 --> 01:06:47,839
for

1317
01:06:43,440 --> 01:06:47,839
seabor certificates

1318
01:06:49,119 --> 01:06:55,200
but yeah maybe stick into so basically

1319
01:06:52,400 --> 01:06:58,960
the current x5t

1320
01:06:55,200 --> 01:07:01,839
identifier as given an example here in

1321
01:06:58,960 --> 01:07:01,839
the middle of the slide

1322
01:07:02,000 --> 01:07:08,400
is at least 14 bytes

1323
01:07:05,039 --> 01:07:11,760
when it's simple encoded

1324
01:07:08,400 --> 01:07:15,039
on the other hand a kid identifier

1325
01:07:11,760 --> 01:07:17,359
can be as small as one byte

1326
01:07:15,039 --> 01:07:19,200
when it's encoded in that hook so

1327
01:07:17,359 --> 01:07:21,920
there's a quite

1328
01:07:19,200 --> 01:07:22,480
large different and this might limit the

1329
01:07:21,920 --> 01:07:25,520
use of

1330
01:07:22,480 --> 01:07:28,880
certificates when compared to rpk and

1331
01:07:25,520 --> 01:07:31,359
very constrained devices

1332
01:07:28,880 --> 01:07:33,039
but if a raw public key in ad hoc can be

1333
01:07:31,359 --> 01:07:35,598
identified by a kid

1334
01:07:33,039 --> 01:07:37,200
as said the certificate should as well

1335
01:07:35,599 --> 01:07:41,520
there is no

1336
01:07:37,200 --> 01:07:42,879
real differences so the suggestion is to

1337
01:07:41,520 --> 01:07:45,920
specify

1338
01:07:42,880 --> 01:07:49,520
uh how that certificates

1339
01:07:45,920 --> 01:07:53,440
can be identified with a kid

1340
01:07:49,520 --> 01:07:53,440
which would lead to certificates

1341
01:07:54,000 --> 01:08:02,000
by reference could be as small as rpk

1342
01:07:58,400 --> 01:08:03,119
making them 15 51 by laura bond and five

1343
01:08:02,000 --> 01:08:06,400
hope

1344
01:08:03,119 --> 01:08:08,720
sixties uh the

1345
01:08:06,400 --> 01:08:09,680
the other thing with cosy certificates

1346
01:08:08,720 --> 01:08:12,879
would

1347
01:08:09,680 --> 01:08:17,920
have to wait until and if

1348
01:08:12,880 --> 01:08:17,920
because the working group has adopted

1349
01:08:18,238 --> 01:08:25,839
work on seaboard certificates

1350
01:08:31,198 --> 01:08:35,358
i hope not everybody is having audio

1351
01:08:34,080 --> 01:08:39,278
problem

1352
01:08:35,359 --> 01:08:43,279
like steven so

1353
01:08:39,279 --> 01:08:45,759
i i i agree that

1354
01:08:43,279 --> 01:08:46,799
you know you can construct a situation

1355
01:08:45,759 --> 01:08:49,520
where

1356
01:08:46,799 --> 01:08:52,000
you could somehow identify your less

1357
01:08:49,520 --> 01:08:54,000
than 256 or maybe it's even less

1358
01:08:52,000 --> 01:08:56,399
than that of seaboard when seabourn

1359
01:08:54,000 --> 01:09:00,399
coded of

1360
01:08:56,399 --> 01:09:04,080
um raw public keys with one byte

1361
01:09:00,399 --> 01:09:06,000
um but of course all the clients need to

1362
01:09:04,080 --> 01:09:07,359
know which byte to send

1363
01:09:06,000 --> 01:09:09,279
because it's arbitrary because you need

1364
01:09:07,359 --> 01:09:12,560
to pack them there

1365
01:09:09,279 --> 01:09:15,679
um at which point

1366
01:09:12,560 --> 01:09:16,239
um i think you've done so much work that

1367
01:09:15,679 --> 01:09:18,719
you would

1368
01:09:16,238 --> 01:09:20,000
have no use for using certificates

1369
01:09:18,719 --> 01:09:21,359
anyway you have such a small

1370
01:09:20,000 --> 01:09:23,600
number of devices and you've touched

1371
01:09:21,359 --> 01:09:26,319
them all

1372
01:09:23,600 --> 01:09:28,000
to tell them what key id to use that

1373
01:09:26,319 --> 01:09:29,839
there's not really a lot of

1374
01:09:28,000 --> 01:09:31,439
point in trying to do this with

1375
01:09:29,839 --> 01:09:33,120
certificate as well

1376
01:09:31,439 --> 01:09:34,799
i think the point of is when you're

1377
01:09:33,120 --> 01:09:36,479
using a certificate is because

1378
01:09:34,799 --> 01:09:38,000
you either have more devices or you just

1379
01:09:36,479 --> 01:09:40,559
don't want to have to touch them to

1380
01:09:38,000 --> 01:09:41,920
initialize that kid so i just don't

1381
01:09:40,560 --> 01:09:46,880
think it's a realistic

1382
01:09:41,920 --> 01:09:50,399
kind of thing to say there

1383
01:09:46,880 --> 01:09:53,440
and i'm sure you know the uh off

1384
01:09:50,399 --> 01:09:54,480
the ace off of common you're on how's it

1385
01:09:53,439 --> 01:09:56,320
pronounced again

1386
01:09:54,480 --> 01:09:58,400
that the document that we've been

1387
01:09:56,320 --> 01:10:03,280
working on uh which does

1388
01:09:58,400 --> 01:10:05,040
reference certificates out of band um

1389
01:10:03,280 --> 01:10:06,400
so i i don't think this is a terribly

1390
01:10:05,040 --> 01:10:09,440
useful optimization

1391
01:10:06,400 --> 01:10:11,839
in practice um that's my

1392
01:10:09,440 --> 01:10:11,839
instinct

1393
01:10:15,520 --> 01:10:21,679
so michael uh that's the ace ache

1394
01:10:18,960 --> 01:10:23,280
authorization you were referring to and

1395
01:10:21,679 --> 01:10:23,920
i think i think that it actually can be

1396
01:10:23,280 --> 01:10:27,599
useful in

1397
01:10:23,920 --> 01:10:29,520
in the sense that you are not

1398
01:10:27,600 --> 01:10:30,800
actually transporting the certificates

1399
01:10:29,520 --> 01:10:32,400
so

1400
01:10:30,800 --> 01:10:34,080
it still still means that you need to

1401
01:10:32,400 --> 01:10:37,839
understand what this

1402
01:10:34,080 --> 01:10:41,360
byte or a few bytes mean

1403
01:10:37,840 --> 01:10:44,719
but not all devices will will need to

1404
01:10:41,360 --> 01:10:46,559
have an encoding for all certificates

1405
01:10:44,719 --> 01:10:49,440
so it could still make sense to have

1406
01:10:46,560 --> 01:10:53,360
just a few bytes identifiers

1407
01:10:49,440 --> 01:10:56,719
instead of well 14 or

1408
01:10:53,360 --> 01:10:58,719
whatever so

1409
01:10:56,719 --> 01:11:00,719
i agree that it's true that not all

1410
01:10:58,719 --> 01:11:03,600
devices will need to understand

1411
01:11:00,719 --> 01:11:05,120
all certificates but i think michael's

1412
01:11:03,600 --> 01:11:07,120
point is that

1413
01:11:05,120 --> 01:11:08,640
in order to use these very short

1414
01:11:07,120 --> 01:11:12,159
identifiers

1415
01:11:08,640 --> 01:11:15,120
you need to tell the device

1416
01:11:12,159 --> 01:11:17,040
which byte refers to which certificate

1417
01:11:15,120 --> 01:11:18,640
and it's going to be different for each

1418
01:11:17,040 --> 01:11:20,719
device

1419
01:11:18,640 --> 01:11:21,920
because as you said not all devices will

1420
01:11:20,719 --> 01:11:23,600
need to know about all of the

1421
01:11:21,920 --> 01:11:26,239
certificates

1422
01:11:23,600 --> 01:11:26,880
and by the point that you are already

1423
01:11:26,239 --> 01:11:29,440
giving

1424
01:11:26,880 --> 01:11:30,960
a customized configuration to each

1425
01:11:29,440 --> 01:11:33,759
device

1426
01:11:30,960 --> 01:11:35,040
it seems like the the benefit from using

1427
01:11:33,760 --> 01:11:37,440
a certificate

1428
01:11:35,040 --> 01:11:38,719
as compared to if i understand correctly

1429
01:11:37,440 --> 01:11:42,480
just a raw public key

1430
01:11:38,719 --> 01:11:44,719
is very minimal because you still

1431
01:11:42,480 --> 01:11:46,959
have to manually give custom

1432
01:11:44,719 --> 01:11:49,840
configuration to each device

1433
01:11:46,960 --> 01:11:51,840
and the general point for using

1434
01:11:49,840 --> 01:11:55,199
certificates is that you don't have to

1435
01:11:51,840 --> 01:11:58,480
give custom configuration you can

1436
01:11:55,199 --> 01:11:59,280
have the pki sort of relay the necessary

1437
01:11:58,480 --> 01:12:02,398
information down

1438
01:11:59,280 --> 01:12:02,398
[Music]

1439
01:12:03,920 --> 01:12:08,480
would there be a benefit if devices does

1440
01:12:07,360 --> 01:12:12,559
not need

1441
01:12:08,480 --> 01:12:14,959
to support raw public key

1442
01:12:12,560 --> 01:12:15,840
uh raw public key and the self science

1443
01:12:14,960 --> 01:12:19,520
setting

1444
01:12:15,840 --> 01:12:20,400
is basically the same so if you want to

1445
01:12:19,520 --> 01:12:22,480
use

1446
01:12:20,400 --> 01:12:24,239
you might maybe some implementation want

1447
01:12:22,480 --> 01:12:27,120
to support

1448
01:12:24,239 --> 01:12:28,239
pki certificates and self-signed

1449
01:12:27,120 --> 01:12:32,239
certificates

1450
01:12:28,239 --> 01:12:37,839
and would not have to support a special

1451
01:12:32,239 --> 01:12:37,839
specific encoding for raw public keys

1452
01:12:37,920 --> 01:12:42,320
so so um on the device and on the sender

1453
01:12:41,520 --> 01:12:45,040
side

1454
01:12:42,320 --> 01:12:46,799
the device has to have access to its uh

1455
01:12:45,040 --> 01:12:48,880
private key to sign things

1456
01:12:46,800 --> 01:12:50,719
and it really has really has doesn't

1457
01:12:48,880 --> 01:12:53,600
have any clue or care

1458
01:12:50,719 --> 01:12:55,040
how the whether it's actually using a

1459
01:12:53,600 --> 01:12:56,400
raw public key or a self-signed

1460
01:12:55,040 --> 01:12:58,320
certificate or certificate

1461
01:12:56,400 --> 01:13:00,799
device just signs with its private key

1462
01:12:58,320 --> 01:13:03,599
right so there's not actually any code

1463
01:13:00,800 --> 01:13:04,719
except for whether i initialize the nx5t

1464
01:13:03,600 --> 01:13:07,760
with some blob

1465
01:13:04,719 --> 01:13:08,320
or a kid with some other blob in either

1466
01:13:07,760 --> 01:13:09,840
case

1467
01:13:08,320 --> 01:13:11,519
that blob is doesn't have to be

1468
01:13:09,840 --> 01:13:12,080
interpreted or created it doesn't have

1469
01:13:11,520 --> 01:13:15,040
to speak

1470
01:13:12,080 --> 01:13:16,719
asn 1 to do that it's the other end it's

1471
01:13:15,040 --> 01:13:18,000
the responder that has to do that and if

1472
01:13:16,719 --> 01:13:19,440
that other guy has got internet

1473
01:13:18,000 --> 01:13:21,520
and it's not constrained that it's less

1474
01:13:19,440 --> 01:13:23,040
of an issue so

1475
01:13:21,520 --> 01:13:25,360
so i don't see a difference between the

1476
01:13:23,040 --> 01:13:26,800
two of them for the the constrained side

1477
01:13:25,360 --> 01:13:30,000
of the set of the in

1478
01:13:26,800 --> 01:13:32,400
that device um it's again

1479
01:13:30,000 --> 01:13:34,080
like how do i put the right thing in it

1480
01:13:32,400 --> 01:13:34,799
if i've provisioned a certificate into

1481
01:13:34,080 --> 01:13:37,840
the device

1482
01:13:34,800 --> 01:13:39,280
somehow at the factory then yeah the

1483
01:13:37,840 --> 01:13:41,840
device could actually you know figure

1484
01:13:39,280 --> 01:13:44,480
out what to put into the x5 t on its own

1485
01:13:41,840 --> 01:13:46,000
perhaps compressing it etc so maybe it

1486
01:13:44,480 --> 01:13:48,080
does need some code but again that can

1487
01:13:46,000 --> 01:13:53,040
be actually calculated ahead of time and

1488
01:13:48,080 --> 01:13:55,040
put in the right place so i i don't

1489
01:13:53,040 --> 01:13:56,239
i don't see the advantage and we've gone

1490
01:13:55,040 --> 01:13:58,960
through raw public key

1491
01:13:56,239 --> 01:13:59,440
believing this is a panacea for iot and

1492
01:13:58,960 --> 01:14:01,440
i don't

1493
01:13:59,440 --> 01:14:02,559
i don't really see it i've never seen

1494
01:14:01,440 --> 01:14:05,519
why it was a

1495
01:14:02,560 --> 01:14:05,520
a big deal

1496
01:14:06,560 --> 01:14:10,480
michael going in the other direction

1497
01:14:09,199 --> 01:14:13,440
when

1498
01:14:10,480 --> 01:14:14,480
the device is going to authenticate to a

1499
01:14:13,440 --> 01:14:18,239
non-constrained

1500
01:14:14,480 --> 01:14:18,559
network node it would be a good thing if

1501
01:14:18,239 --> 01:14:20,718
it

1502
01:14:18,560 --> 01:14:22,080
doesn't have to send i mean it actually

1503
01:14:20,719 --> 01:14:25,360
doesn't have to send anything

1504
01:14:22,080 --> 01:14:29,199
right it could basically just

1505
01:14:25,360 --> 01:14:31,519
point to repo that would be

1506
01:14:29,199 --> 01:14:33,519
and i mean provide an identifier and

1507
01:14:31,520 --> 01:14:36,320
point to a repo

1508
01:14:33,520 --> 01:14:37,360
so in that case from the point of view

1509
01:14:36,320 --> 01:14:39,519
direction to the

1510
01:14:37,360 --> 01:14:40,880
to the yes to the responder yes and we

1511
01:14:39,520 --> 01:14:45,199
described that

1512
01:14:40,880 --> 01:14:47,040
in exactly so sending from that point of

1513
01:14:45,199 --> 01:14:49,360
view sending 14 bytes of hash doesn't

1514
01:14:47,040 --> 01:14:52,000
add anything

1515
01:14:49,360 --> 01:14:53,920
right no no and i think that the

1516
01:14:52,000 --> 01:14:56,480
representation we got was better and

1517
01:14:53,920 --> 01:14:58,080
and had better privacy implications too

1518
01:14:56,480 --> 01:15:00,320
um although the fact that you have to

1519
01:14:58,080 --> 01:15:02,719
point to the repo probably costs you

1520
01:15:00,320 --> 01:15:03,440
around 14 bytes anyway i mean it could

1521
01:15:02,719 --> 01:15:05,199
be

1522
01:15:03,440 --> 01:15:06,960
seven or something if you really push it

1523
01:15:05,199 --> 01:15:07,919
right right but then you don't need the

1524
01:15:06,960 --> 01:15:11,040
additional

1525
01:15:07,920 --> 01:15:14,159
um hash of the of the certificate so

1526
01:15:11,040 --> 01:15:17,360
so having a identifier in that situation

1527
01:15:14,159 --> 01:15:17,360
it would be useful actually

1528
01:15:18,880 --> 01:15:22,840
um sure it depends on how you construct

1529
01:15:20,960 --> 01:15:26,080
the key identifier

1530
01:15:22,840 --> 01:15:27,600
right because it's got to be

1531
01:15:26,080 --> 01:15:29,440
you have the pointer to the repo and you

1532
01:15:27,600 --> 01:15:32,239
have the key identifier then

1533
01:15:29,440 --> 01:15:34,480
you either have to someone has to decide

1534
01:15:32,239 --> 01:15:38,000
what that what that value is

1535
01:15:34,480 --> 01:15:39,440
and um that's okay but but my

1536
01:15:38,000 --> 01:15:40,800
point is that it's not going to be one

1537
01:15:39,440 --> 01:15:41,759
bite i think that was the point i was

1538
01:15:40,800 --> 01:15:44,560
trying to get at

1539
01:15:41,760 --> 01:15:46,400
is that that i don't think i don't think

1540
01:15:44,560 --> 01:15:48,080
it's meaningful to to be able to say i

1541
01:15:46,400 --> 01:15:50,639
can reduce it to one bite

1542
01:15:48,080 --> 01:15:52,159
in this raw public key environment and

1543
01:15:50,640 --> 01:15:53,760
wouldn't it be good to get certificates

1544
01:15:52,159 --> 01:15:55,759
that small because i don't actually

1545
01:15:53,760 --> 01:15:58,239
believe that one byte is a realistic uh

1546
01:15:55,760 --> 01:16:01,760
usable deployable situation

1547
01:15:58,239 --> 01:16:05,360
i think one byte is a lower

1548
01:16:01,760 --> 01:16:08,880
limit but hopefully the key id could be

1549
01:16:05,360 --> 01:16:08,880
smaller than 14 bytes

1550
01:16:11,600 --> 01:16:15,840
again yes i agree provided that you walk

1551
01:16:14,640 --> 01:16:18,320
up to every device

1552
01:16:15,840 --> 01:16:18,960
before you turn it on plug in a cable or

1553
01:16:18,320 --> 01:16:21,519
something

1554
01:16:18,960 --> 01:16:22,719
and tell it which three byte key id

1555
01:16:21,520 --> 01:16:25,120
identifier to use

1556
01:16:22,719 --> 01:16:26,159
right i some way you've got to tell it

1557
01:16:25,120 --> 01:16:28,800
that thing right

1558
01:16:26,159 --> 01:16:31,120
at which point you could just as well

1559
01:16:28,800 --> 01:16:33,679
pull the certificate out

1560
01:16:31,120 --> 01:16:34,960
uh and have it use a raw public key and

1561
01:16:33,679 --> 01:16:36,400
put that in your database because you've

1562
01:16:34,960 --> 01:16:36,960
got to have a database to identify to

1563
01:16:36,400 --> 01:16:40,000
map

1564
01:16:36,960 --> 01:16:41,199
the two things together right so all i'm

1565
01:16:40,000 --> 01:16:42,960
saying is that all the cases where a

1566
01:16:41,199 --> 01:16:44,960
certificate could be used with a

1567
01:16:42,960 --> 01:16:46,640
very small identifier that's not derived

1568
01:16:44,960 --> 01:16:48,320
from the certificate

1569
01:16:46,640 --> 01:16:50,480
then you could probably do raw public

1570
01:16:48,320 --> 01:16:54,080
key anyway

1571
01:16:50,480 --> 01:16:56,000
yeah this is basically a alternative

1572
01:16:54,080 --> 01:16:58,159
representation of a raw public key

1573
01:16:56,000 --> 01:17:01,280
instead of a koseki

1574
01:16:58,159 --> 01:17:02,080
yeah but again michael from the point of

1575
01:17:01,280 --> 01:17:04,320
view

1576
01:17:02,080 --> 01:17:05,440
from the point of view of the the device

1577
01:17:04,320 --> 01:17:07,440
proving to the network

1578
01:17:05,440 --> 01:17:09,599
then it is a then the network would

1579
01:17:07,440 --> 01:17:11,759
rather have a certificate

1580
01:17:09,600 --> 01:17:13,760
than a public key so in that case it's

1581
01:17:11,760 --> 01:17:17,120
an advantage for this point of view

1582
01:17:13,760 --> 01:17:20,960
more scalable to do that and

1583
01:17:17,120 --> 01:17:22,080
um so if you can i i it's probably more

1584
01:17:20,960 --> 01:17:25,120
scalable

1585
01:17:22,080 --> 01:17:27,040
but but most of the advantages of the

1586
01:17:25,120 --> 01:17:28,800
the certificate which is like that you

1587
01:17:27,040 --> 01:17:29,600
could change the public key or something

1588
01:17:28,800 --> 01:17:32,080
like that

1589
01:17:29,600 --> 01:17:32,880
or you can resign it or you can you can

1590
01:17:32,080 --> 01:17:35,679
put a

1591
01:17:32,880 --> 01:17:36,640
crl out saying that the thing is died

1592
01:17:35,679 --> 01:17:39,840
right

1593
01:17:36,640 --> 01:17:41,760
um all of that

1594
01:17:39,840 --> 01:17:43,360
you know yeah that might be useful but

1595
01:17:41,760 --> 01:17:44,960
again as i'm trying to say

1596
01:17:43,360 --> 01:17:46,880
still got to go touch the device and

1597
01:17:44,960 --> 01:17:50,880
give it it's it's kid

1598
01:17:46,880 --> 01:17:52,960
to use there sure

1599
01:17:50,880 --> 01:17:55,040
i i think this has works as an at least

1600
01:17:52,960 --> 01:17:57,679
as an option it does it's sort of

1601
01:17:55,040 --> 01:17:58,480
i don't see what it complicates to allow

1602
01:17:57,679 --> 01:18:01,360
this

1603
01:17:58,480 --> 01:18:02,718
and if there are not so many use cases

1604
01:18:01,360 --> 01:18:04,799
or if they are

1605
01:18:02,719 --> 01:18:05,760
these sort of the one touch type of

1606
01:18:04,800 --> 01:18:13,840
scenarios

1607
01:18:05,760 --> 01:18:13,840
well why not still have the option

1608
01:18:18,000 --> 01:18:23,920
yeah maybe continue this discussion on

1609
01:18:24,840 --> 01:18:27,840
github

1610
01:18:33,679 --> 01:18:40,000
so comment from

1611
01:18:36,960 --> 01:18:43,360
stephen that you're on slide eight

1612
01:18:40,000 --> 01:18:43,360
of 22.

1613
01:18:44,320 --> 01:18:51,440
so and that we should

1614
01:18:47,760 --> 01:18:55,040
prioritize what to discuss next

1615
01:18:51,440 --> 01:18:58,000
is there any other somebody that

1616
01:18:55,040 --> 01:18:58,560
might suggest them would be that we just

1617
01:18:58,000 --> 01:19:01,360
take

1618
01:18:58,560 --> 01:19:01,760
the slides in order and then we and

1619
01:19:01,360 --> 01:19:04,719
allow

1620
01:19:01,760 --> 01:19:05,520
discussion on each as much as we need

1621
01:19:04,719 --> 01:19:09,520
and then we move

1622
01:19:05,520 --> 01:19:12,400
everything else to the to in dream

1623
01:19:09,520 --> 01:19:13,280
uh is there anybody that wants to

1624
01:19:12,400 --> 01:19:15,519
discuss any

1625
01:19:13,280 --> 01:19:17,199
particular of the remaining issues then

1626
01:19:15,520 --> 01:19:23,840
we could

1627
01:19:17,199 --> 01:19:23,839
prioritize that issue

1628
01:19:36,000 --> 01:19:41,679
so we have discussed the first four

1629
01:19:39,040 --> 01:19:41,679
bullets

1630
01:19:43,360 --> 01:19:53,040
there are nine bullets remaining

1631
01:19:50,640 --> 01:19:54,080
i think verification of intended peer is

1632
01:19:53,040 --> 01:19:57,360
good and

1633
01:19:54,080 --> 01:19:59,440
we should probably get into the cipher

1634
01:19:57,360 --> 01:20:04,639
suite

1635
01:19:59,440 --> 01:20:06,400
sha 512 um

1636
01:20:04,640 --> 01:20:07,679
and the forward backwards secrecy so the

1637
01:20:06,400 --> 01:20:09,679
last three ones is

1638
01:20:07,679 --> 01:20:13,040
i think we should discuss and and

1639
01:20:09,679 --> 01:20:15,600
verification of intent appear that's

1640
01:20:13,040 --> 01:20:16,840
uh and perhaps uh the key confirmation

1641
01:20:15,600 --> 01:20:20,400
delivery of receipt

1642
01:20:16,840 --> 01:20:22,480
uh i don't think we have time at all to

1643
01:20:20,400 --> 01:20:24,719
discuss these

1644
01:20:22,480 --> 01:20:25,839
in the same amount that we have

1645
01:20:24,719 --> 01:20:28,239
discussed the first

1646
01:20:25,840 --> 01:20:29,360
bullets would you then suggest that we

1647
01:20:28,239 --> 01:20:31,599
take

1648
01:20:29,360 --> 01:20:33,519
each of them very high level five

1649
01:20:31,600 --> 01:20:35,600
minutes which is

1650
01:20:33,520 --> 01:20:36,880
not at all enough to discuss for example

1651
01:20:35,600 --> 01:20:40,560
forward secrecy i think

1652
01:20:36,880 --> 01:20:40,560
or the algorithms

1653
01:20:43,600 --> 01:20:47,920
okay perhaps perhaps your proposal was

1654
01:20:45,920 --> 01:20:49,679
best let's let's let's go through the

1655
01:20:47,920 --> 01:20:52,639
issues in order and schedule another

1656
01:20:49,679 --> 01:20:52,639
meeting if necessary

1657
01:20:52,800 --> 01:21:01,840
that would definitely be necessary

1658
01:21:04,000 --> 01:21:08,960
any more comments otherwise we move on

1659
01:21:07,760 --> 01:21:11,840
to verification of

1660
01:21:08,960 --> 01:21:12,560
intended peer then resumption then maybe

1661
01:21:11,840 --> 01:21:14,960
error

1662
01:21:12,560 --> 01:21:17,600
that is probably the only thing we will

1663
01:21:14,960 --> 01:21:17,600
have time to

1664
01:21:18,080 --> 01:21:23,679
good verification of intended peer

1665
01:21:24,960 --> 01:21:31,760
so this is something that was

1666
01:21:28,320 --> 01:21:33,360
we made some updates to the document in

1667
01:21:31,760 --> 01:21:36,560
the last revision based on

1668
01:21:33,360 --> 01:21:40,639
comments from the people doing formal

1669
01:21:36,560 --> 01:21:42,800
verification uh to

1670
01:21:40,639 --> 01:21:43,840
better illustrate what's what an

1671
01:21:42,800 --> 01:21:47,760
identity was

1672
01:21:43,840 --> 01:21:51,040
or a small set of identities

1673
01:21:47,760 --> 01:21:51,040
are and

1674
01:21:54,840 --> 01:21:59,520
and

1675
01:21:56,239 --> 01:22:02,718
is also let's see but

1676
01:21:59,520 --> 01:22:05,760
there was one comment was that maybe we

1677
01:22:02,719 --> 01:22:09,280
should skip the identity concept

1678
01:22:05,760 --> 01:22:13,199
uh totally um i

1679
01:22:09,280 --> 01:22:16,639
identity is in the sigma protocol which

1680
01:22:13,199 --> 01:22:20,638
this is very tied to

1681
01:22:16,639 --> 01:22:24,480
pki and a person

1682
01:22:20,639 --> 01:22:27,760
which might or might not be applicable

1683
01:22:24,480 --> 01:22:29,839
applicable directly to iot setting where

1684
01:22:27,760 --> 01:22:34,480
you have

1685
01:22:29,840 --> 01:22:34,480
devices and not persons and

1686
01:22:34,560 --> 01:22:41,199
also it's not clear that these

1687
01:22:38,159 --> 01:22:44,559
devices or services inside devices

1688
01:22:41,199 --> 01:22:47,839
have identities in the same way as

1689
01:22:44,560 --> 01:22:47,840
humans have names

1690
01:22:49,040 --> 01:22:53,360
sometimes you might see the public key

1691
01:22:52,639 --> 01:22:56,560
itself

1692
01:22:53,360 --> 01:22:56,559
as an identity

1693
01:22:57,199 --> 01:23:04,559
ad hoc have

1694
01:23:00,880 --> 01:23:07,040
when raw public keys are used in ad hoc

1695
01:23:04,560 --> 01:23:07,840
eric allows the parties to agree on an

1696
01:23:07,040 --> 01:23:11,199
optional

1697
01:23:07,840 --> 01:23:13,280
subject name similar to the subject

1698
01:23:11,199 --> 01:23:16,159
field in a certificate

1699
01:23:13,280 --> 01:23:16,639
and this subject name is included in the

1700
01:23:16,159 --> 01:23:20,080
mac

1701
01:23:16,639 --> 01:23:23,360
signature it's not sent on the buyer

1702
01:23:20,080 --> 01:23:26,320
and this protects against attacks

1703
01:23:23,360 --> 01:23:27,360
as mentioned in the sigma paper where an

1704
01:23:26,320 --> 01:23:30,480
attacker

1705
01:23:27,360 --> 01:23:32,839
successfully registered a pub

1706
01:23:30,480 --> 01:23:34,080
succeeds in register a public key with a

1707
01:23:32,840 --> 01:23:36,880
different

1708
01:23:34,080 --> 01:23:36,880
subject name

1709
01:23:39,040 --> 01:23:45,280
and then fools you when you talk to the

1710
01:23:43,120 --> 01:23:46,719
real owner of the public key then you

1711
01:23:45,280 --> 01:23:50,320
would have a wrong

1712
01:23:46,719 --> 01:23:53,360
subject name if you add the subject name

1713
01:23:50,320 --> 01:23:56,159
that you think that you know

1714
01:23:53,360 --> 01:23:59,759
in the mac then the connection would

1715
01:23:56,159 --> 01:23:59,759
fail in such a situation

1716
01:24:00,159 --> 01:24:06,879
so the questions here is first is

1717
01:24:04,080 --> 01:24:07,199
uh i think the feedback has been that

1718
01:24:06,880 --> 01:24:09,120
this

1719
01:24:07,199 --> 01:24:11,519
is from the formal verification is that

1720
01:24:09,120 --> 01:24:14,159
this is a very good idea

1721
01:24:11,520 --> 01:24:16,159
the question is will there always be a

1722
01:24:14,159 --> 01:24:19,839
subject name

1723
01:24:16,159 --> 01:24:23,599
available for example the ui 64

1724
01:24:19,840 --> 01:24:23,600
should we recommend

1725
01:24:23,760 --> 01:24:26,960
to use the subject name with the raw

1726
01:24:25,760 --> 01:24:30,719
public key to

1727
01:24:26,960 --> 01:24:33,199
even mandate using a subject name

1728
01:24:30,719 --> 01:24:35,520
but that depends if the subject name is

1729
01:24:33,199 --> 01:24:38,799
always available advice i think

1730
01:24:35,520 --> 01:24:38,800
should not mandate that

1731
01:24:39,520 --> 01:24:42,639
the document would authors would also

1732
01:24:42,239 --> 01:24:46,400
want

1733
01:24:42,639 --> 01:24:48,560
more feedback on from

1734
01:24:46,400 --> 01:24:50,000
people operationally doing

1735
01:24:48,560 --> 01:24:54,960
constrainability

1736
01:24:50,000 --> 01:24:57,520
how they see identities it's the

1737
01:24:54,960 --> 01:24:58,000
is do they see the rope the public key

1738
01:24:57,520 --> 01:25:00,560
itself

1739
01:24:58,000 --> 01:25:01,520
as the identity is there identities

1740
01:25:00,560 --> 01:25:06,080
available

1741
01:25:01,520 --> 01:25:08,960
like eui-64 and so on and also

1742
01:25:06,080 --> 01:25:11,040
other questions should we should we use

1743
01:25:08,960 --> 01:25:14,239
the word identity or should we

1744
01:25:11,040 --> 01:25:17,199
only talk about raw public keys and

1745
01:25:14,239 --> 01:25:17,199
subject names

1746
01:25:22,560 --> 01:25:26,320
can you talk with eui 64 are you talking

1747
01:25:24,960 --> 01:25:29,360
about binding it to the

1748
01:25:26,320 --> 01:25:32,719
actual layer 2 or layer 3 address or

1749
01:25:29,360 --> 01:25:32,719
it's just something that they have

1750
01:25:34,400 --> 01:25:37,519
that's a good question which i realized

1751
01:25:36,960 --> 01:25:40,000
pretty

1752
01:25:37,520 --> 01:25:41,360
recently and we'll bring up for

1753
01:25:40,000 --> 01:25:44,639
discussion in

1754
01:25:41,360 --> 01:25:48,719
cosi after this i

1755
01:25:44,639 --> 01:25:51,679
my understanding now is that it's it's

1756
01:25:48,719 --> 01:25:52,800
the the binding to a mac address is

1757
01:25:51,679 --> 01:25:56,880
deprecated

1758
01:25:52,800 --> 01:25:59,600
by ieee and so that's not something you

1759
01:25:56,880 --> 01:26:03,679
should do in the future

1760
01:25:59,600 --> 01:26:06,840
and that the eui-64 and then is then

1761
01:26:03,679 --> 01:26:08,639
identity disconnected from the network

1762
01:26:06,840 --> 01:26:13,840
layers

1763
01:26:08,639 --> 01:26:13,840
but you probably know this better than i

1764
01:26:20,840 --> 01:26:23,840
do

1765
01:26:45,360 --> 01:26:51,679
so comment from michael that is

1766
01:26:48,639 --> 01:26:52,480
seems like a needless complexity seems

1767
01:26:51,679 --> 01:26:57,360
to

1768
01:26:52,480 --> 01:26:57,360
and not want to definitely not want the

1769
01:27:02,840 --> 01:27:05,840
manatees

1770
01:27:21,040 --> 01:27:27,280
so discussions in the

1771
01:27:24,480 --> 01:27:27,280
chat section

1772
01:27:27,840 --> 01:27:33,440
maybe somebody maybe somebody want to

1773
01:27:31,840 --> 01:27:36,560
say something

1774
01:27:33,440 --> 01:27:38,400
instead i think there's several people

1775
01:27:36,560 --> 01:27:41,280
in this group that has

1776
01:27:38,400 --> 01:27:41,759
a lot of knowledge about the euis force

1777
01:27:41,280 --> 01:27:43,679
but

1778
01:27:41,760 --> 01:27:46,560
the question here is that they need to

1779
01:27:43,679 --> 01:27:48,480
think about this topic a bit more

1780
01:27:46,560 --> 01:27:49,760
so this direction can you hear me yeah

1781
01:27:48,480 --> 01:27:53,040
all right so

1782
01:27:49,760 --> 01:27:54,239
i think the 15-4 doesn't have any plans

1783
01:27:53,040 --> 01:27:57,519
of doing any kind of

1784
01:27:54,239 --> 01:27:58,159
you know privacy addresses yet so so the

1785
01:27:57,520 --> 01:28:02,080
l2

1786
01:27:58,159 --> 01:28:03,440
addresses are going to be same

1787
01:28:02,080 --> 01:28:04,719
in most of the environments what they

1788
01:28:03,440 --> 01:28:06,239
are doing for there is actually it

1789
01:28:04,719 --> 01:28:08,800
doesn't matter for some

1790
01:28:06,239 --> 01:28:12,159
uh cases they actually they already do

1791
01:28:08,800 --> 01:28:12,159
have the 16-bit you know

1792
01:28:12,320 --> 01:28:16,159
this local address or short addresses

1793
01:28:14,960 --> 01:28:18,960
which they can use for

1794
01:28:16,159 --> 01:28:19,679
for example if you have a already formed

1795
01:28:18,960 --> 01:28:22,560
network

1796
01:28:19,679 --> 01:28:24,000
for example a personal area network that

1797
01:28:22,560 --> 01:28:27,120
could use the you know

1798
01:28:24,000 --> 01:28:29,040
short addresses but it doesn't help that

1799
01:28:27,120 --> 01:28:30,800
if somebody is there when you actually

1800
01:28:29,040 --> 01:28:33,199
register or join the network

1801
01:28:30,800 --> 01:28:35,679
then they can see the l2 address is the

1802
01:28:33,199 --> 01:28:38,719
full 64-bit addresses

1803
01:28:35,679 --> 01:28:39,199
and i have no idea i have no knowledge

1804
01:28:38,719 --> 01:28:41,360
that

1805
01:28:39,199 --> 01:28:42,638
anybody would be actually thinking about

1806
01:28:41,360 --> 01:28:57,839
doing any work on that

1807
01:28:42,639 --> 01:28:57,840
chasing those

1808
01:29:36,880 --> 01:29:52,800
comment from dawn indicating

1809
01:29:41,199 --> 01:29:56,879
support of using public key as identity

1810
01:29:52,800 --> 01:30:01,040
from there was previously a lot of

1811
01:29:56,880 --> 01:30:04,239
comments about identities in

1812
01:30:01,040 --> 01:30:08,320
ad hoc from several

1813
01:30:04,239 --> 01:30:10,559
tls people the authors

1814
01:30:08,320 --> 01:30:12,320
would like to have subject name in law

1815
01:30:10,560 --> 01:30:15,760
public is at least

1816
01:30:12,320 --> 01:30:18,719
optional otherwise

1817
01:30:15,760 --> 01:30:20,800
you don't protect against these attacks

1818
01:30:18,719 --> 01:30:24,320
that sigma

1819
01:30:20,800 --> 01:30:27,920
try to protect against

1820
01:30:24,320 --> 01:30:35,840
then if whether they are realistic in

1821
01:30:27,920 --> 01:30:35,840
iot scenario or not can be discussed

1822
01:30:36,080 --> 01:30:40,400
and using the identity as seeing the

1823
01:30:39,199 --> 01:30:43,839
public key as

1824
01:30:40,400 --> 01:30:49,839
identity is definitely possible

1825
01:30:43,840 --> 01:30:49,840
in the current specification

1826
01:31:01,440 --> 01:31:03,839
any other

1827
01:31:11,040 --> 01:31:15,040
so i guess we should leave this open for

1828
01:31:12,800 --> 01:31:18,800
discussion on the github and

1829
01:31:15,040 --> 01:31:18,800
more i think so

1830
01:31:24,080 --> 01:31:30,559
so next is resumption

1831
01:31:27,199 --> 01:31:33,839
and that's also a

1832
01:31:30,560 --> 01:31:37,280
synergy check so previously

1833
01:31:33,840 --> 01:31:41,280
the protocol had resumption

1834
01:31:37,280 --> 01:31:44,960
then it was decided to remove the psk

1835
01:31:41,280 --> 01:31:46,159
method which also removed the resumption

1836
01:31:44,960 --> 01:31:48,960
but i

1837
01:31:46,159 --> 01:31:50,879
my understanding is that there was no

1838
01:31:48,960 --> 01:31:53,120
real discussion

1839
01:31:50,880 --> 01:31:56,880
whether to remove resumption or not they

1840
01:31:53,120 --> 01:32:00,559
just followed from removing the psk

1841
01:31:56,880 --> 01:32:02,639
so this issue brings this up just to

1842
01:32:00,560 --> 01:32:05,280
take a decision that we don't need

1843
01:32:02,639 --> 01:32:10,320
resumption or that we need resumption

1844
01:32:05,280 --> 01:32:13,599
uh so is there any need for resumption

1845
01:32:10,320 --> 01:32:14,080
uh resumption allows you to minimize

1846
01:32:13,600 --> 01:32:16,000
state

1847
01:32:14,080 --> 01:32:17,840
if you don't know if you will ever see

1848
01:32:16,000 --> 01:32:21,360
the other party again

1849
01:32:17,840 --> 01:32:24,159
you also get forward secrecy and

1850
01:32:21,360 --> 01:32:24,880
and freshness but these you can probably

1851
01:32:24,159 --> 01:32:28,400
get

1852
01:32:24,880 --> 01:32:31,120
in a cheaper way and

1853
01:32:28,400 --> 01:32:32,559
iot connections are long-lived so

1854
01:32:31,120 --> 01:32:34,719
typically

1855
01:32:32,560 --> 01:32:35,840
having a resumption mechanism probably

1856
01:32:34,719 --> 01:32:39,199
and

1857
01:32:35,840 --> 01:32:42,480
doing a new handshake probably cost more

1858
01:32:39,199 --> 01:32:46,480
than not doing this

1859
01:32:42,480 --> 01:32:49,919
so my suggestion

1860
01:32:46,480 --> 01:32:53,519
and i think the comment on

1861
01:32:49,920 --> 01:32:55,199
github is that resump we don't need a

1862
01:32:53,520 --> 01:32:57,679
resumption

1863
01:32:55,199 --> 01:32:57,678
method

1864
01:32:59,600 --> 01:33:02,400
any other

1865
01:33:03,520 --> 01:33:09,840
opinions regarding resumption

1866
01:33:06,880 --> 01:33:09,840
or can we

1867
01:33:09,920 --> 01:33:18,239
confirm that the adult does not need

1868
01:33:13,040 --> 01:33:18,239
a specific resumption method

1869
01:33:18,880 --> 01:33:22,639
this summary assumption could

1870
01:33:20,880 --> 01:33:25,840
potentially follow from

1871
01:33:22,639 --> 01:33:29,120
if we want to do some forward things for

1872
01:33:25,840 --> 01:33:31,600
forward or backward secrets or something

1873
01:33:29,120 --> 01:33:34,159
but we don't define any resumption just

1874
01:33:31,600 --> 01:33:34,159
because of

1875
01:33:34,840 --> 01:33:37,840
resumption

1876
01:33:59,600 --> 01:34:02,639
should i take the silence as a

1877
01:34:01,360 --> 01:34:04,239
confirmation that we

1878
01:34:02,639 --> 01:34:06,159
don't need to assumption can you hear me

1879
01:34:04,239 --> 01:34:09,599
john yes

1880
01:34:06,159 --> 01:34:12,960
uh hi this is mohit so i guess

1881
01:34:09,600 --> 01:34:15,280
if you're getting rid of the psk then

1882
01:34:12,960 --> 01:34:17,520
maybe getting rid of assumption is a

1883
01:34:15,280 --> 01:34:20,239
natural consequence

1884
01:34:17,520 --> 01:34:22,000
because at least in dls the resumption

1885
01:34:20,239 --> 01:34:25,759
is based on psk and since

1886
01:34:22,000 --> 01:34:29,120
uh doc has chosen not to support psk's

1887
01:34:25,760 --> 01:34:29,120
then i don't see like

1888
01:34:29,679 --> 01:34:34,480
i i i don't have strong opinion it's a

1889
01:34:32,719 --> 01:34:35,520
little bit sad if you're going to lose

1890
01:34:34,480 --> 01:34:38,080
resumption but

1891
01:34:35,520 --> 01:34:40,000
uh i think this is natural consequence

1892
01:34:38,080 --> 01:34:43,040
of then not supporting psk

1893
01:34:40,000 --> 01:34:45,440
mode so

1894
01:34:43,040 --> 01:34:46,400
yes and no i think the decision was to

1895
01:34:45,440 --> 01:34:50,320
not

1896
01:34:46,400 --> 01:34:54,719
support psk as the initial

1897
01:34:50,320 --> 01:34:57,599
authentication method but

1898
01:34:54,719 --> 01:34:59,360
as the resumption was using that like in

1899
01:34:57,600 --> 01:35:03,679
tls103 it disappeared

1900
01:34:59,360 --> 01:35:06,960
also but you you say it's

1901
01:35:03,679 --> 01:35:10,639
sad but is there any

1902
01:35:06,960 --> 01:35:10,639
any re use case

1903
01:35:12,560 --> 01:35:19,119
like i don't know where and like uh

1904
01:35:17,040 --> 01:35:21,280
where all edoc will be used hopefully in

1905
01:35:19,119 --> 01:35:22,880
many places and if later we find out

1906
01:35:21,280 --> 01:35:24,960
that there is some people who

1907
01:35:22,880 --> 01:35:27,360
do more frequent handshakes and don't

1908
01:35:24,960 --> 01:35:32,480
want to

1909
01:35:27,360 --> 01:35:35,119
do the full uh full handshake every time

1910
01:35:32,480 --> 01:35:36,320
but maybe in in this case the full

1911
01:35:35,119 --> 01:35:40,480
handshake is not

1912
01:35:36,320 --> 01:35:42,719
such a big uh performance

1913
01:35:40,480 --> 01:35:44,320
degradation that performing a full

1914
01:35:42,719 --> 01:35:47,520
handshake every time is

1915
01:35:44,320 --> 01:35:50,799
not such a big issue so yeah i

1916
01:35:47,520 --> 01:35:54,560
uh yeah i i think it's it's fine uh

1917
01:35:50,800 --> 01:35:56,639
to get rid of it in most situations and

1918
01:35:54,560 --> 01:35:58,080
if someone comes up later then we will

1919
01:35:56,639 --> 01:36:00,400
see it but

1920
01:35:58,080 --> 01:36:01,760
i can't think of some specific use case

1921
01:36:00,400 --> 01:36:11,839
where we would need

1922
01:36:01,760 --> 01:36:11,840
frequent assumptions

1923
01:36:13,920 --> 01:36:18,480
good then i guess the assumption is that

1924
01:36:17,600 --> 01:36:21,199
we

1925
01:36:18,480 --> 01:36:21,199
we don't need

1926
01:36:23,600 --> 01:36:27,520
i resumption we should um we should

1927
01:36:25,840 --> 01:36:30,000
consider what is coming out of the

1928
01:36:27,520 --> 01:36:32,480
australian session of discussions about

1929
01:36:30,000 --> 01:36:33,920
how we how we re-key and whether we can

1930
01:36:32,480 --> 01:36:36,320
re-key inside our score

1931
01:36:33,920 --> 01:36:37,360
if that is turning out that if it's if

1932
01:36:36,320 --> 01:36:41,360
the decision there

1933
01:36:37,360 --> 01:36:45,040
is that we can re-key easily on the

1934
01:36:41,360 --> 01:36:47,360
quote a record layer um then

1935
01:36:45,040 --> 01:36:49,119
um we don't they then we don't get a

1936
01:36:47,360 --> 01:36:52,159
requirement for assumption there

1937
01:36:49,119 --> 01:36:52,719
but if oscar says that yep please hire

1938
01:36:52,159 --> 01:36:55,679
layer pl

1939
01:36:52,719 --> 01:36:57,119
do something for us then resumption

1940
01:36:55,679 --> 01:36:58,880
should still be an option so

1941
01:36:57,119 --> 01:37:00,559
i don't think we'll have to discuss much

1942
01:36:58,880 --> 01:37:03,440
about this now but we should keep

1943
01:37:00,560 --> 01:37:06,000
the option open until we have a

1944
01:37:03,440 --> 01:37:09,280
re-keying mechanism for oscore

1945
01:37:06,000 --> 01:37:09,280
yeah i agree

1946
01:37:11,280 --> 01:37:14,480
so should we move on to the next slide

1947
01:37:14,000 --> 01:37:17,440
or

1948
01:37:14,480 --> 01:37:18,320
is maybe the time is running out so we

1949
01:37:17,440 --> 01:37:21,678
should instead

1950
01:37:18,320 --> 01:37:22,559
move to francesca and joran or what does

1951
01:37:21,679 --> 01:37:25,840
the cheerson

1952
01:37:22,560 --> 01:37:29,360
says say let's go for

1953
01:37:25,840 --> 01:37:32,400
until uh 45 past uh okay then we can

1954
01:37:29,360 --> 01:37:34,159
the slides of francesca and euron and

1955
01:37:32,400 --> 01:37:36,799
move on all the other on the all the

1956
01:37:34,159 --> 01:37:41,280
pending issues to the inter meeting

1957
01:37:36,800 --> 01:37:43,600
yep okay then next slide

1958
01:37:41,280 --> 01:37:45,040
i think you could go even to ten two uh

1959
01:37:43,600 --> 01:37:47,199
francesca asked for one minute

1960
01:37:45,040 --> 01:37:49,840
and and i i can i can easily do with

1961
01:37:47,199 --> 01:37:49,839
five minutes

1962
01:37:51,440 --> 01:37:59,199
good so next issue

1963
01:37:54,719 --> 01:38:05,119
is distinguish error message

1964
01:37:59,199 --> 01:38:05,119
and this was raised by a implementer i

1965
01:38:05,199 --> 01:38:08,719
maybe your unreme i don't remember

1966
01:38:07,199 --> 01:38:11,519
exactly who

1967
01:38:08,719 --> 01:38:13,440
but the question was how do you

1968
01:38:11,520 --> 01:38:14,159
distinguish that you get the error

1969
01:38:13,440 --> 01:38:18,080
message

1970
01:38:14,159 --> 01:38:21,280
and not a message

1971
01:38:18,080 --> 01:38:25,360
two or three or maybe even a new message

1972
01:38:21,280 --> 01:38:28,639
one and this is not really

1973
01:38:25,360 --> 01:38:32,559
discussed in the draft

1974
01:38:28,639 --> 01:38:35,760
looking at here on the

1975
01:38:32,560 --> 01:38:39,360
cdl for the two first

1976
01:38:35,760 --> 01:38:40,080
elements you can notice that the error

1977
01:38:39,360 --> 01:38:43,440
message

1978
01:38:40,080 --> 01:38:47,280
has a text string as the first

1979
01:38:43,440 --> 01:38:50,320
or second zebra item

1980
01:38:47,280 --> 01:38:52,880
in the sequence so

1981
01:38:50,320 --> 01:38:54,480
that can definitely be used to

1982
01:38:52,880 --> 01:38:57,679
distinguish it

1983
01:38:54,480 --> 01:39:01,040
from the other messages

1984
01:38:57,679 --> 01:39:04,400
question is is this good enough

1985
01:39:01,040 --> 01:39:07,440
for distinguishing or should we add

1986
01:39:04,400 --> 01:39:09,920
something else the well

1987
01:39:07,440 --> 01:39:11,040
message 2 is for example full we should

1988
01:39:09,920 --> 01:39:14,080
not add a single

1989
01:39:11,040 --> 01:39:15,119
byte to that but error message adding

1990
01:39:14,080 --> 01:39:19,760
some bytes would

1991
01:39:15,119 --> 01:39:21,679
not matter uh

1992
01:39:19,760 --> 01:39:23,679
irrespective of that i think the draft

1993
01:39:21,679 --> 01:39:27,119
should definitely add some

1994
01:39:23,679 --> 01:39:30,639
text on how to distinguish the error

1995
01:39:27,119 --> 01:39:30,639
message from the other messages

1996
01:39:31,360 --> 01:39:37,199
and i think it's only guidance on error

1997
01:39:35,199 --> 01:39:38,638
message that is missing all the other

1998
01:39:37,199 --> 01:39:42,440
messages

1999
01:39:38,639 --> 01:39:46,320
you distinguish by the connection

2000
01:39:42,440 --> 01:39:50,879
identifiers or by underlying

2001
01:39:46,320 --> 01:39:50,880
properties of the underlying network

2002
01:39:52,840 --> 01:39:58,239
layers

2003
01:39:55,119 --> 01:39:58,639
and i see there's a lot of discussion

2004
01:39:58,239 --> 01:40:03,040
about

2005
01:39:58,639 --> 01:40:03,040
identities in rpk that's great

2006
01:40:03,600 --> 01:40:10,560
let's summarize this

2007
01:40:06,880 --> 01:40:10,880
in the github it would be very thankful

2008
01:40:10,560 --> 01:40:13,119
it

2009
01:40:10,880 --> 01:40:14,639
would be great if the people writing

2010
01:40:13,119 --> 01:40:15,679
this could also write something in the

2011
01:40:14,639 --> 01:40:18,960
github

2012
01:40:15,679 --> 01:40:21,199
i guess otherwise maybe someone else can

2013
01:40:18,960 --> 01:40:23,440
summarize it

2014
01:40:21,199 --> 01:40:25,919
any comments about distinguishing error

2015
01:40:23,440 --> 01:40:25,919
message

2016
01:40:29,280 --> 01:40:35,040
um yeah

2017
01:40:33,040 --> 01:40:36,880
my take on this would be that since we

2018
01:40:35,040 --> 01:40:38,239
don't have any constraints and size in

2019
01:40:36,880 --> 01:40:41,760
the error message we

2020
01:40:38,239 --> 01:40:51,839
might want to add an explicit identifier

2021
01:40:41,760 --> 01:40:51,840
of the error message

2022
01:41:02,840 --> 01:41:05,840
so

2023
01:41:10,000 --> 01:41:16,170
that sounds good maybe we can

2024
01:41:13,840 --> 01:41:17,600
bounce it back to

2025
01:41:16,170 --> 01:41:20,239
[Music]

2026
01:41:17,600 --> 01:41:21,760
the peop the person implementing this

2027
01:41:20,239 --> 01:41:24,839
what they

2028
01:41:21,760 --> 01:41:26,560
how they how would they like this to

2029
01:41:24,840 --> 01:41:30,719
[Music]

2030
01:41:26,560 --> 01:41:33,440
look like if they have any preferences

2031
01:41:30,719 --> 01:41:34,239
and whatever we decide i think we should

2032
01:41:33,440 --> 01:41:38,159
have add

2033
01:41:34,239 --> 01:41:46,959
guidance in the draft how you

2034
01:41:38,159 --> 01:41:50,159
can do this

2035
01:41:46,960 --> 01:41:53,679
and any more comments

2036
01:41:50,159 --> 01:41:57,360
about adding explicit identify or

2037
01:41:53,679 --> 01:42:00,719
relying on text string uh

2038
01:41:57,360 --> 01:42:02,799
can you hear me yes yes um

2039
01:42:00,719 --> 01:42:04,000
i was just wondering about what militia

2040
01:42:02,800 --> 01:42:07,280
said do you mean

2041
01:42:04,000 --> 01:42:09,199
an identifier for each like for like

2042
01:42:07,280 --> 01:42:12,239
common types of errors

2043
01:42:09,199 --> 01:42:15,280
or like just an identifier saying this

2044
01:42:12,239 --> 01:42:17,119
is an error message and then like

2045
01:42:15,280 --> 01:42:20,080
the the actual error message can be

2046
01:42:17,119 --> 01:42:22,719
described inside the text string

2047
01:42:20,080 --> 01:42:24,719
i meant uh i meant the letter the letter

2048
01:42:22,719 --> 01:42:27,600
so essentially it's a

2049
01:42:24,719 --> 01:42:30,159
message yeah okay right yeah yeah i

2050
01:42:27,600 --> 01:42:30,159
agree with that

2051
01:42:38,400 --> 01:42:41,920
okay so if there are no other comments i

2052
01:42:40,239 --> 01:42:42,239
propose that we move on and take this

2053
01:42:41,920 --> 01:42:46,960
one

2054
01:42:42,239 --> 01:42:46,959
to github yes that sounds good

2055
01:42:49,440 --> 01:42:56,799
so this issue is about the encryption

2056
01:42:53,360 --> 01:42:59,920
in message two and this

2057
01:42:56,800 --> 01:43:04,080
is the encryption of the

2058
01:42:59,920 --> 01:43:08,159
id cred r identifier

2059
01:43:04,080 --> 01:43:08,159
for the credentials of r

2060
01:43:08,560 --> 01:43:15,760
and as discussed in sig the sigma

2061
01:43:12,400 --> 01:43:19,519
paper the responder sends its

2062
01:43:15,760 --> 01:43:23,440
identity to anybody who asks

2063
01:43:19,520 --> 01:43:28,080
so an attacker active attacker

2064
01:43:23,440 --> 01:43:30,879
can get ours identity

2065
01:43:28,080 --> 01:43:32,480
there is therefore no need to have in

2066
01:43:30,880 --> 01:43:36,080
cca encryption

2067
01:43:32,480 --> 01:43:39,440
i.e encryption with integrity

2068
01:43:36,080 --> 01:43:40,800
of this identity it's enough to only

2069
01:43:39,440 --> 01:43:43,759
have encryption

2070
01:43:40,800 --> 01:43:44,560
in cpa encryption encryption without

2071
01:43:43,760 --> 01:43:47,600
integrity

2072
01:43:44,560 --> 01:43:50,080
in this case and just as a note

2073
01:43:47,600 --> 01:43:51,600
everything in the message is integrity

2074
01:43:50,080 --> 01:43:57,040
protected by the

2075
01:43:51,600 --> 01:44:01,520
inner mac which is also an aad without

2076
01:43:57,040 --> 01:44:01,519
it's an a80 without plain text

2077
01:44:02,400 --> 01:44:09,679
and a problem is that cosi

2078
01:44:06,000 --> 01:44:13,840
only has aad algoriths so they all

2079
01:44:09,679 --> 01:44:16,960
have a tag and

2080
01:44:13,840 --> 01:44:18,480
having a tag here makes this too big to

2081
01:44:16,960 --> 01:44:22,560
fit the laura bond

2082
01:44:18,480 --> 01:44:26,159
51 byte or five hop

2083
01:44:22,560 --> 01:44:29,440
sixties so that was the reason

2084
01:44:26,159 --> 01:44:33,199
that i think ad hoc two or three

2085
01:44:29,440 --> 01:44:36,480
um versions ago removed

2086
01:44:33,199 --> 01:44:39,839
the integrity tag in message

2087
01:44:36,480 --> 01:44:42,959
2 on the outer

2088
01:44:39,840 --> 01:44:46,000
encryption because it

2089
01:44:42,960 --> 01:44:48,719
had no purpose and

2090
01:44:46,000 --> 01:44:50,239
the specific ad hoc specification today

2091
01:44:48,719 --> 01:44:53,600
the solution is that it

2092
01:44:50,239 --> 01:44:56,799
generates a long encryption key and then

2093
01:44:53,600 --> 01:44:57,520
form a sore cipher it source the long

2094
01:44:56,800 --> 01:45:00,960
key

2095
01:44:57,520 --> 01:45:00,960
with the plain text

2096
01:45:01,040 --> 01:45:08,320
and this has the benefit that it is

2097
01:45:04,159 --> 01:45:12,000
independent of the encryption algorithm

2098
01:45:08,320 --> 01:45:14,320
uh but it led to

2099
01:45:12,000 --> 01:45:16,320
comments both from the people doing

2100
01:45:14,320 --> 01:45:17,119
formal verification which has why are

2101
01:45:16,320 --> 01:45:19,840
you using

2102
01:45:17,119 --> 01:45:20,719
source cipher and they also said that

2103
01:45:19,840 --> 01:45:22,960
they got

2104
01:45:20,719 --> 01:45:23,760
comments from the reviewers of their

2105
01:45:22,960 --> 01:45:28,000
paper

2106
01:45:23,760 --> 01:45:31,119
saying why is this using source iphone

2107
01:45:28,000 --> 01:45:33,679
which brings to this issue uh so

2108
01:45:31,119 --> 01:45:35,040
how should we do this encryption without

2109
01:45:33,679 --> 01:45:38,000
integrity

2110
01:45:35,040 --> 01:45:40,000
so option one is to do like today option

2111
01:45:38,000 --> 01:45:43,760
two would be to

2112
01:45:40,000 --> 01:45:47,280
do an aad and then remove the tag

2113
01:45:43,760 --> 01:45:50,239
from the aad i think this works for

2114
01:45:47,280 --> 01:45:52,719
the current cosal grids but it in

2115
01:45:50,239 --> 01:45:55,199
general it does not work

2116
01:45:52,719 --> 01:45:56,639
for an aad that does not have a

2117
01:45:55,199 --> 01:45:59,759
well-defined

2118
01:45:56,639 --> 01:46:03,119
tag there are some such algorithms but

2119
01:45:59,760 --> 01:46:06,159
none of them defined for cosi

2120
01:46:03,119 --> 01:46:07,280
third option would to basically make a

2121
01:46:06,159 --> 01:46:10,879
table

2122
01:46:07,280 --> 01:46:14,880
where for each coca the algorithm you

2123
01:46:10,880 --> 01:46:18,239
assigned uh encryption algorithm without

2124
01:46:14,880 --> 01:46:21,679
integrity so for ccm and gcm

2125
01:46:18,239 --> 01:46:22,400
you would use asc's tr and for cha cha

2126
01:46:21,679 --> 01:46:26,400
poly

2127
01:46:22,400 --> 01:46:29,519
1305 you use cha-cha

2128
01:46:26,400 --> 01:46:31,920
and these have then the disadvantage

2129
01:46:29,520 --> 01:46:37,520
that you need to specify something

2130
01:46:31,920 --> 01:46:37,520
for if course is specified a new ada

2131
01:46:38,840 --> 01:46:43,600
algorithm

2132
01:46:40,560 --> 01:46:46,560
um and my feeling is that

2133
01:46:43,600 --> 01:46:49,760
to fit in laura 1 and 60s we need to we

2134
01:46:46,560 --> 01:46:53,520
cannot introduce the integrity

2135
01:46:49,760 --> 01:46:55,199
tag again it fills new purpose

2136
01:46:53,520 --> 01:46:57,280
and these are the three different

2137
01:46:55,199 --> 01:46:59,360
solutions that

2138
01:46:57,280 --> 01:47:02,880
i could come up with they all have the

2139
01:46:59,360 --> 01:47:02,880
benefits and disadvantages

2140
01:47:03,040 --> 01:47:09,840
i think we have to choose one of these

2141
01:47:20,840 --> 01:47:23,840
hmm

2142
01:47:41,040 --> 01:47:46,639
i think christian comment here about

2143
01:47:45,040 --> 01:47:51,119
difference between

2144
01:47:46,639 --> 01:47:54,400
two and three um might

2145
01:47:51,119 --> 01:47:54,400
be i'm

2146
01:47:54,719 --> 01:48:00,320
it might be some i don't know if you

2147
01:47:58,320 --> 01:48:04,080
you have different nonsense that depend

2148
01:48:00,320 --> 01:48:07,400
maybe on ccm and gcm so

2149
01:48:04,080 --> 01:48:08,800
maybe the encryption would not look

2150
01:48:07,400 --> 01:48:12,000
exactly

2151
01:48:08,800 --> 01:48:16,840
the same if you just remove the tag

2152
01:48:12,000 --> 01:48:20,000
as if you would specify a ctr but

2153
01:48:16,840 --> 01:48:23,199
um we will need to look

2154
01:48:20,000 --> 01:48:23,199
into that more in detail

2155
01:48:25,760 --> 01:48:34,639
comment from pen is to basically

2156
01:48:29,119 --> 01:48:34,639
dtl is doing something similar to tree

2157
01:48:36,400 --> 01:48:41,119
and i guess ben's suggestion would be to

2158
01:48:39,440 --> 01:48:47,839
do

2159
01:48:41,119 --> 01:48:47,839
number three

2160
01:49:05,280 --> 01:49:09,599
and i think we can not use

2161
01:49:10,080 --> 01:49:16,800
we cannot use ecb because it has

2162
01:49:14,080 --> 01:49:18,080
two short block lengths we would need to

2163
01:49:16,800 --> 01:49:20,719
use

2164
01:49:18,080 --> 01:49:20,719
ctr

2165
01:49:26,560 --> 01:49:32,140
anybody wants to say something

2166
01:49:29,010 --> 01:49:32,140
[Music]

2167
01:49:32,480 --> 01:49:43,839
about encryption or about babies

2168
01:49:50,880 --> 01:49:55,440
it sounds like everyone says we should

2169
01:49:52,800 --> 01:49:57,840
just do number three

2170
01:49:55,440 --> 01:49:59,919
i don't know why there's a downside of

2171
01:49:57,840 --> 01:50:03,520
that

2172
01:49:59,920 --> 01:50:06,800
no they i think that's

2173
01:50:03,520 --> 01:50:11,440
the the only downside is that you

2174
01:50:06,800 --> 01:50:14,560
basically need them a mapping so if

2175
01:50:11,440 --> 01:50:17,759
cosi specify a new algorithm

2176
01:50:14,560 --> 01:50:19,840
it might not follow

2177
01:50:17,760 --> 01:50:21,760
directly at least theoretically it

2178
01:50:19,840 --> 01:50:23,840
doesn't follow directly what you should

2179
01:50:21,760 --> 01:50:26,239
use but maybe in practice it follows

2180
01:50:23,840 --> 01:50:26,239
anyway

2181
01:50:33,040 --> 01:50:40,320
it seems to be a preference here for

2182
01:50:36,880 --> 01:50:44,480
tree i don't have any strong opinions

2183
01:50:40,320 --> 01:50:46,559
myself um

2184
01:50:44,480 --> 01:50:48,480
do we have an implementation input here

2185
01:50:46,560 --> 01:50:52,560
on

2186
01:50:48,480 --> 01:50:55,199
xor versus

2187
01:50:52,560 --> 01:50:55,199
counter mode

2188
01:50:58,800 --> 01:51:03,679
i suppose counter mode is should be fine

2189
01:51:04,000 --> 01:51:08,400
yeah having implemented not really

2190
01:51:06,960 --> 01:51:12,719
implemented the protocol but

2191
01:51:08,400 --> 01:51:16,480
test vectors i think they are quite

2192
01:51:12,719 --> 01:51:21,840
both of them would be very easy to

2193
01:51:16,480 --> 01:51:21,839
implement i think

2194
01:51:22,800 --> 01:51:26,320
okay so i propose that we continue

2195
01:51:24,400 --> 01:51:27,360
discussing this on the on the github

2196
01:51:26,320 --> 01:51:30,239
page

2197
01:51:27,360 --> 01:51:30,639
uh and we stop here because it's already

2198
01:51:30,239 --> 01:51:34,559
uh

2199
01:51:30,639 --> 01:51:36,239
nine till the hour yes sounds good and

2200
01:51:34,560 --> 01:51:37,040
people are starting discussing babies

2201
01:51:36,239 --> 01:51:40,159
instead so

2202
01:51:37,040 --> 01:51:41,280
it's a good breaking point yes so i

2203
01:51:40,159 --> 01:51:44,719
invite everyone to

2204
01:51:41,280 --> 01:51:47,040
to comment on the github issues uh

2205
01:51:44,719 --> 01:51:48,560
with the comments you might have in chat

2206
01:51:47,040 --> 01:51:51,599
and with that

2207
01:51:48,560 --> 01:51:52,480
uh i would uh we should move on to the

2208
01:51:51,599 --> 01:51:55,599
next agenda

2209
01:51:52,480 --> 01:51:57,598
item which is the interrupt planning so

2210
01:51:55,599 --> 01:52:03,840
front uh stephen can you present the

2211
01:51:57,599 --> 01:52:03,840
slides or

2212
01:52:04,639 --> 01:52:12,080
yes hello can you hear me yes

2213
01:52:08,639 --> 01:52:12,080
yes we hear you from jessica

2214
01:52:13,040 --> 01:52:17,840
i'm also gonna share my

2215
01:52:18,800 --> 01:52:22,000
i will see you okay

2216
01:52:26,560 --> 01:52:32,960
so this is just a quick

2217
01:52:31,440 --> 01:52:35,280
i just want to quickly talk about

2218
01:52:32,960 --> 01:52:38,480
implementation interrupt

2219
01:52:35,280 --> 01:52:42,000
and test vector status right now so

2220
01:52:38,480 --> 01:52:42,000
next slide please

2221
01:52:43,040 --> 01:52:49,599
so in version zero two zero two

2222
01:52:46,560 --> 01:52:51,760
of the draft we have added one more

2223
01:52:49,599 --> 01:52:54,080
test vector to to the draft because we

2224
01:52:51,760 --> 01:52:57,199
had a positive feedback about it

2225
01:52:54,080 --> 01:52:58,159
and so i think i don't see the slides

2226
01:52:57,199 --> 01:53:01,199
updating

2227
01:52:58,159 --> 01:53:04,080
i don't know if we're looking at

2228
01:53:01,199 --> 01:53:04,080
slide two

2229
01:53:06,880 --> 01:53:13,840
but the test vector in the document

2230
01:53:21,040 --> 01:53:26,960
keys and using the

2231
01:53:24,400 --> 01:53:27,679
x5t hash value to identify the

2232
01:53:26,960 --> 01:53:30,159
certificate

2233
01:53:27,679 --> 01:53:32,320
and then method three which is adopt

2234
01:53:30,159 --> 01:53:32,960
authenticated with static difficult keys

2235
01:53:32,320 --> 01:53:36,080
and

2236
01:53:32,960 --> 01:53:38,880
raw public keys encoded as kosike with a

2237
01:53:36,080 --> 01:53:42,639
key id used to identify the credential

2238
01:53:38,880 --> 01:53:44,080
and we also have a way more extensive

2239
01:53:42,639 --> 01:53:48,719
set of test vectors

2240
01:53:44,080 --> 01:53:48,719
on github at this link and

2241
01:53:49,360 --> 01:53:52,400
yeah implementers should be aware that

2242
01:53:51,520 --> 01:53:55,760
these exist

2243
01:53:52,400 --> 01:53:58,159
and that you can check them out and

2244
01:53:55,760 --> 01:53:59,920
the one in the document in appendix b of

2245
01:53:58,159 --> 01:54:02,320
the draft are actually

2246
01:53:59,920 --> 01:54:03,679
should give you more guidance about how

2247
01:54:02,320 --> 01:54:06,880
things are built and

2248
01:54:03,679 --> 01:54:07,280
and constructed but then the vectors in

2249
01:54:06,880 --> 01:54:10,560
the

2250
01:54:07,280 --> 01:54:10,559
in the github as well are

2251
01:54:11,440 --> 01:54:15,280
yeah should be used to to test your

2252
01:54:13,360 --> 01:54:16,960
implementation

2253
01:54:15,280 --> 01:54:19,440
and we also have test vector for our

2254
01:54:16,960 --> 01:54:23,440
message uh in progress

2255
01:54:19,440 --> 01:54:25,759
so next slide

2256
01:54:23,440 --> 01:54:27,440
we are starting to think about interop

2257
01:54:25,760 --> 01:54:30,080
so we've uh

2258
01:54:27,440 --> 01:54:30,080
talked about

2259
01:54:31,440 --> 01:54:37,360
we have contacted several people

2260
01:54:35,199 --> 01:54:39,919
that showed interest and that showed

2261
01:54:37,360 --> 01:54:43,519
that they had

2262
01:54:39,920 --> 01:54:45,679
maybe some implementation available and

2263
01:54:43,520 --> 01:54:47,440
um we are looking for more people to

2264
01:54:45,679 --> 01:54:50,400
participate so if you are

2265
01:54:47,440 --> 01:54:52,400
planning to implement or you have an

2266
01:54:50,400 --> 01:54:54,879
implementation and you're interested

2267
01:54:52,400 --> 01:54:56,799
please uh let us know right in the

2268
01:54:54,880 --> 01:54:58,719
mailing list contact us

2269
01:54:56,800 --> 01:55:00,480
and hopefully we can have something

2270
01:54:58,719 --> 01:55:02,639
going for december

2271
01:55:00,480 --> 01:55:04,000
depending on availability of

2272
01:55:02,639 --> 01:55:08,080
implementers as well

2273
01:55:04,000 --> 01:55:11,280
and we are also starting to

2274
01:55:08,080 --> 01:55:13,920
think about the uh the test suite which

2275
01:55:11,280 --> 01:55:16,960
will be based on the test vectors

2276
01:55:13,920 --> 01:55:20,800
um so yeah we will keep everybody

2277
01:55:16,960 --> 01:55:23,920
aware of this effort in the lake mailing

2278
01:55:20,800 --> 01:55:23,920
list but if you want to

2279
01:55:24,080 --> 01:55:28,639
participate it's also good if you come

2280
01:55:26,320 --> 01:55:28,639
to us

2281
01:55:28,719 --> 01:55:36,639
or write in the mailing list and that's

2282
01:55:33,280 --> 01:55:37,759
all i wanted to say okay thanks

2283
01:55:36,639 --> 01:55:40,960
francesca

2284
01:55:37,760 --> 01:55:42,480
so uh we should follow up on this on the

2285
01:55:40,960 --> 01:55:43,920
mail english definitely this is an

2286
01:55:42,480 --> 01:55:46,559
interesting topic

2287
01:55:43,920 --> 01:55:48,239
uh but since we are very close to the

2288
01:55:46,560 --> 01:55:51,679
end of the meeting i propose

2289
01:55:48,239 --> 01:55:54,879
we move on with the slides that euron

2290
01:55:51,679 --> 01:55:58,840
uh had prepared uh on

2291
01:55:54,880 --> 01:56:01,840
related work stephen could you present

2292
01:55:58,840 --> 01:56:01,840
that

2293
01:56:05,640 --> 01:56:15,840
[Laughter]

2294
01:56:12,840 --> 01:56:15,840
okay

2295
01:56:29,920 --> 01:56:33,280
yes here they are uh

2296
01:56:33,440 --> 01:56:39,280
yep can you hear me yes yes

2297
01:56:37,040 --> 01:56:40,159
okay so yeah this is just uh just

2298
01:56:39,280 --> 01:56:43,679
information

2299
01:56:40,159 --> 01:56:47,280
um lake meeting is almost over

2300
01:56:43,679 --> 01:56:47,679
but there are more topics related to

2301
01:56:47,280 --> 01:56:51,360
lake

2302
01:56:47,679 --> 01:56:53,440
at this meeting so

2303
01:56:51,360 --> 01:56:56,960
the cozy meeting falling right after the

2304
01:56:53,440 --> 01:57:00,159
break will speak about

2305
01:56:56,960 --> 01:57:02,639
seaborne coding of x519 certificates and

2306
01:57:00,159 --> 01:57:05,839
identification as we mentioned

2307
01:57:02,639 --> 01:57:07,920
we discussed this previously it's not

2308
01:57:05,840 --> 01:57:10,320
decided whether it's relevant or not but

2309
01:57:07,920 --> 01:57:11,040
if you're interested that's uh that's

2310
01:57:10,320 --> 01:57:14,320
the

2311
01:57:11,040 --> 01:57:18,320
that's the slot for for that topic uh

2312
01:57:14,320 --> 01:57:21,280
on tuesday uh there is a slot descri

2313
01:57:18,320 --> 01:57:21,920
in the core working group looking at the

2314
01:57:21,280 --> 01:57:24,960
draft

2315
01:57:21,920 --> 01:57:27,599
for combining auto ad hoc and escort

2316
01:57:24,960 --> 01:57:28,560
head how can we score in one message and

2317
01:57:27,599 --> 01:57:31,360
also in core

2318
01:57:28,560 --> 01:57:32,400
on friday is the discussion about

2319
01:57:31,360 --> 01:57:34,639
re-keying

2320
01:57:32,400 --> 01:57:35,759
as was mentioned there's also the ace

2321
01:57:34,639 --> 01:57:40,000
working group on

2322
01:57:35,760 --> 01:57:44,080
wednesday the two drafts are related to

2323
01:57:40,000 --> 01:57:46,480
how to use ad hoc for authorization

2324
01:57:44,080 --> 01:57:47,440
uh to add authorization to ad hoc and

2325
01:57:46,480 --> 01:57:50,159
also to add

2326
01:57:47,440 --> 01:57:52,239
certificate enrollment and there is a

2327
01:57:50,159 --> 01:57:54,799
charter discussion

2328
01:57:52,239 --> 01:57:55,759
where one of the topics for potential

2329
01:57:54,800 --> 01:57:59,199
new work items

2330
01:57:55,760 --> 01:58:00,639
is around authorized access to raw

2331
01:57:59,199 --> 01:58:02,638
public keys

2332
01:58:00,639 --> 01:58:04,320
using the authorization framework so

2333
01:58:02,639 --> 01:58:09,840
that would be a way of

2334
01:58:04,320 --> 01:58:09,840
of kickstarting ad hoc next slide please

2335
01:58:15,679 --> 01:58:21,440
thanks so just just for illustration

2336
01:58:19,440 --> 01:58:22,799
since i like colors i put together this

2337
01:58:21,440 --> 01:58:27,199
example

2338
01:58:22,800 --> 01:58:30,000
using the drafts of the of the previous

2339
01:58:27,199 --> 01:58:31,759
slide and how how they could be combined

2340
01:58:30,000 --> 01:58:33,920
this is just one example they are not

2341
01:58:31,760 --> 01:58:35,520
really they don't need to combine them

2342
01:58:33,920 --> 01:58:38,560
this way

2343
01:58:35,520 --> 01:58:41,760
but so just quickly on the colors here

2344
01:58:38,560 --> 01:58:43,199
you can do ad hoc which is the blue oh

2345
01:58:41,760 --> 01:58:43,760
this is an example about the device

2346
01:58:43,199 --> 01:58:47,280
joining

2347
01:58:43,760 --> 01:58:48,000
network assisted by a third party

2348
01:58:47,280 --> 01:58:51,040
authorization

2349
01:58:48,000 --> 01:58:52,480
server and also doing certificate

2350
01:58:51,040 --> 01:58:56,800
enrollment

2351
01:58:52,480 --> 01:58:59,119
uh request and and response

2352
01:58:56,800 --> 01:59:00,239
so this is uh with this this is what i

2353
01:58:59,119 --> 01:59:02,719
think a little bit what

2354
01:59:00,239 --> 01:59:04,799
michael was mentioning referring to um

2355
01:59:02,719 --> 01:59:07,520
we have the authentication in blue here

2356
01:59:04,800 --> 01:59:09,599
that's the ad hoc messages123

2357
01:59:07,520 --> 01:59:11,679
there are the black messages which is

2358
01:59:09,599 --> 01:59:16,320
the oscar request response

2359
01:59:11,679 --> 01:59:20,159
and they contain the est payloads

2360
01:59:16,320 --> 01:59:22,719
uh which are uh in this case

2361
01:59:20,159 --> 01:59:23,598
uh it's a significant this is a simple

2362
01:59:22,719 --> 01:59:26,639
enrollment

2363
01:59:23,599 --> 01:59:29,360
method so it's the sen and

2364
01:59:26,639 --> 01:59:31,360
it's the request is a cbor encoded

2365
01:59:29,360 --> 01:59:33,920
certificate signing request

2366
01:59:31,360 --> 01:59:35,280
and you get back a c board certificate

2367
01:59:33,920 --> 01:59:38,320
or a reference there too

2368
01:59:35,280 --> 01:59:39,360
as described in this green green

2369
01:59:38,320 --> 01:59:41,679
reference

2370
01:59:39,360 --> 01:59:44,080
and the combination of oscore and ad hoc

2371
01:59:41,679 --> 01:59:46,239
is that's the yellow box

2372
01:59:44,080 --> 01:59:49,119
and the third-party optional third-party

2373
01:59:46,239 --> 01:59:51,040
assisted authorization is the red

2374
01:59:49,119 --> 01:59:52,799
red blob so i don't go through this in

2375
01:59:51,040 --> 01:59:54,800
detail but if you're interested

2376
01:59:52,800 --> 01:59:56,320
then go to the corresponding working

2377
01:59:54,800 --> 01:59:59,599
group and

2378
01:59:56,320 --> 02:00:00,960
and have yeah raise your raise your

2379
01:59:59,599 --> 02:00:04,080
opinion

2380
02:00:00,960 --> 02:00:04,960
so that was it for me thank you okay

2381
02:00:04,080 --> 02:00:08,000
thank you

2382
02:00:04,960 --> 02:00:10,159
so just uh before wrapping up uh

2383
02:00:08,000 --> 02:00:12,159
we are on top of the hour but i would

2384
02:00:10,159 --> 02:00:14,239
just like to discuss the next steps

2385
02:00:12,159 --> 02:00:16,480
and since we did not cover all the

2386
02:00:14,239 --> 02:00:18,879
issues in the today's meeting

2387
02:00:16,480 --> 02:00:21,119
uh i propose that we have an interim

2388
02:00:18,880 --> 02:00:22,960
meeting so now the question is whether

2389
02:00:21,119 --> 02:00:26,559
we would like to have the meeting

2390
02:00:22,960 --> 02:00:30,320
before or after the holidays

2391
02:00:26,560 --> 02:00:30,320
so i welcome any comments

2392
02:00:32,400 --> 02:00:41,839
so joran uh would like committing before

2393
02:00:36,400 --> 02:00:41,839
the holidays marco agreed to that

2394
02:00:43,920 --> 02:00:47,360
do we have any other opinions

2395
02:00:48,639 --> 02:00:52,880
michael agrees with that as well so it

2396
02:00:50,320 --> 02:00:55,360
seems we

2397
02:00:52,880 --> 02:00:56,480
okay and john okay so it seems we have

2398
02:00:55,360 --> 02:00:58,159
consensus that

2399
02:00:56,480 --> 02:00:59,759
we should have an interim meeting before

2400
02:00:58,159 --> 02:01:01,920
the holidays

2401
02:00:59,760 --> 02:01:04,320
after the u.s thank giving as michael

2402
02:01:01,920 --> 02:01:08,239
proposes so essentially beginning

2403
02:01:04,320 --> 02:01:11,599
mid-december uh from what i can gather

2404
02:01:08,239 --> 02:01:13,839
uh so let's make it uh

2405
02:01:11,599 --> 02:01:15,040
let's make an action point for chairs to

2406
02:01:13,840 --> 02:01:19,040
to schedule this

2407
02:01:15,040 --> 02:01:21,119
meeting uh soonish and with that

2408
02:01:19,040 --> 02:01:22,880
i would like to thank you for attending

2409
02:01:21,119 --> 02:01:27,119
the today's meeting

2410
02:01:22,880 --> 02:01:31,040
i also thank michael for note-taking

2411
02:01:27,119 --> 02:01:32,080
and so maybe put it just at the end of

2412
02:01:31,040 --> 02:01:34,000
planned interrupt

2413
02:01:32,080 --> 02:01:35,360
so okay we still don't have a date on

2414
02:01:34,000 --> 02:01:38,000
interrupt michael so

2415
02:01:35,360 --> 02:01:41,839
i wouldn't tie it to that but i will try

2416
02:01:38,000 --> 02:01:41,840
to coordinate with francesca and maybe

2417
02:01:41,920 --> 02:01:44,800
link the two together

2418
02:01:45,599 --> 02:01:49,199
uh so thank you everyone thank you for

2419
02:01:47,679 --> 02:01:52,080
attending see you

2420
02:01:49,199 --> 02:01:53,360
on the uh for the rest of the week and

2421
02:01:52,080 --> 02:01:56,239
talk to you on the mailing list and

2422
02:01:53,360 --> 02:01:56,239
github pages

2423
02:02:02,840 --> 02:02:05,840
bye

2424
02:02:16,239 --> 02:02:18,320
you

