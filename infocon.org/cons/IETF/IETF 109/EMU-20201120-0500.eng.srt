1
00:00:04,960 --> 00:00:07,759
i'll take i'll take notes and i'm sure

2
00:00:06,799 --> 00:00:09,679
someone uh

3
00:00:07,759 --> 00:00:12,400
will kind of step up with me to work in

4
00:00:09,679 --> 00:00:15,440
cody md as well no worries

5
00:00:12,400 --> 00:00:18,480
great thanks um

6
00:00:15,440 --> 00:00:22,160
so yeah uh let's get uh started

7
00:00:18,480 --> 00:00:25,119
um uh joe salloway

8
00:00:22,160 --> 00:00:25,599
uh one of the chairs and uh my co-chair

9
00:00:25,119 --> 00:00:29,119
mohit

10
00:00:25,599 --> 00:00:32,159
is also on

11
00:00:29,119 --> 00:00:35,360
and this is the emu meeting for uh

12
00:00:32,159 --> 00:00:38,800
the virtual ietf109

13
00:00:35,360 --> 00:00:40,640
um so uh there's a couple links here

14
00:00:38,800 --> 00:00:42,559
i think probably by this time in the

15
00:00:40,640 --> 00:00:44,640
week you're pretty experienced with

16
00:00:42,559 --> 00:00:49,680
dealing with the

17
00:00:44,640 --> 00:00:49,680
virtual meeting tools but

18
00:00:50,480 --> 00:00:55,199
here's some info but what you're

19
00:00:53,199 --> 00:00:58,239
probably really all waiting for

20
00:00:55,199 --> 00:01:00,559
is the favorite notewell again you're

21
00:00:58,239 --> 00:01:02,239
probably all familiar with this but

22
00:01:00,559 --> 00:01:04,239
if you're not please familiar yourself

23
00:01:02,239 --> 00:01:08,560
familiarize yourself with the

24
00:01:04,239 --> 00:01:08,560
ietf's ipr policies

25
00:01:09,439 --> 00:01:15,600
all right so

26
00:01:12,799 --> 00:01:17,200
we have a pretty full agenda i think

27
00:01:15,600 --> 00:01:19,919
we'll have enough time for it

28
00:01:17,200 --> 00:01:22,080
uh this time uh but because we ran out

29
00:01:19,920 --> 00:01:24,479
of time last time we did uh

30
00:01:22,080 --> 00:01:26,720
give a priority to some of the

31
00:01:24,479 --> 00:01:27,600
presentations that we were unable to get

32
00:01:26,720 --> 00:01:31,119
to

33
00:01:27,600 --> 00:01:34,320
in uh at the last virtual meeting

34
00:01:31,119 --> 00:01:36,400
um we have uh note takers

35
00:01:34,320 --> 00:01:39,199
the blue sheets are taken automatically

36
00:01:36,400 --> 00:01:42,399
we have people monitoring

37
00:01:39,200 --> 00:01:44,720
jabber um so

38
00:01:42,399 --> 00:01:46,640
is there any uh bashing of the agenda

39
00:01:44,720 --> 00:01:49,679
that we'd like to do i mean we have uh

40
00:01:46,640 --> 00:01:52,159
tls proof of knowledge um

41
00:01:49,680 --> 00:01:53,200
uh from either owen or dan will present

42
00:01:52,159 --> 00:01:56,640
i'm not sure which

43
00:01:53,200 --> 00:01:58,320
and we have tls ibs we'll go through

44
00:01:56,640 --> 00:01:59,920
some of the type of rada

45
00:01:58,320 --> 00:02:01,758
hopefully that will not take the whole

46
00:01:59,920 --> 00:02:03,439
time but uh hopefully we can have some

47
00:02:01,759 --> 00:02:06,719
good discussion on that

48
00:02:03,439 --> 00:02:10,318
an update for eep noob and then

49
00:02:06,719 --> 00:02:12,799
a new presentation on eve ad hoc

50
00:02:10,318 --> 00:02:15,119
any other topics people want to go

51
00:02:12,800 --> 00:02:15,120
through

52
00:02:16,879 --> 00:02:19,359
all right

53
00:02:20,319 --> 00:02:26,958
so um i don't know mohit did you want to

54
00:02:23,360 --> 00:02:26,959
talk through some of the draft status or

55
00:02:30,160 --> 00:02:37,120
uh morning can you hear me yes yes

56
00:02:33,599 --> 00:02:39,040
uh yeah so um uh

57
00:02:37,120 --> 00:02:40,959
i will be presenting a short update on

58
00:02:39,040 --> 00:02:44,239
eve noob so we'll deal with that

59
00:02:40,959 --> 00:02:46,720
uh during the agenda today uh

60
00:02:44,239 --> 00:02:47,360
i think yari submitted an update of uh

61
00:02:46,720 --> 00:02:50,560
epk

62
00:02:47,360 --> 00:02:51,840
pfs i don't know if yari wants to say

63
00:02:50,560 --> 00:02:55,840
something but

64
00:02:51,840 --> 00:02:59,360
it looks more or less ready i i guess

65
00:02:55,840 --> 00:02:59,360
if here is on the

66
00:03:01,200 --> 00:03:04,799
i don't know if he is in the meeting and

67
00:03:02,560 --> 00:03:08,480
wants to say something

68
00:03:04,800 --> 00:03:10,560
then we had this large certificates

69
00:03:08,480 --> 00:03:13,359
which was approved by the iesg but

70
00:03:10,560 --> 00:03:15,120
pending uh

71
00:03:13,360 --> 00:03:16,640
pending a document update and i

72
00:03:15,120 --> 00:03:19,519
submitted an update

73
00:03:16,640 --> 00:03:20,079
yesterday so now it's uh i guess with

74
00:03:19,519 --> 00:03:23,120
you

75
00:03:20,080 --> 00:03:26,640
roman to uh i guess

76
00:03:23,120 --> 00:03:28,959
uh send it to the rfc editor

77
00:03:26,640 --> 00:03:30,559
yeah i haven't i'll take a look uh and

78
00:03:28,959 --> 00:03:33,920
then yeah assuming it's fine

79
00:03:30,560 --> 00:03:38,159
we'll keep it moving sounds good

80
00:03:33,920 --> 00:03:41,040
uh using epls with dls 1.3 is

81
00:03:38,159 --> 00:03:43,840
scheduled for the isg telechart on 17th

82
00:03:41,040 --> 00:03:43,840
of december

83
00:03:43,920 --> 00:03:48,720
we got like a couple of emails from

84
00:03:46,080 --> 00:03:51,040
ayanna that we need to clarify the tls

85
00:03:48,720 --> 00:03:51,599
exporter labels that we are registering

86
00:03:51,040 --> 00:03:53,760
if

87
00:03:51,599 --> 00:03:55,839
it's okay with dtls and whether it's

88
00:03:53,760 --> 00:03:59,280
recommended so

89
00:03:55,840 --> 00:04:00,000
i plan to add those information to the

90
00:03:59,280 --> 00:04:03,439
inner section

91
00:04:00,000 --> 00:04:05,439
and submit a new version hopefully today

92
00:04:03,439 --> 00:04:08,000
but i guess more importantly we are

93
00:04:05,439 --> 00:04:11,359
waiting for a review from harness

94
00:04:08,000 --> 00:04:12,159
he had promised that he will go over the

95
00:04:11,360 --> 00:04:15,439
document

96
00:04:12,159 --> 00:04:17,519
uh once more and thank you hannes

97
00:04:15,439 --> 00:04:21,120
already for sending the

98
00:04:17,519 --> 00:04:21,120
reviews uh thus far

99
00:04:21,199 --> 00:04:26,160
uh so yeah then epls with tls 1.3

100
00:04:24,960 --> 00:04:29,440
hopefully will be done

101
00:04:26,160 --> 00:04:32,479
by december uh if uh

102
00:04:29,440 --> 00:04:35,120
aka the 5448 best document

103
00:04:32,479 --> 00:04:36,000
is spending some synchronization with

104
00:04:35,120 --> 00:04:39,040
3gpp

105
00:04:36,000 --> 00:04:41,759
so we'll wait for that i think uh yari

106
00:04:39,040 --> 00:04:43,759
and vesa who are co-authors are also

107
00:04:41,759 --> 00:04:47,919
like discussing this in 3gpp

108
00:04:43,759 --> 00:04:49,520
and basically figuring out how how to

109
00:04:47,919 --> 00:04:51,680
ensure that both

110
00:04:49,520 --> 00:04:53,919
the document here in the ietf and the

111
00:04:51,680 --> 00:04:57,360
specs in 3gpp are

112
00:04:53,919 --> 00:05:01,359
are completely in sync and don't leave

113
00:04:57,360 --> 00:05:03,759
something to to be misunderstood so

114
00:05:01,360 --> 00:05:04,560
we wait for a document update on that

115
00:05:03,759 --> 00:05:07,360
too

116
00:05:04,560 --> 00:05:08,000
and yeah we had our first rfc published

117
00:05:07,360 --> 00:05:11,199
between

118
00:05:08,000 --> 00:05:14,639
108 and 109 which was uh rfc

119
00:05:11,199 --> 00:05:16,880
8940 and thanks to alan for doing the

120
00:05:14,639 --> 00:05:16,880
work

121
00:05:17,680 --> 00:05:22,160
yeah i guess that's the status unless

122
00:05:19,680 --> 00:05:25,520
someone has some more updates

123
00:05:22,160 --> 00:05:28,560
i think harness is in the queue

124
00:05:25,520 --> 00:05:29,919
yeah hi hi cho hi mohit um yeah i've

125
00:05:28,560 --> 00:05:33,039
started um

126
00:05:29,919 --> 00:05:34,479
doing the review already uh this week

127
00:05:33,039 --> 00:05:37,199
was a little bit busy

128
00:05:34,479 --> 00:05:37,758
but uh yeah thanks for the updates mohit

129
00:05:37,199 --> 00:05:40,160
uh

130
00:05:37,759 --> 00:05:41,680
i definitely much better the document is

131
00:05:40,160 --> 00:05:44,240
much better now

132
00:05:41,680 --> 00:05:45,680
um i think uh from a readability point

133
00:05:44,240 --> 00:05:48,639
of view so that

134
00:05:45,680 --> 00:05:49,199
only maybe knits here and there but

135
00:05:48,639 --> 00:05:53,520
nothing

136
00:05:49,199 --> 00:05:56,800
nothing really substantial

137
00:05:53,520 --> 00:05:58,000
yeah thanks and look forward to the next

138
00:05:56,800 --> 00:06:01,600
review so

139
00:05:58,000 --> 00:06:04,880
uh just fi the document is on the

140
00:06:01,600 --> 00:06:07,520
tele chat for 17 so if you can get

141
00:06:04,880 --> 00:06:08,159
get it before that uh that would be nice

142
00:06:07,520 --> 00:06:10,400
but

143
00:06:08,160 --> 00:06:12,800
your reviews are welcome at any point

144
00:06:10,400 --> 00:06:13,440
even when it's in the rfc editor's queue

145
00:06:12,800 --> 00:06:18,720
so

146
00:06:13,440 --> 00:06:18,719
no no i try to deliver them in a timely

147
00:06:18,840 --> 00:06:23,039
fashion

148
00:06:21,039 --> 00:06:25,440
i guess we are done with the status

149
00:06:23,039 --> 00:06:25,440
update

150
00:06:28,000 --> 00:06:34,960
great um so i think we'll move on to

151
00:06:31,919 --> 00:06:36,799
our to either

152
00:06:34,960 --> 00:06:38,080
who's going to present is it going to be

153
00:06:36,800 --> 00:06:42,319
owen or

154
00:06:38,080 --> 00:06:42,318
dan for

155
00:06:47,039 --> 00:06:51,520
it's going to be owen all right

156
00:06:57,039 --> 00:07:00,479
um joel might will it be easier if i

157
00:06:59,759 --> 00:07:01,840
just share

158
00:07:00,479 --> 00:07:04,880
and i can move on the slides as i'm

159
00:07:01,840 --> 00:07:08,318
going uh you can if you want

160
00:07:04,880 --> 00:07:10,960
um if that'd be fine i'm in the queue

161
00:07:08,319 --> 00:07:11,919
for a screen share all right let me see

162
00:07:10,960 --> 00:07:16,080
how i

163
00:07:11,919 --> 00:07:31,840
let me stop this one

164
00:07:16,080 --> 00:07:31,840
are you able to there we go

165
00:07:35,520 --> 00:07:39,039
okay people see my shirt now

166
00:07:41,199 --> 00:07:45,759
yeah perfect okay so this is tls proof

167
00:07:44,479 --> 00:07:47,840
of knowledge

168
00:07:45,759 --> 00:07:49,680
myself and dan i'll just give you some

169
00:07:47,840 --> 00:07:51,679
background context first

170
00:07:49,680 --> 00:07:53,520
um on the wi-fi alliance device

171
00:07:51,680 --> 00:07:55,520
provisioning profile

172
00:07:53,520 --> 00:07:57,520
so what wi-fi alliance tpp does it

173
00:07:55,520 --> 00:07:59,758
defines how a supplicant bootstrap

174
00:07:57,520 --> 00:08:01,120
keypair can be used to bootstrap the

175
00:07:59,759 --> 00:08:02,240
supplicant security against the wi-fi

176
00:08:01,120 --> 00:08:04,720
network

177
00:08:02,240 --> 00:08:06,080
um dpp gives the supplicant to guarantee

178
00:08:04,720 --> 00:08:08,479
that it's connecting to a network that

179
00:08:06,080 --> 00:08:10,560
knows its booster public key

180
00:08:08,479 --> 00:08:12,719
um and just some information on what

181
00:08:10,560 --> 00:08:14,479
this butcher public key is it's encoded

182
00:08:12,720 --> 00:08:17,759
using a

183
00:08:14,479 --> 00:08:19,520
rfc 5280 subway public key info

184
00:08:17,759 --> 00:08:21,599
um it's a rocky pair it doesn't

185
00:08:19,520 --> 00:08:23,599
necessarily have to be part for pki

186
00:08:21,599 --> 00:08:25,280
it may be static embedded in the

187
00:08:23,599 --> 00:08:27,440
supplicant firmware printed on

188
00:08:25,280 --> 00:08:30,318
it may be delivered via printing on a qr

189
00:08:27,440 --> 00:08:32,080
label included in a bit of materials etc

190
00:08:30,319 --> 00:08:33,599
or alternatively the bootstrap key may

191
00:08:32,080 --> 00:08:34,320
be dynamically generated and displayed

192
00:08:33,599 --> 00:08:35,919
on the gui

193
00:08:34,320 --> 00:08:39,200
if your device that you're trying to

194
00:08:35,919 --> 00:08:41,598
bootstrap has a suitable display

195
00:08:39,200 --> 00:08:43,120
um we want to reuse the same booster

196
00:08:41,599 --> 00:08:44,720
public key to enable the device to

197
00:08:43,120 --> 00:08:48,000
securely bootstrap against a wired

198
00:08:44,720 --> 00:08:50,320
network using etls via tls extension

199
00:08:48,000 --> 00:08:51,440
and what this means from a deployment

200
00:08:50,320 --> 00:08:53,040
perspective is that

201
00:08:51,440 --> 00:08:55,440
if a device supports both wi-fi and

202
00:08:53,040 --> 00:08:56,959
wired networks the same qr codes the

203
00:08:55,440 --> 00:08:58,800
same bom et cetera may be used to

204
00:08:56,959 --> 00:09:00,079
establish trust across both wi-fi and

205
00:08:58,800 --> 00:09:01,279
wired networks

206
00:09:00,080 --> 00:09:04,240
and just at the very bottom there i've

207
00:09:01,279 --> 00:09:07,600
given an example of um

208
00:09:04,240 --> 00:09:08,560
the asn-1c encoding of a public subject

209
00:09:07,600 --> 00:09:10,560
public key and what that

210
00:09:08,560 --> 00:09:13,599
looks like in qr and this is all defined

211
00:09:10,560 --> 00:09:13,599
in the dpp spec

212
00:09:16,320 --> 00:09:20,720
so the just a quick again more context

213
00:09:19,120 --> 00:09:21,600
is a quick outline of what dpp looks

214
00:09:20,720 --> 00:09:24,160
like and what the product

215
00:09:21,600 --> 00:09:25,279
what shape the protocol has and the

216
00:09:24,160 --> 00:09:26,800
public bootstrap key

217
00:09:25,279 --> 00:09:28,560
step one the public booster key is

218
00:09:26,800 --> 00:09:30,000
provisioned in

219
00:09:28,560 --> 00:09:32,160
an entity that's called a dpp

220
00:09:30,000 --> 00:09:32,959
configurator so typically this could be

221
00:09:32,160 --> 00:09:35,120
mobile app

222
00:09:32,959 --> 00:09:38,319
or alternatively the configurator could

223
00:09:35,120 --> 00:09:39,920
be embedded into the wi-fi access point

224
00:09:38,320 --> 00:09:41,839
and proof of knowledge is carried out

225
00:09:39,920 --> 00:09:43,439
via divi helmet exchange

226
00:09:41,839 --> 00:09:46,880
and between the configurator and the

227
00:09:43,440 --> 00:09:50,160
supplicant and it uses the booster key

228
00:09:46,880 --> 00:09:51,920
of the supplicant and the configurator

229
00:09:50,160 --> 00:09:52,959
generates an ephemeral development key

230
00:09:51,920 --> 00:09:54,800
as well

231
00:09:52,959 --> 00:09:57,119
and the supplicant proves it knows the

232
00:09:54,800 --> 00:09:58,399
private key of the booster key pair

233
00:09:57,120 --> 00:09:59,920
and the configurator proves that it

234
00:09:58,399 --> 00:10:00,480
knows the public key to boost your key

235
00:09:59,920 --> 00:10:02,640
pair

236
00:10:00,480 --> 00:10:04,160
and then a secure step a secure channel

237
00:10:02,640 --> 00:10:05,920
is established

238
00:10:04,160 --> 00:10:07,760
and step three network information is

239
00:10:05,920 --> 00:10:09,760
securely exchanged

240
00:10:07,760 --> 00:10:11,360
and then step four the supplement

241
00:10:09,760 --> 00:10:14,319
attaches to the network

242
00:10:11,360 --> 00:10:15,839
so in summary the um the configurator

243
00:10:14,320 --> 00:10:16,560
and the supplicant establish a secure

244
00:10:15,839 --> 00:10:17,839
handshake

245
00:10:16,560 --> 00:10:19,279
where the configurator proves to the

246
00:10:17,839 --> 00:10:20,560
supplicants that um it knows the

247
00:10:19,279 --> 00:10:22,000
supplicants

248
00:10:20,560 --> 00:10:23,760
puts their public key the supplicant

249
00:10:22,000 --> 00:10:25,519
proves it knows a private key

250
00:10:23,760 --> 00:10:27,760
once that secure channel is established

251
00:10:25,519 --> 00:10:29,360
the configurator imprints the supplement

252
00:10:27,760 --> 00:10:30,720
with network information

253
00:10:29,360 --> 00:10:34,240
and network credentials and then the

254
00:10:30,720 --> 00:10:34,240
subsequent will attach to the network

255
00:10:37,519 --> 00:10:41,279
and so what we want to do for wired for

256
00:10:39,600 --> 00:10:44,240
wired lan is the

257
00:10:41,279 --> 00:10:45,920
um the public key of the booster key is

258
00:10:44,240 --> 00:10:46,560
scanned into the network are known by

259
00:10:45,920 --> 00:10:49,760
your

260
00:10:46,560 --> 00:10:51,760
aaa or your epls server the device wants

261
00:10:49,760 --> 00:10:54,000
the network to prove that it knows

262
00:10:51,760 --> 00:10:56,240
the bootstrap public key before the

263
00:10:54,000 --> 00:10:58,720
device will connect to the network

264
00:10:56,240 --> 00:11:00,000
and this can be quite easily achieved by

265
00:10:58,720 --> 00:11:01,279
making a simple extension to the

266
00:11:00,000 --> 00:11:02,959
theater's handshake

267
00:11:01,279 --> 00:11:04,880
and what we do with the teal's handshake

268
00:11:02,959 --> 00:11:07,279
is we exchanged two sets of tiffy helm

269
00:11:04,880 --> 00:11:09,360
and keys and the client loan server law

270
00:11:07,279 --> 00:11:10,959
and so the first key share is just the

271
00:11:09,360 --> 00:11:13,120
standard key share for

272
00:11:10,959 --> 00:11:14,719
in tls 1.3 if you haven't for both sides

273
00:11:13,120 --> 00:11:15,519
generated femoral keepers and exchange

274
00:11:14,720 --> 00:11:17,839
them

275
00:11:15,519 --> 00:11:19,040
and in step two we add a bootstrap

276
00:11:17,839 --> 00:11:21,040
extension

277
00:11:19,040 --> 00:11:22,240
where the client sends a hash of its

278
00:11:21,040 --> 00:11:24,079
public key

279
00:11:22,240 --> 00:11:26,160
to the server and the server uses that

280
00:11:24,079 --> 00:11:28,719
hash the public key to look up the raw

281
00:11:26,160 --> 00:11:31,040
public key and the server generates it's

282
00:11:28,720 --> 00:11:33,040
a thermal key pair and then

283
00:11:31,040 --> 00:11:35,199
the two sides can complete that um

284
00:11:33,040 --> 00:11:37,360
second divi helmet exchange

285
00:11:35,200 --> 00:11:39,279
um so both different helmet calculations

286
00:11:37,360 --> 00:11:41,040
are injected into the key schedule

287
00:11:39,279 --> 00:11:42,959
using the mechanisms outlined in the

288
00:11:41,040 --> 00:11:44,719
draft of reference there

289
00:11:42,959 --> 00:11:46,719
and there's also the alternative draft

290
00:11:44,720 --> 00:11:48,399
which is which is referenced in in our

291
00:11:46,720 --> 00:11:50,959
document the hybrid design

292
00:11:48,399 --> 00:11:52,800
draft so there's multiple ways of um

293
00:11:50,959 --> 00:11:54,000
figuring out how to inject that second

294
00:11:52,800 --> 00:11:56,800
piece of information into the key

295
00:11:54,000 --> 00:11:57,360
schedule but what we've implemented at

296
00:11:56,800 --> 00:12:02,079
the moment

297
00:11:57,360 --> 00:12:02,079
is the the highland one

298
00:12:03,839 --> 00:12:07,760
so these these are extracts from the

299
00:12:06,480 --> 00:12:10,320
draft

300
00:12:07,760 --> 00:12:11,439
it shows you the shape of the bootstrap

301
00:12:10,320 --> 00:12:13,279
key extension

302
00:12:11,440 --> 00:12:15,040
and that extension can be sent to either

303
00:12:13,279 --> 00:12:18,000
a client law or server law

304
00:12:15,040 --> 00:12:19,680
in a client at all it's just a hashed

305
00:12:18,000 --> 00:12:21,360
reference a hashed reference to the

306
00:12:19,680 --> 00:12:22,800
public keys that allows the server to

307
00:12:21,360 --> 00:12:24,240
look up the public key

308
00:12:22,800 --> 00:12:25,680
unlike a standard key exchange you're

309
00:12:24,240 --> 00:12:27,440
not selling the full raw public key

310
00:12:25,680 --> 00:12:28,959
you're sending it

311
00:12:27,440 --> 00:12:30,800
a hash representation which allows the

312
00:12:28,959 --> 00:12:33,439
server to look up the public key

313
00:12:30,800 --> 00:12:34,560
and in the server law the server is

314
00:12:33,440 --> 00:12:38,639
exchanging their

315
00:12:34,560 --> 00:12:40,160
um ephemeral difficult key their second

316
00:12:38,639 --> 00:12:43,120
department if you haven't key alongside

317
00:12:40,160 --> 00:12:44,639
the standard key exchange

318
00:12:43,120 --> 00:12:46,560
um so you can see that illustrating the

319
00:12:44,639 --> 00:12:48,639
call from the bottom left uh the client

320
00:12:46,560 --> 00:12:50,239
sends um the bootstrap key and it's

321
00:12:48,639 --> 00:12:52,560
client load the server sends back

322
00:12:50,240 --> 00:12:54,320
it's a corresponding bootstrap ephemeral

323
00:12:52,560 --> 00:12:56,638
key in its server law

324
00:12:54,320 --> 00:12:57,920
in addition to the standard key shares

325
00:12:56,639 --> 00:12:59,760
and the

326
00:12:57,920 --> 00:13:01,599
the graphic on the right hand side shows

327
00:12:59,760 --> 00:13:03,600
you the

328
00:13:01,600 --> 00:13:05,440
mechanism taken from the holland draft

329
00:13:03,600 --> 00:13:09,839
for injecting

330
00:13:05,440 --> 00:13:12,959
a second input into the key schedule

331
00:13:09,839 --> 00:13:14,079
and the bsk input is just the secondary

332
00:13:12,959 --> 00:13:15,518
element

333
00:13:14,079 --> 00:13:16,719
that takes place and we're injecting it

334
00:13:15,519 --> 00:13:20,240
using the mechanism defined in that

335
00:13:16,720 --> 00:13:21,440
other draft

336
00:13:20,240 --> 00:13:23,440
so what this means for an operator

337
00:13:21,440 --> 00:13:24,880
perspective is everyone is happy

338
00:13:23,440 --> 00:13:27,920
if you have a device that you're trying

339
00:13:24,880 --> 00:13:29,680
to onboard the device has a

340
00:13:27,920 --> 00:13:31,519
an associated bootstrap key which could

341
00:13:29,680 --> 00:13:34,399
be embedded in the firmware dynamically

342
00:13:31,519 --> 00:13:35,279
generated on a label whatever and that

343
00:13:34,399 --> 00:13:38,399
qr code

344
00:13:35,279 --> 00:13:39,360
is um scanned into the network

345
00:13:38,399 --> 00:13:42,000
and regardless of whether you're

346
00:13:39,360 --> 00:13:45,279
connecting device via wired using dpp

347
00:13:42,000 --> 00:13:49,279
or via sorry by wireless using dpp

348
00:13:45,279 --> 00:13:50,880
rfi wired using this proposed tls

349
00:13:49,279 --> 00:13:51,920
extension inside an eep

350
00:13:50,880 --> 00:13:55,920
and we were able to securely

351
00:13:51,920 --> 00:13:55,920
authenticate the network

352
00:13:57,120 --> 00:14:00,880
um security considerations it leverages

353
00:13:59,360 --> 00:14:02,240
the tls handshake and there's no we're

354
00:14:00,880 --> 00:14:03,519
not defining any new esoteric

355
00:14:02,240 --> 00:14:05,199
cryptography

356
00:14:03,519 --> 00:14:06,720
all of the existing tls security proofs

357
00:14:05,199 --> 00:14:08,319
should still be applicable

358
00:14:06,720 --> 00:14:10,320
and the security proofs that will be

359
00:14:08,320 --> 00:14:12,000
defined under their touchdown in the

360
00:14:10,320 --> 00:14:13,360
highland draft but they're not fully

361
00:14:12,000 --> 00:14:14,880
fleshed out should handle the key

362
00:14:13,360 --> 00:14:16,560
schedule changes as well so we shouldn't

363
00:14:14,880 --> 00:14:18,320
have any work to do there

364
00:14:16,560 --> 00:14:19,680
um and in terms of bootstrap key

365
00:14:18,320 --> 00:14:21,360
security

366
00:14:19,680 --> 00:14:22,959
tls proof of concept has exactly the

367
00:14:21,360 --> 00:14:23,839
same security stance as the wi-fi

368
00:14:22,959 --> 00:14:26,000
alliance tpp

369
00:14:23,839 --> 00:14:27,839
with respect to those bootstrap keys so

370
00:14:26,000 --> 00:14:30,160
for dpp

371
00:14:27,839 --> 00:14:31,839
if you know the bootstrap public key you

372
00:14:30,160 --> 00:14:34,160
can claim the device

373
00:14:31,839 --> 00:14:35,600
and exactly the same is applicable here

374
00:14:34,160 --> 00:14:37,279
for tds proof of knowledge when you're

375
00:14:35,600 --> 00:14:38,639
doing unwired if you know the booster

376
00:14:37,279 --> 00:14:39,360
public key then the network can claim

377
00:14:38,639 --> 00:14:40,880
the device

378
00:14:39,360 --> 00:14:44,320
so we're not making any changes to the

379
00:14:40,880 --> 00:14:47,040
overall security stance there

380
00:14:44,320 --> 00:14:48,880
we do have working code um we will just

381
00:14:47,040 --> 00:14:51,839
work in tls.code that's been

382
00:14:48,880 --> 00:14:52,639
up on um it's up on github for quite a

383
00:14:51,839 --> 00:14:56,480
while now for

384
00:14:52,639 --> 00:14:59,360
since before the last itf um it's

385
00:14:56,480 --> 00:15:00,000
built using it's built on top of the

386
00:14:59,360 --> 00:15:02,320
standard

387
00:15:00,000 --> 00:15:03,680
goal line mid stack that would that the

388
00:15:02,320 --> 00:15:07,040
guys in the tls working group have done

389
00:15:03,680 --> 00:15:07,040
loads of proof concepts on top of

390
00:15:07,199 --> 00:15:10,399
um and this last slide discussion and

391
00:15:09,519 --> 00:15:12,800
next steps

392
00:15:10,399 --> 00:15:14,880
um there's three general work areas here

393
00:15:12,800 --> 00:15:15,920
one is defining the tls extensions to

394
00:15:14,880 --> 00:15:17,279
transport that booster

395
00:15:15,920 --> 00:15:19,360
key and that's a pretty small trivial

396
00:15:17,279 --> 00:15:21,519
piece of work second is

397
00:15:19,360 --> 00:15:23,040
the enhancements to the key schedule to

398
00:15:21,519 --> 00:15:24,639
inject that second if we have an

399
00:15:23,040 --> 00:15:26,160
exchange into the key schedule

400
00:15:24,639 --> 00:15:27,920
and we're hoping to piggyback on one of

401
00:15:26,160 --> 00:15:29,199
the existing drafts either holland one

402
00:15:27,920 --> 00:15:32,319
or the hybrid

403
00:15:29,199 --> 00:15:34,160
the hybrid key exchange one um

404
00:15:32,320 --> 00:15:37,839
there will be some per tip extensions

405
00:15:34,160 --> 00:15:39,680
defined and required to leverage how

406
00:15:37,839 --> 00:15:41,279
to define how to leverage that utilis

407
00:15:39,680 --> 00:15:43,920
proof of knowledge handshake

408
00:15:41,279 --> 00:15:45,600
that work is still that work still needs

409
00:15:43,920 --> 00:15:47,439
to be completed

410
00:15:45,600 --> 00:15:48,880
um and with some general discussion

411
00:15:47,440 --> 00:15:51,120
questions here well obviously the first

412
00:15:48,880 --> 00:15:54,399
one is to run a general interest in this

413
00:15:51,120 --> 00:15:57,040
and and the other question is

414
00:15:54,399 --> 00:15:58,320
where does this work fit and we could

415
00:15:57,040 --> 00:16:00,160
cover this in one document that it

416
00:15:58,320 --> 00:16:01,839
currently is or do we split it do we

417
00:16:00,160 --> 00:16:03,199
need to split it into two or three

418
00:16:01,839 --> 00:16:05,040
like for example we could have a short

419
00:16:03,199 --> 00:16:07,519
draft to define the tls

420
00:16:05,040 --> 00:16:09,120
extensions we and then we could have an

421
00:16:07,519 --> 00:16:10,000
inu draft of reference to those two

422
00:16:09,120 --> 00:16:13,519
extensions

423
00:16:10,000 --> 00:16:15,279
and the highland key schedule changes

424
00:16:13,519 --> 00:16:17,199
um and where does this work where does

425
00:16:15,279 --> 00:16:19,040
this work like did we start an emu move

426
00:16:17,199 --> 00:16:20,959
to tls says do we have to split some of

427
00:16:19,040 --> 00:16:22,079
the work between emu and tls

428
00:16:20,959 --> 00:16:23,680
and those are the kind of things we'd

429
00:16:22,079 --> 00:16:25,680
like to discuss and that is it that's

430
00:16:23,680 --> 00:16:29,279
the end of the presentations it's um

431
00:16:25,680 --> 00:16:29,758
pretty short and but we feel it's a it's

432
00:16:29,279 --> 00:16:33,120
a

433
00:16:29,759 --> 00:16:35,680
pretty elegant solution um for security

434
00:16:33,120 --> 00:16:37,920
bootstrapping a device onto a wired or

435
00:16:35,680 --> 00:16:42,479
wi-fi network

436
00:16:37,920 --> 00:16:42,479
and the the there is working code

437
00:16:43,440 --> 00:16:51,839
okay that's it

438
00:16:53,600 --> 00:16:57,279
i don't see anybody in the queue but i

439
00:16:56,079 --> 00:17:00,719
guess i'll

440
00:16:57,279 --> 00:17:04,160
you know ask a couple questions so

441
00:17:00,720 --> 00:17:07,839
we uh this is using both um

442
00:17:04,160 --> 00:17:11,199
a new extension and uh

443
00:17:07,839 --> 00:17:13,839
the hoiland uh draft and so

444
00:17:11,199 --> 00:17:16,839
those are two pieces that need to be

445
00:17:13,839 --> 00:17:20,399
kind of reviewed and worked out

446
00:17:16,839 --> 00:17:22,720
um i think right now i don't think

447
00:17:20,400 --> 00:17:23,679
if i remember correctly hoiland isn't a

448
00:17:22,720 --> 00:17:27,760
working group

449
00:17:23,679 --> 00:17:31,200
item yet that's correct

450
00:17:27,760 --> 00:17:33,760
that's correct it's not sure so

451
00:17:31,200 --> 00:17:34,559
yeah and i think there is interest in it

452
00:17:33,760 --> 00:17:36,080
um

453
00:17:34,559 --> 00:17:37,840
but the word group's kind of been

454
00:17:36,080 --> 00:17:40,879
working through some other items

455
00:17:37,840 --> 00:17:44,840
and that hasn't come up again yet

456
00:17:40,880 --> 00:17:48,160
uh so that's probably something we want

457
00:17:44,840 --> 00:17:49,360
to i'll probably talk with jonathan and

458
00:17:48,160 --> 00:17:53,440
other folks and see

459
00:17:49,360 --> 00:17:55,678
what their plan is with that draft um

460
00:17:53,440 --> 00:17:57,360
and as far as the extension i think you

461
00:17:55,679 --> 00:17:58,960
know certainly

462
00:17:57,360 --> 00:18:00,479
i don't know that the extension needs to

463
00:17:58,960 --> 00:18:04,720
be done in tls

464
00:18:00,480 --> 00:18:08,080
um uh especially since like

465
00:18:04,720 --> 00:18:09,919
you're you know you're going to be using

466
00:18:08,080 --> 00:18:11,360
trying we'll we'll try if if you're

467
00:18:09,919 --> 00:18:13,280
using the hoiling draft and you're using

468
00:18:11,360 --> 00:18:14,399
sort of a standard way to kind of mix

469
00:18:13,280 --> 00:18:16,080
things in

470
00:18:14,400 --> 00:18:17,679
you know that that would be reviewed by

471
00:18:16,080 --> 00:18:19,439
the tls group which would probably be

472
00:18:17,679 --> 00:18:21,760
the most concerning part

473
00:18:19,440 --> 00:18:21,760
um

474
00:18:22,640 --> 00:18:28,960
but uh yeah i don't necessarily have

475
00:18:25,760 --> 00:18:30,720
a too much of an opinion do you see use

476
00:18:28,960 --> 00:18:35,200
of this

477
00:18:30,720 --> 00:18:35,200
outside of dpp and

478
00:18:37,360 --> 00:18:42,159
um well

479
00:18:40,559 --> 00:18:43,918
these cases that we're currently

480
00:18:42,160 --> 00:18:45,039
targeting um

481
00:18:43,919 --> 00:18:47,440
the use case that we're currently

482
00:18:45,039 --> 00:18:48,640
targeting just putting on my cisco hat

483
00:18:47,440 --> 00:18:51,760
at the moment we're certainly

484
00:18:48,640 --> 00:18:53,760
talking to um to operators

485
00:18:51,760 --> 00:18:55,200
and this is a problem that they need to

486
00:18:53,760 --> 00:18:58,720
solve and they have a serious problem

487
00:18:55,200 --> 00:18:58,720
with security onboarding um

488
00:18:59,360 --> 00:19:06,159
sensors and devices onto wired networks

489
00:19:03,280 --> 00:19:07,918
um i see elliot is in the queue waiting

490
00:19:06,160 --> 00:19:09,760
to talk so i'll actually defer to

491
00:19:07,919 --> 00:19:11,520
audience to see do we see use of this

492
00:19:09,760 --> 00:19:13,919
outside of eep

493
00:19:11,520 --> 00:19:13,918
um

494
00:19:14,960 --> 00:19:19,520
hi um good good morning good afternoon

495
00:19:18,559 --> 00:19:22,160
good evening

496
00:19:19,520 --> 00:19:24,080
um so clearly there's a there's a pretty

497
00:19:22,160 --> 00:19:26,000
clear use case for eat

498
00:19:24,080 --> 00:19:27,120
but i wouldn't exclude the idea that it

499
00:19:26,000 --> 00:19:31,200
might be used

500
00:19:27,120 --> 00:19:33,039
um elsewhere at a higher layer

501
00:19:31,200 --> 00:19:34,400
right but that doesn't mean the work

502
00:19:33,039 --> 00:19:36,559
couldn't be done in emu

503
00:19:34,400 --> 00:19:37,919
it just means that we shouldn't write

504
00:19:36,559 --> 00:19:39,200
the code we shouldn't write any

505
00:19:37,919 --> 00:19:41,200
extensions

506
00:19:39,200 --> 00:19:42,559
that you know that would exclude the use

507
00:19:41,200 --> 00:19:44,240
of email

508
00:19:42,559 --> 00:19:46,720
there are of things other than email

509
00:19:44,240 --> 00:19:46,720
excuse me

510
00:19:48,559 --> 00:19:53,760
that could the influence

511
00:19:52,000 --> 00:19:55,360
of the draft as well and how many drafts

512
00:19:53,760 --> 00:19:58,799
we write um

513
00:19:55,360 --> 00:20:01,918
and it may make sense to have

514
00:19:58,799 --> 00:20:03,200
the tls extensions in a short separate

515
00:20:01,919 --> 00:20:06,000
document so that is not

516
00:20:03,200 --> 00:20:08,240
like bound to an emu draft if that makes

517
00:20:06,000 --> 00:20:08,240
sense

518
00:20:08,320 --> 00:20:14,799
uh so there's uh ben in the queue

519
00:20:11,919 --> 00:20:15,919
uh go ahead ben can dan get in the queue

520
00:20:14,799 --> 00:20:20,000
too

521
00:20:15,919 --> 00:20:23,280
uh sure i'll join

522
00:20:20,000 --> 00:20:25,200
now you're in the queue behind ben

523
00:20:23,280 --> 00:20:26,320
okay i mean if you wanted to jump ahead

524
00:20:25,200 --> 00:20:29,600
i don't know what you were

525
00:20:26,320 --> 00:20:32,879
talking about no no go ahead

526
00:20:29,600 --> 00:20:35,280
but i guess my question

527
00:20:32,880 --> 00:20:36,159
or comment i had started to say in the

528
00:20:35,280 --> 00:20:39,280
jabber room but

529
00:20:36,159 --> 00:20:41,679
it seems like we're using a standard

530
00:20:39,280 --> 00:20:43,200
private key pair for the bootstrapping

531
00:20:41,679 --> 00:20:44,880
keys here

532
00:20:43,200 --> 00:20:46,080
and i was wondering if there was a way

533
00:20:44,880 --> 00:20:49,120
that we could be able to use like

534
00:20:46,080 --> 00:20:52,799
threshold crypto instead

535
00:20:49,120 --> 00:20:54,799
to fulfill the same goals without

536
00:20:52,799 --> 00:20:55,840
sort of relying on this weird mechanism

537
00:20:54,799 --> 00:20:59,520
where

538
00:20:55,840 --> 00:21:01,439
you are not treating the public key as

539
00:20:59,520 --> 00:21:02,639
or so you're you're treating the public

540
00:21:01,440 --> 00:21:06,159
key as something that

541
00:21:02,640 --> 00:21:08,080
is not um widely distributed

542
00:21:06,159 --> 00:21:10,320
like it's supposed to be secret as well

543
00:21:08,080 --> 00:21:12,639
in some sense

544
00:21:10,320 --> 00:21:14,639
and i don't have a great sense for

545
00:21:12,640 --> 00:21:18,159
whether threshold of crypto would

546
00:21:14,640 --> 00:21:18,159
get around that in any way

547
00:21:18,400 --> 00:21:22,640
so if i can answer well i i just see

548
00:21:20,960 --> 00:21:24,720
daniel's in the queue as well but

549
00:21:22,640 --> 00:21:25,919
one answer i have is we haven't

550
00:21:24,720 --> 00:21:27,520
considered threshold crisp

551
00:21:25,919 --> 00:21:29,200
crypto but we had been looking at

552
00:21:27,520 --> 00:21:31,360
complete reuse of the dpp

553
00:21:29,200 --> 00:21:32,880
bootstrap key so we want on the

554
00:21:31,360 --> 00:21:36,799
bootstrap key

555
00:21:32,880 --> 00:21:38,240
and dpp is is a currently defined and

556
00:21:36,799 --> 00:21:39,918
published wi-fi line standard and we

557
00:21:38,240 --> 00:21:41,200
want to reuse that exactly as is as the

558
00:21:39,919 --> 00:21:43,039
bootstrap key

559
00:21:41,200 --> 00:21:44,240
and now i don't know whether dpp is

560
00:21:43,039 --> 00:21:45,280
uninterested moving to some kind of

561
00:21:44,240 --> 00:21:48,480
threshold of crypto

562
00:21:45,280 --> 00:21:48,480
i'll refer to that on that

563
00:21:51,760 --> 00:21:57,840
and go ahead okay thank you

564
00:21:54,880 --> 00:21:59,600
so i i'm not sure whether threshold

565
00:21:57,840 --> 00:22:03,678
crypto would work

566
00:21:59,600 --> 00:22:07,840
uh but that said you know

567
00:22:03,679 --> 00:22:10,240
that's an interesting comment uh

568
00:22:07,840 --> 00:22:11,600
what i wanted to say was that you know

569
00:22:10,240 --> 00:22:15,440
there's a

570
00:22:11,600 --> 00:22:19,520
a a discussion of uh using the

571
00:22:15,440 --> 00:22:23,120
uh hoilo work in tls to do

572
00:22:19,520 --> 00:22:25,039
the extended key schedule and

573
00:22:23,120 --> 00:22:27,120
you know even if that isn't adopted

574
00:22:25,039 --> 00:22:30,320
something's going to get adopted because

575
00:22:27,120 --> 00:22:33,600
tls needs to deal with the

576
00:22:30,320 --> 00:22:34,000
post-quantum crypto issue and so they're

577
00:22:33,600 --> 00:22:35,840
going to

578
00:22:34,000 --> 00:22:37,120
they're going to come up with a way to

579
00:22:35,840 --> 00:22:41,199
inject

580
00:22:37,120 --> 00:22:44,080
random goo into the tls key schedule and

581
00:22:41,200 --> 00:22:45,200
we can just use whatever that that

582
00:22:44,080 --> 00:22:47,600
technique is

583
00:22:45,200 --> 00:22:48,799
if it's not the the technique that that

584
00:22:47,600 --> 00:22:50,639
we're specifying now

585
00:22:48,799 --> 00:22:51,840
if the tls working group decides

586
00:22:50,640 --> 00:22:56,000
something else

587
00:22:51,840 --> 00:22:58,399
then we'll just use that

588
00:22:56,000 --> 00:22:59,919
definitely yeah i considered saying

589
00:22:58,400 --> 00:23:01,679
something similar as well but

590
00:22:59,919 --> 00:23:03,039
uh i think we're all on the same page in

591
00:23:01,679 --> 00:23:06,240
that aspect and

592
00:23:03,039 --> 00:23:08,000
and thanks to both of you for sort of

593
00:23:06,240 --> 00:23:10,880
clarifying the the threshold of crypto

594
00:23:08,000 --> 00:23:14,799
and then wanting to reuse the dppkey

595
00:23:10,880 --> 00:23:14,799
point i had missed that part so thanks

596
00:23:15,520 --> 00:23:26,320
eliot are you still in the queue

597
00:23:23,360 --> 00:23:28,399
not anymore uh so there was uh just one

598
00:23:26,320 --> 00:23:31,280
comment from era mcdonald that

599
00:23:28,400 --> 00:23:31,840
uh i guess i should say at the mic uh

600
00:23:31,280 --> 00:23:35,039
she's

601
00:23:31,840 --> 00:23:36,879
uh suggests uh keeping tls extension in

602
00:23:35,039 --> 00:23:37,919
the tls working group to ensure review

603
00:23:36,880 --> 00:23:41,600
by

604
00:23:37,919 --> 00:23:44,640
smes i feel the same i think uh

605
00:23:41,600 --> 00:23:46,799
our job emu will be much simpler

606
00:23:44,640 --> 00:23:47,919
once this jonathan's draft and the

607
00:23:46,799 --> 00:23:51,200
extension is

608
00:23:47,919 --> 00:23:51,679
adopted by tls then the emu draft would

609
00:23:51,200 --> 00:23:53,679
be

610
00:23:51,679 --> 00:23:55,200
very straightforward and i don't see any

611
00:23:53,679 --> 00:23:58,080
issues with

612
00:23:55,200 --> 00:23:58,080
progressing this

613
00:24:01,600 --> 00:24:05,199
okay and just for reference paul stood

614
00:24:03,840 --> 00:24:07,840
into the chat as well

615
00:24:05,200 --> 00:24:08,880
the um other draft that we've referenced

616
00:24:07,840 --> 00:24:11,918
as the alternative

617
00:24:08,880 --> 00:24:13,919
schedule um import

618
00:24:11,919 --> 00:24:16,320
and it's the the hybrid design one that

619
00:24:13,919 --> 00:24:18,480
has been a draft adopted by tls

620
00:24:16,320 --> 00:24:19,760
so we looked at both we implemented what

621
00:24:18,480 --> 00:24:21,200
looked like the simplest and most

622
00:24:19,760 --> 00:24:24,480
concrete thing at the time six months

623
00:24:21,200 --> 00:24:24,480
ago which was the highland draft

624
00:24:26,400 --> 00:24:30,400
okay um i think um you know it would be

625
00:24:29,520 --> 00:24:33,360
good to

626
00:24:30,400 --> 00:24:34,240
i think it would help your case in tls

627
00:24:33,360 --> 00:24:35,678
um

628
00:24:34,240 --> 00:24:37,679
i don't know how much interest there

629
00:24:35,679 --> 00:24:39,039
will be in in there for this particular

630
00:24:37,679 --> 00:24:42,080
thing we can certainly

631
00:24:39,039 --> 00:24:43,600
check that out on its own but

632
00:24:42,080 --> 00:24:45,439
if this is something that's of interest

633
00:24:43,600 --> 00:24:48,399
within you know the

634
00:24:45,440 --> 00:24:49,360
emu space i think that kind of helps the

635
00:24:48,400 --> 00:24:52,320
case of of

636
00:24:49,360 --> 00:24:52,639
working on an extension either in in tls

637
00:24:52,320 --> 00:25:00,480
or

638
00:24:52,640 --> 00:25:03,840
or in this uh working group

639
00:25:00,480 --> 00:25:04,880
so there's a question and uh there's a

640
00:25:03,840 --> 00:25:07,439
question in

641
00:25:04,880 --> 00:25:08,240
jabber i don't know if dan or one you

642
00:25:07,440 --> 00:25:10,960
want to answer

643
00:25:08,240 --> 00:25:12,720
john frederick uh asks will the server

644
00:25:10,960 --> 00:25:14,720
still authenticate itself against the

645
00:25:12,720 --> 00:25:16,640
client using a certificate

646
00:25:14,720 --> 00:25:18,559
or is the public key of the client the

647
00:25:16,640 --> 00:25:21,200
only item that the server uses to

648
00:25:18,559 --> 00:25:21,200
authenticate

649
00:25:22,799 --> 00:25:26,080
as per this draft the only item that the

650
00:25:24,960 --> 00:25:29,039
server will use authenticate is

651
00:25:26,080 --> 00:25:31,678
knowledge of the public key so if any

652
00:25:29,039 --> 00:25:33,200
rogue operator has gains knowledge of

653
00:25:31,679 --> 00:25:35,360
that booster public key then

654
00:25:33,200 --> 00:25:37,679
that operator can claim the device on

655
00:25:35,360 --> 00:25:39,840
their network

656
00:25:37,679 --> 00:25:42,000
now there is if you read the full dpp

657
00:25:39,840 --> 00:25:44,480
draft that the wi-fi lines tpp spec

658
00:25:42,000 --> 00:25:45,360
it does allow far mutual authentication

659
00:25:44,480 --> 00:25:47,679
where you can print

660
00:25:45,360 --> 00:25:48,719
credentials on both sides and but this

661
00:25:47,679 --> 00:25:50,159
draft only does

662
00:25:48,720 --> 00:25:53,279
this draft here the tls proof of

663
00:25:50,159 --> 00:25:53,279
knowledge only does it one way

664
00:25:55,279 --> 00:26:10,480
uh thanks hopefully john frederick this

665
00:25:58,159 --> 00:26:14,159
answers your question

666
00:26:10,480 --> 00:26:16,400
hi hi this is hannes uh i was wondering

667
00:26:14,159 --> 00:26:18,159
whether you couldn't just reuse the raw

668
00:26:16,400 --> 00:26:24,480
public key mechanism

669
00:26:18,159 --> 00:26:27,120
out of the box in that case

670
00:26:24,480 --> 00:26:28,960
uh also okay so the raw public key the

671
00:26:27,120 --> 00:26:29,360
raw public key remembers the client's

672
00:26:28,960 --> 00:26:31,520
key

673
00:26:29,360 --> 00:26:32,879
and there's currently no tls mechanism

674
00:26:31,520 --> 00:26:35,760
for a server to prove it knows the

675
00:26:32,880 --> 00:26:35,760
client's public key

676
00:26:36,400 --> 00:26:40,960
so if raw public key the if you use a

677
00:26:39,360 --> 00:26:43,439
raw public key in tls the client is

678
00:26:40,960 --> 00:26:47,679
going to send its full raw public key

679
00:26:43,440 --> 00:26:47,679
and to the server so it won't work

680
00:26:51,279 --> 00:26:56,640
yeah i will have to read the trap but it

681
00:26:54,000 --> 00:26:58,799
sounds interesting here

682
00:26:56,640 --> 00:27:01,520
okay and you should read the wi-fi lines

683
00:26:58,799 --> 00:27:07,200
tpp spec as well because that's

684
00:27:01,520 --> 00:27:09,840
that's part of the genesis id

685
00:27:07,200 --> 00:27:10,880
okay so i think what we would want uh

686
00:27:09,840 --> 00:27:14,320
folks to do is

687
00:27:10,880 --> 00:27:16,480
is read the draft so maybe uh posting

688
00:27:14,320 --> 00:27:17,520
it to the list and asking for some

689
00:27:16,480 --> 00:27:22,240
review

690
00:27:17,520 --> 00:27:23,520
would be good um so that we can see

691
00:27:22,240 --> 00:27:25,679
what the interest is in the working

692
00:27:23,520 --> 00:27:25,679
group

693
00:27:26,799 --> 00:27:33,200
i guess this is a question to you joe

694
00:27:30,000 --> 00:27:34,799
i don't know if this should be posted to

695
00:27:33,200 --> 00:27:37,919
the tls list or

696
00:27:34,799 --> 00:27:39,039
if like this can be presented in the tls

697
00:27:37,919 --> 00:27:41,120
working group

698
00:27:39,039 --> 00:27:42,960
at the next ietf that's something you

699
00:27:41,120 --> 00:27:44,959
can consider

700
00:27:42,960 --> 00:27:47,039
yeah i would definitely think should

701
00:27:44,960 --> 00:27:48,799
post something to the list and and see

702
00:27:47,039 --> 00:27:52,000
if we can get some discussion

703
00:27:48,799 --> 00:27:53,840
on it um you know irregardless of

704
00:27:52,000 --> 00:27:56,399
you know when we would present it in the

705
00:27:53,840 --> 00:27:56,399
working group

706
00:27:57,840 --> 00:28:04,480
dan yeah i i guess you you i guess you

707
00:28:02,720 --> 00:28:06,320
just touched on that i i just wanted to

708
00:28:04,480 --> 00:28:07,919
say that it would be nice if we could

709
00:28:06,320 --> 00:28:09,520
get a feeling from the group whether

710
00:28:07,919 --> 00:28:12,799
this is something that

711
00:28:09,520 --> 00:28:17,440
the group wants to address you know if

712
00:28:12,799 --> 00:28:17,440
can we produce it yeah we can uh

713
00:28:20,480 --> 00:28:24,720
we we can do uh a show of hands right

714
00:28:23,679 --> 00:28:27,200
now to see what the

715
00:28:24,720 --> 00:28:28,240
interest is um so with the interest

716
00:28:27,200 --> 00:28:33,919
would be

717
00:28:28,240 --> 00:28:33,919
uh or the question would be do folks uh

718
00:28:34,640 --> 00:28:37,120
is this

719
00:28:37,679 --> 00:28:46,640
this draft or this this um

720
00:28:41,279 --> 00:28:46,640
topic something emu should work on

721
00:28:46,960 --> 00:28:50,399
like a the closest alternative that emu

722
00:28:49,120 --> 00:28:53,439
is currently working on is

723
00:28:50,399 --> 00:28:56,479
is noob noob um

724
00:28:53,440 --> 00:28:56,960
that this this mechanism is currently

725
00:28:56,480 --> 00:28:59,840
defined

726
00:28:56,960 --> 00:28:59,840
only goes in one direction

727
00:29:00,720 --> 00:29:04,000
to boost your key provisioning only goes

728
00:29:02,399 --> 00:29:07,520
in one direction only but the

729
00:29:04,000 --> 00:29:10,559
i think the closest analogy is noob

730
00:29:07,520 --> 00:29:12,158
yeah sure um so i think that you know i

731
00:29:10,559 --> 00:29:14,879
think the question though is is

732
00:29:12,159 --> 00:29:15,840
we we have noob is is this um is this a

733
00:29:14,880 --> 00:29:18,559
mechanism that

734
00:29:15,840 --> 00:29:20,399
people think would you know would be a

735
00:29:18,559 --> 00:29:22,559
good topic for emo to work on

736
00:29:20,399 --> 00:29:24,959
this isn't like uh this is just to get

737
00:29:22,559 --> 00:29:28,399
an idea of

738
00:29:24,960 --> 00:29:30,320
what people feel at this point in the

739
00:29:28,399 --> 00:29:32,959
room

740
00:29:30,320 --> 00:29:35,279
or did i misunderstand your quest pure

741
00:29:32,960 --> 00:29:35,279
comment

742
00:29:37,120 --> 00:29:41,360
so i can answer for noob i don't see it

743
00:29:40,240 --> 00:29:44,880
competing so i

744
00:29:41,360 --> 00:29:45,199
i i don't see any reason why we can't

745
00:29:44,880 --> 00:29:48,399
have

746
00:29:45,200 --> 00:29:50,480
both because as one said this doesn't do

747
00:29:48,399 --> 00:29:54,399
server authentication

748
00:29:50,480 --> 00:29:56,000
you can't do like oob in the other

749
00:29:54,399 --> 00:29:58,479
direction where the key is somehow

750
00:29:56,000 --> 00:30:01,760
printed or shown on the server and then

751
00:29:58,480 --> 00:30:04,880
sent to the peer so i don't see them

752
00:30:01,760 --> 00:30:08,399
competing i think there is

753
00:30:04,880 --> 00:30:11,200
interest but maybe let's let joe ask the

754
00:30:08,399 --> 00:30:11,199
question to the

755
00:30:12,000 --> 00:30:17,360
okay using the show of hands tool i'm

756
00:30:14,320 --> 00:30:17,360
going to start the

757
00:30:20,240 --> 00:30:23,919
thing here and so if you uh think this

758
00:30:22,640 --> 00:30:26,080
is a topic the

759
00:30:23,919 --> 00:30:28,000
group should work on so there's a a

760
00:30:26,080 --> 00:30:28,799
raise your hand and there's a do not

761
00:30:28,000 --> 00:30:32,720
raise your hand

762
00:30:28,799 --> 00:30:34,879
and then there's you can you know not

763
00:30:32,720 --> 00:30:38,240
do anything so we'll let it go for for a

764
00:30:34,880 --> 00:30:38,240
little bit um

765
00:30:39,919 --> 00:30:44,720
you seem to have ended it go i sent i

766
00:30:42,720 --> 00:30:47,360
sorry i must have ended it i clicked the

767
00:30:44,720 --> 00:30:47,360
wrong button

768
00:30:49,200 --> 00:31:05,840
i started it again

769
00:31:13,600 --> 00:31:20,799
all right i am going to stop it

770
00:31:16,840 --> 00:31:24,000
now okay so it seems like there is

771
00:31:20,799 --> 00:31:26,399
a fair amount of if is there anybody who

772
00:31:24,000 --> 00:31:28,000
you know did not raise their hand who

773
00:31:26,399 --> 00:31:30,479
has an objection to this

774
00:31:28,000 --> 00:31:30,480
work or

775
00:31:31,600 --> 00:31:34,639
who wants to come to the mic

776
00:31:37,919 --> 00:31:41,120
okay so so there is some interest so i

777
00:31:39,760 --> 00:31:42,720
think that that's uh

778
00:31:41,120 --> 00:31:44,559
promising i mean i think it's good that

779
00:31:42,720 --> 00:31:46,880
it's you know kind of

780
00:31:44,559 --> 00:31:48,960
bridging the gap between what dpp does

781
00:31:46,880 --> 00:31:50,399
and what can be done on wired so it

782
00:31:48,960 --> 00:31:52,880
definitely seems to me like there could

783
00:31:50,399 --> 00:31:54,399
be place for it so

784
00:31:52,880 --> 00:31:55,760
uh we we need to have more discussion on

785
00:31:54,399 --> 00:31:57,360
the list but i think we need to move on

786
00:31:55,760 --> 00:32:02,080
to the next presentation

787
00:31:57,360 --> 00:32:02,080
is my bling on

788
00:32:02,159 --> 00:32:09,200
i can run the slides if you'd like

789
00:32:06,000 --> 00:32:11,919
smiling if you're available

790
00:32:09,200 --> 00:32:11,919
but i saw

791
00:32:12,840 --> 00:32:15,840
hmm

792
00:32:18,240 --> 00:32:22,320
i thought i saw my wing on the call

793
00:32:23,360 --> 00:32:30,799
hello cheers hello

794
00:32:27,360 --> 00:32:36,479
hello just okay you help me to create

795
00:32:30,799 --> 00:32:36,480
a pointer from a computer

796
00:32:38,399 --> 00:32:43,840
here our

797
00:32:44,640 --> 00:32:48,559
yes thank you very much

798
00:32:50,240 --> 00:32:57,039
okay hello everyone i'm mei lincoln

799
00:32:53,919 --> 00:32:57,679
uh this is my first print presentation

800
00:32:57,039 --> 00:33:01,919
on the

801
00:32:57,679 --> 00:33:04,960
emu world group so my draft was

802
00:33:01,919 --> 00:33:05,760
first submitted in may this year and i

803
00:33:04,960 --> 00:33:09,440
have sent

804
00:33:05,760 --> 00:33:12,640
emails in the email list for my uh

805
00:33:09,440 --> 00:33:15,840
draft in this draft

806
00:33:12,640 --> 00:33:18,880
we propose a merced of using

807
00:33:15,840 --> 00:33:22,320
identity as raw fabric key in

808
00:33:18,880 --> 00:33:26,159
e if yes the curry idea

809
00:33:22,320 --> 00:33:26,559
is that we use identity-based signatures

810
00:33:26,159 --> 00:33:30,159
for

811
00:33:26,559 --> 00:33:33,760
authentication instead of just relying

812
00:33:30,159 --> 00:33:33,760
on ca certificates

813
00:33:37,600 --> 00:33:42,959
before we start the whole content

814
00:33:40,320 --> 00:33:46,240
introduction of my draft

815
00:33:42,960 --> 00:33:48,399
it's really necessary we have a look on

816
00:33:46,240 --> 00:33:51,760
background

817
00:33:48,399 --> 00:33:54,799
pki based 0 acts

818
00:33:51,760 --> 00:33:58,000
certificates are really now used in

819
00:33:54,799 --> 00:33:59,120
fps but still some problems with

820
00:33:58,000 --> 00:34:02,000
traditional

821
00:33:59,120 --> 00:34:03,120
certificates such as management cost

822
00:34:02,000 --> 00:34:06,880
lodge

823
00:34:03,120 --> 00:34:11,520
certificate chains and intermediate

824
00:34:06,880 --> 00:34:15,119
certificate is not so friendly to the

825
00:34:11,520 --> 00:34:18,399
constrained environment devices such as

826
00:34:15,119 --> 00:34:21,440
iot devices especially for

827
00:34:18,399 --> 00:34:24,719
weak computing power devices

828
00:34:21,440 --> 00:34:28,240
so i think there are two solutions

829
00:34:24,719 --> 00:34:32,399
one is to simplify the certificate

830
00:34:28,239 --> 00:34:35,520
and intermediate validation process

831
00:34:32,399 --> 00:34:36,960
another is use a new merge search for

832
00:34:35,520 --> 00:34:40,560
the authentication

833
00:34:36,960 --> 00:34:43,599
of course we choose the letter

834
00:34:40,560 --> 00:34:46,719
what's your public key uh

835
00:34:43,599 --> 00:34:50,000
in the owens presentation most of us

836
00:34:46,719 --> 00:34:50,719
have no republican that means there is

837
00:34:50,000 --> 00:34:54,560
no

838
00:34:50,719 --> 00:34:58,640
if no information arden than the public

839
00:34:54,560 --> 00:35:01,920
key for cryptography

840
00:34:58,640 --> 00:35:02,960
sentient sacred kings are more

841
00:35:01,920 --> 00:35:07,200
lightweight

842
00:35:02,960 --> 00:35:10,880
but the disadvantage is also very

843
00:35:07,200 --> 00:35:10,879
upwell such as the

844
00:35:10,960 --> 00:35:18,560
dating operation so why not try to use

845
00:35:15,119 --> 00:35:22,880
asmt cryptography

846
00:35:18,560 --> 00:35:25,359
public and the private keys are involved

847
00:35:22,880 --> 00:35:26,720
what type of data can be used as the

848
00:35:25,359 --> 00:35:30,078
public key

849
00:35:26,720 --> 00:35:34,480
that means we which we will be choosed

850
00:35:30,079 --> 00:35:37,599
as our identity this is out of

851
00:35:34,480 --> 00:35:42,640
scope of my draft

852
00:35:37,599 --> 00:35:46,560
but it's another topic for my research

853
00:35:42,640 --> 00:35:50,640
this drift i propose is placed on two

854
00:35:46,560 --> 00:35:55,440
other rfc rc7250

855
00:35:50,640 --> 00:35:55,440
and 6507

856
00:35:56,320 --> 00:36:03,040
in the rfc rfc6507 specified

857
00:35:59,680 --> 00:36:04,960
an identity-based signature algorithms

858
00:36:03,040 --> 00:36:08,400
using elaptic curve

859
00:36:04,960 --> 00:36:09,200
cryptograph the mathematical calculation

860
00:36:08,400 --> 00:36:11,839
method

861
00:36:09,200 --> 00:36:13,598
of signature and the verification is

862
00:36:11,839 --> 00:36:16,839
provided

863
00:36:13,599 --> 00:36:19,680
and we also notice that fc

864
00:36:16,839 --> 00:36:21,920
sam250 specified using raw public key

865
00:36:19,680 --> 00:36:24,399
with two extensions

866
00:36:21,920 --> 00:36:25,040
makes the raw public key and variable in

867
00:36:24,400 --> 00:36:30,240
ts

868
00:36:25,040 --> 00:36:30,240
and dtls next slide things

869
00:36:32,720 --> 00:36:36,959
literature yes think

870
00:36:37,359 --> 00:36:43,839
so the however draft

871
00:36:40,480 --> 00:36:44,960
we can complete we can divide into three

872
00:36:43,839 --> 00:36:47,520
parts

873
00:36:44,960 --> 00:36:48,560
part one is about the structure of the

874
00:36:47,520 --> 00:36:53,359
raw power breaking

875
00:36:48,560 --> 00:36:56,320
extension and part two is about ifts 1.2

876
00:36:53,359 --> 00:36:57,359
extends republican in authentication

877
00:36:56,320 --> 00:37:01,680
procedure

878
00:36:57,359 --> 00:37:04,640
and part 3 is about if just 1.23

879
00:37:01,680 --> 00:37:09,598
authentication procedure

880
00:37:04,640 --> 00:37:12,720
next slide thanks

881
00:37:09,599 --> 00:37:17,200
this is the horror handshake

882
00:37:12,720 --> 00:37:20,560
exchange during the ftis

883
00:37:17,200 --> 00:37:24,240
authentication procedure

884
00:37:20,560 --> 00:37:24,880
all of us all knowing it's your best

885
00:37:24,240 --> 00:37:28,319
most of

886
00:37:24,880 --> 00:37:29,119
us are very familiar about their tia's

887
00:37:28,320 --> 00:37:32,000
handshake

888
00:37:29,119 --> 00:37:33,280
the message is started at the current

889
00:37:32,000 --> 00:37:36,320
hello

890
00:37:33,280 --> 00:37:38,720
these two extensions is

891
00:37:36,320 --> 00:37:39,680
server certificate type and client

892
00:37:38,720 --> 00:37:42,000
certificate

893
00:37:39,680 --> 00:37:42,000
type

894
00:37:43,839 --> 00:37:49,279
server certificate type here means the

895
00:37:46,640 --> 00:37:52,799
types of server certificate the kind

896
00:37:49,280 --> 00:37:55,920
is able to process

897
00:37:52,800 --> 00:37:57,920
this client certificate type means the

898
00:37:55,920 --> 00:38:01,200
type of certificate

899
00:37:57,920 --> 00:38:04,240
the kind can provide to the server

900
00:38:01,200 --> 00:38:06,960
after receiving the current loan

901
00:38:04,240 --> 00:38:07,439
the server will respond with say hello

902
00:38:06,960 --> 00:38:10,960
and

903
00:38:07,440 --> 00:38:14,320
these two new extensions also exist

904
00:38:10,960 --> 00:38:17,599
here from the

905
00:38:14,320 --> 00:38:20,560
hello side the current certificate type

906
00:38:17,599 --> 00:38:22,480
indicates the selected type of client

907
00:38:20,560 --> 00:38:25,520
certificate type

908
00:38:22,480 --> 00:38:28,960
of client certificate

909
00:38:25,520 --> 00:38:32,160
and the extension of server

910
00:38:28,960 --> 00:38:36,560
certificate type here indicates the

911
00:38:32,160 --> 00:38:40,399
type of certificate certificate in their

912
00:38:36,560 --> 00:38:43,839
following certificate load

913
00:38:40,400 --> 00:38:44,839
what's more important is the extension

914
00:38:43,839 --> 00:38:48,400
of

915
00:38:44,839 --> 00:38:51,359
certificate we have made some

916
00:38:48,400 --> 00:38:54,079
some changes to their content compared

917
00:38:51,359 --> 00:38:57,040
to what we had before

918
00:38:54,079 --> 00:38:58,000
the certificate contains three major

919
00:38:57,040 --> 00:39:00,960
informations

920
00:38:58,000 --> 00:39:02,240
the first one is raw public king we can

921
00:39:00,960 --> 00:39:06,160
also described

922
00:39:02,240 --> 00:39:10,040
as server identity the second one is the

923
00:39:06,160 --> 00:39:13,680
selected signature such as

924
00:39:10,040 --> 00:39:14,720
eccsi the third one is the hash value

925
00:39:13,680 --> 00:39:19,520
after

926
00:39:14,720 --> 00:39:21,919
us algorithms fabric parameters

927
00:39:19,520 --> 00:39:22,880
after receiving their message from the

928
00:39:21,920 --> 00:39:27,119
server

929
00:39:22,880 --> 00:39:29,920
the quite well verified and

930
00:39:27,119 --> 00:39:31,680
the signature message same id and the

931
00:39:29,920 --> 00:39:35,680
public parameters

932
00:39:31,680 --> 00:39:38,720
will be their input and then this

933
00:39:35,680 --> 00:39:42,000
the peer will verify their signature

934
00:39:38,720 --> 00:39:44,560
if success declined will also send their

935
00:39:42,000 --> 00:39:46,640
own certificate with the same form of

936
00:39:44,560 --> 00:39:48,320
the server

937
00:39:46,640 --> 00:39:50,319
after several verified the client

938
00:39:48,320 --> 00:39:52,160
certificate it means their virtual

939
00:39:50,320 --> 00:39:56,320
authentication complete

940
00:39:52,160 --> 00:39:58,078
and the whole king develop derivation is

941
00:39:56,320 --> 00:40:00,560
also complete

942
00:39:58,079 --> 00:40:03,839
they can transport application data

943
00:40:00,560 --> 00:40:03,839
securely from now

944
00:40:04,000 --> 00:40:14,240
next slide things

945
00:40:11,200 --> 00:40:17,399
the part three is we desire

946
00:40:14,240 --> 00:40:20,879
e if ts 1.3 with

947
00:40:17,400 --> 00:40:23,599
identity based signature

948
00:40:20,880 --> 00:40:25,040
the whole authentication procedure keep

949
00:40:23,599 --> 00:40:31,040
the same ways

950
00:40:25,040 --> 00:40:31,040
are efp if just 1.2

951
00:40:31,200 --> 00:40:34,560
the current differences between them is

952
00:40:34,079 --> 00:40:37,599
just

953
00:40:34,560 --> 00:40:42,319
the differences between t

954
00:40:37,599 --> 00:40:45,680
ls 1.2 and ts 1.3

955
00:40:42,319 --> 00:40:45,680
next slide

956
00:40:47,440 --> 00:40:54,800
this slide is an example for if

957
00:40:51,599 --> 00:40:58,319
yep ts 1.3 uh

958
00:40:54,800 --> 00:41:01,599
version identity based signature

959
00:40:58,319 --> 00:41:03,440
we can see that in the current hello

960
00:41:01,599 --> 00:41:08,319
there are three

961
00:41:03,440 --> 00:41:08,319
extensions signature algorithm character

962
00:41:09,280 --> 00:41:16,800
signature algorithms they can use under

963
00:41:13,359 --> 00:41:17,520
these two new extensions several

964
00:41:16,800 --> 00:41:21,040
certificate

965
00:41:17,520 --> 00:41:25,200
type and kind certificate type they are

966
00:41:21,040 --> 00:41:25,200
they can be listed types

967
00:41:25,599 --> 00:41:30,000
and after receiving their current hello

968
00:41:27,839 --> 00:41:33,759
there sam hello will respond

969
00:41:30,000 --> 00:41:38,160
and with the same new

970
00:41:33,760 --> 00:41:42,240
extensions the server hello site

971
00:41:38,160 --> 00:41:45,359
choose republican as their

972
00:41:42,240 --> 00:41:45,359
certificate type

973
00:41:45,599 --> 00:41:49,520
what's more the certificate here will

974
00:41:48,880 --> 00:41:52,720
carry

975
00:41:49,520 --> 00:41:56,480
the i object

976
00:41:52,720 --> 00:42:00,399
identity for ecsi that's the wrong

977
00:41:56,480 --> 00:42:03,839
uh mass value here and the hash

978
00:42:00,400 --> 00:42:06,000
value of the public parameters

979
00:42:03,839 --> 00:42:08,720
and also that's their id that's their

980
00:42:06,000 --> 00:42:12,480
public key

981
00:42:08,720 --> 00:42:13,279
and also their certificate request will

982
00:42:12,480 --> 00:42:16,720
carry

983
00:42:13,280 --> 00:42:20,000
eccs i sure 205

984
00:42:16,720 --> 00:42:23,118
6 they that means they want

985
00:42:20,000 --> 00:42:24,240
their current site will also use their

986
00:42:23,119 --> 00:42:28,839
easies as i

987
00:42:24,240 --> 00:42:32,240
sure two hundred fifteen

988
00:42:28,839 --> 00:42:35,520
six so

989
00:42:32,240 --> 00:42:38,640
after the client received our

990
00:42:35,520 --> 00:42:39,839
message from the from the same hello

991
00:42:38,640 --> 00:42:43,839
they will

992
00:42:39,839 --> 00:42:47,839
also do their verify and share

993
00:42:43,839 --> 00:42:51,680
all certificated to their peers

994
00:42:47,839 --> 00:42:53,040
after both all material authentications

995
00:42:51,680 --> 00:42:56,160
complete

996
00:42:53,040 --> 00:42:59,359
their hover tls

997
00:42:56,160 --> 00:43:02,640
handshake finished and

998
00:42:59,359 --> 00:43:05,520
send the e f six thirds

999
00:43:02,640 --> 00:43:05,520
to the kite

1000
00:43:05,920 --> 00:43:15,599
next light

1001
00:43:12,400 --> 00:43:18,960
so what we will do

1002
00:43:15,599 --> 00:43:23,119
we want our more discussion

1003
00:43:18,960 --> 00:43:26,160
uh i really think now this version draft

1004
00:43:23,119 --> 00:43:29,760
is not a perfect one so

1005
00:43:26,160 --> 00:43:32,960
comments and co-authors are welcome

1006
00:43:29,760 --> 00:43:36,319
and the plan next to do my draft

1007
00:43:32,960 --> 00:43:40,960
is to apply to their iae

1008
00:43:36,319 --> 00:43:45,599
and a their type code for apis ibs

1009
00:43:40,960 --> 00:43:50,880
and divides their key direction

1010
00:43:45,599 --> 00:43:50,880
based on ftls ibs

1011
00:43:52,839 --> 00:43:55,839
things

1012
00:43:57,599 --> 00:44:02,720
so we can start the discussion

1013
00:44:05,040 --> 00:44:09,839
i don't see anyone in the queue that's

1014
00:44:12,079 --> 00:44:18,960
anyone have same question i have a

1015
00:44:15,760 --> 00:44:21,200
question so it looks like in

1016
00:44:18,960 --> 00:44:23,119
in your presentation that you didn't

1017
00:44:21,200 --> 00:44:26,480
need to do any modifications

1018
00:44:23,119 --> 00:44:30,400
to the way the tls flow work

1019
00:44:26,480 --> 00:44:33,359
and that you just used the

1020
00:44:30,400 --> 00:44:34,240
asm1 definition for the curves that you

1021
00:44:33,359 --> 00:44:36,078
wanted to use

1022
00:44:34,240 --> 00:44:38,479
inside the raw public key message is

1023
00:44:36,079 --> 00:44:38,480
that true

1024
00:44:39,680 --> 00:44:46,319
i don't get a key point of your question

1025
00:44:43,119 --> 00:44:50,240
does that mean that i just use this uh

1026
00:44:46,319 --> 00:44:52,400
two is new extensions

1027
00:44:50,240 --> 00:44:53,279
uh did do you have to create any new

1028
00:44:52,400 --> 00:44:57,040
extensions

1029
00:44:53,280 --> 00:45:00,319
or data types within tls

1030
00:44:57,040 --> 00:45:01,680
yes we have you can if you familiarize

1031
00:45:00,319 --> 00:45:04,800
the rfc

1032
00:45:01,680 --> 00:45:08,078
uh five

1033
00:45:04,800 --> 00:45:11,119
zero seven you can know the

1034
00:45:08,079 --> 00:45:13,119
extension you can see the extension

1035
00:45:11,119 --> 00:45:14,839
there

1036
00:45:13,119 --> 00:45:16,319
current certificate type and the

1037
00:45:14,839 --> 00:45:22,000
self-certificate type

1038
00:45:16,319 --> 00:45:22,000
is really not a new one here

1039
00:45:23,280 --> 00:45:31,040
we also have a draft about

1040
00:45:26,640 --> 00:45:34,078
ts ibs uh it have uh

1041
00:45:31,040 --> 00:45:34,960
we have submitted in the tl as what

1042
00:45:34,079 --> 00:45:37,119
group

1043
00:45:34,960 --> 00:45:37,119
do

1044
00:45:44,960 --> 00:45:48,480
hi um hi this is hannes uh i was

1045
00:45:47,760 --> 00:45:51,920
wondering

1046
00:45:48,480 --> 00:45:55,040
where you plan to use your um

1047
00:45:51,920 --> 00:45:56,960
document like this specific method like

1048
00:45:55,040 --> 00:45:58,319
what deployment environments do you have

1049
00:45:56,960 --> 00:46:01,839
in mind

1050
00:45:58,319 --> 00:46:01,839
sorry if i missed that

1051
00:46:03,520 --> 00:46:11,759
oh i think the uh most disturbed bros

1052
00:46:08,720 --> 00:46:17,118
scenario is for the lonely

1053
00:46:11,760 --> 00:46:17,119
passive i ot devices

1054
00:46:18,079 --> 00:46:23,359
you said long long lived which devices

1055
00:46:24,720 --> 00:46:29,839
like uh

1056
00:46:29,920 --> 00:46:33,440
maybe not very exactly with that but i

1057
00:46:32,800 --> 00:46:36,960
think the

1058
00:46:33,440 --> 00:46:40,160
robert machine can use this

1059
00:46:36,960 --> 00:46:43,920
especially in the constraint environment

1060
00:46:40,160 --> 00:46:46,640
for the internet so internet of things

1061
00:46:43,920 --> 00:46:46,640
devices okay

1062
00:46:48,000 --> 00:46:52,880
uh there's a question uh in jabber from

1063
00:46:51,200 --> 00:46:56,640
rasoozlay

1064
00:46:52,880 --> 00:46:59,280
uh is this leveraging draft huang tls

1065
00:46:56,640 --> 00:46:59,279
ibe

1066
00:47:01,680 --> 00:47:05,359
um can you

1067
00:47:06,480 --> 00:47:14,720
you uh you mean

1068
00:47:10,800 --> 00:47:19,520
you mean the uh drafter of

1069
00:47:14,720 --> 00:47:19,520
for one haikuang right

1070
00:47:21,200 --> 00:47:26,399
uh so i don't know if uh i'm

1071
00:47:24,319 --> 00:47:28,558
pronouncing the name correctly it's uh

1072
00:47:26,400 --> 00:47:31,920
there is a draft uh

1073
00:47:28,559 --> 00:47:36,960
uh that's draft huang tls

1074
00:47:31,920 --> 00:47:40,640
ibe uh is this is

1075
00:47:36,960 --> 00:47:40,640
your draft leveraging that

1076
00:47:42,319 --> 00:47:48,800
ibe is a very good thing but it's

1077
00:47:45,440 --> 00:47:54,079
much more difficult for me so i just use

1078
00:47:48,800 --> 00:47:54,079
uh ibs here not encryption here

1079
00:47:54,720 --> 00:48:02,919
just use ib ask for the uh identity

1080
00:47:58,559 --> 00:48:07,839
authentication but not use the uh

1081
00:48:02,920 --> 00:48:07,839
encryption crypt crypto here

1082
00:48:08,400 --> 00:48:14,559
all right uh

1083
00:48:11,440 --> 00:48:17,920
pki uh the traditional pki

1084
00:48:14,559 --> 00:48:20,240
certificates yeah

1085
00:48:17,920 --> 00:48:22,880
thanks uh harness asks is there some

1086
00:48:20,240 --> 00:48:27,839
running code for this draft

1087
00:48:22,880 --> 00:48:31,760
oh yes i have uh

1088
00:48:27,839 --> 00:48:31,759
in my program

1089
00:48:31,920 --> 00:48:39,400
i did the implementation of aps

1090
00:48:35,760 --> 00:48:42,319
ibs based on ips

1091
00:48:39,400 --> 00:48:45,200
1.2 we

1092
00:48:42,319 --> 00:48:45,520
basically implemented the whole process

1093
00:48:45,200 --> 00:48:49,598
but

1094
00:48:45,520 --> 00:48:52,640
it's not opensets in the github

1095
00:48:49,599 --> 00:48:56,960
is our internal

1096
00:48:52,640 --> 00:49:03,200
code but we can share with the

1097
00:48:56,960 --> 00:49:06,559
test result

1098
00:49:03,200 --> 00:49:09,680
okay i guess joe the next step is like

1099
00:49:06,559 --> 00:49:13,200
to continue the discussion on the list

1100
00:49:09,680 --> 00:49:16,399
for this yes thank you

1101
00:49:13,200 --> 00:49:19,680
more comments and discussions i

1102
00:49:16,400 --> 00:49:22,240
won't see in their mail list thank you

1103
00:49:19,680 --> 00:49:22,240
very much

1104
00:49:24,800 --> 00:49:28,839
all right next up i guess joe you will

1105
00:49:26,880 --> 00:49:32,720
be doing the deep

1106
00:49:28,839 --> 00:49:36,160
errata yeah so

1107
00:49:32,720 --> 00:49:37,439
um we had a busy time with tea paradis

1108
00:49:36,160 --> 00:49:41,040
since the last

1109
00:49:37,440 --> 00:49:42,160
meeting um i think we we had a total of

1110
00:49:41,040 --> 00:49:45,520
10

1111
00:49:42,160 --> 00:49:49,200
um errata published

1112
00:49:45,520 --> 00:49:53,280
um or or submitted against teep

1113
00:49:49,200 --> 00:49:56,879
um i think on the list we've resolved

1114
00:49:53,280 --> 00:49:58,960
um six of those

1115
00:49:56,880 --> 00:50:00,720
and i think four of them are really

1116
00:49:58,960 --> 00:50:02,000
close and i wanted to kind of go through

1117
00:50:00,720 --> 00:50:04,640
them today

1118
00:50:02,000 --> 00:50:06,640
uh with as many people as we could here

1119
00:50:04,640 --> 00:50:09,200
i did get some comments on the list from

1120
00:50:06,640 --> 00:50:11,520
oleg so i know he's looked at them

1121
00:50:09,200 --> 00:50:12,480
um but i want to make sure that that

1122
00:50:11,520 --> 00:50:13,759
people

1123
00:50:12,480 --> 00:50:17,040
have looked at them and if there are any

1124
00:50:13,760 --> 00:50:21,040
comments today then we can chat about it

1125
00:50:17,040 --> 00:50:24,319
um so let's see

1126
00:50:21,040 --> 00:50:27,759
the first one

1127
00:50:24,319 --> 00:50:28,240
we have is has to do with the authority

1128
00:50:27,760 --> 00:50:32,000
id

1129
00:50:28,240 --> 00:50:35,279
which is a tlv an outer tlv um

1130
00:50:32,000 --> 00:50:38,480
and currently the draft or sorry the

1131
00:50:35,280 --> 00:50:41,839
the the rfc says

1132
00:50:38,480 --> 00:50:46,480
that this uh should be mandatory

1133
00:50:41,839 --> 00:50:48,960
um and uh the the problem there

1134
00:50:46,480 --> 00:50:52,240
is uh there's another part of the rfc

1135
00:50:48,960 --> 00:50:54,720
that says outer tlbs cannot be mandatory

1136
00:50:52,240 --> 00:50:56,479
and so the the suggested resolution here

1137
00:50:54,720 --> 00:50:59,680
is to to make this

1138
00:50:56,480 --> 00:51:02,160
optional now realizing that

1139
00:50:59,680 --> 00:51:03,759
optional means that not everybody has to

1140
00:51:02,160 --> 00:51:05,598
understand this tlv

1141
00:51:03,760 --> 00:51:07,520
um and and it turns out this tlb is

1142
00:51:05,599 --> 00:51:11,359
important when you're processing

1143
00:51:07,520 --> 00:51:11,359
uh packs um

1144
00:51:12,160 --> 00:51:16,879
so if you're using packs you would you

1145
00:51:15,200 --> 00:51:18,078
would want to understand this tld

1146
00:51:16,880 --> 00:51:21,599
because it helps you to

1147
00:51:18,079 --> 00:51:24,240
to uh manage them on on the client

1148
00:51:21,599 --> 00:51:26,480
um but if you don't then it would be

1149
00:51:24,240 --> 00:51:29,439
optional

1150
00:51:26,480 --> 00:51:29,760
uh quick question john this one so yeah

1151
00:51:29,440 --> 00:51:32,400
is

1152
00:51:29,760 --> 00:51:33,920
is this being made optional because it's

1153
00:51:32,400 --> 00:51:36,720
an outer tlv and

1154
00:51:33,920 --> 00:51:38,559
the document says that all outer tlvs

1155
00:51:36,720 --> 00:51:41,759
are optional

1156
00:51:38,559 --> 00:51:45,839
correct so

1157
00:51:41,760 --> 00:51:48,800
uh and this and

1158
00:51:45,839 --> 00:51:51,839
so this is only needed in in the

1159
00:51:48,800 --> 00:51:51,839
scenario of a pack

1160
00:51:52,880 --> 00:51:56,400
that is my understanding at least you

1161
00:51:55,599 --> 00:51:58,400
know for the

1162
00:51:56,400 --> 00:51:59,760
usages now i mean somebody could define

1163
00:51:58,400 --> 00:52:03,040
something else that could

1164
00:51:59,760 --> 00:52:04,400
make use of of it as well but it

1165
00:52:03,040 --> 00:52:08,160
identifies kind of the

1166
00:52:04,400 --> 00:52:11,440
aaa server okay so there are scenarios

1167
00:52:08,160 --> 00:52:16,000
where teeth can work without this

1168
00:52:11,440 --> 00:52:19,200
tlb in which case this makes sense

1169
00:52:16,000 --> 00:52:22,720
making it optional

1170
00:52:19,200 --> 00:52:26,640
but i'd you know if um if uh

1171
00:52:22,720 --> 00:52:33,200
elliott or um anybody else has

1172
00:52:26,640 --> 00:52:36,319
has any comments

1173
00:52:33,200 --> 00:52:36,319
okay if not

1174
00:52:40,240 --> 00:52:48,959
so jorge said it agrees with optional

1175
00:52:45,200 --> 00:52:51,598
um all right so any any

1176
00:52:48,960 --> 00:52:54,000
additional concerns about making this

1177
00:52:51,599 --> 00:52:54,000
optional

1178
00:52:58,640 --> 00:53:04,960
no looks good move on to the next one

1179
00:53:05,760 --> 00:53:11,920
all right um here

1180
00:53:08,880 --> 00:53:14,079
this is one that's a little bit tricky

1181
00:53:11,920 --> 00:53:15,760
um there are a lot of places in the

1182
00:53:14,079 --> 00:53:18,079
document where

1183
00:53:15,760 --> 00:53:18,960
the term eep method is used and in a

1184
00:53:18,079 --> 00:53:21,280
great many

1185
00:53:18,960 --> 00:53:22,800
of them it really means eep

1186
00:53:21,280 --> 00:53:25,280
authentication method

1187
00:53:22,800 --> 00:53:27,359
which is really any method except for

1188
00:53:25,280 --> 00:53:28,720
the eep identity method which does no

1189
00:53:27,359 --> 00:53:33,759
authentication

1190
00:53:28,720 --> 00:53:36,799
so you know there's a suggestion to

1191
00:53:33,760 --> 00:53:38,720
um modify this in in a couple places but

1192
00:53:36,800 --> 00:53:39,760
really it needs to be modified in many

1193
00:53:38,720 --> 00:53:43,279
places

1194
00:53:39,760 --> 00:53:44,720
so my uh thinking here is that this is

1195
00:53:43,280 --> 00:53:46,640
something that we would hold for a

1196
00:53:44,720 --> 00:53:49,759
document update because there's

1197
00:53:46,640 --> 00:53:53,359
really too many places to update it

1198
00:53:49,760 --> 00:53:55,280
uh just doing it in an errata

1199
00:53:53,359 --> 00:53:57,279
and so the errata would be hold for a

1200
00:53:55,280 --> 00:54:00,960
document update and we can place a note

1201
00:53:57,280 --> 00:54:01,839
explaining uh the reasons why we want to

1202
00:54:00,960 --> 00:54:03,920
make that change

1203
00:54:01,839 --> 00:54:06,799
but the change would be made when we

1204
00:54:03,920 --> 00:54:06,800
update the document

1205
00:54:07,119 --> 00:54:12,880
so quick question what side if identity

1206
00:54:10,480 --> 00:54:16,480
method

1207
00:54:12,880 --> 00:54:19,520
um the eep identity method is uh

1208
00:54:16,480 --> 00:54:22,640
the it's a e type

1209
00:54:19,520 --> 00:54:24,160
that can be uh that the client sends uh

1210
00:54:22,640 --> 00:54:26,558
the server sends an identity

1211
00:54:24,160 --> 00:54:29,520
request i believe and then the client

1212
00:54:26,559 --> 00:54:33,280
sends an identity response that contains

1213
00:54:29,520 --> 00:54:36,319
an nai for routing typically

1214
00:54:33,280 --> 00:54:38,640
it's a message type right so we have

1215
00:54:36,319 --> 00:54:39,359
message types and it can be a request

1216
00:54:38,640 --> 00:54:42,640
response

1217
00:54:39,359 --> 00:54:46,078
identity and so

1218
00:54:42,640 --> 00:54:47,759
wouldn't it make sense to like i i don't

1219
00:54:46,079 --> 00:54:50,319
know if the current rfc

1220
00:54:47,760 --> 00:54:50,799
refers to identity method and maybe just

1221
00:54:50,319 --> 00:54:54,319
say

1222
00:54:50,799 --> 00:54:54,319
identity message or

1223
00:54:59,839 --> 00:55:03,599
i'm not sure if follow

1224
00:55:04,079 --> 00:55:09,520
are you saying that eep identity should

1225
00:55:06,240 --> 00:55:11,839
not like we if identity isn't a method

1226
00:55:09,520 --> 00:55:12,559
and that we shouldn't that this doesn't

1227
00:55:11,839 --> 00:55:14,400
matter or

1228
00:55:12,559 --> 00:55:17,040
are you saying that we there's a one

1229
00:55:14,400 --> 00:55:19,920
place where we can make a change or

1230
00:55:17,040 --> 00:55:22,000
so what i'm saying is that for me uh and

1231
00:55:19,920 --> 00:55:24,799
hopefully for

1232
00:55:22,000 --> 00:55:26,240
most other people i could be wrong if

1233
00:55:24,799 --> 00:55:28,480
method generally

1234
00:55:26,240 --> 00:55:29,919
means an eep authentication method which

1235
00:55:28,480 --> 00:55:33,119
was i guess the intended

1236
00:55:29,920 --> 00:55:35,760
meaning when deep was written and

1237
00:55:33,119 --> 00:55:37,040
i haven't now looked at the deep rfc

1238
00:55:35,760 --> 00:55:38,720
maybe i should

1239
00:55:37,040 --> 00:55:40,240
check it again but if there are some

1240
00:55:38,720 --> 00:55:44,399
instances of uh

1241
00:55:40,240 --> 00:55:48,160
identity method it might make sense to

1242
00:55:44,400 --> 00:55:51,119
like change those to an identity

1243
00:55:48,160 --> 00:55:51,118
message or

1244
00:55:52,160 --> 00:55:56,000
yeah i'm sure i'm sure that the teeps

1245
00:55:54,240 --> 00:55:57,040
back i'm pretty sure it does reference

1246
00:55:56,000 --> 00:56:00,480
the identity method

1247
00:55:57,040 --> 00:56:00,480
at least a couple of times

1248
00:56:01,200 --> 00:56:06,078
i think in general people know what

1249
00:56:04,240 --> 00:56:08,000
this means and we've clarified we're

1250
00:56:06,079 --> 00:56:10,240
going to clarify some of the other areas

1251
00:56:08,000 --> 00:56:12,240
where there was confusion between

1252
00:56:10,240 --> 00:56:14,839
when you send different types of

1253
00:56:12,240 --> 00:56:16,799
messages

1254
00:56:14,839 --> 00:56:20,558
um

1255
00:56:16,799 --> 00:56:22,160
so i i think i think you know fixing

1256
00:56:20,559 --> 00:56:25,440
this in in multiple

1257
00:56:22,160 --> 00:56:31,839
other places is is not really in scope

1258
00:56:25,440 --> 00:56:31,839
for an errata

1259
00:56:43,359 --> 00:56:45,839
does anybody

1260
00:56:46,400 --> 00:56:59,839
else want to comment on this one

1261
00:57:00,480 --> 00:57:07,040
all right so i i mean

1262
00:57:04,960 --> 00:57:08,000
we can take a look and and take a look

1263
00:57:07,040 --> 00:57:11,200
at the

1264
00:57:08,000 --> 00:57:12,480
at the rfc and see if you if you think

1265
00:57:11,200 --> 00:57:14,640
there is uh

1266
00:57:12,480 --> 00:57:15,599
if there's a simple change to make that

1267
00:57:14,640 --> 00:57:19,759
isn't like

1268
00:57:15,599 --> 00:57:20,160
you know in 15 different sections then

1269
00:57:19,760 --> 00:57:23,359
that

1270
00:57:20,160 --> 00:57:25,759
that might be worthwhile doing um

1271
00:57:23,359 --> 00:57:26,960
but this is borderline almost an

1272
00:57:25,760 --> 00:57:28,880
editorial change

1273
00:57:26,960 --> 00:57:31,599
it does have some technical meaning in

1274
00:57:28,880 --> 00:57:31,599
some places

1275
00:57:34,960 --> 00:57:39,280
yep makes sense i'll make sure to look

1276
00:57:38,799 --> 00:57:41,920
at this

1277
00:57:39,280 --> 00:57:42,640
i'm now reading the errata again so i

1278
00:57:41,920 --> 00:57:44,240
get some

1279
00:57:42,640 --> 00:57:46,640
context maybe i should have done this

1280
00:57:44,240 --> 00:57:48,479
before but uh

1281
00:57:46,640 --> 00:57:51,118
you're right this is just an editorial

1282
00:57:48,480 --> 00:57:52,720
change so we can see what's the best way

1283
00:57:51,119 --> 00:57:55,839
forward

1284
00:57:52,720 --> 00:58:00,240
yeah yeah okay so the next one

1285
00:57:55,839 --> 00:58:00,240
i think whoops is better to

1286
00:58:01,200 --> 00:58:06,240
look at in github

1287
00:58:06,640 --> 00:58:23,839
so this particular one has to do with uh

1288
00:58:34,839 --> 00:58:41,359
um

1289
00:58:36,319 --> 00:58:41,359
with when um how we handle

1290
00:58:42,640 --> 00:58:48,000
multiple authentication mechanisms

1291
00:58:48,480 --> 00:58:55,599
and whether you send an interme

1292
00:58:51,760 --> 00:58:58,720
and when you derive keys and when you do

1293
00:58:55,599 --> 00:59:02,000
uh interme

1294
00:58:58,720 --> 00:59:02,799
intermediate uh results and crypto

1295
00:59:02,000 --> 00:59:05,839
binding

1296
00:59:02,799 --> 00:59:07,759
and so the real question was it didn't

1297
00:59:05,839 --> 00:59:09,920
really specify whether you did crypto

1298
00:59:07,760 --> 00:59:11,680
binding after a basic password exchange

1299
00:59:09,920 --> 00:59:15,839
it didn't make that clear

1300
00:59:11,680 --> 00:59:18,960
um and so

1301
00:59:15,839 --> 00:59:20,000
uh we've made some modifications here to

1302
00:59:18,960 --> 00:59:22,079
kind of

1303
00:59:20,000 --> 00:59:23,359
make it clearer what you do and so that

1304
00:59:22,079 --> 00:59:26,799
also

1305
00:59:23,359 --> 00:59:29,279
we defined made sure the procedure for

1306
00:59:26,799 --> 00:59:30,720
when you don't have a key generated such

1307
00:59:29,280 --> 00:59:33,680
as in a password method

1308
00:59:30,720 --> 00:59:34,240
what you use in the crypto binding and

1309
00:59:33,680 --> 00:59:37,279
insert

1310
00:59:34,240 --> 00:59:37,279
into the key schedule

1311
00:59:38,720 --> 00:59:41,919
um so this section is is just clarifying

1312
00:59:41,440 --> 00:59:45,920
that

1313
00:59:41,920 --> 00:59:47,440
um i think this is the main

1314
00:59:45,920 --> 00:59:49,440
there's a couple different changes but

1315
00:59:47,440 --> 00:59:51,440
this is uh and

1316
00:59:49,440 --> 00:59:52,640
i went through and kind of what the

1317
00:59:51,440 --> 00:59:54,799
changes would look like

1318
00:59:52,640 --> 00:59:54,799
in

1319
00:59:56,400 --> 01:00:01,839
github and this is basically saying uh

1320
01:00:02,000 --> 01:00:07,359
the zero msk is used in the case that

1321
01:00:05,119 --> 01:00:07,359
uh

1322
01:00:09,040 --> 01:00:15,359
when no key is uh derived and then

1323
01:00:12,240 --> 01:00:18,879
if the and then the zero

1324
01:00:15,359 --> 01:00:29,759
msk is defined as just an msk of

1325
01:00:18,880 --> 01:00:31,839
32 octets and zeros

1326
01:00:29,760 --> 01:00:33,820
and i think there was another section to

1327
01:00:31,839 --> 01:00:36,879
this change

1328
01:00:33,820 --> 01:00:36,879
[Music]

1329
01:00:40,720 --> 01:00:57,839
let's see now i think that's it

1330
01:00:45,280 --> 01:00:57,839
that's all i await here

1331
01:01:07,359 --> 01:01:11,759
this is taking a little time but i think

1332
01:01:09,920 --> 01:01:12,480
oleg has gone through this change as

1333
01:01:11,760 --> 01:01:25,839
well

1334
01:01:12,480 --> 01:01:25,839
and it seemed like

1335
01:01:33,280 --> 01:01:36,400
seems like things are

1336
01:01:36,640 --> 01:01:41,759
for some reason i am not able to open up

1337
01:01:39,359 --> 01:01:41,759
the other

1338
01:01:42,880 --> 01:01:55,599
thing right now

1339
01:01:53,280 --> 01:01:57,119
um but did anybody who's looked at have

1340
01:01:55,599 --> 01:02:07,839
any additional comments on

1341
01:01:57,119 --> 01:02:07,839
the resolution to 57.75

1342
01:02:07,920 --> 01:02:11,440
let's just see if we can so jorge says

1343
01:02:10,640 --> 01:02:13,759
he has

1344
01:02:11,440 --> 01:02:16,240
reviewed the pull request and no

1345
01:02:13,760 --> 01:02:18,839
additional comments

1346
01:02:16,240 --> 01:02:20,558
yeah here's the other other change that

1347
01:02:18,839 --> 01:02:22,799
describes um

1348
01:02:20,559 --> 01:02:24,720
what happens with the intermediate

1349
01:02:22,799 --> 01:02:27,599
result tlds

1350
01:02:24,720 --> 01:02:28,959
that are required after basic uh

1351
01:02:27,599 --> 01:02:29,920
password authentication and eep

1352
01:02:28,960 --> 01:02:33,119
authentication

1353
01:02:29,920 --> 01:02:33,119
and oh like i made

1354
01:02:33,520 --> 01:02:36,559
uh the a was i think the change was with

1355
01:02:35,760 --> 01:02:39,599
the next one

1356
01:02:36,559 --> 01:02:39,599
basically on what you had

1357
01:02:46,839 --> 01:02:52,319
requested

1358
01:02:49,520 --> 01:02:54,559
all right so we can move on to the next

1359
01:02:52,319 --> 01:02:54,558
one

1360
01:02:57,520 --> 01:03:01,680
which is uh again having to do with the

1361
01:03:00,160 --> 01:03:03,200
intermediate result and password

1362
01:03:01,680 --> 01:03:04,879
authentication

1363
01:03:03,200 --> 01:03:06,799
joe sorry one comment regarding the

1364
01:03:04,880 --> 01:03:10,559
previous errata

1365
01:03:06,799 --> 01:03:13,680
yeah so was it decided

1366
01:03:10,559 --> 01:03:17,039
it was decided not to

1367
01:03:13,680 --> 01:03:22,078
introduce the new flag that denotes the

1368
01:03:17,039 --> 01:03:22,079
only zero msk is present right

1369
01:03:22,640 --> 01:03:26,799
right the

1370
01:03:28,160 --> 01:03:33,038
yeah that sorry go ahead go ahead go

1371
01:03:31,599 --> 01:03:36,640
ahead

1372
01:03:33,039 --> 01:03:38,720
that means that there is no technical

1373
01:03:36,640 --> 01:03:42,078
possibility to

1374
01:03:38,720 --> 01:03:45,279
to use zero msk where

1375
01:03:42,079 --> 01:03:49,440
at the msk or emsk are allowed

1376
01:03:45,280 --> 01:03:52,559
technically right in other words if

1377
01:03:49,440 --> 01:03:55,920
the method if the inner method

1378
01:03:52,559 --> 01:03:59,359
exports at the msk or emsk

1379
01:03:55,920 --> 01:04:00,319
it must be used and zero msk cannot be

1380
01:03:59,359 --> 01:04:05,279
used

1381
01:04:00,319 --> 01:04:08,720
so usage of zero msk is implicitly

1382
01:04:05,280 --> 01:04:12,799
followed by from the

1383
01:04:08,720 --> 01:04:16,399
specification of the inner method

1384
01:04:12,799 --> 01:04:19,680
yes maybe we need to mention this

1385
01:04:16,400 --> 01:04:23,599
explicitly so it will not

1386
01:04:19,680 --> 01:04:23,598
it will be clear for the protocol

1387
01:04:24,839 --> 01:04:29,759
implementators

1388
01:04:26,400 --> 01:04:31,760
um if you could look at

1389
01:04:29,760 --> 01:04:34,319
i don't know if that would fall in in

1390
01:04:31,760 --> 01:04:36,799
this errata or one of the other ones

1391
01:04:34,319 --> 01:04:37,680
but if if there's a sentence we could

1392
01:04:36,799 --> 01:04:41,839
add

1393
01:04:37,680 --> 01:04:41,839
um um

1394
01:04:43,359 --> 01:04:46,558
maybe even in this one

1395
01:04:46,640 --> 01:04:51,598
we should look to see where where we

1396
01:04:48,480 --> 01:04:51,599
could add that um

1397
01:04:52,960 --> 01:04:56,000
maybe even in this table which i think

1398
01:04:54,880 --> 01:05:01,280
maybe was edited

1399
01:04:56,000 --> 01:05:01,280
in another uh pull request

1400
01:05:04,960 --> 01:05:09,839
also the good place is is for section

1401
01:05:07,119 --> 01:05:09,839
5.2

1402
01:05:10,559 --> 01:05:17,280
yeah oh it is yeah

1403
01:05:13,920 --> 01:05:19,520
that's where we are um so if

1404
01:05:17,280 --> 01:05:21,039
if you could take a look at the i think

1405
01:05:19,520 --> 01:05:21,759
that that could be a fine idea if we

1406
01:05:21,039 --> 01:05:24,480
just

1407
01:05:21,760 --> 01:05:24,960
if it's just an addition in one of the

1408
01:05:24,480 --> 01:05:26,880
current

1409
01:05:24,960 --> 01:05:28,480
uh errata which i think it could fit

1410
01:05:26,880 --> 01:05:30,240
into um

1411
01:05:28,480 --> 01:05:32,480
that would would be good because i i

1412
01:05:30,240 --> 01:05:35,680
think the intention is that if a method

1413
01:05:32,480 --> 01:05:37,839
is generates uh an msk that it should be

1414
01:05:35,680 --> 01:05:37,839
used

1415
01:05:52,000 --> 01:05:55,280
so i i don't think it would be worth

1416
01:05:54,079 --> 01:05:58,400
time to to

1417
01:05:55,280 --> 01:05:59,359
uh fix this here but we can go offline

1418
01:05:58,400 --> 01:06:01,440
and and

1419
01:05:59,359 --> 01:06:02,880
work through what what the change would

1420
01:06:01,440 --> 01:06:05,839
be

1421
01:06:02,880 --> 01:06:05,839
thanks okay

1422
01:06:09,039 --> 01:06:13,119
okay then uh 5844

1423
01:06:13,520 --> 01:06:19,839
um this is another one with several uh

1424
01:06:16,240 --> 01:06:19,839
parts to it

1425
01:06:22,880 --> 01:06:28,240
this is just again i didn't want to do

1426
01:06:26,000 --> 01:06:30,240
that

1427
01:06:28,240 --> 01:06:33,118
just again uh kind of clarifying some of

1428
01:06:30,240 --> 01:06:34,000
the appendices uh to include places

1429
01:06:33,119 --> 01:06:37,520
where

1430
01:06:34,000 --> 01:06:41,200
um there was a missing uh

1431
01:06:37,520 --> 01:06:44,319
crypto binding uh tlv and intermediate

1432
01:06:41,200 --> 01:06:44,319
or i think the uh

1433
01:06:44,960 --> 01:06:48,640
crypto binding tlb seems like maybe this

1434
01:06:47,839 --> 01:06:51,038
isn't

1435
01:06:48,640 --> 01:06:51,038
correct

1436
01:06:55,599 --> 01:06:59,280
oh yeah no the crypto binding tlb is

1437
01:06:57,359 --> 01:07:01,440
right

1438
01:06:59,280 --> 01:07:02,319
to here that you need an intermediate

1439
01:07:01,440 --> 01:07:06,480
result

1440
01:07:02,319 --> 01:07:06,480
so i think this these were errors in the

1441
01:07:06,960 --> 01:07:10,720
in the specification i think it's pretty

1442
01:07:09,599 --> 01:07:15,839
straightforward

1443
01:07:10,720 --> 01:07:15,839
for this particular change

1444
01:07:16,319 --> 01:07:19,359
and in this case

1445
01:07:22,160 --> 01:07:29,839
the other changes resulting from this

1446
01:07:24,160 --> 01:07:29,839
errata are

1447
01:07:35,920 --> 01:07:43,839
almost there

1448
01:07:46,079 --> 01:07:50,000
i'm just going to try to get these going

1449
01:07:53,440 --> 01:07:57,839
github is not responding quickly to me

1450
01:07:55,680 --> 01:07:57,839
today

1451
01:08:22,839 --> 01:08:25,839
um

1452
01:08:35,040 --> 01:08:41,120
so looking at this change

1453
01:08:38,238 --> 01:08:43,358
this is again clarifying that

1454
01:08:41,120 --> 01:08:45,278
intermediate result pld

1455
01:08:43,359 --> 01:08:49,199
goes after authentication methods and

1456
01:08:45,279 --> 01:08:49,199
basic password authentication methods

1457
01:08:50,238 --> 01:08:53,839
pretty straightforward

1458
01:09:01,100 --> 01:09:06,560
[Music]

1459
01:09:04,839 --> 01:09:09,120
and

1460
01:09:06,560 --> 01:09:09,600
this is where i clarified the text based

1461
01:09:09,120 --> 01:09:12,880
on

1462
01:09:09,600 --> 01:09:15,839
oleg's uh comments

1463
01:09:12,880 --> 01:09:17,520
uh that an intermediate result

1464
01:09:15,839 --> 01:09:19,600
indicating success must always

1465
01:09:17,520 --> 01:09:21,279
be accompanied by a crypto binding tlv

1466
01:09:19,600 --> 01:09:22,080
this is discussed elsewhere in the

1467
01:09:21,279 --> 01:09:24,319
document

1468
01:09:22,080 --> 01:09:25,839
but just to make it crystal clear we we

1469
01:09:24,319 --> 01:09:28,319
included it here

1470
01:09:25,839 --> 01:09:28,318
as well

1471
01:09:29,600 --> 01:09:35,839
is that clearer oleg

1472
01:09:35,920 --> 01:09:38,799
yes it looks clear

1473
01:09:39,679 --> 01:09:49,839
thank you all right let's one more spot

1474
01:10:00,840 --> 01:10:05,920
um

1475
01:10:03,360 --> 01:10:07,280
then again instead of just talking about

1476
01:10:05,920 --> 01:10:09,679
individual eat methods

1477
01:10:07,280 --> 01:10:16,559
we talk about authentication methods and

1478
01:10:09,679 --> 01:10:18,960
password authentication as well

1479
01:10:16,560 --> 01:10:19,840
so are there any other comments on these

1480
01:10:18,960 --> 01:10:22,880
errata

1481
01:10:19,840 --> 01:10:24,800
or any of the other errata that we

1482
01:10:22,880 --> 01:10:27,040
didn't discuss yet i think we have still

1483
01:10:24,800 --> 01:10:30,159
have one open issue which

1484
01:10:27,040 --> 01:10:31,519
oleg brought up um which we can

1485
01:10:30,159 --> 01:10:34,799
i think that'll be pretty quick to

1486
01:10:31,520 --> 01:10:36,640
resolve uh but i'd like to

1487
01:10:34,800 --> 01:10:38,159
try to wrap these up and send them to

1488
01:10:36,640 --> 01:10:42,640
roman uh

1489
01:10:38,159 --> 01:10:46,159
so he can figure out how we

1490
01:10:42,640 --> 01:10:50,560
take this to the next hooray you are

1491
01:10:46,159 --> 01:10:53,040
up next go ahead yep

1492
01:10:50,560 --> 01:10:53,600
i apologize i sent an email to the list

1493
01:10:53,040 --> 01:10:56,159
just

1494
01:10:53,600 --> 01:10:57,920
right before this meeting so i doubt

1495
01:10:56,159 --> 01:10:59,199
anybody has had time to review it and

1496
01:10:57,920 --> 01:11:03,120
think about it

1497
01:10:59,199 --> 01:11:07,120
but errata 5768

1498
01:11:03,120 --> 01:11:10,480
the chrome code is too

1499
01:11:07,120 --> 01:11:11,519
um it involves the hmac and hmacs have

1500
01:11:10,480 --> 01:11:14,639
different

1501
01:11:11,520 --> 01:11:17,760
lengths depending on the algorithm used

1502
01:11:14,640 --> 01:11:19,679
and so it relates to

1503
01:11:17,760 --> 01:11:21,679
changing the length in the crypto

1504
01:11:19,679 --> 01:11:24,400
binding tlv

1505
01:11:21,679 --> 01:11:25,440
to be variable based on the type of hmac

1506
01:11:24,400 --> 01:11:28,799
used

1507
01:11:25,440 --> 01:11:31,120
which sounds good uh to me but i do have

1508
01:11:28,800 --> 01:11:32,880
some compatibility concerns because the

1509
01:11:31,120 --> 01:11:36,239
existing document says

1510
01:11:32,880 --> 01:11:39,280
the crypto binding tlv

1511
01:11:36,239 --> 01:11:40,280
the length of that field is 20 and

1512
01:11:39,280 --> 01:11:44,000
existing

1513
01:11:40,280 --> 01:11:45,759
implementations uh use that length of 20

1514
01:11:44,000 --> 01:11:47,679
and they truncate any output that is

1515
01:11:45,760 --> 01:11:48,960
longer than 20 they truncate it to 20

1516
01:11:47,679 --> 01:11:52,640
octets

1517
01:11:48,960 --> 01:11:54,719
so i agree that the direction of

1518
01:11:52,640 --> 01:11:56,800
making that variable is good but i am

1519
01:11:54,719 --> 01:11:58,400
concerned it has compatibility impact

1520
01:11:56,800 --> 01:12:01,120
and so perhaps

1521
01:11:58,400 --> 01:12:02,719
to make that change we would have to

1522
01:12:01,120 --> 01:12:08,000
increase the version

1523
01:12:02,719 --> 01:12:11,360
of the crypto binding tlv

1524
01:12:08,000 --> 01:12:14,800
yeah um so then if

1525
01:12:11,360 --> 01:12:16,320
if existing i think if we're going to

1526
01:12:14,800 --> 01:12:18,480
increase the

1527
01:12:16,320 --> 01:12:19,519
version of the crypto binding tlv that's

1528
01:12:18,480 --> 01:12:21,360
like a document

1529
01:12:19,520 --> 01:12:22,560
update and what we could do in the

1530
01:12:21,360 --> 01:12:26,239
errata is

1531
01:12:22,560 --> 01:12:29,920
is clarify what the existing behavior is

1532
01:12:26,239 --> 01:12:30,639
um i mean if if existing implementations

1533
01:12:29,920 --> 01:12:34,320
are doing

1534
01:12:30,640 --> 01:12:36,560
you know shot or shot 256 and then

1535
01:12:34,320 --> 01:12:39,199
truncating it to 20

1536
01:12:36,560 --> 01:12:40,880
bytes and and those are existing

1537
01:12:39,199 --> 01:12:42,400
implementations that might be what the

1538
01:12:40,880 --> 01:12:44,480
errata

1539
01:12:42,400 --> 01:12:47,280
should say and then in a document update

1540
01:12:44,480 --> 01:12:51,120
we can add a new

1541
01:12:47,280 --> 01:12:54,800
tlb that or uh you know create a new

1542
01:12:51,120 --> 01:12:54,800
a new version of the crypto binding tld

1543
01:12:55,920 --> 01:12:59,120
i agree with that path forward and we

1544
01:12:58,159 --> 01:13:02,400
can

1545
01:12:59,120 --> 01:13:05,679
um we can clarify what the existing

1546
01:13:02,400 --> 01:13:06,239
implementations are doing on the list i

1547
01:13:05,679 --> 01:13:08,159
suppose

1548
01:13:06,239 --> 01:13:09,440
i just want to to raise that concern

1549
01:13:08,159 --> 01:13:11,920
here thank you

1550
01:13:09,440 --> 01:13:13,839
yeah that it would be awesome to to get

1551
01:13:11,920 --> 01:13:14,880
the

1552
01:13:13,840 --> 01:13:16,880
make sure that this is what

1553
01:13:14,880 --> 01:13:18,480
implementations are doing and then if

1554
01:13:16,880 --> 01:13:22,080
they are doing this then

1555
01:13:18,480 --> 01:13:22,080
that's probably the best path forward

1556
01:13:22,560 --> 01:13:29,280
elliot you are next hey thanks very much

1557
01:13:26,159 --> 01:13:30,320
um this is just a weird ietf cause i'm

1558
01:13:29,280 --> 01:13:32,000
i'm trying to follow

1559
01:13:30,320 --> 01:13:33,440
two rooms at once i'm supposed to speak

1560
01:13:32,000 --> 01:13:37,120
in another

1561
01:13:33,440 --> 01:13:40,320
um first joe

1562
01:13:37,120 --> 01:13:43,760
and jorge and oleg

1563
01:13:40,320 --> 01:13:46,239
thank you for all of your work on this

1564
01:13:43,760 --> 01:13:48,080
and it was a lot of work and it took a

1565
01:13:46,239 --> 01:13:49,919
lot of effort to just

1566
01:13:48,080 --> 01:13:51,760
get all get slogged through all these

1567
01:13:49,920 --> 01:13:53,199
and a thanks to yoni even though he's

1568
01:13:51,760 --> 01:13:57,040
not here

1569
01:13:53,199 --> 01:13:57,599
um first i agree with the last point

1570
01:13:57,040 --> 01:14:00,560
that

1571
01:13:57,600 --> 01:14:02,080
um that one should be hold for update

1572
01:14:00,560 --> 01:14:03,120
but the reason i got on the microphone

1573
01:14:02,080 --> 01:14:05,040
was to say

1574
01:14:03,120 --> 01:14:06,480
and now that we're getting through these

1575
01:14:05,040 --> 01:14:09,360
i want to unstick the

1576
01:14:06,480 --> 01:14:10,080
the deep update i didn't want i couldn't

1577
01:14:09,360 --> 01:14:11,519
do

1578
01:14:10,080 --> 01:14:13,120
i didn't think we should start that

1579
01:14:11,520 --> 01:14:15,120
until we got until we slogged through

1580
01:14:13,120 --> 01:14:17,840
these i think that was the general sense

1581
01:14:15,120 --> 01:14:19,040
i think you you said uh a meeting or two

1582
01:14:17,840 --> 01:14:20,080
ago that was the general sense of the

1583
01:14:19,040 --> 01:14:21,600
working group that

1584
01:14:20,080 --> 01:14:23,360
we should we should slog through these

1585
01:14:21,600 --> 01:14:26,480
and then do the deep update

1586
01:14:23,360 --> 01:14:28,000
and so now that we've done that um i'll

1587
01:14:26,480 --> 01:14:29,360
unstick that trap but i think we're

1588
01:14:28,000 --> 01:14:31,520
probably going to rewrite it from what

1589
01:14:29,360 --> 01:14:33,599
was a sort of a brewski oriented draft

1590
01:14:31,520 --> 01:14:34,400
to more of just a deep update draft with

1591
01:14:33,600 --> 01:14:37,520
a cup

1592
01:14:34,400 --> 01:14:40,879
with a couple extra tlbs what i'd

1593
01:14:37,520 --> 01:14:44,080
like to do is invite um you know jorge

1594
01:14:40,880 --> 01:14:44,960
and yoni and others to to really um work

1595
01:14:44,080 --> 01:14:47,199
with me on that

1596
01:14:44,960 --> 01:14:48,320
so that as as we go through we can make

1597
01:14:47,199 --> 01:14:50,719
sure that

1598
01:14:48,320 --> 01:14:52,080
um all of the errata get properly

1599
01:14:50,719 --> 01:14:54,080
incorporated in

1600
01:14:52,080 --> 01:14:55,360
that we're making sure that we're

1601
01:14:54,080 --> 01:14:58,640
comfortable with

1602
01:14:55,360 --> 01:15:00,960
1.3 there are a couple of

1603
01:14:58,640 --> 01:15:02,480
authors on the draft already dan harkins

1604
01:15:00,960 --> 01:15:04,080
is on it

1605
01:15:02,480 --> 01:15:06,080
i think owen is on it and a couple of

1606
01:15:04,080 --> 01:15:07,760
others we'll probably want to

1607
01:15:06,080 --> 01:15:09,360
incorporate a few other things to make

1608
01:15:07,760 --> 01:15:12,880
sure for instance that the

1609
01:15:09,360 --> 01:15:15,360
the poke work is is incorporated

1610
01:15:12,880 --> 01:15:16,800
depending on you know or or that we can

1611
01:15:15,360 --> 01:15:20,239
easily update

1612
01:15:16,800 --> 01:15:22,080
on top of uh the update as it were

1613
01:15:20,239 --> 01:15:23,440
with with it with a separate drop for

1614
01:15:22,080 --> 01:15:25,440
poke and we can make some decisions

1615
01:15:23,440 --> 01:15:28,559
about that depending on timing

1616
01:15:25,440 --> 01:15:30,000
so um again uh thanks for all the work

1617
01:15:28,560 --> 01:15:33,040
it was it was a lot of work and i

1618
01:15:30,000 --> 01:15:33,040
personally appreciate it

1619
01:15:34,159 --> 01:15:37,679
great yeah it'll be it'll be good to

1620
01:15:36,480 --> 01:15:40,879
kind of

1621
01:15:37,679 --> 01:15:42,960
get our revision going i think

1622
01:15:40,880 --> 01:15:44,480
um especially now that we have

1623
01:15:42,960 --> 01:15:46,320
implementations i think

1624
01:15:44,480 --> 01:15:48,159
the this experience with teep really

1625
01:15:46,320 --> 01:15:48,639
solidifies i think the areas where we

1626
01:15:48,159 --> 01:15:51,679
had

1627
01:15:48,640 --> 01:15:52,560
most of the problems are areas uh which

1628
01:15:51,679 --> 01:15:54,960
were not

1629
01:15:52,560 --> 01:15:55,600
did not receive as much implementation

1630
01:15:54,960 --> 01:15:59,040
at the time

1631
01:15:55,600 --> 01:16:01,760
and so implementation is is key in

1632
01:15:59,040 --> 01:16:02,560
when we're working through these issues

1633
01:16:01,760 --> 01:16:05,199
absolutely

1634
01:16:02,560 --> 01:16:06,880
so again that you're absolutely right

1635
01:16:05,199 --> 01:16:09,519
there has to be code

1636
01:16:06,880 --> 01:16:09,520
totally agree

1637
01:16:12,480 --> 01:16:16,080
[Music]

1638
01:16:13,840 --> 01:16:18,159
all right i think there are a couple

1639
01:16:16,080 --> 01:16:22,159
items to take so jorge thanks for

1640
01:16:18,159 --> 01:16:25,440
for raising that issue and um

1641
01:16:22,159 --> 01:16:26,639
we will uh you know take take a look at

1642
01:16:25,440 --> 01:16:27,919
what's on the list make sure our

1643
01:16:26,640 --> 01:16:30,000
implementations are aligned

1644
01:16:27,920 --> 01:16:32,000
and i think there's one other kind of

1645
01:16:30,000 --> 01:16:33,679
more editorial change we could make to

1646
01:16:32,000 --> 01:16:37,280
to one of the erratas but i think

1647
01:16:33,679 --> 01:16:40,000
that'll help understandability so

1648
01:16:37,280 --> 01:16:42,000
awesome we're almost i see the light at

1649
01:16:40,000 --> 01:16:45,120
the end of the tunnel

1650
01:16:42,000 --> 01:16:48,640
roman is there any other information

1651
01:16:45,120 --> 01:16:49,360
like that you you will need i mean i can

1652
01:16:48,640 --> 01:16:52,239
work with you

1653
01:16:49,360 --> 01:16:54,960
on what format is best for you and how

1654
01:16:52,239 --> 01:16:56,639
we need to split these up or whatnot

1655
01:16:54,960 --> 01:16:59,360
but is there anything you think we need

1656
01:16:56,640 --> 01:17:02,880
from the working group at this time

1657
01:16:59,360 --> 01:17:04,080
uh no all i can really do is reiterate

1658
01:17:02,880 --> 01:17:06,400
the things that elliot said

1659
01:17:04,080 --> 01:17:08,080
what what's happening here is phenomenal

1660
01:17:06,400 --> 01:17:10,000
uh i love the process kind of with

1661
01:17:08,080 --> 01:17:11,679
github kind of on the clarity

1662
01:17:10,000 --> 01:17:14,000
for every other working group i have no

1663
01:17:11,679 --> 01:17:14,400
one works the errata so consistently is

1664
01:17:14,000 --> 01:17:16,480
this

1665
01:17:14,400 --> 01:17:18,159
so this is a tremendous amount of help i

1666
01:17:16,480 --> 01:17:19,599
i don't really need anything more other

1667
01:17:18,159 --> 01:17:21,920
than i may have kind of the occasional

1668
01:17:19,600 --> 01:17:23,920
questions when i personally drop it into

1669
01:17:21,920 --> 01:17:25,840
uh into the interface but it looks like

1670
01:17:23,920 --> 01:17:27,440
you have all the necessary things and

1671
01:17:25,840 --> 01:17:28,560
you everyone we've walked it through the

1672
01:17:27,440 --> 01:17:29,519
working group to make sure that we're

1673
01:17:28,560 --> 01:17:31,520
all on the same page

1674
01:17:29,520 --> 01:17:32,880
so this is phenomenal and when you say

1675
01:17:31,520 --> 01:17:34,719
you're done i mean i'll i'll start

1676
01:17:32,880 --> 01:17:38,560
dropping it into the errata interface

1677
01:17:34,719 --> 01:17:38,560
thank you really again this is awesome

1678
01:17:38,800 --> 01:17:44,159
okay cool all right so i think we're

1679
01:17:42,800 --> 01:17:47,520
done with this for the time being

1680
01:17:44,159 --> 01:17:51,280
and i think the next thing was uh an

1681
01:17:47,520 --> 01:17:52,080
update some updates on eep noob do you

1682
01:17:51,280 --> 01:17:55,440
wanna

1683
01:17:52,080 --> 01:17:57,440
are you giving those mohit uh yeah

1684
01:17:55,440 --> 01:17:58,719
uh if you can share the slides that

1685
01:17:57,440 --> 01:18:01,440
would be great eliot

1686
01:17:58,719 --> 01:18:04,480
by the way are you still on the queue or

1687
01:18:01,440 --> 01:18:04,480
just accidental

1688
01:18:14,159 --> 01:18:17,519
uh so yeah hi this is a short update on

1689
01:18:17,120 --> 01:18:20,400
uh

1690
01:18:17,520 --> 01:18:22,719
eat noob i think by now uh people are

1691
01:18:20,400 --> 01:18:27,839
familiar with what this

1692
01:18:22,719 --> 01:18:27,840
method does uh so next slide please

1693
01:18:27,920 --> 01:18:32,159
yeah generic authentication framework

1694
01:18:30,080 --> 01:18:34,640
and there's no methods that do ob

1695
01:18:32,159 --> 01:18:36,480
authentication so yeah this is a new

1696
01:18:34,640 --> 01:18:40,880
method for doing that

1697
01:18:36,480 --> 01:18:44,000
uh next slide

1698
01:18:40,880 --> 01:18:46,880
uh it basically does

1699
01:18:44,000 --> 01:18:47,840
uh user you uses a user assistant out of

1700
01:18:46,880 --> 01:18:49,760
band uh

1701
01:18:47,840 --> 01:18:51,440
authentication in either direction

1702
01:18:49,760 --> 01:18:53,360
whether it's from the peer to the server

1703
01:18:51,440 --> 01:18:57,120
or from the server to the peer

1704
01:18:53,360 --> 01:18:59,120
and supports basically any type of ob

1705
01:18:57,120 --> 01:19:02,080
channel whether it's qr codes and dev

1706
01:18:59,120 --> 01:19:04,239
tag audio blinking leds and so on

1707
01:19:02,080 --> 01:19:06,080
and the user doesn't have to perform

1708
01:19:04,239 --> 01:19:08,639
this step

1709
01:19:06,080 --> 01:19:10,480
every time because we have this fast

1710
01:19:08,640 --> 01:19:13,679
reauthentication where

1711
01:19:10,480 --> 01:19:16,799
previously registered devices

1712
01:19:13,679 --> 01:19:18,719
can get fresh keys without further user

1713
01:19:16,800 --> 01:19:22,560
interaction

1714
01:19:18,719 --> 01:19:25,840
next slide

1715
01:19:22,560 --> 01:19:29,760
so this is the rather long timeline of

1716
01:19:25,840 --> 01:19:31,760
uh it noob but it seems we are getting

1717
01:19:29,760 --> 01:19:33,840
towards the end and hopefully there is

1718
01:19:31,760 --> 01:19:36,000
light at the end of the tunnel

1719
01:19:33,840 --> 01:19:36,960
so it has been around for a while there

1720
01:19:36,000 --> 01:19:39,440
are several

1721
01:19:36,960 --> 01:19:40,640
implementations we adopted it as a

1722
01:19:39,440 --> 01:19:43,678
working group item in

1723
01:19:40,640 --> 01:19:46,800
uh earlier this year uh

1724
01:19:43,679 --> 01:19:48,880
and like the draft already was stable

1725
01:19:46,800 --> 01:19:52,800
when it was adopted and now

1726
01:19:48,880 --> 01:19:55,280
like we got like reviews from harness

1727
01:19:52,800 --> 01:19:56,560
from the iot directorate from security

1728
01:19:55,280 --> 01:19:58,800
directorate and

1729
01:19:56,560 --> 01:19:59,920
basically the working group portions

1730
01:19:58,800 --> 01:20:03,920
have been

1731
01:19:59,920 --> 01:20:07,120
updating the draft based on on these uh

1732
01:20:03,920 --> 01:20:08,560
reviews so now we are at uh working

1733
01:20:07,120 --> 01:20:11,599
group version two so

1734
01:20:08,560 --> 01:20:14,239
uh that's the stage we are currently at

1735
01:20:11,600 --> 01:20:14,239
next slide

1736
01:20:15,360 --> 01:20:19,040
uh at least we the authors believe that

1737
01:20:18,080 --> 01:20:21,920
it's

1738
01:20:19,040 --> 01:20:22,400
ready there's uh three implementations

1739
01:20:21,920 --> 01:20:25,360
two

1740
01:20:22,400 --> 01:20:27,839
two of them in uh wps applicant and host

1741
01:20:25,360 --> 01:20:31,280
apd and one in contiki

1742
01:20:27,840 --> 01:20:34,000
uh there's formal models in mcrl2

1743
01:20:31,280 --> 01:20:36,239
which is basically for checking the

1744
01:20:34,000 --> 01:20:39,199
state machines and dos resistance

1745
01:20:36,239 --> 01:20:40,080
and pro verify to verify the security

1746
01:20:39,199 --> 01:20:42,239
goals

1747
01:20:40,080 --> 01:20:43,280
so the difference between the two

1748
01:20:42,239 --> 01:20:45,919
implementations

1749
01:20:43,280 --> 01:20:47,440
in supplicant host apd the first one is

1750
01:20:45,920 --> 01:20:50,480
more feature rich

1751
01:20:47,440 --> 01:20:54,799
so it does all sorts of things like nfc

1752
01:20:50,480 --> 01:20:57,839
from peer to server and server to peer

1753
01:20:54,800 --> 01:21:00,800
whereas the the third implementation on

1754
01:20:57,840 --> 01:21:02,800
this bullet list is i would say more

1755
01:21:00,800 --> 01:21:07,040
streamlined and stable and less

1756
01:21:02,800 --> 01:21:09,600
feature-rich so it's

1757
01:21:07,040 --> 01:21:10,239
i would say like less bugs and less

1758
01:21:09,600 --> 01:21:13,679
features

1759
01:21:10,239 --> 01:21:15,120
and more stable implementation which was

1760
01:21:13,679 --> 01:21:17,040
completely rewritten

1761
01:21:15,120 --> 01:21:19,120
earlier this year after the draft was

1762
01:21:17,040 --> 01:21:21,600
working group adopted

1763
01:21:19,120 --> 01:21:23,519
so the first implementation was uh done

1764
01:21:21,600 --> 01:21:25,199
mostly by us the authors

1765
01:21:23,520 --> 01:21:27,920
whereas the second and third have been

1766
01:21:25,199 --> 01:21:30,480
done by other folks

1767
01:21:27,920 --> 01:21:30,480
next slide

1768
01:21:32,000 --> 01:21:36,400
so updates since the last itf we have

1769
01:21:34,719 --> 01:21:40,320
been receiving like

1770
01:21:36,400 --> 01:21:41,280
private emails basically asking

1771
01:21:40,320 --> 01:21:44,320
questions or

1772
01:21:41,280 --> 01:21:46,159
opening issues on github so we got like

1773
01:21:44,320 --> 01:21:48,799
a email from

1774
01:21:46,159 --> 01:21:49,599
miguel at analog devices and they are

1775
01:21:48,800 --> 01:21:53,280
working on an

1776
01:21:49,600 --> 01:21:56,560
internal proof of concept of efp noob

1777
01:21:53,280 --> 01:21:58,719
and basically

1778
01:21:56,560 --> 01:22:00,639
we received some questions on how to set

1779
01:21:58,719 --> 01:22:03,360
up the implementation

1780
01:22:00,639 --> 01:22:05,760
and there were some minor issues with

1781
01:22:03,360 --> 01:22:08,880
the reconnect exchange not in the spec

1782
01:22:05,760 --> 01:22:10,880
but mostly in the implementation so

1783
01:22:08,880 --> 01:22:12,560
what was happening that the the

1784
01:22:10,880 --> 01:22:14,960
reconnect exchange was

1785
01:22:12,560 --> 01:22:16,159
uh not triggered in the state machine at

1786
01:22:14,960 --> 01:22:18,800
the right time and

1787
01:22:16,159 --> 01:22:19,519
this caused the reconnect exchange to

1788
01:22:18,800 --> 01:22:22,719
fail and

1789
01:22:19,520 --> 01:22:24,560
uh miguel from analog devices then

1790
01:22:22,719 --> 01:22:27,600
actually send the pull requests

1791
01:22:24,560 --> 01:22:29,360
to the implementation there's several

1792
01:22:27,600 --> 01:22:31,600
others i'm not sure if they want to be

1793
01:22:29,360 --> 01:22:33,920
named here and listed here

1794
01:22:31,600 --> 01:22:35,679
some of course are university projects

1795
01:22:33,920 --> 01:22:38,719
which are obviously nice but

1796
01:22:35,679 --> 01:22:43,120
maybe the the uh

1797
01:22:38,719 --> 01:22:46,320
i some of these poc implementations in

1798
01:22:43,120 --> 01:22:47,519
various uh companies uh sound more

1799
01:22:46,320 --> 01:22:51,679
interesting and have

1800
01:22:47,520 --> 01:22:54,080
more like interesting use cases where

1801
01:22:51,679 --> 01:22:56,960
for example one of the emails that we

1802
01:22:54,080 --> 01:22:59,679
the authors got was

1803
01:22:56,960 --> 01:23:01,360
that the deployment scenario is we come

1804
01:22:59,679 --> 01:23:02,639
with our own access point and then

1805
01:23:01,360 --> 01:23:05,360
configure the devices

1806
01:23:02,639 --> 01:23:07,440
and then take away the access point and

1807
01:23:05,360 --> 01:23:09,360
transfer the devices

1808
01:23:07,440 --> 01:23:10,799
to to a different access point at the

1809
01:23:09,360 --> 01:23:13,199
customer side

1810
01:23:10,800 --> 01:23:14,880
which i thought was interesting and it

1811
01:23:13,199 --> 01:23:17,599
seems that

1812
01:23:14,880 --> 01:23:19,600
thanks to eep in framework in general we

1813
01:23:17,600 --> 01:23:21,920
don't have issues with

1814
01:23:19,600 --> 01:23:23,199
these kind of scenarios where the access

1815
01:23:21,920 --> 01:23:25,040
point

1816
01:23:23,199 --> 01:23:27,360
there is a temporary access point for

1817
01:23:25,040 --> 01:23:28,880
configuring but then the devices join

1818
01:23:27,360 --> 01:23:31,440
the actual access point on

1819
01:23:28,880 --> 01:23:31,440
on site

1820
01:23:32,480 --> 01:23:35,839
next slide

1821
01:23:41,280 --> 01:23:44,960
so the only remaining issue i think that

1822
01:23:44,239 --> 01:23:48,000
has

1823
01:23:44,960 --> 01:23:50,239
now been on the table

1824
01:23:48,000 --> 01:23:51,199
was uh basically doing sea bar versus

1825
01:23:50,239 --> 01:23:52,959
json

1826
01:23:51,199 --> 01:23:54,559
and this came up in dev talor's

1827
01:23:52,960 --> 01:23:56,239
directorate review and as well as

1828
01:23:54,560 --> 01:23:58,800
michael richardson who was

1829
01:23:56,239 --> 01:24:00,718
saying uh whether we should move to

1830
01:23:58,800 --> 01:24:02,639
seaboard and

1831
01:24:00,719 --> 01:24:04,000
we realized that seabor is going to be a

1832
01:24:02,639 --> 01:24:07,360
major change

1833
01:24:04,000 --> 01:24:08,800
uh at this stage uh and of course we

1834
01:24:07,360 --> 01:24:12,000
could do simple mapping of

1835
01:24:08,800 --> 01:24:12,960
uh json to seabor but uh that doesn't

1836
01:24:12,000 --> 01:24:15,920
really get you

1837
01:24:12,960 --> 01:24:17,840
the gains that you would get from like

1838
01:24:15,920 --> 01:24:20,080
doing native c bar and doing the entire

1839
01:24:17,840 --> 01:24:24,080
specification in cddl

1840
01:24:20,080 --> 01:24:27,280
and since uh we are seeing some of these

1841
01:24:24,080 --> 01:24:30,320
uh deployments that are creeping up at

1842
01:24:27,280 --> 01:24:33,040
at this stage uh maybe it's fine to

1843
01:24:30,320 --> 01:24:33,679
just stick with json and let this go

1844
01:24:33,040 --> 01:24:36,960
through and

1845
01:24:33,679 --> 01:24:38,800
of course uh eep new has secure version

1846
01:24:36,960 --> 01:24:41,679
negotiation so you can

1847
01:24:38,800 --> 01:24:42,639
perhaps uh think of a future version of

1848
01:24:41,679 --> 01:24:45,520
heap nowhere

1849
01:24:42,639 --> 01:24:47,600
which supports seaboard although i think

1850
01:24:45,520 --> 01:24:49,600
we will have a presentation after this

1851
01:24:47,600 --> 01:24:50,320
on epaddock which perhaps is more

1852
01:24:49,600 --> 01:24:53,600
suitable

1853
01:24:50,320 --> 01:24:56,480
for the extremely constrained devices

1854
01:24:53,600 --> 01:24:57,280
where you know seabor is more likely to

1855
01:24:56,480 --> 01:25:00,559
be

1856
01:24:57,280 --> 01:25:03,599
a necessity rather than

1857
01:25:00,560 --> 01:25:05,920
the case of eat noob so

1858
01:25:03,600 --> 01:25:09,199
for now given that you know we have

1859
01:25:05,920 --> 01:25:12,080
these deployments coming up

1860
01:25:09,199 --> 01:25:12,960
i'm a bit concerned that moving this to

1861
01:25:12,080 --> 01:25:17,040
seabor

1862
01:25:12,960 --> 01:25:19,120
is not worth the benefits

1863
01:25:17,040 --> 01:25:21,040
and i mean if there is strong requests

1864
01:25:19,120 --> 01:25:23,120
in the future this can be done but at

1865
01:25:21,040 --> 01:25:26,320
this stage it feels like

1866
01:25:23,120 --> 01:25:26,800
the really constrained devices may

1867
01:25:26,320 --> 01:25:30,400
prefer

1868
01:25:26,800 --> 01:25:32,960
then to go with the ad doc for example

1869
01:25:30,400 --> 01:25:32,960
next slide

1870
01:25:35,920 --> 01:25:40,880
and hopefully this is my this is my last

1871
01:25:38,880 --> 01:25:43,280
slide so we have had early reviews from

1872
01:25:40,880 --> 01:25:47,199
iot and security directorate

1873
01:25:43,280 --> 01:25:48,719
uh we got uh inr okay with the current

1874
01:25:47,199 --> 01:25:51,678
request whether it's for the

1875
01:25:48,719 --> 01:25:52,320
method type or the special domain name

1876
01:25:51,679 --> 01:25:54,719
and

1877
01:25:52,320 --> 01:25:55,440
i would like to thank wes hardiker from

1878
01:25:54,719 --> 01:25:58,719
the iab

1879
01:25:55,440 --> 01:26:01,120
who kind of did the hand holding and

1880
01:25:58,719 --> 01:26:04,080
explained the process and

1881
01:26:01,120 --> 01:26:06,159
it's nice that i and i can do this early

1882
01:26:04,080 --> 01:26:08,639
reviews to

1883
01:26:06,159 --> 01:26:10,638
confirm and weed out any issues in the

1884
01:26:08,639 --> 01:26:13,679
inr requests section

1885
01:26:10,639 --> 01:26:16,080
so the authors believe it's ready for

1886
01:26:13,679 --> 01:26:19,920
our last call

1887
01:26:16,080 --> 01:26:19,920
if there are any comments i'm happy to

1888
01:26:20,840 --> 01:26:23,840
answer

1889
01:26:26,000 --> 01:26:30,000
in particular i'm interested in anybody

1890
01:26:27,920 --> 01:26:33,199
has any strong

1891
01:26:30,000 --> 01:26:35,920
uh feelings about

1892
01:26:33,199 --> 01:26:36,320
just keeping everything in json it

1893
01:26:35,920 --> 01:26:39,600
sounds

1894
01:26:36,320 --> 01:26:41,199
to me like that's a good way forward but

1895
01:26:39,600 --> 01:26:51,840
i just want to make sure that we don't

1896
01:26:41,199 --> 01:26:51,839
have any strong objection to that

1897
01:26:57,520 --> 01:27:04,080
i don't see anyone at the queue so

1898
01:27:00,719 --> 01:27:05,040
maybe joe if you can do the last call

1899
01:27:04,080 --> 01:27:07,519
then

1900
01:27:05,040 --> 01:27:09,600
i'm sure we will have some other you

1901
01:27:07,520 --> 01:27:10,639
know issues to sort out when the reviews

1902
01:27:09,600 --> 01:27:14,480
come in from other

1903
01:27:10,639 --> 01:27:16,719
directorates during the last call but

1904
01:27:14,480 --> 01:27:20,159
unless there is something major we could

1905
01:27:16,719 --> 01:27:23,520
start the last working group last call

1906
01:27:20,159 --> 01:27:23,519
yeah i think that's a good idea

1907
01:27:24,800 --> 01:27:28,080
all right i think we are doing great on

1908
01:27:26,880 --> 01:27:33,840
our time so

1909
01:27:28,080 --> 01:27:33,840
next is a dock

1910
01:27:41,679 --> 01:27:48,880
hi eduardo hi can you hear me

1911
01:27:44,960 --> 01:27:50,960
yes we can go ahead wait thank you

1912
01:27:48,880 --> 01:27:52,000
well thank you for having me today i am

1913
01:27:50,960 --> 01:27:54,000
edward ingress

1914
01:27:52,000 --> 01:27:56,080
and i'm going to present this draft

1915
01:27:54,000 --> 01:27:59,520
published with dan garcia

1916
01:27:56,080 --> 01:28:00,000
and rafa marin the draft includes the

1917
01:27:59,520 --> 01:28:03,440
initial

1918
01:28:00,000 --> 01:28:05,760
idea of the new method for it

1919
01:28:03,440 --> 01:28:06,879
based on adult country authentication

1920
01:28:05,760 --> 01:28:09,920
protocol

1921
01:28:06,880 --> 01:28:09,920
exercise live please

1922
01:28:11,520 --> 01:28:14,719
our goal is to design an alternative

1923
01:28:14,080 --> 01:28:17,920
solution

1924
01:28:14,719 --> 01:28:20,719
for constrained devices using nedoc

1925
01:28:17,920 --> 01:28:21,760
edoc is a protocol that is currently

1926
01:28:20,719 --> 01:28:24,880
under development

1927
01:28:21,760 --> 01:28:26,000
at the lake working group and in this

1928
01:28:24,880 --> 01:28:28,480
working group

1929
01:28:26,000 --> 01:28:30,080
they intend to produce a lightweight

1930
01:28:28,480 --> 01:28:33,919
authenticate the

1931
01:28:30,080 --> 01:28:36,400
key exchange for oscar usage

1932
01:28:33,920 --> 01:28:37,199
and they use the silver protocol and

1933
01:28:36,400 --> 01:28:40,080
recommend the

1934
01:28:37,199 --> 01:28:40,960
use of co-op to transport messages they

1935
01:28:40,080 --> 01:28:44,000
also want to

1936
01:28:40,960 --> 01:28:47,679
provide entering protections you need to

1937
01:28:44,000 --> 01:28:49,840
more information you can check the

1938
01:28:47,679 --> 01:28:52,480
the drafts and the working group next

1939
01:28:49,840 --> 01:28:52,480
slide please

1940
01:28:52,639 --> 01:28:56,400
in this first version of the draft we

1941
01:28:55,120 --> 01:29:00,239
established that the

1942
01:28:56,400 --> 01:29:03,519
peer acts as an edoc initiator

1943
01:29:00,239 --> 01:29:06,638
and the server acts with the role of our

1944
01:29:03,520 --> 01:29:09,760
responder so on that basis

1945
01:29:06,639 --> 01:29:12,000
the message exchange for the ip method

1946
01:29:09,760 --> 01:29:13,120
starts with request and response

1947
01:29:12,000 --> 01:29:16,320
identity

1948
01:29:13,120 --> 01:29:19,360
then the authenticator send

1949
01:29:16,320 --> 01:29:22,799
a needle start message with no data

1950
01:29:19,360 --> 01:29:26,000
and add it at this point since the

1951
01:29:22,800 --> 01:29:27,040
pair is the initiator it starts the head

1952
01:29:26,000 --> 01:29:29,920
of the change by

1953
01:29:27,040 --> 01:29:30,320
sending the three corresponding messages

1954
01:29:29,920 --> 01:29:33,199
and

1955
01:29:30,320 --> 01:29:34,080
ends with an ip success or failure

1956
01:29:33,199 --> 01:29:38,000
message

1957
01:29:34,080 --> 01:29:41,760
next slide can i ask a question here

1958
01:29:38,000 --> 01:29:41,760
of course uh so

1959
01:29:41,840 --> 01:29:46,880
like now that i see this orange message

1960
01:29:47,120 --> 01:29:52,559
isn't it like a dock is a three message

1961
01:29:50,480 --> 01:29:55,919
protocol but now we have the fourth

1962
01:29:52,560 --> 01:29:58,239
message and you would you might be able

1963
01:29:55,920 --> 01:30:00,159
to get rid of this extra message

1964
01:29:58,239 --> 01:30:02,080
by just making the server as the

1965
01:30:00,159 --> 01:30:05,920
initiator is there

1966
01:30:02,080 --> 01:30:07,920
like i'm wondering is there any reason

1967
01:30:05,920 --> 01:30:10,560
not to do that

1968
01:30:07,920 --> 01:30:11,679
uh yeah that's a great question actually

1969
01:30:10,560 --> 01:30:14,800
we are

1970
01:30:11,679 --> 01:30:17,440
we have that in mind uh we wanted to

1971
01:30:14,800 --> 01:30:20,480
to plan this question here uh there are

1972
01:30:17,440 --> 01:30:22,960
two options of course we can uh

1973
01:30:20,480 --> 01:30:24,000
use the server as the initial as the

1974
01:30:22,960 --> 01:30:27,280
initiator

1975
01:30:24,000 --> 01:30:32,320
so the fourth message will be a

1976
01:30:27,280 --> 01:30:36,000
message with data we will have to

1977
01:30:32,320 --> 01:30:36,960
define it correctly but of course yes we

1978
01:30:36,000 --> 01:30:38,800
can we can do it

1979
01:30:36,960 --> 01:30:40,560
starting with the servers as the

1980
01:30:38,800 --> 01:30:42,560
mediator

1981
01:30:40,560 --> 01:30:44,480
and we have john in the queue go ahead

1982
01:30:42,560 --> 01:30:48,719
john

1983
01:30:44,480 --> 01:30:49,678
yeah there are some privacy implication

1984
01:30:48,719 --> 01:30:53,280
by

1985
01:30:49,679 --> 01:30:56,560
changing who sends message one

1986
01:30:53,280 --> 01:31:00,400
um so in ad hoc

1987
01:30:56,560 --> 01:31:02,239
and all the similar protocols like tls

1988
01:31:00,400 --> 01:31:05,519
103 and

1989
01:31:02,239 --> 01:31:07,678
so on you you get so in

1990
01:31:05,520 --> 01:31:10,480
in this metric flow the server will send

1991
01:31:07,679 --> 01:31:11,199
its identity to basically anybody asking

1992
01:31:10,480 --> 01:31:14,559
sending

1993
01:31:11,199 --> 01:31:17,759
a doc message one uh so if you

1994
01:31:14,560 --> 01:31:18,239
return so you get active protection of

1995
01:31:17,760 --> 01:31:21,280
the

1996
01:31:18,239 --> 01:31:24,638
erp peers identity in this message

1997
01:31:21,280 --> 01:31:28,000
and only passive protection

1998
01:31:24,639 --> 01:31:29,360
of the server's identity if you reverse

1999
01:31:28,000 --> 01:31:31,040
the water you get

2000
01:31:29,360 --> 01:31:34,719
stronger protection of the service

2001
01:31:31,040 --> 01:31:34,719
identity and weaker of the pier

2002
01:31:35,040 --> 01:31:42,000
that makes yeah that makes sense

2003
01:31:38,719 --> 01:31:44,560
yeah in in that case i think the

2004
01:31:42,000 --> 01:31:45,040
current message flow is uh fine yeah

2005
01:31:44,560 --> 01:31:46,480
your

2006
01:31:45,040 --> 01:31:49,440
i think it's better to protect the

2007
01:31:46,480 --> 01:31:52,080
privacy of the peer

2008
01:31:49,440 --> 01:31:52,638
so yeah that's actually that's why we

2009
01:31:52,080 --> 01:31:56,639
started

2010
01:31:52,639 --> 01:32:00,800
uh including this version instead of

2011
01:31:56,639 --> 01:32:03,199
including the other option but

2012
01:32:00,800 --> 01:32:05,520
i mean i don't i don't know any use case

2013
01:32:03,199 --> 01:32:09,280
that we really need to put the

2014
01:32:05,520 --> 01:32:12,080
server as the administrator but

2015
01:32:09,280 --> 01:32:14,320
maybe the someone else has another use

2016
01:32:12,080 --> 01:32:14,320
case

2017
01:32:18,400 --> 01:32:25,599
yep thanks i guess thank you

2018
01:32:22,400 --> 01:32:28,719
so next slide okay thank you

2019
01:32:25,600 --> 01:32:29,120
so edok allows to define which protocol

2020
01:32:28,719 --> 01:32:31,920
is

2021
01:32:29,120 --> 01:32:32,960
responsible for ensuring the correlation

2022
01:32:31,920 --> 01:32:36,000
of messages

2023
01:32:32,960 --> 01:32:38,000
so either itself or the protocol

2024
01:32:36,000 --> 01:32:40,400
or the transport protocol sorry in this

2025
01:32:38,000 --> 01:32:41,679
case the if protocol is based on the

2026
01:32:40,400 --> 01:32:45,280
locasted procedure

2027
01:32:41,679 --> 01:32:48,320
and guarantees the ordering of messages

2028
01:32:45,280 --> 01:32:50,480
therefore edoc doesn't need to use its

2029
01:32:48,320 --> 01:32:52,960
internal mechanism for correlating

2030
01:32:50,480 --> 01:32:53,599
messages that means that we set the

2031
01:32:52,960 --> 01:32:57,920
variable

2032
01:32:53,600 --> 01:33:00,639
core to the fixed value 3

2033
01:32:57,920 --> 01:33:00,639
next slide

2034
01:33:01,600 --> 01:33:03,760
so

2035
01:33:05,040 --> 01:33:10,639
my intention in this presentation is to

2036
01:33:08,880 --> 01:33:12,639
actually present the idea to the

2037
01:33:10,639 --> 01:33:16,320
community to get

2038
01:33:12,639 --> 01:33:17,120
your feedback and our next steps are to

2039
01:33:16,320 --> 01:33:20,880
add the

2040
01:33:17,120 --> 01:33:23,280
feedback received continue adding the

2041
01:33:20,880 --> 01:33:24,400
protocol details and work on making the

2042
01:33:23,280 --> 01:33:27,679
design compatible

2043
01:33:24,400 --> 01:33:33,120
with this draft based on

2044
01:33:27,679 --> 01:33:35,440
app for radios next slide please

2045
01:33:33,120 --> 01:33:37,760
and to end this presentation i will be

2046
01:33:35,440 --> 01:33:39,440
pleased to hear from the participants

2047
01:33:37,760 --> 01:33:41,840
whether they think this draft makes

2048
01:33:39,440 --> 01:33:44,320
sense as a working group item

2049
01:33:41,840 --> 01:33:45,520
or not and please be welcome for any

2050
01:33:44,320 --> 01:33:50,080
other comments

2051
01:33:45,520 --> 01:33:53,120
thank you

2052
01:33:50,080 --> 01:33:53,120
are you still in the queue

2053
01:33:54,560 --> 01:33:56,800
no

2054
01:34:02,840 --> 01:34:07,199
okay

2055
01:34:04,000 --> 01:34:08,320
uh so i i can say as an individual

2056
01:34:07,199 --> 01:34:11,599
participant

2057
01:34:08,320 --> 01:34:17,360
maybe uh some some at some point uh

2058
01:34:11,600 --> 01:34:17,360
why why not uh right now i think uh

2059
01:34:17,600 --> 01:34:27,280
it's maybe a little bit too early but uh

2060
01:34:22,560 --> 01:34:30,080
perhaps uh when they when a doc is

2061
01:34:27,280 --> 01:34:31,440
perhaps a little bit i don't know maybe

2062
01:34:30,080 --> 01:34:35,040
maybe one more right

2063
01:34:31,440 --> 01:34:37,519
cycle and maybe a dock is almost done

2064
01:34:35,040 --> 01:34:38,800
and then we can go start deploying a

2065
01:34:37,520 --> 01:34:42,960
dock in these other

2066
01:34:38,800 --> 01:34:43,920
protocols but uh doing that right now

2067
01:34:42,960 --> 01:34:45,520
maybe

2068
01:34:43,920 --> 01:34:47,280
i don't know at least personally i feel

2069
01:34:45,520 --> 01:34:51,280
it might be just slightly

2070
01:34:47,280 --> 01:34:54,239
early but maybe others have

2071
01:34:51,280 --> 01:34:54,239
differing opinions

2072
01:34:55,199 --> 01:34:58,080
okay okay

2073
01:34:59,199 --> 01:35:06,000
john go ahead uh i think

2074
01:35:03,199 --> 01:35:06,480
as support is draft i think it may be a

2075
01:35:06,000 --> 01:35:09,840
bit

2076
01:35:06,480 --> 01:35:09,839
too early to adopt it

2077
01:35:10,000 --> 01:35:17,280
ad hoc is now adopted by lake but

2078
01:35:13,040 --> 01:35:20,719
which means that you could work on it

2079
01:35:17,280 --> 01:35:24,080
in parallel but there's no hurry

2080
01:35:20,719 --> 01:35:29,840
it would still have to wait until lake

2081
01:35:24,080 --> 01:35:29,840
publishes ad hoc

2082
01:35:36,960 --> 01:35:39,360
okay

2083
01:35:40,639 --> 01:35:44,400
well i guess that's all uh thank you for

2084
01:35:43,119 --> 01:35:47,440
your comments

2085
01:35:44,400 --> 01:35:48,879
and and i think so far i will continue

2086
01:35:47,440 --> 01:35:52,159
working on parlor but

2087
01:35:48,880 --> 01:35:55,679
of course i understand your your opinion

2088
01:35:52,159 --> 01:35:58,719
that still there are many changes to be

2089
01:35:55,679 --> 01:35:58,719
done on edoc

2090
01:35:58,800 --> 01:36:02,639
so i will take that into account

2091
01:36:03,119 --> 01:36:08,639
yep i guess joe the next step is to

2092
01:36:05,600 --> 01:36:11,520
continue the discussion on this draft on

2093
01:36:08,639 --> 01:36:13,280
emu and lake whenever needed if there is

2094
01:36:11,520 --> 01:36:14,400
some requirements that epad dock

2095
01:36:13,280 --> 01:36:16,400
requires from

2096
01:36:14,400 --> 01:36:18,799
from a dog and the lake working group

2097
01:36:16,400 --> 01:36:21,599
then of course it should not wait

2098
01:36:18,800 --> 01:36:22,960
for a dog to finish but perhaps we can

2099
01:36:21,600 --> 01:36:26,400
revisit this

2100
01:36:22,960 --> 01:36:26,960
next next idea yeah i think that makes

2101
01:36:26,400 --> 01:36:30,320
sense

2102
01:36:26,960 --> 01:36:31,119
to to kind of you know just let let ad

2103
01:36:30,320 --> 01:36:33,759
hoc uh

2104
01:36:31,119 --> 01:36:34,480
kind of go through a cycle at least to

2105
01:36:33,760 --> 01:36:37,520
kind of get

2106
01:36:34,480 --> 01:36:38,000
get it a little more stable and then you

2107
01:36:37,520 --> 01:36:40,400
know

2108
01:36:38,000 --> 01:36:41,119
we'll you know see if any additional

2109
01:36:40,400 --> 01:36:42,879
issues pop

2110
01:36:41,119 --> 01:36:46,080
out of that and and then we can start

2111
01:36:42,880 --> 01:36:46,080
thinking about adoption

2112
01:36:47,040 --> 01:36:53,840
okay thank you

2113
01:36:59,199 --> 01:37:04,480
all right i think that is the end of our

2114
01:37:02,000 --> 01:37:07,760
agenda

2115
01:37:04,480 --> 01:37:10,959
yep indeed uh we seem to be

2116
01:37:07,760 --> 01:37:11,280
20 minutes ahead of time does anyone

2117
01:37:10,960 --> 01:37:15,600
have

2118
01:37:11,280 --> 01:37:15,599
some comments uh before we close the

2119
01:37:18,840 --> 01:37:26,480
meeting

2120
01:37:21,520 --> 01:37:26,480
any words of wisdom before we part

2121
01:37:28,639 --> 01:37:31,760
all right well i guess we'll see you at

2122
01:37:31,199 --> 01:37:35,519
uh

2123
01:37:31,760 --> 01:37:38,960
intf 110 or perhaps at some interim

2124
01:37:35,520 --> 01:37:41,520
uh meeting between then uh

2125
01:37:38,960 --> 01:37:42,880
yeah i would just like to thank uh roman

2126
01:37:41,520 --> 01:37:45,679
for taking the notes

2127
01:37:42,880 --> 01:37:45,679
thank you roman

2128
01:37:46,000 --> 01:37:49,840
yeah thanks

2129
01:37:50,239 --> 01:37:53,759
it was only me in the beginning others

2130
01:37:51,920 --> 01:37:55,520
helped for the rest of it i i only got

2131
01:37:53,760 --> 01:37:56,159
the first two sessions so only a little

2132
01:37:55,520 --> 01:38:03,360
bit of credit

2133
01:37:56,159 --> 01:38:06,559
thank you you broke the ice though so

2134
01:38:03,360 --> 01:38:09,360
all right we'll see you in gather town

2135
01:38:06,560 --> 01:38:09,360
or somewhere else

2136
01:38:09,600 --> 01:38:17,840
bye bye bye

2137
01:38:33,199 --> 01:38:35,280
you

