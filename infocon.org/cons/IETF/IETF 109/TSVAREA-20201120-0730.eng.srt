1
00:00:05,040 --> 00:00:08,080
my terrible

2
00:00:05,920 --> 00:00:09,200
bone conducting headphone micro uh mic

3
00:00:08,080 --> 00:00:10,480
there i'm like okay i'm gonna go

4
00:00:09,200 --> 00:00:12,079
actually go ahead and invest it

5
00:00:10,480 --> 00:00:16,400
oh wait my jabber's broken i have to

6
00:00:12,080 --> 00:00:20,800
refresh one moment

7
00:00:16,400 --> 00:00:24,240
bye martin hopefully we'll see him again

8
00:00:20,800 --> 00:00:28,480
yeah i think so

9
00:00:24,240 --> 00:00:30,000
quite soon what's up

10
00:00:28,480 --> 00:00:31,760
yeah i mean i was keeping shutting a bit

11
00:00:30,000 --> 00:00:33,520
here so that everyone yawnings actually

12
00:00:31,760 --> 00:00:36,160
have something to listen to so they know

13
00:00:33,520 --> 00:00:36,719
the things are working so that's my

14
00:00:36,160 --> 00:00:39,120
primary

15
00:00:36,719 --> 00:00:39,760
thing of actually keeping me busy here

16
00:00:39,120 --> 00:00:42,399
but

17
00:00:39,760 --> 00:00:44,480
i will very soon start as soon as martin

18
00:00:42,399 --> 00:00:46,719
has rejoined

19
00:00:44,480 --> 00:00:46,718
so

20
00:00:53,039 --> 00:00:59,520
so okay are you ready to go

21
00:00:56,879 --> 00:01:01,599
yeah your jabber might not have been

22
00:00:59,520 --> 00:01:03,440
problematic martin it may have just been

23
00:01:01,600 --> 00:01:06,000
empty

24
00:01:03,440 --> 00:01:06,720
yeah well either way it's working now so

25
00:01:06,000 --> 00:01:12,880
let's

26
00:01:06,720 --> 00:01:14,080
get started do you want to start magnus

27
00:01:12,880 --> 00:01:17,520
or should i

28
00:01:14,080 --> 00:01:18,158
i can start so welcome everyone to tsb

29
00:01:17,520 --> 00:01:21,679
area

30
00:01:18,159 --> 00:01:22,240
um the meeting um so i'm minus westland

31
00:01:21,680 --> 00:01:26,560
and my

32
00:01:22,240 --> 00:01:30,000
co-id martin he's on picture two so

33
00:01:26,560 --> 00:01:32,479
and i asked him to so the note well

34
00:01:30,000 --> 00:01:35,520
applies also to this meeting

35
00:01:32,479 --> 00:01:36,159
and so if you don't know it read up on

36
00:01:35,520 --> 00:01:39,439
this

37
00:01:36,159 --> 00:01:42,560
the bcps etc about

38
00:01:39,439 --> 00:01:44,720
code of conduct and the rest procedures

39
00:01:42,560 --> 00:01:49,040
copyright patents all these things

40
00:01:44,720 --> 00:01:49,039
and the our standardization process

41
00:01:49,360 --> 00:01:52,840
so this meeting will be fairly

42
00:01:51,360 --> 00:01:55,840
straightforward

43
00:01:52,840 --> 00:01:58,560
um the session is recorded

44
00:01:55,840 --> 00:02:00,000
the notebook is uh with shown blue

45
00:01:58,560 --> 00:02:01,439
sheets automatically on the right

46
00:02:00,000 --> 00:02:05,040
generated i'm not

47
00:02:01,439 --> 00:02:05,039
certain that we need yeah prescribed

48
00:02:05,600 --> 00:02:09,679
then we will have an overview and we

49
00:02:07,680 --> 00:02:13,520
will have an update from tabs and then

50
00:02:09,679 --> 00:02:13,520
open marks for this session um

51
00:02:15,760 --> 00:02:20,399
have you set up any note-takers that i

52
00:02:18,080 --> 00:02:23,120
guess is not done yet

53
00:02:20,400 --> 00:02:24,720
that we failed on so if you have any

54
00:02:23,120 --> 00:02:28,319
volunteers

55
00:02:24,720 --> 00:02:28,319
who can help writing

56
00:02:28,800 --> 00:02:31,920
notes they don't seem to be these

57
00:02:31,680 --> 00:02:37,840
they're

58
00:02:31,920 --> 00:02:37,839
taking java meetings

59
00:02:48,879 --> 00:02:52,399
i hope not you get 20 minutes to speak

60
00:02:50,879 --> 00:02:57,679
your minds to us

61
00:02:52,400 --> 00:03:00,480
so okay let's go up

62
00:02:57,680 --> 00:03:01,519
so the overview of where we are in the

63
00:03:00,480 --> 00:03:06,799
area in general

64
00:03:01,519 --> 00:03:06,800
um go ahead martin talk about alto

65
00:03:07,360 --> 00:03:10,959
yeah so uh we have a new chair chin wu i

66
00:03:09,920 --> 00:03:14,238
don't know if he's in

67
00:03:10,959 --> 00:03:15,599
in the room today but uh he he

68
00:03:14,239 --> 00:03:16,800
he's chaired a number of other groups

69
00:03:15,599 --> 00:03:18,079
before he's been involved in out there

70
00:03:16,800 --> 00:03:19,680
for a number of years and he's taking

71
00:03:18,080 --> 00:03:20,879
over the the existing two existing

72
00:03:19,680 --> 00:03:22,720
chairs are going to step down

73
00:03:20,879 --> 00:03:24,560
and over the next few months as they

74
00:03:22,720 --> 00:03:26,480
complete their milestones

75
00:03:24,560 --> 00:03:28,239
uh we're almost done with the milestones

76
00:03:26,480 --> 00:03:30,480
and we're going to recharge her soon and

77
00:03:28,239 --> 00:03:32,080
most of this week's meeting

78
00:03:30,480 --> 00:03:33,518
was about that rechartering and there's

79
00:03:32,080 --> 00:03:34,959
a bunch of great ideas we just have to

80
00:03:33,519 --> 00:03:36,400
narrow them down

81
00:03:34,959 --> 00:03:38,319
uh i guess i'll just talk through all my

82
00:03:36,400 --> 00:03:41,519
stuff um

83
00:03:38,319 --> 00:03:43,359
see anything else of note really here uh

84
00:03:41,519 --> 00:03:46,560
you can kind of see what it says

85
00:03:43,360 --> 00:03:48,159
and um

86
00:03:46,560 --> 00:03:50,319
yeah i mean alto is actually probably

87
00:03:48,159 --> 00:03:52,000
the one that's had the the most

88
00:03:50,319 --> 00:03:53,359
interesting transition of really all the

89
00:03:52,000 --> 00:03:56,720
working groups that i that i

90
00:03:53,360 --> 00:03:59,920
oversee so off to you magnus

91
00:03:56,720 --> 00:04:01,280
yes so first of all in d10 we have a new

92
00:03:59,920 --> 00:04:04,000
working group sharing

93
00:04:01,280 --> 00:04:05,599
bahrain uh i really want to thank mark

94
00:04:04,000 --> 00:04:06,560
blanchett has been since the working

95
00:04:05,599 --> 00:04:10,480
group was shortage

96
00:04:06,560 --> 00:04:11,200
uh and i'm very much a large applause

97
00:04:10,480 --> 00:04:14,959
for him

98
00:04:11,200 --> 00:04:16,880
for doing this work for uh

99
00:04:14,959 --> 00:04:18,399
they are finishing up the core documents

100
00:04:16,880 --> 00:04:19,279
we're really trying to get through this

101
00:04:18,399 --> 00:04:21,120
dvd

102
00:04:19,279 --> 00:04:22,559
first at the court documents and then i

103
00:04:21,120 --> 00:04:25,840
hope we'll see more

104
00:04:22,560 --> 00:04:25,840
continued uh

105
00:04:26,880 --> 00:04:32,560
so um and in

106
00:04:30,479 --> 00:04:34,639
nfsv4 is not meeting this week they're

107
00:04:32,560 --> 00:04:35,280
planning an interview meeting in a few

108
00:04:34,639 --> 00:04:38,240
weeks

109
00:04:35,280 --> 00:04:39,039
uh and they have restarted to include

110
00:04:38,240 --> 00:04:43,120
rdma

111
00:04:39,040 --> 00:04:45,440
maintenance since last meeting um

112
00:04:43,120 --> 00:04:46,240
quick that's been big news the base

113
00:04:45,440 --> 00:04:47,840
process

114
00:04:46,240 --> 00:04:51,680
ended like they've lost call earlier

115
00:04:47,840 --> 00:04:54,000
this week they had a military on

116
00:04:51,680 --> 00:04:55,759
multi-paths and that's discussion it's

117
00:04:54,000 --> 00:04:56,800
kind of ongoing but there's a direction

118
00:04:55,759 --> 00:05:00,080
here

119
00:04:56,800 --> 00:05:01,520
for enabling experimentation discussion

120
00:05:00,080 --> 00:05:04,719
but we'll see how that

121
00:05:01,520 --> 00:05:08,159
we'll see it as continue so

122
00:05:04,720 --> 00:05:08,160
in the working group um

123
00:05:08,240 --> 00:05:14,720
perhaps series of injury meetings and

124
00:05:11,360 --> 00:05:16,479
uh they're very close to having an

125
00:05:14,720 --> 00:05:17,919
interface document that's why we're

126
00:05:16,479 --> 00:05:19,840
having the

127
00:05:17,919 --> 00:05:21,440
reminding people here and maybe take a

128
00:05:19,840 --> 00:05:24,479
look at this as they finishing up

129
00:05:21,440 --> 00:05:28,080
their first set of interface

130
00:05:24,479 --> 00:05:31,199
space api specifications or not api but

131
00:05:28,080 --> 00:05:33,919
what the interface looks like um

132
00:05:31,199 --> 00:05:35,759
i hope will stram will be done sometimes

133
00:05:33,919 --> 00:05:36,560
but it's not making lots of progress but

134
00:05:35,759 --> 00:05:39,360
otherwise

135
00:05:36,560 --> 00:05:41,840
um it's it's one final documents before

136
00:05:39,360 --> 00:05:44,960
that working you can close

137
00:05:41,840 --> 00:05:47,198
uh um

138
00:05:44,960 --> 00:05:50,479
martin do you want to take the question

139
00:05:47,199 --> 00:05:52,960
for lars publicly on the audio

140
00:05:50,479 --> 00:05:55,280
oh yeah so lars on jabber asked what

141
00:05:52,960 --> 00:05:56,560
alto was recharging for um

142
00:05:55,280 --> 00:05:58,960
there were actually five different

143
00:05:56,560 --> 00:06:01,759
themes that came up in the discussion

144
00:05:58,960 --> 00:06:03,599
um and i told them to try to reach

145
00:06:01,759 --> 00:06:05,440
consensus on the subset of those

146
00:06:03,600 --> 00:06:07,120
there was actually quite it's not a

147
00:06:05,440 --> 00:06:07,919
large group by any means but there was

148
00:06:07,120 --> 00:06:10,960
quite a lot of

149
00:06:07,919 --> 00:06:12,479
uh energy around a lot of these ideas um

150
00:06:10,960 --> 00:06:14,560
if people were interested the agenda

151
00:06:12,479 --> 00:06:17,520
materials have like a lot more

152
00:06:14,560 --> 00:06:20,880
information about these these concepts

153
00:06:17,520 --> 00:06:22,159
and lars is in the queue yeah hey sorry

154
00:06:20,880 --> 00:06:24,000
i don't want to drag this out

155
00:06:22,160 --> 00:06:26,319
i was a little bit surprised because so

156
00:06:24,000 --> 00:06:26,800
has alto uh i have not followed it in a

157
00:06:26,319 --> 00:06:30,560
while

158
00:06:26,800 --> 00:06:30,560
has it gotten deployment now

159
00:06:30,800 --> 00:06:34,000
that's my understanding yes i okay that

160
00:06:33,440 --> 00:06:36,319
that

161
00:06:34,000 --> 00:06:38,240
answers my question because without that

162
00:06:36,319 --> 00:06:39,840
i i would you know question if if more

163
00:06:38,240 --> 00:06:41,520
work is needed but if there is

164
00:06:39,840 --> 00:06:43,039
if there are deployments it's a

165
00:06:41,520 --> 00:06:44,880
different story thanks

166
00:06:43,039 --> 00:06:46,479
i'm not i'm not an expert on this but i

167
00:06:44,880 --> 00:06:47,199
believe especially in china it's gotten

168
00:06:46,479 --> 00:06:52,318
quite a bit of

169
00:06:47,199 --> 00:06:52,319
of of at least some deployment

170
00:06:53,520 --> 00:06:57,680
okay there we go

171
00:06:58,960 --> 00:07:05,120
so martin you take this okay

172
00:07:02,080 --> 00:07:07,280
so um we had a very fruitful um or at

173
00:07:05,120 --> 00:07:10,000
least the rc editor had a very fruitful

174
00:07:07,280 --> 00:07:11,679
uh four months of processing our

175
00:07:10,000 --> 00:07:13,759
documents and a whole bunch of

176
00:07:11,680 --> 00:07:15,919
the the editor key has gotten a lot

177
00:07:13,759 --> 00:07:17,360
smaller and as you can see we got four

178
00:07:15,919 --> 00:07:20,080
things out of the isg

179
00:07:17,360 --> 00:07:20,639
uh in this this cycle uh you can see

180
00:07:20,080 --> 00:07:21,919
them

181
00:07:20,639 --> 00:07:23,919
and then there's some other stuff that's

182
00:07:21,919 --> 00:07:27,280
sitting around but cluster 238

183
00:07:23,919 --> 00:07:29,120
is uh winding its way towards conclusion

184
00:07:27,280 --> 00:07:30,159
so i think a lot of that old rm cat

185
00:07:29,120 --> 00:07:31,759
stuff is gonna eventu

186
00:07:30,160 --> 00:07:34,160
is gonna pop pretty soon and that'll be

187
00:07:31,759 --> 00:07:34,160
exciting

188
00:07:35,360 --> 00:07:42,080
yep that's good and in general i mean

189
00:07:38,960 --> 00:07:42,479
to for general information the the fact

190
00:07:42,080 --> 00:07:45,280
that

191
00:07:42,479 --> 00:07:45,919
cluster 238 is why running down which

192
00:07:45,280 --> 00:07:49,919
actually

193
00:07:45,919 --> 00:07:51,919
reduce the times uh that it takes for

194
00:07:49,919 --> 00:07:53,599
the rcd to process document that's going

195
00:07:51,919 --> 00:07:55,359
to the cube because they

196
00:07:53,599 --> 00:07:58,000
they're actually draining their cube

197
00:07:55,360 --> 00:08:00,080
which was grown by for example casters

198
00:07:58,000 --> 00:08:04,160
238 but also the transition to

199
00:08:00,080 --> 00:08:06,240
the person 3d format so um

200
00:08:04,160 --> 00:08:07,360
and i have to thank you one alone this

201
00:08:06,240 --> 00:08:10,720
is that actually

202
00:08:07,360 --> 00:08:12,319
the uh path packet stationary profit you

203
00:08:10,720 --> 00:08:14,319
discover rfc

204
00:08:12,319 --> 00:08:16,080
it's actually one it's using some of

205
00:08:14,319 --> 00:08:17,280
these features for v3 and it's one of

206
00:08:16,080 --> 00:08:19,359
these early

207
00:08:17,280 --> 00:08:21,520
spearheads that actually used the format

208
00:08:19,360 --> 00:08:23,759
for some of the new things like

209
00:08:21,520 --> 00:08:25,680
svd graphics and things like that so it

210
00:08:23,759 --> 00:08:27,840
was interesting to see that go through

211
00:08:25,680 --> 00:08:27,840
so

212
00:08:28,560 --> 00:08:33,919
and actually you should consider

213
00:08:31,280 --> 00:08:37,039
adopting some of the v3 features for

214
00:08:33,919 --> 00:08:38,838
getting better documents that's uh uses

215
00:08:37,039 --> 00:08:41,760
this

216
00:08:38,839 --> 00:08:44,800
so

217
00:08:41,760 --> 00:08:47,519
so uh the tsb air review team

218
00:08:44,800 --> 00:08:48,399
has continued to review documents that

219
00:08:47,519 --> 00:08:51,120
the triage

220
00:08:48,399 --> 00:08:52,320
thinks is suitable to be needing

221
00:08:51,120 --> 00:08:54,160
transport reviews

222
00:08:52,320 --> 00:08:55,519
and we will thank you all other viewers

223
00:08:54,160 --> 00:08:57,279
that done something you will see those

224
00:08:55,519 --> 00:08:58,160
that has reviewed one or more documents

225
00:08:57,279 --> 00:09:00,800
here

226
00:08:58,160 --> 00:09:02,560
as as noted how many did it done uh it's

227
00:09:00,800 --> 00:09:04,959
still not a

228
00:09:02,560 --> 00:09:06,640
high load to be in this review team so

229
00:09:04,959 --> 00:09:09,920
um

230
00:09:06,640 --> 00:09:12,480
anything that martin yeah or just

231
00:09:09,920 --> 00:09:13,680
as always i think that these statistics

232
00:09:12,480 --> 00:09:15,920
show that this is not

233
00:09:13,680 --> 00:09:16,880
a particularly honoris thing to

234
00:09:15,920 --> 00:09:18,719
volunteer for

235
00:09:16,880 --> 00:09:20,160
and um i think it really expands your

236
00:09:18,720 --> 00:09:22,880
horizons at itf but

237
00:09:20,160 --> 00:09:26,000
i really encourage people to to to

238
00:09:22,880 --> 00:09:26,000
consider joining the art

239
00:09:28,080 --> 00:09:30,480
yes

240
00:09:31,519 --> 00:09:37,120
and we have i mean i'm stepping down in

241
00:09:35,120 --> 00:09:37,920
in march and we have three tsp 80

242
00:09:37,120 --> 00:09:40,399
candidates

243
00:09:37,920 --> 00:09:42,079
and today is the last day to provide

244
00:09:40,399 --> 00:09:44,959
input to the nomcom

245
00:09:42,080 --> 00:09:46,640
so if you you haven't done so already

246
00:09:44,959 --> 00:09:49,760
please provide input on the

247
00:09:46,640 --> 00:09:53,040
transportation candidates some of whom

248
00:09:49,760 --> 00:09:56,080
are electioneering right now

249
00:09:53,040 --> 00:09:59,120
so but yes it's davis genesee

250
00:09:56,080 --> 00:10:01,200
said soccer and ken kao

251
00:09:59,120 --> 00:10:02,959
which is the candidates so please

252
00:10:01,200 --> 00:10:05,600
provide the input

253
00:10:02,959 --> 00:10:06,560
yes it's you have the hall of friday and

254
00:10:05,600 --> 00:10:09,200
i think the

255
00:10:06,560 --> 00:10:11,760
if you were in the plenary uh barbara's

256
00:10:09,200 --> 00:10:14,800
said they were going to be open

257
00:10:11,760 --> 00:10:15,360
probably weekend out before they closed

258
00:10:14,800 --> 00:10:17,680
it so

259
00:10:15,360 --> 00:10:19,440
but well she said was she would she

260
00:10:17,680 --> 00:10:21,519
would turn it off on her saturday which

261
00:10:19,440 --> 00:10:24,079
i assume is somewhere in america

262
00:10:21,519 --> 00:10:25,760
um so you pretty much have all of friday

263
00:10:24,079 --> 00:10:29,439
no matter where you live

264
00:10:25,760 --> 00:10:32,959
yeah but just do it now

265
00:10:29,440 --> 00:10:35,600
yeah and help denom com make a good

266
00:10:32,959 --> 00:10:36,719
choice so um but we're grateful see that

267
00:10:35,600 --> 00:10:39,920
we have three candidates

268
00:10:36,720 --> 00:10:41,440
and that's very good um so

269
00:10:39,920 --> 00:10:43,680
and i think that was the last slide from

270
00:10:41,440 --> 00:10:45,839
us and therefore we will switch

271
00:10:43,680 --> 00:10:47,920
if switch to brian and then we'll come

272
00:10:45,839 --> 00:10:50,480
back with open mic afterwards so

273
00:10:47,920 --> 00:10:51,120
uh yeah so so if i could introduce this

274
00:10:50,480 --> 00:10:53,839
so

275
00:10:51,120 --> 00:10:55,279
i i am a recent arrival at the taps

276
00:10:53,839 --> 00:10:57,360
working group and i am now

277
00:10:55,279 --> 00:10:58,880
super duper interested as a as an

278
00:10:57,360 --> 00:11:00,399
individual contributor i think it's very

279
00:10:58,880 --> 00:11:03,680
interesting work that has a lot of

280
00:11:00,399 --> 00:11:04,959
applications at my job and and just as a

281
00:11:03,680 --> 00:11:08,239
transport guy

282
00:11:04,959 --> 00:11:10,479
it is also kind of inaccessible um

283
00:11:08,240 --> 00:11:11,760
uh their meetings are kind of github

284
00:11:10,480 --> 00:11:13,120
operations for the most part and they

285
00:11:11,760 --> 00:11:16,399
generally don't meet at

286
00:11:13,120 --> 00:11:18,720
big itfs they're all interims so um

287
00:11:16,399 --> 00:11:20,000
yeah i i invited brian to give this talk

288
00:11:18,720 --> 00:11:21,920
just so people can get

289
00:11:20,000 --> 00:11:23,440
in touch with it and hopefully get some

290
00:11:21,920 --> 00:11:24,959
people interested to go read the drafts

291
00:11:23,440 --> 00:11:26,720
and start participating

292
00:11:24,959 --> 00:11:28,399
um because i think it's really

293
00:11:26,720 --> 00:11:30,720
interesting work so brian

294
00:11:28,399 --> 00:11:30,720
go ahead

295
00:11:33,519 --> 00:11:36,640
thank you martin uh i hope i can make

296
00:11:35,200 --> 00:11:38,000
this more accessible that's actually

297
00:11:36,640 --> 00:11:39,760
kind of a

298
00:11:38,000 --> 00:11:41,600
that's a tall order but we'll see uh

299
00:11:39,760 --> 00:11:42,160
we'll see if this um unconfuses things a

300
00:11:41,600 --> 00:11:45,440
little bit

301
00:11:42,160 --> 00:11:47,120
um so hi um actually we can just sort of

302
00:11:45,440 --> 00:11:48,079
skip this light this is bangkok where we

303
00:11:47,120 --> 00:11:51,200
are not

304
00:11:48,079 --> 00:11:53,279
um but uh martin did a good introduction

305
00:11:51,200 --> 00:11:54,959
so i'll just go straight into the the

306
00:11:53,279 --> 00:11:57,040
content so

307
00:11:54,959 --> 00:11:59,119
um it's really kind of hard to

308
00:11:57,040 --> 00:12:00,719
understand how we got to be the working

309
00:11:59,120 --> 00:12:02,240
group we are without understanding sort

310
00:12:00,720 --> 00:12:06,079
of the initial case for taps

311
00:12:02,240 --> 00:12:06,560
and there are sort of three observations

312
00:12:06,079 --> 00:12:09,839
here

313
00:12:06,560 --> 00:12:11,680
um one of them is that uh there's a hard

314
00:12:09,839 --> 00:12:13,839
binding between transport behaviors and

315
00:12:11,680 --> 00:12:16,959
concrete protocols right like so

316
00:12:13,839 --> 00:12:18,560
um the sockets um api basically works

317
00:12:16,959 --> 00:12:21,839
pretty well for stock stream and sock d

318
00:12:18,560 --> 00:12:23,760
gram um sock seek packet was um

319
00:12:21,839 --> 00:12:25,680
uh sort of back ported onto it but in

320
00:12:23,760 --> 00:12:28,079
order to actually use scpp for example

321
00:12:25,680 --> 00:12:31,199
you need to use the sctp api

322
00:12:28,079 --> 00:12:32,560
um so you know if all you have is

323
00:12:31,200 --> 00:12:33,120
sockets all you're ever going to be able

324
00:12:32,560 --> 00:12:35,599
to deploy

325
00:12:33,120 --> 00:12:38,160
is is udp and tcp just because you know

326
00:12:35,600 --> 00:12:39,519
you have no api to actually select it uh

327
00:12:38,160 --> 00:12:42,560
there's also the problem that

328
00:12:39,519 --> 00:12:45,360
um uh deployment

329
00:12:42,560 --> 00:12:47,040
of newer protocols um and you know we're

330
00:12:45,360 --> 00:12:48,079
harping a lot on sctp here because that

331
00:12:47,040 --> 00:12:53,279
was sort of the

332
00:12:48,079 --> 00:12:55,199
the um the big sort of deployment um

333
00:12:53,279 --> 00:12:57,120
uh pain that we remembered when we we

334
00:12:55,200 --> 00:13:00,480
started this work in taps

335
00:12:57,120 --> 00:13:01,200
um you might have network conditions

336
00:13:00,480 --> 00:13:03,360
right you might be

337
00:13:01,200 --> 00:13:04,560
behind an app that doesn't know what

338
00:13:03,360 --> 00:13:07,360
sctp is or

339
00:13:04,560 --> 00:13:08,719
or how to um uh to deal with it so you

340
00:13:07,360 --> 00:13:10,880
might want to be able to have the

341
00:13:08,720 --> 00:13:12,240
the endpoint do some network sensing and

342
00:13:10,880 --> 00:13:13,519
and figure out okay well i seem to be

343
00:13:12,240 --> 00:13:14,959
working or not or will this transport

344
00:13:13,519 --> 00:13:18,399
work here or not

345
00:13:14,959 --> 00:13:18,959
um so um a lot of this work was put

346
00:13:18,399 --> 00:13:23,040
together

347
00:13:18,959 --> 00:13:24,239
uh by the the neat project uh a um

348
00:13:23,040 --> 00:13:26,160
fb seven or eight twenty twenty i think

349
00:13:24,240 --> 00:13:28,480
it was already a 2020 by then uh

350
00:13:26,160 --> 00:13:30,480
an eu funded research project and it

351
00:13:28,480 --> 00:13:31,200
really focused on this dynamic transport

352
00:13:30,480 --> 00:13:33,360
selection

353
00:13:31,200 --> 00:13:35,760
uh problem right like so how can we use

354
00:13:33,360 --> 00:13:38,800
information about what the os supports

355
00:13:35,760 --> 00:13:39,680
and what the um you know what the

356
00:13:38,800 --> 00:13:42,719
network can support

357
00:13:39,680 --> 00:13:44,000
and use that to dynamically um select

358
00:13:42,720 --> 00:13:46,000
the protocol so that was really the

359
00:13:44,000 --> 00:13:47,600
focus of the neat project and as we

360
00:13:46,000 --> 00:13:48,959
started working on this we realized that

361
00:13:47,600 --> 00:13:50,880
dynamic selection is only half the

362
00:13:48,959 --> 00:13:54,079
battle right like so if

363
00:13:50,880 --> 00:13:56,320
i have an application that is expecting

364
00:13:54,079 --> 00:13:57,439
um you know sequential streams in a

365
00:13:56,320 --> 00:13:58,800
single sequential stream for a

366
00:13:57,440 --> 00:14:01,279
connection object

367
00:13:58,800 --> 00:14:02,800
uh and then my os tells me oh but you

368
00:14:01,279 --> 00:14:05,439
can use sctp cool i'm just going to use

369
00:14:02,800 --> 00:14:08,000
sctp to give me tcp like service

370
00:14:05,440 --> 00:14:10,399
so unless we have an abstraction that

371
00:14:08,000 --> 00:14:14,399
sits on top of sort of the union

372
00:14:10,399 --> 00:14:16,959
of all supported transport behavior um

373
00:14:14,399 --> 00:14:17,440
and allows us to select you know what we

374
00:14:16,959 --> 00:14:19,518
need

375
00:14:17,440 --> 00:14:21,199
and to emulate what we can't get from

376
00:14:19,519 --> 00:14:22,320
the operating system in the network

377
00:14:21,199 --> 00:14:24,000
then we're going to be constrained to

378
00:14:22,320 --> 00:14:24,480
the least common denominator so there's

379
00:14:24,000 --> 00:14:27,600
um

380
00:14:24,480 --> 00:14:29,360
work in a research project that i was

381
00:14:27,600 --> 00:14:30,880
involved in post sockets

382
00:14:29,360 --> 00:14:32,639
uh and also work and network that

383
00:14:30,880 --> 00:14:35,360
framework uh from apple

384
00:14:32,639 --> 00:14:36,399
uh that sort of you know uh tries to

385
00:14:35,360 --> 00:14:40,959
break this up so

386
00:14:36,399 --> 00:14:44,560
the story so far um next slide

387
00:14:40,959 --> 00:14:46,319
uh so in 2014

388
00:14:44,560 --> 00:14:48,000
we were chartered specifically for the

389
00:14:46,320 --> 00:14:49,600
dynamic transport selection problem and

390
00:14:48,000 --> 00:14:50,160
only the dynamic transport selection

391
00:14:49,600 --> 00:14:53,519
problem

392
00:14:50,160 --> 00:14:56,839
and we went off and did the homework of

393
00:14:53,519 --> 00:14:58,240
looking at the various transport layer

394
00:14:56,839 --> 00:15:00,240
behaviors

395
00:14:58,240 --> 00:15:01,680
um that were available from ietf

396
00:15:00,240 --> 00:15:03,279
protocols in order to understand the

397
00:15:01,680 --> 00:15:04,638
basis of dynamic selection like so what

398
00:15:03,279 --> 00:15:06,639
are all of the various different things

399
00:15:04,639 --> 00:15:07,920
you might want to choose based on

400
00:15:06,639 --> 00:15:09,680
or that you might want to give an

401
00:15:07,920 --> 00:15:11,120
application um

402
00:15:09,680 --> 00:15:12,638
and this is when it became clear that we

403
00:15:11,120 --> 00:15:14,000
needed an abstract api as we were

404
00:15:12,639 --> 00:15:16,560
getting into this it's like okay great

405
00:15:14,000 --> 00:15:19,279
but these behaviors are different enough

406
00:15:16,560 --> 00:15:20,319
that um just putting them into the

407
00:15:19,279 --> 00:15:22,959
sockets model and

408
00:15:20,320 --> 00:15:24,079
and hiding all of the goodness behind

409
00:15:22,959 --> 00:15:26,880
sock ops

410
00:15:24,079 --> 00:15:27,920
is not going to lead to um application

411
00:15:26,880 --> 00:15:31,199
adoption of

412
00:15:27,920 --> 00:15:33,519
of this so um a couple of years later we

413
00:15:31,199 --> 00:15:36,319
started uh working on the groundwork

414
00:15:33,519 --> 00:15:36,639
uh for the abstract api so this is the

415
00:15:36,320 --> 00:15:38,560
the

416
00:15:36,639 --> 00:15:42,000
min set work and and looking at sort of

417
00:15:38,560 --> 00:15:44,479
how um various transports and how udp

418
00:15:42,000 --> 00:15:45,759
um can be split up into the categories

419
00:15:44,480 --> 00:15:49,120
that 8095

420
00:15:45,759 --> 00:15:50,639
um uh looked into uh and then once we

421
00:15:49,120 --> 00:15:53,120
had that groundwork i mean you'll notice

422
00:15:50,639 --> 00:15:54,560
that like there's an 8303 and 8304 in an

423
00:15:53,120 --> 00:15:56,639
23 it took us a while to finally get

424
00:15:54,560 --> 00:15:59,439
mindset published but but that is

425
00:15:56,639 --> 00:16:01,040
is out since the last meeting um the

426
00:15:59,440 --> 00:16:04,639
work was mainly done uh

427
00:16:01,040 --> 00:16:07,759
a couple years ago though um

428
00:16:04,639 --> 00:16:08,079
then we switched our attention in 2018

429
00:16:07,759 --> 00:16:10,560
to

430
00:16:08,079 --> 00:16:12,160
actually looking at what this abstract

431
00:16:10,560 --> 00:16:15,359
api would look at

432
00:16:12,160 --> 00:16:17,199
um and this is split into uh

433
00:16:15,360 --> 00:16:19,120
three different documents um so this is

434
00:16:17,199 --> 00:16:20,399
probably this is the the brian tries to

435
00:16:19,120 --> 00:16:22,880
make it accessible

436
00:16:20,399 --> 00:16:24,240
um there's the architecture document

437
00:16:22,880 --> 00:16:25,519
which sets out

438
00:16:24,240 --> 00:16:27,040
the assumptions that we make about the

439
00:16:25,519 --> 00:16:27,759
problem we're trying to solve right like

440
00:16:27,040 --> 00:16:30,160
so

441
00:16:27,759 --> 00:16:31,680
it says there's this you know we assume

442
00:16:30,160 --> 00:16:34,240
that there's this thing called a

443
00:16:31,680 --> 00:16:36,239
a transport services implementation this

444
00:16:34,240 --> 00:16:38,959
transport services implementation

445
00:16:36,240 --> 00:16:40,560
provides an api up to the application

446
00:16:38,959 --> 00:16:41,599
and has some machinery for doing the

447
00:16:40,560 --> 00:16:45,439
dynamic selection

448
00:16:41,600 --> 00:16:48,480
and for um uh dynamic up

449
00:16:45,440 --> 00:16:50,079
so candidate racing so um like think

450
00:16:48,480 --> 00:16:51,360
about um happy eyeballs but happy

451
00:16:50,079 --> 00:16:52,399
eyeballs across all of the different

452
00:16:51,360 --> 00:16:53,839
dimensions

453
00:16:52,399 --> 00:16:56,000
uh that you might care about with

454
00:16:53,839 --> 00:16:58,880
respect to um

455
00:16:56,000 --> 00:17:00,639
uh that you might care about with

456
00:16:58,880 --> 00:17:06,160
respect to

457
00:17:00,639 --> 00:17:06,160
um the uh

458
00:17:07,599 --> 00:17:14,639
uh like which protocols are going to use

459
00:17:10,720 --> 00:17:16,079
um you um and then

460
00:17:14,640 --> 00:17:17,199
we have the interface on top of that so

461
00:17:16,079 --> 00:17:18,000
there's the architecture this is what

462
00:17:17,199 --> 00:17:20,640
the transport services

463
00:17:18,000 --> 00:17:22,319
is the interface is what is the

464
00:17:20,640 --> 00:17:24,240
interface that the application uses to

465
00:17:22,319 --> 00:17:26,000
use the transport layer when using a

466
00:17:24,240 --> 00:17:29,440
transport services system

467
00:17:26,000 --> 00:17:30,160
um the interface document is where we

468
00:17:29,440 --> 00:17:32,799
actually

469
00:17:30,160 --> 00:17:34,000
um describe the details of this abstract

470
00:17:32,799 --> 00:17:36,400
api

471
00:17:34,000 --> 00:17:38,160
and this has um several sort of concepts

472
00:17:36,400 --> 00:17:39,840
there's a concept of a connection

473
00:17:38,160 --> 00:17:41,360
uh there's a concept of a pre-connection

474
00:17:39,840 --> 00:17:43,199
which is all of the information that you

475
00:17:41,360 --> 00:17:46,320
need in order to create a connection

476
00:17:43,200 --> 00:17:50,160
uh it supports um the

477
00:17:46,320 --> 00:17:52,960
concept of uh of

478
00:17:50,160 --> 00:17:54,080
uh rendezvous um so like the ability not

479
00:17:52,960 --> 00:17:55,760
just to say you know i'm gonna listen

480
00:17:54,080 --> 00:17:58,399
initiate but have two

481
00:17:55,760 --> 00:17:58,960
um uh endpoints uh find each other so

482
00:17:58,400 --> 00:18:03,200
this would be

483
00:17:58,960 --> 00:18:06,640
sort of in a um an ice lake environment

484
00:18:03,200 --> 00:18:08,160
um and then it supports um sort of

485
00:18:06,640 --> 00:18:09,760
message-oriented and stream-oriented

486
00:18:08,160 --> 00:18:10,960
interactions it supports message framing

487
00:18:09,760 --> 00:18:11,679
we'll get into the details of that in a

488
00:18:10,960 --> 00:18:13,360
minute

489
00:18:11,679 --> 00:18:14,480
and then the implementation document is

490
00:18:13,360 --> 00:18:15,918
where we get into the nitty gritty

491
00:18:14,480 --> 00:18:19,280
details of

492
00:18:15,919 --> 00:18:23,600
here are uh things

493
00:18:19,280 --> 00:18:25,760
that we um uh

494
00:18:23,600 --> 00:18:27,120
here are things that as we have gained

495
00:18:25,760 --> 00:18:30,000
implementation experience

496
00:18:27,120 --> 00:18:31,760
with building systems and taps that you

497
00:18:30,000 --> 00:18:33,039
as an implementer of tap should probably

498
00:18:31,760 --> 00:18:34,559
look out for right like so it's kind of

499
00:18:33,039 --> 00:18:35,760
an implementation notes and guidelines

500
00:18:34,559 --> 00:18:38,879
document

501
00:18:35,760 --> 00:18:40,480
um so to the

502
00:18:38,880 --> 00:18:42,080
uh are there implementations question

503
00:18:40,480 --> 00:18:43,679
we'll answer this later but like

504
00:18:42,080 --> 00:18:44,799
around the same time that we started the

505
00:18:43,679 --> 00:18:46,240
work on the architecture interface and

506
00:18:44,799 --> 00:18:48,639
implementation documents

507
00:18:46,240 --> 00:18:49,679
um networked up frameworks so um apple's

508
00:18:48,640 --> 00:18:52,640
formerly internal

509
00:18:49,679 --> 00:18:54,080
now um published um api that is

510
00:18:52,640 --> 00:18:57,039
extremely taps like

511
00:18:54,080 --> 00:18:58,399
uh was announced at wwdc uh so on the

512
00:18:57,039 --> 00:18:59,440
next slide the next two slides we're

513
00:18:58,400 --> 00:19:01,840
gonna like look at the

514
00:18:59,440 --> 00:19:03,600
at the um sort of the different

515
00:19:01,840 --> 00:19:05,199
architecture uh the basic

516
00:19:03,600 --> 00:19:06,959
um you know difference between sockets

517
00:19:05,200 --> 00:19:10,400
and taps so next slide

518
00:19:06,960 --> 00:19:12,000
uh this is a picture of um

519
00:19:10,400 --> 00:19:13,520
how interactions work between the

520
00:19:12,000 --> 00:19:15,200
application the network in the sockets

521
00:19:13,520 --> 00:19:16,799
api right we have a stream api and a

522
00:19:15,200 --> 00:19:19,360
datagram api they use

523
00:19:16,799 --> 00:19:21,120
mainly the same um calls like you have

524
00:19:19,360 --> 00:19:22,000
like you know write versus send and send

525
00:19:21,120 --> 00:19:24,399
message

526
00:19:22,000 --> 00:19:25,520
um but for the most part using mainly

527
00:19:24,400 --> 00:19:26,960
the same calls but they behave

528
00:19:25,520 --> 00:19:31,679
differently based on

529
00:19:26,960 --> 00:19:33,520
um uh what the um what the struck sock

530
00:19:31,679 --> 00:19:35,039
uh it's been oil since i've used sockets

531
00:19:33,520 --> 00:19:37,039
uh this the structure underneath like

532
00:19:35,039 --> 00:19:39,919
basically is a union structure

533
00:19:37,039 --> 00:19:41,120
that um gives you markedly different

534
00:19:39,919 --> 00:19:45,039
behavior based on which you

535
00:19:41,120 --> 00:19:48,239
um uh uh which you select

536
00:19:45,039 --> 00:19:50,160
uh the um stream api

537
00:19:48,240 --> 00:19:52,080
generally binds to tcp protocol stack

538
00:19:50,160 --> 00:19:53,360
the datagram api minestro udp protocol

539
00:19:52,080 --> 00:19:54,960
stack i could have put like the the

540
00:19:53,360 --> 00:19:56,639
seekpack at api and have it applied to

541
00:19:54,960 --> 00:19:58,720
an sctp protocol stack

542
00:19:56,640 --> 00:20:00,400
um but like there's a different api and

543
00:19:58,720 --> 00:20:01,440
a different application interaction

544
00:20:00,400 --> 00:20:03,840
model for

545
00:20:01,440 --> 00:20:05,360
each of these things uh there's also

546
00:20:03,840 --> 00:20:09,439
another part of the sockets

547
00:20:05,360 --> 00:20:10,399
um uh interface which is extremely

548
00:20:09,440 --> 00:20:12,240
important

549
00:20:10,400 --> 00:20:14,080
um for establishing conventions in

550
00:20:12,240 --> 00:20:15,520
rendezvous and that's the stub resolver

551
00:20:14,080 --> 00:20:16,960
um and the stuff resolver is a thing

552
00:20:15,520 --> 00:20:17,600
that the application has to interact

553
00:20:16,960 --> 00:20:20,080
with

554
00:20:17,600 --> 00:20:21,918
directly so like if i have a name and i

555
00:20:20,080 --> 00:20:23,918
want to turn it into

556
00:20:21,919 --> 00:20:25,679
an address that i can actually use to

557
00:20:23,919 --> 00:20:27,440
bind or connect to something

558
00:20:25,679 --> 00:20:28,880
i need to do the resolution myself and

559
00:20:27,440 --> 00:20:30,240
this has sort of

560
00:20:28,880 --> 00:20:31,919
the upside if the application has

561
00:20:30,240 --> 00:20:33,600
complete control over when resolution

562
00:20:31,919 --> 00:20:34,960
happens which is you know good in

563
00:20:33,600 --> 00:20:36,240
certain cases when you might not want to

564
00:20:34,960 --> 00:20:38,080
leak information

565
00:20:36,240 --> 00:20:39,679
uh if you don't know that you're on a

566
00:20:38,080 --> 00:20:41,918
network q a minimization

567
00:20:39,679 --> 00:20:43,440
uh but it also means that the operating

568
00:20:41,919 --> 00:20:44,880
system or the platform that is providing

569
00:20:43,440 --> 00:20:48,080
the transport services

570
00:20:44,880 --> 00:20:50,559
doesn't have enough information to be

571
00:20:48,080 --> 00:20:52,240
able to do sort of like good racing

572
00:20:50,559 --> 00:20:53,360
right like so you can't say okay i'm

573
00:20:52,240 --> 00:20:55,760
going to defer

574
00:20:53,360 --> 00:20:56,639
the lookup of the thing that i don't

575
00:20:55,760 --> 00:21:00,240
need or

576
00:20:56,640 --> 00:21:02,000
more importantly if the transports uh

577
00:21:00,240 --> 00:21:03,440
the transport service implementations

578
00:21:02,000 --> 00:21:04,480
thinks it might need information in the

579
00:21:03,440 --> 00:21:05,520
future it can actually go ahead and

580
00:21:04,480 --> 00:21:07,840
start queuing up

581
00:21:05,520 --> 00:21:09,280
uh these resolutions in order to to

582
00:21:07,840 --> 00:21:10,639
parallelize things

583
00:21:09,280 --> 00:21:12,639
uh let's go to the next slide which is

584
00:21:10,640 --> 00:21:15,600
somewhat more complicated uh and

585
00:21:12,640 --> 00:21:16,880
i think uh this is the diagram that that

586
00:21:15,600 --> 00:21:18,240
might have scared martin off when he

587
00:21:16,880 --> 00:21:19,200
first started when he first landed in

588
00:21:18,240 --> 00:21:20,159
taps

589
00:21:19,200 --> 00:21:21,440
this is the transport service

590
00:21:20,159 --> 00:21:23,280
architecture up at the top we still have

591
00:21:21,440 --> 00:21:24,799
the application

592
00:21:23,280 --> 00:21:26,399
and it's essentially talking to the

593
00:21:24,799 --> 00:21:29,120
transport services interface this is the

594
00:21:26,400 --> 00:21:33,600
thing that's defined in the api document

595
00:21:29,120 --> 00:21:36,639
um there are uh sort of

596
00:21:33,600 --> 00:21:38,320
um four different

597
00:21:36,640 --> 00:21:40,000
phases of this life cycle which we'll

598
00:21:38,320 --> 00:21:41,360
get to uh later in the talk

599
00:21:40,000 --> 00:21:43,200
there's this pre-establishment phase

600
00:21:41,360 --> 00:21:44,799
where the application

601
00:21:43,200 --> 00:21:46,159
gives information about its requirements

602
00:21:44,799 --> 00:21:47,360
and expectations to the transport

603
00:21:46,159 --> 00:21:48,240
service interface and this is where the

604
00:21:47,360 --> 00:21:50,000
transport service

605
00:21:48,240 --> 00:21:51,600
interface gets the information it needs

606
00:21:50,000 --> 00:21:53,039
in order to be able to select a path and

607
00:21:51,600 --> 00:21:56,639
a protocol stack

608
00:21:53,039 --> 00:21:58,000
um then uh from a pre-connection you can

609
00:21:56,640 --> 00:21:59,520
go off and create a connection the

610
00:21:58,000 --> 00:22:01,280
connection is the object over which all

611
00:21:59,520 --> 00:22:04,720
of the data transfer happens

612
00:22:01,280 --> 00:22:06,559
um the uh

613
00:22:04,720 --> 00:22:08,480
the data transfer is event driven so

614
00:22:06,559 --> 00:22:10,158
basically you can say to the connection

615
00:22:08,480 --> 00:22:11,440
hi i'm willing to receive this many

616
00:22:10,159 --> 00:22:12,799
messages with this many bytes

617
00:22:11,440 --> 00:22:14,720
and it will send those back up to you

618
00:22:12,799 --> 00:22:15,440
asynchronously so you're not necessarily

619
00:22:14,720 --> 00:22:17,039
polling

620
00:22:15,440 --> 00:22:18,640
uh the transfer service interface

621
00:22:17,039 --> 00:22:20,559
interface itself also throws off these

622
00:22:18,640 --> 00:22:22,080
asynchronous events as things about the

623
00:22:20,559 --> 00:22:23,760
available stacks for example

624
00:22:22,080 --> 00:22:25,360
your connectivity uh may have changed

625
00:22:23,760 --> 00:22:27,120
now you're on an ipv6 network now you

626
00:22:25,360 --> 00:22:28,799
have um ipv6

627
00:22:27,120 --> 00:22:29,678
stacks as these things change those

628
00:22:28,799 --> 00:22:31,280
events can come back up to the

629
00:22:29,679 --> 00:22:33,120
application as well

630
00:22:31,280 --> 00:22:34,559
um inside the transport system

631
00:22:33,120 --> 00:22:37,840
implementation

632
00:22:34,559 --> 00:22:40,559
um there are uh

633
00:22:37,840 --> 00:22:42,080
a few um sort of like long-lived things

634
00:22:40,559 --> 00:22:46,080
there's policy which

635
00:22:42,080 --> 00:22:48,559
um allows uh the

636
00:22:46,080 --> 00:22:50,480
tweaking of the selection of of protocol

637
00:22:48,559 --> 00:22:53,360
stacks like you know saying hey i prefer

638
00:22:50,480 --> 00:22:54,799
ipv6 so i'm going to actually do um

639
00:22:53,360 --> 00:22:57,280
happy eyeballs and i'm going to give it

640
00:22:54,799 --> 00:22:59,679
a 20 millisecond head start for example

641
00:22:57,280 --> 00:23:00,960
or you know on this network um udp is

642
00:22:59,679 --> 00:23:01,440
disallowed unless it goes through this

643
00:23:00,960 --> 00:23:02,720
process

644
00:23:01,440 --> 00:23:05,039
these sorts of things are in the policy

645
00:23:02,720 --> 00:23:06,559
these are mainly implementation specific

646
00:23:05,039 --> 00:23:09,919
but we we allow for it

647
00:23:06,559 --> 00:23:13,039
there's also a state cache so um the

648
00:23:09,919 --> 00:23:16,080
transport system um can learn uh

649
00:23:13,039 --> 00:23:19,600
which bits of the

650
00:23:16,080 --> 00:23:21,439
um uh

651
00:23:19,600 --> 00:23:22,879
you know which networks uh or which

652
00:23:21,440 --> 00:23:24,720
connections or which paths

653
00:23:22,880 --> 00:23:26,320
might support or not support um certain

654
00:23:24,720 --> 00:23:26,880
things and can use that to adjust the

655
00:23:26,320 --> 00:23:28,080
racing

656
00:23:26,880 --> 00:23:29,200
and then underneath that all of that

657
00:23:28,080 --> 00:23:31,360
there are sort of the concrete

658
00:23:29,200 --> 00:23:33,440
implementations of the protocol stacks

659
00:23:31,360 --> 00:23:35,120
um you'll notice in this diagram we did

660
00:23:33,440 --> 00:23:36,400
not draw sort of like the kernel user

661
00:23:35,120 --> 00:23:38,000
space boundary and the previous

662
00:23:36,400 --> 00:23:39,280
diagram the kernel user space boundary

663
00:23:38,000 --> 00:23:40,559
is usually sort of like right there

664
00:23:39,280 --> 00:23:41,678
between the application

665
00:23:40,559 --> 00:23:43,279
application has a little bit of a

666
00:23:41,679 --> 00:23:44,240
library but it basically all turns it to

667
00:23:43,279 --> 00:23:46,720
syscalls

668
00:23:44,240 --> 00:23:47,440
um the taps interface could be

669
00:23:46,720 --> 00:23:48,960
implemented

670
00:23:47,440 --> 00:23:50,480
you know that that kernel user space

671
00:23:48,960 --> 00:23:54,000
boundary could be

672
00:23:50,480 --> 00:23:55,120
sort of um above the transport service

673
00:23:54,000 --> 00:23:56,240
interface it could be between the

674
00:23:55,120 --> 00:23:57,600
transport service interface and the

675
00:23:56,240 --> 00:23:58,559
implementation so you have the interface

676
00:23:57,600 --> 00:24:00,080
which does

677
00:23:58,559 --> 00:24:02,080
some of this the state management runs

678
00:24:00,080 --> 00:24:04,158
in user space but is actually using

679
00:24:02,080 --> 00:24:06,000
racing in the kernel or it could all be

680
00:24:04,159 --> 00:24:07,279
in user space on top of i mean you could

681
00:24:06,000 --> 00:24:09,919
implement this on top of

682
00:24:07,279 --> 00:24:10,960
um on top of any fiscal interface uh

683
00:24:09,919 --> 00:24:12,960
there are

684
00:24:10,960 --> 00:24:15,120
sort of multiple different ways uh to do

685
00:24:12,960 --> 00:24:16,840
that and we're explicitly agnostic about

686
00:24:15,120 --> 00:24:21,120
it

687
00:24:16,840 --> 00:24:21,120
um next slide

688
00:24:23,360 --> 00:24:27,279
so just like sort of the this is the

689
00:24:25,200 --> 00:24:29,039
sales slide um these are the features of

690
00:24:27,279 --> 00:24:32,320
the abstract interface i think i've

691
00:24:29,039 --> 00:24:33,919
i've gone through most of these um so

692
00:24:32,320 --> 00:24:35,840
it's designed specifically to allow for

693
00:24:33,919 --> 00:24:37,120
optimization parallelization right this

694
00:24:35,840 --> 00:24:38,720
idea of having a pre-connection phase

695
00:24:37,120 --> 00:24:40,639
followed by a connection phase

696
00:24:38,720 --> 00:24:42,559
i mean so once the pre-connection's set

697
00:24:40,640 --> 00:24:43,679
up the transfer services implementation

698
00:24:42,559 --> 00:24:44,879
can actually go and do whatever

699
00:24:43,679 --> 00:24:46,080
measurements it needs to in order to

700
00:24:44,880 --> 00:24:48,080
figure out you know what it's going to

701
00:24:46,080 --> 00:24:51,199
do when a connection finally happens

702
00:24:48,080 --> 00:24:52,158
um explicitly here resolution so this

703
00:24:51,200 --> 00:24:54,400
you know the thing that happens is

704
00:24:52,159 --> 00:24:56,080
stubborn solver and connection are not

705
00:24:54,400 --> 00:24:56,960
explicitly separate you can pass an

706
00:24:56,080 --> 00:24:59,678
endpoint

707
00:24:56,960 --> 00:25:00,480
into this api um at whatever layer of

708
00:24:59,679 --> 00:25:02,480
abstraction

709
00:25:00,480 --> 00:25:03,679
you have a resolver for and it can go

710
00:25:02,480 --> 00:25:04,320
off and resolve that for you in the

711
00:25:03,679 --> 00:25:07,840
background

712
00:25:04,320 --> 00:25:09,520
there is also um control over you can

713
00:25:07,840 --> 00:25:12,639
tell the systems in the api

714
00:25:09,520 --> 00:25:14,080
explicitly please defer any resolution

715
00:25:12,640 --> 00:25:16,400
until as late as possible just to

716
00:25:14,080 --> 00:25:18,320
minimize information that might radiate

717
00:25:16,400 --> 00:25:19,440
out of the resolution process um

718
00:25:18,320 --> 00:25:21,760
obviously if you put this on

719
00:25:19,440 --> 00:25:22,640
on top of something like dot or do this

720
00:25:21,760 --> 00:25:25,440
is um

721
00:25:22,640 --> 00:25:26,799
uh uh it's less important for the

722
00:25:25,440 --> 00:25:28,080
application or the other policy to be

723
00:25:26,799 --> 00:25:29,279
able to control this but we wanted to

724
00:25:28,080 --> 00:25:30,799
have the knob

725
00:25:29,279 --> 00:25:33,039
um sending and receiving are both

726
00:25:30,799 --> 00:25:36,320
asynchronous and event driven

727
00:25:33,039 --> 00:25:38,559
um the connection interface is also

728
00:25:36,320 --> 00:25:38,559
um

729
00:25:39,919 --> 00:25:42,960
designed to abstract away

730
00:25:41,279 --> 00:25:44,320
multi-streaming and multi-path protocols

731
00:25:42,960 --> 00:25:45,600
right like so you can have if you end up

732
00:25:44,320 --> 00:25:46,240
with a multi-streaming protocol like

733
00:25:45,600 --> 00:25:48,480
quick

734
00:25:46,240 --> 00:25:50,159
or sctp underneath like in your

735
00:25:48,480 --> 00:25:54,400
transport um

736
00:25:50,159 --> 00:25:55,360
uh uh as your transport stack that gets

737
00:25:54,400 --> 00:25:57,440
selected

738
00:25:55,360 --> 00:25:58,879
um then there's the idea of basically

739
00:25:57,440 --> 00:25:59,760
taking a connection and cloning it it's

740
00:25:58,880 --> 00:26:02,720
kind of like fork

741
00:25:59,760 --> 00:26:03,679
uh in unix and if you clone a

742
00:26:02,720 --> 00:26:06,240
multi-streamed

743
00:26:03,679 --> 00:26:07,520
uh um protocol you actually end up now

744
00:26:06,240 --> 00:26:08,480
with two streams inside the same

745
00:26:07,520 --> 00:26:11,440
protocol

746
00:26:08,480 --> 00:26:13,039
um but this also allows you to do um to

747
00:26:11,440 --> 00:26:14,240
have applications that do this cloning

748
00:26:13,039 --> 00:26:14,799
that says hey i want a connection to the

749
00:26:14,240 --> 00:26:17,120
same

750
00:26:14,799 --> 00:26:18,400
endpoint um to the same application

751
00:26:17,120 --> 00:26:19,760
please make that happen

752
00:26:18,400 --> 00:26:20,880
and if you end up selecting a protocol

753
00:26:19,760 --> 00:26:22,840
that's not multi-streaming it'll just

754
00:26:20,880 --> 00:26:25,919
create multiple flows

755
00:26:22,840 --> 00:26:27,199
um one uh

756
00:26:25,919 --> 00:26:28,880
in terms of the amount of time we've

757
00:26:27,200 --> 00:26:30,240
spent on it i'd say possibly the

758
00:26:28,880 --> 00:26:32,480
trickiest and most important

759
00:26:30,240 --> 00:26:33,679
um oh and i'll say trickiest it's not

760
00:26:32,480 --> 00:26:35,840
the most important feature

761
00:26:33,679 --> 00:26:37,600
we really wanted to make sure that like

762
00:26:35,840 --> 00:26:38,959
taps would be usable in a world where

763
00:26:37,600 --> 00:26:39,678
only one endpoint is using taps because

764
00:26:38,960 --> 00:26:42,480
otherwise like

765
00:26:39,679 --> 00:26:43,520
requiring coordinated deployment of some

766
00:26:42,480 --> 00:26:45,520
system is basically

767
00:26:43,520 --> 00:26:46,799
you're talking about not building a

768
00:26:45,520 --> 00:26:48,000
protocol selection engine but a new

769
00:26:46,799 --> 00:26:49,679
protocol we didn't want to do that we

770
00:26:48,000 --> 00:26:53,279
wanted the protocol selection engine

771
00:26:49,679 --> 00:26:55,039
so um specifically if we end up in a

772
00:26:53,279 --> 00:26:56,640
situation where you have one side that

773
00:26:55,039 --> 00:26:57,279
is trying to provide a message-oriented

774
00:26:56,640 --> 00:26:58,640
service

775
00:26:57,279 --> 00:27:00,080
to the application the other side is

776
00:26:58,640 --> 00:27:02,480
just straight tcp and it's going to do

777
00:27:00,080 --> 00:27:05,039
its own deframing inside the application

778
00:27:02,480 --> 00:27:07,200
uh we provide for the ability to push a

779
00:27:05,039 --> 00:27:08,240
framer which is basically the thing that

780
00:27:07,200 --> 00:27:10,799
turns

781
00:27:08,240 --> 00:27:11,520
um a stream of messages into a stream of

782
00:27:10,799 --> 00:27:13,120
bytes

783
00:27:11,520 --> 00:27:14,320
and a d framer which is a thing that

784
00:27:13,120 --> 00:27:15,279
turns a stream of bytes back into a

785
00:27:14,320 --> 00:27:16,639
stream of messages which

786
00:27:15,279 --> 00:27:18,480
can asynchronously pop up to the

787
00:27:16,640 --> 00:27:19,120
application we can push that from the

788
00:27:18,480 --> 00:27:22,320
application

789
00:27:19,120 --> 00:27:23,678
down into um the the transport service

790
00:27:22,320 --> 00:27:25,279
so the application basically gets this

791
00:27:23,679 --> 00:27:26,480
message-oriented thing even if it's not

792
00:27:25,279 --> 00:27:29,840
running on top of

793
00:27:26,480 --> 00:27:34,640
a um uh message

794
00:27:29,840 --> 00:27:37,439
boundary preserving protocol stack um

795
00:27:34,640 --> 00:27:37,440
next slide

796
00:27:37,760 --> 00:27:41,840
so like the way that to make this a

797
00:27:40,399 --> 00:27:42,239
little bit more concrete let's say that

798
00:27:41,840 --> 00:27:45,360
you're

799
00:27:42,240 --> 00:27:47,440
on a multiply connected device

800
00:27:45,360 --> 00:27:48,959
uh that has these five possible

801
00:27:47,440 --> 00:27:49,840
candidate protocol stacks we can either

802
00:27:48,960 --> 00:27:53,279
run

803
00:27:49,840 --> 00:27:55,600
um udp over v4 over uh ethernet or tcp

804
00:27:53,279 --> 00:27:57,760
or v6 over ethernet or scp or dtls over

805
00:27:55,600 --> 00:28:00,480
udp over v6 over ethernet

806
00:27:57,760 --> 00:28:01,200
or quick overv6 over cellular or tcp

807
00:28:00,480 --> 00:28:03,679
over v4

808
00:28:01,200 --> 00:28:04,799
over lte the selection properties up at

809
00:28:03,679 --> 00:28:05,760
the top are things that the the

810
00:28:04,799 --> 00:28:07,200
application

811
00:28:05,760 --> 00:28:08,879
uh could then say that it wants to

812
00:28:07,200 --> 00:28:12,159
prefer or require

813
00:28:08,880 --> 00:28:15,679
or avoid or um prohibit

814
00:28:12,159 --> 00:28:17,039
um and based on the the set of things

815
00:28:15,679 --> 00:28:18,080
the constraints that the application

816
00:28:17,039 --> 00:28:19,919
passes down

817
00:28:18,080 --> 00:28:21,120
it'll eliminate some of these candidate

818
00:28:19,919 --> 00:28:24,799
protocol stacks from

819
00:28:21,120 --> 00:28:25,600
uh from uh a possible connection right

820
00:28:24,799 --> 00:28:28,000
so

821
00:28:25,600 --> 00:28:30,158
yeah if i'm looking for fixed interfaces

822
00:28:28,000 --> 00:28:32,720
right i don't want to run on lte

823
00:28:30,159 --> 00:28:34,240
because uh you know i'm assuming that

824
00:28:32,720 --> 00:28:35,679
that's going to cost me more well then

825
00:28:34,240 --> 00:28:38,720
i'm going to eliminate all the lte

826
00:28:35,679 --> 00:28:40,559
the stacks with lte at layer 2. um

827
00:28:38,720 --> 00:28:41,840
if i need a protocol that's explicitly

828
00:28:40,559 --> 00:28:43,440
multi-streaming

829
00:28:41,840 --> 00:28:44,399
uh because for performance reasons i'm

830
00:28:43,440 --> 00:28:45,679
going to clone a whole bunch of

831
00:28:44,399 --> 00:28:46,799
connections and i know i don't want to

832
00:28:45,679 --> 00:28:48,960
have flow explosion

833
00:28:46,799 --> 00:28:49,918
well that'll only allow me to select um

834
00:28:48,960 --> 00:28:52,320
ctp and quick

835
00:28:49,919 --> 00:28:53,600
and so on um there is a gigantic list of

836
00:28:52,320 --> 00:28:54,879
these in the document that's actually

837
00:28:53,600 --> 00:28:55,840
another one of the things it's a little

838
00:28:54,880 --> 00:28:57,919
um

839
00:28:55,840 --> 00:28:59,760
can be a little uh intimidating at the

840
00:28:57,919 --> 00:29:00,640
beginning but these are basically just

841
00:28:59,760 --> 00:29:04,000
you know they all fit into this

842
00:29:00,640 --> 00:29:06,000
framework of i have some um

843
00:29:04,000 --> 00:29:07,520
connection dimensions and i'd like to

844
00:29:06,000 --> 00:29:10,640
use those to prune the set

845
00:29:07,520 --> 00:29:13,039
of possible candidate protocol stacks

846
00:29:10,640 --> 00:29:15,600
uh next slide i think there's one more

847
00:29:13,039 --> 00:29:15,600
pretty picture

848
00:29:16,159 --> 00:29:20,480
yeah so uh to get into a little bit more

849
00:29:18,159 --> 00:29:24,320
detail on how we create connections

850
00:29:20,480 --> 00:29:25,760
so um there are these sort of uh

851
00:29:24,320 --> 00:29:27,760
uh these three phases are

852
00:29:25,760 --> 00:29:28,960
pre-established uh established and

853
00:29:27,760 --> 00:29:31,760
terminated

854
00:29:28,960 --> 00:29:32,880
um i take you know information about the

855
00:29:31,760 --> 00:29:35,520
local endpoint which

856
00:29:32,880 --> 00:29:36,080
is not just you know which addresses i

857
00:29:35,520 --> 00:29:39,600
want to

858
00:29:36,080 --> 00:29:40,480
um possibly use as on my local addresses

859
00:29:39,600 --> 00:29:42,158
but also

860
00:29:40,480 --> 00:29:44,320
um information about my endpoint

861
00:29:42,159 --> 00:29:46,559
identity if i'm using a protocol

862
00:29:44,320 --> 00:29:47,360
um that might require identity

863
00:29:46,559 --> 00:29:48,720
information

864
00:29:47,360 --> 00:29:50,639
uh the remote endpoint which is who i

865
00:29:48,720 --> 00:29:52,559
want to connect to um the

866
00:29:50,640 --> 00:29:54,080
transport properties which is this sort

867
00:29:52,559 --> 00:29:55,520
of set of things that allow me to select

868
00:29:54,080 --> 00:29:58,158
the candidate protocol stack

869
00:29:55,520 --> 00:29:59,679
and my security parameters which are um

870
00:29:58,159 --> 00:30:03,279
information that just gets passed

871
00:29:59,679 --> 00:30:04,720
into the um uh the security layer

872
00:30:03,279 --> 00:30:07,600
protocols that would be selected

873
00:30:04,720 --> 00:30:08,159
this is um the security parameters are

874
00:30:07,600 --> 00:30:10,399
special

875
00:30:08,159 --> 00:30:12,320
in taps uh because it turns out there

876
00:30:10,399 --> 00:30:13,520
are very very very few times that you

877
00:30:12,320 --> 00:30:16,480
might want to race

878
00:30:13,520 --> 00:30:17,918
based on a security protocol because you

879
00:30:16,480 --> 00:30:18,960
don't want to end up in a situation

880
00:30:17,919 --> 00:30:20,960
where

881
00:30:18,960 --> 00:30:22,640
um you actually downgrade attack

882
00:30:20,960 --> 00:30:24,799
yourself right like so

883
00:30:22,640 --> 00:30:26,640
um a lot of transport protocols provide

884
00:30:24,799 --> 00:30:27,200
equivalent services or services that can

885
00:30:26,640 --> 00:30:29,039
be

886
00:30:27,200 --> 00:30:30,640
emulated by the system over equivalent

887
00:30:29,039 --> 00:30:32,559
stacks this is not the case with

888
00:30:30,640 --> 00:30:32,880
security protocols right like tls 1.3

889
00:30:32,559 --> 00:30:35,440
has

890
00:30:32,880 --> 00:30:36,399
has different properties than tls 1.1

891
00:30:35,440 --> 00:30:37,919
for example

892
00:30:36,399 --> 00:30:39,760
uh so the security parameters are kind

893
00:30:37,919 --> 00:30:40,799
of special in we have a whole document

894
00:30:39,760 --> 00:30:42,080
about this

895
00:30:40,799 --> 00:30:44,480
um it was one of the ones that was just

896
00:30:42,080 --> 00:30:46,559
published if i recall correctly

897
00:30:44,480 --> 00:30:47,520
so you can either take a pre-connection

898
00:30:46,559 --> 00:30:49,200
and

899
00:30:47,520 --> 00:30:51,039
initiate it in which case it's like an

900
00:30:49,200 --> 00:30:53,120
active open or you can listen it

901
00:30:51,039 --> 00:30:55,279
in which case it's a passive open and

902
00:30:53,120 --> 00:30:58,320
the the transport properties then

903
00:30:55,279 --> 00:31:02,159
turn into the set of bound

904
00:30:58,320 --> 00:31:02,799
um uh well bound listening sockets down

905
00:31:02,159 --> 00:31:06,399
underneath

906
00:31:02,799 --> 00:31:07,440
the system um when you initiate you get

907
00:31:06,399 --> 00:31:09,518
a callback when

908
00:31:07,440 --> 00:31:10,720
the uh the connection is ready it's

909
00:31:09,519 --> 00:31:12,880
connection ready event

910
00:31:10,720 --> 00:31:14,559
and when you're listening you get a call

911
00:31:12,880 --> 00:31:15,120
back or an event when the connection is

912
00:31:14,559 --> 00:31:16,158
received

913
00:31:15,120 --> 00:31:18,479
and then you get a connection that you

914
00:31:16,159 --> 00:31:21,039
can transfer data on um

915
00:31:18,480 --> 00:31:21,519
and then there's basically two ways to

916
00:31:21,039 --> 00:31:22,799
uh

917
00:31:21,519 --> 00:31:24,640
to end up terminated there's either

918
00:31:22,799 --> 00:31:26,240
close which is an orderly shutdown of

919
00:31:24,640 --> 00:31:27,120
the connection or there's an abort which

920
00:31:26,240 --> 00:31:28,559
is

921
00:31:27,120 --> 00:31:30,719
throw my hands up and stop right like so

922
00:31:28,559 --> 00:31:33,840
these are like pin versus reset in

923
00:31:30,720 --> 00:31:33,840
in tcp land

924
00:31:34,720 --> 00:31:37,919
next slide

925
00:31:38,080 --> 00:31:43,120
so um why

926
00:31:41,679 --> 00:31:44,559
like if you look at the document you'll

927
00:31:43,120 --> 00:31:46,080
see you know a lot of stuff that looks

928
00:31:44,559 --> 00:31:47,200
kind of like pseudocode or the interface

929
00:31:46,080 --> 00:31:48,879
document you'll see a lot of stuff that

930
00:31:47,200 --> 00:31:51,679
looks kind of like pseudocode

931
00:31:48,880 --> 00:31:52,880
um you know why is this an abstract

932
00:31:51,679 --> 00:31:54,559
interface why isn't this something more

933
00:31:52,880 --> 00:31:56,480
like the sap api which is actually

934
00:31:54,559 --> 00:31:59,279
defined in terms of posix

935
00:31:56,480 --> 00:32:01,360
um and there's a couple of reasons for

936
00:31:59,279 --> 00:32:03,120
this but but mainly it's because swift

937
00:32:01,360 --> 00:32:05,678
versus haskell versus russ

938
00:32:03,120 --> 00:32:07,600
rust versus whatnot is not much fun to

939
00:32:05,679 --> 00:32:09,120
discuss in my client i did see lucas

940
00:32:07,600 --> 00:32:10,959
ask a question about crust which we can

941
00:32:09,120 --> 00:32:14,639
talk about when i'm done here

942
00:32:10,960 --> 00:32:16,320
um but uh

943
00:32:14,640 --> 00:32:17,600
we're not in the business in the ietf of

944
00:32:16,320 --> 00:32:18,240
trying to change programming language

945
00:32:17,600 --> 00:32:19,519
idioms and

946
00:32:18,240 --> 00:32:21,760
if we want to see something like this

947
00:32:19,519 --> 00:32:23,600
adopted we want to have the general

948
00:32:21,760 --> 00:32:25,120
shape of the api be the same but we want

949
00:32:23,600 --> 00:32:26,799
to fit it into

950
00:32:25,120 --> 00:32:28,239
um the programming language idioms like

951
00:32:26,799 --> 00:32:31,840
we had a

952
00:32:28,240 --> 00:32:34,880
a student um at eth

953
00:32:31,840 --> 00:32:38,399
uh back when i was at eph uh who

954
00:32:34,880 --> 00:32:40,640
um implemented a tap system for

955
00:32:38,399 --> 00:32:42,320
uh multi architecture switching between

956
00:32:40,640 --> 00:32:44,559
the internet and scion so this future

957
00:32:42,320 --> 00:32:46,480
internet architecture based on taps

958
00:32:44,559 --> 00:32:47,678
and the implementation uh that they come

959
00:32:46,480 --> 00:32:51,600
came up with

960
00:32:47,679 --> 00:32:53,440
was um uh explicitly didn't have a lot

961
00:32:51,600 --> 00:32:54,480
of the names as we have in the taps api

962
00:32:53,440 --> 00:32:56,480
and i'm like well why is it

963
00:32:54,480 --> 00:32:57,919
like well i wrote it in go and i want go

964
00:32:56,480 --> 00:32:59,279
programmers to be able to use it so

965
00:32:57,919 --> 00:33:00,799
everything has to be called dial

966
00:32:59,279 --> 00:33:02,720
right like so we don't want to be in the

967
00:33:00,799 --> 00:33:06,799
business of changing the

968
00:33:02,720 --> 00:33:08,799
um uh the idioms but we do want to

969
00:33:06,799 --> 00:33:10,639
incentivize application development to

970
00:33:08,799 --> 00:33:12,559
be less synchronous

971
00:33:10,640 --> 00:33:14,559
less imperative about how it uses the

972
00:33:12,559 --> 00:33:16,960
transport layer in order to free up

973
00:33:14,559 --> 00:33:17,840
our ability to um deploy new transport

974
00:33:16,960 --> 00:33:19,360
protocols

975
00:33:17,840 --> 00:33:20,639
and if we have something that is shaped

976
00:33:19,360 --> 00:33:21,360
like this but with slightly different

977
00:33:20,640 --> 00:33:23,919
names

978
00:33:21,360 --> 00:33:25,439
one it means that we have this evolution

979
00:33:23,919 --> 00:33:27,600
ability on more platforms

980
00:33:25,440 --> 00:33:28,799
too it also means that as as um

981
00:33:27,600 --> 00:33:30,959
developers

982
00:33:28,799 --> 00:33:32,000
uh use apis that are very much shaped

983
00:33:30,960 --> 00:33:34,559
like this

984
00:33:32,000 --> 00:33:36,159
um it becomes easier to sort of port um

985
00:33:34,559 --> 00:33:37,840
applications between them or to build

986
00:33:36,159 --> 00:33:40,399
frameworks on top of different platforms

987
00:33:37,840 --> 00:33:43,678
that sort of can then run on top of tabs

988
00:33:40,399 --> 00:33:45,918
um the uh

989
00:33:43,679 --> 00:33:47,679
uh mike you're now required to write uh

990
00:33:45,919 --> 00:33:48,880
taps implementation in fourth i'm sorry

991
00:33:47,679 --> 00:33:53,840
i don't make the rules

992
00:33:48,880 --> 00:33:53,840
um cool uh next slide

993
00:33:54,559 --> 00:34:00,639
sorry just looked at jabber so uh

994
00:33:57,679 --> 00:34:02,320
why do we you know you know why do we

995
00:34:00,640 --> 00:34:03,039
need this right like so why do we

996
00:34:02,320 --> 00:34:04,960
actually

997
00:34:03,039 --> 00:34:06,240
need to have transport layer agility

998
00:34:04,960 --> 00:34:07,120
right like i thought this was the quick

999
00:34:06,240 --> 00:34:11,040
area

1000
00:34:07,120 --> 00:34:14,960
um so if you look at all of the

1001
00:34:11,040 --> 00:34:18,639
uh all of the transport protocol

1002
00:34:14,960 --> 00:34:22,240
um uh features that we have

1003
00:34:18,639 --> 00:34:23,679
in taps the one that has

1004
00:34:22,239 --> 00:34:25,118
or the two that have not yet been pulled

1005
00:34:23,679 --> 00:34:26,639
into quick but there's a lot of

1006
00:34:25,119 --> 00:34:29,599
discussion about talking about them

1007
00:34:26,639 --> 00:34:30,480
is multipath um sorry john i said

1008
00:34:29,599 --> 00:34:34,159
multipath quick

1009
00:34:30,480 --> 00:34:36,240
uh and uh partial reliability

1010
00:34:34,159 --> 00:34:37,919
even though there are certainly very

1011
00:34:36,239 --> 00:34:38,638
easy hacks for doing partial reliability

1012
00:34:37,918 --> 00:34:40,960
in

1013
00:34:38,639 --> 00:34:42,320
uh in quick so why do we need transport

1014
00:34:40,960 --> 00:34:44,480
protocol agility if everything's going

1015
00:34:42,320 --> 00:34:47,599
to be quick

1016
00:34:44,480 --> 00:34:51,918
um i'd say there

1017
00:34:47,599 --> 00:34:54,320
are uh there are a few reasons for this

1018
00:34:51,918 --> 00:34:55,118
um one like i tend to believe that like

1019
00:34:54,320 --> 00:34:56,560
sort of the future

1020
00:34:55,119 --> 00:34:57,760
at least of the wire image of the

1021
00:34:56,560 --> 00:34:59,119
transport layer is going to be

1022
00:34:57,760 --> 00:35:02,160
increasingly quick

1023
00:34:59,119 --> 00:35:03,839
um the quick working group has a

1024
00:35:02,160 --> 00:35:05,118
slightly different philosophy about this

1025
00:35:03,839 --> 00:35:06,400
than the taps working group to put it

1026
00:35:05,119 --> 00:35:08,079
mildly um

1027
00:35:06,400 --> 00:35:09,839
quick explicitly doesn't have a proper

1028
00:35:08,079 --> 00:35:12,320
interface uh there's a focus on the web

1029
00:35:09,839 --> 00:35:14,560
the implementations are tied to h3

1030
00:35:12,320 --> 00:35:16,000
um the implementation the interface

1031
00:35:14,560 --> 00:35:17,359
between the application and transport is

1032
00:35:16,000 --> 00:35:18,640
kind of blurry kind of internal like

1033
00:35:17,359 --> 00:35:19,839
there are requirements for what that

1034
00:35:18,640 --> 00:35:21,118
interface has to do

1035
00:35:19,839 --> 00:35:22,560
but if you look at the implementations

1036
00:35:21,119 --> 00:35:23,839
of quick these things are bound pretty

1037
00:35:22,560 --> 00:35:26,160
tightly to each other

1038
00:35:23,839 --> 00:35:27,599
and that's actually done for um sort of

1039
00:35:26,160 --> 00:35:28,560
like performance reasons this is seen as

1040
00:35:27,599 --> 00:35:32,079
a feature

1041
00:35:28,560 --> 00:35:35,920
uh we believe there's still um

1042
00:35:32,079 --> 00:35:37,839
quite a lot of uh of value of having

1043
00:35:35,920 --> 00:35:39,599
uh this abstract api and of course quick

1044
00:35:37,839 --> 00:35:41,759
could be one of the um

1045
00:35:39,599 --> 00:35:43,599
uh the candidate stacks that lives on

1046
00:35:41,760 --> 00:35:45,920
underneath this you could also have

1047
00:35:43,599 --> 00:35:47,839
you know uh you know websockets or web

1048
00:35:45,920 --> 00:35:49,520
transport over h3 over quick as one of

1049
00:35:47,839 --> 00:35:49,759
the candidates tax on this right like so

1050
00:35:49,520 --> 00:35:53,280
it

1051
00:35:49,760 --> 00:35:53,280
it subsumes all of these things

1052
00:35:53,359 --> 00:36:01,759
um so next slide

1053
00:35:58,800 --> 00:36:02,400
which i think is my last slide so we're

1054
00:36:01,760 --> 00:36:06,160
we're

1055
00:36:02,400 --> 00:36:07,119
almost done um the

1056
00:36:06,160 --> 00:36:10,399
you know the drafts are there in

1057
00:36:07,119 --> 00:36:13,280
github.com ietf taps api drafts

1058
00:36:10,400 --> 00:36:14,240
uh architecture has been close to

1059
00:36:13,280 --> 00:36:16,960
completion

1060
00:36:14,240 --> 00:36:18,720
for um quite a while we've basically

1061
00:36:16,960 --> 00:36:20,240
been holding it uh making sure that we

1062
00:36:18,720 --> 00:36:21,359
don't find anything in the interface

1063
00:36:20,240 --> 00:36:22,399
that invalidates some part of the

1064
00:36:21,359 --> 00:36:24,560
architecture

1065
00:36:22,400 --> 00:36:26,079
uh interface has i think two open issues

1066
00:36:24,560 --> 00:36:26,960
on it that are ready for text we just

1067
00:36:26,079 --> 00:36:28,800
need to

1068
00:36:26,960 --> 00:36:30,000
uh get people out of you know this

1069
00:36:28,800 --> 00:36:31,040
working group meeting so they can go

1070
00:36:30,000 --> 00:36:32,800
write text

1071
00:36:31,040 --> 00:36:35,359
uh implementation is following close

1072
00:36:32,800 --> 00:36:36,960
behind um

1073
00:36:35,359 --> 00:36:38,560
two implementations that people in the

1074
00:36:36,960 --> 00:36:39,760
working group have quite a bit of

1075
00:36:38,560 --> 00:36:41,040
experience with our apple's

1076
00:36:39,760 --> 00:36:43,920
network.framework

1077
00:36:41,040 --> 00:36:44,800
and uh the there's one that's looking at

1078
00:36:43,920 --> 00:36:46,800
the

1079
00:36:44,800 --> 00:36:48,400
taps on top of python async io as a

1080
00:36:46,800 --> 00:36:52,160
users based environment from

1081
00:36:48,400 --> 00:36:54,000
um uh so max and teresa and a couple of

1082
00:36:52,160 --> 00:36:57,200
other people from fdinet

1083
00:36:54,000 --> 00:37:00,400
um the uh

1084
00:36:57,200 --> 00:37:02,000
i i think i've seen there was a a few

1085
00:37:00,400 --> 00:37:02,800
research grades implementations one and

1086
00:37:02,000 --> 00:37:04,560
go

1087
00:37:02,800 --> 00:37:05,599
uh i've seen some work and rust uh

1088
00:37:04,560 --> 00:37:06,240
someone actually trying to put this on

1089
00:37:05,599 --> 00:37:08,320
top of russ

1090
00:37:06,240 --> 00:37:09,598
async i think colin had a student that

1091
00:37:08,320 --> 00:37:12,079
was doing that

1092
00:37:09,599 --> 00:37:12,720
um but these are the two big ones that

1093
00:37:12,079 --> 00:37:16,320
we know about

1094
00:37:12,720 --> 00:37:18,879
so um you know please come have a look

1095
00:37:16,320 --> 00:37:20,000
uh the architecture and interface will

1096
00:37:18,880 --> 00:37:22,880
be going through

1097
00:37:20,000 --> 00:37:24,560
um last call and moving up soon so this

1098
00:37:22,880 --> 00:37:27,920
is kind of a speak now

1099
00:37:24,560 --> 00:37:31,440
um or uh you know

1100
00:37:27,920 --> 00:37:32,800
enjoy the results um but please do come

1101
00:37:31,440 --> 00:37:34,960
by and i hope that this

1102
00:37:32,800 --> 00:37:37,200
makes taps less scary for those of you

1103
00:37:34,960 --> 00:37:38,400
who have not been paying attention to it

1104
00:37:37,200 --> 00:37:40,399
so that i think we have a little bit of

1105
00:37:38,400 --> 00:37:42,240
time for questions

1106
00:37:40,400 --> 00:37:44,640
oh yes certainly brian thanks for being

1107
00:37:42,240 --> 00:37:46,479
funny um uh yeah so the

1108
00:37:44,640 --> 00:37:48,640
the taps crew has been pretty good about

1109
00:37:46,480 --> 00:37:50,079
running a q a and jabber but uh yes

1110
00:37:48,640 --> 00:37:52,480
we've plenty of time

1111
00:37:50,079 --> 00:37:53,920
for comments so pete okay cool could

1112
00:37:52,480 --> 00:37:55,839
someone make sure that we get the jabber

1113
00:37:53,920 --> 00:37:59,520
logs into the minutes too because like

1114
00:37:55,839 --> 00:38:01,680
i'd like to i'd like to go back and look

1115
00:37:59,520 --> 00:38:05,200
at those

1116
00:38:01,680 --> 00:38:07,440
so uh hopefully an easy question um

1117
00:38:05,200 --> 00:38:08,319
the last time i coded on a mac was way

1118
00:38:07,440 --> 00:38:11,200
before network

1119
00:38:08,320 --> 00:38:12,160
framework do we know what the uptake for

1120
00:38:11,200 --> 00:38:15,200
either

1121
00:38:12,160 --> 00:38:17,598
network done framework or python

1122
00:38:15,200 --> 00:38:19,200
uh the python implementation are people

1123
00:38:17,599 --> 00:38:23,520
actually using it

1124
00:38:19,200 --> 00:38:23,520
calling tommy pauly to the microphone

1125
00:38:25,280 --> 00:38:30,720
hello yeah um

1126
00:38:28,320 --> 00:38:31,680
so as brian mentioned we released it

1127
00:38:30,720 --> 00:38:34,879
initially in

1128
00:38:31,680 --> 00:38:38,240
2018 so we've essentially had two years

1129
00:38:34,880 --> 00:38:39,119
of people adopting um you know for the

1130
00:38:38,240 --> 00:38:40,959
first year

1131
00:38:39,119 --> 00:38:42,560
you know people generally don't kind of

1132
00:38:40,960 --> 00:38:44,720
jump on board initially

1133
00:38:42,560 --> 00:38:47,359
but i would say like in the past year um

1134
00:38:44,720 --> 00:38:49,839
just based on the number of

1135
00:38:47,359 --> 00:38:51,200
like developer forums bugs and stuff and

1136
00:38:49,839 --> 00:38:54,720
app developers we're working with

1137
00:38:51,200 --> 00:38:55,439
um we're seeing a pretty good uptake on

1138
00:38:54,720 --> 00:38:58,000
it

1139
00:38:55,440 --> 00:38:59,760
uh largely a lot of developers had been

1140
00:38:58,000 --> 00:39:02,320
using some third-party libraries

1141
00:38:59,760 --> 00:39:03,119
there's like things called cocoa async

1142
00:39:02,320 --> 00:39:04,560
io

1143
00:39:03,119 --> 00:39:07,440
that we're really just trying to offer

1144
00:39:04,560 --> 00:39:08,960
better uh like asynchronous semantics

1145
00:39:07,440 --> 00:39:11,119
but with a socket abstraction

1146
00:39:08,960 --> 00:39:13,359
um and not necessarily giving you all of

1147
00:39:11,119 --> 00:39:14,960
these kind of transport properties

1148
00:39:13,359 --> 00:39:17,759
and i think we are definitely seeing a

1149
00:39:14,960 --> 00:39:20,320
shift um away from that

1150
00:39:17,760 --> 00:39:22,640
and you know caveat on that that you

1151
00:39:20,320 --> 00:39:26,000
know most apps are still using

1152
00:39:22,640 --> 00:39:27,839
like web loading type apis

1153
00:39:26,000 --> 00:39:29,520
for a lot of people but what you are

1154
00:39:27,839 --> 00:39:30,160
doing kind of low level networking a lot

1155
00:39:29,520 --> 00:39:33,119
of our like

1156
00:39:30,160 --> 00:39:34,640
um you know vpn apps streaming apps they

1157
00:39:33,119 --> 00:39:38,240
are using this

1158
00:39:34,640 --> 00:39:41,520
and um actually there are

1159
00:39:38,240 --> 00:39:44,240
places um certain platforms like

1160
00:39:41,520 --> 00:39:46,160
a watch app as well as we have like new

1161
00:39:44,240 --> 00:39:46,640
like app clip apps that are only allowed

1162
00:39:46,160 --> 00:39:48,399
to use

1163
00:39:46,640 --> 00:39:50,319
this api that they can't actually access

1164
00:39:48,400 --> 00:39:52,160
the sockets anymore

1165
00:39:50,320 --> 00:39:54,079
um so we're kind of and if you're

1166
00:39:52,160 --> 00:39:56,160
allowed to answer them

1167
00:39:54,079 --> 00:39:57,920
if you're allowed to answer the question

1168
00:39:56,160 --> 00:39:59,598
is apple using it internally for like

1169
00:39:57,920 --> 00:40:02,240
safari and things

1170
00:39:59,599 --> 00:40:03,680
yeah absolutely um this is the layer

1171
00:40:02,240 --> 00:40:06,479
that is below

1172
00:40:03,680 --> 00:40:07,118
all of the http apis and webkit stuff

1173
00:40:06,480 --> 00:40:09,760
that

1174
00:40:07,119 --> 00:40:10,720
we expose including what all of our

1175
00:40:09,760 --> 00:40:14,000
connections so

1176
00:40:10,720 --> 00:40:15,200
the vast majority of connections on ios

1177
00:40:14,000 --> 00:40:18,720
and mac os devices

1178
00:40:15,200 --> 00:40:22,240
are using this as their way to decide

1179
00:40:18,720 --> 00:40:25,439
how to bring up the transport um one

1180
00:40:22,240 --> 00:40:27,040
kind of detail i'll note is the the api

1181
00:40:25,440 --> 00:40:29,119
for the connection

1182
00:40:27,040 --> 00:40:30,400
is you know really closely aligned with

1183
00:40:29,119 --> 00:40:32,960
what we had in

1184
00:40:30,400 --> 00:40:33,760
2018 in taps there are definitely you

1185
00:40:32,960 --> 00:40:36,640
know

1186
00:40:33,760 --> 00:40:39,280
additional properties and tweaks that

1187
00:40:36,640 --> 00:40:41,759
have gone on in the document since then

1188
00:40:39,280 --> 00:40:43,520
um i expect that you can once we have

1189
00:40:41,760 --> 00:40:46,240
like rfc version

1190
00:40:43,520 --> 00:40:48,160
there will be some work to um spruce up

1191
00:40:46,240 --> 00:40:49,759
some of the apis to align them

1192
00:40:48,160 --> 00:40:52,240
more and make sure that there's a group

1193
00:40:49,760 --> 00:40:55,520
gonna be like a more accessible

1194
00:40:52,240 --> 00:40:58,720
cross-platform common approach we can do

1195
00:40:55,520 --> 00:40:58,720
cool cool

1196
00:40:59,040 --> 00:41:01,520
spencer

1197
00:41:03,760 --> 00:41:12,240
yeah i just wanted to uh

1198
00:41:07,280 --> 00:41:12,240
thank uh martin for um

1199
00:41:12,400 --> 00:41:16,800
putting this on uh i have not been able

1200
00:41:15,040 --> 00:41:17,520
to follow taps as closely as i would

1201
00:41:16,800 --> 00:41:20,240
like since

1202
00:41:17,520 --> 00:41:22,960
uh stepping down some a.d and i'm really

1203
00:41:20,240 --> 00:41:25,520
glad to see the progress has continued

1204
00:41:22,960 --> 00:41:27,440
um i know that when we were talking

1205
00:41:25,520 --> 00:41:28,720
about uh a couple topics in the quick

1206
00:41:27,440 --> 00:41:31,440
working group

1207
00:41:28,720 --> 00:41:32,799
uh i invoked the word taps and and

1208
00:41:31,440 --> 00:41:36,400
everybody kind of

1209
00:41:32,800 --> 00:41:38,079
with taps so i think i think that you

1210
00:41:36,400 --> 00:41:39,280
did exactly the right thing at exactly

1211
00:41:38,079 --> 00:41:41,680
the right time

1212
00:41:39,280 --> 00:41:41,680
thank you

1213
00:41:43,520 --> 00:41:46,880
thanks spencer so i'm in the queue just

1214
00:41:45,839 --> 00:41:48,560
to say like

1215
00:41:46,880 --> 00:41:50,000
one thing that i am excited about with

1216
00:41:48,560 --> 00:41:51,759
this in particular is i think it's just

1217
00:41:50,000 --> 00:41:52,160
coming at a super opportune time with

1218
00:41:51,760 --> 00:41:54,720
quick

1219
00:41:52,160 --> 00:41:57,040
um we are already essentially going to

1220
00:41:54,720 --> 00:41:59,520
ask application developers to

1221
00:41:57,040 --> 00:42:02,079
to crack open their code and like rework

1222
00:41:59,520 --> 00:42:03,520
their api you know rework the api that

1223
00:42:02,079 --> 00:42:05,119
they're exercising and move from sockets

1224
00:42:03,520 --> 00:42:06,960
to something with quick

1225
00:42:05,119 --> 00:42:08,160
and uh what if they're already doing

1226
00:42:06,960 --> 00:42:09,680
that what a great time to say here's

1227
00:42:08,160 --> 00:42:10,160
something you can use that is going to

1228
00:42:09,680 --> 00:42:12,240
be

1229
00:42:10,160 --> 00:42:13,920
in theory portable lots of platforms so

1230
00:42:12,240 --> 00:42:15,439
i think it's sort of like two

1231
00:42:13,920 --> 00:42:17,040
it's kind of a chance to get two wins

1232
00:42:15,440 --> 00:42:18,560
here uh so

1233
00:42:17,040 --> 00:42:20,079
bring in quick and bring in abstraction

1234
00:42:18,560 --> 00:42:22,799
simultaneously

1235
00:42:20,079 --> 00:42:23,599
so so that's actually one of the you

1236
00:42:22,800 --> 00:42:25,200
know

1237
00:42:23,599 --> 00:42:27,520
one of the things that is driving us to

1238
00:42:25,200 --> 00:42:28,640
get this done we had a we were like we

1239
00:42:27,520 --> 00:42:32,000
thought we were about 80

1240
00:42:28,640 --> 00:42:33,839
done about uh about two years ago

1241
00:42:32,000 --> 00:42:35,119
and then we had a bit of a lull in the

1242
00:42:33,839 --> 00:42:36,960
working group because

1243
00:42:35,119 --> 00:42:38,400
almost everyone who was working on this

1244
00:42:36,960 --> 00:42:39,680
either ran out of funding or changed

1245
00:42:38,400 --> 00:42:43,040
jobs or both

1246
00:42:39,680 --> 00:42:43,759
um so like uh there was like a a nine

1247
00:42:43,040 --> 00:42:45,359
months

1248
00:42:43,760 --> 00:42:46,960
kind of uh you can actually see it in

1249
00:42:45,359 --> 00:42:49,279
the github there's this

1250
00:42:46,960 --> 00:42:50,640
right uh and then you know that's one of

1251
00:42:49,280 --> 00:42:53,040
the things that energized us to

1252
00:42:50,640 --> 00:42:53,759
to sort of um you know get this thing

1253
00:42:53,040 --> 00:42:55,759
done

1254
00:42:53,760 --> 00:42:57,680
uh i will say that one of the the

1255
00:42:55,760 --> 00:43:00,319
questions that we ask ourselves often

1256
00:42:57,680 --> 00:43:01,520
sort of like a litmus test for a change

1257
00:43:00,319 --> 00:43:03,200
this api

1258
00:43:01,520 --> 00:43:04,880
is we want to make sure one that it

1259
00:43:03,200 --> 00:43:05,439
would be a good api to put on top of

1260
00:43:04,880 --> 00:43:07,839
quick

1261
00:43:05,440 --> 00:43:09,359
now pointedly 8095 the original study

1262
00:43:07,839 --> 00:43:10,720
that we did did not consider quick

1263
00:43:09,359 --> 00:43:12,400
because at the time

1264
00:43:10,720 --> 00:43:14,640
the charter guidance was we're only

1265
00:43:12,400 --> 00:43:16,319
going to consider uh published ietf

1266
00:43:14,640 --> 00:43:17,040
protocols and quick hit just chartered

1267
00:43:16,319 --> 00:43:18,319
right

1268
00:43:17,040 --> 00:43:20,319
um so there's a little bit of a race

1269
00:43:18,319 --> 00:43:21,440
condition there uh but one of the litmus

1270
00:43:20,319 --> 00:43:22,960
tests we use when we're when we're

1271
00:43:21,440 --> 00:43:23,680
evaluating the api as we make a change

1272
00:43:22,960 --> 00:43:26,240
to it is

1273
00:43:23,680 --> 00:43:27,040
does it make sense as an api between h3

1274
00:43:26,240 --> 00:43:29,359
and quick

1275
00:43:27,040 --> 00:43:30,480
and does it make sense as an api for

1276
00:43:29,359 --> 00:43:33,279
some sort of

1277
00:43:30,480 --> 00:43:33,760
stream like mask on top of h3 on top of

1278
00:43:33,280 --> 00:43:35,599
quick

1279
00:43:33,760 --> 00:43:37,920
right like and it has to be able to work

1280
00:43:35,599 --> 00:43:40,400
as both right like you have to either

1281
00:43:37,920 --> 00:43:42,400
you know have the interface be you you

1282
00:43:40,400 --> 00:43:44,000
you want to be able to implement a taps

1283
00:43:42,400 --> 00:43:44,720
on top of the taps right like so that

1284
00:43:44,000 --> 00:43:46,400
might not be

1285
00:43:44,720 --> 00:43:49,040
in terms of like code size the best

1286
00:43:46,400 --> 00:43:50,720
thing to do but as an abstraction if the

1287
00:43:49,040 --> 00:43:52,079
if the abstract api doesn't support that

1288
00:43:50,720 --> 00:43:53,359
then that's a pretty good test

1289
00:43:52,079 --> 00:43:56,160
that we need to think harder about the

1290
00:43:53,359 --> 00:43:56,160
abstract api

1291
00:43:56,800 --> 00:43:59,200
jonna

1292
00:44:02,319 --> 00:44:08,079
ryan i

1293
00:44:06,400 --> 00:44:09,839
i basically want to ask two questions

1294
00:44:08,079 --> 00:44:11,760
one of them is uh

1295
00:44:09,839 --> 00:44:13,040
do we have evidence of other folks

1296
00:44:11,760 --> 00:44:14,880
between

1297
00:44:13,040 --> 00:44:16,720
apple and then i'm saying besides apple

1298
00:44:14,880 --> 00:44:18,160
because i know that tommy and the apple

1299
00:44:16,720 --> 00:44:20,160
folks have been involved in the

1300
00:44:18,160 --> 00:44:23,200
progression of the taps

1301
00:44:20,160 --> 00:44:25,279
working group and the document itself um

1302
00:44:23,200 --> 00:44:27,359
so there's no doubt influence that's

1303
00:44:25,280 --> 00:44:28,800
gone both gone both ways and

1304
00:44:27,359 --> 00:44:29,839
the taps interface has benefited

1305
00:44:28,800 --> 00:44:31,599
tremendously from having that

1306
00:44:29,839 --> 00:44:33,279
implementation experience

1307
00:44:31,599 --> 00:44:34,960
but have you had success with others

1308
00:44:33,280 --> 00:44:38,000
adopting um

1309
00:44:34,960 --> 00:44:41,359
the api besides uh

1310
00:44:38,000 --> 00:44:42,240
apple and the second uh uh part of this

1311
00:44:41,359 --> 00:44:45,279
is

1312
00:44:42,240 --> 00:44:46,078
uh it's it with relation to quick at

1313
00:44:45,280 --> 00:44:47,599
least

1314
00:44:46,079 --> 00:44:49,119
uh one of the things that i've found is

1315
00:44:47,599 --> 00:44:51,119
that people have people are building

1316
00:44:49,119 --> 00:44:52,319
these libraries have a particular api

1317
00:44:51,119 --> 00:44:55,839
philosophy

1318
00:44:52,319 --> 00:44:58,000
and a particular api model and uh

1319
00:44:55,839 --> 00:44:58,960
with h2o i can say that for example h2

1320
00:44:58,000 --> 00:45:01,440
has a particular

1321
00:44:58,960 --> 00:45:02,400
model and quickly sort of fits into that

1322
00:45:01,440 --> 00:45:05,599
model

1323
00:45:02,400 --> 00:45:08,079
that each tool has uh it's it's it's

1324
00:45:05,599 --> 00:45:10,480
it's it's separable from the http 3

1325
00:45:08,079 --> 00:45:14,000
implementation but it definitely has

1326
00:45:10,480 --> 00:45:14,880
uh uh the flavor of the api that h2o

1327
00:45:14,000 --> 00:45:16,720
itself has

1328
00:45:14,880 --> 00:45:19,359
so i think that the same sort of thing

1329
00:45:16,720 --> 00:45:21,680
applies to a lot of other libraries

1330
00:45:19,359 --> 00:45:23,440
which i see actually as a feature right

1331
00:45:21,680 --> 00:45:25,839
and that's a concrete

1332
00:45:23,440 --> 00:45:27,119
api not an abstract one but so do you

1333
00:45:25,839 --> 00:45:29,440
see the value

1334
00:45:27,119 --> 00:45:30,319
in in keeping the abstract api simply

1335
00:45:29,440 --> 00:45:33,760
functional

1336
00:45:30,319 --> 00:45:35,359
rather than trying to uh have

1337
00:45:33,760 --> 00:45:37,359
make it aspirational for quick

1338
00:45:35,359 --> 00:45:40,799
implementations to try and

1339
00:45:37,359 --> 00:45:42,400
and build themselves to that api so

1340
00:45:40,800 --> 00:45:44,160
there's three questions there i'll

1341
00:45:42,400 --> 00:45:48,400
answer the first one first um

1342
00:45:44,160 --> 00:45:50,560
i am i am aware of

1343
00:45:48,400 --> 00:45:52,480
like i'm aware of groups that are

1344
00:45:50,560 --> 00:45:53,680
working on future apis that are watching

1345
00:45:52,480 --> 00:45:56,960
taps with great interest

1346
00:45:53,680 --> 00:45:58,640
um i can't talk very much about them um

1347
00:45:56,960 --> 00:46:00,319
i am also aware of groups that are

1348
00:45:58,640 --> 00:46:01,920
maintaining existing apis who have

1349
00:46:00,319 --> 00:46:04,800
looked at taps and said

1350
00:46:01,920 --> 00:46:05,680
ah this is not for me um mainly because

1351
00:46:04,800 --> 00:46:07,040
if you have an

1352
00:46:05,680 --> 00:46:08,879
enormous installed base of people who

1353
00:46:07,040 --> 00:46:09,839
are all writing to that api and that api

1354
00:46:08,880 --> 00:46:11,359
shape

1355
00:46:09,839 --> 00:46:14,000
is fundamentally different than taps

1356
00:46:11,359 --> 00:46:18,799
then there is no reason to migrate them

1357
00:46:14,000 --> 00:46:18,800
um the uh

1358
00:46:18,880 --> 00:46:22,319
the second question is

1359
00:46:22,480 --> 00:46:26,640
is about sort of like the you know

1360
00:46:26,839 --> 00:46:31,440
the impedance matching between

1361
00:46:29,599 --> 00:46:33,680
the current concrete apis for something

1362
00:46:31,440 --> 00:46:37,359
like quick and the abstract api in tabs

1363
00:46:33,680 --> 00:46:39,118
and i would say that the first um

1364
00:46:37,359 --> 00:46:41,598
the first aim of this work is making

1365
00:46:39,119 --> 00:46:43,920
sure that you have

1366
00:46:41,599 --> 00:46:46,079
that we move toward the rough shape of

1367
00:46:43,920 --> 00:46:47,760
taps and the rough shape of taps is

1368
00:46:46,079 --> 00:46:49,440
more asynchronous which i think a lot of

1369
00:46:47,760 --> 00:46:50,640
these h2 apis are because you have the

1370
00:46:49,440 --> 00:46:53,920
multi-streaming

1371
00:46:50,640 --> 00:46:55,759
uh and um less imperative

1372
00:46:53,920 --> 00:46:57,119
which a lot of the h2 apis have because

1373
00:46:55,760 --> 00:46:57,920
it's like go connect to this web page

1374
00:46:57,119 --> 00:46:59,839
and go do the

1375
00:46:57,920 --> 00:47:02,880
right like so if we can get to the point

1376
00:46:59,839 --> 00:47:04,960
where the application is less involved

1377
00:47:02,880 --> 00:47:06,079
in the details of the life cycle of the

1378
00:47:04,960 --> 00:47:07,760
connection

1379
00:47:06,079 --> 00:47:09,680
that's a win no matter what that's sort

1380
00:47:07,760 --> 00:47:12,319
of like you know that's taps level zero

1381
00:47:09,680 --> 00:47:14,240
of you know at least moving the shape so

1382
00:47:12,319 --> 00:47:16,319
that you can start to build applications

1383
00:47:14,240 --> 00:47:19,759
that have that interaction model

1384
00:47:16,319 --> 00:47:20,880
um with respect to sort of like h2 and

1385
00:47:19,760 --> 00:47:24,240
h3 over taps

1386
00:47:20,880 --> 00:47:27,839
we have uh a lot of discussion about

1387
00:47:24,240 --> 00:47:29,439
um uh the priority model uh in taps and

1388
00:47:27,839 --> 00:47:30,240
sort of like how priorities later in

1389
00:47:29,440 --> 00:47:32,960
taps

1390
00:47:30,240 --> 00:47:33,759
and we tried a little bit to to to keep

1391
00:47:32,960 --> 00:47:35,520
that up with

1392
00:47:33,760 --> 00:47:36,960
the developments in h3 but then we kind

1393
00:47:35,520 --> 00:47:39,520
of gave up right like so

1394
00:47:36,960 --> 00:47:41,119
the deeper you get into the concrete

1395
00:47:39,520 --> 00:47:42,640
choices we made in taps the farther

1396
00:47:41,119 --> 00:47:46,559
you're going to diverge

1397
00:47:42,640 --> 00:47:52,558
from um uh from like sort of fall parody

1398
00:47:46,559 --> 00:47:54,559
uh i see martin

1399
00:47:52,559 --> 00:47:56,240
uh finish your thought by two things to

1400
00:47:54,559 --> 00:47:57,599
say after you i think that's actually

1401
00:47:56,240 --> 00:47:58,640
the i think that's actually the finished

1402
00:47:57,599 --> 00:48:01,839
thought

1403
00:47:58,640 --> 00:48:02,799
okay great uh so one i just comment on

1404
00:48:01,839 --> 00:48:06,640
this space so the

1405
00:48:02,800 --> 00:48:09,760
the wasm community this is web assembly

1406
00:48:06,640 --> 00:48:10,799
um platform independent platform a

1407
00:48:09,760 --> 00:48:13,839
platform independent

1408
00:48:10,800 --> 00:48:15,839
uh programming language you could say

1409
00:48:13,839 --> 00:48:16,960
uh that's not a good term but anyway so

1410
00:48:15,839 --> 00:48:18,799
the wizard community

1411
00:48:16,960 --> 00:48:20,720
as we speak is flailing around for a

1412
00:48:18,800 --> 00:48:21,359
networking interface that is platform

1413
00:48:20,720 --> 00:48:24,319
independent

1414
00:48:21,359 --> 00:48:24,720
uh for them to use and i have i dabble

1415
00:48:24,319 --> 00:48:26,319
there

1416
00:48:24,720 --> 00:48:27,919
i would not say i understand it very

1417
00:48:26,319 --> 00:48:30,160
well but i've kind of

1418
00:48:27,920 --> 00:48:32,319
said hey taps but i've done a very poor

1419
00:48:30,160 --> 00:48:34,799
job because i'm still attached to newbie

1420
00:48:32,319 --> 00:48:35,839
um if if there are any taps evangelists

1421
00:48:34,800 --> 00:48:38,960
out there

1422
00:48:35,839 --> 00:48:40,319
uh you might be able to kind of shove

1423
00:48:38,960 --> 00:48:41,920
something fairly important in that

1424
00:48:40,319 --> 00:48:43,520
direction

1425
00:48:41,920 --> 00:48:44,720
um the other the other thing i wanted to

1426
00:48:43,520 --> 00:48:45,839
say was that we have about 12 minutes

1427
00:48:44,720 --> 00:48:48,558
remaining in this

1428
00:48:45,839 --> 00:48:50,000
uh meeting i love this tap discussion so

1429
00:48:48,559 --> 00:48:51,680
let's keep it going but if you have any

1430
00:48:50,000 --> 00:48:53,200
open mic type issues with nothing to do

1431
00:48:51,680 --> 00:48:54,640
with taps feel free to enter the queue

1432
00:48:53,200 --> 00:48:59,839
now

1433
00:48:54,640 --> 00:48:59,839
uh john are you done yes

1434
00:49:00,839 --> 00:49:07,040
david

1435
00:49:02,640 --> 00:49:10,240
hi again um david schnazzy so uh

1436
00:49:07,040 --> 00:49:12,720
i maintain uh chronet which is a

1437
00:49:10,240 --> 00:49:13,359
the chrome oaking library packaged as a

1438
00:49:12,720 --> 00:49:15,839
library

1439
00:49:13,359 --> 00:49:17,839
so i'd say it's one of the most widely

1440
00:49:15,839 --> 00:49:20,480
deployed networking libraries

1441
00:49:17,839 --> 00:49:22,078
out there so it's responsible for let's

1442
00:49:20,480 --> 00:49:22,880
say the youtube app google search app

1443
00:49:22,079 --> 00:49:25,359
and stuff like this

1444
00:49:22,880 --> 00:49:26,240
so a good chunk of the internet traffic

1445
00:49:25,359 --> 00:49:28,078
at large

1446
00:49:26,240 --> 00:49:29,439
and we haven't really been like looking

1447
00:49:28,079 --> 00:49:31,520
at taps per se i mean

1448
00:49:29,440 --> 00:49:33,040
just in part because this was like

1449
00:49:31,520 --> 00:49:36,319
library was created

1450
00:49:33,040 --> 00:49:38,558
like before taps um but um

1451
00:49:36,319 --> 00:49:40,160
let's say that hypothetically we've had

1452
00:49:38,559 --> 00:49:43,520
an effort to

1453
00:49:40,160 --> 00:49:47,279
rebuild set api um

1454
00:49:43,520 --> 00:49:49,520
my main question ryan is like

1455
00:49:47,280 --> 00:49:51,680
taps is nice that it kind of unified the

1456
00:49:49,520 --> 00:49:53,520
terminology and so having you know

1457
00:49:51,680 --> 00:49:55,279
worked on network framework at apple and

1458
00:49:53,520 --> 00:49:56,800
now on chronet at google

1459
00:49:55,280 --> 00:49:58,480
it's been interesting to see how like

1460
00:49:56,800 --> 00:50:00,400
there are many different ways of doing

1461
00:49:58,480 --> 00:50:03,119
the same thing and so having kind of

1462
00:50:00,400 --> 00:50:03,839
a bit more consistent naming is useful

1463
00:50:03,119 --> 00:50:07,680
but i'm still

1464
00:50:03,839 --> 00:50:09,520
trying to figure out why

1465
00:50:07,680 --> 00:50:11,359
why should i get more involved in taps

1466
00:50:09,520 --> 00:50:14,000
like what does it

1467
00:50:11,359 --> 00:50:15,759
get me because like you said you know

1468
00:50:14,000 --> 00:50:16,160
the atf doesn't want to be prescriptive

1469
00:50:15,760 --> 00:50:19,680
about

1470
00:50:16,160 --> 00:50:20,879
programming languages but um and i

1471
00:50:19,680 --> 00:50:23,359
totally agree with that

1472
00:50:20,880 --> 00:50:25,599
but when you look at kind of into the

1473
00:50:23,359 --> 00:50:27,839
details of any networking api

1474
00:50:25,599 --> 00:50:29,200
you really get caught into the details

1475
00:50:27,839 --> 00:50:31,759
of your programming language

1476
00:50:29,200 --> 00:50:34,879
your threading model is a huge one that

1477
00:50:31,760 --> 00:50:36,319
i've seen be problems like if you try to

1478
00:50:34,880 --> 00:50:37,760
something i've tried to do several times

1479
00:50:36,319 --> 00:50:39,119
is like interfacing two different

1480
00:50:37,760 --> 00:50:40,640
networking stacks together

1481
00:50:39,119 --> 00:50:42,640
and if they have different models it's

1482
00:50:40,640 --> 00:50:45,920
just a nightmare

1483
00:50:42,640 --> 00:50:46,400
and so like none of these are answered

1484
00:50:45,920 --> 00:50:48,559
here

1485
00:50:46,400 --> 00:50:49,599
so what is the point of having a unified

1486
00:50:48,559 --> 00:50:52,079
concept

1487
00:50:49,599 --> 00:50:53,119
if um and i see tommy coming behind me

1488
00:50:52,079 --> 00:50:54,960
in the queue

1489
00:50:53,119 --> 00:50:56,400
um what is the point of having a unified

1490
00:50:54,960 --> 00:50:58,000
concept if you're never going to be able

1491
00:50:56,400 --> 00:50:59,920
to align all these things

1492
00:50:58,000 --> 00:51:01,200
so okay so tommy and i are going to tag

1493
00:50:59,920 --> 00:51:03,920
team you now um

1494
00:51:01,200 --> 00:51:04,640
so uh i'll point back to my answer so

1495
00:51:03,920 --> 00:51:07,040
first of all

1496
00:51:04,640 --> 00:51:08,240
um i'll point back to my answer to janna

1497
00:51:07,040 --> 00:51:11,119
it's more important

1498
00:51:08,240 --> 00:51:12,240
for me personally that these things have

1499
00:51:11,119 --> 00:51:14,880
uh

1500
00:51:12,240 --> 00:51:16,479
congruent shapes as it put like versus

1501
00:51:14,880 --> 00:51:18,559
congruent shapes right like so

1502
00:51:16,480 --> 00:51:19,760
it's asynchronous uh we're not doing

1503
00:51:18,559 --> 00:51:22,079
this thing where we

1504
00:51:19,760 --> 00:51:24,079
where we like send udp packets directly

1505
00:51:22,079 --> 00:51:27,520
to a dns server because

1506
00:51:24,079 --> 00:51:29,839
we need to know the naming um uh

1507
00:51:27,520 --> 00:51:30,800
it is you know it it is event driven

1508
00:51:29,839 --> 00:51:32,400
according to

1509
00:51:30,800 --> 00:51:33,680
the prescriptions of the threading model

1510
00:51:32,400 --> 00:51:34,960
that you're working with i will say that

1511
00:51:33,680 --> 00:51:37,440
like post sockets

1512
00:51:34,960 --> 00:51:38,880
specifically tried to um define a

1513
00:51:37,440 --> 00:51:40,319
threading model to unify

1514
00:51:38,880 --> 00:51:42,480
all threading models which was a great

1515
00:51:40,319 --> 00:51:43,520
research project that we threw on the

1516
00:51:42,480 --> 00:51:45,440
floor because it was like

1517
00:51:43,520 --> 00:51:47,440
ah right like we can't even get this to

1518
00:51:45,440 --> 00:51:50,480
work in different versions of go

1519
00:51:47,440 --> 00:51:53,839
um so the uh

1520
00:51:50,480 --> 00:51:56,960
the second thing would be like if is

1521
00:51:53,839 --> 00:51:59,440
a little bit of terminology um uh

1522
00:51:56,960 --> 00:52:00,079
unification goes a long way what i would

1523
00:51:59,440 --> 00:52:03,280
like to

1524
00:52:00,079 --> 00:52:06,559
to have like the the the advantage for

1525
00:52:03,280 --> 00:52:10,079
for cronet here uh great name by the way

1526
00:52:06,559 --> 00:52:11,440
uh would be um

1527
00:52:10,079 --> 00:52:12,960
a lot of sort of the mobile app

1528
00:52:11,440 --> 00:52:14,400
development space right now is people

1529
00:52:12,960 --> 00:52:15,200
writing to sort of multi-platform

1530
00:52:14,400 --> 00:52:18,160
frameworks

1531
00:52:15,200 --> 00:52:19,040
and those multi-platform frameworks need

1532
00:52:18,160 --> 00:52:21,759
to

1533
00:52:19,040 --> 00:52:22,960
um support the lowest common denominator

1534
00:52:21,760 --> 00:52:23,680
so they can implement on top of

1535
00:52:22,960 --> 00:52:25,760
everything

1536
00:52:23,680 --> 00:52:27,279
if chronet has an api shape that looks a

1537
00:52:25,760 --> 00:52:28,400
lot like apple's network that framework

1538
00:52:27,280 --> 00:52:31,200
api shape

1539
00:52:28,400 --> 00:52:33,280
then these like sort of like libraries

1540
00:52:31,200 --> 00:52:34,480
can become relatively thin layers and

1541
00:52:33,280 --> 00:52:36,319
you get

1542
00:52:34,480 --> 00:52:38,880
maximum performance on both on both

1543
00:52:36,319 --> 00:52:40,960
platforms right there are

1544
00:52:38,880 --> 00:52:42,400
fewer arguments to make in this in this

1545
00:52:40,960 --> 00:52:42,880
case sort of on the server side of

1546
00:52:42,400 --> 00:52:45,680
things

1547
00:52:42,880 --> 00:52:47,520
um uh because there you actually do want

1548
00:52:45,680 --> 00:52:48,399
to be able to reach further down and we

1549
00:52:47,520 --> 00:52:52,160
have

1550
00:52:48,400 --> 00:52:55,760
um uh

1551
00:52:52,160 --> 00:52:56,960
facilities in in um taps to say you know

1552
00:52:55,760 --> 00:52:58,000
what i actually know what the hell i'm

1553
00:52:56,960 --> 00:52:59,520
doing i want to reach all the way

1554
00:52:58,000 --> 00:53:00,079
through the abstraction and tweak that

1555
00:52:59,520 --> 00:53:02,079
parameter

1556
00:53:00,079 --> 00:53:03,359
right there i think you've identified

1557
00:53:02,079 --> 00:53:06,559
the threading model thing

1558
00:53:03,359 --> 00:53:09,520
is the is the scariest one and the main

1559
00:53:06,559 --> 00:53:11,760
reason not to do this in a platform

1560
00:53:09,520 --> 00:53:14,000
and programming language independent way

1561
00:53:11,760 --> 00:53:15,440
uh like it would be interesting if

1562
00:53:14,000 --> 00:53:17,040
we could if we had the energy to

1563
00:53:15,440 --> 00:53:18,319
evangelize that out in the programming

1564
00:53:17,040 --> 00:53:21,119
language standardization

1565
00:53:18,319 --> 00:53:23,119
committees but i don't think that that's

1566
00:53:21,119 --> 00:53:24,160
gonna return on investment in the next

1567
00:53:23,119 --> 00:53:27,920
decade

1568
00:53:24,160 --> 00:53:29,440
um yeah no no totally agree because like

1569
00:53:27,920 --> 00:53:31,839
what you're saying about having kind of

1570
00:53:29,440 --> 00:53:33,599
this common layer that's on top i've

1571
00:53:31,839 --> 00:53:34,640
seen this kind of like let's say if you

1572
00:53:33,599 --> 00:53:36,559
wanted to build something

1573
00:53:34,640 --> 00:53:37,839
that's you know a fork that can either

1574
00:53:36,559 --> 00:53:39,680
do chronet or

1575
00:53:37,839 --> 00:53:41,200
nerve.framework because for example you

1576
00:53:39,680 --> 00:53:43,440
know cronette works on ios

1577
00:53:41,200 --> 00:53:44,558
the problem is those two have very

1578
00:53:43,440 --> 00:53:46,559
different threading models

1579
00:53:44,559 --> 00:53:48,640
and so then you're stuck with a fork

1580
00:53:46,559 --> 00:53:50,240
that cannot possibly be efficient

1581
00:53:48,640 --> 00:53:51,759
because it's bridging between them

1582
00:53:50,240 --> 00:53:53,359
and i've had the same problem on the

1583
00:53:51,760 --> 00:53:55,040
bottom where

1584
00:53:53,359 --> 00:53:57,440
tommy keeps asking me to implement

1585
00:53:55,040 --> 00:53:59,279
chronet over network.framework

1586
00:53:57,440 --> 00:54:00,720
uh and so the idea would be to have like

1587
00:53:59,280 --> 00:54:03,119
the chrome quick stack

1588
00:54:00,720 --> 00:54:04,879
and the network framework udp stack but

1589
00:54:03,119 --> 00:54:06,880
again that's not possible because of the

1590
00:54:04,880 --> 00:54:08,640
threading model mismatch so

1591
00:54:06,880 --> 00:54:11,119
for me that's really the deal breaker

1592
00:54:08,640 --> 00:54:12,240
yeah david can we take this offline i'd

1593
00:54:11,119 --> 00:54:12,880
like to actually yes that's probably a

1594
00:54:12,240 --> 00:54:14,078
good idea

1595
00:54:12,880 --> 00:54:15,359
i'd like to have an hour in front of a

1596
00:54:14,079 --> 00:54:16,079
virtual whiteboard with you on this

1597
00:54:15,359 --> 00:54:17,279
because i think

1598
00:54:16,079 --> 00:54:18,800
i think that would be super useful for

1599
00:54:17,280 --> 00:54:19,200
both of us that'd be super interesting

1600
00:54:18,800 --> 00:54:20,400
yeah

1601
00:54:19,200 --> 00:54:22,240
i think that's what martin's going to

1602
00:54:20,400 --> 00:54:24,559
tell us like hey google

1603
00:54:22,240 --> 00:54:25,439
talk to yourselves on google time okay

1604
00:54:24,559 --> 00:54:27,200
yeah so so

1605
00:54:25,440 --> 00:54:28,640
uh so tommy may have it respond to that

1606
00:54:27,200 --> 00:54:31,520
but i'll let him do it in his q section

1607
00:54:28,640 --> 00:54:31,520
so spencer go ahead

1608
00:54:31,839 --> 00:54:39,839
open mike if uh if tommy is uh

1609
00:54:35,200 --> 00:54:39,839
following up on that uh please go ahead

1610
00:54:39,920 --> 00:54:43,280
i think we just go ahead spencer

1611
00:54:45,599 --> 00:54:49,200
see okay um i just wanted to mention

1612
00:54:48,799 --> 00:54:52,079
this

1613
00:54:49,200 --> 00:54:53,040
to the to the to the transport community

1614
00:54:52,079 --> 00:54:56,319
at large

1615
00:54:53,040 --> 00:54:58,240
uh we had talked about in whatever the

1616
00:54:56,319 --> 00:55:02,720
last ietf we were in

1617
00:54:58,240 --> 00:55:04,839
uh singapore during tsv area

1618
00:55:02,720 --> 00:55:06,160
ted hardy and a couple people i'm

1619
00:55:04,839 --> 00:55:08,400
thinking

1620
00:55:06,160 --> 00:55:10,640
at least a couple of other people and me

1621
00:55:08,400 --> 00:55:14,000
were talking about

1622
00:55:10,640 --> 00:55:16,160
a quick dispatch function i know i've

1623
00:55:14,000 --> 00:55:19,280
talked to the ads about that

1624
00:55:16,160 --> 00:55:20,640
fairly recently just to see if that

1625
00:55:19,280 --> 00:55:23,280
seemed like a good idea

1626
00:55:20,640 --> 00:55:24,799
i just wanted to let people know uh we

1627
00:55:23,280 --> 00:55:27,200
did talk about that and we thought it

1628
00:55:24,799 --> 00:55:31,359
was a good idea in the past and

1629
00:55:27,200 --> 00:55:34,720
uh as quick gets closer to a significant

1630
00:55:31,359 --> 00:55:35,520
recharter event uh not just the one that

1631
00:55:34,720 --> 00:55:37,680
they've

1632
00:55:35,520 --> 00:55:40,480
just done uh i think that there's gonna

1633
00:55:37,680 --> 00:55:42,720
be more need for that to make sure that

1634
00:55:40,480 --> 00:55:44,799
uh things aren't wandering off to end

1635
00:55:42,720 --> 00:55:47,759
area and stuff like that

1636
00:55:44,799 --> 00:55:48,960
um that you know that basically that

1637
00:55:47,760 --> 00:55:51,680
people can get

1638
00:55:48,960 --> 00:55:52,720
feedback from the community on things

1639
00:55:51,680 --> 00:55:55,040
they're proposing

1640
00:55:52,720 --> 00:55:56,959
in a reasonable way and if that could

1641
00:55:55,040 --> 00:55:58,880
happen without distracting the

1642
00:55:56,960 --> 00:56:02,000
quick working group that would be

1643
00:55:58,880 --> 00:56:04,000
awesome thanks

1644
00:56:02,000 --> 00:56:07,280
thank you spencer i'm closing the queue

1645
00:56:04,000 --> 00:56:07,280
and tommy you have the last word

1646
00:56:11,119 --> 00:56:15,119
all right thank you um i actually had

1647
00:56:13,119 --> 00:56:16,720
been in queue earlier to respond to

1648
00:56:15,119 --> 00:56:17,599
janna and then my wi-fi died and i had

1649
00:56:16,720 --> 00:56:19,200
to

1650
00:56:17,599 --> 00:56:21,280
jump back on weed echo sorry i lost my

1651
00:56:19,200 --> 00:56:23,919
people first

1652
00:56:21,280 --> 00:56:26,079
um john i had kind of asked about other

1653
00:56:23,920 --> 00:56:28,559
efforts um

1654
00:56:26,079 --> 00:56:30,880
one other place that this has at least

1655
00:56:28,559 --> 00:56:34,559
been discussed in that i think is a

1656
00:56:30,880 --> 00:56:37,040
interesting application of taps is um

1657
00:56:34,559 --> 00:56:37,760
in the c plus standard library

1658
00:56:37,040 --> 00:56:40,640
discussions

1659
00:56:37,760 --> 00:56:41,200
um they have they've had some proposals

1660
00:56:40,640 --> 00:56:45,279
to do

1661
00:56:41,200 --> 00:56:47,520
new networking libraries um

1662
00:56:45,280 --> 00:56:48,480
in general like they wanted like what is

1663
00:56:47,520 --> 00:56:51,599
sockets for c

1664
00:56:48,480 --> 00:56:53,280
plus officially that are async um

1665
00:56:51,599 --> 00:56:55,280
and their the original proposal there

1666
00:56:53,280 --> 00:56:59,680
was essentially just do a socket with

1667
00:56:55,280 --> 00:57:01,839
some c plus wrappers on top and um

1668
00:56:59,680 --> 00:57:04,000
there has been a lot of discussion about

1669
00:57:01,839 --> 00:57:04,799
kind of using a more taps like interface

1670
00:57:04,000 --> 00:57:07,119
there and that's

1671
00:57:04,799 --> 00:57:08,559
a case where um kind of having this

1672
00:57:07,119 --> 00:57:10,559
generic interface because it's going to

1673
00:57:08,559 --> 00:57:13,920
definitely be cross-platform

1674
00:57:10,559 --> 00:57:16,640
um and plan to live

1675
00:57:13,920 --> 00:57:19,040
kind of longer than our actual trends

1676
00:57:16,640 --> 00:57:22,319
and transport protocols have lived um

1677
00:57:19,040 --> 00:57:25,119
it makes it valuable to do taps to

1678
00:57:22,319 --> 00:57:26,799
david's point um it's one of the other

1679
00:57:25,119 --> 00:57:30,160
points i want to bring up

1680
00:57:26,799 --> 00:57:33,440
is that we are um through taps

1681
00:57:30,160 --> 00:57:36,000
trying to avoid you know ossification

1682
00:57:33,440 --> 00:57:37,119
of the stack through what the apps are

1683
00:57:36,000 --> 00:57:38,480
doing um

1684
00:57:37,119 --> 00:57:40,319
either because they can't adopt a new

1685
00:57:38,480 --> 00:57:42,720
protocol or

1686
00:57:40,319 --> 00:57:43,839
because they're not able to have um the

1687
00:57:42,720 --> 00:57:45,839
system do

1688
00:57:43,839 --> 00:57:47,680
you know cool new features underneath

1689
00:57:45,839 --> 00:57:50,319
their apis i mean you know this

1690
00:57:47,680 --> 00:57:51,118
such as like proxying over mask and

1691
00:57:50,319 --> 00:57:53,040
actually you know

1692
00:57:51,119 --> 00:57:54,480
you're a mask enthusiast and we're about

1693
00:57:53,040 --> 00:57:56,079
to have the mass meeting

1694
00:57:54,480 --> 00:57:58,000
and it's actually a really interesting

1695
00:57:56,079 --> 00:58:01,119
case because

1696
00:57:58,000 --> 00:58:04,240
um that's a case in which someone is

1697
00:58:01,119 --> 00:58:07,359
writing what they think maybe a tcp api

1698
00:58:04,240 --> 00:58:08,879
contract they're just using a socket but

1699
00:58:07,359 --> 00:58:10,558
in fact

1700
00:58:08,880 --> 00:58:12,880
maybe the system is actually putting

1701
00:58:10,559 --> 00:58:14,319
them over multiple quick streams

1702
00:58:12,880 --> 00:58:16,319
and maybe it's not end to end but it's

1703
00:58:14,319 --> 00:58:19,599
actually going to a proxy instead

1704
00:58:16,319 --> 00:58:20,400
and that's a case where when apps have

1705
00:58:19,599 --> 00:58:21,920
adopted

1706
00:58:20,400 --> 00:58:23,520
something that's like taps like when

1707
00:58:21,920 --> 00:58:25,760
people are using network framework we

1708
00:58:23,520 --> 00:58:28,400
can do stuff like that very very easily

1709
00:58:25,760 --> 00:58:29,200
whereas if people are opening up sockets

1710
00:58:28,400 --> 00:58:30,799
they've

1711
00:58:29,200 --> 00:58:32,960
connected to a specific ip address

1712
00:58:30,799 --> 00:58:35,280
they're expecting specific tcp options

1713
00:58:32,960 --> 00:58:36,880
on the socket

1714
00:58:35,280 --> 00:58:38,880
that breaks or you have to do a lot more

1715
00:58:36,880 --> 00:58:39,760
emulation or mucky stuff to get it to

1716
00:58:38,880 --> 00:58:40,960
work

1717
00:58:39,760 --> 00:58:43,680
if you just want to say hey let's put

1718
00:58:40,960 --> 00:58:46,400
everything over mask so um

1719
00:58:43,680 --> 00:58:47,839
i think that's one of the angles where

1720
00:58:46,400 --> 00:58:49,920
it's not just about like how do we

1721
00:58:47,839 --> 00:58:51,040
enable sctp there are going to be other

1722
00:58:49,920 --> 00:58:53,920
things in which

1723
00:58:51,040 --> 00:59:05,839
we're changing the first hop transports

1724
00:58:53,920 --> 00:59:05,839
because we're doing things like proxy

1725
00:59:05,920 --> 00:59:10,319
okay i believe that concludes this

1726
00:59:07,680 --> 00:59:12,078
meeting um the queue is empty

1727
00:59:10,319 --> 00:59:14,160
so thank you all for joining brian that

1728
00:59:12,079 --> 00:59:16,160
was wonderful i like the discussion and

1729
00:59:14,160 --> 00:59:19,118
i think we may have generated enthusiasm

1730
00:59:16,160 --> 00:59:19,118
which was the point yeah

1731
00:59:19,839 --> 00:59:25,839
um you know pushed me to do it so

1732
00:59:23,760 --> 00:59:27,280
uh it was delightful so we will see you

1733
00:59:25,839 --> 00:59:30,480
all and if you have anything else

1734
00:59:27,280 --> 00:59:32,160
magnus before i i would like to give a

1735
00:59:30,480 --> 00:59:34,000
short response to i think

1736
00:59:32,160 --> 00:59:35,520
it's spencer about quick dispatch i

1737
00:59:34,000 --> 00:59:37,920
think that's something we

1738
00:59:35,520 --> 00:59:39,359
gonna continue to consider how we do

1739
00:59:37,920 --> 00:59:41,760
that uh

1740
00:59:39,359 --> 00:59:42,640
dispatching function etc i mean i think

1741
00:59:41,760 --> 00:59:45,599
part of why

1742
00:59:42,640 --> 00:59:47,680
we haven't done so much or actually got

1743
00:59:45,599 --> 00:59:51,359
it in place was that

1744
00:59:47,680 --> 00:59:52,000
we haven't seen super much activity etc

1745
00:59:51,359 --> 00:59:53,680
but it's

1746
00:59:52,000 --> 00:59:55,920
as you say it might be more relevant

1747
00:59:53,680 --> 00:59:57,359
when we take the next steps and quit

1748
00:59:55,920 --> 00:59:59,760
goes into

1749
00:59:57,359 --> 01:00:02,319
uh maintenance a bit more maintenance

1750
00:59:59,760 --> 01:00:03,119
mode and and considering extensions etc

1751
01:00:02,319 --> 01:00:04,880
and and

1752
01:00:03,119 --> 01:00:06,160
then we will have this aspect and then

1753
01:00:04,880 --> 01:00:08,960
we also see

1754
01:00:06,160 --> 01:00:09,759
maybe some more pickup of saying people

1755
01:00:08,960 --> 01:00:12,240
doing

1756
01:00:09,760 --> 01:00:13,359
mapping specifications that reducing

1757
01:00:12,240 --> 01:00:15,118
quick

1758
01:00:13,359 --> 01:00:16,960
um so it's going to be interesting to

1759
01:00:15,119 --> 01:00:19,119
see but

1760
01:00:16,960 --> 01:00:21,280
i know p i know that you all will do the

1761
01:00:19,119 --> 01:00:24,480
right thing

1762
01:00:21,280 --> 01:00:28,720
well maybe i have pumped this to some

1763
01:00:24,480 --> 01:00:31,440
future lady

1764
01:00:28,720 --> 01:00:32,319
okay we will see you all in not prague

1765
01:00:31,440 --> 01:00:43,839
have a good

1766
01:00:32,319 --> 01:00:43,839
four months

1767
01:00:49,760 --> 01:00:51,839
you

