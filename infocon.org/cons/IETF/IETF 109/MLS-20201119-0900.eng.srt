1
00:00:15,200 --> 00:00:20,640
those slides are good to people

2
00:00:17,279 --> 00:00:20,640
just verifying the share works

3
00:00:27,920 --> 00:00:45,840
hey folks just getting ready to go

4
00:01:28,479 --> 00:01:32,960
the jabber room is not working and i

5
00:01:31,360 --> 00:01:37,680
just sent a chat to

6
00:01:32,960 --> 00:01:37,679
uh here at medeco and nothing showed up

7
00:01:38,479 --> 00:01:43,039
i believe the uh ietf jabra server is

8
00:01:41,280 --> 00:01:47,520
down right now

9
00:01:43,040 --> 00:01:51,200
yeah that might explain it

10
00:01:47,520 --> 00:01:53,600
seems like we should use mls instead no

11
00:01:51,200 --> 00:01:55,200
well mls doesn't create any chat

12
00:01:53,600 --> 00:01:56,719
functionality it just

13
00:01:55,200 --> 00:01:59,280
creates another opportunity for the chat

14
00:01:56,719 --> 00:01:59,280
not to work

15
00:01:59,759 --> 00:02:08,800
more failure points lots of failure

16
00:02:01,759 --> 00:02:12,560
points in mls

17
00:02:08,800 --> 00:02:15,440
no infinite regress john what

18
00:02:12,560 --> 00:02:18,400
still figuring it out yes i really want

19
00:02:15,440 --> 00:02:21,520
to share my screen what do i want to do

20
00:02:18,400 --> 00:02:23,840
the uh mp3 audio stream is not working

21
00:02:21,520 --> 00:02:23,840
either

22
00:02:26,640 --> 00:02:29,839
not sure if that goes over the same

23
00:02:30,000 --> 00:02:33,280
portion of the infrastructure

24
00:02:35,040 --> 00:02:51,840
in the meantime we need a note taker

25
00:03:03,599 --> 00:03:09,280
just looking through the participant

26
00:03:05,040 --> 00:03:09,280
lists jonathan lennox jonathan hoyland

27
00:03:16,840 --> 00:03:19,840
maybe

28
00:03:22,959 --> 00:03:28,720
my alertness at local 4am is not

29
00:03:25,519 --> 00:03:28,720
fabulous but i could

30
00:03:29,280 --> 00:03:33,840
give it a try

31
00:03:40,080 --> 00:03:44,080
is there anything to do if the jumper is

32
00:03:44,840 --> 00:03:48,080
down

33
00:03:46,480 --> 00:03:50,399
well not taking is still i have to do

34
00:03:48,080 --> 00:03:50,400
something

35
00:03:50,720 --> 00:04:01,599
they say they're working on the jabber

36
00:03:52,480 --> 00:04:04,319
and they'll let us know when it's up

37
00:04:01,599 --> 00:04:04,959
yeah the kodi md is still up so in terms

38
00:04:04,319 --> 00:04:08,159
of

39
00:04:04,959 --> 00:04:11,599
recording group decisions

40
00:04:08,159 --> 00:04:15,120
uh and taking notes

41
00:04:11,599 --> 00:04:29,840
uh about conversations the note taker is

42
00:04:15,120 --> 00:04:29,840
still useful

43
00:04:42,160 --> 00:04:46,720
so jonathan lennox if you want to open

44
00:04:45,440 --> 00:04:49,440
it up

45
00:04:46,720 --> 00:04:50,560
and uh record the decisions that would

46
00:04:49,440 --> 00:04:53,120
be

47
00:04:50,560 --> 00:04:53,120
fantastic

48
00:04:54,960 --> 00:04:57,840
yeah i've got it open

49
00:05:24,320 --> 00:05:28,479
okay i think i've pressed enough buttons

50
00:05:26,560 --> 00:05:30,000
to make this work

51
00:05:28,479 --> 00:05:31,199
there's this is this going to go into

52
00:05:30,000 --> 00:05:33,280
the right thing are you guys seeing the

53
00:05:31,199 --> 00:05:37,680
slides

54
00:05:33,280 --> 00:05:40,239
yeah okay yeah

55
00:05:37,680 --> 00:05:42,479
all right i think we're here let's do

56
00:05:40,240 --> 00:05:42,479
this

57
00:05:42,560 --> 00:05:45,919
um welcome to mls meeting um it's

58
00:05:44,720 --> 00:05:46,960
thursday hopefully you guys have seen

59
00:05:45,919 --> 00:05:50,159
all this stuff

60
00:05:46,960 --> 00:05:51,840
um turn your video off

61
00:05:50,160 --> 00:05:53,759
uh meet your microphone unless you're

62
00:05:51,840 --> 00:05:54,960
speaking obviously you made it here at

63
00:05:53,759 --> 00:05:56,800
meat echo

64
00:05:54,960 --> 00:05:58,080
i don't know if the audio is gonna work

65
00:05:56,800 --> 00:05:59,680
uh if it's only but

66
00:05:58,080 --> 00:06:01,359
uh and the jabber i think is down as

67
00:05:59,680 --> 00:06:03,919
well so i think we're just gonna plow

68
00:06:01,360 --> 00:06:06,319
ahead and we'll deal with it later

69
00:06:03,919 --> 00:06:07,599
uh here's the no well obviously we're

70
00:06:06,319 --> 00:06:11,120
recording the session

71
00:06:07,600 --> 00:06:13,800
um jabber is back up sean oh great cool

72
00:06:11,120 --> 00:06:15,280
um there's the address there mls at

73
00:06:13,800 --> 00:06:18,720
jabra.iotf.org

74
00:06:15,280 --> 00:06:20,880
um i believe that the um chat

75
00:06:18,720 --> 00:06:23,360
in meet echo actually we're lazy to

76
00:06:20,880 --> 00:06:24,400
jabber so if anybody is in jabber land

77
00:06:23,360 --> 00:06:26,960
and does

78
00:06:24,400 --> 00:06:29,440
like do a mic colon um please feel free

79
00:06:26,960 --> 00:06:32,479
to jump in and um

80
00:06:29,440 --> 00:06:34,560
uh you know relay that for me

81
00:06:32,479 --> 00:06:36,400
and nick as well um again here's the

82
00:06:34,560 --> 00:06:39,360
notewell uh basically

83
00:06:36,400 --> 00:06:41,280
you know uh put rules and policies to

84
00:06:39,360 --> 00:06:44,800
play along with the itf

85
00:06:41,280 --> 00:06:46,479
um we're recording it be polite you know

86
00:06:44,800 --> 00:06:48,800
uh you know of any apr you're supposed

87
00:06:46,479 --> 00:06:49,919
to disclose it um

88
00:06:48,800 --> 00:06:51,919
again it's thursday so hopefully you've

89
00:06:49,919 --> 00:06:55,758
seen this this is us

90
00:06:51,919 --> 00:06:55,758
i'm sean turner nick is here as well

91
00:06:57,599 --> 00:07:02,560
um our agenda is pretty straightforward

92
00:07:01,520 --> 00:07:03,359
we're going to go through some minus

93
00:07:02,560 --> 00:07:04,400
trivia

94
00:07:03,360 --> 00:07:06,639
we're going to have an architecture

95
00:07:04,400 --> 00:07:08,159
update um and then the rest of the time

96
00:07:06,639 --> 00:07:11,199
we're going to do with the protocol

97
00:07:08,160 --> 00:07:12,800
um richard uh lets me know the chances

98
00:07:11,199 --> 00:07:14,000
of us going to full two hours is

99
00:07:12,800 --> 00:07:15,440
somewhat minimal

100
00:07:14,000 --> 00:07:17,440
so that might be good so everyone can

101
00:07:15,440 --> 00:07:18,639
get back in bed so we're just basically

102
00:07:17,440 --> 00:07:20,719
just gonna jump over

103
00:07:18,639 --> 00:07:22,479
he's got some slides i've uploaded them

104
00:07:20,720 --> 00:07:23,680
um and bedroom and also gave me some

105
00:07:22,479 --> 00:07:26,719
slides in the architecture

106
00:07:23,680 --> 00:07:29,919
so we're gonna go through uh

107
00:07:26,720 --> 00:07:30,639
status actually i should jump back i

108
00:07:29,919 --> 00:07:34,159
fell off

109
00:07:30,639 --> 00:07:34,160
is there a minute taker

110
00:07:38,720 --> 00:07:42,639
yes i'm in the cody md and if anybody

111
00:07:40,639 --> 00:07:44,479
wants to join me

112
00:07:42,639 --> 00:07:47,039
awesomely thank you thank you very much

113
00:07:44,479 --> 00:07:48,318
jonathan um so the status basically the

114
00:07:47,039 --> 00:07:49,680
architecture draft we're going to talk

115
00:07:48,319 --> 00:07:50,639
about that we're basically waiting for a

116
00:07:49,680 --> 00:07:52,400
new version

117
00:07:50,639 --> 00:07:53,759
um the mls protocol draft i guess

118
00:07:52,400 --> 00:07:55,758
technically is no longer in working

119
00:07:53,759 --> 00:07:58,319
group last call it ended yesterday

120
00:07:55,759 --> 00:07:59,360
um and the uh federation draft we had

121
00:07:58,319 --> 00:08:01,120
has expired

122
00:07:59,360 --> 00:08:02,400
but i'm hoping that we'll we'll we'll

123
00:08:01,120 --> 00:08:03,919
get back to that after we get the

124
00:08:02,400 --> 00:08:06,878
protocol document kind of up the

125
00:08:03,919 --> 00:08:08,400
out of the way so for those of you not

126
00:08:06,879 --> 00:08:11,520
everyone in this working group is like

127
00:08:08,400 --> 00:08:13,359
immersed in the iatf uh you know know

128
00:08:11,520 --> 00:08:15,039
about the process and what's going on

129
00:08:13,360 --> 00:08:17,280
but i wanted to kind of outline the

130
00:08:15,039 --> 00:08:19,039
timeline for what's going on now

131
00:08:17,280 --> 00:08:20,318
um we just completed working group last

132
00:08:19,039 --> 00:08:21,919
call since that little bubble there

133
00:08:20,319 --> 00:08:23,840
about uh we are here

134
00:08:21,919 --> 00:08:25,919
um the plan is is that we are going to

135
00:08:23,840 --> 00:08:28,080
publish a draft 11

136
00:08:25,919 --> 00:08:29,280
which addresses all known comments and

137
00:08:28,080 --> 00:08:30,318
then we're going to have a feature

138
00:08:29,280 --> 00:08:31,758
freeze where we're going to let the

139
00:08:30,319 --> 00:08:33,919
security researchers

140
00:08:31,759 --> 00:08:35,760
kind of beat on things for a little bit

141
00:08:33,919 --> 00:08:37,120
we haven't quite decided how long that's

142
00:08:35,760 --> 00:08:39,120
going to be but i think it's going to be

143
00:08:37,120 --> 00:08:41,039
long enough that we can get multiple

144
00:08:39,120 --> 00:08:42,240
multiple sets of researchers to actually

145
00:08:41,039 --> 00:08:43,760
provide us some input

146
00:08:42,240 --> 00:08:45,440
so they can get a kind of a warm and

147
00:08:43,760 --> 00:08:47,680
fuzzy that um

148
00:08:45,440 --> 00:08:51,600
we are offering the properties that we

149
00:08:47,680 --> 00:08:51,599
say we are given the right choices

150
00:08:52,160 --> 00:08:55,199
i suspect they will find something so

151
00:08:53,920 --> 00:08:55,680
there will be another draft though

152
00:08:55,200 --> 00:08:58,480
there's

153
00:08:55,680 --> 00:09:00,000
a draft 12 of the question mark um i'm

154
00:08:58,480 --> 00:09:02,480
betting that we'll find something

155
00:09:00,000 --> 00:09:03,920
um then we'll make some tweaks um if we

156
00:09:02,480 --> 00:09:05,120
make tweaks that are substantial enough

157
00:09:03,920 --> 00:09:06,839
we need to run another working group

158
00:09:05,120 --> 00:09:09,760
last call

159
00:09:06,839 --> 00:09:10,399
um uh and then after that there's

160
00:09:09,760 --> 00:09:11,760
probably some

161
00:09:10,399 --> 00:09:13,040
i'm sure there's some editorial thing

162
00:09:11,760 --> 00:09:14,080
that'll pop out so we'll have a draft

163
00:09:13,040 --> 00:09:16,399
13.

164
00:09:14,080 --> 00:09:18,320
um now the nice thing about where we get

165
00:09:16,399 --> 00:09:19,920
to it if we get to a draft 13

166
00:09:18,320 --> 00:09:21,600
if we've had this analysis it makes

167
00:09:19,920 --> 00:09:22,800
things a lot easier for the ad and later

168
00:09:21,600 --> 00:09:23,600
for us when we have to deal with

169
00:09:22,800 --> 00:09:25,439
comments

170
00:09:23,600 --> 00:09:26,640
because the the document will be

171
00:09:25,440 --> 00:09:27,920
reviewed by

172
00:09:26,640 --> 00:09:29,760
more than just the people in the working

173
00:09:27,920 --> 00:09:30,479
group it's actually going to be other

174
00:09:29,760 --> 00:09:32,080
people

175
00:09:30,480 --> 00:09:34,240
security researchers will make sure it's

176
00:09:32,080 --> 00:09:35,440
clear that the the document's doing what

177
00:09:34,240 --> 00:09:37,519
it says it's going to do

178
00:09:35,440 --> 00:09:38,800
but our a.d ben is going to do a review

179
00:09:37,519 --> 00:09:39,760
and then whatever he tells us to make

180
00:09:38,800 --> 00:09:41,760
changes to

181
00:09:39,760 --> 00:09:43,680
we will discuss with him we'll make some

182
00:09:41,760 --> 00:09:45,120
changes and we'll have a draft 14

183
00:09:43,680 --> 00:09:47,040
and then after that it goes into what's

184
00:09:45,120 --> 00:09:48,000
called the ietf last call it'll be two

185
00:09:47,040 --> 00:09:51,120
weeks

186
00:09:48,000 --> 00:09:52,959
um and then you know

187
00:09:51,120 --> 00:09:54,640
i suspect there will probably be some

188
00:09:52,959 --> 00:09:57,199
other uh

189
00:09:54,640 --> 00:09:58,560
procedural things that we maybe miss you

190
00:09:57,200 --> 00:10:00,160
never know maybe we'll get lucky and we

191
00:09:58,560 --> 00:10:02,000
don't need a draft 15 but a lot of times

192
00:10:00,160 --> 00:10:04,160
this is where you get cross area review

193
00:10:02,000 --> 00:10:05,600
so there's directors that will kick off

194
00:10:04,160 --> 00:10:06,959
like jen aren't they'll tell us we did

195
00:10:05,600 --> 00:10:07,519
our iana considerations wrong or

196
00:10:06,959 --> 00:10:10,000
something and

197
00:10:07,519 --> 00:10:11,519
we'll fix it um and then after that it

198
00:10:10,000 --> 00:10:14,720
goes to

199
00:10:11,519 --> 00:10:16,800
um isg review

200
00:10:14,720 --> 00:10:18,240
all of the area directors from the itf

201
00:10:16,800 --> 00:10:20,319
will take a review

202
00:10:18,240 --> 00:10:22,000
they will uh find even more things and

203
00:10:20,320 --> 00:10:22,959
we'll probably do another draft 16 to

204
00:10:22,000 --> 00:10:25,200
try to get

205
00:10:22,959 --> 00:10:26,880
get through them um once we're there

206
00:10:25,200 --> 00:10:28,720
basically it gets approved

207
00:10:26,880 --> 00:10:30,959
and gets dumped into the rfc editor

208
00:10:28,720 --> 00:10:32,000
queue then there's a process at the very

209
00:10:30,959 --> 00:10:34,719
end of that called off

210
00:10:32,000 --> 00:10:36,000
48 which is where basically it's copy

211
00:10:34,720 --> 00:10:37,200
editing but sometimes they find other

212
00:10:36,000 --> 00:10:39,440
things so there will be there will be

213
00:10:37,200 --> 00:10:41,279
other changes that come out of the draft

214
00:10:39,440 --> 00:10:42,880
um come out of the process sorry they

215
00:10:41,279 --> 00:10:44,480
end up resulting in a draft and at the

216
00:10:42,880 --> 00:10:48,560
end we're gonna have an rc

217
00:10:44,480 --> 00:10:51,200
um the process after we get from area

218
00:10:48,560 --> 00:10:54,079
director review to an rfc

219
00:10:51,200 --> 00:10:55,120
um it's probably three months so i think

220
00:10:54,079 --> 00:10:58,079
we're looking at

221
00:10:55,120 --> 00:10:58,480
you know six to nine months away before

222
00:10:58,079 --> 00:11:00,640
we could

223
00:10:58,480 --> 00:11:03,120
we could realistically get an rfc number

224
00:11:00,640 --> 00:11:06,160
out and be done

225
00:11:03,120 --> 00:11:06,160
are there any questions on that

226
00:11:09,200 --> 00:11:13,760
hey uh this has been paid up to 80 i

227
00:11:11,519 --> 00:11:15,839
think the three months from 80 to review

228
00:11:13,760 --> 00:11:16,959
from 80 review to rfc might be a little

229
00:11:15,839 --> 00:11:19,600
optimistic the

230
00:11:16,959 --> 00:11:21,040
rfp production center is like still

231
00:11:19,600 --> 00:11:23,680
dealing with this giant

232
00:11:21,040 --> 00:11:25,439
cluster of webrtc stuff no it's still

233
00:11:23,680 --> 00:11:27,920
doing 238

234
00:11:25,440 --> 00:11:29,360
yeah i mean most of it is in off 48 but

235
00:11:27,920 --> 00:11:32,560
there's

236
00:11:29,360 --> 00:11:32,959
there's still some uh knockoff effects

237
00:11:32,560 --> 00:11:35,359
basic

238
00:11:32,959 --> 00:11:36,640
knock-on effects basically all right

239
00:11:35,360 --> 00:11:38,160
well fair enough i mean i think it's

240
00:11:36,640 --> 00:11:39,680
it's good because basically it still

241
00:11:38,160 --> 00:11:40,240
gives people additional time to review

242
00:11:39,680 --> 00:11:41,839
things

243
00:11:40,240 --> 00:11:43,680
and i mean i think the nice thing is

244
00:11:41,839 --> 00:11:44,720
that we're we're basically following the

245
00:11:43,680 --> 00:11:47,359
tls

246
00:11:44,720 --> 00:11:47,839
um kind of pattern and i think it's good

247
00:11:47,360 --> 00:11:49,680
because

248
00:11:47,839 --> 00:11:51,839
when we get after the feature freeze and

249
00:11:49,680 --> 00:11:54,560
analysis and we actually get review

250
00:11:51,839 --> 00:11:55,920
chances are we'll we'll we'll find most

251
00:11:54,560 --> 00:11:56,800
of the big things there's a chance that

252
00:11:55,920 --> 00:11:58,319
we can find

253
00:11:56,800 --> 00:12:00,560
other things that are worthwhile to

254
00:11:58,320 --> 00:12:01,920
change later but at that point the bar

255
00:12:00,560 --> 00:12:02,959
is pretty high and then other people

256
00:12:01,920 --> 00:12:04,719
that we have to convince that we're

257
00:12:02,959 --> 00:12:07,199
changing and not breaking everything

258
00:12:04,720 --> 00:12:09,760
is also higher um so i think it's it's

259
00:12:07,200 --> 00:12:12,079
basically good

260
00:12:09,760 --> 00:12:14,800
and all right that's it so now i guess

261
00:12:12,079 --> 00:12:17,599
i'm going to hand over

262
00:12:14,800 --> 00:12:17,599
to richard

263
00:12:19,360 --> 00:12:24,399
oh sorry to benjamin so where did

264
00:12:23,040 --> 00:12:27,040
thought i thought we were doing

265
00:12:24,399 --> 00:12:28,880
architecture first

266
00:12:27,040 --> 00:12:30,959
yeah or maybe whatever you play

267
00:12:28,880 --> 00:12:32,399
fractured it's fine

268
00:12:30,959 --> 00:12:33,920
now go ahead benjamin because the the

269
00:12:32,399 --> 00:12:34,720
protocol stuff i think can expand to

270
00:12:33,920 --> 00:12:39,279
fill time

271
00:12:34,720 --> 00:12:42,800
sure okay let me try to

272
00:12:39,279 --> 00:12:42,800
screen can you see that

273
00:12:44,000 --> 00:12:48,240
can you see my screen right now not

274
00:12:46,800 --> 00:12:51,359
quite yet i think uh

275
00:12:48,240 --> 00:12:54,399
the chairs have to allow you

276
00:12:51,360 --> 00:12:58,000
oh yes i think i'm doing that

277
00:12:54,399 --> 00:13:06,079
it's good i did upload these slides as

278
00:12:58,000 --> 00:13:09,600
well yep

279
00:13:06,079 --> 00:13:11,599
it's a stupid ios thing

280
00:13:09,600 --> 00:13:13,519
where you you have to actually like you

281
00:13:11,600 --> 00:13:20,160
know log in and stuff like this so sorry

282
00:13:13,519 --> 00:13:22,880
about that

283
00:13:20,160 --> 00:13:24,160
do you have actually my slide showing

284
00:13:22,880 --> 00:13:35,839
maybe it's easier there is only one

285
00:13:24,160 --> 00:13:35,839
slide anyway

286
00:14:14,000 --> 00:14:17,839
i contact you

287
00:14:33,519 --> 00:14:36,320
can you hear me now

288
00:14:36,800 --> 00:14:40,959
yeah i still can't hear you uh we can

289
00:14:39,680 --> 00:14:44,800
hear you

290
00:14:40,959 --> 00:14:47,359
okay okay i can hear you know sorry um

291
00:14:44,800 --> 00:14:48,240
technical things yeah so okay let me

292
00:14:47,360 --> 00:14:52,560
jump in now

293
00:14:48,240 --> 00:14:54,320
thank you uh so the the idea was that

294
00:14:52,560 --> 00:14:55,518
a few months back we sent an email to

295
00:14:54,320 --> 00:14:56,800
the main english saying that we are

296
00:14:55,519 --> 00:14:59,600
gonna

297
00:14:56,800 --> 00:15:00,800
do an editorial pass collectively on the

298
00:14:59,600 --> 00:15:03,360
architecture documents

299
00:15:00,800 --> 00:15:03,920
and uh the timeline shifted obviously

300
00:15:03,360 --> 00:15:06,800
because of

301
00:15:03,920 --> 00:15:08,479
multiple things covered and the delay in

302
00:15:06,800 --> 00:15:10,240
the protocol document as well

303
00:15:08,480 --> 00:15:12,079
the idea was like basically we could

304
00:15:10,240 --> 00:15:14,079
sort of go back to the architecture

305
00:15:12,079 --> 00:15:16,560
documents once the the protocol document

306
00:15:14,079 --> 00:15:16,560
was stable

307
00:15:16,720 --> 00:15:20,720
but i think we are pretty in pretty good

308
00:15:19,519 --> 00:15:23,279
shape to actually

309
00:15:20,720 --> 00:15:25,360
look at it now so the chairs ask the

310
00:15:23,279 --> 00:15:27,439
editors to actually take a pass on the

311
00:15:25,360 --> 00:15:30,880
architecture

312
00:15:27,440 --> 00:15:32,560
document which will which i'm doing

313
00:15:30,880 --> 00:15:35,920
right now

314
00:15:32,560 --> 00:15:38,160
and ask for the other editors to review

315
00:15:35,920 --> 00:15:40,000
the idea is that basically i want to

316
00:15:38,160 --> 00:15:41,519
have something stable by december 7th so

317
00:15:40,000 --> 00:15:45,759
that people can sort of

318
00:15:41,519 --> 00:15:48,320
input from that point so um

319
00:15:45,759 --> 00:15:49,839
i don't think there are many many uh

320
00:15:48,320 --> 00:15:52,720
actual things to discuss

321
00:15:49,839 --> 00:15:54,160
we are gonna pretty aggressively as sean

322
00:15:52,720 --> 00:15:56,480
mentioned in in the

323
00:15:54,160 --> 00:15:57,439
mailing list we are pretty aggressively

324
00:15:56,480 --> 00:16:00,240
gonna close

325
00:15:57,440 --> 00:16:01,120
issues and uh try to solve them of

326
00:16:00,240 --> 00:16:04,480
course

327
00:16:01,120 --> 00:16:07,440
but uh like

328
00:16:04,480 --> 00:16:09,040
allow people uh and encourage people to

329
00:16:07,440 --> 00:16:11,040
to do a pass on the architectural

330
00:16:09,040 --> 00:16:14,399
document after december 7.

331
00:16:11,040 --> 00:16:16,639
so the idea is basically we expect uh

332
00:16:14,399 --> 00:16:18,160
i mean i expect depending on what the

333
00:16:16,639 --> 00:16:20,880
chairs think is good idea but i

334
00:16:18,160 --> 00:16:23,279
i would expect that between beginning of

335
00:16:20,880 --> 00:16:24,000
december and under january we have

336
00:16:23,279 --> 00:16:26,639
something

337
00:16:24,000 --> 00:16:27,440
like uh everybody feeling issues and

338
00:16:26,639 --> 00:16:31,120
reviewing

339
00:16:27,440 --> 00:16:33,120
uh producing pr's for the documents

340
00:16:31,120 --> 00:16:34,880
and that we can recurse on that multiple

341
00:16:33,120 --> 00:16:35,120
times until we we have something that's

342
00:16:34,880 --> 00:16:36,880
uh

343
00:16:35,120 --> 00:16:38,399
that's good but i expect that the

344
00:16:36,880 --> 00:16:39,519
changes to the architecture document are

345
00:16:38,399 --> 00:16:43,920
pretty limited

346
00:16:39,519 --> 00:16:45,920
it's more uh typically um

347
00:16:43,920 --> 00:16:47,519
what we're interested in here is the the

348
00:16:45,920 --> 00:16:48,719
fact that we are missing some things

349
00:16:47,519 --> 00:16:50,959
like with

350
00:16:48,720 --> 00:16:52,320
the dms protocol is quite big right it's

351
00:16:50,959 --> 00:16:55,518
complicated so we

352
00:16:52,320 --> 00:16:56,720
we definitely miss important information

353
00:16:55,519 --> 00:16:59,519
or insights

354
00:16:56,720 --> 00:16:59,519
on the protocol

355
00:16:59,920 --> 00:17:03,360
and especially in the arctic

356
00:17:01,440 --> 00:17:06,480
architecture document sorry

357
00:17:03,360 --> 00:17:08,480
and we want to describe very clearly uh

358
00:17:06,480 --> 00:17:10,079
the security the security guarantees

359
00:17:08,480 --> 00:17:12,160
that we expect

360
00:17:10,079 --> 00:17:13,438
uh with much more precision than we have

361
00:17:12,160 --> 00:17:15,039
right now so right now we have something

362
00:17:13,439 --> 00:17:16,720
very generic which is like oh yeah by

363
00:17:15,039 --> 00:17:19,280
the way this protocol

364
00:17:16,720 --> 00:17:20,240
wishes to provide uh forward secrecy

365
00:17:19,280 --> 00:17:22,480
across epochs

366
00:17:20,240 --> 00:17:24,319
forward secrecy for application messages

367
00:17:22,480 --> 00:17:25,039
uh post compromise security across

368
00:17:24,319 --> 00:17:27,678
epochs

369
00:17:25,039 --> 00:17:29,440
uh things like this but it actually

370
00:17:27,679 --> 00:17:32,320
depends on many things right it actually

371
00:17:29,440 --> 00:17:34,320
depends on people updating regularly

372
00:17:32,320 --> 00:17:36,159
on people sharing or not sharing their

373
00:17:34,320 --> 00:17:38,159
identity keys things like this are

374
00:17:36,160 --> 00:17:40,400
actually left to the application

375
00:17:38,160 --> 00:17:41,360
for the protocol document so the

376
00:17:40,400 --> 00:17:43,840
architecture

377
00:17:41,360 --> 00:17:45,678
at least should mention what are the

378
00:17:43,840 --> 00:17:47,600
pros and cons of

379
00:17:45,679 --> 00:17:49,919
doing such things like using signature

380
00:17:47,600 --> 00:17:52,320
keys not using them

381
00:17:49,919 --> 00:17:53,919
updating frequently or not updating

382
00:17:52,320 --> 00:17:57,039
frequently

383
00:17:53,919 --> 00:18:01,200
the idea still is that we

384
00:17:57,039 --> 00:18:03,919
want this document not to have normative

385
00:18:01,200 --> 00:18:06,000
language as much as possible so i

386
00:18:03,919 --> 00:18:08,640
suspect we will be able to do it

387
00:18:06,000 --> 00:18:09,280
like only based on recommendations

388
00:18:08,640 --> 00:18:11,760
because

389
00:18:09,280 --> 00:18:15,039
uh the protocol the core protocol

390
00:18:11,760 --> 00:18:18,160
document contains every requirement

391
00:18:15,039 --> 00:18:20,320
that's needed for for to provide the

392
00:18:18,160 --> 00:18:25,280
security guarantees that we

393
00:18:20,320 --> 00:18:27,360
would like to have but uh you know like

394
00:18:25,280 --> 00:18:28,480
people have looked at it we have done

395
00:18:27,360 --> 00:18:30,879
security analysis

396
00:18:28,480 --> 00:18:32,880
of the protocol and we know that

397
00:18:30,880 --> 00:18:34,240
depending on what you do exactly there

398
00:18:32,880 --> 00:18:35,840
are some slight differences in terms of

399
00:18:34,240 --> 00:18:36,320
security guarantees so we want to

400
00:18:35,840 --> 00:18:37,678
actually

401
00:18:36,320 --> 00:18:39,039
make make those guarantees and

402
00:18:37,679 --> 00:18:40,160
expectations very precise in the

403
00:18:39,039 --> 00:18:41,919
architectural documents

404
00:18:40,160 --> 00:18:42,960
without without mandating anything in

405
00:18:41,919 --> 00:18:44,480
some sense it's going to be an

406
00:18:42,960 --> 00:18:48,960
information of

407
00:18:44,480 --> 00:18:48,960
what's the what the protocol should give

408
00:18:50,080 --> 00:18:53,918
and there is missing discussion on

409
00:18:52,720 --> 00:18:56,880
application

410
00:18:53,919 --> 00:18:58,559
metadata and server assist so server

411
00:18:56,880 --> 00:19:01,280
assist i believe we've discussed

412
00:18:58,559 --> 00:19:01,280
previously

413
00:19:01,840 --> 00:19:06,000
a potential document that rafael and i

414
00:19:05,360 --> 00:19:09,360
would write

415
00:19:06,000 --> 00:19:10,160
on server assist because for those dude

416
00:19:09,360 --> 00:19:13,039
that were at

417
00:19:10,160 --> 00:19:13,679
new york for the interim engineering uh

418
00:19:13,039 --> 00:19:16,799
we

419
00:19:13,679 --> 00:19:19,760
i a few colleagues of mine rafael and i

420
00:19:16,799 --> 00:19:20,960
also looked at um the general

421
00:19:19,760 --> 00:19:22,480
architecture of a

422
00:19:20,960 --> 00:19:25,360
messaging infrastructure like this and

423
00:19:22,480 --> 00:19:26,160
we could notice that there are many many

424
00:19:25,360 --> 00:19:28,559
different

425
00:19:26,160 --> 00:19:30,080
aspects in terms of privacy that that

426
00:19:28,559 --> 00:19:31,520
are affected by the actual

427
00:19:30,080 --> 00:19:34,799
infrastructure

428
00:19:31,520 --> 00:19:36,879
um so

429
00:19:34,799 --> 00:19:38,400
we don't want like this document will

430
00:19:36,880 --> 00:19:40,960
not be able to moderate anything

431
00:19:38,400 --> 00:19:41,679
right in terms of infrastructure but

432
00:19:40,960 --> 00:19:43,919
it's

433
00:19:41,679 --> 00:19:46,559
it will be it will be able to provide

434
00:19:43,919 --> 00:19:48,799
guidance the services documents on

435
00:19:46,559 --> 00:19:51,039
maybe this solution is one possible

436
00:19:48,799 --> 00:19:52,720
solution to actually provide some

437
00:19:51,039 --> 00:19:54,240
reasonable privacy guarantees in your

438
00:19:52,720 --> 00:19:57,679
infrastructure

439
00:19:54,240 --> 00:19:59,760
and i believe that we should do that

440
00:19:57,679 --> 00:20:01,440
after the architecture document is done

441
00:19:59,760 --> 00:20:04,640
so that

442
00:20:01,440 --> 00:20:06,559
i mean at least it's stable so that

443
00:20:04,640 --> 00:20:08,000
we can focus on federation and serve

444
00:20:06,559 --> 00:20:11,120
their assists after

445
00:20:08,000 --> 00:20:13,360
uh like in q1

446
00:20:11,120 --> 00:20:14,719
q probably in q1 and of q1 something

447
00:20:13,360 --> 00:20:17,520
like this

448
00:20:14,720 --> 00:20:18,640
um so yeah that's it for me i think i

449
00:20:17,520 --> 00:20:22,240
think

450
00:20:18,640 --> 00:20:23,679
after december 7 and end of january

451
00:20:22,240 --> 00:20:24,159
sounds good i don't know what you think

452
00:20:23,679 --> 00:20:27,520
uh

453
00:20:24,159 --> 00:20:28,799
sean and and uh nick but um

454
00:20:27,520 --> 00:20:30,559
[Music]

455
00:20:28,799 --> 00:20:32,480
it feels like pretty reasonable so that

456
00:20:30,559 --> 00:20:34,960
people don't have to work in the

457
00:20:32,480 --> 00:20:36,320
like at christmas and use new year's eve

458
00:20:34,960 --> 00:20:37,200
things like this we can have the full

459
00:20:36,320 --> 00:20:38,879
january months

460
00:20:37,200 --> 00:20:40,559
there is no urgency for that document

461
00:20:38,880 --> 00:20:45,200
anyway but i think it's

462
00:20:40,559 --> 00:20:45,200
completely fair to get back to it right

463
00:20:46,840 --> 00:20:49,840
now

464
00:20:50,320 --> 00:20:54,960
so yeah expect uh i guess expect an

465
00:20:52,320 --> 00:20:54,960
email from us

466
00:20:55,200 --> 00:21:00,000
around january 7th something like this

467
00:21:01,120 --> 00:21:04,158
i think that works um yeah i mean if you

468
00:21:03,679 --> 00:21:06,240
drop it

469
00:21:04,159 --> 00:21:07,280
like mid december no one's gonna look at

470
00:21:06,240 --> 00:21:10,080
this until the beginning of the

471
00:21:07,280 --> 00:21:10,639
of the new year so i think i think take

472
00:21:10,080 --> 00:21:12,240
your time

473
00:21:10,640 --> 00:21:14,080
and uh you know get it as close as

474
00:21:12,240 --> 00:21:15,600
possible and then we'll let the

475
00:21:14,080 --> 00:21:18,158
death by a thousand paper cuts happen

476
00:21:15,600 --> 00:21:18,158
via github

477
00:21:18,720 --> 00:21:22,960
it is what it is the only thing i would

478
00:21:20,480 --> 00:21:26,000
add to your summary is that uh

479
00:21:22,960 --> 00:21:29,280
in terms of getting to getting through

480
00:21:26,000 --> 00:21:30,000
the process the only way that like the

481
00:21:29,280 --> 00:21:32,158
follow-on process

482
00:21:30,000 --> 00:21:34,000
like to get through the isg is going to

483
00:21:32,159 --> 00:21:35,200
be able is going to happen when we

484
00:21:34,000 --> 00:21:37,039
actually get

485
00:21:35,200 --> 00:21:38,480
the architecture and protocol document

486
00:21:37,039 --> 00:21:40,320
together and get them moving forward so

487
00:21:38,480 --> 00:21:42,880
they'll probably go forward as a package

488
00:21:40,320 --> 00:21:44,320
so i think it kind of it makes sense so

489
00:21:42,880 --> 00:21:48,480
all right thank you very much

490
00:21:44,320 --> 00:21:48,480
i thank you i'm just

491
00:21:49,360 --> 00:21:54,080
i believe i have granted richard the

492
00:21:52,240 --> 00:21:55,840
screen

493
00:21:54,080 --> 00:21:57,120
interesting i do not see that permission

494
00:21:55,840 --> 00:22:00,240
myself

495
00:21:57,120 --> 00:22:02,320
let me stop sharing my screen let's see

496
00:22:00,240 --> 00:22:05,360
if i can now grant you there we go there

497
00:22:02,320 --> 00:22:05,360
we go there we go

498
00:22:07,360 --> 00:22:13,918
all right is that visible

499
00:22:10,880 --> 00:22:16,240
it's all of its bright pinkness i

500
00:22:13,919 --> 00:22:18,080
figured i'd use a little bit of a

501
00:22:16,240 --> 00:22:21,120
you know visual energy to keep people

502
00:22:18,080 --> 00:22:23,360
awake uh across time zones

503
00:22:21,120 --> 00:22:24,959
so this is going to be an update on the

504
00:22:23,360 --> 00:22:26,399
latest stuff on the protocol it's going

505
00:22:24,960 --> 00:22:29,360
to be blend of me

506
00:22:26,400 --> 00:22:31,679
and uh raphael and joelle all of whom

507
00:22:29,360 --> 00:22:34,320
from looking at different aspects here

508
00:22:31,679 --> 00:22:35,679
um we're going to go through kind of

509
00:22:34,320 --> 00:22:37,039
what we've gotten done recently for

510
00:22:35,679 --> 00:22:39,200
folks who might not have been

511
00:22:37,039 --> 00:22:41,679
tracking along in detail we got a couple

512
00:22:39,200 --> 00:22:44,640
of kind of major issues that joelle

513
00:22:41,679 --> 00:22:46,159
and rafael are going to present um

514
00:22:44,640 --> 00:22:48,159
fortunately though they're

515
00:22:46,159 --> 00:22:49,360
significant and have some security

516
00:22:48,159 --> 00:22:50,320
implications we have

517
00:22:49,360 --> 00:22:51,678
solutions that are pretty

518
00:22:50,320 --> 00:22:53,520
straightforward so hopefully we can get

519
00:22:51,679 --> 00:22:55,840
those agreed here

520
00:22:53,520 --> 00:22:57,200
then if we have time there's a couple of

521
00:22:55,840 --> 00:22:57,760
other minor stuff we might pull up on

522
00:22:57,200 --> 00:23:00,640
github

523
00:22:57,760 --> 00:23:02,080
i'll probably let sean drive that part

524
00:23:00,640 --> 00:23:06,480
so just diving into

525
00:23:02,080 --> 00:23:06,480
the highlights of recent stuff

526
00:23:06,960 --> 00:23:10,400
one major change here um is we've kind

527
00:23:09,200 --> 00:23:12,000
of improved

528
00:23:10,400 --> 00:23:13,520
how we do authentication on mls

529
00:23:12,000 --> 00:23:15,919
plaintext this is a symmetric

530
00:23:13,520 --> 00:23:16,639
authentication of membership in the

531
00:23:15,919 --> 00:23:19,679
group

532
00:23:16,640 --> 00:23:20,400
uh and a confirmation that it commits uh

533
00:23:19,679 --> 00:23:22,720
produced

534
00:23:20,400 --> 00:23:24,159
the right output so the confirmation

535
00:23:22,720 --> 00:23:26,559
that the recipient of a commit got the

536
00:23:24,159 --> 00:23:28,159
same output at that sender did

537
00:23:26,559 --> 00:23:29,520
um we had had this confirmation tag

538
00:23:28,159 --> 00:23:30,320
hanging around for a while we called it

539
00:23:29,520 --> 00:23:31,679
a tag now

540
00:23:30,320 --> 00:23:33,840
moved it to the end so that it covers

541
00:23:31,679 --> 00:23:36,080
the signature as well

542
00:23:33,840 --> 00:23:37,600
this is due to some work i think that uh

543
00:23:36,080 --> 00:23:40,720
joelle did with uh

544
00:23:37,600 --> 00:23:43,678
athena yost and martin lunarchik

545
00:23:40,720 --> 00:23:45,039
um finding some some issues with not

546
00:23:43,679 --> 00:23:46,799
covering that signature with the

547
00:23:45,039 --> 00:23:48,480
confirmation tag

548
00:23:46,799 --> 00:23:49,918
so that simplifies the structure a

549
00:23:48,480 --> 00:23:50,880
little bit simplifies that little select

550
00:23:49,919 --> 00:23:52,240
statement and

551
00:23:50,880 --> 00:23:54,000
gets some better security moving the

552
00:23:52,240 --> 00:23:55,919
confirmation tag down

553
00:23:54,000 --> 00:23:57,039
that same group also noticed some issues

554
00:23:55,919 --> 00:23:59,360
that um

555
00:23:57,039 --> 00:24:00,960
if you get an mls plain text uh you know

556
00:23:59,360 --> 00:24:02,080
you get a signature on it on the left

557
00:24:00,960 --> 00:24:03,840
hand side

558
00:24:02,080 --> 00:24:05,279
but you don't get any authentication the

559
00:24:03,840 --> 00:24:10,080
signer is actually in the group

560
00:24:05,279 --> 00:24:11,840
until you um uh

561
00:24:10,080 --> 00:24:13,520
accepts to the degree that you you look

562
00:24:11,840 --> 00:24:16,320
at the verification key

563
00:24:13,520 --> 00:24:18,639
in your group tree so immediately you

564
00:24:16,320 --> 00:24:21,760
don't get any

565
00:24:18,640 --> 00:24:23,279
authentication that the sender knows the

566
00:24:21,760 --> 00:24:25,279
group secret so if someone you know

567
00:24:23,279 --> 00:24:27,600
compromised the signing key but not

568
00:24:25,279 --> 00:24:30,159
the group secrets then they could send

569
00:24:27,600 --> 00:24:32,240
these mls plaintexts into the group

570
00:24:30,159 --> 00:24:33,520
so this membership tag is just a mac

571
00:24:32,240 --> 00:24:36,640
over everything

572
00:24:33,520 --> 00:24:38,400
uh proceeding that uh

573
00:24:36,640 --> 00:24:40,159
authenticates that's the center of the

574
00:24:38,400 --> 00:24:41,679
most plain text is a member of the group

575
00:24:40,159 --> 00:24:42,720
so you can verify that before you do

576
00:24:41,679 --> 00:24:46,080
anything else

577
00:24:42,720 --> 00:24:47,520
with a message and folks folks by the

578
00:24:46,080 --> 00:24:49,439
way should feel free to stop uh

579
00:24:47,520 --> 00:24:51,840
step uh jump in if there's uh questions

580
00:24:49,440 --> 00:24:54,000
or comments here

581
00:24:51,840 --> 00:24:55,840
um second thing to highlight um

582
00:24:54,000 --> 00:24:59,360
pre-shared keys is really good

583
00:24:55,840 --> 00:25:00,879
oh yeah uh sorry so it's so

584
00:24:59,360 --> 00:25:02,799
the the the problem you mentioned is

585
00:25:00,880 --> 00:25:05,600
actually only in the case where you

586
00:25:02,799 --> 00:25:06,559
don't encrypt the the preparation

587
00:25:05,600 --> 00:25:08,158
messages right

588
00:25:06,559 --> 00:25:09,918
because in that way if you include them

589
00:25:08,159 --> 00:25:11,600
you you you have this authentication

590
00:25:09,919 --> 00:25:13,039
guaranteed like it's a weak one but it's

591
00:25:11,600 --> 00:25:14,240
you you have it

592
00:25:13,039 --> 00:25:15,840
yeah so when you're when you're

593
00:25:14,240 --> 00:25:17,440
encrypted when you're sending mls

594
00:25:15,840 --> 00:25:20,240
ciphertext on the wire you get the

595
00:25:17,440 --> 00:25:22,240
authentication from the aead tag

596
00:25:20,240 --> 00:25:23,760
um so this is only for the case where

597
00:25:22,240 --> 00:25:24,960
mls plaintext is what you're sending on

598
00:25:23,760 --> 00:25:27,760
the wire

599
00:25:24,960 --> 00:25:29,360
so do you so i remember that the

600
00:25:27,760 --> 00:25:30,960
phrasing is

601
00:25:29,360 --> 00:25:32,639
relatively relaxed right now in the

602
00:25:30,960 --> 00:25:34,880
document where we say we

603
00:25:32,640 --> 00:25:36,799
could i think send plain text and not

604
00:25:34,880 --> 00:25:41,039
encrypt them

605
00:25:36,799 --> 00:25:42,639
why you still it's still reasonable

606
00:25:41,039 --> 00:25:44,879
yeah no i think i think we are going to

607
00:25:42,640 --> 00:25:46,000
have use cases where we don't want to

608
00:25:44,880 --> 00:25:50,240
encrypt the

609
00:25:46,000 --> 00:25:52,320
uh handshake message of the mls messages

610
00:25:50,240 --> 00:25:53,600
um and so i think it is important to

611
00:25:52,320 --> 00:25:56,559
continue to support that

612
00:25:53,600 --> 00:25:57,520
um and it's that means we do have to

613
00:25:56,559 --> 00:25:59,440
kind of have a switch

614
00:25:57,520 --> 00:26:02,080
in the code um because you're not going

615
00:25:59,440 --> 00:26:04,000
to have one of these uh membership tags

616
00:26:02,080 --> 00:26:05,840
for an mls plaintext you've decrypted

617
00:26:04,000 --> 00:26:08,080
from this mla ciphertext

618
00:26:05,840 --> 00:26:10,240
but i think that that's tolerable it's

619
00:26:08,080 --> 00:26:14,320
not a huge amount of complexity

620
00:26:10,240 --> 00:26:14,320
okay thank you sure thanks

621
00:26:14,880 --> 00:26:18,559
um second cool thing uh thanks to some

622
00:26:17,360 --> 00:26:21,840
good work from rita hale

623
00:26:18,559 --> 00:26:24,480
and conrad cobrook um we have a new

624
00:26:21,840 --> 00:26:25,600
nice psk framework um it works more or

625
00:26:24,480 --> 00:26:29,440
less like you'd expect

626
00:26:25,600 --> 00:26:30,480
um people someone who wants to add a psk

627
00:26:29,440 --> 00:26:33,039
at an epoch

628
00:26:30,480 --> 00:26:34,320
um sends out a proposal um you can get

629
00:26:33,039 --> 00:26:35,200
multiple those proposals so we have a

630
00:26:34,320 --> 00:26:36,960
scheme for

631
00:26:35,200 --> 00:26:39,440
combining multiple psks and then they

632
00:26:36,960 --> 00:26:41,679
get injected into the key schedule

633
00:26:39,440 --> 00:26:43,840
as you're transitioning from one uh the

634
00:26:41,679 --> 00:26:44,559
last xbox in its secret to the current

635
00:26:43,840 --> 00:26:48,158
epochs

636
00:26:44,559 --> 00:26:49,840
epoch secret um

637
00:26:48,159 --> 00:26:51,200
really the novelty here is this proposal

638
00:26:49,840 --> 00:26:52,480
mechanism um

639
00:26:51,200 --> 00:26:54,799
and there's a corresponding signaling

640
00:26:52,480 --> 00:26:55,360
welcome um i think this is kind of nice

641
00:26:54,799 --> 00:26:56,879
because it

642
00:26:55,360 --> 00:26:58,719
incorporates you know it's kind of

643
00:26:56,880 --> 00:27:00,159
inspired by the tls13 design where you

644
00:26:58,720 --> 00:27:02,559
have psk ids and

645
00:27:00,159 --> 00:27:03,279
kpsks and incorporates some learnings

646
00:27:02,559 --> 00:27:07,039
from

647
00:27:03,279 --> 00:27:09,039
recent tls and follow on work213

648
00:27:07,039 --> 00:27:11,039
so we have i think one thing that has

649
00:27:09,039 --> 00:27:12,480
been done more recently and tls is

650
00:27:11,039 --> 00:27:14,480
folks trying to introduce structured

651
00:27:12,480 --> 00:27:17,760
labels so you can have specific

652
00:27:14,480 --> 00:27:20,000
labels that have internal structure for

653
00:27:17,760 --> 00:27:21,760
specific use cases um we're building

654
00:27:20,000 --> 00:27:24,880
that in from the start here

655
00:27:21,760 --> 00:27:26,240
um and uh i think

656
00:27:24,880 --> 00:27:28,240
jonathan hoyland has done some work on

657
00:27:26,240 --> 00:27:30,000
looking at um and also

658
00:27:28,240 --> 00:27:31,600
stability and the post quantum folks

659
00:27:30,000 --> 00:27:34,159
looking at how you incorporate multiple

660
00:27:31,600 --> 00:27:35,840
psks or multiple entry sources

661
00:27:34,159 --> 00:27:37,600
into the key schedule so we're trying to

662
00:27:35,840 --> 00:27:38,799
capture all that good advice good

663
00:27:37,600 --> 00:27:43,520
experience here

664
00:27:38,799 --> 00:27:43,520
and incorporate it in round one of mls

665
00:27:45,679 --> 00:27:50,240
so that's pre-shared keys um the only

666
00:27:48,720 --> 00:27:50,880
thing i would add there is that um that

667
00:27:50,240 --> 00:27:53,520
was a

668
00:27:50,880 --> 00:27:55,200
an exercise in patience on uh britain

669
00:27:53,520 --> 00:27:57,520
conrad's part that they

670
00:27:55,200 --> 00:27:59,200
they um thrust and parried and finally

671
00:27:57,520 --> 00:28:00,879
got the stuff done so it was good to see

672
00:27:59,200 --> 00:28:03,840
the working group uh

673
00:28:00,880 --> 00:28:04,960
finally got that that this uh this stuff

674
00:28:03,840 --> 00:28:06,879
incorporated

675
00:28:04,960 --> 00:28:08,080
yeah i i and i owe them a massive mia

676
00:28:06,880 --> 00:28:10,559
culpa i

677
00:28:08,080 --> 00:28:12,320
uh i imposed a lot of delay and made

678
00:28:10,559 --> 00:28:13,440
them uh explain a bunch of stuff to me

679
00:28:12,320 --> 00:28:15,439
over and over again

680
00:28:13,440 --> 00:28:16,799
um but i think we ended up in a finally

681
00:28:15,440 --> 00:28:21,440
in a really good place

682
00:28:16,799 --> 00:28:23,600
i appreciate their work here um

683
00:28:21,440 --> 00:28:25,440
one thing that came up is kind of a this

684
00:28:23,600 --> 00:28:26,080
is a kind of a bit of a performance

685
00:28:25,440 --> 00:28:28,399
improvement

686
00:28:26,080 --> 00:28:30,559
um you know before the center of a

687
00:28:28,399 --> 00:28:32,799
proposal could send out a bunch of

688
00:28:30,559 --> 00:28:35,600
i'm sorry the center of a commit could

689
00:28:32,799 --> 00:28:37,840
send alongside that a bunch of proposals

690
00:28:35,600 --> 00:28:38,959
um and those proposals would each be

691
00:28:37,840 --> 00:28:41,918
individually signed in their own

692
00:28:38,960 --> 00:28:41,919
envelopes plain text

693
00:28:42,000 --> 00:28:47,120
this change with this change

694
00:28:45,279 --> 00:28:49,360
those proposals can just go directly in

695
00:28:47,120 --> 00:28:50,959
the commit um

696
00:28:49,360 --> 00:28:53,279
and so you save a lot of signature

697
00:28:50,960 --> 00:28:56,880
overhead a lot of bandwidth overhead

698
00:28:53,279 --> 00:28:58,399
and just send the proposals in line

699
00:28:56,880 --> 00:28:59,760
now syntactically with that you know we

700
00:28:58,399 --> 00:29:01,600
wanted to preserve this property that we

701
00:28:59,760 --> 00:29:02,080
have a single proposals array so it's

702
00:29:01,600 --> 00:29:04,959
clear

703
00:29:02,080 --> 00:29:06,000
what order the proposals are applied in

704
00:29:04,960 --> 00:29:07,840
um

705
00:29:06,000 --> 00:29:09,760
and so what we did is just change that

706
00:29:07,840 --> 00:29:13,678
array of proposals from being a

707
00:29:09,760 --> 00:29:16,399
list of references to proposals by hash

708
00:29:13,679 --> 00:29:18,159
to a list of proposal or references so

709
00:29:16,399 --> 00:29:20,879
you can get the proposal by value

710
00:29:18,159 --> 00:29:21,440
or by reference so we maintain that

711
00:29:20,880 --> 00:29:23,520
ordering

712
00:29:21,440 --> 00:29:25,039
but we can indicate things by value or

713
00:29:23,520 --> 00:29:27,520
by reference

714
00:29:25,039 --> 00:29:28,559
um so this lets the committer just send

715
00:29:27,520 --> 00:29:32,158
along a bunch of stuff

716
00:29:28,559 --> 00:29:33,678
to apply um as part of that commit um

717
00:29:32,159 --> 00:29:35,279
so you can imagine that if the committee

718
00:29:33,679 --> 00:29:38,080
wanted to say sentence um

719
00:29:35,279 --> 00:29:39,600
add a psk as part of the commit you just

720
00:29:38,080 --> 00:29:40,879
add the

721
00:29:39,600 --> 00:29:43,678
that proposal to the end of the

722
00:29:40,880 --> 00:29:43,679
proposals vector

723
00:29:44,399 --> 00:29:49,360
this simplifies in particular some of

724
00:29:46,799 --> 00:29:54,799
the external commit stuff which

725
00:29:49,360 --> 00:29:57,039
raphael will talk about in a moment

726
00:29:54,799 --> 00:29:58,000
and another this is kind of consistent

727
00:29:57,039 --> 00:30:01,120
with another idea

728
00:29:58,000 --> 00:30:04,399
that we discussed earlier that

729
00:30:01,120 --> 00:30:07,039
um the kind of design principle that

730
00:30:04,399 --> 00:30:08,799
the way you extend the commit message is

731
00:30:07,039 --> 00:30:10,240
with new proposal types as opposed to

732
00:30:08,799 --> 00:30:13,679
having extensions

733
00:30:10,240 --> 00:30:15,360
uh in the commit message itself so

734
00:30:13,679 --> 00:30:17,200
you know being able to put proposals

735
00:30:15,360 --> 00:30:19,600
directly in the commit message

736
00:30:17,200 --> 00:30:22,720
kind of makes clear that that's is

737
00:30:19,600 --> 00:30:24,399
consistent with that design principle

738
00:30:22,720 --> 00:30:26,000
so it's it's basically mostly an

739
00:30:24,399 --> 00:30:26,959
optimization list of securities and

740
00:30:26,000 --> 00:30:30,720
these other things

741
00:30:26,960 --> 00:30:34,080
but i kind of nice

742
00:30:30,720 --> 00:30:34,080
from an implementation point of view

743
00:30:34,640 --> 00:30:41,360
um some more uh focused things um

744
00:30:38,799 --> 00:30:42,480
didn't pull these out onto one's um

745
00:30:41,360 --> 00:30:45,520
major slides um

746
00:30:42,480 --> 00:30:46,640
one implication of the psk work that was

747
00:30:45,520 --> 00:30:48,080
done

748
00:30:46,640 --> 00:30:50,799
is that we can kind of we can do

749
00:30:48,080 --> 00:30:54,158
subgroups and read in it

750
00:30:50,799 --> 00:30:56,158
so when you generate a subgroup

751
00:30:54,159 --> 00:30:59,039
much like with i think there's a nice

752
00:30:56,159 --> 00:31:01,120
analogy to to tls and resumption here

753
00:30:59,039 --> 00:31:02,399
that the key schedule produces

754
00:31:01,120 --> 00:31:04,399
resumption secrets and

755
00:31:02,399 --> 00:31:06,399
you can use those secrets to connect one

756
00:31:04,399 --> 00:31:07,600
group state to other group states so

757
00:31:06,399 --> 00:31:08,799
branching

758
00:31:07,600 --> 00:31:11,039
is one instance of that where you want

759
00:31:08,799 --> 00:31:13,519
to instantiate a subgroup or

760
00:31:11,039 --> 00:31:14,720
a related group you can pull that

761
00:31:13,519 --> 00:31:16,240
resumption psk

762
00:31:14,720 --> 00:31:18,320
out of the prior group and then and

763
00:31:16,240 --> 00:31:21,120
insert it into the uh

764
00:31:18,320 --> 00:31:22,399
subgroup or the branch group likewise if

765
00:31:21,120 --> 00:31:23,840
you're going to reinitialize the group

766
00:31:22,399 --> 00:31:26,158
to say upgrade the cipher suite or

767
00:31:23,840 --> 00:31:27,760
upgrade to a new protocol version

768
00:31:26,159 --> 00:31:29,440
then you can tie the new group to the

769
00:31:27,760 --> 00:31:30,480
old group again using this resumption

770
00:31:29,440 --> 00:31:32,559
psk

771
00:31:30,480 --> 00:31:34,640
so that's kind of a nice application of

772
00:31:32,559 --> 00:31:37,039
the psk work that was done

773
00:31:34,640 --> 00:31:38,320
um more optimization work on the third

774
00:31:37,039 --> 00:31:40,158
bullet here um

775
00:31:38,320 --> 00:31:42,080
the ratchet tree for these cases where

776
00:31:40,159 --> 00:31:43,360
the the delivery service might cache

777
00:31:42,080 --> 00:31:46,799
some of the tree information

778
00:31:43,360 --> 00:31:49,360
um based on say plain text uh

779
00:31:46,799 --> 00:31:50,399
handshake messages if the server is

780
00:31:49,360 --> 00:31:51,918
following along

781
00:31:50,399 --> 00:31:53,518
then it can provide the tree and it

782
00:31:51,919 --> 00:31:55,039
doesn't need to be provided end to end

783
00:31:53,519 --> 00:31:56,399
in the welcome

784
00:31:55,039 --> 00:31:58,000
so the welcome just provides a

785
00:31:56,399 --> 00:31:59,439
commitment to the tree not the tree

786
00:31:58,000 --> 00:32:01,600
itself it can optionally include the

787
00:31:59,440 --> 00:32:05,919
tree in an extension

788
00:32:01,600 --> 00:32:08,080
just a performance optimization there um

789
00:32:05,919 --> 00:32:09,679
more work from uh alberta and conrad

790
00:32:08,080 --> 00:32:11,600
this authentication secret derived from

791
00:32:09,679 --> 00:32:14,720
the key schedule this provides kind of a

792
00:32:11,600 --> 00:32:16,000
um yeah in a lot of apps today you have

793
00:32:14,720 --> 00:32:18,480
these security codes that are

794
00:32:16,000 --> 00:32:20,159
that people can compare uh to verify

795
00:32:18,480 --> 00:32:22,799
that they have the same crypto state

796
00:32:20,159 --> 00:32:24,000
um so here we can just um since we have

797
00:32:22,799 --> 00:32:24,240
this framework for deriving stuff with

798
00:32:24,000 --> 00:32:26,399
the

799
00:32:24,240 --> 00:32:28,480
off the key schedule we can just derive

800
00:32:26,399 --> 00:32:31,360
another value off the key schedule that

801
00:32:28,480 --> 00:32:32,320
can be used for that purpose so you can

802
00:32:31,360 --> 00:32:34,158
compare this and

803
00:32:32,320 --> 00:32:36,080
you know you're in the you know if

804
00:32:34,159 --> 00:32:39,200
everyone in the group has the

805
00:32:36,080 --> 00:32:40,000
um same authentication secret then they

806
00:32:39,200 --> 00:32:42,320
know that they have

807
00:32:40,000 --> 00:32:44,960
exactly the same crypto state for that

808
00:32:42,320 --> 00:32:44,960
state of the group

809
00:32:45,120 --> 00:32:48,158
and finally there's been some concerns

810
00:32:46,799 --> 00:32:51,840
off and on about deniability

811
00:32:48,159 --> 00:32:55,519
um sophia chile

812
00:32:51,840 --> 00:32:57,840
did some review on this and proposed one

813
00:32:55,519 --> 00:32:59,600
one change to improve compatibility with

814
00:32:57,840 --> 00:33:01,918
deniability going forward which is to

815
00:32:59,600 --> 00:33:03,279
have a little bit of decoupling between

816
00:33:01,919 --> 00:33:06,000
the signing keys that are

817
00:33:03,279 --> 00:33:07,679
in the in the mls transcript and the

818
00:33:06,000 --> 00:33:10,640
signing keys that are used for

819
00:33:07,679 --> 00:33:11,840
for verifying messages that landed after

820
00:33:10,640 --> 00:33:14,799
draft 10 but it's it's

821
00:33:11,840 --> 00:33:14,799
in master right now

822
00:33:15,039 --> 00:33:19,039
uh finally a couple of uh you know

823
00:33:17,600 --> 00:33:22,399
efficiency improvements

824
00:33:19,039 --> 00:33:24,080
we had had this constant time ad

825
00:33:22,399 --> 00:33:25,439
i can't remember if that yeah i think

826
00:33:24,080 --> 00:33:27,760
that was before before we

827
00:33:25,440 --> 00:33:29,200
made the switch to proposal commit um we

828
00:33:27,760 --> 00:33:32,480
had constant time add

829
00:33:29,200 --> 00:33:33,760
where you could um you know you didn't

830
00:33:32,480 --> 00:33:35,120
have to change anything about the tree

831
00:33:33,760 --> 00:33:38,158
besides the leaf

832
00:33:35,120 --> 00:33:42,000
um we

833
00:33:38,159 --> 00:33:42,000
re-added that in um

834
00:33:42,240 --> 00:33:46,640
in draft 10 um forgetting the details of

835
00:33:45,679 --> 00:33:49,760
how that was done

836
00:33:46,640 --> 00:33:51,039
um but you know now ads can be kind of

837
00:33:49,760 --> 00:33:53,200
gonna be done in constant time you don't

838
00:33:51,039 --> 00:33:54,720
have to um

839
00:33:53,200 --> 00:33:56,960
all right this is this is uh where we

840
00:33:54,720 --> 00:33:57,440
made the the the update path in the

841
00:33:56,960 --> 00:33:59,840
commit

842
00:33:57,440 --> 00:34:01,760
the thing that takes you log to linear

843
00:33:59,840 --> 00:34:02,559
time to generate log linear number of dh

844
00:34:01,760 --> 00:34:06,000
operations or

845
00:34:02,559 --> 00:34:09,040
h chem operations um

846
00:34:06,000 --> 00:34:09,290
you can omit that path you can not

847
00:34:09,040 --> 00:34:12,079
um

848
00:34:09,290 --> 00:34:14,159
[Music]

849
00:34:12,079 --> 00:34:15,599
have a new entropy to the group if the

850
00:34:14,159 --> 00:34:18,800
only thing you are doing is adding

851
00:34:15,599 --> 00:34:22,560
because everyone can just hash forward

852
00:34:18,800 --> 00:34:25,760
so yeah that gets us back to this um

853
00:34:22,560 --> 00:34:27,520
uh notion of constant time ad um

854
00:34:25,760 --> 00:34:28,879
another optimization is that this this

855
00:34:27,520 --> 00:34:31,599
update path in the commits

856
00:34:28,879 --> 00:34:33,759
um used to encrypt new entropy to the

857
00:34:31,599 --> 00:34:35,599
entire group for the new epoch including

858
00:34:33,760 --> 00:34:36,320
the people you just added even to those

859
00:34:35,599 --> 00:34:37,839
people

860
00:34:36,320 --> 00:34:39,839
uh were getting the information from the

861
00:34:37,839 --> 00:34:40,639
welcome not the commit so the update

862
00:34:39,839 --> 00:34:44,239
path

863
00:34:40,639 --> 00:34:46,159
had useless encrypted secrets and so um

864
00:34:44,239 --> 00:34:48,719
we're omitting that now because they're

865
00:34:46,159 --> 00:34:51,119
just not necessary

866
00:34:48,719 --> 00:34:52,319
um and finally we consolidated the key

867
00:34:51,119 --> 00:34:53,280
schedule a little bit we used to have

868
00:34:52,320 --> 00:34:57,200
separate uh

869
00:34:53,280 --> 00:34:58,960
key derivation schemes for uh encrypting

870
00:34:57,200 --> 00:35:00,399
application messages versus encrypting

871
00:34:58,960 --> 00:35:01,920
handshake messages

872
00:35:00,400 --> 00:35:03,920
and now we use the same secret tree for

873
00:35:01,920 --> 00:35:05,599
both of those so um

874
00:35:03,920 --> 00:35:07,440
you can delete a bunch of code that was

875
00:35:05,599 --> 00:35:10,240
managing that second

876
00:35:07,440 --> 00:35:10,800
key derivation scheme so that's the

877
00:35:10,240 --> 00:35:14,560
review

878
00:35:10,800 --> 00:35:16,720
of what we have done recently

879
00:35:14,560 --> 00:35:18,400
um i think i'd like to pass it over to

880
00:35:16,720 --> 00:35:21,359
joelle here to talk about

881
00:35:18,400 --> 00:35:22,480
um some issues that that he and his team

882
00:35:21,359 --> 00:35:25,520
uh discovered with

883
00:35:22,480 --> 00:35:26,800
uh the current uh hashing scheme we have

884
00:35:25,520 --> 00:35:31,839
for authenticating the tree

885
00:35:26,800 --> 00:35:31,839
to drill intake over here

886
00:35:32,480 --> 00:35:35,599
all right uh just before we do that so

887
00:35:34,480 --> 00:35:36,880
this is one of the issues that got

888
00:35:35,599 --> 00:35:37,839
called out during working group last

889
00:35:36,880 --> 00:35:40,960
call that we hadn't

890
00:35:37,839 --> 00:35:42,320
um uh uh come to conclusion on

891
00:35:40,960 --> 00:35:44,240
were there was there anything else that

892
00:35:42,320 --> 00:35:46,560
you saw that came up that needs to be

893
00:35:44,240 --> 00:35:46,560
addressed

894
00:35:47,280 --> 00:35:52,800
um i have not done

895
00:35:50,640 --> 00:35:54,240
i i should do one more review of the

896
00:35:52,800 --> 00:35:55,040
mailing list but i don't think i saw

897
00:35:54,240 --> 00:35:57,359
anything come up

898
00:35:55,040 --> 00:35:59,359
that was that needed to be addressed in

899
00:35:57,359 --> 00:36:03,440
in the next draft

900
00:35:59,359 --> 00:36:03,440
okay excellent thank you sorry joel

901
00:36:05,200 --> 00:36:12,000
joelle are you awake see you in the

902
00:36:08,640 --> 00:36:13,920
participant list

903
00:36:12,000 --> 00:36:16,240
you can click the microphone button to

904
00:36:13,920 --> 00:36:19,760
send audio

905
00:36:16,240 --> 00:36:22,479
while i have two seconds before join

906
00:36:19,760 --> 00:36:24,320
um there is one section that was

907
00:36:22,480 --> 00:36:25,200
mentioned multiple times but we didn't

908
00:36:24,320 --> 00:36:26,800
really address

909
00:36:25,200 --> 00:36:28,240
and we should definitely decide whether

910
00:36:26,800 --> 00:36:30,240
we are going to address it or not

911
00:36:28,240 --> 00:36:31,598
is the application message location

912
00:36:30,240 --> 00:36:34,799
thing

913
00:36:31,599 --> 00:36:35,760
so right now and an attacker can

914
00:36:34,800 --> 00:36:38,160
actually like i

915
00:36:35,760 --> 00:36:40,240
would hardly remove messages at the end

916
00:36:38,160 --> 00:36:42,720
of the application messages hello is

917
00:36:40,240 --> 00:36:47,279
everybody actually knowing

918
00:36:42,720 --> 00:36:49,040
gerard we do hear you we do here

919
00:36:47,280 --> 00:36:50,320
and uh yeah that's something we should

920
00:36:49,040 --> 00:36:52,960
discuss

921
00:36:50,320 --> 00:36:55,839
at some point that's it because this is

922
00:36:52,960 --> 00:36:55,839
a remaining issue as well

923
00:36:56,000 --> 00:36:59,520
yeah that's a good point we um

924
00:36:59,839 --> 00:37:02,880
i think we did have issues for that and

925
00:37:01,839 --> 00:37:06,400
i'm not sure why

926
00:37:02,880 --> 00:37:07,599
i may have erroneously closed them um

927
00:37:06,400 --> 00:37:09,920
but i think we should make a clear

928
00:37:07,599 --> 00:37:10,320
decision about that maybe we should have

929
00:37:09,920 --> 00:37:12,720
a call

930
00:37:10,320 --> 00:37:14,880
i think we can see if we have time on on

931
00:37:12,720 --> 00:37:16,160
in this session but if not we should um

932
00:37:14,880 --> 00:37:19,040
schedule a call in the next couple weeks

933
00:37:16,160 --> 00:37:19,040
to close out on that

934
00:37:20,960 --> 00:37:24,560
so joelle one more time we were hearing

935
00:37:22,880 --> 00:37:28,560
you before um

936
00:37:24,560 --> 00:37:28,560
but i think you turned your mic back off

937
00:37:28,960 --> 00:37:34,480
okay um i hear you i hear you now

938
00:37:32,240 --> 00:37:36,078
all right good i guess some reason i

939
00:37:34,480 --> 00:37:39,040
can't hear anybody else when i talk

940
00:37:36,079 --> 00:37:42,079
but i guess sean gave me a thumbs up

941
00:37:39,040 --> 00:37:47,440
which means i guess you can hear me

942
00:37:42,079 --> 00:37:47,440
uh okay well i'll keep talking

943
00:37:48,480 --> 00:37:52,160
but uh if if there's a question then

944
00:37:50,400 --> 00:37:53,599
sean just wave and i'll

945
00:37:52,160 --> 00:37:55,920
turn and turn off the sound so that i

946
00:37:53,599 --> 00:37:58,960
can actually hear other people okay

947
00:37:55,920 --> 00:38:01,040
um thanks

948
00:37:58,960 --> 00:38:02,240
uh richard do you think i think you're

949
00:38:01,040 --> 00:38:04,720
still screen sharing so do you think you

950
00:38:02,240 --> 00:38:06,959
could just go to the next slide

951
00:38:04,720 --> 00:38:06,959
um

952
00:38:11,440 --> 00:38:16,079
you know yeah on further thought that

953
00:38:13,760 --> 00:38:16,079
was it

954
00:38:17,520 --> 00:38:26,160
all right okay so

955
00:38:22,000 --> 00:38:28,400
uh yeah so this is basically what

956
00:38:26,160 --> 00:38:30,078
this this concerns um a feature called

957
00:38:28,400 --> 00:38:33,680
parent hash

958
00:38:30,079 --> 00:38:37,200
which um was originally introduced

959
00:38:33,680 --> 00:38:41,118
um by uh karthik and

960
00:38:37,200 --> 00:38:42,879
benjamin um when they pointed out that

961
00:38:41,119 --> 00:38:45,040
we need to be able to authenticate this

962
00:38:42,880 --> 00:38:46,320
tree in particular to give guarantees to

963
00:38:45,040 --> 00:38:49,839
people joining the group

964
00:38:46,320 --> 00:38:51,200
right um and so what we did is or what

965
00:38:49,839 --> 00:38:52,960
they did at the time is they introduced

966
00:38:51,200 --> 00:38:56,560
this notion of a parent hash

967
00:38:52,960 --> 00:38:59,440
that hashes uh a part of the tree

968
00:38:56,560 --> 00:39:01,040
and you end up with actually a sequence

969
00:38:59,440 --> 00:39:02,880
of parent hashes each node has its own

970
00:39:01,040 --> 00:39:05,279
parent hash to find and then you put the

971
00:39:02,880 --> 00:39:07,680
the last one down the leaf every time

972
00:39:05,280 --> 00:39:10,480
you're doing an update path and then you

973
00:39:07,680 --> 00:39:12,160
sign your entire leaf and that includes

974
00:39:10,480 --> 00:39:13,920
the parent hash and so in so doing

975
00:39:12,160 --> 00:39:15,040
you're kind of authenticating certain

976
00:39:13,920 --> 00:39:17,280
stuff in the tree

977
00:39:15,040 --> 00:39:18,800
but then there was some amount of debate

978
00:39:17,280 --> 00:39:21,920
um

979
00:39:18,800 --> 00:39:22,880
around how exactly to define this parent

980
00:39:21,920 --> 00:39:25,920
hash

981
00:39:22,880 --> 00:39:28,880
and um at the time there were

982
00:39:25,920 --> 00:39:29,520
then kind of two candidates and we um

983
00:39:28,880 --> 00:39:33,040
went with

984
00:39:29,520 --> 00:39:34,240
one um which hatched in less um because

985
00:39:33,040 --> 00:39:36,000
we were hoping it would maybe give us

986
00:39:34,240 --> 00:39:37,520
then a bit more deniability because at

987
00:39:36,000 --> 00:39:39,920
the end of the day you do sign this

988
00:39:37,520 --> 00:39:41,520
parent hash so the more that it binds

989
00:39:39,920 --> 00:39:44,160
the more you're sort of committing to

990
00:39:41,520 --> 00:39:48,079
aspects properties of the group

991
00:39:44,160 --> 00:39:48,560
and um so we really revisited this we

992
00:39:48,079 --> 00:39:52,800
being

993
00:39:48,560 --> 00:39:56,160
um daniel jost and um martin mullarczyk

994
00:39:52,800 --> 00:39:58,720
in our security review of mls and

995
00:39:56,160 --> 00:39:59,279
we found actually that there's um

996
00:39:58,720 --> 00:40:02,480
there's a

997
00:39:59,280 --> 00:40:04,160
this opens a class of attacks on mls

998
00:40:02,480 --> 00:40:05,839
the way that parent hash was defined in

999
00:40:04,160 --> 00:40:09,680
this minimal way

1000
00:40:05,839 --> 00:40:12,960
so um we then proposed a pr

1001
00:40:09,680 --> 00:40:13,839
that addresses this attack so this is

1002
00:40:12,960 --> 00:40:15,119
basically what i'm going to tell you

1003
00:40:13,839 --> 00:40:18,560
about now

1004
00:40:15,119 --> 00:40:18,560
you can go to the next slide please

1005
00:40:18,880 --> 00:40:23,680
okay so first i'll tell you a little bit

1006
00:40:21,680 --> 00:40:24,879
about what the attack is

1007
00:40:23,680 --> 00:40:26,960
because that's really going to motivate

1008
00:40:24,880 --> 00:40:30,319
them the changes as well

1009
00:40:26,960 --> 00:40:31,760
um so first the the way that the

1010
00:40:30,319 --> 00:40:33,200
the whole the parent hash has been

1011
00:40:31,760 --> 00:40:34,720
defined up till now this sort of more

1012
00:40:33,200 --> 00:40:36,480
minimal way of doing

1013
00:40:34,720 --> 00:40:38,160
we've defined it in the past it's

1014
00:40:36,480 --> 00:40:39,440
basically when you do an update path so

1015
00:40:38,160 --> 00:40:41,598
you're doing a commit

1016
00:40:39,440 --> 00:40:43,119
you're inserting a bunch of keys on your

1017
00:40:41,599 --> 00:40:45,200
direct path

1018
00:40:43,119 --> 00:40:46,160
and you pretty much just hash back down

1019
00:40:45,200 --> 00:40:49,680
to your leaf again

1020
00:40:46,160 --> 00:40:51,440
only those hpk public keys right so

1021
00:40:49,680 --> 00:40:53,279
um here on the top left we've got a

1022
00:40:51,440 --> 00:40:54,880
picture of a small group with alice bob

1023
00:40:53,280 --> 00:40:56,720
and charlie alice just did

1024
00:40:54,880 --> 00:40:58,319
the most recent commit that's why her

1025
00:40:56,720 --> 00:41:01,598
direct pass is mark blue

1026
00:40:58,319 --> 00:41:03,759
and so in particular she would then hash

1027
00:41:01,599 --> 00:41:04,400
first the root hpk public key that she

1028
00:41:03,760 --> 00:41:08,319
put in

1029
00:41:04,400 --> 00:41:10,079
and then she'd hash in um the parent

1030
00:41:08,319 --> 00:41:12,640
node between alice and bob and then she

1031
00:41:10,079 --> 00:41:14,160
would at the end hashing her own

1032
00:41:12,640 --> 00:41:16,400
uh no actually i think she wouldn't even

1033
00:41:14,160 --> 00:41:18,560
do that she'd just you know just

1034
00:41:16,400 --> 00:41:19,920
just take that hash from uh the parent

1035
00:41:18,560 --> 00:41:21,440
that includes hpk

1036
00:41:19,920 --> 00:41:22,880
key it's apparent to the root and then

1037
00:41:21,440 --> 00:41:24,400
she put that under leaf and she'd sign

1038
00:41:22,880 --> 00:41:26,800
the whole thing

1039
00:41:24,400 --> 00:41:28,319
so the issue with this kind of in a

1040
00:41:26,800 --> 00:41:29,599
nutshell is that it really doesn't tell

1041
00:41:28,319 --> 00:41:32,720
you anything about

1042
00:41:29,599 --> 00:41:35,280
who was told these

1043
00:41:32,720 --> 00:41:36,879
secret keys that correspond to these hpk

1044
00:41:35,280 --> 00:41:40,400
public keys in other words

1045
00:41:36,880 --> 00:41:43,119
it makes it easy to or possible to

1046
00:41:40,400 --> 00:41:43,520
um create ratchet trees that violate the

1047
00:41:43,119 --> 00:41:45,760
two

1048
00:41:43,520 --> 00:41:46,560
invariant which leads to other bad

1049
00:41:45,760 --> 00:41:49,280
things things

1050
00:41:46,560 --> 00:41:50,640
like removes not really working as if

1051
00:41:49,280 --> 00:41:51,760
you think you removed somebody but in

1052
00:41:50,640 --> 00:41:53,598
reality you didn't really remove them

1053
00:41:51,760 --> 00:41:54,319
from the group so here's an example of

1054
00:41:53,599 --> 00:41:55,680
this like a

1055
00:41:54,319 --> 00:41:57,359
sort of pretty minimal example of how

1056
00:41:55,680 --> 00:41:59,919
this attack would work

1057
00:41:57,359 --> 00:42:01,839
um bob is our attacker so this is about

1058
00:41:59,920 --> 00:42:03,520
insiders all right this attack would be

1059
00:42:01,839 --> 00:42:05,200
mounted by an insider somebody who's

1060
00:42:03,520 --> 00:42:06,319
actually a participant in a legitimate

1061
00:42:05,200 --> 00:42:08,000
group

1062
00:42:06,319 --> 00:42:10,800
and the legitimate group is at the top

1063
00:42:08,000 --> 00:42:12,160
left it contains alice bob and charlie

1064
00:42:10,800 --> 00:42:14,400
right now let's did the most recent

1065
00:42:12,160 --> 00:42:16,640
commit as we said so here's what bob

1066
00:42:14,400 --> 00:42:18,880
does bob constructs a fake ratchet tree

1067
00:42:16,640 --> 00:42:22,640
like an artificial one

1068
00:42:18,880 --> 00:42:25,440
and um so it's it's a fake group

1069
00:42:22,640 --> 00:42:26,560
and it's the top right ratchet tree and

1070
00:42:25,440 --> 00:42:28,880
then

1071
00:42:26,560 --> 00:42:31,200
he invites dave who's the victim of this

1072
00:42:28,880 --> 00:42:34,720
attack to this ratchet period okay

1073
00:42:31,200 --> 00:42:36,799
so in other words we now um

1074
00:42:34,720 --> 00:42:38,319
one of the main thing to notice is that

1075
00:42:36,800 --> 00:42:40,160
the way he constructed this tree is he

1076
00:42:38,319 --> 00:42:40,960
took this direct path from alice which

1077
00:42:40,160 --> 00:42:43,759
is a legit

1078
00:42:40,960 --> 00:42:45,359
direct path but then instead of putting

1079
00:42:43,760 --> 00:42:47,359
himself where he was in

1080
00:42:45,359 --> 00:42:48,960
the actual group he switched out and put

1081
00:42:47,359 --> 00:42:52,480
charlie there

1082
00:42:48,960 --> 00:42:54,240
right and then he put himself

1083
00:42:52,480 --> 00:42:55,920
in charlie's spot then creates this

1084
00:42:54,240 --> 00:42:58,000
proposal to add dave

1085
00:42:55,920 --> 00:43:00,160
and commits to it so you end up with

1086
00:42:58,000 --> 00:43:01,040
this other this this other ratchet tree

1087
00:43:00,160 --> 00:43:03,040
over here

1088
00:43:01,040 --> 00:43:04,319
which looks legit because all the parent

1089
00:43:03,040 --> 00:43:07,839
hashes still

1090
00:43:04,319 --> 00:43:08,160
work out right um in particular you'll

1091
00:43:07,839 --> 00:43:10,000
see

1092
00:43:08,160 --> 00:43:11,200
you know alice's direct path has been

1093
00:43:10,000 --> 00:43:14,480
maintained

1094
00:43:11,200 --> 00:43:17,919
so hope her the signature at her leaf

1095
00:43:14,480 --> 00:43:19,440
is gonna verify for dave same thing for

1096
00:43:17,920 --> 00:43:20,480
charlie bob can sign whatever he wants

1097
00:43:19,440 --> 00:43:22,960
at his leave

1098
00:43:20,480 --> 00:43:24,240
um and so dave is going to accept this

1099
00:43:22,960 --> 00:43:25,520
welcome message and he's going to join

1100
00:43:24,240 --> 00:43:28,240
this group

1101
00:43:25,520 --> 00:43:29,839
but of course the attack where things

1102
00:43:28,240 --> 00:43:30,240
have started to go wrong here is that

1103
00:43:29,839 --> 00:43:34,880
bob

1104
00:43:30,240 --> 00:43:37,200
actually knows the hpk secret of alice's

1105
00:43:34,880 --> 00:43:39,280
parent because in the real group that's

1106
00:43:37,200 --> 00:43:41,759
also on his direct path

1107
00:43:39,280 --> 00:43:43,440
but in this fake group it looks like

1108
00:43:41,760 --> 00:43:44,480
it's not he doesn't know it it's not on

1109
00:43:43,440 --> 00:43:46,560
his direct path

1110
00:43:44,480 --> 00:43:48,480
so the next thing he does is he now you

1111
00:43:46,560 --> 00:43:49,520
know gets tells dave hey look i want to

1112
00:43:48,480 --> 00:43:53,200
leave this group

1113
00:43:49,520 --> 00:43:55,359
and gets dave to commit to removing bob

1114
00:43:53,200 --> 00:43:56,879
so in the removal process how does that

1115
00:43:55,359 --> 00:43:59,040
work well we blank bob's

1116
00:43:56,880 --> 00:44:00,640
you know dave announces this uh this

1117
00:43:59,040 --> 00:44:02,720
commitment and then

1118
00:44:00,640 --> 00:44:03,839
everybody will everybody being only dave

1119
00:44:02,720 --> 00:44:05,680
because alice and charlie

1120
00:44:03,839 --> 00:44:07,680
you know aren't even aware of this group

1121
00:44:05,680 --> 00:44:10,640
will blank bob's

1122
00:44:07,680 --> 00:44:10,640
leaf key and then

1123
00:44:11,200 --> 00:44:17,040
which means it'll leave that node

1124
00:44:14,319 --> 00:44:18,800
alice's parent node intact it'll leave

1125
00:44:17,040 --> 00:44:20,560
the same hpke key there

1126
00:44:18,800 --> 00:44:22,880
which bob actually knows the secret to

1127
00:44:20,560 --> 00:44:24,640
and in particular it even encrypts the

1128
00:44:22,880 --> 00:44:26,720
rude secret to that

1129
00:44:24,640 --> 00:44:28,160
so bob can actually still decrypt this

1130
00:44:26,720 --> 00:44:31,200
new rude secret this this

1131
00:44:28,160 --> 00:44:32,799
commit secret and so he can compute the

1132
00:44:31,200 --> 00:44:33,839
new key schedule for this new epoch

1133
00:44:32,800 --> 00:44:35,280
despite the fact that

1134
00:44:33,839 --> 00:44:37,040
dave thinks he's removed bob from the

1135
00:44:35,280 --> 00:44:38,480
tree in other words

1136
00:44:37,040 --> 00:44:40,720
this turned into an attack where a

1137
00:44:38,480 --> 00:44:43,280
removal did not actually have the effect

1138
00:44:40,720 --> 00:44:45,359
we would expect and the real problem

1139
00:44:43,280 --> 00:44:46,800
here is that bob was able to create a

1140
00:44:45,359 --> 00:44:48,960
tree that violated

1141
00:44:46,800 --> 00:44:51,040
the tree invariant that was really the

1142
00:44:48,960 --> 00:44:52,800
cause of this attack

1143
00:44:51,040 --> 00:44:54,960
so this whole class of attacks you can

1144
00:44:52,800 --> 00:44:57,119
do a couple different things with this

1145
00:44:54,960 --> 00:44:59,359
but this is the core and the problem is

1146
00:44:57,119 --> 00:45:00,720
that the signature at alice's leaf which

1147
00:44:59,359 --> 00:45:02,640
includes this parent hash

1148
00:45:00,720 --> 00:45:04,000
doesn't authenticate enough it doesn't

1149
00:45:02,640 --> 00:45:06,560
bind in who alice

1150
00:45:04,000 --> 00:45:07,520
told each one of these new hpk secrets

1151
00:45:06,560 --> 00:45:10,078
to

1152
00:45:07,520 --> 00:45:10,800
so this is what we address with this pr

1153
00:45:10,079 --> 00:45:13,440
um

1154
00:45:10,800 --> 00:45:13,440
next slide

1155
00:45:16,839 --> 00:45:22,799
so what's the intuition to fix here i've

1156
00:45:20,960 --> 00:45:25,440
been trying to sort of

1157
00:45:22,800 --> 00:45:26,960
you know lead the thought pattern here

1158
00:45:25,440 --> 00:45:29,520
with what i've been saying but

1159
00:45:26,960 --> 00:45:31,760
the idea is basically we want to extend

1160
00:45:29,520 --> 00:45:34,880
what goes into the parent hash

1161
00:45:31,760 --> 00:45:36,480
so that it at least indirectly includes

1162
00:45:34,880 --> 00:45:38,480
for each node that's included in the

1163
00:45:36,480 --> 00:45:41,440
parent hash which other

1164
00:45:38,480 --> 00:45:42,880
secrets uh which other people received

1165
00:45:41,440 --> 00:45:46,560
the secret key

1166
00:45:42,880 --> 00:45:48,160
right we we actually figured out that

1167
00:45:46,560 --> 00:45:50,078
you can do this a little more indirectly

1168
00:45:48,160 --> 00:45:50,799
maybe for reasons of deniability or just

1169
00:45:50,079 --> 00:45:53,680
simplicity

1170
00:45:50,800 --> 00:45:54,720
really and it's enough to just include

1171
00:45:53,680 --> 00:45:56,560
into the parent hash

1172
00:45:54,720 --> 00:45:58,319
every time you want to include an hpk

1173
00:45:56,560 --> 00:45:58,880
public key of a node covered by a parent

1174
00:45:58,319 --> 00:46:02,400
hash

1175
00:45:58,880 --> 00:46:04,960
you also include the resolution of

1176
00:46:02,400 --> 00:46:06,560
the sibling on the co-path right so

1177
00:46:04,960 --> 00:46:08,400
that's exactly that correspond so

1178
00:46:06,560 --> 00:46:10,480
actually the hpk keys of this resolution

1179
00:46:08,400 --> 00:46:13,520
that corresponds exactly to

1180
00:46:10,480 --> 00:46:15,760
the keys to which the hpk

1181
00:46:13,520 --> 00:46:16,560
secret is being sent right so the set of

1182
00:46:15,760 --> 00:46:18,000
public keys

1183
00:46:16,560 --> 00:46:20,240
to which the parent's private key was

1184
00:46:18,000 --> 00:46:23,599
encrypted too so we augment the

1185
00:46:20,240 --> 00:46:26,160
definition of parent hash with this

1186
00:46:23,599 --> 00:46:28,079
um and otherwise we still keep the same

1187
00:46:26,160 --> 00:46:29,598
things in which is basically just all

1188
00:46:28,079 --> 00:46:30,720
the new public keys that are being put

1189
00:46:29,599 --> 00:46:35,359
into the tree on the direct

1190
00:46:30,720 --> 00:46:35,359
path itself next slide please

1191
00:46:35,520 --> 00:46:42,240
so here's a here's a pictorial

1192
00:46:38,640 --> 00:46:45,920
depiction you know we have a

1193
00:46:42,240 --> 00:46:47,520
small tree um with three three leaves

1194
00:46:45,920 --> 00:46:50,319
and this shows how you would compute

1195
00:46:47,520 --> 00:46:52,640
parent hash if leaf two does a commit

1196
00:46:50,319 --> 00:46:54,800
all right so that means leaf two has

1197
00:46:52,640 --> 00:46:57,839
inserted new keys at node one

1198
00:46:54,800 --> 00:46:59,440
and node 3 on node 2 as well and so now

1199
00:46:57,839 --> 00:47:01,279
it comes time to compute the parent hash

1200
00:46:59,440 --> 00:47:03,920
and the way it works is

1201
00:47:01,280 --> 00:47:05,680
these red arrows indicate which values

1202
00:47:03,920 --> 00:47:07,440
you're putting into the hash

1203
00:47:05,680 --> 00:47:09,598
when you compute the parent hash at a

1204
00:47:07,440 --> 00:47:10,960
node right so you look at node one it's

1205
00:47:09,599 --> 00:47:12,800
got this parent hash

1206
00:47:10,960 --> 00:47:14,560
well just as before you include the

1207
00:47:12,800 --> 00:47:17,119
public key of its parent i.e

1208
00:47:14,560 --> 00:47:18,799
the root and the parent hash value at

1209
00:47:17,119 --> 00:47:20,160
the root which is simply defined to be

1210
00:47:18,800 --> 00:47:21,359
zero by the way for the root as a

1211
00:47:20,160 --> 00:47:24,240
special case

1212
00:47:21,359 --> 00:47:25,200
um but now in addition that's how things

1213
00:47:24,240 --> 00:47:27,359
were up till now

1214
00:47:25,200 --> 00:47:28,399
but now in addition you also include the

1215
00:47:27,359 --> 00:47:32,078
resolution

1216
00:47:28,400 --> 00:47:33,200
at node four all right and that sort of

1217
00:47:32,079 --> 00:47:35,520
binds

1218
00:47:33,200 --> 00:47:36,240
into this parent hash value not just the

1219
00:47:35,520 --> 00:47:39,040
fact that oh

1220
00:47:36,240 --> 00:47:39,839
this is the key uh at node three but

1221
00:47:39,040 --> 00:47:41,359
also

1222
00:47:39,839 --> 00:47:42,880
where did you send the secret key

1223
00:47:41,359 --> 00:47:43,759
corresponding to that key where did

1224
00:47:42,880 --> 00:47:45,280
where did

1225
00:47:43,760 --> 00:47:48,000
the person at least two send it they

1226
00:47:45,280 --> 00:47:49,520
sent it to the resolution of node four

1227
00:47:48,000 --> 00:47:51,440
right so that's the parent hash at node

1228
00:47:49,520 --> 00:47:53,280
one and then the parent hash at node two

1229
00:47:51,440 --> 00:47:54,880
you do the same thing recursively right

1230
00:47:53,280 --> 00:47:56,240
so you include the public key and parent

1231
00:47:54,880 --> 00:47:58,319
hash of node 1

1232
00:47:56,240 --> 00:47:59,919
and the resolution of like who did who

1233
00:47:58,319 --> 00:48:01,359
was that sent to well it was sent to the

1234
00:47:59,920 --> 00:48:05,119
resolution of zero which in particular

1235
00:48:01,359 --> 00:48:05,119
is just the public key of zero itself

1236
00:48:05,440 --> 00:48:10,240
so um that's kind of the intuition of

1237
00:48:09,119 --> 00:48:12,400
how it works

1238
00:48:10,240 --> 00:48:14,720
um but of course there's a little bit of

1239
00:48:12,400 --> 00:48:16,630
a caveat here which is

1240
00:48:14,720 --> 00:48:18,078
um if you see the name of the

1241
00:48:16,630 --> 00:48:20,480
[Music]

1242
00:48:18,079 --> 00:48:21,599
field in the data structure um we called

1243
00:48:20,480 --> 00:48:24,079
it original

1244
00:48:21,599 --> 00:48:24,800
sibling resolution and that's because

1245
00:48:24,079 --> 00:48:27,200
the following

1246
00:48:24,800 --> 00:48:28,880
thing this makes this is all clean and

1247
00:48:27,200 --> 00:48:29,598
simple at the time of a commit but of

1248
00:48:28,880 --> 00:48:31,119
course

1249
00:48:29,599 --> 00:48:33,599
the whole point of these parent hashes

1250
00:48:31,119 --> 00:48:34,480
is that five epochs later when somebody

1251
00:48:33,599 --> 00:48:36,079
joins the group

1252
00:48:34,480 --> 00:48:37,599
gets a welcome message they want to

1253
00:48:36,079 --> 00:48:39,119
verify these parent hashes

1254
00:48:37,599 --> 00:48:40,960
which means they should be recomputing

1255
00:48:39,119 --> 00:48:42,559
the parent hashes

1256
00:48:40,960 --> 00:48:44,160
right so you got to make sure that when

1257
00:48:42,559 --> 00:48:46,240
you recompute the parent hash for a

1258
00:48:44,160 --> 00:48:48,480
given node say node 1

1259
00:48:46,240 --> 00:48:49,759
that you'll end up with the same value

1260
00:48:48,480 --> 00:48:52,240
as the person

1261
00:48:49,760 --> 00:48:53,599
as as did the person at the time who who

1262
00:48:52,240 --> 00:48:56,240
put it into the tree namely

1263
00:48:53,599 --> 00:48:56,800
the person at least two and in the

1264
00:48:56,240 --> 00:48:58,399
meantime

1265
00:48:56,800 --> 00:49:00,000
in these intermittent father blocks

1266
00:48:58,400 --> 00:49:01,920
things can change in the tree

1267
00:49:00,000 --> 00:49:03,520
right there's constantly the tree's

1268
00:49:01,920 --> 00:49:05,119
constantly changing in every epoch

1269
00:49:03,520 --> 00:49:07,599
so we have to make sure that the way we

1270
00:49:05,119 --> 00:49:10,800
define these parent hatch is invariant

1271
00:49:07,599 --> 00:49:14,079
to any change to the tree which will

1272
00:49:10,800 --> 00:49:16,240
preserve the public key at node one

1273
00:49:14,079 --> 00:49:17,760
because the moment the moment the the

1274
00:49:16,240 --> 00:49:19,439
public key at node one changes

1275
00:49:17,760 --> 00:49:20,800
we don't care about recomputing the same

1276
00:49:19,440 --> 00:49:23,119
parrot hash anymore

1277
00:49:20,800 --> 00:49:24,720
so it only has to be this definition of

1278
00:49:23,119 --> 00:49:27,040
parenthesis only has to be invariant to

1279
00:49:24,720 --> 00:49:29,040
changes of the tree that don't affect

1280
00:49:27,040 --> 00:49:30,558
the public key at node one how can it be

1281
00:49:29,040 --> 00:49:31,040
affected well either node one can be

1282
00:49:30,559 --> 00:49:34,559
blanked

1283
00:49:31,040 --> 00:49:34,558
yep questions so

1284
00:49:36,559 --> 00:49:39,680
oh yeah sorry joel um just a quick

1285
00:49:38,960 --> 00:49:42,880
clarification

1286
00:49:39,680 --> 00:49:44,240
uh here i think this is i haven't quite

1287
00:49:42,880 --> 00:49:46,400
verified this

1288
00:49:44,240 --> 00:49:48,240
to convince myself totally but i think

1289
00:49:46,400 --> 00:49:51,200
we're kind of okay here

1290
00:49:48,240 --> 00:49:53,598
because the parrot hashes are all sort

1291
00:49:51,200 --> 00:49:56,799
of downward looking they only

1292
00:49:53,599 --> 00:49:58,240
um incorporate stuff incorporate the

1293
00:49:56,800 --> 00:50:00,319
parent stuff but they only

1294
00:49:58,240 --> 00:50:01,279
are kind of visible lower in the tree so

1295
00:50:00,319 --> 00:50:05,759
here for example

1296
00:50:01,280 --> 00:50:09,839
if um four updated and overwrote nodes

1297
00:50:05,760 --> 00:50:12,800
four and three then

1298
00:50:09,839 --> 00:50:14,480
uh the hashem note and node one would no

1299
00:50:12,800 --> 00:50:16,640
longer verify node three but

1300
00:50:14,480 --> 00:50:18,160
that's already kind of accounted for in

1301
00:50:16,640 --> 00:50:20,078
the validation algorithm

1302
00:50:18,160 --> 00:50:21,520
you would still be able to validate that

1303
00:50:20,079 --> 00:50:23,520
um you know the signature over the

1304
00:50:21,520 --> 00:50:26,319
parenthesis node two

1305
00:50:23,520 --> 00:50:27,839
uh verified the parenthesis node one

1306
00:50:26,319 --> 00:50:30,640
which then would

1307
00:50:27,839 --> 00:50:31,040
verify the both the public key in node

1308
00:50:30,640 --> 00:50:34,000
one

1309
00:50:31,040 --> 00:50:34,800
and the uh resolution in node zero so

1310
00:50:34,000 --> 00:50:36,480
you still

1311
00:50:34,800 --> 00:50:37,839
kind of have that invariant so i

1312
00:50:36,480 --> 00:50:38,480
actually think that this that we're

1313
00:50:37,839 --> 00:50:42,240
pretty safe

1314
00:50:38,480 --> 00:50:42,240
on this consistency count

1315
00:50:44,160 --> 00:50:48,960
over yeah i mean i agree i think we are

1316
00:50:48,240 --> 00:50:51,439
safe

1317
00:50:48,960 --> 00:50:53,440
in the sense that it works out i think

1318
00:50:51,440 --> 00:50:55,520
the one case

1319
00:50:53,440 --> 00:50:57,440
so the most changes you make to the tree

1320
00:50:55,520 --> 00:51:01,759
are either going to end up

1321
00:50:57,440 --> 00:51:03,599
you know um uh blanking

1322
00:51:01,760 --> 00:51:05,359
or or re-ending up with the re-key in

1323
00:51:03,599 --> 00:51:07,760
which case we don't care about

1324
00:51:05,359 --> 00:51:10,000
preserving the parent hash computation

1325
00:51:07,760 --> 00:51:13,119
the only case i think that's interesting

1326
00:51:10,000 --> 00:51:15,839
if you add unmerged leaves right

1327
00:51:13,119 --> 00:51:17,040
so say we were now we we compute the

1328
00:51:15,839 --> 00:51:19,200
parent hash at one

1329
00:51:17,040 --> 00:51:20,800
because two just committed right and now

1330
00:51:19,200 --> 00:51:22,480
the next thing that happens is

1331
00:51:20,800 --> 00:51:25,040
a new guy is added to the new person's

1332
00:51:22,480 --> 00:51:26,880
added to the group as leaf5

1333
00:51:25,040 --> 00:51:29,520
right technically that means now that

1334
00:51:26,880 --> 00:51:31,040
the resolution of node 4 has changed

1335
00:51:29,520 --> 00:51:33,920
because there's a new unmerged leaf that

1336
00:51:31,040 --> 00:51:36,079
gets included in the resolution

1337
00:51:33,920 --> 00:51:37,920
right but it turns out that the same

1338
00:51:36,079 --> 00:51:40,400
unmerged leaf is also going to be added

1339
00:51:37,920 --> 00:51:42,400
as an unmerged leaf at three

1340
00:51:40,400 --> 00:51:44,079
so the more general no definition we

1341
00:51:42,400 --> 00:51:46,000
have a parent hash

1342
00:51:44,079 --> 00:51:48,720
which collapses to the same thing and

1343
00:51:46,000 --> 00:51:50,960
the commit moment but later on

1344
00:51:48,720 --> 00:51:53,200
may be important this generalization is

1345
00:51:50,960 --> 00:51:54,559
what you actually take is the resolution

1346
00:51:53,200 --> 00:51:57,200
of the co-path node

1347
00:51:54,559 --> 00:51:58,559
but then you take out the nodes which

1348
00:51:57,200 --> 00:52:00,078
are unmerged at the parent

1349
00:51:58,559 --> 00:52:01,760
so when you're computing parent hash is

1350
00:52:00,079 --> 00:52:04,000
one you take

1351
00:52:01,760 --> 00:52:07,839
the resolution of four and you remove

1352
00:52:04,000 --> 00:52:07,839
anything that's unmerged at three

1353
00:52:07,920 --> 00:52:10,880
so now if you were to add

1354
00:52:11,040 --> 00:52:15,920
a fifth leaf yes it gets added to the

1355
00:52:14,559 --> 00:52:17,440
resolution of four but it would get

1356
00:52:15,920 --> 00:52:18,960
removed again because it's also an

1357
00:52:17,440 --> 00:52:20,400
unmerged leaf of three so you end up

1358
00:52:18,960 --> 00:52:21,920
with the same with the original

1359
00:52:20,400 --> 00:52:23,839
resolution of four that you had at the

1360
00:52:21,920 --> 00:52:25,760
time before five was added

1361
00:52:23,839 --> 00:52:28,160
so that's the only sort of tricky tricky

1362
00:52:25,760 --> 00:52:29,520
bit and that's that's the way that it's

1363
00:52:28,160 --> 00:52:31,359
actually defined and that's why

1364
00:52:29,520 --> 00:52:32,720
the field is called original sibling

1365
00:52:31,359 --> 00:52:36,000
resolution

1366
00:52:32,720 --> 00:52:39,759
um yeah

1367
00:52:36,000 --> 00:52:41,040
so yeah that's basically the definition

1368
00:52:39,760 --> 00:52:43,440
i don't know is there another slide i

1369
00:52:41,040 --> 00:52:43,440
forgot

1370
00:52:43,680 --> 00:52:47,680
no okay good well then i think if

1371
00:52:46,240 --> 00:52:49,919
there's no questions and i guess that's

1372
00:52:47,680 --> 00:52:49,919
that

1373
00:52:53,200 --> 00:52:56,879
so i think what i'd like to get here is

1374
00:52:55,920 --> 00:52:58,319
uh any

1375
00:52:56,880 --> 00:53:00,319
concerns people have with this general

1376
00:52:58,319 --> 00:53:03,440
approach because

1377
00:53:00,319 --> 00:53:04,319
if folks are okay with this general

1378
00:53:03,440 --> 00:53:06,000
scheme

1379
00:53:04,319 --> 00:53:07,359
um you know don't have any of the

1380
00:53:06,000 --> 00:53:10,480
concerns that we had back in

1381
00:53:07,359 --> 00:53:11,440
in january then joel and i can work out

1382
00:53:10,480 --> 00:53:14,480
the details

1383
00:53:11,440 --> 00:53:15,839
in the pr just want to make sure the

1384
00:53:14,480 --> 00:53:17,839
group is okay with this

1385
00:53:15,839 --> 00:53:20,319
general approach um you know kind of in

1386
00:53:17,839 --> 00:53:20,319
concept

1387
00:53:22,880 --> 00:53:28,000
see raphael and benjamin yeah so

1388
00:53:26,240 --> 00:53:29,520
pretty much anyway i mean the current

1389
00:53:28,000 --> 00:53:31,200
status of the draft is that it's

1390
00:53:29,520 --> 00:53:32,960
insecure right

1391
00:53:31,200 --> 00:53:34,720
and what joel is bringing us is

1392
00:53:32,960 --> 00:53:39,359
immediately stronger anyway

1393
00:53:34,720 --> 00:53:42,000
so i'm completely in favor of

1394
00:53:39,359 --> 00:53:43,759
taking that right now and anyway we have

1395
00:53:42,000 --> 00:53:45,040
the security analysis period so that we

1396
00:53:43,760 --> 00:53:47,200
can validate that

1397
00:53:45,040 --> 00:53:48,160
that's a good fix and things like this

1398
00:53:47,200 --> 00:53:50,640
so

1399
00:53:48,160 --> 00:53:57,839
i don't see any reason to not take it in

1400
00:53:50,640 --> 00:53:57,839
some sense

1401
00:53:59,520 --> 00:54:02,800
rafael did you ever come in here you

1402
00:54:01,040 --> 00:54:03,599
just uh queued up no i was just getting

1403
00:54:02,800 --> 00:54:06,240
ready for the

1404
00:54:03,599 --> 00:54:07,440
next slide the the only comment i have

1405
00:54:06,240 --> 00:54:10,319
is i think that i'm channeling

1406
00:54:07,440 --> 00:54:11,599
um brendan macmillan here is that um we

1407
00:54:10,319 --> 00:54:12,640
didn't make this change or really

1408
00:54:11,599 --> 00:54:14,000
consider this earlier because there

1409
00:54:12,640 --> 00:54:16,480
wasn't an attack and so since

1410
00:54:14,000 --> 00:54:17,680
joel found it and we got a fix i don't

1411
00:54:16,480 --> 00:54:19,119
see a reason why we wouldn't include

1412
00:54:17,680 --> 00:54:21,598
this so basically just

1413
00:54:19,119 --> 00:54:23,440
echoing what benjamin said so let's

1414
00:54:21,599 --> 00:54:26,480
let's make it so

1415
00:54:23,440 --> 00:54:28,400
okay cool so i will work with joel to

1416
00:54:26,480 --> 00:54:32,400
to figure out the the nuances but we'll

1417
00:54:28,400 --> 00:54:35,040
it'll be pretty much the solution

1418
00:54:32,400 --> 00:54:36,960
all right so next uh i want to pass over

1419
00:54:35,040 --> 00:54:39,440
to raphael to talk about

1420
00:54:36,960 --> 00:54:40,960
the external commit mechanism that we

1421
00:54:39,440 --> 00:54:44,160
added in draft 10

1422
00:54:40,960 --> 00:54:45,760
and um one issue that we were resolving

1423
00:54:44,160 --> 00:54:49,118
during last call

1424
00:54:45,760 --> 00:54:53,040
so raphael yeah yeah thanks

1425
00:54:49,119 --> 00:54:56,079
richard for uh driving the slides um

1426
00:54:53,040 --> 00:54:59,520
yeah so this is something that um

1427
00:54:56,079 --> 00:55:02,000
had been there for a while as a problem

1428
00:54:59,520 --> 00:55:03,280
um so i can talk a little bit about the

1429
00:55:02,000 --> 00:55:04,640
motivation here

1430
00:55:03,280 --> 00:55:06,559
we covered that extensively in the

1431
00:55:04,640 --> 00:55:08,078
interim meetings but i think it's good

1432
00:55:06,559 --> 00:55:09,520
to repeat it here

1433
00:55:08,079 --> 00:55:11,920
so essentially in the architecture

1434
00:55:09,520 --> 00:55:14,559
document we say that at no point in time

1435
00:55:11,920 --> 00:55:15,440
two devices of the same group ever have

1436
00:55:14,559 --> 00:55:17,520
to be

1437
00:55:15,440 --> 00:55:19,119
online at the same time and technically

1438
00:55:17,520 --> 00:55:21,759
that's true

1439
00:55:19,119 --> 00:55:23,359
that sensor protocol is asynchronous but

1440
00:55:21,760 --> 00:55:26,720
when somebody wants to join

1441
00:55:23,359 --> 00:55:29,200
um the the problem was that

1442
00:55:26,720 --> 00:55:31,118
one of the existing members had to send

1443
00:55:29,200 --> 00:55:33,359
a welcome message

1444
00:55:31,119 --> 00:55:35,599
to the new member in order for the new

1445
00:55:33,359 --> 00:55:37,680
member to be able to join the group

1446
00:55:35,599 --> 00:55:38,880
and intuitively that seems correct

1447
00:55:37,680 --> 00:55:40,879
because you want the

1448
00:55:38,880 --> 00:55:42,079
existing members to guard who gets

1449
00:55:40,880 --> 00:55:45,119
access to the group

1450
00:55:42,079 --> 00:55:47,599
um but it turns out that

1451
00:55:45,119 --> 00:55:49,839
you don't have to rely on this welcome

1452
00:55:47,599 --> 00:55:54,000
mechanism necessarily

1453
00:55:49,839 --> 00:55:57,119
in order to keep the same logic

1454
00:55:54,000 --> 00:55:58,480
so there are cases where it would be

1455
00:55:57,119 --> 00:56:01,599
very beneficial

1456
00:55:58,480 --> 00:56:02,160
if members can just join without having

1457
00:56:01,599 --> 00:56:03,760
to

1458
00:56:02,160 --> 00:56:05,200
wait for an existing member to come

1459
00:56:03,760 --> 00:56:09,440
online

1460
00:56:05,200 --> 00:56:11,759
and issue a welcome message for example

1461
00:56:09,440 --> 00:56:13,119
when you run mls in a multi-device

1462
00:56:11,760 --> 00:56:16,079
context where

1463
00:56:13,119 --> 00:56:19,280
you have a concept of users that can

1464
00:56:16,079 --> 00:56:19,280
each have several devices

1465
00:56:19,440 --> 00:56:25,200
and a user wants to add a device

1466
00:56:22,480 --> 00:56:26,400
and in that scenario up until now though

1467
00:56:25,200 --> 00:56:28,720
you would have to rely on one of the

1468
00:56:26,400 --> 00:56:30,960
devices of that user or

1469
00:56:28,720 --> 00:56:32,399
other users to be online in order to

1470
00:56:30,960 --> 00:56:33,359
grant access to the group to the new

1471
00:56:32,400 --> 00:56:36,559
device

1472
00:56:33,359 --> 00:56:40,640
but realistically is not how a lot of

1473
00:56:36,559 --> 00:56:43,200
messaging apps work for example um

1474
00:56:40,640 --> 00:56:44,480
and so maybe just a quick overview the

1475
00:56:43,200 --> 00:56:46,879
the way

1476
00:56:44,480 --> 00:56:47,920
we decide on who gets to be in a group

1477
00:56:46,880 --> 00:56:50,319
is um

1478
00:56:47,920 --> 00:56:51,119
actually decided by the authentication

1479
00:56:50,319 --> 00:56:54,319
service

1480
00:56:51,119 --> 00:56:55,839
in the sense that um it's this

1481
00:56:54,319 --> 00:56:57,520
abstract layer there's other scope for

1482
00:56:55,839 --> 00:57:01,040
the the protocol

1483
00:56:57,520 --> 00:57:03,119
and group members have to

1484
00:57:01,040 --> 00:57:05,520
agree on a policy on who can join and

1485
00:57:03,119 --> 00:57:07,839
who cannot but if they all agree

1486
00:57:05,520 --> 00:57:09,680
all we need is a mechanism for the new

1487
00:57:07,839 --> 00:57:10,960
joiner to actually be able to

1488
00:57:09,680 --> 00:57:13,839
get into the group as quickly as

1489
00:57:10,960 --> 00:57:15,119
possible and in this particular example

1490
00:57:13,839 --> 00:57:16,640
that i mentioned where

1491
00:57:15,119 --> 00:57:18,720
in a motor device context you just want

1492
00:57:16,640 --> 00:57:20,879
to add another device if on the

1493
00:57:18,720 --> 00:57:22,558
authentication layer

1494
00:57:20,880 --> 00:57:23,920
you can clearly prove that that device

1495
00:57:22,559 --> 00:57:25,599
belongs to the user and it's a

1496
00:57:23,920 --> 00:57:26,240
legitimate device and there's actually

1497
00:57:25,599 --> 00:57:30,160
no reason

1498
00:57:26,240 --> 00:57:30,160
why that device couldn't join right away

1499
00:57:30,319 --> 00:57:33,359
so we never had a good solution for that

1500
00:57:32,079 --> 00:57:37,440
and then a while back

1501
00:57:33,359 --> 00:57:39,598
we looked at how commits worked

1502
00:57:37,440 --> 00:57:40,720
up until now and there was a chance to

1503
00:57:39,599 --> 00:57:42,640
actually

1504
00:57:40,720 --> 00:57:44,879
modify it a little bit in the sense that

1505
00:57:42,640 --> 00:57:47,200
um this could be used by external dramas

1506
00:57:44,880 --> 00:57:47,200
as well

1507
00:57:48,720 --> 00:57:54,720
so the the way the the policy is being

1508
00:57:52,880 --> 00:57:58,000
applied is still the same

1509
00:57:54,720 --> 00:57:59,919
so before external commits existing

1510
00:57:58,000 --> 00:58:03,200
members could always reject

1511
00:57:59,920 --> 00:58:05,839
an ad proposal or ads that

1512
00:58:03,200 --> 00:58:07,359
they think were actually not legitimate

1513
00:58:05,839 --> 00:58:08,480
and this remains true for external

1514
00:58:07,359 --> 00:58:10,000
commits and we're going to look at the

1515
00:58:08,480 --> 00:58:11,680
details in a bit

1516
00:58:10,000 --> 00:58:14,000
i think you can go to the next slide

1517
00:58:11,680 --> 00:58:14,000
richard

1518
00:58:17,599 --> 00:58:23,680
so how how does it work in practice

1519
00:58:21,280 --> 00:58:25,359
what we need in order to issue an

1520
00:58:23,680 --> 00:58:28,558
external commit is

1521
00:58:25,359 --> 00:58:30,400
that the new joiner needs

1522
00:58:28,559 --> 00:58:33,359
some information on the current group

1523
00:58:30,400 --> 00:58:36,160
state and all of that is general

1524
00:58:33,359 --> 00:58:38,640
generally speaking public information

1525
00:58:36,160 --> 00:58:40,319
there are no secrets needed

1526
00:58:38,640 --> 00:58:42,879
whether this should be available or not

1527
00:58:40,319 --> 00:58:43,920
is for the the specific application to

1528
00:58:42,880 --> 00:58:46,079
decide

1529
00:58:43,920 --> 00:58:47,119
but we have the structure down on the

1530
00:58:46,079 --> 00:58:49,680
left

1531
00:58:47,119 --> 00:58:51,280
code public group states where we have

1532
00:58:49,680 --> 00:58:52,000
some of the parameters like the cipher

1533
00:58:51,280 --> 00:58:53,839
suite

1534
00:58:52,000 --> 00:58:57,040
it's being used for the group obviously

1535
00:58:53,839 --> 00:59:00,319
the group id and the epoch we're in

1536
00:58:57,040 --> 00:59:02,000
we have a tree hash over the public tree

1537
00:59:00,319 --> 00:59:04,000
and there we can reuse the same

1538
00:59:02,000 --> 00:59:06,880
mechanism we have for welcome messages

1539
00:59:04,000 --> 00:59:08,480
now where we can use an extension if we

1540
00:59:06,880 --> 00:59:10,720
want to

1541
00:59:08,480 --> 00:59:13,680
have the whole tree in there and there's

1542
00:59:10,720 --> 00:59:17,359
the interim transcript hash

1543
00:59:13,680 --> 00:59:20,480
the extensions itself for our group

1544
00:59:17,359 --> 00:59:22,400
so all of that is very similar

1545
00:59:20,480 --> 00:59:24,480
to what you have in the group info that

1546
00:59:22,400 --> 00:59:27,599
is part of the welcome message

1547
00:59:24,480 --> 00:59:27,599
there's almost no difference

1548
00:59:27,839 --> 00:59:33,680
and then one thing we added was an hpk

1549
00:59:31,119 --> 00:59:36,880
public key

1550
00:59:33,680 --> 00:59:40,240
that is essentially derived

1551
00:59:36,880 --> 00:59:42,240
from the current key schedule so this is

1552
00:59:40,240 --> 00:59:44,720
a public key whose secret

1553
00:59:42,240 --> 00:59:46,000
key is known to existing group members

1554
00:59:44,720 --> 00:59:50,240
and new journalist can use

1555
00:59:46,000 --> 00:59:51,920
that to come something to that key so

1556
00:59:50,240 --> 00:59:53,279
in the first iteration we didn't have

1557
00:59:51,920 --> 00:59:56,400
that mechanism and

1558
00:59:53,280 --> 00:59:57,920
um there essentially an external member

1559
00:59:56,400 --> 01:00:00,240
would just send

1560
00:59:57,920 --> 01:00:02,400
a commit secret like in a regular commit

1561
01:00:00,240 --> 01:00:05,598
to all existing members

1562
01:00:02,400 --> 01:00:06,960
um so that essentially

1563
01:00:05,599 --> 01:00:09,920
they could handle the shared secret

1564
01:00:06,960 --> 01:00:13,040
there um now

1565
01:00:09,920 --> 01:00:14,559
in the second iteration uh i think

1566
01:00:13,040 --> 01:00:17,839
richard proposed that

1567
01:00:14,559 --> 01:00:21,119
we have this external public key

1568
01:00:17,839 --> 01:00:25,599
um and then the the new joiner can also

1569
01:00:21,119 --> 01:00:27,040
um send an init secret to that key so

1570
01:00:25,599 --> 01:00:28,720
this is strictly more secure in the

1571
01:00:27,040 --> 01:00:31,920
sense that

1572
01:00:28,720 --> 01:00:35,200
before an attacker would only

1573
01:00:31,920 --> 01:00:38,079
have to have one secret key

1574
01:00:35,200 --> 01:00:39,118
in one of the intermediate nodes of the

1575
01:00:38,079 --> 01:00:42,000
tree

1576
01:00:39,119 --> 01:00:43,280
one of the leaf nodes now the attacker

1577
01:00:42,000 --> 01:00:44,480
also needs to know the actual group

1578
01:00:43,280 --> 01:00:46,960
secret

1579
01:00:44,480 --> 01:00:50,000
in order to break in so this simply

1580
01:00:46,960 --> 01:00:53,760
raises the bar on the security side here

1581
01:00:50,000 --> 01:00:55,359
so effectively what happens normally um

1582
01:00:53,760 --> 01:00:57,119
there is this in its secret that is the

1583
01:00:55,359 --> 01:00:58,960
last output of the key schedule in every

1584
01:00:57,119 --> 01:01:00,240
epoch and that gets reused in the next

1585
01:00:58,960 --> 01:01:03,440
epoch

1586
01:01:00,240 --> 01:01:05,200
as a starting point for the key schedule

1587
01:01:03,440 --> 01:01:06,640
and so this init secret obviously is not

1588
01:01:05,200 --> 01:01:09,118
known to the new joiner

1589
01:01:06,640 --> 01:01:10,319
so instead the new joiner generates an

1590
01:01:09,119 --> 01:01:14,400
image secret and

1591
01:01:10,319 --> 01:01:14,400
cans it to this external

1592
01:01:14,480 --> 01:01:21,280
public key and that way existing members

1593
01:01:19,280 --> 01:01:24,000
will receive it and can use it to

1594
01:01:21,280 --> 01:01:26,640
calculate the

1595
01:01:24,000 --> 01:01:27,280
secrets in the next epoch and in that

1596
01:01:26,640 --> 01:01:30,400
sense

1597
01:01:27,280 --> 01:01:33,040
um aside from this mechanism where

1598
01:01:30,400 --> 01:01:34,799
this external init secret is shared

1599
01:01:33,040 --> 01:01:35,920
between the new genre and existing

1600
01:01:34,799 --> 01:01:37,759
members

1601
01:01:35,920 --> 01:01:42,000
the rest of the logic is pretty similar

1602
01:01:37,760 --> 01:01:45,440
to how we currently do commits

1603
01:01:42,000 --> 01:01:48,480
and obviously here we reuse hpk like

1604
01:01:45,440 --> 01:01:48,480
we do everywhere else

1605
01:01:49,040 --> 01:01:56,000
um yeah we can go to the next slide

1606
01:01:53,440 --> 01:01:58,079
so there's one weakness that we quickly

1607
01:01:56,000 --> 01:02:01,760
discovered there

1608
01:01:58,079 --> 01:02:06,000
with that external public key so this

1609
01:02:01,760 --> 01:02:07,920
initially was not authenticated at all

1610
01:02:06,000 --> 01:02:09,440
which is not great because that means

1611
01:02:07,920 --> 01:02:11,440
that the delivery service can actually

1612
01:02:09,440 --> 01:02:14,319
pick that key

1613
01:02:11,440 --> 01:02:16,079
it's not entirely clear what an attacker

1614
01:02:14,319 --> 01:02:18,160
can do in that situation

1615
01:02:16,079 --> 01:02:21,839
but at the very least the new genre

1616
01:02:18,160 --> 01:02:21,839
would be tricked to can something

1617
01:02:21,920 --> 01:02:25,599
you know to a party that is actually not

1618
01:02:23,760 --> 01:02:29,200
an existing member

1619
01:02:25,599 --> 01:02:32,319
so this is not good so

1620
01:02:29,200 --> 01:02:32,319
if you go to the next slide

1621
01:02:33,760 --> 01:02:36,960
there is also an obvious solution to

1622
01:02:35,200 --> 01:02:40,000
that um

1623
01:02:36,960 --> 01:02:41,280
which is not on master currently

1624
01:02:40,000 --> 01:02:42,400
we're still debating on some of the

1625
01:02:41,280 --> 01:02:43,839
details but it looks pretty

1626
01:02:42,400 --> 01:02:46,640
straightforward at this point

1627
01:02:43,839 --> 01:02:48,160
um so all we need here is to have a

1628
01:02:46,640 --> 01:02:50,720
signature over the whole

1629
01:02:48,160 --> 01:02:52,160
public group state that includes the

1630
01:02:50,720 --> 01:02:55,118
external public key

1631
01:02:52,160 --> 01:02:55,920
there was a bit of a debate on whether

1632
01:02:55,119 --> 01:02:59,280
we should sign

1633
01:02:55,920 --> 01:03:00,960
all of the fields in there some of them

1634
01:02:59,280 --> 01:03:04,640
we don't have a good reason to sign them

1635
01:03:00,960 --> 01:03:06,960
but also only be cautious here so

1636
01:03:04,640 --> 01:03:07,839
currently what we have in the pr i think

1637
01:03:06,960 --> 01:03:10,960
433

1638
01:03:07,839 --> 01:03:13,359
is that all the fews are being signed

1639
01:03:10,960 --> 01:03:15,359
and that means that the delivery service

1640
01:03:13,359 --> 01:03:18,160
cannot just simply swap out the external

1641
01:03:15,359 --> 01:03:20,558
public key here

1642
01:03:18,160 --> 01:03:22,720
and so we we have a signature here and

1643
01:03:20,559 --> 01:03:26,000
at the same time we also

1644
01:03:22,720 --> 01:03:28,839
have the um the parent hash

1645
01:03:26,000 --> 01:03:30,480
which is signed what i just explained

1646
01:03:28,839 --> 01:03:34,160
earlier

1647
01:03:30,480 --> 01:03:36,480
and these two signatures should be from

1648
01:03:34,160 --> 01:03:39,038
the same member so the the last member

1649
01:03:36,480 --> 01:03:42,400
to commit

1650
01:03:39,039 --> 01:03:44,240
will calculate the parent hash will

1651
01:03:42,400 --> 01:03:46,720
update its own key package

1652
01:03:44,240 --> 01:03:48,240
include the parent hash as an extension

1653
01:03:46,720 --> 01:03:50,078
sign the whole thing

1654
01:03:48,240 --> 01:03:52,558
and then in addition to that also

1655
01:03:50,079 --> 01:03:53,440
produce this public group state and sign

1656
01:03:52,559 --> 01:03:55,599
that

1657
01:03:53,440 --> 01:03:57,280
so the the new member has to verify that

1658
01:03:55,599 --> 01:03:59,920
both have been signed

1659
01:03:57,280 --> 01:04:02,160
by the same member and that way this

1660
01:03:59,920 --> 01:04:05,119
public group state can be tied

1661
01:04:02,160 --> 01:04:05,118
to the last commit

1662
01:04:06,559 --> 01:04:09,920
if you can go to the next slide please

1663
01:04:11,280 --> 01:04:14,400
so there are a few other security

1664
01:04:12,640 --> 01:04:16,799
considerations um

1665
01:04:14,400 --> 01:04:18,160
so what changes here is that as i

1666
01:04:16,799 --> 01:04:20,079
mentioned earlier

1667
01:04:18,160 --> 01:04:21,279
uh the key schedule as such is

1668
01:04:20,079 --> 01:04:22,960
discontinued

1669
01:04:21,280 --> 01:04:24,640
because we don't carry over the init

1670
01:04:22,960 --> 01:04:27,039
secret um

1671
01:04:24,640 --> 01:04:29,359
from one epic to another instead we take

1672
01:04:27,039 --> 01:04:31,599
an inning secret that comes from

1673
01:04:29,359 --> 01:04:32,880
uh the new member so we we invert the

1674
01:04:31,599 --> 01:04:35,119
logic here

1675
01:04:32,880 --> 01:04:36,079
in the sense that previously we would

1676
01:04:35,119 --> 01:04:39,200
send

1677
01:04:36,079 --> 01:04:41,760
a secret to new members as part of the

1678
01:04:39,200 --> 01:04:43,919
welcome message

1679
01:04:41,760 --> 01:04:46,799
inviting them to the group in that sense

1680
01:04:43,920 --> 01:04:48,400
and here's a new member actually

1681
01:04:46,799 --> 01:04:51,280
who's sending the unit secret to the

1682
01:04:48,400 --> 01:04:54,000
group so one obvious downside of that

1683
01:04:51,280 --> 01:04:57,280
is that the accumulated entropy in the

1684
01:04:54,000 --> 01:04:59,280
group is lost at that point so

1685
01:04:57,280 --> 01:05:01,440
obviously we want random number

1686
01:04:59,280 --> 01:05:04,640
generators to be as good as possible

1687
01:05:01,440 --> 01:05:06,880
but in addition to that we since we keep

1688
01:05:04,640 --> 01:05:09,520
on rehashing things between apex

1689
01:05:06,880 --> 01:05:11,599
we also accumulate some more entropy

1690
01:05:09,520 --> 01:05:13,680
which is a good thing so this

1691
01:05:11,599 --> 01:05:15,280
uh takes a hit in that particular

1692
01:05:13,680 --> 01:05:18,720
instance

1693
01:05:15,280 --> 01:05:21,039
so we we didn't see any uh obvious

1694
01:05:18,720 --> 01:05:22,879
attacks so far with that

1695
01:05:21,039 --> 01:05:26,400
but it's also pretty clear that we have

1696
01:05:22,880 --> 01:05:28,319
slightly different security guarantees

1697
01:05:26,400 --> 01:05:30,319
benjamin did you have a comment on that

1698
01:05:28,319 --> 01:05:31,839
yeah i was wondering what's happening

1699
01:05:30,319 --> 01:05:33,759
with the transcript dash in destiny in

1700
01:05:31,839 --> 01:05:34,839
that scenario is it isn't isn't it

1701
01:05:33,760 --> 01:05:38,799
actually ashton

1702
01:05:34,839 --> 01:05:38,799
somewhere in your design

1703
01:05:39,039 --> 01:05:45,440
um i think the transcript hash is uh

1704
01:05:42,240 --> 01:05:47,279
hashed in but it's public yeah

1705
01:05:45,440 --> 01:05:51,839
the transcript hash is handled in

1706
01:05:47,280 --> 01:05:51,839
exactly the same way as a normal commit

1707
01:05:53,440 --> 01:05:56,960
so i actually i'm not sure i agree with

1708
01:05:56,559 --> 01:06:00,480
the

1709
01:05:56,960 --> 01:06:04,960
first two points here with the

1710
01:06:00,480 --> 01:06:07,119
hpk ebay scheme the

1711
01:06:04,960 --> 01:06:09,119
keys the information in the key schedule

1712
01:06:07,119 --> 01:06:12,160
and the entropy from the

1713
01:06:09,119 --> 01:06:14,079
prior group carries forward via the

1714
01:06:12,160 --> 01:06:16,078
external key pair right since those are

1715
01:06:14,079 --> 01:06:18,000
derived off the

1716
01:06:16,079 --> 01:06:19,280
epoch secret which has all of the

1717
01:06:18,000 --> 01:06:22,799
entropy that the group has

1718
01:06:19,280 --> 01:06:26,160
has accumulated so far um the only

1719
01:06:22,799 --> 01:06:28,079
um difference is that the that entropy

1720
01:06:26,160 --> 01:06:30,319
you know the the new in its secret

1721
01:06:28,079 --> 01:06:33,839
that's derived by hpke

1722
01:06:30,319 --> 01:06:34,319
is also accessible to uh someone who

1723
01:06:33,839 --> 01:06:37,440
holds

1724
01:06:34,319 --> 01:06:41,279
the um you know the new joiners uh

1725
01:06:37,440 --> 01:06:43,599
asymmetry key pair um so there is

1726
01:06:41,280 --> 01:06:45,520
i guess some dilution that way but um

1727
01:06:43,599 --> 01:06:47,599
you're still carrying forward

1728
01:06:45,520 --> 01:06:48,880
um the information that was in the group

1729
01:06:47,599 --> 01:06:51,280
already

1730
01:06:48,880 --> 01:06:52,559
so i i may be a little less worried

1731
01:06:51,280 --> 01:06:54,720
about these first two bullets than you

1732
01:06:52,559 --> 01:06:57,440
are

1733
01:06:54,720 --> 01:06:58,959
okay yeah i um maybe i'm being too

1734
01:06:57,440 --> 01:07:00,960
pessimistic here

1735
01:06:58,960 --> 01:07:02,559
but uh yeah this is certainly something

1736
01:07:00,960 --> 01:07:04,799
for the analysis analysis

1737
01:07:02,559 --> 01:07:04,799
okay

1738
01:07:05,839 --> 01:07:09,680
i mean the status quo is that this does

1739
01:07:08,000 --> 01:07:11,280
not validate any of the

1740
01:07:09,680 --> 01:07:13,759
security guarantees we want to have in

1741
01:07:11,280 --> 01:07:15,280
general like you still have authenticity

1742
01:07:13,760 --> 01:07:18,960
confidentiality

1743
01:07:15,280 --> 01:07:24,079
fs and pcs obviously so it's going to be

1744
01:07:18,960 --> 01:07:24,079
a matter of details hopefully

1745
01:07:24,160 --> 01:07:29,598
and so yeah since this requires you know

1746
01:07:28,160 --> 01:07:30,960
certain information to be public like

1747
01:07:29,599 --> 01:07:31,599
the whole public group state needs to be

1748
01:07:30,960 --> 01:07:35,119
published

1749
01:07:31,599 --> 01:07:37,200
uh with every epic change this mechanism

1750
01:07:35,119 --> 01:07:40,400
is also entirely optional

1751
01:07:37,200 --> 01:07:42,879
so members can just not publish that

1752
01:07:40,400 --> 01:07:44,079
and therefore external commits become

1753
01:07:42,880 --> 01:07:45,920
impossible because you don't have that

1754
01:07:44,079 --> 01:07:48,319
public information

1755
01:07:45,920 --> 01:07:49,920
and even if they do publish it existing

1756
01:07:48,319 --> 01:07:52,079
members can also simply reject these

1757
01:07:49,920 --> 01:07:54,480
external commits

1758
01:07:52,079 --> 01:07:56,720
which is something so again this is

1759
01:07:54,480 --> 01:07:57,520
governed by the authentication service

1760
01:07:56,720 --> 01:07:59,759
so

1761
01:07:57,520 --> 01:08:01,599
whether a member is allowed to enter a

1762
01:07:59,760 --> 01:08:04,000
group via an external commit

1763
01:08:01,599 --> 01:08:04,640
is for existing members to decide if

1764
01:08:04,000 --> 01:08:06,079
they

1765
01:08:04,640 --> 01:08:07,279
according to their policy they come to

1766
01:08:06,079 --> 01:08:07,839
the conclusion that the new member

1767
01:08:07,280 --> 01:08:10,160
should not

1768
01:08:07,839 --> 01:08:11,839
enter the group they simply completely

1769
01:08:10,160 --> 01:08:16,000
reject that external commits

1770
01:08:11,839 --> 01:08:18,640
and merely continue as before

1771
01:08:16,000 --> 01:08:24,319
so we haven't changed the the access

1772
01:08:18,640 --> 01:08:29,359
control as such

1773
01:08:24,319 --> 01:08:29,359
so i think that concludes that part

1774
01:08:29,439 --> 01:08:32,399
are there any questions

1775
01:08:35,198 --> 01:08:38,799
so this is richard um i i am totally on

1776
01:08:37,920 --> 01:08:41,199
board with this i think

1777
01:08:38,799 --> 01:08:42,880
you know so the the change proposal here

1778
01:08:41,198 --> 01:08:45,198
is to add the signing i think that

1779
01:08:42,880 --> 01:08:46,960
makes sense we already merged the uh

1780
01:08:45,198 --> 01:08:48,318
external commit stuff which i think is

1781
01:08:46,960 --> 01:08:51,279
also a good idea

1782
01:08:48,319 --> 01:08:53,199
um so i think the signing is a good idea

1783
01:08:51,279 --> 01:08:53,920
i think rafael you mentioned one thing

1784
01:08:53,198 --> 01:08:56,158
that i

1785
01:08:53,920 --> 01:08:58,399
don't think i quite agree with um you

1786
01:08:56,158 --> 01:09:00,799
mentioned that the

1787
01:08:58,399 --> 01:09:04,158
signer of the public group state should

1788
01:09:00,799 --> 01:09:06,080
be the same as the last committer

1789
01:09:04,158 --> 01:09:07,920
well i agree that's the obvious

1790
01:09:06,080 --> 01:09:09,519
implementation strategy like

1791
01:09:07,920 --> 01:09:11,440
you know if you're implementing this in

1792
01:09:09,520 --> 01:09:11,920
a whole system you should probably just

1793
01:09:11,439 --> 01:09:13,519
have

1794
01:09:11,920 --> 01:09:15,359
the you know whenever someone sends a

1795
01:09:13,520 --> 01:09:16,560
commit they also send an updated public

1796
01:09:15,359 --> 01:09:19,679
group state

1797
01:09:16,560 --> 01:09:21,120
um but i don't think that necessarily

1798
01:09:19,679 --> 01:09:21,600
needs to be the case you could i think

1799
01:09:21,120 --> 01:09:24,960
you could

1800
01:09:21,600 --> 01:09:26,560
allow for other any any group member to

1801
01:09:24,960 --> 01:09:30,640
sign

1802
01:09:26,560 --> 01:09:30,640
even if they're not the latest committer

1803
01:09:32,560 --> 01:09:36,000
yeah possibly yes the question is how

1804
01:09:34,560 --> 01:09:37,839
would that work in practice because as

1805
01:09:36,000 --> 01:09:39,679
you say

1806
01:09:37,839 --> 01:09:41,519
the committer is the one being active

1807
01:09:39,679 --> 01:09:43,040
when you change epochs

1808
01:09:41,520 --> 01:09:45,279
so this would require another group

1809
01:09:43,040 --> 01:09:46,719
member to be active at the same time

1810
01:09:45,279 --> 01:09:50,239
because obviously these things

1811
01:09:46,719 --> 01:09:51,359
need to be synced um at the very least

1812
01:09:50,238 --> 01:09:52,559
you know the epoch number is in the

1813
01:09:51,359 --> 01:09:54,800
public group state so

1814
01:09:52,560 --> 01:09:56,560
um this gets stale immediately after you

1815
01:09:54,800 --> 01:09:58,560
change effects

1816
01:09:56,560 --> 01:10:00,320
um i i don't know i'd have to think

1817
01:09:58,560 --> 01:10:02,560
about it i don't have any

1818
01:10:00,320 --> 01:10:03,920
obvious arguments against it other than

1819
01:10:02,560 --> 01:10:05,760
i think it's

1820
01:10:03,920 --> 01:10:07,600
not something that would be realistic in

1821
01:10:05,760 --> 01:10:10,880
a number of cases but

1822
01:10:07,600 --> 01:10:12,320
if we can relax the uh

1823
01:10:10,880 --> 01:10:14,960
what we want to achieve here then i'm

1824
01:10:12,320 --> 01:10:14,960
sure why not

1825
01:10:19,440 --> 01:10:22,879
jonathan i see you're making some

1826
01:10:20,719 --> 01:10:26,080
comments in the in the chat did you

1827
01:10:22,880 --> 01:10:26,080
want to bring anything forward here

1828
01:10:27,600 --> 01:10:32,880
jonathan horland i i was just uh

1829
01:10:31,360 --> 01:10:36,480
trying to understand what the scheme

1830
01:10:32,880 --> 01:10:36,480
means what it's supposed to be doing

1831
01:10:37,199 --> 01:10:41,759
so you you're asking if the the new

1832
01:10:40,159 --> 01:10:43,360
genre can evict people from the group

1833
01:10:41,760 --> 01:10:44,960
before anyone processes the external

1834
01:10:43,360 --> 01:10:47,040
commit

1835
01:10:44,960 --> 01:10:50,159
so the external commit works exactly

1836
01:10:47,040 --> 01:10:53,120
like current commits so

1837
01:10:50,159 --> 01:10:53,120
it can reference

1838
01:10:53,920 --> 01:10:58,880
actually any proposal that's out there

1839
01:10:56,960 --> 01:11:00,880
or it can create new proposals

1840
01:10:58,880 --> 01:11:01,920
um it could also have the the proposals

1841
01:11:00,880 --> 01:11:04,880
by value

1842
01:11:01,920 --> 01:11:06,080
as uh richard explained before so uh a

1843
01:11:04,880 --> 01:11:10,320
new joiner

1844
01:11:06,080 --> 01:11:13,840
could actually evict people

1845
01:11:10,320 --> 01:11:13,840
as part of that commit

1846
01:11:14,480 --> 01:11:21,440
um however we would have to see

1847
01:11:18,560 --> 01:11:22,480
because the evicted members at the very

1848
01:11:21,440 --> 01:11:25,599
least they know

1849
01:11:22,480 --> 01:11:27,759
the the secret

1850
01:11:25,600 --> 01:11:28,880
to the the public key the group public

1851
01:11:27,760 --> 01:11:32,159
key

1852
01:11:28,880 --> 01:11:33,920
um so this is not something you can take

1853
01:11:32,159 --> 01:11:34,960
back because this is calculated ahead of

1854
01:11:33,920 --> 01:11:37,440
time

1855
01:11:34,960 --> 01:11:38,159
we would have to see if the eviction is

1856
01:11:37,440 --> 01:11:40,400
as good

1857
01:11:38,159 --> 01:11:42,719
as it should be it's an interesting

1858
01:11:40,400 --> 01:11:42,719
question

1859
01:11:44,480 --> 01:11:46,879
but yeah i think that's something that

1860
01:11:45,520 --> 01:11:48,400
might not be immediately obvious to

1861
01:11:46,880 --> 01:11:52,239
folks about this external commit

1862
01:11:48,400 --> 01:11:54,320
um it is actually a fairly powerful

1863
01:11:52,239 --> 01:11:56,080
mechanism

1864
01:11:54,320 --> 01:11:58,000
and that you can include the you know

1865
01:11:56,080 --> 01:11:59,600
the person that's adding cannot just

1866
01:11:58,000 --> 01:12:01,120
you know they need to add themselves

1867
01:11:59,600 --> 01:12:04,480
that's

1868
01:12:01,120 --> 01:12:05,920
required for the commit to be valid but

1869
01:12:04,480 --> 01:12:07,599
in addition to adding themselves they

1870
01:12:05,920 --> 01:12:08,000
can do any other group operations so

1871
01:12:07,600 --> 01:12:10,320
they can

1872
01:12:08,000 --> 01:12:11,920
add other people they can remove people

1873
01:12:10,320 --> 01:12:14,880
from the group

1874
01:12:11,920 --> 01:12:15,440
they can add psks they can request the

1875
01:12:14,880 --> 01:12:18,640
groupie

1876
01:12:15,440 --> 01:12:18,639
reinitialized it even

1877
01:12:19,040 --> 01:12:24,800
so there's a full power commit

1878
01:12:22,800 --> 01:12:26,880
now personally i think that's a feature

1879
01:12:24,800 --> 01:12:28,000
and not a bug i think there's some cool

1880
01:12:26,880 --> 01:12:30,320
stuff you could do with this

1881
01:12:28,000 --> 01:12:31,120
on the one i put in the chat is that you

1882
01:12:30,320 --> 01:12:32,639
could you know

1883
01:12:31,120 --> 01:12:35,760
one of the concerns that had been raised

1884
01:12:32,640 --> 01:12:37,920
like what if someone loses their

1885
01:12:35,760 --> 01:12:39,840
loses their state need to resync well

1886
01:12:37,920 --> 01:12:41,760
this gives you a resync operation based

1887
01:12:39,840 --> 01:12:45,040
on the public group state because

1888
01:12:41,760 --> 01:12:46,960
you can now make an external commit that

1889
01:12:45,040 --> 01:12:48,159
adds your new version of you as you

1890
01:12:46,960 --> 01:12:50,320
re-adds you to the group

1891
01:12:48,159 --> 01:12:51,599
and removes uh your old appearance at

1892
01:12:50,320 --> 01:12:53,599
the same time

1893
01:12:51,600 --> 01:12:55,360
um so you get a resync operation for

1894
01:12:53,600 --> 01:12:57,440
free

1895
01:12:55,360 --> 01:12:58,639
by virtue of adding this external thing

1896
01:12:57,440 --> 01:13:00,320
um

1897
01:12:58,640 --> 01:13:01,920
so i personally i think this is a

1898
01:13:00,320 --> 01:13:03,199
feature not a bug but if other people

1899
01:13:01,920 --> 01:13:05,679
had concerns about the

1900
01:13:03,199 --> 01:13:06,559
the power of this uh feature i think

1901
01:13:05,679 --> 01:13:08,000
that

1902
01:13:06,560 --> 01:13:10,080
yeah there may be some things looking

1903
01:13:08,000 --> 01:13:12,800
there that i'm not thinking of

1904
01:13:10,080 --> 01:13:13,760
i think the uh it's it's great to be

1905
01:13:12,800 --> 01:13:15,120
powerful but this

1906
01:13:13,760 --> 01:13:17,280
just uh just means we're gonna have more

1907
01:13:15,120 --> 01:13:19,360
security review of it to see what

1908
01:13:17,280 --> 01:13:20,400
what the whether it's the power for good

1909
01:13:19,360 --> 01:13:22,159
or the power for bad

1910
01:13:20,400 --> 01:13:24,960
so i think that it's good that we've got

1911
01:13:22,159 --> 01:13:26,239
a security review time built in

1912
01:13:24,960 --> 01:13:27,440
so i mean it sounds like we should go

1913
01:13:26,239 --> 01:13:28,799
ahead and merge we should go ahead and

1914
01:13:27,440 --> 01:13:32,559
merge this stuff and then

1915
01:13:28,800 --> 01:13:33,920
basically see what happens

1916
01:13:32,560 --> 01:13:36,560
and now that i had a minute to think

1917
01:13:33,920 --> 01:13:40,239
about uh jonathan's question so i think

1918
01:13:36,560 --> 01:13:42,719
viking people still works because um

1919
01:13:40,239 --> 01:13:43,919
you change a tree so if you have a

1920
01:13:42,719 --> 01:13:45,520
remove proposal

1921
01:13:43,920 --> 01:13:48,239
you change the tree first and then the

1922
01:13:45,520 --> 01:13:48,800
new member would not send the commit

1923
01:13:48,239 --> 01:13:52,799
secret

1924
01:13:48,800 --> 01:14:00,159
to um people who have been evicted

1925
01:13:52,800 --> 01:14:02,000
so essentially the eviction would work

1926
01:14:00,159 --> 01:14:03,679
and i think there was also a previous

1927
01:14:02,000 --> 01:14:04,960
question whether the new genre can send

1928
01:14:03,679 --> 01:14:06,560
messages or not so

1929
01:14:04,960 --> 01:14:09,280
the whole idea behind this mechanism is

1930
01:14:06,560 --> 01:14:11,040
that the as long as this public group

1931
01:14:09,280 --> 01:14:12,840
state is available to the new joiner the

1932
01:14:11,040 --> 01:14:15,040
new joiner

1933
01:14:12,840 --> 01:14:17,520
can uh you know get started

1934
01:14:15,040 --> 01:14:18,560
immediately with that by issuing the

1935
01:14:17,520 --> 01:14:20,880
external commit

1936
01:14:18,560 --> 01:14:22,320
and and coming the external limit secure

1937
01:14:20,880 --> 01:14:25,120
to the group

1938
01:14:22,320 --> 01:14:26,320
um and then just you know apply this

1939
01:14:25,120 --> 01:14:29,120
commit

1940
01:14:26,320 --> 01:14:30,799
to its own state and and then the new

1941
01:14:29,120 --> 01:14:32,159
member can immediately start sending

1942
01:14:30,800 --> 01:14:34,239
messages

1943
01:14:32,159 --> 01:14:35,519
so it's immediately part of the group in

1944
01:14:34,239 --> 01:14:38,080
that sense

1945
01:14:35,520 --> 01:14:40,880
uh the only question is if other members

1946
01:14:38,080 --> 01:14:43,040
will agree with that external commit

1947
01:14:40,880 --> 01:14:44,159
but this is something we we have to

1948
01:14:43,040 --> 01:14:45,679
assume

1949
01:14:44,159 --> 01:14:47,360
that we do otherwise there was no point

1950
01:14:45,679 --> 01:14:49,440
in doing it in the first place

1951
01:14:47,360 --> 01:14:51,839
so if they will agree that external

1952
01:14:49,440 --> 01:14:54,480
commit then the

1953
01:14:51,840 --> 01:14:54,960
new genre is immediately a regular group

1954
01:14:54,480 --> 01:14:57,440
member

1955
01:14:54,960 --> 01:14:58,480
after having issued and applied the

1956
01:14:57,440 --> 01:15:00,480
external commit

1957
01:14:58,480 --> 01:15:03,759
there's no difference anymore between

1958
01:15:00,480 --> 01:15:03,759
the new joiner and other members

1959
01:15:06,719 --> 01:15:11,120
and as richard pointed out that you know

1960
01:15:08,560 --> 01:15:14,480
the motivation side i think this

1961
01:15:11,120 --> 01:15:18,400
uh simply might make mls

1962
01:15:14,480 --> 01:15:20,718
way more accessible in scenarios where

1963
01:15:18,400 --> 01:15:22,639
uh you don't want to have you don't want

1964
01:15:20,719 --> 01:15:26,000
to have this constraint that two devices

1965
01:15:22,640 --> 01:15:29,440
have to be online one after each other

1966
01:15:26,000 --> 01:15:33,840
and have a dramatic effect on

1967
01:15:29,440 --> 01:15:33,839
or impact on where mls is going to be

1968
01:15:36,840 --> 01:15:39,840
used

1969
01:15:40,320 --> 01:15:45,360
okay um i think the next slide is to

1970
01:15:43,360 --> 01:15:48,080
move to the github issues richard

1971
01:15:45,360 --> 01:15:48,799
well so same question here as for the

1972
01:15:48,080 --> 01:15:52,000
last one

1973
01:15:48,800 --> 01:15:54,080
um in terms of the pr so this is

1974
01:15:52,000 --> 01:15:55,120
kind of last call for folks to express

1975
01:15:54,080 --> 01:15:58,239
concerns about

1976
01:15:55,120 --> 01:15:58,800
the uh signing of the public group state

1977
01:15:58,239 --> 01:16:01,199
so

1978
01:15:58,800 --> 01:16:07,840
unless folks object here i think we'll

1979
01:16:01,199 --> 01:16:07,839
go ahead and get that that one merged

1980
01:16:08,000 --> 01:16:13,679
all right here hearing nothing

1981
01:16:11,440 --> 01:16:14,719
i think at this point all i had left was

1982
01:16:13,679 --> 01:16:16,000
um

1983
01:16:14,719 --> 01:16:17,840
there's a couple of other more minor

1984
01:16:16,000 --> 01:16:19,280
pr's on github

1985
01:16:17,840 --> 01:16:20,880
um if the chairs wanted to go through

1986
01:16:19,280 --> 01:16:24,480
those we could um

1987
01:16:20,880 --> 01:16:35,840
but other than that it's um further down

1988
01:16:24,480 --> 01:16:35,839
the uh the timeline that sean elaborated

1989
01:16:54,719 --> 01:16:59,760
all right let me know um where do you

1990
01:16:56,159 --> 01:16:59,759
want me to go issues or pull requests

1991
01:17:00,640 --> 01:17:04,320
uh when we go to pull requests

1992
01:17:14,480 --> 01:17:18,799
so we've discussed uh

1993
01:17:19,040 --> 01:17:26,080
let's see we discussed already number

1994
01:17:22,400 --> 01:17:28,080
uh four three three

1995
01:17:26,080 --> 01:17:30,000
and four three five and four three six

1996
01:17:28,080 --> 01:17:33,679
kind of go together that those the ones

1997
01:17:30,000 --> 01:17:36,239
that we discussed at joelle um we just

1998
01:17:33,679 --> 01:17:38,080
just look at 438 if people if you want

1999
01:17:36,239 --> 01:17:39,919
to um that's

2000
01:17:38,080 --> 01:17:42,840
mainly just removing some open issues

2001
01:17:39,920 --> 01:17:45,440
that have been flagged earlier

2002
01:17:42,840 --> 01:17:45,840
um that i think are no longer really

2003
01:17:45,440 --> 01:17:57,919
open

2004
01:17:45,840 --> 01:17:58,480
oh i see raphael commented on one thing

2005
01:17:57,920 --> 01:18:00,800
right

2006
01:17:58,480 --> 01:18:02,559
okay yeah so raphael is saying here that

2007
01:18:00,800 --> 01:18:04,320
we should continue to document the fact

2008
01:18:02,560 --> 01:18:07,360
that you could have a

2009
01:18:04,320 --> 01:18:09,920
now formed uh update path that

2010
01:18:07,360 --> 01:18:12,080
um encrypts one secret to some people

2011
01:18:09,920 --> 01:18:14,719
and another secret to other people

2012
01:18:12,080 --> 01:18:15,679
um this for folks you might not have

2013
01:18:14,719 --> 01:18:17,520
been tracking

2014
01:18:15,679 --> 01:18:18,719
is something we've known for a long time

2015
01:18:17,520 --> 01:18:21,280
and is not

2016
01:18:18,719 --> 01:18:22,239
really solvable with the um the tools we

2017
01:18:21,280 --> 01:18:24,800
have

2018
01:18:22,239 --> 01:18:26,159
that exist today um so yeah raphael i

2019
01:18:24,800 --> 01:18:27,679
think that's a good point we should um

2020
01:18:26,159 --> 01:18:29,839
add that to the security considerations

2021
01:18:27,679 --> 01:18:31,440
i'll update the pr to do that

2022
01:18:29,840 --> 01:18:33,760
yeah yeah that sounds good it doesn't

2023
01:18:31,440 --> 01:18:37,599
have to be an up initiative

2024
01:18:33,760 --> 01:18:40,239
okay so that's it

2025
01:18:37,600 --> 01:18:41,040
uh no there's one more at the top there

2026
01:18:40,239 --> 01:18:43,440
i could blow past

2027
01:18:41,040 --> 01:18:43,440
it sorry

2028
01:18:49,840 --> 01:18:58,640
sorry not here you meant here oh sorry

2029
01:18:53,440 --> 01:18:58,639
yeah yeah i think it should be okay yeah

2030
01:19:01,360 --> 01:19:04,639
so here i think we might have some some

2031
01:19:02,880 --> 01:19:06,800
disagreement among folks so the

2032
01:19:04,640 --> 01:19:08,719
i think the premise here is that is to

2033
01:19:06,800 --> 01:19:12,239
require that

2034
01:19:08,719 --> 01:19:15,760
each member in the group have a distinct

2035
01:19:12,239 --> 01:19:15,759
identity in their credential

2036
01:19:20,840 --> 01:19:24,080
yeah so

2037
01:19:24,400 --> 01:19:28,960
i don't know two things um

2038
01:19:27,600 --> 01:19:31,600
in the sense that there are some

2039
01:19:28,960 --> 01:19:33,360
inconsistencies in the

2040
01:19:31,600 --> 01:19:36,400
in the language of the uh the protocol

2041
01:19:33,360 --> 01:19:38,239
there and this is why this was started

2042
01:19:36,400 --> 01:19:39,599
and then it opened up some questions of

2043
01:19:38,239 --> 01:19:41,839
what we really want here

2044
01:19:39,600 --> 01:19:41,840
um

2045
01:19:43,199 --> 01:19:47,440
yeah i think we should this might need a

2046
01:19:45,440 --> 01:19:48,960
little bit more discussion in the pr to

2047
01:19:47,440 --> 01:19:51,280
get to what the

2048
01:19:48,960 --> 01:19:52,560
issue is because like i'm a little

2049
01:19:51,280 --> 01:19:54,239
concerned here that there

2050
01:19:52,560 --> 01:19:55,679
are cases where you want to have

2051
01:19:54,239 --> 01:19:56,480
multiple appearances of the same

2052
01:19:55,679 --> 01:19:59,760
identity

2053
01:19:56,480 --> 01:20:00,879
for example for multiple devices um

2054
01:19:59,760 --> 01:20:02,480
[Music]

2055
01:20:00,880 --> 01:20:04,080
and you might have multiple credentials

2056
01:20:02,480 --> 01:20:05,280
of the same identity and so i'm

2057
01:20:04,080 --> 01:20:07,199
worried when i see things like the

2058
01:20:05,280 --> 01:20:09,519
requirement here that um

2059
01:20:07,199 --> 01:20:10,799
and multiple ads for the same identity

2060
01:20:09,520 --> 01:20:15,360
would get ignored

2061
01:20:10,800 --> 01:20:15,360
or some of them would get ignored um

2062
01:20:15,679 --> 01:20:20,800
yeah maybe we should discuss it a little

2063
01:20:17,920 --> 01:20:22,239
more um maybe we can add that to

2064
01:20:20,800 --> 01:20:25,920
the the other subject we wanted to

2065
01:20:22,239 --> 01:20:29,040
discuss was it the tree signing

2066
01:20:25,920 --> 01:20:31,280
yeah the other one was a transcript

2067
01:20:29,040 --> 01:20:33,840
truncation

2068
01:20:31,280 --> 01:20:34,800
yes exactly sorry so maybe yeah maybe we

2069
01:20:33,840 --> 01:20:40,400
can combine that

2070
01:20:34,800 --> 01:20:40,400
um and uh and discuss that i recall

2071
01:20:45,520 --> 01:20:49,920
all right so sean it sounds like um our

2072
01:20:48,080 --> 01:20:50,719
chairs it sounds like maybe we should um

2073
01:20:49,920 --> 01:20:52,880
have a call

2074
01:20:50,719 --> 01:20:55,199
in in a couple weeks to close out these

2075
01:20:52,880 --> 01:20:57,199
last two issues

2076
01:20:55,199 --> 01:20:58,320
and then um and obviously we can have

2077
01:20:57,199 --> 01:20:58,960
some discussion in the pr in the

2078
01:20:58,320 --> 01:21:02,159
meantime

2079
01:20:58,960 --> 01:21:04,800
and then i will issue draft 11 and

2080
01:21:02,159 --> 01:21:07,120
uh start our feature freeze and analysis

2081
01:21:04,800 --> 01:21:07,120
period

2082
01:21:10,800 --> 01:21:13,920
i mean just just to be clear right

2083
01:21:12,400 --> 01:21:16,799
you're going to drop 11 before that

2084
01:21:13,920 --> 01:21:16,800
happens and then we'll

2085
01:21:17,120 --> 01:21:23,120
then we'll do the first right yes so

2086
01:21:20,400 --> 01:21:24,719
just to be clear um i think the the

2087
01:21:23,120 --> 01:21:27,120
timeline i had in mind was

2088
01:21:24,719 --> 01:21:27,760
have a call to discuss these last issues

2089
01:21:27,120 --> 01:21:30,480
then

2090
01:21:27,760 --> 01:21:32,960
once we've resolved them then drop 11

2091
01:21:30,480 --> 01:21:35,040
then start the future freeze

2092
01:21:32,960 --> 01:21:36,719
so we'll probably drop so that won't be

2093
01:21:35,040 --> 01:21:38,639
the analysis target

2094
01:21:36,719 --> 01:21:39,840
yeah so i think what we're saying is

2095
01:21:38,639 --> 01:21:40,880
that we're looking to have another

2096
01:21:39,840 --> 01:21:43,440
interim

2097
01:21:40,880 --> 01:21:44,800
uh possibly the first week of december i

2098
01:21:43,440 --> 01:21:45,919
haven't looked at my calendar i know

2099
01:21:44,800 --> 01:21:48,080
what's going on and we'll

2100
01:21:45,920 --> 01:21:49,440
we'll do a poll to try to make sure that

2101
01:21:48,080 --> 01:21:52,000
we can get uh

2102
01:21:49,440 --> 01:21:53,040
participation from all those interested

2103
01:21:52,000 --> 01:21:57,840
the the week after

2104
01:21:53,040 --> 01:21:57,840
thanksgiving in us terms

2105
01:22:01,360 --> 01:22:07,360
all right raphael i don't know

2106
01:22:04,639 --> 01:22:07,360
that sounds good

2107
01:22:08,800 --> 01:22:12,000
um i guess the other thing we could talk

2108
01:22:10,560 --> 01:22:15,760
about is um

2109
01:22:12,000 --> 01:22:15,760
implementation and in or out planning

2110
01:22:16,239 --> 01:22:19,678
but i don't know that we've got all the

2111
01:22:17,679 --> 01:22:20,880
right folks on here

2112
01:22:19,679 --> 01:22:22,480
right well i mean i think what we should

2113
01:22:20,880 --> 01:22:23,760
do is i would like to make sure that we

2114
01:22:22,480 --> 01:22:26,638
set up a wiki

2115
01:22:23,760 --> 01:22:27,520
in the github repo for implementations

2116
01:22:26,639 --> 01:22:29,679
and so that we can

2117
01:22:27,520 --> 01:22:30,800
set up an interoperability matrix and

2118
01:22:29,679 --> 01:22:32,400
then basically try to

2119
01:22:30,800 --> 01:22:34,159
try to blow through things and it would

2120
01:22:32,400 --> 01:22:36,638
be good if you and uh

2121
01:22:34,159 --> 01:22:38,400
say raphael benjamin and maybe brita you

2122
01:22:36,639 --> 01:22:39,040
know can figure out like if there's some

2123
01:22:38,400 --> 01:22:41,679
way to

2124
01:22:39,040 --> 01:22:43,120
like figure out the right the right

2125
01:22:41,679 --> 01:22:44,320
order of things to test to make sure

2126
01:22:43,120 --> 01:22:47,199
that the end you end up with an

2127
01:22:44,320 --> 01:22:48,559
implementation that works

2128
01:22:47,199 --> 01:22:50,638
i don't know if that's necessary but i

2129
01:22:48,560 --> 01:22:52,320
just have this vision that like

2130
01:22:50,639 --> 01:22:53,920
if you're trying to aid people that are

2131
01:22:52,320 --> 01:22:55,920
coming into stuff cold then it might be

2132
01:22:53,920 --> 01:22:59,120
good to have

2133
01:22:55,920 --> 01:23:02,320
a guide yeah and actually

2134
01:22:59,120 --> 01:23:05,040
it um if someone

2135
01:23:02,320 --> 01:23:06,080
in the group in the on on the uh in the

2136
01:23:05,040 --> 01:23:09,120
meeting wanted to

2137
01:23:06,080 --> 01:23:10,639
was more new to this and wanted to uh

2138
01:23:09,120 --> 01:23:12,400
get familiar with stuff that might be a

2139
01:23:10,639 --> 01:23:14,400
way to contribute is to help think

2140
01:23:12,400 --> 01:23:17,440
through what some of those cases are

2141
01:23:14,400 --> 01:23:20,799
uh that you'd want to test out um

2142
01:23:17,440 --> 01:23:24,080
based on your reading of the spec

2143
01:23:20,800 --> 01:23:24,080
so help would be welcome there

2144
01:23:26,080 --> 01:23:32,400
yes a second plant um and then we

2145
01:23:29,920 --> 01:23:34,159
we need to figure out a way how to

2146
01:23:32,400 --> 01:23:36,080
really test interrupt

2147
01:23:34,159 --> 01:23:38,320
um because i think right now the status

2148
01:23:36,080 --> 01:23:40,960
quo is that initially richard

2149
01:23:38,320 --> 01:23:41,679
started an implementation in c plus

2150
01:23:40,960 --> 01:23:44,320
which

2151
01:23:41,679 --> 01:23:45,840
is quite advanced by now and also saw

2152
01:23:44,320 --> 01:23:48,559
other people contributing

2153
01:23:45,840 --> 01:23:50,239
the same is true on my side and there is

2154
01:23:48,560 --> 01:23:52,880
one in rust

2155
01:23:50,239 --> 01:23:54,400
which is close to draft 10 now still a

2156
01:23:52,880 --> 01:23:57,280
few things to catch up

2157
01:23:54,400 --> 01:23:58,559
and then we we need to see how we can

2158
01:23:57,280 --> 01:24:00,880
actually

2159
01:23:58,560 --> 01:24:03,199
interrupt between at least these two

2160
01:24:00,880 --> 01:24:04,800
implementations

2161
01:24:03,199 --> 01:24:07,040
we already briefly discussed the

2162
01:24:04,800 --> 01:24:09,280
possibility of having a server there

2163
01:24:07,040 --> 01:24:11,760
this is something we're gonna continue

2164
01:24:09,280 --> 01:24:14,480
to work on uh richard so

2165
01:24:11,760 --> 01:24:16,880
it'll also be in the open so we can uh

2166
01:24:14,480 --> 01:24:19,440
let's see if we can reduce that

2167
01:24:16,880 --> 01:24:21,040
yeah i think we tried to do a more test

2168
01:24:19,440 --> 01:24:23,839
vector based approach

2169
01:24:21,040 --> 01:24:24,320
a little while ago um i think that's

2170
01:24:23,840 --> 01:24:25,679
having

2171
01:24:24,320 --> 01:24:27,599
played with that a bit i think it might

2172
01:24:25,679 --> 01:24:30,480
be a little challenging to to get that

2173
01:24:27,600 --> 01:24:31,360
exactly right um i think we are going to

2174
01:24:30,480 --> 01:24:33,440
need

2175
01:24:31,360 --> 01:24:35,280
we might be able to do some degree of

2176
01:24:33,440 --> 01:24:36,480
testing that way just to verify basic

2177
01:24:35,280 --> 01:24:38,559
functions like the

2178
01:24:36,480 --> 01:24:41,120
the crypto primitives and some of the

2179
01:24:38,560 --> 01:24:44,239
message serialization

2180
01:24:41,120 --> 01:24:45,040
but to really get the the behavioral

2181
01:24:44,239 --> 01:24:46,480
interop

2182
01:24:45,040 --> 01:24:48,719
i think we're going to need to do some

2183
01:24:46,480 --> 01:24:51,199
live testing um

2184
01:24:48,719 --> 01:24:52,400
via a server so we'll probably define

2185
01:24:51,199 --> 01:24:54,960
some little

2186
01:24:52,400 --> 01:24:55,679
you know json json over http and web

2187
01:24:54,960 --> 01:24:58,239
sockets

2188
01:24:55,679 --> 01:25:00,560
uh protocol to shut things back and

2189
01:24:58,239 --> 01:25:00,559
forth

2190
01:25:01,040 --> 01:25:04,239
yeah exactly i mean just for context

2191
01:25:02,480 --> 01:25:07,120
test factors are complicated because of

2192
01:25:04,239 --> 01:25:10,000
all the entropy that is

2193
01:25:07,120 --> 01:25:10,960
being injected all the time so in order

2194
01:25:10,000 --> 01:25:14,480
to

2195
01:25:10,960 --> 01:25:16,239
get that out of the way you have to make

2196
01:25:14,480 --> 01:25:17,599
a lot of modification to actual

2197
01:25:16,239 --> 01:25:18,718
implementation i think we should get

2198
01:25:17,600 --> 01:25:22,080
there at least on

2199
01:25:18,719 --> 01:25:23,440
on our side with openmls where

2200
01:25:22,080 --> 01:25:25,920
we're going to try and get there at some

2201
01:25:23,440 --> 01:25:27,519
point because i think els also has done

2202
01:25:25,920 --> 01:25:28,480
that in the past it's a good thing to

2203
01:25:27,520 --> 01:25:30,560
have

2204
01:25:28,480 --> 01:25:32,638
but it's not exactly a low-hanging fruit

2205
01:25:30,560 --> 01:25:33,679
um so the test factors we had in the

2206
01:25:32,639 --> 01:25:36,000
past was for

2207
01:25:33,679 --> 01:25:36,719
some of the tree math and like you said

2208
01:25:36,000 --> 01:25:40,400
some of the

2209
01:25:36,719 --> 01:25:41,679
serialization um well they're completely

2210
01:25:40,400 --> 01:25:43,360
inaccurate now because i think that

2211
01:25:41,679 --> 01:25:43,920
we're referencing something between

2212
01:25:43,360 --> 01:25:48,000
draft

2213
01:25:43,920 --> 01:25:49,280
one and four um we can try and get that

2214
01:25:48,000 --> 01:25:51,600
back of course but

2215
01:25:49,280 --> 01:25:53,120
i fully agree that we should try and

2216
01:25:51,600 --> 01:25:57,120
interrupt see how that

2217
01:25:53,120 --> 01:25:58,800
goes and then do full test requires as a

2218
01:25:57,120 --> 01:26:00,320
second step

2219
01:25:58,800 --> 01:26:02,080
why can't you actually replace your

2220
01:26:00,320 --> 01:26:03,599
random calls to

2221
01:26:02,080 --> 01:26:06,800
your random function you have z to

2222
01:26:03,600 --> 01:26:06,800
return zeros all the time

2223
01:26:07,120 --> 01:26:12,719
yeah that's one of those of course um

2224
01:26:10,560 --> 01:26:14,080
you could do that in principle but i

2225
01:26:12,719 --> 01:26:16,239
really do not like adding that's

2226
01:26:14,080 --> 01:26:18,639
production code

2227
01:26:16,239 --> 01:26:20,400
code that might end them from production

2228
01:26:18,639 --> 01:26:22,400
okay

2229
01:26:20,400 --> 01:26:24,080
i see it's something you want to do

2230
01:26:22,400 --> 01:26:26,559
behind a future flag or something

2231
01:26:24,080 --> 01:26:28,480
um it's it's not that straightforward in

2232
01:26:26,560 --> 01:26:31,840
practical terms

2233
01:26:28,480 --> 01:26:35,199
um okay

2234
01:26:31,840 --> 01:26:37,120
i mean so i hope that as we declare

2235
01:26:35,199 --> 01:26:38,559
uh an analysis draft that that will

2236
01:26:37,120 --> 01:26:39,599
encourage more people to show up with

2237
01:26:38,560 --> 01:26:42,560
implementations

2238
01:26:39,600 --> 01:26:44,239
because they'll have a warmer fuzzier

2239
01:26:42,560 --> 01:26:45,280
sense that the draft is not going to

2240
01:26:44,239 --> 01:26:48,080
change so much

2241
01:26:45,280 --> 01:26:48,080
um but we'll see

2242
01:26:48,719 --> 01:26:54,560
so yeah i think that's the that's the

2243
01:26:51,120 --> 01:26:56,559
main point at least for me on karthik

2244
01:26:54,560 --> 01:26:58,639
because we are doing the implementation

2245
01:26:56,560 --> 01:27:00,400
and the code are the same thing for us

2246
01:26:58,639 --> 01:27:01,679
right so we are proving something on the

2247
01:27:00,400 --> 01:27:04,799
code

2248
01:27:01,679 --> 01:27:09,040
uh so we don't want to

2249
01:27:04,800 --> 01:27:09,040
we do proofs like gazillions of times um

2250
01:27:09,199 --> 01:27:12,320
but yeah i'm pretty sure we'll have to

2251
01:27:12,000 --> 01:27:14,719
we

2252
01:27:12,320 --> 01:27:16,159
will we'll have something reasonable in

2253
01:27:14,719 --> 01:27:19,360
the next few months

2254
01:27:16,159 --> 01:27:21,679
during the analysis part but

2255
01:27:19,360 --> 01:27:33,759
that also depends on kartik not only on

2256
01:27:21,679 --> 01:27:36,560
me so

2257
01:27:33,760 --> 01:27:38,400
um all right well if anybody has

2258
01:27:36,560 --> 01:27:39,920
anything else

2259
01:27:38,400 --> 01:27:42,000
i mean at some point to be honest right

2260
01:27:39,920 --> 01:27:43,679
we're going to have to go back and

2261
01:27:42,000 --> 01:27:45,600
lean on a mod to do the finish the

2262
01:27:43,679 --> 01:27:47,120
federation draft or abandon it

2263
01:27:45,600 --> 01:27:48,960
and we're gonna need to do the server

2264
01:27:47,120 --> 01:27:50,639
assist draft um

2265
01:27:48,960 --> 01:27:52,000
and get working on that but i think the

2266
01:27:50,639 --> 01:27:53,360
the key point is getting the protocol

2267
01:27:52,000 --> 01:27:54,800
done get the analysis started do the

2268
01:27:53,360 --> 01:27:56,080
architecture draft

2269
01:27:54,800 --> 01:27:58,480
and then look to pick up the other

2270
01:27:56,080 --> 01:28:01,920
pieces should we

2271
01:27:58,480 --> 01:28:03,839
submit the first version of the

2272
01:28:01,920 --> 01:28:06,000
server assist draft just so that it's

2273
01:28:03,840 --> 01:28:08,159
actually public and under the

2274
01:28:06,000 --> 01:28:09,840
absolutely go ahead and submit it as an

2275
01:28:08,159 --> 01:28:11,839
individual submission

2276
01:28:09,840 --> 01:28:13,040
um whatever you know draft dash whatever

2277
01:28:11,840 --> 01:28:13,760
name last name we're going to use and

2278
01:28:13,040 --> 01:28:16,320
just go ahead and

2279
01:28:13,760 --> 01:28:18,320
put it up as soon as possible and we can

2280
01:28:16,320 --> 01:28:19,679
get people to start reviewing it

2281
01:28:18,320 --> 01:28:21,120
and if we have time and then there's

2282
01:28:19,679 --> 01:28:22,960
people that have reviewed it we can

2283
01:28:21,120 --> 01:28:25,360
adopt it whenever

2284
01:28:22,960 --> 01:28:26,880
there could be an actual a good place to

2285
01:28:25,360 --> 01:28:29,519
do uh

2286
01:28:26,880 --> 01:28:31,840
an informative proposal api for the

2287
01:28:29,520 --> 01:28:33,920
server part

2288
01:28:31,840 --> 01:28:35,840
if people want to interrupt we should

2289
01:28:33,920 --> 01:28:36,880
determine that somewhere i i'm wondering

2290
01:28:35,840 --> 01:28:40,080
if it's not worth

2291
01:28:36,880 --> 01:28:40,080
like doing um

2292
01:28:41,040 --> 01:28:46,080
like an exemplary api like a proposal

2293
01:28:44,480 --> 01:28:49,440
api in there

2294
01:28:46,080 --> 01:28:51,280
not sure i'll

2295
01:28:49,440 --> 01:28:53,040
put it in the chat right now there's

2296
01:28:51,280 --> 01:28:54,960
it's a stub right now and we haven't

2297
01:28:53,040 --> 01:28:58,159
looked at it in a while

2298
01:28:54,960 --> 01:29:00,159
um but that's what we can get started

2299
01:28:58,159 --> 01:29:01,679
with

2300
01:29:00,159 --> 01:29:03,360
yeah i mean the the nice thing here is

2301
01:29:01,679 --> 01:29:05,040
that uh don't

2302
01:29:03,360 --> 01:29:07,040
don't feel like you gotta hold back if

2303
01:29:05,040 --> 01:29:10,080
you got a good idea feel free to submit

2304
01:29:07,040 --> 01:29:12,320
uh um a draft

2305
01:29:10,080 --> 01:29:13,600
and or if you think it not really draft

2306
01:29:12,320 --> 01:29:14,960
material and you want to put it up on

2307
01:29:13,600 --> 01:29:16,960
the

2308
01:29:14,960 --> 01:29:19,280
github repo we can figure out a way to

2309
01:29:16,960 --> 01:29:22,159
get that done too

2310
01:29:19,280 --> 01:29:23,920
um speaking of drafts there's one a bit

2311
01:29:22,159 --> 01:29:24,480
farther afield i just posted a link in

2312
01:29:23,920 --> 01:29:27,040
the chat

2313
01:29:24,480 --> 01:29:27,519
um folks are already talking about how

2314
01:29:27,040 --> 01:29:30,880
to use

2315
01:29:27,520 --> 01:29:33,199
uh mls to key s frame which is another

2316
01:29:30,880 --> 01:29:39,840
working group for encrypting media

2317
01:29:33,199 --> 01:29:39,839
um so that might be interest folks

2318
01:29:47,920 --> 01:29:52,560
all right i think that's going once

2319
01:29:49,679 --> 01:29:56,239
going twice

2320
01:29:52,560 --> 01:29:58,480
sold thank you for participating today

2321
01:29:56,239 --> 01:30:00,959
or whatever hour it was in your local

2322
01:29:58,480 --> 01:30:00,959
locale

2323
01:30:02,800 --> 01:30:07,840
thank you again for taking notes

2324
01:30:13,840 --> 01:30:17,280
sorry nick i didn't want to jump on you

2325
01:30:15,120 --> 01:30:17,280
there

2326
01:30:18,639 --> 01:30:22,000
thanking folks for uh taking notes and

2327
01:30:21,360 --> 01:30:25,440
um

2328
01:30:22,000 --> 01:30:27,760
participating so far i think we've um

2329
01:30:25,440 --> 01:30:30,638
made a lot of progress and looking

2330
01:30:27,760 --> 01:30:30,639
forward to the new draft

2331
01:30:32,480 --> 01:30:41,919
great all right ciao folks

2332
01:30:35,840 --> 01:30:41,920
bye take everyone thanks bye everyone

