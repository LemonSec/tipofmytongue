1
00:00:15,599 --> 00:00:20,960
uh well

2
00:00:16,239 --> 00:00:20,959
shall we get started yes

3
00:00:26,320 --> 00:00:28,880
go on yeah

4
00:00:29,760 --> 00:00:34,160
uh you could you can go ahead you can go

5
00:00:31,199 --> 00:00:35,520
ahead okay okay

6
00:00:34,160 --> 00:00:37,760
working group welcome to the second

7
00:00:35,520 --> 00:00:40,960
meeting

8
00:00:37,760 --> 00:00:44,079
uh we are about to start and we'll start

9
00:00:40,960 --> 00:00:46,960
with uh broadcast history protocol

10
00:00:44,079 --> 00:00:49,600
that has been moved from first meeting

11
00:00:46,960 --> 00:00:49,600
to the second

12
00:00:52,239 --> 00:00:58,160
so if presenter could get ready i think

13
00:00:55,600 --> 00:01:01,440
it's going to be robin

14
00:00:58,160 --> 00:01:01,440
i believe it's uh

15
00:01:01,520 --> 00:01:10,080
okay okay okay

16
00:01:06,400 --> 00:01:10,080
hello everyone my name is

17
00:01:10,240 --> 00:01:15,600
okay let's topic a man today i will

18
00:01:13,680 --> 00:01:17,759
i will introduce the topic is the

19
00:01:15,600 --> 00:01:20,960
protocol associated protocol

20
00:01:17,759 --> 00:01:20,960
okay next please

21
00:01:25,200 --> 00:01:29,360
okay first i will introduce the why i

22
00:01:27,840 --> 00:01:31,759
require eastern western

23
00:01:29,360 --> 00:01:33,600
city protocol function here at least the

24
00:01:31,759 --> 00:01:35,920
two reasons and first is

25
00:01:33,600 --> 00:01:37,280
we know the exiting the north and south

26
00:01:35,920 --> 00:01:40,880
method has some

27
00:01:37,280 --> 00:01:42,799
challenges and the wise the large amount

28
00:01:40,880 --> 00:01:44,798
of data to be exported

29
00:01:42,799 --> 00:01:46,240
we know that on the network we have the

30
00:01:44,799 --> 00:01:49,920
money device and

31
00:01:46,240 --> 00:01:52,000
logos and data like this and another

32
00:01:49,920 --> 00:01:55,520
challenge is the high performance

33
00:01:52,000 --> 00:01:58,000
requirements on the controller or mis

34
00:01:55,520 --> 00:01:59,439
if the controller or method to complete

35
00:01:58,000 --> 00:02:02,000
all these tasks

36
00:01:59,439 --> 00:02:02,880
yeah this is the two challenges and then

37
00:02:02,000 --> 00:02:06,560
another is

38
00:02:02,880 --> 00:02:09,119
using the user habits

39
00:02:06,560 --> 00:02:10,160
now the local configuration and the

40
00:02:09,119 --> 00:02:14,319
maintenance

41
00:02:10,160 --> 00:02:16,799
is more inconvenient and uh if the user

42
00:02:14,319 --> 00:02:17,839
use use the nmis on the controller and

43
00:02:16,800 --> 00:02:21,200
then they

44
00:02:17,840 --> 00:02:24,239
they have to take time to adopt it

45
00:02:21,200 --> 00:02:26,959
yeah and then another

46
00:02:24,239 --> 00:02:28,400
for another controller protocol like for

47
00:02:26,959 --> 00:02:31,440
example the idt

48
00:02:28,400 --> 00:02:33,599
and the pdp in fact has some

49
00:02:31,440 --> 00:02:34,480
some existing method from there for the

50
00:02:33,599 --> 00:02:36,000
past error

51
00:02:34,480 --> 00:02:38,720
and the result error and a bb

52
00:02:36,000 --> 00:02:41,680
notification message like this

53
00:02:38,720 --> 00:02:41,680
next slide please

54
00:02:42,959 --> 00:02:48,080
hello while a comma assisted protocol is

55
00:02:46,319 --> 00:02:51,440
needed

56
00:02:48,080 --> 00:02:54,160
in order if the protocol is affiliated

57
00:02:51,440 --> 00:02:55,040
it cannot otherwise the any information

58
00:02:54,160 --> 00:02:58,239
to the neighbor

59
00:02:55,040 --> 00:02:59,280
yeah this is mainly the reason another

60
00:02:58,239 --> 00:03:05,200
is the

61
00:02:59,280 --> 00:03:09,120
existing control protocol is

62
00:03:05,200 --> 00:03:11,280
restricted for example if the more

63
00:03:09,120 --> 00:03:12,159
maintenance the information is

64
00:03:11,280 --> 00:03:15,360
introduced

65
00:03:12,159 --> 00:03:20,000
it may it may have it has a

66
00:03:15,360 --> 00:03:22,560
much impact for example bdp and rsvp

67
00:03:20,000 --> 00:03:24,000
when now the bdp evo bp extends the

68
00:03:22,560 --> 00:03:27,519
password tribute again

69
00:03:24,000 --> 00:03:28,879
update package then when the device

70
00:03:27,519 --> 00:03:32,159
received the

71
00:03:28,879 --> 00:03:34,079
update package message it how to the uh

72
00:03:32,159 --> 00:03:36,879
how to do how to deal with the

73
00:03:34,080 --> 00:03:37,120
attributes attribute uh how to see you

74
00:03:36,879 --> 00:03:39,518
and

75
00:03:37,120 --> 00:03:40,720
how to searching and how to compare and

76
00:03:39,519 --> 00:03:44,400
how to practice

77
00:03:40,720 --> 00:03:48,959
legacy so it is a big

78
00:03:44,400 --> 00:03:51,760
impact and uh another product with rsvp

79
00:03:48,959 --> 00:03:54,000
as we extend the course code for past

80
00:03:51,760 --> 00:03:57,439
setup for the features

81
00:03:54,000 --> 00:04:00,640
but as we produce we now only have two

82
00:03:57,439 --> 00:04:03,840
euler's available so this is the two

83
00:04:00,640 --> 00:04:06,798
controller protocol okay so

84
00:04:03,840 --> 00:04:08,239
if a common protocol is used i think

85
00:04:06,799 --> 00:04:10,000
it's better to

86
00:04:08,239 --> 00:04:11,840
define an otherwise the related

87
00:04:10,000 --> 00:04:15,840
information

88
00:04:11,840 --> 00:04:15,840
next says please

89
00:04:18,160 --> 00:04:22,240
here i list the two troubleshooting use

90
00:04:21,040 --> 00:04:26,080
cases

91
00:04:22,240 --> 00:04:29,040
first of all the bp rooting oscillation

92
00:04:26,080 --> 00:04:29,840
if your device want to know which guy

93
00:04:29,040 --> 00:04:33,680
which guy is

94
00:04:29,840 --> 00:04:35,919
the oscillation the source uh he will

95
00:04:33,680 --> 00:04:37,759
introduce a message i use the

96
00:04:35,919 --> 00:04:40,159
oscillation source

97
00:04:37,759 --> 00:04:41,040
to his neighbor if the neighbor received

98
00:04:40,160 --> 00:04:44,080
the message

99
00:04:41,040 --> 00:04:44,479
if he can reply a message i mean yes or

100
00:04:44,080 --> 00:04:47,359
not

101
00:04:44,479 --> 00:04:48,240
if not if not then the neighbor can

102
00:04:47,360 --> 00:04:50,560
continue to

103
00:04:48,240 --> 00:04:53,120
receive the message to other neighbor

104
00:04:50,560 --> 00:04:55,759
okay until the someone replies with

105
00:04:53,120 --> 00:04:56,639
the oscillation source this is the first

106
00:04:55,759 --> 00:05:00,560
use case

107
00:04:56,639 --> 00:05:04,880
and another is the rpt the setup thingy

108
00:05:00,560 --> 00:05:06,800
if the feeding device can send a nose

109
00:05:04,880 --> 00:05:10,080
notification message to the ingress

110
00:05:06,800 --> 00:05:13,440
device for example a link feature

111
00:05:10,080 --> 00:05:16,639
happens here okay

112
00:05:13,440 --> 00:05:16,639
that's the slide please

113
00:05:17,840 --> 00:05:24,960
and i introduced the php protocol

114
00:05:21,919 --> 00:05:28,240
we know the protocol the pvp the

115
00:05:24,960 --> 00:05:30,400
uh is designed for device to exchange

116
00:05:28,240 --> 00:05:31,440
protocol related information between

117
00:05:30,400 --> 00:05:33,758
each other

118
00:05:31,440 --> 00:05:36,080
and separates the routing and the

119
00:05:33,759 --> 00:05:38,479
non-rooting data

120
00:05:36,080 --> 00:05:39,280
i think the i think the ppp has

121
00:05:38,479 --> 00:05:42,240
assembled

122
00:05:39,280 --> 00:05:43,280
some of the merits the merits uh for

123
00:05:42,240 --> 00:05:46,080
example the

124
00:05:43,280 --> 00:05:47,039
facility facilitates the automatic the

125
00:05:46,080 --> 00:05:50,560
troubleshooting

126
00:05:47,039 --> 00:05:53,440
and are not impacted uh impact impacted

127
00:05:50,560 --> 00:05:54,800
on the lunar system and another relying

128
00:05:53,440 --> 00:05:58,000
on

129
00:05:54,800 --> 00:06:06,080
centralized server and so on okay

130
00:05:58,000 --> 00:06:08,080
next slide please

131
00:06:06,080 --> 00:06:09,840
at least the two discussion the first

132
00:06:08,080 --> 00:06:12,880
discussion is the

133
00:06:09,840 --> 00:06:16,400
udpr tcp which one we we want to

134
00:06:12,880 --> 00:06:19,840
select uh here is the list three

135
00:06:16,400 --> 00:06:20,880
main requirements for one is the event

136
00:06:19,840 --> 00:06:22,960
driven

137
00:06:20,880 --> 00:06:24,000
and recognize the law resource the

138
00:06:22,960 --> 00:06:26,318
consumption

139
00:06:24,000 --> 00:06:28,400
and the law reliability requirements

140
00:06:26,319 --> 00:06:31,520
this is three i think it is the

141
00:06:28,400 --> 00:06:34,400
mainly the requirements for the for the

142
00:06:31,520 --> 00:06:35,120
pep and now this discount tool is there

143
00:06:34,400 --> 00:06:38,239
are two

144
00:06:35,120 --> 00:06:39,039
possible options to implement implement

145
00:06:38,240 --> 00:06:41,919
the pvp

146
00:06:39,039 --> 00:06:44,120
option one lpp is development it

147
00:06:41,919 --> 00:06:47,280
develops

148
00:06:44,120 --> 00:06:50,160
independently as a protocol and open two

149
00:06:47,280 --> 00:06:50,960
people reuse the existing protocol and

150
00:06:50,160 --> 00:06:53,919
grasp

151
00:06:50,960 --> 00:06:55,520
and on the next topic is the grasp we

152
00:06:53,919 --> 00:06:57,840
can discuss

153
00:06:55,520 --> 00:06:58,639
together about this question is the

154
00:06:57,840 --> 00:07:02,560
question

155
00:06:58,639 --> 00:07:05,680
okay next the at least the grasp and

156
00:07:02,560 --> 00:07:06,240
pv the two protocol in here give the

157
00:07:05,680 --> 00:07:08,240
simple

158
00:07:06,240 --> 00:07:10,639
compare the main information is

159
00:07:08,240 --> 00:07:13,440
stability and irritability

160
00:07:10,639 --> 00:07:14,240
here now i think the the graph is the

161
00:07:13,440 --> 00:07:17,280
high resource

162
00:07:14,240 --> 00:07:19,680
consumption under persistent

163
00:07:17,280 --> 00:07:20,318
connection and the pp the flexible

164
00:07:19,680 --> 00:07:23,199
connection

165
00:07:20,319 --> 00:07:24,400
and the law resource consumption like

166
00:07:23,199 --> 00:07:28,080
this

167
00:07:24,400 --> 00:07:28,080
okay next slide please

168
00:07:29,440 --> 00:07:33,039
so next step is to discuss with an

169
00:07:32,319 --> 00:07:35,919
animal

170
00:07:33,039 --> 00:07:35,919
okay thank you

171
00:07:40,880 --> 00:07:45,840
any questions

172
00:07:54,479 --> 00:08:01,758
uh so uh gg

173
00:07:58,479 --> 00:08:04,159
give a question so first question

174
00:08:01,759 --> 00:08:05,759
is like how do we guarantee there's a uh

175
00:08:04,160 --> 00:08:08,639
end-to-end ipad

176
00:08:05,759 --> 00:08:09,280
to run this protocol uh the second

177
00:08:08,639 --> 00:08:11,599
question

178
00:08:09,280 --> 00:08:12,719
is like you know so when we think about

179
00:08:11,599 --> 00:08:16,159
like performance and

180
00:08:12,720 --> 00:08:20,400
so comparing udpr tcp so

181
00:08:16,160 --> 00:08:27,840
like we can ever consider the ict

182
00:08:20,400 --> 00:08:27,840
which has the benefit bubbles

183
00:08:28,319 --> 00:08:34,640
okay so so we'll i'll let robin

184
00:08:31,440 --> 00:08:37,838
respond uh i have this the

185
00:08:34,640 --> 00:08:40,958
uh reply uh simply reply uh the first

186
00:08:37,839 --> 00:08:43,440
one i think the guarantee the end to end

187
00:08:40,958 --> 00:08:44,959
because this is uh depends on this the

188
00:08:43,440 --> 00:08:48,000
configuration

189
00:08:44,959 --> 00:08:48,319
because at the beginning because if we

190
00:08:48,000 --> 00:08:52,320
want

191
00:08:48,320 --> 00:08:55,959
to send this exchange into information

192
00:08:52,320 --> 00:08:58,240
so that's need some this the uh

193
00:08:55,959 --> 00:08:59,680
pre-configuration uh so there's the

194
00:08:58,240 --> 00:09:01,760
first one and also this

195
00:08:59,680 --> 00:09:02,880
is the uh and also this is the

196
00:09:01,760 --> 00:09:05,839
reachability is

197
00:09:02,880 --> 00:09:07,439
dependent on this the forwarding table

198
00:09:05,839 --> 00:09:11,200
uh the second one i think

199
00:09:07,440 --> 00:09:13,519
that's the second one i think that we

200
00:09:11,200 --> 00:09:14,880
to be honest that just now we just think

201
00:09:13,519 --> 00:09:17,519
about this the udp

202
00:09:14,880 --> 00:09:18,240
and tcp uh you propose this is the new

203
00:09:17,519 --> 00:09:21,519
protocol

204
00:09:18,240 --> 00:09:22,080
uh we will have more uh research on

205
00:09:21,519 --> 00:09:24,880
later

206
00:09:22,080 --> 00:09:25,920
and also that's used to check if we use

207
00:09:24,880 --> 00:09:30,480
okay for this

208
00:09:25,920 --> 00:09:30,479
scenario okay okay thanks

209
00:09:30,959 --> 00:09:39,760
randy i like the separation

210
00:09:35,760 --> 00:09:39,760
i think it's architecturally reasonable

211
00:09:39,920 --> 00:09:46,079
the md5 probably want to pick something

212
00:09:43,040 --> 00:09:46,079
from this millennium

213
00:09:46,160 --> 00:09:51,839
that's enough

214
00:10:02,839 --> 00:10:05,839
uh

215
00:10:05,920 --> 00:10:11,519
oh hello randy uh i i

216
00:10:09,360 --> 00:10:13,680
may be not a catch all your point you

217
00:10:11,519 --> 00:10:17,040
mentioned that's the secularity

218
00:10:13,680 --> 00:10:21,359
that's used depending on the md5 is okay

219
00:10:17,040 --> 00:10:24,719
you saying enough no it's not md5 dead

220
00:10:21,360 --> 00:10:32,640
use it use a more modern hash yeah

221
00:10:24,720 --> 00:10:35,200
ok ok

222
00:10:32,640 --> 00:10:36,560
we we we can take that into account yeah

223
00:10:35,200 --> 00:10:39,519
but here this is just

224
00:10:36,560 --> 00:10:41,040
this is because you just assume that the

225
00:10:39,519 --> 00:10:43,680
pvp is

226
00:10:41,040 --> 00:10:44,240
can be developed as a new protocol but

227
00:10:43,680 --> 00:10:46,959
here you

228
00:10:44,240 --> 00:10:48,320
just use the proper the possible

229
00:10:46,959 --> 00:10:50,160
mechanism

230
00:10:48,320 --> 00:10:53,360
but i think there's more options that

231
00:10:50,160 --> 00:10:53,360
can be taken into account

232
00:10:57,680 --> 00:11:02,079
if we have no more questions we'll move

233
00:10:59,920 --> 00:11:02,079
on

234
00:11:02,560 --> 00:11:08,079
i would really advise authors to

235
00:11:05,680 --> 00:11:09,439
articulate who is the end consumer of

236
00:11:08,079 --> 00:11:12,640
this data because

237
00:11:09,440 --> 00:11:14,160
networking devices don't usually do

238
00:11:12,640 --> 00:11:16,319
anything this kind of information

239
00:11:14,160 --> 00:11:17,839
so if the end consumer of the data is

240
00:11:16,320 --> 00:11:20,720
kind of nms

241
00:11:17,839 --> 00:11:22,640
the real question would be why not use

242
00:11:20,720 --> 00:11:24,240
south north communication we already

243
00:11:22,640 --> 00:11:28,560
have highly optimized

244
00:11:24,240 --> 00:11:29,519
channels such as grpc and i really like

245
00:11:28,560 --> 00:11:31,680
to see

246
00:11:29,519 --> 00:11:34,480
better justification of doing it

247
00:11:31,680 --> 00:11:43,839
horizontally rather than vertically

248
00:11:34,480 --> 00:11:43,839
and hopefully on the list

249
00:11:44,399 --> 00:11:47,760
jeff i thanks for your comments i think

250
00:11:46,800 --> 00:11:50,240
that's you

251
00:11:47,760 --> 00:11:51,120
uh in fact in the previous page we

252
00:11:50,240 --> 00:11:54,480
talked about this

253
00:11:51,120 --> 00:11:58,160
the reason to introduce the west

254
00:11:54,480 --> 00:12:01,760
east network monitoring and also i

255
00:11:58,160 --> 00:12:04,719
agree with this one and also that's uh

256
00:12:01,760 --> 00:12:06,160
we we we think this protocol should uh

257
00:12:04,720 --> 00:12:10,000
light the protocol

258
00:12:06,160 --> 00:12:12,560
yeah but i think this is the possible

259
00:12:10,000 --> 00:12:14,800
infection effect on the existing

260
00:12:12,560 --> 00:12:18,160
operation of protein protocols

261
00:12:14,800 --> 00:12:18,160
should be taken into account

262
00:12:18,240 --> 00:12:20,560
thank you

263
00:12:22,560 --> 00:12:29,760
jeff back to the discussion in idr

264
00:12:25,600 --> 00:12:33,279
of every protocol has to have

265
00:12:29,760 --> 00:12:36,399
a mechanism like x

266
00:12:33,279 --> 00:12:38,480
instead this abstracts the mechanism

267
00:12:36,399 --> 00:12:42,160
so that's what i meant when i said i

268
00:12:38,480 --> 00:12:42,160
kind of like it architecturally

269
00:12:45,360 --> 00:12:47,920
point taking

270
00:12:50,839 --> 00:12:53,839
terrorists

271
00:12:57,200 --> 00:13:03,760
hi are you bringing up the uh the slides

272
00:13:00,399 --> 00:13:06,800
to share or should i uh yeah i am

273
00:13:03,760 --> 00:13:07,120
i am thanks okay so yeah so after seeing

274
00:13:06,800 --> 00:13:10,079
uh

275
00:13:07,120 --> 00:13:12,000
pap and uh we we we started seeing that

276
00:13:10,079 --> 00:13:12,638
on the anime mailing list i thought i'd

277
00:13:12,000 --> 00:13:16,240
uh

278
00:13:12,639 --> 00:13:18,560
you know kind of a debrief uh rtg

279
00:13:16,240 --> 00:13:21,279
working group on the work we've done for

280
00:13:18,560 --> 00:13:24,160
grasp which i think is already providing

281
00:13:21,279 --> 00:13:24,639
everything and more that pep is trying

282
00:13:24,160 --> 00:13:27,680
to do

283
00:13:24,639 --> 00:13:28,320
and that's going to be pretty soon as a

284
00:13:27,680 --> 00:13:31,359
standard

285
00:13:28,320 --> 00:13:33,360
um rfc um

286
00:13:31,360 --> 00:13:35,839
it's it's in the editor queue um next

287
00:13:33,360 --> 00:13:35,839
slide

288
00:13:38,560 --> 00:13:46,399
sorry right so just a quick

289
00:13:42,000 --> 00:13:49,440
rant in the beginning right so i mean

290
00:13:46,399 --> 00:13:52,079
so self-optimizing self-healing you know

291
00:13:49,440 --> 00:13:54,000
is is something that really you know

292
00:13:52,079 --> 00:13:55,760
our ancestors with the arpanet

293
00:13:54,000 --> 00:13:57,279
introduced right through the distributed

294
00:13:55,760 --> 00:13:59,600
routing protocols so

295
00:13:57,279 --> 00:14:02,160
it was really great but then really you

296
00:13:59,600 --> 00:14:02,959
know it went downhill from there we we

297
00:14:02,160 --> 00:14:06,319
started to

298
00:14:02,959 --> 00:14:09,199
evolve you know through sdn into more of

299
00:14:06,320 --> 00:14:11,040
um you know a revival of ss7 with the

300
00:14:09,199 --> 00:14:13,279
hierarchically centralized

301
00:14:11,040 --> 00:14:14,719
uh management uh and and obviously we

302
00:14:13,279 --> 00:14:16,000
know a lot of reason why that's

303
00:14:14,720 --> 00:14:18,480
necessary but

304
00:14:16,000 --> 00:14:20,560
we've seen how in parallel in the 80s

305
00:14:18,480 --> 00:14:22,160
through the 2000s others have taken on

306
00:14:20,560 --> 00:14:23,760
the step of building more

307
00:14:22,160 --> 00:14:26,079
you know a self-automating

308
00:14:23,760 --> 00:14:28,240
self-management

309
00:14:26,079 --> 00:14:29,599
optimizing networks like you know apple

310
00:14:28,240 --> 00:14:31,519
talk and then also

311
00:14:29,600 --> 00:14:33,120
ibm and others started the autonomous

312
00:14:31,519 --> 00:14:36,480
networking so we

313
00:14:33,120 --> 00:14:37,399
we basically in irtf and nmrg started to

314
00:14:36,480 --> 00:14:40,560
revive that

315
00:14:37,399 --> 00:14:41,839
self-automation and then started to

316
00:14:40,560 --> 00:14:44,479
standardize

317
00:14:41,839 --> 00:14:46,480
the you know building blocks for that in

318
00:14:44,480 --> 00:14:48,240
the animal working group and grasp

319
00:14:46,480 --> 00:14:50,720
is one of the building blocks of that

320
00:14:48,240 --> 00:14:52,480
and so i wanted to try to

321
00:14:50,720 --> 00:14:54,240
summarize maybe from a pragmatic

322
00:14:52,480 --> 00:14:57,199
perspective how it could be

323
00:14:54,240 --> 00:14:59,120
really quickly uh be introduced into

324
00:14:57,199 --> 00:14:59,920
running networks without necessarily

325
00:14:59,120 --> 00:15:01,440
having to

326
00:14:59,920 --> 00:15:05,439
use all the components that were

327
00:15:01,440 --> 00:15:05,440
standardizing in enema next slide

328
00:15:08,480 --> 00:15:13,199
so you know routers of many vendors had

329
00:15:11,839 --> 00:15:15,839
scripting support

330
00:15:13,199 --> 00:15:17,599
uh for automation often since the 2000s

331
00:15:15,839 --> 00:15:18,639
right so the first language probably was

332
00:15:17,600 --> 00:15:21,040
tickle

333
00:15:18,639 --> 00:15:21,839
i've seen that in in in many vendor

334
00:15:21,040 --> 00:15:24,560
routers

335
00:15:21,839 --> 00:15:26,320
uh now there are many more languages and

336
00:15:24,560 --> 00:15:26,800
that stuff has been widely used even

337
00:15:26,320 --> 00:15:28,959
before

338
00:15:26,800 --> 00:15:30,399
the advent of sdn to provide device

339
00:15:28,959 --> 00:15:33,279
local automation

340
00:15:30,399 --> 00:15:34,320
uh in which a script uh uses router

341
00:15:33,279 --> 00:15:37,199
internal cli

342
00:15:34,320 --> 00:15:38,399
and now uh hopefully also um you know

343
00:15:37,199 --> 00:15:40,399
yang interfaces

344
00:15:38,399 --> 00:15:43,199
locally to call it monitor some router

345
00:15:40,399 --> 00:15:44,959
behavior and trigger actions um and i

346
00:15:43,199 --> 00:15:46,319
could go on for a lot of you know

347
00:15:44,959 --> 00:15:49,040
interesting examples what's

348
00:15:46,320 --> 00:15:49,839
been done maybe in general scripting you

349
00:15:49,040 --> 00:15:51,839
know

350
00:15:49,839 --> 00:15:53,040
it's something that can run on the

351
00:15:51,839 --> 00:15:55,040
router itself

352
00:15:53,040 --> 00:15:56,560
can be built not only by the vendor but

353
00:15:55,040 --> 00:15:58,480
also by the customer and can have its

354
00:15:56,560 --> 00:15:58,880
own lifecycle independent of the router

355
00:15:58,480 --> 00:16:01,199
os

356
00:15:58,880 --> 00:16:05,040
right so that's basically what we have

357
00:16:01,199 --> 00:16:05,040
but so what's the next step next slide

358
00:16:06,399 --> 00:16:11,279
so how do you do uh across the land

359
00:16:09,360 --> 00:16:13,360
between adjacent routers or

360
00:16:11,279 --> 00:16:15,759
um you know even across the whole

361
00:16:13,360 --> 00:16:17,759
network east-west automation

362
00:16:15,759 --> 00:16:19,680
in a coordinated fashion in enema this

363
00:16:17,759 --> 00:16:21,040
is what we're calling autonomic service

364
00:16:19,680 --> 00:16:23,040
agents right so

365
00:16:21,040 --> 00:16:24,160
and the examples from which we really

366
00:16:23,040 --> 00:16:26,719
started a lot of

367
00:16:24,160 --> 00:16:29,120
you know animal work were pain points of

368
00:16:26,720 --> 00:16:30,079
automating security right so for example

369
00:16:29,120 --> 00:16:32,800
uh

370
00:16:30,079 --> 00:16:34,959
many routing protocols have kind of a

371
00:16:32,800 --> 00:16:37,519
symmetric key options and there are no

372
00:16:34,959 --> 00:16:39,199
uh you know automated key negotiation

373
00:16:37,519 --> 00:16:39,920
mechanisms and those are really very

374
00:16:39,199 --> 00:16:42,479
easy to do

375
00:16:39,920 --> 00:16:44,399
when you can discover a peer um and have

376
00:16:42,480 --> 00:16:45,279
a simple you know negotiation with the

377
00:16:44,399 --> 00:16:47,519
neighbor to

378
00:16:45,279 --> 00:16:49,360
set up a symmetric key and then you

379
00:16:47,519 --> 00:16:51,360
configure your routing protocols into

380
00:16:49,360 --> 00:16:52,399
that and even if the routing protocol

381
00:16:51,360 --> 00:16:54,639
doesn't have

382
00:16:52,399 --> 00:16:56,160
such security you can always you know

383
00:16:54,639 --> 00:16:58,079
configure ipsec

384
00:16:56,160 --> 00:16:59,439
an appropriate security association

385
00:16:58,079 --> 00:17:01,040
ipsec below it

386
00:16:59,440 --> 00:17:02,639
like you know and pay more other routing

387
00:17:01,040 --> 00:17:04,399
protocols that don't have that

388
00:17:02,639 --> 00:17:06,480
and you know you can go beyond routing

389
00:17:04,400 --> 00:17:07,199
protocols for self automation when you

390
00:17:06,480 --> 00:17:09,439
can

391
00:17:07,199 --> 00:17:11,120
communicate east west with with your

392
00:17:09,439 --> 00:17:13,120
peers right so mecsec

393
00:17:11,119 --> 00:17:14,159
a lot of interesting non-security

394
00:17:13,119 --> 00:17:16,079
automation

395
00:17:14,160 --> 00:17:18,160
um obviously my examples would come from

396
00:17:16,079 --> 00:17:21,359
multicast or qs

397
00:17:18,160 --> 00:17:22,240
but i very much liked the examples given

398
00:17:21,359 --> 00:17:25,678
in pep right

399
00:17:22,240 --> 00:17:27,599
so those would be ideal asas in enema

400
00:17:25,679 --> 00:17:29,200
if they would be specified out in terms

401
00:17:27,599 --> 00:17:30,959
of what's the actual negotiation that

402
00:17:29,200 --> 00:17:33,760
would need to happen to

403
00:17:30,960 --> 00:17:35,840
make bgp or other routing protocols

404
00:17:33,760 --> 00:17:38,240
operationally work better

405
00:17:35,840 --> 00:17:39,360
but when you look into this how do you

406
00:17:38,240 --> 00:17:41,360
build these things and

407
00:17:39,360 --> 00:17:42,959
you know before we did enema we

408
00:17:41,360 --> 00:17:45,199
experimented around this in

409
00:17:42,960 --> 00:17:46,320
one of fashions communication is very

410
00:17:45,200 --> 00:17:49,440
hard to script

411
00:17:46,320 --> 00:17:50,159
and repeatedly requires component that

412
00:17:49,440 --> 00:17:52,480
are common

413
00:17:50,160 --> 00:17:55,039
across all these automation use cases

414
00:17:52,480 --> 00:17:55,039
next slide

415
00:17:57,120 --> 00:18:00,879
so what are those right so the first

416
00:17:59,039 --> 00:18:02,720
requirement is really security right so

417
00:18:00,880 --> 00:18:04,240
you need some mutual keying material to

418
00:18:02,720 --> 00:18:06,480
authenticate the peers

419
00:18:04,240 --> 00:18:08,160
um and also for confidentiality for

420
00:18:06,480 --> 00:18:10,320
communication between them because

421
00:18:08,160 --> 00:18:12,880
as soon as you're starting to automate

422
00:18:10,320 --> 00:18:15,360
um these things uh you're really taking

423
00:18:12,880 --> 00:18:17,679
the control point of the human out of

424
00:18:15,360 --> 00:18:19,199
the picture that you know is using north

425
00:18:17,679 --> 00:18:21,120
cells communication

426
00:18:19,200 --> 00:18:22,400
to basically set up the coordinated

427
00:18:21,120 --> 00:18:25,199
behavior right so

428
00:18:22,400 --> 00:18:26,080
security for for anything that goes east

429
00:18:25,200 --> 00:18:28,080
west

430
00:18:26,080 --> 00:18:30,960
between the nodes to automate other

431
00:18:28,080 --> 00:18:32,559
things is is really very important

432
00:18:30,960 --> 00:18:34,640
and you know you really want to have a

433
00:18:32,559 --> 00:18:36,399
common easily extensible negotiation

434
00:18:34,640 --> 00:18:37,360
protocol right and peer discovery

435
00:18:36,400 --> 00:18:40,559
mechanisms

436
00:18:37,360 --> 00:18:42,320
link local and network wide and when you

437
00:18:40,559 --> 00:18:44,720
then want to do network-wide

438
00:18:42,320 --> 00:18:46,480
discovery of candidate peers to automate

439
00:18:44,720 --> 00:18:48,080
with uh you also

440
00:18:46,480 --> 00:18:50,160
would like to have routing protocol

441
00:18:48,080 --> 00:18:51,520
independent layer 3 reachability because

442
00:18:50,160 --> 00:18:52,559
you know one of the things you may want

443
00:18:51,520 --> 00:18:54,320
to do is really

444
00:18:52,559 --> 00:18:56,320
even start configuring the routing

445
00:18:54,320 --> 00:18:58,879
protocol not only securing it

446
00:18:56,320 --> 00:18:58,879
next slide

447
00:19:00,400 --> 00:19:04,799
so let's assume uh you know and i'll get

448
00:19:03,440 --> 00:19:06,559
back to that in a later slide the

449
00:19:04,799 --> 00:19:08,480
precondition for you know the

450
00:19:06,559 --> 00:19:10,240
the secure peer-to-peer communications

451
00:19:08,480 --> 00:19:12,799
there we've got the discovery

452
00:19:10,240 --> 00:19:14,559
and we've got the mutual trusted keying

453
00:19:12,799 --> 00:19:16,639
material so then obviously we've got the

454
00:19:14,559 --> 00:19:19,360
building blocks like tls or

455
00:19:16,640 --> 00:19:20,480
if you can survive packet loss dtls

456
00:19:19,360 --> 00:19:22,719
right so that's

457
00:19:20,480 --> 00:19:24,799
authenticated confidential communication

458
00:19:22,720 --> 00:19:26,160
so we don't need to invent anything new

459
00:19:24,799 --> 00:19:28,000
in there right so then comes the

460
00:19:26,160 --> 00:19:28,720
question so what else do we need for a

461
00:19:28,000 --> 00:19:30,480
common

462
00:19:28,720 --> 00:19:33,200
you know east-west communication

463
00:19:30,480 --> 00:19:34,480
protocols and in animal we looked into

464
00:19:33,200 --> 00:19:36,320
the building blocks that have been

465
00:19:34,480 --> 00:19:37,200
successful in the web layer and that was

466
00:19:36,320 --> 00:19:39,200
basically

467
00:19:37,200 --> 00:19:41,520
you know a data modeling language that

468
00:19:39,200 --> 00:19:44,400
was about embodied in the programming

469
00:19:41,520 --> 00:19:45,200
languages like json in javascript that's

470
00:19:44,400 --> 00:19:47,200
basically

471
00:19:45,200 --> 00:19:49,679
making a lot of communication

472
00:19:47,200 --> 00:19:51,840
negotiation very easy in the web layer

473
00:19:49,679 --> 00:19:52,799
and then you know a few simple

474
00:19:51,840 --> 00:19:55,520
primitives

475
00:19:52,799 --> 00:19:57,600
where you know in the application layer

476
00:19:55,520 --> 00:20:01,360
web layer it's rest through http

477
00:19:57,600 --> 00:20:04,000
and uris and so those two

478
00:20:01,360 --> 00:20:05,199
building blocks we try to emulate next

479
00:20:04,000 --> 00:20:07,600
slide

480
00:20:05,200 --> 00:20:09,200
in a more efficient fashion um for

481
00:20:07,600 --> 00:20:10,559
east-west communication between

482
00:20:09,200 --> 00:20:12,640
potentially even

483
00:20:10,559 --> 00:20:14,399
constrained devices like low-end routers

484
00:20:12,640 --> 00:20:17,200
iot devices and so on

485
00:20:14,400 --> 00:20:18,880
so what we used was what at that point

486
00:20:17,200 --> 00:20:19,520
in time a few years back when we started

487
00:20:18,880 --> 00:20:21,840
grasp

488
00:20:19,520 --> 00:20:23,440
was just upcoming and now obviously has

489
00:20:21,840 --> 00:20:25,360
gained a lot of attraction through the

490
00:20:23,440 --> 00:20:27,840
ietf which is cyborg

491
00:20:25,360 --> 00:20:29,439
which is a binary encoding of you know

492
00:20:27,840 --> 00:20:30,799
pretty much the same data structures

493
00:20:29,440 --> 00:20:32,880
that json has

494
00:20:30,799 --> 00:20:35,440
it does not only support textual but

495
00:20:32,880 --> 00:20:38,320
also much more compact binary data so

496
00:20:35,440 --> 00:20:40,080
it's an ideal evolution from you know

497
00:20:38,320 --> 00:20:42,399
all the binary protocols we love to

498
00:20:40,080 --> 00:20:44,960
build but without the ascii art but

499
00:20:42,400 --> 00:20:47,200
um actual you know schema languages like

500
00:20:44,960 --> 00:20:50,400
cddl to have formal

501
00:20:47,200 --> 00:20:50,960
definition of than the negotiation

502
00:20:50,400 --> 00:20:52,799
message

503
00:20:50,960 --> 00:20:54,559
that you're forming and obviously we

504
00:20:52,799 --> 00:20:55,520
didn't need to have the whole overhead

505
00:20:54,559 --> 00:20:57,840
of http

506
00:20:55,520 --> 00:20:58,960
or so to to build something like rest

507
00:20:57,840 --> 00:21:01,520
but we of course

508
00:20:58,960 --> 00:21:02,559
for the few primitives that grasp offers

509
00:21:01,520 --> 00:21:04,960
are simply using

510
00:21:02,559 --> 00:21:07,120
seabor uh message headers as well right

511
00:21:04,960 --> 00:21:10,080
so basically grasp is

512
00:21:07,120 --> 00:21:10,559
a very simple exercise in seabor where

513
00:21:10,080 --> 00:21:13,918
you know

514
00:21:10,559 --> 00:21:15,600
99 are what you know each of the

515
00:21:13,919 --> 00:21:17,520
automation application would do

516
00:21:15,600 --> 00:21:19,120
and grasp itself providing simple

517
00:21:17,520 --> 00:21:21,120
primitives

518
00:21:19,120 --> 00:21:24,879
and then obviously the registries that

519
00:21:21,120 --> 00:21:24,879
we're building with ayanna next slide

520
00:21:26,000 --> 00:21:30,400
so just as a simple example here just a

521
00:21:28,159 --> 00:21:31,600
simple message exchange from initiator

522
00:21:30,400 --> 00:21:33,760
to responder

523
00:21:31,600 --> 00:21:36,000
so i don't want to delve too much into

524
00:21:33,760 --> 00:21:38,640
the details here for time reasons but

525
00:21:36,000 --> 00:21:39,600
um x2 for example would be the iana

526
00:21:38,640 --> 00:21:41,280
registered

527
00:21:39,600 --> 00:21:43,199
application kind of a particular

528
00:21:41,280 --> 00:21:45,600
automation application where

529
00:21:43,200 --> 00:21:46,799
you know the initiator requests that and

530
00:21:45,600 --> 00:21:49,918
then for example

531
00:21:46,799 --> 00:21:53,120
the responder would respond uh with

532
00:21:49,919 --> 00:21:55,520
um you know some value of that a string

533
00:21:53,120 --> 00:21:56,559
and a numeric value and all of that is

534
00:21:55,520 --> 00:21:59,918
shown here

535
00:21:56,559 --> 00:22:00,879
in seabor um the schema would be defined

536
00:21:59,919 --> 00:22:03,600
in cddl

537
00:22:00,880 --> 00:22:03,919
and that would be simple binary messages

538
00:22:03,600 --> 00:22:05,760
uh

539
00:22:03,919 --> 00:22:09,039
pretty much as efficient as any of the

540
00:22:05,760 --> 00:22:11,280
existing binary protocols we built in

541
00:22:09,039 --> 00:22:13,840
you know the routing area in the ietf

542
00:22:11,280 --> 00:22:13,840
next slide

543
00:22:15,840 --> 00:22:23,199
so how we can discover grasp

544
00:22:20,480 --> 00:22:24,960
peers for setting up this automation

545
00:22:23,200 --> 00:22:27,039
obviously you know if we have

546
00:22:24,960 --> 00:22:29,039
simple things where a routing protocol

547
00:22:27,039 --> 00:22:30,240
like in bgp may already have a

548
00:22:29,039 --> 00:22:32,960
configured peer

549
00:22:30,240 --> 00:22:34,960
we can latch on to that but grasp itself

550
00:22:32,960 --> 00:22:36,640
comes with its own discovery mechanism

551
00:22:34,960 --> 00:22:39,280
so we've got the layer two

552
00:22:36,640 --> 00:22:40,159
grass multicast to announce or request

553
00:22:39,280 --> 00:22:41,840
objectives

554
00:22:40,159 --> 00:22:44,000
that's currently specified and

555
00:22:41,840 --> 00:22:45,120
standardized on top of ipv6 link local

556
00:22:44,000 --> 00:22:47,600
multicast

557
00:22:45,120 --> 00:22:50,000
and we can also do a whole network

558
00:22:47,600 --> 00:22:52,559
domain-wide multicast announcement

559
00:22:50,000 --> 00:22:53,600
or request objective like looking for

560
00:22:52,559 --> 00:22:56,000
services

561
00:22:53,600 --> 00:22:57,199
and that doesn't require any layer 3

562
00:22:56,000 --> 00:22:59,520
connectivity

563
00:22:57,200 --> 00:23:00,559
unicast or multicast instead it's a

564
00:22:59,520 --> 00:23:03,520
simple

565
00:23:00,559 --> 00:23:04,879
grass per hop forwarding and flooding

566
00:23:03,520 --> 00:23:07,440
agent that you know

567
00:23:04,880 --> 00:23:09,200
creates loopless flooding by a per

568
00:23:07,440 --> 00:23:10,320
unique message identifier so that's a

569
00:23:09,200 --> 00:23:12,080
very simple thing

570
00:23:10,320 --> 00:23:14,000
that could be added in a domain to all

571
00:23:12,080 --> 00:23:17,360
routers to enable

572
00:23:14,000 --> 00:23:19,600
self-automation and that adds to you

573
00:23:17,360 --> 00:23:23,840
know primitives flood and discovery to

574
00:23:19,600 --> 00:23:23,840
the grass primitives next slide

575
00:23:24,799 --> 00:23:28,000
so and this is basically the

576
00:23:26,240 --> 00:23:29,760
step-by-step you know what's the most

577
00:23:28,000 --> 00:23:30,240
simple way on how you can start with

578
00:23:29,760 --> 00:23:32,799
grasp

579
00:23:30,240 --> 00:23:33,679
all the way up to the full enema option

580
00:23:32,799 --> 00:23:35,520
right so

581
00:23:33,679 --> 00:23:36,960
the most simple thing of course is you

582
00:23:35,520 --> 00:23:40,240
just require

583
00:23:36,960 --> 00:23:42,559
you know lan um discovery so you just

584
00:23:40,240 --> 00:23:44,880
use a grasp layer to multicast

585
00:23:42,559 --> 00:23:47,279
you obviously you may already have some

586
00:23:44,880 --> 00:23:49,360
tls keying material

587
00:23:47,279 --> 00:23:51,360
and then basically grasp is a very

588
00:23:49,360 --> 00:23:52,399
simple standalone thing without anything

589
00:23:51,360 --> 00:23:54,639
to be added

590
00:23:52,400 --> 00:23:56,159
and that would be already you know a

591
00:23:54,640 --> 00:23:59,200
super set of what

592
00:23:56,159 --> 00:24:01,279
pap promises to do right so now we

593
00:23:59,200 --> 00:24:03,440
want to do uh layer three a white

594
00:24:01,279 --> 00:24:04,159
discovery so then you would need to add

595
00:24:03,440 --> 00:24:06,480
that this

596
00:24:04,159 --> 00:24:07,440
discovery agent that is forwarding the

597
00:24:06,480 --> 00:24:09,840
messages across

598
00:24:07,440 --> 00:24:11,760
layer 3 so you could auto configure then

599
00:24:09,840 --> 00:24:15,199
your igp across the domain

600
00:24:11,760 --> 00:24:17,200
with an appropriate grasp application

601
00:24:15,200 --> 00:24:19,360
we also have the autonomic control plane

602
00:24:17,200 --> 00:24:20,880
which is also a self build

603
00:24:19,360 --> 00:24:22,879
hop by hub virtual out of band

604
00:24:20,880 --> 00:24:24,159
management like you know automatically

605
00:24:22,880 --> 00:24:28,240
build brf

606
00:24:24,159 --> 00:24:30,000
um and that basically would allow to

607
00:24:28,240 --> 00:24:32,159
build all that and also have layer 3

608
00:24:30,000 --> 00:24:33,120
unicast connectivity to remote peers

609
00:24:32,159 --> 00:24:36,000
before

610
00:24:33,120 --> 00:24:38,000
you have any form of you know layer

611
00:24:36,000 --> 00:24:40,240
three unicast routing otherwise

612
00:24:38,000 --> 00:24:42,159
and finally there is obviously an

613
00:24:40,240 --> 00:24:44,799
automated way to create

614
00:24:42,159 --> 00:24:47,200
um you know your mutually trusted keying

615
00:24:44,799 --> 00:24:48,440
material we call that brewski

616
00:24:47,200 --> 00:24:52,880
and that of course is also

617
00:24:48,440 --> 00:24:52,880
self-configuring with the help of the

618
00:24:58,840 --> 00:25:01,840
acp

619
00:25:07,840 --> 00:25:15,360
2 400 lines of code test suite you know

620
00:25:11,520 --> 00:25:17,840
includes various asa examples

621
00:25:15,360 --> 00:25:20,879
on how to basically you know do build

622
00:25:17,840 --> 00:25:23,360
this self automation and documentation

623
00:25:20,880 --> 00:25:23,360
next slide

624
00:25:24,320 --> 00:25:28,720
so we really think that grass is ready

625
00:25:26,640 --> 00:25:30,559
to use and would be lovely if you know

626
00:25:28,720 --> 00:25:32,400
people interested in automation

627
00:25:30,559 --> 00:25:33,600
east-west communication like the use

628
00:25:32,400 --> 00:25:36,960
cases

629
00:25:33,600 --> 00:25:39,360
outlined in the pap document

630
00:25:36,960 --> 00:25:40,880
would for example concentrate on

631
00:25:39,360 --> 00:25:43,600
refining those in a way

632
00:25:40,880 --> 00:25:45,520
that they can actually build um as

633
00:25:43,600 --> 00:25:47,760
application of grasp right so i mean

634
00:25:45,520 --> 00:25:50,320
there is no need to reinvent

635
00:25:47,760 --> 00:25:51,039
that common communication protocol or

636
00:25:50,320 --> 00:25:52,960
hopefully

637
00:25:51,039 --> 00:25:54,240
using the best you know common knowledge

638
00:25:52,960 --> 00:25:57,440
of the itf c

639
00:25:54,240 --> 00:25:59,039
board tls the keying material right um

640
00:25:57,440 --> 00:26:00,720
so that that would be happy to do in

641
00:25:59,039 --> 00:26:02,559
conjunction between whoever

642
00:26:00,720 --> 00:26:04,080
is the experts on the use cases like

643
00:26:02,559 --> 00:26:06,320
routing protocol automation

644
00:26:04,080 --> 00:26:07,678
routing working group and enema to help

645
00:26:06,320 --> 00:26:10,399
with the formatting everything

646
00:26:07,679 --> 00:26:10,960
and you know yeah we really love to

647
00:26:10,400 --> 00:26:12,640
evolve

648
00:26:10,960 --> 00:26:14,159
you know our networks into something

649
00:26:12,640 --> 00:26:15,760
that's self-automating and doesn't

650
00:26:14,159 --> 00:26:18,480
always require the uh

651
00:26:15,760 --> 00:26:20,640
big sdn controller called mum to to do

652
00:26:18,480 --> 00:26:25,840
any form of automation

653
00:26:20,640 --> 00:26:25,840
and i think that's it

654
00:26:32,880 --> 00:26:36,559
oh yeah why don't you uh well should we

655
00:26:35,840 --> 00:26:39,678
uh

656
00:26:36,559 --> 00:26:43,440
get questions from g first i think

657
00:26:39,679 --> 00:26:43,440
she was in the queue first

658
00:26:44,480 --> 00:26:53,840
uh g

659
00:26:56,799 --> 00:27:00,879
we cannot hear you please try to

660
00:27:01,760 --> 00:27:07,840
clean the queue so just drop

661
00:27:10,080 --> 00:27:13,199
oh i think she said maybe that he was in

662
00:27:12,559 --> 00:27:16,799
the queue

663
00:27:13,200 --> 00:27:20,880
accidentally so we'll just uh

664
00:27:16,799 --> 00:27:24,399
go ahead with robin okay uh

665
00:27:20,880 --> 00:27:27,360
uh robin from hawaii uh told us thanks

666
00:27:24,399 --> 00:27:27,678
very much for the information uh i think

667
00:27:27,360 --> 00:27:31,199
this

668
00:27:27,679 --> 00:27:34,960
is valuable for our reference to

669
00:27:31,200 --> 00:27:37,360
design the pap uh and here this

670
00:27:34,960 --> 00:27:38,640
because you know that we propose this

671
00:27:37,360 --> 00:27:42,559
the discussion

672
00:27:38,640 --> 00:27:45,120
uh on the in the in the php presentation

673
00:27:42,559 --> 00:27:46,879
because i uh according to my

674
00:27:45,120 --> 00:27:51,120
understanding is the grasp

675
00:27:46,880 --> 00:27:54,159
is is based on the tcp

676
00:27:51,120 --> 00:27:57,678
so i'm a little about about the

677
00:27:54,159 --> 00:28:00,799
resource resource assumption

678
00:27:57,679 --> 00:28:04,399
because you know that if the pep is used

679
00:28:00,799 --> 00:28:07,440
to locate the error of the pdp

680
00:28:04,399 --> 00:28:11,199
so maybe we have to set up the full mesh

681
00:28:07,440 --> 00:28:13,840
the the tcp appears with the

682
00:28:11,200 --> 00:28:15,279
uh fulfillment of the peers so i think

683
00:28:13,840 --> 00:28:18,240
that's maybe a

684
00:28:15,279 --> 00:28:19,120
challenging work for the pap because you

685
00:28:18,240 --> 00:28:21,760
know the pdp

686
00:28:19,120 --> 00:28:23,039
for mesh already proposed a challenge

687
00:28:21,760 --> 00:28:25,360
for the operation

688
00:28:23,039 --> 00:28:26,799
i think for the pvp is only for the

689
00:28:25,360 --> 00:28:29,279
network of monitoring

690
00:28:26,799 --> 00:28:30,240
so that is also to set up the full mesh

691
00:28:29,279 --> 00:28:33,760
tcp based

692
00:28:30,240 --> 00:28:34,720
up here so maybe this is a a little

693
00:28:33,760 --> 00:28:38,240
concerned

694
00:28:34,720 --> 00:28:40,960
that's my point on this one so

695
00:28:38,240 --> 00:28:43,120
grasp itself doesn't really specify the

696
00:28:40,960 --> 00:28:44,080
underlying transport so we've basically

697
00:28:43,120 --> 00:28:47,120
outsourced that

698
00:28:44,080 --> 00:28:48,080
to a component we call the security and

699
00:28:47,120 --> 00:28:50,320
transport

700
00:28:48,080 --> 00:28:51,678
underlay for for grasp right we define

701
00:28:50,320 --> 00:28:54,480
grasp messages

702
00:28:51,679 --> 00:28:55,360
um and those can be you know put into

703
00:28:54,480 --> 00:28:58,640
tls

704
00:28:55,360 --> 00:28:59,840
they can be put into dtls they can be

705
00:28:58,640 --> 00:29:03,840
put into quick

706
00:28:59,840 --> 00:29:06,639
they can be put into any you know secure

707
00:29:03,840 --> 00:29:08,879
underlying transport protocol you want

708
00:29:06,640 --> 00:29:10,399
and then they can be nicely standardized

709
00:29:08,880 --> 00:29:12,640
in the itf

710
00:29:10,399 --> 00:29:14,399
of course you can also try to simply put

711
00:29:12,640 --> 00:29:17,600
the grass messages inside

712
00:29:14,399 --> 00:29:19,918
of uh udp or tcp or anything

713
00:29:17,600 --> 00:29:21,360
insecure and you can make it perfectly

714
00:29:19,919 --> 00:29:23,039
well work in your network you'll

715
00:29:21,360 --> 00:29:23,439
probably just have problems getting

716
00:29:23,039 --> 00:29:26,158
through

717
00:29:23,440 --> 00:29:28,000
the security area with you in the ietf

718
00:29:26,159 --> 00:29:29,840
to get it standardized and that

719
00:29:28,000 --> 00:29:31,919
isn't a grass problem that is something

720
00:29:29,840 --> 00:29:34,399
that is ipf expectation

721
00:29:31,919 --> 00:29:35,679
that would apply i think equally to any

722
00:29:34,399 --> 00:29:38,320
protocol like if you

723
00:29:35,679 --> 00:29:39,919
reinvented grasp and faulted pep um i

724
00:29:38,320 --> 00:29:42,000
think the same type of you know

725
00:29:39,919 --> 00:29:55,840
transport considerations in the ietf

726
00:29:42,000 --> 00:29:55,840
would apply

727
00:29:59,440 --> 00:30:03,679
so robin did you want to respond or

728
00:30:06,840 --> 00:30:09,840
oh

729
00:30:11,039 --> 00:30:15,039
okay well um at this point let's go with

730
00:30:13,520 --> 00:30:18,480
uh brian

731
00:30:15,039 --> 00:30:21,039
then what yeah hi

732
00:30:18,480 --> 00:30:23,360
um so the prototype code that taurus

733
00:30:21,039 --> 00:30:24,799
mentioned is my code and

734
00:30:23,360 --> 00:30:26,479
i should say that it's full of

735
00:30:24,799 --> 00:30:28,720
disclaimers saying this is um

736
00:30:26,480 --> 00:30:30,320
this is not yet ready for production use

737
00:30:28,720 --> 00:30:31,679
but you know that's a problem that could

738
00:30:30,320 --> 00:30:34,559
be solved probably

739
00:30:31,679 --> 00:30:35,520
what i wanted to comment on is i looked

740
00:30:34,559 --> 00:30:39,279
in one over

741
00:30:35,520 --> 00:30:42,879
tcp or tls at the moment um

742
00:30:39,279 --> 00:30:45,440
mainly tcp but i've looked at what would

743
00:30:42,880 --> 00:30:47,039
be involved in switching to udp

744
00:30:45,440 --> 00:30:49,120
the messages of course could perfectly

745
00:30:47,039 --> 00:30:50,640
well be wrapped up in udp packets and

746
00:30:49,120 --> 00:30:55,360
set

747
00:30:50,640 --> 00:30:58,559
but my impression was

748
00:30:55,360 --> 00:31:01,678
that all the overhead that tcp

749
00:30:58,559 --> 00:31:03,039
allegedly adds i would have to add back

750
00:31:01,679 --> 00:31:05,200
into my code

751
00:31:03,039 --> 00:31:06,960
just to make sure that udp messages were

752
00:31:05,200 --> 00:31:09,519
delivered to the right

753
00:31:06,960 --> 00:31:11,200
uh recipient to the right session the

754
00:31:09,519 --> 00:31:13,519
right thread and a threaded

755
00:31:11,200 --> 00:31:16,080
implementation

756
00:31:13,519 --> 00:31:17,039
and you would also have to put in more

757
00:31:16,080 --> 00:31:20,080
recovery logic

758
00:31:17,039 --> 00:31:22,158
because udp doesn't do that for you

759
00:31:20,080 --> 00:31:23,760
so i'm not at all convinced that there's

760
00:31:22,159 --> 00:31:26,799
an efficiency argument

761
00:31:23,760 --> 00:31:29,600
against using a transport layer

762
00:31:26,799 --> 00:31:31,200
that's all i wanted to say and i think

763
00:31:29,600 --> 00:31:32,000
you know through the years in enema

764
00:31:31,200 --> 00:31:34,080
we've seen a lot

765
00:31:32,000 --> 00:31:35,519
of opinions about transport layers so i

766
00:31:34,080 --> 00:31:36,399
think that the prudent thing is

767
00:31:35,519 --> 00:31:38,399
obviously

768
00:31:36,399 --> 00:31:40,639
to define the message protocol

769
00:31:38,399 --> 00:31:42,799
independent of the transport

770
00:31:40,640 --> 00:31:44,159
and the security as we've done in grasp

771
00:31:42,799 --> 00:31:46,480
and then basically

772
00:31:44,159 --> 00:31:48,399
let the chips of the itf fall whatever

773
00:31:46,480 --> 00:31:50,480
the wisdom is so i think if we had for

774
00:31:48,399 --> 00:31:52,479
example more iot people in here

775
00:31:50,480 --> 00:31:53,679
they would come and say that you know

776
00:31:52,480 --> 00:31:56,880
some even lower

777
00:31:53,679 --> 00:31:59,519
overhead um things that based on udp is

778
00:31:56,880 --> 00:32:01,519
really crucial and very low-end devices

779
00:31:59,519 --> 00:32:02,559
um you know that's why they did co-op to

780
00:32:01,519 --> 00:32:05,279
avoid tcp

781
00:32:02,559 --> 00:32:06,240
and that's that's based on udp so i

782
00:32:05,279 --> 00:32:08,480
don't think there is

783
00:32:06,240 --> 00:32:10,240
you know a industry-wide common

784
00:32:08,480 --> 00:32:10,720
understanding of what the best transport

785
00:32:10,240 --> 00:32:12,640
is

786
00:32:10,720 --> 00:32:15,840
and that's how we why we did grasp the

787
00:32:12,640 --> 00:32:15,840
way we did it

788
00:32:22,799 --> 00:32:31,279
jimmy from hobby hello

789
00:32:28,000 --> 00:32:31,840
okay also i know the uh actual comments

790
00:32:31,279 --> 00:32:34,240
i just

791
00:32:31,840 --> 00:32:35,360
use thanks very much for the college and

792
00:32:34,240 --> 00:32:37,679
the governor's

793
00:32:35,360 --> 00:32:38,719
collaboration of the transporter usage

794
00:32:37,679 --> 00:32:42,480
for the anima

795
00:32:38,720 --> 00:32:44,960
so we can we will go on to check this

796
00:32:42,480 --> 00:32:46,480
information and also to go on to

797
00:32:44,960 --> 00:32:50,399
thinking about the design

798
00:32:46,480 --> 00:32:52,240
using the grasp for the path

799
00:32:50,399 --> 00:32:53,760
yeah i mean as i said i would i would

800
00:32:52,240 --> 00:32:54,640
really love if you folks would think

801
00:32:53,760 --> 00:32:57,279
about

802
00:32:54,640 --> 00:32:59,840
you know refining and building and

803
00:32:57,279 --> 00:33:01,440
proposing drafts for the actual examples

804
00:32:59,840 --> 00:33:03,840
you gave in terms of bgp

805
00:33:01,440 --> 00:33:05,600
and i forgot the other one in terms of

806
00:33:03,840 --> 00:33:06,639
you know what automation it is you want

807
00:33:05,600 --> 00:33:09,039
to do right

808
00:33:06,640 --> 00:33:10,159
within enema obviously you saw this

809
00:33:09,039 --> 00:33:12,158
slide on the

810
00:33:10,159 --> 00:33:14,320
securing protocol so if i had more

811
00:33:12,159 --> 00:33:14,640
cycles and some other folks would love

812
00:33:14,320 --> 00:33:16,799
to

813
00:33:14,640 --> 00:33:19,519
basically build those asas there are a

814
00:33:16,799 --> 00:33:22,158
couple of asa examples um

815
00:33:19,519 --> 00:33:25,120
that brian said are in code we're also

816
00:33:22,159 --> 00:33:28,320
having some asa with negotiation

817
00:33:25,120 --> 00:33:30,158
coming into rfcs um so i think we we're

818
00:33:28,320 --> 00:33:31,840
starting to build this framework of the

819
00:33:30,159 --> 00:33:33,840
self-automation thing so

820
00:33:31,840 --> 00:33:35,678
would really invite anybody from the

821
00:33:33,840 --> 00:33:37,360
routing working group interested in that

822
00:33:35,679 --> 00:33:39,360
automation to

823
00:33:37,360 --> 00:33:40,559
see what they are interested to

824
00:33:39,360 --> 00:33:42,719
contribute and

825
00:33:40,559 --> 00:33:44,720
they wouldn't need to worry about the

826
00:33:42,720 --> 00:33:48,080
encoding crap

827
00:33:44,720 --> 00:33:53,840
which we could happily take care of

828
00:33:48,080 --> 00:33:53,840
okay happy to do

829
00:33:58,880 --> 00:34:03,039
uh yeah thanks a lot i mean this this

830
00:34:00,640 --> 00:34:06,080
does seem like a a pretty good way to

831
00:34:03,039 --> 00:34:09,119
bootstrap the

832
00:34:06,080 --> 00:34:12,078
sort of the use cases and

833
00:34:09,119 --> 00:34:13,679
you know we could spend a year or two

834
00:34:12,079 --> 00:34:16,960
discussing

835
00:34:13,679 --> 00:34:19,359
uh encodings for for pap

836
00:34:16,960 --> 00:34:20,320
uh but instead you know it makes sense

837
00:34:19,359 --> 00:34:22,879
to

838
00:34:20,320 --> 00:34:24,240
yeah try these use cases in the existing

839
00:34:22,879 --> 00:34:27,598
encoding

840
00:34:24,239 --> 00:34:29,118
uh you know see

841
00:34:27,599 --> 00:34:30,639
it seems like you would get a lot of

842
00:34:29,119 --> 00:34:33,679
benefit from a reliable

843
00:34:30,639 --> 00:34:35,280
transport to begin with you wouldn't

844
00:34:33,679 --> 00:34:36,480
have to worry about a lot of protocol

845
00:34:35,280 --> 00:34:38,800
stuff if you could

846
00:34:36,480 --> 00:34:40,079
just be sure that messages were getting

847
00:34:38,800 --> 00:34:45,040
received

848
00:34:40,079 --> 00:34:48,079
um so so you know that that would be

849
00:34:45,040 --> 00:34:51,279
uh i think a pretty good way to

850
00:34:48,079 --> 00:34:53,440
to get this uh well bootstrapped as i

851
00:34:51,280 --> 00:34:55,440
said or moving moving along faster

852
00:34:53,440 --> 00:34:57,839
with you know solid more convincing use

853
00:34:55,440 --> 00:34:57,839
cases

854
00:34:58,640 --> 00:35:01,759
yeah i i i'm trying to remember there

855
00:35:00,320 --> 00:35:03,599
was this one

856
00:35:01,760 --> 00:35:04,960
effort to try to unified and build

857
00:35:03,599 --> 00:35:06,480
better you know

858
00:35:04,960 --> 00:35:08,720
common security for the different

859
00:35:06,480 --> 00:35:11,680
routing protocols and i think that ended

860
00:35:08,720 --> 00:35:12,160
in pretty much nothing so you know if if

861
00:35:11,680 --> 00:35:13,759
people

862
00:35:12,160 --> 00:35:15,598
also think that the securing of the

863
00:35:13,760 --> 00:35:16,000
router routing protocol is still

864
00:35:15,599 --> 00:35:17,520
something

865
00:35:16,000 --> 00:35:19,680
that you know the industry struggles

866
00:35:17,520 --> 00:35:21,599
with i you know i haven't followed track

867
00:35:19,680 --> 00:35:23,279
uh with that you know beside the other

868
00:35:21,599 --> 00:35:24,960
operational examples given in the pep

869
00:35:23,280 --> 00:35:25,280
draft right i think the securing might

870
00:35:24,960 --> 00:35:28,839
be

871
00:35:25,280 --> 00:35:31,839
something that could be most easily done

872
00:35:28,839 --> 00:35:31,839
upfront

873
00:35:33,839 --> 00:35:45,839
do you have a comment jeff house

874
00:35:47,280 --> 00:35:51,119
uh go ahead jeff i just wanted to read

875
00:35:50,560 --> 00:35:53,599
that

876
00:35:51,119 --> 00:35:56,240
edward we thank starless for great

877
00:35:53,599 --> 00:35:56,240
presentation

878
00:35:56,839 --> 00:35:59,839
thanks

879
00:36:05,440 --> 00:36:09,440
thanks so much starla great presentation

880
00:36:07,839 --> 00:36:11,200
and

881
00:36:09,440 --> 00:36:13,839
looking forward to more cooperation this

882
00:36:11,200 --> 00:36:13,839
area

883
00:36:14,320 --> 00:36:29,440
so we are continuing with olivier

884
00:36:26,160 --> 00:36:33,040
thank you do you hear me ah yes

885
00:36:29,440 --> 00:36:33,440
yes okay so this is um a presentation of

886
00:36:33,040 --> 00:36:35,359
uh

887
00:36:33,440 --> 00:36:38,079
working progress which is a paper that

888
00:36:35,359 --> 00:36:39,359
was uh published a few weeks ago this is

889
00:36:38,079 --> 00:36:41,119
joint work with

890
00:36:39,359 --> 00:36:42,960
chain contact according randy busch

891
00:36:41,119 --> 00:36:47,920
lauren van bever

892
00:36:42,960 --> 00:36:50,079
and myself next slide so

893
00:36:47,920 --> 00:36:51,920
if we look at the evolution of the

894
00:36:50,079 --> 00:36:54,560
routing protocols

895
00:36:51,920 --> 00:36:55,839
it's clear that they evolve evolved they

896
00:36:54,560 --> 00:36:56,960
evolve regularly

897
00:36:55,839 --> 00:36:58,960
and they need to address new

898
00:36:56,960 --> 00:36:59,440
requirements and as an example i looked

899
00:36:58,960 --> 00:37:01,440
at

900
00:36:59,440 --> 00:37:04,960
what's happening in the rfcs that we

901
00:37:01,440 --> 00:37:06,800
have published for bgp pim and ospf

902
00:37:04,960 --> 00:37:09,280
during the last two decades and i just

903
00:37:06,800 --> 00:37:12,320
granted the number of must and should

904
00:37:09,280 --> 00:37:14,400
that occur in our rfcs and we see that

905
00:37:12,320 --> 00:37:16,160
the complexity of the protocol increases

906
00:37:14,400 --> 00:37:18,160
over time

907
00:37:16,160 --> 00:37:19,359
and then the question is what do we do

908
00:37:18,160 --> 00:37:21,598
as a community to

909
00:37:19,359 --> 00:37:23,520
tackle this increase in complexity and

910
00:37:21,599 --> 00:37:26,000
this extensibility of the protocol

911
00:37:23,520 --> 00:37:26,000
next slide

912
00:37:27,599 --> 00:37:30,640
so if we look at the evolution and the

913
00:37:29,760 --> 00:37:33,839
standardization

914
00:37:30,640 --> 00:37:34,879
within the itf and this is an example

915
00:37:33,839 --> 00:37:37,440
that we looked at

916
00:37:34,880 --> 00:37:39,520
the idea working group and we tried to

917
00:37:37,440 --> 00:37:42,160
understand what's the delay between

918
00:37:39,520 --> 00:37:43,280
the first id about a new extension to

919
00:37:42,160 --> 00:37:46,078
bgp

920
00:37:43,280 --> 00:37:47,440
and the publication of the rfc and on

921
00:37:46,079 --> 00:37:50,000
the figure you showed that

922
00:37:47,440 --> 00:37:51,680
the standardization delay for some rfcs

923
00:37:50,000 --> 00:37:54,320
takes up to 10 years

924
00:37:51,680 --> 00:37:54,720
and the median delay is about 3.5 years

925
00:37:54,320 --> 00:37:57,119
so

926
00:37:54,720 --> 00:37:58,799
every time we have a new id that needs

927
00:37:57,119 --> 00:38:01,359
to get into bgp we

928
00:37:58,800 --> 00:38:03,040
we discuss about it for several years

929
00:38:01,359 --> 00:38:07,839
before it gets implemented

930
00:38:03,040 --> 00:38:07,839
and before it gets deployed next slide

931
00:38:09,760 --> 00:38:12,800
and as a solution what what do we do

932
00:38:12,400 --> 00:38:16,000
when

933
00:38:12,800 --> 00:38:18,720
we want to deploy extensions basically

934
00:38:16,000 --> 00:38:20,320
we have networks with multiple vendors

935
00:38:18,720 --> 00:38:21,439
and each vendor has its own

936
00:38:20,320 --> 00:38:23,839
configuration

937
00:38:21,440 --> 00:38:26,079
command and so as an operator we need to

938
00:38:23,839 --> 00:38:27,119
tackle this diversity in configuration

939
00:38:26,079 --> 00:38:29,920
comments

940
00:38:27,119 --> 00:38:31,040
and the solution to that is to go with

941
00:38:29,920 --> 00:38:33,359
netconf and yang

942
00:38:31,040 --> 00:38:34,240
but this works only for features that

943
00:38:33,359 --> 00:38:37,759
are configured

944
00:38:34,240 --> 00:38:37,759
inside the network next slide

945
00:38:38,960 --> 00:38:43,839
and we've seen over the last years many

946
00:38:41,520 --> 00:38:47,359
examples such as this one from

947
00:38:43,839 --> 00:38:49,839
robert and others asking new bgp

948
00:38:47,359 --> 00:38:51,598
options and new bgp extensions that that

949
00:38:49,839 --> 00:38:51,920
have been discussed for several years

950
00:38:51,599 --> 00:38:55,040
and

951
00:38:51,920 --> 00:38:57,359
in this example the the document was

952
00:38:55,040 --> 00:38:59,200
requesting a new bgp

953
00:38:57,359 --> 00:39:01,119
attribute that would allow to encode

954
00:38:59,200 --> 00:39:01,919
geolocation and other types of

955
00:39:01,119 --> 00:39:03,920
information

956
00:39:01,920 --> 00:39:04,960
eventually it was not accepted by the

957
00:39:03,920 --> 00:39:06,560
working group

958
00:39:04,960 --> 00:39:08,000
and it was never standardized and

959
00:39:06,560 --> 00:39:09,839
implemented but

960
00:39:08,000 --> 00:39:11,680
there are use cases and there are

961
00:39:09,839 --> 00:39:13,200
operators maybe small ones they would

962
00:39:11,680 --> 00:39:14,799
like to have these kind of features and

963
00:39:13,200 --> 00:39:16,078
they cannot have this kind of features

964
00:39:14,800 --> 00:39:18,000
because they are they have not been

965
00:39:16,079 --> 00:39:20,160
standardized within the itf

966
00:39:18,000 --> 00:39:21,520
and they have not been adopted by the by

967
00:39:20,160 --> 00:39:24,000
everyone

968
00:39:21,520 --> 00:39:24,000
next slide

969
00:39:25,040 --> 00:39:28,480
so the question that we ask ourselves in

970
00:39:26,960 --> 00:39:31,680
in this paper is that

971
00:39:28,480 --> 00:39:33,040
is there a better way to organize bgp

972
00:39:31,680 --> 00:39:34,720
implementation and routing

973
00:39:33,040 --> 00:39:36,000
implementation in general

974
00:39:34,720 --> 00:39:38,560
so that we can address this

975
00:39:36,000 --> 00:39:41,200
extensibility and the flexibility which

976
00:39:38,560 --> 00:39:44,720
is required by network operators

977
00:39:41,200 --> 00:39:46,560
and we propose xbgp as a paradigm shift

978
00:39:44,720 --> 00:39:48,160
for bgp implementation but

979
00:39:46,560 --> 00:39:51,680
the idea is applied to other routing

980
00:39:48,160 --> 00:39:51,680
protocols as well next slide

981
00:39:53,119 --> 00:40:00,079
so what we propose is that each xbgp

982
00:39:57,040 --> 00:40:01,680
router would expose a simple api that

983
00:40:00,079 --> 00:40:04,000
allows to dynamically extend the

984
00:40:01,680 --> 00:40:06,399
protocol with platform independent code

985
00:40:04,000 --> 00:40:07,520
that we call plugins and these plugins

986
00:40:06,400 --> 00:40:09,599
can be developed by

987
00:40:07,520 --> 00:40:10,800
network vendors but also by network

988
00:40:09,599 --> 00:40:13,680
operators

989
00:40:10,800 --> 00:40:15,680
so that they can extend the features of

990
00:40:13,680 --> 00:40:16,319
the bgp protocol that are used inside

991
00:40:15,680 --> 00:40:18,799
our network

992
00:40:16,319 --> 00:40:20,079
by downloading extension code directly

993
00:40:18,800 --> 00:40:22,240
on the routers

994
00:40:20,079 --> 00:40:24,319
and the solution that we propose is that

995
00:40:22,240 --> 00:40:25,279
to have a plan for a vendor independent

996
00:40:24,319 --> 00:40:27,279
api

997
00:40:25,280 --> 00:40:28,960
that allows to run these extensions on

998
00:40:27,280 --> 00:40:33,040
different vendors on

999
00:40:28,960 --> 00:40:33,040
routers from different vendors next

1000
00:40:36,839 --> 00:40:40,799
slide

1001
00:40:38,319 --> 00:40:41,680
so different routers expose the the same

1002
00:40:40,800 --> 00:40:44,319
api and you

1003
00:40:41,680 --> 00:40:45,680
you could consider a routing protocol

1004
00:40:44,319 --> 00:40:48,560
implementation as a kind of

1005
00:40:45,680 --> 00:40:49,359
microkernel that exposes a set of system

1006
00:40:48,560 --> 00:40:51,680
calls

1007
00:40:49,359 --> 00:40:53,520
and by using this this system calls you

1008
00:40:51,680 --> 00:40:56,078
can extend the routing protocol

1009
00:40:53,520 --> 00:40:58,000
and we have done that with bgp and let

1010
00:40:56,079 --> 00:40:58,880
me explain you briefly how we did that

1011
00:40:58,000 --> 00:41:02,400
with bgp

1012
00:40:58,880 --> 00:41:05,040
and how the solution works so next slide

1013
00:41:02,400 --> 00:41:08,160
so if you look at the bgp specification

1014
00:41:05,040 --> 00:41:10,560
in the bgp specification there is no api

1015
00:41:08,160 --> 00:41:11,359
that every bgp implementation should

1016
00:41:10,560 --> 00:41:14,040
implement

1017
00:41:11,359 --> 00:41:15,520
but if you go more deeply in the rfc

1018
00:41:14,040 --> 00:41:17,440
4271

1019
00:41:15,520 --> 00:41:18,880
you can see that the processing of the

1020
00:41:17,440 --> 00:41:21,040
bgp messages

1021
00:41:18,880 --> 00:41:22,640
follow the workflow that all bgp

1022
00:41:21,040 --> 00:41:25,119
implementation needs to

1023
00:41:22,640 --> 00:41:27,040
apply so typically what happens is that

1024
00:41:25,119 --> 00:41:28,319
when you receive a bgp message from your

1025
00:41:27,040 --> 00:41:30,560
peer on the left

1026
00:41:28,319 --> 00:41:32,560
it first go to the import filters and

1027
00:41:30,560 --> 00:41:34,319
you have an attribine that needs to be

1028
00:41:32,560 --> 00:41:37,759
maintained by the water

1029
00:41:34,319 --> 00:41:40,160
then the the routes that are accepted

1030
00:41:37,760 --> 00:41:41,599
by the by the import filters will be

1031
00:41:40,160 --> 00:41:43,680
placed in the lock rib

1032
00:41:41,599 --> 00:41:44,960
and then the lock rip contains is a data

1033
00:41:43,680 --> 00:41:46,078
structure that contains all the

1034
00:41:44,960 --> 00:41:48,000
acceptable routes

1035
00:41:46,079 --> 00:41:49,760
it runs through the bgp decision process

1036
00:41:48,000 --> 00:41:52,160
that select the best route

1037
00:41:49,760 --> 00:41:54,000
towards each prefix then the best route

1038
00:41:52,160 --> 00:41:57,040
are downloaded in the field

1039
00:41:54,000 --> 00:41:59,040
and then we we use the export filter to

1040
00:41:57,040 --> 00:42:00,960
send new messages to the peer

1041
00:41:59,040 --> 00:42:02,319
so by looking at that by looking at this

1042
00:42:00,960 --> 00:42:05,440
workflow we can

1043
00:42:02,319 --> 00:42:08,400
identify next slightly several places

1044
00:42:05,440 --> 00:42:08,880
inside the the implementation that are

1045
00:42:08,400 --> 00:42:12,079
shown

1046
00:42:08,880 --> 00:42:14,720
with the um the green circles

1047
00:42:12,079 --> 00:42:16,800
where you have you you do special

1048
00:42:14,720 --> 00:42:18,560
processing on the bgp messages

1049
00:42:16,800 --> 00:42:20,400
and these are the key locations of any

1050
00:42:18,560 --> 00:42:23,520
bgp implementation that you

1051
00:42:20,400 --> 00:42:24,160
could want to modify if you wanted to

1052
00:42:23,520 --> 00:42:28,839
implement

1053
00:42:24,160 --> 00:42:30,560
new stuff in a bgp implementation next

1054
00:42:28,839 --> 00:42:32,640
slide

1055
00:42:30,560 --> 00:42:34,400
so let's look at an example and coming

1056
00:42:32,640 --> 00:42:36,879
back to uh robert trazuk

1057
00:42:34,400 --> 00:42:37,920
geolocation attribute so this is

1058
00:42:36,880 --> 00:42:41,040
basically a

1059
00:42:37,920 --> 00:42:42,880
bgp attribute that allows to encode

1060
00:42:41,040 --> 00:42:44,560
the geographical coordinates of the

1061
00:42:42,880 --> 00:42:46,480
routers where you have learned

1062
00:42:44,560 --> 00:42:49,520
an external bgp route and then you

1063
00:42:46,480 --> 00:42:52,240
distribute that inside your your es

1064
00:42:49,520 --> 00:42:54,240
so if i want to to add this attribute to

1065
00:42:52,240 --> 00:42:56,160
a bgp implementation

1066
00:42:54,240 --> 00:42:57,919
and i want to implement that using a

1067
00:42:56,160 --> 00:42:59,520
plugin so that code that can be

1068
00:42:57,920 --> 00:43:00,000
downloaded on the router what do i need

1069
00:42:59,520 --> 00:43:01,759
to do

1070
00:43:00,000 --> 00:43:03,520
i need to be able to decode the

1071
00:43:01,760 --> 00:43:05,200
geolocation attribute

1072
00:43:03,520 --> 00:43:06,720
i need to be able to compute in the

1073
00:43:05,200 --> 00:43:09,279
decision process for example the

1074
00:43:06,720 --> 00:43:11,598
geographical distance between

1075
00:43:09,280 --> 00:43:12,800
the road that i've received and multiple

1076
00:43:11,599 --> 00:43:13,680
routes that i've received with the

1077
00:43:12,800 --> 00:43:15,920
geolocation

1078
00:43:13,680 --> 00:43:18,078
attribute and then i need to be able to

1079
00:43:15,920 --> 00:43:20,800
send the geolocation attribute to my

1080
00:43:18,079 --> 00:43:26,160
peers over ibgp sessions

1081
00:43:20,800 --> 00:43:27,280
how do i do that next slide please so i

1082
00:43:26,160 --> 00:43:29,440
will inject

1083
00:43:27,280 --> 00:43:30,640
these different code inside the bgp

1084
00:43:29,440 --> 00:43:34,000
implementation

1085
00:43:30,640 --> 00:43:35,598
at the location so the decoding will be

1086
00:43:34,000 --> 00:43:38,720
part of the code

1087
00:43:35,599 --> 00:43:40,720
that receives bgp message from the pier

1088
00:43:38,720 --> 00:43:42,720
the locating the nearest router will be

1089
00:43:40,720 --> 00:43:44,640
part of the bgp decision process

1090
00:43:42,720 --> 00:43:48,078
and the serialization will be part of

1091
00:43:44,640 --> 00:43:51,279
the code that sends messages to the peer

1092
00:43:48,079 --> 00:43:53,760
now the question is how can i execute

1093
00:43:51,280 --> 00:43:54,640
a code that comes from the network

1094
00:43:53,760 --> 00:43:56,800
operator

1095
00:43:54,640 --> 00:43:58,000
on routers from multiple vendors and

1096
00:43:56,800 --> 00:44:01,040
next slide please so the

1097
00:43:58,000 --> 00:44:03,760
the solution that we use is that

1098
00:44:01,040 --> 00:44:05,520
so we have we add uh libx bgp which

1099
00:44:03,760 --> 00:44:07,680
allows to

1100
00:44:05,520 --> 00:44:09,680
to connect to data structures in the

1101
00:44:07,680 --> 00:44:11,279
routers and extract additional

1102
00:44:09,680 --> 00:44:12,960
information from the router such as the

1103
00:44:11,280 --> 00:44:16,720
configuration file

1104
00:44:12,960 --> 00:44:19,680
next slide so now to execute the plugin

1105
00:44:16,720 --> 00:44:21,919
what do we do is that we will use ebpf

1106
00:44:19,680 --> 00:44:23,598
so ebpf is a virtual machine that is

1107
00:44:21,920 --> 00:44:25,920
part of the linux kernel

1108
00:44:23,599 --> 00:44:26,720
and this virtual machine allows you to

1109
00:44:25,920 --> 00:44:29,040
execute

1110
00:44:26,720 --> 00:44:30,240
platform independent code inside the

1111
00:44:29,040 --> 00:44:32,319
linux kernel

1112
00:44:30,240 --> 00:44:33,919
with some security properties and what

1113
00:44:32,319 --> 00:44:37,119
we have done is that we have added

1114
00:44:33,920 --> 00:44:39,119
these ebpf virtual machines at the the

1115
00:44:37,119 --> 00:44:40,000
five insertion points that are shown in

1116
00:44:39,119 --> 00:44:42,480
the slide

1117
00:44:40,000 --> 00:44:44,960
so that they can execute code that

1118
00:44:42,480 --> 00:44:47,599
implements the bgp extension so

1119
00:44:44,960 --> 00:44:49,280
in our case the three blocks of code to

1120
00:44:47,599 --> 00:44:50,960
decode the geolocation attribute to

1121
00:44:49,280 --> 00:44:52,560
locate the new restaurateur

1122
00:44:50,960 --> 00:44:54,240
and to serialize the geolocation

1123
00:44:52,560 --> 00:44:55,520
attribute to be able to send it to the

1124
00:44:54,240 --> 00:44:58,078
next pier

1125
00:44:55,520 --> 00:44:58,079
next slide

1126
00:44:59,520 --> 00:45:05,040
so what have we done we have added this

1127
00:45:02,560 --> 00:45:08,078
feature to different bgp implementation

1128
00:45:05,040 --> 00:45:08,720
let me show you on the next slide how it

1129
00:45:08,079 --> 00:45:11,280
works

1130
00:45:08,720 --> 00:45:12,319
and what the cost of doing that so we

1131
00:45:11,280 --> 00:45:14,800
have adapted

1132
00:45:12,319 --> 00:45:17,040
this approach so the xbgp approach to

1133
00:45:14,800 --> 00:45:19,200
two open source bgp implementation that

1134
00:45:17,040 --> 00:45:21,279
are bird and far rotting

1135
00:45:19,200 --> 00:45:22,799
so basically we had to do small changes

1136
00:45:21,280 --> 00:45:24,560
to the code base of these two

1137
00:45:22,800 --> 00:45:27,520
implementations

1138
00:45:24,560 --> 00:45:29,359
we have changed a few tens of lines to

1139
00:45:27,520 --> 00:45:30,480
implement the five insertion points that

1140
00:45:29,359 --> 00:45:32,480
i've mentioned

1141
00:45:30,480 --> 00:45:33,599
we have developed a plug-in api that

1142
00:45:32,480 --> 00:45:37,040
allows to

1143
00:45:33,599 --> 00:45:39,440
limix bgp to extract information for the

1144
00:45:37,040 --> 00:45:41,200
from the host such as the the neighbor

1145
00:45:39,440 --> 00:45:43,520
table and things like that

1146
00:45:41,200 --> 00:45:45,919
and then we have we added an existing

1147
00:45:43,520 --> 00:45:47,119
ebpa virtual machine and limix bgp so

1148
00:45:45,920 --> 00:45:49,280
with a few

1149
00:45:47,119 --> 00:45:50,800
androids or a few thousand lines of code

1150
00:45:49,280 --> 00:45:53,520
you have two very different

1151
00:45:50,800 --> 00:45:54,079
bgp implementation that expose the same

1152
00:45:53,520 --> 00:45:55,839
api

1153
00:45:54,079 --> 00:45:57,440
and which can run the same plugins and

1154
00:45:55,839 --> 00:46:01,520
the same extensible code

1155
00:45:57,440 --> 00:46:04,480
next slide

1156
00:46:01,520 --> 00:46:07,119
so to demonstrate the the feasibility of

1157
00:46:04,480 --> 00:46:09,359
the approach we have re-implemented

1158
00:46:07,119 --> 00:46:11,200
rot reflectors so the cluster the

1159
00:46:09,359 --> 00:46:13,359
different attributes that are used by

1160
00:46:11,200 --> 00:46:15,439
to do rot reflection and this costed us

1161
00:46:13,359 --> 00:46:17,520
about 300 lines of code

1162
00:46:15,440 --> 00:46:19,040
we have added new filters to do rot

1163
00:46:17,520 --> 00:46:21,119
origin validation

1164
00:46:19,040 --> 00:46:22,160
to support valet free pass check in data

1165
00:46:21,119 --> 00:46:24,319
centers

1166
00:46:22,160 --> 00:46:26,160
and we have implemented the geolocation

1167
00:46:24,319 --> 00:46:28,079
attribute and there are additional

1168
00:46:26,160 --> 00:46:29,118
information in the in the paper and

1169
00:46:28,079 --> 00:46:31,680
there is running code

1170
00:46:29,119 --> 00:46:31,680
next slide

1171
00:46:32,800 --> 00:46:39,280
so to to summarize with xbgp you can

1172
00:46:36,240 --> 00:46:41,040
think as of your bgp implementation and

1173
00:46:39,280 --> 00:46:43,119
more generally of your routing protocol

1174
00:46:41,040 --> 00:46:44,960
implementation as a kind of

1175
00:46:43,119 --> 00:46:46,960
microkernel operating system that

1176
00:46:44,960 --> 00:46:48,880
exposes an api which can

1177
00:46:46,960 --> 00:46:50,800
which allows network operators and

1178
00:46:48,880 --> 00:46:53,200
researchers to run

1179
00:46:50,800 --> 00:46:54,079
code that allows to extend the protocol

1180
00:46:53,200 --> 00:46:56,319
itself

1181
00:46:54,079 --> 00:46:57,280
so there is there are more information

1182
00:46:56,319 --> 00:46:59,520
in the paper

1183
00:46:57,280 --> 00:47:01,520
there is running code and we would be

1184
00:46:59,520 --> 00:47:02,560
interested in discussing with network

1185
00:47:01,520 --> 00:47:05,920
operators and

1186
00:47:02,560 --> 00:47:07,759
other bgp implementers uh to discuss the

1187
00:47:05,920 --> 00:47:08,880
approach and to see how the approach can

1188
00:47:07,760 --> 00:47:11,680
be improved

1189
00:47:08,880 --> 00:47:12,800
and can extend to other routing

1190
00:47:11,680 --> 00:47:25,839
protocols

1191
00:47:12,800 --> 00:47:25,839
thank you

1192
00:47:34,960 --> 00:47:39,839
jeff here mike

1193
00:47:44,800 --> 00:47:51,040
hopefully you can hear me this time yes

1194
00:47:48,240 --> 00:47:52,640
thank you uh so olivier thank you for

1195
00:47:51,040 --> 00:47:55,119
the presentation um

1196
00:47:52,640 --> 00:47:56,240
so i i think the the nice thing that is

1197
00:47:55,119 --> 00:47:59,680
an output of

1198
00:47:56,240 --> 00:48:00,558
this presentation is that uh yes plugins

1199
00:47:59,680 --> 00:48:02,558
can be done

1200
00:48:00,559 --> 00:48:04,160
for allowing code to be hooked

1201
00:48:02,559 --> 00:48:07,280
externally you know the linux kernel is

1202
00:48:04,160 --> 00:48:09,200
an excellent example of that

1203
00:48:07,280 --> 00:48:10,400
the the challenge i think that's not

1204
00:48:09,200 --> 00:48:12,078
really covered in the paper

1205
00:48:10,400 --> 00:48:15,119
or at least the presentation here of the

1206
00:48:12,079 --> 00:48:17,680
paper is most of the headache for bgp

1207
00:48:15,119 --> 00:48:18,400
is really incremental deployment issues

1208
00:48:17,680 --> 00:48:21,598
so

1209
00:48:18,400 --> 00:48:22,720
writing code isn't all that bad getting

1210
00:48:21,599 --> 00:48:24,800
code that can run

1211
00:48:22,720 --> 00:48:26,879
in implementations that are scattered

1212
00:48:24,800 --> 00:48:27,440
around the internet and follow b2b rules

1213
00:48:26,880 --> 00:48:30,960
in terms

1214
00:48:27,440 --> 00:48:31,760
of validation and such that's the main

1215
00:48:30,960 --> 00:48:34,400
challenge

1216
00:48:31,760 --> 00:48:36,319
so i agree that having plug-in

1217
00:48:34,400 --> 00:48:37,359
frameworks is actually a very useful

1218
00:48:36,319 --> 00:48:40,160
thing

1219
00:48:37,359 --> 00:48:42,960
but i think that's not necessarily the

1220
00:48:40,160 --> 00:48:42,960
hard problem here

1221
00:48:43,680 --> 00:48:49,118
but i think there are benefits in being

1222
00:48:46,240 --> 00:48:52,479
able to deploy extension inside an ais

1223
00:48:49,119 --> 00:48:56,559
so for ib gp only so doing it

1224
00:48:52,480 --> 00:48:59,200
over external bgp is much more difficult

1225
00:48:56,559 --> 00:49:00,800
but for ib gp i think it makes sense and

1226
00:48:59,200 --> 00:49:02,640
it could address some use cases for

1227
00:49:00,800 --> 00:49:03,760
network operators that have specific

1228
00:49:02,640 --> 00:49:07,040
requirements

1229
00:49:03,760 --> 00:49:08,800
and it could also allow network

1230
00:49:07,040 --> 00:49:12,000
operators or

1231
00:49:08,800 --> 00:49:13,040
network designers to develop new

1232
00:49:12,000 --> 00:49:14,720
extensions

1233
00:49:13,040 --> 00:49:17,359
before they are being discussed within

1234
00:49:14,720 --> 00:49:18,640
the itf and so you could get you could

1235
00:49:17,359 --> 00:49:20,640
get

1236
00:49:18,640 --> 00:49:22,240
information you could get prototype

1237
00:49:20,640 --> 00:49:23,920
running code that could be discussed

1238
00:49:22,240 --> 00:49:25,839
within the itf

1239
00:49:23,920 --> 00:49:27,440
without having to change complex

1240
00:49:25,839 --> 00:49:29,279
implementations and to do a full

1241
00:49:27,440 --> 00:49:32,960
implementation

1242
00:49:29,280 --> 00:49:36,240
i understood i'll leave my comments with

1243
00:49:32,960 --> 00:49:39,280
uh i agree with you that doing this is

1244
00:49:36,240 --> 00:49:41,040
not hard and that if you contain

1245
00:49:39,280 --> 00:49:42,720
as i would call it the blast radius of

1246
00:49:41,040 --> 00:49:44,000
this problem to something that's

1247
00:49:42,720 --> 00:49:45,598
strictly internal

1248
00:49:44,000 --> 00:49:47,760
you're right that this is not too much

1249
00:49:45,599 --> 00:49:49,359
of a problem but the blast radius is

1250
00:49:47,760 --> 00:49:50,960
really the discussion that's

1251
00:49:49,359 --> 00:49:53,440
the difficult one for incremental

1252
00:49:50,960 --> 00:49:56,319
deployment

1253
00:49:53,440 --> 00:49:57,440
it's very common for features in

1254
00:49:56,319 --> 00:49:59,440
development to have

1255
00:49:57,440 --> 00:50:00,880
unfortunate side effects far away from

1256
00:49:59,440 --> 00:50:04,319
where they're at

1257
00:50:00,880 --> 00:50:06,160
i will cite the attribute 128 issue that

1258
00:50:04,319 --> 00:50:07,440
many people are familiar with as an

1259
00:50:06,160 --> 00:50:09,759
example of a feature

1260
00:50:07,440 --> 00:50:10,640
that had two different versions that

1261
00:50:09,760 --> 00:50:13,760
caused

1262
00:50:10,640 --> 00:50:16,799
large network outages

1263
00:50:13,760 --> 00:50:18,160
my suggestion is uh perhaps part of the

1264
00:50:16,800 --> 00:50:19,280
conversation if you're going to talk at

1265
00:50:18,160 --> 00:50:21,440
least about bgp

1266
00:50:19,280 --> 00:50:23,040
is whether or not bgp should be

1267
00:50:21,440 --> 00:50:25,520
basically leveraged into

1268
00:50:23,040 --> 00:50:27,680
a side protocol for different purposes

1269
00:50:25,520 --> 00:50:31,599
to separate the inner domain case from

1270
00:50:27,680 --> 00:50:31,598
the local case that's it thank you

1271
00:50:31,760 --> 00:50:34,000
thanks

1272
00:50:39,040 --> 00:50:45,200
hi i'm jared moch akamai uh

1273
00:50:42,559 --> 00:50:46,720
so so i think this is interesting but i

1274
00:50:45,200 --> 00:50:50,480
have a lot of concerns here

1275
00:50:46,720 --> 00:50:52,640
specifically around uh deployability and

1276
00:50:50,480 --> 00:50:55,520
usability and testing

1277
00:50:52,640 --> 00:50:56,960
so if we were to do this i you know

1278
00:50:55,520 --> 00:50:59,200
similar to what jeff was talking about

1279
00:50:56,960 --> 00:51:01,040
with the attribute 128 issue

1280
00:50:59,200 --> 00:51:03,118
uh of which i'm still trying to get the

1281
00:51:01,040 --> 00:51:06,480
config out of our uh

1282
00:51:03,119 --> 00:51:08,800
many of our network devices for um

1283
00:51:06,480 --> 00:51:10,240
you know because we we have a variety of

1284
00:51:08,800 --> 00:51:13,280
code bases that we still run

1285
00:51:10,240 --> 00:51:14,959
i'm concerned about what happens when we

1286
00:51:13,280 --> 00:51:18,319
deploy these plugins and they have

1287
00:51:14,960 --> 00:51:20,960
different uh you know different

1288
00:51:18,319 --> 00:51:23,599
results across different vendors and how

1289
00:51:20,960 --> 00:51:25,040
that kind of bug ecosystem interacts

1290
00:51:23,599 --> 00:51:27,359
because it's one thing to specify a

1291
00:51:25,040 --> 00:51:32,000
protocol and a method for transporting

1292
00:51:27,359 --> 00:51:35,279
you know this uh this meta code

1293
00:51:32,000 --> 00:51:38,640
but it's a whole nother thing to

1294
00:51:35,280 --> 00:51:42,400
discuss what that operational impact is

1295
00:51:38,640 --> 00:51:44,319
and i i think similar to what jeff

1296
00:51:42,400 --> 00:51:46,240
commented about about the internal use

1297
00:51:44,319 --> 00:51:47,839
cases versus external use cases

1298
00:51:46,240 --> 00:51:50,240
we have a lot of internal use cases

1299
00:51:47,839 --> 00:51:52,799
where we transport hd data

1300
00:51:50,240 --> 00:51:54,879
and signal that around our uh you know

1301
00:51:52,800 --> 00:51:58,319
our internal infrastructure

1302
00:51:54,880 --> 00:52:00,960
and those use cases tend to not

1303
00:51:58,319 --> 00:52:03,040
uh really align with what shows up in

1304
00:52:00,960 --> 00:52:03,599
the public internet and a lot of what

1305
00:52:03,040 --> 00:52:06,880
happens

1306
00:52:03,599 --> 00:52:10,400
is people have uh

1307
00:52:06,880 --> 00:52:11,119
maybe more fine-grained signaling that

1308
00:52:10,400 --> 00:52:15,839
they want to do

1309
00:52:11,119 --> 00:52:15,839
for uh geo-location than

1310
00:52:16,319 --> 00:52:19,839
what you actually want to announce in

1311
00:52:17,920 --> 00:52:22,960
the routing table

1312
00:52:19,839 --> 00:52:24,960
as a result so i'm very concerned about

1313
00:52:22,960 --> 00:52:26,960
something like this and what happens in

1314
00:52:24,960 --> 00:52:29,280
the operational use case

1315
00:52:26,960 --> 00:52:30,880
uh when we have a lot better things like

1316
00:52:29,280 --> 00:52:33,200
if if we want to signal

1317
00:52:30,880 --> 00:52:35,280
you know uh geo feed data or something

1318
00:52:33,200 --> 00:52:38,480
there's the geo feeds rfc that

1319
00:52:35,280 --> 00:52:38,480
that was recently published

1320
00:52:38,640 --> 00:52:41,680
there was discussion last week iepg

1321
00:52:40,720 --> 00:52:44,959
meeting about

1322
00:52:41,680 --> 00:52:46,480
how to actually go and potentially

1323
00:52:44,960 --> 00:52:48,800
authenticate and sign that data to

1324
00:52:46,480 --> 00:52:50,480
provide more granular information

1325
00:52:48,800 --> 00:52:51,839
than what you actually want to publicly

1326
00:52:50,480 --> 00:52:54,160
expose in bgp

1327
00:52:51,839 --> 00:52:54,960
so this is definitely an interesting

1328
00:52:54,160 --> 00:52:57,598
idea but

1329
00:52:54,960 --> 00:52:59,359
i i really fear the unintended side

1330
00:52:57,599 --> 00:53:01,440
effects that

1331
00:52:59,359 --> 00:53:05,440
that this is going to introduce and

1332
00:53:01,440 --> 00:53:05,440
instability that i'll create as a result

1333
00:53:05,599 --> 00:53:12,800
yes so i i think there are

1334
00:53:09,040 --> 00:53:14,558
two different parts of the presentation

1335
00:53:12,800 --> 00:53:15,920
and there are two different elements so

1336
00:53:14,559 --> 00:53:18,240
the first one is

1337
00:53:15,920 --> 00:53:19,359
the ability to consider a routing

1338
00:53:18,240 --> 00:53:22,959
protocol

1339
00:53:19,359 --> 00:53:25,040
as a let's say a kind of microkernel

1340
00:53:22,960 --> 00:53:27,280
operating system that exposes an api and

1341
00:53:25,040 --> 00:53:30,319
it allows you to extend it

1342
00:53:27,280 --> 00:53:32,240
and this is this is generic

1343
00:53:30,319 --> 00:53:34,960
and although we implemented in bgp

1344
00:53:32,240 --> 00:53:37,118
because it was easy for us to extend bgp

1345
00:53:34,960 --> 00:53:38,720
and to do tests with bgp

1346
00:53:37,119 --> 00:53:40,400
we believe that it can apply to an

1347
00:53:38,720 --> 00:53:41,680
e-writing protocol and that's why we

1348
00:53:40,400 --> 00:53:44,400
discuss with jeff

1349
00:53:41,680 --> 00:53:46,078
to present that here because this is an

1350
00:53:44,400 --> 00:53:47,839
idea that is generic and that would be

1351
00:53:46,079 --> 00:53:49,200
applicable to any routing protocol i

1352
00:53:47,839 --> 00:53:51,680
agree with you that

1353
00:53:49,200 --> 00:53:53,598
doing that over external bgp session and

1354
00:53:51,680 --> 00:53:56,078
over the public internet is

1355
00:53:53,599 --> 00:53:56,800
something that would be between brackets

1356
00:53:56,079 --> 00:53:58,319
dangerous

1357
00:53:56,800 --> 00:54:00,079
and that would need to take much more

1358
00:53:58,319 --> 00:54:02,400
care to be able to do that

1359
00:54:00,079 --> 00:54:04,160
so this is a research prototype which is

1360
00:54:02,400 --> 00:54:06,400
intended to show that

1361
00:54:04,160 --> 00:54:08,480
you can extend routing protocols and you

1362
00:54:06,400 --> 00:54:09,680
can view the routing protocol as a

1363
00:54:08,480 --> 00:54:12,720
different way

1364
00:54:09,680 --> 00:54:14,240
and for the bgp extensions and for the

1365
00:54:12,720 --> 00:54:17,118
bgp use case

1366
00:54:14,240 --> 00:54:19,200
we are focused on internal bgp issues we

1367
00:54:17,119 --> 00:54:25,839
don't consider external bgp

1368
00:54:19,200 --> 00:54:25,839
as a possible solution right now

1369
00:54:29,440 --> 00:54:31,760
uh

1370
00:54:36,839 --> 00:54:41,440
i love

1371
00:54:39,040 --> 00:54:41,440
this

1372
00:54:42,720 --> 00:54:46,240
view and way of

1373
00:54:48,570 --> 00:54:55,119
[Music]

1374
00:54:51,280 --> 00:54:58,640
taking take taking taking uh

1375
00:54:55,119 --> 00:55:01,680
taking up uh the

1376
00:54:58,640 --> 00:55:06,558
uh definition of

1377
00:55:01,680 --> 00:55:09,919
root manipulation um

1378
00:55:06,559 --> 00:55:12,799
uh uh

1379
00:55:09,920 --> 00:55:14,400
quite obviously quite obviously when you

1380
00:55:12,799 --> 00:55:18,799
provide

1381
00:55:14,400 --> 00:55:18,799
agile uh

1382
00:55:18,839 --> 00:55:26,319
development for

1383
00:55:22,640 --> 00:55:29,440
complex systems uh you

1384
00:55:26,319 --> 00:55:29,839
introduce from some fragility and you

1385
00:55:29,440 --> 00:55:32,960
need

1386
00:55:29,839 --> 00:55:37,759
to control um

1387
00:55:32,960 --> 00:55:41,680
very carefully and uh

1388
00:55:37,760 --> 00:55:44,880
that's that's that's where i certainly

1389
00:55:41,680 --> 00:55:49,759
i certainly see uh jeff's

1390
00:55:44,880 --> 00:55:54,480
point uh however

1391
00:55:49,760 --> 00:55:54,480
uh i note that

1392
00:55:55,040 --> 00:56:03,359
uh what we have now usually

1393
00:55:58,559 --> 00:56:07,599
usually in industrial production

1394
00:56:03,359 --> 00:56:10,880
is a system where we actually

1395
00:56:07,599 --> 00:56:15,119
already have some control points

1396
00:56:10,880 --> 00:56:15,119
where user specifications

1397
00:56:15,200 --> 00:56:23,680
are are done by the operators

1398
00:56:20,480 --> 00:56:26,880
uh and in the bgp case

1399
00:56:23,680 --> 00:56:30,799
that's quite that's quite clear

1400
00:56:26,880 --> 00:56:35,359
that uh the policy definitions

1401
00:56:30,799 --> 00:56:37,680
that are available to the operators

1402
00:56:35,359 --> 00:56:37,680
and

1403
00:56:39,520 --> 00:56:46,240
my previous work on

1404
00:56:43,200 --> 00:56:48,879
defining policies and

1405
00:56:46,240 --> 00:56:52,720
compiling that down to configure a

1406
00:56:48,880 --> 00:56:57,280
policy configuration code

1407
00:56:52,720 --> 00:57:00,558
quite certainly did show me that

1408
00:56:57,280 --> 00:57:03,839
evolving the definitions of

1409
00:57:00,559 --> 00:57:05,599
the policy of the policies in a running

1410
00:57:03,839 --> 00:57:08,799
network

1411
00:57:05,599 --> 00:57:08,799
is something that

1412
00:57:10,880 --> 00:57:18,400
exactly uh uh

1413
00:57:14,240 --> 00:57:21,439
uh points to uh to a pro

1414
00:57:18,400 --> 00:57:23,440
to the control problem that jeff was

1415
00:57:21,440 --> 00:57:28,240
mentioning

1416
00:57:23,440 --> 00:57:31,599
uh however i would say

1417
00:57:28,240 --> 00:57:35,279
and and by the way and by the way uh

1418
00:57:31,599 --> 00:57:38,559
the use of that kind of stuff which

1419
00:57:35,280 --> 00:57:39,119
to a large extent says goes into the use

1420
00:57:38,559 --> 00:57:43,440
of

1421
00:57:39,119 --> 00:57:47,839
communities is

1422
00:57:43,440 --> 00:57:51,520
to a very large extent used on the

1423
00:57:47,839 --> 00:57:51,520
global ebgp thing

1424
00:57:53,040 --> 00:57:59,920
so uh uh

1425
00:57:56,640 --> 00:58:03,279
kind of i see i see i see

1426
00:57:59,920 --> 00:58:06,839
uh an opening with uh

1427
00:58:03,280 --> 00:58:11,599
uh your approach uh

1428
00:58:06,839 --> 00:58:14,799
to actually to actually to actually

1429
00:58:11,599 --> 00:58:17,839
um allow

1430
00:58:14,799 --> 00:58:21,680
users uh

1431
00:58:17,839 --> 00:58:25,759
to do much nicer

1432
00:58:21,680 --> 00:58:28,640
and much better controlled stuff

1433
00:58:25,760 --> 00:58:32,160
for extending functionality and

1434
00:58:28,640 --> 00:58:34,078
customizing functionality

1435
00:58:32,160 --> 00:58:38,000
[Music]

1436
00:58:34,079 --> 00:58:44,079
far beyond what has been done

1437
00:58:38,000 --> 00:58:44,079
so far will be policy languages

1438
00:58:45,760 --> 00:58:51,280
certainly with great power comes great

1439
00:58:48,880 --> 00:58:54,400
responsibility

1440
00:58:51,280 --> 00:58:57,280
um and

1441
00:58:54,400 --> 00:58:58,960
yes it it should not should not be it

1442
00:58:57,280 --> 00:59:02,240
should not be abused

1443
00:58:58,960 --> 00:59:06,480
abuse will happen nevertheless

1444
00:59:02,240 --> 00:59:06,479
um but uh

1445
00:59:07,040 --> 00:59:12,400
the agility that comes out of a proposal

1446
00:59:11,040 --> 00:59:16,799
like this

1447
00:59:12,400 --> 00:59:20,160
i think is uh pretty much needed thanks

1448
00:59:16,799 --> 00:59:22,000
yeah so maybe let me try to to answer a

1449
00:59:20,160 --> 00:59:25,118
bit some of your concerns

1450
00:59:22,000 --> 00:59:25,760
so you mentioned that uh operators do a

1451
00:59:25,119 --> 00:59:28,319
lot of

1452
00:59:25,760 --> 00:59:29,599
with bgp communities to implement the

1453
00:59:28,319 --> 00:59:32,480
policies

1454
00:59:29,599 --> 00:59:34,319
and basically the bgp communities is an

1455
00:59:32,480 --> 00:59:35,359
add-on solution so you have to play with

1456
00:59:34,319 --> 00:59:37,200
root filters use

1457
00:59:35,359 --> 00:59:38,480
with access control list with root maps

1458
00:59:37,200 --> 00:59:40,480
and stuff like that

1459
00:59:38,480 --> 00:59:42,240
to be able to implement the policies

1460
00:59:40,480 --> 00:59:45,520
that operators want

1461
00:59:42,240 --> 00:59:47,040
on the other side by using xbgp what you

1462
00:59:45,520 --> 00:59:49,520
have is that you have a

1463
00:59:47,040 --> 00:59:51,599
standard programming language you know

1464
00:59:49,520 --> 00:59:52,799
you know prototype dc but this could be

1465
00:59:51,599 --> 00:59:54,480
another language

1466
00:59:52,799 --> 00:59:57,040
and when you have standard programming

1467
00:59:54,480 --> 00:59:58,799
language it's also possible to use

1468
00:59:57,040 --> 01:00:01,040
software validation techniques where you

1469
00:59:58,799 --> 01:00:03,280
can specify the properties

1470
01:00:01,040 --> 01:00:04,960
that the plugin has to be able to

1471
01:00:03,280 --> 01:00:07,440
support to be able

1472
01:00:04,960 --> 01:00:09,280
to be acceptable by a router so

1473
01:00:07,440 --> 01:00:12,839
obviously we don't want a plugin that

1474
01:00:09,280 --> 01:00:15,599
that runs forever but we can have

1475
01:00:12,839 --> 01:00:16,400
properties that are defined formally and

1476
01:00:15,599 --> 01:00:19,119
we can

1477
01:00:16,400 --> 01:00:21,200
design tools based on the progress in

1478
01:00:19,119 --> 01:00:22,559
software verification that will verify

1479
01:00:21,200 --> 01:00:24,640
that the plugin

1480
01:00:22,559 --> 01:00:25,760
is working is behaving correctly

1481
01:00:24,640 --> 01:00:28,558
according to the

1482
01:00:25,760 --> 01:00:30,000
properties of the underlying bgp so

1483
01:00:28,559 --> 01:00:32,400
that's something that you can do

1484
01:00:30,000 --> 01:00:33,359
if you have a much more expressive

1485
01:00:32,400 --> 01:00:36,160
language

1486
01:00:33,359 --> 01:00:37,759
than the access list roadmaps that we

1487
01:00:36,160 --> 01:00:40,160
have today

1488
01:00:37,760 --> 01:00:42,000
and we can leverage lots of advances in

1489
01:00:40,160 --> 01:00:45,359
software verification during the last

1490
01:00:42,000 --> 01:00:45,359
year to verify that

1491
01:00:49,839 --> 01:00:54,480
thanks aribia eduard here's last one

1492
01:00:51,920 --> 01:00:57,920
please be quick we are ready and

1493
01:00:54,480 --> 01:00:59,839
thank think thanks for good presentation

1494
01:00:57,920 --> 01:01:01,359
uh i have one concern which potentially

1495
01:00:59,839 --> 01:01:03,759
possible to mitigate

1496
01:01:01,359 --> 01:01:05,279
feature velocity by itself is good it's

1497
01:01:03,760 --> 01:01:07,119
a good issue

1498
01:01:05,280 --> 01:01:08,319
but unfortunately for majority of temco

1499
01:01:07,119 --> 01:01:10,640
worldwide

1500
01:01:08,319 --> 01:01:12,240
multivendor interpretability is more

1501
01:01:10,640 --> 01:01:14,078
important unfortunately the future

1502
01:01:12,240 --> 01:01:16,319
velocity could not be trade off to

1503
01:01:14,079 --> 01:01:18,480
uh instead of multi-vendor

1504
01:01:16,319 --> 01:01:19,680
interoperability uh what i see here is

1505
01:01:18,480 --> 01:01:21,200
the risk for multi-vendor

1506
01:01:19,680 --> 01:01:24,960
interoperability is

1507
01:01:21,200 --> 01:01:27,040
uh the api the api should be exactly the

1508
01:01:24,960 --> 01:01:27,839
same for all implementations of all

1509
01:01:27,040 --> 01:01:30,079
vendors

1510
01:01:27,839 --> 01:01:31,920
on the previous slide we have seen uh

1511
01:01:30,079 --> 01:01:34,640
that for two current implementation

1512
01:01:31,920 --> 01:01:36,480
in one case you have 400 api calls in

1513
01:01:34,640 --> 01:01:38,799
that case 600 api calls

1514
01:01:36,480 --> 01:01:40,559
it's a very big alarm for me big alarm

1515
01:01:38,799 --> 01:01:43,200
because it looks like you don't have

1516
01:01:40,559 --> 01:01:44,640
mature stable api which you could really

1517
01:01:43,200 --> 01:01:47,279
demand from all

1518
01:01:44,640 --> 01:01:48,720
vendors uh and it means it means that

1519
01:01:47,280 --> 01:01:50,319
there would be no multi-vendor

1520
01:01:48,720 --> 01:01:52,160
interoperability and it would be no

1521
01:01:50,319 --> 01:01:52,880
multicultural interpretability i believe

1522
01:01:52,160 --> 01:01:55,920
this

1523
01:01:52,880 --> 01:01:57,839
uh this particular good effort will not

1524
01:01:55,920 --> 01:02:00,480
be accepted by the market therefore

1525
01:01:57,839 --> 01:02:02,558
from my point of view you could mitigate

1526
01:02:00,480 --> 01:02:05,520
multi-vendor credibility problem

1527
01:02:02,559 --> 01:02:06,880
if you will clearly specify and make it

1528
01:02:05,520 --> 01:02:09,280
mandatory some

1529
01:02:06,880 --> 01:02:11,599
basic feature basic api calls i don't

1530
01:02:09,280 --> 01:02:12,319
know how many 400 600 it's up to you to

1531
01:02:11,599 --> 01:02:13,920
decide

1532
01:02:12,319 --> 01:02:15,680
but it should be a very rigid

1533
01:02:13,920 --> 01:02:17,760
specification for api

1534
01:02:15,680 --> 01:02:20,000
which should be really really mandatory

1535
01:02:17,760 --> 01:02:20,640
then multi-vendor interpretation would

1536
01:02:20,000 --> 01:02:23,039
be not

1537
01:02:20,640 --> 01:02:23,759
lost and then it's potentially would be

1538
01:02:23,039 --> 01:02:27,440
possible to

1539
01:02:23,760 --> 01:02:28,240
progress yes so just to answer your

1540
01:02:27,440 --> 01:02:30,480
comments

1541
01:02:28,240 --> 01:02:31,839
so we have a very simple api which is

1542
01:02:30,480 --> 01:02:34,799
available on the website

1543
01:02:31,839 --> 01:02:35,680
that i can provide the slide that jeff

1544
01:02:34,799 --> 01:02:37,920
shows here

1545
01:02:35,680 --> 01:02:39,440
uh shows the number of lines of code

1546
01:02:37,920 --> 01:02:41,839
that we have to change

1547
01:02:39,440 --> 01:02:43,680
to far routing and to bird to be able to

1548
01:02:41,839 --> 01:02:46,480
be able to implement the api

1549
01:02:43,680 --> 01:02:47,359
so this is not the number of calls in

1550
01:02:46,480 --> 01:02:50,880
the api

1551
01:02:47,359 --> 01:02:53,920
so we have a few tens a small

1552
01:02:50,880 --> 01:02:55,920
about 10 different functions in the api

1553
01:02:53,920 --> 01:02:57,839
so the api is very simple

1554
01:02:55,920 --> 01:02:59,520
and the slide shows only the number of

1555
01:02:57,839 --> 01:03:01,520
lines of code that we had to change in

1556
01:02:59,520 --> 01:03:02,880
the bgp implementation to be able to

1557
01:03:01,520 --> 01:03:05,280
support the api

1558
01:03:02,880 --> 01:03:06,640
which means that in fact the api was

1559
01:03:05,280 --> 01:03:08,640
already part of the

1560
01:03:06,640 --> 01:03:10,558
fa routing and bird implementation and

1561
01:03:08,640 --> 01:03:11,759
we did not have to change that much to

1562
01:03:10,559 --> 01:03:13,440
be able to support

1563
01:03:11,760 --> 01:03:17,119
the abstract api that i mentioned

1564
01:03:13,440 --> 01:03:31,839
earlier with the workflow

1565
01:03:17,119 --> 01:03:31,839
okay fine

1566
01:03:35,920 --> 01:03:40,000
olivia thank you so much for coming over

1567
01:03:38,400 --> 01:03:41,520
and sharing your work it's always

1568
01:03:40,000 --> 01:03:43,599
exciting

1569
01:03:41,520 --> 01:03:44,640
thanks for the invitation i'm looking

1570
01:03:43,599 --> 01:03:47,680
forward to

1571
01:03:44,640 --> 01:03:49,440
hosting you any time

1572
01:03:47,680 --> 01:03:51,759
been working together probably 10 past

1573
01:03:49,440 --> 01:03:53,520
years so it's great

1574
01:03:51,760 --> 01:03:55,039
thank you everyone for joining us

1575
01:03:53,520 --> 01:03:59,759
tonight or

1576
01:03:55,039 --> 01:04:03,440
this morning and we will see you

1577
01:03:59,760 --> 01:04:08,400
virtually again in 4 months

1578
01:04:03,440 --> 01:04:08,400
take care stay safe and see you soon

1579
01:04:09,359 --> 01:04:13,839
thanks a lot

1580
01:04:31,200 --> 01:04:33,279
you

