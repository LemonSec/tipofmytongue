1
00:00:21,680 --> 00:00:24,720
so i guess the time has come

2
00:00:25,920 --> 00:00:33,040
i don't think i see my co-chair but i

3
00:00:29,119 --> 00:00:37,200
hope that bobo is able to join us

4
00:00:33,040 --> 00:00:37,200
sometime soon um

5
00:00:38,640 --> 00:00:43,200
we have something of a full agenda does

6
00:00:41,760 --> 00:00:45,839
richard want to say something

7
00:00:43,200 --> 00:00:45,840
no he doesn't

8
00:00:48,480 --> 00:00:52,319
um it's a data tracker logging issue

9
00:00:50,719 --> 00:00:55,520
apparently so

10
00:00:52,320 --> 00:00:59,840
um the usual stuff

11
00:00:55,520 --> 00:00:59,840
that we see in meetings

12
00:01:00,079 --> 00:01:06,559
excellent do you want to say hi

13
00:01:04,080 --> 00:01:06,559
bobo

14
00:01:09,920 --> 00:01:15,439
hello can everybody hear me is the audio

15
00:01:12,799 --> 00:01:15,439
working fine

16
00:01:15,920 --> 00:01:23,119
seems to be seems to be good for once

17
00:01:20,080 --> 00:01:24,798
i'm bobo co-chair here with martin uh

18
00:01:23,119 --> 00:01:26,080
nice to see everybody and thank you for

19
00:01:24,799 --> 00:01:28,720
joining us

20
00:01:26,080 --> 00:01:28,720
thanks martin

21
00:01:29,280 --> 00:01:34,560
yeah so here's the note well

22
00:01:32,640 --> 00:01:36,799
i think everyone should be familiar with

23
00:01:34,560 --> 00:01:39,840
this one

24
00:01:36,799 --> 00:01:41,600
uh we're being recorded this time so

25
00:01:39,840 --> 00:01:44,320
don't say anything you wouldn't say to

26
00:01:41,600 --> 00:01:44,320
someone else

27
00:01:44,479 --> 00:01:48,720
and this is our agenda today we're not

28
00:01:47,040 --> 00:01:51,840
going to get a presentation from dr

29
00:01:48,720 --> 00:01:52,960
alex who didn't give me any slides when

30
00:01:51,840 --> 00:01:55,280
i asked for them

31
00:01:52,960 --> 00:01:57,839
and let's say it doesn't seem to be

32
00:01:55,280 --> 00:02:00,960
online anyway so

33
00:01:57,840 --> 00:02:03,360
that's fine um and i'll

34
00:02:00,960 --> 00:02:05,439
probably put emad's presentation

35
00:02:03,360 --> 00:02:08,878
together because i got one deck

36
00:02:05,439 --> 00:02:11,920
and that means uh um can

37
00:02:08,878 --> 00:02:14,959
take the first first

38
00:02:11,920 --> 00:02:17,839
use cases slot if that's okay

39
00:02:14,959 --> 00:02:17,840
with everyone

40
00:02:21,200 --> 00:02:26,720
anyone want to talk about the agenda

41
00:02:29,360 --> 00:02:33,760
all right so what we thought since this

42
00:02:32,319 --> 00:02:36,000
is the first time we're meeting we take

43
00:02:33,760 --> 00:02:39,280
a little bit of time to go through

44
00:02:36,000 --> 00:02:40,720
the charter bobo do you want to take the

45
00:02:39,280 --> 00:02:43,680
helm when we go through the charter

46
00:02:40,720 --> 00:02:44,800
i'll keep driving the slides but um you

47
00:02:43,680 --> 00:02:46,080
can talk through the charter for

48
00:02:44,800 --> 00:02:49,120
everyone

49
00:02:46,080 --> 00:02:50,720
yeah sure that sounds great so since as

50
00:02:49,120 --> 00:02:52,400
martin said since this is our first

51
00:02:50,720 --> 00:02:53,519
meeting we wanted to take some time to

52
00:02:52,400 --> 00:02:55,920
go over

53
00:02:53,519 --> 00:02:57,280
uh the charter for this working group

54
00:02:55,920 --> 00:03:00,000
set some context

55
00:02:57,280 --> 00:03:01,920
and uh of course get any feedback from

56
00:03:00,000 --> 00:03:04,239
folks here

57
00:03:01,920 --> 00:03:05,280
that have any to share so with that

58
00:03:04,239 --> 00:03:08,319
being said the

59
00:03:05,280 --> 00:03:10,319
primary goal for s-frame is to respond

60
00:03:08,319 --> 00:03:12,399
to the growing need for end-to-end

61
00:03:10,319 --> 00:03:13,440
encryption for real-time conferencing

62
00:03:12,400 --> 00:03:15,200
sessions

63
00:03:13,440 --> 00:03:18,640
uh we want to achieve this in a way that

64
00:03:15,200 --> 00:03:21,920
is separated from the transport layer

65
00:03:18,640 --> 00:03:24,958
and will have exposed but authenticated

66
00:03:21,920 --> 00:03:29,839
media metadata that's useful for

67
00:03:24,959 --> 00:03:29,840
sfus also known as rtp switches

68
00:03:30,319 --> 00:03:34,399
and so the the goal here uh and just a

69
00:03:33,280 --> 00:03:38,000
gentle reminder

70
00:03:34,400 --> 00:03:39,840
on um meeting etiquette if you want to

71
00:03:38,000 --> 00:03:43,120
talk please press the raise hand

72
00:03:39,840 --> 00:03:45,680
button and that will add you to a queue

73
00:03:43,120 --> 00:03:46,239
that martin will manage so the goal here

74
00:03:45,680 --> 00:03:49,280
is to

75
00:03:46,239 --> 00:03:51,360
define a secure encapsulation

76
00:03:49,280 --> 00:03:53,360
to provide authenticated encryption for

77
00:03:51,360 --> 00:03:56,159
real-time media content

78
00:03:53,360 --> 00:03:56,959
independent of the underlying transport

79
00:03:56,159 --> 00:04:01,840
um if you

80
00:03:56,959 --> 00:04:01,840
go to the next slide please martin

81
00:04:04,319 --> 00:04:08,640
uh so this is obviously a very

82
00:04:06,879 --> 00:04:09,518
interesting space with a lot of

83
00:04:08,640 --> 00:04:11,760
interaction

84
00:04:09,519 --> 00:04:14,000
so we thought it would be useful to

85
00:04:11,760 --> 00:04:18,159
review what we feel is in and

86
00:04:14,000 --> 00:04:20,880
out of scope in order to maintain focus

87
00:04:18,160 --> 00:04:21,280
so for us in this working group we've

88
00:04:20,880 --> 00:04:24,240
set

89
00:04:21,279 --> 00:04:26,559
out of scope signaling that's required

90
00:04:24,240 --> 00:04:30,080
to arrange s-frame encryption

91
00:04:26,560 --> 00:04:32,000
especially considerations related to sip

92
00:04:30,080 --> 00:04:33,840
and the motivation is that s frame is

93
00:04:32,000 --> 00:04:35,600
intended to be applied as an additional

94
00:04:33,840 --> 00:04:37,198
layer on top of the base level of

95
00:04:35,600 --> 00:04:40,880
protection that

96
00:04:37,199 --> 00:04:43,360
sip or stp provide as as well as other

97
00:04:40,880 --> 00:04:46,960
webrtc changes such as the

98
00:04:43,360 --> 00:04:46,960
the payload format

99
00:04:47,120 --> 00:04:52,639
the motivation here is that these webrtc

100
00:04:50,720 --> 00:04:54,320
changes in particular will be addressed

101
00:04:52,639 --> 00:04:56,639
by a different working group

102
00:04:54,320 --> 00:04:58,240
the avt core working group so they're

103
00:04:56,639 --> 00:05:01,199
out of scope

104
00:04:58,240 --> 00:05:03,600
for us go to the next slide please

105
00:05:01,199 --> 00:05:03,600
martin

106
00:05:04,160 --> 00:05:09,440
in scope for us are to define guidance

107
00:05:06,639 --> 00:05:12,520
for how s frame interacts with rtp

108
00:05:09,440 --> 00:05:15,600
especially with regards to packetization

109
00:05:12,520 --> 00:05:18,320
de-packetization and recovery algorithms

110
00:05:15,600 --> 00:05:19,520
our motivation is to ensure it can be

111
00:05:18,320 --> 00:05:22,800
used in

112
00:05:19,520 --> 00:05:24,719
diverse environments such as webrtc

113
00:05:22,800 --> 00:05:26,240
as well as outlining the security

114
00:05:24,720 --> 00:05:30,080
properties

115
00:05:26,240 --> 00:05:33,520
that you could expect to see under use

116
00:05:30,080 --> 00:05:38,400
in common threat models next slide

117
00:05:33,520 --> 00:05:41,440
please martin

118
00:05:38,400 --> 00:05:42,479
finally uh we anticipate that several

119
00:05:41,440 --> 00:05:44,960
use cases of s

120
00:05:42,479 --> 00:05:48,159
frame will involve uh its use in

121
00:05:44,960 --> 00:05:51,520
contexts where keys are derived from

122
00:05:48,160 --> 00:05:54,240
uh an mls group key exchange protocol

123
00:05:51,520 --> 00:05:56,400
so we consider in scope defining a

124
00:05:54,240 --> 00:05:58,080
mechanism for doing s-frame encryption

125
00:05:56,400 --> 00:05:59,840
using these keys

126
00:05:58,080 --> 00:06:03,039
but obviously this does not preclude

127
00:05:59,840 --> 00:06:07,119
other sources of key material

128
00:06:03,039 --> 00:06:10,479
next slide please martin

129
00:06:07,120 --> 00:06:13,199
uh so uh some interesting

130
00:06:10,479 --> 00:06:15,199
uh sort of details about the

131
00:06:13,199 --> 00:06:16,240
encapsulation and what we hope to

132
00:06:15,199 --> 00:06:18,479
achieve

133
00:06:16,240 --> 00:06:19,440
as we mentioned in the primary goals

134
00:06:18,479 --> 00:06:22,080
slide we'd

135
00:06:19,440 --> 00:06:23,919
like this to be transport independent so

136
00:06:22,080 --> 00:06:27,440
it can be applied at a higher level than

137
00:06:23,919 --> 00:06:29,599
individual rtp payloads and what this

138
00:06:27,440 --> 00:06:31,120
lets us do is it means we could have for

139
00:06:29,600 --> 00:06:33,840
example

140
00:06:31,120 --> 00:06:36,080
application at multi-packet frames so

141
00:06:33,840 --> 00:06:38,880
encrypting entire frames that span

142
00:06:36,080 --> 00:06:41,840
more than one packet lets us amortize

143
00:06:38,880 --> 00:06:44,159
framing and authentication tag overhead

144
00:06:41,840 --> 00:06:45,039
or you could choose to encrypt at a unit

145
00:06:44,160 --> 00:06:48,560
of

146
00:06:45,039 --> 00:06:51,199
intermediate size for example nalus or

147
00:06:48,560 --> 00:06:52,000
obuz to allow partial frames to be

148
00:06:51,199 --> 00:06:55,599
usable

149
00:06:52,000 --> 00:06:59,840
and these granularity levels are to be

150
00:06:55,599 --> 00:07:04,240
determined by the working group

151
00:06:59,840 --> 00:07:07,119
for what can be selected in the protocol

152
00:07:04,240 --> 00:07:07,120
next slide please

153
00:07:08,479 --> 00:07:12,159
in order to drive authenticated

154
00:07:10,720 --> 00:07:15,599
encryption

155
00:07:12,160 --> 00:07:17,680
the encapsulation provides the following

156
00:07:15,599 --> 00:07:20,560
a selection among multiple encryption

157
00:07:17,680 --> 00:07:23,199
keys in use during a real-time session

158
00:07:20,560 --> 00:07:25,199
and an algorithm for forming a unique

159
00:07:23,199 --> 00:07:25,440
nonce within the scope of the key based

160
00:07:25,199 --> 00:07:30,160
on

161
00:07:25,440 --> 00:07:33,520
information in the encapsulation frame

162
00:07:30,160 --> 00:07:35,759
uh next slide please martin

163
00:07:33,520 --> 00:07:37,599
uh there's still things that the

164
00:07:35,759 --> 00:07:41,039
application that is making use of s

165
00:07:37,599 --> 00:07:43,039
frame has to uh declare for example

166
00:07:41,039 --> 00:07:44,080
selecting whether s frame is to be used

167
00:07:43,039 --> 00:07:46,240
for a given media

168
00:07:44,080 --> 00:07:48,080
flow specifying which encryption

169
00:07:46,240 --> 00:07:50,639
algorithm should be used

170
00:07:48,080 --> 00:07:51,840
provisioning keys and key identifiers to

171
00:07:50,639 --> 00:07:54,160
end points

172
00:07:51,840 --> 00:07:56,159
and selecting the granularity at which

173
00:07:54,160 --> 00:07:57,919
s-frame encryption is applied if

174
00:07:56,160 --> 00:07:59,520
indeed multiple options end up being

175
00:07:57,919 --> 00:08:02,639
available

176
00:07:59,520 --> 00:08:02,639
next slide please martin

177
00:08:03,360 --> 00:08:09,599
i think that's it actually for the uh

178
00:08:06,560 --> 00:08:11,520
charter overview portion so

179
00:08:09,599 --> 00:08:13,680
if there are any questions or comments

180
00:08:11,520 --> 00:08:18,719
now would be a good time to

181
00:08:13,680 --> 00:08:18,720
raise hand and get in the queue to speak

182
00:08:23,280 --> 00:08:26,638
okay i'll turn it back to martin thank

183
00:08:25,199 --> 00:08:31,120
you

184
00:08:26,639 --> 00:08:34,399
okay so our next present presenter

185
00:08:31,120 --> 00:08:34,399
is uh ewan

186
00:08:35,200 --> 00:08:44,480
grab the mic and i'll grab the slides

187
00:08:41,440 --> 00:08:46,959
hello can you hear it work this time

188
00:08:44,480 --> 00:08:48,160
you're a little plain hey martin while

189
00:08:46,959 --> 00:08:49,760
you're setting that up

190
00:08:48,160 --> 00:08:52,079
were there note takers set up for the

191
00:08:49,760 --> 00:08:52,080
session

192
00:08:52,720 --> 00:08:57,120
that's an amateur move on my part no

193
00:08:54,640 --> 00:09:00,319
there was not

194
00:08:57,120 --> 00:09:03,519
um pick up

195
00:09:00,320 --> 00:09:04,800
ah thanks richard uh we're also get i'm

196
00:09:03,519 --> 00:09:06,480
also seeing the chat bernardo

197
00:09:04,800 --> 00:09:07,599
but cj having trouble hearing things so

198
00:09:06,480 --> 00:09:11,120
i don't know what's going on there but

199
00:09:07,600 --> 00:09:11,120
perhaps you have a bug of some kind

200
00:09:14,320 --> 00:09:19,920
yeah that that's my entire story for the

201
00:09:17,360 --> 00:09:19,920
last session

202
00:09:20,839 --> 00:09:24,800
so

203
00:09:22,399 --> 00:09:24,800
don't know

204
00:09:25,440 --> 00:09:36,399
maybe it only affects people who know a

205
00:09:27,279 --> 00:09:40,560
little bit about webrtc okay

206
00:09:36,399 --> 00:09:43,200
should i start or we're waiting for

207
00:09:40,560 --> 00:09:44,079
can you split closer to the mic or

208
00:09:43,200 --> 00:09:46,080
something when

209
00:09:44,080 --> 00:09:48,560
having a little bit i'll try to speak

210
00:09:46,080 --> 00:09:48,560
louder

211
00:09:49,200 --> 00:09:54,320
okay uh so

212
00:09:52,560 --> 00:09:55,839
we started looking at implementing

213
00:09:54,320 --> 00:09:58,880
stream browsers and

214
00:09:55,839 --> 00:10:01,839
uh we we come to some we

215
00:09:58,880 --> 00:10:03,120
we had some thoughts and questions so

216
00:10:01,839 --> 00:10:05,839
here they are

217
00:10:03,120 --> 00:10:05,839
next slide

218
00:10:07,200 --> 00:10:11,040
so the first question was how to

219
00:10:09,600 --> 00:10:13,440
implement it

220
00:10:11,040 --> 00:10:14,560
in browsers so they can be implemented

221
00:10:13,440 --> 00:10:16,480
in native because

222
00:10:14,560 --> 00:10:18,239
you can already implementing everything

223
00:10:16,480 --> 00:10:22,000
in native there's

224
00:10:18,240 --> 00:10:26,240
also the instable streams api proposal

225
00:10:22,000 --> 00:10:29,440
which is a new api to inject javascript

226
00:10:26,240 --> 00:10:29,920
between codex and network so that you

227
00:10:29,440 --> 00:10:33,519
can

228
00:10:29,920 --> 00:10:36,160
do whatever transform after the encoder

229
00:10:33,519 --> 00:10:39,279
and before the network

230
00:10:36,160 --> 00:10:42,000
um so we started discussing that

231
00:10:39,279 --> 00:10:43,439
and there are clearly some advantages to

232
00:10:42,000 --> 00:10:46,560
native implementations

233
00:10:43,440 --> 00:10:49,680
like javascript does not need

234
00:10:46,560 --> 00:10:52,079
real access to media content uh it

235
00:10:49,680 --> 00:10:52,719
if it's native if that frame is

236
00:10:52,079 --> 00:10:55,279
implemented

237
00:10:52,720 --> 00:10:57,680
in native you no longer need to have

238
00:10:55,279 --> 00:11:00,800
real access to encryption material

239
00:10:57,680 --> 00:11:04,000
which is a nice property as well and

240
00:11:00,800 --> 00:11:07,040
in addition to that browsers if they're

241
00:11:04,000 --> 00:11:09,920
implementing that natively can

242
00:11:07,040 --> 00:11:11,120
apply further protection so they can

243
00:11:09,920 --> 00:11:14,479
keep control of

244
00:11:11,120 --> 00:11:17,760
which algorithms to use which

245
00:11:14,480 --> 00:11:21,519
might be good in the future

246
00:11:17,760 --> 00:11:21,519
browsers can also implement

247
00:11:22,800 --> 00:11:29,839
the s frame transform out of process

248
00:11:26,839 --> 00:11:34,160
um which would make it closer

249
00:11:29,839 --> 00:11:37,200
to something like uh ea me for instance

250
00:11:34,160 --> 00:11:39,680
um and also

251
00:11:37,200 --> 00:11:40,640
there was this proposal called isolated

252
00:11:39,680 --> 00:11:42,640
streams

253
00:11:40,640 --> 00:11:43,680
which is a way for the javascript to

254
00:11:42,640 --> 00:11:46,880
never get access

255
00:11:43,680 --> 00:11:49,199
to varroa media content

256
00:11:46,880 --> 00:11:51,760
in which case a natives transform can

257
00:11:49,200 --> 00:11:54,160
still be able to consume

258
00:11:51,760 --> 00:11:54,959
such protected streams as well as

259
00:11:54,160 --> 00:11:58,399
produce

260
00:11:54,959 --> 00:12:01,599
these the same streams so based on

261
00:11:58,399 --> 00:12:04,639
those discussions uh at the last webrtc

262
00:12:01,600 --> 00:12:06,720
meeting the consensus was to define a

263
00:12:04,639 --> 00:12:09,279
native s-frame transform that

264
00:12:06,720 --> 00:12:11,040
integrates with webrtc for audio and

265
00:12:09,279 --> 00:12:13,760
video

266
00:12:11,040 --> 00:12:13,760
next slide

267
00:12:18,800 --> 00:12:22,959
so the idea would be that

268
00:12:23,440 --> 00:12:27,440
the native web s-frame transform could

269
00:12:25,360 --> 00:12:30,079
be used standalone in webrtc

270
00:12:27,440 --> 00:12:31,360
so basically javascript would set up the

271
00:12:30,079 --> 00:12:34,239
peer connection

272
00:12:31,360 --> 00:12:35,760
it would also uh gather the keys

273
00:12:34,240 --> 00:12:38,800
generate the keys

274
00:12:35,760 --> 00:12:39,839
and uh set up the give the keys to the

275
00:12:38,800 --> 00:12:42,639
stream transform

276
00:12:39,839 --> 00:12:43,440
and that that is providing some good

277
00:12:42,639 --> 00:12:46,880
level

278
00:12:43,440 --> 00:12:51,600
of security as well as uh

279
00:12:46,880 --> 00:12:53,519
some ease of use from for web developers

280
00:12:51,600 --> 00:12:55,120
in the future it could also be used with

281
00:12:53,519 --> 00:12:57,440
a native key manager

282
00:12:55,120 --> 00:12:59,200
based on mls for instance so in that

283
00:12:57,440 --> 00:13:00,480
case the key manager would generate the

284
00:12:59,200 --> 00:13:03,200
encryption keys

285
00:13:00,480 --> 00:13:04,720
and javascript would be responsible to

286
00:13:03,200 --> 00:13:07,200
do the setup of the pipeline

287
00:13:04,720 --> 00:13:09,680
and hand over the keys to the stream

288
00:13:07,200 --> 00:13:11,839
transform

289
00:13:09,680 --> 00:13:13,760
i'm saying in the future because uh

290
00:13:11,839 --> 00:13:16,720
native key manager standardization

291
00:13:13,760 --> 00:13:19,040
could be done in parallel or but we can

292
00:13:16,720 --> 00:13:21,290
start sooner the sram transform

293
00:13:19,040 --> 00:13:23,279
some deletion

294
00:13:21,290 --> 00:13:25,920
[Music]

295
00:13:23,279 --> 00:13:27,439
so that does not preclude use outside of

296
00:13:25,920 --> 00:13:29,439
webrtc though

297
00:13:27,440 --> 00:13:31,600
for instance with data channel or

298
00:13:29,440 --> 00:13:35,519
websocket i saw in the charter that

299
00:13:31,600 --> 00:13:40,079
s frame is mostly

300
00:13:35,519 --> 00:13:42,480
targeted at sfus

301
00:13:40,079 --> 00:13:44,160
and that's another question i will have

302
00:13:42,480 --> 00:13:46,079
at the end of

303
00:13:44,160 --> 00:13:48,240
the presentation which is whether we

304
00:13:46,079 --> 00:13:50,160
should scope it that way as well

305
00:13:48,240 --> 00:13:51,760
in the web or whether we we should

306
00:13:50,160 --> 00:13:54,240
anticipate that it might be used

307
00:13:51,760 --> 00:13:58,800
elsewhere

308
00:13:54,240 --> 00:14:01,040
next slide so we started to

309
00:13:58,800 --> 00:14:04,079
work on implementing that and very

310
00:14:01,040 --> 00:14:07,680
quickly there were obvious issues with

311
00:14:04,079 --> 00:14:10,800
uh implementing ads frame

312
00:14:07,680 --> 00:14:11,439
uh compatibly with sfus or even existing

313
00:14:10,800 --> 00:14:14,839
browsers

314
00:14:11,440 --> 00:14:18,079
especially when uh with video content

315
00:14:14,839 --> 00:14:19,440
um so when the s frame transform is

316
00:14:18,079 --> 00:14:22,239
applied

317
00:14:19,440 --> 00:14:22,800
the content is no longer valid video

318
00:14:22,240 --> 00:14:25,760
content

319
00:14:22,800 --> 00:14:28,560
so everything is breaking basically so

320
00:14:25,760 --> 00:14:31,680
there are a few alternatives

321
00:14:28,560 --> 00:14:34,880
one alternative that is mentioned in the

322
00:14:31,680 --> 00:14:38,399
s frame draft is to have a generic

323
00:14:34,880 --> 00:14:41,439
packetization which seems nice

324
00:14:38,399 --> 00:14:44,160
um an alternative would be

325
00:14:41,440 --> 00:14:46,240
like to try to do a post transform but

326
00:14:44,160 --> 00:14:48,000
that would be code specific so

327
00:14:46,240 --> 00:14:49,839
it's not really appealing but anyway it

328
00:14:48,000 --> 00:14:52,800
should be mentioned

329
00:14:49,839 --> 00:14:53,760
um so i wouldn't i would i'd like to

330
00:14:52,800 --> 00:14:54,880
mention that the generic

331
00:14:53,760 --> 00:14:58,240
practicalization

332
00:14:54,880 --> 00:15:00,240
might be useful outside of this frame

333
00:14:58,240 --> 00:15:01,920
because the in several instantable

334
00:15:00,240 --> 00:15:05,040
streams api

335
00:15:01,920 --> 00:15:07,040
uh is allowing to transform

336
00:15:05,040 --> 00:15:08,639
and create content before going to the

337
00:15:07,040 --> 00:15:12,079
network so

338
00:15:08,639 --> 00:15:14,720
instable streams is very generic and

339
00:15:12,079 --> 00:15:16,319
might also need to use in some cases

340
00:15:14,720 --> 00:15:19,120
generic practicalization

341
00:15:16,320 --> 00:15:20,720
so that but some that's something to

342
00:15:19,120 --> 00:15:23,920
keep in mind

343
00:15:20,720 --> 00:15:26,160
so my understanding is

344
00:15:23,920 --> 00:15:27,360
based on the charter that i that was

345
00:15:26,160 --> 00:15:30,079
described but it's

346
00:15:27,360 --> 00:15:31,440
not an activity that this working group

347
00:15:30,079 --> 00:15:34,399
should do

348
00:15:31,440 --> 00:15:36,560
and that avt core should do it so my

349
00:15:34,399 --> 00:15:40,399
first question to a working group is

350
00:15:36,560 --> 00:15:42,638
if anyone there is interested in

351
00:15:40,399 --> 00:15:45,519
if anyone is working on it or if anyone

352
00:15:42,639 --> 00:15:48,240
is has started that effort already

353
00:15:45,519 --> 00:15:50,480
um because we would like to to help them

354
00:15:48,240 --> 00:15:50,480
as well

355
00:15:51,600 --> 00:15:56,160
i don't know if anyone can answer that

356
00:15:58,320 --> 00:16:01,519
uh let's see from emap

357
00:16:01,600 --> 00:16:06,079
yeah so i'm very interested in helping

358
00:16:04,320 --> 00:16:10,079
with that so what we have done

359
00:16:06,079 --> 00:16:13,040
in google we used uh some version of uh

360
00:16:10,079 --> 00:16:14,719
vb8 packetization initial version which

361
00:16:13,040 --> 00:16:16,719
seems to be generic enough

362
00:16:14,720 --> 00:16:18,399
uh but yeah i'm definitely interested in

363
00:16:16,720 --> 00:16:22,399
helping like define a standard uh

364
00:16:18,399 --> 00:16:24,480
generic bacteria format

365
00:16:22,399 --> 00:16:26,320
okay do you agree that it should it

366
00:16:24,480 --> 00:16:26,800
could be used by a frame but it could be

367
00:16:26,320 --> 00:16:29,440
used

368
00:16:26,800 --> 00:16:30,880
uh as well for yeah so yeah and

369
00:16:29,440 --> 00:16:32,000
searchable stream gives the possibility

370
00:16:30,880 --> 00:16:33,839
to do anything you

371
00:16:32,000 --> 00:16:35,680
would think would for him right now that

372
00:16:33,839 --> 00:16:37,199
use case we have this for its encryption

373
00:16:35,680 --> 00:16:38,560
but could be other use cases to use the

374
00:16:37,199 --> 00:16:39,920
generic optimization because once you

375
00:16:38,560 --> 00:16:41,839
have encoded frequent whatever you want

376
00:16:39,920 --> 00:16:46,719
with it

377
00:16:41,839 --> 00:16:49,040
uh so yeah in in two of my mind yes

378
00:16:46,720 --> 00:16:50,560
but do you have a specific use case we

379
00:16:49,040 --> 00:16:53,279
we can discuss i don't have something

380
00:16:50,560 --> 00:16:55,518
specific other than encryption right now

381
00:16:53,279 --> 00:16:55,519
okay

382
00:16:58,880 --> 00:17:03,120
and i think we're up to colin perkins

383
00:17:03,279 --> 00:17:07,039
thank you hi can you hear me

384
00:17:07,199 --> 00:17:12,000
yes good uh so i mean obviously a

385
00:17:09,839 --> 00:17:13,760
generic packetization can be defined and

386
00:17:12,000 --> 00:17:16,400
and probably fairly easily

387
00:17:13,760 --> 00:17:16,799
um it's probably something for the avt

388
00:17:16,400 --> 00:17:19,199
core

389
00:17:16,799 --> 00:17:20,639
working group if it's if it's for rtp

390
00:17:19,199 --> 00:17:23,679
depends how

391
00:17:20,640 --> 00:17:25,600
how this is being done um the

392
00:17:23,679 --> 00:17:27,120
the reason we haven't defined this in

393
00:17:25,599 --> 00:17:29,520
the past is obviously that it has

394
00:17:27,119 --> 00:17:31,360
implications for uh the robustness

395
00:17:29,520 --> 00:17:33,280
and if you just chop the packets

396
00:17:31,360 --> 00:17:36,320
arbitrarily then

397
00:17:33,280 --> 00:17:38,000
um you know you you get less good uh

398
00:17:36,320 --> 00:17:39,600
performance in the case of loss so i

399
00:17:38,000 --> 00:17:42,640
think it would have to be done carefully

400
00:17:39,600 --> 00:17:44,159
so uh yeah you know that there are some

401
00:17:42,640 --> 00:17:47,840
implications that need to be thought

402
00:17:44,160 --> 00:17:47,840
about before doing that

403
00:17:48,720 --> 00:18:01,840
thanks con sergio

404
00:18:02,720 --> 00:18:06,720
describe the mike sergio if you uh

405
00:18:08,480 --> 00:18:14,720
hello you were on the queue

406
00:18:11,679 --> 00:18:15,120
he will automatically mute okay and that

407
00:18:14,720 --> 00:18:18,880
we have

408
00:18:15,120 --> 00:18:21,918
started working on an hda rtp agnostic

409
00:18:18,880 --> 00:18:22,559
video packet decision format and i don't

410
00:18:21,919 --> 00:18:23,919
agree that

411
00:18:22,559 --> 00:18:27,039
there is kind of any kind of problem

412
00:18:23,919 --> 00:18:31,280
with their robustness i mean it

413
00:18:27,039 --> 00:18:34,080
is not i mean it does not allow

414
00:18:31,280 --> 00:18:35,678
for example partial decodability yet but

415
00:18:34,080 --> 00:18:37,918
it is not something that for example we

416
00:18:35,679 --> 00:18:39,840
rtc we are supporting so

417
00:18:37,919 --> 00:18:41,760
um probably it is important for some

418
00:18:39,840 --> 00:18:44,639
people but

419
00:18:41,760 --> 00:18:45,520
at least for webrtc is does not seem to

420
00:18:44,640 --> 00:18:49,200
be the case

421
00:18:45,520 --> 00:18:52,400
but anyway we will i i have later on a

422
00:18:49,200 --> 00:18:54,320
a full essay presentation on

423
00:18:52,400 --> 00:18:56,000
on video formats and packet testers so

424
00:18:54,320 --> 00:18:58,720
we can try to to

425
00:18:56,000 --> 00:19:00,320
move the discussion for later sounds

426
00:18:58,720 --> 00:19:03,280
good

427
00:19:00,320 --> 00:19:03,280
sounds good tim

428
00:19:03,760 --> 00:19:07,120
uh yeah i don't know if this is going to

429
00:19:06,160 --> 00:19:09,919
get answered in

430
00:19:07,120 --> 00:19:10,719
much as sergio's just mentioned but just

431
00:19:09,919 --> 00:19:13,919
to be clear

432
00:19:10,720 --> 00:19:14,799
this generic packetization is on top of

433
00:19:13,919 --> 00:19:16,559
the existing

434
00:19:14,799 --> 00:19:19,280
packetization for the codec or it

435
00:19:16,559 --> 00:19:19,280
replaces it

436
00:19:19,360 --> 00:19:23,199
it is replacing i mean in my case it is

437
00:19:21,600 --> 00:19:26,240
replacing i mean it is

438
00:19:23,200 --> 00:19:27,200
useless to have to define or if we are

439
00:19:26,240 --> 00:19:29,440
going to do a

440
00:19:27,200 --> 00:19:30,240
something that is agnostic to the coded

441
00:19:29,440 --> 00:19:33,360
defining

442
00:19:30,240 --> 00:19:34,000
a for for every video codex i don't

443
00:19:33,360 --> 00:19:36,080
think this is

444
00:19:34,000 --> 00:19:37,919
the best way to do i mean if we can have

445
00:19:36,080 --> 00:19:39,678
something that we work with all codes

446
00:19:37,919 --> 00:19:43,120
and we don't have to make

447
00:19:39,679 --> 00:19:43,919
much uh worth recording is better i mean

448
00:19:43,120 --> 00:19:45,840
you have to

449
00:19:43,919 --> 00:19:47,440
find something and then you have to

450
00:19:45,840 --> 00:19:50,320
redefine it or

451
00:19:47,440 --> 00:19:51,200
how it does it apply to each of the

452
00:19:50,320 --> 00:19:54,240
different

453
00:19:51,200 --> 00:19:57,360
codex past and future

454
00:19:54,240 --> 00:20:00,720
is like having a specific

455
00:19:57,360 --> 00:20:00,719
packetization for each one

456
00:20:04,320 --> 00:20:07,439
yeah i think there's a trade-off here

457
00:20:06,320 --> 00:20:09,039
between

458
00:20:07,440 --> 00:20:11,760
as scotland pointed out resiliency

459
00:20:09,039 --> 00:20:14,000
features and alignment with the codec

460
00:20:11,760 --> 00:20:15,520
um and the generality you're pointing

461
00:20:14,000 --> 00:20:16,559
out i think the question for this group

462
00:20:15,520 --> 00:20:18,320
is how we

463
00:20:16,559 --> 00:20:20,320
uh navigate that and get the right level

464
00:20:18,320 --> 00:20:21,840
of flexibility

465
00:20:20,320 --> 00:20:23,600
while also getting these reversals

466
00:20:21,840 --> 00:20:26,000
properties

467
00:20:23,600 --> 00:20:27,120
i would also wonder at what level um we

468
00:20:26,000 --> 00:20:30,400
need to define that like

469
00:20:27,120 --> 00:20:32,000
whether the s frame framing could be

470
00:20:30,400 --> 00:20:35,039
defined

471
00:20:32,000 --> 00:20:36,880
at a reasonably generic level and then

472
00:20:35,039 --> 00:20:39,440
map to different packetization schemes

473
00:20:36,880 --> 00:20:39,440
is appropriate

474
00:20:40,240 --> 00:20:50,880
okay we have justin

475
00:20:48,000 --> 00:20:52,799
wanted to comment uh to that that like

476
00:20:50,880 --> 00:20:53,200
i'm not sure there really is a tension

477
00:20:52,799 --> 00:20:56,240
here

478
00:20:53,200 --> 00:20:59,679
between resilience and uh

479
00:20:56,240 --> 00:21:01,919
you know the actual frame approach

480
00:20:59,679 --> 00:21:03,280
um it comes down to what we consider to

481
00:21:01,919 --> 00:21:06,720
be our independent unit

482
00:21:03,280 --> 00:21:10,000
our our frame per se and uh

483
00:21:06,720 --> 00:21:12,559
you know with you know h.264 you know

484
00:21:10,000 --> 00:21:15,760
you can have like a frame split into

485
00:21:12,559 --> 00:21:17,200
you know two different slices with vp9

486
00:21:15,760 --> 00:21:18,158
you can have it split into different

487
00:21:17,200 --> 00:21:19,520
tiles

488
00:21:18,159 --> 00:21:21,600
you know we could estrogen could be

489
00:21:19,520 --> 00:21:22,720
applied either at the entire frame level

490
00:21:21,600 --> 00:21:25,439
or at the slice

491
00:21:22,720 --> 00:21:27,440
slash tile level so you can retain some

492
00:21:25,440 --> 00:21:29,679
of the resilience benefits you get from

493
00:21:27,440 --> 00:21:30,640
slicing or tiling even when using

494
00:21:29,679 --> 00:21:33,120
s-frame

495
00:21:30,640 --> 00:21:34,480
uh a small trade-off of efficiency

496
00:21:33,120 --> 00:21:35,678
because you have then

497
00:21:34,480 --> 00:21:38,000
you know multiple encryptions and

498
00:21:35,679 --> 00:21:39,039
multiple signatures but i think we can

499
00:21:38,000 --> 00:21:40,480
retain

500
00:21:39,039 --> 00:21:44,000
the benefits of those types of

501
00:21:40,480 --> 00:21:46,799
approaches even when using s-frame

502
00:21:44,000 --> 00:21:48,320
you know what google is using there

503
00:21:46,799 --> 00:21:49,200
currently is it the whole frame but it's

504
00:21:48,320 --> 00:21:53,200
encrypted

505
00:21:49,200 --> 00:21:55,120
or is it like fine or grained

506
00:21:53,200 --> 00:21:56,720
uh well we explicitly considered you

507
00:21:55,120 --> 00:21:59,678
know supporting tiles

508
00:21:56,720 --> 00:22:01,280
uh when we designed this frame uh you

509
00:21:59,679 --> 00:22:04,799
know i don't know if we if that is

510
00:22:01,280 --> 00:22:07,039
that capability is actually used um

511
00:22:04,799 --> 00:22:08,400
you know in the implementation to date

512
00:22:07,039 --> 00:22:10,400
uh you know i i

513
00:22:08,400 --> 00:22:12,880
would probably know better right now but

514
00:22:10,400 --> 00:22:14,159
we we explicitly consider this and like

515
00:22:12,880 --> 00:22:16,080
you know

516
00:22:14,159 --> 00:22:18,159
i i think it should it would just be an

517
00:22:16,080 --> 00:22:19,918
implementation detail

518
00:22:18,159 --> 00:22:22,320
yeah so we're needing the full frame

519
00:22:19,919 --> 00:22:22,320
right now

520
00:22:23,360 --> 00:22:29,600
okay magnus

521
00:22:26,559 --> 00:22:31,760
yes so as an individual there i i think

522
00:22:29,600 --> 00:22:34,399
what colin is talking about robustness

523
00:22:31,760 --> 00:22:36,240
is that actually it's about how to map

524
00:22:34,400 --> 00:22:38,400
to a large degree you're mapping it to

525
00:22:36,240 --> 00:22:40,000
what you consider in rtps streams and

526
00:22:38,400 --> 00:22:42,720
ssrs etc and that's

527
00:22:40,000 --> 00:22:44,559
where because it really i don't expect

528
00:22:42,720 --> 00:22:46,159
most of you to do this really stupid

529
00:22:44,559 --> 00:22:48,320
trick but i mean if you leave it

530
00:22:46,159 --> 00:22:49,840
completely open people are going to

531
00:22:48,320 --> 00:22:51,760
shovel multiple codecs

532
00:22:49,840 --> 00:22:53,918
into one structure and then send it to

533
00:22:51,760 --> 00:22:55,200
one rtp stream and that's of course has

534
00:22:53,919 --> 00:22:56,720
implications so i think

535
00:22:55,200 --> 00:22:58,960
that's where i was pushing on the

536
00:22:56,720 --> 00:23:00,240
charging stage to actually

537
00:22:58,960 --> 00:23:02,240
try to get this description and

538
00:23:00,240 --> 00:23:03,600
especially with the scalable codecs etc

539
00:23:02,240 --> 00:23:05,679
and how you do

540
00:23:03,600 --> 00:23:08,799
handle those substreams i think that's

541
00:23:05,679 --> 00:23:10,559
where a large part of this discussion is

542
00:23:08,799 --> 00:23:12,080
needs to be going that's one aspect of

543
00:23:10,559 --> 00:23:13,120
this the other is okay what's the

544
00:23:12,080 --> 00:23:15,199
generic

545
00:23:13,120 --> 00:23:16,799
meta information that goes on the side

546
00:23:15,200 --> 00:23:19,520
combined with that

547
00:23:16,799 --> 00:23:20,960
so you get the balance between what's

548
00:23:19,520 --> 00:23:22,960
how you structure media and

549
00:23:20,960 --> 00:23:25,440
keep track of its timelines and then

550
00:23:22,960 --> 00:23:27,600
relative to each other etc those aspects

551
00:23:25,440 --> 00:23:29,840
without exposing information

552
00:23:27,600 --> 00:23:32,799
and and having reasonable size encrypted

553
00:23:29,840 --> 00:23:32,799
units and all these things

554
00:23:33,200 --> 00:23:37,280
so i'm going to cut the conversation

555
00:23:34,799 --> 00:23:39,280
here or the cue here and then

556
00:23:37,280 --> 00:23:40,799
we'll let you and get through the rest

557
00:23:39,280 --> 00:23:43,120
of this presentation

558
00:23:40,799 --> 00:23:44,320
sergio you can speak if you if you think

559
00:23:43,120 --> 00:23:46,479
it's important but we can

560
00:23:44,320 --> 00:23:48,320
we can cover some of these topics again

561
00:23:46,480 --> 00:23:48,960
um but you'll have to wait till herod

562
00:23:48,320 --> 00:23:52,639
harold

563
00:23:48,960 --> 00:23:55,520
space first so just

564
00:23:52,640 --> 00:23:58,080
just that the insertable streams api

565
00:23:55,520 --> 00:24:00,240
currently deals only with whole frames

566
00:23:58,080 --> 00:24:02,639
but of course picking up part of a frame

567
00:24:00,240 --> 00:24:04,640
is just a matter of programming

568
00:24:02,640 --> 00:24:05,840
so that shouldn't cost shouldn't

569
00:24:04,640 --> 00:24:09,360
concentrate

570
00:24:05,840 --> 00:24:12,000
anything about uh about how

571
00:24:09,360 --> 00:24:12,000
this is done

572
00:24:13,679 --> 00:24:18,480
okay thanks everyone uh hopefully we

573
00:24:17,039 --> 00:24:19,760
have some notes on that one and we can

574
00:24:18,480 --> 00:24:22,159
continue this one when

575
00:24:19,760 --> 00:24:25,039
we talk about this later uh you and you

576
00:24:22,159 --> 00:24:27,520
want to continue the presentation

577
00:24:25,039 --> 00:24:28,240
yeah next slide or maybe you should skip

578
00:24:27,520 --> 00:24:32,320
it actually

579
00:24:28,240 --> 00:24:34,640
uh because it's really like okay

580
00:24:32,320 --> 00:24:35,760
i have two additional questions related

581
00:24:34,640 --> 00:24:39,600
to s-frame one

582
00:24:35,760 --> 00:24:41,679
is um about authentication signatures so

583
00:24:39,600 --> 00:24:43,600
as an as i understand it the goal is to

584
00:24:41,679 --> 00:24:45,840
validate but receive content is actually

585
00:24:43,600 --> 00:24:49,360
coming from a given user

586
00:24:45,840 --> 00:24:52,559
from the rtp stream

587
00:24:49,360 --> 00:24:54,719
that sounds like a good idea

588
00:24:52,559 --> 00:24:56,799
but when trying to think about

589
00:24:54,720 --> 00:24:58,880
implementing it browser it appears

590
00:24:56,799 --> 00:25:00,799
quite difficult it's really up to the

591
00:24:58,880 --> 00:25:03,360
application to decide what to do when

592
00:25:00,799 --> 00:25:05,120
signature verification fails and there

593
00:25:03,360 --> 00:25:08,639
could be potential breakage with

594
00:25:05,120 --> 00:25:10,158
network intermediaries uh there's

595
00:25:08,640 --> 00:25:11,840
additional buffering or delay

596
00:25:10,159 --> 00:25:15,840
requirements that

597
00:25:11,840 --> 00:25:19,039
are not easy to handle well uh

598
00:25:15,840 --> 00:25:21,760
as well in browsers so when i started

599
00:25:19,039 --> 00:25:23,520
looking at it i started to think what

600
00:25:21,760 --> 00:25:26,840
what really is the threat model for

601
00:25:23,520 --> 00:25:29,918
for that what what is it protecting us

602
00:25:26,840 --> 00:25:30,959
and if the same kind of protection can

603
00:25:29,919 --> 00:25:35,919
be done

604
00:25:30,960 --> 00:25:38,960
in other ways basically um

605
00:25:35,919 --> 00:25:43,200
so yeah i see people on the queue so

606
00:25:38,960 --> 00:25:46,159
let's get the answer yeah richard

607
00:25:43,200 --> 00:25:48,320
just some quick feedback uh is this if

608
00:25:46,159 --> 00:25:49,440
the concern here is purely denial of

609
00:25:48,320 --> 00:25:52,080
service

610
00:25:49,440 --> 00:25:53,600
uh then i think i'm not real concerned

611
00:25:52,080 --> 00:25:54,879
if it's about confidentiality or

612
00:25:53,600 --> 00:25:56,480
authenticity then

613
00:25:54,880 --> 00:25:57,679
i think yeah we would consider the sfu

614
00:25:56,480 --> 00:25:59,440
part of the threat model that's kind of

615
00:25:57,679 --> 00:26:01,039
the point of doing this

616
00:25:59,440 --> 00:26:03,440
um but if it's if we're just worried

617
00:26:01,039 --> 00:26:05,679
about on the sfu dropping packets

618
00:26:03,440 --> 00:26:07,120
um maybe we'd be worried about revealing

619
00:26:05,679 --> 00:26:10,240
more information to them but

620
00:26:07,120 --> 00:26:13,199
i i don't think that's that seems pretty

621
00:26:10,240 --> 00:26:13,200
secondary in any case

622
00:26:15,919 --> 00:26:19,600
uh imad yeah so i guess the third model

623
00:26:19,039 --> 00:26:21,840
was

624
00:26:19,600 --> 00:26:23,360
mainly malicious user impersonation like

625
00:26:21,840 --> 00:26:24,000
someone in the call and pursuing some

626
00:26:23,360 --> 00:26:26,959
another another

627
00:26:24,000 --> 00:26:28,640
person in the call and i actually had

628
00:26:26,960 --> 00:26:30,159
the exact same slide in my presentation

629
00:26:28,640 --> 00:26:31,760
asking document what's the signature

630
00:26:30,159 --> 00:26:32,320
scheme should we sign or should not sign

631
00:26:31,760 --> 00:26:34,000
because

632
00:26:32,320 --> 00:26:36,399
in the current respect right now it's

633
00:26:34,000 --> 00:26:38,159
basically hand wavy it's very complex

634
00:26:36,400 --> 00:26:41,120
and we don't have an idea solution for

635
00:26:38,159 --> 00:26:42,720
it so i was going basically to suggest

636
00:26:41,120 --> 00:26:44,000
should we should so should malicious

637
00:26:42,720 --> 00:26:45,440
user be part of the first mother or

638
00:26:44,000 --> 00:26:47,360
should we drop it completely for now to

639
00:26:45,440 --> 00:26:53,840
make things simpler

640
00:26:47,360 --> 00:26:53,840
yep okay

641
00:26:55,840 --> 00:27:01,360
the i think we should drop this um

642
00:26:58,960 --> 00:27:02,720
the um i mean it's essentially very hard

643
00:27:01,360 --> 00:27:05,439
to do um

644
00:27:02,720 --> 00:27:06,240
uh with any reasonable performance um

645
00:27:05,440 --> 00:27:08,400
and

646
00:27:06,240 --> 00:27:09,600
um you know absent like so i think

647
00:27:08,400 --> 00:27:10,640
there's like there's like that

648
00:27:09,600 --> 00:27:12,000
you know it depends on your model of the

649
00:27:10,640 --> 00:27:13,440
application but if you're like while the

650
00:27:12,000 --> 00:27:14,080
application is like the dumb version

651
00:27:13,440 --> 00:27:16,480
where there's like

652
00:27:14,080 --> 00:27:18,240
it was basically like you know like a

653
00:27:16,480 --> 00:27:19,520
single monolithic conferencing system

654
00:27:18,240 --> 00:27:21,600
um like the one we're on here for

655
00:27:19,520 --> 00:27:23,279
instance um then uh

656
00:27:21,600 --> 00:27:25,439
you know signatures don't actually help

657
00:27:23,279 --> 00:27:26,720
because the because that because that

658
00:27:25,440 --> 00:27:27,919
what it shows you but who's speaking is

659
00:27:26,720 --> 00:27:28,480
like entirely controlled by this of you

660
00:27:27,919 --> 00:27:31,520
anyway

661
00:27:28,480 --> 00:27:35,679
at least for rtc so um you know

662
00:27:31,520 --> 00:27:37,520
uh um so i think like you know

663
00:27:35,679 --> 00:27:38,880
do we have like a sort of much saying

664
00:27:37,520 --> 00:27:40,480
much more like isolated streams and

665
00:27:38,880 --> 00:27:41,760
an identity that kind of thing i don't

666
00:27:40,480 --> 00:27:43,440
think that this is gonna like work very

667
00:27:41,760 --> 00:27:44,640
well and so i think like we should punt

668
00:27:43,440 --> 00:27:45,600
that put this until we're like further

669
00:27:44,640 --> 00:27:49,840
along with the rest of the

670
00:27:45,600 --> 00:27:49,840
sir i still cook

671
00:27:52,480 --> 00:27:55,919
yeah i don't think that we should drop

672
00:27:54,159 --> 00:27:57,840
it i mean nothing is an interesting

673
00:27:55,919 --> 00:27:59,279
feature i don't know how complex

674
00:27:57,840 --> 00:28:00,959
well i know that it is complex to

675
00:27:59,279 --> 00:28:03,760
implement i don't know if it is

676
00:28:00,960 --> 00:28:05,440
enough but i don't think that we should

677
00:28:03,760 --> 00:28:07,200
just say that we will not

678
00:28:05,440 --> 00:28:09,279
have to implement it i think it's a very

679
00:28:07,200 --> 00:28:10,880
nice feature and it is something that

680
00:28:09,279 --> 00:28:12,880
from the application level

681
00:28:10,880 --> 00:28:14,880
i would like to have it when implemented

682
00:28:12,880 --> 00:28:18,080
as phrase i mean to be able to

683
00:28:14,880 --> 00:28:20,480
to authenticate what a

684
00:28:18,080 --> 00:28:22,080
what user is speaking in its flag is

685
00:28:20,480 --> 00:28:23,440
something that for me as an application

686
00:28:22,080 --> 00:28:25,840
developers is something

687
00:28:23,440 --> 00:28:28,000
but it is very interesting i understand

688
00:28:25,840 --> 00:28:29,760
that it is complex to implement

689
00:28:28,000 --> 00:28:32,159
uh we don't pass the javascript

690
00:28:29,760 --> 00:28:34,240
application because um

691
00:28:32,159 --> 00:28:36,080
we it is hard for browsers to be able to

692
00:28:34,240 --> 00:28:37,600
display that information

693
00:28:36,080 --> 00:28:39,520
but the application is strategy

694
00:28:37,600 --> 00:28:41,600
something that it is it's

695
00:28:39,520 --> 00:28:43,520
at least from my site i think is

696
00:28:41,600 --> 00:28:45,199
interesting the thing is see that we

697
00:28:43,520 --> 00:28:46,399
feel that it is complex or it is not

698
00:28:45,200 --> 00:28:49,120
robust enough

699
00:28:46,399 --> 00:28:50,479
but just say just dropping just at the

700
00:28:49,120 --> 00:28:52,639
start i don't think i did this out with

701
00:28:50,480 --> 00:28:52,640
him

702
00:28:53,600 --> 00:29:00,480
okay i think i've got it again

703
00:28:57,520 --> 00:29:01,279
sorry point isn't that it's hard to

704
00:29:00,480 --> 00:29:02,799
implement

705
00:29:01,279 --> 00:29:05,039
and therefore you shouldn't do it my

706
00:29:02,799 --> 00:29:06,320
point is that there's no that

707
00:29:05,039 --> 00:29:07,840
if this is done in the browser there's

708
00:29:06,320 --> 00:29:08,720
like almost no meaningful front modeling

709
00:29:07,840 --> 00:29:10,320
which is as an

710
00:29:08,720 --> 00:29:11,360
insecurity because you already know

711
00:29:10,320 --> 00:29:12,240
who's talking to you because you've

712
00:29:11,360 --> 00:29:14,479
authenticated them in

713
00:29:12,240 --> 00:29:16,240
the details of their dp level and the

714
00:29:14,480 --> 00:29:17,360
people responsible for displaying the ui

715
00:29:16,240 --> 00:29:20,159
that is talking or the

716
00:29:17,360 --> 00:29:20,719
is is the is the website itself and so

717
00:29:20,159 --> 00:29:22,240
the website

718
00:29:20,720 --> 00:29:24,320
you know lie or not lie but if it can

719
00:29:22,240 --> 00:29:26,399
lie then then signatures don't help but

720
00:29:24,320 --> 00:29:29,360
if it can't lie then who cares um

721
00:29:26,399 --> 00:29:30,639
so um you know this uh that that's the

722
00:29:29,360 --> 00:29:33,360
point i was trying to make there

723
00:29:30,640 --> 00:29:34,640
um into uh the complexity again the

724
00:29:33,360 --> 00:29:35,918
president's implementation the question

725
00:29:34,640 --> 00:29:37,039
is the crypto to make this work in a

726
00:29:35,919 --> 00:29:38,799
like meaningful way

727
00:29:37,039 --> 00:29:40,320
um that doesn't like involve like it's

728
00:29:38,799 --> 00:29:41,279
enormous on a crypto or worrying about a

729
00:29:40,320 --> 00:29:42,960
lot of packet drops

730
00:29:41,279 --> 00:29:43,760
um as i think i observe i'm not sure if

731
00:29:42,960 --> 00:29:45,039
i've served this on the list or

732
00:29:43,760 --> 00:29:46,720
somewhere else but the existing

733
00:29:45,039 --> 00:29:49,440
the existing design actually is broken

734
00:29:46,720 --> 00:29:49,440
in some respects

735
00:29:51,039 --> 00:29:54,480
okay we're going to shortcut this

736
00:29:53,039 --> 00:29:55,279
conversation because we have other

737
00:29:54,480 --> 00:29:58,799
topics but

738
00:29:55,279 --> 00:30:00,720
this is good uh amen yeah i

739
00:29:58,799 --> 00:30:02,480
want to just take what eckhart said uh

740
00:30:00,720 --> 00:30:03,919
it's not only about complexity it's

741
00:30:02,480 --> 00:30:06,000
the current the car what's in the

742
00:30:03,919 --> 00:30:08,080
expects is not complete it's broken

743
00:30:06,000 --> 00:30:09,279
so my suggestion for removing removing

744
00:30:08,080 --> 00:30:10,879
until we have

745
00:30:09,279 --> 00:30:12,399
a complete solution i'm fine getting

746
00:30:10,880 --> 00:30:14,399
back once we have a full working

747
00:30:12,399 --> 00:30:17,840
solutions but as of today

748
00:30:14,399 --> 00:30:17,840
uh it's it's broken

749
00:30:18,799 --> 00:30:23,279
right tim yeah i think we're suffering

750
00:30:21,919 --> 00:30:25,360
from not having

751
00:30:23,279 --> 00:30:27,039
heard the use cases i think this

752
00:30:25,360 --> 00:30:28,639
discussion is really hard to do without

753
00:30:27,039 --> 00:30:31,200
knowing exactly what the use cases are

754
00:30:28,640 --> 00:30:31,200
supposed to be

755
00:30:32,720 --> 00:30:38,559
good point uh and sergio

756
00:30:36,320 --> 00:30:40,000
i also remember that is there are other

757
00:30:38,559 --> 00:30:41,520
use cases that are not broken

758
00:30:40,000 --> 00:30:43,039
based i mean this can be implemented in

759
00:30:41,520 --> 00:30:44,720
native applications

760
00:30:43,039 --> 00:30:46,799
and we have clients that are already

761
00:30:44,720 --> 00:30:47,600
implementing this and this is a feature

762
00:30:46,799 --> 00:30:50,639
that it is a

763
00:30:47,600 --> 00:30:51,360
required for them i mean again i am i

764
00:30:50,640 --> 00:30:53,919
don't

765
00:30:51,360 --> 00:30:55,678
if i'm not going to start to go into the

766
00:30:53,919 --> 00:30:57,440
crypt of the details but

767
00:30:55,679 --> 00:31:02,880
if from a future perspective it's

768
00:30:57,440 --> 00:31:02,880
something that is really important

769
00:31:03,360 --> 00:31:07,519
richard yeah i think my biases are

770
00:31:06,399 --> 00:31:08,719
broadly in the same direction as

771
00:31:07,519 --> 00:31:12,399
accurately mad

772
00:31:08,720 --> 00:31:14,080
um but like tim said i think this this

773
00:31:12,399 --> 00:31:15,279
this is an area where i think we

774
00:31:14,080 --> 00:31:16,720
understand the implications for

775
00:31:15,279 --> 00:31:18,000
conferencing but there are other use

776
00:31:16,720 --> 00:31:19,200
cases to have in mind here

777
00:31:18,000 --> 00:31:21,840
and so i'd like to understand those use

778
00:31:19,200 --> 00:31:21,840
cases as well

779
00:31:22,960 --> 00:31:26,559
okay so um what i'm what i'm hearing

780
00:31:25,519 --> 00:31:28,559
here is that there's

781
00:31:26,559 --> 00:31:30,320
some question mark over this one but

782
00:31:28,559 --> 00:31:32,000
let's get back to this when we start

783
00:31:30,320 --> 00:31:35,039
talking about the

784
00:31:32,000 --> 00:31:36,640
s frame draft itself uh you and do you

785
00:31:35,039 --> 00:31:39,600
have much left

786
00:31:36,640 --> 00:31:40,799
uh just one question the last slide is

787
00:31:39,600 --> 00:31:44,080
um

788
00:31:40,799 --> 00:31:46,320
it's frame so webrtc is

789
00:31:44,080 --> 00:31:47,678
surely about audio and video but it's

790
00:31:46,320 --> 00:31:49,360
also about data channel

791
00:31:47,679 --> 00:31:50,960
and there's also like website

792
00:31:49,360 --> 00:31:53,199
webtransport um

793
00:31:50,960 --> 00:31:54,320
data channel can be used to transmit

794
00:31:53,200 --> 00:31:57,039
real-time data

795
00:31:54,320 --> 00:31:57,918
it can be subtitles anything right

796
00:31:57,039 --> 00:32:02,480
really

797
00:31:57,919 --> 00:32:04,320
so my question is is that frame

798
00:32:02,480 --> 00:32:06,000
are there any use cases where sven could

799
00:32:04,320 --> 00:32:08,720
be used with data channel

800
00:32:06,000 --> 00:32:09,840
should it be in scope of either this

801
00:32:08,720 --> 00:32:13,039
group or

802
00:32:09,840 --> 00:32:16,959
the work that would be done in wfc

803
00:32:13,039 --> 00:32:16,960
so yeah that's a question

804
00:32:23,679 --> 00:32:28,640
tim yeah i think

805
00:32:26,799 --> 00:32:30,240
fairly obviously the answer to that from

806
00:32:28,640 --> 00:32:31,440
my perspective is yes

807
00:32:30,240 --> 00:32:33,760
i think there's some very interesting

808
00:32:31,440 --> 00:32:36,880
things you could do with with

809
00:32:33,760 --> 00:32:38,399
having um encryption an

810
00:32:36,880 --> 00:32:40,799
extra encryption layer on the data

811
00:32:38,399 --> 00:32:43,840
channel over kind of multiplayer games

812
00:32:40,799 --> 00:32:43,840
and things like that

813
00:32:45,360 --> 00:32:48,158
all right echo

814
00:32:55,120 --> 00:32:59,678
i get i guess the answer is i don't know

815
00:32:56,960 --> 00:33:02,000
um i mean i i agree with him that having

816
00:32:59,679 --> 00:33:03,519
um you know multiple observation things

817
00:33:02,000 --> 00:33:05,760
up with fair games is interesting

818
00:33:03,519 --> 00:33:07,519
but it seems like all the data is like

819
00:33:05,760 --> 00:33:10,000
being sourced by javascript

820
00:33:07,519 --> 00:33:11,200
and so um and so like why not just do

821
00:33:10,000 --> 00:33:12,799
that crypto in javascript

822
00:33:11,200 --> 00:33:14,399
before you shuff it down this before you

823
00:33:12,799 --> 00:33:15,760
shut down the data channel so i think i

824
00:33:14,399 --> 00:33:16,959
have to understand like what the threat

825
00:33:15,760 --> 00:33:18,158
model was

826
00:33:16,960 --> 00:33:19,840
and what you're trying to accomplish

827
00:33:18,159 --> 00:33:21,440
before i knew whether that was a good

828
00:33:19,840 --> 00:33:22,559
idea or not i agree with the text here

829
00:33:21,440 --> 00:33:23,840
that there's no like

830
00:33:22,559 --> 00:33:24,960
there's no like in principle reason why

831
00:33:23,840 --> 00:33:27,678
i couldn't use data channel i'm trying

832
00:33:24,960 --> 00:33:27,679
to figure out what it does

833
00:33:28,640 --> 00:33:31,039
justin

834
00:33:33,600 --> 00:33:38,240
i agree with eric um it seems like there

835
00:33:36,880 --> 00:33:38,799
could be a lot of interesting things

836
00:33:38,240 --> 00:33:40,880
here like

837
00:33:38,799 --> 00:33:42,480
you know there's plenty of applications

838
00:33:40,880 --> 00:33:44,399
that are offering end-to-end encryption

839
00:33:42,480 --> 00:33:45,919
in the browser for text messaging and

840
00:33:44,399 --> 00:33:48,479
similar things um

841
00:33:45,919 --> 00:33:50,320
and at least would benefit from having

842
00:33:48,480 --> 00:33:52,559
like some sort of

843
00:33:50,320 --> 00:33:54,080
you know uh place where the actual

844
00:33:52,559 --> 00:33:54,799
cryptography is being done inside a

845
00:33:54,080 --> 00:33:57,199
secure

846
00:33:54,799 --> 00:33:58,399
um you know environment uh but i don't

847
00:33:57,200 --> 00:33:59,919
know how you solve this sort of issue

848
00:33:58,399 --> 00:34:01,039
with like the actual input

849
00:33:59,919 --> 00:34:03,679
you know it's still back in the

850
00:34:01,039 --> 00:34:04,720
untrusted domain um it seems like if

851
00:34:03,679 --> 00:34:06,559
you've at least

852
00:34:04,720 --> 00:34:08,720
solved the crypto part of it then you're

853
00:34:06,559 --> 00:34:10,399
only halfway closer to that you know uh

854
00:34:08,719 --> 00:34:12,399
final solution and it seems like you

855
00:34:10,399 --> 00:34:13,118
know given the amount of uh usage that

856
00:34:12,399 --> 00:34:14,960
people have of

857
00:34:13,119 --> 00:34:16,079
communicating over just text like there

858
00:34:14,960 --> 00:34:17,199
would be a lot of value if you're

859
00:34:16,079 --> 00:34:18,560
actually come up with some form of

860
00:34:17,199 --> 00:34:20,879
solution here so

861
00:34:18,560 --> 00:34:22,320
i i think we probably in terms of like

862
00:34:20,879 --> 00:34:23,759
our use cases they'll be pretty far down

863
00:34:22,320 --> 00:34:25,440
the list because it's a lot more

864
00:34:23,760 --> 00:34:27,119
complexity we have to take on but they

865
00:34:25,440 --> 00:34:27,679
hopefully once we knock off some earlier

866
00:34:27,119 --> 00:34:29,040
things

867
00:34:27,679 --> 00:34:31,040
then maybe some other folks could then

868
00:34:29,040 --> 00:34:35,119
take this on in terms of uh

869
00:34:31,040 --> 00:34:37,839
achieving that particular goal

870
00:34:35,119 --> 00:34:39,119
yep as jonathan suggested i'm counting

871
00:34:37,839 --> 00:34:41,520
the queue here

872
00:34:39,119 --> 00:34:41,520
jonathan

873
00:34:42,960 --> 00:34:46,960
i mean i think i kind of feel like do

874
00:34:45,119 --> 00:34:49,359
you use it with data channel as the

875
00:34:46,960 --> 00:34:50,879
wrong level of question i mean it's you

876
00:34:49,359 --> 00:34:52,560
know do you want to apply it to things

877
00:34:50,879 --> 00:34:55,520
other than audio and video

878
00:34:52,560 --> 00:34:57,119
is one question and you know that maybe

879
00:34:55,520 --> 00:34:59,200
then the answer is maybe i don't know

880
00:34:57,119 --> 00:35:00,720
but you know i think that's that over

881
00:34:59,200 --> 00:35:03,439
data channel on our website

882
00:35:00,720 --> 00:35:04,160
transport you know carrier pigeons it's

883
00:35:03,440 --> 00:35:05,760
sort of a

884
00:35:04,160 --> 00:35:07,520
sep is a separate not that interesting

885
00:35:05,760 --> 00:35:08,800
question i mean i think that there's

886
00:35:07,520 --> 00:35:10,160
for the audio and video creators there's

887
00:35:08,800 --> 00:35:11,760
also interesting things like you know

888
00:35:10,160 --> 00:35:13,839
maybe you want to do

889
00:35:11,760 --> 00:35:14,880
s frame over hls that sounds like it

890
00:35:13,839 --> 00:35:16,720
might be an interesting thing to do in

891
00:35:14,880 --> 00:35:18,720
some use cases but that's

892
00:35:16,720 --> 00:35:20,319
i think that what you're transporting it

893
00:35:18,720 --> 00:35:23,439
over is kind of not

894
00:35:20,320 --> 00:35:23,440
the right level of question

895
00:35:26,160 --> 00:35:29,680
i think the same problems that we have

896
00:35:27,680 --> 00:35:31,598
with audio and video would be much much

897
00:35:29,680 --> 00:35:34,240
worse with data channels because

898
00:35:31,599 --> 00:35:35,040
uh just just like the packaging issue

899
00:35:34,240 --> 00:35:38,560
raised

900
00:35:35,040 --> 00:35:41,040
earlier the sfu is doing a function

901
00:35:38,560 --> 00:35:43,040
and for it to do that function it needs

902
00:35:41,040 --> 00:35:46,079
to it needs to see some part of

903
00:35:43,040 --> 00:35:47,520
these frames and so the data channels

904
00:35:46,079 --> 00:35:49,520
if you if you're just taking it as like

905
00:35:47,520 --> 00:35:51,440
an opaque thing that you're

906
00:35:49,520 --> 00:35:53,359
that you're trying to uh forward around

907
00:35:51,440 --> 00:35:56,240
then you still need some sort of

908
00:35:53,359 --> 00:35:56,799
uh information uh you know to the sfu

909
00:35:56,240 --> 00:35:59,439
about

910
00:35:56,800 --> 00:36:00,000
why each of these data channel messages

911
00:35:59,440 --> 00:36:01,680
so you know

912
00:36:00,000 --> 00:36:03,440
the problems with packetization audio

913
00:36:01,680 --> 00:36:06,000
and video would be even

914
00:36:03,440 --> 00:36:07,119
more difficult with data channels um

915
00:36:06,000 --> 00:36:08,800
because they can't just be treated as

916
00:36:07,119 --> 00:36:13,839
opaque blobs otherwise what is sfp

917
00:36:08,800 --> 00:36:13,839
really doing with them

918
00:36:15,200 --> 00:36:23,439
okay um thanks john i think that's

919
00:36:19,440 --> 00:36:27,839
the presentation uh you're up next

920
00:36:23,440 --> 00:36:27,839
and we're talking e to e

921
00:36:28,960 --> 00:36:32,079
i guess i'm not going to use mostly

922
00:36:30,400 --> 00:36:33,920
because chairs already covered overview

923
00:36:32,079 --> 00:36:36,880
remind everyone of the protocol

924
00:36:33,920 --> 00:36:37,440
i might jump directly into site number

925
00:36:36,880 --> 00:36:41,520
five

926
00:36:37,440 --> 00:36:42,960
in the format

927
00:36:41,520 --> 00:36:44,560
yeah so i want to remind everyone with

928
00:36:42,960 --> 00:36:46,079
the wire format because i hear those

929
00:36:44,560 --> 00:36:48,240
confusion about key id

930
00:36:46,079 --> 00:36:49,119
so this is basically the wire format of

931
00:36:48,240 --> 00:36:51,359
encrypted frames

932
00:36:49,119 --> 00:36:52,560
the frame which has uh encryption header

933
00:36:51,359 --> 00:36:55,359
it has a frame counter

934
00:36:52,560 --> 00:36:57,119
key id and that's the end of ventilation

935
00:36:55,359 --> 00:36:57,759
text so one thing to facilitate here the

936
00:36:57,119 --> 00:37:00,079
key id

937
00:36:57,760 --> 00:37:01,200
is the user key id it's not a global for

938
00:37:00,079 --> 00:37:03,359
all users kid

939
00:37:01,200 --> 00:37:04,560
so every user will have k1 k2 k3 et

940
00:37:03,359 --> 00:37:06,720
cetera et cetera

941
00:37:04,560 --> 00:37:10,480
so because i saw from other sides that's

942
00:37:06,720 --> 00:37:13,598
about key key idea conflicts

943
00:37:10,480 --> 00:37:14,960
hopefully this point is clear and

944
00:37:13,599 --> 00:37:17,680
you can jump right into slide number

945
00:37:14,960 --> 00:37:17,680
eight open issues

946
00:37:19,599 --> 00:37:25,359
my next slide

947
00:37:23,200 --> 00:37:27,759
so the first one i want to talk about is

948
00:37:25,359 --> 00:37:29,680
uh dependency change in the mobile rtc

949
00:37:27,760 --> 00:37:32,160
other overclocking groups what they need

950
00:37:29,680 --> 00:37:35,118
to define for forester frames

951
00:37:32,160 --> 00:37:36,640
uh so there are main things here is uh

952
00:37:35,119 --> 00:37:38,560
as everyone mentioned signaling as a

953
00:37:36,640 --> 00:37:38,960
frame like uh other is give your other

954
00:37:38,560 --> 00:37:40,560
uh

955
00:37:38,960 --> 00:37:42,480
auto plan mechanism we're going to use

956
00:37:40,560 --> 00:37:44,320
this frame uh

957
00:37:42,480 --> 00:37:46,079
then we need to find a new pillow type

958
00:37:44,320 --> 00:37:49,599
for encrypted uh

959
00:37:46,079 --> 00:37:52,240
frames and the last thing is uh

960
00:37:49,599 --> 00:37:52,720
we need a generic rtb header extensions

961
00:37:52,240 --> 00:37:54,560
that

962
00:37:52,720 --> 00:37:56,319
holds the metadata and blendtec so if

963
00:37:54,560 --> 00:37:58,560
you can continue to work

964
00:37:56,320 --> 00:38:00,000
uh this needs to force them between the

965
00:37:58,560 --> 00:38:01,040
beginning of the frame the end of the

966
00:38:00,000 --> 00:38:03,520
frame

967
00:38:01,040 --> 00:38:05,920
all other frames data like resolution

968
00:38:03,520 --> 00:38:07,040
volume level etcetera etcetera

969
00:38:05,920 --> 00:38:10,160
so we should be working with other

970
00:38:07,040 --> 00:38:12,720
working group to to win this thing so

971
00:38:10,160 --> 00:38:12,720
next slide

972
00:38:15,760 --> 00:38:18,880
okay back to what you want said about

973
00:38:17,839 --> 00:38:22,160
signatures uh

974
00:38:18,880 --> 00:38:24,800
so to be clear i'm i'm saying what's

975
00:38:22,160 --> 00:38:25,920
what's uh in the current document is not

976
00:38:24,800 --> 00:38:27,520
complete

977
00:38:25,920 --> 00:38:28,960
as an example it doesn't define how

978
00:38:27,520 --> 00:38:31,440
often uh

979
00:38:28,960 --> 00:38:33,520
the signature uh frame should be sent

980
00:38:31,440 --> 00:38:36,320
what happens if the signature packet

981
00:38:33,520 --> 00:38:37,599
itself is lost does it have a repair

982
00:38:36,320 --> 00:38:39,760
mechanism or not

983
00:38:37,599 --> 00:38:40,960
uh what if the recipient doesn't receive

984
00:38:39,760 --> 00:38:42,640
a signature bag it should chill its

985
00:38:40,960 --> 00:38:44,720
request or shouldn't drop

986
00:38:42,640 --> 00:38:46,480
so this is why i'm saying what's in

987
00:38:44,720 --> 00:38:48,799
current is the currency is not complete

988
00:38:46,480 --> 00:38:50,160
i'm suggesting drop it until we have a

989
00:38:48,800 --> 00:38:53,599
complete solution

990
00:38:50,160 --> 00:38:55,040
uh but yeah so this is basically uh the

991
00:38:53,599 --> 00:38:56,560
question that you want to mention i

992
00:38:55,040 --> 00:38:57,920
wanna make sure we with whatever

993
00:38:56,560 --> 00:39:01,839
conversation here if there is argument

994
00:38:57,920 --> 00:39:01,839
to keep it or or remove it

995
00:39:05,920 --> 00:39:08,880
anyone have preference

996
00:39:12,720 --> 00:39:16,480
that was a question you can jump in too

997
00:39:18,960 --> 00:39:21,520
are you on

998
00:39:27,119 --> 00:39:30,960
and we don't seem to be getting audio

999
00:39:32,480 --> 00:39:36,160
well why don't i try and then if you one

1000
00:39:34,000 --> 00:39:37,920
comes back he can jump back in

1001
00:39:36,160 --> 00:39:39,359
so yeah as i said before i think i think

1002
00:39:37,920 --> 00:39:42,240
we should pull this out for now

1003
00:39:39,359 --> 00:39:43,680
um i think if someone comes back with

1004
00:39:42,240 --> 00:39:45,680
like a clear use case and a

1005
00:39:43,680 --> 00:39:46,960
fully baked solution then we should

1006
00:39:45,680 --> 00:39:48,240
reconsider but like

1007
00:39:46,960 --> 00:39:49,599
i think having something that is kind of

1008
00:39:48,240 --> 00:39:52,479
messed up in this back isn't good so

1009
00:39:49,599 --> 00:39:52,480
let's take it out for now

1010
00:39:53,760 --> 00:39:59,680
thank you sergio yeah i think that

1011
00:39:57,119 --> 00:40:00,400
well maybe a bit different but i think

1012
00:39:59,680 --> 00:40:03,759
that

1013
00:40:00,400 --> 00:40:06,319
i think that signature is nice and

1014
00:40:03,760 --> 00:40:08,240
and we should not move it even if it is

1015
00:40:06,319 --> 00:40:10,480
something that it is not

1016
00:40:08,240 --> 00:40:12,879
a restaurant i mean obviously i'm not a

1017
00:40:10,480 --> 00:40:15,200
great guy so i'm i'm biased

1018
00:40:12,880 --> 00:40:17,119
but i think that being able to identify

1019
00:40:15,200 --> 00:40:19,359
who is it is

1020
00:40:17,119 --> 00:40:20,720
who each strat belongs to is an

1021
00:40:19,359 --> 00:40:24,720
important feature

1022
00:40:20,720 --> 00:40:28,160
and regarding the the the

1023
00:40:24,720 --> 00:40:31,520
the proposal to have what to have i

1024
00:40:28,160 --> 00:40:31,520
prefer to have something that it is

1025
00:40:31,760 --> 00:40:39,839
not or not completely defined that not

1026
00:40:34,880 --> 00:40:39,839
some haven't said anything at all

1027
00:40:40,330 --> 00:40:43,400
[Music]

1028
00:40:49,520 --> 00:40:55,839
i would like to have it in as it is or

1029
00:40:53,520 --> 00:40:57,359
after revive it

1030
00:40:55,839 --> 00:40:59,440
i would prefer not to remove it because

1031
00:40:57,359 --> 00:41:01,839
removing something is

1032
00:40:59,440 --> 00:41:03,200
much harder to to get something back in

1033
00:41:01,839 --> 00:41:06,400
that try to

1034
00:41:03,200 --> 00:41:08,160
improve something that it is already in

1035
00:41:06,400 --> 00:41:09,760
i mean because i am afraid that if you

1036
00:41:08,160 --> 00:41:12,399
will remove it we never get it back

1037
00:41:09,760 --> 00:41:15,760
because it will never be completed

1038
00:41:12,400 --> 00:41:19,280
that's fine okay so to be fair

1039
00:41:15,760 --> 00:41:22,640
sergio if it's not good then it's not

1040
00:41:19,280 --> 00:41:24,800
in by the end right

1041
00:41:22,640 --> 00:41:25,839
i don't know about them but but at the

1042
00:41:24,800 --> 00:41:28,480
beginning of the moment

1043
00:41:25,839 --> 00:41:29,839
at the beginning i mean we will discuss

1044
00:41:28,480 --> 00:41:31,280
at the end what happens at the end but

1045
00:41:29,839 --> 00:41:34,799
removing it at the beginning i don't

1046
00:41:31,280 --> 00:41:38,720
think this is

1047
00:41:34,800 --> 00:41:42,000
all right um so

1048
00:41:38,720 --> 00:41:44,160
hey okay next fight i don't know no

1049
00:41:42,000 --> 00:41:45,440
we've got we've got a long queue here so

1050
00:41:44,160 --> 00:41:49,359
oh oh

1051
00:41:45,440 --> 00:41:50,079
okay so uh just to provide a little bit

1052
00:41:49,359 --> 00:41:52,400
of feedback

1053
00:41:50,079 --> 00:41:54,000
we uh phil henke and i worked on an

1054
00:41:52,400 --> 00:41:55,280
implementation which that's pretty much

1055
00:41:54,000 --> 00:41:58,400
the first bullet point there

1056
00:41:55,280 --> 00:41:59,200
uh we sent the signatures of um the

1057
00:41:58,400 --> 00:42:02,400
previous

1058
00:41:59,200 --> 00:42:05,680
end frames and then sign that um

1059
00:42:02,400 --> 00:42:07,440
you know it was it's complex um

1060
00:42:05,680 --> 00:42:09,359
makes the whole thing hard to maintain

1061
00:42:07,440 --> 00:42:12,720
and so far what we've seen

1062
00:42:09,359 --> 00:42:14,720
is that the threat model is complex to

1063
00:42:12,720 --> 00:42:16,560
to understand

1064
00:42:14,720 --> 00:42:18,319
you're already in a conference with with

1065
00:42:16,560 --> 00:42:19,759
people who have exchanged keys with so

1066
00:42:18,319 --> 00:42:21,920
the fact that someone is using someone

1067
00:42:19,760 --> 00:42:24,319
else's key what does that mean

1068
00:42:21,920 --> 00:42:25,359
uh it's not very clear to us what value

1069
00:42:24,319 --> 00:42:29,279
it adds

1070
00:42:25,359 --> 00:42:32,319
uh what it does and is a lot of overhead

1071
00:42:29,280 --> 00:42:33,680
so i am at least for the time being for

1072
00:42:32,319 --> 00:42:37,359
removing it

1073
00:42:33,680 --> 00:42:37,839
um until something which has a clear

1074
00:42:37,359 --> 00:42:40,880
path

1075
00:42:37,839 --> 00:42:44,400
to to force existence to be

1076
00:42:40,880 --> 00:42:47,520
you know devised

1077
00:42:44,400 --> 00:42:47,520
thank you um

1078
00:42:48,000 --> 00:42:51,599
i can see the motivation it'd be a nice

1079
00:42:50,400 --> 00:42:54,880
benefit to the users

1080
00:42:51,599 --> 00:42:57,040
but i don't see a practical

1081
00:42:54,880 --> 00:42:58,319
way to do this that has any any sort of

1082
00:42:57,040 --> 00:43:00,400
assurance to a user

1083
00:42:58,319 --> 00:43:01,839
um this essentially means that you'd

1084
00:43:00,400 --> 00:43:02,720
have to have perfectly reliable delivery

1085
00:43:01,839 --> 00:43:04,960
of everything

1086
00:43:02,720 --> 00:43:06,399
which makes uh you know robustness

1087
00:43:04,960 --> 00:43:09,760
incredibly hard to achieve

1088
00:43:06,400 --> 00:43:11,599
and then if if uh if things weren't uh

1089
00:43:09,760 --> 00:43:13,359
fully reliable then how do you deal with

1090
00:43:11,599 --> 00:43:15,760
the very high frequency

1091
00:43:13,359 --> 00:43:16,880
uh failure of this you know how do you

1092
00:43:15,760 --> 00:43:19,119
expose that to the user

1093
00:43:16,880 --> 00:43:21,119
you know is it a flickering you know a

1094
00:43:19,119 --> 00:43:22,000
flickering button constantly it seems

1095
00:43:21,119 --> 00:43:23,599
like uh

1096
00:43:22,000 --> 00:43:25,599
it seems like this is fraught with with

1097
00:43:23,599 --> 00:43:28,560
user interface problems

1098
00:43:25,599 --> 00:43:28,560
for it to be meaningful

1099
00:43:30,560 --> 00:43:33,920
thanks mom you're on

1100
00:43:37,359 --> 00:43:42,880
and you're heavy yeah good um

1101
00:43:40,400 --> 00:43:43,520
yeah i would like to to drop it i think

1102
00:43:42,880 --> 00:43:45,920
that

1103
00:43:43,520 --> 00:43:46,800
at this point until we have clear use

1104
00:43:45,920 --> 00:43:49,680
cases and a

1105
00:43:46,800 --> 00:43:50,319
clear path to fix it then it should be

1106
00:43:49,680 --> 00:43:53,680
removed

1107
00:43:50,319 --> 00:43:54,640
uh if we keep it i feel that it will not

1108
00:43:53,680 --> 00:43:57,759
be implemented

1109
00:43:54,640 --> 00:44:00,319
it will stay as is and uh

1110
00:43:57,760 --> 00:44:01,920
and test it and will not bring value and

1111
00:44:00,319 --> 00:44:04,800
we will just slow down

1112
00:44:01,920 --> 00:44:04,800
the progress we can make

1113
00:44:06,960 --> 00:44:13,119
okay tim so i

1114
00:44:10,319 --> 00:44:14,240
um i kind of don't want to keep it i

1115
00:44:13,119 --> 00:44:17,599
think it's

1116
00:44:14,240 --> 00:44:20,640
looks messy but we then lose one

1117
00:44:17,599 --> 00:44:23,920
other attribute of of um

1118
00:44:20,640 --> 00:44:27,440
signing of of auth which is that

1119
00:44:23,920 --> 00:44:29,760
you're filtering out like bad packets

1120
00:44:27,440 --> 00:44:31,520
it's a way of in implementing my

1121
00:44:29,760 --> 00:44:33,119
implementation at least it's a way of

1122
00:44:31,520 --> 00:44:34,560
deciding not to deal with something

1123
00:44:33,119 --> 00:44:36,640
that's that's bad

1124
00:44:34,560 --> 00:44:38,319
and it protects the other layers so

1125
00:44:36,640 --> 00:44:41,200
you're losing that protection

1126
00:44:38,319 --> 00:44:44,160
um by dropping this don't you get the

1127
00:44:41,200 --> 00:44:44,160
authentication tag

1128
00:44:44,880 --> 00:44:51,680
um at what layer is that

1129
00:44:48,839 --> 00:44:52,319
i multiple layers you've got dtls and

1130
00:44:51,680 --> 00:44:55,680
you've got

1131
00:44:52,319 --> 00:44:58,480
uh this frame yes but

1132
00:44:55,680 --> 00:44:59,759
if the javascript at the far end can

1133
00:44:58,480 --> 00:45:04,319
basically what you're allowing is the

1134
00:44:59,760 --> 00:45:08,319
javascript at the far end to fuzz you

1135
00:45:04,319 --> 00:45:08,319
okay i think

1136
00:45:09,920 --> 00:45:18,000
and uh hi do you hear me

1137
00:45:14,560 --> 00:45:19,680
i do uh so uh i

1138
00:45:18,000 --> 00:45:21,839
see there's a lot of people who want to

1139
00:45:19,680 --> 00:45:25,680
get rid of it and maybe that's

1140
00:45:21,839 --> 00:45:28,799
fine i was just wondering um

1141
00:45:25,680 --> 00:45:30,160
that at least in in in the previous

1142
00:45:28,800 --> 00:45:32,720
presentation

1143
00:45:30,160 --> 00:45:34,078
there was mention of using case derived

1144
00:45:32,720 --> 00:45:37,759
from mls

1145
00:45:34,079 --> 00:45:41,359
i was wondering if if

1146
00:45:37,760 --> 00:45:42,960
the keys are derived like from mls

1147
00:45:41,359 --> 00:45:44,480
would there be a use case where you

1148
00:45:42,960 --> 00:45:47,839
still want who

1149
00:45:44,480 --> 00:45:50,640
in the group is sending uh these

1150
00:45:47,839 --> 00:45:51,680
messages sorry if this question is

1151
00:45:50,640 --> 00:45:55,359
stupid but

1152
00:45:51,680 --> 00:45:57,359
i'm uh following this working group from

1153
00:45:55,359 --> 00:45:59,520
the sidelines and i'm not sure if

1154
00:45:57,359 --> 00:46:02,000
uh how these signatures relate then to

1155
00:45:59,520 --> 00:46:03,759
the mls keys

1156
00:46:02,000 --> 00:46:06,240
i'm going to let richard answer that one

1157
00:46:03,760 --> 00:46:09,359
yeah yeah just real briefly the

1158
00:46:06,240 --> 00:46:10,959
um symmetric crypto that is just if we

1159
00:46:09,359 --> 00:46:12,400
don't have a signature feature than the

1160
00:46:10,960 --> 00:46:14,079
symmetric crypto even if you get the

1161
00:46:12,400 --> 00:46:17,200
keys from mls

1162
00:46:14,079 --> 00:46:20,160
because it's symmetric crypto any

1163
00:46:17,200 --> 00:46:21,919
receiver can generate a stream for any

1164
00:46:20,160 --> 00:46:23,279
sender and so they can be freely

1165
00:46:21,920 --> 00:46:24,480
exchanged and spoofed

1166
00:46:23,280 --> 00:46:27,359
you don't get any person or

1167
00:46:24,480 --> 00:46:28,880
authentication so you still need

1168
00:46:27,359 --> 00:46:30,720
signatures if you want person or

1169
00:46:28,880 --> 00:46:32,480
authentication even if you're using mls

1170
00:46:30,720 --> 00:46:34,799
and the one advantage of mls of course

1171
00:46:32,480 --> 00:46:37,680
is that mls meeting participants

1172
00:46:34,800 --> 00:46:39,760
have signature keys already so that it

1173
00:46:37,680 --> 00:46:41,040
provides you the signature keys you need

1174
00:46:39,760 --> 00:46:44,480
but you would still need a way to put

1175
00:46:41,040 --> 00:46:44,480
them in the in the stream protocol

1176
00:46:44,800 --> 00:46:48,960
and last comment on this topic so

1177
00:46:50,800 --> 00:46:53,839
i was a bit confused by what what tim

1178
00:46:53,119 --> 00:46:57,760
said but

1179
00:46:53,839 --> 00:47:01,040
i think now uh you're clarified so

1180
00:46:57,760 --> 00:47:04,079
i don't think removing this opens you

1181
00:47:01,040 --> 00:47:07,279
uh for fussing because you

1182
00:47:04,079 --> 00:47:09,440
you do verify the aes signature tags

1183
00:47:07,280 --> 00:47:10,800
uh in the end when you don't know if

1184
00:47:09,440 --> 00:47:13,119
somebody is using

1185
00:47:10,800 --> 00:47:14,240
somebody else's symmetric key for

1186
00:47:13,119 --> 00:47:17,359
encrypting

1187
00:47:14,240 --> 00:47:21,520
uh but i think you have other ways to

1188
00:47:17,359 --> 00:47:21,520
to know this at least today

1189
00:47:21,760 --> 00:47:25,839
on the singleton layer

1190
00:47:26,400 --> 00:47:29,440
i'm going to give sergio one last shot

1191
00:47:28,000 --> 00:47:31,599
at this one

1192
00:47:29,440 --> 00:47:32,559
you know i i agree with team i mean this

1193
00:47:31,599 --> 00:47:35,440
allows

1194
00:47:32,559 --> 00:47:39,599
me for the client side i mean i can get

1195
00:47:35,440 --> 00:47:42,400
whatever intents are called

1196
00:47:39,599 --> 00:47:43,440
we will not drop it because it does not

1197
00:47:42,400 --> 00:47:46,960
know by design

1198
00:47:43,440 --> 00:47:47,920
but this is in there so from my client i

1199
00:47:46,960 --> 00:47:50,319
can send

1200
00:47:47,920 --> 00:47:52,319
a whatever content to any other any

1201
00:47:50,319 --> 00:47:55,200
other client and try to force

1202
00:47:52,319 --> 00:47:57,119
the the for example in this case the

1203
00:47:55,200 --> 00:47:58,960
video the color or whatever

1204
00:47:57,119 --> 00:48:01,040
so there is no way that you can protect

1205
00:47:58,960 --> 00:48:01,040
it

1206
00:48:05,440 --> 00:48:09,119
so what i'm hearing here is that there's

1207
00:48:07,440 --> 00:48:12,319
maybe maybe one

1208
00:48:09,119 --> 00:48:14,079
maybe two people who like to keep this i

1209
00:48:12,319 --> 00:48:16,160
think what we're going to do here is

1210
00:48:14,079 --> 00:48:19,599
take this to the to the list and

1211
00:48:16,160 --> 00:48:20,720
confirm that this but it seems at this

1212
00:48:19,599 --> 00:48:22,240
point that there's not a lot of

1213
00:48:20,720 --> 00:48:25,439
enthusiasm for keeping it

1214
00:48:22,240 --> 00:48:26,799
one thing we can potentially do is uh

1215
00:48:25,440 --> 00:48:29,280
encourage those people who care about

1216
00:48:26,800 --> 00:48:32,160
this to to write a draft

1217
00:48:29,280 --> 00:48:33,359
and uh put out a design that doesn't

1218
00:48:32,160 --> 00:48:35,440
have the shortcomings that have been

1219
00:48:33,359 --> 00:48:38,160
identified with the existing one

1220
00:48:35,440 --> 00:48:38,640
so um you feel good let's take this to

1221
00:48:38,160 --> 00:48:41,520
the list

1222
00:48:38,640 --> 00:48:42,558
and emad do you have more issues uh yeah

1223
00:48:41,520 --> 00:48:46,319
one last quick

1224
00:48:42,559 --> 00:48:48,640
side so

1225
00:48:46,319 --> 00:48:50,640
porsche frames because the current draft

1226
00:48:48,640 --> 00:48:52,319
started as only focusing on frames

1227
00:48:50,640 --> 00:48:54,000
hence the name is frame but as the

1228
00:48:52,319 --> 00:48:55,680
charter mentioned we won't support like

1229
00:48:54,000 --> 00:48:58,640
other decodable units like

1230
00:48:55,680 --> 00:49:00,240
new uh naturally it should be supported

1231
00:48:58,640 --> 00:49:02,240
by default because there's a frame

1232
00:49:00,240 --> 00:49:03,359
all the backgroundization happens offer

1233
00:49:02,240 --> 00:49:04,640
is free and

1234
00:49:03,359 --> 00:49:06,240
if you're going to encrypt whatever is

1235
00:49:04,640 --> 00:49:07,920
passed to it so it's either right so

1236
00:49:06,240 --> 00:49:10,160
therefore frame is half frame

1237
00:49:07,920 --> 00:49:10,960
so it should naturally work uh i guess

1238
00:49:10,160 --> 00:49:12,640
the the

1239
00:49:10,960 --> 00:49:14,880
the issue is just to need to to mention

1240
00:49:12,640 --> 00:49:16,240
in the draft that it should support to

1241
00:49:14,880 --> 00:49:18,880
work with other uh

1242
00:49:16,240 --> 00:49:20,558
smaller code of the unit and we're gonna

1243
00:49:18,880 --> 00:49:23,920
we're going to add support for this

1244
00:49:20,559 --> 00:49:27,040
in the text but uh uh the the

1245
00:49:23,920 --> 00:49:28,559
the should happen before forging a

1246
00:49:27,040 --> 00:49:30,880
stream as an example

1247
00:49:28,559 --> 00:49:32,000
uh insertable stream in this case needs

1248
00:49:30,880 --> 00:49:33,520
to pass

1249
00:49:32,000 --> 00:49:35,839
the nail unit rather than the frame

1250
00:49:33,520 --> 00:49:35,839
itself

1251
00:49:38,720 --> 00:49:43,680
and with that i think um okay anyone

1252
00:49:41,280 --> 00:49:45,760
okay richard has a comment

1253
00:49:43,680 --> 00:49:46,960
just just a quick question for you matt

1254
00:49:45,760 --> 00:49:48,720
um

1255
00:49:46,960 --> 00:49:50,960
i was wondering whether you think that

1256
00:49:48,720 --> 00:49:52,799
this i i totally agree this is something

1257
00:49:50,960 --> 00:49:55,440
we should do because we need the

1258
00:49:52,800 --> 00:49:56,160
to be able to operate on subframe units

1259
00:49:55,440 --> 00:49:57,359
um

1260
00:49:56,160 --> 00:49:59,598
what i was wondering is whether you

1261
00:49:57,359 --> 00:50:02,078
think that the

1262
00:49:59,599 --> 00:50:03,040
s frame framing needs to have any

1263
00:50:02,079 --> 00:50:05,920
provisions to

1264
00:50:03,040 --> 00:50:06,558
support this for example you might want

1265
00:50:05,920 --> 00:50:09,440
something

1266
00:50:06,559 --> 00:50:12,640
like a a length field to just to

1267
00:50:09,440 --> 00:50:14,079
delineate chunks of stream encoded data

1268
00:50:12,640 --> 00:50:18,078
if you're going to get a whole frame and

1269
00:50:14,079 --> 00:50:18,079
need to break it up into encoded units

1270
00:50:19,599 --> 00:50:24,559
i need to think about but i think the

1271
00:50:22,559 --> 00:50:26,079
first answer to my no because all these

1272
00:50:24,559 --> 00:50:27,440
things should be in the

1273
00:50:26,079 --> 00:50:29,680
for robots it will be in the frame

1274
00:50:27,440 --> 00:50:32,319
header extension or this metadata

1275
00:50:29,680 --> 00:50:33,919
i give the the thing is what about frame

1276
00:50:32,319 --> 00:50:35,119
counter what frame count represents in

1277
00:50:33,920 --> 00:50:37,839
this case

1278
00:50:35,119 --> 00:50:38,480
just another counter would would it just

1279
00:50:37,839 --> 00:50:39,599
work

1280
00:50:38,480 --> 00:50:42,240
i i think it's something we need to

1281
00:50:39,599 --> 00:50:42,240
think about that

1282
00:50:42,800 --> 00:50:46,640
this is um something that i remember

1283
00:50:44,400 --> 00:50:47,359
seeing in sergio slides so maybe we can

1284
00:50:46,640 --> 00:50:49,598
uh

1285
00:50:47,359 --> 00:50:51,520
okay come back to that in a minute or

1286
00:50:49,599 --> 00:50:54,960
two

1287
00:50:51,520 --> 00:50:56,079
okay i think i'm done thank you very

1288
00:50:54,960 --> 00:50:59,440
much

1289
00:50:56,079 --> 00:51:02,960
and oh we're doing pretty well on time

1290
00:50:59,440 --> 00:51:03,280
um we might might be able to get dr alex

1291
00:51:02,960 --> 00:51:05,839
and

1292
00:51:03,280 --> 00:51:07,200
some time on the agenda after all let's

1293
00:51:05,839 --> 00:51:23,839
go to sergio now

1294
00:51:07,200 --> 00:51:23,839
with the video codec stuff

1295
00:51:27,040 --> 00:51:31,839
all right you tell me when you want the

1296
00:51:28,079 --> 00:51:31,839
next slide yeah next slide

1297
00:51:32,319 --> 00:51:39,599
let's go ahead and what i was trying to

1298
00:51:36,079 --> 00:51:40,160
explain in this in in this setup slide

1299
00:51:39,599 --> 00:51:43,280
is

1300
00:51:40,160 --> 00:51:44,960
how the current the current codecs are

1301
00:51:43,280 --> 00:51:46,480
used within this frame that could be

1302
00:51:44,960 --> 00:51:48,640
used with a spring

1303
00:51:46,480 --> 00:51:50,559
uh what can we learn from that when we

1304
00:51:48,640 --> 00:51:52,879
apply this to the

1305
00:51:50,559 --> 00:51:54,559
or we try to to implement the generated

1306
00:51:52,880 --> 00:51:56,640
video packet education so

1307
00:51:54,559 --> 00:51:58,880
first i would like to to try to address

1308
00:51:56,640 --> 00:52:00,400
how the current

1309
00:51:58,880 --> 00:52:02,400
video packet decision formats can be

1310
00:52:00,400 --> 00:52:05,359
used within s frame and to

1311
00:52:02,400 --> 00:52:07,200
and how we are working with them in the

1312
00:52:05,359 --> 00:52:08,960
current with the insertable streams to

1313
00:52:07,200 --> 00:52:13,118
make this framework

1314
00:52:08,960 --> 00:52:16,839
with a with within the browsers

1315
00:52:13,119 --> 00:52:20,079
so bp8 is kind of

1316
00:52:16,839 --> 00:52:21,920
a is

1317
00:52:20,079 --> 00:52:23,599
i mean this does not work out out of the

1318
00:52:21,920 --> 00:52:26,079
box because

1319
00:52:23,599 --> 00:52:27,200
when you increase the full frame there

1320
00:52:26,079 --> 00:52:29,280
is some part that that is

1321
00:52:27,200 --> 00:52:31,919
in in in the encrypted part that it is

1322
00:52:29,280 --> 00:52:35,599
required by this view to work

1323
00:52:31,920 --> 00:52:35,599
so um some

1324
00:52:35,760 --> 00:52:41,359
and so what you then create the the

1325
00:52:38,800 --> 00:52:41,839
the whole frame with this frame some of

1326
00:52:41,359 --> 00:52:44,640
the

1327
00:52:41,839 --> 00:52:45,520
some part of the of the video of the

1328
00:52:44,640 --> 00:52:48,799
payload

1329
00:52:45,520 --> 00:52:51,599
is encrypted because it is the

1330
00:52:48,800 --> 00:52:52,720
what comes in the video frames but the

1331
00:52:51,599 --> 00:52:55,119
the packet decision

1332
00:52:52,720 --> 00:52:57,118
adds some data in the in the beginning

1333
00:52:55,119 --> 00:53:00,960
that it is sending clear

1334
00:52:57,119 --> 00:53:02,559
and the svu use some of this content

1335
00:53:00,960 --> 00:53:02,960
that it is sent in the clear section so

1336
00:53:02,559 --> 00:53:05,599
we can

1337
00:53:02,960 --> 00:53:06,160
you can work on it but it requires also

1338
00:53:05,599 --> 00:53:07,760
some

1339
00:53:06,160 --> 00:53:09,680
parts of the of the information that it

1340
00:53:07,760 --> 00:53:11,920
is required it's saying in the encrypted

1341
00:53:09,680 --> 00:53:15,359
part that it is mainly the data frame

1342
00:53:11,920 --> 00:53:18,000
a market and also a

1343
00:53:15,359 --> 00:53:18,480
for example chrome requires one that you

1344
00:53:18,000 --> 00:53:21,200
will

1345
00:53:18,480 --> 00:53:22,960
do temporal scalability that the picture

1346
00:53:21,200 --> 00:53:24,000
id that it is also sent in the in the

1347
00:53:22,960 --> 00:53:27,119
encrypted part is

1348
00:53:24,000 --> 00:53:27,760
it's rewritten so in order to overcome

1349
00:53:27,119 --> 00:53:30,400
this

1350
00:53:27,760 --> 00:53:31,119
overcome this is typically what it is

1351
00:53:30,400 --> 00:53:33,200
done

1352
00:53:31,119 --> 00:53:34,240
is that when you apply this frame

1353
00:53:33,200 --> 00:53:36,799
transformation you just

1354
00:53:34,240 --> 00:53:38,000
skip the first byte the first byte that

1355
00:53:36,800 --> 00:53:41,200
belongs to the bp

1356
00:53:38,000 --> 00:53:43,520
the bpa 8 payload headers so

1357
00:53:41,200 --> 00:53:46,240
by doing that all the rest of the frame

1358
00:53:43,520 --> 00:53:49,520
is encrypted and this video can work

1359
00:53:46,240 --> 00:53:50,000
and by checking and what is that the

1360
00:53:49,520 --> 00:53:52,240
layer

1361
00:53:50,000 --> 00:53:53,440
that this packet belongs to performs the

1362
00:53:52,240 --> 00:53:56,078
parallel scalability

1363
00:53:53,440 --> 00:53:58,559
and check whether an iframe is is is

1364
00:53:56,079 --> 00:53:58,559
received

1365
00:53:58,720 --> 00:54:02,240
so next slide please

1366
00:54:03,200 --> 00:54:08,000
bp9 is different because all the

1367
00:54:05,280 --> 00:54:09,520
information required by the svu is sent

1368
00:54:08,000 --> 00:54:11,040
in the payload descriptor that it is

1369
00:54:09,520 --> 00:54:14,480
sending clear

1370
00:54:11,040 --> 00:54:15,359
so uh like bp8 this fee you can work

1371
00:54:14,480 --> 00:54:17,760
with the

1372
00:54:15,359 --> 00:54:19,680
with the complete frame encrypted

1373
00:54:17,760 --> 00:54:24,319
without any issues so this works

1374
00:54:19,680 --> 00:54:26,160
out of the box and you can just use a

1375
00:54:24,319 --> 00:54:28,640
s frame with bp night without having any

1376
00:54:26,160 --> 00:54:31,680
kind of and

1377
00:54:28,640 --> 00:54:34,720
extra things to in in the

1378
00:54:31,680 --> 00:54:38,000
in the packetization

1379
00:54:34,720 --> 00:54:41,279
uh the only thing is that when

1380
00:54:38,000 --> 00:54:41,680
you impl use a special scalability as

1381
00:54:41,280 --> 00:54:45,680
the

1382
00:54:41,680 --> 00:54:48,640
svu can't drop any of this

1383
00:54:45,680 --> 00:54:49,598
of the special expert special layer that

1384
00:54:48,640 --> 00:54:52,799
is sent

1385
00:54:49,599 --> 00:54:56,000
that it is present in this in

1386
00:54:52,799 --> 00:54:59,759
in in the from in the frame you need

1387
00:54:56,000 --> 00:55:02,079
to pass each of the of the layer frames

1388
00:54:59,760 --> 00:55:02,960
individually to this frame so you you

1389
00:55:02,079 --> 00:55:05,520
have

1390
00:55:02,960 --> 00:55:06,559
one video frame that has three special

1391
00:55:05,520 --> 00:55:09,040
layers

1392
00:55:06,559 --> 00:55:11,839
you will have to pass each of these

1393
00:55:09,040 --> 00:55:13,839
three layers to this frame independently

1394
00:55:11,839 --> 00:55:15,839
at the end they will be aggregated in

1395
00:55:13,839 --> 00:55:19,440
the in the rpt

1396
00:55:15,839 --> 00:55:21,759
rtp payload but the s frame will be able

1397
00:55:19,440 --> 00:55:24,160
to to work with it without any any kind

1398
00:55:21,760 --> 00:55:27,359
of issues

1399
00:55:24,160 --> 00:55:30,960
so next slide

1400
00:55:27,359 --> 00:55:32,799
this is the when when we

1401
00:55:30,960 --> 00:55:35,920
get to the to the interesting part i

1402
00:55:32,799 --> 00:55:39,040
mean excuses for

1403
00:55:35,920 --> 00:55:42,980
the packetization does

1404
00:55:39,040 --> 00:55:45,200
not send the whole frame but it just

1405
00:55:42,980 --> 00:55:47,920
[Music]

1406
00:55:45,200 --> 00:55:48,879
replaces the some part of it especially

1407
00:55:47,920 --> 00:55:52,720
the the

1408
00:55:48,880 --> 00:55:55,760
the null unit heather knowledge headers

1409
00:55:52,720 --> 00:55:57,680
and we replace the content with an

1410
00:55:55,760 --> 00:55:58,880
something that is very similar but it is

1411
00:55:57,680 --> 00:56:02,640
not the same

1412
00:55:58,880 --> 00:56:06,240
so if you encoding the extrusive frame

1413
00:56:02,640 --> 00:56:09,759
s264 frame with a with a

1414
00:56:06,240 --> 00:56:12,558
with s frame and you then

1415
00:56:09,760 --> 00:56:13,599
apply the rtp package sensation some of

1416
00:56:12,559 --> 00:56:17,040
the

1417
00:56:13,599 --> 00:56:20,880
encrypted parts will be

1418
00:56:17,040 --> 00:56:23,680
replace it and with the rtp

1419
00:56:20,880 --> 00:56:23,680
packet decision

1420
00:56:24,240 --> 00:56:28,319
types that it is sending clear so when

1421
00:56:26,960 --> 00:56:30,960
you

1422
00:56:28,319 --> 00:56:31,839
receive it and your unpacked decision a

1423
00:56:30,960 --> 00:56:34,480
bucket decide

1424
00:56:31,839 --> 00:56:35,759
it and you will have some missing

1425
00:56:34,480 --> 00:56:38,960
information

1426
00:56:35,760 --> 00:56:40,960
because because

1427
00:56:38,960 --> 00:56:42,240
then the stuff that will replace it from

1428
00:56:40,960 --> 00:56:44,400
the encrypted to the

1429
00:56:42,240 --> 00:56:46,000
non-encrypted part you will not be able

1430
00:56:44,400 --> 00:56:48,799
to have access to it

1431
00:56:46,000 --> 00:56:50,640
so the only way to solve that is that a

1432
00:56:48,799 --> 00:56:53,839
stream must work with

1433
00:56:50,640 --> 00:56:54,319
null units so it will then create the

1434
00:56:53,839 --> 00:56:57,279
null

1435
00:56:54,319 --> 00:56:58,240
data and just use the headers as the

1436
00:56:57,280 --> 00:57:00,960
yards

1437
00:56:58,240 --> 00:57:01,839
but this obviously increases the the

1438
00:57:00,960 --> 00:57:04,880
overhead

1439
00:57:01,839 --> 00:57:07,920
of the of the of the encryption because

1440
00:57:04,880 --> 00:57:10,160
in one frame you will have several units

1441
00:57:07,920 --> 00:57:11,760
especially you are sending sps and pps

1442
00:57:10,160 --> 00:57:14,240
and say information

1443
00:57:11,760 --> 00:57:14,880
you will have a much more overhead that

1444
00:57:14,240 --> 00:57:18,319
one

1445
00:57:14,880 --> 00:57:21,920
it will typically have

1446
00:57:18,319 --> 00:57:21,920
in bp9 or bp8

1447
00:57:22,799 --> 00:57:27,839
can i see justin in the queue here do

1448
00:57:24,960 --> 00:57:27,839
you have a question

1449
00:57:29,040 --> 00:57:33,119
a little bit of avoiding the overhead um

1450
00:57:31,680 --> 00:57:35,359
you know one approach that

1451
00:57:33,119 --> 00:57:36,799
i i think could work would be that you

1452
00:57:35,359 --> 00:57:40,400
sort of insist on

1453
00:57:36,799 --> 00:57:43,280
you know staff type uh aggregation

1454
00:57:40,400 --> 00:57:45,280
and then like the sps pps you know are

1455
00:57:43,280 --> 00:57:47,599
then sort of clear text

1456
00:57:45,280 --> 00:57:48,880
as they are in like the vp8 or vp9

1457
00:57:47,599 --> 00:57:52,160
payload header

1458
00:57:48,880 --> 00:57:53,520
and so you end up then in the situation

1459
00:57:52,160 --> 00:57:55,040
where you have like some of the stuff at

1460
00:57:53,520 --> 00:57:56,880
the beginning of the packet

1461
00:57:55,040 --> 00:57:58,640
it's clear text and then the actual

1462
00:57:56,880 --> 00:58:01,359
payload uh that

1463
00:57:58,640 --> 00:58:02,640
contains the you know the irp frames uh

1464
00:58:01,359 --> 00:58:04,720
you know then it becomes encrypted

1465
00:58:02,640 --> 00:58:05,440
similar to the vp8 or vp9 you know

1466
00:58:04,720 --> 00:58:08,879
actual

1467
00:58:05,440 --> 00:58:11,280
encrypted payload and uh once you apply

1468
00:58:08,880 --> 00:58:13,359
that sort of transformation of

1469
00:58:11,280 --> 00:58:15,280
assuming that a staff type aggregation

1470
00:58:13,359 --> 00:58:17,119
is required then you can think about it

1471
00:58:15,280 --> 00:58:18,559
in the same sort of way as like a vp8 or

1472
00:58:17,119 --> 00:58:19,680
vp9

1473
00:58:18,559 --> 00:58:22,079
situation which i think is an

1474
00:58:19,680 --> 00:58:25,118
interesting simplification

1475
00:58:22,079 --> 00:58:27,760
yeah i was checking out this in

1476
00:58:25,119 --> 00:58:28,880
our agent units man i'm not completely

1477
00:58:27,760 --> 00:58:30,720
sure if it would work

1478
00:58:28,880 --> 00:58:32,480
it's something that i have thinking of

1479
00:58:30,720 --> 00:58:34,720
doing but

1480
00:58:32,480 --> 00:58:35,680
many well you you will have extra

1481
00:58:34,720 --> 00:58:37,598
strawberry head that

1482
00:58:35,680 --> 00:58:39,919
is not present in bp-90 even it is

1483
00:58:37,599 --> 00:58:41,680
smaller

1484
00:58:39,920 --> 00:58:43,680
sure i think there's still some extra

1485
00:58:41,680 --> 00:58:45,839
over overhead but you're not quite at

1486
00:58:43,680 --> 00:58:48,399
the same sort of situation of having

1487
00:58:45,839 --> 00:58:49,040
every single now you of including sps

1488
00:58:48,400 --> 00:58:51,440
pps

1489
00:58:49,040 --> 00:58:52,880
cetera having to have their own s frame

1490
00:58:51,440 --> 00:58:55,520
encryption result in overhead

1491
00:58:52,880 --> 00:58:58,160
i think that problem can be solved yeah

1492
00:58:55,520 --> 00:58:58,160
i mean yeah

1493
00:59:01,920 --> 00:59:05,839
okay stefan

1494
00:59:06,799 --> 00:59:11,759
generally like justin's idea however

1495
00:59:09,040 --> 00:59:16,079
there is there is one additional

1496
00:59:11,760 --> 00:59:19,599
thing to consider and that is i think

1497
00:59:16,079 --> 00:59:22,640
um many h.264 based uh

1498
00:59:19,599 --> 00:59:26,799
h64 using sf use uh

1499
00:59:22,640 --> 00:59:30,879
also look into the slice header

1500
00:59:26,799 --> 00:59:32,000
which would be uh the encrypt part right

1501
00:59:30,880 --> 00:59:34,880
now

1502
00:59:32,000 --> 00:59:36,559
so if i were designing this now really

1503
00:59:34,880 --> 00:59:39,280
speaking of the top of my head

1504
00:59:36,559 --> 00:59:42,079
you know probably what you want to do is

1505
00:59:39,280 --> 00:59:44,160
to send

1506
00:59:42,079 --> 00:59:45,760
something like just just doing here the

1507
00:59:44,160 --> 00:59:47,839
single value in it

1508
00:59:45,760 --> 00:59:49,200
packetization thing like sending the

1509
00:59:47,839 --> 00:59:52,078
first whatever

1510
00:59:49,200 --> 00:59:54,000
four octets of the null unit in the

1511
00:59:52,079 --> 00:59:55,839
clear

1512
00:59:54,000 --> 00:59:58,079
that would give you access to the slice

1513
00:59:55,839 --> 01:00:00,640
header and some random microblock data

1514
00:59:58,079 --> 01:00:03,920
which no one can use

1515
01:00:00,640 --> 01:00:08,240
and that would be

1516
01:00:03,920 --> 01:00:11,119
compatible with how how uh h364 sfeu is

1517
01:00:08,240 --> 01:00:12,640
work with my understanding so some

1518
01:00:11,119 --> 01:00:15,839
flexibility there is i think

1519
01:00:12,640 --> 01:00:15,839
warranted thank you

1520
01:00:24,640 --> 01:00:32,319
we now have jonathan lennox

1521
01:00:29,040 --> 01:00:37,119
hello um yeah so i think

1522
01:00:32,319 --> 01:00:39,759
it's um it's a little unclear to me

1523
01:00:37,119 --> 01:00:42,319
um just how much so is the goal here

1524
01:00:39,760 --> 01:00:45,359
that we should be able to do this with

1525
01:00:42,319 --> 01:00:47,040
the um sfus being completely oblivious

1526
01:00:45,359 --> 01:00:50,240
to the fact that we're doing

1527
01:00:47,040 --> 01:00:52,799
as frame or is the goal

1528
01:00:50,240 --> 01:00:54,240
or not because if if not then obviously

1529
01:00:52,799 --> 01:00:56,240
we have a lot more flexibility in how we

1530
01:00:54,240 --> 01:00:59,879
might want to rearrange these

1531
01:00:56,240 --> 01:01:03,520
these packets um i'm also a little

1532
01:00:59,880 --> 01:01:04,640
concerned with

1533
01:01:03,520 --> 01:01:05,920
you know how hey how much

1534
01:01:04,640 --> 01:01:07,118
standardization works is going to be

1535
01:01:05,920 --> 01:01:10,319
decided exactly

1536
01:01:07,119 --> 01:01:12,000
to define exactly what is and isn't

1537
01:01:10,319 --> 01:01:14,880
encrypted in each packet because i feel

1538
01:01:12,000 --> 01:01:18,000
like that's something that needs

1539
01:01:14,880 --> 01:01:19,200
a lot of deep knowledge of each codec to

1540
01:01:18,000 --> 01:01:22,640
know

1541
01:01:19,200 --> 01:01:25,200
what precise bits are aren't privacy

1542
01:01:22,640 --> 01:01:26,960
sensitive which seems like

1543
01:01:25,200 --> 01:01:30,000
not something where there's a lot you

1544
01:01:26,960 --> 01:01:31,440
know where the expertise is necessarily

1545
01:01:30,000 --> 01:01:33,119
even in the people who write the payload

1546
01:01:31,440 --> 01:01:35,599
the uh the

1547
01:01:33,119 --> 01:01:37,520
payload formats because it's you know i

1548
01:01:35,599 --> 01:01:38,640
have a blob for that the product gives

1549
01:01:37,520 --> 01:01:40,559
me and i

1550
01:01:38,640 --> 01:01:42,558
send it on the wire doesn't mean i know

1551
01:01:40,559 --> 01:01:46,000
what bit does what exactly

1552
01:01:42,559 --> 01:01:47,440
so it makes me a little nervous how much

1553
01:01:46,000 --> 01:01:50,319
work this is going to be and how much

1554
01:01:47,440 --> 01:01:52,640
expertise it's going to need

1555
01:01:50,319 --> 01:01:53,759
but i don't have any goal when putting

1556
01:01:52,640 --> 01:01:56,000
this i mean

1557
01:01:53,760 --> 01:01:57,119
what i'm just trying to describe is is

1558
01:01:56,000 --> 01:01:59,839
uh what

1559
01:01:57,119 --> 01:02:01,760
we are currently doing to make a s

1560
01:01:59,839 --> 01:02:05,200
framework with the current payloads okay

1561
01:02:01,760 --> 01:02:06,559
yeah i i don't want to i obviously don't

1562
01:02:05,200 --> 01:02:08,399
want to do this

1563
01:02:06,559 --> 01:02:11,680
and i would prefer to have that it is

1564
01:02:08,400 --> 01:02:13,920
agnostic but just try to to justify

1565
01:02:11,680 --> 01:02:15,359
why do we need the that's something that

1566
01:02:13,920 --> 01:02:17,440
it is more genetic

1567
01:02:15,359 --> 01:02:19,520
and try to avoid to have to do this if

1568
01:02:17,440 --> 01:02:22,000
for estrosis forage to fight

1569
01:02:19,520 --> 01:02:22,720
or whatever new code that it is arriving

1570
01:02:22,000 --> 01:02:24,880
but yes

1571
01:02:22,720 --> 01:02:27,520
okay if this is this is just descriptive

1572
01:02:24,880 --> 01:02:35,680
and not yeah yeah yeah it is

1573
01:02:27,520 --> 01:02:38,799
okay that's fine that's fine

1574
01:02:35,680 --> 01:02:38,799
magnus europe

1575
01:02:39,359 --> 01:02:43,440
is here i mean i think this is a great

1576
01:02:41,760 --> 01:02:45,039
example why

1577
01:02:43,440 --> 01:02:46,960
you're gonna have to go to this more

1578
01:02:45,039 --> 01:02:50,960
generic decide on what

1579
01:02:46,960 --> 01:02:54,000
information is acceptable to expose

1580
01:02:50,960 --> 01:02:55,839
for that this kind of agnostic codex

1581
01:02:54,000 --> 01:02:58,160
forest is used to deal with and then

1582
01:02:55,839 --> 01:02:59,599
and then basically have each code saying

1583
01:02:58,160 --> 01:03:01,359
yeah this is what

1584
01:02:59,599 --> 01:03:02,880
what this idu that the chat has been

1585
01:03:01,359 --> 01:03:05,038
talking say what is the

1586
01:03:02,880 --> 01:03:07,280
smallest independently decodable units

1587
01:03:05,039 --> 01:03:10,240
that the code can handle

1588
01:03:07,280 --> 01:03:12,640
what type of sub level like which

1589
01:03:10,240 --> 01:03:14,640
knowledge can you combine into what's

1590
01:03:12,640 --> 01:03:16,640
to put in one s frame et cetera and then

1591
01:03:14,640 --> 01:03:19,920
packet ties these frames inside

1592
01:03:16,640 --> 01:03:21,118
that payload and have that generic

1593
01:03:19,920 --> 01:03:23,359
information and the

1594
01:03:21,119 --> 01:03:24,400
s frame being fragmented across multiple

1595
01:03:23,359 --> 01:03:27,279
payloads

1596
01:03:24,400 --> 01:03:28,000
to fit whatever so i think you're ending

1597
01:03:27,280 --> 01:03:30,480
up in that

1598
01:03:28,000 --> 01:03:31,839
design space uh if you're gonna really

1599
01:03:30,480 --> 01:03:34,640
solve this in a

1600
01:03:31,839 --> 01:03:35,759
nice way which actually minimizes as if

1601
01:03:34,640 --> 01:03:38,480
you impact is that

1602
01:03:35,760 --> 01:03:39,359
yes you do one s if you style style and

1603
01:03:38,480 --> 01:03:41,280
then you

1604
01:03:39,359 --> 01:03:43,038
deal with this okay how what's generic

1605
01:03:41,280 --> 01:03:45,039
information we need to deal with for the

1606
01:03:43,039 --> 01:03:47,119
switching operations etc

1607
01:03:45,039 --> 01:03:48,640
and you can also do then a proper

1608
01:03:47,119 --> 01:03:51,839
security review of those

1609
01:03:48,640 --> 01:03:53,520
particular fields and not have to deal

1610
01:03:51,839 --> 01:03:55,038
at some future point that might change

1611
01:03:53,520 --> 01:03:57,119
with new codex essential new

1612
01:03:55,039 --> 01:04:00,799
substructures but

1613
01:03:57,119 --> 01:04:00,799
at that point by the bullet then

1614
01:04:02,799 --> 01:04:09,759
okay oh we i was just about to

1615
01:04:06,559 --> 01:04:09,760
say we're going to move on but mo

1616
01:04:10,000 --> 01:04:14,559
just to answer um magnus's point uh we

1617
01:04:13,039 --> 01:04:15,599
try to do that with frameworking as he

1618
01:04:14,559 --> 01:04:18,720
well knows

1619
01:04:15,599 --> 01:04:20,960
um and it's it sounds simple

1620
01:04:18,720 --> 01:04:22,720
you know at the beginning but as new

1621
01:04:20,960 --> 01:04:24,880
payload formats evolve

1622
01:04:22,720 --> 01:04:27,279
um it's difficult to capture all of

1623
01:04:24,880 --> 01:04:29,599
their useful semantics

1624
01:04:27,280 --> 01:04:30,799
that would be you know necessary in a in

1625
01:04:29,599 --> 01:04:32,880
the middle box

1626
01:04:30,799 --> 01:04:34,559
for it through its function right um so

1627
01:04:32,880 --> 01:04:36,079
that this you know the concept of having

1628
01:04:34,559 --> 01:04:38,079
a generic uh

1629
01:04:36,079 --> 01:04:40,240
genetic scripture for all of these paleo

1630
01:04:38,079 --> 01:04:41,760
types while very attractive

1631
01:04:40,240 --> 01:04:44,720
i think in practice we've seen that it's

1632
01:04:41,760 --> 01:04:46,000
uh it's pretty hard to actually pull off

1633
01:04:44,720 --> 01:04:48,319
and have any kind of life current in the

1634
01:04:46,000 --> 01:04:48,319
market

1635
01:04:49,440 --> 01:04:52,480
yeah but i mean that's the same as

1636
01:04:50,799 --> 01:04:54,960
switching up of individual

1637
01:04:52,480 --> 01:04:57,039
payload formats and anyway it's the same

1638
01:04:54,960 --> 01:04:59,039
you have to deploy them and if it's not

1639
01:04:57,039 --> 01:05:00,880
if you have certain unique parts and and

1640
01:04:59,039 --> 01:05:02,640
certain coding specific you still have

1641
01:05:00,880 --> 01:05:04,880
the deployment aspects of setting

1642
01:05:02,640 --> 01:05:06,720
dealing with that but i think you need

1643
01:05:04,880 --> 01:05:08,480
anyway you can't

1644
01:05:06,720 --> 01:05:09,759
if you're going to you end up in a route

1645
01:05:08,480 --> 01:05:11,839
something you need to decide for each

1646
01:05:09,760 --> 01:05:13,359
payload format is to what to expose to

1647
01:05:11,839 --> 01:05:15,839
be able to do the switching operation

1648
01:05:13,359 --> 01:05:18,400
and that needs to secure the analysis

1649
01:05:15,839 --> 01:05:19,038
to not leak information that's sensitive

1650
01:05:18,400 --> 01:05:20,880
and and

1651
01:05:19,039 --> 01:05:22,720
so you're not getting away from that

1652
01:05:20,880 --> 01:05:23,839
aspect i think

1653
01:05:22,720 --> 01:05:26,160
it's something you're gonna have to deal

1654
01:05:23,839 --> 01:05:28,240
with even with s frames or you have to

1655
01:05:26,160 --> 01:05:30,078
treat them completely in eric and and

1656
01:05:28,240 --> 01:05:31,919
and put the logic somewhere else and

1657
01:05:30,079 --> 01:05:32,799
have that step completely separate and

1658
01:05:31,920 --> 01:05:34,880
say

1659
01:05:32,799 --> 01:05:37,038
this is magic number five and and then

1660
01:05:34,880 --> 01:05:37,440
you have the logic telling you just a

1661
01:05:37,039 --> 01:05:40,799
few

1662
01:05:37,440 --> 01:05:40,799
five you should do a video this way

1663
01:05:40,880 --> 01:05:45,920
just enumerating profiles or something

1664
01:05:42,960 --> 01:05:45,920
like that i don't know

1665
01:05:48,839 --> 01:05:53,279
that's

1666
01:05:50,799 --> 01:05:55,839
okay so it sounds like there's a bit

1667
01:05:53,280 --> 01:05:57,599
more work to do here

1668
01:05:55,839 --> 01:05:59,359
surgery do you want to continue yeah

1669
01:05:57,599 --> 01:06:02,640
please

1670
01:05:59,359 --> 01:06:02,640
make slide yep

1671
01:06:03,359 --> 01:06:10,558
then then i like to also speak about

1672
01:06:07,440 --> 01:06:12,799
ab1 because ab1 has one one

1673
01:06:10,559 --> 01:06:15,039
feature is that and the packet

1674
01:06:12,799 --> 01:06:16,960
designation is designed to work with the

1675
01:06:15,039 --> 01:06:19,520
end-to-end encryption

1676
01:06:16,960 --> 01:06:20,880
so in this case um everything goes out

1677
01:06:19,520 --> 01:06:24,079
of the box all the frame

1678
01:06:20,880 --> 01:06:28,400
is encrypted by this frame this er

1679
01:06:24,079 --> 01:06:31,599
equally to bp9 as the svu can drop any

1680
01:06:28,400 --> 01:06:34,640
special layer each of the of the

1681
01:06:31,599 --> 01:06:34,960
of the in ab1 it is called frame that

1682
01:06:34,640 --> 01:06:38,400
the

1683
01:06:34,960 --> 01:06:41,520
spatial frames say within this the same

1684
01:06:38,400 --> 01:06:44,160
rtp frame has to be encoded differently

1685
01:06:41,520 --> 01:06:44,640
or independently so it's they can be

1686
01:06:44,160 --> 01:06:49,359
dropped

1687
01:06:44,640 --> 01:06:51,920
by this view all the the metadata is

1688
01:06:49,359 --> 01:06:53,119
is included in a new header station that

1689
01:06:51,920 --> 01:06:54,319
it is called the dependence in the

1690
01:06:53,119 --> 01:06:57,520
descriptor

1691
01:06:54,319 --> 01:06:59,520
i can go into much more details

1692
01:06:57,520 --> 01:07:00,559
about how the dependency descriptor

1693
01:06:59,520 --> 01:07:02,720
works

1694
01:07:00,559 --> 01:07:04,640
but i'm not sure if it is in the scope

1695
01:07:02,720 --> 01:07:07,680
of this working group

1696
01:07:04,640 --> 01:07:11,038
but i can provide more details about

1697
01:07:07,680 --> 01:07:13,598
how the dependency index return works

1698
01:07:11,039 --> 01:07:16,160
how the what are the properties of the

1699
01:07:13,599 --> 01:07:18,960
dependency descriptor

1700
01:07:16,160 --> 01:07:20,000
so uh but regarding this view the svu

1701
01:07:18,960 --> 01:07:24,400
does not need to

1702
01:07:20,000 --> 01:07:25,039
check any a any part of the rtp pilot at

1703
01:07:24,400 --> 01:07:28,160
all

1704
01:07:25,039 --> 01:07:29,280
in fact it is a requirement in the eb1

1705
01:07:28,160 --> 01:07:32,480
expect that the

1706
01:07:29,280 --> 01:07:34,880
at that the svgs must not inspect

1707
01:07:32,480 --> 01:07:35,680
the payload at all and only work in the

1708
01:07:34,880 --> 01:07:38,240
base on the

1709
01:07:35,680 --> 01:07:40,399
information from the header at the

1710
01:07:38,240 --> 01:07:43,118
descriptor

1711
01:07:40,400 --> 01:07:44,400
one thing is that the dependent the

1712
01:07:43,119 --> 01:07:45,280
dependence industry or the header

1713
01:07:44,400 --> 01:07:47,359
station

1714
01:07:45,280 --> 01:07:48,480
can be authenticated end-to-end because

1715
01:07:47,359 --> 01:07:51,920
it includes the

1716
01:07:48,480 --> 01:07:53,200
it includes the one thing that it is

1717
01:07:51,920 --> 01:07:54,960
called the active

1718
01:07:53,200 --> 01:07:56,879
that called target mass that it

1719
01:07:54,960 --> 01:07:58,160
indicates which layer has been for what

1720
01:07:56,880 --> 01:08:01,680
they bite svu

1721
01:07:58,160 --> 01:08:05,038
in order to be able to do and

1722
01:08:01,680 --> 01:08:06,960
to do like your switching fast and so

1723
01:08:05,039 --> 01:08:09,359
this is can be changed by the svu so

1724
01:08:06,960 --> 01:08:10,400
this so this is why the dependencies the

1725
01:08:09,359 --> 01:08:12,558
descriptor

1726
01:08:10,400 --> 01:08:14,640
can be authenticated and when also i

1727
01:08:12,559 --> 01:08:16,560
don't think that it is

1728
01:08:14,640 --> 01:08:18,479
encrypted authenticating this method

1729
01:08:16,560 --> 01:08:21,279
that is something that it is

1730
01:08:18,479 --> 01:08:22,238
should be done and the dependency

1731
01:08:21,279 --> 01:08:24,960
descriptor is

1732
01:08:22,238 --> 01:08:25,519
it can be encrypted by hub by hub either

1733
01:08:24,960 --> 01:08:29,120
by

1734
01:08:25,520 --> 01:08:32,560
standard fcc 904 or by the new

1735
01:08:29,120 --> 01:08:34,559
expected by grid text the dependent

1736
01:08:32,560 --> 01:08:35,679
descriptor is codec agnostic i mean it

1737
01:08:34,560 --> 01:08:38,880
is

1738
01:08:35,679 --> 01:08:39,279
it can be applied to any codec sbc or

1739
01:08:38,880 --> 01:08:41,440
not

1740
01:08:39,279 --> 01:08:45,679
i mean it supports a temporary

1741
01:08:41,439 --> 01:08:48,559
scalability spatial scalability and also

1742
01:08:45,679 --> 01:08:49,920
what it is called the s from the s s

1743
01:08:48,560 --> 01:08:53,759
mode that meaning

1744
01:08:49,920 --> 01:08:56,960
that to have a special scalability but

1745
01:08:53,759 --> 01:09:00,158
a well is similar gas but a multiplexes

1746
01:08:56,960 --> 01:09:03,520
within the same ssrc

1747
01:09:00,158 --> 01:09:05,439
and also it can be used to provide a raw

1748
01:09:03,520 --> 01:09:06,000
packet to size aero packetization

1749
01:09:05,439 --> 01:09:08,879
because it

1750
01:09:06,000 --> 01:09:10,560
includes markers for the start and the

1751
01:09:08,880 --> 01:09:13,839
first and last

1752
01:09:10,560 --> 01:09:17,440
a packet within the same the current

1753
01:09:13,839 --> 01:09:21,120
especially a special frame

1754
01:09:17,439 --> 01:09:24,318
so it can be reused for packetization

1755
01:09:21,120 --> 01:09:26,000
and also can be used by other non-rtp

1756
01:09:24,319 --> 01:09:28,480
protocols like weak because

1757
01:09:26,000 --> 01:09:29,520
you can just prepend this dependency

1758
01:09:28,479 --> 01:09:32,399
descriptor

1759
01:09:29,520 --> 01:09:32,960
to the payload and you will be able to

1760
01:09:32,399 --> 01:09:37,120
do

1761
01:09:32,960 --> 01:09:40,960
a packetization in other protocol other

1762
01:09:37,120 --> 01:09:40,960
protocols that are not rtp based

1763
01:09:41,439 --> 01:09:52,000
so next slide this kind of

1764
01:09:49,279 --> 01:09:53,359
my conclusion but just try to trigger

1765
01:09:52,000 --> 01:09:56,400
some discussion

1766
01:09:53,359 --> 01:09:58,000
is that not all video codes code

1767
01:09:56,400 --> 01:10:00,080
supports this frame easily i mean

1768
01:09:58,000 --> 01:10:02,159
especially in s264

1769
01:10:00,080 --> 01:10:03,760
you will have to define it carefully and

1770
01:10:02,159 --> 01:10:07,280
check all the properties

1771
01:10:03,760 --> 01:10:08,880
that requires to to to to modify

1772
01:10:07,280 --> 01:10:10,639
the the current packet decisions in

1773
01:10:08,880 --> 01:10:13,360
order to make to work with

1774
01:10:10,640 --> 01:10:13,360
with this frame

1775
01:10:15,040 --> 01:10:18,640
and most worrying is that we will have

1776
01:10:17,120 --> 01:10:21,880
to do this effort for

1777
01:10:18,640 --> 01:10:25,679
it's a codec that has a specific

1778
01:10:21,880 --> 01:10:28,719
typicalization by past a future so

1779
01:10:25,679 --> 01:10:29,199
it will be a never-ending and process

1780
01:10:28,719 --> 01:10:31,440
when

1781
01:10:29,199 --> 01:10:32,799
new video friends come the new video

1782
01:10:31,440 --> 01:10:36,239
codecs

1783
01:10:32,800 --> 01:10:39,360
are available

1784
01:10:36,239 --> 01:10:40,400
and it will create a part of making the

1785
01:10:39,360 --> 01:10:42,960
specification work

1786
01:10:40,400 --> 01:10:45,360
much harder it will also have create a

1787
01:10:42,960 --> 01:10:45,840
huge integrability problems because you

1788
01:10:45,360 --> 01:10:48,480
will have

1789
01:10:45,840 --> 01:10:48,960
not only tests and strain implementation

1790
01:10:48,480 --> 01:10:50,879
between

1791
01:10:48,960 --> 01:10:52,000
different browsers but you have to will

1792
01:10:50,880 --> 01:10:56,840
have to test

1793
01:10:52,000 --> 01:10:59,840
each of the codec and between these

1794
01:10:56,840 --> 01:10:59,840
browsers

1795
01:11:00,000 --> 01:11:05,679
and one thing that it is important is to

1796
01:11:03,440 --> 01:11:06,879
be able to know what is view that that

1797
01:11:05,679 --> 01:11:09,040
required and

1798
01:11:06,880 --> 01:11:10,840
what metadata from each video does this

1799
01:11:09,040 --> 01:11:14,320
vue requires

1800
01:11:10,840 --> 01:11:14,960
to to have access to in order to create

1801
01:11:14,320 --> 01:11:18,960
this

1802
01:11:14,960 --> 01:11:23,840
packet in this new a video

1803
01:11:18,960 --> 01:11:25,920
generated video a codec packetization

1804
01:11:23,840 --> 01:11:28,239
and also that's in one experience that

1805
01:11:25,920 --> 01:11:31,280
we have learned at least from

1806
01:11:28,239 --> 01:11:34,000
implementing bp8 bp9 and ab1 is that

1807
01:11:31,280 --> 01:11:37,519
it is better to have this metadata in a

1808
01:11:34,000 --> 01:11:40,880
header extension than inside the payload

1809
01:11:37,520 --> 01:11:42,480
and if possible i would i would like to

1810
01:11:40,880 --> 01:11:44,960
have a solution that it is

1811
01:11:42,480 --> 01:11:45,599
protocol agnostic er at the same as we

1812
01:11:44,960 --> 01:11:47,360
have

1813
01:11:45,600 --> 01:11:49,199
with the spring that it is meant to be

1814
01:11:47,360 --> 01:11:50,400
protocol agnostic if we can have some

1815
01:11:49,199 --> 01:11:52,719
solution that

1816
01:11:50,400 --> 01:11:54,960
implement this packetization and this

1817
01:11:52,719 --> 01:11:57,120
metadata request for this video

1818
01:11:54,960 --> 01:11:58,239
is something that can be reused in other

1819
01:11:57,120 --> 01:12:00,559
protocols that are not

1820
01:11:58,239 --> 01:12:02,879
rtp based i think that it will be nice

1821
01:12:00,560 --> 01:12:02,880
to have

1822
01:12:05,840 --> 01:12:11,120
okay are there any further comments on

1823
01:12:07,920 --> 01:12:11,120
this one questions

1824
01:12:12,480 --> 01:12:15,519
well thanks sergio for covering that the

1825
01:12:15,040 --> 01:12:19,040
next

1826
01:12:15,520 --> 01:12:22,320
topic on our agenda is talking about the

1827
01:12:19,040 --> 01:12:25,840
key establishment stuff

1828
01:12:22,320 --> 01:12:27,840
for that we will have richard barnes uh

1829
01:12:25,840 --> 01:12:28,880
richard do you have someone to cover for

1830
01:12:27,840 --> 01:12:33,760
you for taking

1831
01:12:28,880 --> 01:12:36,480
notes or hello

1832
01:12:33,760 --> 01:12:36,480
thanks

1833
01:12:38,320 --> 01:12:42,000
so martin you're going to drive my

1834
01:12:39,440 --> 01:12:42,000
slides here

1835
01:12:42,960 --> 01:12:46,560
i just need to bring them up i'm sorry

1836
01:12:48,480 --> 01:12:51,280
there we up

1837
01:12:53,280 --> 01:12:57,519
all right and already i have uh screwed

1838
01:12:56,320 --> 01:12:57,920
up the draft name here because it's

1839
01:12:57,520 --> 01:13:01,560
actually

1840
01:12:57,920 --> 01:13:03,120
s frame mls um i got distracted by

1841
01:13:01,560 --> 01:13:04,480
dtlssrgp which put

1842
01:13:03,120 --> 01:13:05,920
cuts the key exchange first but we're

1843
01:13:04,480 --> 01:13:07,599
doing this in he has framework in group

1844
01:13:05,920 --> 01:13:09,600
instead of the mls working groups the s

1845
01:13:07,600 --> 01:13:12,080
frame comes first in draft name

1846
01:13:09,600 --> 01:13:13,520
i put the asterisk there uh when i first

1847
01:13:12,080 --> 01:13:15,199
sent martin the slides

1848
01:13:13,520 --> 01:13:17,920
um because i hadn't submitted the draft

1849
01:13:15,199 --> 01:13:20,080
yet but there is now an internet draft

1850
01:13:17,920 --> 01:13:23,199
that was submitted uh yesterday

1851
01:13:20,080 --> 01:13:24,960
um so the idea here is uh if you can go

1852
01:13:23,199 --> 01:13:28,400
to the next slide

1853
01:13:24,960 --> 01:13:30,239
um funny that we've just spent a few

1854
01:13:28,400 --> 01:13:32,239
little while discussing the hard parts

1855
01:13:30,239 --> 01:13:35,519
around uh

1856
01:13:32,239 --> 01:13:37,280
how we uh choose the units we encode

1857
01:13:35,520 --> 01:13:38,880
from the crypto nerds perspective the

1858
01:13:37,280 --> 01:13:40,159
hard part is always the key management

1859
01:13:38,880 --> 01:13:42,960
and not the choice of what you

1860
01:13:40,159 --> 01:13:44,480
that you encrypt so usual funny

1861
01:13:42,960 --> 01:13:46,000
disconnect between the media folks and

1862
01:13:44,480 --> 01:13:49,280
the crypto folks here

1863
01:13:46,000 --> 01:13:52,480
um right so the s frame

1864
01:13:49,280 --> 01:13:52,880
you know framing uh structure defines

1865
01:13:52,480 --> 01:13:56,080
how

1866
01:13:52,880 --> 01:13:58,159
you encrypt a media payload given a key

1867
01:13:56,080 --> 01:13:59,600
um you know in the identifiers for it in

1868
01:13:58,159 --> 01:14:01,920
the counters

1869
01:13:59,600 --> 01:14:03,440
etc what it doesn't define is how you

1870
01:14:01,920 --> 01:14:04,880
get the keys that you use for the media

1871
01:14:03,440 --> 01:14:06,239
payload and the security properties you

1872
01:14:04,880 --> 01:14:07,920
get from the encryption

1873
01:14:06,239 --> 01:14:10,400
obviously depend on the security

1874
01:14:07,920 --> 01:14:15,040
properties of how you got those keys

1875
01:14:10,400 --> 01:14:17,199
um you know the usual approaches we have

1876
01:14:15,040 --> 01:14:18,800
to establishing the keys for things like

1877
01:14:17,199 --> 01:14:22,559
srtp

1878
01:14:18,800 --> 01:14:24,719
are things like sdes or dtlssrtp

1879
01:14:22,560 --> 01:14:25,840
which are really focused on one-to-one

1880
01:14:24,719 --> 01:14:28,159
cases

1881
01:14:25,840 --> 01:14:29,600
and as you heard in the use cases

1882
01:14:28,159 --> 01:14:31,360
discussions earlier

1883
01:14:29,600 --> 01:14:32,640
a lot of the cases for what we're

1884
01:14:31,360 --> 01:14:35,519
looking at for s frame

1885
01:14:32,640 --> 01:14:37,199
are many to many um especially these

1886
01:14:35,520 --> 01:14:39,520
conferencing cases

1887
01:14:37,199 --> 01:14:40,400
and so the goal the desire here is to

1888
01:14:39,520 --> 01:14:43,520
have a

1889
01:14:40,400 --> 01:14:46,639
key management system that's

1890
01:14:43,520 --> 01:14:48,159
that can address this group use case and

1891
01:14:46,640 --> 01:14:49,679
um you know get you good security

1892
01:14:48,159 --> 01:14:50,639
properties for the keys you input test

1893
01:14:49,679 --> 01:14:54,159
frame

1894
01:14:50,640 --> 01:14:54,480
next slide please so just to provide a

1895
01:14:54,159 --> 01:14:57,920
bit

1896
01:14:54,480 --> 01:14:59,599
of background on mls it is another

1897
01:14:57,920 --> 01:15:02,719
working group over in the security

1898
01:14:59,600 --> 01:15:04,719
security area where we've been

1899
01:15:02,719 --> 01:15:05,920
developing this messaging layer security

1900
01:15:04,719 --> 01:15:07,920
protocol

1901
01:15:05,920 --> 01:15:09,040
originally um you know the kind of

1902
01:15:07,920 --> 01:15:13,280
driving use case

1903
01:15:09,040 --> 01:15:16,800
was secure messaging so apps like wire

1904
01:15:13,280 --> 01:15:17,920
or whatsapp that provide secure group

1905
01:15:16,800 --> 01:15:19,920
messaging

1906
01:15:17,920 --> 01:15:21,199
and the desire there was to provide keys

1907
01:15:19,920 --> 01:15:23,760
for those

1908
01:15:21,199 --> 01:15:24,799
messaging systems that have the security

1909
01:15:23,760 --> 01:15:27,120
properties you expect

1910
01:15:24,800 --> 01:15:28,400
so you have authentication of the party

1911
01:15:27,120 --> 01:15:30,080
you have a key that's only known to

1912
01:15:28,400 --> 01:15:32,159
authenticated parties

1913
01:15:30,080 --> 01:15:33,199
um that you can have more than two

1914
01:15:32,159 --> 01:15:35,519
parties there you can have a group

1915
01:15:33,199 --> 01:15:38,960
instead of just a one-to-one connection

1916
01:15:35,520 --> 01:15:41,440
um and the kind of more interesting

1917
01:15:38,960 --> 01:15:44,560
properties here i'm sorry i've tailed

1918
01:15:41,440 --> 01:15:44,559
off at the end of the slide here

1919
01:15:44,719 --> 01:15:47,920
the continuity property here is

1920
01:15:46,239 --> 01:15:50,080
interesting because

1921
01:15:47,920 --> 01:15:51,040
with these messaging groups as with

1922
01:15:50,080 --> 01:15:53,840
conferencing

1923
01:15:51,040 --> 01:15:55,679
participants people can join and leave

1924
01:15:53,840 --> 01:15:57,199
the group over time so mls provides a

1925
01:15:55,679 --> 01:15:59,120
way to refresh the keys as the

1926
01:15:57,199 --> 01:16:01,440
membership of the group changes so that

1927
01:15:59,120 --> 01:16:02,400
if someone can't decrypt media from

1928
01:16:01,440 --> 01:16:03,919
before they join

1929
01:16:02,400 --> 01:16:06,639
or after they've been removed from the

1930
01:16:03,920 --> 01:16:08,719
group it also provides forward security

1931
01:16:06,640 --> 01:16:11,280
and post-compromised security so that

1932
01:16:08,719 --> 01:16:12,560
you kind of align the compromised

1933
01:16:11,280 --> 01:16:15,679
properties with

1934
01:16:12,560 --> 01:16:15,679
that's kind of what you expect

1935
01:16:16,400 --> 01:16:19,839
next slide please just to kind of give a

1936
01:16:19,199 --> 01:16:23,839
shape a

1937
01:16:19,840 --> 01:16:26,080
feel for how mls works as a protocol um

1938
01:16:23,840 --> 01:16:27,360
you know when when someone joins they

1939
01:16:26,080 --> 01:16:28,559
send a key package to someone who's

1940
01:16:27,360 --> 01:16:29,759
already in the group

1941
01:16:28,560 --> 01:16:32,719
uh that describes their their

1942
01:16:29,760 --> 01:16:34,239
capabilities um the joiner gets back a

1943
01:16:32,719 --> 01:16:36,080
welcome message that you know gives them

1944
01:16:34,239 --> 01:16:38,080
the crypto material for the group

1945
01:16:36,080 --> 01:16:39,760
and then the the person who's in the

1946
01:16:38,080 --> 01:16:41,600
group who's adding the new person

1947
01:16:39,760 --> 01:16:42,880
uh sends a message broadcasts a message

1948
01:16:41,600 --> 01:16:44,960
to the group um with

1949
01:16:42,880 --> 01:16:47,040
an ad ad message and a commit message

1950
01:16:44,960 --> 01:16:49,360
that everyone else in the group

1951
01:16:47,040 --> 01:16:52,239
uses to update to update their state to

1952
01:16:49,360 --> 01:16:53,440
a new key that the joiner also has

1953
01:16:52,239 --> 01:16:55,919
then when you kick someone out of the

1954
01:16:53,440 --> 01:16:57,199
group you just send a remove message and

1955
01:16:55,920 --> 01:16:59,360
a commit message

1956
01:16:57,199 --> 01:17:01,440
that updates the whole group so that

1957
01:16:59,360 --> 01:17:02,960
they the group's keys are no longer

1958
01:17:01,440 --> 01:17:03,759
accessible to the person that's kicked

1959
01:17:02,960 --> 01:17:05,120
out

1960
01:17:03,760 --> 01:17:07,360
that's just kind of giving folks a

1961
01:17:05,120 --> 01:17:08,000
flavor for um for what mls looks like as

1962
01:17:07,360 --> 01:17:09,679
a protocol

1963
01:17:08,000 --> 01:17:11,600
doesn't really have much relevance to

1964
01:17:09,679 --> 01:17:15,520
astrum directly

1965
01:17:11,600 --> 01:17:19,199
next slide please the protocol question

1966
01:17:15,520 --> 01:17:21,120
for mls plus s frame is how we take the

1967
01:17:19,199 --> 01:17:22,000
outputs from mls and map them to the

1968
01:17:21,120 --> 01:17:24,559
inputs that s

1969
01:17:22,000 --> 01:17:24,560
frame needs

1970
01:17:25,360 --> 01:17:28,960
so if you think about what an s frame

1971
01:17:26,960 --> 01:17:31,760
implementation is going to be

1972
01:17:28,960 --> 01:17:33,280
it's gonna need um you know when it's

1973
01:17:31,760 --> 01:17:36,239
encrypting it's gonna need a way

1974
01:17:33,280 --> 01:17:36,960
to figure out what key id goes in the s

1975
01:17:36,239 --> 01:17:38,239
frame header

1976
01:17:36,960 --> 01:17:40,880
when it's decrypting it's gonna need a

1977
01:17:38,239 --> 01:17:41,839
way to look up keys based on the key ids

1978
01:17:40,880 --> 01:17:45,360
that it's getting

1979
01:17:41,840 --> 01:17:48,159
in the s frame headers so that's that's

1980
01:17:45,360 --> 01:17:49,519
the s frame inputs in terms of what mls

1981
01:17:48,159 --> 01:17:52,000
produces

1982
01:17:49,520 --> 01:17:52,960
um i mentioned that it re-keys every

1983
01:17:52,000 --> 01:17:56,320
time you do

1984
01:17:52,960 --> 01:17:57,920
a join or a leave

1985
01:17:56,320 --> 01:17:59,759
it can do batching of those but that's

1986
01:17:57,920 --> 01:18:03,040
sort of secondary but any case

1987
01:17:59,760 --> 01:18:04,560
it um has this notion of epochs

1988
01:18:03,040 --> 01:18:06,560
which are these intervals at which the

1989
01:18:04,560 --> 01:18:09,679
keys are rotated

1990
01:18:06,560 --> 01:18:12,000
and um for avoidance

1991
01:18:09,679 --> 01:18:13,199
of conflicts for avoidance of non-free

1992
01:18:12,000 --> 01:18:16,000
use we need to

1993
01:18:13,199 --> 01:18:17,919
produce separate keys per sender in the

1994
01:18:16,000 --> 01:18:21,679
group

1995
01:18:17,920 --> 01:18:23,679
so the scheme here takes kind of

1996
01:18:21,679 --> 01:18:25,440
this epoch and sender id and packs them

1997
01:18:23,679 --> 01:18:27,840
into the key id

1998
01:18:25,440 --> 01:18:29,040
and defines a way for deriving these

1999
01:18:27,840 --> 01:18:31,120
sender ikea

2000
01:18:29,040 --> 01:18:34,000
sender keys from the the crypto data

2001
01:18:31,120 --> 01:18:35,360
that mls produces for an epoch

2002
01:18:34,000 --> 01:18:38,400
just to kind of tell this story in

2003
01:18:35,360 --> 01:18:41,199
pictures next slide please

2004
01:18:38,400 --> 01:18:43,360
mls like i said produces these at the

2005
01:18:41,199 --> 01:18:43,919
sequence of epochs a linear sequence of

2006
01:18:43,360 --> 01:18:47,199
things

2007
01:18:43,920 --> 01:18:49,920
for the group um you know each

2008
01:18:47,199 --> 01:18:51,360
batch of joins and leaves uh produces a

2009
01:18:49,920 --> 01:18:53,679
new epoch

2010
01:18:51,360 --> 01:18:54,559
and what's in the draft right now is at

2011
01:18:53,679 --> 01:18:57,760
each epoch we

2012
01:18:54,560 --> 01:18:58,080
export an s frame epoch secret from the

2013
01:18:57,760 --> 01:19:01,840
group

2014
01:18:58,080 --> 01:19:04,080
secrets and then we use that to derive

2015
01:19:01,840 --> 01:19:04,880
the base keys that go into k into s

2016
01:19:04,080 --> 01:19:07,600
frame

2017
01:19:04,880 --> 01:19:08,960
by uh kdf in that epoch code together

2018
01:19:07,600 --> 01:19:11,600
with the notion of the

2019
01:19:08,960 --> 01:19:12,800
the sender's index in the group uh and

2020
01:19:11,600 --> 01:19:15,760
i'll say as well since we're

2021
01:19:12,800 --> 01:19:17,840
um mls another thing i didn't mention

2022
01:19:15,760 --> 01:19:20,159
about mls is that every member of the

2023
01:19:17,840 --> 01:19:22,320
mls group has a specific

2024
01:19:20,159 --> 01:19:23,360
index in the group so a side effect of

2025
01:19:22,320 --> 01:19:25,199
mls is that

2026
01:19:23,360 --> 01:19:28,480
if you're in the group then you know a

2027
01:19:25,199 --> 01:19:31,599
unique uh un-32 for yourself

2028
01:19:28,480 --> 01:19:34,239
uh that defines you that that

2029
01:19:31,600 --> 01:19:35,840
um uniquely identifies you within the

2030
01:19:34,239 --> 01:19:36,480
group and so we can use that to branch

2031
01:19:35,840 --> 01:19:40,560
off

2032
01:19:36,480 --> 01:19:44,159
sender keys from the the group secret

2033
01:19:40,560 --> 01:19:46,800
um so the the yeah so the idea here

2034
01:19:44,159 --> 01:19:47,759
of the draft is to take the key id in s

2035
01:19:46,800 --> 01:19:50,159
frame

2036
01:19:47,760 --> 01:19:51,280
and use that to locate where you are in

2037
01:19:50,159 --> 01:19:52,960
this key schedule

2038
01:19:51,280 --> 01:19:54,719
and so you can identify the sender-based

2039
01:19:52,960 --> 01:19:57,920
key that you're going to use for

2040
01:19:54,719 --> 01:19:57,920
encrypting and decrypting

2041
01:19:58,159 --> 01:20:04,879
next slide now these

2042
01:20:01,280 --> 01:20:06,800
epochs in mls have are identified by an

2043
01:20:04,880 --> 01:20:08,960
eight byte counter which is you know big

2044
01:20:06,800 --> 01:20:10,080
for for a parsimonious protocol like s

2045
01:20:08,960 --> 01:20:12,960
frame

2046
01:20:10,080 --> 01:20:14,480
um so for compactness the draft uh says

2047
01:20:12,960 --> 01:20:18,560
you can truncate this epoch

2048
01:20:14,480 --> 01:20:20,400
to a number of bits which we call e

2049
01:20:18,560 --> 01:20:22,480
um which basically defines your

2050
01:20:20,400 --> 01:20:24,080
reordering window um defines how many

2051
01:20:22,480 --> 01:20:26,080
epochs you can have in play at a given

2052
01:20:24,080 --> 01:20:26,639
time as your your potentially rotating

2053
01:20:26,080 --> 01:20:30,000
keys

2054
01:20:26,639 --> 01:20:31,040
with some frequency um my guess is that

2055
01:20:30,000 --> 01:20:32,719
like having

2056
01:20:31,040 --> 01:20:35,280
four bits or eight bits is probably

2057
01:20:32,719 --> 01:20:37,040
going to work in most cases um

2058
01:20:35,280 --> 01:20:39,199
depending on the dynamics of key

2059
01:20:37,040 --> 01:20:43,040
rotation this is a parameter that

2060
01:20:39,199 --> 01:20:46,638
the much like you know the

2061
01:20:43,040 --> 01:20:48,560
group is going to have to agree on uh

2062
01:20:46,639 --> 01:20:49,679
the participants in s frame encrypted

2063
01:20:48,560 --> 01:20:51,360
session they're going to have to agree

2064
01:20:49,679 --> 01:20:53,679
on what

2065
01:20:51,360 --> 01:20:54,719
encryption algorithms they're using um

2066
01:20:53,679 --> 01:20:56,000
and that they're gonna

2067
01:20:54,719 --> 01:20:57,679
agree they're using this scheme at all

2068
01:20:56,000 --> 01:20:59,280
they're gonna have to agree on this uh

2069
01:20:57,679 --> 01:21:01,840
number of epoch bits

2070
01:20:59,280 --> 01:21:02,639
as another parameter to agree on but

2071
01:21:01,840 --> 01:21:04,719
then the the

2072
01:21:02,639 --> 01:21:06,400
the key id encoding scheme is pretty

2073
01:21:04,719 --> 01:21:08,560
simple um you use

2074
01:21:06,400 --> 01:21:09,599
uh you stuff the epoch in the low order

2075
01:21:08,560 --> 01:21:10,880
e bits

2076
01:21:09,600 --> 01:21:13,360
and then the remaining bits are the

2077
01:21:10,880 --> 01:21:16,480
sender index so the key id

2078
01:21:13,360 --> 01:21:19,360
um uh

2079
01:21:16,480 --> 01:21:20,879
yeah it's just a packed uh truncated

2080
01:21:19,360 --> 01:21:24,000
epoch and the sender index

2081
01:21:20,880 --> 01:21:26,480
grows as um the

2082
01:21:24,000 --> 01:21:28,480
the number of senders increases the size

2083
01:21:26,480 --> 01:21:31,360
of the group increases

2084
01:21:28,480 --> 01:21:31,360
next slide please

2085
01:21:32,480 --> 01:21:35,759
so yeah this is really the draft this is

2086
01:21:34,560 --> 01:21:38,719
really the meat of the draft

2087
01:21:35,760 --> 01:21:39,679
so the the mapping between the key id

2088
01:21:38,719 --> 01:21:41,360
and the

2089
01:21:39,679 --> 01:21:43,679
epoch and sender which gets you the key

2090
01:21:41,360 --> 01:21:44,639
schedule and then the way you derive the

2091
01:21:43,679 --> 01:21:48,800
set the person

2092
01:21:44,639 --> 01:21:48,800
or keys from the key schedule

2093
01:21:48,880 --> 01:21:51,360
next slide

2094
01:21:52,320 --> 01:21:55,360
so this is i've implemented this scheme

2095
01:21:54,560 --> 01:21:57,840
in

2096
01:21:55,360 --> 01:21:58,639
s frame draft implementation that we've

2097
01:21:57,840 --> 01:22:04,080
got going

2098
01:21:58,639 --> 01:22:06,159
on github no magic here

2099
01:22:04,080 --> 01:22:07,120
and so that brings us to the last slide

2100
01:22:06,159 --> 01:22:09,759
which is

2101
01:22:07,120 --> 01:22:11,199
um you know proposed adopting this draft

2102
01:22:09,760 --> 01:22:13,440
alongside

2103
01:22:11,199 --> 01:22:14,719
uh whatever draft we adopt for the base

2104
01:22:13,440 --> 01:22:18,000
uh s frame here

2105
01:22:14,719 --> 01:22:19,360
um there is a couple questions i didn't

2106
01:22:18,000 --> 01:22:23,120
mention here um

2107
01:22:19,360 --> 01:22:26,719
you know we could use um

2108
01:22:23,120 --> 01:22:28,960
analogy here to dtlssrtp or dtls in that

2109
01:22:26,719 --> 01:22:30,000
in that compound dtls is used to

2110
01:22:28,960 --> 01:22:33,120
negotiate

2111
01:22:30,000 --> 01:22:34,480
the parameters for srtp um in particular

2112
01:22:33,120 --> 01:22:36,559
negotiates the cipher suite that you're

2113
01:22:34,480 --> 01:22:38,159
going to use with with srtp

2114
01:22:36,560 --> 01:22:40,239
um we could do the same thing here by

2115
01:22:38,159 --> 01:22:41,920
defining an mls extension to negotiate

2116
01:22:40,239 --> 01:22:44,159
parameters like the cipher suite or the

2117
01:22:41,920 --> 01:22:46,000
the size of the the epoch

2118
01:22:44,159 --> 01:22:47,839
um that's not in the draft right now but

2119
01:22:46,000 --> 01:22:49,679
it would be a natural extension

2120
01:22:47,840 --> 01:22:51,120
so i'm curious whether people think that

2121
01:22:49,679 --> 01:22:54,239
would be useful

2122
01:22:51,120 --> 01:22:55,920
um i think another thing that raphael

2123
01:22:54,239 --> 01:22:58,080
noted to me is as we were preparing this

2124
01:22:55,920 --> 01:23:01,199
is and i forgot to put in the slide

2125
01:22:58,080 --> 01:23:04,320
is that uh mls actually itself

2126
01:23:01,199 --> 01:23:07,519
produces per sender keys for encrypting

2127
01:23:04,320 --> 01:23:10,400
its own messages um and so it's got us

2128
01:23:07,520 --> 01:23:12,800
a scheme that is a bit complex compared

2129
01:23:10,400 --> 01:23:15,120
to what's defined here but provides

2130
01:23:12,800 --> 01:23:17,520
more forward secrecy within within an

2131
01:23:15,120 --> 01:23:17,519
epoch

2132
01:23:18,159 --> 01:23:24,799
we could use that internal mls

2133
01:23:22,159 --> 01:23:25,839
secret generation scheme here um it

2134
01:23:24,800 --> 01:23:29,360
would require a bit

2135
01:23:25,840 --> 01:23:31,679
more intimate collaboration between mls

2136
01:23:29,360 --> 01:23:33,599
uh and and s frame as opposed to just

2137
01:23:31,679 --> 01:23:34,880
exporting a single secret

2138
01:23:33,600 --> 01:23:36,719
but we could also do that it would get

2139
01:23:34,880 --> 01:23:39,600
you on slightly better uh

2140
01:23:36,719 --> 01:23:40,080
forward sequencing properties so with

2141
01:23:39,600 --> 01:23:42,239
that all

2142
01:23:40,080 --> 01:23:44,080
i'm happy to discuss take questions

2143
01:23:42,239 --> 01:23:49,839
comments

2144
01:23:44,080 --> 01:23:49,840
it's q time emad

2145
01:23:51,040 --> 01:23:56,000
so they're very excited about this uh i

2146
01:23:53,679 --> 01:23:57,679
actually put myself in the key before he

2147
01:23:56,000 --> 01:23:59,199
brought up your last point about using

2148
01:23:57,679 --> 01:24:00,880
personal key uh

2149
01:23:59,199 --> 01:24:02,239
i'm actually against it i prefer using

2150
01:24:00,880 --> 01:24:04,960
the root uh

2151
01:24:02,239 --> 01:24:06,879
red key for simulation because mls

2152
01:24:04,960 --> 01:24:07,920
presenter key is allowed ratchet per

2153
01:24:06,880 --> 01:24:10,400
message

2154
01:24:07,920 --> 01:24:11,920
and due to the for rtc communication we

2155
01:24:10,400 --> 01:24:13,440
can't have registering because

2156
01:24:11,920 --> 01:24:15,440
some some backs will be the frames will

2157
01:24:13,440 --> 01:24:16,960
be lost and transit so i think the

2158
01:24:15,440 --> 01:24:18,080
simplest thing to do is just run the

2159
01:24:16,960 --> 01:24:21,760
root secret or

2160
01:24:18,080 --> 01:24:23,679
is the box uh i guess

2161
01:24:21,760 --> 01:24:26,639
the question i have for you is i didn't

2162
01:24:23,679 --> 01:24:30,560
get the slide about key id derivation

2163
01:24:26,639 --> 01:24:33,840
uh is this that is frame key id or

2164
01:24:30,560 --> 01:24:36,159
another key id yeah i think

2165
01:24:33,840 --> 01:24:39,520
the only key id i've i've talked about

2166
01:24:36,159 --> 01:24:39,519
here is the string key id

2167
01:24:39,760 --> 01:24:44,960
but everything else is uh would be

2168
01:24:42,239 --> 01:24:44,959
completed out of

2169
01:24:53,280 --> 01:24:56,559
what information doesn't need to go in

2170
01:24:55,520 --> 01:24:58,400
the s frame

2171
01:24:56,560 --> 01:25:00,239
payload only clarity right we don't need

2172
01:24:58,400 --> 01:25:00,480
anything else everything that should be

2173
01:25:00,239 --> 01:25:03,599
in

2174
01:25:00,480 --> 01:25:06,239
and out yes the the stream

2175
01:25:03,600 --> 01:25:08,639
header has a key id and a counter which

2176
01:25:06,239 --> 01:25:11,040
i guess we didn't actually do an s frame

2177
01:25:08,639 --> 01:25:12,800
overview in this in this session but

2178
01:25:11,040 --> 01:25:14,159
this remote the stream header has a key

2179
01:25:12,800 --> 01:25:17,280
id and a counter

2180
01:25:14,159 --> 01:25:18,559
um so the proposal here is that you uh

2181
01:25:17,280 --> 01:25:20,400
the counter

2182
01:25:18,560 --> 01:25:22,159
the nonce formation works the same way

2183
01:25:20,400 --> 01:25:24,080
as in s frame

2184
01:25:22,159 --> 01:25:26,320
in general sure and then the key

2185
01:25:24,080 --> 01:25:26,960
selection is just guided by this this

2186
01:25:26,320 --> 01:25:29,759
key ideas

2187
01:25:26,960 --> 01:25:29,760
as defined here

2188
01:25:31,920 --> 01:25:38,320
so in that i would note that

2189
01:25:36,159 --> 01:25:39,599
that i think you and i have a disconnect

2190
01:25:38,320 --> 01:25:42,799
here

2191
01:25:39,600 --> 01:25:43,679
this key id you mentioned in passing

2192
01:25:42,800 --> 01:25:47,760
earlier that

2193
01:25:43,679 --> 01:25:50,639
you in your view key ids are per user

2194
01:25:47,760 --> 01:25:52,960
so each sender has a different key id

2195
01:25:50,639 --> 01:25:52,960
space

2196
01:25:53,280 --> 01:25:56,559
i think i might disagree with that

2197
01:25:55,360 --> 01:25:58,880
assumption um

2198
01:25:56,560 --> 01:26:00,719
just because of the way it requires some

2199
01:25:58,880 --> 01:26:02,480
additional coupling between the s frame

2200
01:26:00,719 --> 01:26:05,440
layer and the application

2201
01:26:02,480 --> 01:26:08,239
um so this scheme is designed so that

2202
01:26:05,440 --> 01:26:09,519
the key id space is shared across all of

2203
01:26:08,239 --> 01:26:12,718
the senders

2204
01:26:09,520 --> 01:26:16,480
and the um you know when the

2205
01:26:12,719 --> 01:26:19,600
s frame stack gets a decryption to do

2206
01:26:16,480 --> 01:26:22,718
it doesn't know kind of which um

2207
01:26:19,600 --> 01:26:23,840
which senders which user's uh stream it

2208
01:26:22,719 --> 01:26:25,280
came from

2209
01:26:23,840 --> 01:26:26,960
and so that's why you need to include

2210
01:26:25,280 --> 01:26:30,159
the sender index in there otherwise

2211
01:26:26,960 --> 01:26:30,159
you could just encode the epoch

2212
01:26:31,520 --> 01:26:37,120
uh interesting okay smells like an issue

2213
01:26:36,639 --> 01:26:38,560
to me

2214
01:26:37,120 --> 01:26:42,239
i think we should probably resolve that

2215
01:26:38,560 --> 01:26:42,239
at some point yeah yeah

2216
01:26:42,320 --> 01:26:45,599
okay so eric

2217
01:26:46,960 --> 01:26:50,000
really i mean this seems like good stuff

2218
01:26:49,360 --> 01:26:53,199
um

2219
01:26:50,000 --> 01:26:54,880
we could call out the details um

2220
01:26:53,199 --> 01:26:56,719
i i actually found myself a little lost

2221
01:26:54,880 --> 01:27:00,159
in that colloquy you just have with uh

2222
01:26:56,719 --> 01:27:00,880
mad um like we agreed the packet has to

2223
01:27:00,159 --> 01:27:02,799
carry

2224
01:27:00,880 --> 01:27:04,560
the back it has to carry some indicator

2225
01:27:02,800 --> 01:27:06,000
of which like every

2226
01:27:04,560 --> 01:27:08,480
sorry everyone has to use their own key

2227
01:27:06,000 --> 01:27:10,639
space they're not space

2228
01:27:08,480 --> 01:27:11,919
in some way right otherwise you have a

2229
01:27:10,639 --> 01:27:13,280
terrible problem so you use different

2230
01:27:11,920 --> 01:27:15,040
keys or you need a big ass not spaces

2231
01:27:13,280 --> 01:27:18,159
not something like that right

2232
01:27:15,040 --> 01:27:21,199
yep i i think imad's assumption is that

2233
01:27:18,159 --> 01:27:24,320
um something at a layer outside of s

2234
01:27:21,199 --> 01:27:26,400
frame can indicate who the sender is

2235
01:27:24,320 --> 01:27:28,799
and then the key id can distinguish keys

2236
01:27:26,400 --> 01:27:31,920
within the sender's sequence

2237
01:27:28,800 --> 01:27:33,120
correct that doesn't that seems the same

2238
01:27:31,920 --> 01:27:36,320
we definitely have to resolve

2239
01:27:33,120 --> 01:27:39,199
um yes um

2240
01:27:36,320 --> 01:27:40,080
uh if it's assuming i understand this

2241
01:27:39,199 --> 01:27:43,759
issue about

2242
01:27:40,080 --> 01:27:45,519
uh um this issue is assume that raises

2243
01:27:43,760 --> 01:27:48,480
about

2244
01:27:45,520 --> 01:27:48,880
um the ratchet correctly i agree i

2245
01:27:48,480 --> 01:27:50,959
doesn't see

2246
01:27:48,880 --> 01:27:52,080
much value in trying to use the the more

2247
01:27:50,960 --> 01:27:55,120
more closely um

2248
01:27:52,080 --> 01:27:57,519
bladed secrets um

2249
01:27:55,120 --> 01:27:59,519
the um and i i do think it'd be nice for

2250
01:27:57,520 --> 01:28:00,560
mls to negotiate the uh this effort the

2251
01:27:59,520 --> 01:28:01,520
cypher suites

2252
01:28:00,560 --> 01:28:05,199
seems like otherwise you're going to

2253
01:28:01,520 --> 01:28:05,199
have like a palette problems

2254
01:28:07,040 --> 01:28:10,560
um and why why is one actually one thing

2255
01:28:09,120 --> 01:28:13,519
i should mention um

2256
01:28:10,560 --> 01:28:14,080
is that the um you want that also

2257
01:28:13,520 --> 01:28:16,960
because

2258
01:28:14,080 --> 01:28:18,159
uh um you want to know why why you you

2259
01:28:16,960 --> 01:28:19,120
want you want to have enough context to

2260
01:28:18,159 --> 01:28:20,719
know why you're getting what you're

2261
01:28:19,120 --> 01:28:29,840
getting

2262
01:28:20,719 --> 01:28:29,840
when you play we support the keys

2263
01:28:33,920 --> 01:28:37,600
someone captured that in the notes the

2264
01:28:36,000 --> 01:28:43,840
cipher sweet

2265
01:28:37,600 --> 01:28:43,840
issue and uh we'll go to jonathan

2266
01:28:45,199 --> 01:28:49,360
hello so um i just wanted to you know

2267
01:28:48,320 --> 01:28:50,880
bring up a

2268
01:28:49,360 --> 01:28:53,519
side conversation martin and i were

2269
01:28:50,880 --> 01:28:56,880
having in the chat which is that

2270
01:28:53,520 --> 01:28:59,920
you know on the question of whether the

2271
01:28:56,880 --> 01:29:01,199
uh epic trent uh truncation needs to be

2272
01:28:59,920 --> 01:29:04,320
flexible

2273
01:29:01,199 --> 01:29:05,440
um i think he commented that he didn't

2274
01:29:04,320 --> 01:29:07,920
think it did and i

2275
01:29:05,440 --> 01:29:11,599
my response was that i think that if we

2276
01:29:07,920 --> 01:29:14,159
were only talking about true interactive

2277
01:29:11,600 --> 01:29:15,120
media where you know you have you know

2278
01:29:14,159 --> 01:29:17,120
the level of

2279
01:29:15,120 --> 01:29:18,400
of you know interaction interactive

2280
01:29:17,120 --> 01:29:21,199
conversation around trip time

2281
01:29:18,400 --> 01:29:21,599
i think i agree but i think my comment

2282
01:29:21,199 --> 01:29:24,239
was

2283
01:29:21,600 --> 01:29:25,360
we probably need to make sure before we

2284
01:29:24,239 --> 01:29:27,120
make that decision that we don't have

2285
01:29:25,360 --> 01:29:28,080
any use cases where stored media would

2286
01:29:27,120 --> 01:29:30,880
be

2287
01:29:28,080 --> 01:29:32,239
useful where obviously if you have

2288
01:29:30,880 --> 01:29:39,840
stored media then you have a much

2289
01:29:32,239 --> 01:29:39,839
larger history of epochs

2290
01:29:47,520 --> 01:29:53,440
um so um just in response to jonathan

2291
01:29:50,800 --> 01:29:54,320
i that in the case that you have stored

2292
01:29:53,440 --> 01:29:55,678
media

2293
01:29:54,320 --> 01:29:57,679
you will still have a progression of

2294
01:29:55,679 --> 01:30:00,000
epochs that you can recover from

2295
01:29:57,679 --> 01:30:01,600
a low bit count epoch thing and in

2296
01:30:00,000 --> 01:30:04,080
particular for stored media

2297
01:30:01,600 --> 01:30:05,360
you probably won't have periods where

2298
01:30:04,080 --> 01:30:07,040
you miss

2299
01:30:05,360 --> 01:30:08,400
multiple epochs such that you lose

2300
01:30:07,040 --> 01:30:09,920
synchronization so

2301
01:30:08,400 --> 01:30:11,839
it seems to me like you could probably

2302
01:30:09,920 --> 01:30:14,080
get away with a very small number of

2303
01:30:11,840 --> 01:30:15,760
bits even there

2304
01:30:14,080 --> 01:30:18,159
yeah i was going to say a similar thing

2305
01:30:15,760 --> 01:30:22,000
which is that store stored media

2306
01:30:18,159 --> 01:30:23,599
is this case i don't worry about here um

2307
01:30:22,000 --> 01:30:25,040
it's really the desynchronization

2308
01:30:23,600 --> 01:30:28,080
problem that

2309
01:30:25,040 --> 01:30:30,400
is the reason that you need a non

2310
01:30:28,080 --> 01:30:31,440
non-zero number of bits for the epoch if

2311
01:30:30,400 --> 01:30:32,879
everyone were in sync

2312
01:30:31,440 --> 01:30:34,159
if everyone were coordinated on the

2313
01:30:32,880 --> 01:30:34,960
epoch out of band you wouldn't even need

2314
01:30:34,159 --> 01:30:38,960
to signal the f

2315
01:30:34,960 --> 01:30:40,320
at all um it's really that

2316
01:30:38,960 --> 01:30:42,080
you know some some folks might be a

2317
01:30:40,320 --> 01:30:44,639
couple of epochs behind that you need

2318
01:30:42,080 --> 01:30:46,239
the signal and you need a few bits of it

2319
01:30:44,639 --> 01:30:47,760
yeah i mean i guess the model i'd have

2320
01:30:46,239 --> 01:30:49,360
is somebody you know leaves a voice

2321
01:30:47,760 --> 01:30:51,280
message in the channel for people to

2322
01:30:49,360 --> 01:30:54,480
listen to when they come back

2323
01:30:51,280 --> 01:30:56,400
something like that for some

2324
01:30:54,480 --> 01:30:58,080
broad definition of that obviously i'm

2325
01:30:56,400 --> 01:31:00,400
being very

2326
01:30:58,080 --> 01:31:03,840
you know hand way you know what the user

2327
01:31:00,400 --> 01:31:03,839
experience is but

2328
01:31:06,000 --> 01:31:12,880
okay that's good input nonetheless

2329
01:31:09,280 --> 01:31:17,840
sergio just one

2330
01:31:12,880 --> 01:31:17,840
small reminder that

2331
01:31:18,159 --> 01:31:22,960
we should be able to support any kind of

2332
01:31:20,239 --> 01:31:26,000
a ski management system into

2333
01:31:22,960 --> 01:31:28,560
interest frames so just try to to when

2334
01:31:26,000 --> 01:31:31,120
we discuss about how mls should be

2335
01:31:28,560 --> 01:31:31,760
integrated into a strain just try to not

2336
01:31:31,120 --> 01:31:34,159
to

2337
01:31:31,760 --> 01:31:35,199
to adapt too much this frame to what is

2338
01:31:34,159 --> 01:31:38,000
a mls

2339
01:31:35,199 --> 01:31:39,040
requires especially for example and or

2340
01:31:38,000 --> 01:31:41,040
taking into account

2341
01:31:39,040 --> 01:31:42,840
or the discussion if we will need to

2342
01:31:41,040 --> 01:31:45,840
have a difference in the

2343
01:31:42,840 --> 01:31:47,920
index f and or

2344
01:31:45,840 --> 01:31:50,080
in within s frame or not i mean i would

2345
01:31:47,920 --> 01:31:51,760
just try not to

2346
01:31:50,080 --> 01:31:53,840
integrate too much both solution and

2347
01:31:51,760 --> 01:31:57,120
just to assume that because

2348
01:31:53,840 --> 01:32:00,320
s a m l super something we can just skip

2349
01:31:57,120 --> 01:32:00,320
that discussion for an s frame

2350
01:32:00,800 --> 01:32:04,000
yeah i think we have a pretty clean d

2351
01:32:02,239 --> 01:32:07,280
mark here um in fact in the

2352
01:32:04,000 --> 01:32:09,760
in the code we wrote to this um

2353
01:32:07,280 --> 01:32:11,840
there is there's literally a separate

2354
01:32:09,760 --> 01:32:12,239
class a separate inheritance boundary uh

2355
01:32:11,840 --> 01:32:14,719
that

2356
01:32:12,239 --> 01:32:16,799
um separates the mls based keying stuff

2357
01:32:14,719 --> 01:32:18,080
from the base s frame stuff so i

2358
01:32:16,800 --> 01:32:19,679
i think we're pretty good if you think

2359
01:32:18,080 --> 01:32:20,080
that there's unnecessarily entanglements

2360
01:32:19,679 --> 01:32:21,760
here

2361
01:32:20,080 --> 01:32:23,440
um please speak up i'm happy to sort

2362
01:32:21,760 --> 01:32:26,560
those out you know i

2363
01:32:23,440 --> 01:32:29,599
i think that the question is

2364
01:32:26,560 --> 01:32:32,000
if the key space is

2365
01:32:29,600 --> 01:32:33,679
is global or percentage honey we need to

2366
01:32:32,000 --> 01:32:36,159
carry a center index

2367
01:32:33,679 --> 01:32:37,120
also in spring or not i think that is my

2368
01:32:36,159 --> 01:32:39,839
main concern

2369
01:32:37,120 --> 01:32:41,519
and i just will try to to to have this

2370
01:32:39,840 --> 01:32:44,000
discussion as frame and if

2371
01:32:41,520 --> 01:32:45,280
mls can be of the message this would be

2372
01:32:44,000 --> 01:32:46,800
much better

2373
01:32:45,280 --> 01:32:48,320
but i would like to to have the

2374
01:32:46,800 --> 01:32:50,880
discussion and to be

2375
01:32:48,320 --> 01:32:52,960
like kind of kms of an oxygen as

2376
01:32:50,880 --> 01:32:54,719
nausicaa will

2377
01:32:52,960 --> 01:32:56,719
yeah that's a good point i think that

2378
01:32:54,719 --> 01:32:59,600
the

2379
01:32:56,719 --> 01:33:00,159
the the idea that the key id needs to

2380
01:32:59,600 --> 01:33:03,600
provide

2381
01:33:00,159 --> 01:33:06,960
distinct non-spaces per sender

2382
01:33:03,600 --> 01:33:09,360
is s frame generic and then each

2383
01:33:06,960 --> 01:33:10,800
key management scheme needs to assure

2384
01:33:09,360 --> 01:33:12,239
that property they need to ensure that

2385
01:33:10,800 --> 01:33:13,760
however the

2386
01:33:12,239 --> 01:33:15,678
keys are identified that you end up with

2387
01:33:13,760 --> 01:33:18,239
separate keys per sender

2388
01:33:15,679 --> 01:33:23,040
okay this is just a particular scheme

2389
01:33:18,239 --> 01:33:26,799
for doing that

2390
01:33:23,040 --> 01:33:27,760
okay tim coming back to the epoch

2391
01:33:26,800 --> 01:33:30,159
question

2392
01:33:27,760 --> 01:33:30,880
can you tell if it's wrapped like what

2393
01:33:30,159 --> 01:33:33,679
happens if

2394
01:33:30,880 --> 01:33:35,040
if you've got the wrong equal if you've

2395
01:33:33,679 --> 01:33:36,560
got the wrong epac uh

2396
01:33:35,040 --> 01:33:37,920
things will fail you'll you'll have

2397
01:33:36,560 --> 01:33:40,560
different keys and so things will fail

2398
01:33:37,920 --> 01:33:40,560
to decrypt

2399
01:33:41,520 --> 01:33:45,280
no well except they'll decrypt but you

2400
01:33:44,000 --> 01:33:47,600
won't get what you think

2401
01:33:45,280 --> 01:33:49,360
which comes back to this authentication

2402
01:33:47,600 --> 01:33:50,800
like

2403
01:33:49,360 --> 01:33:52,880
well because we're using authenticated

2404
01:33:50,800 --> 01:33:54,639
encryption if you try to decompress with

2405
01:33:52,880 --> 01:33:56,000
wrong key the the encryption will

2406
01:33:54,639 --> 01:34:00,159
actually fail

2407
01:33:56,000 --> 01:34:01,679
okay um modula my

2408
01:34:00,159 --> 01:34:03,759
cryptographers in the back of my head

2409
01:34:01,679 --> 01:34:06,480
screaming about uh non-committing

2410
01:34:03,760 --> 01:34:07,679
there are cases like uh exceptionally

2411
01:34:06,480 --> 01:34:09,360
rare cases where

2412
01:34:07,679 --> 01:34:12,080
you can decrypt with an incorrect key

2413
01:34:09,360 --> 01:34:13,679
and the decryption will succeed but

2414
01:34:12,080 --> 01:34:16,559
with overwhelming probability the

2415
01:34:13,679 --> 01:34:16,560
decryption will fail

2416
01:34:17,520 --> 01:34:21,280
and so so you'll know and so you could

2417
01:34:19,280 --> 01:34:24,559
you can recover from epoch wraps

2418
01:34:21,280 --> 01:34:24,559
um with trial decryption

2419
01:34:27,600 --> 01:34:34,480
but we we try to avoid that

2420
01:34:30,840 --> 01:34:35,840
absolutely okay well

2421
01:34:34,480 --> 01:34:37,678
thanks richard do you have more more on

2422
01:34:35,840 --> 01:34:40,400
this one

2423
01:34:37,679 --> 01:34:40,400
any other questions

2424
01:34:40,719 --> 01:34:48,560
so just been talking to bobo offline

2425
01:34:45,679 --> 01:34:49,520
and we do have one volunteer for another

2426
01:34:48,560 --> 01:34:51,040
presentation but

2427
01:34:49,520 --> 01:34:53,280
i'll put that on hold for a minute

2428
01:34:51,040 --> 01:34:56,239
because it's about time

2429
01:34:53,280 --> 01:34:58,480
that we start to consider whether or not

2430
01:34:56,239 --> 01:35:00,239
we adopt some drafts

2431
01:34:58,480 --> 01:35:03,199
so i guess the first question that i'd

2432
01:35:00,239 --> 01:35:06,638
like to get a sort of indication of

2433
01:35:03,199 --> 01:35:08,879
um maybe i can start

2434
01:35:06,639 --> 01:35:11,520
uh one of the show of hands things is

2435
01:35:08,880 --> 01:35:11,520
how many people

2436
01:35:12,000 --> 01:35:29,840
have read the uh the s frame

2437
01:35:15,280 --> 01:35:29,840
draft from amen

2438
01:35:33,040 --> 01:35:35,360
okay

2439
01:35:36,719 --> 01:35:41,760
that's reasonably good

2440
01:35:40,080 --> 01:35:44,639
give people a little bit more time to

2441
01:35:41,760 --> 01:35:44,639
find the tab

2442
01:35:54,639 --> 01:35:59,600
i need differential privacy for this one

2443
01:35:57,040 --> 01:35:59,600
okay

2444
01:36:01,760 --> 01:36:06,400
that's looking pretty good all right

2445
01:36:03,920 --> 01:36:11,840
that's a good number

2446
01:36:06,400 --> 01:36:11,839
and um

2447
01:36:12,000 --> 01:36:18,480
how many people have read the mls draft

2448
01:36:15,520 --> 01:36:19,760
i know that's very new but all of mls

2449
01:36:18,480 --> 01:36:21,678
are the mls keying draft

2450
01:36:19,760 --> 01:36:22,880
sorry do you mean that one is presenting

2451
01:36:21,679 --> 01:36:25,440
or do you mean the ms

2452
01:36:22,880 --> 01:36:27,119
yes this one that's been the one that

2453
01:36:25,440 --> 01:36:28,879
has just been presented

2454
01:36:27,119 --> 01:36:31,360
the very short draft that richard just

2455
01:36:28,880 --> 01:36:31,360
talked about

2456
01:36:37,440 --> 01:36:41,040
all right based on this it's probably a

2457
01:36:39,280 --> 01:36:44,880
little early to start

2458
01:36:41,040 --> 01:36:47,119
the consensus call for this

2459
01:36:44,880 --> 01:36:48,400
adopting of this particular draft but we

2460
01:36:47,119 --> 01:36:52,799
might want to talk

2461
01:36:48,400 --> 01:36:56,480
talk about the adoption of

2462
01:36:52,800 --> 01:36:58,719
the um the core s frame

2463
01:36:56,480 --> 01:37:00,320
draft realizing of course that this is

2464
01:36:58,719 --> 01:37:04,320
just a starting point

2465
01:37:00,320 --> 01:37:07,119
um if anyone has

2466
01:37:04,320 --> 01:37:07,599
any idea that they might want to propose

2467
01:37:07,119 --> 01:37:10,799
some

2468
01:37:07,600 --> 01:37:13,679
dramatically different approach

2469
01:37:10,800 --> 01:37:14,400
um now's a good time to speak because

2470
01:37:13,679 --> 01:37:18,560
i'm going to

2471
01:37:14,400 --> 01:37:21,519
ask people to raise their hands in favor

2472
01:37:18,560 --> 01:37:22,320
or against if you do not raise your hand

2473
01:37:21,520 --> 01:37:26,639
um

2474
01:37:22,320 --> 01:37:30,159
adoption of the uh draft amarra

2475
01:37:26,639 --> 01:37:32,159
s frame well martin just a gentle quick

2476
01:37:30,159 --> 01:37:33,920
point of order there is a request to

2477
01:37:32,159 --> 01:37:36,080
relay the results for the audio

2478
01:37:33,920 --> 01:37:36,719
recording for the first question have

2479
01:37:36,080 --> 01:37:40,320
you read us

2480
01:37:36,719 --> 01:37:41,199
frame out of 44 participants 16 raised

2481
01:37:40,320 --> 01:37:44,320
their hand

2482
01:37:41,199 --> 01:37:45,599
six did not for the second question have

2483
01:37:44,320 --> 01:37:48,000
you read the

2484
01:37:45,600 --> 01:37:49,119
short s frame mls draft that was just

2485
01:37:48,000 --> 01:37:51,760
presented

2486
01:37:49,119 --> 01:37:52,639
out of 44 participants four raised their

2487
01:37:51,760 --> 01:37:55,920
hand

2488
01:37:52,639 --> 01:37:59,520
18 did not thanks all right

2489
01:37:55,920 --> 01:38:02,159
thanks um so i'm going to start

2490
01:37:59,520 --> 01:38:03,119
a show of hands now while we're voting

2491
01:38:02,159 --> 01:38:06,400
again

2492
01:38:03,119 --> 01:38:10,159
um for adopt

2493
01:38:06,400 --> 01:38:11,759
adopting uh draft omara

2494
01:38:10,159 --> 01:38:13,440
s frame i'll have to get a better name

2495
01:38:11,760 --> 01:38:16,800
for that when the time comes because

2496
01:38:13,440 --> 01:38:19,519
it's a little bit uh a bit hard but

2497
01:38:16,800 --> 01:38:20,320
um if you if you think we should adopt

2498
01:38:19,520 --> 01:38:22,400
this draft

2499
01:38:20,320 --> 01:38:23,599
uh raise your hand if you think we

2500
01:38:22,400 --> 01:38:26,879
should not

2501
01:38:23,600 --> 01:38:28,560
do not raise your hand if you're

2502
01:38:26,880 --> 01:38:45,679
undecided

2503
01:38:28,560 --> 01:38:48,880
i suggest don't raise your hand

2504
01:38:45,679 --> 01:38:51,440
and ekka has something to say

2505
01:38:48,880 --> 01:38:53,119
which we can hear while people continue

2506
01:38:51,440 --> 01:38:55,919
to vote

2507
01:38:53,119 --> 01:38:55,920
press the wrong button

2508
01:38:56,840 --> 01:38:59,840
yep

2509
01:39:01,040 --> 01:39:04,239
certainly raised his hand there

2510
01:39:04,719 --> 01:39:13,040
she keeps doing that i thought i'd vote

2511
01:39:06,159 --> 01:39:14,559
it's fine

2512
01:39:13,040 --> 01:39:16,400
all right there there are three people

2513
01:39:14,560 --> 01:39:19,600
who think we

2514
01:39:16,400 --> 01:39:24,320
might not want to adopt this draft um

2515
01:39:19,600 --> 01:39:24,320
does any one of those people want to say

2516
01:39:24,840 --> 01:39:27,840
why

2517
01:39:31,920 --> 01:39:40,639
uh i see echo is are you raising your

2518
01:39:34,719 --> 01:39:43,920
hand because you want to talk

2519
01:39:40,639 --> 01:39:47,040
okay colin hi

2520
01:39:43,920 --> 01:39:49,360
um so i i i i'm assuming we will

2521
01:39:47,040 --> 01:39:51,280
eventually adopt this i i said no

2522
01:39:49,360 --> 01:39:53,360
because i want to better understand how

2523
01:39:51,280 --> 01:39:54,800
it interworks with rtp and all the

2524
01:39:53,360 --> 01:39:58,799
packetization

2525
01:39:54,800 --> 01:39:58,800
and get a handle on that first

2526
01:40:02,639 --> 01:40:09,840
that sounds reasonable anyone else

2527
01:40:06,840 --> 01:40:09,840
sergio

2528
01:40:20,840 --> 01:40:26,239
okay

2529
01:40:22,719 --> 01:40:28,800
well given the time does anyone

2530
01:40:26,239 --> 01:40:30,480
feel that they need to see another

2531
01:40:28,800 --> 01:40:31,920
presentation i

2532
01:40:30,480 --> 01:40:35,759
would have to take a few minutes to get

2533
01:40:31,920 --> 01:40:35,760
it so you have something to say

2534
01:40:49,360 --> 01:40:54,639
okay so what i suggest we do here is

2535
01:40:52,960 --> 01:40:57,679
we'll send around an email

2536
01:40:54,639 --> 01:40:58,320
um asking for confirmation and if people

2537
01:40:57,679 --> 01:41:02,320
want to make

2538
01:40:58,320 --> 01:41:04,639
uh arguments for maybe delaying a little

2539
01:41:02,320 --> 01:41:05,360
rather than accepting a zero zero draft

2540
01:41:04,639 --> 01:41:07,600
then

2541
01:41:05,360 --> 01:41:09,360
that is perfectly reasonable we should

2542
01:41:07,600 --> 01:41:11,440
we should discuss that

2543
01:41:09,360 --> 01:41:14,320
but uh the chairs will talk about that

2544
01:41:11,440 --> 01:41:18,480
and we'll see

2545
01:41:14,320 --> 01:41:18,480
whether the list agrees with with the

2546
01:41:18,960 --> 01:41:23,040
vague indications that there's support

2547
01:41:20,800 --> 01:41:27,520
for adopting this one

2548
01:41:23,040 --> 01:41:30,480
and um i'm going to try to find

2549
01:41:27,520 --> 01:41:33,840
dr alex's slides which is probably not

2550
01:41:30,480 --> 01:41:33,839
going to work out very well for me

2551
01:41:37,360 --> 01:41:47,839
oh great

2552
01:41:53,119 --> 01:41:57,199
dr alex would you like to speak to this

2553
01:41:55,040 --> 01:42:00,480
one

2554
01:41:57,199 --> 01:42:03,199
yes i'd like to can you hear me okay

2555
01:42:00,480 --> 01:42:05,759
you're a little quiet so let's pick up

2556
01:42:03,199 --> 01:42:05,759
can you hear me

2557
01:42:06,080 --> 01:42:12,880
yes indeed thank you all right great so

2558
01:42:09,520 --> 01:42:13,440
uh this is not a status report and i

2559
01:42:12,880 --> 01:42:16,960
didn't

2560
01:42:13,440 --> 01:42:19,119
write any code yet see that more as a

2561
01:42:16,960 --> 01:42:20,400
declaration of intent to work on on a

2562
01:42:19,119 --> 01:42:23,440
specific problem

2563
01:42:20,400 --> 01:42:26,239
and a use case but i think

2564
01:42:23,440 --> 01:42:27,599
sram could be applied to and provide a

2565
01:42:26,239 --> 01:42:29,360
good result

2566
01:42:27,600 --> 01:42:33,679
that is slightly different than video

2567
01:42:29,360 --> 01:42:33,679
conferencing uh next slide please

2568
01:42:34,400 --> 01:42:37,920
so um i took that from perk but i think

2569
01:42:36,800 --> 01:42:40,400
it applies to

2570
01:42:37,920 --> 01:42:42,400
to the video conferencing in general in

2571
01:42:40,400 --> 01:42:44,159
terms of trust model

2572
01:42:42,400 --> 01:42:45,839
the end point and the key distributor

2573
01:42:44,159 --> 01:42:48,000
are trusted

2574
01:42:45,840 --> 01:42:50,480
that everything else is actually not

2575
01:42:48,000 --> 01:42:55,040
trusted

2576
01:42:50,480 --> 01:42:55,040
next slide if you go into the

2577
01:42:55,280 --> 01:43:01,759
the streaming uh here again

2578
01:42:58,960 --> 01:43:03,760
the end cases are trusted with uh the

2579
01:43:01,760 --> 01:43:05,199
specific case of the web application

2580
01:43:03,760 --> 01:43:08,320
where the javascript

2581
01:43:05,199 --> 01:43:10,559
and the browser are respectively

2582
01:43:08,320 --> 01:43:12,400
entrusted and trusted

2583
01:43:10,560 --> 01:43:14,560
the the key management system is also

2584
01:43:12,400 --> 01:43:16,879
trusted but you also have a

2585
01:43:14,560 --> 01:43:18,080
quite a few other entities in in the

2586
01:43:16,880 --> 01:43:20,800
system

2587
01:43:18,080 --> 01:43:21,519
that are also trusted the ingest link is

2588
01:43:20,800 --> 01:43:23,679
trusted

2589
01:43:21,520 --> 01:43:25,280
until very recently everybody was

2590
01:43:23,679 --> 01:43:27,920
pushing to

2591
01:43:25,280 --> 01:43:29,920
youtube live twitch all of that using uh

2592
01:43:27,920 --> 01:43:32,480
straight rtmp

2593
01:43:29,920 --> 01:43:34,400
the media platform itself is trusted and

2594
01:43:32,480 --> 01:43:36,480
it actually needs raw access for

2595
01:43:34,400 --> 01:43:37,599
all kind of transcoding and chunking and

2596
01:43:36,480 --> 01:43:40,400
preparation of the

2597
01:43:37,600 --> 01:43:41,840
of the content only the delivery is then

2598
01:43:40,400 --> 01:43:44,400
encrypted

2599
01:43:41,840 --> 01:43:45,679
and the encryption is media transport

2600
01:43:44,400 --> 01:43:47,599
protocol specific

2601
01:43:45,679 --> 01:43:49,040
so it does not apply to any kind of

2602
01:43:47,600 --> 01:43:51,360
media

2603
01:43:49,040 --> 01:43:52,320
so that's the the difference in trust

2604
01:43:51,360 --> 01:43:54,320
model between

2605
01:43:52,320 --> 01:43:55,519
what we have in the video conferencing

2606
01:43:54,320 --> 01:43:59,840
and what the

2607
01:43:55,520 --> 01:43:59,840
streaming people have so next slide

2608
01:44:00,960 --> 01:44:05,679
in the specific case of web application

2609
01:44:03,280 --> 01:44:07,519
this is becoming even more complicated

2610
01:44:05,679 --> 01:44:08,960
so i'm not going to go into this slide

2611
01:44:07,520 --> 01:44:12,560
which is the full slide from the

2612
01:44:08,960 --> 01:44:15,119
encrypted media extension for browsers

2613
01:44:12,560 --> 01:44:16,480
next slide i'm going to use a simplified

2614
01:44:15,119 --> 01:44:18,799
one

2615
01:44:16,480 --> 01:44:20,000
so this is the simplified one where you

2616
01:44:18,800 --> 01:44:24,480
would have the browser

2617
01:44:20,000 --> 01:44:27,760
or actually a native native app as well

2618
01:44:24,480 --> 01:44:30,239
think apple tv or android tv or samsung

2619
01:44:27,760 --> 01:44:32,800
tv whatever your poison is

2620
01:44:30,239 --> 01:44:34,879
and you see here that already you have

2621
01:44:32,800 --> 01:44:36,239
assumption about the fact that you have

2622
01:44:34,880 --> 01:44:39,280
storage

2623
01:44:36,239 --> 01:44:43,040
and that's the delivery protocol will be

2624
01:44:39,280 --> 01:44:46,559
the dash or hls but globally

2625
01:44:43,040 --> 01:44:50,000
you have a secondary encryption with

2626
01:44:46,560 --> 01:44:54,159
an external a key management service

2627
01:44:50,000 --> 01:44:56,239
so usually people use play ready wifi

2628
01:44:54,159 --> 01:44:58,239
there are quite a few fair play

2629
01:44:56,239 --> 01:45:00,320
depending on

2630
01:44:58,239 --> 01:45:01,839
whose provider and who you're targeting

2631
01:45:00,320 --> 01:45:03,840
you have a different key management

2632
01:45:01,840 --> 01:45:06,480
system but the concept stays the same

2633
01:45:03,840 --> 01:45:06,480
next slide

2634
01:45:06,880 --> 01:45:10,800
the problem is this apart from the

2635
01:45:09,280 --> 01:45:12,639
delivery itself

2636
01:45:10,800 --> 01:45:14,719
everything else almost needs to be

2637
01:45:12,639 --> 01:45:18,800
trusted in this model

2638
01:45:14,719 --> 01:45:22,159
next slide so it raised the question

2639
01:45:18,800 --> 01:45:24,159
so even though some of the assumptions

2640
01:45:22,159 --> 01:45:25,839
that were used when do streaming

2641
01:45:24,159 --> 01:45:26,480
technology what you've got have changed

2642
01:45:25,840 --> 01:45:28,080
a little bit

2643
01:45:26,480 --> 01:45:29,678
for example the ingest link is not

2644
01:45:28,080 --> 01:45:30,000
trusted anymore we see more people

2645
01:45:29,679 --> 01:45:33,440
moving

2646
01:45:30,000 --> 01:45:35,679
to our tmps is still required to have

2647
01:45:33,440 --> 01:45:36,559
the capacity to transcoding to the media

2648
01:45:35,679 --> 01:45:38,400
server

2649
01:45:36,560 --> 01:45:40,800
which precludes the use of end-to-end

2650
01:45:38,400 --> 01:45:43,040
encryption

2651
01:45:40,800 --> 01:45:44,239
actually there is an alternative to

2652
01:45:43,040 --> 01:45:48,159
transcoding or to

2653
01:45:44,239 --> 01:45:50,559
avr is to do that operation

2654
01:45:48,159 --> 01:45:51,280
on the sender side by using simulcastle

2655
01:45:50,560 --> 01:45:54,400
svc

2656
01:45:51,280 --> 01:45:57,599
which a lot of the video conferencing or

2657
01:45:54,400 --> 01:45:59,599
broadcasting real time system used today

2658
01:45:57,600 --> 01:46:01,840
where all the media manipulation and

2659
01:45:59,600 --> 01:46:05,119
coding and encryption is done send aside

2660
01:46:01,840 --> 01:46:06,400
and then your infrastructure is mainly

2661
01:46:05,119 --> 01:46:09,519
made out of

2662
01:46:06,400 --> 01:46:12,400
sfus so question number one

2663
01:46:09,520 --> 01:46:15,280
if i do not trust the platform and want

2664
01:46:12,400 --> 01:46:17,519
to use my own keys or can i do

2665
01:46:15,280 --> 01:46:19,840
question two if i would like to use the

2666
01:46:17,520 --> 01:46:21,920
current drm infrastructure or at least

2667
01:46:19,840 --> 01:46:23,600
the key management system there

2668
01:46:21,920 --> 01:46:26,400
with a different media transport than

2669
01:46:23,600 --> 01:46:29,360
hls mac dash like webrtc

2670
01:46:26,400 --> 01:46:30,400
would it be feasible at all so i think

2671
01:46:29,360 --> 01:46:33,040
with this frame

2672
01:46:30,400 --> 01:46:34,559
given that we separate the media

2673
01:46:33,040 --> 01:46:36,639
encryption itself from the key

2674
01:46:34,560 --> 01:46:40,960
management and so on there might be

2675
01:46:36,639 --> 01:46:43,360
some opportunity to bridge the gap

2676
01:46:40,960 --> 01:46:44,320
right and allow something that is a

2677
01:46:43,360 --> 01:46:47,119
little bit smarter

2678
01:46:44,320 --> 01:46:48,080
especially for broadcasting

2679
01:46:47,119 --> 01:46:50,559
infrastructure

2680
01:46:48,080 --> 01:46:51,519
that deal with real time content and not

2681
01:46:50,560 --> 01:46:53,199
video on demand

2682
01:46:51,520 --> 01:46:55,280
i believe that video on demand is pretty

2683
01:46:53,199 --> 01:46:56,480
well served with the technology there is

2684
01:46:55,280 --> 01:46:59,440
today

2685
01:46:56,480 --> 01:47:01,599
but uh the boundary between video on

2686
01:46:59,440 --> 01:47:03,678
demand and real time

2687
01:47:01,600 --> 01:47:05,440
with people being stuck at home and

2688
01:47:03,679 --> 01:47:09,840
wanting to participate

2689
01:47:05,440 --> 01:47:09,839
interactively with with media

2690
01:47:10,080 --> 01:47:14,719
so i think that question becomes

2691
01:47:11,520 --> 01:47:14,719
interesting next slide

2692
01:47:15,600 --> 01:47:18,800
so if you that's that's the last slide

2693
01:47:17,760 --> 01:47:20,880
and again

2694
01:47:18,800 --> 01:47:22,800
on top you can see that the only thing

2695
01:47:20,880 --> 01:47:24,880
that is trusted is the ingest

2696
01:47:22,800 --> 01:47:26,880
link because you're using a transport

2697
01:47:24,880 --> 01:47:30,400
layer encryption

2698
01:47:26,880 --> 01:47:32,480
and then the uh delivery at the end

2699
01:47:30,400 --> 01:47:34,320
and the key management system that the

2700
01:47:32,480 --> 01:47:36,400
encryption is happening between the

2701
01:47:34,320 --> 01:47:40,000
streaming endpoint

2702
01:47:36,400 --> 01:47:42,480
and and the player itself with sram and

2703
01:47:40,000 --> 01:47:45,280
end-to-end encryption we could have the

2704
01:47:42,480 --> 01:47:47,919
capacity

2705
01:47:45,280 --> 01:47:49,119
we could have the capacity to not have

2706
01:47:47,920 --> 01:47:52,239
to trust

2707
01:47:49,119 --> 01:47:52,960
uh the platform we sending the the media

2708
01:47:52,239 --> 01:47:55,519
to

2709
01:47:52,960 --> 01:47:56,719
right and uh there's there's quite a lot

2710
01:47:55,520 --> 01:47:58,960
of demand there

2711
01:47:56,719 --> 01:47:59,920
so the question is can we avoid to do

2712
01:47:58,960 --> 01:48:02,400
that in

2713
01:47:59,920 --> 01:48:03,440
a specific manner and can we try to

2714
01:48:02,400 --> 01:48:05,839
unify

2715
01:48:03,440 --> 01:48:08,799
it looks like there is opportunity to

2716
01:48:05,840 --> 01:48:10,639
unify the top one and the bottom one

2717
01:48:08,800 --> 01:48:12,800
so we're going to spend some time

2718
01:48:10,639 --> 01:48:14,480
investigating this and if anybody is

2719
01:48:12,800 --> 01:48:17,119
interested in the same question

2720
01:48:14,480 --> 01:48:19,360
that that's an opening for anybody to

2721
01:48:17,119 --> 01:48:21,759
come with us and join in

2722
01:48:19,360 --> 01:48:23,360
and participate in the investigation at

2723
01:48:21,760 --> 01:48:26,159
this point

2724
01:48:23,360 --> 01:48:26,719
i see another interest for the sram

2725
01:48:26,159 --> 01:48:29,759
group

2726
01:48:26,719 --> 01:48:31,600
is that the scalability model and the

2727
01:48:29,760 --> 01:48:33,679
trust model being different we would

2728
01:48:31,600 --> 01:48:34,000
have two different usage of this frame

2729
01:48:33,679 --> 01:48:37,280
and

2730
01:48:34,000 --> 01:48:38,320
we would be sure that um s frame is

2731
01:48:37,280 --> 01:48:42,639
really

2732
01:48:38,320 --> 01:48:43,199
um agnostic to the use case and that we

2733
01:48:42,639 --> 01:48:44,960
said

2734
01:48:43,199 --> 01:48:47,759
we got the right boundary around the

2735
01:48:44,960 --> 01:48:50,800
media encryption and we're not being

2736
01:48:47,760 --> 01:48:53,119
biased by using any kind of key

2737
01:48:50,800 --> 01:48:54,480
mechanism or key management mechanism on

2738
01:48:53,119 --> 01:48:58,000
this case

2739
01:48:54,480 --> 01:49:00,638
another problem so next slide please

2740
01:48:58,000 --> 01:49:02,159
another problem in specific to uh to

2741
01:49:00,639 --> 01:49:03,760
streaming is sometimes you can have a

2742
01:49:02,159 --> 01:49:06,559
single source and

2743
01:49:03,760 --> 01:49:07,600
two to ten million of viewers and so

2744
01:49:06,560 --> 01:49:10,639
there are some

2745
01:49:07,600 --> 01:49:13,360
uh limit to some of the key

2746
01:49:10,639 --> 01:49:15,040
scheme and key rotation scheme that have

2747
01:49:13,360 --> 01:49:19,119
not been designed

2748
01:49:15,040 --> 01:49:22,480
not only for the one to n so we saw that

2749
01:49:19,119 --> 01:49:22,960
uh richard was speaking about one to one

2750
01:49:22,480 --> 01:49:25,040
scheme

2751
01:49:22,960 --> 01:49:26,239
and separately end to end now we're

2752
01:49:25,040 --> 01:49:30,560
speaking about one to

2753
01:49:26,239 --> 01:49:32,400
n with n being very very large

2754
01:49:30,560 --> 01:49:35,040
i'm not sure there is anything specific

2755
01:49:32,400 --> 01:49:37,360
that has been done to make sure that

2756
01:49:35,040 --> 01:49:39,119
we can generate that mini key or even if

2757
01:49:37,360 --> 01:49:43,839
we need to

2758
01:49:39,119 --> 01:49:43,839
that's about it

2759
01:49:43,920 --> 01:49:48,400
okay any questions

2760
01:49:51,679 --> 01:49:56,800
tim yeah i think this is

2761
01:49:55,199 --> 01:49:58,559
this is interesting i think i think

2762
01:49:56,800 --> 01:50:01,360
there's the one to end

2763
01:49:58,560 --> 01:50:03,280
there's also a one to n where n is a

2764
01:50:01,360 --> 01:50:06,559
relatively small number

2765
01:50:03,280 --> 01:50:08,080
and i think so kind of extending that

2766
01:50:06,560 --> 01:50:08,560
somewhat and i think there's one other

2767
01:50:08,080 --> 01:50:12,320
thing which

2768
01:50:08,560 --> 01:50:14,480
is potentially kind of

2769
01:50:12,320 --> 01:50:15,920
stored ish media there's some

2770
01:50:14,480 --> 01:50:18,799
interesting stuff in

2771
01:50:15,920 --> 01:50:20,560
in that space um but i think the key

2772
01:50:18,800 --> 01:50:22,960
thing that we're missing here

2773
01:50:20,560 --> 01:50:24,080
and we i haven't heard yet is that

2774
01:50:22,960 --> 01:50:25,760
actually it's not

2775
01:50:24,080 --> 01:50:27,599
in a lot of use cases you're not

2776
01:50:25,760 --> 01:50:30,880
actually worried about trust we're

2777
01:50:27,599 --> 01:50:32,800
interested in deniability the the

2778
01:50:30,880 --> 01:50:34,080
service provider wants to be able to say

2779
01:50:32,800 --> 01:50:37,360
that they haven't seen your

2780
01:50:34,080 --> 01:50:38,320
the pictures of your baby um or or that

2781
01:50:37,360 --> 01:50:41,119
they

2782
01:50:38,320 --> 01:50:42,719
that they have no access to that to your

2783
01:50:41,119 --> 01:50:44,719
your board discussion

2784
01:50:42,719 --> 01:50:46,719
um and so it's actually it's about

2785
01:50:44,719 --> 01:50:52,560
plausible deniability rather than

2786
01:50:46,719 --> 01:50:55,040
actual trust per se

2787
01:50:52,560 --> 01:50:57,119
now that's a good point um i think there

2788
01:50:55,040 --> 01:50:59,920
is interest for the platform also to be

2789
01:50:57,119 --> 01:51:01,679
able to say uh you know even if the

2790
01:50:59,920 --> 01:51:02,639
government asked me to give them access

2791
01:51:01,679 --> 01:51:04,800
to your data

2792
01:51:02,639 --> 01:51:06,080
i wouldn't be able to because i do not

2793
01:51:04,800 --> 01:51:08,560
have access to the data

2794
01:51:06,080 --> 01:51:11,599
i mean there are incentives for all the

2795
01:51:08,560 --> 01:51:11,599
parties in the chain

2796
01:51:16,320 --> 01:51:19,679
so team would you be interested in

2797
01:51:17,760 --> 01:51:20,639
working on the on the matter or at least

2798
01:51:19,679 --> 01:51:23,760
you know

2799
01:51:20,639 --> 01:51:25,280
play along and have a skeptical critical

2800
01:51:23,760 --> 01:51:28,159
eye on whatever we're gonna

2801
01:51:25,280 --> 01:51:28,960
we're gonna come up with so so i'm i'm

2802
01:51:28,159 --> 01:51:32,719
interested

2803
01:51:28,960 --> 01:51:34,320
uh in um in following along i think my

2804
01:51:32,719 --> 01:51:36,719
use case is

2805
01:51:34,320 --> 01:51:37,519
much smaller than yours i'm like where

2806
01:51:36,719 --> 01:51:40,239
for me

2807
01:51:37,520 --> 01:51:41,679
n is 10 typically and i think the other

2808
01:51:40,239 --> 01:51:44,239
differentiator which probably doesn't

2809
01:51:41,679 --> 01:51:46,639
make any difference but the end point

2810
01:51:44,239 --> 01:51:47,598
is probably a lot smaller like the

2811
01:51:46,639 --> 01:51:49,599
ingestion

2812
01:51:47,599 --> 01:51:51,199
is probably a lot smaller for me but

2813
01:51:49,599 --> 01:51:53,520
yeah i'll play along

2814
01:51:51,199 --> 01:51:55,199
okay what we see in practice is when n

2815
01:51:53,520 --> 01:51:57,199
is less than one thousand

2816
01:51:55,199 --> 01:51:58,960
you're more or less in a glorified video

2817
01:51:57,199 --> 01:52:01,519
conferencing mode

2818
01:51:58,960 --> 01:52:04,960
uh that's when n becomes bigger than

2819
01:52:01,520 --> 01:52:08,239
1000 or 50 000 in some specific case

2820
01:52:04,960 --> 01:52:11,360
m s that you have some

2821
01:52:08,239 --> 01:52:13,280
difficulties that i do not have a

2822
01:52:11,360 --> 01:52:17,839
practical solution to the end that would

2823
01:52:13,280 --> 01:52:17,840
require additional work

2824
01:52:20,000 --> 01:52:26,159
anyway thank you for your time

2825
01:52:23,119 --> 01:52:26,159
uh james

2826
01:52:26,880 --> 01:52:31,840
uh am i horrible no

2827
01:52:34,080 --> 01:52:37,440
thank you you've always wanted to do

2828
01:52:35,440 --> 01:52:40,638
that

2829
01:52:37,440 --> 01:52:42,080
i'm interested uh in in at least

2830
01:52:40,639 --> 01:52:45,679
observing this work

2831
01:52:42,080 --> 01:52:49,599
i'm unclear of what the benefits are to

2832
01:52:45,679 --> 01:52:51,840
uh doing encryption all the way back to

2833
01:52:49,599 --> 01:52:53,520
the studio or the camera particularly

2834
01:52:51,840 --> 01:52:56,800
when we're talking about

2835
01:52:53,520 --> 01:53:00,000
n equals millions or where

2836
01:52:56,800 --> 01:53:02,000
the kinds of content are

2837
01:53:00,000 --> 01:53:04,320
effectively public domain where it's

2838
01:53:02,000 --> 01:53:08,320
it's it's it's

2839
01:53:04,320 --> 01:53:08,320
the content of which doesn't require any

2840
01:53:10,840 --> 01:53:13,840
confidentiality

2841
01:53:14,000 --> 01:53:18,400
content doesn't need to be secure and

2842
01:53:16,000 --> 01:53:22,800
doesn't need to be confidential

2843
01:53:18,400 --> 01:53:26,480
the biggest example i have in mind is

2844
01:53:22,800 --> 01:53:28,880
public debate or auction houses that

2845
01:53:26,480 --> 01:53:31,119
have a lot of participants

2846
01:53:28,880 --> 01:53:33,280
this work doesn't apply but there are

2847
01:53:31,119 --> 01:53:37,920
still quite a few use case

2848
01:53:33,280 --> 01:53:41,599
where you would like to unify

2849
01:53:37,920 --> 01:53:44,159
you high latency and low latencies

2850
01:53:41,599 --> 01:53:46,000
encryption solution and advertisements i

2851
01:53:44,159 --> 01:53:47,360
didn't touch on it but advertisement is

2852
01:53:46,000 --> 01:53:51,440
also a

2853
01:53:47,360 --> 01:53:54,559
case that is problematic in that context

2854
01:53:51,440 --> 01:53:59,360
and there are some other cases where

2855
01:53:54,560 --> 01:54:01,280
let's say uhbo and you want to

2856
01:53:59,360 --> 01:54:03,040
do the equivalent of game of thrones or

2857
01:54:01,280 --> 01:54:05,360
the super bowl will be a better example

2858
01:54:03,040 --> 01:54:08,320
because it's live content right

2859
01:54:05,360 --> 01:54:08,880
and you do not want to trust any single

2860
01:54:08,320 --> 01:54:10,880
platform

2861
01:54:08,880 --> 01:54:12,719
actually you want to have two three four

2862
01:54:10,880 --> 01:54:14,719
of them for redundancy

2863
01:54:12,719 --> 01:54:16,239
but you still need to want to control

2864
01:54:14,719 --> 01:54:18,320
the access yourself

2865
01:54:16,239 --> 01:54:20,400
and so basically that secondary key

2866
01:54:18,320 --> 01:54:21,360
because become the token people buy the

2867
01:54:20,400 --> 01:54:24,159
token to

2868
01:54:21,360 --> 01:54:24,480
to pay-per-view if you want and through

2869
01:54:24,159 --> 01:54:27,519
that

2870
01:54:24,480 --> 01:54:28,959
encryption system and that puts the the

2871
01:54:27,520 --> 01:54:31,440
access and the encryption

2872
01:54:28,960 --> 01:54:34,840
in the end of the content generation and

2873
01:54:31,440 --> 01:54:37,839
not the distribution platform

2874
01:54:34,840 --> 01:54:37,840
anymore

2875
01:54:41,040 --> 01:54:44,639
okay well i'm going to suggest that we

2876
01:54:42,639 --> 01:54:47,599
uh we wrap this up

2877
01:54:44,639 --> 01:54:49,119
uh is there any other business that some

2878
01:54:47,599 --> 01:54:52,639
anyone would like to

2879
01:54:49,119 --> 01:54:52,639
bring up in our last five minutes

2880
01:54:56,880 --> 01:54:59,360
lauren

2881
01:55:01,199 --> 01:55:05,280
i'm going to share this i was going to

2882
01:55:02,639 --> 01:55:07,280
share this um in chat just now but um

2883
01:55:05,280 --> 01:55:08,320
there's another uh i don't know if this

2884
01:55:07,280 --> 01:55:10,800
is necessarily in scope

2885
01:55:08,320 --> 01:55:11,599
um but there's a project that is doing

2886
01:55:10,800 --> 01:55:14,800
um

2887
01:55:11,599 --> 01:55:17,360
peer-to-peer video conferencing um

2888
01:55:14,800 --> 01:55:18,000
and i wanted to i guess just at least

2889
01:55:17,360 --> 01:55:21,199
make people aware

2890
01:55:18,000 --> 01:55:23,360
of um that use case working um

2891
01:55:21,199 --> 01:55:24,638
it can swap between direct appearing and

2892
01:55:23,360 --> 01:55:28,400
using an sfu

2893
01:55:24,639 --> 01:55:29,520
if uh just for scaling properties or as

2894
01:55:28,400 --> 01:55:32,159
chosen by participants

2895
01:55:29,520 --> 01:55:33,280
through configuration um anyway it just

2896
01:55:32,159 --> 01:55:34,159
seems like something that could be

2897
01:55:33,280 --> 01:55:36,800
related and

2898
01:55:34,159 --> 01:55:36,799
should be something to do

2899
01:55:44,719 --> 01:55:48,080
well thank you all for attending in the

2900
01:55:47,040 --> 01:55:50,080
good discussion

2901
01:55:48,080 --> 01:55:51,840
we will follow up on a couple of issues

2902
01:55:50,080 --> 01:55:54,239
on the mailing list

2903
01:55:51,840 --> 01:55:55,040
and uh continue the discussion on those

2904
01:55:54,239 --> 01:55:57,678
drafts

2905
01:55:55,040 --> 01:55:59,599
thank you very much and uh good night

2906
01:55:57,679 --> 01:56:03,440
good morning good evening

2907
01:55:59,599 --> 01:56:03,440
whatever it happens to be where you are

2908
01:56:04,960 --> 01:56:15,840
thanks everybody

2909
01:57:08,840 --> 01:57:11,840
hello

2910
01:57:44,760 --> 01:57:47,760
hello

