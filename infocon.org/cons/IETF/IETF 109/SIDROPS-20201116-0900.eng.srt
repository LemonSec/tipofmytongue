1
00:00:56,640 --> 00:00:59,520
i think for the

2
00:00:57,760 --> 00:01:01,760
people that are presenting george

3
00:00:59,520 --> 00:01:04,720
alexander and

4
00:01:01,760 --> 00:01:07,439
tim i think uh it'd be good if you guys

5
00:01:04,720 --> 00:01:07,439
could make sure

6
00:01:08,000 --> 00:01:12,159
that your audio is working so maybe has

7
00:01:10,240 --> 00:01:15,520
to do some audio

8
00:01:12,159 --> 00:01:15,520
make sure you can speak and be heard

9
00:01:17,439 --> 00:01:24,479
you're very quiet alexander um

10
00:01:21,040 --> 00:01:41,840
i'll try to check it okay

11
00:01:24,479 --> 00:01:41,840
it could be me too let me try

12
00:01:43,600 --> 00:01:48,000
a little better yeah that's good okay

13
00:01:50,960 --> 00:01:57,360
i quick question about this setup am

14
00:01:54,079 --> 00:01:59,039
i going to share my screen or you will

15
00:01:57,360 --> 00:02:01,680
be sharing your screen and i will be

16
00:01:59,040 --> 00:02:04,000
asking next slide please

17
00:02:01,680 --> 00:02:06,840
um if you want to do yours then why

18
00:02:04,000 --> 00:02:09,840
don't we try doing that now

19
00:02:06,840 --> 00:02:09,840
okay

20
00:02:25,360 --> 00:02:31,599
is it working looks like it's working

21
00:02:28,800 --> 00:02:32,400
great awesome so then we can yeah just

22
00:02:31,599 --> 00:02:35,119
have you

23
00:02:32,400 --> 00:02:36,640
um do your presentation when the time

24
00:02:35,120 --> 00:02:38,239
comes

25
00:02:36,640 --> 00:02:40,958
and i can take i can take care of

26
00:02:38,239 --> 00:02:40,959
everyone else's or

27
00:02:42,720 --> 00:02:51,840
yes randy

28
00:02:52,879 --> 00:02:58,239
all right two minutes over time to go

29
00:03:02,239 --> 00:03:09,040
i was just saying his screen worked

30
00:03:05,680 --> 00:03:09,040
ah thank you good

31
00:03:09,120 --> 00:03:15,519
okay hopefully my screen is presenting

32
00:03:12,560 --> 00:03:16,000
looks like it's working to me at least

33
00:03:15,519 --> 00:03:18,800
uh

34
00:03:16,000 --> 00:03:19,540
if there's any questions or problems

35
00:03:18,800 --> 00:03:22,660
let's

36
00:03:19,540 --> 00:03:22,660
[Music]

37
00:03:23,360 --> 00:03:26,720
make sure that they show up in the chat

38
00:03:26,159 --> 00:03:30,159
okay

39
00:03:26,720 --> 00:03:32,159
so this is a idea of 109

40
00:03:30,159 --> 00:03:33,679
and the cider ops meeting at itf 109

41
00:03:32,159 --> 00:03:37,440
welcome to bangkok

42
00:03:33,680 --> 00:03:40,319
sort of at least bangkok time

43
00:03:37,440 --> 00:03:42,560
uh i'm chris there's keor and natalie as

44
00:03:40,319 --> 00:03:42,560
well

45
00:03:43,200 --> 00:03:47,359
uh i'm sure you've of course in this

46
00:03:46,080 --> 00:03:50,159
meeting already read the

47
00:03:47,360 --> 00:03:50,640
note well all the materials are posted

48
00:03:50,159 --> 00:03:54,640
to the

49
00:03:50,640 --> 00:03:58,000
materials page and

50
00:03:54,640 --> 00:04:00,879
um ideally we'll have a

51
00:03:58,000 --> 00:04:03,040
jabra scribe and a notes taking person

52
00:04:00,879 --> 00:04:05,439
which we'll

53
00:04:03,040 --> 00:04:08,400
pause here to collect so does somebody

54
00:04:05,439 --> 00:04:08,400
want to jab prescribe

55
00:04:12,640 --> 00:04:16,399
ah okay natalie's doing the jabber

56
00:04:18,399 --> 00:04:22,320
oh warren do you want to take notes oh

57
00:04:21,120 --> 00:04:25,360
actually hang on

58
00:04:22,320 --> 00:04:29,840
natalie says she's on i'll do jabber

59
00:04:25,360 --> 00:04:29,840
someone else can do notes

60
00:04:33,120 --> 00:04:36,320
okay jeff is saying maybe we don't even

61
00:04:34,560 --> 00:04:37,520
have to do jabber because we do it in

62
00:04:36,320 --> 00:04:42,960
the chat panel

63
00:04:37,520 --> 00:04:45,758
that's why i often oh smart alec

64
00:04:42,960 --> 00:04:45,758
okay so now

65
00:04:48,080 --> 00:04:51,120
i don't know how this chat thing works

66
00:04:49,440 --> 00:04:53,150
so many chat applications these days

67
00:04:51,120 --> 00:04:55,280
okay i'm going back to friendster so um

68
00:04:53,150 --> 00:04:57,758
[Music]

69
00:04:55,280 --> 00:04:59,359
uh it looks like natalie and and uh k

70
00:04:57,759 --> 00:05:02,880
are going to take care of notes

71
00:04:59,360 --> 00:05:06,000
so off we go uh the agenda

72
00:05:02,880 --> 00:05:06,960
is these three items uh alexander then

73
00:05:06,000 --> 00:05:11,120
tim

74
00:05:06,960 --> 00:05:13,520
and then george and we're done we have

75
00:05:11,120 --> 00:05:14,960
um we have some spare time so if we have

76
00:05:13,520 --> 00:05:15,440
a discussion about other topics we want

77
00:05:14,960 --> 00:05:17,120
to just

78
00:05:15,440 --> 00:05:19,199
we wanted to cover we could do that in

79
00:05:17,120 --> 00:05:21,039
other business at the end

80
00:05:19,199 --> 00:05:22,240
i think other than that it's time for

81
00:05:21,039 --> 00:05:25,840
alexander

82
00:05:22,240 --> 00:05:25,840
unless there's any questions

83
00:05:28,080 --> 00:05:31,520
okay i'm gonna stop sharing and

84
00:05:29,600 --> 00:05:34,000
alexander why don't you share your

85
00:05:31,520 --> 00:05:34,000
screen

86
00:05:35,280 --> 00:05:39,840
oh sorry tim do you have a question

87
00:05:42,240 --> 00:05:45,520
if so we can't hear you yeah can you

88
00:05:44,240 --> 00:05:48,240
hear me now

89
00:05:45,520 --> 00:05:50,240
yes go ahead so i saw my name on the

90
00:05:48,240 --> 00:05:53,919
agenda but i don't remember

91
00:05:50,240 --> 00:05:56,639
asking for uh a present

92
00:05:53,919 --> 00:05:56,639
for consultation

93
00:05:57,520 --> 00:06:02,960
uh okay well

94
00:06:00,800 --> 00:06:05,520
we have some slides that maybe they're

95
00:06:02,960 --> 00:06:05,520
not from you

96
00:06:05,600 --> 00:06:10,560
let me see what the slides look like but

97
00:06:08,800 --> 00:06:13,039
perhaps uh george wanted to say

98
00:06:10,560 --> 00:06:18,000
something about it

99
00:06:13,039 --> 00:06:21,840
those slides are from me ah okay sorry i

100
00:06:18,000 --> 00:06:21,840
i'll change the agenda up

101
00:06:22,000 --> 00:06:29,360
okay so not tim george but right now

102
00:06:25,919 --> 00:06:31,758
alexander so

103
00:06:29,360 --> 00:06:32,479
and i'll change up the i'll change up

104
00:06:31,759 --> 00:06:35,840
the slides

105
00:06:32,479 --> 00:06:35,840
while we're chatting thanks

106
00:06:44,000 --> 00:06:50,960
so do you hear me do you see me

107
00:06:47,440 --> 00:06:53,440
i hope so yes

108
00:06:50,960 --> 00:06:54,239
hi everyone i'm alexander azimov from

109
00:06:53,440 --> 00:06:58,160
yandex

110
00:06:54,240 --> 00:07:01,599
and here is an update for

111
00:06:58,160 --> 00:07:04,800
asp drafts uh

112
00:07:01,599 --> 00:07:05,599
first slide so i'm going to discuss some

113
00:07:04,800 --> 00:07:09,280
small but

114
00:07:05,599 --> 00:07:10,159
important changes in the draft related

115
00:07:09,280 --> 00:07:14,239
to asp

116
00:07:10,160 --> 00:07:17,280
object profile so previously

117
00:07:14,240 --> 00:07:18,160
we had a good idea when we changed the

118
00:07:17,280 --> 00:07:21,280
profile from

119
00:07:18,160 --> 00:07:23,840
a pair where we had a customer

120
00:07:21,280 --> 00:07:24,719
uh uh autonomous system and provider

121
00:07:23,840 --> 00:07:28,080
turn system

122
00:07:24,720 --> 00:07:28,880
to a map where we have custom autonomous

123
00:07:28,080 --> 00:07:33,359
system

124
00:07:28,880 --> 00:07:36,240
and a set of providers

125
00:07:33,360 --> 00:07:37,680
at the very at the same moment i added a

126
00:07:36,240 --> 00:07:41,759
statement to the draft

127
00:07:37,680 --> 00:07:45,520
that there must exist only single

128
00:07:41,759 --> 00:07:49,199
asp record pair out on the system

129
00:07:45,520 --> 00:07:51,840
and this statement was not that good

130
00:07:49,199 --> 00:07:52,639
because first of all it was not very

131
00:07:51,840 --> 00:07:55,599
realistic

132
00:07:52,639 --> 00:07:57,440
because at the moment of object transfer

133
00:07:55,599 --> 00:08:00,639
you have a problem

134
00:07:57,440 --> 00:08:03,759
so the rewarding have been changed

135
00:08:00,639 --> 00:08:07,360
and now uh the draft

136
00:08:03,759 --> 00:08:08,319
says that it should be a single project

137
00:08:07,360 --> 00:08:12,160
or a

138
00:08:08,319 --> 00:08:12,800
single object in every uh not in every

139
00:08:12,160 --> 00:08:16,319
but

140
00:08:12,800 --> 00:08:17,280
in in the selected registry and the

141
00:08:16,319 --> 00:08:20,879
registry

142
00:08:17,280 --> 00:08:24,000
should enforce that uh there is

143
00:08:20,879 --> 00:08:27,280
a single object for a peritoneum system

144
00:08:24,000 --> 00:08:30,720
in the address family uh

145
00:08:27,280 --> 00:08:34,240
and the second part is that the

146
00:08:30,720 --> 00:08:34,240
draft also says that

147
00:08:35,200 --> 00:08:38,240
if there are multiple records in

148
00:08:37,440 --> 00:08:41,440
different

149
00:08:38,240 --> 00:08:44,560
registries uh each the the

150
00:08:41,440 --> 00:08:45,040
the object should be just the same so

151
00:08:44,560 --> 00:08:48,319
it's

152
00:08:45,040 --> 00:08:51,040
rather simple but it uh

153
00:08:48,320 --> 00:08:52,839
solves uh the issue that was in the

154
00:08:51,040 --> 00:08:55,279
previous version

155
00:08:52,839 --> 00:08:55,279
and uh

156
00:08:56,640 --> 00:09:02,560
uh it doesn't

157
00:08:59,680 --> 00:09:04,399
we will still be able to avoid raw like

158
00:09:02,560 --> 00:09:07,920
synchronization issues plus

159
00:09:04,399 --> 00:09:12,320
there will be no security flaws uh

160
00:09:07,920 --> 00:09:15,839
at the state of object transfer

161
00:09:12,320 --> 00:09:18,959
so we are going back to

162
00:09:15,839 --> 00:09:20,640
a raw like verification pair

163
00:09:18,959 --> 00:09:23,760
verification process

164
00:09:20,640 --> 00:09:25,920
so we're retrieving

165
00:09:23,760 --> 00:09:27,120
cryptographically valid a space

166
00:09:25,920 --> 00:09:30,399
selecting its values

167
00:09:27,120 --> 00:09:32,240
create a set of candidate providers

168
00:09:30,399 --> 00:09:34,240
and after that with this set we are

169
00:09:32,240 --> 00:09:35,680
checking if the second atom system is

170
00:09:34,240 --> 00:09:38,720
present in this set

171
00:09:35,680 --> 00:09:40,000
if it is present it's valid if it's not

172
00:09:38,720 --> 00:09:42,640
present it's in

173
00:09:40,000 --> 00:09:43,519
invalid and of course is the set is

174
00:09:42,640 --> 00:09:45,760
empty

175
00:09:43,519 --> 00:09:46,560
uh we are not able to provide a proper

176
00:09:45,760 --> 00:09:50,080
check so the

177
00:09:46,560 --> 00:09:53,920
outcome is unknown i hope

178
00:09:50,080 --> 00:09:53,920
this part is rather simple

179
00:09:54,640 --> 00:09:58,640
second part is about uh verification

180
00:09:57,760 --> 00:10:01,760
procedures

181
00:09:58,640 --> 00:10:05,040
and we have two

182
00:10:01,760 --> 00:10:07,120
verification procedures one for

183
00:10:05,040 --> 00:10:08,640
prefixes that are received from

184
00:10:07,120 --> 00:10:11,760
customers peers

185
00:10:08,640 --> 00:10:14,240
and errors clients and the second one

186
00:10:11,760 --> 00:10:15,760
for the prefixes that are received from

187
00:10:14,240 --> 00:10:19,839
for from providers

188
00:10:15,760 --> 00:10:19,839
and route servers

189
00:10:22,399 --> 00:10:26,079
in the previous version of the draft i

190
00:10:24,320 --> 00:10:29,760
introduced what i

191
00:10:26,079 --> 00:10:32,239
believed was a wonderful ascii drawings

192
00:10:29,760 --> 00:10:32,880
unfortunately from the feedback that i

193
00:10:32,240 --> 00:10:36,480
got

194
00:10:32,880 --> 00:10:39,040
they haven't improved readability

195
00:10:36,480 --> 00:10:40,640
i tried to improve them but i failed and

196
00:10:39,040 --> 00:10:45,599
i decided to remove them

197
00:10:40,640 --> 00:10:47,760
and replace them with server code

198
00:10:45,600 --> 00:10:49,120
that this specific code looks like a

199
00:10:47,760 --> 00:10:52,079
python code

200
00:10:49,120 --> 00:10:52,880
and i've also worked on removing

201
00:10:52,079 --> 00:10:56,000
ambiguity

202
00:10:52,880 --> 00:10:57,200
in the voting such as segments pass and

203
00:10:56,000 --> 00:11:00,480
special thanks

204
00:10:57,200 --> 00:11:03,920
here goes to and j

205
00:11:00,480 --> 00:11:05,600
buckland hugging but

206
00:11:03,920 --> 00:11:07,680
before jumping through the formal

207
00:11:05,600 --> 00:11:09,120
procedure i'm going to present you some

208
00:11:07,680 --> 00:11:12,079
drawings

209
00:11:09,120 --> 00:11:14,000
and so as i told you there is no draw

210
00:11:12,079 --> 00:11:17,279
drawings in the draft so you will have

211
00:11:14,000 --> 00:11:20,399
kind of unique experience and

212
00:11:17,279 --> 00:11:23,680
here are the terms for the drawings

213
00:11:20,399 --> 00:11:24,800
if you see a circle on top of another

214
00:11:23,680 --> 00:11:27,760
circle

215
00:11:24,800 --> 00:11:28,959
this means that the token the circle on

216
00:11:27,760 --> 00:11:31,680
the top

217
00:11:28,959 --> 00:11:33,439
is the provider the circle or it's the

218
00:11:31,680 --> 00:11:37,040
button

219
00:11:33,440 --> 00:11:39,279
if you see two circles on the same level

220
00:11:37,040 --> 00:11:40,399
it means that they are peering with each

221
00:11:39,279 --> 00:11:43,839
other

222
00:11:40,399 --> 00:11:44,320
and most important part errors errors

223
00:11:43,839 --> 00:11:47,360
stand

224
00:11:44,320 --> 00:11:48,480
not for the direction of route

225
00:11:47,360 --> 00:11:51,920
advertisement

226
00:11:48,480 --> 00:11:55,200
it stands for the direction of asp

227
00:11:51,920 --> 00:11:57,519
check so i hope

228
00:11:55,200 --> 00:11:59,519
you will not be confused let's move to

229
00:11:57,519 --> 00:12:02,800
the example

230
00:11:59,519 --> 00:12:06,639
here is the example uh at this slide

231
00:12:02,800 --> 00:12:09,120
we see an example of processing

232
00:12:06,639 --> 00:12:11,040
uh prefixes that are received from

233
00:12:09,120 --> 00:12:12,160
upstream path as we discussed upstream

234
00:12:11,040 --> 00:12:16,319
path

235
00:12:12,160 --> 00:12:19,760
is a prefix that is received from

236
00:12:16,320 --> 00:12:23,360
customer peer or a risk client

237
00:12:19,760 --> 00:12:26,319
in this example it's spear so

238
00:12:23,360 --> 00:12:27,040
the wonderful thing about this kind of

239
00:12:26,320 --> 00:12:30,880
uh

240
00:12:27,040 --> 00:12:34,719
prefixes is that asp ace path

241
00:12:30,880 --> 00:12:35,360
can consist only of customer to provider

242
00:12:34,720 --> 00:12:37,360
players

243
00:12:35,360 --> 00:12:39,600
customer to provider customer to

244
00:12:37,360 --> 00:12:42,480
provider if we

245
00:12:39,600 --> 00:12:43,360
see there something else it's a leak and

246
00:12:42,480 --> 00:12:46,880
so

247
00:12:43,360 --> 00:12:50,000
we can detect it how it works

248
00:12:46,880 --> 00:12:53,200
uh we apply the verification procedure

249
00:12:50,000 --> 00:12:56,720
for a pair one two valid

250
00:12:53,200 --> 00:13:00,160
two three valid three four valid

251
00:12:56,720 --> 00:13:04,639
so the the uh outcome of

252
00:13:00,160 --> 00:13:07,920
the uh uh check will be valid it's clear

253
00:13:04,639 --> 00:13:10,000
on the right side we have a an example

254
00:13:07,920 --> 00:13:12,880
of detectable leak

255
00:13:10,000 --> 00:13:15,120
the procedure starts just the same way

256
00:13:12,880 --> 00:13:18,240
we have one two threaded

257
00:13:15,120 --> 00:13:22,800
two three is invalid because uh the

258
00:13:18,240 --> 00:13:25,200
second atom system haven't authorized

259
00:13:22,800 --> 00:13:27,519
the atom system number three to

260
00:13:25,200 --> 00:13:28,399
advertise its prefixes to its upper

261
00:13:27,519 --> 00:13:32,399
providers

262
00:13:28,399 --> 00:13:32,399
so with isp uh

263
00:13:32,560 --> 00:13:38,160
record from out on system two

264
00:13:35,839 --> 00:13:39,760
we will be able to detect this kind of

265
00:13:38,160 --> 00:13:43,360
leak we can detect both

266
00:13:39,760 --> 00:13:48,240
by four or by five and now

267
00:13:43,360 --> 00:13:51,120
the formal procedure

268
00:13:48,240 --> 00:13:51,600
it's just a quote from the drafting so

269
00:13:51,120 --> 00:13:54,160
because

270
00:13:51,600 --> 00:13:54,800
this working group is working with this

271
00:13:54,160 --> 00:13:58,319
draft

272
00:13:54,800 --> 00:14:02,000
i believe we should read it

273
00:13:58,320 --> 00:14:04,240
and uh agree on it anyway

274
00:14:02,000 --> 00:14:05,680
and of course it's way more complicated

275
00:14:04,240 --> 00:14:09,040
than the previous drawings but

276
00:14:05,680 --> 00:14:11,760
because it it needs to cover

277
00:14:09,040 --> 00:14:13,360
connect edges so the first point stands

278
00:14:11,760 --> 00:14:17,439
for

279
00:14:13,360 --> 00:14:21,120
uh empty ice path if the is path is

280
00:14:17,440 --> 00:14:24,800
empty uh the outcome is invalid

281
00:14:21,120 --> 00:14:27,199
the second point checks whether the

282
00:14:24,800 --> 00:14:29,920
last autonomous system in the path

283
00:14:27,199 --> 00:14:30,800
equals to the neighbor autonomous system

284
00:14:29,920 --> 00:14:35,920
if it is not

285
00:14:30,800 --> 00:14:41,040
it's again invaded number three

286
00:14:35,920 --> 00:14:41,040
it's a uh most important and

287
00:14:41,279 --> 00:14:46,000
hard to read but still easy to

288
00:14:44,560 --> 00:14:50,160
understand point

289
00:14:46,000 --> 00:14:53,760
uh it just looks for a pair

290
00:14:50,160 --> 00:14:56,880
in of unequal uh

291
00:14:53,760 --> 00:15:00,079
high sequence segments uh that

292
00:14:56,880 --> 00:15:03,120
have uh invalid a

293
00:15:00,079 --> 00:15:06,479
pair verification uh outcome

294
00:15:03,120 --> 00:15:07,120
so it's just not a customer to provide a

295
00:15:06,480 --> 00:15:10,399
pair

296
00:15:07,120 --> 00:15:12,399
in the is path but because of i sets and

297
00:15:10,399 --> 00:15:15,199
so on it's

298
00:15:12,399 --> 00:15:16,079
rather hard to read uh the the fourth

299
00:15:15,199 --> 00:15:19,439
point

300
00:15:16,079 --> 00:15:23,120
uh processes independently

301
00:15:19,440 --> 00:15:26,399
i set segments and the fifth point

302
00:15:23,120 --> 00:15:30,959
is nearly the same as the third one

303
00:15:26,399 --> 00:15:35,279
and its processes uh unknown outcomes

304
00:15:30,959 --> 00:15:35,279
and if we uh reach

305
00:15:35,440 --> 00:15:42,959
0.6 this means that

306
00:15:38,839 --> 00:15:46,000
the uh path is about it okay

307
00:15:42,959 --> 00:15:47,040
and this was an easy part because we are

308
00:15:46,000 --> 00:15:51,120
now going to

309
00:15:47,040 --> 00:15:54,639
a very verification procedure

310
00:15:51,120 --> 00:15:56,000
that should be applied on the prefixes

311
00:15:54,639 --> 00:15:59,519
that are received from

312
00:15:56,000 --> 00:15:59,519
providers and

313
00:16:00,880 --> 00:16:08,000
route servers the key difference here

314
00:16:04,880 --> 00:16:11,519
is that the first pair

315
00:16:08,000 --> 00:16:14,560
that is invalid in terms of asp

316
00:16:11,519 --> 00:16:16,320
doesn't signal that it is a leak it

317
00:16:14,560 --> 00:16:19,680
signals only

318
00:16:16,320 --> 00:16:23,920
the end of upstream

319
00:16:19,680 --> 00:16:27,199
part and there in a proper

320
00:16:23,920 --> 00:16:31,040
route the upstream part may be followed

321
00:16:27,199 --> 00:16:31,758
by by the downstream bar if it goes up

322
00:16:31,040 --> 00:16:35,120
again

323
00:16:31,759 --> 00:16:38,480
it's a leak i hope it's clear

324
00:16:35,120 --> 00:16:41,680
and uh but we need to verify

325
00:16:38,480 --> 00:16:45,519
downstream path we need to change

326
00:16:41,680 --> 00:16:48,880
the order of uh in our check

327
00:16:45,519 --> 00:16:52,800
so let's jump to the example

328
00:16:48,880 --> 00:16:55,839
on the the left side is the valid route

329
00:16:52,800 --> 00:16:57,680
we are starting as uh

330
00:16:55,839 --> 00:17:00,000
as we are we were doing for in the

331
00:16:57,680 --> 00:17:03,040
previous one so we're checking one two

332
00:17:00,000 --> 00:17:06,720
valid two three with it three four

333
00:17:03,040 --> 00:17:10,240
it four five invaded

334
00:17:06,720 --> 00:17:13,039
it but it's a downstream

335
00:17:10,240 --> 00:17:15,199
uh but we are discussing here a

336
00:17:13,039 --> 00:17:18,959
downstream path so it's a

337
00:17:15,199 --> 00:17:22,480
a route that was received from provider

338
00:17:18,959 --> 00:17:25,839
and route server or route server so

339
00:17:22,480 --> 00:17:26,880
the invalid 4 5 doesn't mean that it is

340
00:17:25,839 --> 00:17:29,918
a leak

341
00:17:26,880 --> 00:17:33,200
but it's the end of

342
00:17:29,919 --> 00:17:34,240
upstream part and after that we are

343
00:17:33,200 --> 00:17:37,520
checking

344
00:17:34,240 --> 00:17:41,039
not five six but six five

345
00:17:37,520 --> 00:17:43,440
seven six to check that

346
00:17:41,039 --> 00:17:44,879
there are also customers to provide a

347
00:17:43,440 --> 00:17:47,919
pair

348
00:17:44,880 --> 00:17:51,280
hope it's clear now uh

349
00:17:47,919 --> 00:17:54,480
on the right side is a and as a is a

350
00:17:51,280 --> 00:17:54,799
an example of a leak it starts just the

351
00:17:54,480 --> 00:17:57,200
same

352
00:17:54,799 --> 00:17:58,000
one two valid two three weather three

353
00:17:57,200 --> 00:18:01,919
four valid

354
00:17:58,000 --> 00:18:05,679
four five end of upstream part

355
00:18:01,919 --> 00:18:08,640
six five valid seven eight

356
00:18:05,679 --> 00:18:09,679
uh not it's not real it's not valid it's

357
00:18:08,640 --> 00:18:12,799
invalid

358
00:18:09,679 --> 00:18:16,160
so if we found a subsequent

359
00:18:12,799 --> 00:18:19,918
uh reversed pair with the outcome of

360
00:18:16,160 --> 00:18:22,640
invalid after four five this means that

361
00:18:19,919 --> 00:18:25,120
the whole path is invalid and so we

362
00:18:22,640 --> 00:18:28,720
detected a roughly

363
00:18:25,120 --> 00:18:31,280
and here is a formal procedure

364
00:18:28,720 --> 00:18:32,480
normally i try to avoid such kind of

365
00:18:31,280 --> 00:18:35,918
slides

366
00:18:32,480 --> 00:18:38,799
but once again it's important to make

367
00:18:35,919 --> 00:18:41,120
the drafts readable and what that's why

368
00:18:38,799 --> 00:18:44,720
it's here it's a quote

369
00:18:41,120 --> 00:18:48,000
it starts uh the same way as

370
00:18:44,720 --> 00:18:51,280
the procedure for the um

371
00:18:48,000 --> 00:18:52,080
upstream uh path so we're checking if

372
00:18:51,280 --> 00:18:54,960
the uh

373
00:18:52,080 --> 00:18:55,678
ice path is not empty is it if it is

374
00:18:54,960 --> 00:18:58,799
empty

375
00:18:55,679 --> 00:19:02,320
then the outcome is invalid point two

376
00:18:58,799 --> 00:19:04,320
checks the last uh autonomous

377
00:19:02,320 --> 00:19:05,520
uh system in the path that it is equal

378
00:19:04,320 --> 00:19:09,600
to the neighbor

379
00:19:05,520 --> 00:19:12,160
with exception for i access point

380
00:19:09,600 --> 00:19:14,159
very important point we are looking for

381
00:19:12,160 --> 00:19:17,440
the first invalid pair

382
00:19:14,160 --> 00:19:21,039
so to detect the end of upstream path

383
00:19:17,440 --> 00:19:25,440
and after that we will be

384
00:19:21,039 --> 00:19:27,760
checking the downstream path

385
00:19:25,440 --> 00:19:28,480
and of course we need to store this

386
00:19:27,760 --> 00:19:31,919
indexed

387
00:19:28,480 --> 00:19:37,520
for for the further check point

388
00:19:31,919 --> 00:19:40,320
for it's a simple one for 0.5

389
00:19:37,520 --> 00:19:41,600
we are looking for a pair a reverse

390
00:19:40,320 --> 00:19:44,879
player

391
00:19:41,600 --> 00:19:45,840
uh this is also invalid if we found and

392
00:19:44,880 --> 00:19:48,000
find these

393
00:19:45,840 --> 00:19:50,080
kind of pair the outcome of the

394
00:19:48,000 --> 00:19:51,280
procedure is invalid as we discussed in

395
00:19:50,080 --> 00:19:54,960
the example

396
00:19:51,280 --> 00:19:59,678
0.6 it's again processing

397
00:19:54,960 --> 00:20:03,120
wonderful i set segments or in seven

398
00:19:59,679 --> 00:20:06,400
so we also need to distinguish

399
00:20:03,120 --> 00:20:10,158
unknown output of the uh

400
00:20:06,400 --> 00:20:13,039
verification procedure from valid so

401
00:20:10,159 --> 00:20:14,240
uh in this case we have two points

402
00:20:13,039 --> 00:20:17,840
responsible for

403
00:20:14,240 --> 00:20:21,360
this process we have point

404
00:20:17,840 --> 00:20:24,639
seven for the downstream sub

405
00:20:21,360 --> 00:20:28,000
path and 0.8 for

406
00:20:24,640 --> 00:20:31,520
upstream cycles of path and

407
00:20:28,000 --> 00:20:34,559
0.9 finally if we are there the path

408
00:20:31,520 --> 00:20:37,840
is valid

409
00:20:34,559 --> 00:20:41,440
so this time for questions

410
00:20:37,840 --> 00:20:44,959
uh my question to this working group

411
00:20:41,440 --> 00:20:47,840
uh will be about the readiness of the

412
00:20:44,960 --> 00:20:50,080
the documents at yandex we have

413
00:20:47,840 --> 00:20:53,280
evaluated for a half year

414
00:20:50,080 --> 00:20:56,399
the asp techniques

415
00:20:53,280 --> 00:21:00,840
we use it in our monitoring tools and

416
00:20:56,400 --> 00:21:03,760
we plan to start filtering using sp

417
00:21:00,840 --> 00:21:06,879
techniques

418
00:21:03,760 --> 00:21:10,640
prefixes in the mid of the next year

419
00:21:06,880 --> 00:21:13,120
unfortunately we will apply

420
00:21:10,640 --> 00:21:14,840
this technique on very specific devices

421
00:21:13,120 --> 00:21:16,639
responsible for egress bearing

422
00:21:14,840 --> 00:21:20,480
engineering and

423
00:21:16,640 --> 00:21:23,679
i can't say that it will work in

424
00:21:20,480 --> 00:21:26,480
a majority of the networks

425
00:21:23,679 --> 00:21:27,760
so to make it available for the larger

426
00:21:26,480 --> 00:21:30,960
community

427
00:21:27,760 --> 00:21:34,480
of course we need rsc and a lot of

428
00:21:30,960 --> 00:21:34,880
work with the industry but first and

429
00:21:34,480 --> 00:21:38,159
fore

430
00:21:34,880 --> 00:21:42,159
things first and

431
00:21:38,159 --> 00:21:44,640
we need to finalize the documents

432
00:21:42,159 --> 00:21:46,000
and i need your feedback about its

433
00:21:44,640 --> 00:21:49,360
readability

434
00:21:46,000 --> 00:21:52,799
and the special questions about

435
00:21:49,360 --> 00:21:59,840
python code and so on so

436
00:21:52,799 --> 00:21:59,840
my questions are done the flow is yours

437
00:22:02,960 --> 00:22:06,559
i think george might have had a question

438
00:22:10,840 --> 00:22:13,840
earlier

439
00:22:14,960 --> 00:22:22,400
or not um i have a question

440
00:22:19,120 --> 00:22:24,959
this is chris from google um not as a

441
00:22:22,400 --> 00:22:27,360
chairperson but as a user how do you

442
00:22:24,960 --> 00:22:29,600
verify or how do you keep

443
00:22:27,360 --> 00:22:30,959
the irr objects the same like early in

444
00:22:29,600 --> 00:22:33,600
the presentation i think on the

445
00:22:30,960 --> 00:22:34,640
second or third slide you said the asp

446
00:22:33,600 --> 00:22:37,199
would point to

447
00:22:34,640 --> 00:22:38,480
a object or set of objects which are

448
00:22:37,200 --> 00:22:41,919
supposed to be

449
00:22:38,480 --> 00:22:44,880
the same or could be the same

450
00:22:41,919 --> 00:22:44,880
uh so

451
00:22:45,520 --> 00:22:49,679
so uh let me try to answer this question

452
00:22:49,120 --> 00:22:53,280
so

453
00:22:49,679 --> 00:22:56,480
uh if you have

454
00:22:53,280 --> 00:22:59,039
multiple asp records in different

455
00:22:56,480 --> 00:22:59,679
registries you just need to keep them

456
00:22:59,039 --> 00:23:02,960
the same

457
00:22:59,679 --> 00:23:07,120
it's uh not a registry obligation

458
00:23:02,960 --> 00:23:10,240
it's user or signer obligation

459
00:23:07,120 --> 00:23:13,520
because asp objects are not

460
00:23:10,240 --> 00:23:17,039
related to um

461
00:23:13,520 --> 00:23:19,440
so you so in rows you are you have an

462
00:23:17,039 --> 00:23:20,879
object where with prefix you are

463
00:23:19,440 --> 00:23:24,480
assigning

464
00:23:20,880 --> 00:23:27,760
a single autonomous system in spa

465
00:23:24,480 --> 00:23:28,400
you are uh by your autonomous system

466
00:23:27,760 --> 00:23:31,200
signing

467
00:23:28,400 --> 00:23:33,039
you can sign all your uh providers in

468
00:23:31,200 --> 00:23:34,720
one object

469
00:23:33,039 --> 00:23:36,320
and of course there is no issues like

470
00:23:34,720 --> 00:23:37,760
more specifically specific issues like

471
00:23:36,320 --> 00:23:40,799
european roles

472
00:23:37,760 --> 00:23:44,559
so to avoid any kind of synchronization

473
00:23:40,799 --> 00:23:44,559
problems just keep

474
00:23:45,840 --> 00:23:49,600
sp objects in different registers the

475
00:23:48,480 --> 00:23:52,799
same

476
00:23:49,600 --> 00:23:54,559
that's all okay i guess maybe i

477
00:23:52,799 --> 00:23:57,440
misunderstood you're not actually

478
00:23:54,559 --> 00:24:00,799
uh advocating double record keeping here

479
00:23:57,440 --> 00:24:04,080
you're just saying if you happen to

480
00:24:00,799 --> 00:24:07,360
no no uh it's just for

481
00:24:04,080 --> 00:24:10,399
the case that for some operation need

482
00:24:07,360 --> 00:24:12,879
you have to temporary temporary run

483
00:24:10,400 --> 00:24:18,799
multiple objects

484
00:24:12,880 --> 00:24:22,000
okay thank you

485
00:24:18,799 --> 00:24:22,000
anybody else with questions

486
00:24:27,200 --> 00:24:33,679
okay uh if there is no questions i will

487
00:24:30,320 --> 00:24:37,120
be waiting for some comments about

488
00:24:33,679 --> 00:24:39,840
and suggestions about the drafts

489
00:24:37,120 --> 00:24:40,320
at least for for a month uh if there

490
00:24:39,840 --> 00:24:43,120
will be

491
00:24:40,320 --> 00:24:46,158
nothing i will be starting asking to

492
00:24:43,120 --> 00:24:49,120
start a working group last call

493
00:24:46,159 --> 00:24:50,799
okay looks like job has a question in

494
00:24:49,120 --> 00:24:53,360
the chat

495
00:24:50,799 --> 00:24:56,080
so he says did you mean trust anchor

496
00:24:53,360 --> 00:25:00,320
instead of registry

497
00:24:56,080 --> 00:25:03,439
uh yeah yeah yeah okay

498
00:25:00,320 --> 00:25:15,840
okay so

499
00:25:03,440 --> 00:25:15,840
the voting can be improved

500
00:25:19,360 --> 00:25:23,039
i think rudiger and k are both have

501
00:25:20,960 --> 00:25:25,279
questions

502
00:25:23,039 --> 00:25:25,279
uh

503
00:25:26,159 --> 00:25:33,360
okay yeah uh

504
00:25:30,240 --> 00:25:37,039
well uh having uh the as

505
00:25:33,360 --> 00:25:41,360
number from different

506
00:25:37,039 --> 00:25:44,960
trust anchors gets me into

507
00:25:41,360 --> 00:25:48,959
a strange state of mind

508
00:25:44,960 --> 00:25:52,240
having multiple aspa

509
00:25:48,960 --> 00:25:54,880
objects from a single air

510
00:25:52,240 --> 00:25:56,159
trust anchor is actually technically

511
00:25:54,880 --> 00:25:59,440
possible

512
00:25:56,159 --> 00:26:03,360
because in the delegation chain

513
00:25:59,440 --> 00:26:08,080
each ca that claims

514
00:26:03,360 --> 00:26:12,158
the as number can do an aspa

515
00:26:08,080 --> 00:26:16,240
so dealing with multiple objects that

516
00:26:12,159 --> 00:26:18,960
semantically are overlapping uh

517
00:26:16,240 --> 00:26:20,799
seems to me to be pointing to uh

518
00:26:18,960 --> 00:26:26,080
somewhat strange cases

519
00:26:20,799 --> 00:26:28,080
in any way uh so

520
00:26:26,080 --> 00:26:29,279
well i think it was randy in the mailing

521
00:26:28,080 --> 00:26:32,720
list

522
00:26:29,279 --> 00:26:36,000
who pointed that we cannot

523
00:26:32,720 --> 00:26:39,200
uh restrict multiple asp

524
00:26:36,000 --> 00:26:42,640
objects but

525
00:26:39,200 --> 00:26:45,919
we can write in the draft this kind

526
00:26:42,640 --> 00:26:49,279
of deploy should be avoided

527
00:26:45,919 --> 00:26:52,480
and we can ask posted systems of

528
00:26:49,279 --> 00:26:54,960
rpki to make

529
00:26:52,480 --> 00:26:56,080
additional enforcements in their

530
00:26:54,960 --> 00:27:00,320
interfaces

531
00:26:56,080 --> 00:27:00,320
i i believe this should be enough

532
00:27:05,279 --> 00:27:12,559
um well as far

533
00:27:09,039 --> 00:27:13,840
as far as thinking about uh multiple

534
00:27:12,559 --> 00:27:17,120
aspas

535
00:27:13,840 --> 00:27:18,480
along the delegation path from one trust

536
00:27:17,120 --> 00:27:22,000
anchor

537
00:27:18,480 --> 00:27:25,760
uh one i think actually could do

538
00:27:22,000 --> 00:27:28,880
something like well uh

539
00:27:25,760 --> 00:27:32,720
the most specific assignment

540
00:27:28,880 --> 00:27:36,240
wins and the others uh are overwritten

541
00:27:32,720 --> 00:27:39,600
might be something one could consider

542
00:27:36,240 --> 00:27:42,640
uh having having multi

543
00:27:39,600 --> 00:27:45,840
having the aspa out

544
00:27:42,640 --> 00:27:49,039
of multiple trust and uh trust anchors

545
00:27:45,840 --> 00:27:54,720
is something that is not

546
00:27:49,039 --> 00:27:54,720
really allowed under the official

547
00:27:55,279 --> 00:28:05,799
certificate policy of the rpki

548
00:28:02,380 --> 00:28:05,799
[Music]

549
00:28:06,000 --> 00:28:12,000
uh it's a very interesting comment

550
00:28:09,039 --> 00:28:17,600
because i had a feeling that

551
00:28:12,000 --> 00:28:20,640
there is no restriction to create

552
00:28:17,600 --> 00:28:23,678
uh multiple uh several asp

553
00:28:20,640 --> 00:28:25,120
records in different trusted anchors at

554
00:28:23,679 --> 00:28:28,799
the same time

555
00:28:25,120 --> 00:28:32,399
is it incorrect i believe

556
00:28:28,799 --> 00:28:35,600
it is incorrect the official policy

557
00:28:32,399 --> 00:28:38,879
of the rpki says

558
00:28:35,600 --> 00:28:44,799
the ca resource

559
00:28:38,880 --> 00:28:48,080
sets are following the delegation tree

560
00:28:44,799 --> 00:28:52,480
and the delegation tree obviously has

561
00:28:48,080 --> 00:28:55,600
only one trust anchor

562
00:28:52,480 --> 00:28:59,520
and if the implementation

563
00:28:55,600 --> 00:28:59,840
or is using multiple trust anchors that

564
00:28:59,520 --> 00:29:04,158
are

565
00:28:59,840 --> 00:29:05,840
overlapping uh and uh well okay not just

566
00:29:04,159 --> 00:29:09,679
overlapping by a claim

567
00:29:05,840 --> 00:29:13,840
or a claims all a root certificate

568
00:29:09,679 --> 00:29:17,200
but in fact uh overlapping

569
00:29:13,840 --> 00:29:20,480
uh in specif between

570
00:29:17,200 --> 00:29:23,919
several trust anchors uh for

571
00:29:20,480 --> 00:29:27,600
specific resources

572
00:29:23,919 --> 00:29:30,640
i think i think that's indeed

573
00:29:27,600 --> 00:29:33,918
that's indeed a problem uh

574
00:29:30,640 --> 00:29:37,120
it might potentially occur

575
00:29:33,919 --> 00:29:40,799
in a documented way of the uh

576
00:29:37,120 --> 00:29:43,918
a procedure for uh transferring

577
00:29:40,799 --> 00:29:43,918
the as number

578
00:29:45,520 --> 00:29:51,200
um i believe i've i've seen something uh

579
00:29:48,799 --> 00:29:52,240
similar for rose but i will i will

580
00:29:51,200 --> 00:29:55,840
double check it

581
00:29:52,240 --> 00:29:55,840
thank you

582
00:30:00,480 --> 00:30:02,720
ben

583
00:30:06,880 --> 00:30:14,799
hi alex um ben from work online

584
00:30:10,960 --> 00:30:16,960
uh so i i think it's pretty clear that

585
00:30:14,799 --> 00:30:17,840
it's possible that we can wind up in a

586
00:30:16,960 --> 00:30:20,960
situation where

587
00:30:17,840 --> 00:30:21,520
an rp sees multiple aspa objects and

588
00:30:20,960 --> 00:30:24,799
that

589
00:30:21,520 --> 00:30:27,918
that is undesirable

590
00:30:24,799 --> 00:30:32,320
but what how are

591
00:30:27,919 --> 00:30:34,559
how are multiple aspas resolved together

592
00:30:32,320 --> 00:30:35,600
if a rp encounters them in the current

593
00:30:34,559 --> 00:30:37,600
draft

594
00:30:35,600 --> 00:30:40,000
is it a is it a union of all of them or

595
00:30:37,600 --> 00:30:42,480
is there some other algorithm

596
00:30:40,000 --> 00:30:45,679
uh it's uh just the union of all

597
00:30:42,480 --> 00:30:48,799
cryptographically validated space

598
00:30:45,679 --> 00:30:50,880
so if we will have duplicates it will be

599
00:30:48,799 --> 00:30:55,120
justifying just fine

600
00:30:50,880 --> 00:30:58,159
yeah okay and the the the the resulting

601
00:30:55,120 --> 00:31:01,199
union the the the

602
00:30:58,159 --> 00:31:06,240
creation of that is deferred until

603
00:31:01,200 --> 00:31:06,240
a fetch a whole fetch is completed right

604
00:31:07,760 --> 00:31:14,158
so this is the reason why we

605
00:31:10,880 --> 00:31:18,399
do suggest that

606
00:31:14,159 --> 00:31:21,679
do not list your providers

607
00:31:18,399 --> 00:31:22,719
in several records but but to list them

608
00:31:21,679 --> 00:31:25,840
in one record

609
00:31:22,720 --> 00:31:28,240
because uh normally as it happens with

610
00:31:25,840 --> 00:31:28,240
raws

611
00:31:30,640 --> 00:31:34,320
and uh when when you are getting the

612
00:31:32,880 --> 00:31:38,720
updates uh

613
00:31:34,320 --> 00:31:41,678
from or with atr uh you will be

614
00:31:38,720 --> 00:31:43,600
once you have the record you will not

615
00:31:41,679 --> 00:31:47,120
wait for others to come

616
00:31:43,600 --> 00:31:50,320
and it's important that all the uh

617
00:31:47,120 --> 00:31:54,639
all this proper set of providers

618
00:31:50,320 --> 00:31:57,519
will come in the first single video

619
00:31:54,640 --> 00:31:58,799
duplicates is okay different records not

620
00:31:57,519 --> 00:32:00,480
okay

621
00:31:58,799 --> 00:32:02,399
yeah i i completely agree with the

622
00:32:00,480 --> 00:32:03,519
principle i i i completely understand

623
00:32:02,399 --> 00:32:06,000
why that's the advice

624
00:32:03,519 --> 00:32:07,919
um but i because of the presence of

625
00:32:06,000 --> 00:32:10,880
transfers and because of the

626
00:32:07,919 --> 00:32:12,080
presence of over claims by the various

627
00:32:10,880 --> 00:32:15,120
roots

628
00:32:12,080 --> 00:32:18,480
um i think that

629
00:32:15,120 --> 00:32:20,399
that we are gonna see some instance

630
00:32:18,480 --> 00:32:22,399
where either because of a bug or because

631
00:32:20,399 --> 00:32:24,000
of user error we need to deal with

632
00:32:22,399 --> 00:32:26,239
we need to deal as gracefully as

633
00:32:24,000 --> 00:32:29,279
possible with a scenario where

634
00:32:26,240 --> 00:32:32,960
multiple disagreeing aspa

635
00:32:29,279 --> 00:32:34,559
objects are presented to an rp um

636
00:32:32,960 --> 00:32:36,480
and i think the best we can do in that

637
00:32:34,559 --> 00:32:37,660
scenario is just trying to avoid an

638
00:32:36,480 --> 00:32:39,039
outage as best we can

639
00:32:37,660 --> 00:32:41,919
[Music]

640
00:32:39,039 --> 00:32:44,720
yeah yeah i agree and of course we can

641
00:32:41,919 --> 00:32:46,960
introduce some hacks here when we will

642
00:32:44,720 --> 00:32:49,120
for example is uh it was suggested in

643
00:32:46,960 --> 00:32:51,600
the main at least for roles to send

644
00:32:49,120 --> 00:32:52,639
uh more specifics before less specifics

645
00:32:51,600 --> 00:32:56,879
we can send

646
00:32:52,640 --> 00:33:00,159
first huge huge records for selected uh

647
00:32:56,880 --> 00:33:03,200
yes and then send small ones

648
00:33:00,159 --> 00:33:05,200
but it will kind of hack

649
00:33:03,200 --> 00:33:07,279
yeah i i to be honest i don't think we

650
00:33:05,200 --> 00:33:08,960
need to go further than saying something

651
00:33:07,279 --> 00:33:12,960
along the lines

652
00:33:08,960 --> 00:33:14,799
of the rp should be relatively sure that

653
00:33:12,960 --> 00:33:16,000
it's completed a full fetch before

654
00:33:14,799 --> 00:33:19,279
sending anything

655
00:33:16,000 --> 00:33:25,840
um but yes ordering it

656
00:33:19,279 --> 00:33:25,840
ordering it may be sensible as well yeah

657
00:33:35,760 --> 00:33:42,320
so i see in the line randy

658
00:33:39,279 --> 00:33:42,320
and rudiger again

659
00:33:44,559 --> 00:33:48,080
seems to be moderating the cue i'll grab

660
00:33:46,799 --> 00:33:51,600
it um

661
00:33:48,080 --> 00:33:52,000
i think rudiger is correct that as you

662
00:33:51,600 --> 00:33:55,199
come

663
00:33:52,000 --> 00:33:59,519
down from a ta you use

664
00:33:55,200 --> 00:34:04,720
the lowest instance

665
00:33:59,519 --> 00:34:04,720
of a customer a s

666
00:34:04,880 --> 00:34:09,520
to be unique i i think in your early

667
00:34:08,320 --> 00:34:10,960
slides you

668
00:34:09,520 --> 00:34:12,960
i think you could have been a little

669
00:34:10,960 --> 00:34:14,000
clearer if when you talk about

670
00:34:12,960 --> 00:34:18,720
uniqueness

671
00:34:14,000 --> 00:34:21,440
what has to be unique is the customer as

672
00:34:18,719 --> 00:34:22,480
um but i think rudiger's correct that

673
00:34:21,440 --> 00:34:25,520
you come down the

674
00:34:22,480 --> 00:34:29,520
chain and you pick the lowest one the rp

675
00:34:25,520 --> 00:34:33,199
does know the chain if

676
00:34:29,520 --> 00:34:34,719
she is following multiple tas and

677
00:34:33,199 --> 00:34:37,598
multiple chains

678
00:34:34,719 --> 00:34:39,598
and comes up with multiple qualified

679
00:34:37,599 --> 00:34:41,679
aspa records

680
00:34:39,599 --> 00:34:45,200
i don't think you have a choice other

681
00:34:41,679 --> 00:34:45,200
than taking the union

682
00:34:47,599 --> 00:34:51,919
okay okay thank you randy for the

683
00:34:49,599 --> 00:34:51,919
comment

684
00:34:56,320 --> 00:35:03,599
okay my additional comment or

685
00:34:59,760 --> 00:35:06,880
question would be

686
00:35:03,599 --> 00:35:10,079
if you are talking about

687
00:35:06,880 --> 00:35:14,000
an rp that is fetching

688
00:35:10,079 --> 00:35:17,680
from several different

689
00:35:14,000 --> 00:35:21,119
trust anchors uh i

690
00:35:17,680 --> 00:35:25,200
think i think you you have to

691
00:35:21,119 --> 00:35:29,280
uh understand that uh

692
00:35:25,200 --> 00:35:32,319
kind of time is not a uniform concept

693
00:35:29,280 --> 00:35:35,760
between all of the

694
00:35:32,320 --> 00:35:39,200
different tas and saying

695
00:35:35,760 --> 00:35:43,520
you have a complete fetch

696
00:35:39,200 --> 00:35:46,960
for a certain state of the total system

697
00:35:43,520 --> 00:35:46,960
is just not possible

698
00:35:55,280 --> 00:36:01,839
i believe it was a comment to ben's

699
00:35:58,560 --> 00:36:04,960
suggestion but anyway so

700
00:36:01,839 --> 00:36:05,759
i think we have we are on the same side

701
00:36:04,960 --> 00:36:09,359
here and

702
00:36:05,760 --> 00:36:11,760
we're uh with the

703
00:36:09,359 --> 00:36:13,839
clear voting in the draft to suggests

704
00:36:11,760 --> 00:36:17,280
that

705
00:36:13,839 --> 00:36:20,160
in the selected trusted anchor there

706
00:36:17,280 --> 00:36:20,560
should be only single sp record and if

707
00:36:20,160 --> 00:36:22,960
you have

708
00:36:20,560 --> 00:36:24,240
multiple space for some reason they

709
00:36:22,960 --> 00:36:28,880
should carry

710
00:36:24,240 --> 00:36:28,879
just same value we should be fine

711
00:36:34,800 --> 00:36:43,359
okay i don't see any more questions

712
00:36:41,680 --> 00:36:46,000
george did you want to present for

713
00:36:43,359 --> 00:36:48,640
yourself or did you want us to do that

714
00:36:46,000 --> 00:36:48,640
either works

715
00:36:49,520 --> 00:36:54,000
and either way really as long as you're

716
00:36:52,000 --> 00:36:58,000
happy for me to periodically say

717
00:36:54,000 --> 00:37:00,640
click then why don't you do it

718
00:36:58,000 --> 00:37:01,760
okay let me uh get back around to the

719
00:37:00,640 --> 00:37:09,839
right

720
00:37:01,760 --> 00:37:13,440
place where these are

721
00:37:09,839 --> 00:37:13,440
yes i'll start with seintel

722
00:37:14,400 --> 00:37:20,240
you don't need to see my video do you it

723
00:37:17,599 --> 00:37:20,240
adds nothing

724
00:37:21,119 --> 00:37:24,960
only if you want us to man only if you

725
00:37:23,359 --> 00:37:27,359
want us to

726
00:37:24,960 --> 00:37:27,359
no no

727
00:37:32,079 --> 00:37:36,560
hello all right my name is george and

728
00:37:35,040 --> 00:37:39,680
i'm here to talk about

729
00:37:36,560 --> 00:37:42,000
the signed tell draft version six

730
00:37:39,680 --> 00:37:42,000
click

731
00:37:42,800 --> 00:37:46,320
so to remind people what we are talking

732
00:37:45,440 --> 00:37:49,119
about

733
00:37:46,320 --> 00:37:51,440
this is the mechanistic way that we

734
00:37:49,119 --> 00:37:53,040
could use in-band signaling

735
00:37:51,440 --> 00:37:55,599
so that relying parties could be

736
00:37:53,040 --> 00:37:57,599
informed in band as they fetch data from

737
00:37:55,599 --> 00:37:58,160
the repository framework that a trust

738
00:37:57,599 --> 00:38:00,720
anchor

739
00:37:58,160 --> 00:38:02,399
is performing a key role over and the

740
00:38:00,720 --> 00:38:04,720
draft defines a reasonably

741
00:38:02,400 --> 00:38:06,880
straightforward information model

742
00:38:04,720 --> 00:38:08,078
a new object called attack a trust

743
00:38:06,880 --> 00:38:10,960
anchor key

744
00:38:08,079 --> 00:38:12,240
and that is a declaration of the state

745
00:38:10,960 --> 00:38:14,640
of keys to be seen

746
00:38:12,240 --> 00:38:16,078
and whether they're in or out of use and

747
00:38:14,640 --> 00:38:18,078
there's also the definition of the

748
00:38:16,079 --> 00:38:20,480
validation requirements to understand

749
00:38:18,079 --> 00:38:21,920
how attack is well formed and valid

750
00:38:20,480 --> 00:38:23,599
there's the request for the oid

751
00:38:21,920 --> 00:38:24,400
assignment and there's the use of the

752
00:38:23,599 --> 00:38:26,400
dot tac

753
00:38:24,400 --> 00:38:28,000
file extension in the manifest and the

754
00:38:26,400 --> 00:38:30,160
draft also has

755
00:38:28,000 --> 00:38:31,839
examples of what key rollover would

756
00:38:30,160 --> 00:38:33,279
actually look like in a different range

757
00:38:31,839 --> 00:38:37,200
of scenarios

758
00:38:33,280 --> 00:38:39,680
click so

759
00:38:37,200 --> 00:38:40,240
this draft has not undergone a great

760
00:38:39,680 --> 00:38:42,319
deal

761
00:38:40,240 --> 00:38:43,520
of change since the last time it was

762
00:38:42,320 --> 00:38:46,000
discussed

763
00:38:43,520 --> 00:38:48,079
we added a paragraph to reflect on the

764
00:38:46,000 --> 00:38:50,079
feedback from rob kisteleki

765
00:38:48,079 --> 00:38:52,720
about the risks inherent in use of

766
00:38:50,079 --> 00:38:57,359
inbound signaling and the ability to

767
00:38:52,720 --> 00:39:00,560
steal a ta using this kind of mechanism

768
00:38:57,359 --> 00:39:02,640
and we think that may actually represent

769
00:39:00,560 --> 00:39:03,440
the end state that we can get to in this

770
00:39:02,640 --> 00:39:06,319
document

771
00:39:03,440 --> 00:39:08,079
so i just want to reprise why we're here

772
00:39:06,320 --> 00:39:10,960
what do we think we're doing here

773
00:39:08,079 --> 00:39:11,920
and our main purpose for presenting this

774
00:39:10,960 --> 00:39:15,440
work is about

775
00:39:11,920 --> 00:39:17,680
planned key role we understand from

776
00:39:15,440 --> 00:39:19,440
what rob said about the mechanism that

777
00:39:17,680 --> 00:39:21,359
is often used which is to preference

778
00:39:19,440 --> 00:39:23,760
vendor-backed updates

779
00:39:21,359 --> 00:39:25,759
vendors ship new towels when they are

780
00:39:23,760 --> 00:39:27,520
ready to be deployed

781
00:39:25,760 --> 00:39:29,520
and that then rolls out into the

782
00:39:27,520 --> 00:39:30,800
community at the frequency of update

783
00:39:29,520 --> 00:39:33,119
against the code

784
00:39:30,800 --> 00:39:34,880
our primary concern is that there are

785
00:39:33,119 --> 00:39:36,000
mechanisms that can come into play

786
00:39:34,880 --> 00:39:39,119
inside the ca

787
00:39:36,000 --> 00:39:41,680
framework such as use of hsms that

788
00:39:39,119 --> 00:39:44,240
are unavoidably unable to export their

789
00:39:41,680 --> 00:39:46,399
key state if you move between vendors

790
00:39:44,240 --> 00:39:48,879
or if you're performing a transition to

791
00:39:46,400 --> 00:39:50,880
something like the m of n mechanism

792
00:39:48,880 --> 00:39:52,160
that ripe have had under discussion

793
00:39:50,880 --> 00:39:53,599
these moments are

794
00:39:52,160 --> 00:39:55,839
unlikely to be ones that are

795
00:39:53,599 --> 00:39:57,839
particularly friendly to the time scale

796
00:39:55,839 --> 00:39:59,680
of asking people to update code through

797
00:39:57,839 --> 00:40:00,799
a vendor we think a signal

798
00:39:59,680 --> 00:40:02,640
mechanistically

799
00:40:00,800 --> 00:40:04,640
would be a hell of a lot easier and

800
00:40:02,640 --> 00:40:05,598
there's also this idea that there is a

801
00:40:04,640 --> 00:40:08,160
huge amount

802
00:40:05,599 --> 00:40:09,520
of deployed state inherent in the system

803
00:40:08,160 --> 00:40:12,160
so people might be using

804
00:40:09,520 --> 00:40:14,319
docker or other pre-built binaries this

805
00:40:12,160 --> 00:40:17,359
actually is analogous to something

806
00:40:14,319 --> 00:40:18,480
that came up in dns with 5011

807
00:40:17,359 --> 00:40:20,160
and there was quite a lot of

808
00:40:18,480 --> 00:40:22,240
conversation about the need for

809
00:40:20,160 --> 00:40:23,040
appliances to be able to be taken off

810
00:40:22,240 --> 00:40:25,359
the shelf

811
00:40:23,040 --> 00:40:26,319
and understand signaling in system to

812
00:40:25,359 --> 00:40:28,240
inform them

813
00:40:26,319 --> 00:40:30,079
they were behind state against trust

814
00:40:28,240 --> 00:40:32,799
anchors and needed to update

815
00:40:30,079 --> 00:40:34,880
so on the pro side we think it adds

816
00:40:32,800 --> 00:40:37,040
functionality to improve the likelihood

817
00:40:34,880 --> 00:40:39,200
of convergence to the correct keys

818
00:40:37,040 --> 00:40:40,560
but on the con side there's absolutely

819
00:40:39,200 --> 00:40:42,799
this problem that it would add

820
00:40:40,560 --> 00:40:47,040
complexity to the system

821
00:40:42,800 --> 00:40:49,440
so we think that there is this problem

822
00:40:47,040 --> 00:40:51,440
that is latent in what rob said about

823
00:40:49,440 --> 00:40:53,359
malicious access to keys

824
00:40:51,440 --> 00:40:55,599
and the corruption of change through a

825
00:40:53,359 --> 00:40:57,680
sign tell and we're thinking

826
00:40:55,599 --> 00:40:59,520
well if that really happened the

827
00:40:57,680 --> 00:41:01,520
fallback mechanism here

828
00:40:59,520 --> 00:41:02,960
is to use the vendors to perform the

829
00:41:01,520 --> 00:41:04,720
community upgrade

830
00:41:02,960 --> 00:41:07,040
we don't actually think the attack

831
00:41:04,720 --> 00:41:08,560
surface is largely increased because of

832
00:41:07,040 --> 00:41:10,079
an inbound mechanism

833
00:41:08,560 --> 00:41:12,400
and we think we have a potential

834
00:41:10,079 --> 00:41:14,720
mitigation use the vendors

835
00:41:12,400 --> 00:41:14,720
click

836
00:41:15,680 --> 00:41:21,839
so in our view there is not overall

837
00:41:18,880 --> 00:41:24,000
a massive increase in security risk and

838
00:41:21,839 --> 00:41:24,960
we like to remind people that all of the

839
00:41:24,000 --> 00:41:28,400
trust anchors

840
00:41:24,960 --> 00:41:30,640
are using hsms so theft of key

841
00:41:28,400 --> 00:41:32,880
is not just mechanistically about coming

842
00:41:30,640 --> 00:41:35,359
into this framework and being able to

843
00:41:32,880 --> 00:41:37,760
make someone believe attack exists it's

844
00:41:35,359 --> 00:41:39,839
about theft of the rights of access

845
00:41:37,760 --> 00:41:42,720
to a protected piece of hardware that is

846
00:41:39,839 --> 00:41:45,119
fundamentally protecting those keys

847
00:41:42,720 --> 00:41:47,118
however there is the concern about

848
00:41:45,119 --> 00:41:48,960
complexity and it would be foolish to

849
00:41:47,119 --> 00:41:50,560
pretend that we were necessarily going

850
00:41:48,960 --> 00:41:55,119
to get better security

851
00:41:50,560 --> 00:41:55,119
just because we added complexity click

852
00:41:55,920 --> 00:42:01,040
so we a picnic have implemented a test

853
00:41:59,280 --> 00:42:02,319
bed we've deployed a test bed which

854
00:42:01,040 --> 00:42:04,400
consists of

855
00:42:02,319 --> 00:42:05,759
a publication point with differing

856
00:42:04,400 --> 00:42:08,640
states of the tac

857
00:42:05,760 --> 00:42:11,119
object so we have the single ta with

858
00:42:08,640 --> 00:42:13,359
attack that's declaring the current key

859
00:42:11,119 --> 00:42:14,880
and two tas with attack that says only

860
00:42:13,359 --> 00:42:17,119
the first key is active

861
00:42:14,880 --> 00:42:19,040
and two tas with tax for both of them

862
00:42:17,119 --> 00:42:21,839
but with a revocation event

863
00:42:19,040 --> 00:42:23,359
and a single ta for attack and the key

864
00:42:21,839 --> 00:42:26,400
has been revoked and we think

865
00:42:23,359 --> 00:42:29,279
this set of four states should allow

866
00:42:26,400 --> 00:42:29,680
rp's that are developing against this to

867
00:42:29,280 --> 00:42:31,680
see

868
00:42:29,680 --> 00:42:34,078
all the potential varying states of

869
00:42:31,680 --> 00:42:37,279
being they could expect to ever see

870
00:42:34,079 --> 00:42:39,040
against the ta they had and attack

871
00:42:37,280 --> 00:42:41,440
and we have as well as publishing a

872
00:42:39,040 --> 00:42:43,279
testbed we've got some example code that

873
00:42:41,440 --> 00:42:48,400
we've put into the public domain

874
00:42:43,280 --> 00:42:48,400
that shows how to use this click

875
00:42:49,200 --> 00:42:54,640
so in deploying that testbed

876
00:42:52,640 --> 00:42:57,118
it's likely that there's at least one

877
00:42:54,640 --> 00:42:58,000
more round of work based on experiences

878
00:42:57,119 --> 00:43:00,319
that have been gained

879
00:42:58,000 --> 00:43:02,160
from doing that deployment so where

880
00:43:00,319 --> 00:43:03,359
previously we might have said okay this

881
00:43:02,160 --> 00:43:05,598
is one's cooked

882
00:43:03,359 --> 00:43:07,440
why don't we push out i think that it's

883
00:43:05,599 --> 00:43:09,280
plausible based on what i've heard from

884
00:43:07,440 --> 00:43:10,640
tom who did the implementation

885
00:43:09,280 --> 00:43:13,440
we're going to have to have another

886
00:43:10,640 --> 00:43:16,078
discussion about experiential behaviour

887
00:43:13,440 --> 00:43:16,880
and tim has also noted that there are

888
00:43:16,079 --> 00:43:19,040
open eye

889
00:43:16,880 --> 00:43:21,200
areas in the draft in particular whether

890
00:43:19,040 --> 00:43:24,160
we should respect some keying limit

891
00:43:21,200 --> 00:43:25,200
and only ever encompass a single forward

892
00:43:24,160 --> 00:43:27,040
rolling key

893
00:43:25,200 --> 00:43:29,919
or whether we need to encompass having

894
00:43:27,040 --> 00:43:32,880
more than one forward declared key

895
00:43:29,920 --> 00:43:34,400
so there may also be other examples of

896
00:43:32,880 --> 00:43:35,520
test states that it would be worth

897
00:43:34,400 --> 00:43:37,040
looking into

898
00:43:35,520 --> 00:43:39,119
and we think we should leave open the

899
00:43:37,040 --> 00:43:40,640
possibility that people want us to put

900
00:43:39,119 --> 00:43:42,480
into a test bed state

901
00:43:40,640 --> 00:43:44,799
different states that we could reflect

902
00:43:42,480 --> 00:43:46,000
on as well so at this stage we'd like to

903
00:43:44,800 --> 00:43:48,079
continue discussion

904
00:43:46,000 --> 00:43:50,079
on the mailing lists and we think we'd

905
00:43:48,079 --> 00:43:52,839
like to aim towards working group last

906
00:43:50,079 --> 00:43:55,839
call in a future ietf

907
00:43:52,839 --> 00:43:55,839
click

908
00:43:57,839 --> 00:44:06,160
i think that's the end of this

909
00:44:01,200 --> 00:44:06,160
presentation is there any feedback or

910
00:44:06,839 --> 00:44:09,839
comments

911
00:44:10,480 --> 00:44:16,160
um george and the chairs uh

912
00:44:13,599 --> 00:44:18,000
this is administrative comment that the

913
00:44:16,160 --> 00:44:19,440
chat in meet echo is currently not

914
00:44:18,000 --> 00:44:21,920
working

915
00:44:19,440 --> 00:44:22,800
so people can't ask anything on the chat

916
00:44:21,920 --> 00:44:25,680
uh

917
00:44:22,800 --> 00:44:26,800
jabber is still working and mitakel is

918
00:44:25,680 --> 00:44:30,160
aware of the problem and

919
00:44:26,800 --> 00:44:33,200
are fixing it just fyi

920
00:44:30,160 --> 00:44:38,000
that's entertaining does that mean

921
00:44:33,200 --> 00:44:41,520
i got off scot-free with no questions

922
00:44:38,000 --> 00:44:43,119
tim has a question i'm sorry i couldn't

923
00:44:41,520 --> 00:44:45,680
hear you there was a terrible noise in

924
00:44:43,119 --> 00:44:45,680
my ears

925
00:44:46,800 --> 00:44:51,200
so i had a comment more than a question

926
00:44:49,680 --> 00:44:52,480
regarding the number of keys so

927
00:44:51,200 --> 00:44:56,160
currently the document

928
00:44:52,480 --> 00:44:57,920
allows well x keys to coexist

929
00:44:56,160 --> 00:44:59,598
and i think that generates quite a lot

930
00:44:57,920 --> 00:45:02,160
of complexity

931
00:44:59,599 --> 00:45:03,359
and you know it being complex to

932
00:45:02,160 --> 00:45:07,759
implement

933
00:45:03,359 --> 00:45:10,000
to begin with it might might be a um

934
00:45:07,760 --> 00:45:11,680
impediment to to you know taking on this

935
00:45:10,000 --> 00:45:14,240
work

936
00:45:11,680 --> 00:45:15,520
i think it may be simple simpler to just

937
00:45:14,240 --> 00:45:17,118
use two keys

938
00:45:15,520 --> 00:45:19,280
and i think it would be enough for the

939
00:45:17,119 --> 00:45:23,280
use case and envisioned

940
00:45:19,280 --> 00:45:23,280
so that's where that is coming from

941
00:45:31,440 --> 00:45:35,359
well since we're not looking for closure

942
00:45:33,839 --> 00:45:37,119
i think the best thing to do at this

943
00:45:35,359 --> 00:45:39,119
point is to carry this one forward into

944
00:45:37,119 --> 00:45:40,800
the mailing list and talk out the issues

945
00:45:39,119 --> 00:45:43,599
and then bring up working group last

946
00:45:40,800 --> 00:45:45,839
call at a later ietf

947
00:45:43,599 --> 00:45:47,040
there's potential here that we could

948
00:45:45,839 --> 00:45:49,759
actually

949
00:45:47,040 --> 00:45:51,759
see if fender-backed key distribution is

950
00:45:49,760 --> 00:45:53,200
able to demonstrate closure in a

951
00:45:51,760 --> 00:45:55,440
small enough period of time that it

952
00:45:53,200 --> 00:45:57,200
covers 99 of the cases

953
00:45:55,440 --> 00:45:59,520
and constructing complexity and a

954
00:45:57,200 --> 00:46:00,960
signing mechanism if we can demonstrate

955
00:45:59,520 --> 00:46:03,040
that vendor-backed role

956
00:46:00,960 --> 00:46:04,720
is adequate would be silly so another

957
00:46:03,040 --> 00:46:06,480
approach here is that we open up some

958
00:46:04,720 --> 00:46:08,640
channels with rp vendors

959
00:46:06,480 --> 00:46:09,680
and actually start discussing how they

960
00:46:08,640 --> 00:46:11,920
want to be told

961
00:46:09,680 --> 00:46:13,118
about necessary code updates against

962
00:46:11,920 --> 00:46:15,680
towel changes

963
00:46:13,119 --> 00:46:17,839
and if that cycle is closing nicely that

964
00:46:15,680 --> 00:46:20,078
would also be useful against this work

965
00:46:17,839 --> 00:46:22,160
and we would bring that back to the room

966
00:46:20,079 --> 00:46:23,200
i do think it's useful to document this

967
00:46:22,160 --> 00:46:24,640
kind of idea

968
00:46:23,200 --> 00:46:26,879
i think there's merit in having a

969
00:46:24,640 --> 00:46:28,319
signing technique but if it turns out

970
00:46:26,880 --> 00:46:29,200
that the community doesn't want to

971
00:46:28,319 --> 00:46:31,279
progress

972
00:46:29,200 --> 00:46:35,520
using inbound signaling to do this kind

973
00:46:31,280 --> 00:46:35,520
of key role there's no point forcing it

974
00:46:36,800 --> 00:46:44,319
um i think having it documented

975
00:46:40,720 --> 00:46:48,000
is worthwhile i think relying

976
00:46:44,319 --> 00:46:51,440
on consistency of vendor implementation

977
00:46:48,000 --> 00:46:57,359
is yet to be demonstrated and i'm with

978
00:46:51,440 --> 00:47:11,839
raw among security issues

979
00:46:57,359 --> 00:47:11,839
this is really the ioj anarchist

980
00:47:19,040 --> 00:47:24,640
if there is everyone i guess we'll skip

981
00:47:22,240 --> 00:47:26,160
to the next one george yes

982
00:47:24,640 --> 00:47:28,879
chris would you be prepared to show the

983
00:47:26,160 --> 00:47:38,558
slides for my next presentation

984
00:47:28,880 --> 00:47:41,440
certainly one second thank you

985
00:47:38,559 --> 00:47:42,720
here you go everyone this is george and

986
00:47:41,440 --> 00:47:45,599
i'd like to talk to you

987
00:47:42,720 --> 00:47:46,480
about the second draft of a non-working

988
00:47:45,599 --> 00:47:48,960
group draft

989
00:47:46,480 --> 00:47:50,839
on the rta or resource tagged

990
00:47:48,960 --> 00:47:53,280
attestations

991
00:47:50,839 --> 00:47:56,319
click

992
00:47:53,280 --> 00:47:57,040
so this is a draft of a mechanism to

993
00:47:56,319 --> 00:48:00,558
implement

994
00:47:57,040 --> 00:48:02,960
detached signatures we already have an

995
00:48:00,559 --> 00:48:05,440
oid that was allocated some years ago

996
00:48:02,960 --> 00:48:06,079
so we are legal in the cider ord

997
00:48:05,440 --> 00:48:08,880
namespace

998
00:48:06,079 --> 00:48:10,079
as an object to exist in manifests and

999
00:48:08,880 --> 00:48:12,319
our goal here

1000
00:48:10,079 --> 00:48:14,000
is to try and define a mechanism that

1001
00:48:12,319 --> 00:48:14,720
would work for business to business

1002
00:48:14,000 --> 00:48:17,280
purposes

1003
00:48:14,720 --> 00:48:18,799
standalone the only requirement a

1004
00:48:17,280 --> 00:48:20,559
relying party would have

1005
00:48:18,800 --> 00:48:23,359
apart from code that could understand

1006
00:48:20,559 --> 00:48:26,240
the asn.1 and the validation process

1007
00:48:23,359 --> 00:48:26,240
was a ta

1008
00:48:26,960 --> 00:48:32,400
ah i've been told that meat echo has

1009
00:48:29,920 --> 00:48:32,400
frozen

1010
00:48:32,480 --> 00:48:36,319
can i confirm that with anyone

1011
00:48:37,520 --> 00:48:44,800
uh it looks okay to me

1012
00:48:41,680 --> 00:48:47,279
okay then i'll carry on it is working

1013
00:48:44,800 --> 00:48:50,960
for me as well

1014
00:48:47,280 --> 00:48:54,000
okay i will carry that's what you heard

1015
00:48:50,960 --> 00:48:56,480
so the kinds

1016
00:48:54,000 --> 00:48:58,319
of context that we're thinking about

1017
00:48:56,480 --> 00:49:01,359
here

1018
00:48:58,319 --> 00:49:03,279
are validation which are essentially the

1019
00:49:01,359 --> 00:49:03,759
business to business private use where

1020
00:49:03,280 --> 00:49:07,520
people

1021
00:49:03,760 --> 00:49:10,559
are demanding proof of possession so

1022
00:49:07,520 --> 00:49:13,599
examples here would be bring your own ip

1023
00:49:10,559 --> 00:49:14,880
configuration formalism or letter of

1024
00:49:13,599 --> 00:49:16,960
authority context

1025
00:49:14,880 --> 00:49:18,559
and these are typically outside of

1026
00:49:16,960 --> 00:49:20,240
strict bgp

1027
00:49:18,559 --> 00:49:22,079
so they're not mechanisms where you

1028
00:49:20,240 --> 00:49:23,598
necessarily want to make a public

1029
00:49:22,079 --> 00:49:26,480
declaration

1030
00:49:23,599 --> 00:49:27,280
if you look at byo ip the current

1031
00:49:26,480 --> 00:49:30,319
mechanism

1032
00:49:27,280 --> 00:49:31,440
is using rowers to try and signal proof

1033
00:49:30,319 --> 00:49:32,960
of possession

1034
00:49:31,440 --> 00:49:34,800
but there actually is a problem

1035
00:49:32,960 --> 00:49:36,640
potentially for some

1036
00:49:34,800 --> 00:49:38,319
suppliers of service that they have to

1037
00:49:36,640 --> 00:49:40,480
declare an asn

1038
00:49:38,319 --> 00:49:42,400
in order to let the user make a rower

1039
00:49:40,480 --> 00:49:46,240
against their prefixes

1040
00:49:42,400 --> 00:49:48,160
going in to the state but the asn

1041
00:49:46,240 --> 00:49:51,118
may not be the right one that's actually

1042
00:49:48,160 --> 00:49:51,118
going to be used

1043
00:49:54,000 --> 00:49:57,280
so we have encompassed the multi-sign

1044
00:49:56,400 --> 00:49:59,839
model

1045
00:49:57,280 --> 00:50:02,079
and the reason is that rpki can create

1046
00:49:59,839 --> 00:50:04,880
situations where a single entity

1047
00:50:02,079 --> 00:50:07,040
may have more than one key over all the

1048
00:50:04,880 --> 00:50:07,760
resources that they have to declare into

1049
00:50:07,040 --> 00:50:10,079
use

1050
00:50:07,760 --> 00:50:11,280
so at the bare minimum there's the

1051
00:50:10,079 --> 00:50:13,520
potential need

1052
00:50:11,280 --> 00:50:15,119
to have more than one key even though

1053
00:50:13,520 --> 00:50:17,599
it's only one entity

1054
00:50:15,119 --> 00:50:19,520
who is using this mechanism but we do

1055
00:50:17,599 --> 00:50:22,240
think that there's potential interest in

1056
00:50:19,520 --> 00:50:23,759
multiple entities who share resources

1057
00:50:22,240 --> 00:50:26,479
signing business to business

1058
00:50:23,760 --> 00:50:29,040
declarations an example might be

1059
00:50:26,480 --> 00:50:31,359
someone who's performing the function of

1060
00:50:29,040 --> 00:50:31,920
aggregating lots of small fragments of

1061
00:50:31,359 --> 00:50:33,759
address

1062
00:50:31,920 --> 00:50:35,440
and is trying to demonstrate proof that

1063
00:50:33,760 --> 00:50:38,240
they have a collective state

1064
00:50:35,440 --> 00:50:40,160
that would be a covering less specific

1065
00:50:38,240 --> 00:50:40,959
in order to create more value in the

1066
00:50:40,160 --> 00:50:42,640
system

1067
00:50:40,960 --> 00:50:45,040
they'd need signatures from lots and

1068
00:50:42,640 --> 00:50:47,440
lots of different individuals

1069
00:50:45,040 --> 00:50:48,319
the mechanism we're using here is based

1070
00:50:47,440 --> 00:50:50,880
on cms

1071
00:50:48,319 --> 00:50:52,880
and i'd like to again thank russ housley

1072
00:50:50,880 --> 00:50:53,680
who gave us great information on how to

1073
00:50:52,880 --> 00:50:55,839
do things

1074
00:50:53,680 --> 00:50:55,839
click

1075
00:50:57,599 --> 00:51:01,839
so there have been no substantial

1076
00:50:59,839 --> 00:51:02,720
changes in the draft against the last

1077
00:51:01,839 --> 00:51:04,640
version

1078
00:51:02,720 --> 00:51:06,879
but we've added some authors because we

1079
00:51:04,640 --> 00:51:09,200
now have functioning implementations

1080
00:51:06,880 --> 00:51:11,920
we have two fully independent

1081
00:51:09,200 --> 00:51:14,879
implementations there is the ap nic code

1082
00:51:11,920 --> 00:51:17,520
that was released some time ago and we

1083
00:51:14,880 --> 00:51:18,960
have funded work in nl net labs to

1084
00:51:17,520 --> 00:51:22,079
implement rta

1085
00:51:18,960 --> 00:51:23,440
in krill and routinator this is a

1086
00:51:22,079 --> 00:51:26,079
compile time option

1087
00:51:23,440 --> 00:51:28,480
so it is not normally visible but the

1088
00:51:26,079 --> 00:51:31,119
great thing about this implementation is

1089
00:51:28,480 --> 00:51:32,480
it's completely viable in a self-hosted

1090
00:51:31,119 --> 00:51:34,240
environment

1091
00:51:32,480 --> 00:51:36,000
and if you read down you'll see that

1092
00:51:34,240 --> 00:51:39,040
there is also now a situation

1093
00:51:36,000 --> 00:51:41,119
that four of the five rirs supports

1094
00:51:39,040 --> 00:51:44,079
self-hosted rpki

1095
00:51:41,119 --> 00:51:46,319
so you can already use the rta mechanism

1096
00:51:44,079 --> 00:51:49,200
if you have internet address resource

1097
00:51:46,319 --> 00:51:50,960
under ap negaran lack nick and right and

1098
00:51:49,200 --> 00:51:54,319
there's absolutely no

1099
00:51:50,960 --> 00:51:56,960
modification required in any rir

1100
00:51:54,319 --> 00:51:58,800
system to perform this function so

1101
00:51:56,960 --> 00:52:00,960
nobody has to revise

1102
00:51:58,800 --> 00:52:03,119
their rpa agreement nobody has to

1103
00:52:00,960 --> 00:52:05,440
consider the legal implications

1104
00:52:03,119 --> 00:52:07,440
of allowing users to make declarations

1105
00:52:05,440 --> 00:52:08,240
of any kind they like about their

1106
00:52:07,440 --> 00:52:12,000
addresses

1107
00:52:08,240 --> 00:52:14,879
because this works self-hosted and this

1108
00:52:12,000 --> 00:52:17,119
is entirely private between you and

1109
00:52:14,880 --> 00:52:19,680
whoever you wish to share things with

1110
00:52:17,119 --> 00:52:20,880
with a footnote that the keys you use

1111
00:52:19,680 --> 00:52:24,160
almost certainly

1112
00:52:20,880 --> 00:52:26,480
will be visible in the global rpki

1113
00:52:24,160 --> 00:52:28,558
but the exact semantics of what you are

1114
00:52:26,480 --> 00:52:30,720
signing in this detached signature

1115
00:52:28,559 --> 00:52:33,040
that's private to you what do you want

1116
00:52:30,720 --> 00:52:35,359
to sign that's your business

1117
00:52:33,040 --> 00:52:35,359
click

1118
00:52:36,480 --> 00:52:41,839
so the only substantive question apart

1119
00:52:39,520 --> 00:52:42,400
from asking people to try out the krill

1120
00:52:41,839 --> 00:52:43,680
code

1121
00:52:42,400 --> 00:52:46,640
and see what they think of this

1122
00:52:43,680 --> 00:52:48,558
technology is to understand if this work

1123
00:52:46,640 --> 00:52:50,400
is interesting to cider ops

1124
00:52:48,559 --> 00:52:52,079
and we should seek adoption in this

1125
00:52:50,400 --> 00:52:53,920
forum or

1126
00:52:52,079 --> 00:52:55,680
if we should look in the community at

1127
00:52:53,920 --> 00:52:58,000
large about provisioning

1128
00:52:55,680 --> 00:52:59,279
of resources for future use in global

1129
00:52:58,000 --> 00:53:01,200
routing or in business

1130
00:52:59,280 --> 00:53:03,599
applications and find a different

1131
00:53:01,200 --> 00:53:07,759
working group to pursue this work

1132
00:53:03,599 --> 00:53:07,760
thank you click

1133
00:53:10,960 --> 00:53:14,079
no more clicks but there are three

1134
00:53:12,240 --> 00:53:17,839
questions randy i

1135
00:53:14,079 --> 00:53:20,160
j and arcus um i think you're naive that

1136
00:53:17,839 --> 00:53:20,160
some

1137
00:53:20,240 --> 00:53:26,839
tas may still consider that they

1138
00:53:23,839 --> 00:53:28,160
incur liability but that's their problem

1139
00:53:26,839 --> 00:53:31,759
and

1140
00:53:28,160 --> 00:53:34,078
the disease is bad um we

1141
00:53:31,760 --> 00:53:35,040
specific to be clear we specifically

1142
00:53:34,079 --> 00:53:38,079
asked for this

1143
00:53:35,040 --> 00:53:43,680
for the geo feeds

1144
00:53:38,079 --> 00:53:44,480
um signing to be able to sign a geo feed

1145
00:53:43,680 --> 00:53:47,680
to

1146
00:53:44,480 --> 00:53:48,880
have stronger attestation than how you

1147
00:53:47,680 --> 00:53:52,078
found it

1148
00:53:48,880 --> 00:53:52,880
so thanks for pulling this back in there

1149
00:53:52,079 --> 00:53:54,720
are

1150
00:53:52,880 --> 00:53:57,839
things i would quibble with but we can

1151
00:53:54,720 --> 00:53:57,839
take it offline

1152
00:53:58,240 --> 00:54:02,720
thank you thank you randy that's very

1153
00:54:01,680 --> 00:54:04,319
useful feedback

1154
00:54:02,720 --> 00:54:06,000
and i think you're right that it would

1155
00:54:04,319 --> 00:54:07,920
be naive to imagine there aren't

1156
00:54:06,000 --> 00:54:09,440
potential future risks

1157
00:54:07,920 --> 00:54:11,920
i think that's something that we will

1158
00:54:09,440 --> 00:54:13,200
have ap nick will have to discuss with

1159
00:54:11,920 --> 00:54:14,880
the other rir

1160
00:54:13,200 --> 00:54:17,279
and understand how the community at

1161
00:54:14,880 --> 00:54:18,240
large and the rir feel about their risk

1162
00:54:17,280 --> 00:54:20,800
exposure

1163
00:54:18,240 --> 00:54:22,640
we still see merit in this technology we

1164
00:54:20,800 --> 00:54:23,440
think it's useful but i would be foolish

1165
00:54:22,640 --> 00:54:39,839
to pretend

1166
00:54:23,440 --> 00:54:39,839
there are not potential pitfalls

1167
00:54:44,160 --> 00:54:48,000
let me state my affiliation for a change

1168
00:54:47,040 --> 00:54:50,839
keep forgetting

1169
00:54:48,000 --> 00:54:53,119
um sorry just a clarification a small

1170
00:54:50,839 --> 00:54:57,200
clarification um

1171
00:54:53,119 --> 00:55:01,520
so this can actually work outside of the

1172
00:54:57,200 --> 00:55:05,118
rpi repositories in the sense that

1173
00:55:01,520 --> 00:55:07,680
the cms would be signed under existing

1174
00:55:05,119 --> 00:55:12,079
rpki ca certificates but you wouldn't

1175
00:55:07,680 --> 00:55:15,200
necessarily see these uh objects

1176
00:55:12,079 --> 00:55:16,799
in the rpi itself so there might be use

1177
00:55:15,200 --> 00:55:19,759
cases for that as well

1178
00:55:16,799 --> 00:55:20,880
but just saying it's not necessary for

1179
00:55:19,760 --> 00:55:25,680
the validation

1180
00:55:20,880 --> 00:55:25,680
between two uh uh private parties

1181
00:55:25,920 --> 00:55:33,280
randy franklin i would strongly suspect

1182
00:55:30,000 --> 00:55:36,880
that these would not go

1183
00:55:33,280 --> 00:55:36,880
in the rpki period

1184
00:55:38,640 --> 00:55:44,160
so i think business to business

1185
00:55:41,799 --> 00:55:46,400
pre-provisioning

1186
00:55:44,160 --> 00:55:48,000
lies in that space where people actually

1187
00:55:46,400 --> 00:55:50,160
want privacy if i'm in

1188
00:55:48,000 --> 00:55:51,520
a business negotiation with a range of

1189
00:55:50,160 --> 00:55:53,520
cdn and

1190
00:55:51,520 --> 00:55:55,440
cloud hosting companies i don't

1191
00:55:53,520 --> 00:55:57,200
necessarily want people to infer my

1192
00:55:55,440 --> 00:55:59,760
future business intent

1193
00:55:57,200 --> 00:56:01,598
i've got a need for it to be private i

1194
00:55:59,760 --> 00:56:02,400
think where tim and i are trying to feel

1195
00:56:01,599 --> 00:56:04,319
our way

1196
00:56:02,400 --> 00:56:06,240
is that we think the system has to be

1197
00:56:04,319 --> 00:56:09,440
capable of working

1198
00:56:06,240 --> 00:56:11,839
without visibility in the

1199
00:56:09,440 --> 00:56:13,520
repository space but we didn't say it

1200
00:56:11,839 --> 00:56:16,319
was necessary that it never

1201
00:56:13,520 --> 00:56:18,000
existed in the repository space it's the

1202
00:56:16,319 --> 00:56:20,160
join between the two states

1203
00:56:18,000 --> 00:56:21,040
if you're saying it shouldn't be in

1204
00:56:20,160 --> 00:56:22,960
there

1205
00:56:21,040 --> 00:56:24,480
there is the potential need to

1206
00:56:22,960 --> 00:56:27,280
understand the oid

1207
00:56:24,480 --> 00:56:28,079
exists and objects could be created with

1208
00:56:27,280 --> 00:56:32,480
an oid

1209
00:56:28,079 --> 00:56:32,480
that's badged legal in this framework

1210
00:56:43,119 --> 00:56:49,760
ben chris then work online

1211
00:56:46,640 --> 00:56:51,118
um so first of all thanks for this i

1212
00:56:49,760 --> 00:56:51,680
think this is actually really really

1213
00:56:51,119 --> 00:56:55,280
useful

1214
00:56:51,680 --> 00:56:56,640
um i i was having an internal call here

1215
00:56:55,280 --> 00:56:58,079
the other day where

1216
00:56:56,640 --> 00:57:00,160
we were talking about a problem with

1217
00:56:58,079 --> 00:57:01,680
that this would solve straight off the

1218
00:57:00,160 --> 00:57:03,598
bat and that we're having to currently

1219
00:57:01,680 --> 00:57:07,118
work around using

1220
00:57:03,599 --> 00:57:09,520
rooting registry hacks currently um

1221
00:57:07,119 --> 00:57:10,400
on the question of whether it should be

1222
00:57:09,520 --> 00:57:13,520
visible in

1223
00:57:10,400 --> 00:57:15,680
repos or not um i think there are i

1224
00:57:13,520 --> 00:57:19,280
think there are use cases

1225
00:57:15,680 --> 00:57:19,520
um either way i think like you say when

1226
00:57:19,280 --> 00:57:21,200
you

1227
00:57:19,520 --> 00:57:22,799
when you when it's a signal of kind of

1228
00:57:21,200 --> 00:57:24,399
in intended business dealings then

1229
00:57:22,799 --> 00:57:26,000
probably that wants to be private but i

1230
00:57:24,400 --> 00:57:29,440
think there are also use cases

1231
00:57:26,000 --> 00:57:32,240
for this where um people

1232
00:57:29,440 --> 00:57:34,079
dealing with each other at quite an

1233
00:57:32,240 --> 00:57:36,078
arm's length

1234
00:57:34,079 --> 00:57:37,200
need to be able to communicate their

1235
00:57:36,079 --> 00:57:39,520
intention

1236
00:57:37,200 --> 00:57:40,399
and for those purposes requiring an

1237
00:57:39,520 --> 00:57:43,200
out-of-band

1238
00:57:40,400 --> 00:57:44,400
communication mechanism probably isn't

1239
00:57:43,200 --> 00:57:46,399
very helpful and being able to just

1240
00:57:44,400 --> 00:57:49,680
retrieve it using the usual

1241
00:57:46,400 --> 00:57:52,799
rpki fetches is

1242
00:57:49,680 --> 00:57:55,680
is more convenient in that case i'm

1243
00:57:52,799 --> 00:58:09,839
thinking of scenarios where for example

1244
00:57:55,680 --> 00:58:09,839
we have situations where custody

1245
00:58:20,839 --> 00:58:23,839
oh

1246
00:58:24,720 --> 00:58:29,359
i think there's been a parcel partial

1247
00:58:27,040 --> 00:58:31,119
disconnection or other failure

1248
00:58:29,359 --> 00:58:32,720
yes i think that failure was on my side

1249
00:58:31,119 --> 00:58:37,440
can you hear me again now no

1250
00:58:32,720 --> 00:58:38,720
yeah go ahead and reboot a vm

1251
00:58:37,440 --> 00:58:41,440
i don't know how much of what i was

1252
00:58:38,720 --> 00:58:41,439
saying got lost

1253
00:58:43,359 --> 00:58:48,319
it's fair to start over i think

1254
00:58:46,880 --> 00:58:49,599
so the short version rather than

1255
00:58:48,319 --> 00:58:50,960
repeating everything is i think there

1256
00:58:49,599 --> 00:58:54,000
are scenarios where

1257
00:58:50,960 --> 00:58:57,680
being able to publish these objects

1258
00:58:54,000 --> 00:58:59,119
in the the repositories is helpful

1259
00:58:57,680 --> 00:59:00,640
and i think there are situations where

1260
00:58:59,119 --> 00:59:01,440
it needs to remain private so i think we

1261
00:59:00,640 --> 00:59:04,480
need to

1262
00:59:01,440 --> 00:59:05,839
cater for both use cases explicitly

1263
00:59:04,480 --> 00:59:08,720
but overall i think this is very very

1264
00:59:05,839 --> 00:59:10,400
helpful and i'd like to volunteer to be

1265
00:59:08,720 --> 00:59:14,720
the person that bangs on aphro next door

1266
00:59:10,400 --> 00:59:14,720
until that becomes five out of five iris

1267
00:59:16,480 --> 00:59:21,599
thank you for that that input thank you

1268
00:59:19,520 --> 00:59:22,799
sorry about partial notes if i've missed

1269
00:59:21,599 --> 00:59:27,680
anything in

1270
00:59:22,799 --> 00:59:27,680
my typing here in codemd please let me

1271
00:59:30,839 --> 00:59:33,839
know

1272
00:59:36,079 --> 00:59:41,200
chris i'm done i'm handing back to you

1273
00:59:39,440 --> 00:59:43,119
okay i think there's still robert and

1274
00:59:41,200 --> 00:59:46,879
randy with questions so you might not be

1275
00:59:43,119 --> 00:59:49,280
done done

1276
00:59:46,880 --> 00:59:49,280
robert

1277
00:59:51,040 --> 00:59:56,000
yes hi um i i do agree with ben that

1278
00:59:54,319 --> 00:59:58,640
there is probably value in

1279
00:59:56,000 --> 01:00:00,640
both being able to show and hide the

1280
00:59:58,640 --> 01:00:02,240
actual signed objects

1281
01:00:00,640 --> 01:00:04,480
that are hanging at the very end of the

1282
01:00:02,240 --> 01:00:04,479
chain

1283
01:00:04,880 --> 01:00:10,880
but i do believe that the certificate

1284
01:00:08,720 --> 01:00:12,959
that is used to actually verify those

1285
01:00:10,880 --> 01:00:16,079
signatures

1286
01:00:12,960 --> 01:00:19,200
should be in the repository um

1287
01:00:16,079 --> 01:00:21,040
we have mechanisms we have all the oids

1288
01:00:19,200 --> 01:00:22,879
we have all the mechanisms we need

1289
01:00:21,040 --> 01:00:24,720
to actually put it in there and verify

1290
01:00:22,880 --> 01:00:28,559
that it's correct and so on

1291
01:00:24,720 --> 01:00:32,078
so personally i could see

1292
01:00:28,559 --> 01:00:34,480
um a way forward where the certificate

1293
01:00:32,079 --> 01:00:36,240
the end user certificate if you will is

1294
01:00:34,480 --> 01:00:37,040
in the repository in the manifest and

1295
01:00:36,240 --> 01:00:42,240
everywhere

1296
01:00:37,040 --> 01:00:44,880
but the object isn't

1297
01:00:42,240 --> 01:00:45,680
okay i think that's that's a valid model

1298
01:00:44,880 --> 01:00:47,440
we

1299
01:00:45,680 --> 01:00:49,839
thought quite hard about deliberately

1300
01:00:47,440 --> 01:00:50,160
designing not to need repositories but

1301
01:00:49,839 --> 01:00:52,960
the

1302
01:00:50,160 --> 01:00:55,200
asn1 if i remember it correctly is

1303
01:00:52,960 --> 01:00:58,000
capable of not having the full chain

1304
01:00:55,200 --> 01:01:00,078
it would be possible to only specify the

1305
01:00:58,000 --> 01:01:02,880
immediate ee cert of use

1306
01:01:00,079 --> 01:01:03,359
and depend on chain validation in the

1307
01:01:02,880 --> 01:01:05,920
normal

1308
01:01:03,359 --> 01:01:08,720
validated repo state so i don't think

1309
01:01:05,920 --> 01:01:11,200
that the asn.1 is going to preclude

1310
01:01:08,720 --> 01:01:12,000
that model of use it wasn't one we

1311
01:01:11,200 --> 01:01:13,439
foresaw

1312
01:01:12,000 --> 01:01:15,280
but that doesn't mean it can't be

1313
01:01:13,440 --> 01:01:18,319
encompassed

1314
01:01:15,280 --> 01:01:18,960
yeah i i totally agree i do see the

1315
01:01:18,319 --> 01:01:22,240
benefit

1316
01:01:18,960 --> 01:01:25,040
of being able to delegate the

1317
01:01:22,240 --> 01:01:26,640
food chain verification to the existing

1318
01:01:25,040 --> 01:01:28,079
mechanisms already

1319
01:01:26,640 --> 01:01:30,160
so the only thing you really need to

1320
01:01:28,079 --> 01:01:32,799
verify is the document itself and the

1321
01:01:30,160 --> 01:01:34,480
signature on it

1322
01:01:32,799 --> 01:01:36,880
and you can rely on everything else

1323
01:01:34,480 --> 01:01:39,040
being there already

1324
01:01:36,880 --> 01:01:39,040
kind

1325
01:01:44,799 --> 01:01:54,799
scaling issues and garbage collection

1326
01:01:52,720 --> 01:01:55,759
so the actual detached signatures

1327
01:01:54,799 --> 01:01:59,599
themselves

1328
01:01:55,760 --> 01:02:01,599
are reasonably small um if they contain

1329
01:01:59,599 --> 01:02:03,599
a full chain of pair inserts they're not

1330
01:02:01,599 --> 01:02:05,520
zero because they're not just the sig

1331
01:02:03,599 --> 01:02:06,880
and the necessary cert pointers but they

1332
01:02:05,520 --> 01:02:09,599
include cert state

1333
01:02:06,880 --> 01:02:12,720
but they're not inherently extremely

1334
01:02:09,599 --> 01:02:12,720
large objects so

1335
01:02:13,200 --> 01:02:17,279
they're the part of this that is things

1336
01:02:15,280 --> 01:02:18,640
do get into published repo state and

1337
01:02:17,280 --> 01:02:20,799
have to be dealt with

1338
01:02:18,640 --> 01:02:21,680
i think it's at the low to tolerable end

1339
01:02:20,799 --> 01:02:23,759
and mostly

1340
01:02:21,680 --> 01:02:26,240
um invalidation of the search chain

1341
01:02:23,760 --> 01:02:28,319
above the e so it would take care of it

1342
01:02:26,240 --> 01:02:30,160
unlike previous models of arbitrary

1343
01:02:28,319 --> 01:02:31,599
object where there was that problem of a

1344
01:02:30,160 --> 01:02:34,480
denial of service risk

1345
01:02:31,599 --> 01:02:36,400
that people might sign star wars vol 6

1346
01:02:34,480 --> 01:02:37,599
and then upload it into the repo and do

1347
01:02:36,400 --> 01:02:40,240
a massive attack

1348
01:02:37,599 --> 01:02:40,880
on all the relying parties this does not

1349
01:02:40,240 --> 01:02:44,319
expect

1350
01:02:40,880 --> 01:02:46,400
to ship the refereeing data

1351
01:02:44,319 --> 01:02:48,319
it's only the sig component that is

1352
01:02:46,400 --> 01:02:51,680
necessarily going to appear

1353
01:02:48,319 --> 01:02:54,160
if it were to appear at all so i i think

1354
01:02:51,680 --> 01:02:56,078
it's not dissimilar to a stale rower

1355
01:02:54,160 --> 01:02:58,078
situation randy

1356
01:02:56,079 --> 01:03:00,480
has potential to be garbage but it's

1357
01:02:58,079 --> 01:03:02,319
contained but it's not a non

1358
01:03:00,480 --> 01:03:17,839
zero problem and that might be worth

1359
01:03:02,319 --> 01:03:17,839
actually noting that in the document

1360
01:03:19,599 --> 01:03:24,480
still robert or did you finish up robert

1361
01:03:26,799 --> 01:03:30,880
i believe i finished and i believe i'm

1362
01:03:29,520 --> 01:03:33,520
not in the queue maybe i

1363
01:03:30,880 --> 01:03:34,720
am it just shows in the queue for me so

1364
01:03:33,520 --> 01:03:39,119
okay

1365
01:03:34,720 --> 01:03:42,160
so if there's no other questions

1366
01:03:39,119 --> 01:03:43,599
we're either done or if there's other

1367
01:03:42,160 --> 01:03:44,000
topics somebody wanted to bring up we

1368
01:03:43,599 --> 01:03:46,880
could

1369
01:03:44,000 --> 01:03:46,880
do that now

1370
01:03:47,680 --> 01:03:50,879
and the chat's not working so i guess

1371
01:03:49,200 --> 01:03:53,279
we'll just wait for somebody to

1372
01:03:50,880 --> 01:03:54,720
a few seconds or somebody to pop in the

1373
01:03:53,280 --> 01:03:55,599
queue if they have any questions they'd

1374
01:03:54,720 --> 01:03:59,839
like to or

1375
01:03:55,599 --> 01:03:59,839
topic they'd like to talk about

1376
01:04:04,559 --> 01:04:06,799
tim

1377
01:04:08,000 --> 01:04:10,960
yeah angels

1378
01:04:11,440 --> 01:04:15,520
yeah chris i thought that in an earlier

1379
01:04:13,760 --> 01:04:16,640
draft of the agenda that you wanted to

1380
01:04:15,520 --> 01:04:18,640
speak to the uh

1381
01:04:16,640 --> 01:04:21,279
parsing fallback discussion that's been

1382
01:04:18,640 --> 01:04:24,078
going on in various places

1383
01:04:21,280 --> 01:04:25,520
so are you still planning to do that or

1384
01:04:24,079 --> 01:04:28,160
not

1385
01:04:25,520 --> 01:04:29,759
uh i i had planned to but i think it

1386
01:04:28,160 --> 01:04:33,038
kind of closed itself out

1387
01:04:29,760 --> 01:04:35,200
i think the i think the long and the

1388
01:04:33,039 --> 01:04:37,200
shorter the conversation was

1389
01:04:35,200 --> 01:04:39,279
uh at least from my perspective that

1390
01:04:37,200 --> 01:04:40,160
that you know we designed something we

1391
01:04:39,280 --> 01:04:41,920
built it

1392
01:04:40,160 --> 01:04:43,520
then we went to go use it in operations

1393
01:04:41,920 --> 01:04:44,720
and realized oh gosh

1394
01:04:43,520 --> 01:04:47,839
maybe it works differently than we

1395
01:04:44,720 --> 01:04:49,919
expected and we need to adjust our

1396
01:04:47,839 --> 01:04:52,160
our plan process procedure and

1397
01:04:49,920 --> 01:04:54,400
operations a little bit

1398
01:04:52,160 --> 01:04:56,000
which i think is a perfectly fine thing

1399
01:04:54,400 --> 01:04:57,280
for cider apps to do that's kind of the

1400
01:04:56,000 --> 01:04:58,559
point of being here is

1401
01:04:57,280 --> 01:05:01,520
hey this thing is not working as we

1402
01:04:58,559 --> 01:05:05,039
expected let's go fix it

1403
01:05:01,520 --> 01:05:06,799
so right okay

1404
01:05:05,039 --> 01:05:08,079
yeah because i think there are two

1405
01:05:06,799 --> 01:05:11,280
discussions that

1406
01:05:08,079 --> 01:05:13,599
kind of got conflated one is around

1407
01:05:11,280 --> 01:05:15,760
what rfc's currently says that must be

1408
01:05:13,599 --> 01:05:17,200
done another discussion that's perhaps

1409
01:05:15,760 --> 01:05:20,400
much more useful

1410
01:05:17,200 --> 01:05:21,038
is about what the best thing to do would

1411
01:05:20,400 --> 01:05:23,599
be

1412
01:05:21,039 --> 01:05:24,400
and on that we already said that we are

1413
01:05:23,599 --> 01:05:26,240
willing to

1414
01:05:24,400 --> 01:05:27,920
to do the fallback and continue the

1415
01:05:26,240 --> 01:05:30,640
discussion on the

1416
01:05:27,920 --> 01:05:32,000
uh asking deprecation as a as a separate

1417
01:05:30,640 --> 01:05:34,720
effort

1418
01:05:32,000 --> 01:05:36,319
so maybe we don't need to say a whole

1419
01:05:34,720 --> 01:05:39,279
lot more about it right now

1420
01:05:36,319 --> 01:05:40,400
but then i want to reach out to my

1421
01:05:39,280 --> 01:05:43,520
co-authors on the

1422
01:05:40,400 --> 01:05:46,640
uh asking deprecation document now

1423
01:05:43,520 --> 01:05:46,960
and say okay let's let's see if we then

1424
01:05:46,640 --> 01:05:48,960
can

1425
01:05:46,960 --> 01:05:51,440
start that conversation again and move

1426
01:05:48,960 --> 01:05:55,359
that forward that would be very

1427
01:05:51,440 --> 01:05:58,400
um i would be very happy if we can

1428
01:05:55,359 --> 01:06:01,440
yeah i agree with you that uh

1429
01:05:58,400 --> 01:06:03,680
both the discussion got very uh

1430
01:06:01,440 --> 01:06:04,799
widely varied and not particularly

1431
01:06:03,680 --> 01:06:07,440
helpful at times

1432
01:06:04,799 --> 01:06:09,038
um and that a lot of it i think does

1433
01:06:07,440 --> 01:06:10,799
circle around

1434
01:06:09,039 --> 01:06:12,160
uh how are we going to move away from

1435
01:06:10,799 --> 01:06:15,200
rsync

1436
01:06:12,160 --> 01:06:17,359
if that's indeed a goal and my

1437
01:06:15,200 --> 01:06:18,480
personal not chair belief is that should

1438
01:06:17,359 --> 01:06:21,680
be a goal

1439
01:06:18,480 --> 01:06:24,960
but uh so as

1440
01:06:21,680 --> 01:06:26,960
as one of the co-authors i

1441
01:06:24,960 --> 01:06:28,880
i believe firmly that rsync was

1442
01:06:26,960 --> 01:06:30,640
something that got us to a useful place

1443
01:06:28,880 --> 01:06:32,240
but it wasn't ultimately the correct

1444
01:06:30,640 --> 01:06:36,078
protocol to use

1445
01:06:32,240 --> 01:06:39,359
and i think job has done a very good job

1446
01:06:36,079 --> 01:06:41,359
of saying that the

1447
01:06:39,359 --> 01:06:42,640
open apparent risks the denial of

1448
01:06:41,359 --> 01:06:44,839
service risks the

1449
01:06:42,640 --> 01:06:46,078
occlusion of data risks that lead

1450
01:06:44,839 --> 01:06:48,400
inexorably

1451
01:06:46,079 --> 01:06:50,400
to invalidation of significant

1452
01:06:48,400 --> 01:06:52,880
subcomponents of the

1453
01:06:50,400 --> 01:06:55,119
repository space just represent attacks

1454
01:06:52,880 --> 01:06:58,720
on the system which you would be stupid

1455
01:06:55,119 --> 01:07:00,400
to keep moving to a tls transport moving

1456
01:06:58,720 --> 01:07:02,558
to mechanisms that make that

1457
01:07:00,400 --> 01:07:04,319
harder no they're not guaranteed to

1458
01:07:02,559 --> 01:07:06,720
prevent all forms of attack

1459
01:07:04,319 --> 01:07:08,960
they close off enough paths of attack

1460
01:07:06,720 --> 01:07:10,558
that i think they have significant merit

1461
01:07:08,960 --> 01:07:12,000
and there's the additional thing that i

1462
01:07:10,559 --> 01:07:15,039
honestly believe

1463
01:07:12,000 --> 01:07:18,960
the cdn benefits the localization

1464
01:07:15,039 --> 01:07:20,720
the speed of closure to a bounded state

1465
01:07:18,960 --> 01:07:22,079
against the deltas visible in the

1466
01:07:20,720 --> 01:07:24,240
publication space

1467
01:07:22,079 --> 01:07:26,000
i think that it's a better protocol i

1468
01:07:24,240 --> 01:07:28,479
think rrdp

1469
01:07:26,000 --> 01:07:30,160
on a tls carrier is just the better

1470
01:07:28,480 --> 01:07:33,119
protocol now i know

1471
01:07:30,160 --> 01:07:34,558
we're talking about signed data i know

1472
01:07:33,119 --> 01:07:36,720
that in principle

1473
01:07:34,559 --> 01:07:38,480
channel security should not affect the

1474
01:07:36,720 --> 01:07:39,520
integrity of the data space we're

1475
01:07:38,480 --> 01:07:41,599
talking about

1476
01:07:39,520 --> 01:07:43,440
because all the elements assigned you

1477
01:07:41,599 --> 01:07:46,400
can know you're under

1478
01:07:43,440 --> 01:07:48,319
attack but the problem is the necessary

1479
01:07:46,400 --> 01:07:50,079
consequence in validation

1480
01:07:48,319 --> 01:07:52,000
for people who are trying to perform

1481
01:07:50,079 --> 01:07:53,760
decision logic in bgp

1482
01:07:52,000 --> 01:07:55,839
you're under attack what the hell are

1483
01:07:53,760 --> 01:07:56,960
you meant to do at some point if the

1484
01:07:55,839 --> 01:07:59,680
attack persists

1485
01:07:56,960 --> 01:08:01,520
your validation state is no longer valid

1486
01:07:59,680 --> 01:08:03,919
certificates have lifetimes

1487
01:08:01,520 --> 01:08:06,000
you're in a bad place so i think

1488
01:08:03,920 --> 01:08:07,920
protecting the integrity of this system

1489
01:08:06,000 --> 01:08:10,000
getting faster reconciliation and

1490
01:08:07,920 --> 01:08:12,240
closure moving to a protocol that's

1491
01:08:10,000 --> 01:08:16,080
amenable to being put into a cdn

1492
01:08:12,240 --> 01:08:19,120
is a no-brainer but the problem is

1493
01:08:16,080 --> 01:08:20,640
it's a transition and we're just crap to

1494
01:08:19,120 --> 01:08:24,559
use the technical language

1495
01:08:20,640 --> 01:08:26,799
at handling transitions in the ietf

1496
01:08:24,560 --> 01:08:28,000
but as a co-author of this draft i put

1497
01:08:26,799 --> 01:08:30,158
my hand up to

1498
01:08:28,000 --> 01:08:39,839
get back in the boxing room for another

1499
01:08:30,158 --> 01:08:39,839
round of chess boxing and try again

1500
01:08:42,000 --> 01:08:46,640
can i add something to that uh natalie

1501
01:08:45,120 --> 01:08:50,238
trenham and ripe ncc

1502
01:08:46,640 --> 01:08:53,120
speaking now as uh one of the uh

1503
01:08:50,238 --> 01:08:54,318
bunch of relying party providers that

1504
01:08:53,120 --> 01:08:57,278
are out there

1505
01:08:54,319 --> 01:08:58,480
um as you might have heard we decided to

1506
01:08:57,279 --> 01:09:01,839
discontinue

1507
01:08:58,479 --> 01:09:04,000
work on our validator in july next year

1508
01:09:01,839 --> 01:09:05,519
and we looked at the amount of work that

1509
01:09:04,000 --> 01:09:08,799
it would cost us to

1510
01:09:05,520 --> 01:09:11,440
implement the fallback scenario

1511
01:09:08,799 --> 01:09:13,839
from rdp to rsync and we came to the

1512
01:09:11,439 --> 01:09:17,040
conclusion that we cannot implement this

1513
01:09:13,839 --> 01:09:19,278
in time so we are

1514
01:09:17,040 --> 01:09:21,120
not going to implement fullback instead

1515
01:09:19,279 --> 01:09:24,719
we are going to focus on

1516
01:09:21,120 --> 01:09:35,839
our rdp being rock solid and

1517
01:09:24,719 --> 01:09:35,839
yeah that's it from us

1518
01:09:36,880 --> 01:09:39,120
tim

1519
01:09:45,759 --> 01:09:50,719
okay yeah um no yeah i don't really have

1520
01:09:48,880 --> 01:09:53,520
anything more to add to this uh

1521
01:09:50,719 --> 01:09:53,759
i believe chris attempted to ripen to

1522
01:09:53,520 --> 01:09:55,920
see

1523
01:09:53,759 --> 01:09:57,280
uh right and c formally ripens to see

1524
01:09:55,920 --> 01:10:01,199
another laughs

1525
01:09:57,280 --> 01:10:04,400
muscle memory i guess tongue muscle

1526
01:10:01,199 --> 01:10:07,120
um now i would say let's move forward on

1527
01:10:04,400 --> 01:10:08,799
on deprecate rsync we can have lengthy

1528
01:10:07,120 --> 01:10:13,120
discussions about

1529
01:10:08,800 --> 01:10:16,320
um how we quote various parts from rfcs

1530
01:10:13,120 --> 01:10:17,760
um but it's probably not all that

1531
01:10:16,320 --> 01:10:21,040
constructive to do so

1532
01:10:17,760 --> 01:10:25,040
so i would say let's move forward

1533
01:10:21,040 --> 01:10:25,040
okay okay that sounds terrific to me

1534
01:10:27,199 --> 01:10:31,839
any other topics

1535
01:10:40,000 --> 01:10:42,640
going once

1536
01:10:43,360 --> 01:10:45,839
going twice

1537
01:10:46,960 --> 01:10:51,840
okay uh i think

1538
01:10:50,080 --> 01:10:53,519
there's a couple action items left over

1539
01:10:51,840 --> 01:10:55,440
from the meeting here

1540
01:10:53,520 --> 01:10:57,120
one is it would be nice if alexander

1541
01:10:55,440 --> 01:10:59,759
could send an ad a

1542
01:10:57,120 --> 01:11:00,640
a working group last call request can we

1543
01:10:59,760 --> 01:11:02,560
in other words

1544
01:11:00,640 --> 01:11:04,480
hey can we relax last call my two

1545
01:11:02,560 --> 01:11:05,760
documents please on aspa

1546
01:11:04,480 --> 01:11:07,678
please read them and make sure there are

1547
01:11:05,760 --> 01:11:09,280
no comments or questions or unclear bits

1548
01:11:07,679 --> 01:11:13,920
and pieces

1549
01:11:09,280 --> 01:11:16,719
alexander please send a mail and

1550
01:11:13,920 --> 01:11:17,280
i think george you also have an adoption

1551
01:11:16,719 --> 01:11:20,400
request

1552
01:11:17,280 --> 01:11:22,159
buried in your two slides slide sets

1553
01:11:20,400 --> 01:11:24,080
so it would be good to email that to the

1554
01:11:22,159 --> 01:11:27,519
list as well

1555
01:11:24,080 --> 01:11:31,199
i will take that thank you

1556
01:11:27,520 --> 01:11:33,920
and i think that's

1557
01:11:31,199 --> 01:11:33,919
it for today

1558
01:11:34,640 --> 01:11:39,440
see you all in at least three months but

1559
01:11:37,199 --> 01:11:40,799
if we need to do something in between

1560
01:11:39,440 --> 01:11:42,799
uh please speak up on the mailing list

1561
01:11:40,800 --> 01:11:46,560
we can always arrange interim meetings

1562
01:11:42,800 --> 01:11:46,560
with uh i think two weeks notice so

1563
01:11:47,679 --> 01:11:52,560
thank you very much and see you at least

1564
01:11:50,080 --> 01:11:55,840
in three months

1565
01:11:52,560 --> 01:11:55,840
or four months but whatever

1566
01:12:27,840 --> 01:12:29,920
you

