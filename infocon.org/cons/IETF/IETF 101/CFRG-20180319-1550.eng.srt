1
00:00:11,610 --> 00:00:16,369
yes<font color="#E5E5E5"> ah actually yes</font>

2
00:00:17,760 --> 00:00:39,330
<font color="#E5E5E5">oh we should stop now</font><font color="#CCCCCC"> right to their</font>

3
00:00:20,699 --> 00:00:46,880
stuff yes<font color="#E5E5E5"> let me</font><font color="#CCCCCC"> do this part my</font>

4
00:00:39,330 --> 00:00:46,879
<font color="#CCCCCC">automatic good morning that</font><font color="#E5E5E5"> wasn't me</font>

5
00:00:47,390 --> 00:00:54,060
good afternoon

6
00:00:49,140 --> 00:00:55,890
I hope you are in the<font color="#E5E5E5"> right place this</font>

7
00:00:54,060 --> 00:00:59,520
<font color="#E5E5E5">is going to be</font><font color="#CCCCCC"> gripped a forum research</font>

8
00:00:55,890 --> 00:01:03,710
group and we have a<font color="#E5E5E5"> pretty full agenda</font>

9
00:00:59,520 --> 00:01:03,710
so let's get started

10
00:01:07,140 --> 00:01:16,140
so I'm<font color="#CCCCCC"> Alexei and Kenny</font><font color="#E5E5E5"> the other</font>

11
00:01:13,560 --> 00:01:23,219
co-chair<font color="#E5E5E5"> is sitting next to me so I hope</font>

12
00:01:16,140 --> 00:01:27,200
<font color="#E5E5E5">you know us we're going to start blue</font>

13
00:01:23,219 --> 00:01:38,429
sheets shortly<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> note-taker</font>

14
00:01:27,200 --> 00:01:44,009
thank you let's do this<font color="#E5E5E5"> so I hope you've</font>

15
00:01:38,429 --> 00:01:45,210
seen note well rules about participation

16
00:01:44,009 --> 00:01:56,880
apply to this session

17
00:01:45,210 --> 00:01:59,280
so same to ITF and<font color="#CCCCCC"> I RTF</font><font color="#E5E5E5"> we have a</font>

18
00:01:56,880 --> 00:01:59,850
<font color="#CCCCCC">jabber so people will can relay stuff</font>

19
00:01:59,280 --> 00:02:06,270
from jabber

20
00:01:59,850 --> 00:02:13,560
<font color="#E5E5E5">right I'll quickly start with the</font>

21
00:02:06,270 --> 00:02:15,959
document status we<font color="#E5E5E5"> finally have one more</font>

22
00:02:13,560 --> 00:02:18,530
document<font color="#E5E5E5"> in our Fe editors queue since</font>

23
00:02:15,959 --> 00:02:18,530
last time

24
00:02:18,659 --> 00:02:26,079
we also have actually<font color="#E5E5E5"> four documents</font>

25
00:02:23,519 --> 00:02:29,430
<font color="#CCCCCC">just about to be done so basically</font>

26
00:02:26,080 --> 00:02:31,480
<font color="#E5E5E5">Canyon I need to divide them and</font>

27
00:02:29,430 --> 00:02:45,010
Shepherd them<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> of the</font>

28
00:02:31,480 --> 00:02:48,370
<font color="#CCCCCC">process and</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have a couple</font><font color="#E5E5E5"> of</font>

29
00:02:45,010 --> 00:02:50,290
active documents verifiable random

30
00:02:48,370 --> 00:02:51,340
functions<font color="#E5E5E5"> will present it next time in</font>

31
00:02:50,290 --> 00:02:56,108
<font color="#CCCCCC">Manero</font>

32
00:02:51,340 --> 00:02:59,650
a couple of<font color="#CCCCCC"> pack documents and we have a</font>

33
00:02:56,109 --> 00:03:02,549
new document<font color="#CCCCCC"> from</font><font color="#E5E5E5"> both hoffman about</font>

34
00:02:59,650 --> 00:03:05,440
transition to post quantum cryptography

35
00:03:02,549 --> 00:03:08,799
<font color="#E5E5E5">so as far</font><font color="#CCCCCC"> as this one is concerned we</font>

36
00:03:05,440 --> 00:03:10,390
agreed to work on<font color="#E5E5E5"> the topic</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I think</font>

37
00:03:08,799 --> 00:03:12,159
the research group will decide whether

38
00:03:10,390 --> 00:03:14,018
<font color="#E5E5E5">this</font><font color="#CCCCCC"> document is going to be published</font>

39
00:03:12,159 --> 00:03:20,620
and<font color="#E5E5E5"> what exactly will end up with being</font>

40
00:03:14,019 --> 00:03:22,299
<font color="#E5E5E5">in</font><font color="#CCCCCC"> a document yeah we also have a couple</font>

41
00:03:20,620 --> 00:03:24,810
<font color="#E5E5E5">of expired document but</font><font color="#CCCCCC"> you know to be</font>

42
00:03:22,299 --> 00:03:27,280
<font color="#CCCCCC">fair we we have quite a lot of</font><font color="#E5E5E5"> things</font>

43
00:03:24,810 --> 00:03:33,609
documents to process anyway so I<font color="#E5E5E5"> don't</font>

44
00:03:27,280 --> 00:03:39,340
think<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a big deal so actually I</font>

45
00:03:33,609 --> 00:03:41,590
know<font color="#CCCCCC"> I should have</font><font color="#E5E5E5"> asked about this</font>

46
00:03:39,340 --> 00:03:47,680
earlier any agenda bashing so this is

47
00:03:41,590 --> 00:03:49,829
our agenda any<font color="#E5E5E5"> requests to move stuff</font>

48
00:03:47,680 --> 00:03:49,829
around

49
00:03:52,310 --> 00:03:56,920
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case let's start with</font>

50
00:04:22,280 --> 00:04:27,179
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> thank you my</font><font color="#E5E5E5"> name is Karthik</font>

51
00:04:25,440 --> 00:04:28,740
<font color="#E5E5E5">Karthikeyan</font><font color="#CCCCCC"> bhargavan and I'm going to</font>

52
00:04:27,180 --> 00:04:30,660
<font color="#E5E5E5">be talking about a new</font><font color="#CCCCCC"> initiative</font><font color="#E5E5E5"> called</font>

53
00:04:28,740 --> 00:04:32,690
<font color="#E5E5E5">hack</font><font color="#CCCCCC"> spec which</font><font color="#E5E5E5"> stands</font><font color="#CCCCCC"> for high</font>

54
00:04:30,660 --> 00:04:35,039
assurance<font color="#E5E5E5"> cryptographic software</font>

55
00:04:32,690 --> 00:04:37,080
assurance cryptographic specifications

56
00:04:35,039 --> 00:04:38,610
for which I need<font color="#CCCCCC"> your</font><font color="#E5E5E5"> help</font><font color="#CCCCCC"> so I'm going</font>

57
00:04:37,080 --> 00:04:39,840
to describe a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit of this this</font><font color="#CCCCCC"> is</font>

58
00:04:38,610 --> 00:04:41,550
an<font color="#E5E5E5"> initiative that came out</font><font color="#CCCCCC"> of a group</font>

59
00:04:39,840 --> 00:04:43,520
<font color="#E5E5E5">of researchers who matter</font><font color="#CCCCCC"> the sidelines</font>

60
00:04:41,550 --> 00:04:45,630
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> elbe all crypto this year and</font>

61
00:04:43,520 --> 00:04:47,159
this<font color="#E5E5E5"> is kind of a problem that we</font>

62
00:04:45,630 --> 00:04:50,039
identified and<font color="#CCCCCC"> we have a proposed</font>

63
00:04:47,160 --> 00:04:51,660
solution that you want<font color="#CCCCCC"> your help</font><font color="#E5E5E5"> them so</font>

64
00:04:50,039 --> 00:04:52,889
most of<font color="#E5E5E5"> us will agree</font><font color="#CCCCCC"> that implementing</font>

65
00:04:51,660 --> 00:04:54,510
crypto software which<font color="#CCCCCC"> meets</font>

66
00:04:52,889 --> 00:04:57,000
implementations of crypto primitives

67
00:04:54,510 --> 00:04:58,949
crypto constructions correctly is<font color="#CCCCCC"> hard</font>

68
00:04:57,000 --> 00:05:01,380
<font color="#CCCCCC">ok so if you go look at</font><font color="#E5E5E5"> the last two or</font>

69
00:04:58,949 --> 00:05:03,419
three<font color="#CCCCCC"> years of OpenSSL</font><font color="#E5E5E5"> series</font><font color="#CCCCCC"> you'll see</font>

70
00:05:01,380 --> 00:05:05,610
<font color="#E5E5E5">about half of them are memory safety</font>

71
00:05:03,419 --> 00:05:07,109
bugs like buffer overflows<font color="#E5E5E5"> about a</font>

72
00:05:05,610 --> 00:05:08,580
<font color="#E5E5E5">quarter or side</font><font color="#CCCCCC"> channel bugs like</font>

73
00:05:07,110 --> 00:05:09,900
branching on secrets and<font color="#E5E5E5"> about a quarter</font>

74
00:05:08,580 --> 00:05:12,270
of functional correctness bugs like

75
00:05:09,900 --> 00:05:13,830
carry propagation bugs the thing<font color="#E5E5E5"> about</font>

76
00:05:12,270 --> 00:05:15,389
these<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> bugs is that</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> low</font>

77
00:05:13,830 --> 00:05:17,219
probability which means if you test and

78
00:05:15,389 --> 00:05:18,900
test<font color="#E5E5E5"> and test the code it's still</font>

79
00:05:17,220 --> 00:05:21,000
unlikely<font color="#E5E5E5"> that you might hit the case</font>

80
00:05:18,900 --> 00:05:22,739
where this bug<font color="#E5E5E5"> might be trigger but an</font>

81
00:05:21,000 --> 00:05:23,789
attacker who knows<font color="#E5E5E5"> that the bug exists</font>

82
00:05:22,740 --> 00:05:26,370
might be able<font color="#E5E5E5"> to drive the</font>

83
00:05:23,789 --> 00:05:28,590
implementation towards about so testing

84
00:05:26,370 --> 00:05:30,449
doesn't work what works better is formal

85
00:05:28,590 --> 00:05:32,280
verification<font color="#E5E5E5"> but formal verification</font>

86
00:05:30,449 --> 00:05:34,979
requires a lot of effort<font color="#E5E5E5"> and expertise</font>

87
00:05:32,280 --> 00:05:36,869
so the group came<font color="#CCCCCC"> up with this idea that</font>

88
00:05:34,979 --> 00:05:39,330
<font color="#CCCCCC">maybe we can try to make the effort</font>

89
00:05:36,870 --> 00:05:42,810
required<font color="#E5E5E5"> for verifying modern crypto</font>

90
00:05:39,330 --> 00:05:44,280
primitives<font color="#E5E5E5"> lower the good news is that a</font>

91
00:05:42,810 --> 00:05:46,650
whole<font color="#CCCCCC"> bunch of research</font><font color="#E5E5E5"> groups are right</font>

92
00:05:44,280 --> 00:05:48,840
now be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use existing research</font>

93
00:05:46,650 --> 00:05:50,880
tools to verify fairly sophisticated

94
00:05:48,840 --> 00:05:52,500
cryptographic implementations<font color="#E5E5E5"> so there</font>

95
00:05:50,880 --> 00:05:55,340
are a bunch<font color="#CCCCCC"> of tools that will verify</font>

96
00:05:52,500 --> 00:05:57,060
<font color="#CCCCCC">see implementations of your primitives</font>

97
00:05:55,340 --> 00:05:58,799
including all the ones that<font color="#CCCCCC"> you can</font>

98
00:05:57,060 --> 00:06:00,840
<font color="#CCCCCC">imagine</font><font color="#E5E5E5"> there's also a few tools that</font>

99
00:05:58,800 --> 00:06:02,970
will verify<font color="#E5E5E5"> optimized assembly</font>

100
00:06:00,840 --> 00:06:04,469
implementations<font color="#E5E5E5"> and these tools have now</font>

101
00:06:02,970 --> 00:06:07,020
reached a level of<font color="#E5E5E5"> maturity that</font><font color="#CCCCCC"> they're</font>

102
00:06:04,470 --> 00:06:09,930
<font color="#E5E5E5">being included in production</font><font color="#CCCCCC"> software</font>

103
00:06:07,020 --> 00:06:11,190
like<font color="#E5E5E5"> boarding SSL NSS</font><font color="#CCCCCC"> s2 N and so on</font>

104
00:06:09,930 --> 00:06:16,469
<font color="#CCCCCC">actually using formal verification</font>

105
00:06:11,190 --> 00:06:17,639
techniques so so the<font color="#CCCCCC"> question is well</font>

106
00:06:16,469 --> 00:06:19,229
what<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> problem</font>

107
00:06:17,639 --> 00:06:21,539
the<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> takes a lot of</font>

108
00:06:19,229 --> 00:06:22,330
effort<font color="#CCCCCC"> so how do you how do you actually</font>

109
00:06:21,539 --> 00:06:24,520
verify

110
00:06:22,330 --> 00:06:25,359
a<font color="#E5E5E5"> crypto implementation well the first</font>

111
00:06:24,520 --> 00:06:27,280
<font color="#E5E5E5">thing you have to do is to write a</font>

112
00:06:25,360 --> 00:06:28,930
specification that captures our desired

113
00:06:27,280 --> 00:06:30,758
goals it could be like functional

114
00:06:28,930 --> 00:06:32,259
<font color="#E5E5E5">correctness memory</font><font color="#CCCCCC"> safety some specific</font>

115
00:06:30,759 --> 00:06:32,770
<font color="#E5E5E5">kinds of side channel</font><font color="#CCCCCC"> resistance that</font>

116
00:06:32,259 --> 00:06:34,419
you<font color="#E5E5E5"> need</font>

117
00:06:32,770 --> 00:06:36,938
even your cryptographic security<font color="#E5E5E5"> goals</font>

118
00:06:34,419 --> 00:06:38,258
and then we write your implementation

119
00:06:36,939 --> 00:06:40,830
and prove that<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> implementation</font>

120
00:06:38,259 --> 00:06:43,000
<font color="#E5E5E5">meets the spec that</font><font color="#CCCCCC"> you set out first</font>

121
00:06:40,830 --> 00:06:45,938
okay<font color="#E5E5E5"> so this both of</font><font color="#CCCCCC"> these steps</font>

122
00:06:43,000 --> 00:06:46,930
<font color="#CCCCCC">actually require work the if you go look</font>

123
00:06:45,939 --> 00:06:49,120
at<font color="#E5E5E5"> the various tools that are available</font>

124
00:06:46,930 --> 00:06:50,710
<font color="#CCCCCC">right</font><font color="#E5E5E5"> now most of us agree on what the</font>

125
00:06:49,120 --> 00:06:53,110
<font color="#CCCCCC">implementation language should</font><font color="#E5E5E5"> be you</font>

126
00:06:50,710 --> 00:06:54,969
usually see<font color="#CCCCCC"> your assembly but there is a</font>

127
00:06:53,110 --> 00:06:56,680
wide variety of specification languages

128
00:06:54,969 --> 00:06:58,840
<font color="#E5E5E5">so some people write specifications</font><font color="#CCCCCC"> in</font>

129
00:06:56,680 --> 00:07:00,969
<font color="#E5E5E5">general-purpose logical languages like</font>

130
00:06:58,840 --> 00:07:02,710
<font color="#CCCCCC">cork and F star other people write it in</font>

131
00:07:00,969 --> 00:07:05,199
domain-specific languages like<font color="#E5E5E5"> easy</font>

132
00:07:02,710 --> 00:07:06,520
crypt and<font color="#CCCCCC"> crypto and the reason we</font><font color="#E5E5E5"> write</font>

133
00:07:05,199 --> 00:07:08,139
it<font color="#CCCCCC"> in these</font><font color="#E5E5E5"> languages</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> these</font>

134
00:07:06,520 --> 00:07:09,520
<font color="#E5E5E5">languages which see specification</font>

135
00:07:08,139 --> 00:07:11,830
<font color="#E5E5E5">languages are particularly</font><font color="#CCCCCC"> geared</font>

136
00:07:09,520 --> 00:07:15,669
towards a specific verification method

137
00:07:11,830 --> 00:07:17,229
that these tools are using however what

138
00:07:15,669 --> 00:07:18,940
it means is that the<font color="#E5E5E5"> first step any of</font>

139
00:07:17,229 --> 00:07:20,979
us has to do when verifying code is to

140
00:07:18,940 --> 00:07:23,289
take the beautiful<font color="#E5E5E5"> pseudocode or text</font>

141
00:07:20,979 --> 00:07:26,020
written<font color="#E5E5E5"> in your other C's and encode it</font>

142
00:07:23,289 --> 00:07:28,210
in the specific<font color="#E5E5E5"> very specification</font>

143
00:07:26,020 --> 00:07:30,609
language that you have this step is

144
00:07:28,210 --> 00:07:33,099
quite error-prone quite painful<font color="#E5E5E5"> but</font>

145
00:07:30,610 --> 00:07:34,659
<font color="#E5E5E5">actually is needed because this is what</font>

146
00:07:33,099 --> 00:07:36,669
we need<font color="#E5E5E5"> in order to get the verification</font>

147
00:07:34,659 --> 00:07:38,440
tool to<font color="#CCCCCC"> work on the</font><font color="#E5E5E5"> other hand the</font>

148
00:07:36,669 --> 00:07:40,060
negative is that<font color="#E5E5E5"> the resulting spec</font>

149
00:07:38,440 --> 00:07:41,979
actually<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> quite different from the</font>

150
00:07:40,060 --> 00:07:44,889
<font color="#CCCCCC">RSC so it's difficult to understand what</font>

151
00:07:41,979 --> 00:07:46,270
exactly<font color="#E5E5E5"> we are proving right so this is</font>

152
00:07:44,889 --> 00:07:47,860
the kind<font color="#CCCCCC"> of problems that came</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> a</font>

153
00:07:46,270 --> 00:07:49,900
whole<font color="#CCCCCC"> bunch of us met with crypto</font>

154
00:07:47,860 --> 00:07:51,190
developers in the series<font color="#E5E5E5"> of workshops</font>

155
00:07:49,900 --> 00:07:53,739
called hacks which is on the side of

156
00:07:51,190 --> 00:07:55,240
<font color="#E5E5E5">real world crypto and the developers</font>

157
00:07:53,740 --> 00:07:56,979
essentially said well you guys have<font color="#E5E5E5"> lots</font>

158
00:07:55,240 --> 00:07:58,360
and<font color="#E5E5E5"> lots</font><font color="#CCCCCC"> of proofs but we don't we don't</font>

159
00:07:56,979 --> 00:08:00,669
understand what you're proving<font color="#CCCCCC"> ok</font>

160
00:07:58,360 --> 00:08:02,529
because the proofs are relying on the

161
00:08:00,669 --> 00:08:04,628
specification written in some obscure

162
00:08:02,529 --> 00:08:07,389
language that we don't understand<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font>

163
00:08:04,629 --> 00:08:09,129
<font color="#CCCCCC">don't have the time to learn so this is</font>

164
00:08:07,389 --> 00:08:10,839
where the idea<font color="#CCCCCC"> for hack spec came from</font>

165
00:08:09,129 --> 00:08:13,389
which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea that we need</font><font color="#CCCCCC"> a</font>

166
00:08:10,839 --> 00:08:15,099
<font color="#E5E5E5">language which can be which has a well</font>

167
00:08:13,389 --> 00:08:17,710
<font color="#CCCCCC">understood syntax and semantics that</font>

168
00:08:15,099 --> 00:08:19,479
<font color="#CCCCCC">both developers and crypto designers and</font>

169
00:08:17,710 --> 00:08:22,270
<font color="#E5E5E5">people are writing specs like the I like</font>

170
00:08:19,479 --> 00:08:24,128
<font color="#E5E5E5">the CFR G and so on can understand and</font>

171
00:08:22,270 --> 00:08:27,940
read and write as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> be used as</font>

172
00:08:24,129 --> 00:08:29,710
a basis for formal verification<font color="#E5E5E5"> so the</font>

173
00:08:27,940 --> 00:08:32,110
design goals for hack spec<font color="#CCCCCC"> which is a</font>

174
00:08:29,710 --> 00:08:34,689
new high assurance crypto specification

175
00:08:32,110 --> 00:08:36,140
language are the following<font color="#E5E5E5"> you want the</font>

176
00:08:34,690 --> 00:08:37,730
specs<font color="#CCCCCC"> that we write</font><font color="#E5E5E5"> to be really</font><font color="#CCCCCC"> set</font>

177
00:08:36,140 --> 00:08:39,260
<font color="#CCCCCC">synched</font><font color="#E5E5E5"> and readable so that you can</font>

178
00:08:37,730 --> 00:08:41,180
<font color="#CCCCCC">actually the people in this room</font><font color="#E5E5E5"> can</font>

179
00:08:39,260 --> 00:08:42,980
<font color="#CCCCCC">read and write</font><font color="#E5E5E5"> these specs and that they</font>

180
00:08:41,179 --> 00:08:45,620
can<font color="#E5E5E5"> be integrated as</font><font color="#CCCCCC"> pseudocode in to</font>

181
00:08:42,980 --> 00:08:47,390
RFC's we want the this<font color="#CCCCCC"> X to be</font>

182
00:08:45,620 --> 00:08:49,160
executable<font color="#CCCCCC"> so they can actually</font><font color="#E5E5E5"> be</font>

183
00:08:47,390 --> 00:08:50,540
treated<font color="#E5E5E5"> as reference implementations and</font>

184
00:08:49,160 --> 00:08:52,610
<font color="#E5E5E5">they will pass test vectors and so on</font>

185
00:08:50,540 --> 00:08:54,650
and we actually<font color="#E5E5E5"> want them to have a</font>

186
00:08:52,610 --> 00:08:56,690
clean syntax and compact formal

187
00:08:54,650 --> 00:08:58,189
semantics<font color="#E5E5E5"> so we all can understand them</font>

188
00:08:56,690 --> 00:09:00,200
and<font color="#E5E5E5"> they can be used as a basis for</font>

189
00:08:58,190 --> 00:09:01,970
formal verification by a variety<font color="#CCCCCC"> of</font>

190
00:09:00,200 --> 00:09:04,880
tools<font color="#CCCCCC"> ok so that's the</font><font color="#E5E5E5"> goal</font><font color="#CCCCCC"> that you're</font>

191
00:09:01,970 --> 00:09:06,380
going<font color="#CCCCCC"> for so we have a first design it's</font>

192
00:09:04,880 --> 00:09:07,610
a very preliminary design and looking

193
00:09:06,380 --> 00:09:11,600
for<font color="#CCCCCC"> feedback you're all looking for</font>

194
00:09:07,610 --> 00:09:12,950
feedback<font color="#CCCCCC"> on this and</font><font color="#E5E5E5"> we went around and</font>

195
00:09:11,600 --> 00:09:14,570
<font color="#CCCCCC">looked at various RFC's that have been</font>

196
00:09:12,950 --> 00:09:17,510
standardized recently and we<font color="#E5E5E5"> found that</font>

197
00:09:14,570 --> 00:09:19,460
<font color="#E5E5E5">most symmetric crypto</font><font color="#CCCCCC"> Hirsi seem to be</font>

198
00:09:17,510 --> 00:09:21,290
using<font color="#E5E5E5"> pseudocode +</font><font color="#CCCCCC"> c reference</font>

199
00:09:19,460 --> 00:09:22,490
implementations but anything that<font color="#CCCCCC"> uses</font>

200
00:09:21,290 --> 00:09:24,650
field arithmetic seems to be using

201
00:09:22,490 --> 00:09:26,330
<font color="#CCCCCC">Python reference</font><font color="#E5E5E5"> implementations so we</font>

202
00:09:24,650 --> 00:09:28,160
said<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> Python is a language to</font>

203
00:09:26,330 --> 00:09:31,100
start<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it seems to be used by quite</font>

204
00:09:28,160 --> 00:09:33,560
<font color="#E5E5E5">a few developers and designers as</font>

205
00:09:31,100 --> 00:09:36,650
prototype for prototyping<font color="#E5E5E5"> and testing so</font>

206
00:09:33,560 --> 00:09:39,050
<font color="#E5E5E5">we pick a subset</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Python 3.6 extended</font>

207
00:09:36,650 --> 00:09:40,459
with type annotations<font color="#E5E5E5"> what is the</font><font color="#CCCCCC"> subset</font>

208
00:09:39,050 --> 00:09:42,859
well it's a really really minimal subset

209
00:09:40,460 --> 00:09:45,080
<font color="#E5E5E5">we have like</font><font color="#CCCCCC"> machine integers</font><font color="#E5E5E5"> we have</font>

210
00:09:42,860 --> 00:09:48,350
big<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> and we have</font><font color="#E5E5E5"> arrays and not</font>

211
00:09:45,080 --> 00:09:49,520
much else<font color="#CCCCCC"> okay we might add things as we</font>

212
00:09:48,350 --> 00:09:50,870
need them<font color="#E5E5E5"> but you really</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> keep</font>

213
00:09:49,520 --> 00:09:52,130
this<font color="#CCCCCC"> minimal because you want this</font><font color="#E5E5E5"> to be</font>

214
00:09:50,870 --> 00:09:55,040
<font color="#CCCCCC">a really</font><font color="#E5E5E5"> compact and minimal</font>

215
00:09:52,130 --> 00:09:56,840
domain-specific language the types are

216
00:09:55,040 --> 00:09:59,449
useful in two ways they allow us<font color="#E5E5E5"> to</font>

217
00:09:56,840 --> 00:10:01,460
<font color="#CCCCCC">catch very simple</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> silly errors like</font>

218
00:09:59,450 --> 00:10:04,220
writing into an array out of bounds or

219
00:10:01,460 --> 00:10:08,090
or forgetting<font color="#E5E5E5"> to add one or my subtract</font>

220
00:10:04,220 --> 00:10:10,640
one and<font color="#CCCCCC"> so on but</font><font color="#E5E5E5"> they also help us to</font>

221
00:10:08,090 --> 00:10:12,350
do very<font color="#CCCCCC"> precise translations into</font>

222
00:10:10,640 --> 00:10:15,140
<font color="#E5E5E5">various other formal languages which are</font>

223
00:10:12,350 --> 00:10:17,360
usually typed<font color="#E5E5E5"> so in particular we have</font>

224
00:10:15,140 --> 00:10:19,910
compilers right now to F star<font color="#E5E5E5"> there're</font>

225
00:10:17,360 --> 00:10:21,710
<font color="#E5E5E5">already</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> working to Easy Clip that is</font>

226
00:10:19,910 --> 00:10:23,420
on the way and<font color="#E5E5E5"> other compilers that</font><font color="#CCCCCC"> we</font>

227
00:10:21,710 --> 00:10:25,790
are developing for languages<font color="#CCCCCC"> like crypto</font>

228
00:10:23,420 --> 00:10:27,829
<font color="#CCCCCC">land so if you write one</font><font color="#E5E5E5"> speck in</font><font color="#CCCCCC"> hacks</font>

229
00:10:25,790 --> 00:10:29,810
<font color="#CCCCCC">pack which looks like</font><font color="#E5E5E5"> Python with a few</font>

230
00:10:27,830 --> 00:10:32,090
more<font color="#E5E5E5"> type annotations you</font><font color="#CCCCCC"> will be able</font>

231
00:10:29,810 --> 00:10:34,160
<font color="#E5E5E5">to get for free</font><font color="#CCCCCC"> formal specifications in</font>

232
00:10:32,090 --> 00:10:36,200
all of these<font color="#E5E5E5"> different</font><font color="#CCCCCC"> languages</font><font color="#E5E5E5"> we also</font>

233
00:10:34,160 --> 00:10:38,209
have a building a<font color="#CCCCCC"> library of common</font>

234
00:10:36,200 --> 00:10:40,130
constructions<font color="#E5E5E5"> and specifications</font><font color="#CCCCCC"> we have</font>

235
00:10:38,210 --> 00:10:41,720
written<font color="#E5E5E5"> quite a</font><font color="#CCCCCC"> few examples</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we need</font>

236
00:10:40,130 --> 00:10:43,670
help to write more<font color="#E5E5E5"> because you want to</font>

237
00:10:41,720 --> 00:10:46,910
basically<font color="#E5E5E5"> exercise this language quite a</font>

238
00:10:43,670 --> 00:10:49,240
bit more what does<font color="#E5E5E5"> it look</font><font color="#CCCCCC"> like well</font>

239
00:10:46,910 --> 00:10:52,870
here's an<font color="#E5E5E5"> example this is the</font>

240
00:10:49,240 --> 00:10:56,620
<font color="#CCCCCC">matic of poli one 3:05 it's a very small</font>

241
00:10:52,870 --> 00:10:57,970
<font color="#E5E5E5">sort of fragment of the</font><font color="#CCCCCC"> speck</font><font color="#E5E5E5"> as you can</font>

242
00:10:56,620 --> 00:10:59,350
expect it's Python there's nothing

243
00:10:57,970 --> 00:11:00,970
special<font color="#E5E5E5"> happening here there's a prime</font>

244
00:10:59,350 --> 00:11:03,010
there's addition and subtraction and

245
00:11:00,970 --> 00:11:05,080
<font color="#CCCCCC">multiplication on this on this field</font>

246
00:11:03,010 --> 00:11:05,980
which is modulo the prime but<font color="#E5E5E5"> the</font>

247
00:11:05,080 --> 00:11:08,290
interesting<font color="#CCCCCC"> thing there is we're</font>

248
00:11:05,980 --> 00:11:10,390
defining a type<font color="#E5E5E5"> called</font><font color="#CCCCCC"> FLM which is a</font>

249
00:11:08,290 --> 00:11:12,189
refinement type it says this is a type

250
00:11:10,390 --> 00:11:14,380
of<font color="#CCCCCC"> element set up between zero and</font><font color="#E5E5E5"> prime</font>

251
00:11:12,190 --> 00:11:16,209
minus<font color="#CCCCCC"> one</font><font color="#E5E5E5"> this means that everywhere</font><font color="#CCCCCC"> in</font>

252
00:11:14,380 --> 00:11:18,520
the spec where we use the type<font color="#CCCCCC"> FLM we</font>

253
00:11:16,209 --> 00:11:21,040
will be implicitly<font color="#E5E5E5"> asking the</font>

254
00:11:18,520 --> 00:11:22,720
verification tool to prove that at this

255
00:11:21,040 --> 00:11:25,240
point the value<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> are dealing</font><font color="#E5E5E5"> with</font>

256
00:11:22,720 --> 00:11:27,160
is in<font color="#E5E5E5"> the field is between zero</font><font color="#CCCCCC"> and a P</font>

257
00:11:25,240 --> 00:11:29,410
minus<font color="#CCCCCC"> one</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can put</font><font color="#E5E5E5"> many other such</font>

258
00:11:27,160 --> 00:11:31,390
constraints here's a fragment<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

259
00:11:29,410 --> 00:11:33,100
charger 20 spec that we wrote again

260
00:11:31,390 --> 00:11:34,839
<font color="#CCCCCC">looks just like Python it's nothing very</font>

261
00:11:33,100 --> 00:11:37,029
surprising<font color="#CCCCCC"> except it as a few more type</font>

262
00:11:34,839 --> 00:11:38,649
annotations<font color="#E5E5E5"> in particular we are asking</font>

263
00:11:37,029 --> 00:11:41,920
<font color="#E5E5E5">that all the</font><font color="#CCCCCC"> array indexes that you use</font>

264
00:11:38,649 --> 00:11:43,570
are between 0 and 15 which means that

265
00:11:41,920 --> 00:11:46,029
you will<font color="#E5E5E5"> never accidentally access the</font>

266
00:11:43,570 --> 00:11:47,440
<font color="#CCCCCC">state array outside these bonds ok</font><font color="#E5E5E5"> again</font>

267
00:11:46,029 --> 00:11:48,939
this is<font color="#E5E5E5"> just a sanity check but it's</font>

268
00:11:47,440 --> 00:11:51,040
useful<font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of put this in and we</font>

269
00:11:48,940 --> 00:11:54,010
need them for<font color="#CCCCCC"> our formal models later on</font>

270
00:11:51,040 --> 00:11:55,810
anyway<font color="#E5E5E5"> so once you write specs in this</font>

271
00:11:54,010 --> 00:11:57,939
<font color="#CCCCCC">language what you get is for free you</font>

272
00:11:55,810 --> 00:12:00,099
get<font color="#E5E5E5"> compiled a compilation into models</font>

273
00:11:57,940 --> 00:12:01,720
like<font color="#E5E5E5"> this which</font><font color="#CCCCCC"> is a model</font><font color="#E5E5E5"> in a star of</font>

274
00:12:00,100 --> 00:12:03,279
charge at many and then you'll be able

275
00:12:01,720 --> 00:12:05,800
<font color="#E5E5E5">to prove that C code that looks like</font>

276
00:12:03,279 --> 00:12:07,689
<font color="#CCCCCC">this implements the spec that we</font><font color="#E5E5E5"> started</font>

277
00:12:05,800 --> 00:12:09,430
<font color="#E5E5E5">off</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> so you just write</font><font color="#CCCCCC"> the spec</font><font color="#E5E5E5"> and</font>

278
00:12:07,690 --> 00:12:11,200
<font color="#E5E5E5">then we that be various tools that</font><font color="#CCCCCC"> will</font>

279
00:12:09,430 --> 00:12:13,689
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to prove</font><font color="#CCCCCC"> that assembly in C and</font>

280
00:12:11,200 --> 00:12:15,820
Java<font color="#E5E5E5"> and</font><font color="#CCCCCC"> LLVM or whatever meets this</font>

281
00:12:13,690 --> 00:12:17,820
<font color="#E5E5E5">high-level spec and yes we can verify</font>

282
00:12:15,820 --> 00:12:20,020
code that uses<font color="#E5E5E5"> highly</font><font color="#CCCCCC"> optimized</font>

283
00:12:17,820 --> 00:12:21,579
instructions including vectorization<font color="#E5E5E5"> and</font>

284
00:12:20,020 --> 00:12:26,020
so on there<font color="#E5E5E5"> are tools that will do that</font>

285
00:12:21,579 --> 00:12:28,510
<font color="#CCCCCC">for you</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> coming to the end</font><font color="#E5E5E5"> of my talk</font>

286
00:12:26,020 --> 00:12:32,020
what we need<font color="#E5E5E5"> here what I am</font><font color="#CCCCCC"> here is that</font>

287
00:12:28,510 --> 00:12:34,779
we need some help<font color="#CCCCCC"> we want your</font><font color="#E5E5E5"> help in</font>

288
00:12:32,020 --> 00:12:36,130
promoting high assurance<font color="#E5E5E5"> implementations</font>

289
00:12:34,779 --> 00:12:40,060
for<font color="#E5E5E5"> the standards</font><font color="#CCCCCC"> that are coming</font><font color="#E5E5E5"> out of</font>

290
00:12:36,130 --> 00:12:42,370
<font color="#E5E5E5">this body in particular</font><font color="#CCCCCC"> if any of you is</font>

291
00:12:40,060 --> 00:12:44,410
writing a new crypto primitive<font color="#E5E5E5"> or has</font>

292
00:12:42,370 --> 00:12:46,810
just<font color="#CCCCCC"> recently</font><font color="#E5E5E5"> standardized something</font>

293
00:12:44,410 --> 00:12:48,579
maybe<font color="#E5E5E5"> you want to write your</font><font color="#CCCCCC"> pseudo code</font>

294
00:12:46,810 --> 00:12:49,959
<font color="#E5E5E5">and hack spec</font><font color="#CCCCCC"> maybe in addition</font><font color="#E5E5E5"> to your</font>

295
00:12:48,579 --> 00:12:51,969
pseudo code you<font color="#E5E5E5"> want to write a</font>

296
00:12:49,959 --> 00:12:54,459
<font color="#E5E5E5">reference implementation hack spec so</font>

297
00:12:51,970 --> 00:12:57,339
come look at our<font color="#E5E5E5"> specs read them comment</font>

298
00:12:54,459 --> 00:12:58,959
on them<font color="#CCCCCC"> add more specs if you can give</font>

299
00:12:57,339 --> 00:13:00,610
<font color="#E5E5E5">us feedback on</font><font color="#CCCCCC"> the language</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> are the</font>

300
00:12:58,959 --> 00:13:02,380
kinds of<font color="#E5E5E5"> features that you might need</font><font color="#CCCCCC"> to</font>

301
00:13:00,610 --> 00:13:02,770
write specs for your<font color="#E5E5E5"> new crypto</font>

302
00:13:02,380 --> 00:13:04,810
committee

303
00:13:02,770 --> 00:13:07,120
in this in this<font color="#CCCCCC"> language</font><font color="#E5E5E5"> we are we</font><font color="#CCCCCC"> are</font>

304
00:13:04,810 --> 00:13:10,449
happy to kind<font color="#E5E5E5"> of evolve our design as</font>

305
00:13:07,120 --> 00:13:12,100
depending<font color="#E5E5E5"> on what people say and help us</font>

306
00:13:10,450 --> 00:13:14,050
kind<font color="#E5E5E5"> of test out our various compilers</font>

307
00:13:12,100 --> 00:13:16,330
to<font color="#E5E5E5"> various languages and</font><font color="#CCCCCC"> our various</font>

308
00:13:14,050 --> 00:13:18,189
specs<font color="#E5E5E5"> so the code is down there there's</font>

309
00:13:16,330 --> 00:13:20,020
a mailing list<font color="#E5E5E5"> which is very light right</font>

310
00:13:18,190 --> 00:13:22,060
<font color="#CCCCCC">now and you can initiate and and</font>

311
00:13:20,020 --> 00:13:24,250
participate in<font color="#CCCCCC"> discussions there on what</font>

312
00:13:22,060 --> 00:13:29,979
this language<font color="#E5E5E5"> should look like and</font>

313
00:13:24,250 --> 00:13:34,000
that's all<font color="#CCCCCC"> I have to say thank you hello</font>

314
00:13:29,980 --> 00:13:36,279
<font color="#E5E5E5">I'm Daniel</font><font color="#CCCCCC"> Kahn Gilmore I thank you for</font>

315
00:13:34,000 --> 00:13:39,190
this this<font color="#CCCCCC"> is really great and</font><font color="#E5E5E5"> I'm</font>

316
00:13:36,279 --> 00:13:40,600
pleased<font color="#E5E5E5"> to see it one of the things that</font>

317
00:13:39,190 --> 00:13:44,890
maybe you don't<font color="#CCCCCC"> have an example</font><font color="#E5E5E5"> of in</font>

318
00:13:40,600 --> 00:13:46,480
your slides<font color="#CCCCCC"> is how to</font><font color="#E5E5E5"> express the formal</font>

319
00:13:44,890 --> 00:13:49,420
cryptographic properties that you<font color="#CCCCCC"> want</font>

320
00:13:46,480 --> 00:13:50,770
<font color="#CCCCCC">from the code right</font><font color="#E5E5E5"> so the examples</font><font color="#CCCCCC"> that</font>

321
00:13:49,420 --> 00:13:52,510
<font color="#E5E5E5">you showed made it</font><font color="#CCCCCC"> really clear how to</font>

322
00:13:50,770 --> 00:13:54,250
express numeric constraints<font color="#E5E5E5"> and things</font>

323
00:13:52,510 --> 00:13:56,319
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can you just explain</font><font color="#E5E5E5"> a little</font>

324
00:13:54,250 --> 00:14:00,160
bit<font color="#E5E5E5"> about how</font><font color="#CCCCCC"> you use hex back to</font>

325
00:13:56,320 --> 00:14:04,860
express those things right<font color="#CCCCCC"> so right now</font>

326
00:14:00,160 --> 00:14:07,089
the way we write crypto security

327
00:14:04,860 --> 00:14:08,410
guarantees in these various tools

328
00:14:07,089 --> 00:14:10,180
<font color="#E5E5E5">they're different tools have different</font>

329
00:14:08,410 --> 00:14:11,860
ways of doing so<font color="#E5E5E5"> and we haven't really</font>

330
00:14:10,180 --> 00:14:13,300
<font color="#E5E5E5">resolved how we would do that in a</font>

331
00:14:11,860 --> 00:14:15,940
language<font color="#CCCCCC"> like hack spec what do you want</font>

332
00:14:13,300 --> 00:14:18,279
<font color="#CCCCCC">- a classic way to do that is to define</font>

333
00:14:15,940 --> 00:14:19,480
two specs one which<font color="#E5E5E5"> represents the ideal</font>

334
00:14:18,279 --> 00:14:20,980
functionality and<font color="#E5E5E5"> one we should present</font>

335
00:14:19,480 --> 00:14:22,270
<font color="#E5E5E5">the complete functionality</font><font color="#CCCCCC"> and kind of</font>

336
00:14:20,980 --> 00:14:24,279
show that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is the ideal</font>

337
00:14:22,270 --> 00:14:26,470
<font color="#E5E5E5">functionality we want this to achieve</font>

338
00:14:24,279 --> 00:14:27,880
and the ideal functionality would not be

339
00:14:26,470 --> 00:14:29,890
actually executable<font color="#CCCCCC"> you can't</font><font color="#E5E5E5"> test it</font>

340
00:14:27,880 --> 00:14:31,570
<font color="#E5E5E5">but the concrete one will be testable</font>

341
00:14:29,890 --> 00:14:33,040
<font color="#E5E5E5">and we have to show</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> of them</font>

342
00:14:31,570 --> 00:14:35,459
<font color="#CCCCCC">actually achieved the same thing and</font>

343
00:14:33,040 --> 00:14:38,410
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> the goal of the crypto proof</font>

344
00:14:35,459 --> 00:14:43,149
<font color="#CCCCCC">between Washee</font><font color="#E5E5E5"> we love some help to kind</font>

345
00:14:38,410 --> 00:14:45,730
of make that more formalized<font color="#E5E5E5"> scarf lower</font>

346
00:14:43,149 --> 00:14:47,500
<font color="#CCCCCC">sister</font><font color="#E5E5E5"> systems are</font><font color="#CCCCCC"> - question two</font>

347
00:14:45,730 --> 00:14:49,600
questions<font color="#E5E5E5"> first one is about side</font>

348
00:14:47,500 --> 00:14:51,190
channels you mentioned that as someone

349
00:14:49,600 --> 00:14:55,050
important how would is there a way to

350
00:14:51,190 --> 00:14:58,500
<font color="#CCCCCC">specify that</font><font color="#E5E5E5"> this code doesn't have any</font>

351
00:14:55,050 --> 00:15:06,099
secret dependent branches or<font color="#CCCCCC"> two</font>

352
00:14:58,500 --> 00:15:07,750
dependent accesses yes<font color="#E5E5E5"> so for for</font>

353
00:15:06,100 --> 00:15:09,940
example<font color="#E5E5E5"> for</font><font color="#CCCCCC"> our charge mining spec and</font>

354
00:15:07,750 --> 00:15:12,070
for any symmetric spec like that what we

355
00:15:09,940 --> 00:15:13,750
do is we restrict because we because<font color="#CCCCCC"> you</font>

356
00:15:12,070 --> 00:15:16,660
have a type<font color="#CCCCCC"> system</font><font color="#E5E5E5"> we can restrict the</font>

357
00:15:13,750 --> 00:15:19,750
<font color="#E5E5E5">uses of all the integers machine</font>

358
00:15:16,660 --> 00:15:21,969
in this world to be<font color="#CCCCCC"> secret independent</font>

359
00:15:19,750 --> 00:15:24,670
in the sense<font color="#CCCCCC"> that you cannot for example</font>

360
00:15:21,970 --> 00:15:26,410
<font color="#E5E5E5">compare to win</font><font color="#CCCCCC"> to machine integers</font><font color="#E5E5E5"> you</font>

361
00:15:24,670 --> 00:15:29,079
can<font color="#E5E5E5"> only compare array indices and so on</font>

362
00:15:26,410 --> 00:15:30,759
but you cannot compare the data which<font color="#CCCCCC"> is</font>

363
00:15:29,079 --> 00:15:32,319
represented<font color="#CCCCCC"> by you into eight you cannot</font>

364
00:15:30,759 --> 00:15:34,019
compare<font color="#CCCCCC"> it you cannot crunch on it you</font>

365
00:15:32,319 --> 00:15:36,069
cannot use<font color="#CCCCCC"> it as an index to</font><font color="#E5E5E5"> an array</font>

366
00:15:34,019 --> 00:15:37,899
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can write these kinds of things but</font>

367
00:15:36,069 --> 00:15:39,939
<font color="#E5E5E5">it'll make things like</font><font color="#CCCCCC"> AES with</font><font color="#E5E5E5"> s box</font>

368
00:15:37,899 --> 00:15:42,279
impossible to write in the language<font color="#E5E5E5"> so</font>

369
00:15:39,939 --> 00:15:43,689
<font color="#E5E5E5">you have to relax it at some places</font><font color="#CCCCCC"> so</font>

370
00:15:42,279 --> 00:15:45,879
you might say<font color="#CCCCCC"> ok for the S box I'll</font>

371
00:15:43,689 --> 00:15:47,769
relax<font color="#E5E5E5"> it for the</font><font color="#CCCCCC"> bignum arithmetic</font>

372
00:15:45,879 --> 00:15:49,629
because<font color="#E5E5E5"> you're using big</font><font color="#CCCCCC"> numbs there is</font>

373
00:15:47,769 --> 00:15:51,370
no side<font color="#E5E5E5"> channel guarantee there but once</font>

374
00:15:49,629 --> 00:15:52,750
you once you<font color="#E5E5E5"> exit that world and you</font>

375
00:15:51,370 --> 00:15:54,879
<font color="#CCCCCC">come down into</font><font color="#E5E5E5"> the world where you</font>

376
00:15:52,750 --> 00:15:57,100
<font color="#CCCCCC">actually have concrete</font><font color="#E5E5E5"> bytes and</font>

377
00:15:54,879 --> 00:15:59,439
concrete integers<font color="#E5E5E5"> yes we can express</font>

378
00:15:57,100 --> 00:16:01,569
this requirement<font color="#E5E5E5"> that you cannot you</font>

379
00:15:59,439 --> 00:16:02,649
<font color="#E5E5E5">have to have this constant time coding</font>

380
00:16:01,569 --> 00:16:05,259
discipline which<font color="#CCCCCC"> we call secret</font>

381
00:16:02,649 --> 00:16:07,810
independence<font color="#E5E5E5"> another map</font><font color="#CCCCCC"> properly for us</font>

382
00:16:05,259 --> 00:16:11,199
to be questioned<font color="#E5E5E5"> I look at the your</font>

383
00:16:07,810 --> 00:16:14,709
<font color="#E5E5E5">github or there I couldn't see any</font>

384
00:16:11,199 --> 00:16:17,019
<font color="#E5E5E5">formal description of the language</font><font color="#CCCCCC"> do</font>

385
00:16:14,709 --> 00:16:18,878
something well there's a<font color="#CCCCCC"> markdown file</font>

386
00:16:17,019 --> 00:16:22,540
which is<font color="#E5E5E5"> extremely low content right now</font>

387
00:16:18,879 --> 00:16:23,829
<font color="#E5E5E5">called language toward MD</font><font color="#CCCCCC"> it's trying</font><font color="#E5E5E5"> to</font>

388
00:16:22,540 --> 00:16:26,259
describe the language<font color="#E5E5E5"> but we are still</font>

389
00:16:23,829 --> 00:16:27,790
<font color="#E5E5E5">like</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> for feedback and we will we</font>

390
00:16:26,259 --> 00:16:29,740
will formalize<font color="#E5E5E5"> it all but you first want</font>

391
00:16:27,790 --> 00:16:34,259
<font color="#E5E5E5">to kind of settle on what</font><font color="#CCCCCC"> features we</font>

392
00:16:29,740 --> 00:16:36,759
actually need<font color="#CCCCCC"> Thank You</font><font color="#E5E5E5"> Phil</font><font color="#CCCCCC"> hamburger</font>

393
00:16:34,259 --> 00:16:39,519
<font color="#CCCCCC">yeah I like this lockers</font>

394
00:16:36,759 --> 00:16:42,370
you know we've used Python<font color="#E5E5E5"> in a couple</font>

395
00:16:39,519 --> 00:16:44,709
of specs<font color="#CCCCCC"> yes and I've spent a lot of</font>

396
00:16:42,370 --> 00:16:48,490
time trying<font color="#E5E5E5"> to convert them into c-sharp</font>

397
00:16:44,709 --> 00:16:52,388
or C because it'd<font color="#CCCCCC"> be nice if</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> had</font>

398
00:16:48,490 --> 00:16:55,180
compilers<font color="#CCCCCC"> to executable languages</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> if</font>

399
00:16:52,389 --> 00:16:58,810
you can get C and C sharp<font color="#E5E5E5"> and maybe Java</font>

400
00:16:55,180 --> 00:17:00,339
that<font color="#E5E5E5"> basically covers</font><font color="#CCCCCC"> all the things you</font>

401
00:16:58,810 --> 00:17:04,119
<font color="#E5E5E5">need to cover because everything else</font>

402
00:17:00,339 --> 00:17:10,299
can cook into those that's a that's a

403
00:17:04,119 --> 00:17:13,750
good<font color="#E5E5E5"> point</font><font color="#CCCCCC"> Thanks okay any more</font>

404
00:17:10,299 --> 00:17:15,220
questions comments<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> from the</font>

405
00:17:13,750 --> 00:17:17,409
chairs perspective<font color="#E5E5E5"> we'd like to thank</font>

406
00:17:15,220 --> 00:17:19,299
<font color="#E5E5E5">you</font><font color="#CCCCCC"> for bringing</font><font color="#E5E5E5"> this to</font><font color="#CCCCCC"> C FRG so early</font>

407
00:17:17,409 --> 00:17:21,819
and giving us a chance<font color="#CCCCCC"> to to see it and</font>

408
00:17:19,299 --> 00:17:23,319
get some exposure<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the ideas yeah</font>

409
00:17:21,819 --> 00:17:27,030
please keep telling us<font color="#E5E5E5"> about it as it as</font>

410
00:17:23,319 --> 00:17:27,030
it<font color="#E5E5E5"> develops thank you</font><font color="#CCCCCC"> very much thanks</font>

411
00:17:27,700 --> 00:17:33,210
[Applause]

412
00:17:39,460 --> 00:17:44,690
<font color="#E5E5E5">okay yeah I have to find the</font><font color="#CCCCCC"> oh there we</font>

413
00:17:44,540 --> 00:17:47,000
go

414
00:17:44,690 --> 00:17:52,690
I<font color="#CCCCCC"> didn't why does</font><font color="#E5E5E5"> that oops it's the</font>

415
00:17:47,000 --> 00:17:52,690
wrong one<font color="#E5E5E5"> but your pardon come on</font>

416
00:18:02,710 --> 00:18:08,090
<font color="#CCCCCC">alright hello everyone</font><font color="#E5E5E5"> my name</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Chris</font>

417
00:18:05,630 --> 00:18:09,620
<font color="#CCCCCC">Wood from Apple here to talk about</font>

418
00:18:08,090 --> 00:18:12,110
<font color="#CCCCCC">something</font><font color="#E5E5E5"> some work we're doing with</font>

419
00:18:09,620 --> 00:18:13,370
<font color="#CCCCCC">Katz Kramer's Luke Garrett</font><font color="#E5E5E5"> son Esau not</font>

420
00:18:12,110 --> 00:18:15,080
gonna try<font color="#E5E5E5"> to pronounce your last name so</font>

421
00:18:13,370 --> 00:18:17,239
<font color="#E5E5E5">butcher apologize and Nick from</font>

422
00:18:15,080 --> 00:18:20,060
<font color="#E5E5E5">CloudFlare</font><font color="#CCCCCC"> this is something we talked</font>

423
00:18:17,240 --> 00:18:21,860
about a sec<font color="#E5E5E5"> dispatch at the last ITF and</font>

424
00:18:20,060 --> 00:18:24,970
<font color="#CCCCCC">we were encouraged to come</font><font color="#E5E5E5"> over here to</font>

425
00:18:21,860 --> 00:18:27,260
<font color="#CCCCCC">present it to you so without</font><font color="#E5E5E5"> further ado</font>

426
00:18:24,970 --> 00:18:29,870
<font color="#CCCCCC">the motivation for this work</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

427
00:18:27,260 --> 00:18:32,420
while<font color="#E5E5E5"> pseudo random number generation is</font>

428
00:18:29,870 --> 00:18:34,040
<font color="#E5E5E5">fairly</font><font color="#CCCCCC"> easy in principle and in theory</font>

429
00:18:32,420 --> 00:18:38,030
<font color="#E5E5E5">and should be in practice there are</font>

430
00:18:34,040 --> 00:18:39,200
<font color="#E5E5E5">cases</font><font color="#CCCCCC"> where they can break and or I</font>

431
00:18:38,030 --> 00:18:42,670
guess worse they can contain more

432
00:18:39,200 --> 00:18:45,470
systemic<font color="#E5E5E5"> design flaws point to just</font><font color="#CCCCCC"> two</font>

433
00:18:42,670 --> 00:18:47,780
we consider relevant<font color="#E5E5E5"> examples first one</font>

434
00:18:45,470 --> 00:18:49,430
being the Debian bug where<font color="#E5E5E5"> some</font>

435
00:18:47,780 --> 00:18:51,020
developer tried to silence some warnings

436
00:18:49,430 --> 00:18:53,690
that were brought up<font color="#CCCCCC"> by Bell grind</font><font color="#E5E5E5"> and</font>

437
00:18:51,020 --> 00:18:56,870
mistakenly removed some critical<font color="#E5E5E5"> seeding</font>

438
00:18:53,690 --> 00:18:58,460
processes from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> or in some critical</font>

439
00:18:56,870 --> 00:19:00,439
seeding step in the random number

440
00:18:58,460 --> 00:19:02,930
generation step which<font color="#CCCCCC"> basically you know</font>

441
00:19:00,440 --> 00:19:04,670
<font color="#E5E5E5">hosed everyone and made the output be</font>

442
00:19:02,930 --> 00:19:07,160
sort of<font color="#E5E5E5"> predictable which is not so</font>

443
00:19:04,670 --> 00:19:09,770
<font color="#E5E5E5">great</font><font color="#CCCCCC"> and then there's</font><font color="#E5E5E5"> the dual you see</font>

444
00:19:07,160 --> 00:19:11,510
bug or design flaw or<font color="#E5E5E5"> whatever you want</font>

445
00:19:09,770 --> 00:19:13,340
<font color="#E5E5E5">to call it which could have been</font>

446
00:19:11,510 --> 00:19:14,780
<font color="#E5E5E5">actively exploited by TL server</font>

447
00:19:13,340 --> 00:19:18,470
implementations that<font color="#E5E5E5"> happen implement</font>

448
00:19:14,780 --> 00:19:24,230
this particular spec<font color="#E5E5E5"> and that is not so</font>

449
00:19:18,470 --> 00:19:25,880
great<font color="#E5E5E5"> so we're trying to bake in sort of</font>

450
00:19:24,230 --> 00:19:28,880
<font color="#E5E5E5">an insurance</font><font color="#CCCCCC"> policy</font><font color="#E5E5E5"> or some kind of</font>

451
00:19:25,880 --> 00:19:30,050
defense mechanism such that if we don't

452
00:19:28,880 --> 00:19:32,120
<font color="#CCCCCC">ultimately</font><font color="#E5E5E5"> trust</font><font color="#CCCCCC"> our pseudo-random</font>

453
00:19:30,050 --> 00:19:33,800
number generator we can still you<font color="#E5E5E5"> know</font>

454
00:19:32,120 --> 00:19:35,570
get some guarantees about<font color="#E5E5E5"> the</font>

455
00:19:33,800 --> 00:19:39,200
indistinguishability of the output of

456
00:19:35,570 --> 00:19:40,730
the<font color="#CCCCCC"> RNG and to do so we build on what we</font>

457
00:19:39,200 --> 00:19:43,130
call the<font color="#CCCCCC"> Naxos trick which is a sense</font>

458
00:19:40,730 --> 00:19:46,460
every time<font color="#E5E5E5"> we want to sample some raw</font>

459
00:19:43,130 --> 00:19:47,480
entropy<font color="#E5E5E5"> called X you mix in a secret key</font>

460
00:19:46,460 --> 00:19:51,020
<font color="#E5E5E5">or private key that</font><font color="#CCCCCC"> you have available</font>

461
00:19:47,480 --> 00:19:52,330
<font color="#E5E5E5">to you</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then out pops the ultimate</font>

462
00:19:51,020 --> 00:19:54,770
<font color="#CCCCCC">randomness that</font><font color="#E5E5E5"> would you you would use</font>

463
00:19:52,330 --> 00:19:59,210
and this<font color="#E5E5E5"> is sort of a defense-in-depth</font>

464
00:19:54,770 --> 00:20:00,710
mentality<font color="#CCCCCC"> because if the random</font>

465
00:19:59,210 --> 00:20:02,540
<font color="#CCCCCC">temperature</font><font color="#E5E5E5"> is ultimately flawed used</font>

466
00:20:00,710 --> 00:20:04,130
the security essentially or the

467
00:20:02,540 --> 00:20:05,990
<font color="#CCCCCC">distinguishability</font><font color="#E5E5E5"> essentially reduces</font>

468
00:20:04,130 --> 00:20:10,910
to the secrecy<font color="#E5E5E5"> of</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> secret key here</font>

469
00:20:05,990 --> 00:20:12,860
<font color="#CCCCCC">sk also if you have sort</font><font color="#E5E5E5"> of a you know</font>

470
00:20:10,910 --> 00:20:14,240
systemic kind of implementation flaw or

471
00:20:12,860 --> 00:20:16,129
deployment flaw for some pseudo-random

472
00:20:14,240 --> 00:20:18,230
number generator this technique<font color="#CCCCCC"> ensures</font>

473
00:20:16,130 --> 00:20:21,490
that the failures themselves are kind<font color="#CCCCCC"> of</font>

474
00:20:18,230 --> 00:20:23,900
localized to each individual you know<font color="#CCCCCC"> a</font>

475
00:20:21,490 --> 00:20:25,460
secret key instance so for example the

476
00:20:23,900 --> 00:20:27,290
randomness that<font color="#E5E5E5"> you might get from one</font>

477
00:20:25,460 --> 00:20:28,370
particular<font color="#E5E5E5"> server would be different</font>

478
00:20:27,290 --> 00:20:29,450
from<font color="#E5E5E5"> the randomness</font><font color="#CCCCCC"> that you would get</font>

479
00:20:28,370 --> 00:20:31,969
<font color="#CCCCCC">for</font><font color="#E5E5E5"> a different server they happen</font><font color="#CCCCCC"> to be</font>

480
00:20:29,450 --> 00:20:35,510
<font color="#E5E5E5">running the same the exact same</font><font color="#CCCCCC"> rng you</font>

481
00:20:31,970 --> 00:20:38,590
<font color="#E5E5E5">see our</font><font color="#CCCCCC"> PMG with the same state so not</font>

482
00:20:35,510 --> 00:20:42,290
everyone is<font color="#CCCCCC"> hos just a small</font><font color="#E5E5E5"> fraction</font>

483
00:20:38,590 --> 00:20:44,330
however in today's deployments<font color="#E5E5E5"> private</font>

484
00:20:42,290 --> 00:20:46,070
keys are not readily accessible<font color="#CCCCCC"> you know</font>

485
00:20:44,330 --> 00:20:49,040
if you're a server you typically<font color="#E5E5E5"> store</font>

486
00:20:46,070 --> 00:20:50,120
them in some HSM for good reason<font color="#E5E5E5"> and if</font>

487
00:20:49,040 --> 00:20:51,950
you're a<font color="#E5E5E5"> client you might keep them in</font>

488
00:20:50,120 --> 00:20:53,300
an enclave<font color="#CCCCCC"> and depending on</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> api's</font>

489
00:20:51,950 --> 00:20:54,650
are using to actually<font color="#E5E5E5"> interface</font><font color="#CCCCCC"> with the</font>

490
00:20:53,300 --> 00:20:57,500
private keys they might not be readily

491
00:20:54,650 --> 00:20:59,450
available<font color="#E5E5E5"> to you the keys themselves</font>

492
00:20:57,500 --> 00:21:00,970
might be of varying types<font color="#E5E5E5"> you could have</font>

493
00:20:59,450 --> 00:21:03,440
RSA or elliptic curve or<font color="#E5E5E5"> whatever</font>

494
00:21:00,970 --> 00:21:05,180
<font color="#E5E5E5">meaning</font><font color="#CCCCCC"> that the output size or</font>

495
00:21:03,440 --> 00:21:07,310
<font color="#CCCCCC">whatever's fed into this mixing step</font>

496
00:21:05,180 --> 00:21:08,690
it's<font color="#E5E5E5"> not always the</font><font color="#CCCCCC"> same so analyzing</font>

497
00:21:07,310 --> 00:21:11,090
the randomness<font color="#CCCCCC"> that comes out might not</font>

498
00:21:08,690 --> 00:21:13,430
be that<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the commonality</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font>

499
00:21:11,090 --> 00:21:15,320
that at<font color="#CCCCCC"> some point</font><font color="#E5E5E5"> during the</font><font color="#CCCCCC"> execution</font>

500
00:21:13,430 --> 00:21:17,390
of some<font color="#CCCCCC"> security protocol</font><font color="#E5E5E5"> they are used</font>

501
00:21:15,320 --> 00:21:19,399
<font color="#E5E5E5">to compute a private key operation be it</font>

502
00:21:17,390 --> 00:21:20,750
a<font color="#E5E5E5"> digital signature or you know</font>

503
00:21:19,400 --> 00:21:24,580
encrypting something or<font color="#E5E5E5"> decrypting</font>

504
00:21:20,750 --> 00:21:26,720
something and we exploit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to sort of</font>

505
00:21:24,580 --> 00:21:28,399
build what we call<font color="#CCCCCC"> randomness wrapper</font>

506
00:21:26,720 --> 00:21:31,370
which essentially works as follows

507
00:21:28,400 --> 00:21:34,730
assume<font color="#CCCCCC"> we have some algorithm G of X</font>

508
00:21:31,370 --> 00:21:37,820
that<font color="#CCCCCC"> you know produces</font><font color="#E5E5E5"> X random bytes of</font>

509
00:21:34,730 --> 00:21:39,620
entropy<font color="#E5E5E5"> give a simple PRF signature</font>

510
00:21:37,820 --> 00:21:41,899
algorithm<font color="#E5E5E5"> in a key derivation function</font>

511
00:21:39,620 --> 00:21:45,129
which which simply can be<font color="#E5E5E5"> defined as</font><font color="#CCCCCC"> HK</font>

512
00:21:41,900 --> 00:21:49,460
DF extract with a empty info string and

513
00:21:45,130 --> 00:21:53,270
the wrapper works<font color="#E5E5E5"> sort of as written so</font>

514
00:21:49,460 --> 00:21:54,220
<font color="#E5E5E5">you would sign some fixed tag tag one</font>

515
00:21:53,270 --> 00:21:56,049
with your<font color="#E5E5E5"> C</font>

516
00:21:54,220 --> 00:21:57,490
key which<font color="#CCCCCC"> you can call it your HSN which</font>

517
00:21:56,049 --> 00:21:58,720
you're whatever<font color="#E5E5E5"> your your API</font><font color="#CCCCCC"> that</font>

518
00:21:57,490 --> 00:22:01,630
happens to manage<font color="#E5E5E5"> your private key</font>

519
00:21:58,720 --> 00:22:03,340
<font color="#CCCCCC">access for you hash the output and then</font>

520
00:22:01,630 --> 00:22:05,320
<font color="#E5E5E5">anytime you wanted to extract some</font>

521
00:22:03,340 --> 00:22:07,178
randomness<font color="#CCCCCC"> you would actually call it to</font>

522
00:22:05,320 --> 00:22:10,090
the PRNG<font color="#E5E5E5"> you get the randomness append</font>

523
00:22:07,179 --> 00:22:12,789
it<font color="#CCCCCC"> to this hashed the hash with the</font>

524
00:22:10,090 --> 00:22:16,240
signature<font color="#CCCCCC"> and you would extract</font><font color="#E5E5E5"> from</font>

525
00:22:12,789 --> 00:22:19,150
that<font color="#E5E5E5"> a key the KDF step</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you</font>

526
00:22:16,240 --> 00:22:27,010
expand using<font color="#E5E5E5"> the PRF our much randomness</font>

527
00:22:19,150 --> 00:22:28,809
<font color="#E5E5E5">you need I you know I guess the KDF</font><font color="#CCCCCC"> I we</font>

528
00:22:27,010 --> 00:22:30,610
use<font color="#CCCCCC"> KDF</font><font color="#E5E5E5"> and PRF notation here but really</font>

529
00:22:28,809 --> 00:22:32,080
it's just an<font color="#E5E5E5"> extract and expand kind of</font>

530
00:22:30,610 --> 00:22:34,600
design<font color="#E5E5E5"> you could probably swap them</font>

531
00:22:32,080 --> 00:22:35,949
whatever expander you want<font color="#CCCCCC"> of course</font>

532
00:22:34,600 --> 00:22:38,408
<font color="#CCCCCC">subject to analysis and everything to</font><font color="#E5E5E5"> be</font>

533
00:22:35,950 --> 00:22:41,080
sure that's safe<font color="#E5E5E5"> so some details</font><font color="#CCCCCC"> about</font>

534
00:22:38,409 --> 00:22:42,940
<font color="#E5E5E5">the particular parameters so tag one is</font>

535
00:22:41,080 --> 00:22:45,389
a fixed intended to be a fixed string

536
00:22:42,940 --> 00:22:48,010
that's used<font color="#E5E5E5"> across you know a particular</font>

537
00:22:45,390 --> 00:22:50,620
deployment<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this technique</font><font color="#CCCCCC"> so a server</font>

538
00:22:48,010 --> 00:22:53,020
<font color="#CCCCCC">that starts up</font><font color="#E5E5E5"> starts you know pumping</font>

539
00:22:50,620 --> 00:22:55,389
<font color="#CCCCCC">out randomness would only</font><font color="#E5E5E5"> compute one</font>

540
00:22:53,020 --> 00:22:57,940
signature<font color="#E5E5E5"> with the secret key over a</font>

541
00:22:55,390 --> 00:22:59,590
<font color="#E5E5E5">fixed tag and it can just cash that you</font>

542
00:22:57,940 --> 00:23:01,030
know value<font color="#E5E5E5"> or catch the</font><font color="#CCCCCC"> hash of that</font>

543
00:22:59,590 --> 00:23:02,740
<font color="#E5E5E5">value and then never do anything with</font>

544
00:23:01,030 --> 00:23:05,470
that<font color="#E5E5E5"> ever again except</font><font color="#CCCCCC"> append it to</font>

545
00:23:02,740 --> 00:23:08,799
<font color="#E5E5E5">whatever randomness is generated tag</font><font color="#CCCCCC"> two</font>

546
00:23:05,470 --> 00:23:10,539
is a dynamic string it changes every

547
00:23:08,799 --> 00:23:14,168
single notification so that<font color="#CCCCCC"> you're not</font>

548
00:23:10,539 --> 00:23:16,379
you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have colliding</font><font color="#CCCCCC"> randomness</font>

549
00:23:14,169 --> 00:23:19,590
output and that's critically important

550
00:23:16,380 --> 00:23:22,360
<font color="#CCCCCC">in fairly simple to implement</font><font color="#E5E5E5"> as well a</font>

551
00:23:19,590 --> 00:23:24,129
comment that<font color="#E5E5E5"> the signature absolutely</font>

552
00:23:22,360 --> 00:23:26,110
must not<font color="#E5E5E5"> be exposed otherwise all bets</font>

553
00:23:24,130 --> 00:23:28,299
are<font color="#E5E5E5"> off because the point here</font><font color="#CCCCCC"> is that</font>

554
00:23:26,110 --> 00:23:30,280
or that<font color="#E5E5E5"> the trick</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> the secret behind</font>

555
00:23:28,299 --> 00:23:32,740
an access trick is that<font color="#E5E5E5"> the secrecy of</font>

556
00:23:30,280 --> 00:23:34,178
<font color="#E5E5E5">the or the or the</font><font color="#CCCCCC"> security</font><font color="#E5E5E5"> the technique</font>

557
00:23:32,740 --> 00:23:36,610
relies in<font color="#E5E5E5"> keeping the secret key hidden</font>

558
00:23:34,179 --> 00:23:37,990
where<font color="#E5E5E5"> is the secrecy here just realizing</font>

559
00:23:36,610 --> 00:23:39,629
keeping the signature computed with the

560
00:23:37,990 --> 00:23:42,580
secret key or that<font color="#E5E5E5"> private key hidden</font>

561
00:23:39,630 --> 00:23:44,320
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> recommend</font><font color="#CCCCCC"> that the signature</font>

562
00:23:42,580 --> 00:23:45,730
scheme should be deterministic<font color="#E5E5E5"> although</font>

563
00:23:44,320 --> 00:23:48,939
if<font color="#E5E5E5"> you're only doing the signature once</font>

564
00:23:45,730 --> 00:23:50,980
ain't not<font color="#E5E5E5"> anything else that may perhaps</font>

565
00:23:48,940 --> 00:23:52,150
that's<font color="#E5E5E5"> not necessary but again like</font>

566
00:23:50,980 --> 00:23:56,140
we're trying to<font color="#CCCCCC"> make no assumptions</font>

567
00:23:52,150 --> 00:23:57,039
about what type<font color="#CCCCCC"> of operation operational</font>

568
00:23:56,140 --> 00:23:58,690
environment you're deploying<font color="#E5E5E5"> this</font>

569
00:23:57,039 --> 00:24:00,879
technique in so you could be in an

570
00:23:58,690 --> 00:24:02,260
extremely hostile environment where side

571
00:24:00,880 --> 00:24:04,270
channels are prevalent<font color="#E5E5E5"> everywhere and</font>

572
00:24:02,260 --> 00:24:07,309
<font color="#CCCCCC">perhaps</font><font color="#E5E5E5"> computing one signature is</font>

573
00:24:04,270 --> 00:24:11,470
enough to leak information<font color="#CCCCCC"> so</font>

574
00:24:07,309 --> 00:24:13,700
just use a deterministic one<font color="#CCCCCC"> if possible</font>

575
00:24:11,470 --> 00:24:16,159
<font color="#CCCCCC">so some obvious criticism</font><font color="#E5E5E5"> for this</font>

576
00:24:13,700 --> 00:24:19,759
technique<font color="#CCCCCC"> there was you know flurry of</font>

577
00:24:16,159 --> 00:24:21,230
comments on Twitter<font color="#CCCCCC"> first</font><font color="#E5E5E5"> one being why</font>

578
00:24:19,759 --> 00:24:23,749
bother with this<font color="#E5E5E5"> at all</font><font color="#CCCCCC"> you know your</font>

579
00:24:21,230 --> 00:24:26,200
energies are<font color="#CCCCCC"> very easy to get</font><font color="#E5E5E5"> right but</font>

580
00:24:23,749 --> 00:24:29,240
<font color="#CCCCCC">just point back</font><font color="#E5E5E5"> to the previous</font><font color="#CCCCCC"> slide</font>

581
00:24:26,200 --> 00:24:31,639
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> in principle</font><font color="#CCCCCC"> they should be easy to</font>

582
00:24:29,240 --> 00:24:33,830
<font color="#E5E5E5">get right however things do go wrong and</font>

583
00:24:31,639 --> 00:24:35,870
this gives us an<font color="#E5E5E5"> extra insurance policy</font>

584
00:24:33,830 --> 00:24:39,049
to kind of protect against those

585
00:24:35,870 --> 00:24:40,518
particular instances<font color="#CCCCCC"> second</font><font color="#E5E5E5"> major one is</font>

586
00:24:39,049 --> 00:24:42,110
why would you<font color="#CCCCCC"> ever use your private key</font>

587
00:24:40,519 --> 00:24:45,080
<font color="#E5E5E5">for something that's you know not</font>

588
00:24:42,110 --> 00:24:46,820
<font color="#E5E5E5">intended use</font><font color="#CCCCCC"> for coming</font><font color="#E5E5E5"> here is that</font><font color="#CCCCCC"> or</font>

589
00:24:45,080 --> 00:24:49,009
my response to<font color="#E5E5E5"> that is simply here we're</font>

590
00:24:46,820 --> 00:24:50,178
not it's<font color="#E5E5E5"> not an unintended use of the</font>

591
00:24:49,009 --> 00:24:52,759
private<font color="#CCCCCC"> key you're still computing a</font>

592
00:24:50,179 --> 00:24:54,710
signature<font color="#E5E5E5"> with a signing key it's just</font>

593
00:24:52,759 --> 00:24:56,179
not used in the<font color="#E5E5E5"> same way that you would</font>

594
00:24:54,710 --> 00:24:57,230
use<font color="#E5E5E5"> it in the protocol originally so for</font>

595
00:24:56,179 --> 00:25:01,129
example you're<font color="#E5E5E5"> not signing the key</font>

596
00:24:57,230 --> 00:25:02,240
sheriff until<font color="#CCCCCC"> s1 or or whatever</font><font color="#E5E5E5"> and I'm</font>

597
00:25:01,129 --> 00:25:03,649
sure other people<font color="#CCCCCC"> would</font><font color="#E5E5E5"> come up with</font>

598
00:25:02,240 --> 00:25:06,980
other criticisms I'd be very happy<font color="#E5E5E5"> to</font>

599
00:25:03,649 --> 00:25:10,360
<font color="#E5E5E5">hear them</font><font color="#CCCCCC"> on here or here at the</font><font color="#E5E5E5"> Lister</font>

600
00:25:06,980 --> 00:25:12,740
<font color="#E5E5E5">however you know however</font><font color="#CCCCCC"> you like</font>

601
00:25:10,360 --> 00:25:15,559
so some open issues in the draft right

602
00:25:12,740 --> 00:25:17,570
now with the retinas<font color="#E5E5E5"> wrapper as</font>

603
00:25:15,559 --> 00:25:18,710
presented<font color="#E5E5E5"> it's not an easy drop-in</font>

604
00:25:17,570 --> 00:25:20,418
replacement for something like<font color="#E5E5E5"> that</font>

605
00:25:18,710 --> 00:25:21,440
random where you just<font color="#E5E5E5"> expand however</font>

606
00:25:20,419 --> 00:25:23,059
much<font color="#CCCCCC"> random as</font><font color="#E5E5E5"> you want</font>

607
00:25:21,440 --> 00:25:24,769
<font color="#CCCCCC">so we're</font><font color="#E5E5E5"> looking at various other</font>

608
00:25:23,059 --> 00:25:26,059
<font color="#E5E5E5">alternatives or</font><font color="#CCCCCC"> Jarius extraction</font>

609
00:25:24,769 --> 00:25:29,059
alternatives to make it so that<font color="#E5E5E5"> it's</font>

610
00:25:26,059 --> 00:25:30,289
<font color="#CCCCCC">very easy to</font><font color="#E5E5E5"> do so</font><font color="#CCCCCC"> I don't mind we had</font>

611
00:25:29,059 --> 00:25:33,470
to<font color="#E5E5E5"> draft a while ago</font><font color="#CCCCCC"> that has since</font>

612
00:25:30,289 --> 00:25:36,019
expired basically specifying<font color="#CCCCCC"> a C Mac</font>

613
00:25:33,470 --> 00:25:37,519
<font color="#CCCCCC">based expander instead of</font><font color="#E5E5E5"> hmx based</font>

614
00:25:36,019 --> 00:25:39,590
expander<font color="#E5E5E5"> and you could probably do the</font>

615
00:25:37,519 --> 00:25:42,440
<font color="#CCCCCC">same thing here or use the KDF that's</font>

616
00:25:39,590 --> 00:25:43,459
<font color="#E5E5E5">derive</font><font color="#CCCCCC"> - you know</font><font color="#E5E5E5"> seed a key stream and</font>

617
00:25:42,440 --> 00:25:46,399
that<font color="#E5E5E5"> should start pumping randomness</font>

618
00:25:43,460 --> 00:25:48,320
from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> very trivial</font>

619
00:25:46,399 --> 00:25:50,239
implementation of this<font color="#E5E5E5"> technique if</font>

620
00:25:48,320 --> 00:25:51,230
you're interested<font color="#E5E5E5"> go check it out</font><font color="#CCCCCC"> then</font>

621
00:25:50,240 --> 00:25:52,970
<font color="#E5E5E5">just comment</font><font color="#CCCCCC"> that we could probably</font>

622
00:25:51,230 --> 00:25:55,759
experiment with other implementations or

623
00:25:52,970 --> 00:25:58,580
with this technique<font color="#E5E5E5"> in popular</font><font color="#CCCCCC"> - OS</font>

624
00:25:55,759 --> 00:26:00,919
libraries like popular<font color="#CCCCCC"> there SSL and</font>

625
00:25:58,580 --> 00:26:02,480
<font color="#E5E5E5">then SS in among others that have user</font>

626
00:26:00,919 --> 00:26:05,389
space PRNG implementations<font color="#E5E5E5"> that you</font>

627
00:26:02,480 --> 00:26:10,850
could easily amend<font color="#E5E5E5"> or</font><font color="#CCCCCC"> rap to make this</font>

628
00:26:05,389 --> 00:26:12,918
happen<font color="#CCCCCC"> so that's it very simple</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> I'd</font>

629
00:26:10,850 --> 00:26:17,418
love<font color="#E5E5E5"> to hear any comments and criticisms</font>

630
00:26:12,919 --> 00:26:19,730
you have thank you let's go to CUNY<font color="#CCCCCC"> hi</font>

631
00:26:17,419 --> 00:26:21,149
<font color="#CCCCCC">ya venire so</font><font color="#E5E5E5"> I got</font><font color="#CCCCCC"> to question</font><font color="#E5E5E5"> can you</font>

632
00:26:19,730 --> 00:26:26,009
go<font color="#E5E5E5"> back to the for me</font>

633
00:26:21,149 --> 00:26:28,468
for this<font color="#E5E5E5"> yeah so um how bad can your PRF</font>

634
00:26:26,009 --> 00:26:31,739
<font color="#E5E5E5">you're a random generator</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> and suppose</font>

635
00:26:28,469 --> 00:26:37,200
<font color="#CCCCCC">G few effects returns all zeros all the</font>

636
00:26:31,739 --> 00:26:40,080
time does this still work and<font color="#E5E5E5"> yes and</font>

637
00:26:37,200 --> 00:26:41,759
the second<font color="#CCCCCC"> question is well if</font><font color="#E5E5E5"> your</font>

638
00:26:40,080 --> 00:26:43,769
random<font color="#CCCCCC"> number generator is hosed</font>

639
00:26:41,759 --> 00:26:47,309
how did you ever<font color="#E5E5E5"> generate the secret key</font>

640
00:26:43,769 --> 00:26:50,159
<font color="#CCCCCC">ah</font><font color="#E5E5E5"> so we're assuming that the secret key</font>

641
00:26:47,309 --> 00:26:51,299
is<font color="#E5E5E5"> not generated locally and like that's</font>

642
00:26:50,159 --> 00:26:55,460
my<font color="#E5E5E5"> answer to</font><font color="#CCCCCC"> that particular question</font>

643
00:26:51,299 --> 00:26:55,460
like some magical<font color="#CCCCCC"> oracle says because</font>

644
00:26:57,109 --> 00:27:02,639
<font color="#E5E5E5">usually to generate</font><font color="#CCCCCC"> gets locally</font><font color="#E5E5E5"> I'm</font>

645
00:27:01,139 --> 00:27:13,379
gonna defer to the server operators on

646
00:27:02,639 --> 00:27:17,309
this one I'm a client<font color="#E5E5E5"> so no yeah thank</font>

647
00:27:13,379 --> 00:27:18,539
you oh<font color="#CCCCCC"> yeah Nick was saying that</font><font color="#E5E5E5"> deals</font>

648
00:27:17,309 --> 00:27:22,739
<font color="#CCCCCC">keys need to be signed</font><font color="#E5E5E5"> and distributed</font>

649
00:27:18,539 --> 00:27:24,299
so so<font color="#CCCCCC"> making tom's lid that</font><font color="#E5E5E5"> you don't</font>

650
00:27:22,739 --> 00:27:28,589
just necessarily have to distribute

651
00:27:24,299 --> 00:27:30,239
private keys so a couple<font color="#CCCCCC"> of comments why</font>

652
00:27:28,589 --> 00:27:34,019
did you choose concatenation rather than

653
00:27:30,239 --> 00:27:36,599
<font color="#E5E5E5">pass</font><font color="#CCCCCC"> G to the X to the salt I guess no</font>

654
00:27:34,019 --> 00:27:38,700
particular reason other than it<font color="#CCCCCC"> was this</font>

655
00:27:36,599 --> 00:27:41,279
<font color="#CCCCCC">simplest it</font><font color="#E5E5E5"> seemed</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> Plus at the</font>

656
00:27:38,700 --> 00:27:46,679
<font color="#E5E5E5">time certainly welcome to a PR that</font>

657
00:27:41,279 --> 00:27:50,249
changes it<font color="#E5E5E5"> and your assertion that this</font>

658
00:27:46,679 --> 00:27:51,869
is secure in in light of the<font color="#E5E5E5"> xkcd random</font>

659
00:27:50,249 --> 00:27:55,919
number generator that always<font color="#CCCCCC"> returns for</font>

660
00:27:51,869 --> 00:27:58,678
is not true in the<font color="#E5E5E5"> case where you</font><font color="#CCCCCC"> have</font>

661
00:27:55,919 --> 00:28:01,379
<font color="#E5E5E5">the same secret key on multiple machines</font>

662
00:27:58,679 --> 00:28:03,089
<font color="#CCCCCC">and they can't coordinate the</font><font color="#E5E5E5"> yes</font>

663
00:28:01,379 --> 00:28:04,379
generation of<font color="#CCCCCC"> tags</font><font color="#E5E5E5"> everything in that</font>

664
00:28:03,089 --> 00:28:06,059
<font color="#E5E5E5">case would be</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same across those two</font>

665
00:28:04,379 --> 00:28:07,559
machines<font color="#E5E5E5"> yes of course I don't</font><font color="#CCCCCC"> know that</font>

666
00:28:06,059 --> 00:28:09,119
that's that's properly addressed<font color="#E5E5E5"> but I</font>

667
00:28:07,559 --> 00:28:10,889
think you<font color="#E5E5E5"> should probably like that is a</font>

668
00:28:09,119 --> 00:28:14,609
very good point<font color="#E5E5E5"> to make very clear</font><font color="#CCCCCC"> yeah</font>

669
00:28:10,889 --> 00:28:17,008
so<font color="#CCCCCC"> while we do try</font><font color="#E5E5E5"> to spell out that tag</font>

670
00:28:14,609 --> 00:28:19,499
one here would<font color="#E5E5E5"> be different across those</font>

671
00:28:17,009 --> 00:28:21,779
<font color="#E5E5E5">two</font><font color="#CCCCCC"> instances that one is like specific</font>

672
00:28:19,499 --> 00:28:23,009
to the deployment<font color="#E5E5E5"> or the of this</font>

673
00:28:21,779 --> 00:28:24,659
<font color="#CCCCCC">particulars it's like maybe the MAC</font>

674
00:28:23,009 --> 00:28:29,279
<font color="#CCCCCC">address</font><font color="#E5E5E5"> and the protocol</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what you're</font>

675
00:28:24,659 --> 00:28:30,659
<font color="#CCCCCC">using this something that</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> that leads</font>

676
00:28:29,279 --> 00:28:32,910
me to the<font color="#CCCCCC"> conclusion that</font><font color="#E5E5E5"> perhaps this</font>

677
00:28:30,659 --> 00:28:37,680
this leads to<font color="#CCCCCC"> assigning Oracle that I</font>

678
00:28:32,910 --> 00:28:39,300
I'm not sure than<font color="#CCCCCC"> them so perhaps</font><font color="#E5E5E5"> we I</font>

679
00:28:37,680 --> 00:28:41,460
was thinking this<font color="#E5E5E5"> would be a fixed fixed</font>

680
00:28:39,300 --> 00:28:43,470
tag based on you know<font color="#E5E5E5"> this this</font><font color="#CCCCCC"> is I'm</font>

681
00:28:41,460 --> 00:28:45,120
using this<font color="#E5E5E5"> for HTTP server</font>

682
00:28:43,470 --> 00:28:47,160
authentication so I just pick a string

683
00:28:45,120 --> 00:28:48,959
that that is constant across<font color="#E5E5E5"> all over</font>

684
00:28:47,160 --> 00:28:50,640
that particular<font color="#CCCCCC"> application and then</font>

685
00:28:48,960 --> 00:28:52,790
then I deal<font color="#CCCCCC"> with the the problem of</font>

686
00:28:50,640 --> 00:28:56,490
making tag to unique across all of the

687
00:28:52,790 --> 00:28:57,659
uses<font color="#CCCCCC"> of the same yeah that seems</font>

688
00:28:56,490 --> 00:28:59,850
reasonable at one point I think<font color="#E5E5E5"> that</font>

689
00:28:57,660 --> 00:29:01,050
maybe<font color="#CCCCCC"> that was discussed so we could</font>

690
00:28:59,850 --> 00:29:04,020
certainly revisit<font color="#E5E5E5"> that yeah for sure</font>

691
00:29:01,050 --> 00:29:06,300
right<font color="#E5E5E5"> and the final</font><font color="#CCCCCC"> thing was</font><font color="#E5E5E5"> if you</font>

692
00:29:04,020 --> 00:29:09,360
want to work with<font color="#CCCCCC"> NSS come talk to</font><font color="#E5E5E5"> me we</font>

693
00:29:06,300 --> 00:29:12,570
happen to<font color="#E5E5E5"> have a kind of crappy random</font>

694
00:29:09,360 --> 00:29:15,530
number seed that we have tried<font color="#CCCCCC"> our best</font>

695
00:29:12,570 --> 00:29:18,629
<font color="#E5E5E5">to remove we just used a few random on</font>

696
00:29:15,530 --> 00:29:22,260
most of the builds<font color="#E5E5E5"> that we have but yeah</font>

697
00:29:18,630 --> 00:29:29,100
I<font color="#CCCCCC"> mean we</font><font color="#E5E5E5"> I will come</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> we can do</font>

698
00:29:22,260 --> 00:29:30,930
this<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> yeah for</font><font color="#E5E5E5"> that so my</font>

699
00:29:29,100 --> 00:29:34,320
question is you<font color="#CCCCCC"> mentioned that it's not</font>

700
00:29:30,930 --> 00:29:39,330
a drop-in<font color="#CCCCCC"> replacement for death /you</font>

701
00:29:34,320 --> 00:29:43,370
random do you have any<font color="#E5E5E5"> results on how</font>

702
00:29:39,330 --> 00:29:48,629
many<font color="#E5E5E5"> random bytes you can safely use</font>

703
00:29:43,370 --> 00:29:50,699
from this<font color="#E5E5E5"> Oh some limit</font><font color="#CCCCCC"> no not yet</font>

704
00:29:48,630 --> 00:29:51,900
not that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> not that the</font><font color="#E5E5E5"> security else is</font>

705
00:29:50,700 --> 00:29:54,510
like how<font color="#E5E5E5"> much we can</font><font color="#CCCCCC"> actually pump out</font>

706
00:29:51,900 --> 00:29:56,250
with<font color="#E5E5E5"> this particular technique</font><font color="#CCCCCC"> if you're</font>

707
00:29:54,510 --> 00:29:57,840
interested if you're more like<font color="#CCCCCC"> talking</font>

708
00:29:56,250 --> 00:30:01,770
about<font color="#E5E5E5"> performance metrics</font><font color="#CCCCCC"> for this</font>

709
00:29:57,840 --> 00:30:03,720
particular<font color="#E5E5E5"> technique</font><font color="#CCCCCC"> okay so there that</font>

710
00:30:01,770 --> 00:30:06,570
is<font color="#E5E5E5"> the pending issue that we need</font><font color="#CCCCCC"> to</font>

711
00:30:03,720 --> 00:30:07,440
address<font color="#CCCCCC"> there certainly less for</font><font color="#E5E5E5"> animus</font>

712
00:30:06,570 --> 00:30:08,669
that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> pump out with this</font>

713
00:30:07,440 --> 00:30:10,590
particular with<font color="#E5E5E5"> this particular</font>

714
00:30:08,670 --> 00:30:12,960
technique the short answer is as many as

715
00:30:10,590 --> 00:30:14,909
you like<font color="#E5E5E5"> if you have secured a secure</font>

716
00:30:12,960 --> 00:30:17,040
PRF<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> model the hash function as a</font>

717
00:30:14,910 --> 00:30:19,500
random Oracle<font color="#CCCCCC"> I mean there's really no</font>

718
00:30:17,040 --> 00:30:21,300
<font color="#CCCCCC">boned</font><font color="#E5E5E5"> okay but you don't have</font><font color="#CCCCCC"> forward</font>

719
00:30:19,500 --> 00:30:23,370
security<font color="#CCCCCC"> though</font><font color="#E5E5E5"> I mean once X is</font>

720
00:30:21,300 --> 00:30:24,990
compromised<font color="#CCCCCC"> yes but we just</font><font color="#E5E5E5"> haven't</font>

721
00:30:23,370 --> 00:30:29,040
specified it like the<font color="#E5E5E5"> tightness</font><font color="#CCCCCC"> of the</font>

722
00:30:24,990 --> 00:30:30,600
bound position<font color="#E5E5E5"> thank you yeah I have a</font>

723
00:30:29,040 --> 00:30:33,659
couple<font color="#E5E5E5"> of questions</font><font color="#CCCCCC"> too if I</font><font color="#E5E5E5"> mean yes</font>

724
00:30:30,600 --> 00:30:35,310
and I start you<font color="#CCCCCC"> used dual ec as part of</font>

725
00:30:33,660 --> 00:30:36,630
your motivation<font color="#CCCCCC"> for this yeah I'm not</font>

726
00:30:35,310 --> 00:30:40,500
sure<font color="#CCCCCC"> that motivation</font><font color="#E5E5E5"> really works</font>

727
00:30:36,630 --> 00:30:42,270
because it's known<font color="#CCCCCC"> by now that a back</font>

728
00:30:40,500 --> 00:30:43,130
<font color="#CCCCCC">door generator in that way is actually</font>

729
00:30:42,270 --> 00:30:45,450
equivalent to<font color="#E5E5E5"> public key encryption</font>

730
00:30:43,130 --> 00:30:46,740
which means you can spot it<font color="#E5E5E5"> in source</font>

731
00:30:45,450 --> 00:30:48,450
code if you have access<font color="#CCCCCC"> to store</font>

732
00:30:46,740 --> 00:30:49,679
could it stands<font color="#E5E5E5"> out a mile because</font><font color="#CCCCCC"> it's</font>

733
00:30:48,450 --> 00:30:51,210
<font color="#E5E5E5">basically a</font><font color="#CCCCCC"> public key encryption scheme</font>

734
00:30:49,679 --> 00:30:52,770
<font color="#E5E5E5">on the other hand if you don't have</font>

735
00:30:51,210 --> 00:30:55,080
<font color="#CCCCCC">access</font><font color="#E5E5E5"> to source code you can't see it</font>

736
00:30:52,770 --> 00:30:56,400
and<font color="#E5E5E5"> you can't detect it okay fair point</font>

737
00:30:55,080 --> 00:30:58,409
<font color="#CCCCCC">so that might be something you</font><font color="#E5E5E5"> want to</font>

738
00:30:56,400 --> 00:31:00,059
<font color="#E5E5E5">look at in</font><font color="#CCCCCC"> your you know section</font><font color="#E5E5E5"> and</font>

739
00:30:58,410 --> 00:31:00,780
<font color="#CCCCCC">zero of your</font><font color="#E5E5E5"> draft or something</font><font color="#CCCCCC"> yeah our</font>

740
00:31:00,059 --> 00:31:02,399
<font color="#E5E5E5">motivation</font>

741
00:31:00,780 --> 00:31:03,629
<font color="#E5E5E5">I'm the other question I had is if you</font>

742
00:31:02,400 --> 00:31:07,350
go<font color="#CCCCCC"> back to the equation just from</font>

743
00:31:03,630 --> 00:31:10,290
<font color="#CCCCCC">aluminum suppose we use</font><font color="#E5E5E5"> this process to</font>

744
00:31:07,350 --> 00:31:12,090
<font color="#E5E5E5">generate randomness for a signature</font>

745
00:31:10,290 --> 00:31:13,980
scheme which is<font color="#E5E5E5"> already the signature</font>

746
00:31:12,090 --> 00:31:15,389
scheme that's being used<font color="#E5E5E5"> to generate the</font>

747
00:31:13,980 --> 00:31:21,630
randomness yeah what can you say about

748
00:31:15,390 --> 00:31:23,640
security in that case I I don't<font color="#CCCCCC"> have a</font>

749
00:31:21,630 --> 00:31:25,740
good answer for<font color="#E5E5E5"> that right</font><font color="#CCCCCC"> now but</font><font color="#E5E5E5"> that</font>

750
00:31:23,640 --> 00:31:28,860
is again something we see we just<font color="#CCCCCC"> need</font>

751
00:31:25,740 --> 00:31:32,190
to kind of specify yeah hello<font color="#E5E5E5"> /</font><font color="#CCCCCC"> Mishler</font>

752
00:31:28,860 --> 00:31:36,209
<font color="#E5E5E5">descriptor pro one command for</font><font color="#CCCCCC"> kenneth</font>

753
00:31:32,190 --> 00:31:39,000
<font color="#E5E5E5">question yes this is very important</font>

754
00:31:36,210 --> 00:31:42,660
question that's why in<font color="#E5E5E5"> the new version</font>

755
00:31:39,000 --> 00:31:45,300
of<font color="#E5E5E5"> the draft</font><font color="#CCCCCC"> at least should appear</font>

756
00:31:42,660 --> 00:31:49,380
about this monistic signature algorithms

757
00:31:45,300 --> 00:31:52,230
and<font color="#E5E5E5"> I think we should</font><font color="#CCCCCC"> discuss that</font><font color="#E5E5E5"> she's</font>

758
00:31:49,380 --> 00:31:57,050
<font color="#CCCCCC">this</font><font color="#E5E5E5"> shoot can be switched to must in</font>

759
00:31:52,230 --> 00:31:57,050
the future<font color="#E5E5E5"> so it was a usage of</font>

760
00:31:57,650 --> 00:32:04,160
<font color="#CCCCCC">non-deterministic signature algorithm</font>

761
00:31:59,580 --> 00:32:08,070
can<font color="#CCCCCC"> be used only</font><font color="#E5E5E5"> once for these exact</font>

762
00:32:04,160 --> 00:32:10,500
usage and not for any other means and

763
00:32:08,070 --> 00:32:15,689
about<font color="#E5E5E5"> the question of</font><font color="#CCCCCC"> Martin about Sun</font>

764
00:32:10,500 --> 00:32:18,690
<font color="#CCCCCC">Oracle of</font><font color="#E5E5E5"> course we should continue</font>

765
00:32:15,690 --> 00:32:21,870
improving the draft<font color="#E5E5E5"> about as a form of</font>

766
00:32:18,690 --> 00:32:25,559
tag<font color="#E5E5E5"> 1 and take</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> about the possible</font>

767
00:32:21,870 --> 00:32:28,050
forms<font color="#E5E5E5"> such that no obvious attacks</font><font color="#CCCCCC"> place</font>

768
00:32:25,559 --> 00:32:33,360
I<font color="#E5E5E5"> mean Oracle can be possible so these</font>

769
00:32:28,050 --> 00:32:35,730
two ways<font color="#CCCCCC"> must</font><font color="#E5E5E5"> be taken into</font><font color="#CCCCCC"> account</font>

770
00:32:33,360 --> 00:32:37,949
while<font color="#CCCCCC"> we improve out</font><font color="#E5E5E5"> draft so thank you</font>

771
00:32:35,730 --> 00:32:42,690
very<font color="#E5E5E5"> much questions we are</font><font color="#CCCCCC"> cynical about</font>

772
00:32:37,950 --> 00:32:47,340
<font color="#CCCCCC">it</font><font color="#E5E5E5"> already but maybe for now our steps</font>

773
00:32:42,690 --> 00:32:50,370
were not too much but<font color="#E5E5E5"> we tried to start</font>

774
00:32:47,340 --> 00:32:52,139
to keep it<font color="#CCCCCC"> into account</font><font color="#E5E5E5"> yeah thank you</font>

775
00:32:50,370 --> 00:32:53,459
<font color="#CCCCCC">yeah thanks thank you one one</font><font color="#E5E5E5"> more</font>

776
00:32:52,140 --> 00:32:55,590
question from<font color="#E5E5E5"> the chairs</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> it from</font>

777
00:32:53,460 --> 00:32:57,059
<font color="#E5E5E5">Alexia and me is you</font><font color="#CCCCCC"> know what was</font><font color="#E5E5E5"> your</font>

778
00:32:55,590 --> 00:33:00,360
intention here what are you<font color="#E5E5E5"> hoping to do</font>

779
00:32:57,059 --> 00:33:00,690
so<font color="#E5E5E5"> we were originally</font><font color="#CCCCCC"> appointed to come</font>

780
00:33:00,360 --> 00:33:06,539
here

781
00:33:00,690 --> 00:33:08,549
from<font color="#CCCCCC"> sec dispatch and here we are so I</font>

782
00:33:06,539 --> 00:33:10,019
guess<font color="#E5E5E5"> that happens a lot of people get</font>

783
00:33:08,549 --> 00:33:16,080
sent to<font color="#E5E5E5"> see FRG is like a kind of</font>

784
00:33:10,019 --> 00:33:17,789
punishment thing you know<font color="#E5E5E5"> so it depends</font>

785
00:33:16,080 --> 00:33:21,658
on whatever the work or the the group

786
00:33:17,789 --> 00:33:22,979
feels is best<font color="#CCCCCC"> I</font><font color="#E5E5E5"> I think it's</font><font color="#CCCCCC"> useful</font>

787
00:33:21,659 --> 00:33:26,309
technique we can<font color="#CCCCCC"> certainly do it without</font>

788
00:33:22,979 --> 00:33:28,379
anything<font color="#E5E5E5"> written</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> but you know if it</font>

789
00:33:26,309 --> 00:33:29,789
can<font color="#E5E5E5"> be written down why not yeah so</font>

790
00:33:28,379 --> 00:33:31,320
Martin Thompson let's let's let's be

791
00:33:29,789 --> 00:33:34,019
frank<font color="#E5E5E5"> you wrote something down in an</font>

792
00:33:31,320 --> 00:33:37,259
<font color="#E5E5E5">internet draft with some intent that you</font>

793
00:33:34,019 --> 00:33:40,710
<font color="#CCCCCC">would have it published is your intent</font>

794
00:33:37,259 --> 00:33:44,519
<font color="#E5E5E5">to ask these guys and this group to</font>

795
00:33:40,710 --> 00:33:46,409
publish that<font color="#E5E5E5"> um yeah I I think so</font><font color="#CCCCCC"> if</font>

796
00:33:44,519 --> 00:33:48,330
people deem it useful and we're the

797
00:33:46,409 --> 00:33:50,070
excellent<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> I think you're</font><font color="#E5E5E5"> sort</font>

798
00:33:48,330 --> 00:33:51,739
<font color="#E5E5E5">of getting to</font><font color="#CCCCCC"> this point but thank Thank</font>

799
00:33:50,070 --> 00:33:55,019
<font color="#CCCCCC">You Martin for accelerating the process</font>

800
00:33:51,739 --> 00:33:58,049
so maybe<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> just take a hum in the</font>

801
00:33:55,019 --> 00:33:59,669
room are people in<font color="#E5E5E5"> favor of the research</font>

802
00:33:58,049 --> 00:34:01,590
group<font color="#E5E5E5"> adopting this as a research group</font>

803
00:33:59,669 --> 00:34:04,649
<font color="#E5E5E5">draft with the intention of starting as</font>

804
00:34:01,590 --> 00:34:06,330
a starting point<font color="#CCCCCC"> yeah potentially</font><font color="#E5E5E5"> other</font>

805
00:34:04,649 --> 00:34:08,699
techniques will come forward and<font color="#CCCCCC"> other</font>

806
00:34:06,330 --> 00:34:10,859
people want<font color="#E5E5E5"> to get involved and that's</font>

807
00:34:08,699 --> 00:34:13,980
<font color="#E5E5E5">how it always is with with an internet</font>

808
00:34:10,859 --> 00:34:17,520
draft in a research<font color="#E5E5E5"> group yep so we</font>

809
00:34:13,980 --> 00:34:21,059
could take<font color="#E5E5E5"> a home so I guess</font><font color="#CCCCCC"> on three</font>

810
00:34:17,520 --> 00:34:22,500
hum if you are in favor<font color="#E5E5E5"> of this of the</font>

811
00:34:21,059 --> 00:34:26,480
work of the research group<font color="#E5E5E5"> adopting this</font>

812
00:34:22,500 --> 00:34:26,480
as a starting<font color="#E5E5E5"> point</font><font color="#CCCCCC"> for an RFC</font>

813
00:34:26,899 --> 00:34:32,299
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> and um if you</font><font color="#E5E5E5"> are against</font>

814
00:34:32,629 --> 00:34:38,399
you know yeah you did<font color="#CCCCCC"> it was one</font><font color="#E5E5E5"> of what</font>

815
00:34:36,179 --> 00:34:40,649
okay<font color="#E5E5E5"> but I think much lower</font><font color="#CCCCCC"> volume than</font>

816
00:34:38,399 --> 00:34:41,909
<font color="#CCCCCC">the hum and favor thank you very much</font>

817
00:34:40,649 --> 00:34:46,529
it's<font color="#E5E5E5"> really helpful thank you everyone</font>

818
00:34:41,909 --> 00:34:48,990
for participating<font color="#CCCCCC"> yeah thanks good just</font>

819
00:34:46,529 --> 00:34:52,020
<font color="#E5E5E5">a quick point of order the</font><font color="#CCCCCC"> the draft is</font>

820
00:34:48,989 --> 00:34:53,969
on github<font color="#CCCCCC"> at the link at the bottom</font>

821
00:34:52,020 --> 00:34:55,739
<font color="#CCCCCC">that's just a pointer to some code</font>

822
00:34:53,969 --> 00:34:57,808
that's<font color="#CCCCCC"> there but if you have</font><font color="#E5E5E5"> comments or</font>

823
00:34:55,739 --> 00:34:59,490
you want to<font color="#CCCCCC"> file</font><font color="#E5E5E5"> requests please go</font>

824
00:34:57,809 --> 00:35:03,680
ahead<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can find the slides on the</font>

825
00:34:59,490 --> 00:35:03,680
agenda<font color="#CCCCCC"> Thanks</font><font color="#E5E5E5"> yep</font>

826
00:35:14,840 --> 00:35:19,950
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so the next</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> is about hashing</font>

827
00:35:18,120 --> 00:35:22,259
<font color="#CCCCCC">to elliptic curves this is work that</font><font color="#E5E5E5"> Nik</font>

828
00:35:19,950 --> 00:35:25,080
and I I did not intend to<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> put</font>

829
00:35:22,260 --> 00:35:26,880
<font color="#E5E5E5">together</font><font color="#CCCCCC"> there has been some work</font>

830
00:35:25,080 --> 00:35:29,520
<font color="#E5E5E5">especially with relation to the vrf</font>

831
00:35:26,880 --> 00:35:31,950
<font color="#CCCCCC">graph that</font><font color="#E5E5E5"> was recently adopted</font><font color="#CCCCCC"> - you</font>

832
00:35:29,520 --> 00:35:33,870
know nail down exactly how<font color="#E5E5E5"> you might</font>

833
00:35:31,950 --> 00:35:36,180
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> hash arbitrary things strings</font><font color="#CCCCCC"> to</font>

834
00:35:33,870 --> 00:35:37,890
elliptic curves<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there are a</font><font color="#CCCCCC"> variety</font>

835
00:35:36,180 --> 00:35:40,080
of<font color="#CCCCCC"> different ways</font><font color="#E5E5E5"> to go about</font><font color="#CCCCCC"> doing this</font>

836
00:35:37,890 --> 00:35:41,819
if you<font color="#CCCCCC"> just look</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> literature so we</font>

837
00:35:40,080 --> 00:35:44,850
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to write</font><font color="#E5E5E5"> down what</font><font color="#CCCCCC"> we thought</font>

838
00:35:41,820 --> 00:35:47,300
were reasonable mechanisms for doing<font color="#E5E5E5"> so</font>

839
00:35:44,850 --> 00:35:49,170
exactly<font color="#E5E5E5"> how</font><font color="#CCCCCC"> you do them</font><font color="#E5E5E5"> and hopefully</font>

840
00:35:47,300 --> 00:35:52,800
<font color="#E5E5E5">depending on how those hacks</font><font color="#CCCCCC"> back stuff</font>

841
00:35:49,170 --> 00:35:54,690
going goes maybe<font color="#E5E5E5"> produce some maybe use</font>

842
00:35:52,800 --> 00:35:56,220
<font color="#CCCCCC">that as kind of a vehicle</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> drive that</font>

843
00:35:54,690 --> 00:35:59,430
<font color="#E5E5E5">particular work forward as well so</font>

844
00:35:56,220 --> 00:36:01,500
<font color="#E5E5E5">kartik I'm kind of well sync up later</font>

845
00:35:59,430 --> 00:36:04,440
talk<font color="#E5E5E5"> about it so</font><font color="#CCCCCC"> for some background</font>

846
00:36:01,500 --> 00:36:05,790
<font color="#CCCCCC">hashing two curves is not uncommon it's</font>

847
00:36:04,440 --> 00:36:08,310
used in a wide variety<font color="#CCCCCC"> of protocols</font>

848
00:36:05,790 --> 00:36:10,290
<font color="#E5E5E5">Pakes use it quite often to hash for</font>

849
00:36:08,310 --> 00:36:14,130
example of the private key or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> secret</font>

850
00:36:10,290 --> 00:36:16,320
password<font color="#CCCCCC"> onto the curve itself BLS</font>

851
00:36:14,130 --> 00:36:18,930
signatures<font color="#E5E5E5"> used it quite frequently</font><font color="#CCCCCC"> or</font>

852
00:36:16,320 --> 00:36:23,340
used it as well as I mentioned the vrf

853
00:36:18,930 --> 00:36:25,710
<font color="#CCCCCC">Draft has a placeholder for the elliptic</font>

854
00:36:23,340 --> 00:36:27,270
curve variant of the<font color="#E5E5E5"> vrf that uses this</font>

855
00:36:25,710 --> 00:36:30,150
particular<font color="#CCCCCC"> technique and the privacy</font>

856
00:36:27,270 --> 00:36:33,330
perhaps work from<font color="#E5E5E5"> CloudFlare and others</font>

857
00:36:30,150 --> 00:36:36,810
<font color="#CCCCCC">also has this baked</font><font color="#E5E5E5"> into at one step of</font>

858
00:36:33,330 --> 00:36:38,190
<font color="#E5E5E5">the protocol</font><font color="#CCCCCC"> so the common approach to</font>

859
00:36:36,810 --> 00:36:39,870
<font color="#CCCCCC">going about</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> this and</font><font color="#E5E5E5"> the one</font>

860
00:36:38,190 --> 00:36:41,190
that's written down<font color="#E5E5E5"> in the vrf</font><font color="#CCCCCC"> draft and</font>

861
00:36:39,870 --> 00:36:44,069
I think the one that's<font color="#CCCCCC"> maybe implemented</font>

862
00:36:41,190 --> 00:36:48,740
in privacy<font color="#E5E5E5"> is they try an increment</font>

863
00:36:44,070 --> 00:36:50,640
approach where you simply um iterate

864
00:36:48,740 --> 00:36:52,640
<font color="#E5E5E5">essentially until you have something</font>

865
00:36:50,640 --> 00:36:56,460
<font color="#CCCCCC">under the</font><font color="#E5E5E5"> curve so you have some spring</font>

866
00:36:52,640 --> 00:36:58,470
<font color="#CCCCCC">hash it up with some you know kid hat</font>

867
00:36:56,460 --> 00:37:01,110
and a<font color="#CCCCCC"> would some counter and check to</font>

868
00:36:58,470 --> 00:37:04,589
see<font color="#CCCCCC"> if the output can be decoded to a</font>

869
00:37:01,110 --> 00:37:06,990
point on the curve and if so return it

870
00:37:04,590 --> 00:37:08,730
<font color="#E5E5E5">otherwise keep going indefinitely</font>

871
00:37:06,990 --> 00:37:10,140
the problem with<font color="#E5E5E5"> this particular</font>

872
00:37:08,730 --> 00:37:13,170
approach<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> obviously not</font>

873
00:37:10,140 --> 00:37:15,540
constant time<font color="#CCCCCC"> the number of iterations</font>

874
00:37:13,170 --> 00:37:18,960
that<font color="#E5E5E5"> you do depends on or will</font>

875
00:37:15,540 --> 00:37:21,180
distinctly reveal what the actual<font color="#E5E5E5"> arm</font>

876
00:37:18,960 --> 00:37:24,930
reveal something about<font color="#E5E5E5"> the input</font><font color="#CCCCCC"> so</font>

877
00:37:21,180 --> 00:37:26,370
that's not<font color="#E5E5E5"> always necessary</font><font color="#CCCCCC"> but when we</font>

878
00:37:24,930 --> 00:37:28,830
<font color="#E5E5E5">can make it constant time it might as</font>

879
00:37:26,370 --> 00:37:30,240
well<font color="#E5E5E5"> so some of the requirements we kind</font>

880
00:37:28,830 --> 00:37:32,460
of set out<font color="#E5E5E5"> for this particular draft are</font>

881
00:37:30,240 --> 00:37:35,370
number one we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be constant</font><font color="#CCCCCC"> time</font>

882
00:37:32,460 --> 00:37:37,950
number two whatever else you people want

883
00:37:35,370 --> 00:37:40,560
<font color="#E5E5E5">in this particular work</font><font color="#CCCCCC"> so question mark</font>

884
00:37:37,950 --> 00:37:42,960
there<font color="#CCCCCC"> we were</font><font color="#E5E5E5"> happy to extend that</font><font color="#CCCCCC"> non</font>

885
00:37:40,560 --> 00:37:45,750
requirements are<font color="#CCCCCC"> that the hash function</font>

886
00:37:42,960 --> 00:37:47,070
itself is not<font color="#E5E5E5"> invertible</font><font color="#CCCCCC"> and I realize</font>

887
00:37:45,750 --> 00:37:48,870
that's kind<font color="#E5E5E5"> of misleading</font><font color="#CCCCCC"> because we</font>

888
00:37:47,070 --> 00:37:50,220
typically you know model these as random

889
00:37:48,870 --> 00:37:52,710
Oracle's which we<font color="#E5E5E5"> consider to be one way</font>

890
00:37:50,220 --> 00:37:54,480
but<font color="#E5E5E5"> certain implementations or certain</font>

891
00:37:52,710 --> 00:37:56,490
algorithms rather<font color="#E5E5E5"> are invertible</font>

892
00:37:54,480 --> 00:37:59,730
<font color="#E5E5E5">elliegator</font><font color="#CCCCCC"> to for example which point</font><font color="#E5E5E5"> to</font>

893
00:37:56,490 --> 00:38:01,470
later is invertible<font color="#CCCCCC"> and that has</font><font color="#E5E5E5"> some</font>

894
00:37:59,730 --> 00:38:02,730
useful<font color="#CCCCCC"> properties for example if you</font>

895
00:38:01,470 --> 00:38:04,350
want<font color="#E5E5E5"> to do some steganography type</font>

896
00:38:02,730 --> 00:38:06,690
things where you're<font color="#E5E5E5"> sending random bytes</font>

897
00:38:04,350 --> 00:38:08,759
which also<font color="#E5E5E5"> happen to be a point on a</font>

898
00:38:06,690 --> 00:38:11,040
curve<font color="#CCCCCC"> and you want to try and get away</font>

899
00:38:08,760 --> 00:38:13,440
<font color="#CCCCCC">with</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> that has a potential application</font>

900
00:38:11,040 --> 00:38:15,240
there<font color="#E5E5E5"> but some particular protocols</font>

901
00:38:13,440 --> 00:38:18,570
privacy paths for example requires that

902
00:38:15,240 --> 00:38:19,890
the mapping<font color="#E5E5E5"> not be invertible</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> just</font>

903
00:38:18,570 --> 00:38:21,180
want to call<font color="#E5E5E5"> out and it's not yet</font>

904
00:38:19,890 --> 00:38:22,680
written down the draft<font color="#E5E5E5"> but we want to</font>

905
00:38:21,180 --> 00:38:24,779
call it<font color="#E5E5E5"> which of these algorithms are</font>

906
00:38:22,680 --> 00:38:26,399
invertible<font color="#CCCCCC"> and</font><font color="#E5E5E5"> which are not but it's</font>

907
00:38:24,780 --> 00:38:29,670
not<font color="#CCCCCC"> a requirement for the ones</font><font color="#E5E5E5"> that we</font>

908
00:38:26,400 --> 00:38:32,940
write<font color="#CCCCCC"> down right now so the methods that</font>

909
00:38:29,670 --> 00:38:36,320
we chose<font color="#E5E5E5"> and we started with</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> are</font>

910
00:38:32,940 --> 00:38:38,460
<font color="#CCCCCC">the aircard the SW I forget their names</font>

911
00:38:36,320 --> 00:38:40,560
<font color="#CCCCCC">the simplified has to be</font><font color="#E5E5E5"> you and</font>

912
00:38:38,460 --> 00:38:42,480
alligator<font color="#E5E5E5"> two and each of them has this</font>

913
00:38:40,560 --> 00:38:44,220
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> requirement on the</font><font color="#E5E5E5"> curve</font>

914
00:38:42,480 --> 00:38:46,340
itself for example<font color="#CCCCCC"> i-car</font><font color="#E5E5E5"> requires that</font>

915
00:38:44,220 --> 00:38:49,799
the prime<font color="#E5E5E5"> or the order of the prime</font>

916
00:38:46,340 --> 00:38:51,240
subfield<font color="#E5E5E5"> is congruent to 2 months 3 SW</font>

917
00:38:49,800 --> 00:38:53,850
has no<font color="#CCCCCC"> requirements so it works for</font><font color="#E5E5E5"> any</font>

918
00:38:51,240 --> 00:38:56,250
<font color="#E5E5E5">particular curve elliegator 2 has some</font>

919
00:38:53,850 --> 00:38:57,360
interesting requirement<font color="#CCCCCC"> Q is large</font><font color="#E5E5E5"> I</font>

920
00:38:56,250 --> 00:38:59,150
forget what the actual<font color="#E5E5E5"> technical</font>

921
00:38:57,360 --> 00:39:01,470
<font color="#E5E5E5">definition of large here is in this case</font>

922
00:38:59,150 --> 00:39:06,750
has a point<font color="#E5E5E5"> of order 2 and J and very</font>

923
00:39:01,470 --> 00:39:07,680
not equal to 1 7 to 8 so<font color="#E5E5E5"> I be more</font>

924
00:39:06,750 --> 00:39:09,930
interesting<font color="#CCCCCC"> for judge appoint you to</font>

925
00:39:07,680 --> 00:39:11,640
<font color="#E5E5E5">papers for you know the particular</font>

926
00:39:09,930 --> 00:39:13,169
<font color="#CCCCCC">details of</font><font color="#E5E5E5"> these algorithms and why the</font>

927
00:39:11,640 --> 00:39:15,900
requirements are necessary<font color="#E5E5E5"> then describe</font>

928
00:39:13,170 --> 00:39:17,370
them here<font color="#CCCCCC"> so that's what I'm doing in</font>

929
00:39:15,900 --> 00:39:20,070
the<font color="#E5E5E5"> draft we focus on one particular</font>

930
00:39:17,370 --> 00:39:23,160
<font color="#E5E5E5">interface for this function simply a</font>

931
00:39:20,070 --> 00:39:24,570
hash<font color="#CCCCCC"> function which</font><font color="#E5E5E5"> I shortened that to</font>

932
00:39:23,160 --> 00:39:27,450
H you see here which<font color="#E5E5E5"> takes some input</font>

933
00:39:24,570 --> 00:39:29,190
alpha<font color="#E5E5E5"> maps which is at least</font>

934
00:39:27,450 --> 00:39:31,950
<font color="#E5E5E5">nonzero and maps to some point and the</font>

935
00:39:29,190 --> 00:39:32,700
curve so alpha can<font color="#E5E5E5"> be arbitrary in point</font>

936
00:39:31,950 --> 00:39:35,129
we

937
00:39:32,700 --> 00:39:37,529
<font color="#E5E5E5">q to denote the prime order the</font><font color="#CCCCCC"> base</font>

938
00:39:35,130 --> 00:39:39,000
field<font color="#CCCCCC"> u is a point</font><font color="#E5E5E5"> of order</font><font color="#CCCCCC"> 2 we went</font>

939
00:39:37,530 --> 00:39:40,619
specifically<font color="#E5E5E5"> in the case of alligator 2</font>

940
00:39:39,000 --> 00:39:42,960
which is my one that has this<font color="#E5E5E5"> lovely</font>

941
00:39:40,619 --> 00:39:46,440
little criteria f of<font color="#E5E5E5"> X is the curve</font>

942
00:39:42,960 --> 00:39:49,770
<font color="#E5E5E5">equation and then H of</font><font color="#CCCCCC"> X Rho alpha is</font>

943
00:39:46,440 --> 00:39:51,510
something that we<font color="#CCCCCC"> use to hash</font><font color="#E5E5E5"> a string</font>

944
00:39:49,770 --> 00:39:53,849
into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> prime order subgroup of</font><font color="#CCCCCC"> the</font>

945
00:39:51,510 --> 00:39:56,550
curve<font color="#E5E5E5"> not hash to the curve which are</font>

946
00:39:53,849 --> 00:40:00,690
two distinct things<font color="#CCCCCC"> so the heart method</font>

947
00:39:56,550 --> 00:40:02,460
is fairly<font color="#CCCCCC"> simple you can you know write</font>

948
00:40:00,690 --> 00:40:04,650
some sage go fairly<font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> compute</font>

949
00:40:02,460 --> 00:40:07,950
this in fact one of<font color="#E5E5E5"> the appendices in</font>

950
00:40:04,650 --> 00:40:09,150
the draft has this<font color="#E5E5E5"> some modest number of</font>

951
00:40:07,950 --> 00:40:11,339
exponentiation some scalar

952
00:40:09,150 --> 00:40:14,460
multiplications and additions and

953
00:40:11,339 --> 00:40:15,630
<font color="#CCCCCC">subtractions</font><font color="#E5E5E5"> the exact cost we still</font>

954
00:40:14,460 --> 00:40:17,849
need to do in the draft there's a big

955
00:40:15,630 --> 00:40:19,380
<font color="#CCCCCC">to-do at the end</font><font color="#E5E5E5"> just to compare the</font>

956
00:40:17,849 --> 00:40:21,060
different you know the computation will

957
00:40:19,380 --> 00:40:23,940
come<font color="#CCCCCC"> the you know</font><font color="#E5E5E5"> at arithmetic</font>

958
00:40:21,060 --> 00:40:26,130
complexity of each of the algorithms<font color="#CCCCCC"> but</font>

959
00:40:23,940 --> 00:40:28,859
<font color="#E5E5E5">you can you know just</font><font color="#CCCCCC"> take a glance</font><font color="#E5E5E5"> at</font>

960
00:40:26,130 --> 00:40:32,300
<font color="#CCCCCC">it</font><font color="#E5E5E5"> and see what it's like alligator</font><font color="#CCCCCC"> -</font>

961
00:40:28,859 --> 00:40:35,369
sort of similar but a<font color="#E5E5E5"> little bit simpler</font>

962
00:40:32,300 --> 00:40:37,380
compute this value D and compute<font color="#CCCCCC"> the</font>

963
00:40:35,369 --> 00:40:38,640
Legendre symbol and then just depending

964
00:40:37,380 --> 00:40:41,190
what the<font color="#E5E5E5"> output of</font><font color="#CCCCCC"> that is negative one</font>

965
00:40:38,640 --> 00:40:42,960
or not choose one value the other<font color="#E5E5E5"> so</font>

966
00:40:41,190 --> 00:40:44,550
there's some constant time<font color="#CCCCCC"> this you need</font>

967
00:40:42,960 --> 00:40:46,560
to worry<font color="#CCCCCC"> about with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> implementing</font>

968
00:40:44,550 --> 00:40:51,300
this particular technique but it's not

969
00:40:46,560 --> 00:40:54,119
too hard to<font color="#E5E5E5"> accomplish</font><font color="#CCCCCC"> so our current</font>

970
00:40:51,300 --> 00:40:56,579
recommendations based on the widely<font color="#CCCCCC"> used</font>

971
00:40:54,119 --> 00:41:01,740
curves that are<font color="#E5E5E5"> in use in ITF protocols</font>

972
00:40:56,579 --> 00:41:03,960
are P 256<font color="#E5E5E5"> stick with simplified SW 384</font>

973
00:41:01,740 --> 00:41:06,450
use a cart<font color="#E5E5E5"> in four to five or nine four</font>

974
00:41:03,960 --> 00:41:09,240
four<font color="#CCCCCC"> eight</font><font color="#E5E5E5"> use alligator</font><font color="#CCCCCC"> two simple</font>

975
00:41:06,450 --> 00:41:11,279
<font color="#CCCCCC">because those were or that particular</font>

976
00:41:09,240 --> 00:41:15,779
<font color="#E5E5E5">algorithm was sort of tailored to</font><font color="#CCCCCC"> that</font>

977
00:41:11,280 --> 00:41:18,089
you know Bernstein like world so and and

978
00:41:15,780 --> 00:41:19,380
it<font color="#E5E5E5"> seems to work</font><font color="#CCCCCC"> so um I say</font><font color="#E5E5E5"> current</font>

979
00:41:18,089 --> 00:41:21,810
because those are free to change

980
00:41:19,380 --> 00:41:23,790
depending<font color="#CCCCCC"> on what the</font><font color="#E5E5E5"> actual cost</font>

981
00:41:21,810 --> 00:41:25,380
complexity turns out to be<font color="#E5E5E5"> and if</font>

982
00:41:23,790 --> 00:41:28,050
there's a new algorithm<font color="#E5E5E5"> that comes out</font>

983
00:41:25,380 --> 00:41:30,950
so<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> I'm happy to discuss</font><font color="#CCCCCC"> these</font>

984
00:41:28,050 --> 00:41:33,390
particular recommendations going forward

985
00:41:30,950 --> 00:41:34,560
like I said there's a<font color="#E5E5E5"> lot of open</font><font color="#CCCCCC"> tasks</font>

986
00:41:33,390 --> 00:41:36,930
to do we<font color="#E5E5E5"> just wanted to</font><font color="#CCCCCC"> get something</font>

987
00:41:34,560 --> 00:41:38,670
written<font color="#E5E5E5"> down</font><font color="#CCCCCC"> and something</font><font color="#E5E5E5"> that people</font>

988
00:41:36,930 --> 00:41:40,379
<font color="#CCCCCC">could talk about</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to complete the</font>

989
00:41:38,670 --> 00:41:43,020
cost analysis there's a huge empty

990
00:41:40,380 --> 00:41:45,119
section<font color="#E5E5E5"> on the SW algorithm particularly</font>

991
00:41:43,020 --> 00:41:46,200
details of an implementation which are

992
00:41:45,119 --> 00:41:48,599
<font color="#E5E5E5">empty</font>

993
00:41:46,200 --> 00:41:50,368
we'll get<font color="#E5E5E5"> to eventually</font><font color="#CCCCCC"> simply that</font>

994
00:41:48,599 --> 00:41:54,510
<font color="#E5E5E5">draft</font><font color="#CCCCCC"> unlike him up on this mighty quick</font>

995
00:41:50,369 --> 00:41:56,369
so next time<font color="#E5E5E5"> around we'll get to it</font>

996
00:41:54,510 --> 00:41:57,750
<font color="#CCCCCC">Sharon Goldberg who we collaborated with</font>

997
00:41:56,369 --> 00:41:59,369
on<font color="#E5E5E5"> this particular document pointed out</font>

998
00:41:57,750 --> 00:42:01,500
<font color="#E5E5E5">that it would be</font><font color="#CCCCCC"> useful if there were</font>

999
00:41:59,369 --> 00:42:04,859
<font color="#E5E5E5">security reductions in this particular</font>

1000
00:42:01,500 --> 00:42:06,510
work<font color="#CCCCCC"> where possible so of course that's</font>

1001
00:42:04,859 --> 00:42:09,299
<font color="#CCCCCC">something we should consider</font><font color="#E5E5E5"> and</font>

1002
00:42:06,510 --> 00:42:11,280
integrate<font color="#E5E5E5"> the interface</font><font color="#CCCCCC"> details are sort</font>

1003
00:42:09,300 --> 00:42:13,230
of skimmed over in particular how you

1004
00:42:11,280 --> 00:42:16,380
convert you know octave strings to

1005
00:42:13,230 --> 00:42:18,180
integer points so we<font color="#E5E5E5"> just need to look</font>

1006
00:42:16,380 --> 00:42:19,400
at the vrf<font color="#CCCCCC"> graph</font><font color="#E5E5E5"> where she's done a she</font>

1007
00:42:18,180 --> 00:42:21,960
and her co-authors did a great job

1008
00:42:19,400 --> 00:42:24,060
<font color="#CCCCCC">laying</font><font color="#E5E5E5"> out the foundations there and</font>

1009
00:42:21,960 --> 00:42:25,500
maybe apply that<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also kind</font><font color="#CCCCCC"> of</font>

1010
00:42:24,060 --> 00:42:27,450
work alongside<font color="#E5E5E5"> with her to see if</font>

1011
00:42:25,500 --> 00:42:31,020
there's something<font color="#E5E5E5"> like in that draft</font>

1012
00:42:27,450 --> 00:42:32,790
that or if she can point her<font color="#CCCCCC"> VC vrf</font>

1013
00:42:31,020 --> 00:42:35,700
stuff over to this particular document

1014
00:42:32,790 --> 00:42:36,750
<font color="#CCCCCC">so we don't duplicate work</font><font color="#E5E5E5"> and then I</font>

1015
00:42:35,700 --> 00:42:38,098
was<font color="#CCCCCC"> alluding to</font><font color="#E5E5E5"> earlier it'd be really</font>

1016
00:42:36,750 --> 00:42:39,390
nice<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> could use this as a driver</font>

1017
00:42:38,099 --> 00:42:41,070
<font color="#E5E5E5">for hacks back to produce some</font>

1018
00:42:39,390 --> 00:42:44,690
verifiable<font color="#E5E5E5"> implantations and you know</font>

1019
00:42:41,070 --> 00:42:46,800
test out the<font color="#CCCCCC"> miss emerging language and</font>

1020
00:42:44,690 --> 00:42:51,170
the last thing is so I want to<font color="#E5E5E5"> clarify</font>

1021
00:42:46,800 --> 00:42:53,550
<font color="#CCCCCC">that not all mappings</font><font color="#E5E5E5"> are reversible and</font>

1022
00:42:51,170 --> 00:42:54,750
specifically<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> layout</font><font color="#E5E5E5"> in</font>

1023
00:42:53,550 --> 00:42:57,420
potentially in the security

1024
00:42:54,750 --> 00:42:59,220
<font color="#CCCCCC">consideration section</font><font color="#E5E5E5"> what happens if</font>

1025
00:42:57,420 --> 00:43:03,109
you<font color="#CCCCCC"> are using a hash function that is</font>

1026
00:42:59,220 --> 00:43:06,149
invertible<font color="#CCCCCC"> so some open issues</font>

1027
00:43:03,109 --> 00:43:08,609
particular the language around<font color="#E5E5E5"> hashing</font>

1028
00:43:06,150 --> 00:43:11,490
to a prime order<font color="#CCCCCC"> subgroup of the curve</font>

1029
00:43:08,609 --> 00:43:14,098
is<font color="#E5E5E5"> not it there's much to be desired</font>

1030
00:43:11,490 --> 00:43:16,500
there<font color="#E5E5E5"> certainly we flushed out in</font>

1031
00:43:14,099 --> 00:43:21,329
<font color="#E5E5E5">particular many of the techniques that</font>

1032
00:43:16,500 --> 00:43:22,740
we see<font color="#E5E5E5"> always multiply the output by the</font>

1033
00:43:21,329 --> 00:43:24,420
cofactor of<font color="#E5E5E5"> the curve so that</font><font color="#CCCCCC"> you make</font>

1034
00:43:22,740 --> 00:43:25,890
sure<font color="#CCCCCC"> that you're always belong to the</font>

1035
00:43:24,420 --> 00:43:27,569
<font color="#E5E5E5">primer</font><font color="#CCCCCC"> order subgroup</font><font color="#E5E5E5"> that's something</font>

1036
00:43:25,890 --> 00:43:29,129
we've not actually<font color="#CCCCCC"> written down but it</font>

1037
00:43:27,569 --> 00:43:32,099
seems like a reasonable<font color="#E5E5E5"> technique and</font>

1038
00:43:29,130 --> 00:43:33,720
there are others that<font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> overly</font>

1039
00:43:32,099 --> 00:43:35,040
familiar<font color="#E5E5E5"> with that we could use as well</font>

1040
00:43:33,720 --> 00:43:36,419
<font color="#E5E5E5">so maybe you just stick with this</font>

1041
00:43:35,040 --> 00:43:36,779
particular<font color="#E5E5E5"> recommendation and go from</font>

1042
00:43:36,420 --> 00:43:38,520
<font color="#E5E5E5">there</font>

1043
00:43:36,780 --> 00:43:42,390
but of course<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> happy to hear</font>

1044
00:43:38,520 --> 00:43:46,740
alternatives<font color="#E5E5E5"> the other point raised</font><font color="#CCCCCC"> by</font>

1045
00:43:42,390 --> 00:43:49,230
Mike<font color="#E5E5E5"> amber goes that you don't get pure</font>

1046
00:43:46,740 --> 00:43:51,029
<font color="#CCCCCC">indistinguishability</font><font color="#E5E5E5"> from random from a</font>

1047
00:43:49,230 --> 00:43:53,609
random point<font color="#E5E5E5"> in the curve for each</font>

1048
00:43:51,030 --> 00:43:55,680
algorithm<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not always needed for</font>

1049
00:43:53,609 --> 00:43:58,259
every<font color="#CCCCCC"> single protocol</font><font color="#E5E5E5"> so we just need to</font>

1050
00:43:55,680 --> 00:44:00,160
spell<font color="#CCCCCC"> it very clearly you know</font><font color="#E5E5E5"> with this</font>

1051
00:43:58,260 --> 00:44:02,309
<font color="#E5E5E5">much technical precision as possible</font>

1052
00:44:00,160 --> 00:44:05,529
um what<font color="#CCCCCC"> the indistinguishability</font>

1053
00:44:02,309 --> 00:44:06,880
<font color="#E5E5E5">guarantees are and potentially</font><font color="#CCCCCC"> list</font><font color="#E5E5E5"> some</font>

1054
00:44:05,530 --> 00:44:11,079
algorithm are some<font color="#CCCCCC"> protocols in which</font>

1055
00:44:06,880 --> 00:44:12,819
this is and is<font color="#CCCCCC"> not needed so that's</font>

1056
00:44:11,079 --> 00:44:14,559
<font color="#E5E5E5">still sort of</font><font color="#CCCCCC"> an open task and it'd be</font>

1057
00:44:12,819 --> 00:44:18,009
interesting to hear<font color="#CCCCCC"> what people have to</font>

1058
00:44:14,559 --> 00:44:19,930
say<font color="#E5E5E5"> or think about that</font><font color="#CCCCCC"> and so that's it</font>

1059
00:44:18,010 --> 00:44:23,500
<font color="#E5E5E5">so I encourage you</font><font color="#CCCCCC"> if you're interested</font>

1060
00:44:19,930 --> 00:44:25,899
<font color="#CCCCCC">go take a gander</font><font color="#E5E5E5"> at the graft</font><font color="#CCCCCC"> it simply</font>

1061
00:44:23,500 --> 00:44:27,970
lists the different<font color="#E5E5E5"> algorithms has some</font>

1062
00:44:25,900 --> 00:44:31,599
implementations<font color="#E5E5E5"> and has some</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> dues that</font>

1063
00:44:27,970 --> 00:44:40,328
<font color="#CCCCCC">we need to fill in and yep</font>

1064
00:44:31,599 --> 00:44:43,619
that's it questions comments feedback<font color="#E5E5E5"> -</font>

1065
00:44:40,329 --> 00:44:45,819
people<font color="#E5E5E5"> think this is useful desirable</font>

1066
00:44:43,619 --> 00:44:49,510
please come<font color="#E5E5E5"> to the mic</font><font color="#CCCCCC"> and give you a</font>

1067
00:44:45,819 --> 00:44:57,788
reasons why<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> really helpful or</font>

1068
00:44:49,510 --> 00:45:00,069
not<font color="#E5E5E5"> someone's coming</font><font color="#CCCCCC"> Thanks we should so</font>

1069
00:44:57,789 --> 00:45:03,700
actually have a question Richard<font color="#E5E5E5"> Barnes</font>

1070
00:45:00,069 --> 00:45:05,319
<font color="#CCCCCC">question about variants</font><font color="#E5E5E5"> so whether this</font>

1071
00:45:03,700 --> 00:45:07,450
<font color="#E5E5E5">is related to different problems I've</font>

1072
00:45:05,319 --> 00:45:08,710
got in different<font color="#E5E5E5"> contexts so in the MLS</font>

1073
00:45:07,450 --> 00:45:11,589
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I'll be discussing the buff on</font>

1074
00:45:08,710 --> 00:45:16,180
Thursday<font color="#E5E5E5"> we have a need</font><font color="#CCCCCC"> to map from a</font>

1075
00:45:11,589 --> 00:45:18,279
random string to a<font color="#E5E5E5"> curve point but also</font>

1076
00:45:16,180 --> 00:45:20,470
know with<font color="#E5E5E5"> a known discrete log so you</font>

1077
00:45:18,279 --> 00:45:23,230
<font color="#E5E5E5">know me up to an easy keep hair instead</font>

1078
00:45:20,470 --> 00:45:24,308
<font color="#CCCCCC">of just a point now that draft has</font>

1079
00:45:23,230 --> 00:45:26,619
something in it that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> sort of made</font>

1080
00:45:24,309 --> 00:45:27,760
<font color="#CCCCCC">up and I think</font><font color="#E5E5E5"> looks kind of okay but do</font>

1081
00:45:26,619 --> 00:45:29,559
you<font color="#CCCCCC"> think there</font><font color="#E5E5E5"> are like learnings here</font>

1082
00:45:27,760 --> 00:45:31,270
that could apply to validating something

1083
00:45:29,559 --> 00:45:36,670
I'm mapping<font color="#E5E5E5"> of that type as well as in</font>

1084
00:45:31,270 --> 00:45:38,230
that<font color="#CCCCCC"> big - two points itself</font><font color="#E5E5E5"> so I would</font>

1085
00:45:36,670 --> 00:45:42,279
need to<font color="#E5E5E5"> look at it and it sounds like</font>

1086
00:45:38,230 --> 00:45:44,230
yeah sure<font color="#E5E5E5"> maybe that's</font><font color="#CCCCCC"> good as anyone</font>

1087
00:45:42,279 --> 00:45:45,549
<font color="#E5E5E5">out there</font><font color="#CCCCCC"> yeah so well we'll talk and</font>

1088
00:45:44,230 --> 00:45:48,730
<font color="#CCCCCC">then let's see if there's some way</font><font color="#E5E5E5"> we</font>

1089
00:45:45,549 --> 00:45:50,288
<font color="#E5E5E5">can kind of expand the interface here</font><font color="#CCCCCC"> to</font>

1090
00:45:48,730 --> 00:45:53,650
<font color="#CCCCCC">accommodate that particular</font><font color="#E5E5E5"> use case or</font>

1091
00:45:50,289 --> 00:45:55,089
or something yeah it could it could be a

1092
00:45:53,650 --> 00:45:57,190
little<font color="#E5E5E5"> bit dangerous though because in</font>

1093
00:45:55,089 --> 00:45:58,720
here you're<font color="#E5E5E5"> trying to kind of get some</font>

1094
00:45:57,190 --> 00:46:00,760
kind of random<font color="#E5E5E5"> Oracle functionality</font><font color="#CCCCCC"> on</font>

1095
00:45:58,720 --> 00:46:02,348
<font color="#CCCCCC">to the curb</font><font color="#E5E5E5"> right from strings to curve</font>

1096
00:46:00,760 --> 00:46:04,119
points and you're<font color="#E5E5E5"> doing something</font><font color="#CCCCCC"> that's</font>

1097
00:46:02,349 --> 00:46:08,260
manifestly not<font color="#E5E5E5"> a random Oracle</font>

1098
00:46:04,119 --> 00:46:09,220
<font color="#E5E5E5">so the</font>

1099
00:46:08,260 --> 00:46:10,810
that may<font color="#E5E5E5"> actually be an interesting</font>

1100
00:46:09,220 --> 00:46:13,509
<font color="#E5E5E5">question for MLS whether we actually</font>

1101
00:46:10,810 --> 00:46:16,540
<font color="#E5E5E5">need that</font><font color="#CCCCCC"> property out of</font><font color="#E5E5E5"> the derivation</font>

1102
00:46:13,510 --> 00:46:17,890
<font color="#CCCCCC">we go yeah</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't think we okay it is</font>

1103
00:46:16,540 --> 00:46:20,140
also interesting<font color="#E5E5E5"> in the vrf</font><font color="#CCCCCC"> draft the</font>

1104
00:46:17,890 --> 00:46:22,120
interface is not exactly equivalent<font color="#CCCCCC"> to</font>

1105
00:46:20,140 --> 00:46:23,589
this they take in a public key<font color="#CCCCCC"> and a</font>

1106
00:46:22,120 --> 00:46:25,029
<font color="#CCCCCC">string and they use</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> in hashing to a</font>

1107
00:46:23,590 --> 00:46:26,350
point in the curve so the question<font color="#E5E5E5"> of</font>

1108
00:46:25,030 --> 00:46:28,360
what<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> is the right interface here</font>

1109
00:46:26,350 --> 00:46:30,819
<font color="#E5E5E5">is still of course up for discussion</font><font color="#CCCCCC"> we</font>

1110
00:46:28,360 --> 00:46:33,970
<font color="#CCCCCC">just chose you know</font><font color="#E5E5E5"> one input the</font>

1111
00:46:30,820 --> 00:46:36,430
arbitrary<font color="#E5E5E5"> input because as Kenny said we</font>

1112
00:46:33,970 --> 00:46:37,509
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> want that to be the thing</font><font color="#CCCCCC"> that</font>

1113
00:46:36,430 --> 00:46:40,299
we hashed<font color="#CCCCCC"> onto the Garba nothing else</font>

1114
00:46:37,510 --> 00:46:43,330
<font color="#E5E5E5">but of course we can talk about</font><font color="#CCCCCC"> it if we</font>

1115
00:46:40,300 --> 00:46:45,850
need<font color="#CCCCCC"> to change it okay so here's</font>

1116
00:46:43,330 --> 00:46:48,190
grilling one so I would like<font color="#E5E5E5"> to know did</font>

1117
00:46:45,850 --> 00:46:50,799
you have some comparison with your

1118
00:46:48,190 --> 00:46:53,920
proposal with other<font color="#E5E5E5"> existing solutions</font>

1119
00:46:50,800 --> 00:46:55,570
<font color="#E5E5E5">we impose expects</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> security in the</font>

1120
00:46:53,920 --> 00:46:58,330
<font color="#E5E5E5">efficiency</font>

1121
00:46:55,570 --> 00:47:00,850
we don't have a proposal<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> simply</font>

1122
00:46:58,330 --> 00:47:02,650
a coalition of all of the<font color="#E5E5E5"> existing</font>

1123
00:47:00,850 --> 00:47:04,420
techniques and algorithms that<font color="#CCCCCC"> have been</font>

1124
00:47:02,650 --> 00:47:06,010
already published into a single<font color="#E5E5E5"> document</font>

1125
00:47:04,420 --> 00:47:07,810
in an attempt to kind<font color="#E5E5E5"> of nail down</font>

1126
00:47:06,010 --> 00:47:09,510
exactly how<font color="#CCCCCC"> you would</font><font color="#E5E5E5"> do this if you</font>

1127
00:47:07,810 --> 00:47:13,150
were to do this in an IETF protocol

1128
00:47:09,510 --> 00:47:14,650
because<font color="#E5E5E5"> it's used quite often and as you</font>

1129
00:47:13,150 --> 00:47:17,710
point to the CRF draft there's one

1130
00:47:14,650 --> 00:47:19,180
<font color="#CCCCCC">particular use case so that I'm</font><font color="#E5E5E5"> sure</font>

1131
00:47:17,710 --> 00:47:22,540
somewhere<font color="#CCCCCC"> in like for example in the</font>

1132
00:47:19,180 --> 00:47:23,980
alligator paper<font color="#E5E5E5"> and in the they</font>

1133
00:47:22,540 --> 00:47:25,810
simplified us<font color="#CCCCCC"> interview</font><font color="#E5E5E5"> paper</font><font color="#CCCCCC"> where they</font>

1134
00:47:23,980 --> 00:47:28,540
presented<font color="#E5E5E5"> that particular algorithm they</font>

1135
00:47:25,810 --> 00:47:30,460
do offer comparisons between you know

1136
00:47:28,540 --> 00:47:32,980
their work<font color="#E5E5E5"> and all those published</font>

1137
00:47:30,460 --> 00:47:37,320
previously<font color="#CCCCCC"> yeah so maybe there's we can</font>

1138
00:47:32,980 --> 00:47:40,210
yank<font color="#E5E5E5"> those in with proper citations and</font>

1139
00:47:37,320 --> 00:47:46,720
<font color="#E5E5E5">okay quickly yeah just a would like to</font>

1140
00:47:40,210 --> 00:47:49,630
know this<font color="#E5E5E5"> yeah yeah hi I'm Ella</font>

1141
00:47:46,720 --> 00:47:51,069
berners-lee<font color="#E5E5E5"> and I was just wondering</font>

1142
00:47:49,630 --> 00:47:54,160
<font color="#CCCCCC">where any of</font><font color="#E5E5E5"> the curves that you just</font>

1143
00:47:51,070 --> 00:47:56,380
mentioned<font color="#CCCCCC"> pairing</font><font color="#E5E5E5"> friendly not that I'm</font>

1144
00:47:54,160 --> 00:47:57,520
aware of<font color="#E5E5E5"> no okay</font><font color="#CCCCCC"> because I</font><font color="#E5E5E5"> know there is</font>

1145
00:47:56,380 --> 00:47:59,980
a publication out there about

1146
00:47:57,520 --> 00:48:01,509
implementing hashing<font color="#E5E5E5"> on 2bn curves so is</font>

1147
00:47:59,980 --> 00:48:05,230
there any<font color="#E5E5E5"> interest in adding that into</font>

1148
00:48:01,510 --> 00:48:07,270
<font color="#CCCCCC">the draft or so I'm not opposed to it</font>

1149
00:48:05,230 --> 00:48:11,890
<font color="#E5E5E5">Nick might go out there is shaking his</font>

1150
00:48:07,270 --> 00:48:13,750
head yes so I yes there is<font color="#E5E5E5"> interest</font><font color="#CCCCCC"> okay</font>

1151
00:48:11,890 --> 00:48:16,569
and and one more question when you talk

1152
00:48:13,750 --> 00:48:18,490
<font color="#CCCCCC">about not being</font><font color="#E5E5E5"> strictly</font>

1153
00:48:16,570 --> 00:48:20,500
indistinguishable from random what kind

1154
00:48:18,490 --> 00:48:22,040
of language<font color="#E5E5E5"> does that look like is</font><font color="#CCCCCC"> that</font>

1155
00:48:20,500 --> 00:48:25,040
sort of<font color="#CCCCCC"> just</font><font color="#E5E5E5"> losing a couple</font><font color="#CCCCCC"> of bits</font>

1156
00:48:22,040 --> 00:48:26,900
security or<font color="#CCCCCC"> Dewey and a</font><font color="#E5E5E5"> completely</font>

1157
00:48:25,040 --> 00:48:28,880
<font color="#E5E5E5">different way now so</font><font color="#CCCCCC"> to give you an</font>

1158
00:48:26,900 --> 00:48:31,370
example of<font color="#E5E5E5"> the extreme elliegator to</font>

1159
00:48:28,880 --> 00:48:32,630
only<font color="#E5E5E5"> ashes</font><font color="#CCCCCC"> on to half of</font><font color="#E5E5E5"> the points on</font>

1160
00:48:31,370 --> 00:48:33,799
the<font color="#E5E5E5"> curve so that's likely in</font>

1161
00:48:32,630 --> 00:48:39,890
<font color="#CCCCCC">distinguished are that's lightly</font>

1162
00:48:33,800 --> 00:48:42,950
distinguishable<font color="#CCCCCC"> we don't sorry we're not</font>

1163
00:48:39,890 --> 00:48:46,400
more precise than<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we would</font>

1164
00:48:42,950 --> 00:48:48,759
certainly like<font color="#CCCCCC"> to be though and it if</font>

1165
00:48:46,400 --> 00:48:53,720
<font color="#E5E5E5">you have suggestions</font><font color="#CCCCCC"> love to Europe</font>

1166
00:48:48,760 --> 00:48:56,170
thanks<font color="#CCCCCC"> Dan Harkins</font><font color="#E5E5E5"> yeah I think this is</font>

1167
00:48:53,720 --> 00:48:58,549
a really<font color="#E5E5E5"> good idea it's</font><font color="#CCCCCC"> very important</font>

1168
00:48:56,170 --> 00:49:01,310
<font color="#CCCCCC">as you mentioned it</font><font color="#E5E5E5"> is used in vrf it's</font>

1169
00:48:58,550 --> 00:49:03,890
used in<font color="#CCCCCC"> Pakes I got beaten</font><font color="#E5E5E5"> up pretty</font>

1170
00:49:01,310 --> 00:49:05,900
<font color="#E5E5E5">severely for using a</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> simple and</font>

1171
00:49:03,890 --> 00:49:08,720
<font color="#E5E5E5">lame</font><font color="#CCCCCC"> moy of hashing philippa curve and</font>

1172
00:49:05,900 --> 00:49:12,680
had this been around<font color="#CCCCCC"> I wouldn't have</font>

1173
00:49:08,720 --> 00:49:23,720
gotten beaten up so badly good I'd

1174
00:49:12,680 --> 00:49:25,040
probably get beaten up anyway<font color="#CCCCCC"> South</font>

1175
00:49:23,720 --> 00:49:29,209
fluorisis<font color="#CCCCCC"> four systems</font><font color="#E5E5E5"> I'd like to</font>

1176
00:49:25,040 --> 00:49:31,430
emphasize<font color="#E5E5E5"> if if you have a method which</font>

1177
00:49:29,210 --> 00:49:33,260
misses half the points<font color="#CCCCCC"> on the curve that</font>

1178
00:49:31,430 --> 00:49:36,109
<font color="#E5E5E5">is very critical that you</font><font color="#CCCCCC"> emphasize it</font>

1179
00:49:33,260 --> 00:49:39,680
<font color="#CCCCCC">it will completely</font><font color="#E5E5E5"> break most pigs yes</font>

1180
00:49:36,110 --> 00:49:41,300
<font color="#E5E5E5">absolutely</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we do not go into strong</font>

1181
00:49:39,680 --> 00:49:44,270
<font color="#CCCCCC">language that we simply actually I don't</font>

1182
00:49:41,300 --> 00:49:46,490
<font color="#E5E5E5">think</font><font color="#CCCCCC"> we write down</font><font color="#E5E5E5"> that it only maybe</font>

1183
00:49:44,270 --> 00:49:48,170
we do maybe we<font color="#E5E5E5"> don't I don't recall</font><font color="#CCCCCC"> but</font>

1184
00:49:46,490 --> 00:50:06,879
if we do<font color="#E5E5E5"> not is certainly an omission</font>

1185
00:49:48,170 --> 00:50:06,880
and<font color="#E5E5E5"> it should be added okay my attendant</font>

1186
00:50:06,940 --> 00:50:12,560
chairs would like to<font color="#E5E5E5"> ask if there</font><font color="#CCCCCC"> are</font>

1187
00:50:09,530 --> 00:50:16,880
<font color="#CCCCCC">any objections</font><font color="#E5E5E5"> to adopting this document</font>

1188
00:50:12,560 --> 00:50:20,120
as as a research group document with the

1189
00:50:16,880 --> 00:50:22,010
<font color="#E5E5E5">assumptions that you know more changes</font>

1190
00:50:20,120 --> 00:50:25,960
will be done and you know more curves

1191
00:50:22,010 --> 00:50:25,960
will be added as discussed<font color="#CCCCCC"> yes and stuff</font>

1192
00:50:29,680 --> 00:50:41,290
are they people<font color="#E5E5E5"> who</font><font color="#CCCCCC"> are willing to work</font>

1193
00:50:33,070 --> 00:50:42,280
<font color="#E5E5E5">on this document review document</font><font color="#CCCCCC"> alright</font>

1194
00:50:41,290 --> 00:51:03,430
that sounds<font color="#CCCCCC"> good</font>

1195
00:50:42,280 --> 00:51:06,490
thank you thanks Ron hi I'm Nick

1196
00:51:03,430 --> 00:51:08,580
Sullivan from<font color="#E5E5E5"> CloudFlare this is sort of</font>

1197
00:51:06,490 --> 00:51:12,189
the Nick and Chris show right now<font color="#E5E5E5"> but um</font>

1198
00:51:08,580 --> 00:51:14,950
right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> I'd like</font><font color="#CCCCCC"> to introduce this</font>

1199
00:51:12,190 --> 00:51:17,350
<font color="#E5E5E5">draft that we wrote</font><font color="#CCCCCC"> that introduces a</font>

1200
00:51:14,950 --> 00:51:20,589
new construction called verifiable

1201
00:51:17,350 --> 00:51:23,440
<font color="#CCCCCC">oblivious pseudo-random functions now it</font>

1202
00:51:20,590 --> 00:51:25,390
builds on<font color="#E5E5E5"> the intuition</font><font color="#CCCCCC"> from two very</font>

1203
00:51:23,440 --> 00:51:30,490
<font color="#E5E5E5">well-known constructions one is</font><font color="#CCCCCC"> V RF</font>

1204
00:51:25,390 --> 00:51:33,700
switch is a public key<font color="#E5E5E5"> out analog to</font>

1205
00:51:30,490 --> 00:51:36,250
hashing<font color="#E5E5E5"> so you can compute a v RF and</font>

1206
00:51:33,700 --> 00:51:38,250
then someone can verify<font color="#CCCCCC"> that</font><font color="#E5E5E5"> with your</font>

1207
00:51:36,250 --> 00:51:40,870
public key<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this was done correctly</font>

1208
00:51:38,250 --> 00:51:46,420
<font color="#CCCCCC">this</font><font color="#E5E5E5"> has several applications including</font>

1209
00:51:40,870 --> 00:51:48,250
heat transparency<font color="#E5E5E5"> and the N SEC v draft</font>

1210
00:51:46,420 --> 00:51:51,670
<font color="#E5E5E5">as well so that this is a this is</font><font color="#CCCCCC"> a very</font>

1211
00:51:48,250 --> 00:51:53,980
useful technique<font color="#E5E5E5"> in a lot of different</font>

1212
00:51:51,670 --> 00:51:58,200
areas<font color="#CCCCCC"> of cryptography another basic</font>

1213
00:51:53,980 --> 00:52:01,240
construction<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> of OPRS</font><font color="#E5E5E5"> which is</font>

1214
00:51:58,200 --> 00:52:04,120
similar to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea of blind signatures</font>

1215
00:52:01,240 --> 00:52:07,270
which was rooted in<font color="#E5E5E5"> the idea from ecash</font>

1216
00:52:04,120 --> 00:52:10,540
schemes<font color="#CCCCCC"> generally how this works</font><font color="#E5E5E5"> is</font>

1217
00:52:07,270 --> 00:52:12,880
someone will take<font color="#E5E5E5"> a message that they</font>

1218
00:52:10,540 --> 00:52:15,100
want<font color="#CCCCCC"> to have signed by a signer</font><font color="#E5E5E5"> and</font>

1219
00:52:12,880 --> 00:52:18,040
blind it in some way send the blind

1220
00:52:15,100 --> 00:52:20,830
message to the signer<font color="#E5E5E5"> who then signs it</font>

1221
00:52:18,040 --> 00:52:24,759
<font color="#E5E5E5">and it can be returned and then</font>

1222
00:52:20,830 --> 00:52:26,860
unblinded<font color="#E5E5E5"> and then any person with the</font>

1223
00:52:24,760 --> 00:52:29,050
public key<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the signer can invalidate</font>

1224
00:52:26,860 --> 00:52:31,960
<font color="#E5E5E5">that this signature and message were</font>

1225
00:52:29,050 --> 00:52:33,910
signed<font color="#E5E5E5"> but this has the additional</font>

1226
00:52:31,960 --> 00:52:36,760
<font color="#CCCCCC">property of obliviousness where the</font>

1227
00:52:33,910 --> 00:52:39,819
signer<font color="#E5E5E5"> does not know at the time of</font>

1228
00:52:36,760 --> 00:52:41,710
signature<font color="#E5E5E5"> anything about the message</font>

1229
00:52:39,820 --> 00:52:43,660
<font color="#E5E5E5">that was signed</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> that it had signed</font>

1230
00:52:41,710 --> 00:52:48,220
a specific blind<font color="#E5E5E5"> blind</font>

1231
00:52:43,660 --> 00:52:50,529
object now the intuition<font color="#E5E5E5"> for</font><font color="#CCCCCC"> vo PRS is</font>

1232
00:52:48,220 --> 00:52:53,009
to kind of combine<font color="#E5E5E5"> the best of</font><font color="#CCCCCC"> both of</font>

1233
00:52:50,530 --> 00:52:55,240
these<font color="#E5E5E5"> you lose some properties but</font>

1234
00:52:53,010 --> 00:52:57,880
essentially if you go through what a<font color="#CCCCCC"> vrf</font>

1235
00:52:55,240 --> 00:53:00,819
or what a<font color="#E5E5E5"> PRF is supposed to be is</font><font color="#CCCCCC"> that</font>

1236
00:52:57,880 --> 00:53:03,640
it's a function<font color="#CCCCCC"> that given</font><font color="#E5E5E5"> F X</font><font color="#CCCCCC"> it's</font>

1237
00:53:00,819 --> 00:53:07,859
infeasible to<font color="#E5E5E5"> compute this function</font>

1238
00:53:03,640 --> 00:53:10,420
without<font color="#E5E5E5"> knowing a secret key okay and</font>

1239
00:53:07,859 --> 00:53:12,670
this<font color="#CCCCCC"> F is</font><font color="#E5E5E5"> also supposed</font><font color="#CCCCCC"> to be</font>

1240
00:53:10,420 --> 00:53:16,720
<font color="#CCCCCC">indistinguishable from from random and</font>

1241
00:53:12,670 --> 00:53:18,760
this has the technique that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font>

1242
00:53:16,720 --> 00:53:20,200
incorporate from<font color="#E5E5E5"> VRS here is that this</font>

1243
00:53:18,760 --> 00:53:24,190
should also be verifiable

1244
00:53:20,200 --> 00:53:29,140
<font color="#CCCCCC">so the verify somebody who requests this</font>

1245
00:53:24,190 --> 00:53:32,289
<font color="#E5E5E5">vo PRF to be computed can verify that it</font>

1246
00:53:29,140 --> 00:53:34,240
was<font color="#E5E5E5"> actually used it was computed using</font>

1247
00:53:32,289 --> 00:53:37,660
a specific<font color="#E5E5E5"> private key that's associated</font>

1248
00:53:34,240 --> 00:53:40,839
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> unknown public key we would also</font>

1249
00:53:37,660 --> 00:53:44,859
like this to be oblivious in that<font color="#E5E5E5"> the</font>

1250
00:53:40,839 --> 00:53:47,380
<font color="#E5E5E5">signer does not know if review if the</font>

1251
00:53:44,859 --> 00:53:51,730
value Y that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> revealed to them cannot</font>

1252
00:53:47,380 --> 00:53:53,829
identify which X was actually used or

1253
00:53:51,730 --> 00:53:58,599
which computation was actually used to

1254
00:53:53,829 --> 00:54:00,339
to compute<font color="#E5E5E5"> Y so yes if X is revealed to</font>

1255
00:53:58,599 --> 00:54:02,710
the signer<font color="#CCCCCC"> they can't actually identify</font>

1256
00:54:00,339 --> 00:54:06,279
which signature or which of these

1257
00:54:02,710 --> 00:54:09,460
computations<font color="#CCCCCC"> is is the one that</font><font color="#E5E5E5"> was used</font>

1258
00:54:06,279 --> 00:54:13,359
<font color="#CCCCCC">to compute</font><font color="#E5E5E5"> it so this is very</font><font color="#CCCCCC"> similar to</font>

1259
00:54:09,460 --> 00:54:16,900
the<font color="#E5E5E5"> vrf and the O PRF but what you do</font>

1260
00:54:13,359 --> 00:54:20,680
<font color="#CCCCCC">lose to verifiable and oblivious</font>

1261
00:54:16,900 --> 00:54:25,119
properties are used together<font color="#E5E5E5"> but you</font>

1262
00:54:20,680 --> 00:54:27,460
lose the<font color="#CCCCCC"> ability to have</font><font color="#E5E5E5"> this publicly</font>

1263
00:54:25,119 --> 00:54:29,980
<font color="#E5E5E5">verifiable so if you do actually expose</font>

1264
00:54:27,460 --> 00:54:33,130
this as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> publicly as a as a public</font>

1265
00:54:29,980 --> 00:54:36,880
<font color="#E5E5E5">value then the signer can then recover</font>

1266
00:54:33,130 --> 00:54:39,130
<font color="#E5E5E5">the obliviousness so it the way that</font><font color="#CCCCCC"> it</font>

1267
00:54:36,880 --> 00:54:42,039
<font color="#E5E5E5">kind of will work fit into a protocol is</font>

1268
00:54:39,130 --> 00:54:45,130
is as such is the verifier will

1269
00:54:42,039 --> 00:54:48,520
construct a message<font color="#CCCCCC"> M will blind that</font>

1270
00:54:45,130 --> 00:54:52,000
message send it to the<font color="#E5E5E5"> prover which will</font>

1271
00:54:48,520 --> 00:54:54,670
then compute a signature<font color="#E5E5E5"> s a signature</font>

1272
00:54:52,000 --> 00:54:57,410
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is the o</font><font color="#E5E5E5"> PRF computation</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> VO PRF</font>

1273
00:54:54,670 --> 00:55:00,050
computation<font color="#CCCCCC"> the verifier</font>

1274
00:54:57,410 --> 00:55:02,240
can then take this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> verify that this</font>

1275
00:55:00,050 --> 00:55:05,300
<font color="#E5E5E5">is associated with the provers public</font>

1276
00:55:02,240 --> 00:55:08,299
key<font color="#CCCCCC"> and then they can remove the blind</font>

1277
00:55:05,300 --> 00:55:10,730
and if they want<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> can confirm the</font>

1278
00:55:08,300 --> 00:55:13,130
the<font color="#E5E5E5"> output here this signature is</font>

1279
00:55:10,730 --> 00:55:15,470
<font color="#E5E5E5">associated</font><font color="#CCCCCC"> with the</font><font color="#E5E5E5"> original message</font><font color="#CCCCCC"> M</font>

1280
00:55:13,130 --> 00:55:18,370
<font color="#E5E5E5">send that back to the approver they can</font>

1281
00:55:15,470 --> 00:55:21,230
verify the same thing<font color="#E5E5E5"> and this original</font>

1282
00:55:18,370 --> 00:55:22,609
<font color="#E5E5E5">vo</font><font color="#CCCCCC"> PRF computation versus the</font>

1283
00:55:21,230 --> 00:55:26,990
confirmation these are unlikable

1284
00:55:22,610 --> 00:55:30,880
there's no way to associate<font color="#CCCCCC"> m Prime with</font>

1285
00:55:26,990 --> 00:55:35,450
<font color="#E5E5E5">M without actually seeing the</font><font color="#CCCCCC"> Associated</font>

1286
00:55:30,880 --> 00:55:37,400
proof so this can actually<font color="#E5E5E5"> be</font>

1287
00:55:35,450 --> 00:55:41,450
instantiated with elliptic curves<font color="#CCCCCC"> this</font>

1288
00:55:37,400 --> 00:55:43,970
<font color="#E5E5E5">is very similar</font><font color="#CCCCCC"> to the work in the VR</font>

1289
00:55:41,450 --> 00:55:46,189
<font color="#CCCCCC">vrf draft that we that was discussed in</font>

1290
00:55:43,970 --> 00:55:49,060
<font color="#E5E5E5">the</font><font color="#CCCCCC"> previous presentation so you can</font>

1291
00:55:46,190 --> 00:55:53,030
<font color="#CCCCCC">construct it</font><font color="#E5E5E5"> with an elliptic curve a</font>

1292
00:55:49,060 --> 00:55:55,100
one-way<font color="#CCCCCC"> function</font><font color="#E5E5E5"> that as was described</font>

1293
00:55:53,030 --> 00:55:58,670
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the previous presentation a one-way</font>

1294
00:55:55,100 --> 00:56:03,380
hash to curve that takes a value<font color="#E5E5E5"> of</font>

1295
00:55:58,670 --> 00:56:06,320
string and puts it<font color="#E5E5E5"> onto the curve and if</font>

1296
00:56:03,380 --> 00:56:08,540
you also<font color="#E5E5E5"> have a way to do a</font>

1297
00:56:06,320 --> 00:56:10,700
<font color="#CCCCCC">non-interactive zero</font><font color="#E5E5E5"> knowledge discrete</font>

1298
00:56:08,540 --> 00:56:13,550
log<font color="#E5E5E5"> equality proof so that's a very long</font>

1299
00:56:10,700 --> 00:56:17,240
phrase but essentially what it means<font color="#E5E5E5"> is</font>

1300
00:56:13,550 --> 00:56:20,600
<font color="#CCCCCC">that given two pairs of points you know</font>

1301
00:56:17,240 --> 00:56:27,470
that<font color="#E5E5E5"> they were both exponentiated with</font>

1302
00:56:20,600 --> 00:56:31,730
the same<font color="#CCCCCC"> scalar so we have we</font><font color="#E5E5E5"> have a</font>

1303
00:56:27,470 --> 00:56:35,259
<font color="#E5E5E5">warning eduroam authentication failed</font>

1304
00:56:31,730 --> 00:56:37,430
<font color="#CCCCCC">great ok</font><font color="#E5E5E5"> let's let's</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> forward so I'm</font>

1305
00:56:35,260 --> 00:56:39,860
this instantiation was that actually

1306
00:56:37,430 --> 00:56:43,609
<font color="#CCCCCC">came from a paper from a few</font><font color="#E5E5E5"> years ago</font>

1307
00:56:39,860 --> 00:56:46,250
from<font color="#CCCCCC"> jirachi khaosan kochak and this</font>

1308
00:56:43,610 --> 00:56:49,640
<font color="#E5E5E5">describes the algorithm which lets you</font>

1309
00:56:46,250 --> 00:56:54,830
compute a discrete logarithm<font color="#E5E5E5"> equivalence</font>

1310
00:56:49,640 --> 00:56:56,810
so if you have Y modulo<font color="#CCCCCC"> point G and</font><font color="#E5E5E5"> Z</font>

1311
00:56:54,830 --> 00:56:58,700
modulo point M you<font color="#CCCCCC"> can show that there</font>

1312
00:56:56,810 --> 00:57:03,230
actually<font color="#E5E5E5"> have been exponentiated with</font>

1313
00:56:58,700 --> 00:57:05,750
the same<font color="#CCCCCC"> scalars K and this</font><font color="#E5E5E5"> is these</font><font color="#CCCCCC"> are</font>

1314
00:57:03,230 --> 00:57:07,790
<font color="#E5E5E5">the details the algorithm and in the</font>

1315
00:57:05,750 --> 00:57:10,880
protocol some intuition<font color="#E5E5E5"> you can get</font>

1316
00:57:07,790 --> 00:57:13,820
around this is you take your

1317
00:57:10,880 --> 00:57:19,040
string which<font color="#CCCCCC"> is your sort of secret</font>

1318
00:57:13,820 --> 00:57:21,230
value<font color="#CCCCCC"> you hash this into a curve and you</font>

1319
00:57:19,040 --> 00:57:23,200
apply a blinding factor which is just an

1320
00:57:21,230 --> 00:57:26,060
exponent which is<font color="#E5E5E5"> just a multiplicative</font>

1321
00:57:23,200 --> 00:57:28,129
value here so your<font color="#E5E5E5"> message that you're</font>

1322
00:57:26,060 --> 00:57:32,950
<font color="#CCCCCC">sending to</font><font color="#E5E5E5"> the server or</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the approver</font>

1323
00:57:28,130 --> 00:57:35,150
in this case is the hash of<font color="#E5E5E5"> the input X</font>

1324
00:57:32,950 --> 00:57:38,359
<font color="#CCCCCC">onto the curve so you have a curve point</font>

1325
00:57:35,150 --> 00:57:42,500
<font color="#CCCCCC">and you multiply it by</font><font color="#E5E5E5"> a blinding value</font>

1326
00:57:38,360 --> 00:57:45,680
arm on the<font color="#E5E5E5"> prover side you take that</font>

1327
00:57:42,500 --> 00:57:49,730
<font color="#CCCCCC">value and you multiply it</font><font color="#E5E5E5"> by the secret</font>

1328
00:57:45,680 --> 00:57:53,029
key<font color="#CCCCCC"> in in the case of hash curve</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

1329
00:57:49,730 --> 00:57:55,340
just another secret<font color="#E5E5E5"> scalar and then you</font>

1330
00:57:53,030 --> 00:57:59,870
<font color="#E5E5E5">generate discrete log equivalence proof</font>

1331
00:57:55,340 --> 00:58:05,590
between this multiplication of the point

1332
00:57:59,870 --> 00:58:08,990
and the a public pair<font color="#E5E5E5"> that represents a</font>

1333
00:58:05,590 --> 00:58:11,810
a base<font color="#E5E5E5"> point and the base point</font>

1334
00:58:08,990 --> 00:58:13,700
<font color="#CCCCCC">multiplied by again K which is the the</font>

1335
00:58:11,810 --> 00:58:17,810
secret value<font color="#E5E5E5"> in the prover you can send</font>

1336
00:58:13,700 --> 00:58:22,279
this back<font color="#E5E5E5"> and the the verifier can</font>

1337
00:58:17,810 --> 00:58:25,520
verify this<font color="#CCCCCC"> discrete</font><font color="#E5E5E5"> logarithm sort of</font>

1338
00:58:22,280 --> 00:58:28,160
divide out its multiplicative<font color="#E5E5E5"> factor R</font>

1339
00:58:25,520 --> 00:58:32,240
by multiplying by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> inverse and</font><font color="#E5E5E5"> you</font>

1340
00:58:28,160 --> 00:58:36,350
end up<font color="#CCCCCC"> with the original point</font><font color="#E5E5E5"> hash to a</font>

1341
00:58:32,240 --> 00:58:41,479
curve multiplied by the<font color="#CCCCCC"> provers private</font>

1342
00:58:36,350 --> 00:58:44,330
key now the<font color="#E5E5E5"> the second phase of this</font><font color="#CCCCCC"> ins</font>

1343
00:58:41,480 --> 00:58:46,610
in some protocols<font color="#E5E5E5"> is that you can take</font>

1344
00:58:44,330 --> 00:58:51,680
<font color="#E5E5E5">this pair and send it to the prover who</font>

1345
00:58:46,610 --> 00:58:53,600
can then compute<font color="#E5E5E5"> a hash of the value X</font>

1346
00:58:51,680 --> 00:58:56,960
and multiply by its private key and<font color="#E5E5E5"> that</font>

1347
00:58:53,600 --> 00:58:59,770
<font color="#E5E5E5">should be</font><font color="#CCCCCC"> equal to the original value Y</font>

1348
00:58:56,960 --> 00:59:02,180
and if it is<font color="#CCCCCC"> equal</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> it knows that</font>

1349
00:58:59,770 --> 00:59:04,960
<font color="#E5E5E5">its private key was used</font><font color="#CCCCCC"> in the</font>

1350
00:59:02,180 --> 00:59:10,190
<font color="#CCCCCC">computation</font><font color="#E5E5E5"> of Y but it does not know</font>

1351
00:59:04,960 --> 00:59:11,480
exactly which which value you originally

1352
00:59:10,190 --> 00:59:14,060
compute it because it doesn't<font color="#CCCCCC"> know the</font>

1353
00:59:11,480 --> 00:59:18,770
discrete logarithm modulo<font color="#CCCCCC"> the blinding</font>

1354
00:59:14,060 --> 00:59:21,320
factor so the blinding factor is is what

1355
00:59:18,770 --> 00:59:23,970
<font color="#CCCCCC">keeps this from</font><font color="#E5E5E5"> being known</font><font color="#CCCCCC"> to the</font>

1356
00:59:21,320 --> 00:59:27,240
server<font color="#E5E5E5"> so this adds the obliviousness</font>

1357
00:59:23,970 --> 00:59:29,180
so if these<font color="#E5E5E5"> match then you can confirm</font>

1358
00:59:27,240 --> 00:59:32,220
yes this was actually<font color="#E5E5E5"> used</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a previous</font>

1359
00:59:29,180 --> 00:59:35,160
interaction alternatively<font color="#E5E5E5"> you don't have</font>

1360
00:59:32,220 --> 00:59:37,049
to send the value<font color="#E5E5E5"> why you can send a</font>

1361
00:59:35,160 --> 00:59:40,259
<font color="#CCCCCC">value that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> only be computed</font><font color="#E5E5E5"> with the</font>

1362
00:59:37,050 --> 00:59:42,630
knowledge<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Y and the prover can</font>

1363
00:59:40,260 --> 00:59:44,910
compute that<font color="#E5E5E5"> same y as well I'm</font>

1364
00:59:42,630 --> 00:59:49,070
multiplying<font color="#CCCCCC"> that x hash to the curve</font>

1365
00:59:44,910 --> 00:59:53,250
<font color="#E5E5E5">okay and and then you can validate that</font>

1366
00:59:49,070 --> 00:59:56,070
both parties share this<font color="#CCCCCC"> Y over a</font>

1367
00:59:53,250 --> 00:59:59,300
specific<font color="#CCCCCC"> mount a bound to a specific</font>

1368
00:59:56,070 --> 01:00:04,140
message<font color="#CCCCCC"> so that's that's generally how</font>

1369
00:59:59,300 --> 01:00:06,180
<font color="#E5E5E5">these this construction works and as as</font>

1370
01:00:04,140 --> 01:00:08,700
was mentioned before<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is we have an</font>

1371
01:00:06,180 --> 01:00:11,339
application to<font color="#CCCCCC"> this called privacy pass</font>

1372
01:00:08,700 --> 01:00:15,629
which is<font color="#CCCCCC"> in an upcoming</font>

1373
01:00:11,340 --> 01:00:18,869
<font color="#CCCCCC">Pets paper with myself and</font><font color="#E5E5E5"> Alex Davidson</font>

1374
01:00:15,630 --> 01:00:21,030
and few other folks<font color="#E5E5E5"> the way that this</font>

1375
01:00:18,869 --> 01:00:23,790
works<font color="#E5E5E5"> this is for reducing</font><font color="#CCCCCC"> the amount of</font>

1376
01:00:21,030 --> 01:00:26,970
CAPTCHAs seen on the Internet in a

1377
01:00:23,790 --> 01:00:28,970
<font color="#CCCCCC">privacy-preserving way so the way it</font>

1378
01:00:26,970 --> 01:00:35,730
would<font color="#CCCCCC"> work is that you would compute</font><font color="#E5E5E5"> a</font>

1379
01:00:28,970 --> 01:00:37,919
token and or a set<font color="#CCCCCC"> of tokens</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> win</font>

1380
01:00:35,730 --> 01:00:41,310
solving a CAPTCHA<font color="#E5E5E5"> the CAPTCHA server</font>

1381
01:00:37,920 --> 01:00:44,580
will compute<font color="#CCCCCC"> the vo PRF over your</font>

1382
01:00:41,310 --> 01:00:46,799
blinded tokens<font color="#E5E5E5"> and send them back to you</font>

1383
01:00:44,580 --> 01:00:48,779
and<font color="#E5E5E5"> then the next time you see a CAPTCHA</font>

1384
01:00:46,800 --> 01:00:50,790
on<font color="#CCCCCC"> a completely</font><font color="#E5E5E5"> different site on a</font>

1385
01:00:48,780 --> 01:00:55,890
<font color="#E5E5E5">completely</font><font color="#CCCCCC"> different origin you</font><font color="#E5E5E5"> can</font>

1386
01:00:50,790 --> 01:00:58,500
<font color="#E5E5E5">submit the unblinded the unblinded token</font>

1387
01:00:55,890 --> 01:01:01,730
and then<font color="#CCCCCC"> the server has</font><font color="#E5E5E5"> no way to</font>

1388
01:00:58,500 --> 01:01:03,869
<font color="#CCCCCC">actually associate</font><font color="#E5E5E5"> whether or not</font>

1389
01:01:01,730 --> 01:01:05,490
<font color="#CCCCCC">which-which site was the one that</font>

1390
01:01:03,869 --> 01:01:09,869
actually issued these tokens<font color="#E5E5E5"> so it</font>

1391
01:01:05,490 --> 01:01:11,549
allows you to send data to to prove that

1392
01:01:09,869 --> 01:01:13,980
you have solved a CAPTCHA<font color="#E5E5E5"> on a another</font>

1393
01:01:11,550 --> 01:01:16,320
site<font color="#CCCCCC"> without revealing which origin</font><font color="#E5E5E5"> that</font>

1394
01:01:13,980 --> 01:01:19,740
site was<font color="#CCCCCC"> originally presented it so this</font>

1395
01:01:16,320 --> 01:01:22,230
allows a sort of<font color="#E5E5E5"> bypass of the same</font>

1396
01:01:19,740 --> 01:01:25,229
origin<font color="#CCCCCC"> policy due to the blinding</font>

1397
01:01:22,230 --> 01:01:27,960
<font color="#E5E5E5">ability of the vo PRF and this is</font>

1398
01:01:25,230 --> 01:01:30,890
<font color="#E5E5E5">implemented in a browser extension for</font>

1399
01:01:27,960 --> 01:01:34,980
Chrome<font color="#CCCCCC"> and Firefox</font><font color="#E5E5E5"> as well as on</font>

1400
01:01:30,890 --> 01:01:36,359
<font color="#E5E5E5">CloudFlare servers</font><font color="#CCCCCC"> another potential</font>

1401
01:01:34,980 --> 01:01:37,950
application of this that we've<font color="#E5E5E5"> looked</font>

1402
01:01:36,359 --> 01:01:39,900
into<font color="#E5E5E5"> is</font>

1403
01:01:37,950 --> 01:01:45,390
privacy-preserving password leak checks

1404
01:01:39,900 --> 01:01:47,609
<font color="#E5E5E5">so if a service has</font><font color="#CCCCCC"> a lot of passwords</font>

1405
01:01:45,390 --> 01:01:50,629
that<font color="#E5E5E5"> have been leaked</font><font color="#CCCCCC"> what they can do</font>

1406
01:01:47,609 --> 01:01:54,950
is they can hash these to a curve and

1407
01:01:50,630 --> 01:01:57,029
exponentiate by<font color="#CCCCCC"> a private value</font><font color="#E5E5E5"> and and</font>

1408
01:01:54,950 --> 01:01:59,189
if you want to check whether your

1409
01:01:57,029 --> 01:02:02,670
<font color="#E5E5E5">password is part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that list you can</font>

1410
01:01:59,190 --> 01:02:04,589
submit it<font color="#CCCCCC"> to the server to compute a vo</font>

1411
01:02:02,670 --> 01:02:06,539
PRF and have it<font color="#E5E5E5"> come back</font><font color="#CCCCCC"> and then</font>

1412
01:02:04,589 --> 01:02:10,799
compare<font color="#CCCCCC"> it with the the entire</font><font color="#E5E5E5"> database</font>

1413
01:02:06,539 --> 01:02:12,900
<font color="#CCCCCC">and what this</font><font color="#E5E5E5"> lets you</font><font color="#CCCCCC"> do as a server</font>

1414
01:02:10,799 --> 01:02:15,170
that that has access<font color="#CCCCCC"> to all all of these</font>

1415
01:02:12,900 --> 01:02:18,180
<font color="#E5E5E5">um the private keys for all</font><font color="#CCCCCC"> the these</font>

1416
01:02:15,170 --> 01:02:22,589
passwords is to do rate limiting so it

1417
01:02:18,180 --> 01:02:24,390
allows you<font color="#E5E5E5"> to check to see which</font>

1418
01:02:22,589 --> 01:02:25,859
password you're looking<font color="#E5E5E5"> for and the</font>

1419
01:02:24,390 --> 01:02:27,509
server<font color="#E5E5E5"> doesn't get to know which</font>

1420
01:02:25,859 --> 01:02:28,920
password you're actually looking<font color="#CCCCCC"> for so</font>

1421
01:02:27,509 --> 01:02:32,430
if you<font color="#E5E5E5"> have a unique password it can't</font>

1422
01:02:28,920 --> 01:02:34,769
identify you as well as it stops people

1423
01:02:32,430 --> 01:02:38,098
<font color="#CCCCCC">from being able to do a kind</font><font color="#E5E5E5"> of a</font>

1424
01:02:34,769 --> 01:02:40,979
<font color="#E5E5E5">brute-force crack of all the all these</font>

1425
01:02:38,099 --> 01:02:44,369
<font color="#CCCCCC">websites</font><font color="#E5E5E5"> because it's it requires this</font>

1426
01:02:40,979 --> 01:02:47,729
vo PRF computation and these are some of

1427
01:02:44,369 --> 01:02:52,200
<font color="#E5E5E5">the the foundations for this is several</font>

1428
01:02:47,729 --> 01:02:54,868
different<font color="#CCCCCC"> papers and as well as this</font>

1429
01:02:52,200 --> 01:02:56,939
relies on<font color="#E5E5E5"> the previous presentation</font>

1430
01:02:54,869 --> 01:02:59,219
which which<font color="#CCCCCC"> is about hashing to elliptic</font>

1431
01:02:56,940 --> 01:03:00,660
curves this<font color="#E5E5E5"> is one</font><font color="#CCCCCC"> of the major</font><font color="#E5E5E5"> mode of</font>

1432
01:02:59,219 --> 01:03:04,369
motivating factors for<font color="#E5E5E5"> writing that</font>

1433
01:03:00,660 --> 01:03:07,368
<font color="#E5E5E5">document and that's it</font>

1434
01:03:04,369 --> 01:03:07,369
questions

1435
01:03:20,880 --> 01:03:27,450
stunned silence more like it is this

1436
01:03:24,420 --> 01:03:29,810
your knowledge<font color="#CCCCCC"> christening yak Zakia</font>

1437
01:03:27,450 --> 01:03:34,770
people have returned you<font color="#E5E5E5"> forever</font><font color="#CCCCCC"> Oh</font>

1438
01:03:29,810 --> 01:03:37,770
<font color="#CCCCCC">something comes on thank</font><font color="#E5E5E5"> you this</font><font color="#CCCCCC"> isn't</font>

1439
01:03:34,770 --> 01:03:39,780
<font color="#CCCCCC">when dureena</font><font color="#E5E5E5"> from MSR I'm kind of</font>

1440
01:03:37,770 --> 01:03:41,370
struggling<font color="#E5E5E5"> to understand what is the</font>

1441
01:03:39,780 --> 01:03:43,560
actual contents of<font color="#E5E5E5"> your drafts that</font>

1442
01:03:41,370 --> 01:03:45,930
you're proposing<font color="#CCCCCC"> I didn't read it so I'm</font>

1443
01:03:43,560 --> 01:03:49,320
<font color="#E5E5E5">trying to understand because you you dr.</font>

1444
01:03:45,930 --> 01:03:52,440
words several<font color="#E5E5E5"> kind of cryptographic</font>

1445
01:03:49,320 --> 01:03:55,590
primitives<font color="#E5E5E5"> as many of which are kind of</font>

1446
01:03:52,440 --> 01:03:57,150
fancy but from my understanding<font color="#E5E5E5"> of these</font>

1447
01:03:55,590 --> 01:03:59,160
primitives they have kind<font color="#CCCCCC"> of different</font>

1448
01:03:57,150 --> 01:04:01,020
security<font color="#CCCCCC"> models</font>

1449
01:03:59,160 --> 01:04:02,520
so I want<font color="#CCCCCC"> to understand what</font><font color="#E5E5E5"> what</font>

1450
01:04:01,020 --> 01:04:06,750
exactly<font color="#CCCCCC"> you are trying to</font><font color="#E5E5E5"> propose as a</font>

1451
01:04:02,520 --> 01:04:11,040
sundog right so what this draft contains

1452
01:04:06,750 --> 01:04:12,260
is a general definition<font color="#E5E5E5"> of</font><font color="#CCCCCC"> EOP ahrefs</font>

1453
01:04:11,040 --> 01:04:15,960
how they work in a specific

1454
01:04:12,260 --> 01:04:17,880
instantiation<font color="#E5E5E5"> that you can do given an</font>

1455
01:04:15,960 --> 01:04:24,030
elliptic curve as well as a hash to

1456
01:04:17,880 --> 01:04:25,980
curve so<font color="#CCCCCC"> if you have a specific curve</font>

1457
01:04:24,030 --> 01:04:28,740
<font color="#E5E5E5">that you like and you</font><font color="#CCCCCC"> have an algorithm</font>

1458
01:04:25,980 --> 01:04:31,800
<font color="#CCCCCC">to hash to it that is one way</font><font color="#E5E5E5"> this tells</font>

1459
01:04:28,740 --> 01:04:38,279
you<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to construct</font><font color="#CCCCCC"> a protocol</font><font color="#E5E5E5"> of this</font>

1460
01:04:31,800 --> 01:04:40,440
sort<font color="#CCCCCC"> and</font><font color="#E5E5E5"> to which extent is your</font><font color="#CCCCCC"> craft</font>

1461
01:04:38,280 --> 01:04:45,090
specific to whence particular

1462
01:04:40,440 --> 01:04:47,820
conscription of<font color="#CCCCCC"> vopa in particular this</font>

1463
01:04:45,090 --> 01:04:51,590
draft is<font color="#E5E5E5"> about this elliptic curve</font>

1464
01:04:47,820 --> 01:04:54,990
instantiation we we don't go into

1465
01:04:51,590 --> 01:04:56,460
opening it up to<font color="#E5E5E5"> more generalized</font><font color="#CCCCCC"> vo</font><font color="#E5E5E5"> PRF</font>

1466
01:04:54,990 --> 01:04:58,439
<font color="#CCCCCC">second it can</font><font color="#E5E5E5"> be instantiated in</font>

1467
01:04:56,460 --> 01:05:02,100
different ways but this draft<font color="#E5E5E5"> is about</font>

1468
01:04:58,440 --> 01:05:06,480
<font color="#E5E5E5">EC vo PRF okay and this thing about</font>

1469
01:05:02,100 --> 01:05:08,160
those are kind of<font color="#E5E5E5"> vrf no there's nothing</font>

1470
01:05:06,480 --> 01:05:10,350
<font color="#CCCCCC">about that it's just that the specific</font>

1471
01:05:08,160 --> 01:05:12,980
definition<font color="#CCCCCC"> of</font><font color="#E5E5E5"> of this instant</font>

1472
01:05:10,350 --> 01:05:12,980
<font color="#E5E5E5">instantiation</font>

1473
01:05:18,640 --> 01:05:31,190
<font color="#E5E5E5">it thank you very much okay do</font><font color="#CCCCCC"> you want</font>

1474
01:05:28,940 --> 01:05:32,300
to<font color="#E5E5E5"> ask anything about this</font><font color="#CCCCCC"> what are we</font>

1475
01:05:31,190 --> 01:05:34,670
gonna do what<font color="#E5E5E5"> are you gonna do this</font>

1476
01:05:32,300 --> 01:05:35,900
thing what do you want us you're<font color="#E5E5E5"> doing</font>

1477
01:05:34,670 --> 01:05:39,829
for<font color="#E5E5E5"> research group adoption of this</font>

1478
01:05:35,900 --> 01:05:42,440
<font color="#CCCCCC">dress yes</font><font color="#E5E5E5"> presumably yes I mean based on</font>

1479
01:05:39,829 --> 01:05:45,530
whether<font color="#E5E5E5"> or not the hash to curve is is</font>

1480
01:05:42,440 --> 01:05:48,380
adopted I think this is a I find

1481
01:05:45,530 --> 01:05:52,069
follow-on to<font color="#E5E5E5"> that work and dependent on</font>

1482
01:05:48,380 --> 01:05:54,470
it okay<font color="#E5E5E5"> do you see them progressing in</font>

1483
01:05:52,069 --> 01:05:57,050
parallel or in in sequence<font color="#E5E5E5"> I think they</font>

1484
01:05:54,470 --> 01:05:59,359
can progress in parallel and I also

1485
01:05:57,050 --> 01:06:03,530
<font color="#E5E5E5">think that things like privacy pass as a</font>

1486
01:05:59,359 --> 01:06:05,540
protocol um<font color="#E5E5E5"> could be proposed for say</font>

1487
01:06:03,530 --> 01:06:08,390
<font color="#E5E5E5">the HTTP working group or something like</font>

1488
01:06:05,540 --> 01:06:15,529
this that would rely on this draft<font color="#E5E5E5"> being</font>

1489
01:06:08,390 --> 01:06:17,180
adopted<font color="#E5E5E5"> mm-hmm so other people in the</font>

1490
01:06:15,530 --> 01:06:19,599
room who would in addition to the

1491
01:06:17,180 --> 01:06:23,390
authors of the draft who would be

1492
01:06:19,599 --> 01:06:27,109
interested<font color="#E5E5E5"> in working on</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> OH</font>

1493
01:06:23,390 --> 01:06:32,660
<font color="#E5E5E5">what hi Daniel con Gilmore ACLU sorry I</font>

1494
01:06:27,109 --> 01:06:35,119
was<font color="#CCCCCC"> really loud I am really grateful to</font>

1495
01:06:32,660 --> 01:06:37,069
<font color="#E5E5E5">see this work happening</font><font color="#CCCCCC"> one of the</font>

1496
01:06:35,119 --> 01:06:40,490
<font color="#E5E5E5">concerns is about how you ensure</font><font color="#CCCCCC"> that</font>

1497
01:06:37,069 --> 01:06:43,099
<font color="#E5E5E5">the the key for privacy</font><font color="#CCCCCC"> pass</font>

1498
01:06:40,490 --> 01:06:46,129
<font color="#CCCCCC">particularly the Vikki remains constant</font>

1499
01:06:43,099 --> 01:06:48,260
<font color="#E5E5E5">right or else the person doing this on</font>

1500
01:06:46,130 --> 01:06:49,510
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> keep a single</font><font color="#E5E5E5"> key</font><font color="#CCCCCC"> I believe</font>

1501
01:06:48,260 --> 01:06:52,130
you've solved that for the tour

1502
01:06:49,510 --> 01:06:55,430
arrangement<font color="#E5E5E5"> do you have suggestions for</font>

1503
01:06:52,130 --> 01:06:58,000
<font color="#CCCCCC">what we had to solve it for III I think</font>

1504
01:06:55,430 --> 01:07:01,069
<font color="#CCCCCC">in general</font><font color="#E5E5E5"> making sure that the server</font>

1505
01:06:58,000 --> 01:07:02,660
does not<font color="#E5E5E5"> yes oh so</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> you're</font>

1506
01:07:01,069 --> 01:07:05,420
mentioning is the tagging attack where

1507
01:07:02,660 --> 01:07:09,020
the<font color="#E5E5E5"> server could potentially provide a</font>

1508
01:07:05,420 --> 01:07:12,410
proof to a different public key<font color="#CCCCCC"> that is</font>

1509
01:07:09,020 --> 01:07:16,250
unique to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> which sort of</font><font color="#E5E5E5"> defeats the</font>

1510
01:07:12,410 --> 01:07:19,879
privacy properties of this and the

1511
01:07:16,250 --> 01:07:21,890
<font color="#CCCCCC">general suggestions for this are to make</font>

1512
01:07:19,880 --> 01:07:25,700
sure<font color="#CCCCCC"> that the server's public key or the</font>

1513
01:07:21,890 --> 01:07:28,940
signers public key is<font color="#E5E5E5"> has some sort of</font>

1514
01:07:25,700 --> 01:07:31,620
public verifiability<font color="#E5E5E5"> whether it's put in</font>

1515
01:07:28,940 --> 01:07:33,390
some sort<font color="#CCCCCC"> of consensus protocol or part</font>

1516
01:07:31,620 --> 01:07:35,700
certificate transparency or some sort of

1517
01:07:33,390 --> 01:07:39,720
transparency log and the hope is<font color="#CCCCCC"> that</font>

1518
01:07:35,700 --> 01:07:41,189
every signer inter every every verifier

1519
01:07:39,720 --> 01:07:43,589
interacting<font color="#E5E5E5"> with this system</font><font color="#CCCCCC"> would also</font>

1520
01:07:41,190 --> 01:07:45,210
have<font color="#CCCCCC"> access to this</font><font color="#E5E5E5"> but I think that's</font>

1521
01:07:43,590 --> 01:07:47,100
outside of<font color="#E5E5E5"> the scope</font><font color="#CCCCCC"> of this particular</font>

1522
01:07:45,210 --> 01:07:49,110
<font color="#E5E5E5">document okay that's that's what I was</font>

1523
01:07:47,100 --> 01:07:50,430
looking<font color="#CCCCCC"> for was whether</font><font color="#E5E5E5"> you see that as</font>

1524
01:07:49,110 --> 01:07:52,610
being<font color="#CCCCCC"> independent of</font><font color="#E5E5E5"> this</font>

1525
01:07:50,430 --> 01:07:55,319
I think it's independent in the way that

1526
01:07:52,610 --> 01:07:56,460
certificates are independent of TLS<font color="#E5E5E5"> okay</font>

1527
01:07:55,320 --> 01:07:57,990
that's fine I<font color="#CCCCCC"> just want to make sure</font>

1528
01:07:56,460 --> 01:07:59,160
<font color="#CCCCCC">that if we do end up</font><font color="#E5E5E5"> working on a</font>

1529
01:07:57,990 --> 01:08:01,560
<font color="#E5E5E5">document like this there needs to be a</font>

1530
01:07:59,160 --> 01:08:03,690
big caveat<font color="#E5E5E5"> even</font><font color="#CCCCCC"> if it says to use this</font>

1531
01:08:01,560 --> 01:08:07,890
scheme safely in public you need

1532
01:08:03,690 --> 01:08:10,770
something<font color="#E5E5E5"> like so that that's not yep</font>

1533
01:08:07,890 --> 01:08:15,690
noted<font color="#E5E5E5"> and we should definitely add</font><font color="#CCCCCC"> that</font>

1534
01:08:10,770 --> 01:08:17,430
text<font color="#E5E5E5"> to the draft okay we'll take it to</font>

1535
01:08:15,690 --> 01:08:21,859
<font color="#E5E5E5">the mailing list</font><font color="#CCCCCC"> and we'll we'll have</font>

1536
01:08:17,430 --> 01:08:21,860
full<font color="#E5E5E5"> of</font><font color="#CCCCCC"> discussion with you</font><font color="#E5E5E5"> thank you</font>

1537
01:08:42,420 --> 01:08:46,930
<font color="#E5E5E5">okay</font>

1538
01:08:44,260 --> 01:08:50,440
so hello everyone my name is grilling

1539
01:08:46,930 --> 01:08:55,240
<font color="#E5E5E5">one from hobby so my talk</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> Pig</font>

1540
01:08:50,439 --> 01:08:57,608
<font color="#E5E5E5">so PA ke password authenticated the key</font>

1541
01:08:55,240 --> 01:09:00,339
exchange so in the first part<font color="#E5E5E5"> I was</font>

1542
01:08:57,609 --> 01:09:03,550
introduced<font color="#E5E5E5"> paraquad about fake</font><font color="#CCCCCC"> then we</font>

1543
01:09:00,339 --> 01:09:05,710
will introduce our proposals<font color="#CCCCCC"> I mean our</font>

1544
01:09:03,550 --> 01:09:07,660
protocols yeah then we<font color="#CCCCCC"> will consider</font>

1545
01:09:05,710 --> 01:09:11,439
<font color="#E5E5E5">whether</font><font color="#CCCCCC"> it's a good candidate the</font>

1546
01:09:07,660 --> 01:09:14,080
proposal for<font color="#E5E5E5"> the IFC eight one two five</font>

1547
01:09:11,439 --> 01:09:18,759
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it gives</font><font color="#E5E5E5"> some requirements about</font>

1548
01:09:14,080 --> 01:09:21,220
the pig<font color="#E5E5E5"> so here is the terminology or</font>

1549
01:09:18,760 --> 01:09:23,980
some main concepts<font color="#CCCCCC"> about to take</font>

1550
01:09:21,220 --> 01:09:27,880
increase you are not<font color="#CCCCCC"> so familiar with</font>

1551
01:09:23,979 --> 01:09:32,830
<font color="#E5E5E5">this one</font><font color="#CCCCCC"> Pig basically means it allows</font>

1552
01:09:27,880 --> 01:09:35,470
<font color="#E5E5E5">two parties to establish a secure key in</font>

1553
01:09:32,830 --> 01:09:38,170
<font color="#CCCCCC">the cuiprit or sense</font><font color="#E5E5E5"> by using a common</font>

1554
01:09:35,470 --> 01:09:40,839
shared a<font color="#CCCCCC"> secret between two parties</font>

1555
01:09:38,170 --> 01:09:43,960
<font color="#E5E5E5">because the secret is assumed</font><font color="#CCCCCC"> is a very</font>

1556
01:09:40,839 --> 01:09:46,089
short so it is easy<font color="#E5E5E5"> to memorize but on</font>

1557
01:09:43,960 --> 01:09:50,589
the other hand<font color="#E5E5E5"> it also means it</font><font color="#CCCCCC"> just</font>

1558
01:09:46,089 --> 01:09:53,050
<font color="#CCCCCC">that has a low entropy is a it could</font><font color="#E5E5E5"> be</font>

1559
01:09:50,589 --> 01:09:55,360
very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> for attacker to guess the</font>

1560
01:09:53,050 --> 01:09:58,000
password<font color="#E5E5E5"> so the main thing we need to</font>

1561
01:09:55,360 --> 01:10:00,120
<font color="#E5E5E5">think about about</font><font color="#CCCCCC"> the security of the</font>

1562
01:09:58,000 --> 01:10:02,770
pig is about the dictionary attack

1563
01:10:00,120 --> 01:10:05,440
<font color="#E5E5E5">actually two</font><font color="#CCCCCC"> versions one</font><font color="#E5E5E5"> called the</font>

1564
01:10:02,770 --> 01:10:09,100
<font color="#CCCCCC">unlike dictionary attack this</font><font color="#E5E5E5"> is err can</font>

1565
01:10:05,440 --> 01:10:12,219
be prevented quite easily by supposing

1566
01:10:09,100 --> 01:10:15,580
the server side can do some check<font color="#CCCCCC"> just</font>

1567
01:10:12,220 --> 01:10:18,550
allow<font color="#E5E5E5"> you twice a password for a few</font>

1568
01:10:15,580 --> 01:10:21,490
times in a<font color="#CCCCCC"> given period</font><font color="#E5E5E5"> now this can be</font>

1569
01:10:18,550 --> 01:10:23,590
done<font color="#CCCCCC"> very good in practice so the really</font>

1570
01:10:21,490 --> 01:10:25,420
<font color="#CCCCCC">difficult</font><font color="#E5E5E5"> one is about the offline cache</font>

1571
01:10:23,590 --> 01:10:29,530
we attack<font color="#E5E5E5"> it means that actually</font>

1572
01:10:25,420 --> 01:10:32,980
attacker can leasing your messages for

1573
01:10:29,530 --> 01:10:35,500
<font color="#E5E5E5">your protocol</font><font color="#CCCCCC"> yeah for several protocol</font>

1574
01:10:32,980 --> 01:10:37,719
<font color="#CCCCCC">or running instance after that as</font><font color="#E5E5E5"> you</font>

1575
01:10:35,500 --> 01:10:40,780
can according to<font color="#E5E5E5"> this message and</font><font color="#CCCCCC"> I'll</font>

1576
01:10:37,720 --> 01:10:42,820
try to<font color="#E5E5E5"> do offline calculation to fund</font>

1577
01:10:40,780 --> 01:10:45,730
your password<font color="#CCCCCC"> this is a bigger</font><font color="#E5E5E5"> problem</font>

1578
01:10:42,820 --> 01:10:47,920
yeah because the<font color="#E5E5E5"> part of what</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a</font>

1579
01:10:45,730 --> 01:10:49,360
<font color="#E5E5E5">shot and many people use a pass or</font>

1580
01:10:47,920 --> 01:10:52,150
according to some<font color="#CCCCCC"> petty</font>

1581
01:10:49,360 --> 01:10:54,239
information like your your your name or

1582
01:10:52,150 --> 01:10:57,759
some your birthday something like this

1583
01:10:54,239 --> 01:11:00,250
<font color="#CCCCCC">so I think I can create a dictionary for</font>

1584
01:10:57,760 --> 01:11:02,889
<font color="#E5E5E5">possible puzzle world and try this one</font>

1585
01:11:00,250 --> 01:11:06,159
by doing<font color="#CCCCCC"> offline calculations or flies</font>

1586
01:11:02,889 --> 01:11:07,929
that have<font color="#CCCCCC"> computers even</font><font color="#E5E5E5"> super super</font>

1587
01:11:06,159 --> 01:11:10,210
powerful<font color="#E5E5E5"> computers can do it very</font>

1588
01:11:07,929 --> 01:11:13,179
<font color="#E5E5E5">quickly</font><font color="#CCCCCC"> so the sage Dictionary size can</font>

1589
01:11:10,210 --> 01:11:14,800
be very big actually<font color="#E5E5E5"> yeah another</font>

1590
01:11:13,179 --> 01:11:16,300
security requirements you called the

1591
01:11:14,800 --> 01:11:17,020
forward<font color="#E5E5E5"> the security it is also</font>

1592
01:11:16,300 --> 01:11:19,179
important

1593
01:11:17,020 --> 01:11:23,230
basically<font color="#CCCCCC"> it</font><font color="#E5E5E5"> means we were likely</font><font color="#CCCCCC"> to</font>

1594
01:11:19,179 --> 01:11:26,530
have<font color="#E5E5E5"> such a protocol such that even the</font>

1595
01:11:23,230 --> 01:11:29,519
password is leaked<font color="#E5E5E5"> sometime later</font><font color="#CCCCCC"> even</font>

1596
01:11:26,530 --> 01:11:32,380
<font color="#CCCCCC">in this case the parallel</font><font color="#E5E5E5"> parallels</font>

1597
01:11:29,520 --> 01:11:34,420
<font color="#CCCCCC">share</font><font color="#E5E5E5"> the secret King the session</font><font color="#CCCCCC"> King</font>

1598
01:11:32,380 --> 01:11:36,610
yeah agreed

1599
01:11:34,420 --> 01:11:40,000
by using<font color="#CCCCCC"> the password could still be</font>

1600
01:11:36,610 --> 01:11:42,549
<font color="#E5E5E5">secure this is important one one more</font>

1601
01:11:40,000 --> 01:11:45,159
<font color="#E5E5E5">thing is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually original version</font>

1602
01:11:42,550 --> 01:11:48,100
<font color="#E5E5E5">about the pig is that both post parties</font>

1603
01:11:45,159 --> 01:11:50,619
just share the drawer secret that<font color="#E5E5E5"> the</font>

1604
01:11:48,100 --> 01:11:52,540
password<font color="#E5E5E5"> but in this case especially</font><font color="#CCCCCC"> if</font>

1605
01:11:50,619 --> 01:11:54,759
the server is<font color="#E5E5E5"> a compromised by attacker</font>

1606
01:11:52,540 --> 01:11:57,850
<font color="#E5E5E5">so the server can get the password</font><font color="#CCCCCC"> for</font>

1607
01:11:54,760 --> 01:11:59,380
all the<font color="#E5E5E5"> users this will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> very bad so</font>

1608
01:11:57,850 --> 01:12:01,810
we would like<font color="#CCCCCC"> to have something else</font>

1609
01:11:59,380 --> 01:12:05,350
<font color="#CCCCCC">because there how</font><font color="#E5E5E5"> to prevent the server</font>

1610
01:12:01,810 --> 01:12:08,130
come corruption or<font color="#CCCCCC"> compromised</font><font color="#E5E5E5"> this</font>

1611
01:12:05,350 --> 01:12:10,929
means<font color="#E5E5E5"> even if the attacker could</font>

1612
01:12:08,130 --> 01:12:12,429
compromise the server that<font color="#CCCCCC"> can only get</font>

1613
01:12:10,929 --> 01:12:14,580
a summary information part of<font color="#CCCCCC"> the</font>

1614
01:12:12,429 --> 01:12:15,880
password<font color="#E5E5E5"> but not the</font><font color="#CCCCCC"> password is itself</font>

1615
01:12:14,580 --> 01:12:19,869
<font color="#E5E5E5">yeah</font>

1616
01:12:15,880 --> 01:12:22,540
so to do this one<font color="#E5E5E5"> we have a variant of</font><font color="#CCCCCC"> a</font>

1617
01:12:19,869 --> 01:12:25,089
<font color="#CCCCCC">pact accorded a verifier Peck</font><font color="#E5E5E5"> so we can</font>

1618
01:12:22,540 --> 01:12:26,820
cause of APA ké<font color="#E5E5E5"> yeah use these keys we</font>

1619
01:12:25,090 --> 01:12:28,090
can<font color="#E5E5E5"> prevent the server</font><font color="#CCCCCC"> complete</font>

1620
01:12:26,820 --> 01:12:30,820
corruption

1621
01:12:28,090 --> 01:12:32,440
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> so these</font><font color="#E5E5E5"> the terminology and these</font>

1622
01:12:30,820 --> 01:12:36,509
are complex but if you'll notice<font color="#E5E5E5"> quite</font>

1623
01:12:32,440 --> 01:12:39,580
well it is actually<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> but interesting</font>

1624
01:12:36,510 --> 01:12:42,250
okay so the main challenger for the<font color="#E5E5E5"> peg</font>

1625
01:12:39,580 --> 01:12:44,590
is that we would need<font color="#CCCCCC"> to design PA ke</font>

1626
01:12:42,250 --> 01:12:47,770
secure against the<font color="#E5E5E5"> off like extra attack</font>

1627
01:12:44,590 --> 01:12:49,420
<font color="#CCCCCC">it's not challenged apart yeah so the</font>

1628
01:12:47,770 --> 01:12:52,929
main<font color="#CCCCCC"> limitations</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the most obvious</font>

1629
01:12:49,420 --> 01:12:55,480
<font color="#E5E5E5">existing</font><font color="#CCCCCC"> package solutions</font><font color="#E5E5E5"> are to expect</font>

1630
01:12:52,929 --> 01:12:57,520
the first one is<font color="#E5E5E5"> most of</font><font color="#CCCCCC"> our quite a</font>

1631
01:12:55,480 --> 01:12:59,320
number of<font color="#E5E5E5"> them actually don't know the</font>

1632
01:12:57,520 --> 01:13:00,820
<font color="#E5E5E5">support the form of the security but</font>

1633
01:12:59,320 --> 01:13:02,980
this one is<font color="#CCCCCC"> actually important and</font>

1634
01:13:00,820 --> 01:13:05,139
another one is that for

1635
01:13:02,980 --> 01:13:07,780
some schemes<font color="#CCCCCC"> they'll have provable</font>

1636
01:13:05,140 --> 01:13:09,910
security but only in the multiplicative

1637
01:13:07,780 --> 01:13:13,210
group sort<font color="#E5E5E5"> of a find the fuse basically</font>

1638
01:13:09,910 --> 01:13:16,180
<font color="#E5E5E5">means it does not work for Olympic</font>

1639
01:13:13,210 --> 01:13:18,400
Africa<font color="#CCCCCC"> Liberty</font><font color="#E5E5E5"> curve lot of work for you</font>

1640
01:13:16,180 --> 01:13:20,489
see see this<font color="#E5E5E5"> is actually important one</font>

1641
01:13:18,400 --> 01:13:23,349
especially if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> needed contained</font>

1642
01:13:20,489 --> 01:13:27,309
efficiency because it is a can use the

1643
01:13:23,350 --> 01:13:30,040
short elements and<font color="#CCCCCC"> can get a very</font>

1644
01:13:27,310 --> 01:13:32,140
<font color="#CCCCCC">tighter security key</font><font color="#E5E5E5"> yeah so it is more</font>

1645
01:13:30,040 --> 01:13:33,160
efficient for<font color="#E5E5E5"> post computation and that</font>

1646
01:13:32,140 --> 01:13:37,030
communication

1647
01:13:33,160 --> 01:13:40,120
yeah so we have a<font color="#E5E5E5"> two protocols they are</font>

1648
01:13:37,030 --> 01:13:42,580
<font color="#E5E5E5">paper protocols which meet both forward</font>

1649
01:13:40,120 --> 01:13:46,059
the security and it can<font color="#E5E5E5"> works in any</font>

1650
01:13:42,580 --> 01:13:49,720
group<font color="#E5E5E5"> so including ECC which means so</font>

1651
01:13:46,060 --> 01:13:52,150
the paper<font color="#CCCCCC"> actually published in 2000 hmm</font>

1652
01:13:49,720 --> 01:13:54,910
<font color="#CCCCCC">HSE says a nice</font><font color="#E5E5E5"> conference just a</font><font color="#CCCCCC"> one</font>

1653
01:13:52,150 --> 01:13:58,450
<font color="#CCCCCC">year go and a public evasion is actually</font>

1654
01:13:54,910 --> 01:14:01,750
available from the professor<font color="#E5E5E5"> David upon</font>

1655
01:13:58,450 --> 01:14:03,519
the<font color="#E5E5E5"> Chivas website from yes so you can</font>

1656
01:14:01,750 --> 01:14:06,460
get<font color="#CCCCCC"> a version</font><font color="#E5E5E5"> as well</font>

1657
01:14:03,520 --> 01:14:10,360
so<font color="#CCCCCC"> this coupon code will call them tbp</font>

1658
01:14:06,460 --> 01:14:13,750
<font color="#CCCCCC">ke to base to basis possible the</font>

1659
01:14:10,360 --> 01:14:16,570
explanation<font color="#E5E5E5"> case</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> so to base just</font>

1660
01:14:13,750 --> 01:14:19,480
a term we use how<font color="#E5E5E5"> to construct</font><font color="#CCCCCC"> a</font>

1661
01:14:16,570 --> 01:14:22,960
<font color="#E5E5E5">protocol and is a verifier version</font>

1662
01:14:19,480 --> 01:14:25,750
<font color="#CCCCCC">called</font><font color="#E5E5E5"> the VAE PPP e ke so this can be</font>

1663
01:14:22,960 --> 01:14:29,290
<font color="#CCCCCC">used</font><font color="#E5E5E5"> to prevent the server corruption</font>

1664
01:14:25,750 --> 01:14:31,180
yeah suppose protocol approval can be

1665
01:14:29,290 --> 01:14:33,519
proved the secure understand the

1666
01:14:31,180 --> 01:14:37,150
complexity assumption so this means we

1667
01:14:33,520 --> 01:14:39,130
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cryptographic security guarantee</font>

1668
01:14:37,150 --> 01:14:41,139
for<font color="#E5E5E5"> this protocols and the most</font>

1669
01:14:39,130 --> 01:14:42,970
important one is<font color="#CCCCCC"> that the ECC can be</font>

1670
01:14:41,140 --> 01:14:46,030
used that to<font color="#E5E5E5"> implement</font><font color="#CCCCCC"> is the protocols</font>

1671
01:14:42,970 --> 01:14:51,820
so in this case<font color="#CCCCCC"> post computation and</font>

1672
01:14:46,030 --> 01:14:54,250
communication<font color="#E5E5E5"> can be hard</font><font color="#CCCCCC"> efficient okay</font>

1673
01:14:51,820 --> 01:14:56,830
so here<font color="#CCCCCC"> using some a very quick summary</font>

1674
01:14:54,250 --> 01:14:58,960
about the<font color="#E5E5E5"> existing solutions as there is</font>

1675
01:14:56,830 --> 01:15:00,700
a lot actually<font color="#CCCCCC"> here I</font><font color="#E5E5E5"> just mentioned</font><font color="#CCCCCC"> two</font>

1676
01:14:58,960 --> 01:15:03,310
most<font color="#CCCCCC"> ephemeris war and also call</font><font color="#E5E5E5"> it</font>

1677
01:15:00,700 --> 01:15:05,470
related to<font color="#E5E5E5"> our</font><font color="#CCCCCC"> research work</font><font color="#E5E5E5"> the first</font>

1678
01:15:03,310 --> 01:15:08,050
protocol<font color="#E5E5E5"> called</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> de ke encrypted key</font>

1679
01:15:05,470 --> 01:15:09,820
exchange this<font color="#E5E5E5"> is the first epic protocol</font>

1680
01:15:08,050 --> 01:15:12,460
<font color="#E5E5E5">yeah I guess</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> so actually</font><font color="#CCCCCC"> it</font>

1681
01:15:09,820 --> 01:15:14,440
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> is that DF ami</font><font color="#E5E5E5"> exchange but</font>

1682
01:15:12,460 --> 01:15:15,440
<font color="#E5E5E5">the tff</font><font color="#CCCCCC"> I'm exchanging</font><font color="#E5E5E5"> is not secure</font><font color="#CCCCCC"> but</font>

1683
01:15:14,440 --> 01:15:18,469
due<font color="#CCCCCC"> to the Magnum</font>

1684
01:15:15,440 --> 01:15:22,339
attack<font color="#CCCCCC"> so here is AC protocol we used</font>

1685
01:15:18,469 --> 01:15:25,610
<font color="#E5E5E5">password</font><font color="#CCCCCC"> just used possible as there as</font>

1686
01:15:22,340 --> 01:15:29,900
a symmetric key and a to encrypt the

1687
01:15:25,610 --> 01:15:32,059
temper<font color="#E5E5E5"> temporary public key for the D H</font>

1688
01:15:29,900 --> 01:15:34,879
protocol<font color="#E5E5E5"> yeah in this</font><font color="#CCCCCC"> way we can</font><font color="#E5E5E5"> get a</font>

1689
01:15:32,060 --> 01:15:38,180
secure protocol one<font color="#E5E5E5"> secure protocol</font>

1690
01:15:34,880 --> 01:15:41,480
<font color="#E5E5E5">about the security</font><font color="#CCCCCC"> actually it can</font><font color="#E5E5E5"> be</font>

1691
01:15:38,180 --> 01:15:44,480
proved<font color="#E5E5E5"> secure under the random</font><font color="#CCCCCC"> on Komodo</font>

1692
01:15:41,480 --> 01:15:46,669
yeah but we need to assume<font color="#E5E5E5"> that the</font>

1693
01:15:44,480 --> 01:15:50,360
symmetric key<font color="#E5E5E5"> we use the for encryption</font>

1694
01:15:46,670 --> 01:15:53,120
<font color="#E5E5E5">here is an idea cipher so it is has no</font>

1695
01:15:50,360 --> 01:15:55,580
flaws like<font color="#CCCCCC"> an idea cipher yeah</font><font color="#E5E5E5"> just a</font>

1696
01:15:53,120 --> 01:15:58,519
idea cipher a second one called the<font color="#E5E5E5"> SPE</font>

1697
01:15:55,580 --> 01:16:01,340
ke<font color="#CCCCCC"> simple parts of other explanation</font><font color="#E5E5E5"> K</font>

1698
01:15:58,520 --> 01:16:04,010
<font color="#CCCCCC">is change</font><font color="#E5E5E5"> with just</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> patient's is</font>

1699
01:16:01,340 --> 01:16:07,310
<font color="#CCCCCC">work at</font><font color="#E5E5E5"> our new protocols and then this</font>

1700
01:16:04,010 --> 01:16:16,130
protocol is<font color="#E5E5E5"> do</font><font color="#CCCCCC"> editing</font><font color="#E5E5E5"> another way so do</font>

1701
01:16:07,310 --> 01:16:29,600
based on<font color="#E5E5E5"> th but</font><font color="#CCCCCC"> here we just</font><font color="#E5E5E5"> used maybe</font>

1702
01:16:16,130 --> 01:16:32,840
not what<font color="#E5E5E5"> things mean sorry for getting</font>

1703
01:16:29,600 --> 01:16:38,500
so in this protocol basic<font color="#E5E5E5"> idea that</font><font color="#CCCCCC"> idea</font>

1704
01:16:32,840 --> 01:16:42,230
generates the generator for our yeah

1705
01:16:38,500 --> 01:16:44,540
multiplication<font color="#E5E5E5"> group G from the password</font>

1706
01:16:42,230 --> 01:16:46,330
<font color="#E5E5E5">use a hash function</font><font color="#CCCCCC"> actually this is</font>

1707
01:16:44,540 --> 01:16:49,460
<font color="#E5E5E5">also related to the previous</font>

1708
01:16:46,330 --> 01:16:53,000
<font color="#E5E5E5">presentation about the hash</font><font color="#CCCCCC"> and opponent</font>

1709
01:16:49,460 --> 01:16:56,420
<font color="#CCCCCC">hash and some value to a point in ECC</font>

1710
01:16:53,000 --> 01:16:58,280
<font color="#E5E5E5">yeah it's related so that</font><font color="#CCCCCC"> was all</font><font color="#E5E5E5"> from</font>

1711
01:16:56,420 --> 01:17:00,680
my<font color="#CCCCCC"> point is</font><font color="#E5E5E5"> also increasing there are</font>

1712
01:16:58,280 --> 01:17:02,509
<font color="#E5E5E5">such</font><font color="#CCCCCC"> things for</font><font color="#E5E5E5"> that Joseph for this one</font>

1713
01:17:00,680 --> 01:17:04,460
so this basically<font color="#E5E5E5"> means the</font><font color="#CCCCCC"> attacker can</font>

1714
01:17:02,510 --> 01:17:06,739
actually things do get<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the temporary</font>

1715
01:17:04,460 --> 01:17:08,480
public<font color="#E5E5E5"> key for the th but</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> don't</font>

1716
01:17:06,739 --> 01:17:09,549
know what is the generator<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font>

1717
01:17:08,480 --> 01:17:12,320
don't know the password

1718
01:17:09,550 --> 01:17:15,350
yeah so from this point it's<font color="#E5E5E5"> quite</font>

1719
01:17:12,320 --> 01:17:16,059
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> but the proof is actually is not</font>

1720
01:17:15,350 --> 01:17:18,890
so simple

1721
01:17:16,060 --> 01:17:21,860
especially saying is that the the

1722
01:17:18,890 --> 01:17:25,040
available security proof<font color="#E5E5E5"> only works for</font>

1723
01:17:21,860 --> 01:17:27,889
multiplication subgroup of a<font color="#E5E5E5"> finder</font>

1724
01:17:25,040 --> 01:17:30,769
fields not for the<font color="#E5E5E5"> history cooks</font>

1725
01:17:27,890 --> 01:17:32,960
so this means<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> UCC you can</font>

1726
01:17:30,770 --> 01:17:35,240
see do use this protocol<font color="#E5E5E5"> but it is risky</font>

1727
01:17:32,960 --> 01:17:37,850
because no security proof guarantee for

1728
01:17:35,240 --> 01:17:39,920
this protocol<font color="#E5E5E5"> yeah and also because</font><font color="#CCCCCC"> of</font>

1729
01:17:37,850 --> 01:17:43,810
<font color="#E5E5E5">the usual reason so actually the real</font>

1730
01:17:39,920 --> 01:17:46,850
<font color="#E5E5E5">efficiency for a</font><font color="#CCCCCC"> proviso</font><font color="#E5E5E5"> is not so good</font>

1731
01:17:43,810 --> 01:17:49,610
<font color="#CCCCCC">ok so here we introduce our protocol</font><font color="#E5E5E5"> our</font>

1732
01:17:46,850 --> 01:17:52,250
<font color="#CCCCCC">bottle coding is something quite similar</font>

1733
01:17:49,610 --> 01:17:55,429
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> PE ke due to this reason we</font>

1734
01:17:52,250 --> 01:17:57,950
<font color="#E5E5E5">called</font><font color="#CCCCCC"> to base PE k so in our protocol</font>

1735
01:17:55,430 --> 01:18:01,730
<font color="#E5E5E5">with just a general get the generator G</font>

1736
01:17:57,950 --> 01:18:05,030
from<font color="#E5E5E5"> two</font><font color="#CCCCCC"> bases</font><font color="#E5E5E5"> you multiply the right to</font>

1737
01:18:01,730 --> 01:18:07,370
PW<font color="#E5E5E5"> PW the password</font><font color="#CCCCCC"> you and P</font><font color="#E5E5E5"> you and</font>

1738
01:18:05,030 --> 01:18:11,809
they are<font color="#CCCCCC"> other</font><font color="#E5E5E5"> other two pieces this is</font>

1739
01:18:07,370 --> 01:18:15,080
our protocol yeah and the<font color="#E5E5E5"> next one to</font>

1740
01:18:11,810 --> 01:18:17,600
prevent the server corruption so we need

1741
01:18:15,080 --> 01:18:20,809
to do<font color="#E5E5E5"> it another way just the based on</font>

1742
01:18:17,600 --> 01:18:25,040
the first protocol<font color="#CCCCCC"> so what we do is that</font>

1743
01:18:20,810 --> 01:18:28,490
the client signs do need to hold the

1744
01:18:25,040 --> 01:18:32,030
password<font color="#E5E5E5"> but but for the server side the</font>

1745
01:18:28,490 --> 01:18:36,950
<font color="#E5E5E5">server only need to store another value</font>

1746
01:18:32,030 --> 01:18:40,099
it<font color="#E5E5E5"> is called the way to the h SP w SS</font>

1747
01:18:36,950 --> 01:18:42,410
here<font color="#CCCCCC"> you know just</font><font color="#E5E5E5"> a random sort yeah</font>

1748
01:18:40,100 --> 01:18:46,430
<font color="#E5E5E5">for ye for each user</font><font color="#CCCCCC"> it's the difference</font>

1749
01:18:42,410 --> 01:18:49,160
<font color="#E5E5E5">and the H here is a hash value</font><font color="#CCCCCC"> yeah</font>

1750
01:18:46,430 --> 01:18:52,400
so this means it's<font color="#E5E5E5"> the server side</font><font color="#CCCCCC"> the</font>

1751
01:18:49,160 --> 01:18:55,820
server data into two daughter the the

1752
01:18:52,400 --> 01:18:58,280
password<font color="#E5E5E5"> yeah and in the implementation</font>

1753
01:18:55,820 --> 01:19:01,610
<font color="#E5E5E5">are you how to design the protocol</font><font color="#CCCCCC"> two</font>

1754
01:18:58,280 --> 01:19:04,269
basic ideas<font color="#E5E5E5"> the first idea is that yeah</font>

1755
01:19:01,610 --> 01:19:07,460
the user need to prove his knowledge

1756
01:19:04,270 --> 01:19:09,530
<font color="#E5E5E5">sgw</font><font color="#CCCCCC"> is the hash value</font><font color="#E5E5E5"> of the of the</font>

1757
01:19:07,460 --> 01:19:12,500
password<font color="#E5E5E5"> together with a random sort</font>

1758
01:19:09,530 --> 01:19:13,940
<font color="#E5E5E5">yeah he needed to prove this one and the</font>

1759
01:19:12,500 --> 01:19:17,570
<font color="#E5E5E5">to prove this one basically the well</font>

1760
01:19:13,940 --> 01:19:20,360
<font color="#E5E5E5">used as their</font><font color="#CCCCCC"> knowledge skill so also</font>

1761
01:19:17,570 --> 01:19:23,179
<font color="#CCCCCC">just the previous</font><font color="#E5E5E5"> slides introduced the</font>

1762
01:19:20,360 --> 01:19:25,580
idea here we don't<font color="#E5E5E5"> mention video and the</font>

1763
01:19:23,180 --> 01:19:28,340
next<font color="#CCCCCC"> part is that</font><font color="#E5E5E5"> because their own</font>

1764
01:19:25,580 --> 01:19:30,410
knowledge like<font color="#CCCCCC"> removal</font><font color="#E5E5E5"> there's a</font>

1765
01:19:28,340 --> 01:19:32,960
challenge<font color="#E5E5E5"> commitment challenge and</font>

1766
01:19:30,410 --> 01:19:35,990
<font color="#E5E5E5">response and again this one</font><font color="#CCCCCC"> we master</font>

1767
01:19:32,960 --> 01:19:38,810
need to encrypt<font color="#E5E5E5"> the response otherwise</font>

1768
01:19:35,990 --> 01:19:41,659
<font color="#CCCCCC">the protocol is not secure</font><font color="#E5E5E5"> again against</font>

1769
01:19:38,810 --> 01:19:43,610
the<font color="#CCCCCC"> offline</font><font color="#E5E5E5"> attack yeah</font>

1770
01:19:41,659 --> 01:19:47,179
so detail use a little bit<font color="#CCCCCC"> of</font><font color="#E5E5E5"> complex</font>

1771
01:19:43,610 --> 01:19:48,650
but the basic idea is can<font color="#E5E5E5"> it</font><font color="#CCCCCC"> okay can I</font>

1772
01:19:47,179 --> 01:19:50,540
just interrupt you<font color="#E5E5E5"> so there are four</font>

1773
01:19:48,650 --> 01:19:52,400
<font color="#E5E5E5">minutes left you can either keep going</font>

1774
01:19:50,540 --> 01:19:57,679
through<font color="#E5E5E5"> your slides and have no time for</font>

1775
01:19:52,400 --> 01:19:59,570
<font color="#E5E5E5">questions or okay yeah yeah yeah so hey</font>

1776
01:19:57,679 --> 01:20:02,060
the policy could<font color="#CCCCCC"> you prove</font><font color="#E5E5E5"> we actually</font>

1777
01:19:59,570 --> 01:20:04,159
gave us a guarantee<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> yeah</font>

1778
01:20:02,060 --> 01:20:06,739
like a<font color="#E5E5E5"> website is supported security and</font>

1779
01:20:04,159 --> 01:20:08,239
we also<font color="#E5E5E5"> consider the possible so that we</font>

1780
01:20:06,739 --> 01:20:10,218
can get a<font color="#CCCCCC"> little bit more tighter</font>

1781
01:20:08,239 --> 01:20:12,409
security results yeah there's some

1782
01:20:10,219 --> 01:20:15,980
<font color="#CCCCCC">examples of it on you can go into detail</font>

1783
01:20:12,409 --> 01:20:19,159
<font color="#E5E5E5">here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the comparison so in the second</font>

1784
01:20:15,980 --> 01:20:21,678
<font color="#CCCCCC">part the</font><font color="#E5E5E5"> last line is about our Chester</font>

1785
01:20:19,159 --> 01:20:23,480
PA<font color="#CCCCCC"> ke protocol hardly sufficient from</font>

1786
01:20:21,679 --> 01:20:25,880
<font color="#E5E5E5">here you can see it is supportable so</font>

1787
01:20:23,480 --> 01:20:29,030
for the security<font color="#E5E5E5"> and also work seeing</font>

1788
01:20:25,880 --> 01:20:30,830
<font color="#E5E5E5">the ECC group and the last one lots of</font>

1789
01:20:29,030 --> 01:20:34,909
the parts in<font color="#E5E5E5"> the last align to our</font>

1790
01:20:30,830 --> 01:20:36,769
verify version of the our protocol<font color="#E5E5E5"> it</font>

1791
01:20:34,909 --> 01:20:38,690
<font color="#E5E5E5">also supported secure</font><font color="#CCCCCC"> forward</font><font color="#E5E5E5"> the</font>

1792
01:20:36,770 --> 01:20:43,870
security and<font color="#E5E5E5"> also works the following</font>

1793
01:20:38,690 --> 01:20:47,030
<font color="#CCCCCC">sec here is</font><font color="#E5E5E5"> our preliminary inflammation</font>

1794
01:20:43,870 --> 01:20:49,309
implement this is the recommendation<font color="#CCCCCC"> on</font>

1795
01:20:47,030 --> 01:20:52,009
parameters<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> different security</font>

1796
01:20:49,310 --> 01:20:53,920
levels<font color="#E5E5E5"> what's the password we</font><font color="#CCCCCC"> can we can</font>

1797
01:20:52,010 --> 01:20:59,179
<font color="#E5E5E5">use how long the password and the</font>

1798
01:20:53,920 --> 01:21:00,280
corresponding ECC<font color="#CCCCCC"> element</font><font color="#E5E5E5"> size and as</font><font color="#CCCCCC"> i</font>

1799
01:20:59,179 --> 01:21:02,750
see is the our preliminary

1800
01:21:00,280 --> 01:21:06,590
implementation results basically<font color="#CCCCCC"> you</font>

1801
01:21:02,750 --> 01:21:08,810
know a quite normal<font color="#E5E5E5"> server so each</font>

1802
01:21:06,590 --> 01:21:10,760
<font color="#CCCCCC">patrol</font><font color="#E5E5E5"> can be wrong</font><font color="#CCCCCC"> I mean mainly</font><font color="#E5E5E5"> for</font>

1803
01:21:08,810 --> 01:21:14,960
the<font color="#CCCCCC"> computation can be</font><font color="#E5E5E5"> done in 10</font>

1804
01:21:10,760 --> 01:21:18,050
milliseconds<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the requirements</font>

1805
01:21:14,960 --> 01:21:19,370
from<font color="#E5E5E5"> I say eight one</font><font color="#CCCCCC"> four five it</font><font color="#E5E5E5"> is</font>

1806
01:21:18,050 --> 01:21:23,120
about the requirements<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> paper</font>

1807
01:21:19,370 --> 01:21:25,610
protocols so any requirements here<font color="#E5E5E5"> so we</font>

1808
01:21:23,120 --> 01:21:27,500
can say<font color="#E5E5E5"> our protocol</font>

1809
01:21:25,610 --> 01:21:29,989
satisfy almost all the requirements

1810
01:21:27,500 --> 01:21:32,449
there are some we need a little<font color="#E5E5E5"> bit more</font>

1811
01:21:29,989 --> 01:21:34,280
work<font color="#E5E5E5"> so we always think it could be a</font>

1812
01:21:32,449 --> 01:21:38,388
Canadian proposal for these requirements

1813
01:21:34,280 --> 01:21:41,259
<font color="#E5E5E5">so they think it all right we have any</font>

1814
01:21:38,389 --> 01:21:44,630
<font color="#CCCCCC">questions please and uh fill van Baker</font><font color="#E5E5E5"> I</font>

1815
01:21:41,260 --> 01:21:48,920
would just like ITF to pick<font color="#CCCCCC"> exactly one</font>

1816
01:21:44,630 --> 01:21:52,010
I<font color="#E5E5E5"> don't care what it is</font><font color="#CCCCCC"> so long</font><font color="#E5E5E5"> as you</font>

1817
01:21:48,920 --> 01:21:54,290
pick<font color="#CCCCCC"> warm</font><font color="#E5E5E5"> and his patenting unencumbered</font>

1818
01:21:52,010 --> 01:21:55,580
<font color="#E5E5E5">which is the reason</font><font color="#CCCCCC"> that we're not</font><font color="#E5E5E5"> doing</font>

1819
01:21:54,290 --> 01:21:57,530
any of this today

1820
01:21:55,580 --> 01:21:59,860
because there were patents and they got

1821
01:21:57,530 --> 01:21:59,860
in the<font color="#E5E5E5"> way</font>

1822
01:22:01,160 --> 01:22:07,940
Ann Harkins<font color="#E5E5E5"> again so related to what</font>

1823
01:22:04,520 --> 01:22:10,100
Phil said requirement<font color="#CCCCCC"> 8 is you have to</font>

1824
01:22:07,940 --> 01:22:11,809
say whether your<font color="#E5E5E5"> company has any IPR in</font>

1825
01:22:10,100 --> 01:22:13,700
this scheme so does your company have

1826
01:22:11,810 --> 01:22:14,690
any IPR in this scheme<font color="#CCCCCC"> I'll wait I'll</font>

1827
01:22:13,700 --> 01:22:17,710
<font color="#E5E5E5">have okay</font>

1828
01:22:14,690 --> 01:22:20,540
<font color="#CCCCCC">so on the comparison you say</font><font color="#E5E5E5"> that's</font>

1829
01:22:17,710 --> 01:22:23,210
spake<font color="#CCCCCC"> to speak and SAE</font><font color="#E5E5E5"> do not provide</font>

1830
01:22:20,540 --> 01:22:28,480
<font color="#CCCCCC">for secrecy</font><font color="#E5E5E5"> but that's not true</font><font color="#CCCCCC"> that's</font>

1831
01:22:23,210 --> 01:22:32,210
<font color="#CCCCCC">for compromised speak to speak and SAE</font>

1832
01:22:28,480 --> 01:22:34,070
they all<font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> they'll</font>

1833
01:22:32,210 --> 01:22:36,290
provide<font color="#E5E5E5"> for secrecy and I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> think</font>

1834
01:22:34,070 --> 01:22:38,030
that there's a limitation<font color="#CCCCCC"> for a</font>

1835
01:22:36,290 --> 01:22:41,030
<font color="#E5E5E5">multi-link of</font><font color="#CCCCCC"> subgroup of</font><font color="#E5E5E5"> finite field</font>

1836
01:22:38,030 --> 01:22:46,160
for SAE<font color="#CCCCCC"> okay we take a leg done</font><font color="#E5E5E5"> maybe</font>

1837
01:22:41,030 --> 01:22:48,559
<font color="#CCCCCC">okay yeah discuss with you Stanislas</font>

1838
01:22:46,160 --> 01:22:50,240
mesh laughs crypto<font color="#CCCCCC"> pro</font><font color="#E5E5E5"> I would like to</font>

1839
01:22:48,560 --> 01:22:54,680
add a few<font color="#CCCCCC"> words to the dance</font>

1840
01:22:50,240 --> 01:22:55,250
I commend<font color="#E5E5E5"> in fact spec</font><font color="#CCCCCC"> 2 is as for</font>

1841
01:22:54,680 --> 01:23:00,230
secrecy

1842
01:22:55,250 --> 01:23:03,710
moreover<font color="#CCCCCC"> dance protocol KX has it and as</font>

1843
01:23:00,230 --> 01:23:07,190
I understand has all<font color="#E5E5E5"> positive features</font>

1844
01:23:03,710 --> 01:23:10,460
that you enumerated in<font color="#CCCCCC"> your slides so it</font>

1845
01:23:07,190 --> 01:23:14,059
will be very<font color="#CCCCCC"> good if you</font><font color="#E5E5E5"> may be in the</font>

1846
01:23:10,460 --> 01:23:16,820
Middle<font color="#E5E5E5"> East</font><font color="#CCCCCC"> we could have</font><font color="#E5E5E5"> a deeper</font>

1847
01:23:14,060 --> 01:23:18,860
analysis of comparison of<font color="#CCCCCC"> your</font><font color="#E5E5E5"> protocol</font>

1848
01:23:16,820 --> 01:23:21,910
to all existing<font color="#CCCCCC"> ones because you have a</font>

1849
01:23:18,860 --> 01:23:26,120
lot of<font color="#E5E5E5"> package and I think that at least</font>

1850
01:23:21,910 --> 01:23:28,190
three<font color="#E5E5E5"> of them are quite similar in the</font>

1851
01:23:26,120 --> 01:23:30,320
sense of security

1852
01:23:28,190 --> 01:23:32,900
<font color="#CCCCCC">these</font><font color="#E5E5E5"> for secrecy with support of</font>

1853
01:23:30,320 --> 01:23:37,429
elliptic curves<font color="#E5E5E5"> and maybe the difference</font>

1854
01:23:32,900 --> 01:23:41,210
is about<font color="#E5E5E5"> as a complexity as additional</font>

1855
01:23:37,430 --> 01:23:44,030
security properties and also I will dead

1856
01:23:41,210 --> 01:23:48,080
that your<font color="#E5E5E5"> conditional</font><font color="#CCCCCC"> there file will</font>

1857
01:23:44,030 --> 01:23:51,400
take a same very similar<font color="#CCCCCC"> to augmented</font>

1858
01:23:48,080 --> 01:23:54,830
Peggy<font color="#E5E5E5"> and in fact this</font><font color="#CCCCCC"> doesn't prevent</font>

1859
01:23:51,400 --> 01:23:57,650
<font color="#E5E5E5">as a password</font><font color="#CCCCCC"> to be leaked if the server</font>

1860
01:23:54,830 --> 01:24:00,710
is compromised<font color="#E5E5E5"> it's just another line of</font>

1861
01:23:57,650 --> 01:24:03,679
<font color="#E5E5E5">defense if the adversary wants to put</font>

1862
01:24:00,710 --> 01:24:06,230
force<font color="#E5E5E5"> all passwords</font><font color="#CCCCCC"> but if you want to</font>

1863
01:24:03,680 --> 01:24:08,990
attack one single password<font color="#E5E5E5"> and he knows</font>

1864
01:24:06,230 --> 01:24:12,200
this verification<font color="#E5E5E5"> value</font><font color="#CCCCCC"> it's</font>

1865
01:24:08,990 --> 01:24:14,480
not a<font color="#E5E5E5"> big</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> so and they would like</font>

1866
01:24:12,200 --> 01:24:18,160
<font color="#CCCCCC">to it to continue this discussion</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

1867
01:24:14,480 --> 01:24:22,280
<font color="#CCCCCC">main list</font><font color="#E5E5E5"> because it can be</font><font color="#CCCCCC"> very long</font>

1868
01:24:18,160 --> 01:24:24,200
<font color="#E5E5E5">okay yes</font><font color="#CCCCCC"> I'm gonna cheat yes sorry we're</font>

1869
01:24:22,280 --> 01:24:26,150
a bit short on time so yes let's take it

1870
01:24:24,200 --> 01:24:56,000
to the<font color="#CCCCCC"> mailing</font><font color="#E5E5E5"> list and move follow up</font>

1871
01:24:26,150 --> 01:24:58,460
<font color="#E5E5E5">privately all right thank you hello</font>

1872
01:24:56,000 --> 01:25:01,280
everyone I'm<font color="#E5E5E5"> the Nova gear I'm from the</font>

1873
01:24:58,460 --> 01:25:04,310
University<font color="#E5E5E5"> the Netherlands</font><font color="#CCCCCC"> I will be</font>

1874
01:25:01,280 --> 01:25:07,370
presenting<font color="#CCCCCC"> the truck for counter 12 so</font>

1875
01:25:04,310 --> 01:25:11,330
first of all what's<font color="#E5E5E5"> kangaroo 12 so let's</font>

1876
01:25:07,370 --> 01:25:13,519
have a look at<font color="#E5E5E5"> check 128</font><font color="#CCCCCC"> psych 128 use a</font>

1877
01:25:11,330 --> 01:25:16,490
<font color="#E5E5E5">sponsor insertion so basically you have</font>

1878
01:25:13,520 --> 01:25:18,290
your spawns on your right which is

1879
01:25:16,490 --> 01:25:20,540
divided into<font color="#CCCCCC"> part two parts the earth</font>

1880
01:25:18,290 --> 01:25:22,280
part<font color="#E5E5E5"> and the inner parts the inner part</font>

1881
01:25:20,540 --> 01:25:24,350
is<font color="#E5E5E5"> what guarantees the security of the</font>

1882
01:25:22,280 --> 01:25:26,599
scheme and in this pond construction

1883
01:25:24,350 --> 01:25:28,370
<font color="#CCCCCC">you're going to</font><font color="#E5E5E5"> spit your message into</font>

1884
01:25:26,600 --> 01:25:31,910
<font color="#E5E5E5">small blocks that you will absorb and</font>

1885
01:25:28,370 --> 01:25:34,610
between each absorption<font color="#CCCCCC"> you will apply a</font>

1886
01:25:31,910 --> 01:25:37,610
<font color="#CCCCCC">ROM function which is mixing up the</font>

1887
01:25:34,610 --> 01:25:39,410
inner part<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> other parts and</font><font color="#CCCCCC"> then</font>

1888
01:25:37,610 --> 01:25:43,460
once you've mixed up everything<font color="#E5E5E5"> you want</font>

1889
01:25:39,410 --> 01:25:46,610
to<font color="#E5E5E5"> extract your hash basically so</font>

1890
01:25:43,460 --> 01:25:49,880
basically<font color="#E5E5E5"> you extract all parts and then</font>

1891
01:25:46,610 --> 01:25:52,250
you mix again<font color="#E5E5E5"> and extract the point of</font>

1892
01:25:49,880 --> 01:25:53,930
this is<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can extract</font><font color="#E5E5E5"> as many bits as</font>

1893
01:25:52,250 --> 01:25:56,510
you want<font color="#E5E5E5"> so that's why we call it an</font>

1894
01:25:53,930 --> 01:25:58,520
excellent able<font color="#CCCCCC"> output function because</font>

1895
01:25:56,510 --> 01:26:01,790
they are<font color="#E5E5E5"> lengths is arbitrary</font><font color="#CCCCCC"> as long as</font>

1896
01:25:58,520 --> 01:26:05,690
you take<font color="#CCCCCC"> a long enough in</font><font color="#E5E5E5"> the case of</font>

1897
01:26:01,790 --> 01:26:07,820
<font color="#CCCCCC">Shake 128</font><font color="#E5E5E5"> you use a</font><font color="#CCCCCC"> Kajaki</font><font color="#E5E5E5"> function</font>

1898
01:26:05,690 --> 01:26:11,870
which permutation<font color="#CCCCCC"> that has been</font><font color="#E5E5E5"> defined</font>

1899
01:26:07,820 --> 01:26:14,389
in<font color="#CCCCCC"> 250 Oh</font><font color="#E5E5E5"> Jo</font><font color="#CCCCCC"> so while sec 128 is quite</font>

1900
01:26:11,870 --> 01:26:17,300
nice by design<font color="#CCCCCC"> it does not allow the</font>

1901
01:26:14,390 --> 01:26:21,140
<font color="#CCCCCC">possibility of terrorism which makes it</font>

1902
01:26:17,300 --> 01:26:22,300
a<font color="#E5E5E5"> bit slow so we want to add some</font><font color="#CCCCCC"> sir it</font>

1903
01:26:21,140 --> 01:26:25,210
into that

1904
01:26:22,300 --> 01:26:28,270
using<font color="#E5E5E5"> congroo 12 so basically</font><font color="#CCCCCC"> convert 12</font>

1905
01:26:25,210 --> 01:26:32,740
is the<font color="#E5E5E5"> same idea but we apply a tree</font>

1906
01:26:28,270 --> 01:26:37,050
structure<font color="#E5E5E5"> with the sponge so you split</font>

1907
01:26:32,740 --> 01:26:40,059
your message<font color="#E5E5E5"> into block off</font><font color="#CCCCCC"> 8192 bytes</font>

1908
01:26:37,050 --> 01:26:44,020
<font color="#E5E5E5">so that you see in blue there and you</font>

1909
01:26:40,060 --> 01:26:45,580
will hash this small blocks into<font color="#E5E5E5"> what we</font>

1910
01:26:44,020 --> 01:26:48,700
call a chaining values that you see<font color="#CCCCCC"> in</font>

1911
01:26:45,580 --> 01:26:51,690
<font color="#E5E5E5">green there that will be 256 bytes and</font>

1912
01:26:48,700 --> 01:26:54,849
<font color="#CCCCCC">then you will hash the full thing again</font>

1913
01:26:51,690 --> 01:26:58,330
<font color="#CCCCCC">so we use the</font><font color="#E5E5E5"> same sponsor construction</font>

1914
01:26:54,850 --> 01:27:00,640
so we're also pretty<font color="#E5E5E5"> nice in</font><font color="#CCCCCC"> term of</font>

1915
01:26:58,330 --> 01:27:05,710
<font color="#E5E5E5">design and we reduce the</font><font color="#CCCCCC"> number of</font>

1916
01:27:00,640 --> 01:27:09,640
<font color="#E5E5E5">fronds of</font><font color="#CCCCCC"> Ketchikan</font><font color="#E5E5E5"> to 24 to 12 giving</font>

1917
01:27:05,710 --> 01:27:12,340
us already<font color="#E5E5E5"> a bit more speed</font><font color="#CCCCCC"> and as you</font>

1918
01:27:09,640 --> 01:27:15,760
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> longer the message the</font>

1919
01:27:12,340 --> 01:27:17,350
more<font color="#CCCCCC"> paracin you gain so and it also</font><font color="#E5E5E5"> if</font>

1920
01:27:15,760 --> 01:27:19,360
you have short message<font color="#E5E5E5"> you don't need to</font>

1921
01:27:17,350 --> 01:27:21,400
actually hash the other part so you

1922
01:27:19,360 --> 01:27:24,670
actually<font color="#E5E5E5"> don't have penalties for short</font>

1923
01:27:21,400 --> 01:27:28,920
message<font color="#E5E5E5"> so once you see that you start</font>

1924
01:27:24,670 --> 01:27:31,540
<font color="#E5E5E5">sinking what's the security of it so</font>

1925
01:27:28,920 --> 01:27:34,750
Congress<font color="#CCCCCC"> wealth is claimed</font><font color="#E5E5E5"> as secure as</font>

1926
01:27:31,540 --> 01:27:38,800
check 128 in all the words 128 bits of

1927
01:27:34,750 --> 01:27:40,990
security<font color="#CCCCCC"> it has because it's used as</font>

1928
01:27:38,800 --> 01:27:43,480
pawns construction you also<font color="#E5E5E5"> relies on</font>

1929
01:27:40,990 --> 01:27:46,389
the<font color="#CCCCCC"> generic</font><font color="#E5E5E5"> security of a sponge that</font>

1930
01:27:43,480 --> 01:27:49,269
<font color="#CCCCCC">has been provided by the attractive the</font>

1931
01:27:46,390 --> 01:27:53,140
<font color="#CCCCCC">pearl mode is based on secretory</font><font color="#E5E5E5"> hashing</font>

1932
01:27:49,270 --> 01:27:55,930
so it's also<font color="#E5E5E5"> proven secure bicycle check</font>

1933
01:27:53,140 --> 01:27:57,880
<font color="#CCCCCC">Jim once</font><font color="#E5E5E5"> again and on top of it we have</font>

1934
01:27:55,930 --> 01:28:00,070
<font color="#E5E5E5">the same run function as defined in</font>

1935
01:27:57,880 --> 01:28:03,520
<font color="#E5E5E5">Phipps your choice okay check</font><font color="#CCCCCC"> P but only</font>

1936
01:28:00,070 --> 01:28:05,080
<font color="#CCCCCC">weeds the 12 last roams this mean that</font>

1937
01:28:03,520 --> 01:28:07,210
the crypt analysis<font color="#E5E5E5"> that has</font><font color="#CCCCCC"> been applied</font>

1938
01:28:05,080 --> 01:28:10,950
<font color="#CCCCCC">to</font><font color="#E5E5E5"> it it's still</font><font color="#CCCCCC"> valid since like the</font>

1939
01:28:07,210 --> 01:28:13,660
last<font color="#CCCCCC"> ten years</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> moved on from</font>

1940
01:28:10,950 --> 01:28:17,050
<font color="#E5E5E5">safety margin which is rock-solid</font><font color="#CCCCCC"> to</font>

1941
01:28:13,660 --> 01:28:19,420
quite comfortable<font color="#E5E5E5"> still as a matter of</font>

1942
01:28:17,050 --> 01:28:24,220
fact if we have a look<font color="#E5E5E5"> at the 24 runs of</font>

1943
01:28:19,420 --> 01:28:25,300
<font color="#CCCCCC">shari here we still</font><font color="#E5E5E5"> are in</font><font color="#CCCCCC"> the middle of</font>

1944
01:28:24,220 --> 01:28:29,490
it

1945
01:28:25,300 --> 01:28:32,320
we have collision are over<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> roams</font>

1946
01:28:29,490 --> 01:28:34,719
<font color="#CCCCCC">but we also have collision over</font><font color="#E5E5E5"> 6 runs</font>

1947
01:28:32,320 --> 01:28:36,139
but with a smaller capacity so this

1948
01:28:34,720 --> 01:28:39,410
gives more degrees of

1949
01:28:36,140 --> 01:28:43,150
freedom<font color="#CCCCCC"> the difficulty of having the</font>

1950
01:28:39,410 --> 01:28:45,769
<font color="#CCCCCC">creation of</font><font color="#E5E5E5"> over capacity of 160 bit is</font>

1951
01:28:43,150 --> 01:28:49,339
estimated<font color="#E5E5E5"> if you take</font><font color="#CCCCCC"> a birthday</font><font color="#E5E5E5"> paradox</font>

1952
01:28:45,770 --> 01:28:52,400
as super 80<font color="#CCCCCC"> we also have</font><font color="#E5E5E5"> stream</font>

1953
01:28:49,340 --> 01:28:55,400
<font color="#E5E5E5">prediction over</font><font color="#CCCCCC"> 8 runs but we have 12 so</font>

1954
01:28:52,400 --> 01:28:58,820
it's fine<font color="#CCCCCC"> with the difficulty up to 2</font>

1955
01:28:55,400 --> 01:29:02,839
<font color="#CCCCCC">per 128 time it's also possible of the</font>

1956
01:28:58,820 --> 01:29:05,599
nine<font color="#CCCCCC"> rooms but the difficulty is 125 1</font>

1957
01:29:02,840 --> 01:29:07,640
to 2 per 256 time<font color="#E5E5E5"> so that's already</font>

1958
01:29:05,600 --> 01:29:10,790
above the security claims that's<font color="#E5E5E5"> very</font>

1959
01:29:07,640 --> 01:29:12,950
<font color="#E5E5E5">fine and there have been lots of so the</font>

1960
01:29:10,790 --> 01:29:17,810
<font color="#CCCCCC">particular is is being</font><font color="#E5E5E5"> done on</font><font color="#CCCCCC"> kachuck</font>

1961
01:29:12,950 --> 01:29:20,330
so that's<font color="#E5E5E5"> very nice we've seen that</font>

1962
01:29:17,810 --> 01:29:23,210
conclude<font color="#E5E5E5"> roll this pretty seeker let's</font>

1963
01:29:20,330 --> 01:29:26,030
see how fast it is<font color="#E5E5E5"> we have the</font><font color="#CCCCCC"> number of</font>

1964
01:29:23,210 --> 01:29:29,030
<font color="#E5E5E5">Thrones so it will logically take half</font>

1965
01:29:26,030 --> 01:29:32,210
the time<font color="#E5E5E5"> so it's twice faster</font><font color="#CCCCCC"> as checks</font>

1966
01:29:29,030 --> 01:29:35,230
128 and then once you take<font color="#E5E5E5"> longer inputs</font>

1967
01:29:32,210 --> 01:29:39,220
and the latest

1968
01:29:35,230 --> 01:29:41,809
<font color="#CCCCCC">skylake x processors only</font><font color="#E5E5E5"> using a VX</font>

1969
01:29:39,220 --> 01:29:45,920
instruction then you can get<font color="#E5E5E5"> down to</font>

1970
01:29:41,810 --> 01:29:48,050
0.55 cycles per byte<font color="#E5E5E5"> at that point the</font>

1971
01:29:45,920 --> 01:29:50,840
bottleneck is not the hashing anymore

1972
01:29:48,050 --> 01:29:56,090
<font color="#E5E5E5">but more the network connection and so</font>

1973
01:29:50,840 --> 01:29:59,150
on so why I<font color="#CCCCCC"> think it's an</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> I</font>

1974
01:29:56,090 --> 01:30:02,030
see that we could have it's<font color="#E5E5E5"> because it's</font>

1975
01:29:59,150 --> 01:30:05,960
on the<font color="#CCCCCC"> same basis as the</font><font color="#E5E5E5"> NIST</font><font color="#CCCCCC"> it's</font>

1976
01:30:02,030 --> 01:30:08,210
public design completely open it has

1977
01:30:05,960 --> 01:30:11,180
been the result<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Shah three</font>

1978
01:30:08,210 --> 01:30:13,390
international<font color="#E5E5E5"> competition</font><font color="#CCCCCC"> it survived</font>

1979
01:30:11,180 --> 01:30:16,070
<font color="#CCCCCC">ten years of cryptography</font><font color="#E5E5E5"> and</font>

1980
01:30:13,390 --> 01:30:20,150
cryptanalysis and<font color="#E5E5E5"> still will</font>

1981
01:30:16,070 --> 01:30:23,320
I hope<font color="#E5E5E5"> survive more it provides a really</font>

1982
01:30:20,150 --> 01:30:25,790
nice speed up with respect to sha-3

1983
01:30:23,320 --> 01:30:27,980
<font color="#E5E5E5">without wasting any cryptanalysis</font>

1984
01:30:25,790 --> 01:30:30,920
resource because what have<font color="#E5E5E5"> been done is</font>

1985
01:30:27,980 --> 01:30:35,360
a<font color="#CCCCCC"> path</font><font color="#E5E5E5"> still applies today to</font><font color="#CCCCCC"> get Chuck</font>

1986
01:30:30,920 --> 01:30:38,840
<font color="#E5E5E5">and</font><font color="#CCCCCC"> come go 12 and the pair</font><font color="#E5E5E5"> isms just</font>

1987
01:30:35,360 --> 01:30:41,360
scales with the<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> so you</font>

1988
01:30:38,840 --> 01:30:43,430
don't have to provide partner initial

1989
01:30:41,360 --> 01:30:48,410
parameters like I want to have convert

1990
01:30:43,430 --> 01:30:49,790
well with<font color="#CCCCCC"> 8 parallelism computing at the</font>

1991
01:30:48,410 --> 01:30:53,300
same time and so on<font color="#E5E5E5"> so</font>

1992
01:30:49,790 --> 01:30:55,600
very nice for more details I<font color="#E5E5E5"> can invite</font>

1993
01:30:53,300 --> 01:30:58,880
<font color="#E5E5E5">you to have a look at the current draft</font>

1994
01:30:55,600 --> 01:31:01,370
<font color="#E5E5E5">also</font><font color="#CCCCCC"> I will add that</font><font color="#E5E5E5"> there is a version</font>

1995
01:30:58,880 --> 01:31:05,530
<font color="#CCCCCC">two that will be</font><font color="#E5E5E5"> published online or a</font>

1996
01:31:01,370 --> 01:31:05,530
short leash<font color="#E5E5E5"> thank you for your attention</font>

1997
01:31:06,220 --> 01:31:14,600
<font color="#E5E5E5">thank you</font>

1998
01:31:07,610 --> 01:31:16,490
questions comments<font color="#CCCCCC"> from in wah</font><font color="#E5E5E5"> so I'll</font>

1999
01:31:14,600 --> 01:31:18,500
start off maybe<font color="#E5E5E5"> until people can get to</font>

2000
01:31:16,490 --> 01:31:22,990
the mic and<font color="#E5E5E5"> so you've half the number of</font>

2001
01:31:18,500 --> 01:31:25,040
rounds in yes<font color="#E5E5E5"> so what percentage of your</font>

2002
01:31:22,990 --> 01:31:29,150
performance<font color="#CCCCCC"> gain comes from</font><font color="#E5E5E5"> having the</font>

2003
01:31:25,040 --> 01:31:32,030
number<font color="#E5E5E5"> of rounds</font><font color="#CCCCCC"> we are at least</font><font color="#E5E5E5"> was</font>

2004
01:31:29,150 --> 01:31:33,920
twice faster<font color="#E5E5E5"> than check two so and then</font>

2005
01:31:32,030 --> 01:31:36,800
we have the cycle to the<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> yeah</font>

2006
01:31:33,920 --> 01:31:38,270
counts<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so it seems like something</font>

2007
01:31:36,800 --> 01:31:40,040
like 70<font color="#E5E5E5"> or 80</font><font color="#CCCCCC"> percent of your</font>

2008
01:31:38,270 --> 01:31:41,780
performance gain comes from<font color="#E5E5E5"> just</font><font color="#CCCCCC"> having</font>

2009
01:31:40,040 --> 01:31:44,000
the number<font color="#E5E5E5"> of rows no it also comes from</font>

2010
01:31:41,780 --> 01:31:47,179
the fact<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> are actually hashing in</font>

2011
01:31:44,000 --> 01:31:49,550
perils of blocks and<font color="#E5E5E5"> I'm just using the</font>

2012
01:31:47,180 --> 01:31:51,950
fact that we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> have to process every</font>

2013
01:31:49,550 --> 01:31:54,530
blocks one by one and one by<font color="#E5E5E5"> one</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> as</font>

2014
01:31:51,950 --> 01:31:57,050
<font color="#E5E5E5">a in check three or yeah</font><font color="#CCCCCC"> shy</font><font color="#E5E5E5"> quantity</font>

2015
01:31:54,530 --> 01:32:00,259
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> floor</font>

2016
01:31:57,050 --> 01:32:02,450
oh yes<font color="#CCCCCC"> so here is grilling so I would</font>

2017
01:32:00,260 --> 01:32:04,850
like<font color="#E5E5E5"> to know concrete or is basically</font>

2018
01:32:02,450 --> 01:32:06,530
like<font color="#E5E5E5"> primitive to construct the</font>

2019
01:32:04,850 --> 01:32:08,840
prototype<font color="#CCCCCC"> for hash</font><font color="#E5E5E5"> function</font>

2020
01:32:06,530 --> 01:32:10,670
or just a complete algorithm<font color="#CCCCCC"> it's a</font>

2021
01:32:08,840 --> 01:32:12,170
complete hash function<font color="#E5E5E5"> a complete</font>

2022
01:32:10,670 --> 01:32:15,410
<font color="#CCCCCC">extendible</font><font color="#E5E5E5"> or third function so you</font>

2023
01:32:12,170 --> 01:32:19,280
provide the message you can provide an

2024
01:32:15,410 --> 01:32:21,380
optional level<font color="#E5E5E5"> but that's if it's not</font>

2025
01:32:19,280 --> 01:32:23,330
<font color="#E5E5E5">provided then it's considered as empty</font>

2026
01:32:21,380 --> 01:32:30,770
and you provide the output<font color="#CCCCCC"> link that you</font>

2027
01:32:23,330 --> 01:32:32,630
<font color="#CCCCCC">wants okay</font><font color="#E5E5E5"> Nick Johnson Foundation it</font>

2028
01:32:30,770 --> 01:32:34,280
seems like you're combining two

2029
01:32:32,630 --> 01:32:37,190
different trade-offs<font color="#E5E5E5"> here one is oh</font>

2030
01:32:34,280 --> 01:32:41,269
sorry<font color="#E5E5E5"> to two innovations I guess one</font>

2031
01:32:37,190 --> 01:32:43,339
that improves speed with parallelism it

2032
01:32:41,270 --> 01:32:45,350
with no cost<font color="#E5E5E5"> and security yeah and a</font>

2033
01:32:43,340 --> 01:32:46,850
second trade-off which gives you<font color="#CCCCCC"> more</font>

2034
01:32:45,350 --> 01:32:49,220
speed at the cost of<font color="#CCCCCC"> additional security</font>

2035
01:32:46,850 --> 01:32:51,740
why combine these together why not<font color="#E5E5E5"> just</font>

2036
01:32:49,220 --> 01:32:58,040
offer a parallel construction<font color="#CCCCCC"> that uses</font>

2037
01:32:51,740 --> 01:32:59,330
the<font color="#CCCCCC"> existing number of rounds well if we</font>

2038
01:32:58,040 --> 01:33:02,650
want<font color="#CCCCCC"> to have a</font><font color="#E5E5E5"> very nice speed-up it's</font>

2039
01:32:59,330 --> 01:33:04,780
even better if we can actually<font color="#E5E5E5"> do</font>

2040
01:33:02,650 --> 01:33:09,159
the number<font color="#E5E5E5"> of runs like the current</font>

2041
01:33:04,780 --> 01:33:11,040
<font color="#CCCCCC">Tkaczyk</font><font color="#E5E5E5"> implementation with</font><font color="#CCCCCC"> 24 ohms is</font>

2042
01:33:09,159 --> 01:33:14,889
like really really<font color="#CCCCCC"> conservative and</font>

2043
01:33:11,040 --> 01:33:17,199
there is no lots of going down<font color="#E5E5E5"> to 12</font>

2044
01:33:14,890 --> 01:33:19,659
roms is there a reason that you believe

2045
01:33:17,199 --> 01:33:22,900
<font color="#E5E5E5">that your users</font><font color="#CCCCCC"> will be less will need</font>

2046
01:33:19,659 --> 01:33:25,179
less conservatism than general<font color="#E5E5E5"> consumers</font>

2047
01:33:22,900 --> 01:33:27,639
<font color="#E5E5E5">the secretary claim is the same so there</font>

2048
01:33:25,179 --> 01:33:30,699
is not<font color="#E5E5E5"> really less conservatism in that</font>

2049
01:33:27,640 --> 01:33:34,390
case like we<font color="#E5E5E5"> still</font><font color="#CCCCCC"> have 128 bits of</font>

2050
01:33:30,699 --> 01:33:35,860
security<font color="#E5E5E5"> that's under an assumption that</font>

2051
01:33:34,390 --> 01:33:39,340
reducing the<font color="#E5E5E5"> number of reigns doesn't</font>

2052
01:33:35,860 --> 01:33:42,059
<font color="#E5E5E5">weaken security yeah okay so it's not</font>

2053
01:33:39,340 --> 01:33:48,250
and it's<font color="#CCCCCC"> not an unconditional assumption</font>

2054
01:33:42,060 --> 01:33:49,840
well until proven contradict you able<font color="#CCCCCC"> to</font>

2055
01:33:48,250 --> 01:33:51,460
go back<font color="#CCCCCC"> to the slide with the</font>

2056
01:33:49,840 --> 01:33:55,090
performance measurements for a moment

2057
01:33:51,460 --> 01:33:58,030
that one yeah so so it looks<font color="#E5E5E5"> like you're</font>

2058
01:33:55,090 --> 01:34:00,580
<font color="#E5E5E5">getting comparing</font><font color="#CCCCCC"> lis the</font><font color="#E5E5E5"> shorter</font><font color="#CCCCCC"> looks</font>

2059
01:33:58,030 --> 01:34:03,130
longer<font color="#E5E5E5"> but you're getting at least 100</font>

2060
01:34:00,580 --> 01:34:07,269
percent speed-up yeah from<font color="#E5E5E5"> parallelism</font>

2061
01:34:03,130 --> 01:34:08,980
as well<font color="#E5E5E5"> yes I yeah I guess I I still</font>

2062
01:34:07,270 --> 01:34:10,540
don't understand<font color="#CCCCCC"> the justification</font><font color="#E5E5E5"> for</font>

2063
01:34:08,980 --> 01:34:12,190
the two changes<font color="#CCCCCC"> together</font><font color="#E5E5E5"> it seems to me</font>

2064
01:34:10,540 --> 01:34:15,280
like<font color="#E5E5E5"> it'd be a very</font><font color="#CCCCCC"> useful construction</font>

2065
01:34:12,190 --> 01:34:18,370
with standard<font color="#CCCCCC"> gear check well the</font>

2066
01:34:15,280 --> 01:34:21,940
<font color="#E5E5E5">standard code check would you would have</font>

2067
01:34:18,370 --> 01:34:25,030
the<font color="#E5E5E5"> same speed at check 128 for input</font>

2068
01:34:21,940 --> 01:34:28,540
<font color="#E5E5E5">that would be shorter</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 8,000 bytes</font>

2069
01:34:25,030 --> 01:34:30,550
basically and we actually<font color="#CCCCCC"> want to try</font><font color="#E5E5E5"> to</font>

2070
01:34:28,540 --> 01:34:33,340
make everything faster for<font color="#E5E5E5"> whatever the</font>

2071
01:34:30,550 --> 01:34:37,480
possibilities<font color="#E5E5E5"> so that's kind of a</font>

2072
01:34:33,340 --> 01:34:38,890
<font color="#CCCCCC">trade-off</font><font color="#E5E5E5"> thank you okay we're kind of</font>

2073
01:34:37,480 --> 01:34:40,718
<font color="#CCCCCC">over time actually we're already eating</font>

2074
01:34:38,890 --> 01:34:42,010
into people's break<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I think we'll</font>

2075
01:34:40,719 --> 01:34:43,600
need<font color="#E5E5E5"> to leave it there</font><font color="#CCCCCC"> and we can maybe</font>

2076
01:34:42,010 --> 01:34:44,739
take further discussion of<font color="#E5E5E5"> the draft to</font>

2077
01:34:43,600 --> 01:34:47,230
<font color="#E5E5E5">the list that's okay</font>

2078
01:34:44,739 --> 01:34:49,809
um thank<font color="#E5E5E5"> you from the chairs for</font>

2079
01:34:47,230 --> 01:34:52,959
<font color="#E5E5E5">attending this session</font><font color="#CCCCCC"> stay here if you</font>

2080
01:34:49,810 --> 01:34:56,199
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to attend</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next session which is</font>

2081
01:34:52,960 --> 01:34:58,060
<font color="#E5E5E5">TOS working group starting in</font><font color="#CCCCCC"> about 15</font>

2082
01:34:56,199 --> 01:34:59,589
minutes<font color="#CCCCCC"> and could we please have the</font>

2083
01:34:58,060 --> 01:35:00,850
blue sheets back to the front<font color="#E5E5E5"> police</font>

2084
01:34:59,590 --> 01:35:04,980
<font color="#E5E5E5">would somebody bring them down thank you</font>

2085
01:35:00,850 --> 01:35:04,980
<font color="#E5E5E5">thank you everyone thank you</font>

2086
01:35:07,310 --> 01:35:12,870
luckily unluckily I have a fun<font color="#CCCCCC"> place</font><font color="#E5E5E5"> so</font>

2087
01:35:10,800 --> 01:35:16,550
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> be elsewhere</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> good I'm gonna</font>

2088
01:35:12,870 --> 01:35:24,000
stay here<font color="#CCCCCC"> ya</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> so are you here</font>

2089
01:35:16,550 --> 01:35:27,150
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> you all we know there's a lot</font><font color="#CCCCCC"> of</font>

2090
01:35:24,000 --> 01:35:29,730
other stuff going<font color="#E5E5E5"> on at all because</font>

2091
01:35:27,150 --> 01:35:31,920
<font color="#CCCCCC">we've</font><font color="#E5E5E5"> been</font><font color="#CCCCCC"> in strike weeks</font><font color="#E5E5E5"> yes</font>

2092
01:35:29,730 --> 01:35:33,419
Acker was asking me you know<font color="#E5E5E5"> do you know</font>

2093
01:35:31,920 --> 01:35:36,270
what this<font color="#CCCCCC"> strike thing is that I said</font>

2094
01:35:33,420 --> 01:35:38,520
well I'm<font color="#CCCCCC"> not sure you</font><font color="#E5E5E5"> do but yeah thank</font>

2095
01:35:36,270 --> 01:35:41,120
you<font color="#CCCCCC"> start about this</font><font color="#E5E5E5"> about the ancients</font>

2096
01:35:38,520 --> 01:35:41,120
the ones<font color="#CCCCCC"> Noah</font>

