1
00:00:05,920 --> 00:00:08,800
is uh somebody wanting to make a come in

2
00:00:08,800 --> 00:00:12,360
at the queue or

3
00:00:22,320 --> 00:00:25,960
leave q alright

4
00:00:30,480 --> 00:00:33,519
i think we're pretty good

5
00:00:34,640 --> 00:00:36,399
i think we're about ready to get started

6
00:00:36,399 --> 00:00:42,160
here at uh ietf 114 in uh philadelphia

7
00:00:42,160 --> 00:00:45,360
thank you all for uh

8
00:00:45,360 --> 00:00:47,680
coming

9
00:00:50,879 --> 00:00:53,440
should we just

10
00:00:54,719 --> 00:00:58,480
we're we're missing one chair

11
00:00:58,480 --> 00:01:00,959
i think

12
00:01:11,439 --> 00:01:12,799
all right well we'll get started with

13
00:01:12,799 --> 00:01:14,479
some of the formalities here thank you

14
00:01:14,479 --> 00:01:17,360
uh for coming

15
00:01:17,600 --> 00:01:19,520
uh once again please check in with the

16
00:01:19,520 --> 00:01:21,520
on-site tool and wear a mask unless

17
00:01:21,520 --> 00:01:22,799
you're presenting at the front of the

18
00:01:22,799 --> 00:01:24,080
room

19
00:01:24,080 --> 00:01:26,560
and uh you are all probably familiar

20
00:01:26,560 --> 00:01:28,320
with the notewell

21
00:01:28,320 --> 00:01:31,040
that governs the

22
00:01:31,040 --> 00:01:34,320
various policies here at the ietf

23
00:01:34,320 --> 00:01:36,559
um

24
00:01:39,280 --> 00:01:42,240
and uh here's uh some code of conduct

25
00:01:42,240 --> 00:01:44,799
guidelines we'd like to

26
00:01:44,799 --> 00:01:46,880
uh remember remind you of to treat each

27
00:01:46,880 --> 00:01:49,680
other respect um and

28
00:01:49,680 --> 00:01:53,200
speak so you can be understood

29
00:01:53,200 --> 00:01:55,759
um

30
00:01:55,759 --> 00:01:57,680
these are

31
00:01:57,680 --> 00:02:00,479
generally good things

32
00:02:03,680 --> 00:02:05,600
we have a minute taker and hopefully

33
00:02:05,600 --> 00:02:08,080
there are some folks on uh jabber who

34
00:02:08,080 --> 00:02:10,160
can help us if there are things that

35
00:02:10,160 --> 00:02:13,280
need to be brought to the mic

36
00:02:14,080 --> 00:02:17,520
always remember to state your name

37
00:02:18,000 --> 00:02:19,920
all right do we have any agenda bashes i

38
00:02:19,920 --> 00:02:22,640
know we do have a request to move

39
00:02:22,640 --> 00:02:24,239
flags extension to the end to

40
00:02:24,239 --> 00:02:26,080
accommodate a presenter who could not

41
00:02:26,080 --> 00:02:27,200
make it here at the beginning of the

42
00:02:27,200 --> 00:02:28,560
meeting

43
00:02:28,560 --> 00:02:31,680
any other requests to

44
00:02:31,680 --> 00:02:33,920
uh

45
00:02:33,920 --> 00:02:37,238
for the agenda

46
00:02:39,440 --> 00:02:41,440
all right

47
00:02:41,440 --> 00:02:43,280
you want to go do talk about document

48
00:02:43,280 --> 00:02:44,959
status

49
00:02:44,959 --> 00:02:46,720
yeah so hey we got some stuff done since

50
00:02:46,720 --> 00:02:50,519
last time believe it or not

51
00:02:51,040 --> 00:02:53,200
um we got dtls 1.3 out the door so

52
00:02:53,200 --> 00:02:54,800
thanks to everybody for that

53
00:02:54,800 --> 00:02:56,239
um ticket requests and exported

54
00:02:56,239 --> 00:02:56,900
authenticators

55
00:02:56,900 --> 00:02:58,720
[Applause]

56
00:02:58,720 --> 00:03:00,239
somebody jim reed asked me about when

57
00:03:00,239 --> 00:03:01,760
dtls was going to be done about two and

58
00:03:01,760 --> 00:03:03,680
a half years ago my crystal ball was

59
00:03:03,680 --> 00:03:05,360
really wrong by the way

60
00:03:05,360 --> 00:03:07,040
um we have two other drafts the

61
00:03:07,040 --> 00:03:09,840
remaining psk psk related drafts they're

62
00:03:09,840 --> 00:03:11,760
an off 48 done which basically means

63
00:03:11,760 --> 00:03:13,680
they should be published at any time now

64
00:03:13,680 --> 00:03:14,480
um

65
00:03:14,480 --> 00:03:16,080
we've got delegated credentials aka

66
00:03:16,080 --> 00:03:18,400
subsearch which i believe is in paul's

67
00:03:18,400 --> 00:03:20,000
on paul's plate so we need to make sure

68
00:03:20,000 --> 00:03:22,080
that he gets through and where he's at

69
00:03:22,080 --> 00:03:23,599
we don't have anything in itf last call

70
00:03:23,599 --> 00:03:24,640
right now

71
00:03:24,640 --> 00:03:26,879
um we have two drafts that we paused the

72
00:03:26,879 --> 00:03:28,799
cross and i resumption and tls flags

73
00:03:28,799 --> 00:03:30,000
extension

74
00:03:30,000 --> 00:03:32,080
waiting on implementations we can i

75
00:03:32,080 --> 00:03:32,879
think we're going to go ahead and

76
00:03:32,879 --> 00:03:34,000
revisit that

77
00:03:34,000 --> 00:03:36,319
um and right now we have um the rc for

78
00:03:36,319 --> 00:03:38,640
tls 1.2 and 1.3 that is out for work

79
00:03:38,640 --> 00:03:40,799
group last call right now that actually

80
00:03:40,799 --> 00:03:43,040
ends august 5th

81
00:03:43,040 --> 00:03:44,640
um and then everything else that we have

82
00:03:44,640 --> 00:03:48,239
in progress which we'll talk about today

83
00:03:48,239 --> 00:03:49,360
and i think that's it i think we're

84
00:03:49,360 --> 00:03:51,120
going to go to the the

85
00:03:51,120 --> 00:03:53,040
presentations and then we have a slide

86
00:03:53,040 --> 00:03:54,640
at the end so these are some scaled or

87
00:03:54,640 --> 00:03:56,400
expired working group drafts

88
00:03:56,400 --> 00:03:58,000
that kind of were adopted and then kind

89
00:03:58,000 --> 00:04:00,000
of got put by the wayside so we're going

90
00:04:00,000 --> 00:04:02,239
to try to kick off a discussion on list

91
00:04:02,239 --> 00:04:03,519
about whether we're going to try to

92
00:04:03,519 --> 00:04:05,599
bring those back or just let them

93
00:04:05,599 --> 00:04:09,159
gracefully die

94
00:04:25,199 --> 00:04:28,199
sure

95
00:04:34,000 --> 00:04:35,919
do i have a clicker or uh i think i do

96
00:04:35,919 --> 00:04:39,240
next slide

97
00:04:42,080 --> 00:04:43,520
all right i'll just

98
00:04:43,520 --> 00:04:44,720
okay

99
00:04:44,720 --> 00:04:47,199
uh hi i'm ben schwartz uh wow this

100
00:04:47,199 --> 00:04:48,560
sounds loud

101
00:04:48,560 --> 00:04:49,600
i

102
00:04:49,600 --> 00:04:53,440
uh recently joined as another editor or

103
00:04:53,440 --> 00:04:56,560
author on this draft and i'll present

104
00:04:56,560 --> 00:04:58,479
some updates on the changes to this

105
00:04:58,479 --> 00:05:00,479
draft in version six

106
00:05:00,479 --> 00:05:02,960
next slide

107
00:05:02,960 --> 00:05:04,960
so there are a bunch of major changes

108
00:05:04,960 --> 00:05:06,880
draft six is very different from draft

109
00:05:06,880 --> 00:05:08,840
five

110
00:05:08,840 --> 00:05:10,800
uh okay

111
00:05:10,800 --> 00:05:13,759
one big difference is with profile ids

112
00:05:13,759 --> 00:05:16,080
previously it was not uh these were just

113
00:05:16,080 --> 00:05:18,800
kind of free form now there's a reserved

114
00:05:18,800 --> 00:05:21,280
subset of these there's an iana registry

115
00:05:21,280 --> 00:05:23,280
another really important change is that

116
00:05:23,280 --> 00:05:25,759
ctls is no longer specified as a

117
00:05:25,759 --> 00:05:27,919
compression layer instead this draft

118
00:05:27,919 --> 00:05:32,400
specifies ctls as a protocol generator

119
00:05:32,400 --> 00:05:35,039
so you define a profile and each profile

120
00:05:35,039 --> 00:05:38,800
defines a unique tls like protocol

121
00:05:38,800 --> 00:05:40,960
but it is not a compression system it is

122
00:05:40,960 --> 00:05:45,840
a new compact tls protocol

123
00:05:45,919 --> 00:05:48,479
related to that there are now binary

124
00:05:48,479 --> 00:05:50,880
objects describing the templates

125
00:05:50,880 --> 00:05:52,800
and finally there's a new system of

126
00:05:52,800 --> 00:05:54,720
handshake framing i'll have i have

127
00:05:54,720 --> 00:05:55,919
slides to go through each of those

128
00:05:55,919 --> 00:05:58,319
points next

129
00:05:58,319 --> 00:05:59,440
so

130
00:05:59,440 --> 00:06:03,840
the profile ids as byte strings

131
00:06:03,840 --> 00:06:06,880
profile ids are now defined as sequences

132
00:06:06,880 --> 00:06:09,199
of bytes 1 to 255.

133
00:06:09,199 --> 00:06:12,160
if there isn't one specified that means

134
00:06:12,160 --> 00:06:15,120
you're using default ctls in other words

135
00:06:15,120 --> 00:06:16,720
you're using

136
00:06:16,720 --> 00:06:19,680
the ctls syntax but you haven't

137
00:06:19,680 --> 00:06:22,479
subsetted the tls standard in any other

138
00:06:22,479 --> 00:06:24,720
way

139
00:06:24,720 --> 00:06:28,400
if you use a short id an id whose length

140
00:06:28,400 --> 00:06:32,000
is four bytes or less that is subject to

141
00:06:32,000 --> 00:06:34,960
ayanna registration and in that case

142
00:06:34,960 --> 00:06:37,600
your template only includes the profile

143
00:06:37,600 --> 00:06:40,639
id the recipient has to understand it

144
00:06:40,639 --> 00:06:42,720
has to recognize it as being something

145
00:06:42,720 --> 00:06:46,160
it already knows from the iana registry

146
00:06:46,160 --> 00:06:49,120
so that means these can only be used in

147
00:06:49,120 --> 00:06:51,520
cases where the server knows that the

148
00:06:51,520 --> 00:06:53,680
client is going to be sufficiently up to

149
00:06:53,680 --> 00:06:55,440
date that it's gotten this entry from

150
00:06:55,440 --> 00:06:57,919
the iana registry

151
00:06:57,919 --> 00:07:00,639
longer profile ids longer than four

152
00:07:00,639 --> 00:07:03,039
bytes are essentially

153
00:07:03,039 --> 00:07:04,800
uh

154
00:07:04,800 --> 00:07:06,880
pri well they're they're not registered

155
00:07:06,880 --> 00:07:09,039
they're free for anybody to use there's

156
00:07:09,039 --> 00:07:11,039
they only have significance within a

157
00:07:11,039 --> 00:07:12,720
specific deployment

158
00:07:12,720 --> 00:07:13,599
and

159
00:07:13,599 --> 00:07:16,319
the profile then after the profile id

160
00:07:16,319 --> 00:07:18,479
proceeds to lay out all the information

161
00:07:18,479 --> 00:07:20,160
that's required to understand what that

162
00:07:20,160 --> 00:07:21,759
profile id means

163
00:07:21,759 --> 00:07:24,240
next slide

164
00:07:24,240 --> 00:07:27,199
okay ctls is no longer a compression

165
00:07:27,199 --> 00:07:29,039
layer specifically

166
00:07:29,039 --> 00:07:32,000
the previous drafts of ctls structured

167
00:07:32,000 --> 00:07:34,240
ctls as a layer that sat basically

168
00:07:34,240 --> 00:07:37,199
between tls and its transport so in

169
00:07:37,199 --> 00:07:39,440
principle you could take a totally

170
00:07:39,440 --> 00:07:42,880
standard tls 1.3 stream and then like

171
00:07:42,880 --> 00:07:45,199
maybe even literally in a middle box or

172
00:07:45,199 --> 00:07:47,360
in some sort of middleware you could

173
00:07:47,360 --> 00:07:49,039
take that encrypted stream and and

174
00:07:49,039 --> 00:07:50,960
convert it into a ctls stream and you

175
00:07:50,960 --> 00:07:53,280
could convert it back on the other side

176
00:07:53,280 --> 00:07:54,800
uh it was

177
00:07:54,800 --> 00:07:56,240
a transformation that didn't require

178
00:07:56,240 --> 00:07:58,319
access to any of the secrets associated

179
00:07:58,319 --> 00:08:01,199
with the connection

180
00:08:01,199 --> 00:08:03,520
that has positives and negatives we can

181
00:08:03,520 --> 00:08:06,720
talk about it but it seems like the the

182
00:08:06,720 --> 00:08:10,000
net consensus after the last discussion

183
00:08:10,000 --> 00:08:10,800
was

184
00:08:10,800 --> 00:08:12,560
that we would rather have ctos

185
00:08:12,560 --> 00:08:14,960
authenticate its own transcript instead

186
00:08:14,960 --> 00:08:17,759
of reconstructing a tls transcript and

187
00:08:17,759 --> 00:08:19,840
authenticating that so the new draft

188
00:08:19,840 --> 00:08:22,400
does this it authenticates its own

189
00:08:22,400 --> 00:08:24,560
transcript reconstruction is therefore

190
00:08:24,560 --> 00:08:26,319
no longer an implementation requirement

191
00:08:26,319 --> 00:08:28,639
you can implement ctls without

192
00:08:28,639 --> 00:08:30,879
having to reconstruct the the

193
00:08:30,879 --> 00:08:33,599
corresponding standard tls

194
00:08:33,599 --> 00:08:35,360
handshake but

195
00:08:35,360 --> 00:08:37,039
this has its own problem ctls

196
00:08:37,039 --> 00:08:39,360
transcripts are very condensed because

197
00:08:39,360 --> 00:08:42,000
they omit a bunch of information that's

198
00:08:42,000 --> 00:08:43,279
very important on the assumption that

199
00:08:43,279 --> 00:08:46,160
both sides already know it and so now

200
00:08:46,160 --> 00:08:48,480
at least in some use cases we want to

201
00:08:48,480 --> 00:08:50,640
make sure that both sides actually agree

202
00:08:50,640 --> 00:08:52,560
on that information that wasn't

203
00:08:52,560 --> 00:08:54,720
exchanged because it they somehow was

204
00:08:54,720 --> 00:08:56,880
was already configured ahead of time and

205
00:08:56,880 --> 00:08:58,720
to make sure that it matches we've

206
00:08:58,720 --> 00:09:00,240
adopted this

207
00:09:00,240 --> 00:09:03,279
solution in this draft where we take the

208
00:09:03,279 --> 00:09:04,880
shared information the pre-shared

209
00:09:04,880 --> 00:09:06,959
information which we call the template

210
00:09:06,959 --> 00:09:09,760
and we prepend it to the transcript so

211
00:09:09,760 --> 00:09:11,279
it's present in the transcript on both

212
00:09:11,279 --> 00:09:13,360
sides and so if there's any disagreement

213
00:09:13,360 --> 00:09:15,200
about that the handshake will fail

214
00:09:15,200 --> 00:09:17,680
next slide

215
00:09:18,399 --> 00:09:19,760
of course putting the template in the

216
00:09:19,760 --> 00:09:21,360
transcript and then hashing it into the

217
00:09:21,360 --> 00:09:22,959
finished message means that both sides

218
00:09:22,959 --> 00:09:25,600
have to agree on it exactly and in draft

219
00:09:25,600 --> 00:09:26,959
five and prior the template was

220
00:09:26,959 --> 00:09:29,360
described as a json object i can imagine

221
00:09:29,360 --> 00:09:31,360
that nobody here would be very excited

222
00:09:31,360 --> 00:09:32,880
about trying to figure out how to get

223
00:09:32,880 --> 00:09:36,399
byte exact hashes of json objects that

224
00:09:36,399 --> 00:09:40,080
are being passed around so in this draft

225
00:09:40,080 --> 00:09:42,080
there's still a json format defined but

226
00:09:42,080 --> 00:09:43,680
there is also

227
00:09:43,680 --> 00:09:44,560
a

228
00:09:44,560 --> 00:09:47,440
consistent reproducible binary format

229
00:09:47,440 --> 00:09:50,160
defined for the templates that allows us

230
00:09:50,160 --> 00:09:50,880
to

231
00:09:50,880 --> 00:09:54,800
consistently hash it into the template

232
00:09:56,720 --> 00:09:59,839
and finally there's a new system for

233
00:09:59,839 --> 00:10:01,600
framing the handshake previous drafts

234
00:10:01,600 --> 00:10:03,600
were a little bit ambiguous i think

235
00:10:03,600 --> 00:10:04,399
about

236
00:10:04,399 --> 00:10:07,360
how the handshake was framed we've

237
00:10:07,360 --> 00:10:10,240
decided to cover all our bases basically

238
00:10:10,240 --> 00:10:11,200
by

239
00:10:11,200 --> 00:10:12,320
supporting

240
00:10:12,320 --> 00:10:13,279
both

241
00:10:13,279 --> 00:10:16,560
a full-size handshake option which

242
00:10:16,560 --> 00:10:18,320
allows you to send giant handshake

243
00:10:18,320 --> 00:10:20,800
messages and fragment them in dtls

244
00:10:20,800 --> 00:10:23,040
reorder them have them be reassembled in

245
00:10:23,040 --> 00:10:25,040
the right order all of that good stuff

246
00:10:25,040 --> 00:10:27,279
but in in the case where you don't need

247
00:10:27,279 --> 00:10:29,040
gigantic handshake messages you can

248
00:10:29,040 --> 00:10:32,240
disable all of that and save a few bytes

249
00:10:32,240 --> 00:10:34,079
and just have each of your handshake

250
00:10:34,079 --> 00:10:35,680
messages in a single

251
00:10:35,680 --> 00:10:37,839
record

252
00:10:37,839 --> 00:10:39,920
so

253
00:10:39,920 --> 00:10:41,760
this draft is definitely still a work in

254
00:10:41,760 --> 00:10:44,000
progress there are a lot of open

255
00:10:44,000 --> 00:10:46,160
interesting questions that i've i've

256
00:10:46,160 --> 00:10:47,519
attempted to highlight some of them here

257
00:10:47,519 --> 00:10:48,959
but there's there's a lot more details

258
00:10:48,959 --> 00:10:50,880
open in the draft a lot of

259
00:10:50,880 --> 00:10:52,720
uh highlighted open issue or open

260
00:10:52,720 --> 00:10:54,399
question tags

261
00:10:54,399 --> 00:10:55,839
in the draft so i would encourage

262
00:10:55,839 --> 00:10:57,839
anybody who's interested in this to

263
00:10:57,839 --> 00:10:59,760
read the draft and and think for

264
00:10:59,760 --> 00:11:01,680
yourself and maybe help the editors

265
00:11:01,680 --> 00:11:05,519
think through some of these questions

266
00:11:13,440 --> 00:11:15,440
uh i wanted to specifically thank ilari

267
00:11:15,440 --> 00:11:16,800
leo savara

268
00:11:16,800 --> 00:11:20,000
who uh who made a bunch of very very

269
00:11:20,000 --> 00:11:21,519
detailed and helpful suggestions on the

270
00:11:21,519 --> 00:11:24,000
mailing list

271
00:11:25,600 --> 00:11:28,720
uh i think i'm up yeah um first ben

272
00:11:28,720 --> 00:11:30,079
thanks i want to thank you for picking

273
00:11:30,079 --> 00:11:32,079
this up um uh we've been i mean i've

274
00:11:32,079 --> 00:11:32,959
been a little swamped and i really

275
00:11:32,959 --> 00:11:34,800
appreciated you like

276
00:11:34,800 --> 00:11:36,720
picking the ball up sorry

277
00:11:36,720 --> 00:11:37,760
um

278
00:11:37,760 --> 00:11:39,279
so i think this first point yeah i think

279
00:11:39,279 --> 00:11:41,440
that the answer is almost certainly what

280
00:11:41,440 --> 00:11:43,200
you have listed here which is that if we

281
00:11:43,200 --> 00:11:44,800
want a compressed electric curves which

282
00:11:44,800 --> 00:11:47,120
just define new code points um after all

283
00:11:47,120 --> 00:11:48,320
we already have compressed electric

284
00:11:48,320 --> 00:11:51,600
curves for x25519 and x448 they just

285
00:11:51,600 --> 00:11:53,839
come that way so i think with your p26c

286
00:11:53,839 --> 00:11:55,839
if anyone still cares use discourage

287
00:11:55,839 --> 00:11:57,519
watching the press is the right answer

288
00:11:57,519 --> 00:11:58,399
um

289
00:11:58,399 --> 00:12:00,000
and of course you know tails 1.3 doesn't

290
00:12:00,000 --> 00:12:01,920
have very many curves left anyway

291
00:12:01,920 --> 00:12:02,959
um

292
00:12:02,959 --> 00:12:04,079
i'm not sure how i feel about the rest

293
00:12:04,079 --> 00:12:06,079
of these um

294
00:12:06,079 --> 00:12:07,360
uh

295
00:12:07,360 --> 00:12:08,639
i'm a little scared about the admitting

296
00:12:08,639 --> 00:12:11,440
of the messages to be honest um uh

297
00:12:11,440 --> 00:12:14,800
but i think i'll i'll take that offline

298
00:12:14,800 --> 00:12:16,800
uh so i think a mid-empty messages point

299
00:12:16,800 --> 00:12:18,160
i'll just point out that that is text

300
00:12:18,160 --> 00:12:20,000
that is in the draft right now

301
00:12:20,000 --> 00:12:21,519
the draft currently says that empty

302
00:12:21,519 --> 00:12:23,839
messages can be omitted but it also has

303
00:12:23,839 --> 00:12:25,600
a question in the draft about whether

304
00:12:25,600 --> 00:12:27,360
this is going to work right so that was

305
00:12:27,360 --> 00:12:28,480
probably something i wrote you know as

306
00:12:28,480 --> 00:12:31,040
half asleep

307
00:12:34,079 --> 00:12:37,440
i forgot to check in oops

308
00:12:37,440 --> 00:12:38,480
um

309
00:12:38,480 --> 00:12:40,320
one of one of the things that hillary

310
00:12:40,320 --> 00:12:42,720
also raised was the relationship to ddls

311
00:12:42,720 --> 00:12:45,680
1.3 and initially we wanted to

312
00:12:45,680 --> 00:12:48,720
have it defined in a way that um

313
00:12:48,720 --> 00:12:50,959
it works the compression works for both

314
00:12:50,959 --> 00:12:53,360
ddls and dls

315
00:12:53,360 --> 00:12:54,880
because for

316
00:12:54,880 --> 00:12:56,399
apparent reasons

317
00:12:56,399 --> 00:12:57,920
because the protocols at the hancheck

318
00:12:57,920 --> 00:13:01,519
layer very very similar

319
00:13:02,160 --> 00:13:04,399
but we i think that's also an open issue

320
00:13:04,399 --> 00:13:06,800
that we hadn't really gotten to yet we

321
00:13:06,800 --> 00:13:09,040
had at one point in time we had worked

322
00:13:09,040 --> 00:13:10,000
on the

323
00:13:10,000 --> 00:13:12,240
on the framing format from the

324
00:13:12,240 --> 00:13:14,240
underlying record layer framing

325
00:13:14,240 --> 00:13:16,480
uh and changed that in numerous times

326
00:13:16,480 --> 00:13:17,519
but uh

327
00:13:17,519 --> 00:13:19,040
i think that's

328
00:13:19,040 --> 00:13:21,519
should be added to that list

329
00:13:21,519 --> 00:13:23,440
so i'm not sure i understand uh i'll

330
00:13:23,440 --> 00:13:24,880
note this is a conversation between the

331
00:13:24,880 --> 00:13:26,959
editors so maybe it can happen offline

332
00:13:26,959 --> 00:13:30,079
but uh i do think that the current draft

333
00:13:30,079 --> 00:13:31,760
uh essentially

334
00:13:31,760 --> 00:13:33,040
the current draft is no longer

335
00:13:33,040 --> 00:13:34,639
compression layer it's its own protocol

336
00:13:34,639 --> 00:13:37,760
but it is essentially a a system for

337
00:13:37,760 --> 00:13:40,160
generating both streaming protocols

338
00:13:40,160 --> 00:13:42,560
streaming security protocols like tls

339
00:13:42,560 --> 00:13:43,519
and

340
00:13:43,519 --> 00:13:45,279
datagram oriented security protocols

341
00:13:45,279 --> 00:13:47,360
like dtls i do believe they're both

342
00:13:47,360 --> 00:13:49,040
fully covered now

343
00:13:49,040 --> 00:13:50,160
right uh

344
00:13:50,160 --> 00:13:52,240
and that that was an intention and then

345
00:13:52,240 --> 00:13:54,320
uh ilari raised that question because he

346
00:13:54,320 --> 00:13:56,240
was in his email he was saying that this

347
00:13:56,240 --> 00:13:57,760
is he doesn't see

348
00:13:57,760 --> 00:14:00,399
the the need for this um where i

349
00:14:00,399 --> 00:14:02,480
actually see the need i'm not

350
00:14:02,480 --> 00:14:04,079
entirely sure whether we are fully there

351
00:14:04,079 --> 00:14:05,360
and specifying

352
00:14:05,360 --> 00:14:07,680
sort of the functionality for both dds

353
00:14:07,680 --> 00:14:10,399
and uh tls but um

354
00:14:10,399 --> 00:14:12,000
yeah i think that's something

355
00:14:12,000 --> 00:14:14,240
prototyping will help whether we whether

356
00:14:14,240 --> 00:14:16,959
we're really there yet thanks i i

357
00:14:16,959 --> 00:14:18,800
interpreted that message as actually

358
00:14:18,800 --> 00:14:21,839
supporting the the the work to

359
00:14:21,839 --> 00:14:23,600
to to make sure that it was clear that

360
00:14:23,600 --> 00:14:28,600
this could be used uh in both okay

361
00:14:31,760 --> 00:14:34,079
martin thompson uh so the empty messages

362
00:14:34,079 --> 00:14:37,199
one bothers me a little bit um we have

363
00:14:37,199 --> 00:14:39,040
i think it's end of early data is

364
00:14:39,040 --> 00:14:40,720
probably the one that bothers me the

365
00:14:40,720 --> 00:14:41,839
most here

366
00:14:41,839 --> 00:14:42,800
we

367
00:14:42,800 --> 00:14:44,880
we need that one and we need to know

368
00:14:44,880 --> 00:14:47,120
that it's there because that's a signal

369
00:14:47,120 --> 00:14:48,880
that we use to

370
00:14:48,880 --> 00:14:51,040
to determine the

371
00:14:51,040 --> 00:14:53,519
transition point it's not necessary in

372
00:14:53,519 --> 00:14:54,240
the

373
00:14:54,240 --> 00:14:56,639
datagram versions but it is necessary in

374
00:14:56,639 --> 00:14:58,399
the stream versions otherwise we

375
00:14:58,399 --> 00:14:59,760
wouldn't have added it

376
00:14:59,760 --> 00:15:02,399
so um

377
00:15:02,399 --> 00:15:04,639
i think we can't omit them

378
00:15:04,639 --> 00:15:06,160
and it's probably better not to worry

379
00:15:06,160 --> 00:15:07,519
about that sort of thing okay

380
00:15:07,519 --> 00:15:10,560
optimization uh i i think that that

381
00:15:10,560 --> 00:15:12,480
sounds like a strong argument

382
00:15:12,480 --> 00:15:14,639
uh and the other one that i got up to

383
00:15:14,639 --> 00:15:17,279
speak about was the versioning uh as

384
00:15:17,279 --> 00:15:19,440
long as you have some sort of context

385
00:15:19,440 --> 00:15:21,600
string that goes into the transcript

386
00:15:21,600 --> 00:15:23,360
you can change it later

387
00:15:23,360 --> 00:15:24,639
you don't have to worry about putting a

388
00:15:24,639 --> 00:15:26,320
version number in anywhere or anything

389
00:15:26,320 --> 00:15:27,760
like that one just change the context

390
00:15:27,760 --> 00:15:30,079
string

391
00:15:30,079 --> 00:15:32,240
and i think that'll be fine

392
00:15:32,240 --> 00:15:34,320
yeah we we did put a version number in

393
00:15:34,320 --> 00:15:36,399
uh at your at your request more or less

394
00:15:36,399 --> 00:15:38,240
um yeah i i think it's i like having a

395
00:15:38,240 --> 00:15:40,399
version number yeah i mean

396
00:15:40,399 --> 00:15:43,519
whichever way you do it um the

397
00:15:43,519 --> 00:15:45,120
the problem that you need to solve and

398
00:15:45,120 --> 00:15:46,560
i'm not sure if you've worked through

399
00:15:46,560 --> 00:15:47,680
all of that is that if you have a

400
00:15:47,680 --> 00:15:48,639
version number you have to have

401
00:15:48,639 --> 00:15:51,040
expectations about how people handle a

402
00:15:51,040 --> 00:15:53,199
version number they don't understand

403
00:15:53,199 --> 00:15:56,160
which i imagine at this point is

404
00:15:56,160 --> 00:15:57,839
don't use the

405
00:15:57,839 --> 00:16:01,600
thing at all yeah yeah

406
00:16:02,320 --> 00:16:03,920
hey steven farrell oh sorry i'm like

407
00:16:03,920 --> 00:16:06,560
that am i actually yes i am

408
00:16:06,560 --> 00:16:08,800
so now you mentioned that

409
00:16:08,800 --> 00:16:10,560
instead of any compression

410
00:16:10,560 --> 00:16:12,079
there it's now generating different

411
00:16:12,079 --> 00:16:14,240
protocols

412
00:16:14,240 --> 00:16:15,600
will the security properties of all of

413
00:16:15,600 --> 00:16:18,720
those be the same or subtly different or

414
00:16:18,720 --> 00:16:21,839
could you make one horribly broken

415
00:16:21,839 --> 00:16:24,079
uh i think ecker is going to answer your

416
00:16:24,079 --> 00:16:25,519
question

417
00:16:25,519 --> 00:16:27,199
um the compression doesn't affect that

418
00:16:27,199 --> 00:16:28,720
one way or the other all the analyses

419
00:16:28,720 --> 00:16:30,079
that these that i know of were done on a

420
00:16:30,079 --> 00:16:32,240
symbolic level assuming that ignoring

421
00:16:32,240 --> 00:16:33,519
how things were worked and right in the

422
00:16:33,519 --> 00:16:34,320
wire

423
00:16:34,320 --> 00:16:36,480
so um so it is plot so like let me need

424
00:16:36,480 --> 00:16:38,320
to be clear as far as i know it is it

425
00:16:38,320 --> 00:16:40,079
might be possible to produce a profile

426
00:16:40,079 --> 00:16:41,600
that was horribly broken where you say

427
00:16:41,600 --> 00:16:43,360
like all the max for zero or something

428
00:16:43,360 --> 00:16:44,560
but um i do not believe there's

429
00:16:44,560 --> 00:16:47,518
compression not affects that

430
00:16:47,600 --> 00:16:49,360
sure okay but

431
00:16:49,360 --> 00:16:50,639
maybe our last question different the

432
00:16:50,639 --> 00:16:54,079
goal is still that all of the

433
00:16:54,320 --> 00:16:56,399
same options here will have roughly the

434
00:16:56,399 --> 00:16:57,920
same security properties as tls one

435
00:16:57,920 --> 00:16:59,519
three

436
00:16:59,519 --> 00:17:02,560
i think that's that is right um

437
00:17:02,560 --> 00:17:05,520
we we do expect to to have some formal

438
00:17:05,520 --> 00:17:08,000
analysis although it's it's very tricky

439
00:17:08,000 --> 00:17:10,240
i think to figure out what exactly the

440
00:17:10,240 --> 00:17:12,160
question is so let me just like try to

441
00:17:12,160 --> 00:17:14,079
narrow that very slightly um

442
00:17:14,079 --> 00:17:16,000
there were a number of proposals to make

443
00:17:16,000 --> 00:17:16,959
um

444
00:17:16,959 --> 00:17:19,280
uh so i think roughly he's doing some

445
00:17:19,280 --> 00:17:21,679
work here so it's a concrete example um

446
00:17:21,679 --> 00:17:22,799
supposing that you make the

447
00:17:22,799 --> 00:17:24,000
transformation that some people try to

448
00:17:24,000 --> 00:17:25,760
make which is you remove the finish max

449
00:17:25,760 --> 00:17:27,199
and you replace them and you rely

450
00:17:27,199 --> 00:17:29,360
entirely on the aed then you don't have

451
00:17:29,360 --> 00:17:31,520
um they don't have um you see between

452
00:17:31,520 --> 00:17:33,600
the uh the key key exchange and the and

453
00:17:33,600 --> 00:17:35,280
the hint and the

454
00:17:35,280 --> 00:17:36,400
encryption layer that we ordered nearly

455
00:17:36,400 --> 00:17:38,000
what right and so under those

456
00:17:38,000 --> 00:17:39,280
circumstances for instance it would not

457
00:17:39,280 --> 00:17:42,720
be safe to replace um the cypher suite

458
00:17:42,720 --> 00:17:44,080
with one that had a very short map as

459
00:17:44,080 --> 00:17:45,840
well whereas it would be it would be

460
00:17:45,840 --> 00:17:48,400
quasi-safe with those 1.3 as long as you

461
00:17:48,400 --> 00:17:50,799
know what you're doing

462
00:17:50,799 --> 00:17:52,400
quasi by which i mean like of course you

463
00:17:52,400 --> 00:17:55,280
have a short mac so you get what you get

464
00:17:55,280 --> 00:17:57,120
i think jonathan should be nice yeah

465
00:17:57,120 --> 00:18:00,918
jonathan's next thank you

466
00:18:03,520 --> 00:18:05,760
can you hear me

467
00:18:05,760 --> 00:18:08,400
yes yes so

468
00:18:08,400 --> 00:18:09,919
two two things

469
00:18:09,919 --> 00:18:10,720
one

470
00:18:10,720 --> 00:18:12,240
um i actually

471
00:18:12,240 --> 00:18:13,840
spoke with punch out i don't really care

472
00:18:13,840 --> 00:18:16,720
if we emit empty messages per se

473
00:18:16,720 --> 00:18:18,559
just so long as there's only one valid

474
00:18:18,559 --> 00:18:19,919
way of doing it

475
00:18:19,919 --> 00:18:23,919
like either everyone must omit or no one

476
00:18:23,919 --> 00:18:26,720
may ever admit omit is fine

477
00:18:26,720 --> 00:18:28,559
um but just like

478
00:18:28,559 --> 00:18:30,799
even if you say both must be accepted

479
00:18:30,799 --> 00:18:32,880
people won't implement that

480
00:18:32,880 --> 00:18:36,320
um and with respect to formal analysis i

481
00:18:36,320 --> 00:18:37,919
think the only

482
00:18:37,919 --> 00:18:39,200
version

483
00:18:39,200 --> 00:18:40,240
that

484
00:18:40,240 --> 00:18:42,080
uh the the only analysis that i'm aware

485
00:18:42,080 --> 00:18:44,480
of that actually models the wire

486
00:18:44,480 --> 00:18:45,600
format

487
00:18:45,600 --> 00:18:48,160
is the one we did with tls one three i

488
00:18:48,160 --> 00:18:49,679
think all of the others already emitted

489
00:18:49,679 --> 00:18:51,120
the wire format

490
00:18:51,120 --> 00:18:53,200
um so given that this is mostly a wire

491
00:18:53,200 --> 00:18:55,039
format change i think that's where you'd

492
00:18:55,039 --> 00:18:58,559
have to start performing analysis

493
00:19:02,960 --> 00:19:04,559
um there were two other things we

494
00:19:04,559 --> 00:19:05,600
enabled

495
00:19:05,600 --> 00:19:07,440
abstinent performance analysis and maybe

496
00:19:07,440 --> 00:19:08,960
we should just

497
00:19:08,960 --> 00:19:10,720
do it the other way around we describe

498
00:19:10,720 --> 00:19:13,120
it and then um have the community like

499
00:19:13,120 --> 00:19:16,160
kartik and uh jonathan to to do a formal

500
00:19:16,160 --> 00:19:18,960
analysis analysis is

501
00:19:18,960 --> 00:19:20,160
the

502
00:19:20,160 --> 00:19:22,559
use of the randomness of random numbers

503
00:19:22,559 --> 00:19:25,520
initially in client hello and cervelo uh

504
00:19:25,520 --> 00:19:27,600
that was we debated whether we can get

505
00:19:27,600 --> 00:19:29,200
rid of those um

506
00:19:29,200 --> 00:19:31,760
and the other one was to omit the

507
00:19:31,760 --> 00:19:34,080
finished message um

508
00:19:34,080 --> 00:19:35,840
and

509
00:19:35,840 --> 00:19:37,600
that may be another

510
00:19:37,600 --> 00:19:38,640
sort of

511
00:19:38,640 --> 00:19:41,360
exploration because those would be

512
00:19:41,360 --> 00:19:43,679
actually some optimizations in terms of

513
00:19:43,679 --> 00:19:46,160
messages being transmitted as well

514
00:19:46,160 --> 00:19:48,160
i don't know if that

515
00:19:48,160 --> 00:19:50,080
is captured in in one of the lists

516
00:19:50,080 --> 00:19:51,919
because we had those discussions earlier

517
00:19:51,919 --> 00:19:53,919
in previous presentations but

518
00:19:53,919 --> 00:19:56,320
i didn't come to a conclusion on those

519
00:19:56,320 --> 00:19:58,320
yeah i think that some of those points

520
00:19:58,320 --> 00:20:00,559
are covered in the sort of open

521
00:20:00,559 --> 00:20:03,760
questions embedded in the draft text but

522
00:20:03,760 --> 00:20:05,679
i i don't have them covered on this

523
00:20:05,679 --> 00:20:07,840
slide

524
00:20:10,720 --> 00:20:15,039
okay all set perfect thank you ben

525
00:20:19,039 --> 00:20:20,799
next up we have stephen for a well-known

526
00:20:20,799 --> 00:20:23,280
ech

527
00:20:30,799 --> 00:20:32,080
great

528
00:20:32,080 --> 00:20:33,440
thank you

529
00:20:33,440 --> 00:20:36,080
what's the next slide

530
00:20:36,080 --> 00:20:38,559
uh so this was presented back at

531
00:20:38,559 --> 00:20:41,039
dispatch in itf 113.

532
00:20:41,039 --> 00:20:42,480
there was some discussion on that list

533
00:20:42,480 --> 00:20:44,240
and it was eventually ended up under the

534
00:20:44,240 --> 00:20:45,679
tls list and was discussed there but it

535
00:20:45,679 --> 00:20:47,919
was presented previously

536
00:20:47,919 --> 00:20:49,679
just roughly are do people want me to

537
00:20:49,679 --> 00:20:50,880
kind of go through that presentation

538
00:20:50,880 --> 00:20:52,240
content again or will i skip through it

539
00:20:52,240 --> 00:20:54,080
quickly how many people would like me to

540
00:20:54,080 --> 00:20:55,840
skip through it quickly

541
00:20:55,840 --> 00:20:59,600
good that's a plan okay next one

542
00:21:01,120 --> 00:21:02,400
so here's a summary basically you know

543
00:21:02,400 --> 00:21:06,000
we have a ech test servers at that url

544
00:21:06,000 --> 00:21:07,600
ech keys are updated regularly and need

545
00:21:07,600 --> 00:21:08,799
to end up in the dns and they're

546
00:21:08,799 --> 00:21:11,039
generated by the web server and so that

547
00:21:11,039 --> 00:21:13,919
creates a problem for our setup

548
00:21:13,919 --> 00:21:15,440
and this proposes a way to kind of deal

549
00:21:15,440 --> 00:21:16,799
with that problem

550
00:21:16,799 --> 00:21:17,919
the

551
00:21:17,919 --> 00:21:19,280
you know it's not the case that this is

552
00:21:19,280 --> 00:21:20,960
intended to be the one true way of

553
00:21:20,960 --> 00:21:23,120
publishing ech keys um there's probably

554
00:21:23,120 --> 00:21:24,480
much more simple ways that will work for

555
00:21:24,480 --> 00:21:25,840
lots of people

556
00:21:25,840 --> 00:21:29,678
um and next slide

557
00:21:29,760 --> 00:21:31,440
so there's an example basically we're

558
00:21:31,440 --> 00:21:33,120
using a well-known url to get the

559
00:21:33,120 --> 00:21:35,280
content to put in the https resource

560
00:21:35,280 --> 00:21:36,640
record

561
00:21:36,640 --> 00:21:38,720
and next slide

562
00:21:38,720 --> 00:21:42,240
there's a resource record next slide

563
00:21:42,480 --> 00:21:43,600
one of the things about this is i don't

564
00:21:43,600 --> 00:21:45,360
know anything about cdns but uh some

565
00:21:45,360 --> 00:21:48,640
people do so uh i had a meeting at lunch

566
00:21:48,640 --> 00:21:51,520
with rich and ben schwartz uh who have

567
00:21:51,520 --> 00:21:53,120
raised comments on this and they've

568
00:21:53,120 --> 00:21:54,320
agreed to kind of help with the draft

569
00:21:54,320 --> 00:21:56,720
and be co-authors that should help that

570
00:21:56,720 --> 00:21:58,559
there's the next slide

571
00:21:58,559 --> 00:22:00,640
there's a picture

572
00:22:00,640 --> 00:22:02,640
next slide

573
00:22:02,640 --> 00:22:04,720
stop me if you want me to just go faster

574
00:22:04,720 --> 00:22:05,840
or slower

575
00:22:05,840 --> 00:22:07,280
it kind of works it's a work in progress

576
00:22:07,280 --> 00:22:09,280
it'll probably change a little bit

577
00:22:09,280 --> 00:22:10,840
next

578
00:22:10,840 --> 00:22:13,200
slide there is a description of what's

579
00:22:13,200 --> 00:22:15,760
in the response uh which is relatively

580
00:22:15,760 --> 00:22:17,919
obvious i think um

581
00:22:17,919 --> 00:22:19,840
it has the ech config list a ttl you'd

582
00:22:19,840 --> 00:22:21,679
like and which ports on the web server

583
00:22:21,679 --> 00:22:22,880
are using that

584
00:22:22,880 --> 00:22:24,960
next slide

585
00:22:24,960 --> 00:22:26,159
okay so these are the questions these

586
00:22:26,159 --> 00:22:27,280
are the issues that were raised on the

587
00:22:27,280 --> 00:22:28,080
list

588
00:22:28,080 --> 00:22:29,679
mostly from ben and thanks again ben

589
00:22:29,679 --> 00:22:31,600
next

590
00:22:31,600 --> 00:22:32,320
so

591
00:22:32,320 --> 00:22:35,039
um one an alternative you could think of

592
00:22:35,039 --> 00:22:37,200
for how to get the ech information out

593
00:22:37,200 --> 00:22:39,200
of a web server is to use the retry

594
00:22:39,200 --> 00:22:42,240
configs um and that could work i think

595
00:22:42,240 --> 00:22:44,159
um the idea is you just make a kind of a

596
00:22:44,159 --> 00:22:46,320
greased connection or something to the

597
00:22:46,320 --> 00:22:48,400
the web server and it would give you the

598
00:22:48,400 --> 00:22:49,919
retry configs and then you could go and

599
00:22:49,919 --> 00:22:51,360
publish that in the dns if you like it

600
00:22:51,360 --> 00:22:52,320
and so on

601
00:22:52,320 --> 00:22:55,280
uh that would require changes to ech

602
00:22:55,280 --> 00:22:56,720
to the draft because uh for a few

603
00:22:56,720 --> 00:22:58,799
reasons to add the extra info if you

604
00:22:58,799 --> 00:23:01,760
need it like ttls or ports whatever

605
00:23:01,760 --> 00:23:02,960
and also

606
00:23:02,960 --> 00:23:04,799
it's not clear that the set of keys

607
00:23:04,799 --> 00:23:07,039
loaded in a server at a given moment is

608
00:23:07,039 --> 00:23:08,320
exactly what you want published in the

609
00:23:08,320 --> 00:23:09,840
dns at that moment

610
00:23:09,840 --> 00:23:11,200
so you'd have to say something about

611
00:23:11,200 --> 00:23:12,640
what to put in something more about what

612
00:23:12,640 --> 00:23:14,640
to put in retry configs which we don't

613
00:23:14,640 --> 00:23:16,880
currently so you could change the ec h

614
00:23:16,880 --> 00:23:19,520
draft and do it but i don't think that's

615
00:23:19,520 --> 00:23:20,880
really satisfactory so i think that

616
00:23:20,880 --> 00:23:23,120
doesn't particularly work well

617
00:23:23,120 --> 00:23:24,400
we might change our minds but that's

618
00:23:24,400 --> 00:23:26,880
what i think

619
00:23:27,360 --> 00:23:29,360
next one unless somebody if you have any

620
00:23:29,360 --> 00:23:30,799
comments or want to disagree just jump

621
00:23:30,799 --> 00:23:32,320
to the mic please

622
00:23:32,320 --> 00:23:33,200
another

623
00:23:33,200 --> 00:23:34,480
comment was you could create another

624
00:23:34,480 --> 00:23:36,320
resource record somewhere that basically

625
00:23:36,320 --> 00:23:38,960
says here's what i'd like into an scvp

626
00:23:38,960 --> 00:23:41,600
svcb or https rr

627
00:23:41,600 --> 00:23:43,520
again that could work the difference is

628
00:23:43,520 --> 00:23:45,039
you'd lose the server authentication

629
00:23:45,039 --> 00:23:48,640
that you get with the well-known url

630
00:23:48,799 --> 00:23:50,320
exactly the properties of having that

631
00:23:50,320 --> 00:23:51,440
server authentication is something to

632
00:23:51,440 --> 00:23:54,000
think about but uh you'd lose it and

633
00:23:54,000 --> 00:23:56,640
again you know for at least for my setup

634
00:23:56,640 --> 00:23:58,080
uh it wouldn't really solve the problem

635
00:23:58,080 --> 00:23:59,919
because i still need some way to get

636
00:23:59,919 --> 00:24:02,080
the public key for ech out of the web

637
00:24:02,080 --> 00:24:04,720
server and into dns infrastructure

638
00:24:04,720 --> 00:24:06,640
so i think the same about that but again

639
00:24:06,640 --> 00:24:09,679
i might be wrong next one

640
00:24:10,240 --> 00:24:12,880
the question is uh so it looks like this

641
00:24:12,880 --> 00:24:14,159
you know in theory you could be much

642
00:24:14,159 --> 00:24:16,000
more generic about this and say

643
00:24:16,000 --> 00:24:17,840
we'd like to provide a mechanism for a

644
00:24:17,840 --> 00:24:20,240
tls server or a web server to publish

645
00:24:20,240 --> 00:24:22,720
everything it wants in a svcb or https

646
00:24:22,720 --> 00:24:24,799
uri and that could get very complicated

647
00:24:24,799 --> 00:24:25,600
and

648
00:24:25,600 --> 00:24:27,600
so you could aim for more generic uh it

649
00:24:27,600 --> 00:24:30,240
seems to me at least for now that

650
00:24:30,240 --> 00:24:31,760
it's the ech keys that seem to be

651
00:24:31,760 --> 00:24:34,480
changing regularly um and that's kind of

652
00:24:34,480 --> 00:24:36,640
motivating this and seems to be maybe a

653
00:24:36,640 --> 00:24:37,600
better approach is to try to do

654
00:24:37,600 --> 00:24:38,640
something easy

655
00:24:38,640 --> 00:24:40,720
specific

656
00:24:40,720 --> 00:24:43,120
okay

657
00:24:44,080 --> 00:24:46,799
okay next

658
00:24:46,799 --> 00:24:48,799
uh a point that then raised which i

659
00:24:48,799 --> 00:24:50,559
think is is fair enough is that the air

660
00:24:50,559 --> 00:24:52,159
you may need a lpn information in this

661
00:24:52,159 --> 00:24:54,320
to publish in the resource record

662
00:24:54,320 --> 00:24:56,159
and i think that's correct so that

663
00:24:56,159 --> 00:24:57,760
should be added uh i'm not i don't know

664
00:24:57,760 --> 00:24:59,520
what to do about the no default api

665
00:24:59,520 --> 00:25:00,559
really

666
00:25:00,559 --> 00:25:01,679
um

667
00:25:01,679 --> 00:25:02,120
so

668
00:25:02,120 --> 00:25:04,320
[Music]

669
00:25:04,320 --> 00:25:05,919
yeah you can ignore the side now for now

670
00:25:05,919 --> 00:25:07,679
unless we get into a discussion about it

671
00:25:07,679 --> 00:25:09,919
next

672
00:25:10,320 --> 00:25:12,400
uh there could be other content that

673
00:25:12,400 --> 00:25:15,600
that you'd like to see in https that end

674
00:25:15,600 --> 00:25:17,360
up essentially reflected in the inner

675
00:25:17,360 --> 00:25:19,039
client hello in ech

676
00:25:19,039 --> 00:25:21,120
and if there is

677
00:25:21,120 --> 00:25:22,159
i had a look through i didn't see

678
00:25:22,159 --> 00:25:24,080
anything obvious

679
00:25:24,080 --> 00:25:25,919
but if there is we should think about

680
00:25:25,919 --> 00:25:27,760
that and then probably add it

681
00:25:27,760 --> 00:25:30,320
to this mechanism if we go ahead with it

682
00:25:30,320 --> 00:25:32,159
and

683
00:25:32,159 --> 00:25:34,480
next

684
00:25:34,960 --> 00:25:35,840
uh

685
00:25:35,840 --> 00:25:38,000
svcb is a kind of a bit of a mystery to

686
00:25:38,000 --> 00:25:40,240
me to be honest it's it's it allows some

687
00:25:40,240 --> 00:25:43,039
complicated options it seems um so i've

688
00:25:43,039 --> 00:25:45,279
kind of had a look through it and we

689
00:25:45,279 --> 00:25:46,240
need to kind of think through some of

690
00:25:46,240 --> 00:25:48,320
the other use cases

691
00:25:48,320 --> 00:25:49,760
that exist and make sure that we're not

692
00:25:49,760 --> 00:25:51,600
doing something stupid

693
00:25:51,600 --> 00:25:53,360
um

694
00:25:53,360 --> 00:25:54,159
yep

695
00:25:54,159 --> 00:25:55,679
other points that were raised in the

696
00:25:55,679 --> 00:25:57,039
discussion

697
00:25:57,039 --> 00:25:57,919
um

698
00:25:57,919 --> 00:25:59,440
rob made a point about not not

699
00:25:59,440 --> 00:26:00,880
mentioning that the sheridan split mode

700
00:26:00,880 --> 00:26:02,480
topologies

701
00:26:02,480 --> 00:26:04,159
mnot said it might need a well-known url

702
00:26:04,159 --> 00:26:06,080
that's fair enough um

703
00:26:06,080 --> 00:26:07,600
ben said the path was wrong i didn't

704
00:26:07,600 --> 00:26:09,200
understand why but nevermind

705
00:26:09,200 --> 00:26:10,720
and

706
00:26:10,720 --> 00:26:12,000
lastly i think

707
00:26:12,000 --> 00:26:14,480
looking through it recently there's um

708
00:26:14,480 --> 00:26:16,159
either you have a prefix poor prefix

709
00:26:16,159 --> 00:26:18,480
queue name in your https or or you can

710
00:26:18,480 --> 00:26:20,080
have a port

711
00:26:20,080 --> 00:26:22,080
in the https or or

712
00:26:22,080 --> 00:26:24,320
which i didn't understand what the right

713
00:26:24,320 --> 00:26:26,159
approach to that would be

714
00:26:26,159 --> 00:26:27,120
um

715
00:26:27,120 --> 00:26:28,559
and we have address hints that can go in

716
00:26:28,559 --> 00:26:29,679
these rr's and i don't know if they

717
00:26:29,679 --> 00:26:31,520
should be reflected in this or not and i

718
00:26:31,520 --> 00:26:33,760
think that's the last slide other than

719
00:26:33,760 --> 00:26:36,400
process slides and one more

720
00:26:36,400 --> 00:26:38,720
that's my cue actually okay

721
00:26:38,720 --> 00:26:39,440
so

722
00:26:39,440 --> 00:26:42,159
when we first designed ech one of the

723
00:26:42,159 --> 00:26:43,840
problems we were concerned with was

724
00:26:43,840 --> 00:26:45,919
desynchronization between the ecs

725
00:26:45,919 --> 00:26:48,240
configuration and the ip address

726
00:26:48,240 --> 00:26:51,200
and so this is addressed in um so the

727
00:26:51,200 --> 00:26:52,880
concern here right is you have two two

728
00:26:52,880 --> 00:26:55,840
cdn's right and so you have to get that

729
00:26:55,840 --> 00:26:56,880
axis in front of them and you get the

730
00:26:56,880 --> 00:26:58,880
ech from one and ip from the other right

731
00:26:58,880 --> 00:27:02,240
and so this is addressed in standard ech

732
00:27:02,240 --> 00:27:03,600
by having the whole thing blocked up in

733
00:27:03,600 --> 00:27:06,480
the https rr and then the one sort of

734
00:27:06,480 --> 00:27:09,679
lacuna is the um uh is the you know

735
00:27:09,679 --> 00:27:11,440
retry mode with the public name but that

736
00:27:11,440 --> 00:27:12,799
happens like seconds afterwards it's

737
00:27:12,799 --> 00:27:13,919
like if you cheat if you change your

738
00:27:13,919 --> 00:27:16,240
spology that in that case like sorry

739
00:27:16,240 --> 00:27:18,000
bad day but

740
00:27:18,000 --> 00:27:19,520
because you have a long tt for you a lot

741
00:27:19,520 --> 00:27:21,120
of ttl here that's much longer than that

742
00:27:21,120 --> 00:27:22,720
that is not seconds but it's like you

743
00:27:22,720 --> 00:27:25,120
know hundreds of seconds that easily can

744
00:27:25,120 --> 00:27:26,159
produce the situation we're talking

745
00:27:26,159 --> 00:27:28,000
about here and so i and so i'm on so i'm

746
00:27:28,000 --> 00:27:28,960
trying to figure out how you think that

747
00:27:28,960 --> 00:27:31,120
yeah it's fixed

748
00:27:31,120 --> 00:27:32,240
so i didn't quite get the questions

749
00:27:32,240 --> 00:27:34,240
either sorry yeah so if you will because

750
00:27:34,240 --> 00:27:36,240
because this structure allows the client

751
00:27:36,240 --> 00:27:38,240
to cache the ecs configure for very long

752
00:27:38,240 --> 00:27:40,080
period of time

753
00:27:40,080 --> 00:27:43,600
right the http client yes yeah um then

754
00:27:43,600 --> 00:27:44,880
you can easily run a situation we have a

755
00:27:44,880 --> 00:27:46,799
topology shift underneath and now you're

756
00:27:46,799 --> 00:27:48,320
talking to a cdn which doesn't in fact

757
00:27:48,320 --> 00:27:51,439
handle this user at all

758
00:27:52,559 --> 00:27:53,760
or or does handle that has a different

759
00:27:53,760 --> 00:27:55,679
ec i think ben behind you looks like he

760
00:27:55,679 --> 00:27:57,520
wants to answer the question

761
00:27:57,520 --> 00:27:58,399
hi

762
00:27:58,399 --> 00:28:01,200
uh so i i think the the distinction here

763
00:28:01,200 --> 00:28:03,760
is that this draft claims that the only

764
00:28:03,760 --> 00:28:06,399
http client for this is

765
00:28:06,399 --> 00:28:08,720
running inside the authoritative dns

766
00:28:08,720 --> 00:28:09,760
server

767
00:28:09,760 --> 00:28:12,640
this is only for communication between a

768
00:28:12,640 --> 00:28:16,320
an http server and a dns server

769
00:28:16,320 --> 00:28:19,120
or yeah some dns infrastructure yeah

770
00:28:19,120 --> 00:28:21,520
okay so it's not

771
00:28:21,520 --> 00:28:24,159
this is not for use like by any by

772
00:28:24,159 --> 00:28:26,880
clients are unaffiliated uh

773
00:28:26,880 --> 00:28:29,520
that's not the use case i have

774
00:28:29,520 --> 00:28:31,360
we should think through

775
00:28:31,360 --> 00:28:33,039
what might happen if somebody else

776
00:28:33,039 --> 00:28:34,720
starts to use it yes okay let that i

777
00:28:34,720 --> 00:28:36,880
mean that i mean so i'm

778
00:28:36,880 --> 00:28:38,240
provisionally prepared to believe that

779
00:28:38,240 --> 00:28:40,480
like it's fine under the situation the

780
00:28:40,480 --> 00:28:42,640
case you just laid out then um but then

781
00:28:42,640 --> 00:28:44,399
i think it is a very clear warning that

782
00:28:44,399 --> 00:28:45,600
this is not

783
00:28:45,600 --> 00:28:47,360
this is not this is not a replacement

784
00:28:47,360 --> 00:28:50,799
for http https um rr

785
00:28:50,799 --> 00:28:52,399
for generic clients because we don't

786
00:28:52,399 --> 00:28:54,240
want people getting in that box mode

787
00:28:54,240 --> 00:28:55,760
sure that's definitely not the intent

788
00:28:55,760 --> 00:28:57,360
for this yeah i agree

789
00:28:57,360 --> 00:28:59,840
um okay just before you go back i don't

790
00:28:59,840 --> 00:29:01,600
know so the next steps basically we're i

791
00:29:01,600 --> 00:29:02,480
had a

792
00:29:02,480 --> 00:29:04,480
meeting with ben and uh rich they're

793
00:29:04,480 --> 00:29:06,159
gonna join his co-authors they said

794
00:29:06,159 --> 00:29:08,880
unless they hate me after this um and

795
00:29:08,880 --> 00:29:10,559
we'll probably

796
00:29:10,559 --> 00:29:11,840
we'll ask the chairs whether we should

797
00:29:11,840 --> 00:29:14,080
create a gif uh repo for this

798
00:29:14,080 --> 00:29:15,279
immediately or

799
00:29:15,279 --> 00:29:16,240
whatever

800
00:29:16,240 --> 00:29:18,000
uh and i think ultimately the aim would

801
00:29:18,000 --> 00:29:19,919
be to whenever

802
00:29:19,919 --> 00:29:21,440
you hit publication request for ech

803
00:29:21,440 --> 00:29:23,039
maybe to look for a working class called

804
00:29:23,039 --> 00:29:25,200
roundabout then but not before

805
00:29:25,200 --> 00:29:28,880
okay i think we have a ted online

806
00:29:33,279 --> 00:29:36,240
uh thanks so one of my points

807
00:29:36,240 --> 00:29:38,000
was actually i think

808
00:29:38,000 --> 00:29:40,240
covered to some extent by by eckerd i am

809
00:29:40,240 --> 00:29:41,600
i'm a bit concerned here that the

810
00:29:41,600 --> 00:29:45,039
hashing infrastructure that's there for

811
00:29:45,039 --> 00:29:48,080
http uh is not really being considered

812
00:29:48,080 --> 00:29:50,960
by this draft i think your answer that

813
00:29:50,960 --> 00:29:53,200
uh this is intended for a very limited

814
00:29:53,200 --> 00:29:55,360
use case of the http server talking to a

815
00:29:55,360 --> 00:29:58,320
specific um

816
00:29:58,480 --> 00:30:00,399
dns infrastructure

817
00:30:00,399 --> 00:30:02,240
um somewhat removes the possibility that

818
00:30:02,240 --> 00:30:05,120
there's a random set of uh

819
00:30:05,120 --> 00:30:08,000
transparent caches in the middle but

820
00:30:08,000 --> 00:30:09,679
especially if you think there might be a

821
00:30:09,679 --> 00:30:11,919
different use case in the future

822
00:30:11,919 --> 00:30:13,520
you really do need to think through what

823
00:30:13,520 --> 00:30:15,520
the caching architecture looks like here

824
00:30:15,520 --> 00:30:16,960
and the interaction

825
00:30:16,960 --> 00:30:17,919
between

826
00:30:17,919 --> 00:30:19,679
the the time to live that might be

827
00:30:19,679 --> 00:30:22,480
present in the in the http caches

828
00:30:22,480 --> 00:30:24,559
which is not always obedient to things

829
00:30:24,559 --> 00:30:25,679
uh in

830
00:30:25,679 --> 00:30:27,279
in the instructions

831
00:30:27,279 --> 00:30:28,480
and how you would deal with that like

832
00:30:28,480 --> 00:30:30,000
whether you'd use e-tags or something

833
00:30:30,000 --> 00:30:31,520
like that but the

834
00:30:31,520 --> 00:30:33,679
other bit of this is really this doesn't

835
00:30:33,679 --> 00:30:36,320
sound real baked yet

836
00:30:36,320 --> 00:30:38,240
but the well-known uri registry does

837
00:30:38,240 --> 00:30:41,919
allow you to register provisionals

838
00:30:41,919 --> 00:30:43,840
and i i would suggest that if you go

839
00:30:43,840 --> 00:30:47,360
through 8615 process the one thing you

840
00:30:47,360 --> 00:30:49,200
might actually do here is register a

841
00:30:49,200 --> 00:30:51,120
provisional and run some experiments and

842
00:30:51,120 --> 00:30:52,320
write the

843
00:30:52,320 --> 00:30:54,159
write this as an experimental document

844
00:30:54,159 --> 00:30:55,200
to see

845
00:30:55,200 --> 00:30:57,120
whether this turned out to be worth

846
00:30:57,120 --> 00:30:59,360
doing because it looks to me from the

847
00:30:59,360 --> 00:31:00,559
description

848
00:31:00,559 --> 00:31:02,000
like a lot of what you're trying to

849
00:31:02,000 --> 00:31:05,519
tackle here is the case where

850
00:31:05,519 --> 00:31:07,279
the people who run the http

851
00:31:07,279 --> 00:31:09,519
infrastructure don't in fact also

852
00:31:09,519 --> 00:31:11,600
control the dns infrastructure and

853
00:31:11,600 --> 00:31:14,399
therefore can't use one of the other dns

854
00:31:14,399 --> 00:31:16,799
related mechanisms for this

855
00:31:16,799 --> 00:31:18,640
and a little bit of experimentation to

856
00:31:18,640 --> 00:31:20,799
find out what uptake you get on a

857
00:31:20,799 --> 00:31:22,320
provisional version of this might

858
00:31:22,320 --> 00:31:24,320
actually be useful for figuring out

859
00:31:24,320 --> 00:31:26,000
whether this ought to be permanent or

860
00:31:26,000 --> 00:31:28,320
generalized or something else

861
00:31:28,320 --> 00:31:29,840
thanks

862
00:31:29,840 --> 00:31:32,320
okay two good points thank you who's

863
00:31:32,320 --> 00:31:34,480
next

864
00:31:35,200 --> 00:31:38,960
and ben schwartz uh i'll just say i do

865
00:31:38,960 --> 00:31:41,519
prefer the the more general approach

866
00:31:41,519 --> 00:31:42,240
here

867
00:31:42,240 --> 00:31:44,880
as stephen well knows

868
00:31:44,880 --> 00:31:46,640
i think it would be better to not just

869
00:31:46,640 --> 00:31:48,559
convey ech but but treat this as a

870
00:31:48,559 --> 00:31:50,559
general way for http or engines to

871
00:31:50,559 --> 00:31:52,000
describe themselves to their dns

872
00:31:52,000 --> 00:31:53,360
infrastructure

873
00:31:53,360 --> 00:31:55,760
but uh steven and i are going to spend a

874
00:31:55,760 --> 00:31:57,039
lot of time talking about that and we'll

875
00:31:57,039 --> 00:31:58,320
see where it goes

876
00:31:58,320 --> 00:31:59,760
yeah

877
00:31:59,760 --> 00:32:03,039
the authors will agree at the end

878
00:32:04,559 --> 00:32:07,519
uh so i guess i'm up next ben k duck

879
00:32:07,519 --> 00:32:10,799
uh so on this question of like is this

880
00:32:10,799 --> 00:32:13,360
mechanism just used for the dns server

881
00:32:13,360 --> 00:32:15,760
to talk to the http server and get its

882
00:32:15,760 --> 00:32:18,799
config versus being used by our

883
00:32:18,799 --> 00:32:20,559
http clients

884
00:32:20,559 --> 00:32:22,720
um i think if we do want to limit it to

885
00:32:22,720 --> 00:32:24,320
just the

886
00:32:24,320 --> 00:32:26,880
dns server being the thing using this

887
00:32:26,880 --> 00:32:28,640
that's actually a reason to specifically

888
00:32:28,640 --> 00:32:31,600
not have a well-known url

889
00:32:31,600 --> 00:32:32,640
because

890
00:32:32,640 --> 00:32:34,159
then it's explicitly something you have

891
00:32:34,159 --> 00:32:35,440
to configure

892
00:32:35,440 --> 00:32:38,320
and that gives us more confidence that

893
00:32:38,320 --> 00:32:40,080
random clients are not going to try to

894
00:32:40,080 --> 00:32:42,240
use it and we don't have to try to think

895
00:32:42,240 --> 00:32:44,080
through all of the behavior and

896
00:32:44,080 --> 00:32:46,159
consequences for them because if we do

897
00:32:46,159 --> 00:32:47,600
define a well-known i think we really

898
00:32:47,600 --> 00:32:50,080
need to consider those cases and see if

899
00:32:50,080 --> 00:32:51,840
there's any gotchas that we need to work

900
00:32:51,840 --> 00:32:54,080
around

901
00:32:55,519 --> 00:32:57,039
sure yeah okay that's a reasonable

902
00:32:57,039 --> 00:32:58,320
argument i

903
00:32:58,320 --> 00:32:59,919
i don't know yet if i agree entirely but

904
00:32:59,919 --> 00:33:00,880
i think it's a reasonable argument for

905
00:33:00,880 --> 00:33:03,200
sure yeah

906
00:33:03,679 --> 00:33:05,840
alessandro gadini

907
00:33:05,840 --> 00:33:08,399
um i just have a quick comment about the

908
00:33:08,399 --> 00:33:10,640
json description

909
00:33:10,640 --> 00:33:11,919
um

910
00:33:11,919 --> 00:33:14,720
the ports fields descriptions talks

911
00:33:14,720 --> 00:33:17,279
about specifically tcp ports is there

912
00:33:17,279 --> 00:33:19,840
any reason why those need to be tcp

913
00:33:19,840 --> 00:33:22,720
ports and not say quick ports

914
00:33:22,720 --> 00:33:24,399
uh

915
00:33:24,399 --> 00:33:26,240
no it's uh it just talks about ports

916
00:33:26,240 --> 00:33:27,600
because that's what i've implemented and

917
00:33:27,600 --> 00:33:28,960
that's what i used and that's that's as

918
00:33:28,960 --> 00:33:31,679
far as we've got so so yeah it might be

919
00:33:31,679 --> 00:33:34,399
a bit more generic i guess sure like the

920
00:33:34,399 --> 00:33:36,720
language yeah

921
00:33:36,720 --> 00:33:38,799
okay so i i guess that's the plan and uh

922
00:33:38,799 --> 00:33:40,880
we'll work on it that's good we'll get

923
00:33:40,880 --> 00:33:42,720
there get repository set up for you

924
00:33:42,720 --> 00:33:45,120
great thanks

925
00:33:46,480 --> 00:33:47,519
all right

926
00:33:47,519 --> 00:33:49,039
next we have

927
00:33:49,039 --> 00:33:50,880
shawn to give the

928
00:33:50,880 --> 00:33:52,960
847

929
00:33:52,960 --> 00:33:56,320
all right exciting times registries um

930
00:33:56,320 --> 00:33:59,600
yeah i know exactly next slide please

931
00:33:59,600 --> 00:34:01,200
just a quick refresher we had an

932
00:34:01,200 --> 00:34:02,960
individual draft that we took to sag to

933
00:34:02,960 --> 00:34:04,640
try to figure out what we wanted to do

934
00:34:04,640 --> 00:34:06,000
to change the recommended column because

935
00:34:06,000 --> 00:34:07,679
that's really all this update is really

936
00:34:07,679 --> 00:34:09,199
about

937
00:34:09,199 --> 00:34:11,040
and the consensus was to add a d which

938
00:34:11,040 --> 00:34:13,679
basically is discouraged or weak and so

939
00:34:13,679 --> 00:34:15,760
this 01 version of the working group

940
00:34:15,760 --> 00:34:18,000
draft is an attempt to trying to do that

941
00:34:18,000 --> 00:34:20,239
so there might be some controversial uh

942
00:34:20,239 --> 00:34:22,079
selections here joe and i basically just

943
00:34:22,079 --> 00:34:23,280
threw them down to see what was going to

944
00:34:23,280 --> 00:34:24,079
happen

945
00:34:24,079 --> 00:34:24,879
um

946
00:34:24,879 --> 00:34:26,399
also note there are some other changes

947
00:34:26,399 --> 00:34:28,000
in this version which are trying to make

948
00:34:28,000 --> 00:34:29,760
it a little bit easier on iana to be

949
00:34:29,760 --> 00:34:31,599
like we changed these ones we didn't

950
00:34:31,599 --> 00:34:33,280
change these other ones to kind of make

951
00:34:33,280 --> 00:34:35,918
it a little a little clearer um it's

952
00:34:35,918 --> 00:34:37,520
this change has been of a bit of a pain

953
00:34:37,520 --> 00:34:39,119
ass because uh there was new

954
00:34:39,119 --> 00:34:41,199
registrations obviously since 847 bits

955
00:34:41,199 --> 00:34:42,800
was written so now i have to explain all

956
00:34:42,800 --> 00:34:44,879
those ones that are already covered so

957
00:34:44,879 --> 00:34:46,239
it's kind of painful but whatever all

958
00:34:46,239 --> 00:34:48,399
right next

959
00:34:48,399 --> 00:34:49,440
so

960
00:34:49,440 --> 00:34:50,719
we did some minor updates to the

961
00:34:50,719 --> 00:34:53,040
references too the first extension types

962
00:34:53,040 --> 00:34:54,320
value we went through each registry of

963
00:34:54,320 --> 00:34:55,760
the tls registry and said what are we

964
00:34:55,760 --> 00:34:57,119
going to change so the two that we came

965
00:34:57,119 --> 00:34:59,040
up with were truncated hmac and

966
00:34:59,040 --> 00:35:03,599
connection id so we we marked those as d

967
00:35:03,599 --> 00:35:05,040
um i'm just going to roll through these

968
00:35:05,040 --> 00:35:06,720
and people can jump up and scream and

969
00:35:06,720 --> 00:35:07,520
yell

970
00:35:07,520 --> 00:35:09,280
um the cipher suit registries i'm hoping

971
00:35:09,280 --> 00:35:11,119
that all of the most of these will be

972
00:35:11,119 --> 00:35:14,240
done by this obsolete

973
00:35:14,839 --> 00:35:17,119
kex like i can put myself in the cube

974
00:35:17,119 --> 00:35:18,720
but why is caching deprecated we just

975
00:35:18,720 --> 00:35:20,160
registered like 30 minutes so there's

976
00:35:20,160 --> 00:35:21,839
two there's two right there was one that

977
00:35:21,839 --> 00:35:23,359
was duplicated and then one that wasn't

978
00:35:23,359 --> 00:35:24,800
so this is the one that's like don't use

979
00:35:24,800 --> 00:35:26,560
this one it's already been deprecated oh

980
00:35:26,560 --> 00:35:28,480
okay isn't that reserved

981
00:35:28,480 --> 00:35:30,480
uh

982
00:35:30,480 --> 00:35:32,160
it was marked as

983
00:35:32,160 --> 00:35:34,079
i don't i think it was marked as no

984
00:35:34,079 --> 00:35:35,119
before

985
00:35:35,119 --> 00:35:36,800
so okay yeah but reserved essentially i

986
00:35:36,800 --> 00:35:38,400
think this is distinguished between

987
00:35:38,400 --> 00:35:39,520
let's distinguish the things which are

988
00:35:39,520 --> 00:35:41,359
valid code points but we think we're bad

989
00:35:41,359 --> 00:35:42,720
ideas and things which are like not

990
00:35:42,720 --> 00:35:43,920
really valid code points anymore and

991
00:35:43,920 --> 00:35:45,280
that seems like that seems like it's in

992
00:35:45,280 --> 00:35:48,320
the in the second category yes

993
00:35:48,320 --> 00:35:50,079
so but so again so you think we should

994
00:35:50,079 --> 00:35:52,720
just make that in

995
00:35:52,720 --> 00:35:54,000
because there's a there's a couple of

996
00:35:54,000 --> 00:35:56,079
those actually i think we should i think

997
00:35:56,079 --> 00:35:57,359
we should rename it to underscore

998
00:35:57,359 --> 00:36:00,800
capital reserved and then make it n or d

999
00:36:00,800 --> 00:36:02,960
i don't care okay i think all i guess

1000
00:36:02,960 --> 00:36:04,640
all the my position is all the reserved

1001
00:36:04,640 --> 00:36:07,839
ones like maybe we may need like another

1002
00:36:07,839 --> 00:36:10,800
like i mean like we like it's like in a

1003
00:36:10,800 --> 00:36:12,000
different there's a different category

1004
00:36:12,000 --> 00:36:13,280
it's like it's like this is like not

1005
00:36:13,280 --> 00:36:14,720
even a valid codeplay anymore well

1006
00:36:14,720 --> 00:36:15,680
because

1007
00:36:15,680 --> 00:36:17,119
okay

1008
00:36:17,119 --> 00:36:18,320
market reserve would call it date that'd

1009
00:36:18,320 --> 00:36:20,720
be fine okay

1010
00:36:20,720 --> 00:36:22,400
sean

1011
00:36:22,400 --> 00:36:24,839
my name is not tron but

1012
00:36:24,839 --> 00:36:27,200
uh the connection id because you write

1013
00:36:27,200 --> 00:36:30,560
deprecated uh does that refer to

1014
00:36:30,560 --> 00:36:33,119
uh one of the connection id values which

1015
00:36:33,119 --> 00:36:35,680
we allocated before that and it's used

1016
00:36:35,680 --> 00:36:37,520
in deployments and that's the one you

1017
00:36:37,520 --> 00:36:39,440
want to refer to d or you want to

1018
00:36:39,440 --> 00:36:40,800
deprecate the whole connection id

1019
00:36:40,800 --> 00:36:42,320
fingerprint connection

1020
00:36:42,320 --> 00:36:44,480
and the registry one is connection id

1021
00:36:44,480 --> 00:36:45,839
deprecated i mean that's actually the

1022
00:36:45,839 --> 00:36:47,599
string that's the one that i want to get

1023
00:36:47,599 --> 00:36:49,119
rid of the one that that's the right one

1024
00:36:49,119 --> 00:36:50,880
that you guys actually deployed is the

1025
00:36:50,880 --> 00:36:52,400
other value that's good to hear because

1026
00:36:52,400 --> 00:36:55,040
i almost fell off yeah okay no no

1027
00:36:55,040 --> 00:36:56,240
definitely not trying to pull the rug

1028
00:36:56,240 --> 00:36:58,480
out from you um the cypher suit registry

1029
00:36:58,480 --> 00:37:00,240
i'm hoping that we're going to review

1030
00:37:00,240 --> 00:37:01,839
that after we get through the deprecated

1031
00:37:01,839 --> 00:37:03,920
obsolete kecks draft because hopefully

1032
00:37:03,920 --> 00:37:07,200
it's going to take them all out for us

1033
00:37:07,280 --> 00:37:09,280
now there's some new ones which was

1034
00:37:09,280 --> 00:37:11,040
probably as a result of last time we did

1035
00:37:11,040 --> 00:37:12,320
this draft that there were some orphaned

1036
00:37:12,320 --> 00:37:14,640
registries that were tls 1.2 specific

1037
00:37:14,640 --> 00:37:16,800
and we were lazy and didn't address them

1038
00:37:16,800 --> 00:37:18,800
but tls 1.2 is going to be around for a

1039
00:37:18,800 --> 00:37:20,960
while and now we've added this d we

1040
00:37:20,960 --> 00:37:22,400
figured we had to go through these so

1041
00:37:22,400 --> 00:37:24,480
here's another list of things

1042
00:37:24,480 --> 00:37:27,119
um registries that are that are orphaned

1043
00:37:27,119 --> 00:37:31,440
that we need to address so next

1044
00:37:31,839 --> 00:37:33,680
so the first one hash algorithms i

1045
00:37:33,680 --> 00:37:35,839
highlighted the ones in d um just to

1046
00:37:35,839 --> 00:37:37,280
show that they were different i

1047
00:37:37,280 --> 00:37:38,720
basically picked anything that was quote

1048
00:37:38,720 --> 00:37:39,920
unquote weak

1049
00:37:39,920 --> 00:37:44,560
so md5 shot one shot 224

1050
00:37:44,560 --> 00:37:46,640
and then for signature algorithms you

1051
00:37:46,640 --> 00:37:48,079
know made them n

1052
00:37:48,079 --> 00:37:50,320
went for anonymous dsa and the ghost

1053
00:37:50,320 --> 00:37:52,880
algorithms

1054
00:37:54,240 --> 00:37:55,839
again i'm just kind of waiting to see if

1055
00:37:55,839 --> 00:37:56,880
anybody's going to jump up and throw

1056
00:37:56,880 --> 00:37:58,400
something at me but we thought these

1057
00:37:58,400 --> 00:38:00,480
seem pretty reasonable

1058
00:38:00,480 --> 00:38:01,599
all right

1059
00:38:01,599 --> 00:38:02,800
next

1060
00:38:02,800 --> 00:38:04,880
and then we have these uh certificate

1061
00:38:04,880 --> 00:38:05,920
types

1062
00:38:05,920 --> 00:38:07,280
um

1063
00:38:07,280 --> 00:38:08,880
we we basically just went through and

1064
00:38:08,880 --> 00:38:11,680
said um obviously the fortesa one we put

1065
00:38:11,680 --> 00:38:12,560
d

1066
00:38:12,560 --> 00:38:14,960
um and the ephemeral

1067
00:38:14,960 --> 00:38:16,880
the rsa ephemeral diffie-hellman reserve

1068
00:38:16,880 --> 00:38:18,480
who made those d

1069
00:38:18,480 --> 00:38:21,119
and then for the fixed

1070
00:38:21,119 --> 00:38:25,280
um well you can see him on the thing

1071
00:38:27,040 --> 00:38:28,880
so all right i'm glad to see no one is

1072
00:38:28,880 --> 00:38:30,079
running up and trying to throw anything

1073
00:38:30,079 --> 00:38:33,839
at me but you get the mic

1074
00:38:35,680 --> 00:38:37,599
uh what is the impact of removing the

1075
00:38:37,599 --> 00:38:40,240
anonymous signature from the registry

1076
00:38:40,240 --> 00:38:42,400
does it break the existing anon ciphers

1077
00:38:42,400 --> 00:38:44,880
in tls12 in some sense

1078
00:38:44,880 --> 00:38:47,760
uh that's the one that's back right

1079
00:38:47,760 --> 00:38:50,480
yes that one the anonymous

1080
00:38:50,480 --> 00:38:52,560
what what are we doing there

1081
00:38:52,560 --> 00:38:55,040
so i think that that was

1082
00:38:55,040 --> 00:38:57,440
that was from a long time ago

1083
00:38:57,440 --> 00:39:00,640
i don't remember but we're

1084
00:39:00,640 --> 00:39:02,240
it's just being marked and so it's still

1085
00:39:02,240 --> 00:39:03,680
out there if people are actually using

1086
00:39:03,680 --> 00:39:06,000
it then they can keep on using it

1087
00:39:06,000 --> 00:39:09,760
um i'm using it on cyphers

1088
00:39:09,760 --> 00:39:12,720
it's the default in postfix

1089
00:39:12,720 --> 00:39:14,800
it's preferring on when when neither

1090
00:39:14,800 --> 00:39:17,040
side cares to authenticate anybody right

1091
00:39:17,040 --> 00:39:17,920
okay

1092
00:39:17,920 --> 00:39:20,960
okay check into that one

1093
00:39:21,440 --> 00:39:23,680
sean in the chat uh martin suggested

1094
00:39:23,680 --> 00:39:25,520
both anonymous and rsa should both be

1095
00:39:25,520 --> 00:39:29,640
marked as d is d

1096
00:39:30,079 --> 00:39:32,079
i mean so this has no this doesn't like

1097
00:39:32,079 --> 00:39:33,760
break anything but like the position the

1098
00:39:33,760 --> 00:39:35,520
ietf these are bad and therefore it

1099
00:39:35,520 --> 00:39:37,839
should say n

1100
00:39:37,839 --> 00:39:40,720
d right yes

1101
00:39:40,720 --> 00:39:41,839
so you think everything that's in the

1102
00:39:41,839 --> 00:39:43,280
signature algorithm that's that's an n

1103
00:39:43,280 --> 00:39:44,720
should be a d

1104
00:39:44,720 --> 00:39:45,839
sorry i didn't know i think that the

1105
00:39:45,839 --> 00:39:46,720
things the things in the century

1106
00:39:46,720 --> 00:39:48,320
algorithm that are that are not that are

1107
00:39:48,320 --> 00:39:49,839
bad should be a d and things that are

1108
00:39:49,839 --> 00:39:52,079
like meh should be an n

1109
00:39:52,079 --> 00:39:54,320
and so maybe rsa should and so it's like

1110
00:39:54,320 --> 00:39:56,240
i can see rsa being an n but anonymous

1111
00:39:56,240 --> 00:39:59,598
should be a d i should dsa

1112
00:40:00,160 --> 00:40:03,359
i'm not gonna fight you on the rsa

1113
00:40:06,640 --> 00:40:10,560
ben schwartz uh shot 224

1114
00:40:10,560 --> 00:40:13,839
uh nobody is it is it broken

1115
00:40:13,839 --> 00:40:15,680
is it just like weird maybe it should be

1116
00:40:15,680 --> 00:40:16,800
n

1117
00:40:16,800 --> 00:40:19,040
yeah

1118
00:40:20,640 --> 00:40:22,960
i did that once and then i made it d

1119
00:40:22,960 --> 00:40:23,680
so

1120
00:40:23,680 --> 00:40:25,760
it's kind of martin thompson i think i

1121
00:40:25,760 --> 00:40:27,440
think the standard that we need to be

1122
00:40:27,440 --> 00:40:29,440
applying here is that if there isn't an

1123
00:40:29,440 --> 00:40:31,680
rfc that we can all get behind that says

1124
00:40:31,680 --> 00:40:33,119
this is bad

1125
00:40:33,119 --> 00:40:35,040
then it shouldn't say d either i think

1126
00:40:35,040 --> 00:40:36,400
that's really the standard that i would

1127
00:40:36,400 --> 00:40:38,480
prefer us to be applying here

1128
00:40:38,480 --> 00:40:41,760
so when it says d it means the itf think

1129
00:40:41,760 --> 00:40:42,640
this is

1130
00:40:42,640 --> 00:40:45,119
all think this is bad now

1131
00:40:45,119 --> 00:40:46,880
i think that some of these are bad and

1132
00:40:46,880 --> 00:40:48,319
we should probably publish an rfc that

1133
00:40:48,319 --> 00:40:51,520
says that but um i i'd prefer that we at

1134
00:40:51,520 --> 00:40:53,760
least make our position very very clear

1135
00:40:53,760 --> 00:40:56,400
in terms of what the the rules are for

1136
00:40:56,400 --> 00:41:00,079
for when these get labeled this way

1137
00:41:01,119 --> 00:41:02,480
no i agree with you and i approach it

1138
00:41:02,480 --> 00:41:04,640
should be this rfc

1139
00:41:04,640 --> 00:41:05,359
i

1140
00:41:05,359 --> 00:41:07,599
i posed this rsc on a paragraph saying

1141
00:41:07,599 --> 00:41:10,160
anonymous is bad and dsa is bad and then

1142
00:41:10,160 --> 00:41:12,319
we'll mark them d

1143
00:41:12,319 --> 00:41:13,520
all right

1144
00:41:13,520 --> 00:41:15,200
um we can do that that's what this is

1145
00:41:15,200 --> 00:41:16,560
and i think that we should say one is

1146
00:41:16,560 --> 00:41:19,200
bad know d5 is bad and chao 24 is we

1147
00:41:19,200 --> 00:41:21,040
think it's fine but we don't like not

1148
00:41:21,040 --> 00:41:23,040
recommended this was an n

1149
00:41:23,040 --> 00:41:24,480
okay

1150
00:41:24,480 --> 00:41:27,599
like i guess like my gloss of d is we

1151
00:41:27,599 --> 00:41:29,280
think this is bad and like quite likely

1152
00:41:29,280 --> 00:41:30,560
it's not like gonna like damage you if

1153
00:41:30,560 --> 00:41:33,119
you use it and you should not use it

1154
00:41:33,119 --> 00:41:35,440
okay as opposed to it's just like some

1155
00:41:35,440 --> 00:41:37,119
vanity thing that we don't care about

1156
00:41:37,119 --> 00:41:38,560
right

1157
00:41:38,560 --> 00:41:41,920
all right so let's go past this one

1158
00:41:42,000 --> 00:41:43,440
and then we have some open issues where

1159
00:41:43,440 --> 00:41:45,040
we have elliptic curve

1160
00:41:45,040 --> 00:41:46,960
related uh registries

1161
00:41:46,960 --> 00:41:48,640
and so one of the things was that we

1162
00:41:48,640 --> 00:41:50,079
thought hey maybe we could put this in

1163
00:41:50,079 --> 00:41:53,200
the deputy uh obsolete keck straps but

1164
00:41:53,200 --> 00:41:54,560
you know these are the these are the six

1165
00:41:54,560 --> 00:41:56,240
registered values maybe we just stick it

1166
00:41:56,240 --> 00:41:57,760
in our draft and figure out what we want

1167
00:41:57,760 --> 00:41:59,200
to do with it i didn't really know what

1168
00:41:59,200 --> 00:42:03,240
to do with these so

1169
00:42:08,960 --> 00:42:12,000
need the first one right d d

1170
00:42:12,000 --> 00:42:14,720
d d

1171
00:42:14,839 --> 00:42:17,599
okay yeah i mean the only ones anybody

1172
00:42:17,599 --> 00:42:19,680
uses are like anybody should use and do

1173
00:42:19,680 --> 00:42:20,960
that you guys use are uncompressed and

1174
00:42:20,960 --> 00:42:22,560
named curve great and then all the other

1175
00:42:22,560 --> 00:42:24,079
ones are just like i'm like we know the

1176
00:42:24,079 --> 00:42:25,839
other ones like bad news

1177
00:42:25,839 --> 00:42:27,359
all right

1178
00:42:27,359 --> 00:42:28,880
that that's useful too i figure we'll

1179
00:42:28,880 --> 00:42:30,640
just put him in our draft unless the

1180
00:42:30,640 --> 00:42:32,160
authors of the other draft want to argue

1181
00:42:32,160 --> 00:42:33,200
arm us a little not make sure the

1182
00:42:33,200 --> 00:42:35,040
compressor is really bad news but like

1183
00:42:35,040 --> 00:42:38,079
no one uses it so like might as well

1184
00:42:39,200 --> 00:42:42,079
so um the reason that you don't want the

1185
00:42:42,079 --> 00:42:44,079
other ones and you want them to be d is

1186
00:42:44,079 --> 00:42:46,319
if you put them on the wire things will

1187
00:42:46,319 --> 00:42:47,680
explode

1188
00:42:47,680 --> 00:42:49,359
right it's not that they're broken it's

1189
00:42:49,359 --> 00:42:50,880
not that they're fundamentally insecure

1190
00:42:50,880 --> 00:42:52,000
it's just that if you put them on the

1191
00:42:52,000 --> 00:42:53,520
wire

1192
00:42:53,520 --> 00:42:55,920
things will break and so we can actively

1193
00:42:55,920 --> 00:42:57,440
discourage people from doing that so

1194
00:42:57,440 --> 00:42:59,760
let's do that all right

1195
00:42:59,760 --> 00:43:02,000
and i think that's

1196
00:43:02,000 --> 00:43:03,920
it i'll revise and move on and i'll

1197
00:43:03,920 --> 00:43:07,119
relinquish the rest of the time

1198
00:43:07,920 --> 00:43:09,599
oh all right

1199
00:43:09,599 --> 00:43:10,880
well i didn't notice yes ben are you

1200
00:43:10,880 --> 00:43:13,839
still in the queue

1201
00:43:15,119 --> 00:43:16,050
yeah

1202
00:43:16,050 --> 00:43:17,760
[Music]

1203
00:43:17,760 --> 00:43:20,880
so about the explicit curve

1204
00:43:20,880 --> 00:43:23,200
things

1205
00:43:23,839 --> 00:43:26,480
i believe they are broken to some extent

1206
00:43:26,480 --> 00:43:30,800
uh there's an attack uh by nicosia

1207
00:43:31,040 --> 00:43:33,760
and it showed how to exploit them

1208
00:43:33,760 --> 00:43:35,839
to do some damage

1209
00:43:35,839 --> 00:43:37,119
um

1210
00:43:37,119 --> 00:43:38,839
just pointing that

1211
00:43:38,839 --> 00:43:41,520
out yeah yeah i agree explicit curves

1212
00:43:41,520 --> 00:43:42,960
are like bad news it was it was the

1213
00:43:42,960 --> 00:43:44,400
compress that i wasn't saying where they

1214
00:43:44,400 --> 00:43:46,000
were just the the supplies occurs

1215
00:43:46,000 --> 00:43:47,359
definitely we should forbid and the

1216
00:43:47,359 --> 00:43:49,280
compressed are kind of like

1217
00:43:49,280 --> 00:43:50,880
like just nobody uses them and martin

1218
00:43:50,880 --> 00:43:52,720
says it's gonna make things blow up so i

1219
00:43:52,720 --> 00:43:54,880
think we're i think we're in agreement

1220
00:43:54,880 --> 00:43:56,560
all right

1221
00:43:56,560 --> 00:43:59,279
okay great

1222
00:44:00,640 --> 00:44:01,680
there we go

1223
00:44:01,680 --> 00:44:04,720
all right thanks sean

1224
00:44:05,119 --> 00:44:08,160
yeah hey rod you're next

1225
00:44:08,160 --> 00:44:10,000
yeah let me show the

1226
00:44:10,000 --> 00:44:13,000
slice

1227
00:44:22,319 --> 00:44:23,280
okay

1228
00:44:23,280 --> 00:44:24,640
all right

1229
00:44:24,640 --> 00:44:26,319
yeah thanks

1230
00:44:26,319 --> 00:44:28,400
uh so my name is nimrod of iran my

1231
00:44:28,400 --> 00:44:30,560
co-author carrick bottle is also here

1232
00:44:30,560 --> 00:44:31,920
and we would like to continue

1233
00:44:31,920 --> 00:44:34,000
deprecating obsolete exchange methods in

1234
00:44:34,000 --> 00:44:37,000
tls

1235
00:44:37,200 --> 00:44:39,119
uh this document which is now a working

1236
00:44:39,119 --> 00:44:41,920
group item deprecates our sake exchange

1237
00:44:41,920 --> 00:44:44,160
and static finance fair development

1238
00:44:44,160 --> 00:44:46,880
and limits uh finite field development

1239
00:44:46,880 --> 00:44:48,480
in its ephemeral form

1240
00:44:48,480 --> 00:44:50,240
only to reasonable groups with

1241
00:44:50,240 --> 00:44:52,640
sufficient security

1242
00:44:52,640 --> 00:44:55,440
and it also discourages uh

1243
00:44:55,440 --> 00:44:59,200
static elliptical based different

1244
00:45:01,200 --> 00:45:02,720
during the last

1245
00:45:02,720 --> 00:45:05,920
working group meeting at itf 113 uh we

1246
00:45:05,920 --> 00:45:08,160
were asked to verify that this document

1247
00:45:08,160 --> 00:45:09,760
should fall under this walking group the

1248
00:45:09,760 --> 00:45:11,839
tls working group

1249
00:45:11,839 --> 00:45:13,200
and the

1250
00:45:13,200 --> 00:45:15,200
chairs kindly checked with the security

1251
00:45:15,200 --> 00:45:17,599
area area director paul wooters and he

1252
00:45:17,599 --> 00:45:19,760
confirmed that the document indeed

1253
00:45:19,760 --> 00:45:23,200
belongs to this group so uh thanks for

1254
00:45:23,200 --> 00:45:26,720
writing raising this issue

1255
00:45:27,760 --> 00:45:28,800
uh

1256
00:45:28,800 --> 00:45:30,079
our

1257
00:45:30,079 --> 00:45:33,200
aim with this uh presentation is to

1258
00:45:33,200 --> 00:45:35,440
advance this document towards our

1259
00:45:35,440 --> 00:45:37,440
working group last call

1260
00:45:37,440 --> 00:45:40,160
so the only open issue or issues we are

1261
00:45:40,160 --> 00:45:44,160
aware of uh is regarding uh groups in

1262
00:45:44,160 --> 00:45:46,880
ffdig

1263
00:45:46,880 --> 00:45:49,520
currently the document safe lists

1264
00:45:49,520 --> 00:45:51,440
several standardized and widely used

1265
00:45:51,440 --> 00:45:53,359
groups

1266
00:45:53,359 --> 00:45:56,000
and are also

1267
00:45:56,000 --> 00:45:58,960
not standardized but widely used groups

1268
00:45:58,960 --> 00:46:02,079
such as the one that ships with postfix

1269
00:46:02,079 --> 00:46:03,680
and there's the question of whether the

1270
00:46:03,680 --> 00:46:07,839
document should safe list them as well

1271
00:46:07,839 --> 00:46:10,240
and we are leaning towards uh yes that

1272
00:46:10,240 --> 00:46:12,640
it should save list any widely used

1273
00:46:12,640 --> 00:46:15,200
group that is that provides sufficient

1274
00:46:15,200 --> 00:46:17,200
security

1275
00:46:17,200 --> 00:46:19,920
uh the other part of this issue

1276
00:46:19,920 --> 00:46:22,319
is uh what happens when the client

1277
00:46:22,319 --> 00:46:25,359
encounters a so-called bad group

1278
00:46:25,359 --> 00:46:29,040
so uh if the group is uh

1279
00:46:29,040 --> 00:46:30,000
of

1280
00:46:30,000 --> 00:46:32,240
an appropriate size

1281
00:46:32,240 --> 00:46:34,880
it is safe uh security-wise for the

1282
00:46:34,880 --> 00:46:37,040
client to verify the group structure and

1283
00:46:37,040 --> 00:46:39,599
proceed with the connection uh if the

1284
00:46:39,599 --> 00:46:41,839
group is safe

1285
00:46:41,839 --> 00:46:44,720
we could add language to the document

1286
00:46:44,720 --> 00:46:47,280
allowing that

1287
00:46:47,280 --> 00:46:49,760
however performing this verification is

1288
00:46:49,760 --> 00:46:52,240
computationally expensive

1289
00:46:52,240 --> 00:46:55,040
so if the client is unwilling to invest

1290
00:46:55,040 --> 00:46:57,520
in performing this verification or if we

1291
00:46:57,520 --> 00:47:00,000
choose to disallow non-safe listed

1292
00:47:00,000 --> 00:47:02,079
groups altogether

1293
00:47:02,079 --> 00:47:05,440
uh does the question of what behavior

1294
00:47:05,440 --> 00:47:07,119
what behavior the document should

1295
00:47:07,119 --> 00:47:08,480
specify

1296
00:47:08,480 --> 00:47:10,480
uh whether the client must abort the

1297
00:47:10,480 --> 00:47:12,800
connection in such circumstances or that

1298
00:47:12,800 --> 00:47:16,640
it merely should abort the connection

1299
00:47:17,520 --> 00:47:18,319
and

1300
00:47:18,319 --> 00:47:19,839
that's it for us

1301
00:47:19,839 --> 00:47:22,079
from us uh let me say again that we hope

1302
00:47:22,079 --> 00:47:22,880
to

1303
00:47:22,880 --> 00:47:25,920
get this to working group last call

1304
00:47:25,920 --> 00:47:27,080
so if anyone

1305
00:47:27,080 --> 00:47:28,319
[Music]

1306
00:47:28,319 --> 00:47:30,720
has questions or comments

1307
00:47:30,720 --> 00:47:33,919
please join me thanks

1308
00:47:37,200 --> 00:47:40,000
i say that oe is uh

1309
00:47:40,000 --> 00:47:42,400
in the in the queue yeah please go ahead

1310
00:47:42,400 --> 00:47:44,559
yeah

1311
00:47:46,160 --> 00:47:49,119
there you go please go ahead

1312
00:47:49,119 --> 00:47:50,960
i think the

1313
00:47:50,960 --> 00:47:54,640
list is uh overly strict

1314
00:47:54,640 --> 00:47:57,920
the the list of the algorithms to

1315
00:47:57,920 --> 00:48:01,440
abolish especially considering

1316
00:48:01,440 --> 00:48:03,359
what implication

1317
00:48:03,359 --> 00:48:06,160
move to or adding

1318
00:48:06,160 --> 00:48:08,079
post quantum stuff

1319
00:48:08,079 --> 00:48:10,640
will have

1320
00:48:10,640 --> 00:48:12,079
i'm sorry you're bringing it to the

1321
00:48:12,079 --> 00:48:13,839
beginning could you repeat that my

1322
00:48:13,839 --> 00:48:16,319
apologies

1323
00:48:16,880 --> 00:48:18,400
uh that's okay

1324
00:48:18,400 --> 00:48:21,119
i said that in my opinion

1325
00:48:21,119 --> 00:48:22,079
the

1326
00:48:22,079 --> 00:48:25,280
set of algorithms to proscribe

1327
00:48:25,280 --> 00:48:29,119
is unnecessarily strict

1328
00:48:29,119 --> 00:48:32,839
especially in view of

1329
00:48:32,839 --> 00:48:36,079
the protocol logic

1330
00:48:36,079 --> 00:48:40,000
that post-quantum algorithms will

1331
00:48:40,000 --> 00:48:42,079
impose

1332
00:48:42,079 --> 00:48:44,480
i think i should stop here at least for

1333
00:48:44,480 --> 00:48:46,480
now

1334
00:48:46,480 --> 00:48:50,160
all right uh i'm i'm not sure uh i i got

1335
00:48:50,160 --> 00:48:52,240
your intent but uh we can take it to the

1336
00:48:52,240 --> 00:48:55,119
list or maybe if we have time during

1337
00:48:55,119 --> 00:48:57,440
this session we can

1338
00:48:57,440 --> 00:48:59,280
you can continue

1339
00:48:59,280 --> 00:49:02,440
all right

1340
00:49:03,680 --> 00:49:05,680
all right

1341
00:49:05,680 --> 00:49:06,960
thanks okay

1342
00:49:06,960 --> 00:49:12,160
uh scott floor cisco systems uh about uh

1343
00:49:12,240 --> 00:49:14,558
mike

1344
00:49:15,200 --> 00:49:18,800
okay uh scott flora cisco systems uh as

1345
00:49:18,800 --> 00:49:20,640
for checking for the group structure

1346
00:49:20,640 --> 00:49:23,119
unless it's a safe crime we do not pass

1347
00:49:23,119 --> 00:49:26,720
enough informa uh information to to to

1348
00:49:26,720 --> 00:49:28,880
check the group structure and even a

1349
00:49:28,880 --> 00:49:31,839
safe prime it's it's it's it's not cheap

1350
00:49:31,839 --> 00:49:34,480
i would recommend just a abolish just uh

1351
00:49:34,480 --> 00:49:36,880
just forbidding all uh

1352
00:49:36,880 --> 00:49:39,440
uh any anything other than a name uh

1353
00:49:39,440 --> 00:49:41,359
name group

1354
00:49:41,359 --> 00:49:42,480
thank you

1355
00:49:42,480 --> 00:49:43,280
yeah

1356
00:49:43,280 --> 00:49:45,839
all right thanks

1357
00:49:47,599 --> 00:49:49,920
mike ellsworth this is not really a

1358
00:49:49,920 --> 00:49:52,400
comment on your draft but more of a rant

1359
00:49:52,400 --> 00:49:55,119
um i'm a pen tester professionally and

1360
00:49:55,119 --> 00:49:57,680
in the last like six months i've seen

1361
00:49:57,680 --> 00:49:59,520
automated scanning tools are starting to

1362
00:49:59,520 --> 00:50:01,520
freak out about um

1363
00:50:01,520 --> 00:50:02,720
like group

1364
00:50:02,720 --> 00:50:05,520
dh groups that are not random or the dh

1365
00:50:05,520 --> 00:50:07,359
groups that the tool knows about and

1366
00:50:07,359 --> 00:50:08,880
i've had banks ask me like how do i

1367
00:50:08,880 --> 00:50:10,480
generate my own dh params and put them

1368
00:50:10,480 --> 00:50:12,000
in tomcat and i don't know where the

1369
00:50:12,000 --> 00:50:14,720
tools got this idea or how we can like

1370
00:50:14,720 --> 00:50:16,160
but it's super frustrating coming up

1371
00:50:16,160 --> 00:50:19,598
like almost weekly at this point

1372
00:50:20,319 --> 00:50:23,200
all right thanks

1373
00:50:23,839 --> 00:50:25,280
uh hi victor

1374
00:50:25,280 --> 00:50:26,800
uh google

1375
00:50:26,800 --> 00:50:29,359
uh uh thanks for singling out postfix i

1376
00:50:29,359 --> 00:50:31,599
think it's far from the only one that

1377
00:50:31,599 --> 00:50:35,839
has you know built-in default groups uh

1378
00:50:35,839 --> 00:50:37,599
and even in postfix that depending on

1379
00:50:37,599 --> 00:50:41,440
the version you might see more than one

1380
00:50:41,440 --> 00:50:44,240
it changed in 3.7 release

1381
00:50:44,240 --> 00:50:46,720
so i don't know whether it's possible to

1382
00:50:46,720 --> 00:50:49,520
whack them all all the

1383
00:50:49,520 --> 00:50:53,200
safe but not a priori known built-in

1384
00:50:53,200 --> 00:50:55,359
groups and various products that seems

1385
00:50:55,359 --> 00:50:57,760
like a difficult challenge to

1386
00:50:57,760 --> 00:51:00,800
keep track of them all

1387
00:51:00,880 --> 00:51:03,680
i see thanks

1388
00:51:04,720 --> 00:51:07,200
i think ben keduck wanted to speak he's

1389
00:51:07,200 --> 00:51:08,400
online yeah

1390
00:51:08,400 --> 00:51:11,040
hi yeah ben katek back and a nice segue

1391
00:51:11,040 --> 00:51:13,520
from victor's comment which uh is just

1392
00:51:13,520 --> 00:51:15,119
me sort of spitballing brainstorming on

1393
00:51:15,119 --> 00:51:16,559
the fly here but

1394
00:51:16,559 --> 00:51:19,200
what would would we get enough if we

1395
00:51:19,200 --> 00:51:21,280
went and made it easy to

1396
00:51:21,280 --> 00:51:23,760
register new named groups for these

1397
00:51:23,760 --> 00:51:25,280
things that are already wide it might be

1398
00:51:25,280 --> 00:51:27,280
deployed such as what postx has or

1399
00:51:27,280 --> 00:51:29,200
anything else like would that get us

1400
00:51:29,200 --> 00:51:31,520
enough

1401
00:51:31,520 --> 00:51:33,280
enough properties that we would be able

1402
00:51:33,280 --> 00:51:35,040
to leverage that for the purposes of

1403
00:51:35,040 --> 00:51:37,680
this document

1404
00:51:37,680 --> 00:51:40,240
i'm not sure why i got the question

1405
00:51:40,240 --> 00:51:43,520
well so like we have some

1406
00:51:43,520 --> 00:51:46,000
widely deployed groups that are not like

1407
00:51:46,000 --> 00:51:48,160
the specific well-known named groups

1408
00:51:48,160 --> 00:51:50,640
that are currently in our infrastructure

1409
00:51:50,640 --> 00:51:52,880
and so we could say okay well we know

1410
00:51:52,880 --> 00:51:54,960
what these are they're safe let's name

1411
00:51:54,960 --> 00:51:57,200
them and now we have named groups that

1412
00:51:57,200 --> 00:51:59,920
we could treat on a more even footing to

1413
00:51:59,920 --> 00:52:01,760
the other things that we have

1414
00:52:01,760 --> 00:52:03,440
but i don't remember the details of

1415
00:52:03,440 --> 00:52:05,359
whether that's actually quite enough for

1416
00:52:05,359 --> 00:52:07,920
this purpose

1417
00:52:08,960 --> 00:52:10,480
um

1418
00:52:10,480 --> 00:52:11,839
so it's not necessarily a question for

1419
00:52:11,839 --> 00:52:14,720
you as much as to the room

1420
00:52:14,720 --> 00:52:18,960
yeah um all right thanks

1421
00:52:18,960 --> 00:52:20,960
i'm not sure how that would work to be

1422
00:52:20,960 --> 00:52:22,319
honest i'm not familiar enough with the

1423
00:52:22,319 --> 00:52:23,760
details

1424
00:52:23,760 --> 00:52:25,680
thanks

1425
00:52:25,680 --> 00:52:27,119
all right this is daniel kahn gilmore

1426
00:52:27,119 --> 00:52:28,960
from the aclu sorry i failed to get in

1427
00:52:28,960 --> 00:52:30,640
the queue electronically

1428
00:52:30,640 --> 00:52:34,880
um uh i wanted to reflect on the uh the

1429
00:52:34,880 --> 00:52:37,920
pen testing comment um and where that uh

1430
00:52:37,920 --> 00:52:41,599
where that idea comes from right so

1431
00:52:41,599 --> 00:52:44,559
uh the concern is if you have a known

1432
00:52:44,559 --> 00:52:46,960
group then some adversary can do a

1433
00:52:46,960 --> 00:52:48,720
precomputation based attack against the

1434
00:52:48,720 --> 00:52:51,680
known groups therefore it feels safer to

1435
00:52:51,680 --> 00:52:53,760
do an arbitrary group

1436
00:52:53,760 --> 00:52:55,680
in practice in the whole ecosystem given

1437
00:52:55,680 --> 00:52:57,680
that you can't as a client tell whether

1438
00:52:57,680 --> 00:53:01,040
that's a known group or not um

1439
00:53:01,040 --> 00:53:03,040
that's not safe right because we you

1440
00:53:03,040 --> 00:53:04,319
could be attacked by the server that

1441
00:53:04,319 --> 00:53:06,160
you're talking to who's just giving you

1442
00:53:06,160 --> 00:53:07,280
bad groups or somebody could have

1443
00:53:07,280 --> 00:53:08,880
misgenerated a group

1444
00:53:08,880 --> 00:53:11,040
so there's a lot to be said for us as a

1445
00:53:11,040 --> 00:53:13,599
standards organization to say

1446
00:53:13,599 --> 00:53:15,920
that we think that approach of choosing

1447
00:53:15,920 --> 00:53:18,400
random groups is is a bad idea but

1448
00:53:18,400 --> 00:53:20,000
that's not going to stop people who are

1449
00:53:20,000 --> 00:53:22,319
afraid of precomputation attacks by a

1450
00:53:22,319 --> 00:53:24,319
powerful adversary against name groups

1451
00:53:24,319 --> 00:53:26,319
from raising the same kinds of concerns

1452
00:53:26,319 --> 00:53:29,359
that you talked about so

1453
00:53:29,359 --> 00:53:31,200
uh maybe what the specification needs to

1454
00:53:31,200 --> 00:53:33,359
do is say unless there was a known

1455
00:53:33,359 --> 00:53:35,760
pre-agreement with the third with with

1456
00:53:35,760 --> 00:53:38,240
the peer that you're talking with right

1457
00:53:38,240 --> 00:53:39,680
we don't i don't believe anybody here

1458
00:53:39,680 --> 00:53:41,599
actually thinks that it's wrong for a

1459
00:53:41,599 --> 00:53:43,599
private organization to use their own

1460
00:53:43,599 --> 00:53:44,800
groups that they've done their own

1461
00:53:44,800 --> 00:53:47,040
verification on that they could that

1462
00:53:47,040 --> 00:53:48,400
they could list

1463
00:53:48,400 --> 00:53:50,079
right i'm not recommending people do

1464
00:53:50,079 --> 00:53:51,680
that but

1465
00:53:51,680 --> 00:53:53,440
the the pushback that you're going to

1466
00:53:53,440 --> 00:53:55,839
get from these pen testing tools needs

1467
00:53:55,839 --> 00:53:57,280
to we need to be able to say this

1468
00:53:57,280 --> 00:53:59,760
pushback is wrong and here's why and

1469
00:53:59,760 --> 00:54:01,760
here's a statement that understands why

1470
00:54:01,760 --> 00:54:03,359
the pen testing tools

1471
00:54:03,359 --> 00:54:05,280
thought they had the right idea

1472
00:54:05,280 --> 00:54:07,040
we need to acknowledge that concern so

1473
00:54:07,040 --> 00:54:08,559
that we can actually

1474
00:54:08,559 --> 00:54:10,880
get them to stop making these requests

1475
00:54:10,880 --> 00:54:11,760
right

1476
00:54:11,760 --> 00:54:13,359
and so i don't know i'm not sure exactly

1477
00:54:13,359 --> 00:54:14,960
the right way to do that in this in this

1478
00:54:14,960 --> 00:54:17,119
wording i like ben's suggestion of like

1479
00:54:17,119 --> 00:54:20,000
let's have a a registry that people can

1480
00:54:20,000 --> 00:54:21,680
put you know widely distributed groups

1481
00:54:21,680 --> 00:54:23,599
in that actually have been checked

1482
00:54:23,599 --> 00:54:26,640
um but i but i'm very reluctant

1483
00:54:26,640 --> 00:54:28,319
to like i don't think just the fact that

1484
00:54:28,319 --> 00:54:30,240
we say hey don't use anything like this

1485
00:54:30,240 --> 00:54:31,760
will fix this

1486
00:54:31,760 --> 00:54:32,720
um

1487
00:54:32,720 --> 00:54:34,240
pen testing tool complaint problem i

1488
00:54:34,240 --> 00:54:35,760
think we need to we need to address it

1489
00:54:35,760 --> 00:54:37,599
head on

1490
00:54:37,599 --> 00:54:39,760
yeah let me add that i think all of

1491
00:54:39,760 --> 00:54:41,359
these groups are kind of

1492
00:54:41,359 --> 00:54:43,280
on their way out so this is finite field

1493
00:54:43,280 --> 00:54:44,880
dpm and

1494
00:54:44,880 --> 00:54:46,720
uh people are

1495
00:54:46,720 --> 00:54:49,119
like in the process of switching to ecdh

1496
00:54:49,119 --> 00:54:50,640
i would hope

1497
00:54:50,640 --> 00:54:52,319
uh

1498
00:54:52,319 --> 00:54:54,640
thanks

1499
00:54:55,440 --> 00:54:56,559
um

1500
00:54:56,559 --> 00:54:58,559
yeah please go ahead martin

1501
00:54:58,559 --> 00:55:01,280
yeah martin thompson the um

1502
00:55:01,280 --> 00:55:03,040
discussion in in chat here is kind of

1503
00:55:03,040 --> 00:55:05,520
interesting i think that there's several

1504
00:55:05,520 --> 00:55:08,160
of us who sort of realized that in tls12

1505
00:55:08,160 --> 00:55:09,839
and earlier using

1506
00:55:09,839 --> 00:55:12,240
the ffdhe groups which

1507
00:55:12,240 --> 00:55:16,000
only specify the um

1508
00:55:16,000 --> 00:55:18,000
the one value essentially which doesn't

1509
00:55:18,000 --> 00:55:20,079
let you do the validation of scot point

1510
00:55:20,079 --> 00:55:21,119
points out

1511
00:55:21,119 --> 00:55:22,720
the only way that you can do that safely

1512
00:55:22,720 --> 00:55:25,520
is to have a list of values that you you

1513
00:55:25,520 --> 00:55:26,880
would accept and i've implemented that

1514
00:55:26,880 --> 00:55:29,280
with the 79 19

1515
00:55:29,280 --> 00:55:30,240
groups

1516
00:55:30,240 --> 00:55:31,839
and we just can't turn that on

1517
00:55:31,839 --> 00:55:33,200
because in practice people use other

1518
00:55:33,200 --> 00:55:36,640
ones um and ultimately we concluded that

1519
00:55:36,640 --> 00:55:38,720
the only safe way to do this was to turn

1520
00:55:38,720 --> 00:55:42,000
off ffdhe in tls12

1521
00:55:42,000 --> 00:55:42,960
and

1522
00:55:42,960 --> 00:55:44,160
you can do it in one three because you

1523
00:55:44,160 --> 00:55:45,680
have the named groups

1524
00:55:45,680 --> 00:55:47,760
but um we couldn't we couldn't turn it

1525
00:55:47,760 --> 00:55:50,880
um 79 19 on to tls 1.2 because it's just

1526
00:55:50,880 --> 00:55:52,640
impractical and then with people going

1527
00:55:52,640 --> 00:55:55,200
off and generating their own groups

1528
00:55:55,200 --> 00:55:56,559
you've got no way of knowing that

1529
00:55:56,559 --> 00:55:57,920
they're okay

1530
00:55:57,920 --> 00:56:00,319
a priori so this is exactly the point

1531
00:56:00,319 --> 00:56:02,319
that dkg made if you've got your own

1532
00:56:02,319 --> 00:56:03,920
private agreement that's great

1533
00:56:03,920 --> 00:56:05,280
but you can also have your own private

1534
00:56:05,280 --> 00:56:08,079
protocol at that point so um we're not

1535
00:56:08,079 --> 00:56:10,720
adding a lot of value here

1536
00:56:10,720 --> 00:56:12,799
i tend to agree with david benjamin

1537
00:56:12,799 --> 00:56:15,599
which is just a flat prohibition on the

1538
00:56:15,599 --> 00:56:19,359
use of ffdhe in tls 1.2 would be

1539
00:56:19,359 --> 00:56:22,960
the the most sensible thing to do here

1540
00:56:24,000 --> 00:56:25,760
that would be a major

1541
00:56:25,760 --> 00:56:28,319
revision to the document but we can

1542
00:56:28,319 --> 00:56:31,839
enjoy that as well thanks

1543
00:56:32,400 --> 00:56:33,770
uh yeah um

1544
00:56:33,770 --> 00:56:35,200
[Music]

1545
00:56:35,200 --> 00:56:36,000
uh

1546
00:56:36,000 --> 00:56:37,839
i hope i'm pronouncing your name right

1547
00:56:37,839 --> 00:56:41,279
uh you're in the cube let's go ahead

1548
00:56:41,520 --> 00:56:44,640
yes you are and i wanted to agree with

1549
00:56:44,640 --> 00:56:45,760
the

1550
00:56:45,760 --> 00:56:46,880
previous

1551
00:56:46,880 --> 00:56:49,520
speaker and say that

1552
00:56:49,520 --> 00:56:51,200
in my opinion

1553
00:56:51,200 --> 00:56:52,400
we should

1554
00:56:52,400 --> 00:56:56,240
neither recommend nor prescribe use of

1555
00:56:56,240 --> 00:56:58,319
those

1556
00:56:58,319 --> 00:57:00,640
how do i call it special

1557
00:57:00,640 --> 00:57:02,160
groups

1558
00:57:02,160 --> 00:57:02,960
if

1559
00:57:02,960 --> 00:57:05,920
user organization

1560
00:57:05,920 --> 00:57:08,960
believes that it knows enough about them

1561
00:57:08,960 --> 00:57:11,040
it is not our job

1562
00:57:11,040 --> 00:57:12,880
to tell them otherwise

1563
00:57:12,880 --> 00:57:15,680
besides in the likelihood they do know

1564
00:57:15,680 --> 00:57:17,119
enough

1565
00:57:17,119 --> 00:57:19,599
thank you so could you repeat that last

1566
00:57:19,599 --> 00:57:22,400
part of the sentence

1567
00:57:24,559 --> 00:57:27,119
i said in all likelihood

1568
00:57:27,119 --> 00:57:27,920
if

1569
00:57:27,920 --> 00:57:29,040
they

1570
00:57:29,040 --> 00:57:30,480
turn to that

1571
00:57:30,480 --> 00:57:32,000
solution

1572
00:57:32,000 --> 00:57:34,880
they probably do know enough

1573
00:57:34,880 --> 00:57:36,400
to use it

1574
00:57:36,400 --> 00:57:39,119
it's not out of ignorance that they made

1575
00:57:39,119 --> 00:57:41,839
that choice

1576
00:57:42,559 --> 00:57:45,280
all right thanks

1577
00:57:45,599 --> 00:57:49,680
uh any other questions or comments

1578
00:57:50,160 --> 00:57:52,000
all right so i guess i will try to

1579
00:57:52,000 --> 00:57:53,920
summarize the points that everyone

1580
00:57:53,920 --> 00:57:55,359
brought up and take it to the list

1581
00:57:55,359 --> 00:57:57,680
thanks

1582
00:57:59,359 --> 00:58:02,160
all right thanks nimrod

1583
00:58:02,160 --> 00:58:03,760
now we'll move into the individual draft

1584
00:58:03,760 --> 00:58:08,440
presentation starting with the uh

1585
00:58:08,720 --> 00:58:11,200
yes uh sbcb validation requests for

1586
00:58:11,200 --> 00:58:14,078
details from 0.3

1587
00:58:20,640 --> 00:58:22,799
hi my name is rob siegers i'm with the

1588
00:58:22,799 --> 00:58:26,000
faa next slide please

1589
00:58:26,000 --> 00:58:29,440
so in global aviation we are defining a

1590
00:58:29,440 --> 00:58:33,280
trust framework uh to be able to use pki

1591
00:58:33,280 --> 00:58:35,440
and to harmonize and map commercial

1592
00:58:35,440 --> 00:58:37,920
aviation identities and access

1593
00:58:37,920 --> 00:58:39,440
requirements to a common set of

1594
00:58:39,440 --> 00:58:42,079
operating rules something

1595
00:58:42,079 --> 00:58:44,960
that may seem very common within the

1596
00:58:44,960 --> 00:58:47,599
internet and within even

1597
00:58:47,599 --> 00:58:50,000
some examples of u.s federal bridge but

1598
00:58:50,000 --> 00:58:52,000
it's have never been done so far in

1599
00:58:52,000 --> 00:58:53,680
aviation

1600
00:58:53,680 --> 00:58:54,880
and

1601
00:58:54,880 --> 00:58:57,040
we have been using

1602
00:58:57,040 --> 00:58:58,880
something that has not been used very

1603
00:58:58,880 --> 00:59:00,799
much which is the

1604
00:59:00,799 --> 00:59:03,280
server based certificate certificate

1605
00:59:03,280 --> 00:59:05,760
validation protocol

1606
00:59:05,760 --> 00:59:08,240
and to validate

1607
00:59:08,240 --> 00:59:10,960
trust and identity

1608
00:59:10,960 --> 00:59:12,640
because one of the challenges in

1609
00:59:12,640 --> 00:59:14,480
aviation is that you have a lot of

1610
00:59:14,480 --> 00:59:16,240
different organizations

1611
00:59:16,240 --> 00:59:17,040
that

1612
00:59:17,040 --> 00:59:21,119
are not centralized uh you have iko that

1613
00:59:21,119 --> 00:59:23,359
operate on a principle of state

1614
00:59:23,359 --> 00:59:26,960
sovereignty and the software is quite

1615
00:59:26,960 --> 00:59:28,720
often

1616
00:59:28,720 --> 00:59:30,079
custom

1617
00:59:30,079 --> 00:59:32,000
and developed owned and operated and

1618
00:59:32,000 --> 00:59:34,319
managed independently so there's not no

1619
00:59:34,319 --> 00:59:36,960
easy way to say i can

1620
00:59:36,960 --> 00:59:38,400
um

1621
00:59:38,400 --> 00:59:40,079
you know

1622
00:59:40,079 --> 00:59:42,480
send out trust lists with my software

1623
00:59:42,480 --> 00:59:43,680
updates

1624
00:59:43,680 --> 00:59:46,480
to the different entities and

1625
00:59:46,480 --> 00:59:49,520
then like with ssl on the web you you

1626
00:59:49,520 --> 00:59:52,240
can trust who connect

1627
00:59:52,240 --> 00:59:55,680
who i am when you connect to me

1628
00:59:55,680 --> 00:59:58,079
so the interoperability is key and we

1629
00:59:58,079 --> 01:00:00,319
have to use standardized protocols next

1630
01:00:00,319 --> 01:00:02,799
slide please

1631
01:00:02,799 --> 01:00:04,240
so

1632
01:00:04,240 --> 01:00:06,880
aviation traditionally has been using a

1633
01:00:06,880 --> 01:00:09,440
lot of custom protocols

1634
01:00:09,440 --> 01:00:11,599
and we're moving away from that

1635
01:00:11,599 --> 01:00:13,040
and

1636
01:00:13,040 --> 01:00:15,920
i have an agreement with

1637
01:00:15,920 --> 01:00:18,799
iko communication panel

1638
01:00:18,799 --> 01:00:19,839
airing

1639
01:00:19,839 --> 01:00:24,559
858 for avionics and also with rtca

1640
01:00:24,559 --> 01:00:26,839
subcommittee 223 for air-to-ground

1641
01:00:26,839 --> 01:00:30,559
communication that if we can get this

1642
01:00:30,559 --> 01:00:33,760
to an ietf standard that they are

1643
01:00:33,760 --> 01:00:35,520
adopting this as part of their

1644
01:00:35,520 --> 01:00:38,880
implementation of the ip services for

1645
01:00:38,880 --> 01:00:42,720
aviation and we are moving from real old

1646
01:00:42,720 --> 01:00:43,920
a cars

1647
01:00:43,920 --> 01:00:47,119
via europe having used osi

1648
01:00:47,119 --> 01:00:49,920
to now ip services which is a really big

1649
01:00:49,920 --> 01:00:52,400
step for aviation

1650
01:00:52,400 --> 01:00:54,240
and

1651
01:00:54,240 --> 01:00:56,640
using trustless and crls for this

1652
01:00:56,640 --> 01:00:59,280
purpose is very difficult because you

1653
01:00:59,280 --> 01:01:01,440
have a lot of entities uh flying

1654
01:01:01,440 --> 01:01:03,599
entities aircraft with different

1655
01:01:03,599 --> 01:01:06,240
commercial airlines that all have to

1656
01:01:06,240 --> 01:01:09,200
communicate via data communications with

1657
01:01:09,200 --> 01:01:11,280
the with different

1658
01:01:11,280 --> 01:01:14,160
air navigation service providers in 193

1659
01:01:14,160 --> 01:01:15,440
countries

1660
01:01:15,440 --> 01:01:16,880
and the airlines

1661
01:01:16,880 --> 01:01:18,720
so you can see

1662
01:01:18,720 --> 01:01:20,400
it becomes a big

1663
01:01:20,400 --> 01:01:22,079
maintenance problem for the aircraft

1664
01:01:22,079 --> 01:01:24,319
itself in that case even if you use

1665
01:01:24,319 --> 01:01:27,040
short-lived certificates

1666
01:01:27,040 --> 01:01:27,839
and

1667
01:01:27,839 --> 01:01:30,400
so grant certification validation on the

1668
01:01:30,400 --> 01:01:34,799
aircraft using suv validation

1669
01:01:34,799 --> 01:01:36,960
basically would only require a very

1670
01:01:36,960 --> 01:01:41,040
small one or a few trust anchors that

1671
01:01:41,040 --> 01:01:42,319
don't change

1672
01:01:42,319 --> 01:01:44,079
and

1673
01:01:44,079 --> 01:01:46,720
we are proposing a new svp validation

1674
01:01:46,720 --> 01:01:47,839
extension

1675
01:01:47,839 --> 01:01:50,480
to remove the burden of the sevp request

1676
01:01:50,480 --> 01:01:52,480
from the aircraft client

1677
01:01:52,480 --> 01:01:54,799
and having the ground server making the

1678
01:01:54,799 --> 01:01:56,960
scpp request provide the result to the

1679
01:01:56,960 --> 01:01:57,920
client

1680
01:01:57,920 --> 01:02:00,640
and therefore also reducing the

1681
01:02:00,640 --> 01:02:04,480
complexity and the cost of avionics

1682
01:02:04,480 --> 01:02:07,280
software to have to calculate uh the

1683
01:02:07,280 --> 01:02:09,119
trust path

1684
01:02:09,119 --> 01:02:11,839
and i'm handing it over to ashley

1685
01:02:11,839 --> 01:02:14,319
xlite

1686
01:02:14,799 --> 01:02:18,640
hi i'm ashley kaufman is this too tall

1687
01:02:18,640 --> 01:02:20,960
sorry is that better

1688
01:02:20,960 --> 01:02:24,799
okay um i'm ashley cottman uh so this

1689
01:02:24,799 --> 01:02:27,359
shows a diagram of how i'm still not

1690
01:02:27,359 --> 01:02:30,880
close enough okay is that better

1691
01:02:33,680 --> 01:02:35,520
all right

1692
01:02:35,520 --> 01:02:37,039
is that better

1693
01:02:37,039 --> 01:02:39,039
all right sorry i don't speak loudly to

1694
01:02:39,039 --> 01:02:40,400
start with

1695
01:02:40,400 --> 01:02:41,680
um

1696
01:02:41,680 --> 01:02:43,599
okay so this shows a diagram of how it

1697
01:02:43,599 --> 01:02:47,119
could be used in aviation um so in our

1698
01:02:47,119 --> 01:02:50,799
case the aircraft is the dtls client um

1699
01:02:50,799 --> 01:02:53,359
when it sends down the hello

1700
01:02:53,359 --> 01:02:55,039
message to the ground system it would

1701
01:02:55,039 --> 01:02:59,039
include with it this new dtls extension

1702
01:02:59,039 --> 01:03:03,359
of scvp validation request um and a

1703
01:03:03,359 --> 01:03:04,720
structure

1704
01:03:04,720 --> 01:03:06,799
which optionally includes a list of the

1705
01:03:06,799 --> 01:03:09,839
scvp responders that it trusts

1706
01:03:09,839 --> 01:03:12,079
if it does not include any then it

1707
01:03:12,079 --> 01:03:13,920
insinuates it's explicitly known by the

1708
01:03:13,920 --> 01:03:17,359
ground system which scvp responders

1709
01:03:17,359 --> 01:03:19,039
the aircraft trusts

1710
01:03:19,039 --> 01:03:20,720
it also can optionally send down a list

1711
01:03:20,720 --> 01:03:23,359
of trustless trust anchors

1712
01:03:23,359 --> 01:03:24,160
if

1713
01:03:24,160 --> 01:03:25,920
it includes the trust anchors and the

1714
01:03:25,920 --> 01:03:28,480
certificate path has to

1715
01:03:28,480 --> 01:03:30,799
terminate at one of those trust anchors

1716
01:03:30,799 --> 01:03:33,839
if not it is because the scvp server has

1717
01:03:33,839 --> 01:03:34,640
been

1718
01:03:34,640 --> 01:03:37,039
pre-configured with the trust anchor

1719
01:03:37,039 --> 01:03:39,839
with which to terminate the path

1720
01:03:39,839 --> 01:03:42,319
and finally it optionally can include

1721
01:03:42,319 --> 01:03:44,799
scbp request settings

1722
01:03:44,799 --> 01:03:46,559
um so

1723
01:03:46,559 --> 01:03:48,799
we've defined a few of these and i'll

1724
01:03:48,799 --> 01:03:50,960
show those later

1725
01:03:50,960 --> 01:03:53,039
but the idea is to keep those request

1726
01:03:53,039 --> 01:03:55,359
settings small to keep the request size

1727
01:03:55,359 --> 01:03:58,000
down and only to include a minimum of

1728
01:03:58,000 --> 01:03:59,440
what you need

1729
01:03:59,440 --> 01:04:03,440
to optimize the request for the aircraft

1730
01:04:03,440 --> 01:04:05,440
when the ground system receives

1731
01:04:05,440 --> 01:04:08,400
that validation request

1732
01:04:08,400 --> 01:04:10,720
it optionally can have a cash it's

1733
01:04:10,720 --> 01:04:13,039
suggested to have a cash and if there is

1734
01:04:13,039 --> 01:04:14,799
a matching value in the cash to return

1735
01:04:14,799 --> 01:04:15,839
that up

1736
01:04:15,839 --> 01:04:17,200
if not to

1737
01:04:17,200 --> 01:04:20,319
translate that validation request into

1738
01:04:20,319 --> 01:04:22,559
an seb cbp

1739
01:04:22,559 --> 01:04:25,599
cv request object

1740
01:04:25,599 --> 01:04:28,799
and send it to the sevp server and

1741
01:04:28,799 --> 01:04:31,520
receive back the response from that

1742
01:04:31,520 --> 01:04:34,000
server the response is signed by the

1743
01:04:34,000 --> 01:04:36,319
trusted suvp server so it can be trusted

1744
01:04:36,319 --> 01:04:37,760
by the aircraft

1745
01:04:37,760 --> 01:04:39,680
and it is sent back up to the aircraft

1746
01:04:39,680 --> 01:04:41,280
with the certificate

1747
01:04:41,280 --> 01:04:44,079
of the server

1748
01:04:45,839 --> 01:04:48,558
next slide please

1749
01:04:49,200 --> 01:04:50,880
all right so this shows it in a

1750
01:04:50,880 --> 01:04:53,520
simplified handshake diagram

1751
01:04:53,520 --> 01:04:54,799
so you can see there's very little

1752
01:04:54,799 --> 01:04:57,440
changes um to the actual handshakes it's

1753
01:04:57,440 --> 01:04:59,839
a extension on the client hello message

1754
01:04:59,839 --> 01:05:02,160
a validation request

1755
01:05:02,160 --> 01:05:04,640
for this message we have

1756
01:05:04,640 --> 01:05:07,039
defined it for type scvp but have

1757
01:05:07,039 --> 01:05:08,960
allowed it to be expanded to other

1758
01:05:08,960 --> 01:05:11,200
validation protocols as well

1759
01:05:11,200 --> 01:05:13,680
for future use

1760
01:05:13,680 --> 01:05:15,280
and um

1761
01:05:15,280 --> 01:05:17,599
then the sevp

1762
01:05:17,599 --> 01:05:20,480
cv request and cv response is um

1763
01:05:20,480 --> 01:05:23,440
existing that's that's not new um it's

1764
01:05:23,440 --> 01:05:27,280
new to incorporated into the tls server

1765
01:05:27,280 --> 01:05:29,440
um and then there's a new extension to

1766
01:05:29,440 --> 01:05:30,559
the um

1767
01:05:30,559 --> 01:05:32,160
certificate message

1768
01:05:32,160 --> 01:05:35,200
um of validation request with the path

1769
01:05:35,200 --> 01:05:37,119
validation information

1770
01:05:37,119 --> 01:05:40,000
again it's defined for type scpp and

1771
01:05:40,000 --> 01:05:41,680
would include

1772
01:05:41,680 --> 01:05:44,799
that cv response back to the aircraft or

1773
01:05:44,799 --> 01:05:48,400
in this case back to the tls client

1774
01:05:49,520 --> 01:05:52,799
so for the scvp validation request type

1775
01:05:52,799 --> 01:05:55,200
there is a mapping of those extensions

1776
01:05:55,200 --> 01:05:57,760
that i mentioned earlier

1777
01:05:57,760 --> 01:06:00,079
between the path validation request

1778
01:06:00,079 --> 01:06:01,839
message and the

1779
01:06:01,839 --> 01:06:04,000
cv request message that's defined in the

1780
01:06:04,000 --> 01:06:05,280
rfc as well

1781
01:06:05,280 --> 01:06:07,119
or in the proposal as well

1782
01:06:07,119 --> 01:06:09,839
and um

1783
01:06:09,839 --> 01:06:13,440
yeah i think that pretty much

1784
01:06:16,839 --> 01:06:19,760
covers feel like i talked really fast

1785
01:06:19,760 --> 01:06:23,200
there's got to be some questions

1786
01:06:25,440 --> 01:06:26,559
oh okay

1787
01:06:26,559 --> 01:06:29,520
all right yeah any questions

1788
01:06:30,640 --> 01:06:32,799
uh we'll do the question yeah ben go

1789
01:06:32,799 --> 01:06:34,960
ahead

1790
01:06:35,440 --> 01:06:38,559
hi ben kaydock so i guess the the tls

1791
01:06:38,559 --> 01:06:39,760
part of this

1792
01:06:39,760 --> 01:06:41,520
seems to make a lot of sense is pretty

1793
01:06:41,520 --> 01:06:43,680
straightforward uh and it seems

1794
01:06:43,680 --> 01:06:45,280
completely reasonable

1795
01:06:45,280 --> 01:06:48,240
i'm not sure if we are proposing or

1796
01:06:48,240 --> 01:06:49,599
saying that we need to additionally

1797
01:06:49,599 --> 01:06:51,280
specify the

1798
01:06:51,280 --> 01:06:53,119
sort of right hand column on this

1799
01:06:53,119 --> 01:06:54,720
exchange on the current slide where the

1800
01:06:54,720 --> 01:06:57,440
tls server goes to the scpp responder

1801
01:06:57,440 --> 01:07:00,559
does that exist already

1802
01:07:00,559 --> 01:07:03,440
so not from the tls server so the the

1803
01:07:03,440 --> 01:07:06,480
protocol the scbp protocol exists

1804
01:07:06,480 --> 01:07:07,359
um

1805
01:07:07,359 --> 01:07:08,319
today

1806
01:07:08,319 --> 01:07:10,559
it would be adding that

1807
01:07:10,559 --> 01:07:13,440
functionality to the tls server to make

1808
01:07:13,440 --> 01:07:17,119
the call and receive the response

1809
01:07:18,240 --> 01:07:20,000
uh but like the

1810
01:07:20,000 --> 01:07:22,079
but that's more a matter of coding in

1811
01:07:22,079 --> 01:07:24,240
the server than it is like defining the

1812
01:07:24,240 --> 01:07:28,640
protocol i guess that's my question

1813
01:07:28,640 --> 01:07:29,680
um

1814
01:07:29,680 --> 01:07:32,880
so there is a a mapping from the request

1815
01:07:32,880 --> 01:07:35,839
message coming from the client

1816
01:07:35,839 --> 01:07:37,680
to the request

1817
01:07:37,680 --> 01:07:40,880
going to the scbp server that's defined

1818
01:07:40,880 --> 01:07:42,079
uh in

1819
01:07:42,079 --> 01:07:43,280
the proposal

1820
01:07:43,280 --> 01:07:45,599
um and then there are

1821
01:07:45,599 --> 01:07:47,599
um

1822
01:07:47,599 --> 01:07:50,400
there are certain um

1823
01:07:50,400 --> 01:07:52,160
values that are only known to the server

1824
01:07:52,160 --> 01:07:53,920
that need to be checked in the response

1825
01:07:53,920 --> 01:07:56,640
coming back to verify that the the

1826
01:07:56,640 --> 01:07:58,720
response is valid before passing it up

1827
01:07:58,720 --> 01:08:00,400
to the aircraft

1828
01:08:00,400 --> 01:08:01,440
um

1829
01:08:01,440 --> 01:08:03,119
so there's a bit there's a bit more work

1830
01:08:03,119 --> 01:08:04,480
to do okay

1831
01:08:04,480 --> 01:08:07,480
thanks

1832
01:08:10,160 --> 01:08:12,558
yuri

1833
01:08:13,599 --> 01:08:16,080
uh do you have any concern

1834
01:08:16,080 --> 01:08:16,880
that

1835
01:08:16,880 --> 01:08:18,158
using

1836
01:08:18,158 --> 01:08:19,920
a full-blown

1837
01:08:19,920 --> 01:08:21,520
dtls

1838
01:08:21,520 --> 01:08:23,040
could

1839
01:08:23,040 --> 01:08:24,479
introduce

1840
01:08:24,479 --> 01:08:29,278
an unnecessary expense on uh

1841
01:08:29,679 --> 01:08:30,719
on a

1842
01:08:30,719 --> 01:08:35,198
cypher suite negotiation and

1843
01:08:36,839 --> 01:08:40,799
such you want to take that rob

1844
01:08:42,719 --> 01:08:43,520
in

1845
01:08:43,520 --> 01:08:45,920
in the in my experience

1846
01:08:45,920 --> 01:08:47,439
in my experience

1847
01:08:47,439 --> 01:08:48,799
using

1848
01:08:48,799 --> 01:08:51,679
or being in constrained

1849
01:08:51,679 --> 01:08:53,839
environment

1850
01:08:53,839 --> 01:08:58,319
we decided not to use dtls because we

1851
01:08:58,319 --> 01:08:59,439
did not

1852
01:08:59,439 --> 01:09:00,319
need

1853
01:09:00,319 --> 01:09:04,960
that much of flexibility and negotiation

1854
01:09:04,960 --> 01:09:08,080
but we cared very much about bits that

1855
01:09:08,080 --> 01:09:10,399
have to cross the air

1856
01:09:10,399 --> 01:09:13,520
do you have similar concerns

1857
01:09:13,520 --> 01:09:16,238
yes yuri um this is rob siegel's

1858
01:09:16,238 --> 01:09:19,198
responding so sc223 the

1859
01:09:19,198 --> 01:09:20,719
airground

1860
01:09:20,719 --> 01:09:24,719
subcommittee from rtca has profiled

1861
01:09:24,719 --> 01:09:28,000
the dtls protocol down to what they

1862
01:09:28,000 --> 01:09:29,600
exactly need

1863
01:09:29,600 --> 01:09:30,479
and

1864
01:09:30,479 --> 01:09:32,479
to ensure that that doesn't become an

1865
01:09:32,479 --> 01:09:33,439
issue

1866
01:09:33,439 --> 01:09:35,359
and i was actually very interested to

1867
01:09:35,359 --> 01:09:38,880
hear about the compressed tls

1868
01:09:38,880 --> 01:09:40,640
because that may be actually an option

1869
01:09:40,640 --> 01:09:46,040
to further encode that so thank you

1870
01:09:48,719 --> 01:09:51,120
uh hi this is hannes uh this is sort of

1871
01:09:51,120 --> 01:09:53,759
more in response to uri because uh this

1872
01:09:53,759 --> 01:09:56,000
topic comes up regularly um we've gone

1873
01:09:56,000 --> 01:09:57,440
through this numerous times in the

1874
01:09:57,440 --> 01:09:59,520
meanwhile on the question of like is

1875
01:09:59,520 --> 01:10:02,000
ddls something that you can use on iot

1876
01:10:02,000 --> 01:10:04,320
devices and the answer is

1877
01:10:04,320 --> 01:10:06,239
look at the papers look at the documents

1878
01:10:06,239 --> 01:10:08,080
we've done the profile it's deployed in

1879
01:10:08,080 --> 01:10:11,040
millions of devices even dls is deployed

1880
01:10:11,040 --> 01:10:13,280
in millions of iot devices

1881
01:10:13,280 --> 01:10:16,320
so like this topic has been answered uh

1882
01:10:16,320 --> 01:10:17,440
so there's

1883
01:10:17,440 --> 01:10:19,920
as you said like if you don't

1884
01:10:19,920 --> 01:10:21,679
send everything you have over the over

1885
01:10:21,679 --> 01:10:24,239
the air for no good reason then you are

1886
01:10:24,239 --> 01:10:26,959
completely fine

1887
01:10:28,080 --> 01:10:30,560
hi eric um i just

1888
01:10:30,560 --> 01:10:34,960
i just want to uh quickly add here that

1889
01:10:34,960 --> 01:10:38,000
iot can have different constraints

1890
01:10:38,000 --> 01:10:40,960
there is a computational constraint

1891
01:10:40,960 --> 01:10:45,440
and there is bandwidth constraint

1892
01:10:45,440 --> 01:10:48,719
right i was talking about the second

1893
01:10:48,719 --> 01:10:50,159
i believe honestly talking about all

1894
01:10:50,159 --> 01:10:53,199
these he does work on iot devices um so

1895
01:10:53,199 --> 01:10:55,199
uh erica scroll um so just i just want

1896
01:10:55,199 --> 01:10:56,560
to see if i can sharpen ben's point a

1897
01:10:56,560 --> 01:10:58,159
little bit to make sure i understand as

1898
01:10:58,159 --> 01:11:00,000
i understand it this is an entirely

1899
01:11:00,000 --> 01:11:02,480
stock scvp server on the right correct

1900
01:11:02,480 --> 01:11:05,840
good okay um so this does this seems

1901
01:11:05,840 --> 01:11:07,840
this is quite reasonable um we talked on

1902
01:11:07,840 --> 01:11:09,600
email i think a little bit um i guess my

1903
01:11:09,600 --> 01:11:11,840
question is what do you want um do you

1904
01:11:11,840 --> 01:11:13,199
want this adopted by the working group

1905
01:11:13,199 --> 01:11:14,480
do you want us to give you a code point

1906
01:11:14,480 --> 01:11:17,440
what are you hoping for here

1907
01:11:17,760 --> 01:11:19,520
um we would like

1908
01:11:19,520 --> 01:11:21,600
the help from the working group to get

1909
01:11:21,600 --> 01:11:24,480
this to a standards

1910
01:11:24,480 --> 01:11:28,320
and um we invite everyone to um review

1911
01:11:28,320 --> 01:11:31,120
and comment and to make sure it's uh

1912
01:11:31,120 --> 01:11:32,880
a good approach okay so it sounds like

1913
01:11:32,880 --> 01:11:34,560
you're asking for working group adoption

1914
01:11:34,560 --> 01:11:37,440
yes please um i i guess so i i'm sort of

1915
01:11:37,440 --> 01:11:39,440
provisionally in favor of that um

1916
01:11:39,440 --> 01:11:41,360
i guess my one question would be um

1917
01:11:41,360 --> 01:11:43,600
something we often have situations where

1918
01:11:43,600 --> 01:11:44,960
an external body wants us to do

1919
01:11:44,960 --> 01:11:46,719
something and where we have like a very

1920
01:11:46,719 --> 01:11:48,239
thin kind of like relationship with them

1921
01:11:48,239 --> 01:11:49,679
with like a couple people are you the

1922
01:11:49,679 --> 01:11:50,880
people we're talking to are there other

1923
01:11:50,880 --> 01:11:52,400
people that sort of show up and and help

1924
01:11:52,400 --> 01:11:53,679
us out because like

1925
01:11:53,679 --> 01:11:56,080
the the world um

1926
01:11:56,080 --> 01:11:57,520
the plan was

1927
01:11:57,520 --> 01:12:01,120
going forward to get uh airbus boeing

1928
01:12:01,120 --> 01:12:04,000
uh collins uh involved fantastic i just

1929
01:12:04,000 --> 01:12:05,040
want to make sure we actually capture

1930
01:12:05,040 --> 01:12:06,320
the entire space thank you that's

1931
01:12:06,320 --> 01:12:09,320
correct

1932
01:12:09,920 --> 01:12:13,840
bob squitz um i've uh rob segers has

1933
01:12:13,840 --> 01:12:16,560
pulled me into this uh fun and games and

1934
01:12:16,560 --> 01:12:19,679
so i can uh answer that yes the people

1935
01:12:19,679 --> 01:12:22,480
at the table are the

1936
01:12:22,480 --> 01:12:25,840
the airframe manufacturers the uh

1937
01:12:25,840 --> 01:12:28,159
other national caas

1938
01:12:28,159 --> 01:12:31,040
uh the uh

1939
01:12:31,360 --> 01:12:33,360
the airline industry a number of the

1940
01:12:33,360 --> 01:12:36,239
players are there at the table and how

1941
01:12:36,239 --> 01:12:37,360
they're going to do this because they

1942
01:12:37,360 --> 01:12:39,280
really have a serious issue they need to

1943
01:12:39,280 --> 01:12:42,320
address i feel that players are there

1944
01:12:42,320 --> 01:12:45,199
they are dedicated to get this done

1945
01:12:45,199 --> 01:12:47,600
they do have a a reasonable time frame

1946
01:12:47,600 --> 01:12:49,040
because it does take time to make the

1947
01:12:49,040 --> 01:12:50,880
changes but they do want to get into

1948
01:12:50,880 --> 01:12:52,400
their proof of concept so they have a

1949
01:12:52,400 --> 01:12:54,800
commitment going forward yes there are

1950
01:12:54,800 --> 01:12:58,400
changes on the on the uh the tls

1951
01:12:58,400 --> 01:13:01,280
server side that it has to now support

1952
01:13:01,280 --> 01:13:04,560
this particular extension but the number

1953
01:13:04,560 --> 01:13:06,480
of those servers which are around the

1954
01:13:06,480 --> 01:13:09,440
world is a manageable number um and

1955
01:13:09,440 --> 01:13:12,159
again the parties that own these things

1956
01:13:12,159 --> 01:13:14,159
at the the national airports and so

1957
01:13:14,159 --> 01:13:16,719
forth there we have enough of them i

1958
01:13:16,719 --> 01:13:19,120
think committed that the rest will then

1959
01:13:19,120 --> 01:13:20,880
follow along the big players are

1960
01:13:20,880 --> 01:13:23,280
committed and the rest will participate

1961
01:13:23,280 --> 01:13:25,040
so i think you have the community of

1962
01:13:25,040 --> 01:13:27,840
interest for this and uh it's worth the

1963
01:13:27,840 --> 01:13:28,880
work group

1964
01:13:28,880 --> 01:13:31,440
putting their knowledge behind to make

1965
01:13:31,440 --> 01:13:33,679
sure this is done right because this has

1966
01:13:33,679 --> 01:13:36,480
international consequences if it's not

1967
01:13:36,480 --> 01:13:38,159
done right

1968
01:13:38,159 --> 01:13:40,480
thank you

1969
01:13:41,040 --> 01:13:43,520
all right thank you um can we get a just

1970
01:13:43,520 --> 01:13:45,040
a quick show of hands for folks in the

1971
01:13:45,040 --> 01:13:48,560
room who have read the draft

1972
01:13:49,199 --> 01:13:51,520
all right

1973
01:13:51,520 --> 01:13:52,560
not a whole lot but there's probably

1974
01:13:52,560 --> 01:13:54,800
some more online um we'll uh convene

1975
01:13:54,800 --> 01:13:55,840
amongst ourselves and take it to the

1976
01:13:55,840 --> 01:13:57,280
list i think

1977
01:13:57,280 --> 01:14:00,159
thank you so much

1978
01:14:00,159 --> 01:14:03,599
all right hannes i think you're next

1979
01:14:10,640 --> 01:14:13,040
okay um some of you may have been at the

1980
01:14:13,040 --> 01:14:14,640
hot rc

1981
01:14:14,640 --> 01:14:19,120
event yesterday and where i talked about

1982
01:14:19,120 --> 01:14:20,800
this new work

1983
01:14:20,800 --> 01:14:23,280
now i focus more on the dls related part

1984
01:14:23,280 --> 01:14:25,199
and go a little bit more into details

1985
01:14:25,199 --> 01:14:26,800
this is obviously new

1986
01:14:26,800 --> 01:14:28,800
so

1987
01:14:28,800 --> 01:14:30,640
nowhere close to

1988
01:14:30,640 --> 01:14:33,120
anything asking for adoption more

1989
01:14:33,120 --> 01:14:34,880
figuring out whether any one of you is

1990
01:14:34,880 --> 01:14:37,679
interested in that type of activity

1991
01:14:37,679 --> 01:14:38,960
as you know i work for arm was

1992
01:14:38,960 --> 01:14:40,239
previously mentioned

1993
01:14:40,239 --> 01:14:42,239
in my side of the industry there's a lot

1994
01:14:42,239 --> 01:14:44,080
of excitement in defining new hardware

1995
01:14:44,080 --> 01:14:46,640
extension for coming up with new forms

1996
01:14:46,640 --> 01:14:48,880
of isolation which then obviously bubble

1997
01:14:48,880 --> 01:14:50,960
up in operating systems

1998
01:14:50,960 --> 01:14:51,840
um

1999
01:14:51,840 --> 01:14:53,440
and also

2000
01:14:53,440 --> 01:14:55,120
demonstrating that you have these

2001
01:14:55,120 --> 01:14:57,040
hardware capabilities and this isolation

2002
01:14:57,040 --> 01:14:59,760
capabilities to other parties and that's

2003
01:14:59,760 --> 01:15:02,480
happens in form of at the station

2004
01:15:02,480 --> 01:15:04,880
okay next slide

2005
01:15:04,880 --> 01:15:07,040
so we have um

2006
01:15:07,040 --> 01:15:09,840
since there are some couple of or

2007
01:15:09,840 --> 01:15:11,920
various projects ongoing

2008
01:15:11,920 --> 01:15:13,040
if you look at the confidential

2009
01:15:13,040 --> 01:15:15,360
computing consortium you see

2010
01:15:15,360 --> 01:15:17,679
where some of those or how some of those

2011
01:15:17,679 --> 01:15:19,360
activities look like

2012
01:15:19,360 --> 01:15:21,679
that utilize these new forms of software

2013
01:15:21,679 --> 01:15:23,440
isolation

2014
01:15:23,440 --> 01:15:26,080
you see that um there are various

2015
01:15:26,080 --> 01:15:28,080
different ways to communicate app

2016
01:15:28,080 --> 01:15:30,480
station information from the device out

2017
01:15:30,480 --> 01:15:34,000
to um whatever type of relying party and

2018
01:15:34,000 --> 01:15:36,560
so we are trying to make an attempt to

2019
01:15:36,560 --> 01:15:38,239
generalize channelize

2020
01:15:38,239 --> 01:15:40,239
the solution a little bit to avoid

2021
01:15:40,239 --> 01:15:42,000
having everyone come up with their own

2022
01:15:42,000 --> 01:15:43,600
technique which is

2023
01:15:43,600 --> 01:15:45,760
doing more or less the same

2024
01:15:45,760 --> 01:15:48,400
and what many of those mechanisms do is

2025
01:15:48,400 --> 01:15:51,120
they stuff something into dls

2026
01:15:51,120 --> 01:15:53,760
for uh fairly obvious reasons because

2027
01:15:53,760 --> 01:15:56,159
you have to establish a dls connection

2028
01:15:56,159 --> 01:15:58,880
uh very early in the uh interaction

2029
01:15:58,880 --> 01:16:00,800
anyway

2030
01:16:00,800 --> 01:16:03,040
and so what we wanted to do is um we

2031
01:16:03,040 --> 01:16:05,120
want to do taking the work of rats

2032
01:16:05,120 --> 01:16:07,520
support their two models um if you don't

2033
01:16:07,520 --> 01:16:09,120
know what the background check in a

2034
01:16:09,120 --> 01:16:11,440
passport model is um there's a good

2035
01:16:11,440 --> 01:16:13,199
architecture document in the rads group

2036
01:16:13,199 --> 01:16:14,880
explaining it

2037
01:16:14,880 --> 01:16:17,199
and we also wanted to support

2038
01:16:17,199 --> 01:16:18,320
different

2039
01:16:18,320 --> 01:16:20,000
at the station formats or at the station

2040
01:16:20,000 --> 01:16:22,640
technologies like dbms and um

2041
01:16:22,640 --> 01:16:24,320
some of the stuff we have come up with

2042
01:16:24,320 --> 01:16:25,600
in arm

2043
01:16:25,600 --> 01:16:28,159
with um the entity at the station token

2044
01:16:28,159 --> 01:16:30,000
and also we wanted to be agnostic to the

2045
01:16:30,000 --> 01:16:32,800
de technology the underlying technology

2046
01:16:32,800 --> 01:16:34,159
whether that's our most recent

2047
01:16:34,159 --> 01:16:37,679
architecture called ambi arm b9 or older

2048
01:16:37,679 --> 01:16:38,560
things

2049
01:16:38,560 --> 01:16:39,679
which um

2050
01:16:39,679 --> 01:16:41,840
you guys are all using in your phones in

2051
01:16:41,840 --> 01:16:44,320
your tablets and uh big fangs

2052
01:16:44,320 --> 01:16:46,719
being uh loyal customers

2053
01:16:46,719 --> 01:16:49,840
um next slide

2054
01:16:50,000 --> 01:16:52,400
and technically um it sounded like at

2055
01:16:52,400 --> 01:16:54,960
the beginning very simple

2056
01:16:54,960 --> 01:16:55,840
we

2057
01:16:55,840 --> 01:16:57,840
obviously need to

2058
01:16:57,840 --> 01:17:00,000
add an extension for the negotiation of

2059
01:17:00,000 --> 01:17:02,480
this new feature straightforward

2060
01:17:02,480 --> 01:17:04,400
we wanted to use the certificate types

2061
01:17:04,400 --> 01:17:06,480
because we are conveying the attestation

2062
01:17:06,480 --> 01:17:08,239
information in the certificate payload

2063
01:17:08,239 --> 01:17:09,920
but unfortunately we had to stuff in a

2064
01:17:09,920 --> 01:17:12,400
new field nons

2065
01:17:12,400 --> 01:17:13,840
which is

2066
01:17:13,840 --> 01:17:15,920
used for freshness of the produce data

2067
01:17:15,920 --> 01:17:18,800
station information so that sort of

2068
01:17:18,800 --> 01:17:20,320
made the reuse a little bit more

2069
01:17:20,320 --> 01:17:22,480
complicated

2070
01:17:22,480 --> 01:17:24,239
and um

2071
01:17:24,239 --> 01:17:26,480
obviously as i said the content in the

2072
01:17:26,480 --> 01:17:28,480
certificate certificate messages then

2073
01:17:28,480 --> 01:17:31,520
changed what it actually i'll explain on

2074
01:17:31,520 --> 01:17:33,440
the next slide what this content of the

2075
01:17:33,440 --> 01:17:35,120
certificate message is

2076
01:17:35,120 --> 01:17:37,360
but in in many cases the attestation

2077
01:17:37,360 --> 01:17:39,199
information that is produced by the

2078
01:17:39,199 --> 01:17:41,840
hardware or by software hardware

2079
01:17:41,840 --> 01:17:43,120
combination

2080
01:17:43,120 --> 01:17:45,840
is um something like i linked an example

2081
01:17:45,840 --> 01:17:48,800
in case of what we do uh it's called

2082
01:17:48,800 --> 01:17:50,960
the arm platform security architecture

2083
01:17:50,960 --> 01:17:52,640
initial attestation token some fancy

2084
01:17:52,640 --> 01:17:55,120
name that our marketing people came up

2085
01:17:55,120 --> 01:17:56,640
with

2086
01:17:56,640 --> 01:17:59,679
and that uh sort of captures what the

2087
01:17:59,679 --> 01:18:02,640
hardware is and also what the state the

2088
01:18:02,640 --> 01:18:04,800
initial state at the boot time the

2089
01:18:04,800 --> 01:18:07,600
software actually uh what it compromises

2090
01:18:07,600 --> 01:18:09,440
what the different components are

2091
01:18:09,440 --> 01:18:11,520
quite useful information obviously

2092
01:18:11,520 --> 01:18:14,159
um but for the dls exchange

2093
01:18:14,159 --> 01:18:16,000
you need more than just having that

2094
01:18:16,000 --> 01:18:18,560
token which uh you could describe as a

2095
01:18:18,560 --> 01:18:21,120
bare token you need um you need a key

2096
01:18:21,120 --> 01:18:23,600
associated with it which many of those

2097
01:18:23,600 --> 01:18:25,679
attestation technologies today that are

2098
01:18:25,679 --> 01:18:27,760
out in the field don't provide

2099
01:18:27,760 --> 01:18:30,000
and so we had to augment that a little

2100
01:18:30,000 --> 01:18:31,920
bit and on the next slide you see how we

2101
01:18:31,920 --> 01:18:34,159
did that

2102
01:18:34,159 --> 01:18:37,040
nothing super fancy but still

2103
01:18:37,040 --> 01:18:39,199
worthwhile to talk about

2104
01:18:39,199 --> 01:18:41,360
also obviously described in a document

2105
01:18:41,360 --> 01:18:43,840
so here's an instantiation

2106
01:18:43,840 --> 01:18:46,159
of how this looks like in a in a typical

2107
01:18:46,159 --> 01:18:49,360
scenario so the device is split into in

2108
01:18:49,360 --> 01:18:52,640
this case uh into two parts um

2109
01:18:52,640 --> 01:18:53,679
which is

2110
01:18:53,679 --> 01:18:56,000
like the part where the linux runs uh

2111
01:18:56,000 --> 01:18:56,880
one

2112
01:18:56,880 --> 01:18:58,880
um sort of compartment

2113
01:18:58,880 --> 01:19:01,760
um and another one uh which is here

2114
01:19:01,760 --> 01:19:03,520
called the secure world

2115
01:19:03,520 --> 01:19:07,840
which runs um something like opti as a

2116
01:19:07,840 --> 01:19:09,440
as an operating system so they have

2117
01:19:09,440 --> 01:19:10,960
different operating systems running at

2118
01:19:10,960 --> 01:19:12,320
the same time in different software

2119
01:19:12,320 --> 01:19:14,239
isolation containers

2120
01:19:14,239 --> 01:19:15,360
and

2121
01:19:15,360 --> 01:19:18,080
if the dls stack is in in running in

2122
01:19:18,080 --> 01:19:20,880
linux as an application and then sort of

2123
01:19:20,880 --> 01:19:23,040
communicates with this um

2124
01:19:23,040 --> 01:19:25,280
secure world side with

2125
01:19:25,280 --> 01:19:27,199
what in where an attestation service is

2126
01:19:27,199 --> 01:19:28,719
and that talks to

2127
01:19:28,719 --> 01:19:31,280
a specific um

2128
01:19:31,280 --> 01:19:33,199
um in this case a security engine like a

2129
01:19:33,199 --> 01:19:35,679
dpm or something else to get the other

2130
01:19:35,679 --> 01:19:37,920
station information and then it bubbles

2131
01:19:37,920 --> 01:19:39,120
up

2132
01:19:39,120 --> 01:19:40,960
but as i said

2133
01:19:40,960 --> 01:19:43,679
that token by itself won't do the job so

2134
01:19:43,679 --> 01:19:46,480
there's another

2135
01:19:46,640 --> 01:19:48,159
layer needed

2136
01:19:48,159 --> 01:19:51,199
where the device at some point in time

2137
01:19:51,199 --> 01:19:53,679
generates a public private keypair and

2138
01:19:53,679 --> 01:19:56,880
uh produces uh an at the station a key

2139
01:19:56,880 --> 01:19:59,120
at this high quality key at the station

2140
01:19:59,120 --> 01:20:02,159
token which is conceptually

2141
01:20:02,159 --> 01:20:03,040
um

2142
01:20:03,040 --> 01:20:05,199
you could think of it as a sibo web

2143
01:20:05,199 --> 01:20:07,199
document with a proof of possession key

2144
01:20:07,199 --> 01:20:09,120
that is then used in the dls handshake

2145
01:20:09,120 --> 01:20:10,880
to actually demonstrate the possession

2146
01:20:10,880 --> 01:20:13,040
of the private key and that happens that

2147
01:20:13,040 --> 01:20:15,199
is generated inside this

2148
01:20:15,199 --> 01:20:16,960
um the secure world

2149
01:20:16,960 --> 01:20:19,760
so it's a little bit um

2150
01:20:19,760 --> 01:20:21,679
more nuanced but sticking together a

2151
01:20:21,679 --> 01:20:24,320
couple of idf technologies in the end

2152
01:20:24,320 --> 01:20:28,400
in the dbm case there's also some w3c

2153
01:20:28,400 --> 01:20:30,719
attestation format involved as well

2154
01:20:30,719 --> 01:20:32,880
because they use their own um sort of

2155
01:20:32,880 --> 01:20:34,800
technique

2156
01:20:34,800 --> 01:20:38,080
echo you have questions yeah um

2157
01:20:38,080 --> 01:20:40,560
so you're probably gonna

2158
01:20:40,560 --> 01:20:41,520
you're probably gonna tell me there's

2159
01:20:41,520 --> 01:20:42,880
some internal reason why this won't work

2160
01:20:42,880 --> 01:20:46,159
um which i'm willing to accept but um is

2161
01:20:46,159 --> 01:20:46,880
this

2162
01:20:46,880 --> 01:20:48,320
is there

2163
01:20:48,320 --> 01:20:50,560
one key or two keys like does this look

2164
01:20:50,560 --> 01:20:52,239
like tls client auth or does it look

2165
01:20:52,239 --> 01:20:53,040
like

2166
01:20:53,040 --> 01:20:54,400
with a funny certificate attached to it

2167
01:20:54,400 --> 01:20:56,159
or like something else so there's

2168
01:20:56,159 --> 01:20:58,400
there's one key

2169
01:20:58,400 --> 01:21:00,320
there's one key a separate key to sign

2170
01:21:00,320 --> 01:21:02,400
the um app station information the

2171
01:21:02,400 --> 01:21:03,840
initial platform at the station token

2172
01:21:03,840 --> 01:21:06,239
yeah and then there's another key uh

2173
01:21:06,239 --> 01:21:08,800
that is used for the dls uh client

2174
01:21:08,800 --> 01:21:10,080
authentication

2175
01:21:10,080 --> 01:21:12,320
right and so

2176
01:21:12,320 --> 01:21:13,760
and so is this just a new certificate

2177
01:21:13,760 --> 01:21:15,280
type fundamentally

2178
01:21:15,280 --> 01:21:17,600
fundamentally yes okay um i just

2179
01:21:17,600 --> 01:21:19,840
couldn't use the same uh

2180
01:21:19,840 --> 01:21:22,719
payload um or extension because i had to

2181
01:21:22,719 --> 01:21:24,480
put the nonce in there and it was in the

2182
01:21:24,480 --> 01:21:25,600
original

2183
01:21:25,600 --> 01:21:27,120
certificate type extension there was no

2184
01:21:27,120 --> 01:21:28,960
place to put the nonce because the nonce

2185
01:21:28,960 --> 01:21:31,760
comes from the comes from the verifier

2186
01:21:31,760 --> 01:21:32,960
yes

2187
01:21:32,960 --> 01:21:34,960
in in it comes from the verifier

2188
01:21:34,960 --> 01:21:36,320
extruder

2189
01:21:36,320 --> 01:21:38,480
through the so that's why there are

2190
01:21:38,480 --> 01:21:42,400
these two types of models in in rats um

2191
01:21:42,400 --> 01:21:44,639
so if in the background check model the

2192
01:21:44,639 --> 01:21:46,880
nonce comes in all cases it comes from

2193
01:21:46,880 --> 01:21:48,719
the verifier but in the background check

2194
01:21:48,719 --> 01:21:51,199
model it then gets channeled over the

2195
01:21:51,199 --> 01:21:53,360
uh the dls

2196
01:21:53,360 --> 01:21:54,960
exchange the dls handshake right i'm

2197
01:21:54,960 --> 01:21:56,159
just i guess i'm just i just i'm trying

2198
01:21:56,159 --> 01:21:57,199
to figure out is there's some way to

2199
01:21:57,199 --> 01:21:59,679
sort of like cheat this into the tls a

2200
01:21:59,679 --> 01:22:01,520
little more closely but i'll i'll read

2201
01:22:01,520 --> 01:22:03,440
the draft and see if i like i mean if we

2202
01:22:03,440 --> 01:22:04,719
have to do some other thing i understand

2203
01:22:04,719 --> 01:22:06,480
but i'm trying to like do a little yeah

2204
01:22:06,480 --> 01:22:07,600
i'm i'm

2205
01:22:07,600 --> 01:22:09,520
in fact i'm we're also trying to figure

2206
01:22:09,520 --> 01:22:11,840
out on how to to best fill this in and

2207
01:22:11,840 --> 01:22:14,000
and that's why we are sort of solicit

2208
01:22:14,000 --> 01:22:16,880
soliciting feedback from those who

2209
01:22:16,880 --> 01:22:18,960
are working in a similar area okay we

2210
01:22:18,960 --> 01:22:21,600
have uh online from penguin okay uh

2211
01:22:21,600 --> 01:22:22,840
thank you thank

2212
01:22:22,840 --> 01:22:26,560
you hi hi uh i have a question uh first

2213
01:22:26,560 --> 01:22:28,960
of all i think this draft is very useful

2214
01:22:28,960 --> 01:22:29,760
when

2215
01:22:29,760 --> 01:22:32,000
we use this in the

2216
01:22:32,000 --> 01:22:34,480
trusted social environment and

2217
01:22:34,480 --> 01:22:37,520
to the client but i have a question is

2218
01:22:37,520 --> 01:22:40,800
that a this protocol only supports the

2219
01:22:40,800 --> 01:22:42,880
heat and the tpm

2220
01:22:42,880 --> 01:22:43,840
uh

2221
01:22:43,840 --> 01:22:45,199
attestation

2222
01:22:45,199 --> 01:22:46,560
of if

2223
01:22:46,560 --> 01:22:48,880
there is this protocol support other

2224
01:22:48,880 --> 01:22:51,600
attestation for example if there is a

2225
01:22:51,600 --> 01:22:54,639
measurement result or just a hash value

2226
01:22:54,639 --> 01:22:58,400
that this protocol will support that

2227
01:22:58,800 --> 01:23:01,040
yeah so we um we wanted to support

2228
01:23:01,040 --> 01:23:02,960
different attestation formats um to

2229
01:23:02,960 --> 01:23:04,239
begin with

2230
01:23:04,239 --> 01:23:06,719
we wanted to focus on the sort of like

2231
01:23:06,719 --> 01:23:09,199
the dbm and the

2232
01:23:09,199 --> 01:23:11,600
and um the heat based approach

2233
01:23:11,600 --> 01:23:12,880
and

2234
01:23:12,880 --> 01:23:14,960
like i don't see a reason why

2235
01:23:14,960 --> 01:23:16,719
others couldn't be included in the air

2236
01:23:16,719 --> 01:23:19,199
so they the the part that goes into the

2237
01:23:19,199 --> 01:23:21,520
dls exchange doesn't actually care much

2238
01:23:21,520 --> 01:23:24,080
about what it is but for the

2239
01:23:24,080 --> 01:23:26,400
for the overall functionality obviously

2240
01:23:26,400 --> 01:23:28,480
it matters how you

2241
01:23:28,480 --> 01:23:31,280
stick the different pieces together

2242
01:23:31,280 --> 01:23:32,719
yeah i think

2243
01:23:32,719 --> 01:23:35,120
we could clear that this protocol will

2244
01:23:35,120 --> 01:23:37,040
support the other

2245
01:23:37,040 --> 01:23:38,880
measurement deformator because i think

2246
01:23:38,880 --> 01:23:41,440
that it will be moder more wide range of

2247
01:23:41,440 --> 01:23:44,719
this protocol

2248
01:23:45,440 --> 01:23:48,719
well we probably should try it out so um

2249
01:23:48,719 --> 01:23:51,120
we'll uh so our plan is to contribute

2250
01:23:51,120 --> 01:23:52,960
this or to

2251
01:23:52,960 --> 01:23:56,159
use contribute the project the software

2252
01:23:56,159 --> 01:23:57,679
uh to the

2253
01:23:57,679 --> 01:23:59,199
uh confidential

2254
01:23:59,199 --> 01:24:00,560
the software to the confidential

2255
01:24:00,560 --> 01:24:02,159
computing consortium to actually have

2256
01:24:02,159 --> 01:24:04,159
others to look into that as well

2257
01:24:04,159 --> 01:24:06,000
um

2258
01:24:06,000 --> 01:24:08,880
so so maybe we can work together

2259
01:24:08,880 --> 01:24:10,239
okay okay

2260
01:24:10,239 --> 01:24:13,599
let's talk in main list

2261
01:24:14,320 --> 01:24:15,440
yeah

2262
01:24:15,440 --> 01:24:17,679
good thank you

2263
01:24:17,679 --> 01:24:19,040
uh

2264
01:24:19,040 --> 01:24:21,440
daniel kahn gilmore aclu so let me just

2265
01:24:21,440 --> 01:24:23,520
ask a couple questions here is this just

2266
01:24:23,520 --> 01:24:25,120
the client authenticating or are you

2267
01:24:25,120 --> 01:24:26,639
envisioning this being symmetric within

2268
01:24:26,639 --> 01:24:28,080
tls

2269
01:24:28,080 --> 01:24:30,320
actually it's it's both um and in in

2270
01:24:30,320 --> 01:24:32,400
this simplifying example i just focus on

2271
01:24:32,400 --> 01:24:34,080
the client and the code initially focus

2272
01:24:34,080 --> 01:24:36,480
on the client but it turns out that um

2273
01:24:36,480 --> 01:24:39,280
you also want the the server adjusting

2274
01:24:39,280 --> 01:24:40,880
to the client for example if you have

2275
01:24:40,880 --> 01:24:42,719
some confidential workloads in some

2276
01:24:42,719 --> 01:24:44,480
cloud-based service you also want to

2277
01:24:44,480 --> 01:24:46,800
know um what are you actually uploading

2278
01:24:46,800 --> 01:24:49,760
your code or whatever

2279
01:24:49,760 --> 01:24:51,600
to the hardware you're expecting it to

2280
01:24:51,600 --> 01:24:52,320
be

2281
01:24:52,320 --> 01:24:53,440
yeah so

2282
01:24:53,440 --> 01:24:55,199
thank you that's that's useful to

2283
01:24:55,199 --> 01:24:57,520
understand um

2284
01:24:57,520 --> 01:25:00,480
my second question is about the

2285
01:25:00,480 --> 01:25:01,760
um

2286
01:25:01,760 --> 01:25:04,320
the persistence of the platform state

2287
01:25:04,320 --> 01:25:07,120
uh and how this can be used

2288
01:25:07,120 --> 01:25:07,840
like

2289
01:25:07,840 --> 01:25:11,199
what are the ways that this could be um

2290
01:25:11,199 --> 01:25:13,120
anonymized so that for example two

2291
01:25:13,120 --> 01:25:14,880
separate processes that run on the same

2292
01:25:14,880 --> 01:25:15,840
machine

2293
01:25:15,840 --> 01:25:17,600
don't end up identifying themselves as

2294
01:25:17,600 --> 01:25:20,080
being cotenants

2295
01:25:20,080 --> 01:25:22,719
or if a user say wants to clear their

2296
01:25:22,719 --> 01:25:24,239
their state and come up with a new

2297
01:25:24,239 --> 01:25:25,280
identity

2298
01:25:25,280 --> 01:25:27,199
that doesn't that then the platform

2299
01:25:27,199 --> 01:25:29,360
state doesn't itself uh leak a linkable

2300
01:25:29,360 --> 01:25:32,880
identifier to the server uh over time

2301
01:25:32,880 --> 01:25:35,520
do you do you is this is this question

2302
01:25:35,520 --> 01:25:36,719
something that this is grappling with i

2303
01:25:36,719 --> 01:25:38,159
apologize i have not read the draft in

2304
01:25:38,159 --> 01:25:40,480
detail i don't know i don't know the

2305
01:25:40,480 --> 01:25:43,520
specifics that's a very good question um

2306
01:25:43,520 --> 01:25:47,600
and i think this is on the to-do list

2307
01:25:47,600 --> 01:25:49,840
um

2308
01:25:49,840 --> 01:25:52,800
obviously like you monty for dpm and and

2309
01:25:52,800 --> 01:25:54,560
for some of the the at the station

2310
01:25:54,560 --> 01:25:56,560
technology so there are two pieces to to

2311
01:25:56,560 --> 01:25:58,480
your answer one is how does the

2312
01:25:58,480 --> 01:26:00,560
attestation technology avoid um

2313
01:26:00,560 --> 01:26:02,480
providing identifiable information

2314
01:26:02,480 --> 01:26:04,560
across different interactions the other

2315
01:26:04,560 --> 01:26:06,400
one is um

2316
01:26:06,400 --> 01:26:09,360
um there's some additional information

2317
01:26:09,360 --> 01:26:10,800
this what i have

2318
01:26:10,800 --> 01:26:12,400
loosely referred this key at the station

2319
01:26:12,400 --> 01:26:15,199
token here that could also identify you

2320
01:26:15,199 --> 01:26:17,600
or provide some linkability and that's

2321
01:26:17,600 --> 01:26:20,159
obviously also a

2322
01:26:20,159 --> 01:26:21,520
concern

2323
01:26:21,520 --> 01:26:22,960
so

2324
01:26:22,960 --> 01:26:24,560
definitely needs to be answered and

2325
01:26:24,560 --> 01:26:27,040
written up um serious airdraft lots of

2326
01:26:27,040 --> 01:26:28,320
things open

2327
01:26:28,320 --> 01:26:30,800
okay thank you

2328
01:26:30,800 --> 01:26:32,480
yeah so i think you've

2329
01:26:32,480 --> 01:26:34,000
a lot of these are a bunch of to-do

2330
01:26:34,000 --> 01:26:35,440
things which you know i'm going to be

2331
01:26:35,440 --> 01:26:37,360
involved in obviously monty wiseman by

2332
01:26:37,360 --> 01:26:40,239
the way beyond a beyond identity

2333
01:26:40,239 --> 01:26:41,280
um

2334
01:26:41,280 --> 01:26:42,400
the the other

2335
01:26:42,400 --> 01:26:44,800
there's two reasons for the attestation

2336
01:26:44,800 --> 01:26:47,199
key not being the thing to sign one is

2337
01:26:47,199 --> 01:26:49,920
the nonce but the other isn't is in

2338
01:26:49,920 --> 01:26:51,920
order to be of any value the attestation

2339
01:26:51,920 --> 01:26:54,159
key has to have the properties of only

2340
01:26:54,159 --> 01:26:56,800
signing things that are inside the tpm

2341
01:26:56,800 --> 01:26:58,239
otherwise you can hand out a blob and

2342
01:26:58,239 --> 01:26:59,199
say here

2343
01:26:59,199 --> 01:27:01,120
sign this it'll become a signing fool

2344
01:27:01,120 --> 01:27:04,000
right so it cannot sign external data it

2345
01:27:04,000 --> 01:27:06,000
can only sign stuff that's inside the

2346
01:27:06,000 --> 01:27:08,159
tpm except that's another important

2347
01:27:08,159 --> 01:27:10,320
reason why you can't use

2348
01:27:10,320 --> 01:27:12,719
the fstation key the other thing that i

2349
01:27:12,719 --> 01:27:14,159
think we need to start thinking about is

2350
01:27:14,159 --> 01:27:16,159
there's lots of aspects of the platform

2351
01:27:16,159 --> 01:27:17,760
are you do you only care about the bios

2352
01:27:17,760 --> 01:27:19,040
the firmware do you only care about the

2353
01:27:19,040 --> 01:27:20,960
os do you care about ima

2354
01:27:20,960 --> 01:27:23,120
we have to be able to hand it

2355
01:27:23,120 --> 01:27:25,120
a bunch of stuff this here's the stuff i

2356
01:27:25,120 --> 01:27:26,320
care about

2357
01:27:26,320 --> 01:27:28,800
and then get this backside and i think

2358
01:27:28,800 --> 01:27:30,400
this is going to be a more complicated

2359
01:27:30,400 --> 01:27:32,480
thing than we i think it's a valuable

2360
01:27:32,480 --> 01:27:34,400
thing to do don't get me wrong but i

2361
01:27:34,400 --> 01:27:36,320
think this is going to be a lot of work

2362
01:27:36,320 --> 01:27:38,239
and i'll be happy to be involved

2363
01:27:38,239 --> 01:27:40,638
excellent

2364
01:27:42,080 --> 01:27:43,360
okay i think

2365
01:27:43,360 --> 01:27:46,679
nick online

2366
01:27:49,950 --> 01:27:51,840
[Music]

2367
01:27:51,840 --> 01:27:53,600
hi um

2368
01:27:53,600 --> 01:27:55,360
nick doty center for democracy and

2369
01:27:55,360 --> 01:27:57,199
technology um

2370
01:27:57,199 --> 01:27:59,840
thanks for presenting this work i have

2371
01:27:59,840 --> 01:28:03,679
some of those same privacy concerns that

2372
01:28:03,679 --> 01:28:05,920
have already come up and i see yes it's

2373
01:28:05,920 --> 01:28:07,920
an early draft privacy consideration

2374
01:28:07,920 --> 01:28:09,760
section is not written

2375
01:28:09,760 --> 01:28:12,080
i expect it will be a very

2376
01:28:12,080 --> 01:28:14,239
expensive section and and i certainly

2377
01:28:14,239 --> 01:28:16,159
would encourage you to

2378
01:28:16,159 --> 01:28:17,760
uh consider that early on because i

2379
01:28:17,760 --> 01:28:19,280
think it could have very fundamental

2380
01:28:19,280 --> 01:28:22,719
implications for um for the design of

2381
01:28:22,719 --> 01:28:26,000
the architecture altogether um one one

2382
01:28:26,000 --> 01:28:27,440
question that is coming to mind is i

2383
01:28:27,440 --> 01:28:28,400
look at this

2384
01:28:28,400 --> 01:28:29,600
why

2385
01:28:29,600 --> 01:28:31,520
i think you even note this it could this

2386
01:28:31,520 --> 01:28:33,600
could happen in lots of different layers

2387
01:28:33,600 --> 01:28:36,400
why should this happen in in tls like

2388
01:28:36,400 --> 01:28:38,320
that's i'm still learning about this

2389
01:28:38,320 --> 01:28:40,719
area but it seems like most of the

2390
01:28:40,719 --> 01:28:42,400
fraud cases that we're worried about are

2391
01:28:42,400 --> 01:28:44,159
very application specific if you're

2392
01:28:44,159 --> 01:28:45,199
doing a different type of thing you're

2393
01:28:45,199 --> 01:28:46,080
going to need a different type of

2394
01:28:46,080 --> 01:28:48,080
attestation information

2395
01:28:48,080 --> 01:28:49,600
it's going to be specific to what action

2396
01:28:49,600 --> 01:28:52,320
the user has taken or

2397
01:28:52,320 --> 01:28:53,920
other criteria

2398
01:28:53,920 --> 01:28:56,639
it seems like setting that up in

2399
01:28:56,639 --> 01:28:58,800
the in in just securing the

2400
01:28:58,800 --> 01:29:00,560
communication and end seems like kind of

2401
01:29:00,560 --> 01:29:02,320
an odd time to do that you don't have

2402
01:29:02,320 --> 01:29:03,679
any of that application specific

2403
01:29:03,679 --> 01:29:04,639
information

2404
01:29:04,639 --> 01:29:06,880
um so so why should this be a tls layer

2405
01:29:06,880 --> 01:29:08,840
protocol rather than an application

2406
01:29:08,840 --> 01:29:10,800
layer

2407
01:29:10,800 --> 01:29:13,360
hey nick uh haven't seen you for a while

2408
01:29:13,360 --> 01:29:15,360
um

2409
01:29:15,360 --> 01:29:17,600
that's a good question as well uh i've

2410
01:29:17,600 --> 01:29:19,520
been also wondering of why the tls

2411
01:29:19,520 --> 01:29:21,440
working group would be a good place um

2412
01:29:21,440 --> 01:29:23,199
whether maybe rats would be a better

2413
01:29:23,199 --> 01:29:25,120
place or maybe some totally different

2414
01:29:25,120 --> 01:29:26,000
group

2415
01:29:26,000 --> 01:29:27,360
i don't see a concern with the

2416
01:29:27,360 --> 01:29:29,040
application specific information because

2417
01:29:29,040 --> 01:29:30,960
that's not really uh

2418
01:29:30,960 --> 01:29:33,040
something that's sort of more policy

2419
01:29:33,040 --> 01:29:36,400
what to include and whatnot but

2420
01:29:36,400 --> 01:29:39,120
there's obviously an tls extension that

2421
01:29:39,120 --> 01:29:41,360
needs to be defined here and and

2422
01:29:41,360 --> 01:29:43,920
described similar to the certificate

2423
01:29:43,920 --> 01:29:46,000
types extension which um described on

2424
01:29:46,000 --> 01:29:48,400
what type of certificate to put in there

2425
01:29:48,400 --> 01:29:50,639
and in some sense from a dls point of

2426
01:29:50,639 --> 01:29:53,440
view there's um little

2427
01:29:53,440 --> 01:29:54,480
little

2428
01:29:54,480 --> 01:29:56,960
to do practically like it's actually a

2429
01:29:56,960 --> 01:29:59,040
short document the problem is i have to

2430
01:29:59,040 --> 01:30:00,560
set the context also here in the

2431
01:30:00,560 --> 01:30:02,480
presentation like otherwise you

2432
01:30:02,480 --> 01:30:04,320
you don't know what i'm talking about

2433
01:30:04,320 --> 01:30:05,840
and that's the difficulty and i don't

2434
01:30:05,840 --> 01:30:08,320
know how to best uh deal with that but

2435
01:30:08,320 --> 01:30:10,239
it's actually better to put that into

2436
01:30:10,239 --> 01:30:11,840
two documents or

2437
01:30:11,840 --> 01:30:14,480
one that is more like the architectural

2438
01:30:14,480 --> 01:30:16,000
aspect to it

2439
01:30:16,000 --> 01:30:18,639
um which already rats does in some sense

2440
01:30:18,639 --> 01:30:21,040
so a lot of it what i'm talking about is

2441
01:30:21,040 --> 01:30:22,080
in rats

2442
01:30:22,080 --> 01:30:25,199
so i don't know um i

2443
01:30:25,199 --> 01:30:28,320
appreciate guidance here uh

2444
01:30:28,320 --> 01:30:30,239
having been in the idf for a while

2445
01:30:30,239 --> 01:30:31,679
already i should probably know better

2446
01:30:31,679 --> 01:30:32,960
but uh

2447
01:30:32,960 --> 01:30:36,320
yeah but well maybe just to continue

2448
01:30:36,320 --> 01:30:38,480
that a little bit like why does the user

2449
01:30:38,480 --> 01:30:40,400
want to do it in the setting up of the

2450
01:30:40,400 --> 01:30:43,520
connection rather than uh

2451
01:30:43,520 --> 01:30:45,520
attesting to themselves once they know

2452
01:30:45,520 --> 01:30:47,199
some more about what they're trying to

2453
01:30:47,199 --> 01:30:49,920
do with this server

2454
01:30:49,920 --> 01:30:51,840
okay yeah the

2455
01:30:51,840 --> 01:30:54,960
the use case so actually um maybe it

2456
01:30:54,960 --> 01:30:56,800
would be best for me to distribute one

2457
01:30:56,800 --> 01:30:57,600
of the

2458
01:30:57,600 --> 01:30:59,920
uh confidential computing consortium uh

2459
01:30:59,920 --> 01:31:02,239
use case our date their white papers

2460
01:31:02,239 --> 01:31:03,840
because they describe some of the use

2461
01:31:03,840 --> 01:31:06,400
cases on why you would want to

2462
01:31:06,400 --> 01:31:08,400
have at the station and some of those

2463
01:31:08,400 --> 01:31:10,639
software isolation techniques in general

2464
01:31:10,639 --> 01:31:12,239
i think there's uh

2465
01:31:12,239 --> 01:31:13,920
for example um

2466
01:31:13,920 --> 01:31:15,120
you want to

2467
01:31:15,120 --> 01:31:17,360
upload a code

2468
01:31:17,360 --> 01:31:19,920
onto a cloud-based infrastructure and

2469
01:31:19,920 --> 01:31:21,600
run it there but you only want to

2470
01:31:21,600 --> 01:31:24,400
disclose the code and the configuration

2471
01:31:24,400 --> 01:31:26,639
data to certain platforms that

2472
01:31:26,639 --> 01:31:28,880
meet certain criteria so they can for

2473
01:31:28,880 --> 01:31:31,280
example to run the code there that even

2474
01:31:31,280 --> 01:31:33,280
the cloud provider doesn't see what

2475
01:31:33,280 --> 01:31:35,520
you're running uh that is one of the

2476
01:31:35,520 --> 01:31:37,760
that's sort of the promise of um of

2477
01:31:37,760 --> 01:31:39,679
confidential computing and so for

2478
01:31:39,679 --> 01:31:41,760
example you may have some uh machine

2479
01:31:41,760 --> 01:31:43,520
learning um

2480
01:31:43,520 --> 01:31:45,600
data in there that you don't want to

2481
01:31:45,600 --> 01:31:47,040
spread around that you want to keep

2482
01:31:47,040 --> 01:31:48,400
yourself

2483
01:31:48,400 --> 01:31:50,960
that is one of the the use cases in in

2484
01:31:50,960 --> 01:31:54,080
in confidential computing

2485
01:31:54,080 --> 01:31:55,920
so in general and like pushing code

2486
01:31:55,920 --> 01:31:57,280
around and making sure that it's

2487
01:31:57,280 --> 01:32:00,159
actually you run it in an environment uh

2488
01:32:00,159 --> 01:32:03,120
that is what you would expect

2489
01:32:03,120 --> 01:32:04,480
for example

2490
01:32:04,480 --> 01:32:07,280
pushing moving workloads from the cloud

2491
01:32:07,280 --> 01:32:08,960
to the edge and running it there

2492
01:32:08,960 --> 01:32:11,280
including obviously data

2493
01:32:11,280 --> 01:32:13,760
that this uh code would run on you want

2494
01:32:13,760 --> 01:32:15,600
to make sure that you actually store it

2495
01:32:15,600 --> 01:32:17,600
on servers that meet certain criteria so

2496
01:32:17,600 --> 01:32:20,159
that the data doesn't leak out into into

2497
01:32:20,159 --> 01:32:22,080
the wild

2498
01:32:22,080 --> 01:32:24,080
because otherwise anyone could sort of

2499
01:32:24,080 --> 01:32:26,400
like claim that uh oh i'm running a

2500
01:32:26,400 --> 01:32:27,840
virtual machine here with some great

2501
01:32:27,840 --> 01:32:30,000
hardware uh i'm really protecting your

2502
01:32:30,000 --> 01:32:32,320
data but in fact it's not happening

2503
01:32:32,320 --> 01:32:34,239
i hope that makes sense yeah i mean the

2504
01:32:34,239 --> 01:32:36,320
server the those those server cases

2505
01:32:36,320 --> 01:32:38,320
would also have less of the catastrophic

2506
01:32:38,320 --> 01:32:40,080
privacy concerns that some of us might

2507
01:32:40,080 --> 01:32:41,840
have so um

2508
01:32:41,840 --> 01:32:43,440
yeah maybe that would be a more

2509
01:32:43,440 --> 01:32:46,159
promising direction rather than

2510
01:32:46,159 --> 01:32:48,960
uh rather than users having to attest to

2511
01:32:48,960 --> 01:32:50,639
i'm not even quite sure everything about

2512
01:32:50,639 --> 01:32:53,920
their device and uh and potentially hard

2513
01:32:53,920 --> 01:32:56,960
linkable certificates or keys um

2514
01:32:56,960 --> 01:32:59,760
the the use those other use cases might

2515
01:32:59,760 --> 01:33:00,560
might

2516
01:33:00,560 --> 01:33:02,639
make more sense or make that easier to

2517
01:33:02,639 --> 01:33:04,560
understand

2518
01:33:04,560 --> 01:33:05,360
i will

2519
01:33:05,360 --> 01:33:06,960
post the uh

2520
01:33:06,960 --> 01:33:09,199
the white paper to to the list on what

2521
01:33:09,199 --> 01:33:10,880
the confidential computing consortium

2522
01:33:10,880 --> 01:33:12,960
believes that it's uh useful

2523
01:33:12,960 --> 01:33:15,679
uh areas

2524
01:33:16,320 --> 01:33:19,280
okay thank you

2525
01:33:20,159 --> 01:33:22,400
yeah sorry i mean um

2526
01:33:22,400 --> 01:33:24,080
so

2527
01:33:24,080 --> 01:33:27,199
i know this is a zero zero draft

2528
01:33:27,199 --> 01:33:28,000
and

2529
01:33:28,000 --> 01:33:30,639
i assume you're creating evidence

2530
01:33:30,639 --> 01:33:32,239
it says there

2531
01:33:32,239 --> 01:33:33,760
but i don't know what this evidence is

2532
01:33:33,760 --> 01:33:36,800
about and i i would never understand as

2533
01:33:36,800 --> 01:33:38,400
a

2534
01:33:38,400 --> 01:33:40,080
well

2535
01:33:40,080 --> 01:33:41,440
remote peer client that i want to

2536
01:33:41,440 --> 01:33:45,440
initiate something i create the evidence

2537
01:33:45,440 --> 01:33:47,040
what would i put in there so there you

2538
01:33:47,040 --> 01:33:48,800
say eat or tpm so i have some

2539
01:33:48,800 --> 01:33:50,400
understanding so that has to be fleshed

2540
01:33:50,400 --> 01:33:52,719
out but this is zero zero i get this but

2541
01:33:52,719 --> 01:33:55,120
evidence is never set to a lying party

2542
01:33:55,120 --> 01:33:57,280
which is literally what you say

2543
01:33:57,280 --> 01:33:58,960
and then so then there's a verifier in

2544
01:33:58,960 --> 01:34:00,400
the picture and at the station servers

2545
01:34:00,400 --> 01:34:02,560
which are also so that i i get the point

2546
01:34:02,560 --> 01:34:04,639
where you want to want to solve

2547
01:34:04,639 --> 01:34:06,639
but yeah some so there's this really has

2548
01:34:06,639 --> 01:34:08,719
to thomas is on this draft so that makes

2549
01:34:08,719 --> 01:34:12,880
me confident that this is sorted out

2550
01:34:13,440 --> 01:34:15,280
yeah at the moment it looks a little bit

2551
01:34:15,280 --> 01:34:17,199
um all over the place and i would never

2552
01:34:17,199 --> 01:34:18,880
know what is where and never use the

2553
01:34:18,880 --> 01:34:21,120
term at the station

2554
01:34:21,120 --> 01:34:22,719
by the way

2555
01:34:22,719 --> 01:34:25,520
it's bad it's uh

2556
01:34:25,520 --> 01:34:28,800
yeah the challenge uh is in in rats that

2557
01:34:28,800 --> 01:34:32,719
the different flows uh on

2558
01:34:44,960 --> 01:34:47,119
transported that's so i meant to make

2559
01:34:47,119 --> 01:34:49,440
that clear and also um talking about

2560
01:34:49,440 --> 01:34:51,920
evidence and attestation results would

2561
01:34:51,920 --> 01:34:54,239
resolve all the problems i think just

2562
01:34:54,239 --> 01:34:56,400
label those differentiate them i think

2563
01:34:56,400 --> 01:34:58,800
that will make everything very clear

2564
01:34:58,800 --> 01:35:01,280
and then you're basically halfway there

2565
01:35:01,280 --> 01:35:04,639
i i will give it the um

2566
01:35:04,639 --> 01:35:06,159
the hank

2567
01:35:06,159 --> 01:35:07,760
some sort of brush

2568
01:35:07,760 --> 01:35:10,960
next with zero one

2569
01:35:12,320 --> 01:35:15,440
all right thank you johannes

2570
01:35:16,960 --> 01:35:18,639
uh next up we have a

2571
01:35:18,639 --> 01:35:20,320
update on the post quantum process from

2572
01:35:20,320 --> 01:35:22,320
sophie and tom um

2573
01:35:22,320 --> 01:35:25,840
tom are you going to share slides

2574
01:35:26,639 --> 01:35:29,679
uh we shared the slides with the chairs

2575
01:35:29,679 --> 01:35:30,880
um

2576
01:35:30,880 --> 01:35:32,639
but if you don't have them oh there you

2577
01:35:32,639 --> 01:35:33,360
go

2578
01:35:33,360 --> 01:35:35,920
oh thank you

2579
01:35:37,840 --> 01:35:40,840
great

2580
01:35:42,320 --> 01:35:44,639
okay i can see the slides now so

2581
01:35:44,639 --> 01:35:47,040
we can get started um

2582
01:35:47,040 --> 01:35:49,679
so this is a very brief

2583
01:35:49,679 --> 01:35:50,560
uh

2584
01:35:50,560 --> 01:35:54,080
very abbreviated uh

2585
01:35:54,080 --> 01:35:56,480
talk just to get the ball rolling on uh

2586
01:35:56,480 --> 01:35:59,360
on pqc again because some stuff happened

2587
01:35:59,360 --> 01:36:03,440
so uh let's go to the next slide

2588
01:36:03,440 --> 01:36:05,040
um

2589
01:36:05,040 --> 01:36:07,119
we're presenting somewhat of an overview

2590
01:36:07,119 --> 01:36:09,119
but it's definitely not complete

2591
01:36:09,119 --> 01:36:11,600
uh we're going to briefly touch

2592
01:36:11,600 --> 01:36:14,320
keg's key exchange but

2593
01:36:14,320 --> 01:36:16,000
that has been talked about a lot already

2594
01:36:16,000 --> 01:36:18,159
so

2595
01:36:19,520 --> 01:36:21,040
and

2596
01:36:21,040 --> 01:36:23,600
we're just trying to present a neutral

2597
01:36:23,600 --> 01:36:25,920
overview here although we are obviously

2598
01:36:25,920 --> 01:36:28,239
also office of a draft it's not about

2599
01:36:28,239 --> 01:36:30,159
that it's just about

2600
01:36:30,159 --> 01:36:32,320
this is what has come out of this so far

2601
01:36:32,320 --> 01:36:33,920
and it's probably something that we're

2602
01:36:33,920 --> 01:36:35,840
gonna have to deal with now

2603
01:36:35,840 --> 01:36:36,719
so

2604
01:36:36,719 --> 01:36:39,840
next slide

2605
01:36:51,040 --> 01:36:54,880
okay um i think

2606
01:36:55,040 --> 01:36:57,040
i think tom got frozen sorry but i can't

2607
01:36:57,040 --> 01:36:59,280
take it um so yes here in the right

2608
01:36:59,280 --> 01:37:01,440
slide um so basically as some already

2609
01:37:01,440 --> 01:37:03,440
said um we're not going to focus

2610
01:37:03,440 --> 01:37:05,040
specifically too much about the key

2611
01:37:05,040 --> 01:37:07,840
exchange part of tls 1.3 because that's

2612
01:37:07,840 --> 01:37:10,320
indeed um there's a way to actually

2613
01:37:10,320 --> 01:37:12,320
easily add the per squad the malgody

2614
01:37:12,320 --> 01:37:14,159
genome since to it that every of the

2615
01:37:14,159 --> 01:37:15,840
experiments that have been run all of

2616
01:37:15,840 --> 01:37:18,639
the academic papers related to it seems

2617
01:37:18,639 --> 01:37:20,560
to show that indeed is easy to just go

2618
01:37:20,560 --> 01:37:22,560
up the classical algorithm for apos one

2619
01:37:22,560 --> 01:37:24,880
two one for a while it will be good as

2620
01:37:24,880 --> 01:37:27,760
it has been recommended by uh the hybrid

2621
01:37:27,760 --> 01:37:30,800
design um document to actually not only

2622
01:37:30,800 --> 01:37:32,560
use the pos quantum algorithm in

2623
01:37:32,560 --> 01:37:34,639
isolation but rather to combine it with

2624
01:37:34,639 --> 01:37:37,760
a classical algorithm for the timing

2625
01:37:37,760 --> 01:37:40,560
nexus like this

2626
01:37:41,440 --> 01:37:42,800
the part that is a little more

2627
01:37:42,800 --> 01:37:45,360
complicated it seems is the one for

2628
01:37:45,360 --> 01:37:48,000
authentication in tls 1.3 and the recent

2629
01:37:48,000 --> 01:37:50,320
win is because at least the algorithms

2630
01:37:50,320 --> 01:37:51,920
that now have been selected for the

2631
01:37:51,920 --> 01:37:54,000
standardization but the first milestone

2632
01:37:54,000 --> 01:37:56,560
of the nice process seems to have sizes

2633
01:37:56,560 --> 01:37:59,199
or computational times that are bigger

2634
01:37:59,199 --> 01:38:00,560
when compared with the classical

2635
01:38:00,560 --> 01:38:02,800
counterparts of course authentication in

2636
01:38:02,800 --> 01:38:04,480
tls has

2637
01:38:04,480 --> 01:38:06,880
ensured that everybody on this group

2638
01:38:06,880 --> 01:38:09,440
knows how could happen in different ways

2639
01:38:09,440 --> 01:38:13,678
but in this case nexus la please

2640
01:38:15,280 --> 01:38:16,960
we're talking about certificate-based

2641
01:38:16,960 --> 01:38:20,960
authentication nexus live please

2642
01:38:21,119 --> 01:38:23,679
okay and as you know um there's many

2643
01:38:23,679 --> 01:38:26,080
signatures some verification operations

2644
01:38:26,080 --> 01:38:27,840
that are actually happening as part of

2645
01:38:27,840 --> 01:38:30,159
the tls session it's not only about the

2646
01:38:30,159 --> 01:38:32,480
handshake signature but also all of the

2647
01:38:32,480 --> 01:38:34,719
related ones internal attempts about the

2648
01:38:34,719 --> 01:38:37,119
handshake signature it does seem that at

2649
01:38:37,119 --> 01:38:38,560
least some of the experiments that i

2650
01:38:38,560 --> 01:38:40,480
have around it seemed that it would be

2651
01:38:40,480 --> 01:38:42,880
okayish to swap the classical algorithm

2652
01:38:42,880 --> 01:38:44,400
for a plus quantum one and that should

2653
01:38:44,400 --> 01:38:47,360
be okay as as we know uh the signature

2654
01:38:47,360 --> 01:38:49,920
algorithms are not only the handshake

2655
01:38:49,920 --> 01:38:51,920
signature so all of the other ones that

2656
01:38:51,920 --> 01:38:54,960
are related to the to the to the tls

2657
01:38:54,960 --> 01:38:56,320
session itself seem to be more

2658
01:38:56,320 --> 01:38:57,920
cumbersome to actually migrate with

2659
01:38:57,920 --> 01:38:59,600
quantum cryptography

2660
01:38:59,600 --> 01:39:02,480
i'm not sure if tommy are back

2661
01:39:02,480 --> 01:39:05,760
uh i hope so okay there you are

2662
01:39:05,760 --> 01:39:08,159
great let's hope the wi-fi holds up

2663
01:39:08,159 --> 01:39:12,320
uh yeah we can go to the next slide

2664
01:39:12,320 --> 01:39:13,119
so

2665
01:39:13,119 --> 01:39:15,280
this is all the

2666
01:39:15,280 --> 01:39:17,600
new schemes and some of the things

2667
01:39:17,600 --> 01:39:20,800
that's out there already on one slide

2668
01:39:20,800 --> 01:39:21,679
um

2669
01:39:21,679 --> 01:39:23,360
so for comparison we have the

2670
01:39:23,360 --> 01:39:25,840
pre-quantum stuff

2671
01:39:25,840 --> 01:39:28,239
if you then look at the lithium 2 so

2672
01:39:28,239 --> 01:39:31,119
that's the smallest

2673
01:39:34,480 --> 01:39:36,560
larger right

2674
01:39:36,560 --> 01:39:38,880
fortunately in terms of computation it's

2675
01:39:38,880 --> 01:39:43,040
quite a bit faster than say e256 but

2676
01:39:43,040 --> 01:39:45,679
yeah it's it's not small

2677
01:39:45,679 --> 01:39:48,159
if you put that everywhere

2678
01:39:48,159 --> 01:39:51,600
it's probably going to be difficult

2679
01:39:51,600 --> 01:39:54,880
falcon on the other hand is nice and

2680
01:39:54,880 --> 01:39:56,480
relatively small

2681
01:39:56,480 --> 01:39:59,280
but uh it's worth pointing out here that

2682
01:39:59,280 --> 01:40:01,840
um the if implemented correctly here is

2683
01:40:01,840 --> 01:40:04,719
a direct quote from nist's

2684
01:40:04,719 --> 01:40:06,480
selection

2685
01:40:06,480 --> 01:40:09,480
blurb

2686
01:40:09,840 --> 01:40:12,080
that

2687
01:40:13,199 --> 01:40:15,199
is is quite tricky to implement uh

2688
01:40:15,199 --> 01:40:16,800
correctly we talked about that a bit

2689
01:40:16,800 --> 01:40:20,239
before in in the cfrg talk earlier today

2690
01:40:20,239 --> 01:40:23,280
um then we have sphinx plus which is

2691
01:40:23,280 --> 01:40:26,719
hash based uh slow but conservative and

2692
01:40:26,719 --> 01:40:31,239
uh it's worth looking out here

2693
01:40:37,360 --> 01:40:40,639
uh those are staple hash based schemes

2694
01:40:40,639 --> 01:40:41,840
so

2695
01:40:41,840 --> 01:40:45,760
that might be useful for maybe

2696
01:40:47,199 --> 01:40:49,520
it for general purpose and

2697
01:40:49,520 --> 01:40:52,080
that is also something where it seems

2698
01:40:52,080 --> 01:40:54,080
like the theme here is we have all sorts

2699
01:40:54,080 --> 01:40:56,080
of trade-offs certain things are fit for

2700
01:40:56,080 --> 01:40:57,840
certain purposes

2701
01:40:57,840 --> 01:41:00,800
uh other things are probably

2702
01:41:00,800 --> 01:41:03,800
other

2703
01:41:04,080 --> 01:41:06,239
yeah that is the the name of the game

2704
01:41:06,239 --> 01:41:07,679
here probably

2705
01:41:07,679 --> 01:41:09,360
um

2706
01:41:09,360 --> 01:41:10,639
there is

2707
01:41:10,639 --> 01:41:12,320
going to be an on-ramp we also talked

2708
01:41:12,320 --> 01:41:14,960
about this previously in the cfrg

2709
01:41:14,960 --> 01:41:17,119
uh where nist is calling for new

2710
01:41:17,119 --> 01:41:19,839
signature schemes

2711
01:41:20,000 --> 01:41:21,360
but

2712
01:41:21,360 --> 01:41:23,040
the scheme that i think is most likely

2713
01:41:23,040 --> 01:41:24,320
to

2714
01:41:24,320 --> 01:41:28,080
go into that process is uov

2715
01:41:28,080 --> 01:41:29,040
a

2716
01:41:29,040 --> 01:41:30,560
cubase scheme

2717
01:41:30,560 --> 01:41:31,840
but

2718
01:41:31,840 --> 01:41:35,040
400k for a public key is really really

2719
01:41:35,040 --> 01:41:37,600
quite big although then the plus side

2720
01:41:37,600 --> 01:41:39,119
will be that the signatures are going to

2721
01:41:39,119 --> 01:41:41,679
be very tiny so

2722
01:41:41,679 --> 01:41:45,000
maybe space

2723
01:41:56,400 --> 01:41:58,400
okay so if you're ever interested

2724
01:41:58,400 --> 01:42:00,159
actually into checking how post quantum

2725
01:42:00,159 --> 01:42:02,239
cryptography deals into the networks

2726
01:42:02,239 --> 01:42:03,600
there's different experiments that have

2727
01:42:03,600 --> 01:42:06,560
been run by google and also by cluffler

2728
01:42:06,560 --> 01:42:08,239
specifically and most of the times these

2729
01:42:08,239 --> 01:42:09,920
experiments have been around and have

2730
01:42:09,920 --> 01:42:11,760
been focused on the key exchange plot as

2731
01:42:11,760 --> 01:42:13,760
i already said and there has been really

2732
01:42:13,760 --> 01:42:15,280
few ones uh focusing on the

2733
01:42:15,280 --> 01:42:17,280
authentication so this is also a call

2734
01:42:17,280 --> 01:42:18,960
for anybody who is interested to

2735
01:42:18,960 --> 01:42:21,119
actually run more authentication

2736
01:42:21,119 --> 01:42:22,239
experiments with this quantum

2737
01:42:22,239 --> 01:42:25,280
cryptography note also that open ssh in

2738
01:42:25,280 --> 01:42:27,520
the version 8.0

2739
01:42:27,520 --> 01:42:29,520
nine sorry uses entry prime as the

2740
01:42:29,520 --> 01:42:32,080
default key exchange algorithm nexus

2741
01:42:32,080 --> 01:42:34,559
live please

2742
01:42:34,639 --> 01:42:36,080
that's also as i said already some

2743
01:42:36,080 --> 01:42:38,239
academic studies uh in this case it's

2744
01:42:38,239 --> 01:42:39,840
more constraints the results because

2745
01:42:39,840 --> 01:42:42,000
most of the times they are

2746
01:42:42,000 --> 01:42:44,400
they are running on simulated networks

2747
01:42:44,400 --> 01:42:46,719
and this is in the only sense it's the

2748
01:42:46,719 --> 01:42:49,040
only academic papers that exist around

2749
01:42:49,040 --> 01:42:51,199
password-based authentication only come

2750
01:42:51,199 --> 01:42:52,639
from the academia so there has been

2751
01:42:52,639 --> 01:42:53,440
almost

2752
01:42:53,440 --> 01:42:54,960
no

2753
01:42:54,960 --> 01:42:57,199
actual working items around that area so

2754
01:42:57,199 --> 01:42:58,560
if you're interested please check these

2755
01:42:58,560 --> 01:42:59,920
links

2756
01:42:59,920 --> 01:43:02,560
mix it live please

2757
01:43:02,560 --> 01:43:05,199
and uh

2758
01:43:05,199 --> 01:43:06,719
yeah uh

2759
01:43:06,719 --> 01:43:07,920
so

2760
01:43:07,920 --> 01:43:10,000
i just put a bunch of the stuff that i

2761
01:43:10,000 --> 01:43:12,239
could find if i type pq into the data

2762
01:43:12,239 --> 01:43:16,080
tracker um so

2763
01:43:19,600 --> 01:43:23,199
for limited use cases probably uh lance

2764
01:43:23,199 --> 01:43:26,000
is really working very hard on the whole

2765
01:43:26,000 --> 01:43:28,560
pq topic right now it seems

2766
01:43:28,560 --> 01:43:32,159
um and of course we have the hybrid

2767
01:43:35,119 --> 01:43:37,199
word mentioning is also the pqc mailing

2768
01:43:37,199 --> 01:43:39,679
list which i think opened recently and

2769
01:43:39,679 --> 01:43:40,960
uh

2770
01:43:40,960 --> 01:43:42,400
flow recently

2771
01:43:42,400 --> 01:43:44,880
sent off a draft around there

2772
01:43:44,880 --> 01:43:47,119
which aims to resolve the whole what is

2773
01:43:47,119 --> 01:43:50,080
hybrid versus transitional versus

2774
01:43:50,080 --> 01:43:52,000
composites and try to resolve that

2775
01:43:52,000 --> 01:43:54,719
language which i think is very cool

2776
01:43:54,719 --> 01:43:56,400
and i think that's going to suck this

2777
01:43:56,400 --> 01:43:57,920
patch so you might want to look out for

2778
01:43:57,920 --> 01:44:01,199
that thing as well

2779
01:44:05,199 --> 01:44:08,320
you can talk about questions

2780
01:44:12,880 --> 01:44:15,360
it's okay

2781
01:44:15,600 --> 01:44:17,679
questions

2782
01:44:17,679 --> 01:44:21,400
oh sorry go ahead tom

2783
01:44:30,880 --> 01:44:34,440
hurry go ahead

2784
01:44:36,480 --> 01:44:38,800
i just want to express

2785
01:44:38,800 --> 01:44:42,719
support for this effort and i hope that

2786
01:44:42,719 --> 01:44:44,560
it will

2787
01:44:44,560 --> 01:44:49,840
proceed on the standards track

2788
01:44:58,800 --> 01:45:02,199
any other questions

2789
01:45:03,520 --> 01:45:07,440
oh uh someone's getting up

2790
01:45:08,320 --> 01:45:10,239
scott go ahead okay scott flora cisco

2791
01:45:10,239 --> 01:45:12,960
systems one minor knit uh you you're

2792
01:45:12,960 --> 01:45:15,520
using the round two uh sphinx plus

2793
01:45:15,520 --> 01:45:17,920
parameter sets uh round three is

2794
01:45:17,920 --> 01:45:19,920
slightly smaller i don't know if it's

2795
01:45:19,920 --> 01:45:22,800
enough to make a difference

2796
01:45:23,119 --> 01:45:25,280
that i think boss might have

2797
01:45:25,280 --> 01:45:29,400
corrected us in the wrong direction

2798
01:45:30,400 --> 01:45:32,719
no i'm not sure actually um but we will

2799
01:45:32,719 --> 01:45:34,960
check that and if indeed they are wrong

2800
01:45:34,960 --> 01:45:36,880
uh we will update the slides the ones

2801
01:45:36,880 --> 01:45:40,000
that we corrected were from cfrg but uh

2802
01:45:40,000 --> 01:45:41,920
we will check it um

2803
01:45:41,920 --> 01:45:44,880
scott thank you

2804
01:45:44,880 --> 01:45:46,800
and you uh this is not very

2805
01:45:46,800 --> 01:45:49,440
authoritative

2806
01:45:51,760 --> 01:45:54,960
good go ahead hi uh

2807
01:45:54,960 --> 01:45:56,960
i was wondering if you've done the

2808
01:45:56,960 --> 01:45:58,880
arithmetic on

2809
01:45:58,880 --> 01:46:01,119
how many bytes we're talking about and

2810
01:46:01,119 --> 01:46:02,159
whether

2811
01:46:02,159 --> 01:46:05,040
we're likely to run into any

2812
01:46:05,040 --> 01:46:07,040
length limits in

2813
01:46:07,040 --> 01:46:09,280
in tls so

2814
01:46:09,280 --> 01:46:11,600
things like you know there's a

2815
01:46:11,600 --> 01:46:14,719
there's a limit of 16 megabytes i think

2816
01:46:14,719 --> 01:46:17,760
for each certificate for each handshake

2817
01:46:17,760 --> 01:46:20,400
message or maybe more practically

2818
01:46:20,400 --> 01:46:22,880
there's a limit in how many

2819
01:46:22,880 --> 01:46:24,800
uh how many packets can be sent in the

2820
01:46:24,800 --> 01:46:26,560
first flight of a quick connection which

2821
01:46:26,560 --> 01:46:29,760
limits the size of quick initials

2822
01:46:29,760 --> 01:46:32,880
i wonder uh if you know how far are we

2823
01:46:32,880 --> 01:46:35,280
or from from those limits with these

2824
01:46:35,280 --> 01:46:37,520
algorithms

2825
01:46:37,520 --> 01:46:41,199
uh if i'll take this one um so

2826
01:46:41,199 --> 01:46:43,440
for starters there is the

2827
01:46:43,440 --> 01:46:47,440
boss westerbot wrote a nice article

2828
01:46:50,960 --> 01:46:53,040
to drag over the internet if you just

2829
01:46:53,040 --> 01:46:55,119
for example put the lithium somewhere

2830
01:46:55,119 --> 01:46:57,840
and how much latency that imposes which

2831
01:46:57,840 --> 01:47:00,159
was a

2832
01:47:06,239 --> 01:47:08,239
experiments with post-quantum stuff in

2833
01:47:08,239 --> 01:47:10,239
tls uh

2834
01:47:10,239 --> 01:47:12,880
and and while implementing that uh for

2835
01:47:12,880 --> 01:47:14,800
the more ridiculous schemes

2836
01:47:14,800 --> 01:47:18,560
out there i found that

2837
01:47:20,000 --> 01:47:22,080
common for implementations to have a

2838
01:47:22,080 --> 01:47:23,600
comment in their

2839
01:47:23,600 --> 01:47:24,880
parser

2840
01:47:24,880 --> 01:47:26,159
uh

2841
01:47:26,159 --> 01:47:27,840
and one part so that

2842
01:47:27,840 --> 01:47:31,040
oh yeah uh

2843
01:47:32,800 --> 01:47:36,719
whatever is going to send that so by

2844
01:47:36,719 --> 01:47:40,000
and that kind of stuff is implicit uh

2845
01:47:40,000 --> 01:47:42,080
but definitely present so that might be

2846
01:47:42,080 --> 01:47:44,320
a challenge going forward

2847
01:47:44,320 --> 01:47:47,320
um

2848
01:47:50,480 --> 01:47:51,600
quick

2849
01:47:51,600 --> 01:47:53,080
has the

2850
01:47:53,080 --> 01:47:54,639
anti-amplification thing that you can

2851
01:47:54,639 --> 01:47:56,560
only send back three times the initial

2852
01:47:56,560 --> 01:47:58,960
message uh and

2853
01:47:58,960 --> 01:48:00,880
this will likely mean that you need to

2854
01:48:00,880 --> 01:48:01,840
do

2855
01:48:01,840 --> 01:48:04,400
padding of the initial message

2856
01:48:04,400 --> 01:48:07,600
or perhaps even initial messages

2857
01:48:07,600 --> 01:48:09,440
such that the server can actually send

2858
01:48:09,440 --> 01:48:11,679
back the certificate chain if it goes to

2859
01:48:11,679 --> 01:48:14,840
the side

2860
01:48:20,960 --> 01:48:24,320
uh thought about this a little bit uh i

2861
01:48:24,320 --> 01:48:26,199
think they also have an issue on their

2862
01:48:26,199 --> 01:48:28,159
interoperability checker to also

2863
01:48:28,159 --> 01:48:31,119
actually check if this works but

2864
01:48:31,119 --> 01:48:33,839
i i

2865
01:48:34,480 --> 01:48:36,480
i just looked at a few documents one

2866
01:48:36,480 --> 01:48:38,239
time to see if it was interesting for

2867
01:48:38,239 --> 01:48:40,080
research but it seems they have thought

2868
01:48:40,080 --> 01:48:42,639
about it basically

2869
01:48:42,639 --> 01:48:43,760
yeah the

2870
01:48:43,760 --> 01:48:46,000
the quick working group does have it i'm

2871
01:48:46,000 --> 01:48:47,679
not sure if they have updated it but

2872
01:48:47,679 --> 01:48:49,280
they were planning at some point doing a

2873
01:48:49,280 --> 01:48:51,840
hackathon to actually check it but lucas

2874
01:48:51,840 --> 01:48:54,239
padilla might not know more updated

2875
01:48:54,239 --> 01:48:56,320
versions of that it has not been a

2876
01:48:56,320 --> 01:48:58,320
formal study of the different sizes i

2877
01:48:58,320 --> 01:49:00,320
know it has happened for dns sec because

2878
01:49:00,320 --> 01:49:02,000
they sent very interesting paper by

2879
01:49:02,000 --> 01:49:05,040
ronan phone heist van dyke um but not

2880
01:49:05,040 --> 01:49:07,040
specifically to a tls so maybe that's

2881
01:49:07,040 --> 01:49:08,320
something that can be looked into

2882
01:49:08,320 --> 01:49:09,520
vietnam

2883
01:49:09,520 --> 01:49:11,840
thank you

2884
01:49:12,560 --> 01:49:14,159
erica scroll uh yes it's probably worth

2885
01:49:14,159 --> 01:49:15,840
distinguishing the network dynamics from

2886
01:49:15,840 --> 01:49:18,960
implementation issues so i mean i i

2887
01:49:18,960 --> 01:49:20,560
agree there probably

2888
01:49:20,560 --> 01:49:22,000
probably are implementations which are

2889
01:49:22,000 --> 01:49:23,760
sad if you send them one megabyte certs

2890
01:49:23,760 --> 01:49:25,040
but the implementation would have to

2891
01:49:25,040 --> 01:49:26,639
advertise that they spoke post quantum

2892
01:49:26,639 --> 01:49:28,560
anyway and no and you could just not do

2893
01:49:28,560 --> 01:49:29,679
that if you haven't figured out how to

2894
01:49:29,679 --> 01:49:31,679
fix the you know the giant message

2895
01:49:31,679 --> 01:49:33,679
problem on the receiver side um so i

2896
01:49:33,679 --> 01:49:34,800
don't that's a big deal and the bigger

2897
01:49:34,800 --> 01:49:37,040
deal is around trip time and like the

2898
01:49:37,040 --> 01:49:38,320
size of the initial flights and whatever

2899
01:49:38,320 --> 01:49:40,480
and so once you get outside like iw10

2900
01:49:40,480 --> 01:49:42,239
things start to get pretty terrifying um

2901
01:49:42,239 --> 01:49:43,599
even if you have indie amplification

2902
01:49:43,599 --> 01:49:44,639
techniques

2903
01:49:44,639 --> 01:49:46,639
um because you just can't dump like you

2904
01:49:46,639 --> 01:49:48,400
can't just dump 50 packets on the wire

2905
01:49:48,400 --> 01:49:51,280
like under basically any conditions um

2906
01:49:51,280 --> 01:49:52,639
so um

2907
01:49:52,639 --> 01:49:54,239
and remember the quick any amplification

2908
01:49:54,239 --> 01:49:56,960
is about is is about on avoiding having

2909
01:49:56,960 --> 01:49:59,119
established a run trip time um and i

2910
01:49:59,119 --> 01:50:01,280
think practically like i mean i'm not

2911
01:50:01,280 --> 01:50:02,880
sure um

2912
01:50:02,880 --> 01:50:04,159
david ben's not here i don't think but

2913
01:50:04,159 --> 01:50:06,080
um you know i think the general sense is

2914
01:50:06,080 --> 01:50:07,440
like once you get about about 10

2915
01:50:07,440 --> 01:50:08,719
kilobytes for like the certificate

2916
01:50:08,719 --> 01:50:10,320
payload like people start to get pretty

2917
01:50:10,320 --> 01:50:12,320
sad about the whole thing and um

2918
01:50:12,320 --> 01:50:13,840
illustrate tls and it's not because the

2919
01:50:13,840 --> 01:50:15,199
implementation is because of tcp

2920
01:50:15,199 --> 01:50:18,239
dynamics so um you know i was looking at

2921
01:50:18,239 --> 01:50:19,679
this and being like this is all pretty

2922
01:50:19,679 --> 01:50:21,440
horrifying um

2923
01:50:21,440 --> 01:50:24,400
and so um i i think the good news is

2924
01:50:24,400 --> 01:50:25,599
like you know

2925
01:50:25,599 --> 01:50:26,960
it's all it's all over in the future but

2926
01:50:26,960 --> 01:50:29,040
like it's all pretty horrifying

2927
01:50:29,040 --> 01:50:32,000
mt can speak for the teal work

2928
01:50:32,000 --> 01:50:33,840
yeah there's something there that maybe

2929
01:50:33,840 --> 01:50:35,840
there will be hope of something coming

2930
01:50:35,840 --> 01:50:38,159
that it has some smaller sizes so i mean

2931
01:50:38,159 --> 01:50:40,400
in the c30 presentation we do talk about

2932
01:50:40,400 --> 01:50:43,119
that there's going to be a new call for

2933
01:50:43,119 --> 01:50:45,119
algorithm proposals for signatures so

2934
01:50:45,119 --> 01:50:46,960
maybe there will be something smallish

2935
01:50:46,960 --> 01:50:48,639
coming but i don't think there are i

2936
01:50:48,639 --> 01:50:50,719
don't think elliptic curve cryptography

2937
01:50:50,719 --> 01:50:53,199
is more

2938
01:50:53,199 --> 01:50:55,119
yeah so so martin thompson there's a

2939
01:50:55,119 --> 01:50:56,080
bunch of things that we're going to need

2940
01:50:56,080 --> 01:50:58,400
to work through with quick

2941
01:50:58,400 --> 01:51:00,480
because one of the things that concerns

2942
01:51:00,480 --> 01:51:03,199
me here is that even just trying to put

2943
01:51:03,199 --> 01:51:05,199
kyber in the first

2944
01:51:05,199 --> 01:51:07,280
message is going to overflow that one

2945
01:51:07,280 --> 01:51:09,520
with you know there's not a lot of extra

2946
01:51:09,520 --> 01:51:11,199
space there when we talk about maybe a

2947
01:51:11,199 --> 01:51:13,760
1300 byte packet and then you've got to

2948
01:51:13,760 --> 01:51:14,800
put

2949
01:51:14,800 --> 01:51:16,960
a kyber key exchange in there and you

2950
01:51:16,960 --> 01:51:18,880
basically used it all up at that point

2951
01:51:18,880 --> 01:51:20,880
at the point that you have to send you

2952
01:51:20,880 --> 01:51:23,040
have to send two packets

2953
01:51:23,040 --> 01:51:25,920
that's a major problem for the client uh

2954
01:51:25,920 --> 01:51:27,360
hello

2955
01:51:27,360 --> 01:51:28,800
if we can get it into one packet that

2956
01:51:28,800 --> 01:51:31,199
would be that would be great

2957
01:51:31,199 --> 01:51:34,919
that means potentially

2958
01:51:34,960 --> 01:51:36,960
i basically that just means i'm really

2959
01:51:36,960 --> 01:51:38,560
sad about the the points that nist has

2960
01:51:38,560 --> 01:51:40,800
managed to to decide

2961
01:51:40,800 --> 01:51:42,480
are appropriate for the security levels

2962
01:51:42,480 --> 01:51:44,560
they're targeting i would probably be

2963
01:51:44,560 --> 01:51:46,960
happy with a slightly less lesser

2964
01:51:46,960 --> 01:51:48,560
security target in order to fit it in

2965
01:51:48,560 --> 01:51:50,400
the down packets because the performance

2966
01:51:50,400 --> 01:51:52,239
is going to tank badly

2967
01:51:52,239 --> 01:51:55,199
uh as far as anti-amplification goes

2968
01:51:55,199 --> 01:51:57,360
i think that's much less of a pressing

2969
01:51:57,360 --> 01:51:59,199
concern because the client can send a

2970
01:51:59,199 --> 01:52:01,520
few extra packets if it knows that the

2971
01:52:01,520 --> 01:52:04,159
client needs to send a lot more and and

2972
01:52:04,159 --> 01:52:06,080
if they're not critical

2973
01:52:06,080 --> 01:52:08,080
then if they get lost it's not a big

2974
01:52:08,080 --> 01:52:10,560
deal but if they are critical

2975
01:52:10,560 --> 01:52:12,159
and you're putting the key exchange in

2976
01:52:12,159 --> 01:52:13,440
multiple packets then it becomes a

2977
01:52:13,440 --> 01:52:14,480
problem

2978
01:52:14,480 --> 01:52:17,520
as i said 10k is probably

2979
01:52:17,520 --> 01:52:19,840
we we might be able to push it over 10k

2980
01:52:19,840 --> 01:52:20,960
for something like quick where it's

2981
01:52:20,960 --> 01:52:23,599
relatively new but i don't imagine

2982
01:52:23,599 --> 01:52:25,040
that there's going to be

2983
01:52:25,040 --> 01:52:27,280
very many people are happy if it's

2984
01:52:27,280 --> 01:52:30,400
many tens of k's or you know the 400k

2985
01:52:30,400 --> 01:52:32,320
thing is just a non-starter so we'll

2986
01:52:32,320 --> 01:52:33,920
have to get creative with compression

2987
01:52:33,920 --> 01:52:35,360
and and things like that when it comes

2988
01:52:35,360 --> 01:52:37,199
to that

2989
01:52:37,199 --> 01:52:39,040
i can confirm that

2990
01:52:39,040 --> 01:52:41,760
all of the stacks are fine if you send a

2991
01:52:41,760 --> 01:52:44,320
very large client hello but the

2992
01:52:44,320 --> 01:52:47,599
performance is going to be terrible

2993
01:52:47,599 --> 01:52:50,000
yeah i completely agree and one of the

2994
01:52:50,000 --> 01:52:52,080
things is that during the

2995
01:52:52,080 --> 01:52:53,840
standardization process there were some

2996
01:52:53,840 --> 01:52:55,280
people academic papers and some

2997
01:52:55,280 --> 01:52:56,960
experiments about what could fit into

2998
01:52:56,960 --> 01:52:58,880
the networks or not but not much that

2999
01:52:58,880 --> 01:53:00,719
many information as compared with all

3000
01:53:00,719 --> 01:53:03,440
the things that the nissa's focused on

3001
01:53:03,440 --> 01:53:05,280
um so if you're actually interested in

3002
01:53:05,280 --> 01:53:07,119
this to hear and this my recommendation

3003
01:53:07,119 --> 01:53:09,679
will be to actually attending either the

3004
01:53:09,679 --> 01:53:11,280
nice workshop that is going to be

3005
01:53:11,280 --> 01:53:13,199
happening on november and actually

3006
01:53:13,199 --> 01:53:15,119
putting together what will be real

3007
01:53:15,119 --> 01:53:16,560
considerations from networks and

3008
01:53:16,560 --> 01:53:18,719
protocols we are also running an event

3009
01:53:18,719 --> 01:53:20,880
which is called pq net and i will put it

3010
01:53:20,880 --> 01:53:23,920
later on the sulip chat um in which

3011
01:53:23,920 --> 01:53:25,520
we talk about pos quantum manners we're

3012
01:53:25,520 --> 01:53:26,960
protocols and this time is probably

3013
01:53:26,960 --> 01:53:28,719
going to be local located within this

3014
01:53:28,719 --> 01:53:30,719
workshop on november so if you're ever

3015
01:53:30,719 --> 01:53:32,159
interested in actually talking about

3016
01:53:32,159 --> 01:53:35,040
these consent and main i'm making these

3017
01:53:35,040 --> 01:53:37,119
reach the nist ears maybe that is also

3018
01:53:37,119 --> 01:53:40,280
the place

3019
01:53:45,679 --> 01:53:48,320
can i just one one thing to point out

3020
01:53:48,320 --> 01:53:50,239
that we missed in that one

3021
01:53:50,239 --> 01:53:51,280
um

3022
01:53:51,280 --> 01:53:53,679
and scott's distracted me so i've

3023
01:53:53,679 --> 01:53:55,760
largely lost the thread i'll carry it on

3024
01:53:55,760 --> 01:53:58,560
chat that's right

3025
01:53:58,560 --> 01:54:01,360
okay yes i apologize i just thought of

3026
01:54:01,360 --> 01:54:03,840
it as i walked away um if you send a

3027
01:54:03,840 --> 01:54:07,040
message in two packets to a server

3028
01:54:07,040 --> 01:54:08,560
those servers that are doing stateless

3029
01:54:08,560 --> 01:54:10,719
processing will likely to

3030
01:54:10,719 --> 01:54:12,800
likely tell you to go away and come back

3031
01:54:12,800 --> 01:54:14,639
again later and that's going to add a

3032
01:54:14,639 --> 01:54:16,480
round trip to everything and i can see

3033
01:54:16,480 --> 01:54:19,199
yes yes yes she's saying um that's

3034
01:54:19,199 --> 01:54:23,400
that's a major major problem

3035
01:54:24,239 --> 01:54:25,679
okay that's fine

3036
01:54:25,679 --> 01:54:28,880
all right thank you sophie and tom

3037
01:54:29,360 --> 01:54:31,679
uh we pushed one agenda item to the end

3038
01:54:31,679 --> 01:54:34,480
uh that is the uh outstanding issue on

3039
01:54:34,480 --> 01:54:36,560
the tls flags

3040
01:54:36,560 --> 01:54:39,520
draft job is here

3041
01:54:40,480 --> 01:54:42,000
having technical difficulties up here so

3042
01:54:42,000 --> 01:54:43,679
we can't pull up the pr but we can

3043
01:54:43,679 --> 01:54:48,280
probably just speak to it that's okay

3044
01:54:53,119 --> 01:54:55,679
so the one question that remained was uh

3045
01:54:55,679 --> 01:54:57,440
is it possible with the tls flag

3046
01:54:57,440 --> 01:55:01,440
extension to ha to define a flag that

3047
01:55:01,440 --> 01:55:04,239
the request uh saying the client hello

3048
01:55:04,239 --> 01:55:07,360
is just that one flag bit

3049
01:55:07,360 --> 01:55:09,280
but the response is going to be a real

3050
01:55:09,280 --> 01:55:11,599
response and a real extension with

3051
01:55:11,599 --> 01:55:13,679
actual content rather than just yeah i

3052
01:55:13,679 --> 01:55:16,239
support this so the client says well it

3053
01:55:16,239 --> 01:55:18,080
could be the other way around with the

3054
01:55:18,080 --> 01:55:20,560
reverse thing but so say the client says

3055
01:55:20,560 --> 01:55:22,639
i support this and then the server says

3056
01:55:22,639 --> 01:55:24,560
okay so here's a whole bunch of

3057
01:55:24,560 --> 01:55:27,520
information and the question was is this

3058
01:55:27,520 --> 01:55:30,400
legitimate use and

3059
01:55:30,400 --> 01:55:33,840
well so i wrote the pr that says no you

3060
01:55:33,840 --> 01:55:35,280
can't do that

3061
01:55:35,280 --> 01:55:38,080
and we asked for um comments and we got

3062
01:55:38,080 --> 01:55:40,480
pretty much nothing until

3063
01:55:40,480 --> 01:55:42,560
uh today when we got uh

3064
01:55:42,560 --> 01:55:45,440
something kind of non-committal from uh

3065
01:55:45,440 --> 01:55:47,520
ecker and martin so

3066
01:55:47,520 --> 01:55:50,080
either way we can have it with this

3067
01:55:50,080 --> 01:55:52,719
with this pr or without this pr but uh

3068
01:55:52,719 --> 01:55:56,400
i think it's time to close out this

3069
01:55:56,560 --> 01:55:58,239
the text is in the chat

3070
01:55:58,239 --> 01:56:01,040
thank you sean ecker go ahead

3071
01:56:01,040 --> 01:56:03,280
so i mean i agree this pr is clear and

3072
01:56:03,280 --> 01:56:05,840
this pr clearly says you can't do it um

3073
01:56:05,840 --> 01:56:07,040
my view i think is you should be able to

3074
01:56:07,040 --> 01:56:08,880
do it because i think of sending it as i

3075
01:56:08,880 --> 01:56:10,239
think of sending the bit as sending the

3076
01:56:10,239 --> 01:56:12,320
extension i think martin thinks i'm not

3077
01:56:12,320 --> 01:56:13,280
thinks of sending the extension of

3078
01:56:13,280 --> 01:56:15,520
sending the extension um you know i

3079
01:56:15,520 --> 01:56:18,000
think um you know i'm not gonna like lie

3080
01:56:18,000 --> 01:56:19,920
down on the floor over this um but i

3081
01:56:19,920 --> 01:56:22,080
think martin isn't either so um i guess

3082
01:56:22,080 --> 01:56:23,280
like is there anybody else having to

3083
01:56:23,280 --> 01:56:27,400
find this topic do they want to weigh in

3084
01:56:28,960 --> 01:56:30,800
i i don't have a strong opinion about

3085
01:56:30,800 --> 01:56:32,239
this either and that's the problem here

3086
01:56:32,239 --> 01:56:34,400
nobody cares enough yeah i mean i mean

3087
01:56:34,400 --> 01:56:36,080
yes we have i think this is like i mean

3088
01:56:36,080 --> 01:56:37,440
i guess i would do like a design taste

3089
01:56:37,440 --> 01:56:38,880
thing which is like martin thinks simple

3090
01:56:38,880 --> 01:56:40,320
is good and i think i think i think

3091
01:56:40,320 --> 01:56:42,960
flexible is good and that like i'm just

3092
01:56:42,960 --> 01:56:44,239
i'm just like sad that we're gonna like

3093
01:56:44,239 --> 01:56:45,679
someday have an extension that is like

3094
01:56:45,679 --> 01:56:47,599
you know that is like that is like

3095
01:56:47,599 --> 01:56:50,239
you know another 200 bytes and the

3096
01:56:50,239 --> 01:56:51,280
server's going to want to send and the

3097
01:56:51,280 --> 01:56:52,800
clients have to burn four bytes to say

3098
01:56:52,800 --> 01:56:54,719
go ahead and send it and i think martin

3099
01:56:54,719 --> 01:56:55,679
thinks that doesn't make a difference so

3100
01:56:55,679 --> 01:56:57,280
that's that's the exact that's the sum

3101
01:56:57,280 --> 01:57:00,000
total disagreement

3102
01:57:00,000 --> 01:57:01,520
i think the tricky

3103
01:57:01,520 --> 01:57:03,840
thing here is to find

3104
01:57:03,840 --> 01:57:04,639
some

3105
01:57:04,639 --> 01:57:07,520
good uses of the flex extension

3106
01:57:07,520 --> 01:57:09,679
and then to to actually see whether

3107
01:57:09,679 --> 01:57:10,400
that's

3108
01:57:10,400 --> 01:57:12,560
practical because it would be annoying

3109
01:57:12,560 --> 01:57:14,719
if we if there are a few extensions that

3110
01:57:14,719 --> 01:57:15,920
can make

3111
01:57:15,920 --> 01:57:18,080
use of it and then they can't be used

3112
01:57:18,080 --> 01:57:20,320
because of some other um constraints

3113
01:57:20,320 --> 01:57:21,920
that put you put in there and that makes

3114
01:57:21,920 --> 01:57:25,400
it completely useless

3115
01:57:25,840 --> 01:57:26,719
that's

3116
01:57:26,719 --> 01:57:29,119
some perfectly happy making another pr

3117
01:57:29,119 --> 01:57:31,440
that says yes it is okay to do this and

3118
01:57:31,440 --> 01:57:33,760
then we can pick either one of those

3119
01:57:33,760 --> 01:57:34,960
pr's

3120
01:57:34,960 --> 01:57:37,040
and commit them to the text

3121
01:57:37,040 --> 01:57:40,080
okay or anyone else can do this that

3122
01:57:40,080 --> 01:57:42,639
other pr

3123
01:57:43,360 --> 01:57:45,199
okay like

3124
01:57:45,199 --> 01:57:46,960
basically same things that have already

3125
01:57:46,960 --> 01:57:48,960
been said uh we should be clear about

3126
01:57:48,960 --> 01:57:51,840
whether it is or is not allowed i don't

3127
01:57:51,840 --> 01:57:54,719
have a strong opinion i tend to

3128
01:57:54,719 --> 01:57:56,960
have my my intuition be the same as

3129
01:57:56,960 --> 01:57:58,560
martin

3130
01:57:58,560 --> 01:58:02,080
that you should not allow it but

3131
01:58:02,080 --> 01:58:04,159
if we can come up with

3132
01:58:04,159 --> 01:58:05,599
reasons we like that we should allow it

3133
01:58:05,599 --> 01:58:07,679
i think i i don't know of a reason it's

3134
01:58:07,679 --> 01:58:08,960
a fatal flaw

3135
01:58:08,960 --> 01:58:10,880
i don't know of any vulnerabilities with

3136
01:58:10,880 --> 01:58:13,040
it

3137
01:58:15,599 --> 01:58:18,080
let's imagine a silly extension we have

3138
01:58:18,080 --> 01:58:19,040
the

3139
01:58:19,040 --> 01:58:20,960
terms and condition

3140
01:58:20,960 --> 01:58:23,280
extension that we get from the server

3141
01:58:23,280 --> 01:58:25,199
the terms and condition for using it and

3142
01:58:25,199 --> 01:58:27,440
so we only have to send this one bit

3143
01:58:27,440 --> 01:58:29,760
from the client and then get the whole

3144
01:58:29,760 --> 01:58:30,960
terms and conditions as opposed to

3145
01:58:30,960 --> 01:58:32,480
sending a whole

3146
01:58:32,480 --> 01:58:34,560
four bytes of uh i want the terms and

3147
01:58:34,560 --> 01:58:36,800
conditions for getting it but that's

3148
01:58:36,800 --> 01:58:38,960
just a silly example yeah i mean that's

3149
01:58:38,960 --> 01:58:39,920
the kind of thing i was thinking of look

3150
01:58:39,920 --> 01:58:41,520
i mean we rarely hung here because

3151
01:58:41,520 --> 01:58:43,040
usually we have consensus but like i

3152
01:58:43,040 --> 01:58:44,400
think every possible argument in favor

3153
01:58:44,400 --> 01:58:45,920
against this has been already stated so

3154
01:58:45,920 --> 01:58:49,199
i suggest we just come and live with it

3155
01:58:49,199 --> 01:58:50,320
good

3156
01:58:50,320 --> 01:58:51,679
all right let's let's quickly do a home

3157
01:58:51,679 --> 01:58:53,840
then can you

3158
01:58:53,840 --> 01:58:55,599
pull up the show a hands tool

3159
01:58:55,599 --> 01:58:58,599
um

3160
01:59:02,159 --> 01:59:04,719
don't care

3161
01:59:14,480 --> 01:59:16,719
oh um

3162
01:59:16,719 --> 01:59:18,239
the the pr text is in the chat we

3163
01:59:18,239 --> 01:59:21,280
dropped it in there um

3164
01:59:25,679 --> 01:59:27,280
you can share a screen not just no we're

3165
01:59:27,280 --> 01:59:28,639
having technical difficulties so we

3166
01:59:28,639 --> 01:59:30,560
can't share the screen um dick says for

3167
01:59:30,560 --> 01:59:32,719
a flag that does not require response

3168
01:59:32,719 --> 01:59:34,400
the only proper response is the same

3169
01:59:34,400 --> 01:59:36,639
flag and a flag extension this that

3170
01:59:36,639 --> 01:59:38,480
extension must not be used to specify

3171
01:59:38,480 --> 01:59:40,480
extensions where the response

3172
01:59:40,480 --> 01:59:44,639
is a proper extension with content

3173
01:59:44,639 --> 01:59:47,119
um okay so the we just put a quick show

3174
01:59:47,119 --> 01:59:48,639
of hands um

3175
01:59:48,639 --> 01:59:50,400
uh with the title disallow non-flag

3176
01:59:50,400 --> 01:59:53,040
responses which is uh basically the pr

3177
01:59:53,040 --> 01:59:55,440
as written um

3178
01:59:55,440 --> 01:59:57,119
and if you are supportive of this pr

3179
01:59:57,119 --> 01:59:59,040
raise your hand i guess do not

3180
01:59:59,040 --> 02:00:00,080
supportive and you want to go with the

3181
02:00:00,080 --> 02:00:02,480
officer out uh do not raise your hand if

3182
02:00:02,480 --> 02:00:05,759
you do not have a strong opinion

3183
02:00:06,000 --> 02:00:07,760
nothing

3184
02:00:07,760 --> 02:00:08,880
sorry

3185
02:00:08,880 --> 02:00:10,480
it's a virtual

3186
02:00:10,480 --> 02:00:13,799
show of hands

3187
02:00:16,639 --> 02:00:18,320
there's it's a hybrid meeting i have to

3188
02:00:18,320 --> 02:00:20,320
do virtually okay um

3189
02:00:20,320 --> 02:00:23,040
it seems like it's going in

3190
02:00:23,040 --> 02:00:25,040
towards the current pr so

3191
02:00:25,040 --> 02:00:26,639
um

3192
02:00:26,639 --> 02:00:28,719
fifteen to seven

3193
02:00:28,719 --> 02:00:30,880
so let's see so merged let's merge the

3194
02:00:30,880 --> 02:00:33,040
pr

3195
02:00:33,040 --> 02:00:34,159
thank you for

3196
02:00:34,159 --> 02:00:35,199
all of your opinions and thank you for

3197
02:00:35,199 --> 02:00:38,480
attending tls um

3198
02:00:38,639 --> 02:00:40,159
yeah

3199
02:00:40,159 --> 02:00:43,799
we finished on time

3200
02:00:59,280 --> 02:01:03,360
oh jesus oh it's an hour and a half

3201
02:01:04,000 --> 02:01:07,400
when is it

