1
00:00:08,240 --> 00:00:11,240
okay

2
00:00:24,640 --> 00:00:27,640
uh

3
00:00:45,840 --> 00:00:49,079
here we go

4
00:01:21,840 --> 00:01:24,840
yes

5
00:02:22,319 --> 00:02:25,319
okay

6
00:02:46,879 --> 00:02:50,560
okay hello everyone

7
00:02:50,560 --> 00:02:51,840
we're gonna get started with the

8
00:02:51,840 --> 00:02:55,280
presentations in just a minute

9
00:02:56,400 --> 00:02:59,040
so if i could get everyone to uh find a

10
00:02:59,040 --> 00:03:01,200
seat

11
00:03:01,200 --> 00:03:04,679
that would be great

12
00:03:17,280 --> 00:03:18,640
okay

13
00:03:18,640 --> 00:03:20,000
so

14
00:03:20,000 --> 00:03:21,519
we're going to get started we covered

15
00:03:21,519 --> 00:03:23,760
the note well yesterday but just as a

16
00:03:23,760 --> 00:03:25,440
refresher for those of you who showed up

17
00:03:25,440 --> 00:03:26,480
today

18
00:03:26,480 --> 00:03:28,959
uh everything in the hackathon and

19
00:03:28,959 --> 00:03:31,120
in the ietf in general falls under this

20
00:03:31,120 --> 00:03:33,519
note well um covers like the

21
00:03:33,519 --> 00:03:35,519
presentations that you'll be doing here

22
00:03:35,519 --> 00:03:37,599
so if you haven't familiarized yourself

23
00:03:37,599 --> 00:03:40,080
with it already maybe before you present

24
00:03:40,080 --> 00:03:42,239
um see what you're signing up to but it

25
00:03:42,239 --> 00:03:44,159
basically covers the ietf rules and

26
00:03:44,159 --> 00:03:46,720
procedures and and when you're sharing

27
00:03:46,720 --> 00:03:48,640
something here

28
00:03:48,640 --> 00:03:50,480
that that's an ietf contribution the

29
00:03:50,480 --> 00:03:53,760
presentation that you're sharing

30
00:03:54,080 --> 00:03:55,680
so

31
00:03:55,680 --> 00:03:57,920
the agenda we came to this point it's

32
00:03:57,920 --> 00:03:59,200
about two o'clock we're going to get

33
00:03:59,200 --> 00:04:01,439
started with the presentations

34
00:04:01,439 --> 00:04:02,560
and

35
00:04:02,560 --> 00:04:03,360
um

36
00:04:03,360 --> 00:04:04,879
and some people have been asking about

37
00:04:04,879 --> 00:04:07,680
the order and the order is going to be

38
00:04:07,680 --> 00:04:09,519
based on the order in which they

39
00:04:09,519 --> 00:04:11,760
basically got put into the github repo

40
00:04:11,760 --> 00:04:13,040
because they're getting pulled from the

41
00:04:13,040 --> 00:04:15,680
github repo being pulled into meet techo

42
00:04:15,680 --> 00:04:17,600
and then we're gonna go through them and

43
00:04:17,600 --> 00:04:19,519
meet teca so

44
00:04:19,519 --> 00:04:22,320
uh the first one is this one because i

45
00:04:22,320 --> 00:04:24,880
uploaded it yesterday and they're just

46
00:04:24,880 --> 00:04:26,560
so they're not appearing in alphabetical

47
00:04:26,560 --> 00:04:28,000
order they're appearing even though they

48
00:04:28,000 --> 00:04:30,000
might look that way in github it's

49
00:04:30,000 --> 00:04:33,120
basically based on when they came in

50
00:04:33,120 --> 00:04:34,160
if you

51
00:04:34,160 --> 00:04:36,720
don't have your presentation in yet

52
00:04:36,720 --> 00:04:38,720
we'll be looking for it to get uploaded

53
00:04:38,720 --> 00:04:41,520
to github and we will try to pull it in

54
00:04:41,520 --> 00:04:43,680
so you'll probably be more toward the

55
00:04:43,680 --> 00:04:44,800
the end

56
00:04:44,800 --> 00:04:46,479
but you know i so i can't tell you

57
00:04:46,479 --> 00:04:48,400
exactly when your presentation is going

58
00:04:48,400 --> 00:04:49,199
to be

59
00:04:49,199 --> 00:04:51,680
if anyone has a a real challenge with

60
00:04:51,680 --> 00:04:54,000
time i know one person who does we're

61
00:04:54,000 --> 00:04:55,199
going to try to

62
00:04:55,199 --> 00:04:57,520
fit that person in at a very specific

63
00:04:57,520 --> 00:04:59,680
time otherwise we're going to basically

64
00:04:59,680 --> 00:05:01,759
go through them in order if you happen

65
00:05:01,759 --> 00:05:03,840
to not be here when we get to yours

66
00:05:03,840 --> 00:05:06,400
we'll come back again so so you know

67
00:05:06,400 --> 00:05:08,320
don't worry too much about that but just

68
00:05:08,320 --> 00:05:10,639
to make it flow smoothly we'll try to go

69
00:05:10,639 --> 00:05:12,720
through an order and we can try to give

70
00:05:12,720 --> 00:05:14,880
you a heads up too as to which one's

71
00:05:14,880 --> 00:05:17,280
next

72
00:05:17,919 --> 00:05:18,800
um

73
00:05:18,800 --> 00:05:20,639
you will be driving your presentation

74
00:05:20,639 --> 00:05:22,800
from up here just like i am now so

75
00:05:22,800 --> 00:05:24,639
basically we'll share your slides and

76
00:05:24,639 --> 00:05:26,400
then we'll give you control to drive it

77
00:05:26,400 --> 00:05:29,359
from this laptop

78
00:05:30,960 --> 00:05:34,880
and any questions about that

79
00:05:36,720 --> 00:05:38,479
okay i have some questions as to whether

80
00:05:38,479 --> 00:05:40,320
it's really going to work but

81
00:05:40,320 --> 00:05:42,639
we'll figure it out as we go along so

82
00:05:42,639 --> 00:05:45,280
far so good

83
00:05:45,440 --> 00:05:47,520
and i think that is

84
00:05:47,520 --> 00:05:49,199
it for that stuff oh yeah with your

85
00:05:49,199 --> 00:05:50,720
presentation just again one more

86
00:05:50,720 --> 00:05:52,880
reminder very quick hitting

87
00:05:52,880 --> 00:05:55,039
presentations these are short four

88
00:05:55,039 --> 00:05:57,280
minutes at the absolute most if you can

89
00:05:57,280 --> 00:05:59,440
do it in less that's fantastic because

90
00:05:59,440 --> 00:06:01,759
we have like 20 or more of these to get

91
00:06:01,759 --> 00:06:03,520
through and we need to get through them

92
00:06:03,520 --> 00:06:06,160
all with the changes over and you know

93
00:06:06,160 --> 00:06:08,560
speaker and that within two hours

94
00:06:08,560 --> 00:06:09,680
so uh

95
00:06:09,680 --> 00:06:12,160
we'll have more time for more in-depth

96
00:06:12,160 --> 00:06:14,080
discussion later on and maybe i'll just

97
00:06:14,080 --> 00:06:15,840
pull that up now too while i'm thinking

98
00:06:15,840 --> 00:06:18,960
about it i think the next slide i have

99
00:06:18,960 --> 00:06:21,840
this is a little slow

100
00:06:21,840 --> 00:06:24,000
oh so this is the github repo that your

101
00:06:24,000 --> 00:06:26,960
slides need to be in

102
00:06:26,960 --> 00:06:28,160
and

103
00:06:28,160 --> 00:06:30,560
the longer time for presentations will

104
00:06:30,560 --> 00:06:32,479
be a hack demo happy hour tomorrow we'll

105
00:06:32,479 --> 00:06:35,520
have a whole hour when you can

106
00:06:35,520 --> 00:06:38,479
sign up you can be here and you can have

107
00:06:38,479 --> 00:06:40,080
you can talk to someone for an hour if

108
00:06:40,080 --> 00:06:42,800
you want about all that you did so today

109
00:06:42,800 --> 00:06:44,319
just try to get the the main points

110
00:06:44,319 --> 00:06:46,720
across

111
00:06:47,199 --> 00:06:50,800
okay and with that we are going to go to

112
00:06:50,800 --> 00:06:53,360
the um

113
00:06:53,840 --> 00:06:58,638
the next the first project presentation

114
00:06:58,960 --> 00:07:02,560
let's see so the first one i see

115
00:07:02,560 --> 00:07:03,599
is

116
00:07:03,599 --> 00:07:10,240
sdn based uh mp tcp aware uh and mp

117
00:07:10,240 --> 00:07:13,360
quick aware transmission control model

118
00:07:13,360 --> 00:07:14,800
and it keeps going but hopefully that's

119
00:07:14,800 --> 00:07:17,599
enough you know it's you

120
00:07:17,599 --> 00:07:20,880
anyone here to present that one

121
00:07:20,880 --> 00:07:23,759
the next one after that is

122
00:07:23,759 --> 00:07:25,440
bmwg

123
00:07:25,440 --> 00:07:29,919
but what about the sdn based mp tcp and

124
00:07:29,919 --> 00:07:32,560
mp quick

125
00:07:32,639 --> 00:07:35,680
no one here for that one

126
00:07:36,319 --> 00:07:37,199
okay

127
00:07:37,199 --> 00:07:38,720
then we'll go to the

128
00:07:38,720 --> 00:07:43,240
bmwg container benchmarking

129
00:07:53,039 --> 00:07:54,960
was that the presenter i heard coming in

130
00:07:54,960 --> 00:07:57,599
if if if you're remote go ahead and take

131
00:07:57,599 --> 00:08:01,440
the audio and let us know you're here

132
00:08:03,039 --> 00:08:07,039
now can you get my share

133
00:08:09,759 --> 00:08:12,400
i i wanted to share my

134
00:08:12,400 --> 00:08:15,198
next hope

135
00:08:20,160 --> 00:08:23,360
okay so i'm sorry which person is this

136
00:08:23,360 --> 00:08:27,080
okay in this presentation

137
00:08:28,000 --> 00:08:31,919
can you guess how much i just hope

138
00:08:31,919 --> 00:08:33,839
i can hear you but i didn't

139
00:08:33,839 --> 00:08:37,519
are you the presenting the mptcp an mp

140
00:08:37,519 --> 00:08:39,200
quick one

141
00:08:39,200 --> 00:08:42,399
yeah yeah yeah yeah i i

142
00:08:42,399 --> 00:08:45,680
i am the sda

143
00:08:45,760 --> 00:08:48,080
okay

144
00:08:48,720 --> 00:08:50,880
now okay okay

145
00:08:50,880 --> 00:08:55,399
i'll advance the slides for you

146
00:08:56,399 --> 00:08:58,720
okay

147
00:09:02,160 --> 00:09:04,640
how to next next

148
00:09:04,640 --> 00:09:10,080
ppt next piece how to get the next piece

149
00:09:11,200 --> 00:09:14,880
yeah yeah yeah my my projector is

150
00:09:14,880 --> 00:09:16,640
sda

151
00:09:16,640 --> 00:09:19,040
controller help host

152
00:09:19,040 --> 00:09:20,959
to select the path

153
00:09:20,959 --> 00:09:22,720
for traffic

154
00:09:22,720 --> 00:09:24,880
in multi-pass

155
00:09:24,880 --> 00:09:28,240
we know the default transmission control

156
00:09:28,240 --> 00:09:29,279
mode

157
00:09:29,279 --> 00:09:31,279
of mptcp

158
00:09:31,279 --> 00:09:33,920
are mp quick in sdn

159
00:09:33,920 --> 00:09:34,880
only

160
00:09:34,880 --> 00:09:38,160
select one same path every time

161
00:09:38,160 --> 00:09:41,440
and not all the paths working

162
00:09:41,440 --> 00:09:43,680
so

163
00:09:44,720 --> 00:09:45,760
so

164
00:09:45,760 --> 00:09:49,279
we wanted to make all the paths working

165
00:09:49,279 --> 00:09:51,839
and

166
00:09:52,000 --> 00:09:52,800
they

167
00:09:52,800 --> 00:09:55,839
are improved with us

168
00:09:55,839 --> 00:09:57,519
the

169
00:09:57,519 --> 00:09:59,360
the good put

170
00:09:59,360 --> 00:10:01,839
so we want to

171
00:10:01,839 --> 00:10:05,120
make the controller x equals trick the

172
00:10:05,120 --> 00:10:10,399
mpcp or mp quick package to

173
00:10:10,399 --> 00:10:12,560
allocate a

174
00:10:12,560 --> 00:10:13,600
suitable

175
00:10:13,600 --> 00:10:18,040
suitable path by elgo

176
00:10:18,160 --> 00:10:21,279
i'm i'm sorry hot forgetting next yeah

177
00:10:21,279 --> 00:10:22,959
yeah so

178
00:10:22,959 --> 00:10:25,519
yeah yeah yeah so uh so

179
00:10:25,519 --> 00:10:27,040
our plan is

180
00:10:27,040 --> 00:10:28,480
uh

181
00:10:28,480 --> 00:10:29,519
we can

182
00:10:29,519 --> 00:10:31,680
we can see the

183
00:10:31,680 --> 00:10:35,120
uh user one has a two parts

184
00:10:35,120 --> 00:10:37,839
one password is a wi-fi the other one is

185
00:10:37,839 --> 00:10:40,640
the firew g

186
00:10:40,640 --> 00:10:43,440
the other user two

187
00:10:43,440 --> 00:10:45,519
also has

188
00:10:45,519 --> 00:10:48,959
to pass wife wifi at the firewood g

189
00:10:48,959 --> 00:10:50,160
and

190
00:10:50,160 --> 00:10:53,760
the car the sdn controller is is the

191
00:10:53,760 --> 00:10:55,920
elgo climate

192
00:10:55,920 --> 00:10:58,160
uh

193
00:10:58,560 --> 00:11:00,550
they are

194
00:11:00,550 --> 00:11:03,200
[Music]

195
00:11:03,200 --> 00:11:04,320
so

196
00:11:04,320 --> 00:11:07,440
the right picture is the whole

197
00:11:07,440 --> 00:11:08,730
uh

198
00:11:08,730 --> 00:11:10,160
[Music]

199
00:11:10,160 --> 00:11:12,959
structure

200
00:11:12,959 --> 00:11:15,440
next page

201
00:11:15,440 --> 00:11:17,120
now now so

202
00:11:17,120 --> 00:11:19,360
uh

203
00:11:19,760 --> 00:11:23,040
we can see from the from the picture

204
00:11:23,040 --> 00:11:26,399
they are sdn server at the climate

205
00:11:26,399 --> 00:11:28,320
uh that is a

206
00:11:28,320 --> 00:11:30,880
quick goo or mp

207
00:11:30,880 --> 00:11:32,000
tcp

208
00:11:32,000 --> 00:11:36,959
our sdn controller is open the light

209
00:11:36,959 --> 00:11:39,680
next page

210
00:11:41,839 --> 00:11:43,839
uh we get as a

211
00:11:43,839 --> 00:11:47,200
result so the result is just throughout

212
00:11:47,200 --> 00:11:52,399
our mp quick or lp tcp using elto is a

213
00:11:52,399 --> 00:11:53,440
higher

214
00:11:53,440 --> 00:11:54,880
than without

215
00:11:54,880 --> 00:12:00,880
a l2 esdn especially in per network

216
00:12:00,880 --> 00:12:03,040
why

217
00:12:03,040 --> 00:12:05,680
you know we we make all the paths

218
00:12:05,680 --> 00:12:08,000
working in sda

219
00:12:08,000 --> 00:12:11,120
by elto the default

220
00:12:11,120 --> 00:12:14,399
uh the default only y pass so

221
00:12:14,399 --> 00:12:16,639
this router is higher

222
00:12:16,639 --> 00:12:18,240
after that

223
00:12:18,240 --> 00:12:20,160
our test

224
00:12:20,160 --> 00:12:24,760
also includes ipv6

225
00:12:27,680 --> 00:12:29,040
environment

226
00:12:29,040 --> 00:12:31,279
the surround outer is

227
00:12:31,279 --> 00:12:34,959
this router also higher

228
00:12:34,959 --> 00:12:37,200
we can get the

229
00:12:37,200 --> 00:12:38,399
bottom

230
00:12:38,399 --> 00:12:40,720
pictures

231
00:12:40,720 --> 00:12:42,560
next piece

232
00:12:42,560 --> 00:12:44,240
next

233
00:12:44,240 --> 00:12:45,839
what do we learned

234
00:12:45,839 --> 00:12:46,639
how

235
00:12:46,639 --> 00:12:51,680
how to use the el 2 in sdn and

236
00:12:51,680 --> 00:12:53,040
we get the

237
00:12:53,040 --> 00:12:56,240
difference between

238
00:12:56,959 --> 00:12:58,320
between

239
00:12:58,320 --> 00:12:59,399
between i

240
00:12:59,399 --> 00:13:02,240
ipv6 and ipv4

241
00:13:02,240 --> 00:13:05,839
and also we get the difference between

242
00:13:05,839 --> 00:13:07,040
sdn

243
00:13:07,040 --> 00:13:09,600
mp quick and uh

244
00:13:09,600 --> 00:13:13,440
mptcp our project supports the boost

245
00:13:13,440 --> 00:13:14,959
both a

246
00:13:14,959 --> 00:13:18,079
mptcp rmp quicker

247
00:13:18,079 --> 00:13:21,079
next

248
00:13:21,440 --> 00:13:24,560
so we get the collusion our

249
00:13:24,560 --> 00:13:25,920
our project

250
00:13:25,920 --> 00:13:29,360
about three times compared to the

251
00:13:29,360 --> 00:13:33,279
default transition control method

252
00:13:33,279 --> 00:13:35,200
this is my

253
00:13:35,200 --> 00:13:39,519
email thank you very much

254
00:13:39,839 --> 00:13:42,399
okay well thank you very much for

255
00:13:42,399 --> 00:13:46,440
your project and for the presentation

256
00:13:47,120 --> 00:13:50,820
[Applause]

257
00:13:50,880 --> 00:13:53,120
and if anyone has any questions we do

258
00:13:53,120 --> 00:13:55,519
have a mic you'll have to go to the mic

259
00:13:55,519 --> 00:13:57,040
that's in the middle of the room if

260
00:13:57,040 --> 00:13:58,880
you're here in the room and wanted to

261
00:13:58,880 --> 00:14:01,120
ask questions those who are remote

262
00:14:01,120 --> 00:14:04,560
you can ask questions that way

263
00:14:06,560 --> 00:14:08,320
okay thanks i'm going to go to the next

264
00:14:08,320 --> 00:14:10,959
presentation

265
00:14:11,120 --> 00:14:14,880
and it looks like that one is

266
00:14:15,199 --> 00:14:18,800
the bmwg container benchmarking

267
00:14:18,800 --> 00:14:21,920
yeah um i'm just

268
00:14:21,920 --> 00:14:24,160
i'm in a present online

269
00:14:24,160 --> 00:14:25,120
okay

270
00:14:25,120 --> 00:14:27,760
i can advance the slides for you here

271
00:14:27,760 --> 00:14:29,199
okay so

272
00:14:29,199 --> 00:14:31,279
hello everyone

273
00:14:31,279 --> 00:14:34,079
from the vmwg container by in photoshop

274
00:14:34,079 --> 00:14:36,320
and marketing so this is our hackathon

275
00:14:36,320 --> 00:14:39,360
presentations in itunes 104. let's try

276
00:14:39,360 --> 00:14:41,680
this

277
00:14:42,720 --> 00:14:43,519
so

278
00:14:43,519 --> 00:14:45,279
that was the plan for all our hackathon

279
00:14:45,279 --> 00:14:46,880
events the uh providers have been

280
00:14:46,880 --> 00:14:49,040
looking to resolve for the

281
00:14:49,040 --> 00:14:50,959
different considerations that we have

282
00:14:50,959 --> 00:14:54,000
mentioned in our draft so it's all about

283
00:14:54,000 --> 00:14:56,240
uh masking container level performance

284
00:14:56,240 --> 00:14:58,639
with the various developers acceleration

285
00:14:58,639 --> 00:15:00,800
model and different configuration

286
00:15:00,800 --> 00:15:01,920
settings

287
00:15:01,920 --> 00:15:04,719
next slide please

288
00:15:05,440 --> 00:15:06,399
so

289
00:15:06,399 --> 00:15:08,639
what we've done so far is that we have a

290
00:15:08,639 --> 00:15:11,440
provide the marketing result for

291
00:15:11,440 --> 00:15:14,720
sake user space magnetic with srov and a

292
00:15:14,720 --> 00:15:17,920
combined model with iov and vdp we also

293
00:15:17,920 --> 00:15:19,760
done some

294
00:15:19,760 --> 00:15:21,040
we're looking we saw with different

295
00:15:21,040 --> 00:15:23,920
configuration with new map hps and cv

296
00:15:23,920 --> 00:15:26,240
chains so based on the lead on the right

297
00:15:26,240 --> 00:15:28,800
side what's the left is the epf access

298
00:15:28,800 --> 00:15:31,360
model so exactly what we focus on this

299
00:15:31,360 --> 00:15:32,480
hacker

300
00:15:32,480 --> 00:15:35,120
next id

301
00:15:36,000 --> 00:15:37,360
so we

302
00:15:37,360 --> 00:15:39,600
implement the epf association model

303
00:15:39,600 --> 00:15:43,600
using the af hdb and obvs dpdk d switch

304
00:15:43,600 --> 00:15:45,040
so for the

305
00:15:45,040 --> 00:15:46,639
package transmission between the nic

306
00:15:46,639 --> 00:15:50,320
card and display we use af hdp with a

307
00:15:50,320 --> 00:15:51,519
new socket

308
00:15:51,519 --> 00:15:54,320
available from linux kernel greater than

309
00:15:54,320 --> 00:15:56,240
480

310
00:15:56,240 --> 00:15:59,199
and that uh fsdp allow

311
00:15:59,199 --> 00:16:02,240
a touch evpl program in the xdp hook as

312
00:16:02,240 --> 00:16:04,639
a canonic driver to transmit packaged

313
00:16:04,639 --> 00:16:06,880
user play and by passing the connector

314
00:16:06,880 --> 00:16:10,959
stack to associate to accelerate the

315
00:16:10,959 --> 00:16:13,759
packet changes in performance and for

316
00:16:13,759 --> 00:16:15,040
the

317
00:16:15,040 --> 00:16:16,480
packaging mission we can use the

318
00:16:16,480 --> 00:16:19,759
spraying container we use ovdk with af

319
00:16:19,759 --> 00:16:22,720
hdb supported version so this one allows

320
00:16:22,720 --> 00:16:24,240
us to

321
00:16:24,240 --> 00:16:27,440
create af hdb port to promote

322
00:16:27,440 --> 00:16:28,959
promote the

323
00:16:28,959 --> 00:16:30,959
promote driver to point the packet from

324
00:16:30,959 --> 00:16:32,639
the atp socket

325
00:16:32,639 --> 00:16:33,759
and

326
00:16:33,759 --> 00:16:34,800
for

327
00:16:34,800 --> 00:16:36,639
champions packet from the restrict to

328
00:16:36,639 --> 00:16:39,920
the dpdk port we use a rehost user

329
00:16:39,920 --> 00:16:42,639
let's try this

330
00:16:42,800 --> 00:16:44,959
so these are mamakin tesla so is the

331
00:16:44,959 --> 00:16:47,040
same with our previous hackathon so we

332
00:16:47,040 --> 00:16:48,800
use intel

333
00:16:48,800 --> 00:16:52,079
the card until twenty point zero four

334
00:16:52,079 --> 00:16:54,800
for the newest kernel and the eu mantis

335
00:16:54,800 --> 00:16:57,839
uh cni for profile multiple interface

336
00:16:57,839 --> 00:16:59,040
for the core

337
00:16:59,040 --> 00:17:01,519
and for support of atpk we use a user

338
00:17:01,519 --> 00:17:02,800
space cni

339
00:17:02,800 --> 00:17:05,280
next cyclist

340
00:17:05,280 --> 00:17:07,679
so this is the configuration

341
00:17:07,679 --> 00:17:10,319
necessary

342
00:17:10,959 --> 00:17:14,240
so about the results so we observed that

343
00:17:14,240 --> 00:17:17,520
the oes af adp had a pretty much similar

344
00:17:17,520 --> 00:17:20,720
result with osdbtk but uh significantly

345
00:17:20,720 --> 00:17:23,520
lower behind sr iov and ddp

346
00:17:23,520 --> 00:17:24,319
so

347
00:17:24,319 --> 00:17:26,959
we think that's the results like at the

348
00:17:26,959 --> 00:17:30,000
v host user and virtual pmd path between

349
00:17:30,000 --> 00:17:31,840
the container and the v3 which is the

350
00:17:31,840 --> 00:17:34,640
same result that's why obviously decay

351
00:17:34,640 --> 00:17:37,200
lower performance than vdp so we think

352
00:17:37,200 --> 00:17:40,720
that uh if we can uh sdp with the pvp

353
00:17:40,720 --> 00:17:42,320
which is a one that support and mimic

354
00:17:42,320 --> 00:17:45,200
interface then the performance will be

355
00:17:45,200 --> 00:17:47,120
similar with the

356
00:17:47,120 --> 00:17:49,760
necessary

357
00:17:50,240 --> 00:17:51,360
so uh

358
00:17:51,360 --> 00:17:53,440
in our upcoming hackathon so we want to

359
00:17:53,440 --> 00:17:55,600
continue to explore the

360
00:17:55,600 --> 00:17:58,720
result of the memory result of ebpf

361
00:17:58,720 --> 00:18:01,360
assassin model so we consider three

362
00:18:01,360 --> 00:18:03,760
variations the first one is the ax atp

363
00:18:03,760 --> 00:18:05,120
with the vpp

364
00:18:05,120 --> 00:18:07,120
then the cloud native data plane the

365
00:18:07,120 --> 00:18:10,000
cndp which is a new cloud native is a

366
00:18:10,000 --> 00:18:12,400
spray framework developer intel

367
00:18:12,400 --> 00:18:15,200
just first released in april look into

368
00:18:15,200 --> 00:18:18,400
the fctp and bep and uh the third one is

369
00:18:18,400 --> 00:18:21,280
a civilian and evc based cni

370
00:18:21,280 --> 00:18:23,120
so the difference between the three is

371
00:18:23,120 --> 00:18:25,840
at the package jameson rail between hdb

372
00:18:25,840 --> 00:18:28,080
socket and containers and how the

373
00:18:28,080 --> 00:18:32,080
traffic is handing in eastward direction

374
00:18:32,080 --> 00:18:34,799
next slide please

375
00:18:34,799 --> 00:18:36,400
so this is a quick summary about the

376
00:18:36,400 --> 00:18:38,160
difference between these three open

377
00:18:38,160 --> 00:18:40,960
source so with the vp-hdb

378
00:18:40,960 --> 00:18:43,360
it uses a memory interface with cnn 3c

379
00:18:43,360 --> 00:18:46,799
ndp is you and unique kubernetes plugin

380
00:18:46,799 --> 00:18:49,600
for the port to use a network d5 from

381
00:18:49,600 --> 00:18:52,480
the nikon and the cdm is using the cm

382
00:18:52,480 --> 00:18:53,679
library

383
00:18:53,679 --> 00:18:56,160
let's try this

384
00:18:56,160 --> 00:18:58,080
the difference between this is traffic

385
00:18:58,080 --> 00:19:00,799
so with the v6 and we have the v6 rather

386
00:19:00,799 --> 00:19:03,679
traffic with the cndp they develop their

387
00:19:03,679 --> 00:19:06,240
own user spray network stack on synapse

388
00:19:06,240 --> 00:19:08,880
and with the ceiling the packet from

389
00:19:08,880 --> 00:19:12,000
in eastward traffic we provide using the

390
00:19:12,000 --> 00:19:14,880
ebpa program in the socket layer

391
00:19:14,880 --> 00:19:17,520
let's try this

392
00:19:17,600 --> 00:19:20,720
so this is our team members our github

393
00:19:20,720 --> 00:19:25,559
drivers history thank you for listening

394
00:19:25,600 --> 00:19:27,390
okay thank you very much

395
00:19:27,390 --> 00:19:30,720
[Applause]

396
00:19:30,720 --> 00:19:33,679
do we have any questions

397
00:19:33,679 --> 00:19:36,960
i don't see any in the room

398
00:19:37,440 --> 00:19:39,679
okay

399
00:19:39,679 --> 00:19:41,760
go to the next one and andrew i see

400
00:19:41,760 --> 00:19:43,440
you're here you're

401
00:19:43,440 --> 00:19:45,760
okay

402
00:19:49,120 --> 00:19:51,440
we may not have it ready then uh let me

403
00:19:51,440 --> 00:19:53,120
see if it's in here

404
00:19:53,120 --> 00:19:55,520
you'd be probably the last one

405
00:19:55,520 --> 00:19:57,120
is it this i don't know that's if you

406
00:19:57,120 --> 00:19:59,520
wouldn't know

407
00:20:00,400 --> 00:20:03,280
okay yep we're gonna go ahead and uh

408
00:20:03,280 --> 00:20:04,880
we'll get it up there and we'll work you

409
00:20:04,880 --> 00:20:06,880
in once we can we'll go to the next

410
00:20:06,880 --> 00:20:08,320
presentation

411
00:20:08,320 --> 00:20:11,520
uh the cozi

412
00:20:13,919 --> 00:20:16,240
oh tea cozy sorry i left out an

413
00:20:16,240 --> 00:20:19,799
important part there

414
00:20:30,400 --> 00:20:33,400
okay

415
00:20:34,480 --> 00:20:35,360
sorry

416
00:20:35,360 --> 00:20:37,120
go ahead

417
00:20:37,120 --> 00:20:40,320
yes hi uh lawrence uh

418
00:20:40,320 --> 00:20:42,880
lemblade and this is uh we're working on

419
00:20:42,880 --> 00:20:47,360
key cozy tea cozy is a

420
00:20:47,760 --> 00:20:51,679
is a an implementation of cozy in c

421
00:20:51,679 --> 00:20:54,159
um t is for trusted cozy but we have a

422
00:20:54,159 --> 00:20:55,679
little tea cattle too

423
00:20:55,679 --> 00:20:56,559
um

424
00:20:56,559 --> 00:20:58,880
it's uh uh

425
00:20:58,880 --> 00:21:00,960
cos a is you know a format for

426
00:21:00,960 --> 00:21:03,600
seaboard-based format for encrypting and

427
00:21:03,600 --> 00:21:06,159
signing uh data objects

428
00:21:06,159 --> 00:21:08,640
it's used by uh

429
00:21:08,640 --> 00:21:11,280
for a number of other things um

430
00:21:11,280 --> 00:21:14,559
so t cozy is uh it's a small

431
00:21:14,559 --> 00:21:19,520
embedded c library commercial quality so

432
00:21:19,840 --> 00:21:22,080
uh

433
00:21:22,080 --> 00:21:24,159
i guess about three months ago there was

434
00:21:24,159 --> 00:21:27,200
only t cozy 1.0 that supported

435
00:21:27,200 --> 00:21:30,320
sign one which is

436
00:21:30,480 --> 00:21:31,679
only allows

437
00:21:31,679 --> 00:21:34,559
you to sign data with one signer one

438
00:21:34,559 --> 00:21:36,640
public key

439
00:21:36,640 --> 00:21:39,200
we're in the process of making t cosi

440
00:21:39,200 --> 00:21:40,400
2.0

441
00:21:40,400 --> 00:21:42,400
which lets you sign with multiple

442
00:21:42,400 --> 00:21:44,880
signers lets you encrypt with a single

443
00:21:44,880 --> 00:21:47,039
encrypter encrypt with multiple

444
00:21:47,039 --> 00:21:50,000
encrypters and then it also supports mac

445
00:21:50,000 --> 00:21:52,000
with um a single

446
00:21:52,000 --> 00:21:53,760
uh single key

447
00:21:53,760 --> 00:21:56,400
and uh as you can kind of see we made

448
00:21:56,400 --> 00:21:57,440
some progress on it here at the

449
00:21:57,440 --> 00:21:58,559
hackathon

450
00:21:58,559 --> 00:22:00,640
uh you know we're not finished but we

451
00:22:00,640 --> 00:22:02,559
kind of

452
00:22:02,559 --> 00:22:04,000
you know made our way down the line a

453
00:22:04,000 --> 00:22:06,159
little bit on on

454
00:22:06,159 --> 00:22:07,679
that so

455
00:22:07,679 --> 00:22:10,000
that's all i have to say it's a it's in

456
00:22:10,000 --> 00:22:11,840
github is t

457
00:22:11,840 --> 00:22:13,150
thank you

458
00:22:13,150 --> 00:22:17,699
[Applause]

459
00:22:25,039 --> 00:22:29,120
all right thank you let's see

460
00:22:33,520 --> 00:22:36,159
so next up is a p4 implementation and

461
00:22:36,159 --> 00:22:37,679
emulation

462
00:22:37,679 --> 00:22:40,840
of msg6

463
00:22:41,120 --> 00:22:43,200
is that a presenter in the room or if

464
00:22:43,200 --> 00:22:45,360
you're remote just go ahead and unmute

465
00:22:45,360 --> 00:22:48,360
yourself

466
00:22:57,360 --> 00:23:00,960
yes we can okay okay now let's go good

467
00:23:00,960 --> 00:23:02,720
afternoon ladies and gentlemen it's my

468
00:23:02,720 --> 00:23:04,480
good pleasure to make a presentation

469
00:23:04,480 --> 00:23:08,240
here to share my project with you

470
00:23:08,240 --> 00:23:11,200
this slide shows our hackathon plan the

471
00:23:11,200 --> 00:23:13,600
plan consists of two parts the people

472
00:23:13,600 --> 00:23:15,320
implementation of

473
00:23:15,320 --> 00:23:17,360
msr6be and the

474
00:23:17,360 --> 00:23:20,559
emulations based on intel tofino

475
00:23:20,559 --> 00:23:22,960
switches some related documents are

476
00:23:22,960 --> 00:23:24,640
listed below

477
00:23:24,640 --> 00:23:28,480
here is a schematic of the msrbe

478
00:23:28,480 --> 00:23:30,960
that enables the source indicating the

479
00:23:30,960 --> 00:23:34,240
explicit duplication of multicast

480
00:23:34,240 --> 00:23:36,640
and functionally

481
00:23:36,640 --> 00:23:40,400
implements beer to transport multicast

482
00:23:40,400 --> 00:23:43,840
traffic in a scalable manner

483
00:23:43,840 --> 00:23:46,640
uh an msrp

484
00:23:46,640 --> 00:23:47,840
package

485
00:23:47,840 --> 00:23:50,640
implicates the msr hydra with

486
00:23:50,640 --> 00:23:53,600
the multicast bit strain in it and each

487
00:23:53,600 --> 00:23:56,080
bit in the bit string represents a

488
00:23:56,080 --> 00:23:59,360
receiver as shown in the figure

489
00:23:59,360 --> 00:24:02,559
so how does a multicast b string works

490
00:24:02,559 --> 00:24:04,320
we introduce the

491
00:24:04,320 --> 00:24:07,279
principle of rjp which means replication

492
00:24:07,279 --> 00:24:10,320
through global between as a new type of

493
00:24:10,320 --> 00:24:11,760
activities

494
00:24:11,760 --> 00:24:15,679
destination options uh header using the

495
00:24:15,679 --> 00:24:20,000
code point of non mpls via header

496
00:24:20,000 --> 00:24:23,760
rgb is used to identify the replication

497
00:24:23,760 --> 00:24:25,760
endpoint and realize the function of

498
00:24:25,760 --> 00:24:26,960
beer

499
00:24:26,960 --> 00:24:30,840
we implicate the demos based on p4

500
00:24:30,840 --> 00:24:34,400
and conduct some simulations based on

501
00:24:34,400 --> 00:24:37,440
hardware people switches here shows some

502
00:24:37,440 --> 00:24:40,559
realized functions as the figures show

503
00:24:40,559 --> 00:24:43,840
the rgb option is encapsulated and

504
00:24:43,840 --> 00:24:47,360
decapitated according to the ipv6

505
00:24:47,360 --> 00:24:49,760
destination address

506
00:24:49,760 --> 00:24:53,520
figure 3 shows the function of eift and

507
00:24:53,520 --> 00:24:55,360
the figure 4

508
00:24:55,360 --> 00:24:57,440
educates the forwarding and the copying

509
00:24:57,440 --> 00:24:58,840
of these

510
00:24:58,840 --> 00:25:00,400
strings

511
00:25:00,400 --> 00:25:02,880
the emulation setup consists of two

512
00:25:02,880 --> 00:25:03,919
hosts

513
00:25:03,919 --> 00:25:07,840
two v4 switches and one ipv6 switch

514
00:25:07,840 --> 00:25:10,159
here will distance so our hardware

515
00:25:10,159 --> 00:25:11,840
equipment

516
00:25:11,840 --> 00:25:14,720
next i will show our results it can be

517
00:25:14,720 --> 00:25:17,600
seen from the results that the msr6 pe

518
00:25:17,600 --> 00:25:21,919
is valid in explicit of least depletion

519
00:25:21,919 --> 00:25:25,120
and forwarding and it is compatible with

520
00:25:25,120 --> 00:25:29,360
ipv6 forwarding in processing latency

521
00:25:29,360 --> 00:25:31,520
duplication and the

522
00:25:31,520 --> 00:25:34,760
encapsulation of rtb often costs

523
00:25:34,760 --> 00:25:38,799
318 and 315 nano 100

524
00:25:38,799 --> 00:25:41,520
seconds respectively

525
00:25:41,520 --> 00:25:43,360
well we've learned 2 million works in

526
00:25:43,360 --> 00:25:45,200
the next product

527
00:25:45,200 --> 00:25:47,039
the one is the

528
00:25:47,039 --> 00:25:51,039
implement of msr6te with p4 and the

529
00:25:51,039 --> 00:25:53,520
other is definitely deploying the

530
00:25:53,520 --> 00:25:56,320
simulation on

531
00:25:57,200 --> 00:25:59,600
finally if you have some interest or

532
00:25:59,600 --> 00:26:02,320
puzzles about the demo or any others

533
00:26:02,320 --> 00:26:03,520
just connect

534
00:26:03,520 --> 00:26:05,840
us so that's all thanks for listening

535
00:26:05,840 --> 00:26:09,199
and hope to see you again

536
00:26:09,279 --> 00:26:10,960
great well thank you very much for your

537
00:26:10,960 --> 00:26:12,430
presentation

538
00:26:12,430 --> 00:26:15,609
[Applause]

539
00:26:18,480 --> 00:26:20,400
i don't see any questions in the room i

540
00:26:20,400 --> 00:26:22,840
don't hear any so i'm gonna go

541
00:26:22,840 --> 00:26:26,959
ahead and go to the next one

542
00:26:28,159 --> 00:26:31,039
which looks like it is

543
00:26:31,039 --> 00:26:31,919
alto

544
00:26:31,919 --> 00:26:34,480
fts

545
00:26:37,520 --> 00:26:41,080
okay great

546
00:26:53,120 --> 00:26:56,879
just work the slides using that

547
00:27:01,840 --> 00:27:03,200
so

548
00:27:03,200 --> 00:27:06,000
hello i'm matthew i'm here on behalf of

549
00:27:06,000 --> 00:27:09,679
the also working group uh from yale

550
00:27:09,679 --> 00:27:12,480
and in this hypatia we were focused on

551
00:27:12,480 --> 00:27:14,320
optimizing large-scale global data

552
00:27:14,320 --> 00:27:16,640
transfer for scientific networks

553
00:27:16,640 --> 00:27:18,240
uh so

554
00:27:18,240 --> 00:27:20,720
also uh working group

555
00:27:20,720 --> 00:27:23,440
has started to work with a scientific

556
00:27:23,440 --> 00:27:25,440
data transfer stack from the early days

557
00:27:25,440 --> 00:27:29,200
of 2022. so in uh hackathon 130 we are

558
00:27:29,200 --> 00:27:31,520
focused on uh integrating also with true

559
00:27:31,520 --> 00:27:33,600
seo which is a data transfer to a

560
00:27:33,600 --> 00:27:35,919
scientific data transfer application

561
00:27:35,919 --> 00:27:37,520
but here in

562
00:27:37,520 --> 00:27:40,399
114 we have decided to dig deeper into

563
00:27:40,399 --> 00:27:43,120
another level which is fts and

564
00:27:43,120 --> 00:27:46,399
schedule the transport uh and we have uh

565
00:27:46,399 --> 00:27:49,200
built it as results because

566
00:27:49,200 --> 00:27:51,200
after talking with like fda through ceo

567
00:27:51,200 --> 00:27:53,120
design teams and also analyzing the

568
00:27:53,120 --> 00:27:54,399
behaviors of

569
00:27:54,399 --> 00:27:56,480
russia and fts

570
00:27:56,480 --> 00:27:57,679
uh

571
00:27:57,679 --> 00:28:01,520
uh mainly to give the rationale because

572
00:28:01,520 --> 00:28:04,240
uh fts controller architecture is like a

573
00:28:04,240 --> 00:28:07,440
robust uh they use lightweight uh but

574
00:28:07,440 --> 00:28:10,399
and also universally accessible control

575
00:28:10,399 --> 00:28:12,320
and knobs to

576
00:28:12,320 --> 00:28:14,159
to control the behavior of scientific

577
00:28:14,159 --> 00:28:17,520
data transfer but they have like two uh

578
00:28:17,520 --> 00:28:19,279
main problems the first one is

579
00:28:19,279 --> 00:28:21,679
efficiency of optimal usage of resources

580
00:28:21,679 --> 00:28:23,760
and the second one is resource control

581
00:28:23,760 --> 00:28:26,000
and that's mainly because they use uh

582
00:28:26,000 --> 00:28:28,559
some semi-gradient algorithm that is

583
00:28:28,559 --> 00:28:29,679
only taking

584
00:28:29,679 --> 00:28:31,760
into account the uh

585
00:28:31,760 --> 00:28:34,559
single local data transfer

586
00:28:34,559 --> 00:28:37,520
uh so we have devised another stack a

587
00:28:37,520 --> 00:28:38,880
controller stack

588
00:28:38,880 --> 00:28:41,360
which we call a transfer control network

589
00:28:41,360 --> 00:28:44,159
uh transport control networking and has

590
00:28:44,159 --> 00:28:46,320
three main components the first one is

591
00:28:46,320 --> 00:28:49,039
three of three also in the picture

592
00:28:49,039 --> 00:28:51,919
uh and is a zero zero order optimal

593
00:28:51,919 --> 00:28:54,000
gradient algorithm that we have devised

594
00:28:54,000 --> 00:28:57,279
and implemented in isekata and the last

595
00:28:57,279 --> 00:28:59,600
the latter one is tree control that we

596
00:28:59,600 --> 00:29:01,440
were focused on the second one on that

597
00:29:01,440 --> 00:29:04,640
too and uh

598
00:29:06,799 --> 00:29:09,039
is aggregating the the

599
00:29:09,039 --> 00:29:10,399
aggregated

600
00:29:10,399 --> 00:29:13,360
information from alto to enable uh

601
00:29:13,360 --> 00:29:15,360
global resource control

602
00:29:15,360 --> 00:29:17,919
so these are the algorithm and schema of

603
00:29:17,919 --> 00:29:19,760
the algorithm that is given in that

604
00:29:19,760 --> 00:29:22,080
slide but given the time level

605
00:29:22,080 --> 00:29:24,320
uh no talk about them

606
00:29:24,320 --> 00:29:26,480
and so or bowling to the in this

607
00:29:26,480 --> 00:29:29,279
hackathon were to implement uh a

608
00:29:29,279 --> 00:29:31,600
prototype of the three alto and three

609
00:29:31,600 --> 00:29:33,360
control components that i previously

610
00:29:33,360 --> 00:29:34,640
talked about

611
00:29:34,640 --> 00:29:36,080
uh

612
00:29:36,080 --> 00:29:38,159
these are the rfcs that are that are

613
00:29:38,159 --> 00:29:40,640
involved in this segaton mainly the

614
00:29:40,640 --> 00:29:42,640
abstract network element and pass vector

615
00:29:42,640 --> 00:29:44,960
behaviors of also are

616
00:29:44,960 --> 00:29:48,320
considered in this project

617
00:29:50,080 --> 00:29:50,960
so

618
00:29:50,960 --> 00:29:53,520
this is the first input of our system

619
00:29:53,520 --> 00:29:55,520
one interesting behavior of the system

620
00:29:55,520 --> 00:29:57,679
is that uh the three also part is

621
00:29:57,679 --> 00:30:00,159
enabled to integrate network information

622
00:30:00,159 --> 00:30:02,799
from multi-domains uh namely the network

623
00:30:02,799 --> 00:30:04,799
domain one an internet work domain are

624
00:30:04,799 --> 00:30:08,640
two in this uh in this slide uh

625
00:30:08,640 --> 00:30:11,200
more information are uh given in that

626
00:30:11,200 --> 00:30:13,600
slide that is available in the github

627
00:30:13,600 --> 00:30:14,480
page

628
00:30:14,480 --> 00:30:15,600
but they are basically the

629
00:30:15,600 --> 00:30:17,600
implementation of pass vector and cost

630
00:30:17,600 --> 00:30:21,360
matrix uh properties of alto protocol

631
00:30:21,360 --> 00:30:24,000
given this we were able to

632
00:30:24,000 --> 00:30:26,880
implement a universal zero order great

633
00:30:26,880 --> 00:30:29,679
algorithm that is enabled to achieve

634
00:30:29,679 --> 00:30:31,360
optimality and resource control at the

635
00:30:31,360 --> 00:30:33,760
same time so at the top of the page you

636
00:30:33,760 --> 00:30:37,200
can see how we were configuring the

637
00:30:37,200 --> 00:30:40,640
bandwidth uh usage of each pipe uh in

638
00:30:40,640 --> 00:30:43,600
tcn either with absolute bandwidth

639
00:30:43,600 --> 00:30:44,880
limits or

640
00:30:44,880 --> 00:30:47,840
relative bandwidth limits and on the

641
00:30:47,840 --> 00:30:51,120
bottom part you can see that or tcn

642
00:30:51,120 --> 00:30:52,880
optimizer can

643
00:30:52,880 --> 00:30:55,840
achieve optimality and also can

644
00:30:55,840 --> 00:30:57,679
limit the bandwidth usage of single

645
00:30:57,679 --> 00:30:59,279
connections

646
00:30:59,279 --> 00:31:01,360
at the same time which is

647
00:31:01,360 --> 00:31:04,080
unfortunately fts optimizer itself is

648
00:31:04,080 --> 00:31:05,120
not

649
00:31:05,120 --> 00:31:07,360
capable of

650
00:31:07,360 --> 00:31:09,760
uh so to wrap up also we have

651
00:31:09,760 --> 00:31:13,279
implemented a prototype of tcn optimizer

652
00:31:13,279 --> 00:31:16,080
and integrated that of it fts in this

653
00:31:16,080 --> 00:31:18,000
hackathon this is the very beginning of

654
00:31:18,000 --> 00:31:20,880
our collaboration with our fts rusio and

655
00:31:20,880 --> 00:31:23,760
scientific data transfer transfer group

656
00:31:23,760 --> 00:31:27,760
and uh toward itf 10115 we want to

657
00:31:27,760 --> 00:31:29,440
integrate this system

658
00:31:29,440 --> 00:31:32,159
at larger scale without collaborators at

659
00:31:32,159 --> 00:31:34,559
san diego super current computing center

660
00:31:34,559 --> 00:31:36,399
and also esnet

661
00:31:36,399 --> 00:31:38,640
and finally thank you all for your

662
00:31:38,640 --> 00:31:41,640
attention

663
00:31:41,740 --> 00:31:47,519
[Applause]

664
00:31:47,519 --> 00:31:50,519
okay

665
00:32:02,640 --> 00:32:05,039
okay

666
00:32:06,080 --> 00:32:09,760
the next one is uh lpwan

667
00:32:09,760 --> 00:32:13,158
uh sdhc

668
00:32:27,440 --> 00:32:29,440
good afternoon everybody

669
00:32:29,440 --> 00:32:33,440
um so the lp1 working group has been

670
00:32:33,440 --> 00:32:37,200
um working at igfa caton for about five

671
00:32:37,200 --> 00:32:39,360
years now and for

672
00:32:39,360 --> 00:32:42,320
the most recent editions we've been

673
00:32:42,320 --> 00:32:44,960
developing an open source implementation

674
00:32:44,960 --> 00:32:47,039
of the check

675
00:32:47,039 --> 00:32:49,760
header compression protocol so lp1 is a

676
00:32:49,760 --> 00:32:51,200
working group

677
00:32:51,200 --> 00:32:54,000
interested in transporting ipv6

678
00:32:54,000 --> 00:32:57,120
and ib based protocol stacks over very

679
00:32:57,120 --> 00:32:59,840
constrained networks such as sig fox

680
00:32:59,840 --> 00:33:00,880
larwan

681
00:33:00,880 --> 00:33:03,600
and those called low bar wide array

682
00:33:03,600 --> 00:33:04,640
networks

683
00:33:04,640 --> 00:33:07,600
which have a payload of in the order of

684
00:33:07,600 --> 00:33:09,279
tens of bytes

685
00:33:09,279 --> 00:33:11,760
and they trades in the order of hundreds

686
00:33:11,760 --> 00:33:14,720
of bits per second

687
00:33:15,039 --> 00:33:18,559
so we have two rfcs already out 8724

688
00:33:18,559 --> 00:33:22,480
8824 and we are developing an open

689
00:33:22,480 --> 00:33:23,279
source

690
00:33:23,279 --> 00:33:24,960
implementation

691
00:33:24,960 --> 00:33:26,720
trying to help

692
00:33:26,720 --> 00:33:28,880
the

693
00:33:29,840 --> 00:33:31,039
implementers

694
00:33:31,039 --> 00:33:32,720
interested and

695
00:33:32,720 --> 00:33:36,640
come to grasp with the technology easily

696
00:33:36,640 --> 00:33:37,440
so

697
00:33:37,440 --> 00:33:39,360
and we also have

698
00:33:39,360 --> 00:33:41,440
continuing drafts which are mentioned

699
00:33:41,440 --> 00:33:42,720
here

700
00:33:42,720 --> 00:33:43,919
um

701
00:33:43,919 --> 00:33:46,559
so what we did is uh doing a few bug

702
00:33:46,559 --> 00:33:48,080
fixes in

703
00:33:48,080 --> 00:33:50,399
in the code itself

704
00:33:50,399 --> 00:33:53,440
and also in the data model the young

705
00:33:53,440 --> 00:33:55,600
data model that we're just completing

706
00:33:55,600 --> 00:33:57,279
the draft for

707
00:33:57,279 --> 00:34:01,120
um and integrating that model checking

708
00:34:01,120 --> 00:34:03,919
into the the code

709
00:34:03,919 --> 00:34:06,640
and we've also been working on

710
00:34:06,640 --> 00:34:09,440
validating the whole protocol the whole

711
00:34:09,440 --> 00:34:11,599
suite software suite on the macos

712
00:34:11,599 --> 00:34:14,159
environment

713
00:34:14,399 --> 00:34:16,960
and the last bullet point is we are

714
00:34:16,960 --> 00:34:20,239
writing an easy to read documentation

715
00:34:20,239 --> 00:34:23,040
use user manual for the open source code

716
00:34:23,040 --> 00:34:26,079
if you will and we've been rewriting

717
00:34:26,079 --> 00:34:28,879
that very extensively during this

718
00:34:28,879 --> 00:34:30,879
weekend

719
00:34:30,879 --> 00:34:31,839
um

720
00:34:31,839 --> 00:34:34,159
so what are the outcomes

721
00:34:34,159 --> 00:34:37,199
we have running code and we have

722
00:34:37,199 --> 00:34:39,679
a manual to help people

723
00:34:39,679 --> 00:34:40,960
use that code

724
00:34:40,960 --> 00:34:42,000
and

725
00:34:42,000 --> 00:34:43,918
i think it's worth mentioning that the

726
00:34:43,918 --> 00:34:46,079
laura laura alliance which is an

727
00:34:46,079 --> 00:34:48,000
industrial alliance developing the

728
00:34:48,000 --> 00:34:50,320
lorawan protocol

729
00:34:50,320 --> 00:34:52,320
has committed to use our open source

730
00:34:52,320 --> 00:34:54,159
implementation as a reference

731
00:34:54,159 --> 00:34:55,599
implementation for

732
00:34:55,599 --> 00:34:58,160
device certification for the optional

733
00:34:58,160 --> 00:35:00,640
ipv6 or r1

734
00:35:00,640 --> 00:35:03,680
technology which draws on the rfcs that

735
00:35:03,680 --> 00:35:05,520
i've mentioned before

736
00:35:05,520 --> 00:35:07,680
that's it for me thank you for your

737
00:35:07,680 --> 00:35:09,490
attention

738
00:35:09,490 --> 00:35:17,029
[Applause]

739
00:35:17,599 --> 00:35:19,760
yeah it's been uh been fun to watch the

740
00:35:19,760 --> 00:35:22,160
progress of this uh project

741
00:35:22,160 --> 00:35:25,118
wiki jack-a-thon

742
00:35:26,720 --> 00:35:29,040
okay

743
00:35:29,599 --> 00:35:33,520
next up what do we have

744
00:35:34,960 --> 00:35:38,280
uh i2nsf

745
00:35:44,079 --> 00:35:46,240
this is another one we've

746
00:35:46,240 --> 00:35:48,000
had the benefit of seeing from one

747
00:35:48,000 --> 00:35:49,359
hackathon to the next and how it

748
00:35:49,359 --> 00:35:50,800
develops

749
00:35:50,800 --> 00:35:53,119
thank you

750
00:35:54,240 --> 00:35:57,200
hello everyone uh this is uh jim porjang

751
00:35:57,200 --> 00:36:00,598
from sku

752
00:36:12,960 --> 00:36:15,040
okay good

753
00:36:15,040 --> 00:36:19,040
so this is the poster for itunes sf

754
00:36:19,040 --> 00:36:22,160
so basically uh this time

755
00:36:22,160 --> 00:36:25,200
our itunes team demonstrated the

756
00:36:25,200 --> 00:36:27,839
feasibility of it nsf

757
00:36:27,839 --> 00:36:30,960
data rep especially this time we

758
00:36:30,960 --> 00:36:33,599
completed the implementation of a

759
00:36:33,599 --> 00:36:36,000
security policy translator

760
00:36:36,000 --> 00:36:40,119
or internet based networking

761
00:36:47,040 --> 00:36:50,320
so this figure shows the architecture of

762
00:36:50,320 --> 00:36:52,640
security policy translator

763
00:36:52,640 --> 00:36:56,000
so alternative user is network security

764
00:36:56,000 --> 00:36:58,000
of the mutual writer

765
00:36:58,000 --> 00:37:00,640
it gives a high-level security policy

766
00:37:00,640 --> 00:37:01,920
such as

767
00:37:01,920 --> 00:37:05,920
some regulation of access in company or

768
00:37:05,920 --> 00:37:06,839
some

769
00:37:06,839 --> 00:37:10,000
enterprise so the high level policy you

770
00:37:10,000 --> 00:37:12,000
can see uh

771
00:37:12,000 --> 00:37:13,440
given to

772
00:37:13,440 --> 00:37:15,760
security policy uh

773
00:37:15,760 --> 00:37:18,960
security uh police translator

774
00:37:18,960 --> 00:37:19,680
so

775
00:37:19,680 --> 00:37:22,000
first of all it extract data from

776
00:37:22,000 --> 00:37:24,400
high-level policy xml file and then

777
00:37:24,400 --> 00:37:27,520
convert a high-level data into loadable

778
00:37:27,520 --> 00:37:30,480
data using nsf nsf stands for network

779
00:37:30,480 --> 00:37:32,079
security function

780
00:37:32,079 --> 00:37:37,359
and then it can generate the policy

781
00:37:37,520 --> 00:37:39,680
generator based on

782
00:37:39,680 --> 00:37:42,160
p young buying so we can generate the

783
00:37:42,160 --> 00:37:45,040
loadable policy

784
00:37:46,640 --> 00:37:49,760
so this table shows the mapping between

785
00:37:49,760 --> 00:37:52,240
high level young such as

786
00:37:52,240 --> 00:37:54,400
consumer phase interface

787
00:37:54,400 --> 00:37:56,640
data model attribute

788
00:37:56,640 --> 00:37:57,760
map

789
00:37:57,760 --> 00:37:58,640
to

790
00:37:58,640 --> 00:38:01,599
nsf facing is a low level security

791
00:38:01,599 --> 00:38:04,720
policy so basically we can uh

792
00:38:04,720 --> 00:38:08,079
matching two data model attributes using

793
00:38:08,079 --> 00:38:10,640
uh the zhang cha-cha algorithm basically

794
00:38:10,640 --> 00:38:11,760
we can

795
00:38:11,760 --> 00:38:13,599
measure the distance

796
00:38:13,599 --> 00:38:16,400
to a passes for young tree and that we

797
00:38:16,400 --> 00:38:19,839
can match each uh the attribute from

798
00:38:19,839 --> 00:38:22,320
young tree

799
00:38:22,320 --> 00:38:23,200
so

800
00:38:23,200 --> 00:38:26,560
the detail uh part uh can be uh

801
00:38:26,560 --> 00:38:29,040
explained in our draft please the

802
00:38:29,040 --> 00:38:31,520
protocol draft so basically you can see

803
00:38:31,520 --> 00:38:34,800
this is the high level security policy

804
00:38:34,800 --> 00:38:36,000
such as

805
00:38:36,000 --> 00:38:36,960
during

806
00:38:36,960 --> 00:38:37,760
uh

807
00:38:37,760 --> 00:38:40,079
work time such as the employee

808
00:38:40,079 --> 00:38:41,839
okay cannot access

809
00:38:41,839 --> 00:38:44,560
sms websites such as

810
00:38:44,560 --> 00:38:47,520
instagram youtube during a work time

811
00:38:47,520 --> 00:38:51,839
so the basic idea is uh we want to

812
00:38:51,839 --> 00:38:54,800
make high level data into relatable data

813
00:38:54,800 --> 00:38:57,200
so basically this left-hand side there

814
00:38:57,200 --> 00:38:59,599
is a high-level policy data

815
00:38:59,599 --> 00:39:02,800
especially sns

816
00:39:02,800 --> 00:39:05,599
employees will be converted into

817
00:39:05,599 --> 00:39:08,640
specific ip addresses and then

818
00:39:08,640 --> 00:39:10,480
sns website

819
00:39:10,480 --> 00:39:12,560
will be converted into

820
00:39:12,560 --> 00:39:15,520
specific urls such as pace blue

821
00:39:15,520 --> 00:39:17,920
instagram uh something like that in the

822
00:39:17,920 --> 00:39:19,520
middle we have a natural security

823
00:39:19,520 --> 00:39:21,440
function um we'll

824
00:39:21,440 --> 00:39:23,520
provide the specific network sql

825
00:39:23,520 --> 00:39:25,520
functions associated fiber and

826
00:39:25,520 --> 00:39:27,200
replicator or something like that so

827
00:39:27,200 --> 00:39:28,480
using um

828
00:39:28,480 --> 00:39:30,880
security provisioning service using

829
00:39:30,880 --> 00:39:33,040
decision tree machine learning

830
00:39:33,040 --> 00:39:34,560
we can figure out

831
00:39:34,560 --> 00:39:37,200
which nsf can be

832
00:39:37,200 --> 00:39:41,440
used for this security policy service

833
00:39:41,440 --> 00:39:44,160
next um

834
00:39:44,160 --> 00:39:46,480
and then uh using this procedure we can

835
00:39:46,480 --> 00:39:48,320
translate the high-level skill policy

836
00:39:48,320 --> 00:39:50,079
into lower-level security follows xml

837
00:39:50,079 --> 00:39:51,440
file like this

838
00:39:51,440 --> 00:39:54,880
so the previously we have one xml file

839
00:39:54,880 --> 00:39:57,839
for the web

840
00:39:57,839 --> 00:40:00,160
access regulation so it turns out that

841
00:40:00,160 --> 00:40:02,640
we can generate the two uh

842
00:40:02,640 --> 00:40:03,520
parts

843
00:40:03,520 --> 00:40:06,240
uh part one is for five words and second

844
00:40:06,240 --> 00:40:09,359
one is uh web filter so you can see

845
00:40:09,359 --> 00:40:10,480
employee

846
00:40:10,480 --> 00:40:14,319
uh converted into ip addresses and also

847
00:40:14,319 --> 00:40:15,760
using web filter

848
00:40:15,760 --> 00:40:18,800
the website such as

849
00:40:18,800 --> 00:40:21,680
facebook instagram can be translated

850
00:40:21,680 --> 00:40:24,880
like that so the interesting is that we

851
00:40:24,880 --> 00:40:26,640
can um

852
00:40:26,640 --> 00:40:29,280
so we provide itunes step we uh

853
00:40:29,280 --> 00:40:30,960
highlight the policy as the consumer

854
00:40:30,960 --> 00:40:33,599
phase interface low level policies nsfx

855
00:40:33,599 --> 00:40:38,000
interface young module so given to this

856
00:40:38,000 --> 00:40:40,400
security policy uh gen uh policy

857
00:40:40,400 --> 00:40:43,839
translator so we can automatically a map

858
00:40:43,839 --> 00:40:46,640
attribute without any invention of the

859
00:40:46,640 --> 00:40:50,240
other mutilator and then xml file

860
00:40:50,240 --> 00:40:52,800
high-level policy will be translated

861
00:40:52,800 --> 00:40:55,280
into reliable policy automatically so i

862
00:40:55,280 --> 00:40:57,760
think this is a very uh the interesting

863
00:40:57,760 --> 00:40:58,880
feature

864
00:40:58,880 --> 00:41:01,680
so we demonstrated automatic translation

865
00:41:01,680 --> 00:41:05,119
uh between high-level young data model

866
00:41:05,119 --> 00:41:07,839
into low level data model okay so

867
00:41:07,839 --> 00:41:10,079
we can take advantage of our work for

868
00:41:10,079 --> 00:41:13,200
other area

869
00:41:13,440 --> 00:41:16,720
so next step uh we try to enhance our

870
00:41:16,720 --> 00:41:19,520
concept for intensive based networking

871
00:41:19,520 --> 00:41:23,119
ibm maybe uh ibm

872
00:41:23,119 --> 00:41:26,079
can be uh take advantage of

873
00:41:26,079 --> 00:41:29,520
nmrg okay nato management research group

874
00:41:29,520 --> 00:41:32,800
so they can take advantage of our work

875
00:41:32,800 --> 00:41:34,400
and also

876
00:41:34,400 --> 00:41:37,119
our itunes staff try to enhance the next

877
00:41:37,119 --> 00:41:40,880
step using a closed-loop security uh

878
00:41:40,880 --> 00:41:44,000
system for feedback control and then

879
00:41:44,000 --> 00:41:46,400
also we implement our itunes system on

880
00:41:46,400 --> 00:41:47,440
top of

881
00:41:47,440 --> 00:41:49,040
a lightweight

882
00:41:49,040 --> 00:41:52,880
cloud native system such as kubernetes

883
00:41:52,880 --> 00:41:54,880
okay

884
00:41:54,880 --> 00:41:56,880
so

885
00:41:56,880 --> 00:42:00,319
that's it and the next next one

886
00:42:00,319 --> 00:42:04,640
is ip wave can i

887
00:42:05,880 --> 00:42:09,880
present here

888
00:42:22,319 --> 00:42:24,960
all right we're having a bit of a

889
00:42:24,960 --> 00:42:29,319
network uh difficulty here

890
00:42:46,400 --> 00:42:48,000
all right you seem to have dropped the

891
00:42:48,000 --> 00:42:51,640
meteco session

892
00:43:10,960 --> 00:43:13,839
okay

893
00:43:33,760 --> 00:43:35,520
all right i'm gonna try leaving and

894
00:43:35,520 --> 00:43:40,079
coming back and see if that uh

895
00:43:40,079 --> 00:43:42,880
if that does it

896
00:43:42,880 --> 00:43:47,079
no it looks like we've crashed

897
00:44:12,560 --> 00:44:14,000
i don't know if the network's working

898
00:44:14,000 --> 00:44:16,560
for anyone else but uh it's not working

899
00:44:16,560 --> 00:44:19,960
up here anymore

900
00:44:44,000 --> 00:44:46,720
i can hear you

901
00:44:47,200 --> 00:44:49,119
it's not even coming back up it can't

902
00:44:49,119 --> 00:44:51,119
get into meet techo at all but i think

903
00:44:51,119 --> 00:44:54,079
it's a network issue

904
00:44:57,839 --> 00:45:00,240
we don't have a

905
00:45:00,240 --> 00:45:05,078
way to connect ethernet here anyways

906
00:45:17,839 --> 00:45:20,160
i think i have one in my bag i'm just

907
00:45:20,160 --> 00:45:22,319
trying uh dropping the wi-fi and

908
00:45:22,319 --> 00:45:24,800
re-logging in so let's just see if that

909
00:45:24,800 --> 00:45:27,200
helps

910
00:45:31,760 --> 00:45:34,000
what

911
00:45:42,880 --> 00:45:45,040
does the miteko robot still show up as

912
00:45:45,040 --> 00:45:48,560
being in that oh wait now it's working

913
00:45:48,560 --> 00:45:50,640
came back we had to anyways let's see if

914
00:45:50,640 --> 00:45:53,879
this works

915
00:46:13,280 --> 00:46:16,400
you okay

916
00:46:20,560 --> 00:46:23,119
and i have to

917
00:46:23,119 --> 00:46:26,119
remove

918
00:46:32,960 --> 00:46:38,359
okay so you have one other one

919
00:46:47,760 --> 00:46:49,599
that's it yeah

920
00:46:49,599 --> 00:46:51,839
okay

921
00:46:52,400 --> 00:46:54,160
okay thank you

922
00:46:54,160 --> 00:46:55,839
sorry

923
00:46:55,839 --> 00:46:58,880
so uh hello again uh this is a projean

924
00:46:58,880 --> 00:47:00,640
from skq

925
00:47:00,640 --> 00:47:03,839
so from now on i will explain um ip wave

926
00:47:03,839 --> 00:47:06,720
hackathon project

927
00:47:06,800 --> 00:47:08,400
so the basically

928
00:47:08,400 --> 00:47:10,640
this hackasm project we want to

929
00:47:10,640 --> 00:47:13,040
demonstrate the feasibility of a

930
00:47:13,040 --> 00:47:15,440
heterogeneous networking

931
00:47:15,440 --> 00:47:16,640
such as

932
00:47:16,640 --> 00:47:18,480
ieee wave

933
00:47:18,480 --> 00:47:21,280
lt 11 ocb mode and

934
00:47:21,280 --> 00:47:23,280
3gpp

935
00:47:23,280 --> 00:47:25,200
lte module 4

936
00:47:25,200 --> 00:47:28,240
so it is called the shiv attacks

937
00:47:28,240 --> 00:47:30,480
so you can see the middle speakers can

938
00:47:30,480 --> 00:47:33,119
communicate with each other using a wave

939
00:47:33,119 --> 00:47:34,480
or

940
00:47:34,480 --> 00:47:37,440
a c blue text protocol

941
00:47:37,440 --> 00:47:40,400
ip wave we i have

942
00:47:40,400 --> 00:47:42,800
individual draft it's called the context

943
00:47:42,800 --> 00:47:46,240
aware uh navigation protocol cmp

944
00:47:46,240 --> 00:47:49,440
so basically cnp uh provides two

945
00:47:49,440 --> 00:47:53,520
messages one is uh corporation context

946
00:47:53,520 --> 00:47:55,200
message for on

947
00:47:55,200 --> 00:47:58,880
a normal driving condition and certain

948
00:47:58,880 --> 00:48:01,040
accidents happen over some driving

949
00:48:01,040 --> 00:48:02,319
hazard

950
00:48:02,319 --> 00:48:03,200
uh

951
00:48:03,200 --> 00:48:06,480
in front of a beaker so emergency

952
00:48:06,480 --> 00:48:09,359
context message ecm can be generated and

953
00:48:09,359 --> 00:48:11,440
disseminated all

954
00:48:11,440 --> 00:48:14,400
vehicles to protect the vehicles okay

955
00:48:14,400 --> 00:48:15,920
avoid accident

956
00:48:15,920 --> 00:48:18,640
so we tested the code using distance of

957
00:48:18,640 --> 00:48:20,319
i triple

958
00:48:20,319 --> 00:48:23,359
11 ocv it is called the wave the

959
00:48:23,359 --> 00:48:25,680
wireless access in vehicle environment

960
00:48:25,680 --> 00:48:26,800
and also

961
00:48:26,800 --> 00:48:28,400
the 3gpp

962
00:48:28,400 --> 00:48:30,880
v2x protocol such as

963
00:48:30,880 --> 00:48:35,040
cgpp lte model 4. so multiple is for a

964
00:48:35,040 --> 00:48:37,760
p2x protocol mode

965
00:48:37,760 --> 00:48:40,640
so basically we demonstrated our um tech

966
00:48:40,640 --> 00:48:43,440
awesome project using omnipres plus for

967
00:48:43,440 --> 00:48:46,960
networking uh simulator and sumo is the

968
00:48:46,960 --> 00:48:49,680
speaker or mobility monitor we combined

969
00:48:49,680 --> 00:48:52,078
using

970
00:48:52,640 --> 00:48:54,319
baines architecture

971
00:48:54,319 --> 00:48:57,040
so you can see the beakers moving and in

972
00:48:57,040 --> 00:49:00,160
highway scenario so we implemented on

973
00:49:00,160 --> 00:49:00,839
top

974
00:49:00,839 --> 00:49:04,400
of the base for

975
00:49:04,400 --> 00:49:09,359
elta 11 ocb we implemented the

976
00:49:09,680 --> 00:49:13,359
logical link layer combine

977
00:49:14,319 --> 00:49:17,680
the wave i uh to the level ocb and

978
00:49:17,680 --> 00:49:20,558
simulatex

979
00:49:21,359 --> 00:49:23,359
so

980
00:49:23,359 --> 00:49:26,640
the challenge is how to integrate so let

981
00:49:26,640 --> 00:49:29,440
me show you the protocol stack here so

982
00:49:29,440 --> 00:49:32,559
left hand side is the 3gpp protocol

983
00:49:32,559 --> 00:49:36,559
stack so you can see 5z retex over on

984
00:49:36,559 --> 00:49:39,520
the lte mode 4 protocol stack and right

985
00:49:39,520 --> 00:49:41,440
side we have a web

986
00:49:41,440 --> 00:49:44,240
protocol stack so on top of that so we

987
00:49:44,240 --> 00:49:46,160
have a logical link layer

988
00:49:46,160 --> 00:49:49,440
so we can power the some metal layer

989
00:49:49,440 --> 00:49:51,359
packet to

990
00:49:51,359 --> 00:49:57,040
tcp ip layer or non ipv layer such as w

991
00:49:57,040 --> 00:49:59,680
smp wave source message protocol stack

992
00:49:59,680 --> 00:50:01,680
so we implemented

993
00:50:01,680 --> 00:50:02,880
the

994
00:50:02,880 --> 00:50:05,599
protocol convergence for this hackathon

995
00:50:05,599 --> 00:50:09,200
project so we showed the feasibility so

996
00:50:09,200 --> 00:50:10,240
i think

997
00:50:10,240 --> 00:50:13,200
the wave and the 5g void tracks

998
00:50:13,200 --> 00:50:16,480
or lte multiple can be combined together

999
00:50:16,480 --> 00:50:18,079
so we can provide

1000
00:50:18,079 --> 00:50:19,200
the

1001
00:50:19,200 --> 00:50:22,240
vehicle driving safety

1002
00:50:22,240 --> 00:50:24,400
so we have open source project so you

1003
00:50:24,400 --> 00:50:25,680
can access

1004
00:50:25,680 --> 00:50:29,200
github using this link you can download

1005
00:50:29,200 --> 00:50:30,400
so

1006
00:50:30,400 --> 00:50:32,480
this is collaboration work with the

1007
00:50:32,480 --> 00:50:34,559
sunshield university and the kyongsung

1008
00:50:34,559 --> 00:50:38,240
university so my students are bien me

1009
00:50:38,240 --> 00:50:39,599
junhi and

1010
00:50:39,599 --> 00:50:42,250
thank you for listening

1011
00:50:42,250 --> 00:50:48,559
[Applause]

1012
00:50:48,559 --> 00:50:50,480
hey thank you and sorry for those

1013
00:50:50,480 --> 00:50:53,280
technical difficulties but

1014
00:50:53,280 --> 00:50:56,960
hopefully smooth sailing now

1015
00:50:57,920 --> 00:51:00,000
okay

1016
00:51:00,000 --> 00:51:02,720
don't look and see we got andrews andrew

1017
00:51:02,720 --> 00:51:04,240
are you still here

1018
00:51:04,240 --> 00:51:05,119
okay

1019
00:51:05,119 --> 00:51:08,599
come on up

1020
00:51:18,240 --> 00:51:21,799
just not fast

1021
00:51:22,720 --> 00:51:24,559
okay thank you

1022
00:51:24,559 --> 00:51:26,880
our team was focused on extension header

1023
00:51:26,880 --> 00:51:29,920
testing and in particular for the doh

1024
00:51:29,920 --> 00:51:34,000
which was containing pdm information

1025
00:51:34,640 --> 00:51:37,440
a little brief information about pdm

1026
00:51:37,440 --> 00:51:40,079
it's got some great information about

1027
00:51:40,079 --> 00:51:42,480
network management information and

1028
00:51:42,480 --> 00:51:46,079
session information for ipv6 sessions

1029
00:51:46,079 --> 00:51:48,079
really valuable to network operators we

1030
00:51:48,079 --> 00:51:50,160
think

1031
00:51:50,160 --> 00:51:52,160
but the catch is we use extension

1032
00:51:52,160 --> 00:51:54,480
headers to transmit that information

1033
00:51:54,480 --> 00:51:56,160
and there's been some concern and some

1034
00:51:56,160 --> 00:51:57,920
studies that show that

1035
00:51:57,920 --> 00:51:59,440
a lot of extension headers are getting

1036
00:51:59,440 --> 00:52:01,280
dropped in the internet

1037
00:52:01,280 --> 00:52:02,960
so we've been doing a lot of testing and

1038
00:52:02,960 --> 00:52:05,280
focused on is that true and where and

1039
00:52:05,280 --> 00:52:07,839
when and why

1040
00:52:09,119 --> 00:52:11,920
what we've done is open this up and use

1041
00:52:11,920 --> 00:52:13,920
actual data real sessions real

1042
00:52:13,920 --> 00:52:16,640
information in pdm and do testing all

1043
00:52:16,640 --> 00:52:19,839
around the world

1044
00:52:20,720 --> 00:52:23,920
and we've used applications such as ftp

1045
00:52:23,920 --> 00:52:26,160
sites such as toronto to mumbai

1046
00:52:26,160 --> 00:52:27,680
and we put this through the test and

1047
00:52:27,680 --> 00:52:30,799
done a lot of tracing

1048
00:52:31,440 --> 00:52:33,359
and here's some of the tracing results

1049
00:52:33,359 --> 00:52:34,880
you can see

1050
00:52:34,880 --> 00:52:36,880
where the blue arrow is that the pdm

1051
00:52:36,880 --> 00:52:39,119
data is in there and it did make the

1052
00:52:39,119 --> 00:52:41,440
transition

1053
00:52:41,440 --> 00:52:43,920
in some cases we had multiple

1054
00:52:43,920 --> 00:52:45,599
extension headers in this case it's

1055
00:52:45,599 --> 00:52:49,200
fragmentation and pdm

1056
00:52:49,680 --> 00:52:51,520
and the bottom line is all this is

1057
00:52:51,520 --> 00:52:53,119
working and now i'm going to turn it

1058
00:52:53,119 --> 00:52:54,800
over to subsequent presenters to give

1059
00:52:54,800 --> 00:52:56,640
you the details on where when and why

1060
00:52:56,640 --> 00:52:58,839
and how

1061
00:52:58,839 --> 00:53:00,400
anthony

1062
00:53:00,400 --> 00:53:02,800
thanks all um yeah so we obviously

1063
00:53:02,800 --> 00:53:05,839
tested ftp um we obviously

1064
00:53:05,839 --> 00:53:09,200
we're testing with um vms from a plain

1065
00:53:09,200 --> 00:53:11,920
old vm provider not your average tier

1066
00:53:11,920 --> 00:53:15,839
one like your aws ovh rackspace because

1067
00:53:15,839 --> 00:53:18,000
we wanted to avoid things like overlay

1068
00:53:18,000 --> 00:53:20,400
networks which could you know hide this

1069
00:53:20,400 --> 00:53:22,240
and because it's one network

1070
00:53:22,240 --> 00:53:25,599
and we also did testing from this ietf

1071
00:53:25,599 --> 00:53:27,680
network this morning just to prove you

1072
00:53:27,680 --> 00:53:30,319
know what it's not just vm networks it's

1073
00:53:30,319 --> 00:53:32,079
normal networks as well

1074
00:53:32,079 --> 00:53:34,480
um and we also in the tracing that was

1075
00:53:34,480 --> 00:53:36,240
going over multiple providers we had

1076
00:53:36,240 --> 00:53:37,760
transit

1077
00:53:37,760 --> 00:53:39,440
networks in clay

1078
00:53:39,440 --> 00:53:41,200
and we

1079
00:53:41,200 --> 00:53:43,359
obviously this is all running on vms

1080
00:53:43,359 --> 00:53:46,079
with bsd11 we've got a kernel patch that

1081
00:53:46,079 --> 00:53:48,480
does all that pdm injections

1082
00:53:48,480 --> 00:53:51,839
and we saw it in all the scenarios

1083
00:53:51,839 --> 00:53:53,920
including in those fragmentation headers

1084
00:53:53,920 --> 00:53:56,480
and if you look at the vm to the vm

1085
00:53:56,480 --> 00:53:59,280
top left is the the request the bottom

1086
00:53:59,280 --> 00:54:01,359
right is the response

1087
00:54:01,359 --> 00:54:04,160
and if we looked at the itf network we

1088
00:54:04,160 --> 00:54:06,000
even got it here

1089
00:54:06,000 --> 00:54:07,920
if you look closely enough you'll see

1090
00:54:07,920 --> 00:54:10,400
that the response ip is the same subnet

1091
00:54:10,400 --> 00:54:12,000
as here today

1092
00:54:12,000 --> 00:54:12,460
and

1093
00:54:12,460 --> 00:54:13,599
[Music]

1094
00:54:13,599 --> 00:54:15,520
look it gets over the internet but we're

1095
00:54:15,520 --> 00:54:17,599
only scratching the surface

1096
00:54:17,599 --> 00:54:19,280
as we started digging into this and

1097
00:54:19,280 --> 00:54:21,440
andrew will mention a bit more

1098
00:54:21,440 --> 00:54:24,240
when we tried to break the rfcs it

1099
00:54:24,240 --> 00:54:25,920
started suggesting we've got some

1100
00:54:25,920 --> 00:54:27,599
security issues that we need to

1101
00:54:27,599 --> 00:54:29,359
investigate so there's a lot more work

1102
00:54:29,359 --> 00:54:31,839
to be done

1103
00:54:34,400 --> 00:54:37,520
and this is the wrap up quick because

1104
00:54:37,520 --> 00:54:40,640
the point is that

1105
00:54:40,640 --> 00:54:43,280
in order to implement security you don't

1106
00:54:43,280 --> 00:54:45,280
have to have or well you want to

1107
00:54:45,280 --> 00:54:47,760
minimize

1108
00:54:47,760 --> 00:54:49,839
unexpected behavior

1109
00:54:49,839 --> 00:54:52,400
so we are not saying that

1110
00:54:52,400 --> 00:54:55,839
it is right to drop the uh the extension

1111
00:54:55,839 --> 00:54:58,960
error we don't say that it's right to

1112
00:54:58,960 --> 00:55:00,280
let them pass through

1113
00:55:00,280 --> 00:55:01,839
unexpectedly

1114
00:55:01,839 --> 00:55:04,839
but we might we must have

1115
00:55:04,839 --> 00:55:06,480
some

1116
00:55:06,480 --> 00:55:08,960
we have some work to do actually

1117
00:55:08,960 --> 00:55:12,240
in order to define where the problem is

1118
00:55:12,240 --> 00:55:14,640
and what are the best course of action

1119
00:55:14,640 --> 00:55:17,599
because as it is the problem is

1120
00:55:17,599 --> 00:55:18,839
it involves

1121
00:55:18,839 --> 00:55:22,319
everybody us because well we are not

1122
00:55:22,319 --> 00:55:25,280
clear the implementation the user

1123
00:55:25,280 --> 00:55:26,319
and

1124
00:55:26,319 --> 00:55:29,440
a lot of security issues can erase from

1125
00:55:29,440 --> 00:55:31,760
that

1126
00:55:32,799 --> 00:55:35,520
what we are proposing actually to work

1127
00:55:35,520 --> 00:55:38,640
on a bcp basically outlining

1128
00:55:38,640 --> 00:55:40,720
uh what are the assumption of extension

1129
00:55:40,720 --> 00:55:43,520
errors and not all of them but what have

1130
00:55:43,520 --> 00:55:46,240
to be outlined in rfcs

1131
00:55:46,240 --> 00:55:49,200
uh how they should be treated how we

1132
00:55:49,200 --> 00:55:52,240
should actually test them

1133
00:55:52,240 --> 00:55:53,359
or

1134
00:55:53,359 --> 00:55:54,960
what are the

1135
00:55:54,960 --> 00:55:57,359
what we expect from them actually

1136
00:55:57,359 --> 00:55:58,480
because

1137
00:55:58,480 --> 00:56:02,319
they can be extremely valuable for not

1138
00:56:02,319 --> 00:56:03,920
only what we was working on the

1139
00:56:03,920 --> 00:56:07,440
performance metrics but for everything

1140
00:56:07,440 --> 00:56:09,280
and

1141
00:56:09,280 --> 00:56:11,200
but we must

1142
00:56:11,200 --> 00:56:13,680
make use of them in the right way so

1143
00:56:13,680 --> 00:56:15,760
basically that

1144
00:56:15,760 --> 00:56:17,920
we already have some

1145
00:56:17,920 --> 00:56:20,240
possible mitigations but

1146
00:56:20,240 --> 00:56:21,839
we don't want to talk about the

1147
00:56:21,839 --> 00:56:24,480
mitigations before analyzing the problem

1148
00:56:24,480 --> 00:56:25,920
it will be

1149
00:56:25,920 --> 00:56:27,119
too early

1150
00:56:27,119 --> 00:56:31,599
but just saying we can have roughly

1151
00:56:31,599 --> 00:56:34,079
either let them pass without considering

1152
00:56:34,079 --> 00:56:36,559
them encrypting authenticating because

1153
00:56:36,559 --> 00:56:38,640
sometimes it's a matter of being sure

1154
00:56:38,640 --> 00:56:39,760
that the

1155
00:56:39,760 --> 00:56:41,599
actual accenture

1156
00:56:41,599 --> 00:56:42,839
are

1157
00:56:42,839 --> 00:56:44,400
right

1158
00:56:44,400 --> 00:56:45,520
and

1159
00:56:45,520 --> 00:56:49,760
basically andrew floor to you

1160
00:56:49,760 --> 00:56:51,680
okay i'm gonna i'm gonna skip slides and

1161
00:56:51,680 --> 00:56:53,920
just give you a very quick overview of

1162
00:56:53,920 --> 00:56:56,079
what i did to do some testing on this um

1163
00:56:56,079 --> 00:56:57,680
i wrote some code here

1164
00:56:57,680 --> 00:56:58,559
so

1165
00:56:58,559 --> 00:57:00,640
we decided that

1166
00:57:00,640 --> 00:57:02,400
the destination option stuff as they

1167
00:57:02,400 --> 00:57:04,160
said we could get that to work pretty

1168
00:57:04,160 --> 00:57:05,839
much anywhere but what about hop by hop

1169
00:57:05,839 --> 00:57:07,599
extension headers

1170
00:57:07,599 --> 00:57:09,920
this was really interesting so what i

1171
00:57:09,920 --> 00:57:12,720
did was i decided to violate 8200

1172
00:57:12,720 --> 00:57:14,079
entirely

1173
00:57:14,079 --> 00:57:17,440
take our firewall code base and modify

1174
00:57:17,440 --> 00:57:19,839
it to say that if it's a v6 packet the

1175
00:57:19,839 --> 00:57:23,200
v6 packet is an mtu of 1200 or less

1176
00:57:23,200 --> 00:57:24,400
because i didn't want to run into

1177
00:57:24,400 --> 00:57:26,720
fragment fragmentation issues

1178
00:57:26,720 --> 00:57:29,200
i would slap a random extension header

1179
00:57:29,200 --> 00:57:31,359
on there be a hop by hop or destination

1180
00:57:31,359 --> 00:57:33,280
option and send it out across the

1181
00:57:33,280 --> 00:57:35,599
internet and see what broken what didn't

1182
00:57:35,599 --> 00:57:37,839
destination options no problem got

1183
00:57:37,839 --> 00:57:40,000
everywhere this network and this is from

1184
00:57:40,000 --> 00:57:42,240
my house in kenya i've i've re-routed

1185
00:57:42,240 --> 00:57:43,760
that over about six different transit

1186
00:57:43,760 --> 00:57:44,799
providers

1187
00:57:44,799 --> 00:57:46,640
absolutely no issues

1188
00:57:46,640 --> 00:57:48,799
the hop i hop was

1189
00:57:48,799 --> 00:57:50,720
far more interesting

1190
00:57:50,720 --> 00:57:53,599
what i found with the hop by hop is not

1191
00:57:53,599 --> 00:57:55,040
that it was being filtered on the

1192
00:57:55,040 --> 00:57:57,359
internet in general

1193
00:57:57,359 --> 00:57:59,599
but that it was actually

1194
00:57:59,599 --> 00:58:01,200
the routers

1195
00:58:01,200 --> 00:58:04,160
behind which my test boxes were sitting

1196
00:58:04,160 --> 00:58:05,920
that were dropping it without even being

1197
00:58:05,920 --> 00:58:07,599
told to

1198
00:58:07,599 --> 00:58:09,599
now the question and the problem that

1199
00:58:09,599 --> 00:58:12,000
arises with that

1200
00:58:12,000 --> 00:58:14,079
is we don't know what the state of

1201
00:58:14,079 --> 00:58:16,640
filtering on the internet is

1202
00:58:16,640 --> 00:58:18,799
because i could have a bug

1203
00:58:18,799 --> 00:58:21,599
in the router code that i've got or

1204
00:58:21,599 --> 00:58:23,599
the vendors could have gone well we

1205
00:58:23,599 --> 00:58:26,000
can't handle this on the slow path so

1206
00:58:26,000 --> 00:58:28,160
as a result we're going to throw away

1207
00:58:28,160 --> 00:58:29,440
these packets

1208
00:58:29,440 --> 00:58:31,760
for now but either situation is subject

1209
00:58:31,760 --> 00:58:34,799
to change it's not the behavior that was

1210
00:58:34,799 --> 00:58:37,520
expected in the rfcs

1211
00:58:37,520 --> 00:58:40,400
that does create a really big security

1212
00:58:40,400 --> 00:58:42,880
issue because you've got operators out

1213
00:58:42,880 --> 00:58:45,920
there who are operating on an assumption

1214
00:58:45,920 --> 00:58:48,000
that stuff is being filtered we can't

1215
00:58:48,000 --> 00:58:50,160
say that for sure and in every test that

1216
00:58:50,160 --> 00:58:51,520
we did

1217
00:58:51,520 --> 00:58:53,599
we found that it's more common that it's

1218
00:58:53,599 --> 00:58:55,119
actually being dropped without any

1219
00:58:55,119 --> 00:58:57,520
filters being specified either because

1220
00:58:57,520 --> 00:58:59,760
of bugs in vendor code or

1221
00:58:59,760 --> 00:59:01,440
because they've deliberately chosen to

1222
00:59:01,440 --> 00:59:03,200
drop it because of not being able to

1223
00:59:03,200 --> 00:59:05,200
handle the slow path we're not sure

1224
00:59:05,200 --> 00:59:06,079
which

1225
00:59:06,079 --> 00:59:08,000
and so yeah that was just a little bit

1226
00:59:08,000 --> 00:59:09,680
of code that we wrote and i'm quite

1227
00:59:09,680 --> 00:59:11,520
happy to talk to anybody about that i'm

1228
00:59:11,520 --> 00:59:13,760
around and yeah

1229
00:59:13,760 --> 00:59:16,079
it was an interesting test but what it

1230
00:59:16,079 --> 00:59:17,359
does show is

1231
00:59:17,359 --> 00:59:20,480
don't rely on the fact that your hbh is

1232
00:59:20,480 --> 00:59:22,799
being filtered do rely on the fact that

1233
00:59:22,799 --> 00:59:24,960
your destination option stuff probably

1234
00:59:24,960 --> 00:59:27,440
isn't being faulted plan your security

1235
00:59:27,440 --> 00:59:29,760
accordingly

1236
00:59:29,760 --> 00:59:31,800
thanks guys

1237
00:59:31,800 --> 00:59:33,760
[Applause]

1238
00:59:33,760 --> 00:59:35,119
i know we don't have any time for

1239
00:59:35,119 --> 00:59:36,400
questions but come and see us in the

1240
00:59:36,400 --> 00:59:37,920
back left we need all the help we can

1241
00:59:37,920 --> 00:59:40,559
get thank you

1242
00:59:40,640 --> 00:59:42,319
so i have a

1243
00:59:42,319 --> 00:59:44,400
just a sort of a little announcement the

1244
00:59:44,400 --> 00:59:46,160
knock was in here we were looking at why

1245
00:59:46,160 --> 00:59:48,880
the wi-fi is so messed up i guess

1246
00:59:48,880 --> 00:59:52,079
somebody has like a google nest hotspot

1247
00:59:52,079 --> 00:59:53,359
or something

1248
00:59:53,359 --> 00:59:54,400
um

1249
00:59:54,400 --> 00:59:56,240
just letting you know that maybe the

1250
00:59:56,240 --> 00:59:58,079
power is too high on it or you know

1251
00:59:58,079 --> 01:00:00,960
whatever but it's it's what's screwing

1252
01:00:00,960 --> 01:00:02,720
up the wi-fi in here

1253
01:00:02,720 --> 01:00:03,680
okay

1254
01:00:03,680 --> 01:00:06,079
thanks for that detective work

1255
01:00:06,079 --> 01:00:07,359
and if you think you might be

1256
01:00:07,359 --> 01:00:09,760
responsible for that maybe uh

1257
01:00:09,760 --> 01:00:12,640
unplug something or reboot it take it

1258
01:00:12,640 --> 01:00:15,640
off

1259
01:00:18,880 --> 01:00:20,720
okay

1260
01:00:20,720 --> 01:00:24,079
so let me go back up here where are we

1261
01:00:24,079 --> 01:00:26,319
we are

1262
01:00:26,319 --> 01:00:31,240
mask mass connect ipv

1263
01:00:50,640 --> 01:00:52,000
so

1264
01:00:52,000 --> 01:00:54,839
my name is westerlund

1265
01:00:54,839 --> 01:00:57,760
i so representing the

1266
01:00:57,760 --> 01:00:58,640
mask

1267
01:00:58,640 --> 01:01:00,720
table over there we try to implement

1268
01:01:00,720 --> 01:01:02,240
connect ip

1269
01:01:02,240 --> 01:01:03,119
so

1270
01:01:03,119 --> 01:01:04,559
we have already

1271
01:01:04,559 --> 01:01:06,319
some running implementations of udp

1272
01:01:06,319 --> 01:01:08,160
tunneling over quick but we're now

1273
01:01:08,160 --> 01:01:10,880
focused on the ip parts

1274
01:01:10,880 --> 01:01:12,480
and the goal was trying to reach

1275
01:01:12,480 --> 01:01:15,359
interoperability

1276
01:01:16,720 --> 01:01:19,520
that's we do think both implemented the

1277
01:01:19,520 --> 01:01:21,920
protocol mechanisms etc but we didn't

1278
01:01:21,920 --> 01:01:24,319
reach interrupt because we all struggled

1279
01:01:24,319 --> 01:01:26,079
with actually getting the packets in and

1280
01:01:26,079 --> 01:01:27,520
out of the tunnels

1281
01:01:27,520 --> 01:01:29,359
i think that was the primary problems

1282
01:01:29,359 --> 01:01:29,950
here

1283
01:01:29,950 --> 01:01:31,359
[Music]

1284
01:01:31,359 --> 01:01:33,520
so

1285
01:01:33,599 --> 01:01:34,640
and

1286
01:01:34,640 --> 01:01:36,559
i think to launch a little bit more

1287
01:01:36,559 --> 01:01:38,640
preparation at least from my perspective

1288
01:01:38,640 --> 01:01:40,640
from me and marcus we

1289
01:01:40,640 --> 01:01:42,400
if we looked into this maybe prepared

1290
01:01:42,400 --> 01:01:44,160
some of our cloud environment maybe we

1291
01:01:44,160 --> 01:01:45,280
could have

1292
01:01:45,280 --> 01:01:46,880
multiple interfaces in the cloud and

1293
01:01:46,880 --> 01:01:48,640
things like that that our default

1294
01:01:48,640 --> 01:01:50,720
policies wouldn't allow so

1295
01:01:50,720 --> 01:01:52,240
there's some preparation stuff that we

1296
01:01:52,240 --> 01:01:55,119
could have done better um

1297
01:01:55,119 --> 01:01:56,160
but

1298
01:01:56,160 --> 01:01:57,280
i also think

1299
01:01:57,280 --> 01:01:59,440
that's really the lessons here about

1300
01:01:59,440 --> 01:02:01,280
issues around more the environment than

1301
01:02:01,280 --> 01:02:04,640
the actual implementation so

1302
01:02:04,799 --> 01:02:07,440
and the people from ericsson google is

1303
01:02:07,440 --> 01:02:08,799
on the list here

1304
01:02:08,799 --> 01:02:10,480
and the draft github if you want to

1305
01:02:10,480 --> 01:02:12,799
contribute to the draft so

1306
01:02:12,799 --> 01:02:16,590
yeah thank you

1307
01:02:16,590 --> 01:02:22,639
[Applause]

1308
01:02:26,480 --> 01:02:28,559
great thank you for that

1309
01:02:28,559 --> 01:02:29,680
and

1310
01:02:29,680 --> 01:02:32,319
next up

1311
01:02:32,880 --> 01:02:35,680
uh v-con

1312
01:02:39,839 --> 01:02:42,078
okay

1313
01:02:46,960 --> 01:02:49,680
hi i'm dan petrie um

1314
01:02:49,680 --> 01:02:51,599
and uh

1315
01:02:51,599 --> 01:02:53,839
before i start i'm gonna take a few

1316
01:02:53,839 --> 01:02:54,960
gratuitous

1317
01:02:54,960 --> 01:02:57,359
minutes to uh explain what what a v-con

1318
01:02:57,359 --> 01:02:59,920
is i i apologize we didn't get our draft

1319
01:02:59,920 --> 01:03:02,880
done in time for uh for this itf but

1320
01:03:02,880 --> 01:03:05,440
it'll it'll be there in in for london

1321
01:03:05,440 --> 01:03:07,039
so

1322
01:03:07,039 --> 01:03:07,920
you may ask

1323
01:03:07,920 --> 01:03:10,559
what's a v con vcon is a standard

1324
01:03:10,559 --> 01:03:13,680
container for conversations all right

1325
01:03:13,680 --> 01:03:15,839
next question is what's a conversation

1326
01:03:15,839 --> 01:03:18,000
well a conversation could be a

1327
01:03:18,000 --> 01:03:18,799
a

1328
01:03:18,799 --> 01:03:21,359
sms chat exchange it could be an email

1329
01:03:21,359 --> 01:03:23,680
thread it could be a two-way call on the

1330
01:03:23,680 --> 01:03:27,520
pstn could be a a multi-party call

1331
01:03:27,520 --> 01:03:29,920
with audio and video on uh

1332
01:03:29,920 --> 01:03:32,319
zoom or google meet or whatever

1333
01:03:32,319 --> 01:03:33,920
um and so

1334
01:03:33,920 --> 01:03:36,000
it may be a combination of those things

1335
01:03:36,000 --> 01:03:37,680
you may start in one media and move on

1336
01:03:37,680 --> 01:03:38,880
to another

1337
01:03:38,880 --> 01:03:41,039
um and so

1338
01:03:41,039 --> 01:03:42,559
uh what we're proposing here is a

1339
01:03:42,559 --> 01:03:44,880
standard container for conversational

1340
01:03:44,880 --> 01:03:47,039
data you know we have things like you

1341
01:03:47,039 --> 01:03:47,839
know

1342
01:03:47,839 --> 01:03:50,079
call detail records we have

1343
01:03:50,079 --> 01:03:51,520
you know standard containers for the

1344
01:03:51,520 --> 01:03:53,599
media for a conversation

1345
01:03:53,599 --> 01:03:55,039
but we don't have a container for

1346
01:03:55,039 --> 01:03:56,799
everything and so we we think of the

1347
01:03:56,799 --> 01:03:59,280
conversation of econ as having four

1348
01:03:59,280 --> 01:04:00,480
parts

1349
01:04:00,480 --> 01:04:01,920
the metadata

1350
01:04:01,920 --> 01:04:04,640
uh you know who what where when uh

1351
01:04:04,640 --> 01:04:06,480
things that you might have in a call

1352
01:04:06,480 --> 01:04:07,839
detail record

1353
01:04:07,839 --> 01:04:10,880
the dialogue or the actual media that

1354
01:04:10,880 --> 01:04:13,039
was exchanged in the conversation text

1355
01:04:13,039 --> 01:04:15,440
audio video

1356
01:04:15,440 --> 01:04:18,160
and you know you may have real time or

1357
01:04:18,160 --> 01:04:20,640
post conversational analysis a

1358
01:04:20,640 --> 01:04:23,359
transcript a translation a sentiment

1359
01:04:23,359 --> 01:04:24,640
analysis

1360
01:04:24,640 --> 01:04:27,039
and you may have uh some documents that

1361
01:04:27,039 --> 01:04:28,240
were exchanged as part of the

1362
01:04:28,240 --> 01:04:29,920
conversation as well you know maybe a

1363
01:04:29,920 --> 01:04:32,880
presentation that was it was put on uh

1364
01:04:32,880 --> 01:04:36,960
in in in your google me conversation or

1365
01:04:36,960 --> 01:04:38,960
uh an nda that was signed in the context

1366
01:04:38,960 --> 01:04:40,799
of that conversation

1367
01:04:40,799 --> 01:04:42,559
or whatever so

1368
01:04:42,559 --> 01:04:44,480
what we'd like to see is is a conte

1369
01:04:44,480 --> 01:04:46,400
standard container for all of these

1370
01:04:46,400 --> 01:04:48,559
things uh which are all components of

1371
01:04:48,559 --> 01:04:49,920
your conversation

1372
01:04:49,920 --> 01:04:51,920
and and so then you may ask well why do

1373
01:04:51,920 --> 01:04:54,480
i want to do that well it really makes

1374
01:04:54,480 --> 01:04:56,960
integration of services much easier i

1375
01:04:56,960 --> 01:05:00,640
can provide a a much easier way to

1376
01:05:00,640 --> 01:05:01,920
to provide

1377
01:05:01,920 --> 01:05:03,839
translation transcription services

1378
01:05:03,839 --> 01:05:06,000
sentiment analysis services

1379
01:05:06,000 --> 01:05:07,119
um

1380
01:05:07,119 --> 01:05:11,119
a uh a vcon becomes a a nice tool for

1381
01:05:11,119 --> 01:05:12,400
analysis of

1382
01:05:12,400 --> 01:05:14,319
of of conversations you know if i'm a

1383
01:05:14,319 --> 01:05:16,720
call center and i want to analyze

1384
01:05:16,720 --> 01:05:19,200
um you know how my agents are doing or

1385
01:05:19,200 --> 01:05:21,200
if maybe one of the agents has got a

1386
01:05:21,200 --> 01:05:23,119
problematic headset and uh you might be

1387
01:05:23,119 --> 01:05:25,200
able to detect that you know that the

1388
01:05:25,200 --> 01:05:27,599
the customers can't can't hear them

1389
01:05:27,599 --> 01:05:29,359
um

1390
01:05:29,359 --> 01:05:31,359
you know a v con becomes

1391
01:05:31,359 --> 01:05:34,799
a an asset for uh you know a uh

1392
01:05:34,799 --> 01:05:37,760
a call center that is uh you know

1393
01:05:37,760 --> 01:05:40,400
doing cold call kyle dialing

1394
01:05:40,400 --> 01:05:42,319
maybe they create a v con

1395
01:05:42,319 --> 01:05:44,799
and uh sell that v con to a a sales

1396
01:05:44,799 --> 01:05:46,480
person or a sales

1397
01:05:46,480 --> 01:05:50,079
uh service to to uh is a hot lead right

1398
01:05:50,079 --> 01:05:54,960
um it's uh robot food right uh for uh

1399
01:05:54,960 --> 01:05:56,400
machine learning and

1400
01:05:56,400 --> 01:05:58,319
analysis so uh having a standard

1401
01:05:58,319 --> 01:06:00,720
container uh really enables a lot of

1402
01:06:00,720 --> 01:06:02,880
services and capabilities and so this is

1403
01:06:02,880 --> 01:06:04,960
this is what kind of we're we're looking

1404
01:06:04,960 --> 01:06:08,799
to achieve with with uh with econ

1405
01:06:10,240 --> 01:06:11,119
um

1406
01:06:11,119 --> 01:06:14,160
so uh we we already uh have a draft

1407
01:06:14,160 --> 01:06:15,839
that's in progress we didn't get it done

1408
01:06:15,839 --> 01:06:18,720
in time it's 70 80 percent there um

1409
01:06:18,720 --> 01:06:21,280
we're we're working on that in parallel

1410
01:06:21,280 --> 01:06:23,599
we have an open source implementation we

1411
01:06:23,599 --> 01:06:24,319
uh

1412
01:06:24,319 --> 01:06:25,760
wanted to implement

1413
01:06:25,760 --> 01:06:27,680
uh encryption decryption because there's

1414
01:06:27,680 --> 01:06:29,520
certainly there's privacy concerns over

1415
01:06:29,520 --> 01:06:31,440
the contents of of a

1416
01:06:31,440 --> 01:06:32,799
of a v con

1417
01:06:32,799 --> 01:06:35,520
uh and we had the idea to create a uh a

1418
01:06:35,520 --> 01:06:38,640
conserver a uh conversation server which

1419
01:06:38,640 --> 01:06:41,039
is a kind of a uh a wrestling pad for

1420
01:06:41,039 --> 01:06:44,240
storing decons or whatever so those are

1421
01:06:44,240 --> 01:06:46,640
our ideas for uh for the the hackathon

1422
01:06:46,640 --> 01:06:47,599
here

1423
01:06:47,599 --> 01:06:48,880
um

1424
01:06:48,880 --> 01:06:51,520
what we actually got done we we used uh

1425
01:06:51,520 --> 01:06:52,559
jose

1426
01:06:52,559 --> 01:06:54,720
encryption as a means for encrypting the

1427
01:06:54,720 --> 01:06:58,799
the kind become is a json container

1428
01:06:58,799 --> 01:07:02,079
we had the birth of our of our conserver

1429
01:07:02,079 --> 01:07:04,880
um and uh along the way we were you know

1430
01:07:04,880 --> 01:07:07,280
using some of these tools we uh

1431
01:07:07,280 --> 01:07:09,440
uh with the open source we were able to

1432
01:07:09,440 --> 01:07:11,119
generate some uh

1433
01:07:11,119 --> 01:07:13,520
encryption examples for the id that

1434
01:07:13,520 --> 01:07:15,760
we're still still working on

1435
01:07:15,760 --> 01:07:16,880
um

1436
01:07:16,880 --> 01:07:19,520
the id is is online

1437
01:07:19,520 --> 01:07:21,920
the code is online

1438
01:07:21,920 --> 01:07:24,240
um

1439
01:07:24,960 --> 01:07:26,960
and uh what'd we learn well we found

1440
01:07:26,960 --> 01:07:29,119
some bugs you know going through

1441
01:07:29,119 --> 01:07:31,280
examples you know helps

1442
01:07:31,280 --> 01:07:33,920
and we found some bugs in our code

1443
01:07:33,920 --> 01:07:35,359
no issues with the draft yet because

1444
01:07:35,359 --> 01:07:36,640
it's not done

1445
01:07:36,640 --> 01:07:37,760
uh

1446
01:07:37,760 --> 01:07:39,839
other than that we're filling in more of

1447
01:07:39,839 --> 01:07:41,520
that um

1448
01:07:41,520 --> 01:07:43,920
kind of um

1449
01:07:43,920 --> 01:07:46,799
if you're going through in in applying

1450
01:07:46,799 --> 01:07:49,520
uh jose for both signing and encryption

1451
01:07:49,520 --> 01:07:51,839
we kind of feel like we want to reduce

1452
01:07:51,839 --> 01:07:54,319
the the algorithms that need to be

1453
01:07:54,319 --> 01:07:55,440
supported

1454
01:07:55,440 --> 01:07:58,240
uh for v con to just kind of reduce the

1455
01:07:58,240 --> 01:08:00,640
the the the coding requirements

1456
01:08:00,640 --> 01:08:02,640
um you know we

1457
01:08:02,640 --> 01:08:04,079
came up with no work group issues we

1458
01:08:04,079 --> 01:08:06,559
don't have work yet so

1459
01:08:06,559 --> 01:08:09,039
that's uh stuff in progress

1460
01:08:09,039 --> 01:08:12,319
um he had we had

1461
01:08:12,319 --> 01:08:14,640
a couple two remote uh

1462
01:08:14,640 --> 01:08:17,279
uh people working on on the project and

1463
01:08:17,279 --> 01:08:18,880
as i said uh

1464
01:08:18,880 --> 01:08:20,080
we're

1465
01:08:20,080 --> 01:08:22,158
on github and

1466
01:08:22,158 --> 01:08:23,439
please

1467
01:08:23,439 --> 01:08:24,719
contact me if you're if you're

1468
01:08:24,719 --> 01:08:27,600
interested i want to know more or

1469
01:08:27,600 --> 01:08:29,520
want to participate

1470
01:08:29,520 --> 01:08:31,600
thanks

1471
01:08:31,600 --> 01:08:37,209
[Applause]

1472
01:08:39,600 --> 01:08:41,520
all right

1473
01:08:41,520 --> 01:08:43,759
and when you do uh submit that draft

1474
01:08:43,759 --> 01:08:46,399
make sure you also add the additional

1475
01:08:46,399 --> 01:08:48,319
information of related implementations

1476
01:08:48,319 --> 01:08:51,120
so we we have a link to that

1477
01:08:51,120 --> 01:08:54,318
i want to see more of that

1478
01:08:58,399 --> 01:09:02,759
uh dns sec bootstrapping

1479
01:09:10,158 --> 01:09:11,359
yep

1480
01:09:11,359 --> 01:09:13,839
hi i'm peter from the esec and um at the

1481
01:09:13,839 --> 01:09:16,000
dns table we've been working on

1482
01:09:16,000 --> 01:09:18,960
um dnsec bootstrapping stuff um so i'll

1483
01:09:18,960 --> 01:09:21,600
tell you quickly what it's about

1484
01:09:21,600 --> 01:09:23,679
so we were working on implementations of

1485
01:09:23,679 --> 01:09:25,759
the draft that is listed here and the

1486
01:09:25,759 --> 01:09:28,000
idea is or or the

1487
01:09:28,000 --> 01:09:29,679
the problem that the draft tackles is if

1488
01:09:29,679 --> 01:09:32,158
you have dnssec for a dns zone you can

1489
01:09:32,158 --> 01:09:34,080
sign it but then you also need to put

1490
01:09:34,080 --> 01:09:36,080
the trust anchor in the parent zone and

1491
01:09:36,080 --> 01:09:37,679
the protocol proposes how to do that

1492
01:09:37,679 --> 01:09:39,439
automatically

1493
01:09:39,439 --> 01:09:40,880
and there is an implementation site for

1494
01:09:40,880 --> 01:09:44,080
the parent and one for the

1495
01:09:44,080 --> 01:09:45,759
zone operator itself for the child zone

1496
01:09:45,759 --> 01:09:47,520
and we were working on automation for

1497
01:09:47,520 --> 01:09:48,880
the second part

1498
01:09:48,880 --> 01:09:51,198
so the protocol requires that you

1499
01:09:51,198 --> 01:09:54,080
publish a copy of the zone's cds and

1500
01:09:54,080 --> 01:09:56,400
cdnsq records at a subdomain of the

1501
01:09:56,400 --> 01:09:58,159
nameserver hostname itself so for

1502
01:09:58,159 --> 01:10:00,880
example if the zone is example.co.uk and

1503
01:10:00,880 --> 01:10:03,760
the name server is ns1.desec.io

1504
01:10:03,760 --> 01:10:06,080
you would have to provision this record

1505
01:10:06,080 --> 01:10:07,679
that's listed here as an example it has

1506
01:10:07,679 --> 01:10:10,080
an underscore ds boot prefix and then

1507
01:10:10,080 --> 01:10:12,239
there is an intermediate label

1508
01:10:12,239 --> 01:10:14,880
underscore signal and also the child

1509
01:10:14,880 --> 01:10:16,480
zone name and the name several hostname

1510
01:10:16,480 --> 01:10:19,040
are encoded in this

1511
01:10:19,040 --> 01:10:20,880
record owner name and then on the right

1512
01:10:20,880 --> 01:10:22,640
hand side the value of the record is the

1513
01:10:22,640 --> 01:10:24,400
same one as in the child zone and you

1514
01:10:24,400 --> 01:10:26,400
can use that to do validation

1515
01:10:26,400 --> 01:10:28,400
um as long as you don't have a chain of

1516
01:10:28,400 --> 01:10:30,480
trust to the target zone yet because you

1517
01:10:30,480 --> 01:10:31,920
can have one to the name server host

1518
01:10:31,920 --> 01:10:34,239
name if that already does have dnsec but

1519
01:10:34,239 --> 01:10:35,760
there's no automation so far so the

1520
01:10:35,760 --> 01:10:37,520
hackathon plan was to automatically

1521
01:10:37,520 --> 01:10:39,120
generate these records

1522
01:10:39,120 --> 01:10:40,400
and we were thinking about how to do

1523
01:10:40,400 --> 01:10:42,400
this one can either write scripts and

1524
01:10:42,400 --> 01:10:44,960
run ground jobs periodically for example

1525
01:10:44,960 --> 01:10:47,199
um or synthesize these records

1526
01:10:47,199 --> 01:10:48,719
dynamically in the authoritative name

1527
01:10:48,719 --> 01:10:50,880
server software which would require

1528
01:10:50,880 --> 01:10:53,040
touching code from let's say powerdns or

1529
01:10:53,040 --> 01:10:54,719
not dns or bind

1530
01:10:54,719 --> 01:10:56,239
and then whenever that service is

1531
01:10:56,239 --> 01:10:58,640
queried for such a record it would go

1532
01:10:58,640 --> 01:11:00,800
and look at the target zone and then you

1533
01:11:00,800 --> 01:11:02,880
know get it and sign it with the

1534
01:11:02,880 --> 01:11:05,199
corresponding keys and all that

1535
01:11:05,199 --> 01:11:06,960
so um

1536
01:11:06,960 --> 01:11:09,600
what got done so we first agreed

1537
01:11:09,600 --> 01:11:11,760
on conceptual questions especially what

1538
01:11:11,760 --> 01:11:13,760
kind of configuration would be needed

1539
01:11:13,760 --> 01:11:15,280
and we agreed that it would be good to

1540
01:11:15,280 --> 01:11:17,120
expose only minimal configuration to the

1541
01:11:17,120 --> 01:11:19,840
administrator of the dns

1542
01:11:19,840 --> 01:11:22,239
server in particular and we agreed that

1543
01:11:22,239 --> 01:11:23,440
if a zone

1544
01:11:23,440 --> 01:11:24,239
like

1545
01:11:24,239 --> 01:11:26,560
for example here the

1546
01:11:26,560 --> 01:11:29,600
underscore signal dot ns1 you know that

1547
01:11:29,600 --> 01:11:32,239
name server zone is tagged in the name

1548
01:11:32,239 --> 01:11:35,360
server as a bootstrapping signaling zone

1549
01:11:35,360 --> 01:11:37,760
then the agreement was that this enabled

1550
01:11:37,760 --> 01:11:40,000
synthesis of these records for all zones

1551
01:11:40,000 --> 01:11:42,000
managed on this name server

1552
01:11:42,000 --> 01:11:44,400
so we don't have any particular

1553
01:11:44,400 --> 01:11:45,920
sub configuration we figured that's

1554
01:11:45,920 --> 01:11:48,000
easiest and has no harm then we wrote

1555
01:11:48,000 --> 01:11:49,760
code and we got some code running that's

1556
01:11:49,760 --> 01:11:51,520
really cool i think very good result for

1557
01:11:51,520 --> 01:11:53,280
for the hackathon

1558
01:11:53,280 --> 01:11:56,080
in fact my expectations have been

1559
01:11:56,080 --> 01:11:58,480
over satisfied

1560
01:11:58,480 --> 01:12:00,239
so

1561
01:12:00,239 --> 01:12:02,719
we got some code written

1562
01:12:02,719 --> 01:12:04,080
for a crown job that's deported

1563
01:12:04,080 --> 01:12:06,480
sultan.net and it

1564
01:12:06,480 --> 01:12:08,640
consumes a catalog zone which is another

1565
01:12:08,640 --> 01:12:10,800
new dns feature and from that it

1566
01:12:10,800 --> 01:12:12,560
extracts a list of zones that the name

1567
01:12:12,560 --> 01:12:15,600
server is authoritative for fetches the

1568
01:12:15,600 --> 01:12:16,960
bootstrapping records and creates the

1569
01:12:16,960 --> 01:12:19,600
bootstrapping zone so there is a

1570
01:12:19,600 --> 01:12:21,280
link into the gitlab repo that has this

1571
01:12:21,280 --> 01:12:23,280
code and also at the esac which is a

1572
01:12:23,280 --> 01:12:26,000
managed essay hosting platform

1573
01:12:26,000 --> 01:12:28,159
we were working we were working on

1574
01:12:28,159 --> 01:12:30,719
synthesizing these records in powerdns

1575
01:12:30,719 --> 01:12:33,199
um and it's also gone in production

1576
01:12:33,199 --> 01:12:36,000
today i think around lunchtime when the

1577
01:12:36,000 --> 01:12:37,440
deployment was done

1578
01:12:37,440 --> 01:12:38,880
there's the pull request here also in

1579
01:12:38,880 --> 01:12:39,920
github

1580
01:12:39,920 --> 01:12:41,600
um we also worked on

1581
01:12:41,600 --> 01:12:43,520
integrating this natively into

1582
01:12:43,520 --> 01:12:45,120
not dns but it's going to take a little

1583
01:12:45,120 --> 01:12:46,880
longer until that's finished so that's

1584
01:12:46,880 --> 01:12:48,080
in the works

1585
01:12:48,080 --> 01:12:49,440
the techniques used were for the chrome

1586
01:12:49,440 --> 01:12:51,679
jobs in python script for powerdns

1587
01:12:51,679 --> 01:12:53,520
implementation lua records which allow

1588
01:12:53,520 --> 01:12:56,320
you to run code um while processing a

1589
01:12:56,320 --> 01:13:00,080
query and for not dns it was a c module

1590
01:13:00,080 --> 01:13:02,640
for for the server software

1591
01:13:02,640 --> 01:13:04,080
um we learned that it's pretty

1592
01:13:04,080 --> 01:13:06,640
straightforward um to implement this um

1593
01:13:06,640 --> 01:13:08,560
i was more skeptical in the beginning

1594
01:13:08,560 --> 01:13:10,159
and we learned some things about lua and

1595
01:13:10,159 --> 01:13:11,520
learned that it's good to have people at

1596
01:13:11,520 --> 01:13:13,679
the table who know how to use lua

1597
01:13:13,679 --> 01:13:15,840
um we had an unexpected insight in a

1598
01:13:15,840 --> 01:13:18,400
protocol detail which is um

1599
01:13:18,400 --> 01:13:20,640
i guess i'll skip over it here um i

1600
01:13:20,640 --> 01:13:21,840
guess most people aren't so familiar

1601
01:13:21,840 --> 01:13:22,800
with it but for us it was very

1602
01:13:22,800 --> 01:13:24,480
insightful we can discuss

1603
01:13:24,480 --> 01:13:25,920
later if you want

1604
01:13:25,920 --> 01:13:27,840
um and overall the protocol seems pretty

1605
01:13:27,840 --> 01:13:29,920
workable in practice

1606
01:13:29,920 --> 01:13:32,880
um i have a short video um about 22

1607
01:13:32,880 --> 01:13:36,159
seconds um i will allow myself to

1608
01:13:36,159 --> 01:13:38,320
what is it possible to to

1609
01:13:38,320 --> 01:13:40,080
start it here

1610
01:13:40,080 --> 01:13:41,440
okay

1611
01:13:41,440 --> 01:13:46,360
um so i will try full screen now

1612
01:13:46,960 --> 01:13:48,640
play

1613
01:13:48,640 --> 01:13:50,239
okay i will first say what you're seeing

1614
01:13:50,239 --> 01:13:52,800
and before i start playing okay

1615
01:13:52,800 --> 01:13:54,560
um

1616
01:13:54,560 --> 01:13:57,280
i'll let you do

1617
01:13:58,840 --> 01:14:01,120
that maybe not

1618
01:14:01,120 --> 01:14:02,640
actually there's probably a way i don't

1619
01:14:02,640 --> 01:14:04,480
know how to okay it's not very

1620
01:14:04,480 --> 01:14:08,239
interesting so there's two terminals

1621
01:14:08,560 --> 01:14:10,159
i mean i can describe it and it's

1622
01:14:10,159 --> 01:14:11,840
probably more interesting when you see a

1623
01:14:11,840 --> 01:14:13,600
human describing things and making jokes

1624
01:14:13,600 --> 01:14:15,920
and mistakes anyway um so there's a

1625
01:14:15,920 --> 01:14:18,400
terminal at the top which runs an api

1626
01:14:18,400 --> 01:14:21,040
command at the dsec a dns operator which

1627
01:14:21,040 --> 01:14:22,480
creates a zone

1628
01:14:22,480 --> 01:14:24,320
and that automatically also creates the

1629
01:14:24,320 --> 01:14:26,159
unessec keypair

1630
01:14:26,159 --> 01:14:27,760
at the bottom we're querying these

1631
01:14:27,760 --> 01:14:29,840
records that we're looking for um to

1632
01:14:29,840 --> 01:14:32,080
provision automatically in the beginning

1633
01:14:32,080 --> 01:14:33,760
there is a dnessic proof of

1634
01:14:33,760 --> 01:14:35,920
non-existence because it doesn't exist

1635
01:14:35,920 --> 01:14:38,159
yet then the video would start you would

1636
01:14:38,159 --> 01:14:40,000
see how the domain is created when we

1637
01:14:40,000 --> 01:14:42,080
hit this command in the command line you

1638
01:14:42,080 --> 01:14:43,920
get the output you see confirmation it's

1639
01:14:43,920 --> 01:14:45,679
confirmed then you wait only about 15

1640
01:14:45,679 --> 01:14:48,960
seconds until um on the secondary server

1641
01:14:48,960 --> 01:14:50,640
you will see that these records have

1642
01:14:50,640 --> 01:14:52,080
been provisioned automatically thanks to

1643
01:14:52,080 --> 01:14:54,000
the lua script that is running on the

1644
01:14:54,000 --> 01:14:57,120
server now so this is roughly what the

1645
01:14:57,120 --> 01:14:59,360
video has and you can check it out

1646
01:14:59,360 --> 01:15:02,000
if you go to the itf 114 hackathon look

1647
01:15:02,000 --> 01:15:04,159
at the source code of this html file and

1648
01:15:04,159 --> 01:15:06,080
dig out the url

1649
01:15:06,080 --> 01:15:07,199
um

1650
01:15:07,199 --> 01:15:09,440
so that's the wrap up um team members

1651
01:15:09,440 --> 01:15:12,159
were john who's an itf hackathon first

1652
01:15:12,159 --> 01:15:14,480
timer he worked he wrote the crown job

1653
01:15:14,480 --> 01:15:17,040
script and deployed it on his servers

1654
01:15:17,040 --> 01:15:19,040
um also niels is the first timer at the

1655
01:15:19,040 --> 01:15:20,560
hackathon at least and he worked with

1656
01:15:20,560 --> 01:15:22,960
jerry on the power dns lua scripting

1657
01:15:22,960 --> 01:15:25,040
synthesis thing and i've been working on

1658
01:15:25,040 --> 01:15:27,120
the nuts dns

1659
01:15:27,120 --> 01:15:28,820
thank you

1660
01:15:28,820 --> 01:15:34,320
[Applause]

1661
01:15:34,320 --> 01:15:35,760
okay great

1662
01:15:35,760 --> 01:15:39,000
thank you

1663
01:15:44,159 --> 01:15:48,080
and what we have next

1664
01:15:48,719 --> 01:15:51,360
we have

1665
01:15:51,520 --> 01:15:55,280
so this one just says ietf

1666
01:15:55,600 --> 01:16:00,880
hackathon has the date on it july 24th

1667
01:16:05,760 --> 01:16:08,159
sorry what would you say about

1668
01:16:08,159 --> 01:16:10,960
i'm just gonna go to the uh

1669
01:16:10,960 --> 01:16:14,640
one uh one tax api

1670
01:16:15,040 --> 01:16:16,480
while i figure out what that other one

1671
01:16:16,480 --> 01:16:18,000
is

1672
01:16:18,000 --> 01:16:21,840
you come up for the one tax

1673
01:16:24,800 --> 01:16:27,360
co2 i don't is is it this one i don't

1674
01:16:27,360 --> 01:16:30,000
see co2

1675
01:16:30,000 --> 01:16:31,600
okay that's this one what's this one

1676
01:16:31,600 --> 01:16:34,600
okay

1677
01:16:37,679 --> 01:16:39,040
hi so

1678
01:16:39,040 --> 01:16:41,600
i'm just going to be very short

1679
01:16:41,600 --> 01:16:46,400
we implemented a few functionalities

1680
01:16:46,880 --> 01:16:49,840
one of them is um we introduced the

1681
01:16:49,840 --> 01:16:52,960
the way uh uk is computing co2 for

1682
01:16:52,960 --> 01:16:55,920
flights according to distance

1683
01:16:55,920 --> 01:16:57,600
and destinations

1684
01:16:57,600 --> 01:16:59,120
and um

1685
01:16:59,120 --> 01:17:02,480
we also dockerize the service it's a

1686
01:17:02,480 --> 01:17:04,239
student

1687
01:17:04,239 --> 01:17:06,159
remotely did that

1688
01:17:06,159 --> 01:17:09,120
and so everything is on the web page

1689
01:17:09,120 --> 01:17:11,120
you can check everything

1690
01:17:11,120 --> 01:17:14,360
thank you

1691
01:17:14,370 --> 01:17:21,608
[Applause]

1692
01:17:27,760 --> 01:17:29,360
all these are on

1693
01:17:29,360 --> 01:17:31,280
the github in addition to being in the

1694
01:17:31,280 --> 01:17:33,199
data tracker now so you'll be able to

1695
01:17:33,199 --> 01:17:35,599
find them

1696
01:17:36,159 --> 01:17:37,760
okay uh

1697
01:17:37,760 --> 01:17:40,800
one tax api

1698
01:17:42,239 --> 01:17:44,960
do i have a presenter here for that or

1699
01:17:44,960 --> 01:17:47,040
online

1700
01:17:47,040 --> 01:17:48,640
can you hear me

1701
01:17:48,640 --> 01:17:50,880
yes i can now

1702
01:17:50,880 --> 01:17:53,760
uh just let me know i can uh drive this

1703
01:17:53,760 --> 01:17:56,400
actually who um who is this presenting

1704
01:17:56,400 --> 01:17:59,839
uh so this is benson muyte

1705
01:17:59,920 --> 01:18:02,159
ben

1706
01:18:03,920 --> 01:18:04,880
i guess

1707
01:18:04,880 --> 01:18:06,400
i put my name at the end rather than at

1708
01:18:06,400 --> 01:18:09,040
the beginning sorry um

1709
01:18:09,040 --> 01:18:12,239
okay i'll just drive the slides for you

1710
01:18:12,239 --> 01:18:14,719
great thank you

1711
01:18:14,719 --> 01:18:16,800
so next slide please

1712
01:18:16,800 --> 01:18:19,040
okay

1713
01:18:20,000 --> 01:18:22,560
so aim was to look at a slightly new

1714
01:18:22,560 --> 01:18:25,280
programming language here and this is

1715
01:18:25,280 --> 01:18:26,880
being implemented as a systems

1716
01:18:26,880 --> 01:18:28,480
programming language that's supposed to

1717
01:18:28,480 --> 01:18:30,880
be relatively stable uh

1718
01:18:30,880 --> 01:18:32,800
once it's finished

1719
01:18:32,800 --> 01:18:34,960
and uh

1720
01:18:34,960 --> 01:18:38,239
there's efforts to add encryption to it

1721
01:18:38,239 --> 01:18:40,080
and many of these encryption protocols

1722
01:18:40,080 --> 01:18:42,400
are described in rfcs

1723
01:18:42,400 --> 01:18:45,280
so next slide

1724
01:18:46,000 --> 01:18:47,520
um

1725
01:18:47,520 --> 01:18:48,640
so

1726
01:18:48,640 --> 01:18:50,560
basically looked at what issues were

1727
01:18:50,560 --> 01:18:51,440
there

1728
01:18:51,440 --> 01:18:54,080
uh two things that look like should be

1729
01:18:54,080 --> 01:18:56,719
added are restrato which is currently in

1730
01:18:56,719 --> 01:18:58,159
the last call

1731
01:18:58,159 --> 01:19:00,960
and asgcm siv

1732
01:19:00,960 --> 01:19:02,400
um

1733
01:19:02,400 --> 01:19:04,560
which has been published but not being

1734
01:19:04,560 --> 01:19:06,320
implemented in here

1735
01:19:06,320 --> 01:19:08,880
and guess what got done is adding

1736
01:19:08,880 --> 01:19:12,560
conformance tests for ed25519

1737
01:19:12,560 --> 01:19:15,600
um so next slide

1738
01:19:16,640 --> 01:19:18,159
um

1739
01:19:18,159 --> 01:19:20,800
so there's a guest paper from about two

1740
01:19:20,800 --> 01:19:22,320
years ago where they suggested some

1741
01:19:22,320 --> 01:19:24,560
further tests that are needed

1742
01:19:24,560 --> 01:19:26,480
and

1743
01:19:26,480 --> 01:19:29,280
they examined a number of different

1744
01:19:29,280 --> 01:19:32,159
implementations of ed25519

1745
01:19:32,159 --> 01:19:33,520
and they found that for these corner

1746
01:19:33,520 --> 01:19:35,679
cases the library implementation

1747
01:19:35,679 --> 01:19:37,920
basically don't agree

1748
01:19:37,920 --> 01:19:40,320
um

1749
01:19:40,480 --> 01:19:42,159
they made some other suggestions that

1750
01:19:42,159 --> 01:19:44,159
would improve it as well but at this

1751
01:19:44,159 --> 01:19:46,320
point i just looked at the tests and the

1752
01:19:46,320 --> 01:19:48,239
line at the top is the new one

1753
01:19:48,239 --> 01:19:50,320
looking at the hair implementation so i

1754
01:19:50,320 --> 01:19:52,000
guess it also doesn't seem to agree even

1755
01:19:52,000 --> 01:19:54,880
though it was based on tweet nacl

1756
01:19:54,880 --> 01:19:56,000
um

1757
01:19:56,000 --> 01:19:58,800
so next slide

1758
01:19:59,760 --> 01:20:01,360
uh

1759
01:20:01,360 --> 01:20:03,600
so what i kind of learned

1760
01:20:03,600 --> 01:20:05,040
um

1761
01:20:05,040 --> 01:20:06,639
so there's some curves that have been

1762
01:20:06,639 --> 01:20:08,080
partly implemented in here they need

1763
01:20:08,080 --> 01:20:10,880
more testing and validation

1764
01:20:10,880 --> 01:20:13,120
um

1765
01:20:13,520 --> 01:20:14,639
the

1766
01:20:14,639 --> 01:20:16,719
tests came from this paper by

1767
01:20:16,719 --> 01:20:20,960
chalkies gary lowe and nikolineko

1768
01:20:20,960 --> 01:20:23,120
who also suggest improvements that would

1769
01:20:23,120 --> 01:20:24,400
allow for

1770
01:20:24,400 --> 01:20:26,000
applications in contract signing

1771
01:20:26,000 --> 01:20:28,480
electronic voting and transactions

1772
01:20:28,480 --> 01:20:29,840
um

1773
01:20:29,840 --> 01:20:32,560
and their test vectors should i guess my

1774
01:20:32,560 --> 01:20:34,000
suggestions that probably the chest

1775
01:20:34,000 --> 01:20:37,280
vectors should be added to rfc or made a

1776
01:20:37,280 --> 01:20:38,560
supplement

1777
01:20:38,560 --> 01:20:41,630
um just so that implementations uh

1778
01:20:41,630 --> 01:20:43,679
[Music]

1779
01:20:43,679 --> 01:20:46,000
that do comply with the rfc uh can be

1780
01:20:46,000 --> 01:20:48,400
said to comply

1781
01:20:48,400 --> 01:20:51,120
in these in these coordinate cases

1782
01:20:51,120 --> 01:20:53,679
next slide

1783
01:20:54,560 --> 01:20:56,800
so thank you for your attention um

1784
01:20:56,800 --> 01:20:58,159
there's a very good

1785
01:20:58,159 --> 01:21:00,560
javascript implementation which i did

1786
01:21:00,560 --> 01:21:02,480
not have much time to look at but that

1787
01:21:02,480 --> 01:21:04,639
also has a restractor which

1788
01:21:04,639 --> 01:21:06,480
might be a good starting point

1789
01:21:06,480 --> 01:21:09,600
for the rust version of that

1790
01:21:09,600 --> 01:21:12,760
thank you

1791
01:21:16,480 --> 01:21:18,800
okay thank you benson if you have any

1792
01:21:18,800 --> 01:21:21,280
questions

1793
01:21:22,080 --> 01:21:23,560
all

1794
01:21:23,560 --> 01:21:28,120
right the next one

1795
01:21:29,280 --> 01:21:33,159
uh code sprint presentation

1796
01:21:52,080 --> 01:21:55,120
so as always the plan with the

1797
01:21:55,120 --> 01:21:57,760
codesprint is to improve the tools that

1798
01:21:57,760 --> 01:21:59,440
are used to

1799
01:21:59,440 --> 01:22:01,360
make the iatf work

1800
01:22:01,360 --> 01:22:03,920
in particular the data tracker and

1801
01:22:03,920 --> 01:22:07,199
xml rfc we've been doing this since

1802
01:22:07,199 --> 01:22:10,400
ietf 70. so um

1803
01:22:10,400 --> 01:22:13,040
if you find that you there's some little

1804
01:22:13,040 --> 01:22:14,800
thing that annoys you about how one of

1805
01:22:14,800 --> 01:22:18,480
these tools works fix it

1806
01:22:18,800 --> 01:22:20,639
and so

1807
01:22:20,639 --> 01:22:21,840
we actually

1808
01:22:21,840 --> 01:22:25,600
got a fair amount of things done we got

1809
01:22:25,600 --> 01:22:30,639
24 data tracker pull requests closing

1810
01:22:30,639 --> 01:22:32,159
13 tickets

1811
01:22:32,159 --> 01:22:34,880
seven commits against the

1812
01:22:34,880 --> 01:22:39,199
xml rc fixing six tickets

1813
01:22:39,199 --> 01:22:41,199
here's the list of the 18 people who

1814
01:22:41,199 --> 01:22:43,199
participated some

1815
01:22:43,199 --> 01:22:44,800
local

1816
01:22:44,800 --> 01:22:47,310
long table on the side some remote

1817
01:22:47,310 --> 01:22:48,480
[Music]

1818
01:22:48,480 --> 01:22:50,080
there's the links where you can find the

1819
01:22:50,080 --> 01:22:51,280
code

1820
01:22:51,280 --> 01:22:53,760
if you're interested you can of course

1821
01:22:53,760 --> 01:22:56,480
continue to work at any time and

1822
01:22:56,480 --> 01:22:59,199
there's a mail list

1823
01:22:59,199 --> 01:23:01,920
for tools discussions if uh if you want

1824
01:23:01,920 --> 01:23:04,080
to discuss anything the way anything

1825
01:23:04,080 --> 01:23:05,679
works and why

1826
01:23:05,679 --> 01:23:07,040
so

1827
01:23:07,040 --> 01:23:10,770
that's really all there was to it thanks

1828
01:23:10,770 --> 01:23:17,040
[Applause]

1829
01:23:20,320 --> 01:23:21,679
great thank you

1830
01:23:21,679 --> 01:23:24,000
that's exciting all the functionality

1831
01:23:24,000 --> 01:23:25,840
that's and stuff that's been done with

1832
01:23:25,840 --> 01:23:29,639
the data tracker lately

1833
01:23:34,560 --> 01:23:36,639
including the related implementations

1834
01:23:36,639 --> 01:23:40,239
i'll mention that about 10 times

1835
01:23:43,120 --> 01:23:45,920
okay ipwave we did that one drip

1836
01:23:45,920 --> 01:23:48,920
interrupt

1837
01:24:06,239 --> 01:24:08,719
hi i'm tim messer this is adam whitaker

1838
01:24:08,719 --> 01:24:10,560
and we are here on behalf of the drone

1839
01:24:10,560 --> 01:24:14,239
remote id protocol working group

1840
01:24:15,280 --> 01:24:17,280
we're gonna do a lot of swapping here um

1841
01:24:17,280 --> 01:24:18,880
so the drip working group's main

1842
01:24:18,880 --> 01:24:20,719
objective is to bring safety and

1843
01:24:20,719 --> 01:24:22,400
security into unmanned aircraft

1844
01:24:22,400 --> 01:24:25,280
specifically for remote identification

1845
01:24:25,280 --> 01:24:27,360
um but also kind of tie a little bit

1846
01:24:27,360 --> 01:24:31,199
into uh utm which is on uas traffic

1847
01:24:31,199 --> 01:24:33,839
management

1848
01:24:36,000 --> 01:24:38,239
the drip protocol accomplishes this by

1849
01:24:38,239 --> 01:24:39,760
generating

1850
01:24:39,760 --> 01:24:42,320
cryptographically verifiable remote ids

1851
01:24:42,320 --> 01:24:44,480
registering them into the dns

1852
01:24:44,480 --> 01:24:47,280
and enabling correlation of these remote

1853
01:24:47,280 --> 01:24:48,800
ids with

1854
01:24:48,800 --> 01:24:51,760
operator with operator and aircraft data

1855
01:24:51,760 --> 01:24:55,679
in a privacy preserving manner

1856
01:24:56,320 --> 01:24:58,719
so for the hackathon we have the

1857
01:24:58,719 --> 01:25:03,040
challenge of a lot of uas is closed

1858
01:25:03,040 --> 01:25:04,960
source and we have a closed source

1859
01:25:04,960 --> 01:25:08,400
broadcaster implementation and a

1860
01:25:08,400 --> 01:25:11,440
structure of a dns and registry system

1861
01:25:11,440 --> 01:25:12,800
so we wanted to bring the two of them

1862
01:25:12,800 --> 01:25:15,360
together during the hackathon and

1863
01:25:15,360 --> 01:25:17,199
for the two days we accomplished

1864
01:25:17,199 --> 01:25:18,880
actually doing a live registration of a

1865
01:25:18,880 --> 01:25:20,880
session id through a puck

1866
01:25:20,880 --> 01:25:22,719
public information lookups using that

1867
01:25:22,719 --> 01:25:24,960
session id using dns

1868
01:25:24,960 --> 01:25:28,320
authenticated looks ups of non-um

1869
01:25:28,320 --> 01:25:30,719
public information using that session id

1870
01:25:30,719 --> 01:25:33,040
and then we found a lot of shortcomings

1871
01:25:33,040 --> 01:25:35,600
in our proposal in the rfcs

1872
01:25:35,600 --> 01:25:37,920
and we have plans to go forward that

1873
01:25:37,920 --> 01:25:39,040
we're going to be proposing to the

1874
01:25:39,040 --> 01:25:42,320
working group tomorrow monday a second

1875
01:25:42,320 --> 01:25:43,760
session

1876
01:25:43,760 --> 01:25:47,040
on how to improve

1877
01:25:49,199 --> 01:25:51,840
and if this video works we were able to

1878
01:25:51,840 --> 01:25:55,120
film a live demo it does not look like

1879
01:25:55,120 --> 01:25:57,280
it's going to work

1880
01:25:57,280 --> 01:25:59,440
all right so what the demo would have

1881
01:25:59,440 --> 01:26:02,239
demonstrated is we have a

1882
01:26:02,239 --> 01:26:04,560
drone simulation running in microsoft

1883
01:26:04,560 --> 01:26:05,679
air sim

1884
01:26:05,679 --> 01:26:08,159
we have that plugged into a software in

1885
01:26:08,159 --> 01:26:10,719
the loop version of px4

1886
01:26:10,719 --> 01:26:13,360
and we have that plugged into cue ground

1887
01:26:13,360 --> 01:26:14,480
control

1888
01:26:14,480 --> 01:26:16,480
and we have those

1889
01:26:16,480 --> 01:26:19,520
mavlink packets from q ground control

1890
01:26:19,520 --> 01:26:20,880
routing to

1891
01:26:20,880 --> 01:26:25,199
a puck implementation which allows for

1892
01:26:25,199 --> 01:26:27,199
backwards compatibility with existing

1893
01:26:27,199 --> 01:26:28,560
drone hardware

1894
01:26:28,560 --> 01:26:30,639
that poc is broadcasting using the drip

1895
01:26:30,639 --> 01:26:32,000
protocol

1896
01:26:32,000 --> 01:26:34,239
it is being picked up by the two phones

1897
01:26:34,239 --> 01:26:35,360
that you see

1898
01:26:35,360 --> 01:26:37,760
one of the phones is unauthenticated and

1899
01:26:37,760 --> 01:26:40,159
is able to obtain relevant public

1900
01:26:40,159 --> 01:26:42,320
session information the other phone is

1901
01:26:42,320 --> 01:26:45,679
authenticated that enables it to obtain

1902
01:26:45,679 --> 01:26:47,520
serial number information associated

1903
01:26:47,520 --> 01:26:49,360
with that session

1904
01:26:49,360 --> 01:26:50,880
thank you

1905
01:26:50,880 --> 01:26:53,280
and we'll be at the hack demo happy hour

1906
01:26:53,280 --> 01:26:55,440
where i'll be doing this live for the

1907
01:26:55,440 --> 01:26:57,360
whole hour i'll keep generating session

1908
01:26:57,360 --> 01:26:59,920
ids and registering them over and over

1909
01:26:59,920 --> 01:27:01,760
and over again and hopefully it doesn't

1910
01:27:01,760 --> 01:27:04,760
break

1911
01:27:04,800 --> 01:27:05,200
thank you

1912
01:27:05,200 --> 01:27:10,029
[Applause]

1913
01:27:13,520 --> 01:27:15,280
all right and a good reminder to other

1914
01:27:15,280 --> 01:27:17,199
people too to sign up for hack demo

1915
01:27:17,199 --> 01:27:19,839
happy hour

1916
01:27:22,639 --> 01:27:24,080
all right

1917
01:27:24,080 --> 01:27:27,080
l4s

1918
01:27:39,360 --> 01:27:42,080
all right good afternoon everyone

1919
01:27:42,080 --> 01:27:44,320
so i'm greg white with cablelabs and

1920
01:27:44,320 --> 01:27:46,239
joined by a number of the other

1921
01:27:46,239 --> 01:27:48,960
champions uh for this project i hear

1922
01:27:48,960 --> 01:27:50,960
vidi and well from apple be presenting

1923
01:27:50,960 --> 01:27:52,480
part of this as well

1924
01:27:52,480 --> 01:27:53,520
um

1925
01:27:53,520 --> 01:27:54,239
so

1926
01:27:54,239 --> 01:27:56,719
this project is taking up the front five

1927
01:27:56,719 --> 01:27:58,960
tables in the corner here as well as uh

1928
01:27:58,960 --> 01:28:01,199
with racks of equipment in the in hidden

1929
01:28:01,199 --> 01:28:03,360
in the back there

1930
01:28:03,360 --> 01:28:05,840
and to some degree this is a hackathon

1931
01:28:05,840 --> 01:28:07,520
project there is some hacking going on

1932
01:28:07,520 --> 01:28:09,520
but it's also the first interoperability

1933
01:28:09,520 --> 01:28:11,679
event for l4s that has taken place in

1934
01:28:11,679 --> 01:28:14,480
the world um l4s if you're not familiar

1935
01:28:14,480 --> 01:28:15,840
is

1936
01:28:15,840 --> 01:28:16,880
the

1937
01:28:16,880 --> 01:28:19,679
way advance

1938
01:28:22,480 --> 01:28:24,719
low latency low loss scalable throughput

1939
01:28:24,719 --> 01:28:26,800
architecture for congestion control and

1940
01:28:26,800 --> 01:28:29,679
congestion signaling in the internet

1941
01:28:29,679 --> 01:28:31,840
it's defined by three drafts which just

1942
01:28:31,840 --> 01:28:33,840
finished ietf last call so hopefully

1943
01:28:33,840 --> 01:28:34,800
we'll be

1944
01:28:34,800 --> 01:28:36,560
seeing those published as rfcs fairly

1945
01:28:36,560 --> 01:28:37,440
soon

1946
01:28:37,440 --> 01:28:39,280
as well as one draft

1947
01:28:39,280 --> 01:28:41,520
that describes how the congestion

1948
01:28:41,520 --> 01:28:43,920
feedback works for tcp implementations

1949
01:28:43,920 --> 01:28:46,880
and that's that one is still in progress

1950
01:28:46,880 --> 01:28:48,960
there are three components to the l4s

1951
01:28:48,960 --> 01:28:51,040
architecture and make it work

1952
01:28:51,040 --> 01:28:52,400
you have got the congestion control of

1953
01:28:52,400 --> 01:28:55,920
the sender you've got congestion marking

1954
01:28:55,920 --> 01:28:58,080
in the bottleneck link along the path

1955
01:28:58,080 --> 01:28:59,520
and then you've got marking feedback

1956
01:28:59,520 --> 01:29:01,280
that's coming from the receiver back to

1957
01:29:01,280 --> 01:29:02,320
the sender

1958
01:29:02,320 --> 01:29:04,560
and we've got implementations of all of

1959
01:29:04,560 --> 01:29:06,800
those

1960
01:29:06,800 --> 01:29:08,639
here today

1961
01:29:08,639 --> 01:29:12,880
and actually um our plan is not um to uh

1962
01:29:12,880 --> 01:29:15,920
to finish today um we're actually um

1963
01:29:15,920 --> 01:29:18,320
planning going all the way through the

1964
01:29:18,320 --> 01:29:20,239
end of the day on tuesday um there's a

1965
01:29:20,239 --> 01:29:22,239
fair amount of setup involved in getting

1966
01:29:22,239 --> 01:29:23,679
all this networking gear here we

1967
01:29:23,679 --> 01:29:26,000
actually started yesterday afternoon or

1968
01:29:26,000 --> 01:29:27,600
friday afternoon

1969
01:29:27,600 --> 01:29:30,159
uh getting things set up um and

1970
01:29:30,159 --> 01:29:32,400
yesterday most of that was really

1971
01:29:32,400 --> 01:29:34,480
debugging the network getting everything

1972
01:29:34,480 --> 01:29:35,360
going

1973
01:29:35,360 --> 01:29:36,800
uh we've got some initial results to

1974
01:29:36,800 --> 01:29:38,480
share with you guys today

1975
01:29:38,480 --> 01:29:40,480
tomorrow at the tsb working group

1976
01:29:40,480 --> 01:29:43,120
session we'll have an update with uh

1977
01:29:43,120 --> 01:29:44,960
additional things that we found

1978
01:29:44,960 --> 01:29:46,400
and then again

1979
01:29:46,400 --> 01:29:48,080
continuing through tuesday with

1980
01:29:48,080 --> 01:29:49,199
additional

1981
01:29:49,199 --> 01:29:52,199
testing

1982
01:29:53,120 --> 01:29:54,639
in terms of the implementations that we

1983
01:29:54,639 --> 01:29:56,800
have here um so on the congestion

1984
01:29:56,800 --> 01:29:58,880
control side on the sender side we've

1985
01:29:58,880 --> 01:30:00,880
got five different implementations uh

1986
01:30:00,880 --> 01:30:02,639
from different uh companies and

1987
01:30:02,639 --> 01:30:03,920
organizations

1988
01:30:03,920 --> 01:30:05,040
um

1989
01:30:05,040 --> 01:30:06,400
on the

1990
01:30:06,400 --> 01:30:08,719
receiver side the marking feedback piece

1991
01:30:08,719 --> 01:30:09,760
again we have five different

1992
01:30:09,760 --> 01:30:11,520
implementations there

1993
01:30:11,520 --> 01:30:13,040
these are

1994
01:30:13,040 --> 01:30:15,600
quick as well as tcp as well as some

1995
01:30:15,600 --> 01:30:19,800
proprietary udp implementations

1996
01:30:21,120 --> 01:30:23,120
on the bottleneck link piece we have

1997
01:30:23,120 --> 01:30:24,880
seven different implementations that

1998
01:30:24,880 --> 01:30:27,679
we're testing uh four of them are what

1999
01:30:27,679 --> 01:30:29,840
we call low latency docsis which is a

2000
01:30:29,840 --> 01:30:31,440
version of the docsis protocol which

2001
01:30:31,440 --> 01:30:34,159
supports the l4s functionality for that

2002
01:30:34,159 --> 01:30:36,239
we have two cable modem implementations

2003
01:30:36,239 --> 01:30:38,719
and two cmts implementations

2004
01:30:38,719 --> 01:30:40,960
um we also have a couple of wi-fi access

2005
01:30:40,960 --> 01:30:44,000
points that implement l4s and then a

2006
01:30:44,000 --> 01:30:46,159
network emulator from nokia that

2007
01:30:46,159 --> 01:30:47,840
can emulate a 5g

2008
01:30:47,840 --> 01:30:50,159
ran

2009
01:30:50,639 --> 01:30:52,880
six of those seven bottlenecks implement

2010
01:30:52,880 --> 01:30:55,920
the dual queue coupled aqm draft that

2011
01:30:55,920 --> 01:30:57,760
that i had on the earlier slide

2012
01:30:57,760 --> 01:31:01,040
one of them implements an l4s aware fq

2013
01:31:01,040 --> 01:31:02,400
scheduler

2014
01:31:02,400 --> 01:31:05,120
and aqm

2015
01:31:08,159 --> 01:31:10,000
in terms of what we've

2016
01:31:10,000 --> 01:31:11,199
tested so far in terms of

2017
01:31:11,199 --> 01:31:14,400
interoperability this is a list

2018
01:31:14,400 --> 01:31:17,199
i possibly complete maybe not complete

2019
01:31:17,199 --> 01:31:19,840
uh a set of things have been tested so

2020
01:31:19,840 --> 01:31:22,239
far but different congestion controllers

2021
01:31:22,239 --> 01:31:24,480
different bottleneck links different uh

2022
01:31:24,480 --> 01:31:26,880
receivers um trying to work our way

2023
01:31:26,880 --> 01:31:31,480
through to the full list

2024
01:31:31,920 --> 01:31:33,600
and in terms of results i'll hand over

2025
01:31:33,600 --> 01:31:37,199
to a video talk about these

2026
01:31:38,880 --> 01:31:40,639
thank you craig

2027
01:31:40,639 --> 01:31:42,960
so we did some testing using the docsis

2028
01:31:42,960 --> 01:31:44,560
implementation

2029
01:31:44,560 --> 01:31:47,520
from casa as well as comscope

2030
01:31:47,520 --> 01:31:49,199
and we did some

2031
01:31:49,199 --> 01:31:50,960
testing for upstream as well as

2032
01:31:50,960 --> 01:31:53,280
downstream traffic

2033
01:31:53,280 --> 01:31:56,400
this one shows the classic

2034
01:31:56,400 --> 01:31:58,960
results for the classic uh traffic for

2035
01:31:58,960 --> 01:32:00,719
upstream i remember if i remember

2036
01:32:00,719 --> 01:32:02,960
correctly this is done with casa

2037
01:32:02,960 --> 01:32:05,040
and it shows um

2038
01:32:05,040 --> 01:32:06,880
it shows basically what we see with the

2039
01:32:06,880 --> 01:32:09,520
classic condition control which is cubic

2040
01:32:09,520 --> 01:32:12,639
and you can see the highlighted uh box

2041
01:32:12,639 --> 01:32:15,920
where we show the pdv stats where p99 is

2042
01:32:15,920 --> 01:32:17,960
30 millisecond and

2043
01:32:17,960 --> 01:32:21,120
p99.9 is 125 milliseconds so there's a

2044
01:32:21,120 --> 01:32:22,000
lot of

2045
01:32:22,000 --> 01:32:23,840
delay variation which means there's a

2046
01:32:23,840 --> 01:32:26,800
lot of jitter as well for the classic

2047
01:32:26,800 --> 01:32:29,040
and

2048
01:32:30,239 --> 01:32:33,199
if you look at the l4s upstream uh this

2049
01:32:33,199 --> 01:32:36,960
is again with casa and but this uses our

2050
01:32:36,960 --> 01:32:40,159
l4s conduction controller and the low

2051
01:32:40,159 --> 01:32:42,080
latency queue instead of the classic

2052
01:32:42,080 --> 01:32:44,480
queue and the pdb stats again if you

2053
01:32:44,480 --> 01:32:48,639
look at p99 it's 9 millisecond and p99.9

2054
01:32:48,639 --> 01:32:51,760
is 10.3 milliseconds so there is a huge

2055
01:32:51,760 --> 01:32:54,080
improvement or i should say a huge

2056
01:32:54,080 --> 01:32:57,120
reduction in the latency for

2057
01:32:57,120 --> 01:32:59,840
l4s as compared to classic

2058
01:32:59,840 --> 01:33:00,719
uh

2059
01:33:00,719 --> 01:33:02,800
please note that for

2060
01:33:02,800 --> 01:33:04,400
for the sorry for the docsis

2061
01:33:04,400 --> 01:33:06,000
implementation there's

2062
01:33:06,000 --> 01:33:07,440
you know there's this request grand

2063
01:33:07,440 --> 01:33:09,040
delay which is

2064
01:33:09,040 --> 01:33:11,280
basically the minimum delay that some

2065
01:33:11,280 --> 01:33:13,360
packets always see

2066
01:33:13,360 --> 01:33:15,840
so it's not that the

2067
01:33:15,840 --> 01:33:18,320
p99 being nine millisecond not all of it

2068
01:33:18,320 --> 01:33:21,040
is queuing delay some of it

2069
01:33:21,040 --> 01:33:24,080
is the base delay or the request grain

2070
01:33:24,080 --> 01:33:26,480
delay

2071
01:33:27,840 --> 01:33:31,440
moving on to the downstream testing uh

2072
01:33:31,440 --> 01:33:33,679
this one i think we did with comm scope

2073
01:33:33,679 --> 01:33:35,840
we did with casa as well but this result

2074
01:33:35,840 --> 01:33:38,480
is with comscope

2075
01:33:38,480 --> 01:33:41,280
and if you look at the classic again the

2076
01:33:41,280 --> 01:33:43,440
p99 is 55

2077
01:33:43,440 --> 01:33:46,639
and 99.9 is 96 for classic traffic

2078
01:33:46,639 --> 01:33:49,840
there's a huge delay variation

2079
01:33:49,840 --> 01:33:54,159
for for classic and if you look at

2080
01:33:54,159 --> 01:33:58,000
l4s the variation is much smaller

2081
01:33:58,000 --> 01:33:59,280
it's

2082
01:33:59,280 --> 01:34:02,239
under 2 milliseconds for p99

2083
01:34:02,239 --> 01:34:04,639
so these are our results for

2084
01:34:04,639 --> 01:34:08,400
l4s downstream and upstream traffic

2085
01:34:08,400 --> 01:34:12,159
comparing the classic queue um

2086
01:34:12,159 --> 01:34:14,400
and

2087
01:34:14,400 --> 01:34:17,199
i just want to thank everyone helping

2088
01:34:17,199 --> 01:34:19,600
with the testing a lot of people sitting

2089
01:34:19,600 --> 01:34:22,080
on those five tables that greg mentioned

2090
01:34:22,080 --> 01:34:24,239
have helped with testing and setting up

2091
01:34:24,239 --> 01:34:27,199
the network doing metrics and

2092
01:34:27,199 --> 01:34:28,400
measurements

2093
01:34:28,400 --> 01:34:30,400
these are our the participating

2094
01:34:30,400 --> 01:34:32,480
organizations

2095
01:34:32,480 --> 01:34:34,800
and

2096
01:34:34,800 --> 01:34:36,880
these are all the members who have been

2097
01:34:36,880 --> 01:34:39,600
working really hard to to make this

2098
01:34:39,600 --> 01:34:42,639
possible during the itf hackathon thank

2099
01:34:42,639 --> 01:34:45,490
you

2100
01:34:45,490 --> 01:34:49,389
[Applause]

2101
01:34:54,159 --> 01:34:55,920
okay great thank you

2102
01:34:55,920 --> 01:34:58,320
and a good example of how projects can

2103
01:34:58,320 --> 01:35:01,360
uh continue and you continue to work

2104
01:35:01,360 --> 01:35:02,960
here over the week

2105
01:35:02,960 --> 01:35:04,880
as part of the code lounge which this

2106
01:35:04,880 --> 01:35:07,679
will turn into

2107
01:35:09,920 --> 01:35:11,679
and so

2108
01:35:11,679 --> 01:35:14,159
we did this one so i think we are done

2109
01:35:14,159 --> 01:35:16,080
is there

2110
01:35:16,080 --> 01:35:18,000
is there anyone with a presentation that

2111
01:35:18,000 --> 01:35:20,880
we skipped over

2112
01:35:24,719 --> 01:35:27,360
anyone online who was expecting to

2113
01:35:27,360 --> 01:35:30,639
present and we didn't get to you

2114
01:35:34,400 --> 01:35:37,799
okay great

2115
01:35:45,280 --> 01:35:47,440
so thanks to everyone for for keeping

2116
01:35:47,440 --> 01:35:50,080
your presentations not only uh super

2117
01:35:50,080 --> 01:35:52,719
informative but uh

2118
01:35:52,719 --> 01:35:54,719
but also relatively short so that we

2119
01:35:54,719 --> 01:35:57,920
were able to get through them all

2120
01:35:58,960 --> 01:36:01,440
mentioned a few times we have a you know

2121
01:36:01,440 --> 01:36:03,520
a couple more things after this we have

2122
01:36:03,520 --> 01:36:06,000
the hack demo happy hour a few of you

2123
01:36:06,000 --> 01:36:08,000
have have already signed up

2124
01:36:08,000 --> 01:36:10,480
um if you look on the the wiki the

2125
01:36:10,480 --> 01:36:12,719
hackathon wiki you'll see

2126
01:36:12,719 --> 01:36:14,719
um right underneath the agenda it

2127
01:36:14,719 --> 01:36:16,800
mentions the hack demo happy hour and

2128
01:36:16,800 --> 01:36:18,159
there's a link to

2129
01:36:18,159 --> 01:36:20,000
you know reserve space for for your

2130
01:36:20,000 --> 01:36:22,400
table uh please do that as soon as

2131
01:36:22,400 --> 01:36:24,960
possible if you plan on joining us there

2132
01:36:24,960 --> 01:36:27,440
and uh the deadline to sign up is by

2133
01:36:27,440 --> 01:36:29,600
noon because we need time to set up the

2134
01:36:29,600 --> 01:36:31,840
room and make sure we have enough space

2135
01:36:31,840 --> 01:36:34,400
enough tables and and that time of stuff

2136
01:36:34,400 --> 01:36:36,719
that type of stuff

2137
01:36:36,719 --> 01:36:38,239
kind of typical happy hour there'll be a

2138
01:36:38,239 --> 01:36:40,080
little bit of uh

2139
01:36:40,080 --> 01:36:42,080
things to nibble on and then there'll be

2140
01:36:42,080 --> 01:36:44,960
a cash bar there if you're interested in

2141
01:36:44,960 --> 01:36:46,560
getting drinks and i think there will be

2142
01:36:46,560 --> 01:36:48,480
some free sodas and water and that type

2143
01:36:48,480 --> 01:36:51,040
of thing too

2144
01:36:51,280 --> 01:36:53,840
and that will be in this same room any

2145
01:36:53,840 --> 01:36:56,719
questions about that

2146
01:36:57,440 --> 01:36:58,880
okay

2147
01:36:58,880 --> 01:37:00,400
and then i also mentioned the code

2148
01:37:00,400 --> 01:37:01,760
lounge so

2149
01:37:01,760 --> 01:37:03,760
uh hack demo happy hours just for that

2150
01:37:03,760 --> 01:37:06,639
one hour but this area will essentially

2151
01:37:06,639 --> 01:37:08,000
turn into

2152
01:37:08,000 --> 01:37:09,840
the lounge for the iatf meeting and

2153
01:37:09,840 --> 01:37:11,679
there's a portion of it that will be

2154
01:37:11,679 --> 01:37:12,719
kind of

2155
01:37:12,719 --> 01:37:14,639
um

2156
01:37:14,639 --> 01:37:17,280
signed off as being for the code lounge

2157
01:37:17,280 --> 01:37:19,360
it'll probably be up here so that it'll

2158
01:37:19,360 --> 01:37:20,719
be close to the equipment i would

2159
01:37:20,719 --> 01:37:22,480
imagine

2160
01:37:22,480 --> 01:37:24,800
but in any case you can also there's a

2161
01:37:24,800 --> 01:37:27,040
sign up sheet there and that's just for

2162
01:37:27,040 --> 01:37:28,800
your own reference and to let other

2163
01:37:28,800 --> 01:37:30,800
people know as to when you plan to be

2164
01:37:30,800 --> 01:37:33,679
here so i saw the l4s they already

2165
01:37:33,679 --> 01:37:35,360
signed up at the times they planned to

2166
01:37:35,360 --> 01:37:37,520
be here and that's great others are free

2167
01:37:37,520 --> 01:37:39,280
to be here there can be more than one

2168
01:37:39,280 --> 01:37:41,360
team here at any one time

2169
01:37:41,360 --> 01:37:42,560
that's actually a good thing because

2170
01:37:42,560 --> 01:37:43,920
then you have multiple teams that can

2171
01:37:43,920 --> 01:37:45,679
work together so

2172
01:37:45,679 --> 01:37:49,840
feel free to take advantage of that too

2173
01:37:51,119 --> 01:37:53,360
and uh just one more shout out to our

2174
01:37:53,360 --> 01:37:55,920
our sponsor cnn nick

2175
01:37:55,920 --> 01:37:58,159
there's various sponsorship levels for

2176
01:37:58,159 --> 01:38:01,280
the hackathon and so we're always

2177
01:38:01,280 --> 01:38:03,199
looking for and hoping to get more more

2178
01:38:03,199 --> 01:38:05,199
sponsors

2179
01:38:05,199 --> 01:38:07,280
so if you have uh if you can consider

2180
01:38:07,280 --> 01:38:08,639
doing that that would be great and

2181
01:38:08,639 --> 01:38:11,040
thanks to cnn nick for for sponsoring us

2182
01:38:11,040 --> 01:38:13,580
again

2183
01:38:13,580 --> 01:38:19,119
[Applause]

2184
01:38:19,119 --> 01:38:22,159
and then uh you know thanks thanks to uh

2185
01:38:22,159 --> 01:38:24,080
thanks to all of you for

2186
01:38:24,080 --> 01:38:25,040
um

2187
01:38:25,040 --> 01:38:27,280
participating in the hackathon for

2188
01:38:27,280 --> 01:38:30,000
working with us uh through some of the

2189
01:38:30,000 --> 01:38:31,360
glitches too

2190
01:38:31,360 --> 01:38:33,040
um you know this is

2191
01:38:33,040 --> 01:38:34,719
every time i think there's something new

2192
01:38:34,719 --> 01:38:36,560
that that we try this time the

2193
01:38:36,560 --> 01:38:39,280
integration the slides with me techo had

2194
01:38:39,280 --> 01:38:42,880
some really nice benefits to it um

2195
01:38:42,880 --> 01:38:44,719
those many of you may have interacted

2196
01:38:44,719 --> 01:38:46,719
with barry he's he's in the back there

2197
01:38:46,719 --> 01:38:49,199
kind of silently making sure that uh

2198
01:38:49,199 --> 01:38:52,719
thank you barry that

2199
01:38:52,990 --> 01:38:55,520
[Applause]

2200
01:38:55,520 --> 01:38:57,760
he's my co-chair at the hackathon and

2201
01:38:57,760 --> 01:38:59,920
making sure that you know everyone got

2202
01:38:59,920 --> 01:39:01,920
added to the github organization that

2203
01:39:01,920 --> 01:39:04,320
your slides got uploaded there and that

2204
01:39:04,320 --> 01:39:06,719
they then got into meet techo and then

2205
01:39:06,719 --> 01:39:09,199
the muteco team was of course great and

2206
01:39:09,199 --> 01:39:10,880
the knock team working with us on the

2207
01:39:10,880 --> 01:39:13,600
network so realize that all this happens

2208
01:39:13,600 --> 01:39:16,639
the the weekend before the ietf meetings

2209
01:39:16,639 --> 01:39:18,639
really starting so

2210
01:39:18,639 --> 01:39:20,639
a lot of stuff not only your projects

2211
01:39:20,639 --> 01:39:22,239
but really the whole ietf network

2212
01:39:22,239 --> 01:39:24,320
everything's getting set up and the fact

2213
01:39:24,320 --> 01:39:25,760
that we're able to pull this off and

2214
01:39:25,760 --> 01:39:27,440
have things be as stable and work as

2215
01:39:27,440 --> 01:39:28,719
well as they are

2216
01:39:28,719 --> 01:39:30,639
is really a phenomenal and a tribute to

2217
01:39:30,639 --> 01:39:32,800
the noc team and meet techo and the

2218
01:39:32,800 --> 01:39:35,199
whole ams staff so it's a really

2219
01:39:35,199 --> 01:39:36,400
fantastic

2220
01:39:36,400 --> 01:39:37,520
um

2221
01:39:37,520 --> 01:39:38,960
and then we're always looking for people

2222
01:39:38,960 --> 01:39:41,920
to help us make the hackathon better so

2223
01:39:41,920 --> 01:39:44,000
you can share your ideas with me and

2224
01:39:44,000 --> 01:39:46,239
barry if you have more than just ideas

2225
01:39:46,239 --> 01:39:48,320
but you actually want to help us

2226
01:39:48,320 --> 01:39:50,719
join our team so that we can

2227
01:39:50,719 --> 01:39:53,119
work on the hackathon together and maybe

2228
01:39:53,119 --> 01:39:54,880
you can be up here

2229
01:39:54,880 --> 01:39:56,400
doing the presentations running the

2230
01:39:56,400 --> 01:39:58,800
presentations next time uh that'd be

2231
01:39:58,800 --> 01:40:01,840
great too so uh talk to me talk to barry

2232
01:40:01,840 --> 01:40:03,679
about that we'd love to hear from you

2233
01:40:03,679 --> 01:40:06,400
we'd love your help

2234
01:40:07,280 --> 01:40:09,920
and with that we we are done the next uh

2235
01:40:09,920 --> 01:40:12,960
hackathon uh will be in london

2236
01:40:12,960 --> 01:40:15,119
and um we'll try to make sure we have

2237
01:40:15,119 --> 01:40:17,360
plenty of uh space and a good setup for

2238
01:40:17,360 --> 01:40:19,600
all you there so start planning now i

2239
01:40:19,600 --> 01:40:21,440
hope it's possible for you to join us in

2240
01:40:21,440 --> 01:40:22,880
person again

2241
01:40:22,880 --> 01:40:24,239
and uh

2242
01:40:24,239 --> 01:40:26,320
in any case save the date it'll be the

2243
01:40:26,320 --> 01:40:28,960
weekend at the start of the ietf meeting

2244
01:40:28,960 --> 01:40:29,760
so

2245
01:40:29,760 --> 01:40:31,440
mark that in your calendars and and

2246
01:40:31,440 --> 01:40:34,320
start making your plans now

2247
01:40:34,320 --> 01:40:36,719
well thank you all please uh have a a

2248
01:40:36,719 --> 01:40:40,560
great and safe iatf week

2249
01:40:40,600 --> 01:40:47,920
[Applause]

2250
01:40:47,920 --> 01:40:50,480
by the way there is a mask up here that

2251
01:40:50,480 --> 01:40:52,080
uh just uh

2252
01:40:52,080 --> 01:40:53,520
that someone may have left so if you're

2253
01:40:53,520 --> 01:40:55,360
missing a mask

2254
01:40:55,360 --> 01:40:59,239
come up here and grab it

2255
01:41:18,239 --> 01:41:21,239
okay

2256
01:41:59,440 --> 01:42:01,839
stop

2257
01:43:12,159 --> 01:43:15,159
foreign

2258
01:43:45,440 --> 01:43:47,519
you

