1
00:00:04,799 --> 00:00:07,440
patrol now

2
00:00:08,000 --> 00:00:10,160
thank you

3
00:00:10,160 --> 00:00:13,679
okay it is time to start our session

4
00:00:13,679 --> 00:00:15,440
welcome to

5
00:00:15,440 --> 00:00:19,199
netmod and philadelphia and online

6
00:00:19,199 --> 00:00:22,400
uh i am lou berger we have with me kent

7
00:00:22,400 --> 00:00:25,119
watson and joel jugley my co-chairs

8
00:00:25,119 --> 00:00:28,640
they are both online and uh kent will be

9
00:00:28,640 --> 00:00:30,640
the one coordinating the slides and

10
00:00:30,640 --> 00:00:33,680
handing it to the different presenters

11
00:00:33,680 --> 00:00:37,600
so i think this will all work well

12
00:00:38,000 --> 00:00:39,680
uh that's the ietf

13
00:00:39,680 --> 00:00:42,239
so we have our usual note well

14
00:00:42,239 --> 00:00:44,719
the short of this is anything you say

15
00:00:44,719 --> 00:00:48,079
here uh becomes part of uh our permanent

16
00:00:48,079 --> 00:00:49,039
record

17
00:00:49,039 --> 00:00:51,360
and is considered a contribution

18
00:00:51,360 --> 00:00:52,960
if you're unfamiliar with the notewell

19
00:00:52,960 --> 00:00:54,879
please take a look at the main ietf page

20
00:00:54,879 --> 00:00:57,039
and follow the links to familiarize

21
00:00:57,039 --> 00:00:59,840
yourself with that

22
00:01:02,239 --> 00:01:04,720
we also remind everyone that we do have

23
00:01:04,720 --> 00:01:06,720
a code of conduct which says please

24
00:01:06,720 --> 00:01:09,360
treat each other professionally and with

25
00:01:09,360 --> 00:01:12,360
respect

26
00:01:14,640 --> 00:01:17,360
for this meeting we are using the

27
00:01:17,360 --> 00:01:20,799
integrated meet echo

28
00:01:20,799 --> 00:01:22,560
cue management

29
00:01:22,560 --> 00:01:24,799
everyone should take a look at the qr

30
00:01:24,799 --> 00:01:27,520
code that's up on the screen or go find

31
00:01:27,520 --> 00:01:30,079
it off of the main agenda page

32
00:01:30,079 --> 00:01:31,600
and we're going to try to use that to

33
00:01:31,600 --> 00:01:33,200
manage the queue

34
00:01:33,200 --> 00:01:34,720
that'll be particularly helpful because

35
00:01:34,720 --> 00:01:36,640
my co-chairs are

36
00:01:36,640 --> 00:01:39,119
remote and we'll all try to watch the

37
00:01:39,119 --> 00:01:42,079
queue but

38
00:01:42,079 --> 00:01:43,439
having that integrated queue will make

39
00:01:43,439 --> 00:01:46,079
it easy on us

40
00:01:46,079 --> 00:01:48,320
we've also been asked to remind

41
00:01:48,320 --> 00:01:51,200
participants that masks are required in

42
00:01:51,200 --> 00:01:52,240
session

43
00:01:52,240 --> 00:01:53,600
and

44
00:01:53,600 --> 00:01:56,159
keep them on uh the the mics seem to

45
00:01:56,159 --> 00:02:00,320
work just fine with the with the mask on

46
00:02:00,320 --> 00:02:01,520
um

47
00:02:01,520 --> 00:02:03,520
remote participants if you're hearing me

48
00:02:03,520 --> 00:02:05,360
you've already figured this out you're

49
00:02:05,360 --> 00:02:07,280
on me deco

50
00:02:07,280 --> 00:02:09,679
i'll point everyone out also to the

51
00:02:09,679 --> 00:02:12,319
there's the uh note taking the joint net

52
00:02:12,319 --> 00:02:14,640
oops

53
00:02:15,040 --> 00:02:18,000
uh we have joint note taking um the link

54
00:02:18,000 --> 00:02:20,239
is here it's also there's a very nice

55
00:02:20,239 --> 00:02:22,000
way of getting it from need echo you

56
00:02:22,000 --> 00:02:22,959
just go

57
00:02:22,959 --> 00:02:25,280
sort of off to the right in the upper

58
00:02:25,280 --> 00:02:26,879
right and it says

59
00:02:26,879 --> 00:02:28,560
meeting note taking and if you click on

60
00:02:28,560 --> 00:02:31,040
that you'll join us at this page

61
00:02:31,040 --> 00:02:33,920
it's really helpful to help capture the

62
00:02:33,920 --> 00:02:36,560
comments that are made

63
00:02:36,560 --> 00:02:38,160
during discussion you do not need to

64
00:02:38,160 --> 00:02:40,800
capture the presented material

65
00:02:40,800 --> 00:02:42,239
um

66
00:02:42,239 --> 00:02:43,840
it is

67
00:02:43,840 --> 00:02:45,680
great if you capture someone else's and

68
00:02:45,680 --> 00:02:47,519
it's even better if you go make sure

69
00:02:47,519 --> 00:02:49,599
that your name is captured correctly in

70
00:02:49,599 --> 00:02:51,280
the minutes and that your comment was

71
00:02:51,280 --> 00:02:54,480
correctly accurately represented

72
00:02:54,480 --> 00:02:57,040
all material has been uploaded

73
00:02:57,040 --> 00:02:58,879
we have one late edition from our ad

74
00:02:58,879 --> 00:03:01,040
that will try to get uploaded

75
00:03:01,040 --> 00:03:02,480
before he talks at the end of the

76
00:03:02,480 --> 00:03:05,480
session

77
00:03:07,280 --> 00:03:08,720
we're going to spend much of our time

78
00:03:08,720 --> 00:03:09,760
today

79
00:03:09,760 --> 00:03:11,120
talking about

80
00:03:11,120 --> 00:03:13,440
yang versioning this is a topic that i'm

81
00:03:13,440 --> 00:03:14,480
sure

82
00:03:14,480 --> 00:03:16,000
most of you are really familiar with

83
00:03:16,000 --> 00:03:18,480
it's been going on

84
00:03:18,480 --> 00:03:19,760
for a bit

85
00:03:19,760 --> 00:03:22,480
we have done a last call on the first

86
00:03:22,480 --> 00:03:25,599
two documents and we had talked about

87
00:03:25,599 --> 00:03:27,200
holding the

88
00:03:27,200 --> 00:03:30,640
documents up uh until the full document

89
00:03:30,640 --> 00:03:32,480
set of five

90
00:03:32,480 --> 00:03:36,159
documents was ready for last call

91
00:03:36,159 --> 00:03:39,120
in discussion with the authors and the

92
00:03:39,120 --> 00:03:40,080
aed

93
00:03:40,080 --> 00:03:41,840
we're going to actually do something a

94
00:03:41,840 --> 00:03:43,040
little different

95
00:03:43,040 --> 00:03:44,400
basically

96
00:03:44,400 --> 00:03:45,200
the

97
00:03:45,200 --> 00:03:47,680
consensus among the those working on the

98
00:03:47,680 --> 00:03:48,799
document

99
00:03:48,799 --> 00:03:51,040
is it's not close to ready and they need

100
00:03:51,040 --> 00:03:52,400
a bit of time

101
00:03:52,400 --> 00:03:54,239
and rather than hold up

102
00:03:54,239 --> 00:03:56,879
uh these other documents for a long time

103
00:03:56,879 --> 00:03:58,720
which we thought originally was going to

104
00:03:58,720 --> 00:04:01,519
be a short time but now it's a long time

105
00:04:01,519 --> 00:04:02,959
we're going to

106
00:04:02,959 --> 00:04:04,159
wait for an update that you're going to

107
00:04:04,159 --> 00:04:06,560
hear about today going to discuss that

108
00:04:06,560 --> 00:04:08,720
resolve any of the issues that are open

109
00:04:08,720 --> 00:04:10,879
get out a new version do another last

110
00:04:10,879 --> 00:04:13,519
call and then progress those at least

111
00:04:13,519 --> 00:04:15,439
that's the plan right now that is

112
00:04:15,439 --> 00:04:16,399
different than what we talked about

113
00:04:16,399 --> 00:04:18,880
previously

114
00:04:18,880 --> 00:04:19,759
uh

115
00:04:19,759 --> 00:04:21,440
okay so that's going to be the majority

116
00:04:21,440 --> 00:04:23,199
of our discussion today

117
00:04:23,199 --> 00:04:25,120
and then we still have some time

118
00:04:25,120 --> 00:04:27,280
available we're going to talk about

119
00:04:27,280 --> 00:04:31,600
a couple of unchartered documents

120
00:04:31,600 --> 00:04:33,040
and

121
00:04:33,040 --> 00:04:35,040
we had 25 minutes left on the schedule

122
00:04:35,040 --> 00:04:36,720
so in thinking about what we might do

123
00:04:36,720 --> 00:04:38,639
with that time to make good use of us

124
00:04:38,639 --> 00:04:40,080
all being together

125
00:04:40,080 --> 00:04:42,800
we have two topics the first topic is

126
00:04:42,800 --> 00:04:45,520
going to be yang next which we've talked

127
00:04:45,520 --> 00:04:47,360
about a few times

128
00:04:47,360 --> 00:04:48,560
and we're going to have an informal

129
00:04:48,560 --> 00:04:51,360
discussion led by the chairs

130
00:04:51,360 --> 00:04:54,240
and then the other topic is our id

131
00:04:54,240 --> 00:04:56,880
presented some ideas on how to move

132
00:04:56,880 --> 00:04:59,600
faster to the iesg and we're going to

133
00:04:59,600 --> 00:05:02,160
talk about that as well

134
00:05:02,160 --> 00:05:04,320
and i think we have

135
00:05:04,320 --> 00:05:08,759
25 minutes for those conversations

136
00:05:11,840 --> 00:05:16,479
we have uh one recently published uh rfc

137
00:05:16,479 --> 00:05:18,240
thank you to everyone who worked on it

138
00:05:18,240 --> 00:05:20,080
we're here to publish documents it's

139
00:05:20,080 --> 00:05:22,320
always great to see everyone and meet

140
00:05:22,320 --> 00:05:24,639
and talk but our product of the

141
00:05:24,639 --> 00:05:26,880
documents so thank you for all who made

142
00:05:26,880 --> 00:05:29,039
that happen

143
00:05:29,039 --> 00:05:31,520
we have a couple of documents or a few

144
00:05:31,520 --> 00:05:34,880
documents that are posted last

145
00:05:37,600 --> 00:05:39,440
i don't call what that was uh rob are

146
00:05:39,440 --> 00:05:42,880
you getting ready to go to the bike

147
00:05:47,919 --> 00:05:50,080
all right so rob wilson just want to

148
00:05:50,080 --> 00:05:52,000
speak to the two documents that uh the

149
00:05:52,000 --> 00:05:53,759
intense extensions and sub interests

150
00:05:53,759 --> 00:05:54,960
feed our model that i've been setting

151
00:05:54,960 --> 00:05:57,440
for a long time so i'm glad to say that

152
00:05:57,440 --> 00:05:58,319
um

153
00:05:58,319 --> 00:06:01,520
scott and donov uh kindly agreed were

154
00:06:01,520 --> 00:06:03,280
offered to help me progress those

155
00:06:03,280 --> 00:06:05,600
forward so um i've sent an email on the

156
00:06:05,600 --> 00:06:07,840
first one to them today i've had a quick

157
00:06:07,840 --> 00:06:09,840
chat with this week but the aim is to

158
00:06:09,840 --> 00:06:11,039
try and get

159
00:06:11,039 --> 00:06:12,639
an updated version of the first one out

160
00:06:12,639 --> 00:06:14,560
quite quickly i don't think that much to

161
00:06:14,560 --> 00:06:15,600
resolve and then we'll resolve the

162
00:06:15,600 --> 00:06:17,360
issues the other one and hopefully get

163
00:06:17,360 --> 00:06:20,160
these finally done soon so i think when

164
00:06:20,160 --> 00:06:22,479
i discussed it with you and the second

165
00:06:22,479 --> 00:06:24,080
worker glasgow would be appreciated on

166
00:06:24,080 --> 00:06:25,520
that on those updates

167
00:06:25,520 --> 00:06:27,120
that would be that'd be great as soon as

168
00:06:27,120 --> 00:06:29,520
you're ready please make sure to send

169
00:06:29,520 --> 00:06:31,360
something to the chair saying we're

170
00:06:31,360 --> 00:06:33,440
ready we'll push go and

171
00:06:33,440 --> 00:06:35,360
get these documents done thank you

172
00:06:35,360 --> 00:06:39,440
thanks yeah i really appreciate uh

173
00:06:39,919 --> 00:06:42,080
getting them out while balancing your

174
00:06:42,080 --> 00:06:43,759
padded load i know it's quite a bit

175
00:06:43,759 --> 00:06:45,759
being a.d

176
00:06:45,759 --> 00:06:49,520
uh the next document is uh

177
00:06:49,520 --> 00:06:54,080
the abyss on 69.91 that one is last call

178
00:06:54,080 --> 00:06:56,720
and we should expect a um a write-up

179
00:06:56,720 --> 00:06:58,720
soon from the the shepherd

180
00:06:58,720 --> 00:07:00,800
so nothing really interesting there

181
00:07:00,800 --> 00:07:02,319
and then we have the two documents that

182
00:07:02,319 --> 00:07:04,639
we talked about already uh that those

183
00:07:04,639 --> 00:07:06,400
were the post last call that we have the

184
00:07:06,400 --> 00:07:08,080
new plan for

185
00:07:08,080 --> 00:07:10,080
uh syslog was returned to us a little

186
00:07:10,080 --> 00:07:12,479
while ago it needs a minor change and

187
00:07:12,479 --> 00:07:13,840
that's going to be talked about i

188
00:07:13,840 --> 00:07:17,239
believe next

189
00:07:18,319 --> 00:07:20,080
just before the meeting we got a we

190
00:07:20,080 --> 00:07:24,160
received a liaison from uh oran

191
00:07:24,160 --> 00:07:25,039
and

192
00:07:25,039 --> 00:07:26,800
there this is unusual that they're

193
00:07:26,800 --> 00:07:29,360
actually asking for a response usually

194
00:07:29,360 --> 00:07:31,120
we get liaisons and they just want

195
00:07:31,120 --> 00:07:33,199
information they just are informing us

196
00:07:33,199 --> 00:07:36,319
of an activity and this one they've said

197
00:07:36,319 --> 00:07:38,160
we really want these documents to be

198
00:07:38,160 --> 00:07:40,400
published the ones we just talked about

199
00:07:40,400 --> 00:07:41,919
and you let us know when you expect them

200
00:07:41,919 --> 00:07:43,520
to be published so

201
00:07:43,520 --> 00:07:44,400
uh

202
00:07:44,400 --> 00:07:45,680
we had actually had the whole

203
00:07:45,680 --> 00:07:47,840
conversation about not holding these

204
00:07:47,840 --> 00:07:50,479
documents up before this came in

205
00:07:50,479 --> 00:07:52,479
and it sort of lines up well so you know

206
00:07:52,479 --> 00:07:53,599
i don't think we have too much to

207
00:07:53,599 --> 00:07:57,039
discuss in preparing a response

208
00:07:57,039 --> 00:08:00,240
we expect to draft one and send it and

209
00:08:00,240 --> 00:08:01,120
uh

210
00:08:01,120 --> 00:08:04,400
if someone feels like giving us a draft

211
00:08:04,400 --> 00:08:05,919
rather than waiting for the chairs we're

212
00:08:05,919 --> 00:08:08,639
welcome to to take a look at it and the

213
00:08:08,639 --> 00:08:10,080
way to submit that is you send it to the

214
00:08:10,080 --> 00:08:11,759
working group list and say we propose

215
00:08:11,759 --> 00:08:14,560
this this is a response

216
00:08:14,560 --> 00:08:16,160
and if no one does it the chairs will

217
00:08:16,160 --> 00:08:18,720
probably get there oh yes

218
00:08:18,720 --> 00:08:20,960
all right

219
00:08:20,960 --> 00:08:22,400
said that he will help us with that

220
00:08:22,400 --> 00:08:24,800
thank you

221
00:08:24,800 --> 00:08:26,479
and again just send it to the list and

222
00:08:26,479 --> 00:08:30,960
say this is a draft a proposed response

223
00:08:30,960 --> 00:08:31,919
and

224
00:08:31,919 --> 00:08:34,559
this is a little boring we all know we

225
00:08:34,559 --> 00:08:37,039
can how to work remote uh

226
00:08:37,039 --> 00:08:39,200
now we're well seasoned at that at this

227
00:08:39,200 --> 00:08:40,479
point

228
00:08:40,479 --> 00:08:43,200
the main point in showing the slide is

229
00:08:43,200 --> 00:08:44,640
if you would like to use the working

230
00:08:44,640 --> 00:08:46,640
group resources

231
00:08:46,640 --> 00:08:49,360
for interims or informal meetings they

232
00:08:49,360 --> 00:08:51,760
are available to you

233
00:08:51,760 --> 00:08:56,640
and with that we're gonna move over to

234
00:08:58,800 --> 00:09:01,599
the first slot

235
00:09:04,720 --> 00:09:06,800
and joe are you

236
00:09:06,800 --> 00:09:09,040
i don't oh you are here

237
00:09:09,040 --> 00:09:11,439
awesome

238
00:09:18,399 --> 00:09:20,399
all you say is next then it'll magically

239
00:09:20,399 --> 00:09:21,440
happen

240
00:09:21,440 --> 00:09:23,440
hello i'm joe clark and this will be

241
00:09:23,440 --> 00:09:26,399
short um this is about the syslog draft

242
00:09:26,399 --> 00:09:29,360
no good deed goes unpunished i

243
00:09:29,360 --> 00:09:32,160
offered to take on this work to push it

244
00:09:32,160 --> 00:09:33,519
through since i know that there were

245
00:09:33,519 --> 00:09:34,640
some

246
00:09:34,640 --> 00:09:36,320
cisco people who'd worked on it and i

247
00:09:36,320 --> 00:09:39,440
really wanted to see it um ratified um

248
00:09:39,440 --> 00:09:42,080
so i took that uh unfortunately next

249
00:09:42,080 --> 00:09:43,440
slide please

250
00:09:43,440 --> 00:09:46,000
uh we only had uh or i was only been

251
00:09:46,000 --> 00:09:48,000
able to give or ken was only able to

252
00:09:48,000 --> 00:09:50,000
give me the rev 23 it was currently at

253
00:09:50,000 --> 00:09:54,320
rev26 the rev23xml so i had to back port

254
00:09:54,320 --> 00:09:55,600
a lot of the

255
00:09:55,600 --> 00:09:57,920
changes that had happened into

256
00:09:57,920 --> 00:10:00,399
that so i could at least get an xml that

257
00:10:00,399 --> 00:10:02,000
that looked like the

258
00:10:02,000 --> 00:10:04,959
what was published in 26 so we did that

259
00:10:04,959 --> 00:10:07,600
mahesh was generous enough to provide

260
00:10:07,600 --> 00:10:09,600
his build system and he helped clean up

261
00:10:09,600 --> 00:10:10,720
some of this

262
00:10:10,720 --> 00:10:12,640
so we got uh

263
00:10:12,640 --> 00:10:14,720
the 26

264
00:10:14,720 --> 00:10:17,040
there and then we updated things so that

265
00:10:17,040 --> 00:10:19,279
it had the right boilerplate and the

266
00:10:19,279 --> 00:10:21,519
right year and all of that and past id

267
00:10:21,519 --> 00:10:23,440
knits and everything looked good

268
00:10:23,440 --> 00:10:25,440
but then it was still broken and the

269
00:10:25,440 --> 00:10:27,200
thing i want to focus on the most is

270
00:10:27,200 --> 00:10:29,680
what you see there in orange the replace

271
00:10:29,680 --> 00:10:31,519
the old key store

272
00:10:31,519 --> 00:10:35,200
um grouping in there with the uh crypto

273
00:10:35,200 --> 00:10:37,440
types asymmetric key pair with cert

274
00:10:37,440 --> 00:10:38,240
group

275
00:10:38,240 --> 00:10:41,200
so next slide and i'll show you

276
00:10:41,200 --> 00:10:43,040
i realize this doesn't give enough

277
00:10:43,040 --> 00:10:44,800
context

278
00:10:44,800 --> 00:10:47,839
this the this quote-unquote cert changes

279
00:10:47,839 --> 00:10:50,320
in the draft this is under the signed

280
00:10:50,320 --> 00:10:54,079
syslog container area in that draft so

281
00:10:54,079 --> 00:10:56,399
if you support the feature of signing

282
00:10:56,399 --> 00:10:58,240
your syslog messages

283
00:10:58,240 --> 00:11:00,800
you need a way of reflecting what cert

284
00:11:00,800 --> 00:11:03,040
you are going to use in order to sign

285
00:11:03,040 --> 00:11:04,160
that

286
00:11:04,160 --> 00:11:06,720
and what key you want to use in order to

287
00:11:06,720 --> 00:11:09,440
sign or to use that cert

288
00:11:09,440 --> 00:11:10,240
so

289
00:11:10,240 --> 00:11:12,959
i think i've picked the right grouping

290
00:11:12,959 --> 00:11:15,600
here i think i picked the correct thing

291
00:11:15,600 --> 00:11:17,519
that that bundles i had to change some

292
00:11:17,519 --> 00:11:19,440
of the text so you can see what you what

293
00:11:19,440 --> 00:11:21,200
what it previously was

294
00:11:21,200 --> 00:11:24,959
what it now is uh and this seems to be

295
00:11:24,959 --> 00:11:28,320
restores the semantics of what this uh

296
00:11:28,320 --> 00:11:30,160
this grouping should do

297
00:11:30,160 --> 00:11:31,920
for allowing you to configure and

298
00:11:31,920 --> 00:11:32,959
support

299
00:11:32,959 --> 00:11:35,680
sciences log messages

300
00:11:35,680 --> 00:11:39,040
with this so i i would love to hear if i

301
00:11:39,040 --> 00:11:40,880
got it right i got it wrong

302
00:11:40,880 --> 00:11:43,680
but if i got it right i feel that the

303
00:11:43,680 --> 00:11:46,399
draft is where it can be to do a last

304
00:11:46,399 --> 00:11:48,800
call and hopefully push it through for

305
00:11:48,800 --> 00:11:51,040
ultimate ratification and i see kent

306
00:11:51,040 --> 00:11:55,399
coming to the queue kent

307
00:11:56,079 --> 00:11:57,920
yeah hi joe thanks for taking on this

308
00:11:57,920 --> 00:12:00,480
work really appreciate it um i do think

309
00:12:00,480 --> 00:12:02,800
that you got it right uh it may be just

310
00:12:02,800 --> 00:12:04,800
one minor thing the um

311
00:12:04,800 --> 00:12:06,880
you have asymmetric key pair with certs

312
00:12:06,880 --> 00:12:09,200
plural grouping and it might be a

313
00:12:09,200 --> 00:12:11,600
symmetric key pair with cert singular

314
00:12:11,600 --> 00:12:13,760
grouping both groupings exist but what

315
00:12:13,760 --> 00:12:16,560
you want i think maybe with the singular

316
00:12:16,560 --> 00:12:18,959
not plural um regardless i'll be

317
00:12:18,959 --> 00:12:20,880
shepherd for this and we'll uh look at

318
00:12:20,880 --> 00:12:22,079
it again

319
00:12:22,079 --> 00:12:24,639
i i did look at both and and now that

320
00:12:24,639 --> 00:12:27,120
you're saying it and i'm on the hot seat

321
00:12:27,120 --> 00:12:29,279
i can't remember why i chose this one

322
00:12:29,279 --> 00:12:31,760
but i i consciously chose this one after

323
00:12:31,760 --> 00:12:32,800
reading

324
00:12:32,800 --> 00:12:35,120
uh through the crypto types draft but i

325
00:12:35,120 --> 00:12:36,560
would appreciate

326
00:12:36,560 --> 00:12:38,800
your insight was kind of what i was

327
00:12:38,800 --> 00:12:41,760
hoping to get um so thank you but that

328
00:12:41,760 --> 00:12:44,079
that is it uh the next slide is just my

329
00:12:44,079 --> 00:12:45,680
call to action

330
00:12:45,680 --> 00:12:48,240
um on this i would like the working

331
00:12:48,240 --> 00:12:50,160
group to kind of weigh in if we're ready

332
00:12:50,160 --> 00:12:52,000
i would like the last call and we'll see

333
00:12:52,000 --> 00:12:54,639
if we can't get this one finished

334
00:12:54,639 --> 00:12:56,959
thanks

335
00:12:59,440 --> 00:13:01,440
all right thank you very much

336
00:13:01,440 --> 00:13:03,519
and

337
00:13:03,519 --> 00:13:07,040
next we have no tags

338
00:13:07,040 --> 00:13:08,800
no tags

339
00:13:08,800 --> 00:13:11,040
sorry

340
00:13:16,079 --> 00:13:17,360
hello everyone

341
00:13:17,360 --> 00:13:19,519
my name is ching and i want to talk

342
00:13:19,519 --> 00:13:22,639
about unload attack in young lady motive

343
00:13:22,639 --> 00:13:24,399
so this is working cool job the current

344
00:13:24,399 --> 00:13:28,880
version number is zero eight next

345
00:13:29,440 --> 00:13:31,760
so a little bit a little bit recapture

346
00:13:31,760 --> 00:13:33,760
so what is this job uh talking about

347
00:13:33,760 --> 00:13:35,120
actually

348
00:13:35,120 --> 00:13:36,480
uh

349
00:13:36,480 --> 00:13:38,959
actually uh we we know the young module

350
00:13:38,959 --> 00:13:41,440
can comprise a set of uh

351
00:13:41,440 --> 00:13:44,399
data node and they know in a

352
00:13:44,399 --> 00:13:46,560
young data model maybe in

353
00:13:46,560 --> 00:13:49,199
in a single young data model or several

354
00:13:49,199 --> 00:13:51,519
young data model may share the same uh

355
00:13:51,519 --> 00:13:52,600
common

356
00:13:52,600 --> 00:13:55,040
characteristics uh or feature for

357
00:13:55,040 --> 00:13:57,440
example the both can be seen as some

358
00:13:57,440 --> 00:14:00,560
some kind of kpi data so

359
00:14:00,560 --> 00:14:02,639
no tag really want to capture this kind

360
00:14:02,639 --> 00:14:03,360
of

361
00:14:03,360 --> 00:14:06,399
uh characteristic data

362
00:14:06,399 --> 00:14:08,480
and uh so

363
00:14:08,480 --> 00:14:11,519
uh currently uh no tech job has already

364
00:14:11,519 --> 00:14:13,680
got a review from young doctor

365
00:14:13,680 --> 00:14:15,279
and also uh

366
00:14:15,279 --> 00:14:17,199
the working google last call has been

367
00:14:17,199 --> 00:14:19,519
initiated and we got a lot of comments

368
00:14:19,519 --> 00:14:20,720
and

369
00:14:20,720 --> 00:14:25,199
thanks all all the reviewers and uh

370
00:14:25,279 --> 00:14:27,040
actually one

371
00:14:27,040 --> 00:14:29,120
substantial comments actually about the

372
00:14:29,120 --> 00:14:31,360
mechanism defined in this child whether

373
00:14:31,360 --> 00:14:35,040
it is generic enough or take it to some

374
00:14:35,040 --> 00:14:37,120
specific use cases

375
00:14:37,120 --> 00:14:40,240
so for these uh comments actually we

376
00:14:40,240 --> 00:14:41,199
uh

377
00:14:41,199 --> 00:14:42,639
take offline discussion with the

378
00:14:42,639 --> 00:14:45,279
reviewer juggen and we got a lot of

379
00:14:45,279 --> 00:14:47,519
suggestion and we listed several

380
00:14:47,519 --> 00:14:48,560
questions

381
00:14:48,560 --> 00:14:50,959
here we will you know

382
00:14:50,959 --> 00:14:52,880
give a detailed discussion about this

383
00:14:52,880 --> 00:14:54,959
question and our answer

384
00:14:54,959 --> 00:14:57,279
and you can see the current version 8

385
00:14:57,279 --> 00:14:58,639
actually

386
00:14:58,639 --> 00:15:01,920
try to address all the comments during

387
00:15:01,920 --> 00:15:03,279
working with last call and a young

388
00:15:03,279 --> 00:15:04,720
doctor review

389
00:15:04,720 --> 00:15:07,040
next

390
00:15:08,399 --> 00:15:09,600
so this

391
00:15:09,600 --> 00:15:12,000
is a change we made actually when we

392
00:15:12,000 --> 00:15:14,639
started from zero six we actually made a

393
00:15:14,639 --> 00:15:15,440
two

394
00:15:15,440 --> 00:15:17,839
update actually the main

395
00:15:17,839 --> 00:15:20,399
change actually we changed the title uh

396
00:15:20,399 --> 00:15:22,240
since based on it is a touching with

397
00:15:22,240 --> 00:15:23,199
single

398
00:15:23,199 --> 00:15:25,440
no tag not only

399
00:15:25,440 --> 00:15:27,519
apply to some

400
00:15:27,519 --> 00:15:30,480
schema level tag and but also instance

401
00:15:30,480 --> 00:15:32,720
level tags so we change the title to

402
00:15:32,720 --> 00:15:35,279
reflect that and also

403
00:15:35,279 --> 00:15:37,040
uh we actually

404
00:15:37,040 --> 00:15:40,000
update the introduction and abstract and

405
00:15:40,000 --> 00:15:42,000
try to make object

406
00:15:42,000 --> 00:15:45,519
more clearly to cover both cases know

407
00:15:45,519 --> 00:15:48,240
the never type and the instance level

408
00:15:48,240 --> 00:15:50,639
uh schema level tag and instance level

409
00:15:50,639 --> 00:15:51,759
type

410
00:15:51,759 --> 00:15:53,360
and

411
00:15:53,360 --> 00:15:55,759
to make it more generic actually we

412
00:15:55,759 --> 00:15:58,079
in original version actually we have

413
00:15:58,079 --> 00:16:00,079
several young extension

414
00:16:00,079 --> 00:16:02,880
actually we try to we have three uh

415
00:16:02,880 --> 00:16:06,000
extension not like metric type and

416
00:16:06,000 --> 00:16:08,720
opn tags that is not a magic enough kind

417
00:16:08,720 --> 00:16:11,279
of term actually we try to consolidate

418
00:16:11,279 --> 00:16:12,399
into one

419
00:16:12,399 --> 00:16:13,600
uh

420
00:16:13,600 --> 00:16:16,720
general young extension

421
00:16:16,959 --> 00:16:19,199
also in early version we have object tag

422
00:16:19,199 --> 00:16:21,759
and a property tag we think they are not

423
00:16:21,759 --> 00:16:24,240
important anymore so we just remove it

424
00:16:24,240 --> 00:16:25,680
and

425
00:16:25,680 --> 00:16:26,480
we

426
00:16:26,480 --> 00:16:29,279
actually uh

427
00:16:29,519 --> 00:16:32,320
we document clearly which tag uh can be

428
00:16:32,320 --> 00:16:33,519
captured

429
00:16:33,519 --> 00:16:35,040
how application can be supported to

430
00:16:35,040 --> 00:16:37,199
re-synchronize deploying

431
00:16:37,199 --> 00:16:40,160
uh any update in the section three based

432
00:16:40,160 --> 00:16:42,880
on the comments from eugene and

433
00:16:42,880 --> 00:16:44,000
uh

434
00:16:44,000 --> 00:16:45,759
also actually

435
00:16:45,759 --> 00:16:48,320
we clarify schema level tag can be used

436
00:16:48,320 --> 00:16:51,920
in the xpath query in section 3 and we

437
00:16:51,920 --> 00:16:53,279
also made

438
00:16:53,279 --> 00:16:55,839
several other changes in appendix

439
00:16:55,839 --> 00:16:57,920
so you can see that actually

440
00:16:57,920 --> 00:17:00,560
some of them just the editorial chain

441
00:17:00,560 --> 00:17:03,560
next

442
00:17:04,319 --> 00:17:05,679
so uh

443
00:17:05,679 --> 00:17:06,559
to

444
00:17:06,559 --> 00:17:09,039
uh revisit the question we discussed

445
00:17:09,039 --> 00:17:10,640
with yogan actually we have five

446
00:17:10,640 --> 00:17:12,160
questions actually

447
00:17:12,160 --> 00:17:14,319
try to go through this question actually

448
00:17:14,319 --> 00:17:16,480
the first question is about no tag

449
00:17:16,480 --> 00:17:19,119
whether it is schema level attack or

450
00:17:19,119 --> 00:17:21,599
instance level attack actually

451
00:17:21,599 --> 00:17:23,599
our answer is you know we cover both

452
00:17:23,599 --> 00:17:25,919
cases originally we focus on schema

453
00:17:25,919 --> 00:17:28,480
level attack better based on the managed

454
00:17:28,480 --> 00:17:30,400
discussion we think

455
00:17:30,400 --> 00:17:31,919
it would be useful the current both

456
00:17:31,919 --> 00:17:33,280
cases

457
00:17:33,280 --> 00:17:34,320
uh

458
00:17:34,320 --> 00:17:37,440
actually so uh for example

459
00:17:37,440 --> 00:17:39,280
our design uh

460
00:17:39,280 --> 00:17:41,919
we define the node node id actually as

461
00:17:41,919 --> 00:17:45,200
the node instance identified so this can

462
00:17:45,200 --> 00:17:48,480
fully support these both cases so we

463
00:17:48,480 --> 00:17:50,720
update the uh abstract introduction

464
00:17:50,720 --> 00:17:54,160
several sections to try to reflect this

465
00:17:54,160 --> 00:17:54,960
so

466
00:17:54,960 --> 00:17:57,520
for this one actually

467
00:17:57,520 --> 00:17:59,679
if anyone seems

468
00:17:59,679 --> 00:18:01,840
has any

469
00:18:01,840 --> 00:18:05,439
different opening please let us know

470
00:18:06,000 --> 00:18:08,240
next

471
00:18:08,880 --> 00:18:12,960
the second one is about how no tech

472
00:18:12,960 --> 00:18:15,440
can we change it uh whether the tag

473
00:18:15,440 --> 00:18:17,919
changes frequently or not actually

474
00:18:17,919 --> 00:18:18,960
uh

475
00:18:18,960 --> 00:18:19,919
we

476
00:18:19,919 --> 00:18:21,600
actually we know actually there's

477
00:18:21,600 --> 00:18:25,360
another rfc called more uh mod module

478
00:18:25,360 --> 00:18:26,960
tag actually

479
00:18:26,960 --> 00:18:29,600
which is obviously 8819 actually they

480
00:18:29,600 --> 00:18:32,320
support both system tag and user config

481
00:18:32,320 --> 00:18:33,120
tag

482
00:18:33,120 --> 00:18:36,640
so actually for this job that we

483
00:18:36,640 --> 00:18:38,880
also support both

484
00:18:38,880 --> 00:18:40,080
tag so

485
00:18:40,080 --> 00:18:43,600
system system tag can be seen as a

486
00:18:43,600 --> 00:18:46,080
schema level tag actually so system

487
00:18:46,080 --> 00:18:49,039
client can add text into the data node

488
00:18:49,039 --> 00:18:50,240
list

489
00:18:50,240 --> 00:18:51,840
uh of

490
00:18:51,840 --> 00:18:54,559
the node text module if a model writer

491
00:18:54,559 --> 00:18:57,120
uses young extension to define the text

492
00:18:57,120 --> 00:19:00,000
so this is usually to tag a specific

493
00:19:00,000 --> 00:19:02,000
schema notes and

494
00:19:02,000 --> 00:19:04,000
actually usually this kind of tag

495
00:19:04,000 --> 00:19:05,600
actually are static and not changing

496
00:19:05,600 --> 00:19:07,679
frequently

497
00:19:07,679 --> 00:19:08,880
but for

498
00:19:08,880 --> 00:19:11,840
instance level tags so the client can

499
00:19:11,840 --> 00:19:13,360
dynamic to

500
00:19:13,360 --> 00:19:17,440
add or remove an attack on

501
00:19:17,440 --> 00:19:20,160
day node instance during the running

502
00:19:20,160 --> 00:19:23,280
time stage actually

503
00:19:23,280 --> 00:19:26,000
so this one actually

504
00:19:26,000 --> 00:19:26,880
the

505
00:19:26,880 --> 00:19:27,679
uh

506
00:19:27,679 --> 00:19:29,840
is possible so you can see it's possible

507
00:19:29,840 --> 00:19:30,880
to to

508
00:19:30,880 --> 00:19:34,160
change the tag but we think

509
00:19:34,160 --> 00:19:36,559
also not frequently actually you can see

510
00:19:36,559 --> 00:19:39,360
plan a can add tag client b actually can

511
00:19:39,360 --> 00:19:41,679
track these tag changes

512
00:19:41,679 --> 00:19:44,080
by you know subscribe these kind of tag

513
00:19:44,080 --> 00:19:45,120
changes

514
00:19:45,120 --> 00:19:47,440
so client a actually

515
00:19:47,440 --> 00:19:48,400
change

516
00:19:48,400 --> 00:19:51,600
tag changing can be automatically synced

517
00:19:51,600 --> 00:19:52,480
to the

518
00:19:52,480 --> 00:19:54,820
to plan b so

519
00:19:54,820 --> 00:19:57,440
[Music]

520
00:19:57,440 --> 00:19:59,679
so we actually uh

521
00:19:59,679 --> 00:20:01,520
this is a

522
00:20:01,520 --> 00:20:05,080
discussion actually

523
00:20:08,720 --> 00:20:10,159
based on the discussion actually we

524
00:20:10,159 --> 00:20:12,080
actually made

525
00:20:12,080 --> 00:20:13,679
someone else's microphone i had to mute

526
00:20:13,679 --> 00:20:16,240
it thank you

527
00:20:18,320 --> 00:20:19,200
you're good

528
00:20:19,200 --> 00:20:21,679
okay

529
00:20:21,679 --> 00:20:24,080
so we actually uh so you can see this

530
00:20:24,080 --> 00:20:25,520
kind of change actually in the

531
00:20:25,520 --> 00:20:27,760
introduction or sample use case section

532
00:20:27,760 --> 00:20:29,200
we try to

533
00:20:29,200 --> 00:20:32,320
reflect this uh

534
00:20:32,320 --> 00:20:34,960
discussion uh in in the curtain version

535
00:20:34,960 --> 00:20:36,799
eight

536
00:20:36,799 --> 00:20:39,120
next

537
00:20:42,000 --> 00:20:45,760
so next is how tag are retrieved so we

538
00:20:45,760 --> 00:20:47,520
you you know actually

539
00:20:47,520 --> 00:20:49,120
no tag actually

540
00:20:49,120 --> 00:20:50,640
can be retrieved but

541
00:20:50,640 --> 00:20:52,960
we have uh we can retrieve the tag we

542
00:20:52,960 --> 00:20:54,960
can retrieve the data whether they

543
00:20:54,960 --> 00:20:56,799
you know can be retrieved together or

544
00:20:56,799 --> 00:20:59,440
they should be received separately

545
00:20:59,440 --> 00:21:00,240
so

546
00:21:00,240 --> 00:21:03,440
our answer is you know for uh tag

547
00:21:03,440 --> 00:21:05,840
actually uh you know tag receiver it

548
00:21:05,840 --> 00:21:07,520
should be recovered from the data

549
00:21:07,520 --> 00:21:10,159
retriever so we have two way to retrieve

550
00:21:10,159 --> 00:21:13,120
the tags the first is we define the

551
00:21:13,120 --> 00:21:16,799
ietf node tags module so we can

552
00:21:16,799 --> 00:21:19,840
you know allow the client to use a

553
00:21:19,840 --> 00:21:21,919
standard portable operation to retrieve

554
00:21:21,919 --> 00:21:23,520
the node tags

555
00:21:23,520 --> 00:21:26,720
uh to get this contact another way is

556
00:21:26,720 --> 00:21:30,000
you can use the get schema operation to

557
00:21:30,000 --> 00:21:32,960
this camera schema node tag

558
00:21:32,960 --> 00:21:34,880
so this is a you know similar to the

559
00:21:34,880 --> 00:21:36,480
obviously

560
00:21:36,480 --> 00:21:39,480
8819

561
00:21:39,600 --> 00:21:40,480
yeah

562
00:21:40,480 --> 00:21:42,720
next

563
00:21:43,520 --> 00:21:45,600
so question four is about a tank

564
00:21:45,600 --> 00:21:47,679
retriever skill actually

565
00:21:47,679 --> 00:21:49,679
i think this question

566
00:21:49,679 --> 00:21:52,559
also relates to the question two

567
00:21:52,559 --> 00:21:54,640
uh uh

568
00:21:54,640 --> 00:21:55,679
actually

569
00:21:55,679 --> 00:21:56,799
we

570
00:21:56,799 --> 00:21:59,039
in current

571
00:21:59,039 --> 00:22:01,280
version actually we we think that we can

572
00:22:01,280 --> 00:22:03,600
use a standard protocol operation like

573
00:22:03,600 --> 00:22:06,480
get get config data to retrieve the tag

574
00:22:06,480 --> 00:22:10,000
and we use a standard field operation so

575
00:22:10,000 --> 00:22:10,880
we

576
00:22:10,880 --> 00:22:13,280
have no intention to extend a filter

577
00:22:13,280 --> 00:22:16,240
operation for tag retriever so that we

578
00:22:16,240 --> 00:22:17,520
will not

579
00:22:17,520 --> 00:22:19,120
use as a

580
00:22:19,120 --> 00:22:21,440
special selection filter

581
00:22:21,440 --> 00:22:23,760
so we clarify this and

582
00:22:23,760 --> 00:22:27,039
secondly actually we have two type of

583
00:22:27,039 --> 00:22:30,320
tag schema level tag instance level type

584
00:22:30,320 --> 00:22:32,559
so for schema level tag

585
00:22:32,559 --> 00:22:35,360
uh system only at one entry in the node

586
00:22:35,360 --> 00:22:37,120
so the frequency

587
00:22:37,120 --> 00:22:39,840
uh so tag retrieval scalability is not a

588
00:22:39,840 --> 00:22:41,760
big issue but for

589
00:22:41,760 --> 00:22:43,840
instance level tag

590
00:22:43,840 --> 00:22:46,640
actually client can use like edit config

591
00:22:46,640 --> 00:22:49,039
to add a tag or remove the tag

592
00:22:49,039 --> 00:22:50,960
so the number of the tag

593
00:22:50,960 --> 00:22:52,720
the client manager is controlled by the

594
00:22:52,720 --> 00:22:54,960
client itself so

595
00:22:54,960 --> 00:22:57,360
i think the scalability

596
00:22:57,360 --> 00:22:59,200
uh still can be uh

597
00:22:59,200 --> 00:23:02,880
controlled actually so here we also

598
00:23:02,880 --> 00:23:06,080
uh discuss uh about you know this

599
00:23:06,080 --> 00:23:07,840
instance can be tagged with the

600
00:23:07,840 --> 00:23:09,760
different tags so

601
00:23:09,760 --> 00:23:12,400
uh so this tag actually by design cannot

602
00:23:12,400 --> 00:23:14,159
be retrievable

603
00:23:14,159 --> 00:23:17,520
uh every for example for instance

604
00:23:17,520 --> 00:23:20,700
that is tagged with a different

605
00:23:20,700 --> 00:23:23,759
[Music]

606
00:23:27,679 --> 00:23:28,799
rob wilson

607
00:23:28,799 --> 00:23:30,880
so i just got a quick question on the

608
00:23:30,880 --> 00:23:34,480
first one about um getting data

609
00:23:34,480 --> 00:23:35,600
and you're saying you're going to use

610
00:23:35,600 --> 00:23:38,159
xpath filter for as the operation to

611
00:23:38,159 --> 00:23:40,720
basically select to just return data

612
00:23:40,720 --> 00:23:43,760
with a particular tag set is that right

613
00:23:43,760 --> 00:23:45,360
yeah and

614
00:23:45,360 --> 00:23:47,200
so why was it why did you choose to do

615
00:23:47,200 --> 00:23:48,799
it that way and not added

616
00:23:48,799 --> 00:23:50,960
an augmentation into the filter to say i

617
00:23:50,960 --> 00:23:53,919
want to just receive data that has this

618
00:23:53,919 --> 00:23:56,720
tag set what because that because to me

619
00:23:56,720 --> 00:23:58,640
xpath is a quite expensive way to do

620
00:23:58,640 --> 00:24:00,559
this whereas a filter operation that

621
00:24:00,559 --> 00:24:02,240
just said i'm just looking for the data

622
00:24:02,240 --> 00:24:04,640
that is that's marked or tagged this way

623
00:24:04,640 --> 00:24:07,440
seems a lot cheaper computationally

624
00:24:07,440 --> 00:24:09,520
for the backend servers so i was just

625
00:24:09,520 --> 00:24:11,360
wondering why you went that way and not

626
00:24:11,360 --> 00:24:13,760
the other way

627
00:24:14,320 --> 00:24:17,679
uh actually we as we clarify we

628
00:24:17,679 --> 00:24:20,240
just try to use a standard selection

629
00:24:20,240 --> 00:24:22,320
filter we don't make the changes so we

630
00:24:22,320 --> 00:24:24,480
think we can go this way but

631
00:24:24,480 --> 00:24:26,640
at the complexity

632
00:24:26,640 --> 00:24:28,000
uh

633
00:24:28,000 --> 00:24:29,279
we

634
00:24:29,279 --> 00:24:30,400
so

635
00:24:30,400 --> 00:24:32,880
actually we we we use this kind of tag

636
00:24:32,880 --> 00:24:34,159
actually

637
00:24:34,159 --> 00:24:35,200
uh

638
00:24:35,200 --> 00:24:37,440
you know

639
00:24:37,440 --> 00:24:39,919
uh to capture the the the

640
00:24:39,919 --> 00:24:41,559
some of the common

641
00:24:41,559 --> 00:24:44,880
characters uh data actually

642
00:24:44,880 --> 00:24:46,559
uh

643
00:24:46,559 --> 00:24:48,640
i

644
00:24:48,640 --> 00:24:50,960
so what what do you suggest uh so so my

645
00:24:50,960 --> 00:24:52,640
suggestion is i think you're saying

646
00:24:52,640 --> 00:24:54,880
you're gonna use xpath i i guess it's

647
00:24:54,880 --> 00:24:56,240
doing with attributes or something to

648
00:24:56,240 --> 00:24:57,840
filter the data and the attributes to

649
00:24:57,840 --> 00:24:59,840
check against the tag but i always see

650
00:24:59,840 --> 00:25:01,200
the x-path

651
00:25:01,200 --> 00:25:02,480
filtering is quite an expensive

652
00:25:02,480 --> 00:25:04,320
operation and aren't sure necessarily

653
00:25:04,320 --> 00:25:06,240
whether all implementations support that

654
00:25:06,240 --> 00:25:07,679
or they just support subtree filters i'm

655
00:25:07,679 --> 00:25:08,720
not sure how you do with the subtree

656
00:25:08,720 --> 00:25:09,840
filter

657
00:25:09,840 --> 00:25:11,600
whereas if you looked look at like the

658
00:25:11,600 --> 00:25:14,240
nmd nmda

659
00:25:14,240 --> 00:25:16,880
netconf extensions they augmented like

660
00:25:16,880 --> 00:25:19,360
the get data operation had new fields

661
00:25:19,360 --> 00:25:20,720
new options for

662
00:25:20,720 --> 00:25:23,279
like limiting the depth of the

663
00:25:23,279 --> 00:25:27,200
now today to be returned or filter it on

664
00:25:27,200 --> 00:25:29,039
uh some um of things like the origin

665
00:25:29,039 --> 00:25:31,039
metadata and i was wondering here

666
00:25:31,039 --> 00:25:32,640
whether that would be another option to

667
00:25:32,640 --> 00:25:35,279
have another augmentation to that to say

668
00:25:35,279 --> 00:25:37,840
filter on these tags so we just pull out

669
00:25:37,840 --> 00:25:39,679
the data that has that tag set or maybe

670
00:25:39,679 --> 00:25:41,120
the descendant data

671
00:25:41,120 --> 00:25:43,440
that has a tag set rather than using the

672
00:25:43,440 --> 00:25:44,640
xpath

673
00:25:44,640 --> 00:25:46,960
mechanism

674
00:25:46,960 --> 00:25:50,640
yeah we don't use xpath maxim to to get

675
00:25:50,640 --> 00:25:51,520
together

676
00:25:51,520 --> 00:25:53,200
actually these

677
00:25:53,200 --> 00:25:54,240
just

678
00:25:54,240 --> 00:25:56,320
you know you can use this this kind of

679
00:25:56,320 --> 00:25:57,840
standard operation to get the data you

680
00:25:57,840 --> 00:25:59,600
can do the second

681
00:25:59,600 --> 00:26:01,520
for your for example client get all the

682
00:26:01,520 --> 00:26:05,200
data they can do the second uh

683
00:26:05,200 --> 00:26:06,480
level uh

684
00:26:06,480 --> 00:26:07,960
local uh

685
00:26:07,960 --> 00:26:10,480
filtering uh

686
00:26:10,480 --> 00:26:11,679
so

687
00:26:11,679 --> 00:26:15,440
let me sync up with your flan okay

688
00:26:18,960 --> 00:26:21,960
next

689
00:26:28,000 --> 00:26:29,919
it's not exactly to this slide just

690
00:26:29,919 --> 00:26:32,799
generally to the

691
00:26:33,679 --> 00:26:37,039
draft you have these mask tags and if

692
00:26:37,039 --> 00:26:39,440
you can use this mask text to remove

693
00:26:39,440 --> 00:26:42,240
text that or mask text that

694
00:26:42,240 --> 00:26:46,000
that the model designer put there

695
00:26:46,000 --> 00:26:48,880
i see that as a very uncertain man is

696
00:26:48,880 --> 00:26:51,039
because maybe the module designer knew

697
00:26:51,039 --> 00:26:53,360
that this must be tagged x

698
00:26:53,360 --> 00:26:55,360
and then the user comes and says say no

699
00:26:55,360 --> 00:26:56,240
x

700
00:26:56,240 --> 00:26:59,360
i see that is a big problem

701
00:26:59,360 --> 00:27:00,240
so

702
00:27:00,240 --> 00:27:02,240
is there a priority between somehow

703
00:27:02,240 --> 00:27:04,480
these tags and masking i think that what

704
00:27:04,480 --> 00:27:06,880
the model module design decides should

705
00:27:06,880 --> 00:27:08,640
stand

706
00:27:08,640 --> 00:27:09,520
yeah

707
00:27:09,520 --> 00:27:11,120
this design actually borrowed the same

708
00:27:11,120 --> 00:27:14,240
concept from module tag obviously

709
00:27:14,240 --> 00:27:16,850
you know used to you know remove the tag

710
00:27:16,850 --> 00:27:19,360
[Music]

711
00:27:19,360 --> 00:27:22,479
i'm not sure uh

712
00:27:22,880 --> 00:27:24,960
this will make some of our use cases

713
00:27:24,960 --> 00:27:28,399
impossible if if this the

714
00:27:28,399 --> 00:27:32,320
schema tags become so unreliable

715
00:27:32,320 --> 00:27:33,200
uh

716
00:27:33,200 --> 00:27:34,320
level attack

717
00:27:34,320 --> 00:27:36,640
actually it's kind of static

718
00:27:36,640 --> 00:27:38,960
yes but if they can mask them

719
00:27:38,960 --> 00:27:41,279
then they are not static anymore

720
00:27:41,279 --> 00:27:43,679
isn't it

721
00:27:47,039 --> 00:27:50,000
yeah um

722
00:27:51,840 --> 00:27:53,600
perhaps discuss it on the list yeah

723
00:27:53,600 --> 00:27:55,919
maybe yeah we can take a to the list for

724
00:27:55,919 --> 00:27:59,200
for discussing this yes thank you

725
00:27:59,200 --> 00:28:00,080
um

726
00:28:00,080 --> 00:28:00,880
next

727
00:28:00,880 --> 00:28:03,760
question

728
00:28:03,760 --> 00:28:05,840
yeah next is about the module writer

729
00:28:05,840 --> 00:28:07,600
guidance actually there's two relevant

730
00:28:07,600 --> 00:28:08,640
questions

731
00:28:08,640 --> 00:28:09,679
one is

732
00:28:09,679 --> 00:28:11,360
you know we define the maximum in this

733
00:28:11,360 --> 00:28:12,880
chapter so how these relate to the

734
00:28:12,880 --> 00:28:14,640
metadata annotation

735
00:28:14,640 --> 00:28:16,720
mechanism how this how this can be

736
00:28:16,720 --> 00:28:19,360
differentiated from metadata allocation

737
00:28:19,360 --> 00:28:20,720
annotation

738
00:28:20,720 --> 00:28:22,640
the other question is how this

739
00:28:22,640 --> 00:28:24,640
can be different from the simple young

740
00:28:24,640 --> 00:28:26,960
extension

741
00:28:26,960 --> 00:28:30,080
statements for things that are static so

742
00:28:30,080 --> 00:28:32,799
we compare the metadata annotation with

743
00:28:32,799 --> 00:28:34,880
uh

744
00:28:34,880 --> 00:28:36,399
with the mechanism we define in this

745
00:28:36,399 --> 00:28:38,320
chart actually we think metadata

746
00:28:38,320 --> 00:28:39,919
annotation actually

747
00:28:39,919 --> 00:28:42,399
usually are tied with a given

748
00:28:42,399 --> 00:28:44,720
date node instance so

749
00:28:44,720 --> 00:28:46,720
uh usually the value of the metadata

750
00:28:46,720 --> 00:28:48,960
annotation is assigned by the server if

751
00:28:48,960 --> 00:28:51,360
we don't worry for origin value it can

752
00:28:51,360 --> 00:28:52,880
be assigned by a server sent to the

753
00:28:52,880 --> 00:28:54,799
client that you indicated the origin

754
00:28:54,799 --> 00:28:58,080
particular data instance but for no tag

755
00:28:58,080 --> 00:28:59,760
actually in

756
00:28:59,760 --> 00:29:02,080
defining our job actually retrieval

757
00:29:02,080 --> 00:29:03,360
essentially

758
00:29:03,360 --> 00:29:04,240
by

759
00:29:04,240 --> 00:29:07,279
they know the tag module so it is

760
00:29:07,279 --> 00:29:09,279
actually created or removed by the

761
00:29:09,279 --> 00:29:10,880
system client

762
00:29:10,880 --> 00:29:14,240
so here we give example you can tag the

763
00:29:14,240 --> 00:29:16,000
schema sheet to

764
00:29:16,000 --> 00:29:17,279
to uh

765
00:29:17,279 --> 00:29:18,640
to to to

766
00:29:18,640 --> 00:29:21,600
apply to a whole list so this

767
00:29:21,600 --> 00:29:23,600
can be differentiated

768
00:29:23,600 --> 00:29:25,840
so the second is how this differentiates

769
00:29:25,840 --> 00:29:27,520
from the young extension statements

770
00:29:27,520 --> 00:29:28,559
actually

771
00:29:28,559 --> 00:29:29,679
we

772
00:29:29,679 --> 00:29:31,919
also give analysis actually

773
00:29:31,919 --> 00:29:32,640
for

774
00:29:32,640 --> 00:29:34,720
instance level tag and schema level

775
00:29:34,720 --> 00:29:36,480
attack for instance level attack

776
00:29:36,480 --> 00:29:37,600
actually

777
00:29:37,600 --> 00:29:40,240
this yearly only tags they don't know

778
00:29:40,240 --> 00:29:41,200
they are

779
00:29:41,200 --> 00:29:43,360
rather than actually statement or

780
00:29:43,360 --> 00:29:47,520
data modules so so we don't use the

781
00:29:47,520 --> 00:29:50,480
node tag to tag a revision statement in

782
00:29:50,480 --> 00:29:54,559
the data module but uh

783
00:29:54,559 --> 00:29:57,120
but definitely actually we can provide

784
00:29:57,120 --> 00:29:58,320
some of the

785
00:29:58,320 --> 00:30:01,360
additional ordinary information

786
00:30:01,360 --> 00:30:03,600
or they know the property we give

787
00:30:03,600 --> 00:30:05,520
example in appendix

788
00:30:05,520 --> 00:30:08,320
and a schema level tag actually this can

789
00:30:08,320 --> 00:30:10,240
be deleted by the

790
00:30:10,240 --> 00:30:11,279
uh

791
00:30:11,279 --> 00:30:13,279
they know tag module and remove from

792
00:30:13,279 --> 00:30:15,600
operational they store but such kind of

793
00:30:15,600 --> 00:30:17,520
tag because it's kind of static that

794
00:30:17,520 --> 00:30:19,919
still exists in a young module so this

795
00:30:19,919 --> 00:30:22,320
still can be differentiated from the

796
00:30:22,320 --> 00:30:24,880
simple young extension statements

797
00:30:24,880 --> 00:30:25,090
so

798
00:30:25,090 --> 00:30:26,320
[Music]

799
00:30:26,320 --> 00:30:27,679
yeah

800
00:30:27,679 --> 00:30:29,919
next

801
00:30:31,440 --> 00:30:33,840
so we will allow to hear all the

802
00:30:33,840 --> 00:30:37,440
comments and try to resolve this and uh

803
00:30:37,440 --> 00:30:40,559
for the next step we want to yeah

804
00:30:40,559 --> 00:30:43,200
hear guidance from chairs

805
00:30:43,200 --> 00:30:45,200
yeah i i it's there's clearly some

806
00:30:45,200 --> 00:30:47,200
comments in the room on the list it

807
00:30:47,200 --> 00:30:48,720
wasn't clear to me that jorgen's

808
00:30:48,720 --> 00:30:50,480
comments were all addressed

809
00:30:50,480 --> 00:30:53,520
and i know the last uh he did not send

810
00:30:53,520 --> 00:30:55,919
any comments after the last update so it

811
00:30:55,919 --> 00:30:57,360
would be good to make sure that his

812
00:30:57,360 --> 00:30:58,720
comments are addressed as well as any

813
00:30:58,720 --> 00:31:00,399
other comments that came in

814
00:31:00,399 --> 00:31:02,559
as part of that discussion

815
00:31:02,559 --> 00:31:03,679
and it sounds like you have a couple of

816
00:31:03,679 --> 00:31:05,679
new comments we really have to

817
00:31:05,679 --> 00:31:07,919
close those all out before we can

818
00:31:07,919 --> 00:31:10,000
uh yeah yeah we we take this offline

819
00:31:10,000 --> 00:31:12,240
with jugang and uh have several

820
00:31:12,240 --> 00:31:13,919
iterations and

821
00:31:13,919 --> 00:31:15,679
the the latest version he hasn't

822
00:31:15,679 --> 00:31:18,480
confirmed all the changes so we will uh

823
00:31:18,480 --> 00:31:20,080
you know ping that we're gonna again

824
00:31:20,080 --> 00:31:21,679
take it to the list together his

825
00:31:21,679 --> 00:31:24,080
conversation yeah yeah we are coming up

826
00:31:24,080 --> 00:31:25,360
on august and that can be tough for a

827
00:31:25,360 --> 00:31:27,360
lot of people but maybe we should if we

828
00:31:27,360 --> 00:31:28,799
if we're not resolved by the end of

829
00:31:28,799 --> 00:31:31,440
august we probably will schedule a

830
00:31:31,440 --> 00:31:32,399
interim

831
00:31:32,399 --> 00:31:34,799
to try to close it to force

832
00:31:34,799 --> 00:31:36,640
all the issues to be closed but look for

833
00:31:36,640 --> 00:31:38,000
the new emails

834
00:31:38,000 --> 00:31:39,279
sounds like you're going to get a couple

835
00:31:39,279 --> 00:31:41,200
from the room yeah thank you very much

836
00:31:41,200 --> 00:31:44,159
yes thank you thank you

837
00:31:44,159 --> 00:31:47,559
next up

838
00:31:49,519 --> 00:31:51,120
so we're going to do the overview of the

839
00:31:51,120 --> 00:31:53,360
yang versioning discussion we have 45

840
00:31:53,360 --> 00:31:55,440
minutes on this and i was just going to

841
00:31:55,440 --> 00:31:57,279
give you each 15 unless you want to do

842
00:31:57,279 --> 00:32:00,240
something different

843
00:32:00,240 --> 00:32:02,000
might not take that long we'll see we'll

844
00:32:02,000 --> 00:32:04,159
find out uh hello everyone yes this is

845
00:32:04,159 --> 00:32:05,200
the um

846
00:32:05,200 --> 00:32:08,320
beginning of the uh three pieces on the

847
00:32:08,320 --> 00:32:10,320
young versioning solution update

848
00:32:10,320 --> 00:32:13,879
uh next slide please

849
00:32:14,240 --> 00:32:15,760
so we're going to have a little overview

850
00:32:15,760 --> 00:32:18,480
for myself um then we'll go on to

851
00:32:18,480 --> 00:32:20,799
individual drafts with balash and joe

852
00:32:20,799 --> 00:32:23,200
next slide

853
00:32:23,840 --> 00:32:25,679
so a quick recap on the

854
00:32:25,679 --> 00:32:29,200
versioning solution um

855
00:32:29,200 --> 00:32:31,120
the complete solution consists of five

856
00:32:31,120 --> 00:32:32,480
drafts

857
00:32:32,480 --> 00:32:34,480
updated young model revision handling

858
00:32:34,480 --> 00:32:37,360
module semantic version number scheme

859
00:32:37,360 --> 00:32:40,080
uh yang schema comparison tooling

860
00:32:40,080 --> 00:32:42,799
version yang packages my favorite

861
00:32:42,799 --> 00:32:44,399
protocol operations for package version

862
00:32:44,399 --> 00:32:46,240
selection

863
00:32:46,240 --> 00:32:49,279
and the working drafts can be found

864
00:32:49,279 --> 00:32:51,919
on github at the moment with all the

865
00:32:51,919 --> 00:32:57,000
issues logged there next slide please

866
00:32:57,600 --> 00:32:59,440
uh and just a quick wrap though if

867
00:32:59,440 --> 00:33:01,039
you're having a look at uh wondering

868
00:33:01,039 --> 00:33:02,720
where some of these drafts are those are

869
00:33:02,720 --> 00:33:06,399
the urls next slide please

870
00:33:07,120 --> 00:33:10,080
so um a a brief overview of what we're

871
00:33:10,080 --> 00:33:11,919
doing on the weekly versioning calls at

872
00:33:11,919 --> 00:33:14,000
the moment um authors and interesting

873
00:33:14,000 --> 00:33:16,399
parties we are meeting every single week

874
00:33:16,399 --> 00:33:18,080
these meetings are open to all it's not

875
00:33:18,080 --> 00:33:21,440
a fixed list of attendees

876
00:33:21,440 --> 00:33:23,679
we're having regular participation from

877
00:33:23,679 --> 00:33:25,679
five different companies um

878
00:33:25,679 --> 00:33:26,960
it is

879
00:33:26,960 --> 00:33:29,440
quite vendor heavy um i believe there's

880
00:33:29,440 --> 00:33:31,840
only myself and maybe one other who who

881
00:33:31,840 --> 00:33:34,080
represents an operator

882
00:33:34,080 --> 00:33:34,799
so

883
00:33:34,799 --> 00:33:37,279
if you are interested in

884
00:33:37,279 --> 00:33:38,880
versioning package versioning or

885
00:33:38,880 --> 00:33:40,960
anything of the sort please do consider

886
00:33:40,960 --> 00:33:42,799
coming and joining in

887
00:33:42,799 --> 00:33:44,720
from those backgrounds

888
00:33:44,720 --> 00:33:46,159
we're obviously bringing key issues back

889
00:33:46,159 --> 00:33:47,919
to the working group mailing list

890
00:33:47,919 --> 00:33:49,200
and

891
00:33:49,200 --> 00:33:50,480
yeah the times are there at the moment

892
00:33:50,480 --> 00:33:52,720
so of course if you'd like to

893
00:33:52,720 --> 00:33:55,200
join us in and you can and you're able

894
00:33:55,200 --> 00:33:57,440
on those time zones um please do next

895
00:33:57,440 --> 00:34:00,080
slide thank you

896
00:34:02,159 --> 00:34:04,559
to dive into it a little bit more

897
00:34:04,559 --> 00:34:06,720
deeply um the main focus of the weekly

898
00:34:06,720 --> 00:34:08,560
meetings at the moment

899
00:34:08,560 --> 00:34:10,560
number one is processing the feedback

900
00:34:10,560 --> 00:34:12,079
from the last call on the module

901
00:34:12,079 --> 00:34:13,839
versioning and yang some of the drafts

902
00:34:13,839 --> 00:34:16,000
we've had a lot of complex discussions

903
00:34:16,000 --> 00:34:17,599
around this

904
00:34:17,599 --> 00:34:20,719
it's it has taken quite a bit of

905
00:34:20,719 --> 00:34:22,800
debate and a number of the the weekly

906
00:34:22,800 --> 00:34:24,960
calls have been taken up with this

907
00:34:24,960 --> 00:34:25,839
um

908
00:34:25,839 --> 00:34:27,280
we're in the process at the moment of

909
00:34:27,280 --> 00:34:29,280
addressing each of those and posting

910
00:34:29,280 --> 00:34:31,280
responses back to the mailing list

911
00:34:31,280 --> 00:34:33,280
and there will be some updates to the

912
00:34:33,280 --> 00:34:36,159
drafts required quite likely

913
00:34:36,159 --> 00:34:38,000
the second main piece of work at the

914
00:34:38,000 --> 00:34:39,199
moment is

915
00:34:39,199 --> 00:34:41,119
beginning to look at the schema

916
00:34:41,119 --> 00:34:43,280
comparison draft

917
00:34:43,280 --> 00:34:45,119
the last call on module versioning

918
00:34:45,119 --> 00:34:46,159
drafts

919
00:34:46,159 --> 00:34:47,760
made us realize that the schema

920
00:34:47,760 --> 00:34:51,199
comparison is fairly integral

921
00:34:51,199 --> 00:34:53,199
we may move some parts of the schema

922
00:34:53,199 --> 00:34:55,520
comparison into module versioning

923
00:34:55,520 --> 00:34:57,520
per element non-breaking changes or

924
00:34:57,520 --> 00:35:00,960
breaking changes takes for example

925
00:35:00,960 --> 00:35:02,800
we haven't yet looked at packages or

926
00:35:02,800 --> 00:35:04,720
whole version selection drafts

927
00:35:04,720 --> 00:35:07,520
um i i believe uh next slide please i

928
00:35:07,520 --> 00:35:09,839
think there's a note on here that we are

929
00:35:09,839 --> 00:35:12,960
heading in that direction

930
00:35:13,520 --> 00:35:16,000
so our next steps finish processing all

931
00:35:16,000 --> 00:35:17,599
the comments received on those two

932
00:35:17,599 --> 00:35:19,440
drafts

933
00:35:19,440 --> 00:35:21,200
there are quite a few as

934
00:35:21,200 --> 00:35:23,119
i've mentioned get all those back get

935
00:35:23,119 --> 00:35:26,160
the drafts updated

936
00:35:27,280 --> 00:35:28,839
we are expecting

937
00:35:28,839 --> 00:35:31,760
um to do another working group last call

938
00:35:31,760 --> 00:35:33,760
for

939
00:35:33,760 --> 00:35:35,440
both of those drafts with the intention

940
00:35:35,440 --> 00:35:38,240
to bring them to rfc

941
00:35:38,240 --> 00:35:40,160
we won't wait any longer for the

942
00:35:40,160 --> 00:35:43,119
remaining three drafts

943
00:35:43,119 --> 00:35:45,280
comparison packages and selection

944
00:35:45,280 --> 00:35:47,760
um the work is taking quite a bit a lot

945
00:35:47,760 --> 00:35:49,520
quite a lot of time to converge but the

946
00:35:49,520 --> 00:35:51,680
the array of is of course asking us for

947
00:35:51,680 --> 00:35:53,839
when the drafts will be completed um

948
00:35:53,839 --> 00:35:56,320
which has um i think kick things in into

949
00:35:56,320 --> 00:36:00,240
higher gear and of course as i mentioned

950
00:36:00,240 --> 00:36:02,240
more work um

951
00:36:02,240 --> 00:36:04,560
will then continue on schema comparison

952
00:36:04,560 --> 00:36:06,800
packages and version selection

953
00:36:06,800 --> 00:36:09,520
next slide please

954
00:36:09,680 --> 00:36:11,359
yeah i think that's the end of that part

955
00:36:11,359 --> 00:36:12,560
so

956
00:36:12,560 --> 00:36:15,599
we'll move on to was it blush next i

957
00:36:15,599 --> 00:36:17,839
think

958
00:36:21,280 --> 00:36:24,800
yeah that was far less than 15 minutes

959
00:36:24,800 --> 00:36:27,119
okay

960
00:36:29,280 --> 00:36:31,440
part of this weekly group and part of

961
00:36:31,440 --> 00:36:34,960
the auto group next

962
00:36:36,000 --> 00:36:38,000
we had one last call

963
00:36:38,000 --> 00:36:40,480
with uh some interesting comments and

964
00:36:40,480 --> 00:36:42,079
some basic comments

965
00:36:42,079 --> 00:36:44,240
we released a new version but that's

966
00:36:44,240 --> 00:36:46,320
mostly just to keep it up to date so not

967
00:36:46,320 --> 00:36:48,560
to let it expire

968
00:36:48,560 --> 00:36:50,720
and these are the main issues heavily

969
00:36:50,720 --> 00:36:52,400
with the first one

970
00:36:52,400 --> 00:36:55,520
whether we should have uh

971
00:36:55,520 --> 00:36:58,640
data node change on on the module level

972
00:36:58,640 --> 00:37:00,880
or is it enough to have or is it better

973
00:37:00,880 --> 00:37:02,640
to have it on the individual data node

974
00:37:02,640 --> 00:37:04,720
or schema node level

975
00:37:04,720 --> 00:37:08,040
next please

976
00:37:08,079 --> 00:37:11,920
let's catch us doing it okay

977
00:37:11,920 --> 00:37:14,480
so uh we got the

978
00:37:14,480 --> 00:37:16,720
uh

979
00:37:16,880 --> 00:37:19,680
module versioning marking that says the

980
00:37:19,680 --> 00:37:22,079
change is not compatible

981
00:37:22,079 --> 00:37:24,400
and it indica

982
00:37:24,400 --> 00:37:25,920
indicates so it's basically just

983
00:37:25,920 --> 00:37:27,839
indicates it's not compatible and if you

984
00:37:27,839 --> 00:37:31,520
have sembler and a revision label for it

985
00:37:31,520 --> 00:37:33,440
that would also give you an indication

986
00:37:33,440 --> 00:37:35,280
whether changes are

987
00:37:35,280 --> 00:37:37,839
compatible non-compatible or maybe just

988
00:37:37,839 --> 00:37:40,720
editorial

989
00:37:42,240 --> 00:37:45,040
and we could put these we our plan was

990
00:37:45,040 --> 00:37:46,960
to put this information on the module

991
00:37:46,960 --> 00:37:48,839
level the revision

992
00:37:48,839 --> 00:37:51,920
information we got a

993
00:37:51,920 --> 00:37:53,839
proposal that it's better to put it on

994
00:37:53,839 --> 00:37:56,160
the individual node level

995
00:37:56,160 --> 00:37:58,160
and we agreed that

996
00:37:58,160 --> 00:37:59,839
just quick it might be better if you

997
00:37:59,839 --> 00:38:01,599
move the mic a little closer for the

998
00:38:01,599 --> 00:38:03,040
remote people they're not hearing you

999
00:38:03,040 --> 00:38:07,520
too well or raise it or something

1000
00:38:14,880 --> 00:38:15,599
so

1001
00:38:15,599 --> 00:38:17,680
the waters or the weekly groups

1002
00:38:17,680 --> 00:38:20,560
consensus is that both module level and

1003
00:38:20,560 --> 00:38:22,960
node level are valuable but they really

1004
00:38:22,960 --> 00:38:26,960
serve different purposes next

1005
00:38:31,119 --> 00:38:33,119
just a quick rack up this is what we

1006
00:38:33,119 --> 00:38:35,680
originally planned put the marking

1007
00:38:35,680 --> 00:38:37,839
into the revision information this is

1008
00:38:37,839 --> 00:38:40,400
basically a node level statement

1009
00:38:40,400 --> 00:38:42,720
next

1010
00:38:43,599 --> 00:38:45,359
and this is

1011
00:38:45,359 --> 00:38:46,560
how we

1012
00:38:46,560 --> 00:38:48,560
believe a

1013
00:38:48,560 --> 00:38:51,040
node level or schema node level

1014
00:38:51,040 --> 00:38:52,960
statement would look like

1015
00:38:52,960 --> 00:38:56,320
this indicates that one leaf or one

1016
00:38:56,320 --> 00:38:59,359
container or one item is has changed it

1017
00:38:59,359 --> 00:39:01,520
indicates when it's changed so you can

1018
00:39:01,520 --> 00:39:03,359
track back that you know with the

1019
00:39:03,359 --> 00:39:05,359
revision statements and the

1020
00:39:05,359 --> 00:39:07,599
development steps

1021
00:39:07,599 --> 00:39:11,920
and maybe have some description also

1022
00:39:13,280 --> 00:39:16,400
this uh these two are not

1023
00:39:16,400 --> 00:39:18,880
either or they can the node and the

1024
00:39:18,880 --> 00:39:20,400
module level

1025
00:39:20,400 --> 00:39:21,280
can

1026
00:39:21,280 --> 00:39:22,240
uh

1027
00:39:22,240 --> 00:39:26,000
live side by side and help each other

1028
00:39:26,000 --> 00:39:26,960
maybe

1029
00:39:26,960 --> 00:39:29,119
editorial change can also be marked but

1030
00:39:29,119 --> 00:39:30,880
that's open question

1031
00:39:30,880 --> 00:39:33,200
next

1032
00:39:35,040 --> 00:39:36,880
so the or

1033
00:39:36,880 --> 00:39:39,680
alternative proposal was that we have to

1034
00:39:39,680 --> 00:39:43,040
put have to mark every nbc change

1035
00:39:43,040 --> 00:39:45,920
non-backward compatible change

1036
00:39:45,920 --> 00:39:46,720
uh

1037
00:39:46,720 --> 00:39:49,200
without some annotation

1038
00:39:49,200 --> 00:39:50,880
and that means that there if there's no

1039
00:39:50,880 --> 00:39:53,040
annotation then this is a

1040
00:39:53,040 --> 00:39:54,560
not changed

1041
00:39:54,560 --> 00:39:55,760
or changed change the backward

1042
00:39:55,760 --> 00:39:58,240
compatible or editorial

1043
00:39:58,240 --> 00:39:59,040
uh

1044
00:39:59,040 --> 00:39:59,920
way

1045
00:39:59,920 --> 00:40:02,320
and the consumers of the module will

1046
00:40:02,320 --> 00:40:03,359
have to

1047
00:40:03,359 --> 00:40:06,160
look through the scan the module to find

1048
00:40:06,160 --> 00:40:08,160
what kind of changes happened in the

1049
00:40:08,160 --> 00:40:10,800
last time

1050
00:40:10,800 --> 00:40:15,119
we think that this has problems

1051
00:40:15,359 --> 00:40:18,000
we first of all it might end up with a

1052
00:40:18,000 --> 00:40:19,359
lot of

1053
00:40:19,359 --> 00:40:22,400
such annotation and these annotations

1054
00:40:22,400 --> 00:40:24,800
and we have to remember that some other

1055
00:40:24,800 --> 00:40:28,480
groups sdos 3gpp or on

1056
00:40:28,480 --> 00:40:31,280
i think a broadband forum as well

1057
00:40:31,280 --> 00:40:34,640
they release modules multiple times a

1058
00:40:34,640 --> 00:40:36,400
year

1059
00:40:36,400 --> 00:40:38,640
and that means that they will have more

1060
00:40:38,640 --> 00:40:40,880
changes they will have more nbc changes

1061
00:40:40,880 --> 00:40:43,200
and that might clutter up the module and

1062
00:40:43,200 --> 00:40:44,800
it will be difficult to find the

1063
00:40:44,800 --> 00:40:48,400
containers between all these annotations

1064
00:40:48,400 --> 00:40:51,520
also can we convince all these groups

1065
00:40:51,520 --> 00:40:54,319
to use this it's not

1066
00:40:54,319 --> 00:40:55,599
not sure

1067
00:40:55,599 --> 00:40:58,400
and also how do you handle deleted nodes

1068
00:40:58,400 --> 00:41:00,240
if the node is deleted you can't put the

1069
00:41:00,240 --> 00:41:02,560
marking that it is in

1070
00:41:02,560 --> 00:41:07,040
nbc change on something that's not there

1071
00:41:07,040 --> 00:41:08,960
and also uh

1072
00:41:08,960 --> 00:41:10,800
we see that it is a it might be a

1073
00:41:10,800 --> 00:41:11,760
problem

1074
00:41:11,760 --> 00:41:13,200
that what if

1075
00:41:13,200 --> 00:41:15,599
the author forgets to mark something as

1076
00:41:15,599 --> 00:41:17,040
ndc change

1077
00:41:17,040 --> 00:41:19,359
that would automatically mean something

1078
00:41:19,359 --> 00:41:21,839
it might be just a mistake but now it

1079
00:41:21,839 --> 00:41:24,720
became a backward compatible change

1080
00:41:24,720 --> 00:41:27,279
next please

1081
00:41:28,000 --> 00:41:28,800
so

1082
00:41:28,800 --> 00:41:31,040
the weekly group came to an idea

1083
00:41:31,040 --> 00:41:34,000
consensus that

1084
00:41:34,319 --> 00:41:37,200
in some cases where node data change

1085
00:41:37,200 --> 00:41:39,680
notifications are good we should use

1086
00:41:39,680 --> 00:41:41,280
them

1087
00:41:41,280 --> 00:41:43,680
and the authors may add them any any

1088
00:41:43,680 --> 00:41:44,960
place

1089
00:41:44,960 --> 00:41:46,960
but we should not say that if it's

1090
00:41:46,960 --> 00:41:49,280
missing that it implies something if you

1091
00:41:49,280 --> 00:41:52,160
have a list of 20 leaves and you forget

1092
00:41:52,160 --> 00:41:53,839
the 15th

1093
00:41:53,839 --> 00:41:54,720
to

1094
00:41:54,720 --> 00:41:57,119
forget to annotate the 15th that doesn't

1095
00:41:57,119 --> 00:41:58,960
mean you mean something that means that

1096
00:41:58,960 --> 00:42:01,119
you were tired and you forgot one from

1097
00:42:01,119 --> 00:42:03,440
20.

1098
00:42:03,440 --> 00:42:05,680
so tooling should be used as much as

1099
00:42:05,680 --> 00:42:07,200
possible to

1100
00:42:07,200 --> 00:42:10,960
instead of these individual annotations

1101
00:42:10,960 --> 00:42:16,040
and that would also mean less text next

1102
00:42:16,960 --> 00:42:20,000
so mostly tooling can apply the uh

1103
00:42:20,000 --> 00:42:23,200
versioning and other nbc rules that are

1104
00:42:23,200 --> 00:42:27,040
already defined in the rf rfc and in the

1105
00:42:27,040 --> 00:42:29,599
versioning draft

1106
00:42:29,599 --> 00:42:32,480
uh it is not reliable everywhere because

1107
00:42:32,480 --> 00:42:34,800
of multiple reasons

1108
00:42:34,800 --> 00:42:37,119
one is that yep sometimes it's just not

1109
00:42:37,119 --> 00:42:39,359
possible to find out if it's the plain

1110
00:42:39,359 --> 00:42:40,960
english text that the description

1111
00:42:40,960 --> 00:42:43,440
changed you might or might that fight or

1112
00:42:43,440 --> 00:42:44,400
might not be

1113
00:42:44,400 --> 00:42:46,160
backward compatible

1114
00:42:46,160 --> 00:42:48,400
and for some complex statements like

1115
00:42:48,400 --> 00:42:50,079
regular expression

1116
00:42:50,079 --> 00:42:52,400
when or a must statement figuring out

1117
00:42:52,400 --> 00:42:54,400
whether a regular expression changes

1118
00:42:54,400 --> 00:42:56,800
compatible or not that's very tough

1119
00:42:56,800 --> 00:42:58,800
probably tools will not go into that

1120
00:42:58,800 --> 00:43:00,640
details

1121
00:43:00,640 --> 00:43:02,880
so the authors will be allowed to mark

1122
00:43:02,880 --> 00:43:04,880
anything and and

1123
00:43:04,880 --> 00:43:06,800
they might say that yes this regular

1124
00:43:06,800 --> 00:43:08,880
expression change is actually compatible

1125
00:43:08,880 --> 00:43:11,440
or it is actually non-compatible

1126
00:43:11,440 --> 00:43:13,839
next

1127
00:43:16,400 --> 00:43:17,200
yeah

1128
00:43:17,200 --> 00:43:20,160
so where should we

1129
00:43:20,160 --> 00:43:21,839
we agree that

1130
00:43:21,839 --> 00:43:23,839
this pair node

1131
00:43:23,839 --> 00:43:26,880
annotations are good and useful

1132
00:43:26,880 --> 00:43:29,040
in a limited way so not for every node

1133
00:43:29,040 --> 00:43:31,599
but for nodes where we can't decide or a

1134
00:43:31,599 --> 00:43:33,280
tool can't decide

1135
00:43:33,280 --> 00:43:36,079
whether it is backward compatible or not

1136
00:43:36,079 --> 00:43:38,160
we have to define it somewhere we said

1137
00:43:38,160 --> 00:43:40,720
that we should put it in some draft the

1138
00:43:40,720 --> 00:43:42,720
idea originally was to leave it to the

1139
00:43:42,720 --> 00:43:45,440
schema compression draft later

1140
00:43:45,440 --> 00:43:48,000
now the idea was to at least define the

1141
00:43:48,000 --> 00:43:50,720
extension itself

1142
00:43:50,720 --> 00:43:51,920
in the

1143
00:43:51,920 --> 00:43:54,800
module versioning draft and then two

1144
00:43:54,800 --> 00:43:56,960
defaults and how it is

1145
00:43:56,960 --> 00:43:59,119
exactly used that could be left

1146
00:43:59,119 --> 00:44:00,720
when we define how the two actually

1147
00:44:00,720 --> 00:44:02,240
works

1148
00:44:02,240 --> 00:44:02,960
but

1149
00:44:02,960 --> 00:44:05,920
if we if the that would allow the author

1150
00:44:05,920 --> 00:44:08,079
to explicitly put in statements like i

1151
00:44:08,079 --> 00:44:09,760
changed the description and this is

1152
00:44:09,760 --> 00:44:11,920
actually an uncompatible change because

1153
00:44:11,920 --> 00:44:15,119
it really works differently

1154
00:44:15,119 --> 00:44:17,839
but we are not

1155
00:44:17,839 --> 00:44:19,920
decided fully there yet and

1156
00:44:19,920 --> 00:44:22,880
yes we need to be hurry up because

1157
00:44:22,880 --> 00:44:24,640
bbf already chosen

1158
00:44:24,640 --> 00:44:26,560
version scheme we don't want two other

1159
00:44:26,560 --> 00:44:28,560
groups to choose

1160
00:44:28,560 --> 00:44:30,319
versioning schemes independent of the

1161
00:44:30,319 --> 00:44:31,520
idf

1162
00:44:31,520 --> 00:44:33,839
next

1163
00:44:35,040 --> 00:44:37,040
okay then the question came up if

1164
00:44:37,040 --> 00:44:39,920
something is really and uh non-backward

1165
00:44:39,920 --> 00:44:42,079
compatible should we allow the author of

1166
00:44:42,079 --> 00:44:44,400
the draft or author of a yang module to

1167
00:44:44,400 --> 00:44:47,599
say that no this is compatible even if

1168
00:44:47,599 --> 00:44:51,040
according to rules it is not and yes we

1169
00:44:51,040 --> 00:44:52,720
see that there is a

1170
00:44:52,720 --> 00:44:55,520
there are a number of use cases

1171
00:44:55,520 --> 00:44:56,800
things like

1172
00:44:56,800 --> 00:45:00,960
that turn change where actually the the

1173
00:45:00,960 --> 00:45:04,960
value space may not even change at all

1174
00:45:04,960 --> 00:45:07,599
then evaluating these complex statements

1175
00:45:07,599 --> 00:45:09,119
the two might not be

1176
00:45:09,119 --> 00:45:11,280
able to do that it's just too much for

1177
00:45:11,280 --> 00:45:12,720
them

1178
00:45:12,720 --> 00:45:15,040
another case is when we really correct

1179
00:45:15,040 --> 00:45:16,839
mistakes what if the

1180
00:45:16,839 --> 00:45:18,400
though

1181
00:45:18,400 --> 00:45:20,560
i allowed an ip address

1182
00:45:20,560 --> 00:45:22,800
to contain three five five instead of

1183
00:45:22,800 --> 00:45:25,599
two five five yes the pattern is changed

1184
00:45:25,599 --> 00:45:27,280
incompatibly but

1185
00:45:27,280 --> 00:45:29,520
it is still

1186
00:45:29,520 --> 00:45:31,760
not a real change because the ip

1187
00:45:31,760 --> 00:45:34,960
addresses were not 355 earlier

1188
00:45:34,960 --> 00:45:37,440
and in some cases when all the clients

1189
00:45:37,440 --> 00:45:40,319
are unknown strictly for vendor modules

1190
00:45:40,319 --> 00:45:42,640
then it even an incompatible change

1191
00:45:42,640 --> 00:45:47,160
might be a don't care next

1192
00:45:49,520 --> 00:45:51,599
so that's uh

1193
00:45:51,599 --> 00:45:53,680
concludes a statement or statement about

1194
00:45:53,680 --> 00:45:56,880
this breaking proposal of the work group

1195
00:45:56,880 --> 00:46:00,000
last call that yes spare node

1196
00:46:00,000 --> 00:46:03,200
annotations are good we like them but

1197
00:46:03,200 --> 00:46:05,760
not generally and not they won't

1198
00:46:05,760 --> 00:46:07,760
replace the

1199
00:46:07,760 --> 00:46:11,200
module level annotations

1200
00:46:11,200 --> 00:46:12,839
they serve different

1201
00:46:12,839 --> 00:46:14,560
purposes and

1202
00:46:14,560 --> 00:46:16,480
both are needed

1203
00:46:16,480 --> 00:46:17,839
the next question you want to ask if

1204
00:46:17,839 --> 00:46:19,119
there's any questions on that before

1205
00:46:19,119 --> 00:46:20,960
moving on or

1206
00:46:20,960 --> 00:46:23,119
no one's come to the queue but it seems

1207
00:46:23,119 --> 00:46:25,200
like you would like some input

1208
00:46:25,200 --> 00:46:29,839
yes any questions or opinions on this

1209
00:46:30,880 --> 00:46:32,720
i think it's after lunch the energy

1210
00:46:32,720 --> 00:46:34,400
level is low

1211
00:46:34,400 --> 00:46:36,000
all right okay

1212
00:46:36,000 --> 00:46:38,319
thank you

1213
00:46:38,400 --> 00:46:40,560
the next topic that was discussed quite

1214
00:46:40,560 --> 00:46:42,560
a bit during last call is

1215
00:46:42,560 --> 00:46:44,960
this derived revision import or import

1216
00:46:44,960 --> 00:46:48,160
by derived revision

1217
00:46:48,640 --> 00:46:52,240
is it needed why is it done this way

1218
00:46:52,240 --> 00:46:54,800
what risks does it

1219
00:46:54,800 --> 00:46:58,160
carry will it is it a compatible change

1220
00:46:58,160 --> 00:47:00,319
to the original draft

1221
00:47:00,319 --> 00:47:03,040
now today we have these two methods for

1222
00:47:03,040 --> 00:47:05,359
import plain import which means anything

1223
00:47:05,359 --> 00:47:07,520
can be used it has risk

1224
00:47:07,520 --> 00:47:13,040
and actually in our own rfcs we try to

1225
00:47:13,920 --> 00:47:16,160
try to restrict what is imported using

1226
00:47:16,160 --> 00:47:18,800
comments or not comments but description

1227
00:47:18,800 --> 00:47:21,920
statements and references

1228
00:47:21,920 --> 00:47:24,480
not very good or we can have import by

1229
00:47:24,480 --> 00:47:26,480
exact revision but that means that if

1230
00:47:26,480 --> 00:47:29,680
the imported file is updated then you

1231
00:47:29,680 --> 00:47:32,079
need to update importer

1232
00:47:32,079 --> 00:47:33,520
and that's not

1233
00:47:33,520 --> 00:47:34,960
that's a big work very hard to

1234
00:47:34,960 --> 00:47:36,240
coordinate and

1235
00:47:36,240 --> 00:47:38,640
it's not a good solution which is

1236
00:47:38,640 --> 00:47:41,839
uh shown by practically no one using it

1237
00:47:41,839 --> 00:47:43,119
so i

1238
00:47:43,119 --> 00:47:46,240
scanned the all the ietf modules i think

1239
00:47:46,240 --> 00:47:48,400
i only found one usage of import by

1240
00:47:48,400 --> 00:47:50,720
exact revision

1241
00:47:50,720 --> 00:47:53,280
so we are asking for import by derived

1242
00:47:53,280 --> 00:47:54,480
revision

1243
00:47:54,480 --> 00:47:57,040
basic idea is that i have one or two new

1244
00:47:57,040 --> 00:47:59,839
things i need that by the the importer

1245
00:47:59,839 --> 00:48:01,359
needs it

1246
00:48:01,359 --> 00:48:03,119
and we want uh

1247
00:48:03,119 --> 00:48:05,359
but otherwise i don't want to update and

1248
00:48:05,359 --> 00:48:08,160
i want to follow the revisions

1249
00:48:08,160 --> 00:48:10,240
we don't want to have a strict linkage

1250
00:48:10,240 --> 00:48:12,880
between the revisions of importer and

1251
00:48:12,880 --> 00:48:15,920
the importing imported module but we do

1252
00:48:15,920 --> 00:48:19,960
need some kind of things

1253
00:48:20,000 --> 00:48:22,720
and this just enhances compiler so if

1254
00:48:22,720 --> 00:48:25,520
let's say i have five revisions if

1255
00:48:25,520 --> 00:48:27,119
any

1256
00:48:27,119 --> 00:48:30,240
anything can be used

1257
00:48:30,240 --> 00:48:31,200
but

1258
00:48:31,200 --> 00:48:33,040
if i tell the compiler that two are

1259
00:48:33,040 --> 00:48:34,880
actually unsuitable

1260
00:48:34,880 --> 00:48:37,040
that's a big improvement

1261
00:48:37,040 --> 00:48:39,599
and if the compiler doesn't understand

1262
00:48:39,599 --> 00:48:42,079
this import

1263
00:48:42,079 --> 00:48:44,960
by derived revision extension and no

1264
00:48:44,960 --> 00:48:46,960
worse than before

1265
00:48:46,960 --> 00:48:49,280
it's still the same five that can be

1266
00:48:49,280 --> 00:48:52,240
used next

1267
00:48:54,160 --> 00:48:55,040
okay

1268
00:48:55,040 --> 00:48:55,839
so

1269
00:48:55,839 --> 00:49:00,000
why did we do it this way really

1270
00:49:00,640 --> 00:49:03,200
the most common problem was really that

1271
00:49:03,200 --> 00:49:04,960
i need the new functionality in the

1272
00:49:04,960 --> 00:49:07,040
imported module to be there and i

1273
00:49:07,040 --> 00:49:08,960
usually only need one

1274
00:49:08,960 --> 00:49:11,359
one or two or a few smaller items from

1275
00:49:11,359 --> 00:49:13,920
the module from the important module not

1276
00:49:13,920 --> 00:49:17,280
all of the things

1277
00:49:17,280 --> 00:49:19,280
i also want to follow the updates if

1278
00:49:19,280 --> 00:49:21,839
there are error corrections or

1279
00:49:21,839 --> 00:49:24,800
just to avoid using very old modules and

1280
00:49:24,800 --> 00:49:26,880
we don't want to

1281
00:49:26,880 --> 00:49:29,040
update all my importing modules all the

1282
00:49:29,040 --> 00:49:31,760
time and yes there is this trade-off

1283
00:49:31,760 --> 00:49:32,880
that

1284
00:49:32,880 --> 00:49:37,920
either you specify a very precise and

1285
00:49:38,640 --> 00:49:40,559
set of modules that you are willing to

1286
00:49:40,559 --> 00:49:43,200
import but then this is complicated and

1287
00:49:43,200 --> 00:49:44,720
restrictive

1288
00:49:44,720 --> 00:49:45,680
or if

1289
00:49:45,680 --> 00:49:47,839
you specify something simple like what

1290
00:49:47,839 --> 00:49:49,040
we propose

1291
00:49:49,040 --> 00:49:52,000
and then there are some risks

1292
00:49:52,000 --> 00:49:54,480
what things we didn't want to do is one

1293
00:49:54,480 --> 00:49:55,920
is

1294
00:49:55,920 --> 00:49:57,520
that if

1295
00:49:57,520 --> 00:49:59,599
a module is changed the imported module

1296
00:49:59,599 --> 00:50:01,680
is changed but only some part which i

1297
00:50:01,680 --> 00:50:03,440
don't care i don't want to update my

1298
00:50:03,440 --> 00:50:05,920
modules for that

1299
00:50:05,920 --> 00:50:08,240
also

1300
00:50:09,920 --> 00:50:11,280
we could

1301
00:50:11,280 --> 00:50:13,200
in earlier versions of this draft we had

1302
00:50:13,200 --> 00:50:16,640
very specific uh ways or statements how

1303
00:50:16,640 --> 00:50:20,319
what we want to import we had ranges of

1304
00:50:20,319 --> 00:50:23,920
module revisions excluding or import or

1305
00:50:23,920 --> 00:50:26,720
or including additional ones open-ended

1306
00:50:26,720 --> 00:50:29,200
ranges closed end ranges

1307
00:50:29,200 --> 00:50:32,559
and all these niceties had logic behind

1308
00:50:32,559 --> 00:50:34,800
them and they became so complicated that

1309
00:50:34,800 --> 00:50:37,119
no one understood them except maybe the

1310
00:50:37,119 --> 00:50:38,160
water

1311
00:50:38,160 --> 00:50:41,200
so we want to avoid that

1312
00:50:41,200 --> 00:50:44,480
and below we have a few examples where

1313
00:50:44,480 --> 00:50:47,200
the this import by revision including

1314
00:50:47,200 --> 00:50:49,839
your functionality was x really really

1315
00:50:49,839 --> 00:50:53,680
needed and actually used already by

1316
00:50:53,680 --> 00:50:56,480
text message text descriptions next

1317
00:50:56,480 --> 00:50:58,800
please

1318
00:51:01,119 --> 00:51:02,000
okay

1319
00:51:02,000 --> 00:51:04,880
what do we accept expect from tool

1320
00:51:04,880 --> 00:51:06,559
behavior

1321
00:51:06,559 --> 00:51:07,680
so

1322
00:51:07,680 --> 00:51:09,599
one could say that this is a critical

1323
00:51:09,599 --> 00:51:11,680
thing if the new things are not included

1324
00:51:11,680 --> 00:51:13,040
and we include

1325
00:51:13,040 --> 00:51:14,000
some

1326
00:51:14,000 --> 00:51:16,559
or import some old revision

1327
00:51:16,559 --> 00:51:19,119
then it's better to fail

1328
00:51:19,119 --> 00:51:22,079
or we could do what 7950 says that if

1329
00:51:22,079 --> 00:51:23,920
you don't know

1330
00:51:23,920 --> 00:51:25,280
the extension

1331
00:51:25,280 --> 00:51:26,800
like this import by

1332
00:51:26,800 --> 00:51:29,200
um by derived revision then just ignore

1333
00:51:29,200 --> 00:51:30,559
it

1334
00:51:30,559 --> 00:51:33,200
and the consensus was that let's go with

1335
00:51:33,200 --> 00:51:36,000
the 7950 behavior

1336
00:51:36,000 --> 00:51:38,559
because already to fail on this unknown

1337
00:51:38,559 --> 00:51:40,319
extension that would need updating the

1338
00:51:40,319 --> 00:51:41,520
tools

1339
00:51:41,520 --> 00:51:44,079
and yeah if we update it why don't you

1340
00:51:44,079 --> 00:51:47,280
update it to fully so

1341
00:51:47,280 --> 00:51:49,280
we expect that these will just be

1342
00:51:49,280 --> 00:51:52,559
ignored if if i'm not recognized by a

1343
00:51:52,559 --> 00:51:54,319
tool

1344
00:51:54,319 --> 00:51:56,079
and then we have a small separate

1345
00:51:56,079 --> 00:51:57,680
problem the

1346
00:51:57,680 --> 00:51:59,359
lower point is about

1347
00:51:59,359 --> 00:52:02,319
revision label

1348
00:52:02,839 --> 00:52:06,480
scheme we have revision labels defined

1349
00:52:06,480 --> 00:52:09,599
what how do we know what kind of scheme

1350
00:52:09,599 --> 00:52:11,440
that uses maybe there are multiple

1351
00:52:11,440 --> 00:52:14,480
schemes that are slightly incompatible

1352
00:52:14,480 --> 00:52:16,400
so we have another extension revision

1353
00:52:16,400 --> 00:52:18,400
label scheme that specifies actually

1354
00:52:18,400 --> 00:52:19,839
what is the scheme for the revision

1355
00:52:19,839 --> 00:52:21,839
label

1356
00:52:21,839 --> 00:52:23,520
should we make the usage of this

1357
00:52:23,520 --> 00:52:26,319
mandatory if and only if the revision

1358
00:52:26,319 --> 00:52:27,440
label

1359
00:52:27,440 --> 00:52:28,880
is present

1360
00:52:28,880 --> 00:52:30,640
and the idea is that

1361
00:52:30,640 --> 00:52:34,079
for a standard models yes please specify

1362
00:52:34,079 --> 00:52:35,520
what your revision

1363
00:52:35,520 --> 00:52:37,599
label scheme you are using

1364
00:52:37,599 --> 00:52:39,760
for other modules vendor modules this

1365
00:52:39,760 --> 00:52:41,359
should be recommended

1366
00:52:41,359 --> 00:52:43,440
yes questions comments

1367
00:52:43,440 --> 00:52:45,040
uh so robot from cisco so i want to

1368
00:52:45,040 --> 00:52:46,720
speak actually back to the previous

1369
00:52:46,720 --> 00:52:48,559
section so

1370
00:52:48,559 --> 00:52:50,160
at the moment how the draft is

1371
00:52:50,160 --> 00:52:52,720
specifying it is effectively saying on

1372
00:52:52,720 --> 00:52:54,640
the revision or derived

1373
00:52:54,640 --> 00:52:55,920
if you

1374
00:52:55,920 --> 00:52:57,760
support that extension statement you can

1375
00:52:57,760 --> 00:53:00,800
only select a module version that that

1376
00:53:00,800 --> 00:53:03,520
is derived from that specification so it

1377
00:53:03,520 --> 00:53:05,520
limits the sets you choose

1378
00:53:05,520 --> 00:53:07,599
and we play a bit of a game in terms of

1379
00:53:07,599 --> 00:53:08,480
saying

1380
00:53:08,480 --> 00:53:09,839
that you're not really changing the

1381
00:53:09,839 --> 00:53:11,839
behavior for a compiler that doesn't

1382
00:53:11,839 --> 00:53:13,760
support this extension statement because

1383
00:53:13,760 --> 00:53:15,760
it could have chosen that module version

1384
00:53:15,760 --> 00:53:17,359
anyway it's also quite ambiguous what

1385
00:53:17,359 --> 00:53:18,800
the behavior is

1386
00:53:18,800 --> 00:53:21,920
in the uh more recently in the author's

1387
00:53:21,920 --> 00:53:23,040
group and things we've had this

1388
00:53:23,040 --> 00:53:25,200
discussion about a slightly alternative

1389
00:53:25,200 --> 00:53:27,599
interpretation of that so rather than

1390
00:53:27,599 --> 00:53:29,680
the revision or derived being strict it

1391
00:53:29,680 --> 00:53:31,839
has to be a later version or not it

1392
00:53:31,839 --> 00:53:34,000
becomes a sort of um

1393
00:53:34,000 --> 00:53:36,480
suggestive approach this so it suggests

1394
00:53:36,480 --> 00:53:38,160
a version that you should use

1395
00:53:38,160 --> 00:53:40,000
um but doesn't doesn't mandate or

1396
00:53:40,000 --> 00:53:42,800
require that so a compiler would still

1397
00:53:42,800 --> 00:53:44,160
be allowed to

1398
00:53:44,160 --> 00:53:46,160
pull up and or use an older version or

1399
00:53:46,160 --> 00:53:48,079
different version that isn't in

1400
00:53:48,079 --> 00:53:50,880
that classification or original derived

1401
00:53:50,880 --> 00:53:52,400
and

1402
00:53:52,400 --> 00:53:53,920
and effectively the suggestion there is

1403
00:53:53,920 --> 00:53:55,440
if you if you do choose a version that's

1404
00:53:55,440 --> 00:53:56,640
compatible

1405
00:53:56,640 --> 00:53:58,559
uh and within that within the sort of

1406
00:53:58,559 --> 00:54:00,480
selection criteria that's great and if

1407
00:54:00,480 --> 00:54:02,000
some reason you can't find that and you

1408
00:54:02,000 --> 00:54:03,920
choose another version then you might

1409
00:54:03,920 --> 00:54:05,599
have a warning coming out during the

1410
00:54:05,599 --> 00:54:06,800
past saying that you're picking up an

1411
00:54:06,800 --> 00:54:09,119
older version and in many cases it might

1412
00:54:09,119 --> 00:54:11,119
be that that's you then

1413
00:54:11,119 --> 00:54:12,880
it fails and you you're missing a type

1414
00:54:12,880 --> 00:54:14,640
or something and so you can't compile

1415
00:54:14,640 --> 00:54:16,960
things together but it also might mean

1416
00:54:16,960 --> 00:54:18,720
that if you have like branched histories

1417
00:54:18,720 --> 00:54:20,640
it allows you to use a young module on a

1418
00:54:20,640 --> 00:54:22,240
different branch that might actually

1419
00:54:22,240 --> 00:54:23,680
have the type you want because it's been

1420
00:54:23,680 --> 00:54:25,839
added in two places but it's not derived

1421
00:54:25,839 --> 00:54:27,599
from that original thing so it sort of

1422
00:54:27,599 --> 00:54:29,680
solves that problem but the reason that

1423
00:54:29,680 --> 00:54:32,240
i quite like it is it also means that

1424
00:54:32,240 --> 00:54:34,240
the behavior now is completely sort of

1425
00:54:34,240 --> 00:54:36,960
consistent with um not understanding

1426
00:54:36,960 --> 00:54:38,799
this extension as well because you're

1427
00:54:38,799 --> 00:54:40,720
not ruling out which selection of

1428
00:54:40,720 --> 00:54:42,160
modules you're using you're just giving

1429
00:54:42,160 --> 00:54:43,599
a hint to the compiler as to which one's

1430
00:54:43,599 --> 00:54:45,200
a better one so

1431
00:54:45,200 --> 00:54:46,240
i don't know if there's anyone in the

1432
00:54:46,240 --> 00:54:48,559
room has they understand my explanation

1433
00:54:48,559 --> 00:54:50,160
have any thoughts on that as to which

1434
00:54:50,160 --> 00:54:52,000
way might be a better way to go but we'd

1435
00:54:52,000 --> 00:54:55,599
like to hear it if you do thank you

1436
00:55:01,359 --> 00:55:04,680
next please

1437
00:55:07,520 --> 00:55:10,240
then we had an issue with

1438
00:55:10,240 --> 00:55:13,040
if i we got no comments and

1439
00:55:13,040 --> 00:55:14,000
about

1440
00:55:14,000 --> 00:55:16,480
revision label in the file name

1441
00:55:16,480 --> 00:55:18,640
the proposal is that

1442
00:55:18,640 --> 00:55:21,119
we find it very useful to reference

1443
00:55:21,119 --> 00:55:24,240
files with the revision label

1444
00:55:24,240 --> 00:55:25,520
it is much

1445
00:55:25,520 --> 00:55:28,640
easier for some for people to recognize

1446
00:55:28,640 --> 00:55:30,480
3.3 but

1447
00:55:30,480 --> 00:55:32,720
then sometimes to recognize the exact

1448
00:55:32,720 --> 00:55:36,079
date especially if we have let's say

1449
00:55:36,079 --> 00:55:37,839
multiple tracks

1450
00:55:37,839 --> 00:55:38,880
yep

1451
00:55:38,880 --> 00:55:40,960
using the revision labeling the finding

1452
00:55:40,960 --> 00:55:43,200
is just convenient

1453
00:55:43,200 --> 00:55:46,400
so now we have two possibilities for

1454
00:55:46,400 --> 00:55:48,480
the file name it can include the date

1455
00:55:48,480 --> 00:55:49,440
with

1456
00:55:49,440 --> 00:55:50,880
this add sign

1457
00:55:50,880 --> 00:55:53,280
or it can include the

1458
00:55:53,280 --> 00:55:54,960
revision label

1459
00:55:54,960 --> 00:55:56,160
with a

1460
00:55:56,160 --> 00:55:58,240
hash mark

1461
00:55:58,240 --> 00:56:01,040
both are allowed

1462
00:56:01,040 --> 00:56:03,359
actually you can have you know your file

1463
00:56:03,359 --> 00:56:05,599
system

1464
00:56:05,599 --> 00:56:07,839
the same yang module with two different

1465
00:56:07,839 --> 00:56:09,440
names

1466
00:56:09,440 --> 00:56:11,359
actually we already have this situation

1467
00:56:11,359 --> 00:56:13,119
because you could have it one with or

1468
00:56:13,119 --> 00:56:17,680
one and one without the data already

1469
00:56:17,680 --> 00:56:20,000
so i think we still would

1470
00:56:20,000 --> 00:56:22,720
we see the advantages of this

1471
00:56:22,720 --> 00:56:25,439
next please

1472
00:56:26,960 --> 00:56:28,640
and there was some discussion whether

1473
00:56:28,640 --> 00:56:30,480
this whole

1474
00:56:30,480 --> 00:56:33,359
versioning issue should be part of

1475
00:56:33,359 --> 00:56:35,440
yang 1.1

1476
00:56:35,440 --> 00:56:37,839
or as an extension or should it go to

1477
00:56:37,839 --> 00:56:40,480
yang next or yank 2 or however it will

1478
00:56:40,480 --> 00:56:42,319
be called

1479
00:56:42,319 --> 00:56:44,799
and yes we agree that this should go to

1480
00:56:44,799 --> 00:56:46,480
yank two and it should become a

1481
00:56:46,480 --> 00:56:49,920
mandatory part of yank2 but that doesn't

1482
00:56:49,920 --> 00:56:51,760
mean we should stop working and we

1483
00:56:51,760 --> 00:56:54,160
should wait for yanktubric or yang next

1484
00:56:54,160 --> 00:56:56,559
because that takes a lot of time so do

1485
00:56:56,559 --> 00:56:59,839
it now in yang 1.1 as extensions

1486
00:56:59,839 --> 00:57:02,319
and integrate it into yang next

1487
00:57:02,319 --> 00:57:05,599
when whenever that happens

1488
00:57:05,599 --> 00:57:08,079
so yes it's needed urgently

1489
00:57:08,079 --> 00:57:10,160
don't wait

1490
00:57:10,160 --> 00:57:12,400
and i actually went uh this is lou uh i

1491
00:57:12,400 --> 00:57:13,920
i went through my notes on this one

1492
00:57:13,920 --> 00:57:15,839
because i i felt like we discussed this

1493
00:57:15,839 --> 00:57:18,000
at the last meeting but i didn't see it

1494
00:57:18,000 --> 00:57:19,760
in the in the minutes

1495
00:57:19,760 --> 00:57:21,760
so i thought it would be good to state

1496
00:57:21,760 --> 00:57:23,680
here again that i believe this was the

1497
00:57:23,680 --> 00:57:25,359
consensus at the last meeting although

1498
00:57:25,359 --> 00:57:28,400
it's not supported by the minutes

1499
00:57:28,400 --> 00:57:30,480
okay thank you

1500
00:57:30,480 --> 00:57:34,319
and i think that's my last slide

1501
00:57:34,640 --> 00:57:37,440
any questions comments

1502
00:57:37,440 --> 00:57:40,000
yes how do we get to the point where the

1503
00:57:40,000 --> 00:57:41,839
document is done

1504
00:57:41,839 --> 00:57:44,640
to the uh and we have no more uh

1505
00:57:44,640 --> 00:57:46,640
questions so that we can

1506
00:57:46,640 --> 00:57:49,760
press forward with it at last call and

1507
00:57:49,760 --> 00:57:52,000
publish

1508
00:57:52,000 --> 00:57:54,400
i think the idea is to have uh one more

1509
00:57:54,400 --> 00:57:55,839
last call

1510
00:57:55,839 --> 00:57:58,240
at least for the

1511
00:57:58,240 --> 00:57:59,839
we have a few decisions on these issues

1512
00:57:59,839 --> 00:58:03,040
can you go back to slide one please

1513
00:58:03,040 --> 00:58:04,480
remember you're talking to me yeah okay

1514
00:58:04,480 --> 00:58:06,160
you can't can you go back to slide one

1515
00:58:06,160 --> 00:58:08,319
please yeah you listed a whole lot of

1516
00:58:08,319 --> 00:58:10,640
questions and i

1517
00:58:10,640 --> 00:58:12,880
was sort of expecting to ask yes for

1518
00:58:12,880 --> 00:58:15,359
feed specific feedback

1519
00:58:15,359 --> 00:58:16,880
because it would be good to close on

1520
00:58:16,880 --> 00:58:21,440
these so we can as i said press forward

1521
00:58:21,599 --> 00:58:23,280
i think we

1522
00:58:23,280 --> 00:58:25,119
kind of settled on most of the issues

1523
00:58:25,119 --> 00:58:27,680
maybe the where to place the per node

1524
00:58:27,680 --> 00:58:30,319
extension that's an open one

1525
00:58:30,319 --> 00:58:33,599
and uh we need to add that

1526
00:58:33,599 --> 00:58:35,599
if we settle that then we need to adjust

1527
00:58:35,599 --> 00:58:37,839
to the current versioning draft maybe a

1528
00:58:37,839 --> 00:58:39,920
second last call to

1529
00:58:39,920 --> 00:58:42,400
agree agree that it's finalized and then

1530
00:58:42,400 --> 00:58:44,720
yeah okay so it should not be much much

1531
00:58:44,720 --> 00:58:46,960
change except of that as i see

1532
00:58:46,960 --> 00:58:48,640
then what i'm hearing is even though

1533
00:58:48,640 --> 00:58:50,160
they're presented as questions you think

1534
00:58:50,160 --> 00:58:52,160
they're pretty non-controversial and

1535
00:58:52,160 --> 00:58:53,760
that you would expect that any

1536
00:58:53,760 --> 00:58:55,119
objections would be brought up on the

1537
00:58:55,119 --> 00:58:57,040
list and hearing none you will proceed

1538
00:58:57,040 --> 00:58:59,119
with a new version that captures your

1539
00:58:59,119 --> 00:59:01,440
conclusions

1540
00:59:01,440 --> 00:59:04,160
yes okay

1541
00:59:04,160 --> 00:59:05,440
all right that sounds like a plan to me

1542
00:59:05,440 --> 00:59:07,839
i just didn't like leaving it with open

1543
00:59:07,839 --> 00:59:10,720
questions and we're here to close issues

1544
00:59:10,720 --> 00:59:13,520
so thank you

1545
00:59:16,799 --> 00:59:18,960
so with that i forget who's presenting

1546
00:59:18,960 --> 00:59:21,280
next

1547
00:59:27,280 --> 00:59:31,079
are we back to joe

1548
00:59:42,160 --> 00:59:46,400
all right well this is an update

1549
00:59:46,400 --> 00:59:49,280
well if you're tall this is an update on

1550
00:59:49,280 --> 00:59:52,720
the semantic yang sember the semantic

1551
00:59:52,720 --> 00:59:54,319
version

1552
00:59:54,319 --> 00:59:56,400
like um

1553
00:59:56,400 --> 00:59:58,559
revision label scheme so next slide

1554
00:59:58,559 --> 01:00:01,520
please kent

1555
01:00:01,520 --> 01:00:03,440
so the current status

1556
01:00:03,440 --> 01:00:06,240
we did release an 07

1557
01:00:06,240 --> 01:00:07,280
there were

1558
01:00:07,280 --> 01:00:09,359
very few comments

1559
01:00:09,359 --> 01:00:12,880
from jurgen that were addressed in here

1560
01:00:12,880 --> 01:00:15,599
semver the way it's written on their

1561
01:00:15,599 --> 01:00:18,799
website december 2.0.0 website is

1562
01:00:18,799 --> 01:00:20,960
capital s capital v in the camel case

1563
01:00:20,960 --> 01:00:22,000
there

1564
01:00:22,000 --> 01:00:23,839
so we did that to

1565
01:00:23,839 --> 01:00:26,720
make a visual disambiguation between

1566
01:00:26,720 --> 01:00:30,880
the simber 2.0 spec and i use the air

1567
01:00:30,880 --> 01:00:33,200
quotes for those not in the room

1568
01:00:33,200 --> 01:00:34,799
you can see on video

1569
01:00:34,799 --> 01:00:38,640
because they did in fact change 2.0.0

1570
01:00:38,640 --> 01:00:41,920
multiple times but never never increased

1571
01:00:41,920 --> 01:00:44,880
their own uh revision or version number

1572
01:00:44,880 --> 01:00:47,119
uh but we did anchor to the one that we

1573
01:00:47,119 --> 01:00:48,319
are using

1574
01:00:48,319 --> 01:00:50,480
um and we clarified some of the use of

1575
01:00:50,480 --> 01:00:53,520
our semantic version uh the the con or

1576
01:00:53,520 --> 01:00:55,920
the concept of semantic versioning

1577
01:00:55,920 --> 01:00:59,280
as opposed to the semver the spec and

1578
01:00:59,280 --> 01:01:01,760
the yang simvers specifically there is

1579
01:01:01,760 --> 01:01:03,359
more to do there

1580
01:01:03,359 --> 01:01:05,119
there's more text to be added there is a

1581
01:01:05,119 --> 01:01:06,319
github

1582
01:01:06,319 --> 01:01:08,160
issue on that

1583
01:01:08,160 --> 01:01:11,119
we've been focusing a lot more on just

1584
01:01:11,119 --> 01:01:12,000
uh

1585
01:01:12,000 --> 01:01:14,160
as balash mentioned addressing some of

1586
01:01:14,160 --> 01:01:17,680
the issues uh but but to uh

1587
01:01:17,680 --> 01:01:20,799
uh lose question we need to uh shore up

1588
01:01:20,799 --> 01:01:22,799
the text so folk have like a focus

1589
01:01:22,799 --> 01:01:25,280
session on each one of these drafts

1590
01:01:25,280 --> 01:01:27,920
shore up the text uh with the responses

1591
01:01:27,920 --> 01:01:30,880
to the the comments and then get another

1592
01:01:30,880 --> 01:01:34,240
uh more detailed revision out

1593
01:01:34,240 --> 01:01:36,240
we also fixed some

1594
01:01:36,240 --> 01:01:38,559
typo in the prefix small things like i

1595
01:01:38,559 --> 01:01:39,920
said and we compressed the

1596
01:01:39,920 --> 01:01:42,000
acknowledgement section not to say we

1597
01:01:42,000 --> 01:01:44,240
removed acknowledgements we just made it

1598
01:01:44,240 --> 01:01:46,400
less taking up less space on the page

1599
01:01:46,400 --> 01:01:48,559
next slide please

1600
01:01:48,559 --> 01:01:50,720
so that's the boring stuff

1601
01:01:50,720 --> 01:01:52,000
more interesting stuff are the

1602
01:01:52,000 --> 01:01:54,079
outstanding issues or is the outstanding

1603
01:01:54,079 --> 01:01:57,599
issues um the the the big thing and and

1604
01:01:57,599 --> 01:02:00,079
balash hinted at it uh that that was

1605
01:02:00,079 --> 01:02:02,559
raised simver if you look at a a

1606
01:02:02,559 --> 01:02:04,720
semantic version a yang simverse string

1607
01:02:04,720 --> 01:02:07,440
let's say you can't tell

1608
01:02:07,440 --> 01:02:09,599
unambiguously and

1609
01:02:09,599 --> 01:02:11,440
and authoritatively

1610
01:02:11,440 --> 01:02:14,160
where it derived from and that was never

1611
01:02:14,160 --> 01:02:16,000
the intention we'll get to that revision

1612
01:02:16,000 --> 01:02:18,880
labels are not designed to be linear

1613
01:02:18,880 --> 01:02:21,039
they're designed to anchor you

1614
01:02:21,039 --> 01:02:23,520
to a revision and and just like in fact

1615
01:02:23,520 --> 01:02:25,520
i stole shamelessly stole bellagio's

1616
01:02:25,520 --> 01:02:27,839
slide we'll look at that again

1617
01:02:27,839 --> 01:02:30,319
um it's simver but it isn't

1618
01:02:30,319 --> 01:02:32,559
and we'll get to that i have a slide for

1619
01:02:32,559 --> 01:02:34,400
it um

1620
01:02:34,400 --> 01:02:35,520
you know for those who can't wait for

1621
01:02:35,520 --> 01:02:39,280
the movie it it it isn't but it can be

1622
01:02:39,280 --> 01:02:41,280
yang simba is trying to encode the

1623
01:02:41,280 --> 01:02:43,520
release train um

1624
01:02:43,520 --> 01:02:46,000
it may seem that way we have a lot of

1625
01:02:46,000 --> 01:02:48,000
vendors on the call but you could in

1626
01:02:48,000 --> 01:02:49,839
fact create your own revision label

1627
01:02:49,839 --> 01:02:51,839
scheme that honestly does encode the

1628
01:02:51,839 --> 01:02:53,280
release train

1629
01:02:53,280 --> 01:02:55,440
and

1630
01:02:55,440 --> 01:02:56,960
andy brought up an issue there was too

1631
01:02:56,960 --> 01:02:59,680
much much work involved or too noisy

1632
01:02:59,680 --> 01:03:01,920
to bump the yang simber for work in

1633
01:03:01,920 --> 01:03:03,359
progress and we'll talk about each one

1634
01:03:03,359 --> 01:03:06,720
of these the next slide please ken

1635
01:03:07,200 --> 01:03:09,200
and this is uh balash's slide he did a

1636
01:03:09,200 --> 01:03:11,520
great job he did a great job on this man

1637
01:03:11,520 --> 01:03:12,960
um

1638
01:03:12,960 --> 01:03:16,079
the idea here is no you can't tell just

1639
01:03:16,079 --> 01:03:18,480
by looking at the simver like in in this

1640
01:03:18,480 --> 01:03:21,839
example you uh or i should say in the in

1641
01:03:21,839 --> 01:03:23,440
the top example

1642
01:03:23,440 --> 01:03:27,760
that if if uh you have a a 1.0.0 and you

1643
01:03:27,760 --> 01:03:31,680
have a 1.1.0 and then you see 2.0.0

1644
01:03:31,680 --> 01:03:34,640
you can't say that 2.0.0 contains

1645
01:03:34,640 --> 01:03:37,119
everything that 1.1.0

1646
01:03:37,119 --> 01:03:38,799
has because

1647
01:03:38,799 --> 01:03:39,680
it

1648
01:03:39,680 --> 01:03:42,400
as you can see from the slide it derived

1649
01:03:42,400 --> 01:03:44,640
directly from 1.0.0

1650
01:03:44,640 --> 01:03:45,839
so while

1651
01:03:45,839 --> 01:03:46,720
you

1652
01:03:46,720 --> 01:03:49,280
your brain might logically assume that

1653
01:03:49,280 --> 01:03:52,240
well they made a minor revision to 1.1

1654
01:03:52,240 --> 01:03:54,160
surely they just

1655
01:03:54,160 --> 01:03:55,760
added some things that they put into it

1656
01:03:55,760 --> 01:03:58,240
out of there's no way to know that what

1657
01:03:58,240 --> 01:04:01,680
you do know is that 2.0.0

1658
01:04:01,680 --> 01:04:03,599
points to a revision and i can look at

1659
01:04:03,599 --> 01:04:05,520
that revision and then i can work my way

1660
01:04:05,520 --> 01:04:08,480
up using the yang module versioning work

1661
01:04:08,480 --> 01:04:12,079
and say it derived directly from 1.0.0

1662
01:04:12,079 --> 01:04:14,000
so that i know

1663
01:04:14,000 --> 01:04:17,119
there may be stuff in 1.1.0 that it

1664
01:04:17,119 --> 01:04:19,599
isn't reflected in 2.0.0

1665
01:04:19,599 --> 01:04:20,880
and

1666
01:04:20,880 --> 01:04:23,520
yes it would be nice if

1667
01:04:23,520 --> 01:04:26,720
we knew directly that the 2.0.0 must

1668
01:04:26,720 --> 01:04:28,720
include but because

1669
01:04:28,720 --> 01:04:31,039
branching

1670
01:04:31,039 --> 01:04:34,160
the fact that branching exists at all

1671
01:04:34,160 --> 01:04:37,200
is there it means we can't know that

1672
01:04:37,200 --> 01:04:39,680
it's not the labeling that breaks this

1673
01:04:39,680 --> 01:04:41,760
this knowledge it's the fact that

1674
01:04:41,760 --> 01:04:43,520
branching is allowed even in the the

1675
01:04:43,520 --> 01:04:46,720
base simver i can do this as long as i

1676
01:04:46,720 --> 01:04:48,880
constantly work linearly

1677
01:04:48,880 --> 01:04:51,119
as long as i always say that once i come

1678
01:04:51,119 --> 01:04:52,960
up with a new major release i'm never

1679
01:04:52,960 --> 01:04:54,799
going to do anything

1680
01:04:54,799 --> 01:04:57,039
back on the minor or sorry on the

1681
01:04:57,039 --> 01:04:58,720
previous major

1682
01:04:58,720 --> 01:05:00,319
then you know that it's always going to

1683
01:05:00,319 --> 01:05:02,400
derive from wherever you were in that

1684
01:05:02,400 --> 01:05:04,240
point i'm never going to go back i'm

1685
01:05:04,240 --> 01:05:06,960
going to do 1.001.10

1686
01:05:06,960 --> 01:05:08,480
2.00

1687
01:05:08,480 --> 01:05:09,760
and i'm never going to go back and

1688
01:05:09,760 --> 01:05:12,240
create a 1.2.0

1689
01:05:12,240 --> 01:05:14,000
but that's not the case we know that's

1690
01:05:14,000 --> 01:05:18,000
not the case we're not enforcing that

1691
01:05:18,000 --> 01:05:21,119
just like tom mentioned in in his intro

1692
01:05:21,119 --> 01:05:23,280
we're just saying this exists

1693
01:05:23,280 --> 01:05:27,280
and we're allowing authors to signal it

1694
01:05:27,280 --> 01:05:29,520
through the module versioning and then

1695
01:05:29,520 --> 01:05:33,839
by extension the um revision labeling

1696
01:05:33,839 --> 01:05:35,680
so it's not the labeling that breaks

1697
01:05:35,680 --> 01:05:37,440
this it's not the labeling that causes

1698
01:05:37,440 --> 01:05:38,799
this confusion

1699
01:05:38,799 --> 01:05:41,760
it's the fact that branching can happen

1700
01:05:41,760 --> 01:05:43,200
and what we're trying to do is give you

1701
01:05:43,200 --> 01:05:45,520
a more human readable anchor point the

1702
01:05:45,520 --> 01:05:47,359
revision label

1703
01:05:47,359 --> 01:05:49,119
that gives you something that says okay

1704
01:05:49,119 --> 01:05:52,160
i can look at that and i can kind of get

1705
01:05:52,160 --> 01:05:54,799
from what i know of simver i know that

1706
01:05:54,799 --> 01:05:59,680
between 1.1.0 and 2.0.0 there are some

1707
01:05:59,680 --> 01:06:01,440
potentially breaking things

1708
01:06:01,440 --> 01:06:03,039
non-backwards compatible things that

1709
01:06:03,039 --> 01:06:05,200
might affect me and now i'm going to go

1710
01:06:05,200 --> 01:06:07,039
and look at that further that's what

1711
01:06:07,039 --> 01:06:08,640
we're doing with

1712
01:06:08,640 --> 01:06:11,599
with the revision label

1713
01:06:11,599 --> 01:06:14,160
next slide

1714
01:06:16,839 --> 01:06:19,200
please pausing a little bit to see if

1715
01:06:19,200 --> 01:06:22,160
there's any questions

1716
01:06:23,440 --> 01:06:25,920
okay it's simver but it isn't it's a

1717
01:06:25,920 --> 01:06:28,079
dessert topping it's a floor wax it's

1718
01:06:28,079 --> 01:06:30,079
both

1719
01:06:30,079 --> 01:06:33,440
yang simver can be 100

1720
01:06:33,440 --> 01:06:35,680
simver

1721
01:06:35,680 --> 01:06:38,559
we have additional

1722
01:06:38,559 --> 01:06:41,039
additives we have the underscore

1723
01:06:41,039 --> 01:06:43,119
compatible and the underscore non

1724
01:06:43,119 --> 01:06:45,200
underscore compatible

1725
01:06:45,200 --> 01:06:47,280
you don't have to use them

1726
01:06:47,280 --> 01:06:50,000
if you want to do things there's more

1727
01:06:50,000 --> 01:06:53,039
that is in line more with a

1728
01:06:53,039 --> 01:06:56,240
straight capital s capital v semver you

1729
01:06:56,240 --> 01:06:57,839
can do that

1730
01:06:57,839 --> 01:07:00,960
in fact the ietf we don't ever expect to

1731
01:07:00,960 --> 01:07:03,520
see underscore compatible or underscore

1732
01:07:03,520 --> 01:07:06,000
non-underscore compatible

1733
01:07:06,000 --> 01:07:08,240
what we do expect to see

1734
01:07:08,240 --> 01:07:10,799
is things that look more and behave more

1735
01:07:10,799 --> 01:07:14,319
like the true semver 2.0.0

1736
01:07:14,319 --> 01:07:15,039
for

1737
01:07:15,039 --> 01:07:18,079
that spec that we we reference

1738
01:07:18,079 --> 01:07:20,960
so semver r simver yang simver is a

1739
01:07:20,960 --> 01:07:24,880
super set of the semver 2.0.0 and you

1740
01:07:24,880 --> 01:07:27,440
can choose to use the pure

1741
01:07:27,440 --> 01:07:29,839
some respect though there is an action

1742
01:07:29,839 --> 01:07:30,799
for us

1743
01:07:30,799 --> 01:07:33,839
we have to clarify what is unique

1744
01:07:33,839 --> 01:07:36,079
we have it in there but we need to

1745
01:07:36,079 --> 01:07:38,559
in no in certain terms spell it out that

1746
01:07:38,559 --> 01:07:40,480
underscore compatible underscore

1747
01:07:40,480 --> 01:07:42,240
non-underscore compatible these are

1748
01:07:42,240 --> 01:07:43,440
unique to

1749
01:07:43,440 --> 01:07:47,599
what we're proposing the rest

1750
01:07:47,599 --> 01:07:49,200
completely in line with the rules of

1751
01:07:49,200 --> 01:07:51,680
simba you can you can use the rules of

1752
01:07:51,680 --> 01:07:54,480
simber with your revision label scheme

1753
01:07:54,480 --> 01:07:56,960
you can declare a revision label scheme

1754
01:07:56,960 --> 01:07:59,920
that is simver

1755
01:08:00,799 --> 01:08:02,240
and follow those rules you can follow

1756
01:08:02,240 --> 01:08:04,480
those rules with our yang simver you

1757
01:08:04,480 --> 01:08:06,079
don't have to use compatible

1758
01:08:06,079 --> 01:08:08,960
non-compatible

1759
01:08:09,200 --> 01:08:11,839
next slide please

1760
01:08:14,160 --> 01:08:16,479
aha

1761
01:08:16,479 --> 01:08:18,238
i hope i understood this correctly we

1762
01:08:18,238 --> 01:08:20,880
are not necessarily encoding the release

1763
01:08:20,880 --> 01:08:24,799
train of software into the yang uh in

1764
01:08:24,799 --> 01:08:26,479
the yang simba

1765
01:08:26,479 --> 01:08:29,040
what we are doing is reflecting what

1766
01:08:29,040 --> 01:08:31,600
changed in the module at a high at a

1767
01:08:31,600 --> 01:08:33,839
high level we're reflecting that

1768
01:08:33,839 --> 01:08:36,080
we're saying if you if you remember that

1769
01:08:36,080 --> 01:08:39,080
picture two slides ago that if i had

1770
01:08:39,080 --> 01:08:42,640
1.1.0 and i was using it and now i am

1771
01:08:42,640 --> 01:08:45,040
using or i have a module two dot i

1772
01:08:45,040 --> 01:08:48,158
produce a module 2.0.0 that there are

1773
01:08:48,158 --> 01:08:50,640
potentially well there are

1774
01:08:50,640 --> 01:08:52,960
back non-backwards compatible changes in

1775
01:08:52,960 --> 01:08:56,158
in 2.0.0 from 1.1.0

1776
01:08:56,158 --> 01:08:59,359
or from 1.0.0 they may affect you they

1777
01:08:59,359 --> 01:09:00,960
may affect the work that you're doing

1778
01:09:00,960 --> 01:09:03,040
the tooling that you're creating the

1779
01:09:03,040 --> 01:09:04,640
interaction you have as a client with

1780
01:09:04,640 --> 01:09:06,560
this with the server that supports that

1781
01:09:06,560 --> 01:09:08,158
new version

1782
01:09:08,158 --> 01:09:10,799
we are not necessarily reflecting the

1783
01:09:10,799 --> 01:09:14,479
underlying software of the of the server

1784
01:09:14,479 --> 01:09:16,960
meaning the features the capabilities of

1785
01:09:16,960 --> 01:09:19,120
the the software release train of the

1786
01:09:19,120 --> 01:09:20,719
vendor

1787
01:09:20,719 --> 01:09:22,319
a vendor could come up with their own

1788
01:09:22,319 --> 01:09:23,839
scheme

1789
01:09:23,839 --> 01:09:25,600
i work for cisco cisco could come up

1790
01:09:25,600 --> 01:09:27,679
with our own scheme for revision label

1791
01:09:27,679 --> 01:09:31,679
that really reflects the ios xr version

1792
01:09:31,679 --> 01:09:33,198
if we wanted to

1793
01:09:33,198 --> 01:09:34,719
but what we're trying to do here with

1794
01:09:34,719 --> 01:09:37,839
yang simver is reflect is give that high

1795
01:09:37,839 --> 01:09:39,679
level understanding you can look at it

1796
01:09:39,679 --> 01:09:42,799
and quick glance and say i know that

1797
01:09:42,799 --> 01:09:45,198
there are

1798
01:09:45,198 --> 01:09:47,359
and you can read the draft

1799
01:09:47,359 --> 01:09:49,520
non-backwards compatible changes between

1800
01:09:49,520 --> 01:09:51,120
this version of a module and that

1801
01:09:51,120 --> 01:09:53,839
version of a module or i know there are

1802
01:09:53,839 --> 01:09:56,320
potentially those minor changes there

1803
01:09:56,320 --> 01:09:58,640
are back there are backwards compatible

1804
01:09:58,640 --> 01:10:00,640
changes things i might be interested in

1805
01:10:00,640 --> 01:10:01,840
learning about

1806
01:10:01,840 --> 01:10:05,120
or i know there's only editorial changes

1807
01:10:05,120 --> 01:10:07,600
it's just come typo fixes

1808
01:10:07,600 --> 01:10:09,600
no semantic changes between these two

1809
01:10:09,600 --> 01:10:11,440
that's what we're trying to convey with

1810
01:10:11,440 --> 01:10:13,840
yang simver

1811
01:10:13,840 --> 01:10:17,400
next slide please

1812
01:10:18,239 --> 01:10:19,440
okay

1813
01:10:19,440 --> 01:10:22,719
i actually like this um

1814
01:10:22,719 --> 01:10:25,360
bumping uh the the work in progress but

1815
01:10:25,360 --> 01:10:30,719
i i realize that that it's it is work um

1816
01:10:30,719 --> 01:10:32,640
from what i have seen

1817
01:10:32,640 --> 01:10:34,640
working at a vendor

1818
01:10:34,640 --> 01:10:36,960
there is a tendency to implement

1819
01:10:36,960 --> 01:10:39,040
work in progress drafts especially ones

1820
01:10:39,040 --> 01:10:40,719
that are long running

1821
01:10:40,719 --> 01:10:42,719
people look at that and they go

1822
01:10:42,719 --> 01:10:46,640
that's interesting i want you to do that

1823
01:10:46,640 --> 01:10:48,800
okay and so as a product manager goes

1824
01:10:48,800 --> 01:10:51,199
yeah we want to make money we'll do this

1825
01:10:51,199 --> 01:10:53,120
how do you know what they implemented

1826
01:10:53,120 --> 01:10:55,760
what version they implemented well there

1827
01:10:55,760 --> 01:10:58,320
might be in the documentation some draft

1828
01:10:58,320 --> 01:11:01,040
that says okay i implemented in this

1829
01:11:01,040 --> 01:11:04,719
version of our product draft dash

1830
01:11:04,719 --> 01:11:07,440
netmod dash something

1831
01:11:07,440 --> 01:11:09,280
maybe that was a bad example there but

1832
01:11:09,280 --> 01:11:11,520
whatever you might see that but how

1833
01:11:11,520 --> 01:11:12,960
would you reflect that with a yang

1834
01:11:12,960 --> 01:11:14,640
module

1835
01:11:14,640 --> 01:11:17,120
what we want to be able to do is is say

1836
01:11:17,120 --> 01:11:19,040
specifically that

1837
01:11:19,040 --> 01:11:21,679
every release or every revision of a

1838
01:11:21,679 --> 01:11:23,120
yang module

1839
01:11:23,120 --> 01:11:25,840
in a draft if you've made changes to it

1840
01:11:25,840 --> 01:11:28,000
we want you to bump that that semver

1841
01:11:28,000 --> 01:11:30,159
label that revision label

1842
01:11:30,159 --> 01:11:31,520
and have it be

1843
01:11:31,520 --> 01:11:34,480
the rule is it has to be unique

1844
01:11:34,480 --> 01:11:37,280
so we bake in the draft name and its

1845
01:11:37,280 --> 01:11:39,040
revision and we do the name in there

1846
01:11:39,040 --> 01:11:40,560
because there can be parallel work

1847
01:11:40,560 --> 01:11:42,400
streams working on the same

1848
01:11:42,400 --> 01:11:44,800
revising the same yang module

1849
01:11:44,800 --> 01:11:46,480
so we have the

1850
01:11:46,480 --> 01:11:48,000
uh the draft name in there with its

1851
01:11:48,000 --> 01:11:50,239
revision that keeps it unique so we can

1852
01:11:50,239 --> 01:11:52,560
always use that as an anchor point to

1853
01:11:52,560 --> 01:11:54,640
find the revision defined the

1854
01:11:54,640 --> 01:11:57,280
inheritance and and and the the changes

1855
01:11:57,280 --> 01:11:59,920
that happened within that module

1856
01:11:59,920 --> 01:12:02,960
if you change the draft but you do not

1857
01:12:02,960 --> 01:12:05,040
change the yang module if you're just

1858
01:12:05,040 --> 01:12:08,560
adding contextual text explaining things

1859
01:12:08,560 --> 01:12:10,480
updating

1860
01:12:10,480 --> 01:12:12,880
the formatting of the yang tree you

1861
01:12:12,880 --> 01:12:14,719
don't change the module you do not have

1862
01:12:14,719 --> 01:12:16,320
to change the revision label just like

1863
01:12:16,320 --> 01:12:18,719
you don't have to change the revision

1864
01:12:18,719 --> 01:12:20,400
but if you make a change such that you

1865
01:12:20,400 --> 01:12:23,440
change the revision of that yang module

1866
01:12:23,440 --> 01:12:26,000
then you have to update the

1867
01:12:26,000 --> 01:12:29,120
sember as well the revision label

1868
01:12:29,120 --> 01:12:30,800
we need to make that text a little

1869
01:12:30,800 --> 01:12:33,679
clearer in the write-up as to why and

1870
01:12:33,679 --> 01:12:35,840
when you make those changes and it was

1871
01:12:35,840 --> 01:12:38,239
brought up because i i released a new

1872
01:12:38,239 --> 01:12:40,800
version of the yang zimber draft

1873
01:12:40,800 --> 01:12:43,760
but the yang uh the actual there is a

1874
01:12:43,760 --> 01:12:45,840
yang module in that draft

1875
01:12:45,840 --> 01:12:46,640
the

1876
01:12:46,640 --> 01:12:48,400
the revision label didn't change and i

1877
01:12:48,400 --> 01:12:49,840
said well we didn't make changes to the

1878
01:12:49,840 --> 01:12:51,760
module

1879
01:12:51,760 --> 01:12:53,520
so if you implement this nothing has

1880
01:12:53,520 --> 01:12:55,600
changed so we don't want to gratuitously

1881
01:12:55,600 --> 01:12:56,400
bump

1882
01:12:56,400 --> 01:12:57,840
uh the revision and we don't want to

1883
01:12:57,840 --> 01:13:00,480
gratuitously bump the december revision

1884
01:13:00,480 --> 01:13:02,560
label either

1885
01:13:02,560 --> 01:13:05,840
we think that makes sense

1886
01:13:08,239 --> 01:13:11,760
sorry very sorry next slide please

1887
01:13:11,760 --> 01:13:14,640
i think that's it

1888
01:13:17,520 --> 01:13:18,480
okay

1889
01:13:18,480 --> 01:13:20,800
applied the last slide that was costly

1890
01:13:20,800 --> 01:13:22,480
that is the last slide okay

1891
01:13:22,480 --> 01:13:25,280
um so that is uh the update on yang

1892
01:13:25,280 --> 01:13:27,600
simvar um with some of the work that we

1893
01:13:27,600 --> 01:13:29,840
still have to do

1894
01:13:29,840 --> 01:13:30,719
um

1895
01:13:30,719 --> 01:13:33,719
questions

1896
01:13:33,760 --> 01:13:36,480
all right thank you

1897
01:13:37,440 --> 01:13:38,880
i guess i have one question this is

1898
01:13:38,880 --> 01:13:40,080
louis

1899
01:13:40,080 --> 01:13:42,480
contributor

1900
01:13:42,480 --> 01:13:45,840
are you assuming that you never use the

1901
01:13:45,840 --> 01:13:46,800
date

1902
01:13:46,800 --> 01:13:48,640
with sever

1903
01:13:48,640 --> 01:13:50,640
based on the previous

1904
01:13:50,640 --> 01:13:52,640
draft

1905
01:13:52,640 --> 01:13:54,719
are you assuming that you never use the

1906
01:13:54,719 --> 01:13:55,840
date

1907
01:13:55,840 --> 01:13:58,880
um you could use the date what do you

1908
01:13:58,880 --> 01:14:01,760
you could i'm thinking about how

1909
01:14:01,760 --> 01:14:04,960
if both the date the the previous

1910
01:14:04,960 --> 01:14:06,960
semantics if i read it correctly allowed

1911
01:14:06,960 --> 01:14:08,320
for both

1912
01:14:08,320 --> 01:14:09,440
correct

1913
01:14:09,440 --> 01:14:12,320
it wasn't either or it was both

1914
01:14:12,320 --> 01:14:16,719
um in the revision or derived

1915
01:14:16,719 --> 01:14:19,440
no in the previous in the

1916
01:14:19,440 --> 01:14:21,360
previous craft

1917
01:14:21,360 --> 01:14:24,719
you mean the file name or

1918
01:14:24,719 --> 01:14:26,840
because in the in the

1919
01:14:26,840 --> 01:14:29,520
module change the revision statement so

1920
01:14:29,520 --> 01:14:31,520
that must include the date just as to

1921
01:14:31,520 --> 01:14:33,040
this

1922
01:14:33,040 --> 01:14:34,719
this will be uh

1923
01:14:34,719 --> 01:14:37,040
so would you expect the date to change

1924
01:14:37,040 --> 01:14:38,640
in the version not

1925
01:14:38,640 --> 01:14:40,080
no

1926
01:14:40,080 --> 01:14:42,000
they would both say the same they would

1927
01:14:42,000 --> 01:14:44,239
so if if i'm making it i just felt like

1928
01:14:44,239 --> 01:14:46,800
it's not it's one changes than the other

1929
01:14:46,800 --> 01:14:49,280
must they must work in synchron they

1930
01:14:49,280 --> 01:14:52,159
both identify this version so in the

1931
01:14:52,159 --> 01:14:55,199
case where we have an updated draft

1932
01:14:55,199 --> 01:14:56,960
where you do not change

1933
01:14:56,960 --> 01:14:58,880
the

1934
01:14:58,880 --> 01:15:01,600
december what happens to the date the

1935
01:15:01,600 --> 01:15:04,480
date should not change either

1936
01:15:04,480 --> 01:15:06,239
okay

1937
01:15:06,239 --> 01:15:08,239
if i don't make a change to the module i

1938
01:15:08,239 --> 01:15:10,080
shouldn't update the revision of the

1939
01:15:10,080 --> 01:15:11,600
module

1940
01:15:11,600 --> 01:15:12,560
because

1941
01:15:12,560 --> 01:15:15,360
it's identical to the previous

1942
01:15:15,360 --> 01:15:16,719
there

1943
01:15:16,719 --> 01:15:18,719
i mean you could it would to me it's a

1944
01:15:18,719 --> 01:15:21,199
gratuitous change i agree with you i

1945
01:15:21,199 --> 01:15:23,440
just that's what you usually see

1946
01:15:23,440 --> 01:15:25,360
with drafts

1947
01:15:25,360 --> 01:15:26,800
at least i'm used to seeing people

1948
01:15:26,800 --> 01:15:28,640
updating i've seen both to be fair to

1949
01:15:28,640 --> 01:15:30,960
you i've seen it yeah i so i think it

1950
01:15:30,960 --> 01:15:32,560
would be good just to be clear what the

1951
01:15:32,560 --> 01:15:34,320
expectation is in the document totally

1952
01:15:34,320 --> 01:15:36,239
agree with you

1953
01:15:36,239 --> 01:15:38,480
and some set liquid um

1954
01:15:38,480 --> 01:15:40,480
is there anything wrong with gratuitous

1955
01:15:40,480 --> 01:15:42,239
version bumping

1956
01:15:42,239 --> 01:15:44,880
um i i don't think there's necessarily

1957
01:15:44,880 --> 01:15:47,360
anything wrong with it it um

1958
01:15:47,360 --> 01:15:49,840
i guess this gets to the noise uh bit

1959
01:15:49,840 --> 01:15:52,400
that andy was raising that if you if you

1960
01:15:52,400 --> 01:15:53,920
keep bumping these

1961
01:15:53,920 --> 01:15:56,400
you keep incrementing so there's a few

1962
01:15:56,400 --> 01:15:58,800
sets of tools that extract yang modules

1963
01:15:58,800 --> 01:16:01,040
and add them to the file systems of like

1964
01:16:01,040 --> 01:16:02,640
get repositories

1965
01:16:02,640 --> 01:16:04,560
you just keep adding on to that and

1966
01:16:04,560 --> 01:16:07,199
you're not re and you could interrupt uh

1967
01:16:07,199 --> 01:16:08,880
people like oh i've got this new version

1968
01:16:08,880 --> 01:16:10,960
i've got to look at only to find out

1969
01:16:10,960 --> 01:16:13,120
that it's the same as before it just

1970
01:16:13,120 --> 01:16:14,880
adds work where

1971
01:16:14,880 --> 01:16:17,199
it seems like

1972
01:16:17,199 --> 01:16:19,199
you know get doesn't really allow you i

1973
01:16:19,199 --> 01:16:20,800
used just get because

1974
01:16:20,800 --> 01:16:23,440
i've been using it a lot this week

1975
01:16:23,440 --> 01:16:24,960
if you do a git commit you haven't made

1976
01:16:24,960 --> 01:16:26,880
any changes it says

1977
01:16:26,880 --> 01:16:28,239
you can force it

1978
01:16:28,239 --> 01:16:30,000
but it just seems like

1979
01:16:30,000 --> 01:16:33,440
why create that churn

1980
01:16:33,520 --> 01:16:35,920
sure i'm just um i'm just trying to

1981
01:16:35,920 --> 01:16:37,920
take the parallel from pure development

1982
01:16:37,920 --> 01:16:39,280
space where

1983
01:16:39,280 --> 01:16:40,719
i'm trying to also get my head around

1984
01:16:40,719 --> 01:16:42,560
the whole version tracking and it's sem

1985
01:16:42,560 --> 01:16:45,199
verb and not send there and and i just

1986
01:16:45,199 --> 01:16:47,520
think it might actually help

1987
01:16:47,520 --> 01:16:48,560
if we

1988
01:16:48,560 --> 01:16:51,440
working towards this idea that we don't

1989
01:16:51,440 --> 01:16:54,320
have these inversion branches i mean if

1990
01:16:54,320 --> 01:16:56,000
we look at the development flow you've

1991
01:16:56,000 --> 01:16:57,120
got

1992
01:16:57,120 --> 01:16:59,040
you've got branching but you also have

1993
01:16:59,040 --> 01:17:02,640
merging you merge back your features

1994
01:17:02,640 --> 01:17:04,480
into the parent thing and then that

1995
01:17:04,480 --> 01:17:07,440
follows december properly it's

1996
01:17:07,440 --> 01:17:09,440
from me personally i think um and i'm

1997
01:17:09,440 --> 01:17:10,880
new to the room

1998
01:17:10,880 --> 01:17:12,719
um it just feels like we're adding

1999
01:17:12,719 --> 01:17:15,440
confusion but i do take your point about

2000
01:17:15,440 --> 01:17:18,000
you know gratuitously bumping stuff and

2001
01:17:18,000 --> 01:17:20,880
why that might not be a good thing

2002
01:17:20,880 --> 01:17:24,159
the uh the merging is is is interesting

2003
01:17:24,159 --> 01:17:25,360
because

2004
01:17:25,360 --> 01:17:27,440
you have

2005
01:17:27,440 --> 01:17:29,679
you can look back at that history and

2006
01:17:29,679 --> 01:17:33,280
you can see that that that a branch has

2007
01:17:33,280 --> 01:17:35,199
has been merged back in

2008
01:17:35,199 --> 01:17:36,320
um

2009
01:17:36,320 --> 01:17:39,199
here you we don't have the

2010
01:17:39,199 --> 01:17:42,080
the the linearity of like looking back

2011
01:17:42,080 --> 01:17:44,480
in a um

2012
01:17:44,480 --> 01:17:46,719
in a yang module you could still reflect

2013
01:17:46,719 --> 01:17:50,080
that if you if you did in fact merge

2014
01:17:50,080 --> 01:17:53,760
you could say that okay i i merged uh

2015
01:17:53,760 --> 01:17:56,480
one i i merged some of these features

2016
01:17:56,480 --> 01:17:59,920
and from a if you had the revisions you

2017
01:17:59,920 --> 01:18:01,920
would be able to to in fact see that

2018
01:18:01,920 --> 01:18:05,120
okay this 2.0.0 really did extend from

2019
01:18:05,120 --> 01:18:08,640
one but looking just at 2.0.0 compared

2020
01:18:08,640 --> 01:18:10,880
to one just looking at those two strings

2021
01:18:10,880 --> 01:18:14,640
together you don't know for certain

2022
01:18:14,640 --> 01:18:16,800
where they inherited from you have to do

2023
01:18:16,800 --> 01:18:19,440
the the upward tracking to find out if

2024
01:18:19,440 --> 01:18:21,600
there was a merge and where that merge

2025
01:18:21,600 --> 01:18:23,840
happened and when that merge happened so

2026
01:18:23,840 --> 01:18:27,760
i think we still get that it's just not

2027
01:18:27,760 --> 01:18:29,760
visually comparing the two simverse

2028
01:18:29,760 --> 01:18:32,239
strings

2029
01:18:34,159 --> 01:18:37,280
charles yeah charles eccle and um you

2030
01:18:37,280 --> 01:18:39,440
know i just think it's uh there's

2031
01:18:39,440 --> 01:18:42,239
different consumers of these doc these

2032
01:18:42,239 --> 01:18:44,880
drafts and the yang models they contain

2033
01:18:44,880 --> 01:18:46,880
and i think some of the consumers of

2034
01:18:46,880 --> 01:18:48,719
those will be following

2035
01:18:48,719 --> 01:18:49,760
you know

2036
01:18:49,760 --> 01:18:52,159
the work of the itf data tracker they'll

2037
01:18:52,159 --> 01:18:54,320
know when a new draft comes out so for

2038
01:18:54,320 --> 01:18:55,920
them it's probably not a big deal but i

2039
01:18:55,920 --> 01:18:58,159
think there's a lot of consumers of this

2040
01:18:58,159 --> 01:19:00,080
that that really just care about the

2041
01:19:00,080 --> 01:19:02,159
yang gang modules

2042
01:19:02,159 --> 01:19:05,360
and for them to it's just better if they

2043
01:19:05,360 --> 01:19:07,520
don't see a change i would think if

2044
01:19:07,520 --> 01:19:09,280
nothing changed like

2045
01:19:09,280 --> 01:19:11,040
i would save them the extra work and the

2046
01:19:11,040 --> 01:19:13,120
churn and hey why does this thing keep

2047
01:19:13,120 --> 01:19:15,280
changing so i think it's better for them

2048
01:19:15,280 --> 01:19:17,600
if you don't so i would say it's

2049
01:19:17,600 --> 01:19:20,080
while it's not horrible to gratuitously

2050
01:19:20,080 --> 01:19:22,400
update i think it's better not to

2051
01:19:22,400 --> 01:19:24,719
and and i take the comment from you lou

2052
01:19:24,719 --> 01:19:26,320
that that we can be better about

2053
01:19:26,320 --> 01:19:28,400
describing that being

2054
01:19:28,400 --> 01:19:30,640
extra explicit

2055
01:19:30,640 --> 01:19:32,000
uh robertson cisco i was just going to

2056
01:19:32,000 --> 01:19:33,840
reply back to anne's comments and things

2057
01:19:33,840 --> 01:19:35,760
so i think our aim and our goal here is

2058
01:19:35,760 --> 01:19:37,840
to try even for the vendors to get a

2059
01:19:37,840 --> 01:19:39,280
sort of linear development of the young

2060
01:19:39,280 --> 01:19:40,880
models that's what you want that's

2061
01:19:40,880 --> 01:19:42,880
that's what you're aiming for and the

2062
01:19:42,880 --> 01:19:44,560
case where the branching turns up is

2063
01:19:44,560 --> 01:19:46,719
because we've shipped to release and

2064
01:19:46,719 --> 01:19:48,239
we've got a bug fix we need to put on to

2065
01:19:48,239 --> 01:19:51,679
that and we can't we can't easily update

2066
01:19:51,679 --> 01:19:53,199
that order at least to the latest yam

2067
01:19:53,199 --> 01:19:54,239
model because it's got a load of other

2068
01:19:54,239 --> 01:19:55,840
code that we don't want and that's where

2069
01:19:55,840 --> 01:19:57,120
we get the branching so it's sort of

2070
01:19:57,120 --> 01:19:59,360
quite limited stub branches

2071
01:19:59,360 --> 01:20:01,280
um and you would i would expect the

2072
01:20:01,280 --> 01:20:02,800
stuff you're adding into those branches

2073
01:20:02,800 --> 01:20:04,719
bug fixes are either going into the main

2074
01:20:04,719 --> 01:20:06,159
line anyway

2075
01:20:06,159 --> 01:20:07,520
or either way around whichever way you

2076
01:20:07,520 --> 01:20:09,040
put them so

2077
01:20:09,040 --> 01:20:11,120
you could you could mark the merging to

2078
01:20:11,120 --> 01:20:13,360
say you've done that but it depends

2079
01:20:13,360 --> 01:20:15,040
which way depends which one gets written

2080
01:20:15,040 --> 01:20:17,199
first i guess so you won't always have

2081
01:20:17,199 --> 01:20:18,960
that you might be you've done in the fix

2082
01:20:18,960 --> 01:20:20,239
on the main line and you're back porting

2083
01:20:20,239 --> 01:20:23,199
it to older releases

2084
01:20:26,880 --> 01:20:28,800
so i just brought up the

2085
01:20:28,800 --> 01:20:29,920
uh

2086
01:20:29,920 --> 01:20:32,480
outstanding issues to make sure

2087
01:20:32,480 --> 01:20:34,000
the group the room and everyone

2088
01:20:34,000 --> 01:20:35,280
understands the plan is is you're going

2089
01:20:35,280 --> 01:20:36,800
to do an update

2090
01:20:36,800 --> 01:20:39,120
and you think you're going to be ready

2091
01:20:39,120 --> 01:20:40,880
for last call once that update's done or

2092
01:20:40,880 --> 01:20:42,239
you think you have more issues to

2093
01:20:42,239 --> 01:20:44,159
discuss

2094
01:20:44,159 --> 01:20:47,360
you want my honest opinion yes

2095
01:20:47,360 --> 01:20:48,239
i

2096
01:20:48,239 --> 01:20:50,159
honestly think

2097
01:20:50,159 --> 01:20:51,840
getting

2098
01:20:51,840 --> 01:20:54,239
people on the call who are going to be

2099
01:20:54,239 --> 01:20:57,199
vocal about this would probably work the

2100
01:20:57,199 --> 01:21:01,120
best to close these out once and for all

2101
01:21:01,120 --> 01:21:03,840
um rather than just doing a another

2102
01:21:03,840 --> 01:21:05,600
round of email last call even though i

2103
01:21:05,600 --> 01:21:08,000
know pro probably process-wise we have

2104
01:21:08,000 --> 01:21:10,400
to do that that's my honest opinion all

2105
01:21:10,400 --> 01:21:11,840
right so what you're saying is you'd

2106
01:21:11,840 --> 01:21:15,840
like to do a new version and publish

2107
01:21:16,320 --> 01:21:18,000
submit for publication

2108
01:21:18,000 --> 01:21:19,920
well i would like to do a new version i

2109
01:21:19,920 --> 01:21:21,760
think the last call is important but i

2110
01:21:21,760 --> 01:21:24,639
think if in going back and forth on the

2111
01:21:24,639 --> 01:21:26,639
last call it might we might be able to

2112
01:21:26,639 --> 01:21:28,560
hammer more things out if we did like an

2113
01:21:28,560 --> 01:21:30,480
interim getting the

2114
01:21:30,480 --> 01:21:33,520
the the passionate people together to to

2115
01:21:33,520 --> 01:21:35,679
have that conversation more

2116
01:21:35,679 --> 01:21:39,520
live than than an email

2117
01:21:40,639 --> 01:21:44,080
now i've opened a can of worms

2118
01:21:46,320 --> 01:21:47,760
so rob wilson

2119
01:21:47,760 --> 01:21:48,960
uh

2120
01:21:48,960 --> 01:21:51,600
not with my id hat on so um there's just

2121
01:21:51,600 --> 01:21:53,760
been an observation here that the the

2122
01:21:53,760 --> 01:21:55,040
people who've been raising lots of these

2123
01:21:55,040 --> 01:21:56,880
issues during the working with us calls

2124
01:21:56,880 --> 01:21:58,480
unfortunately are not able to make this

2125
01:21:58,480 --> 01:22:00,320
meeting so they're not here so we're

2126
01:22:00,320 --> 01:22:01,679
discussing all these issues but the main

2127
01:22:01,679 --> 01:22:02,639
people we want to have those

2128
01:22:02,639 --> 01:22:04,560
conversations with the other side are

2129
01:22:04,560 --> 01:22:06,080
not here so it's making it hard to

2130
01:22:06,080 --> 01:22:07,760
resolve them and we can try and resolve

2131
01:22:07,760 --> 01:22:09,679
them over email we spend a lot of time

2132
01:22:09,679 --> 01:22:11,520
discussing them within the authors like

2133
01:22:11,520 --> 01:22:13,760
on those weekly meetings and and a lot

2134
01:22:13,760 --> 01:22:15,520
of considerations gone in but i think in

2135
01:22:15,520 --> 01:22:17,280
most cases we've had some tweaks and

2136
01:22:17,280 --> 01:22:19,360
enhancements and things but also is we

2137
01:22:19,360 --> 01:22:20,719
think we are we're on the right track

2138
01:22:20,719 --> 01:22:22,880
and we need to get this through so

2139
01:22:22,880 --> 01:22:26,159
um so my view as a contributor is we

2140
01:22:26,159 --> 01:22:27,760
need to put the updates into new

2141
01:22:27,760 --> 01:22:29,360
versions of the documents we need to do

2142
01:22:29,360 --> 01:22:31,360
another working last call and a proper

2143
01:22:31,360 --> 01:22:33,040
full one to say look this is this is

2144
01:22:33,040 --> 01:22:34,880
where we're gonna get and then flush

2145
01:22:34,880 --> 01:22:36,400
them out we need to do an interim after

2146
01:22:36,400 --> 01:22:39,520
that to resolve those i don't know but

2147
01:22:39,520 --> 01:22:41,840
so so what you just captured i think is

2148
01:22:41,840 --> 01:22:44,400
the chair's plan okay so if everyone is

2149
01:22:44,400 --> 01:22:45,920
okay with that

2150
01:22:45,920 --> 01:22:48,159
and i know you you would maybe for not

2151
01:22:48,159 --> 01:22:50,560
but you can live with it and uh if

2152
01:22:50,560 --> 01:22:52,400
everyone's okay we're gonna proceed that

2153
01:22:52,400 --> 01:22:54,320
way so we look forward to seeing the the

2154
01:22:54,320 --> 01:22:57,440
update and uh look we'll the working

2155
01:22:57,440 --> 01:22:59,040
group should look forward to the last

2156
01:22:59,040 --> 01:22:59,840
call

2157
01:22:59,840 --> 01:23:03,920
second last call thank you no thank you

2158
01:23:04,719 --> 01:23:07,280
all right we are now going to move on to

2159
01:23:07,280 --> 01:23:09,040
the non-chartered

2160
01:23:09,040 --> 01:23:10,960
uh items

2161
01:23:10,960 --> 01:23:13,280
uh shifeng

2162
01:23:13,280 --> 01:23:15,920
yeah hello

2163
01:23:16,159 --> 01:23:17,840
yes you sound good thank you please

2164
01:23:17,840 --> 01:23:19,120
proceed

2165
01:23:19,120 --> 01:23:20,800
okay okay thank you

2166
01:23:20,800 --> 01:23:23,040
so hello everyone uh this is twofold

2167
01:23:23,040 --> 01:23:25,920
from huawei and on behalf of the

2168
01:23:25,920 --> 01:23:28,239
authors and contributors i will give a

2169
01:23:28,239 --> 01:23:30,080
presentation about

2170
01:23:30,080 --> 01:23:32,639
system defined configuration work i will

2171
01:23:32,639 --> 01:23:35,840
present remotely

2172
01:23:37,199 --> 01:23:38,239
yeah

2173
01:23:38,239 --> 01:23:40,639
so actually this work has already been

2174
01:23:40,639 --> 01:23:43,600
presented for several times and at the

2175
01:23:43,600 --> 01:23:46,080
same time there are a lot of good

2176
01:23:46,080 --> 01:23:48,880
discussion on the mailing list and so

2177
01:23:48,880 --> 01:23:49,760
many

2178
01:23:49,760 --> 01:23:52,639
folks have shared their excellent ideas

2179
01:23:52,639 --> 01:23:55,040
and provided a very great input

2180
01:23:55,040 --> 01:23:56,960
so thank you all

2181
01:23:56,960 --> 01:23:59,920
based on our a lot of discussion i think

2182
01:23:59,920 --> 01:24:02,480
we do have reached some agreements which

2183
01:24:02,480 --> 01:24:05,440
are already be written in the current

2184
01:24:05,440 --> 01:24:07,120
version of the draft

2185
01:24:07,120 --> 01:24:09,760
and the very first one is that

2186
01:24:09,760 --> 01:24:11,760
config true read-only

2187
01:24:11,760 --> 01:24:14,320
system data style to hold configuration

2188
01:24:14,320 --> 01:24:17,440
which is provided by the system itself

2189
01:24:17,440 --> 01:24:20,080
so the system data store is read only to

2190
01:24:20,080 --> 01:24:22,719
clients which mean that any added

2191
01:24:22,719 --> 01:24:25,120
operation to modify the contents of this

2192
01:24:25,120 --> 01:24:28,400
data store directly must be denied but

2193
01:24:28,400 --> 01:24:30,960
system may change dynamically for

2194
01:24:30,960 --> 01:24:33,360
example when the device upgrades or

2195
01:24:33,360 --> 01:24:36,080
hardware results is available

2196
01:24:36,080 --> 01:24:38,719
and the second one is that any reference

2197
01:24:38,719 --> 01:24:41,679
system configuration in system must be

2198
01:24:41,679 --> 01:24:44,800
present present in running

2199
01:24:44,800 --> 01:24:47,360
we had a really rigorous discussion

2200
01:24:47,360 --> 01:24:48,880
about whether

2201
01:24:48,880 --> 01:24:51,440
offline validation of running alone is

2202
01:24:51,440 --> 01:24:52,719
required

2203
01:24:52,719 --> 01:24:54,960
and to avoid the

2204
01:24:54,960 --> 01:24:57,440
changing the definition in

2205
01:24:57,440 --> 01:25:01,840
50 and 842 and also not to break any

2206
01:25:01,840 --> 01:25:04,159
lexical lines which relies on the

2207
01:25:04,159 --> 01:25:06,320
validation of running along

2208
01:25:06,320 --> 01:25:09,679
we agreed that the validation of running

2209
01:25:09,679 --> 01:25:12,639
is required so as to say any reference

2210
01:25:12,639 --> 01:25:15,360
system configuration in system must be

2211
01:25:15,360 --> 01:25:17,199
present in running

2212
01:25:17,199 --> 01:25:20,080
the third one is about a result system

2213
01:25:20,080 --> 01:25:22,320
parameter which controls

2214
01:25:22,320 --> 01:25:25,199
whether to allow a server to copy any

2215
01:25:25,199 --> 01:25:27,360
reference system defined configuration

2216
01:25:27,360 --> 01:25:28,880
automatically

2217
01:25:28,880 --> 01:25:31,600
this provides convenience to ensure the

2218
01:25:31,600 --> 01:25:32,880
second bullet

2219
01:25:32,880 --> 01:25:35,040
we can say that since

2220
01:25:35,040 --> 01:25:36,960
all ref any reference system

2221
01:25:36,960 --> 01:25:39,760
configuration must be present in running

2222
01:25:39,760 --> 01:25:42,719
and a client can copy the references the

2223
01:25:42,719 --> 01:25:45,280
reference node from system to running

2224
01:25:45,280 --> 01:25:46,719
explicitly

2225
01:25:46,719 --> 01:25:49,920
but manual copy and paste may not be

2226
01:25:49,920 --> 01:25:51,199
desirable

2227
01:25:51,199 --> 01:25:53,920
so we do allow a client to carry a

2228
01:25:53,920 --> 01:25:55,840
result system flag

2229
01:25:55,840 --> 01:25:58,239
in their edit config or edit data

2230
01:25:58,239 --> 01:26:01,520
operation so that a server

2231
01:26:01,520 --> 01:26:03,840
can resolve the reference and copy the

2232
01:26:03,840 --> 01:26:05,440
reference system configuration

2233
01:26:05,440 --> 01:26:07,760
automatically

2234
01:26:07,760 --> 01:26:10,800
but if this parameter is not provided

2235
01:26:10,800 --> 01:26:13,440
the server should not modify running in

2236
01:26:13,440 --> 01:26:16,000
anywhere not specified by the client

2237
01:26:16,000 --> 01:26:18,400
and this is the last bullet point

2238
01:26:18,400 --> 01:26:20,639
in the previous version

2239
01:26:20,639 --> 01:26:23,760
it was a very strong restriction to say

2240
01:26:23,760 --> 01:26:26,719
that the server must not modify running

2241
01:26:26,719 --> 01:26:28,159
if not asked

2242
01:26:28,159 --> 01:26:32,480
but to avoid any potential non-backward

2243
01:26:32,480 --> 01:26:33,679
con

2244
01:26:33,679 --> 01:26:36,880
non-backward con probability and after

2245
01:26:36,880 --> 01:26:39,199
some discussion on the mailing list we

2246
01:26:39,199 --> 01:26:41,440
weakened it and just said that it should

2247
01:26:41,440 --> 01:26:44,800
not modify ronnie if not asked so it is

2248
01:26:44,800 --> 01:26:47,440
preferred that a client can control

2249
01:26:47,440 --> 01:26:49,440
configuration in running as much as

2250
01:26:49,440 --> 01:26:50,400
possible

2251
01:26:50,400 --> 01:26:52,400
and running is only updated by the

2252
01:26:52,400 --> 01:26:54,880
client a client can benefit from such a

2253
01:26:54,880 --> 01:26:57,520
behavior which should work as a best

2254
01:26:57,520 --> 01:26:58,800
practice

2255
01:26:58,800 --> 01:27:01,199
so blush do have something to say i saw

2256
01:27:01,199 --> 01:27:04,000
you in the queue

2257
01:27:06,159 --> 01:27:08,639
to the last bullet i objected last time

2258
01:27:08,639 --> 01:27:10,880
and i still have to object that

2259
01:27:10,880 --> 01:27:12,239
there are

2260
01:27:12,239 --> 01:27:14,880
people out there who are using yang for

2261
01:27:14,880 --> 01:27:18,159
example 3gpp and who prescribed that the

2262
01:27:18,159 --> 01:27:22,000
system must modify running in some cases

2263
01:27:22,000 --> 01:27:22,800
so

2264
01:27:22,800 --> 01:27:25,760
putting such a should not here

2265
01:27:25,760 --> 01:27:28,639
i don't like it

2266
01:27:31,199 --> 01:27:33,840
we used to have some some discussion on

2267
01:27:33,840 --> 01:27:35,920
the mailing list and

2268
01:27:35,920 --> 01:27:37,199
there was some

2269
01:27:37,199 --> 01:27:40,159
agreement to say that we would like a

2270
01:27:40,159 --> 01:27:43,360
client control objective to say that a

2271
01:27:43,360 --> 01:27:46,159
client would like to

2272
01:27:46,159 --> 01:27:46,960
when

2273
01:27:46,960 --> 01:27:48,960
when the client retrieves running he

2274
01:27:48,960 --> 01:27:51,199
won't like he would like to get what was

2275
01:27:51,199 --> 01:27:53,280
exactly said to the

2276
01:27:53,280 --> 01:27:56,159
to the server so we used to have a

2277
01:27:56,159 --> 01:27:59,760
client control objective

2278
01:27:59,760 --> 01:28:02,400
um i i think this is the

2279
01:28:02,400 --> 01:28:04,800
this should not is work as that best

2280
01:28:04,800 --> 01:28:07,600
practice not a restriction if you have

2281
01:28:07,600 --> 01:28:08,560
some

2282
01:28:08,560 --> 01:28:11,679
other design consideration you can still

2283
01:28:11,679 --> 01:28:13,199
follow your

2284
01:28:13,199 --> 01:28:16,000
principal so just show not

2285
01:28:16,000 --> 01:28:20,400
not a really restriction i think

2286
01:28:25,360 --> 01:28:27,840
many many notes have on

2287
01:28:27,840 --> 01:28:30,639
out o m automation and then

2288
01:28:30,639 --> 01:28:33,120
that would also violate this and the

2289
01:28:33,120 --> 01:28:35,199
discussion whether that's an onboard

2290
01:28:35,199 --> 01:28:37,520
client or the system itself changes it

2291
01:28:37,520 --> 01:28:40,800
that's philosophical so yeah we don't

2292
01:28:40,800 --> 01:28:43,920
seem to agree thank you

2293
01:28:44,239 --> 01:28:49,199
okay job do you want to say something

2294
01:28:50,239 --> 01:28:52,719
uh robertson cisco

2295
01:28:52,719 --> 01:28:54,880
as a participant i i think they should

2296
01:28:54,880 --> 01:28:56,639
not write here i think that otherwise

2297
01:28:56,639 --> 01:28:58,560
it's sort of breaking

2298
01:28:58,560 --> 01:29:00,960
how this how the whole young ecosystems

2299
01:29:00,960 --> 01:29:03,360
have been designed to work and i do take

2300
01:29:03,360 --> 01:29:05,920
bellagio's point though that i would say

2301
01:29:05,920 --> 01:29:07,600
in that case you've got automation

2302
01:29:07,600 --> 01:29:09,440
running on the device you treat that as

2303
01:29:09,440 --> 01:29:11,520
another client and that's fine i have no

2304
01:29:11,520 --> 01:29:13,280
issues then then it's modifying it

2305
01:29:13,280 --> 01:29:14,960
but it's still ultimately if that's

2306
01:29:14,960 --> 01:29:16,639
under the client control and they can

2307
01:29:16,639 --> 01:29:18,080
turn that off or turn on and do whatever

2308
01:29:18,080 --> 01:29:20,480
they're doing that's fine so

2309
01:29:20,480 --> 01:29:22,639
so maybe that's the get out clause

2310
01:29:22,639 --> 01:29:26,560
but i think this is right in my view

2311
01:29:27,199 --> 01:29:29,199
okay

2312
01:29:29,199 --> 01:29:31,759
so kent

2313
01:29:32,800 --> 01:29:36,239
yes hi kent watson as a contributor um

2314
01:29:36,239 --> 01:29:38,960
i also think this is right um but i want

2315
01:29:38,960 --> 01:29:42,719
to note that there's existing rfc the

2316
01:29:42,719 --> 01:29:45,440
one that defines the crypt hash

2317
01:29:45,440 --> 01:29:46,239
um

2318
01:29:46,239 --> 01:29:49,199
and specifically it's you know for

2319
01:29:49,199 --> 01:29:52,800
user management and for how to specify

2320
01:29:52,800 --> 01:29:54,320
user passwords

2321
01:29:54,320 --> 01:29:57,600
and it says specifically that if you um

2322
01:29:57,600 --> 01:29:59,440
and it defines it in the description

2323
01:29:59,440 --> 01:30:02,239
statement that if the password sent from

2324
01:30:02,239 --> 01:30:05,280
the client to the server begins with

2325
01:30:05,280 --> 01:30:07,760
dollar sign zero dollar sign

2326
01:30:07,760 --> 01:30:10,800
it means that uh the text thereafter is

2327
01:30:10,800 --> 01:30:13,600
clear text and it's expected that the

2328
01:30:13,600 --> 01:30:16,639
server will replace with and with an

2329
01:30:16,639 --> 01:30:19,520
actual uh hashed password and it on the

2330
01:30:19,520 --> 01:30:21,840
server that way and then when retrieved

2331
01:30:21,840 --> 01:30:24,320
back to the client it will be of course

2332
01:30:24,320 --> 01:30:26,400
not the same as what the client had sent

2333
01:30:26,400 --> 01:30:28,480
it will then be hashed so i think that's

2334
01:30:28,480 --> 01:30:30,560
a that's an example of an already

2335
01:30:30,560 --> 01:30:33,199
existing rfc that

2336
01:30:33,199 --> 01:30:36,000
doesn't really follow the should not

2337
01:30:36,000 --> 01:30:38,239
principle but it's okay because they

2338
01:30:38,239 --> 01:30:39,760
described it i mean the best practice

2339
01:30:39,760 --> 01:30:41,440
stands uh even though the description

2340
01:30:41,440 --> 01:30:43,520
statement's there i think it's perfectly

2341
01:30:43,520 --> 01:30:45,280
reasonable

2342
01:30:45,280 --> 01:30:49,239
for that to be the case

2343
01:30:49,920 --> 01:30:53,679
okay thank you so jason

2344
01:30:54,320 --> 01:30:56,639
okay

2345
01:30:58,480 --> 01:31:01,440
jason hello can you guys hear me okay

2346
01:31:01,440 --> 01:31:03,520
yes yes we can hear you

2347
01:31:03,520 --> 01:31:06,800
um jason stern um i

2348
01:31:06,800 --> 01:31:10,080
i agree uh i like that uh

2349
01:31:10,080 --> 01:31:11,679
second uh

2350
01:31:11,679 --> 01:31:14,080
second bullet that um basically saying

2351
01:31:14,080 --> 01:31:15,600
the running should be valid and should

2352
01:31:15,600 --> 01:31:18,880
be able to be offline validated

2353
01:31:18,880 --> 01:31:19,920
and that

2354
01:31:19,920 --> 01:31:23,120
my big concern is that

2355
01:31:23,120 --> 01:31:25,440
um

2356
01:31:25,920 --> 01:31:27,440
at some point and maybe we're never

2357
01:31:27,440 --> 01:31:29,120
going to look at it but

2358
01:31:29,120 --> 01:31:31,360
um you know nmda mentions the the some

2359
01:31:31,360 --> 01:31:33,040
of the some of the translations from

2360
01:31:33,040 --> 01:31:35,120
running to intended include

2361
01:31:35,120 --> 01:31:36,080
um

2362
01:31:36,080 --> 01:31:38,480
templates configuration templates

2363
01:31:38,480 --> 01:31:39,280
and

2364
01:31:39,280 --> 01:31:41,600
that for me is a big problem here and

2365
01:31:41,600 --> 01:31:43,440
i'm you know i'm hesitant to tangle up

2366
01:31:43,440 --> 01:31:45,040
this work in templates but i'm worried

2367
01:31:45,040 --> 01:31:46,400
that we might say

2368
01:31:46,400 --> 01:31:48,239
running always has to be

2369
01:31:48,239 --> 01:31:49,920
um valid

2370
01:31:49,920 --> 01:31:52,239
and then when we tackle templates

2371
01:31:52,239 --> 01:31:53,600
at some point

2372
01:31:53,600 --> 01:31:56,320
i i don't know how that can work with

2373
01:31:56,320 --> 01:31:59,040
running being valid

2374
01:31:59,040 --> 01:32:01,760
so i know you won't have an answer uh

2375
01:32:01,760 --> 01:32:03,199
chiffang but um

2376
01:32:03,199 --> 01:32:05,440
it's just it's a concern that may be for

2377
01:32:05,440 --> 01:32:08,960
some discussion as part of the work

2378
01:32:09,600 --> 01:32:12,800
uh yeah we we said that ronnie must be

2379
01:32:12,800 --> 01:32:17,040
valid is referenced from the 7915 and

2380
01:32:17,040 --> 01:32:18,880
instead of that we can

2381
01:32:18,880 --> 01:32:20,800
also we can just say that any reference

2382
01:32:20,800 --> 01:32:23,040
system configuration in system but must

2383
01:32:23,040 --> 01:32:25,679
be planned in running but whether

2384
01:32:25,679 --> 01:32:26,960
that would

2385
01:32:26,960 --> 01:32:29,280
ensure that running must always be valid

2386
01:32:29,280 --> 01:32:31,360
because of we can have some

2387
01:32:31,360 --> 01:32:34,080
template expansion issue

2388
01:32:34,080 --> 01:32:36,800
maybe that will cause running invalid

2389
01:32:36,800 --> 01:32:39,440
i'm not sure i think the template maybe

2390
01:32:39,440 --> 01:32:42,159
should not be included in this just in

2391
01:32:42,159 --> 01:32:45,280
the scope of this work now

2392
01:32:45,280 --> 01:32:46,239
so

2393
01:32:46,239 --> 01:32:47,920
yeah we can have more discussion it

2394
01:32:47,920 --> 01:32:48,800
could be

2395
01:32:48,800 --> 01:32:50,800
that could be i just i'm worried about

2396
01:32:50,800 --> 01:32:52,960
being so strict about the running

2397
01:32:52,960 --> 01:32:54,560
and then we just reverse that when we

2398
01:32:54,560 --> 01:32:56,719
figure out templates but okay that's

2399
01:32:56,719 --> 01:32:59,120
something just to be discussed

2400
01:32:59,120 --> 01:33:01,840
yeah okay i understand your point

2401
01:33:01,840 --> 01:33:03,199
so rob

2402
01:33:03,199 --> 01:33:04,480
all right so i'm going to try and avoid

2403
01:33:04,480 --> 01:33:06,880
going down the rat hole that jason's

2404
01:33:06,880 --> 01:33:08,239
putting in front of us so i think

2405
01:33:08,239 --> 01:33:10,480
already actually though at least an mba

2406
01:33:10,480 --> 01:33:11,760
says that running has to be valid but

2407
01:33:11,760 --> 01:33:12,880
this part of that and templates and

2408
01:33:12,880 --> 01:33:14,719
outside i just want to go back to kent's

2409
01:33:14,719 --> 01:33:15,920
comments and it's like yes i think

2410
01:33:15,920 --> 01:33:17,760
that's a great example of why this is a

2411
01:33:17,760 --> 01:33:19,199
should not at the bottom and not a must

2412
01:33:19,199 --> 01:33:21,360
not i think that's a there's a good case

2413
01:33:21,360 --> 01:33:23,840
of why you pragmatically make sense to

2414
01:33:23,840 --> 01:33:26,639
modify it to to keep the data safe so

2415
01:33:26,639 --> 01:33:28,239
that's fine but i think clients would

2416
01:33:28,239 --> 01:33:31,040
cope with that so it makes sense to me

2417
01:33:31,040 --> 01:33:33,840
okay thank you

2418
01:33:34,480 --> 01:33:37,760
so let's move on

2419
01:33:37,760 --> 01:33:40,159
uh since last itef meeting it would be

2420
01:33:40,159 --> 01:33:43,199
actually good to try to wrap up because

2421
01:33:43,199 --> 01:33:45,120
we're now over time

2422
01:33:45,120 --> 01:33:48,239
okay okay i will be quick so this last

2423
01:33:48,239 --> 01:33:51,040
item meeting blush has read some

2424
01:33:51,040 --> 01:33:53,520
comments to help improve the document

2425
01:33:53,520 --> 01:33:55,679
and thanks blush very much for your

2426
01:33:55,679 --> 01:33:57,920
review and based on that the following

2427
01:33:57,920 --> 01:33:59,840
updates have been met

2428
01:33:59,840 --> 01:34:02,320
change the system behavior to of modify

2429
01:34:02,320 --> 01:34:04,960
running from must now to show note if

2430
01:34:04,960 --> 01:34:07,040
the result system parameter is not given

2431
01:34:07,040 --> 01:34:08,480
by the client

2432
01:34:08,480 --> 01:34:11,199
i think i have we have already discussed

2433
01:34:11,199 --> 01:34:15,600
it just now and then define a a rest com

2434
01:34:15,600 --> 01:34:18,560
comparability ui for reload system

2435
01:34:18,560 --> 01:34:21,120
rescoff query parameter so since we

2436
01:34:21,120 --> 01:34:24,320
updated the rescoff protocol to support

2437
01:34:24,320 --> 01:34:27,199
a new result system parameter for post

2438
01:34:27,199 --> 01:34:30,320
and put method and this capability can

2439
01:34:30,320 --> 01:34:32,960
be used for a rest conf client to

2440
01:34:32,960 --> 01:34:35,600
discover if a rascal server has

2441
01:34:35,600 --> 01:34:38,560
implemented the reload system parameter

2442
01:34:38,560 --> 01:34:41,840
and we also augmented the copy config

2443
01:34:41,840 --> 01:34:45,040
rpc operation to support resolve to

2444
01:34:45,040 --> 01:34:46,880
support without system as input

2445
01:34:46,880 --> 01:34:50,000
parameter since we only extend the

2446
01:34:50,000 --> 01:34:52,480
edit config and edit data operations to

2447
01:34:52,480 --> 01:34:54,320
support this parameter in previous

2448
01:34:54,320 --> 01:34:56,719
versions and we think that copy config

2449
01:34:56,719 --> 01:34:58,080
could also be

2450
01:34:58,080 --> 01:35:00,880
useful when you copy the configuration

2451
01:35:00,880 --> 01:35:03,440
from an offline value to running data

2452
01:35:03,440 --> 01:35:05,600
store and the parameter may be needed to

2453
01:35:05,600 --> 01:35:08,480
allow the server to copy reference

2454
01:35:08,480 --> 01:35:10,239
system configuration into running

2455
01:35:10,239 --> 01:35:13,199
automatically to keep running valid

2456
01:35:13,199 --> 01:35:15,520
then we have already we have also made

2457
01:35:15,520 --> 01:35:17,520
several editorial changes to for

2458
01:35:17,520 --> 01:35:20,560
clarification and explanation uh which

2459
01:35:20,560 --> 01:35:23,440
includes that a more clear definition of

2460
01:35:23,440 --> 01:35:26,159
system configuration states that system

2461
01:35:26,159 --> 01:35:28,800
configuration is created in system and

2462
01:35:28,800 --> 01:35:31,280
appears intended applied system

2463
01:35:31,280 --> 01:35:32,960
configuration also appears in

2464
01:35:32,960 --> 01:35:36,880
operational with origin equal to system

2465
01:35:36,880 --> 01:35:39,520
make it clear that system must always be

2466
01:35:39,520 --> 01:35:42,080
valid and make it clear that any

2467
01:35:42,080 --> 01:35:44,800
updating system will not will not cause

2468
01:35:44,800 --> 01:35:48,159
the automatic update of running even if

2469
01:35:48,159 --> 01:35:50,480
some of the system configuration has

2470
01:35:50,480 --> 01:35:52,880
already be copied into running

2471
01:35:52,880 --> 01:35:55,679
explicitly or automatically before the

2472
01:35:55,679 --> 01:35:57,679
update

2473
01:35:57,679 --> 01:35:59,679
and finally

2474
01:35:59,679 --> 01:36:01,520
finally that we clarified the

2475
01:36:01,520 --> 01:36:03,600
relationship between read-only two

2476
01:36:03,600 --> 01:36:04,800
clients

2477
01:36:04,800 --> 01:36:06,800
and overriding system configuration

2478
01:36:06,800 --> 01:36:09,280
which seems contradictory at first

2479
01:36:09,280 --> 01:36:11,440
glance when we said that with only two

2480
01:36:11,440 --> 01:36:13,360
clients it referred to the contents of

2481
01:36:13,360 --> 01:36:15,840
system data store the client is not

2482
01:36:15,840 --> 01:36:18,080
allowed to modify directly but the

2483
01:36:18,080 --> 01:36:20,320
client may overwrite a system defined

2484
01:36:20,320 --> 01:36:22,000
data by writing the intended

2485
01:36:22,000 --> 01:36:24,639
configuration into running so read-only

2486
01:36:24,639 --> 01:36:26,880
and or writing system configuration they

2487
01:36:26,880 --> 01:36:30,159
look conflicting but they are different

2488
01:36:30,159 --> 01:36:32,880
so and this is the last real content

2489
01:36:32,880 --> 01:36:33,920
slide

2490
01:36:33,920 --> 01:36:35,360
so

2491
01:36:35,360 --> 01:36:37,599
then

2492
01:36:37,679 --> 01:36:40,000
or isaiah

2493
01:36:40,000 --> 01:36:43,199
okay so a question to the group i should

2494
01:36:43,199 --> 01:36:45,199
have given you a little more warning

2495
01:36:45,199 --> 01:36:48,880
um but we would like to know if you are

2496
01:36:48,880 --> 01:36:50,960
interested in the working group

2497
01:36:50,960 --> 01:36:54,480
continuing to discuss this

2498
01:36:56,639 --> 01:36:58,960
so um

2499
01:36:58,960 --> 01:37:01,440
we're gonna hold for just a moment we

2500
01:37:01,440 --> 01:37:04,840
have 37 people hopefully we can get

2501
01:37:04,840 --> 01:37:06,480
um

2502
01:37:06,480 --> 01:37:10,480
little bit more of participation

2503
01:37:13,440 --> 01:37:15,600
so the way this is trending it's clear

2504
01:37:15,600 --> 01:37:18,560
the group is interested in your work

2505
01:37:18,560 --> 01:37:21,119
so we look forward to seeing the next

2506
01:37:21,119 --> 01:37:25,360
revision of the uh document and to uh

2507
01:37:25,360 --> 01:37:27,679
for you to continue discussing it on the

2508
01:37:27,679 --> 01:37:29,600
list as you have been

2509
01:37:29,600 --> 01:37:32,400
so uh thank you very much and you have

2510
01:37:32,400 --> 01:37:34,639
another slot now

2511
01:37:34,639 --> 01:37:36,080
and maybe

2512
01:37:36,080 --> 01:37:40,119
if you can eight minutes

2513
01:37:48,880 --> 01:37:50,239
okay so

2514
01:37:50,239 --> 01:37:51,199
then

2515
01:37:51,199 --> 01:37:54,159
this is about the young extension and

2516
01:37:54,159 --> 01:37:57,600
metadata annotation for invisible flag

2517
01:37:57,600 --> 01:37:57,870
and

2518
01:37:57,870 --> 01:38:00,239
[Music]

2519
01:38:00,239 --> 01:38:02,320
we have blush drawing this work since

2520
01:38:02,320 --> 01:38:04,000
last itef meeting

2521
01:38:04,000 --> 01:38:07,040
so this slide is about the use cases

2522
01:38:07,040 --> 01:38:09,679
that promoted this draft i tried to use

2523
01:38:09,679 --> 01:38:10,560
some

2524
01:38:10,560 --> 01:38:13,040
diagrams to clarify and hopefully they

2525
01:38:13,040 --> 01:38:14,239
can help

2526
01:38:14,239 --> 01:38:16,800
there are two examples the first one

2527
01:38:16,800 --> 01:38:19,520
which is shown on left side of the slide

2528
01:38:19,520 --> 01:38:22,239
and interface data tree the root is the

2529
01:38:22,239 --> 01:38:25,360
container node interfaces and its child

2530
01:38:25,360 --> 01:38:28,639
which is an interface list node exists

2531
01:38:28,639 --> 01:38:30,880
in two interface entries

2532
01:38:30,880 --> 01:38:33,440
inside each one we have the name as the

2533
01:38:33,440 --> 01:38:37,280
keynote interface type and mtu value we

2534
01:38:37,280 --> 01:38:39,360
can see these two interfaces as the

2535
01:38:39,360 --> 01:38:41,199
system defined ones

2536
01:38:41,199 --> 01:38:43,360
when the device is powered on and the

2537
01:38:43,360 --> 01:38:45,760
related hardware is present

2538
01:38:45,760 --> 01:38:48,560
and a client may try to edit some of the

2539
01:38:48,560 --> 01:38:51,360
system predefined values for example a

2540
01:38:51,360 --> 01:38:53,760
client may want to change the interface

2541
01:38:53,760 --> 01:38:56,719
type ethernet into tunnel with an edit

2542
01:38:56,719 --> 01:38:59,360
config operation for example or try to

2543
01:38:59,360 --> 01:39:02,639
modify the mtu value but if a client

2544
01:39:02,639 --> 01:39:05,760
trying to set the type of interface t e

2545
01:39:05,760 --> 01:39:10,000
0 0 other than the predefined ones which

2546
01:39:10,000 --> 01:39:12,639
does not match the real type of the

2547
01:39:12,639 --> 01:39:15,600
interface so will reject that request

2548
01:39:15,600 --> 01:39:18,159
while the configuration such as mtu

2549
01:39:18,159 --> 01:39:20,880
created by the system is free to be

2550
01:39:20,880 --> 01:39:23,199
modified by the client so for this

2551
01:39:23,199 --> 01:39:26,239
example interface type is immutable and

2552
01:39:26,239 --> 01:39:29,199
independent of how it is instantiated

2553
01:39:29,199 --> 01:39:31,760
the immutability is uniform inside

2554
01:39:31,760 --> 01:39:33,600
different interface

2555
01:39:33,600 --> 01:39:35,280
instances

2556
01:39:35,280 --> 01:39:38,080
so while in the right diagram the case

2557
01:39:38,080 --> 01:39:41,119
is different let's say that we have

2558
01:39:41,119 --> 01:39:43,679
applications module to define some

2559
01:39:43,679 --> 01:39:46,480
application layer protocols and in this

2560
01:39:46,480 --> 01:39:49,360
case the application is defined as a

2561
01:39:49,360 --> 01:39:51,920
list which is a child node of

2562
01:39:51,920 --> 01:39:54,960
applications and within the application

2563
01:39:54,960 --> 01:39:57,840
list there is a protocol name which is

2564
01:39:57,840 --> 01:39:59,199
at the key

2565
01:39:59,199 --> 01:40:01,920
and the underline transport protocol tcp

2566
01:40:01,920 --> 01:40:05,119
or udp and the port number and for the

2567
01:40:05,119 --> 01:40:07,520
convenience of the users the system

2568
01:40:07,520 --> 01:40:09,199
predefines a

2569
01:40:09,199 --> 01:40:12,320
number of common applications much more

2570
01:40:12,320 --> 01:40:14,159
than just

2571
01:40:14,159 --> 01:40:16,719
ssh and the tftp

2572
01:40:16,719 --> 01:40:18,639
shown in the diagram and those

2573
01:40:18,639 --> 01:40:21,360
predefined ones are read only and cannot

2574
01:40:21,360 --> 01:40:24,480
be modified or deleted if the predefined

2575
01:40:24,480 --> 01:40:27,280
ones do not meet the requirements of the

2576
01:40:27,280 --> 01:40:29,600
client the client can define their

2577
01:40:29,600 --> 01:40:33,600
custom applications for example ssh

2578
01:40:33,600 --> 01:40:37,360
application with tcp and 22

2579
01:40:37,360 --> 01:40:41,199
000 as the ss report and modification or

2580
01:40:41,199 --> 01:40:43,280
deletion to the custom application

2581
01:40:43,280 --> 01:40:45,760
instance is allowed but the predefined

2582
01:40:45,760 --> 01:40:48,080
ones are read only

2583
01:40:48,080 --> 01:40:50,320
both system defined and user config

2584
01:40:50,320 --> 01:40:53,119
applications can be further applied in

2585
01:40:53,119 --> 01:40:55,520
security policies for application access

2586
01:40:55,520 --> 01:40:56,639
control

2587
01:40:56,639 --> 01:40:59,440
so in this case application list can

2588
01:40:59,440 --> 01:41:02,800
exist in multiple instances but some of

2589
01:41:02,800 --> 01:41:05,600
them are immutable while others are not

2590
01:41:05,600 --> 01:41:08,400
so there are two different kinds of use

2591
01:41:08,400 --> 01:41:11,520
cases of immutable flag here i'm

2592
01:41:11,520 --> 01:41:14,159
using system configuration as examples

2593
01:41:14,159 --> 01:41:16,320
but to remember that the immutable

2594
01:41:16,320 --> 01:41:17,440
concept

2595
01:41:17,440 --> 01:41:18,480
can be

2596
01:41:18,480 --> 01:41:22,799
used outside of system configuration

2597
01:41:24,239 --> 01:41:27,280
so to be more specific we agree that it

2598
01:41:27,280 --> 01:41:29,920
is already the case today that a server

2599
01:41:29,920 --> 01:41:32,719
can reject any configuration for any

2600
01:41:32,719 --> 01:41:35,440
reason for example when a client is

2601
01:41:35,440 --> 01:41:37,600
trying to modify an immutable

2602
01:41:37,600 --> 01:41:40,800
configuration but this work tries to

2603
01:41:40,800 --> 01:41:43,679
provide more visibility to the client

2604
01:41:43,679 --> 01:41:46,239
as to which nodes are immutable i think

2605
01:41:46,239 --> 01:41:48,960
the client can benefit from such a

2606
01:41:48,960 --> 01:41:50,560
standard behavior

2607
01:41:50,560 --> 01:41:53,119
a standard mechanism up to which allows

2608
01:41:53,119 --> 01:41:54,960
it to see what configuration is

2609
01:41:54,960 --> 01:41:57,520
immutable on devices

2610
01:41:57,520 --> 01:41:59,760
so the preferred solution consists of

2611
01:41:59,760 --> 01:42:02,000
two parts both an immutable young

2612
01:42:02,000 --> 01:42:05,040
extension and method notation and for

2613
01:42:05,040 --> 01:42:08,880
young extension we allow an argument

2614
01:42:08,880 --> 01:42:11,440
to named exceptions defined to indicate

2615
01:42:11,440 --> 01:42:14,080
specific operations are permitted for

2616
01:42:14,080 --> 01:42:17,040
example if a create exception is

2617
01:42:17,040 --> 01:42:19,600
declared for a particular data node it

2618
01:42:19,600 --> 01:42:21,520
means that the client is allowed to

2619
01:42:21,520 --> 01:42:23,679
create the instance of that node but

2620
01:42:23,679 --> 01:42:26,320
modification and deletion is not allowed

2621
01:42:26,320 --> 01:42:28,320
and for mandatory annotation it's used

2622
01:42:28,320 --> 01:42:31,360
to indicate that when a particular

2623
01:42:31,360 --> 01:42:33,440
instantiated data node is created the

2624
01:42:33,440 --> 01:42:36,000
client cannot update or delete it

2625
01:42:36,000 --> 01:42:39,840
and this annotation is only applied to

2626
01:42:39,840 --> 01:42:41,840
the list of leave list entries or

2627
01:42:41,840 --> 01:42:43,840
instances inside the particular list

2628
01:42:43,840 --> 01:42:44,960
entries

2629
01:42:44,960 --> 01:42:47,840
and currently it is defined as a boolean

2630
01:42:47,840 --> 01:42:49,840
type but if we can agree with this

2631
01:42:49,840 --> 01:42:52,000
solution we may discuss later if a

2632
01:42:52,000 --> 01:42:54,400
simple trial force is enough

2633
01:42:54,400 --> 01:42:57,360
so since the immutability can be applied

2634
01:42:57,360 --> 01:42:59,920
to a node both in the schematic and in

2635
01:42:59,920 --> 01:43:02,719
the data tree we make a statement that

2636
01:43:02,719 --> 01:43:05,040
the server should not return annotation

2637
01:43:05,040 --> 01:43:08,159
if a particular node is already marked

2638
01:43:08,159 --> 01:43:10,880
marked as immutable by young extension

2639
01:43:10,880 --> 01:43:13,520
without exceptions for update or delete

2640
01:43:13,520 --> 01:43:14,960
operations

2641
01:43:14,960 --> 01:43:18,000
because that means the update audited

2642
01:43:18,000 --> 01:43:20,159
any instance of the data node is not

2643
01:43:20,159 --> 01:43:22,639
allowed so there is no need to annotate

2644
01:43:22,639 --> 01:43:24,400
the instance repeatedly

2645
01:43:24,400 --> 01:43:25,119
there

2646
01:43:25,119 --> 01:43:26,719
that will provide no additional

2647
01:43:26,719 --> 01:43:28,639
information

2648
01:43:28,639 --> 01:43:32,000
so any comments on this

2649
01:43:32,000 --> 01:43:34,480
anthony

2650
01:43:34,800 --> 01:43:37,199
hi and some set liquid um

2651
01:43:37,199 --> 01:43:39,440
immutable by its very name means you

2652
01:43:39,440 --> 01:43:42,159
cannot modify update or delete and i

2653
01:43:42,159 --> 01:43:43,760
just noted there that you're saying

2654
01:43:43,760 --> 01:43:45,040
exceptions

2655
01:43:45,040 --> 01:43:47,199
to specific operations

2656
01:43:47,199 --> 01:43:49,040
and then you've given examples of create

2657
01:43:49,040 --> 01:43:50,960
update and delete

2658
01:43:50,960 --> 01:43:53,040
i think we might just need to clarify

2659
01:43:53,040 --> 01:43:55,199
that if we're talking about things like

2660
01:43:55,199 --> 01:43:58,000
sub-objects which we may be able to

2661
01:43:58,000 --> 01:43:59,040
create

2662
01:43:59,040 --> 01:44:01,600
but the parent cannot be touched

2663
01:44:01,600 --> 01:44:04,560
um because otherwise exception suggests

2664
01:44:04,560 --> 01:44:08,480
that the object is not immutable

2665
01:44:09,840 --> 01:44:12,159
okay

2666
01:44:13,360 --> 01:44:15,280
so flash you do you want to say

2667
01:44:15,280 --> 01:44:17,119
something

2668
01:44:17,119 --> 01:44:18,880
yes i think this might be a

2669
01:44:18,880 --> 01:44:21,840
misunderstanding because this immutable

2670
01:44:21,840 --> 01:44:23,440
with extension

2671
01:44:23,440 --> 01:44:26,320
with exceptions means that you can

2672
01:44:26,320 --> 01:44:28,960
create it but you can't delete it for

2673
01:44:28,960 --> 01:44:31,280
example or you

2674
01:44:31,280 --> 01:44:34,320
or you can say that you can create it or

2675
01:44:34,320 --> 01:44:37,040
modify it but not delete it so maybe the

2676
01:44:37,040 --> 01:44:39,440
immutable is not the best name that we

2677
01:44:39,440 --> 01:44:41,600
can agree on that and any suggestions

2678
01:44:41,600 --> 01:44:43,520
are welcome

2679
01:44:43,520 --> 01:44:45,280
but

2680
01:44:45,280 --> 01:44:49,119
okay yeah but we can call it float

2681
01:44:49,119 --> 01:44:50,239
okay

2682
01:44:50,239 --> 01:44:52,639
and bellage you just gave a uh example

2683
01:44:52,639 --> 01:44:55,679
where there were um two exceptions

2684
01:44:55,679 --> 01:44:57,520
and it's not clear in the draft how you

2685
01:44:57,520 --> 01:44:58,880
support that but i'm glad to hear it

2686
01:44:58,880 --> 01:45:01,880
does

2687
01:45:10,239 --> 01:45:12,159
as a participant i'm really conflicted

2688
01:45:12,159 --> 01:45:14,800
with this work because um i don't like

2689
01:45:14,800 --> 01:45:16,400
the fact that you're sort of potentially

2690
01:45:16,400 --> 01:45:18,159
stopping clients from modifying or

2691
01:45:18,159 --> 01:45:19,440
controlling the configuration which is

2692
01:45:19,440 --> 01:45:21,040
something that they own

2693
01:45:21,040 --> 01:45:22,800
but at the same time i can also

2694
01:45:22,800 --> 01:45:24,639
understand that if servers are doing

2695
01:45:24,639 --> 01:45:26,639
this and going to reject it anyway then

2696
01:45:26,639 --> 01:45:28,239
it's just adding extra information to

2697
01:45:28,239 --> 01:45:30,400
make it easier for them to do it so i'm

2698
01:45:30,400 --> 01:45:32,000
my conflict is are we going to then

2699
01:45:32,000 --> 01:45:34,239
encourage more server implementations to

2700
01:45:34,239 --> 01:45:35,040
then

2701
01:45:35,040 --> 01:45:36,800
choose not to do this or have more

2702
01:45:36,800 --> 01:45:38,080
restrictions and make it hard for

2703
01:45:38,080 --> 01:45:39,679
clients to manage

2704
01:45:39,679 --> 01:45:41,040
another way of thinking about this

2705
01:45:41,040 --> 01:45:43,040
though is about putting the conf of

2706
01:45:43,040 --> 01:45:45,040
what's modifying the running

2707
01:45:45,040 --> 01:45:46,719
configuration that a client has control

2708
01:45:46,719 --> 01:45:49,760
over versus what's in like um system

2709
01:45:49,760 --> 01:45:51,600
configuration so even you delete it from

2710
01:45:51,600 --> 01:45:52,719
the running config you're saying well

2711
01:45:52,719 --> 01:45:54,400
it's going to still be there in system

2712
01:45:54,400 --> 01:45:55,760
and that's another way of thinking about

2713
01:45:55,760 --> 01:45:57,280
it so that could be another way of

2714
01:45:57,280 --> 01:45:58,400
phrasing it

2715
01:45:58,400 --> 01:46:00,639
and the last point i want to make is um

2716
01:46:00,639 --> 01:46:02,560
a game in like in interfaces and things

2717
01:46:02,560 --> 01:46:04,880
be very clear about the fact that you

2718
01:46:04,880 --> 01:46:06,960
can delete the interface and its type

2719
01:46:06,960 --> 01:46:08,400
but you just can't delete the type

2720
01:46:08,400 --> 01:46:10,239
itself once that's been set you can't

2721
01:46:10,239 --> 01:46:12,080
change the type so maybe the draft is

2722
01:46:12,080 --> 01:46:13,600
clear on that point but i'm not with the

2723
01:46:13,600 --> 01:46:15,760
latest version

2724
01:46:15,760 --> 01:46:17,199
while we hear the next question there is

2725
01:46:17,199 --> 01:46:20,000
a poll going on

2726
01:46:21,040 --> 01:46:22,800
same question as the last time are you

2727
01:46:22,800 --> 01:46:24,239
interested in

2728
01:46:24,239 --> 01:46:25,600
us continuing

2729
01:46:25,600 --> 01:46:29,360
why this could encourage uh bad behavior

2730
01:46:29,360 --> 01:46:31,760
i rather see this draft as documenting

2731
01:46:31,760 --> 01:46:33,600
what people are actually doing and in

2732
01:46:33,600 --> 01:46:35,679
some cases this is reasonable and

2733
01:46:35,679 --> 01:46:37,440
existing behavior

2734
01:46:37,440 --> 01:46:39,119
there is running code actually

2735
01:46:39,119 --> 01:46:40,560
implementing this in a major

2736
01:46:40,560 --> 01:46:42,080
implementation

2737
01:46:42,080 --> 01:46:43,840
there are other standard bodies who

2738
01:46:43,840 --> 01:46:47,119
prescribe this kind of behavior so

2739
01:46:47,119 --> 01:46:48,880
better tell than just

2740
01:46:48,880 --> 01:46:53,159
do it in plain english text

2741
01:47:00,400 --> 01:47:03,040
joe clark cisco um i think rob touched

2742
01:47:03,040 --> 01:47:04,960
on the thing that i was concerned about

2743
01:47:04,960 --> 01:47:06,800
looking through this and that is i see a

2744
01:47:06,800 --> 01:47:08,880
lot of language the server must reject

2745
01:47:08,880 --> 01:47:10,719
the server must reject

2746
01:47:10,719 --> 01:47:12,320
and i was going to get up here and say

2747
01:47:12,320 --> 01:47:14,320
well if this is an extension and certain

2748
01:47:14,320 --> 01:47:16,080
yang clients

2749
01:47:16,080 --> 01:47:18,080
can ignore it and

2750
01:47:18,080 --> 01:47:20,639
you also mention snmp and other non-yang

2751
01:47:20,639 --> 01:47:23,199
related things it's really not must

2752
01:47:23,199 --> 01:47:25,520
reject okay they will reject but they

2753
01:47:25,520 --> 01:47:27,600
would have rejected anyway and i think

2754
01:47:27,600 --> 01:47:30,639
that is probably worth calling out more

2755
01:47:30,639 --> 01:47:32,880
explicitly in the text

2756
01:47:32,880 --> 01:47:35,520
to indicate that this is like palace you

2757
01:47:35,520 --> 01:47:37,360
just said more of a documentation more

2758
01:47:37,360 --> 01:47:39,199
of a clarification

2759
01:47:39,199 --> 01:47:41,280
than a

2760
01:47:41,280 --> 01:47:43,440
by nature of this extension is the

2761
01:47:43,440 --> 01:47:45,199
server is enforcing this the server

2762
01:47:45,199 --> 01:47:47,760
would already enforce this and and that

2763
01:47:47,760 --> 01:47:51,280
wasn't clear to me in reading the draft

2764
01:47:51,280 --> 01:47:54,320
okay thanks

2765
01:47:54,719 --> 01:47:56,639
yeah so we we are actually at the end of

2766
01:47:56,639 --> 01:47:59,679
our time uh chiffon uh so

2767
01:47:59,679 --> 01:48:00,880
i think the

2768
01:48:00,880 --> 01:48:02,639
you know the the takeaway that i see

2769
01:48:02,639 --> 01:48:04,880
from this poll is that

2770
01:48:04,880 --> 01:48:07,840
there's still interest in hearing more

2771
01:48:07,840 --> 01:48:09,520
and i think your plan was just to do

2772
01:48:09,520 --> 01:48:10,960
another update

2773
01:48:10,960 --> 01:48:12,639
and then discuss on the list is that

2774
01:48:12,639 --> 01:48:14,400
correct

2775
01:48:14,400 --> 01:48:15,760
yeah

2776
01:48:15,760 --> 01:48:17,840
yeah so since we still have an open

2777
01:48:17,840 --> 01:48:19,920
issue so i will ship that into the

2778
01:48:19,920 --> 01:48:23,119
mailing list i know i'm running off time

2779
01:48:23,119 --> 01:48:25,760
so just put this open show to the

2780
01:48:25,760 --> 01:48:28,320
mailing list

2781
01:48:28,800 --> 01:48:30,960
yeah thank you i do appreciate it and

2782
01:48:30,960 --> 01:48:33,280
it's clearly work that the group is

2783
01:48:33,280 --> 01:48:34,880
interested in so that's it's really good

2784
01:48:34,880 --> 01:48:37,199
to see the contribution thank you um i

2785
01:48:37,199 --> 01:48:38,639
actually got rid of the poll i don't

2786
01:48:38,639 --> 01:48:40,880
know why it's still showing yet oh there

2787
01:48:40,880 --> 01:48:41,840
we go

2788
01:48:41,840 --> 01:48:44,800
thank you whoever maybe can't fix that

2789
01:48:44,800 --> 01:48:47,600
um in the in the last 10 minutes we had

2790
01:48:47,600 --> 01:48:50,719
uh two topics we were going to try to

2791
01:48:50,719 --> 01:48:51,600
hit

2792
01:48:51,600 --> 01:48:54,239
one of them is uh

2793
01:48:54,239 --> 01:48:57,679
yang next and the other one is uh from

2794
01:48:57,679 --> 01:48:58,800
rad

2795
01:48:58,800 --> 01:49:01,280
uh kent rather than having a a large

2796
01:49:01,280 --> 01:49:02,719
discussion on yangnex do you want to

2797
01:49:02,719 --> 01:49:04,960
just summarize sort of where we are and

2798
01:49:04,960 --> 01:49:07,119
what the what our discussion has been in

2799
01:49:07,119 --> 01:49:08,800
our thinking

2800
01:49:08,800 --> 01:49:12,960
yes absolutely thanks um so uh on monday

2801
01:49:12,960 --> 01:49:15,520
the net conf working group um

2802
01:49:15,520 --> 01:49:17,280
you know had a chair-led discussion at

2803
01:49:17,280 --> 01:49:21,040
the very end uh prompted by uh a.d rob

2804
01:49:21,040 --> 01:49:22,000
wilton

2805
01:49:22,000 --> 01:49:24,639
on uh you know whether or not netconf

2806
01:49:24,639 --> 01:49:26,800
should know what we should do about the

2807
01:49:26,800 --> 01:49:30,400
rest conf next and and netconf next uh

2808
01:49:30,400 --> 01:49:31,679
issue trackers

2809
01:49:31,679 --> 01:49:33,599
and one of the things that was mentioned

2810
01:49:33,599 --> 01:49:36,480
is that in netmod there's also the yang

2811
01:49:36,480 --> 01:49:38,560
next issue tracker

2812
01:49:38,560 --> 01:49:41,840
and that any update to yang would

2813
01:49:41,840 --> 01:49:44,159
necessitate updates to netcomp and

2814
01:49:44,159 --> 01:49:45,520
rescoff

2815
01:49:45,520 --> 01:49:47,760
well anyway the takeaway um is that you

2816
01:49:47,760 --> 01:49:49,599
know the the netcomfort group is going

2817
01:49:49,599 --> 01:49:52,880
to do what it can uh to uh you know make

2818
01:49:52,880 --> 01:49:54,840
updates to the protocols without

2819
01:49:54,840 --> 01:49:58,159
requiring um you know

2820
01:49:58,159 --> 01:50:01,199
updates to yang but then here

2821
01:50:01,199 --> 01:50:04,080
in this working group what to do

2822
01:50:04,080 --> 01:50:05,199
uh

2823
01:50:05,199 --> 01:50:06,639
there is

2824
01:50:06,639 --> 01:50:08,159
it was mentioned this has been discussed

2825
01:50:08,159 --> 01:50:10,239
before i think actually initially we

2826
01:50:10,239 --> 01:50:12,719
started talking about yang next

2827
01:50:12,719 --> 01:50:16,800
uh gosh four years ago it seems

2828
01:50:16,800 --> 01:50:18,719
and then we touched on it again

2829
01:50:18,719 --> 01:50:21,119
not too long ago perhaps it was a year

2830
01:50:21,119 --> 01:50:22,000
ago

2831
01:50:22,000 --> 01:50:24,960
and the takeaway uh is that it's

2832
01:50:24,960 --> 01:50:27,520
intrusive and we're unsure if the market

2833
01:50:27,520 --> 01:50:30,000
will accept an update at this time

2834
01:50:30,000 --> 01:50:32,080
um but at the same time we we see that

2835
01:50:32,080 --> 01:50:33,679
you know it's getting old and at the

2836
01:50:33,679 --> 01:50:37,119
edges and we might a refresh it seems

2837
01:50:37,119 --> 01:50:38,960
eminent uh or looming

2838
01:50:38,960 --> 01:50:39,760
um

2839
01:50:39,760 --> 01:50:42,320
and uh but one thing also is that

2840
01:50:42,320 --> 01:50:43,599
it was noted

2841
01:50:43,599 --> 01:50:46,000
any update to yang

2842
01:50:46,000 --> 01:50:48,080
needs to or i should say let me be more

2843
01:50:48,080 --> 01:50:50,840
specific any update to rc

2844
01:50:50,840 --> 01:50:54,159
7950 would necessitate first

2845
01:50:54,159 --> 01:50:57,520
a refactoring or factoring out of all

2846
01:50:57,520 --> 01:51:00,239
the netconf and xml bits

2847
01:51:00,239 --> 01:51:04,480
that are in 7950 to basically make it a

2848
01:51:04,480 --> 01:51:07,360
a protocol independent uh specification

2849
01:51:07,360 --> 01:51:10,639
not tied to netconf

2850
01:51:10,639 --> 01:51:13,440
and uh so um that you know some of the

2851
01:51:13,440 --> 01:51:14,800
discussion that's been going on with the

2852
01:51:14,800 --> 01:51:16,320
chairs and the ad

2853
01:51:16,320 --> 01:51:19,280
is that the netmod working group should

2854
01:51:19,280 --> 01:51:21,599
proceed with a

2855
01:51:21,599 --> 01:51:23,119
7950

2856
01:51:23,119 --> 01:51:24,239
biz

2857
01:51:24,239 --> 01:51:25,280
that

2858
01:51:25,280 --> 01:51:28,639
does not change the yang version it

2859
01:51:28,639 --> 01:51:31,280
would still be yang 1.1

2860
01:51:31,280 --> 01:51:32,480
but

2861
01:51:32,480 --> 01:51:34,560
it would you know basically

2862
01:51:34,560 --> 01:51:36,880
remove all the netcoff and xml specific

2863
01:51:36,880 --> 01:51:38,080
bits

2864
01:51:38,080 --> 01:51:39,920
from it and that would lay the

2865
01:51:39,920 --> 01:51:42,719
groundwork for then uh the the serious

2866
01:51:42,719 --> 01:51:44,639
gang next updates to come in

2867
01:51:44,639 --> 01:51:47,119
and and um and you know for those

2868
01:51:47,119 --> 01:51:49,920
non-compatible changes that that were

2869
01:51:49,920 --> 01:51:52,080
that we need we know are coming

2870
01:51:52,080 --> 01:51:53,280
but um

2871
01:51:53,280 --> 01:51:54,400
you know we're

2872
01:51:54,400 --> 01:51:56,639
we need to do this first part first so

2873
01:51:56,639 --> 01:51:59,119
that's the current plan or thinking

2874
01:51:59,119 --> 01:52:00,800
and uh just wondering from the room if

2875
01:52:00,800 --> 01:52:03,119
there's any agreement to that

2876
01:52:03,119 --> 01:52:05,040
and also if there's any interest in

2877
01:52:05,040 --> 01:52:07,199
working on that certainly

2878
01:52:07,199 --> 01:52:08,480
if anyone's interested in working on

2879
01:52:08,480 --> 01:52:11,199
that you know please approach the chairs

2880
01:52:11,199 --> 01:52:13,519
thank you

2881
01:52:14,239 --> 01:52:15,760
so i think the best way to do this is if

2882
01:52:15,760 --> 01:52:16,880
you have a

2883
01:52:16,880 --> 01:52:19,599
any specific thoughts or objections

2884
01:52:19,599 --> 01:52:20,320
to

2885
01:52:20,320 --> 01:52:22,880
a basically editorial revision of the

2886
01:52:22,880 --> 01:52:26,560
rfc that splits out the language portion

2887
01:52:26,560 --> 01:52:27,840
from the

2888
01:52:27,840 --> 01:52:30,960
net comp portion

2889
01:52:30,960 --> 01:52:32,800
if you have any thoughts or objections

2890
01:52:32,800 --> 01:52:34,560
on that now would be a good time to hear

2891
01:52:34,560 --> 01:52:36,639
it

2892
01:52:37,199 --> 01:52:39,679
i'm not seeing any so the last question

2893
01:52:39,679 --> 01:52:41,760
on that topic is if you are willing to

2894
01:52:41,760 --> 01:52:42,960
work on it

2895
01:52:42,960 --> 01:52:46,400
please contact the chairs or even better

2896
01:52:46,400 --> 01:52:49,280
submit a individual draft on it

2897
01:52:49,280 --> 01:52:52,239
and help us get started thank you

2898
01:52:52,239 --> 01:52:53,199
rob

2899
01:52:53,199 --> 01:52:55,760
um so i actually think that martin might

2900
01:52:55,760 --> 01:52:57,360
already have some starting textures we

2901
01:52:57,360 --> 01:52:58,880
need to we should sync up with him as

2902
01:52:58,880 --> 01:52:59,679
well

2903
01:52:59,679 --> 01:53:02,239
so that might help but i don't know um

2904
01:53:02,239 --> 01:53:05,119
so this is um five minutes just to um

2905
01:53:05,119 --> 01:53:06,880
talk about i gave a presentation to the

2906
01:53:06,880 --> 01:53:08,960
icg at the retreat about how we manage

2907
01:53:08,960 --> 01:53:10,719
uh young worlds in the itf and i had

2908
01:53:10,719 --> 01:53:12,480
some proposals there about how we

2909
01:53:12,480 --> 01:53:13,760
potentially try and do things a bit

2910
01:53:13,760 --> 01:53:16,800
differently and they were quite positive

2911
01:53:16,800 --> 01:53:17,679
of trying to do things with it

2912
01:53:17,679 --> 01:53:19,520
differently and said well off you go go

2913
01:53:19,520 --> 01:53:20,880
and take it to net mode and see what

2914
01:53:20,880 --> 01:53:21,840
they say

2915
01:53:21,840 --> 01:53:22,719
so

2916
01:53:22,719 --> 01:53:24,239
i don't think we've got time to get some

2917
01:53:24,239 --> 01:53:26,400
many answers here but hopefully um i'll

2918
01:53:26,400 --> 01:53:28,320
open up what the issue is and the ideas

2919
01:53:28,320 --> 01:53:30,239
and we can maybe start and and see if

2920
01:53:30,239 --> 01:53:31,360
there's people interested in trying to

2921
01:53:31,360 --> 01:53:32,719
go down this path

2922
01:53:32,719 --> 01:53:34,880
so today uh the itef's really slow the

2923
01:53:34,880 --> 01:53:36,400
publishing model so we sort of know that

2924
01:53:36,400 --> 01:53:37,679
that's fine and we work on lots of

2925
01:53:37,679 --> 01:53:38,719
different young stuff so we go to the

2926
01:53:38,719 --> 01:53:40,320
next slide i don't think in this

2927
01:53:40,320 --> 01:53:42,080
audience we need to say much

2928
01:53:42,080 --> 01:53:43,840
um and the goal of what we're trying to

2929
01:53:43,840 --> 01:53:45,520
produce here is not individual yaml to

2930
01:53:45,520 --> 01:53:47,360
individual protocols we're trying to

2931
01:53:47,360 --> 01:53:50,639
develop a cohesive um api between the

2932
01:53:50,639 --> 01:53:52,800
management client and the device for for

2933
01:53:52,800 --> 01:53:55,599
managing it so although we definitely

2934
01:53:55,599 --> 01:53:57,199
separate animals really what matters is

2935
01:53:57,199 --> 01:53:59,280
do these things work together and solve

2936
01:53:59,280 --> 01:54:00,480
all the problems and things and

2937
01:54:00,480 --> 01:54:02,320
implement all the functionality you need

2938
01:54:02,320 --> 01:54:03,679
and we're doing some work in there to

2939
01:54:03,679 --> 01:54:05,280
help with young packages to bring these

2940
01:54:05,280 --> 01:54:07,199
things together but still in the itf we

2941
01:54:07,199 --> 01:54:09,760
have this goal as does open config for

2942
01:54:09,760 --> 01:54:13,760
doing cohesive api next slide please

2943
01:54:13,760 --> 01:54:16,560
uh we've got some problems though so um

2944
01:54:16,560 --> 01:54:18,000
we're not very focused in the itef of

2945
01:54:18,000 --> 01:54:19,920
doing this cohesive api the way we split

2946
01:54:19,920 --> 01:54:21,679
it out into different working groups we

2947
01:54:21,679 --> 01:54:23,040
paralyzed that in terms of getting the

2948
01:54:23,040 --> 01:54:25,040
yam models done but we don't have the

2949
01:54:25,040 --> 01:54:27,440
sort of focus on one api that the open

2950
01:54:27,440 --> 01:54:31,119
config had um some of the rfc 7950

2951
01:54:31,119 --> 01:54:32,639
update rules make it hard to fix them

2952
01:54:32,639 --> 01:54:34,000
we're working on versioning things to

2953
01:54:34,000 --> 01:54:35,119
help that

2954
01:54:35,119 --> 01:54:37,440
um but the itef is way way too slow i

2955
01:54:37,440 --> 01:54:39,760
mean maybe it's massively too slow here

2956
01:54:39,760 --> 01:54:41,280
and open conflict is getting more

2957
01:54:41,280 --> 01:54:43,199
traction in the market and if you want

2958
01:54:43,199 --> 01:54:44,880
itf to remain relevant in terms of the

2959
01:54:44,880 --> 01:54:46,320
young models that it's producing we need

2960
01:54:46,320 --> 01:54:47,679
to change

2961
01:54:47,679 --> 01:54:49,520
and finally the fractured market i don't

2962
01:54:49,520 --> 01:54:50,639
think is good i don't think that's

2963
01:54:50,639 --> 01:54:52,080
helping young adoption i think that's

2964
01:54:52,080 --> 01:54:53,440
making it harder for operators to choose

2965
01:54:53,440 --> 01:54:54,719
which path to go

2966
01:54:54,719 --> 01:54:56,880
next slide please

2967
01:54:56,880 --> 01:54:58,400
and open config they have problems as

2968
01:54:58,400 --> 01:55:00,719
well because they turn to they turn very

2969
01:55:00,719 --> 01:55:02,400
frequently um

2970
01:55:02,400 --> 01:55:03,679
they in terms of their participation

2971
01:55:03,679 --> 01:55:05,280
it's not so open even though it's named

2972
01:55:05,280 --> 01:55:07,040
open config and the models and the

2973
01:55:07,040 --> 01:55:08,320
design of them are less technically

2974
01:55:08,320 --> 01:55:10,320
flexible um so they have issues they're

2975
01:55:10,320 --> 01:55:11,520
not perfect time it's not like we can

2976
01:55:11,520 --> 01:55:14,000
just say take open config and we're done

2977
01:55:14,000 --> 01:55:16,239
so next slide please

2978
01:55:16,239 --> 01:55:17,040
uh

2979
01:55:17,040 --> 01:55:18,239
next slide i can skip that because

2980
01:55:18,239 --> 01:55:19,840
that's fine

2981
01:55:19,840 --> 01:55:21,280
uh what's all the remaining property to

2982
01:55:21,280 --> 01:55:23,280
deal with so this issue about the itf

2983
01:55:23,280 --> 01:55:24,719
not being focused on a cohesive

2984
01:55:24,719 --> 01:55:26,000
management api that's something we

2985
01:55:26,000 --> 01:55:27,679
definitely need to fix i think the yang

2986
01:55:27,679 --> 01:55:30,000
packages work i hope will will help with

2987
01:55:30,000 --> 01:55:31,119
that and start with that because we'll

2988
01:55:31,119 --> 01:55:33,360
be defining sets of young models that

2989
01:55:33,360 --> 01:55:35,679
work together uh and hopefully finding

2990
01:55:35,679 --> 01:55:37,040
some of the gaps and fixing those so

2991
01:55:37,040 --> 01:55:38,239
that's one thing

2992
01:55:38,239 --> 01:55:40,639
we're already fixing the 7950 rules to

2993
01:55:40,639 --> 01:55:43,119
allow you to version upgrade stuff um

2994
01:55:43,119 --> 01:55:45,199
but some of them but the key one is this

2995
01:55:45,199 --> 01:55:47,040
itef being slow to standardize so next

2996
01:55:47,040 --> 01:55:49,679
slide please

2997
01:55:51,280 --> 01:55:53,760
so the idea is to fundamentally change

2998
01:55:53,760 --> 01:55:56,239
how we manage young models in the itf

2999
01:55:56,239 --> 01:55:58,080
and the idea is to stop publishing them

3000
01:55:58,080 --> 01:56:00,400
in rfcs and instead

3001
01:56:00,400 --> 01:56:02,639
start putting young models in github and

3002
01:56:02,639 --> 01:56:04,800
version the young models themselves in

3003
01:56:04,800 --> 01:56:07,440
github as standard code assets

3004
01:56:07,440 --> 01:56:09,520
and so that raises lots of interesting

3005
01:56:09,520 --> 01:56:11,440
questions and this is not a trivial easy

3006
01:56:11,440 --> 01:56:13,360
change to make because the itf process

3007
01:56:13,360 --> 01:56:15,360
is all about publishing rfc documents

3008
01:56:15,360 --> 01:56:17,040
and things but these aren't documents

3009
01:56:17,040 --> 01:56:18,320
these are code assets and we should be

3010
01:56:18,320 --> 01:56:20,080
treating them as such

3011
01:56:20,080 --> 01:56:22,639
um so the idea therefore is we still

3012
01:56:22,639 --> 01:56:24,639
need some rfcs to sort of support the

3013
01:56:24,639 --> 01:56:26,639
young models that provide the sort of

3014
01:56:26,639 --> 01:56:28,159
descriptive text you get today that

3015
01:56:28,159 --> 01:56:29,760
describe the model behavior and things

3016
01:56:29,760 --> 01:56:31,040
like that so that's all useful that's

3017
01:56:31,040 --> 01:56:32,639
all great that stuff shouldn't

3018
01:56:32,639 --> 01:56:34,560
necessarily have to change at all if

3019
01:56:34,560 --> 01:56:36,639
you're putting in a minor bug fix

3020
01:56:36,639 --> 01:56:38,320
and the example that came up recently in

3021
01:56:38,320 --> 01:56:39,920
the netmod one is the fact that the

3022
01:56:39,920 --> 01:56:43,199
ipaddress type that we use either the

3023
01:56:43,199 --> 01:56:44,880
the definition of address type is wrong

3024
01:56:44,880 --> 01:56:46,960
or we've got 50 rfcs that's using it

3025
01:56:46,960 --> 01:56:49,119
wrong and we need to fix those and i

3026
01:56:49,119 --> 01:56:50,719
look at publishing or republishing 50

3027
01:56:50,719 --> 01:56:52,880
rfcs and go ah i don't do that because

3028
01:56:52,880 --> 01:56:54,639
the amount of work for it to go through

3029
01:56:54,639 --> 01:56:56,800
the g makes that not like a pleasant

3030
01:56:56,800 --> 01:56:57,920
idea

3031
01:56:57,920 --> 01:57:00,800
so so this is the idea um is to try and

3032
01:57:00,800 --> 01:57:03,040
do this um and hopefully try and involve

3033
01:57:03,040 --> 01:57:04,320
this a bit more i think the next slide

3034
01:57:04,320 --> 01:57:06,719
has a few more details and this isn't a

3035
01:57:06,719 --> 01:57:08,080
massively thought out i don't have all

3036
01:57:08,080 --> 01:57:09,599
the answers and really what the picture

3037
01:57:09,599 --> 01:57:12,560
here is to get a fifth of the room is

3038
01:57:12,560 --> 01:57:14,000
yes should we be heading in this

3039
01:57:14,000 --> 01:57:16,880
direction and uh and is there somebody

3040
01:57:16,880 --> 01:57:18,639
who's willing to help

3041
01:57:18,639 --> 01:57:20,400
write some drafts here experimental

3042
01:57:20,400 --> 01:57:22,159
drafts to actually test the waters and

3043
01:57:22,159 --> 01:57:23,520
get people to review this and comment on

3044
01:57:23,520 --> 01:57:25,119
and there'll be a lot of feedback and

3045
01:57:25,119 --> 01:57:26,639
there'll be pushback in various places

3046
01:57:26,639 --> 01:57:28,159
and things but we've got an opportunity

3047
01:57:28,159 --> 01:57:30,560
to try and do this and make it better

3048
01:57:30,560 --> 01:57:32,239
some ideas here is you effectively have

3049
01:57:32,239 --> 01:57:34,400
some level of stable branches

3050
01:57:34,400 --> 01:57:36,080
and you can put in bug fixes and things

3051
01:57:36,080 --> 01:57:37,920
and you'd have some level of reviews for

3052
01:57:37,920 --> 01:57:40,000
minor changes that happen within the

3053
01:57:40,000 --> 01:57:41,440
working group and just keep them there

3054
01:57:41,440 --> 01:57:42,880
like a working group last call and say

3055
01:57:42,880 --> 01:57:44,800
look this looks good this is done and

3056
01:57:44,800 --> 01:57:46,880
then every maybe a few years you might

3057
01:57:46,880 --> 01:57:49,520
then if it's very stable um publish an

3058
01:57:49,520 --> 01:57:51,440
updated version say we're good or if

3059
01:57:51,440 --> 01:57:53,280
you're making major version changes then

3060
01:57:53,280 --> 01:57:56,080
you'd have to go through like a full idf

3061
01:57:56,080 --> 01:57:57,599
last call review so it's trying to get a

3062
01:57:57,599 --> 01:58:00,159
balance between stuff that the

3063
01:58:00,159 --> 01:58:01,840
smaller group of people can agree that

3064
01:58:01,840 --> 01:58:03,760
these are right versus ones that

3065
01:58:03,760 --> 01:58:05,440
actually really need a benefit from a

3066
01:58:05,440 --> 01:58:07,760
wider itif review so so that's my quick

3067
01:58:07,760 --> 01:58:09,199
pitch and comment

3068
01:58:09,199 --> 01:58:10,560
um

3069
01:58:10,560 --> 01:58:12,560
that's reasonably yeah sensitive

3070
01:58:12,560 --> 01:58:13,760
clarifying

3071
01:58:13,760 --> 01:58:15,360
questions

3072
01:58:15,360 --> 01:58:18,000
by continuing this are you thinking

3073
01:58:18,000 --> 01:58:19,679
heading towards an experiment and

3074
01:58:19,679 --> 01:58:21,920
running a process experiment i think

3075
01:58:21,920 --> 01:58:23,599
yeah i think so i think i think that's

3076
01:58:23,599 --> 01:58:25,119
what would be helpful is i'd like

3077
01:58:25,119 --> 01:58:27,040
somebody to help write an experimental

3078
01:58:27,040 --> 01:58:29,440
process process experiment rfc to say if

3079
01:58:29,440 --> 01:58:30,960
you want to try and do this because i

3080
01:58:30,960 --> 01:58:32,639
think we need to write down what it is

3081
01:58:32,639 --> 01:58:34,000
how it's going to work what the rules

3082
01:58:34,000 --> 01:58:36,080
are on things and then try and test it

3083
01:58:36,080 --> 01:58:38,239
and see and refine it and be able to

3084
01:58:38,239 --> 01:58:39,840
take that out and i think we would have

3085
01:58:39,840 --> 01:58:41,840
the support i'll have to check the isg

3086
01:58:41,840 --> 01:58:43,199
of running experiments so we're going to

3087
01:58:43,199 --> 01:58:44,400
do this

3088
01:58:44,400 --> 01:58:46,080
and maybe that's a good way of of

3089
01:58:46,080 --> 01:58:47,440
testing the water without upsetting too

3090
01:58:47,440 --> 01:58:48,880
many people straight away

3091
01:58:48,880 --> 01:58:52,560
how fast do you think you can do this

3092
01:58:54,960 --> 01:58:57,280
if if i can get some help writing some

3093
01:58:57,280 --> 01:58:58,639
of the text i think again reasonably

3094
01:58:58,639 --> 01:59:00,800
fast if i'm stuck with me writing the

3095
01:59:00,800 --> 01:59:02,639
document given how quickly i've

3096
01:59:02,639 --> 01:59:04,320
progressed the two

3097
01:59:04,320 --> 01:59:06,239
young models with me and my workload

3098
01:59:06,239 --> 01:59:07,760
that's the tricky thing but this i think

3099
01:59:07,760 --> 01:59:09,199
this really matters so this is important

3100
01:59:09,199 --> 01:59:10,960
and we have to do this so i chair a

3101
01:59:10,960 --> 01:59:12,719
different group and in that group we

3102
01:59:12,719 --> 01:59:15,599
have a really small document change and

3103
01:59:15,599 --> 01:59:17,599
me as co-chair want to move faster than

3104
01:59:17,599 --> 01:59:20,159
the authors which is weird but

3105
01:59:20,159 --> 01:59:22,880
um i would love to tie together that

3106
01:59:22,880 --> 01:59:26,480
draft and that module with this process

3107
01:59:26,480 --> 01:59:28,639
and get those authors to help you out

3108
01:59:28,639 --> 01:59:30,560
and let's let's run it fast i mean it

3109
01:59:30,560 --> 01:59:32,639
there's it's it's like adding two

3110
01:59:32,639 --> 01:59:34,239
identities to a module this should be a

3111
01:59:34,239 --> 01:59:36,960
no-brainer it should be take you know 10

3112
01:59:36,960 --> 01:59:38,320
minutes but we're going to take 10

3113
01:59:38,320 --> 01:59:40,400
months instead

3114
01:59:40,400 --> 01:59:42,320
so if if there's somebody is anyone here

3115
01:59:42,320 --> 01:59:43,840
in the room they're not in there they're

3116
01:59:43,840 --> 01:59:45,360
not in the room they presented the last

3117
01:59:45,360 --> 01:59:47,679
time but uh we can get them

3118
01:59:47,679 --> 01:59:49,920
okay

3119
01:59:53,920 --> 01:59:55,440
by the way it's italo

3120
01:59:55,440 --> 01:59:59,199
we talked about this at the last meeting

3121
01:59:59,199 --> 02:00:01,520
bernoullis actually i support the id

3122
02:00:01,520 --> 02:00:03,840
and how fast could it be the young

3123
02:00:03,840 --> 02:00:05,679
catalog was done actually with that

3124
02:00:05,679 --> 02:00:08,880
exact id in mind that if the itf was not

3125
02:00:08,880 --> 02:00:11,440
fast enough we just forget about that

3126
02:00:11,440 --> 02:00:12,880
there is a block there with the paper

3127
02:00:12,880 --> 02:00:15,760
from 2015 which says disrupt the itf

3128
02:00:15,760 --> 02:00:19,440
uh process so if we just post the the

3129
02:00:19,440 --> 02:00:21,360
the young module in the catalog and they

3130
02:00:21,360 --> 02:00:23,599
arrive by default there what do we need

3131
02:00:23,599 --> 02:00:25,760
kind of funds up this is the version

3132
02:00:25,760 --> 02:00:28,880
that people are using or not and this is

3133
02:00:28,880 --> 02:00:30,960
the process is actually easy we've got

3134
02:00:30,960 --> 02:00:33,679
everything in place to do that

3135
02:00:33,679 --> 02:00:36,639
so i just heard a co-author volunteering

3136
02:00:36,639 --> 02:00:38,880
thank you benoit

3137
02:00:38,880 --> 02:00:41,840
did i miss that

3138
02:00:42,480 --> 02:00:45,360
kanta's chair uh one person did not

3139
02:00:45,360 --> 02:00:47,199
raise their hand or rather they raised

3140
02:00:47,199 --> 02:00:49,280
their hand saying that they would not uh

3141
02:00:49,280 --> 02:00:50,480
they would not like to see this work

3142
02:00:50,480 --> 02:00:51,920
proceed i'm just wondering if that

3143
02:00:51,920 --> 02:00:53,599
individual would be willing to speak as

3144
02:00:53,599 --> 02:00:55,360
to why they

3145
02:00:55,360 --> 02:00:58,320
did not raise their hand

3146
02:00:59,280 --> 02:01:01,040
you might have to unlock the queue i'll

3147
02:01:01,040 --> 02:01:03,360
do that

3148
02:01:07,280 --> 02:01:09,040
well

3149
02:01:09,040 --> 02:01:12,239
i guess i didn't feel that strongly

3150
02:01:13,119 --> 02:01:15,679
so uh thanks for those two uh lightning

3151
02:01:15,679 --> 02:01:18,880
talks and uh uh we are out now at the

3152
02:01:18,880 --> 02:01:20,639
end of our session appreciate all the

3153
02:01:20,639 --> 02:01:23,119
really good contribution in the room

3154
02:01:23,119 --> 02:01:26,000
online and on the list and look forward

3155
02:01:26,000 --> 02:01:28,000
to seeing you

3156
02:01:28,000 --> 02:01:30,000
in all all those places but hopefully in

3157
02:01:30,000 --> 02:01:35,400
person at the next meeting thank you all

3158
02:02:03,040 --> 02:02:06,040
right

