1
00:00:20,720 --> 00:00:24,080
okay uh welcome to uh privacy pass at uh

2
00:00:24,080 --> 00:00:28,560
iatf 114 uh thanks for uh joining us

3
00:00:28,560 --> 00:00:31,039
um

4
00:00:31,039 --> 00:00:34,239
just real quick uh here's the note well

5
00:00:34,239 --> 00:00:36,000
um i think you're probably well

6
00:00:36,000 --> 00:00:38,800
acquainted with this but if you

7
00:00:38,800 --> 00:00:40,719
need a refresher you can take a quick

8
00:00:40,719 --> 00:00:42,320
look at this

9
00:00:42,320 --> 00:00:44,879
reminder

10
00:00:44,879 --> 00:00:47,280
a couple reminders for this meeting is

11
00:00:47,280 --> 00:00:49,360
it's really helpful to

12
00:00:49,360 --> 00:00:52,160
join the

13
00:00:52,160 --> 00:00:54,239
uh meeting with the on-site tool so you

14
00:00:54,239 --> 00:00:56,000
can join the queue

15
00:00:56,000 --> 00:01:00,079
and so you can um

16
00:01:00,079 --> 00:01:02,640
so we record your attendance as well

17
00:01:02,640 --> 00:01:06,159
uh so please uh join the on-site uh

18
00:01:06,159 --> 00:01:08,320
meeting

19
00:01:08,320 --> 00:01:10,080
thank you also

20
00:01:10,080 --> 00:01:12,159
please uh wear your mask except when

21
00:01:12,159 --> 00:01:13,840
speaking

22
00:01:13,840 --> 00:01:15,759
um

23
00:01:15,759 --> 00:01:19,119
i think that's the main things

24
00:01:19,360 --> 00:01:21,840
uh main thing i want to do right now in

25
00:01:21,840 --> 00:01:24,960
terms of administrative trivia is to get

26
00:01:24,960 --> 00:01:27,119
a note taker

27
00:01:27,119 --> 00:01:29,119
can somebody please volunteer to take

28
00:01:29,119 --> 00:01:32,079
some notes for us

29
00:01:33,200 --> 00:01:35,040
be really helpful let us get us through

30
00:01:35,040 --> 00:01:39,479
our agenda we do need a notetaker

31
00:01:41,520 --> 00:01:44,320
going once

32
00:01:44,399 --> 00:01:45,280
thank you

33
00:01:45,280 --> 00:01:47,439
what's your name

34
00:01:47,439 --> 00:01:50,479
marcus thank you

35
00:01:50,880 --> 00:01:54,159
um so we have a a pretty full agenda

36
00:01:54,159 --> 00:01:55,280
today

37
00:01:55,280 --> 00:01:56,719
um

38
00:01:56,719 --> 00:01:58,640
so with initial discussion about

39
00:01:58,640 --> 00:02:00,640
deployment experience uh status of the

40
00:02:00,640 --> 00:02:02,560
core documents

41
00:02:02,560 --> 00:02:03,759
talk about

42
00:02:03,759 --> 00:02:05,759
rate limited token

43
00:02:05,759 --> 00:02:08,239
and then key consistency and discovery

44
00:02:08,239 --> 00:02:10,399
are there any uh

45
00:02:10,399 --> 00:02:14,000
additions modifications to this agenda

46
00:02:14,000 --> 00:02:18,040
that anybody would like to make

47
00:02:22,080 --> 00:02:25,360
okay then i think we can jump in dude

48
00:02:25,360 --> 00:02:27,840
uh i want to note that we have a full

49
00:02:27,840 --> 00:02:30,640
agenda for our very short session uh so

50
00:02:30,640 --> 00:02:32,800
i will be running a timer to include

51
00:02:32,800 --> 00:02:35,120
both presentation and questions on each

52
00:02:35,120 --> 00:02:37,840
topic

53
00:02:45,840 --> 00:02:46,720
can i

54
00:02:46,720 --> 00:02:48,640
oh yeah you can if you yeah why don't

55
00:02:48,640 --> 00:02:53,359
you do that yeah yeah yeah let me do it

56
00:02:57,920 --> 00:02:59,519
all right

57
00:02:59,519 --> 00:03:02,760
hi everyone

58
00:03:25,120 --> 00:03:27,120
hi everyone um

59
00:03:27,120 --> 00:03:28,560
it's loud

60
00:03:28,560 --> 00:03:31,200
i'm tommy paulie from apple um

61
00:03:31,200 --> 00:03:33,360
one of the co-authors on some of the

62
00:03:33,360 --> 00:03:35,280
documents we have here and i'll be

63
00:03:35,280 --> 00:03:38,319
presenting some of our current status on

64
00:03:38,319 --> 00:03:39,840
implementation

65
00:03:39,840 --> 00:03:42,400
and deployment testing here for privacy

66
00:03:42,400 --> 00:03:45,400
pass

67
00:03:46,080 --> 00:03:48,319
uh so first i wanted to point to some

68
00:03:48,319 --> 00:03:50,400
implementations this is of

69
00:03:50,400 --> 00:03:52,799
the base specs so this is the token

70
00:03:52,799 --> 00:03:54,239
issuance

71
00:03:54,239 --> 00:03:57,920
um and authentication scheme to

72
00:03:57,920 --> 00:03:58,959
request

73
00:03:58,959 --> 00:04:01,120
and redeem tokens

74
00:04:01,120 --> 00:04:02,720
there are

75
00:04:02,720 --> 00:04:03,760
a couple different open source

76
00:04:03,760 --> 00:04:05,360
implementations if you want to try these

77
00:04:05,360 --> 00:04:10,080
out there's one that is uh written in go

78
00:04:10,080 --> 00:04:12,959
that cloudflare has that implements

79
00:04:12,959 --> 00:04:14,799
client origin

80
00:04:14,799 --> 00:04:16,959
a tester issuer either as one thing or

81
00:04:16,959 --> 00:04:18,238
separate things

82
00:04:18,238 --> 00:04:20,160
and you can use it for all the basic

83
00:04:20,160 --> 00:04:21,759
variants and you can also test out the

84
00:04:21,759 --> 00:04:23,520
rate limited variant

85
00:04:23,520 --> 00:04:25,759
so this is a very useful tool for doing

86
00:04:25,759 --> 00:04:28,800
interop there's also a new one coming up

87
00:04:28,800 --> 00:04:30,400
from raphael

88
00:04:30,400 --> 00:04:32,320
that does client origin an issuer for

89
00:04:32,320 --> 00:04:35,520
the basic variants so

90
00:04:35,520 --> 00:04:37,520
if you're interested in building stuff

91
00:04:37,520 --> 00:04:39,120
these are good resources to interrupt

92
00:04:39,120 --> 00:04:40,240
with

93
00:04:40,240 --> 00:04:41,759
but beyond that

94
00:04:41,759 --> 00:04:44,080
we are also doing some non-open source

95
00:04:44,080 --> 00:04:46,960
implementations um and actually getting

96
00:04:46,960 --> 00:04:49,199
some deployment experience

97
00:04:49,199 --> 00:04:52,000
at apple's developer conference

98
00:04:52,000 --> 00:04:55,360
in june we announced that

99
00:04:55,360 --> 00:04:57,600
we want to replace captchas with

100
00:04:57,600 --> 00:04:59,919
uh private access tokens which is really

101
00:04:59,919 --> 00:05:02,000
just privacy pass but that's what

102
00:05:02,000 --> 00:05:04,000
people wanted to call it for branding

103
00:05:04,000 --> 00:05:06,639
reasons um so it is just privacy pass

104
00:05:06,639 --> 00:05:08,880
doing the basic uh

105
00:05:08,880 --> 00:05:10,160
type 2

106
00:05:10,160 --> 00:05:12,880
a publicly verifiable tokens

107
00:05:12,880 --> 00:05:14,639
and so we

108
00:05:14,639 --> 00:05:16,880
introduced a broader developer community

109
00:05:16,880 --> 00:05:18,560
to this concept and pointed back to

110
00:05:18,560 --> 00:05:20,639
privacy pass if they wanted to get more

111
00:05:20,639 --> 00:05:21,759
engaged

112
00:05:21,759 --> 00:05:24,639
so hopefully that will kick up some

113
00:05:24,639 --> 00:05:26,160
interest and i've already seen people

114
00:05:26,160 --> 00:05:29,280
looking at this a little bit more

115
00:05:29,520 --> 00:05:30,720
uh so yeah we're trying to increase

116
00:05:30,720 --> 00:05:31,840
awareness

117
00:05:31,840 --> 00:05:35,120
we are allowing developers of apps to be

118
00:05:35,120 --> 00:05:36,639
able to

119
00:05:36,639 --> 00:05:38,560
do token

120
00:05:38,560 --> 00:05:40,720
uh issuance and redemption

121
00:05:40,720 --> 00:05:42,560
as well as anything that's running

122
00:05:42,560 --> 00:05:44,000
within

123
00:05:44,000 --> 00:05:46,720
uh webkit environments on ios and mac os

124
00:05:46,720 --> 00:05:48,080
will automatically be able to support

125
00:05:48,080 --> 00:05:50,320
this now

126
00:05:50,320 --> 00:05:53,600
and so we have attestation and token

127
00:05:53,600 --> 00:05:55,280
issuance uh

128
00:05:55,280 --> 00:05:56,960
that we're working with to try to kind

129
00:05:56,960 --> 00:05:58,880
of get some tests going on in this

130
00:05:58,880 --> 00:06:00,800
ecosystem but the goal is to have it

131
00:06:00,800 --> 00:06:02,560
grow and to have

132
00:06:02,560 --> 00:06:03,600
you know

133
00:06:03,600 --> 00:06:04,720
other

134
00:06:04,720 --> 00:06:07,039
attestation work and i look forward to

135
00:06:07,039 --> 00:06:07,919
seeing

136
00:06:07,919 --> 00:06:10,560
some of the previous privacy pass

137
00:06:10,560 --> 00:06:12,720
browser extensions etc be updated to be

138
00:06:12,720 --> 00:06:16,479
compatible with the current specs

139
00:06:17,520 --> 00:06:19,680
for the test that you can do with what

140
00:06:19,680 --> 00:06:22,000
we have on ios and mac os

141
00:06:22,000 --> 00:06:23,520
currently

142
00:06:23,520 --> 00:06:26,000
cloudflare and fastly have both deployed

143
00:06:26,000 --> 00:06:27,919
token issuers

144
00:06:27,919 --> 00:06:29,520
that are specifically for this initial

145
00:06:29,520 --> 00:06:31,919
demo experimentation phase

146
00:06:31,919 --> 00:06:34,080
these are the two issuer names you can

147
00:06:34,080 --> 00:06:36,080
find more information about them

148
00:06:36,080 --> 00:06:39,039
uh for our devices we are doing some

149
00:06:39,039 --> 00:06:41,199
attestation with an icloud server that

150
00:06:41,199 --> 00:06:44,560
is doing device and account assession

151
00:06:44,560 --> 00:06:45,840
but

152
00:06:45,840 --> 00:06:48,400
other platforms and other browsers and

153
00:06:48,400 --> 00:06:50,000
applications can do other types of

154
00:06:50,000 --> 00:06:51,440
attestation that could work with these

155
00:06:51,440 --> 00:06:54,080
issuers just as well

156
00:06:54,080 --> 00:06:56,560
ios 16 and mac os ventura are currently

157
00:06:56,560 --> 00:06:58,479
in beta and they

158
00:06:58,479 --> 00:07:00,720
support all the client functionality

159
00:07:00,720 --> 00:07:03,360
automatically

160
00:07:03,360 --> 00:07:05,360
if you want to explicitly test this out

161
00:07:05,360 --> 00:07:07,039
if you have one of these

162
00:07:07,039 --> 00:07:08,160
devices

163
00:07:08,160 --> 00:07:10,400
that's on these builds

164
00:07:10,400 --> 00:07:12,160
there are some demo origins like this

165
00:07:12,160 --> 00:07:14,639
cloudflare one which will just always

166
00:07:14,639 --> 00:07:16,160
say i'm going to give you a captcha

167
00:07:16,160 --> 00:07:18,479
unless you can show me a token

168
00:07:18,479 --> 00:07:19,280
but

169
00:07:19,280 --> 00:07:21,199
also in the wild

170
00:07:21,199 --> 00:07:22,319
there are

171
00:07:22,319 --> 00:07:23,520
deployments that are actually starting

172
00:07:23,520 --> 00:07:25,520
to use this and try it out

173
00:07:25,520 --> 00:07:30,160
in non-forced cases

174
00:07:30,160 --> 00:07:32,160
uh before i get into that just what is

175
00:07:32,160 --> 00:07:34,800
supported here um on our client this is

176
00:07:34,800 --> 00:07:36,639
only doing type two and i believe that's

177
00:07:36,639 --> 00:07:38,880
also the case for

178
00:07:38,880 --> 00:07:41,039
the uh issuers that they are doing the

179
00:07:41,039 --> 00:07:43,360
publicly verifiable basic token types

180
00:07:43,360 --> 00:07:46,560
that are using rsa blind signatures

181
00:07:46,560 --> 00:07:48,560
for our client we are doing a split

182
00:07:48,560 --> 00:07:52,160
origin a tester and issuer model

183
00:07:52,160 --> 00:07:54,400
and our client supports

184
00:07:54,400 --> 00:07:55,440
either

185
00:07:55,440 --> 00:07:59,680
specific origin or cross-origin tokens

186
00:07:59,680 --> 00:08:01,120
and there are some limitations around

187
00:08:01,120 --> 00:08:03,599
what we'll do in the web context we only

188
00:08:03,599 --> 00:08:05,680
accept token challenges and redeem

189
00:08:05,680 --> 00:08:07,360
tokens to things that are first-party

190
00:08:07,360 --> 00:08:09,599
domains within a web context

191
00:08:09,599 --> 00:08:11,280
so that random

192
00:08:11,280 --> 00:08:13,680
ads and other stuff can't start

193
00:08:13,680 --> 00:08:17,919
trying to poke and get tokens out of you

194
00:08:20,720 --> 00:08:21,759
so

195
00:08:21,759 --> 00:08:23,599
cloudflare managed captchas is one of

196
00:08:23,599 --> 00:08:25,759
the things that's already doing

197
00:08:25,759 --> 00:08:28,080
requests for tokens and so

198
00:08:28,080 --> 00:08:30,319
currently right now with these beta

199
00:08:30,319 --> 00:08:31,680
builds

200
00:08:31,680 --> 00:08:34,320
we're seeing 35 000 tokens being issued

201
00:08:34,320 --> 00:08:35,760
per day

202
00:08:35,760 --> 00:08:36,880
um

203
00:08:36,880 --> 00:08:39,120
and 16 000 tokens that are being

204
00:08:39,120 --> 00:08:40,880
redeemed so that you're seeing kind of

205
00:08:40,880 --> 00:08:43,360
like the client fetching batches

206
00:08:43,360 --> 00:08:45,519
um and not necessarily spending them all

207
00:08:45,519 --> 00:08:46,560
but then

208
00:08:46,560 --> 00:08:48,080
we're actually spending them

209
00:08:48,080 --> 00:08:49,360
later to say okay get around this

210
00:08:49,360 --> 00:08:50,320
capture because i've already done the

211
00:08:50,320 --> 00:08:51,920
attestation

212
00:08:51,920 --> 00:08:54,399
and i don't have detailed latency

213
00:08:54,399 --> 00:08:55,760
information but it's all

214
00:08:55,760 --> 00:08:57,279
very very minimal it's not really

215
00:08:57,279 --> 00:08:58,560
impacting

216
00:08:58,560 --> 00:09:00,240
any user facing

217
00:09:00,240 --> 00:09:02,000
things so far so

218
00:09:02,000 --> 00:09:05,360
i believe that's it for these slides

219
00:09:05,360 --> 00:09:08,399
i guess if there are any questions

220
00:09:08,399 --> 00:09:10,000
about the specific implications let me

221
00:09:10,000 --> 00:09:10,880
know

222
00:09:10,880 --> 00:09:12,959
there are links to the open source

223
00:09:12,959 --> 00:09:14,560
repositories if you want to play with

224
00:09:14,560 --> 00:09:15,600
those too

225
00:09:15,600 --> 00:09:17,760
so

226
00:09:17,920 --> 00:09:19,920
please try it out do interoperability

227
00:09:19,920 --> 00:09:22,880
testing if you want

228
00:09:25,519 --> 00:09:27,839
all right

229
00:09:30,000 --> 00:09:31,040
seems like there are no questions that

230
00:09:31,040 --> 00:09:32,320
we can probably

231
00:09:32,320 --> 00:09:34,560
move on do you have anything

232
00:09:34,560 --> 00:09:36,160
oh you are oh nick oh sorry i didn't see

233
00:09:36,160 --> 00:09:36,800
it

234
00:09:36,800 --> 00:09:39,199
hey nick

235
00:09:41,600 --> 00:09:45,519
uh nick dodie cdc um

236
00:09:45,519 --> 00:09:48,160
thanks for uh both translating and

237
00:09:48,160 --> 00:09:50,560
giving us some implementation experience

238
00:09:50,560 --> 00:09:54,000
uh i'm curious whether

239
00:09:54,000 --> 00:09:55,760
well i have lots of questions but i'll

240
00:09:55,760 --> 00:09:57,600
just ask one i'm curious whether we've

241
00:09:57,600 --> 00:10:00,000
considered um

242
00:10:00,000 --> 00:10:03,680
the problem of of over-reliance that

243
00:10:03,680 --> 00:10:05,519
that some developer might just say hey i

244
00:10:05,519 --> 00:10:08,160
hear apple uh can attest to all the

245
00:10:08,160 --> 00:10:10,160
devices uh therefore i'm just gonna

246
00:10:10,160 --> 00:10:11,600
block access

247
00:10:11,600 --> 00:10:14,240
permanently to anyone who who doesn't

248
00:10:14,240 --> 00:10:16,240
get one of these tokens and whether

249
00:10:16,240 --> 00:10:18,000
we've considered sort of either protocol

250
00:10:18,000 --> 00:10:20,000
or implementation implementation changes

251
00:10:20,000 --> 00:10:21,040
that would

252
00:10:21,040 --> 00:10:23,279
withhold a certain small percentage of

253
00:10:23,279 --> 00:10:26,240
the time to encourage the developer to

254
00:10:26,240 --> 00:10:28,880
to realize oh i can't get this the 100

255
00:10:28,880 --> 00:10:30,399
of the time

256
00:10:30,399 --> 00:10:33,279
that's a very very good point um so we

257
00:10:33,279 --> 00:10:34,800
absolutely don't want

258
00:10:34,800 --> 00:10:36,480
reliance like that

259
00:10:36,480 --> 00:10:38,480
um in our communication publicly we're

260
00:10:38,480 --> 00:10:41,200
like do not do i mean you should only do

261
00:10:41,200 --> 00:10:42,880
this if in lieu of a captcha and you

262
00:10:42,880 --> 00:10:44,480
always need to fall back

263
00:10:44,480 --> 00:10:46,800
but of course advice does not give you

264
00:10:46,800 --> 00:10:48,079
everything

265
00:10:48,079 --> 00:10:50,560
one of the nice things is that this it

266
00:10:50,560 --> 00:10:51,839
will not happen all the time and i

267
00:10:51,839 --> 00:10:53,519
didn't go into those details but this

268
00:10:53,519 --> 00:10:55,839
may be something we want to uh

269
00:10:55,839 --> 00:10:58,399
add advice to in the documents probably

270
00:10:58,399 --> 00:11:00,079
i think in the architecture document

271
00:11:00,079 --> 00:11:02,560
let's talk about the whole ecosystem

272
00:11:02,560 --> 00:11:04,320
so

273
00:11:04,320 --> 00:11:05,839
uh first there's a there's actually a

274
00:11:05,839 --> 00:11:07,839
human level toggle where some users can

275
00:11:07,839 --> 00:11:09,519
disable this

276
00:11:09,519 --> 00:11:12,000
but beyond that our attestation system

277
00:11:12,000 --> 00:11:12,880
will

278
00:11:12,880 --> 00:11:15,839
rate limit you but even on the device

279
00:11:15,839 --> 00:11:17,279
we have

280
00:11:17,279 --> 00:11:20,000
limits of when we are willing to get a

281
00:11:20,000 --> 00:11:21,680
token or not so

282
00:11:21,680 --> 00:11:23,680
um we will

283
00:11:23,680 --> 00:11:26,399
not randomly but if we see

284
00:11:26,399 --> 00:11:28,720
more than a couple token requests in a

285
00:11:28,720 --> 00:11:30,320
minute or based on what process you're

286
00:11:30,320 --> 00:11:30,959
in

287
00:11:30,959 --> 00:11:34,240
we will just ignore some requests

288
00:11:34,240 --> 00:11:34,959
so

289
00:11:34,959 --> 00:11:37,519
you certainly would not be able to do

290
00:11:37,519 --> 00:11:40,640
a site that did 100 and have it work but

291
00:11:40,640 --> 00:11:42,320
i agree that this is something that we

292
00:11:42,320 --> 00:11:44,079
should talk about more and i think

293
00:11:44,079 --> 00:11:46,160
having something randomly

294
00:11:46,160 --> 00:11:47,760
uh not due at some percentage of the

295
00:11:47,760 --> 00:11:52,839
time may be one mitigation for this

296
00:11:57,200 --> 00:12:00,720
all right okay thank you tommy

297
00:12:00,880 --> 00:12:01,680
cool

298
00:12:01,680 --> 00:12:04,639
and i think next is the bass drafts yep

299
00:12:04,639 --> 00:12:06,000
and i think i'm

300
00:12:06,000 --> 00:12:07,760
going to present that and then chris

301
00:12:07,760 --> 00:12:09,440
will talk remotely

302
00:12:09,440 --> 00:12:12,000
about the rate limited

303
00:12:12,000 --> 00:12:13,760
unfortunately

304
00:12:13,760 --> 00:12:15,600
a lot of the authors have

305
00:12:15,600 --> 00:12:20,920
conflicts or in mid travel right now so

306
00:12:33,600 --> 00:12:35,519
all right i am still

307
00:12:35,519 --> 00:12:37,200
tommy polly but now i am speaking on

308
00:12:37,200 --> 00:12:40,560
behalf of more co-authors um

309
00:12:40,560 --> 00:12:45,519
chris wood and john iangar steven valdez

310
00:12:45,519 --> 00:12:48,480
amongst others so we have three base

311
00:12:48,480 --> 00:12:50,639
drafts here we have

312
00:12:50,639 --> 00:12:53,519
uh the architecture

313
00:12:53,519 --> 00:12:56,000
which essentially describes the

314
00:12:56,000 --> 00:12:58,240
different models for using privacy paths

315
00:12:58,240 --> 00:13:00,320
and deploying privacy paths

316
00:13:00,320 --> 00:13:02,800
we have the authentication scheme

317
00:13:02,800 --> 00:13:04,959
which is

318
00:13:04,959 --> 00:13:07,440
how an origin can request tokens and

319
00:13:07,440 --> 00:13:09,680
clients can redeem tokens and we have

320
00:13:09,680 --> 00:13:10,880
the protocol

321
00:13:10,880 --> 00:13:13,519
which defines two flavors of token

322
00:13:13,519 --> 00:13:15,040
issuance one that is privately

323
00:13:15,040 --> 00:13:16,560
verifiable and one that is publicly

324
00:13:16,560 --> 00:13:19,560
verifiable

325
00:13:21,920 --> 00:13:24,639
um so this is just a slide to go into

326
00:13:24,639 --> 00:13:26,800
some of the recent changes

327
00:13:26,800 --> 00:13:28,880
uh overall the authors think that these

328
00:13:28,880 --> 00:13:30,639
are

329
00:13:30,639 --> 00:13:32,480
pretty uh

330
00:13:32,480 --> 00:13:35,040
pretty mature and um from like a

331
00:13:35,040 --> 00:13:36,800
technical interrupt standpoint we think

332
00:13:36,800 --> 00:13:38,560
they're

333
00:13:38,560 --> 00:13:40,000
uh done and we'd like to get this moved

334
00:13:40,000 --> 00:13:41,920
along but i think there are things

335
00:13:41,920 --> 00:13:43,920
uh around wording that we still need a

336
00:13:43,920 --> 00:13:46,959
bit of work on but we hope to

337
00:13:46,959 --> 00:13:50,560
consider a last call soonish

338
00:13:50,560 --> 00:13:52,560
some of the recent changes

339
00:13:52,560 --> 00:13:54,959
include for architecture uh clarifying

340
00:13:54,959 --> 00:13:57,760
the trust model removing some old text

341
00:13:57,760 --> 00:13:59,360
that no longer really applied around

342
00:13:59,360 --> 00:14:01,040
parameterization

343
00:14:01,040 --> 00:14:02,720
and adding a bit more text to talk about

344
00:14:02,720 --> 00:14:04,320
centralization although i know there are

345
00:14:04,320 --> 00:14:06,560
other

346
00:14:06,720 --> 00:14:08,160
documents proposed that will go into

347
00:14:08,160 --> 00:14:10,880
more depth there

348
00:14:11,120 --> 00:14:13,040
for the auth scheme based on the

349
00:14:13,040 --> 00:14:16,160
discussions at previous meetings

350
00:14:16,160 --> 00:14:17,760
clarifications around how to support

351
00:14:17,760 --> 00:14:19,839
multiple origin names being related to a

352
00:14:19,839 --> 00:14:21,600
given token were added

353
00:14:21,600 --> 00:14:24,399
we added guidance around how to

354
00:14:24,399 --> 00:14:27,360
handle and process token challenges

355
00:14:27,360 --> 00:14:29,600
clarified what you need to do in order

356
00:14:29,600 --> 00:14:32,000
to prevent double spending depending on

357
00:14:32,000 --> 00:14:34,560
what type of

358
00:14:34,560 --> 00:14:36,800
token context was being added

359
00:14:36,800 --> 00:14:38,800
and we also added test vectors so you

360
00:14:38,800 --> 00:14:39,920
can

361
00:14:39,920 --> 00:14:43,120
confirm your implementations

362
00:14:43,120 --> 00:14:45,680
and uh for the basic issuance uh very

363
00:14:45,680 --> 00:14:47,120
little changed uh there were a couple

364
00:14:47,120 --> 00:14:49,279
things really to clarify

365
00:14:49,279 --> 00:14:52,000
fully how the token verification worked

366
00:14:52,000 --> 00:14:53,760
some of it was just more implicitly

367
00:14:53,760 --> 00:14:54,720
saying oh

368
00:14:54,720 --> 00:14:57,199
you know how blind rsa works but we

369
00:14:57,199 --> 00:15:00,079
tried to make it a little bit more clear

370
00:15:00,079 --> 00:15:01,760
and we also

371
00:15:01,760 --> 00:15:04,240
talked about

372
00:15:04,240 --> 00:15:05,360
how you

373
00:15:05,360 --> 00:15:07,519
get the token validation keys from a

374
00:15:07,519 --> 00:15:11,079
consistent location

375
00:15:14,000 --> 00:15:15,839
uh so

376
00:15:15,839 --> 00:15:18,160
just the the couple open issues we have

377
00:15:18,160 --> 00:15:20,639
that i want to bring up today uh one is

378
00:15:20,639 --> 00:15:23,199
actually just based on an early ayanna

379
00:15:23,199 --> 00:15:24,880
review um ayana has been doing a great

380
00:15:24,880 --> 00:15:27,199
thing of actually before we go through

381
00:15:27,199 --> 00:15:29,279
the full process they are reviewing all

382
00:15:29,279 --> 00:15:30,560
of the working group documents that have

383
00:15:30,560 --> 00:15:32,560
iana considerations in them that are

384
00:15:32,560 --> 00:15:34,079
being presented so

385
00:15:34,079 --> 00:15:35,920
thank you ayanna for doing that

386
00:15:35,920 --> 00:15:37,360
um

387
00:15:37,360 --> 00:15:39,120
so the auth scheme document defines a

388
00:15:39,120 --> 00:15:41,839
registry of token types and the basic

389
00:15:41,839 --> 00:15:44,160
protocol issuance defines two types in

390
00:15:44,160 --> 00:15:46,240
there privately verifiable and a

391
00:15:46,240 --> 00:15:48,480
publicly verifiable token

392
00:15:48,480 --> 00:15:50,240
and the auth scheme also reserves some

393
00:15:50,240 --> 00:15:52,399
types to be able to do greasing

394
00:15:52,399 --> 00:15:54,560
of uh making sure that you can accept

395
00:15:54,560 --> 00:15:56,959
unknown types within your off challenges

396
00:15:56,959 --> 00:15:58,639
and redemption

397
00:15:58,639 --> 00:16:01,120
um ayanna did have a couple questions

398
00:16:01,120 --> 00:16:03,120
uh we were not clear

399
00:16:03,120 --> 00:16:05,279
where this new registry should live

400
00:16:05,279 --> 00:16:06,839
they assumed it would probably be on a

401
00:16:06,839 --> 00:16:09,920
new privacy pass specific page i think

402
00:16:09,920 --> 00:16:11,680
that makes sense so the document now

403
00:16:11,680 --> 00:16:13,600
says that i would like to hear if anyone

404
00:16:13,600 --> 00:16:15,360
disagrees with that

405
00:16:15,360 --> 00:16:17,519
or what we should call it um that's very

406
00:16:17,519 --> 00:16:19,040
much a bike shed and then the other

407
00:16:19,040 --> 00:16:20,560
thing is what do we want the review

408
00:16:20,560 --> 00:16:24,000
policy to be for new entries into this

409
00:16:24,000 --> 00:16:26,320
uh what we put in for now

410
00:16:26,320 --> 00:16:29,360
in the pr is specific specification

411
00:16:29,360 --> 00:16:30,880
required

412
00:16:30,880 --> 00:16:32,959
and so that would involve designating

413
00:16:32,959 --> 00:16:34,880
experts and then requiring that you have

414
00:16:34,880 --> 00:16:39,680
a stable spec in order to allocate this

415
00:16:39,680 --> 00:16:40,959
i don't have particularly strong

416
00:16:40,959 --> 00:16:42,160
opinions this seemed like the right

417
00:16:42,160 --> 00:16:43,920
thing for entirely new

418
00:16:43,920 --> 00:16:45,519
token types because

419
00:16:45,519 --> 00:16:47,040
you have to have a pretty

420
00:16:47,040 --> 00:16:48,720
full specification be able to implement

421
00:16:48,720 --> 00:16:51,360
against it but i'd love to hear opinions

422
00:16:51,360 --> 00:16:54,000
of the working group

423
00:16:56,959 --> 00:16:59,040
if they can find their enqueuing buttons

424
00:16:59,040 --> 00:17:03,000
chris would hello

425
00:17:04,160 --> 00:17:06,160
uh yeah this seems fine um

426
00:17:06,160 --> 00:17:07,520
i don't know if we need to say anything

427
00:17:07,520 --> 00:17:10,160
more about the type of um

428
00:17:10,160 --> 00:17:12,720
like analysis that goes into a token

429
00:17:12,720 --> 00:17:14,559
type before it actually winds its way in

430
00:17:14,559 --> 00:17:17,599
the registry like hpk for comparison

431
00:17:17,599 --> 00:17:18,959
establishes a registry for like

432
00:17:18,959 --> 00:17:20,959
different algorithms and it just says if

433
00:17:20,959 --> 00:17:22,720
you want to be on this list you need to

434
00:17:22,720 --> 00:17:25,119
like have to meet certain properties

435
00:17:25,119 --> 00:17:26,319
um

436
00:17:26,319 --> 00:17:27,679
certain security properties we could say

437
00:17:27,679 --> 00:17:29,520
the same exact thing here um and then

438
00:17:29,520 --> 00:17:32,080
require that the documents like

439
00:17:32,080 --> 00:17:33,919
demonstrate in some way i don't know

440
00:17:33,919 --> 00:17:35,039
what that looks like that they actually

441
00:17:35,039 --> 00:17:37,039
meet the properties but provided that

442
00:17:37,039 --> 00:17:38,640
that's i think that this is a reasonable

443
00:17:38,640 --> 00:17:39,679
way forward

444
00:17:39,679 --> 00:17:41,440
and provided that

445
00:17:41,440 --> 00:17:43,760
who can assess it or able to reason

446
00:17:43,760 --> 00:17:44,720
about the correctness of those

447
00:17:44,720 --> 00:17:46,320
properties

448
00:17:46,320 --> 00:17:48,480
right i don't have the text in front of

449
00:17:48,480 --> 00:17:50,720
me right now that i propose but i i

450
00:17:50,720 --> 00:17:51,520
think

451
00:17:51,520 --> 00:17:53,120
there is a sentence there that it's

452
00:17:53,120 --> 00:17:55,280
recommending what the experts review and

453
00:17:55,280 --> 00:17:56,320
i think it says something along the

454
00:17:56,320 --> 00:17:58,080
lines of like it needs to meet the

455
00:17:58,080 --> 00:17:59,360
properties but

456
00:17:59,360 --> 00:18:00,960
i think that's the interesting sentence

457
00:18:00,960 --> 00:18:02,080
to

458
00:18:02,080 --> 00:18:04,720
make sure is correct that it

459
00:18:04,720 --> 00:18:06,960
that's the right advice to the experts

460
00:18:06,960 --> 00:18:09,200
yeah cool

461
00:18:09,200 --> 00:18:10,080
thank you

462
00:18:10,080 --> 00:18:11,440
hey

463
00:18:11,440 --> 00:18:13,360
there's kenazi yeah quick warrant

464
00:18:13,360 --> 00:18:14,480
enthusiast

465
00:18:14,480 --> 00:18:17,039
uh how is this encoded

466
00:18:17,039 --> 00:18:18,720
uh these are not

467
00:18:18,720 --> 00:18:22,960
varants this is i think a 16-bit

468
00:18:22,960 --> 00:18:25,120
field because having a dependency on

469
00:18:25,120 --> 00:18:27,039
violence here isn't really necessary and

470
00:18:27,039 --> 00:18:29,760
that's a lot of token types

471
00:18:29,760 --> 00:18:31,520
all right just the the really nice thing

472
00:18:31,520 --> 00:18:33,840
about those is um

473
00:18:33,840 --> 00:18:35,919
even though you have 2 to the 62 only

474
00:18:35,919 --> 00:18:37,600
ever use 10.

475
00:18:37,600 --> 00:18:39,360
and but what it means is that you can

476
00:18:39,360 --> 00:18:40,799
like do whatever you want for

477
00:18:40,799 --> 00:18:42,720
experimentation and it makes life a lot

478
00:18:42,720 --> 00:18:44,559
easier so you don't have to do specific

479
00:18:44,559 --> 00:18:46,960
communication required and let people do

480
00:18:46,960 --> 00:18:49,360
i i try to push back on specification

481
00:18:49,360 --> 00:18:51,360
required for the entire space because

482
00:18:51,360 --> 00:18:53,280
the current it encourages people to just

483
00:18:53,280 --> 00:18:54,960
skip by and out together and squat on

484
00:18:54,960 --> 00:18:56,880
values if they don't want to have a

485
00:18:56,880 --> 00:18:59,120
publicly accessible spec

486
00:18:59,120 --> 00:19:00,400
so you're talking about essentially we

487
00:19:00,400 --> 00:19:02,480
you know the approach of reserving some

488
00:19:02,480 --> 00:19:04,559
experimental

489
00:19:04,559 --> 00:19:07,360
values that can never be allocated no so

490
00:19:07,360 --> 00:19:09,200
i mean mt would make this argument

491
00:19:09,200 --> 00:19:10,559
better than i can

492
00:19:10,559 --> 00:19:12,799
but that wasn't a great success in tls

493
00:19:12,799 --> 00:19:14,160
right um

494
00:19:14,160 --> 00:19:15,440
so

495
00:19:15,440 --> 00:19:17,120
rather having somewhere where you can

496
00:19:17,120 --> 00:19:18,480
just have like

497
00:19:18,480 --> 00:19:21,280
uh what's the term um

498
00:19:21,280 --> 00:19:23,440
not

499
00:19:23,679 --> 00:19:24,480
yeah temporary

500
00:19:24,480 --> 00:19:26,400
allocations i think that's fine and that

501
00:19:26,400 --> 00:19:28,559
i think is compatible

502
00:19:28,559 --> 00:19:30,320
with

503
00:19:30,320 --> 00:19:31,760
specification required as far as i

504
00:19:31,760 --> 00:19:32,960
understand like you can ask for a

505
00:19:32,960 --> 00:19:35,600
provisional and then you can always then

506
00:19:35,600 --> 00:19:36,720
say nope

507
00:19:36,720 --> 00:19:38,960
we

508
00:19:39,919 --> 00:19:41,600
is try to make this a bit more like the

509
00:19:41,600 --> 00:19:43,440
quick one you don't have to go full

510
00:19:43,440 --> 00:19:45,760
warrant even though i love that but

511
00:19:45,760 --> 00:19:46,640
saying

512
00:19:46,640 --> 00:19:48,880
some of the space is specification

513
00:19:48,880 --> 00:19:50,799
required and some of the space you can

514
00:19:50,799 --> 00:19:53,520
do provisional but provision all the atf

515
00:19:53,520 --> 00:19:55,120
ioni reserves the right to yank it from

516
00:19:55,120 --> 00:19:57,600
you at any time okay that way

517
00:19:57,600 --> 00:19:59,360
you avoid all these problems and that's

518
00:19:59,360 --> 00:20:01,039
been working really well for us that's a

519
00:20:01,039 --> 00:20:04,000
good clarification just to make in the

520
00:20:04,000 --> 00:20:08,080
ion notes okay

521
00:20:11,360 --> 00:20:12,559
alrighty

522
00:20:12,559 --> 00:20:14,080
if we have no other thoughts on that

523
00:20:14,080 --> 00:20:17,120
then i'll move on

524
00:20:17,600 --> 00:20:18,960
oh

525
00:20:18,960 --> 00:20:20,720
um the other

526
00:20:20,720 --> 00:20:23,679
issue uh number 141

527
00:20:23,679 --> 00:20:25,600
is it was more of a kind of

528
00:20:25,600 --> 00:20:27,440
architectural question about

529
00:20:27,440 --> 00:20:28,720
what

530
00:20:28,720 --> 00:20:31,840
what does the ecosystem do if

531
00:20:31,840 --> 00:20:33,520
the

532
00:20:33,520 --> 00:20:35,039
access attestation service which could

533
00:20:35,039 --> 00:20:37,280
be the issuance service as well

534
00:20:37,280 --> 00:20:40,320
uh stops doing the right thing so like

535
00:20:40,320 --> 00:20:42,559
it just says you know it starts giving

536
00:20:42,559 --> 00:20:44,720
out tokens willy-nilly to people who

537
00:20:44,720 --> 00:20:46,320
aren't trusted or who didn't actually

538
00:20:46,320 --> 00:20:48,159
solve their captcha or didn't meet the

539
00:20:48,159 --> 00:20:49,440
bar

540
00:20:49,440 --> 00:20:51,600
um

541
00:20:51,600 --> 00:20:53,039
and

542
00:20:53,039 --> 00:20:55,280
uh i think chris made this

543
00:20:55,280 --> 00:20:56,799
nice little hilarious spider-man's

544
00:20:56,799 --> 00:20:58,559
pointing at each other

545
00:20:58,559 --> 00:21:00,080
of

546
00:21:00,080 --> 00:21:02,799
essentially the failure modes here are

547
00:21:02,799 --> 00:21:05,360
origins are saying i'm getting

548
00:21:05,360 --> 00:21:07,440
some you know bad traffic

549
00:21:07,440 --> 00:21:08,799
coming in

550
00:21:08,799 --> 00:21:10,400
that you know clearly didn't actually

551
00:21:10,400 --> 00:21:11,679
shouldn't actually have passed the

552
00:21:11,679 --> 00:21:14,080
attestation checks it says issuer you

553
00:21:14,080 --> 00:21:15,360
know why are you giving me these bad

554
00:21:15,360 --> 00:21:17,039
tokens he says hey you know the tester

555
00:21:17,039 --> 00:21:18,480
you're not

556
00:21:18,480 --> 00:21:20,240
uh

557
00:21:20,240 --> 00:21:22,080
doing the right thing and

558
00:21:22,080 --> 00:21:24,080
the tester can be like oh my my checks

559
00:21:24,080 --> 00:21:25,280
are fine how do you know that that's

560
00:21:25,280 --> 00:21:27,280
actually fraudulent so we you know we

561
00:21:27,280 --> 00:21:29,280
definitely need a way out of this

562
00:21:29,280 --> 00:21:31,039
um

563
00:21:31,039 --> 00:21:33,760
and this was chris's suggestion

564
00:21:33,760 --> 00:21:37,600
for how to address this

565
00:21:38,000 --> 00:21:40,480
in general this should be a rather

566
00:21:40,480 --> 00:21:41,919
exceptional event

567
00:21:41,919 --> 00:21:43,200
um

568
00:21:43,200 --> 00:21:45,840
and

569
00:21:47,200 --> 00:21:49,120
essentially the ecosystem needs to come

570
00:21:49,120 --> 00:21:51,360
to

571
00:21:52,000 --> 00:21:54,240
some recognition of hmm

572
00:21:54,240 --> 00:21:56,159
you know either

573
00:21:56,159 --> 00:21:58,159
give away for origins to report back to

574
00:21:58,159 --> 00:21:59,679
the issuer

575
00:21:59,679 --> 00:22:02,400
that things are uh not working as they

576
00:22:02,400 --> 00:22:03,679
would expect

577
00:22:03,679 --> 00:22:05,360
um

578
00:22:05,360 --> 00:22:07,120
so i think we do need some extra text on

579
00:22:07,120 --> 00:22:08,720
this i don't know chris if you wanted to

580
00:22:08,720 --> 00:22:11,280
comment on what you were imagining

581
00:22:11,280 --> 00:22:13,840
here

582
00:22:14,720 --> 00:22:15,600
um

583
00:22:15,600 --> 00:22:17,840
i didn't have anything specific in mind

584
00:22:17,840 --> 00:22:20,400
right now um

585
00:22:20,400 --> 00:22:22,880
because as you say

586
00:22:22,880 --> 00:22:24,640
as i sort of jotted down here i do think

587
00:22:24,640 --> 00:22:26,640
that this will likely vary based on your

588
00:22:26,640 --> 00:22:27,919
particular deployment whether or not

589
00:22:27,919 --> 00:22:29,760
it's like joint to test your issue or

590
00:22:29,760 --> 00:22:31,760
split a tester issue or

591
00:22:31,760 --> 00:22:34,080
um and what the configuration is of the

592
00:22:34,080 --> 00:22:35,600
different parties

593
00:22:35,600 --> 00:22:36,960
um

594
00:22:36,960 --> 00:22:40,640
we might just note that you know if if

595
00:22:40,640 --> 00:22:43,600
things go awry um

596
00:22:43,600 --> 00:22:45,760
signals start firing for reasons that

597
00:22:45,760 --> 00:22:47,919
they shouldn't start firing or whatever

598
00:22:47,919 --> 00:22:51,039
um but this is an exceptional event and

599
00:22:51,039 --> 00:22:52,480
you know applications should deal with

600
00:22:52,480 --> 00:22:53,679
it

601
00:22:53,679 --> 00:22:55,760
some way i don't have a very eloquent

602
00:22:55,760 --> 00:22:57,840
way of like stating that some way right

603
00:22:57,840 --> 00:22:59,600
now but

604
00:22:59,600 --> 00:23:02,559
hasn't described anything specific

605
00:23:02,559 --> 00:23:04,799
yeah it eventually needs to be at the

606
00:23:04,799 --> 00:23:06,799
point where if

607
00:23:06,799 --> 00:23:08,559
some party like an ancestor issuer

608
00:23:08,559 --> 00:23:10,799
starts doing bad things they kind of

609
00:23:10,799 --> 00:23:12,720
need to be kicked out

610
00:23:12,720 --> 00:23:14,640
of who's trusted by the other parties

611
00:23:14,640 --> 00:23:16,320
that you know the origins yeah i no

612
00:23:16,320 --> 00:23:18,000
longer trust this issuer or the issuer

613
00:23:18,000 --> 00:23:19,600
says i no longer trust this a tester

614
00:23:19,600 --> 00:23:20,720
because i need to make sure that my

615
00:23:20,720 --> 00:23:23,200
origins keep trusting me

616
00:23:23,200 --> 00:23:26,480
um yeah so essentially the roles of

617
00:23:26,480 --> 00:23:29,840
running a token issue and service

618
00:23:29,840 --> 00:23:31,520
um

619
00:23:31,520 --> 00:23:32,799
involves

620
00:23:32,799 --> 00:23:34,640
maintaining your credibility and you

621
00:23:34,640 --> 00:23:37,039
need to make sure you have some way of

622
00:23:37,039 --> 00:23:38,320
getting feedback to make sure you're not

623
00:23:38,320 --> 00:23:39,280
doing

624
00:23:39,280 --> 00:23:42,399
you're letting bad clients in

625
00:23:42,720 --> 00:23:44,320
and it's

626
00:23:44,320 --> 00:23:46,159
it's not like i guess if attestation

627
00:23:46,159 --> 00:23:48,000
fails once

628
00:23:48,000 --> 00:23:50,000
that that uh that particular tester

629
00:23:50,000 --> 00:23:51,760
should indefinitely be untrusted i can

630
00:23:51,760 --> 00:23:53,360
imagine scenarios where like

631
00:23:53,360 --> 00:23:54,799
i don't know there's like a zero day and

632
00:23:54,799 --> 00:23:56,159
like somehow for some reason like at

633
00:23:56,159 --> 00:23:58,080
that station is like subverted or

634
00:23:58,080 --> 00:23:59,760
whatever compromise but once that's

635
00:23:59,760 --> 00:24:02,400
patched everything's back to normal so

636
00:24:02,400 --> 00:24:03,679
um

637
00:24:03,679 --> 00:24:05,440
i mean we can work on the text offline i

638
00:24:05,440 --> 00:24:07,120
think but i don't think the

639
00:24:07,120 --> 00:24:08,320
the implication needs to be like

640
00:24:08,320 --> 00:24:10,640
permanent adjustments to the trust model

641
00:24:10,640 --> 00:24:12,640
just like temporary or grounds or

642
00:24:12,640 --> 00:24:14,400
mitigations or something

643
00:24:14,400 --> 00:24:17,039
right someone compromises your tester

644
00:24:17,039 --> 00:24:19,039
if that's detected they take themselves

645
00:24:19,039 --> 00:24:21,039
out of the pool until they can patch

646
00:24:21,039 --> 00:24:24,159
their zero day and then they come back

647
00:24:24,159 --> 00:24:26,559
yeah yeah

648
00:24:26,559 --> 00:24:27,840
cool

649
00:24:27,840 --> 00:24:29,600
all right and i think

650
00:24:29,600 --> 00:24:32,240
that's it um so those are essentially

651
00:24:32,240 --> 00:24:33,919
the main two

652
00:24:33,919 --> 00:24:36,320
open issues we already have the ayana

653
00:24:36,320 --> 00:24:38,240
pull request out so we just need to

654
00:24:38,240 --> 00:24:40,000
refine that based on what we have here

655
00:24:40,000 --> 00:24:40,960
and then we want to add this

656
00:24:40,960 --> 00:24:43,120
architectural text

657
00:24:43,120 --> 00:24:44,880
and beyond that we think these basic

658
00:24:44,880 --> 00:24:48,400
ones are pretty good to go so

659
00:24:48,400 --> 00:24:51,440
if there are other pieces of feedback

660
00:24:51,440 --> 00:24:53,840
on those i'd like to hear it or if the

661
00:24:53,840 --> 00:24:57,200
chairs have any comment around

662
00:24:57,200 --> 00:24:58,559
what they want to see

663
00:24:58,559 --> 00:25:00,400
i think the last call is a good way to

664
00:25:00,400 --> 00:25:01,520
also

665
00:25:01,520 --> 00:25:04,400
initiate reviews

666
00:25:05,600 --> 00:25:08,000
sophia

667
00:25:09,200 --> 00:25:12,799
yes sofia sally from brave um i was

668
00:25:12,799 --> 00:25:16,720
having two questions the first one is

669
00:25:16,720 --> 00:25:19,279
it seems like it's going to be alaska or

670
00:25:19,279 --> 00:25:21,919
at least that's what it's been asked of

671
00:25:21,919 --> 00:25:23,200
is this waiting also on the

672
00:25:23,200 --> 00:25:25,039
standardization or the last call at

673
00:25:25,039 --> 00:25:26,720
least of the documents that currently

674
00:25:26,720 --> 00:25:29,279
are sitting in the cflg like the bo prf

675
00:25:29,279 --> 00:25:31,440
or the blinded rsa that com they're

676
00:25:31,440 --> 00:25:33,279
currently kind of dependencies on the

677
00:25:33,279 --> 00:25:35,279
privacy past main trust

678
00:25:35,279 --> 00:25:36,720
and the second thing

679
00:25:36,720 --> 00:25:39,200
um the new current architecture of the

680
00:25:39,200 --> 00:25:41,520
privacy pass protocol was kind of

681
00:25:41,520 --> 00:25:43,520
introduced on the december of last year

682
00:25:43,520 --> 00:25:44,960
and now it's there's an introduction of

683
00:25:44,960 --> 00:25:45,840
different

684
00:25:45,840 --> 00:25:48,400
issues and the testis and origins and

685
00:25:48,400 --> 00:25:50,320
how they can interact with each other

686
00:25:50,320 --> 00:25:51,840
and there's different ways that they can

687
00:25:51,840 --> 00:25:54,559
either collude with each other or as you

688
00:25:54,559 --> 00:25:56,880
just mentioned in one of the issues the

689
00:25:56,880 --> 00:25:59,120
different entities can be compromised

690
00:25:59,120 --> 00:26:01,440
has there any any interest of actually

691
00:26:01,440 --> 00:26:03,520
of the working group to provide a more

692
00:26:03,520 --> 00:26:05,679
formal documents of any security slash

693
00:26:05,679 --> 00:26:07,600
privacy analysis of the different kind

694
00:26:07,600 --> 00:26:09,679
of attacks and threat model that all of

695
00:26:09,679 --> 00:26:12,159
those entities um colluding or

696
00:26:12,159 --> 00:26:15,840
interacting with each other composed

697
00:26:17,360 --> 00:26:21,600
cool uh for the first one

698
00:26:21,679 --> 00:26:24,720
maybe chris will have opinions on

699
00:26:24,720 --> 00:26:27,200
the relationship with cfrg documents i

700
00:26:27,200 --> 00:26:29,440
think that's kind of up to the chairs of

701
00:26:29,440 --> 00:26:31,760
privacy pass and cfrg to how they want

702
00:26:31,760 --> 00:26:34,080
to coordinate that i think

703
00:26:34,080 --> 00:26:36,880
those other specs are stable enough that

704
00:26:36,880 --> 00:26:38,799
it would be fine to run them in either

705
00:26:38,799 --> 00:26:40,720
order through that but maybe

706
00:26:40,720 --> 00:26:42,400
ship them

707
00:26:42,400 --> 00:26:44,159
off to

708
00:26:44,159 --> 00:26:48,000
the isg or i irs g review

709
00:26:48,000 --> 00:26:49,360
around the same time

710
00:26:49,360 --> 00:26:51,520
that's fine um

711
00:26:51,520 --> 00:26:52,880
and then regarding the other one i think

712
00:26:52,880 --> 00:26:54,960
the document does you know try to talk a

713
00:26:54,960 --> 00:26:57,520
bit about how you do the analysis um if

714
00:26:57,520 --> 00:26:59,039
there are specific things you think the

715
00:26:59,039 --> 00:27:01,120
architecture

716
00:27:01,120 --> 00:27:03,279
should add for extra analysis then we

717
00:27:03,279 --> 00:27:05,120
could add it but i i think it would also

718
00:27:05,120 --> 00:27:07,120
be perfectly fine to have

719
00:27:07,120 --> 00:27:10,400
further documents analyzing different

720
00:27:10,400 --> 00:27:12,720
aspects of this i think in general these

721
00:27:12,720 --> 00:27:14,720
split

722
00:27:14,720 --> 00:27:15,840
models

723
00:27:15,840 --> 00:27:17,120
that we have

724
00:27:17,120 --> 00:27:17,919
for

725
00:27:17,919 --> 00:27:20,399
privacy pass we have for

726
00:27:20,399 --> 00:27:23,440
oblivious http we have for using mask

727
00:27:23,440 --> 00:27:25,200
proxies they all

728
00:27:25,200 --> 00:27:27,840
share some interesting properties and i

729
00:27:27,840 --> 00:27:30,000
know there's even discussion in perigee

730
00:27:30,000 --> 00:27:32,000
about what are the terminologies we use

731
00:27:32,000 --> 00:27:35,679
for doing privacy analysis there so

732
00:27:35,679 --> 00:27:37,200
this certainly should not be the last

733
00:27:37,200 --> 00:27:38,240
word

734
00:27:38,240 --> 00:27:40,640
on how we talk about this architecture

735
00:27:40,640 --> 00:27:42,159
and think about analyzing these

736
00:27:42,159 --> 00:27:45,159
deployments

737
00:27:48,960 --> 00:27:50,480
yeah um

738
00:27:50,480 --> 00:27:52,559
a quick question about credibility of

739
00:27:52,559 --> 00:27:54,320
the entities that you mentioned can you

740
00:27:54,320 --> 00:27:56,080
say more about those like is that going

741
00:27:56,080 --> 00:27:58,559
to be part of the solution

742
00:27:58,559 --> 00:28:00,480
which entities are we talking about that

743
00:28:00,480 --> 00:28:02,799
the parties that involved in this like

744
00:28:02,799 --> 00:28:04,880
you talk about credibility of those

745
00:28:04,880 --> 00:28:07,520
parties if they misbehave or something

746
00:28:07,520 --> 00:28:10,158
like this right

747
00:28:10,480 --> 00:28:11,600
right so

748
00:28:11,600 --> 00:28:13,520
in the architecture

749
00:28:13,520 --> 00:28:15,279
you have the entities that are redeeming

750
00:28:15,279 --> 00:28:18,399
tokens right and they don't

751
00:28:18,399 --> 00:28:20,240
they don't necessarily get to see all

752
00:28:20,240 --> 00:28:21,440
the information about the clients

753
00:28:21,440 --> 00:28:23,039
themselves

754
00:28:23,039 --> 00:28:25,520
and so they have a trust dependency on

755
00:28:25,520 --> 00:28:30,000
the entity that issues tokens um

756
00:28:30,000 --> 00:28:31,120
and

757
00:28:31,120 --> 00:28:33,200
that entity's credibility comes from the

758
00:28:33,200 --> 00:28:35,039
fact that either they are doing their

759
00:28:35,039 --> 00:28:37,279
own attestation or checks like maybe

760
00:28:37,279 --> 00:28:39,039
they had issued captchas or they had

761
00:28:39,039 --> 00:28:40,799
done some verification

762
00:28:40,799 --> 00:28:42,559
or they are working with one or more

763
00:28:42,559 --> 00:28:44,960
other services that can do that

764
00:28:44,960 --> 00:28:46,159
attestation

765
00:28:46,159 --> 00:28:49,039
of the clients um so essentially it is

766
00:28:49,039 --> 00:28:50,880
a transitive

767
00:28:50,880 --> 00:28:52,559
trust

768
00:28:52,559 --> 00:28:55,600
and credibility chain

769
00:28:55,600 --> 00:28:57,360
there and it's essentially up if an

770
00:28:57,360 --> 00:28:59,840
issue is going to work with multiple

771
00:28:59,840 --> 00:29:01,520
forms of attestation it needs to make

772
00:29:01,520 --> 00:29:03,200
sure that

773
00:29:03,200 --> 00:29:04,000
it

774
00:29:04,000 --> 00:29:06,880
is only using kind of good enough ones

775
00:29:06,880 --> 00:29:08,559
to meet the requirements of the origins

776
00:29:08,559 --> 00:29:12,159
that it's serving tokens to

777
00:29:12,159 --> 00:29:15,279
okay that makes sense thanks

778
00:29:15,279 --> 00:29:17,919
and chris

779
00:29:19,520 --> 00:29:21,120
um

780
00:29:21,120 --> 00:29:22,960
yeah just to respond to the crg thing

781
00:29:22,960 --> 00:29:24,000
because you've kind of called me out i

782
00:29:24,000 --> 00:29:26,000
think both of the blind rsa and the vpf

783
00:29:26,000 --> 00:29:27,200
documents are basically ready for

784
00:29:27,200 --> 00:29:28,880
research last call in that group anyways

785
00:29:28,880 --> 00:29:30,799
now the process does take longer

786
00:29:30,799 --> 00:29:32,720
unfortunately um and the iot than it

787
00:29:32,720 --> 00:29:34,559
does in the ietf so i guess it's up to

788
00:29:34,559 --> 00:29:35,919
the chairs as you suggested to figure

789
00:29:35,919 --> 00:29:38,000
out how they want to

790
00:29:38,000 --> 00:29:39,679
stack things and what the pipeline looks

791
00:29:39,679 --> 00:29:40,960
like um

792
00:29:40,960 --> 00:29:43,279
i don't think we need to block on

793
00:29:43,279 --> 00:29:44,399
uh

794
00:29:44,399 --> 00:29:46,559
you know

795
00:29:46,559 --> 00:29:48,399
having gone through all of the process

796
00:29:48,399 --> 00:29:50,320
in zfrg um

797
00:29:50,320 --> 00:29:52,240
to move things forward here

798
00:29:52,240 --> 00:29:54,480
um on the the

799
00:29:54,480 --> 00:29:55,840
comment that was just raised at the mic

800
00:29:55,840 --> 00:29:57,360
regarding like parties behaving

801
00:29:57,360 --> 00:29:58,480
correctly

802
00:29:58,480 --> 00:30:00,080
um

803
00:30:00,080 --> 00:30:01,760
i mean i think pictures sort of par for

804
00:30:01,760 --> 00:30:03,440
the course like we expect article

805
00:30:03,440 --> 00:30:05,200
participants to uh implement the

806
00:30:05,200 --> 00:30:07,200
protocol honestly just like we expect

807
00:30:07,200 --> 00:30:09,440
tls servers to implement that protocol

808
00:30:09,440 --> 00:30:11,520
correctly and not post keys to twitter

809
00:30:11,520 --> 00:30:12,799
or whatever

810
00:30:12,799 --> 00:30:13,679
um

811
00:30:13,679 --> 00:30:15,600
and things break down when they don't

812
00:30:15,600 --> 00:30:17,279
behave correctly and this is a little

813
00:30:17,279 --> 00:30:18,960
bit different in that we're trying to

814
00:30:18,960 --> 00:30:21,039
design against potentially malicious

815
00:30:21,039 --> 00:30:23,440
parties in the protocol um but for the

816
00:30:23,440 --> 00:30:25,760
most part like the the behavior has

817
00:30:25,760 --> 00:30:27,760
specified we we just sort of assume that

818
00:30:27,760 --> 00:30:29,279
they're

819
00:30:29,279 --> 00:30:33,960
um they're following that classification

820
00:30:36,880 --> 00:30:37,840
cool

821
00:30:37,840 --> 00:30:39,600
all right i think we're probably out of

822
00:30:39,600 --> 00:30:41,520
time

823
00:30:41,520 --> 00:30:44,640
okay uh thank you tommy i guess uh you i

824
00:30:44,640 --> 00:30:47,039
believe chris wood is presenting the

825
00:30:47,039 --> 00:30:51,000
next session section

826
00:30:52,850 --> 00:30:56,050
[Music]

827
00:31:00,480 --> 00:31:02,559
okay um

828
00:31:02,559 --> 00:31:04,399
all right uh

829
00:31:04,399 --> 00:31:07,440
so uh this is an update on the rate

830
00:31:07,440 --> 00:31:09,279
limited privacy pass issuance protocol

831
00:31:09,279 --> 00:31:10,880
that we presented last time it's

832
00:31:10,880 --> 00:31:12,720
actually undergoing uh adoption an

833
00:31:12,720 --> 00:31:14,880
adoption call right now i kind of wanted

834
00:31:14,880 --> 00:31:16,960
to um

835
00:31:16,960 --> 00:31:18,880
take a step back from the internal

836
00:31:18,880 --> 00:31:21,600
technical details uh of the protocol

837
00:31:21,600 --> 00:31:23,200
because it is admittedly

838
00:31:23,200 --> 00:31:25,039
somewhat complex um

839
00:31:25,039 --> 00:31:26,799
we tried to spend a lot of time as the

840
00:31:26,799 --> 00:31:28,960
editors of the document clarifying what

841
00:31:28,960 --> 00:31:30,720
the different functions of the protocol

842
00:31:30,720 --> 00:31:32,159
are what the different steps are and

843
00:31:32,159 --> 00:31:34,559
what not um so here i just want to kind

844
00:31:34,559 --> 00:31:36,159
of talk about the high level uh

845
00:31:36,159 --> 00:31:38,399
motivation for the protocol um what the

846
00:31:38,399 --> 00:31:40,320
different properties are in terms of how

847
00:31:40,320 --> 00:31:42,880
much state it has a different uh

848
00:31:42,880 --> 00:31:44,799
different pieces or different

849
00:31:44,799 --> 00:31:46,880
entities in the vertical and what the

850
00:31:46,880 --> 00:31:48,799
what the desired or end resulting

851
00:31:48,799 --> 00:31:50,480
privacy properties are as well as touch

852
00:31:50,480 --> 00:31:52,640
on some open issues

853
00:31:52,640 --> 00:31:54,240
um

854
00:31:54,240 --> 00:31:57,200
so having said that

855
00:31:57,200 --> 00:31:59,519
uh as a recap because it wasn't covered

856
00:31:59,519 --> 00:32:03,200
in the um the base protocol document um

857
00:32:03,200 --> 00:32:06,000
privacy passes now

858
00:32:06,000 --> 00:32:07,120
as a

859
00:32:07,120 --> 00:32:08,559
architecture is composed of two

860
00:32:08,559 --> 00:32:10,000
sub-protocols one of which is the

861
00:32:10,000 --> 00:32:12,480
redemption protocol this is the the

862
00:32:12,480 --> 00:32:14,240
protocol it's run between client and

863
00:32:14,240 --> 00:32:16,000
origin for the purposes of redeeming

864
00:32:16,000 --> 00:32:18,080
tokens and it's based on

865
00:32:18,080 --> 00:32:20,159
well-established http authentication

866
00:32:20,159 --> 00:32:21,679
mechanisms

867
00:32:21,679 --> 00:32:23,519
origin will challenge the client to

868
00:32:23,519 --> 00:32:24,880
present a token

869
00:32:24,880 --> 00:32:26,480
or may challenge the client to present a

870
00:32:26,480 --> 00:32:27,760
token

871
00:32:27,760 --> 00:32:29,840
with certain parameters

872
00:32:29,840 --> 00:32:31,760
in that challenge and the client if it

873
00:32:31,760 --> 00:32:35,600
can satisfy the challenge uh presents a

874
00:32:35,600 --> 00:32:37,519
token in response with its retried

875
00:32:37,519 --> 00:32:39,919
request

876
00:32:40,000 --> 00:32:42,559
issuance as the uh

877
00:32:42,559 --> 00:32:44,399
complementary protocol which effectively

878
00:32:44,399 --> 00:32:46,000
takes one of those token challenges from

879
00:32:46,000 --> 00:32:47,039
the origin

880
00:32:47,039 --> 00:32:50,159
and runs a protocol between the client

881
00:32:50,159 --> 00:32:52,559
to test or an issuer for the purposes of

882
00:32:52,559 --> 00:32:54,480
producing a token that's bound to that

883
00:32:54,480 --> 00:32:57,760
particular token challenge

884
00:32:57,760 --> 00:32:58,480
and

885
00:32:58,480 --> 00:33:00,399
we've sort of arranged things such that

886
00:33:00,399 --> 00:33:02,559
all of the complexity in privacy past is

887
00:33:02,559 --> 00:33:04,880
sort of encapsulated in the issuance

888
00:33:04,880 --> 00:33:06,720
protocol because there's expected to be

889
00:33:06,720 --> 00:33:08,480
sort of like very few implementations of

890
00:33:08,480 --> 00:33:09,440
these

891
00:33:09,440 --> 00:33:11,679
like one implementation of uh one client

892
00:33:11,679 --> 00:33:13,679
inflation that serves many clients and

893
00:33:13,679 --> 00:33:14,960
so on whereas

894
00:33:14,960 --> 00:33:16,000
um

895
00:33:16,000 --> 00:33:16,799
uh

896
00:33:16,799 --> 00:33:18,559
we on the flip side and the redemption

897
00:33:18,559 --> 00:33:20,720
side we wanted adoption to be incredibly

898
00:33:20,720 --> 00:33:22,640
easy so for example in the the basic

899
00:33:22,640 --> 00:33:24,080
type two tokens that tommy was referring

900
00:33:24,080 --> 00:33:26,720
to earlier like consuming and verifying

901
00:33:26,720 --> 00:33:28,480
a token is as simple as verifying an rsa

902
00:33:28,480 --> 00:33:30,480
signature um

903
00:33:30,480 --> 00:33:33,279
it's really straightforward

904
00:33:33,279 --> 00:33:34,960
okay um

905
00:33:34,960 --> 00:33:37,279
i'm gonna walk through sort of how these

906
00:33:37,279 --> 00:33:40,640
two things work in concert

907
00:33:40,720 --> 00:33:42,480
so on the left we have the redemption

908
00:33:42,480 --> 00:33:43,760
protocol

909
00:33:43,760 --> 00:33:45,840
which uh as as day before the origin

910
00:33:45,840 --> 00:33:47,600
produces a public keynote challenge the

911
00:33:47,600 --> 00:33:50,559
client and the output of this uh or in

912
00:33:50,559 --> 00:33:51,919
response to the challenge the client

913
00:33:51,919 --> 00:33:53,600
produces a token

914
00:33:53,600 --> 00:33:55,679
um and the desired property here is that

915
00:33:55,679 --> 00:33:57,919
the origin learns nothing about the

916
00:33:57,919 --> 00:33:59,600
client beyond whether or not it was able

917
00:33:59,600 --> 00:34:02,399
to present a token that it satisfies the

918
00:34:02,399 --> 00:34:04,080
challenge um

919
00:34:04,080 --> 00:34:07,519
that just one bit

920
00:34:07,519 --> 00:34:09,760
on the right hand side um the the

921
00:34:09,760 --> 00:34:11,199
issuance protocol is again takes its

922
00:34:11,199 --> 00:34:13,199
input this public key and challenge

923
00:34:13,199 --> 00:34:15,839
turns it into a token with this advanced

924
00:34:15,839 --> 00:34:17,839
between client to tester and issuer

925
00:34:17,839 --> 00:34:19,520
which for the basic issuance protocol is

926
00:34:19,520 --> 00:34:21,918
just a blind signature protocol or a vrf

927
00:34:21,918 --> 00:34:23,440
protocol or whatever

928
00:34:23,440 --> 00:34:25,280
and the desired property here is that

929
00:34:25,280 --> 00:34:26,800
the issuer learns nothing about the

930
00:34:26,800 --> 00:34:29,440
client um uh in particular that it

931
00:34:29,440 --> 00:34:31,280
cannot link successive requests from the

932
00:34:31,280 --> 00:34:33,199
clients together they each appear as

933
00:34:33,199 --> 00:34:36,879
independent unlinkable requests

934
00:34:38,000 --> 00:34:39,520
unfortunately the basic insurance

935
00:34:39,520 --> 00:34:42,079
protocol does not provide an obvious way

936
00:34:42,079 --> 00:34:43,119
to do

937
00:34:43,119 --> 00:34:45,199
per client rate limiting

938
00:34:45,199 --> 00:34:48,800
so say you had an origin that wanted to

939
00:34:48,800 --> 00:34:50,800
to limit the number of times a

940
00:34:50,800 --> 00:34:52,800
particular client

941
00:34:52,800 --> 00:34:54,800
you know had access to a specific

942
00:34:54,800 --> 00:34:55,918
resource

943
00:34:55,918 --> 00:34:58,640
um it cannot do so because by definition

944
00:34:58,640 --> 00:35:00,320
the only thing it learns from the token

945
00:35:00,320 --> 00:35:01,920
is whether or not the token was able to

946
00:35:01,920 --> 00:35:02,960
present

947
00:35:02,960 --> 00:35:04,800
a valid token and the issuer the only

948
00:35:04,800 --> 00:35:06,079
thing that the issuer learns is whether

949
00:35:06,079 --> 00:35:09,119
or not um uh like token issue and

950
00:35:09,119 --> 00:35:10,800
succeeded it learns nothing about or

951
00:35:10,800 --> 00:35:13,200
there's no concept of state anywhere in

952
00:35:13,200 --> 00:35:15,040
in the issuance flow

953
00:35:15,040 --> 00:35:17,119
um this is problematic because there's a

954
00:35:17,119 --> 00:35:19,760
lot of interesting applications um where

955
00:35:19,760 --> 00:35:21,920
rate limiting is quite useful uh and we

956
00:35:21,920 --> 00:35:23,680
don't want to fall back to things like

957
00:35:23,680 --> 00:35:25,200
rate limiting based on

958
00:35:25,200 --> 00:35:27,119
shared context across clients like ip

959
00:35:27,119 --> 00:35:28,079
addresses

960
00:35:28,079 --> 00:35:29,760
you have meter pay walls where you might

961
00:35:29,760 --> 00:35:31,200
want to limit the number of times a

962
00:35:31,200 --> 00:35:32,800
particular client is able to access some

963
00:35:32,800 --> 00:35:35,359
content you might want to dampen the

964
00:35:35,359 --> 00:35:38,160
damage or activities that spots from a

965
00:35:38,160 --> 00:35:40,240
particular bot form are doing

966
00:35:40,240 --> 00:35:41,359
and so on

967
00:35:41,359 --> 00:35:43,440
rate limiting is used in many many

968
00:35:43,440 --> 00:35:45,599
places so the question we ask ourselves

969
00:35:45,599 --> 00:35:46,880
for this draft is how do we add great

970
00:35:46,880 --> 00:35:48,640
limiting support to privacy pass without

971
00:35:48,640 --> 00:35:50,880
compromising on the security and privacy

972
00:35:50,880 --> 00:35:52,560
properties that were discussed for the

973
00:35:52,560 --> 00:35:55,680
basic instruments protocol

974
00:35:56,880 --> 00:35:59,040
and before talking about sort of the the

975
00:35:59,040 --> 00:36:01,599
mechanism just uh i want to give a quick

976
00:36:01,599 --> 00:36:04,240
reminder for how like rate limiting is

977
00:36:04,240 --> 00:36:07,040
commonly implemented in practice um

978
00:36:07,040 --> 00:36:08,400
uh

979
00:36:08,400 --> 00:36:10,079
typically it's typically done with some

980
00:36:10,079 --> 00:36:11,760
algorithm called a token bucket or a

981
00:36:11,760 --> 00:36:13,200
leaky bucket depending on which textbook

982
00:36:13,200 --> 00:36:14,960
you read where

983
00:36:14,960 --> 00:36:16,480
the token bucket or leaky bucket is

984
00:36:16,480 --> 00:36:20,400
driven by two independent processes um

985
00:36:20,400 --> 00:36:22,480
there's one process which is like the

986
00:36:22,480 --> 00:36:24,320
person trying to access the particular

987
00:36:24,320 --> 00:36:26,720
resource that consumes tokens from this

988
00:36:26,720 --> 00:36:27,920
bucket

989
00:36:27,920 --> 00:36:29,760
and they're only able to access the

990
00:36:29,760 --> 00:36:31,359
resource if there are tokens available

991
00:36:31,359 --> 00:36:33,119
to consume

992
00:36:33,119 --> 00:36:34,160
the

993
00:36:34,160 --> 00:36:35,599
the other process the token

994
00:36:35,599 --> 00:36:37,760
representative process will put tokens

995
00:36:37,760 --> 00:36:40,480
back in the bucket at a sort of fixed

996
00:36:40,480 --> 00:36:42,880
uh recurring rate

997
00:36:42,880 --> 00:36:44,400
and the rate at which you replenish

998
00:36:44,400 --> 00:36:46,320
tokens in the bucket determines the

999
00:36:46,320 --> 00:36:48,079
overall rate limit

1000
00:36:48,079 --> 00:36:50,000
and so the way these two things interact

1001
00:36:50,000 --> 00:36:51,680
the dynamics of the the interaction

1002
00:36:51,680 --> 00:36:53,839
between requesting and consuming tokens

1003
00:36:53,839 --> 00:36:56,480
determines um effectively how clients

1004
00:36:56,480 --> 00:36:58,160
are rate limited

1005
00:36:58,160 --> 00:37:01,359
internally um uh you can think of this

1006
00:37:01,359 --> 00:37:03,280
being implemented uh using like a simple

1007
00:37:03,280 --> 00:37:04,720
hash table so

1008
00:37:04,720 --> 00:37:07,760
um when a you know a token replenish

1009
00:37:07,760 --> 00:37:09,520
event comes in

1010
00:37:09,520 --> 00:37:11,760
the token bucket will just identify the

1011
00:37:11,760 --> 00:37:15,040
context associated with the rate limit

1012
00:37:15,040 --> 00:37:16,960
and then increment some counter

1013
00:37:16,960 --> 00:37:18,880
associated with that particular context

1014
00:37:18,880 --> 00:37:21,520
so in this example

1015
00:37:21,520 --> 00:37:23,520
there the context is an entry in a hash

1016
00:37:23,520 --> 00:37:25,359
table there's a previous count and

1017
00:37:25,359 --> 00:37:26,880
associated with it and just bumps up the

1018
00:37:26,880 --> 00:37:30,880
count by t et is the replenish account

1019
00:37:31,200 --> 00:37:32,960
requesting a resource does exactly the

1020
00:37:32,960 --> 00:37:34,960
same thing

1021
00:37:34,960 --> 00:37:36,640
uh to identify the writ limiting

1022
00:37:36,640 --> 00:37:38,880
contacts and then go into the hash table

1023
00:37:38,880 --> 00:37:41,119
but now it just decrements you know the

1024
00:37:41,119 --> 00:37:43,280
the counter associated with it and if

1025
00:37:43,280 --> 00:37:45,200
tokens are available process the request

1026
00:37:45,200 --> 00:37:49,879
if not drops the request on the floor

1027
00:37:50,880 --> 00:37:52,480
okay um

1028
00:37:52,480 --> 00:37:55,119
so uh we wanted to implement basically

1029
00:37:55,119 --> 00:37:57,440
this functionality uh under certain

1030
00:37:57,440 --> 00:37:59,920
constraints um

1031
00:37:59,920 --> 00:38:01,760
uh as i was saying before we want to

1032
00:38:01,760 --> 00:38:03,119
maintain the security and privacy

1033
00:38:03,119 --> 00:38:04,400
properties that we originally had in the

1034
00:38:04,400 --> 00:38:05,520
protocol

1035
00:38:05,520 --> 00:38:07,920
in particular we don't want the origin

1036
00:38:07,920 --> 00:38:10,640
to learn anything beyond a bit and this

1037
00:38:10,640 --> 00:38:12,480
bit in this case is

1038
00:38:12,480 --> 00:38:14,480
not only was a client able to produce a

1039
00:38:14,480 --> 00:38:15,359
token

1040
00:38:15,359 --> 00:38:16,880
but

1041
00:38:16,880 --> 00:38:19,119
the the client was able to produce a

1042
00:38:19,119 --> 00:38:21,119
token without exceeding the rate limit

1043
00:38:21,119 --> 00:38:23,920
that is that is effectively the bit um

1044
00:38:23,920 --> 00:38:25,920
any other sort of state at the origin

1045
00:38:25,920 --> 00:38:27,760
side could be potentially used to track

1046
00:38:27,760 --> 00:38:29,440
clients and so we didn't we didn't even

1047
00:38:29,440 --> 00:38:31,520
want to explore that avenue

1048
00:38:31,520 --> 00:38:33,920
um we also wanted adoption to being as

1049
00:38:33,920 --> 00:38:36,079
simple as it was for privacy pass um in

1050
00:38:36,079 --> 00:38:37,599
fact the the tokens that are produced

1051
00:38:37,599 --> 00:38:38,880
for the rate limiting version are

1052
00:38:38,880 --> 00:38:41,280
indistinguishable from uh the tokens for

1053
00:38:41,280 --> 00:38:42,800
the basic issuance protocol both

1054
00:38:42,800 --> 00:38:44,839
verified with the rsa

1055
00:38:44,839 --> 00:38:47,839
signature um we wanted the issuance

1056
00:38:47,839 --> 00:38:49,520
protocol the thing that actually

1057
00:38:49,520 --> 00:38:52,640
produces tokens and necessarily deals

1058
00:38:52,640 --> 00:38:54,400
with the state aspect of rate limiting

1059
00:38:54,400 --> 00:38:57,200
to be as close to stateless as possible

1060
00:38:57,200 --> 00:38:58,480
of course it can't be stateless because

1061
00:38:58,480 --> 00:38:59,839
then you can't be really rate limiting

1062
00:38:59,839 --> 00:39:01,280
someone has to have stake around like

1063
00:39:01,280 --> 00:39:03,760
how many things uh how many tokens were

1064
00:39:03,760 --> 00:39:05,760
uh issued for a particular client origin

1065
00:39:05,760 --> 00:39:08,079
pair um and the question is like where

1066
00:39:08,079 --> 00:39:10,000
is that state captain how is it

1067
00:39:10,000 --> 00:39:12,880
enforced and whatnot

1068
00:39:13,040 --> 00:39:14,560
but we want to minimize the state

1069
00:39:14,560 --> 00:39:17,119
because we want to you know make it easy

1070
00:39:17,119 --> 00:39:18,000
or

1071
00:39:18,000 --> 00:39:21,599
to actually operate an issue or a tester

1072
00:39:21,599 --> 00:39:24,560
um and importantly for um certain

1073
00:39:24,560 --> 00:39:26,000
deployment models of privacy pass we

1074
00:39:26,000 --> 00:39:28,160
want to make sure that neither a tester

1075
00:39:28,160 --> 00:39:30,400
nor issue are able to link client origin

1076
00:39:30,400 --> 00:39:33,040
pairs together so right now in the basic

1077
00:39:33,040 --> 00:39:35,040
issuance protocol there's no there's no

1078
00:39:35,040 --> 00:39:36,880
information exposed to the issuer during

1079
00:39:36,880 --> 00:39:40,079
issuance um but if we

1080
00:39:40,079 --> 00:39:41,839
now consider a rate that's applied on a

1081
00:39:41,839 --> 00:39:43,520
per-origin basis

1082
00:39:43,520 --> 00:39:46,000
someone intuitively someone has to see

1083
00:39:46,000 --> 00:39:48,640
uh or enforce some state based on a

1084
00:39:48,640 --> 00:39:50,880
specific client and a specific origin

1085
00:39:50,880 --> 00:39:52,560
but we did not want that state to reveal

1086
00:39:52,560 --> 00:39:54,400
anything about a specific client going

1087
00:39:54,400 --> 00:39:57,359
to a specific origin like you know my

1088
00:39:57,359 --> 00:39:59,280
my laptop going to example.com or

1089
00:39:59,280 --> 00:40:00,720
whatever

1090
00:40:00,720 --> 00:40:01,520
um

1091
00:40:01,520 --> 00:40:03,359
so uh we're trying we're aiming for

1092
00:40:03,359 --> 00:40:05,760
something that's close to like oh db and

1093
00:40:05,760 --> 00:40:08,800
odo and sort of style where one party

1094
00:40:08,800 --> 00:40:10,960
sees like half of the half of the

1095
00:40:10,960 --> 00:40:13,359
equation

1096
00:40:15,040 --> 00:40:15,920
okay

1097
00:40:15,920 --> 00:40:17,920
so functionally what the issuance

1098
00:40:17,920 --> 00:40:19,680
protocol does in this document is it

1099
00:40:19,680 --> 00:40:22,400
extends the basic issuance protocol with

1100
00:40:22,400 --> 00:40:25,280
a couple of new properties and features

1101
00:40:25,280 --> 00:40:27,440
um the first of which is that the issuer

1102
00:40:27,440 --> 00:40:29,280
that's actually producing a torque and

1103
00:40:29,280 --> 00:40:31,359
necessarily learns the origin associated

1104
00:40:31,359 --> 00:40:32,880
with the token challenge

1105
00:40:32,880 --> 00:40:34,240
because

1106
00:40:34,240 --> 00:40:36,640
this is necessary because the

1107
00:40:36,640 --> 00:40:38,400
rate limits that are sort of enforced in

1108
00:40:38,400 --> 00:40:39,839
the system uh

1109
00:40:39,839 --> 00:40:41,920
potentially differ on a per origin basis

1110
00:40:41,920 --> 00:40:44,079
so the issuer needs to learn which

1111
00:40:44,079 --> 00:40:46,000
origin is this token request for so i

1112
00:40:46,000 --> 00:40:48,400
can pick the right limit and and respond

1113
00:40:48,400 --> 00:40:50,800
accordingly

1114
00:40:50,800 --> 00:40:51,599
um

1115
00:40:51,599 --> 00:40:54,400
a testers in this uh in this protocol

1116
00:40:54,400 --> 00:40:55,839
have a uh

1117
00:40:55,839 --> 00:40:57,440
much more responsibility than they do in

1118
00:40:57,440 --> 00:41:00,240
the basic issuance protocol um beyond

1119
00:41:00,240 --> 00:41:02,000
just relaying requests and responses

1120
00:41:02,000 --> 00:41:04,240
back and forth between client and issuer

1121
00:41:04,240 --> 00:41:05,839
they now learn what we refer to as a

1122
00:41:05,839 --> 00:41:08,720
stable mapping or as sort of uh

1123
00:41:08,720 --> 00:41:10,160
described earlier the rate limiting

1124
00:41:10,160 --> 00:41:13,520
context on a uh that is specific to a

1125
00:41:13,520 --> 00:41:15,839
per client secret and a per origin

1126
00:41:15,839 --> 00:41:18,319
secret and that word secret is important

1127
00:41:18,319 --> 00:41:20,400
as a tester doesn't learn

1128
00:41:20,400 --> 00:41:23,119
like client a is going to example.com it

1129
00:41:23,119 --> 00:41:26,400
learns client a is going to random thing

1130
00:41:26,400 --> 00:41:28,640
and then client b is going to different

1131
00:41:28,640 --> 00:41:30,000
random thing

1132
00:41:30,000 --> 00:41:31,200
um

1133
00:41:31,200 --> 00:41:33,760
and this state is necessary uh because

1134
00:41:33,760 --> 00:41:34,800
this

1135
00:41:34,800 --> 00:41:36,800
in this particular design of the

1136
00:41:36,800 --> 00:41:39,359
solution we have the attester

1137
00:41:39,359 --> 00:41:41,200
is the entity responsible for enforcing

1138
00:41:41,200 --> 00:41:43,760
the rate limits on uh per client and per

1139
00:41:43,760 --> 00:41:46,560
origin on a per client of origin basis

1140
00:41:46,560 --> 00:41:48,240
which we think is a reasonable trade-off

1141
00:41:48,240 --> 00:41:50,640
given all things considered

1142
00:41:50,640 --> 00:41:52,880
um uh and also differently from the

1143
00:41:52,880 --> 00:41:54,800
basic issuance protocol token requests

1144
00:41:54,800 --> 00:41:56,960
can now fail because if you try to issue

1145
00:41:56,960 --> 00:41:58,560
a token or request a token you've

1146
00:41:58,560 --> 00:42:00,000
exceeded your rate limit the tester will

1147
00:42:00,000 --> 00:42:02,480
just drop your request on the floor or

1148
00:42:02,480 --> 00:42:04,079
as actually happens in the protocol it

1149
00:42:04,079 --> 00:42:07,359
returns an error to the client

1150
00:42:08,400 --> 00:42:12,000
okay so uh functionally just sort of

1151
00:42:12,000 --> 00:42:13,119
walk you through what the issuance

1152
00:42:13,119 --> 00:42:14,560
protocol does at a very high level

1153
00:42:14,560 --> 00:42:15,920
without describing any of the technical

1154
00:42:15,920 --> 00:42:18,000
details internally those are best kept

1155
00:42:18,000 --> 00:42:19,839
to the draft uh this is just the

1156
00:42:19,839 --> 00:42:21,440
issuance protocol the redemption

1157
00:42:21,440 --> 00:42:23,280
protocol remains the same

1158
00:42:23,280 --> 00:42:24,640
uh

1159
00:42:24,640 --> 00:42:26,160
you'll notice on the left as input to

1160
00:42:26,160 --> 00:42:27,359
the client there's some public keys

1161
00:42:27,359 --> 00:42:28,880
there's a challenge there's some other

1162
00:42:28,880 --> 00:42:32,160
things um uh specifically a secret key

1163
00:42:32,160 --> 00:42:34,720
skc that the client maintains for uh

1164
00:42:34,720 --> 00:42:36,720
sort of its uh

1165
00:42:36,720 --> 00:42:38,720
for all of the rate limited requests

1166
00:42:38,720 --> 00:42:41,520
that it has to um or that it wants to

1167
00:42:41,520 --> 00:42:42,960
access through a particular tester

1168
00:42:42,960 --> 00:42:44,400
because that's that's the perkline

1169
00:42:44,400 --> 00:42:45,520
secret

1170
00:42:45,520 --> 00:42:46,800
um

1171
00:42:46,800 --> 00:42:48,720
but anyways uh there's a request

1172
00:42:48,720 --> 00:42:50,560
response flow between client to tester

1173
00:42:50,560 --> 00:42:53,520
and issuer and what the tester does uh

1174
00:42:53,520 --> 00:42:55,119
using this request response flow is

1175
00:42:55,119 --> 00:42:56,960
basically compute the stable mapping or

1176
00:42:56,960 --> 00:42:59,040
compute the rate of any context

1177
00:42:59,040 --> 00:43:00,720
um decrement

1178
00:43:00,720 --> 00:43:01,839
uh

1179
00:43:01,839 --> 00:43:03,040
account associated with that rate

1180
00:43:03,040 --> 00:43:05,760
limiting context and then

1181
00:43:05,760 --> 00:43:08,079
respond to the client with an error or

1182
00:43:08,079 --> 00:43:10,079
with the token request accordingly and

1183
00:43:10,079 --> 00:43:12,800
there's a lot of like complexity in it

1184
00:43:12,800 --> 00:43:14,079
or there's a lot of stuff that happens

1185
00:43:14,079 --> 00:43:16,720
behind the scenes to actually do this um

1186
00:43:16,720 --> 00:43:18,800
this actual stable mapping computation

1187
00:43:18,800 --> 00:43:21,440
um and do it in such a way that the like

1188
00:43:21,440 --> 00:43:22,319
the

1189
00:43:22,319 --> 00:43:24,560
a tester can't like try to

1190
00:43:24,560 --> 00:43:27,440
figure out what the client was after um

1191
00:43:27,440 --> 00:43:28,960
uh with without the client's active

1192
00:43:28,960 --> 00:43:30,960
participation

1193
00:43:30,960 --> 00:43:33,440
mary if it's okay um can i take

1194
00:43:33,440 --> 00:43:36,079
questions at the end

1195
00:43:38,160 --> 00:43:39,359
she's in the room i can't hear okay

1196
00:43:39,359 --> 00:43:40,720
thank you miriam

1197
00:43:40,720 --> 00:43:42,720
um

1198
00:43:42,720 --> 00:43:45,040
uh as a result of this particular design

1199
00:43:45,040 --> 00:43:47,520
um the the way state is split across the

1200
00:43:47,520 --> 00:43:49,520
the various participants is as follows

1201
00:43:49,520 --> 00:43:51,680
the so as before the basic issuance

1202
00:43:51,680 --> 00:43:53,599
protocol the origin keeps uh sort of a

1203
00:43:53,599 --> 00:43:54,880
constant amount of state in particular

1204
00:43:54,880 --> 00:43:57,280
it just keeps the token associated with

1205
00:43:57,280 --> 00:43:59,920
uh the token or the public key necessary

1206
00:43:59,920 --> 00:44:01,680
to validate tokens

1207
00:44:01,680 --> 00:44:04,319
uh clients maintain uh state that's on

1208
00:44:04,319 --> 00:44:06,160
the order of uh the number of servers

1209
00:44:06,160 --> 00:44:07,359
that they want to

1210
00:44:07,359 --> 00:44:08,560
request

1211
00:44:08,560 --> 00:44:10,880
a testers now maintain the most amount

1212
00:44:10,880 --> 00:44:12,160
of state

1213
00:44:12,160 --> 00:44:14,800
on the order of the number of clients

1214
00:44:14,800 --> 00:44:17,200
multiplied by the number of servers that

1215
00:44:17,200 --> 00:44:19,599
all those clients are accessing

1216
00:44:19,599 --> 00:44:21,760
and issuers only maintain state that's

1217
00:44:21,760 --> 00:44:23,359
on the order of the number of servers

1218
00:44:23,359 --> 00:44:24,720
that are

1219
00:44:24,720 --> 00:44:26,079
actively

1220
00:44:26,079 --> 00:44:30,000
configured for this particular issuer

1221
00:44:31,760 --> 00:44:32,880
um

1222
00:44:32,880 --> 00:44:34,480
there's

1223
00:44:34,480 --> 00:44:35,359
i guess

1224
00:44:35,359 --> 00:44:37,839
looking at the privacy properties um

1225
00:44:37,839 --> 00:44:39,680
uh as before it's not possible for

1226
00:44:39,680 --> 00:44:41,200
origen or tester to link any two

1227
00:44:41,200 --> 00:44:42,640
requests together to the same client so

1228
00:44:42,640 --> 00:44:44,480
we'd sort of maintain parity with basic

1229
00:44:44,480 --> 00:44:46,560
privacy pass here but as i said the

1230
00:44:46,560 --> 00:44:48,480
tester does learn this sort of state

1231
00:44:48,480 --> 00:44:50,960
this rate limiting context um based on a

1232
00:44:50,960 --> 00:44:52,880
per client and prohibition secret

1233
00:44:52,880 --> 00:44:54,880
um a rationale for why this was

1234
00:44:54,880 --> 00:44:56,560
reasonable was that the tester's already

1235
00:44:56,560 --> 00:44:57,920
in sort of a privileged position with

1236
00:44:57,920 --> 00:44:59,599
the client's ip address and the split

1237
00:44:59,599 --> 00:45:01,599
tester issuer model

1238
00:45:01,599 --> 00:45:03,200
and as a result it's sort of already

1239
00:45:03,200 --> 00:45:05,040
trusted to handle this sensitive

1240
00:45:05,040 --> 00:45:07,760
information and has less incentive to

1241
00:45:07,760 --> 00:45:09,359
misbehave because if it was gonna if it

1242
00:45:09,359 --> 00:45:10,640
wanted to just

1243
00:45:10,640 --> 00:45:11,680
do bad things to the client you could

1244
00:45:11,680 --> 00:45:12,960
just forward the ip address onto the

1245
00:45:12,960 --> 00:45:15,359
issuer

1246
00:45:16,800 --> 00:45:19,040
um okay so there's i think there's two

1247
00:45:19,040 --> 00:45:21,520
uh there's one sort of fundamental open

1248
00:45:21,520 --> 00:45:23,760
issue that's worth some analysis and in

1249
00:45:23,760 --> 00:45:26,000
consideration the first of which is

1250
00:45:26,000 --> 00:45:28,560
um uh this this sort of state that the

1251
00:45:28,560 --> 00:45:30,000
attester learns is effectively

1252
00:45:30,000 --> 00:45:31,599
equivalent to access patterns that

1253
00:45:31,599 --> 00:45:33,520
clients might have in terms of like you

1254
00:45:33,520 --> 00:45:36,000
know using browser in the web

1255
00:45:36,000 --> 00:45:37,280
it's unclear

1256
00:45:37,280 --> 00:45:40,160
how much leakage is actually um possible

1257
00:45:40,160 --> 00:45:43,040
or revealed through this access

1258
00:45:43,040 --> 00:45:45,520
through this access pattern um

1259
00:45:45,520 --> 00:45:47,440
and in particular

1260
00:45:47,440 --> 00:45:49,359
if an attester could combine this

1261
00:45:49,359 --> 00:45:51,280
information with certain auxiliary

1262
00:45:51,280 --> 00:45:53,280
information for the purposes of you know

1263
00:45:53,280 --> 00:45:54,800
potentially learning what origin a

1264
00:45:54,800 --> 00:45:56,960
specific client was after

1265
00:45:56,960 --> 00:45:58,880
there's another open issue that we think

1266
00:45:58,880 --> 00:46:00,560
we have a technical solution for it

1267
00:46:00,560 --> 00:46:01,920
would be we would have better technical

1268
00:46:01,920 --> 00:46:03,280
solution if we had a partially blind

1269
00:46:03,280 --> 00:46:06,000
signature um but we do not yet have one

1270
00:46:06,000 --> 00:46:08,079
um so we have a

1271
00:46:08,079 --> 00:46:09,680
different solution to it

1272
00:46:09,680 --> 00:46:13,520
um details are issue 218.

1273
00:46:13,520 --> 00:46:16,800
uh as a status update um to assist with

1274
00:46:16,800 --> 00:46:18,280
the adoption call we have two

1275
00:46:18,280 --> 00:46:19,760
interoperabilitations one of which is

1276
00:46:19,760 --> 00:46:20,960
the open source implementation that

1277
00:46:20,960 --> 00:46:22,640
tommy referred to earlier um you can

1278
00:46:22,640 --> 00:46:24,000
test it out it supports all the basic

1279
00:46:24,000 --> 00:46:25,359
insurance protocols as well as a very

1280
00:46:25,359 --> 00:46:27,040
limiting one and we do have security

1281
00:46:27,040 --> 00:46:28,880
analysis uh that was done it was

1282
00:46:28,880 --> 00:46:30,319
submitted for peer review uh

1283
00:46:30,319 --> 00:46:32,720
unfortunately it did not capture this um

1284
00:46:32,720 --> 00:46:34,880
this issue just deleted on the previous

1285
00:46:34,880 --> 00:46:36,880
page um but we're working right now to

1286
00:46:36,880 --> 00:46:39,200
update the the analysis to make sure it

1287
00:46:39,200 --> 00:46:40,480
is taken into account and that our

1288
00:46:40,480 --> 00:46:42,960
mitigation does actively present it um

1289
00:46:42,960 --> 00:46:44,480
and we'll hopefully update the work

1290
00:46:44,480 --> 00:46:47,760
group with that analysis when complete

1291
00:46:47,760 --> 00:46:50,160
okay that's it um thank you for letting

1292
00:46:50,160 --> 00:46:52,480
me run over i'm sorry miria um

1293
00:46:52,480 --> 00:46:56,359
i could take your question now

1294
00:46:57,520 --> 00:46:59,920
jonathan

1295
00:47:01,119 --> 00:47:02,079
um

1296
00:47:02,079 --> 00:47:05,200
does this uh consider civil attacks or

1297
00:47:05,200 --> 00:47:06,960
are they considered

1298
00:47:06,960 --> 00:47:08,480
here

1299
00:47:08,480 --> 00:47:10,079
what would be the civil attack in this

1300
00:47:10,079 --> 00:47:12,079
case

1301
00:47:12,079 --> 00:47:14,319
so i'm a client and i want to overwhelm

1302
00:47:14,319 --> 00:47:17,839
an origin so i just say to the a tester

1303
00:47:17,839 --> 00:47:20,960
oh i'm a new client now uh give me a new

1304
00:47:20,960 --> 00:47:23,520
bucket i have now 15 buckets and i can

1305
00:47:23,520 --> 00:47:25,359
do much more traffic

1306
00:47:25,359 --> 00:47:27,119
yeah so uh one of the assumptions is

1307
00:47:27,119 --> 00:47:28,880
that they access the attestation that's

1308
00:47:28,880 --> 00:47:30,640
done between client and the tester

1309
00:47:30,640 --> 00:47:31,920
prevents that from happening so you

1310
00:47:31,920 --> 00:47:33,760
can't just like endlessly spin up new

1311
00:47:33,760 --> 00:47:36,240
new identities as a malicious client and

1312
00:47:36,240 --> 00:47:38,240
do that sort of civil attack of course

1313
00:47:38,240 --> 00:47:40,319
if like your test attestation does not

1314
00:47:40,319 --> 00:47:42,240
ensure that that happens then there's an

1315
00:47:42,240 --> 00:47:44,800
obvious problem with this so um

1316
00:47:44,800 --> 00:47:47,200
the the protocol assumes that the client

1317
00:47:47,200 --> 00:47:49,760
a tester relationship enforces uh or

1318
00:47:49,760 --> 00:47:52,319
prevents that from happening so for

1319
00:47:52,319 --> 00:47:54,480
example

1320
00:47:54,480 --> 00:47:56,079
go ahead

1321
00:47:56,079 --> 00:47:59,200
buy ip address so

1322
00:47:59,280 --> 00:48:00,960
it could be by a p address it could be

1323
00:48:00,960 --> 00:48:02,720
based on like device attestations you

1324
00:48:02,720 --> 00:48:03,760
have to like you would have to have

1325
00:48:03,760 --> 00:48:06,880
distinct devices in order to do this

1326
00:48:06,880 --> 00:48:08,400
it depends on what type of attestation

1327
00:48:08,400 --> 00:48:12,160
is done between the client the tester

1328
00:48:12,640 --> 00:48:14,960
thank you

1329
00:48:17,440 --> 00:48:19,359
mia columbia thanks for the overview um

1330
00:48:19,359 --> 00:48:21,200
i have a question about so in the in the

1331
00:48:21,200 --> 00:48:24,480
architecture you propose the um the rate

1332
00:48:24,480 --> 00:48:26,720
limit is provided from the issuer to the

1333
00:48:26,720 --> 00:48:27,839
attester

1334
00:48:27,839 --> 00:48:29,280
and the other option would be to

1335
00:48:29,280 --> 00:48:30,800
actually provide the count from the

1336
00:48:30,800 --> 00:48:32,160
attester to the issue and then the

1337
00:48:32,160 --> 00:48:34,000
issuer could drop the packet did you

1338
00:48:34,000 --> 00:48:35,520
consider that

1339
00:48:35,520 --> 00:48:37,119
yeah actually that was how

1340
00:48:37,119 --> 00:48:38,960
the draft was previously written we had

1341
00:48:38,960 --> 00:48:40,720
basically the tester send the count to

1342
00:48:40,720 --> 00:48:42,160
the issuer

1343
00:48:42,160 --> 00:48:43,760
but we determined that that leaks too

1344
00:48:43,760 --> 00:48:46,319
much information in particular based on

1345
00:48:46,319 --> 00:48:48,319
the counts that the issuer sees they

1346
00:48:48,319 --> 00:48:49,680
could figure out whether or not two

1347
00:48:49,680 --> 00:48:50,800
requests for

1348
00:48:50,800 --> 00:48:52,800
the same client or not so as a simple

1349
00:48:52,800 --> 00:48:54,960
example imagine that the issuer just saw

1350
00:48:54,960 --> 00:48:57,839
like n requests in a row in sequence and

1351
00:48:57,839 --> 00:49:00,000
every single time the count kept going

1352
00:49:00,000 --> 00:49:02,559
up it would just conclude that these are

1353
00:49:02,559 --> 00:49:06,000
obviously from the same client

1354
00:49:06,000 --> 00:49:08,000
yeah i mean yeah so you're also leaking

1355
00:49:08,000 --> 00:49:09,440
a little bit of information because you

1356
00:49:09,440 --> 00:49:11,920
provide the origin count and it when

1357
00:49:11,920 --> 00:49:13,119
it's always the same i mean it's

1358
00:49:13,119 --> 00:49:14,319
probably always the same for many

1359
00:49:14,319 --> 00:49:15,599
religions or whatever but like there is

1360
00:49:15,599 --> 00:49:17,119
a lot like yeah it's a little trailer

1361
00:49:17,119 --> 00:49:18,000
okay

1362
00:49:18,000 --> 00:49:20,240
yeah yeah that was that was the the crux

1363
00:49:20,240 --> 00:49:23,279
of the trade-off um

1364
00:49:29,640 --> 00:49:31,359
nick30cdt

1365
00:49:31,359 --> 00:49:32,240
i

1366
00:49:32,240 --> 00:49:34,079
apologize if i'm repeating this question

1367
00:49:34,079 --> 00:49:36,480
but um

1368
00:49:36,480 --> 00:49:39,119
have we established evidence from um

1369
00:49:39,119 --> 00:49:42,079
people doing this sort of um

1370
00:49:42,079 --> 00:49:44,000
account creation or something like that

1371
00:49:44,000 --> 00:49:45,520
that this

1372
00:49:45,520 --> 00:49:47,520
uh metering will be

1373
00:49:47,520 --> 00:49:49,280
effective i i can see how this is

1374
00:49:49,280 --> 00:49:50,880
effective for the

1375
00:49:50,880 --> 00:49:53,200
um new york times paywall and and if you

1376
00:49:53,200 --> 00:49:54,559
want to come up with a complicated

1377
00:49:54,559 --> 00:49:55,920
scheme to

1378
00:49:55,920 --> 00:49:58,800
to do that maybe that's fine but um i

1379
00:49:58,800 --> 00:49:59,839
sort of get the impression that if

1380
00:49:59,839 --> 00:50:00,880
you're in the

1381
00:50:00,880 --> 00:50:03,040
abuse case

1382
00:50:03,040 --> 00:50:04,400
there's not going to be a single

1383
00:50:04,400 --> 00:50:06,720
threshold where where sort of yes no is

1384
00:50:06,720 --> 00:50:09,280
useful but you might want to know

1385
00:50:09,280 --> 00:50:11,680
the the number uh because you could you

1386
00:50:11,680 --> 00:50:14,640
could you know um escalate or something

1387
00:50:14,640 --> 00:50:16,880
that that's not always going to be like

1388
00:50:16,880 --> 00:50:18,720
good or bad in those abuse cases but

1389
00:50:18,720 --> 00:50:20,240
that they would want to just use that as

1390
00:50:20,240 --> 00:50:21,839
a signal so so do we have a sense from

1391
00:50:21,839 --> 00:50:23,599
those use cases that

1392
00:50:23,599 --> 00:50:25,760
um a single threshold is going to be

1393
00:50:25,760 --> 00:50:26,880
helpful

1394
00:50:26,880 --> 00:50:28,160
i think this is still something that's

1395
00:50:28,160 --> 00:50:30,000
under discussion in the anti-frauds

1396
00:50:30,000 --> 00:50:32,400
community group um uh there's a lot of

1397
00:50:32,400 --> 00:50:33,839
uncertainty with respect to you know

1398
00:50:33,839 --> 00:50:35,280
what are

1399
00:50:35,280 --> 00:50:37,680
the useful signals that can feed into

1400
00:50:37,680 --> 00:50:41,200
some anti-abuse system um and what role

1401
00:50:41,200 --> 00:50:43,200
like different types of attestation and

1402
00:50:43,200 --> 00:50:45,359
rate limiting plays in those scenarios

1403
00:50:45,359 --> 00:50:46,480
um

1404
00:50:46,480 --> 00:50:48,160
uh

1405
00:50:48,160 --> 00:50:50,240
i so i hope the conversation and an

1406
00:50:50,240 --> 00:50:52,160
answer to your question evolves in in

1407
00:50:52,160 --> 00:50:53,760
that group which is where sort of the

1408
00:50:53,760 --> 00:50:56,079
practitioners are iterating on you know

1409
00:50:56,079 --> 00:50:58,400
what is the value of this as a

1410
00:50:58,400 --> 00:51:01,040
application specific thing um

1411
00:51:01,040 --> 00:51:03,200
but uh i don't have an immediate answer

1412
00:51:03,200 --> 00:51:06,640
for you because that group uh

1413
00:51:06,640 --> 00:51:08,319
you may be you i mean you you're

1414
00:51:08,319 --> 00:51:09,680
actively participating in it and has

1415
00:51:09,680 --> 00:51:11,359
many conflicting opinions uh from

1416
00:51:11,359 --> 00:51:12,800
different people so we'll see how things

1417
00:51:12,800 --> 00:51:14,640
feel

1418
00:51:14,640 --> 00:51:16,240
okay i'll make sure we can see that

1419
00:51:16,240 --> 00:51:17,359
there thanks

1420
00:51:17,359 --> 00:51:19,040
yeah to try a minute just like another

1421
00:51:19,040 --> 00:51:21,280
author we have

1422
00:51:21,280 --> 00:51:23,680
yeah obviously we can't know

1423
00:51:23,680 --> 00:51:25,359
what how everything will play out but

1424
00:51:25,359 --> 00:51:27,520
when we have discussed

1425
00:51:27,520 --> 00:51:29,480
uh with various

1426
00:51:29,480 --> 00:51:31,200
anti-fraud systems that would be

1427
00:51:31,200 --> 00:51:32,720
interested in using privacy pass in

1428
00:51:32,720 --> 00:51:34,079
general

1429
00:51:34,079 --> 00:51:35,440
essentially like there's a spectrum from

1430
00:51:35,440 --> 00:51:38,000
like the basic privacy pass that has no

1431
00:51:38,000 --> 00:51:39,680
rate limit guarantees at all other than

1432
00:51:39,680 --> 00:51:41,280
client implementation

1433
00:51:41,280 --> 00:51:43,040
and like what they would have today with

1434
00:51:43,040 --> 00:51:45,440
actually you know like here is your ip

1435
00:51:45,440 --> 00:51:47,520
and here's your cookie and i can like

1436
00:51:47,520 --> 00:51:49,760
track you and like this falls somewhere

1437
00:51:49,760 --> 00:51:52,720
in the middle so like there are clients

1438
00:51:52,720 --> 00:51:55,200
or origins for whom this will

1439
00:51:55,200 --> 00:51:57,040
improve their ability to

1440
00:51:57,040 --> 00:51:59,040
use this as a meaningful fraud signal it

1441
00:51:59,040 --> 00:52:00,640
will not allow them to do all of the

1442
00:52:00,640 --> 00:52:01,760
things that they could do if they got an

1443
00:52:01,760 --> 00:52:03,599
exact count for a client and

1444
00:52:03,599 --> 00:52:05,359
re-identified someone

1445
00:52:05,359 --> 00:52:08,240
but it it increases the number

1446
00:52:08,240 --> 00:52:10,400
of sites that can use the use privacy

1447
00:52:10,400 --> 00:52:12,800
pass meaningfully today and

1448
00:52:12,800 --> 00:52:14,319
we'll see if we need to go further than

1449
00:52:14,319 --> 00:52:16,319
that but this is

1450
00:52:16,319 --> 00:52:18,800
a useful jump

1451
00:52:18,800 --> 00:52:21,200
yeah i sort of view it as a another tool

1452
00:52:21,200 --> 00:52:22,079
uh

1453
00:52:22,079 --> 00:52:23,599
for them to use

1454
00:52:23,599 --> 00:52:26,000
a tool that discourages use of like

1455
00:52:26,000 --> 00:52:28,880
existing uh tools that might have like a

1456
00:52:28,880 --> 00:52:30,800
bad privacy posture with respect to the

1457
00:52:30,800 --> 00:52:33,040
client

1458
00:52:33,040 --> 00:52:34,960
like tracking based on the ip address

1459
00:52:34,960 --> 00:52:36,720
for example

1460
00:52:36,720 --> 00:52:37,760
thanks for

1461
00:52:37,760 --> 00:52:39,920
thanks for that discussion uh

1462
00:52:39,920 --> 00:52:42,000
yeah just reminding the group this

1463
00:52:42,000 --> 00:52:45,119
document is subject to an open adoption

1464
00:52:45,119 --> 00:52:47,440
call that will end

1465
00:52:47,440 --> 00:52:49,200
in about two weeks

1466
00:52:49,200 --> 00:52:51,520
so please do comment on the mailing list

1467
00:52:51,520 --> 00:52:53,680
and share with the group your opinion of

1468
00:52:53,680 --> 00:52:55,760
whether this document is suitable for

1469
00:52:55,760 --> 00:52:58,240
adoption

1470
00:52:59,200 --> 00:53:02,160
and now we're on to our final section

1471
00:53:02,160 --> 00:53:04,400
okay thank you um

1472
00:53:04,400 --> 00:53:07,839
uh so this is this is just a reminder of

1473
00:53:07,839 --> 00:53:09,359
a draft that we

1474
00:53:09,359 --> 00:53:11,599
a couple of us have written on the side

1475
00:53:11,599 --> 00:53:13,119
um after realizing that there's this

1476
00:53:13,119 --> 00:53:14,559
common problem that's emerging in many

1477
00:53:14,559 --> 00:53:16,559
many different application areas inside

1478
00:53:16,559 --> 00:53:19,920
the idf oi privacy pass um

1479
00:53:19,920 --> 00:53:21,280
in particular

1480
00:53:21,280 --> 00:53:23,760
on um uh

1481
00:53:23,760 --> 00:53:25,440
in an attempt to distill all the

1482
00:53:25,440 --> 00:53:26,960
different ways that you know people deal

1483
00:53:26,960 --> 00:53:28,480
with key consistency and discovery and

1484
00:53:28,480 --> 00:53:30,160
practice um

1485
00:53:30,160 --> 00:53:31,040
and

1486
00:53:31,040 --> 00:53:33,359
uh

1487
00:53:33,440 --> 00:53:34,720
that's the intent that's the motivation

1488
00:53:34,720 --> 00:53:36,079
so this is not like a you know

1489
00:53:36,079 --> 00:53:37,839
tremendously new update to that document

1490
00:53:37,839 --> 00:53:40,559
but uh just a reminder and uh hopefully

1491
00:53:40,559 --> 00:53:42,079
at the end we'll talk about like what we

1492
00:53:42,079 --> 00:53:43,359
can do with this if we want to do

1493
00:53:43,359 --> 00:53:45,119
anything with it

1494
00:53:45,119 --> 00:53:46,559
okay um

1495
00:53:46,559 --> 00:53:47,760
so as i said

1496
00:53:47,760 --> 00:53:49,839
there's a number of protocols in the itf

1497
00:53:49,839 --> 00:53:52,079
right now that uh actually depend on you

1498
00:53:52,079 --> 00:53:54,319
know clients having uh some consistent

1499
00:53:54,319 --> 00:53:56,640
view of their keys so they don't when

1500
00:53:56,640 --> 00:53:57,839
actually using these systems they don't

1501
00:53:57,839 --> 00:53:59,200
reveal information that they shouldn't

1502
00:53:59,200 --> 00:54:00,160
reveal

1503
00:54:00,160 --> 00:54:01,200
um

1504
00:54:01,200 --> 00:54:02,960
to a malicious service provider privacy

1505
00:54:02,960 --> 00:54:05,200
passes one particular case where you

1506
00:54:05,200 --> 00:54:06,880
want the issuer verification key to be

1507
00:54:06,880 --> 00:54:08,640
consistent across all clients that are

1508
00:54:08,640 --> 00:54:10,720
interacting with that issuer

1509
00:54:10,720 --> 00:54:12,400
uh http is another one where you want

1510
00:54:12,400 --> 00:54:13,839
the gateway's public encryption key to

1511
00:54:13,839 --> 00:54:15,119
be consistent

1512
00:54:15,119 --> 00:54:16,960
and it's like configuration in the url

1513
00:54:16,960 --> 00:54:18,720
and all these things that provided that

1514
00:54:18,720 --> 00:54:20,880
information but it's there um tor is

1515
00:54:20,880 --> 00:54:22,079
another example where you want relay

1516
00:54:22,079 --> 00:54:23,839
public keys to have be consistent across

1517
00:54:23,839 --> 00:54:25,760
all clients

1518
00:54:25,760 --> 00:54:26,800
and fundamentally there's like two

1519
00:54:26,800 --> 00:54:28,400
common requirements for these different

1520
00:54:28,400 --> 00:54:30,079
type of systems which i'll call

1521
00:54:30,079 --> 00:54:32,640
unlinkability and authenticity

1522
00:54:32,640 --> 00:54:35,200
uh unlikability is informally that you

1523
00:54:35,200 --> 00:54:36,880
know servers can't link usage of a

1524
00:54:36,880 --> 00:54:38,720
specific key to an individual user and

1525
00:54:38,720 --> 00:54:40,640
that authenticity is that when the

1526
00:54:40,640 --> 00:54:43,119
clients are using a key it's a key that

1527
00:54:43,119 --> 00:54:45,359
was intended for that specific server

1528
00:54:45,359 --> 00:54:47,040
it's not like key the key that someone

1529
00:54:47,040 --> 00:54:48,240
else owns

1530
00:54:48,240 --> 00:54:51,119
that is not the intended server

1531
00:54:51,119 --> 00:54:53,119
so why is this important um imagine you

1532
00:54:53,119 --> 00:54:54,319
had like a scenario where there's a

1533
00:54:54,319 --> 00:54:55,920
bunch of clients interacting with some

1534
00:54:55,920 --> 00:54:57,680
server the server makes its key k

1535
00:54:57,680 --> 00:54:59,200
available to those clients and the

1536
00:54:59,200 --> 00:55:01,119
server uses that key

1537
00:55:01,119 --> 00:55:02,319
um

1538
00:55:02,319 --> 00:55:04,559
sorry the client uses that key a client

1539
00:55:04,559 --> 00:55:06,559
uses that key produces a function based

1540
00:55:06,559 --> 00:55:08,720
on the key and sends the the output of

1541
00:55:08,720 --> 00:55:10,480
the function to the server

1542
00:55:10,480 --> 00:55:12,960
the server um assuming all clients have

1543
00:55:12,960 --> 00:55:14,480
a consistent view of this key the only

1544
00:55:14,480 --> 00:55:16,160
thing it learns is that this was sent

1545
00:55:16,160 --> 00:55:18,160
from one of these end clients in the in

1546
00:55:18,160 --> 00:55:20,960
this particular set

1547
00:55:20,960 --> 00:55:22,160
if however

1548
00:55:22,160 --> 00:55:24,000
the server managed to distribute the key

1549
00:55:24,000 --> 00:55:25,760
in this particular way where one

1550
00:55:25,760 --> 00:55:28,799
specific client has a key k1 and all

1551
00:55:28,799 --> 00:55:31,599
other clients have a different key

1552
00:55:31,599 --> 00:55:35,119
usage of a key might reveal what the

1553
00:55:35,119 --> 00:55:37,359
specific client was

1554
00:55:37,359 --> 00:55:39,040
that interacted with the service which

1555
00:55:39,040 --> 00:55:40,960
is not great from a privacy perspective

1556
00:55:40,960 --> 00:55:43,359
and something we'd like to avoid

1557
00:55:43,359 --> 00:55:44,079
so

1558
00:55:44,079 --> 00:55:46,319
consistency here means that all clients

1559
00:55:46,319 --> 00:55:48,319
again have the same shared view of the

1560
00:55:48,319 --> 00:55:51,599
key for the particular server

1561
00:55:51,599 --> 00:55:53,680
there's also authenticity the other

1562
00:55:53,680 --> 00:55:56,960
informal principle um so imagine you had

1563
00:55:56,960 --> 00:55:58,480
now an adversary that sits between the

1564
00:55:58,480 --> 00:56:00,400
server and the clients where the server

1565
00:56:00,400 --> 00:56:02,079
makes its key available it's authentic

1566
00:56:02,079 --> 00:56:04,079
key available but then the adversary

1567
00:56:04,079 --> 00:56:06,880
slips in its own malicious key ek prime

1568
00:56:06,880 --> 00:56:09,760
and gives that to the clients

1569
00:56:09,760 --> 00:56:11,359
clients if they don't know any better

1570
00:56:11,359 --> 00:56:12,880
any function computed based on this

1571
00:56:12,880 --> 00:56:14,799
particular key k prime reveals something

1572
00:56:14,799 --> 00:56:17,440
that was originally intended for us so

1573
00:56:17,440 --> 00:56:19,760
in the case of like osttp that might be

1574
00:56:19,760 --> 00:56:21,440
an encapsulated request encrypted to

1575
00:56:21,440 --> 00:56:23,440
someone that is not the actual gateway

1576
00:56:23,440 --> 00:56:25,280
but someone else which would not be

1577
00:56:25,280 --> 00:56:26,319
great

1578
00:56:26,319 --> 00:56:31,240
um so we also want to avoid this

1579
00:56:31,280 --> 00:56:32,799
um and

1580
00:56:32,799 --> 00:56:33,760
sort of

1581
00:56:33,760 --> 00:56:36,799
simplifying things a lot uh basically

1582
00:56:36,799 --> 00:56:38,880
what the draft advocates for is that um

1583
00:56:38,880 --> 00:56:40,720
these two properties on linkability

1584
00:56:40,720 --> 00:56:42,319
authenticity

1585
00:56:42,319 --> 00:56:44,400
mean that every single client has a

1586
00:56:44,400 --> 00:56:46,000
consistent view of the server's intended

1587
00:56:46,000 --> 00:56:48,240
key and then that view is correct and

1588
00:56:48,240 --> 00:56:50,160
and systems that actually enforce these

1589
00:56:50,160 --> 00:56:51,359
two things

1590
00:56:51,359 --> 00:56:53,280
we call uh key consistency and

1591
00:56:53,280 --> 00:56:54,720
correctness systems

1592
00:56:54,720 --> 00:56:56,880
and uh the design space for this sort of

1593
00:56:56,880 --> 00:56:58,400
thing is huge i mean there was a

1594
00:56:58,400 --> 00:57:00,480
discussion based on key consistent ohio

1595
00:57:00,480 --> 00:57:02,559
earlier in the week um based on one of

1596
00:57:02,559 --> 00:57:05,040
ben's drafts um and that like touched on

1597
00:57:05,040 --> 00:57:06,960
one solution in this design space there

1598
00:57:06,960 --> 00:57:08,799
are other solutions that have different

1599
00:57:08,799 --> 00:57:10,799
like complexity in terms of operation

1600
00:57:10,799 --> 00:57:12,559
trust model and so on

1601
00:57:12,559 --> 00:57:14,079
um so the

1602
00:57:14,079 --> 00:57:15,440
the actual

1603
00:57:15,440 --> 00:57:16,960
system that's used to enforce

1604
00:57:16,960 --> 00:57:18,480
consistency and correctness can vary

1605
00:57:18,480 --> 00:57:21,920
based on all these external factors um

1606
00:57:21,920 --> 00:57:23,359
are based on all these factors some of

1607
00:57:23,359 --> 00:57:24,160
them

1608
00:57:24,160 --> 00:57:27,680
external i guess

1609
00:57:27,680 --> 00:57:29,440
roughly speaking the design space kind

1610
00:57:29,440 --> 00:57:31,680
of boils down to you know these four

1611
00:57:31,680 --> 00:57:32,960
things um

1612
00:57:32,960 --> 00:57:34,319
uh first of which is like fetching

1613
00:57:34,319 --> 00:57:36,480
through a fetching a key through a

1614
00:57:36,480 --> 00:57:38,559
trusted proxy so clients that you know

1615
00:57:38,559 --> 00:57:40,799
belong to the same annuity set would ask

1616
00:57:40,799 --> 00:57:43,280
a trusted proxy hey give me the key

1617
00:57:43,280 --> 00:57:45,599
the consistent and correct key for this

1618
00:57:45,599 --> 00:57:47,680
particular service that i'm using in the

1619
00:57:47,680 --> 00:57:49,599
server and the proxy is trusted to

1620
00:57:49,599 --> 00:57:51,680
present the correct key

1621
00:57:51,680 --> 00:57:53,119
you can fetch and verify through a

1622
00:57:53,119 --> 00:57:54,640
trusted proxy which is what the double

1623
00:57:54,640 --> 00:57:58,400
check thing uh double check spec uh

1624
00:57:58,400 --> 00:58:00,559
roughly does um

1625
00:58:00,559 --> 00:58:02,319
you can fetch through multiple untrusted

1626
00:58:02,319 --> 00:58:04,319
proxies or less trusted proxies and

1627
00:58:04,319 --> 00:58:07,040
verify that you get back the same answer

1628
00:58:07,040 --> 00:58:09,119
or you could sort of uh stick all these

1629
00:58:09,119 --> 00:58:11,200
keys on a bulletin board and audit that

1630
00:58:11,200 --> 00:58:12,799
bulletin board and make sure that you

1631
00:58:12,799 --> 00:58:14,960
know uh you're getting the latest

1632
00:58:14,960 --> 00:58:17,040
contents of the audited bulletin board

1633
00:58:17,040 --> 00:58:18,960
um or a bulletin board here it's just a

1634
00:58:18,960 --> 00:58:21,040
you know an authentic append only log or

1635
00:58:21,040 --> 00:58:23,839
something like that

1636
00:58:23,920 --> 00:58:26,720
um and these these approaches uh i'm

1637
00:58:26,720 --> 00:58:28,000
going to walk through the pictures just

1638
00:58:28,000 --> 00:58:29,760
to really drive the point home um these

1639
00:58:29,760 --> 00:58:31,839
are pictures are these these different

1640
00:58:31,839 --> 00:58:34,240
solutions again they

1641
00:58:34,240 --> 00:58:35,760
they have different applicability based

1642
00:58:35,760 --> 00:58:36,400
on

1643
00:58:36,400 --> 00:58:38,640
uh your your application configuration

1644
00:58:38,640 --> 00:58:40,079
your deployment module your threat model

1645
00:58:40,079 --> 00:58:42,720
and trust model and whatnot um

1646
00:58:42,720 --> 00:58:44,720
and so there's no one-size-fits-all or

1647
00:58:44,720 --> 00:58:46,960
correct solution here um it's a pilot

1648
00:58:46,960 --> 00:58:49,599
trade-offs so in the trusted proxy case

1649
00:58:49,599 --> 00:58:51,520
as i was saying uh

1650
00:58:51,520 --> 00:58:53,760
there's a proxy in the middle that gets

1651
00:58:53,760 --> 00:58:55,359
it gets a key and then bends it of that

1652
00:58:55,359 --> 00:58:57,440
same copy to all clients pretty

1653
00:58:57,440 --> 00:58:59,920
straightforward

1654
00:59:00,079 --> 00:59:02,720
in the multi-proxy case where clients

1655
00:59:02,720 --> 00:59:04,319
might go through different untrusted

1656
00:59:04,319 --> 00:59:07,200
proxies to ask the server to present its

1657
00:59:07,200 --> 00:59:08,400
view of the key

1658
00:59:08,400 --> 00:59:10,240
um clients can check to see whether or

1659
00:59:10,240 --> 00:59:12,079
not a server is trying to lie and change

1660
00:59:12,079 --> 00:59:14,400
keys

1661
00:59:14,400 --> 00:59:16,559
you know

1662
00:59:16,559 --> 00:59:19,520
in a malicious attempt to tag clients um

1663
00:59:19,520 --> 00:59:21,440
i have here listed that constancy double

1664
00:59:21,440 --> 00:59:22,799
check is sort of an example of this

1665
00:59:22,799 --> 00:59:25,280
slightly different but i'm kind of the

1666
00:59:25,280 --> 00:59:26,720
close enough in spirit that i just kind

1667
00:59:26,720 --> 00:59:29,520
of threw it down here

1668
00:59:29,520 --> 00:59:30,880
and then there's the bulletin board

1669
00:59:30,880 --> 00:59:32,960
external data database which stores the

1670
00:59:32,960 --> 00:59:34,799
keys and then clients just pull it down

1671
00:59:34,799 --> 00:59:36,319
and there's some assumption that there's

1672
00:59:36,319 --> 00:59:38,000
an ecosystem built around this bulletin

1673
00:59:38,000 --> 00:59:39,359
board for verifying that everything is

1674
00:59:39,359 --> 00:59:41,359
correct and consistent um

1675
00:59:41,359 --> 00:59:43,359
like connexing key transparency or

1676
00:59:43,359 --> 00:59:44,640
basically an instantiation of this

1677
00:59:44,640 --> 00:59:47,640
concept

1678
00:59:48,160 --> 00:59:51,599
um okay so um consistency has come up

1679
00:59:51,599 --> 00:59:54,079
time and time again um in particular

1680
00:59:54,079 --> 00:59:55,680
this week uh and i think we're really

1681
00:59:55,680 --> 00:59:56,799
going to have to address it with ben's

1682
00:59:56,799 --> 00:59:58,559
draft

1683
00:59:58,559 --> 01:00:00,079
the question is you know whether or not

1684
01:00:00,079 --> 01:00:02,559
there's value in uh this complementary

1685
01:00:02,559 --> 01:00:04,240
document that sort of describes the the

1686
01:00:04,240 --> 01:00:06,640
rest of the design space um or some

1687
01:00:06,640 --> 01:00:08,400
other pieces of the design space may not

1688
01:00:08,400 --> 01:00:10,799
be exhaustive um

1689
01:00:10,799 --> 01:00:13,440
uh there is no specific section uh in

1690
01:00:13,440 --> 01:00:15,040
the privacy fast charter that to sort of

1691
01:00:15,040 --> 01:00:16,640
address the key consistency or key

1692
01:00:16,640 --> 01:00:17,839
tagging issue

1693
01:00:17,839 --> 01:00:19,599
um so after discussion with the shares

1694
01:00:19,599 --> 01:00:21,359
we basically are proposing to bring this

1695
01:00:21,359 --> 01:00:23,040
document as informational as a working

1696
01:00:23,040 --> 01:00:23,839
group

1697
01:00:23,839 --> 01:00:26,799
uh like supporting document or something

1698
01:00:26,799 --> 01:00:28,160
to be published i don't think it matters

1699
01:00:28,160 --> 01:00:31,520
that much um to sort of uh help inform

1700
01:00:31,520 --> 01:00:33,280
the discussion around consistency double

1701
01:00:33,280 --> 01:00:35,680
check or other solutions as they emerge

1702
01:00:35,680 --> 01:00:37,119
and um

1703
01:00:37,119 --> 01:00:39,040
that's our proposal

1704
01:00:39,040 --> 01:00:42,839
cures to hear what folks think

1705
01:00:43,760 --> 01:00:46,319
yeah tommy

1706
01:00:46,880 --> 01:00:47,599
yeah

1707
01:00:47,599 --> 01:00:49,440
thanks for doing this this is clearly

1708
01:00:49,440 --> 01:00:51,920
very important um

1709
01:00:51,920 --> 01:00:54,319
i have no idea what working group this

1710
01:00:54,319 --> 01:00:57,119
belongs in i don't think it matters

1711
01:00:57,119 --> 01:00:59,119
too much we don't have one to do it in

1712
01:00:59,119 --> 01:01:01,040
but we should do this

1713
01:01:01,040 --> 01:01:04,160
uh the the one comment i had is

1714
01:01:04,160 --> 01:01:08,079
if i i wonder if the approach of double

1715
01:01:08,079 --> 01:01:10,559
check

1716
01:01:10,559 --> 01:01:12,319
not the specific protocol instantiation

1717
01:01:12,319 --> 01:01:13,599
but the approach of it could be

1718
01:01:13,599 --> 01:01:14,799
mentioned

1719
01:01:14,799 --> 01:01:17,040
more explicitly here again it kind of

1720
01:01:17,040 --> 01:01:18,160
seems like implicit when you're talking

1721
01:01:18,160 --> 01:01:19,520
about oh you have proxies you can go

1722
01:01:19,520 --> 01:01:23,119
through and you can go direct and like

1723
01:01:23,119 --> 01:01:24,480
maybe laying that out and bringing some

1724
01:01:24,480 --> 01:01:26,240
of the double check in because it feels

1725
01:01:26,240 --> 01:01:29,119
like different protocols like ojai

1726
01:01:29,119 --> 01:01:30,799
you know if there is a way to do a

1727
01:01:30,799 --> 01:01:33,680
specific ohio key config lookup

1728
01:01:33,680 --> 01:01:36,559
that can adopt double check but other

1729
01:01:36,559 --> 01:01:38,160
things

1730
01:01:38,160 --> 01:01:39,680
even if they don't fit into one

1731
01:01:39,680 --> 01:01:41,920
particular config bag like

1732
01:01:41,920 --> 01:01:42,799
different

1733
01:01:42,799 --> 01:01:44,240
key configuration

1734
01:01:44,240 --> 01:01:46,079
locations could use double check and use

1735
01:01:46,079 --> 01:01:47,599
these different techniques

1736
01:01:47,599 --> 01:01:49,359
so we could talk about techniques here

1737
01:01:49,359 --> 01:01:51,119
and then just let other protocols say oh

1738
01:01:51,119 --> 01:01:52,640
yeah and then you use

1739
01:01:52,640 --> 01:01:54,079
that technique or that technique or that

1740
01:01:54,079 --> 01:01:55,280
technique

1741
01:01:55,280 --> 01:01:56,799
that sounds like a reasonable approach

1742
01:01:56,799 --> 01:01:58,079
um

1743
01:01:58,079 --> 01:01:59,039
uh

1744
01:01:59,039 --> 01:02:00,400
and certainly we didn't mean to like

1745
01:02:00,400 --> 01:02:02,640
intentionally omit double check variant

1746
01:02:02,640 --> 01:02:04,559
it is as you say a different it is a

1747
01:02:04,559 --> 01:02:06,480
slightly different technique than the

1748
01:02:06,480 --> 01:02:09,119
the multi-proxy discovery um

1749
01:02:09,119 --> 01:02:10,960
i just kind of i like vastly

1750
01:02:10,960 --> 01:02:12,400
oversimplified things on this particular

1751
01:02:12,400 --> 01:02:14,160
slide so we could add a section there

1752
01:02:14,160 --> 01:02:15,680
alternatively depending on like ben's

1753
01:02:15,680 --> 01:02:17,359
preference here we could like just take

1754
01:02:17,359 --> 01:02:18,799
all this content like put it in an

1755
01:02:18,799 --> 01:02:20,720
appendix in his draft as like here are

1756
01:02:20,720 --> 01:02:22,160
alternative solutions that if you didn't

1757
01:02:22,160 --> 01:02:24,000
want to use double check or whatever i

1758
01:02:24,000 --> 01:02:26,400
don't think it matters that much um

1759
01:02:26,400 --> 01:02:27,920
uh although to tommy's point it does

1760
01:02:27,920 --> 01:02:29,520
seem like it might be useful to have a

1761
01:02:29,520 --> 01:02:31,200
place to

1762
01:02:31,200 --> 01:02:33,039
somewhere to point and say

1763
01:02:33,039 --> 01:02:34,559
you know this is the consistency

1764
01:02:34,559 --> 01:02:36,559
mechanism i'm using

1765
01:02:36,559 --> 01:02:39,200
in a specific deployment or in my

1766
01:02:39,200 --> 01:02:42,680
specific protocols

1767
01:02:48,640 --> 01:02:50,960
so uh the authors of this draft

1768
01:02:50,960 --> 01:02:54,480
have requested an adoption call um

1769
01:02:54,480 --> 01:02:55,599
for

1770
01:02:55,599 --> 01:02:56,480
uh

1771
01:02:56,480 --> 01:02:58,000
for this draft in the privacy pass

1772
01:02:58,000 --> 01:02:59,280
working group

1773
01:02:59,280 --> 01:03:00,240
uh

1774
01:03:00,240 --> 01:03:01,760
i don't believe such an adoption call

1775
01:03:01,760 --> 01:03:04,400
has been made uh yet but the the chairs

1776
01:03:04,400 --> 01:03:05,280
will

1777
01:03:05,280 --> 01:03:08,400
consider that um and and if an adoption

1778
01:03:08,400 --> 01:03:09,760
call is started you'll you'll see the

1779
01:03:09,760 --> 01:03:12,480
announcement on the list so uh please do

1780
01:03:12,480 --> 01:03:14,559
review the draft so that you're prepared

1781
01:03:14,559 --> 01:03:18,640
in case such an announcement appears

1782
01:03:21,280 --> 01:03:23,440
we are over time and we've completed our

1783
01:03:23,440 --> 01:03:25,119
agenda thank you everyone for

1784
01:03:25,119 --> 01:03:27,039
participating and making this a great

1785
01:03:27,039 --> 01:03:30,680
privacy pass session

1786
01:03:41,599 --> 01:03:44,599
is

