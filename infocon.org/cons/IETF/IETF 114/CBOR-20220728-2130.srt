1
00:00:07,919 --> 00:00:10,000
you have to do something before the time

2
00:00:10,000 --> 00:00:13,040
okay it has just gone 1730

3
00:00:13,040 --> 00:00:17,199
in philadelphia 2130 i believe

4
00:00:17,199 --> 00:00:18,160
in

5
00:00:18,160 --> 00:00:19,840
utc

6
00:00:19,840 --> 00:00:22,560
so it's time for us to start this is the

7
00:00:22,560 --> 00:00:25,760
seabor working group meeting at ietf 114

8
00:00:25,760 --> 00:00:27,599
welcome everybody and thank you all for

9
00:00:27,599 --> 00:00:30,599
coming

10
00:00:33,120 --> 00:00:35,520
i had thought christian was going to be

11
00:00:35,520 --> 00:00:39,040
on remotely but i do not see him

12
00:00:39,040 --> 00:00:41,520
uh i wonder if he got the time right but

13
00:00:41,520 --> 00:00:45,039
in any case um

14
00:00:45,039 --> 00:00:47,360
it should all go well uh so note the

15
00:00:47,360 --> 00:00:48,719
note well well

16
00:00:48,719 --> 00:00:51,280
um you probably all know it by now many

17
00:00:51,280 --> 00:00:54,320
many times but this is uh your

18
00:00:54,320 --> 00:00:56,559
obligations with respect to internet

19
00:00:56,559 --> 00:00:58,800
intellectual property disclosure and

20
00:00:58,800 --> 00:01:02,000
compliance with the various bcps

21
00:01:02,000 --> 00:01:04,479
if you don't know it learn it ah here's

22
00:01:04,479 --> 00:01:06,400
christian hi

23
00:01:06,400 --> 00:01:10,520
my co-chair is here

24
00:01:13,680 --> 00:01:15,600
so everybody in the room is wearing a

25
00:01:15,600 --> 00:01:17,520
mask thank you

26
00:01:17,520 --> 00:01:19,520
each of you is wearing a mask i should

27
00:01:19,520 --> 00:01:22,080
say you're not all sharing the same one

28
00:01:22,080 --> 00:01:25,200
um thank you for doing that and um i'm

29
00:01:25,200 --> 00:01:27,920
going to keep my mask on even though

30
00:01:27,920 --> 00:01:31,040
the rules say i can take mine off

31
00:01:31,040 --> 00:01:33,600
but if you if uh if anybody in the room

32
00:01:33,600 --> 00:01:34,320
is

33
00:01:34,320 --> 00:01:36,320
coming up to this mic which i don't

34
00:01:36,320 --> 00:01:38,240
think anyone is but if you are you're

35
00:01:38,240 --> 00:01:39,840
welcome to take it off

36
00:01:39,840 --> 00:01:41,119
otherwise

37
00:01:41,119 --> 00:01:42,159
please

38
00:01:42,159 --> 00:01:45,119
use the the magic code here

39
00:01:45,119 --> 00:01:47,759
and get on meet echo light if you are in

40
00:01:47,759 --> 00:01:48,960
the room

41
00:01:48,960 --> 00:01:50,880
uh please add yourself to the queue

42
00:01:50,880 --> 00:01:53,200
through that tool

43
00:01:53,200 --> 00:01:55,520
if you can't scan this you may get it

44
00:01:55,520 --> 00:01:57,119
from the

45
00:01:57,119 --> 00:02:00,079
the meeting agenda

46
00:02:02,880 --> 00:02:04,159
so

47
00:02:04,159 --> 00:02:06,880
what we have for the agenda

48
00:02:06,880 --> 00:02:09,038
i get three minutes it says and i have

49
00:02:09,038 --> 00:02:10,318
one left

50
00:02:10,318 --> 00:02:11,920
uh we're going to go through status on

51
00:02:11,920 --> 00:02:13,360
the working group documents we're going

52
00:02:13,360 --> 00:02:16,080
to talk about some upcoming work cddl

53
00:02:16,080 --> 00:02:20,720
tag registry development and maintenance

54
00:02:21,200 --> 00:02:23,120
and

55
00:02:23,120 --> 00:02:27,760
yes so that's that's it for the

56
00:02:27,760 --> 00:02:29,120
agenda

57
00:02:29,120 --> 00:02:32,160
any agenda bashing to do

58
00:02:32,160 --> 00:02:37,000
we all happy with the agenda thank you

59
00:02:38,800 --> 00:02:42,640
christian i see your nice space now

60
00:02:42,640 --> 00:02:44,640
yes as i said doesn't chat sorry for my

61
00:02:44,640 --> 00:02:45,920
delay

62
00:02:45,920 --> 00:02:48,959
um but i'm here now and

63
00:02:48,959 --> 00:02:49,840
yeah

64
00:02:49,840 --> 00:02:52,400
jumping in whatever he did

65
00:02:52,400 --> 00:02:54,640
right and um as you you weren't on when

66
00:02:54,640 --> 00:02:57,200
i said this to the room but the speakers

67
00:02:57,200 --> 00:02:59,200
in the room are facing everybody else

68
00:02:59,200 --> 00:03:02,000
not me so it's hard for me to understand

69
00:03:02,000 --> 00:03:03,680
what the people who are remote are

70
00:03:03,680 --> 00:03:06,560
saying so if i don't if i look stupid

71
00:03:06,560 --> 00:03:09,200
that's why

72
00:03:11,519 --> 00:03:12,959
all right

73
00:03:12,959 --> 00:03:17,120
um document status we have rfc 9164 cbor

74
00:03:17,120 --> 00:03:20,080
tags for ipv4 and ipv6 addresses and

75
00:03:20,080 --> 00:03:21,280
prefixes

76
00:03:21,280 --> 00:03:23,040
that's been published thanks to the

77
00:03:23,040 --> 00:03:25,280
authors and the reviewers of that

78
00:03:25,280 --> 00:03:26,879
document

79
00:03:26,879 --> 00:03:29,200
yay

80
00:03:30,200 --> 00:03:33,440
9165. additional control operators for

81
00:03:33,440 --> 00:03:35,440
cddl

82
00:03:35,440 --> 00:03:37,840
also published recently well not that

83
00:03:37,840 --> 00:03:40,159
recently anymore so again thanks to the

84
00:03:40,159 --> 00:03:43,720
authors and reviewers

85
00:03:46,640 --> 00:03:49,040
file magic is in the rfc editor queue it

86
00:03:49,040 --> 00:03:52,400
finished iesg processing and um that's

87
00:03:52,400 --> 00:03:54,480
that's always excellent

88
00:03:54,480 --> 00:03:56,799
uh karsten you have an update for time

89
00:03:56,799 --> 00:04:00,760
tags so you're on

90
00:04:03,680 --> 00:04:05,200
yeah i actually have some slides in the

91
00:04:05,200 --> 00:04:06,959
big slide set

92
00:04:06,959 --> 00:04:09,920
that i made so maybe we can do it

93
00:04:09,920 --> 00:04:12,000
at the okay we'll just we'll defer that

94
00:04:12,000 --> 00:04:14,799
to when we hit your slides

95
00:04:14,799 --> 00:04:16,720
okay

96
00:04:16,720 --> 00:04:18,720
uh okay and that's what we're about to

97
00:04:18,720 --> 00:04:23,759
do so go ahead and request slide access

98
00:04:27,740 --> 00:04:30,839
[Music]

99
00:04:47,840 --> 00:04:50,159
okay

100
00:04:50,479 --> 00:04:52,880
yeah it's always a bit confusing to use

101
00:04:52,880 --> 00:04:55,280
this interface don't know what makes it

102
00:04:55,280 --> 00:04:56,639
so confusing

103
00:04:56,639 --> 00:04:57,600
anyway

104
00:04:57,600 --> 00:04:58,400
um

105
00:04:58,400 --> 00:05:00,800
so i want to talk about time tag

106
00:05:00,800 --> 00:05:03,039
which we just mentioned

107
00:05:03,039 --> 00:05:05,199
um i want to

108
00:05:05,199 --> 00:05:08,000
talk about packed

109
00:05:08,000 --> 00:05:11,520
and i have one slide on 92 54 which is

110
00:05:11,520 --> 00:05:13,199
not a sibo

111
00:05:13,199 --> 00:05:14,960
um

112
00:05:14,960 --> 00:05:17,759
working group result but it has zebra in

113
00:05:17,759 --> 00:05:19,919
the name and it's maybe something that

114
00:05:19,919 --> 00:05:21,120
we

115
00:05:21,120 --> 00:05:25,680
should keep in mind in in future uh work

116
00:05:25,680 --> 00:05:27,840
and then at the end i would like to talk

117
00:05:27,840 --> 00:05:30,400
about the city evolution

118
00:05:30,400 --> 00:05:31,759
and

119
00:05:31,759 --> 00:05:34,440
maybe a little bit more about what the

120
00:05:34,440 --> 00:05:37,120
9165 means and

121
00:05:37,120 --> 00:05:40,160
then the 2.0 roadmap which obviously

122
00:05:40,160 --> 00:05:41,199
needs

123
00:05:41,199 --> 00:05:43,360
new dates from those that we discussed

124
00:05:43,360 --> 00:05:46,840
in atf-112

125
00:05:47,919 --> 00:05:50,400
okay

126
00:05:50,479 --> 00:05:51,520
so

127
00:05:51,520 --> 00:05:52,479
the

128
00:05:52,479 --> 00:05:53,600
time tag

129
00:05:53,600 --> 00:05:57,840
document defines a tag for times

130
00:05:57,840 --> 00:06:00,400
uh we already have two tags for times

131
00:06:00,400 --> 00:06:02,639
zero and one

132
00:06:02,639 --> 00:06:04,160
um but

133
00:06:04,160 --> 00:06:06,960
these only have limited

134
00:06:06,960 --> 00:06:09,120
uh possibilities for attaching

135
00:06:09,120 --> 00:06:11,360
additional information

136
00:06:11,360 --> 00:06:12,639
and

137
00:06:12,639 --> 00:06:16,479
tag 1000 one has been registered

138
00:06:16,479 --> 00:06:17,600
to carry

139
00:06:17,600 --> 00:06:20,639
lots of additional information and that

140
00:06:20,639 --> 00:06:22,960
has been around for a while and it also

141
00:06:22,960 --> 00:06:25,039
has been registered for a while already

142
00:06:25,039 --> 00:06:28,160
because at the time 1001 it was actually

143
00:06:28,160 --> 00:06:30,400
a first come first served

144
00:06:30,400 --> 00:06:32,960
space so it was easy to register and we

145
00:06:32,960 --> 00:06:35,440
just did it and it's also in use in

146
00:06:35,440 --> 00:06:37,520
implementation so it's not something we

147
00:06:37,520 --> 00:06:38,319
can

148
00:06:38,319 --> 00:06:40,000
we really should be

149
00:06:40,000 --> 00:06:42,800
changing a lot uh in in the way of

150
00:06:42,800 --> 00:06:46,319
breaking it but we still can extend it

151
00:06:46,319 --> 00:06:48,560
and when we discussed this about a year

152
00:06:48,560 --> 00:06:49,919
ago

153
00:06:49,919 --> 00:06:52,400
um when we did the wreck group adoption

154
00:06:52,400 --> 00:06:54,800
uh we said uh this there's this new

155
00:06:54,800 --> 00:06:58,160
stuff going on the sedate working group

156
00:06:58,160 --> 00:06:58,960
and

157
00:06:58,960 --> 00:06:59,680
we

158
00:06:59,680 --> 00:07:02,479
wanted to wait for their

159
00:07:02,479 --> 00:07:05,599
uh considerations to become available so

160
00:07:05,599 --> 00:07:08,000
they are taking the text

161
00:07:08,000 --> 00:07:12,319
form of internet time stamps rfc 539

162
00:07:12,319 --> 00:07:14,840
and adding hints to them so the the

163
00:07:14,840 --> 00:07:19,199
white stuff is the existing 3-3-9

164
00:07:19,199 --> 00:07:21,280
timestamp format that we all know and

165
00:07:21,280 --> 00:07:23,360
love with the

166
00:07:23,360 --> 00:07:25,280
date the t

167
00:07:25,280 --> 00:07:29,759
and the time and then a numerical offset

168
00:07:29,759 --> 00:07:30,400
if

169
00:07:30,400 --> 00:07:31,599
desired

170
00:07:31,599 --> 00:07:33,440
this is of course

171
00:07:33,440 --> 00:07:36,560
inspired by iso 8601

172
00:07:36,560 --> 00:07:39,599
and what sedate does is

173
00:07:39,599 --> 00:07:42,240
providing a way to add hints to that

174
00:07:42,240 --> 00:07:45,199
these are these uh bracket

175
00:07:45,199 --> 00:07:46,960
bracketed uh

176
00:07:46,960 --> 00:07:49,680
things that are added as suffixes to a

177
00:07:49,680 --> 00:07:51,440
539

178
00:07:51,440 --> 00:07:52,720
um

179
00:07:52,720 --> 00:07:55,039
date string and that includes

180
00:07:55,039 --> 00:07:57,199
time zone hints so you can say that the

181
00:07:57,199 --> 00:07:58,400
those

182
00:07:58,400 --> 00:08:02,160
minus 08 there actually are america los

183
00:08:02,160 --> 00:08:04,319
angeles so if

184
00:08:04,319 --> 00:08:07,840
some politician gets the idea that the

185
00:08:07,840 --> 00:08:08,879
um

186
00:08:08,879 --> 00:08:10,960
summertime daylight savings time needs

187
00:08:10,960 --> 00:08:13,520
to be extended to december

188
00:08:13,520 --> 00:08:15,199
you can react to that because you know

189
00:08:15,199 --> 00:08:17,199
no this is an american

190
00:08:17,199 --> 00:08:19,520
time and not a

191
00:08:19,520 --> 00:08:21,919
canadian time or whatever

192
00:08:21,919 --> 00:08:23,199
and

193
00:08:23,199 --> 00:08:24,639
the other

194
00:08:24,639 --> 00:08:28,400
thing in the brackets uca equals hebrew

195
00:08:28,400 --> 00:08:30,960
is a more general extension mechanism in

196
00:08:30,960 --> 00:08:33,039
this case uca means

197
00:08:33,039 --> 00:08:37,200
um a unicode calendar the unicode

198
00:08:37,200 --> 00:08:39,599
project collects certain

199
00:08:39,599 --> 00:08:41,919
localization

200
00:08:41,919 --> 00:08:44,080
information certain types of that and

201
00:08:44,080 --> 00:08:45,600
they have calendar

202
00:08:45,600 --> 00:08:49,040
formats so this would be a

203
00:08:49,040 --> 00:08:52,080
an indication that the the date is

204
00:08:52,080 --> 00:08:54,160
expressed in gregorian time because

205
00:08:54,160 --> 00:08:58,160
that's what rc 539 does but maybe it's

206
00:08:58,160 --> 00:08:59,839
best

207
00:08:59,839 --> 00:09:01,519
shown to the user

208
00:09:01,519 --> 00:09:03,839
as a hebrew as a date in the hebrew

209
00:09:03,839 --> 00:09:05,040
calendar

210
00:09:05,040 --> 00:09:07,680
so this is the work that sedate has been

211
00:09:07,680 --> 00:09:08,959
working on

212
00:09:08,959 --> 00:09:11,440
and it seems to me that sedate is now

213
00:09:11,440 --> 00:09:14,240
converging i think the the last big

214
00:09:14,240 --> 00:09:15,519
problem was

215
00:09:15,519 --> 00:09:18,480
solved in the meeting on monday

216
00:09:18,480 --> 00:09:21,120
so we might add

217
00:09:21,120 --> 00:09:24,399
this information to to the time tag

218
00:09:24,399 --> 00:09:28,160
uh definition and since the time tag is

219
00:09:28,160 --> 00:09:31,519
designed to be infinitely extensible uh

220
00:09:31,519 --> 00:09:34,000
this was really easy so we just

221
00:09:34,000 --> 00:09:36,399
defined two new keys

222
00:09:36,399 --> 00:09:39,920
minus 10 and minus 11 and actually

223
00:09:39,920 --> 00:09:44,080
another copy of them plus 10 and plus 11

224
00:09:44,080 --> 00:09:45,200
for

225
00:09:45,200 --> 00:09:47,200
critical information and there you can

226
00:09:47,200 --> 00:09:50,080
put your timezone hint and

227
00:09:50,080 --> 00:09:51,200
your

228
00:09:51,200 --> 00:09:52,880
extension suffix

229
00:09:52,880 --> 00:09:55,519
so i quickly wrote this up when when the

230
00:09:55,519 --> 00:09:57,200
sedate meeting was

231
00:09:57,200 --> 00:09:58,000
done

232
00:09:58,000 --> 00:10:01,040
and submitted this as time tag

233
00:10:01,040 --> 00:10:02,640
one

234
00:10:02,640 --> 00:10:05,640
so that that's a pretty

235
00:10:05,640 --> 00:10:08,480
straightforward obvious thing to do and

236
00:10:08,480 --> 00:10:10,640
the only reason why we

237
00:10:10,640 --> 00:10:12,959
uh could decide not wanting to do that

238
00:10:12,959 --> 00:10:14,640
is that this might be

239
00:10:14,640 --> 00:10:18,720
overloading the time tag in in some way

240
00:10:18,720 --> 00:10:20,720
but since this is

241
00:10:20,720 --> 00:10:22,640
maybe not trying to be the kitchen sink

242
00:10:22,640 --> 00:10:26,560
but but pretty except uh accepted how do

243
00:10:26,560 --> 00:10:27,680
you say that

244
00:10:27,680 --> 00:10:28,959
um

245
00:10:28,959 --> 00:10:31,360
pretty responsive to to people trying to

246
00:10:31,360 --> 00:10:34,000
add information to timestamps

247
00:10:34,000 --> 00:10:36,399
that should be okay

248
00:10:36,399 --> 00:10:38,800
i think

249
00:10:39,279 --> 00:10:42,240
however sedate also has certain limits

250
00:10:42,240 --> 00:10:44,320
in which it operates

251
00:10:44,320 --> 00:10:46,880
because of the way it is uh chartered

252
00:10:46,880 --> 00:10:49,360
and this it is chartered really not to

253
00:10:49,360 --> 00:10:51,600
leave uh what uh

254
00:10:51,600 --> 00:10:53,760
339 can do

255
00:10:53,760 --> 00:10:56,640
so for instance the date is not going to

256
00:10:56,640 --> 00:10:58,839
have other time scales

257
00:10:58,839 --> 00:11:02,320
besides uh utc they have time zones but

258
00:11:02,320 --> 00:11:05,760
not time scales like tai or

259
00:11:05,760 --> 00:11:08,480
leaf smeared utc or all the stuff that

260
00:11:08,480 --> 00:11:11,200
is floating around out there

261
00:11:11,200 --> 00:11:13,920
um but the time tank take

262
00:11:13,920 --> 00:11:16,160
long has had that so

263
00:11:16,160 --> 00:11:18,240
we are not limited to that

264
00:11:18,240 --> 00:11:20,720
but sedate is limited to that so um one

265
00:11:20,720 --> 00:11:22,480
question that came up

266
00:11:22,480 --> 00:11:23,760
uh was

267
00:11:23,760 --> 00:11:25,760
floating time

268
00:11:25,760 --> 00:11:29,200
which means a time stamp that actually

269
00:11:29,200 --> 00:11:31,120
is in local time

270
00:11:31,120 --> 00:11:33,040
without telling you

271
00:11:33,040 --> 00:11:37,360
how the local time relates to utc

272
00:11:37,360 --> 00:11:39,440
and we already have one such tag the tag

273
00:11:39,440 --> 00:11:41,600
100 the date

274
00:11:41,600 --> 00:11:43,839
tag that is a zoneless

275
00:11:43,839 --> 00:11:46,079
tag it doesn't tell you it doesn't tell

276
00:11:46,079 --> 00:11:47,440
you a date

277
00:11:47,440 --> 00:11:50,480
but not which time zone you were in when

278
00:11:50,480 --> 00:11:52,720
you experienced that date

279
00:11:52,720 --> 00:11:54,079
and

280
00:11:54,079 --> 00:11:56,160
since we appear to be able to do that on

281
00:11:56,160 --> 00:11:58,160
the day at the date level we might as

282
00:11:58,160 --> 00:12:01,839
well do it at the uh time level and uh

283
00:12:01,839 --> 00:12:04,560
emil had some some uh

284
00:12:04,560 --> 00:12:06,320
arguments that we actually should be

285
00:12:06,320 --> 00:12:08,320
doing that on on the

286
00:12:08,320 --> 00:12:10,000
mailing list this

287
00:12:10,000 --> 00:12:12,880
in the last couple of days

288
00:12:12,880 --> 00:12:16,800
um yeah so there's also a little issue

289
00:12:16,800 --> 00:12:18,639
with sedate that

290
00:12:18,639 --> 00:12:21,920
rfc 339 added minus

291
00:12:21,920 --> 00:12:24,480
zero as a numerical offset

292
00:12:24,480 --> 00:12:29,279
and that's incompatible with iso 8601

293
00:12:29,279 --> 00:12:32,240
and yeah we probably don't have to react

294
00:12:32,240 --> 00:12:34,800
to that issue because we don't even

295
00:12:34,800 --> 00:12:38,800
encode numerical offsets in uh time tag

296
00:12:38,800 --> 00:12:40,720
which by the way is something that maybe

297
00:12:40,720 --> 00:12:42,880
people want to do but i haven't

298
00:12:42,880 --> 00:12:45,920
found a use case for that yet so so i

299
00:12:45,920 --> 00:12:49,279
haven't seen a reason to put that in

300
00:12:49,279 --> 00:12:51,600
yeah so the question really is do we

301
00:12:51,600 --> 00:12:53,040
want our

302
00:12:53,040 --> 00:12:56,639
larger freedom to actually put something

303
00:12:56,639 --> 00:12:58,720
like floating times

304
00:12:58,720 --> 00:13:00,079
uh in

305
00:13:00,079 --> 00:13:02,320
and um

306
00:13:02,320 --> 00:13:04,839
the the way we could do this is a little

307
00:13:04,839 --> 00:13:07,680
bit um

308
00:13:07,680 --> 00:13:10,480
well it could be inspired by ntp version

309
00:13:10,480 --> 00:13:13,360
five the ntp version five people also

310
00:13:13,360 --> 00:13:16,160
want to put in floating times

311
00:13:16,160 --> 00:13:18,959
and they can just use the or they plan

312
00:13:18,959 --> 00:13:21,600
to use the time scale field

313
00:13:21,600 --> 00:13:24,399
for uh saying that

314
00:13:24,399 --> 00:13:26,240
so they would have

315
00:13:26,240 --> 00:13:28,720
utc and tai

316
00:13:28,720 --> 00:13:32,480
uh and leap smeared utc and local time

317
00:13:32,480 --> 00:13:35,279
we could just do the same thing

318
00:13:35,279 --> 00:13:37,360
um so that that would be something where

319
00:13:37,360 --> 00:13:39,600
we wouldn't have to to invent something

320
00:13:39,600 --> 00:13:41,120
new but could just

321
00:13:41,120 --> 00:13:44,399
import this from ngp it's only one

322
00:13:44,399 --> 00:13:46,560
new value for the time scale attribute

323
00:13:46,560 --> 00:13:49,040
but of course it has some some pretty

324
00:13:49,040 --> 00:13:52,160
interesting ways in in which

325
00:13:52,160 --> 00:13:53,680
the semantics of

326
00:13:53,680 --> 00:13:54,480
time

327
00:13:54,480 --> 00:13:55,760
tagged

328
00:13:55,760 --> 00:13:57,519
data

329
00:13:57,519 --> 00:13:59,839
changes

330
00:13:59,839 --> 00:14:01,199
so um

331
00:14:01,199 --> 00:14:05,040
this this is the situation and uh um i

332
00:14:05,040 --> 00:14:07,120
would propose that

333
00:14:07,120 --> 00:14:09,839
uh we

334
00:14:09,839 --> 00:14:12,320
with respect to see date

335
00:14:12,320 --> 00:14:15,519
we try to go for synchronized

336
00:14:15,519 --> 00:14:17,440
publication with them so

337
00:14:17,440 --> 00:14:19,519
whenever uh

338
00:14:19,519 --> 00:14:22,639
their working plus call finishes hours

339
00:14:22,639 --> 00:14:24,560
uh should be finished

340
00:14:24,560 --> 00:14:25,839
uh two

341
00:14:25,839 --> 00:14:27,120
i mean we don't have to do this

342
00:14:27,120 --> 00:14:30,240
precisely but that should be the general

343
00:14:30,240 --> 00:14:31,920
target

344
00:14:31,920 --> 00:14:33,040
date

345
00:14:33,040 --> 00:14:34,880
uh but on the other hand we should also

346
00:14:34,880 --> 00:14:38,079
be watching what ntp v5 really

347
00:14:38,079 --> 00:14:41,040
does in terms of adding floating time

348
00:14:41,040 --> 00:14:43,760
and uh maybe even adding their their

349
00:14:43,760 --> 00:14:46,000
leap smearing time scale

350
00:14:46,000 --> 00:14:47,120
as well

351
00:14:47,120 --> 00:14:49,279
but we probably don't want to wait for

352
00:14:49,279 --> 00:14:51,279
their completion

353
00:14:51,279 --> 00:14:52,160
uh

354
00:14:52,160 --> 00:14:54,720
to uh actually publish this this

355
00:14:54,720 --> 00:14:56,399
document i mean there will be many

356
00:14:56,399 --> 00:14:57,199
things

357
00:14:57,199 --> 00:14:59,360
happening in ntp v5

358
00:14:59,360 --> 00:15:01,760
obviously but we don't have to

359
00:15:01,760 --> 00:15:03,600
copy all of them

360
00:15:03,600 --> 00:15:06,320
so that would be what i would consider

361
00:15:06,320 --> 00:15:08,079
the obvious plan

362
00:15:08,079 --> 00:15:10,560
um the other plan of course could be to

363
00:15:10,560 --> 00:15:13,440
to say well yeah there are some use

364
00:15:13,440 --> 00:15:16,000
cases for floating time but these are

365
00:15:16,000 --> 00:15:18,639
not use cases for tag 1001 and it should

366
00:15:18,639 --> 00:15:21,040
be done in in a separate attack

367
00:15:21,040 --> 00:15:23,120
uh so that would be an alternative plan

368
00:15:23,120 --> 00:15:25,279
i haven't heard arguments for that

369
00:15:25,279 --> 00:15:26,560
yet

370
00:15:26,560 --> 00:15:29,360
but if people feel that way then then we

371
00:15:29,360 --> 00:15:31,759
probably want to

372
00:15:31,759 --> 00:15:33,920
consider those

373
00:15:33,920 --> 00:15:36,399
arguments

374
00:15:36,720 --> 00:15:39,759
so that's what i have to say about

375
00:15:39,759 --> 00:15:40,399
a

376
00:15:40,399 --> 00:15:41,600
time tag

377
00:15:41,600 --> 00:15:44,160
so if people have an opinion on that

378
00:15:44,160 --> 00:15:45,360
now

379
00:15:45,360 --> 00:15:47,759
that would be good to hear or

380
00:15:47,759 --> 00:15:49,360
on the mailing list

381
00:15:49,360 --> 00:15:51,680
ira

382
00:15:52,320 --> 00:15:54,720
wanted to reiterate what i said on the

383
00:15:54,720 --> 00:15:57,199
mailing list earlier in your response to

384
00:15:57,199 --> 00:15:58,399
your question

385
00:15:58,399 --> 00:16:02,000
ntb v5 the protocols back there isn't

386
00:16:02,000 --> 00:16:04,079
even a unified spec

387
00:16:04,079 --> 00:16:05,040
to be

388
00:16:05,040 --> 00:16:08,000
called for adoption the requirements and

389
00:16:08,000 --> 00:16:12,240
use cases have only just been adopted

390
00:16:12,240 --> 00:16:14,639
after a long period so

391
00:16:14,639 --> 00:16:17,680
i consider that npp v5

392
00:16:17,680 --> 00:16:20,959
as an rfc or even as a late stage stable

393
00:16:20,959 --> 00:16:22,959
internet draft is

394
00:16:22,959 --> 00:16:25,199
a year and a half away

395
00:16:25,199 --> 00:16:26,720
on that order

396
00:16:26,720 --> 00:16:28,880
so um

397
00:16:28,880 --> 00:16:31,279
you certainly you can watch it but um i

398
00:16:31,279 --> 00:16:32,880
don't think you want to wait that long

399
00:16:32,880 --> 00:16:37,000
to adopt time

400
00:16:40,800 --> 00:16:42,639
good so i think what you're saying is in

401
00:16:42,639 --> 00:16:44,240
sync with what i'm proposing on this

402
00:16:44,240 --> 00:16:46,560
slide

403
00:16:46,720 --> 00:16:50,560
very much so and a separate tag is a

404
00:16:50,560 --> 00:16:52,320
fine collusion at some time in the

405
00:16:52,320 --> 00:16:54,959
future um i don't you know

406
00:16:54,959 --> 00:16:56,480
we don't need to add it because there

407
00:16:56,480 --> 00:16:59,680
are ntbp five use cases or other use

408
00:16:59,680 --> 00:17:01,920
cases unless somebody comes forward and

409
00:17:01,920 --> 00:17:04,160
says we really need it in the general

410
00:17:04,160 --> 00:17:06,400
case

411
00:17:12,000 --> 00:17:14,240
good

412
00:17:16,559 --> 00:17:18,400
ok nobody else picks up

413
00:17:18,400 --> 00:17:22,000
questions any other other comments

414
00:17:23,119 --> 00:17:24,559
right hi christian

415
00:17:24,559 --> 00:17:27,119
head off um

416
00:17:27,119 --> 00:17:30,880
so just for clarification um even if we

417
00:17:30,880 --> 00:17:33,280
if we went with this document as it is

418
00:17:33,280 --> 00:17:35,600
now there is nothing that would stop the

419
00:17:35,600 --> 00:17:38,320
later addition of the floating time

420
00:17:38,320 --> 00:17:40,240
through additional keys

421
00:17:40,240 --> 00:17:43,440
at the same time right

422
00:17:43,440 --> 00:17:44,720
no

423
00:17:44,720 --> 00:17:46,799
yes yes you're right

424
00:17:46,799 --> 00:17:48,320
there's nothing that would stop us from

425
00:17:48,320 --> 00:17:49,440
doing that

426
00:17:49,440 --> 00:17:52,480
but we could do it now so um

427
00:17:52,480 --> 00:17:57,160
maybe it's just easier to do it now

428
00:18:00,960 --> 00:18:04,559
okay i think we can take that one to

429
00:18:04,559 --> 00:18:06,320
the list

430
00:18:06,320 --> 00:18:07,760
the next one

431
00:18:07,760 --> 00:18:08,880
is

432
00:18:08,880 --> 00:18:09,760
uh

433
00:18:09,760 --> 00:18:11,360
sibo pact

434
00:18:11,360 --> 00:18:12,320
and

435
00:18:12,320 --> 00:18:15,520
that i think has taken a

436
00:18:15,520 --> 00:18:17,760
a pretty surprising

437
00:18:17,760 --> 00:18:20,240
turn we have actually managed to

438
00:18:20,240 --> 00:18:23,039
make this quite a bit simpler than i

439
00:18:23,039 --> 00:18:25,280
thought it would turn out to

440
00:18:25,280 --> 00:18:26,320
be

441
00:18:26,320 --> 00:18:29,440
um so we now have this function tag

442
00:18:29,440 --> 00:18:31,919
uh concept so we actually have even have

443
00:18:31,919 --> 00:18:33,840
an extension point

444
00:18:33,840 --> 00:18:35,280
in the packed

445
00:18:35,280 --> 00:18:36,960
uh mechanism

446
00:18:36,960 --> 00:18:38,000
uh

447
00:18:38,000 --> 00:18:40,720
we have ongoing implementation work we

448
00:18:40,720 --> 00:18:42,799
probably want to have at least

449
00:18:42,799 --> 00:18:43,600
one

450
00:18:43,600 --> 00:18:45,440
implementation that actually implements

451
00:18:45,440 --> 00:18:46,720
the current

452
00:18:46,720 --> 00:18:48,320
uh draft

453
00:18:48,320 --> 00:18:51,360
um before we uh

454
00:18:51,360 --> 00:18:53,440
go forward i think we will have to do a

455
00:18:53,440 --> 00:18:55,200
second working glass call but that's for

456
00:18:55,200 --> 00:18:57,280
the chairs to decide

457
00:18:57,280 --> 00:18:59,760
and i think that's correct

458
00:18:59,760 --> 00:19:00,640
um

459
00:19:00,640 --> 00:19:04,080
so the the one thing that that came up

460
00:19:04,080 --> 00:19:06,880
in in discussions of other

461
00:19:06,880 --> 00:19:09,440
uh tag activities is

462
00:19:09,440 --> 00:19:11,919
that we are doing a little bit of a sled

463
00:19:11,919 --> 00:19:13,360
of hand here

464
00:19:13,360 --> 00:19:17,200
um by just saying all those uh

465
00:19:17,200 --> 00:19:19,360
tags that we defined

466
00:19:19,360 --> 00:19:20,960
in pact

467
00:19:20,960 --> 00:19:23,360
can be used in place

468
00:19:23,360 --> 00:19:26,799
of the data they stand for

469
00:19:26,799 --> 00:19:30,080
and what we probably have to to remember

470
00:19:30,080 --> 00:19:31,799
is that

471
00:19:31,799 --> 00:19:33,600
8949

472
00:19:33,600 --> 00:19:36,880
defines tag validity in such a way that

473
00:19:36,880 --> 00:19:40,799
a tag can define the shape

474
00:19:40,799 --> 00:19:42,799
the the structure

475
00:19:42,799 --> 00:19:43,679
of

476
00:19:43,679 --> 00:19:46,160
a valid tag content so i can can say

477
00:19:46,160 --> 00:19:48,480
this tag is only valid if the tag

478
00:19:48,480 --> 00:19:51,760
content is an array or is this or that

479
00:19:51,760 --> 00:19:54,320
so we have a top-down

480
00:19:54,320 --> 00:19:57,280
control every tag can talk about their

481
00:19:57,280 --> 00:19:58,720
their content

482
00:19:58,720 --> 00:20:00,559
and that that information is even

483
00:20:00,559 --> 00:20:02,640
recorded in the

484
00:20:02,640 --> 00:20:04,640
tag registry

485
00:20:04,640 --> 00:20:07,919
but a tag cannot really

486
00:20:07,919 --> 00:20:09,200
control

487
00:20:09,200 --> 00:20:12,240
validity upwards so a

488
00:20:12,240 --> 00:20:13,760
tag is a tag

489
00:20:13,760 --> 00:20:17,200
and um if an outer tag

490
00:20:17,200 --> 00:20:19,520
has been defined at a time when this

491
00:20:19,520 --> 00:20:21,600
inner attack maybe wasn't

492
00:20:21,600 --> 00:20:23,679
defined yet

493
00:20:23,679 --> 00:20:26,080
there's essentially no way for the outer

494
00:20:26,080 --> 00:20:27,360
tank to

495
00:20:27,360 --> 00:20:28,400
to

496
00:20:28,400 --> 00:20:31,200
make use of of the fact

497
00:20:31,200 --> 00:20:34,080
that this inner tag maybe fits extremely

498
00:20:34,080 --> 00:20:36,720
well in in the outer tank

499
00:20:36,720 --> 00:20:39,039
because the the inner tag cannot make

500
00:20:39,039 --> 00:20:41,600
this kind of information available

501
00:20:41,600 --> 00:20:45,039
but that is a problem because tags often

502
00:20:45,039 --> 00:20:47,440
are the role of attack often is to

503
00:20:47,440 --> 00:20:50,799
define data that that actually stand in

504
00:20:50,799 --> 00:20:53,039
uh for other data and we currently have

505
00:20:53,039 --> 00:20:55,200
no way to record

506
00:20:55,200 --> 00:20:57,919
uh this uh intention

507
00:20:57,919 --> 00:21:00,799
and we actually had this problem already

508
00:21:00,799 --> 00:21:04,000
in 87 46 in the tank the race

509
00:21:04,000 --> 00:21:07,120
but we kind of glossed over it

510
00:21:07,120 --> 00:21:08,320
87

511
00:21:08,320 --> 00:21:11,440
46 is a collection of some 25

512
00:21:11,440 --> 00:21:12,559
tags

513
00:21:12,559 --> 00:21:13,919
some of which

514
00:21:13,919 --> 00:21:16,559
create data structures that really are

515
00:21:16,559 --> 00:21:17,919
arrays

516
00:21:17,919 --> 00:21:20,159
and some of which operate

517
00:21:20,159 --> 00:21:23,200
on data structures that really arrays

518
00:21:23,200 --> 00:21:27,120
and so we define the term typed array

519
00:21:27,120 --> 00:21:29,360
and use that term everywhere in this

520
00:21:29,360 --> 00:21:32,480
spec where an array is needed

521
00:21:32,480 --> 00:21:34,559
but if we now came

522
00:21:34,559 --> 00:21:38,000
in and defined another

523
00:21:38,640 --> 00:21:39,600
tank

524
00:21:39,600 --> 00:21:41,039
26 tag

525
00:21:41,039 --> 00:21:42,000
that

526
00:21:42,000 --> 00:21:44,480
has the same properties as a typed array

527
00:21:44,480 --> 00:21:46,679
we cannot do this because

528
00:21:46,679 --> 00:21:48,320
8746

529
00:21:48,320 --> 00:21:51,520
uh just enumerates those 25 tags

530
00:21:51,520 --> 00:21:52,799
and

531
00:21:52,799 --> 00:21:55,600
that is a complete list of what can be

532
00:21:55,600 --> 00:21:57,440
the tag content

533
00:21:57,440 --> 00:21:59,760
for for such a tag

534
00:21:59,760 --> 00:22:01,280
and

535
00:22:01,280 --> 00:22:03,600
the same problem of course happens with

536
00:22:03,600 --> 00:22:04,960
sibo package

537
00:22:04,960 --> 00:22:06,960
now a reference tag

538
00:22:06,960 --> 00:22:09,679
stands in for the reference data

539
00:22:09,679 --> 00:22:11,760
but a tag that

540
00:22:11,760 --> 00:22:14,799
has a reference tag as tag content

541
00:22:14,799 --> 00:22:17,280
or has a data structure

542
00:22:17,280 --> 00:22:20,000
um that it wants to control that has a

543
00:22:20,000 --> 00:22:21,679
reference tag in a position that it

544
00:22:21,679 --> 00:22:23,840
wants to control

545
00:22:23,840 --> 00:22:27,600
that tag has no way to make way for

546
00:22:27,600 --> 00:22:29,600
using this reference

547
00:22:29,600 --> 00:22:31,600
tag there

548
00:22:31,600 --> 00:22:34,000
so an implementation that has a tag

549
00:22:34,000 --> 00:22:37,679
validator that operates before unpacking

550
00:22:37,679 --> 00:22:39,200
will break

551
00:22:39,200 --> 00:22:41,039
we'll find a reference tag in a place

552
00:22:41,039 --> 00:22:43,520
where i didn't expect the reference tag

553
00:22:43,520 --> 00:22:45,600
and we'll

554
00:22:45,600 --> 00:22:49,439
mark this as invalid brenden

555
00:22:51,760 --> 00:22:54,480
i think that there's a logical flaw here

556
00:22:54,480 --> 00:22:55,600
um

557
00:22:55,600 --> 00:22:58,080
your tag validator must have already

558
00:22:58,080 --> 00:23:01,520
validated the outer seaboard packed tag

559
00:23:01,520 --> 00:23:04,240
for it to ever encounter a reference tag

560
00:23:04,240 --> 00:23:05,840
and if it's done that and it's

561
00:23:05,840 --> 00:23:07,760
recognized that tag and it's been able

562
00:23:07,760 --> 00:23:10,240
to validate that tag then it knows full

563
00:23:10,240 --> 00:23:11,679
well that it's going to encounter

564
00:23:11,679 --> 00:23:14,799
references inside it

565
00:23:14,799 --> 00:23:16,159
yes

566
00:23:16,159 --> 00:23:19,039
so there is no flaw

567
00:23:19,039 --> 00:23:20,559
well you you

568
00:23:20,559 --> 00:23:22,559
you

569
00:23:22,559 --> 00:23:24,960
you say it knows that it has encountered

570
00:23:24,960 --> 00:23:27,360
a reference tag it may not know what the

571
00:23:27,360 --> 00:23:29,120
reference tag is

572
00:23:29,120 --> 00:23:31,520
no no it's encountered the outer

573
00:23:31,520 --> 00:23:34,480
seaboard-packed tag the one that defines

574
00:23:34,480 --> 00:23:36,480
the romp array

575
00:23:36,480 --> 00:23:38,960
yes it must have encountered that or it

576
00:23:38,960 --> 00:23:42,000
can't have encountered a reference tag

577
00:23:42,000 --> 00:23:44,159
not necessarily

578
00:23:44,159 --> 00:23:46,400
how do you end up with a reference tag

579
00:23:46,400 --> 00:23:48,720
that's not inside

580
00:23:48,720 --> 00:23:52,400
a rump or an array of references

581
00:23:52,400 --> 00:23:54,880
um the reference tag might be

582
00:23:54,880 --> 00:23:57,120
referencing to a table that has been set

583
00:23:57,120 --> 00:23:58,720
up as part of the content format for

584
00:23:58,720 --> 00:24:00,320
example

585
00:24:00,320 --> 00:24:04,600
but then there's an implicit tag

586
00:24:06,240 --> 00:24:08,000
you you still you're still operating

587
00:24:08,000 --> 00:24:08,960
within the

588
00:24:08,960 --> 00:24:10,640
confines of a dictionary you know it's

589
00:24:10,640 --> 00:24:12,880
there

590
00:24:14,080 --> 00:24:15,919
and it's absolutely mandatory that you

591
00:24:15,919 --> 00:24:17,919
know it's there so if your tag validator

592
00:24:17,919 --> 00:24:19,440
is dumb enough

593
00:24:19,440 --> 00:24:23,520
to go and encounter a seabor packed tag

594
00:24:23,520 --> 00:24:25,679
and then give up when it encounters a

595
00:24:25,679 --> 00:24:27,840
reference well then you just have a

596
00:24:27,840 --> 00:24:31,120
terrible tag validator

597
00:24:31,200 --> 00:24:33,600
yes but one that actually is allowed by

598
00:24:33,600 --> 00:24:35,360
89.49

599
00:24:35,360 --> 00:24:36,240
um

600
00:24:36,240 --> 00:24:37,360
so

601
00:24:37,360 --> 00:24:40,400
this this is really about the legacy

602
00:24:40,400 --> 00:24:43,039
generic decoders

603
00:24:43,039 --> 00:24:44,559
and a

604
00:24:44,559 --> 00:24:47,600
generic decoder usually has some

605
00:24:47,600 --> 00:24:50,720
tag processing in it

606
00:24:50,720 --> 00:24:52,159
so for instance

607
00:24:52,159 --> 00:24:54,480
my implementation if we find the tag 2

608
00:24:54,480 --> 00:24:56,960
or tag 3

609
00:24:56,960 --> 00:24:59,520
will actually

610
00:24:59,520 --> 00:25:01,679
generate a number because in my

611
00:25:01,679 --> 00:25:03,600
implementation

612
00:25:03,600 --> 00:25:06,320
there is no limit to the size

613
00:25:06,320 --> 00:25:07,840
of a number

614
00:25:07,840 --> 00:25:10,080
and

615
00:25:10,640 --> 00:25:14,919
what's going on with the audio here

616
00:25:16,640 --> 00:25:19,440
and um that means when it finds a tag

617
00:25:19,440 --> 00:25:20,400
too

618
00:25:20,400 --> 00:25:23,200
on top of something that for instance is

619
00:25:23,200 --> 00:25:25,120
a data compressor

620
00:25:25,120 --> 00:25:27,039
uh tag which we haven't talked about but

621
00:25:27,039 --> 00:25:29,919
that's actually what motivated the sole

622
00:25:29,919 --> 00:25:31,120
discussion

623
00:25:31,120 --> 00:25:34,159
it will not be able to build a number of

624
00:25:34,159 --> 00:25:36,799
out of the uncompressed data it will

625
00:25:36,799 --> 00:25:39,840
just fail in in this place because

626
00:25:39,840 --> 00:25:40,799
the

627
00:25:40,799 --> 00:25:43,440
tank validity checking for tag 2 really

628
00:25:43,440 --> 00:25:46,080
is hard coded in in the

629
00:25:46,080 --> 00:25:48,880
generic decoder

630
00:25:48,880 --> 00:25:51,919
so what what this concept that these

631
00:25:51,919 --> 00:25:54,880
slides are about is actually doing

632
00:25:54,880 --> 00:25:57,600
is describing how

633
00:25:57,600 --> 00:25:58,640
this

634
00:25:58,640 --> 00:26:01,679
uh implementation of tag validity

635
00:26:01,679 --> 00:26:03,279
is uh

636
00:26:03,279 --> 00:26:05,760
actually deficient

637
00:26:05,760 --> 00:26:07,760
and

638
00:26:07,760 --> 00:26:10,640
we create a new

639
00:26:10,640 --> 00:26:13,600
category of decoders that actually can

640
00:26:13,600 --> 00:26:14,559
deal

641
00:26:14,559 --> 00:26:16,799
with this situation the old decoders of

642
00:26:16,799 --> 00:26:20,080
course stay valid cbo decoders

643
00:26:20,080 --> 00:26:22,720
they just won't be able to

644
00:26:22,720 --> 00:26:26,559
really work in a

645
00:26:26,559 --> 00:26:28,320
packed environment or environment where

646
00:26:28,320 --> 00:26:30,320
we have new checked arrays or data

647
00:26:30,320 --> 00:26:35,559
compression tags and so on and so on

648
00:26:42,640 --> 00:26:45,120
yeah but when you're right that

649
00:26:45,120 --> 00:26:47,520
there are some very specific assumptions

650
00:26:47,520 --> 00:26:50,159
here about how you actually reach this

651
00:26:50,159 --> 00:26:53,200
situation where things

652
00:26:53,200 --> 00:26:54,720
break and one

653
00:26:54,720 --> 00:26:57,360
such assumption is that

654
00:26:57,360 --> 00:26:59,279
a table setup

655
00:26:59,279 --> 00:27:00,559
tag

656
00:27:00,559 --> 00:27:04,000
is not supported by the validity checker

657
00:27:04,000 --> 00:27:05,760
of

658
00:27:05,760 --> 00:27:07,039
legacy

659
00:27:07,039 --> 00:27:10,000
decoder so it will just present that

660
00:27:10,000 --> 00:27:12,480
setup tag as is

661
00:27:12,480 --> 00:27:15,120
uh to the application

662
00:27:15,120 --> 00:27:17,360
but then it continues validation within

663
00:27:17,360 --> 00:27:19,279
that yeah yeah

664
00:27:19,279 --> 00:27:22,480
yeah so so that that's the flaw right

665
00:27:22,480 --> 00:27:26,000
you've parsed into a tag that defines

666
00:27:26,000 --> 00:27:27,600
the structure of its data in a very

667
00:27:27,600 --> 00:27:31,120
particular way and you've just blithely

668
00:27:31,120 --> 00:27:33,200
ignored it and continued on validating

669
00:27:33,200 --> 00:27:36,320
tags anyway yeah okay fair enough that

670
00:27:36,320 --> 00:27:38,640
sounds like a bad decision but i guess

671
00:27:38,640 --> 00:27:40,799
that's what we've got

672
00:27:40,799 --> 00:27:42,640
yeah zebra is really designed to make

673
00:27:42,640 --> 00:27:44,880
that possible so

674
00:27:44,880 --> 00:27:47,679
the idea was to to

675
00:27:47,679 --> 00:27:50,880
share the duties of tag validation

676
00:27:50,880 --> 00:27:53,360
or tag processing between generic

677
00:27:53,360 --> 00:27:55,200
decoders and applications so when a

678
00:27:55,200 --> 00:27:57,520
generic decoder finds something it

679
00:27:57,520 --> 00:27:59,279
doesn't understand it just sends it to

680
00:27:59,279 --> 00:28:00,640
the application

681
00:28:00,640 --> 00:28:03,360
and if it finds something that it thinks

682
00:28:03,360 --> 00:28:04,960
it does understand

683
00:28:04,960 --> 00:28:08,399
uh it actually may blow up in in a place

684
00:28:08,399 --> 00:28:10,080
where it shouldn't lower

685
00:28:10,080 --> 00:28:13,120
yeah no i i appreciate that uh okay

686
00:28:13,120 --> 00:28:14,000
thanks

687
00:28:14,000 --> 00:28:15,840
but that's a very good observation that

688
00:28:15,840 --> 00:28:17,200
we probably need to make this a little

689
00:28:17,200 --> 00:28:19,360
bit more explicit

690
00:28:19,360 --> 00:28:21,200
anyway so um

691
00:28:21,200 --> 00:28:22,880
what the the

692
00:28:22,880 --> 00:28:26,720
new draft uh of packs that that i did

693
00:28:26,720 --> 00:28:28,559
right before the

694
00:28:28,559 --> 00:28:31,039
before the itf well uh too late in any

695
00:28:31,039 --> 00:28:32,000
case

696
00:28:32,000 --> 00:28:33,440
um

697
00:28:33,440 --> 00:28:36,159
does is define a concept of tag

698
00:28:36,159 --> 00:28:37,679
equivalence

699
00:28:37,679 --> 00:28:40,399
where a tag not only controls what what

700
00:28:40,399 --> 00:28:42,159
is inside it

701
00:28:42,159 --> 00:28:46,799
but also can say uh what it actually

702
00:28:46,799 --> 00:28:48,240
looks like

703
00:28:48,240 --> 00:28:51,200
from the point of the tag validity of an

704
00:28:51,200 --> 00:28:52,640
enclosing

705
00:28:52,640 --> 00:28:53,919
tag

706
00:28:53,919 --> 00:28:56,000
so a typed array

707
00:28:56,000 --> 00:28:58,720
tag for instance could really say

708
00:28:58,720 --> 00:29:02,480
um hey i'm an array and everything that

709
00:29:02,480 --> 00:29:04,799
that actually takes an array

710
00:29:04,799 --> 00:29:08,159
is supposed to take a typed array um as

711
00:29:08,159 --> 00:29:09,520
well

712
00:29:09,520 --> 00:29:10,960
so of course that doesn't work when

713
00:29:10,960 --> 00:29:13,520
typed arrays are not implemented but

714
00:29:13,520 --> 00:29:16,000
as soon as they are implemented they can

715
00:29:16,000 --> 00:29:19,200
go into places that take

716
00:29:19,200 --> 00:29:21,360
a raise

717
00:29:21,360 --> 00:29:23,360
so for instance the data compression tag

718
00:29:23,360 --> 00:29:25,360
can stand in for a byte string and you

719
00:29:25,360 --> 00:29:28,559
type the rate i can stand in for a zero

720
00:29:28,559 --> 00:29:30,320
array

721
00:29:30,320 --> 00:29:31,919
what a

722
00:29:31,919 --> 00:29:34,000
tag can not do

723
00:29:34,000 --> 00:29:38,000
is stand in for something else

724
00:29:38,000 --> 00:29:41,279
that is not the same domain so for

725
00:29:41,279 --> 00:29:42,799
instance we have

726
00:29:42,799 --> 00:29:44,399
the the tag

727
00:29:44,399 --> 00:29:45,279
4

728
00:29:45,279 --> 00:29:47,600
which gives you a floating point number

729
00:29:47,600 --> 00:29:49,520
mantissa and exponent

730
00:29:49,520 --> 00:29:52,960
and we have 264 which also gives you a

731
00:29:52,960 --> 00:29:54,399
floating point number

732
00:29:54,399 --> 00:29:56,799
but with an extended range of the

733
00:29:56,799 --> 00:29:58,240
exponent

734
00:29:58,240 --> 00:30:00,320
and that's never something that that you

735
00:30:00,320 --> 00:30:02,159
could handle with tag equivalence

736
00:30:02,159 --> 00:30:03,120
because

737
00:30:03,120 --> 00:30:06,399
if the the tag

738
00:30:06,399 --> 00:30:08,480
generates structure that would be

739
00:30:08,480 --> 00:30:11,360
surprising for the environment uh it

740
00:30:11,360 --> 00:30:14,399
cannot just say uh i will only ever give

741
00:30:14,399 --> 00:30:16,080
data to you that you know

742
00:30:16,080 --> 00:30:17,919
uh how to handle so that that's a

743
00:30:17,919 --> 00:30:19,440
limitation of this

744
00:30:19,440 --> 00:30:22,480
concept and if we want to make tags

745
00:30:22,480 --> 00:30:26,480
generic between 4 and 264 we probably

746
00:30:26,480 --> 00:30:28,640
have to invent something

747
00:30:28,640 --> 00:30:30,640
else

748
00:30:30,640 --> 00:30:33,039
anyway this is written up

749
00:30:33,039 --> 00:30:33,919
and

750
00:30:33,919 --> 00:30:35,679
i believe this is pretty much a

751
00:30:35,679 --> 00:30:37,600
mandatory component of standardizing

752
00:30:37,600 --> 00:30:40,320
sibo pact

753
00:30:40,799 --> 00:30:44,080
christian has pointed out that

754
00:30:44,080 --> 00:30:46,880
this probably needs some caveats because

755
00:30:46,880 --> 00:30:48,559
people shouldn't

756
00:30:48,559 --> 00:30:51,760
use this mechanism to build overly

757
00:30:51,760 --> 00:30:53,039
elaborate

758
00:30:53,039 --> 00:30:56,000
uh type systems that do weird things

759
00:30:56,000 --> 00:30:58,799
with the data going on

760
00:30:58,799 --> 00:31:01,840
um in there uh so that there is a little

761
00:31:01,840 --> 00:31:03,919
bit of text that

762
00:31:03,919 --> 00:31:06,000
provides caveats maybe we want to add

763
00:31:06,000 --> 00:31:06,960
some more

764
00:31:06,960 --> 00:31:09,679
uh caveats and now the question is how

765
00:31:09,679 --> 00:31:11,200
how do we

766
00:31:11,200 --> 00:31:13,039
uh handle this

767
00:31:13,039 --> 00:31:16,000
we could just standardize as part of the

768
00:31:16,000 --> 00:31:18,880
sibo specification this is

769
00:31:18,880 --> 00:31:22,080
the smallest number of

770
00:31:22,080 --> 00:31:24,320
documents the smallest

771
00:31:24,320 --> 00:31:26,159
um

772
00:31:26,159 --> 00:31:27,919
editorial effort

773
00:31:27,919 --> 00:31:29,519
uh but

774
00:31:29,519 --> 00:31:31,519
yeah i just ran to

775
00:31:31,519 --> 00:31:33,840
through a very interesting case where

776
00:31:33,840 --> 00:31:34,880
people had

777
00:31:34,880 --> 00:31:37,679
really big problems with defining a data

778
00:31:37,679 --> 00:31:40,000
structure together together with a new

779
00:31:40,000 --> 00:31:41,039
tag

780
00:31:41,039 --> 00:31:42,399
in one

781
00:31:42,399 --> 00:31:44,640
document so the problem details the

782
00:31:44,640 --> 00:31:48,000
document over in in uh core

783
00:31:48,000 --> 00:31:50,159
that raised some eyebrows because it

784
00:31:50,159 --> 00:31:51,760
defines the tag

785
00:31:51,760 --> 00:31:52,880
and

786
00:31:52,880 --> 00:31:56,080
yeah so maybe there are arguments to put

787
00:31:56,080 --> 00:31:57,840
it into separate documents but my plan

788
00:31:57,840 --> 00:31:59,360
would be to

789
00:31:59,360 --> 00:32:01,919
not to anticipate them but just to wait

790
00:32:01,919 --> 00:32:04,000
whether they actually come

791
00:32:04,000 --> 00:32:06,799
and do this in in the zebra pack

792
00:32:06,799 --> 00:32:08,240
specification

793
00:32:08,240 --> 00:32:11,039
and then the question of course is

794
00:32:11,039 --> 00:32:14,720
uh does this get an updates tag

795
00:32:14,720 --> 00:32:18,000
does it do an update to 89.49 which of

796
00:32:18,000 --> 00:32:20,240
course is interesting

797
00:32:20,240 --> 00:32:24,960
proposed standard specification updating

798
00:32:24,960 --> 00:32:26,960
an internet standard specification i

799
00:32:26,960 --> 00:32:29,039
have no idea how that works or whether

800
00:32:29,039 --> 00:32:30,320
that's a problem

801
00:32:30,320 --> 00:32:31,679
at all

802
00:32:31,679 --> 00:32:32,640
um

803
00:32:32,640 --> 00:32:34,799
or we could simply not say that it

804
00:32:34,799 --> 00:32:36,640
updates it which would be a little bit

805
00:32:36,640 --> 00:32:39,039
of a lie but maybe a little bit of a

806
00:32:39,039 --> 00:32:40,240
white lie

807
00:32:40,240 --> 00:32:40,960
so

808
00:32:40,960 --> 00:32:43,039
i don't have a strong opinion

809
00:32:43,039 --> 00:32:45,039
um on that

810
00:32:45,039 --> 00:32:48,080
uh yeah again we could put it into a

811
00:32:48,080 --> 00:32:49,200
separate

812
00:32:49,200 --> 00:32:50,960
uh document

813
00:32:50,960 --> 00:32:54,250
and then we have a little bit of an open

814
00:32:54,250 --> 00:32:55,760
[Music]

815
00:32:55,760 --> 00:32:58,480
issue here with the question how do you

816
00:32:58,480 --> 00:33:00,080
actually express

817
00:33:00,080 --> 00:33:03,039
tag your equivalence in cddl

818
00:33:03,039 --> 00:33:05,519
because cda doesn't currently

819
00:33:05,519 --> 00:33:07,840
allow you to do that it has

820
00:33:07,840 --> 00:33:11,840
exactly the same structural approach

821
00:33:11,840 --> 00:33:13,360
that

822
00:33:13,360 --> 00:33:14,559
sibo

823
00:33:14,559 --> 00:33:17,600
uh had in 1749 and then we get that we

824
00:33:17,600 --> 00:33:20,000
kept for 89.49

825
00:33:20,000 --> 00:33:22,640
so we will have to invent something

826
00:33:22,640 --> 00:33:24,720
to be able to express these things as

827
00:33:24,720 --> 00:33:26,960
well

828
00:33:27,519 --> 00:33:31,279
but i'm not proposing to to wait uh

829
00:33:31,279 --> 00:33:34,559
with zebra pact until we have uh

830
00:33:34,559 --> 00:33:36,240
invented

831
00:33:36,240 --> 00:33:37,840
that

832
00:33:37,840 --> 00:33:40,559
new cddl but this should be a separate

833
00:33:40,559 --> 00:33:43,200
effort i think

834
00:33:44,559 --> 00:33:48,519
any comments on this plan

835
00:33:56,640 --> 00:33:59,039
i don't know

836
00:33:59,279 --> 00:34:00,960
i don't know that it's a comment but

837
00:34:00,960 --> 00:34:02,640
it's a question

838
00:34:02,640 --> 00:34:03,360
for

839
00:34:03,360 --> 00:34:06,799
barry or someone with deep experience of

840
00:34:06,799 --> 00:34:08,000
process

841
00:34:08,000 --> 00:34:11,440
i don't i thought a proposed standard

842
00:34:11,440 --> 00:34:14,800
could not update a full standard

843
00:34:14,800 --> 00:34:18,520
is that not true

844
00:34:21,520 --> 00:34:23,918
well i haven't

845
00:34:23,918 --> 00:34:25,839
investigated that

846
00:34:25,839 --> 00:34:26,800
so

847
00:34:26,800 --> 00:34:30,359
let's find out

848
00:34:34,159 --> 00:34:36,670
so i didn't quite get ira's question

849
00:34:36,670 --> 00:34:39,809
[Music]

850
00:34:39,918 --> 00:34:42,560
if i have a full standard

851
00:34:42,560 --> 00:34:46,719
an internet standard 8949

852
00:34:46,719 --> 00:34:49,760
and i have seabor pact and i published

853
00:34:49,760 --> 00:34:53,520
it in a later rfc and i say it updates

854
00:34:53,520 --> 00:34:56,000
89.49

855
00:34:56,000 --> 00:34:59,040
in a way that's um

856
00:34:59,040 --> 00:35:00,480
rather

857
00:35:00,480 --> 00:35:02,640
that's maybe stretching a point in any

858
00:35:02,640 --> 00:35:06,880
case is a proposed standard allowed to

859
00:35:06,880 --> 00:35:10,079
update an internet standard

860
00:35:10,079 --> 00:35:10,960
right yes

861
00:35:10,960 --> 00:35:12,240
absolutely

862
00:35:12,240 --> 00:35:14,960
um what effect that has depends on what

863
00:35:14,960 --> 00:35:16,880
the update is

864
00:35:16,880 --> 00:35:20,079
but i will give you a

865
00:35:20,079 --> 00:35:22,160
more extreme situation

866
00:35:22,160 --> 00:35:24,240
rfc 5321

867
00:35:24,240 --> 00:35:27,359
is the current smtp standard it's at

868
00:35:27,359 --> 00:35:29,280
draft standard level

869
00:35:29,280 --> 00:35:33,200
and it obsoleted rfc 821 which was full

870
00:35:33,200 --> 00:35:34,320
standard

871
00:35:34,320 --> 00:35:35,839
so you know all that kind of stuff

872
00:35:35,839 --> 00:35:37,200
happens

873
00:35:37,200 --> 00:35:39,920
um in the case of an updates i would say

874
00:35:39,920 --> 00:35:41,440
that the

875
00:35:41,440 --> 00:35:44,960
the new feature that the updated creates

876
00:35:44,960 --> 00:35:47,440
is at the proposed standard level and

877
00:35:47,440 --> 00:35:49,599
the rest of the protocol remains at the

878
00:35:49,599 --> 00:35:51,359
full standard level

879
00:35:51,359 --> 00:35:53,599
but yeah it's fine if that's the right

880
00:35:53,599 --> 00:35:57,800
thing to do then that's what we do

881
00:35:58,079 --> 00:36:00,320
the reason for my question was

882
00:36:00,320 --> 00:36:01,920
i agreed with

883
00:36:01,920 --> 00:36:04,400
carsten i don't like

884
00:36:04,400 --> 00:36:07,359
saying don't update that is don't admit

885
00:36:07,359 --> 00:36:08,800
the fact

886
00:36:08,800 --> 00:36:13,000
that it alters 89.49

887
00:36:13,760 --> 00:36:15,920
yeah oh absolutely if if it turns out

888
00:36:15,920 --> 00:36:18,240
that we made a mistake in an in an

889
00:36:18,240 --> 00:36:20,960
internet standard level document

890
00:36:20,960 --> 00:36:23,440
we need to correct the mistake and um

891
00:36:23,440 --> 00:36:25,359
put that back through the standards

892
00:36:25,359 --> 00:36:29,598
track starting at proposed absolutely

893
00:36:35,119 --> 00:36:38,359
thank you

894
00:36:47,040 --> 00:36:50,160
okay if we are done with this

895
00:36:50,160 --> 00:36:51,920
item

896
00:36:51,920 --> 00:36:52,800
i would

897
00:36:52,800 --> 00:36:55,359
quickly like to go to the

898
00:36:55,359 --> 00:36:59,960
next one which is rfc 9254

899
00:37:00,079 --> 00:37:03,040
which is a

900
00:37:03,520 --> 00:37:05,920
standard defined by

901
00:37:05,920 --> 00:37:09,200
the core working group

902
00:37:09,200 --> 00:37:12,160
what the calling group does is provide a

903
00:37:12,160 --> 00:37:15,359
form of concise web access

904
00:37:15,359 --> 00:37:16,960
to

905
00:37:16,960 --> 00:37:18,800
constraint devices

906
00:37:18,800 --> 00:37:21,119
and when you provide some form of

907
00:37:21,119 --> 00:37:23,040
constrained web access you probably also

908
00:37:23,040 --> 00:37:24,960
want to support management

909
00:37:24,960 --> 00:37:28,000
so in 2013 we actually started thinking

910
00:37:28,000 --> 00:37:29,440
about how to

911
00:37:29,440 --> 00:37:31,520
integrate snmp

912
00:37:31,520 --> 00:37:34,880
into the the core environment

913
00:37:34,880 --> 00:37:37,599
and shortly after that it became clear

914
00:37:37,599 --> 00:37:41,040
that we really didn't want to implement

915
00:37:41,040 --> 00:37:45,119
snmp here but but integrate yang

916
00:37:45,119 --> 00:37:48,800
so we started an activity that did that

917
00:37:48,800 --> 00:37:49,760
and

918
00:37:49,760 --> 00:37:52,160
at some point we found that the best way

919
00:37:52,160 --> 00:37:53,760
to do this

920
00:37:53,760 --> 00:37:56,880
would be to encode the yang data not in

921
00:37:56,880 --> 00:37:59,440
xml which is the original way of

922
00:37:59,440 --> 00:38:02,240
encoding it or in json

923
00:38:02,240 --> 00:38:04,640
but in sibo so that's how the the

924
00:38:04,640 --> 00:38:07,440
callback group uh got to do the yang

925
00:38:07,440 --> 00:38:08,480
zebra

926
00:38:08,480 --> 00:38:10,320
um document

927
00:38:10,320 --> 00:38:12,400
and this is of course pretty interesting

928
00:38:12,400 --> 00:38:14,720
because with with the the publication of

929
00:38:14,720 --> 00:38:16,000
young sibo

930
00:38:16,000 --> 00:38:20,000
uh we now have a way to

931
00:38:20,000 --> 00:38:21,599
provide

932
00:38:21,599 --> 00:38:22,800
yang

933
00:38:22,800 --> 00:38:25,280
defined data in cbo

934
00:38:25,280 --> 00:38:26,400
or

935
00:38:26,400 --> 00:38:28,480
you can put it the other way around we

936
00:38:28,480 --> 00:38:30,800
have a way to define

937
00:38:30,800 --> 00:38:34,400
sebor data using yang and one example

938
00:38:34,400 --> 00:38:38,160
for that is the the constrained voucher

939
00:38:38,160 --> 00:38:40,640
that that anima is defining for for

940
00:38:40,640 --> 00:38:42,160
brewski

941
00:38:42,160 --> 00:38:43,839
onboarding

942
00:38:43,839 --> 00:38:47,359
that is actually a young defined data

943
00:38:47,359 --> 00:38:48,960
structure that is

944
00:38:48,960 --> 00:38:50,960
now encoded in

945
00:38:50,960 --> 00:38:53,359
sibor

946
00:38:53,359 --> 00:38:56,400
and what we did when we did this

947
00:38:56,400 --> 00:38:59,920
we didn't try to to compress all the the

948
00:38:59,920 --> 00:39:01,359
xml

949
00:39:01,359 --> 00:39:02,640
wordiness

950
00:39:02,640 --> 00:39:05,359
uh so for instance ip addresses or date

951
00:39:05,359 --> 00:39:06,160
time

952
00:39:06,160 --> 00:39:08,640
they used are still text strings when

953
00:39:08,640 --> 00:39:10,640
you

954
00:39:10,640 --> 00:39:14,240
have defined that them that way at the

955
00:39:14,240 --> 00:39:15,440
yang level

956
00:39:15,440 --> 00:39:17,760
young sibo doesn't change that

957
00:39:17,760 --> 00:39:20,800
but it has one significant

958
00:39:20,800 --> 00:39:22,079
performance

959
00:39:22,079 --> 00:39:25,359
perk and that is all the yang names

960
00:39:25,359 --> 00:39:27,440
the names for the various items in the

961
00:39:27,440 --> 00:39:29,280
structure

962
00:39:29,280 --> 00:39:31,839
which are text strings in young xml and

963
00:39:31,839 --> 00:39:32,880
json

964
00:39:32,880 --> 00:39:35,040
are can be replaced

965
00:39:35,040 --> 00:39:37,520
by pure integers

966
00:39:37,520 --> 00:39:40,000
and using data coding this usually is

967
00:39:40,000 --> 00:39:41,119
very very

968
00:39:41,119 --> 00:39:44,240
efficient because typically when you use

969
00:39:44,240 --> 00:39:45,920
one

970
00:39:45,920 --> 00:39:47,119
name

971
00:39:47,119 --> 00:39:49,119
inside the data structure you probably

972
00:39:49,119 --> 00:39:51,760
use names that are close to that

973
00:39:51,760 --> 00:39:54,240
and the allocation mechanism

974
00:39:54,240 --> 00:39:56,000
that is still being defined in the draft

975
00:39:56,000 --> 00:39:57,760
that is still in the isg

976
00:39:57,760 --> 00:39:59,920
um that tries to make sure that those

977
00:39:59,920 --> 00:40:03,200
datas are typically relatively small

978
00:40:03,200 --> 00:40:06,400
anyway we we have a new tool in our

979
00:40:06,400 --> 00:40:07,920
toolkit so

980
00:40:07,920 --> 00:40:08,960
when

981
00:40:08,960 --> 00:40:09,680
we

982
00:40:09,680 --> 00:40:12,560
see sibo as a

983
00:40:12,560 --> 00:40:15,599
useful way to to structure

984
00:40:15,599 --> 00:40:17,040
data

985
00:40:17,040 --> 00:40:18,720
to represent data that is being

986
00:40:18,720 --> 00:40:20,400
interchanged

987
00:40:20,400 --> 00:40:21,520
but

988
00:40:21,520 --> 00:40:22,800
maybe

989
00:40:22,800 --> 00:40:25,040
the the group

990
00:40:25,040 --> 00:40:27,359
that is doing that that is working on

991
00:40:27,359 --> 00:40:29,839
that is more familiar with yang or

992
00:40:29,839 --> 00:40:33,440
doesn't like cdl for any reason

993
00:40:33,440 --> 00:40:36,000
we may want to use yang

994
00:40:36,000 --> 00:40:36,800
and

995
00:40:36,800 --> 00:40:39,040
that of course opens a little bit the

996
00:40:39,040 --> 00:40:40,000
question

997
00:40:40,000 --> 00:40:41,200
um

998
00:40:41,200 --> 00:40:43,200
how do we

999
00:40:43,200 --> 00:40:44,079
uh

1000
00:40:44,079 --> 00:40:47,040
make sure that these two

1001
00:40:47,040 --> 00:40:51,040
uh parts of the sibo ecosystem

1002
00:40:51,040 --> 00:40:54,480
stay on good terms with each other over

1003
00:40:54,480 --> 00:40:56,000
time

1004
00:40:56,000 --> 00:40:58,960
um so that that's a pretty complicated

1005
00:40:58,960 --> 00:41:01,200
question but i think in the future when

1006
00:41:01,200 --> 00:41:04,160
we do something on the city outside uh

1007
00:41:04,160 --> 00:41:07,599
we probably will have one look uh at the

1008
00:41:07,599 --> 00:41:10,560
yang side and see how how are they doing

1009
00:41:10,560 --> 00:41:12,319
things and uh

1010
00:41:12,319 --> 00:41:14,240
um are we doing something stupid here

1011
00:41:14,240 --> 00:41:16,720
we're making it harder to

1012
00:41:16,720 --> 00:41:20,240
combine city fine data with yang defined

1013
00:41:20,240 --> 00:41:22,480
data or not and actually that has

1014
00:41:22,480 --> 00:41:26,000
already happened the the way

1015
00:41:26,079 --> 00:41:27,760
cgl

1016
00:41:27,760 --> 00:41:29,040
uses

1017
00:41:29,040 --> 00:41:31,040
regular expressions

1018
00:41:31,040 --> 00:41:34,480
has been aligned with the way yang uses

1019
00:41:34,480 --> 00:41:35,680
them so

1020
00:41:35,680 --> 00:41:38,319
we already have done that a little bit

1021
00:41:38,319 --> 00:41:39,200
but

1022
00:41:39,200 --> 00:41:41,680
i think it's now obvious that we want to

1023
00:41:41,680 --> 00:41:44,240
look into this some more

1024
00:41:44,240 --> 00:41:46,960
so yang is a pretty complicated

1025
00:41:46,960 --> 00:41:49,119
language you can do a lot in that

1026
00:41:49,119 --> 00:41:50,560
language

1027
00:41:50,560 --> 00:41:52,720
you can express co-occurrence

1028
00:41:52,720 --> 00:41:55,359
constraints using xpath which is a

1029
00:41:55,359 --> 00:41:57,200
touring equivalent

1030
00:41:57,200 --> 00:42:00,480
language so you may not always have for

1031
00:42:00,480 --> 00:42:02,400
the right level of complexity in mind

1032
00:42:02,400 --> 00:42:04,160
when you do gang

1033
00:42:04,160 --> 00:42:08,240
but when you do a really complicated

1034
00:42:08,240 --> 00:42:11,520
management information based standards

1035
00:42:11,520 --> 00:42:14,400
then maybe yang is is a better way to do

1036
00:42:14,400 --> 00:42:16,640
this so i just wanted to point out that

1037
00:42:16,640 --> 00:42:18,480
this is something that will

1038
00:42:18,480 --> 00:42:19,760
inform

1039
00:42:19,760 --> 00:42:21,680
our cdl

1040
00:42:21,680 --> 00:42:23,839
uh development

1041
00:42:23,839 --> 00:42:26,319
in the future and we will try we

1042
00:42:26,319 --> 00:42:28,079
certainly always have in mind that there

1043
00:42:28,079 --> 00:42:30,640
is this other thing there that we want

1044
00:42:30,640 --> 00:42:32,079
to

1045
00:42:32,079 --> 00:42:34,319
um

1046
00:42:36,400 --> 00:42:37,920
we want to make sure that we don't do

1047
00:42:37,920 --> 00:42:39,200
stupid things

1048
00:42:39,200 --> 00:42:42,240
good so this is my my little preliminary

1049
00:42:42,240 --> 00:42:43,040
for

1050
00:42:43,040 --> 00:42:45,839
the the cda2

1051
00:42:45,839 --> 00:42:47,280
discussion

1052
00:42:47,280 --> 00:42:49,839
um so just as a reminder what the sibo

1053
00:42:49,839 --> 00:42:52,319
working group does we have the sieber

1054
00:42:52,319 --> 00:42:55,280
format which is stable we're not

1055
00:42:55,280 --> 00:42:57,920
currently changing anything there but we

1056
00:42:57,920 --> 00:43:00,240
have an extension point which is the the

1057
00:43:00,240 --> 00:43:02,960
tag use ecosystem

1058
00:43:02,960 --> 00:43:05,520
um so uh

1059
00:43:05,520 --> 00:43:08,800
we have to think about good ways to to

1060
00:43:08,800 --> 00:43:12,560
move the tag ecosystem forward which is

1061
00:43:12,560 --> 00:43:15,119
mostly done

1062
00:43:15,119 --> 00:43:17,839
by by the users of sieber but sometimes

1063
00:43:17,839 --> 00:43:18,800
we

1064
00:43:18,800 --> 00:43:20,880
generate some highly reusable shared

1065
00:43:20,880 --> 00:43:21,760
tags

1066
00:43:21,760 --> 00:43:24,640
and the other item on the zebra working

1067
00:43:24,640 --> 00:43:25,760
group

1068
00:43:25,760 --> 00:43:28,720
played as cgdl which was standardized as

1069
00:43:28,720 --> 00:43:30,880
a 1.0

1070
00:43:30,880 --> 00:43:32,480
and

1071
00:43:32,480 --> 00:43:33,599
with

1072
00:43:33,599 --> 00:43:36,079
a strong understanding that we would

1073
00:43:36,079 --> 00:43:38,560
want to develop this further and that's

1074
00:43:38,560 --> 00:43:41,119
the the city a 2.0

1075
00:43:41,119 --> 00:43:43,359
uh discussion

1076
00:43:43,359 --> 00:43:46,480
uh cdl defines one extension point the

1077
00:43:46,480 --> 00:43:48,480
control operator so whenever we want to

1078
00:43:48,480 --> 00:43:49,680
do something

1079
00:43:49,680 --> 00:43:51,280
one question is

1080
00:43:51,280 --> 00:43:53,280
um can we do this with a control

1081
00:43:53,280 --> 00:43:55,200
operator and it turns out we could do

1082
00:43:55,200 --> 00:43:57,040
much more with the control operator than

1083
00:43:57,040 --> 00:43:58,240
we originally

1084
00:43:58,240 --> 00:44:00,079
originally thought

1085
00:44:00,079 --> 00:44:02,640
so for instance we have uh

1086
00:44:02,640 --> 00:44:03,880
rfc

1087
00:44:03,880 --> 00:44:07,920
9165 which is really cdl 1.1

1088
00:44:07,920 --> 00:44:11,440
because it makes some significant

1089
00:44:11,440 --> 00:44:13,680
additions but using the existing

1090
00:44:13,680 --> 00:44:16,319
extension points so

1091
00:44:16,319 --> 00:44:19,119
it's not a new version of cda

1092
00:44:19,119 --> 00:44:20,880
at all it just

1093
00:44:20,880 --> 00:44:22,560
provides additional functionality

1094
00:44:22,560 --> 00:44:23,520
through this

1095
00:44:23,520 --> 00:44:25,680
extension point and that's in particular

1096
00:44:25,680 --> 00:44:27,359
the abnf

1097
00:44:27,359 --> 00:44:30,079
support and the dot feature

1098
00:44:30,079 --> 00:44:31,920
support

1099
00:44:31,920 --> 00:44:32,720
um

1100
00:44:32,720 --> 00:44:34,839
there are also some other places where

1101
00:44:34,839 --> 00:44:37,920
this group can do things

1102
00:44:37,920 --> 00:44:39,440
for instance

1103
00:44:39,440 --> 00:44:42,319
when we did sibo we defined diagnostic

1104
00:44:42,319 --> 00:44:43,839
notation because

1105
00:44:43,839 --> 00:44:46,000
we thought it was important to be able

1106
00:44:46,000 --> 00:44:46,800
to

1107
00:44:46,800 --> 00:44:48,720
put sibo on a whiteboard

1108
00:44:48,720 --> 00:44:52,000
and uh well cddl is very is great on a

1109
00:44:52,000 --> 00:44:53,280
whiteboard

1110
00:44:53,280 --> 00:44:55,920
but when you have tools that need to

1111
00:44:55,920 --> 00:44:59,280
interchange cddl uh these tools would

1112
00:44:59,280 --> 00:45:01,200
need to to have

1113
00:45:01,200 --> 00:45:03,680
pretty printers and parsers

1114
00:45:03,680 --> 00:45:06,480
for cddl and maybe it's just easier to

1115
00:45:06,480 --> 00:45:07,599
just

1116
00:45:07,599 --> 00:45:09,440
interchange json

1117
00:45:09,440 --> 00:45:11,119
and therefore

1118
00:45:11,119 --> 00:45:13,440
well there is what you see on the right

1119
00:45:13,440 --> 00:45:14,880
side of this

1120
00:45:14,880 --> 00:45:17,920
slide is the entirety of the definition

1121
00:45:17,920 --> 00:45:20,160
of the

1122
00:45:20,160 --> 00:45:23,839
json grammar for cddl so if you want to

1123
00:45:23,839 --> 00:45:26,640
interchange cddl as json this is the

1124
00:45:26,640 --> 00:45:28,800
document you may want to

1125
00:45:28,800 --> 00:45:29,839
look at

1126
00:45:29,839 --> 00:45:31,520
so that's something where we might want

1127
00:45:31,520 --> 00:45:34,319
to do work but i'm not go

1128
00:45:34,319 --> 00:45:36,720
proposing something anything concrete at

1129
00:45:36,720 --> 00:45:38,880
this point in time

1130
00:45:38,880 --> 00:45:41,680
so the actual city that put 2.0 work is

1131
00:45:41,680 --> 00:45:42,880
work where

1132
00:45:42,880 --> 00:45:46,400
uh we need to go beyond the city syntax

1133
00:45:46,400 --> 00:45:48,079
we have defined in

1134
00:45:48,079 --> 00:45:51,280
1.0 and we

1135
00:45:51,280 --> 00:45:54,960
identified annotation and composition as

1136
00:45:54,960 --> 00:45:58,319
to the the highest priorities

1137
00:45:58,319 --> 00:46:00,560
let's talk about composition that that's

1138
00:46:00,560 --> 00:46:01,920
where we

1139
00:46:01,920 --> 00:46:04,000
uh want to

1140
00:46:04,000 --> 00:46:05,200
build

1141
00:46:05,200 --> 00:46:08,800
a cdda specification from multiple files

1142
00:46:08,800 --> 00:46:12,079
possibly files that come out of a

1143
00:46:12,079 --> 00:46:14,560
library so we don't have to do all this

1144
00:46:14,560 --> 00:46:16,000
cut and paste

1145
00:46:16,000 --> 00:46:18,079
uh stuff that we have to do today to

1146
00:46:18,079 --> 00:46:20,160
actually build our city

1147
00:46:20,160 --> 00:46:22,079
uh specifications so there should be

1148
00:46:22,079 --> 00:46:23,599
something like an

1149
00:46:23,599 --> 00:46:26,160
uh export interface

1150
00:46:26,160 --> 00:46:29,040
uh for from a library file into some

1151
00:46:29,040 --> 00:46:31,200
other specification using the library

1152
00:46:31,200 --> 00:46:33,440
and an import interface

1153
00:46:33,440 --> 00:46:36,480
uh so that the cd8 spec can

1154
00:46:36,480 --> 00:46:37,920
get some

1155
00:46:37,920 --> 00:46:38,960
uh

1156
00:46:38,960 --> 00:46:41,280
definitions from from another

1157
00:46:41,280 --> 00:46:44,480
spec and of course we need some naming

1158
00:46:44,480 --> 00:46:45,280
uh

1159
00:46:45,280 --> 00:46:49,200
conventions or mechanisms uh to do this

1160
00:46:49,200 --> 00:46:51,680
so the whole name spacing issue i gloss

1161
00:46:51,680 --> 00:46:54,000
over that because i'm i'm already over

1162
00:46:54,000 --> 00:46:56,720
time sorry

1163
00:46:56,720 --> 00:46:59,920
we also had the discussion how to do

1164
00:46:59,920 --> 00:47:02,240
alternatives so writing one

1165
00:47:02,240 --> 00:47:04,720
specification that can actually

1166
00:47:04,720 --> 00:47:06,240
generate

1167
00:47:06,240 --> 00:47:08,720
different

1168
00:47:08,720 --> 00:47:11,440
structures depending on some parameter

1169
00:47:11,440 --> 00:47:16,560
um in rfc 4 84 28 in cinema

1170
00:47:16,560 --> 00:47:19,200
we actually used some some

1171
00:47:19,200 --> 00:47:22,160
lexical mechanisms where we told people

1172
00:47:22,160 --> 00:47:25,520
combine the cdl in figure five with that

1173
00:47:25,520 --> 00:47:28,720
in figure seven and you can do json and

1174
00:47:28,720 --> 00:47:32,079
combine five and six and you can do

1175
00:47:32,079 --> 00:47:34,319
a zebra we now have that feature to do

1176
00:47:34,319 --> 00:47:37,280
this a bit on a more semantic

1177
00:47:37,280 --> 00:47:39,040
uh level

1178
00:47:39,040 --> 00:47:41,760
and uh maybe at some point we can extend

1179
00:47:41,760 --> 00:47:43,920
this in some way that you actually can

1180
00:47:43,920 --> 00:47:45,200
translate

1181
00:47:45,200 --> 00:47:47,040
uh between the alternatives but

1182
00:47:47,040 --> 00:47:48,880
translation is not so it's currently

1183
00:47:48,880 --> 00:47:50,079
something that

1184
00:47:50,079 --> 00:47:54,880
uh city uh supports at all

1185
00:47:55,920 --> 00:47:58,000
um the the other thing that that maybe

1186
00:47:58,000 --> 00:48:00,640
is even more important than than

1187
00:48:00,640 --> 00:48:03,839
coming up with a good syntax for this is

1188
00:48:03,839 --> 00:48:05,680
doing automation

1189
00:48:05,680 --> 00:48:08,800
so making libraries available from from

1190
00:48:08,800 --> 00:48:10,240
existing

1191
00:48:10,240 --> 00:48:11,040
uh

1192
00:48:11,040 --> 00:48:13,760
sources like rfcs and internet drafts

1193
00:48:13,760 --> 00:48:16,000
inregistries

1194
00:48:16,000 --> 00:48:20,160
non-iitf sources 3gpp

1195
00:48:20,160 --> 00:48:22,960
and so on and being able to trigger this

1196
00:48:22,960 --> 00:48:27,119
automation from a cdl spec

1197
00:48:27,359 --> 00:48:28,800
so

1198
00:48:28,800 --> 00:48:31,599
one way to do this is actually to come

1199
00:48:31,599 --> 00:48:34,400
up with a syntax that is cdl1

1200
00:48:34,400 --> 00:48:36,240
compatible

1201
00:48:36,240 --> 00:48:40,160
so a cdl1 file is a cdl2 file

1202
00:48:40,160 --> 00:48:41,119
and

1203
00:48:41,119 --> 00:48:43,520
on the other way around

1204
00:48:43,520 --> 00:48:45,760
a cdi2 file

1205
00:48:45,760 --> 00:48:48,960
can be passed by a cdl1

1206
00:48:48,960 --> 00:48:51,760
processor and it can still do useful

1207
00:48:51,760 --> 00:48:53,280
things it cannot use all the

1208
00:48:53,280 --> 00:48:55,599
functionality but it can be useful

1209
00:48:55,599 --> 00:48:57,200
things and

1210
00:48:57,200 --> 00:48:59,280
that's

1211
00:48:59,280 --> 00:49:01,280
something that that helps of course with

1212
00:49:01,280 --> 00:49:03,680
an ecosystem where we now have multiple

1213
00:49:03,680 --> 00:49:06,480
uh implementations and we all want to

1214
00:49:06,480 --> 00:49:08,960
take them along for the ride

1215
00:49:08,960 --> 00:49:10,640
to cdda2

1216
00:49:10,640 --> 00:49:13,119
so we would uh put

1217
00:49:13,119 --> 00:49:15,760
some of the functionality of cda2

1218
00:49:15,760 --> 00:49:17,119
in

1219
00:49:17,119 --> 00:49:20,960
comments or control operators or maybe

1220
00:49:20,960 --> 00:49:23,200
rules that are otherwise

1221
00:49:23,200 --> 00:49:24,720
unused

1222
00:49:24,720 --> 00:49:26,959
and

1223
00:49:27,599 --> 00:49:30,480
one way of trying to do this is to

1224
00:49:30,480 --> 00:49:32,559
really put all of this composition

1225
00:49:32,559 --> 00:49:35,040
functionality into something that works

1226
00:49:35,040 --> 00:49:37,280
a bit like a preprocessor

1227
00:49:37,280 --> 00:49:39,440
maybe not like uh

1228
00:49:39,440 --> 00:49:41,839
cs uh cpu

1229
00:49:41,839 --> 00:49:43,200
preprocessor

1230
00:49:43,200 --> 00:49:45,520
maybe a little bit more

1231
00:49:45,520 --> 00:49:47,359
keeping in mind that there is a certain

1232
00:49:47,359 --> 00:49:49,520
structure that we want to

1233
00:49:49,520 --> 00:49:51,200
generate

1234
00:49:51,200 --> 00:49:53,920
but we could put all this referencing

1235
00:49:53,920 --> 00:49:55,920
and automation and so on

1236
00:49:55,920 --> 00:49:57,920
um into something that looks like

1237
00:49:57,920 --> 00:50:00,160
comments and is actually interpreted by

1238
00:50:00,160 --> 00:50:00,880
the

1239
00:50:00,880 --> 00:50:03,839
uh pre uh processor

1240
00:50:03,839 --> 00:50:06,319
um so that that actually could be useful

1241
00:50:06,319 --> 00:50:09,280
for abnf as well because cgl is so close

1242
00:50:09,280 --> 00:50:11,920
to abnf whatever we would do in such a

1243
00:50:11,920 --> 00:50:15,280
preprocessor would probably immediately

1244
00:50:15,280 --> 00:50:17,280
immediately be

1245
00:50:17,280 --> 00:50:20,559
applicable to abnf as well

1246
00:50:20,559 --> 00:50:23,680
um yeah so this is a potential objective

1247
00:50:23,680 --> 00:50:26,079
for the

1248
00:50:26,079 --> 00:50:27,440
composition

1249
00:50:27,440 --> 00:50:30,319
the annotation aspect

1250
00:50:30,319 --> 00:50:32,960
really is about

1251
00:50:32,960 --> 00:50:35,440
going beyond carnigen's car

1252
00:50:35,440 --> 00:50:38,079
kernighan's car is a car where

1253
00:50:38,079 --> 00:50:41,680
you only have one indicator light

1254
00:50:41,680 --> 00:50:42,880
uh which

1255
00:50:42,880 --> 00:50:44,960
when it's off says everything is okay

1256
00:50:44,960 --> 00:50:47,680
and if if when it's on it says something

1257
00:50:47,680 --> 00:50:48,880
is wrong

1258
00:50:48,880 --> 00:50:51,839
um and that's your traditional validator

1259
00:50:51,839 --> 00:50:53,599
that validates

1260
00:50:53,599 --> 00:50:56,319
an instance again against the schema and

1261
00:50:56,319 --> 00:50:59,040
tells you that's wrong or that's right

1262
00:50:59,040 --> 00:51:01,680
and the idea is that annotation

1263
00:51:01,680 --> 00:51:03,359
can give you back

1264
00:51:03,359 --> 00:51:05,920
more information

1265
00:51:05,920 --> 00:51:06,880
but

1266
00:51:06,880 --> 00:51:09,599
right now what we have in in cdl

1267
00:51:09,599 --> 00:51:11,599
implementations

1268
00:51:11,599 --> 00:51:14,400
are annotators that don't get the

1269
00:51:14,400 --> 00:51:16,400
benefit of information

1270
00:51:16,400 --> 00:51:19,440
provided by the spec writers

1271
00:51:19,440 --> 00:51:22,960
so the spec writers cannot say whether a

1272
00:51:22,960 --> 00:51:26,880
particular rule is has only been created

1273
00:51:26,880 --> 00:51:28,880
uh to to uh

1274
00:51:28,880 --> 00:51:30,960
minimize the line length in the

1275
00:51:30,960 --> 00:51:34,480
specification or something so these are

1276
00:51:34,480 --> 00:51:37,520
not rules that are carrying semantic

1277
00:51:37,520 --> 00:51:39,440
information that that an application

1278
00:51:39,440 --> 00:51:41,280
would be interested

1279
00:51:41,280 --> 00:51:43,680
in and we only have dot feature for

1280
00:51:43,680 --> 00:51:44,640
carrying

1281
00:51:44,640 --> 00:51:46,400
information beyond

1282
00:51:46,400 --> 00:51:48,880
uh rule names and these rule names also

1283
00:51:48,880 --> 00:51:51,920
are not related to the real world so we

1284
00:51:51,920 --> 00:51:55,359
cannot use rdf names as as rule names

1285
00:51:55,359 --> 00:51:56,800
and so on

1286
00:51:56,800 --> 00:51:58,880
um so this is all related to the post

1287
00:51:58,880 --> 00:52:00,960
schema validation instance thing i

1288
00:52:00,960 --> 00:52:02,720
showed this slide on

1289
00:52:02,720 --> 00:52:05,920
itf 112 so i'm going to go

1290
00:52:05,920 --> 00:52:08,480
through this very quickly but basically

1291
00:52:08,480 --> 00:52:11,920
the idea is that if you do a validation

1292
00:52:11,920 --> 00:52:14,319
process you get an enriched and

1293
00:52:14,319 --> 00:52:15,599
augmented

1294
00:52:15,599 --> 00:52:16,400
uh

1295
00:52:16,400 --> 00:52:19,119
version of of the instance

1296
00:52:19,119 --> 00:52:20,960
and of course what what is the data

1297
00:52:20,960 --> 00:52:22,800
model for that enriched

1298
00:52:22,800 --> 00:52:24,400
uh version

1299
00:52:24,400 --> 00:52:25,200
um

1300
00:52:25,200 --> 00:52:27,440
and can we define json and sibo diag and

1301
00:52:27,440 --> 00:52:30,000
yemen and sieber for that so that would

1302
00:52:30,000 --> 00:52:34,319
be an important addition to the cdl

1303
00:52:34,319 --> 00:52:35,599
ecosystem

1304
00:52:35,599 --> 00:52:39,839
so you can take the validator output

1305
00:52:39,839 --> 00:52:43,200
and feed it in into some application

1306
00:52:43,200 --> 00:52:46,000
that for instance

1307
00:52:46,000 --> 00:52:47,599
gives you

1308
00:52:47,599 --> 00:52:49,920
a specific interpretation of what what

1309
00:52:49,920 --> 00:52:52,880
you just validated

1310
00:52:52,880 --> 00:52:55,599
so the question is when do we get all

1311
00:52:55,599 --> 00:52:59,280
this and in itf 112 i had some some

1312
00:52:59,280 --> 00:53:02,400
pretty optimistic timelines and i think

1313
00:53:02,400 --> 00:53:05,200
these are a little bit more realistic

1314
00:53:05,200 --> 00:53:07,040
ones

1315
00:53:07,040 --> 00:53:08,720
so

1316
00:53:08,720 --> 00:53:11,440
for iatf 115

1317
00:53:11,440 --> 00:53:13,839
we should have a prototype of this

1318
00:53:13,839 --> 00:53:15,040
composition

1319
00:53:15,040 --> 00:53:17,680
engine which might be a preprocessor if

1320
00:53:17,680 --> 00:53:19,200
we're lucky

1321
00:53:19,200 --> 00:53:21,280
and maybe some first elements of the

1322
00:53:21,280 --> 00:53:22,800
annotation

1323
00:53:22,800 --> 00:53:25,200
semantics for instance

1324
00:53:25,200 --> 00:53:27,119
just the definition of the post schema

1325
00:53:27,119 --> 00:53:28,800
validation

1326
00:53:28,800 --> 00:53:30,319
instance

1327
00:53:30,319 --> 00:53:33,760
and that would allow us to to

1328
00:53:33,760 --> 00:53:35,359
look at this in

1329
00:53:35,359 --> 00:53:37,839
itf 115 and

1330
00:53:37,839 --> 00:53:40,319
decide which of

1331
00:53:40,319 --> 00:53:42,079
the functionality that has been

1332
00:53:42,079 --> 00:53:43,359
prototyped

1333
00:53:43,359 --> 00:53:45,839
uh do we actually want to

1334
00:53:45,839 --> 00:53:47,839
go forward with and and which should be

1335
00:53:47,839 --> 00:53:50,000
discarded because it's too complicated

1336
00:53:50,000 --> 00:53:52,160
or too dangerous or

1337
00:53:52,160 --> 00:53:56,200
uh to to uh

1338
00:53:57,200 --> 00:53:59,760
too much of a problem for enterability

1339
00:53:59,760 --> 00:54:02,640
and then in in 116 we could try to make

1340
00:54:02,640 --> 00:54:04,720
sure that we actually have a spec

1341
00:54:04,720 --> 00:54:06,960
for that that is technically complete

1342
00:54:06,960 --> 00:54:08,400
and and

1343
00:54:08,400 --> 00:54:11,440
agrees with the implementations

1344
00:54:11,440 --> 00:54:14,400
that exist and then we could maybe

1345
00:54:14,400 --> 00:54:17,760
do some document splits or

1346
00:54:17,760 --> 00:54:20,559
decide how exactly this should be

1347
00:54:20,559 --> 00:54:22,079
published

1348
00:54:22,079 --> 00:54:23,920
but we should have something that is

1349
00:54:23,920 --> 00:54:26,240
reasonably stable so implementers

1350
00:54:26,240 --> 00:54:28,400
uh can actually start

1351
00:54:28,400 --> 00:54:29,760
uh playing

1352
00:54:29,760 --> 00:54:31,599
uh with this

1353
00:54:31,599 --> 00:54:34,160
and there's also a longer

1354
00:54:34,160 --> 00:54:35,760
term objective

1355
00:54:35,760 --> 00:54:38,559
uh which is really uh increasing the

1356
00:54:38,559 --> 00:54:40,240
integration with

1357
00:54:40,240 --> 00:54:42,319
iana there there's so much data in the

1358
00:54:42,319 --> 00:54:44,480
ina registries that we

1359
00:54:44,480 --> 00:54:47,119
uh currently have to manually extract

1360
00:54:47,119 --> 00:54:51,200
uh to use that in in specifications

1361
00:54:51,200 --> 00:54:52,160
uh

1362
00:54:52,160 --> 00:54:54,880
like we had with core sid we had a

1363
00:54:54,880 --> 00:54:57,040
multi-year discussion with ayna that

1364
00:54:57,040 --> 00:54:59,040
finally came up with a

1365
00:54:59,040 --> 00:54:59,839
uh

1366
00:54:59,839 --> 00:55:02,240
mechanism that we could all agree on

1367
00:55:02,240 --> 00:55:04,720
um we could discuss with ayanna how we

1368
00:55:04,720 --> 00:55:06,079
actually get

1369
00:55:06,079 --> 00:55:08,079
the web access interfaces we need

1370
00:55:08,079 --> 00:55:09,520
well-defined

1371
00:55:09,520 --> 00:55:12,000
um maybe even

1372
00:55:12,000 --> 00:55:13,920
be able to tell ayanna how much

1373
00:55:13,920 --> 00:55:16,240
additional load we are generating

1374
00:55:16,240 --> 00:55:19,280
uh by people using cddl

1375
00:55:19,280 --> 00:55:22,319
and maybe even define some rules for

1376
00:55:22,319 --> 00:55:25,280
future registries so they they become

1377
00:55:25,280 --> 00:55:26,480
automation

1378
00:55:26,480 --> 00:55:28,880
friendly

1379
00:55:29,119 --> 00:55:31,359
yeah i already talked about the

1380
00:55:31,359 --> 00:55:34,480
interpretation between yang and cdl

1381
00:55:34,480 --> 00:55:37,839
so let me go back to to this

1382
00:55:37,839 --> 00:55:40,559
uh so this is a bit of course also a

1383
00:55:40,559 --> 00:55:43,280
question to implementers

1384
00:55:43,280 --> 00:55:44,960
what would what

1385
00:55:44,960 --> 00:55:46,559
components

1386
00:55:46,559 --> 00:55:48,799
what what toolkit

1387
00:55:48,799 --> 00:55:49,920
elements

1388
00:55:49,920 --> 00:55:52,319
what they like to see

1389
00:55:52,319 --> 00:55:55,359
uh to be to best be able to participate

1390
00:55:55,359 --> 00:55:56,240
in

1391
00:55:56,240 --> 00:55:59,640
in this development

1392
00:56:08,960 --> 00:56:10,160
so i think

1393
00:56:10,160 --> 00:56:12,558
brian

1394
00:56:12,799 --> 00:56:15,200
yes hello friends

1395
00:56:15,200 --> 00:56:16,400
speaking

1396
00:56:16,400 --> 00:56:18,799
as somebody who's done some cdl

1397
00:56:18,799 --> 00:56:23,040
development in uh dtn rfcs um the

1398
00:56:23,040 --> 00:56:24,880
composition aspect is something that

1399
00:56:24,880 --> 00:56:27,359
would be very helpful because we're

1400
00:56:27,359 --> 00:56:29,040
starting down the road of

1401
00:56:29,040 --> 00:56:31,200
building up libraries and as you said

1402
00:56:31,200 --> 00:56:32,960
copying and pasting or

1403
00:56:32,960 --> 00:56:35,280
or concatenating things runs quickly

1404
00:56:35,280 --> 00:56:36,240
into

1405
00:56:36,240 --> 00:56:39,040
limits of scale

1406
00:56:39,119 --> 00:56:42,319
so could i use you as a source of little

1407
00:56:42,319 --> 00:56:43,760
snippets that

1408
00:56:43,760 --> 00:56:46,559
we could use to understand our use cases

1409
00:56:46,559 --> 00:56:48,000
definitely

1410
00:56:48,000 --> 00:56:50,240
great

1411
00:57:00,400 --> 00:57:03,760
doing things via comments sounds really

1412
00:57:03,760 --> 00:57:05,280
scary to me

1413
00:57:05,280 --> 00:57:09,280
um and i wonder whether it's not a

1414
00:57:09,280 --> 00:57:11,520
better approach or at least approach an

1415
00:57:11,520 --> 00:57:13,839
approach we should consider um to

1416
00:57:13,839 --> 00:57:16,480
introduce new syntax elements uh which

1417
00:57:16,480 --> 00:57:18,960
would make the documents incompatible

1418
00:57:18,960 --> 00:57:22,160
with uh ctdl1 but at the same time

1419
00:57:22,160 --> 00:57:23,599
define

1420
00:57:23,599 --> 00:57:25,599
possibly very simple rules

1421
00:57:25,599 --> 00:57:28,400
how to remove all that new stuff

1422
00:57:28,400 --> 00:57:30,480
and receive the

1423
00:57:30,480 --> 00:57:32,960
receive the equivalent cdtl1 document

1424
00:57:32,960 --> 00:57:34,960
that one would have obtained if we were

1425
00:57:34,960 --> 00:57:36,319
if we went for

1426
00:57:36,319 --> 00:57:37,680
with comments

1427
00:57:37,680 --> 00:57:38,880
so that

1428
00:57:38,880 --> 00:57:41,200
as a user i don't have to

1429
00:57:41,200 --> 00:57:44,799
tread carefully around what possibly the

1430
00:57:44,799 --> 00:57:48,079
new language might interpret

1431
00:57:49,280 --> 00:57:53,559
brandon you have an opinion on that

1432
00:57:54,559 --> 00:57:57,599
yeah so i ended up um needing an extra

1433
00:57:57,599 --> 00:58:00,720
control operator in cddl uh specifically

1434
00:58:00,720 --> 00:58:02,160
to represent

1435
00:58:02,160 --> 00:58:04,559
um sequences

1436
00:58:04,559 --> 00:58:05,920
that are

1437
00:58:05,920 --> 00:58:09,440
key value pairs but not encoded as a map

1438
00:58:09,440 --> 00:58:11,760
encoded as an array instead

1439
00:58:11,760 --> 00:58:13,200
and

1440
00:58:13,200 --> 00:58:16,799
the solution i eventually settled on was

1441
00:58:16,799 --> 00:58:19,440
to not do anything at all in the cddl

1442
00:58:19,440 --> 00:58:21,280
leave it exactly as it is

1443
00:58:21,280 --> 00:58:24,960
um and then use external an external

1444
00:58:24,960 --> 00:58:27,920
document to annotate which paths into

1445
00:58:27,920 --> 00:58:30,640
the cddl had this kind of information

1446
00:58:30,640 --> 00:58:31,520
and

1447
00:58:31,520 --> 00:58:33,920
and that seemed to be the simplest thing

1448
00:58:33,920 --> 00:58:37,920
at this stage and i wonder exactly how

1449
00:58:37,920 --> 00:58:39,280
much of this

1450
00:58:39,280 --> 00:58:41,280
is actually something that belongs in

1451
00:58:41,280 --> 00:58:44,880
cda cddl itself versus something that

1452
00:58:44,880 --> 00:58:47,520
honestly belongs in

1453
00:58:47,520 --> 00:58:51,559
uh an external annotation

1454
00:58:52,799 --> 00:58:55,680
is any of that available for people to

1455
00:58:55,680 --> 00:58:58,078
look at

1456
00:58:58,720 --> 00:59:01,119
definitely it's still very much in the

1457
00:59:01,119 --> 00:59:03,280
prototype stage and i i don't have it

1458
00:59:03,280 --> 00:59:04,400
ready yet

1459
00:59:04,400 --> 00:59:06,720
and ultimately the goal of that project

1460
00:59:06,720 --> 00:59:09,040
was to produce an automated suit parser

1461
00:59:09,040 --> 00:59:11,040
generator um

1462
00:59:11,040 --> 00:59:12,720
that hopefully will come at some point

1463
00:59:12,720 --> 00:59:15,759
but it's not quite there yet

1464
00:59:16,480 --> 00:59:18,319
i think i would like to see how you

1465
00:59:18,319 --> 00:59:19,359
actually

1466
00:59:19,359 --> 00:59:22,319
reached into the cda file and annotated

1467
00:59:22,319 --> 00:59:23,839
some additional functionality

1468
00:59:23,839 --> 00:59:25,359
functionality in there that would be

1469
00:59:25,359 --> 00:59:27,759
interesting

1470
00:59:29,680 --> 00:59:32,680
lawrence

1471
00:59:35,599 --> 00:59:39,599
it's closer to the microphone

1472
00:59:45,280 --> 00:59:49,040
we are switching on the floor mic

1473
00:59:50,400 --> 00:59:52,079
we are having trouble switching on the

1474
00:59:52,079 --> 00:59:54,559
floor mic

1475
00:59:59,599 --> 01:00:02,079
yeah just

1476
01:00:04,240 --> 01:00:06,880
does this mic work

1477
01:00:06,880 --> 01:00:08,559
yep

1478
01:00:08,559 --> 01:00:09,920
all right

1479
01:00:09,920 --> 01:00:12,000
let's bring that one down here so this

1480
01:00:12,000 --> 01:00:15,040
was a comment on

1481
01:00:15,280 --> 01:00:17,119
eat's use of

1482
01:00:17,119 --> 01:00:18,559
sibor for

1483
01:00:18,559 --> 01:00:21,040
jason and

1484
01:00:21,040 --> 01:00:24,640
its use of cddl for

1485
01:00:24,640 --> 01:00:26,720
sibor and jason

1486
01:00:26,720 --> 01:00:29,040
so i did a lot of work with uh that

1487
01:00:29,040 --> 01:00:31,680
where i have cdl that can express uh

1488
01:00:31,680 --> 01:00:33,920
data structures that are

1489
01:00:33,920 --> 01:00:35,119
uh

1490
01:00:35,119 --> 01:00:37,599
you know kind of encoded both in uh

1491
01:00:37,599 --> 01:00:39,040
jason and

1492
01:00:39,040 --> 01:00:41,520
sibor and i definitely ran into a lot of

1493
01:00:41,520 --> 01:00:45,119
limitations with dot feature

1494
01:00:45,119 --> 01:00:46,559
i don't know if anybody else has tried

1495
01:00:46,559 --> 01:00:48,559
this but um there was at some point i

1496
01:00:48,559 --> 01:00:50,880
just had to give up on dot feature for

1497
01:00:50,880 --> 01:00:53,119
for it um

1498
01:00:53,119 --> 01:00:54,559
and that was where

1499
01:00:54,559 --> 01:00:57,119
uh

1500
01:00:57,119 --> 01:00:59,119
you were i was embedding seaborg and

1501
01:00:59,119 --> 01:01:00,960
jason and jason and sebor and that

1502
01:01:00,960 --> 01:01:02,240
really

1503
01:01:02,240 --> 01:01:04,319
that was too much for it um

1504
01:01:04,319 --> 01:01:07,440
i also found that the cdl tool

1505
01:01:07,440 --> 01:01:10,559
uh the diagnostic output or the error

1506
01:01:10,559 --> 01:01:12,640
output from the cbvl tool

1507
01:01:12,640 --> 01:01:14,559
with the the use of dot feature to

1508
01:01:14,559 --> 01:01:17,440
distinguish json from seaborg

1509
01:01:17,440 --> 01:01:20,319
was hard to work with

1510
01:01:20,319 --> 01:01:24,040
yes that's my comment

1511
01:01:24,960 --> 01:01:27,359
yeah i think the the embedding point is

1512
01:01:27,359 --> 01:01:30,079
is really really important that hasn't

1513
01:01:30,079 --> 01:01:30,880
been

1514
01:01:30,880 --> 01:01:32,079
addressed yet

1515
01:01:32,079 --> 01:01:34,480
good point

1516
01:01:34,480 --> 01:01:36,400
what should i do just just set the mic

1517
01:01:36,400 --> 01:01:37,440
on the table

1518
01:01:37,440 --> 01:01:38,559
so

1519
01:01:38,559 --> 01:01:41,599
okay and we are out of time so um let's

1520
01:01:41,599 --> 01:01:43,040
if we need to wrap things up though

1521
01:01:43,040 --> 01:01:45,839
let's do it quickly

1522
01:01:51,680 --> 01:01:52,880
carsten

1523
01:01:52,880 --> 01:01:56,000
yeah i i got some pretty good feedback

1524
01:01:56,000 --> 01:01:58,960
um now and we probably have to

1525
01:01:58,960 --> 01:01:59,839
um

1526
01:01:59,839 --> 01:02:02,960
uh pursue this feedback here on the list

1527
01:02:02,960 --> 01:02:04,720
in particular i would like to know what

1528
01:02:04,720 --> 01:02:06,319
lawrence's

1529
01:02:06,319 --> 01:02:08,640
embedding situations were

1530
01:02:08,640 --> 01:02:11,839
and how we maybe possibly can can

1531
01:02:11,839 --> 01:02:14,558
address those

1532
01:02:14,880 --> 01:02:18,319
okay so um we have that the um the other

1533
01:02:18,319 --> 01:02:20,799
item we had

1534
01:02:20,799 --> 01:02:23,680
christian you had a tag registry item

1535
01:02:23,680 --> 01:02:26,079
we have our next

1536
01:02:26,079 --> 01:02:28,720
interim call will be on the 24th of

1537
01:02:28,720 --> 01:02:30,160
august

1538
01:02:30,160 --> 01:02:31,039
and

1539
01:02:31,039 --> 01:02:33,280
i guess we'll just put those

1540
01:02:33,280 --> 01:02:36,799
last two things on the agenda for that

1541
01:02:36,799 --> 01:02:38,799
yep let's do that

1542
01:02:38,799 --> 01:02:39,839
okay

1543
01:02:39,839 --> 01:02:42,160
um so everybody thank you for coming and

1544
01:02:42,160 --> 01:02:44,799
uh thank you especially for marco for

1545
01:02:44,799 --> 01:02:46,319
taking notes

1546
01:02:46,319 --> 01:02:49,359
and the um those of you for uh for whom

1547
01:02:49,359 --> 01:02:50,960
it's after midnight thank you for

1548
01:02:50,960 --> 01:02:52,799
staying up late

1549
01:02:52,799 --> 01:02:54,880
and we'll see you all on the 24th of

1550
01:02:54,880 --> 01:02:58,480
august and on the mailing list

1551
01:02:59,680 --> 01:03:03,000
thanks everyone

1552
01:03:32,880 --> 01:03:37,160
thank you for signing a few days

