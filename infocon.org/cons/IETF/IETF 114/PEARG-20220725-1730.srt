1
00:00:06,720 --> 00:00:10,520
okay thanks for the feedback

2
00:01:38,840 --> 00:01:40,400
yeah

3
00:01:40,400 --> 00:01:42,000
is anyone here willing to take notes for

4
00:01:42,000 --> 00:01:44,159
us

5
00:01:46,479 --> 00:01:50,200
it's a very simple job

6
00:02:04,240 --> 00:02:06,479
okay we have chris off

7
00:02:06,479 --> 00:02:07,439
nice

8
00:02:07,439 --> 00:02:09,840
thank you

9
00:02:10,000 --> 00:02:12,400
can you repeat that sarah sorry

10
00:02:12,400 --> 00:02:14,720
so christopher patton has offered in the

11
00:02:14,720 --> 00:02:19,959
chat to take notes thank you thank you

12
00:02:26,720 --> 00:02:29,680
hey all welcome to the perigee session

13
00:02:29,680 --> 00:02:30,480
um

14
00:02:30,480 --> 00:02:33,360
we are your chairs um i'm siobhan we

15
00:02:33,360 --> 00:02:36,080
have chris and sarah joining remotely

16
00:02:36,080 --> 00:02:37,760
i guess sarah you're sharing the slides

17
00:02:37,760 --> 00:02:39,760
anyway do you want to

18
00:02:39,760 --> 00:02:42,480
go to the next one

19
00:02:44,319 --> 00:02:45,760
sure

20
00:02:45,760 --> 00:02:48,640
thanks this is the note well please note

21
00:02:48,640 --> 00:02:50,879
it well also please note that

22
00:02:50,879 --> 00:02:52,800
according to ietf policy we do have to

23
00:02:52,800 --> 00:02:54,640
wear masks inside

24
00:02:54,640 --> 00:02:56,080
all meeting rooms

25
00:02:56,080 --> 00:02:58,959
so just be aware of that

26
00:02:58,959 --> 00:03:00,640
and

27
00:03:00,640 --> 00:03:04,800
let's move on to the next slide

28
00:03:04,800 --> 00:03:07,120
yeah so this is the agenda we have

29
00:03:07,120 --> 00:03:09,360
three presentations and a quick

30
00:03:09,360 --> 00:03:12,560
update on um draft safe measurement i

31
00:03:12,560 --> 00:03:15,280
believe that mallory will be giving

32
00:03:15,280 --> 00:03:16,879
so we have

33
00:03:16,879 --> 00:03:20,879
i guess we can the chairs can do jabbers

34
00:03:20,879 --> 00:03:22,640
keeping an eye on jabber and we have a

35
00:03:22,640 --> 00:03:24,720
minute taker thank you chris

36
00:03:24,720 --> 00:03:25,760
patton

37
00:03:25,760 --> 00:03:27,920
and i think we can start

38
00:03:27,920 --> 00:03:32,599
so if sophia is online

39
00:03:32,879 --> 00:03:35,679
yes i am here

40
00:03:39,360 --> 00:03:43,440
do you want to present your slides yeah

41
00:03:43,440 --> 00:03:46,879
uh do i have to share them

42
00:03:47,120 --> 00:03:48,799
oh there you go

43
00:03:48,799 --> 00:03:51,840
okay it's me

44
00:03:51,840 --> 00:03:55,080
i'll wait

45
00:04:00,239 --> 00:04:03,360
okay i see this light now and i see on

46
00:04:03,360 --> 00:04:05,599
the screen also that they are shown on

47
00:04:05,599 --> 00:04:07,519
person

48
00:04:07,519 --> 00:04:10,720
um let me stop my video

49
00:04:10,720 --> 00:04:13,120
okay okay uh should i just go ahead

50
00:04:13,120 --> 00:04:15,840
shivan

51
00:04:16,238 --> 00:04:18,320
sorry sorry was the question sophia

52
00:04:18,320 --> 00:04:19,680
should i just go ahead with the

53
00:04:19,680 --> 00:04:22,079
presentation yes yes please okay

54
00:04:22,079 --> 00:04:24,720
okay thanks um hi everyone thank you so

55
00:04:24,720 --> 00:04:27,440
much for having me here um my name is

56
00:04:27,440 --> 00:04:30,240
sofia celia and i work at

57
00:04:30,240 --> 00:04:31,520
brave software

58
00:04:31,520 --> 00:04:33,280
and today i was just going to present a

59
00:04:33,280 --> 00:04:35,199
very informal note or an informal

60
00:04:35,199 --> 00:04:36,960
presentation on privacy per se

61
00:04:36,960 --> 00:04:38,720
measurement techniques and as i said if

62
00:04:38,720 --> 00:04:41,600
this is just an informal comparison

63
00:04:41,600 --> 00:04:44,560
next slide please

64
00:04:44,720 --> 00:04:47,120
okay sofia do you see a

65
00:04:47,120 --> 00:04:48,639
slide selection at the bottom of your

66
00:04:48,639 --> 00:04:50,560
screen that you can drive

67
00:04:50,560 --> 00:04:53,040
uh no

68
00:04:53,040 --> 00:04:54,400
okay that's no problem we'll move the

69
00:04:54,400 --> 00:04:55,600
slides along

70
00:04:55,600 --> 00:04:57,600
okay thank you sir well thank you very

71
00:04:57,600 --> 00:04:58,639
much sir

72
00:04:58,639 --> 00:05:01,120
um okay uh suppress a little bit of a

73
00:05:01,120 --> 00:05:03,280
disclosure uh again this is not a

74
00:05:03,280 --> 00:05:05,360
complete overview but rather an initial

75
00:05:05,360 --> 00:05:07,199
note around the different techniques

76
00:05:07,199 --> 00:05:10,800
that one can use for indeed trying to

77
00:05:10,800 --> 00:05:12,160
try to

78
00:05:12,160 --> 00:05:14,639
attain privacy preserving measurement

79
00:05:14,639 --> 00:05:15,600
techniques

80
00:05:15,600 --> 00:05:18,479
and what it really wants to i aim is to

81
00:05:18,479 --> 00:05:20,560
answer the question if i want to execute

82
00:05:20,560 --> 00:05:22,560
measurements with privacy which scheme

83
00:05:22,560 --> 00:05:24,639
should i use and well in general that

84
00:05:24,639 --> 00:05:25,680
seems

85
00:05:25,680 --> 00:05:28,080
this likely seems like a simple answer

86
00:05:28,080 --> 00:05:30,080
in reality it's a very complex one

87
00:05:30,080 --> 00:05:32,000
because there's a big array of different

88
00:05:32,000 --> 00:05:33,680
techniques that one can use in different

89
00:05:33,680 --> 00:05:36,479
schemes um so it's difficult as a user

90
00:05:36,479 --> 00:05:39,199
of the system administrator

91
00:05:39,199 --> 00:05:40,800
or just a user who is a system

92
00:05:40,800 --> 00:05:42,479
administrator to actually choose the

93
00:05:42,479 --> 00:05:44,160
correct scheme or the scheme that best

94
00:05:44,160 --> 00:05:45,520
suits your need

95
00:05:45,520 --> 00:05:47,199
the other problem is also that as we'll

96
00:05:47,199 --> 00:05:48,720
see we have different techniques and

97
00:05:48,720 --> 00:05:50,639
different schemes and the majority of

98
00:05:50,639 --> 00:05:52,720
them really attain a level of privacy

99
00:05:52,720 --> 00:05:54,240
and security but it's difficult to

100
00:05:54,240 --> 00:05:56,160
correctly pinpoint and attest which

101
00:05:56,160 --> 00:05:58,319
specific level of privacy or security

102
00:05:58,319 --> 00:06:01,280
they are providing

103
00:06:01,840 --> 00:06:03,680
there's also some clear expectations of

104
00:06:03,680 --> 00:06:05,600
the efficiency of monetary costs that

105
00:06:05,600 --> 00:06:07,280
indeed this

106
00:06:07,280 --> 00:06:08,080
these

107
00:06:08,080 --> 00:06:09,840
schemes provide and if you are

108
00:06:09,840 --> 00:06:11,840
interested for some furthermore some

109
00:06:11,840 --> 00:06:13,440
further notes i have put online

110
00:06:13,440 --> 00:06:15,360
displaying for my pdf that is going to

111
00:06:15,360 --> 00:06:17,199
be developed into some of something more

112
00:06:17,199 --> 00:06:19,360
formal eventually through

113
00:06:19,360 --> 00:06:20,560
the months

114
00:06:20,560 --> 00:06:23,360
nexus live please

115
00:06:23,440 --> 00:06:25,280
okay so let's just start from the

116
00:06:25,280 --> 00:06:27,120
beginning which one is the main notion

117
00:06:27,120 --> 00:06:29,680
the main notion is of course that you as

118
00:06:29,680 --> 00:06:31,840
a provider or whatever system or

119
00:06:31,840 --> 00:06:32,840
whatever

120
00:06:32,840 --> 00:06:34,960
application you want to indeed know

121
00:06:34,960 --> 00:06:36,639
something about your users and the

122
00:06:36,639 --> 00:06:38,160
reason why you want to know something

123
00:06:38,160 --> 00:06:39,759
about the uses

124
00:06:39,759 --> 00:06:43,120
is mainly because um you want to improve

125
00:06:43,120 --> 00:06:45,280
the usability of the system

126
00:06:45,280 --> 00:06:47,440
by understanding how indeed users use

127
00:06:47,440 --> 00:06:48,479
that system

128
00:06:48,479 --> 00:06:50,000
and while that this seems great in

129
00:06:50,000 --> 00:06:52,880
practice at the downside it has a big

130
00:06:52,880 --> 00:06:54,639
but consequence which means that we are

131
00:06:54,639 --> 00:06:56,160
learning certain private things from

132
00:06:56,160 --> 00:06:57,759
yourself that we are not supposed to

133
00:06:57,759 --> 00:07:00,560
learn and in the light of this the idea

134
00:07:00,560 --> 00:07:03,280
was to actually provide a privacy a

135
00:07:03,280 --> 00:07:05,039
private and secure way to actually

136
00:07:05,039 --> 00:07:07,120
attain to actually be able to collect

137
00:07:07,120 --> 00:07:09,440
these aggregate measurements um because

138
00:07:09,440 --> 00:07:10,880
of course as i said these aggregate

139
00:07:10,880 --> 00:07:13,039
measurements correspond to a centralized

140
00:07:13,039 --> 00:07:15,360
leakage of private user data

141
00:07:15,360 --> 00:07:17,039
currently the ietf actually has a

142
00:07:17,039 --> 00:07:18,960
working group devoted to this that is

143
00:07:18,960 --> 00:07:20,880
called ppm that precisely has been

144
00:07:20,880 --> 00:07:22,400
trying to standardize certain of the

145
00:07:22,400 --> 00:07:23,840
techniques that i'm going to talk about

146
00:07:23,840 --> 00:07:26,000
to provide privacy and security for

147
00:07:26,000 --> 00:07:28,479
aggregate measurements

148
00:07:28,479 --> 00:07:31,039
i think i now can do that yeah you

149
00:07:31,039 --> 00:07:33,919
should have companies yourself now

150
00:07:33,919 --> 00:07:35,919
perfect thank you um so a little bit of

151
00:07:35,919 --> 00:07:37,680
a wishful thinking so the first also

152
00:07:37,680 --> 00:07:39,599
question that one uh must pose

153
00:07:39,599 --> 00:07:41,199
themselves when actually thinking about

154
00:07:41,199 --> 00:07:43,280
it is what level of security and privacy

155
00:07:43,280 --> 00:07:45,360
won't want to attend and the first main

156
00:07:45,360 --> 00:07:48,080
definition that one one find is this web

157
00:07:48,080 --> 00:07:50,720
by the linus which is not a specific to

158
00:07:50,720 --> 00:07:52,479
taking aggregate measurements on the

159
00:07:52,479 --> 00:07:54,400
digital world but rather in general for

160
00:07:54,400 --> 00:07:57,120
a statistical disclosure control

161
00:07:57,120 --> 00:07:59,360
mainly the privacy and security that it

162
00:07:59,360 --> 00:08:01,199
aims to provide is something similar to

163
00:08:01,199 --> 00:08:03,840
semantic security meaning that access to

164
00:08:03,840 --> 00:08:06,000
a statistical database should not enable

165
00:08:06,000 --> 00:08:07,919
anyone to learn anything about the user

166
00:08:07,919 --> 00:08:09,440
that would could not be learned without

167
00:08:09,440 --> 00:08:12,639
access and this is a very strong privacy

168
00:08:12,639 --> 00:08:14,400
notion that we will see that is achieved

169
00:08:14,400 --> 00:08:16,319
to a degree by the different techniques

170
00:08:16,319 --> 00:08:19,360
that this service works

171
00:08:19,360 --> 00:08:20,639
so let's start with the actual

172
00:08:20,639 --> 00:08:22,400
techniques and scheme

173
00:08:22,400 --> 00:08:24,000
and as i said there's many so i've tried

174
00:08:24,000 --> 00:08:26,720
to categorize in general by the specific

175
00:08:26,720 --> 00:08:28,560
technique that they use

176
00:08:28,560 --> 00:08:30,000
the first one is the techniques of

177
00:08:30,000 --> 00:08:32,000
differential privacy and the reason why

178
00:08:32,000 --> 00:08:33,519
i'm talking about this in the first

179
00:08:33,519 --> 00:08:35,519
place is because it's one of the oldest

180
00:08:35,519 --> 00:08:37,200
schemes there are out there to actually

181
00:08:37,200 --> 00:08:39,919
preserve privacy for aggregate um

182
00:08:39,919 --> 00:08:41,919
measurements and the idea in the

183
00:08:41,919 --> 00:08:43,039
differential

184
00:08:43,039 --> 00:08:44,959
privacy techniques is that some local

185
00:08:44,959 --> 00:08:47,360
randomness some kind of nose is added at

186
00:08:47,360 --> 00:08:48,720
some points when you're actually

187
00:08:48,720 --> 00:08:51,200
performing the aggregate functionality

188
00:08:51,200 --> 00:08:53,200
it could be to the data collector it

189
00:08:53,200 --> 00:08:54,959
could be to the output of the

190
00:08:54,959 --> 00:08:57,279
statistical function or it could be to

191
00:08:57,279 --> 00:08:59,680
the mechanism itself and what in general

192
00:08:59,680 --> 00:09:01,600
differentiation privacy wants to attain

193
00:09:01,600 --> 00:09:03,279
is a notion that is called epsilon

194
00:09:03,279 --> 00:09:05,200
differential privacy you will see here a

195
00:09:05,200 --> 00:09:06,959
mathematical notation just don't worry

196
00:09:06,959 --> 00:09:09,279
about it this is just for reference

197
00:09:09,279 --> 00:09:11,040
but mainly if you ever read the papers

198
00:09:11,040 --> 00:09:13,200
of differential privacy this is the

199
00:09:13,200 --> 00:09:15,360
notion that they want to attest and

200
00:09:15,360 --> 00:09:17,360
without any mathematics the meaning is

201
00:09:17,360 --> 00:09:19,040
that the output of the function of the

202
00:09:19,040 --> 00:09:21,600
statistical function is similar on both

203
00:09:21,600 --> 00:09:23,600
data state if you change or remove the

204
00:09:23,600 --> 00:09:25,760
one element so any kind of operation

205
00:09:25,760 --> 00:09:28,720
that you take in different data sets can

206
00:09:28,720 --> 00:09:30,240
someone looking from the side cannot

207
00:09:30,240 --> 00:09:32,800
differentiate

208
00:09:32,800 --> 00:09:35,200
there's two basic

209
00:09:35,200 --> 00:09:37,600
schemes that uh support differential

210
00:09:37,600 --> 00:09:39,279
privacy that he have been actually

211
00:09:39,279 --> 00:09:41,600
deployed in the real world the first one

212
00:09:41,600 --> 00:09:44,800
is rapport from 2014 until 2019 it was

213
00:09:44,800 --> 00:09:46,959
kind of supported um

214
00:09:46,959 --> 00:09:49,200
and basically what it is it uses the

215
00:09:49,200 --> 00:09:51,920
same idea of acting of adding local

216
00:09:51,920 --> 00:09:54,160
random noise into the

217
00:09:54,160 --> 00:09:56,399
statistics that is taken from users and

218
00:09:56,399 --> 00:09:58,880
also using memoization the problem with

219
00:09:58,880 --> 00:10:01,519
this scheme is that it is very costly

220
00:10:01,519 --> 00:10:04,160
because locally you have to add all of

221
00:10:04,160 --> 00:10:06,079
this randomness and therefore it is very

222
00:10:06,079 --> 00:10:08,399
costly in the light of these this very

223
00:10:08,399 --> 00:10:10,480
costly another system was devel

224
00:10:10,480 --> 00:10:12,640
developed which is called proflow and

225
00:10:12,640 --> 00:10:14,640
it's much more efficient and also uses a

226
00:10:14,640 --> 00:10:16,560
different architecture the architecture

227
00:10:16,560 --> 00:10:18,560
that it uses is called encode shuffle

228
00:10:18,560 --> 00:10:21,440
and analyze it is an esa architecture

229
00:10:21,440 --> 00:10:23,279
and mainly the idea is that you also add

230
00:10:23,279 --> 00:10:25,440
this local randomness but this one in

231
00:10:25,440 --> 00:10:27,440
turn is augmented by a private channel

232
00:10:27,440 --> 00:10:29,440
that randomly permutes a set of user

233
00:10:29,440 --> 00:10:31,680
supplied data so you have the local one

234
00:10:31,680 --> 00:10:33,920
that you add and in the encoding section

235
00:10:33,920 --> 00:10:35,279
then you have a shuffle path that

236
00:10:35,279 --> 00:10:37,360
permits the different user data and then

237
00:10:37,360 --> 00:10:38,880
you have the analyze one that it just

238
00:10:38,880 --> 00:10:40,560
performs the statistical function that

239
00:10:40,560 --> 00:10:42,320
you need to perform

240
00:10:42,320 --> 00:10:43,839
what is the problem with this one is

241
00:10:43,839 --> 00:10:46,160
that is more efficient in a way but it

242
00:10:46,160 --> 00:10:47,839
also requires trusted architecture

243
00:10:47,839 --> 00:10:50,000
because you indeed have to trust the

244
00:10:50,000 --> 00:10:52,800
shuffler in order to be

245
00:10:52,800 --> 00:10:56,240
in order to be secure to be assured that

246
00:10:56,240 --> 00:10:59,040
indeed the mechanism is work

247
00:10:59,040 --> 00:11:00,320
so there you have a little bit of a

248
00:11:00,320 --> 00:11:03,200
downside of problem

249
00:11:03,200 --> 00:11:04,640
in the light of this all of these

250
00:11:04,640 --> 00:11:06,399
schemes of differential privacy i just

251
00:11:06,399 --> 00:11:08,079
touched two very lightly but there are

252
00:11:08,079 --> 00:11:11,040
many many more as you see um all of them

253
00:11:11,040 --> 00:11:12,959
could have a lot of drawbacks and in

254
00:11:12,959 --> 00:11:14,959
face of this another system was

255
00:11:14,959 --> 00:11:16,640
developed that was called prio and

256
00:11:16,640 --> 00:11:18,640
nowadays the ppm working group and the

257
00:11:18,640 --> 00:11:20,640
itf is also trying to standardize some

258
00:11:20,640 --> 00:11:22,880
preo based uh like schemes not

259
00:11:22,880 --> 00:11:24,959
specifically the original prio as it was

260
00:11:24,959 --> 00:11:27,200
first written in the original paper but

261
00:11:27,200 --> 00:11:29,200
kind of similar schemes

262
00:11:29,200 --> 00:11:31,519
what does basically prior 1.10 basically

263
00:11:31,519 --> 00:11:33,440
what we started on the first slide

264
00:11:33,440 --> 00:11:35,200
private aggregation and also they

265
00:11:35,200 --> 00:11:37,519
specifically specified three properties

266
00:11:37,519 --> 00:11:39,440
that they wanted to have privacy of

267
00:11:39,440 --> 00:11:42,000
course robustness and scalability so

268
00:11:42,000 --> 00:11:43,680
this is skin indeed tries to be a little

269
00:11:43,680 --> 00:11:45,760
bit more efficient and the way it works

270
00:11:45,760 --> 00:11:47,519
is that it works with a small number of

271
00:11:47,519 --> 00:11:50,079
servers and a large amount of clients

272
00:11:50,079 --> 00:11:52,079
and as long as one of the servers is

273
00:11:52,079 --> 00:11:54,000
honest the system leaks nearly nothing

274
00:11:54,000 --> 00:11:56,399
about the user's data except for what

275
00:11:56,399 --> 00:11:58,720
the aggregate statistic itself reveals

276
00:11:58,720 --> 00:12:00,720
so as you see here we have already a

277
00:12:00,720 --> 00:12:03,519
little bit of a leakage of the of the

278
00:12:03,519 --> 00:12:05,680
privacy that the system provides because

279
00:12:05,680 --> 00:12:08,079
it's not completely privacy private as

280
00:12:08,079 --> 00:12:10,399
the first slide that i showed you wanted

281
00:12:10,399 --> 00:12:12,399
but rather than there is a specific

282
00:12:12,399 --> 00:12:14,160
amount of leakage so for example let's

283
00:12:14,160 --> 00:12:15,519
say that you are

284
00:12:15,519 --> 00:12:17,040
using a mean function

285
00:12:17,040 --> 00:12:19,279
you are trying to compute a mean

286
00:12:19,279 --> 00:12:21,360
functionality therefore something is

287
00:12:21,360 --> 00:12:23,680
leaked meaning the number of uses that

288
00:12:23,680 --> 00:12:25,920
have submitted some user data because

289
00:12:25,920 --> 00:12:27,680
you divide by the number of users so

290
00:12:27,680 --> 00:12:30,399
that is leaked by the aggregate function

291
00:12:30,399 --> 00:12:32,000
there's other variations of these

292
00:12:32,000 --> 00:12:34,000
schemes that as i said has been proposed

293
00:12:34,000 --> 00:12:36,480
to be standardized by atf you have prior

294
00:12:36,480 --> 00:12:37,600
plus but it's a little bit more

295
00:12:37,600 --> 00:12:39,680
efficient because it uses

296
00:12:39,680 --> 00:12:41,600
boolean circuits instead of arimatic

297
00:12:41,600 --> 00:12:44,160
circuits there's 302 which is not going

298
00:12:44,160 --> 00:12:46,160
to be standardized as far as i know um

299
00:12:46,160 --> 00:12:48,079
priya 3 which is the one that is going

300
00:12:48,079 --> 00:12:50,320
to be a sundares um as far as i

301
00:12:50,320 --> 00:12:52,560
understand and that one is more

302
00:12:52,560 --> 00:12:54,160
efficient into the client to server

303
00:12:54,160 --> 00:12:55,920
communication

304
00:12:55,920 --> 00:12:57,920
to give you a little bit of a specific

305
00:12:57,920 --> 00:12:59,920
pinpoint of the specific privacy that

306
00:12:59,920 --> 00:13:02,160
priyo provides it uses a specific

307
00:13:02,160 --> 00:13:04,320
privacy that's called privacy in which

308
00:13:04,320 --> 00:13:06,320
an adversary he controls any number of

309
00:13:06,320 --> 00:13:08,560
clients and all but one server there's

310
00:13:08,560 --> 00:13:10,320
nothing about the honest client's values

311
00:13:10,320 --> 00:13:11,600
except what they can learn from the

312
00:13:11,600 --> 00:13:13,440
aggregation function itself and this is

313
00:13:13,440 --> 00:13:15,279
just repeated why i already show you in

314
00:13:15,279 --> 00:13:16,720
the previous slide of what kind of

315
00:13:16,720 --> 00:13:18,480
privacy it provides it's kind of a

316
00:13:18,480 --> 00:13:20,079
bounded privacy in the sense that

317
00:13:20,079 --> 00:13:23,440
there's some amount of leakage

318
00:13:23,440 --> 00:13:26,160
um yes i'll take the questions at the

319
00:13:26,160 --> 00:13:27,680
end i see that there's some in the sulu

320
00:13:27,680 --> 00:13:30,720
but i will take them on the at the end

321
00:13:30,720 --> 00:13:32,399
okay so a little bit of a diagram for

322
00:13:32,399 --> 00:13:33,200
what uh

323
00:13:33,200 --> 00:13:35,200
does and know exactly how prio works

324
00:13:35,200 --> 00:13:36,800
this is just a really high level

325
00:13:36,800 --> 00:13:38,639
explanation how prio works but in

326
00:13:38,639 --> 00:13:40,399
general let's say for example that you

327
00:13:40,399 --> 00:13:43,040
are an user who is um

328
00:13:43,040 --> 00:13:45,279
who is going to a park and indeed is in

329
00:13:45,279 --> 00:13:47,199
the park and then the system actually

330
00:13:47,199 --> 00:13:48,720
wants to know if you are in the pack

331
00:13:48,720 --> 00:13:50,160
because the mobile clients for some

332
00:13:50,160 --> 00:13:52,880
reason want to know that um what amount

333
00:13:52,880 --> 00:13:54,959
of users are actually going to this park

334
00:13:54,959 --> 00:13:56,240
and if you are in the park then the

335
00:13:56,240 --> 00:13:58,160
mobile phone says one and if you are not

336
00:13:58,160 --> 00:13:59,600
in the park the mobile phone stay in

337
00:13:59,600 --> 00:14:01,839
steer and sends this data to a

338
00:14:01,839 --> 00:14:04,880
collection of an amount of service so

339
00:14:04,880 --> 00:14:07,120
instead of sending the one meaning the

340
00:14:07,120 --> 00:14:09,279
yes i am in the top arc what it does is

341
00:14:09,279 --> 00:14:11,920
that it splits this one into shares in

342
00:14:11,920 --> 00:14:14,160
the shares for example of 15 plus minus

343
00:14:14,160 --> 00:14:17,120
12 plus minus 2 which all sum up to 1

344
00:14:17,120 --> 00:14:19,120
and sends the individual value to each

345
00:14:19,120 --> 00:14:21,760
server that uh that belongs to the

346
00:14:21,760 --> 00:14:22,800
system

347
00:14:22,800 --> 00:14:24,720
and as you see here each individual

348
00:14:24,720 --> 00:14:26,399
server will not be able to pinpoint

349
00:14:26,399 --> 00:14:28,320
which is the private value that the user

350
00:14:28,320 --> 00:14:30,639
is submitting because it's just a secret

351
00:14:30,639 --> 00:14:33,120
share that the user has been submitting

352
00:14:33,120 --> 00:14:34,240
to the server

353
00:14:34,240 --> 00:14:35,920
now it's important here of course that

354
00:14:35,920 --> 00:14:38,320
the user is honest in that the range

355
00:14:38,320 --> 00:14:40,240
value that they are sending should

356
00:14:40,240 --> 00:14:42,240
correspond indeed to that range meaning

357
00:14:42,240 --> 00:14:44,320
that they send either a zero or a one

358
00:14:44,320 --> 00:14:46,720
meaning a yes or a no sorry a no on a

359
00:14:46,720 --> 00:14:47,519
yes

360
00:14:47,519 --> 00:14:49,839
um but for example let's say that

361
00:14:49,839 --> 00:14:53,040
a client sends a two uh in this case um

362
00:14:53,040 --> 00:14:54,880
in general if you're only using secret

363
00:14:54,880 --> 00:14:56,800
shares then that's indeed possible that

364
00:14:56,800 --> 00:14:58,880
the user could be sending a tool so what

365
00:14:58,880 --> 00:15:00,959
you indeed also add in the prior system

366
00:15:00,959 --> 00:15:02,560
is that you add a serial knowledge proof

367
00:15:02,560 --> 00:15:04,480
that is a specifically called a secret

368
00:15:04,480 --> 00:15:06,560
shared non-interactive proof in the

369
00:15:06,560 --> 00:15:08,720
prior language and basically this is a

370
00:15:08,720 --> 00:15:11,279
proof attesting that indeed the user is

371
00:15:11,279 --> 00:15:13,120
sending the correct value in whatever

372
00:15:13,120 --> 00:15:14,959
range so in an example is the correct

373
00:15:14,959 --> 00:15:17,680
value is either a zero or a one and that

374
00:15:17,680 --> 00:15:19,600
is sent once that is sent to the

375
00:15:19,600 --> 00:15:21,839
different servers they each go between

376
00:15:21,839 --> 00:15:23,839
each other and attest to the validity or

377
00:15:23,839 --> 00:15:26,480
not and if indeed is valid they indeed

378
00:15:26,480 --> 00:15:28,399
aggregate whatever shares were shared

379
00:15:28,399 --> 00:15:30,720
with the servers and eventually they

380
00:15:30,720 --> 00:15:32,240
will be able to compute whatever

381
00:15:32,240 --> 00:15:33,759
aggregate function they were trying to

382
00:15:33,759 --> 00:15:34,480
do

383
00:15:34,480 --> 00:15:36,240
and as you see this is preserved in the

384
00:15:36,240 --> 00:15:38,480
face of a malicious client but then

385
00:15:38,480 --> 00:15:40,240
there's some efficiencies robust here

386
00:15:40,240 --> 00:15:42,399
mainly server to um sorry

387
00:15:42,399 --> 00:15:43,839
server-to-server communication is

388
00:15:43,839 --> 00:15:45,440
sufficient but server-to-client

389
00:15:45,440 --> 00:15:47,120
communication is inefficient because

390
00:15:47,120 --> 00:15:48,720
computing sometimes the serial knowledge

391
00:15:48,720 --> 00:15:50,880
proves well efficient than the previous

392
00:15:50,880 --> 00:15:53,279
zero knowledge proofs um it's still much

393
00:15:53,279 --> 00:15:55,839
more costly

394
00:15:55,920 --> 00:15:56,880
okay

395
00:15:56,880 --> 00:15:58,399
and also a thing to note is that

396
00:15:58,399 --> 00:16:00,480
pre-orbase systems uh only work on

397
00:16:00,480 --> 00:16:02,399
numeric values meaning that you can only

398
00:16:02,399 --> 00:16:04,240
send numeric values but if you want to

399
00:16:04,240 --> 00:16:06,000
send something like a strings then the

400
00:16:06,000 --> 00:16:08,880
system does not completely cover that in

401
00:16:08,880 --> 00:16:10,800
the face of this there's another kind of

402
00:16:10,800 --> 00:16:13,040
problem that one can solve indeed when

403
00:16:13,040 --> 00:16:15,360
we're when someone is trying to have all

404
00:16:15,360 --> 00:16:17,759
types of data to be a part of an

405
00:16:17,759 --> 00:16:19,680
aggregate function and in this case we

406
00:16:19,680 --> 00:16:21,920
call it the private the heavy heaters

407
00:16:21,920 --> 00:16:22,880
problem

408
00:16:22,880 --> 00:16:24,480
one of the schemes on this is the scheme

409
00:16:24,480 --> 00:16:26,639
of the star that has been recently been

410
00:16:26,639 --> 00:16:28,880
um announced in a paper and also

411
00:16:28,880 --> 00:16:30,800
proposed to the itf not so recently i

412
00:16:30,800 --> 00:16:32,800
think a year ago

413
00:16:32,800 --> 00:16:36,160
it doesn't again focus on the specific f

414
00:16:36,160 --> 00:16:38,480
privacy problem that is that belongs to

415
00:16:38,480 --> 00:16:39,920
the previous system but rather in

416
00:16:39,920 --> 00:16:42,000
another privacy concept which is called

417
00:16:42,000 --> 00:16:43,600
the

418
00:16:43,600 --> 00:16:46,160
threshold k anonymity and basically the

419
00:16:46,160 --> 00:16:48,160
idea is that the server only learns any

420
00:16:48,160 --> 00:16:50,240
data from a client any private values

421
00:16:50,240 --> 00:16:52,399
from user if there's at least k minus

422
00:16:52,399 --> 00:16:54,160
one or the clients that are submitting

423
00:16:54,160 --> 00:16:56,240
this data and what it prevents is the

424
00:16:56,240 --> 00:16:58,639
preventative collateral from from being

425
00:16:58,639 --> 00:17:00,480
specific from specifically learning

426
00:17:00,480 --> 00:17:02,800
uniquely identifying information or

427
00:17:02,800 --> 00:17:04,880
uniquely co-occurring patterns of data

428
00:17:04,880 --> 00:17:06,480
from a unique line

429
00:17:06,480 --> 00:17:08,480
how does it work mainly what it happens

430
00:17:08,480 --> 00:17:10,400
is that a client constructs a ciphertext

431
00:17:10,400 --> 00:17:12,000
of the data

432
00:17:12,000 --> 00:17:13,760
using an encryption key derived from

433
00:17:13,760 --> 00:17:15,679
some randomness this random name is

434
00:17:15,679 --> 00:17:18,319
usually taken from a randomness server

435
00:17:18,319 --> 00:17:20,160
that uses an opr

436
00:17:20,160 --> 00:17:22,799
functionality to actually have this data

437
00:17:22,799 --> 00:17:24,959
then the client once it has the

438
00:17:24,959 --> 00:17:27,599
ciphertext sends the ciphertext to the

439
00:17:27,599 --> 00:17:30,160
service and also a k out of end secret

440
00:17:30,160 --> 00:17:33,360
share of randomness and tax these

441
00:17:33,360 --> 00:17:36,320
these shares within a specific task so

442
00:17:36,320 --> 00:17:37,840
the server will know which one to

443
00:17:37,840 --> 00:17:40,080
combine and at the end the aggregation

444
00:17:40,080 --> 00:17:42,320
server organizes the shares into subsets

445
00:17:42,320 --> 00:17:43,840
depending on the tax that was just

446
00:17:43,840 --> 00:17:45,760
submitted by the client and recovers

447
00:17:45,760 --> 00:17:47,520
encryption keys from those subsets of

448
00:17:47,520 --> 00:17:50,160
size uh bigger or equal to k

449
00:17:50,160 --> 00:17:51,760
and if you want that more a little bit

450
00:17:51,760 --> 00:17:53,520
more of a beautiful diagram it is here

451
00:17:53,520 --> 00:17:55,520
as you see here you have three entities

452
00:17:55,520 --> 00:17:57,760
the first one is only to actually gather

453
00:17:57,760 --> 00:17:59,679
the randomness in order to be able to

454
00:17:59,679 --> 00:18:01,360
derive the key that is going to be used

455
00:18:01,360 --> 00:18:03,520
to group the ciphertext and then the

456
00:18:03,520 --> 00:18:04,799
other ones is actually the client

457
00:18:04,799 --> 00:18:06,160
sending the ciphertext to the

458
00:18:06,160 --> 00:18:08,080
aggregation server who will take the

459
00:18:08,080 --> 00:18:10,080
auxiliary tags that the client actually

460
00:18:10,080 --> 00:18:12,160
define will be able to reconstruct the

461
00:18:12,160 --> 00:18:13,440
specific

462
00:18:13,440 --> 00:18:15,200
for the ciphertext and we'll be able

463
00:18:15,200 --> 00:18:17,600
also to decrypt it

464
00:18:17,600 --> 00:18:19,120
one of the things that is important to

465
00:18:19,120 --> 00:18:20,799
note here in a specifically of the

466
00:18:20,799 --> 00:18:22,640
system is that is the first system that

467
00:18:22,640 --> 00:18:24,320
takes into account not only about

468
00:18:24,320 --> 00:18:26,480
efficiency but also the monetary costs

469
00:18:26,480 --> 00:18:28,400
that are associated with running all of

470
00:18:28,400 --> 00:18:30,720
these kind of ppn techniques mainly the

471
00:18:30,720 --> 00:18:32,480
system for example one of the aims was

472
00:18:32,480 --> 00:18:35,840
actually to have low monetary costs

473
00:18:35,840 --> 00:18:37,679
another system that is seem very similar

474
00:18:37,679 --> 00:18:40,640
to peop to prio is the popular system

475
00:18:40,640 --> 00:18:42,240
which also allows for finding the most

476
00:18:42,240 --> 00:18:43,919
popular string among a collection of

477
00:18:43,919 --> 00:18:46,000
clients as well as client as counting

478
00:18:46,000 --> 00:18:47,360
the number of clients that hold up

479
00:18:47,360 --> 00:18:49,440
giving a stream the only difference with

480
00:18:49,440 --> 00:18:51,120
prior is that in prior you will require

481
00:18:51,120 --> 00:18:53,280
only one on a server in this case you

482
00:18:53,280 --> 00:18:55,280
have a two no you have to have two

483
00:18:55,280 --> 00:18:57,760
non-colluding uh data collection service

484
00:18:57,760 --> 00:18:59,840
and it indeed also presents the same

485
00:18:59,840 --> 00:19:03,439
amount of privacy as free

486
00:19:03,520 --> 00:19:05,679
okay so um that's a little bit of a

487
00:19:05,679 --> 00:19:07,919
really brief overview of the different

488
00:19:07,919 --> 00:19:09,520
schemes but if you are a little bit more

489
00:19:09,520 --> 00:19:11,360
interested in how actually you compare

490
00:19:11,360 --> 00:19:13,360
to each other which was the core of the

491
00:19:13,360 --> 00:19:15,760
question when actually having this note

492
00:19:15,760 --> 00:19:18,400
um i kind of created two tables for this

493
00:19:18,400 --> 00:19:20,480
on the first time for example it's good

494
00:19:20,480 --> 00:19:22,320
to consider the type of data that you

495
00:19:22,320 --> 00:19:24,480
need one to use when you're actually

496
00:19:24,480 --> 00:19:26,240
thinking about choosing some schemes so

497
00:19:26,240 --> 00:19:28,000
as i already said the prior-based

498
00:19:28,000 --> 00:19:30,400
functionality somehow some numeric and

499
00:19:30,400 --> 00:19:32,880
then the star wars has some a string uh

500
00:19:32,880 --> 00:19:35,200
other kinds of types of data that can

501
00:19:35,200 --> 00:19:36,559
indeed be

502
00:19:36,559 --> 00:19:37,760
accepting

503
00:19:37,760 --> 00:19:39,440
there's also some types of robustness

504
00:19:39,440 --> 00:19:42,000
notion for example when i say that uh in

505
00:19:42,000 --> 00:19:43,679
some systems for example the trust

506
00:19:43,679 --> 00:19:45,280
assumptions are different in the sense

507
00:19:45,280 --> 00:19:46,799
that at least one server has to be

508
00:19:46,799 --> 00:19:48,640
trusted and on others they don't

509
00:19:48,640 --> 00:19:50,840
actually require any kind of trusting

510
00:19:50,840 --> 00:19:52,720
entity

511
00:19:52,720 --> 00:19:55,360
also as i said uh while all of them

512
00:19:55,360 --> 00:19:57,440
provide certain kind of privacy notion

513
00:19:57,440 --> 00:19:59,360
none of them actually attain the in

514
00:19:59,360 --> 00:20:01,440
original privacy notion that i just put

515
00:20:01,440 --> 00:20:03,520
you in the second slide but rather all

516
00:20:03,520 --> 00:20:05,679
of them some have some kind of leakage

517
00:20:05,679 --> 00:20:07,039
in the case of pre-assistance for

518
00:20:07,039 --> 00:20:08,640
example i already mentioned that the

519
00:20:08,640 --> 00:20:10,240
leakage that they have is whatever that

520
00:20:10,240 --> 00:20:12,240
the aggregate function leaks itself

521
00:20:12,240 --> 00:20:14,400
that's leaked in the case of a star for

522
00:20:14,400 --> 00:20:16,480
example the server learns which clients

523
00:20:16,480 --> 00:20:18,640
share the same measurements in the same

524
00:20:18,640 --> 00:20:20,480
popular there's a leakage of all heavy

525
00:20:20,480 --> 00:20:21,440
heating

526
00:20:21,440 --> 00:20:23,840
prefix prefix sorry

527
00:20:23,840 --> 00:20:25,679
um all of them also have different

528
00:20:25,679 --> 00:20:27,440
efficiencies so we already saw that in

529
00:20:27,440 --> 00:20:29,840
the previous prior base systems you have

530
00:20:29,840 --> 00:20:31,360
an inefficient client to serve a

531
00:20:31,360 --> 00:20:33,679
communication that is improved in the

532
00:20:33,679 --> 00:20:36,320
iterations of the original video paper

533
00:20:36,320 --> 00:20:38,080
so you have a better efficiency in

534
00:20:38,080 --> 00:20:39,280
pre-ordering

535
00:20:39,280 --> 00:20:41,280
and i only added the monetary cost of

536
00:20:41,280 --> 00:20:43,360
the two last schemes of star and poplar

537
00:20:43,360 --> 00:20:44,960
because those are the only ones that i

538
00:20:44,960 --> 00:20:46,960
have seen analyzed for the monetary

539
00:20:46,960 --> 00:20:49,440
cause perhaps uh what is missing in this

540
00:20:49,440 --> 00:20:51,520
table is properly inputting for the

541
00:20:51,520 --> 00:20:53,280
other schemes but i didn't have a lot of

542
00:20:53,280 --> 00:20:55,120
time to actually analyzing them from the

543
00:20:55,120 --> 00:20:57,919
monetary cost

544
00:20:57,919 --> 00:21:00,240
okay so that's a little comparison and

545
00:21:00,240 --> 00:21:02,000
if a user wants to at least choose

546
00:21:02,000 --> 00:21:03,760
between all of these schemes you see

547
00:21:03,760 --> 00:21:05,280
there's a lot of values to actually

548
00:21:05,280 --> 00:21:07,120
compare and a test if indeed it works

549
00:21:07,120 --> 00:21:09,200
for your system or not something that is

550
00:21:09,200 --> 00:21:10,799
also interesting to note is that the

551
00:21:10,799 --> 00:21:12,799
user needs and most of the times absent

552
00:21:12,799 --> 00:21:14,720
from any of these kind of studies or

553
00:21:14,720 --> 00:21:16,799
even in the original designs in the

554
00:21:16,799 --> 00:21:18,320
sense that the voice of the user is

555
00:21:18,320 --> 00:21:20,320
notably absent and while it's great that

556
00:21:20,320 --> 00:21:22,400
these kind of schemes are advancing the

557
00:21:22,400 --> 00:21:24,720
privacy of the user at the same time

558
00:21:24,720 --> 00:21:26,559
sometimes users will not be wanting to

559
00:21:26,559 --> 00:21:28,840
participate in different aggregate

560
00:21:28,840 --> 00:21:31,600
functions service or in different kind

561
00:21:31,600 --> 00:21:33,760
of service in general and the reason why

562
00:21:33,760 --> 00:21:35,919
they will not be wanting to actually be

563
00:21:35,919 --> 00:21:37,520
part of the systems is because while

564
00:21:37,520 --> 00:21:39,280
maybe this system if they provide some

565
00:21:39,280 --> 00:21:41,600
privacy and not going against individual

566
00:21:41,600 --> 00:21:43,679
privacy they might go against the whole

567
00:21:43,679 --> 00:21:45,520
group privacy for example let's say that

568
00:21:45,520 --> 00:21:47,360
you have a survey about

569
00:21:47,360 --> 00:21:50,400
women and um about the number of

570
00:21:50,400 --> 00:21:52,400
abortions that women have i will not

571
00:21:52,400 --> 00:21:54,320
would like to participate in that kind

572
00:21:54,320 --> 00:21:57,120
of functionality even though even if the

573
00:21:57,120 --> 00:21:59,120
system says to me that it's private

574
00:21:59,120 --> 00:22:02,000
because the output of that functionality

575
00:22:02,000 --> 00:22:04,320
of the function might be used to harm me

576
00:22:04,320 --> 00:22:06,720
as a woman that belongs to the woman

577
00:22:06,720 --> 00:22:08,720
group or as an individual that belongs

578
00:22:08,720 --> 00:22:10,480
to the woman group so

579
00:22:10,480 --> 00:22:12,159
the point here is that while it's

580
00:22:12,159 --> 00:22:14,320
important to provide privacy it is not

581
00:22:14,320 --> 00:22:16,480
enough it also has to take into account

582
00:22:16,480 --> 00:22:19,919
user consent and also

583
00:22:19,919 --> 00:22:22,640
yes i also have to take into account uh

584
00:22:22,640 --> 00:22:24,640
user consent we should be really noted

585
00:22:24,640 --> 00:22:26,480
and really important into the different

586
00:22:26,480 --> 00:22:28,000
design system

587
00:22:28,000 --> 00:22:29,520
and with that uh thank you very much

588
00:22:29,520 --> 00:22:32,480
sorry i'm running out of time um so yes

589
00:22:32,480 --> 00:22:34,880
sorry thank you very much

590
00:22:34,880 --> 00:22:36,720
all right thank you sophia unfortunately

591
00:22:36,720 --> 00:22:38,000
we don't have time for questions so

592
00:22:38,000 --> 00:22:39,120
we'll have to move on to the next

593
00:22:39,120 --> 00:22:40,880
presentation sophie there's a number of

594
00:22:40,880 --> 00:22:42,240
questions for you and chat i'm sure you

595
00:22:42,240 --> 00:22:43,600
could engage with those folks further

596
00:22:43,600 --> 00:22:45,200
there

597
00:22:45,200 --> 00:22:48,159
yes thank you all right

598
00:22:51,600 --> 00:22:53,760
so next up we have bharath

599
00:22:53,760 --> 00:22:57,520
can you request to share the slides

600
00:23:02,640 --> 00:23:04,799
okay can you hear me

601
00:23:04,799 --> 00:23:08,520
yes we can hear you

602
00:23:09,440 --> 00:23:11,760
okay

603
00:23:13,039 --> 00:23:14,320
one more time

604
00:23:14,320 --> 00:23:17,320
okay

605
00:23:22,960 --> 00:23:24,640
okay take it away

606
00:23:24,640 --> 00:23:25,919
okay

607
00:23:25,919 --> 00:23:27,679
thanks for having me so um i'm bar

608
00:23:27,679 --> 00:23:30,320
throgfin uh faculty at usc and uh

609
00:23:30,320 --> 00:23:32,400
co-founder and visit with paul schmidt

610
00:23:32,400 --> 00:23:35,600
um one of my colleagues um and thanks uh

611
00:23:35,600 --> 00:23:39,120
in this to to jana and chris and tommy

612
00:23:39,120 --> 00:23:41,600
for um a lot of the discussions uh that

613
00:23:41,600 --> 00:23:43,120
went into this

614
00:23:43,120 --> 00:23:43,840
so

615
00:23:43,840 --> 00:23:45,440
i'm gonna give a very high level talk

616
00:23:45,440 --> 00:23:47,760
very different type of talk um

617
00:23:47,760 --> 00:23:49,279
really trying to step back about this

618
00:23:49,279 --> 00:23:50,640
question that

619
00:23:50,640 --> 00:23:52,559
some of us have been noodling over for a

620
00:23:52,559 --> 00:23:53,840
while which is

621
00:23:53,840 --> 00:23:55,919
there are all these interesting privacy

622
00:23:55,919 --> 00:23:58,400
preservation network protocols systems

623
00:23:58,400 --> 00:23:59,600
architectures that have been come up

624
00:23:59,600 --> 00:24:01,600
with by a lot of you

625
00:24:01,600 --> 00:24:03,120
in this group and

626
00:24:03,120 --> 00:24:04,480
folks in the

627
00:24:04,480 --> 00:24:07,360
ietf community in the network systems

628
00:24:07,360 --> 00:24:09,200
and privacy community for

629
00:24:09,200 --> 00:24:11,279
years decades really

630
00:24:11,279 --> 00:24:14,000
and we're trying to figure out what is

631
00:24:14,000 --> 00:24:16,799
uh in common among all of these the ones

632
00:24:16,799 --> 00:24:18,720
that we think actually achieve some sort

633
00:24:18,720 --> 00:24:20,240
of meaningful and practical privacy

634
00:24:20,240 --> 00:24:22,799
preservation and it seemed like

635
00:24:22,799 --> 00:24:24,240
there may be a sort of a common

636
00:24:24,240 --> 00:24:26,880
principle that doesn't uh satisf uh sort

637
00:24:26,880 --> 00:24:28,480
of address all of the questions that we

638
00:24:28,480 --> 00:24:30,400
care about but one of the core sort of

639
00:24:30,400 --> 00:24:32,320
design principles that may be underlying

640
00:24:32,320 --> 00:24:34,720
them and so that's what this talks about

641
00:24:34,720 --> 00:24:36,080
uh what we're calling the decoupling

642
00:24:36,080 --> 00:24:38,159
principle

643
00:24:38,159 --> 00:24:39,919
so

644
00:24:39,919 --> 00:24:42,799
at a high level uh basically the

645
00:24:42,799 --> 00:24:45,279
decoupling principle is for internet

646
00:24:45,279 --> 00:24:47,760
privacy you want to decouple who you are

647
00:24:47,760 --> 00:24:49,039
from what you do

648
00:24:49,039 --> 00:24:50,559
that's that's the

649
00:24:50,559 --> 00:24:52,799
nutshell of this talk this is an old

650
00:24:52,799 --> 00:24:54,480
idea is nothing new that we've come up

651
00:24:54,480 --> 00:24:56,559
with here uh chom

652
00:24:56,559 --> 00:24:59,360
introduced this in 10 different ways in

653
00:24:59,360 --> 00:25:01,760
a classic series of papers

654
00:25:01,760 --> 00:25:04,159
back in the 80s and then in the 90s

655
00:25:04,159 --> 00:25:06,240
um but it's been inconsistently applied

656
00:25:06,240 --> 00:25:09,200
over the decades for some reason

657
00:25:09,200 --> 00:25:11,440
this principle sort of gets rediscovered

658
00:25:11,440 --> 00:25:12,799
over and over again and then it gets

659
00:25:12,799 --> 00:25:14,880
forgotten and it gets rediscovered it

660
00:25:14,880 --> 00:25:16,799
seems like right now we're in a phase an

661
00:25:16,799 --> 00:25:18,400
era over the last several years where

662
00:25:18,400 --> 00:25:20,000
people have rediscovered this principle

663
00:25:20,000 --> 00:25:22,240
and are using it to good effect um and a

664
00:25:22,240 --> 00:25:24,400
lot of the proposals that have come out

665
00:25:24,400 --> 00:25:26,640
from many of you again

666
00:25:26,640 --> 00:25:28,400
have used this principle

667
00:25:28,400 --> 00:25:29,360
and so

668
00:25:29,360 --> 00:25:31,200
what we thought we would do is just

669
00:25:31,200 --> 00:25:32,559
step back for a second and think about

670
00:25:32,559 --> 00:25:34,240
what what's going on

671
00:25:34,240 --> 00:25:35,919
in a lot of these systems

672
00:25:35,919 --> 00:25:38,159
uh that enables internet privacy by

673
00:25:38,159 --> 00:25:40,080
decoupling who you are from what you do

674
00:25:40,080 --> 00:25:41,760
um and it seems like decoupling is

675
00:25:41,760 --> 00:25:43,360
easiest when

676
00:25:43,360 --> 00:25:47,279
we split uh by entity so meaning who are

677
00:25:47,279 --> 00:25:49,360
the different parties in the network

678
00:25:49,360 --> 00:25:51,360
that are participating to achieve some

679
00:25:51,360 --> 00:25:53,360
internet service and the mechanism

680
00:25:53,360 --> 00:25:55,600
that's being used so the mechanism might

681
00:25:55,600 --> 00:25:57,200
be a mechanism for authentication or

682
00:25:57,200 --> 00:26:00,000
mechanism for connectivity or um for

683
00:26:00,000 --> 00:26:01,279
whatever else that you're trying to

684
00:26:01,279 --> 00:26:02,159
achieve

685
00:26:02,159 --> 00:26:04,240
um the decoupling is always going to be

686
00:26:04,240 --> 00:26:06,080
protocol and context specific so you

687
00:26:06,080 --> 00:26:08,240
have to look at the specific

688
00:26:08,240 --> 00:26:09,520
service that you're trying to provide of

689
00:26:09,520 --> 00:26:12,559
course um so we can go through that for

690
00:26:12,559 --> 00:26:15,200
a few examples and very sort of at a

691
00:26:15,200 --> 00:26:17,039
high level trying to understand

692
00:26:17,039 --> 00:26:18,320
what kind of decoupling is being

693
00:26:18,320 --> 00:26:20,639
achieved

694
00:26:22,159 --> 00:26:24,960
so the context here before we go into

695
00:26:24,960 --> 00:26:26,400
that is

696
00:26:26,400 --> 00:26:28,480
ordinary data confidentiality is nearly

697
00:26:28,480 --> 00:26:30,799
solved this is sort of a broad statement

698
00:26:30,799 --> 00:26:32,640
i'm making here but we're at a point

699
00:26:32,640 --> 00:26:34,720
where tls is everywhere data is

700
00:26:34,720 --> 00:26:36,880
encrypted at rest and if it's not we

701
00:26:36,880 --> 00:26:38,240
know that we need to do those things

702
00:26:38,240 --> 00:26:40,000
there are some hurdles in some contexts

703
00:26:40,000 --> 00:26:42,559
where you can't use tls or you can't

704
00:26:42,559 --> 00:26:44,320
encrypt data at raster you can't do some

705
00:26:44,320 --> 00:26:46,240
of the very well-known

706
00:26:46,240 --> 00:26:49,440
uh steps for data confidentiality but we

707
00:26:49,440 --> 00:26:51,760
know we need to do those things so the

708
00:26:51,760 --> 00:26:53,039
solution is there it's about

709
00:26:53,039 --> 00:26:54,720
implementation

710
00:26:54,720 --> 00:26:56,640
but what remains is this a little bit

711
00:26:56,640 --> 00:26:59,120
more complex layered metadata privacy

712
00:26:59,120 --> 00:27:00,080
problem

713
00:27:00,080 --> 00:27:01,279
and

714
00:27:01,279 --> 00:27:03,760
this is in many different contexts at

715
00:27:03,760 --> 00:27:05,440
different layers of the network stack

716
00:27:05,440 --> 00:27:08,880
everything from the mobile layer to

717
00:27:08,880 --> 00:27:10,799
various types of internet protocols to

718
00:27:10,799 --> 00:27:13,120
applications um and

719
00:27:13,120 --> 00:27:14,640
so you need many different overlapping

720
00:27:14,640 --> 00:27:16,720
solutions and so it's not that you would

721
00:27:16,720 --> 00:27:18,320
apply the decoupling principle for a

722
00:27:18,320 --> 00:27:20,480
single user in a single context in a

723
00:27:20,480 --> 00:27:22,640
single protocol then be done but rather

724
00:27:22,640 --> 00:27:24,640
that you want to decouple all the things

725
00:27:24,640 --> 00:27:26,559
effectively

726
00:27:26,559 --> 00:27:27,919
um and

727
00:27:27,919 --> 00:27:29,760
really the privacy challenges that we're

728
00:27:29,760 --> 00:27:31,279
dealing with here are fundamental to the

729
00:27:31,279 --> 00:27:34,559
internet maybe in a unique way versus

730
00:27:34,559 --> 00:27:36,559
all other sort of computing contexts

731
00:27:36,559 --> 00:27:39,120
because we rely upon others to carry our

732
00:27:39,120 --> 00:27:41,279
traffic and process our requests this is

733
00:27:41,279 --> 00:27:42,559
sort of a fundamental thing with

734
00:27:42,559 --> 00:27:44,480
networking that's not true

735
00:27:44,480 --> 00:27:46,640
in other domains and so you know a lot

736
00:27:46,640 --> 00:27:48,799
of computer science now is focusing on

737
00:27:48,799 --> 00:27:51,679
privacy and security but they don't have

738
00:27:51,679 --> 00:27:54,240
the same degree of challenge for privacy

739
00:27:54,240 --> 00:27:56,960
as i think we do

740
00:27:57,840 --> 00:27:59,760
so a little bit of terminology trying

741
00:27:59,760 --> 00:28:02,159
not to make it super terminological but

742
00:28:02,159 --> 00:28:04,399
you know just to be a little bit more

743
00:28:04,399 --> 00:28:07,120
clear about what we're talking about so

744
00:28:07,120 --> 00:28:09,120
we're going to have a very crude uh

745
00:28:09,120 --> 00:28:10,240
binary

746
00:28:10,240 --> 00:28:12,080
distinction between sensitive and

747
00:28:12,080 --> 00:28:13,520
non-sensitive information that's the

748
00:28:13,520 --> 00:28:14,960
level we're going to stay at a very high

749
00:28:14,960 --> 00:28:16,799
level

750
00:28:16,799 --> 00:28:18,880
this filled triangle is going to be

751
00:28:18,880 --> 00:28:21,840
sensitive user identity so this is you

752
00:28:21,840 --> 00:28:25,279
know my my name or maybe in some context

753
00:28:25,279 --> 00:28:29,360
my home router ip address

754
00:28:29,360 --> 00:28:32,080
and the uh the hollow triangle is a

755
00:28:32,080 --> 00:28:33,840
non-sensitive user identity some sort of

756
00:28:33,840 --> 00:28:36,720
temporary identifier a random identifier

757
00:28:36,720 --> 00:28:40,159
um and then sensitive user data again is

758
00:28:40,159 --> 00:28:41,520
going to be context specific but it

759
00:28:41,520 --> 00:28:43,760
could be everything from the actual

760
00:28:43,760 --> 00:28:46,399
contents of a request that i make to

761
00:28:46,399 --> 00:28:48,720
some service um or the response that

762
00:28:48,720 --> 00:28:49,840
comes back

763
00:28:49,840 --> 00:28:53,120
um and non-sensitive user data would be

764
00:28:53,120 --> 00:28:56,240
uh for example the fact that i did make

765
00:28:56,240 --> 00:29:01,279
a request but no content of that request

766
00:29:01,279 --> 00:29:04,000
so then we can describe using we just

767
00:29:04,000 --> 00:29:06,559
have sort of a tuple which will say

768
00:29:06,559 --> 00:29:08,960
there is some party in some context that

769
00:29:08,960 --> 00:29:10,880
has some knowledge about the user and

770
00:29:10,880 --> 00:29:12,399
we're going to talk from a single user

771
00:29:12,399 --> 00:29:14,720
standpoint from the moment so

772
00:29:14,720 --> 00:29:16,799
if i write it like this sort of a filled

773
00:29:16,799 --> 00:29:19,919
triangle and a hollow circle

774
00:29:19,919 --> 00:29:22,320
then we're talking about somebody knows

775
00:29:22,320 --> 00:29:24,080
sensitive user identity and

776
00:29:24,080 --> 00:29:27,120
non-sensitive user data so how do we

777
00:29:27,120 --> 00:29:28,480
apply this so we'll go through a couple

778
00:29:28,480 --> 00:29:30,880
of examples using just existing systems

779
00:29:30,880 --> 00:29:31,520
and

780
00:29:31,520 --> 00:29:33,520
think about what the decoupling going on

781
00:29:33,520 --> 00:29:34,880
is

782
00:29:34,880 --> 00:29:36,559
but first there are some caveats

783
00:29:36,559 --> 00:29:38,880
obviously identity and data are always

784
00:29:38,880 --> 00:29:41,360
shades of gray the idea that we can say

785
00:29:41,360 --> 00:29:43,520
this is sensitive user identity and this

786
00:29:43,520 --> 00:29:44,559
is not

787
00:29:44,559 --> 00:29:46,000
it's really difficult to cleanly

788
00:29:46,000 --> 00:29:48,559
categorize that um but

789
00:29:48,559 --> 00:29:50,480
you know that's uh we're going to sort

790
00:29:50,480 --> 00:29:52,320
of use these generally understood

791
00:29:52,320 --> 00:29:54,399
categories for the analysis

792
00:29:54,399 --> 00:29:56,720
and then we can complicate it through

793
00:29:56,720 --> 00:29:58,559
thinking about side channels and you

794
00:29:58,559 --> 00:30:00,080
know all the shades of gray that also

795
00:30:00,080 --> 00:30:02,320
come about for our user identity the

796
00:30:02,320 --> 00:30:05,200
same thing of course is true with data

797
00:30:05,200 --> 00:30:07,039
the data itself

798
00:30:07,039 --> 00:30:09,440
there's shades of gray of what counts as

799
00:30:09,440 --> 00:30:11,279
uh sensitive and non-sensitive and maybe

800
00:30:11,279 --> 00:30:12,880
even contextual

801
00:30:12,880 --> 00:30:14,880
some data might be sensitive in one

802
00:30:14,880 --> 00:30:17,120
context and not sensitive in another

803
00:30:17,120 --> 00:30:18,559
the user is ultimately gonna be the

804
00:30:18,559 --> 00:30:21,200
judge of that um and then of course

805
00:30:21,200 --> 00:30:23,039
further still identity and data are

806
00:30:23,039 --> 00:30:25,919
sometimes mixed and conflated and so

807
00:30:25,919 --> 00:30:27,120
there too this is going to be

808
00:30:27,120 --> 00:30:29,120
complicated so i'm going to just sort of

809
00:30:29,120 --> 00:30:32,320
put those caveats out there but also um

810
00:30:32,320 --> 00:30:33,279
we're going to ignore them for the

811
00:30:33,279 --> 00:30:35,039
moment and think about the the simple

812
00:30:35,039 --> 00:30:37,840
case first

813
00:30:38,640 --> 00:30:40,960
so let's just look at something we all

814
00:30:40,960 --> 00:30:44,000
know something like mixnets or tor

815
00:30:44,000 --> 00:30:46,640
and in this context we have some sender

816
00:30:46,640 --> 00:30:48,559
trying to send a message some request or

817
00:30:48,559 --> 00:30:51,600
data to some receiver over this network

818
00:30:51,600 --> 00:30:52,559
and

819
00:30:52,559 --> 00:30:54,799
they're trying to achieve some data or

820
00:30:54,799 --> 00:30:57,360
metadata privacy for their identifier

821
00:30:57,360 --> 00:30:59,440
their personal identifier and

822
00:30:59,440 --> 00:31:01,600
uh the message that they're sending the

823
00:31:01,600 --> 00:31:03,200
mixes are some third parties that are

824
00:31:03,200 --> 00:31:04,640
relaying the data

825
00:31:04,640 --> 00:31:06,480
and then the receiver is a partially

826
00:31:06,480 --> 00:31:08,480
trusted party who will receive and

827
00:31:08,480 --> 00:31:10,399
respond to the message

828
00:31:10,399 --> 00:31:12,399
so that's the setting that we have uh we

829
00:31:12,399 --> 00:31:14,480
don't have to go into the specifics of a

830
00:31:14,480 --> 00:31:19,320
specific design for this analysis

831
00:31:19,440 --> 00:31:22,000
so in this context the sender of course

832
00:31:22,000 --> 00:31:23,760
has all the sensitive information i'm

833
00:31:23,760 --> 00:31:26,159
the sender i'm the user and i know of

834
00:31:26,159 --> 00:31:29,840
course my identity so the triangle and

835
00:31:29,840 --> 00:31:32,080
the data that i'm requesting so that's

836
00:31:32,080 --> 00:31:33,519
the filled circle

837
00:31:33,519 --> 00:31:35,440
now the first mix here

838
00:31:35,440 --> 00:31:37,600
knows my identity in some form in the

839
00:31:37,600 --> 00:31:39,200
sense that i have to talk to them so

840
00:31:39,200 --> 00:31:40,880
they know my ip address or they know

841
00:31:40,880 --> 00:31:43,039
some sort of network identity of me for

842
00:31:43,039 --> 00:31:43,919
me

843
00:31:43,919 --> 00:31:44,640
um

844
00:31:44,640 --> 00:31:47,519
and then the subsequent hops know less

845
00:31:47,519 --> 00:31:49,600
and less so they don't even know who i

846
00:31:49,600 --> 00:31:50,720
am they just know that they got a

847
00:31:50,720 --> 00:31:53,760
message from somebody um and

848
00:31:53,760 --> 00:31:54,720
there's

849
00:31:54,720 --> 00:31:55,440
the

850
00:31:55,440 --> 00:31:57,279
uh the request itself which they don't

851
00:31:57,279 --> 00:31:58,559
know now

852
00:31:58,559 --> 00:32:00,799
there's also the context in which

853
00:32:00,799 --> 00:32:01,600
uh

854
00:32:01,600 --> 00:32:03,679
it's i could pretend to be mix number

855
00:32:03,679 --> 00:32:05,600
one so mix number one actually thinks

856
00:32:05,600 --> 00:32:07,200
that i'm sending on somebody else's

857
00:32:07,200 --> 00:32:09,440
request right there's that design and in

858
00:32:09,440 --> 00:32:12,559
some systems um so mix one may not know

859
00:32:12,559 --> 00:32:14,320
even my identity so let's but let's

860
00:32:14,320 --> 00:32:16,640
leave that out for a second for a second

861
00:32:16,640 --> 00:32:18,159
um

862
00:32:18,159 --> 00:32:20,159
and then finally the receiver

863
00:32:20,159 --> 00:32:20,960
uh

864
00:32:20,960 --> 00:32:22,240
is gonna get

865
00:32:22,240 --> 00:32:24,000
a message from somebody they don't know

866
00:32:24,000 --> 00:32:24,880
who

867
00:32:24,880 --> 00:32:27,200
uh unless i specifically conveyed to

868
00:32:27,200 --> 00:32:29,360
them and that's going to be sort of

869
00:32:29,360 --> 00:32:31,760
non-sensitive user identity and

870
00:32:31,760 --> 00:32:34,000
sensitive user data potentially because

871
00:32:34,000 --> 00:32:35,679
i am sending a specific request which

872
00:32:35,679 --> 00:32:37,679
they are capable of decrypting so that

873
00:32:37,679 --> 00:32:39,200
they can then give me a response or

874
00:32:39,200 --> 00:32:40,640
maybe i'm just sending them data for

875
00:32:40,640 --> 00:32:43,039
their sake so

876
00:32:43,039 --> 00:32:45,120
if you look through this you see that

877
00:32:45,120 --> 00:32:46,480
only the sender

878
00:32:46,480 --> 00:32:48,640
knew both

879
00:32:48,640 --> 00:32:53,039
sensitive identity and sensitive data

880
00:32:53,760 --> 00:32:56,000
and so the basic idea the decoupling

881
00:32:56,000 --> 00:32:58,399
principle is really simple third parties

882
00:32:58,399 --> 00:33:00,720
should know at most one of

883
00:33:00,720 --> 00:33:02,880
sensitive user identity and sensitive

884
00:33:02,880 --> 00:33:04,559
user data

885
00:33:04,559 --> 00:33:05,840
and so some of them might know the

886
00:33:05,840 --> 00:33:07,519
identity piece but not the data piece

887
00:33:07,519 --> 00:33:08,880
some of them might know the data piece

888
00:33:08,880 --> 00:33:11,519
but not the identity piece and it's not

889
00:33:11,519 --> 00:33:13,120
always simply there's one type of

890
00:33:13,120 --> 00:33:15,279
identity and one type of data in some

891
00:33:15,279 --> 00:33:16,880
systems there are multiple types of

892
00:33:16,880 --> 00:33:18,000
identity

893
00:33:18,000 --> 00:33:19,600
one of the systems i'll briefly mention

894
00:33:19,600 --> 00:33:22,399
is gonna be it has a mobile identity

895
00:33:22,399 --> 00:33:23,600
piece

896
00:33:23,600 --> 00:33:26,399
and a non-mobile identity piece there's

897
00:33:26,399 --> 00:33:30,240
lots of other similar kinds of systems

898
00:33:30,240 --> 00:33:32,880
so this has been used all over the place

899
00:33:32,880 --> 00:33:34,880
there's all of the classic designs from

900
00:33:34,880 --> 00:33:36,559
chom and all the systems that have built

901
00:33:36,559 --> 00:33:39,760
upon choms designs they all exhibit

902
00:33:39,760 --> 00:33:41,760
the decoupling principle

903
00:33:41,760 --> 00:33:43,679
privacy pass and private private access

904
00:33:43,679 --> 00:33:44,720
tokens

905
00:33:44,720 --> 00:33:46,960
exhibit the decoupling principle

906
00:33:46,960 --> 00:33:50,159
in that context you have

907
00:33:50,159 --> 00:33:52,640
a client an issuer and an origin the

908
00:33:52,640 --> 00:33:54,559
issue or an origin neither of them know

909
00:33:54,559 --> 00:33:57,679
both uh the identity and the data

910
00:33:57,679 --> 00:34:00,320
uh in the context of oblivious dns and

911
00:34:00,320 --> 00:34:01,840
odo

912
00:34:01,840 --> 00:34:04,320
the resolver and the oblivious resolver

913
00:34:04,320 --> 00:34:07,039
also they know either the identity or

914
00:34:07,039 --> 00:34:08,879
the data but not both same with the

915
00:34:08,879 --> 00:34:10,000
origin

916
00:34:10,000 --> 00:34:11,199
um

917
00:34:11,199 --> 00:34:12,879
in the context of pretty good phone

918
00:34:12,879 --> 00:34:15,760
privacy which is one of our systems we

919
00:34:15,760 --> 00:34:17,839
this is one where we have a mobile

920
00:34:17,839 --> 00:34:20,000
identifier and so you have sort of a

921
00:34:20,000 --> 00:34:22,000
user's human identity and their mobile

922
00:34:22,000 --> 00:34:24,560
identity and no system knows both of

923
00:34:24,560 --> 00:34:25,359
those

924
00:34:25,359 --> 00:34:27,918
uh in the context of private relay you

925
00:34:27,918 --> 00:34:29,040
have the same

926
00:34:29,040 --> 00:34:30,960
decoupling across the multiple relays

927
00:34:30,960 --> 00:34:34,000
that the first relay knows the user's ip

928
00:34:34,000 --> 00:34:36,560
the second relay knows the origin that's

929
00:34:36,560 --> 00:34:39,520
being requested but neither knows both

930
00:34:39,520 --> 00:34:41,199
and then private aggregate statistics

931
00:34:41,199 --> 00:34:42,800
you have an aggregator and a collector

932
00:34:42,800 --> 00:34:44,639
but neither knows

933
00:34:44,639 --> 00:34:46,800
both the private identity and the

934
00:34:46,800 --> 00:34:49,280
private data so there's a lot of these

935
00:34:49,280 --> 00:34:50,719
and these are just this is a very

936
00:34:50,719 --> 00:34:53,199
incomplete list of examples of systems

937
00:34:53,199 --> 00:34:56,239
that have used this principle and so

938
00:34:56,239 --> 00:34:58,800
really the idea in this talk is to sort

939
00:34:58,800 --> 00:35:01,040
of point out this the similarity across

940
00:35:01,040 --> 00:35:03,839
of these

941
00:35:04,000 --> 00:35:05,839
and so why does this seem to work why do

942
00:35:05,839 --> 00:35:07,359
people keep using it why does it seem to

943
00:35:07,359 --> 00:35:10,240
work um and it seems like this is an

944
00:35:10,240 --> 00:35:13,440
incomplete reason for why this works

945
00:35:13,440 --> 00:35:15,440
users often care about hiding their true

946
00:35:15,440 --> 00:35:18,079
identity from semi-trusted services and

947
00:35:18,079 --> 00:35:19,599
hiding the data or metadata of the

948
00:35:19,599 --> 00:35:22,320
requests from untrusted parties

949
00:35:22,320 --> 00:35:24,960
but they don't care about that often but

950
00:35:24,960 --> 00:35:26,320
sometimes they do

951
00:35:26,320 --> 00:35:28,079
whether they reveal that they are

952
00:35:28,079 --> 00:35:29,359
a user

953
00:35:29,359 --> 00:35:32,160
some user of a public or popular service

954
00:35:32,160 --> 00:35:34,800
so i don't mind revealing that i'm using

955
00:35:34,800 --> 00:35:37,599
such and such service i just don't want

956
00:35:37,599 --> 00:35:39,599
that service to know too much about me

957
00:35:39,599 --> 00:35:41,359
and i don't want others to know too much

958
00:35:41,359 --> 00:35:42,480
about me

959
00:35:42,480 --> 00:35:43,839
um and

960
00:35:43,839 --> 00:35:45,760
users often don't care about whether

961
00:35:45,760 --> 00:35:47,680
they can hide a request from the service

962
00:35:47,680 --> 00:35:50,079
who is actually providing it if i'm

963
00:35:50,079 --> 00:35:52,560
requesting something from a website and

964
00:35:52,560 --> 00:35:54,160
i have to reveal a little bit to get

965
00:35:54,160 --> 00:35:56,000
that information then i'm willing to do

966
00:35:56,000 --> 00:35:57,520
that because they are providing me a

967
00:35:57,520 --> 00:36:00,320
useful service

968
00:36:01,839 --> 00:36:03,920
there are some cautionary tales and sort

969
00:36:03,920 --> 00:36:05,839
of examples of where this doesn't work

970
00:36:05,839 --> 00:36:07,359
and why and then we can use the

971
00:36:07,359 --> 00:36:09,520
principle to sort of see what maybe went

972
00:36:09,520 --> 00:36:10,880
wrong

973
00:36:10,880 --> 00:36:13,040
it's somewhat obvious in retrospect

974
00:36:13,040 --> 00:36:15,119
uh so if you take the

975
00:36:15,119 --> 00:36:17,599
popular architecture really not popular

976
00:36:17,599 --> 00:36:19,520
anymore but you know was it really

977
00:36:19,520 --> 00:36:22,640
common architecture i'd say 15 years ago

978
00:36:22,640 --> 00:36:24,400
um which is

979
00:36:24,400 --> 00:36:26,880
to improve security of some network or

980
00:36:26,880 --> 00:36:29,040
some system x let's just drop in a

981
00:36:29,040 --> 00:36:31,359
security gateway a middle box somewhere

982
00:36:31,359 --> 00:36:33,200
and that security gateway is going to do

983
00:36:33,200 --> 00:36:34,800
all the all the things we wanted to do

984
00:36:34,800 --> 00:36:36,320
to improve our privacy improve our

985
00:36:36,320 --> 00:36:38,240
security whatever it may be

986
00:36:38,240 --> 00:36:39,920
um and so in that context the sender of

987
00:36:39,920 --> 00:36:41,920
course has all sensitive info but the

988
00:36:41,920 --> 00:36:44,960
gateway also has all sensitive info

989
00:36:44,960 --> 00:36:47,440
that gateway is doing

990
00:36:47,440 --> 00:36:50,079
you often was and still sometimes is

991
00:36:50,079 --> 00:36:52,960
doing uh all processing for that user

992
00:36:52,960 --> 00:36:54,720
and so that means it's seeing decrypted

993
00:36:54,720 --> 00:36:56,400
traffic it's seeing

994
00:36:56,400 --> 00:36:58,880
uh requests that are going out uh it's

995
00:36:58,880 --> 00:37:01,280
seeing uh user identity

996
00:37:01,280 --> 00:37:03,200
and so you have to put all your trust in

997
00:37:03,200 --> 00:37:04,640
that and we kind of we've always known

998
00:37:04,640 --> 00:37:06,800
that um but this is just sort of a way

999
00:37:06,800 --> 00:37:08,880
of analyzing it to

1000
00:37:08,880 --> 00:37:11,040
immediately flag the problem

1001
00:37:11,040 --> 00:37:13,200
and then again the receiver doesn't have

1002
00:37:13,200 --> 00:37:15,280
all that information

1003
00:37:15,280 --> 00:37:16,640
so

1004
00:37:16,640 --> 00:37:19,359
the value that we get here is that we

1005
00:37:19,359 --> 00:37:20,560
can quickly

1006
00:37:20,560 --> 00:37:22,079
identify

1007
00:37:22,079 --> 00:37:24,960
problems that might arise by doing this

1008
00:37:24,960 --> 00:37:26,720
quick analysis this sort of decoupling

1009
00:37:26,720 --> 00:37:29,440
analysis this isn't to say that if we

1010
00:37:29,440 --> 00:37:30,800
show that we've decoupled we've solved

1011
00:37:30,800 --> 00:37:32,800
all problems obviously we need to be

1012
00:37:32,800 --> 00:37:34,000
able to have

1013
00:37:34,000 --> 00:37:35,359
consider lots of other things

1014
00:37:35,359 --> 00:37:37,280
non-collusion between different parties

1015
00:37:37,280 --> 00:37:38,960
that are providing a service

1016
00:37:38,960 --> 00:37:41,440
um sometimes you get benefits by using

1017
00:37:41,440 --> 00:37:43,359
hardware enclaves or trusted execution

1018
00:37:43,359 --> 00:37:45,839
environments so you can shift trust and

1019
00:37:45,839 --> 00:37:48,240
therefore shift who knows what

1020
00:37:48,240 --> 00:37:49,440
um

1021
00:37:49,440 --> 00:37:51,200
and then of course their side channels

1022
00:37:51,200 --> 00:37:53,119
even if you decoupled there are tons of

1023
00:37:53,119 --> 00:37:54,560
side channels the side channels are

1024
00:37:54,560 --> 00:37:55,760
going to be context and protocol

1025
00:37:55,760 --> 00:37:58,480
specific they'll still be a problem and

1026
00:37:58,480 --> 00:38:00,079
will still change the nature of this

1027
00:38:00,079 --> 00:38:01,920
analysis

1028
00:38:01,920 --> 00:38:03,520
so i'm almost out of time so i'll stop

1029
00:38:03,520 --> 00:38:07,839
there um thanks for inviting me

1030
00:38:08,960 --> 00:38:10,480
all right thanks broth

1031
00:38:10,480 --> 00:38:12,320
time for a couple quick questions if

1032
00:38:12,320 --> 00:38:15,720
there are any

1033
00:38:19,200 --> 00:38:20,800
should i read from chat or what should i

1034
00:38:20,800 --> 00:38:21,839
do here

1035
00:38:21,839 --> 00:38:23,760
there was some chatter in the

1036
00:38:23,760 --> 00:38:26,000
in the in the chat um

1037
00:38:26,000 --> 00:38:27,680
uh some of it was carry over from the

1038
00:38:27,680 --> 00:38:31,399
last presentation though

1039
00:38:32,160 --> 00:38:35,040
yeah let's see here

1040
00:38:39,040 --> 00:38:39,920
okay

1041
00:38:39,920 --> 00:38:43,280
hearing no questions thank you broth um

1042
00:38:43,280 --> 00:38:44,960
and uh

1043
00:38:44,960 --> 00:38:46,720
we'll move on to the next presenter

1044
00:38:46,720 --> 00:38:49,520
which is mike

1045
00:38:53,760 --> 00:38:55,440
it's mike if you request to share your

1046
00:38:55,440 --> 00:38:56,880
slides there's like a little button near

1047
00:38:56,880 --> 00:38:58,800
the top left it looks like a piece of

1048
00:38:58,800 --> 00:39:00,960
paper

1049
00:39:00,960 --> 00:39:03,280
okay

1050
00:39:03,520 --> 00:39:06,560
and then you should be able to drive

1051
00:39:08,560 --> 00:39:10,000
all right perfect

1052
00:39:10,000 --> 00:39:11,760
take it away

1053
00:39:11,760 --> 00:39:13,599
yes we can hear you fine

1054
00:39:13,599 --> 00:39:16,720
okay um so my name is mike rosalek i'm a

1055
00:39:16,720 --> 00:39:18,079
faculty member at oregon state

1056
00:39:18,079 --> 00:39:20,320
university i also happen to be on

1057
00:39:20,320 --> 00:39:22,079
sabbatical at cloudflare research these

1058
00:39:22,079 --> 00:39:23,440
days

1059
00:39:23,440 --> 00:39:25,200
and i'm going to be talking about this

1060
00:39:25,200 --> 00:39:27,119
paper that's going to appear next next

1061
00:39:27,119 --> 00:39:30,079
month that usenix

1062
00:39:30,079 --> 00:39:31,760
and i just want to thank the chairs for

1063
00:39:31,760 --> 00:39:33,520
the opportunity to

1064
00:39:33,520 --> 00:39:35,119
present here let's see if i can figure

1065
00:39:35,119 --> 00:39:37,440
out how to drive the slides

1066
00:39:37,440 --> 00:39:39,760
uh so this is a talk about ssh

1067
00:39:39,760 --> 00:39:41,839
authentication and specifically

1068
00:39:41,839 --> 00:39:44,000
authentication using public keys so i

1069
00:39:44,000 --> 00:39:46,240
want to review how

1070
00:39:46,240 --> 00:39:48,640
things currently work in ssh

1071
00:39:48,640 --> 00:39:51,119
so when i connect to an ssh server

1072
00:39:51,119 --> 00:39:53,440
my client offers a public key and says

1073
00:39:53,440 --> 00:39:54,960
hey do you want me to authenticate under

1074
00:39:54,960 --> 00:39:57,040
this public key and the server might say

1075
00:39:57,040 --> 00:39:58,720
no in which case

1076
00:39:58,720 --> 00:40:00,079
my client will

1077
00:40:00,079 --> 00:40:02,160
offer another public key

1078
00:40:02,160 --> 00:40:03,200
and

1079
00:40:03,200 --> 00:40:04,720
ideally eventually

1080
00:40:04,720 --> 00:40:06,240
the server finds a public key that it

1081
00:40:06,240 --> 00:40:07,760
likes and it says yes

1082
00:40:07,760 --> 00:40:10,960
and in that case i authenticate by uh by

1083
00:40:10,960 --> 00:40:12,960
doing a standard kind of signature of

1084
00:40:12,960 --> 00:40:15,520
some of some random nots

1085
00:40:15,520 --> 00:40:17,119
that's how

1086
00:40:17,119 --> 00:40:20,880
public key authentication works in ssh

1087
00:40:20,880 --> 00:40:22,240
and i'm here because i want to point out

1088
00:40:22,240 --> 00:40:23,119
some

1089
00:40:23,119 --> 00:40:26,079
privacy and security issues with this

1090
00:40:26,079 --> 00:40:28,240
with this approach

1091
00:40:28,240 --> 00:40:30,480
i think one of the most well-known

1092
00:40:30,480 --> 00:40:32,000
problems with this is that the server

1093
00:40:32,000 --> 00:40:34,000
can fingerprint the client and what i

1094
00:40:34,000 --> 00:40:36,160
mean is that the server can just say no

1095
00:40:36,160 --> 00:40:38,960
to all of the clients advertisements

1096
00:40:38,960 --> 00:40:41,359
and actually by default the ssh client

1097
00:40:41,359 --> 00:40:43,520
will send all of the public keys that it

1098
00:40:43,520 --> 00:40:45,359
knows about that are currently loaded

1099
00:40:45,359 --> 00:40:47,520
into the ssh agent

1100
00:40:47,520 --> 00:40:49,280
so the server can see your public keys

1101
00:40:49,280 --> 00:40:52,480
even your keys that are um

1102
00:40:52,480 --> 00:40:54,319
you know presumably not

1103
00:40:54,319 --> 00:40:56,079
uh not generated for this particular

1104
00:40:56,079 --> 00:40:57,119
server

1105
00:40:57,119 --> 00:40:59,760
um so i want to point out a cool

1106
00:40:59,760 --> 00:41:01,440
uh application of this or maybe it's

1107
00:41:01,440 --> 00:41:02,800
creepy i don't know if it's cool but

1108
00:41:02,800 --> 00:41:04,079
maybe creepy

1109
00:41:04,079 --> 00:41:07,040
and this is what first uh got me

1110
00:41:07,040 --> 00:41:10,560
aware of this problem so back in uh 2015

1111
00:41:10,560 --> 00:41:12,400
ben cox had this blog post pointing out

1112
00:41:12,400 --> 00:41:15,760
that on github uh everyone's public keys

1113
00:41:15,760 --> 00:41:17,920
are truly public like you can just look

1114
00:41:17,920 --> 00:41:19,680
up anybody's public keys

1115
00:41:19,680 --> 00:41:21,839
in some cases that's a nice feature but

1116
00:41:21,839 --> 00:41:23,200
he points out that

1117
00:41:23,200 --> 00:41:24,720
if somebody cared enough they could

1118
00:41:24,720 --> 00:41:26,720
collect a massive database of everyone's

1119
00:41:26,720 --> 00:41:29,040
ssh keys and so that's exactly what he

1120
00:41:29,040 --> 00:41:30,319
did

1121
00:41:30,319 --> 00:41:32,240
and he did some

1122
00:41:32,240 --> 00:41:35,920
analytics on these ssh keys

1123
00:41:35,920 --> 00:41:37,680
and then a few months later uh filippo

1124
00:41:37,680 --> 00:41:40,880
valsorta um had this cryptic blog post

1125
00:41:40,880 --> 00:41:42,960
where he says uh he invites the readers

1126
00:41:42,960 --> 00:41:45,280
to ssh to this server uh the server is

1127
00:41:45,280 --> 00:41:47,599
still up i i encourage you to ssh to

1128
00:41:47,599 --> 00:41:48,640
this

1129
00:41:48,640 --> 00:41:50,079
server

1130
00:41:50,079 --> 00:41:51,839
when i ssh to the server this is the

1131
00:41:51,839 --> 00:41:54,400
message that i get

1132
00:41:54,400 --> 00:41:56,240
and in particular

1133
00:41:56,240 --> 00:41:58,079
um i didn't type anything and i just

1134
00:41:58,079 --> 00:42:01,760
type ssh to this domain name and it knew

1135
00:42:01,760 --> 00:42:04,640
my my full name and it knew my username

1136
00:42:04,640 --> 00:42:06,000
on github

1137
00:42:06,000 --> 00:42:08,160
um so that's kind of creepy and the

1138
00:42:08,160 --> 00:42:09,760
reason this works is that

1139
00:42:09,760 --> 00:42:12,400
my github public my

1140
00:42:12,400 --> 00:42:14,079
my public key for

1141
00:42:14,079 --> 00:42:17,200
github ssh is loaded into my ssh agent

1142
00:42:17,200 --> 00:42:18,480
all the time because i'm always using

1143
00:42:18,480 --> 00:42:19,440
github

1144
00:42:19,440 --> 00:42:22,800
and so my ssj my ssh client offers it to

1145
00:42:22,800 --> 00:42:25,280
this uh the philippo's

1146
00:42:25,280 --> 00:42:27,680
ssh server and he has a database of

1147
00:42:27,680 --> 00:42:29,200
public keys he knows that this public

1148
00:42:29,200 --> 00:42:32,800
key belongs to this user on github

1149
00:42:32,800 --> 00:42:35,119
so this problem can be resolved you can

1150
00:42:35,119 --> 00:42:37,680
configure your client to only send

1151
00:42:37,680 --> 00:42:40,400
keys to the servers that you expect um

1152
00:42:40,400 --> 00:42:42,319
so this can be resolved with some

1153
00:42:42,319 --> 00:42:44,720
configuration changes uh and so if this

1154
00:42:44,720 --> 00:42:47,280
was the only problem with ssh then i

1155
00:42:47,280 --> 00:42:49,599
would wouldn't really have much to say

1156
00:42:49,599 --> 00:42:50,800
um

1157
00:42:50,800 --> 00:42:52,880
so i'm going to mention a few other

1158
00:42:52,880 --> 00:42:56,800
issues with uh this ssh authentication

1159
00:42:56,800 --> 00:42:58,640
another one is that the client can probe

1160
00:42:58,640 --> 00:43:00,000
the server so

1161
00:43:00,000 --> 00:43:02,800
the ssh client can offer a public key

1162
00:43:02,800 --> 00:43:04,800
that belongs to somebody else

1163
00:43:04,800 --> 00:43:06,720
suppose somebody else knows my public

1164
00:43:06,720 --> 00:43:09,280
key then they can offer that key to the

1165
00:43:09,280 --> 00:43:11,760
ssh server and if the server says yes

1166
00:43:11,760 --> 00:43:13,760
they can conclude that i have an account

1167
00:43:13,760 --> 00:43:15,200
on that server

1168
00:43:15,200 --> 00:43:17,680
now the ssh protocol does support

1169
00:43:17,680 --> 00:43:20,400
a preemptive signature so

1170
00:43:20,400 --> 00:43:22,640
the client can provide a signature

1171
00:43:22,640 --> 00:43:24,000
along with the public key in the

1172
00:43:24,000 --> 00:43:25,599
offering you know in the hopes that this

1173
00:43:25,599 --> 00:43:27,599
might save a round

1174
00:43:27,599 --> 00:43:29,359
but as far as i know there's no ssh

1175
00:43:29,359 --> 00:43:32,240
server that that has any

1176
00:43:32,240 --> 00:43:35,280
has a configuration option that enforces

1177
00:43:35,280 --> 00:43:37,280
these preemptive signatures uh to be

1178
00:43:37,280 --> 00:43:38,560
given

1179
00:43:38,560 --> 00:43:41,040
so that's a bit of a problem uh another

1180
00:43:41,040 --> 00:43:43,520
issue is that the server obviously sees

1181
00:43:43,520 --> 00:43:46,800
which of the keys was used so if

1182
00:43:46,800 --> 00:43:47,839
if

1183
00:43:47,839 --> 00:43:50,000
several keys are authorized to perform

1184
00:43:50,000 --> 00:43:52,880
an operation on the ssh server

1185
00:43:52,880 --> 00:43:54,400
then the server

1186
00:43:54,400 --> 00:43:56,079
observes which of the keys was actually

1187
00:43:56,079 --> 00:43:59,599
used this is kind of fundamental um

1188
00:43:59,599 --> 00:44:01,200
to the protocol

1189
00:44:01,200 --> 00:44:02,880
and it's even a little bit worse because

1190
00:44:02,880 --> 00:44:06,079
the ssh server can prove to anybody that

1191
00:44:06,079 --> 00:44:07,839
you know somebody authenticated under

1192
00:44:07,839 --> 00:44:10,480
this specific key so authentication is

1193
00:44:10,480 --> 00:44:13,359
not uh deniable

1194
00:44:13,359 --> 00:44:15,440
um and last this is a little bit

1195
00:44:15,440 --> 00:44:17,119
esoteric i probably won't have time to

1196
00:44:17,119 --> 00:44:19,280
get into it too much but

1197
00:44:19,280 --> 00:44:21,520
the server can say no to all the

1198
00:44:21,520 --> 00:44:23,040
advertisements but i can also just say

1199
00:44:23,040 --> 00:44:25,119
yes to all the advertisements and it can

1200
00:44:25,119 --> 00:44:26,880
let everybody in

1201
00:44:26,880 --> 00:44:28,800
and it can let people in that it could

1202
00:44:28,800 --> 00:44:31,839
not have predicted uh in advance

1203
00:44:31,839 --> 00:44:33,040
and that's pretty fundamental to the

1204
00:44:33,040 --> 00:44:34,560
protocol

1205
00:44:34,560 --> 00:44:36,240
all four of these are things that we can

1206
00:44:36,240 --> 00:44:38,800
sort of improve uh with our new protocol

1207
00:44:38,800 --> 00:44:41,359
so i'll give you the big picture of

1208
00:44:41,359 --> 00:44:43,440
this new authentication method that we

1209
00:44:43,440 --> 00:44:46,640
have designed for ssh

1210
00:44:46,640 --> 00:44:48,640
it kind of works like this the client

1211
00:44:48,640 --> 00:44:49,440
has

1212
00:44:49,440 --> 00:44:51,760
several secret keys that it knows and

1213
00:44:51,760 --> 00:44:53,440
the server has several public keys that

1214
00:44:53,440 --> 00:44:54,319
are

1215
00:44:54,319 --> 00:44:56,480
that are authorized

1216
00:44:56,480 --> 00:44:58,480
those are the inputs to the protocol and

1217
00:44:58,480 --> 00:45:00,960
you can see in this case

1218
00:45:00,960 --> 00:45:03,760
sk1 is supposed to go with pk1 and sk4

1219
00:45:03,760 --> 00:45:07,040
is supposed to go with pk4 for example

1220
00:45:07,040 --> 00:45:10,079
these keys can be a mixture of rsa

1221
00:45:10,079 --> 00:45:14,400
ecdsa and so on um so for example sk

1222
00:45:14,400 --> 00:45:16,240
the first public key could be rsa the

1223
00:45:16,240 --> 00:45:18,480
second public key could be dsa for

1224
00:45:18,480 --> 00:45:19,599
example

1225
00:45:19,599 --> 00:45:21,119
all of these can be used together in one

1226
00:45:21,119 --> 00:45:22,800
attempt

1227
00:45:22,800 --> 00:45:24,319
what does the server learn from the

1228
00:45:24,319 --> 00:45:26,480
interaction the server learns that the

1229
00:45:26,480 --> 00:45:29,119
number of keys the client has

1230
00:45:29,119 --> 00:45:31,040
and the server learns that

1231
00:45:31,040 --> 00:45:32,800
at least one of this client's keys is

1232
00:45:32,800 --> 00:45:34,160
authorized

1233
00:45:34,160 --> 00:45:36,079
so it doesn't in particular it doesn't

1234
00:45:36,079 --> 00:45:37,440
learn

1235
00:45:37,440 --> 00:45:38,480
um

1236
00:45:38,480 --> 00:45:40,480
in this case we can see that

1237
00:45:40,480 --> 00:45:42,079
key number one and key number four are

1238
00:45:42,079 --> 00:45:44,160
authorized but the server doesn't learn

1239
00:45:44,160 --> 00:45:46,000
that information it just knows that at

1240
00:45:46,000 --> 00:45:48,000
least one of the authorized keys

1241
00:45:48,000 --> 00:45:49,440
was being used but it doesn't learn

1242
00:45:49,440 --> 00:45:51,440
which one

1243
00:45:51,440 --> 00:45:53,839
and the client learns the number of keys

1244
00:45:53,839 --> 00:45:55,359
that the server has

1245
00:45:55,359 --> 00:45:57,440
and it learns which of its keys were

1246
00:45:57,440 --> 00:46:00,400
authorized so it learns that pk1 and pk4

1247
00:46:00,400 --> 00:46:03,520
were authorized keys

1248
00:46:03,520 --> 00:46:05,440
but in particular the client cannot

1249
00:46:05,440 --> 00:46:06,560
learn whether

1250
00:46:06,560 --> 00:46:07,680
public key

1251
00:46:07,680 --> 00:46:09,040
pk2

1252
00:46:09,040 --> 00:46:10,880
is authorized by the server because the

1253
00:46:10,880 --> 00:46:12,160
client doesn't know the corresponding

1254
00:46:12,160 --> 00:46:14,079
secret key so the client can't offer

1255
00:46:14,079 --> 00:46:16,079
somebody else's public key and learn

1256
00:46:16,079 --> 00:46:18,640
whether the server recognizes it

1257
00:46:18,640 --> 00:46:20,079
it can only learn

1258
00:46:20,079 --> 00:46:22,240
that the server recognizes a key by also

1259
00:46:22,240 --> 00:46:26,160
holding the corresponding secret key

1260
00:46:26,800 --> 00:46:29,119
so this just works without any

1261
00:46:29,119 --> 00:46:31,200
uh site-specific configuration so it's

1262
00:46:31,200 --> 00:46:33,119
safe for everybody to just put all the

1263
00:46:33,119 --> 00:46:35,280
keys they know about into this protocol

1264
00:46:35,280 --> 00:46:37,599
um and you get pretty good uh

1265
00:46:37,599 --> 00:46:39,520
privacy guarantees

1266
00:46:39,520 --> 00:46:40,640
um

1267
00:46:40,640 --> 00:46:43,119
and then regarding this kind of strange

1268
00:46:43,119 --> 00:46:44,480
attack that i mentioned on the previous

1269
00:46:44,480 --> 00:46:45,839
slide

1270
00:46:45,839 --> 00:46:47,680
the server can't convince the client

1271
00:46:47,680 --> 00:46:49,760
that a connection was successful unless

1272
00:46:49,760 --> 00:46:50,960
the server

1273
00:46:50,960 --> 00:46:52,880
no knows an advanced

1274
00:46:52,880 --> 00:46:54,800
public key that's going to be used and

1275
00:46:54,800 --> 00:46:56,880
it explicitly includes that key in the

1276
00:46:56,880 --> 00:46:59,440
protocol so the server can't just say

1277
00:46:59,440 --> 00:47:01,599
yes to everybody so this offers a little

1278
00:47:01,599 --> 00:47:03,119
bit of a protection

1279
00:47:03,119 --> 00:47:06,240
against some sort of attacks

1280
00:47:06,640 --> 00:47:09,280
let's see so uh hopefully i have time to

1281
00:47:09,280 --> 00:47:10,800
give a bit of a

1282
00:47:10,800 --> 00:47:13,040
very high level technical overview

1283
00:47:13,040 --> 00:47:15,040
uh of how the protocol works it just has

1284
00:47:15,040 --> 00:47:16,880
two main components so the first

1285
00:47:16,880 --> 00:47:18,640
component is what we call

1286
00:47:18,640 --> 00:47:20,640
an anonymous multi-chem

1287
00:47:20,640 --> 00:47:21,839
so

1288
00:47:21,839 --> 00:47:23,280
basically you can think that the server

1289
00:47:23,280 --> 00:47:25,440
generates a ciphertext and it's

1290
00:47:25,440 --> 00:47:29,200
addressed to a set of public keys

1291
00:47:29,200 --> 00:47:30,319
and

1292
00:47:30,319 --> 00:47:32,160
the ciphertext is c

1293
00:47:32,160 --> 00:47:33,599
and

1294
00:47:33,599 --> 00:47:35,119
while generating that ciphertext the

1295
00:47:35,119 --> 00:47:36,720
server knows that

1296
00:47:36,720 --> 00:47:38,720
okay somebody who has

1297
00:47:38,720 --> 00:47:41,119
uh secret key j will decrypt this

1298
00:47:41,119 --> 00:47:43,440
message to message mj so the server

1299
00:47:43,440 --> 00:47:45,839
learns all these mj messages

1300
00:47:45,839 --> 00:47:47,839
um and we need the property that the

1301
00:47:47,839 --> 00:47:49,440
ciphertext c

1302
00:47:49,440 --> 00:47:51,839
hides the identity of these

1303
00:47:51,839 --> 00:47:53,680
public key recipients

1304
00:47:53,680 --> 00:47:55,200
so that means that anybody can decrypt

1305
00:47:55,200 --> 00:47:58,000
this cipher text and they might get a

1306
00:47:58,000 --> 00:47:59,520
dummy value but if they happen to have

1307
00:47:59,520 --> 00:48:01,359
one of the

1308
00:48:01,359 --> 00:48:03,680
one of these record recognized secret

1309
00:48:03,680 --> 00:48:06,000
keys they'll get one of the

1310
00:48:06,000 --> 00:48:08,640
plain text that the server has predicted

1311
00:48:08,640 --> 00:48:09,839
here

1312
00:48:09,839 --> 00:48:10,880
so

1313
00:48:10,880 --> 00:48:12,960
the server sends that cipher text over

1314
00:48:12,960 --> 00:48:15,200
to the client the client can decrypt

1315
00:48:15,200 --> 00:48:17,599
with all of its secret keys

1316
00:48:17,599 --> 00:48:19,920
and so now some of these decryptions are

1317
00:48:19,920 --> 00:48:20,960
equal to

1318
00:48:20,960 --> 00:48:22,720
the values that the

1319
00:48:22,720 --> 00:48:24,400
server already knows

1320
00:48:24,400 --> 00:48:26,160
and so to tell whether they have any in

1321
00:48:26,160 --> 00:48:27,839
common they use a private set

1322
00:48:27,839 --> 00:48:29,680
intersection protocol

1323
00:48:29,680 --> 00:48:30,640
so

1324
00:48:30,640 --> 00:48:32,319
in private set intersection each party

1325
00:48:32,319 --> 00:48:35,359
has a set of items and we use a variant

1326
00:48:35,359 --> 00:48:37,920
where the client learns the intersection

1327
00:48:37,920 --> 00:48:39,359
of the items

1328
00:48:39,359 --> 00:48:41,760
and the server only learns whether the

1329
00:48:41,760 --> 00:48:44,160
intersection was empty

1330
00:48:44,160 --> 00:48:45,920
so in this case if the server

1331
00:48:45,920 --> 00:48:47,520
learns that the intersection was not

1332
00:48:47,520 --> 00:48:48,480
empty

1333
00:48:48,480 --> 00:48:50,319
it means that the client must have been

1334
00:48:50,319 --> 00:48:52,000
able to decrypt

1335
00:48:52,000 --> 00:48:55,040
under one of these good secret keys and

1336
00:48:55,040 --> 00:48:56,640
that's all that's all the server needs

1337
00:48:56,640 --> 00:48:58,480
to know in order to

1338
00:48:58,480 --> 00:49:00,800
decide on whether to authorize this

1339
00:49:00,800 --> 00:49:03,280
connection

1340
00:49:03,280 --> 00:49:05,040
so from our technical contributions of

1341
00:49:05,040 --> 00:49:06,640
the paper maybe that's less interesting

1342
00:49:06,640 --> 00:49:08,079
to this audience but

1343
00:49:08,079 --> 00:49:11,520
we show how to generate this multichem

1344
00:49:11,520 --> 00:49:13,280
that simultaneously supports the

1345
00:49:13,280 --> 00:49:14,640
different

1346
00:49:14,640 --> 00:49:17,440
key flavors that are supported by ssh

1347
00:49:17,440 --> 00:49:19,280
um and we

1348
00:49:19,280 --> 00:49:21,119
uh

1349
00:49:21,119 --> 00:49:23,200
we do this new modification of private

1350
00:49:23,200 --> 00:49:26,079
set intersection um this this way of

1351
00:49:26,079 --> 00:49:27,359
proving that the intersection was not

1352
00:49:27,359 --> 00:49:29,119
empty is kind of a new thing and we show

1353
00:49:29,119 --> 00:49:30,880
how to add that to the state-of-the-art

1354
00:49:30,880 --> 00:49:34,400
uh psi protocol

1355
00:49:34,400 --> 00:49:37,040
and in the paper we have a full

1356
00:49:37,040 --> 00:49:39,680
uc security proof so this is a

1357
00:49:39,680 --> 00:49:42,640
composable security kind of the best

1358
00:49:42,640 --> 00:49:44,319
the best kind of security that we know

1359
00:49:44,319 --> 00:49:47,839
how to prove um for an interactive

1360
00:49:47,839 --> 00:49:50,240
protocol like this

1361
00:49:50,240 --> 00:49:51,839
okay so

1362
00:49:51,839 --> 00:49:54,400
finally i want to just mention uh

1363
00:49:54,400 --> 00:49:55,280
the

1364
00:49:55,280 --> 00:49:57,359
performance of this protocol

1365
00:49:57,359 --> 00:50:00,079
we implemented this as a extension of

1366
00:50:00,079 --> 00:50:02,720
open ssh

1367
00:50:02,720 --> 00:50:05,760
and it's quite practical so

1368
00:50:05,760 --> 00:50:07,680
i mentioned that the protocol supports

1369
00:50:07,680 --> 00:50:10,000
rsi keys and elliptic curve keys

1370
00:50:10,000 --> 00:50:11,680
simultaneously

1371
00:50:11,680 --> 00:50:14,160
but the rsa keys are much more expensive

1372
00:50:14,160 --> 00:50:17,200
so for the worst case let's look at

1373
00:50:17,200 --> 00:50:19,359
if all the keys are only rsa keys

1374
00:50:19,359 --> 00:50:20,960
that'll be the the worst case in terms

1375
00:50:20,960 --> 00:50:22,720
of performance and the best case in

1376
00:50:22,720 --> 00:50:24,800
terms of performance is if all of the

1377
00:50:24,800 --> 00:50:27,119
keys are just these elliptic curve keys

1378
00:50:27,119 --> 00:50:29,359
and there's really we didn't find any

1379
00:50:29,359 --> 00:50:32,480
difference between ec dsa and dsa

1380
00:50:32,480 --> 00:50:33,760
there's very little difference there so

1381
00:50:33,760 --> 00:50:36,319
i just lump them into one category as

1382
00:50:36,319 --> 00:50:38,400
elliptic curve keys

1383
00:50:38,400 --> 00:50:40,319
so in a realistic setting where the

1384
00:50:40,319 --> 00:50:42,480
client has five keys and the server has

1385
00:50:42,480 --> 00:50:44,480
ten keys i think that's a realistic

1386
00:50:44,480 --> 00:50:46,160
setting for a kind of a small github

1387
00:50:46,160 --> 00:50:49,119
repository let's say um even with

1388
00:50:49,119 --> 00:50:52,720
rsa keys 60 milliseconds and

1389
00:50:52,720 --> 00:50:54,800
with elliptic curve keys it's like

1390
00:50:54,800 --> 00:50:57,200
instantaneous nine milliseconds

1391
00:50:57,200 --> 00:50:59,680
um i mean nine milliseconds is not

1392
00:50:59,680 --> 00:51:01,359
instantaneous but for

1393
00:51:01,359 --> 00:51:03,359
uh authenticating a connection that's

1394
00:51:03,359 --> 00:51:05,440
that's pretty good

1395
00:51:05,440 --> 00:51:07,280
um a more extreme example would be the

1396
00:51:07,280 --> 00:51:09,760
server has 100 keys and the client has

1397
00:51:09,760 --> 00:51:11,280
20 keys that's like

1398
00:51:11,280 --> 00:51:14,079
you know a github power user connecting

1399
00:51:14,079 --> 00:51:16,800
to a really popular github repository

1400
00:51:16,800 --> 00:51:19,520
with 100 maintainers

1401
00:51:19,520 --> 00:51:21,760
even that is is still

1402
00:51:21,760 --> 00:51:23,839
i believe within the realm of uh

1403
00:51:23,839 --> 00:51:26,480
reasonableness for uh authenticating a

1404
00:51:26,480 --> 00:51:28,720
connection even with rsa keys

1405
00:51:28,720 --> 00:51:30,720
we try to take this to the extreme

1406
00:51:30,720 --> 00:51:33,520
and imagine a server with 1000 keys so

1407
00:51:33,520 --> 00:51:34,559
that's a

1408
00:51:34,559 --> 00:51:37,200
server that authorizes 1 000 different

1409
00:51:37,200 --> 00:51:39,760
public keys

1410
00:51:39,760 --> 00:51:41,440
to be able to connect

1411
00:51:41,440 --> 00:51:43,200
so with rsa keys that's a little slow

1412
00:51:43,200 --> 00:51:44,480
it's over a second but even with

1413
00:51:44,480 --> 00:51:46,319
elliptic curve keys

1414
00:51:46,319 --> 00:51:48,559
less than a quarter of a second so again

1415
00:51:48,559 --> 00:51:51,839
i think it's pretty reasonable

1416
00:51:51,839 --> 00:51:53,920
um so that's

1417
00:51:53,920 --> 00:51:55,440
that's all i have this is my last slide

1418
00:51:55,440 --> 00:51:57,119
it's just a summary of

1419
00:51:57,119 --> 00:51:58,960
uh of what we provide in this new

1420
00:51:58,960 --> 00:52:01,040
protocol

1421
00:52:01,040 --> 00:52:02,880
the protocol basically gives

1422
00:52:02,880 --> 00:52:05,200
the the minimal amount of information to

1423
00:52:05,200 --> 00:52:07,680
the server the server learns only

1424
00:52:07,680 --> 00:52:10,000
one bit of information that

1425
00:52:10,000 --> 00:52:11,280
it learns that the client has some

1426
00:52:11,280 --> 00:52:13,760
authorized key

1427
00:52:13,760 --> 00:52:15,520
so if you want more information i have a

1428
00:52:15,520 --> 00:52:17,040
link at the bottom it's the papers on

1429
00:52:17,040 --> 00:52:20,400
eprint and uh i'll be happy to take time

1430
00:52:20,400 --> 00:52:23,119
for questions

1431
00:52:23,839 --> 00:52:26,880
um i see a question in the chat from uh

1432
00:52:26,880 --> 00:52:28,160
from chris p

1433
00:52:28,160 --> 00:52:29,280
um

1434
00:52:29,280 --> 00:52:31,119
concrete performance this was like total

1435
00:52:31,119 --> 00:52:33,520
round trip time um

1436
00:52:33,520 --> 00:52:34,960
so from the from the client's

1437
00:52:34,960 --> 00:52:37,440
perspective from the time you say i want

1438
00:52:37,440 --> 00:52:40,240
to connect to the server um

1439
00:52:40,240 --> 00:52:42,480
it includes the tcp setup as well i

1440
00:52:42,480 --> 00:52:43,440
think

1441
00:52:43,440 --> 00:52:44,960
but these were

1442
00:52:44,960 --> 00:52:48,160
two two servers on the same lan um

1443
00:52:48,160 --> 00:52:51,040
so the time from saying connect to the

1444
00:52:51,040 --> 00:52:53,599
time that we can send the first

1445
00:52:53,599 --> 00:52:55,119
uh

1446
00:52:55,119 --> 00:53:00,359
application command to the ssh server

1447
00:53:04,160 --> 00:53:06,960
might not be on

1448
00:53:07,760 --> 00:53:09,520
yeah if there's a question

1449
00:53:09,520 --> 00:53:11,440
when when in doubt turn the microphone

1450
00:53:11,440 --> 00:53:12,400
on

1451
00:53:12,400 --> 00:53:14,079
uh this is daniel kahn gilmore from the

1452
00:53:14,079 --> 00:53:16,000
aclu thanks for this presentation thanks

1453
00:53:16,000 --> 00:53:17,680
for working on this um this has been a

1454
00:53:17,680 --> 00:53:20,800
long-standing feature of the ssh

1455
00:53:20,800 --> 00:53:23,119
protocol or or bug depending on your

1456
00:53:23,119 --> 00:53:24,400
perspective

1457
00:53:24,400 --> 00:53:25,680
have you thought about how you would

1458
00:53:25,680 --> 00:53:27,599
apply this to

1459
00:53:27,599 --> 00:53:28,559
um

1460
00:53:28,559 --> 00:53:31,119
common patterns right now like the git

1461
00:53:31,119 --> 00:53:34,400
based forges github git lab etc

1462
00:53:34,400 --> 00:53:37,040
that have everyone using one account

1463
00:53:37,040 --> 00:53:38,400
everyone you know if you if you

1464
00:53:38,400 --> 00:53:40,839
configure ssh to get github it's git at

1465
00:53:40,839 --> 00:53:43,680
github yes and then your ssh key is what

1466
00:53:43,680 --> 00:53:45,520
does the split so they need to know what

1467
00:53:45,520 --> 00:53:46,960
it is to make that work have you thought

1468
00:53:46,960 --> 00:53:48,880
about how to apply this there or do you

1469
00:53:48,880 --> 00:53:50,640
have to change your pattern

1470
00:53:50,640 --> 00:53:52,880
yeah that's a great observation um we do

1471
00:53:52,880 --> 00:53:54,160
have a section in the paper where we

1472
00:53:54,160 --> 00:53:56,880
talk about github as the most obvious

1473
00:53:56,880 --> 00:53:58,559
application of ssh

1474
00:53:58,559 --> 00:53:59,839
so

1475
00:53:59,839 --> 00:54:02,240
it's true that uh at the time that you

1476
00:54:02,240 --> 00:54:04,000
run the protocol

1477
00:54:04,000 --> 00:54:06,000
um let's see

1478
00:54:06,000 --> 00:54:07,040
if i can

1479
00:54:07,040 --> 00:54:08,400
illustrate with the picture it's easier

1480
00:54:08,400 --> 00:54:09,359
for me

1481
00:54:09,359 --> 00:54:10,800
at the time you run the authentication

1482
00:54:10,800 --> 00:54:12,480
protocol the server has to know which

1483
00:54:12,480 --> 00:54:14,079
keys are authorized

1484
00:54:14,079 --> 00:54:16,240
and if the server only knows that

1485
00:54:16,240 --> 00:54:17,920
some github user is connecting to some

1486
00:54:17,920 --> 00:54:19,440
repository that's not quite enough

1487
00:54:19,440 --> 00:54:21,359
information so

1488
00:54:21,359 --> 00:54:25,040
it turns out in the in the ssh flow um

1489
00:54:25,040 --> 00:54:26,720
the client says i want to authenticate

1490
00:54:26,720 --> 00:54:28,400
to this user so

1491
00:54:28,400 --> 00:54:30,079
in github it's i want to authenticate as

1492
00:54:30,079 --> 00:54:32,400
git at github.com

1493
00:54:32,400 --> 00:54:35,520
and then the authentication begins so

1494
00:54:35,520 --> 00:54:37,280
so there is a place in the ssh flow

1495
00:54:37,280 --> 00:54:38,480
where you can say

1496
00:54:38,480 --> 00:54:40,400
maybe it's i want to authenticate as

1497
00:54:40,400 --> 00:54:43,119
repository name at github.com

1498
00:54:43,119 --> 00:54:44,799
the server sees repository name and it

1499
00:54:44,799 --> 00:54:46,799
goes to see which of the keys are

1500
00:54:46,799 --> 00:54:48,319
authorized

1501
00:54:48,319 --> 00:54:50,079
so it would work if you could make that

1502
00:54:50,079 --> 00:54:53,680
change to the github flow

1503
00:54:53,680 --> 00:54:55,359
and of course if if you wanted to

1504
00:54:55,359 --> 00:54:57,280
support this as a optional thing you

1505
00:54:57,280 --> 00:54:58,319
could

1506
00:54:58,319 --> 00:55:01,799
it would be like repositoryname

1507
00:55:01,799 --> 00:55:04,240
new.github.com or something so by

1508
00:55:04,240 --> 00:55:06,160
connecting to new.github.com you would

1509
00:55:06,160 --> 00:55:07,359
signal that you want to use this new

1510
00:55:07,359 --> 00:55:09,200
authentication protocol

1511
00:55:09,200 --> 00:55:10,319
and then the username would be the

1512
00:55:10,319 --> 00:55:12,480
repository name um

1513
00:55:12,480 --> 00:55:14,240
and that that's how we envision it's

1514
00:55:14,240 --> 00:55:15,760
working but yeah it would require some

1515
00:55:15,760 --> 00:55:19,240
changes for sure

1516
00:55:20,079 --> 00:55:21,599
all right and there's one more quick

1517
00:55:21,599 --> 00:55:24,000
question in chat um

1518
00:55:24,000 --> 00:55:25,599
if it's would you like me to take one's

1519
00:55:25,599 --> 00:55:27,119
a quick answer

1520
00:55:27,119 --> 00:55:29,359
uh if it's a quick answer we can answer

1521
00:55:29,359 --> 00:55:30,799
it now if not then we can take it

1522
00:55:30,799 --> 00:55:31,839
offline

1523
00:55:31,839 --> 00:55:33,200
uh different configuration and

1524
00:55:33,200 --> 00:55:35,839
constraints server side i don't i don't

1525
00:55:35,839 --> 00:55:38,720
think i completely understand um

1526
00:55:38,720 --> 00:55:40,319
what this person means by configuration

1527
00:55:40,319 --> 00:55:41,440
constraints maybe we'll take that

1528
00:55:41,440 --> 00:55:44,079
offline and i'll ask for a clarification

1529
00:55:44,079 --> 00:55:46,880
okay sounds great thank you mike

1530
00:55:46,880 --> 00:55:49,839
thanks

1531
00:55:50,720 --> 00:55:52,720
all right i guess the last presentation

1532
00:55:52,720 --> 00:55:56,118
is from mallory

1533
00:56:12,880 --> 00:56:15,359
all right this will be really quick

1534
00:56:15,359 --> 00:56:17,200
this is a draft that

1535
00:56:17,200 --> 00:56:19,760
is has been adopted by the working group

1536
00:56:19,760 --> 00:56:22,240
um and so i'm here to give you a really

1537
00:56:22,240 --> 00:56:23,760
short presentation about why i think we

1538
00:56:23,760 --> 00:56:25,280
should keep working on it but i'd like

1539
00:56:25,280 --> 00:56:28,400
some help so next slide

1540
00:56:28,400 --> 00:56:32,000
um this is just a draft of what this um

1541
00:56:32,000 --> 00:56:34,400
this sorry this is just a summary of the

1542
00:56:34,400 --> 00:56:35,839
table of contents for what this draft

1543
00:56:35,839 --> 00:56:36,640
does

1544
00:56:36,640 --> 00:56:38,000
um so

1545
00:56:38,000 --> 00:56:38,880
in

1546
00:56:38,880 --> 00:56:41,599
trying to define what is safe

1547
00:56:41,599 --> 00:56:43,119
internet measurement

1548
00:56:43,119 --> 00:56:45,680
um i think the focus on consent

1549
00:56:45,680 --> 00:56:48,000
is good i did a bit of a

1550
00:56:48,000 --> 00:56:50,319
rework on the table of contents so

1551
00:56:50,319 --> 00:56:53,040
rather than um putting case studies for

1552
00:56:53,040 --> 00:56:55,680
each of these um versions of consent

1553
00:56:55,680 --> 00:56:57,680
they're now just kind of subsumed into

1554
00:56:57,680 --> 00:56:59,040
their

1555
00:56:59,040 --> 00:57:02,160
sub sections on informed consent proxy

1556
00:57:02,160 --> 00:57:04,960
consent and implied consent and then

1557
00:57:04,960 --> 00:57:06,400
there's a long

1558
00:57:06,400 --> 00:57:09,119
but maybe not exhaustive list of safety

1559
00:57:09,119 --> 00:57:11,119
considerations because it is about safe

1560
00:57:11,119 --> 00:57:13,200
internet measurement um

1561
00:57:13,200 --> 00:57:15,760
and i'm pretty happy

1562
00:57:15,760 --> 00:57:16,960
with

1563
00:57:16,960 --> 00:57:19,280
that list as it is right now

1564
00:57:19,280 --> 00:57:21,359
um but always there could be things that

1565
00:57:21,359 --> 00:57:23,520
are missing from it um and then there's

1566
00:57:23,520 --> 00:57:26,000
a final section on

1567
00:57:26,000 --> 00:57:27,359
risk analysis

1568
00:57:27,359 --> 00:57:31,040
uh so next slide please

1569
00:57:31,040 --> 00:57:32,160
um

1570
00:57:32,160 --> 00:57:35,280
there are quite a few open issues uh

1571
00:57:35,280 --> 00:57:38,160
mostly because the original author ian

1572
00:57:38,160 --> 00:57:41,280
um leermath who has done the vast

1573
00:57:41,280 --> 00:57:43,280
majority of the work um already put

1574
00:57:43,280 --> 00:57:45,280
those issues in there they have not all

1575
00:57:45,280 --> 00:57:46,960
been solved but mostly they're quite

1576
00:57:46,960 --> 00:57:48,480
low-hanging fruit in terms of he's

1577
00:57:48,480 --> 00:57:50,559
identified some really good citations

1578
00:57:50,559 --> 00:57:52,079
that are within scope of the document

1579
00:57:52,079 --> 00:57:54,400
they just need to be elaborated within

1580
00:57:54,400 --> 00:57:55,680
the structure

1581
00:57:55,680 --> 00:57:59,119
and um here's a sort of short list of

1582
00:57:59,119 --> 00:58:01,520
those six open issues you can see right

1583
00:58:01,520 --> 00:58:05,040
there there they're pretty obvious

1584
00:58:05,760 --> 00:58:09,319
next slide please

1585
00:58:09,520 --> 00:58:12,000
then i think so um

1586
00:58:12,000 --> 00:58:14,480
yeah there's a really basic update to

1587
00:58:14,480 --> 00:58:16,240
this which i think makes the structure a

1588
00:58:16,240 --> 00:58:18,640
little bit more straightforward um

1589
00:58:18,640 --> 00:58:21,119
i'm going to also plan to send a message

1590
00:58:21,119 --> 00:58:23,200
to the perigee list for those that

1591
00:58:23,200 --> 00:58:24,960
aren't here or participating online in

1592
00:58:24,960 --> 00:58:28,160
this meeting to get more feedback on

1593
00:58:28,160 --> 00:58:30,079
folks who might be interested in

1594
00:58:30,079 --> 00:58:32,559
suggesting text for the open issues or

1595
00:58:32,559 --> 00:58:34,319
reviewing the current version to make

1596
00:58:34,319 --> 00:58:36,400
sure i think i have two questions about

1597
00:58:36,400 --> 00:58:38,799
review at this stage one is the table of

1598
00:58:38,799 --> 00:58:42,559
contents um complete so far and then two

1599
00:58:42,559 --> 00:58:45,599
if there are definitely missing sections

1600
00:58:45,599 --> 00:58:48,799
um that we already know about um but the

1601
00:58:48,799 --> 00:58:51,040
one the last thing i'll say before maybe

1602
00:58:51,040 --> 00:58:52,160
people have comments or want to

1603
00:58:52,160 --> 00:58:55,280
volunteer to help um it's just that you

1604
00:58:55,280 --> 00:58:58,079
might have seen the iab announce a

1605
00:58:58,079 --> 00:59:01,680
workshop coming up um like q4 i guess

1606
00:59:01,680 --> 00:59:05,040
it's it's slated for

1607
00:59:05,040 --> 00:59:08,000
late october and submissions for papers

1608
00:59:08,000 --> 00:59:09,119
are due

1609
00:59:09,119 --> 00:59:10,559
i think at the end of august or early

1610
00:59:10,559 --> 00:59:13,119
september but it's on measurement

1611
00:59:13,119 --> 00:59:15,440
techniques in encrypted networks which i

1612
00:59:15,440 --> 00:59:16,240
think

1613
00:59:16,240 --> 00:59:17,040
is

1614
00:59:17,040 --> 00:59:19,839
um a place where we could present this

1615
00:59:19,839 --> 00:59:22,000
draft and whatever version it's in

1616
00:59:22,000 --> 00:59:24,000
and get a bit more feedback from folks

1617
00:59:24,000 --> 00:59:25,839
who are also thinking about these issues

1618
00:59:25,839 --> 00:59:27,839
it's the workshop i think turns the

1619
00:59:27,839 --> 00:59:29,440
concept on its head a little bit because

1620
00:59:29,440 --> 00:59:30,880
what it's trying to do

1621
00:59:30,880 --> 00:59:33,359
is um you know make

1622
00:59:33,359 --> 00:59:34,960
uh network measurement a little bit

1623
00:59:34,960 --> 00:59:36,400
easier or try to solve some of the

1624
00:59:36,400 --> 00:59:38,160
sticky issues with network management

1625
00:59:38,160 --> 00:59:40,480
and encrypted environments um and this

1626
00:59:40,480 --> 00:59:42,720
draft is sort of coming at it from like

1627
00:59:42,720 --> 00:59:44,319
from a safety and privacy perspective

1628
00:59:44,319 --> 00:59:46,240
you want

1629
00:59:46,240 --> 00:59:50,319
to make that measurement safe

1630
00:59:50,319 --> 00:59:52,400
if that makes sense anyone have any

1631
00:59:52,400 --> 00:59:54,319
questions or

1632
00:59:54,319 --> 00:59:56,240
so my plan is to continue to work on

1633
00:59:56,240 --> 00:59:57,599
this

1634
00:59:57,599 --> 01:00:01,760
submit a paper to this workshop and then

1635
01:00:01,760 --> 01:00:03,520
get feedback from there as well as on

1636
01:00:03,520 --> 01:00:07,599
the list from all of you folks

1637
01:00:08,640 --> 01:00:11,520
comments or questions

1638
01:00:13,200 --> 01:00:14,079
it doesn't look like there's any

1639
01:00:14,079 --> 01:00:15,760
questions but one recommendation now

1640
01:00:15,760 --> 01:00:17,599
that the ietf is working on privacy

1641
01:00:17,599 --> 01:00:19,200
preserving measurement um that's

1642
01:00:19,200 --> 01:00:20,240
certainly a group that will probably

1643
01:00:20,240 --> 01:00:21,760
need some guidance in terms of how to

1644
01:00:21,760 --> 01:00:23,680
use the systems they're developing

1645
01:00:23,680 --> 01:00:26,160
uh adap specifically so i wonder uh to

1646
01:00:26,160 --> 01:00:28,319
what extent you know either this

1647
01:00:28,319 --> 01:00:30,160
document would benefit from the work

1648
01:00:30,160 --> 01:00:31,760
that that group's doing or that would

1649
01:00:31,760 --> 01:00:32,960
benefit from the work that's being

1650
01:00:32,960 --> 01:00:34,079
developed here but it seems like there's

1651
01:00:34,079 --> 01:00:35,440
some cross-pollination that should be

1652
01:00:35,440 --> 01:00:36,559
happening

1653
01:00:36,559 --> 01:00:37,760
um

1654
01:00:37,760 --> 01:00:39,920
as we move forward i think you're making

1655
01:00:39,920 --> 01:00:41,040
a really good point and if there's

1656
01:00:41,040 --> 01:00:43,599
anybody who actually has a viewpoint on

1657
01:00:43,599 --> 01:00:45,599
how this draft should fit in with that

1658
01:00:45,599 --> 01:00:47,520
work especially those who are involved

1659
01:00:47,520 --> 01:00:48,880
in ppm

1660
01:00:48,880 --> 01:00:51,359
i really love to know that now or we can

1661
01:00:51,359 --> 01:00:53,040
talk in the hallway or at some point in

1662
01:00:53,040 --> 01:00:54,960
the future but because i think the idea

1663
01:00:54,960 --> 01:00:57,280
is that this would maybe be um

1664
01:00:57,280 --> 01:00:59,200
this this draft because it's in the irtf

1665
01:00:59,200 --> 01:01:00,640
especially would kind of be making a

1666
01:01:00,640 --> 01:01:04,400
broader um sort of um approach to the

1667
01:01:04,400 --> 01:01:06,640
issue and then ppm would maybe then yeah

1668
01:01:06,640 --> 01:01:10,960
as you say sort of take advice from it

1669
01:01:12,079 --> 01:01:13,200
okay

1670
01:01:13,200 --> 01:01:16,079
thanks yeah no go ahead

1671
01:01:16,079 --> 01:01:20,160
i think we're good to wrap up just one

1672
01:01:20,160 --> 01:01:22,720
i guess note that draft censorship just

1673
01:01:22,720 --> 01:01:25,200
cleared last call so we will finally

1674
01:01:25,200 --> 01:01:27,520
have an rfc soon maybe hopefully after

1675
01:01:27,520 --> 01:01:29,680
seven years

1676
01:01:29,680 --> 01:01:31,520
but yeah thanks all for coming and see

1677
01:01:31,520 --> 01:01:34,839
you next time

1678
01:02:05,839 --> 01:02:08,839
okay

1679
01:02:23,119 --> 01:02:26,119
foreign

1680
01:03:04,480 --> 01:03:07,480
okay

1681
01:03:21,520 --> 01:03:24,680
thank you

1682
01:03:54,290 --> 01:03:57,340
[Music]

1683
01:04:38,079 --> 01:04:40,960
we'll know very quickly

