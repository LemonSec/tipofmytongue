1
00:00:10,160 --> 00:00:12,400
okay

2
00:00:15,440 --> 00:00:17,359
welcome everyone um

3
00:00:17,359 --> 00:00:18,400
to

4
00:00:18,400 --> 00:00:19,840
oathwork group

5
00:00:19,840 --> 00:00:23,359
um at iatf 114 in philadelphia

6
00:00:23,359 --> 00:00:25,599
so let's get going we have packed agenda

7
00:00:25,599 --> 00:00:27,039
so

8
00:00:27,039 --> 00:00:28,800
this is the not well

9
00:00:28,800 --> 00:00:30,560
please make sure you're you understand

10
00:00:30,560 --> 00:00:32,479
this this governs everything that we do

11
00:00:32,479 --> 00:00:34,079
here at the ietf so make sure we

12
00:00:34,079 --> 00:00:36,719
understand what's going on there

13
00:00:36,719 --> 00:00:38,320
so we have the

14
00:00:38,320 --> 00:00:39,520
um

15
00:00:39,520 --> 00:00:42,239
one official session today this this

16
00:00:42,239 --> 00:00:43,920
this is the one we don't have another

17
00:00:43,920 --> 00:00:46,559
one as typically we do

18
00:00:46,559 --> 00:00:49,840
but this time only one official session

19
00:00:49,840 --> 00:00:53,440
but we have three side meeting sessions

20
00:00:53,440 --> 00:00:56,239
so the first one tuesday tomorrow

21
00:00:56,239 --> 00:00:59,600
at 10 the second one in wednesday at 10

22
00:00:59,600 --> 00:01:02,800
and the third one is thursday at two all

23
00:01:02,800 --> 00:01:05,438
of them philadelphia south which is just

24
00:01:05,438 --> 00:01:08,000
that the room across here

25
00:01:08,000 --> 00:01:10,640
on the other side

26
00:01:10,640 --> 00:01:13,920
a quick workgroup update uh

27
00:01:13,920 --> 00:01:14,720
um

28
00:01:14,720 --> 00:01:17,040
we request

29
00:01:17,040 --> 00:01:20,560
rfc in 9207 was a published

30
00:01:20,560 --> 00:01:23,600
so congratulations to daniel and and

31
00:01:23,600 --> 00:01:25,280
co-author

32
00:01:25,280 --> 00:01:27,840
um

33
00:01:30,079 --> 00:01:34,000
um rfc editor queue has that a jwk

34
00:01:34,000 --> 00:01:36,799
thumbprint uri and

35
00:01:36,799 --> 00:01:39,200
a jwt response

36
00:01:39,200 --> 00:01:42,399
for a token introspection

37
00:01:42,399 --> 00:01:45,119
and we requested the the publication for

38
00:01:45,119 --> 00:01:46,479
there are documents rich of

39
00:01:46,479 --> 00:01:48,240
authorization requests

40
00:01:48,240 --> 00:01:49,280
um

41
00:01:49,280 --> 00:01:51,360
roman is not here he's gonna be in and

42
00:01:51,360 --> 00:01:52,560
out but

43
00:01:52,560 --> 00:01:54,560
he's aware of it and he's gonna work on

44
00:01:54,560 --> 00:01:56,640
it

45
00:01:57,360 --> 00:01:59,840
okay we have packed agenda as you know a

46
00:01:59,840 --> 00:02:01,759
step-up authentication victoria and

47
00:02:01,759 --> 00:02:03,360
brian will talk about this

48
00:02:03,360 --> 00:02:06,159
selective disclosure jot daniel and

49
00:02:06,159 --> 00:02:07,840
christina will talk about this for 20

50
00:02:07,840 --> 00:02:09,280
minutes

51
00:02:09,280 --> 00:02:13,040
and then daniel give us a quick um

52
00:02:13,040 --> 00:02:15,200
update on security bcp

53
00:02:15,200 --> 00:02:17,680
um and we'll talk about 2.1 and

54
00:02:17,680 --> 00:02:19,840
browser-based apps

55
00:02:19,840 --> 00:02:21,520
i will be talking about multi-subject

56
00:02:21,520 --> 00:02:22,400
chat

57
00:02:22,400 --> 00:02:24,239
um hersh will be talking about talking

58
00:02:24,239 --> 00:02:25,840
theft

59
00:02:25,840 --> 00:02:28,080
kelly will be talking about token and

60
00:02:28,080 --> 00:02:29,760
identity chaining

61
00:02:29,760 --> 00:02:32,160
and the a tool will

62
00:02:32,160 --> 00:02:34,000
wrap it up with the rpc security

63
00:02:34,000 --> 00:02:36,640
standard as you can see the time

64
00:02:36,640 --> 00:02:39,760
allocated for each topic is really short

65
00:02:39,760 --> 00:02:41,920
because we have really long list of

66
00:02:41,920 --> 00:02:43,280
topics

67
00:02:43,280 --> 00:02:45,120
if we need to dig deeper into any of

68
00:02:45,120 --> 00:02:46,959
those topics we will dig deeper into

69
00:02:46,959 --> 00:02:48,879
those on the side meetings right so

70
00:02:48,879 --> 00:02:51,040
based on what happened right now will

71
00:02:51,040 --> 00:02:55,280
kind of adjust the side meeting agenda

72
00:02:55,280 --> 00:02:57,760
so side meetings uh

73
00:02:57,760 --> 00:02:59,680
the main topic one of the main topics

74
00:02:59,680 --> 00:03:02,400
the deepap shepard open issues

75
00:03:02,400 --> 00:03:04,319
we're trying to push this forward and

76
00:03:04,319 --> 00:03:06,400
finish it so there are a few few open

77
00:03:06,400 --> 00:03:07,519
issues

78
00:03:07,519 --> 00:03:09,680
as part of the shepard's review and then

79
00:03:09,680 --> 00:03:11,280
brian will walk us through this and

80
00:03:11,280 --> 00:03:12,400
hopefully we can

81
00:03:12,400 --> 00:03:15,040
adapt those this up soon

82
00:03:15,040 --> 00:03:18,040
um

83
00:03:19,280 --> 00:03:21,840
uh conformist tests and sdks daniel and

84
00:03:21,840 --> 00:03:23,440
joseph will have will have a discussion

85
00:03:23,440 --> 00:03:25,519
around this if there's we're attempting

86
00:03:25,519 --> 00:03:26,400
to

87
00:03:26,400 --> 00:03:28,400
do something about this

88
00:03:28,400 --> 00:03:30,640
again as i mentioned we we have we

89
00:03:30,640 --> 00:03:32,400
probably have some deep dive into some

90
00:03:32,400 --> 00:03:34,080
of those say topics that we discussed

91
00:03:34,080 --> 00:03:35,519
today

92
00:03:35,519 --> 00:03:37,280
um we want to have a few open

93
00:03:37,280 --> 00:03:39,200
discussions around a

94
00:03:39,200 --> 00:03:41,840
few topics for example do we need a new

95
00:03:41,840 --> 00:03:44,400
rfc to for for a job

96
00:03:44,400 --> 00:03:46,400
to update the jot based on

97
00:03:46,400 --> 00:03:49,280
our experience so far um brian did a

98
00:03:49,280 --> 00:03:51,760
fantastic presentation during game

99
00:03:51,760 --> 00:03:53,200
identiverse

100
00:03:53,200 --> 00:03:55,519
and i think we have lots of lessons

101
00:03:55,519 --> 00:03:58,239
learned from that so maybe it's time for

102
00:03:58,239 --> 00:04:01,519
a new rfc when i discuss post quantum

103
00:04:01,519 --> 00:04:05,120
tool um so just open discussion and any

104
00:04:05,120 --> 00:04:06,959
any thoughts about this what could be

105
00:04:06,959 --> 00:04:08,879
done here

106
00:04:08,879 --> 00:04:11,360
and there is some uh issues around oauth

107
00:04:11,360 --> 00:04:13,599
work group perception and some some

108
00:04:13,599 --> 00:04:17,199
people find that welfare group to be not

109
00:04:17,199 --> 00:04:20,478
easy to deal with so i would like us to

110
00:04:20,478 --> 00:04:22,639
kind of have a discussion and see how we

111
00:04:22,639 --> 00:04:23,919
can be

112
00:04:23,919 --> 00:04:25,759
a bit more welcoming and and

113
00:04:25,759 --> 00:04:27,919
accommodating for for people that are

114
00:04:27,919 --> 00:04:29,919
not from the

115
00:04:29,919 --> 00:04:32,320
close tight kind of

116
00:04:32,320 --> 00:04:34,400
group that that typically attends the

117
00:04:34,400 --> 00:04:35,360
meeting

118
00:04:35,360 --> 00:04:37,280
so that's it

119
00:04:37,280 --> 00:04:38,320
for me

120
00:04:38,320 --> 00:04:39,199
any

121
00:04:39,199 --> 00:04:41,759
questions comments

122
00:04:41,759 --> 00:04:43,919
if not i will ask vittorio to come to

123
00:04:43,919 --> 00:04:47,320
the mic here

124
00:05:06,320 --> 00:05:08,320
it's too complicated i just like to be

125
00:05:08,320 --> 00:05:10,080
rate you and ask you to move slides for

126
00:05:10,080 --> 00:05:10,880
me

127
00:05:10,880 --> 00:05:12,560
will you be so kind

128
00:05:12,560 --> 00:05:14,320
sure thank you

129
00:05:14,320 --> 00:05:15,360
all right

130
00:05:15,360 --> 00:05:16,960
good morning

131
00:05:16,960 --> 00:05:19,198
um

132
00:05:19,440 --> 00:05:23,039
in 10 minutes i'll try to update you on

133
00:05:23,039 --> 00:05:25,199
the work that we've been doing with the

134
00:05:25,199 --> 00:05:27,120
off step up authentication challenge

135
00:05:27,120 --> 00:05:29,039
protocol with brian

136
00:05:29,039 --> 00:05:31,759
can i have a next slide please

137
00:05:31,759 --> 00:05:34,800
all right agenda is ultra fast i'm going

138
00:05:34,800 --> 00:05:36,000
to

139
00:05:36,000 --> 00:05:38,960
refresh for you what we mean by step up

140
00:05:38,960 --> 00:05:40,160
and what's the scenario we're trying to

141
00:05:40,160 --> 00:05:41,120
solve

142
00:05:41,120 --> 00:05:43,360
their proposal that we have

143
00:05:43,360 --> 00:05:45,440
i'll give you an update on what we

144
00:05:45,440 --> 00:05:47,520
changed since the last time we met in

145
00:05:47,520 --> 00:05:49,360
similar circumstances and then i

146
00:05:49,360 --> 00:05:51,520
mentioned some of the discussion items

147
00:05:51,520 --> 00:05:54,880
as rifat mentioned we will probably have

148
00:05:54,880 --> 00:05:57,360
to deal with the q a

149
00:05:57,360 --> 00:06:00,000
in the uh extended meetings because i

150
00:06:00,000 --> 00:06:01,919
just don't have enough time

151
00:06:01,919 --> 00:06:04,799
all right thank you

152
00:06:05,199 --> 00:06:08,400
so resource servers can

153
00:06:08,400 --> 00:06:11,039
rejective tokens which allegedly are

154
00:06:11,039 --> 00:06:13,840
still valid for many many reasons but

155
00:06:13,840 --> 00:06:16,560
typically they will have a

156
00:06:16,560 --> 00:06:19,280
black box like risk engines that

157
00:06:19,280 --> 00:06:22,319
evaluate that that particular token is

158
00:06:22,319 --> 00:06:24,479
not enough for the operation that is

159
00:06:24,479 --> 00:06:26,880
being attempted or uh

160
00:06:26,880 --> 00:06:29,440
there might be things in the call in

161
00:06:29,440 --> 00:06:32,639
itself so beyond the token that calls

162
00:06:32,639 --> 00:06:33,680
for

163
00:06:33,680 --> 00:06:36,240
different circumstances like for example

164
00:06:36,240 --> 00:06:38,479
uh i'm trying to buy an item which is

165
00:06:38,479 --> 00:06:41,759
very pricey and it would be better for a

166
00:06:41,759 --> 00:06:43,520
very sour server if the token would have

167
00:06:43,520 --> 00:06:46,479
been obtained using a higher level of

168
00:06:46,479 --> 00:06:51,039
authentication am i speaking too fast

169
00:06:51,120 --> 00:06:53,360
yes no maybe i'm just trying to stay in

170
00:06:53,360 --> 00:06:57,039
within minutes okay so and typically in

171
00:06:57,039 --> 00:06:59,199
fact what the resource server wants when

172
00:06:59,199 --> 00:07:01,919
they reject the token is a fresher token

173
00:07:01,919 --> 00:07:03,919
or a token that was obtained with a

174
00:07:03,919 --> 00:07:04,960
different

175
00:07:04,960 --> 00:07:08,080
usually higher authentication level

176
00:07:08,080 --> 00:07:10,639
and today there is no guidance for the

177
00:07:10,639 --> 00:07:13,039
resource server to tell the client of a

178
00:07:13,039 --> 00:07:15,759
reason for which they don't want such a

179
00:07:15,759 --> 00:07:18,639
token and there is also no

180
00:07:18,639 --> 00:07:21,039
in off guidance for the client to

181
00:07:21,039 --> 00:07:23,520
communicate to the authorization server

182
00:07:23,520 --> 00:07:26,479
uh that they want something different

183
00:07:26,479 --> 00:07:27,919
next slide please

184
00:07:27,919 --> 00:07:30,720
so our proposal is ultra simple we're

185
00:07:30,720 --> 00:07:32,800
just extending the collection of error

186
00:07:32,800 --> 00:07:36,319
codes in 1650 with the new code which is

187
00:07:36,319 --> 00:07:38,960
insufficient user authentication

188
00:07:38,960 --> 00:07:40,960
and in the corresponding header we

189
00:07:40,960 --> 00:07:43,919
propose to send back from the resource

190
00:07:43,919 --> 00:07:45,599
server to the client

191
00:07:45,599 --> 00:07:48,560
parameters that are already defined in

192
00:07:48,560 --> 00:07:51,840
openly connect acr values and max age

193
00:07:51,840 --> 00:07:53,599
which basically allow the resource

194
00:07:53,599 --> 00:07:56,240
server to ask for particular

195
00:07:56,240 --> 00:07:58,319
authentication levels or a certain

196
00:07:58,319 --> 00:08:00,479
fractions of a token

197
00:08:00,479 --> 00:08:03,520
and um and then given that we already

198
00:08:03,520 --> 00:08:06,000
have these uh in exitability access

199
00:08:06,000 --> 00:08:07,440
tokens

200
00:08:07,440 --> 00:08:09,759
we want to be able to embed in the

201
00:08:09,759 --> 00:08:11,599
tokens the indication of the

202
00:08:11,599 --> 00:08:13,599
authentication levels that have been

203
00:08:13,599 --> 00:08:17,199
used for obtaining such a token and we

204
00:08:17,199 --> 00:08:19,360
we have already visited vegetability

205
00:08:19,360 --> 00:08:21,919
access token profile we want to add visa

206
00:08:21,919 --> 00:08:25,479
to introspection

207
00:08:26,000 --> 00:08:27,840
and here there is a

208
00:08:27,840 --> 00:08:30,160
ultra complicated back and forth in the

209
00:08:30,160 --> 00:08:32,559
past you got the animated version if you

210
00:08:32,559 --> 00:08:34,399
want you can get the recording from the

211
00:08:34,399 --> 00:08:36,320
last time here don't have time to do

212
00:08:36,320 --> 00:08:37,360
this but

213
00:08:37,360 --> 00:08:40,320
super high level basically you just have

214
00:08:40,320 --> 00:08:42,479
the client that he's a resource server

215
00:08:42,479 --> 00:08:45,200
using a token which you cannot read but

216
00:08:45,200 --> 00:08:47,120
it doesn't have acr

217
00:08:47,120 --> 00:08:48,320
um

218
00:08:48,320 --> 00:08:50,880
then the resource server replies with a

219
00:08:50,880 --> 00:08:52,800
new error code insufficient of

220
00:08:52,800 --> 00:08:54,959
educational user authentication and

221
00:08:54,959 --> 00:08:57,279
includes in this particular example the

222
00:08:57,279 --> 00:08:59,680
desire the acr value we could have

223
00:08:59,680 --> 00:09:02,320
included in a max age as well but we

224
00:09:02,320 --> 00:09:03,680
didn't

225
00:09:03,680 --> 00:09:05,360
this is just one example

226
00:09:05,360 --> 00:09:08,320
then the client gets these parameter and

227
00:09:08,320 --> 00:09:10,640
goes back in lag free to the

228
00:09:10,640 --> 00:09:13,600
authorization server repeats the request

229
00:09:13,600 --> 00:09:16,000
for an access token and includes the

230
00:09:16,000 --> 00:09:18,320
desired acr

231
00:09:18,320 --> 00:09:20,800
presumably the authorization server does

232
00:09:20,800 --> 00:09:23,360
whatever is necessary to meet that acr

233
00:09:23,360 --> 00:09:25,680
level then sends back a new token and

234
00:09:25,680 --> 00:09:28,800
then in lag five you actually send the

235
00:09:28,800 --> 00:09:30,640
new token as you can see there is a

236
00:09:30,640 --> 00:09:33,760
little red thingy that red thingy is

237
00:09:33,760 --> 00:09:36,640
the new acr and then

238
00:09:36,640 --> 00:09:39,279
happy ending we get to 200.

239
00:09:39,279 --> 00:09:42,800
so that is the substance of our

240
00:09:42,800 --> 00:09:45,359
proposal

241
00:09:45,519 --> 00:09:46,640
and

242
00:09:46,640 --> 00:09:48,080
of course i'd be remiss if i wouldn't

243
00:09:48,080 --> 00:09:49,920
point out that to the wonderful

244
00:09:49,920 --> 00:09:52,399
wonderful graphic comes from the art and

245
00:09:52,399 --> 00:09:54,840
the genius of brian campbell

246
00:09:54,840 --> 00:09:56,399
[Music]

247
00:09:56,399 --> 00:09:59,600
and uh what happened since 113. well

248
00:09:59,600 --> 00:10:01,040
first we got

249
00:10:01,040 --> 00:10:04,880
voted in now we are in the island and um

250
00:10:04,880 --> 00:10:07,519
this is an actual work item which we are

251
00:10:07,519 --> 00:10:10,240
working on as a off-working group

252
00:10:10,240 --> 00:10:12,640
um philip and peter have been a very

253
00:10:12,640 --> 00:10:15,040
very faro especially peter thank you

254
00:10:15,040 --> 00:10:15,920
peter

255
00:10:15,920 --> 00:10:16,959
um

256
00:10:16,959 --> 00:10:19,519
in describing a sec mentioning their

257
00:10:19,519 --> 00:10:22,240
comments on the scenario and the

258
00:10:22,240 --> 00:10:25,200
proposing uh improvements which we tried

259
00:10:25,200 --> 00:10:27,920
to reflect in particular peter pointed

260
00:10:27,920 --> 00:10:29,760
out that step up doesn't always mean

261
00:10:29,760 --> 00:10:32,000
step up let's say that the token that

262
00:10:32,000 --> 00:10:34,399
you obtain after the step up might not

263
00:10:34,399 --> 00:10:36,399
be a replacement of the token you

264
00:10:36,399 --> 00:10:39,279
already have and so we clarified these

265
00:10:39,279 --> 00:10:40,959
in uh

266
00:10:40,959 --> 00:10:43,680
in the spec and philippe mentioned that

267
00:10:43,680 --> 00:10:46,000
it would be nice to have a mechanism to

268
00:10:46,000 --> 00:10:48,160
signal the fact that the authorization

269
00:10:48,160 --> 00:10:50,720
server supports this particular scenario

270
00:10:50,720 --> 00:10:53,360
and so that's what we have done we have

271
00:10:53,360 --> 00:10:55,120
extended the authorization server

272
00:10:55,120 --> 00:10:57,680
metadata with one element that comes

273
00:10:57,680 --> 00:11:01,279
straight from openid which is a

274
00:11:01,279 --> 00:11:04,160
acr value supported and we established

275
00:11:04,160 --> 00:11:06,480
that the presence of that parameter

276
00:11:06,480 --> 00:11:08,480
indicates that the authorization server

277
00:11:08,480 --> 00:11:09,839
supports

278
00:11:09,839 --> 00:11:11,839
these specifications now the tricky

279
00:11:11,839 --> 00:11:12,880
thing

280
00:11:12,880 --> 00:11:15,760
which we'll mention also at this um in

281
00:11:15,760 --> 00:11:18,720
the discussion points is that

282
00:11:18,720 --> 00:11:21,440
by using that element we imply that the

283
00:11:21,440 --> 00:11:24,160
authorization server supports both acr

284
00:11:24,160 --> 00:11:26,959
values and max age in the request

285
00:11:26,959 --> 00:11:29,519
parameters and it's not immediately

286
00:11:29,519 --> 00:11:31,920
obvious because the element acr value

287
00:11:31,920 --> 00:11:35,279
supported only talks about this acr so

288
00:11:35,279 --> 00:11:37,680
these should be a bit of a discussion as

289
00:11:37,680 --> 00:11:39,680
in if we believe that we need something

290
00:11:39,680 --> 00:11:42,800
more explicit for acr or if we are okay

291
00:11:42,800 --> 00:11:44,480
with the current settings

292
00:11:44,480 --> 00:11:46,720
also we extended the example so to also

293
00:11:46,720 --> 00:11:49,839
feature max age and uh we fixed titles

294
00:11:49,839 --> 00:11:53,200
and uh i really liked the joke in the

295
00:11:53,200 --> 00:11:55,360
acknowledgments but unfortunately we had

296
00:11:55,360 --> 00:11:56,560
to start putting serious

297
00:11:56,560 --> 00:11:58,480
acknowledgements there so now it's gone

298
00:11:58,480 --> 00:12:02,399
but there are the people that helped

299
00:12:03,040 --> 00:12:06,480
great here we're displaying a great

300
00:12:06,480 --> 00:12:08,399
trust in the future we talk already

301
00:12:08,399 --> 00:12:10,639
about potential london discussions

302
00:12:10,639 --> 00:12:12,959
what's left to uh

303
00:12:12,959 --> 00:12:14,160
to do

304
00:12:14,160 --> 00:12:15,600
well um

305
00:12:15,600 --> 00:12:18,000
there is the ayana section which of

306
00:12:18,000 --> 00:12:19,360
course we need to fill up because we

307
00:12:19,360 --> 00:12:22,079
want to extend uh parameters also for

308
00:12:22,079 --> 00:12:25,680
introspection and um

309
00:12:25,680 --> 00:12:27,200
we have to add the security

310
00:12:27,200 --> 00:12:28,959
consideration like all the non-normative

311
00:12:28,959 --> 00:12:32,560
have a big tbd so we have to do it

312
00:12:32,560 --> 00:12:34,880
um and then there is a thing that i just

313
00:12:34,880 --> 00:12:37,120
mentioned like is it okay to just use

314
00:12:37,120 --> 00:12:39,040
this cr value supported or do we need

315
00:12:39,040 --> 00:12:40,639
something more explicit

316
00:12:40,639 --> 00:12:41,440
and

317
00:12:41,440 --> 00:12:44,880
here is the uh interesting part

318
00:12:44,880 --> 00:12:47,440
this pack as it exists today already

319
00:12:47,440 --> 00:12:49,680
does the job that

320
00:12:49,680 --> 00:12:51,839
it's meant to do like there are no

321
00:12:51,839 --> 00:12:54,480
missing parts and we are getting

322
00:12:54,480 --> 00:12:56,560
indication of people adopting this thing

323
00:12:56,560 --> 00:12:57,600
already

324
00:12:57,600 --> 00:12:59,920
uh like uh there was a comment in one of

325
00:12:59,920 --> 00:13:02,079
my linkedin posts in which someone said

326
00:13:02,079 --> 00:13:04,880
that the department of health in norway

327
00:13:04,880 --> 00:13:07,680
is already adopting this thing as is

328
00:13:07,680 --> 00:13:10,639
so i think that uh it's important for us

329
00:13:10,639 --> 00:13:14,079
to discuss this spec so that if there

330
00:13:14,079 --> 00:13:16,079
are things that people think should be

331
00:13:16,079 --> 00:13:19,760
changed or removed or added the sooner

332
00:13:19,760 --> 00:13:22,720
we do it the less instant legacy will

333
00:13:22,720 --> 00:13:25,360
have because if we don't again this is

334
00:13:25,360 --> 00:13:28,240
something that the people deem useful

335
00:13:28,240 --> 00:13:30,160
and a problem that people do have

336
00:13:30,160 --> 00:13:32,480
already today so they are using the spec

337
00:13:32,480 --> 00:13:34,720
in this form so if you think that there

338
00:13:34,720 --> 00:13:36,399
is if there is something in respect that

339
00:13:36,399 --> 00:13:37,920
you don't like

340
00:13:37,920 --> 00:13:40,320
please make sure to to chime in if there

341
00:13:40,320 --> 00:13:41,760
is something that you believe should be

342
00:13:41,760 --> 00:13:44,320
in scope and you want respect to address

343
00:13:44,320 --> 00:13:47,600
please chime in because otherwise we

344
00:13:47,600 --> 00:13:48,480
risk

345
00:13:48,480 --> 00:13:50,639
going really fast through a various

346
00:13:50,639 --> 00:13:52,720
stages and then

347
00:13:52,720 --> 00:13:55,279
be close to final and you didn't have a

348
00:13:55,279 --> 00:13:56,720
chance to try it

349
00:13:56,720 --> 00:13:57,760
so

350
00:13:57,760 --> 00:14:00,839
i think that's pretty much it

351
00:14:00,839 --> 00:14:04,160
perfect thank you vittorio any quick

352
00:14:04,160 --> 00:14:06,800
question comment to victoria that's one

353
00:14:06,800 --> 00:14:09,199
of those

354
00:14:09,760 --> 00:14:13,439
okay perfect thank you vitor

355
00:14:14,000 --> 00:14:17,839
daniel i think or christina

356
00:14:30,560 --> 00:14:32,160
hello

357
00:14:32,160 --> 00:14:33,600
you want me to drive from here do you

358
00:14:33,600 --> 00:14:34,720
want to drive

359
00:14:34,720 --> 00:14:37,440
um i think you can

360
00:14:37,440 --> 00:14:39,360
otherwise i messed it up like i did last

361
00:14:39,360 --> 00:14:40,399
time so

362
00:14:40,399 --> 00:14:42,399
okay let's try it

363
00:14:42,399 --> 00:14:43,440
go

364
00:14:43,440 --> 00:14:44,720
yeah

365
00:14:44,720 --> 00:14:46,160
thank you very much uh also for

366
00:14:46,160 --> 00:14:47,440
scheduling this

367
00:14:47,440 --> 00:14:49,920
um we're presenting on new work uh

368
00:14:49,920 --> 00:14:51,600
that's called selective disclosure

369
00:14:51,600 --> 00:14:54,880
disclosure for jwts and we in this case

370
00:14:54,880 --> 00:14:56,720
are christina and i

371
00:14:56,720 --> 00:15:00,079
um if you have not seen the draft yet um

372
00:15:00,079 --> 00:15:01,760
that's what it's called you can scan

373
00:15:01,760 --> 00:15:02,480
that

374
00:15:02,480 --> 00:15:04,880
um if you want to see the latest version

375
00:15:04,880 --> 00:15:07,519
in the git repository that's you

376
00:15:07,519 --> 00:15:07,800
um

377
00:15:07,800 --> 00:15:09,040
[Music]

378
00:15:09,040 --> 00:15:11,760
so much for the intro

379
00:15:11,760 --> 00:15:14,959
think the next part is yours

380
00:15:15,519 --> 00:15:17,760
yeah um we'll quickly cover on why do we

381
00:15:17,760 --> 00:15:20,000
need select disclosure for jots um i'll

382
00:15:20,000 --> 00:15:22,000
give an overview of the mechanism we're

383
00:15:22,000 --> 00:15:24,480
introducing and then daniel will go into

384
00:15:24,480 --> 00:15:26,639
kind of deeper dives and features

385
00:15:26,639 --> 00:15:28,720
we are enabling based already on some

386
00:15:28,720 --> 00:15:30,160
really good implementation feedback

387
00:15:30,160 --> 00:15:31,680
coming in if you can go to the next

388
00:15:31,680 --> 00:15:34,160
slide so really quickly

389
00:15:34,160 --> 00:15:35,440
um

390
00:15:35,440 --> 00:15:38,399
on the left side you have the current

391
00:15:38,399 --> 00:15:40,639
flow where mainly jots are being used

392
00:15:40,639 --> 00:15:42,160
right now where

393
00:15:42,160 --> 00:15:44,720
arguably there's sort of

394
00:15:44,720 --> 00:15:46,560
jobs already selected were disclosed

395
00:15:46,560 --> 00:15:48,959
being transported and what i mean is the

396
00:15:48,959 --> 00:15:52,000
claims included in the jot is what user

397
00:15:52,000 --> 00:15:54,800
has already consented to so this is very

398
00:15:54,800 --> 00:15:57,360
different from this emerging new model

399
00:15:57,360 --> 00:16:00,320
which has been really prominent in with

400
00:16:00,320 --> 00:16:02,560
our credentials world for example or

401
00:16:02,560 --> 00:16:04,560
mobile driving license world but not

402
00:16:04,560 --> 00:16:08,160
only limited to that where the issuer is

403
00:16:08,160 --> 00:16:11,279
issuing a credential to the user with

404
00:16:11,279 --> 00:16:12,720
maximum amount of

405
00:16:12,720 --> 00:16:14,880
user claims like let's say issuer issued

406
00:16:14,880 --> 00:16:17,519
20 claims to the user and when user is

407
00:16:17,519 --> 00:16:19,839
presenting that claim to the verifier

408
00:16:19,839 --> 00:16:22,320
verifier is different very far as would

409
00:16:22,320 --> 00:16:24,240
request different subsets of those

410
00:16:24,240 --> 00:16:26,959
claims issued by the issue is the issuer

411
00:16:26,959 --> 00:16:29,759
so it's unfeasible for the end user go

412
00:16:29,759 --> 00:16:32,000
back every time to the issuer to get

413
00:16:32,000 --> 00:16:34,480
those credentials have only subset of

414
00:16:34,480 --> 00:16:37,279
those claims that does not that goes

415
00:16:37,279 --> 00:16:40,480
against the promise of decoupling issues

416
00:16:40,480 --> 00:16:43,040
and presentations to

417
00:16:43,040 --> 00:16:46,000
have all these new features such as

418
00:16:46,000 --> 00:16:47,440
um yeah

419
00:16:47,440 --> 00:16:48,240
and

420
00:16:48,240 --> 00:16:50,880
so this is the main idea when it flows

421
00:16:50,880 --> 00:16:52,560
emerging flows at the corporations and

422
00:16:52,560 --> 00:16:55,279
presentations we need the ability to use

423
00:16:55,279 --> 00:16:59,519
one jot sign by the issuer and then um

424
00:16:59,519 --> 00:17:01,440
use only subset of those claims as a

425
00:17:01,440 --> 00:17:04,000
different verifiers and cavia said by

426
00:17:04,000 --> 00:17:06,799
stuff disclosure you do not mean end

427
00:17:06,799 --> 00:17:08,799
user saying i only want to present these

428
00:17:08,799 --> 00:17:11,280
claims no like say it's relying party

429
00:17:11,280 --> 00:17:13,199
the verifier who says give me those

430
00:17:13,199 --> 00:17:16,319
claims and this application the holder

431
00:17:16,319 --> 00:17:18,079
used by the user can generate those

432
00:17:18,079 --> 00:17:20,079
subsets you can go to the next slide oh

433
00:17:20,079 --> 00:17:22,480
i have it here never mind so yeah so set

434
00:17:22,480 --> 00:17:25,839
disclosure i received 10 claims and i

435
00:17:25,839 --> 00:17:27,919
want to let's say present only two or

436
00:17:27,919 --> 00:17:31,120
three hours go to the next slide

437
00:17:31,120 --> 00:17:32,400
um

438
00:17:32,400 --> 00:17:34,480
yeah sd dot

439
00:17:34,480 --> 00:17:38,160
and one thing that we really really um

440
00:17:38,160 --> 00:17:40,080
daniel and i have really been

441
00:17:40,080 --> 00:17:42,320
valuing is having simplicity as a

442
00:17:42,320 --> 00:17:45,440
feature um so that it's really easily

443
00:17:45,440 --> 00:17:48,000
implementable for the existing um

444
00:17:48,000 --> 00:17:49,840
drug implementations

445
00:17:49,840 --> 00:17:53,120
and we explain why so there are some

446
00:17:53,120 --> 00:17:55,200
existing sexual disclosure themes

447
00:17:55,200 --> 00:17:59,039
arguably and that's kind of how we see

448
00:17:59,039 --> 00:18:02,320
set disclosure for dot's work um

449
00:18:02,320 --> 00:18:03,679
we're trying to keep it as simple as

450
00:18:03,679 --> 00:18:05,440
possible and

451
00:18:05,440 --> 00:18:08,000
it is possible to set disclosure without

452
00:18:08,000 --> 00:18:10,240
using advanced cryptography but those a

453
00:18:10,240 --> 00:18:14,000
you know ecdsa dsa curves you're used to

454
00:18:14,000 --> 00:18:15,120
um

455
00:18:15,120 --> 00:18:16,400
formats

456
00:18:16,400 --> 00:18:18,799
um some formats and disclosure are

457
00:18:18,799 --> 00:18:20,880
limited to binary formats here we're

458
00:18:20,880 --> 00:18:23,280
focusing on json.world

459
00:18:23,280 --> 00:18:26,160
is value developer familiarity

460
00:18:26,160 --> 00:18:28,320
for security device because it's in json

461
00:18:28,320 --> 00:18:31,760
and jot it is much easier to audit um

462
00:18:31,760 --> 00:18:33,120
you know whether algorithms are

463
00:18:33,120 --> 00:18:35,600
implemented correctly or um whether

464
00:18:35,600 --> 00:18:37,039
there are any errors

465
00:18:37,039 --> 00:18:38,400
rather than having it in the binary

466
00:18:38,400 --> 00:18:40,840
format um language

467
00:18:40,840 --> 00:18:43,520
availability there are daniel and i have

468
00:18:43,520 --> 00:18:45,600
been amused they're already on four

469
00:18:45,600 --> 00:18:48,000
independent implementations of this work

470
00:18:48,000 --> 00:18:50,480
within two three months we've been

471
00:18:50,480 --> 00:18:53,440
working on this um and this is partially

472
00:18:53,440 --> 00:18:55,360
because you can leverage existing java

473
00:18:55,360 --> 00:18:58,320
libraries and again we're not limiting

474
00:18:58,320 --> 00:19:00,720
those to identity use cases

475
00:19:00,720 --> 00:19:02,080
going next so

476
00:19:02,080 --> 00:19:03,600
you should be wondering how does it work

477
00:19:03,600 --> 00:19:05,520
if you can go to the next slide because

478
00:19:05,520 --> 00:19:07,840
you know in the dots

479
00:19:07,840 --> 00:19:10,240
um let's find the next slide the net

480
00:19:10,240 --> 00:19:12,720
nine slide because in the jobs you know

481
00:19:12,720 --> 00:19:14,720
as we all know issuer signs over all of

482
00:19:14,720 --> 00:19:16,160
the claims

483
00:19:16,160 --> 00:19:19,760
and what we did is we go next slide um

484
00:19:19,760 --> 00:19:22,480
the idea is when the issuer is issuing a

485
00:19:22,480 --> 00:19:25,280
credential issuer is not signing over

486
00:19:25,280 --> 00:19:27,919
the actual claim values issue is signing

487
00:19:27,919 --> 00:19:29,039
over

488
00:19:29,039 --> 00:19:30,160
the hash

489
00:19:30,160 --> 00:19:33,360
of those values and if you just if you

490
00:19:33,360 --> 00:19:35,840
hash only the value is a it becomes

491
00:19:35,840 --> 00:19:39,039
guessable for attackable so

492
00:19:39,039 --> 00:19:41,200
the issue is actually hashing over the

493
00:19:41,200 --> 00:19:43,760
actual value and a random unique sold

494
00:19:43,760 --> 00:19:46,240
which is unique to that claim value

495
00:19:46,240 --> 00:19:48,160
so issuer sign credential contains only

496
00:19:48,160 --> 00:19:51,200
these digests

497
00:19:51,200 --> 00:19:53,039
next slide

498
00:19:53,039 --> 00:19:55,120
but then you know from a end user

499
00:19:55,120 --> 00:19:57,200
perspective

500
00:19:57,200 --> 00:19:58,880
you know another thing that the issuer

501
00:19:58,880 --> 00:20:00,960
needs to send is this soap value

502
00:20:00,960 --> 00:20:02,960
container which includes the mapping of

503
00:20:02,960 --> 00:20:05,280
actual claim values and these unique

504
00:20:05,280 --> 00:20:08,000
salts which is not signed it's a plain

505
00:20:08,000 --> 00:20:09,360
json

506
00:20:09,360 --> 00:20:11,200
object and

507
00:20:11,200 --> 00:20:12,799
and finally when the end user is

508
00:20:12,799 --> 00:20:15,280
presenting this object what end user

509
00:20:15,280 --> 00:20:16,159
does

510
00:20:16,159 --> 00:20:18,400
it's a dot you can't really break issue

511
00:20:18,400 --> 00:20:20,480
signatures you cannot modify anything in

512
00:20:20,480 --> 00:20:22,799
the issue assigned sd job so select

513
00:20:22,799 --> 00:20:24,960
disclosure jot in the blue one is being

514
00:20:24,960 --> 00:20:27,440
on the left side is being sent as is

515
00:20:27,440 --> 00:20:30,080
where selective disclosure happens is

516
00:20:30,080 --> 00:20:33,200
within the container so user is sending

517
00:20:33,200 --> 00:20:36,320
only the source and claim values of the

518
00:20:36,320 --> 00:20:38,559
claims that the user has consented to

519
00:20:38,559 --> 00:20:40,880
release and

520
00:20:40,880 --> 00:20:43,200
that's how verifier can verify and

521
00:20:43,200 --> 00:20:45,039
receive only the claim values that the

522
00:20:45,039 --> 00:20:46,960
user has consented and given the

523
00:20:46,960 --> 00:20:49,120
verifier in the release and there's

524
00:20:49,120 --> 00:20:51,520
optionally holder binding um yeah i

525
00:20:51,520 --> 00:20:53,120
think this is a high level overview and

526
00:20:53,120 --> 00:20:56,320
daniel go speak to details

527
00:21:01,600 --> 00:21:04,360
okay let's have a closer look at the

528
00:21:04,360 --> 00:21:06,559
sdjwt again that's the thing that's sent

529
00:21:06,559 --> 00:21:08,400
from the issuer to the end user and then

530
00:21:08,400 --> 00:21:10,880
unmodified from the end user to the

531
00:21:10,880 --> 00:21:12,080
verifier

532
00:21:12,080 --> 00:21:14,879
next slide please

533
00:21:15,200 --> 00:21:17,520
this is what it looks like so it's a jwc

534
00:21:17,520 --> 00:21:19,200
obviously um

535
00:21:19,200 --> 00:21:21,280
may contain public key for over so you

536
00:21:21,280 --> 00:21:22,960
can do holder binding or reference there

537
00:21:22,960 --> 00:21:26,159
too and that's really um

538
00:21:26,159 --> 00:21:27,679
undefined or doesn't need to be defined

539
00:21:27,679 --> 00:21:29,039
here

540
00:21:29,039 --> 00:21:30,720
the important part is

541
00:21:30,720 --> 00:21:33,120
at the bottom you see two new claims the

542
00:21:33,120 --> 00:21:35,760
one is called sd-arc with which is

543
00:21:35,760 --> 00:21:38,880
obviously a hash algorithm and then sd

544
00:21:38,880 --> 00:21:40,159
digests

545
00:21:40,159 --> 00:21:42,720
that's the hash the hashes of the claim

546
00:21:42,720 --> 00:21:46,080
values with the salts assaulted hashes

547
00:21:46,080 --> 00:21:48,400
um of all the claim values and if this

548
00:21:48,400 --> 00:21:50,159
would be a more complex object where you

549
00:21:50,159 --> 00:21:50,880
have

550
00:21:50,880 --> 00:21:52,960
um like in the

551
00:21:52,960 --> 00:21:54,559
open id for identity assurance where you

552
00:21:54,559 --> 00:21:56,480
have nested claims and so on then would

553
00:21:56,480 --> 00:21:59,360
have one digest usually um per claim

554
00:21:59,360 --> 00:22:01,840
we'll get to that in a moment

555
00:22:01,840 --> 00:22:03,120
um

556
00:22:03,120 --> 00:22:05,200
yeah so that's that's like the the

557
00:22:05,200 --> 00:22:06,720
superset of

558
00:22:06,720 --> 00:22:09,679
all that can be released to um

559
00:22:09,679 --> 00:22:14,400
um to the verifier next slide please

560
00:22:14,400 --> 00:22:18,000
um and then so that was only the hashes

561
00:22:18,000 --> 00:22:20,000
and then we have this construct called

562
00:22:20,000 --> 00:22:21,600
assault value container which is sent

563
00:22:21,600 --> 00:22:23,840
from the issue to the holder or the end

564
00:22:23,840 --> 00:22:25,360
user

565
00:22:25,360 --> 00:22:27,280
next slide please

566
00:22:27,280 --> 00:22:30,559
um and here we see a

567
00:22:30,559 --> 00:22:32,400
construction that looks really ugly when

568
00:22:32,400 --> 00:22:34,159
you see it for the first time but that

569
00:22:34,159 --> 00:22:37,360
works quite well actually

570
00:22:37,520 --> 00:22:39,280
what you see here is that for each of

571
00:22:39,280 --> 00:22:41,200
the claims so we have the same structure

572
00:22:41,200 --> 00:22:42,799
as before

573
00:22:42,799 --> 00:22:45,520
but the claim values so to say

574
00:22:45,520 --> 00:22:46,640
they are now

575
00:22:46,640 --> 00:22:48,559
json encoded strings

576
00:22:48,559 --> 00:22:50,960
and these json encoded strings encode an

577
00:22:50,960 --> 00:22:52,159
array

578
00:22:52,159 --> 00:22:55,120
of the salt value and the plain text

579
00:22:55,120 --> 00:22:57,918
lane value

580
00:22:58,000 --> 00:23:00,880
now why do we do this um this looks

581
00:23:00,880 --> 00:23:02,880
strange it feels strange feels a bit

582
00:23:02,880 --> 00:23:04,240
dirty but

583
00:23:04,240 --> 00:23:06,880
it works really well because what we

584
00:23:06,880 --> 00:23:09,360
need to do is we need to send parts of

585
00:23:09,360 --> 00:23:11,200
this um so

586
00:23:11,200 --> 00:23:13,200
whatever the holder wants to select uh

587
00:23:13,200 --> 00:23:14,880
so to release

588
00:23:14,880 --> 00:23:17,360
that we need to transfer from the holder

589
00:23:17,360 --> 00:23:19,440
to the verifier then the verifier needs

590
00:23:19,440 --> 00:23:20,960
to hash it

591
00:23:20,960 --> 00:23:23,520
the salt and claim value

592
00:23:23,520 --> 00:23:26,159
and needs to come to the same digest as

593
00:23:26,159 --> 00:23:28,640
the one that is signed in the sdjwt so

594
00:23:28,640 --> 00:23:30,000
we need to ensure that everybody has

595
00:23:30,000 --> 00:23:31,919
just the same stuff

596
00:23:31,919 --> 00:23:34,159
we could just send the salt value and

597
00:23:34,159 --> 00:23:37,600
the claim value separately as plain uh

598
00:23:37,600 --> 00:23:39,200
json values

599
00:23:39,200 --> 00:23:41,520
the problem with that would be um that

600
00:23:41,520 --> 00:23:44,000
we need to attach the salt and the claim

601
00:23:44,000 --> 00:23:45,919
value together to

602
00:23:45,919 --> 00:23:48,480
form a byte string that is then hashed

603
00:23:48,480 --> 00:23:50,559
that's the first challenge you need to

604
00:23:50,559 --> 00:23:52,400
have like a separator character and then

605
00:23:52,400 --> 00:23:55,360
escaping or some other form of encoding

606
00:23:55,360 --> 00:23:59,360
result and a claim value

607
00:23:59,600 --> 00:24:01,679
in this case we're just sending the

608
00:24:01,679 --> 00:24:04,320
whole thing that is to be hashed so you

609
00:24:04,320 --> 00:24:06,159
already have a separation between salt

610
00:24:06,159 --> 00:24:08,080
value and the claim value

611
00:24:08,080 --> 00:24:10,080
second challenge is that

612
00:24:10,080 --> 00:24:13,678
no please stay on that slide

613
00:24:14,559 --> 00:24:16,960
second challenge is that you have claim

614
00:24:16,960 --> 00:24:18,240
values that have more than one

615
00:24:18,240 --> 00:24:20,799
representation and that actually affects

616
00:24:20,799 --> 00:24:23,440
almost all data types in json so if you

617
00:24:23,440 --> 00:24:24,720
have a string

618
00:24:24,720 --> 00:24:29,600
you can um use some some escapings to to

619
00:24:29,600 --> 00:24:32,159
to encode that string

620
00:24:32,159 --> 00:24:34,159
for numbers you have different encodings

621
00:24:34,159 --> 00:24:36,159
especially floating point numbers and

622
00:24:36,159 --> 00:24:37,679
then when you look at the address claim

623
00:24:37,679 --> 00:24:40,720
here we have even have things such as a

624
00:24:40,720 --> 00:24:43,360
complex claim so where the whole claim

625
00:24:43,360 --> 00:24:44,880
is another object

626
00:24:44,880 --> 00:24:46,559
and all that needs to be encoded

627
00:24:46,559 --> 00:24:48,880
reliably into byte strings

628
00:24:48,880 --> 00:24:51,440
and this is why we say okay the issuer

629
00:24:51,440 --> 00:24:53,600
does all the encoding and just makes the

630
00:24:53,600 --> 00:24:55,760
json string out of this and just sends

631
00:24:55,760 --> 00:24:58,400
the whole string the verifier gets that

632
00:24:58,400 --> 00:25:01,279
thing can hash it comes to the same hash

633
00:25:01,279 --> 00:25:03,039
as in the sd drawed if it was not

634
00:25:03,039 --> 00:25:05,440
modified in between

635
00:25:05,440 --> 00:25:07,360
and then can just extract from the this

636
00:25:07,360 --> 00:25:09,600
array the second part this is an

637
00:25:09,600 --> 00:25:11,679
extremely simple implementation

638
00:25:11,679 --> 00:25:14,159
it's super easy

639
00:25:14,159 --> 00:25:16,159
you can do complex claim values as you

640
00:25:16,159 --> 00:25:17,919
like you don't have to think about

641
00:25:17,919 --> 00:25:20,400
cannot canonicalization

642
00:25:20,400 --> 00:25:21,440
at all

643
00:25:21,440 --> 00:25:24,000
so it just works

644
00:25:24,000 --> 00:25:27,840
now the next slide please

645
00:25:27,840 --> 00:25:29,679
and as christina already said part of

646
00:25:29,679 --> 00:25:31,679
that salt value container that is sent

647
00:25:31,679 --> 00:25:34,559
to the holder is then sent to the

648
00:25:34,559 --> 00:25:37,279
verifier to actually check um where or

649
00:25:37,279 --> 00:25:39,760
to get the claim values next slide

650
00:25:39,760 --> 00:25:43,039
please and to check the hashes of course

651
00:25:43,039 --> 00:25:44,720
so you can see here this is only a part

652
00:25:44,720 --> 00:25:47,679
given name and family name in this case

653
00:25:47,679 --> 00:25:50,080
for the verifier the task is really easy

654
00:25:50,080 --> 00:25:53,200
check the signature over the sd jar that

655
00:25:53,200 --> 00:25:55,440
is sent in parallel to this

656
00:25:55,440 --> 00:25:57,200
um

657
00:25:57,200 --> 00:25:59,520
then check that this thing here which we

658
00:25:59,520 --> 00:26:01,039
call the release

659
00:26:01,039 --> 00:26:03,840
is valid can be signed um

660
00:26:03,840 --> 00:26:05,440
so you have to check the signature the

661
00:26:05,440 --> 00:26:07,279
nonce if you do bind it to the

662
00:26:07,279 --> 00:26:08,960
transaction and so on

663
00:26:08,960 --> 00:26:11,360
um and then of course and this is like

664
00:26:11,360 --> 00:26:13,360
the single thing that a verify can get

665
00:26:13,360 --> 00:26:15,279
wrong so please don't do that

666
00:26:15,279 --> 00:26:16,640
don't skip that

667
00:26:16,640 --> 00:26:17,440
um

668
00:26:17,440 --> 00:26:20,000
you have to check that if you hash the

669
00:26:20,000 --> 00:26:21,360
string

670
00:26:21,360 --> 00:26:23,600
for the claims then you actually have

671
00:26:23,600 --> 00:26:25,200
the same digest as

672
00:26:25,200 --> 00:26:27,440
the one that is in the sd chart

673
00:26:27,440 --> 00:26:29,520
um this is the one thing that you can

674
00:26:29,520 --> 00:26:31,679
get wrong we thought about how to avoid

675
00:26:31,679 --> 00:26:33,520
that and we didn't come up with anything

676
00:26:33,520 --> 00:26:35,360
that works better than this

677
00:26:35,360 --> 00:26:38,559
um so we put some work into um

678
00:26:38,559 --> 00:26:40,559
communicating that you really should not

679
00:26:40,559 --> 00:26:42,240
skip this part

680
00:26:42,240 --> 00:26:43,520
and then of course

681
00:26:43,520 --> 00:26:45,520
after that you can extract the claim

682
00:26:45,520 --> 00:26:47,120
value

683
00:26:47,120 --> 00:26:48,320
the nice thing about this whole

684
00:26:48,320 --> 00:26:50,720
construction is that you can as the

685
00:26:50,720 --> 00:26:52,799
issuer select how you want to build your

686
00:26:52,799 --> 00:26:54,799
sd chart you can

687
00:26:54,799 --> 00:26:56,799
um for example if you have a complex

688
00:26:56,799 --> 00:26:59,039
claim like address here you can say okay

689
00:26:59,039 --> 00:27:01,360
the whole thing can be um

690
00:27:01,360 --> 00:27:02,640
released

691
00:27:02,640 --> 00:27:04,720
as a complete thing so

692
00:27:04,720 --> 00:27:06,320
the verifier gets the complete address

693
00:27:06,320 --> 00:27:07,520
or nothing

694
00:27:07,520 --> 00:27:10,000
or you can do a deep dive and you can

695
00:27:10,000 --> 00:27:10,880
like

696
00:27:10,880 --> 00:27:13,200
go into the individual elements here

697
00:27:13,200 --> 00:27:15,279
it's relatively simple when you look at

698
00:27:15,279 --> 00:27:18,000
address next slide please but of course

699
00:27:18,000 --> 00:27:18,880
in

700
00:27:18,880 --> 00:27:19,760
some

701
00:27:19,760 --> 00:27:21,679
use cases you have

702
00:27:21,679 --> 00:27:23,440
very complex objects like here and open

703
00:27:23,440 --> 00:27:25,279
id for identity assurance this is an

704
00:27:25,279 --> 00:27:28,399
actual example from the spec

705
00:27:28,399 --> 00:27:30,880
where you can see that you can

706
00:27:30,880 --> 00:27:35,440
do very complex things next slide please

707
00:27:35,440 --> 00:27:36,640
um

708
00:27:36,640 --> 00:27:38,799
we already as christina mentioned have

709
00:27:38,799 --> 00:27:41,440
for independent implementations so you

710
00:27:41,440 --> 00:27:43,919
can go ahead and

711
00:27:43,919 --> 00:27:47,120
play around with this thing

712
00:27:47,120 --> 00:27:48,559
in your favorite language if your

713
00:27:48,559 --> 00:27:49,919
favorite language is python called

714
00:27:49,919 --> 00:27:51,600
invest or typescript

715
00:27:51,600 --> 00:27:52,480
um

716
00:27:52,480 --> 00:27:54,240
our python implementation is the one

717
00:27:54,240 --> 00:27:55,200
that we um

718
00:27:55,200 --> 00:27:56,799
[Music]

719
00:27:56,799 --> 00:27:59,679
call the reference implementation um we

720
00:27:59,679 --> 00:28:03,679
we um build it or we we created it

721
00:28:03,679 --> 00:28:05,600
actually before the spec

722
00:28:05,600 --> 00:28:06,720
and

723
00:28:06,720 --> 00:28:10,159
it's about 500 lines of code really

724
00:28:10,159 --> 00:28:11,120
small

725
00:28:11,120 --> 00:28:12,799
it evolves with the specs so we try to

726
00:28:12,799 --> 00:28:15,279
keep it up to date because we also also

727
00:28:15,279 --> 00:28:17,120
generated all the almost all the

728
00:28:17,120 --> 00:28:20,159
examples in the spec from that code

729
00:28:20,159 --> 00:28:23,760
um so yeah it's uh

730
00:28:23,760 --> 00:28:25,679
hopefully useful you can also plug your

731
00:28:25,679 --> 00:28:28,000
own examples into it if you like so

732
00:28:28,000 --> 00:28:32,720
play around with it um next slide please

733
00:28:32,720 --> 00:28:36,399
we also have um looked at how you can um

734
00:28:36,399 --> 00:28:38,159
format w3c

735
00:28:38,159 --> 00:28:40,240
vcs with this

736
00:28:40,240 --> 00:28:41,039
we

737
00:28:41,039 --> 00:28:42,960
have a proposal in the issue checker and

738
00:28:42,960 --> 00:28:44,480
actually also in spec

739
00:28:44,480 --> 00:28:47,200
where so the syntax is not final but it

740
00:28:47,200 --> 00:28:49,520
will work out in the end

741
00:28:49,520 --> 00:28:51,840
so this will also be covered

742
00:28:51,840 --> 00:28:54,720
next slide please

743
00:28:55,120 --> 00:28:56,720
what's the current status what are the

744
00:28:56,720 --> 00:28:59,840
next steps next slide please

745
00:28:59,840 --> 00:29:00,720
um

746
00:29:00,720 --> 00:29:02,960
we do have a functional com

747
00:29:02,960 --> 00:29:05,840
specification practically complete so

748
00:29:05,840 --> 00:29:08,240
there are no aspects that are uncovered

749
00:29:08,240 --> 00:29:09,039
yet

750
00:29:09,039 --> 00:29:10,880
um it's somewhat stable in the sense

751
00:29:10,880 --> 00:29:13,279
that we don't have big

752
00:29:13,279 --> 00:29:15,440
items open that we need to discuss

753
00:29:15,440 --> 00:29:17,600
obviously there might be other input now

754
00:29:17,600 --> 00:29:18,640
um

755
00:29:18,640 --> 00:29:22,240
so let's see where this will lead us but

756
00:29:22,240 --> 00:29:24,720
we're quite confident that um this is

757
00:29:24,720 --> 00:29:27,679
already in a good state um we do have

758
00:29:27,679 --> 00:29:29,840
one a new thing that's the approach to

759
00:29:29,840 --> 00:29:33,039
also blind claim names um so that we can

760
00:29:33,039 --> 00:29:35,120
um also hide what the names of the

761
00:29:35,120 --> 00:29:37,360
claims are not the values only

762
00:29:37,360 --> 00:29:39,279
um some missing parts and execute and

763
00:29:39,279 --> 00:29:41,679
privacy considerations that

764
00:29:41,679 --> 00:29:43,919
should be relatively easy

765
00:29:43,919 --> 00:29:45,840
and due to

766
00:29:45,840 --> 00:29:46,799
this

767
00:29:46,799 --> 00:29:50,000
and also due to the simplicity

768
00:29:50,000 --> 00:29:52,320
we heard from many

769
00:29:52,320 --> 00:29:54,080
groups and organizations already that

770
00:29:54,080 --> 00:29:56,080
they consider this a serious alternative

771
00:29:56,080 --> 00:29:58,320
to existing formats

772
00:29:58,320 --> 00:30:00,320
um it's easy to understand it's easy to

773
00:30:00,320 --> 00:30:03,039
implement you don't um end up with just

774
00:30:03,039 --> 00:30:03,840
one

775
00:30:03,840 --> 00:30:05,279
java implementation that nobody

776
00:30:05,279 --> 00:30:06,720
understands

777
00:30:06,720 --> 00:30:08,640
and we heard that this will also be

778
00:30:08,640 --> 00:30:11,279
adopted in eu projects nothing official

779
00:30:11,279 --> 00:30:13,120
that we can announce yet um but

780
00:30:13,120 --> 00:30:14,640
hopefully soon

781
00:30:14,640 --> 00:30:17,679
and um also by microsoft

782
00:30:17,679 --> 00:30:19,919
next slide please

783
00:30:19,919 --> 00:30:22,960
why are we here today well jwts were

784
00:30:22,960 --> 00:30:24,799
developed in the oauth recon group and

785
00:30:24,799 --> 00:30:28,960
we see this as a tool based on jwts

786
00:30:28,960 --> 00:30:29,919
that is

787
00:30:29,919 --> 00:30:31,039
useful

788
00:30:31,039 --> 00:30:32,399
everywhere

789
00:30:32,399 --> 00:30:35,279
in all authentic technologies so not

790
00:30:35,279 --> 00:30:37,440
tied to mighty connect not tied to

791
00:30:37,440 --> 00:30:39,039
identity at all

792
00:30:39,039 --> 00:30:39,840
um

793
00:30:39,840 --> 00:30:42,480
we hope that it's universal a universal

794
00:30:42,480 --> 00:30:45,279
building block for new technologies

795
00:30:45,279 --> 00:30:46,159
um

796
00:30:46,159 --> 00:30:48,000
for example selectively disclosable

797
00:30:48,000 --> 00:30:50,640
access tokens or something like that um

798
00:30:50,640 --> 00:30:52,399
we don't

799
00:30:52,399 --> 00:30:54,720
know how that will look like in the end

800
00:30:54,720 --> 00:30:57,279
but um yeah so these are the

801
00:30:57,279 --> 00:30:59,200
things that we can there are more things

802
00:30:59,200 --> 00:31:01,200
that we can also imagine so

803
00:31:01,200 --> 00:31:03,679
hopefully um some good use cases there

804
00:31:03,679 --> 00:31:05,039
as well

805
00:31:05,039 --> 00:31:07,440
um and what i already said on the on a

806
00:31:07,440 --> 00:31:10,399
mailing list we hope that this can be um

807
00:31:10,399 --> 00:31:12,880
adopted by the working group next slide

808
00:31:12,880 --> 00:31:15,039
please

809
00:31:15,039 --> 00:31:15,760
so

810
00:31:15,760 --> 00:31:17,279
that we can work on this in the working

811
00:31:17,279 --> 00:31:18,799
group get the feedback from the working

812
00:31:18,799 --> 00:31:21,679
group and yeah work on this together

813
00:31:21,679 --> 00:31:22,880
thank you

814
00:31:22,880 --> 00:31:24,240
thanks daniel

815
00:31:24,240 --> 00:31:25,279
um

816
00:31:25,279 --> 00:31:26,720
rick

817
00:31:26,720 --> 00:31:30,159
hi um oh that's really loud um thank you

818
00:31:30,159 --> 00:31:31,679
for this i think this is really smart

819
00:31:31,679 --> 00:31:33,120
work i've only got one quick question

820
00:31:33,120 --> 00:31:35,200
about the string canonicalization of the

821
00:31:35,200 --> 00:31:39,039
jwt did you look at rfc 8785 which is

822
00:31:39,039 --> 00:31:40,000
the

823
00:31:40,000 --> 00:31:43,360
json canonicalization yeah for crypto i

824
00:31:43,360 --> 00:31:44,840
don't um

825
00:31:44,840 --> 00:31:48,000
but i think oh my impression was that if

826
00:31:48,000 --> 00:31:49,679
we go down that route

827
00:31:49,679 --> 00:31:51,360
um then

828
00:31:51,360 --> 00:31:53,760
we make the implementation much harder

829
00:31:53,760 --> 00:31:55,440
because you have to implement all that

830
00:31:55,440 --> 00:31:57,519
stuff from that rfc as well

831
00:31:57,519 --> 00:31:59,760
and now you can just use any json

832
00:31:59,760 --> 00:32:02,080
encoder so you can just so it really

833
00:32:02,080 --> 00:32:03,519
doesn't matter where it puts the white

834
00:32:03,519 --> 00:32:04,399
space

835
00:32:04,399 --> 00:32:05,200
uh

836
00:32:05,200 --> 00:32:07,519
whether like all these things it just

837
00:32:07,519 --> 00:32:10,640
has to encode the json faithfully

838
00:32:10,640 --> 00:32:13,200
okay yeah good argument my follow on

839
00:32:13,200 --> 00:32:14,640
question therefore is don't you run a

840
00:32:14,640 --> 00:32:16,240
danger of someone saying oh i'm going to

841
00:32:16,240 --> 00:32:18,960
put a a kilobyte of white space into my

842
00:32:18,960 --> 00:32:20,799
string and then my tokens are getting

843
00:32:20,799 --> 00:32:22,640
really fat at that point and that seems

844
00:32:22,640 --> 00:32:25,120
to be an anti-pattern um yeah but you

845
00:32:25,120 --> 00:32:27,600
have that with any jwt i guess so as

846
00:32:27,600 --> 00:32:29,840
soon as you build a jwt kill you can put

847
00:32:29,840 --> 00:32:31,519
so would you consider putting some sort

848
00:32:31,519 --> 00:32:33,600
of recommendations within if this was to

849
00:32:33,600 --> 00:32:35,679
be adopted into into the draft to say

850
00:32:35,679 --> 00:32:37,360
you know if you're doing this string

851
00:32:37,360 --> 00:32:38,960
canonicalization look at some of the

852
00:32:38,960 --> 00:32:42,159
best practices from 87.85 perhaps copy

853
00:32:42,159 --> 00:32:44,640
them but we're leaving this get out

854
00:32:44,640 --> 00:32:46,200
clause you don't need to do

855
00:32:46,200 --> 00:32:49,039
canonicalization um so it's

856
00:32:49,039 --> 00:32:51,760
you just need to do faithful encoding so

857
00:32:51,760 --> 00:32:53,760
yes sorry yeah but i think it would make

858
00:32:53,760 --> 00:32:56,399
sense uh um to to say

859
00:32:56,399 --> 00:33:00,000
um a worldwide space if you can um

860
00:33:00,000 --> 00:33:02,000
to to keep the thing small you don't

861
00:33:02,000 --> 00:33:03,120
need

862
00:33:03,120 --> 00:33:05,679
nicely formatted json in there okay uh

863
00:33:05,679 --> 00:33:09,120
with new lines and and taps and so cool

864
00:33:09,120 --> 00:33:11,760
thank you thank you

865
00:33:11,760 --> 00:33:14,799
okay any other questions comments yes

866
00:33:14,799 --> 00:33:16,880
sir

867
00:33:16,880 --> 00:33:19,360
anybody

868
00:33:20,960 --> 00:33:24,840
you need to get a microphone

869
00:33:27,600 --> 00:33:29,919
uh i definitely ever seen this work

870
00:33:29,919 --> 00:33:32,240
progress i i want to say maybe that

871
00:33:32,240 --> 00:33:34,720
you've overstated the stability just a

872
00:33:34,720 --> 00:33:36,080
touch

873
00:33:36,080 --> 00:33:38,720
um it's in good shape for this level of

874
00:33:38,720 --> 00:33:41,919
maturity but i hope we don't um

875
00:33:41,919 --> 00:33:43,519
if we do proceed with adoption that we

876
00:33:43,519 --> 00:33:46,080
don't use that as an excuse not to make

877
00:33:46,080 --> 00:33:47,919
necessary and important changes yeah

878
00:33:47,919 --> 00:33:50,320
absolutely um i think i also wrote that

879
00:33:50,320 --> 00:33:52,559
on a mailing list um what i mean by this

880
00:33:52,559 --> 00:33:53,440
is

881
00:33:53,440 --> 00:33:56,080
there's no like big questions how do we

882
00:33:56,080 --> 00:33:59,039
solve x or why um in

883
00:33:59,039 --> 00:34:01,760
that we know of yeah um

884
00:34:01,760 --> 00:34:03,840
we don't have as far as we know this has

885
00:34:03,840 --> 00:34:07,120
not been implemented in um in actual

886
00:34:07,120 --> 00:34:08,000
running

887
00:34:08,000 --> 00:34:09,918
production environments

888
00:34:09,918 --> 00:34:11,918
so we're open to changes um and

889
00:34:11,918 --> 00:34:14,000
stability in this case just means that

890
00:34:14,000 --> 00:34:15,440
we don't expect that

891
00:34:15,440 --> 00:34:17,599
if we solve this issue that we have on

892
00:34:17,599 --> 00:34:18,639
our list

893
00:34:18,639 --> 00:34:20,159
everything will change fair enough just

894
00:34:20,159 --> 00:34:24,079
a clarification thanks thank you no

895
00:34:24,399 --> 00:34:28,000
just one second there until um j jim and

896
00:34:28,000 --> 00:34:30,320
deep

897
00:34:30,719 --> 00:34:34,279
in the queue there

898
00:34:37,280 --> 00:34:39,040
in the online queue

899
00:34:39,040 --> 00:34:39,839
no

900
00:34:39,839 --> 00:34:41,520
german deep

901
00:34:41,520 --> 00:34:43,520
remotes

902
00:34:43,520 --> 00:34:45,119
okay next

903
00:34:45,119 --> 00:34:48,159
yeah i'm sorry uh

904
00:34:48,159 --> 00:34:51,199
i wanted to know the motivation of uh

905
00:34:51,199 --> 00:34:54,719
using selective disclosure jwt per se in

906
00:34:54,719 --> 00:34:57,440
the oauth because in the oauth flow uh

907
00:34:57,440 --> 00:34:58,960
we do not find

908
00:34:58,960 --> 00:35:00,000
uh

909
00:35:00,000 --> 00:35:02,160
it having much utility it would be

910
00:35:02,160 --> 00:35:04,800
better if we can look at certain models

911
00:35:04,800 --> 00:35:07,280
of jwt in which

912
00:35:07,280 --> 00:35:10,000
if we issue a token to a particular user

913
00:35:10,000 --> 00:35:12,480
or an app it should not

914
00:35:12,480 --> 00:35:15,920
be used by any other app so maybe if we

915
00:35:15,920 --> 00:35:18,160
can prevent uh some kind of token

916
00:35:18,160 --> 00:35:20,800
stealing or token reuse

917
00:35:20,800 --> 00:35:23,040
that would be a more appropriate use

918
00:35:23,040 --> 00:35:26,400
case uh as far as the oauth is concerned

919
00:35:26,400 --> 00:35:30,240
so that was uh my thought on it so maybe

920
00:35:30,240 --> 00:35:31,680
once again

921
00:35:31,680 --> 00:35:34,400
i'm gonna cut the line after lathe here

922
00:35:34,400 --> 00:35:35,359
so

923
00:35:35,359 --> 00:35:36,480
go ahead

924
00:35:36,480 --> 00:35:38,079
um yeah thanks for the question i didn't

925
00:35:38,079 --> 00:35:40,000
get the first part but i think i got the

926
00:35:40,000 --> 00:35:41,040
question

927
00:35:41,040 --> 00:35:41,420
um

928
00:35:41,420 --> 00:35:42,800
[Music]

929
00:35:42,800 --> 00:35:43,680
the

930
00:35:43,680 --> 00:35:45,920
i think the token theft

931
00:35:45,920 --> 00:35:48,720
topic is orthogonal to this so you need

932
00:35:48,720 --> 00:35:51,119
to prevent token theft in any case

933
00:35:51,119 --> 00:35:53,920
um the selective disclosure here is not

934
00:35:53,920 --> 00:35:57,040
meant as a way to

935
00:35:57,040 --> 00:35:58,880
protect data from

936
00:35:58,880 --> 00:36:01,200
malicious third parties that get into

937
00:36:01,200 --> 00:36:03,359
the flow and steal your token uh it's

938
00:36:03,359 --> 00:36:04,560
meant to

939
00:36:04,560 --> 00:36:07,359
just release the data that is necessary

940
00:36:07,359 --> 00:36:09,760
to any relying party and if that relying

941
00:36:09,760 --> 00:36:12,000
party of course misbehaves or becomes

942
00:36:12,000 --> 00:36:13,760
corrupted or something like that less

943
00:36:13,760 --> 00:36:15,920
data can be stolen from there

944
00:36:15,920 --> 00:36:18,720
but token theft is a different topic i

945
00:36:18,720 --> 00:36:21,520
think um i'm not we're not precluding

946
00:36:21,520 --> 00:36:23,760
other measures against token theft

947
00:36:23,760 --> 00:36:24,880
at all

948
00:36:24,880 --> 00:36:28,000
um great stuff so just one minor

949
00:36:28,000 --> 00:36:31,599
question um in the svc why is the salt

950
00:36:31,599 --> 00:36:33,680
field like has the

951
00:36:33,680 --> 00:36:35,200
why does it have the escape double

952
00:36:35,200 --> 00:36:36,720
quotes i mean could we just use the

953
00:36:36,720 --> 00:36:40,000
standard format for the store solved um

954
00:36:40,000 --> 00:36:41,920
the salt

955
00:36:41,920 --> 00:36:45,359
is a string so it's a basically far

956
00:36:45,359 --> 00:36:47,280
encoded random number

957
00:36:47,280 --> 00:36:48,480
um

958
00:36:48,480 --> 00:36:49,920
and

959
00:36:49,920 --> 00:36:52,400
the salt and the plain

960
00:36:52,400 --> 00:36:55,839
plain text claim value um form an array

961
00:36:55,839 --> 00:36:57,760
that is then json encoded that's where

962
00:36:57,760 --> 00:36:59,200
you get the

963
00:36:59,200 --> 00:37:02,960
um escaped double quotes from

964
00:37:02,960 --> 00:37:04,640
so the whole thing

965
00:37:04,640 --> 00:37:07,440
so it's it's not a json array itself

966
00:37:07,440 --> 00:37:09,760
like the value could be a json array and

967
00:37:09,760 --> 00:37:10,880
you could have

968
00:37:10,880 --> 00:37:13,520
the salt as one element of the array and

969
00:37:13,520 --> 00:37:16,000
the next one is your escape you know

970
00:37:16,000 --> 00:37:17,520
actual value right

971
00:37:17,520 --> 00:37:19,119
right that's how we define it so it's

972
00:37:19,119 --> 00:37:22,240
always so in the svc you always have for

973
00:37:22,240 --> 00:37:25,760
each claim a string that is json encoded

974
00:37:25,760 --> 00:37:27,920
representing an array of two elements

975
00:37:27,920 --> 00:37:32,960
assault and a claim value okay thanks

976
00:37:33,520 --> 00:37:36,400
oh and if you want so i i wanted to just

977
00:37:36,400 --> 00:37:38,640
address and comment on brian's

978
00:37:38,640 --> 00:37:41,839
um note on on maturity i think actually

979
00:37:41,839 --> 00:37:43,440
might be a good idea to try to

980
00:37:43,440 --> 00:37:45,200
capitalize on the some of the eu

981
00:37:45,200 --> 00:37:46,640
projects that's going to run on this to

982
00:37:46,640 --> 00:37:49,359
do an implementation report

983
00:37:49,359 --> 00:37:51,119
after this right because we are in a

984
00:37:51,119 --> 00:37:52,800
position to be able to take this from

985
00:37:52,800 --> 00:37:54,720
sort of relative we don't know whether

986
00:37:54,720 --> 00:37:56,320
this will actually work too well we

987
00:37:56,320 --> 00:37:58,400
actually know because we tested it

988
00:37:58,400 --> 00:38:00,640
uh so take that opportunity as my advice

989
00:38:00,640 --> 00:38:02,480
and and talk to i would just talk to

990
00:38:02,480 --> 00:38:06,079
peter oldman who is in the um

991
00:38:06,079 --> 00:38:08,000
the eu toolbox group

992
00:38:08,000 --> 00:38:09,920
and i think he is kind of has his hand

993
00:38:09,920 --> 00:38:11,440
on the trigger to figure out what

994
00:38:11,440 --> 00:38:13,119
whether this goes into the reference

995
00:38:13,119 --> 00:38:14,400
implementation

996
00:38:14,400 --> 00:38:15,680
um

997
00:38:15,680 --> 00:38:17,520
of the wallet

998
00:38:17,520 --> 00:38:18,720
and then you can

999
00:38:18,720 --> 00:38:19,680
have a

1000
00:38:19,680 --> 00:38:21,680
a wide sort of

1001
00:38:21,680 --> 00:38:22,720
um

1002
00:38:22,720 --> 00:38:25,040
widely deployed base to point that after

1003
00:38:25,040 --> 00:38:27,200
that

1004
00:38:27,599 --> 00:38:29,119
yeah go ahead just one second yeah

1005
00:38:29,119 --> 00:38:31,200
thanks so much for bringing it up um yes

1006
00:38:31,200 --> 00:38:34,079
there is a really thorough assessment of

1007
00:38:34,079 --> 00:38:37,359
sj job happening in yes working upon

1008
00:38:37,359 --> 00:38:39,680
toolbox and i think that would give us a

1009
00:38:39,680 --> 00:38:43,000
bit more confidence

1010
00:38:47,440 --> 00:38:48,240
okay

1011
00:38:48,240 --> 00:38:49,839
thank you all so

1012
00:38:49,839 --> 00:38:54,400
quick show friend who read the document

1013
00:38:57,200 --> 00:39:00,560
one two three four

1014
00:39:00,560 --> 00:39:03,280
one two three four five

1015
00:39:03,280 --> 00:39:05,760
six people

1016
00:39:05,760 --> 00:39:08,079
seven

1017
00:39:08,560 --> 00:39:11,560
okay

1018
00:39:12,720 --> 00:39:13,880
[Music]

1019
00:39:13,880 --> 00:39:17,610
[Laughter]

1020
00:39:21,680 --> 00:39:23,200
hey can i get

1021
00:39:23,200 --> 00:39:25,200
a number of volunteers also to review

1022
00:39:25,200 --> 00:39:28,240
the documents later on

1023
00:39:37,520 --> 00:39:38,800
brian

1024
00:39:38,800 --> 00:39:39,680
okay

1025
00:39:39,680 --> 00:39:42,680
okay

1026
00:39:51,440 --> 00:39:52,800
okay so

1027
00:39:52,800 --> 00:39:55,280
i'm gonna call for adoption and see how

1028
00:39:55,280 --> 00:39:57,040
how much support here

1029
00:39:57,040 --> 00:39:58,960
and obviously we will have to take it to

1030
00:39:58,960 --> 00:40:01,119
the list anyway but

1031
00:40:01,119 --> 00:40:03,440
i want to see kind of show hand who

1032
00:40:03,440 --> 00:40:04,400
supports

1033
00:40:04,400 --> 00:40:06,079
adopting this document as a working

1034
00:40:06,079 --> 00:40:07,839
group of documents okay so

1035
00:40:07,839 --> 00:40:11,839
one two three four five six seven eight

1036
00:40:11,839 --> 00:40:14,240
nine ten eleven

1037
00:40:14,240 --> 00:40:16,720
twelve i guess

1038
00:40:16,720 --> 00:40:19,919
i missed you there okay

1039
00:40:21,200 --> 00:40:22,000
okay

1040
00:40:22,000 --> 00:40:24,960
good

1041
00:40:24,960 --> 00:40:27,280
hey anybody against adopting this

1042
00:40:27,280 --> 00:40:29,760
document

1043
00:40:30,240 --> 00:40:33,839
okay thank you okay

1044
00:40:40,480 --> 00:40:42,400
okay perfect

1045
00:40:42,400 --> 00:40:43,760
danielle and christina thank you very

1046
00:40:43,760 --> 00:40:45,839
much and we'll take the adoption to the

1047
00:40:45,839 --> 00:40:48,240
list and take it from there okay

1048
00:40:48,240 --> 00:40:51,200
thank you um

1049
00:40:51,520 --> 00:40:53,839
oh yeah

1050
00:40:57,520 --> 00:41:00,400
i heard there's another

1051
00:41:04,079 --> 00:41:06,319
yeah yeah absolutely we'll continue that

1052
00:41:06,319 --> 00:41:09,960
discussion on the side meeting

1053
00:41:20,400 --> 00:41:24,040
it's not this much

1054
00:43:02,800 --> 00:43:03,680
um

1055
00:43:03,680 --> 00:43:06,640
muted me as well

1056
00:43:08,640 --> 00:43:10,079
how about now

1057
00:43:10,079 --> 00:43:13,560
test one two

1058
00:43:17,360 --> 00:43:20,459
[Music]

1059
00:43:21,440 --> 00:43:23,280
yeah test one two

1060
00:43:23,280 --> 00:43:24,240
yeah

1061
00:43:24,240 --> 00:43:27,200
so they can hear me and i can't hear me

1062
00:43:27,200 --> 00:43:29,200
i think so okay

1063
00:43:29,200 --> 00:43:30,640
good um

1064
00:43:30,640 --> 00:43:31,760
and one

1065
00:43:31,760 --> 00:43:33,680
bigger question arose and that is

1066
00:43:33,680 --> 00:43:35,760
regarding the pixie support

1067
00:43:35,760 --> 00:43:38,160
um whether to whether the pixel support

1068
00:43:38,160 --> 00:43:42,640
should be mandatory for asses

1069
00:43:42,880 --> 00:43:45,760
next slide please

1070
00:43:46,720 --> 00:43:49,520
so last time we discussed pixie already

1071
00:43:49,520 --> 00:43:51,760
unfortunately what happened in vienna

1072
00:43:51,760 --> 00:43:53,599
state in vienna

1073
00:43:53,599 --> 00:43:55,599
which means in this case that

1074
00:43:55,599 --> 00:43:58,400
i didn't get around to making uh the

1075
00:43:58,400 --> 00:44:00,960
changes to the spec um

1076
00:44:00,960 --> 00:44:03,359
quickly after the meeting i did now

1077
00:44:03,359 --> 00:44:05,440
um but yeah should have probably done

1078
00:44:05,440 --> 00:44:06,960
that earlier

1079
00:44:06,960 --> 00:44:09,599
um in vienna we discussed that the

1080
00:44:09,599 --> 00:44:12,079
routes around pixie are probably fine as

1081
00:44:12,079 --> 00:44:14,400
we have them right now

1082
00:44:14,400 --> 00:44:16,800
um and in short what we discussed there

1083
00:44:16,800 --> 00:44:19,280
was that the clients

1084
00:44:19,280 --> 00:44:21,520
are with some exceptions obliged to use

1085
00:44:21,520 --> 00:44:22,880
pixie

1086
00:44:22,880 --> 00:44:24,400
the exceptions is if you have a

1087
00:44:24,400 --> 00:44:26,880
confidential client and

1088
00:44:26,880 --> 00:44:29,520
you're using open id connect then under

1089
00:44:29,520 --> 00:44:33,680
precautions you may use nonce instead

1090
00:44:34,240 --> 00:44:37,440
servers are not forced to enforce pixie

1091
00:44:37,440 --> 00:44:39,280
we said that um

1092
00:44:39,280 --> 00:44:41,280
is up to the servers to do that or not

1093
00:44:41,280 --> 00:44:43,680
that's not what we say there

1094
00:44:43,680 --> 00:44:44,960
um

1095
00:44:44,960 --> 00:44:47,040
and we said that all of this needs a bit

1096
00:44:47,040 --> 00:44:48,720
more explanation that's the changes i

1097
00:44:48,720 --> 00:44:52,720
did already next slide please

1098
00:44:53,280 --> 00:44:55,760
now mike asked whether

1099
00:44:55,760 --> 00:44:57,760
we should so currently we also have the

1100
00:44:57,760 --> 00:45:00,079
sentence saying authorization servers

1101
00:45:00,079 --> 00:45:02,839
must support pixi

1102
00:45:02,839 --> 00:45:04,720
um

1103
00:45:04,720 --> 00:45:06,640
and

1104
00:45:06,640 --> 00:45:08,880
so the question now is do we want that

1105
00:45:08,880 --> 00:45:12,079
in there because um as we said clients

1106
00:45:12,079 --> 00:45:13,680
under some circumstances when they use

1107
00:45:13,680 --> 00:45:16,480
open id connect confidential clients and

1108
00:45:16,480 --> 00:45:19,520
take precautions then they can uh use

1109
00:45:19,520 --> 00:45:21,440
nonsense steps so what's the

1110
00:45:21,440 --> 00:45:23,680
value or what's the damage that we cause

1111
00:45:23,680 --> 00:45:26,079
by saying that um authorization servers

1112
00:45:26,079 --> 00:45:28,880
must support pixie

1113
00:45:28,880 --> 00:45:32,240
um next slide please

1114
00:45:32,240 --> 00:45:36,000
um currently we say that every as should

1115
00:45:36,000 --> 00:45:39,599
offer pxe so to say to the client

1116
00:45:39,599 --> 00:45:41,760
the reasoning behind that is that pixel

1117
00:45:41,760 --> 00:45:43,200
provides

1118
00:45:43,200 --> 00:45:45,359
robust defense not only against token

1119
00:45:45,359 --> 00:45:46,800
theft

1120
00:45:46,800 --> 00:45:48,480
or token misuse

1121
00:45:48,480 --> 00:45:52,880
but also against csf so as a client

1122
00:45:52,880 --> 00:45:55,280
as a modern client so to say i can say

1123
00:45:55,280 --> 00:45:56,720
instead of state

1124
00:45:56,720 --> 00:45:58,560
or additionally to state

1125
00:45:58,560 --> 00:46:00,560
i can use pixie

1126
00:46:00,560 --> 00:46:01,680
um

1127
00:46:01,680 --> 00:46:04,480
and that's more robust than than just

1128
00:46:04,480 --> 00:46:06,000
using state

1129
00:46:06,000 --> 00:46:07,440
the

1130
00:46:07,440 --> 00:46:10,400
reason reasoning behind that is that the

1131
00:46:10,400 --> 00:46:13,280
nonce may contain may be contained in

1132
00:46:13,280 --> 00:46:15,760
the authorization response as well

1133
00:46:15,760 --> 00:46:18,400
and if the attacker can intercept that

1134
00:46:18,400 --> 00:46:19,280
then

1135
00:46:19,280 --> 00:46:21,200
the attacker can forge a new response

1136
00:46:21,200 --> 00:46:22,720
with the same nonce

1137
00:46:22,720 --> 00:46:25,359
um and then inject that

1138
00:46:25,359 --> 00:46:27,200
obviously this requires some sector that

1139
00:46:27,200 --> 00:46:30,560
can intercept the authorization response

1140
00:46:30,560 --> 00:46:32,960
what's also nice is that the

1141
00:46:32,960 --> 00:46:34,560
check for pixi's

1142
00:46:34,560 --> 00:46:36,720
authorization server enforced

1143
00:46:36,720 --> 00:46:38,880
and that's really something that we see

1144
00:46:38,880 --> 00:46:41,119
in the yes ecosystem

1145
00:46:41,119 --> 00:46:43,440
with the implementations so speaking

1146
00:46:43,440 --> 00:46:46,240
from the experience we have there um

1147
00:46:46,240 --> 00:46:48,400
it's and and also experience that we

1148
00:46:48,400 --> 00:46:50,319
discussed earlier when creating this

1149
00:46:50,319 --> 00:46:52,800
draft from others the

1150
00:46:52,800 --> 00:46:55,839
if you can enforce the check by an as

1151
00:46:55,839 --> 00:46:57,839
which in this case obviously would be an

1152
00:46:57,839 --> 00:46:59,680
additional check then it cannot be

1153
00:46:59,680 --> 00:47:01,359
skipped by the client or if the client

1154
00:47:01,359 --> 00:47:03,599
starts using pixy the as can say okay

1155
00:47:03,599 --> 00:47:06,960
you also have to provide your verifier

1156
00:47:06,960 --> 00:47:09,920
that's really robust from our experience

1157
00:47:09,920 --> 00:47:12,400
next slide so so just one second here so

1158
00:47:12,400 --> 00:47:15,359
um i see justin and george

1159
00:47:15,359 --> 00:47:17,440
in the line are do you have questions

1160
00:47:17,440 --> 00:47:19,680
about something that was mentioned here

1161
00:47:19,680 --> 00:47:21,760
or

1162
00:47:21,760 --> 00:47:24,240
yeah i had a question um i'm still

1163
00:47:24,240 --> 00:47:27,280
struggling a little bit about so sorry

1164
00:47:27,280 --> 00:47:28,480
sorry

1165
00:47:28,480 --> 00:47:31,200
go ahead go george that's fine um when i

1166
00:47:31,200 --> 00:47:32,720
think about the state and the way we

1167
00:47:32,720 --> 00:47:35,359
talk about people in implementing state

1168
00:47:35,359 --> 00:47:37,200
right we tend to use it as a mechanism

1169
00:47:37,200 --> 00:47:38,640
to ensure the requests are coming

1170
00:47:38,640 --> 00:47:41,040
through the same device the same browser

1171
00:47:41,040 --> 00:47:42,720
right especially in a redirect based

1172
00:47:42,720 --> 00:47:43,760
flow

1173
00:47:43,760 --> 00:47:46,240
um and i don't think anything in ixy

1174
00:47:46,240 --> 00:47:48,079
requires that

1175
00:47:48,079 --> 00:47:49,359
so

1176
00:47:49,359 --> 00:47:50,800
are we

1177
00:47:50,800 --> 00:47:52,800
to basically say if we use pixi in place

1178
00:47:52,800 --> 00:47:54,240
of state

1179
00:47:54,240 --> 00:47:56,319
right again we're ensuring that only the

1180
00:47:56,319 --> 00:47:58,319
entity that started the flow can obtain

1181
00:47:58,319 --> 00:47:59,680
the tokens

1182
00:47:59,680 --> 00:48:00,400
but

1183
00:48:00,400 --> 00:48:03,359
at the end right but we don't know if

1184
00:48:03,359 --> 00:48:04,720
that bounce through a whole bunch of

1185
00:48:04,720 --> 00:48:06,640
different devices or not

1186
00:48:06,640 --> 00:48:09,440
so is that something we're okay losing

1187
00:48:09,440 --> 00:48:11,839
because that tends to be where state

1188
00:48:11,839 --> 00:48:13,200
gets pulled in at least the

1189
00:48:13,200 --> 00:48:15,520
implementations i've heard of state

1190
00:48:15,520 --> 00:48:17,680
or we need to add something to pixie

1191
00:48:17,680 --> 00:48:20,319
that basically says when you do pixie

1192
00:48:20,319 --> 00:48:22,319
from you know a confidential client or

1193
00:48:22,319 --> 00:48:25,520
from a back-end web server right then

1194
00:48:25,520 --> 00:48:27,440
stick some value

1195
00:48:27,440 --> 00:48:29,359
in the browser so that when you get the

1196
00:48:29,359 --> 00:48:31,440
redirect you can connect them all

1197
00:48:31,440 --> 00:48:33,200
together which isn't technically

1198
00:48:33,200 --> 00:48:35,040
required by pixie so anyway that was my

1199
00:48:35,040 --> 00:48:37,119
question

1200
00:48:37,119 --> 00:48:38,720
so i'm not sure if i've got the question

1201
00:48:38,720 --> 00:48:39,880
correctly but um

1202
00:48:39,880 --> 00:48:41,040
[Music]

1203
00:48:41,040 --> 00:48:43,280
are you saying that um

1204
00:48:43,280 --> 00:48:45,680
pixi might not be usable in like cross

1205
00:48:45,680 --> 00:48:47,680
device flows oh

1206
00:48:47,680 --> 00:48:50,319
no i'm saying pixi doesn't have any

1207
00:48:50,319 --> 00:48:53,599
requirement in it to basically track the

1208
00:48:53,599 --> 00:48:55,440
the the redirects are happening through

1209
00:48:55,440 --> 00:48:58,319
the same device

1210
00:48:59,280 --> 00:49:00,480
where

1211
00:49:00,480 --> 00:49:03,040
in the use of state basically did

1212
00:49:03,040 --> 00:49:04,720
require that so i feel like we're losing

1213
00:49:04,720 --> 00:49:06,720
something if we say do pixie and not

1214
00:49:06,720 --> 00:49:08,079
state

1215
00:49:08,079 --> 00:49:10,640
um now maybe in a certain context

1216
00:49:10,640 --> 00:49:12,559
tracking that the requests are coming

1217
00:49:12,559 --> 00:49:14,800
from the same device is not critical

1218
00:49:14,800 --> 00:49:15,680
um

1219
00:49:15,680 --> 00:49:18,559
but in many cases you don't want the

1220
00:49:18,559 --> 00:49:20,640
request to start on one device and

1221
00:49:20,640 --> 00:49:23,839
finish on another device

1222
00:49:23,839 --> 00:49:25,599
not sure what the

1223
00:49:25,599 --> 00:49:28,839
running around state is or was but

1224
00:49:28,839 --> 00:49:30,400
um

1225
00:49:30,400 --> 00:49:33,280
pixie has this this nice automatism

1226
00:49:33,280 --> 00:49:35,200
where the

1227
00:49:35,200 --> 00:49:38,319
so whoever uh goes to uh the token

1228
00:49:38,319 --> 00:49:39,839
endpoint has to provide the correct

1229
00:49:39,839 --> 00:49:42,400
verifier so you have to

1230
00:49:42,400 --> 00:49:44,640
so you have to take care that you don't

1231
00:49:44,640 --> 00:49:45,599
handle

1232
00:49:45,599 --> 00:49:48,000
and that verifier to anybody who's who

1233
00:49:48,000 --> 00:49:50,640
should not retreat

1234
00:49:50,640 --> 00:49:52,319
yes i guess to me

1235
00:49:52,319 --> 00:49:54,160
the difference is they were they were

1236
00:49:54,160 --> 00:49:56,400
handling two different aspects from a

1237
00:49:56,400 --> 00:49:58,720
security perspective for the a.s

1238
00:49:58,720 --> 00:50:00,800
and so i'm always a little bit concerned

1239
00:50:00,800 --> 00:50:03,040
when we say just do pixie don't worry

1240
00:50:03,040 --> 00:50:05,599
about state is basically the the end of

1241
00:50:05,599 --> 00:50:07,599
the thing we can we can you know take it

1242
00:50:07,599 --> 00:50:09,520
to the list or whatever

1243
00:50:09,520 --> 00:50:11,200
um

1244
00:50:11,200 --> 00:50:12,480
yeah

1245
00:50:12,480 --> 00:50:13,680
yeah let's let's continue that

1246
00:50:13,680 --> 00:50:15,680
discussion on the list um

1247
00:50:15,680 --> 00:50:17,920
justin

1248
00:50:17,920 --> 00:50:20,480
um on this topic uh agree with george

1249
00:50:20,480 --> 00:50:22,319
that they uh that pixie and state

1250
00:50:22,319 --> 00:50:26,160
address um sort of parallel but uh

1251
00:50:26,160 --> 00:50:29,599
orthogonal things and that the advice

1252
00:50:29,599 --> 00:50:31,200
should really should be to use the

1253
00:50:31,200 --> 00:50:33,280
mechanisms for what the mechanisms are

1254
00:50:33,280 --> 00:50:36,160
each are each meant for and um probably

1255
00:50:36,160 --> 00:50:37,599
advice to use them together in

1256
00:50:37,599 --> 00:50:39,839
appropriate ways so sticking something

1257
00:50:39,839 --> 00:50:41,760
in the browser so that you know that

1258
00:50:41,760 --> 00:50:43,359
you're looking at the right pixie value

1259
00:50:43,359 --> 00:50:45,440
instead of trying to smash everything

1260
00:50:45,440 --> 00:50:47,200
into the pixie values probably better

1261
00:50:47,200 --> 00:50:49,359
advice uh in terms of sort of the

1262
00:50:49,359 --> 00:50:50,559
layering here

1263
00:50:50,559 --> 00:50:52,400
um i actually forgot that i was on

1264
00:50:52,400 --> 00:50:53,920
thecube because i've been on the q since

1265
00:50:53,920 --> 00:50:56,000
the last presentation um

1266
00:50:56,000 --> 00:50:58,000
and uh what i wanted to say there was

1267
00:50:58,000 --> 00:51:00,000
that any call for adoption of sd jaw

1268
00:51:00,000 --> 00:51:02,000
needs to be done in the context of jwp

1269
00:51:02,000 --> 00:51:03,520
which is having it off i think it's

1270
00:51:03,520 --> 00:51:04,640
later today

1271
00:51:04,640 --> 00:51:06,400
um i know that daniel and christina are

1272
00:51:06,400 --> 00:51:07,440
aware of

1273
00:51:07,440 --> 00:51:09,520
that proposed work as well um i just

1274
00:51:09,520 --> 00:51:10,720
want to make sure that the rest of the

1275
00:51:10,720 --> 00:51:12,720
oauth working group is also aware of

1276
00:51:12,720 --> 00:51:15,920
that um because i do see a

1277
00:51:15,920 --> 00:51:19,680
a very real possibility of two

1278
00:51:19,680 --> 00:51:21,520
parallel efforts solving exactly the

1279
00:51:21,520 --> 00:51:23,760
same set of problems in very different

1280
00:51:23,760 --> 00:51:26,800
ways if we're not careful here uh so i

1281
00:51:26,800 --> 00:51:29,359
just want to make sure that everybody uh

1282
00:51:29,359 --> 00:51:32,160
that's interested in that is tracking uh

1283
00:51:32,160 --> 00:51:33,599
what are what's currently two different

1284
00:51:33,599 --> 00:51:36,559
pieces of work uh ideally i'd like to

1285
00:51:36,559 --> 00:51:40,240
see us turn that into one piece of work

1286
00:51:40,319 --> 00:51:42,240
okay thanks

1287
00:51:42,240 --> 00:51:44,160
both good points um

1288
00:51:44,160 --> 00:51:46,800
regarding the first point um mike posted

1289
00:51:46,800 --> 00:51:48,160
this on amazingness i think this would

1290
00:51:48,160 --> 00:51:50,640
be the right place to discuss that

1291
00:51:50,640 --> 00:51:53,359
so i would welcome both yours and

1292
00:51:53,359 --> 00:51:55,119
george's

1293
00:51:55,119 --> 00:51:57,359
emails there to to

1294
00:51:57,359 --> 00:52:00,319
discuss this further

1295
00:52:00,640 --> 00:52:02,000
you did

1296
00:52:02,000 --> 00:52:03,440
i think you did

1297
00:52:03,440 --> 00:52:04,400
so

1298
00:52:04,400 --> 00:52:06,800
time ago but yeah and i think that's the

1299
00:52:06,800 --> 00:52:08,559
place where we should discuss it

1300
00:52:08,559 --> 00:52:10,079
excellent um

1301
00:52:10,079 --> 00:52:12,000
and site meetings obviously yeah next

1302
00:52:12,000 --> 00:52:13,760
slide please i'm not sure so i'm

1303
00:52:13,760 --> 00:52:15,440
finishing up anyway okay

1304
00:52:15,440 --> 00:52:19,760
not much here okay um yeah um also if

1305
00:52:19,760 --> 00:52:21,760
you have pixie everywhere offered by an

1306
00:52:21,760 --> 00:52:24,640
as this provides consistencies uh

1307
00:52:24,640 --> 00:52:26,400
consistency for the clients so they know

1308
00:52:26,400 --> 00:52:29,839
what to expect next slide

1309
00:52:29,839 --> 00:52:32,079
um yeah let's discuss that then in the

1310
00:52:32,079 --> 00:52:33,280
site meeting

1311
00:52:33,280 --> 00:52:35,760
and yeah that's it from my side um i

1312
00:52:35,760 --> 00:52:37,359
hope to finish up a

1313
00:52:37,359 --> 00:52:38,720
20 this week

1314
00:52:38,720 --> 00:52:42,319
um and to close the issues soon

1315
00:52:42,319 --> 00:52:43,359
thank you

1316
00:52:43,359 --> 00:52:45,280
and if if we need to discuss more in the

1317
00:52:45,280 --> 00:52:47,680
same meeting happy to do that thank you

1318
00:52:47,680 --> 00:52:48,559
thanks

1319
00:52:48,559 --> 00:52:51,559
president

1320
00:53:14,079 --> 00:53:16,319
look at that

1321
00:53:16,319 --> 00:53:18,319
all right hi everybody i'm aaron parecki

1322
00:53:18,319 --> 00:53:22,240
um i decided to steal brian's uh

1323
00:53:22,240 --> 00:53:23,839
idea of putting photos on the first

1324
00:53:23,839 --> 00:53:25,359
slide this is a photo i took yesterday

1325
00:53:25,359 --> 00:53:28,240
morning from the top of that statue um

1326
00:53:28,240 --> 00:53:30,400
so here to start with 2.1 and then we're

1327
00:53:30,400 --> 00:53:31,920
going to also get into browser-based

1328
00:53:31,920 --> 00:53:34,240
apps and i have only 15 minutes so this

1329
00:53:34,240 --> 00:53:36,240
is going to be mostly just a status

1330
00:53:36,240 --> 00:53:37,359
update

1331
00:53:37,359 --> 00:53:39,599
and i hope that this will

1332
00:53:39,599 --> 00:53:41,119
spur some

1333
00:53:41,119 --> 00:53:42,400
ideas of things to talk about during the

1334
00:53:42,400 --> 00:53:45,200
side meetings but um we probably almost

1335
00:53:45,200 --> 00:53:46,559
certainly don't have time for actual

1336
00:53:46,559 --> 00:53:47,599
questions

1337
00:53:47,599 --> 00:53:50,160
about this stuff here

1338
00:53:50,160 --> 00:53:51,440
so um

1339
00:53:51,440 --> 00:53:54,319
last we talked about oauth 2.1 was in

1340
00:53:54,319 --> 00:53:56,480
vienna and um

1341
00:53:56,480 --> 00:53:57,359
the

1342
00:53:57,359 --> 00:53:58,079
we

1343
00:53:58,079 --> 00:53:59,599
made a lot of progress on some of the

1344
00:53:59,599 --> 00:54:01,359
open issues that there it was really

1345
00:54:01,359 --> 00:54:03,200
great um

1346
00:54:03,200 --> 00:54:04,240
the

1347
00:54:04,240 --> 00:54:07,440
big the biggest change is probably this

1348
00:54:07,440 --> 00:54:09,520
uh the whole concept of the credentialed

1349
00:54:09,520 --> 00:54:10,400
client

1350
00:54:10,400 --> 00:54:13,119
and the result of that discussion was

1351
00:54:13,119 --> 00:54:14,880
to take out that term

1352
00:54:14,880 --> 00:54:16,800
and at the same time

1353
00:54:16,800 --> 00:54:18,240
simplify the definition of what we

1354
00:54:18,240 --> 00:54:19,760
actually mean by confidential and public

1355
00:54:19,760 --> 00:54:21,920
clients which previously they had a lot

1356
00:54:21,920 --> 00:54:23,599
of

1357
00:54:23,599 --> 00:54:25,680
additional meaning behind them that was

1358
00:54:25,680 --> 00:54:27,920
sort of baked into a lot of the text so

1359
00:54:27,920 --> 00:54:30,319
the definition now is just confidential

1360
00:54:30,319 --> 00:54:32,319
client has credentials public clients do

1361
00:54:32,319 --> 00:54:34,240
not and there is no other assumptions

1362
00:54:34,240 --> 00:54:35,760
made about

1363
00:54:35,760 --> 00:54:37,520
other things about the clients like how

1364
00:54:37,520 --> 00:54:39,280
much you can trust them because it turns

1365
00:54:39,280 --> 00:54:41,680
out you can trust both confidential and

1366
00:54:41,680 --> 00:54:43,280
public clients differently depending on

1367
00:54:43,280 --> 00:54:45,359
a lot of other factors

1368
00:54:45,359 --> 00:54:47,440
uh incidentally that actually knocked

1369
00:54:47,440 --> 00:54:48,720
out a whole bunch of the open issues

1370
00:54:48,720 --> 00:54:49,920
that were

1371
00:54:49,920 --> 00:54:52,000
open on the spec because there was a lot

1372
00:54:52,000 --> 00:54:53,040
of stuff

1373
00:54:53,040 --> 00:54:56,400
that was baked into that whole idea

1374
00:54:56,400 --> 00:54:57,200
um

1375
00:54:57,200 --> 00:54:59,680
number 46 was an easy one um that we

1376
00:54:59,680 --> 00:55:01,440
discussed last time so that's now um

1377
00:55:01,440 --> 00:55:03,200
there's just a mention of that parameter

1378
00:55:03,200 --> 00:55:06,400
and reference out to to the new spec um

1379
00:55:06,400 --> 00:55:08,880
there is a new section we were the

1380
00:55:08,880 --> 00:55:10,240
editors were discussing this and we

1381
00:55:10,240 --> 00:55:11,760
realized that actually

1382
00:55:11,760 --> 00:55:16,000
um both core rfc and the uh bearer token

1383
00:55:16,000 --> 00:55:18,480
spec never actually explicitly say that

1384
00:55:18,480 --> 00:55:19,839
a resource server has to actually

1385
00:55:19,839 --> 00:55:21,760
validate tokens there isn't that

1386
00:55:21,760 --> 00:55:23,920
actually isn't spelled out and it's kind

1387
00:55:23,920 --> 00:55:26,000
of just an assumption that everybody

1388
00:55:26,000 --> 00:55:28,799
makes because it's kind of we all it

1389
00:55:28,799 --> 00:55:30,400
would be a good idea

1390
00:55:30,400 --> 00:55:32,480
um so there there that was in the

1391
00:55:32,480 --> 00:55:34,559
context of this lifetime

1392
00:55:34,559 --> 00:55:37,040
uh limited lifetime token discussion and

1393
00:55:37,040 --> 00:55:38,240
we realized actually there's nowhere

1394
00:55:38,240 --> 00:55:40,240
that actually says you have to validate

1395
00:55:40,240 --> 00:55:42,400
so there's a new section it's very short

1396
00:55:42,400 --> 00:55:44,640
that's what that says um that's the only

1397
00:55:44,640 --> 00:55:46,319
really new thing everything else was

1398
00:55:46,319 --> 00:55:48,880
things we discussed previously um and

1399
00:55:48,880 --> 00:55:50,960
then yeah the last one there is the

1400
00:55:50,960 --> 00:55:52,960
the whole discussion around the uri the

1401
00:55:52,960 --> 00:55:54,880
redirect uri schemes of which is

1402
00:55:54,880 --> 00:55:56,720
supported so they're in the or the

1403
00:55:56,720 --> 00:55:59,280
better order now the more secure order

1404
00:55:59,280 --> 00:56:01,200
and um

1405
00:56:01,200 --> 00:56:03,040
the sentence that says asses have to

1406
00:56:03,040 --> 00:56:04,400
support all three is removed because

1407
00:56:04,400 --> 00:56:06,319
that was really just for

1408
00:56:06,319 --> 00:56:08,720
that was in the data about bcp for

1409
00:56:08,720 --> 00:56:11,680
as supporting native apps

1410
00:56:11,680 --> 00:56:14,960
um some other changes since the uh since

1411
00:56:14,960 --> 00:56:16,640
the last meeting there's a bunch of

1412
00:56:16,640 --> 00:56:18,480
references that have been updated so

1413
00:56:18,480 --> 00:56:20,319
thanks everybody who's working on that

1414
00:56:20,319 --> 00:56:22,640
um there were some unused references and

1415
00:56:22,640 --> 00:56:24,960
a bunch of new rfcs again so that's

1416
00:56:24,960 --> 00:56:26,160
always great

1417
00:56:26,160 --> 00:56:27,040
um

1418
00:56:27,040 --> 00:56:28,480
there's

1419
00:56:28,480 --> 00:56:31,040
some more clarifications of of some of

1420
00:56:31,040 --> 00:56:33,920
the terms and uh and other

1421
00:56:33,920 --> 00:56:35,680
bits and pieces these are issues that

1422
00:56:35,680 --> 00:56:36,960
were already open from a lot of the

1423
00:56:36,960 --> 00:56:39,760
feedback that was uh from vittorio and

1424
00:56:39,760 --> 00:56:41,359
justin

1425
00:56:41,359 --> 00:56:43,839
so uh those are all linked to there the

1426
00:56:43,839 --> 00:56:46,400
um url there will give you the diff of

1427
00:56:46,400 --> 00:56:48,960
what changed in the source which

1428
00:56:48,960 --> 00:56:50,240
sometimes easier to read than the actual

1429
00:56:50,240 --> 00:56:53,680
spec difference and then um i made a

1430
00:56:53,680 --> 00:56:55,839
milestone link that links to all of the

1431
00:56:55,839 --> 00:56:57,440
issues that were closed from this as

1432
00:56:57,440 --> 00:56:58,720
well in case you're curious about

1433
00:56:58,720 --> 00:57:01,680
tracking all the details

1434
00:57:01,680 --> 00:57:02,110
um

1435
00:57:02,110 --> 00:57:04,720
[Music]

1436
00:57:04,720 --> 00:57:08,000
so some of the i did publish last night

1437
00:57:08,000 --> 00:57:10,640
sorry draft six which is snapshotting

1438
00:57:10,640 --> 00:57:13,040
all that stuff um again there's not that

1439
00:57:13,040 --> 00:57:14,000
much

1440
00:57:14,000 --> 00:57:16,000
the only thing that's really new that uh

1441
00:57:16,000 --> 00:57:17,520
was that sectional validating access

1442
00:57:17,520 --> 00:57:18,640
tokens which again shouldn't be a

1443
00:57:18,640 --> 00:57:20,640
surprise to anybody uh other than that

1444
00:57:20,640 --> 00:57:21,680
it was all of the changes that we

1445
00:57:21,680 --> 00:57:23,200
discussed in vienna

1446
00:57:23,200 --> 00:57:26,640
um so future stuff uh there are still

1447
00:57:26,640 --> 00:57:29,200
several more things uh open on the

1448
00:57:29,200 --> 00:57:31,599
github page to discuss and then

1449
00:57:31,599 --> 00:57:32,559
there's

1450
00:57:32,559 --> 00:57:35,680
two big sections left from the initial

1451
00:57:35,680 --> 00:57:37,440
feedback on the very first draft which

1452
00:57:37,440 --> 00:57:39,119
is

1453
00:57:39,119 --> 00:57:40,799
some of the security considerations

1454
00:57:40,799 --> 00:57:43,040
still and then the native apps section

1455
00:57:43,040 --> 00:57:45,040
i know vittorio is waiting very eagerly

1456
00:57:45,040 --> 00:57:48,160
on me to review that section so that

1457
00:57:48,160 --> 00:57:50,799
should actually probably um

1458
00:57:50,799 --> 00:57:51,839
that'll be an interesting discussion

1459
00:57:51,839 --> 00:57:54,480
when we finally do have that

1460
00:57:54,480 --> 00:57:56,160
um there's still

1461
00:57:56,160 --> 00:57:57,839
more to do's on

1462
00:57:57,839 --> 00:57:58,799
um

1463
00:57:58,799 --> 00:57:59,920
moving

1464
00:57:59,920 --> 00:58:01,280
some of the normative language from the

1465
00:58:01,280 --> 00:58:02,960
security considerations that's been sort

1466
00:58:02,960 --> 00:58:04,400
of an ongoing in progress of like

1467
00:58:04,400 --> 00:58:05,920
pulling up the things that say you have

1468
00:58:05,920 --> 00:58:07,359
to do this and putting it where it

1469
00:58:07,359 --> 00:58:08,400
belongs

1470
00:58:08,400 --> 00:58:10,880
um which is again part of the whole idea

1471
00:58:10,880 --> 00:58:13,040
of this is now taking several documents

1472
00:58:13,040 --> 00:58:16,640
and collapsing it into a shorter one

1473
00:58:16,640 --> 00:58:19,920
um so that's basically it um i'm hoping

1474
00:58:19,920 --> 00:58:20,839
that we

1475
00:58:20,839 --> 00:58:23,920
can have some of these discussions uh in

1476
00:58:23,920 --> 00:58:25,760
the side meeting i don't know which day

1477
00:58:25,760 --> 00:58:28,079
but would love to

1478
00:58:28,079 --> 00:58:30,480
have some time set aside

1479
00:58:30,480 --> 00:58:32,880
to uh knock out some more of these and

1480
00:58:32,880 --> 00:58:35,280
i've got a couple of uh tags on the

1481
00:58:35,280 --> 00:58:37,599
issues i do encourage you to go like

1482
00:58:37,599 --> 00:58:38,799
look at the issues that are open on

1483
00:58:38,799 --> 00:58:40,799
there and

1484
00:58:40,799 --> 00:58:42,240
then

1485
00:58:42,240 --> 00:58:43,920
see if any of them stick out to you as

1486
00:58:43,920 --> 00:58:45,280
things you want to make sure you get

1487
00:58:45,280 --> 00:58:49,960
discussed sooner rather than later

1488
00:58:50,160 --> 00:58:51,680
okay

1489
00:58:51,680 --> 00:58:54,400
how long was that

1490
00:58:54,400 --> 00:58:57,839
five minutes maybe great okay

1491
00:58:57,839 --> 00:58:59,440
so

1492
00:58:59,440 --> 00:59:02,559
second document new photo from

1493
00:59:02,559 --> 00:59:05,040
uh also from the town hall city hall

1494
00:59:05,040 --> 00:59:07,280
um browser-based apps this is a draft

1495
00:59:07,280 --> 00:59:08,160
that

1496
00:59:08,160 --> 00:59:09,760
um

1497
00:59:09,760 --> 00:59:12,960
we started a while ago and it turns out

1498
00:59:12,960 --> 00:59:15,520
actually hadn't discussed in any of the

1499
00:59:15,520 --> 00:59:17,520
meetings since

1500
00:59:17,520 --> 00:59:19,920
april 2020

1501
00:59:19,920 --> 00:59:20,720
so

1502
00:59:20,720 --> 00:59:22,240
that was one of the virtual interim

1503
00:59:22,240 --> 00:59:24,480
meetings and it is completely my fault

1504
00:59:24,480 --> 00:59:26,000
for just not putting it on the agenda

1505
00:59:26,000 --> 00:59:28,640
since then so some quick quick refresher

1506
00:59:28,640 --> 00:59:30,160
of this document

1507
00:59:30,160 --> 00:59:32,559
the idea is this document is meant to

1508
00:59:32,559 --> 00:59:34,000
be recommendations for people who are

1509
00:59:34,000 --> 00:59:35,920
building browser-based apps also

1510
00:59:35,920 --> 00:59:38,000
commonly known as single-page apps using

1511
00:59:38,000 --> 00:59:40,079
javascript frameworks in a browser

1512
00:59:40,079 --> 00:59:41,839
it is meant to be a sort of counterpart

1513
00:59:41,839 --> 00:59:44,480
to the native apps bcp which

1514
00:59:44,480 --> 00:59:47,359
goes into detail about browser specifics

1515
00:59:47,359 --> 00:59:49,119
and browser apis that really are only

1516
00:59:49,119 --> 00:59:51,119
relevant relevant to javascript

1517
00:59:51,119 --> 00:59:52,480
developers

1518
00:59:52,480 --> 00:59:53,760
so

1519
00:59:53,760 --> 00:59:54,960
the

1520
00:59:54,960 --> 00:59:57,280
um

1521
00:59:57,839 --> 01:00:00,559
the last time that this was discussed

1522
01:00:00,559 --> 01:00:02,240
was draft six

1523
01:00:02,240 --> 01:00:03,440
there's been a little bit of work in

1524
01:00:03,440 --> 01:00:05,760
between then and now uh we just haven't

1525
01:00:05,760 --> 01:00:07,760
had any presentations on it

1526
01:00:07,760 --> 01:00:11,119
in any of the meetings um

1527
01:00:11,119 --> 01:00:13,760
there are the the big changes are here

1528
01:00:13,760 --> 01:00:15,119
um

1529
01:00:15,119 --> 01:00:16,319
the

1530
01:00:16,319 --> 01:00:18,319
the clarification around the requirement

1531
01:00:18,319 --> 01:00:21,520
for pixie um is

1532
01:00:21,520 --> 01:00:23,040
now it now explicitly says it's only

1533
01:00:23,040 --> 01:00:25,760
about the access token issuance um

1534
01:00:25,760 --> 01:00:27,200
there's the reference to the new iss

1535
01:00:27,200 --> 01:00:30,480
parameter there's

1536
01:00:30,480 --> 01:00:33,520
some more notes about the

1537
01:00:33,520 --> 01:00:35,599
the scenario of

1538
01:00:35,599 --> 01:00:37,119
the single page app is actually on the

1539
01:00:37,119 --> 01:00:39,040
same domain as the rest of the system

1540
01:00:39,040 --> 01:00:41,040
which is the sort of smallest possible

1541
01:00:41,040 --> 01:00:43,839
deployment scenario of an oauth system

1542
01:00:43,839 --> 01:00:46,240
um and then there's

1543
01:00:46,240 --> 01:00:48,960
in may may last year

1544
01:00:48,960 --> 01:00:51,359
again i did an update to pull

1545
01:00:51,359 --> 01:00:52,720
the recommendations from the security

1546
01:00:52,720 --> 01:00:55,520
bcp at that date into the

1547
01:00:55,520 --> 01:00:58,400
browser bcp which means there's now more

1548
01:00:58,400 --> 01:01:01,440
changes to do from may until now

1549
01:01:01,440 --> 01:01:05,200
any of the security bcp that's changed

1550
01:01:05,200 --> 01:01:07,839
and there are um

1551
01:01:07,839 --> 01:01:10,480
a bunch of just minor text uh cleanups

1552
01:01:10,480 --> 01:01:12,480
and stuff

1553
01:01:12,480 --> 01:01:13,280
the

1554
01:01:13,280 --> 01:01:16,000
big thing that is still in the works um

1555
01:01:16,000 --> 01:01:17,599
yannick has been very

1556
01:01:17,599 --> 01:01:20,160
helpful and

1557
01:01:20,160 --> 01:01:21,839
in in adding this pattern this was

1558
01:01:21,839 --> 01:01:23,040
something that we've

1559
01:01:23,040 --> 01:01:26,640
identified previously and

1560
01:01:26,640 --> 01:01:28,160
i think actually this was brought up at

1561
01:01:28,160 --> 01:01:30,000
the last time at the last interim

1562
01:01:30,000 --> 01:01:32,799
meeting uh the whole idea of using a

1563
01:01:32,799 --> 01:01:34,720
service worker as the oauth client

1564
01:01:34,720 --> 01:01:36,640
within the context of a javascript app

1565
01:01:36,640 --> 01:01:39,040
is a pattern that exists it i've seen

1566
01:01:39,040 --> 01:01:41,359
some documentation about it from

1567
01:01:41,359 --> 01:01:43,040
people's implementations

1568
01:01:43,040 --> 01:01:44,079
um

1569
01:01:44,079 --> 01:01:44,880
that

1570
01:01:44,880 --> 01:01:46,640
is now there's a whole new section about

1571
01:01:46,640 --> 01:01:48,319
that pattern is one of the main patterns

1572
01:01:48,319 --> 01:01:49,680
basically there's a section in this

1573
01:01:49,680 --> 01:01:51,440
document that talks about like here's a

1574
01:01:51,440 --> 01:01:53,440
couple different options you have

1575
01:01:53,440 --> 01:01:55,760
about how you can do oauth in a browser

1576
01:01:55,760 --> 01:01:57,359
whether that's

1577
01:01:57,359 --> 01:02:00,000
using a a back end that

1578
01:02:00,000 --> 01:02:02,400
is done is running server side code or

1579
01:02:02,400 --> 01:02:04,880
if you're doing purely a single page app

1580
01:02:04,880 --> 01:02:07,039
as the oauth client and then even within

1581
01:02:07,039 --> 01:02:09,039
that you have the difference between

1582
01:02:09,039 --> 01:02:10,480
just javascript code running in the

1583
01:02:10,480 --> 01:02:12,880
browser or a service worker being the

1584
01:02:12,880 --> 01:02:14,480
client itself which can better protect

1585
01:02:14,480 --> 01:02:17,599
tokens so

1586
01:02:17,599 --> 01:02:19,200
there are a lot of trade-offs between

1587
01:02:19,200 --> 01:02:21,039
all of them so the whole point of this

1588
01:02:21,039 --> 01:02:22,799
draft is to spell out the trade-offs not

1589
01:02:22,799 --> 01:02:24,160
necessarily say this is the only

1590
01:02:24,160 --> 01:02:26,319
possible right solution

1591
01:02:26,319 --> 01:02:28,799
but this was a big big chunk it's still

1592
01:02:28,799 --> 01:02:30,240
in progress there's a couple of notes in

1593
01:02:30,240 --> 01:02:32,160
that pull request about

1594
01:02:32,160 --> 01:02:34,079
some details still to work out on this

1595
01:02:34,079 --> 01:02:36,240
but this is a

1596
01:02:36,240 --> 01:02:37,039
great

1597
01:02:37,039 --> 01:02:39,119
great start there

1598
01:02:39,119 --> 01:02:41,359
um and then

1599
01:02:41,359 --> 01:02:42,160
the

1600
01:02:42,160 --> 01:02:44,240
things that we're going to

1601
01:02:44,240 --> 01:02:46,839
do in the future and the two

1602
01:02:46,839 --> 01:02:49,440
biggest items are we need to make sure

1603
01:02:49,440 --> 01:02:51,440
that it's up to date with the latest

1604
01:02:51,440 --> 01:02:53,200
info in the security bcp since that has

1605
01:02:53,200 --> 01:02:56,960
been changing and then secondly um

1606
01:02:56,960 --> 01:03:00,160
there's a lot of people want guidance on

1607
01:03:00,160 --> 01:03:01,920
how do you store tokens in a browser

1608
01:03:01,920 --> 01:03:04,480
like where do you put them what is

1609
01:03:04,480 --> 01:03:06,000
what do we need to know about that and

1610
01:03:06,000 --> 01:03:07,520
again there's no

1611
01:03:07,520 --> 01:03:09,119
right or wrong there's just a lot of

1612
01:03:09,119 --> 01:03:10,720
trade-offs for the different options so

1613
01:03:10,720 --> 01:03:11,680
it's important to spell out the

1614
01:03:11,680 --> 01:03:13,680
trade-offs because people will end up

1615
01:03:13,680 --> 01:03:16,079
making different decisions anyway

1616
01:03:16,079 --> 01:03:17,680
the two i put on here is like you could

1617
01:03:17,680 --> 01:03:18,880
just store them in memory where there is

1618
01:03:18,880 --> 01:03:20,160
no persistence at all which is

1619
01:03:20,160 --> 01:03:21,920
technically the most secure

1620
01:03:21,920 --> 01:03:23,920
or you store tokens in local storage

1621
01:03:23,920 --> 01:03:25,520
because you want them permanently in the

1622
01:03:25,520 --> 01:03:27,280
browser and again

1623
01:03:27,280 --> 01:03:28,799
both of those have

1624
01:03:28,799 --> 01:03:31,039
down upsides and downsides and there's a

1625
01:03:31,039 --> 01:03:32,640
couple other versions of various things

1626
01:03:32,640 --> 01:03:33,760
you can do as well so we just want to

1627
01:03:33,760 --> 01:03:34,960
make sure that we get all those listed

1628
01:03:34,960 --> 01:03:35,839
out

1629
01:03:35,839 --> 01:03:37,680
um so

1630
01:03:37,680 --> 01:03:39,119
those are the big things to discuss i'm

1631
01:03:39,119 --> 01:03:40,480
sure a lot of people here have opinions

1632
01:03:40,480 --> 01:03:42,480
i see a opinion face happening in front

1633
01:03:42,480 --> 01:03:43,359
of me

1634
01:03:43,359 --> 01:03:45,599
so um

1635
01:03:45,599 --> 01:03:48,079
we will uh i'm again hoping we can have

1636
01:03:48,079 --> 01:03:49,839
some time during the side meetings to

1637
01:03:49,839 --> 01:03:51,200
discuss that

1638
01:03:51,200 --> 01:03:54,240
um i think that's the last slide so

1639
01:03:54,240 --> 01:03:55,599
yeah

1640
01:03:55,599 --> 01:03:57,359
thank you and

1641
01:03:57,359 --> 01:03:59,680
aaron do you have a quick comment

1642
01:03:59,680 --> 01:04:03,680
tutorial in the queue go ahead

1643
01:04:06,400 --> 01:04:09,839
thanks for the update very very exciting

1644
01:04:09,839 --> 01:04:11,760
during the osw

1645
01:04:11,760 --> 01:04:13,200
there was there is a big discussion

1646
01:04:13,200 --> 01:04:14,799
about the fact that

1647
01:04:14,799 --> 01:04:15,599
um

1648
01:04:15,599 --> 01:04:17,599
storing the tokens isn't as much of a

1649
01:04:17,599 --> 01:04:20,319
problem but is the acquisition of the

1650
01:04:20,319 --> 01:04:22,720
token which is the critical part because

1651
01:04:22,720 --> 01:04:24,559
you can be super secure where you save

1652
01:04:24,559 --> 01:04:27,039
stuff but if an attacker has the ability

1653
01:04:27,039 --> 01:04:29,839
to use you to means new tokens then all

1654
01:04:29,839 --> 01:04:32,880
that production is pointless and um

1655
01:04:32,880 --> 01:04:34,720
so there were like long discussions

1656
01:04:34,720 --> 01:04:37,039
about the bff pattern and the

1657
01:04:37,039 --> 01:04:40,480
intermediaries like the tmi bff which

1658
01:04:40,480 --> 01:04:43,359
with brian we suggested so

1659
01:04:43,359 --> 01:04:46,000
would you contemplate the possibility of

1660
01:04:46,000 --> 01:04:49,520
uh covering those things in uh

1661
01:04:49,520 --> 01:04:51,520
in the browser based up spec in any

1662
01:04:51,520 --> 01:04:54,559
capacity from mentioning that they exist

1663
01:04:54,559 --> 01:04:57,839
all the way to actually embedding uh for

1664
01:04:57,839 --> 01:04:59,760
example the guidance that we were

1665
01:04:59,760 --> 01:05:02,640
putting together for tmi bff

1666
01:05:02,640 --> 01:05:04,720
yeah definitely um definitely at the

1667
01:05:04,720 --> 01:05:07,039
very least mentioning all of them uh are

1668
01:05:07,039 --> 01:05:08,559
a good plan that's what i want to do

1669
01:05:08,559 --> 01:05:11,599
with that new section um i noticed that

1670
01:05:11,599 --> 01:05:13,039
we haven't had a lot of discussion on

1671
01:05:13,039 --> 01:05:15,839
the tmi bff document in a while either

1672
01:05:15,839 --> 01:05:17,599
so maybe it does make sense to combine

1673
01:05:17,599 --> 01:05:20,160
these two and just put it in as

1674
01:05:20,160 --> 01:05:21,920
here's how you do this pattern because

1675
01:05:21,920 --> 01:05:23,680
it is basically one more option in the

1676
01:05:23,680 --> 01:05:25,440
tool belt and

1677
01:05:25,440 --> 01:05:27,039
that will be a fine place for i'm happy

1678
01:05:27,039 --> 01:05:29,599
to do that that's

1679
01:05:29,599 --> 01:05:31,359
if that works for you as well so

1680
01:05:31,359 --> 01:05:33,119
wonderful thank you

1681
01:05:33,119 --> 01:05:34,880
okay awesome

1682
01:05:34,880 --> 01:05:36,160
thank you aaron

1683
01:05:36,160 --> 01:05:39,598
thank you all thank you thanks

1684
01:05:44,559 --> 01:05:47,200
i'm gonna present now

1685
01:05:47,200 --> 01:05:50,200
22.

1686
01:05:50,240 --> 01:05:52,810
drive here

1687
01:05:52,810 --> 01:05:55,909
[Music]

1688
01:05:58,160 --> 01:06:00,399
okay

1689
01:06:01,039 --> 01:06:04,640
um we're gonna talk about nested jot or

1690
01:06:04,640 --> 01:06:07,200
multi-subject dot or jot embedded token

1691
01:06:07,200 --> 01:06:08,480
so the whole

1692
01:06:08,480 --> 01:06:10,799
idea and the whole

1693
01:06:10,799 --> 01:06:12,799
document started with the idea of a

1694
01:06:12,799 --> 01:06:15,280
specific use case that needed a way to

1695
01:06:15,280 --> 01:06:18,480
embed one jot into another jot

1696
01:06:18,480 --> 01:06:21,599
and the natural way or a natural place

1697
01:06:21,599 --> 01:06:23,280
for it was kind of to start with a

1698
01:06:23,280 --> 01:06:26,079
nested job then this the jot is a a

1699
01:06:26,079 --> 01:06:28,400
mechanism that allows you to

1700
01:06:28,400 --> 01:06:31,280
have a payload of that the payload of a

1701
01:06:31,280 --> 01:06:34,319
jot contains another jot but it has it

1702
01:06:34,319 --> 01:06:36,319
doesn't allow you to contain

1703
01:06:36,319 --> 01:06:38,319
doesn't allow the outer jaw to contain

1704
01:06:38,319 --> 01:06:40,000
its own um

1705
01:06:40,000 --> 01:06:42,480
its own claims

1706
01:06:42,480 --> 01:06:45,440
and so after i kind of published that i

1707
01:06:45,440 --> 01:06:47,359
started getting more requests for

1708
01:06:47,359 --> 01:06:49,280
different ideas or different use cases

1709
01:06:49,280 --> 01:06:51,200
that need something like this

1710
01:06:51,200 --> 01:06:52,880
and it quickly becomes clear that there

1711
01:06:52,880 --> 01:06:54,400
are so many use cases that need

1712
01:06:54,400 --> 01:06:55,680
something like this

1713
01:06:55,680 --> 01:06:58,480
and the relationship also needed to

1714
01:06:58,480 --> 01:07:00,480
allow you to embed

1715
01:07:00,480 --> 01:07:03,200
one or multiple tokens into the jar

1716
01:07:03,200 --> 01:07:05,359
itself and the relationship between

1717
01:07:05,359 --> 01:07:08,880
those tokens and the main token

1718
01:07:08,880 --> 01:07:11,520
and the focus was mainly on that in

1719
01:07:11,520 --> 01:07:13,760
access token in that case

1720
01:07:13,760 --> 01:07:16,319
and then more recently it was clear that

1721
01:07:16,319 --> 01:07:18,799
there are even more use cases and in

1722
01:07:18,799 --> 01:07:22,079
this case for the id token to um contain

1723
01:07:22,079 --> 01:07:25,599
a jot with multiple a tokens like this

1724
01:07:25,599 --> 01:07:28,480
so um and for this reason

1725
01:07:28,480 --> 01:07:32,000
you see dick and giuseppe are now

1726
01:07:32,000 --> 01:07:34,799
going to be a co-author of this document

1727
01:07:34,799 --> 01:07:36,480
we're going to work on updating the

1728
01:07:36,480 --> 01:07:38,559
document and kind of provide spell out

1729
01:07:38,559 --> 01:07:40,160
all those details

1730
01:07:40,160 --> 01:07:42,240
and and so for this reason we're not

1731
01:07:42,240 --> 01:07:44,160
asking for adoption at this stage just

1732
01:07:44,160 --> 01:07:46,000
and i present the idea the concept the

1733
01:07:46,000 --> 01:07:47,839
problems we're trying to solve

1734
01:07:47,839 --> 01:07:50,000
and um maybe next time we'll ask for the

1735
01:07:50,000 --> 01:07:52,240
adoption but for now just say get some

1736
01:07:52,240 --> 01:07:53,359
feedback

1737
01:07:53,359 --> 01:07:56,079
a next slide please

1738
01:07:56,079 --> 01:07:59,440
okay so the goal is to define a way to

1739
01:07:59,440 --> 01:08:03,280
allow you to embed one or more jots into

1740
01:08:03,280 --> 01:08:04,960
a one jot

1741
01:08:04,960 --> 01:08:07,520
next slide

1742
01:08:09,200 --> 01:08:11,839
so why is that useful the obvious one is

1743
01:08:11,839 --> 01:08:13,359
the other trail you want to be able to

1744
01:08:13,359 --> 01:08:16,479
know who accessed what and when

1745
01:08:16,479 --> 01:08:19,439
and in some use cases it's very useful

1746
01:08:19,439 --> 01:08:21,439
because it allows you to present

1747
01:08:21,439 --> 01:08:23,679
a information from those jots in real

1748
01:08:23,679 --> 01:08:25,439
time and we'll talk about an example

1749
01:08:25,439 --> 01:08:28,000
later on and obviously an evaluation you

1750
01:08:28,000 --> 01:08:30,640
get that token you evaluate this you can

1751
01:08:30,640 --> 01:08:32,880
make decisions based on authorization

1752
01:08:32,880 --> 01:08:35,120
basic decisions also based on the

1753
01:08:35,120 --> 01:08:37,040
context that's that

1754
01:08:37,040 --> 01:08:41,040
token next next slide please

1755
01:08:41,040 --> 01:08:42,000
so

1756
01:08:42,000 --> 01:08:44,319
i run a quickly

1757
01:08:44,319 --> 01:08:47,839
for with many examples of use cases so a

1758
01:08:47,839 --> 01:08:50,080
primary a secondary related subject so

1759
01:08:50,080 --> 01:08:51,679
you have think about

1760
01:08:51,679 --> 01:08:54,399
a child in a parent use case or a pet

1761
01:08:54,399 --> 01:08:56,799
and an owner use case you have a parent

1762
01:08:56,799 --> 01:08:58,560
that wants to access the resources of

1763
01:08:58,560 --> 01:09:02,400
the child so that's um

1764
01:09:03,520 --> 01:09:05,279
the parent will be able to log in and

1765
01:09:05,279 --> 01:09:07,679
then when the resource gets that the

1766
01:09:07,679 --> 01:09:09,520
token will get that token

1767
01:09:09,520 --> 01:09:12,238
for in the the parent and the child

1768
01:09:12,238 --> 01:09:15,439
right so next slide another example

1769
01:09:15,439 --> 01:09:16,479
would be

1770
01:09:16,479 --> 01:09:18,560
for a multiple primary subject so you

1771
01:09:18,560 --> 01:09:22,238
have a think about a marriage couple uh

1772
01:09:22,238 --> 01:09:23,600
when um

1773
01:09:23,600 --> 01:09:26,080
that the husband or wife want to log in

1774
01:09:26,080 --> 01:09:27,040
and

1775
01:09:27,040 --> 01:09:30,000
perform some operation based on on the

1776
01:09:30,000 --> 01:09:30,960
um

1777
01:09:30,960 --> 01:09:33,439
on the ability to access the other

1778
01:09:33,439 --> 01:09:34,799
the other side

1779
01:09:34,799 --> 01:09:36,080
resources

1780
01:09:36,080 --> 01:09:39,120
um next slide

1781
01:09:40,399 --> 01:09:42,560
another third example is that a

1782
01:09:42,560 --> 01:09:45,359
delegation of authority think about

1783
01:09:45,359 --> 01:09:46,960
an admin for example doing some

1784
01:09:46,960 --> 01:09:49,040
operation on the use on the user's

1785
01:09:49,040 --> 01:09:50,158
behalf

1786
01:09:50,158 --> 01:09:52,880
and accessing this those resources right

1787
01:09:52,880 --> 01:09:55,679
next slide please

1788
01:09:57,280 --> 01:09:59,840
so all the use cases that we we

1789
01:09:59,840 --> 01:10:02,480
mentioned so far where

1790
01:10:02,480 --> 01:10:06,560
the tokens were issued by the same idp

1791
01:10:06,560 --> 01:10:07,840
that the ones that i'm going to talk

1792
01:10:07,840 --> 01:10:08,640
about

1793
01:10:08,640 --> 01:10:10,800
are different in the sense that

1794
01:10:10,800 --> 01:10:12,880
tokens could be issued by completely

1795
01:10:12,880 --> 01:10:15,520
different idps and prime example is a

1796
01:10:15,520 --> 01:10:17,840
stir a use case which is a telephony use

1797
01:10:17,840 --> 01:10:20,960
case think about a use case where a

1798
01:10:20,960 --> 01:10:22,480
calls b again we're talking about

1799
01:10:22,480 --> 01:10:24,719
telephone here a calls b

1800
01:10:24,719 --> 01:10:26,880
but b has a redirection

1801
01:10:26,880 --> 01:10:28,159
to c

1802
01:10:28,159 --> 01:10:30,560
so when when that happens

1803
01:10:30,560 --> 01:10:32,719
uh when c receives a call they want to

1804
01:10:32,719 --> 01:10:35,360
know that the actual the initial call

1805
01:10:35,360 --> 01:10:38,239
was actually from a to b and not

1806
01:10:38,239 --> 01:10:39,760
directly to c

1807
01:10:39,760 --> 01:10:42,239
and in that case what would happen that

1808
01:10:42,239 --> 01:10:44,080
when the redirection service received

1809
01:10:44,080 --> 01:10:46,480
that initial call with the token they

1810
01:10:46,480 --> 01:10:49,440
will create their own token and embed

1811
01:10:49,440 --> 01:10:52,640
the original token into this token and

1812
01:10:52,640 --> 01:10:55,440
then ship it to to see

1813
01:10:55,440 --> 01:10:56,840
next slide

1814
01:10:56,840 --> 01:11:00,800
please another example is um the

1815
01:11:00,800 --> 01:11:03,280
nsm in

1816
01:11:03,280 --> 01:11:05,679
a project which is um

1817
01:11:05,679 --> 01:11:06,400
a

1818
01:11:06,400 --> 01:11:08,640
mechanism that tried to replicate the

1819
01:11:08,640 --> 01:11:10,239
the concept of

1820
01:11:10,239 --> 01:11:12,880
a mesh but at the layer 2 and layer 3

1821
01:11:12,880 --> 01:11:13,920
layer

1822
01:11:13,920 --> 01:11:15,040
um

1823
01:11:15,040 --> 01:11:16,080
so

1824
01:11:16,080 --> 01:11:18,320
in that case they have a bunch of

1825
01:11:18,320 --> 01:11:19,680
middle middle um

1826
01:11:19,680 --> 01:11:21,360
[Music]

1827
01:11:21,360 --> 01:11:23,679
intermediaries and those intermediaries

1828
01:11:23,679 --> 01:11:25,440
receive one token

1829
01:11:25,440 --> 01:11:27,360
they change that

1830
01:11:27,360 --> 01:11:29,840
the message and then create the token

1831
01:11:29,840 --> 01:11:31,679
embed the original message and hand it

1832
01:11:31,679 --> 01:11:34,480
to to the next intermediary so another

1833
01:11:34,480 --> 01:11:37,120
example again these are different idps

1834
01:11:37,120 --> 01:11:38,840
next slide

1835
01:11:38,840 --> 01:11:42,239
please um another example this is

1836
01:11:42,239 --> 01:11:45,360
talking about now id token here so for

1837
01:11:45,360 --> 01:11:46,719
example

1838
01:11:46,719 --> 01:11:48,800
you have a multiple issuers

1839
01:11:48,800 --> 01:11:52,000
that issue claims for the same subject

1840
01:11:52,000 --> 01:11:54,800
so an example you get an id token

1841
01:11:54,800 --> 01:11:56,960
uh with that date of birth

1842
01:11:56,960 --> 01:11:58,640
token that talks about the date of birth

1843
01:11:58,640 --> 01:12:01,679
from one in identity a idp and

1844
01:12:01,679 --> 01:12:03,840
professional accreditation for example

1845
01:12:03,840 --> 01:12:06,239
from a completely different idp

1846
01:12:06,239 --> 01:12:09,679
next slide please

1847
01:12:09,679 --> 01:12:12,640
and a last example is uh um this is a

1848
01:12:12,640 --> 01:12:14,640
use case in in italy they have a

1849
01:12:14,640 --> 01:12:16,480
multiple attributes attribute

1850
01:12:16,480 --> 01:12:19,600
authorities and they need a way to embed

1851
01:12:19,600 --> 01:12:22,320
multiple tokens in the id token to allow

1852
01:12:22,320 --> 01:12:23,520
the client

1853
01:12:23,520 --> 01:12:26,560
to access those attribute authorities

1854
01:12:26,560 --> 01:12:27,520
um

1855
01:12:27,520 --> 01:12:28,480
um

1856
01:12:28,480 --> 01:12:29,520
directly

1857
01:12:29,520 --> 01:12:31,840
using those embedded tokens right and

1858
01:12:31,840 --> 01:12:34,400
we'll show a few examples like this

1859
01:12:34,400 --> 01:12:37,839
and next slide please

1860
01:12:37,920 --> 01:12:40,080
so what we're trying to do is just

1861
01:12:40,080 --> 01:12:42,480
define a new a claim

1862
01:12:42,480 --> 01:12:45,440
and allow that claim to embed a number

1863
01:12:45,440 --> 01:12:47,360
of tokens it could be one or could be

1864
01:12:47,360 --> 01:12:50,159
more and define the relationship between

1865
01:12:50,159 --> 01:12:52,880
those tokens right that the main token

1866
01:12:52,880 --> 01:12:55,120
and those embedded tokens next slide

1867
01:12:55,120 --> 01:12:57,440
please

1868
01:12:58,080 --> 01:13:00,320
so this is an example like

1869
01:13:00,320 --> 01:13:02,719
you you see that the child as for

1870
01:13:02,719 --> 01:13:05,760
example this is a childhood parent token

1871
01:13:05,760 --> 01:13:08,480
the child as the main primary in

1872
01:13:08,480 --> 01:13:11,920
subject here and um you have the tokens

1873
01:13:11,920 --> 01:13:14,239
and inside that tokens you have one

1874
01:13:14,239 --> 01:13:16,320
token in this case that talks about the

1875
01:13:16,320 --> 01:13:17,360
parent

1876
01:13:17,360 --> 01:13:19,199
and the relationship between the

1877
01:13:19,199 --> 01:13:21,520
embedded token and the main token

1878
01:13:21,520 --> 01:13:24,640
next next one please

1879
01:13:25,040 --> 01:13:26,640
and this is um

1880
01:13:26,640 --> 01:13:29,199
an example of um a multiple embedded

1881
01:13:29,199 --> 01:13:31,360
tokens this is specifically from a

1882
01:13:31,360 --> 01:13:33,760
italian government

1883
01:13:33,760 --> 01:13:36,480
in the way they're doing it so so you

1884
01:13:36,480 --> 01:13:38,800
have again the main subject and they

1885
01:13:38,800 --> 01:13:42,080
have multiple tokens again one id token

1886
01:13:42,080 --> 01:13:43,520
that contains

1887
01:13:43,520 --> 01:13:46,239
a number of special tokens that will be

1888
01:13:46,239 --> 01:13:47,360
used with

1889
01:13:47,360 --> 01:13:50,400
the authorization authorities right

1890
01:13:50,400 --> 01:13:52,879
next slide

1891
01:13:54,159 --> 01:13:56,400
so again as i mentioned this is just to

1892
01:13:56,400 --> 01:13:58,239
give an update and about the problem

1893
01:13:58,239 --> 01:14:00,080
that we're trying to solve the use cases

1894
01:14:00,080 --> 01:14:01,440
that we have

1895
01:14:01,440 --> 01:14:03,120
any thought

1896
01:14:03,120 --> 01:14:07,360
about this would be appreciated

1897
01:14:11,920 --> 01:14:15,520
mike jones um first a question about the

1898
01:14:15,520 --> 01:14:17,280
example on the previous slides your

1899
01:14:17,280 --> 01:14:18,800
tokens list

1900
01:14:18,800 --> 01:14:21,199
i expected the embedded jots to start

1901
01:14:21,199 --> 01:14:24,320
with double quote eyj

1902
01:14:24,320 --> 01:14:26,159
okay and not

1903
01:14:26,159 --> 01:14:28,719
have um unencoded

1904
01:14:28,719 --> 01:14:30,400
claim values so you're missing the

1905
01:14:30,400 --> 01:14:32,239
signature and the headers

1906
01:14:32,239 --> 01:14:34,239
is that intended or is that just an

1907
01:14:34,239 --> 01:14:37,040
artifact of what you presented i'm not

1908
01:14:37,040 --> 01:14:38,719
sure i will have to talk to giuseppe

1909
01:14:38,719 --> 01:14:41,280
about this and see what's uh

1910
01:14:41,280 --> 01:14:43,679
why why is that right okay i'll assert

1911
01:14:43,679 --> 01:14:46,000
that you want the full

1912
01:14:46,000 --> 01:14:48,400
jot right you know typically we want the

1913
01:14:48,400 --> 01:14:50,480
three dots separated correct bits

1914
01:14:50,480 --> 01:14:51,679
correct

1915
01:14:51,679 --> 01:14:52,010
um

1916
01:14:52,010 --> 01:14:53,520
[Music]

1917
01:14:53,520 --> 01:14:54,480
and

1918
01:14:54,480 --> 01:14:56,159
you've done a good job demonstrating

1919
01:14:56,159 --> 01:14:59,360
there's a lot of diverse use cases

1920
01:14:59,360 --> 01:15:00,400
um

1921
01:15:00,400 --> 01:15:02,400
it's not clear to me there's a lot of

1922
01:15:02,400 --> 01:15:04,800
commonality between them

1923
01:15:04,800 --> 01:15:05,840
although

1924
01:15:05,840 --> 01:15:08,400
having this syntax and letting people

1925
01:15:08,400 --> 01:15:10,880
use it may maybe

1926
01:15:10,880 --> 01:15:13,199
the best we can do i mean otherwise

1927
01:15:13,199 --> 01:15:14,719
applications

1928
01:15:14,719 --> 01:15:16,480
such as stir

1929
01:15:16,480 --> 01:15:18,239
will have to define

1930
01:15:18,239 --> 01:15:20,480
their own claims for embedding jots for

1931
01:15:20,480 --> 01:15:22,840
their own purposes which is not

1932
01:15:22,840 --> 01:15:26,960
terrible i mean the question before the

1933
01:15:26,960 --> 01:15:28,960
working group and the draft i think is

1934
01:15:28,960 --> 01:15:31,679
is the commonality worth standardizing

1935
01:15:31,679 --> 01:15:34,719
maybe it is right thank you yeah thanks

1936
01:15:34,719 --> 01:15:36,080
mike

1937
01:15:36,080 --> 01:15:38,480
any other comments questions

1938
01:15:38,480 --> 01:15:41,199
yeah there's george on the on the

1939
01:15:41,199 --> 01:15:43,120
george can you go ahead

1940
01:15:43,120 --> 01:15:45,360
yep um so i guess the only thing i

1941
01:15:45,360 --> 01:15:47,600
wanted to add is the token exchange work

1942
01:15:47,600 --> 01:15:49,840
that brian and others did has the

1943
01:15:49,840 --> 01:15:53,199
concept of an actor token which so i

1944
01:15:53,199 --> 01:15:54,719
think

1945
01:15:54,719 --> 01:15:57,440
i couldn't tell some of these use cases

1946
01:15:57,440 --> 01:16:00,320
you know maybe purely you know claims

1947
01:16:00,320 --> 01:16:02,640
related some of them may be things that

1948
01:16:02,640 --> 01:16:05,600
you would want in an authorization model

1949
01:16:05,600 --> 01:16:07,199
and so i think we just need to make sure

1950
01:16:07,199 --> 01:16:09,280
that if we pick up this work we look at

1951
01:16:09,280 --> 01:16:11,679
it from a lot of you know like when

1952
01:16:11,679 --> 01:16:13,120
should these things potentially be

1953
01:16:13,120 --> 01:16:15,040
present in access tokens are these

1954
01:16:15,040 --> 01:16:17,040
concepts be present from an

1955
01:16:17,040 --> 01:16:19,199
authorization perspective as opposed to

1956
01:16:19,199 --> 01:16:21,360
an identity perspective i think will be

1957
01:16:21,360 --> 01:16:22,800
an important

1958
01:16:22,800 --> 01:16:23,920
um

1959
01:16:23,920 --> 01:16:26,320
you know aspect if we want to look at

1960
01:16:26,320 --> 01:16:30,000
the whole the whole space holistically

1961
01:16:30,000 --> 01:16:31,760
okay

1962
01:16:31,760 --> 01:16:34,000
sounds good thanks george church can you

1963
01:16:34,000 --> 01:16:35,920
also post this into the chat window so i

1964
01:16:35,920 --> 01:16:37,760
have to your correct question captured

1965
01:16:37,760 --> 01:16:40,800
in the meeting minutes please

1966
01:16:42,719 --> 01:16:44,880
yes okay

1967
01:16:44,880 --> 01:16:49,080
any other comments questions

1968
01:16:49,120 --> 01:16:50,080
okay

1969
01:16:50,080 --> 01:16:52,559
thank you

1970
01:16:59,679 --> 01:17:03,000
yeah hirsch

1971
01:17:10,560 --> 01:17:13,040
alrighty uh hey folks uh first time

1972
01:17:13,040 --> 01:17:14,880
listener or no long time listener first

1973
01:17:14,880 --> 01:17:16,800
time caller already screwing things up

1974
01:17:16,800 --> 01:17:19,760
so uh do you appreciate any patience

1975
01:17:19,760 --> 01:17:20,719
um

1976
01:17:20,719 --> 01:17:22,400
here to do a bit of an informational

1977
01:17:22,400 --> 01:17:25,280
session effectively on how

1978
01:17:25,280 --> 01:17:30,000
github is looking at token theft um

1979
01:17:30,000 --> 01:17:32,400
going all right um how github is looking

1980
01:17:32,400 --> 01:17:34,159
at token theft and what we want to do to

1981
01:17:34,159 --> 01:17:36,800
protect against it into the future

1982
01:17:36,800 --> 01:17:39,440
um bit of a call for a conversation and

1983
01:17:39,440 --> 01:17:41,840
perhaps progress at the end of this uh

1984
01:17:41,840 --> 01:17:42,880
next slide

1985
01:17:42,880 --> 01:17:45,600
and just for reference uh i do identity

1986
01:17:45,600 --> 01:17:48,640
at github uh next slide

1987
01:17:48,640 --> 01:17:49,360
so

1988
01:17:49,360 --> 01:17:50,719
the reason that we're bringing this up

1989
01:17:50,719 --> 01:17:52,159
is that we're seeing a different kind of

1990
01:17:52,159 --> 01:17:55,520
attack than what we are typically

1991
01:17:55,520 --> 01:17:57,440
reading about when you read the token

1992
01:17:57,440 --> 01:17:59,840
binding specs or typical expectations of

1993
01:17:59,840 --> 01:18:02,480
an attack is we're not looking at

1994
01:18:02,480 --> 01:18:04,640
um we're not seeing rather attacks in

1995
01:18:04,640 --> 01:18:07,679
the wild that are based off of xss or

1996
01:18:07,679 --> 01:18:09,600
getting malware onto somebody's desktop

1997
01:18:09,600 --> 01:18:10,800
it's actually

1998
01:18:10,800 --> 01:18:12,880
attackers breaking into trusted cloud

1999
01:18:12,880 --> 01:18:14,800
providers or integrators

2000
01:18:14,800 --> 01:18:17,760
to steal masses of tokens in order to

2001
01:18:17,760 --> 01:18:20,960
then attack the real victims

2002
01:18:20,960 --> 01:18:21,760
so

2003
01:18:21,760 --> 01:18:23,600
all of us trust a certain set of

2004
01:18:23,600 --> 01:18:26,960
providers out in the world to

2005
01:18:26,960 --> 01:18:30,719
do ci cd for us run actions

2006
01:18:30,719 --> 01:18:32,719
and all of them have access to our code

2007
01:18:32,719 --> 01:18:34,640
bases so what these attackers are doing

2008
01:18:34,640 --> 01:18:37,440
is coming in and stealing access to your

2009
01:18:37,440 --> 01:18:38,719
code base

2010
01:18:38,719 --> 01:18:40,560
so they can then look into your code

2011
01:18:40,560 --> 01:18:42,800
base and find secrets to move laterally

2012
01:18:42,800 --> 01:18:44,239
into your infrastructure and pull off

2013
01:18:44,239 --> 01:18:47,040
the actual attack that they wanted to do

2014
01:18:47,040 --> 01:18:49,280
um and so this isn't about preventing

2015
01:18:49,280 --> 01:18:50,719
the actual attacks where they're getting

2016
01:18:50,719 --> 01:18:52,400
into your infrastructure that's spire

2017
01:18:52,400 --> 01:18:54,159
spiffy all that kind of stuff and it's

2018
01:18:54,159 --> 01:18:55,760
not about preventing the attacks on

2019
01:18:55,760 --> 01:18:57,440
those cloud providers in the first place

2020
01:18:57,440 --> 01:18:58,880
we're really looking at

2021
01:18:58,880 --> 01:19:00,400
mitigation what happens once they've

2022
01:19:00,400 --> 01:19:02,080
gotten into your cloud provider or your

2023
01:19:02,080 --> 01:19:04,960
integrator and um

2024
01:19:04,960 --> 01:19:07,600
what can we do to make that less bad

2025
01:19:07,600 --> 01:19:10,000
next slide

2026
01:19:10,800 --> 01:19:12,560
um obviously just some kind of tokens

2027
01:19:12,560 --> 01:19:14,239
that you can lose um this is mostly for

2028
01:19:14,239 --> 01:19:17,040
reference next slide

2029
01:19:17,120 --> 01:19:19,040
um but all of those tokens do share some

2030
01:19:19,040 --> 01:19:20,480
similar weaknesses that we're kind of

2031
01:19:20,480 --> 01:19:22,880
focusing in on none of them are center

2032
01:19:22,880 --> 01:19:25,199
constrained right basically no tokens

2033
01:19:25,199 --> 01:19:27,199
out in the wild right now um actually

2034
01:19:27,199 --> 01:19:29,040
have binding

2035
01:19:29,040 --> 01:19:30,400
a lot of them have way too long of a

2036
01:19:30,400 --> 01:19:33,840
lifetime and most are over permissioned

2037
01:19:33,840 --> 01:19:34,960
this is a common pattern we're seeing

2038
01:19:34,960 --> 01:19:36,719
across all the tokens that are being

2039
01:19:36,719 --> 01:19:37,760
stolen

2040
01:19:37,760 --> 01:19:40,159
next slide

2041
01:19:40,400 --> 01:19:41,120
so

2042
01:19:41,120 --> 01:19:43,199
um sort of as our advice for app

2043
01:19:43,199 --> 01:19:45,040
developers if you are going to be one of

2044
01:19:45,040 --> 01:19:47,040
those integrators or you're going to be

2045
01:19:47,040 --> 01:19:49,280
a

2046
01:19:49,360 --> 01:19:51,600
developer whose code base is being

2047
01:19:51,600 --> 01:19:53,280
broken into through those cloud

2048
01:19:53,280 --> 01:19:55,360
providers we do have some suggestions

2049
01:19:55,360 --> 01:19:57,760
right encryption at rest um

2050
01:19:57,760 --> 01:19:59,920
once that attacker gets into your system

2051
01:19:59,920 --> 01:20:01,840
and dumps all of your tokens please

2052
01:20:01,840 --> 01:20:04,159
don't make it easy for them to use them

2053
01:20:04,159 --> 01:20:06,000
make them steal something else that is

2054
01:20:06,000 --> 01:20:07,520
better protected

2055
01:20:07,520 --> 01:20:09,440
like your decryption key actually use

2056
01:20:09,440 --> 01:20:11,440
expiring tokens what we see out in the

2057
01:20:11,440 --> 01:20:13,440
wild is that there are tons of infinite

2058
01:20:13,440 --> 01:20:15,600
life span tokens

2059
01:20:15,600 --> 01:20:18,480
that get committed into code bases

2060
01:20:18,480 --> 01:20:20,400
um if you are going to be committing

2061
01:20:20,400 --> 01:20:22,159
secrets into your code base please turn

2062
01:20:22,159 --> 01:20:24,400
on secret scanning of some kind and get

2063
01:20:24,400 --> 01:20:26,400
them back out

2064
01:20:26,400 --> 01:20:28,960
this was a major problem whenever we

2065
01:20:28,960 --> 01:20:30,639
look at

2066
01:20:30,639 --> 01:20:32,960
attacks that run through github against

2067
01:20:32,960 --> 01:20:34,080
victims

2068
01:20:34,080 --> 01:20:35,520
um

2069
01:20:35,520 --> 01:20:37,360
if you turn on secret scanning there

2070
01:20:37,360 --> 01:20:38,639
aren't any secrets inside of your code

2071
01:20:38,639 --> 01:20:41,199
base to steal and abuse

2072
01:20:41,199 --> 01:20:43,520
and then finally you know

2073
01:20:43,520 --> 01:20:44,400
and this is kind of the guidance that

2074
01:20:44,400 --> 01:20:45,360
we're going to be providing to people

2075
01:20:45,360 --> 01:20:47,920
who want to integrate against github um

2076
01:20:47,920 --> 01:20:50,159
just don't have credentials to lose in

2077
01:20:50,159 --> 01:20:52,000
the first place um if you can use

2078
01:20:52,000 --> 01:20:54,159
workload federation store keys inside of

2079
01:20:54,159 --> 01:20:57,600
an hsm please do it because um that is

2080
01:20:57,600 --> 01:21:00,639
just one fewer thing for you to lose

2081
01:21:00,639 --> 01:21:03,040
next slide

2082
01:21:03,040 --> 01:21:04,320
the bulk of what i wanted to talk about

2083
01:21:04,320 --> 01:21:05,920
today was really

2084
01:21:05,920 --> 01:21:08,159
what are we as service providers as

2085
01:21:08,159 --> 01:21:11,199
token issuers able to do to

2086
01:21:11,199 --> 01:21:12,800
bring app developers and integrators

2087
01:21:12,800 --> 01:21:14,400
into a better success more successful

2088
01:21:14,400 --> 01:21:16,638
place

2089
01:21:17,679 --> 01:21:20,080
there's a lot of easy stuff ish that i

2090
01:21:20,080 --> 01:21:22,080
think we can get done today um so ip

2091
01:21:22,080 --> 01:21:24,000
allows us for applications having

2092
01:21:24,000 --> 01:21:25,840
confidential clients right

2093
01:21:25,840 --> 01:21:26,800
the focus of most of this is

2094
01:21:26,800 --> 01:21:28,400
confidential clients

2095
01:21:28,400 --> 01:21:29,840
um

2096
01:21:29,840 --> 01:21:31,520
have them declare where they will be

2097
01:21:31,520 --> 01:21:34,639
using tokens from that ups the game from

2098
01:21:34,639 --> 01:21:37,120
um i steal your tokens and use them to i

2099
01:21:37,120 --> 01:21:38,719
steal your tokens and now have to still

2100
01:21:38,719 --> 01:21:40,800
be within your perimeter to use them

2101
01:21:40,800 --> 01:21:43,520
that is extremely powerful

2102
01:21:43,520 --> 01:21:44,560
um

2103
01:21:44,560 --> 01:21:46,400
limit non-expiring tokens so this is

2104
01:21:46,400 --> 01:21:48,480
something that certainly

2105
01:21:48,480 --> 01:21:51,199
we want to get done over at github

2106
01:21:51,199 --> 01:21:53,360
start limiting the use of infinite

2107
01:21:53,360 --> 01:21:55,040
lifespan tokens eventually deprecate

2108
01:21:55,040 --> 01:21:58,080
those and make those go away have

2109
01:21:58,080 --> 01:22:00,880
everything be proper like oauth rotating

2110
01:22:00,880 --> 01:22:02,880
access tokens

2111
01:22:02,880 --> 01:22:04,800
or even better support workload

2112
01:22:04,800 --> 01:22:06,320
federation

2113
01:22:06,320 --> 01:22:09,199
and support people not having client

2114
01:22:09,199 --> 01:22:10,800
secrets not having tokens that they are

2115
01:22:10,800 --> 01:22:12,159
storing at all

2116
01:22:12,159 --> 01:22:13,440
we want them to be using their

2117
01:22:13,440 --> 01:22:15,280
infrastructure identities

2118
01:22:15,280 --> 01:22:18,159
as authorization against our services

2119
01:22:18,159 --> 01:22:20,320
and then finally if you are issuing

2120
01:22:20,320 --> 01:22:22,080
tokens please

2121
01:22:22,080 --> 01:22:24,639
register those tokens for detection

2122
01:22:24,639 --> 01:22:27,440
with anybody who will do secret scanning

2123
01:22:27,440 --> 01:22:31,120
um a little bit of that on next slide

2124
01:22:31,120 --> 01:22:32,400
this is pretty straightforward right

2125
01:22:32,400 --> 01:22:34,560
this is basically just

2126
01:22:34,560 --> 01:22:36,480
upload a regex and then secret scanning

2127
01:22:36,480 --> 01:22:38,239
teams can find your tokens very

2128
01:22:38,239 --> 01:22:39,920
identifiably

2129
01:22:39,920 --> 01:22:42,320
if you add checksums high entropy you

2130
01:22:42,320 --> 01:22:45,120
can make this very low false positive as

2131
01:22:45,120 --> 01:22:47,679
well which means that when

2132
01:22:47,679 --> 01:22:48,960
developers turn this on in their code

2133
01:22:48,960 --> 01:22:50,080
bases

2134
01:22:50,080 --> 01:22:51,679
they aren't going to be swamped with a

2135
01:22:51,679 --> 01:22:53,920
bunch of stuff they want to ignore um

2136
01:22:53,920 --> 01:22:55,600
just to give an idea of the efficacy of

2137
01:22:55,600 --> 01:22:57,199
this we've had customers turn this on

2138
01:22:57,199 --> 01:22:58,239
and find

2139
01:22:58,239 --> 01:22:59,920
thousands of secrets inside of their

2140
01:22:59,920 --> 01:23:02,480
code bases like this is a real

2141
01:23:02,480 --> 01:23:04,239
problem that we actually want to use to

2142
01:23:04,239 --> 01:23:06,480
combat token theft

2143
01:23:06,480 --> 01:23:09,120
uh next slide

2144
01:23:09,120 --> 01:23:11,040
and then um kind of the meat of the

2145
01:23:11,040 --> 01:23:13,280
topic is token binding right like every

2146
01:23:13,280 --> 01:23:15,679
time there's a big token theft that hits

2147
01:23:15,679 --> 01:23:17,280
the news people say

2148
01:23:17,280 --> 01:23:18,400
so why were they able to use those

2149
01:23:18,400 --> 01:23:21,199
tokens bearer tokens they suck let's fix

2150
01:23:21,199 --> 01:23:22,000
that

2151
01:23:22,000 --> 01:23:23,280
um

2152
01:23:23,280 --> 01:23:26,480
let's talk about that uh next slide

2153
01:23:26,480 --> 01:23:27,440
so

2154
01:23:27,440 --> 01:23:29,600
this is purely from a implementer's

2155
01:23:29,600 --> 01:23:31,440
perspective that actually

2156
01:23:31,440 --> 01:23:34,960
is told to go fix this 8705 is dead

2157
01:23:34,960 --> 01:23:36,880
um we're not going to implement it we're

2158
01:23:36,880 --> 01:23:38,320
not interested

2159
01:23:38,320 --> 01:23:40,560
because it doesn't support enough

2160
01:23:40,560 --> 01:23:42,239
platforms it doesn't work across all of

2161
01:23:42,239 --> 01:23:46,159
our um platforms that we care about

2162
01:23:46,159 --> 01:23:49,760
yeah sorry ad705 is um mtls binding

2163
01:23:49,760 --> 01:23:52,560
right this is uh channel binding

2164
01:23:52,560 --> 01:23:54,159
um

2165
01:23:54,159 --> 01:23:55,600
it doesn't work because it doesn't work

2166
01:23:55,600 --> 01:23:57,520
inside the browser anymore

2167
01:23:57,520 --> 01:23:59,840
and so if we have to invest in that

2168
01:23:59,840 --> 01:24:01,679
it doesn't get us far enough

2169
01:24:01,679 --> 01:24:04,239
mobile apps though and sorry um that is

2170
01:24:04,239 --> 01:24:06,239
to say though depop seems to be offering

2171
01:24:06,239 --> 01:24:08,159
us a lot of what we actually care about

2172
01:24:08,159 --> 01:24:10,639
which is device binding making sure that

2173
01:24:10,639 --> 01:24:12,480
the

2174
01:24:12,480 --> 01:24:14,480
device we gave the token to is the same

2175
01:24:14,480 --> 01:24:16,880
one using it

2176
01:24:16,880 --> 01:24:18,080
seems to be working pretty well for

2177
01:24:18,080 --> 01:24:19,600
mobile apps right this is something that

2178
01:24:19,600 --> 01:24:21,520
we can reasonably go out and

2179
01:24:21,520 --> 01:24:23,600
implement pretty cleanly today

2180
01:24:23,600 --> 01:24:25,440
desktop apps

2181
01:24:25,440 --> 01:24:28,080
you can start using the mac os keychain

2182
01:24:28,080 --> 01:24:30,880
you can start using tpms to bind keys

2183
01:24:30,880 --> 01:24:32,239
but because there's no strong

2184
01:24:32,239 --> 01:24:33,840
application identity

2185
01:24:33,840 --> 01:24:36,480
uh you get medium il privileges you run

2186
01:24:36,480 --> 01:24:38,080
as user and you just

2187
01:24:38,080 --> 01:24:40,400
say that you're the github cli or you

2188
01:24:40,400 --> 01:24:42,480
just say that you're chrome and you can

2189
01:24:42,480 --> 01:24:44,639
get those keys and

2190
01:24:44,639 --> 01:24:46,719
okay that's not great

2191
01:24:46,719 --> 01:24:48,639
um confidential clients this actually

2192
01:24:48,639 --> 01:24:50,159
seems fairly reasonable from a technical

2193
01:24:50,159 --> 01:24:52,560
perspective how we can start um

2194
01:24:52,560 --> 01:24:54,400
having confidential clients prove that

2195
01:24:54,400 --> 01:24:55,520
they are

2196
01:24:55,520 --> 01:24:57,840
still the same client that was sent the

2197
01:24:57,840 --> 01:24:58,719
token

2198
01:24:58,719 --> 01:25:00,800
however there's no profile for this

2199
01:25:00,800 --> 01:25:02,639
there isn't a dedicated way that we have

2200
01:25:02,639 --> 01:25:05,760
seen to actually go implement this

2201
01:25:05,760 --> 01:25:06,560
um

2202
01:25:06,560 --> 01:25:09,840
and then finally web apps um

2203
01:25:09,840 --> 01:25:12,000
there's like web crypto api which is

2204
01:25:12,000 --> 01:25:15,040
great um and if you can xss the tokens

2205
01:25:15,040 --> 01:25:18,239
out you can probably xss out a um

2206
01:25:18,239 --> 01:25:20,159
use for them as well we'd love to see

2207
01:25:20,159 --> 01:25:22,320
some stronger device binding there

2208
01:25:22,320 --> 01:25:26,000
because uh next slide

2209
01:25:26,000 --> 01:25:27,760
of our risk profile that we're looking

2210
01:25:27,760 --> 01:25:28,960
at is

2211
01:25:28,960 --> 01:25:30,480
um assume they've gotten into your

2212
01:25:30,480 --> 01:25:31,520
database

2213
01:25:31,520 --> 01:25:34,800
um assume that your site has xss

2214
01:25:34,800 --> 01:25:36,639
how do we still bind the tokens given

2215
01:25:36,639 --> 01:25:38,000
those two things

2216
01:25:38,000 --> 01:25:40,239
um and so we're looking for is really

2217
01:25:40,239 --> 01:25:42,159
get them uh force attackers to get to

2218
01:25:42,159 --> 01:25:43,280
the next level

2219
01:25:43,280 --> 01:25:45,040
which is infrastructure compromise

2220
01:25:45,040 --> 01:25:47,280
either on the desktop that your

2221
01:25:47,280 --> 01:25:49,199
application is running inside of either

2222
01:25:49,199 --> 01:25:52,239
on the browser as an actual desktop app

2223
01:25:52,239 --> 01:25:54,880
or into your web app infrastructure

2224
01:25:54,880 --> 01:25:56,239
right they need to be able to stamp a

2225
01:25:56,239 --> 01:25:57,679
microservice inside of your trusted

2226
01:25:57,679 --> 01:25:59,520
perimeter

2227
01:25:59,520 --> 01:26:01,199
that's the

2228
01:26:01,199 --> 01:26:02,960
bar that we want attackers to have to

2229
01:26:02,960 --> 01:26:05,600
meet in order to lift and steal and use

2230
01:26:05,600 --> 01:26:07,199
tokens

2231
01:26:07,199 --> 01:26:09,360
um and right now for web apps it seems

2232
01:26:09,360 --> 01:26:11,840
like that's hovering right around

2233
01:26:11,840 --> 01:26:14,560
like we can do two but not three

2234
01:26:14,560 --> 01:26:17,120
so next slide

2235
01:26:17,120 --> 01:26:18,560
uh there's also a lot of stuff here that

2236
01:26:18,560 --> 01:26:19,679
seems like

2237
01:26:19,679 --> 01:26:22,639
it's not quite solved yet and again this

2238
01:26:22,639 --> 01:26:24,000
is basically just

2239
01:26:24,000 --> 01:26:26,800
please come talk to me i'd love to help

2240
01:26:26,800 --> 01:26:28,880
figure out how we can solve these

2241
01:26:28,880 --> 01:26:30,080
one is

2242
01:26:30,080 --> 01:26:30,880
the

2243
01:26:30,880 --> 01:26:32,320
i'm calling it referred binding i think

2244
01:26:32,320 --> 01:26:34,560
there's probably better terms for it but

2245
01:26:34,560 --> 01:26:36,000
when that authorization code is sent to

2246
01:26:36,000 --> 01:26:37,520
a confidential client then they have to

2247
01:26:37,520 --> 01:26:39,760
respond with a cookie that is somehow

2248
01:26:39,760 --> 01:26:42,080
bound to the same browser that

2249
01:26:42,080 --> 01:26:44,080
got that authorization code there seems

2250
01:26:44,080 --> 01:26:46,639
to be some weaknesses there around um

2251
01:26:46,639 --> 01:26:48,239
is that the optimum time to go steal

2252
01:26:48,239 --> 01:26:50,560
something and replay it

2253
01:26:50,560 --> 01:26:52,159
tpm rate limits

2254
01:26:52,159 --> 01:26:53,840
this works fine if you're like on a

2255
01:26:53,840 --> 01:26:56,159
windows device right you can

2256
01:26:56,159 --> 01:26:58,159
get 10

2257
01:26:58,159 --> 01:26:59,920
20 signatures

2258
01:26:59,920 --> 01:27:01,679
a minute out of that thing and

2259
01:27:01,679 --> 01:27:03,040
everything works fine if you have

2260
01:27:03,040 --> 01:27:06,560
thousands of users and you need to

2261
01:27:06,560 --> 01:27:10,080
be creating signatures off of some vtpm

2262
01:27:10,080 --> 01:27:11,920
as a confidential client

2263
01:27:11,920 --> 01:27:13,040
you start hitting rate limits really

2264
01:27:13,040 --> 01:27:14,639
quickly and you start having to do stuff

2265
01:27:14,639 --> 01:27:17,120
like charge your activity by

2266
01:27:17,120 --> 01:27:20,239
your tpm as a bottleneck

2267
01:27:20,239 --> 01:27:21,840
understanding how a profile for

2268
01:27:21,840 --> 01:27:24,400
confidential clients can

2269
01:27:24,400 --> 01:27:25,760
reuse

2270
01:27:25,760 --> 01:27:27,199
certain signatures inside of depop would

2271
01:27:27,199 --> 01:27:29,839
be really interesting

2272
01:27:29,920 --> 01:27:31,520
one that is particularly interesting to

2273
01:27:31,520 --> 01:27:32,560
us is

2274
01:27:32,560 --> 01:27:33,840
sort of hosted workloads or shared

2275
01:27:33,840 --> 01:27:36,960
execution um so if you're a ci cd system

2276
01:27:36,960 --> 01:27:39,440
or github actions and you are requesting

2277
01:27:39,440 --> 01:27:41,360
tokens for a workload that you are

2278
01:27:41,360 --> 01:27:42,639
hosting

2279
01:27:42,639 --> 01:27:44,080
how do you bind those and what do you

2280
01:27:44,080 --> 01:27:46,560
even bind them to

2281
01:27:46,560 --> 01:27:48,159
do you hold those and then sign them

2282
01:27:48,159 --> 01:27:49,120
right before you hand them to the

2283
01:27:49,120 --> 01:27:52,320
workload do you run a

2284
01:27:52,320 --> 01:27:54,159
sort of shell around the workload and

2285
01:27:54,159 --> 01:27:56,639
then sign things on their way out

2286
01:27:56,639 --> 01:27:58,000
open questions here that we're not sure

2287
01:27:58,000 --> 01:27:59,920
how to solve and if we can't find the

2288
01:27:59,920 --> 01:28:01,760
tokens that we're

2289
01:28:01,760 --> 01:28:03,360
handing to our workloads

2290
01:28:03,360 --> 01:28:06,400
that feels like a vulnerability

2291
01:28:06,400 --> 01:28:08,639
and then finally the privacy element

2292
01:28:08,639 --> 01:28:09,920
here

2293
01:28:09,920 --> 01:28:12,320
can we actually ship this to all of our

2294
01:28:12,320 --> 01:28:13,520
users

2295
01:28:13,520 --> 01:28:16,560
if we're saying hey we want to um

2296
01:28:16,560 --> 01:28:18,800
durably identify your device

2297
01:28:18,800 --> 01:28:22,080
there's a whole separate community

2298
01:28:22,080 --> 01:28:23,520
and kind of zeitgeist right now around

2299
01:28:23,520 --> 01:28:25,360
making sure that's not possible

2300
01:28:25,360 --> 01:28:26,800
so

2301
01:28:26,800 --> 01:28:28,880
not sure where that tension is

2302
01:28:28,880 --> 01:28:30,880
next slide

2303
01:28:30,880 --> 01:28:31,760
so

2304
01:28:31,760 --> 01:28:33,520
call to action really um

2305
01:28:33,520 --> 01:28:34,719
love to see a confidential client

2306
01:28:34,719 --> 01:28:37,199
profile for depop um and again very

2307
01:28:37,199 --> 01:28:38,159
happy to

2308
01:28:38,159 --> 01:28:40,159
work with you on this and figure out how

2309
01:28:40,159 --> 01:28:43,440
we move this forward um working with the

2310
01:28:43,440 --> 01:28:45,679
browser vendors to

2311
01:28:45,679 --> 01:28:46,639
bind

2312
01:28:46,639 --> 01:28:48,400
keys from the operating system up

2313
01:28:48,400 --> 01:28:49,840
through the browser

2314
01:28:49,840 --> 01:28:52,320
into web applications so that

2315
01:28:52,320 --> 01:28:53,199
we can

2316
01:28:53,199 --> 01:28:54,960
hopefully heighten some of the security

2317
01:28:54,960 --> 01:28:57,840
guarantees there and then finally um

2318
01:28:57,840 --> 01:28:59,760
really just guidance and standards for

2319
01:28:59,760 --> 01:29:01,760
like what does token binding look like

2320
01:29:01,760 --> 01:29:04,880
in a successful deployment um and again

2321
01:29:04,880 --> 01:29:06,719
we're there to both help move that

2322
01:29:06,719 --> 01:29:08,159
forward and

2323
01:29:08,159 --> 01:29:11,360
be a reference

2324
01:29:11,360 --> 01:29:13,120
next slide i guess that's it

2325
01:29:13,120 --> 01:29:14,960
okay awesome

2326
01:29:14,960 --> 01:29:18,719
any quick comments questions

2327
01:29:21,440 --> 01:29:23,520
mike jones on your last slide what does

2328
01:29:23,520 --> 01:29:25,360
browser support for

2329
01:29:25,360 --> 01:29:27,679
depop key protection mean

2330
01:29:27,679 --> 01:29:30,159
uh right now like web crypto um

2331
01:29:30,159 --> 01:29:32,320
will have non-exportable keys but it's

2332
01:29:32,320 --> 01:29:34,400
not clear that those are actually being

2333
01:29:34,400 --> 01:29:36,639
sunk all the way down into the os and

2334
01:29:36,639 --> 01:29:39,760
device identity um they're not yeah

2335
01:29:39,760 --> 01:29:44,159
getting that support would be great um

2336
01:29:44,719 --> 01:29:47,679
i'll talk to you later

2337
01:29:49,280 --> 01:29:51,280
victoria

2338
01:29:51,280 --> 01:29:52,400
um

2339
01:29:52,400 --> 01:29:54,560
i think that uh doing something with a

2340
01:29:54,560 --> 01:29:56,880
browser for uh supporting browser

2341
01:29:56,880 --> 01:29:59,120
artifacts like cookies and similar given

2342
01:29:59,120 --> 01:30:01,440
the demise of the token binding would be

2343
01:30:01,440 --> 01:30:04,239
very good for the industry and i think

2344
01:30:04,239 --> 01:30:06,239
it's a very good idea and i'm looking

2345
01:30:06,239 --> 01:30:07,600
forward to see

2346
01:30:07,600 --> 01:30:10,400
how if your proposal develops and you

2347
01:30:10,400 --> 01:30:12,159
know that we work with browser vendors

2348
01:30:12,159 --> 01:30:15,280
for other reasons so please feel free to

2349
01:30:15,280 --> 01:30:16,320
use

2350
01:30:16,320 --> 01:30:18,840
uh users as the zone as much as

2351
01:30:18,840 --> 01:30:22,960
possible thank you okay

2352
01:30:22,960 --> 01:30:24,800
and yeah

2353
01:30:24,800 --> 01:30:26,560
i had a question

2354
01:30:26,560 --> 01:30:28,719
so sorry

2355
01:30:28,719 --> 01:30:30,880
yeah i'm audible

2356
01:30:30,880 --> 01:30:33,120
yeah go ahead go ahead

2357
01:30:33,120 --> 01:30:35,760
yeah so i had a question basically uh

2358
01:30:35,760 --> 01:30:38,080
sometimes we have seen that even for the

2359
01:30:38,080 --> 01:30:39,520
native apps

2360
01:30:39,520 --> 01:30:42,719
uh the authorization code flow is used

2361
01:30:42,719 --> 01:30:44,800
so many times the client secrets are

2362
01:30:44,800 --> 01:30:47,120
embedded into the

2363
01:30:47,120 --> 01:30:50,320
desktop apps or the native apps so are

2364
01:30:50,320 --> 01:30:54,159
we looking also at ways uh to bind that

2365
01:30:54,159 --> 01:30:57,600
uh client secrets uh

2366
01:30:57,600 --> 01:31:00,080
in some ways or is it restricted to only

2367
01:31:00,080 --> 01:31:01,679
tokens

2368
01:31:01,679 --> 01:31:05,760
uh yeah absolutely not i've um

2369
01:31:05,760 --> 01:31:07,199
actually i was a little bummed to see

2370
01:31:07,199 --> 01:31:09,040
that um aaron had talked about removing

2371
01:31:09,040 --> 01:31:10,480
credentialed clients

2372
01:31:10,480 --> 01:31:12,320
uh from 2.1 because there was some

2373
01:31:12,320 --> 01:31:14,719
interest in like temporary credentials

2374
01:31:14,719 --> 01:31:17,040
that are assigned on a per application

2375
01:31:17,040 --> 01:31:18,080
basis

2376
01:31:18,080 --> 01:31:19,440
um

2377
01:31:19,440 --> 01:31:20,639
had no idea how that was actually going

2378
01:31:20,639 --> 01:31:23,280
to function but

2379
01:31:23,360 --> 01:31:25,040
no

2380
01:31:25,040 --> 01:31:26,560
can i respond to that

2381
01:31:26,560 --> 01:31:28,800
okay quickly it's very brief i did

2382
01:31:28,800 --> 01:31:31,040
mention this last uh in vienna or

2383
01:31:31,040 --> 01:31:32,960
non-event right after vienna at the oats

2384
01:31:32,960 --> 01:31:34,400
security workshop

2385
01:31:34,400 --> 01:31:36,880
um about the possibility of turning

2386
01:31:36,880 --> 01:31:38,639
native apps into confidential clients

2387
01:31:38,639 --> 01:31:39,920
using other

2388
01:31:39,920 --> 01:31:42,080
mechanisms that exist so we'd love to

2389
01:31:42,080 --> 01:31:43,440
talk about that further and see what

2390
01:31:43,440 --> 01:31:45,120
your interest is in that

2391
01:31:45,120 --> 01:31:46,400
yeah absolutely

2392
01:31:46,400 --> 01:31:47,440
awesome

2393
01:31:47,440 --> 01:31:50,559
thank you very much appreciate it

2394
01:31:53,600 --> 01:31:57,239
it's killing here

2395
01:32:07,040 --> 01:32:08,480
hi i'm kelly bergen from the mitre

2396
01:32:08,480 --> 01:32:09,760
corporation

2397
01:32:09,760 --> 01:32:11,600
here to talk about token and identity

2398
01:32:11,600 --> 01:32:13,760
chaining between protected resources can

2399
01:32:13,760 --> 01:32:15,679
you get closer to michael oh

2400
01:32:15,679 --> 01:32:17,600
just a lot going on

2401
01:32:17,600 --> 01:32:19,120
oh really okay

2402
01:32:19,120 --> 01:32:20,480
all right

2403
01:32:20,480 --> 01:32:24,440
hey next slide please

2404
01:32:26,000 --> 01:32:27,280
on

2405
01:32:27,280 --> 01:32:29,600
it's not moving

2406
01:32:29,600 --> 01:32:31,920
so some background a couple years ago

2407
01:32:31,920 --> 01:32:34,239
mitre published some profiles for the

2408
01:32:34,239 --> 01:32:38,239
oauth 2.0 and open idconnect

2409
01:32:38,320 --> 01:32:40,320
mostly it was adding security

2410
01:32:40,320 --> 01:32:42,880
requirements that were optional in the

2411
01:32:42,880 --> 01:32:45,520
oauth 2.0 is mandatory

2412
01:32:45,520 --> 01:32:48,000
and we also have in our

2413
01:32:48,000 --> 01:32:50,400
target environment is a enterprise

2414
01:32:50,400 --> 01:32:52,400
environment and so clients and servers

2415
01:32:52,400 --> 01:32:53,280
have

2416
01:32:53,280 --> 01:32:55,199
pki credentials

2417
01:32:55,199 --> 01:32:57,040
that they use to authenticate to each

2418
01:32:57,040 --> 01:33:00,800
other using mutual tls

2419
01:33:00,800 --> 01:33:03,040
and

2420
01:33:03,040 --> 01:33:04,480
so

2421
01:33:04,480 --> 01:33:06,000
now we're working on

2422
01:33:06,000 --> 01:33:10,320
extending oauth token exchange

2423
01:33:11,679 --> 01:33:14,159
in a case where you have a protected

2424
01:33:14,159 --> 01:33:15,440
resource in

2425
01:33:15,440 --> 01:33:17,840
uh one environment that needs to access

2426
01:33:17,840 --> 01:33:19,840
a protected resource in a different

2427
01:33:19,840 --> 01:33:21,920
organization's environment and so next

2428
01:33:21,920 --> 01:33:23,920
slide

2429
01:33:23,920 --> 01:33:26,080
i presented this before

2430
01:33:26,080 --> 01:33:28,080
last year to a couple of people in a

2431
01:33:28,080 --> 01:33:30,080
couple of forums

2432
01:33:30,080 --> 01:33:31,120
and

2433
01:33:31,120 --> 01:33:34,320
i'm back to update you on things

2434
01:33:34,320 --> 01:33:35,360
so

2435
01:33:35,360 --> 01:33:37,199
in a single

2436
01:33:37,199 --> 01:33:39,360
icam environment

2437
01:33:39,360 --> 01:33:41,679
both protected resources are in the same

2438
01:33:41,679 --> 01:33:43,600
icam ecosystem

2439
01:33:43,600 --> 01:33:45,360
so they trust the same authorization

2440
01:33:45,360 --> 01:33:46,719
server

2441
01:33:46,719 --> 01:33:48,239
but i want to talk today about the

2442
01:33:48,239 --> 01:33:50,960
multi-icam ecosystem case where you've

2443
01:33:50,960 --> 01:33:52,480
got a protected resource in one

2444
01:33:52,480 --> 01:33:53,840
organization

2445
01:33:53,840 --> 01:33:55,520
that needs to access a protected

2446
01:33:55,520 --> 01:33:57,920
resource in a second organization

2447
01:33:57,920 --> 01:34:00,480
excuse me

2448
01:34:01,120 --> 01:34:02,960
and

2449
01:34:02,960 --> 01:34:05,040
so we use make use of oauth token

2450
01:34:05,040 --> 01:34:06,159
exchange

2451
01:34:06,159 --> 01:34:07,760
um

2452
01:34:07,760 --> 01:34:10,080
but in a way that's more of a

2453
01:34:10,080 --> 01:34:12,639
it's a mix of a profile and an extension

2454
01:34:12,639 --> 01:34:13,520
to

2455
01:34:13,520 --> 01:34:15,280
token exchange

2456
01:34:15,280 --> 01:34:16,880
so the goals for this week are to get

2457
01:34:16,880 --> 01:34:18,639
some feedback i

2458
01:34:18,639 --> 01:34:20,400
i sent the document to the mailing list

2459
01:34:20,400 --> 01:34:21,440
and i can

2460
01:34:21,440 --> 01:34:23,440
we haven't had a chance to get a

2461
01:34:23,440 --> 01:34:26,719
public release for our website yet

2462
01:34:26,719 --> 01:34:29,520
but i'm happy to send it to you anyone

2463
01:34:29,520 --> 01:34:31,199
who is interested in reading the

2464
01:34:31,199 --> 01:34:32,400
document

2465
01:34:32,400 --> 01:34:33,679
so i'd like to get some feedback on the

2466
01:34:33,679 --> 01:34:36,000
profiles as well as a new claim that i'm

2467
01:34:36,000 --> 01:34:38,800
defining today

2468
01:34:39,840 --> 01:34:40,800
so

2469
01:34:40,800 --> 01:34:43,280
uh some some requirements that we have

2470
01:34:43,280 --> 01:34:45,600
are that the

2471
01:34:45,600 --> 01:34:48,080
when pr2 in the second organization

2472
01:34:48,080 --> 01:34:50,159
receives the access token that it

2473
01:34:50,159 --> 01:34:51,440
received through

2474
01:34:51,440 --> 01:34:53,360
token exchange from the first protected

2475
01:34:53,360 --> 01:34:54,800
resource

2476
01:34:54,800 --> 01:34:57,440
that token needs to have the client id

2477
01:34:57,440 --> 01:34:58,719
and the

2478
01:34:58,719 --> 01:35:00,480
confirmation claim

2479
01:35:00,480 --> 01:35:02,719
related to pr1

2480
01:35:02,719 --> 01:35:04,800
so that it can do some verification

2481
01:35:04,800 --> 01:35:07,199
in the presentation of the token

2482
01:35:07,199 --> 01:35:09,600
it also includes an actor claim

2483
01:35:09,600 --> 01:35:12,480
which includes the subject as pr1 and

2484
01:35:12,480 --> 01:35:15,119
the issuer of that particular token

2485
01:35:15,119 --> 01:35:17,040
and all previous actor claims so you can

2486
01:35:17,040 --> 01:35:19,600
imagine this may uh propagate from pr1

2487
01:35:19,600 --> 01:35:22,320
to pr2 to pr3 and so that the final

2488
01:35:22,320 --> 01:35:25,040
protected resource can verify the

2489
01:35:25,040 --> 01:35:28,639
identities of everyone participating in

2490
01:35:28,639 --> 01:35:30,080
in the

2491
01:35:30,080 --> 01:35:32,000
exchange

2492
01:35:32,000 --> 01:35:34,159
next slide

2493
01:35:34,159 --> 01:35:37,280
so here's a diagram that may be helpful

2494
01:35:37,280 --> 01:35:40,000
we have two options for this multi-icam

2495
01:35:40,000 --> 01:35:41,119
ecosystem

2496
01:35:41,119 --> 01:35:42,800
situation

2497
01:35:42,800 --> 01:35:44,159
the first one

2498
01:35:44,159 --> 01:35:45,679
the client

2499
01:35:45,679 --> 01:35:48,080
receives its first token presents it the

2500
01:35:48,080 --> 01:35:49,440
pr1

2501
01:35:49,440 --> 01:35:51,440
in the first organization

2502
01:35:51,440 --> 01:35:54,000
but pr1 needs to access pr2 because

2503
01:35:54,000 --> 01:35:55,920
that's where the data is housed for the

2504
01:35:55,920 --> 01:35:58,480
response to the original request

2505
01:35:58,480 --> 01:36:00,159
and so

2506
01:36:00,159 --> 01:36:03,040
pr1 simply does token exchange with its

2507
01:36:03,040 --> 01:36:05,840
authorization server in organization one

2508
01:36:05,840 --> 01:36:08,880
it presents that token to pr2 in the

2509
01:36:08,880 --> 01:36:11,280
second organization

2510
01:36:11,280 --> 01:36:15,600
and then pr2 uses it validates the token

2511
01:36:15,600 --> 01:36:18,320
and id with its authorization server as2

2512
01:36:18,320 --> 01:36:20,080
and organization 2.

2513
01:36:20,080 --> 01:36:21,760
and because we have this attribute

2514
01:36:21,760 --> 01:36:24,239
sharing infrastructure as1 and as2 can

2515
01:36:24,239 --> 01:36:26,239
communicate with each other out of band

2516
01:36:26,239 --> 01:36:28,239
so the as2 can validate the token that

2517
01:36:28,239 --> 01:36:29,920
it received because the first token was

2518
01:36:29,920 --> 01:36:30,960
generated

2519
01:36:30,960 --> 01:36:33,440
by as1 and so there needs to be this

2520
01:36:33,440 --> 01:36:34,560
underlying attribute sharing

2521
01:36:34,560 --> 01:36:36,000
infrastructure for the two authorization

2522
01:36:36,000 --> 01:36:39,040
servers to communicate with each other

2523
01:36:39,040 --> 01:36:41,199
now the next slide please

2524
01:36:41,199 --> 01:36:43,040
the the use case that we've had problems

2525
01:36:43,040 --> 01:36:44,400
with in the past and some of you may

2526
01:36:44,400 --> 01:36:46,400
recall uh

2527
01:36:46,400 --> 01:36:47,760
we proposed this that didn't have a

2528
01:36:47,760 --> 01:36:50,320
solution so now i'm proposing a solution

2529
01:36:50,320 --> 01:36:52,880
so in this case when pr1 performs token

2530
01:36:52,880 --> 01:36:54,560
exchange with its authorization server

2531
01:36:54,560 --> 01:36:55,920
as1

2532
01:36:55,920 --> 01:36:58,080
instead of off instead of as1 generating

2533
01:36:58,080 --> 01:37:00,400
the token and returning it it actually

2534
01:37:00,400 --> 01:37:01,520
pauses

2535
01:37:01,520 --> 01:37:02,400
uh

2536
01:37:02,400 --> 01:37:04,719
generates a jot assertion sends that to

2537
01:37:04,719 --> 01:37:08,480
as2 or as2 generates the token

2538
01:37:08,480 --> 01:37:10,960
sends it back to as1 who then returns it

2539
01:37:10,960 --> 01:37:11,760
to

2540
01:37:11,760 --> 01:37:13,679
pr1 and then everything is fine from

2541
01:37:13,679 --> 01:37:16,159
there on out because pr2 can

2542
01:37:16,159 --> 01:37:17,360
validate the token because it was

2543
01:37:17,360 --> 01:37:20,239
generated by as2

2544
01:37:20,239 --> 01:37:22,320
however this requires some custom

2545
01:37:22,320 --> 01:37:24,639
processing at as1

2546
01:37:24,639 --> 01:37:25,920
because

2547
01:37:25,920 --> 01:37:27,600
i kind of

2548
01:37:27,600 --> 01:37:30,400
flew past it earlier but we require

2549
01:37:30,400 --> 01:37:32,960
for pr2's validation of the token

2550
01:37:32,960 --> 01:37:35,280
that the client id and cnf fields in the

2551
01:37:35,280 --> 01:37:36,639
token that's being presented to it

2552
01:37:36,639 --> 01:37:38,639
identify pr1

2553
01:37:38,639 --> 01:37:41,600
and if you just do this as is that's not

2554
01:37:41,600 --> 01:37:44,080
going to be the case because when as1

2555
01:37:44,080 --> 01:37:46,239
generates that jot assertion the token

2556
01:37:46,239 --> 01:37:49,040
it receives should identify as1 in the

2557
01:37:49,040 --> 01:37:51,920
client id and cnf fields

2558
01:37:51,920 --> 01:37:52,800
so

2559
01:37:52,800 --> 01:37:55,600
to fix this problem

2560
01:37:55,600 --> 01:38:00,159
we are proposing a new claim next line

2561
01:38:00,159 --> 01:38:02,320
and this claim is chained id which

2562
01:38:02,320 --> 01:38:04,000
basically just passes those two bits of

2563
01:38:04,000 --> 01:38:05,199
information

2564
01:38:05,199 --> 01:38:08,880
the client id and cnf fields from pr1

2565
01:38:08,880 --> 01:38:11,679
to as2 and then as2

2566
01:38:11,679 --> 01:38:14,000
uh does a little bit of uh

2567
01:38:14,000 --> 01:38:16,719
uh it populates the the

2568
01:38:16,719 --> 01:38:18,639
sudden odd claims uh according to the

2569
01:38:18,639 --> 01:38:19,920
specs but

2570
01:38:19,920 --> 01:38:22,239
instead of filling the client id and cnf

2571
01:38:22,239 --> 01:38:24,560
fields with the values of as1

2572
01:38:24,560 --> 01:38:26,400
it uses the information that was passed

2573
01:38:26,400 --> 01:38:29,040
to it through the chained id claim

2574
01:38:29,040 --> 01:38:31,840
to populate the client90 and cnf fields

2575
01:38:31,840 --> 01:38:34,320
in the new access token

2576
01:38:34,320 --> 01:38:36,880
so that when prt receives it it can

2577
01:38:36,880 --> 01:38:38,960
validate the token

2578
01:38:38,960 --> 01:38:41,600
should be coming from pr1

2579
01:38:41,600 --> 01:38:43,280
and so that's that's my

2580
01:38:43,280 --> 01:38:45,440
proposal for a new claim and uh next

2581
01:38:45,440 --> 01:38:48,080
slide i'd like to get some feedback

2582
01:38:48,080 --> 01:38:48,960
on

2583
01:38:48,960 --> 01:38:51,360
uh thoughts of whether this

2584
01:38:51,360 --> 01:38:54,080
new custom processing at as1

2585
01:38:54,080 --> 01:38:56,719
is reasonable and whether this new claim

2586
01:38:56,719 --> 01:38:58,880
could be

2587
01:38:58,880 --> 01:39:01,520
valid or useful to anybody else

2588
01:39:01,520 --> 01:39:03,040
we do have some implementations we've

2589
01:39:03,040 --> 01:39:04,639
got one in ping feder right now that

2590
01:39:04,639 --> 01:39:06,560
uses custom processing at as1 like i

2591
01:39:06,560 --> 01:39:07,679
mentioned

2592
01:39:07,679 --> 01:39:10,239
and we're working on key cloak next

2593
01:39:10,239 --> 01:39:12,400
and so uh i know we don't have a lot of

2594
01:39:12,400 --> 01:39:15,119
time today so i'm happy to be available

2595
01:39:15,119 --> 01:39:17,360
the rest of the week to discuss uh any

2596
01:39:17,360 --> 01:39:20,320
interest in these profiles as well as

2597
01:39:20,320 --> 01:39:23,600
uh what you think on this new claim

2598
01:39:23,600 --> 01:39:25,679
hi sorry the meet you wouldn't let me

2599
01:39:25,679 --> 01:39:27,840
log in um

2600
01:39:27,840 --> 01:39:29,760
is there a draft for this

2601
01:39:29,760 --> 01:39:32,639
yeah so uh like i mentioned we we have

2602
01:39:32,639 --> 01:39:34,159
to go through a public release process

2603
01:39:34,159 --> 01:39:36,239
and so it hasn't been posted to a url

2604
01:39:36,239 --> 01:39:38,239
yet but i can send it to you

2605
01:39:38,239 --> 01:39:40,080
uh it's been posted to the mailing list

2606
01:39:40,080 --> 01:39:41,520
i included it as an attachment and i

2607
01:39:41,520 --> 01:39:43,199
don't know if it got scrubbed on the way

2608
01:39:43,199 --> 01:39:45,119
to you guys okay uh but i'm happy to

2609
01:39:45,119 --> 01:39:47,360
send the document out uh to anyone who

2610
01:39:47,360 --> 01:39:48,639
requests it

2611
01:39:48,639 --> 01:39:50,400
okay um

2612
01:39:50,400 --> 01:39:53,600
so my general comment uh when as soon as

2613
01:39:53,600 --> 01:39:55,840
i saw a client id

2614
01:39:55,840 --> 01:39:57,440
uh my

2615
01:39:57,440 --> 01:39:58,800
my thought was

2616
01:39:58,800 --> 01:40:01,360
what's the format of that is there a

2617
01:40:01,360 --> 01:40:03,600
specified format or is it ambiguous is

2618
01:40:03,600 --> 01:40:05,199
it a you know just a

2619
01:40:05,199 --> 01:40:07,119
opaque string

2620
01:40:07,119 --> 01:40:09,520
there's no specific no specific so i

2621
01:40:09,520 --> 01:40:12,239
want to caution anyone who likes the

2622
01:40:12,239 --> 01:40:14,880
idea of leaving opaque strings

2623
01:40:14,880 --> 01:40:17,920
uh i want to use the cautionary tale of

2624
01:40:17,920 --> 01:40:22,679
the subject field of x-509 certificates

2625
01:40:23,040 --> 01:40:25,679
we had to go and invent a whole another

2626
01:40:25,679 --> 01:40:28,239
a whole other extension of

2627
01:40:28,239 --> 01:40:29,679
subject alt name

2628
01:40:29,679 --> 01:40:31,760
which has a structure which has several

2629
01:40:31,760 --> 01:40:35,440
different types so that you can

2630
01:40:35,679 --> 01:40:38,159
partially unscrew the

2631
01:40:38,159 --> 01:40:40,000
the mess that was created by having

2632
01:40:40,000 --> 01:40:41,920
something that was completely opaque i

2633
01:40:41,920 --> 01:40:44,480
think it's perfectly fine if you have

2634
01:40:44,480 --> 01:40:46,320
uh sort of uh

2635
01:40:46,320 --> 01:40:48,320
types and one of the types is this is an

2636
01:40:48,320 --> 01:40:49,520
opaque blob

2637
01:40:49,520 --> 01:40:51,760
but not having a way to

2638
01:40:51,760 --> 01:40:53,520
indicate that there is a structure is a

2639
01:40:53,520 --> 01:40:55,040
recipe for

2640
01:40:55,040 --> 01:40:57,280
pain going down the road later thank you

2641
01:40:57,280 --> 01:40:58,719
got it thank you

2642
01:40:58,719 --> 01:41:01,600
and that was rohan

2643
01:41:01,600 --> 01:41:02,840
all right thank

2644
01:41:02,840 --> 01:41:04,800
you any

2645
01:41:04,800 --> 01:41:08,239
other comments questions

2646
01:41:10,000 --> 01:41:11,600
sorry rick taylor i should probably use

2647
01:41:11,600 --> 01:41:13,280
the meat echo app but i've just jumped

2648
01:41:13,280 --> 01:41:16,000
to my feet um

2649
01:41:16,000 --> 01:41:17,920
i'm just kind of i'm i'm observing i

2650
01:41:17,920 --> 01:41:19,840
haven't obviously read this draft

2651
01:41:19,840 --> 01:41:21,199
because it's difficult to get hold of

2652
01:41:21,199 --> 01:41:23,840
and i haven't read rifat's draft

2653
01:41:23,840 --> 01:41:26,400
but i'm you it isn't the solution to

2654
01:41:26,400 --> 01:41:28,560
this uh this claim this kind of

2655
01:41:28,560 --> 01:41:31,040
delegated authority that that as1 is

2656
01:41:31,040 --> 01:41:33,840
saying i um

2657
01:41:34,400 --> 01:41:35,840
i'm just thinking off the top of my head

2658
01:41:35,840 --> 01:41:38,560
here isn't the solution to the what

2659
01:41:38,560 --> 01:41:40,159
should go in this new claim field is

2660
01:41:40,159 --> 01:41:42,880
actually you're embedding a sub token so

2661
01:41:42,880 --> 01:41:44,239
there's there's some kind of recursive

2662
01:41:44,239 --> 01:41:45,679
element here where

2663
01:41:45,679 --> 01:41:48,159
that delegated claim as you're moving

2664
01:41:48,159 --> 01:41:50,239
between authentication areas could be

2665
01:41:50,239 --> 01:41:52,080
captured by the formats you're talking

2666
01:41:52,080 --> 01:41:54,000
about rifat in terms of

2667
01:41:54,000 --> 01:41:56,960
it's just a token within a token

2668
01:41:56,960 --> 01:41:59,119
i i think you guys know i think we

2669
01:41:59,119 --> 01:42:00,159
should think about this and talk about

2670
01:42:00,159 --> 01:42:01,199
this that makes it that makes a lot of

2671
01:42:01,199 --> 01:42:03,520
sense my work is done all right thank

2672
01:42:03,520 --> 01:42:05,760
you i appreciate it thank you

2673
01:42:05,760 --> 01:42:09,440
any other comments questions

2674
01:42:10,239 --> 01:42:12,840
all right okay thank

2675
01:42:12,840 --> 01:42:16,920
you all

2676
01:42:29,440 --> 01:42:32,560
yeah hi everyone my first ietf as well

2677
01:42:32,560 --> 01:42:35,040
so uh thank you comfort for having me on

2678
01:42:35,040 --> 01:42:37,119
the on the schedule

2679
01:42:37,119 --> 01:42:38,239
um

2680
01:42:38,239 --> 01:42:41,119
so uh i'm atul tul shibakwali i'm cto of

2681
01:42:41,119 --> 01:42:43,520
a company a relatively new company

2682
01:42:43,520 --> 01:42:44,800
called signal

2683
01:42:44,800 --> 01:42:47,440
uh and that's my email address and

2684
01:42:47,440 --> 01:42:48,800
twitter handle there

2685
01:42:48,800 --> 01:42:51,280
um so let's jump

2686
01:42:51,280 --> 01:42:52,800
sorry

2687
01:42:52,800 --> 01:42:54,639
yeah

2688
01:42:54,639 --> 01:42:58,159
yeah let's uh jump right into it um

2689
01:42:58,159 --> 01:42:59,360
so

2690
01:42:59,360 --> 01:43:01,040
what i'm going to talk about today is

2691
01:43:01,040 --> 01:43:02,159
more of a

2692
01:43:02,159 --> 01:43:04,400
sort of you know do we need something

2693
01:43:04,400 --> 01:43:06,000
like this like trying to have a

2694
01:43:06,000 --> 01:43:07,600
discussion about

2695
01:43:07,600 --> 01:43:10,239
whether there is a need to standardize

2696
01:43:10,239 --> 01:43:12,320
something at this level

2697
01:43:12,320 --> 01:43:14,800
of the rpcs which is sort of somewhat

2698
01:43:14,800 --> 01:43:18,159
lower level to what what we um

2699
01:43:18,159 --> 01:43:20,000
are used to talking about

2700
01:43:20,000 --> 01:43:22,480
and the other question then that brings

2701
01:43:22,480 --> 01:43:24,480
up is is this the right forum or is

2702
01:43:24,480 --> 01:43:26,000
there some other

2703
01:43:26,000 --> 01:43:27,600
you know working group that this should

2704
01:43:27,600 --> 01:43:29,440
be discussed right

2705
01:43:29,440 --> 01:43:30,800
um so

2706
01:43:30,800 --> 01:43:33,520
how rbc security seems to work today

2707
01:43:33,520 --> 01:43:36,000
in most cases i know some companies do

2708
01:43:36,000 --> 01:43:37,760
things differently

2709
01:43:37,760 --> 01:43:40,639
is that at the top level you get an um

2710
01:43:40,639 --> 01:43:41,760
sort of a

2711
01:43:41,760 --> 01:43:44,400
service that is consuming an award token

2712
01:43:44,400 --> 01:43:45,520
and then

2713
01:43:45,520 --> 01:43:46,960
you know there's a whole bunch of micro

2714
01:43:46,960 --> 01:43:49,199
services that hang off of that and you

2715
01:43:49,199 --> 01:43:51,840
know all that context is lost at the top

2716
01:43:51,840 --> 01:43:53,840
level itself right so what you then do

2717
01:43:53,840 --> 01:43:54,639
is

2718
01:43:54,639 --> 01:43:58,320
extract whatever sort of user id or

2719
01:43:58,320 --> 01:44:00,080
information you need to do from that

2720
01:44:00,080 --> 01:44:02,000
oauth token and then just you know make

2721
01:44:02,000 --> 01:44:04,480
an rpc call without any security other

2722
01:44:04,480 --> 01:44:06,400
than maybe a mutual tls connection

2723
01:44:06,400 --> 01:44:08,880
between the micro services right a very

2724
01:44:08,880 --> 01:44:10,800
typical approach uh to doing things

2725
01:44:10,800 --> 01:44:11,920
today

2726
01:44:11,920 --> 01:44:15,040
uh the other problem is that um

2727
01:44:15,040 --> 01:44:18,080
you know when you call a third party api

2728
01:44:18,080 --> 01:44:19,600
like

2729
01:44:19,600 --> 01:44:22,159
we had the presentation before where uh

2730
01:44:22,159 --> 01:44:23,760
you have an api key that is very

2731
01:44:23,760 --> 01:44:25,280
powerful because

2732
01:44:25,280 --> 01:44:26,960
when you call that third-party api

2733
01:44:26,960 --> 01:44:28,639
you're using a token that could be

2734
01:44:28,639 --> 01:44:31,119
long-lived could could do things on

2735
01:44:31,119 --> 01:44:33,119
behalf of many users

2736
01:44:33,119 --> 01:44:35,840
and as a result by using that key you

2737
01:44:35,840 --> 01:44:38,239
can pretty much do a lot of damage

2738
01:44:38,239 --> 01:44:39,360
uh

2739
01:44:39,360 --> 01:44:40,960
on the tenant that you have in that

2740
01:44:40,960 --> 01:44:43,040
third-party platform that is you know

2741
01:44:43,040 --> 01:44:44,960
providing that api

2742
01:44:44,960 --> 01:44:47,280
and the third problem that we see is

2743
01:44:47,280 --> 01:44:50,080
as more multi-cloud deployments

2744
01:44:50,080 --> 01:44:52,639
proliferate where you were your own

2745
01:44:52,639 --> 01:44:54,719
tenants are spread across multiple cloud

2746
01:44:54,719 --> 01:44:55,840
platforms

2747
01:44:55,840 --> 01:44:58,480
you still need some security model that

2748
01:44:58,480 --> 01:45:00,639
sort of crosses those boundaries

2749
01:45:00,639 --> 01:45:02,880
and maybe you're using your own kind of

2750
01:45:02,880 --> 01:45:05,119
api keys or you're maybe you know

2751
01:45:05,119 --> 01:45:08,080
creating some specialized kind of tls

2752
01:45:08,080 --> 01:45:10,960
connections between your vpcs

2753
01:45:10,960 --> 01:45:14,080
but again all of these things um

2754
01:45:14,080 --> 01:45:15,040
seem

2755
01:45:15,040 --> 01:45:17,360
to have a few problems and let's go to

2756
01:45:17,360 --> 01:45:19,440
the next slide where where i talk about

2757
01:45:19,440 --> 01:45:21,440
you know what are the issues right

2758
01:45:21,440 --> 01:45:23,520
and basically the issue is that you know

2759
01:45:23,520 --> 01:45:26,080
if you have a vpc compromise

2760
01:45:26,080 --> 01:45:27,520
you end up with

2761
01:45:27,520 --> 01:45:30,239
like a you know terrible amount of uh

2762
01:45:30,239 --> 01:45:32,159
power that you're offering to

2763
01:45:32,159 --> 01:45:34,400
uh any attacker like for example you

2764
01:45:34,400 --> 01:45:36,000
know i'm not trying to pick on any one

2765
01:45:36,000 --> 01:45:37,280
company but

2766
01:45:37,280 --> 01:45:39,360
uh there's a company called one login

2767
01:45:39,360 --> 01:45:41,600
where you know an attacker entered into

2768
01:45:41,600 --> 01:45:44,000
their vpc that attacker was in their vpc

2769
01:45:44,000 --> 01:45:45,360
for months

2770
01:45:45,360 --> 01:45:46,800
and that

2771
01:45:46,800 --> 01:45:48,480
company unfortunately held the

2772
01:45:48,480 --> 01:45:51,040
credentials for a lot of users for

2773
01:45:51,040 --> 01:45:53,199
thousands of other companies right a

2774
01:45:53,199 --> 01:45:55,520
massive compromise resulted from that i

2775
01:45:55,520 --> 01:45:56,719
mean i don't know the extent of the

2776
01:45:56,719 --> 01:46:00,159
compromise but i can imagine the the you

2777
01:46:00,159 --> 01:46:02,080
know the possibilities there

2778
01:46:02,080 --> 01:46:03,920
um but there are you know various ways

2779
01:46:03,920 --> 01:46:05,920
in which this can be achieved right you

2780
01:46:05,920 --> 01:46:07,920
can have a software supply chain attack

2781
01:46:07,920 --> 01:46:09,920
where you know your microservice within

2782
01:46:09,920 --> 01:46:11,920
your vpc gets compromised and then the

2783
01:46:11,920 --> 01:46:13,199
attacker has

2784
01:46:13,199 --> 01:46:15,600
control over your vpc in that way right

2785
01:46:15,600 --> 01:46:18,719
um like uh the person from github

2786
01:46:18,719 --> 01:46:20,320
pointed out that you know you could have

2787
01:46:20,320 --> 01:46:22,080
a dev chain issue where

2788
01:46:22,080 --> 01:46:23,679
uh you know your github has been

2789
01:46:23,679 --> 01:46:26,480
compromised and from there your vpc gets

2790
01:46:26,480 --> 01:46:28,080
compromised

2791
01:46:28,080 --> 01:46:29,920
or you know like in the case of one

2792
01:46:29,920 --> 01:46:32,480
login the privileged user who had access

2793
01:46:32,480 --> 01:46:33,360
to

2794
01:46:33,360 --> 01:46:36,480
the vpc at an administrative level their

2795
01:46:36,480 --> 01:46:38,400
account got phished and you know that

2796
01:46:38,400 --> 01:46:40,480
attacker was able to enter the vc vpc in

2797
01:46:40,480 --> 01:46:41,520
that way

2798
01:46:41,520 --> 01:46:42,480
so i think

2799
01:46:42,480 --> 01:46:44,480
you know we can imagine there are

2800
01:46:44,480 --> 01:46:46,560
various scenarios in which vpcs can get

2801
01:46:46,560 --> 01:46:48,800
compromised and what we would like to do

2802
01:46:48,800 --> 01:46:50,239
is make sure that even if such a

2803
01:46:50,239 --> 01:46:52,000
compromise happens

2804
01:46:52,000 --> 01:46:54,400
that you know the uh extent of the

2805
01:46:54,400 --> 01:46:57,360
damage can be limited right

2806
01:46:57,360 --> 01:46:58,320
um

2807
01:46:58,320 --> 01:46:59,840
and so um

2808
01:46:59,840 --> 01:47:01,920
the same thing where you know

2809
01:47:01,920 --> 01:47:04,000
uh if you're using a third-party api

2810
01:47:04,000 --> 01:47:06,000
let's say you have a tenant and you know

2811
01:47:06,000 --> 01:47:06,960
your

2812
01:47:06,960 --> 01:47:09,440
your tenant uses some you know custom

2813
01:47:09,440 --> 01:47:11,280
process to call a workday you know like

2814
01:47:11,280 --> 01:47:12,880
an hr api

2815
01:47:12,880 --> 01:47:15,040
to onboard people onto your system

2816
01:47:15,040 --> 01:47:16,960
imagine you know if somebody was able to

2817
01:47:16,960 --> 01:47:19,360
get into your vpc and actually

2818
01:47:19,360 --> 01:47:21,760
use that same key to create you know

2819
01:47:21,760 --> 01:47:23,840
fake employee

2820
01:47:23,840 --> 01:47:26,480
that had a lot of access in your sort of

2821
01:47:26,480 --> 01:47:28,639
organization right so this

2822
01:47:28,639 --> 01:47:31,119
uh these api keys are very powerful and

2823
01:47:31,119 --> 01:47:32,960
you know they you know somehow if you

2824
01:47:32,960 --> 01:47:34,960
can restrict that power that that would

2825
01:47:34,960 --> 01:47:36,480
be good as well

2826
01:47:36,480 --> 01:47:38,480
and you know the other problem like i

2827
01:47:38,480 --> 01:47:40,800
said in your multi-cloud deployments you

2828
01:47:40,800 --> 01:47:42,480
know you you may have to roll your own

2829
01:47:42,480 --> 01:47:44,560
security today and you know there's no

2830
01:47:44,560 --> 01:47:46,239
standard for doing that

2831
01:47:46,239 --> 01:47:48,480
and one important thing is that you know

2832
01:47:48,480 --> 01:47:50,639
the oauth token that comes in has a lot

2833
01:47:50,639 --> 01:47:53,440
of context it has basically

2834
01:47:53,440 --> 01:47:56,239
uh a scope it has a user identity

2835
01:47:56,239 --> 01:47:59,199
associated with it uh and you know that

2836
01:47:59,199 --> 01:48:01,360
context is lost in subsequent calls

2837
01:48:01,360 --> 01:48:02,480
right so

2838
01:48:02,480 --> 01:48:04,960
if you can somehow preserve that context

2839
01:48:04,960 --> 01:48:06,639
all the way through to the lowest level

2840
01:48:06,639 --> 01:48:09,840
to maybe at a database level uh that can

2841
01:48:09,840 --> 01:48:12,000
limit the attack

2842
01:48:12,000 --> 01:48:14,239
possibilities quite a bit right next

2843
01:48:14,239 --> 01:48:15,840
slide please

2844
01:48:15,840 --> 01:48:18,480
and so while i don't have a solution

2845
01:48:18,480 --> 01:48:20,960
i have seen some solutions previously i

2846
01:48:20,960 --> 01:48:23,280
used to work at google and

2847
01:48:23,280 --> 01:48:24,960
really admire what they've done

2848
01:48:24,960 --> 01:48:26,560
internally

2849
01:48:26,560 --> 01:48:27,840
but

2850
01:48:27,840 --> 01:48:29,920
what i feel is that

2851
01:48:29,920 --> 01:48:31,040
you know

2852
01:48:31,040 --> 01:48:33,440
a good solution uh would preserve the

2853
01:48:33,440 --> 01:48:36,400
identity and scope at any level right

2854
01:48:36,400 --> 01:48:38,560
it should work the same across your 3p

2855
01:48:38,560 --> 01:48:41,280
apis and your multi-cloud deployments so

2856
01:48:41,280 --> 01:48:43,360
if you have a standard you can carry

2857
01:48:43,360 --> 01:48:45,040
that identity and scope you know

2858
01:48:45,040 --> 01:48:46,960
restrict the scope even further if you

2859
01:48:46,960 --> 01:48:49,360
want all the way through uh you know

2860
01:48:49,360 --> 01:48:51,760
across different cloud platforms down to

2861
01:48:51,760 --> 01:48:54,480
the your lowest level unit database

2862
01:48:54,480 --> 01:48:56,080
and you know the possibility of

2863
01:48:56,080 --> 01:48:58,320
compromise through a vpc compromise

2864
01:48:58,320 --> 01:49:00,239
becomes much lower now because even if

2865
01:49:00,239 --> 01:49:01,280
you had

2866
01:49:01,280 --> 01:49:04,320
a fake service in the vpc you're

2867
01:49:04,320 --> 01:49:05,840
not going to be able to do much until

2868
01:49:05,840 --> 01:49:07,440
you have a user

2869
01:49:07,440 --> 01:49:09,440
credential token with a specific scope

2870
01:49:09,440 --> 01:49:11,679
on behalf of you know so that you can

2871
01:49:11,679 --> 01:49:13,599
act on behalf of that user

2872
01:49:13,599 --> 01:49:15,679
now obviously you need

2873
01:49:15,679 --> 01:49:17,679
at every level you need this to be you

2874
01:49:17,679 --> 01:49:20,320
know independently verifiable so that

2875
01:49:20,320 --> 01:49:22,719
the limit you limit the amount of trust

2876
01:49:22,719 --> 01:49:24,400
you're having between your own

2877
01:49:24,400 --> 01:49:26,080
microservices

2878
01:49:26,080 --> 01:49:28,320
and then if i just grab a token i

2879
01:49:28,320 --> 01:49:29,599
shouldn't be able to use it you know

2880
01:49:29,599 --> 01:49:32,719
sometime later uh and replay uh that

2881
01:49:32,719 --> 01:49:34,880
user's uh ability

2882
01:49:34,880 --> 01:49:35,760
um

2883
01:49:35,760 --> 01:49:38,080
and because this we are talking about we

2884
01:49:38,080 --> 01:49:40,400
you know rpcs which are like

2885
01:49:40,400 --> 01:49:43,199
happening much more frequently than

2886
01:49:43,199 --> 01:49:45,040
like an token exchange at the higher

2887
01:49:45,040 --> 01:49:46,560
level you need this to be super

2888
01:49:46,560 --> 01:49:48,800
efficient right

2889
01:49:48,800 --> 01:49:51,840
um excellent

2890
01:49:51,920 --> 01:49:54,880
and so you know what are possible

2891
01:49:54,880 --> 01:49:56,800
solutions here right so

2892
01:49:56,800 --> 01:49:58,960
um you know you need to be able to come

2893
01:49:58,960 --> 01:50:01,440
up with a token that that is specific to

2894
01:50:01,440 --> 01:50:03,440
users and scopes right and you should be

2895
01:50:03,440 --> 01:50:04,880
able to you know further restrict the

2896
01:50:04,880 --> 01:50:07,199
scope and downstream calls right

2897
01:50:07,199 --> 01:50:09,920
um so so that the service cannot like

2898
01:50:09,920 --> 01:50:11,760
suddenly switch the context i'm

2899
01:50:11,760 --> 01:50:14,800
operating on use on behalf of user a

2900
01:50:14,800 --> 01:50:17,040
and they're uh asking me to make this

2901
01:50:17,040 --> 01:50:18,960
change to their sort of uh you know

2902
01:50:18,960 --> 01:50:20,560
personal email address or something like

2903
01:50:20,560 --> 01:50:22,880
that and i can i can't switch it to be

2904
01:50:22,880 --> 01:50:24,560
like user b and they're trying to change

2905
01:50:24,560 --> 01:50:25,920
their social security number or

2906
01:50:25,920 --> 01:50:28,719
something like that right so um

2907
01:50:28,719 --> 01:50:30,239
you need to be able to do something like

2908
01:50:30,239 --> 01:50:31,119
that

2909
01:50:31,119 --> 01:50:33,520
um in order to limit replay you know you

2910
01:50:33,520 --> 01:50:35,760
may have to go with much smaller you

2911
01:50:35,760 --> 01:50:37,360
know much shorter lift tokens and i

2912
01:50:37,360 --> 01:50:39,920
think something that was proposed before

2913
01:50:39,920 --> 01:50:42,239
as well in today's session

2914
01:50:42,239 --> 01:50:44,480
and you should be able to bind these

2915
01:50:44,480 --> 01:50:46,320
tokens strongly between the originating

2916
01:50:46,320 --> 01:50:48,400
and the destination services so that you

2917
01:50:48,400 --> 01:50:50,560
know you cannot reuse those tokens for

2918
01:50:50,560 --> 01:50:51,920
something else than what they were

2919
01:50:51,920 --> 01:50:54,560
intended for

2920
01:50:54,560 --> 01:50:55,840
and

2921
01:50:55,840 --> 01:50:58,159
somehow achieve interoperability across

2922
01:50:58,159 --> 01:51:00,880
cloud boundaries by maybe token

2923
01:51:00,880 --> 01:51:03,040
introspection or sort of having a common

2924
01:51:03,040 --> 01:51:04,719
route of trust and then

2925
01:51:04,719 --> 01:51:06,400
being able to verify those tokens when

2926
01:51:06,400 --> 01:51:07,920
they're received right

2927
01:51:07,920 --> 01:51:10,400
uh so this is this is all i had i know i

2928
01:51:10,400 --> 01:51:13,599
may um maybe uh finishing much more

2929
01:51:13,599 --> 01:51:16,800
quickly that's why yeah and that's uh

2930
01:51:16,800 --> 01:51:18,560
somewhat by design because i want a lot

2931
01:51:18,560 --> 01:51:21,040
of discussion even today on this and you

2932
01:51:21,040 --> 01:51:22,159
know hopefully

2933
01:51:22,159 --> 01:51:23,280
uh

2934
01:51:23,280 --> 01:51:26,320
you have some questions okay i see

2935
01:51:26,320 --> 01:51:28,000
ben

2936
01:51:28,000 --> 01:51:29,280
go ahead

2937
01:51:29,280 --> 01:51:31,679
whoa uh looks like i'm talking great so

2938
01:51:31,679 --> 01:51:32,639
i have

2939
01:51:32,639 --> 01:51:35,520
several points to make actually um

2940
01:51:35,520 --> 01:51:36,880
and i guess the

2941
01:51:36,880 --> 01:51:39,199
highest level one is just to get a

2942
01:51:39,199 --> 01:51:40,960
common understanding of what we mean by

2943
01:51:40,960 --> 01:51:42,080
rpc

2944
01:51:42,080 --> 01:51:44,320
and like in the talk it sort of sounded

2945
01:51:44,320 --> 01:51:45,280
like

2946
01:51:45,280 --> 01:51:47,679
you you have as at least the main thing

2947
01:51:47,679 --> 01:51:49,360
you're thinking about

2948
01:51:49,360 --> 01:51:52,480
when you've got like a big api

2949
01:51:52,480 --> 01:51:55,040
that is facing to like maybe the actual

2950
01:51:55,040 --> 01:51:57,360
users or some other services and then

2951
01:51:57,360 --> 01:51:59,760
the implementation of that api

2952
01:51:59,760 --> 01:52:01,520
has to go off and make a bunch of other

2953
01:52:01,520 --> 01:52:03,119
internal calls to a bunch of internal

2954
01:52:03,119 --> 01:52:05,840
microservices

2955
01:52:05,840 --> 01:52:08,320
and you're worried about the

2956
01:52:08,320 --> 01:52:09,760
you're mostly worried about these sort

2957
01:52:09,760 --> 01:52:11,520
of internal

2958
01:52:11,520 --> 01:52:13,440
rpcs that are

2959
01:52:13,440 --> 01:52:15,440
to these microservices

2960
01:52:15,440 --> 01:52:17,440
because

2961
01:52:17,440 --> 01:52:19,599
the the back-end implementations

2962
01:52:19,599 --> 01:52:20,480
are

2963
01:52:20,480 --> 01:52:22,239
highly privileged so that they can call

2964
01:52:22,239 --> 01:52:24,400
all of these microservices on behalf of

2965
01:52:24,400 --> 01:52:26,960
the end user

2966
01:52:26,960 --> 01:52:29,760
and that sort of brings up two main

2967
01:52:29,760 --> 01:52:32,800
topics one of which is the sort of

2968
01:52:32,800 --> 01:52:34,960
confused deputy problem

2969
01:52:34,960 --> 01:52:37,280
where you need to make sure that these

2970
01:52:37,280 --> 01:52:40,080
back end microservice calls are bound to

2971
01:52:40,080 --> 01:52:41,760
the specific user and scope that you

2972
01:52:41,760 --> 01:52:43,280
want and that's a problem that we

2973
01:52:43,280 --> 01:52:45,119
already have to solve today

2974
01:52:45,119 --> 01:52:47,520
and you know the most common way that we

2975
01:52:47,520 --> 01:52:49,679
do that is sort of the in-band signal of

2976
01:52:49,679 --> 01:52:51,440
you know i'm making this api call on

2977
01:52:51,440 --> 01:52:54,560
behalf of this user or whatnot

2978
01:52:54,560 --> 01:52:56,480
which is not great but it

2979
01:52:56,480 --> 01:52:57,840
sort of gets the job done but it's

2980
01:52:57,840 --> 01:52:58,880
really something that you have to be

2981
01:52:58,880 --> 01:53:00,080
doing already

2982
01:53:00,080 --> 01:53:01,760
and then the other topic that i heard

2983
01:53:01,760 --> 01:53:02,800
was that

2984
01:53:02,800 --> 01:53:04,639
because this

2985
01:53:04,639 --> 01:53:06,480
back-end implementation has to call so

2986
01:53:06,480 --> 01:53:08,800
many microservices it has very

2987
01:53:08,800 --> 01:53:10,719
privileged credentials there

2988
01:53:10,719 --> 01:53:12,560
and so if the vpc that's hosting that

2989
01:53:12,560 --> 01:53:14,480
service gets compromised then you have a

2990
01:53:14,480 --> 01:53:15,280
very

2991
01:53:15,280 --> 01:53:16,800
privileged credential that's compromised

2992
01:53:16,800 --> 01:53:18,880
as well and you don't necessarily have a

2993
01:53:18,880 --> 01:53:22,800
good way to protect or recover from that

2994
01:53:22,800 --> 01:53:24,159
and that's also an interesting question

2995
01:53:24,159 --> 01:53:24,840
to

2996
01:53:24,840 --> 01:53:26,800
consider um

2997
01:53:26,800 --> 01:53:29,840
and one of the things that comes to mind

2998
01:53:29,840 --> 01:53:32,080
as a potential approach to

2999
01:53:32,080 --> 01:53:34,400
combine a solution for all these

3000
01:53:34,400 --> 01:53:36,480
would be if

3001
01:53:36,480 --> 01:53:37,440
the

3002
01:53:37,440 --> 01:53:40,639
highly privileged credential that the

3003
01:53:40,639 --> 01:53:42,239
implementation how the service

3004
01:53:42,239 --> 01:53:44,239
implementation has

3005
01:53:44,239 --> 01:53:46,320
is not directly usable for calling the

3006
01:53:46,320 --> 01:53:49,360
microservices but rather you have to

3007
01:53:49,360 --> 01:53:51,760
go to some other

3008
01:53:51,760 --> 01:53:54,960
credential token issuing service

3009
01:53:54,960 --> 01:53:56,480
and authenticates yourself as this

3010
01:53:56,480 --> 01:53:58,239
highly privileged user but also at the

3011
01:53:58,239 --> 01:54:00,480
same time present some evidence

3012
01:54:00,480 --> 01:54:01,440
about

3013
01:54:01,440 --> 01:54:03,119
the

3014
01:54:03,119 --> 01:54:05,599
request that you are servicing

3015
01:54:05,599 --> 01:54:08,560
so that your short-lived

3016
01:54:08,560 --> 01:54:10,400
credentials that actually unless you

3017
01:54:10,400 --> 01:54:12,320
call the microservices can then be more

3018
01:54:12,320 --> 01:54:13,679
easily bound

3019
01:54:13,679 --> 01:54:15,920
and i know that's going to be

3020
01:54:15,920 --> 01:54:18,639
uh hard to do efficiently which i think

3021
01:54:18,639 --> 01:54:20,639
you specifically raised

3022
01:54:20,639 --> 01:54:22,639
but it's uh it's also the only thing

3023
01:54:22,639 --> 01:54:24,159
that really comes to mind as a way to

3024
01:54:24,159 --> 01:54:25,840
combine all these properties

3025
01:54:25,840 --> 01:54:28,400
and i just dropped a lot on you so

3026
01:54:28,400 --> 01:54:29,520
uh

3027
01:54:29,520 --> 01:54:31,520
ask clarification if you need anything

3028
01:54:31,520 --> 01:54:34,320
and i'm happy to hear your thoughts

3029
01:54:34,320 --> 01:54:36,960
yeah so you're you're right on in terms

3030
01:54:36,960 --> 01:54:39,280
of sort of what is the problem we're

3031
01:54:39,280 --> 01:54:40,960
trying to solve there's one more aspect

3032
01:54:40,960 --> 01:54:42,400
which is sort of

3033
01:54:42,400 --> 01:54:45,360
in addition to the microservice rpcs and

3034
01:54:45,360 --> 01:54:47,199
the third-party api calls there's also

3035
01:54:47,199 --> 01:54:49,679
the multi-cloud aspect of this

3036
01:54:49,679 --> 01:54:51,840
where you have you know multiple vpcs

3037
01:54:51,840 --> 01:54:53,920
and different cloud platforms and so

3038
01:54:53,920 --> 01:54:55,040
you're trying to solve the similar

3039
01:54:55,040 --> 01:54:57,440
problem but it's just within your sort

3040
01:54:57,440 --> 01:54:59,199
of infrastructure if you will

3041
01:54:59,199 --> 01:55:01,920
uh but yeah you're right on in terms of

3042
01:55:01,920 --> 01:55:02,880
um

3043
01:55:02,880 --> 01:55:05,199
like the scope of the issue that we're

3044
01:55:05,199 --> 01:55:06,400
trying to solve

3045
01:55:06,400 --> 01:55:08,320
uh or or

3046
01:55:08,320 --> 01:55:10,480
we're trying to i'm trying to bring up

3047
01:55:10,480 --> 01:55:11,520
over here

3048
01:55:11,520 --> 01:55:13,840
um

3049
01:55:14,239 --> 01:55:16,400
yeah uh was there anything specifically

3050
01:55:16,400 --> 01:55:19,599
you wanted me to answer

3051
01:55:19,599 --> 01:55:21,440
uh i'm kind of curious to hear your

3052
01:55:21,440 --> 01:55:23,440
thoughts about how this relates to

3053
01:55:23,440 --> 01:55:25,520
existing solutions for the confused

3054
01:55:25,520 --> 01:55:27,840
deputy problem because

3055
01:55:27,840 --> 01:55:29,920
i would hope that people are already

3056
01:55:29,920 --> 01:55:32,560
solving the confused deputy problem

3057
01:55:32,560 --> 01:55:34,159
and i don't know if you were thinking

3058
01:55:34,159 --> 01:55:35,760
this would build on top of that or be a

3059
01:55:35,760 --> 01:55:38,880
different sort of solution

3060
01:55:38,880 --> 01:55:40,880
right um so

3061
01:55:40,880 --> 01:55:41,920
i guess

3062
01:55:41,920 --> 01:55:44,239
i'm aware of a few proprietary solutions

3063
01:55:44,239 --> 01:55:45,199
today

3064
01:55:45,199 --> 01:55:48,080
that solved some of these problems but

3065
01:55:48,080 --> 01:55:50,080
i'm not aware of something that

3066
01:55:50,080 --> 01:55:52,800
is adopted as a standard

3067
01:55:52,800 --> 01:55:54,560
okay

3068
01:55:54,560 --> 01:55:56,239
uh if you want to point me in that

3069
01:55:56,239 --> 01:55:58,239
direction i would love to go research

3070
01:55:58,239 --> 01:56:01,199
something

3071
01:56:01,199 --> 01:56:03,280
yeah i think i'll drop a link in the

3072
01:56:03,280 --> 01:56:04,960
chat to

3073
01:56:04,960 --> 01:56:05,920
some

3074
01:56:05,920 --> 01:56:08,719
kerberos related work that

3075
01:56:08,719 --> 01:56:10,480
covers some of the things i was talking

3076
01:56:10,480 --> 01:56:12,320
about but i don't know of anything

3077
01:56:12,320 --> 01:56:15,520
that's a lot specific

3078
01:56:15,520 --> 01:56:18,239
sure thanks

3079
01:56:18,480 --> 01:56:22,239
okay thanks ben george

3080
01:56:24,159 --> 01:56:25,599
all right yeah i was just going to

3081
01:56:25,599 --> 01:56:27,360
follow up i threw a couple of links in

3082
01:56:27,360 --> 01:56:29,679
the chat as well a tool um for work

3083
01:56:29,679 --> 01:56:32,480
that's very similar to this um i'm not

3084
01:56:32,480 --> 01:56:34,719
sure that trying to solve all of these

3085
01:56:34,719 --> 01:56:37,280
problems with a single solution

3086
01:56:37,280 --> 01:56:39,199
is going to make sense like the third

3087
01:56:39,199 --> 01:56:41,360
party api one you might want to think

3088
01:56:41,360 --> 01:56:44,159
about you know uh what kelly from mitre

3089
01:56:44,159 --> 01:56:46,239
was talking about in cross domains if

3090
01:56:46,239 --> 01:56:48,320
those are truly third parties that i'm

3091
01:56:48,320 --> 01:56:49,840
reaching out to

3092
01:56:49,840 --> 01:56:52,320
um and how that might be a better

3093
01:56:52,320 --> 01:56:55,520
solution as as it relates to the token

3094
01:56:55,520 --> 01:56:58,400
management but for sure the the top

3095
01:56:58,400 --> 01:57:00,880
um two or three things i've seen a

3096
01:57:00,880 --> 01:57:02,320
couple of things one of them is from

3097
01:57:02,320 --> 01:57:05,280
netflix one of them was a talk i gave

3098
01:57:05,280 --> 01:57:08,159
identiverse in 2019

3099
01:57:08,159 --> 01:57:09,520
so i think there's

3100
01:57:09,520 --> 01:57:11,119
thoughts in the space i would agree with

3101
01:57:11,119 --> 01:57:12,800
you i don't know of any standard that

3102
01:57:12,800 --> 01:57:15,040
exists today but i think we have a lot

3103
01:57:15,040 --> 01:57:17,840
of things to build on

3104
01:57:17,840 --> 01:57:19,760
that's yeah uh

3105
01:57:19,760 --> 01:57:22,400
that's great i'll look them up i'm i'm

3106
01:57:22,400 --> 01:57:24,800
obviously not familiar with the netflix

3107
01:57:24,800 --> 01:57:27,760
implementation but yeah

3108
01:57:27,760 --> 01:57:31,360
i'd love to take a look

3109
01:57:32,080 --> 01:57:33,280
um

3110
01:57:33,280 --> 01:57:34,480
so yeah i think

3111
01:57:34,480 --> 01:57:36,840
the real question is you know is this

3112
01:57:36,840 --> 01:57:40,400
something that everyone can benefit from

3113
01:57:40,400 --> 01:57:42,639
from standardization right and

3114
01:57:42,639 --> 01:57:44,320
that's sort of

3115
01:57:44,320 --> 01:57:46,320
the open question i wanted to bring up

3116
01:57:46,320 --> 01:57:50,199
in this talk today

3117
01:57:52,239 --> 01:57:54,880
any other yeah

3118
01:57:54,880 --> 01:57:58,080
yeah i think i think i hope you're here

3119
01:57:58,080 --> 01:58:00,080
this week so that may give us a chance

3120
01:58:00,080 --> 01:58:03,280
to like socialize and discuss and to dig

3121
01:58:03,280 --> 01:58:04,719
deeper into the

3122
01:58:04,719 --> 01:58:07,280
um into this aspect and see where some

3123
01:58:07,280 --> 01:58:09,360
of the folks in the room have actually

3124
01:58:09,360 --> 01:58:11,440
thought about solutions already or have

3125
01:58:11,440 --> 01:58:14,080
run into similar challenges and so i

3126
01:58:14,080 --> 01:58:17,199
think it's a good conversation starter

3127
01:58:17,199 --> 01:58:20,400
right yeah and informally like uh i've

3128
01:58:20,400 --> 01:58:23,440
spoken to some folks um

3129
01:58:23,440 --> 01:58:26,000
uh at one of the big platform providers

3130
01:58:26,000 --> 01:58:28,960
aws and they seem to have interest in

3131
01:58:28,960 --> 01:58:32,159
standardizing i think peter also uh

3132
01:58:32,159 --> 01:58:34,400
peter and i also talked about this

3133
01:58:34,400 --> 01:58:36,960
um there seems to be some

3134
01:58:36,960 --> 01:58:39,599
interest from google very early so

3135
01:58:39,599 --> 01:58:41,280
uh

3136
01:58:41,280 --> 01:58:43,199
things may be sort of going in the right

3137
01:58:43,199 --> 01:58:45,440
direction but this is a good week for me

3138
01:58:45,440 --> 01:58:47,280
to have discussions and

3139
01:58:47,280 --> 01:58:48,719
and sort of

3140
01:58:48,719 --> 01:58:50,480
bring it up a little bit on in terms of

3141
01:58:50,480 --> 01:58:53,040
mind share

3142
01:58:53,119 --> 01:58:57,598
yeah yeah and that's great i think

3143
01:58:58,000 --> 01:58:59,599
obviously you're welcome to come back

3144
01:58:59,599 --> 01:59:01,840
after that and and if you have a

3145
01:59:01,840 --> 01:59:04,159
solution in mind and you want to discuss

3146
01:59:04,159 --> 01:59:05,679
your sure

3147
01:59:05,679 --> 01:59:06,639
yeah

3148
01:59:06,639 --> 01:59:09,440
uh sure thanks everyone uh maybe in uh

3149
01:59:09,440 --> 01:59:11,280
one of those successful meetings we can

3150
01:59:11,280 --> 01:59:13,040
sort of go into some detail sure

3151
01:59:13,040 --> 01:59:16,400
potentials yes if needed we can do that

3152
01:59:16,400 --> 01:59:18,880
sounds good thank you okay

3153
01:59:18,880 --> 01:59:20,480
i think we are

3154
01:59:20,480 --> 01:59:22,560
one minute

3155
01:59:22,560 --> 01:59:24,719
any other business any other comments

3156
01:59:24,719 --> 01:59:27,280
questions

3157
01:59:28,320 --> 01:59:33,880
okay well thank you all we're done

3158
01:59:34,350 --> 01:59:38,369
[Applause]

3159
02:00:00,480 --> 02:00:03,480
um

3160
02:00:47,440 --> 02:00:50,598
all right

3161
02:00:55,760 --> 02:00:57,840
you

