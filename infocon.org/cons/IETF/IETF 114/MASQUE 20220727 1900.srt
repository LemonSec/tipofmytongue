1
00:00:05,440 --> 00:00:08,440
okay

2
00:00:25,920 --> 00:00:29,320
you can share

3
00:00:34,480 --> 00:00:37,480
um

4
00:01:04,720 --> 00:01:07,960
thank you

5
00:01:32,479 --> 00:01:33,840
all right

6
00:01:33,840 --> 00:01:36,000
before we get to started can we get a

7
00:01:36,000 --> 00:01:37,680
volunteer to jabber scribe and a

8
00:01:37,680 --> 00:01:41,720
volunteer to take some notes

9
00:01:42,560 --> 00:01:45,759
quick everybody look away

10
00:01:46,000 --> 00:01:48,240
be sure to look at the remote attendees

11
00:01:48,240 --> 00:01:49,840
they can hear

12
00:01:49,840 --> 00:01:52,840
yes

13
00:02:06,399 --> 00:02:09,399
oh

14
00:02:09,440 --> 00:02:11,840
so what exactly does a jabber scribe do

15
00:02:11,840 --> 00:02:14,959
in the current situation

16
00:02:15,200 --> 00:02:17,440
well

17
00:02:18,720 --> 00:02:20,959
the traditional mode for anyone who is

18
00:02:20,959 --> 00:02:22,879
text only and listening to the remote

19
00:02:22,879 --> 00:02:26,079
audio stream question mark

20
00:02:28,080 --> 00:02:28,959
yeah

21
00:02:28,959 --> 00:02:30,959
i can do that

22
00:02:30,959 --> 00:02:32,800
now it's actually useful that we've had

23
00:02:32,800 --> 00:02:34,640
a few sessions this week where someone's

24
00:02:34,640 --> 00:02:35,920
audio like just

25
00:02:35,920 --> 00:02:37,599
we couldn't hear them their microphone

26
00:02:37,599 --> 00:02:40,080
was on the frets so they said that i can

27
00:02:40,080 --> 00:02:42,959
be me i can be jeb prescribed

28
00:02:42,959 --> 00:02:45,840
i think ted was also volunteering but

29
00:02:45,840 --> 00:02:48,400
thank you ted

30
00:02:49,519 --> 00:02:53,640
who would like to take some notes

31
00:03:08,400 --> 00:03:09,920
somebody want to bite the bullet can we

32
00:03:09,920 --> 00:03:11,599
get two people to take notes and back

33
00:03:11,599 --> 00:03:13,280
each other up sometimes it's a little

34
00:03:13,280 --> 00:03:14,800
less intimidating if you have a partner

35
00:03:14,800 --> 00:03:17,959
in crime

36
00:03:28,400 --> 00:03:29,640
thank you very

37
00:03:29,640 --> 00:03:32,560
much do you want

38
00:03:32,560 --> 00:03:34,879
minimum is anything that we

39
00:03:34,879 --> 00:03:37,360
appear to decide and outcomes from

40
00:03:37,360 --> 00:03:40,560
different questions and conversations

41
00:03:40,560 --> 00:03:41,920
no need to transcribe it's all on

42
00:03:41,920 --> 00:03:44,920
youtube

43
00:03:53,040 --> 00:03:54,319
exactly

44
00:03:54,319 --> 00:03:58,280
all right thank you very much sir

45
00:04:06,000 --> 00:04:07,519
all right with that out of the way let's

46
00:04:07,519 --> 00:04:10,879
get started welcome to mask at ietf 114

47
00:04:10,879 --> 00:04:12,480
this is the first

48
00:04:12,480 --> 00:04:14,879
in person-ish meeting of the mask

49
00:04:14,879 --> 00:04:17,440
working group we had one in vienna

50
00:04:17,440 --> 00:04:18,880
that's the ish part

51
00:04:18,880 --> 00:04:21,120
um

52
00:04:21,279 --> 00:04:23,520
diving right in

53
00:04:23,520 --> 00:04:25,360
this session is being recorded it will

54
00:04:25,360 --> 00:04:27,360
be on youtube anything you say will be

55
00:04:27,360 --> 00:04:29,199
visible and audible to

56
00:04:29,199 --> 00:04:31,199
everyone else in the world

57
00:04:31,199 --> 00:04:32,800
make sure that you have already joined

58
00:04:32,800 --> 00:04:35,040
via the on-site tool if you're here in

59
00:04:35,040 --> 00:04:36,880
person if you're here remotely via the

60
00:04:36,880 --> 00:04:38,080
video stream you already know where that

61
00:04:38,080 --> 00:04:40,639
link leads

62
00:04:41,040 --> 00:04:43,199
as usual you can get into the queue by

63
00:04:43,199 --> 00:04:44,960
raising your hand and leaving it by

64
00:04:44,960 --> 00:04:46,720
lowering your hand

65
00:04:46,720 --> 00:04:48,800
and you can start and stop sending audio

66
00:04:48,800 --> 00:04:50,000
please state your phone name before

67
00:04:50,000 --> 00:04:53,919
speaking and use headphones if remote

68
00:04:54,320 --> 00:04:56,240
this is the iutf notewell you've already

69
00:04:56,240 --> 00:04:57,680
seen it by this point in the week but

70
00:04:57,680 --> 00:04:58,960
please take a moment to make sure that

71
00:04:58,960 --> 00:05:00,639
you are familiar with

72
00:05:00,639 --> 00:05:02,960
what we do

73
00:05:02,960 --> 00:05:04,080
make sure that you're familiar with the

74
00:05:04,080 --> 00:05:05,680
note well this these are the terms under

75
00:05:05,680 --> 00:05:08,000
which we participate in the itf

76
00:05:08,000 --> 00:05:09,600
pay extra attention to the parts about

77
00:05:09,600 --> 00:05:11,360
the code of contact and how we treat

78
00:05:11,360 --> 00:05:14,400
ourselves and others

79
00:05:15,680 --> 00:05:17,520
in addition if you are here in the room

80
00:05:17,520 --> 00:05:20,320
at itf 114 there is a mask policy in

81
00:05:20,320 --> 00:05:23,039
effect you must be wearing a legitimate

82
00:05:23,039 --> 00:05:24,880
and good mask if you do not have one

83
00:05:24,880 --> 00:05:26,240
they are out at registration you can

84
00:05:26,240 --> 00:05:29,120
just go pick one up

85
00:05:33,199 --> 00:05:34,720
we have some fun helpful links this is

86
00:05:34,720 --> 00:05:36,160
mostly useful if you can actually click

87
00:05:36,160 --> 00:05:38,080
on them

88
00:05:38,080 --> 00:05:39,919
and this is our agenda for today we have

89
00:05:39,919 --> 00:05:41,199
a bunch of stuff so we're going to start

90
00:05:41,199 --> 00:05:43,759
off by talking about connect ip

91
00:05:43,759 --> 00:05:45,280
and moving some of that forward

92
00:05:45,280 --> 00:05:47,199
hopefully in a pretty big way

93
00:05:47,199 --> 00:05:48,880
and then we've got some new work that's

94
00:05:48,880 --> 00:05:50,400
being proposed in the form of a couple

95
00:05:50,400 --> 00:05:51,680
different individual drafts from

96
00:05:51,680 --> 00:05:53,120
different people

97
00:05:53,120 --> 00:05:55,280
and at the end we're going to take some

98
00:05:55,280 --> 00:05:57,919
time and talk about rechartering

99
00:05:57,919 --> 00:05:59,919
because our current charter takes us

100
00:05:59,919 --> 00:06:01,520
right through the end of connect ip and

101
00:06:01,520 --> 00:06:04,240
stops there

102
00:06:04,800 --> 00:06:06,479
with that tommy

103
00:06:06,479 --> 00:06:07,280
let's

104
00:06:07,280 --> 00:06:09,120
talk about connect ip

105
00:06:09,120 --> 00:06:11,520
okay

106
00:06:11,520 --> 00:06:13,199
do you want to have your phone present

107
00:06:13,199 --> 00:06:14,479
some slides do you want me to click for

108
00:06:14,479 --> 00:06:16,000
you um

109
00:06:16,000 --> 00:06:20,280
let's see let's try this thing

110
00:06:24,000 --> 00:06:25,039
i'm already

111
00:06:25,039 --> 00:06:27,759
on qr code so i'm asking to share slides

112
00:06:27,759 --> 00:06:29,600
yes perfect are you going to approve me

113
00:06:29,600 --> 00:06:33,720
yes indeed thank you

114
00:06:46,960 --> 00:06:48,560
which it doesn't actually give you a

115
00:06:48,560 --> 00:06:50,720
place to select there you go

116
00:06:50,720 --> 00:06:52,800
much better

117
00:06:52,800 --> 00:06:53,919
all right

118
00:06:53,919 --> 00:06:55,039
cool

119
00:06:55,039 --> 00:06:57,199
can i control it yes i can

120
00:06:57,199 --> 00:06:58,560
alright

121
00:06:58,560 --> 00:07:01,120
hello everyone

122
00:07:01,120 --> 00:07:04,319
i'm tommy polly from apple and

123
00:07:04,319 --> 00:07:05,280
i am

124
00:07:05,280 --> 00:07:08,240
editing the connect ip document we have

125
00:07:08,240 --> 00:07:09,840
many authors

126
00:07:09,840 --> 00:07:11,360
uh so

127
00:07:11,360 --> 00:07:12,960
thank you to the authors

128
00:07:12,960 --> 00:07:14,840
if you recall from previous times this

129
00:07:14,840 --> 00:07:17,680
was a joint effort of bringing different

130
00:07:17,680 --> 00:07:19,520
proposals together

131
00:07:19,520 --> 00:07:20,720
into

132
00:07:20,720 --> 00:07:24,400
one unified connect ip

133
00:07:24,400 --> 00:07:27,199
earlier this week we did have a meeting

134
00:07:27,199 --> 00:07:28,880
of the authors to try to hammer out some

135
00:07:28,880 --> 00:07:30,960
of the issues and so the majority of

136
00:07:30,960 --> 00:07:32,880
this presentation will be trying to talk

137
00:07:32,880 --> 00:07:35,280
about the issues we think we have

138
00:07:35,280 --> 00:07:37,280
resolutions for all of them but we would

139
00:07:37,280 --> 00:07:39,280
like to get feedback from the room

140
00:07:39,280 --> 00:07:40,479
on that to see if there's anything we

141
00:07:40,479 --> 00:07:42,000
missed or things that we don't actually

142
00:07:42,000 --> 00:07:43,120
agree on

143
00:07:43,120 --> 00:07:45,360
and hopefully we can actually go and

144
00:07:45,360 --> 00:07:47,680
merge all the pull requests and

145
00:07:47,680 --> 00:07:50,319
make some progress so

146
00:07:50,319 --> 00:07:52,720
get excited everyone

147
00:07:52,720 --> 00:07:54,879
um but before that we do have some

148
00:07:54,879 --> 00:07:58,160
updates on testings and implementations

149
00:07:58,160 --> 00:07:59,520
uh so

150
00:07:59,520 --> 00:08:02,639
uh there was a connect ip table at the

151
00:08:02,639 --> 00:08:05,039
hackathon i myself was not there because

152
00:08:05,039 --> 00:08:07,520
i was on an airplane but i was dutifully

153
00:08:07,520 --> 00:08:10,479
hacking on connect ip on the airplane

154
00:08:10,479 --> 00:08:11,520
um so

155
00:08:11,520 --> 00:08:14,000
uh connect ip implementations were being

156
00:08:14,000 --> 00:08:15,039
made

157
00:08:15,039 --> 00:08:16,319
in several

158
00:08:16,319 --> 00:08:18,479
places on several different

159
00:08:18,479 --> 00:08:21,039
code bases i don't think we've done

160
00:08:21,039 --> 00:08:22,319
cross

161
00:08:22,319 --> 00:08:24,840
implementation interop yet

162
00:08:24,840 --> 00:08:27,360
but uh a lot of work was going on and

163
00:08:27,360 --> 00:08:29,520
we've learned things from trying to

164
00:08:29,520 --> 00:08:30,639
implement

165
00:08:30,639 --> 00:08:32,880
dave oh sorry i forgot to join the queue

166
00:08:32,880 --> 00:08:35,120
dude it's cozy just to add from the

167
00:08:35,120 --> 00:08:38,559
hackathon folks we were very darn close

168
00:08:38,559 --> 00:08:39,839
to

169
00:08:39,839 --> 00:08:42,159
but everyone was realizing the oh

170
00:08:42,159 --> 00:08:44,880
implementing the mask bit is easy

171
00:08:44,880 --> 00:08:46,480
implementing the

172
00:08:46,480 --> 00:08:48,640
please kernel take this packet and put

173
00:08:48,640 --> 00:08:50,720
it where it's supposed to go is way less

174
00:08:50,720 --> 00:08:51,680
easy

175
00:08:51,680 --> 00:08:53,519
so mask

176
00:08:53,519 --> 00:08:56,720
magnus did a good uh summary at the

177
00:08:56,720 --> 00:08:59,200
end of the hackathon and kind of what we

178
00:08:59,200 --> 00:09:01,839
said is we're gonna finish this and

179
00:09:01,839 --> 00:09:04,080
reach interop in the coming weeks

180
00:09:04,080 --> 00:09:05,200
and for

181
00:09:05,200 --> 00:09:07,440
the next hackathon in london we plan to

182
00:09:07,440 --> 00:09:09,440
arrive having figured out the silly

183
00:09:09,440 --> 00:09:11,760
tunnel interfaces so we can really focus

184
00:09:11,760 --> 00:09:14,320
on the protocol stuff thanks

185
00:09:14,320 --> 00:09:17,360
yup but uh good good progress was made

186
00:09:17,360 --> 00:09:19,279
all around so thanks to everyone who was

187
00:09:19,279 --> 00:09:21,120
contributing to that

188
00:09:21,120 --> 00:09:22,560
and we had lots of people who weren't

189
00:09:22,560 --> 00:09:24,160
authors on it so thank you to all of

190
00:09:24,160 --> 00:09:26,319
them

191
00:09:27,600 --> 00:09:29,120
all right so

192
00:09:29,120 --> 00:09:30,880
first just to summarize some of the

193
00:09:30,880 --> 00:09:33,760
recent changes um in the latest version

194
00:09:33,760 --> 00:09:36,240
of the published draft

195
00:09:36,240 --> 00:09:38,800
we had done work to try to improve text

196
00:09:38,800 --> 00:09:40,560
around how you

197
00:09:40,560 --> 00:09:42,880
handle the uri templates a lot of this

198
00:09:42,880 --> 00:09:45,120
is lifted from connect udp as connect

199
00:09:45,120 --> 00:09:47,200
udp finalized so we want to make sure we

200
00:09:47,200 --> 00:09:49,360
had parity there

201
00:09:49,360 --> 00:09:52,080
we had issues with how address assign

202
00:09:52,080 --> 00:09:54,160
worked uh when is that required or not

203
00:09:54,160 --> 00:09:56,240
and so we tried to clarify that

204
00:09:56,240 --> 00:09:58,800
we talked about the fact that icmp

205
00:09:58,800 --> 00:10:02,320
is a good way to communicate errors um

206
00:10:02,320 --> 00:10:05,040
and we also talked about how to

207
00:10:05,040 --> 00:10:08,000
uh make sure you had enough mtu for your

208
00:10:08,000 --> 00:10:09,600
ipv6 traffic

209
00:10:09,600 --> 00:10:12,000
so these are all good changes but as you

210
00:10:12,000 --> 00:10:14,560
will see a lot of the issues that we

211
00:10:14,560 --> 00:10:16,839
currently have open that we're trying to

212
00:10:16,839 --> 00:10:19,839
resolve our follow-ons to these so a lot

213
00:10:19,839 --> 00:10:21,760
of it's in the kind of the same space

214
00:10:21,760 --> 00:10:23,839
things that we realized were still

215
00:10:23,839 --> 00:10:25,839
left open

216
00:10:25,839 --> 00:10:28,800
alrighty to get into the actual issues

217
00:10:28,800 --> 00:10:30,720
um the numbers up here are the github

218
00:10:30,720 --> 00:10:31,760
issues

219
00:10:31,760 --> 00:10:34,480
i have kind of all the content here to

220
00:10:34,480 --> 00:10:36,160
talk about in slides but feel free to

221
00:10:36,160 --> 00:10:38,320
also look at the github issues and

222
00:10:38,320 --> 00:10:39,680
if we want to get really in-depth maybe

223
00:10:39,680 --> 00:10:42,560
we can switch over at some point

224
00:10:42,560 --> 00:10:44,880
right so the oldest issue we have

225
00:10:44,880 --> 00:10:46,560
is one just talking about you know do we

226
00:10:46,560 --> 00:10:49,760
need a default uri template

227
00:10:49,760 --> 00:10:52,320
kind of this was raised by the fact that

228
00:10:52,320 --> 00:10:56,720
connect udp has one it defined this

229
00:10:56,720 --> 00:10:59,120
well-known mask udp

230
00:10:59,120 --> 00:11:01,279
um and

231
00:11:01,279 --> 00:11:02,880
the structure of that seemed to imply

232
00:11:02,880 --> 00:11:05,519
that you could put other things under

233
00:11:05,519 --> 00:11:07,920
this well-known slash mask

234
00:11:07,920 --> 00:11:09,279
and so there's just kind of a question

235
00:11:09,279 --> 00:11:12,640
of do we need this for connect ip um i

236
00:11:12,640 --> 00:11:14,560
think there's you know good

237
00:11:14,560 --> 00:11:16,800
debate back and forth

238
00:11:16,800 --> 00:11:18,480
in our last discussion the authors kind

239
00:11:18,480 --> 00:11:20,320
of agreed that

240
00:11:20,320 --> 00:11:22,079
it actually probably does make sense

241
00:11:22,079 --> 00:11:23,600
because there are going to be cases

242
00:11:23,600 --> 00:11:26,320
where you may be referring to

243
00:11:26,320 --> 00:11:30,240
a generic relay proxy box just by name

244
00:11:30,240 --> 00:11:32,560
um and while it is you know very obvious

245
00:11:32,560 --> 00:11:34,959
that a browser that may only have a

246
00:11:34,959 --> 00:11:36,399
space for a name

247
00:11:36,399 --> 00:11:37,680
will definitely want to be able to do

248
00:11:37,680 --> 00:11:39,760
connect and connect udp

249
00:11:39,760 --> 00:11:41,519
there are use cases where it may need to

250
00:11:41,519 --> 00:11:43,519
do connect ip as well so there doesn't

251
00:11:43,519 --> 00:11:45,920
seem to be a reason to limit

252
00:11:45,920 --> 00:11:47,519
it from doing this

253
00:11:47,519 --> 00:11:48,800
and so we just essentially have the

254
00:11:48,800 --> 00:11:51,600
exact same text that connect udb has

255
00:11:51,600 --> 00:11:53,920
for connect ip to have

256
00:11:53,920 --> 00:11:55,600
the default

257
00:11:55,600 --> 00:11:58,240
uri template for that

258
00:11:58,240 --> 00:11:59,760
in this case the two

259
00:11:59,760 --> 00:12:01,760
parameters there are the target that you

260
00:12:01,760 --> 00:12:03,200
want to connect to

261
00:12:03,200 --> 00:12:06,000
as well as the ip protocol that you want

262
00:12:06,000 --> 00:12:07,600
and the default for both of these is

263
00:12:07,600 --> 00:12:08,639
just

264
00:12:08,639 --> 00:12:11,279
star and star for wild cards which is

265
00:12:11,279 --> 00:12:13,040
already something that is supported by

266
00:12:13,040 --> 00:12:15,839
the ui template

267
00:12:16,560 --> 00:12:19,519
thoughts here any objections to having

268
00:12:19,519 --> 00:12:21,360
this be defined

269
00:12:21,360 --> 00:12:24,079
of course no one has to use it you can

270
00:12:24,079 --> 00:12:25,279
it's probably better to use a more

271
00:12:25,279 --> 00:12:26,720
specific one if you have a mechanism for

272
00:12:26,720 --> 00:12:28,639
that but

273
00:12:28,639 --> 00:12:30,560
for the same reason that connect udp had

274
00:12:30,560 --> 00:12:33,040
the support for just the hostname

275
00:12:33,040 --> 00:12:37,560
it seemed fairly clear to be parallel

276
00:12:39,279 --> 00:12:40,800
martin thompson

277
00:12:40,800 --> 00:12:41,920
it's great you can see when people are

278
00:12:41,920 --> 00:12:43,200
going to get in queue before they

279
00:12:43,200 --> 00:12:44,480
actually get in queue because they pick

280
00:12:44,480 --> 00:12:47,760
up their phone and they tap a button

281
00:12:50,000 --> 00:12:51,360
they tell me

282
00:12:51,360 --> 00:12:53,040
using well known again

283
00:12:53,040 --> 00:12:54,320
yeah but this doesn't actually have to

284
00:12:54,320 --> 00:12:55,760
create a new well-known registration it

285
00:12:55,760 --> 00:12:57,360
just updates the one that connect udp

286
00:12:57,360 --> 00:12:58,959
made

287
00:12:58,959 --> 00:13:00,160
oh

288
00:13:00,160 --> 00:13:03,200
yeah let's talk about that as well

289
00:13:03,200 --> 00:13:04,839
sure i mean

290
00:13:04,839 --> 00:13:07,200
yeah that's the

291
00:13:07,200 --> 00:13:09,200
uh part of it um

292
00:13:09,200 --> 00:13:10,880
but it's just like if we already did

293
00:13:10,880 --> 00:13:13,760
this for connect udp

294
00:13:14,000 --> 00:13:16,320
so yeah i mean i think this

295
00:13:16,320 --> 00:13:18,880
this goes to the um

296
00:13:18,880 --> 00:13:20,160
the question of how you plan to

297
00:13:20,160 --> 00:13:24,800
configure these things yep um and

298
00:13:25,360 --> 00:13:27,360
because you need a a

299
00:13:27,360 --> 00:13:31,440
uri what is it pattern or

300
00:13:31,760 --> 00:13:34,720
template geez

301
00:13:37,760 --> 00:13:40,320
yeah um

302
00:13:40,320 --> 00:13:41,760
that provides a really useful way of

303
00:13:41,760 --> 00:13:43,440
distinguishing this

304
00:13:43,440 --> 00:13:45,920
from um the other things you might put

305
00:13:45,920 --> 00:13:48,639
in in configuration because you have

306
00:13:48,639 --> 00:13:51,040
domain names in some cases and

307
00:13:51,040 --> 00:13:53,199
what appears to be something like a uri

308
00:13:53,199 --> 00:13:56,160
in in those other cases yeah so

309
00:13:56,160 --> 00:13:58,320
i tend to think that

310
00:13:58,320 --> 00:14:00,079
essentially requiring people to use the

311
00:14:00,079 --> 00:14:03,199
full template configuration is

312
00:14:03,199 --> 00:14:05,519
a better choice

313
00:14:05,519 --> 00:14:08,320
and why i guess why is this different

314
00:14:08,320 --> 00:14:10,079
from connect udp then

315
00:14:10,079 --> 00:14:12,399
it's not

316
00:14:12,399 --> 00:14:14,880
which is so okay you just happen to be

317
00:14:14,880 --> 00:14:16,880
the first one to put it up on the slides

318
00:14:16,880 --> 00:14:19,199
i i think okay i mean i think we came to

319
00:14:19,199 --> 00:14:21,040
consensus on it for

320
00:14:21,040 --> 00:14:23,040
connect udp previously and that was

321
00:14:23,040 --> 00:14:24,800
discussed in the group okay so

322
00:14:24,800 --> 00:14:26,240
essentially it's like i don't see a good

323
00:14:26,240 --> 00:14:27,600
reason for this to

324
00:14:27,600 --> 00:14:29,279
go out of its way to not use the

325
00:14:29,279 --> 00:14:30,800
well-known that connect udp already

326
00:14:30,800 --> 00:14:32,880
established i i guess if if if we're

327
00:14:32,880 --> 00:14:35,279
going with precedent then fine

328
00:14:35,279 --> 00:14:37,920
yeah and like i agree that using a

329
00:14:37,920 --> 00:14:39,920
template like if you know if we use if

330
00:14:39,920 --> 00:14:41,120
we have something like what ben has for

331
00:14:41,120 --> 00:14:44,160
his directory like great use that but if

332
00:14:44,160 --> 00:14:46,480
you don't have that i don't

333
00:14:46,480 --> 00:14:49,600
see a harm in this

334
00:14:49,600 --> 00:14:52,399
davidskenazi i'm not really a well-known

335
00:14:52,399 --> 00:14:54,959
enthusiast

336
00:14:55,360 --> 00:14:58,880
but you're a well-known mask enthusiast

337
00:14:58,880 --> 00:15:00,320
nice

338
00:15:00,320 --> 00:15:01,040
so

339
00:15:01,040 --> 00:15:03,680
i'm realizing that the chairs forgot a

340
00:15:03,680 --> 00:15:05,839
slight update

341
00:15:05,839 --> 00:15:08,639
which is since the last ietf http

342
00:15:08,639 --> 00:15:11,040
datagrams and connectudp

343
00:15:11,040 --> 00:15:14,399
were went through itf last call were

344
00:15:14,399 --> 00:15:16,560
approved by the iesg

345
00:15:16,560 --> 00:15:19,199
and are now in the rfc editor's queue

346
00:15:19,199 --> 00:15:21,519
which means that those documents are

347
00:15:21,519 --> 00:15:23,600
pretty much done it also means that we

348
00:15:23,600 --> 00:15:25,760
can't change them which is great but i

349
00:15:25,760 --> 00:15:29,040
mean all 48.

350
00:15:30,639 --> 00:15:32,560
so anyway that's really great but that

351
00:15:32,560 --> 00:15:33,920
was the first deliverable of the working

352
00:15:33,920 --> 00:15:35,519
group which is great we all did that

353
00:15:35,519 --> 00:15:36,880
together hooray

354
00:15:36,880 --> 00:15:38,720
um but yes the

355
00:15:38,720 --> 00:15:41,720
two

356
00:15:42,880 --> 00:15:44,639
that will cost you

357
00:15:44,639 --> 00:15:47,120
exactly so we better agree on this

358
00:15:47,120 --> 00:15:49,120
so anyway yeah the argument that

359
00:15:49,120 --> 00:15:52,160
convinced me uh as well was that it's

360
00:15:52,160 --> 00:15:55,600
consistent so yep chip it

361
00:15:55,600 --> 00:15:57,040
but thank you david for that note that

362
00:15:57,040 --> 00:15:59,680
is a very good point we have two of our

363
00:15:59,680 --> 00:16:01,279
three main documents have now progressed

364
00:16:01,279 --> 00:16:04,000
and that is wonderful

365
00:16:05,519 --> 00:16:08,880
hey ben schwartz so uh i i sort of

366
00:16:08,880 --> 00:16:11,279
reluctantly agreed to the inclusion of

367
00:16:11,279 --> 00:16:14,399
this template in connect udp uh

368
00:16:14,399 --> 00:16:17,120
and uh and so i can i can reluctantly

369
00:16:17,120 --> 00:16:19,199
agree to the similar inclusion here

370
00:16:19,199 --> 00:16:21,360
exactly that's exactly the same book if

371
00:16:21,360 --> 00:16:24,399
necessary uh but i do think it's like i

372
00:16:24,399 --> 00:16:26,000
don't think it was a very good idea

373
00:16:26,000 --> 00:16:27,759
there i think it's a little bit worse

374
00:16:27,759 --> 00:16:28,959
idea here

375
00:16:28,959 --> 00:16:32,959
um in particular connect udp uh

376
00:16:32,959 --> 00:16:35,440
when in the the connect udp draft the

377
00:16:35,440 --> 00:16:37,600
one that that's in off uh

378
00:16:37,600 --> 00:16:39,680
that's in the editor's view

379
00:16:39,680 --> 00:16:40,399
uh

380
00:16:40,399 --> 00:16:42,160
always has a target

381
00:16:42,160 --> 00:16:44,800
um this draft in my understanding does

382
00:16:44,800 --> 00:16:45,600
not

383
00:16:45,600 --> 00:16:47,519
connect ip does not necessarily have a

384
00:16:47,519 --> 00:16:50,240
target now connect udp also has recently

385
00:16:50,240 --> 00:16:53,120
uh well is is uh hopefully about to gain

386
00:16:53,120 --> 00:16:55,920
support for for non-target

387
00:16:55,920 --> 00:16:58,320
requests as well so there that will be

388
00:16:58,320 --> 00:17:00,639
somewhat parallel listener style for

389
00:17:00,639 --> 00:17:02,880
listeners yeah yes um yeah because we

390
00:17:02,880 --> 00:17:05,919
need webrtc but but uh this this has

391
00:17:05,919 --> 00:17:07,919
some weird effects here like the draft

392
00:17:07,919 --> 00:17:10,160
currently says the target isn't the

393
00:17:10,160 --> 00:17:12,720
target parameter may be specified yeah

394
00:17:12,720 --> 00:17:15,280
uh in when when populating the template

395
00:17:15,280 --> 00:17:17,280
but that actually has to be changed so

396
00:17:17,280 --> 00:17:18,959
this means

397
00:17:18,959 --> 00:17:21,119
in the pr it essentially says this

398
00:17:21,119 --> 00:17:23,760
default one always has it but the

399
00:17:23,760 --> 00:17:26,559
existing text on the

400
00:17:26,559 --> 00:17:28,400
on the template and the parameters says

401
00:17:28,400 --> 00:17:29,600
that

402
00:17:29,600 --> 00:17:32,720
uh star is equivalent to empty i i

403
00:17:32,720 --> 00:17:34,320
understand that i'm just saying you're

404
00:17:34,320 --> 00:17:35,919
no longer actually following the uri

405
00:17:35,919 --> 00:17:38,799
template engine rules because the ui

406
00:17:38,799 --> 00:17:40,240
template engine rules say that the

407
00:17:40,240 --> 00:17:43,919
target variable can be unspecified in

408
00:17:43,919 --> 00:17:44,720
the

409
00:17:44,720 --> 00:17:46,559
inputs to your template in which case

410
00:17:46,559 --> 00:17:48,640
the rendering engine will do something

411
00:17:48,640 --> 00:17:50,240
and in this case what it will do is give

412
00:17:50,240 --> 00:17:52,559
you a pair of slashes back to back right

413
00:17:52,559 --> 00:17:54,000
but but so

414
00:17:54,000 --> 00:17:56,720
it will not like the update to the text

415
00:17:56,720 --> 00:17:59,039
right is that

416
00:17:59,039 --> 00:18:01,919
in general regardless of actually the

417
00:18:01,919 --> 00:18:04,400
well-known or not

418
00:18:04,400 --> 00:18:07,200
if your uri template puts these

419
00:18:07,200 --> 00:18:09,280
parameters within

420
00:18:09,280 --> 00:18:11,120
the path segment and not the query

421
00:18:11,120 --> 00:18:12,559
segment of parameters because there are

422
00:18:12,559 --> 00:18:14,160
the two flavors you can do there right

423
00:18:14,160 --> 00:18:15,600
that are allowed for this

424
00:18:15,600 --> 00:18:17,120
if they're in the path one then you must

425
00:18:17,120 --> 00:18:18,640
not have it be empty you must have it be

426
00:18:18,640 --> 00:18:19,600
a star

427
00:18:19,600 --> 00:18:22,480
so that's even worse um because that

428
00:18:22,480 --> 00:18:24,640
means that now i have to introspect

429
00:18:24,640 --> 00:18:27,520
inside this like as a client i get a uri

430
00:18:27,520 --> 00:18:29,600
template back and i have my variables

431
00:18:29,600 --> 00:18:31,520
that i want to substitute into it i

432
00:18:31,520 --> 00:18:33,520
can't just take my uri template and my

433
00:18:33,520 --> 00:18:34,880
variables and hand them to a uri

434
00:18:34,880 --> 00:18:36,640
template engine i actually have to go

435
00:18:36,640 --> 00:18:38,480
disassemble the template and figure out

436
00:18:38,480 --> 00:18:39,360
which

437
00:18:39,360 --> 00:18:41,280
which template structure is being used

438
00:18:41,280 --> 00:18:42,720
here in order to figure out whether i

439
00:18:42,720 --> 00:18:45,280
need to i think that's kind of a problem

440
00:18:45,280 --> 00:18:46,960
placement so that's a problem if we

441
00:18:46,960 --> 00:18:49,280
allow them being in the path at all

442
00:18:49,280 --> 00:18:52,400
uh regardless of wellness

443
00:18:52,400 --> 00:18:54,400
it's it's uh

444
00:18:54,400 --> 00:18:56,400
it's not it's not a problem even in this

445
00:18:56,400 --> 00:18:58,480
case and you know you can have empty

446
00:18:58,480 --> 00:19:00,799
path segments in each other

447
00:19:00,799 --> 00:19:02,320
you would just have slash slash i'm just

448
00:19:02,320 --> 00:19:03,760
telling you this

449
00:19:03,760 --> 00:19:07,440
it's ugly and that it creates weirdness

450
00:19:07,440 --> 00:19:09,440
uh if you have this now ambiguity of

451
00:19:09,440 --> 00:19:11,840
like sometimes it's star or sometimes

452
00:19:11,840 --> 00:19:13,280
it's empty string

453
00:19:13,280 --> 00:19:14,400
you could also just make it always be

454
00:19:14,400 --> 00:19:16,080
star and just allow empty strings and in

455
00:19:16,080 --> 00:19:17,200
which case you're saying the target

456
00:19:17,200 --> 00:19:19,760
parameter is always there and like yes

457
00:19:19,760 --> 00:19:21,280
that's fine i think that's a perfectly

458
00:19:21,280 --> 00:19:23,120
fine resolution and the other thing is

459
00:19:23,120 --> 00:19:26,880
um iproto is that is that um sorry what

460
00:19:26,880 --> 00:19:30,000
is it that's the ip protocol number

461
00:19:30,000 --> 00:19:30,799
uh

462
00:19:30,799 --> 00:19:31,840
okay

463
00:19:31,840 --> 00:19:34,080
which can be anything or you can say no

464
00:19:34,080 --> 00:19:36,799
i only want to open up for this okay i

465
00:19:36,799 --> 00:19:39,200
want icmp only

466
00:19:39,200 --> 00:19:41,600
okay yeah uh

467
00:19:41,600 --> 00:19:44,880
yeah in that case uh i mean

468
00:19:44,880 --> 00:19:46,960
well anyway we have there's some there's

469
00:19:46,960 --> 00:19:48,720
some fiddliness that that needs to be

470
00:19:48,720 --> 00:19:49,840
sorted out there

471
00:19:49,840 --> 00:19:52,159
okay

472
00:19:53,679 --> 00:19:56,240
yeah so if you put the slash inside the

473
00:19:56,240 --> 00:19:59,600
curly braces things go get interesting

474
00:19:59,600 --> 00:20:02,240
um and may solve the problem here uh

475
00:20:02,240 --> 00:20:05,280
provided that your target and protocol

476
00:20:05,280 --> 00:20:07,840
um

477
00:20:08,080 --> 00:20:10,080
provided that you don't have

478
00:20:10,080 --> 00:20:11,840
a protocol

479
00:20:11,840 --> 00:20:12,880
if

480
00:20:12,880 --> 00:20:15,039
you don't have a target

481
00:20:15,039 --> 00:20:16,000
so

482
00:20:16,000 --> 00:20:17,679
if you get the order right

483
00:20:17,679 --> 00:20:19,360
uh but what if you said i want to open

484
00:20:19,360 --> 00:20:21,440
up everything that does

485
00:20:21,440 --> 00:20:23,840
esp because i want to run ipsec over

486
00:20:23,840 --> 00:20:25,280
this but i don't i want to send it to

487
00:20:25,280 --> 00:20:26,559
everywhere but i only care about this

488
00:20:26,559 --> 00:20:28,400
person so so

489
00:20:28,400 --> 00:20:30,720
you are saying that you could have

490
00:20:30,720 --> 00:20:32,559
one or both

491
00:20:32,559 --> 00:20:34,720
with

492
00:20:34,720 --> 00:20:35,919
yes

493
00:20:35,919 --> 00:20:38,240
yeah that doesn't work then

494
00:20:38,240 --> 00:20:40,720
so um it turns out if you if you read

495
00:20:40,720 --> 00:20:42,240
rfc what's it got what's the number

496
00:20:42,240 --> 00:20:45,520
again 6570 the uri template one yeah

497
00:20:45,520 --> 00:20:46,720
there's a bunch of ways you can spin

498
00:20:46,720 --> 00:20:49,720
this

499
00:20:50,320 --> 00:20:51,520
and perhaps that should have been the

500
00:20:51,520 --> 00:20:53,679
case for the other one anyway um but

501
00:20:53,679 --> 00:20:55,360
essentially what you do is you put the

502
00:20:55,360 --> 00:20:58,320
slash inside the the um

503
00:20:58,320 --> 00:21:00,080
the curly braces and so you do target

504
00:21:00,080 --> 00:21:01,120
slash

505
00:21:01,120 --> 00:21:02,880
it will make the path component optional

506
00:21:02,880 --> 00:21:04,240
at that point i see so you don't need

507
00:21:04,240 --> 00:21:06,000
double slashes so you wouldn't end up

508
00:21:06,000 --> 00:21:07,760
with double slashes or stars or any

509
00:21:07,760 --> 00:21:09,760
other sort of weird probably in

510
00:21:09,760 --> 00:21:12,000
there you just if you have a target then

511
00:21:12,000 --> 00:21:13,600
then that component is added if you have

512
00:21:13,600 --> 00:21:16,080
a a protocol then that's added the only

513
00:21:16,080 --> 00:21:18,159
problem there is that you need

514
00:21:18,159 --> 00:21:19,520
in the case where both of them are

515
00:21:19,520 --> 00:21:20,559
optional

516
00:21:20,559 --> 00:21:22,159
then you have to have some way of

517
00:21:22,159 --> 00:21:23,520
distinguishing between the two of them

518
00:21:23,520 --> 00:21:24,960
which is kind of awkward

519
00:21:24,960 --> 00:21:26,640
we can also just go the it's always

520
00:21:26,640 --> 00:21:28,799
there and you just put a star when you

521
00:21:28,799 --> 00:21:30,880
want it to be open-ended yeah

522
00:21:30,880 --> 00:21:32,000
okay

523
00:21:32,000 --> 00:21:33,679
to make it very explicit that like hey

524
00:21:33,679 --> 00:21:35,440
i'm trying to open up a full tunnel vpn

525
00:21:35,440 --> 00:21:37,200
here i'll need to have a look at the uri

526
00:21:37,200 --> 00:21:39,039
grammar before i can say that i'm

527
00:21:39,039 --> 00:21:42,080
comfortable with that sure that's fine

528
00:21:42,080 --> 00:21:45,039
uh david's ganazzi like i i did a bunch

529
00:21:45,039 --> 00:21:47,039
of reading and please correct me if i

530
00:21:47,039 --> 00:21:50,320
misread to figure out if like slash

531
00:21:50,320 --> 00:21:52,880
slash was allowed or a star was allowed

532
00:21:52,880 --> 00:21:55,679
and what it came down to is slash inside

533
00:21:55,679 --> 00:21:57,360
the path is allowed but there's a bunch

534
00:21:57,360 --> 00:21:59,280
of software that normalizes it and then

535
00:21:59,280 --> 00:22:00,640
it's going to remove one slash and then

536
00:22:00,640 --> 00:22:02,480
you're going to have a sad day so we

537
00:22:02,480 --> 00:22:06,240
should avoid slash and star seemed fine

538
00:22:06,240 --> 00:22:07,280
um

539
00:22:07,280 --> 00:22:10,000
what the reason i'm okay with the text

540
00:22:10,000 --> 00:22:11,520
as it currently is

541
00:22:11,520 --> 00:22:13,840
because ben has a valid concern that you

542
00:22:13,840 --> 00:22:15,360
don't want

543
00:22:15,360 --> 00:22:17,440
the implementation of this that's using

544
00:22:17,440 --> 00:22:19,760
a generic uri template library to have

545
00:22:19,760 --> 00:22:21,919
to figure out if they're in the path or

546
00:22:21,919 --> 00:22:22,720
not

547
00:22:22,720 --> 00:22:24,880
but in that case you just always put a

548
00:22:24,880 --> 00:22:26,559
star like you're going to have this

549
00:22:26,559 --> 00:22:28,640
variable or you know it hasn't or it

550
00:22:28,640 --> 00:22:29,760
knows that it's a target that it's going

551
00:22:29,760 --> 00:22:32,080
to like it knows what to fill in

552
00:22:32,080 --> 00:22:34,000
exactly so

553
00:22:34,000 --> 00:22:34,799
i

554
00:22:34,799 --> 00:22:36,799
you know at the end of the day yeah it's

555
00:22:36,799 --> 00:22:38,400
kind of fugly

556
00:22:38,400 --> 00:22:39,760
but at least it's consistent with

557
00:22:39,760 --> 00:22:42,080
connect gdp whatever

558
00:22:42,080 --> 00:22:43,840
how about so what i would propose here

559
00:22:43,840 --> 00:22:45,200
is this like i think

560
00:22:45,200 --> 00:22:47,600
this particular issue

561
00:22:47,600 --> 00:22:49,679
we have agreed

562
00:22:49,679 --> 00:22:52,400
like you know

563
00:22:52,480 --> 00:22:55,440
we don't love the well-known but like

564
00:22:55,440 --> 00:22:57,120
it's consistent so like we kind of we

565
00:22:57,120 --> 00:22:59,120
came to agreement on that this other

566
00:22:59,120 --> 00:23:00,880
issue that ben brought up i think is a

567
00:23:00,880 --> 00:23:02,159
separate

568
00:23:02,159 --> 00:23:04,559
a separate issue of like having the

569
00:23:04,559 --> 00:23:06,080
stuff in the path component and being

570
00:23:06,080 --> 00:23:07,840
ambiguous about can it be empty can it

571
00:23:07,840 --> 00:23:09,840
be a star or like having it be different

572
00:23:09,840 --> 00:23:11,520
between where it is and that like

573
00:23:11,520 --> 00:23:13,200
that's the grossness so could we open up

574
00:23:13,200 --> 00:23:14,720
a new issue

575
00:23:14,720 --> 00:23:17,120
to essentially just determine if do you

576
00:23:17,120 --> 00:23:19,440
like do we really allow empty

577
00:23:19,440 --> 00:23:21,280
and that variability between empty and

578
00:23:21,280 --> 00:23:23,840
star

579
00:23:24,080 --> 00:23:27,520
well the the reason to allow mt is that

580
00:23:27,520 --> 00:23:29,919
if you're using a level three uri

581
00:23:29,919 --> 00:23:31,840
template and this is why everyone should

582
00:23:31,840 --> 00:23:34,320
be going wide-eyed and i hate uri

583
00:23:34,320 --> 00:23:36,400
templates but we've decided that that's

584
00:23:36,400 --> 00:23:38,000
what we wanted to use

585
00:23:38,000 --> 00:23:41,200
is so the level three because these are

586
00:23:41,200 --> 00:23:44,320
like pokemon for some reason

587
00:23:44,320 --> 00:23:45,840
is that

588
00:23:45,840 --> 00:23:50,159
you can specify uh question mark target

589
00:23:50,159 --> 00:23:52,640
and it'll say if it's empty won't do

590
00:23:52,640 --> 00:23:54,159
anything and if it's there it'll do

591
00:23:54,159 --> 00:23:56,720
question mark target equals what you put

592
00:23:56,720 --> 00:23:57,600
in

593
00:23:57,600 --> 00:24:00,640
and so that ability to save those bytes

594
00:24:00,640 --> 00:24:02,799
is kind of neat like at the end of the

595
00:24:02,799 --> 00:24:03,600
day

596
00:24:03,600 --> 00:24:06,240
whatever four star who cares uh

597
00:24:06,240 --> 00:24:08,080
whatever simplest implementation or

598
00:24:08,080 --> 00:24:11,520
maybe yeah we decide that like

599
00:24:11,760 --> 00:24:13,279
like the other way you do is like if you

600
00:24:13,279 --> 00:24:15,279
recognize like it's always technically

601
00:24:15,279 --> 00:24:17,440
star but like if you recognize in the

602
00:24:17,440 --> 00:24:19,520
query string that you're about to put

603
00:24:19,520 --> 00:24:21,279
something equal star you can just drop

604
00:24:21,279 --> 00:24:22,240
it on the floor if you don't want to

605
00:24:22,240 --> 00:24:23,600
spend the bytes on it

606
00:24:23,600 --> 00:24:25,760
actually which is it's the same thing

607
00:24:25,760 --> 00:24:28,240
what the current pr does that's why i

608
00:24:28,240 --> 00:24:30,799
like it it's it's simple yeah this is

609
00:24:30,799 --> 00:24:32,480
this is gross this is not the grossest

610
00:24:32,480 --> 00:24:33,919
thing we've done it's not the grossest

611
00:24:33,919 --> 00:24:36,640
thing we will do

612
00:24:37,919 --> 00:24:40,480
oh man i can hear you

613
00:24:40,480 --> 00:24:42,960
okay sounds good um so i think it

614
00:24:42,960 --> 00:24:45,600
warrants a bit more discussion just to

615
00:24:45,600 --> 00:24:47,120
make sure we're happy with that but this

616
00:24:47,120 --> 00:24:49,919
particular issue seems okay

617
00:24:49,919 --> 00:24:51,760
next one

618
00:24:51,760 --> 00:24:52,720
um

619
00:24:52,720 --> 00:24:55,360
so we had a couple different issues

620
00:24:55,360 --> 00:24:56,640
around some of the new texts i was

621
00:24:56,640 --> 00:24:57,840
talking about

622
00:24:57,840 --> 00:25:01,440
ensuring we had enough mtu

623
00:25:01,440 --> 00:25:03,679
previously the text

624
00:25:03,679 --> 00:25:05,600
provided three different options i

625
00:25:05,600 --> 00:25:07,039
believe for

626
00:25:07,039 --> 00:25:08,720
how you validate you have enough mtu to

627
00:25:08,720 --> 00:25:10,960
get things like minimum ipv6 packets

628
00:25:10,960 --> 00:25:12,240
through

629
00:25:12,240 --> 00:25:14,720
like one way was

630
00:25:14,720 --> 00:25:15,679
you

631
00:25:15,679 --> 00:25:17,440
know you have a direct connection from

632
00:25:17,440 --> 00:25:19,440
the client to the proxy

633
00:25:19,440 --> 00:25:21,520
there's nothing else in between you you

634
00:25:21,520 --> 00:25:24,080
know you padded your initial quick to a

635
00:25:24,080 --> 00:25:25,760
large enough size you know you have room

636
00:25:25,760 --> 00:25:27,520
in the datagrams and then you don't need

637
00:25:27,520 --> 00:25:28,640
to do anything else to make sure you

638
00:25:28,640 --> 00:25:31,200
have a minimum mtu

639
00:25:31,200 --> 00:25:32,400
i think there's a middle one that was

640
00:25:32,400 --> 00:25:34,240
trying to say like

641
00:25:34,240 --> 00:25:36,240
oh you may have intermediaries and if

642
00:25:36,240 --> 00:25:37,679
you coordinate sufficiently with your

643
00:25:37,679 --> 00:25:39,039
intermediaries to make sure you have

644
00:25:39,039 --> 00:25:40,400
enough mtu

645
00:25:40,400 --> 00:25:42,640
then this could also work and then the

646
00:25:42,640 --> 00:25:45,600
failsafe was if you can't guarantee that

647
00:25:45,600 --> 00:25:46,400
you

648
00:25:46,400 --> 00:25:48,320
don't have intermediaries and that they

649
00:25:48,320 --> 00:25:50,400
have enough room for your minimum size

650
00:25:50,400 --> 00:25:51,679
packets

651
00:25:51,679 --> 00:25:53,600
you should do some icmp through this to

652
00:25:53,600 --> 00:25:54,840
make sure that you

653
00:25:54,840 --> 00:25:58,880
have sufficient path mtu um

654
00:25:58,880 --> 00:26:01,120
intermediaries are messy and gross and

655
00:26:01,120 --> 00:26:03,039
so as we were talking we were like uh

656
00:26:03,039 --> 00:26:04,640
let's try to just like maybe let's just

657
00:26:04,640 --> 00:26:07,039
ditch the text that says oh maybe you

658
00:26:07,039 --> 00:26:08,320
could coordinate with your intermediary

659
00:26:08,320 --> 00:26:10,559
so we just say either you guarantee

660
00:26:10,559 --> 00:26:12,640
from end to end that you have

661
00:26:12,640 --> 00:26:14,400
a big enough quick connection to hold

662
00:26:14,400 --> 00:26:16,480
your minimum size

663
00:26:16,480 --> 00:26:17,840
or you do

664
00:26:17,840 --> 00:26:21,679
pathetic discovery through the tunnel

665
00:26:21,679 --> 00:26:22,720
and

666
00:26:22,720 --> 00:26:25,840
that's it

667
00:26:26,720 --> 00:26:28,960
for this ben is going to get in the

668
00:26:28,960 --> 00:26:31,840
queue once you can press the button

669
00:26:31,840 --> 00:26:34,080
oh

670
00:26:34,240 --> 00:26:37,200
corey hello

671
00:26:37,279 --> 00:26:39,840
oh yeah um

672
00:26:39,840 --> 00:26:41,919
i wondered if

673
00:26:41,919 --> 00:26:44,000
we need to be a little bit careful with

674
00:26:44,000 --> 00:26:47,279
a since we're tunneling other things

675
00:26:47,279 --> 00:26:48,080
um

676
00:26:48,080 --> 00:26:49,360
because the

677
00:26:49,360 --> 00:26:51,600
properties could change

678
00:26:51,600 --> 00:26:54,000
and while that's okay and one for quick

679
00:26:54,000 --> 00:26:56,880
it's not known for the protocols

680
00:26:56,880 --> 00:26:58,720
do we need to word around that in some

681
00:26:58,720 --> 00:27:00,960
way

682
00:27:05,600 --> 00:27:07,279
sorry

683
00:27:07,279 --> 00:27:09,520
okay

684
00:27:10,799 --> 00:27:13,200
can you just repeat it if you understood

685
00:27:13,200 --> 00:27:15,039
and you have response i'd like to get to

686
00:27:15,039 --> 00:27:17,360
to answer gory's question david snazzy

687
00:27:17,360 --> 00:27:18,799
here um

688
00:27:18,799 --> 00:27:21,760
it's let's say you have an end to end

689
00:27:21,760 --> 00:27:23,679
quick connection

690
00:27:23,679 --> 00:27:25,279
and you

691
00:27:25,279 --> 00:27:28,559
start with adding quick initials to

692
00:27:28,559 --> 00:27:29,840
uh

693
00:27:29,840 --> 00:27:32,880
13 whatever the number is in there um

694
00:27:32,880 --> 00:27:34,799
you'll be fine

695
00:27:34,799 --> 00:27:35,760
but

696
00:27:35,760 --> 00:27:36,960
if you

697
00:27:36,960 --> 00:27:38,880
implement uh

698
00:27:38,880 --> 00:27:41,840
dynamic pmtud inside quick

699
00:27:41,840 --> 00:27:45,039
and your quick mtu goes down

700
00:27:45,039 --> 00:27:46,960
to something below that

701
00:27:46,960 --> 00:27:48,559
then you need to nuke the connect ip

702
00:27:48,559 --> 00:27:50,000
stream maybe we just need to add a

703
00:27:50,000 --> 00:27:51,760
sentence for that because our

704
00:27:51,760 --> 00:27:54,000
implementation doesn't do

705
00:27:54,000 --> 00:27:55,760
dynamic pmtud

706
00:27:55,760 --> 00:27:58,000
so we don't have this problem but if you

707
00:27:58,000 --> 00:27:59,440
if you do i'm just adding a sentence

708
00:27:59,440 --> 00:28:01,360
saying if you detect that your mtu goes

709
00:28:01,360 --> 00:28:04,000
lower like we actually don't think we

710
00:28:04,000 --> 00:28:05,360
did say anything because we already have

711
00:28:05,360 --> 00:28:07,039
text that says if you detect that the m2

712
00:28:07,039 --> 00:28:08,320
is not sufficient you have to nuke the

713
00:28:08,320 --> 00:28:10,880
tunnel so if you're not doing dynamic

714
00:28:10,880 --> 00:28:13,200
pm2d

715
00:28:13,200 --> 00:28:14,799
that means you start out with your

716
00:28:14,799 --> 00:28:17,120
initial size but that's not a guarantee

717
00:28:17,120 --> 00:28:19,039
that subsequent packets

718
00:28:19,039 --> 00:28:21,520
that you're sending

719
00:28:21,520 --> 00:28:22,960
make sure you maintain that size so like

720
00:28:22,960 --> 00:28:25,360
if the path m2 changes

721
00:28:25,360 --> 00:28:26,880
on you and you just don't notice it is

722
00:28:26,880 --> 00:28:28,559
possible that it goes

723
00:28:28,559 --> 00:28:29,520
then

724
00:28:29,520 --> 00:28:31,760
your quick connection is going to be

725
00:28:31,760 --> 00:28:33,039
right and then you'll send the packets

726
00:28:33,039 --> 00:28:34,640
and they'll just get lost and you'll

727
00:28:34,640 --> 00:28:36,799
realize that you're losing packets and

728
00:28:36,799 --> 00:28:39,279
yeah things go so i think maybe the

729
00:28:39,279 --> 00:28:41,120
assumption in quick

730
00:28:41,120 --> 00:28:43,200
is that that's all okay but if we're

731
00:28:43,200 --> 00:28:45,840
tunneling other things over quick

732
00:28:45,840 --> 00:28:47,360
then

733
00:28:47,360 --> 00:28:49,279
maybe that's a bit surprising that

734
00:28:49,279 --> 00:28:50,960
suddenly everything just

735
00:28:50,960 --> 00:28:53,039
disappears um

736
00:28:53,039 --> 00:28:55,200
i'm sure you work out what to say

737
00:28:55,200 --> 00:28:57,760
yeah yeah and just to add i think you're

738
00:28:57,760 --> 00:28:58,399
right

739
00:28:58,399 --> 00:29:00,240
but at the same time that's also true of

740
00:29:00,240 --> 00:29:01,520
ethernet

741
00:29:01,520 --> 00:29:04,159
and like if if that happens at some

742
00:29:04,159 --> 00:29:05,760
point you know like

743
00:29:05,760 --> 00:29:07,440
i think it may be worth adding a

744
00:29:07,440 --> 00:29:09,200
sentence so if we can take a note in the

745
00:29:09,200 --> 00:29:11,760
pr just to say like

746
00:29:11,760 --> 00:29:13,200
not even necessarily normative text but

747
00:29:13,200 --> 00:29:15,760
just like note that if your quick

748
00:29:15,760 --> 00:29:18,080
connection itself and like if that link

749
00:29:18,080 --> 00:29:20,000
loses its mtu

750
00:29:20,000 --> 00:29:20,960
uh

751
00:29:20,960 --> 00:29:22,720
stuff can go wrong and you probably want

752
00:29:22,720 --> 00:29:25,200
to just kill that stream

753
00:29:25,200 --> 00:29:27,840
if that happens

754
00:29:28,320 --> 00:29:30,640
so okay yeah that shorts so so okay you

755
00:29:30,640 --> 00:29:33,200
must do pmtod over the tunnel and if

756
00:29:33,200 --> 00:29:37,200
pmtud says less than 1280 or whatever

757
00:29:37,200 --> 00:29:39,600
then you can't do v6

758
00:29:39,600 --> 00:29:41,279
what yeah okay so that's and that's

759
00:29:41,279 --> 00:29:43,039
actually i think miriam's question is

760
00:29:43,039 --> 00:29:44,159
what do you do

761
00:29:44,159 --> 00:29:46,159
right

762
00:29:46,159 --> 00:29:47,520
i mean is that

763
00:29:47,520 --> 00:29:49,600
it i haven't seen maybe the very latest

764
00:29:49,600 --> 00:29:52,399
text does it is very clear like go away

765
00:29:52,399 --> 00:29:53,120
so

766
00:29:53,120 --> 00:29:54,880
so that is one of i think that's issue

767
00:29:54,880 --> 00:29:56,960
62 and i think mary mentioned that that

768
00:29:56,960 --> 00:29:58,240
may not be clear enough in this latest

769
00:29:58,240 --> 00:30:00,000
pr so we may want to update that i

770
00:30:00,000 --> 00:30:01,360
didn't i didn't need an equivalent i

771
00:30:01,360 --> 00:30:02,640
didn't see it at all in the pr i think

772
00:30:02,640 --> 00:30:04,399
we made it like we discussed it and it's

773
00:30:04,399 --> 00:30:06,080
not in the text yeah the issue says we

774
00:30:06,080 --> 00:30:08,000
should say that you must close the

775
00:30:08,000 --> 00:30:09,679
stream and we were not clear when that

776
00:30:09,679 --> 00:30:11,679
was added the

777
00:30:11,679 --> 00:30:13,279
i mean maybe i need to pull it up but

778
00:30:13,279 --> 00:30:15,840
i'm 99 sure that in the pr it says if

779
00:30:15,840 --> 00:30:17,840
you detect that it's not sufficient you

780
00:30:17,840 --> 00:30:20,080
must abort the stream

781
00:30:20,080 --> 00:30:21,600
it i don't i didn't see it when i looked

782
00:30:21,600 --> 00:30:23,279
just now okay maybe i'm just getting

783
00:30:23,279 --> 00:30:26,240
that sentence maybe i'm just crazy

784
00:30:26,240 --> 00:30:27,919
but okay but let's just let's just add

785
00:30:27,919 --> 00:30:29,200
it then i think everyone's okay with

786
00:30:29,200 --> 00:30:31,600
adding it

787
00:30:32,000 --> 00:30:34,480
um so the whole text says like because

788
00:30:34,480 --> 00:30:35,760
we're setting sending everything about

789
00:30:35,760 --> 00:30:37,279
datagrams that's the only option but

790
00:30:37,279 --> 00:30:38,640
like the other option is to send it over

791
00:30:38,640 --> 00:30:40,559
streams

792
00:30:40,559 --> 00:30:42,159
uh

793
00:30:42,159 --> 00:30:43,919
i i i

794
00:30:43,919 --> 00:30:45,200
i think we

795
00:30:45,200 --> 00:30:46,640
when we talked before we don't

796
00:30:46,640 --> 00:30:47,919
necessarily want to go in that direction

797
00:30:47,919 --> 00:30:48,880
like

798
00:30:48,880 --> 00:30:50,799
you could have like

799
00:30:50,799 --> 00:30:52,480
some way to negotiate like i would like

800
00:30:52,480 --> 00:30:54,080
these to fail over to become reliable

801
00:30:54,080 --> 00:30:56,320
but i don't think that's the

802
00:30:56,320 --> 00:30:58,559
base behavior yeah that's fine i just

803
00:30:58,559 --> 00:31:00,480
don't think i want a must there or like

804
00:31:00,480 --> 00:31:01,919
if the mass should be bound to like

805
00:31:01,919 --> 00:31:03,679
using datagrams or whatever i don't know

806
00:31:03,679 --> 00:31:05,519
like if you if you really want to use if

807
00:31:05,519 --> 00:31:06,960
you want to do this right if you want to

808
00:31:06,960 --> 00:31:08,399
detect this and then fade over to

809
00:31:08,399 --> 00:31:11,600
streams you should be able to do it

810
00:31:13,679 --> 00:31:16,159
i see so it's like you must abort the

811
00:31:16,159 --> 00:31:19,440
stream unless you have some other

812
00:31:19,440 --> 00:31:22,000
mechanism so that is it this sounds like

813
00:31:22,000 --> 00:31:25,200
a must but we know you won't

814
00:31:25,200 --> 00:31:28,880
like in like the reality is that 98 of

815
00:31:28,880 --> 00:31:30,559
flows are going to tolerate this just

816
00:31:30,559 --> 00:31:33,519
fine and therefore as a as a client

817
00:31:33,519 --> 00:31:35,039
implementer i think it would be very

818
00:31:35,039 --> 00:31:36,559
hard to convince yourself like yeah i'm

819
00:31:36,559 --> 00:31:38,399
just gonna shut everything down and

820
00:31:38,399 --> 00:31:40,880
brick the user's device because

821
00:31:40,880 --> 00:31:42,880
like you know i'm not technically in

822
00:31:42,880 --> 00:31:45,440
compliance with ipv6 anymore

823
00:31:45,440 --> 00:31:47,760
uh as opposed to like

824
00:31:47,760 --> 00:31:50,240
well you know what i know i know i'm not

825
00:31:50,240 --> 00:31:52,799
in compliance anymore but those packets

826
00:31:52,799 --> 00:31:54,399
probably won't get out of the network if

827
00:31:54,399 --> 00:31:56,640
there's round packets well i mean so the

828
00:31:56,640 --> 00:31:58,240
mtu falls a little they're too small

829
00:31:58,240 --> 00:32:00,480
you're right no that's fine yeah the mcu

830
00:32:00,480 --> 00:32:02,240
is a little bit below 1280 most things

831
00:32:02,240 --> 00:32:03,919
are still gonna so you can those because

832
00:32:03,919 --> 00:32:05,279
most of the applications on top of you

833
00:32:05,279 --> 00:32:06,640
won't be double checking that they have

834
00:32:06,640 --> 00:32:07,840
enough room

835
00:32:07,840 --> 00:32:09,919
most because most most applications

836
00:32:09,919 --> 00:32:11,519
aren't running all the way up to the mtu

837
00:32:11,519 --> 00:32:13,519
limit the ones that are are usually

838
00:32:13,519 --> 00:32:15,600
smart enough to have a little bit of of

839
00:32:15,600 --> 00:32:18,000
pmtud of their own in them and tolerate

840
00:32:18,000 --> 00:32:19,840
it and back off

841
00:32:19,840 --> 00:32:21,760
uh and well if you're using v4 that's

842
00:32:21,760 --> 00:32:23,679
fine you don't need to tear this up v4

843
00:32:23,679 --> 00:32:25,200
technically has the same problem if

844
00:32:25,200 --> 00:32:26,640
you're you know

845
00:32:26,640 --> 00:32:29,200
at 576 or something but

846
00:32:29,200 --> 00:32:30,799
my my point is

847
00:32:30,799 --> 00:32:33,039
uh to me the thing that makes the most

848
00:32:33,039 --> 00:32:33,919
sense

849
00:32:33,919 --> 00:32:37,039
to to just try to be as like limited as

850
00:32:37,039 --> 00:32:38,559
possible here is to say

851
00:32:38,559 --> 00:32:39,600
like

852
00:32:39,600 --> 00:32:42,640
but you should do pmtud over the tunnel

853
00:32:42,640 --> 00:32:45,120
uh to find out the mtu if the mtu falls

854
00:32:45,120 --> 00:32:47,679
below 1280 you are no longer a compliant

855
00:32:47,679 --> 00:32:50,000
ipv6 implementation and and what you do

856
00:32:50,000 --> 00:32:52,080
with that information is up to you

857
00:32:52,080 --> 00:32:53,519
we could make it a non-normative

858
00:32:53,519 --> 00:32:55,279
statement of essentially saying like if

859
00:32:55,279 --> 00:32:56,640
you detect that you are not able to

860
00:32:56,640 --> 00:32:57,760
provide

861
00:32:57,760 --> 00:33:00,000
valid ipv6 over this you can abort the

862
00:33:00,000 --> 00:33:00,960
stream

863
00:33:00,960 --> 00:33:02,399
and just say like you can and if you

864
00:33:02,399 --> 00:33:03,679
have something else you want to do like

865
00:33:03,679 --> 00:33:05,760
be out of compliance or tunnel them over

866
00:33:05,760 --> 00:33:09,519
reliable datagrams knock yourself out

867
00:33:09,519 --> 00:33:11,519
i'm fine with any of those because at

868
00:33:11,519 --> 00:33:13,600
the end of the day we're

869
00:33:13,600 --> 00:33:15,039
not going to implement any of these

870
00:33:15,039 --> 00:33:16,399
we're going to pad the quick initial

871
00:33:16,399 --> 00:33:18,399
package and that's going to be enough

872
00:33:18,399 --> 00:33:20,559
all right so so it sounds like are we

873
00:33:20,559 --> 00:33:22,080
okay then just like the minutes of the

874
00:33:22,080 --> 00:33:25,360
issue saying like make this option a

875
00:33:25,360 --> 00:33:26,320
should

876
00:33:26,320 --> 00:33:27,840
do pm2d

877
00:33:27,840 --> 00:33:28,799
and

878
00:33:28,799 --> 00:33:32,000
just say you can close the stream when

879
00:33:32,000 --> 00:33:33,760
you hit an issue

880
00:33:33,760 --> 00:33:34,640
so

881
00:33:34,640 --> 00:33:36,960
as the default suggestion i'm okay with

882
00:33:36,960 --> 00:33:38,559
that since magnus since you filed the

883
00:33:38,559 --> 00:33:41,200
issue what are your thoughts

884
00:33:41,200 --> 00:33:44,480
when miriam failed one of them dude

885
00:33:45,039 --> 00:33:46,880
you're okay with it um

886
00:33:46,880 --> 00:33:49,120
yeah

887
00:33:51,600 --> 00:33:54,399
i'm about uh find out

888
00:33:56,799 --> 00:33:58,880
yeah bring this one um

889
00:33:58,880 --> 00:34:01,840
i just want to see that we have one

890
00:34:01,840 --> 00:34:03,120
we don't have any

891
00:34:03,120 --> 00:34:05,679
loopholes in this so to say and then if

892
00:34:05,679 --> 00:34:07,519
you think it should without having that

893
00:34:07,519 --> 00:34:09,119
should very hard

894
00:34:09,119 --> 00:34:11,440
specific what it means

895
00:34:11,440 --> 00:34:13,679
you would end up in another problem so

896
00:34:13,679 --> 00:34:14,960
um

897
00:34:14,960 --> 00:34:16,719
but yeah if you're actually having that

898
00:34:16,719 --> 00:34:19,279
saying okay

899
00:34:19,440 --> 00:34:20,960
and the problem really is the http

900
00:34:20,960 --> 00:34:22,719
intermediaries here because even if

901
00:34:22,719 --> 00:34:25,520
you're paddling and you and you

902
00:34:25,520 --> 00:34:27,679
uncertain if you have an hp media you

903
00:34:27,679 --> 00:34:29,280
would run into this problem so that's

904
00:34:29,280 --> 00:34:30,480
why the master

905
00:34:30,480 --> 00:34:32,480
is supposed to be there

906
00:34:32,480 --> 00:34:35,280
to cover that situation

907
00:34:35,280 --> 00:34:36,639
but like

908
00:34:36,639 --> 00:34:38,560
so to follow the rule that if you ever

909
00:34:38,560 --> 00:34:40,480
say should you need to give her kind of

910
00:34:40,480 --> 00:34:42,239
the explanation of why would it not be

911
00:34:42,239 --> 00:34:43,760
so like we could even just be very

912
00:34:43,760 --> 00:34:45,440
explicit like you should do this

913
00:34:45,440 --> 00:34:46,879
otherwise

914
00:34:46,879 --> 00:34:48,320
you could end up in a situation where

915
00:34:48,320 --> 00:34:51,119
you're not a compliant ipv6

916
00:34:51,119 --> 00:34:52,800
tunnel

917
00:34:52,800 --> 00:34:54,719
okay david what's your proposal i have a

918
00:34:54,719 --> 00:34:56,719
proposal that i think everyone might be

919
00:34:56,719 --> 00:34:59,040
okay with which is you know our

920
00:34:59,040 --> 00:35:00,640
what we do here never something that

921
00:35:00,640 --> 00:35:03,280
everyone loves um

922
00:35:03,280 --> 00:35:06,880
is to say um if you detect that the path

923
00:35:06,880 --> 00:35:09,839
mtu goes below the limit

924
00:35:09,839 --> 00:35:11,839
and you like sorry let me rephrase if

925
00:35:11,839 --> 00:35:14,839
you are sending your ip packets over

926
00:35:14,839 --> 00:35:18,079
datagram and the path you detect that

927
00:35:18,079 --> 00:35:21,200
the path mtu is no longer sufficient

928
00:35:21,200 --> 00:35:22,960
you must close the stream because you're

929
00:35:22,960 --> 00:35:24,720
in violation of the rc

930
00:35:24,720 --> 00:35:25,680
like

931
00:35:25,680 --> 00:35:27,440
you can send them another way like

932
00:35:27,440 --> 00:35:29,440
streams that allows that you could also

933
00:35:29,440 --> 00:35:31,680
not detect it you could also

934
00:35:31,680 --> 00:35:33,119
not detect it

935
00:35:33,119 --> 00:35:34,320
and

936
00:35:34,320 --> 00:35:36,160
uh

937
00:35:36,160 --> 00:35:38,000
like at the end of the day we're just

938
00:35:38,000 --> 00:35:39,680
we're we're doing lip service to the

939
00:35:39,680 --> 00:35:42,160
ipv6 rfc we're doing it right and in

940
00:35:42,160 --> 00:35:43,920
practice it'll be fine and it won't be a

941
00:35:43,920 --> 00:35:45,440
pain to implement for everyone i think

942
00:35:45,440 --> 00:35:47,599
this is a good

943
00:35:47,599 --> 00:35:48,800
little ground

944
00:35:48,800 --> 00:35:54,000
all right connect ip doing right by ipv6

945
00:35:54,000 --> 00:35:55,440
oh wow i'm gonna

946
00:35:55,440 --> 00:35:57,040
i'll bring that to i'll break bring that

947
00:35:57,040 --> 00:35:58,480
to eric binky

948
00:35:58,480 --> 00:36:02,160
um okay does is everyone okay with that

949
00:36:02,160 --> 00:36:05,440
yeah write it up sold

950
00:36:06,000 --> 00:36:06,960
okay

951
00:36:06,960 --> 00:36:10,640
thank you for everyone's input so far

952
00:36:11,040 --> 00:36:13,839
next one

953
00:36:14,000 --> 00:36:15,760
all right this one i think should be

954
00:36:15,760 --> 00:36:16,720
easier

955
00:36:16,720 --> 00:36:18,160
um

956
00:36:18,160 --> 00:36:20,320
previously we mentioned

957
00:36:20,320 --> 00:36:22,720
you can do icmp

958
00:36:22,720 --> 00:36:25,200
uh when you have errors like you know

959
00:36:25,200 --> 00:36:26,880
let's say you negotiated a full tunnel

960
00:36:26,880 --> 00:36:28,720
at the other side

961
00:36:28,720 --> 00:36:29,680
and then

962
00:36:29,680 --> 00:36:32,320
you told them here's your source address

963
00:36:32,320 --> 00:36:33,839
with an address assigned you say here

964
00:36:33,839 --> 00:36:35,040
are the routes you can send to with the

965
00:36:35,040 --> 00:36:36,800
route advertisement and then the other

966
00:36:36,800 --> 00:36:38,400
side just starts sending garbage that's

967
00:36:38,400 --> 00:36:40,720
not in that that violates your acls and

968
00:36:40,720 --> 00:36:42,400
they're being bad

969
00:36:42,400 --> 00:36:44,480
um that may be intermixed with good

970
00:36:44,480 --> 00:36:46,400
traffic you don't need to tear down your

971
00:36:46,400 --> 00:36:47,920
entire connection or your entire stream

972
00:36:47,920 --> 00:36:48,800
to them

973
00:36:48,800 --> 00:36:49,839
how do you let them know they were

974
00:36:49,839 --> 00:36:52,079
sending bad things and

975
00:36:52,079 --> 00:36:54,240
you could invent a bunch of capsules but

976
00:36:54,240 --> 00:36:56,240
we think that just sending icmp errors

977
00:36:56,240 --> 00:36:57,599
back is the right thing to do because

978
00:36:57,599 --> 00:36:59,119
that's

979
00:36:59,119 --> 00:37:00,800
they have the correct error codes and

980
00:37:00,800 --> 00:37:03,040
that's the right thing for this layer

981
00:37:03,040 --> 00:37:04,800
um it was

982
00:37:04,800 --> 00:37:07,280
kind of non-specific so the changes we

983
00:37:07,280 --> 00:37:08,640
did is we

984
00:37:08,640 --> 00:37:11,359
gave specific examples of like hey

985
00:37:11,359 --> 00:37:13,119
probably if you're trying to send

986
00:37:13,119 --> 00:37:14,320
something you don't have a route for you

987
00:37:14,320 --> 00:37:16,320
should send destination unreachable with

988
00:37:16,320 --> 00:37:18,079
the error code of like you can't reach

989
00:37:18,079 --> 00:37:19,359
that thing i forget which it's like

990
00:37:19,359 --> 00:37:20,640
number five

991
00:37:20,640 --> 00:37:21,599
um

992
00:37:21,599 --> 00:37:23,280
and

993
00:37:23,280 --> 00:37:25,280
same thing for if you send a bad source

994
00:37:25,280 --> 00:37:26,160
um

995
00:37:26,160 --> 00:37:28,160
and if you send a packet that's too

996
00:37:28,160 --> 00:37:29,599
large

997
00:37:29,599 --> 00:37:32,000
or then you get the correct error for

998
00:37:32,000 --> 00:37:33,520
that so

999
00:37:33,520 --> 00:37:36,800
just do the obvious thing for those um

1000
00:37:36,800 --> 00:37:39,119
and then the only other part of this

1001
00:37:39,119 --> 00:37:42,480
that's i think a bit more interesting is

1002
00:37:42,480 --> 00:37:45,440
it essentially says that you should

1003
00:37:45,440 --> 00:37:47,200
if you were giving routes

1004
00:37:47,200 --> 00:37:49,040
about advertisements to the peer which

1005
00:37:49,040 --> 00:37:50,880
not everyone does but like in a

1006
00:37:50,880 --> 00:37:52,800
peer-to-peer vpn case both sides give it

1007
00:37:52,800 --> 00:37:55,119
to each other in the client to proxy

1008
00:37:55,119 --> 00:37:56,640
case just the proxy gives it to the

1009
00:37:56,640 --> 00:37:57,839
client

1010
00:37:57,839 --> 00:38:00,400
that should include in the protocols

1011
00:38:00,400 --> 00:38:03,520
that are listed as allowed icmp

1012
00:38:03,520 --> 00:38:04,800
but then

1013
00:38:04,800 --> 00:38:07,040
essentially if you are not giving

1014
00:38:07,040 --> 00:38:09,040
routes aside like the client does not

1015
00:38:09,040 --> 00:38:11,520
give routes to the server

1016
00:38:11,520 --> 00:38:13,280
um

1017
00:38:13,280 --> 00:38:15,200
it essentially says that it is always

1018
00:38:15,200 --> 00:38:16,480
assuming that

1019
00:38:16,480 --> 00:38:17,520
you essentially always need to be

1020
00:38:17,520 --> 00:38:20,480
prepared to receive icmp packets so even

1021
00:38:20,480 --> 00:38:22,320
if you are just creating a

1022
00:38:22,320 --> 00:38:25,839
ip tunnel for esp you need to handle

1023
00:38:25,839 --> 00:38:27,839
icmp over this thing because that's how

1024
00:38:27,839 --> 00:38:29,520
you get your errors

1025
00:38:29,520 --> 00:38:33,640
any issues with that

1026
00:38:35,200 --> 00:38:36,880
art and duke

1027
00:38:36,880 --> 00:38:39,359
has issues

1028
00:38:39,359 --> 00:38:41,680
with that

1029
00:38:41,680 --> 00:38:43,760
just to clarify this this is that the

1030
00:38:43,760 --> 00:38:45,680
this is that the proxy

1031
00:38:45,680 --> 00:38:49,040
by the way martin did google no hats um

1032
00:38:49,040 --> 00:38:50,800
uh

1033
00:38:50,800 --> 00:38:53,280
so to clarify the the cert the proxy

1034
00:38:53,280 --> 00:38:55,839
ought to for these icmp messages in the

1035
00:38:55,839 --> 00:38:59,119
tunnel and the client must be able to

1036
00:38:59,119 --> 00:39:00,720
handle that whether or not they do

1037
00:39:00,720 --> 00:39:02,960
anything with it it's not neces

1038
00:39:02,960 --> 00:39:04,160
i guess we don't say anything about

1039
00:39:04,160 --> 00:39:05,599
whether or not you need to forward them

1040
00:39:05,599 --> 00:39:06,960
if you receive them from the outside

1041
00:39:06,960 --> 00:39:08,320
it's more like

1042
00:39:08,320 --> 00:39:10,800
you can generate them on the proxy

1043
00:39:10,800 --> 00:39:12,880
to tell like

1044
00:39:12,880 --> 00:39:14,400
client sends you as the proxy something

1045
00:39:14,400 --> 00:39:15,680
that they're not allowed to send to and

1046
00:39:15,680 --> 00:39:18,240
like you just you will you can

1047
00:39:18,240 --> 00:39:20,800
generate icmp back to them of like stop

1048
00:39:20,800 --> 00:39:23,200
you did the wrong thing okay

1049
00:39:23,200 --> 00:39:25,040
fair enough um

1050
00:39:25,040 --> 00:39:27,359
but the client must be able to handle

1051
00:39:27,359 --> 00:39:29,920
that like prepared to receive is a weird

1052
00:39:29,920 --> 00:39:33,520
like like you shouldn't crack

1053
00:39:33,520 --> 00:39:35,680
i mean okay like you shouldn't have done

1054
00:39:35,680 --> 00:39:36,960
this anyway

1055
00:39:36,960 --> 00:39:38,800
um like probably what you're going to do

1056
00:39:38,800 --> 00:39:40,560
is just log an error because like if

1057
00:39:40,560 --> 00:39:42,400
this proxy server told you you're only

1058
00:39:42,400 --> 00:39:44,320
allowed to send to this other ip address

1059
00:39:44,320 --> 00:39:46,320
and you sent to a different one like you

1060
00:39:46,320 --> 00:39:48,320
you have problems

1061
00:39:48,320 --> 00:39:49,359
it's like i don't know what it means

1062
00:39:49,359 --> 00:39:51,359
like must handle it's like

1063
00:39:51,359 --> 00:39:52,560
it's just like

1064
00:39:52,560 --> 00:39:55,119
you will receive this i don't know okay

1065
00:39:55,119 --> 00:39:57,119
well right so i mean like this is kind

1066
00:39:57,119 --> 00:40:00,960
of a wordsmithing thing but like

1067
00:40:02,079 --> 00:40:04,079
if without further negotiation the

1068
00:40:04,079 --> 00:40:06,079
server might generate these things then

1069
00:40:06,079 --> 00:40:08,240
the client has to be like

1070
00:40:08,240 --> 00:40:10,160
prepared to receive them like it's not

1071
00:40:10,160 --> 00:40:12,240
an error if i get a nice team exactly

1072
00:40:12,240 --> 00:40:14,560
right okay it's it's almost like saying

1073
00:40:14,560 --> 00:40:16,319
like you know if we've defined all the

1074
00:40:16,319 --> 00:40:17,599
basic quick frames i don't think we have

1075
00:40:17,599 --> 00:40:19,440
like a client must support receiving

1076
00:40:19,440 --> 00:40:20,960
this quick frame and not crash when they

1077
00:40:20,960 --> 00:40:22,640
see this number it's like yeah it's okay

1078
00:40:22,640 --> 00:40:24,240
it's just the protocol all right all

1079
00:40:24,240 --> 00:40:25,359
right okay so the point is that you

1080
00:40:25,359 --> 00:40:26,560
might arrive and you'd be prepared for

1081
00:40:26,560 --> 00:40:28,800
it that's cool thanks

1082
00:40:28,800 --> 00:40:31,680
alex uh hi alex stranowski google uh i

1083
00:40:31,680 --> 00:40:32,880
just wanted to clarify that the text

1084
00:40:32,880 --> 00:40:34,640
that tommy has on the slides here about

1085
00:40:34,640 --> 00:40:35,920
the language is not the language which

1086
00:40:35,920 --> 00:40:37,520
is in the pr i don't think so i think

1087
00:40:37,520 --> 00:40:39,440
the commodore and wordsworth thing is

1088
00:40:39,440 --> 00:40:40,720
more about the slide please look at the

1089
00:40:40,720 --> 00:40:42,480
pr if you think that sure text needs

1090
00:40:42,480 --> 00:40:44,560
more wordsmithing yes

1091
00:40:44,560 --> 00:40:47,599
these are conversation topics not this

1092
00:40:47,599 --> 00:40:48,800
literal text

1093
00:40:48,800 --> 00:40:51,680
then ben schwartz uh i just

1094
00:40:51,680 --> 00:40:53,200
wanted to

1095
00:40:53,200 --> 00:40:56,160
try to understand uh whether this

1096
00:40:56,160 --> 00:40:58,640
really covers all the uses of icmp like

1097
00:40:58,640 --> 00:41:00,400
does this mean that i can

1098
00:41:00,400 --> 00:41:03,119
uh you know run traceroute through

1099
00:41:03,119 --> 00:41:06,960
a tunnel whose ip protocol says tcp

1100
00:41:06,960 --> 00:41:08,000
um

1101
00:41:08,000 --> 00:41:09,119
you know uh

1102
00:41:09,119 --> 00:41:10,960
i think like

1103
00:41:10,960 --> 00:41:12,000
you

1104
00:41:12,000 --> 00:41:14,400
yes but that doesn't guarantee that it's

1105
00:41:14,400 --> 00:41:16,560
going to forward it and like like i

1106
00:41:16,560 --> 00:41:18,160
don't think it says anything about

1107
00:41:18,160 --> 00:41:19,520
whether or not

1108
00:41:19,520 --> 00:41:22,400
you will discover a full

1109
00:41:22,400 --> 00:41:24,560
well lots of lots of icmp black holes on

1110
00:41:24,560 --> 00:41:27,119
the uh right right we can contribute to

1111
00:41:27,119 --> 00:41:28,960
black hole we could say like you should

1112
00:41:28,960 --> 00:41:31,119
not black hole icmp that that might be

1113
00:41:31,119 --> 00:41:32,640
nice but

1114
00:41:32,640 --> 00:41:34,880
uh but the the important thing is like i

1115
00:41:34,880 --> 00:41:35,920
can

1116
00:41:35,920 --> 00:41:39,839
functionally i can send icmp um yes uh

1117
00:41:39,839 --> 00:41:40,880
including

1118
00:41:40,880 --> 00:41:43,839
and i can receive icmp replies from from

1119
00:41:43,839 --> 00:41:46,079
source ips that aren't the target

1120
00:41:46,079 --> 00:41:47,280
right because

1121
00:41:47,280 --> 00:41:49,920
uh traceroute in traceroute the the

1122
00:41:49,920 --> 00:41:52,400
source ips are not points are not the

1123
00:41:52,400 --> 00:41:53,920
target ip

1124
00:41:53,920 --> 00:41:55,680
uh like is that

1125
00:41:55,680 --> 00:41:57,680
also something that that works that's a

1126
00:41:57,680 --> 00:41:59,359
good point in this framework or does our

1127
00:41:59,359 --> 00:42:01,200
format compression lose the source ip

1128
00:42:01,200 --> 00:42:04,000
well there's no compression here okay um

1129
00:42:04,000 --> 00:42:06,880
you know you would absolutely get it um

1130
00:42:06,880 --> 00:42:08,640
i would like to hear other other authors

1131
00:42:08,640 --> 00:42:10,720
opinions on this because i don't care i

1132
00:42:10,720 --> 00:42:12,160
can either say

1133
00:42:12,160 --> 00:42:15,119
like either you say you only allow it

1134
00:42:15,119 --> 00:42:16,960
by default from your peer

1135
00:42:16,960 --> 00:42:18,319
otherwise you say you just allow all

1136
00:42:18,319 --> 00:42:21,359
icmp and just do with what you will

1137
00:42:21,359 --> 00:42:23,680
i'm noticing nerius ghost is in the kill

1138
00:42:23,680 --> 00:42:26,480
if i'm not funny

1139
00:42:26,480 --> 00:42:29,520
uh so to answer ben's question i i agree

1140
00:42:29,520 --> 00:42:31,920
i think we should just say

1141
00:42:31,920 --> 00:42:33,839
just add a note that the source address

1142
00:42:33,839 --> 00:42:36,960
can come from somewhere else yeah uh

1143
00:42:36,960 --> 00:42:39,760
in terms of black calling we already say

1144
00:42:39,760 --> 00:42:42,720
that like connect a pn points operators

1145
00:42:42,720 --> 00:42:45,599
routers so if someone wants to knock

1146
00:42:45,599 --> 00:42:47,520
themselves out and read the hundreds of

1147
00:42:47,520 --> 00:42:49,119
pages of rc that have been written on

1148
00:42:49,119 --> 00:42:51,119
what a router is supposed to do

1149
00:42:51,119 --> 00:42:52,720
you should but one of them is don't

1150
00:42:52,720 --> 00:42:54,960
blackhole icmp so i don't think we need

1151
00:42:54,960 --> 00:42:56,079
to say anything

1152
00:42:56,079 --> 00:42:57,680
i mean i think practically it's fairly

1153
00:42:57,680 --> 00:42:59,359
likely that a lot of clients will just

1154
00:42:59,359 --> 00:43:02,000
black hole ismp if the proxy tries to

1155
00:43:02,000 --> 00:43:04,240
randomly trace route through them but

1156
00:43:04,240 --> 00:43:06,880
it's true yeah that's probably okay oh

1157
00:43:06,880 --> 00:43:08,240
that's the other point i wanted to add

1158
00:43:08,240 --> 00:43:10,720
is you don't need

1159
00:43:10,720 --> 00:43:14,480
icmp to do traceroute you can uh like if

1160
00:43:14,480 --> 00:43:16,480
you're sending tcp you can send tcp

1161
00:43:16,480 --> 00:43:18,400
packages with a small hub count and then

1162
00:43:18,400 --> 00:43:21,280
the icmp is the response not the sent

1163
00:43:21,280 --> 00:43:24,720
packet that's true that's true

1164
00:43:24,800 --> 00:43:26,240
mia

1165
00:43:26,240 --> 00:43:28,000
slightly disagree so this is only saying

1166
00:43:28,000 --> 00:43:30,000
like even if you didn't ask for icp you

1167
00:43:30,000 --> 00:43:31,680
might get it yes

1168
00:43:31,680 --> 00:43:33,920
um so if you want to actually use icmp

1169
00:43:33,920 --> 00:43:35,440
and you want to send icmp messages you

1170
00:43:35,440 --> 00:43:37,119
should you should ask for it you should

1171
00:43:37,119 --> 00:43:41,040
tell your proxy to do it

1172
00:43:41,040 --> 00:43:42,720
i mean i agree that like

1173
00:43:42,720 --> 00:43:44,959
if

1174
00:43:45,440 --> 00:43:47,680
if my like if my intent is i want to

1175
00:43:47,680 --> 00:43:50,160
open the thing so i can ping this random

1176
00:43:50,160 --> 00:43:52,640
server and that's all i want to do just

1177
00:43:52,640 --> 00:43:54,560
saying i want to open up icmp makes

1178
00:43:54,560 --> 00:43:55,520
sense

1179
00:43:55,520 --> 00:43:56,400
if

1180
00:43:56,400 --> 00:43:57,760
what i'm let's say what i'm doing is

1181
00:43:57,760 --> 00:44:00,240
like i'm trying to open up sctp

1182
00:44:00,240 --> 00:44:03,520
to this particular server

1183
00:44:04,000 --> 00:44:06,560
i sh i think if i have an error reaching

1184
00:44:06,560 --> 00:44:08,480
that that comes back as icmp just

1185
00:44:08,480 --> 00:44:10,319
receiving the icp all the way through is

1186
00:44:10,319 --> 00:44:12,079
nice i shouldn't have to explicitly say

1187
00:44:12,079 --> 00:44:15,119
please also open up icmp for me

1188
00:44:15,119 --> 00:44:17,680
yes um and so that's okay here so then

1189
00:44:17,680 --> 00:44:19,920
i guess the only other case is like if i

1190
00:44:19,920 --> 00:44:20,839
want

1191
00:44:20,839 --> 00:44:23,920
to send random pings and

1192
00:44:23,920 --> 00:44:27,119
icmp based race routes and also use sctp

1193
00:44:27,119 --> 00:44:28,960
why wouldn't i just open up

1194
00:44:28,960 --> 00:44:30,640
a request for each of those or like have

1195
00:44:30,640 --> 00:44:33,359
my tunnel be big enough to do both

1196
00:44:33,359 --> 00:44:35,119
that's kind of just like good practice

1197
00:44:35,119 --> 00:44:38,000
with the proxy

1198
00:44:38,000 --> 00:44:39,599
so

1199
00:44:39,599 --> 00:44:41,040
so mine was first

1200
00:44:41,040 --> 00:44:43,680
yeah i mean from the discussion we had

1201
00:44:43,680 --> 00:44:45,119
why i brought this up it said that was

1202
00:44:45,119 --> 00:44:47,839
really to ensure that you first

1203
00:44:47,839 --> 00:44:49,680
the endpoint can sound nice and be back

1204
00:44:49,680 --> 00:44:51,760
to the client if it sends something bad

1205
00:44:51,760 --> 00:44:53,680
yes and to

1206
00:44:53,680 --> 00:44:56,240
also get the feedback from beyond the

1207
00:44:56,240 --> 00:44:59,680
proxy when it if it for example reach

1208
00:44:59,680 --> 00:45:01,359
port unreachable or something like that

1209
00:45:01,359 --> 00:45:03,040
the packet to be they should be returned

1210
00:45:03,040 --> 00:45:04,640
back if the

1211
00:45:04,640 --> 00:45:06,800
uh

1212
00:45:06,800 --> 00:45:09,599
the proxy can actually

1213
00:45:09,599 --> 00:45:12,400
map it back to this

1214
00:45:12,400 --> 00:45:15,359
request so cool yeah

1215
00:45:15,359 --> 00:45:17,440
violent agreement that's the same right

1216
00:45:17,440 --> 00:45:19,599
like the if the proxy if approximately

1217
00:45:19,599 --> 00:45:21,440
sees an icp you don't know if it's the

1218
00:45:21,440 --> 00:45:23,280
one that you send if you send the same

1219
00:45:23,280 --> 00:45:24,720
to the client or if you generate a new

1220
00:45:24,720 --> 00:45:27,119
one i mean this is the same use case

1221
00:45:27,119 --> 00:45:28,480
yeah

1222
00:45:28,480 --> 00:45:31,040
no but there are cases like

1223
00:45:31,040 --> 00:45:32,800
because we're saying that the icmp is

1224
00:45:32,800 --> 00:45:34,560
used as an error message for certain

1225
00:45:34,560 --> 00:45:36,079
cases

1226
00:45:36,079 --> 00:45:38,079
for us to request it might be the proxy

1227
00:45:38,079 --> 00:45:39,760
that generates only for the tunnel it

1228
00:45:39,760 --> 00:45:41,920
doesn't comes from the lower the

1229
00:45:41,920 --> 00:45:44,960
interface beyond external side yeah so

1230
00:45:44,960 --> 00:45:46,400
if it comes from the outside you just

1231
00:45:46,400 --> 00:45:48,000
don't know it's the icmp you get from

1232
00:45:48,000 --> 00:45:50,000
proxy it's the same

1233
00:45:50,000 --> 00:45:52,000
uh well i mean the the addresses on the

1234
00:45:52,000 --> 00:45:53,359
icmp could be different like you could

1235
00:45:53,359 --> 00:45:55,200
tell like oh this came from my source

1236
00:45:55,200 --> 00:45:56,160
address

1237
00:45:56,160 --> 00:45:57,760
of the pr i was trying to send to or it

1238
00:45:57,760 --> 00:46:00,480
came from my proxies ip address

1239
00:46:00,480 --> 00:46:02,560
okay but like yeah you cannot stop it

1240
00:46:02,560 --> 00:46:03,839
you cannot replicate right you can't

1241
00:46:03,839 --> 00:46:05,040
stop it you can receive it from my other

1242
00:46:05,040 --> 00:46:07,680
place and that's okay

1243
00:46:07,680 --> 00:46:10,160
um so hi alex again uh this is actually

1244
00:46:10,160 --> 00:46:12,480
an area which i tried to push back on

1245
00:46:12,480 --> 00:46:14,160
two ietfs ago when we started adding

1246
00:46:14,160 --> 00:46:15,839
iproto originally because of the

1247
00:46:15,839 --> 00:46:17,520
complexities around this

1248
00:46:17,520 --> 00:46:19,280
i think that the only way we can resolve

1249
00:46:19,280 --> 00:46:20,880
this is that you can't actually allow

1250
00:46:20,880 --> 00:46:22,079
sharing the same ip address with

1251
00:46:22,079 --> 00:46:23,599
different ip protos if you want to

1252
00:46:23,599 --> 00:46:24,640
support

1253
00:46:24,640 --> 00:46:27,440
these sort of hard to distinguish icmp

1254
00:46:27,440 --> 00:46:28,640
messages and align them up with the

1255
00:46:28,640 --> 00:46:30,640
different tenants on the same ip so like

1256
00:46:30,640 --> 00:46:32,480
i think one thing which is very clear is

1257
00:46:32,480 --> 00:46:33,200
that

1258
00:46:33,200 --> 00:46:35,920
having the proxy and the client be able

1259
00:46:35,920 --> 00:46:38,319
to have over their direct point-to-point

1260
00:46:38,319 --> 00:46:40,960
link exchange icmp about that is very

1261
00:46:40,960 --> 00:46:42,960
easy to do but the moment you start

1262
00:46:42,960 --> 00:46:44,800
saying oh i have an ip proto restriction

1263
00:46:44,800 --> 00:46:46,160
that says i can only do dcb over the

1264
00:46:46,160 --> 00:46:48,079
tunnel and also want to get

1265
00:46:48,079 --> 00:46:50,560
icmp messages from the far end we need

1266
00:46:50,560 --> 00:46:52,000
to make sure that we are able to

1267
00:46:52,000 --> 00:46:53,359
restrict that down to the messages which

1268
00:46:53,359 --> 00:46:55,200
are identifiable for

1269
00:46:55,200 --> 00:46:57,839
the yes like three tuple there

1270
00:46:57,839 --> 00:46:59,920
that is a good point because

1271
00:46:59,920 --> 00:47:02,400
right these error cases

1272
00:47:02,400 --> 00:47:05,839
are such that the proxy can recognize oh

1273
00:47:05,839 --> 00:47:08,319
that icmp was in response to this packet

1274
00:47:08,319 --> 00:47:09,680
that i sent and that came from this

1275
00:47:09,680 --> 00:47:12,160
tunnel right and essentially it's like i

1276
00:47:12,160 --> 00:47:13,680
think the proxy should

1277
00:47:13,680 --> 00:47:16,960
have the choice to only forward those

1278
00:47:16,960 --> 00:47:18,560
or if it thinks you have full control

1279
00:47:18,560 --> 00:47:20,319
over this ip address forward you also

1280
00:47:20,319 --> 00:47:24,559
icmp right so i think the

1281
00:47:24,559 --> 00:47:26,640
so i think the minimum behavior that we

1282
00:47:26,640 --> 00:47:28,160
need to guarantee

1283
00:47:28,160 --> 00:47:30,319
is you will always get icmp error

1284
00:47:30,319 --> 00:47:32,400
reporting on the point-to-point link

1285
00:47:32,400 --> 00:47:34,880
regardless of what ip proto that you you

1286
00:47:34,880 --> 00:47:37,680
have requested if you want to guarantee

1287
00:47:37,680 --> 00:47:40,559
that you also get all icmp messages for

1288
00:47:40,559 --> 00:47:43,200
this ip you must also

1289
00:47:43,200 --> 00:47:46,000
request icmp for this iproto

1290
00:47:46,000 --> 00:47:49,760
however uh advanced proxy may be aware

1291
00:47:49,760 --> 00:47:51,599
of the three tuples and five tuples and

1292
00:47:51,599 --> 00:47:53,440
forward you additional icmp information

1293
00:47:53,440 --> 00:47:55,359
but if you want to guarantee you have a

1294
00:47:55,359 --> 00:47:57,520
full tunnel ask for a full tunnel

1295
00:47:57,520 --> 00:47:58,400
um

1296
00:47:58,400 --> 00:48:00,160
you may also get some other icmp if the

1297
00:48:00,160 --> 00:48:02,720
proxy is smart

1298
00:48:02,720 --> 00:48:04,400
great i think we can clarify that a

1299
00:48:04,400 --> 00:48:05,680
little bit in the text but this is

1300
00:48:05,680 --> 00:48:06,720
useful

1301
00:48:06,720 --> 00:48:09,200
thank you

1302
00:48:12,160 --> 00:48:13,119
okay

1303
00:48:13,119 --> 00:48:14,160
um

1304
00:48:14,160 --> 00:48:17,599
this one was meaty

1305
00:48:17,599 --> 00:48:18,400
so

1306
00:48:18,400 --> 00:48:21,040
previously uh i think last ietf we were

1307
00:48:21,040 --> 00:48:23,520
trying to fix up address assign so we

1308
00:48:23,520 --> 00:48:25,760
fixed this for one second oh sorry

1309
00:48:25,760 --> 00:48:28,079
anthony you're requesting slides but i

1310
00:48:28,079 --> 00:48:29,280
assume that means you wanted to be in

1311
00:48:29,280 --> 00:48:30,559
the queue

1312
00:48:30,559 --> 00:48:32,079
sweet one last comment then we'll keep

1313
00:48:32,079 --> 00:48:34,880
going one last comment hi um i'm new to

1314
00:48:34,880 --> 00:48:37,200
this mask thing but i know the esp and

1315
00:48:37,200 --> 00:48:41,119
ipsec world rfc 4301 as a text what kind

1316
00:48:41,119 --> 00:48:43,440
of icmps you should allow and that's

1317
00:48:43,440 --> 00:48:45,599
basically looking in the payload

1318
00:48:45,599 --> 00:48:47,680
because icmprs should have a payload

1319
00:48:47,680 --> 00:48:49,040
part of the packet which you send

1320
00:48:49,040 --> 00:48:50,160
forward

1321
00:48:50,160 --> 00:48:51,920
and you look at that payload and then

1322
00:48:51,920 --> 00:48:55,520
you decide was it allowed by the mask

1323
00:48:55,520 --> 00:48:57,520
that sounds like very good text to copy

1324
00:48:57,520 --> 00:48:58,720
yeah

1325
00:48:58,720 --> 00:49:00,480
that only will allow if the forward

1326
00:49:00,480 --> 00:49:02,079
packet was allowed then you do the

1327
00:49:02,079 --> 00:49:03,440
reverse lookup

1328
00:49:03,440 --> 00:49:05,119
and if the reverse lookup supports it

1329
00:49:05,119 --> 00:49:07,520
then you allow those only errors yeah so

1330
00:49:07,520 --> 00:49:08,960
that's a force

1331
00:49:08,960 --> 00:49:10,880
rfc four three zero one

1332
00:49:10,880 --> 00:49:12,559
is it next for it and

1333
00:49:12,559 --> 00:49:14,720
i can support you thank you

1334
00:49:14,720 --> 00:49:17,040
wonderful

1335
00:49:17,040 --> 00:49:19,200
yeah i think i remember that text yeah i

1336
00:49:19,200 --> 00:49:20,559
mean we can't we can definitely add more

1337
00:49:20,559 --> 00:49:21,920
text if this helpful but like you can

1338
00:49:21,920 --> 00:49:24,079
just decide to ignore all icmp messages

1339
00:49:24,079 --> 00:49:25,520
or whatever like you can do whatever you

1340
00:49:25,520 --> 00:49:27,040
want the only point is like you have to

1341
00:49:27,040 --> 00:49:29,520
be prepared to get them yes

1342
00:49:29,520 --> 00:49:32,160
yeah but i think it's good advice though

1343
00:49:32,160 --> 00:49:34,160
because this is a that's a well-behaved

1344
00:49:34,160 --> 00:49:35,760
proxy that's acting as a very nice

1345
00:49:35,760 --> 00:49:37,680
tunnel

1346
00:49:37,680 --> 00:49:40,160
all right so back uh to

1347
00:49:40,160 --> 00:49:42,079
address requests previously we tried to

1348
00:49:42,079 --> 00:49:43,920
fix address assign and i think we did a

1349
00:49:43,920 --> 00:49:45,280
good job there

1350
00:49:45,280 --> 00:49:48,160
uh long just raised some good issues

1351
00:49:48,160 --> 00:49:52,240
explaining how address request had

1352
00:49:52,240 --> 00:49:55,119
semantic ambiguity problems

1353
00:49:55,119 --> 00:49:56,000
so

1354
00:49:56,000 --> 00:49:58,480
this really isn't too much of a problem

1355
00:49:58,480 --> 00:49:59,839
in a

1356
00:49:59,839 --> 00:50:02,800
vpn to vpn site to site case

1357
00:50:02,800 --> 00:50:05,280
in which sides are

1358
00:50:05,280 --> 00:50:06,960
assigning each other addresses

1359
00:50:06,960 --> 00:50:09,040
requesting addresses assigning routes

1360
00:50:09,040 --> 00:50:10,319
bi-directionally and they're just like

1361
00:50:10,319 --> 00:50:12,480
all free-form tunneling

1362
00:50:12,480 --> 00:50:14,559
it is more of a problem if you are kind

1363
00:50:14,559 --> 00:50:16,319
of like client to proxy opening

1364
00:50:16,319 --> 00:50:18,559
something out

1365
00:50:18,559 --> 00:50:20,559
because previously

1366
00:50:20,559 --> 00:50:22,319
the address request was just like an

1367
00:50:22,319 --> 00:50:23,520
optional thing

1368
00:50:23,520 --> 00:50:24,720
that

1369
00:50:24,720 --> 00:50:27,200
you send if you

1370
00:50:27,200 --> 00:50:28,559
want a particular address and if you

1371
00:50:28,559 --> 00:50:30,000
don't want a particular address you

1372
00:50:30,000 --> 00:50:31,520
don't send it

1373
00:50:31,520 --> 00:50:34,000
um yes obviously the the proxy would

1374
00:50:34,000 --> 00:50:35,119
never send that to the client because

1375
00:50:35,119 --> 00:50:37,119
the client can't assign addresses

1376
00:50:37,119 --> 00:50:38,240
but

1377
00:50:38,240 --> 00:50:40,079
the sensible place if you do care about

1378
00:50:40,079 --> 00:50:41,680
your address is to send the capsule for

1379
00:50:41,680 --> 00:50:44,079
address request at the beginning

1380
00:50:44,079 --> 00:50:46,079
right after your actual

1381
00:50:46,079 --> 00:50:48,480
um request

1382
00:50:48,480 --> 00:50:50,400
uh the server has no idea if you're

1383
00:50:50,400 --> 00:50:52,240
going to send that or not and so it will

1384
00:50:52,240 --> 00:50:55,119
receive the request

1385
00:50:55,119 --> 00:50:57,920
maybe give you 200 but like it's how

1386
00:50:57,920 --> 00:50:59,760
long is it going to wait before it

1387
00:50:59,760 --> 00:51:01,200
checks if you have an address request

1388
00:51:01,200 --> 00:51:02,480
capsule or not before it gives you an

1389
00:51:02,480 --> 00:51:04,160
address to sign like

1390
00:51:04,160 --> 00:51:06,480
it was completely ambiguous and

1391
00:51:06,480 --> 00:51:08,000
you could come up with some you know

1392
00:51:08,000 --> 00:51:09,359
rule of like oh you just negotiate out

1393
00:51:09,359 --> 00:51:11,119
of band whether or not you do that but

1394
00:51:11,119 --> 00:51:12,880
that was gross

1395
00:51:12,880 --> 00:51:13,760
um

1396
00:51:13,760 --> 00:51:15,280
there was discussions about okay you can

1397
00:51:15,280 --> 00:51:16,720
add a header to say i'm going to send

1398
00:51:16,720 --> 00:51:18,319
this capsule but that also is

1399
00:51:18,319 --> 00:51:19,520
problematic

1400
00:51:19,520 --> 00:51:21,680
the proposal here is just to say you

1401
00:51:21,680 --> 00:51:23,119
always

1402
00:51:23,119 --> 00:51:24,960
send an address request if you want an

1403
00:51:24,960 --> 00:51:26,559
address assigned so there are different

1404
00:51:26,559 --> 00:51:29,359
models of connect ip not everyone needs

1405
00:51:29,359 --> 00:51:31,200
an address assigned because like for

1406
00:51:31,200 --> 00:51:32,319
example like the

1407
00:51:32,319 --> 00:51:34,160
proxy server never receives an address

1408
00:51:34,160 --> 00:51:35,599
assigned from a client

1409
00:51:35,599 --> 00:51:37,119
so it doesn't send an address request

1410
00:51:37,119 --> 00:51:38,480
but if the client wants an address to

1411
00:51:38,480 --> 00:51:39,359
sign

1412
00:51:39,359 --> 00:51:42,160
it needs to send an address request

1413
00:51:42,160 --> 00:51:44,240
if the client out of band already knows

1414
00:51:44,240 --> 00:51:45,920
what ip address it has assigned to it

1415
00:51:45,920 --> 00:51:48,000
and they don't need the address to sign

1416
00:51:48,000 --> 00:51:49,440
then it doesn't need to send it so it's

1417
00:51:49,440 --> 00:51:50,800
just kind of very parallel like if you

1418
00:51:50,800 --> 00:51:52,160
want an address to sign you better send

1419
00:51:52,160 --> 00:51:54,960
an address request

1420
00:51:54,960 --> 00:51:55,839
um

1421
00:51:55,839 --> 00:51:57,920
this also opened up

1422
00:51:57,920 --> 00:51:59,040
kind of a nice

1423
00:51:59,040 --> 00:52:01,440
property that

1424
00:52:01,440 --> 00:52:03,359
the address request previously you would

1425
00:52:03,359 --> 00:52:05,599
only send if you had a specific prefix

1426
00:52:05,599 --> 00:52:07,839
you wanted to be in or a specific

1427
00:52:07,839 --> 00:52:09,839
address you wanted

1428
00:52:09,839 --> 00:52:13,040
but if you don't care you send all zeros

1429
00:52:13,040 --> 00:52:14,960
for your actual addresses

1430
00:52:14,960 --> 00:52:17,520
that's nice because now you can say

1431
00:52:17,520 --> 00:52:20,160
explicitly like i want a v4 address

1432
00:52:20,160 --> 00:52:22,000
assigned to me or i want a v4 and a v6

1433
00:52:22,000 --> 00:52:24,240
or i just want a v6

1434
00:52:24,240 --> 00:52:25,680
um

1435
00:52:25,680 --> 00:52:28,240
and you can also specify within that

1436
00:52:28,240 --> 00:52:29,680
the prefix

1437
00:52:29,680 --> 00:52:31,839
um so you can even have just all zeros

1438
00:52:31,839 --> 00:52:33,920
but like you say i want to slash 64 or i

1439
00:52:33,920 --> 00:52:35,520
want to slash

1440
00:52:35,520 --> 00:52:37,839
128 you can you can give the semantics

1441
00:52:37,839 --> 00:52:39,760
of what you're expecting to get back and

1442
00:52:39,760 --> 00:52:41,599
then of course the proxy can assign you

1443
00:52:41,599 --> 00:52:42,640
something

1444
00:52:42,640 --> 00:52:44,640
more specific within that or

1445
00:52:44,640 --> 00:52:47,440
you can just use that as input as a hint

1446
00:52:47,440 --> 00:52:50,480
um so i think that works pretty nicely

1447
00:52:50,480 --> 00:52:52,400
uh one other tweak here just to make

1448
00:52:52,400 --> 00:52:55,839
sure that if you're asking for v4 and v6

1449
00:52:55,839 --> 00:52:57,359
or if you're being assigned v4 and v6

1450
00:52:57,359 --> 00:52:59,440
you had it all at the same time was that

1451
00:52:59,440 --> 00:53:00,720
just like we did for the route

1452
00:53:00,720 --> 00:53:02,720
advertising capsule where we just had

1453
00:53:02,720 --> 00:53:05,040
the capsule be a

1454
00:53:05,040 --> 00:53:08,559
array of repeating route structures

1455
00:53:08,559 --> 00:53:10,800
that have the different protocol of

1456
00:53:10,800 --> 00:53:12,400
families the address requests and

1457
00:53:12,400 --> 00:53:14,800
addresses sign capsules can contain

1458
00:53:14,800 --> 00:53:17,040
multiple addresses so

1459
00:53:17,040 --> 00:53:18,640
you know the first one just says oh this

1460
00:53:18,640 --> 00:53:19,760
is a

1461
00:53:19,760 --> 00:53:21,280
v6 address

1462
00:53:21,280 --> 00:53:22,800
and it has the v6 address so then it's

1463
00:53:22,800 --> 00:53:24,160
followed by a v4 address and that's all

1464
00:53:24,160 --> 00:53:26,799
in one capsule

1465
00:53:27,200 --> 00:53:30,799
any issues with this

1466
00:53:34,000 --> 00:53:35,920
this was the hardest for us to actually

1467
00:53:35,920 --> 00:53:37,680
discuss so hopefully we'll have

1468
00:53:37,680 --> 00:53:41,399
consensus on it

1469
00:53:43,280 --> 00:53:44,960
david scenazi so no i don't have any

1470
00:53:44,960 --> 00:53:47,440
issue with this i just wanted to uh

1471
00:53:47,440 --> 00:53:49,359
this was a hard one for us to reason

1472
00:53:49,359 --> 00:53:52,480
about and it's a really hard one to

1473
00:53:52,480 --> 00:53:54,160
explain

1474
00:53:54,160 --> 00:53:55,280
so if

1475
00:53:55,280 --> 00:53:56,720
if you're wondering what the hell

1476
00:53:56,720 --> 00:53:58,319
tommy's talking about

1477
00:53:58,319 --> 00:54:00,000
don't worry that's normal

1478
00:54:00,000 --> 00:54:02,400
but at least all of the editors thought

1479
00:54:02,400 --> 00:54:04,240
about it and thought that was a nice

1480
00:54:04,240 --> 00:54:07,599
solution that was really both simple

1481
00:54:07,599 --> 00:54:09,680
and like

1482
00:54:09,680 --> 00:54:11,520
avoided a lot of the caveats that we

1483
00:54:11,520 --> 00:54:13,760
were running into so just wanted to say

1484
00:54:13,760 --> 00:54:15,280
like we're we're on the same page i

1485
00:54:15,280 --> 00:54:17,040
think this is a good way forward yeah i

1486
00:54:17,040 --> 00:54:18,319
think it's one of the things that like

1487
00:54:18,319 --> 00:54:19,599
looks kind of like oh that's kind of

1488
00:54:19,599 --> 00:54:21,440
simple and straightforward but yeah

1489
00:54:21,440 --> 00:54:23,119
that's after the fact

1490
00:54:23,119 --> 00:54:24,960
yeah maybe a diagram would have helped

1491
00:54:24,960 --> 00:54:27,280
but we'll we'll see what mt thinks he's

1492
00:54:27,280 --> 00:54:28,720
taking the long way around i don't know

1493
00:54:28,720 --> 00:54:29,680
if that's

1494
00:54:29,680 --> 00:54:32,720
something you should be worried about

1495
00:54:36,319 --> 00:54:38,000
so so have you changed the spelling at

1496
00:54:38,000 --> 00:54:40,160
all

1497
00:54:40,640 --> 00:54:42,720
i'm looking at the spec i'm looking at

1498
00:54:42,720 --> 00:54:44,799
the the discussion here

1499
00:54:44,799 --> 00:54:48,559
so this is a pr it's not merged in yet

1500
00:54:48,559 --> 00:54:51,440
you said issue 66 oh 70. all right i'm

1501
00:54:51,440 --> 00:54:54,160
looking at it now

1502
00:54:54,480 --> 00:54:56,480
the pr doesn't change the wire format

1503
00:54:56,480 --> 00:54:58,640
did the wi-fi just well it changes the

1504
00:54:58,640 --> 00:55:00,079
capsule number

1505
00:55:00,079 --> 00:55:01,680
and then it just allows it to be

1506
00:55:01,680 --> 00:55:03,359
repeatable the interior of the capsule

1507
00:55:03,359 --> 00:55:04,799
is now repeatable as opposed to being a

1508
00:55:04,799 --> 00:55:06,400
one singleton

1509
00:55:06,400 --> 00:55:09,440
so it's repeatable and you have to

1510
00:55:09,440 --> 00:55:11,280
include the address family as well you

1511
00:55:11,280 --> 00:55:13,599
already have this one so it's address

1512
00:55:13,599 --> 00:55:15,440
family

1513
00:55:15,440 --> 00:55:17,040
proof explain so there's capsule type

1514
00:55:17,040 --> 00:55:19,119
capital length then address family

1515
00:55:19,119 --> 00:55:21,359
address prefix address family address

1516
00:55:21,359 --> 00:55:23,920
prefix address family address prefix

1517
00:55:23,920 --> 00:55:25,760
okay i think i can probably get behind

1518
00:55:25,760 --> 00:55:27,440
that

1519
00:55:27,440 --> 00:55:28,799
it was like because i already had the

1520
00:55:28,799 --> 00:55:30,480
parser for the other one it was pretty

1521
00:55:30,480 --> 00:55:31,520
easy to

1522
00:55:31,520 --> 00:55:33,760
just put a while loop around it

1523
00:55:33,760 --> 00:55:36,240
and it worked

1524
00:55:38,000 --> 00:55:40,160
one thing i realized here is that in

1525
00:55:40,160 --> 00:55:43,040
this case departure fulfillment must be

1526
00:55:43,040 --> 00:55:44,960
okay maybe we need to be explicit about

1527
00:55:44,960 --> 00:55:45,920
that

1528
00:55:45,920 --> 00:55:47,760
because if you're asking for both a v4

1529
00:55:47,760 --> 00:55:50,000
and v6 address and the proxy can only

1530
00:55:50,000 --> 00:55:52,319
give you either of them yes you need to

1531
00:55:52,319 --> 00:55:54,640
be fine with that so yeah that's a good

1532
00:55:54,640 --> 00:55:56,480
we could add a sentence for that of just

1533
00:55:56,480 --> 00:55:57,760
saying like

1534
00:55:57,760 --> 00:55:58,960
remember

1535
00:55:58,960 --> 00:56:00,559
just because you ask for something does

1536
00:56:00,559 --> 00:56:02,480
not mean you get it and that is true for

1537
00:56:02,480 --> 00:56:06,319
both connect ip and life

1538
00:56:11,280 --> 00:56:13,839
on the other hand

1539
00:56:15,119 --> 00:56:16,400
well this is this says if you want

1540
00:56:16,400 --> 00:56:18,160
something ask for it but you may not get

1541
00:56:18,160 --> 00:56:20,559
it it this is really just reflective of

1542
00:56:20,559 --> 00:56:22,079
life

1543
00:56:22,079 --> 00:56:23,839
all right

1544
00:56:23,839 --> 00:56:25,599
so okay no

1545
00:56:25,599 --> 00:56:27,119
miriah

1546
00:56:27,119 --> 00:56:29,200
yes so i i wasn't at the editor

1547
00:56:29,200 --> 00:56:30,720
unfortunately but i read the pr and i

1548
00:56:30,720 --> 00:56:32,000
thought it very good but i just want to

1549
00:56:32,000 --> 00:56:34,559
confirm something so this doesn't assume

1550
00:56:34,559 --> 00:56:36,680
a little bit of like

1551
00:56:36,680 --> 00:56:39,359
pre-configuration knowledge about if you

1552
00:56:39,359 --> 00:56:41,440
if you are supposed to request an

1553
00:56:41,440 --> 00:56:42,839
address or not or

1554
00:56:42,839 --> 00:56:45,839
whatever i i think

1555
00:56:45,839 --> 00:56:46,799
so

1556
00:56:46,799 --> 00:56:49,119
by default you request an address if you

1557
00:56:49,119 --> 00:56:53,040
want to be able to descend yeah um

1558
00:56:53,040 --> 00:56:55,119
it it leaves it

1559
00:56:55,119 --> 00:56:57,839
open such that if you had some extremely

1560
00:56:57,839 --> 00:56:59,920
specialized deployment

1561
00:56:59,920 --> 00:57:01,760
where you were like completely out of

1562
00:57:01,760 --> 00:57:03,599
bed you you just know you always have

1563
00:57:03,599 --> 00:57:05,520
this it's a static i don't know what it

1564
00:57:05,520 --> 00:57:07,280
is like or potentially even if you have

1565
00:57:07,280 --> 00:57:08,960
an extension in the future

1566
00:57:08,960 --> 00:57:11,359
where you say i don't actually put in

1567
00:57:11,359 --> 00:57:12,880
source ips i let the proxy write my

1568
00:57:12,880 --> 00:57:14,559
source ip for me i know i don't need to

1569
00:57:14,559 --> 00:57:15,680
actually write anything here i don't

1570
00:57:15,680 --> 00:57:17,760
need to do it so yeah it gives us that

1571
00:57:17,760 --> 00:57:19,920
wiggle room but

1572
00:57:19,920 --> 00:57:21,280
implementing the base draft you will

1573
00:57:21,280 --> 00:57:22,880
almost certainly always send an address

1574
00:57:22,880 --> 00:57:25,040
request yeah but that also means like if

1575
00:57:25,040 --> 00:57:26,319
you want to do something else and you

1576
00:57:26,319 --> 00:57:28,160
want to have this pre-configuration in

1577
00:57:28,160 --> 00:57:29,839
there then it's kind of for all requests

1578
00:57:29,839 --> 00:57:31,760
like like because you cannot provide it

1579
00:57:31,760 --> 00:57:33,440
dynamically so like you have to just

1580
00:57:33,440 --> 00:57:34,240
like

1581
00:57:34,240 --> 00:57:37,200
statically configure it

1582
00:57:37,200 --> 00:57:38,480
well

1583
00:57:38,480 --> 00:57:42,559
so i mean just to be pedantic here

1584
00:57:42,559 --> 00:57:44,079
while

1585
00:57:44,079 --> 00:57:46,000
if you expect to get an address assigned

1586
00:57:46,000 --> 00:57:47,920
you should send an address request that

1587
00:57:47,920 --> 00:57:49,440
does not mean that you cannot get an

1588
00:57:49,440 --> 00:57:52,000
unsolicited unsolicited address to sign

1589
00:57:52,000 --> 00:57:53,920
nothing prevents any side from sending

1590
00:57:53,920 --> 00:57:55,599
that

1591
00:57:55,599 --> 00:57:57,200
i understand that it works i'm just

1592
00:57:57,200 --> 00:57:58,559
saying it's like it gives you less

1593
00:57:58,559 --> 00:58:00,720
flexibility or makes your configuration

1594
00:58:00,720 --> 00:58:01,760
a little bit harder i'm just trying to

1595
00:58:01,760 --> 00:58:04,240
understand well let me explain

1596
00:58:04,240 --> 00:58:07,119
so the the idea there is

1597
00:58:07,119 --> 00:58:10,880
say if think of it kind of like dhcp

1598
00:58:10,880 --> 00:58:13,280
if you don't ask the dhcp for an address

1599
00:58:13,280 --> 00:58:15,359
you're not going to get one and you're

1600
00:58:15,359 --> 00:58:17,040
probably not going to get you might not

1601
00:58:17,040 --> 00:58:18,720
necessarily get the one you ask for if

1602
00:58:18,720 --> 00:58:20,400
someone else has taken it

1603
00:58:20,400 --> 00:58:23,040
uh so the idea is if you're expecting it

1604
00:58:23,040 --> 00:58:24,960
to assign you an address you send that

1605
00:58:24,960 --> 00:58:27,119
but let's say you're a vpn and in your

1606
00:58:27,119 --> 00:58:29,680
via config file you put a static ip

1607
00:58:29,680 --> 00:58:31,359
address

1608
00:58:31,359 --> 00:58:32,799
you're not going to send dhcp over the

1609
00:58:32,799 --> 00:58:36,559
vpn so that's what it's there for

1610
00:58:36,559 --> 00:58:38,559
it kind of replicates traditional ip

1611
00:58:38,559 --> 00:58:40,400
networking right or if you've agreed

1612
00:58:40,400 --> 00:58:41,839
with your vpn that you just put all

1613
00:58:41,839 --> 00:58:43,280
zeroes for your search address and it

1614
00:58:43,280 --> 00:58:45,200
rewrites your packets for you that's

1615
00:58:45,200 --> 00:58:48,240
also fine okay that's more insane but

1616
00:58:48,240 --> 00:58:48,839
i

1617
00:58:48,839 --> 00:58:51,520
mean as some fancy compression thing

1618
00:58:51,520 --> 00:58:52,960
you're just like i just don't care about

1619
00:58:52,960 --> 00:58:55,040
my addresses give me one

1620
00:58:55,040 --> 00:58:56,480
whatever yeah always asking is like

1621
00:58:56,480 --> 00:58:58,079
basically if you have this configuration

1622
00:58:58,079 --> 00:58:59,520
then basically you have to take it like

1623
00:58:59,520 --> 00:59:01,040
for all your requests like it's not like

1624
00:59:01,040 --> 00:59:04,400
you can do it on a request basis

1625
00:59:05,760 --> 00:59:06,880
uh

1626
00:59:06,880 --> 00:59:08,799
yeah so so first of all does this add a

1627
00:59:08,799 --> 00:59:10,160
round trip to

1628
00:59:10,160 --> 00:59:12,319
the time before i can send my first

1629
00:59:12,319 --> 00:59:14,240
packet uh no

1630
00:59:14,240 --> 00:59:16,480
but it's a good question so

1631
00:59:16,480 --> 00:59:19,359
um

1632
00:59:19,359 --> 00:59:21,200
this goes in the same flight

1633
00:59:21,200 --> 00:59:23,040
as your request so like i mean it's just

1634
00:59:23,040 --> 00:59:24,480
like the capsule is back to back with

1635
00:59:24,480 --> 00:59:26,880
your request you don't wait

1636
00:59:26,880 --> 00:59:28,160
what source

1637
00:59:28,160 --> 00:59:32,480
do i use so connect ip already has

1638
00:59:32,480 --> 00:59:33,839
an issue

1639
00:59:33,839 --> 00:59:36,319
with knowing what source ip to send from

1640
00:59:36,319 --> 00:59:38,400
in general um

1641
00:59:38,400 --> 00:59:39,440
so

1642
00:59:39,440 --> 00:59:41,599
actually in some ways this makes it

1643
00:59:41,599 --> 00:59:43,920
better so if i'm thinking of like full

1644
00:59:43,920 --> 00:59:46,799
tunnel vpn or whatever i don't know but

1645
00:59:46,799 --> 00:59:48,480
like

1646
00:59:48,480 --> 00:59:50,240
if i'm requesting a specific address

1647
00:59:50,240 --> 00:59:51,520
because let's say i knew a specific

1648
00:59:51,520 --> 00:59:53,119
address i had received on another stream

1649
00:59:53,119 --> 00:59:54,640
previously

1650
00:59:54,640 --> 00:59:56,240
i could you know optimistically say

1651
00:59:56,240 --> 00:59:57,839
please give me that same address i will

1652
00:59:57,839 --> 00:59:59,359
send my initial packets from it you may

1653
00:59:59,359 --> 01:00:00,720
drop them you may give me a different

1654
01:00:00,720 --> 01:00:02,000
address

1655
01:00:02,000 --> 01:00:03,520
and so like it can fail over to

1656
01:00:03,520 --> 01:00:05,440
something longer but

1657
01:00:05,440 --> 01:00:07,280
this does not make anything

1658
01:00:07,280 --> 01:00:09,680
worse certainly with regards to when you

1659
01:00:09,680 --> 01:00:12,319
can start sending packets

1660
01:00:12,319 --> 01:00:13,280
uh

1661
01:00:13,280 --> 01:00:15,440
okay i think uh

1662
01:00:15,440 --> 01:00:17,520
i would i would just like like it to be

1663
01:00:17,520 --> 01:00:20,160
possible to just send packets on the the

1664
01:00:20,160 --> 01:00:22,079
first flight basically if you're willing

1665
01:00:22,079 --> 01:00:24,720
to tolerate nat but i agree

1666
01:00:24,720 --> 01:00:27,520
uh okay you can like but

1667
01:00:27,520 --> 01:00:29,440
they may be dropped if you choose a bad

1668
01:00:29,440 --> 01:00:30,880
source address

1669
01:00:30,880 --> 01:00:33,599
or you or we can also do a thing where

1670
01:00:33,599 --> 01:00:35,359
the proxy can rewrite your source

1671
01:00:35,359 --> 01:00:37,040
address for you if it doesn't like it

1672
01:00:37,040 --> 01:00:38,880
regardless of that i i looked at the

1673
01:00:38,880 --> 01:00:41,040
issue and i noted that there was a this

1674
01:00:41,040 --> 01:00:44,000
question of um the prefix length so it

1675
01:00:44,000 --> 01:00:45,920
seems like maybe this isn't entirely

1676
01:00:45,920 --> 01:00:48,559
settled but what is the um

1677
01:00:48,559 --> 01:00:50,799
what is the rule for the prefix length

1678
01:00:50,799 --> 01:00:54,000
on the all zeros um so the capsules

1679
01:00:54,000 --> 01:00:55,760
themselves yeah which you said that our

1680
01:00:55,760 --> 01:00:58,160
address requests like the address assign

1681
01:00:58,160 --> 01:01:00,319
yeah are of a structure that is repeated

1682
01:01:00,319 --> 01:01:01,280
struct

1683
01:01:01,280 --> 01:01:02,960
with protocol

1684
01:01:02,960 --> 01:01:05,119
address prefix length right

1685
01:01:05,119 --> 01:01:07,680
and so you specify in your request

1686
01:01:07,680 --> 01:01:10,319
the prefix length so can i set up if

1687
01:01:10,319 --> 01:01:11,200
it's

1688
01:01:11,200 --> 01:01:13,119
it seems like all zeros means doesn't

1689
01:01:13,119 --> 01:01:14,480
have a preference

1690
01:01:14,480 --> 01:01:15,760
you see it means that i don't have a

1691
01:01:15,760 --> 01:01:17,359
preference for the specific address i'm

1692
01:01:17,359 --> 01:01:18,880
going to receive but i can express a

1693
01:01:18,880 --> 01:01:20,240
preference for the prefix length i would

1694
01:01:20,240 --> 01:01:22,480
like to receive i think that is not

1695
01:01:22,480 --> 01:01:24,559
compatible with the

1696
01:01:24,559 --> 01:01:27,200
ipv6 specification maybe not with ipv4

1697
01:01:27,200 --> 01:01:29,040
either

1698
01:01:29,040 --> 01:01:30,079
how

1699
01:01:30,079 --> 01:01:34,960
the ipv6 reserves is all zeros slash 128

1700
01:01:34,960 --> 01:01:37,520
that is the only reserved address for

1701
01:01:37,520 --> 01:01:38,960
this purpose and

1702
01:01:38,960 --> 01:01:40,559
so this is this is not expressing an

1703
01:01:40,559 --> 01:01:43,280
address so think of it like so in ipsec

1704
01:01:43,280 --> 01:01:45,119
it's like a traffic selector

1705
01:01:45,119 --> 01:01:48,960
this is a this is a way of expressing

1706
01:01:48,960 --> 01:01:50,359
uh

1707
01:01:50,359 --> 01:01:53,839
desired range right it is not like i'm

1708
01:01:53,839 --> 01:01:55,599
not saying i own this address like right

1709
01:01:55,599 --> 01:01:59,599
but zero zero zero 64 is a valid sub

1710
01:01:59,599 --> 01:02:04,000
well uh valid subnet well

1711
01:02:04,000 --> 01:02:05,680
uh or at least

1712
01:02:05,680 --> 01:02:07,359
if you're allowed to assign that the

1713
01:02:07,359 --> 01:02:10,079
other side may assign it to you

1714
01:02:10,079 --> 01:02:11,760
right but now there's an ambiguity am i

1715
01:02:11,760 --> 01:02:14,400
actually asking for it or am i asking am

1716
01:02:14,400 --> 01:02:16,799
i am i is zeros here a dummy address and

1717
01:02:16,799 --> 01:02:20,880
i'm not asking for it for real or

1718
01:02:20,880 --> 01:02:22,720
so sorry to jump in on the wire format

1719
01:02:22,720 --> 01:02:27,119
here you send 128 bits here right so

1720
01:02:27,119 --> 01:02:29,760
sending all zero is a dummy yes that is

1721
01:02:29,760 --> 01:02:31,440
a special thing and that happens to be

1722
01:02:31,440 --> 01:02:32,599
resolved

1723
01:02:32,599 --> 01:02:34,799
reserved okay and hopefully that

1724
01:02:34,799 --> 01:02:37,440
resolves things

1725
01:02:37,520 --> 01:02:38,720
uh

1726
01:02:38,720 --> 01:02:41,200
so so what you're saying is that if i've

1727
01:02:41,200 --> 01:02:44,079
like if i if i want to request

1728
01:02:44,079 --> 01:02:45,760
the

1729
01:02:45,760 --> 01:02:47,359
okay 0 0

1730
01:02:47,359 --> 01:02:49,599
64 i would send

1731
01:02:49,599 --> 01:02:50,880
64

1732
01:02:50,880 --> 01:02:53,440
bits of zero and then 64 bits of one

1733
01:02:53,440 --> 01:02:54,640
okay

1734
01:02:54,640 --> 01:02:57,200
i think that i can i can retract this we

1735
01:02:57,200 --> 01:03:00,000
can and say this is safe because

1736
01:03:00,000 --> 01:03:02,319
there is at least one reserved ip

1737
01:03:02,319 --> 01:03:04,880
address in any range who's whose ip

1738
01:03:04,880 --> 01:03:07,039
identifiers all zeros and therefore any

1739
01:03:07,039 --> 01:03:08,960
any such subnet is non-allocatable it's

1740
01:03:08,960 --> 01:03:10,799
essentially saying that this wild card

1741
01:03:10,799 --> 01:03:12,880
must be all zeros all the way through to

1742
01:03:12,880 --> 01:03:15,440
the end fine

1743
01:03:15,440 --> 01:03:17,920
all right uh jonathan john athletics i

1744
01:03:17,920 --> 01:03:20,000
was um

1745
01:03:20,000 --> 01:03:21,680
slightly

1746
01:03:21,680 --> 01:03:23,280
my eyebrows very slightly that when you

1747
01:03:23,280 --> 01:03:24,400
said you could

1748
01:03:24,400 --> 01:03:27,520
send a unsolicited address of sign even

1749
01:03:27,520 --> 01:03:28,960
if you didn't get an adder's request

1750
01:03:28,960 --> 01:03:30,799
because i wonder what happens if a

1751
01:03:30,799 --> 01:03:32,640
client sends address a sign unsolicited

1752
01:03:32,640 --> 01:03:35,200
to a proxy

1753
01:03:35,200 --> 01:03:37,039
it would ignore it

1754
01:03:37,039 --> 01:03:39,680
i mean is there a way to say that

1755
01:03:39,680 --> 01:03:41,839
i mean it would i mean i guess

1756
01:03:41,839 --> 01:03:43,039
should there be a way of saying if you

1757
01:03:43,039 --> 01:03:44,640
get an address assigned when you're not

1758
01:03:44,640 --> 01:03:46,559
able to be have your address assigned

1759
01:03:46,559 --> 01:03:48,400
you should does it explicitly say that

1760
01:03:48,400 --> 01:03:50,160
close the stream or does it need to say

1761
01:03:50,160 --> 01:03:51,359
that i don't

1762
01:03:51,359 --> 01:03:53,359
i don't think so um so we've talked

1763
01:03:53,359 --> 01:03:57,359
about error handling in general um

1764
01:03:57,520 --> 01:03:58,720
i i think it's

1765
01:03:58,720 --> 01:04:00,240
certainly plausible that some future

1766
01:04:00,240 --> 01:04:01,599
extension that wants more complex

1767
01:04:01,599 --> 01:04:03,680
semantics for different types of

1768
01:04:03,680 --> 01:04:05,920
assignments could add some oh i didn't i

1769
01:04:05,920 --> 01:04:07,599
rejected this capsule i rejected that

1770
01:04:07,599 --> 01:04:08,880
but i think

1771
01:04:08,880 --> 01:04:10,880
if you do something like try to assign

1772
01:04:10,880 --> 01:04:14,240
your server address

1773
01:04:14,240 --> 01:04:16,400
it just decides if it either ignores it

1774
01:04:16,400 --> 01:04:18,240
or says you're a misbehaving client and

1775
01:04:18,240 --> 01:04:20,959
closes on you

1776
01:04:21,039 --> 01:04:23,839
i don't know martin what do you think

1777
01:04:23,839 --> 01:04:26,480
yeah i think many things um but probably

1778
01:04:26,480 --> 01:04:27,599
not about that i was thinking about

1779
01:04:27,599 --> 01:04:30,640
another question that i've had

1780
01:04:31,359 --> 01:04:33,598
hmm

1781
01:04:34,000 --> 01:04:35,839
yeah

1782
01:04:35,839 --> 01:04:37,520
so just because you send an address

1783
01:04:37,520 --> 01:04:38,799
assigned it doesn't mean that you get

1784
01:04:38,799 --> 01:04:40,880
the address or sign so if you receive an

1785
01:04:40,880 --> 01:04:42,880
address assigned you just should send a

1786
01:04:42,880 --> 01:04:45,039
request no sorry the other way around if

1787
01:04:45,039 --> 01:04:46,799
you get a request

1788
01:04:46,799 --> 01:04:48,240
doesn't mean that you actually get that

1789
01:04:48,240 --> 01:04:50,319
ip address right so if you if you get a

1790
01:04:50,319 --> 01:04:51,920
request you should just send in a sign

1791
01:04:51,920 --> 01:04:53,440
with the ap address that you assigned

1792
01:04:53,440 --> 01:04:55,680
yes and vice versa like if if the client

1793
01:04:55,680 --> 01:04:57,520
sends a proxy like i've assigned you

1794
01:04:57,520 --> 01:04:58,960
this address what you're telling proxy

1795
01:04:58,960 --> 01:04:59,760
is

1796
01:04:59,760 --> 01:05:01,839
hey i'm a client and i will accept if

1797
01:05:01,839 --> 01:05:03,599
you send packets to me from that address

1798
01:05:03,599 --> 01:05:05,359
like proxy's like okay i don't really

1799
01:05:05,359 --> 01:05:06,480
care i'm not going to send anything to

1800
01:05:06,480 --> 01:05:08,480
you anyway from that address but thanks

1801
01:05:08,480 --> 01:05:10,400
for letting me know

1802
01:05:10,400 --> 01:05:11,520
it's like you can give out your phone

1803
01:05:11,520 --> 01:05:13,280
number to whoever you want

1804
01:05:13,280 --> 01:05:16,559
but it doesn't mean they'll call you

1805
01:05:17,839 --> 01:05:19,760
so another way of thinking about it

1806
01:05:19,760 --> 01:05:21,920
of that is the client says i here's an

1807
01:05:21,920 --> 01:05:23,599
address or sign can you can you please

1808
01:05:23,599 --> 01:05:26,240
advertise this over bgp and

1809
01:05:26,240 --> 01:05:28,400
for me and

1810
01:05:28,400 --> 01:05:30,880
and establish a route to it

1811
01:05:30,880 --> 01:05:34,640
i think the answer is just no yeah

1812
01:05:34,640 --> 01:05:37,359
the question i got up to ask was um

1813
01:05:37,359 --> 01:05:39,920
will you always receive an assign in

1814
01:05:39,920 --> 01:05:42,000
response to a request oh that's a good

1815
01:05:42,000 --> 01:05:44,079
one can you can you expect to see

1816
01:05:44,079 --> 01:05:45,760
some sort of indication that that when

1817
01:05:45,760 --> 01:05:47,599
you ask for something

1818
01:05:47,599 --> 01:05:48,880
the the

1819
01:05:48,880 --> 01:05:51,200
server has acknowledged that because

1820
01:05:51,200 --> 01:05:52,559
there's

1821
01:05:52,559 --> 01:05:54,319
this particular arrangement has this

1822
01:05:54,319 --> 01:05:57,039
weird property whereby in a lot of cases

1823
01:05:57,039 --> 01:05:59,039
the server is just going to go here have

1824
01:05:59,039 --> 01:06:00,400
a bunch of addresses as soon as the

1825
01:06:00,400 --> 01:06:02,319
connection is established

1826
01:06:02,319 --> 01:06:05,599
and um

1827
01:06:05,599 --> 01:06:07,520
it doesn't really depend on seeing a a

1828
01:06:07,520 --> 01:06:10,640
request in that in that case right

1829
01:06:10,640 --> 01:06:12,400
well so

1830
01:06:12,400 --> 01:06:13,280
let

1831
01:06:13,280 --> 01:06:15,760
the way i think about it currently is

1832
01:06:15,760 --> 01:06:17,200
that you know i think we're pretty clear

1833
01:06:17,200 --> 01:06:19,200
that

1834
01:06:19,200 --> 01:06:21,680
you are not allowed to send

1835
01:06:21,680 --> 01:06:23,520
well sorry you are not guaranteed that

1836
01:06:23,520 --> 01:06:27,039
packets you send will be accepted

1837
01:06:27,039 --> 01:06:29,200
until you have received both an assign

1838
01:06:29,200 --> 01:06:30,880
and a route advertisement

1839
01:06:30,880 --> 01:06:32,640
and so on the client you can wait around

1840
01:06:32,640 --> 01:06:34,640
for those and essentially like i don't

1841
01:06:34,640 --> 01:06:36,079
know if i don't get it immediately if

1842
01:06:36,079 --> 01:06:37,440
it's because you're taking a while to

1843
01:06:37,440 --> 01:06:39,760
actually figure out what address i have

1844
01:06:39,760 --> 01:06:41,920
i'll have to have some time out there i

1845
01:06:41,920 --> 01:06:43,200
know it's a reliable stream so i know

1846
01:06:43,200 --> 01:06:44,880
you received the thing

1847
01:06:44,880 --> 01:06:48,720
so we can say like the server

1848
01:06:48,720 --> 01:06:50,559
must eventually reply once it can

1849
01:06:50,559 --> 01:06:51,839
actually assign it otherwise it should

1850
01:06:51,839 --> 01:06:53,680
close the stream to be nice

1851
01:06:53,680 --> 01:06:55,359
so i think this is a bug of something

1852
01:06:55,359 --> 01:06:56,240
that we

1853
01:06:56,240 --> 01:06:57,920
accidentally glazed over when we were

1854
01:06:57,920 --> 01:06:59,680
talking about this okay i think when we

1855
01:06:59,680 --> 01:07:01,680
made it such that every ad i think in

1856
01:07:01,680 --> 01:07:03,520
the previous version of a draft address

1857
01:07:03,520 --> 01:07:04,960
request always got an address assigned

1858
01:07:04,960 --> 01:07:06,000
response but now that we've made it

1859
01:07:06,000 --> 01:07:07,839
repeated and fallible i think we need to

1860
01:07:07,839 --> 01:07:09,599
define that if you get a request that

1861
01:07:09,599 --> 01:07:10,799
cannot be satisfied because we want to

1862
01:07:10,799 --> 01:07:12,319
give you no addresses back whatsoever we

1863
01:07:12,319 --> 01:07:15,839
still need to indicate okay that's fine

1864
01:07:15,839 --> 01:07:17,119
or something which i think solves

1865
01:07:17,119 --> 01:07:19,039
martin's problems yes so yeah it should

1866
01:07:19,039 --> 01:07:21,200
be paired with a response

1867
01:07:21,200 --> 01:07:23,839
um the response could be like if i if i

1868
01:07:23,839 --> 01:07:25,039
send multiple requests you could just

1869
01:07:25,039 --> 01:07:26,640
send no you still have the addresses you

1870
01:07:26,640 --> 01:07:29,280
had before get over it

1871
01:07:29,280 --> 01:07:30,400
um

1872
01:07:30,400 --> 01:07:32,400
but you could also just wait like you

1873
01:07:32,400 --> 01:07:33,680
probably do have to handle a timeout

1874
01:07:33,680 --> 01:07:35,359
where this side just isn't responding to

1875
01:07:35,359 --> 01:07:38,480
you so i i think there's that that helps

1876
01:07:38,480 --> 01:07:40,400
i don't think it completely addresses

1877
01:07:40,400 --> 01:07:42,720
the the suite of problems that

1878
01:07:42,720 --> 01:07:45,680
are now possible so um

1879
01:07:45,680 --> 01:07:48,480
in the case that you ask for say you ask

1880
01:07:48,480 --> 01:07:50,480
for one address or two addresses and the

1881
01:07:50,480 --> 01:07:52,319
server says no you can't have either of

1882
01:07:52,319 --> 01:07:54,480
them i think it's reasonable to have

1883
01:07:54,480 --> 01:07:56,400
either an error message coming back or

1884
01:07:56,400 --> 01:08:00,160
even just address a sign empty yeah

1885
01:08:00,160 --> 01:08:03,039
yes which that's perfectly reasonable um

1886
01:08:03,039 --> 01:08:05,520
but it is very very difficult to

1887
01:08:05,520 --> 01:08:07,760
distinguish between a positive address

1888
01:08:07,760 --> 01:08:09,039
assignment for something that you

1889
01:08:09,039 --> 01:08:11,039
requested um

1890
01:08:11,039 --> 01:08:12,720
particularly in the zero zero case where

1891
01:08:12,720 --> 01:08:15,119
you you really don't care what you get

1892
01:08:15,119 --> 01:08:17,040
and a spontaneous

1893
01:08:17,040 --> 01:08:19,839
advertisement of uh addresses that that

1894
01:08:19,839 --> 01:08:21,759
are coming through does it

1895
01:08:21,759 --> 01:08:23,359
matter

1896
01:08:23,359 --> 01:08:24,960
uh and and

1897
01:08:24,960 --> 01:08:28,080
jonathan behind me is saying request ids

1898
01:08:28,080 --> 01:08:29,439
um

1899
01:08:29,439 --> 01:08:31,359
so

1900
01:08:31,359 --> 01:08:33,520
from a client perspective do i am i

1901
01:08:33,520 --> 01:08:35,839
still waiting is is still a question

1902
01:08:35,839 --> 01:08:37,120
that i cannot

1903
01:08:37,120 --> 01:08:39,359
resolve except for the empty case

1904
01:08:39,359 --> 01:08:41,120
because the empty case will never happen

1905
01:08:41,120 --> 01:08:43,359
except in response to that that's true

1906
01:08:43,359 --> 01:08:44,399
but so

1907
01:08:44,399 --> 01:08:45,759
what one property of these i want to

1908
01:08:45,759 --> 01:08:47,759
make sure we're clear on is that

1909
01:08:47,759 --> 01:08:50,000
an address assigned capsule

1910
01:08:50,000 --> 01:08:51,040
is

1911
01:08:51,040 --> 01:08:52,399
maybe we should be clear about this like

1912
01:08:52,399 --> 01:08:53,600
inclusive

1913
01:08:53,600 --> 01:08:55,759
of all of the addresses

1914
01:08:55,759 --> 01:08:58,238
you are assigned now

1915
01:08:58,238 --> 01:09:00,640
like it's cumulative so if we have it be

1916
01:09:00,640 --> 01:09:02,640
cumulative which i think we probably

1917
01:09:02,640 --> 01:09:03,920
need to clarify

1918
01:09:03,920 --> 01:09:05,600
then it is unambiguous that when you

1919
01:09:05,600 --> 01:09:07,359
receive it this is this is all of the

1920
01:09:07,359 --> 01:09:09,198
addresses you have

1921
01:09:09,198 --> 01:09:11,520
and so it doesn't really matter

1922
01:09:11,520 --> 01:09:12,799
at that point like if there was a race

1923
01:09:12,799 --> 01:09:14,319
like maybe i'll end up getting two of

1924
01:09:14,319 --> 01:09:16,000
them that are duplicates if you want to

1925
01:09:16,000 --> 01:09:17,520
generate an extra one in response to me

1926
01:09:17,520 --> 01:09:18,238
but

1927
01:09:18,238 --> 01:09:19,600
they are

1928
01:09:19,600 --> 01:09:21,439
fully describing

1929
01:09:21,439 --> 01:09:24,238
and at that point if

1930
01:09:24,238 --> 01:09:26,000
the client has requested an arbitrary

1931
01:09:26,000 --> 01:09:27,839
address address

1932
01:09:27,839 --> 01:09:30,080
you could say here no

1933
01:09:30,080 --> 01:09:32,560
one instead so say i request one address

1934
01:09:32,560 --> 01:09:33,920
and it's an arbitrary one i don't care

1935
01:09:33,920 --> 01:09:36,960
which one it is i get an address back

1936
01:09:36,960 --> 01:09:39,120
that's how do i distinguish between that

1937
01:09:39,120 --> 01:09:40,719
being a spontaneous advertisement on the

1938
01:09:40,719 --> 01:09:43,759
part of the server and a response to my

1939
01:09:43,759 --> 01:09:44,960
request

1940
01:09:44,960 --> 01:09:46,399
i would argue that you wouldn't care and

1941
01:09:46,399 --> 01:09:48,319
you may like you may get another

1942
01:09:48,319 --> 01:09:49,839
response that's just a duplicate of that

1943
01:09:49,839 --> 01:09:51,920
capsule like by the way you got this and

1944
01:09:51,920 --> 01:09:53,439
you'd be like oh i guess that first one

1945
01:09:53,439 --> 01:09:55,120
was spontaneous but i've already moved

1946
01:09:55,120 --> 01:09:56,960
on

1947
01:09:56,960 --> 01:09:58,960
okay i think i can probably see how that

1948
01:09:58,960 --> 01:10:01,120
would work out yeah we should clarify

1949
01:10:01,120 --> 01:10:02,239
that none of that was written down i

1950
01:10:02,239 --> 01:10:03,600
couldn't answer yes it was it was not

1951
01:10:03,600 --> 01:10:04,960
written down it was not written down

1952
01:10:04,960 --> 01:10:06,560
before

1953
01:10:06,560 --> 01:10:08,800
thank you

1954
01:10:08,800 --> 01:10:12,640
um i want to try to respond to ben

1955
01:10:12,640 --> 01:10:15,840
ask about the crt cases initially i

1956
01:10:15,840 --> 01:10:18,000
don't think they work currently i don't

1957
01:10:18,000 --> 01:10:20,000
think you can do i think we need some

1958
01:10:20,000 --> 01:10:22,000
type of extension saying that hey i'm

1959
01:10:22,000 --> 01:10:23,360
going to send your pack of resource

1960
01:10:23,360 --> 01:10:25,360
address please rewrite i think this

1961
01:10:25,360 --> 01:10:26,960
actually ends up being something you

1962
01:10:26,960 --> 01:10:28,880
need to signal explicit

1963
01:10:28,880 --> 01:10:31,360
because otherwise you end up in or use

1964
01:10:31,360 --> 01:10:32,880
the zero zero or something you need to

1965
01:10:32,880 --> 01:10:34,239
we need to specify something for we

1966
01:10:34,239 --> 01:10:36,800
can't leave it as it now so i well i i

1967
01:10:36,800 --> 01:10:38,640
believe that you you could absolutely

1968
01:10:38,640 --> 01:10:40,960
specify an extension that or or a

1969
01:10:40,960 --> 01:10:42,640
behavior in here if we want to add it in

1970
01:10:42,640 --> 01:10:43,600
that says

1971
01:10:43,600 --> 01:10:46,080
if i send from zero zero i assume it's

1972
01:10:46,080 --> 01:10:47,199
going to be the default thing you

1973
01:10:47,199 --> 01:10:48,400
assigned me but honestly i don't even

1974
01:10:48,400 --> 01:10:50,320
know if it's v4 v6 i think it's really

1975
01:10:50,320 --> 01:10:52,400
messy yeah

1976
01:10:52,400 --> 01:10:54,080
but what i think the one thing you can

1977
01:10:54,080 --> 01:10:54,800
do

1978
01:10:54,800 --> 01:10:56,880
now is

1979
01:10:56,880 --> 01:10:59,280
if you know about an address

1980
01:10:59,280 --> 01:11:01,520
you could request the address

1981
01:11:01,520 --> 01:11:03,280
yes you you know you have a target

1982
01:11:03,280 --> 01:11:04,560
because that's a specific address you

1983
01:11:04,560 --> 01:11:06,320
have to connect to you could try sending

1984
01:11:06,320 --> 01:11:08,480
on it there's a chance that they will

1985
01:11:08,480 --> 01:11:10,480
assign you no address or a different

1986
01:11:10,480 --> 01:11:11,520
address

1987
01:11:11,520 --> 01:11:12,480
and then

1988
01:11:12,480 --> 01:11:13,679
that was the case where that you'll have

1989
01:11:13,679 --> 01:11:15,120
to retransmit your packet or like you

1990
01:11:15,120 --> 01:11:17,040
know whatever you do normally but that

1991
01:11:17,040 --> 01:11:19,280
one gets through yeah i understand

1992
01:11:19,280 --> 01:11:20,800
that's the case okay

1993
01:11:20,800 --> 01:11:22,560
that is the only case where you get zero

1994
01:11:22,560 --> 01:11:25,040
yeah yeah well yeah but i think when you

1995
01:11:25,040 --> 01:11:26,880
responded to them before

1996
01:11:26,880 --> 01:11:28,800
it sounded much much wider that basic

1997
01:11:28,800 --> 01:11:30,159
anything would work and i think that's

1998
01:11:30,159 --> 01:11:31,120
wrong

1999
01:11:31,120 --> 01:11:32,880
you need to have some

2000
01:11:32,880 --> 01:11:34,960
really high probability that you know

2001
01:11:34,960 --> 01:11:36,640
what the address is going to be to make

2002
01:11:36,640 --> 01:11:38,800
this work or we need to have something

2003
01:11:38,800 --> 01:11:40,480
either specified behavior or an

2004
01:11:40,480 --> 01:11:42,320
extension yeah i mean well it's like i

2005
01:11:42,320 --> 01:11:43,760
think when i saw the more open things

2006
01:11:43,760 --> 01:11:46,159
like if you have the site-to-site vpn

2007
01:11:46,159 --> 01:11:48,080
case where yeah yeah sure they they have

2008
01:11:48,080 --> 01:11:49,440
their own computers that they assign to

2009
01:11:49,440 --> 01:11:51,040
themselves then like

2010
01:11:51,040 --> 01:11:51,760
yeah

2011
01:11:51,760 --> 01:11:53,840
in a normal vpn case when you are saying

2012
01:11:53,840 --> 01:11:55,360
hey give me an address

2013
01:11:55,360 --> 01:11:57,120
you have to wait for the response before

2014
01:11:57,120 --> 01:11:58,719
you start selling packets which is the

2015
01:11:58,719 --> 01:12:01,040
case with all remote access vpns today

2016
01:12:01,040 --> 01:12:04,400
yes anyway but

2017
01:12:04,400 --> 01:12:05,920
you know if this is a large enough

2018
01:12:05,920 --> 01:12:07,760
tunnel that this is like this is i'm

2019
01:12:07,760 --> 01:12:09,040
going to be able to send my entire

2020
01:12:09,040 --> 01:12:11,199
device's ip traffic over this that one

2021
01:12:11,199 --> 01:12:13,520
rtt is i think okay and if i'm doing

2022
01:12:13,520 --> 01:12:15,199
very specific flows i probably have a

2023
01:12:15,199 --> 01:12:17,120
previous address i can request

2024
01:12:17,120 --> 01:12:18,400
so

2025
01:12:18,400 --> 01:12:20,400
yeah benchmarks i i don't i still don't

2026
01:12:20,400 --> 01:12:21,760
think it actually

2027
01:12:21,760 --> 01:12:23,360
works uh

2028
01:12:23,360 --> 01:12:25,600
what like the

2029
01:12:25,600 --> 01:12:27,920
okay so so imagine that

2030
01:12:27,920 --> 01:12:31,679
i i'm trying to optimistically send uh

2031
01:12:31,679 --> 01:12:34,080
before i have the address assigned so i

2032
01:12:34,080 --> 01:12:36,320
set my source address to all zeros i'm

2033
01:12:36,320 --> 01:12:38,239
not saying that case and then i get that

2034
01:12:38,239 --> 01:12:39,840
so that that's then using extension to

2035
01:12:39,840 --> 01:12:42,560
do something like that so okay so then

2036
01:12:42,560 --> 01:12:44,080
yeah so right now then there's there's

2037
01:12:44,080 --> 01:12:46,960
no way to just like connect and and

2038
01:12:46,960 --> 01:12:48,560
immediately send an ip packet in the way

2039
01:12:48,560 --> 01:12:50,560
that there isn't connect udp

2040
01:12:50,560 --> 01:12:52,320
no if i have a previous address so let's

2041
01:12:52,320 --> 01:12:54,880
say i have one quick tunnel

2042
01:12:54,880 --> 01:12:56,800
to my connect ip server and i've

2043
01:12:56,800 --> 01:12:59,280
previously opened other streams i've

2044
01:12:59,280 --> 01:13:01,120
already opened i see a

2045
01:13:01,120 --> 01:13:03,520
an sctp stream to that host and i've

2046
01:13:03,520 --> 01:13:05,760
opened an sctp stream to this other host

2047
01:13:05,760 --> 01:13:07,360
i can just say give me another smp

2048
01:13:07,360 --> 01:13:10,400
stream from the same address

2049
01:13:10,400 --> 01:13:12,640
i mean i guess you can try but yes

2050
01:13:12,640 --> 01:13:14,320
there's no reason to expect that the

2051
01:13:14,320 --> 01:13:16,159
client would be assigned consistent ip

2052
01:13:16,159 --> 01:13:18,000
addresses across those different tunnels

2053
01:13:18,000 --> 01:13:20,080
but you are requesting it and so so for

2054
01:13:20,080 --> 01:13:22,000
example like even the way we use connect

2055
01:13:22,000 --> 01:13:24,400
connect udp today with our mass servers

2056
01:13:24,400 --> 01:13:25,840
like there are lots of reasons on the

2057
01:13:25,840 --> 01:13:28,320
web for within one tunnel to give a

2058
01:13:28,320 --> 01:13:29,760
consistent ip address because lots of

2059
01:13:29,760 --> 01:13:31,520
websites for example will freak out if

2060
01:13:31,520 --> 01:13:33,920
you start changing ip addresses on every

2061
01:13:33,920 --> 01:13:34,960
single connection within different

2062
01:13:34,960 --> 01:13:36,400
resources

2063
01:13:36,400 --> 01:13:37,440
um

2064
01:13:37,440 --> 01:13:38,159
so

2065
01:13:38,159 --> 01:13:39,840
i think it is

2066
01:13:39,840 --> 01:13:42,400
reasonable and this may be kind of a

2067
01:13:42,400 --> 01:13:44,080
deployment specifically like the the

2068
01:13:44,080 --> 01:13:46,159
sides need to learn what is consistent

2069
01:13:46,159 --> 01:13:47,679
in behavior but i think it's very

2070
01:13:47,679 --> 01:13:49,920
reasonable for a proxy to

2071
01:13:49,920 --> 01:13:52,159
be able to assign you a consistent ip

2072
01:13:52,159 --> 01:13:56,000
address as long as it has it available

2073
01:13:56,159 --> 01:13:57,199
uh

2074
01:13:57,199 --> 01:13:59,840
okay i mean we're way outside the http

2075
01:13:59,840 --> 01:14:02,640
resource model now right we're like

2076
01:14:02,640 --> 01:14:05,040
sorry i mean i met more different

2077
01:14:05,040 --> 01:14:06,640
hosts like like for example like there

2078
01:14:06,640 --> 01:14:08,640
are pages where like i

2079
01:14:08,640 --> 01:14:10,159
load the main page and then they have

2080
01:14:10,159 --> 01:14:11,360
their login resources which is a

2081
01:14:11,360 --> 01:14:12,480
different host name and if it comes from

2082
01:14:12,480 --> 01:14:14,080
a different ip address they scale it i

2083
01:14:14,080 --> 01:14:16,239
understand i just mean like every every

2084
01:14:16,239 --> 01:14:18,880
targeted connect ip tunnel is a separate

2085
01:14:18,880 --> 01:14:22,239
http resource in principle they're like

2086
01:14:22,239 --> 01:14:24,320
there's no particular reason why they

2087
01:14:24,320 --> 01:14:26,000
should have this like state correlation

2088
01:14:26,000 --> 01:14:27,920
across them where they somehow which is

2089
01:14:27,920 --> 01:14:29,600
why it's a request

2090
01:14:29,600 --> 01:14:31,199
like we can't guarantee it but

2091
01:14:31,199 --> 01:14:33,120
optimistically

2092
01:14:33,120 --> 01:14:35,760
that's something i mean i think i think

2093
01:14:35,760 --> 01:14:37,679
you're right that it it's not

2094
01:14:37,679 --> 01:14:40,640
it's probably just uh not that important

2095
01:14:40,640 --> 01:14:42,719
i don't personally really know why the

2096
01:14:42,719 --> 01:14:44,239
why you would want to target targeted

2097
01:14:44,239 --> 01:14:45,760
connect ip tunnel

2098
01:14:45,760 --> 01:14:46,960
uh anyway

2099
01:14:46,960 --> 01:14:49,199
but uh i think we should just be very

2100
01:14:49,199 --> 01:14:51,440
clear that that basically

2101
01:14:51,440 --> 01:14:53,760
uh zero rtt is not

2102
01:14:53,760 --> 01:14:54,840
really

2103
01:14:54,840 --> 01:14:57,120
supported i don't think that's the way i

2104
01:14:57,120 --> 01:14:59,360
would summarize it it's just like

2105
01:14:59,360 --> 01:15:01,600
it it is just kind of the wild west and

2106
01:15:01,600 --> 01:15:02,800
you can request something and you can be

2107
01:15:02,800 --> 01:15:04,880
optimistic about it but so the wild west

2108
01:15:04,880 --> 01:15:06,880
is what i'm trying to avoid because the

2109
01:15:06,880 --> 01:15:08,719
the the weird thing you end up with is

2110
01:15:08,719 --> 01:15:11,440
like i sent like i picked a random ip

2111
01:15:11,440 --> 01:15:13,280
address for the source address and i

2112
01:15:13,280 --> 01:15:15,360
didn't guess right i didn't guess what i

2113
01:15:15,360 --> 01:15:17,600
got back in the end randomly is a very

2114
01:15:17,600 --> 01:15:19,679
good way to probably fail to get so like

2115
01:15:19,679 --> 01:15:21,840
this is my question are source addresses

2116
01:15:21,840 --> 01:15:23,920
allowed to be rewritten or is there a

2117
01:15:23,920 --> 01:15:26,159
rule like if i if the address assigned

2118
01:15:26,159 --> 01:15:28,239
comes back and the source id i said

2119
01:15:28,239 --> 01:15:29,920
wasn't on the list was my packet

2120
01:15:29,920 --> 01:15:31,920
delivered

2121
01:15:31,920 --> 01:15:33,840
was it rewritten or was it dropped i

2122
01:15:33,840 --> 01:15:36,239
don't have any explicit indication

2123
01:15:36,239 --> 01:15:38,320
well if you send something you should

2124
01:15:38,320 --> 01:15:39,760
get an icmp error if it doesn't like

2125
01:15:39,760 --> 01:15:41,920
what you did okay so that's that's great

2126
01:15:41,920 --> 01:15:43,360
i would like to see if we have a hard

2127
01:15:43,360 --> 01:15:45,120
rule that says like yeah either your

2128
01:15:45,120 --> 01:15:46,719
packet is like dropped

2129
01:15:46,719 --> 01:15:47,920
yeah that's what the other text was

2130
01:15:47,920 --> 01:15:49,440
about to say you should get an icp error

2131
01:15:49,440 --> 01:15:52,080
in that case okay that then it's clear

2132
01:15:52,080 --> 01:15:54,159
that you know yeah yeah

2133
01:15:54,159 --> 01:15:56,400
so i have not cut the queue because i

2134
01:15:56,400 --> 01:15:57,679
think it's important that we close on

2135
01:15:57,679 --> 01:15:59,440
this to make some progress but please do

2136
01:15:59,440 --> 01:16:01,600
try to keep things free this is the last

2137
01:16:01,600 --> 01:16:03,679
slide it's the last big one

2138
01:16:03,679 --> 01:16:05,440
um so i wanted to reply to ben and

2139
01:16:05,440 --> 01:16:06,880
actually try to clarify some of the

2140
01:16:06,880 --> 01:16:07,600
things which i think there's some

2141
01:16:07,600 --> 01:16:09,360
confusion here so

2142
01:16:09,360 --> 01:16:10,320
there's a couple different modes of

2143
01:16:10,320 --> 01:16:12,400
using connect ip i think

2144
01:16:12,400 --> 01:16:14,239
broadly speaking the dynamically

2145
01:16:14,239 --> 01:16:15,920
assigned

2146
01:16:15,920 --> 01:16:18,400
openvpn case zero rtt is almost never

2147
01:16:18,400 --> 01:16:19,520
going to work because you're going to be

2148
01:16:19,520 --> 01:16:21,840
assigning these ip addresses to a

2149
01:16:21,840 --> 01:16:23,520
virtual network device on the host os

2150
01:16:23,520 --> 01:16:25,679
anyway so i personally consider their

2151
01:16:25,679 --> 01:16:28,159
zero rtt to not be a priority or a goal

2152
01:16:28,159 --> 01:16:30,159
so i think the place where the zero rtt

2153
01:16:30,159 --> 01:16:31,440
optimistic packet sending thing there

2154
01:16:31,440 --> 01:16:32,480
makes more sense when you're doing one

2155
01:16:32,480 --> 01:16:33,840
of the targeted tunnels either because

2156
01:16:33,840 --> 01:16:35,199
it's a udp user space thing or something

2157
01:16:35,199 --> 01:16:37,280
like that and there particularly if the

2158
01:16:37,280 --> 01:16:39,199
client already has a long established uh

2159
01:16:39,199 --> 01:16:41,120
h3 connection which already has multiple

2160
01:16:41,120 --> 01:16:43,040
such targeted connect ip tunnels with

2161
01:16:43,040 --> 01:16:44,400
high probability it's going to be load

2162
01:16:44,400 --> 01:16:45,840
balanced to the same

2163
01:16:45,840 --> 01:16:48,080
process module on your immediate areas

2164
01:16:48,080 --> 01:16:49,840
in which case it already has in memory

2165
01:16:49,840 --> 01:16:51,199
the address assignments for that client

2166
01:16:51,199 --> 01:16:54,000
and it is very very very likely in fact

2167
01:16:54,000 --> 01:16:55,120
almost certain for most reasonable

2168
01:16:55,120 --> 01:16:56,239
implementations it's going to reuse the

2169
01:16:56,239 --> 01:16:57,520
same ip address for that particular

2170
01:16:57,520 --> 01:16:58,960
client it's not guaranteed it's not

2171
01:16:58,960 --> 01:17:00,080
going to have to get an error back in

2172
01:17:00,080 --> 01:17:01,840
case it doesn't work so if you want to

2173
01:17:01,840 --> 01:17:03,440
use i mean if you believe this then it

2174
01:17:03,440 --> 01:17:05,600
should be a shed

2175
01:17:05,600 --> 01:17:07,360
if you would i think i thought it

2176
01:17:07,360 --> 01:17:08,800
already is a shirt like i thought we

2177
01:17:08,800 --> 01:17:10,640
already have a texture of it if a client

2178
01:17:10,640 --> 01:17:12,320
asked for an ip we should give it back

2179
01:17:12,320 --> 01:17:13,679
but like

2180
01:17:13,679 --> 01:17:14,719
we might not right like there's no

2181
01:17:14,719 --> 01:17:15,760
guarantee because it might already be

2182
01:17:15,760 --> 01:17:17,360
giving you somewhere else yeah

2183
01:17:17,360 --> 01:17:18,719
uh but the other thing i wanted to

2184
01:17:18,719 --> 01:17:20,000
mention here is that you never have a

2185
01:17:20,000 --> 01:17:21,280
guarantee a packet delivery here if it

2186
01:17:21,280 --> 01:17:23,040
went over a datagram so like even to

2187
01:17:23,040 --> 01:17:24,560
your earlier comment of like i'd like to

2188
01:17:24,560 --> 01:17:26,320
get back on icmp earth it was lost

2189
01:17:26,320 --> 01:17:27,600
somewhere on path you're not going to

2190
01:17:27,600 --> 01:17:29,600
get it so all of those things around the

2191
01:17:29,600 --> 01:17:31,199
other commentary around like is it going

2192
01:17:31,199 --> 01:17:32,800
to be written with an extension if we

2193
01:17:32,800 --> 01:17:34,000
have that in the future like you could

2194
01:17:34,000 --> 01:17:35,199
imagine having an extension of like

2195
01:17:35,199 --> 01:17:37,440
please go be right to my target ip why i

2196
01:17:37,440 --> 01:17:38,960
might send you garbage source bits and

2197
01:17:38,960 --> 01:17:40,960
if that gets sent before the package is

2198
01:17:40,960 --> 01:17:42,400
processed then yes you should expect but

2199
01:17:42,400 --> 01:17:43,679
that would work but that's not currently

2200
01:17:43,679 --> 01:17:47,280
defined in the base exactly exactly

2201
01:17:47,280 --> 01:17:49,599
cool

2202
01:17:50,800 --> 01:17:52,719
no we do have one more

2203
01:17:52,719 --> 01:17:54,960
i think this is already covered yeah oh

2204
01:17:54,960 --> 01:17:56,880
sorry mike

2205
01:17:56,880 --> 01:17:58,320
mia

2206
01:17:58,320 --> 01:18:00,320
um have a question regarding this idea

2207
01:18:00,320 --> 01:18:02,480
we had about sending an empty address

2208
01:18:02,480 --> 01:18:03,520
assigned

2209
01:18:03,520 --> 01:18:04,719
if you don't want to give the client an

2210
01:18:04,719 --> 01:18:07,040
assign an address or yeah why would you

2211
01:18:07,040 --> 01:18:08,000
do that

2212
01:18:08,000 --> 01:18:09,600
i mean why don't you if you don't want

2213
01:18:09,600 --> 01:18:10,960
to give the client an address then just

2214
01:18:10,960 --> 01:18:12,080
close the connection right yeah more

2215
01:18:12,080 --> 01:18:14,159
realistically you just close the stream

2216
01:18:14,159 --> 01:18:16,159
i think that's a better option

2217
01:18:16,159 --> 01:18:18,000
that's a good point thank you so

2218
01:18:18,000 --> 01:18:19,520
actually this is relevant to what i

2219
01:18:19,520 --> 01:18:21,600
wanted to ask i think

2220
01:18:21,600 --> 01:18:23,199
part of the earlier discussion we

2221
01:18:23,199 --> 01:18:24,960
changed something that's not currently

2222
01:18:24,960 --> 01:18:27,280
in the pr but i think is a good change

2223
01:18:27,280 --> 01:18:30,080
which is to say that now

2224
01:18:30,080 --> 01:18:32,719
address assign is cumulative yes

2225
01:18:32,719 --> 01:18:33,679
and

2226
01:18:33,679 --> 01:18:35,679
i know again i'm going to write it uh

2227
01:18:35,679 --> 01:18:37,360
and that solves some of these problems

2228
01:18:37,360 --> 01:18:38,960
so let's say

2229
01:18:38,960 --> 01:18:40,480
you know if you i'm only assigning you

2230
01:18:40,480 --> 01:18:44,000
one instead of two like you can see that

2231
01:18:44,000 --> 01:18:47,360
uh so that's nice i just want

2232
01:18:47,360 --> 01:18:50,239
yeah i guess so yeah

2233
01:18:50,239 --> 01:18:51,760
this solves unassigned which was oh

2234
01:18:51,760 --> 01:18:54,560
that's great yeah yep cool

2235
01:18:54,560 --> 01:18:56,880
um bingo yeah all right that's even

2236
01:18:56,880 --> 01:18:59,440
better so

2237
01:18:59,840 --> 01:19:02,480
all right uh oh sorry uh jonathan was

2238
01:19:02,480 --> 01:19:04,080
saying that that allows you to remove

2239
01:19:04,080 --> 01:19:06,320
addresses and i'll have a sentence that

2240
01:19:06,320 --> 01:19:08,800
says that actually because

2241
01:19:08,800 --> 01:19:11,440
why not right and like i think it should

2242
01:19:11,440 --> 01:19:14,159
still be permissible to assign

2243
01:19:14,159 --> 01:19:16,080
only zero addresses because potentially

2244
01:19:16,080 --> 01:19:17,679
in a side-to-side vpn case there may be

2245
01:19:17,679 --> 01:19:19,520
a moment when

2246
01:19:19,520 --> 01:19:21,600
all connectivity is lost and then they

2247
01:19:21,600 --> 01:19:22,800
bring it back online and you don't

2248
01:19:22,800 --> 01:19:24,080
necessarily need to tear down your quick

2249
01:19:24,080 --> 01:19:26,080
streams yeah like i mean i don't think

2250
01:19:26,080 --> 01:19:27,920
it should be forbidden to do that yeah i

2251
01:19:27,920 --> 01:19:29,280
don't think we need to say anything

2252
01:19:29,280 --> 01:19:30,640
let's say yeah

2253
01:19:30,640 --> 01:19:32,560
uh cool okay no i just wanted to make

2254
01:19:32,560 --> 01:19:34,320
sure because i was kind of a non-trivial

2255
01:19:34,320 --> 01:19:36,080
change to the pr that we had the editors

2256
01:19:36,080 --> 01:19:37,440
had agreed to i just want to make sure

2257
01:19:37,440 --> 01:19:39,280
that no one objects to that but it does

2258
01:19:39,280 --> 01:19:40,880
seem to solve quite a few things nicely

2259
01:19:40,880 --> 01:19:42,640
and on top of that it becomes fully

2260
01:19:42,640 --> 01:19:44,480
consistent with route advertisement

2261
01:19:44,480 --> 01:19:46,719
which is just next exactly

2262
01:19:46,719 --> 01:19:49,040
yep um so the last bit here this is

2263
01:19:49,040 --> 01:19:50,480
essentially already covered in our

2264
01:19:50,480 --> 01:19:53,760
discussion we just had like

2265
01:19:53,760 --> 01:19:54,960
if you need

2266
01:19:54,960 --> 01:19:57,120
to send the packets you need to wait for

2267
01:19:57,120 --> 01:19:59,440
a signed right advertisement if you

2268
01:19:59,440 --> 01:20:00,960
want to know when it is time to send

2269
01:20:00,960 --> 01:20:02,480
address a sign

2270
01:20:02,480 --> 01:20:04,480
you wait for an address request i think

2271
01:20:04,480 --> 01:20:05,920
it's very clear

2272
01:20:05,920 --> 01:20:07,520
uh just the one last thing i'll mention

2273
01:20:07,520 --> 01:20:09,440
which we believe is not in scope for

2274
01:20:09,440 --> 01:20:11,040
this document but if you are trying to

2275
01:20:11,040 --> 01:20:13,040
extend connect ip and you want to have

2276
01:20:13,040 --> 01:20:15,120
fancy new capsules that do things to

2277
01:20:15,120 --> 01:20:17,679
affect your routes and addresses

2278
01:20:17,679 --> 01:20:19,280
and those are like super important about

2279
01:20:19,280 --> 01:20:20,560
the ordering you need to be concerned

2280
01:20:20,560 --> 01:20:21,760
about the ordering or have a way to

2281
01:20:21,760 --> 01:20:22,960
batch them

2282
01:20:22,960 --> 01:20:25,120
but that is left as an exercise to those

2283
01:20:25,120 --> 01:20:26,639
extensions to deal with and it does not

2284
01:20:26,639 --> 01:20:28,400
need to have any complexity into the

2285
01:20:28,400 --> 01:20:29,280
base

2286
01:20:29,280 --> 01:20:30,840
connect ip

2287
01:20:30,840 --> 01:20:33,520
draft and that is the last thing i have

2288
01:20:33,520 --> 01:20:35,679
so unless someone has a point on that we

2289
01:20:35,679 --> 01:20:39,199
can move on to the rest of the agenda

2290
01:20:39,199 --> 01:20:42,159
so close all the issues

2291
01:20:42,159 --> 01:20:44,480
thank you

2292
01:20:44,560 --> 01:20:48,639
very nice thank you tommy

2293
01:20:49,040 --> 01:20:50,560
next up

2294
01:20:50,560 --> 01:20:52,400
we have ben

2295
01:20:52,400 --> 01:20:55,599
do you want to share slides

2296
01:20:56,239 --> 01:20:58,719
do you want me to share slides

2297
01:20:58,719 --> 01:21:01,719
cool

2298
01:21:02,719 --> 01:21:03,600
cool

2299
01:21:03,600 --> 01:21:06,560
magic magic slides thank you all for the

2300
01:21:06,560 --> 01:21:08,320
engagement on that by the way we're very

2301
01:21:08,320 --> 01:21:10,960
close to the kind of end of the issues

2302
01:21:10,960 --> 01:21:13,679
list for connect ip so this is excellent

2303
01:21:13,679 --> 01:21:15,920
to make some good progress

2304
01:21:15,920 --> 01:21:18,880
access service description first okay

2305
01:21:18,880 --> 01:21:21,360
sweet

2306
01:21:25,840 --> 01:21:28,719
uh okay hello http access service

2307
01:21:28,719 --> 01:21:32,000
description objects next

2308
01:21:33,199 --> 01:21:34,239
so

2309
01:21:34,239 --> 01:21:35,040
the

2310
01:21:35,040 --> 01:21:38,480
the backdrop here is that

2311
01:21:38,480 --> 01:21:41,600
uh although it's clear how we describe

2312
01:21:41,600 --> 01:21:44,000
and convey and configure a connect udp

2313
01:21:44,000 --> 01:21:45,440
endpoint

2314
01:21:45,440 --> 01:21:47,360
or a connect ip

2315
01:21:47,360 --> 01:21:49,760
endpoint

2316
01:21:49,760 --> 01:21:51,040
the services that we're really

2317
01:21:51,040 --> 01:21:52,800
interested in i think are likely to be

2318
01:21:52,800 --> 01:21:54,000
more complicated than that they're

2319
01:21:54,000 --> 01:21:57,040
likely to have multiple components so i

2320
01:21:57,040 --> 01:21:59,840
think that it's reasonably likely that

2321
01:21:59,840 --> 01:22:02,000
you'll have connect udp and connect ip

2322
01:22:02,000 --> 01:22:04,239
and doe all offered essentially as a

2323
01:22:04,239 --> 01:22:06,800
package meaning tied to the same user

2324
01:22:06,800 --> 01:22:09,199
accounts intended to be used together as

2325
01:22:09,199 --> 01:22:11,040
a as a service

2326
01:22:11,040 --> 01:22:12,880
um i think

2327
01:22:12,880 --> 01:22:14,560
it's reasonably likely that you could

2328
01:22:14,560 --> 01:22:16,719
have a doe resolver this associated with

2329
01:22:16,719 --> 01:22:21,360
an old-fashioned connect tcp proxy

2330
01:22:21,360 --> 01:22:23,679
i think that there are a bunch of these

2331
01:22:23,679 --> 01:22:26,560
different combinations of uh of these

2332
01:22:26,560 --> 01:22:27,840
services

2333
01:22:27,840 --> 01:22:30,159
that we i think are going to want to be

2334
01:22:30,159 --> 01:22:33,440
able to configure convey

2335
01:22:33,440 --> 01:22:37,360
uh in a in a standardized way

2336
01:22:37,360 --> 01:22:39,840
next

2337
01:22:39,840 --> 01:22:41,600
and so the realization for me is that

2338
01:22:41,600 --> 01:22:42,800
although that we have

2339
01:22:42,800 --> 01:22:44,320
i think all these different potential

2340
01:22:44,320 --> 01:22:46,320
use cases they actually are all

2341
01:22:46,320 --> 01:22:48,320
instances of a of a single pretty simple

2342
01:22:48,320 --> 01:22:50,639
general problem we need a machine that

2343
01:22:50,639 --> 01:22:54,320
takes as an input a url or an origin or

2344
01:22:54,320 --> 01:22:57,840
you know could be just kind of a string

2345
01:22:57,840 --> 01:23:01,600
and its output has one or more of

2346
01:23:01,600 --> 01:23:02,800
these different

2347
01:23:02,800 --> 01:23:04,480
kinds of services that we've begun to

2348
01:23:04,480 --> 01:23:07,679
define both here in mask and in ojai

2349
01:23:07,679 --> 01:23:10,639
and potentially anything else that is an

2350
01:23:10,639 --> 01:23:13,040
access service a thing

2351
01:23:13,040 --> 01:23:15,120
that you would want to use as a

2352
01:23:15,120 --> 01:23:17,360
component of

2353
01:23:17,360 --> 01:23:19,360
a larger access service that helps you

2354
01:23:19,360 --> 01:23:20,960
get access to

2355
01:23:20,960 --> 01:23:23,360
something else on the internet

2356
01:23:23,360 --> 01:23:26,000
okay next

2357
01:23:26,719 --> 01:23:27,440
so

2358
01:23:27,440 --> 01:23:29,520
the thing i'm proposing here is a really

2359
01:23:29,520 --> 01:23:31,440
dead simple json format and the easiest

2360
01:23:31,440 --> 01:23:33,040
way to talk about it is to just look at

2361
01:23:33,040 --> 01:23:35,679
one so like here is

2362
01:23:35,679 --> 01:23:39,520
a an access service description of a

2363
01:23:39,520 --> 01:23:41,760
uh of a proxy this proxy has a doe

2364
01:23:41,760 --> 01:23:43,760
server a connect udp endpoint a connect

2365
01:23:43,760 --> 01:23:48,320
ip endpoint and an ohio relay

2366
01:23:48,320 --> 01:23:51,199
and so like rather than saying oh client

2367
01:23:51,199 --> 01:23:54,480
you know your user interface has like

2368
01:23:54,480 --> 01:23:56,800
four different text entry fields and

2369
01:23:56,800 --> 01:23:59,440
you're supposed to go in and paste one

2370
01:23:59,440 --> 01:24:02,800
after another all of the different um

2371
01:24:02,800 --> 01:24:05,199
all the different uri templates for all

2372
01:24:05,199 --> 01:24:07,760
of these different services we can say

2373
01:24:07,760 --> 01:24:09,920
look we're standardizing a format and so

2374
01:24:09,920 --> 01:24:12,080
your your user interface has a single

2375
01:24:12,080 --> 01:24:13,920
input field

2376
01:24:13,920 --> 01:24:18,159
uh and that is uh maybe a url hosting a

2377
01:24:18,159 --> 01:24:20,239
file like this maybe you know maybe even

2378
01:24:20,239 --> 01:24:22,080
literally a file picker and this thing

2379
01:24:22,080 --> 01:24:24,080
is if this thing is actually a file

2380
01:24:24,080 --> 01:24:27,280
that's being passed around

2381
01:24:27,280 --> 01:24:29,360
uh next

2382
01:24:29,360 --> 01:24:31,120
here's another example this is how

2383
01:24:31,120 --> 01:24:33,600
oblivious doe would be represented in

2384
01:24:33,600 --> 01:24:36,880
this so again we're we're tying

2385
01:24:36,880 --> 01:24:38,400
a doe service

2386
01:24:38,400 --> 01:24:40,320
to some other

2387
01:24:40,320 --> 01:24:42,400
kinds of access services in this case a

2388
01:24:42,400 --> 01:24:44,080
gateway which helps you get to that doe

2389
01:24:44,080 --> 01:24:46,480
endpoint

2390
01:24:46,800 --> 01:24:49,040
and again it's just a very simple json

2391
01:24:49,040 --> 01:24:51,440
format

2392
01:24:51,760 --> 01:24:54,080
next

2393
01:24:55,040 --> 01:24:56,800
so

2394
01:24:56,800 --> 01:24:59,280
the idea for this draft is that probably

2395
01:24:59,280 --> 01:25:01,360
access services all these different sort

2396
01:25:01,360 --> 01:25:02,960
of composite services that i've been

2397
01:25:02,960 --> 01:25:05,199
talking about are generally identified

2398
01:25:05,199 --> 01:25:07,679
by a url and that is the url of an

2399
01:25:07,679 --> 01:25:10,080
access service description it's a url

2400
01:25:10,080 --> 01:25:11,679
that you send a get request to and it

2401
01:25:11,679 --> 01:25:15,199
sends you back a json object

2402
01:25:15,280 --> 01:25:16,480
except

2403
01:25:16,480 --> 01:25:18,080
there are some cases where that doesn't

2404
01:25:18,080 --> 01:25:21,040
work where for a legacy reason

2405
01:25:21,040 --> 01:25:23,120
or for interoperability with some other

2406
01:25:23,120 --> 01:25:26,000
system the only identifier we have is an

2407
01:25:26,000 --> 01:25:29,280
origin or a host name we don't we can't

2408
01:25:29,280 --> 01:25:32,159
use a url as our initial identifier and

2409
01:25:32,159 --> 01:25:33,840
so in that case we use that well known

2410
01:25:33,840 --> 01:25:36,719
we say this thing lives on a download

2411
01:25:36,719 --> 01:25:39,040
next

2412
01:25:39,120 --> 01:25:41,920
okay so like we can solve any problem by

2413
01:25:41,920 --> 01:25:43,199
introducing an extra level of

2414
01:25:43,199 --> 01:25:44,400
indirection

2415
01:25:44,400 --> 01:25:45,760
um

2416
01:25:45,760 --> 01:25:47,520
and so this is just a level of

2417
01:25:47,520 --> 01:25:49,600
indirection instead of passing connect

2418
01:25:49,600 --> 01:25:52,000
udp uri templates around we pass around

2419
01:25:52,000 --> 01:25:53,679
a file containing

2420
01:25:53,679 --> 01:25:55,920
well a url of a file containing connect

2421
01:25:55,920 --> 01:25:58,080
udp templates

2422
01:25:58,080 --> 01:25:59,760
and i think there's a bunch of useful

2423
01:25:59,760 --> 01:26:01,920
stuff that this enables like

2424
01:26:01,920 --> 01:26:03,600
you can

2425
01:26:03,600 --> 01:26:06,719
if you want to do fast http 3 bootstrap

2426
01:26:06,719 --> 01:26:10,880
you need in well you you arguably need a

2427
01:26:10,880 --> 01:26:12,800
uh https records you need to be able to

2428
01:26:12,800 --> 01:26:15,760
query https records out of the dns

2429
01:26:15,760 --> 01:26:17,360
but you can't do that

2430
01:26:17,360 --> 01:26:19,199
unless you actually have a dns server

2431
01:26:19,199 --> 01:26:21,440
that you can use

2432
01:26:21,440 --> 01:26:23,760
know the proxy can't do a connect udp

2433
01:26:23,760 --> 01:26:25,679
proxy can't do that for you

2434
01:26:25,679 --> 01:26:26,639
so

2435
01:26:26,639 --> 01:26:28,320
you want a dose server associated with

2436
01:26:28,320 --> 01:26:30,960
your connect udp proxy uh because the

2437
01:26:30,960 --> 01:26:32,639
whole point of connect udp is to be able

2438
01:26:32,639 --> 01:26:34,400
to use http 3.

2439
01:26:34,400 --> 01:26:36,239
so you know we can enable that we can

2440
01:26:36,239 --> 01:26:38,560
enable encrypted client hello through a

2441
01:26:38,560 --> 01:26:41,280
proxy and we can make that work even for

2442
01:26:41,280 --> 01:26:43,360
these sort of legacy cases

2443
01:26:43,360 --> 01:26:44,719
uh like the ones that we were talking

2444
01:26:44,719 --> 01:26:47,840
about just uh an hour ago

2445
01:26:47,840 --> 01:26:48,719
where

2446
01:26:48,719 --> 01:26:51,120
our bootstrap input is a hostname

2447
01:26:51,120 --> 01:26:53,440
because we're we're stuck in the in the

2448
01:26:53,440 --> 01:26:55,360
legacy world where we're

2449
01:26:55,360 --> 01:26:57,280
we're configuring old-fashioned proxies

2450
01:26:57,280 --> 01:27:00,239
that aren't a full url

2451
01:27:00,239 --> 01:27:03,199
there's some growing interest seemingly

2452
01:27:03,199 --> 01:27:06,239
in client-side dns validation

2453
01:27:06,239 --> 01:27:07,920
that's another case where the client

2454
01:27:07,920 --> 01:27:12,080
needs direct dns access uh that a proxy

2455
01:27:12,080 --> 01:27:14,239
like connect2udp doesn't offer

2456
01:27:14,239 --> 01:27:15,840
i also think there's

2457
01:27:15,840 --> 01:27:18,400
another sort of category of interesting

2458
01:27:18,400 --> 01:27:20,639
ways that this can be useful and that is

2459
01:27:20,639 --> 01:27:22,400
helping the client to learn more about

2460
01:27:22,400 --> 01:27:24,880
the capabilities of the access service

2461
01:27:24,880 --> 01:27:27,440
so for example you know we're about to

2462
01:27:27,440 --> 01:27:31,520
talk about connect udp in listener mode

2463
01:27:31,520 --> 01:27:32,880
there's

2464
01:27:32,880 --> 01:27:35,760
uh currently no real way to discover

2465
01:27:35,760 --> 01:27:37,679
whether a given connect udp instance

2466
01:27:37,679 --> 01:27:40,320
supports listener mode you could try it

2467
01:27:40,320 --> 01:27:42,639
and just see what happens

2468
01:27:42,639 --> 01:27:44,000
uh but

2469
01:27:44,000 --> 01:27:46,239
uh you know we've as we've often argued

2470
01:27:46,239 --> 01:27:47,040
the

2471
01:27:47,040 --> 01:27:48,560
the

2472
01:27:48,560 --> 01:27:50,800
requests that you make to a specific

2473
01:27:50,800 --> 01:27:53,760
resource are only valid for that one

2474
01:27:53,760 --> 01:27:55,679
request right so you've got it in http

2475
01:27:55,679 --> 01:27:57,280
500 but you don't know that you're

2476
01:27:57,280 --> 01:27:58,880
always going to get a 500 talking to

2477
01:27:58,880 --> 01:28:01,120
that and even if even if you sort of are

2478
01:28:01,120 --> 01:28:04,000
willing to buy that that you can sort of

2479
01:28:04,000 --> 01:28:05,840
probe for the capability to find out if

2480
01:28:05,840 --> 01:28:07,280
it exists

2481
01:28:07,280 --> 01:28:09,679
it's uh it certainly seems like more

2482
01:28:09,679 --> 01:28:10,880
work than just

2483
01:28:10,880 --> 01:28:13,840
being told at startup like here's the

2484
01:28:13,840 --> 01:28:16,480
capabilities of this thing

2485
01:28:16,480 --> 01:28:18,480
uh you can evolve the capabilities of

2486
01:28:18,480 --> 01:28:20,480
your service right you can start by

2487
01:28:20,480 --> 01:28:22,320
launching a connect udp server and then

2488
01:28:22,320 --> 01:28:24,400
you can add connect ip later and you

2489
01:28:24,400 --> 01:28:26,639
don't need to go and reprovision all of

2490
01:28:26,639 --> 01:28:28,480
the clients that you've ever

2491
01:28:28,480 --> 01:28:31,040
onboarded right they can just reload the

2492
01:28:31,040 --> 01:28:33,280
configuration url

2493
01:28:33,280 --> 01:28:34,080
so

2494
01:28:34,080 --> 01:28:35,360
oh and finally

2495
01:28:35,360 --> 01:28:36,159
this

2496
01:28:36,159 --> 01:28:39,280
format is a is sort of a perfect fit

2497
01:28:39,280 --> 01:28:41,679
for key consistency double check which i

2498
01:28:41,679 --> 01:28:42,400
was

2499
01:28:42,400 --> 01:28:45,520
talking about yesterday in in ojai

2500
01:28:45,520 --> 01:28:47,520
because again that's a case where we

2501
01:28:47,520 --> 01:28:50,239
need to grab something like an oblivious

2502
01:28:50,239 --> 01:28:52,080
doe configuration

2503
01:28:52,080 --> 01:28:54,080
as a you know and and

2504
01:28:54,080 --> 01:28:56,000
and essentially treat it as an atomic

2505
01:28:56,000 --> 01:28:58,080
unit and so here we have a format for

2506
01:28:58,080 --> 01:29:00,560
representing those as an atomic unit so

2507
01:29:00,560 --> 01:29:02,080
i think this is a useful thing it's dead

2508
01:29:02,080 --> 01:29:03,040
simple

2509
01:29:03,040 --> 01:29:04,320
and i think mask would be a good place

2510
01:29:04,320 --> 01:29:06,239
to work on

2511
01:29:06,239 --> 01:29:08,480
before we get too deep into the queue we

2512
01:29:08,480 --> 01:29:10,719
have a timer on screen which is for both

2513
01:29:10,719 --> 01:29:12,080
of your presentations i figured i'd let

2514
01:29:12,080 --> 01:29:14,080
you allocate time to whichever one you

2515
01:29:14,080 --> 01:29:16,159
wanted okay great uh quickly

2516
01:29:16,159 --> 01:29:17,679
google uh thank you for thinking this

2517
01:29:17,679 --> 01:29:18,719
through thank you for bringing it to the

2518
01:29:18,719 --> 01:29:19,760
working group

2519
01:29:19,760 --> 01:29:22,560
um in our infinite wisdom we

2520
01:29:22,560 --> 01:29:24,719
specifically excluded proxy discovery

2521
01:29:24,719 --> 01:29:26,960
from the charter um doesn't mean we

2522
01:29:26,960 --> 01:29:29,040
can't recharge it of course uh i'd be

2523
01:29:29,040 --> 01:29:30,800
interested in the communities to use if

2524
01:29:30,800 --> 01:29:32,639
mask is the right venue for this or many

2525
01:29:32,639 --> 01:29:34,080
or one of the many other working groups

2526
01:29:34,080 --> 01:29:38,120
that this would touch thanks

2527
01:29:39,360 --> 01:29:42,320
all right tommy polly um

2528
01:29:42,320 --> 01:29:43,440
so

2529
01:29:43,440 --> 01:29:44,639
thanks for bringing this up i think it's

2530
01:29:44,639 --> 01:29:47,360
a very important conversation to have

2531
01:29:47,360 --> 01:29:48,320
um

2532
01:29:48,320 --> 01:29:50,800
in general i feel like i should like

2533
01:29:50,800 --> 01:29:52,239
this direction and like you know

2534
01:29:52,239 --> 01:29:53,840
certainly in the deployment we have of

2535
01:29:53,840 --> 01:29:55,120
mask

2536
01:29:55,120 --> 01:29:57,120
we have config files that say this is a

2537
01:29:57,120 --> 01:30:00,159
thing that is a ohtp relay and a connect

2538
01:30:00,159 --> 01:30:02,159
proxy and a

2539
01:30:02,159 --> 01:30:04,320
connected udp proxy it's like it

2540
01:30:04,320 --> 01:30:07,520
it feels similar however

2541
01:30:07,520 --> 01:30:09,440
like i'm not convinced about this

2542
01:30:09,440 --> 01:30:12,080
particular shape for it um i think it's

2543
01:30:12,080 --> 01:30:13,760
combining

2544
01:30:13,760 --> 01:30:15,280
more than we need to particularly about

2545
01:30:15,280 --> 01:30:17,760
like locations and keys and capabilities

2546
01:30:17,760 --> 01:30:20,000
trying to all be in one json thing it's

2547
01:30:20,000 --> 01:30:21,280
like

2548
01:30:21,280 --> 01:30:22,400
both

2549
01:30:22,400 --> 01:30:24,719
too much information that's available to

2550
01:30:24,719 --> 01:30:27,040
everyone in one flat way that may not be

2551
01:30:27,040 --> 01:30:28,320
specific enough

2552
01:30:28,320 --> 01:30:29,840
but there's also not enough information

2553
01:30:29,840 --> 01:30:31,440
to actually be fully useful for each of

2554
01:30:31,440 --> 01:30:32,800
these use cases

2555
01:30:32,800 --> 01:30:33,600
um

2556
01:30:33,600 --> 01:30:35,199
regarding the

2557
01:30:35,199 --> 01:30:38,800
scope of working group i think

2558
01:30:38,800 --> 01:30:40,400
if we have a version of this that is

2559
01:30:40,400 --> 01:30:41,760
just about

2560
01:30:41,760 --> 01:30:44,320
mask proxying like

2561
01:30:44,320 --> 01:30:46,840
things that proxy end-to-end

2562
01:30:46,840 --> 01:30:50,159
connections but not ohtp and not dns

2563
01:30:50,159 --> 01:30:52,080
then that can belong in mask but i'm not

2564
01:30:52,080 --> 01:30:54,320
convinced about it being in mask if it's

2565
01:30:54,320 --> 01:30:55,520
trying to do all of these things i think

2566
01:30:55,520 --> 01:30:57,679
it needs a much broader audience unless

2567
01:30:57,679 --> 01:30:58,400
we

2568
01:30:58,400 --> 01:31:00,159
turn mask into the

2569
01:31:00,159 --> 01:31:02,159
all things oblivious and proxied working

2570
01:31:02,159 --> 01:31:03,760
group which is a

2571
01:31:03,760 --> 01:31:05,120
i don't know i don't know if that's even

2572
01:31:05,120 --> 01:31:06,960
transport thing anymore

2573
01:31:06,960 --> 01:31:08,719
um

2574
01:31:08,719 --> 01:31:10,000
specifically around here as i mentioned

2575
01:31:10,000 --> 01:31:10,719
like

2576
01:31:10,719 --> 01:31:12,400
i'm concerned about

2577
01:31:12,400 --> 01:31:14,800
keys like when we find like

2578
01:31:14,800 --> 01:31:16,960
you know your key rotation scheme in

2579
01:31:16,960 --> 01:31:18,719
your key management scheme

2580
01:31:18,719 --> 01:31:20,400
may be something that

2581
01:31:20,400 --> 01:31:22,880
for your http server is distributed in a

2582
01:31:22,880 --> 01:31:24,960
different way such that the person

2583
01:31:24,960 --> 01:31:27,360
maintaining this one big file now needs

2584
01:31:27,360 --> 01:31:28,560
to worry about the key rotation

2585
01:31:28,560 --> 01:31:31,199
management of a bunch of different

2586
01:31:31,199 --> 01:31:32,239
services

2587
01:31:32,239 --> 01:31:35,600
that i think ends up being quite complex

2588
01:31:35,600 --> 01:31:37,120
i think also you know a lot of people

2589
01:31:37,120 --> 01:31:39,040
aren't going to be opening running fully

2590
01:31:39,040 --> 01:31:40,639
open proxies

2591
01:31:40,639 --> 01:31:42,239
like it's one thing to say i'm a proxy

2592
01:31:42,239 --> 01:31:44,000
but

2593
01:31:44,000 --> 01:31:44,880
even

2594
01:31:44,880 --> 01:31:46,159
today like on the internet like you're

2595
01:31:46,159 --> 01:31:47,440
not going to have a proxy that you don't

2596
01:31:47,440 --> 01:31:48,880
have authentication to that just lets

2597
01:31:48,880 --> 01:31:50,400
you do

2598
01:31:50,400 --> 01:31:52,400
like here i just have connect udp

2599
01:31:52,400 --> 01:31:54,960
connect oh http just like the whole

2600
01:31:54,960 --> 01:31:56,880
world um i think anything around this

2601
01:31:56,880 --> 01:31:59,760
would need a lot of like acls of like i

2602
01:31:59,760 --> 01:32:02,800
allow ohtp relays to these gateways or

2603
01:32:02,800 --> 01:32:03,840
like

2604
01:32:03,840 --> 01:32:05,520
a lot more specificity which feels like

2605
01:32:05,520 --> 01:32:07,199
they need to be separate configs for

2606
01:32:07,199 --> 01:32:08,960
those different protocols

2607
01:32:08,960 --> 01:32:10,960
and also be related to an authentication

2608
01:32:10,960 --> 01:32:14,239
source like if i'm a client who has

2609
01:32:14,239 --> 01:32:16,159
authentication to use this particular

2610
01:32:16,159 --> 01:32:17,679
proxy in this manner i have access to

2611
01:32:17,679 --> 01:32:19,120
these services

2612
01:32:19,120 --> 01:32:20,639
but people who are just random people

2613
01:32:20,639 --> 01:32:22,639
who typed in a string into their browser

2614
01:32:22,639 --> 01:32:26,639
should not have the full capability so

2615
01:32:26,639 --> 01:32:27,760
these are just some of the questions it

2616
01:32:27,760 --> 01:32:29,120
raises and so i think we need more

2617
01:32:29,120 --> 01:32:30,800
discussion more work

2618
01:32:30,800 --> 01:32:33,280
on it and i lean towards trying to

2619
01:32:33,280 --> 01:32:35,520
understand the in-depth use cases for

2620
01:32:35,520 --> 01:32:38,000
the different protocols before we try to

2621
01:32:38,000 --> 01:32:41,800
combine them all together

2622
01:32:42,639 --> 01:32:45,360
uh jonathan yeah i think my my theory

2623
01:32:45,360 --> 01:32:46,400
was sort of

2624
01:32:46,400 --> 01:32:48,480
similarly but more narrowly i'm

2625
01:32:48,480 --> 01:32:50,400
since this is configuring things from i

2626
01:32:50,400 --> 01:32:51,920
think i think at least four different

2627
01:32:51,920 --> 01:32:54,000
working groups and possibly five i'm

2628
01:32:54,000 --> 01:32:55,440
dubious whether you could do them all in

2629
01:32:55,440 --> 01:32:56,960
one as opposed to each working group

2630
01:32:56,960 --> 01:32:58,000
defining

2631
01:32:58,000 --> 01:32:59,920
its own configuration maybe like you'd

2632
01:32:59,920 --> 01:33:01,360
have some uh

2633
01:33:01,360 --> 01:33:02,639
here's the bucket to put things in and

2634
01:33:02,639 --> 01:33:03,840
then each working group would do it's

2635
01:33:03,840 --> 01:33:05,840
how you configure its protocol but

2636
01:33:05,840 --> 01:33:08,320
i'm dubious about you know defining

2637
01:33:08,320 --> 01:33:10,400
things for ojai or

2638
01:33:10,400 --> 01:33:11,840
deep deep

2639
01:33:11,840 --> 01:33:14,560
in this work group

2640
01:33:15,840 --> 01:33:18,560
davis kanazi google

2641
01:33:18,560 --> 01:33:21,199
privacy of all the things enthusiast

2642
01:33:21,199 --> 01:33:23,199
um so

2643
01:33:23,199 --> 01:33:26,800
first comment is i i can i can kinda see

2644
01:33:26,800 --> 01:33:28,880
how this is useful

2645
01:33:28,880 --> 01:33:29,760
but

2646
01:33:29,760 --> 01:33:31,360
i can't see

2647
01:33:31,360 --> 01:33:36,040
anyone actually using it

2648
01:33:37,199 --> 01:33:38,960
who would use this

2649
01:33:38,960 --> 01:33:39,920
uh

2650
01:33:39,920 --> 01:33:41,440
sure so the

2651
01:33:41,440 --> 01:33:43,920
the the easiest example for me is that

2652
01:33:43,920 --> 01:33:44,719
this

2653
01:33:44,719 --> 01:33:45,679
this

2654
01:33:45,679 --> 01:33:47,679
the use case i'm principally targeting

2655
01:33:47,679 --> 01:33:50,000
here is exactly the the use case that we

2656
01:33:50,000 --> 01:33:52,000
were just talking about with the dot

2657
01:33:52,000 --> 01:33:53,199
well known

2658
01:33:53,199 --> 01:33:55,600
uh uri temp the fix dot well known

2659
01:33:55,600 --> 01:33:56,719
template

2660
01:33:56,719 --> 01:33:59,199
for for connect ip so like that's a

2661
01:33:59,199 --> 01:34:00,800
simple case where you

2662
01:34:00,800 --> 01:34:01,760
are

2663
01:34:01,760 --> 01:34:03,360
you you've provisioned a bunch of

2664
01:34:03,360 --> 01:34:04,960
devices

2665
01:34:04,960 --> 01:34:06,719
and they have authorization to use an

2666
01:34:06,719 --> 01:34:09,840
http connect tcp proxy and you want to

2667
01:34:09,840 --> 01:34:11,280
augment that with a bunch of extra

2668
01:34:11,280 --> 01:34:13,360
services and so the way we've started to

2669
01:34:13,360 --> 01:34:15,440
try to do that is by saying okay for

2670
01:34:15,440 --> 01:34:17,440
each extra service we're going to define

2671
01:34:17,440 --> 01:34:19,840
a new path on dot well known and that's

2672
01:34:19,840 --> 01:34:21,280
going to be we're going to find a ui

2673
01:34:21,280 --> 01:34:23,520
template that lives under dot well known

2674
01:34:23,520 --> 01:34:25,600
and then that's going to control the

2675
01:34:25,600 --> 01:34:28,000
structure of all the connect udp and

2676
01:34:28,000 --> 01:34:30,400
connect ip request that you generate

2677
01:34:30,400 --> 01:34:31,840
my view is that

2678
01:34:31,840 --> 01:34:33,440
those are not good solutions as i

2679
01:34:33,440 --> 01:34:34,639
mentioned earlier they have a bunch of

2680
01:34:34,639 --> 01:34:36,400
problems for example

2681
01:34:36,400 --> 01:34:37,600
uh

2682
01:34:37,600 --> 01:34:39,520
they break the http

2683
01:34:39,520 --> 01:34:42,400
model of uh of requests because if i

2684
01:34:42,400 --> 01:34:44,960
make a request to if i populate that uri

2685
01:34:44,960 --> 01:34:47,040
template in order to issue a request and

2686
01:34:47,040 --> 01:34:50,000
i get back a 404 or something like all

2687
01:34:50,000 --> 01:34:51,920
that says is that that one particular

2688
01:34:51,920 --> 01:34:54,000
uri doesn't exist it doesn't tell me

2689
01:34:54,000 --> 01:34:55,840
that whether the uri template itself is

2690
01:34:55,840 --> 01:34:57,600
valid or whether there's some other set

2691
01:34:57,600 --> 01:34:59,440
of inputs that i could put in that would

2692
01:34:59,440 --> 01:35:01,199
actually work

2693
01:35:01,199 --> 01:35:02,239
uh

2694
01:35:02,239 --> 01:35:04,480
that also it means that i need to to

2695
01:35:04,480 --> 01:35:06,080
find out the capabilities of this thing

2696
01:35:06,080 --> 01:35:07,360
i need to send a bunch of different

2697
01:35:07,360 --> 01:35:09,679
probes i need to separately probe all

2698
01:35:09,679 --> 01:35:10,880
the different capabilities that i'm

2699
01:35:10,880 --> 01:35:12,560
interested in i can't just

2700
01:35:12,560 --> 01:35:14,800
ask what are the capabilities associated

2701
01:35:14,800 --> 01:35:17,040
with my local proxy so that to me is

2702
01:35:17,040 --> 01:35:19,600
like a very simple use case

2703
01:35:19,600 --> 01:35:21,760
uh and you know moving forward i think

2704
01:35:21,760 --> 01:35:24,960
that our proxy configurations will be

2705
01:35:24,960 --> 01:35:27,199
will not limit us to to host names we'll

2706
01:35:27,199 --> 01:35:28,480
be able to

2707
01:35:28,480 --> 01:35:30,560
configure whole urls and so

2708
01:35:30,560 --> 01:35:31,840
you know i imagine going into my

2709
01:35:31,840 --> 01:35:34,239
settings menu and saying i want to set

2710
01:35:34,239 --> 01:35:37,600
my system proxy to this url

2711
01:35:37,600 --> 01:35:40,000
and that url you know looks more or less

2712
01:35:40,000 --> 01:35:42,880
like what i described it it has tcp udp

2713
01:35:42,880 --> 01:35:45,040
ip ohi and do

2714
01:35:45,040 --> 01:35:47,280
all in it and any of those can change

2715
01:35:47,280 --> 01:35:49,440
later and uh you know

2716
01:35:49,440 --> 01:35:50,239
the

2717
01:35:50,239 --> 01:35:53,040
there's a standard so my my phone knows

2718
01:35:53,040 --> 01:35:55,679
and for authentication probably uh you

2719
01:35:55,679 --> 01:35:57,440
know there's some kind of like oauth

2720
01:35:57,440 --> 01:35:59,360
authentication flow it's a unified

2721
01:35:59,360 --> 01:36:01,119
authentication for all of those services

2722
01:36:01,119 --> 01:36:03,760
so i i o auth once and that that you

2723
01:36:03,760 --> 01:36:05,760
know those credentials then

2724
01:36:05,760 --> 01:36:07,760
are used across all of these services so

2725
01:36:07,760 --> 01:36:09,840
i don't have to re-authenticate to all

2726
01:36:09,840 --> 01:36:11,280
of them

2727
01:36:11,280 --> 01:36:13,520
that's uh that's my what i'm thinking of

2728
01:36:13,520 --> 01:36:14,560
so

2729
01:36:14,560 --> 01:36:16,639
that's a description of what you can do

2730
01:36:16,639 --> 01:36:17,840
with this

2731
01:36:17,840 --> 01:36:20,080
not of who's going to do something with

2732
01:36:20,080 --> 01:36:22,400
it but anyway i've taken up enough of

2733
01:36:22,400 --> 01:36:24,719
the time we're almost done uh i would

2734
01:36:24,719 --> 01:36:27,280
want to see people interested in

2735
01:36:27,280 --> 01:36:29,600
implementing this before we

2736
01:36:29,600 --> 01:36:30,560
sure i mean

2737
01:36:30,560 --> 01:36:32,239
i am interested in implementing this on

2738
01:36:32,239 --> 01:36:33,920
android for example i would like this to

2739
01:36:33,920 --> 01:36:35,920
be an android system settings that i can

2740
01:36:35,920 --> 01:36:38,560
drop into android and say like under my

2741
01:36:38,560 --> 01:36:41,360
vpn settings i'd like to have a mask vpn

2742
01:36:41,360 --> 01:36:44,239
setting where i can drop in

2743
01:36:44,239 --> 01:36:46,159
essentially one of these one of these

2744
01:36:46,159 --> 01:36:47,920
urls and then

2745
01:36:47,920 --> 01:36:50,159
not just get connect ip but get the

2746
01:36:50,159 --> 01:36:53,679
whole suite of associ of access services

2747
01:36:53,679 --> 01:36:55,360
associated with uh

2748
01:36:55,360 --> 01:36:58,000
one of these complex services okay that

2749
01:36:58,000 --> 01:36:59,360
sounds interesting

2750
01:36:59,360 --> 01:37:00,480
um

2751
01:37:00,480 --> 01:37:03,119
then to your to the second question

2752
01:37:03,119 --> 01:37:04,239
i

2753
01:37:04,239 --> 01:37:08,000
because this touches on dough on

2754
01:37:08,000 --> 01:37:10,080
uh oh hi

2755
01:37:10,080 --> 01:37:11,040
uh

2756
01:37:11,040 --> 01:37:13,440
on dns sec

2757
01:37:13,440 --> 01:37:15,679
uh i don't think that mask is

2758
01:37:15,679 --> 01:37:18,080
necessarily the right place i think that

2759
01:37:18,080 --> 01:37:20,159
the the the layer that this operates

2760
01:37:20,159 --> 01:37:21,920
over http you're describing all the

2761
01:37:21,920 --> 01:37:24,400
things that you can do with http though

2762
01:37:24,400 --> 01:37:26,000
dns sec

2763
01:37:26,000 --> 01:37:28,560
sticks out on the side but that's just a

2764
01:37:28,560 --> 01:37:30,080
that's just sort of a

2765
01:37:30,080 --> 01:37:31,360
an enabled

2766
01:37:31,360 --> 01:37:32,800
an enabled behavior there's no

2767
01:37:32,800 --> 01:37:35,360
connection to dns okay so i think maybe

2768
01:37:35,360 --> 01:37:40,239
but https might be the a better fit

2769
01:37:41,040 --> 01:37:42,800
john isn't the dispatch i actually agree

2770
01:37:42,800 --> 01:37:45,119
with that

2771
01:37:45,760 --> 01:37:47,119
okay

2772
01:37:47,119 --> 01:37:49,199
well it looks like i don't have time to

2773
01:37:49,199 --> 01:37:50,719
talk about the other

2774
01:37:50,719 --> 01:37:52,960
slides so uh i guess we'll we'll talk

2775
01:37:52,960 --> 01:37:54,560
about this some other time

2776
01:37:54,560 --> 01:37:56,080
do you want to drain the last two folks

2777
01:37:56,080 --> 01:37:57,440
or

2778
01:37:57,440 --> 01:37:59,600
totally up to you sorry sure

2779
01:37:59,600 --> 01:38:03,600
um so mike bishop i'll be very brief um

2780
01:38:03,600 --> 01:38:05,440
respectfully disagreeing that this is

2781
01:38:05,440 --> 01:38:07,920
not actually discovery of the proxy this

2782
01:38:07,920 --> 01:38:09,840
is discovery of the proxy's abilities

2783
01:38:09,840 --> 01:38:13,119
once you've been configured with a proxy

2784
01:38:13,119 --> 01:38:16,080
um so i think there is a lot of value

2785
01:38:16,080 --> 01:38:17,280
because

2786
01:38:17,280 --> 01:38:20,080
no typical user is going to know

2787
01:38:20,080 --> 01:38:21,920
oh this supports udp but it doesn't

2788
01:38:21,920 --> 01:38:23,840
support ip and it does support oblivious

2789
01:38:23,840 --> 01:38:24,800
hd

2790
01:38:24,800 --> 01:38:26,239
who even knows what these things are

2791
01:38:26,239 --> 01:38:28,400
outside of this building

2792
01:38:28,400 --> 01:38:30,800
um you give it a host name

2793
01:38:30,800 --> 01:38:32,320
it lights up interesting privacy

2794
01:38:32,320 --> 01:38:34,159
services

2795
01:38:34,159 --> 01:38:36,000
i think this is useful

2796
01:38:36,000 --> 01:38:37,920
i think the

2797
01:38:37,920 --> 01:38:39,520
the question of crossing groups is

2798
01:38:39,520 --> 01:38:41,760
easily solved by

2799
01:38:41,760 --> 01:38:43,920
it has niar registry each group can

2800
01:38:43,920 --> 01:38:45,840
register their own config thing and it's

2801
01:38:45,840 --> 01:38:47,520
just a list of supported services at

2802
01:38:47,520 --> 01:38:49,760
this at this host name

2803
01:38:49,760 --> 01:38:51,520
now does it belong here does it long and

2804
01:38:51,520 --> 01:38:53,440
dispatch i don't know

2805
01:38:53,440 --> 01:38:55,360
all of these are reasonable somebody

2806
01:38:55,360 --> 01:38:56,800
needs to define it and everybody else

2807
01:38:56,800 --> 01:38:59,840
needs to register

2808
01:39:06,800 --> 01:39:08,719
i'm alex jonovsky here actually mike

2809
01:39:08,719 --> 01:39:09,920
just said what i wanted to say much

2810
01:39:09,920 --> 01:39:11,360
better i mostly wanted to say that one

2811
01:39:11,360 --> 01:39:12,400
of the things that i was seeing with

2812
01:39:12,400 --> 01:39:14,639
connect ip is that we've continuously

2813
01:39:14,639 --> 01:39:16,320
had a discussion that people probably

2814
01:39:16,320 --> 01:39:18,080
want connect ip and connect udp proxies

2815
01:39:18,080 --> 01:39:20,159
to actually be hidden so i think

2816
01:39:20,159 --> 01:39:23,600
deciding whether or not this is a

2817
01:39:23,600 --> 01:39:25,600
discovery system or a capability system

2818
01:39:25,600 --> 01:39:27,280
is actually a very good point and one of

2819
01:39:27,280 --> 01:39:28,639
the things which i find would be very

2820
01:39:28,639 --> 01:39:30,719
interesting is if whatever mechanism we

2821
01:39:30,719 --> 01:39:32,320
choose this json file potentially one of

2822
01:39:32,320 --> 01:39:33,840
them is what happens if it's behind an

2823
01:39:33,840 --> 01:39:36,639
authentic authenticated http barrier

2824
01:39:36,639 --> 01:39:38,400
right like you probably don't want to go

2825
01:39:38,400 --> 01:39:39,760
and tell someone what the capabilities

2826
01:39:39,760 --> 01:39:42,159
of this proxy are until after you know

2827
01:39:42,159 --> 01:39:43,119
that you're willing to serve them and

2828
01:39:43,119 --> 01:39:44,239
you might be willing to serve different

2829
01:39:44,239 --> 01:39:46,480
capabilities to different classes of

2830
01:39:46,480 --> 01:39:48,880
authentication and i think we wherever

2831
01:39:48,880 --> 01:39:50,080
this ends up going we should probably

2832
01:39:50,080 --> 01:39:53,639
think about that as well

2833
01:39:55,520 --> 01:39:58,000
sorry just really really short um

2834
01:39:58,000 --> 01:39:59,520
one thing just for when we're thinking

2835
01:39:59,520 --> 01:40:00,239
about

2836
01:40:00,239 --> 01:40:02,639
some of the questions going forward

2837
01:40:02,639 --> 01:40:04,159
um

2838
01:40:04,159 --> 01:40:05,760
david was asking like who will use this

2839
01:40:05,760 --> 01:40:06,800
and i

2840
01:40:06,800 --> 01:40:08,000
i actually you know completely get from

2841
01:40:08,000 --> 01:40:09,199
a client side like yeah i would love to

2842
01:40:09,199 --> 01:40:11,679
use that i think the question we want to

2843
01:40:11,679 --> 01:40:13,760
answer collectively is

2844
01:40:13,760 --> 01:40:15,520
on server proxy ants because they're the

2845
01:40:15,520 --> 01:40:17,199
ones who have to publish this

2846
01:40:17,199 --> 01:40:19,199
who is deploying these sets of things

2847
01:40:19,199 --> 01:40:21,199
and what things are they willing to lump

2848
01:40:21,199 --> 01:40:23,440
and what are their requirements on

2849
01:40:23,440 --> 01:40:24,719
client authentication or other things

2850
01:40:24,719 --> 01:40:25,920
like that and those are the people who

2851
01:40:25,920 --> 01:40:27,760
we need in this conversation who i

2852
01:40:27,760 --> 01:40:30,800
haven't heard yet here

2853
01:40:31,760 --> 01:40:33,840
all right

2854
01:40:33,840 --> 01:40:35,360
our last set of slides before we talk

2855
01:40:35,360 --> 01:40:36,880
about rechartering in our little bit at

2856
01:40:36,880 --> 01:40:38,000
the end

2857
01:40:38,000 --> 01:40:40,159
all right did i have eight minutes yes

2858
01:40:40,159 --> 01:40:42,480
indeed cool everyone

2859
01:40:42,480 --> 01:40:43,520
i'm

2860
01:40:43,520 --> 01:40:46,320
david scanasi and uh

2861
01:40:46,320 --> 01:40:49,360
so this is a draft that

2862
01:40:49,360 --> 01:40:52,320
came out of a conversation with tommy

2863
01:40:52,320 --> 01:40:54,239
where we were talking mainly about

2864
01:40:54,239 --> 01:40:56,159
connect ip

2865
01:40:56,159 --> 01:40:58,080
and

2866
01:40:58,080 --> 01:41:00,159
forever i don't even remember what

2867
01:41:00,159 --> 01:41:01,840
specifically we were arguing about

2868
01:41:01,840 --> 01:41:03,679
doesn't matter but

2869
01:41:03,679 --> 01:41:06,320
tommy mentioned oh i'm gonna run webrtc

2870
01:41:06,320 --> 01:41:08,400
over connect ip

2871
01:41:08,400 --> 01:41:09,520
and

2872
01:41:09,520 --> 01:41:10,880
i thought

2873
01:41:10,880 --> 01:41:13,360
that sounds

2874
01:41:13,360 --> 01:41:14,880
wrong

2875
01:41:14,880 --> 01:41:16,639
and tommy was like well no it's super

2876
01:41:16,639 --> 01:41:18,960
easy i inject my user space ip stack

2877
01:41:18,960 --> 01:41:21,440
right underneath my user space udp stack

2878
01:41:21,440 --> 01:41:23,600
underneath my stuff and boom it just

2879
01:41:23,600 --> 01:41:25,199
works look i even have a demo and that's

2880
01:41:25,199 --> 01:41:26,480
kind of cool

2881
01:41:26,480 --> 01:41:27,280
but

2882
01:41:27,280 --> 01:41:29,760
um my thinking was maybe we can do

2883
01:41:29,760 --> 01:41:32,159
something simpler that is just a small

2884
01:41:32,159 --> 01:41:34,239
extension to connect udp

2885
01:41:34,239 --> 01:41:36,880
so that's what this draft is but at the

2886
01:41:36,880 --> 01:41:39,119
end of the day like the question that

2887
01:41:39,119 --> 01:41:42,560
i'm asking the working group the most is

2888
01:41:42,560 --> 01:41:44,960
which direction do we want to take for

2889
01:41:44,960 --> 01:41:48,239
browsers doing webrtc over

2890
01:41:48,239 --> 01:41:49,600
mask

2891
01:41:49,600 --> 01:41:51,280
do we want an extension connector dp or

2892
01:41:51,280 --> 01:41:53,040
do we want to use connect ip that's the

2893
01:41:53,040 --> 01:41:54,480
real question for the working group i'm

2894
01:41:54,480 --> 01:41:56,320
going to quickly run you through next

2895
01:41:56,320 --> 01:41:58,000
slide please

2896
01:41:58,000 --> 01:42:01,000
um

2897
01:42:01,600 --> 01:42:05,280
so um connect qdp is great

2898
01:42:05,280 --> 01:42:07,600
um but it only allows connecting one

2899
01:42:07,600 --> 01:42:09,119
five tuple so that works when you're

2900
01:42:09,119 --> 01:42:11,280
only talking to one target but that

2901
01:42:11,280 --> 01:42:13,199
doesn't work for webrtc next slide

2902
01:42:13,199 --> 01:42:15,839
please

2903
01:42:16,960 --> 01:42:18,800
so

2904
01:42:18,800 --> 01:42:20,480
let's see how this works so the way it

2905
01:42:20,480 --> 01:42:22,880
works today alice talks to the stunt

2906
01:42:22,880 --> 01:42:23,840
server

2907
01:42:23,840 --> 01:42:25,679
the stun server

2908
01:42:25,679 --> 01:42:28,400
is also talking to bob it tells bob

2909
01:42:28,400 --> 01:42:30,560
alice's address and then alice and bob

2910
01:42:30,560 --> 01:42:32,080
could talk directly of course there's a

2911
01:42:32,080 --> 01:42:34,800
lot more positive complication but

2912
01:42:34,800 --> 01:42:36,239
for the purpose of this that's what

2913
01:42:36,239 --> 01:42:39,280
matters next slide please

2914
01:42:39,280 --> 01:42:40,800
and they can have their very interesting

2915
01:42:40,800 --> 01:42:44,480
voice call next slide

2916
01:42:44,560 --> 01:42:47,199
so now if we have a proxy in the mix

2917
01:42:47,199 --> 01:42:49,760
that we want to do mask with

2918
01:42:49,760 --> 01:42:51,360
alice is going through the proxy for

2919
01:42:51,360 --> 01:42:52,400
everything

2920
01:42:52,400 --> 01:42:54,400
the proxy talks to the stun server the

2921
01:42:54,400 --> 01:42:56,400
stun server tells bob the address of the

2922
01:42:56,400 --> 01:42:59,040
proxy bob talks the proxy next slide

2923
01:42:59,040 --> 01:43:01,199
please and they can have this time their

2924
01:43:01,199 --> 01:43:03,280
very interesting voice call again

2925
01:43:03,280 --> 01:43:05,920
next slide

2926
01:43:06,159 --> 01:43:08,400
so

2927
01:43:08,960 --> 01:43:10,800
the feeling i got when tommy proposed

2928
01:43:10,800 --> 01:43:13,199
connect ip it was like okay

2929
01:43:13,199 --> 01:43:14,880
if you look at it the right way connect

2930
01:43:14,880 --> 01:43:16,639
ip is a hammer

2931
01:43:16,639 --> 01:43:18,080
um

2932
01:43:18,080 --> 01:43:20,159
but maybe it's not the best tool for

2933
01:43:20,159 --> 01:43:22,400
this job um

2934
01:43:22,400 --> 01:43:24,560
mainly because uh

2935
01:43:24,560 --> 01:43:27,040
speaking for chrome we don't have a user

2936
01:43:27,040 --> 01:43:29,360
space ip stack or user space udp stack

2937
01:43:29,360 --> 01:43:32,320
in there i'm willing to bet dinner that

2938
01:43:32,320 --> 01:43:35,119
firefox doesn't die there

2939
01:43:35,119 --> 01:43:36,320
and on

2940
01:43:36,320 --> 01:43:37,760
top of that you need to have every

2941
01:43:37,760 --> 01:43:40,880
datagram carry udp and ip headers which

2942
01:43:40,880 --> 01:43:42,320
is a bit silly when all you need is the

2943
01:43:42,320 --> 01:43:43,600
udp

2944
01:43:43,600 --> 01:43:45,920
payload and some addressing information

2945
01:43:45,920 --> 01:43:48,560
next slide

2946
01:43:49,199 --> 01:43:50,320
so

2947
01:43:50,320 --> 01:43:53,280
we do connect qdp it's great get a

2948
01:43:53,280 --> 01:43:54,880
bundle of slides

2949
01:43:54,880 --> 01:43:57,760
and it's connect2dp with that allows you

2950
01:43:57,760 --> 01:44:00,400
to talk to multiple targets from the

2951
01:44:00,400 --> 01:44:02,800
same source

2952
01:44:02,800 --> 01:44:05,440
next slide

2953
01:44:05,440 --> 01:44:07,679
so how does it work this part doesn't

2954
01:44:07,679 --> 01:44:10,000
really matter because like

2955
01:44:10,000 --> 01:44:11,600
this is sorely in the draft but all you

2956
01:44:11,600 --> 01:44:13,119
need to do is

2957
01:44:13,119 --> 01:44:14,239
for the

2958
01:44:14,239 --> 01:44:16,480
for the path that we've had before you

2959
01:44:16,480 --> 01:44:19,199
send stars instead of a target when you

2960
01:44:19,199 --> 01:44:22,159
get started to say i'm and then you have

2961
01:44:22,159 --> 01:44:24,239
a connect udp listen header we should

2962
01:44:24,239 --> 01:44:26,400
like shut this name but not today

2963
01:44:26,400 --> 01:44:27,520
um

2964
01:44:27,520 --> 01:44:28,560
and then

2965
01:44:28,560 --> 01:44:31,440
instead of just sending udp payload

2966
01:44:31,440 --> 01:44:34,080
oh yeah this registers a context id

2967
01:44:34,080 --> 01:44:35,920
which was the extensibility mechanism

2968
01:44:35,920 --> 01:44:38,480
built into connect udp and then you use

2969
01:44:38,480 --> 01:44:40,639
that context id and when that's present

2970
01:44:40,639 --> 01:44:42,800
you send your ip address and udp port

2971
01:44:42,800 --> 01:44:44,159
with each datagram so when you're

2972
01:44:44,159 --> 01:44:45,679
sending from the client

2973
01:44:45,679 --> 01:44:47,119
that gives you the target from the when

2974
01:44:47,119 --> 01:44:49,360
the proxy gets it it sends it to that

2975
01:44:49,360 --> 01:44:50,880
target when it gets something from a

2976
01:44:50,880 --> 01:44:52,800
target it puts those fields in there

2977
01:44:52,800 --> 01:44:54,560
when it sends it to the client so it

2978
01:44:54,560 --> 01:44:57,199
knows what the source was dirt simple

2979
01:44:57,199 --> 01:44:59,679
and that allows you to build stuff on

2980
01:44:59,679 --> 01:45:01,360
top of it and as usual it's turtles all

2981
01:45:01,360 --> 01:45:02,480
the way down

2982
01:45:02,480 --> 01:45:04,880
next slide

2983
01:45:04,880 --> 01:45:06,480
and

2984
01:45:06,480 --> 01:45:06,860
so

2985
01:45:06,860 --> 01:45:08,080
[Music]

2986
01:45:08,080 --> 01:45:11,360
discuss uh i i mainly want to hear about

2987
01:45:11,360 --> 01:45:15,199
the this versus connect ip but any other

2988
01:45:15,199 --> 01:45:16,960
questions on this do we think this is

2989
01:45:16,960 --> 01:45:21,040
reasonable um where do we go from here

2990
01:45:21,040 --> 01:45:24,159
all right all right jonathan is first

2991
01:45:24,159 --> 01:45:26,960
so is this sufficient that i could run

2992
01:45:26,960 --> 01:45:28,960
an https

2993
01:45:28,960 --> 01:45:30,560
uh server

2994
01:45:30,560 --> 01:45:32,880
http 3 server on my uh

2995
01:45:32,880 --> 01:45:35,280
you know and get incoming connections

2996
01:45:35,280 --> 01:45:36,080
uh

2997
01:45:36,080 --> 01:45:36,880
yes

2998
01:45:36,880 --> 01:45:38,800
we need this for tcp also

2999
01:45:38,800 --> 01:45:41,119
uh

3000
01:45:42,560 --> 01:45:43,679
so that would probably require an

3001
01:45:43,679 --> 01:45:45,760
extension to regular connect as opposed

3002
01:45:45,760 --> 01:45:48,639
to connect udp um but

3003
01:45:48,639 --> 01:45:50,400
yeah so i'm not particularly interested

3004
01:45:50,400 --> 01:45:52,239
in that i mean it just it just seems

3005
01:45:52,239 --> 01:45:54,320
like this is the sort of thing where

3006
01:45:54,320 --> 01:45:55,679
you know we're

3007
01:45:55,679 --> 01:45:58,080
probably already setting you know as

3008
01:45:58,080 --> 01:45:59,840
soon as any it first in the world hears

3009
01:45:59,840 --> 01:46:01,360
about these protocols their hair is on

3010
01:46:01,360 --> 01:46:03,600
fire this is you know adds gasoline to

3011
01:46:03,600 --> 01:46:06,080
their hair so

3012
01:46:06,080 --> 01:46:08,080
no thanks that's

3013
01:46:08,080 --> 01:46:09,600
i didn't thought about using it like

3014
01:46:09,600 --> 01:46:13,080
that that's evil i love it tommy um

3015
01:46:13,080 --> 01:46:14,480
[Music]

3016
01:46:14,480 --> 01:46:15,520
so

3017
01:46:15,520 --> 01:46:17,360
looking at this i think this is simple

3018
01:46:17,360 --> 01:46:19,280
and straightforward and

3019
01:46:19,280 --> 01:46:21,280
the problem with the connect ip

3020
01:46:21,280 --> 01:46:23,280
variant of it is that you don't really

3021
01:46:23,280 --> 01:46:25,920
have a port allocation service and so

3022
01:46:25,920 --> 01:46:28,159
like you get too much

3023
01:46:28,159 --> 01:46:30,239
um on this so i think this is cleaner

3024
01:46:30,239 --> 01:46:31,600
for that regard so i think we should

3025
01:46:31,600 --> 01:46:33,119
just adopt it and do it and i think it's

3026
01:46:33,119 --> 01:46:35,280
a very nice extension and it's actually

3027
01:46:35,280 --> 01:46:36,960
the most compelling extension i've seen

3028
01:46:36,960 --> 01:46:39,679
to actually use a context id

3029
01:46:39,679 --> 01:46:41,920
and i really want to have webrtc work

3030
01:46:41,920 --> 01:46:43,199
over this

3031
01:46:43,199 --> 01:46:45,280
cool yeah for probably similar reasons i

3032
01:46:45,280 --> 01:46:47,440
do

3033
01:46:47,520 --> 01:46:48,480
ben

3034
01:46:48,480 --> 01:46:49,520
hi

3035
01:46:49,520 --> 01:46:53,119
uh so i i do want this i don't think

3036
01:46:53,119 --> 01:46:54,800
it's as simple as it looks i made some

3037
01:46:54,800 --> 01:46:56,480
comments on the the list about some ways

3038
01:46:56,480 --> 01:46:58,480
in which it's uh doing it right is going

3039
01:46:58,480 --> 01:47:00,880
to be a little more complicated on

3040
01:47:00,880 --> 01:47:02,000
uh

3041
01:47:02,000 --> 01:47:04,480
on the point about running servers

3042
01:47:04,480 --> 01:47:06,719
this thing is basically turned and and

3043
01:47:06,719 --> 01:47:08,880
so we should take a good look at turn uh

3044
01:47:08,880 --> 01:47:10,400
one of the things that turn i believe

3045
01:47:10,400 --> 01:47:11,920
does is

3046
01:47:11,920 --> 01:47:13,760
uh make some recommendations about the

3047
01:47:13,760 --> 01:47:15,600
kinds of nat policy

3048
01:47:15,600 --> 01:47:16,560
that

3049
01:47:16,560 --> 01:47:19,679
uh that servers ought to offer

3050
01:47:19,679 --> 01:47:21,679
uh it basically says that you should do

3051
01:47:21,679 --> 01:47:23,840
address restricted not

3052
01:47:23,840 --> 01:47:26,080
um i think you know we don't need to

3053
01:47:26,080 --> 01:47:27,360
make a strong recommendation but we

3054
01:47:27,360 --> 01:47:29,600
should remind people to think about now

3055
01:47:29,600 --> 01:47:31,119
no that's that's a good point the way

3056
01:47:31,119 --> 01:47:32,560
i've been thinking about it in terms of

3057
01:47:32,560 --> 01:47:35,040
webrtc like this doesn't do all of turn

3058
01:47:35,040 --> 01:47:37,600
because it doesn't tell you which

3059
01:47:37,600 --> 01:47:40,000
public uh address imported assigned but

3060
01:47:40,000 --> 01:47:41,360
that's something we could actually

3061
01:47:41,360 --> 01:47:43,840
encode in the uh in the http response

3062
01:47:43,840 --> 01:47:45,600
pretty easily if we wanted to

3063
01:47:45,600 --> 01:47:48,719
and then the way i think about it it's a

3064
01:47:48,719 --> 01:47:51,280
i think full code nat i never remember

3065
01:47:51,280 --> 01:47:55,040
to which which kind of mad is which

3066
01:47:55,040 --> 01:47:56,400
all right anyway

3067
01:47:56,400 --> 01:47:58,000
at the end of the day it's an app where

3068
01:47:58,000 --> 01:48:00,080
you're sending stuff to your mask proxy

3069
01:48:00,080 --> 01:48:01,679
and it's coming out with another address

3070
01:48:01,679 --> 01:48:04,400
and then it's doing that mapping um

3071
01:48:04,400 --> 01:48:05,119
so

3072
01:48:05,119 --> 01:48:06,960
and you have just one not biting in this

3073
01:48:06,960 --> 01:48:08,960
case um but it's such a way that

3074
01:48:08,960 --> 01:48:10,719
multiple people can respond martin uh

3075
01:48:10,719 --> 01:48:12,719
debbie downer again um

3076
01:48:12,719 --> 01:48:14,239
yet another ambiguous thing in the

3077
01:48:14,239 --> 01:48:16,320
charter like server initiated services

3078
01:48:16,320 --> 01:48:19,199
are out of scope um

3079
01:48:19,199 --> 01:48:20,800
that's not service yeah that's the

3080
01:48:20,800 --> 01:48:23,360
that's the client asking for it

3081
01:48:23,360 --> 01:48:25,440
uh

3082
01:48:25,440 --> 01:48:27,840
that that is just as client initiated as

3083
01:48:27,840 --> 01:48:31,880
connected clients

3084
01:48:35,040 --> 01:48:37,360
so tony said not at the mic this is less

3085
01:48:37,360 --> 01:48:39,280
uh less server initiative than connect

3086
01:48:39,280 --> 01:48:40,960
id and i have to agree

3087
01:48:40,960 --> 01:48:42,880
all right that that's a reasonable like

3088
01:48:42,880 --> 01:48:44,400
to me it's more ambiguous than that but

3089
01:48:44,400 --> 01:48:45,920
nonetheless like i think that's a valid

3090
01:48:45,920 --> 01:48:47,360
interpretation

3091
01:48:47,360 --> 01:48:49,679
if like this is better than connect ips

3092
01:48:49,679 --> 01:48:51,760
like we can we can fix it but i think

3093
01:48:51,760 --> 01:48:52,960
we'll have to consider that a little bit

3094
01:48:52,960 --> 01:48:54,480
and see if anyone so that's fair and

3095
01:48:54,480 --> 01:48:56,239
then uh as soon as i drain the queue

3096
01:48:56,239 --> 01:48:57,679
we're gonna move on to the

3097
01:48:57,679 --> 01:49:00,679
privacy

3098
01:49:01,760 --> 01:49:03,760
so maybe tighten that text so that

3099
01:49:03,760 --> 01:49:06,239
there's no ambiguity there okay cool

3100
01:49:06,239 --> 01:49:07,280
um

3101
01:49:07,280 --> 01:49:10,639
i'm sorry lucas who's wrong

3102
01:49:10,960 --> 01:49:12,400
you hear me

3103
01:49:12,400 --> 01:49:14,480
yes how are you feeling

3104
01:49:14,480 --> 01:49:15,440
uh

3105
01:49:15,440 --> 01:49:17,119
okay um

3106
01:49:17,119 --> 01:49:20,239
i i think this extension is neat in the

3107
01:49:20,239 --> 01:49:22,880
sense that you know it's it's a fairly

3108
01:49:22,880 --> 01:49:24,880
small extension on top of something we

3109
01:49:24,880 --> 01:49:26,400
already have that's already been running

3110
01:49:26,400 --> 01:49:28,960
in production services for a while and

3111
01:49:28,960 --> 01:49:31,440
enable something that is useful while we

3112
01:49:31,440 --> 01:49:33,840
work on connect udp it's complementary

3113
01:49:33,840 --> 01:49:35,599
um yeah there's some technical stuff we

3114
01:49:35,599 --> 01:49:37,920
need to sort out but i i would support

3115
01:49:37,920 --> 01:49:38,719
this

3116
01:49:38,719 --> 01:49:40,480
doing this work

3117
01:49:40,480 --> 01:49:42,960
if it doesn't quite fit the charter as

3118
01:49:42,960 --> 01:49:44,880
written i think that's a great

3119
01:49:44,880 --> 01:49:47,599
um thing to to think about for the

3120
01:49:47,599 --> 01:49:49,760
charter considerations how do we how do

3121
01:49:49,760 --> 01:49:53,040
we maintain and extend uh drafts we uh

3122
01:49:53,040 --> 01:49:55,920
published or will imminently publish

3123
01:49:55,920 --> 01:49:57,360
thanks

3124
01:49:57,360 --> 01:49:58,639
awesome

3125
01:49:58,639 --> 01:50:01,199
thanks lukas i fully i well

3126
01:50:01,199 --> 01:50:03,360
i'll state my opinions on the charter in

3127
01:50:03,360 --> 01:50:05,119
in the charter section maryam

3128
01:50:05,119 --> 01:50:06,480
yeah it could have been it does feel

3129
01:50:06,480 --> 01:50:08,560
like a nice hack to me

3130
01:50:08,560 --> 01:50:10,800
and then

3131
01:50:10,800 --> 01:50:12,960
so but like i'm wondering why

3132
01:50:12,960 --> 01:50:13,840
like

3133
01:50:13,840 --> 01:50:15,199
if this is a hack then the right

3134
01:50:15,199 --> 01:50:17,280
solution would be connect ip and like if

3135
01:50:17,280 --> 01:50:18,400
you want port numbers then have an

3136
01:50:18,400 --> 01:50:20,080
extension to get port numbers on connect

3137
01:50:20,080 --> 01:50:22,080
ap like why doesn't connect ip give you

3138
01:50:22,080 --> 01:50:23,199
what you want

3139
01:50:23,199 --> 01:50:26,320
well because it's oodles of complexity

3140
01:50:26,320 --> 01:50:28,800
that are not needed and trust me if this

3141
01:50:28,800 --> 01:50:31,199
is a hack don't tell anyone but all of

3142
01:50:31,199 --> 01:50:33,760
mask is a hack we're proxying everything

3143
01:50:33,760 --> 01:50:35,440
over http

3144
01:50:35,440 --> 01:50:37,679
and we got away with it

3145
01:50:37,679 --> 01:50:39,199
what's the additional complexity i mean

3146
01:50:39,199 --> 01:50:41,119
maybe you actually want this complexity

3147
01:50:41,119 --> 01:50:42,960
to make sure that like addresses are

3148
01:50:42,960 --> 01:50:45,040
agreed in a right way and you have error

3149
01:50:45,040 --> 01:50:48,159
handling in only things

3150
01:50:48,639 --> 01:50:51,040
you know but like like the it's just

3151
01:50:51,040 --> 01:50:53,040
such not the right tool for the job like

3152
01:50:53,040 --> 01:50:56,639
i don't have an ip stack in my browser

3153
01:50:56,639 --> 01:50:57,920
yeah all right let's

3154
01:50:57,920 --> 01:51:00,159
let's

3155
01:51:02,320 --> 01:51:03,040
no

3156
01:51:03,040 --> 01:51:05,520
i i know that uh we because about to see

3157
01:51:05,520 --> 01:51:08,320
we already pulled sctp and dtls but you

3158
01:51:08,320 --> 01:51:09,520
know let's

3159
01:51:09,520 --> 01:51:13,040
let's not add more anyway magnus

3160
01:51:14,320 --> 01:51:15,599
yeah

3161
01:51:15,599 --> 01:51:17,599
yeah i think the biggest

3162
01:51:17,599 --> 01:51:19,920
one of the questions here is and i i

3163
01:51:19,920 --> 01:51:21,520
think we shouldn't take too hard on the

3164
01:51:21,520 --> 01:51:23,840
historical precedence here but i mean

3165
01:51:23,840 --> 01:51:25,920
there were reasons why turn was

3166
01:51:25,920 --> 01:51:27,040
um

3167
01:51:27,040 --> 01:51:28,960
endpoint dependent filtering you had to

3168
01:51:28,960 --> 01:51:29,920
center

3169
01:51:29,920 --> 01:51:32,560
set open up towards addresses you you

3170
01:51:32,560 --> 01:51:34,480
knew through the signaling

3171
01:51:34,480 --> 01:51:36,880
um i think that's probably fine to

3172
01:51:36,880 --> 01:51:39,199
release but just understanding that you

3173
01:51:39,199 --> 01:51:41,280
basically open up and um

3174
01:51:41,280 --> 01:51:43,520
i think that's fine probably but it's

3175
01:51:43,520 --> 01:51:45,520
it's it's a change when we've done

3176
01:51:45,520 --> 01:51:47,360
before in this space so

3177
01:51:47,360 --> 01:51:48,800
that's a good point and actually that's

3178
01:51:48,800 --> 01:51:50,239
a policy thing that we could totally say

3179
01:51:50,239 --> 01:51:52,080
in the spec uh it wouldn't change any of

3180
01:51:52,080 --> 01:51:53,360
the encoding but that's a good point we

3181
01:51:53,360 --> 01:51:55,280
should think about that and

3182
01:51:55,280 --> 01:51:56,560
you have more expertise than i do

3183
01:51:56,560 --> 01:51:58,639
unturned stuff so i agree

3184
01:51:58,639 --> 01:52:00,800
all right that's uh that's it for me on

3185
01:52:00,800 --> 01:52:04,000
this one back to you eric

3186
01:52:04,000 --> 01:52:06,800
thank you david

3187
01:52:07,360 --> 01:52:10,320
all right we've come to the fun part of

3188
01:52:10,320 --> 01:52:11,599
things

3189
01:52:11,599 --> 01:52:13,119
so

3190
01:52:13,119 --> 01:52:15,679
as david noted earlier both http

3191
01:52:15,679 --> 01:52:18,159
datagrams and connect2udp are now in the

3192
01:52:18,159 --> 01:52:21,119
rfc editor queue so a huge massive

3193
01:52:21,119 --> 01:52:23,679
thanks to everybody here and remote

3194
01:52:23,679 --> 01:52:25,280
for all of the discussion and really

3195
01:52:25,280 --> 01:52:27,199
good engagement and reviews of those

3196
01:52:27,199 --> 01:52:28,320
documents

3197
01:52:28,320 --> 01:52:30,400
they underwent significant evolution

3198
01:52:30,400 --> 01:52:31,920
from their inception to where they are

3199
01:52:31,920 --> 01:52:34,080
now and that's awesome so thank you all

3200
01:52:34,080 --> 01:52:35,520
for that you should be super proud of

3201
01:52:35,520 --> 01:52:37,599
that

3202
01:52:37,599 --> 01:52:39,679
connect ip is our last remaining item

3203
01:52:39,679 --> 01:52:41,360
there and we're making some pretty good

3204
01:52:41,360 --> 01:52:42,639
progress on that we've made good

3205
01:52:42,639 --> 01:52:45,040
progress so far in our last two hours

3206
01:52:45,040 --> 01:52:46,080
right here

3207
01:52:46,080 --> 01:52:48,159
so we're gonna keep iterating on that

3208
01:52:48,159 --> 01:52:50,080
trying to achieve interop

3209
01:52:50,080 --> 01:52:51,599
close out as many of the issues as we

3210
01:52:51,599 --> 01:52:53,520
can and once we've got some good interop

3211
01:52:53,520 --> 01:52:55,520
and the issues are drained we're gonna

3212
01:52:55,520 --> 01:52:57,360
try to move that along in the process

3213
01:52:57,360 --> 01:52:59,360
which means it is now time to talk about

3214
01:52:59,360 --> 01:53:02,719
rechartering so

3215
01:53:03,599 --> 01:53:05,119
in what i hope is not a super

3216
01:53:05,119 --> 01:53:06,719
controversial statement but let me know

3217
01:53:06,719 --> 01:53:09,440
if it is mask is not intended to be a

3218
01:53:09,440 --> 01:53:12,239
long-lived working group

3219
01:53:12,239 --> 01:53:13,199
so

3220
01:53:13,199 --> 01:53:16,159
i see a thumbs up from the audience

3221
01:53:16,159 --> 01:53:17,840
so that means that there are places

3222
01:53:17,840 --> 01:53:20,000
where we might extend functionality

3223
01:53:20,000 --> 01:53:22,159
within quick or within http and there

3224
01:53:22,159 --> 01:53:23,920
are long-lived working groups to handle

3225
01:53:23,920 --> 01:53:25,440
long-term maintenance of some of those

3226
01:53:25,440 --> 01:53:27,119
things

3227
01:53:27,119 --> 01:53:28,080
and

3228
01:53:28,080 --> 01:53:30,080
we're trying to talk about right now

3229
01:53:30,080 --> 01:53:31,920
kind of what is the boundary where do we

3230
01:53:31,920 --> 01:53:34,159
say we've done the initial set of things

3231
01:53:34,159 --> 01:53:36,080
that we need for mask and anything for

3232
01:53:36,080 --> 01:53:37,599
maintenance beyond this can be deferred

3233
01:53:37,599 --> 01:53:39,199
to one of the kind of more broadly

3234
01:53:39,199 --> 01:53:41,199
scoped groups

3235
01:53:41,199 --> 01:53:42,880
so far we've been thinking that anything

3236
01:53:42,880 --> 01:53:45,679
that's super specific to proxying and to

3237
01:53:45,679 --> 01:53:47,360
make mask actually work in the real

3238
01:53:47,360 --> 01:53:50,159
world makes sense to do here

3239
01:53:50,159 --> 01:53:52,400
so we've had a lot of discussions so far

3240
01:53:52,400 --> 01:53:54,560
in the initial kind of generic

3241
01:53:54,560 --> 01:53:57,040
underpinnings of mask as we define them

3242
01:53:57,040 --> 01:53:58,480
and in

3243
01:53:58,480 --> 01:54:00,080
as part of those discussions we've had a

3244
01:54:00,080 --> 01:54:01,440
number of different people propose

3245
01:54:01,440 --> 01:54:02,960
things that we say oh yes this can be

3246
01:54:02,960 --> 01:54:04,960
done as an extension and we want to make

3247
01:54:04,960 --> 01:54:06,639
sure that there is a time and a space to

3248
01:54:06,639 --> 01:54:08,000
talk about those things and so that's

3249
01:54:08,000 --> 01:54:10,560
kind of what we're proposing the next

3250
01:54:10,560 --> 01:54:12,320
phase of rechartering for mask looks

3251
01:54:12,320 --> 01:54:14,239
like

3252
01:54:14,239 --> 01:54:15,760
as part of that if we're going to talk

3253
01:54:15,760 --> 01:54:17,280
about doing some of these extensions

3254
01:54:17,280 --> 01:54:18,639
that we've brought up previously we need

3255
01:54:18,639 --> 01:54:20,800
to decide within our charter do we want

3256
01:54:20,800 --> 01:54:23,280
to explicitly name extensions do we want

3257
01:54:23,280 --> 01:54:25,440
to say we're going to do a

3258
01:54:25,440 --> 01:54:27,119
timestamp extension

3259
01:54:27,119 --> 01:54:29,440
as a random example

3260
01:54:29,440 --> 01:54:31,599
do we want to instead offer some

3261
01:54:31,599 --> 01:54:33,360
criteria for extensions and say we want

3262
01:54:33,360 --> 01:54:35,599
to do extensions of this type do we want

3263
01:54:35,599 --> 01:54:38,159
to be completely open-ended and say we

3264
01:54:38,159 --> 01:54:40,000
think that there's a small list of

3265
01:54:40,000 --> 01:54:41,599
extensions that people actually need and

3266
01:54:41,599 --> 01:54:42,960
are planning to deploy and that that's

3267
01:54:42,960 --> 01:54:45,119
going to kind of run itself down once we

3268
01:54:45,119 --> 01:54:46,880
get to a place where most people are you

3269
01:54:46,880 --> 01:54:48,400
know happy that we have a deployable

3270
01:54:48,400 --> 01:54:49,599
thing

3271
01:54:49,599 --> 01:54:51,520
and then we'll close things down

3272
01:54:51,520 --> 01:54:52,639
so

3273
01:54:52,639 --> 01:54:53,840
that's something that we'd really really

3274
01:54:53,840 --> 01:54:55,520
like some feedback on

3275
01:54:55,520 --> 01:54:57,679
uh the core underlying principle that i

3276
01:54:57,679 --> 01:54:59,280
think we're proposing and that i'd love

3277
01:54:59,280 --> 01:55:01,440
to discuss right now in addition to what

3278
01:55:01,440 --> 01:55:03,840
kind of criteria we should lay out

3279
01:55:03,840 --> 01:55:05,440
but the the core principle that i think

3280
01:55:05,440 --> 01:55:09,199
we're currently going for is we want to

3281
01:55:09,199 --> 01:55:11,440
include things in this charter that are

3282
01:55:11,440 --> 01:55:13,440
needed to make mask actually work for

3283
01:55:13,440 --> 01:55:16,480
real in the real world with real people

3284
01:55:16,480 --> 01:55:19,119
so if there's a thing that you need that

3285
01:55:19,119 --> 01:55:21,040
is okay i take the course back and i add

3286
01:55:21,040 --> 01:55:23,520
this extension and that makes my use

3287
01:55:23,520 --> 01:55:24,719
case that we discussed when we were

3288
01:55:24,719 --> 01:55:26,400
first bringing up mask in our long list

3289
01:55:26,400 --> 01:55:28,159
of different use cases

3290
01:55:28,159 --> 01:55:29,440
that's something that we kind of want to

3291
01:55:29,440 --> 01:55:31,440
make sure that we address

3292
01:55:31,440 --> 01:55:33,760
if it's not making mask work it's not

3293
01:55:33,760 --> 01:55:35,199
for real people or it's not in the real

3294
01:55:35,199 --> 01:55:37,679
world the current proposal is that we

3295
01:55:37,679 --> 01:55:41,520
keep that out of the next charter

3296
01:55:41,520 --> 01:55:43,760
that has one big asterisk next to it

3297
01:55:43,760 --> 01:55:45,280
which is around discovery and proxy

3298
01:55:45,280 --> 01:55:47,119
discovery because people do kind of need

3299
01:55:47,119 --> 01:55:49,360
to do some form of that sometimes that

3300
01:55:49,360 --> 01:55:50,880
means there's a text field you type

3301
01:55:50,880 --> 01:55:52,800
something into

3302
01:55:52,800 --> 01:55:54,719
and so we can talk about that so i see

3303
01:55:54,719 --> 01:55:56,639
we have two people in the queue

3304
01:55:56,639 --> 01:55:58,560
we're going to open it up for hop in the

3305
01:55:58,560 --> 01:56:00,480
queue now this is the happy moment to

3306
01:56:00,480 --> 01:56:02,400
express your opinions but the things

3307
01:56:02,400 --> 01:56:04,960
we're most interested in focusing on are

3308
01:56:04,960 --> 01:56:05,920
first

3309
01:56:05,920 --> 01:56:08,639
what kind of criteria should we have for

3310
01:56:08,639 --> 01:56:10,320
what we want to include what is in scope

3311
01:56:10,320 --> 01:56:12,080
for our next set of work and out of

3312
01:56:12,080 --> 01:56:15,440
scope um two are there specific things

3313
01:56:15,440 --> 01:56:16,960
that we need in order to make mass work

3314
01:56:16,960 --> 01:56:18,239
in the real world that we haven't

3315
01:56:18,239 --> 01:56:20,239
thought about and three is there

3316
01:56:20,239 --> 01:56:21,360
anything from this list that we're

3317
01:56:21,360 --> 01:56:22,800
missing

3318
01:56:22,800 --> 01:56:25,199
david you're first thanks and i would

3319
01:56:25,199 --> 01:56:27,599
love to see our ad

3320
01:56:27,599 --> 01:56:30,239
in the queue to get their thoughts uh on

3321
01:56:30,239 --> 01:56:31,679
this at some point

3322
01:56:31,679 --> 01:56:34,159
um or then again they can

3323
01:56:34,159 --> 01:56:35,679
we'll get their thoughts when we try to

3324
01:56:35,679 --> 01:56:37,679
change the charter anyway

3325
01:56:37,679 --> 01:56:39,520
um

3326
01:56:39,520 --> 01:56:42,719
but so my general take on this is when

3327
01:56:42,719 --> 01:56:45,679
you start new work it's very important

3328
01:56:45,679 --> 01:56:48,080
for the charter to be extremely tight so

3329
01:56:48,080 --> 01:56:50,639
we don't go around doing crazy things

3330
01:56:50,639 --> 01:56:52,560
and we agree on very small set of

3331
01:56:52,560 --> 01:56:54,840
deliverables that we get

3332
01:56:54,840 --> 01:56:58,080
done i would say quickly but you know i

3333
01:56:58,080 --> 01:56:59,920
guess two years as quickly

3334
01:56:59,920 --> 01:57:01,119
um

3335
01:57:01,119 --> 01:57:02,000
so

3336
01:57:02,000 --> 01:57:03,760
we had a great charter however now that

3337
01:57:03,760 --> 01:57:06,080
we're done with those

3338
01:57:06,080 --> 01:57:08,400
branching like deciding what we want to

3339
01:57:08,400 --> 01:57:11,840
work on next to me should be a matter of

3340
01:57:11,840 --> 01:57:13,760
who wants to do the work who wants to

3341
01:57:13,760 --> 01:57:15,280
write documents we want to implement

3342
01:57:15,280 --> 01:57:17,119
this who's going to use this

3343
01:57:17,119 --> 01:57:20,719
and i don't think that we need like the

3344
01:57:20,719 --> 01:57:22,560
help of the charter

3345
01:57:22,560 --> 01:57:23,599
to

3346
01:57:23,599 --> 01:57:26,159
scope us down that like if we tighten it

3347
01:57:26,159 --> 01:57:28,639
too much it would get in our way

3348
01:57:28,639 --> 01:57:30,800
so i would recommend to be very open in

3349
01:57:30,800 --> 01:57:31,920
terms of

3350
01:57:31,920 --> 01:57:34,719
extensions to connect udp or connect ip

3351
01:57:34,719 --> 01:57:35,520
are

3352
01:57:35,520 --> 01:57:38,400
all on the table things like uh

3353
01:57:38,400 --> 01:57:42,800
discovery is on the table um

3354
01:57:42,800 --> 01:57:43,760
the

3355
01:57:43,760 --> 01:57:44,560
uh

3356
01:57:44,560 --> 01:57:45,360
the

3357
01:57:45,360 --> 01:57:46,960
other things you phrased as how do i

3358
01:57:46,960 --> 01:57:49,040
make this work is on the table

3359
01:57:49,040 --> 01:57:51,040
maybe if someone wants to write an ops

3360
01:57:51,040 --> 01:57:53,199
document of how do you run a fleet of

3361
01:57:53,199 --> 01:57:55,520
mask proxies that could be on the table

3362
01:57:55,520 --> 01:57:57,840
and then our gate for

3363
01:57:57,840 --> 01:58:00,159
whether we work on something or not

3364
01:58:00,159 --> 01:58:02,639
is the adoption call

3365
01:58:02,639 --> 01:58:04,320
of course

3366
01:58:04,320 --> 01:58:06,560
i would would like to see what the ad

3367
01:58:06,560 --> 01:58:08,480
the isg has to say about that because at

3368
01:58:08,480 --> 01:58:09,679
the end of the day they're the ones who

3369
01:58:09,679 --> 01:58:11,920
decide but that would be my personal pro

3370
01:58:11,920 --> 01:58:12,719
like

3371
01:58:12,719 --> 01:58:15,199
preference

3372
01:58:15,599 --> 01:58:16,560
tommy

3373
01:58:16,560 --> 01:58:19,199
all right um

3374
01:58:19,199 --> 01:58:20,480
so i mean i definitely think that

3375
01:58:20,480 --> 01:58:23,199
opening up for extensions is important

3376
01:58:23,199 --> 01:58:25,040
um

3377
01:58:25,040 --> 01:58:28,000
i agree that we should not name specific

3378
01:58:28,000 --> 01:58:30,800
extensions um

3379
01:58:30,800 --> 01:58:32,960
i think the main reason for that is like

3380
01:58:32,960 --> 01:58:34,719
we just saw the first presentation about

3381
01:58:34,719 --> 01:58:36,560
an extension on udp listening and i

3382
01:58:36,560 --> 01:58:38,159
think that's very important

3383
01:58:38,159 --> 01:58:39,920
and like we just got that now that does

3384
01:58:39,920 --> 01:58:41,440
like we will find something else and we

3385
01:58:41,440 --> 01:58:44,159
don't want to preclude it

3386
01:58:44,159 --> 01:58:45,599
it may be worth mentioning in the

3387
01:58:45,599 --> 01:58:47,040
charter like other than just like

3388
01:58:47,040 --> 01:58:49,599
open-ended extensions of all types

3389
01:58:49,599 --> 01:58:51,360
like suggested areas and it's like some

3390
01:58:51,360 --> 01:58:52,560
of the things that just came to mind are

3391
01:58:52,560 --> 01:58:53,679
like

3392
01:58:53,679 --> 01:58:54,800
one thing we want to make sure we have

3393
01:58:54,800 --> 01:58:56,239
enough extensions to use the

3394
01:58:56,239 --> 01:58:58,159
extensibility points we've created like

3395
01:58:58,159 --> 01:59:00,719
context ids the udp list one uses that

3396
01:59:00,719 --> 01:59:02,719
but like making sure we exercise the

3397
01:59:02,719 --> 01:59:07,040
mechanisms we've defined is a good goal

3398
01:59:07,199 --> 01:59:09,920
adding extensions to do like

3399
01:59:09,920 --> 01:59:12,719
obvious functional proxying things like

3400
01:59:12,719 --> 01:59:14,719
udp listen like this is a new functional

3401
01:59:14,719 --> 01:59:16,560
capability of a proxy that was missing i

3402
01:59:16,560 --> 01:59:18,960
think that's a very obvious category

3403
01:59:18,960 --> 01:59:20,880
and then also things that make this

3404
01:59:20,880 --> 01:59:22,880
proxy more efficient i think that

3405
01:59:22,880 --> 01:59:24,719
includes compression

3406
01:59:24,719 --> 01:59:26,159
or we have our stuff for forwarding but

3407
01:59:26,159 --> 01:59:27,520
there's like things to make this stuff

3408
01:59:27,520 --> 01:59:29,760
work faster or make sure you can do the

3409
01:59:29,760 --> 01:59:31,920
zero rtt requests

3410
01:59:31,920 --> 01:59:34,159
i think that's another category of

3411
01:59:34,159 --> 01:59:36,400
good benefit

3412
01:59:36,400 --> 01:59:38,000
um

3413
01:59:38,000 --> 01:59:39,840
since it's open-ended and we don't want

3414
01:59:39,840 --> 01:59:41,760
this to be a forever working group maybe

3415
01:59:41,760 --> 01:59:44,159
one suggestion would be to have like a

3416
01:59:44,159 --> 01:59:46,560
time box to re-evaluate to say like

3417
01:59:46,560 --> 01:59:48,639
we will operate in this mode for

3418
01:59:48,639 --> 01:59:50,480
two years or three isu can decide for

3419
01:59:50,480 --> 01:59:52,560
how long and then we will reevaluate how

3420
01:59:52,560 --> 01:59:54,159
those extensions are going and decide to

3421
01:59:54,159 --> 01:59:56,400
say yes this is active or like no these

3422
01:59:56,400 --> 01:59:57,679
have become

3423
01:59:57,679 --> 02:00:00,159
this trailing edge and we need to stop

3424
02:00:00,159 --> 02:00:02,800
but give ourselves a box

3425
02:00:02,800 --> 02:00:05,520
um with regards to discovery

3426
02:00:05,520 --> 02:00:06,960
i'm okay leaving it out for now because

3427
02:00:06,960 --> 02:00:08,639
i think that is a much broader

3428
02:00:08,639 --> 02:00:10,960
discussion than we need for this group

3429
02:00:10,960 --> 02:00:12,800
but i could be convinced otherwise if

3430
02:00:12,800 --> 02:00:14,560
people are very passionate about that

3431
02:00:14,560 --> 02:00:16,960
belonging here but i think it's good to

3432
02:00:16,960 --> 02:00:18,960
have a place where we can talk about the

3433
02:00:18,960 --> 02:00:21,679
protocol bits

3434
02:00:24,159 --> 02:00:26,800
well spencer dawkins um

3435
02:00:26,800 --> 02:00:29,920
gosh you all are good at generating

3436
02:00:29,920 --> 02:00:32,480
questions before i get to the mic

3437
02:00:32,480 --> 02:00:33,280
um

3438
02:00:33,280 --> 02:00:35,920
i want to make sure i understood uh

3439
02:00:35,920 --> 02:00:38,400
you correctly when you were saying

3440
02:00:38,400 --> 02:00:40,159
you said two things back to back and you

3441
02:00:40,159 --> 02:00:41,599
were talking about

3442
02:00:41,599 --> 02:00:42,400
uh

3443
02:00:42,400 --> 02:00:45,280
maintenance going to

3444
02:00:45,280 --> 02:00:47,639
other working groups like like

3445
02:00:47,639 --> 02:00:51,280
https or or wherever um

3446
02:00:51,280 --> 02:00:52,400
with that

3447
02:00:52,400 --> 02:00:54,800
is your intention that uh

3448
02:00:54,800 --> 02:00:56,960
the mass specification the mass connect

3449
02:00:56,960 --> 02:00:59,119
specifications would go to the

3450
02:00:59,119 --> 02:01:00,800
appropriate working group wherever that

3451
02:01:00,800 --> 02:01:01,599
is

3452
02:01:01,599 --> 02:01:03,280
for maintenance

3453
02:01:03,280 --> 02:01:05,440
and especially as you're

3454
02:01:05,440 --> 02:01:08,159
starting starting to get

3455
02:01:08,159 --> 02:01:11,360
deployment experience from outside the

3456
02:01:11,360 --> 02:01:14,800
original implementer community

3457
02:01:14,800 --> 02:01:17,360
yeah so

3458
02:01:17,599 --> 02:01:19,520
two-part answer the first part is that

3459
02:01:19,520 --> 02:01:21,760
the line for where we draw that line

3460
02:01:21,760 --> 02:01:23,599
yeah something that we'd like feedback

3461
02:01:23,599 --> 02:01:24,639
on right i think that's something we

3462
02:01:24,639 --> 02:01:26,080
want to agree on as a working group so

3463
02:01:26,080 --> 02:01:27,360
it may be that we say you know what

3464
02:01:27,360 --> 02:01:29,920
we're we're going to keep things in mask

3465
02:01:29,920 --> 02:01:32,080
until we've got significant you know

3466
02:01:32,080 --> 02:01:33,599
outside the itf deployment experience so

3467
02:01:33,599 --> 02:01:35,760
we can respond to things we say no

3468
02:01:35,760 --> 02:01:36,960
that's okay

3469
02:01:36,960 --> 02:01:38,960
you know connect and extended connect

3470
02:01:38,960 --> 02:01:39,679
are

3471
02:01:39,679 --> 02:01:41,840
ostensibly part of hcp and it's okay to

3472
02:01:41,840 --> 02:01:43,760
have an umbrella group especially given

3473
02:01:43,760 --> 02:01:46,880
our shared constituency here and there

3474
02:01:46,880 --> 02:01:49,520
um but i think the the long-term answer

3475
02:01:49,520 --> 02:01:52,159
is we're we spun up this group in part

3476
02:01:52,159 --> 02:01:54,480
originally because we wanted to get a

3477
02:01:54,480 --> 02:01:56,080
mix of audiences especially as we're

3478
02:01:56,080 --> 02:01:57,920
talking about things like ip proxying

3479
02:01:57,920 --> 02:02:00,320
and some more transport folks there

3480
02:02:00,320 --> 02:02:02,480
but the mechanisms themselves and some

3481
02:02:02,480 --> 02:02:04,239
of that long-term maintenance we've been

3482
02:02:04,239 --> 02:02:07,040
envisioning being able to

3483
02:02:07,040 --> 02:02:08,960
route correctly for lack of a better

3484
02:02:08,960 --> 02:02:10,560
term to the appropriate working groups

3485
02:02:10,560 --> 02:02:13,360
in long term

3486
02:02:13,520 --> 02:02:16,800
my my second comment was about

3487
02:02:16,800 --> 02:02:18,480
um

3488
02:02:18,480 --> 02:02:19,760
locating

3489
02:02:19,760 --> 02:02:20,960
things

3490
02:02:20,960 --> 02:02:23,360
uh i understand that that's a mass thing

3491
02:02:23,360 --> 02:02:25,599
for mass but

3492
02:02:25,599 --> 02:02:28,000
if i'm understanding the conversation

3493
02:02:28,000 --> 02:02:30,000
correctly it was also a mock thing for

3494
02:02:30,000 --> 02:02:33,040
mock this morning and um if i'm

3495
02:02:33,040 --> 02:02:35,679
remembering correctly we've gone through

3496
02:02:35,679 --> 02:02:37,920
a couple of rounds of chartering working

3497
02:02:37,920 --> 02:02:40,000
groups where

3498
02:02:40,000 --> 02:02:41,920
you know discovery was out you know was

3499
02:02:41,920 --> 02:02:43,440
without a scope

3500
02:02:43,440 --> 02:02:45,760
and uh i feel like somebody's gonna have

3501
02:02:45,760 --> 02:02:48,480
to be able to discover something somehow

3502
02:02:48,480 --> 02:02:51,520
um eventually you know at some point so

3503
02:02:51,520 --> 02:02:51,760
uh

3504
02:02:51,760 --> 02:02:53,040
[Music]

3505
02:02:53,040 --> 02:02:55,679
whether that happens here

3506
02:02:55,679 --> 02:02:58,960
or somewhere else or in the right place

3507
02:02:58,960 --> 02:03:01,520
um you know that's

3508
02:03:01,520 --> 02:03:03,840
yeah that would not be my call but i

3509
02:03:03,840 --> 02:03:06,960
would encourage people to think about

3510
02:03:06,960 --> 02:03:10,080
uh that more and you know and to support

3511
02:03:10,080 --> 02:03:11,119
uh

3512
02:03:11,119 --> 02:03:13,520
proposals for

3513
02:03:13,520 --> 02:03:15,760
putting discovery in the right place

3514
02:03:15,760 --> 02:03:18,000
thank you thank you all right keep it

3515
02:03:18,000 --> 02:03:20,000
super quick ben and then magnus if you

3516
02:03:20,000 --> 02:03:21,119
still want to talk let's go i don't

3517
02:03:21,119 --> 02:03:25,119
think anybody knows what discovery means

3518
02:03:25,440 --> 02:03:27,440
to the and i think that that's probably

3519
02:03:27,440 --> 02:03:28,880
because it doesn't actually make sense

3520
02:03:28,880 --> 02:03:30,560
in the context of mask you don't

3521
02:03:30,560 --> 02:03:32,320
discover a mask server i think

3522
02:03:32,320 --> 02:03:34,239
configuration is important

3523
02:03:34,239 --> 02:03:36,560
unsurprisingly and should be in scope i

3524
02:03:36,560 --> 02:03:39,599
think client authorization is as we've

3525
02:03:39,599 --> 02:03:41,280
just been discussing is important and

3526
02:03:41,280 --> 02:03:42,639
should be in scope

3527
02:03:42,639 --> 02:03:43,520
uh

3528
02:03:43,520 --> 02:03:44,480
i

3529
02:03:44,480 --> 02:03:46,080
uh

3530
02:03:46,080 --> 02:03:47,119
and

3531
02:03:47,119 --> 02:03:49,119
uh okay i'll leave it there

3532
02:03:49,119 --> 02:03:51,360
thank you sir magnus

3533
02:03:51,360 --> 02:03:54,079
yeah um not that much i i do support

3534
02:03:54,079 --> 02:03:56,159
that there are gonna be a contour of

3535
02:03:56,159 --> 02:03:57,840
extensions that we need to support here

3536
02:03:57,840 --> 02:03:59,679
and then

3537
02:03:59,679 --> 02:04:01,760
just try to figure out this

3538
02:04:01,760 --> 02:04:03,760
uh during the next

3539
02:04:03,760 --> 02:04:05,360
up to the next meeting i think give us

3540
02:04:05,360 --> 02:04:06,880
some time there to think about what we

3541
02:04:06,880 --> 02:04:08,159
actually want to do

3542
02:04:08,159 --> 02:04:09,440
sounds good and it would be great to

3543
02:04:09,440 --> 02:04:11,520
send notes to the list as to hey this is

3544
02:04:11,520 --> 02:04:13,360
an extension we were thinking of uh 30

3545
02:04:13,360 --> 02:04:15,840
seconds i promise

3546
02:04:15,840 --> 02:04:17,679
i'm inclined to recharter i do not have

3547
02:04:17,679 --> 02:04:19,440
strong convictions about the technical

3548
02:04:19,440 --> 02:04:21,280
content of that recharger

3549
02:04:21,280 --> 02:04:22,079
um

3550
02:04:22,079 --> 02:04:23,679
except they were not as people said

3551
02:04:23,679 --> 02:04:25,920
we're not chartering mask m

3552
02:04:25,920 --> 02:04:29,440
and um i i think uh the the key thing

3553
02:04:29,440 --> 02:04:30,960
here is figuring out like i think there

3554
02:04:30,960 --> 02:04:33,199
will be extension poles forever

3555
02:04:33,199 --> 02:04:34,560
and i think we have to figure out what

3556
02:04:34,560 --> 02:04:36,639
is the the off-ramp to hand those

3557
02:04:36,639 --> 02:04:39,280
extension proposals to the other

3558
02:04:39,280 --> 02:04:41,840
steward working groups here and i'd be

3559
02:04:41,840 --> 02:04:43,440
interested i mean i think the time box

3560
02:04:43,440 --> 02:04:45,040
is is like

3561
02:04:45,040 --> 02:04:47,119
a course way of doing that um but i

3562
02:04:47,119 --> 02:04:49,199
think we need to figure out

3563
02:04:49,199 --> 02:04:50,960
maybe something more substantive there

3564
02:04:50,960 --> 02:04:53,760
on what our exit criteria are thank you

3565
02:04:53,760 --> 02:04:56,719
thank you very much and thank you all

3566
02:04:56,719 --> 02:04:58,400
have a great rest of your evening in

3567
02:04:58,400 --> 02:05:01,400
plenary

3568
02:05:12,270 --> 02:05:17,160
[Laughter]

3569
02:05:28,079 --> 02:05:31,559
relay ops

