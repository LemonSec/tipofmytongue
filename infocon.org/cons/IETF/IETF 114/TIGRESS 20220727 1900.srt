1
00:00:04,920 --> 00:00:07,259
but this it's the background that won't

2
00:00:07,259 --> 00:00:08,639
quit

3
00:00:08,639 --> 00:00:10,620
um and uh

4
00:00:10,620 --> 00:00:12,000
they

5
00:00:12,000 --> 00:00:14,639
I'm lady once on chair along with

6
00:00:14,639 --> 00:00:17,100
Patrick Jane from fastly it was remote

7
00:00:17,100 --> 00:00:18,720
today

8
00:00:18,720 --> 00:00:19,980
um

9
00:00:19,980 --> 00:00:22,020
and uh

10
00:00:22,020 --> 00:00:26,820
let's um let's flip the flip the slides

11
00:00:26,820 --> 00:00:30,480
and look at our agenda all right so

12
00:00:30,480 --> 00:00:32,700
we're gonna do the usual intro and then

13
00:00:32,700 --> 00:00:35,460
we're gonna let um

14
00:00:35,460 --> 00:00:37,559
um spend quite a bit of time this is the

15
00:00:37,559 --> 00:00:40,440
first working group meeting on a a an

16
00:00:40,440 --> 00:00:42,180
introduction

17
00:00:42,180 --> 00:00:44,460
um and then

18
00:00:44,460 --> 00:00:47,219
um we are going to talk about sort of

19
00:00:47,219 --> 00:00:49,800
the the proposed solutions for for

20
00:00:49,800 --> 00:00:52,620
solution space for the use case for the

21
00:00:52,620 --> 00:00:54,180
use case for the problem statements and

22
00:00:54,180 --> 00:00:55,440
then we're gonna

23
00:00:55,440 --> 00:00:57,300
see where we take it from there from

24
00:00:57,300 --> 00:00:58,320
here

25
00:00:58,320 --> 00:01:00,980
um next slide

26
00:01:01,559 --> 00:01:04,438
so since this is the ITF and since this

27
00:01:04,438 --> 00:01:06,659
is a new working group note the note

28
00:01:06,659 --> 00:01:08,640
well well

29
00:01:08,640 --> 00:01:10,619
um some of you are have probably never

30
00:01:10,619 --> 00:01:12,119
seen this before you may be new

31
00:01:12,119 --> 00:01:14,580
attendees and there there is a there's a

32
00:01:14,580 --> 00:01:17,159
whole lot of material behind this this

33
00:01:17,159 --> 00:01:19,680
summary go read that material and make

34
00:01:19,680 --> 00:01:21,060
sure you understand it before you

35
00:01:21,060 --> 00:01:22,560
contribute

36
00:01:22,560 --> 00:01:25,259
uh next slide

37
00:01:25,259 --> 00:01:28,320
ipf also as a code of conduct summarized

38
00:01:28,320 --> 00:01:31,200
in these four bullets

39
00:01:31,200 --> 00:01:33,900
um and for this meeting we also require

40
00:01:33,900 --> 00:01:35,880
masks at all times for meeting

41
00:01:35,880 --> 00:01:38,400
especially in the meeting rooms the only

42
00:01:38,400 --> 00:01:41,340
people who can take off their masks

43
00:01:41,340 --> 00:01:43,079
during meetings or the people are at the

44
00:01:43,079 --> 00:01:45,840
mic presenting

45
00:01:45,840 --> 00:01:47,159
um

46
00:01:47,159 --> 00:01:49,140
and remote

47
00:01:49,140 --> 00:01:52,280
yes very funny

48
00:01:53,399 --> 00:01:55,320
all right

49
00:01:55,320 --> 00:01:58,200
um with that

50
00:01:58,200 --> 00:02:01,500
um I'm going to invite

51
00:02:01,500 --> 00:02:05,820
um or um our initial contributors to the

52
00:02:05,820 --> 00:02:08,220
working group to come and present sort

53
00:02:08,220 --> 00:02:09,959
of the problem statement that led to

54
00:02:09,959 --> 00:02:12,660
this work being established

55
00:02:12,660 --> 00:02:14,459
um this is you know what we typically do

56
00:02:14,459 --> 00:02:16,140
in the IHF the first working group

57
00:02:16,140 --> 00:02:17,760
meeting we spend a little time making

58
00:02:17,760 --> 00:02:19,560
sure everybody understands what we're

59
00:02:19,560 --> 00:02:21,060
actually going to be doing

60
00:02:21,060 --> 00:02:22,620
that's not what we're going to be doing

61
00:02:22,620 --> 00:02:24,300
for the next and subsequent working

62
00:02:24,300 --> 00:02:25,620
group meeting so we're going to be

63
00:02:25,620 --> 00:02:27,420
actually doing work

64
00:02:27,420 --> 00:02:30,120
anyway so I don't know which of you is

65
00:02:30,120 --> 00:02:32,220
going to come up and present this line

66
00:02:32,220 --> 00:02:34,879
so Casey

67
00:02:35,519 --> 00:02:39,420
all right so uh

68
00:02:39,420 --> 00:02:41,380
there we go

69
00:02:41,380 --> 00:02:43,680
[Music]

70
00:02:43,680 --> 00:02:46,260
I'm gonna see if we can get the magical

71
00:02:46,260 --> 00:02:48,420
sort of remote control thingy working

72
00:02:48,420 --> 00:02:50,040
here

73
00:02:50,040 --> 00:02:52,700
we go

74
00:02:53,760 --> 00:02:56,879
all right okay

75
00:02:56,879 --> 00:02:59,159
hi everyone thank you so much for

76
00:02:59,159 --> 00:03:01,019
attending this is for the Tigress

77
00:03:01,019 --> 00:03:03,360
working group my name is Casey and I

78
00:03:03,360 --> 00:03:05,159
will be presenting alongside Alex and

79
00:03:05,159 --> 00:03:06,780
Dimitri who are sitting right here in

80
00:03:06,780 --> 00:03:08,159
front

81
00:03:08,159 --> 00:03:11,179
um next slide

82
00:03:12,840 --> 00:03:14,580
so this is just a little look over our

83
00:03:14,580 --> 00:03:16,440
agenda for today we're going to start

84
00:03:16,440 --> 00:03:18,239
off by talking through our problem

85
00:03:18,239 --> 00:03:20,220
statement for the working group the

86
00:03:20,220 --> 00:03:22,980
goals vocabulary and move into some use

87
00:03:22,980 --> 00:03:25,019
cases requirements and what is

88
00:03:25,019 --> 00:03:26,519
considered out of scope for the working

89
00:03:26,519 --> 00:03:29,099
group and we'll pause for a q a session

90
00:03:29,099 --> 00:03:32,040
after that and move on to our proposed

91
00:03:32,040 --> 00:03:33,959
solution and then a diagram of our

92
00:03:33,959 --> 00:03:35,580
stateless and stateful working flow

93
00:03:35,580 --> 00:03:37,920
which all makes sense when we present

94
00:03:37,920 --> 00:03:40,200
so I just asked that you have if you

95
00:03:40,200 --> 00:03:41,760
have questions you wait until the Q a

96
00:03:41,760 --> 00:03:43,500
session at the end of each of these two

97
00:03:43,500 --> 00:03:45,920
sections

98
00:03:46,980 --> 00:03:49,140
next I just wanted to list up our

99
00:03:49,140 --> 00:03:50,400
authors and contributors you can see

100
00:03:50,400 --> 00:03:51,480
there's quite a big list that's gone

101
00:03:51,480 --> 00:03:53,519
into contribute to this

102
00:03:53,519 --> 00:03:55,920
um to note we have Matt Byington also

103
00:03:55,920 --> 00:03:58,260
from Apple online and Nick Shaw from

104
00:03:58,260 --> 00:04:00,000
alphabet that will be help dealing

105
00:04:00,000 --> 00:04:02,040
questions after like during the Q a

106
00:04:02,040 --> 00:04:04,459
sessions

107
00:04:04,920 --> 00:04:06,720
all right with that we'll get started

108
00:04:06,720 --> 00:04:09,799
with the problem statement

109
00:04:11,519 --> 00:04:14,459
so as the prevalence of digital wallets

110
00:04:14,459 --> 00:04:16,620
has expanded there are more and more

111
00:04:16,620 --> 00:04:18,720
ways for the average user to add digital

112
00:04:18,720 --> 00:04:20,279
credentials to their wallets

113
00:04:20,279 --> 00:04:22,800
users wanted to take full advantage of

114
00:04:22,800 --> 00:04:24,960
the convenience and security offered by

115
00:04:24,960 --> 00:04:27,540
these digital wallets are moving towards

116
00:04:27,540 --> 00:04:30,180
dishing their physical Keys entirely

117
00:04:30,180 --> 00:04:32,580
naturally many scenarios come up in an

118
00:04:32,580 --> 00:04:33,960
everyday life where you'd want to share

119
00:04:33,960 --> 00:04:35,580
your key with somebody else and we're

120
00:04:35,580 --> 00:04:38,240
looking to find a solution for that

121
00:04:38,240 --> 00:04:41,460
so digital wallets exist on many

122
00:04:41,460 --> 00:04:43,440
different device types as well as device

123
00:04:43,440 --> 00:04:45,180
operating systems

124
00:04:45,180 --> 00:04:47,940
in addition digital wallets are have

125
00:04:47,940 --> 00:04:50,460
expanded to allow for different types of

126
00:04:50,460 --> 00:04:53,220
credentials or verticals to be added for

127
00:04:53,220 --> 00:04:55,800
example Hotel Keys car keys and home

128
00:04:55,800 --> 00:04:57,479
keys

129
00:04:57,479 --> 00:04:59,460
each solution has its own complexities

130
00:04:59,460 --> 00:05:01,620
and we seek to find a standardized

131
00:05:01,620 --> 00:05:04,580
solution for all of these

132
00:05:05,039 --> 00:05:07,620
so kind of our core problem statement is

133
00:05:07,620 --> 00:05:10,380
that today no standardized method exists

134
00:05:10,380 --> 00:05:12,360
in a cross-platform cross-vertical

135
00:05:12,360 --> 00:05:14,940
capacity that would enable users to

136
00:05:14,940 --> 00:05:18,380
share their credentials

137
00:05:18,600 --> 00:05:19,380
foreign

138
00:05:19,380 --> 00:05:21,840
so we have three main goals for this

139
00:05:21,840 --> 00:05:23,639
working group

140
00:05:23,639 --> 00:05:26,220
our first goal is to minimize fiction

141
00:05:26,220 --> 00:05:28,500
for sharing and cross-platform and cross

142
00:05:28,500 --> 00:05:32,100
vertical sharing so our goal is to

143
00:05:32,100 --> 00:05:34,320
create a layer onto a layer on top of

144
00:05:34,320 --> 00:05:37,320
existing protocols like HTTP to simplify

145
00:05:37,320 --> 00:05:39,479
the communication between devices of

146
00:05:39,479 --> 00:05:41,400
different operating systems we are not

147
00:05:41,400 --> 00:05:43,080
trying to create a new communication

148
00:05:43,080 --> 00:05:45,180
protocol by any means

149
00:05:45,180 --> 00:05:47,460
our goal is to Define a simple set of

150
00:05:47,460 --> 00:05:50,160
apis that can be implemented by any

151
00:05:50,160 --> 00:05:51,900
party while that party is leveraging

152
00:05:51,900 --> 00:05:54,120
their current ecosystem and their own

153
00:05:54,120 --> 00:05:56,699
implementation of secure credentials

154
00:05:56,699 --> 00:05:57,660
foreign

155
00:05:57,660 --> 00:05:59,520
this will allow us to minimize friction

156
00:05:59,520 --> 00:06:01,560
both for a new user that's trying to

157
00:06:01,560 --> 00:06:03,419
learn how to share as well as a new

158
00:06:03,419 --> 00:06:05,940
device OEM that's looking to like

159
00:06:05,940 --> 00:06:08,039
Implement sharing as well and being part

160
00:06:08,039 --> 00:06:10,280
of the network

161
00:06:10,280 --> 00:06:12,780
our next goal is to maintain Access

162
00:06:12,780 --> 00:06:14,460
Control

163
00:06:14,460 --> 00:06:18,060
so when a sender is sharing with their

164
00:06:18,060 --> 00:06:20,419
recipient that sender is actually

165
00:06:20,419 --> 00:06:23,520
approving that recipient for a subset of

166
00:06:23,520 --> 00:06:25,860
their own access so that that recipient

167
00:06:25,860 --> 00:06:28,500
can go talk like mint their own

168
00:06:28,500 --> 00:06:31,139
credential with the credential Authority

169
00:06:31,139 --> 00:06:33,539
if two people were to share the exact

170
00:06:33,539 --> 00:06:35,580
same key we wouldn't actually be able to

171
00:06:35,580 --> 00:06:37,080
maintain access control because we'd

172
00:06:37,080 --> 00:06:39,060
never know who was using a key at what

173
00:06:39,060 --> 00:06:41,699
time and so say I have one hotel Key and

174
00:06:41,699 --> 00:06:43,020
I'm sharing it with all my co-workers

175
00:06:43,020 --> 00:06:44,580
which is not the case we have our own

176
00:06:44,580 --> 00:06:45,960
rooms but

177
00:06:45,960 --> 00:06:47,580
um we wouldn't be able to just block one

178
00:06:47,580 --> 00:06:49,139
of us we'd have to block all of us or

179
00:06:49,139 --> 00:06:50,400
none of us

180
00:06:50,400 --> 00:06:52,740
so our goal here is to maintain Access

181
00:06:52,740 --> 00:06:54,479
Control throughout the whole sharing

182
00:06:54,479 --> 00:06:56,699
process including while you're in the

183
00:06:56,699 --> 00:06:58,680
transfer in case either party wants to

184
00:06:58,680 --> 00:07:00,780
back out at any moment

185
00:07:00,780 --> 00:07:02,940
and lastly or you have a lot of security

186
00:07:02,940 --> 00:07:05,460
and privacy goals

187
00:07:05,460 --> 00:07:07,080
um we will be talking about them later

188
00:07:07,080 --> 00:07:08,940
in the slide deck but we just want to

189
00:07:08,940 --> 00:07:10,500
make sure that all of these goals and

190
00:07:10,500 --> 00:07:12,900
requirements are met so that we have the

191
00:07:12,900 --> 00:07:14,580
safest experience for our users while

192
00:07:14,580 --> 00:07:18,380
also maintaining a nice user experience

193
00:07:18,979 --> 00:07:21,419
so I'm just going to Define some quick

194
00:07:21,419 --> 00:07:23,400
problem vocabulary all these are defined

195
00:07:23,400 --> 00:07:25,199
in our Charter I think as well as our

196
00:07:25,199 --> 00:07:27,479
draft just that you are aware while we

197
00:07:27,479 --> 00:07:29,160
move on

198
00:07:29,160 --> 00:07:30,539
so first we have the credential

199
00:07:30,539 --> 00:07:31,620
Authority

200
00:07:31,620 --> 00:07:34,259
so this is an entity which facilitates

201
00:07:34,259 --> 00:07:36,000
the trans facilitates credential

202
00:07:36,000 --> 00:07:39,000
information lifecycle on a device so the

203
00:07:39,000 --> 00:07:41,280
lifecycle might include provisioning of

204
00:07:41,280 --> 00:07:43,800
that credential information termination

205
00:07:43,800 --> 00:07:46,199
or update so you can think about if you

206
00:07:46,199 --> 00:07:47,639
have a hotel Key the credential

207
00:07:47,639 --> 00:07:49,680
Authority would be the hotel company

208
00:07:49,680 --> 00:07:51,720
that owns all those hotels and is saying

209
00:07:51,720 --> 00:07:55,460
oh I have access to XYZ room

210
00:07:55,680 --> 00:07:58,440
next we have credential information this

211
00:07:58,440 --> 00:08:00,180
is the information that's actually used

212
00:08:00,180 --> 00:08:03,240
to transact with that data point or that

213
00:08:03,240 --> 00:08:05,400
access point so it says like yes you can

214
00:08:05,400 --> 00:08:08,419
actually open that lock

215
00:08:09,300 --> 00:08:10,860
next we have the provisioning

216
00:08:10,860 --> 00:08:11,879
information

217
00:08:11,879 --> 00:08:14,220
this is the data that is the data

218
00:08:14,220 --> 00:08:16,080
structure transferred from the sender to

219
00:08:16,080 --> 00:08:18,000
the recipient that comprises the data

220
00:08:18,000 --> 00:08:20,340
both necessary and sufficient to

221
00:08:20,340 --> 00:08:23,599
provision it to the receiving device

222
00:08:23,879 --> 00:08:25,919
next we have the sender device so this

223
00:08:25,919 --> 00:08:27,360
is the device that initiates the

224
00:08:27,360 --> 00:08:29,160
transfer of provisioning information to

225
00:08:29,160 --> 00:08:31,379
the receiver device

226
00:08:31,379 --> 00:08:33,539
and in contrary we have the receiver

227
00:08:33,539 --> 00:08:34,979
device which is the device receiving

228
00:08:34,979 --> 00:08:36,899
that provisioning information so that

229
00:08:36,899 --> 00:08:38,640
they can use it to register or provision

230
00:08:38,640 --> 00:08:40,320
that credential information with the

231
00:08:40,320 --> 00:08:42,479
credential Authority

232
00:08:42,479 --> 00:08:45,120
and lastly we have the relay server so

233
00:08:45,120 --> 00:08:46,320
you can think of this just as an

234
00:08:46,320 --> 00:08:48,420
intermediary server and for our purposes

235
00:08:48,420 --> 00:08:49,680
we called it the relay server but it

236
00:08:49,680 --> 00:08:51,540
could go by any name

237
00:08:51,540 --> 00:08:53,279
so with that I'll pass it on to my

238
00:08:53,279 --> 00:08:55,939
quarker Alex

239
00:09:03,779 --> 00:09:06,660
thanks Casey now we'll be looking at

240
00:09:06,660 --> 00:09:08,580
thanks Casey now I'll be looking at some

241
00:09:08,580 --> 00:09:10,440
common use cases across three distinct

242
00:09:10,440 --> 00:09:12,660
verticals

243
00:09:12,660 --> 00:09:14,580
first we'll look at car key sharing

244
00:09:14,580 --> 00:09:16,500
let's say Ben owns a vehicle that

245
00:09:16,500 --> 00:09:18,180
supports digital Keys which comply with

246
00:09:18,180 --> 00:09:20,700
the CCC open standard and Ben would like

247
00:09:20,700 --> 00:09:22,140
to let Ryan borrow his car for his

248
00:09:22,140 --> 00:09:23,040
weekend

249
00:09:23,040 --> 00:09:25,019
or let's say Sam is going out for dinner

250
00:09:25,019 --> 00:09:26,459
and would like to park their car with

251
00:09:26,459 --> 00:09:28,200
the valet at the restaurant

252
00:09:28,200 --> 00:09:30,180
in both of these scenarios Ben and Sam

253
00:09:30,180 --> 00:09:31,500
would need to share their car key with

254
00:09:31,500 --> 00:09:33,660
another person

255
00:09:33,660 --> 00:09:36,180
second we'll explore home or residential

256
00:09:36,180 --> 00:09:38,580
key sharing let's say Brandon owns an

257
00:09:38,580 --> 00:09:40,200
apartment and is having Abby visit over

258
00:09:40,200 --> 00:09:41,160
the weekend

259
00:09:41,160 --> 00:09:42,779
if you would like to give Abby access to

260
00:09:42,779 --> 00:09:44,700
the apartment while she is visiting

261
00:09:44,700 --> 00:09:47,040
or let's say Sarah has a housekeeper

262
00:09:47,040 --> 00:09:48,899
that comes weekly and Sarah wants to

263
00:09:48,899 --> 00:09:50,580
give them access to the front door and

264
00:09:50,580 --> 00:09:52,680
only the front door

265
00:09:52,680 --> 00:09:54,600
in these cases sharing a digital key

266
00:09:54,600 --> 00:09:56,459
would provide an easier and more secure

267
00:09:56,459 --> 00:09:57,899
experience than having to give someone a

268
00:09:57,899 --> 00:10:00,060
physical key and digital keys can be

269
00:10:00,060 --> 00:10:01,980
revoked at any time so in the unlikely

270
00:10:01,980 --> 00:10:04,019
event of a personal falling out the key

271
00:10:04,019 --> 00:10:05,820
could be removed without having to

272
00:10:05,820 --> 00:10:07,200
coordinate with the receiver to get back

273
00:10:07,200 --> 00:10:09,600
the physical key

274
00:10:09,600 --> 00:10:12,959
and third hotoki sharing let's say Fred

275
00:10:12,959 --> 00:10:14,640
is staying at a hotel next week and the

276
00:10:14,640 --> 00:10:15,839
hotel supports digital access

277
00:10:15,839 --> 00:10:17,880
credentials and Fred added the

278
00:10:17,880 --> 00:10:19,800
credential to their phone his partner

279
00:10:19,800 --> 00:10:21,839
Daphne is joining later and Fred wants

280
00:10:21,839 --> 00:10:23,519
to send them the hotel Key digitally so

281
00:10:23,519 --> 00:10:24,660
they can access the room when they

282
00:10:24,660 --> 00:10:26,040
arrive

283
00:10:26,040 --> 00:10:28,320
or let's say Lexi is staying in a large

284
00:10:28,320 --> 00:10:29,640
hotel room that they are sharing with

285
00:10:29,640 --> 00:10:31,680
several people and Lexi wants to share

286
00:10:31,680 --> 00:10:33,600
the digital key to other guests so they

287
00:10:33,600 --> 00:10:35,459
can access the room

288
00:10:35,459 --> 00:10:37,440
these are just some common use cases we

289
00:10:37,440 --> 00:10:38,640
are working to solve with this working

290
00:10:38,640 --> 00:10:41,279
group but you could imagine many more

291
00:10:41,279 --> 00:10:42,899
use cases that will arise as digital

292
00:10:42,899 --> 00:10:46,100
Keys become more prevalent

293
00:10:47,880 --> 00:10:49,380
um and we're focusing on the digital key

294
00:10:49,380 --> 00:10:51,240
use cases because that was our first use

295
00:10:51,240 --> 00:10:53,279
case but there are tons of other use

296
00:10:53,279 --> 00:10:54,660
cases where credentials need to be

297
00:10:54,660 --> 00:10:57,480
transferred between devices securely

298
00:10:57,480 --> 00:10:59,339
so next we'll talk about requirements

299
00:10:59,339 --> 00:11:00,720
and constraints for the solution that

300
00:11:00,720 --> 00:11:03,660
this working group creates

301
00:11:03,660 --> 00:11:05,279
we expect our solution to have some

302
00:11:05,279 --> 00:11:06,540
general properties in order to

303
00:11:06,540 --> 00:11:09,480
facilitate a secure credential transfer

304
00:11:09,480 --> 00:11:11,519
a sender should be able to initiate the

305
00:11:11,519 --> 00:11:13,019
share over

306
00:11:13,019 --> 00:11:14,940
any communication channel for example

307
00:11:14,940 --> 00:11:17,519
email SMS WhatsApp Etc

308
00:11:17,519 --> 00:11:19,560
and a recipient should be able to view a

309
00:11:19,560 --> 00:11:23,399
preview of the share before accepting it

310
00:11:23,399 --> 00:11:25,440
the sender device and receiver device

311
00:11:25,440 --> 00:11:27,000
should be able to perform multiple

312
00:11:27,000 --> 00:11:28,680
round-trip Communications within a

313
00:11:28,680 --> 00:11:30,779
limited time frame after the initial

314
00:11:30,779 --> 00:11:32,399
share has been accepted

315
00:11:32,399 --> 00:11:33,600
and the receiver should be able to

316
00:11:33,600 --> 00:11:34,860
request additional provisioning

317
00:11:34,860 --> 00:11:37,740
information if needed

318
00:11:37,740 --> 00:11:39,300
the solution should not require that

319
00:11:39,300 --> 00:11:40,980
both the sender and receiver device are

320
00:11:40,980 --> 00:11:42,959
online at the same time and this is

321
00:11:42,959 --> 00:11:44,459
especially important for mobile devices

322
00:11:44,459 --> 00:11:46,740
using cellular data

323
00:11:46,740 --> 00:11:48,720
and the solution should support opaque

324
00:11:48,720 --> 00:11:50,339
message content based on the credential

325
00:11:50,339 --> 00:11:51,240
type

326
00:11:51,240 --> 00:11:53,040
and because the message content is

327
00:11:53,040 --> 00:11:54,660
opaque the solution should be able to

328
00:11:54,660 --> 00:11:56,459
handle arbitrary message formats

329
00:11:56,459 --> 00:11:58,260
including those adhering to public

330
00:11:58,260 --> 00:11:59,760
standards like the car connectivity

331
00:11:59,760 --> 00:12:00,839
Consortium

332
00:12:00,839 --> 00:12:02,519
and proprietary or close Community

333
00:12:02,519 --> 00:12:04,200
formats

334
00:12:04,200 --> 00:12:05,700
and the sender and receiver should be

335
00:12:05,700 --> 00:12:07,440
able to manage the transfer process and

336
00:12:07,440 --> 00:12:10,639
interrupt it at any time

337
00:12:14,220 --> 00:12:15,959
digital car keys represent access to

338
00:12:15,959 --> 00:12:18,240
very expensive assets and residential

339
00:12:18,240 --> 00:12:19,800
Keys Grant access to where people are

340
00:12:19,800 --> 00:12:22,019
staying so it is crucial that bad actors

341
00:12:22,019 --> 00:12:23,760
are unable to obtain digital credentials

342
00:12:23,760 --> 00:12:25,740
while they are being transferred

343
00:12:25,740 --> 00:12:27,959
so sufficient security measures must be

344
00:12:27,959 --> 00:12:29,700
embedded in the protocol in an effort to

345
00:12:29,700 --> 00:12:31,860
ensure only the intended recipient

346
00:12:31,860 --> 00:12:34,260
is able to provision the credential and

347
00:12:34,260 --> 00:12:35,880
to ensure the credentials can only be

348
00:12:35,880 --> 00:12:39,360
provisioned once anti-replay attacks

349
00:12:39,360 --> 00:12:41,160
we also want to ensure the sender has

350
00:12:41,160 --> 00:12:43,380
the intent to transfer proof of the fact

351
00:12:43,380 --> 00:12:45,120
that the share initiation is attributed

352
00:12:45,120 --> 00:12:48,920
to a valid device and a valid user

353
00:12:48,959 --> 00:12:51,060
in addition to our security goals it is

354
00:12:51,060 --> 00:12:52,740
also crucial that a user's privacy is

355
00:12:52,740 --> 00:12:53,940
protected while transferring a

356
00:12:53,940 --> 00:12:55,139
credential

357
00:12:55,139 --> 00:12:57,420
so aside from Network level metadata the

358
00:12:57,420 --> 00:12:58,440
relay server should not learn

359
00:12:58,440 --> 00:13:00,779
information about the sender or receiver

360
00:13:00,779 --> 00:13:02,459
the relay server should not be able to

361
00:13:02,459 --> 00:13:03,959
create associations between different

362
00:13:03,959 --> 00:13:05,940
shares and they should not be able to

363
00:13:05,940 --> 00:13:08,399
create a social graph

364
00:13:08,399 --> 00:13:09,959
the relay server should not be able to

365
00:13:09,959 --> 00:13:11,760
see sensitive details of the share like

366
00:13:11,760 --> 00:13:13,860
the provisioning information

367
00:13:13,860 --> 00:13:15,360
and the relay server should not be able

368
00:13:15,360 --> 00:13:17,339
to provision the credential itself acne

369
00:13:17,339 --> 00:13:19,680
as an intermediary for the receiver

370
00:13:19,680 --> 00:13:21,600
or a person in the middle attack

371
00:13:21,600 --> 00:13:23,220
and this is especially important because

372
00:13:23,220 --> 00:13:24,720
the relay server could have thousands of

373
00:13:24,720 --> 00:13:26,160
mailboxes full of provisioning

374
00:13:26,160 --> 00:13:27,839
information and the provisioning

375
00:13:27,839 --> 00:13:29,459
information is necessary and sufficient

376
00:13:29,459 --> 00:13:32,359
to redeem a credential

377
00:13:32,700 --> 00:13:36,959
so a lot goes into

378
00:13:36,959 --> 00:13:39,060
block goes into provisioning managing

379
00:13:39,060 --> 00:13:41,399
and using a digital credential and this

380
00:13:41,399 --> 00:13:42,779
working group is only focused on the

381
00:13:42,779 --> 00:13:44,180
transfer of the provisioning information

382
00:13:44,180 --> 00:13:46,260
so most of that is going to be out of

383
00:13:46,260 --> 00:13:47,519
scope for us

384
00:13:47,519 --> 00:13:49,139
and as part of the credential transfers

385
00:13:49,139 --> 00:13:50,820
some key aspects of the flow are also

386
00:13:50,820 --> 00:13:52,139
out of scope

387
00:13:52,139 --> 00:13:54,360
for example defining the mechanism the

388
00:13:54,360 --> 00:13:55,860
receiver will use in order to provision

389
00:13:55,860 --> 00:13:57,360
the credential with the credential

390
00:13:57,360 --> 00:13:59,639
Authority is out of scope

391
00:13:59,639 --> 00:14:01,740
and similarly the mechanism the sender

392
00:14:01,740 --> 00:14:03,600
device will use to get the provisioning

393
00:14:03,600 --> 00:14:04,680
information from the credential

394
00:14:04,680 --> 00:14:07,819
Authority is out of scope

395
00:14:07,860 --> 00:14:09,959
and the user interface that is displayed

396
00:14:09,959 --> 00:14:11,880
on the sender and receiver device during

397
00:14:11,880 --> 00:14:13,860
share initiation and share Redemption is

398
00:14:13,860 --> 00:14:15,660
out of scope for us and this will

399
00:14:15,660 --> 00:14:16,680
largely depend on the device

400
00:14:16,680 --> 00:14:19,260
manufacturer's interface guidelines

401
00:14:19,260 --> 00:14:21,420
and finally defining the format for each

402
00:14:21,420 --> 00:14:23,040
field within the encrypted data is out

403
00:14:23,040 --> 00:14:24,360
of scope

404
00:14:24,360 --> 00:14:25,980
for example the provisioning information

405
00:14:25,980 --> 00:14:27,720
message structure stored on the relay

406
00:14:27,720 --> 00:14:30,079
server

407
00:14:30,120 --> 00:14:31,740
and

408
00:14:31,740 --> 00:14:33,480
we hope by now we are able to provide a

409
00:14:33,480 --> 00:14:34,740
clear picture of the problem this

410
00:14:34,740 --> 00:14:36,899
working group is hoping to solve and we

411
00:14:36,899 --> 00:14:38,220
hope we've piqued your interest in the

412
00:14:38,220 --> 00:14:40,199
problem space as well before jumping

413
00:14:40,199 --> 00:14:41,579
into the solution we'll be happy to

414
00:14:41,579 --> 00:14:42,600
answer questions about the problem

415
00:14:42,600 --> 00:14:45,199
presented

416
00:14:46,579 --> 00:14:49,320
all right I see people running virtually

417
00:14:49,320 --> 00:14:52,160
at the mic so

418
00:14:52,980 --> 00:14:57,740
it's it's fine to run to the mic

419
00:14:58,019 --> 00:15:00,480
hi I'm I'm Jim Fenton

420
00:15:00,480 --> 00:15:02,160
when I look at your your problem

421
00:15:02,160 --> 00:15:04,620
statements and and I've I've uh skimmed

422
00:15:04,620 --> 00:15:05,880
your draft

423
00:15:05,880 --> 00:15:07,500
when I look at the problem statements I

424
00:15:07,500 --> 00:15:09,779
think of let's take the hotel room case

425
00:15:09,779 --> 00:15:12,660
if I want to have my partner let into my

426
00:15:12,660 --> 00:15:14,940
hotel room I would

427
00:15:14,940 --> 00:15:17,579
get my partner's public key

428
00:15:17,579 --> 00:15:19,800
tell the hotel let the person with this

429
00:15:19,800 --> 00:15:21,720
that proves ownership of this public key

430
00:15:21,720 --> 00:15:26,060
into my hotel room and uh problem solved

431
00:15:26,060 --> 00:15:29,100
uh similar situation for the others that

432
00:15:29,100 --> 00:15:30,660
you're showing so I I think if this is

433
00:15:30,660 --> 00:15:32,880
an authorization problem

434
00:15:32,880 --> 00:15:34,380
um why is

435
00:15:34,380 --> 00:15:37,440
that simple simpler I think solution not

436
00:15:37,440 --> 00:15:40,259
responsive to your requirements

437
00:15:40,259 --> 00:15:43,500
so our protocol is really uh more of a

438
00:15:43,500 --> 00:15:45,300
transfer protocol not authorization and

439
00:15:45,300 --> 00:15:47,040
so we could allow any sort of

440
00:15:47,040 --> 00:15:49,380
authorization to take place for example

441
00:15:49,380 --> 00:15:51,360
something like you are talking about

442
00:15:51,360 --> 00:15:54,120
where uh with pki could be transferred

443
00:15:54,120 --> 00:15:55,440
over the relay server and then back to

444
00:15:55,440 --> 00:15:57,959
the recipient device which is how car

445
00:15:57,959 --> 00:15:59,759
key sharing Works

446
00:15:59,759 --> 00:16:01,079
um or you know other completely

447
00:16:01,079 --> 00:16:02,759
disconnected types of credentials like

448
00:16:02,759 --> 00:16:04,680
Hotel Keys which are

449
00:16:04,680 --> 00:16:07,560
um symmetric keys well they don't have

450
00:16:07,560 --> 00:16:09,800
to be

451
00:16:09,959 --> 00:16:12,480
but but yeah I mean I it seems like

452
00:16:12,480 --> 00:16:14,759
you're focused on a particular protocol

453
00:16:14,759 --> 00:16:16,920
rather than on the problem statement is

454
00:16:16,920 --> 00:16:19,560
that true that you have particular

455
00:16:19,560 --> 00:16:21,779
protocol that you want to fit into this

456
00:16:21,779 --> 00:16:23,339
requirement rather than trying to solve

457
00:16:23,339 --> 00:16:24,839
a particular problem

458
00:16:24,839 --> 00:16:27,660
because you started with a problem

459
00:16:27,660 --> 00:16:30,120
so yes and no

460
00:16:30,120 --> 00:16:32,220
um the problem here is that we're trying

461
00:16:32,220 --> 00:16:34,620
to cover multiple credential types right

462
00:16:34,620 --> 00:16:37,320
and simply speaking about hotels some of

463
00:16:37,320 --> 00:16:40,259
them use symmetric key some isometric

464
00:16:40,259 --> 00:16:43,860
key pair and the example you gave with

465
00:16:43,860 --> 00:16:46,500
the public key of your partner it covers

466
00:16:46,500 --> 00:16:48,839
like as a matter keeper right but it

467
00:16:48,839 --> 00:16:50,519
doesn't cover the case with the

468
00:16:50,519 --> 00:16:52,920
symmetric key and at the same time we

469
00:16:52,920 --> 00:16:55,680
specifically mentioned that we want to

470
00:16:55,680 --> 00:16:57,779
have granular control over the

471
00:16:57,779 --> 00:17:00,720
credential which means if I'm sharing

472
00:17:00,720 --> 00:17:03,180
the same key with my partner and the key

473
00:17:03,180 --> 00:17:05,880
is reboot it's a vote for both of you

474
00:17:05,880 --> 00:17:08,160
but the example I gave gave you that

475
00:17:08,160 --> 00:17:10,319
granularity as well I'll let somebody

476
00:17:10,319 --> 00:17:12,359
else

477
00:17:12,359 --> 00:17:14,899
foreign

478
00:17:16,819 --> 00:17:19,439
Gilmore thanks for uh for bringing this

479
00:17:19,439 --> 00:17:20,760
forward obviously this is something that

480
00:17:20,760 --> 00:17:22,140
we're all going to be dealing with as

481
00:17:22,140 --> 00:17:23,579
more and more things require digital

482
00:17:23,579 --> 00:17:26,099
authentication so I appreciate you

483
00:17:26,099 --> 00:17:28,199
thinking about it I wonder whether you

484
00:17:28,199 --> 00:17:30,780
have any perspective on the

485
00:17:30,780 --> 00:17:32,160
um

486
00:17:32,160 --> 00:17:34,919
the hotel example uh and sort of the

487
00:17:34,919 --> 00:17:36,600
valet or housekeeper example I think are

488
00:17:36,600 --> 00:17:38,820
interesting where you have

489
00:17:38,820 --> 00:17:40,740
different authorities that are there I

490
00:17:40,740 --> 00:17:42,419
can't imagine that a hotel doesn't want

491
00:17:42,419 --> 00:17:44,940
me to share my key with the five folks

492
00:17:44,940 --> 00:17:47,460
that I met at the bar last night

493
00:17:47,460 --> 00:17:48,840
um but at the same time if I want to

494
00:17:48,840 --> 00:17:50,940
give somebody access to my car so they

495
00:17:50,940 --> 00:17:52,559
can drive me home I don't feel like I

496
00:17:52,559 --> 00:17:53,880
need to share that information with the

497
00:17:53,880 --> 00:17:55,980
car manufacturer so the car manufacturer

498
00:17:55,980 --> 00:17:57,900
might disagree so I'm wondering what

499
00:17:57,900 --> 00:18:01,559
your perspective is on the um

500
00:18:01,559 --> 00:18:03,240
on whether the framework that you're

501
00:18:03,240 --> 00:18:06,200
building will like who who controls

502
00:18:06,200 --> 00:18:08,340
knowledge about the different parties

503
00:18:08,340 --> 00:18:10,080
that are involved in your framework can

504
00:18:10,080 --> 00:18:12,240
you speak to that so all all of that is

505
00:18:12,240 --> 00:18:13,919
owned by the credential Authority at the

506
00:18:13,919 --> 00:18:15,780
end of the day and based on the use case

507
00:18:15,780 --> 00:18:18,660
the credential Authority could be uh you

508
00:18:18,660 --> 00:18:20,700
know the hotel chain or for car key it's

509
00:18:20,700 --> 00:18:22,860
your you're the credential Authority and

510
00:18:22,860 --> 00:18:24,960
so it's really it's out of scope for

511
00:18:24,960 --> 00:18:26,400
this working group what the credential

512
00:18:26,400 --> 00:18:28,080
Authority does we're just facilitating

513
00:18:28,080 --> 00:18:29,820
the transfer of the provisioning

514
00:18:29,820 --> 00:18:33,299
information that's used to before before

515
00:18:33,299 --> 00:18:34,980
we go on because there's been a little

516
00:18:34,980 --> 00:18:37,919
bit of confusion in the chat

517
00:18:37,919 --> 00:18:38,880
um

518
00:18:38,880 --> 00:18:41,580
about this working group this is in not

519
00:18:41,580 --> 00:18:43,200
in fact a working group pouring both

520
00:18:43,200 --> 00:18:45,360
it's a working group right so there is a

521
00:18:45,360 --> 00:18:47,100
charter Etc and the purpose of this

522
00:18:47,100 --> 00:18:49,320
presentation is to make sure that

523
00:18:49,320 --> 00:18:51,360
everybody understands or has a chance to

524
00:18:51,360 --> 00:18:53,640
catch up to and understand the problem

525
00:18:53,640 --> 00:18:56,700
description right so like let's let's

526
00:18:56,700 --> 00:18:58,860
try to zero in our comments and

527
00:18:58,860 --> 00:19:01,200
questions to clarifying and making sure

528
00:19:01,200 --> 00:19:03,419
that you have a chance to understand

529
00:19:03,419 --> 00:19:06,240
what's going on rather than propose

530
00:19:06,240 --> 00:19:07,860
alternative solutions to the same

531
00:19:07,860 --> 00:19:10,500
problem yeah I'm not trying to I want to

532
00:19:10,500 --> 00:19:12,059
be clear I'm actually asking this as a

533
00:19:12,059 --> 00:19:13,200
clarifying question because I want to

534
00:19:13,200 --> 00:19:15,419
understand what what we're thinking this

535
00:19:15,419 --> 00:19:19,380
scope is here perfect uh because I mean

536
00:19:19,380 --> 00:19:21,059
I can imagine there being car

537
00:19:21,059 --> 00:19:22,799
manufacturers and I won't have to I

538
00:19:22,799 --> 00:19:23,940
won't name them but I could imagine

539
00:19:23,940 --> 00:19:25,380
there being some car manufacturers who

540
00:19:25,380 --> 00:19:26,760
think they are the credential Authority

541
00:19:26,760 --> 00:19:28,559
for their cars

542
00:19:28,559 --> 00:19:31,799
and if I own a car I would like to think

543
00:19:31,799 --> 00:19:33,240
that I am the gradual Authority for my

544
00:19:33,240 --> 00:19:36,419
car and how how will this architecture

545
00:19:36,419 --> 00:19:38,220
that you're designing here

546
00:19:38,220 --> 00:19:41,700
uh make that ownership level clear

547
00:19:41,700 --> 00:19:44,700
uh and and will will it allow someone to

548
00:19:44,700 --> 00:19:46,380
say I would like to take ownership over

549
00:19:46,380 --> 00:19:48,780
this car from the from the manufacturer

550
00:19:48,780 --> 00:19:51,480
no so this uh great question by the way

551
00:19:51,480 --> 00:19:53,460
this protocol would not make any

552
00:19:53,460 --> 00:19:55,140
Distinction on who the credential

553
00:19:55,140 --> 00:19:58,020
Authority is or enforce any opinions on

554
00:19:58,020 --> 00:19:58,799
it

555
00:19:58,799 --> 00:20:01,080
um I think the entire relationship

556
00:20:01,080 --> 00:20:02,460
between the sender and receiver device

557
00:20:02,460 --> 00:20:04,220
and the credential Authority

558
00:20:04,220 --> 00:20:06,179
we're hoping not to tackle with this

559
00:20:06,179 --> 00:20:08,600
working group

560
00:20:09,000 --> 00:20:10,620
yeah and in addition to your question

561
00:20:10,620 --> 00:20:12,720
just to provide additional context for

562
00:20:12,720 --> 00:20:13,740
those of you that don't work with

563
00:20:13,740 --> 00:20:16,860
digital credentials every day so those

564
00:20:16,860 --> 00:20:18,900
relationships between like the actual

565
00:20:18,900 --> 00:20:21,179
device that has a secure credential and

566
00:20:21,179 --> 00:20:23,039
then that credential Authority if

567
00:20:23,039 --> 00:20:25,260
they're not in an open standard like the

568
00:20:25,260 --> 00:20:27,299
car contact car connectivity Consortium

569
00:20:27,299 --> 00:20:30,059
the CCC then it's up to that device OEM

570
00:20:30,059 --> 00:20:32,940
to really communicate with that uh a

571
00:20:32,940 --> 00:20:34,260
credential authority to figure out

572
00:20:34,260 --> 00:20:35,700
what's their technology and what their

573
00:20:35,700 --> 00:20:37,500
what is their needs so

574
00:20:37,500 --> 00:20:39,659
each time you talk to them it's like

575
00:20:39,659 --> 00:20:41,940
it's like each each one you have to

576
00:20:41,940 --> 00:20:43,200
basically do your own battle make sure

577
00:20:43,200 --> 00:20:45,179
those privacy pieces and those ownership

578
00:20:45,179 --> 00:20:46,919
pieces are like maintained as much as

579
00:20:46,919 --> 00:20:48,059
possible

580
00:20:48,059 --> 00:20:49,799
um on our those things are so

581
00:20:49,799 --> 00:20:50,940
complicated and we definitely don't want

582
00:20:50,940 --> 00:20:52,679
to tackle that within this transfer but

583
00:20:52,679 --> 00:20:56,059
it is something we think about a lot

584
00:20:56,520 --> 00:20:58,620
Sam Weiler I'm concerned about that

585
00:20:58,620 --> 00:21:00,419
answer and the word I would have used is

586
00:21:00,419 --> 00:21:01,740
permissionless

587
00:21:01,740 --> 00:21:04,260
as the user I want to be able to do

588
00:21:04,260 --> 00:21:05,640
these things without seeking the

589
00:21:05,640 --> 00:21:07,140
permission

590
00:21:07,140 --> 00:21:09,900
of the relying party or the ca

591
00:21:09,900 --> 00:21:11,640
whether it's giving out keys to my hotel

592
00:21:11,640 --> 00:21:14,039
room or giving out keys to my car

593
00:21:14,039 --> 00:21:16,740
or and here's the question for you about

594
00:21:16,740 --> 00:21:19,980
how do you see this relating to Fido web

595
00:21:19,980 --> 00:21:22,500
authen pass Keys pick your name up them

596
00:21:22,500 --> 00:21:25,640
how do you see it relating

597
00:21:26,100 --> 00:21:28,380
um thank you for a question uh that's an

598
00:21:28,380 --> 00:21:29,400
awesome

599
00:21:29,400 --> 00:21:32,159
um remark and we specifically mentioned

600
00:21:32,159 --> 00:21:34,320
that we want to distinguish the

601
00:21:34,320 --> 00:21:37,380
credential transfer from provisioning a

602
00:21:37,380 --> 00:21:38,700
lot of your questions will be covered

603
00:21:38,700 --> 00:21:40,740
with the provisioning the relation

604
00:21:40,740 --> 00:21:42,179
between

605
00:21:42,179 --> 00:21:45,120
sander receiver and credential Authority

606
00:21:45,120 --> 00:21:48,659
right so that part is out of scope for

607
00:21:48,659 --> 00:21:52,620
us because let me say why because there

608
00:21:52,620 --> 00:21:55,980
are variety of different protocols some

609
00:21:55,980 --> 00:21:58,140
of them are open standard some of them

610
00:21:58,140 --> 00:22:01,100
proprietories

611
00:22:01,580 --> 00:22:05,280
when we're referring to CCC cover

612
00:22:05,280 --> 00:22:08,340
connectivity Consortium part of the

613
00:22:08,340 --> 00:22:10,440
provisioning is covered in the standard

614
00:22:10,440 --> 00:22:12,900
and you can go and treat the standard

615
00:22:12,900 --> 00:22:15,780
they definitely will use authorization

616
00:22:15,780 --> 00:22:21,020
mechanisms we use them to for instance

617
00:22:21,020 --> 00:22:25,740
to um provide assurance that they're

618
00:22:25,740 --> 00:22:28,260
sure or provisioning information was

619
00:22:28,260 --> 00:22:32,400
negated on authentic device by a user so

620
00:22:32,400 --> 00:22:35,520
we use other often

621
00:22:35,520 --> 00:22:36,659
I think this is this isn't quite

622
00:22:36,659 --> 00:22:38,880
answering where I'm going in my head

623
00:22:38,880 --> 00:22:41,220
with a use case which is I want to give

624
00:22:41,220 --> 00:22:43,740
someone else access to a particular

625
00:22:43,740 --> 00:22:44,780
website

626
00:22:44,780 --> 00:22:46,919
usemyunite.com credential and United

627
00:22:46,919 --> 00:22:49,320
wants to stop me from doing that

628
00:22:49,320 --> 00:22:51,059
I want to do be able to do that without

629
00:22:51,059 --> 00:22:53,280
seeking their permission will this help

630
00:22:53,280 --> 00:22:54,980
me

631
00:22:54,980 --> 00:22:57,659
that's disappointing

632
00:22:57,659 --> 00:22:59,580
yeah so

633
00:22:59,580 --> 00:23:00,960
this might not be the answer you want

634
00:23:00,960 --> 00:23:02,700
but this cannot help you with that

635
00:23:02,700 --> 00:23:04,679
um and that's actually in a sense by

636
00:23:04,679 --> 00:23:07,200
Design we wanted this system to know

637
00:23:07,200 --> 00:23:09,059
nothing you know especially after the

638
00:23:09,059 --> 00:23:11,580
share and you'll see you saw in those uh

639
00:23:11,580 --> 00:23:13,200
in the Privacy requirements we wanted to

640
00:23:13,200 --> 00:23:15,240
make sure this system could not create

641
00:23:15,240 --> 00:23:17,400
that sort of like couldn't know anything

642
00:23:17,400 --> 00:23:19,200
about that user anything about that

643
00:23:19,200 --> 00:23:21,419
share or created like a share Network

644
00:23:21,419 --> 00:23:23,880
between everyone let me just quickly

645
00:23:23,880 --> 00:23:25,440
remind everybody who's at the mic that

646
00:23:25,440 --> 00:23:27,360
you need to get on the my queue in order

647
00:23:27,360 --> 00:23:29,899
to stand up

648
00:23:30,799 --> 00:23:34,860
okay in that case and make sure to sign

649
00:23:34,860 --> 00:23:37,799
up on the scan the QR code and sign up

650
00:23:37,799 --> 00:23:39,900
on the blue sheet as well

651
00:23:39,900 --> 00:23:41,520
ready hi can you hear me yeah just to

652
00:23:41,520 --> 00:23:42,840
finish the answer to the question I just

653
00:23:42,840 --> 00:23:43,919
think um

654
00:23:43,919 --> 00:23:46,200
basically to to do the things that

655
00:23:46,200 --> 00:23:47,460
you're saying I think you would actually

656
00:23:47,460 --> 00:23:49,140
need to go away from some of those

657
00:23:49,140 --> 00:23:50,760
privacy requirements and have this be a

658
00:23:50,760 --> 00:23:54,000
much uh much smarter system than what it

659
00:23:54,000 --> 00:23:55,020
really is

660
00:23:55,020 --> 00:23:58,260
um to like to be able to con like know

661
00:23:58,260 --> 00:24:00,179
to control that stuff from the sender

662
00:24:00,179 --> 00:24:01,380
versus what it is is really just

663
00:24:01,380 --> 00:24:03,480
transferring that one piece of data from

664
00:24:03,480 --> 00:24:05,520
sender to receiver

665
00:24:05,520 --> 00:24:06,659
um and hopefully when we go over the

666
00:24:06,659 --> 00:24:07,980
solution when Dimitri presents the

667
00:24:07,980 --> 00:24:09,000
solution so it'll make a little bit more

668
00:24:09,000 --> 00:24:10,740
sense

669
00:24:10,740 --> 00:24:13,799
hi uh Michael B uh UK ncsc I've got a

670
00:24:13,799 --> 00:24:14,820
question about the architecture that

671
00:24:14,820 --> 00:24:16,679
relates to the relay server

672
00:24:16,679 --> 00:24:18,720
um specifically we're sort of implying

673
00:24:18,720 --> 00:24:19,980
that we definitely need it in this

674
00:24:19,980 --> 00:24:21,659
problem statement and discussing the

675
00:24:21,659 --> 00:24:22,559
goals

676
00:24:22,559 --> 00:24:24,480
do you think a lot of this could be

677
00:24:24,480 --> 00:24:25,440
accomplished without the use of the

678
00:24:25,440 --> 00:24:27,419
relay server in the middle

679
00:24:27,419 --> 00:24:28,679
okay

680
00:24:28,679 --> 00:24:31,159
fair enough

681
00:24:31,400 --> 00:24:35,100
okay yes uh potentially you could use

682
00:24:35,100 --> 00:24:37,080
like different solutions but this one is

683
00:24:37,080 --> 00:24:40,200
specific for this uh narrowly defined

684
00:24:40,200 --> 00:24:42,900
problem and we implemented certain

685
00:24:42,900 --> 00:24:45,720
mechanisms to address the goals and the

686
00:24:45,720 --> 00:24:47,279
requirements out to these different

687
00:24:47,279 --> 00:24:48,240
problem

688
00:24:48,240 --> 00:24:53,400
uh you could use some maybe S3 buckets

689
00:24:53,400 --> 00:24:57,179
with some extra mechanisms over

690
00:24:57,179 --> 00:24:59,640
the problem is solvable in multiple ways

691
00:24:59,640 --> 00:25:02,520
and our proposal is just one of the way

692
00:25:02,520 --> 00:25:04,380
to solve it okay

693
00:25:04,380 --> 00:25:06,120
um thanks I was just just thinking that

694
00:25:06,120 --> 00:25:07,320
you've got already got a secure channel

695
00:25:07,320 --> 00:25:09,659
from the sender to the recipient so

696
00:25:09,659 --> 00:25:10,860
there's an awful lot you could put in

697
00:25:10,860 --> 00:25:12,600
that but we don't actually need it then

698
00:25:12,600 --> 00:25:15,000
well we mentioned WhatsApp the emails

699
00:25:15,000 --> 00:25:16,440
whatever those are off those are

700
00:25:16,440 --> 00:25:20,940
asynchronous so anyway thanks thank you

701
00:25:20,940 --> 00:25:24,900
hi Erica squirrel Mozilla um so I guess

702
00:25:24,900 --> 00:25:27,900
two points one uh a visual Point

703
00:25:27,900 --> 00:25:29,700
um this is not working before it's not

704
00:25:29,700 --> 00:25:31,799
about here correct but also this

705
00:25:31,799 --> 00:25:33,120
presentation is not the thing they're

706
00:25:33,120 --> 00:25:35,039
chartered this presentation is in is a

707
00:25:35,039 --> 00:25:37,140
is their view is their view of the thing

708
00:25:37,140 --> 00:25:39,539
discharger and so so the questions are

709
00:25:39,539 --> 00:25:40,679
out of scope are only the ones that are

710
00:25:40,679 --> 00:25:42,240
really removed by the chart not by this

711
00:25:42,240 --> 00:25:43,559
presentation

712
00:25:43,559 --> 00:25:44,880
um so I'm not seeing anything wrong with

713
00:25:44,880 --> 00:25:45,840
your presentation I just want to clarify

714
00:25:45,840 --> 00:25:47,340
whether it's Up For Debate and what is

715
00:25:47,340 --> 00:25:48,720
not

716
00:25:48,720 --> 00:25:51,480
um so um can you go back to security

717
00:25:51,480 --> 00:25:53,480
um

718
00:25:55,679 --> 00:25:57,799
thank you

719
00:25:59,460 --> 00:26:02,460
oh

720
00:26:04,980 --> 00:26:07,760
did you get it

721
00:26:08,100 --> 00:26:10,919
I can I can just well prachi can step

722
00:26:10,919 --> 00:26:12,960
back

723
00:26:12,960 --> 00:26:15,720
maybe this is maybe okay maybe he'll

724
00:26:15,720 --> 00:26:17,880
just do it really I think you need to

725
00:26:17,880 --> 00:26:20,279
give um permission it's okay

726
00:26:20,279 --> 00:26:22,200
um you said you you said you want to not

727
00:26:22,200 --> 00:26:25,460
have replay attacks why

728
00:26:26,039 --> 00:26:28,039
um

729
00:26:30,080 --> 00:26:34,080
why not have replay attacks

730
00:26:34,080 --> 00:26:36,000
do you want to go over here I know what

731
00:26:36,000 --> 00:26:37,140
a replay tag is but why is that a

732
00:26:37,140 --> 00:26:39,120
problem in this case so uh the problem

733
00:26:39,120 --> 00:26:41,159
let's say you're sure since we're

734
00:26:41,159 --> 00:26:43,260
passing credential

735
00:26:43,260 --> 00:26:45,559
flight brings in the information

736
00:26:45,559 --> 00:26:48,840
separately from the link right that link

737
00:26:48,840 --> 00:26:51,600
can be copied and sent to whoever want

738
00:26:51,600 --> 00:26:52,559
to

739
00:26:52,559 --> 00:26:55,440
um uh whoever want to provision that

740
00:26:55,440 --> 00:26:58,260
credential right and let's say 10 people

741
00:26:58,260 --> 00:27:00,240
at the same time want to provision the

742
00:27:00,240 --> 00:27:02,279
same pass in their wallet and we

743
00:27:02,279 --> 00:27:05,059
definitely want to prevent that sorry

744
00:27:05,059 --> 00:27:06,980
you have to start from the beginning

745
00:27:06,980 --> 00:27:10,620
okay so yeah understand the question uh

746
00:27:10,620 --> 00:27:12,240
why do we want to prevent a replay

747
00:27:12,240 --> 00:27:15,840
attack so and uh recently also obvious

748
00:27:15,840 --> 00:27:18,000
we don't want the same credential to be

749
00:27:18,000 --> 00:27:21,299
added to 10 different people without uh

750
00:27:21,299 --> 00:27:24,299
the original intent of the sender so if

751
00:27:24,299 --> 00:27:26,220
the sender wants to send it to their

752
00:27:26,220 --> 00:27:28,980
partner we want only Department to be

753
00:27:28,980 --> 00:27:29,899
able to

754
00:27:29,899 --> 00:27:32,700
redeem that sure Sydney making some very

755
00:27:32,700 --> 00:27:34,080
strong assumptions about the about the

756
00:27:34,080 --> 00:27:36,059
receiver of the message

757
00:27:36,059 --> 00:27:38,820
it's a very strong assumption between

758
00:27:38,820 --> 00:27:41,460
the receiver and the credential

759
00:27:41,460 --> 00:27:43,559
Authority

760
00:27:43,559 --> 00:27:45,720
again what I'm trying to drill into is

761
00:27:45,720 --> 00:27:47,399
that by the time I've received the

762
00:27:47,399 --> 00:27:49,559
credential it is mine to send around

763
00:27:49,559 --> 00:27:51,179
and so

764
00:27:51,179 --> 00:27:53,340
um and so so you you absolutely can

765
00:27:53,340 --> 00:27:55,980
ensure that there'll be only one or only

766
00:27:55,980 --> 00:27:57,840
one interaction between the receiver and

767
00:27:57,840 --> 00:27:59,399
the gradual Authority but that does not

768
00:27:59,399 --> 00:28:01,740
ensure the only copy the credential and

769
00:28:01,740 --> 00:28:03,600
so I'm sure you're about to tell me it's

770
00:28:03,600 --> 00:28:05,100
a trusted Hardware module on the

771
00:28:05,100 --> 00:28:07,260
receiver but that's not like I'm

772
00:28:07,260 --> 00:28:08,820
pointing at that as like that's an

773
00:28:08,820 --> 00:28:09,840
assumption you're making that does not

774
00:28:09,840 --> 00:28:11,880
like necessarily a valid assumption I

775
00:28:11,880 --> 00:28:14,520
think another another reason that we

776
00:28:14,520 --> 00:28:17,100
wanted to avoid anti-replay attacks is a

777
00:28:17,100 --> 00:28:19,799
security requirement is that if there's

778
00:28:19,799 --> 00:28:22,260
no if we have that security requirement

779
00:28:22,260 --> 00:28:24,659
then we can have more of an easy user

780
00:28:24,659 --> 00:28:26,640
experience around the actual security of

781
00:28:26,640 --> 00:28:28,320
the transfer if the link is short-lived

782
00:28:28,320 --> 00:28:30,480
and the mailbox is short-lived no I

783
00:28:30,480 --> 00:28:33,140
still understand that

784
00:28:35,940 --> 00:28:37,860
probably a good point with this do you

785
00:28:37,860 --> 00:28:39,120
mind if we take this to the mailing list

786
00:28:39,120 --> 00:28:41,940
and dig into it

787
00:28:41,940 --> 00:28:43,380
oh

788
00:28:43,380 --> 00:28:46,140
is

789
00:28:46,140 --> 00:28:47,760
oh sorry go ahead

790
00:28:47,760 --> 00:28:49,559
well I guess what I'm trying to say is

791
00:28:49,559 --> 00:28:51,120
that

792
00:28:51,120 --> 00:28:52,980
I think there is an implicit assumption

793
00:28:52,980 --> 00:28:55,620
in this entire entire presentation that

794
00:28:55,620 --> 00:28:57,720
these credentials are embodied and some

795
00:28:57,720 --> 00:28:58,860
sort of pieces of trusted Hardware are

796
00:28:58,860 --> 00:29:01,020
not available to people who own the

797
00:29:01,020 --> 00:29:02,340
device

798
00:29:02,340 --> 00:29:05,820
and like that may be will be true but

799
00:29:05,820 --> 00:29:07,380
like that should be documented and I

800
00:29:07,380 --> 00:29:08,640
have to decide if that's something that

801
00:29:08,640 --> 00:29:10,679
you want to assume or not

802
00:29:10,679 --> 00:29:11,820
because

803
00:29:11,820 --> 00:29:13,799
um Matt I'm I'm happy to help try to

804
00:29:13,799 --> 00:29:15,960
answer this um I think I think we should

805
00:29:15,960 --> 00:29:17,580
separate out the constructs here right

806
00:29:17,580 --> 00:29:19,919
and I'll try to keep this short but I

807
00:29:19,919 --> 00:29:21,480
don't think it's related to Hardware in

808
00:29:21,480 --> 00:29:23,279
any way shape or form right the way that

809
00:29:23,279 --> 00:29:25,020
the credential is housed on the device

810
00:29:25,020 --> 00:29:27,480
whether it's in a secure chip or not is

811
00:29:27,480 --> 00:29:29,460
not the question I think specifically

812
00:29:29,460 --> 00:29:31,620
what we want to avoid here

813
00:29:31,620 --> 00:29:32,820
um or what we're trying to guarantee

814
00:29:32,820 --> 00:29:35,940
actually when a sender wants to share a

815
00:29:35,940 --> 00:29:37,820
credential with the receiver right

816
00:29:37,820 --> 00:29:41,159
there's there's the ability for a single

817
00:29:41,159 --> 00:29:43,620
receiver and that is the goal of this of

818
00:29:43,620 --> 00:29:45,960
this Charter is is to share it with a

819
00:29:45,960 --> 00:29:47,580
single person

820
00:29:47,580 --> 00:29:50,820
um to to to have that transfer of the

821
00:29:50,820 --> 00:29:54,480
credential only be redeemable for a

822
00:29:54,480 --> 00:29:57,600
credential by one party that does not

823
00:29:57,600 --> 00:30:00,299
preclude that party from not further

824
00:30:00,299 --> 00:30:02,100
sharing the credential and that is

825
00:30:02,100 --> 00:30:04,440
encapsulated in the design if that makes

826
00:30:04,440 --> 00:30:06,179
sense what we don't want to have happen

827
00:30:06,179 --> 00:30:08,659
though is the sender initiate a transfer

828
00:30:08,659 --> 00:30:11,100
obtain the necessary material from the

829
00:30:11,100 --> 00:30:13,020
credential authority to facilitate that

830
00:30:13,020 --> 00:30:16,220
transfer and let more than one receiver

831
00:30:16,220 --> 00:30:19,380
receive that transfer that that is I

832
00:30:19,380 --> 00:30:21,240
think more than more than an assumption

833
00:30:21,240 --> 00:30:23,159
that is a distinct goal

834
00:30:23,159 --> 00:30:25,320
how would that happen

835
00:30:25,320 --> 00:30:27,320
um

836
00:30:28,260 --> 00:30:30,960
sorry Dimitri go ahead

837
00:30:30,960 --> 00:30:33,179
I just wanted to say that we utilize a

838
00:30:33,179 --> 00:30:35,460
number of security mechanisms that are

839
00:30:35,460 --> 00:30:37,320
defined in the job document I've read

840
00:30:37,320 --> 00:30:39,899
the document okay so uh I'm asking to

841
00:30:39,899 --> 00:30:42,779
describe the threat model precisely when

842
00:30:42,779 --> 00:30:44,520
we established that channel between two

843
00:30:44,520 --> 00:30:48,600
devices The Binding right uh it um

844
00:30:48,600 --> 00:30:50,880
enforces the fact that only a single

845
00:30:50,880 --> 00:30:52,620
receiver can read that you know so

846
00:30:52,620 --> 00:30:54,360
before we get into that discussion

847
00:30:54,360 --> 00:30:55,860
because we're getting into the sort of

848
00:30:55,860 --> 00:30:58,019
the part of the when a little bit later

849
00:30:58,019 --> 00:30:59,700
we're going to go through the proposed

850
00:30:59,700 --> 00:31:00,840
sort of first version of the draft

851
00:31:00,840 --> 00:31:02,220
that's kind of linked to this working

852
00:31:02,220 --> 00:31:04,559
group and maybe we should try to stick

853
00:31:04,559 --> 00:31:06,960
with the like the the problem statement

854
00:31:06,960 --> 00:31:09,000
part of this before we get to the into

855
00:31:09,000 --> 00:31:11,940
solution space just helps but I'm asking

856
00:31:11,940 --> 00:31:13,620
for the threat model actually I'm asking

857
00:31:13,620 --> 00:31:15,720
about the threat model yeah and so I

858
00:31:15,720 --> 00:31:18,179
mean I guess my point is that you're

859
00:31:18,179 --> 00:31:19,500
sending a link around

860
00:31:19,500 --> 00:31:21,600
and so like if you want to sit down okay

861
00:31:21,600 --> 00:31:23,100
but if you're sending the link around

862
00:31:23,100 --> 00:31:24,779
like

863
00:31:24,779 --> 00:31:27,240
like how does it how does the link get

864
00:31:27,240 --> 00:31:29,159
redeemable people if you don't provide

865
00:31:29,159 --> 00:31:30,480
the security medicine you claim you

866
00:31:30,480 --> 00:31:32,720
provide

867
00:31:32,880 --> 00:31:34,260
how does that how does that how does the

868
00:31:34,260 --> 00:31:36,659
other person get a handle on the link

869
00:31:36,659 --> 00:31:40,200
so I'll I'll try to oh sorry go ahead

870
00:31:40,200 --> 00:31:42,120
I mean so I wanna I wanna share with the

871
00:31:42,120 --> 00:31:44,039
credential with dkg and I shared link

872
00:31:44,039 --> 00:31:48,179
with EKG and and so

873
00:31:48,179 --> 00:31:50,039
well okay but you could just put the key

874
00:31:50,039 --> 00:31:52,080
up on the slides that's my point and so

875
00:31:52,080 --> 00:31:54,240
I'm trying to understand is aside from

876
00:31:54,240 --> 00:31:56,519
dkg's malfeasance which you've all which

877
00:31:56,519 --> 00:31:58,620
which already allows the key to be

878
00:31:58,620 --> 00:32:02,360
shared what what is the attack model

879
00:32:02,360 --> 00:32:05,519
well I think to Casey's point I think we

880
00:32:05,519 --> 00:32:08,039
need to separate security mechanisms

881
00:32:08,039 --> 00:32:09,779
that would prevent that individual from

882
00:32:09,779 --> 00:32:11,700
sharing the key itself one sharing is

883
00:32:11,700 --> 00:32:14,880
complete from a Potential Threat in the

884
00:32:14,880 --> 00:32:16,559
sharing itself so for the actual

885
00:32:16,559 --> 00:32:19,019
transfer of the credential what you want

886
00:32:19,019 --> 00:32:21,779
to avoid specifically is you send a link

887
00:32:21,779 --> 00:32:24,480
to your friend and that friend posts it

888
00:32:24,480 --> 00:32:26,640
online and anybody with that link could

889
00:32:26,640 --> 00:32:28,679
then redeem for a credential that is a

890
00:32:28,679 --> 00:32:30,840
different problem than if you send that

891
00:32:30,840 --> 00:32:32,640
link to your friend they provision the

892
00:32:32,640 --> 00:32:34,380
credential and then they share the

893
00:32:34,380 --> 00:32:36,179
actual credential itself those are two

894
00:32:36,179 --> 00:32:38,279
different problems and all right yeah go

895
00:32:38,279 --> 00:32:39,419
ahead it's only a different problem

896
00:32:39,419 --> 00:32:41,159
because you think that he can't see the

897
00:32:41,159 --> 00:32:43,279
key

898
00:32:43,340 --> 00:32:45,360
you can't see it

899
00:32:45,360 --> 00:32:47,519
otherwise I think it's a different

900
00:32:47,519 --> 00:32:49,200
I think it's a different problem because

901
00:32:49,200 --> 00:32:51,659
mechanisms used to predict to protect a

902
00:32:51,659 --> 00:32:53,220
cryptographic key are different from

903
00:32:53,220 --> 00:32:55,200
mechanisms used on a protocol for

904
00:32:55,200 --> 00:32:57,860
sharing keys

905
00:32:58,620 --> 00:33:01,320
yes responsibility but okay we'll pick

906
00:33:01,320 --> 00:33:04,380
this up later so it it this discussion

907
00:33:04,380 --> 00:33:06,299
kind of does beg a question that the

908
00:33:06,299 --> 00:33:07,799
chairs have been meaning to bring up and

909
00:33:07,799 --> 00:33:09,360
that is maybe that the working group

910
00:33:09,360 --> 00:33:11,820
does need a separate problem statement

911
00:33:11,820 --> 00:33:15,059
uh draft and that could include a clear

912
00:33:15,059 --> 00:33:17,220
threat model discussion so I think it's

913
00:33:17,220 --> 00:33:19,320
something to keep in mind here that that

914
00:33:19,320 --> 00:33:21,059
it maybe is a document that doesn't

915
00:33:21,059 --> 00:33:22,559
exist today but needs to be written

916
00:33:22,559 --> 00:33:24,480
remember the working group doesn't

917
00:33:24,480 --> 00:33:26,640
actually have any adopted working group

918
00:33:26,640 --> 00:33:29,279
drafts yet right

919
00:33:29,279 --> 00:33:32,580
um so but it's a good point that you

920
00:33:32,580 --> 00:33:35,220
make Eric that a good threat model is a

921
00:33:35,220 --> 00:33:36,960
sort of integral part of this now

922
00:33:36,960 --> 00:33:40,740
Michael do you wanna Michael

923
00:33:40,740 --> 00:33:43,500
oh you really all right so I'm going to

924
00:33:43,500 --> 00:33:47,000
take you off cue Wayne

925
00:33:50,100 --> 00:33:52,080
hey this is Wayne from Spruce I just

926
00:33:52,080 --> 00:33:54,419
wanted to confirm some uh understandings

927
00:33:54,419 --> 00:33:57,299
I think I have about this and um ask if

928
00:33:57,299 --> 00:33:59,100
something could be possible

929
00:33:59,100 --> 00:34:01,559
so um one thing is it seems that the

930
00:34:01,559 --> 00:34:03,899
model relies on appreciating symmetric

931
00:34:03,899 --> 00:34:05,580
encryption key for the mailboxes right

932
00:34:05,580 --> 00:34:08,940
and that's that's been uh so far so the

933
00:34:08,940 --> 00:34:10,619
setup is kind of out of scope right you

934
00:34:10,619 --> 00:34:11,940
would have to use some other protocol

935
00:34:11,940 --> 00:34:14,839
whatever that is right

936
00:34:15,239 --> 00:34:18,719
um yes and no so we depending on the

937
00:34:18,719 --> 00:34:21,300
security model like we

938
00:34:21,300 --> 00:34:24,239
um defined that certain credential

939
00:34:24,239 --> 00:34:27,060
verticals may require more secure

940
00:34:27,060 --> 00:34:31,020
solution uh what we propose for the

941
00:34:31,020 --> 00:34:32,639
solutions which are not that important

942
00:34:32,639 --> 00:34:37,020
to attach the secret to the URL which

943
00:34:37,020 --> 00:34:40,739
probably Eric is calling out here but um

944
00:34:40,739 --> 00:34:43,139
for some use cases that might be secure

945
00:34:43,139 --> 00:34:45,960
enough given that the channel being used

946
00:34:45,960 --> 00:34:49,739
to transfer that sure is uh is is

947
00:34:49,739 --> 00:34:51,179
trusted

948
00:34:51,179 --> 00:34:53,219
okay and uh the follow-up is a little

949
00:34:53,219 --> 00:34:55,739
different direction so intentionally

950
00:34:55,739 --> 00:34:58,020
it's an opaque token format so it can

951
00:34:58,020 --> 00:34:59,940
potentially conform to other standards

952
00:34:59,940 --> 00:35:01,320
bodies out there across different

953
00:35:01,320 --> 00:35:03,540
verticals right and that's good and I

954
00:35:03,540 --> 00:35:05,940
guess that also would not preclude like

955
00:35:05,940 --> 00:35:07,859
an authorization credential model that

956
00:35:07,859 --> 00:35:09,359
could be like down to a different key or

957
00:35:09,359 --> 00:35:11,400
something for example instead of sharing

958
00:35:11,400 --> 00:35:12,780
the private key material through this

959
00:35:12,780 --> 00:35:14,700
protocol you could share a delegation to

960
00:35:14,700 --> 00:35:16,079
a different key that opens the hotel

961
00:35:16,079 --> 00:35:19,500
room is that model possible yes exactly

962
00:35:19,500 --> 00:35:22,740
and we think that model would be

963
00:35:22,740 --> 00:35:24,300
like all the use cases that we're hoping

964
00:35:24,300 --> 00:35:26,520
of we're talking about uh definitely not

965
00:35:26,520 --> 00:35:29,580
sending private Keys hopefully

966
00:35:29,580 --> 00:35:31,560
[Music]

967
00:35:31,560 --> 00:35:34,160
Peter

968
00:35:36,540 --> 00:35:39,740
hi it's Peter from DEC

969
00:35:40,140 --> 00:35:42,359
um yeah so the proposal doesn't deal

970
00:35:42,359 --> 00:35:44,579
with the credential logic itself right

971
00:35:44,579 --> 00:35:46,800
so what the credential what's the name

972
00:35:46,800 --> 00:35:48,359
Authority or something does is out of

973
00:35:48,359 --> 00:35:50,040
scope

974
00:35:50,040 --> 00:35:52,320
um so are any problems that may be

975
00:35:52,320 --> 00:35:54,180
resulting from for example sharing a

976
00:35:54,180 --> 00:35:56,760
secret symmetric key it's a lot of scope

977
00:35:56,760 --> 00:35:58,140
which is fine

978
00:35:58,140 --> 00:36:00,119
and um so we just assumed that there

979
00:36:00,119 --> 00:36:01,260
already is

980
00:36:01,260 --> 00:36:04,200
um a credential and it's an opaque set

981
00:36:04,200 --> 00:36:07,200
of data fields and that's somehow the

982
00:36:07,200 --> 00:36:08,460
combined set of credential information

983
00:36:08,460 --> 00:36:10,920
and provisioning information if I got

984
00:36:10,920 --> 00:36:11,820
that right

985
00:36:11,820 --> 00:36:13,200
and the goals are that only the

986
00:36:13,200 --> 00:36:16,020
recipients can use it and enter replay

987
00:36:16,020 --> 00:36:18,000
and the server knows nothing and

988
00:36:18,000 --> 00:36:19,920
participants don't have to be on it at

989
00:36:19,920 --> 00:36:21,780
the same time and content is opaque and

990
00:36:21,780 --> 00:36:22,560
all that

991
00:36:22,560 --> 00:36:25,140
and it just sounds very much like the

992
00:36:25,140 --> 00:36:27,060
requirements for sending any secret

993
00:36:27,060 --> 00:36:28,680
message

994
00:36:28,680 --> 00:36:31,920
not specifically credentials my question

995
00:36:31,920 --> 00:36:34,140
is in what way the proposal does go

996
00:36:34,140 --> 00:36:37,260
beyond any other protocol to send secret

997
00:36:37,260 --> 00:36:39,359
messages between two parties who have

998
00:36:39,359 --> 00:36:41,640
some kind of set up with let's say

999
00:36:41,640 --> 00:36:43,560
symmetric keys they exchange beforehand

1000
00:36:43,560 --> 00:36:45,960
or for example the signal protocol which

1001
00:36:45,960 --> 00:36:48,660
already is around and I presume that

1002
00:36:48,660 --> 00:36:49,880
probably

1003
00:36:49,880 --> 00:36:52,680
your probably your tend to tackle is

1004
00:36:52,680 --> 00:36:54,180
different because otherwise you wouldn't

1005
00:36:54,180 --> 00:36:57,720
be making the effort but I I don't see

1006
00:36:57,720 --> 00:36:59,280
that in the problem statement yet so if

1007
00:36:59,280 --> 00:37:01,320
it does go beyond just exchanging secret

1008
00:37:01,320 --> 00:37:03,599
messages between participating parties

1009
00:37:03,599 --> 00:37:05,700
then I think the problems that needs to

1010
00:37:05,700 --> 00:37:07,680
be extended to explain in what way

1011
00:37:07,680 --> 00:37:08,940
that's different because I don't

1012
00:37:08,940 --> 00:37:12,200
understand it so far

1013
00:37:13,619 --> 00:37:14,220
um

1014
00:37:14,220 --> 00:37:17,280
I think that's a very valid question so

1015
00:37:17,280 --> 00:37:19,440
um if we're comparing that to the

1016
00:37:19,440 --> 00:37:21,540
problem with sending an encrypted

1017
00:37:21,540 --> 00:37:24,480
message so we need to uh split it into

1018
00:37:24,480 --> 00:37:25,320
two

1019
00:37:25,320 --> 00:37:27,480
pieces right so establish and secure

1020
00:37:27,480 --> 00:37:30,960
Channel and then like send encryption

1021
00:37:30,960 --> 00:37:32,940
message there sorry in the secret pretty

1022
00:37:32,940 --> 00:37:36,359
sure in secret and then encrypting data

1023
00:37:36,359 --> 00:37:39,900
here what we want to achieve is to share

1024
00:37:39,900 --> 00:37:43,260
the encrypted content and the link to

1025
00:37:43,260 --> 00:37:45,780
that content like separately secret and

1026
00:37:45,780 --> 00:37:48,000
the content they go through different

1027
00:37:48,000 --> 00:37:51,960
channels and we don't want to use

1028
00:37:51,960 --> 00:37:55,020
we don't want to introduce a mechanism

1029
00:37:55,020 --> 00:37:58,500
of pre-shared secretly

1030
00:37:58,500 --> 00:38:00,780
if it explains it

1031
00:38:00,780 --> 00:38:06,720
and this is very narrow scoped for uh

1032
00:38:06,720 --> 00:38:10,020
credential transfer like we have let's

1033
00:38:10,020 --> 00:38:12,300
say some provision information which in

1034
00:38:12,300 --> 00:38:15,180
kind is a token right and we want

1035
00:38:15,180 --> 00:38:17,700
eventually that information be passed to

1036
00:38:17,700 --> 00:38:20,400
and from between two quarries like a

1037
00:38:20,400 --> 00:38:21,540
ping pong

1038
00:38:21,540 --> 00:38:25,560
and we want to uh make sure that only

1039
00:38:25,560 --> 00:38:28,980
two actors can exchange that information

1040
00:38:28,980 --> 00:38:31,320
for a given

1041
00:38:31,320 --> 00:38:33,180
mailbox

1042
00:38:33,180 --> 00:38:35,460
okay so you just mentioned some kind of

1043
00:38:35,460 --> 00:38:36,359
Link

1044
00:38:36,359 --> 00:38:38,040
um that there's one thing and then

1045
00:38:38,040 --> 00:38:39,839
there's another thing so I didn't see

1046
00:38:39,839 --> 00:38:41,700
that requirement in your list of

1047
00:38:41,700 --> 00:38:42,780
requirements it would be cool if you

1048
00:38:42,780 --> 00:38:45,780
could add it and um I don't know I I

1049
00:38:45,780 --> 00:38:47,280
think that is kind of where where it

1050
00:38:47,280 --> 00:38:48,839
gets into the proposed solution right

1051
00:38:48,839 --> 00:38:50,880
then Eric is actually quite correct both

1052
00:38:50,880 --> 00:38:52,619
of these things are proposals yet right

1053
00:38:52,619 --> 00:38:54,720
we're talking about stay away from the

1054
00:38:54,720 --> 00:38:56,880
solution yeah we're coming to that right

1055
00:38:56,880 --> 00:38:58,680
where you know I just want don't want us

1056
00:38:58,680 --> 00:39:02,899
to lose track of time and okay

1057
00:39:03,660 --> 00:39:05,760
and I have we have a few people on the

1058
00:39:05,760 --> 00:39:06,780
Queue

1059
00:39:06,780 --> 00:39:09,599
um and we're gonna stop the queue right

1060
00:39:09,599 --> 00:39:11,880
after Victor and

1061
00:39:11,880 --> 00:39:15,480
um and let's try to have a little bit of

1062
00:39:15,480 --> 00:39:17,099
time left for

1063
00:39:17,099 --> 00:39:19,440
the rest of

1064
00:39:19,440 --> 00:39:21,540
so Ian

1065
00:39:21,540 --> 00:39:23,300
you'll hear me okay

1066
00:39:23,300 --> 00:39:26,640
uh Ian Williams with AWS um I noticed

1067
00:39:26,640 --> 00:39:28,619
that your

1068
00:39:28,619 --> 00:39:30,300
um protocol here implies a certain

1069
00:39:30,300 --> 00:39:32,400
amount of trust between the sender

1070
00:39:32,400 --> 00:39:34,619
recipient and the relay

1071
00:39:34,619 --> 00:39:36,839
um I'm wondering like is there any

1072
00:39:36,839 --> 00:39:39,300
consideration for if the relay agrees to

1073
00:39:39,300 --> 00:39:41,400
be a part of this operation

1074
00:39:41,400 --> 00:39:44,400
um for example if I as a sender tell the

1075
00:39:44,400 --> 00:39:47,160
recipient my mailbox is at Mom and

1076
00:39:47,160 --> 00:39:48,960
popburgershop.com

1077
00:39:48,960 --> 00:39:51,540
they might not enjoy if the recipient

1078
00:39:51,540 --> 00:39:53,820
starts asking them for keys or for this

1079
00:39:53,820 --> 00:39:55,079
credential so I'm wondering like what

1080
00:39:55,079 --> 00:39:57,119
kind of considerations might be made

1081
00:39:57,119 --> 00:39:59,359
there

1082
00:39:59,460 --> 00:40:00,960
um that's a great question

1083
00:40:00,960 --> 00:40:02,820
um I appreciate it yes there is a

1084
00:40:02,820 --> 00:40:05,339
consideration specifically for uh sure

1085
00:40:05,339 --> 00:40:07,740
initiation ran a sender device creates

1086
00:40:07,740 --> 00:40:09,960
the mailbox right so we don't want to

1087
00:40:09,960 --> 00:40:12,119
trust anyone there is a regulation

1088
00:40:12,119 --> 00:40:14,099
between the sender device and the daily

1089
00:40:14,099 --> 00:40:17,040
server which means the sure and the

1090
00:40:17,040 --> 00:40:19,200
release server probably would be

1091
00:40:19,200 --> 00:40:21,180
implemented by the same party

1092
00:40:21,180 --> 00:40:24,359
uh to establish that trust so we have a

1093
00:40:24,359 --> 00:40:26,940
mechanism of attestation which covers

1094
00:40:26,940 --> 00:40:29,640
the whole content of the mailbox and

1095
00:40:29,640 --> 00:40:31,980
release server before accepting that

1096
00:40:31,980 --> 00:40:34,560
information needs to be able to verify

1097
00:40:34,560 --> 00:40:38,160
the content and verify the route of

1098
00:40:38,160 --> 00:40:40,819
trust like whether it's produced by the

1099
00:40:40,819 --> 00:40:42,900
authentic device

1100
00:40:42,900 --> 00:40:45,839
etc for the recipient it's less

1101
00:40:45,839 --> 00:40:48,240
important because like

1102
00:40:48,240 --> 00:40:51,900
we think that recipient they have a

1103
00:40:51,900 --> 00:40:54,900
mechanism of see what they accept in and

1104
00:40:54,900 --> 00:40:58,440
they Trust

1105
00:40:58,740 --> 00:41:00,900
they need less trust let's put it this

1106
00:41:00,900 --> 00:41:03,480
this way to the delete server because

1107
00:41:03,480 --> 00:41:05,819
they have a link coming from the front

1108
00:41:05,819 --> 00:41:07,920
over a separate Channel and they

1109
00:41:07,920 --> 00:41:10,200
probably know that Trend right they know

1110
00:41:10,200 --> 00:41:12,300
their phone number URL they can make a

1111
00:41:12,300 --> 00:41:15,599
call to the friend and

1112
00:41:15,599 --> 00:41:17,640
um there are additional mechanisms which

1113
00:41:17,640 --> 00:41:21,180
we propose uh in the draft document such

1114
00:41:21,180 --> 00:41:23,520
as Verification codes that can be

1115
00:41:23,520 --> 00:41:27,319
communicated uh using Voice or other

1116
00:41:27,319 --> 00:41:30,000
mechanisms yeah I saw the the the

1117
00:41:30,000 --> 00:41:31,619
Verification codes that may be used

1118
00:41:31,619 --> 00:41:33,480
between sender and recipient but I

1119
00:41:33,480 --> 00:41:34,740
didn't see how that would again connect

1120
00:41:34,740 --> 00:41:36,480
to the relay server because that seems

1121
00:41:36,480 --> 00:41:38,640
to be kind of the mutual body between

1122
00:41:38,640 --> 00:41:40,560
the three of them here again using the

1123
00:41:40,560 --> 00:41:42,060
you know Mom and Pop burger shop as an

1124
00:41:42,060 --> 00:41:43,920
example they would probably not enjoy

1125
00:41:43,920 --> 00:41:46,140
the added traffic

1126
00:41:46,140 --> 00:41:47,819
yeah um

1127
00:41:47,819 --> 00:41:50,579
yeah so as I said the regulation between

1128
00:41:50,579 --> 00:41:53,099
sender device and the release server is

1129
00:41:53,099 --> 00:41:55,260
covered because we have that trust

1130
00:41:55,260 --> 00:41:58,920
established during uh using of uh device

1131
00:41:58,920 --> 00:42:03,720
attestation uh block which which carries

1132
00:42:03,720 --> 00:42:06,540
the certificate specific to the device

1133
00:42:06,540 --> 00:42:08,460
and the root of trust

1134
00:42:08,460 --> 00:42:09,000
um

1135
00:42:09,000 --> 00:42:11,060
it is shared between

1136
00:42:11,060 --> 00:42:13,980
sender and the UV

1137
00:42:13,980 --> 00:42:15,180
um

1138
00:42:15,180 --> 00:42:18,480
we find that it's less important to

1139
00:42:18,480 --> 00:42:21,000
establish the same level of trust

1140
00:42:21,000 --> 00:42:24,420
between the relay and the receiver

1141
00:42:24,420 --> 00:42:26,880
uh let's put it this way but we are open

1142
00:42:26,880 --> 00:42:29,760
to discussion if you find really good uh

1143
00:42:29,760 --> 00:42:32,339
arguments to establish the same level of

1144
00:42:32,339 --> 00:42:35,579
trust uh

1145
00:42:35,579 --> 00:42:39,300
we have uh an option to introduce the

1146
00:42:39,300 --> 00:42:42,300
same level of authentication attestation

1147
00:42:42,300 --> 00:42:46,920
between recipient and regulation

1148
00:42:46,920 --> 00:42:49,800
sorry this is Nick also from alphabet I

1149
00:42:49,800 --> 00:42:51,359
want to just chime in for your concern

1150
00:42:51,359 --> 00:42:53,160
about maybe like the mom and pop shop

1151
00:42:53,160 --> 00:42:55,440
server just getting all these inundated

1152
00:42:55,440 --> 00:42:57,540
um like traffic for it and I think maybe

1153
00:42:57,540 --> 00:42:59,220
that's where you were headed

1154
00:42:59,220 --> 00:43:01,020
um I'll take on like the recipient side

1155
00:43:01,020 --> 00:43:03,900
this will you know very per vertical of

1156
00:43:03,900 --> 00:43:05,220
course you know depending on they want

1157
00:43:05,220 --> 00:43:07,200
to use the relay server but at least

1158
00:43:07,200 --> 00:43:09,960
when it comes to things like the the CCC

1159
00:43:09,960 --> 00:43:13,740
and for the digital car keys there is an

1160
00:43:13,740 --> 00:43:15,839
allow list of different known relay

1161
00:43:15,839 --> 00:43:18,060
servers that we would want to use so the

1162
00:43:18,060 --> 00:43:20,099
recipient would have to choose from one

1163
00:43:20,099 --> 00:43:22,500
of those um relay server otherwise we

1164
00:43:22,500 --> 00:43:25,200
will not just simply reach out to any

1165
00:43:25,200 --> 00:43:27,599
any kind of uh you know random URL

1166
00:43:27,599 --> 00:43:29,460
that's been sent from from even if it

1167
00:43:29,460 --> 00:43:31,319
was from linked owner

1168
00:43:31,319 --> 00:43:33,720
yeah I mean the random URL consideration

1169
00:43:33,720 --> 00:43:35,460
is kind of what I was going for next to

1170
00:43:35,460 --> 00:43:36,839
but if there's going to if the plan is

1171
00:43:36,839 --> 00:43:38,300
that there would be an allow list of

1172
00:43:38,300 --> 00:43:40,740
appropriate there certainly will be yet

1173
00:43:40,740 --> 00:43:42,960
okay that that would be my main

1174
00:43:42,960 --> 00:43:45,859
suggestion thank you

1175
00:43:46,440 --> 00:43:48,119
all right

1176
00:43:48,119 --> 00:43:49,619
um I just want to put a pin in this

1177
00:43:49,619 --> 00:43:50,579
describe that part of the discussion

1178
00:43:50,579 --> 00:43:51,480
because actually I don't really

1179
00:43:51,480 --> 00:43:52,740
understand why there should be a law

1180
00:43:52,740 --> 00:43:55,140
list of automated servers um because as

1181
00:43:55,140 --> 00:43:55,920
far as you can tell them on the security

1182
00:43:55,920 --> 00:43:58,200
properties depend on that um so it seems

1183
00:43:58,200 --> 00:43:59,280
like some other property which is

1184
00:43:59,280 --> 00:44:00,839
unclear to me so let's just say that

1185
00:44:00,839 --> 00:44:02,640
that's not not decided

1186
00:44:02,640 --> 00:44:05,819
um there are um uh it seems to me there

1187
00:44:05,819 --> 00:44:07,440
are two assumptions being made here that

1188
00:44:07,440 --> 00:44:08,520
like perhaps people are having trouble

1189
00:44:08,520 --> 00:44:11,579
in this busy stages one might like

1190
00:44:11,579 --> 00:44:14,819
um one is that the channel That the

1191
00:44:14,819 --> 00:44:16,200
sender and receiver have to them

1192
00:44:16,200 --> 00:44:18,480
available to them is not sufficiently

1193
00:44:18,480 --> 00:44:20,760
capable to deliver arbitrary amounts of

1194
00:44:20,760 --> 00:44:21,900
data

1195
00:44:21,900 --> 00:44:23,220
um so it is encrypted but it cannot

1196
00:44:23,220 --> 00:44:24,300
deliver arbitrary amounts of data is

1197
00:44:24,300 --> 00:44:27,119
that correct yes okay so that's hence

1198
00:44:27,119 --> 00:44:28,500
the relay server because otherwise you

1199
00:44:28,500 --> 00:44:30,000
would just like spin up your WhatsApp

1200
00:44:30,000 --> 00:44:30,900
Channel and then the whole thing or

1201
00:44:30,900 --> 00:44:33,060
Whatsapp right okay

1202
00:44:33,060 --> 00:44:37,079
um and the second is that the

1203
00:44:37,079 --> 00:44:39,900
um sender is not able to transfer the

1204
00:44:39,900 --> 00:44:41,520
credentials directly to the recipient

1205
00:44:41,520 --> 00:44:43,079
because it requires the cooperation the

1206
00:44:43,079 --> 00:44:46,260
credential server correct yes good okay

1207
00:44:46,260 --> 00:44:48,480
so I think that's like without saying

1208
00:44:48,480 --> 00:44:49,560
that I agree with everything here that's

1209
00:44:49,560 --> 00:44:51,240
how we get to this design there's those

1210
00:44:51,240 --> 00:44:52,740
two constraints because otherwise

1211
00:44:52,740 --> 00:44:55,020
otherwise as Jim Fenton says it would

1212
00:44:55,020 --> 00:44:56,940
just like spit up signal and like shift

1213
00:44:56,940 --> 00:44:59,220
the entire thing over like like like a

1214
00:44:59,220 --> 00:45:02,060
verb signal right okay

1215
00:45:02,280 --> 00:45:04,920
maybe to your point we could add in a

1216
00:45:04,920 --> 00:45:06,960
constraint section to our draft maybe

1217
00:45:06,960 --> 00:45:09,980
that would be really helpful

1218
00:45:10,440 --> 00:45:12,119
so Paul and Jake says I think my

1219
00:45:12,119 --> 00:45:14,040
question I think Ecker more or less

1220
00:45:14,040 --> 00:45:15,839
asked it but can you say a little bit

1221
00:45:15,839 --> 00:45:17,520
more about what the constraints on that

1222
00:45:17,520 --> 00:45:18,900
out of band channel are that you're

1223
00:45:18,900 --> 00:45:21,119
you're assuming and and what we need I

1224
00:45:21,119 --> 00:45:22,200
mean is that something we can be

1225
00:45:22,200 --> 00:45:23,760
discussed in this requirements trying to

1226
00:45:23,760 --> 00:45:25,140
get just a better feel of what you see

1227
00:45:25,140 --> 00:45:27,180
the limit of that so that we can design

1228
00:45:27,180 --> 00:45:29,660
to it

1229
00:45:30,300 --> 00:45:32,940
you try not to

1230
00:45:32,940 --> 00:45:34,800
so we've we've been thinking about the

1231
00:45:34,800 --> 00:45:36,300
constraint for that messaging Channel as

1232
00:45:36,300 --> 00:45:37,619
any uh

1233
00:45:37,619 --> 00:45:39,420
we want to be able to use any messaging

1234
00:45:39,420 --> 00:45:41,040
channel that users can talk over

1235
00:45:41,040 --> 00:45:43,440
including uh like writing the URL on a

1236
00:45:43,440 --> 00:45:45,359
piece of paper and giving it to someone

1237
00:45:45,359 --> 00:45:47,880
um so any missing any messaging channel

1238
00:45:47,880 --> 00:45:49,140
that can transfer you know 100

1239
00:45:49,140 --> 00:45:50,520
characters

1240
00:45:50,520 --> 00:45:53,760
um or less kind of as our

1241
00:45:53,760 --> 00:45:57,500
constraint or lack of constraints

1242
00:45:57,599 --> 00:46:00,119
I mean makes sense can you say a little

1243
00:46:00,119 --> 00:46:01,619
bit more about what's driving you to

1244
00:46:01,619 --> 00:46:03,119
that sort of size or the ways you

1245
00:46:03,119 --> 00:46:05,099
imagine it's being transferred

1246
00:46:05,099 --> 00:46:06,359
um that would that would put to that I'm

1247
00:46:06,359 --> 00:46:08,339
just trying to pull out the reverse out

1248
00:46:08,339 --> 00:46:11,180
the requirements here

1249
00:46:11,240 --> 00:46:14,099
I think primarily user experience so we

1250
00:46:14,099 --> 00:46:15,420
want users to be able to share their

1251
00:46:15,420 --> 00:46:17,280
credentials over any messaging channel

1252
00:46:17,280 --> 00:46:18,920
that they are already yeah

1253
00:46:18,920 --> 00:46:21,660
what messaging channel does so obviously

1254
00:46:21,660 --> 00:46:23,280
that's already way too long for me to

1255
00:46:23,280 --> 00:46:25,020
type in okay so they're not being shared

1256
00:46:25,020 --> 00:46:26,160
that way from a user experience

1257
00:46:26,160 --> 00:46:28,079
obviously so which message channel is it

1258
00:46:28,079 --> 00:46:29,640
that's in that you that would

1259
00:46:29,640 --> 00:46:31,079
practically be used that's putting

1260
00:46:31,079 --> 00:46:32,760
that's causing a limit what's that limit

1261
00:46:32,760 --> 00:46:34,440
looking like like 100 is pretty small

1262
00:46:34,440 --> 00:46:36,119
yeah I think uh one of the common ones

1263
00:46:36,119 --> 00:46:39,720
was like SMS has 240 characters

1264
00:46:39,720 --> 00:46:42,359
um yeah this one that was one of the

1265
00:46:42,359 --> 00:46:44,880
main MMS doesn't have that line I mean

1266
00:46:44,880 --> 00:46:46,680
like I I think this is an excellent

1267
00:46:46,680 --> 00:46:49,260
discussion for us mailing list later but

1268
00:46:49,260 --> 00:46:51,359
but I it is an important aspect to cover

1269
00:46:51,359 --> 00:46:53,280
I think right right look I'm not

1270
00:46:53,280 --> 00:46:55,079
expressing opinion on it I'd be fine

1271
00:46:55,079 --> 00:46:57,180
like saying it has to work over SMS for

1272
00:46:57,180 --> 00:46:58,140
that channel that'd be a fine

1273
00:46:58,140 --> 00:47:00,359
requirement or no we're okay with MMS

1274
00:47:00,359 --> 00:47:02,400
over that Channel or whatever

1275
00:47:02,400 --> 00:47:04,079
I just think that that's worth poking on

1276
00:47:04,079 --> 00:47:05,940
sort of what drives that limit a bit

1277
00:47:05,940 --> 00:47:07,319
yeah

1278
00:47:07,319 --> 00:47:09,540
um I think I can answer that more or

1279
00:47:09,540 --> 00:47:11,819
less like SMS is insco

1280
00:47:11,819 --> 00:47:15,960
uh email is in scope WhatsApp iMessage I

1281
00:47:15,960 --> 00:47:18,000
I think it's great but I don't think the

1282
00:47:18,000 --> 00:47:20,280
requirement is that anybody be able to

1283
00:47:20,280 --> 00:47:21,839
answer all these things right now right

1284
00:47:21,839 --> 00:47:24,119
I mean let's just let's just keep like

1285
00:47:24,119 --> 00:47:25,920
put a pin in this this goes into

1286
00:47:25,920 --> 00:47:29,220
requirements document it's uh right

1287
00:47:29,220 --> 00:47:30,619
uh

1288
00:47:30,619 --> 00:47:32,940
I wonder how much attention is being

1289
00:47:32,940 --> 00:47:36,119
paid to uh potential abuse is this a

1290
00:47:36,119 --> 00:47:37,800
kind of a standardized fishing channel

1291
00:47:37,800 --> 00:47:40,079
effectively where somebody can start

1292
00:47:40,079 --> 00:47:41,880
soliciting credentials from me and if

1293
00:47:41,880 --> 00:47:44,099
I'm a naive user I will start giving

1294
00:47:44,099 --> 00:47:46,559
them away uh to all kinds of parties

1295
00:47:46,559 --> 00:47:48,780
whom it misrepresent who they are or

1296
00:47:48,780 --> 00:47:51,059
what they want or why I should give the

1297
00:47:51,059 --> 00:47:53,880
credentials to them uh what's the story

1298
00:47:53,880 --> 00:47:57,300
on uh protecting the mostly naive

1299
00:47:57,300 --> 00:47:59,460
audience that's likely to encounter this

1300
00:47:59,460 --> 00:48:01,140
facility

1301
00:48:01,140 --> 00:48:03,300
so because the relationship between the

1302
00:48:03,300 --> 00:48:05,040
sender and the credential authority to

1303
00:48:05,040 --> 00:48:06,780
get the provisioning information is

1304
00:48:06,780 --> 00:48:10,140
happens before this protocol comes in

1305
00:48:10,140 --> 00:48:11,280
we don't think there could be much or

1306
00:48:11,280 --> 00:48:13,680
any fishing on the sending of a

1307
00:48:13,680 --> 00:48:15,900
credential side it would only be sharing

1308
00:48:15,900 --> 00:48:17,520
credentials to someone that maybe they

1309
00:48:17,520 --> 00:48:19,579
didn't necessarily want

1310
00:48:19,579 --> 00:48:22,260
right well that's the key question right

1311
00:48:22,260 --> 00:48:25,020
I mean sure I'm I have a pre-established

1312
00:48:25,020 --> 00:48:28,559
relationship with the relay uh Bank car

1313
00:48:28,559 --> 00:48:31,160
my car company whoever now somebody

1314
00:48:31,160 --> 00:48:34,500
encourages me to share do I really know

1315
00:48:34,500 --> 00:48:36,900
who they are how easy is it to

1316
00:48:36,900 --> 00:48:39,000
misrepresent what's going on to me and

1317
00:48:39,000 --> 00:48:42,059
so on uh you know it's how much thought

1318
00:48:42,059 --> 00:48:43,920
or our attention needs to be paid to

1319
00:48:43,920 --> 00:48:45,119
this

1320
00:48:45,119 --> 00:48:47,040
um great question so potentially there

1321
00:48:47,040 --> 00:48:50,099
is a risk like when we generate that

1322
00:48:50,099 --> 00:48:53,220
mailbox and we generate a share URL to

1323
00:48:53,220 --> 00:48:55,140
that mailbox right

1324
00:48:55,140 --> 00:48:58,800
um as Nick previously said the least of

1325
00:48:58,800 --> 00:49:01,740
the relay address is trusted the address

1326
00:49:01,740 --> 00:49:05,760
is it's uh limited by the allow list

1327
00:49:05,760 --> 00:49:08,400
second the content of the preview which

1328
00:49:08,400 --> 00:49:11,400
I will discuss later the content shall

1329
00:49:11,400 --> 00:49:14,040
be trusted by really server so it shall

1330
00:49:14,040 --> 00:49:16,680
originate from a trusted server for us

1331
00:49:16,680 --> 00:49:21,000
it's a device manufacturer server so uh

1332
00:49:21,000 --> 00:49:22,980
the picture that they will see in the

1333
00:49:22,980 --> 00:49:25,800
preview it won't come from Bob and

1334
00:49:25,800 --> 00:49:29,339
mom.com whatever flowers.com it will

1335
00:49:29,339 --> 00:49:32,420
come from a trusted server and

1336
00:49:32,420 --> 00:49:34,980
I think it's it's

1337
00:49:34,980 --> 00:49:37,079
um one of the security considerations

1338
00:49:37,079 --> 00:49:39,059
mentioned in this is what the recipient

1339
00:49:39,059 --> 00:49:41,220
sees or what the potential sender sees

1340
00:49:41,220 --> 00:49:43,680
um uh the recipences because I mentioned

1341
00:49:43,680 --> 00:49:45,240
what the potential sender sees when

1342
00:49:45,240 --> 00:49:46,619
somebody says please share the

1343
00:49:46,619 --> 00:49:48,839
credential with me I am your sister

1344
00:49:48,839 --> 00:49:51,540
stuck in some place where I need help

1345
00:49:51,540 --> 00:49:54,300
this is this is something uh worth

1346
00:49:54,300 --> 00:49:56,220
thinking about a lot

1347
00:49:56,220 --> 00:49:58,020
um but I don't think it's part of The

1348
00:49:58,020 --> 00:49:59,280
Proposal at least at this point maybe

1349
00:49:59,280 --> 00:50:00,420
that should be something that we look at

1350
00:50:00,420 --> 00:50:02,520
further

1351
00:50:02,520 --> 00:50:04,500
yeah um the one piece

1352
00:50:04,500 --> 00:50:06,960
over that is the

1353
00:50:06,960 --> 00:50:08,640
bond to the solution yet but we have a

1354
00:50:08,640 --> 00:50:10,859
delete mailbox API and the idea is that

1355
00:50:10,859 --> 00:50:12,900
you could call that at any moment

1356
00:50:12,900 --> 00:50:15,660
um not just so if you were to send that

1357
00:50:15,660 --> 00:50:18,300
share link you know oh no even if like

1358
00:50:18,300 --> 00:50:19,440
you're kind of talking about malicious

1359
00:50:19,440 --> 00:50:20,880
situation but even on an accident you

1360
00:50:20,880 --> 00:50:22,619
sent it to the wrong person you're able

1361
00:50:22,619 --> 00:50:24,300
to go delete that mailbox before that

1362
00:50:24,300 --> 00:50:26,400
recipient has provisioned

1363
00:50:26,400 --> 00:50:28,440
um so that's from from our perspective

1364
00:50:28,440 --> 00:50:30,660
how we could uh have a little bit of

1365
00:50:30,660 --> 00:50:32,640
security about that in the relay server

1366
00:50:32,640 --> 00:50:34,859
and then from a larger perspective that

1367
00:50:34,859 --> 00:50:37,200
credential Authority is in charge so

1368
00:50:37,200 --> 00:50:39,480
like worst case scenario everything goes

1369
00:50:39,480 --> 00:50:40,859
wrong you could talk to that credential

1370
00:50:40,859 --> 00:50:42,780
Authority and say hey this was wrong

1371
00:50:42,780 --> 00:50:44,760
please revoke that and we have that like

1372
00:50:44,760 --> 00:50:46,319
third party outside the relay server

1373
00:50:46,319 --> 00:50:49,640
that could handle that situation

1374
00:50:49,800 --> 00:50:53,280
so um just wanted to confirm whether a

1375
00:50:53,280 --> 00:50:54,839
part of the question is the trust

1376
00:50:54,839 --> 00:50:56,700
relationship between the sender device

1377
00:50:56,700 --> 00:50:59,280
and the delay and

1378
00:50:59,280 --> 00:51:02,780
um what's the attack here

1379
00:51:05,880 --> 00:51:06,599
um

1380
00:51:06,599 --> 00:51:10,020
or is it like user experience with the

1381
00:51:10,020 --> 00:51:12,960
device when they unintentionally share

1382
00:51:12,960 --> 00:51:17,300
something they didn't want to

1383
00:51:21,839 --> 00:51:23,880
system feature it's to what extent will

1384
00:51:23,880 --> 00:51:28,319
I know who I'm really sharing with uh it

1385
00:51:28,319 --> 00:51:30,540
applies more broadly really than this

1386
00:51:30,540 --> 00:51:32,880
particular thing but naming is hard and

1387
00:51:32,880 --> 00:51:34,680
this thing really automates it to a

1388
00:51:34,680 --> 00:51:36,720
degree where the attacks become easier I

1389
00:51:36,720 --> 00:51:39,480
think uh and you know do I really know

1390
00:51:39,480 --> 00:51:42,079
who I'm sharing with how strong is that

1391
00:51:42,079 --> 00:51:45,000
when it's intermediated by a third party

1392
00:51:45,000 --> 00:51:46,520
especially

1393
00:51:46,520 --> 00:51:48,780
yeah I want to just chime in again this

1394
00:51:48,780 --> 00:51:50,520
is Nick from alphabet again

1395
00:51:50,520 --> 00:51:53,520
um I think this whole identity of sender

1396
00:51:53,520 --> 00:51:55,319
receiver especially on the receiver side

1397
00:51:55,319 --> 00:51:56,339
maybe

1398
00:51:56,339 --> 00:51:58,859
um this is a little bit more difficult

1399
00:51:58,859 --> 00:52:01,859
to solve and definitely out of scope for

1400
00:52:01,859 --> 00:52:03,480
um the working group that we're we're

1401
00:52:03,480 --> 00:52:04,920
trying to propose here for the solutions

1402
00:52:04,920 --> 00:52:07,500
the the relay server here is it's not an

1403
00:52:07,500 --> 00:52:09,839
Arbiter of like identity here and we're

1404
00:52:09,839 --> 00:52:11,940
really trying to not you know at least

1405
00:52:11,940 --> 00:52:13,880
right now maybe in the future you know

1406
00:52:13,880 --> 00:52:16,380
we may have ideas around this but not

1407
00:52:16,380 --> 00:52:19,920
not trying to solve the identity issue

1408
00:52:19,920 --> 00:52:23,300
um or be the authority of that

1409
00:52:26,940 --> 00:52:28,680
yeah I think

1410
00:52:28,680 --> 00:52:30,660
um and uh this is Matt again I think

1411
00:52:30,660 --> 00:52:32,400
just to add on to what Nick said you

1412
00:52:32,400 --> 00:52:33,660
know when you really come down to it

1413
00:52:33,660 --> 00:52:35,819
you're initiating the transfer over

1414
00:52:35,819 --> 00:52:38,579
credential let's pretend you use SMS or

1415
00:52:38,579 --> 00:52:40,740
email just just just to you know use an

1416
00:52:40,740 --> 00:52:42,119
example

1417
00:52:42,119 --> 00:52:44,520
you know you don't as the sender really

1418
00:52:44,520 --> 00:52:48,420
have confirmation of the identity of the

1419
00:52:48,420 --> 00:52:50,760
recipient you only know that you know

1420
00:52:50,760 --> 00:52:52,140
you know for example I've been texting

1421
00:52:52,140 --> 00:52:54,240
this person at this you know SMS number

1422
00:52:54,240 --> 00:52:56,880
for you know five years technically you

1423
00:52:56,880 --> 00:52:58,619
know one minute before you issue that

1424
00:52:58,619 --> 00:53:00,900
share they could have gotten a new phone

1425
00:53:00,900 --> 00:53:02,579
number and that phone number could have

1426
00:53:02,579 --> 00:53:05,040
been reassigned from the carrier

1427
00:53:05,040 --> 00:53:06,720
um and in possession from somebody else

1428
00:53:06,720 --> 00:53:09,420
and so I think you know to Nick's point

1429
00:53:09,420 --> 00:53:11,099
and to you know Dimitri's point it

1430
00:53:11,099 --> 00:53:14,040
really the onus is really on the sender

1431
00:53:14,040 --> 00:53:15,480
to make sure that they're sending the

1432
00:53:15,480 --> 00:53:18,599
credential to a channel that is tenured

1433
00:53:18,599 --> 00:53:20,460
from their perspective and that they

1434
00:53:20,460 --> 00:53:22,319
have confidence of who is on the other

1435
00:53:22,319 --> 00:53:24,059
end of whatever Communication channel

1436
00:53:24,059 --> 00:53:26,160
they choose to send it through and that

1437
00:53:26,160 --> 00:53:27,720
that doesn't really have anything to do

1438
00:53:27,720 --> 00:53:31,399
with the relay server in my mind at all

1439
00:53:33,180 --> 00:53:35,339
all right um all right

1440
00:53:35,339 --> 00:53:37,619
um I I

1441
00:53:37,619 --> 00:53:39,059
um we're at

1442
00:53:39,059 --> 00:53:41,579
um the point today where we're going to

1443
00:53:41,579 --> 00:53:43,500
switch over to talk a little bit about

1444
00:53:43,500 --> 00:53:46,380
the proposed solution lathe yes I have a

1445
00:53:46,380 --> 00:53:48,720
minutes question for you then go ahead

1446
00:53:48,720 --> 00:53:51,480
you said at one point does the working

1447
00:53:51,480 --> 00:53:54,119
group want a separate threat model draft

1448
00:53:54,119 --> 00:53:57,059
and later you said no I said does the

1449
00:53:57,059 --> 00:53:58,920
working group want a separate uh

1450
00:53:58,920 --> 00:54:01,020
requirements draft actually I could

1451
00:54:01,020 --> 00:54:02,700
include a threat model discussion okay

1452
00:54:02,700 --> 00:54:04,260
at least that was but you also later

1453
00:54:04,260 --> 00:54:06,359
said something about an assumptions

1454
00:54:06,359 --> 00:54:09,839
draft are those all in one I I don't

1455
00:54:09,839 --> 00:54:12,720
remember using that term exactly but I

1456
00:54:12,720 --> 00:54:14,880
would assume that we would follow the

1457
00:54:14,880 --> 00:54:17,400
typical model of whitef working groups

1458
00:54:17,400 --> 00:54:18,839
or handling requirements draft that

1459
00:54:18,839 --> 00:54:21,059
includes you know enough of these things

1460
00:54:21,059 --> 00:54:22,319
too

1461
00:54:22,319 --> 00:54:24,599
make sure that everybody hi Roman

1462
00:54:24,599 --> 00:54:26,700
denilio as the responsible ad we'll take

1463
00:54:26,700 --> 00:54:28,260
the document thing offline because we

1464
00:54:28,260 --> 00:54:29,640
made some decisions in the charting

1465
00:54:29,640 --> 00:54:31,980
process not to do separate architecture

1466
00:54:31,980 --> 00:54:33,660
and requirements documents so we'll sort

1467
00:54:33,660 --> 00:54:36,558
it out all right

1468
00:54:44,160 --> 00:54:47,819
all right I think try to have to step up

1469
00:54:47,819 --> 00:54:50,880
step forward to the

1470
00:54:50,880 --> 00:54:54,480
yes there we go

1471
00:54:54,480 --> 00:54:57,559
and we can continue

1472
00:55:08,640 --> 00:55:11,940
um there we go hello my name is Dmitry I

1473
00:55:11,940 --> 00:55:14,160
I will present to you a proposed

1474
00:55:14,160 --> 00:55:16,500
solution uh to the problem of

1475
00:55:16,500 --> 00:55:18,299
transferring credential

1476
00:55:18,299 --> 00:55:21,299
um digital credential securely

1477
00:55:21,299 --> 00:55:23,400
so um

1478
00:55:23,400 --> 00:55:25,920
thank you the Crux of our proposed

1479
00:55:25,920 --> 00:55:28,559
solution is a release server that

1480
00:55:28,559 --> 00:55:30,599
facilitates a short-lived Communication

1481
00:55:30,599 --> 00:55:32,880
channel between sender and receiver

1482
00:55:32,880 --> 00:55:34,160
devices

1483
00:55:34,160 --> 00:55:36,540
sender and receiver devices will

1484
00:55:36,540 --> 00:55:38,940
communicate over that um

1485
00:55:38,940 --> 00:55:42,180
agility server using a single mailbox

1486
00:55:42,180 --> 00:55:45,059
all the messages will be encrypted using

1487
00:55:45,059 --> 00:55:48,260
asymmetric encryption key or Secret

1488
00:55:48,260 --> 00:55:51,000
communication over a release server is

1489
00:55:51,000 --> 00:55:52,980
completely decoupled from the

1490
00:55:52,980 --> 00:55:54,740
provisioning logic

1491
00:55:54,740 --> 00:55:58,020
and uh the content of the messages is

1492
00:55:58,020 --> 00:56:00,480
opaque to delay server

1493
00:56:00,480 --> 00:56:04,140
uh English cell no have any visibility

1494
00:56:04,140 --> 00:56:06,559
to the content or sensitive information

1495
00:56:06,559 --> 00:56:08,819
within the encrypted provisioning

1496
00:56:08,819 --> 00:56:10,380
information

1497
00:56:10,380 --> 00:56:12,720
and the content shall never be revealed

1498
00:56:12,720 --> 00:56:13,980
to it

1499
00:56:13,980 --> 00:56:17,520
some metadata may be visible such as a

1500
00:56:17,520 --> 00:56:20,520
format type which is required to define

1501
00:56:20,520 --> 00:56:24,260
whether it's stateless or status flow

1502
00:56:24,260 --> 00:56:27,240
let's walk through the solution at a

1503
00:56:27,240 --> 00:56:29,359
very high level

1504
00:56:29,359 --> 00:56:32,660
so um the standard device

1505
00:56:32,660 --> 00:56:35,400
initiates the transaction by uploading

1506
00:56:35,400 --> 00:56:37,200
provisioning information to the delay

1507
00:56:37,200 --> 00:56:40,260
server creating a mailbox uniquely

1508
00:56:40,260 --> 00:56:43,319
identified by mlbox identifier

1509
00:56:43,319 --> 00:56:47,700
and then it sends a share URL containing

1510
00:56:47,700 --> 00:56:51,660
secret over a separate Channel SMS email

1511
00:56:51,660 --> 00:56:53,400
WhatsApp

1512
00:56:53,400 --> 00:56:56,579
to the receiver device a receiver device

1513
00:56:56,579 --> 00:57:00,240
downloads the content decrypts it using

1514
00:57:00,240 --> 00:57:03,359
the secret and Provisions a new

1515
00:57:03,359 --> 00:57:05,220
credential to the device

1516
00:57:05,220 --> 00:57:08,880
uh the process of redeeming a credential

1517
00:57:08,880 --> 00:57:11,000
given a

1518
00:57:11,000 --> 00:57:13,619
provisional information is out of scope

1519
00:57:13,619 --> 00:57:16,640
for this working group

1520
00:57:19,040 --> 00:57:22,680
we defined two data flows here one is

1521
00:57:22,680 --> 00:57:25,819
stateless another is stateful

1522
00:57:25,819 --> 00:57:27,680
status

1523
00:57:27,680 --> 00:57:31,380
facilitates a single unidirectional data

1524
00:57:31,380 --> 00:57:32,339
transfer

1525
00:57:32,339 --> 00:57:36,059
from sender to relay to a receiver new

1526
00:57:36,059 --> 00:57:38,520
credential is generated by credential

1527
00:57:38,520 --> 00:57:40,500
Authority here

1528
00:57:40,500 --> 00:57:43,859
uh in a stateful flow again a server

1529
00:57:43,859 --> 00:57:47,280
facilitates multiple data transfers to

1530
00:57:47,280 --> 00:57:49,500
prepare credential data

1531
00:57:49,500 --> 00:57:52,260
and for registration or provisioning by

1532
00:57:52,260 --> 00:57:53,460
receiver

1533
00:57:53,460 --> 00:57:56,040
a green server does not limit the number

1534
00:57:56,040 --> 00:57:59,160
of such data transfers between sender

1535
00:57:59,160 --> 00:58:01,200
and receiver

1536
00:58:01,200 --> 00:58:03,660
the new credential scheme material is

1537
00:58:03,660 --> 00:58:05,880
generated by a receiver device according

1538
00:58:05,880 --> 00:58:07,319
to CCC spec

1539
00:58:07,319 --> 00:58:10,319
for instance for example here and it

1540
00:58:10,319 --> 00:58:13,260
needs to be authorized by sender hence

1541
00:58:13,260 --> 00:58:16,380
an additional round trip is required

1542
00:58:16,380 --> 00:58:18,900
uh the details will be provided later on

1543
00:58:18,900 --> 00:58:21,180
in a couple of slides when I go through

1544
00:58:21,180 --> 00:58:24,259
the data flow

1545
00:58:24,299 --> 00:58:25,920
um now we're going to discuss our

1546
00:58:25,920 --> 00:58:28,400
Solution on the API level

1547
00:58:28,400 --> 00:58:31,020
for our solution we describe degree

1548
00:58:31,020 --> 00:58:32,940
storage as mailbox

1549
00:58:32,940 --> 00:58:36,000
are there simple data stores along

1550
00:58:36,000 --> 00:58:39,000
um to be written to enter up from

1551
00:58:39,000 --> 00:58:42,319
so to begin we create a mailbox

1552
00:58:42,319 --> 00:58:44,579
it would be at the beginning of the

1553
00:58:44,579 --> 00:58:47,339
transfer flow a standard device would

1554
00:58:47,339 --> 00:58:50,579
call again a server to create a mailbox

1555
00:58:50,579 --> 00:58:52,500
storing encrypted provision and

1556
00:58:52,500 --> 00:58:53,880
information

1557
00:58:53,880 --> 00:58:56,400
degree server will generate a unique

1558
00:58:56,400 --> 00:58:59,940
mailbox identifier and now for that data

1559
00:58:59,940 --> 00:59:02,760
and return Azure URL pointing to that

1560
00:59:02,760 --> 00:59:04,619
mailbox

1561
00:59:04,619 --> 00:59:07,920
when it's even sure you're well most

1562
00:59:07,920 --> 00:59:10,859
messaging applications will perform a

1563
00:59:10,859 --> 00:59:12,260
get request

1564
00:59:12,260 --> 00:59:15,720
to read display information preview in

1565
00:59:15,720 --> 00:59:17,760
open graph data format

1566
00:59:17,760 --> 00:59:19,980
the messaging application on the

1567
00:59:19,980 --> 00:59:21,200
receiver

1568
00:59:21,200 --> 00:59:25,020
will if it supports open grab format it

1569
00:59:25,020 --> 00:59:27,480
will generate a credential preview in a

1570
00:59:27,480 --> 00:59:30,720
messaging app so that the user can

1571
00:59:30,720 --> 00:59:33,540
realize what they are accepting before

1572
00:59:33,540 --> 00:59:36,720
they add the credential and this is

1573
00:59:36,720 --> 00:59:40,020
mostly for a user experience better user

1574
00:59:40,020 --> 00:59:42,319
experience

1575
00:59:42,359 --> 00:59:45,420
uh when a user has clicked on the link

1576
00:59:45,420 --> 00:59:48,599
and accept uh the

1577
00:59:48,599 --> 00:59:51,480
um sure the receiver device will go read

1578
00:59:51,480 --> 00:59:53,579
the secure information from the real

1579
00:59:53,579 --> 00:59:56,339
email box in order to fetch encrypted

1580
00:59:56,339 --> 00:59:58,799
provision information

1581
00:59:58,799 --> 01:00:01,619
um it will use the secret past industry

1582
01:00:01,619 --> 01:00:05,099
URL in order to decrypt it uh

1583
01:00:05,099 --> 01:00:07,740
and provision the credential to the

1584
01:00:07,740 --> 01:00:08,940
device

1585
01:00:08,940 --> 01:00:12,299
for situations that require multiple

1586
01:00:12,299 --> 01:00:15,540
round trips to the delay server we have

1587
01:00:15,540 --> 01:00:18,180
an update mailbox API

1588
01:00:18,180 --> 01:00:21,660
I hear sander and receiver devices could

1589
01:00:21,660 --> 01:00:25,619
upload and update the same mailbox in a

1590
01:00:25,619 --> 01:00:27,299
limited time in accordance to the

1591
01:00:27,299 --> 01:00:29,240
protocol they are following

1592
01:00:29,240 --> 01:00:32,760
you can imagine a back and forth between

1593
01:00:32,760 --> 01:00:35,819
sender and the receiver device uh where

1594
01:00:35,819 --> 01:00:38,339
each device reads and updates the

1595
01:00:38,339 --> 01:00:39,780
information

1596
01:00:39,780 --> 01:00:41,880
um with their own

1597
01:00:41,880 --> 01:00:44,339
once the transfer is complete there is a

1598
01:00:44,339 --> 01:00:48,599
delete mailbox API in order to clean up

1599
01:00:48,599 --> 01:00:51,599
um this way we can ensure that mailbox

1600
01:00:51,599 --> 01:00:54,839
are purged after the transfer process is

1601
01:00:54,839 --> 01:00:55,920
finished

1602
01:00:55,920 --> 01:00:59,819
also it allows users to cancel the

1603
01:00:59,819 --> 01:01:02,880
transfer process if they choose so by

1604
01:01:02,880 --> 01:01:05,220
deleting the mailbox

1605
01:01:05,220 --> 01:01:10,459
and rendering any share URL useless

1606
01:01:13,280 --> 01:01:16,440
now let's work through the shrugging

1607
01:01:16,440 --> 01:01:20,640
process in details we have the following

1608
01:01:20,640 --> 01:01:22,859
actors standard device

1609
01:01:22,859 --> 01:01:26,640
a receiver device a really server and an

1610
01:01:26,640 --> 01:01:29,339
optional actor credential Authority

1611
01:01:29,339 --> 01:01:31,740
so which is out of scope for this

1612
01:01:31,740 --> 01:01:36,200
working group but given here for clarity

1613
01:01:38,599 --> 01:01:42,420
so first Credence sender

1614
01:01:42,420 --> 01:01:46,260
chooses what a part of credential to

1615
01:01:46,260 --> 01:01:50,599
transfer and initiates the process

1616
01:01:50,700 --> 01:01:51,540
um

1617
01:01:51,540 --> 01:01:53,000
standard device

1618
01:01:53,000 --> 01:01:56,099
makes a call to the credential Authority

1619
01:01:56,099 --> 01:01:59,160
in order to get provisioning information

1620
01:01:59,160 --> 01:02:02,700
it generates a secret and encrypts the

1621
01:02:02,700 --> 01:02:04,500
content of the provisional information

1622
01:02:04,500 --> 01:02:07,400
with that secret

1623
01:02:11,039 --> 01:02:14,160
third it makes a call to the academy

1624
01:02:14,160 --> 01:02:17,460
server creates a mailbox and uploads the

1625
01:02:17,460 --> 01:02:19,440
encrypted content to the ugly server

1626
01:02:19,440 --> 01:02:21,780
again server

1627
01:02:21,780 --> 01:02:24,500
um generates an email box identifier

1628
01:02:24,500 --> 01:02:27,839
builds a show URL link returns it to the

1629
01:02:27,839 --> 01:02:30,619
assembled device

1630
01:02:30,740 --> 01:02:33,900
fourth standard device sends the show

1631
01:02:33,900 --> 01:02:38,760
URL with a secret in the URL fragment

1632
01:02:38,760 --> 01:02:42,839
over a separate Channel as I said SMS

1633
01:02:42,839 --> 01:02:45,900
email WhatsApp iMessage

1634
01:02:45,900 --> 01:02:49,579
uh to the receiver device

1635
01:02:50,660 --> 01:02:52,920
the receiver device

1636
01:02:52,920 --> 01:02:54,780
uh there is a messaging application

1637
01:02:54,780 --> 01:02:57,720
which sees the incoming message it makes

1638
01:02:57,720 --> 01:03:00,319
a get request and redisplay information

1639
01:03:00,319 --> 01:03:04,380
generates a preview shows it to the user

1640
01:03:04,380 --> 01:03:06,960
user sees a new message as a credential

1641
01:03:06,960 --> 01:03:08,039
preview

1642
01:03:08,039 --> 01:03:10,680
in a messaging app and decides to accept

1643
01:03:10,680 --> 01:03:14,579
the sure clicks on it sure URL is

1644
01:03:14,579 --> 01:03:17,180
forwarded to the platform specific

1645
01:03:17,180 --> 01:03:20,579
credential management application for

1646
01:03:20,579 --> 01:03:23,359
instance wallet

1647
01:03:24,740 --> 01:03:28,559
uh six a receiver device makes a read

1648
01:03:28,559 --> 01:03:30,180
secure information call to the relay

1649
01:03:30,180 --> 01:03:31,140
server

1650
01:03:31,140 --> 01:03:33,720
downloads the president information

1651
01:03:33,720 --> 01:03:36,180
uh decrypts it

1652
01:03:36,180 --> 01:03:39,359
uh using Secret in fragment part of the

1653
01:03:39,359 --> 01:03:41,880
Azure URL

1654
01:03:41,880 --> 01:03:44,520
it gets the prison uh information as a

1655
01:03:44,520 --> 01:03:46,640
result seventh

1656
01:03:46,640 --> 01:03:49,680
slide please seventh um receiver device

1657
01:03:49,680 --> 01:03:53,460
makes a call to provisioning Authority

1658
01:03:53,460 --> 01:03:56,160
in order to redeem provision information

1659
01:03:56,160 --> 01:03:58,619
for credential information and then

1660
01:03:58,619 --> 01:04:00,720
Provisions a new credential to the

1661
01:04:00,720 --> 01:04:01,799
device

1662
01:04:01,799 --> 01:04:05,700
and final step 8 uh receiver deletes the

1663
01:04:05,700 --> 01:04:08,579
mailbox and this concludes the stateless

1664
01:04:08,579 --> 01:04:11,000
flow

1665
01:04:11,880 --> 01:04:14,760
uh in a stateful flow there is no

1666
01:04:14,760 --> 01:04:17,640
credential Authority per se instead a

1667
01:04:17,640 --> 01:04:20,940
pair of sander and receiver device act

1668
01:04:20,940 --> 01:04:24,799
together as a credential Authority

1669
01:04:24,799 --> 01:04:26,880
generating new credential information

1670
01:04:26,880 --> 01:04:30,780
and authorizing it for a new device

1671
01:04:30,780 --> 01:04:33,839
and second flow has additional steps

1672
01:04:33,839 --> 01:04:35,940
after step 6 comparing to the previous

1673
01:04:35,940 --> 01:04:40,680
stateless flow so let's start with seven

1674
01:04:40,680 --> 01:04:43,319
um a receiver device generates a new key

1675
01:04:43,319 --> 01:04:46,260
material for the receiver updates

1676
01:04:46,260 --> 01:04:48,660
provisional information with key sign in

1677
01:04:48,660 --> 01:04:49,619
the request

1678
01:04:49,619 --> 01:04:52,079
and uploads the content to the delay

1679
01:04:52,079 --> 01:04:55,460
server using update mailbox API

1680
01:04:55,460 --> 01:04:58,799
eight sender device against updated

1681
01:04:58,799 --> 01:05:00,660
provision information from the mailbox

1682
01:05:00,660 --> 01:05:04,879
and receives key signing request

1683
01:05:05,000 --> 01:05:09,900
9. sender authorizes new receiver scheme

1684
01:05:09,900 --> 01:05:12,960
material in a key sign and response and

1685
01:05:12,960 --> 01:05:15,480
updates the provision in info uploads it

1686
01:05:15,480 --> 01:05:18,500
to the mailbox with update mailbox call

1687
01:05:18,500 --> 01:05:21,900
and receiver device downloads the

1688
01:05:21,900 --> 01:05:24,900
updated provision info decrypts it and

1689
01:05:24,900 --> 01:05:28,200
Provisions the new credential locally

1690
01:05:28,200 --> 01:05:30,599
uh done finally the receiver device

1691
01:05:30,599 --> 01:05:33,539
deletes the mailbox and this concludes

1692
01:05:33,539 --> 01:05:35,700
the status flow

1693
01:05:35,700 --> 01:05:38,039
so we just presented to you the problem

1694
01:05:38,039 --> 01:05:40,859
and the solution to the transferring

1695
01:05:40,859 --> 01:05:43,020
digital credentials securely between two

1696
01:05:43,020 --> 01:05:44,160
devices

1697
01:05:44,160 --> 01:05:46,440
as we stated in the beginning the

1698
01:05:46,440 --> 01:05:49,079
proposed solution is based on the

1699
01:05:49,079 --> 01:05:51,839
transfer of authorization information or

1700
01:05:51,839 --> 01:05:53,940
provisioning information that we call it

1701
01:05:53,940 --> 01:05:56,880
previously between two devices in order

1702
01:05:56,880 --> 01:05:59,760
to obtain new credential from the

1703
01:05:59,760 --> 01:06:01,859
credential Authority rather than

1704
01:06:01,859 --> 01:06:04,200
transferring original credential with

1705
01:06:04,200 --> 01:06:07,319
all related cryptographic material

1706
01:06:07,319 --> 01:06:10,700
uh redress both privacy and security

1707
01:06:10,700 --> 01:06:12,900
concerns and requirements to the

1708
01:06:12,900 --> 01:06:15,720
solution using mechanisms defined in the

1709
01:06:15,720 --> 01:06:18,720
draft document please feel free to read

1710
01:06:18,720 --> 01:06:22,879
the document at the following URL

1711
01:06:23,720 --> 01:06:26,640
uh so thank you very much for showing

1712
01:06:26,640 --> 01:06:29,339
interest to this working group I really

1713
01:06:29,339 --> 01:06:31,980
hope that more people will participate

1714
01:06:31,980 --> 01:06:35,579
in this working group and uh we hope our

1715
01:06:35,579 --> 01:06:37,799
proposal will be adopted by ITF

1716
01:06:37,799 --> 01:06:39,359
community

1717
01:06:39,359 --> 01:06:43,559
and now we move on to q a session

1718
01:06:43,559 --> 01:06:45,780
right before everybody rushes to the

1719
01:06:45,780 --> 01:06:48,599
mics again I want to ask who

1720
01:06:48,599 --> 01:06:49,280
um

1721
01:06:49,280 --> 01:06:53,839
quick show answers read the draft

1722
01:06:54,619 --> 01:06:58,079
well that's that's good you're you can

1723
01:06:58,079 --> 01:07:00,119
raise your home like kind of like this

1724
01:07:00,119 --> 01:07:02,940
right all right that's good uh it's a

1725
01:07:02,940 --> 01:07:05,220
good size number of people all right uh

1726
01:07:05,220 --> 01:07:06,720
Victor is

1727
01:07:06,720 --> 01:07:08,779
um

1728
01:07:09,839 --> 01:07:13,020
hi um the the protocol looks a lot like

1729
01:07:13,020 --> 01:07:17,900
GSS API embedded in HTTP with the uh

1730
01:07:17,900 --> 01:07:21,020
credentials of the uh receiver sent

1731
01:07:21,020 --> 01:07:23,160
asynchronously so they can participate

1732
01:07:23,160 --> 01:07:27,000
in the ongoing conversation uh is this

1733
01:07:27,000 --> 01:07:28,859
roughly correct have you looked at GSS

1734
01:07:28,859 --> 01:07:31,079
API because in some sense

1735
01:07:31,079 --> 01:07:33,420
uh the state machine is sort of

1736
01:07:33,420 --> 01:07:38,000
indistinguishable from what goes on GSS

1737
01:07:39,359 --> 01:07:40,559
um

1738
01:07:40,559 --> 01:07:43,200
good question uh we look into a number

1739
01:07:43,200 --> 01:07:45,960
of protocols but not into that precise

1740
01:07:45,960 --> 01:07:48,280
I'm not familiar with that

1741
01:07:48,280 --> 01:07:51,619
[Music]

1742
01:07:57,660 --> 01:08:00,000
your scroller um I'm just trying to

1743
01:08:00,000 --> 01:08:02,520
tease apart the pieces here

1744
01:08:02,520 --> 01:08:04,020
so

1745
01:08:04,020 --> 01:08:06,180
suppose we relax

1746
01:08:06,180 --> 01:08:07,619
the requirement

1747
01:08:07,619 --> 01:08:09,839
that you have to go over Channel

1748
01:08:09,839 --> 01:08:12,059
that only cares multiple bites how much

1749
01:08:12,059 --> 01:08:14,599
this is left

1750
01:08:18,600 --> 01:08:21,060
that's very good point

1751
01:08:21,060 --> 01:08:23,580
um we do consider that different

1752
01:08:23,580 --> 01:08:26,399
credentials may have different value and

1753
01:08:26,399 --> 01:08:28,380
based on that they may have different

1754
01:08:28,380 --> 01:08:30,960
requirements and additional mechanisms

1755
01:08:30,960 --> 01:08:34,380
that we can enforce in addition to that

1756
01:08:34,380 --> 01:08:36,420
search Channel

1757
01:08:36,420 --> 01:08:39,179
where are those enforced

1758
01:08:39,179 --> 01:08:41,819
um I believe part of them will be

1759
01:08:41,819 --> 01:08:45,839
enforced as let's say for the car key uh

1760
01:08:45,839 --> 01:08:48,540
enforced by a CCC standard uh at the

1761
01:08:48,540 --> 01:08:50,040
time of provisioning

1762
01:08:50,040 --> 01:08:52,140
there are multiple mechanisms that we

1763
01:08:52,140 --> 01:08:54,420
can utilize additional Verification

1764
01:08:54,420 --> 01:08:59,100
codes uh second factor and such no I

1765
01:08:59,100 --> 01:09:00,960
think you've lost me I mean so like like

1766
01:09:00,960 --> 01:09:02,640
fundamentally what you got is you've got

1767
01:09:02,640 --> 01:09:05,279
a system where the

1768
01:09:05,279 --> 01:09:07,319
you've got you got a Dropbox on the

1769
01:09:07,319 --> 01:09:12,719
server and the initiator sends a like

1770
01:09:12,719 --> 01:09:14,100
the rest of the Dropbox to the receiver

1771
01:09:14,100 --> 01:09:15,839
and then they bounce back and forth

1772
01:09:15,839 --> 01:09:17,580
messages to the Dropbox

1773
01:09:17,580 --> 01:09:19,979
so but the Dropbox doesn't make any

1774
01:09:19,979 --> 01:09:21,120
other kind of the messages so my

1775
01:09:21,120 --> 01:09:22,738
question is if we just assume the

1776
01:09:22,738 --> 01:09:24,479
channel had like wide capacity instead

1777
01:09:24,479 --> 01:09:26,640
of narrow capacity what will be left of

1778
01:09:26,640 --> 01:09:28,140
this protocol

1779
01:09:28,140 --> 01:09:30,839
I think this is Matt Byington again I

1780
01:09:30,839 --> 01:09:33,658
think there are some really simple you

1781
01:09:33,658 --> 01:09:35,759
know borderline non-technical reasons as

1782
01:09:35,759 --> 01:09:37,920
well Eric like like you don't want to

1783
01:09:37,920 --> 01:09:40,979
see like you know like an x509 encoded

1784
01:09:40,979 --> 01:09:43,080
public key you know coming through on a

1785
01:09:43,080 --> 01:09:44,520
on a communication Channel That's shown

1786
01:09:44,520 --> 01:09:45,779
to end users that would be very

1787
01:09:45,779 --> 01:09:47,759
confusing to them right

1788
01:09:47,759 --> 01:09:49,560
in like an email or something like that

1789
01:09:49,560 --> 01:09:51,120
you're bringing a whole bunch of

1790
01:09:51,120 --> 01:09:52,319
constraints I didn't I didn't stipulate

1791
01:09:52,319 --> 01:09:53,939
so if we just assume we had a channel

1792
01:09:53,939 --> 01:09:56,400
that had white capacity like and yes

1793
01:09:56,400 --> 01:09:58,100
controlled entirely by the endpoints

1794
01:09:58,100 --> 01:10:01,440
like what we lost the protocol

1795
01:10:01,440 --> 01:10:03,420
yeah it would absolutely work you don't

1796
01:10:03,420 --> 01:10:05,159
you wouldn't need a relay if you ignore

1797
01:10:05,159 --> 01:10:08,040
user experience and if you if you send

1798
01:10:08,040 --> 01:10:09,960
the you know messages back and forth it

1799
01:10:09,960 --> 01:10:12,120
would totally work yeah

1800
01:10:12,120 --> 01:10:15,060
I mean I mean well but when you say like

1801
01:10:15,060 --> 01:10:16,380
you say like ignore user experience

1802
01:10:16,380 --> 01:10:18,179
right but

1803
01:10:18,179 --> 01:10:20,460
um you know you already have to modify

1804
01:10:20,460 --> 01:10:22,679
the um like there's a bunch of

1805
01:10:22,679 --> 01:10:23,820
modifications being made in various

1806
01:10:23,820 --> 01:10:26,820
places and like the operating system is

1807
01:10:26,820 --> 01:10:28,800
completely is completely able to like

1808
01:10:28,800 --> 01:10:30,540
for instance

1809
01:10:30,540 --> 01:10:33,300
have some SMS messages bypass the SMS

1810
01:10:33,300 --> 01:10:35,100
viewer and go directly to something

1811
01:10:35,100 --> 01:10:36,960
like doesn't entirely when the scope of

1812
01:10:36,960 --> 01:10:40,020
the operating system so like I'm trying

1813
01:10:40,020 --> 01:10:42,960
what I'm trying to push on is like

1814
01:10:42,960 --> 01:10:45,780
the requirements of the system is like

1815
01:10:45,780 --> 01:10:47,219
you're creating this like kind of like

1816
01:10:47,219 --> 01:10:49,980
weak sauce replica of web dev that then

1817
01:10:49,980 --> 01:10:52,679
like that then is being used and I mean

1818
01:10:52,679 --> 01:10:55,380
I'm like we have like a zillion ways to

1819
01:10:55,380 --> 01:10:56,699
like send messages back and forth from

1820
01:10:56,699 --> 01:10:58,800
people and so I'm trying to figure out

1821
01:10:58,800 --> 01:11:01,080
like like why we're creating like like

1822
01:11:01,080 --> 01:11:02,340
this involves creating like a new

1823
01:11:02,340 --> 01:11:03,960
messaging system that like has this drop

1824
01:11:03,960 --> 01:11:05,880
weird kind of Dropbox metaphor and

1825
01:11:05,880 --> 01:11:06,780
trying to figure out why we're doing

1826
01:11:06,780 --> 01:11:09,239
that and so and is any other reason

1827
01:11:09,239 --> 01:11:10,260
other than the channel has narrow

1828
01:11:10,260 --> 01:11:11,760
capacity and that and that you think

1829
01:11:11,760 --> 01:11:13,560
before the message out of the users like

1830
01:11:13,560 --> 01:11:15,540
mlx

1831
01:11:15,540 --> 01:11:17,340
yeah I mean just to reply to your

1832
01:11:17,340 --> 01:11:18,600
operating system comment I mean the

1833
01:11:18,600 --> 01:11:20,580
operating system is not in control of

1834
01:11:20,580 --> 01:11:22,920
the UI on the screen if it's like a you

1835
01:11:22,920 --> 01:11:24,600
know third-party Standalone messaging

1836
01:11:24,600 --> 01:11:26,340
app like WhatsApp or WeChat or something

1837
01:11:26,340 --> 01:11:28,140
like that right how would the operating

1838
01:11:28,140 --> 01:11:32,000
system help help the experience there

1839
01:11:32,340 --> 01:11:36,600
well it seems like if the receiver is

1840
01:11:36,600 --> 01:11:38,040
going to engage in some special protocol

1841
01:11:38,040 --> 01:11:39,659
here the receiver has to have some

1842
01:11:39,659 --> 01:11:41,460
smarts already it's got to treat these

1843
01:11:41,460 --> 01:11:43,920
URLs uh in the correct way or is the

1844
01:11:43,920 --> 01:11:45,840
receiver just doing a normal get request

1845
01:11:45,840 --> 01:11:47,580
to this

1846
01:11:47,580 --> 01:11:49,679
and so if you've seen if you've seen the

1847
01:11:49,679 --> 01:11:52,080
receiver is in special logic presume

1848
01:11:52,080 --> 01:11:55,880
like they could also do special UI logic

1849
01:11:56,340 --> 01:11:58,800
yeah I I I don't think it'd be possible

1850
01:11:58,800 --> 01:12:01,800
to do special UI logic in an application

1851
01:12:01,800 --> 01:12:04,199
that controls its own UI when it's being

1852
01:12:04,199 --> 01:12:05,760
drawn on the screen like an email client

1853
01:12:05,760 --> 01:12:07,739
or Whatsapp or WeChat or any of those

1854
01:12:07,739 --> 01:12:10,080
type of you know programs

1855
01:12:10,080 --> 01:12:12,840
um it's worth noting those programs

1856
01:12:12,840 --> 01:12:16,199
would do a simple HTTP get on that URL

1857
01:12:16,199 --> 01:12:18,360
in fact they do that on every URL at

1858
01:12:18,360 --> 01:12:20,219
least with the HTTP protocol and and

1859
01:12:20,219 --> 01:12:21,659
that's where you would get some of this

1860
01:12:21,659 --> 01:12:23,219
open graph preview coming into play

1861
01:12:23,219 --> 01:12:24,600
right

1862
01:12:24,600 --> 01:12:27,659
um that you know they would do that but

1863
01:12:27,659 --> 01:12:29,460
um but they you know those operating

1864
01:12:29,460 --> 01:12:31,800
systems would need special logic yes to

1865
01:12:31,800 --> 01:12:33,960
actually receive the share ingest it and

1866
01:12:33,960 --> 01:12:35,400
get the credential provisioned totally

1867
01:12:35,400 --> 01:12:37,940
agree with that

1868
01:12:38,520 --> 01:12:41,420
foreign

1869
01:12:45,560 --> 01:12:47,820
messaging protocol

1870
01:12:47,820 --> 01:12:49,920
like this is a messaging protocol right

1871
01:12:49,920 --> 01:12:51,719
it just happens to only be useless one

1872
01:12:51,719 --> 01:12:54,020
purpose

1873
01:12:55,920 --> 01:12:58,800
it's not I wouldn't say it's a messaging

1874
01:12:58,800 --> 01:13:01,080
protocol how not I wouldn't say so why

1875
01:13:01,080 --> 01:13:03,900
uh it's a protocol

1876
01:13:03,900 --> 01:13:06,960
um to solve this given problem to

1877
01:13:06,960 --> 01:13:09,659
transfer provision information from one

1878
01:13:09,659 --> 01:13:11,000
device to another

1879
01:13:11,000 --> 01:13:15,080
that's technology not technology

1880
01:13:15,860 --> 01:13:18,360
maybe I could draw a different analogy

1881
01:13:18,360 --> 01:13:19,080
here

1882
01:13:19,080 --> 01:13:19,860
um

1883
01:13:19,860 --> 01:13:22,140
there was a bunch of discussion in

1884
01:13:22,140 --> 01:13:24,480
dispatch on Monday of

1885
01:13:24,480 --> 01:13:27,300
um file transfers uh over limited

1886
01:13:27,300 --> 01:13:29,340
channels you know like you see this all

1887
01:13:29,340 --> 01:13:31,679
the time in messaging systems where you

1888
01:13:31,679 --> 01:13:34,620
transfer a URL to a file that's stored

1889
01:13:34,620 --> 01:13:36,840
somewhere else you send it the URL and

1890
01:13:36,840 --> 01:13:38,520
the messaging Channel and then the

1891
01:13:38,520 --> 01:13:40,140
receiver goes and downloads the thing

1892
01:13:40,140 --> 01:13:42,420
and people you know commonly augment

1893
01:13:42,420 --> 01:13:44,159
this with a little bit of crypto so that

1894
01:13:44,159 --> 01:13:46,140
the URL either you know has a key

1895
01:13:46,140 --> 01:13:48,179
embedded in it or has a key alongside of

1896
01:13:48,179 --> 01:13:49,920
it the server where the file lives it

1897
01:13:49,920 --> 01:13:52,260
doesn't see the plain text concept so

1898
01:13:52,260 --> 01:13:53,940
it's largely similar to what we're doing

1899
01:13:53,940 --> 01:13:55,679
what we're doing here

1900
01:13:55,679 --> 01:13:58,020
um so I guess what I'm wondering is to

1901
01:13:58,020 --> 01:14:00,659
what degree is this kind of an

1902
01:14:00,659 --> 01:14:03,239
instantiation of that design pattern in

1903
01:14:03,239 --> 01:14:04,800
the sense of being a way to transfer

1904
01:14:04,800 --> 01:14:07,760
some sensitive data over a you know

1905
01:14:07,760 --> 01:14:11,100
where you have a limited Channel

1906
01:14:11,100 --> 01:14:12,659
um that you maybe you have less trusted

1907
01:14:12,659 --> 01:14:14,580
maybe slightly less processing if you're

1908
01:14:14,580 --> 01:14:15,840
still sending the key over it but maybe

1909
01:14:15,840 --> 01:14:17,640
you you entrust the server threats and

1910
01:14:17,640 --> 01:14:19,980
access controls or something

1911
01:14:19,980 --> 01:14:21,840
um and to what degree is it specific to

1912
01:14:21,840 --> 01:14:24,860
this credential use case

1913
01:14:32,659 --> 01:14:34,860
so to reset that like it seems like

1914
01:14:34,860 --> 01:14:37,679
you're talking about using this transfer

1915
01:14:37,679 --> 01:14:39,719
protocol to transfer credential related

1916
01:14:39,719 --> 01:14:41,880
information

1917
01:14:41,880 --> 01:14:43,620
could I not use the same mechanism

1918
01:14:43,620 --> 01:14:45,600
you've laid out here to send

1919
01:14:45,600 --> 01:14:48,600
cat pictures or nuclear submarine

1920
01:14:48,600 --> 01:14:50,640
designs or whatever sensitive thing I'm

1921
01:14:50,640 --> 01:14:53,219
trying to send to hacker

1922
01:14:53,219 --> 01:14:55,400
foreign

1923
01:15:02,780 --> 01:15:05,520
what you described here was a more

1924
01:15:05,520 --> 01:15:09,380
generic let's say some

1925
01:15:10,320 --> 01:15:13,140
distributed file system right when we

1926
01:15:13,140 --> 01:15:16,020
can store something and then uh the

1927
01:15:16,020 --> 01:15:20,040
reader can read it uh

1928
01:15:20,239 --> 01:15:24,300
it wasn't the goal of this solution

1929
01:15:24,300 --> 01:15:28,739
um to transfer generic files and we

1930
01:15:28,739 --> 01:15:29,760
um

1931
01:15:29,760 --> 01:15:32,699
we had a number of the goals like which

1932
01:15:32,699 --> 01:15:34,980
were defined in the very beginning we

1933
01:15:34,980 --> 01:15:38,820
needed it to be a short like token right

1934
01:15:38,820 --> 01:15:42,000
uh personal information we needed to

1935
01:15:42,000 --> 01:15:45,719
that token to be delivered to one device

1936
01:15:45,719 --> 01:15:49,260
and we wanted the transfer process to be

1937
01:15:49,260 --> 01:15:51,420
limited between one sender and a

1938
01:15:51,420 --> 01:15:54,659
receiver so once the transfer started we

1939
01:15:54,659 --> 01:15:58,020
wanted that limitation one receiver can

1940
01:15:58,020 --> 01:16:02,120
read that or update that and provision

1941
01:16:02,120 --> 01:16:06,480
uh third we wanted that temporary

1942
01:16:06,480 --> 01:16:07,679
storage

1943
01:16:07,679 --> 01:16:11,520
uh not to be able to look into what was

1944
01:16:11,520 --> 01:16:13,920
transferred

1945
01:16:13,920 --> 01:16:16,320
like not to be completely um completely

1946
01:16:16,320 --> 01:16:19,260
unaware it's it's opaque for them that's

1947
01:16:19,260 --> 01:16:23,100
that was goal number two third

1948
01:16:23,100 --> 01:16:25,860
we were heavily

1949
01:16:25,860 --> 01:16:27,780
um trying to solve problem of mobile

1950
01:16:27,780 --> 01:16:29,219
devices

1951
01:16:29,219 --> 01:16:32,760
not always having uh cellular coverage

1952
01:16:32,760 --> 01:16:34,500
all of the time

1953
01:16:34,500 --> 01:16:36,900
and we still wanted the problem to be

1954
01:16:36,900 --> 01:16:40,199
solvable under those conditions

1955
01:16:40,199 --> 01:16:42,540
and there are additional

1956
01:16:42,540 --> 01:16:43,739
um

1957
01:16:43,739 --> 01:16:45,540
limitations

1958
01:16:45,540 --> 01:16:47,940
due to the nature of those mobile

1959
01:16:47,940 --> 01:16:50,400
devices

1960
01:16:50,400 --> 01:16:51,710
um such as

1961
01:16:51,710 --> 01:16:52,320
[Music]

1962
01:16:52,320 --> 01:16:52,980
um

1963
01:16:52,980 --> 01:16:57,239
uh we added potential push notifications

1964
01:16:57,239 --> 01:17:00,540
in order to react as soon as the data

1965
01:17:00,540 --> 01:17:03,659
was updated right on the Gili server

1966
01:17:03,659 --> 01:17:07,500
so it is this problem is very negative

1967
01:17:07,500 --> 01:17:10,679
focused on a given use case we didn't

1968
01:17:10,679 --> 01:17:13,199
want it to be a generic solution for

1969
01:17:13,199 --> 01:17:15,420
file transfer

1970
01:17:15,420 --> 01:17:17,400
so let me just follow into that Richard

1971
01:17:17,400 --> 01:17:19,920
here Association

1972
01:17:19,920 --> 01:17:22,080
um before the I want to ask about

1973
01:17:22,080 --> 01:17:23,460
something you actually just said in your

1974
01:17:23,460 --> 01:17:24,600
last thing and I stood up before to ask

1975
01:17:24,600 --> 01:17:25,739
about which you push notifications

1976
01:17:25,739 --> 01:17:27,480
because well before we even started on

1977
01:17:27,480 --> 01:17:28,679
the boff of this one of the things that

1978
01:17:28,679 --> 01:17:30,000
made me think this was quite different

1979
01:17:30,000 --> 01:17:32,820
than many of our other mailbox protocols

1980
01:17:32,820 --> 01:17:35,940
at ITF was a requirement for

1981
01:17:35,940 --> 01:17:38,400
uh the relay to be able to or the

1982
01:17:38,400 --> 01:17:39,840
mailbox to be able to send push

1983
01:17:39,840 --> 01:17:41,940
notifications to clients and that hasn't

1984
01:17:41,940 --> 01:17:43,440
been mentioned in the stuff today and I

1985
01:17:43,440 --> 01:17:44,640
was wondering is that still an extension

1986
01:17:44,640 --> 01:17:45,900
you're looking at is that part of the

1987
01:17:45,900 --> 01:17:48,120
problem space because that obviously

1988
01:17:48,120 --> 01:17:49,380
changes the design a little bit if we

1989
01:17:49,380 --> 01:17:51,060
need that down the road

1990
01:17:51,060 --> 01:17:52,260
um one way or another so maybe you can

1991
01:17:52,260 --> 01:17:54,300
talk a little bit more about the how the

1992
01:17:54,300 --> 01:17:57,620
thoughts on that have evolved over time

1993
01:17:58,920 --> 01:18:00,719
that is definitely still something we're

1994
01:18:00,719 --> 01:18:02,400
looking at and it's included in our

1995
01:18:02,400 --> 01:18:04,679
draft proposal right now we're thinking

1996
01:18:04,679 --> 01:18:06,540
about it pretty generically where the

1997
01:18:06,540 --> 01:18:08,520
push notification type can be specified

1998
01:18:08,520 --> 01:18:11,219
and then each relay server operator can

1999
01:18:11,219 --> 01:18:12,659
work with different device oems to

2000
01:18:12,659 --> 01:18:14,540
interact with their push notification

2001
01:18:14,540 --> 01:18:16,980
infrastructure but that's definitely a

2002
01:18:16,980 --> 01:18:20,120
requirement for the mobile devices

2003
01:18:21,719 --> 01:18:25,199
yeah and when I presented solution I try

2004
01:18:25,199 --> 01:18:29,000
to present it in a very simplistic way

2005
01:18:29,820 --> 01:18:32,760
hi Rowan May wire

2006
01:18:32,760 --> 01:18:33,960
um

2007
01:18:33,960 --> 01:18:35,360
so

2008
01:18:35,360 --> 01:18:37,920
I heard

2009
01:18:37,920 --> 01:18:40,520
um I've heard

2010
01:18:40,620 --> 01:18:42,440
half a dozen to a dozen different

2011
01:18:42,440 --> 01:18:46,460
requirements that weren't explicitly

2012
01:18:46,460 --> 01:18:50,760
mentioned in the first presentation

2013
01:18:50,760 --> 01:18:54,060
um and I think um you've got you know

2014
01:18:54,060 --> 01:18:56,940
the reason you have many people asking

2015
01:18:56,940 --> 01:18:59,640
questions is they're kind of trying to

2016
01:18:59,640 --> 01:19:00,960
poke around and ask basically

2017
01:19:00,960 --> 01:19:03,060
requirements questions it's very

2018
01:19:03,060 --> 01:19:04,100
traditional

2019
01:19:04,100 --> 01:19:06,840
for a new working group or even for a

2020
01:19:06,840 --> 01:19:10,980
boss to start off with requirements

2021
01:19:10,980 --> 01:19:12,420
and then

2022
01:19:12,420 --> 01:19:16,380
to and then to go to a protocol

2023
01:19:16,380 --> 01:19:19,140
um and if you do start with some

2024
01:19:19,140 --> 01:19:21,060
pre-existing notion of what your

2025
01:19:21,060 --> 01:19:23,159
protocol should be

2026
01:19:23,159 --> 01:19:25,320
um I didn't read the complete document

2027
01:19:25,320 --> 01:19:27,300
but I did like scan through quite a bit

2028
01:19:27,300 --> 01:19:31,260
of it and there's no real mention of the

2029
01:19:31,260 --> 01:19:33,420
protocol so I would like to recommend

2030
01:19:33,420 --> 01:19:35,880
that you please do a document that said

2031
01:19:35,880 --> 01:19:37,679
that gives those nice use cases that you

2032
01:19:37,679 --> 01:19:40,199
had in your in your presentation and

2033
01:19:40,199 --> 01:19:42,060
lists requirements including these

2034
01:19:42,060 --> 01:19:44,360
subtle requirements

2035
01:19:44,360 --> 01:19:46,800
and then

2036
01:19:46,800 --> 01:19:48,480
I think that you're going to get some

2037
01:19:48,480 --> 01:19:50,659
people some people are going to push

2038
01:19:50,659 --> 01:19:52,980
poke at those requirements some people

2039
01:19:52,980 --> 01:19:55,560
are going to add requirements or propose

2040
01:19:55,560 --> 01:19:58,080
new ones that might you might like

2041
01:19:58,080 --> 01:20:00,719
and you may end up with a protocol very

2042
01:20:00,719 --> 01:20:02,219
much like the one that you came up with

2043
01:20:02,219 --> 01:20:05,100
or somebody may just show you that they

2044
01:20:05,100 --> 01:20:06,179
make

2045
01:20:06,179 --> 01:20:08,520
say oh by the way I can do everything in

2046
01:20:08,520 --> 01:20:09,960
these requirements with this combination

2047
01:20:09,960 --> 01:20:11,880
of stuff that already exists

2048
01:20:11,880 --> 01:20:14,639
thank you yeah

2049
01:20:14,639 --> 01:20:16,199
thank you for the suggestion I think

2050
01:20:16,199 --> 01:20:19,159
that's great idea

2051
01:20:19,199 --> 01:20:21,060
just to add to that I think that your

2052
01:20:21,060 --> 01:20:23,040
point is really good and I think that a

2053
01:20:23,040 --> 01:20:24,480
large answer to a lot of your questions

2054
01:20:24,480 --> 01:20:26,639
which might not be as satisfactory is

2055
01:20:26,639 --> 01:20:28,139
just when we're looking at all these

2056
01:20:28,139 --> 01:20:30,480
different existing applications or ways

2057
01:20:30,480 --> 01:20:31,800
that we could have transferred we just

2058
01:20:31,800 --> 01:20:33,659
always found something that was missing

2059
01:20:33,659 --> 01:20:35,460
it's like like oh this is almost what we

2060
01:20:35,460 --> 01:20:36,780
needed oh but we need to miss one

2061
01:20:36,780 --> 01:20:38,460
requirement so hopefully whenever we

2062
01:20:38,460 --> 01:20:39,659
create that requirements document I'll

2063
01:20:39,659 --> 01:20:41,780
make it clear

2064
01:20:41,780 --> 01:20:45,060
sorry I just to add to that we seriously

2065
01:20:45,060 --> 01:20:48,900
considered it's it was a problem where

2066
01:20:48,900 --> 01:20:50,400
we tried to find the right balance

2067
01:20:50,400 --> 01:20:53,940
between security and usability as it is

2068
01:20:53,940 --> 01:20:56,159
always the case in us with Security

2069
01:20:56,159 --> 01:20:59,100
Solutions so

2070
01:20:59,100 --> 01:21:02,699
we tried to provide the best possible

2071
01:21:02,699 --> 01:21:05,340
user experience that's why the lacks

2072
01:21:05,340 --> 01:21:07,199
sometimes relax security requirements

2073
01:21:07,199 --> 01:21:09,060
and there is a security considerations

2074
01:21:09,060 --> 01:21:11,520
uh section at the end of the draft

2075
01:21:11,520 --> 01:21:14,159
document it might address some of the

2076
01:21:14,159 --> 01:21:15,780
questions

2077
01:21:15,780 --> 01:21:18,120
departments okay

2078
01:21:18,120 --> 01:21:21,500
point taken thank you

2079
01:21:21,840 --> 01:21:25,020
so crystalman's Comcast

2080
01:21:25,020 --> 01:21:28,560
um it's not clear to me that it is

2081
01:21:28,560 --> 01:21:32,280
possible to uh develop a solution that

2082
01:21:32,280 --> 01:21:35,600
works for credentials specifically

2083
01:21:35,600 --> 01:21:38,520
without specifying what kind of

2084
01:21:38,520 --> 01:21:40,080
credentials and making them completely

2085
01:21:40,080 --> 01:21:43,920
opaque without making it also just as

2086
01:21:43,920 --> 01:21:46,679
useful for cat pictures

2087
01:21:46,679 --> 01:21:50,639
um and so so I mean I

2088
01:21:50,639 --> 01:21:52,080
to me

2089
01:21:52,080 --> 01:21:55,139
the messaging protocol uh comments are

2090
01:21:55,139 --> 01:21:57,719
exactly on point and so I I find myself

2091
01:21:57,719 --> 01:22:00,780
wondering what kind of relationship does

2092
01:22:00,780 --> 01:22:05,100
the relay server have with uh both the

2093
01:22:05,100 --> 01:22:06,840
sender and the receiver of the

2094
01:22:06,840 --> 01:22:08,580
credentials does it know their

2095
01:22:08,580 --> 01:22:12,440
identities does it keep track of them

2096
01:22:12,960 --> 01:22:16,199
so the sender and the sender has a

2097
01:22:16,199 --> 01:22:17,760
relatively tight relationship with the

2098
01:22:17,760 --> 01:22:19,260
relay server they have they're able to

2099
01:22:19,260 --> 01:22:20,699
generate access stations to prove that

2100
01:22:20,699 --> 01:22:23,040
they have rights to create mailboxes but

2101
01:22:23,040 --> 01:22:24,840
those attestations are Anonymous and

2102
01:22:24,840 --> 01:22:26,100
it's a very important feature of the

2103
01:22:26,100 --> 01:22:27,719
relay server that they don't know

2104
01:22:27,719 --> 01:22:30,060
any identifiable information about

2105
01:22:30,060 --> 01:22:33,600
senders okay Savers so what's preventing

2106
01:22:33,600 --> 01:22:35,400
the relay server for just from just

2107
01:22:35,400 --> 01:22:37,380
being free storage on the internet

2108
01:22:37,380 --> 01:22:39,300
uh nothing is

2109
01:22:39,300 --> 01:22:42,540
uh now the question is what makes the

2110
01:22:42,540 --> 01:22:44,820
sender to start using that daily server

2111
01:22:44,820 --> 01:22:46,980
so there should be certain level of

2112
01:22:46,980 --> 01:22:49,860
trust between the sender and the release

2113
01:22:49,860 --> 01:22:51,000
server

2114
01:22:51,000 --> 01:22:54,360
so the sender starts using given release

2115
01:22:54,360 --> 01:22:55,560
server

2116
01:22:55,560 --> 01:22:58,560
mm-hmm right so the sender starts using

2117
01:22:58,560 --> 01:23:01,800
the the relay server to store his cat

2118
01:23:01,800 --> 01:23:05,820
pictures right absolutely okay

2119
01:23:05,820 --> 01:23:06,420
um

2120
01:23:06,420 --> 01:23:08,280
I assume that the relay server has

2121
01:23:08,280 --> 01:23:10,020
finite resources and wants to allocate

2122
01:23:10,020 --> 01:23:13,199
them independently and so it probably

2123
01:23:13,199 --> 01:23:14,820
wants to try to keep track of who's

2124
01:23:14,820 --> 01:23:16,739
doing this right

2125
01:23:16,739 --> 01:23:19,679
good point so that's why uh

2126
01:23:19,679 --> 01:23:22,560
we precisely mentioned and a DOT

2127
01:23:22,560 --> 01:23:26,219
document that we

2128
01:23:26,219 --> 01:23:29,219
want to enforce the elite server not to

2129
01:23:29,219 --> 01:23:32,159
see anything sensible like any sensitive

2130
01:23:32,159 --> 01:23:35,940
information uh that's why we mentioned

2131
01:23:35,940 --> 01:23:37,760
device attestation

2132
01:23:37,760 --> 01:23:39,659
potential like optional device

2133
01:23:39,659 --> 01:23:43,440
attestation and that device attestation

2134
01:23:43,440 --> 01:23:46,260
is the basis of trust between sender and

2135
01:23:46,260 --> 01:23:50,340
receiver if sander covers his cat

2136
01:23:50,340 --> 01:23:52,280
picture with the device at the station

2137
01:23:52,280 --> 01:23:55,139
and a release server trust that sender

2138
01:23:55,139 --> 01:23:57,239
trust that device attestation which is

2139
01:23:57,239 --> 01:23:59,580
anonymous potentially which doesn't

2140
01:23:59,580 --> 01:24:02,100
reveal any user information to the relay

2141
01:24:02,100 --> 01:24:05,580
really trust that

2142
01:24:05,580 --> 01:24:07,560
I want to also

2143
01:24:07,560 --> 01:24:09,179
oh sorry go ahead I think I just

2144
01:24:09,179 --> 01:24:10,440
interrupted somebody all right Matt okay

2145
01:24:10,440 --> 01:24:12,300
let me let me just uh add a few more

2146
01:24:12,300 --> 01:24:13,980
comments to that I think like any other

2147
01:24:13,980 --> 01:24:15,659
messaging Channel you know you could try

2148
01:24:15,659 --> 01:24:18,179
to use the the relay server outside of

2149
01:24:18,179 --> 01:24:20,520
its intended use that's always something

2150
01:24:20,520 --> 01:24:22,320
that that could happen with any kind of

2151
01:24:22,320 --> 01:24:24,120
like messaging system right

2152
01:24:24,120 --> 01:24:26,699
um the only kind of thing is the sender

2153
01:24:26,699 --> 01:24:29,040
or the user are they okay with the

2154
01:24:29,040 --> 01:24:30,900
Restriction that is sent I mean that are

2155
01:24:30,900 --> 01:24:33,480
set for this messaging Channel and and

2156
01:24:33,480 --> 01:24:34,800
that that's really the Restriction

2157
01:24:34,800 --> 01:24:36,540
that's applied here right are you okay

2158
01:24:36,540 --> 01:24:38,820
with having a short-lived TTL to send

2159
01:24:38,820 --> 01:24:41,159
your cat pictures or you know are you

2160
01:24:41,159 --> 01:24:42,540
okay with just sending this information

2161
01:24:42,540 --> 01:24:45,120
just to one other party and not not to

2162
01:24:45,120 --> 01:24:48,000
like one to many messaging uh uh Channel

2163
01:24:48,000 --> 01:24:50,520
things like that so uh the the idea is

2164
01:24:50,520 --> 01:24:52,080
like yes you could you could use this

2165
01:24:52,080 --> 01:24:55,320
channel outside of the intended purpose

2166
01:24:55,320 --> 01:24:57,659
um but are you okay with the Restriction

2167
01:24:57,659 --> 01:24:59,880
that's that's going to be set forth in

2168
01:24:59,880 --> 01:25:02,219
in that relay server

2169
01:25:02,219 --> 01:25:04,380
okay thank you

2170
01:25:04,380 --> 01:25:06,239
yeah and just one other little piece is

2171
01:25:06,239 --> 01:25:07,980
that you could configure your mailboxes

2172
01:25:07,980 --> 01:25:09,900
you know this is dependent on whoever is

2173
01:25:09,900 --> 01:25:10,920
implementing this but you could

2174
01:25:10,920 --> 01:25:12,179
configure your mailbox to have to be

2175
01:25:12,179 --> 01:25:14,159
really small so for us you know like

2176
01:25:14,159 --> 01:25:15,480
this provisioning information is going

2177
01:25:15,480 --> 01:25:17,940
to be quite small so less than a cat

2178
01:25:17,940 --> 01:25:20,280
picture so then you make it so unusable

2179
01:25:20,280 --> 01:25:21,659
that no one would want to use it except

2180
01:25:21,659 --> 01:25:23,520
for your purpose not to say that's like

2181
01:25:23,520 --> 01:25:26,280
100 like you know foolproof but it gets

2182
01:25:26,280 --> 01:25:27,659
a little closer

2183
01:25:27,659 --> 01:25:29,460
so I just want to make sure the people

2184
01:25:29,460 --> 01:25:30,960
who are still in the queue are you

2185
01:25:30,960 --> 01:25:33,000
actually in the queue or did you yes

2186
01:25:33,000 --> 01:25:34,679
excellent

2187
01:25:34,679 --> 01:25:35,760
um Richard

2188
01:25:35,760 --> 01:25:37,800
yeah I just want to make a brief

2189
01:25:37,800 --> 01:25:39,600
amendment to my earlier comments and be

2190
01:25:39,600 --> 01:25:41,580
clear that I didn't mean to be be

2191
01:25:41,580 --> 01:25:43,139
negative on this work I I was actually

2192
01:25:43,139 --> 01:25:45,060
kind of yes ending

2193
01:25:45,060 --> 01:25:46,620
um like clearly I think that it seems

2194
01:25:46,620 --> 01:25:48,480
clear this is uh an okay starting point

2195
01:25:48,480 --> 01:25:50,159
at least for for the credential use case

2196
01:25:50,159 --> 01:25:52,080
I think all I would meant to suggest is

2197
01:25:52,080 --> 01:25:53,880
that it could be useful to some other

2198
01:25:53,880 --> 01:25:56,699
parts of the ietf if we look and clarify

2199
01:25:56,699 --> 01:25:58,560
those boundaries and see if it can be

2200
01:25:58,560 --> 01:26:00,120
expressed in a way that would be useful

2201
01:26:00,120 --> 01:26:01,380
in some other folks just to think about

2202
01:26:01,380 --> 01:26:04,020
uh how to express things more generally

2203
01:26:04,020 --> 01:26:08,300
thank you Richard for clarifying that

2204
01:26:11,780 --> 01:26:13,440
so

2205
01:26:13,440 --> 01:26:14,400
I'm just like trying to write my

2206
01:26:14,400 --> 01:26:16,679
attestation thing

2207
01:26:16,679 --> 01:26:19,880
so the attestation in this case is

2208
01:26:19,880 --> 01:26:22,860
I have a car key like what is that

2209
01:26:22,860 --> 01:26:24,480
station representing that this that

2210
01:26:24,480 --> 01:26:26,520
causes the the relay server to allow me

2211
01:26:26,520 --> 01:26:28,739
to store data so the protocol defines

2212
01:26:28,739 --> 01:26:30,540
the attestation pretty generally and

2213
01:26:30,540 --> 01:26:32,760
then leaves it up to

2214
01:26:32,760 --> 01:26:34,080
um held the sender and the receiver

2215
01:26:34,080 --> 01:26:35,820
device want like what type of

2216
01:26:35,820 --> 01:26:37,440
attestation they want to use but

2217
01:26:37,440 --> 01:26:39,719
generally it's just around the user and

2218
01:26:39,719 --> 01:26:41,520
the device being authentic and not uh

2219
01:26:41,520 --> 01:26:43,699
like a device Farm

2220
01:26:43,699 --> 01:26:45,900
thank you

2221
01:26:45,900 --> 01:26:47,940
okay nothing to do with the credential

2222
01:26:47,940 --> 01:26:49,679
on the device

2223
01:26:49,679 --> 01:26:51,480
it identifies the user correct

2224
01:26:51,480 --> 01:26:53,900
effectively

2225
01:26:53,900 --> 01:26:57,540
can I just jump in on this one

2226
01:26:57,540 --> 01:26:59,580
sorry Dmitry I think the the the

2227
01:26:59,580 --> 01:27:01,560
protocol or like the relay server

2228
01:27:01,560 --> 01:27:03,659
proposal has this attestation which

2229
01:27:03,659 --> 01:27:05,760
which is very very generalized right I

2230
01:27:05,760 --> 01:27:06,900
think it's kind of left up to the

2231
01:27:06,900 --> 01:27:08,639
implementation of it to create this

2232
01:27:08,639 --> 01:27:10,199
relationship of what that testation

2233
01:27:10,199 --> 01:27:12,120
really means and it doesn't necessarily

2234
01:27:12,120 --> 01:27:14,280
have to be an identity Source it could

2235
01:27:14,280 --> 01:27:16,679
just be a very generalized like even

2236
01:27:16,679 --> 01:27:18,780
just like key pair where you have um

2237
01:27:18,780 --> 01:27:21,239
like a root key that you could identify

2238
01:27:21,239 --> 01:27:23,159
some you know Hardware that that's been

2239
01:27:23,159 --> 01:27:25,739
uh that has like the public key that's

2240
01:27:25,739 --> 01:27:27,420
stamped in from the manufacturing

2241
01:27:27,420 --> 01:27:29,400
process or something something as simple

2242
01:27:29,400 --> 01:27:30,840
as that so that you trust that this

2243
01:27:30,840 --> 01:27:33,540
device has uh some form of authority to

2244
01:27:33,540 --> 01:27:35,699
create this mailboxes on your relay

2245
01:27:35,699 --> 01:27:37,500
server but this again is it's you know

2246
01:27:37,500 --> 01:27:39,480
it's for implementation detail rather

2247
01:27:39,480 --> 01:27:42,380
than it is a restriction on the The

2248
01:27:42,380 --> 01:27:44,280
Proposal itself

2249
01:27:44,280 --> 01:27:46,400
so I don't know

2250
01:27:46,400 --> 01:27:49,500
go ahead oh if you if you deem that you

2251
01:27:49,500 --> 01:27:50,760
don't need this kind of you know uh

2252
01:27:50,760 --> 01:27:52,260
security like if you are implementing

2253
01:27:52,260 --> 01:27:54,060
this uh really server yourself or for

2254
01:27:54,060 --> 01:27:55,440
whatever other purpose that you want to

2255
01:27:55,440 --> 01:27:58,260
use uh for your own proprietary kind of

2256
01:27:58,260 --> 01:28:00,900
um like uh transfer credential and you

2257
01:28:00,900 --> 01:28:02,100
know you want to make it open and you

2258
01:28:02,100 --> 01:28:04,199
don't have to use that attestation if

2259
01:28:04,199 --> 01:28:05,940
you don't want to

2260
01:28:05,940 --> 01:28:08,100
well so I guess is your assumption that

2261
01:28:08,100 --> 01:28:11,219
the choice of relay server is determined

2262
01:28:11,219 --> 01:28:12,900
by the

2263
01:28:12,900 --> 01:28:14,820
application domain for the type of

2264
01:28:14,820 --> 01:28:17,280
credential being transferred yes yeah I

2265
01:28:17,280 --> 01:28:19,440
think I mean it can be it can be right

2266
01:28:19,440 --> 01:28:20,820
um you know it depends on the

2267
01:28:20,820 --> 01:28:22,500
implementer and and on the person

2268
01:28:22,500 --> 01:28:24,420
adopting the the credential right you

2269
01:28:24,420 --> 01:28:26,940
you might have uh a home key and you

2270
01:28:26,940 --> 01:28:29,340
want to use a relay server you you have

2271
01:28:29,340 --> 01:28:31,080
many different choices of using either

2272
01:28:31,080 --> 01:28:33,239
implementing your own or or just using

2273
01:28:33,239 --> 01:28:34,920
something that has been implemented but

2274
01:28:34,920 --> 01:28:36,420
it all kind of depends on the implement

2275
01:28:36,420 --> 01:28:38,940
or of all of this

2276
01:28:38,940 --> 01:28:41,340
I I I'm not really following so you know

2277
01:28:41,340 --> 01:28:42,739
I have the Hilton app

2278
01:28:42,739 --> 01:28:44,880
hypothetically and I like push the

2279
01:28:44,880 --> 01:28:45,840
button because I want to share my room

2280
01:28:45,840 --> 01:28:48,360
key with dkg and

2281
01:28:48,360 --> 01:28:50,040
um I met him in the bar earlier as he

2282
01:28:50,040 --> 01:28:52,080
mentioned one of the five people

2283
01:28:52,080 --> 01:28:53,699
um and

2284
01:28:53,699 --> 01:28:55,920
um the um

2285
01:28:55,920 --> 01:28:58,500
uh and

2286
01:28:58,500 --> 01:29:00,719
um so like I push a button that's got to

2287
01:29:00,719 --> 01:29:02,520
go somewhere right like I don't choose

2288
01:29:02,520 --> 01:29:03,659
some reason I'm not going to raise her

2289
01:29:03,659 --> 01:29:05,340
right so like where does it go and who

2290
01:29:05,340 --> 01:29:06,840
decide who makes the decision

2291
01:29:06,840 --> 01:29:09,060
and what Creations if you're seeing a

2292
01:29:09,060 --> 01:29:10,920
Hilton I think the short short you know

2293
01:29:10,920 --> 01:29:12,000
answers if you're staying at Hilton

2294
01:29:12,000 --> 01:29:13,800
Hilton would try to decide which where

2295
01:29:13,800 --> 01:29:15,480
that that relay server will be at right

2296
01:29:15,480 --> 01:29:18,239
uh they're the one who wants to do the

2297
01:29:18,239 --> 01:29:20,460
transferring of that hotel Key they

2298
01:29:20,460 --> 01:29:22,440
would be the domain owner of that now

2299
01:29:22,440 --> 01:29:25,020
they might have you know options at the

2300
01:29:25,020 --> 01:29:26,940
Genesis of light trading that the

2301
01:29:26,940 --> 01:29:28,679
application of which

2302
01:29:28,679 --> 01:29:30,540
um relief server to use whether they

2303
01:29:30,540 --> 01:29:32,100
host their own or maybe use one that

2304
01:29:32,100 --> 01:29:33,900
already exists that would be entirely up

2305
01:29:33,900 --> 01:29:36,120
to like Hilton okay so the reason I'm

2306
01:29:36,120 --> 01:29:38,340
pushing on this is because if

2307
01:29:38,340 --> 01:29:41,340
the security requirements of the system

2308
01:29:41,340 --> 01:29:44,760
depend on access controls they're

2309
01:29:44,760 --> 01:29:46,260
allowed to write to the relay server

2310
01:29:46,260 --> 01:29:47,699
then those are part of the scope of the

2311
01:29:47,699 --> 01:29:49,199
system and they have to be defined and

2312
01:29:49,199 --> 01:29:50,280
if it depends on Hardware attestation

2313
01:29:50,280 --> 01:29:52,260
that has to be defined and it's like

2314
01:29:52,260 --> 01:29:54,480
like the entire like this goes back to

2315
01:29:54,480 --> 01:29:55,500
requirements of describing how the

2316
01:29:55,500 --> 01:29:57,480
system like works right and so like you

2317
01:29:57,480 --> 01:29:58,679
can't just say like it's gonna be stored

2318
01:29:58,679 --> 01:30:00,719
somewhere if security security

2319
01:30:00,719 --> 01:30:02,219
requirements the system depend on having

2320
01:30:02,219 --> 01:30:03,239
that Define

2321
01:30:03,239 --> 01:30:04,920
so

2322
01:30:04,920 --> 01:30:06,239
um so maybe like the answer is it

2323
01:30:06,239 --> 01:30:07,500
doesn't matter and it doesn't matter

2324
01:30:07,500 --> 01:30:09,659
what the server it is but like that's

2325
01:30:09,659 --> 01:30:11,520
like an input like then we need to know

2326
01:30:11,520 --> 01:30:13,080
that

2327
01:30:13,080 --> 01:30:14,580
um

2328
01:30:14,580 --> 01:30:16,980
so and so the second reason I'm pushing

2329
01:30:16,980 --> 01:30:19,380
on this is because it seems like one of

2330
01:30:19,380 --> 01:30:21,179
the consequences of this potentially is

2331
01:30:21,179 --> 01:30:23,520
that because this is if every

2332
01:30:23,520 --> 01:30:24,960
if if

2333
01:30:24,960 --> 01:30:26,699
like

2334
01:30:26,699 --> 01:30:28,380
um

2335
01:30:28,380 --> 01:30:30,179
if every relay server

2336
01:30:30,179 --> 01:30:32,400
creates its own if every application has

2337
01:30:32,400 --> 01:30:34,440
a relay server then this creates a new

2338
01:30:34,440 --> 01:30:36,300
locus of

2339
01:30:36,300 --> 01:30:37,860
um of tracking of what credentials are

2340
01:30:37,860 --> 01:30:38,760
being shared with other people besides

2341
01:30:38,760 --> 01:30:40,080
the credential server

2342
01:30:40,080 --> 01:30:41,699
and so

2343
01:30:41,699 --> 01:30:42,780
um that seems like a personalizable

2344
01:30:42,780 --> 01:30:44,159
property as opposed to some more generic

2345
01:30:44,159 --> 01:30:46,139
system so is there some way to remove

2346
01:30:46,139 --> 01:30:47,699
the property if this creates a graph of

2347
01:30:47,699 --> 01:30:51,019
everybody who shared with everybody else

2348
01:30:52,860 --> 01:30:54,360
the idea is not to create this graph

2349
01:30:54,360 --> 01:30:55,199
right

2350
01:30:55,199 --> 01:30:56,760
um but how what aircraft has created

2351
01:30:56,760 --> 01:30:58,460
right

2352
01:30:58,460 --> 01:31:02,699
how is it not created so for uh like if

2353
01:31:02,699 --> 01:31:05,159
the hotel owns the relay server they're

2354
01:31:05,159 --> 01:31:06,780
already as the credential Authority

2355
01:31:06,780 --> 01:31:09,480
creating a graph of who shared with who

2356
01:31:09,480 --> 01:31:11,659
um but maybe to your point we need to

2357
01:31:11,659 --> 01:31:13,320
specify more about the device

2358
01:31:13,320 --> 01:31:14,699
attestation to really show that it's

2359
01:31:14,699 --> 01:31:17,760
Anonymous and not the Privacy bearing

2360
01:31:17,760 --> 01:31:20,179
well I mean

2361
01:31:20,179 --> 01:31:24,120
yeah that's part of the system yeah

2362
01:31:24,120 --> 01:31:24,780
um

2363
01:31:24,780 --> 01:31:27,900
so a simple question uh like simple

2364
01:31:27,900 --> 01:31:29,760
answer to a question it's up to

2365
01:31:29,760 --> 01:31:32,280
credential authority to manage whoever

2366
01:31:32,280 --> 01:31:36,120
owns the key at the moment make any uh

2367
01:31:36,120 --> 01:31:37,920
connections with them that's

2368
01:31:37,920 --> 01:31:40,620
specifically why we put the credential

2369
01:31:40,620 --> 01:31:42,900
management out of scope for this

2370
01:31:42,900 --> 01:31:45,060
solution for us

2371
01:31:45,060 --> 01:31:49,080
for the email server it's just a set of

2372
01:31:49,080 --> 01:31:51,780
calls right HTTP calls coming from

2373
01:31:51,780 --> 01:31:54,060
different IP addresses and the IP

2374
01:31:54,060 --> 01:31:56,520
addresses is what we are supposed to be

2375
01:31:56,520 --> 01:31:59,460
able to track the only piece we shall

2376
01:31:59,460 --> 01:32:01,500
not be able to see the content what's

2377
01:32:01,500 --> 01:32:04,860
inside right what kind of credential is

2378
01:32:04,860 --> 01:32:07,800
there any uh sensitive info there

2379
01:32:07,800 --> 01:32:10,260
and that was the the

2380
01:32:10,260 --> 01:32:13,020
goal of the solution and the security

2381
01:32:13,020 --> 01:32:15,420
requirement if it I don't know if it

2382
01:32:15,420 --> 01:32:16,920
answers your question

2383
01:32:16,920 --> 01:32:18,840
it depends on how things are built by

2384
01:32:18,840 --> 01:32:20,280
the way I'm about to lock the queue if

2385
01:32:20,280 --> 01:32:21,960
somebody is sort of just sort of sitting

2386
01:32:21,960 --> 01:32:23,520
at the edge of their seat about to get

2387
01:32:23,520 --> 01:32:25,739
up now is the time to do that

2388
01:32:25,739 --> 01:32:27,980
foreign

2389
01:32:32,020 --> 01:32:35,199
[Music]

2390
01:32:37,880 --> 01:32:40,679
so I just heard that the relay server

2391
01:32:40,679 --> 01:32:44,159
may be operated by the the credential

2392
01:32:44,159 --> 01:32:46,620
Authority which of course is fine but it

2393
01:32:46,620 --> 01:32:48,179
raises a

2394
01:32:48,179 --> 01:32:50,480
uh

2395
01:32:51,480 --> 01:32:54,480
I'm not sure if I understand right

2396
01:32:54,480 --> 01:32:57,000
um so my understanding was that when I

2397
01:32:57,000 --> 01:32:58,139
want to share a credential the

2398
01:32:58,139 --> 01:32:59,880
credential is already there

2399
01:32:59,880 --> 01:33:02,340
and then I decided to share it so at

2400
01:33:02,340 --> 01:33:04,980
that point when I somehow

2401
01:33:04,980 --> 01:33:09,540
upload the share to the relay server the

2402
01:33:09,540 --> 01:33:11,280
credential Authority is not involved I

2403
01:33:11,280 --> 01:33:12,780
thought I thought it just uploaded

2404
01:33:12,780 --> 01:33:14,880
anywhere like one one server that

2405
01:33:14,880 --> 01:33:17,699
supports this relay protocol so that

2406
01:33:17,699 --> 01:33:19,679
made me wonder why

2407
01:33:19,679 --> 01:33:21,719
that would have to do with the relay

2408
01:33:21,719 --> 01:33:24,179
sorry with the credential Authority

2409
01:33:24,179 --> 01:33:25,460
operating

2410
01:33:25,460 --> 01:33:29,340
that relay server and so that made me

2411
01:33:29,340 --> 01:33:32,400
wonder one more thing so um how is it

2412
01:33:32,400 --> 01:33:34,020
supposed to work

2413
01:33:34,020 --> 01:33:36,120
um in practice like on my device and on

2414
01:33:36,120 --> 01:33:38,100
the recipient's device am I supposed to

2415
01:33:38,100 --> 01:33:40,620
have an app for example so I receive a

2416
01:33:40,620 --> 01:33:42,840
credential from somewhere then I hit

2417
01:33:42,840 --> 01:33:45,120
share this credential then an app pops

2418
01:33:45,120 --> 01:33:48,420
up and it will will upload it to some

2419
01:33:48,420 --> 01:33:50,820
relay server that perhaps I can select

2420
01:33:50,820 --> 01:33:52,739
or perhaps it is specific to the app I

2421
01:33:52,739 --> 01:33:55,920
don't know that then I will get a link

2422
01:33:55,920 --> 01:33:57,600
then I will share this through some

2423
01:33:57,600 --> 01:33:59,400
other Channel with the recipient and

2424
01:33:59,400 --> 01:34:00,840
then what happens the person clicks on

2425
01:34:00,840 --> 01:34:03,600
the link and then how does the retrieval

2426
01:34:03,600 --> 01:34:05,880
of the content work it's a post request

2427
01:34:05,880 --> 01:34:09,540
so I can imagine two ways either the

2428
01:34:09,540 --> 01:34:11,699
recipient also has the app

2429
01:34:11,699 --> 01:34:13,739
in which case that may also be tied to

2430
01:34:13,739 --> 01:34:15,960
this relay server and only work with

2431
01:34:15,960 --> 01:34:18,780
certain ones or it may just fire up the

2432
01:34:18,780 --> 01:34:20,820
browser in which case for decryption it

2433
01:34:20,820 --> 01:34:22,440
would be necessary to fetch some some

2434
01:34:22,440 --> 01:34:24,120
JavaScript which is actually from the

2435
01:34:24,120 --> 01:34:27,199
relay server so there is a like circular

2436
01:34:27,199 --> 01:34:30,900
thing going on regarding trust so um the

2437
01:34:30,900 --> 01:34:33,179
two questions I have um in this regard

2438
01:34:33,179 --> 01:34:36,420
are is this open to me operating my own

2439
01:34:36,420 --> 01:34:39,179
relay server for example and if so how

2440
01:34:39,179 --> 01:34:40,920
would that fit in with this app would

2441
01:34:40,920 --> 01:34:43,560
the app be specific to one operator

2442
01:34:43,560 --> 01:34:45,719
and how's the retrieval working with

2443
01:34:45,719 --> 01:34:47,400
this JavaScript thing so that's the

2444
01:34:47,400 --> 01:34:48,840
first set of questions I have after that

2445
01:34:48,840 --> 01:34:51,780
I have a different comment

2446
01:34:51,780 --> 01:34:55,080
um awesome question we definitely uh

2447
01:34:55,080 --> 01:34:57,719
tried to solve that problem and number

2448
01:34:57,719 --> 01:35:00,719
one in order to be able to manage

2449
01:35:00,719 --> 01:35:03,239
credentials on the device you need some

2450
01:35:03,239 --> 01:35:05,580
software you definitely need either

2451
01:35:05,580 --> 01:35:09,360
application like a like wallet or

2452
01:35:09,360 --> 01:35:11,520
third-party application that recognizes

2453
01:35:11,520 --> 01:35:13,619
this is credential this is our

2454
01:35:13,619 --> 01:35:17,760
credential provider and it is aware of

2455
01:35:17,760 --> 01:35:19,739
the process like how do we generate that

2456
01:35:19,739 --> 01:35:22,080
provisional information how do we like

2457
01:35:22,080 --> 01:35:24,780
which relay server to call in order to

2458
01:35:24,780 --> 01:35:27,600
store that info how do we pass the share

2459
01:35:27,600 --> 01:35:29,219
URL as a link

2460
01:35:29,219 --> 01:35:32,520
at the same time on the receiving device

2461
01:35:32,520 --> 01:35:34,500
what you're receiving is basically just

2462
01:35:34,500 --> 01:35:38,179
a URL you make a get call right you get

2463
01:35:38,179 --> 01:35:42,060
HTTP page with open graph in the header

2464
01:35:42,060 --> 01:35:45,119
and if your messaging app understands

2465
01:35:45,119 --> 01:35:47,639
open graph it will generate you preview

2466
01:35:47,639 --> 01:35:50,520
the next thing when user clicks on that

2467
01:35:50,520 --> 01:35:52,980
like in the message and app Messaging

2468
01:35:52,980 --> 01:35:54,900
App should be aware

2469
01:35:54,900 --> 01:35:57,360
this belongs to the credential manager

2470
01:35:57,360 --> 01:36:00,480
on the device with it wallet third party

2471
01:36:00,480 --> 01:36:02,159
application

2472
01:36:02,159 --> 01:36:05,280
it needs to offload it we have a simple

2473
01:36:05,280 --> 01:36:07,440
mechanism doing that

2474
01:36:07,440 --> 01:36:09,600
if you can implement the same mechanism

2475
01:36:09,600 --> 01:36:13,020
and integrate with the messaging app if

2476
01:36:13,020 --> 01:36:14,400
you want to write your own application

2477
01:36:14,400 --> 01:36:16,020
that's doable

2478
01:36:16,020 --> 01:36:17,699
okay so if I understand correctly both

2479
01:36:17,699 --> 01:36:19,380
the sender and the receiver have an app

2480
01:36:19,380 --> 01:36:21,420
and the app would support

2481
01:36:21,420 --> 01:36:23,340
that the sender configures any relay

2482
01:36:23,340 --> 01:36:25,619
server is that correct

2483
01:36:25,619 --> 01:36:29,040
um we support let's let's put it this

2484
01:36:29,040 --> 01:36:30,780
way like if we are talking about the

2485
01:36:30,780 --> 01:36:32,400
precise solution that we want to

2486
01:36:32,400 --> 01:36:33,360
implement

2487
01:36:33,360 --> 01:36:36,119
or the general potentially there is no

2488
01:36:36,119 --> 01:36:38,880
limitation your application can use all

2489
01:36:38,880 --> 01:36:40,920
the trusted relay servers

2490
01:36:40,920 --> 01:36:43,739
if you want to enforce the requirement

2491
01:36:43,739 --> 01:36:45,719
that there is a certain level of trust

2492
01:36:45,719 --> 01:36:47,400
between your application and a giveaway

2493
01:36:47,400 --> 01:36:49,739
server as we mentioned the attestation

2494
01:36:49,739 --> 01:36:52,920
you need to be able to share some uh

2495
01:36:52,920 --> 01:36:56,159
some trust right a number of

2496
01:36:56,159 --> 01:36:57,540
certificates

2497
01:36:57,540 --> 01:36:59,159
um

2498
01:36:59,159 --> 01:37:01,159
to be able to

2499
01:37:01,159 --> 01:37:04,380
realize this is valid this is trusted

2500
01:37:04,380 --> 01:37:06,840
so there might be some limitations if

2501
01:37:06,840 --> 01:37:08,159
you want to establish that level of

2502
01:37:08,159 --> 01:37:10,400
trust

2503
01:37:10,400 --> 01:37:14,000
if it makes sense

2504
01:37:14,699 --> 01:37:16,020
um just to answer your your question

2505
01:37:16,020 --> 01:37:17,520
about like if you were to create your

2506
01:37:17,520 --> 01:37:19,619
own app and like wanted to run your own

2507
01:37:19,619 --> 01:37:21,360
relay server so I think what would

2508
01:37:21,360 --> 01:37:23,040
probably happen is that you as the

2509
01:37:23,040 --> 01:37:25,199
sender are effectively choosing the

2510
01:37:25,199 --> 01:37:27,360
relay server you want so if you're

2511
01:37:27,360 --> 01:37:28,619
running your own app that would probably

2512
01:37:28,619 --> 01:37:30,480
give you one option which is that apps

2513
01:37:30,480 --> 01:37:32,699
like you know that the apps really

2514
01:37:32,699 --> 01:37:34,920
server so then you send that link over

2515
01:37:34,920 --> 01:37:37,260
to your recipient device and say that

2516
01:37:37,260 --> 01:37:39,300
recipient doesn't have your new app like

2517
01:37:39,300 --> 01:37:40,500
ITF

2518
01:37:40,500 --> 01:37:42,060
for fun

2519
01:37:42,060 --> 01:37:42,719
um

2520
01:37:42,719 --> 01:37:45,360
then when you when you click on the link

2521
01:37:45,360 --> 01:37:46,800
you'd be doing a get and you'd probably

2522
01:37:46,800 --> 01:37:49,320
just be showing a like it'd pop into

2523
01:37:49,320 --> 01:37:50,760
whatever web browser you have on that

2524
01:37:50,760 --> 01:37:51,900
device and you'd probably have to have

2525
01:37:51,900 --> 01:37:54,179
information about how to actually gather

2526
01:37:54,179 --> 01:37:56,760
that you know credential information off

2527
01:37:56,760 --> 01:37:58,679
that relay server so you probably have

2528
01:37:58,679 --> 01:38:00,179
to download that app and then that app

2529
01:38:00,179 --> 01:38:01,800
would know what to do with that link

2530
01:38:01,800 --> 01:38:04,020
um so it's handled very similarly for us

2531
01:38:04,020 --> 01:38:07,619
uh between wallets and Etc but if you

2532
01:38:07,619 --> 01:38:09,600
had two separate apps I had two like a

2533
01:38:09,600 --> 01:38:10,860
credential Authority they could

2534
01:38:10,860 --> 01:38:11,820
potentially

2535
01:38:11,820 --> 01:38:13,860
through this entire process the same way

2536
01:38:13,860 --> 01:38:15,239
that we're doing it

2537
01:38:15,239 --> 01:38:19,560
okay if you um had some other pattern in

2538
01:38:19,560 --> 01:38:21,659
the URL that would allow this kind of

2539
01:38:21,659 --> 01:38:24,560
URL to be recognized as a share link

2540
01:38:24,560 --> 01:38:26,639
independently of the relay server that's

2541
01:38:26,639 --> 01:38:29,040
used independently of the hostname for

2542
01:38:29,040 --> 01:38:31,260
example by introducing a scheme the

2543
01:38:31,260 --> 01:38:33,480
schema prefix for that then you could

2544
01:38:33,480 --> 01:38:35,520
have a recipient app that works for all

2545
01:38:35,520 --> 01:38:38,520
relay servers and um I think that would

2546
01:38:38,520 --> 01:38:40,260
make things easier for example also

2547
01:38:40,260 --> 01:38:41,460
address the concern that was there

2548
01:38:41,460 --> 01:38:43,320
earlier when somebody mentioned

2549
01:38:43,320 --> 01:38:46,020
resources from from people you know

2550
01:38:46,020 --> 01:38:48,600
uploading CAD pictures whatever so like

2551
01:38:48,600 --> 01:38:49,860
those people could run their own relay

2552
01:38:49,860 --> 01:38:51,420
servers and upload they can pictures and

2553
01:38:51,420 --> 01:38:53,460
then that could be retrieved with any

2554
01:38:53,460 --> 01:38:54,239
app

2555
01:38:54,239 --> 01:38:55,739
so that's the first sort of thing that I

2556
01:38:55,739 --> 01:38:58,080
want to say and the second is just a

2557
01:38:58,080 --> 01:38:59,940
comment I think the term mailbox is a

2558
01:38:59,940 --> 01:39:01,619
contradiction of terms um because it's

2559
01:39:01,619 --> 01:39:03,360
not for arbitrary mail

2560
01:39:03,360 --> 01:39:05,400
and it's just for credentials in this

2561
01:39:05,400 --> 01:39:06,480
proposal

2562
01:39:06,480 --> 01:39:08,520
um and also um in the mailbox I would

2563
01:39:08,520 --> 01:39:10,020
expect that I can have several messages

2564
01:39:10,020 --> 01:39:12,600
which I can delete independently but the

2565
01:39:12,600 --> 01:39:14,280
delete semantics here delete the whole

2566
01:39:14,280 --> 01:39:16,260
mailbox so

2567
01:39:16,260 --> 01:39:18,840
um it doesn't seem like a mailbox to me

2568
01:39:18,840 --> 01:39:21,239
um and so it's more like a single

2569
01:39:21,239 --> 01:39:23,400
exchange Point somehow and I would

2570
01:39:23,400 --> 01:39:27,780
recommend renaming this term

2571
01:39:28,619 --> 01:39:30,060
um we can definitely bring that into the

2572
01:39:30,060 --> 01:39:32,159
email thread and make one about what to

2573
01:39:32,159 --> 01:39:33,719
update instead of mailbox

2574
01:39:33,719 --> 01:39:35,280
um and to your previous point I think

2575
01:39:35,280 --> 01:39:37,980
that as we gather more interest and

2576
01:39:37,980 --> 01:39:39,480
participation through this working group

2577
01:39:39,480 --> 01:39:41,460
we can definitely figure out hey maybe

2578
01:39:41,460 --> 01:39:43,920
there is just a prefix or some format

2579
01:39:43,920 --> 01:39:45,840
that all sharing links for any relay

2580
01:39:45,840 --> 01:39:47,880
server should follow at the moment we

2581
01:39:47,880 --> 01:39:49,500
don't have as much of that participation

2582
01:39:49,500 --> 01:39:51,420
we're looking for that so

2583
01:39:51,420 --> 01:39:53,280
if you guys want to implement this let

2584
01:39:53,280 --> 01:39:54,540
us know we can figure that one out too

2585
01:39:54,540 --> 01:39:57,500
that's a good idea

2586
01:39:58,679 --> 01:40:02,159
Chris lemon's Comcast so

2587
01:40:02,159 --> 01:40:05,040
um you said at one point and and we just

2588
01:40:05,040 --> 01:40:07,139
we just touched on a number of these but

2589
01:40:07,139 --> 01:40:09,119
you said at one point that the

2590
01:40:09,119 --> 01:40:12,659
expectation is that for a given type of

2591
01:40:12,659 --> 01:40:14,639
credential from a given credential

2592
01:40:14,639 --> 01:40:19,380
Authority that uh the most the expected

2593
01:40:19,380 --> 01:40:23,040
um uh relay server would be operated by

2594
01:40:23,040 --> 01:40:25,020
the same sort of entity that operates

2595
01:40:25,020 --> 01:40:28,920
that Authority and that certainly a

2596
01:40:28,920 --> 01:40:30,659
conceivable scheme

2597
01:40:30,659 --> 01:40:33,360
is there anything that you see that

2598
01:40:33,360 --> 01:40:36,540
would that could possibly prevent a

2599
01:40:36,540 --> 01:40:39,719
credential from being transferred using

2600
01:40:39,719 --> 01:40:42,719
a relay server that was not authorized

2601
01:40:42,719 --> 01:40:46,100
by the credential Authority

2602
01:40:46,679 --> 01:40:49,760
or is the choice of relay server 100

2603
01:40:49,760 --> 01:40:53,699
within the uh within the grasp of the

2604
01:40:53,699 --> 01:40:56,119
sender

2605
01:40:56,219 --> 01:40:58,320
so the choice of relay server is really

2606
01:40:58,320 --> 01:41:00,179
up to the credential Authority making

2607
01:41:00,179 --> 01:41:01,920
the share

2608
01:41:01,920 --> 01:41:05,600
um not up to the sender

2609
01:41:05,940 --> 01:41:08,820
how do you enforce that

2610
01:41:08,820 --> 01:41:09,719
um

2611
01:41:09,719 --> 01:41:12,000
I think what Alex manned

2612
01:41:12,000 --> 01:41:13,800
um there should be level of trust

2613
01:41:13,800 --> 01:41:15,480
between credential Authority and

2614
01:41:15,480 --> 01:41:18,900
ascendant application so that's obvious

2615
01:41:18,900 --> 01:41:21,900
right because no that's not obvious okay

2616
01:41:21,900 --> 01:41:24,119
that's out of scope let's put it this

2617
01:41:24,119 --> 01:41:27,360
way out of scope for this um working

2618
01:41:27,360 --> 01:41:29,400
group now

2619
01:41:29,400 --> 01:41:32,460
the level of trust between sender and

2620
01:41:32,460 --> 01:41:34,020
degree server

2621
01:41:34,020 --> 01:41:38,159
is up to the implementer if let's say

2622
01:41:38,159 --> 01:41:40,380
I want

2623
01:41:40,380 --> 01:41:44,060
to be able to trust based on the um

2624
01:41:44,060 --> 01:41:46,980
hardware-based certificates or on uh

2625
01:41:46,980 --> 01:41:49,619
like some sort on pki level

2626
01:41:49,619 --> 01:41:51,960
uh we need to establish that and we need

2627
01:41:51,960 --> 01:41:55,260
to implement mechanism covering the

2628
01:41:55,260 --> 01:41:58,139
content which is uploaded let's say I'm

2629
01:41:58,139 --> 01:42:00,900
a sender device right and I'm selecting

2630
01:42:00,900 --> 01:42:04,980
not abc.com but C CDA

2631
01:42:04,980 --> 01:42:07,860
dot com and there is no established

2632
01:42:07,860 --> 01:42:10,380
trust between the second choice and the

2633
01:42:10,380 --> 01:42:13,980
sender device uh

2634
01:42:14,340 --> 01:42:17,040
it very much depends on the

2635
01:42:17,040 --> 01:42:20,280
implementation on the security policy on

2636
01:42:20,280 --> 01:42:22,860
of the second Glacier work waiter to

2637
01:42:22,860 --> 01:42:25,320
trust that sender and the same holds

2638
01:42:25,320 --> 01:42:27,780
true to the sender application

2639
01:42:27,780 --> 01:42:31,520
someone May Crack the Code of that

2640
01:42:31,520 --> 01:42:34,380
credential Manager application and

2641
01:42:34,380 --> 01:42:36,239
redirect them to a different relay

2642
01:42:36,239 --> 01:42:38,760
server so that combination might not

2643
01:42:38,760 --> 01:42:41,159
necessarily work both depends on the

2644
01:42:41,159 --> 01:42:43,800
implementation that's why uh we

2645
01:42:43,800 --> 01:42:45,900
mentioned that such scenes as device

2646
01:42:45,900 --> 01:42:48,960
attestations they are optional based on

2647
01:42:48,960 --> 01:42:51,360
the security level selected by each

2648
01:42:51,360 --> 01:42:54,179
implementation right so so I understand

2649
01:42:54,179 --> 01:42:58,139
how the relay server can ask for

2650
01:42:58,139 --> 01:43:00,960
attestations credentials some sort of

2651
01:43:00,960 --> 01:43:03,900
authorization from the sender and so

2652
01:43:03,900 --> 01:43:06,000
relay servers could reject senders that

2653
01:43:06,000 --> 01:43:07,139
they don't approve of for whatever

2654
01:43:07,139 --> 01:43:09,060
reason sure

2655
01:43:09,060 --> 01:43:13,080
but what I don't see is how

2656
01:43:13,080 --> 01:43:18,719
um uh how uh uh Cas can influence and I

2657
01:43:18,719 --> 01:43:20,040
realized that the definition of CAS

2658
01:43:20,040 --> 01:43:22,619
outside of the scope here but but I

2659
01:43:22,619 --> 01:43:24,420
think it's important because I think we

2660
01:43:24,420 --> 01:43:25,920
might be relying on it for something

2661
01:43:25,920 --> 01:43:28,860
here because the

2662
01:43:28,860 --> 01:43:31,639
uh I don't understand how the ca

2663
01:43:31,639 --> 01:43:33,199
influences

2664
01:43:33,199 --> 01:43:38,400
what relay server the sender can choose

2665
01:43:38,400 --> 01:43:41,040
if the sender chooses a different relay

2666
01:43:41,040 --> 01:43:44,280
server that is willing to accept it but

2667
01:43:44,280 --> 01:43:47,520
that second relay server is not approved

2668
01:43:47,520 --> 01:43:51,000
of by the issuer of whatever credential

2669
01:43:51,000 --> 01:43:52,800
they want to send

2670
01:43:52,800 --> 01:43:56,940
uh who stops that how does that happen

2671
01:43:56,940 --> 01:43:59,400
and why does it matter

2672
01:43:59,400 --> 01:44:01,380
hi this is Nick again I just want to it

2673
01:44:01,380 --> 01:44:03,360
doesn't matter I think you're right it

2674
01:44:03,360 --> 01:44:06,600
doesn't matter so CA does not enforce uh

2675
01:44:06,600 --> 01:44:09,719
what really server gets used

2676
01:44:09,719 --> 01:44:11,340
um so you know you have the you know

2677
01:44:11,340 --> 01:44:13,199
credential provisioning information that

2678
01:44:13,199 --> 01:44:15,540
just gets sent between two devices and

2679
01:44:15,540 --> 01:44:18,480
and it doesn't care how that was done uh

2680
01:44:18,480 --> 01:44:20,340
the only time I make here is at the very

2681
01:44:20,340 --> 01:44:22,800
you know end when the the receiver maybe

2682
01:44:22,800 --> 01:44:25,619
tries to provision a a credential with

2683
01:44:25,619 --> 01:44:27,420
the provision Authority that the right

2684
01:44:27,420 --> 01:44:29,760
information is present there so that

2685
01:44:29,760 --> 01:44:31,560
Communication channel that occurs to

2686
01:44:31,560 --> 01:44:33,239
deliver that you know provisioning

2687
01:44:33,239 --> 01:44:35,280
information does not matter and is not

2688
01:44:35,280 --> 01:44:40,199
opinionated by uh the uh the the ca

2689
01:44:40,199 --> 01:44:42,300
um I believe that's how it is in terms

2690
01:44:42,300 --> 01:44:43,920
of the open you know the the proposal

2691
01:44:43,920 --> 01:44:46,860
where we're putting forth now I think a

2692
01:44:46,860 --> 01:44:48,239
lot of the confusion is like you know

2693
01:44:48,239 --> 01:44:50,280
we're not trying to be opinionated about

2694
01:44:50,280 --> 01:44:52,080
the implementation of it you know if you

2695
01:44:52,080 --> 01:44:53,880
you as like a pub you know private

2696
01:44:53,880 --> 01:44:57,119
entity wants to to have some form of you

2697
01:44:57,119 --> 01:44:58,739
know security around like which which

2698
01:44:58,739 --> 01:45:01,020
really serve a consent then sure surely

2699
01:45:01,020 --> 01:45:02,699
you could try to have like enhancement

2700
01:45:02,699 --> 01:45:04,619
that you could put around it to ensure

2701
01:45:04,619 --> 01:45:05,580
that

2702
01:45:05,580 --> 01:45:07,980
um but that's not uh what we're baking

2703
01:45:07,980 --> 01:45:10,679
into like the proposal in terms of like

2704
01:45:10,679 --> 01:45:13,199
um which uh release server gets used uh

2705
01:45:13,199 --> 01:45:14,760
and it's controlled by and it's not

2706
01:45:14,760 --> 01:45:17,460
controlled by the the ca

2707
01:45:17,460 --> 01:45:21,900
okay so so there's no technical or even

2708
01:45:21,900 --> 01:45:24,420
policy reason why I couldn't run my own

2709
01:45:24,420 --> 01:45:26,820
relay server configure my devices to use

2710
01:45:26,820 --> 01:45:28,980
my relay server

2711
01:45:28,980 --> 01:45:32,699
um other than the people receiving the

2712
01:45:32,699 --> 01:45:34,980
links might be confused when they

2713
01:45:34,980 --> 01:45:38,520
receive a you know uh lemons.example.com

2714
01:45:38,520 --> 01:45:43,080
address instead of a uh uh carkey.com

2715
01:45:43,080 --> 01:45:45,000
example.com

2716
01:45:45,000 --> 01:45:47,699
yeah I think that's exactly right yeah

2717
01:45:47,699 --> 01:45:49,800
you have many different choices of which

2718
01:45:49,800 --> 01:45:51,300
really server to use but you know what

2719
01:45:51,300 --> 01:45:53,219
what is expected really server maybe

2720
01:45:53,219 --> 01:45:54,780
from the recipient side and that might

2721
01:45:54,780 --> 01:45:57,719
be the the factor that's involved here

2722
01:45:57,719 --> 01:45:59,040
um so there needs to be at least some

2723
01:45:59,040 --> 01:46:00,239
kind of agreement at least only the

2724
01:46:00,239 --> 01:46:03,239
receiver and like from the software side

2725
01:46:03,239 --> 01:46:06,239
right and so and so that brings me to

2726
01:46:06,239 --> 01:46:08,820
the the last question I had I hope which

2727
01:46:08,820 --> 01:46:11,820
is that um when you receive one of these

2728
01:46:11,820 --> 01:46:15,000
things how do you know that it is a

2729
01:46:15,000 --> 01:46:17,699
credential because I just got a link

2730
01:46:17,699 --> 01:46:19,860
how does how does my device know that

2731
01:46:19,860 --> 01:46:22,020
that's a credential and why does it not

2732
01:46:22,020 --> 01:46:24,420
involve the content type

2733
01:46:24,420 --> 01:46:26,880
right so you know that that is yeah so

2734
01:46:26,880 --> 01:46:29,580
in the URL itself we do have a you know

2735
01:46:29,580 --> 01:46:32,520
we call a vertical uh it's a very it's a

2736
01:46:32,520 --> 01:46:35,040
it's a query parameter that tells you

2737
01:46:35,040 --> 01:46:36,600
the type of vertical it is like if

2738
01:46:36,600 --> 01:46:38,820
you're using a car key for transferring

2739
01:46:38,820 --> 01:46:40,920
car keys Hotel keys there may be

2740
01:46:40,920 --> 01:46:42,920
something to denote that this is a

2741
01:46:42,920 --> 01:46:45,179
credential transfer for like a car key

2742
01:46:45,179 --> 01:46:48,420
and furthermore sorry uh you you could

2743
01:46:48,420 --> 01:46:51,360
reach out to that relay server

2744
01:46:51,360 --> 01:46:53,639
um there are information that you

2745
01:46:53,639 --> 01:46:55,679
couldn't look at after you've decrypted

2746
01:46:55,679 --> 01:46:57,119
the message to see the type of

2747
01:46:57,119 --> 01:46:58,560
credential that you're trying to

2748
01:46:58,560 --> 01:47:01,080
transfer here so there are there are

2749
01:47:01,080 --> 01:47:02,280
more information in the encrypted

2750
01:47:02,280 --> 01:47:04,619
portion after you decrypted absolutely

2751
01:47:04,619 --> 01:47:06,360
once I got it decrypted I have an object

2752
01:47:06,360 --> 01:47:07,380
I could probably figure out what to do

2753
01:47:07,380 --> 01:47:08,159
with it

2754
01:47:08,159 --> 01:47:10,560
um are you suggesting that I'm going to

2755
01:47:10,560 --> 01:47:13,560
read the URI and there's going to be

2756
01:47:13,560 --> 01:47:16,860
special format for the URI and if the

2757
01:47:16,860 --> 01:47:20,159
URI is in a particular format

2758
01:47:20,159 --> 01:47:22,619
um and has magic query parameters that

2759
01:47:22,619 --> 01:47:25,440
are registered somewhere that that's

2760
01:47:25,440 --> 01:47:26,940
going to do a different thing

2761
01:47:26,940 --> 01:47:31,580
so I think I know sorry

2762
01:47:31,940 --> 01:47:35,159
we have credential type metadata along

2763
01:47:35,159 --> 01:47:37,020
with the encrypted information and I

2764
01:47:37,020 --> 01:47:38,639
mentioned it in the very beginning of

2765
01:47:38,639 --> 01:47:40,679
presentation so yeah I haven't read that

2766
01:47:40,679 --> 01:47:42,840
information but you know this belongs to

2767
01:47:42,840 --> 01:47:44,940
such and such format

2768
01:47:44,940 --> 01:47:47,699
I I think I'm good thank you I think the

2769
01:47:47,699 --> 01:47:49,320
missing piece is that the URL could be

2770
01:47:49,320 --> 01:47:51,060
registered by an app as a universal link

2771
01:47:51,060 --> 01:47:54,360
that then knows how to handle it

2772
01:47:54,360 --> 01:47:55,500
a little bit

2773
01:47:55,500 --> 01:47:57,239
enough

2774
01:47:57,239 --> 01:47:59,460
all right Paul

2775
01:47:59,460 --> 01:48:01,320
huff and this may actually be a lead

2776
01:48:01,320 --> 01:48:04,679
into the what happens next but

2777
01:48:04,679 --> 01:48:06,960
I heard and by the way I have not read

2778
01:48:06,960 --> 01:48:08,820
the draft I was interested in the topic

2779
01:48:08,820 --> 01:48:10,920
but I'm like way out of my depth here

2780
01:48:10,920 --> 01:48:13,320
but I heard a lot of people asking

2781
01:48:13,320 --> 01:48:14,880
questions with you guys saying yes we

2782
01:48:14,880 --> 01:48:16,020
should add that to requirements we

2783
01:48:16,020 --> 01:48:17,699
should add that to the requirements

2784
01:48:17,699 --> 01:48:19,380
but then I heard Romans say there isn't

2785
01:48:19,380 --> 01:48:20,880
going to be a requirements document so

2786
01:48:20,880 --> 01:48:23,460
are we talking about putting the

2787
01:48:23,460 --> 01:48:26,880
requirements in the solution document

2788
01:48:26,880 --> 01:48:28,500
say here were the requirements here are

2789
01:48:28,500 --> 01:48:30,060
the assumptions and this is the solution

2790
01:48:30,060 --> 01:48:33,060
or doing something different I I am

2791
01:48:33,060 --> 01:48:35,040
confused and again I know this is

2792
01:48:35,040 --> 01:48:37,080
probably what's happening next but I

2793
01:48:37,080 --> 01:48:39,000
heard this over and over it wasn't just

2794
01:48:39,000 --> 01:48:41,580
we need to do one requirement all right

2795
01:48:41,580 --> 01:48:43,080
I'm going to unlock the queue for the

2796
01:48:43,080 --> 01:48:44,940
sort of what happens next discussion so

2797
01:48:44,940 --> 01:48:46,980
you know there are many ways to do this

2798
01:48:46,980 --> 01:48:48,900
right as Roman points out this actually

2799
01:48:48,900 --> 01:48:51,540
has is in the charter but you know there

2800
01:48:51,540 --> 01:48:53,400
if I'm correct there's nothing stopping

2801
01:48:53,400 --> 01:48:55,080
us from for instance from having a

2802
01:48:55,080 --> 01:48:57,840
separate uh working on use

2803
01:48:57,840 --> 01:48:59,760
um requirements and problem statements

2804
01:48:59,760 --> 01:49:01,800
in a separate draft and I'm folding it

2805
01:49:01,800 --> 01:49:04,139
into the finished product as we yeah

2806
01:49:04,139 --> 01:49:06,060
that's exactly right I would urge us

2807
01:49:06,060 --> 01:49:08,100
strongly not to over index on where we

2808
01:49:08,100 --> 01:49:09,840
put the requirements we heard a long

2809
01:49:09,840 --> 01:49:11,159
discussion that we want requirements

2810
01:49:11,159 --> 01:49:13,560
let's write some text and you know those

2811
01:49:13,560 --> 01:49:14,940
of us kind of concerned on the process

2812
01:49:14,940 --> 01:49:16,440
kind of side we'll figure out what the

2813
01:49:16,440 --> 01:49:17,940
right way is to make sure that it

2814
01:49:17,940 --> 01:49:20,460
appears and manifests in the right way

2815
01:49:20,460 --> 01:49:23,159
that's right

2816
01:49:23,159 --> 01:49:25,159
um

2817
01:49:29,340 --> 01:49:30,840
yeah so that would be very helpful to me

2818
01:49:30,840 --> 01:49:32,099
I mean I think we're hopeful to me would

2819
01:49:32,099 --> 01:49:34,380
be like here's the requirements and then

2820
01:49:34,380 --> 01:49:35,460
here are some of the obvious things you

2821
01:49:35,460 --> 01:49:36,719
might try to do and this is why they

2822
01:49:36,719 --> 01:49:37,860
don't work because I'm like requirement

2823
01:49:37,860 --> 01:49:39,480
19.

2824
01:49:39,480 --> 01:49:40,619
um because I think what you're hearing a

2825
01:49:40,619 --> 01:49:41,940
lot of is like people sort of looking at

2826
01:49:41,940 --> 01:49:43,080
this and maybe not seeing the complete

2827
01:49:43,080 --> 01:49:44,880
picture that you seem to see and saying

2828
01:49:44,880 --> 01:49:46,560
like well why don't you do this and so

2829
01:49:46,560 --> 01:49:48,119
like I think we're helpful if you could

2830
01:49:48,119 --> 01:49:49,560
like I don't think I mean I don't think

2831
01:49:49,560 --> 01:49:51,719
it has to be like R1 or 2r3 R4 but I

2832
01:49:51,719 --> 01:49:52,560
think it's describe enough for problem

2833
01:49:52,560 --> 01:49:54,119
space that'd be fine but I think there's

2834
01:49:54,119 --> 01:49:55,920
no problem space so then people can look

2835
01:49:55,920 --> 01:49:57,900
at it and be like now I understand why

2836
01:49:57,900 --> 01:49:59,460
the thing that like seems obvious is not

2837
01:49:59,460 --> 01:50:00,960
obvious to you

2838
01:50:00,960 --> 01:50:01,820
um

2839
01:50:01,820 --> 01:50:03,119
[Music]

2840
01:50:03,119 --> 01:50:04,920
yeah that's a I think that's an

2841
01:50:04,920 --> 01:50:06,540
excellent point

2842
01:50:06,540 --> 01:50:09,119
challenges I think also like these are

2843
01:50:09,119 --> 01:50:10,560
great slides and presentations helped a

2844
01:50:10,560 --> 01:50:12,239
lot like this has been really good today

2845
01:50:12,239 --> 01:50:13,980
um I think it also would help some

2846
01:50:13,980 --> 01:50:16,380
people certainly myself

2847
01:50:16,380 --> 01:50:18,000
you could just show

2848
01:50:18,000 --> 01:50:20,159
um the stuff that's uh like here's how

2849
01:50:20,159 --> 01:50:22,679
we Imagine One Way like this is a small

2850
01:50:22,679 --> 01:50:24,540
piece of a solution right this is a much

2851
01:50:24,540 --> 01:50:26,639
broader thing so take one instance of it

2852
01:50:26,639 --> 01:50:28,139
like the car unlock case or the hotel

2853
01:50:28,139 --> 01:50:30,840
room case and say like look here's sort

2854
01:50:30,840 --> 01:50:33,840
of what one possible deployment of the

2855
01:50:33,840 --> 01:50:36,000
full solution might look like with all

2856
01:50:36,000 --> 01:50:38,040
the pieces and here's where the pieces

2857
01:50:38,040 --> 01:50:40,080
with that the itfs defining fit in like

2858
01:50:40,080 --> 01:50:42,599
right here in this little bit but I mean

2859
01:50:42,599 --> 01:50:44,159
people are getting lost on like what the

2860
01:50:44,159 --> 01:50:46,500
OS does what which is it the Hilton app

2861
01:50:46,500 --> 01:50:48,360
is it the wallet you know there's a lot

2862
01:50:48,360 --> 01:50:49,800
of different things floating around here

2863
01:50:49,800 --> 01:50:51,060
and different apps and different relay

2864
01:50:51,060 --> 01:50:53,760
servers and not to say that we're trying

2865
01:50:53,760 --> 01:50:55,320
to Define that's the only way to deploy

2866
01:50:55,320 --> 01:50:56,520
it or every way to deploy or anything

2867
01:50:56,520 --> 01:50:59,219
but just give people a flavor of here's

2868
01:50:59,219 --> 01:51:01,500
a possible implementation and deployment

2869
01:51:01,500 --> 01:51:03,420
that uses this for the whole system and

2870
01:51:03,420 --> 01:51:04,619
here's all the pieces and what they look

2871
01:51:04,619 --> 01:51:05,639
like I think that would help people

2872
01:51:05,639 --> 01:51:07,159
understand

2873
01:51:07,159 --> 01:51:09,540
I I think that's a really good feedback

2874
01:51:09,540 --> 01:51:11,099
I think you know we kind of index a

2875
01:51:11,099 --> 01:51:12,960
little bit on on the other side where we

2876
01:51:12,960 --> 01:51:15,119
we want to make it so agnostic that we

2877
01:51:15,119 --> 01:51:16,619
didn't want to bring in specific use

2878
01:51:16,619 --> 01:51:18,480
cases to explore but I think that's a

2879
01:51:18,480 --> 01:51:20,280
really great point in in trying to like

2880
01:51:20,280 --> 01:51:22,619
have like a projection of how this works

2881
01:51:22,619 --> 01:51:26,840
right given like an actual use case

2882
01:51:26,840 --> 01:51:29,040
or I would have been here like yeah you

2883
01:51:29,040 --> 01:51:30,060
should have brought in the specific

2884
01:51:30,060 --> 01:51:31,500
generalized thing that we could use and

2885
01:51:31,500 --> 01:51:32,520
I would have asked for exactly that

2886
01:51:32,520 --> 01:51:34,739
because that's ietf and I apologize but

2887
01:51:34,739 --> 01:51:37,679
you know like we'll get there

2888
01:51:37,679 --> 01:51:39,780
yeah thanks for that

2889
01:51:39,780 --> 01:51:43,560
uh just one comment on uh anti-replay uh

2890
01:51:43,560 --> 01:51:45,239
my impression is so far that it's

2891
01:51:45,239 --> 01:51:48,000
implemented by the relays uh rather than

2892
01:51:48,000 --> 01:51:51,599
by the final credential issuer that

2893
01:51:51,599 --> 01:51:54,480
completes the credential provisioning if

2894
01:51:54,480 --> 01:51:57,480
that's the case then I can create a

2895
01:51:57,480 --> 01:52:00,060
downstream relay that memorizes messages

2896
01:52:00,060 --> 01:52:02,580
and makes it possible to duplicate the

2897
01:52:02,580 --> 01:52:04,199
conversation to as many parties as I

2898
01:52:04,199 --> 01:52:08,699
want uh so uh that's something worth

2899
01:52:08,699 --> 01:52:10,800
thinking about if it's important somehow

2900
01:52:10,800 --> 01:52:14,940
to avoid replay is that the system can

2901
01:52:14,940 --> 01:52:16,619
be extended in such a way that replay

2902
01:52:16,619 --> 01:52:19,519
becomes something

2903
01:52:21,239 --> 01:52:23,940
yeah so it's kind of uh built in in two

2904
01:52:23,940 --> 01:52:25,619
different ways so one the relay server

2905
01:52:25,619 --> 01:52:28,260
because the mailbox is actually deleted

2906
01:52:28,260 --> 01:52:30,780
um but also if you remember in the first

2907
01:52:30,780 --> 01:52:32,280
graph we get that provisioning

2908
01:52:32,280 --> 01:52:33,480
information from the credential

2909
01:52:33,480 --> 01:52:35,159
Authority so you can think of it as a

2910
01:52:35,159 --> 01:52:37,139
token that the credential Authority is

2911
01:52:37,139 --> 01:52:38,699
storing so when that credential

2912
01:52:38,699 --> 01:52:41,099
Authority then sees that token

2913
01:52:41,099 --> 01:52:43,020
it'll say like okay that's the person

2914
01:52:43,020 --> 01:52:46,020
and then say that you got the

2915
01:52:46,020 --> 01:52:47,099
provisioning information put it

2916
01:52:47,099 --> 01:52:48,179
somewhere else for a little while and

2917
01:52:48,179 --> 01:52:49,920
then tried again that credential

2918
01:52:49,920 --> 01:52:52,739
Authority should also like decline it so

2919
01:52:52,739 --> 01:52:55,080
they kind of have like two parties

2920
01:52:55,080 --> 01:52:57,420
um but my recipient can be an actual

2921
01:52:57,420 --> 01:52:58,920
Downstream relay that facilitates

2922
01:52:58,920 --> 01:53:01,139
replayability so I can deliver the

2923
01:53:01,139 --> 01:53:04,460
credential to my own relay which

2924
01:53:04,460 --> 01:53:06,599
unbeknownst to the real relay is

2925
01:53:06,599 --> 01:53:08,540
actually a relay that memorizes messages

2926
01:53:08,540 --> 01:53:12,420
and then that thing can uh not delete

2927
01:53:12,420 --> 01:53:14,520
messages and allow them to be replayed

2928
01:53:14,520 --> 01:53:16,560
and all kinds of fun stuff

2929
01:53:16,560 --> 01:53:18,300
yeah I think I think there's different

2930
01:53:18,300 --> 01:53:19,920
layers of security that we have to be

2931
01:53:19,920 --> 01:53:21,300
aware of right I think you know the

2932
01:53:21,300 --> 01:53:23,760
relay uh replay attack here for the

2933
01:53:23,760 --> 01:53:25,320
Relay server is something that we'll try

2934
01:53:25,320 --> 01:53:27,960
to sufficiently address on that relay

2935
01:53:27,960 --> 01:53:30,900
server part but ultimately I think

2936
01:53:30,900 --> 01:53:32,520
there's there needs to be an additional

2937
01:53:32,520 --> 01:53:35,159
uh security when it comes to the actual

2938
01:53:35,159 --> 01:53:37,920
credential and how that is uh uh uh

2939
01:53:37,920 --> 01:53:39,659
specked out like for one example I'll

2940
01:53:39,659 --> 01:53:42,840
give is that for CCC there's also an

2941
01:53:42,840 --> 01:53:43,980
addition of something called an

2942
01:53:43,980 --> 01:53:46,860
immobilizer token so you know this is

2943
01:53:46,860 --> 01:53:49,080
some a unique token that you need to be

2944
01:53:49,080 --> 01:53:51,179
presented with the car for for

2945
01:53:51,179 --> 01:53:53,460
um to accept the key and to operate the

2946
01:53:53,460 --> 01:53:55,980
vehicle so you can't just use the same

2947
01:53:55,980 --> 01:53:58,320
you know immobilizer token twice so I

2948
01:53:58,320 --> 01:54:00,719
think this is a combination of um not

2949
01:54:00,719 --> 01:54:02,099
just relying on the release server

2950
01:54:02,099 --> 01:54:03,060
itself

2951
01:54:03,060 --> 01:54:05,280
um being like the end all for for all

2952
01:54:05,280 --> 01:54:07,199
replay attack I think we'll do what we

2953
01:54:07,199 --> 01:54:10,440
can on the uh the messaging side of it

2954
01:54:10,440 --> 01:54:11,760
um but you know I think there's there

2955
01:54:11,760 --> 01:54:13,380
needs to be additional uh security that

2956
01:54:13,380 --> 01:54:14,940
we need to kind of look at in the actual

2957
01:54:14,940 --> 01:54:18,060
credential protocols the themselves

2958
01:54:18,060 --> 01:54:20,099
all right Nick thank you

2959
01:54:20,099 --> 01:54:22,320
um I think um we have with the last five

2960
01:54:22,320 --> 01:54:23,520
minutes I want to get to a couple of

2961
01:54:23,520 --> 01:54:25,739
administrative stuffer including

2962
01:54:25,739 --> 01:54:28,860
possibly get if if we can adopt the the

2963
01:54:28,860 --> 01:54:31,320
draft as a working group document so

2964
01:54:31,320 --> 01:54:33,300
that's

2965
01:54:33,300 --> 01:54:33,710
um

2966
01:54:33,710 --> 01:54:34,860
[Music]

2967
01:54:34,860 --> 01:54:37,199
uh no I'm gonna ask for adoption of the

2968
01:54:37,199 --> 01:54:40,139
working group document as a draft as a

2969
01:54:40,139 --> 01:54:42,060
working group document completely

2970
01:54:42,060 --> 01:54:43,739
seriously and if you want to be against

2971
01:54:43,739 --> 01:54:45,599
that you can do that right but I'm not

2972
01:54:45,599 --> 01:54:47,639
joking no

2973
01:54:47,639 --> 01:54:50,060
okay

2974
01:54:50,699 --> 01:54:54,000
yes you can you can have opinions I'm

2975
01:54:54,000 --> 01:54:55,679
not joking I mean given to tell me this

2976
01:54:55,679 --> 01:54:56,880
discussion I can't imagine how you

2977
01:54:56,880 --> 01:54:58,619
possibly think it's ready

2978
01:54:58,619 --> 01:55:01,619
well you thank you well you can have

2979
01:55:01,619 --> 01:55:03,659
again right it's perfectly reasonable

2980
01:55:03,659 --> 01:55:08,460
type of opinions right but oh thank you

2981
01:55:08,460 --> 01:55:10,980
um so again

2982
01:55:10,980 --> 01:55:12,300
um if

2983
01:55:12,300 --> 01:55:15,540
um I will still ask the working group

2984
01:55:15,540 --> 01:55:18,380
whether you are uh whether it

2985
01:55:18,380 --> 01:55:21,239
on your for or against

2986
01:55:21,239 --> 01:55:24,119
adopting the current draft which is

2987
01:55:24,119 --> 01:55:26,280
linked on the data tracker page as a

2988
01:55:26,280 --> 01:55:28,619
working group document again this means

2989
01:55:28,619 --> 01:55:31,020
that the document is a starting point

2990
01:55:31,020 --> 01:55:32,880
for work

2991
01:55:32,880 --> 01:55:36,239
and that it is transferred the Change

2992
01:55:36,239 --> 01:55:37,800
Control is transferred to the working

2993
01:55:37,800 --> 01:55:39,300
group

2994
01:55:39,300 --> 01:55:42,300
if people want me to use the hand waving

2995
01:55:42,300 --> 01:55:45,300
tool for this I can do that

2996
01:55:45,300 --> 01:55:46,380
all right

2997
01:55:46,380 --> 01:55:49,860
let's set that up give me a give me a

2998
01:55:49,860 --> 01:55:52,040
second

2999
01:55:54,599 --> 01:55:58,260
so it's called The Raft Secret

3000
01:55:58,260 --> 01:56:00,659
then Charles

3001
01:56:00,659 --> 01:56:02,760
transfer

3002
01:56:02,760 --> 01:56:05,480
as

3003
01:56:07,139 --> 01:56:09,800
all right

3004
01:56:34,080 --> 01:56:36,300
so

3005
01:56:36,300 --> 01:56:39,080
thank you

3006
01:56:43,139 --> 01:56:44,639
all right we'll give it a few more

3007
01:56:44,639 --> 01:56:47,119
minutes

3008
01:57:04,520 --> 01:57:06,840
they're about

3009
01:57:06,840 --> 01:57:08,699
um let's hear the number of people in

3010
01:57:08,699 --> 01:57:11,520
the room kind of seem to match the the

3011
01:57:11,520 --> 01:57:13,139
people who have raised their hands at

3012
01:57:13,139 --> 01:57:14,340
this point

3013
01:57:14,340 --> 01:57:16,580
we're still getting one or two people

3014
01:57:16,580 --> 01:57:19,920
chiming in but it's I mean it's about 50

3015
01:57:19,920 --> 01:57:22,260
50 at this point which is I guess a

3016
01:57:22,260 --> 01:57:24,300
little bit too rough consensus to to to

3017
01:57:24,300 --> 01:57:26,099
go ahead and adopt the work the current

3018
01:57:26,099 --> 01:57:27,960
draft so what we'll do here is that

3019
01:57:27,960 --> 01:57:30,659
we'll ask the working groups the the

3020
01:57:30,659 --> 01:57:32,639
also I'm appealing right now how you

3021
01:57:32,639 --> 01:57:35,159
just called that like it is below 50 50.

3022
01:57:35,159 --> 01:57:37,380
and you you know said hey that's not

3023
01:57:37,380 --> 01:57:39,480
quite rough consensus like no seriously

3024
01:57:39,480 --> 01:57:41,040
no but

3025
01:57:41,040 --> 01:57:43,199
the the rest of the state members that

3026
01:57:43,199 --> 01:57:45,540
we're not going to adopt it right

3027
01:57:45,540 --> 01:57:49,580
okay all right

3028
01:57:50,099 --> 01:57:51,960
I don't think that was a good way of

3029
01:57:51,960 --> 01:57:55,920
characterizing it all right it's fine

3030
01:57:55,920 --> 01:57:57,260
that's fine

3031
01:57:57,260 --> 01:58:01,380
yeah exactly that's not consensus at all

3032
01:58:01,380 --> 01:58:03,619
right

3033
01:58:05,099 --> 01:58:08,699
exactly it's not consensus total

3034
01:58:08,699 --> 01:58:09,900
all right

3035
01:58:09,900 --> 01:58:12,060
which means that we'll and ask the

3036
01:58:12,060 --> 01:58:14,400
waters to re-spin the document and keep

3037
01:58:14,400 --> 01:58:16,020
working on it then we'll come back to it

3038
01:58:16,020 --> 01:58:18,540
to a later version I think what we've

3039
01:58:18,540 --> 01:58:21,239
heard here is a clear consensus for some

3040
01:58:21,239 --> 01:58:23,520
sort of requirements document them I

3041
01:58:23,520 --> 01:58:26,099
think it's a good idea to put that in a

3042
01:58:26,099 --> 01:58:28,440
separate document for now and then we'll

3043
01:58:28,440 --> 01:58:30,179
we'll see if that gets merged into

3044
01:58:30,179 --> 01:58:32,580
whatever whatever this turns out it

3045
01:58:32,580 --> 01:58:33,900
turns into

3046
01:58:33,900 --> 01:58:35,580
all right

3047
01:58:35,580 --> 01:58:38,520
and that's it we're gonna try we'll

3048
01:58:38,520 --> 01:58:40,380
certainly reschedule a meeting for

3049
01:58:40,380 --> 01:58:41,460
London

3050
01:58:41,460 --> 01:58:43,440
and uh

3051
01:58:43,440 --> 01:58:45,420
we'll see what happens then thank you

3052
01:58:45,420 --> 01:58:46,860
very much for turning up and thanks for

3053
01:58:46,860 --> 01:58:50,719
a lot of energetic discussion

3054
01:59:14,639 --> 01:59:15,900
and that's whether this is a viable

3055
01:59:15,900 --> 01:59:17,520
solution to the problem you've proposed

3056
01:59:17,520 --> 01:59:20,719
obviously it is

3057
01:59:30,659 --> 01:59:33,440
again

3058
01:59:34,080 --> 01:59:35,520
are there other solutions to this

3059
01:59:35,520 --> 01:59:38,520
problem yes of course right will this

3060
01:59:38,520 --> 01:59:41,119
solution work

3061
01:59:42,000 --> 01:59:44,460
people mostly employable will work you

3062
01:59:44,460 --> 01:59:46,580
know

