1
00:00:09,760 --> 00:00:12,760
now

2
00:00:35,280 --> 00:00:38,280
oh

3
00:00:51,039 --> 00:00:54,039
um

4
00:01:11,680 --> 00:01:14,159
so welcome everyone to the

5
00:01:14,159 --> 00:01:17,040
ietf 114 meeting of the quick working

6
00:01:17,040 --> 00:01:18,799
group if that's not where you expect to

7
00:01:18,799 --> 00:01:21,840
be either physically or digitally then

8
00:01:21,840 --> 00:01:23,439
i would uh

9
00:01:23,439 --> 00:01:24,960
hurry on over to where you're supposed

10
00:01:24,960 --> 00:01:27,839
to be

11
00:01:30,079 --> 00:01:32,560
so some uh things you know it's thursday

12
00:01:32,560 --> 00:01:34,640
now so everyone's probably used to this

13
00:01:34,640 --> 00:01:35,520
but

14
00:01:35,520 --> 00:01:38,240
i remember the importance of the ietf

15
00:01:38,240 --> 00:01:40,000
note well

16
00:01:40,000 --> 00:01:42,479
this is a copy of it i'm sure you've

17
00:01:42,479 --> 00:01:44,399
seen it if you need

18
00:01:44,399 --> 00:01:46,320
to find references to it it is very easy

19
00:01:46,320 --> 00:01:49,040
to find both on the ituf website but

20
00:01:49,040 --> 00:01:50,079
also

21
00:01:50,079 --> 00:01:52,479
googling anything related to itif note

22
00:01:52,479 --> 00:01:55,840
well it's a fairly unique name

23
00:01:57,360 --> 00:01:58,960
uh so for

24
00:01:58,960 --> 00:02:01,759
some itf meeting tips um in-person

25
00:02:01,759 --> 00:02:04,479
participants uh you probably used this

26
00:02:04,479 --> 00:02:07,119
by now but remember to use meat echo

27
00:02:07,119 --> 00:02:10,080
light when you were in the room this is

28
00:02:10,080 --> 00:02:11,280
useful for

29
00:02:11,280 --> 00:02:13,760
us chairs to keep track of the

30
00:02:13,760 --> 00:02:14,879
cue

31
00:02:14,879 --> 00:02:17,440
with both remote and in-person

32
00:02:17,440 --> 00:02:20,160
participants

33
00:02:20,640 --> 00:02:23,520
and also we want to stress that those

34
00:02:23,520 --> 00:02:25,040
there in person should be wearing a

35
00:02:25,040 --> 00:02:26,400
compliant

36
00:02:26,400 --> 00:02:28,239
mask at all times

37
00:02:28,239 --> 00:02:30,800
there are n95 masks available at

38
00:02:30,800 --> 00:02:33,599
registration uh please remember to keep

39
00:02:33,599 --> 00:02:36,400
your mask on

40
00:02:36,400 --> 00:02:38,640
and remote participants i mean the

41
00:02:38,640 --> 00:02:40,640
normal applies for making sure your

42
00:02:40,640 --> 00:02:43,040
audio and video are off unless you're

43
00:02:43,040 --> 00:02:45,200
you know presenting and

44
00:02:45,200 --> 00:02:46,640
we do recommend

45
00:02:46,640 --> 00:02:49,519
using a headset and or checking

46
00:02:49,519 --> 00:02:51,120
making sure your levels are good on your

47
00:02:51,120 --> 00:02:53,440
mics

48
00:02:54,239 --> 00:02:56,000
so in minnesota

49
00:02:56,000 --> 00:02:57,519
we have our

50
00:02:57,519 --> 00:02:59,760
tireless volunteer and

51
00:02:59,760 --> 00:03:01,120
robin marks

52
00:03:01,120 --> 00:03:02,080
who is

53
00:03:02,080 --> 00:03:04,959
who is uh volunteered to take notes and

54
00:03:04,959 --> 00:03:07,040
we thank robin yet again

55
00:03:07,040 --> 00:03:08,000
um

56
00:03:08,000 --> 00:03:10,159
the blue sheets this is again being

57
00:03:10,159 --> 00:03:11,760
handled through mid echo remote

58
00:03:11,760 --> 00:03:13,360
participants doesn't have to do anything

59
00:03:13,360 --> 00:03:15,920
uh those there again please use media

60
00:03:15,920 --> 00:03:17,760
collite

61
00:03:17,760 --> 00:03:19,680
for chat um

62
00:03:19,680 --> 00:03:23,120
we are of course using mudeko and zulip

63
00:03:23,120 --> 00:03:24,080
so

64
00:03:24,080 --> 00:03:25,519
um

65
00:03:25,519 --> 00:03:26,400
and

66
00:03:26,400 --> 00:03:28,000
for the

67
00:03:28,000 --> 00:03:31,760
cue the chairs despite our

68
00:03:31,760 --> 00:03:34,480
and arguably larger than life presence

69
00:03:34,480 --> 00:03:36,640
we will be running the queue with the

70
00:03:36,640 --> 00:03:38,560
assistance of zahed who is

71
00:03:38,560 --> 00:03:40,480
you can see up there in person

72
00:03:40,480 --> 00:03:42,000
thank you zod

73
00:03:42,000 --> 00:03:45,040
uh matt just to jump in quickly there

74
00:03:45,040 --> 00:03:47,040
sorry uh we did have brian volunteered

75
00:03:47,040 --> 00:03:49,120
to take notes as well that's great the

76
00:03:49,120 --> 00:03:50,959
more the merrier um if somebody in the

77
00:03:50,959 --> 00:03:53,439
room would just like to assist the

78
00:03:53,439 --> 00:03:55,360
remote notetakers that would be greatly

79
00:03:55,360 --> 00:03:57,760
appreciated um so do

80
00:03:57,760 --> 00:04:00,000
dive into the notes and contribute where

81
00:04:00,000 --> 00:04:02,159
possible um i don't think we had anyone

82
00:04:02,159 --> 00:04:04,560
volunteer for javascribe though

83
00:04:04,560 --> 00:04:05,599
um

84
00:04:05,599 --> 00:04:08,239
would someone like

85
00:04:08,239 --> 00:04:09,599
like that job

86
00:04:09,599 --> 00:04:12,400
um just in case we need to

87
00:04:12,400 --> 00:04:14,239
augment anything to the bike one of us

88
00:04:14,239 --> 00:04:16,560
could probably do it too but

89
00:04:16,560 --> 00:04:19,358
um shall i do that

90
00:04:19,358 --> 00:04:21,440
jonathan that would be uh very helpful

91
00:04:21,440 --> 00:04:22,720
thank you

92
00:04:22,720 --> 00:04:23,919
all right

93
00:04:23,919 --> 00:04:25,600
thank you

94
00:04:25,600 --> 00:04:27,440
thank you all who are helping us run

95
00:04:27,440 --> 00:04:29,759
this meeting

96
00:04:29,759 --> 00:04:32,880
all right so agenda which can be bashed

97
00:04:32,880 --> 00:04:35,040
uh so we have chair updates as usual

98
00:04:35,040 --> 00:04:37,040
which you'll have to suffer through and

99
00:04:37,040 --> 00:04:39,759
then we have three working group items

100
00:04:39,759 --> 00:04:41,680
the first and longest is multipath

101
00:04:41,680 --> 00:04:43,199
followed by the acknowledgement

102
00:04:43,199 --> 00:04:47,280
frequency work and then quick lb

103
00:04:47,280 --> 00:04:49,840
after that we have other items

104
00:04:49,840 --> 00:04:52,479
uh including quick time stamps multicast

105
00:04:52,479 --> 00:04:54,320
quick and uh

106
00:04:54,320 --> 00:04:55,759
and talking about quick announcement

107
00:04:55,759 --> 00:04:57,440
tooling martin would you like to say

108
00:04:57,440 --> 00:04:58,800
something

109
00:04:58,800 --> 00:05:01,600
yes uh martin duke google um kind of an

110
00:05:01,600 --> 00:05:03,919
agenda bash but like rather than

111
00:05:03,919 --> 00:05:05,520
actually introduce another presentation

112
00:05:05,520 --> 00:05:08,000
i would just like to briefly say that um

113
00:05:08,000 --> 00:05:09,520
uh i think most people are aware that

114
00:05:09,520 --> 00:05:12,479
lucas and i have a draft to put quick

115
00:05:12,479 --> 00:05:14,880
versions in alt service and serve dns

116
00:05:14,880 --> 00:05:17,440
service b records as we just as we

117
00:05:17,440 --> 00:05:20,400
dissociated alpn from quick version

118
00:05:20,400 --> 00:05:23,120
um in http bis today they are likely to

119
00:05:23,120 --> 00:05:25,520
like dramatically strip down alt-service

120
00:05:25,520 --> 00:05:28,160
and not have parameters and become

121
00:05:28,160 --> 00:05:29,840
service b would be the

122
00:05:29,840 --> 00:05:31,440
like transport capability discovery

123
00:05:31,440 --> 00:05:33,680
mechanism the upshot of that for this

124
00:05:33,680 --> 00:05:35,919
working group is that we will likely

125
00:05:35,919 --> 00:05:38,160
accordingly strip down our draft to just

126
00:05:38,160 --> 00:05:39,199
service b

127
00:05:39,199 --> 00:05:41,520
and the place where service b

128
00:05:41,520 --> 00:05:43,600
stuff lives is in the protocol working

129
00:05:43,600 --> 00:05:45,280
group where it applies which will likely

130
00:05:45,280 --> 00:05:47,680
be bringing this draft too quick

131
00:05:47,680 --> 00:05:49,280
sometime between sometime in the next

132
00:05:49,280 --> 00:05:51,600
month or two so look for that and we'll

133
00:05:51,600 --> 00:05:53,440
probably call for adoption

134
00:05:53,440 --> 00:05:55,039
uh relatively early

135
00:05:55,039 --> 00:05:59,360
since it's a simple mechanism thanks

136
00:06:00,479 --> 00:06:02,080
thank you for that martin

137
00:06:02,080 --> 00:06:03,520
um

138
00:06:03,520 --> 00:06:06,160
is there anyone else who would like to

139
00:06:06,160 --> 00:06:08,960
agenda bash or otherwise

140
00:06:08,960 --> 00:06:12,318
have a note of order here

141
00:06:12,479 --> 00:06:16,960
and if not i will move on to

142
00:06:16,960 --> 00:06:19,680
oh miriam

143
00:06:22,160 --> 00:06:24,720
okay mary is not ready to go okay

144
00:06:24,720 --> 00:06:27,440
uh update since last meeting uh

145
00:06:27,440 --> 00:06:29,600
uh as probably everyone hopefully

146
00:06:29,600 --> 00:06:31,600
noticed and if you didn't i have great

147
00:06:31,600 --> 00:06:35,199
news for you which is that http 3

148
00:06:35,199 --> 00:06:38,240
became an rfc at long last so the and of

149
00:06:38,240 --> 00:06:40,479
course another document which is q-pac

150
00:06:40,479 --> 00:06:44,880
related of course is uh yes

151
00:06:45,600 --> 00:06:47,759
this is obviously a big milestone they

152
00:06:47,759 --> 00:06:50,479
lagged considerably behind

153
00:06:50,479 --> 00:06:52,720
the other quick documents for reasons

154
00:06:52,720 --> 00:06:55,599
that are not really worth going into but

155
00:06:55,599 --> 00:06:57,840
we no longer have those on our plate and

156
00:06:57,840 --> 00:07:00,080
they are rfc's where

157
00:07:00,080 --> 00:07:02,639
they can live in perpetuity

158
00:07:02,639 --> 00:07:05,440
so and then other updates the quick

159
00:07:05,440 --> 00:07:07,759
grease bit which is a very simple uh a

160
00:07:07,759 --> 00:07:10,000
relatively simple document but important

161
00:07:10,000 --> 00:07:13,280
one is currently in auth 48

162
00:07:13,280 --> 00:07:15,360
and version negotiation and v2 which are

163
00:07:15,360 --> 00:07:17,680
sort of proceeding together as as was

164
00:07:17,680 --> 00:07:18,639
agreed

165
00:07:18,639 --> 00:07:22,560
are currently under ad evaluation

166
00:07:23,280 --> 00:07:25,360
so other things we had issued an

167
00:07:25,360 --> 00:07:28,400
adoption call and it completed for the

168
00:07:28,400 --> 00:07:31,199
quick careful resume uh this got some

169
00:07:31,199 --> 00:07:33,919
feedback that in about its potential

170
00:07:33,919 --> 00:07:35,840
suitability for other

171
00:07:35,840 --> 00:07:38,319
potential working groups specifically

172
00:07:38,319 --> 00:07:41,199
the discussions around uh

173
00:07:41,199 --> 00:07:42,800
congestion control's

174
00:07:42,800 --> 00:07:44,639
life at the itf so

175
00:07:44,639 --> 00:07:45,840
the chairs are going to take this under

176
00:07:45,840 --> 00:07:47,599
consideration

177
00:07:47,599 --> 00:07:50,319
uh qlog is not presenting today um

178
00:07:50,319 --> 00:07:52,879
and this is not due to a lack of

179
00:07:52,879 --> 00:07:55,360
progress but they are so

180
00:07:55,360 --> 00:07:59,520
and expect a new draft for uh before 115

181
00:07:59,520 --> 00:08:01,840
and updates to be on the list

182
00:08:01,840 --> 00:08:04,400
we also like to call out that l4s which

183
00:08:04,400 --> 00:08:06,960
you may have heard about at this itf

184
00:08:06,960 --> 00:08:08,479
work was done during the hackathon

185
00:08:08,479 --> 00:08:11,120
including interop

186
00:08:11,120 --> 00:08:12,800
that with quick stacks which is very

187
00:08:12,800 --> 00:08:15,199
exciting um because quick is you know

188
00:08:15,199 --> 00:08:19,680
participating and working with l4s um

189
00:08:19,680 --> 00:08:22,639
with the l4s work

190
00:08:22,639 --> 00:08:24,960
and i think that is it lucas do you have

191
00:08:24,960 --> 00:08:26,960
anything else that you would like to add

192
00:08:26,960 --> 00:08:28,160
to our

193
00:08:28,160 --> 00:08:30,639
boring chair updates

194
00:08:30,639 --> 00:08:31,520
uh

195
00:08:31,520 --> 00:08:33,679
nothing major just that you know matt

196
00:08:33,679 --> 00:08:35,919
and i were both really excited to be

197
00:08:35,919 --> 00:08:38,080
there in person this time around um to

198
00:08:38,080 --> 00:08:39,360
actually meet each other for the first

199
00:08:39,360 --> 00:08:41,360
time in however many long and meet all

200
00:08:41,360 --> 00:08:43,599
the participants as well um

201
00:08:43,599 --> 00:08:46,000
unfortunately we can't be there

202
00:08:46,000 --> 00:08:48,480
for various reasons uh so thank you very

203
00:08:48,480 --> 00:08:50,399
much for your patience and support to

204
00:08:50,399 --> 00:08:52,560
people who have been helping behind the

205
00:08:52,560 --> 00:08:54,720
scenes to make sure this session can run

206
00:08:54,720 --> 00:08:57,200
smoothly

207
00:08:59,760 --> 00:09:03,360
and i agree with that of course and

208
00:09:03,360 --> 00:09:05,600
now we will both stop talking and we

209
00:09:05,600 --> 00:09:07,519
will

210
00:09:07,519 --> 00:09:10,959
allow muria to take over as the first

211
00:09:10,959 --> 00:09:13,959
presenter

212
00:09:27,920 --> 00:09:30,320
and my meat echo is totally

213
00:09:30,320 --> 00:09:32,560
not allowing me to do anything so that's

214
00:09:32,560 --> 00:09:35,120
interesting

215
00:09:35,120 --> 00:09:38,880
okay i got i got it to work

216
00:09:43,600 --> 00:09:45,920
try it again

217
00:09:45,920 --> 00:09:48,319
ah no

218
00:09:49,120 --> 00:09:51,839
there we go

219
00:09:52,880 --> 00:09:54,320
okay hello everybody my name is mia

220
00:09:54,320 --> 00:09:55,600
coolerin i'm

221
00:09:55,600 --> 00:09:58,800
one of the editors of the um multi-pass

222
00:09:58,800 --> 00:10:00,640
extension for quick but probably the

223
00:10:00,640 --> 00:10:02,560
least important editor but i'm the only

224
00:10:02,560 --> 00:10:04,399
one here unfortunately

225
00:10:04,399 --> 00:10:05,360
um

226
00:10:05,360 --> 00:10:06,160
yeah

227
00:10:06,160 --> 00:10:08,240
so we published a new version and this

228
00:10:08,240 --> 00:10:10,160
was actually quite a big update based on

229
00:10:10,160 --> 00:10:11,920
the discussion we had last time the

230
00:10:11,920 --> 00:10:14,560
biggest change is that we merged the pr

231
00:10:14,560 --> 00:10:16,720
which which has the what we call unified

232
00:10:16,720 --> 00:10:19,920
proposal we could discuss this last time

233
00:10:19,920 --> 00:10:21,839
and i have a slide later on this and

234
00:10:21,839 --> 00:10:23,839
there were some other a few changes that

235
00:10:23,839 --> 00:10:26,240
i want to update you on one is that also

236
00:10:26,240 --> 00:10:28,160
an issue we discussed last time that we

237
00:10:28,160 --> 00:10:30,800
now decided to have some mechanism

238
00:10:30,800 --> 00:10:32,640
to also signal that there might be or

239
00:10:32,640 --> 00:10:34,079
that you want to use one of the pass

240
00:10:34,079 --> 00:10:36,160
only for standby

241
00:10:36,160 --> 00:10:38,640
motors and we have a new frame for that

242
00:10:38,640 --> 00:10:41,680
there's um some clarifications about um

243
00:10:41,680 --> 00:10:44,079
pass closure or like denying a path

244
00:10:44,079 --> 00:10:46,640
which is also actually kind of new

245
00:10:46,640 --> 00:10:48,480
protocol work so i will go to that and

246
00:10:48,480 --> 00:10:49,279
then

247
00:10:49,279 --> 00:10:51,760
more guidance about x scheduling and

248
00:10:51,760 --> 00:10:53,600
delay calculations but that's also kind

249
00:10:53,600 --> 00:10:56,160
of still work in progress because that's

250
00:10:56,160 --> 00:10:59,880
some of the hard parts

251
00:11:04,000 --> 00:11:06,640
yeah we didn't solve

252
00:11:06,640 --> 00:11:08,399
or we didn't close all the open issues

253
00:11:08,399 --> 00:11:10,160
we still have three of the open issues

254
00:11:10,160 --> 00:11:12,160
that we discussed last time

255
00:11:12,160 --> 00:11:14,800
time and so these are uh need a little

256
00:11:14,800 --> 00:11:16,560
bit more work especially the first one

257
00:11:16,560 --> 00:11:18,720
um it's on my plate to look at what we

258
00:11:18,720 --> 00:11:20,560
actually decided uh or like why we

259
00:11:20,560 --> 00:11:22,880
didn't allow servers um to migrate and

260
00:11:22,880 --> 00:11:24,399
if that's still important for multiple

261
00:11:24,399 --> 00:11:26,000
so i will do some research and come back

262
00:11:26,000 --> 00:11:28,959
to that just didn't do it now

263
00:11:28,959 --> 00:11:30,959
and the other ones are also looking for

264
00:11:30,959 --> 00:11:32,880
a more input about like the actual need

265
00:11:32,880 --> 00:11:34,880
for these things and so for all of these

266
00:11:34,880 --> 00:11:36,560
three open issues here that we discussed

267
00:11:36,560 --> 00:11:39,279
last time already we have to figure out

268
00:11:39,279 --> 00:11:40,720
if this is something we want to do at

269
00:11:40,720 --> 00:11:42,720
all if this is something we want to do

270
00:11:42,720 --> 00:11:44,800
in the space draft or if this is an

271
00:11:44,800 --> 00:11:46,640
extension in the future and that's

272
00:11:46,640 --> 00:11:48,800
ongoing that discussion

273
00:11:48,800 --> 00:11:51,600
we have also a few new issues

274
00:11:51,600 --> 00:11:53,040
but i have to say these are a little bit

275
00:11:53,040 --> 00:11:55,040
more on the editorial side i think so

276
00:11:55,040 --> 00:11:57,120
like not fully but as i just said there

277
00:11:57,120 --> 00:11:58,959
is more work needed about explaining how

278
00:11:58,959 --> 00:12:01,120
to calculate act delay correctly and

279
00:12:01,120 --> 00:12:03,360
maybe some of this is kind of um

280
00:12:03,360 --> 00:12:05,600
normative but um it's not clearly so

281
00:12:05,600 --> 00:12:07,200
that's ongoing

282
00:12:07,200 --> 00:12:11,360
that's the two new issues listed here

283
00:12:11,360 --> 00:12:13,920
yes so especially you know what's i

284
00:12:13,920 --> 00:12:16,240
wanted to explain the problem um quickly

285
00:12:16,240 --> 00:12:18,240
here but not sure if we will solve it

286
00:12:18,240 --> 00:12:20,480
completely or um finalize the discussion

287
00:12:20,480 --> 00:12:21,279
here

288
00:12:21,279 --> 00:12:23,600
so um the problem we have is

289
00:12:23,600 --> 00:12:24,560
if you

290
00:12:24,560 --> 00:12:26,079
and there's still a part about using

291
00:12:26,079 --> 00:12:28,560
single packet number space so if you use

292
00:12:28,560 --> 00:12:30,639
single packet number space then things

293
00:12:30,639 --> 00:12:32,959
like calculating your round trip time

294
00:12:32,959 --> 00:12:34,639
and delay correctly what you need for

295
00:12:34,639 --> 00:12:36,720
congestion control is actually not that

296
00:12:36,720 --> 00:12:39,120
easy and this is just giving an example

297
00:12:39,120 --> 00:12:41,839
here so you assume you have two passes

298
00:12:41,839 --> 00:12:44,160
and pass one is quicker or faster has

299
00:12:44,160 --> 00:12:47,279
less delay than past two and you decide

300
00:12:47,279 --> 00:12:48,880
somehow on your packet scheduling you

301
00:12:48,880 --> 00:12:51,760
send packet one to ten on pass one

302
00:12:51,760 --> 00:12:57,040
11 to 20 on past two and then 21 to 30

303
00:12:57,040 --> 00:12:58,959
on past one again

304
00:12:58,959 --> 00:13:01,040
um so what can happen is that you

305
00:13:01,040 --> 00:13:02,720
receive all the packets on pass one

306
00:13:02,720 --> 00:13:05,440
because that's a faster pass

307
00:13:05,440 --> 00:13:07,519
but then because depending on like how

308
00:13:07,519 --> 00:13:10,480
you you decide about your egg strategy

309
00:13:10,480 --> 00:13:12,560
you actually trigger an egg when you

310
00:13:12,560 --> 00:13:13,600
arrive

311
00:13:13,600 --> 00:13:15,920
when packet 20 arrives so that's the

312
00:13:15,920 --> 00:13:17,760
packet that triggers the egg but of

313
00:13:17,760 --> 00:13:20,000
course that egg will will acknowledge

314
00:13:20,000 --> 00:13:22,800
all of the packets so 1 to 30.

315
00:13:22,800 --> 00:13:24,639
and when you receive that egg actually

316
00:13:24,639 --> 00:13:26,000
you don't know

317
00:13:26,000 --> 00:13:28,959
um that packet 20 triggered the egg so

318
00:13:28,959 --> 00:13:31,360
you might not know how to calculate the

319
00:13:31,360 --> 00:13:32,959
round trip time or the delay of each of

320
00:13:32,959 --> 00:13:34,639
these passes correctly

321
00:13:34,639 --> 00:13:37,760
because packet 20 was sent on path two

322
00:13:37,760 --> 00:13:41,279
but like uh 2030 was sent on pass one

323
00:13:41,279 --> 00:13:43,279
but the delay you basically calculate

324
00:13:43,279 --> 00:13:44,880
based on the egg is the delay of past

325
00:13:44,880 --> 00:13:46,800
two so that's like usually what's

326
00:13:46,800 --> 00:13:48,320
happening is like you get the delay if

327
00:13:48,320 --> 00:13:50,000
you if you just do like whatever you do

328
00:13:50,000 --> 00:13:51,519
with what would do today with eye

329
00:13:51,519 --> 00:13:54,160
calculation you get the delay of the of

330
00:13:54,160 --> 00:13:56,079
the longest path and not the delay of

331
00:13:56,079 --> 00:13:57,279
the shorter pass so you have to be

332
00:13:57,279 --> 00:13:59,440
smarter about this you have to either

333
00:13:59,440 --> 00:14:00,880
you know add some more information to

334
00:14:00,880 --> 00:14:03,040
the to the egg about saying like what

335
00:14:03,040 --> 00:14:04,959
which packet does this delay information

336
00:14:04,959 --> 00:14:07,279
belong to or you have to split up your

337
00:14:07,279 --> 00:14:09,199
ex in a smarter way or you have to

338
00:14:09,199 --> 00:14:10,800
schedule a packet in a smarter way or

339
00:14:10,800 --> 00:14:11,920
whatever

340
00:14:11,920 --> 00:14:13,279
and that's a discussion we're still

341
00:14:13,279 --> 00:14:16,279
having

342
00:14:20,240 --> 00:14:21,279
and

343
00:14:21,279 --> 00:14:23,040
my phone goes to sleep and now i cannot

344
00:14:23,040 --> 00:14:25,279
no no i can control it again

345
00:14:25,279 --> 00:14:26,560
okay

346
00:14:26,560 --> 00:14:28,000
um

347
00:14:28,000 --> 00:14:29,360
yeah so that was just to explain the

348
00:14:29,360 --> 00:14:30,720
problem and i think we should have the

349
00:14:30,720 --> 00:14:32,880
discussion actually on on github because

350
00:14:32,880 --> 00:14:34,720
it's not like

351
00:14:34,720 --> 00:14:36,480
it's not like we need to change

352
00:14:36,480 --> 00:14:37,760
something but i think we have to be

353
00:14:37,760 --> 00:14:40,320
clear about what the best way to do

354
00:14:40,320 --> 00:14:42,240
and then a quick um review about what

355
00:14:42,240 --> 00:14:43,839
we've merged already based on this

356
00:14:43,839 --> 00:14:45,760
question from last time so this is in

357
00:14:45,760 --> 00:14:47,920
the new um past status frame

358
00:14:47,920 --> 00:14:50,240
the past status frame has like this past

359
00:14:50,240 --> 00:14:51,680
status information which is the

360
00:14:51,680 --> 00:14:53,839
important part and what we specify is

361
00:14:53,839 --> 00:14:55,600
really you have two two choices here

362
00:14:55,600 --> 00:14:57,440
standby or available

363
00:14:57,440 --> 00:14:59,120
and what it does it just really gives a

364
00:14:59,120 --> 00:15:01,120
recommendation for the other site what

365
00:15:01,120 --> 00:15:03,040
to send on the pass it doesn't tell

366
00:15:03,040 --> 00:15:04,399
anything about what you're planning to

367
00:15:04,399 --> 00:15:06,320
do on your site right but you give some

368
00:15:06,320 --> 00:15:08,000
hints to the other side that it's

369
00:15:08,000 --> 00:15:10,000
preferred from your point of view to use

370
00:15:10,000 --> 00:15:12,240
one or the other path or to not use it

371
00:15:12,240 --> 00:15:14,000
and that's it and effectively it's also

372
00:15:14,000 --> 00:15:15,199
just a recommendation of course if

373
00:15:15,199 --> 00:15:16,959
there's a situation where you can use

374
00:15:16,959 --> 00:15:18,240
one of them you have to make a local

375
00:15:18,240 --> 00:15:20,720
decision

376
00:15:22,240 --> 00:15:24,880
okay i go on

377
00:15:24,880 --> 00:15:27,519
so the other thing we merged which is um

378
00:15:27,519 --> 00:15:30,000
a normative thing here is that we um

379
00:15:30,000 --> 00:15:31,600
other than for

380
00:15:31,600 --> 00:15:34,560
rfc 9000 where basically if you have a

381
00:15:34,560 --> 00:15:36,240
migration event and you don't want to

382
00:15:36,240 --> 00:15:38,320
have the new pass you just don't react

383
00:15:38,320 --> 00:15:41,120
we actually give an option here to um

384
00:15:41,120 --> 00:15:43,440
actively deny a new path by using the

385
00:15:43,440 --> 00:15:45,279
pass abandoned frame on the existing

386
00:15:45,279 --> 00:15:46,560
path

387
00:15:46,560 --> 00:15:48,720
um so this is just because we have to

388
00:15:48,720 --> 00:15:50,480
pass abandon frame we can make use of

389
00:15:50,480 --> 00:15:52,000
that and that can just like avoid some

390
00:15:52,000 --> 00:15:53,759
delay so it's like a little change but

391
00:15:53,759 --> 00:15:55,199
it can happen some situations to

392
00:15:55,199 --> 00:15:57,599
optimize

393
00:16:02,560 --> 00:16:03,680
i go on

394
00:16:03,680 --> 00:16:05,360
we can come back to this

395
00:16:05,360 --> 00:16:07,279
okay and so this was the biggest merge

396
00:16:07,279 --> 00:16:09,040
we have in this this site is mostly

397
00:16:09,040 --> 00:16:12,000
recap slightly um modified recap but

398
00:16:12,000 --> 00:16:14,079
mostly recap from last time

399
00:16:14,079 --> 00:16:15,920
so um the question the big question we

400
00:16:15,920 --> 00:16:18,160
discussed last time is like using single

401
00:16:18,160 --> 00:16:20,480
not multiple packet number spaces and

402
00:16:20,480 --> 00:16:21,519
like

403
00:16:21,519 --> 00:16:23,600
um there are pros and cons on both sides

404
00:16:23,600 --> 00:16:25,120
right so the one of the biggest

405
00:16:25,120 --> 00:16:26,720
difference was like single packet number

406
00:16:26,720 --> 00:16:28,160
space does support zero length

407
00:16:28,160 --> 00:16:29,680
connection id and multi packet number

408
00:16:29,680 --> 00:16:31,279
space does not

409
00:16:31,279 --> 00:16:32,560
and that's the most of the discussion we

410
00:16:32,560 --> 00:16:34,880
had last time from a code complexity

411
00:16:34,880 --> 00:16:36,320
point of view there are kind of pros and

412
00:16:36,320 --> 00:16:38,240
cons on both sides like on the first

413
00:16:38,240 --> 00:16:39,759
look like single packet number space

414
00:16:39,759 --> 00:16:41,279
seems to be much less code and much

415
00:16:41,279 --> 00:16:43,440
easier for that point because you don't

416
00:16:43,440 --> 00:16:44,720
have to introduce a new packet number

417
00:16:44,720 --> 00:16:45,680
space

418
00:16:45,680 --> 00:16:47,279
but then if you look at this like delay

419
00:16:47,279 --> 00:16:49,120
calculation issues how to get condensed

420
00:16:49,120 --> 00:16:50,959
control right making sure you schedule

421
00:16:50,959 --> 00:16:52,639
the packet in a smart way that your

422
00:16:52,639 --> 00:16:54,720
excise doesn't grow and whatever it gets

423
00:16:54,720 --> 00:16:56,160
very complicated

424
00:16:56,160 --> 00:17:00,079
and it gets like um it's not like uh uh

425
00:17:00,079 --> 00:17:01,759
there is a normative way to handle it is

426
00:17:01,759 --> 00:17:03,360
like depends on the implication how to

427
00:17:03,360 --> 00:17:04,799
do this right so it's easy to get it

428
00:17:04,799 --> 00:17:06,400
wrong effectively

429
00:17:06,400 --> 00:17:07,919
so i think there was like a lot of

430
00:17:07,919 --> 00:17:09,599
support from

431
00:17:09,599 --> 00:17:11,119
from a complexity point of view to

432
00:17:11,119 --> 00:17:12,720
actually go to multiple packet number

433
00:17:12,720 --> 00:17:14,720
spaces because that makes the spec just

434
00:17:14,720 --> 00:17:16,480
more clear

435
00:17:16,480 --> 00:17:17,919
there is still a discussion about

436
00:17:17,919 --> 00:17:20,079
hardware offload because there's also um

437
00:17:20,079 --> 00:17:21,919
implications here so with multiple

438
00:17:21,919 --> 00:17:23,439
packet number spaces you actually have

439
00:17:23,439 --> 00:17:24,720
to change

440
00:17:24,720 --> 00:17:27,439
um the the crypto part how you decrypt

441
00:17:27,439 --> 00:17:28,880
the packet number because you have to

442
00:17:28,880 --> 00:17:31,039
consider the congestion the connection

443
00:17:31,039 --> 00:17:33,600
id but on the other hand if you have

444
00:17:33,600 --> 00:17:35,440
modern packet number spaces it's

445
00:17:35,440 --> 00:17:37,760
actually um easier for your hardware

446
00:17:37,760 --> 00:17:40,080
offload because then you know exactly

447
00:17:40,080 --> 00:17:42,000
you don't have to decrypt like

448
00:17:42,000 --> 00:17:43,520
uh you don't have to guess the packet

449
00:17:43,520 --> 00:17:45,039
number because you can much better

450
00:17:45,039 --> 00:17:46,480
figure out where you are and you don't

451
00:17:46,480 --> 00:17:47,919
have a lot of out of order packets

452
00:17:47,919 --> 00:17:49,440
effectively in this kind of thing so

453
00:17:49,440 --> 00:17:52,799
there are also pros and cons here

454
00:17:52,799 --> 00:17:54,960
so

455
00:17:56,960 --> 00:17:57,840
um

456
00:17:57,840 --> 00:18:00,080
so this is very much nearly the same

457
00:18:00,080 --> 00:18:01,679
slide as i presented last time and we

458
00:18:01,679 --> 00:18:03,679
just merged this in now which means

459
00:18:03,679 --> 00:18:05,840
basically packet multiple packet number

460
00:18:05,840 --> 00:18:08,000
spaces is now mandatory

461
00:18:08,000 --> 00:18:09,440
so if you um

462
00:18:09,440 --> 00:18:11,039
if you negotiate multiples the

463
00:18:11,039 --> 00:18:12,720
multi-pass extension you have to support

464
00:18:12,720 --> 00:18:14,480
multiple player number spaces

465
00:18:14,480 --> 00:18:16,960
but it's optional to use zero length id

466
00:18:16,960 --> 00:18:18,960
connection id if you want to use zero

467
00:18:18,960 --> 00:18:20,799
length connection id you also have to

468
00:18:20,799 --> 00:18:22,640
implement all this other stuff

469
00:18:22,640 --> 00:18:24,400
and then it gets complicated and we put

470
00:18:24,400 --> 00:18:26,880
a lot of guidance and and discussion in

471
00:18:26,880 --> 00:18:28,799
the document about what how to do there

472
00:18:28,799 --> 00:18:30,320
and how to get your delay calculation

473
00:18:30,320 --> 00:18:32,000
your easy hand easy and handling your

474
00:18:32,000 --> 00:18:34,080
congestion control right but it's kind

475
00:18:34,080 --> 00:18:37,120
of optional if you don't support

476
00:18:37,120 --> 00:18:38,640
a

477
00:18:38,640 --> 00:18:39,760
[Music]

478
00:18:39,760 --> 00:18:42,320
single packet number space um and the

479
00:18:42,320 --> 00:18:44,480
other end requires you to use zero

480
00:18:44,480 --> 00:18:46,240
connection id basically you can only use

481
00:18:46,240 --> 00:18:47,520
one path

482
00:18:47,520 --> 00:18:49,280
even if you have negotiated multiples

483
00:18:49,280 --> 00:18:51,120
but like there's no obligation to

484
00:18:51,120 --> 00:18:54,000
implement it at least

485
00:18:54,160 --> 00:18:55,919
it took me that entire in sweat google

486
00:18:55,919 --> 00:18:57,360
it took me that entire time to get into

487
00:18:57,360 --> 00:19:00,080
the queue and get the pages load um

488
00:19:00,080 --> 00:19:01,440
can you go back to the last slide of it

489
00:19:01,440 --> 00:19:02,799
just curious question about hardware

490
00:19:02,799 --> 00:19:05,039
offload um

491
00:19:05,039 --> 00:19:07,280
is there available hardware offload that

492
00:19:07,280 --> 00:19:08,960
is

493
00:19:08,960 --> 00:19:11,039
uh for quick today because i've looked

494
00:19:11,039 --> 00:19:12,320
into this and i haven't actually found

495
00:19:12,320 --> 00:19:13,440
it and

496
00:19:13,440 --> 00:19:14,480
you might be right that it makes

497
00:19:14,480 --> 00:19:16,240
hardware upload more

498
00:19:16,240 --> 00:19:17,600
complex but it really depends on what

499
00:19:17,600 --> 00:19:20,400
the hardware offload api is and so like

500
00:19:20,400 --> 00:19:21,679
i'm not personally familiar with them i

501
00:19:21,679 --> 00:19:22,880
don't know maybe

502
00:19:22,880 --> 00:19:24,559
maybe this is much more widely available

503
00:19:24,559 --> 00:19:26,240
than i think and

504
00:19:26,240 --> 00:19:28,000
or maybe you're anticipating future

505
00:19:28,000 --> 00:19:30,960
hardware offload that will exist

506
00:19:30,960 --> 00:19:33,120
so um

507
00:19:33,120 --> 00:19:35,039
okay

508
00:19:35,039 --> 00:19:37,440
so yeah we should talk more in um

509
00:19:37,440 --> 00:19:39,600
that was my issue a while ago and it is

510
00:19:39,600 --> 00:19:42,000
speculative based on um conversations

511
00:19:42,000 --> 00:19:43,840
that that i've had with hardware vendors

512
00:19:43,840 --> 00:19:47,520
in the past um the issue 25 is

513
00:19:47,520 --> 00:19:48,559
kind of

514
00:19:48,559 --> 00:19:50,320
but no there's certainly no hardware

515
00:19:50,320 --> 00:19:52,160
offload that certainly i was aware of

516
00:19:52,160 --> 00:19:53,600
when i filed this issue it was just

517
00:19:53,600 --> 00:19:55,120
concerned that by messing with the

518
00:19:55,120 --> 00:19:56,880
crypto algorithm we're going to have

519
00:19:56,880 --> 00:19:58,559
this other mode for multipath which

520
00:19:58,559 --> 00:20:00,880
might not be a very viable thing

521
00:20:00,880 --> 00:20:02,400
so the

522
00:20:02,400 --> 00:20:04,720
we so there is no hardware offload which

523
00:20:04,720 --> 00:20:06,640
is i think already deployed

524
00:20:06,640 --> 00:20:08,320
but we did some research and we had some

525
00:20:08,320 --> 00:20:10,320
work about trying like how to implement

526
00:20:10,320 --> 00:20:12,320
hardware offload and we only went for

527
00:20:12,320 --> 00:20:13,600
the multiple packet numbers based

528
00:20:13,600 --> 00:20:15,760
solution because you don't have a lot of

529
00:20:15,760 --> 00:20:17,280
packet reordering whatever which makes

530
00:20:17,280 --> 00:20:19,360
your offload engine actually easier it's

531
00:20:19,360 --> 00:20:22,080
different than what's today in rfc 9000

532
00:20:22,080 --> 00:20:23,919
but it would make it easier if we have

533
00:20:23,919 --> 00:20:25,919
multiple packet number spaces and given

534
00:20:25,919 --> 00:20:27,440
it's not deployed yet that might

535
00:20:27,440 --> 00:20:29,520
actually be um a reason to go there as

536
00:20:29,520 --> 00:20:30,240
well

537
00:20:30,240 --> 00:20:31,919
yeah i mean i i like i don't think this

538
00:20:31,919 --> 00:20:33,360
is a showstopper at this point but it's

539
00:20:33,360 --> 00:20:35,360
something you can consider and like if

540
00:20:35,360 --> 00:20:36,720
we do everything where like you need

541
00:20:36,720 --> 00:20:38,320
special hardware to do multi-path that's

542
00:20:38,320 --> 00:20:40,400
probably bad for multitask no you don't

543
00:20:40,400 --> 00:20:41,919
need special hardware to do multipass

544
00:20:41,919 --> 00:20:43,520
it's just like you have to optimize you

545
00:20:43,520 --> 00:20:44,799
have to have

546
00:20:44,799 --> 00:20:48,559
um or you can do less with rfc 9000 and

547
00:20:48,559 --> 00:20:50,480
you need more

548
00:20:50,480 --> 00:20:52,000
if you want to support multiple packet

549
00:20:52,000 --> 00:20:54,240
number spaces but it's the same logic

550
00:20:54,240 --> 00:20:55,919
it's just like an extended logic right

551
00:20:55,919 --> 00:20:56,960
it's not like you have two different

552
00:20:56,960 --> 00:21:01,880
paths to go for okay thanks

553
00:21:06,240 --> 00:21:09,679
okay so yeah we matched it

554
00:21:12,159 --> 00:21:14,240
so

555
00:21:14,240 --> 00:21:16,559
i just wanted to point out chair hat off

556
00:21:16,559 --> 00:21:18,480
on the cardboard awful

557
00:21:18,480 --> 00:21:20,720
load thing um

558
00:21:20,720 --> 00:21:22,640
no uh yeah again there's no hardware

559
00:21:22,640 --> 00:21:24,159
offload the

560
00:21:24,159 --> 00:21:26,640
hardware offload that we have been

561
00:21:26,640 --> 00:21:31,520
working on um the vendors involved uh

562
00:21:31,520 --> 00:21:34,080
would probably not like multibath anyway

563
00:21:34,080 --> 00:21:35,679
just they just they typically are not

564
00:21:35,679 --> 00:21:36,799
happy about

565
00:21:36,799 --> 00:21:38,799
the hardware doing anything related to

566
00:21:38,799 --> 00:21:40,720
quick that's complicated um they don't

567
00:21:40,720 --> 00:21:43,280
like packet numbers either so i would i

568
00:21:43,280 --> 00:21:45,039
would say that

569
00:21:45,039 --> 00:21:47,120
it probably is true that the multiple

570
00:21:47,120 --> 00:21:48,400
pack and workspace is a little bit

571
00:21:48,400 --> 00:21:51,679
easier to support well but um

572
00:21:51,679 --> 00:21:53,200
it's also going to vary depending on the

573
00:21:53,200 --> 00:21:54,720
vendor you talk to like what their

574
00:21:54,720 --> 00:21:57,280
opinions are on what is hard and for

575
00:21:57,280 --> 00:21:58,799
their hardware because

576
00:21:58,799 --> 00:22:00,480
what what's interesting about this is

577
00:22:00,480 --> 00:22:02,880
that different hardware uh can do

578
00:22:02,880 --> 00:22:04,640
different things easier than others when

579
00:22:04,640 --> 00:22:06,480
it comes to crypto offloads and

580
00:22:06,480 --> 00:22:09,280
uh quick in particular so it's it's

581
00:22:09,280 --> 00:22:11,440
probably a concern but i'm not sure that

582
00:22:11,440 --> 00:22:13,520
it's something that necessarily has to

583
00:22:13,520 --> 00:22:16,720
be designed into the protocols or taken

584
00:22:16,720 --> 00:22:19,679
as a major concern

585
00:22:19,679 --> 00:22:22,080
yeah so i mean um there is this issue in

586
00:22:22,080 --> 00:22:23,520
github and it's still open and needs

587
00:22:23,520 --> 00:22:24,960
more discussion but i don't think the

588
00:22:24,960 --> 00:22:26,720
decision is clear in which direction we

589
00:22:26,720 --> 00:22:28,640
should decide here

590
00:22:28,640 --> 00:22:30,960
christian

591
00:22:36,559 --> 00:22:38,799
yes

592
00:22:39,039 --> 00:22:40,400
regarding this

593
00:22:40,400 --> 00:22:41,360
offer

594
00:22:41,360 --> 00:22:43,600
it's really the encryption issue

595
00:22:43,600 --> 00:22:46,159
when we cannot have multiple numbers

596
00:22:46,159 --> 00:22:48,080
without injecting

597
00:22:48,080 --> 00:22:51,280
more than the packet sequence number

598
00:22:51,280 --> 00:22:52,720
in the encryption

599
00:22:52,720 --> 00:22:55,600
so that means that

600
00:22:55,600 --> 00:22:58,720
whatever offloads that has to be aware

601
00:22:58,720 --> 00:23:00,880
of not just the connection id in the

602
00:23:00,880 --> 00:23:02,400
incoming packet

603
00:23:02,400 --> 00:23:03,679
but the sequence number of that

604
00:23:03,679 --> 00:23:05,200
connection id

605
00:23:05,200 --> 00:23:07,760
so it's that's conceptually a really

606
00:23:07,760 --> 00:23:10,320
simple fix in the api but it has to be

607
00:23:10,320 --> 00:23:12,400
there this should not be

608
00:23:12,400 --> 00:23:14,080
i mean if people can actually do

609
00:23:14,080 --> 00:23:16,159
hardware offload

610
00:23:16,159 --> 00:23:17,919
and extract the sequence number and

611
00:23:17,919 --> 00:23:20,880
things like that the additional step to

612
00:23:20,880 --> 00:23:23,200
support multiple number space is not

613
00:23:23,200 --> 00:23:24,640
that high

614
00:23:24,640 --> 00:23:26,080
it's just that

615
00:23:26,080 --> 00:23:27,679
there are twos i mean you have to

616
00:23:27,679 --> 00:23:29,520
extract 42 bits

617
00:23:29,520 --> 00:23:31,039
of the

618
00:23:31,039 --> 00:23:34,080
sequence number of the connection id

619
00:23:34,080 --> 00:23:37,360
and you have to use 96 bit sequence

620
00:23:37,360 --> 00:23:40,799
number which is composed of this id

621
00:23:40,799 --> 00:23:44,640
and the 32 and the 64 bit of the packet

622
00:23:44,640 --> 00:23:47,120
so it does change api it doesn't change

623
00:23:47,120 --> 00:23:48,799
the complexity very much because you

624
00:23:48,799 --> 00:23:51,440
need the cid anyhow

625
00:23:51,440 --> 00:23:53,600
otherwise you're not able to

626
00:23:53,600 --> 00:23:56,720
find the context of the connection

627
00:23:56,720 --> 00:23:58,159
and if you can find the contents of the

628
00:23:58,159 --> 00:24:00,400
connection you can't find the keys

629
00:24:00,400 --> 00:24:02,480
so i mean the complexity should not be

630
00:24:02,480 --> 00:24:05,840
used for down there

631
00:24:06,480 --> 00:24:08,799
jana

632
00:24:12,480 --> 00:24:14,080
hi um

633
00:24:14,080 --> 00:24:15,440
so i want to

634
00:24:15,440 --> 00:24:17,840
emphasize a couple of points that just

635
00:24:17,840 --> 00:24:21,279
both matt and christine said but uh one

636
00:24:21,279 --> 00:24:22,720
of the things when thinking about

637
00:24:22,720 --> 00:24:24,799
hardware offloaders people typically use

638
00:24:24,799 --> 00:24:26,480
the pcb model

639
00:24:26,480 --> 00:24:27,840
to think about it

640
00:24:27,840 --> 00:24:29,679
and which is why sequence number seems

641
00:24:29,679 --> 00:24:31,279
like an attractive thing to consider

642
00:24:31,279 --> 00:24:33,919
handing off to the offload engine

643
00:24:33,919 --> 00:24:37,360
it's not necessarily true and in fact

644
00:24:37,360 --> 00:24:39,120
true in the quick case for a number of

645
00:24:39,120 --> 00:24:41,120
reasons one of them being that we don't

646
00:24:41,120 --> 00:24:43,360
necessarily expect sequence numbers to

647
00:24:43,360 --> 00:24:45,039
be sequential

648
00:24:45,039 --> 00:24:46,960
we want to have gaps we want to be able

649
00:24:46,960 --> 00:24:48,320
to do various things with sequence

650
00:24:48,320 --> 00:24:50,080
numbers that's in fact part of the

651
00:24:50,080 --> 00:24:52,640
protocol i would say philosophy and even

652
00:24:52,640 --> 00:24:54,320
the design that

653
00:24:54,320 --> 00:24:56,080
packet

654
00:24:56,080 --> 00:24:58,480
our packet numbers are not basically

655
00:24:58,480 --> 00:25:00,640
stream numbers uh stream id and stream

656
00:25:00,640 --> 00:25:02,799
sequence number sure that's fine but not

657
00:25:02,799 --> 00:25:03,679
at the

658
00:25:03,679 --> 00:25:05,279
packet level we don't necessarily need

659
00:25:05,279 --> 00:25:06,799
it to be sequential we don't need it to

660
00:25:06,799 --> 00:25:09,679
be uh in any particular order the sender

661
00:25:09,679 --> 00:25:11,039
ought to be able to send it in whatever

662
00:25:11,039 --> 00:25:13,919
order it cares and uh the receiver is

663
00:25:13,919 --> 00:25:16,880
able to handle it um that's important

664
00:25:16,880 --> 00:25:19,600
and so i would say that uh going forward

665
00:25:19,600 --> 00:25:22,000
again to christian's point

666
00:25:22,000 --> 00:25:24,320
as well that

667
00:25:24,320 --> 00:25:26,000
something explicit needs to be handed

668
00:25:26,000 --> 00:25:28,080
down is very likely to need to be handed

669
00:25:28,080 --> 00:25:30,960
down to the offload engine from the

670
00:25:30,960 --> 00:25:32,960
quick sender and it is not something

671
00:25:32,960 --> 00:25:35,279
that you can simply offload as a task

672
00:25:35,279 --> 00:25:37,360
to the offroad engine so i don't think

673
00:25:37,360 --> 00:25:40,640
that sequence numbers should uh play

674
00:25:40,640 --> 00:25:43,919
a role in how we decide um

675
00:25:43,919 --> 00:25:46,640
hardware operation

676
00:25:49,360 --> 00:25:53,600
multiple or single packet number spaces

677
00:25:53,919 --> 00:25:54,720
so

678
00:25:54,720 --> 00:25:56,320
the problem is you want to decrypt the

679
00:25:56,320 --> 00:25:58,320
packet number and um

680
00:25:58,320 --> 00:26:00,480
and how you decrypt the packet number

681
00:26:00,480 --> 00:26:03,679
depends on the packet number space right

682
00:26:03,679 --> 00:26:05,440
so that's the part you want to do an

683
00:26:05,440 --> 00:26:07,919
offloading

684
00:26:08,960 --> 00:26:11,440
uh martin duke google uh so uh at the

685
00:26:11,440 --> 00:26:13,919
risk of going down the hardware offload

686
00:26:13,919 --> 00:26:15,760
rabbit hole um

687
00:26:15,760 --> 00:26:17,760
uh like the encryption and decryption

688
00:26:17,760 --> 00:26:19,279
problems are quite different the

689
00:26:19,279 --> 00:26:21,120
encryption problem yes absolutely you

690
00:26:21,120 --> 00:26:22,320
just passed the packet number with the

691
00:26:22,320 --> 00:26:24,640
packet and i think it works pretty well

692
00:26:24,640 --> 00:26:26,960
on the decryption path the the hardware

693
00:26:26,960 --> 00:26:28,720
needs to keep some state obviously

694
00:26:28,720 --> 00:26:31,520
because it has to you know predict the

695
00:26:31,520 --> 00:26:33,919
the expanded packet number

696
00:26:33,919 --> 00:26:36,080
uh you know it has to expand it from the

697
00:26:36,080 --> 00:26:37,760
the truncated packet number so that's

698
00:26:37,760 --> 00:26:39,360
like a harder problem

699
00:26:39,360 --> 00:26:40,480
um

700
00:26:40,480 --> 00:26:41,760
and it becomes even harder with

701
00:26:41,760 --> 00:26:44,159
multi-path but uh right if you build the

702
00:26:44,159 --> 00:26:46,080
ap apis right it doesn't matter and just

703
00:26:46,080 --> 00:26:47,919
the question if vendors will find it

704
00:26:47,919 --> 00:26:49,679
worthwhile to implement the apis and i

705
00:26:49,679 --> 00:26:53,400
don't have an answer to that

706
00:26:57,120 --> 00:26:58,880
okay

707
00:26:58,880 --> 00:27:01,919
i go to the next slide

708
00:27:03,200 --> 00:27:05,440
which is my last slide i think

709
00:27:05,440 --> 00:27:08,640
um so we merged in this proposal

710
00:27:08,640 --> 00:27:10,960
again saying uh um multiple packet

711
00:27:10,960 --> 00:27:12,640
number space is mandatory single packet

712
00:27:12,640 --> 00:27:14,159
number space is optional to implement

713
00:27:14,159 --> 00:27:15,279
basically

714
00:27:15,279 --> 00:27:16,640
and there's some more editorial work

715
00:27:16,640 --> 00:27:18,240
here because like the way it's it's

716
00:27:18,240 --> 00:27:20,559
structured in the document

717
00:27:20,559 --> 00:27:22,559
doesn't make that fully cleared and but

718
00:27:22,559 --> 00:27:24,320
it's really just editorial work um that

719
00:27:24,320 --> 00:27:26,399
we will do

720
00:27:26,399 --> 00:27:27,200
um

721
00:27:27,200 --> 00:27:29,279
we have some remaining issues but as i

722
00:27:29,279 --> 00:27:31,200
said again for all of these issues we

723
00:27:31,200 --> 00:27:33,360
really need to decide if they should go

724
00:27:33,360 --> 00:27:34,880
should be addressed in this document or

725
00:27:34,880 --> 00:27:36,880
in an extension what's the part of the

726
00:27:36,880 --> 00:27:38,559
the base document that we want to um

727
00:27:38,559 --> 00:27:39,679
discuss

728
00:27:39,679 --> 00:27:41,360
um so it's like i don't think it's like

729
00:27:41,360 --> 00:27:42,880
hard to find a solution to this problem

730
00:27:42,880 --> 00:27:44,399
but it's just a decision of what we want

731
00:27:44,399 --> 00:27:46,559
to do here or later

732
00:27:46,559 --> 00:27:48,960
um and then the most important part is

733
00:27:48,960 --> 00:27:50,559
that we really want more

734
00:27:50,559 --> 00:27:52,320
implementation experience

735
00:27:52,320 --> 00:27:54,000
because you know if we all end up only

736
00:27:54,000 --> 00:27:55,279
implementing multiple packet number

737
00:27:55,279 --> 00:27:56,799
spaces maybe we don't need single map

738
00:27:56,799 --> 00:27:59,039
number packet space or if we actually

739
00:27:59,039 --> 00:28:01,039
think that zero length condition

740
00:28:01,039 --> 00:28:03,039
connection id is not that important we

741
00:28:03,039 --> 00:28:05,440
don't need single number packet space

742
00:28:05,440 --> 00:28:07,200
um or maybe there's additional

743
00:28:07,200 --> 00:28:08,480
considerations for

744
00:28:08,480 --> 00:28:09,760
hardware offloading that actually

745
00:28:09,760 --> 00:28:11,200
changes our mind so i think these are

746
00:28:11,200 --> 00:28:12,799
the open questions and what we need is

747
00:28:12,799 --> 00:28:16,440
implementation experience

748
00:28:22,640 --> 00:28:24,720
uh eric kinnear apple just a really

749
00:28:24,720 --> 00:28:27,279
quick question about the path abandoned

750
00:28:27,279 --> 00:28:29,840
stuff is the expectation that the old

751
00:28:29,840 --> 00:28:32,799
path receive both a path challenge and a

752
00:28:32,799 --> 00:28:35,360
path abandon at the same time but we

753
00:28:35,360 --> 00:28:38,880
still want those to be separate frames

754
00:28:38,880 --> 00:28:41,600
so you try to open a second pass

755
00:28:41,600 --> 00:28:44,320
and start the past challenge process and

756
00:28:44,320 --> 00:28:46,320
if you don't want to accept that you

757
00:28:46,320 --> 00:28:47,840
don't have to reply to the past

758
00:28:47,840 --> 00:28:49,840
challenge and then there's no path right

759
00:28:49,840 --> 00:28:52,000
so that's what we already have today

760
00:28:52,000 --> 00:28:54,240
and just like to to avoid this this time

761
00:28:54,240 --> 00:28:55,679
where you like time out until you get

762
00:28:55,679 --> 00:28:57,919
like a challenge response back or not

763
00:28:57,919 --> 00:28:59,919
you can on the other path that's that's

764
00:28:59,919 --> 00:29:01,760
exist if you have multiple packet number

765
00:29:01,760 --> 00:29:02,960
spaces

766
00:29:02,960 --> 00:29:04,559
you can send a path abandon and just

767
00:29:04,559 --> 00:29:06,399
give like a explicit signal that you

768
00:29:06,399 --> 00:29:08,320
will not reply on the other path

769
00:29:08,320 --> 00:29:10,559
that's it but if it when you first

770
00:29:10,559 --> 00:29:12,399
initiate that that triggers a challenge

771
00:29:12,399 --> 00:29:14,320
to go down both paths right because it

772
00:29:14,320 --> 00:29:16,480
needs to be validated in both directions

773
00:29:16,480 --> 00:29:17,840
so the new path is going to be getting a

774
00:29:17,840 --> 00:29:19,679
path challenge saying hey is this

775
00:29:19,679 --> 00:29:21,200
actually working in this direction but

776
00:29:21,200 --> 00:29:23,120
the old path is also going to do so when

777
00:29:23,120 --> 00:29:24,399
it sees someone coming in from a new

778
00:29:24,399 --> 00:29:25,760
place

779
00:29:25,760 --> 00:29:27,120
you're saying the old past is also

780
00:29:27,120 --> 00:29:28,960
sending a past challenge

781
00:29:28,960 --> 00:29:32,880
yes that's my understanding uh that's

782
00:29:32,880 --> 00:29:34,320
sitting in the middle of a different

783
00:29:34,320 --> 00:29:36,880
section of our c9000 essentially it's

784
00:29:36,880 --> 00:29:38,720
for when the off path attacker forwards

785
00:29:38,720 --> 00:29:41,679
some packets you confirm that on the

786
00:29:41,679 --> 00:29:44,159
existing path

787
00:29:44,159 --> 00:29:46,399
okay so the reason i bring that up is a

788
00:29:46,399 --> 00:29:48,559
it's interesting to get both a challenge

789
00:29:48,559 --> 00:29:50,240
and an abandon at the same time the

790
00:29:50,240 --> 00:29:52,080
abandon refers to the new path so that

791
00:29:52,080 --> 00:29:53,520
seems okay

792
00:29:53,520 --> 00:29:55,520
it might also be possible to just like

793
00:29:55,520 --> 00:29:57,440
put in the challenge like hey i don't

794
00:29:57,440 --> 00:29:59,600
want this other one yeah so the abandon

795
00:29:59,600 --> 00:30:01,520
only works if you have um pass

796
00:30:01,520 --> 00:30:02,799
identifiers

797
00:30:02,799 --> 00:30:04,640
yes and because you don't send it on the

798
00:30:04,640 --> 00:30:06,960
same path and like we should look up

799
00:30:06,960 --> 00:30:08,399
this part you're just citing because

800
00:30:08,399 --> 00:30:10,399
maybe that doesn't make well it may also

801
00:30:10,399 --> 00:30:12,000
have been overridden by some of the new

802
00:30:12,000 --> 00:30:14,000
texts so i should go double check

803
00:30:14,000 --> 00:30:17,039
okay thank you

804
00:30:18,159 --> 00:30:20,159
alessandra gadini cloudflare

805
00:30:20,159 --> 00:30:24,159
um we're starting work on multi-path

806
00:30:24,159 --> 00:30:26,320
right now and

807
00:30:26,320 --> 00:30:29,679
um my current impression is um on the

808
00:30:29,679 --> 00:30:31,840
single path versus multiple packet

809
00:30:31,840 --> 00:30:35,200
number spaces um question is that

810
00:30:35,200 --> 00:30:37,120
the single pocket number space doesn't

811
00:30:37,120 --> 00:30:40,799
really give us much benefit and

812
00:30:40,799 --> 00:30:44,080
um implementing both is kind of annoying

813
00:30:44,080 --> 00:30:47,039
so um we might end up just implementing

814
00:30:47,039 --> 00:30:49,279
the multiple packet number spaces

815
00:30:49,279 --> 00:30:51,039
um

816
00:30:51,039 --> 00:30:53,440
we might reconsider later on after we

817
00:30:53,440 --> 00:30:55,919
actually deploy the whole thing but um

818
00:30:55,919 --> 00:30:57,760
that's my current impression at least

819
00:30:57,760 --> 00:31:00,080
it's not super clear

820
00:31:00,080 --> 00:31:01,760
what the benefits of

821
00:31:01,760 --> 00:31:04,480
implementing both are and a quick

822
00:31:04,480 --> 00:31:06,320
implementation kind of needs to support

823
00:31:06,320 --> 00:31:09,519
the non-zero connection id um

824
00:31:09,519 --> 00:31:12,000
case anyway so

825
00:31:12,000 --> 00:31:13,840
you have to implement multiple packet

826
00:31:13,840 --> 00:31:15,840
number spaces and the single packet

827
00:31:15,840 --> 00:31:18,399
number space is just i don't know more

828
00:31:18,399 --> 00:31:19,919
complexity for

829
00:31:19,919 --> 00:31:21,840
not much benefit

830
00:31:21,840 --> 00:31:23,840
so this is exactly the point so like if

831
00:31:23,840 --> 00:31:25,440
you if you don't need zero length

832
00:31:25,440 --> 00:31:27,120
connection id

833
00:31:27,120 --> 00:31:28,480
that's probably additional overhead you

834
00:31:28,480 --> 00:31:30,000
wouldn't want but like we're looking for

835
00:31:30,000 --> 00:31:31,600
people who actually have a use case for

836
00:31:31,600 --> 00:31:33,600
zero length connection id and i mean one

837
00:31:33,600 --> 00:31:35,760
of the benefits is like you save a few

838
00:31:35,760 --> 00:31:37,519
bytes right so that for some use cases

839
00:31:37,519 --> 00:31:39,519
that might be really important

840
00:31:39,519 --> 00:31:41,919
um and like there are two options here i

841
00:31:41,919 --> 00:31:44,000
mean the one option is also we could try

842
00:31:44,000 --> 00:31:45,360
to treat the

843
00:31:45,360 --> 00:31:47,039
multiple packet number space solution to

844
00:31:47,039 --> 00:31:48,720
support at least zero connection id in

845
00:31:48,720 --> 00:31:50,399
one direction there has been proposals

846
00:31:50,399 --> 00:31:51,919
but it's also like some additional

847
00:31:51,919 --> 00:31:54,159
complexity it's not here if it's needed

848
00:31:54,159 --> 00:31:55,679
the other option is also like put the

849
00:31:55,679 --> 00:31:57,600
zero length connection id support in an

850
00:31:57,600 --> 00:31:59,440
extension or whatever

851
00:31:59,440 --> 00:32:00,799
but yeah that's the feedback we're

852
00:32:00,799 --> 00:32:03,519
looking at so i think

853
00:32:03,519 --> 00:32:05,279
um the the

854
00:32:05,279 --> 00:32:08,960
the zero connection id case is mostly a

855
00:32:08,960 --> 00:32:11,760
client use case maybe i think some

856
00:32:11,760 --> 00:32:15,600
browsers use zero connection ids um

857
00:32:15,600 --> 00:32:18,720
so supporting on only one side might be

858
00:32:18,720 --> 00:32:22,000
okay yeah um but then i guess someone

859
00:32:22,000 --> 00:32:23,279
who is

860
00:32:23,279 --> 00:32:25,360
actually using that use case might

861
00:32:25,360 --> 00:32:26,880
comment more that's what we're looking

862
00:32:26,880 --> 00:32:29,840
for

863
00:32:31,600 --> 00:32:33,360
i think lucas is next

864
00:32:33,360 --> 00:32:35,440
hey yeah i i don't need to queue on the

865
00:32:35,440 --> 00:32:36,960
chair i could have just interjected but

866
00:32:36,960 --> 00:32:38,799
i thought it'd be polite um we've had a

867
00:32:38,799 --> 00:32:40,240
few comments in the chat about my

868
00:32:40,240 --> 00:32:42,159
squaring uh for anyone that wants to be

869
00:32:42,159 --> 00:32:45,360
not in the room during the initial um

870
00:32:45,360 --> 00:32:48,000
uh chess fights this is a requirement of

871
00:32:48,000 --> 00:32:50,080
your attendance to to wear a mask at all

872
00:32:50,080 --> 00:32:52,480
times during these meeting sessions so

873
00:32:52,480 --> 00:32:55,279
please uh take this seriously um

874
00:32:55,279 --> 00:32:56,640
this is important for our health we all

875
00:32:56,640 --> 00:32:58,159
want to be able to go home

876
00:32:58,159 --> 00:32:59,760
at the end of the week so thank you very

877
00:32:59,760 --> 00:33:01,919
much

878
00:33:02,159 --> 00:33:03,519
thanks lucas

879
00:33:03,519 --> 00:33:05,039
thanks uh

880
00:33:05,039 --> 00:33:06,880
ian's right google um

881
00:33:06,880 --> 00:33:10,399
i i was more of a single packet number

882
00:33:10,399 --> 00:33:13,519
space fan as an individual um but i have

883
00:33:13,519 --> 00:33:15,840
to say that uh requiring both seems

884
00:33:15,840 --> 00:33:18,159
worse than just requiring multiple

885
00:33:18,159 --> 00:33:19,840
packet number spaces

886
00:33:19,840 --> 00:33:22,240
in terms of zero length connection ids

887
00:33:22,240 --> 00:33:24,080
the use cases i think probably could be

888
00:33:24,080 --> 00:33:25,919
preserved so like for example there are

889
00:33:25,919 --> 00:33:27,760
cases when chrome will open two

890
00:33:27,760 --> 00:33:29,039
different ephemeral ports at the same

891
00:33:29,039 --> 00:33:31,600
time and so chrome would have like two

892
00:33:31,600 --> 00:33:33,200
different sockets and i would think it

893
00:33:33,200 --> 00:33:35,519
would be perfectly easy to distinguish

894
00:33:35,519 --> 00:33:37,760
which path uh a pack arrived on based on

895
00:33:37,760 --> 00:33:39,600
the socket arrived on

896
00:33:39,600 --> 00:33:41,039
things like that so

897
00:33:41,039 --> 00:33:43,120
uh that's my general comment but i need

898
00:33:43,120 --> 00:33:44,720
to go back through and

899
00:33:44,720 --> 00:33:46,080
kind of look at all the discussion about

900
00:33:46,080 --> 00:33:48,640
like how you ended up where you didn't

901
00:33:48,640 --> 00:33:50,240
make sure that i kind of understand

902
00:33:50,240 --> 00:33:53,840
everything that that happened so

903
00:33:56,240 --> 00:33:57,919
so i don't usually stand up just to say

904
00:33:57,919 --> 00:33:59,840
plus one but there weren't that many

905
00:33:59,840 --> 00:34:01,519
people who were super into just a single

906
00:34:01,519 --> 00:34:03,279
packet number space and i was originally

907
00:34:03,279 --> 00:34:04,960
one of them and i would strongly agree

908
00:34:04,960 --> 00:34:06,720
with ian that having both seems strictly

909
00:34:06,720 --> 00:34:09,280
worse than having one or the other and

910
00:34:09,280 --> 00:34:10,800
having multiple packet number spaces

911
00:34:10,800 --> 00:34:12,399
based on the things that we've been

912
00:34:12,399 --> 00:34:14,159
discovering as we go to implement is

913
00:34:14,159 --> 00:34:17,280
seeming more and more attractive

914
00:34:18,399 --> 00:34:20,719
me again um so to be clear i'm not

915
00:34:20,719 --> 00:34:22,480
implementing this but

916
00:34:22,480 --> 00:34:24,879
to me the attraction of

917
00:34:24,879 --> 00:34:26,560
the single packet number space is to

918
00:34:26,560 --> 00:34:27,918
like not write a lot of code and get

919
00:34:27,918 --> 00:34:30,320
like cheap multi-path

920
00:34:30,320 --> 00:34:32,159
uh cheap in terms of coding effort but

921
00:34:32,159 --> 00:34:34,560
if we're gonna require multiple packet

922
00:34:34,560 --> 00:34:35,918
if we're going to acquire a multiple

923
00:34:35,918 --> 00:34:38,239
packet number of spaces then like

924
00:34:38,239 --> 00:34:40,159
that's that's that's are you you have to

925
00:34:40,159 --> 00:34:41,679
pay the entry cost like the point of

926
00:34:41,679 --> 00:34:44,639
single it seems much weaker to me

927
00:34:44,639 --> 00:34:46,399
yeah and i think this is actually kind

928
00:34:46,399 --> 00:34:48,639
of a wrong assumption because it looks

929
00:34:48,639 --> 00:34:50,239
much easier from the first place but

930
00:34:50,239 --> 00:34:51,679
then actually getting all the packet

931
00:34:51,679 --> 00:34:53,679
scheduling delay calculation right and

932
00:34:53,679 --> 00:34:56,079
so on it might be actually more code at

933
00:34:56,079 --> 00:34:58,320
the end and it's it's code that is kind

934
00:34:58,320 --> 00:35:00,560
of not well specified in the end so you

935
00:35:00,560 --> 00:35:02,400
end up with like having different

936
00:35:02,400 --> 00:35:04,240
implementation doing different things

937
00:35:04,240 --> 00:35:05,680
and then because the other end is doing

938
00:35:05,680 --> 00:35:06,880
something weird your performance goes

939
00:35:06,880 --> 00:35:08,800
down and you don't have any control

940
00:35:08,800 --> 00:35:10,240
yeah certainly optimizing it would be a

941
00:35:10,240 --> 00:35:11,760
lot more code but i'm thinking just like

942
00:35:11,760 --> 00:35:13,680
if people wanted really minimal support

943
00:35:13,680 --> 00:35:15,520
that would be attractive but

944
00:35:15,520 --> 00:35:17,440
so it's i mean it's not only optimizing

945
00:35:17,440 --> 00:35:19,119
right it's really just like

946
00:35:19,119 --> 00:35:21,359
the the delay calculation example showed

947
00:35:21,359 --> 00:35:23,599
this this just doesn't work correctly

948
00:35:23,599 --> 00:35:25,680
it's like giving you some crap and like

949
00:35:25,680 --> 00:35:27,520
yeah if you just want to make sure you

950
00:35:27,520 --> 00:35:29,200
can send one packet from here to there

951
00:35:29,200 --> 00:35:31,359
it's fine but if you actually want to

952
00:35:31,359 --> 00:35:33,359
do the right thing it's you cannot

953
00:35:33,359 --> 00:35:37,760
ignore it okay well if if like if the

954
00:35:37,760 --> 00:35:39,760
if the coding simplicity is like

955
00:35:39,760 --> 00:35:42,320
illusory then like to me that that

956
00:35:42,320 --> 00:35:44,480
destroys like the the case for a single

957
00:35:44,480 --> 00:35:46,400
single packet number space entirely yeah

958
00:35:46,400 --> 00:35:49,200
thanks so i mean the point is um

959
00:35:49,200 --> 00:35:51,440
multiple packet number spaces don't

960
00:35:51,440 --> 00:35:53,760
support zero connection id in both

961
00:35:53,760 --> 00:35:55,040
directions

962
00:35:55,040 --> 00:35:57,599
there is a way there are proposals to so

963
00:35:57,599 --> 00:35:59,760
if we need this use case then we need

964
00:35:59,760 --> 00:36:01,200
something right

965
00:36:01,200 --> 00:36:03,520
um if there is a way to maybe support

966
00:36:03,520 --> 00:36:05,520
your connection id in one direction but

967
00:36:05,520 --> 00:36:07,680
it's also giving you more complexity and

968
00:36:07,680 --> 00:36:09,760
more ambiguity so like

969
00:36:09,760 --> 00:36:11,440
it's also additional code so it's really

970
00:36:11,440 --> 00:36:13,359
the question what do we do with your

971
00:36:13,359 --> 00:36:14,720
connection id

972
00:36:14,720 --> 00:36:16,480
is it a use case we want to support or

973
00:36:16,480 --> 00:36:18,720
not

974
00:36:21,119 --> 00:36:22,880
ownership your apple

975
00:36:22,880 --> 00:36:26,160
like many other early informators we are

976
00:36:26,160 --> 00:36:29,119
leaning towards multiple packet spaces

977
00:36:29,119 --> 00:36:32,000
and one

978
00:36:32,480 --> 00:36:35,040
if we are having trouble finding uh

979
00:36:35,040 --> 00:36:37,200
current evidence that the zero lens

980
00:36:37,200 --> 00:36:40,400
connection that single spaces are needed

981
00:36:40,400 --> 00:36:42,400
today

982
00:36:42,400 --> 00:36:43,760
uh we may

983
00:36:43,760 --> 00:36:45,359
consider uh

984
00:36:45,359 --> 00:36:46,800
emulating

985
00:36:46,800 --> 00:36:50,000
uh zero lens cds by injecting a known

986
00:36:50,000 --> 00:36:53,200
constant and essentially making it a uh

987
00:36:53,200 --> 00:36:56,640
nonzero lens and hence injecting that

988
00:36:56,640 --> 00:37:00,000
problem space into the other

989
00:37:04,160 --> 00:37:06,000
hi luke from twitch

990
00:37:06,000 --> 00:37:07,599
i'm noticing in a few working groups

991
00:37:07,599 --> 00:37:09,520
that there's this tendency to put a

992
00:37:09,520 --> 00:37:13,599
context or like a packet space id in um

993
00:37:13,599 --> 00:37:16,160
to distinguish between sessions um mask

994
00:37:16,160 --> 00:37:18,400
has it web transport we're talking about

995
00:37:18,400 --> 00:37:20,400
a session id and here we're part of the

996
00:37:20,400 --> 00:37:22,000
path

997
00:37:22,000 --> 00:37:23,920
in there i'm wondering if overloading

998
00:37:23,920 --> 00:37:26,079
the connection id is the right approach

999
00:37:26,079 --> 00:37:28,160
um is this something we want to do for

1000
00:37:28,160 --> 00:37:29,680
like making load balancing more

1001
00:37:29,680 --> 00:37:30,800
difficult or

1002
00:37:30,800 --> 00:37:32,000
do we want to make this part of the

1003
00:37:32,000 --> 00:37:34,560
quick api like just literally put packet

1004
00:37:34,560 --> 00:37:37,440
space in the header or something

1005
00:37:37,440 --> 00:37:39,040
this is more of a question to the room

1006
00:37:39,040 --> 00:37:40,560
but

1007
00:37:40,560 --> 00:37:42,400
i feel like there's an api here that a

1008
00:37:42,400 --> 00:37:44,640
lot of different working groups might

1009
00:37:44,640 --> 00:37:46,960
use

1010
00:37:49,760 --> 00:37:51,440
i'm open to have this discussion but

1011
00:37:51,440 --> 00:37:52,880
like one of the decisions we made

1012
00:37:52,880 --> 00:37:54,320
earlier on is that we want to keep the

1013
00:37:54,320 --> 00:37:56,720
changes to the um base pack minimal

1014
00:37:56,720 --> 00:37:59,599
right and that would be a big change

1015
00:37:59,599 --> 00:38:01,680
i just think when we start

1016
00:38:01,680 --> 00:38:03,839
making copies of every frame like here's

1017
00:38:03,839 --> 00:38:05,839
an act frame but we put the packet space

1018
00:38:05,839 --> 00:38:08,000
in it here's a flow control

1019
00:38:08,000 --> 00:38:10,160
frame but we put a packet space in it

1020
00:38:10,160 --> 00:38:12,800
not saying the spec does that um

1021
00:38:12,800 --> 00:38:14,800
it it just screams out a little bit to

1022
00:38:14,800 --> 00:38:16,880
me but

1023
00:38:16,880 --> 00:38:18,480
all right off my softbox

1024
00:38:18,480 --> 00:38:21,119
point taking

1025
00:38:24,320 --> 00:38:26,720
question

1026
00:38:29,440 --> 00:38:33,040
to on this discussion

1027
00:38:33,040 --> 00:38:34,000
i mean

1028
00:38:34,000 --> 00:38:37,839
i started experimenting with indonesia

1029
00:38:37,839 --> 00:38:40,800
very early i mean it was my original

1030
00:38:40,800 --> 00:38:43,440
design a couple of years ago

1031
00:38:43,440 --> 00:38:44,240
and

1032
00:38:44,240 --> 00:38:46,400
i did implementation of

1033
00:38:46,400 --> 00:38:49,440
single number space and multiple space

1034
00:38:49,440 --> 00:38:52,160
to measure the complexity

1035
00:38:52,160 --> 00:38:54,560
the complexity of multiple number space

1036
00:38:54,560 --> 00:38:58,079
is that you have to add a bunch of

1037
00:38:58,079 --> 00:39:01,520
statements in your code to check whether

1038
00:39:01,520 --> 00:39:03,520
this is the multi-pass or the single

1039
00:39:03,520 --> 00:39:05,520
pass case and there are more checks like

1040
00:39:05,520 --> 00:39:08,000
that for multiple number space than for

1041
00:39:08,000 --> 00:39:10,320
single number space

1042
00:39:10,320 --> 00:39:12,480
but on the other hand the complexity of

1043
00:39:12,480 --> 00:39:14,160
single number of space is that you have

1044
00:39:14,160 --> 00:39:17,440
to add a lot of structure in your code

1045
00:39:17,440 --> 00:39:19,200
to handle that

1046
00:39:19,200 --> 00:39:20,160
and

1047
00:39:20,160 --> 00:39:21,520
for example

1048
00:39:21,520 --> 00:39:23,359
you have

1049
00:39:23,359 --> 00:39:25,680
in my original implementation

1050
00:39:25,680 --> 00:39:27,520
the

1051
00:39:27,520 --> 00:39:29,520
single space solution was five percent

1052
00:39:29,520 --> 00:39:31,359
less efficient about five percent as

1053
00:39:31,359 --> 00:39:32,480
efficient

1054
00:39:32,480 --> 00:39:35,200
than the multiple space solution

1055
00:39:35,200 --> 00:39:37,520
and i took that as a challenge like can

1056
00:39:37,520 --> 00:39:38,480
i

1057
00:39:38,480 --> 00:39:40,560
make them to be equally

1058
00:39:40,560 --> 00:39:43,200
efficient and the answer is yes i could

1059
00:39:43,200 --> 00:39:46,560
and i did that in in my prototypes

1060
00:39:46,560 --> 00:39:49,119
but to do that i had to

1061
00:39:49,119 --> 00:39:51,920
add a lot of code in the act scheduling

1062
00:39:51,920 --> 00:39:52,880
pass

1063
00:39:52,880 --> 00:39:55,760
i had to add a lot of structure

1064
00:39:55,760 --> 00:39:57,520
in the

1065
00:39:57,520 --> 00:39:59,359
store of packets to make sure that

1066
00:39:59,359 --> 00:40:01,200
packets carried not just the packet

1067
00:40:01,200 --> 00:40:03,839
number but were also linked to the path

1068
00:40:03,839 --> 00:40:05,920
in which they were sent and that we can

1069
00:40:05,920 --> 00:40:08,000
retrieve how many packets were sent

1070
00:40:08,000 --> 00:40:11,839
before them after them etc etc overall

1071
00:40:11,839 --> 00:40:14,319
that complexity as miria said

1072
00:40:14,319 --> 00:40:15,119
is

1073
00:40:15,119 --> 00:40:16,720
much more than the single number of

1074
00:40:16,720 --> 00:40:17,839
space

1075
00:40:17,839 --> 00:40:19,760
so that's the reason why i did support

1076
00:40:19,760 --> 00:40:22,839
and in fact that proposed this unified

1077
00:40:22,839 --> 00:40:25,359
proposal if

1078
00:40:25,359 --> 00:40:27,119
i mean the reason for the additional

1079
00:40:27,119 --> 00:40:29,359
complexity is the need to support the

1080
00:40:29,359 --> 00:40:33,200
zero length cid case

1081
00:40:33,200 --> 00:40:36,160
and we need feedback from implementers

1082
00:40:36,160 --> 00:40:39,520
there whether that zero length cid case

1083
00:40:39,520 --> 00:40:41,359
is actually needed

1084
00:40:41,359 --> 00:40:43,839
with multipass or not

1085
00:40:43,839 --> 00:40:46,560
that's what we need

1086
00:40:48,640 --> 00:40:50,560
yes i think you know that's the main

1087
00:40:50,560 --> 00:40:52,720
question and

1088
00:40:52,720 --> 00:40:54,160
uh if people

1089
00:40:54,160 --> 00:40:56,319
are having a use case for zero links id

1090
00:40:56,319 --> 00:40:58,319
and multipass um it would be good to

1091
00:40:58,319 --> 00:41:01,920
learn about that maybe put it that way

1092
00:41:02,720 --> 00:41:04,400
you answered google i was just gonna add

1093
00:41:04,400 --> 00:41:06,640
that i mean a byte is fine i mean at

1094
00:41:06,640 --> 00:41:08,319
least for chrome and other browsers and

1095
00:41:08,319 --> 00:41:10,640
such but um also i'm still i think i'm

1096
00:41:10,640 --> 00:41:12,560
not fully understanding the problem it

1097
00:41:12,560 --> 00:41:13,839
seems like

1098
00:41:13,839 --> 00:41:14,800
if i

1099
00:41:14,800 --> 00:41:16,960
can distinguish at the receiver which

1100
00:41:16,960 --> 00:41:19,119
path i'm receiving something on then i

1101
00:41:19,119 --> 00:41:21,839
can decide to use a zero link

1102
00:41:21,839 --> 00:41:23,520
uh connection id

1103
00:41:23,520 --> 00:41:24,240
and

1104
00:41:24,240 --> 00:41:25,680
if i can't

1105
00:41:25,680 --> 00:41:27,599
then i need to use a non-zero length

1106
00:41:27,599 --> 00:41:29,119
connection id and this

1107
00:41:29,119 --> 00:41:30,400
seems true

1108
00:41:30,400 --> 00:41:31,680
in the existing server deployments we

1109
00:41:31,680 --> 00:41:34,880
have today right i don't i guess i'm not

1110
00:41:34,880 --> 00:41:36,800
understanding like why multipath makes

1111
00:41:36,800 --> 00:41:37,520
this

1112
00:41:37,520 --> 00:41:40,079
actually different

1113
00:41:40,079 --> 00:41:41,040
like

1114
00:41:41,040 --> 00:41:42,400
like if i can tell from the affirmative

1115
00:41:42,400 --> 00:41:45,040
report like this is pathe or about b

1116
00:41:45,040 --> 00:41:46,400
then like i don't need

1117
00:41:46,400 --> 00:41:48,800
a connection id but if i'm a server i'm

1118
00:41:48,800 --> 00:41:50,640
receiving on 443 and i have 10 000

1119
00:41:50,640 --> 00:41:51,920
connections then

1120
00:41:51,920 --> 00:41:53,359
like clearly i need a connection id to

1121
00:41:53,359 --> 00:41:55,839
like multiplex them

1122
00:41:55,839 --> 00:41:58,720
so it does work but um

1123
00:41:58,720 --> 00:41:59,680
it

1124
00:41:59,680 --> 00:42:00,839
it just

1125
00:42:00,839 --> 00:42:03,200
makes your

1126
00:42:03,200 --> 00:42:05,760
scheduling and your acknowledgement code

1127
00:42:05,760 --> 00:42:07,440
more complex to get it right right you

1128
00:42:07,440 --> 00:42:08,880
have to decide

1129
00:42:08,880 --> 00:42:10,560
which packet numbers to use on with

1130
00:42:10,560 --> 00:42:12,480
which part of the packet number space to

1131
00:42:12,480 --> 00:42:14,240
use on which path

1132
00:42:14,240 --> 00:42:16,560
and that impacts a lot like how your

1133
00:42:16,560 --> 00:42:18,400
acting will look like it

1134
00:42:18,400 --> 00:42:20,160
impacts your ex size

1135
00:42:20,160 --> 00:42:21,839
and you also don't really know what the

1136
00:42:21,839 --> 00:42:23,440
other end is doing like how often do

1137
00:42:23,440 --> 00:42:25,680
they send x or not and when you get the

1138
00:42:25,680 --> 00:42:27,760
packet back there's like ambiguity about

1139
00:42:27,760 --> 00:42:30,400
ecn markings usually you don't know

1140
00:42:30,400 --> 00:42:32,079
where the ecn magnets belong to which

1141
00:42:32,079 --> 00:42:33,680
path so you have to if you get an ecn

1142
00:42:33,680 --> 00:42:34,800
marking you have to reduce your

1143
00:42:34,800 --> 00:42:36,960
congestion window on both paths because

1144
00:42:36,960 --> 00:42:38,880
that's the most conservative thing to do

1145
00:42:38,880 --> 00:42:40,480
or you have to be somehow smart about

1146
00:42:40,480 --> 00:42:41,760
acting but that's the other end that you

1147
00:42:41,760 --> 00:42:44,480
don't control and the same is true for

1148
00:42:44,480 --> 00:42:47,119
um egg delay calculation usually you

1149
00:42:47,119 --> 00:42:49,520
will only be able to calculate the delay

1150
00:42:49,520 --> 00:42:51,040
on the longest path so that's what you

1151
00:42:51,040 --> 00:42:52,960
have to cope with so you cannot fill the

1152
00:42:52,960 --> 00:42:55,119
shortest path delay in whatever and you

1153
00:42:55,119 --> 00:42:56,960
have to have logic for handling all of

1154
00:42:56,960 --> 00:42:58,560
that to make it work

1155
00:42:58,560 --> 00:43:00,800
nicely and i think correctly i mean like

1156
00:43:00,800 --> 00:43:02,480
as i said if you if you need like a few

1157
00:43:02,480 --> 00:43:03,920
packets it doesn't probably matter but

1158
00:43:03,920 --> 00:43:04,800
if you actually want to have a

1159
00:43:04,800 --> 00:43:06,319
performant connection

1160
00:43:06,319 --> 00:43:08,880
it it's not that easy anymore

1161
00:43:08,880 --> 00:43:11,119
yeah i i would completely agree i was i

1162
00:43:11,119 --> 00:43:13,280
was merely asking i think i didn't fully

1163
00:43:13,280 --> 00:43:14,880
understand why we can't have zero length

1164
00:43:14,880 --> 00:43:17,599
packet uh zero length

1165
00:43:17,599 --> 00:43:19,440
connection ids with multiple packet

1166
00:43:19,440 --> 00:43:20,800
number spaces

1167
00:43:20,800 --> 00:43:21,680
um

1168
00:43:21,680 --> 00:43:22,960
i think that's the question i still

1169
00:43:22,960 --> 00:43:24,240
don't fully understand but i can take it

1170
00:43:24,240 --> 00:43:26,800
off because like that because you get

1171
00:43:26,800 --> 00:43:28,800
the same packet number on both paths and

1172
00:43:28,800 --> 00:43:30,480
you don't know how to handle it like you

1173
00:43:30,480 --> 00:43:31,920
have to distinguish like what the fact

1174
00:43:31,920 --> 00:43:33,760
where the packet number belongs but if i

1175
00:43:33,760 --> 00:43:35,440
have two different sockets then like i

1176
00:43:35,440 --> 00:43:37,359
could just use the socket and be like

1177
00:43:37,359 --> 00:43:38,839
suckaday

1178
00:43:38,839 --> 00:43:42,160
socket i don't know

1179
00:43:42,160 --> 00:43:44,079
if i can i think the issue is not

1180
00:43:44,079 --> 00:43:46,400
rebinding um if you're not reminding on

1181
00:43:46,400 --> 00:43:47,359
the path

1182
00:43:47,359 --> 00:43:48,880
there's a lot of ambiguity no i mean

1183
00:43:48,880 --> 00:43:53,560
it's also like this doesn't it

1184
00:43:54,720 --> 00:43:56,480
the crypto to encrypt your packet number

1185
00:43:56,480 --> 00:43:58,000
right doesn't allow you to have the same

1186
00:43:58,000 --> 00:43:59,839
packet number twice or like these kind

1187
00:43:59,839 --> 00:44:01,920
of things

1188
00:44:01,920 --> 00:44:04,400
it just doesn't work christian

1189
00:44:04,400 --> 00:44:06,160
yes it's exactly what you just said i

1190
00:44:06,160 --> 00:44:08,319
mean is that if you have the same

1191
00:44:08,319 --> 00:44:10,480
packets i mean if you have packets

1192
00:44:10,480 --> 00:44:13,040
arriving with the same number

1193
00:44:13,040 --> 00:44:14,720
from two pass

1194
00:44:14,720 --> 00:44:17,040
then you have to inject a pass id in the

1195
00:44:17,040 --> 00:44:19,119
crypto to understand

1196
00:44:19,119 --> 00:44:20,800
which uh

1197
00:44:20,800 --> 00:44:22,480
key to use i mean

1198
00:44:22,480 --> 00:44:24,960
and and if you don't do that

1199
00:44:24,960 --> 00:44:26,480
then basically

1200
00:44:26,480 --> 00:44:28,560
your crypto is broken

1201
00:44:28,560 --> 00:44:30,400
so i can maybe you should take it

1202
00:44:30,400 --> 00:44:31,359
offline

1203
00:44:31,359 --> 00:44:34,000
and if you are interested i could have a

1204
00:44:34,000 --> 00:44:35,760
discussion with them on exactly the

1205
00:44:35,760 --> 00:44:38,400
complexity that we encounter there

1206
00:44:38,400 --> 00:44:40,079
but i mean

1207
00:44:40,079 --> 00:44:41,839
or you might trust me but i know you

1208
00:44:41,839 --> 00:44:44,078
don't

1209
00:44:47,839 --> 00:44:50,839
donna

1210
00:44:54,480 --> 00:44:55,760
thank you

1211
00:44:55,760 --> 00:44:57,359
um

1212
00:44:57,359 --> 00:44:59,839
so i i

1213
00:44:59,839 --> 00:45:01,440
it sounds to me like there's a fair

1214
00:45:01,440 --> 00:45:03,680
amount of agreement on doing

1215
00:45:03,680 --> 00:45:06,560
multiple packet number spaces

1216
00:45:06,560 --> 00:45:08,240
it also sounds to me like there's a

1217
00:45:08,240 --> 00:45:13,479
possibility of considering what else

1218
00:45:25,839 --> 00:45:29,480
we might be able to

1219
00:45:53,040 --> 00:45:56,040
now

1220
00:46:01,920 --> 00:46:03,440
this is an issue that's been like you

1221
00:46:03,440 --> 00:46:06,000
know doing the rounds for quite a while

1222
00:46:06,000 --> 00:46:10,440
uh and we've got some experience here

1223
00:46:16,000 --> 00:46:18,480
i'm happy i feel comfortable and

1224
00:46:18,480 --> 00:46:19,839
confident in saying that we can move

1225
00:46:19,839 --> 00:46:21,680
forward but that's my opinion

1226
00:46:21,680 --> 00:46:24,680
i

1227
00:46:33,359 --> 00:46:36,319
yeah so the audio wasn't super great um

1228
00:46:36,319 --> 00:46:37,839
but i think you said we should decide

1229
00:46:37,839 --> 00:46:42,079
now if you want to support zero links id

1230
00:46:42,079 --> 00:46:44,720
yeah um i don't know can you hear me now

1231
00:46:44,720 --> 00:46:46,079
is it better

1232
00:46:46,079 --> 00:46:48,880
a little bit yes

1233
00:46:48,880 --> 00:46:50,960
i don't like my video

1234
00:46:50,960 --> 00:46:53,520
i it's also in the audio from here where

1235
00:46:53,520 --> 00:46:57,560
stand is not great for me

1236
00:47:06,640 --> 00:47:10,560
so like yeah i mean um

1237
00:47:10,560 --> 00:47:12,960
as i said is probably janna also said i

1238
00:47:12,960 --> 00:47:14,720
believe and the question is really not

1239
00:47:14,720 --> 00:47:16,319
about like doing one or the other doing

1240
00:47:16,319 --> 00:47:17,680
single or doing multiple pack number

1241
00:47:17,680 --> 00:47:19,680
spaces i think might what we decided

1242
00:47:19,680 --> 00:47:20,960
already is that multiple factor number

1243
00:47:20,960 --> 00:47:23,760
spaces is the way to go and single might

1244
00:47:23,760 --> 00:47:25,119
be optional or not so the question

1245
00:47:25,119 --> 00:47:26,880
really is do we want support for zero

1246
00:47:26,880 --> 00:47:28,319
lengths connection id

1247
00:47:28,319 --> 00:47:30,319
that's the question to ask i'm happy to

1248
00:47:30,319 --> 00:47:33,359
make a decision now i'm also happy to

1249
00:47:33,359 --> 00:47:34,720
like wait for a little bit more

1250
00:47:34,720 --> 00:47:36,480
implementation experience and because we

1251
00:47:36,480 --> 00:47:38,800
have like a few not super hard open

1252
00:47:38,800 --> 00:47:40,240
issues but we need the discussion so

1253
00:47:40,240 --> 00:47:42,079
it's like we can decide now we can

1254
00:47:42,079 --> 00:47:44,480
decide next time or sometime in between

1255
00:47:44,480 --> 00:47:45,680
but yeah at some point we have to make a

1256
00:47:45,680 --> 00:47:48,078
decision

1257
00:47:51,359 --> 00:47:53,119
cheers

1258
00:47:53,119 --> 00:47:55,599
thanks miriam um just just from me with

1259
00:47:55,599 --> 00:47:57,839
my hat on but my opinion um this has

1260
00:47:57,839 --> 00:47:59,040
been some good chat and some good

1261
00:47:59,040 --> 00:48:01,200
engagement thank you folks um we've

1262
00:48:01,200 --> 00:48:03,040
taken the comments down about the

1263
00:48:03,040 --> 00:48:05,280
potential consensus call look out for

1264
00:48:05,280 --> 00:48:08,000
that um we'll discuss the follow-up on

1265
00:48:08,000 --> 00:48:09,760
the list if there's anything to be done

1266
00:48:09,760 --> 00:48:12,400
um one question i've got you talked a

1267
00:48:12,400 --> 00:48:13,520
couple of times mary about

1268
00:48:13,520 --> 00:48:16,079
implementation experience and you know

1269
00:48:16,079 --> 00:48:18,240
alexandra mentioned that you know the

1270
00:48:18,240 --> 00:48:20,079
the quiche project is looking to do some

1271
00:48:20,079 --> 00:48:22,559
work i wonder if if maybe at the next

1272
00:48:22,559 --> 00:48:25,520
hackathon in in november we should try

1273
00:48:25,520 --> 00:48:27,599
and form another quick table and

1274
00:48:27,599 --> 00:48:30,079
actually try and bring some folks to

1275
00:48:30,079 --> 00:48:32,319
do some implementation and interrupt and

1276
00:48:32,319 --> 00:48:34,400
create a target and maybe come up with

1277
00:48:34,400 --> 00:48:36,160
some test cases

1278
00:48:36,160 --> 00:48:38,480
we don't need that answer right now but

1279
00:48:38,480 --> 00:48:40,319
if people are interested in that let's

1280
00:48:40,319 --> 00:48:44,160
try and take that discussion offline

1281
00:48:46,079 --> 00:48:49,720
losses in the queue

1282
00:48:49,760 --> 00:48:51,599
yeah lars eckhart so i'm

1283
00:48:51,599 --> 00:48:54,000
not super closely following this

1284
00:48:54,000 --> 00:48:55,920
discussion in in quick

1285
00:48:55,920 --> 00:48:58,079
um but back when we did multiple tcp the

1286
00:48:58,079 --> 00:49:00,000
research not the standard

1287
00:49:00,000 --> 00:49:03,760
we actually tried to do the single space

1288
00:49:03,760 --> 00:49:06,559
um which we quickly found out you can't

1289
00:49:06,559 --> 00:49:08,640
for tcp right because if

1290
00:49:08,640 --> 00:49:10,559
middle boxes along a stream c gaps in a

1291
00:49:10,559 --> 00:49:12,160
sequence number space they just break in

1292
00:49:12,160 --> 00:49:13,599
all kinds of different ways but that was

1293
00:49:13,599 --> 00:49:14,960
the original intent because we thought

1294
00:49:14,960 --> 00:49:17,040
that sort of felt natural and then we

1295
00:49:17,040 --> 00:49:18,880
had to do the two space the the one

1296
00:49:18,880 --> 00:49:20,960
space per path and we sort of made that

1297
00:49:20,960 --> 00:49:22,000
work

1298
00:49:22,000 --> 00:49:23,359
with quick right we actually have the

1299
00:49:23,359 --> 00:49:26,400
option of uh doing the single space

1300
00:49:26,400 --> 00:49:28,880
um but maybe we have now enough

1301
00:49:28,880 --> 00:49:30,800
experience with multi-graph tcp in the

1302
00:49:30,800 --> 00:49:32,720
multiple spaces to see benefits that we

1303
00:49:32,720 --> 00:49:35,280
didn't see way back when

1304
00:49:35,280 --> 00:49:36,640
but um

1305
00:49:36,640 --> 00:49:38,640
i kind of sort of without as i said not

1306
00:49:38,640 --> 00:49:40,880
having followed this in detail

1307
00:49:40,880 --> 00:49:42,319
i kind of sort of wondered that the one

1308
00:49:42,319 --> 00:49:43,760
space back then that we thought would be

1309
00:49:43,760 --> 00:49:45,760
the way to go uh

1310
00:49:45,760 --> 00:49:48,559
wouldn't be the way to go here but

1311
00:49:48,559 --> 00:49:49,839
since i'm not implementing it i'm not

1312
00:49:49,839 --> 00:49:51,599
going to deploy it uh take that as you

1313
00:49:51,599 --> 00:49:53,680
will thank you so i think you're talking

1314
00:49:53,680 --> 00:49:55,440
about different economic spaces here

1315
00:49:55,440 --> 00:49:57,920
than where am i um yeah because in tcp

1316
00:49:57,920 --> 00:50:00,480
you have the the on path sequence number

1317
00:50:00,480 --> 00:50:02,720
and then you have a separate thing right

1318
00:50:02,720 --> 00:50:04,319
yeah and this is not the kind of packet

1319
00:50:04,319 --> 00:50:05,440
number space we're talking about here

1320
00:50:05,440 --> 00:50:06,960
it's really like the onpass packet

1321
00:50:06,960 --> 00:50:08,640
number space and it's really like do you

1322
00:50:08,640 --> 00:50:10,559
use the same numbers on both passes or

1323
00:50:10,559 --> 00:50:12,480
do you use different numbers the

1324
00:50:12,480 --> 00:50:14,240
different set of numbers on on passes

1325
00:50:14,240 --> 00:50:15,599
but it's the same

1326
00:50:15,599 --> 00:50:17,359
element right it's not like in tcp where

1327
00:50:17,359 --> 00:50:19,280
you actually have this additional number

1328
00:50:19,280 --> 00:50:20,559
the reason we have the addition number

1329
00:50:20,559 --> 00:50:22,000
is because we otherwise couldn't make it

1330
00:50:22,000 --> 00:50:23,520
yes so but what you wanted originally is

1331
00:50:23,520 --> 00:50:25,440
to take the sequence number the sequence

1332
00:50:25,440 --> 00:50:27,680
number field and put multiple packet

1333
00:50:27,680 --> 00:50:29,200
number spaces in that field and that

1334
00:50:29,200 --> 00:50:30,640
didn't work and so you had to have a new

1335
00:50:30,640 --> 00:50:31,839
field

1336
00:50:31,839 --> 00:50:33,680
anyway we were going to use a single

1337
00:50:33,680 --> 00:50:35,599
sequence number space across all paths

1338
00:50:35,599 --> 00:50:37,359
with a single field

1339
00:50:37,359 --> 00:50:39,680
originally

1340
00:50:39,680 --> 00:50:41,520
i think we're digressing and that didn't

1341
00:50:41,520 --> 00:50:43,200
work because of all the packets are out

1342
00:50:43,200 --> 00:50:45,520
of order in these kind of things

1343
00:50:45,520 --> 00:50:47,520
it mean because middle boxes see gaps

1344
00:50:47,520 --> 00:50:50,800
and they don't like that yeah

1345
00:50:50,800 --> 00:50:53,040
yeah so we don't have that problem

1346
00:50:53,040 --> 00:50:55,680
but having those gaps is also not

1347
00:50:55,680 --> 00:50:58,079
optimal for the interning processing so

1348
00:50:58,079 --> 00:51:01,680
it's possible but not optimal

1349
00:51:03,760 --> 00:51:07,079
jana again

1350
00:51:08,319 --> 00:51:11,440
hi hopefully you can hear me uh

1351
00:51:11,440 --> 00:51:13,119
reasonably i'll shut up if you can't

1352
00:51:13,119 --> 00:51:14,400
hear me

1353
00:51:14,400 --> 00:51:17,520
yeah it's a little bit better for me now

1354
00:51:17,520 --> 00:51:20,960
okay um uh largest point class yes

1355
00:51:20,960 --> 00:51:22,800
exactly i think

1356
00:51:22,800 --> 00:51:24,160
that uh

1357
00:51:24,160 --> 00:51:25,920
the difference here primarily and so i

1358
00:51:25,920 --> 00:51:28,240
i'll also speak about not just mpdcp but

1359
00:51:28,240 --> 00:51:30,960
uh even almost 20 years ago i did this

1360
00:51:30,960 --> 00:51:32,960
for scdp

1361
00:51:32,960 --> 00:51:36,160
i've used

1362
00:51:36,160 --> 00:51:38,960
sctp multipath implementation

1363
00:51:38,960 --> 00:51:42,079
and uh the reasons that we did that

1364
00:51:42,079 --> 00:51:43,839
and that those are exactly the reasons

1365
00:51:43,839 --> 00:51:46,480
that don't apply to quick specifically

1366
00:51:46,480 --> 00:51:50,800
both sctp and pcp had assumptions about

1367
00:51:50,800 --> 00:51:52,400
linear sequencing

1368
00:51:52,400 --> 00:51:54,000
both the protocols the senders the

1369
00:51:54,000 --> 00:51:56,000
receivers and metal boxes in the tcp

1370
00:51:56,000 --> 00:51:57,839
case all have assumptions about

1371
00:51:57,839 --> 00:51:58,960
sequencing

1372
00:51:58,960 --> 00:52:01,359
of packet numbers we don't have that in

1373
00:52:01,359 --> 00:52:02,319
quick

1374
00:52:02,319 --> 00:52:04,720
and so that's actually a freeing thing

1375
00:52:04,720 --> 00:52:06,559
in implementing this with single packet

1376
00:52:06,559 --> 00:52:09,200
number space in sctp one of the things i

1377
00:52:09,200 --> 00:52:11,200
quickly found out was that eventually

1378
00:52:11,200 --> 00:52:12,640
near the end

1379
00:52:12,640 --> 00:52:15,040
uh uh near the end meaning after after a

1380
00:52:15,040 --> 00:52:16,880
while of working and implementing this

1381
00:52:16,880 --> 00:52:20,480
my uh um conclusion was that

1382
00:52:20,480 --> 00:52:22,000
separate sequence number spaces would

1383
00:52:22,000 --> 00:52:24,000
actually have made things

1384
00:52:24,000 --> 00:52:25,599
far simpler

1385
00:52:25,599 --> 00:52:26,800
because a lot of the things that a

1386
00:52:26,800 --> 00:52:28,480
transport does

1387
00:52:28,480 --> 00:52:32,280
its recovery condition

1388
00:52:32,559 --> 00:52:33,920
all

1389
00:52:33,920 --> 00:52:35,839
things that are happening on a path and

1390
00:52:35,839 --> 00:52:38,079
there is a general assumption about

1391
00:52:38,079 --> 00:52:40,000
sequencing on the path

1392
00:52:40,000 --> 00:52:42,240
and a lot of these mechanisms that we we

1393
00:52:42,240 --> 00:52:43,760
build and we deploy have those

1394
00:52:43,760 --> 00:52:45,040
assumptions

1395
00:52:45,040 --> 00:52:47,040
so if you move to single single but if

1396
00:52:47,040 --> 00:52:48,319
you move to multiple packet number

1397
00:52:48,319 --> 00:52:50,800
spaces those mechanisms just work

1398
00:52:50,800 --> 00:52:52,480
with a single packet number space you

1399
00:52:52,480 --> 00:52:54,400
have to go revisit every one of those

1400
00:52:54,400 --> 00:52:59,800
implementation bits and you find it

1401
00:53:08,319 --> 00:53:09,920
we typically tend to build a certain

1402
00:53:09,920 --> 00:53:11,839
amount of reordering tolerance within a

1403
00:53:11,839 --> 00:53:14,559
path but sort of really blows us out of

1404
00:53:14,559 --> 00:53:15,599
the water

1405
00:53:15,599 --> 00:53:18,000
and you don't want to use the same

1406
00:53:18,000 --> 00:53:20,000
ideas of

1407
00:53:20,000 --> 00:53:21,920
reordering tolerance to multipath

1408
00:53:21,920 --> 00:53:23,280
because in multiple we have a lot more

1409
00:53:23,280 --> 00:53:24,960
information we actually know that there

1410
00:53:24,960 --> 00:53:27,040
are two or multiple different paths

1411
00:53:27,040 --> 00:53:28,800
within which we can expect a certain

1412
00:53:28,800 --> 00:53:31,359
amount of sequencing so all of that to

1413
00:53:31,359 --> 00:53:33,119
say that multiple sequence numbers

1414
00:53:33,119 --> 00:53:38,599
actually make except what trying to

1415
00:53:44,800 --> 00:53:47,200
that was max in the sctp case it was

1416
00:53:47,200 --> 00:53:48,960
backward compatibility it was the fact

1417
00:53:48,960 --> 00:53:51,520
that ag compression wasn't very good

1418
00:53:51,520 --> 00:53:53,280
when you split the sequence number space

1419
00:53:53,280 --> 00:53:55,599
and so on in quickly explicitly and

1420
00:53:55,599 --> 00:53:58,000
deliberately allowed for those things to

1421
00:53:58,000 --> 00:53:59,200
exist

1422
00:53:59,200 --> 00:54:01,359
and by design and by philosophy we've

1423
00:54:01,359 --> 00:54:02,720
allowed for multiple sequence number

1424
00:54:02,720 --> 00:54:05,599
spaces to exist and so i strongly urge

1425
00:54:05,599 --> 00:54:08,240
us to go towards that and if only things

1426
00:54:08,240 --> 00:54:09,839
are falling apart badly should we

1427
00:54:09,839 --> 00:54:13,119
consider single sequence number space

1428
00:54:13,119 --> 00:54:14,800
yeah thanks that's i'm used to input and

1429
00:54:14,800 --> 00:54:17,440
actually last um we already have two

1430
00:54:17,440 --> 00:54:19,920
secret number spaces in quick one is the

1431
00:54:19,920 --> 00:54:22,480
packet number and one is a frame

1432
00:54:22,480 --> 00:54:24,400
id right and and that makes it nice to

1433
00:54:24,400 --> 00:54:27,280
actually have this the split and using

1434
00:54:27,280 --> 00:54:28,800
not to pick a number space on the packet

1435
00:54:28,800 --> 00:54:31,119
number

1436
00:54:31,680 --> 00:54:35,520
uh jonathan just disappeared

1437
00:54:37,119 --> 00:54:39,119
yeah we're kind of at time i locked the

1438
00:54:39,119 --> 00:54:41,119
queue just just so we can make progress

1439
00:54:41,119 --> 00:54:42,880
and not spend too many times on this

1440
00:54:42,880 --> 00:54:45,680
question um if if anyone really wants to

1441
00:54:45,680 --> 00:54:48,079
say something do so

1442
00:54:48,079 --> 00:54:48,880
now

1443
00:54:48,880 --> 00:54:50,480
um

1444
00:54:50,480 --> 00:54:51,520
ian

1445
00:54:51,520 --> 00:54:54,480
um no not ian i think ian

1446
00:54:54,480 --> 00:54:56,400
yeah um i think this has been very

1447
00:54:56,400 --> 00:54:59,119
helpful and thank you all for um your

1448
00:54:59,119 --> 00:55:00,160
inputs

1449
00:55:00,160 --> 00:55:04,118
yep definitely thank you

1450
00:55:19,359 --> 00:55:20,799
that's it

1451
00:55:20,799 --> 00:55:22,160
all right

1452
00:55:22,160 --> 00:55:23,839
do you want to drive the slides or can i

1453
00:55:23,839 --> 00:55:26,319
drive it from my laptop

1454
00:55:26,319 --> 00:55:29,319
yep

1455
00:55:43,839 --> 00:55:45,200
what do i have to do just keep hitting

1456
00:55:45,200 --> 00:55:48,279
the button

1457
00:55:49,680 --> 00:55:53,040
maybe maybe oh

1458
00:55:53,200 --> 00:55:56,319
uh the quick time is stopped right

1459
00:55:56,319 --> 00:55:57,440
yep

1460
00:55:57,440 --> 00:56:01,079
no no that's right

1461
00:56:05,920 --> 00:56:08,799
thank you uh i'm ian sweat i'll talk

1462
00:56:08,799 --> 00:56:11,040
about act frequency and give an update

1463
00:56:11,040 --> 00:56:14,040
um

1464
00:56:22,160 --> 00:56:24,319
great so uh there were some updates

1465
00:56:24,319 --> 00:56:25,839
recently mostly

1466
00:56:25,839 --> 00:56:28,720
uh editorial as well as uh some

1467
00:56:28,720 --> 00:56:31,040
additional normative text in areas where

1468
00:56:31,040 --> 00:56:32,160
there really was intended to be

1469
00:56:32,160 --> 00:56:33,280
normative text but we never actually

1470
00:56:33,280 --> 00:56:35,040
bothered to write anything down

1471
00:56:35,040 --> 00:56:37,359
such as with ignore c

1472
00:56:37,359 --> 00:56:39,599
um so this is an overview

1473
00:56:39,599 --> 00:56:41,359
of the two frames that we have the act

1474
00:56:41,359 --> 00:56:42,640
frequency frame

1475
00:56:42,640 --> 00:56:45,280
it allows you to tell the peer how often

1476
00:56:45,280 --> 00:56:46,640
uh they should send acknowledgements to

1477
00:56:46,640 --> 00:56:48,559
you how long to delay them so on and so

1478
00:56:48,559 --> 00:56:49,359
forth

1479
00:56:49,359 --> 00:56:51,839
and then an immediate frame that allows

1480
00:56:51,839 --> 00:56:53,359
you to elicit an immediate

1481
00:56:53,359 --> 00:56:56,359
acknowledgement

1482
00:56:58,000 --> 00:56:59,599
um so i'm going to try to go through

1483
00:56:59,599 --> 00:57:00,960
these in order of

1484
00:57:00,960 --> 00:57:02,799
what i think will be easier to resolve

1485
00:57:02,799 --> 00:57:04,720
issues first and hope of getting some

1486
00:57:04,720 --> 00:57:07,200
resolutions um and leave the thorniest

1487
00:57:07,200 --> 00:57:08,880
one to the last and if we don't get to

1488
00:57:08,880 --> 00:57:10,400
it then i'm happy to take it up on the

1489
00:57:10,400 --> 00:57:11,839
list

1490
00:57:11,839 --> 00:57:14,079
so the first one's an easy question

1491
00:57:14,079 --> 00:57:16,799
should this be a one byte frame type

1492
00:57:16,799 --> 00:57:19,280
um we probably want to stick it with uh

1493
00:57:19,280 --> 00:57:21,599
pto packets in a lot of cases

1494
00:57:21,599 --> 00:57:23,599
um so i guess it's slightly more likely

1495
00:57:23,599 --> 00:57:25,760
to fit if it's one byte

1496
00:57:25,760 --> 00:57:26,960
we might want to send it reasonably

1497
00:57:26,960 --> 00:57:27,839
often

1498
00:57:27,839 --> 00:57:29,119
this is a

1499
00:57:29,119 --> 00:57:31,200
issue filed by martin seaman

1500
00:57:31,200 --> 00:57:32,720
um

1501
00:57:32,720 --> 00:57:35,439
what do people think

1502
00:57:38,400 --> 00:57:40,319
i see a thumbs up and a thumbs down

1503
00:57:40,319 --> 00:57:41,760
would people like to to give their

1504
00:57:41,760 --> 00:57:43,520
thoughts or

1505
00:57:43,520 --> 00:57:44,960
i'm honestly not sure how to resolve

1506
00:57:44,960 --> 00:57:46,960
this uh you know

1507
00:57:46,960 --> 00:57:48,079
um

1508
00:57:48,079 --> 00:57:51,079
but

1509
00:57:54,160 --> 00:57:55,920
i just left the meeting so i can't press

1510
00:57:55,920 --> 00:57:58,559
a button um i think it depends on how

1511
00:57:58,559 --> 00:58:00,240
often you expect to send this right and

1512
00:58:00,240 --> 00:58:02,880
that's not super clear to me

1513
00:58:02,880 --> 00:58:04,319
but like if you send it off and you'll

1514
00:58:04,319 --> 00:58:07,720
be on mine

1515
00:58:18,000 --> 00:58:20,640
who clicked the button faster

1516
00:58:20,640 --> 00:58:23,839
come on martin you got this

1517
00:58:24,319 --> 00:58:25,200
um

1518
00:58:25,200 --> 00:58:26,240
like

1519
00:58:26,240 --> 00:58:30,000
we only have like 60 of the short bite

1520
00:58:30,000 --> 00:58:31,520
packets

1521
00:58:31,520 --> 00:58:34,960
and extensions on average might need one

1522
00:58:34,960 --> 00:58:37,440
maybe sometimes two

1523
00:58:37,440 --> 00:58:41,280
we're going at a rate of

1524
00:58:41,280 --> 00:58:44,880
one maybe two extensions per year

1525
00:58:44,880 --> 00:58:45,760
so

1526
00:58:45,760 --> 00:58:48,720
we're not gonna run out anytime soon i

1527
00:58:48,720 --> 00:58:51,839
would say for working group extensions

1528
00:58:51,839 --> 00:58:55,040
where it looks like

1529
00:58:55,040 --> 00:58:56,480
the majority of folks are going to

1530
00:58:56,480 --> 00:58:57,839
implement them

1531
00:58:57,839 --> 00:59:00,480
yeah get a one by code point

1532
00:59:00,480 --> 00:59:02,559
done

1533
00:59:02,559 --> 00:59:05,200
thanks

1534
00:59:05,200 --> 00:59:08,480
yeah so martin thompson i

1535
00:59:08,480 --> 00:59:10,160
i've implemented this

1536
00:59:10,160 --> 00:59:11,920
and the number of times i send one of

1537
00:59:11,920 --> 00:59:15,119
these things is vanishingly small

1538
00:59:15,119 --> 00:59:17,119
and i have stats to show

1539
00:59:17,119 --> 00:59:20,160
that the number of times we send ptos in

1540
00:59:20,160 --> 00:59:21,280
practice

1541
00:59:21,280 --> 00:59:24,240
is also vanishingly small

1542
00:59:24,240 --> 00:59:27,040
so um

1543
00:59:27,119 --> 00:59:29,200
i don't think an extra bite is a problem

1544
00:59:29,200 --> 00:59:32,880
here and i'd rather see it left as it is

1545
00:59:32,880 --> 00:59:35,599
i i realized david's argument is a is a

1546
00:59:35,599 --> 00:59:36,880
fine one

1547
00:59:36,880 --> 00:59:39,200
um and we do have space but i mean we

1548
00:59:39,200 --> 00:59:41,359
also don't have to use it so

1549
00:59:41,359 --> 00:59:44,319
um leaving it as it is is fine with me

1550
00:59:44,319 --> 00:59:46,000
by the way the stats are like we don't

1551
00:59:46,000 --> 00:59:48,960
get ptos on like

1552
00:59:48,960 --> 00:59:51,040
80 plus percent of our connections it's

1553
00:59:51,040 --> 00:59:52,240
it's crazy

1554
00:59:52,240 --> 00:59:53,520
yeah when the internet's working well

1555
00:59:53,520 --> 00:59:54,720
you should not be getting very many of

1556
00:59:54,720 --> 00:59:56,559
them and and it turns out it works well

1557
00:59:56,559 --> 01:00:00,040
most of the time

1558
01:00:00,240 --> 01:00:01,920
okay

1559
01:00:01,920 --> 01:00:04,240
um

1560
01:00:05,440 --> 01:00:07,119
did the chairs have any suggestions on

1561
01:00:07,119 --> 01:00:10,000
how to oh john

1562
01:00:10,000 --> 01:00:11,690
martin oh yeah

1563
01:00:11,690 --> 01:00:14,869
[Music]

1564
01:00:19,280 --> 01:00:22,319
i'm trying i'm trying trust me

1565
01:00:22,319 --> 01:00:23,280
um

1566
01:00:23,280 --> 01:00:24,720
so

1567
01:00:24,720 --> 01:00:27,839
we can hear you this

1568
01:00:27,839 --> 01:00:29,440
i i don't

1569
01:00:29,440 --> 01:00:31,359
i wonder if this is again one of those

1570
01:00:31,359 --> 01:00:34,240
uh trying to optimize it well before we

1571
01:00:34,240 --> 01:00:35,200
really

1572
01:00:35,200 --> 01:00:37,599
have a problem here situation

1573
01:00:37,599 --> 01:00:39,839
i i think that we should i mean we can

1574
01:00:39,839 --> 01:00:41,280
we can go with one bite we can go with

1575
01:00:41,280 --> 01:00:43,839
two bytes it doesn't matter much i would

1576
01:00:43,839 --> 01:00:45,359
suggest that we leave it as it is until

1577
01:00:45,359 --> 01:00:48,240
we have more experience uh from

1578
01:00:48,240 --> 01:00:50,480
from various folks and we can always

1579
01:00:50,480 --> 01:00:52,319
come back revise the draft come up with

1580
01:00:52,319 --> 01:00:55,280
a new version and stuff of that sort

1581
01:00:55,280 --> 01:00:57,359
at this point getting this out and

1582
01:00:57,359 --> 01:00:59,520
getting this into people's hands is more

1583
01:00:59,520 --> 01:01:01,520
uh useful in my opinion

1584
01:01:01,520 --> 01:01:02,319
so

1585
01:01:02,319 --> 01:01:05,280
the uh uh leaving it at leaving it as it

1586
01:01:05,280 --> 01:01:08,160
is is what i would suggest

1587
01:01:08,160 --> 01:01:11,040
i agree with uh um martin's

1588
01:01:11,040 --> 01:01:13,359
uh uh comment that this is not something

1589
01:01:13,359 --> 01:01:15,280
we expect to send very frequently

1590
01:01:15,280 --> 01:01:16,400
immediately if you're if you're

1591
01:01:16,400 --> 01:01:17,839
immediate if you're asking immediate

1592
01:01:17,839 --> 01:01:20,000
acting to happen all the time

1593
01:01:20,000 --> 01:01:21,680
it seems that it seems like there might

1594
01:01:21,680 --> 01:01:23,440
be a problem somewhere else

1595
01:01:23,440 --> 01:01:25,040
but um

1596
01:01:25,040 --> 01:01:27,279
yeah

1597
01:01:27,359 --> 01:01:29,599
uh martin duke google i would suggest

1598
01:01:29,599 --> 01:01:30,400
that

1599
01:01:30,400 --> 01:01:32,240
we are approaching bike shed territory

1600
01:01:32,240 --> 01:01:35,440
on this and um probably nobody has is

1601
01:01:35,440 --> 01:01:37,119
gonna lie down on the road one way or

1602
01:01:37,119 --> 01:01:40,000
the other so having gotten pros and cons

1603
01:01:40,000 --> 01:01:42,319
i suggest the editors just like make a

1604
01:01:42,319 --> 01:01:43,359
decision

1605
01:01:43,359 --> 01:01:45,040
um and i'm sure everyone can live with

1606
01:01:45,040 --> 01:01:47,520
it and if that's not true then someone

1607
01:01:47,520 --> 01:01:51,000
will correct me

1608
01:01:53,040 --> 01:01:54,480
right

1609
01:01:54,480 --> 01:01:56,960
um it's been pointed out that i didn't

1610
01:01:56,960 --> 01:01:58,799
properly state my affiliation last time

1611
01:01:58,799 --> 01:02:02,160
so sorry davidskenazi quick enthusiast

1612
01:02:02,160 --> 01:02:04,480
um

1613
01:02:04,640 --> 01:02:06,480
i stood up to say something similar to

1614
01:02:06,480 --> 01:02:08,079
what martin said

1615
01:02:08,079 --> 01:02:10,400
what a beautiful bike shed you have i

1616
01:02:10,400 --> 01:02:12,400
really wonder what color it should be

1617
01:02:12,400 --> 01:02:13,839
um so

1618
01:02:13,839 --> 01:02:16,559
yeah i'm not going to lay on the tracks

1619
01:02:16,559 --> 01:02:18,480
here i don't care that much have the

1620
01:02:18,480 --> 01:02:21,119
editor's pick move on that sounds great

1621
01:02:21,119 --> 01:02:23,359
all right how about uh we have martin

1622
01:02:23,359 --> 01:02:24,799
talk and then i'll

1623
01:02:24,799 --> 01:02:26,480
um i might actually just shelve this for

1624
01:02:26,480 --> 01:02:27,839
a few months and just

1625
01:02:27,839 --> 01:02:29,440
get some more utilization and different

1626
01:02:29,440 --> 01:02:31,440
use cases of immediate active as well

1627
01:02:31,440 --> 01:02:32,559
but

1628
01:02:32,559 --> 01:02:34,480
yeah so sorry for opening up this bike

1629
01:02:34,480 --> 01:02:36,400
shed so the reason i opened this issue

1630
01:02:36,400 --> 01:02:39,280
is because the draft says that there are

1631
01:02:39,280 --> 01:02:41,599
some some cases where you want to send

1632
01:02:41,599 --> 01:02:44,559
this frame at least once per rtt

1633
01:02:44,559 --> 01:02:46,799
um i'm not fully sure if i understand

1634
01:02:46,799 --> 01:02:48,799
why you would want to do this probably

1635
01:02:48,799 --> 01:02:51,599
we can add some more text about that if

1636
01:02:51,599 --> 01:02:53,920
if you actually only only send this on

1637
01:02:53,920 --> 01:02:55,280
the pto then

1638
01:02:55,280 --> 01:02:57,119
i don't care but if you send it once per

1639
01:02:57,119 --> 01:03:00,880
rtt this might be worth doing

1640
01:03:01,280 --> 01:03:02,720
yeah that could probably use more decks

1641
01:03:02,720 --> 01:03:04,319
i think the idea was if you wanted more

1642
01:03:04,319 --> 01:03:05,680
fine-grained control over when you

1643
01:03:05,680 --> 01:03:07,359
received acknowledgments

1644
01:03:07,359 --> 01:03:09,280
um it's particularly if you were using

1645
01:03:09,280 --> 01:03:10,880
particularly long active layers in terms

1646
01:03:10,880 --> 01:03:13,599
of packets in time but um yeah

1647
01:03:13,599 --> 01:03:14,799
yep

1648
01:03:14,799 --> 01:03:17,839
thanks let's move on

1649
01:03:19,440 --> 01:03:21,119
um

1650
01:03:21,119 --> 01:03:23,039
so there's a lot of discussion uh in

1651
01:03:23,039 --> 01:03:25,760
various pr's about whether ignore ce is

1652
01:03:25,760 --> 01:03:28,640
useful um or one could say harmful but

1653
01:03:28,640 --> 01:03:31,280
maria was very kind in her

1654
01:03:31,280 --> 01:03:33,920
issue title um

1655
01:03:33,920 --> 01:03:35,839
it's also been restricted to pheromone

1656
01:03:35,839 --> 01:03:37,520
um so it's

1657
01:03:37,520 --> 01:03:39,280
it now says it should not be set if the

1658
01:03:39,280 --> 01:03:41,920
sender sets ect1 in its outgoing packets

1659
01:03:41,920 --> 01:03:45,480
such as for l4s

1660
01:03:45,520 --> 01:03:47,359
i think at this point i don't think

1661
01:03:47,359 --> 01:03:50,640
anyone is using this

1662
01:03:50,640 --> 01:03:51,599
um

1663
01:03:51,599 --> 01:03:54,799
and so i can see an argument that

1664
01:03:54,799 --> 01:03:57,359
given it's not seeing active use

1665
01:03:57,359 --> 01:03:59,599
we should just jettison it because

1666
01:03:59,599 --> 01:04:02,000
we don't need it right now and

1667
01:04:02,000 --> 01:04:03,599
um

1668
01:04:03,599 --> 01:04:05,359
and i'm not sure i as an editor want to

1669
01:04:05,359 --> 01:04:07,680
spend a bunch of time like

1670
01:04:07,680 --> 01:04:09,440
arguing for

1671
01:04:09,440 --> 01:04:12,079
ecn features that i'm not going to

1672
01:04:12,079 --> 01:04:15,039
immediately use but um

1673
01:04:15,039 --> 01:04:16,319
before

1674
01:04:16,319 --> 01:04:18,400
we remove it or something you know we

1675
01:04:18,400 --> 01:04:20,160
didn't have a consensus call to add it

1676
01:04:20,160 --> 01:04:21,280
so i want to

1677
01:04:21,280 --> 01:04:22,720
like bring it here and

1678
01:04:22,720 --> 01:04:27,240
just ask like what do we think

1679
01:04:28,640 --> 01:04:30,079
so martin thompson i'm not going to be

1680
01:04:30,079 --> 01:04:32,079
using this in the foreseeable future but

1681
01:04:32,079 --> 01:04:34,240
i can understand why other people might

1682
01:04:34,240 --> 01:04:36,319
say that they they would like to to do

1683
01:04:36,319 --> 01:04:37,440
something like this

1684
01:04:37,440 --> 01:04:39,520
the question not that i have for those

1685
01:04:39,520 --> 01:04:40,720
people

1686
01:04:40,720 --> 01:04:42,720
is if you're doing something like l4s or

1687
01:04:42,720 --> 01:04:44,160
planning to do that

1688
01:04:44,160 --> 01:04:47,200
would a transport parameter

1689
01:04:47,200 --> 01:04:51,078
suffice in this case

1690
01:04:52,640 --> 01:04:55,440
hmm

1691
01:04:55,440 --> 01:04:56,880
i might have a similar point so like i

1692
01:04:56,880 --> 01:04:58,319
think actually i personally think the

1693
01:04:58,319 --> 01:05:00,880
answer is no but that's not my main

1694
01:05:00,880 --> 01:05:02,400
concern my main concern is that i think

1695
01:05:02,400 --> 01:05:04,000
actually this shouldn't be part of this

1696
01:05:04,000 --> 01:05:06,960
specification because it really depends

1697
01:05:06,960 --> 01:05:09,119
on on the congestion crawl and the and

1698
01:05:09,119 --> 01:05:11,440
the ecm mechanism to specify what's the

1699
01:05:11,440 --> 01:05:12,880
best thing to do

1700
01:05:12,880 --> 01:05:15,200
and and so like you shouldn't have you

1701
01:05:15,200 --> 01:05:16,400
don't shouldn't have you shouldn't have

1702
01:05:16,400 --> 01:05:18,640
a need to single that because it depends

1703
01:05:18,640 --> 01:05:19,680
on like the algorithm you're

1704
01:05:19,680 --> 01:05:22,880
implementing to to do the right thing

1705
01:05:22,880 --> 01:05:24,400
and not the other end telling you to do

1706
01:05:24,400 --> 01:05:26,559
it

1707
01:05:26,799 --> 01:05:29,119
all right

1708
01:05:34,880 --> 01:05:37,200
um did does anyone have any other

1709
01:05:37,200 --> 01:05:40,078
comments on this

1710
01:05:40,160 --> 01:05:42,558
glory

1711
01:05:46,880 --> 01:05:50,440
we can't hear you agree

1712
01:05:50,799 --> 01:05:54,400
okay can you hear me now

1713
01:05:54,640 --> 01:05:56,319
good yes

1714
01:05:56,319 --> 01:06:00,079
so we don't currently have an ecn method

1715
01:06:00,079 --> 01:06:03,039
in the transport area which allows you

1716
01:06:03,039 --> 01:06:04,720
to ignore ce

1717
01:06:04,720 --> 01:06:07,520
except by just dropping in the packets

1718
01:06:07,520 --> 01:06:09,920
so this seems highly tied to the ce

1719
01:06:09,920 --> 01:06:11,839
method you use

1720
01:06:11,839 --> 01:06:14,000
so i agree with mira

1721
01:06:14,000 --> 01:06:15,440
the answer is

1722
01:06:15,440 --> 01:06:19,400
we should not keep it

1723
01:06:19,760 --> 01:06:21,760
sir you said we should not need it is

1724
01:06:21,760 --> 01:06:23,039
that what you said

1725
01:06:23,039 --> 01:06:23,839
no

1726
01:06:23,839 --> 01:06:25,359
we should not

1727
01:06:25,359 --> 01:06:27,839
keep this function

1728
01:06:27,839 --> 01:06:29,920
okay thank you sorry i'm getting echo

1729
01:06:29,920 --> 01:06:31,520
from i don't know maybe it's just the

1730
01:06:31,520 --> 01:06:33,440
speaker's part

1731
01:06:33,440 --> 01:06:34,319
um

1732
01:06:34,319 --> 01:06:36,319
yeah it's also like if you want to do it

1733
01:06:36,319 --> 01:06:38,160
right then it would be more complicated

1734
01:06:38,160 --> 01:06:39,520
than that so because you should kind of

1735
01:06:39,520 --> 01:06:41,760
never ignore the first ce but you might

1736
01:06:41,760 --> 01:06:43,680
not react to like follow-up ces

1737
01:06:43,680 --> 01:06:45,039
immediately or whatever so it's like

1738
01:06:45,039 --> 01:06:47,119
this is also too simplistic to make it

1739
01:06:47,119 --> 01:06:49,520
useful

1740
01:06:50,240 --> 01:06:53,200
um it sounds like i'm inclined to remove

1741
01:06:53,200 --> 01:06:55,520
it given where we're at

1742
01:06:55,520 --> 01:06:57,599
we can always add it back later if

1743
01:06:57,599 --> 01:06:59,119
if people decide that there's a

1744
01:06:59,119 --> 01:07:00,319
compelling use case and actually want to

1745
01:07:00,319 --> 01:07:02,160
implement it but i do not want to ship a

1746
01:07:02,160 --> 01:07:03,839
draft where we have a feature with no

1747
01:07:03,839 --> 01:07:07,520
one who's implemented it oh janna

1748
01:07:09,760 --> 01:07:14,079
i agree i was coming up to say that

1749
01:07:14,079 --> 01:07:16,480
we can use the transport parameter idea

1750
01:07:16,480 --> 01:07:18,640
for martin if we really want to do

1751
01:07:18,640 --> 01:07:20,319
something here later

1752
01:07:20,319 --> 01:07:22,240
but uh i agree

1753
01:07:22,240 --> 01:07:24,240
when we put this in just to be clear we

1754
01:07:24,240 --> 01:07:26,240
weren't fully certain how much

1755
01:07:26,240 --> 01:07:27,280
how much

1756
01:07:27,280 --> 01:07:29,039
traction this would get

1757
01:07:29,039 --> 01:07:31,680
but we can offer it in expected thinking

1758
01:07:31,680 --> 01:07:34,240
that there was there was an ask for it

1759
01:07:34,240 --> 01:07:38,000
sure we have ignore uh uh reordering so

1760
01:07:38,000 --> 01:07:40,559
we wonder if we should have this as well

1761
01:07:40,559 --> 01:07:42,400
and

1762
01:07:42,400 --> 01:07:44,480
so yeah if there's no strong push for it

1763
01:07:44,480 --> 01:07:46,480
we shouldn't add features that don't

1764
01:07:46,480 --> 01:07:49,680
have people asking for it

1765
01:07:50,240 --> 01:07:52,479
cool

1766
01:07:52,799 --> 01:07:55,799
thanks

1767
01:07:57,359 --> 01:07:58,480
okay

1768
01:07:58,480 --> 01:08:00,000
uh the next one is kind of a can of

1769
01:08:00,000 --> 01:08:02,240
worms unfortunately um not from a

1770
01:08:02,240 --> 01:08:04,480
design perspective but just uh it's it's

1771
01:08:04,480 --> 01:08:06,319
a challenging problem which is exactly

1772
01:08:06,319 --> 01:08:09,599
how much text do we want to put in there

1773
01:08:09,599 --> 01:08:12,000
about examples or suggestions of how to

1774
01:08:12,000 --> 01:08:13,440
use this extension

1775
01:08:13,440 --> 01:08:14,559
um

1776
01:08:14,559 --> 01:08:16,640
there's one open issue but there have

1777
01:08:16,640 --> 01:08:18,560
also been other side comments

1778
01:08:18,560 --> 01:08:20,479
uh particularly in the context of like

1779
01:08:20,479 --> 01:08:22,880
reno or cubic about what is the right

1780
01:08:22,880 --> 01:08:26,238
number like is it 8x per rtt or like

1781
01:08:26,238 --> 01:08:27,600
what what magic number do i need to

1782
01:08:27,600 --> 01:08:29,198
stick in there to get like decent

1783
01:08:29,198 --> 01:08:30,719
performance out of like reno and cubic

1784
01:08:30,719 --> 01:08:32,880
and i honestly don't have a really good

1785
01:08:32,880 --> 01:08:34,479
answer off the top of my head

1786
01:08:34,479 --> 01:08:35,679
um

1787
01:08:35,679 --> 01:08:36,560
but

1788
01:08:36,560 --> 01:08:38,640
i guess the real question is like

1789
01:08:38,640 --> 01:08:40,399
what should we be attempting to do here

1790
01:08:40,399 --> 01:08:42,399
like how much more text or less text do

1791
01:08:42,399 --> 01:08:44,880
we want um about

1792
01:08:44,880 --> 01:08:46,719
providing guidelines on how this

1793
01:08:46,719 --> 01:08:48,238
actually should be used

1794
01:08:48,238 --> 01:08:50,000
potentially with congestion controllers

1795
01:08:50,000 --> 01:08:53,719
that are widely deployed

1796
01:08:55,120 --> 01:08:57,278
so

1797
01:09:00,799 --> 01:09:02,880
martin zeman given that

1798
01:09:02,880 --> 01:09:04,479
rfc

1799
01:09:04,479 --> 01:09:07,439
9002 specifies a congestion control

1800
01:09:07,439 --> 01:09:09,198
algorithm that should be safe and

1801
01:09:09,198 --> 01:09:11,279
performant for for the use on the public

1802
01:09:11,279 --> 01:09:13,359
internet would be really nice if this

1803
01:09:13,359 --> 01:09:15,839
extension also suggested something that

1804
01:09:15,839 --> 01:09:16,960
will be

1805
01:09:16,960 --> 01:09:19,120
safe and performant on the on the

1806
01:09:19,120 --> 01:09:21,120
internet not saying that you can't do

1807
01:09:21,120 --> 01:09:22,560
something better but it would be really

1808
01:09:22,560 --> 01:09:24,479
helpful to have something in that text

1809
01:09:24,479 --> 01:09:26,479
for people who don't have a

1810
01:09:26,479 --> 01:09:28,960
internet wide deployment to run their

1811
01:09:28,960 --> 01:09:31,600
own measurements

1812
01:09:33,120 --> 01:09:35,198
as a follow-up question

1813
01:09:35,198 --> 01:09:36,719
um because i don't have this off the top

1814
01:09:36,719 --> 01:09:39,439
of my head does anyone have um a set of

1815
01:09:39,439 --> 01:09:41,198
constants that they've used with

1816
01:09:41,198 --> 01:09:42,960
regional or cubic with

1817
01:09:42,960 --> 01:09:44,719
uh that frequency frame that they find

1818
01:09:44,719 --> 01:09:46,839
work well

1819
01:09:46,839 --> 01:09:50,479
um or is this something where

1820
01:09:50,479 --> 01:09:52,158
i need to go run some experiments and

1821
01:09:52,158 --> 01:09:53,198
try to like

1822
01:09:53,198 --> 01:09:54,960
get some data

1823
01:09:54,960 --> 01:09:55,920
uh

1824
01:09:55,920 --> 01:09:57,520
because we currently run bbr by default

1825
01:09:57,520 --> 01:09:59,600
it at google and

1826
01:09:59,600 --> 01:10:01,360
currently don't have any cubic or reno

1827
01:10:01,360 --> 01:10:03,440
experiments but we still have the code

1828
01:10:03,440 --> 01:10:06,000
so we could go back and run those if if

1829
01:10:06,000 --> 01:10:09,280
that was kind of the way forward on this

1830
01:10:11,920 --> 01:10:14,000
so i was going to jump in here airhead

1831
01:10:14,000 --> 01:10:14,800
off

1832
01:10:14,800 --> 01:10:17,199
has someone that has been

1833
01:10:17,199 --> 01:10:19,040
thinking about experimenting with this

1834
01:10:19,040 --> 01:10:21,840
with an internet-wide deployment the

1835
01:10:21,840 --> 01:10:23,120
i don't think that we should put

1836
01:10:23,120 --> 01:10:25,120
anything or rather have the onus that

1837
01:10:25,120 --> 01:10:26,000
this

1838
01:10:26,000 --> 01:10:27,199
document

1839
01:10:27,199 --> 01:10:28,960
prescribes something because i think if

1840
01:10:28,960 --> 01:10:29,760
we

1841
01:10:29,760 --> 01:10:31,360
have that requirement this is going to

1842
01:10:31,360 --> 01:10:33,360
potentially be blocked

1843
01:10:33,360 --> 01:10:35,199
on publication for

1844
01:10:35,199 --> 01:10:36,800
essentially an indefinite period of time

1845
01:10:36,800 --> 01:10:38,480
because the answer is we really don't

1846
01:10:38,480 --> 01:10:40,640
know what to do here i don't think

1847
01:10:40,640 --> 01:10:43,679
anyone has experience

1848
01:10:43,679 --> 01:10:46,000
using this successfully yet with a

1849
01:10:46,000 --> 01:10:48,080
variety of congestion controllers uh

1850
01:10:48,080 --> 01:10:49,920
certainly not the one that we specify in

1851
01:10:49,920 --> 01:10:51,840
the base draft which

1852
01:10:51,840 --> 01:10:54,000
uh you know is not really being widely

1853
01:10:54,000 --> 01:10:56,480
used um and so

1854
01:10:56,480 --> 01:11:00,159
my thought my personal opinion is that

1855
01:11:00,159 --> 01:11:02,719
uh this document can serve as a

1856
01:11:02,719 --> 01:11:05,280
mechanism document and if people have

1857
01:11:05,280 --> 01:11:07,840
strategies that they want to use

1858
01:11:07,840 --> 01:11:09,920
uh that they they find a success with

1859
01:11:09,920 --> 01:11:11,840
those can be follow-up documents that

1860
01:11:11,840 --> 01:11:13,760
are specified hey this is how you can

1861
01:11:13,760 --> 01:11:15,760
use act frequency for this this is how

1862
01:11:15,760 --> 01:11:17,360
you can use act frequency to achieve

1863
01:11:17,360 --> 01:11:19,040
this because even with a single

1864
01:11:19,040 --> 01:11:20,320
congestion controller you're not

1865
01:11:20,320 --> 01:11:22,000
necessarily going to be

1866
01:11:22,000 --> 01:11:23,840
have the same strategy so for example if

1867
01:11:23,840 --> 01:11:25,520
you want to use cubic with that

1868
01:11:25,520 --> 01:11:27,679
frequency in a data center versus cubic

1869
01:11:27,679 --> 01:11:30,239
with hack frequency on like the internet

1870
01:11:30,239 --> 01:11:33,040
with a very low latency uh network on

1871
01:11:33,040 --> 01:11:34,480
the internet like

1872
01:11:34,480 --> 01:11:36,239
or high latency network on the internet

1873
01:11:36,239 --> 01:11:38,480
i think the strategies are going to vary

1874
01:11:38,480 --> 01:11:41,120
i mean we don't know at this point what

1875
01:11:41,120 --> 01:11:42,560
those strategies are going to be at

1876
01:11:42,560 --> 01:11:45,760
least i am not aware of any

1877
01:11:46,880 --> 01:11:47,920
thanks matt

1878
01:11:47,920 --> 01:11:49,199
uh

1879
01:11:49,199 --> 01:11:51,519
great

1880
01:11:53,040 --> 01:11:55,199
all right i guess you knew i was going

1881
01:11:55,199 --> 01:11:57,678
to say

1882
01:11:59,040 --> 01:12:01,280
that

1883
01:12:01,760 --> 01:12:05,040
10 is not a bad number to kick out on

1884
01:12:05,040 --> 01:12:07,199
for a starting point it's probably a bad

1885
01:12:07,199 --> 01:12:08,960
number in the end it's probably a bad

1886
01:12:08,960 --> 01:12:11,199
number at a data center it's probably a

1887
01:12:11,199 --> 01:12:14,239
reasonable number for an internet path

1888
01:12:14,239 --> 01:12:15,840
um

1889
01:12:15,840 --> 01:12:18,159
can we just see what we can come up with

1890
01:12:18,159 --> 01:12:19,040
here

1891
01:12:19,040 --> 01:12:20,719
and see we can make a recommendation

1892
01:12:20,719 --> 01:12:23,760
before we publish of a starting value

1893
01:12:23,760 --> 01:12:25,440
from which we can work for that we

1894
01:12:25,440 --> 01:12:27,520
consider safe

1895
01:12:27,520 --> 01:12:30,080
because surely two is very conservative

1896
01:12:30,080 --> 01:12:33,120
and surely an rtt's worth or two rtt

1897
01:12:33,120 --> 01:12:36,560
smith is highly um controversial so we

1898
01:12:36,560 --> 01:12:38,640
must be able to say something well i

1899
01:12:38,640 --> 01:12:42,400
suggest we pump we we work on it

1900
01:12:42,640 --> 01:12:44,239
thanks cory yeah i mean there there are

1901
01:12:44,239 --> 01:12:46,000
some boundaries i think about like

1902
01:12:46,000 --> 01:12:47,360
trying to get an hack every rgt

1903
01:12:47,360 --> 01:12:49,199
typically and such just

1904
01:12:49,199 --> 01:12:51,360
for guardrails but that's about all all

1905
01:12:51,360 --> 01:12:52,719
that there is right now okay why don't i

1906
01:12:52,719 --> 01:12:54,560
just keep this open and we can we can

1907
01:12:54,560 --> 01:12:55,840
work on it over time it doesn't seem

1908
01:12:55,840 --> 01:12:57,920
like something we need to fix today

1909
01:12:57,920 --> 01:13:00,159
thanks

1910
01:13:01,610 --> 01:13:02,840
[Music]

1911
01:13:02,840 --> 01:13:04,800
okay um

1912
01:13:04,800 --> 01:13:06,960
so this is one that we talked about

1913
01:13:06,960 --> 01:13:09,360
uh quite a while ago um a number of

1914
01:13:09,360 --> 01:13:11,679
other people have looked at the

1915
01:13:11,679 --> 01:13:14,239
pr again um how much time do i have left

1916
01:13:14,239 --> 01:13:15,520
by the way

1917
01:13:15,520 --> 01:13:17,760
sorry how much time do i have left

1918
01:13:17,760 --> 01:13:21,360
you have about five minutes in

1919
01:13:21,360 --> 01:13:22,880
about five minutes

1920
01:13:22,880 --> 01:13:24,800
okay thank you all right so we can at

1921
01:13:24,800 --> 01:13:26,560
least go over this again and

1922
01:13:26,560 --> 01:13:28,320
uh swap it back in and if we don't get

1923
01:13:28,320 --> 01:13:30,239
to the end that's that's completely fine

1924
01:13:30,239 --> 01:13:31,120
um

1925
01:13:31,120 --> 01:13:32,800
so this is the

1926
01:13:32,800 --> 01:13:34,480
idea of

1927
01:13:34,480 --> 01:13:35,520
uh

1928
01:13:35,520 --> 01:13:36,400
okay

1929
01:13:36,400 --> 01:13:37,120
so

1930
01:13:37,120 --> 01:13:39,440
one act is sent immediately upon a

1931
01:13:39,440 --> 01:13:40,960
missing packet

1932
01:13:40,960 --> 01:13:42,640
um

1933
01:13:42,640 --> 01:13:44,719
however the next ack

1934
01:13:44,719 --> 01:13:46,159
say you have one missing packet and then

1935
01:13:46,159 --> 01:13:48,640
10 packets in a row arrive and you set

1936
01:13:48,640 --> 01:13:51,840
10 for your uh act eliciting threshold

1937
01:13:51,840 --> 01:13:54,560
then you'll get one immediate ack

1938
01:13:54,560 --> 01:13:56,320
and then

1939
01:13:56,320 --> 01:13:57,280
you know you'll have to wait for the

1940
01:13:57,280 --> 01:13:58,719
other 10 packets to arrive and then

1941
01:13:58,719 --> 01:14:00,480
you'll send another immediate act and

1942
01:14:00,480 --> 01:14:02,000
then you'll finally detect that that

1943
01:14:02,000 --> 01:14:04,239
like missing packet was lost

1944
01:14:04,239 --> 01:14:05,760
uh because

1945
01:14:05,760 --> 01:14:07,679
if it's threshold based and it's a

1946
01:14:07,679 --> 01:14:09,199
threshold based loss so you start out

1947
01:14:09,199 --> 01:14:09,840
with

1948
01:14:09,840 --> 01:14:11,520
the last threshold of three

1949
01:14:11,520 --> 01:14:13,520
the first act wasn't enough to

1950
01:14:13,520 --> 01:14:15,440
immediately declare the packet is lost

1951
01:14:15,440 --> 01:14:17,600
and so you have to wait for a timer

1952
01:14:17,600 --> 01:14:18,480
and so

1953
01:14:18,480 --> 01:14:20,719
timers can be relatively slow

1954
01:14:20,719 --> 01:14:22,880
especially in like low latency like data

1955
01:14:22,880 --> 01:14:24,880
center sort of applications

1956
01:14:24,880 --> 01:14:27,600
so this can actually substantially delay

1957
01:14:27,600 --> 01:14:29,199
loss detection in certain situations

1958
01:14:29,199 --> 01:14:31,120
versus the base draft once you start

1959
01:14:31,120 --> 01:14:32,400
bumping up the active eliciting

1960
01:14:32,400 --> 01:14:34,560
threshold

1961
01:14:34,560 --> 01:14:36,719
so

1962
01:14:36,960 --> 01:14:39,920
anyway the

1963
01:14:40,239 --> 01:14:41,840
potential solution to this is to

1964
01:14:41,840 --> 01:14:43,840
communicate the reordering threshold to

1965
01:14:43,840 --> 01:14:46,080
the receiver instead of just saying

1966
01:14:46,080 --> 01:14:47,840
ignore order

1967
01:14:47,840 --> 01:14:49,840
uh and then the receiver sends an

1968
01:14:49,840 --> 01:14:51,840
immediate ack whenever there's a missing

1969
01:14:51,840 --> 01:14:52,960
packet

1970
01:14:52,960 --> 01:14:55,199
in this range that basically would allow

1971
01:14:55,199 --> 01:14:57,920
the sender to immediately declare loss

1972
01:14:57,920 --> 01:14:59,199
so it's basically

1973
01:14:59,199 --> 01:15:01,040
an optimization

1974
01:15:01,040 --> 01:15:02,880
as well as kind of a safety mechanism to

1975
01:15:02,880 --> 01:15:04,400
say

1976
01:15:04,400 --> 01:15:06,640
i'm going to declare loss at this many

1977
01:15:06,640 --> 01:15:07,920
packets

1978
01:15:07,920 --> 01:15:11,120
and so whenever you see

1979
01:15:11,120 --> 01:15:12,640
you know a missing packet that is in

1980
01:15:12,640 --> 01:15:14,080
that range

1981
01:15:14,080 --> 01:15:15,199
and so that would allow me to

1982
01:15:15,199 --> 01:15:17,440
immediately declare loss like send me an

1983
01:15:17,440 --> 01:15:18,960
act immediately so i can like do that as

1984
01:15:18,960 --> 01:15:20,880
quickly as possible is basically what

1985
01:15:20,880 --> 01:15:22,840
this is saying is a mechanism

1986
01:15:22,840 --> 01:15:24,800
um it slightly reduces the number of

1987
01:15:24,800 --> 01:15:26,640
acts when packets are also received out

1988
01:15:26,640 --> 01:15:29,120
of order because if you get a twiddle

1989
01:15:29,120 --> 01:15:30,880
you know one software the other instead

1990
01:15:30,880 --> 01:15:32,960
of sending an immediate act and then

1991
01:15:32,960 --> 01:15:34,080
sending another immediate app when the

1992
01:15:34,080 --> 01:15:35,360
gap is filled

1993
01:15:35,360 --> 01:15:36,159
you

1994
01:15:36,159 --> 01:15:38,400
like don't send the first ack and then

1995
01:15:38,400 --> 01:15:39,600
the gap gets filled and like

1996
01:15:39,600 --> 01:15:41,520
everything's fine so

1997
01:15:41,520 --> 01:15:43,199
it turns out for uh reordering on the

1998
01:15:43,199 --> 01:15:44,400
internet twiddles i think are something

1999
01:15:44,400 --> 01:15:45,920
like 60 of all

2000
01:15:45,920 --> 01:15:47,679
reordering it's some huge number at

2001
01:15:47,679 --> 01:15:50,080
least last time i looked um

2002
01:15:50,080 --> 01:15:50,880
so

2003
01:15:50,880 --> 01:15:52,719
there might be some small

2004
01:15:52,719 --> 01:15:54,400
performance improvement in low scale

2005
01:15:54,400 --> 01:15:56,159
reuterium networks

2006
01:15:56,159 --> 01:15:57,360
um

2007
01:15:57,360 --> 01:15:59,599
but

2008
01:15:59,840 --> 01:16:02,400
anyway that's an overview of the issue

2009
01:16:02,400 --> 01:16:04,239
um especially now that we have dropped

2010
01:16:04,239 --> 01:16:06,719
we're going to drop ignore ce we have

2011
01:16:06,719 --> 01:16:08,320
the bits to

2012
01:16:08,320 --> 01:16:09,760
you know make this like a one byte

2013
01:16:09,760 --> 01:16:11,120
number

2014
01:16:11,120 --> 01:16:12,960
uh which seems like a sufficient amount

2015
01:16:12,960 --> 01:16:14,159
of

2016
01:16:14,159 --> 01:16:15,600
granularity or we can just make it of

2017
01:16:15,600 --> 01:16:18,640
our end it doesn't really matter

2018
01:16:18,960 --> 01:16:21,760
so if if people have comments please

2019
01:16:21,760 --> 01:16:24,159
jump in the queue now otherwise you know

2020
01:16:24,159 --> 01:16:27,199
we we can uh let's move on

2021
01:16:27,199 --> 01:16:30,080
but thank you ian

2022
01:16:33,199 --> 01:16:36,799
no drama

2023
01:16:39,940 --> 01:16:41,360
[Music]

2024
01:16:41,360 --> 01:16:44,360
jonah

2025
01:16:51,540 --> 01:16:54,729
[Music]

2026
01:17:01,440 --> 01:17:03,120
to me this seems more useful than just

2027
01:17:03,120 --> 01:17:04,640
ignore order

2028
01:17:04,640 --> 01:17:06,320
but i also didn't review the whole

2029
01:17:06,320 --> 01:17:09,679
discussion on the github issue

2030
01:17:11,920 --> 01:17:13,440
thanks

2031
01:17:13,440 --> 01:17:17,159
that's my take as well

2032
01:17:18,560 --> 01:17:20,560
thank you very much uh for your time and

2033
01:17:20,560 --> 01:17:24,440
i think i will give my career

2034
01:17:31,679 --> 01:17:33,360
hi i'm martin duke from google i have no

2035
01:17:33,360 --> 01:17:34,800
slides but i'm here to talk about quick

2036
01:17:34,800 --> 01:17:36,400
lb

2037
01:17:36,400 --> 01:17:37,199
um

2038
01:17:37,199 --> 01:17:39,520
jonna did you want to have a comment for

2039
01:17:39,520 --> 01:17:41,390
the previous talk

2040
01:17:41,390 --> 01:17:42,719
[Music]

2041
01:17:42,719 --> 01:17:44,480
no okay

2042
01:17:44,480 --> 01:17:46,000
very good um

2043
01:17:46,000 --> 01:17:48,239
so uh the authors for quick ob are

2044
01:17:48,239 --> 01:17:50,320
pleased to report that all github issues

2045
01:17:50,320 --> 01:17:52,159
are currently closed um if you're

2046
01:17:52,159 --> 01:17:53,679
interested in that i invite you to look

2047
01:17:53,679 --> 01:17:55,199
at the change log

2048
01:17:55,199 --> 01:17:58,320
uh or the uh submit closed prs there the

2049
01:17:58,320 --> 01:17:59,920
only one that probably worth at least

2050
01:17:59,920 --> 01:18:01,760
bringing up is related to the crypto

2051
01:18:01,760 --> 01:18:03,840
review that we received on the for pass

2052
01:18:03,840 --> 01:18:06,320
algorithm uh so this is the short cid

2053
01:18:06,320 --> 01:18:08,159
encrypted version

2054
01:18:08,159 --> 01:18:09,440
um

2055
01:18:09,440 --> 01:18:11,280
uh there was a simple fix that they

2056
01:18:11,280 --> 01:18:12,960
suggested that we made there was another

2057
01:18:12,960 --> 01:18:13,760
fix

2058
01:18:13,760 --> 01:18:15,760
there was another suggestion to uh kind

2059
01:18:15,760 --> 01:18:17,280
of the best practice would be to make it

2060
01:18:17,280 --> 01:18:19,760
a 12-pass algorithm we declined to do

2061
01:18:19,760 --> 01:18:21,199
that for reasons that are probably

2062
01:18:21,199 --> 01:18:24,560
obvious and um christian submitted a pr

2063
01:18:24,560 --> 01:18:26,880
thank you christian that um

2064
01:18:26,880 --> 01:18:28,800
explained the reasoning there in the

2065
01:18:28,800 --> 01:18:30,640
security considerations i invite you to

2066
01:18:30,640 --> 01:18:33,120
look at that email file an issue if you

2067
01:18:33,120 --> 01:18:34,880
have a concern

2068
01:18:34,880 --> 01:18:36,400
and if you have any questions about that

2069
01:18:36,400 --> 01:18:38,800
now i'm happy to answer them but i

2070
01:18:38,800 --> 01:18:40,159
really wanted to talk about is just the

2071
01:18:40,159 --> 01:18:42,800
future path of this document um

2072
01:18:42,800 --> 01:18:44,480
as i said like we've kind of reached the

2073
01:18:44,480 --> 01:18:46,800
end of our um

2074
01:18:46,800 --> 01:18:49,280
editorial process as far as we can do it

2075
01:18:49,280 --> 01:18:51,040
uh so one option is just to go to

2076
01:18:51,040 --> 01:18:52,640
working with last call

2077
01:18:52,640 --> 01:18:54,400
um which will of course generate more

2078
01:18:54,400 --> 01:18:56,880
issues but then but basically move the

2079
01:18:56,880 --> 01:18:59,199
expedite moving the document forward uh

2080
01:18:59,199 --> 01:19:00,560
the second option is to wait for some

2081
01:19:00,560 --> 01:19:01,679
more code

2082
01:19:01,679 --> 01:19:03,600
um the current implementation status is

2083
01:19:03,600 --> 01:19:06,080
that they're to my knowledge two

2084
01:19:06,080 --> 01:19:09,280
load balancer side implementations um

2085
01:19:09,280 --> 01:19:11,360
one is mine based off of nginx and

2086
01:19:11,360 --> 01:19:13,440
there's one from ant financial

2087
01:19:13,440 --> 01:19:15,679
um there are a couple drafts out of date

2088
01:19:15,679 --> 01:19:17,600
but because they're both load balancers

2089
01:19:17,600 --> 01:19:19,280
and no servers have implemented at this

2090
01:19:19,280 --> 01:19:21,520
time we cannot interrupt because we need

2091
01:19:21,520 --> 01:19:23,600
both sides of that interaction

2092
01:19:23,600 --> 01:19:24,640
um

2093
01:19:24,640 --> 01:19:27,920
i am currently uh my current focus and

2094
01:19:27,920 --> 01:19:30,560
my day job is to implement quick lb for

2095
01:19:30,560 --> 01:19:31,760
google quiche

2096
01:19:31,760 --> 01:19:33,199
on the server side

2097
01:19:33,199 --> 01:19:34,080
um

2098
01:19:34,080 --> 01:19:35,840
so we will have a server implementation

2099
01:19:35,840 --> 01:19:36,640
soon

2100
01:19:36,640 --> 01:19:39,120
and also probably certainly within the

2101
01:19:39,120 --> 01:19:41,440
next 12 months to deploy this at google

2102
01:19:41,440 --> 01:19:43,440
so option two so option one is working

2103
01:19:43,440 --> 01:19:45,360
group last call immediately

2104
01:19:45,360 --> 01:19:47,280
option two is to wait for that

2105
01:19:47,280 --> 01:19:49,040
implementation deployment process to

2106
01:19:49,040 --> 01:19:52,239
continue um and then working with last

2107
01:19:52,239 --> 01:19:53,120
call

2108
01:19:53,120 --> 01:19:54,640
and um

2109
01:19:54,640 --> 01:19:56,400
option three i guess would be to wait

2110
01:19:56,400 --> 01:19:57,920
for uh more people who are not martin

2111
01:19:57,920 --> 01:20:00,239
duke to implement this thing but uh who

2112
01:20:00,239 --> 01:20:01,840
knows how long that will be

2113
01:20:01,840 --> 01:20:04,880
so um that is all i have to present and

2114
01:20:04,880 --> 01:20:06,159
i would love to hear comments from the

2115
01:20:06,159 --> 01:20:07,520
community of what they would like to see

2116
01:20:07,520 --> 01:20:10,880
before we work in loop last call

2117
01:20:11,600 --> 01:20:14,600
jonathan

2118
01:20:18,239 --> 01:20:20,560
when my audio comes up

2119
01:20:20,560 --> 01:20:23,040
yeah uh janna wanted to

2120
01:20:23,040 --> 01:20:25,199
uh read wanted me to relay because he

2121
01:20:25,199 --> 01:20:27,280
has audio trouble

2122
01:20:27,280 --> 01:20:28,880
um

2123
01:20:28,880 --> 01:20:30,560
about the difference between ignore

2124
01:20:30,560 --> 01:20:33,760
order and reordering threshold

2125
01:20:33,760 --> 01:20:36,080
um

2126
01:20:36,880 --> 01:20:39,040
if you want to retain ignore order

2127
01:20:39,040 --> 01:20:40,960
please speak up now

2128
01:20:40,960 --> 01:20:42,880
otherwise reordering threshold is the

2129
01:20:42,880 --> 01:20:47,320
lightest direction will go

2130
01:20:48,080 --> 01:20:50,159
okay so that was a comment

2131
01:20:50,159 --> 01:20:52,320
for ian i guess do you have a response

2132
01:20:52,320 --> 01:20:54,559
or

2133
01:20:57,600 --> 01:20:59,280
okay for that was about the reordering

2134
01:20:59,280 --> 01:21:01,840
threshold right

2135
01:21:10,400 --> 01:21:11,199
okay

2136
01:21:11,199 --> 01:21:13,120
yeah i know the audio is very bad over

2137
01:21:13,120 --> 01:21:14,719
there he just said like if somebody

2138
01:21:14,719 --> 01:21:16,880
wants to keep ignore order please speak

2139
01:21:16,880 --> 01:21:21,040
up now otherwise we will switch ah okay

2140
01:21:21,040 --> 01:21:22,960
um

2141
01:21:22,960 --> 01:21:24,400
wearing someone else's document but i

2142
01:21:24,400 --> 01:21:25,679
don't see anyone

2143
01:21:25,679 --> 01:21:27,840
commenting

2144
01:21:27,840 --> 01:21:29,360
nobody in the queue

2145
01:21:29,360 --> 01:21:30,800
so all right

2146
01:21:30,800 --> 01:21:32,400
so returning to the question does anyone

2147
01:21:32,400 --> 01:21:34,000
have an opinion about the maturity of

2148
01:21:34,000 --> 01:21:35,760
the quick lb document and his readiness

2149
01:21:35,760 --> 01:21:38,719
working group last call

2150
01:21:39,360 --> 01:21:42,080
yeah cool event again um i don't have a

2151
01:21:42,080 --> 01:21:43,440
concern to go to work in google glass

2152
01:21:43,440 --> 01:21:45,040
call right now but if there's like no

2153
01:21:45,040 --> 01:21:47,199
good reason uh that we need to publish

2154
01:21:47,199 --> 01:21:48,639
it immediately why don't we wait for

2155
01:21:48,639 --> 01:21:51,600
your implementation

2156
01:21:52,960 --> 01:21:54,840
okay i'm seeing thumbs up

2157
01:21:54,840 --> 01:21:57,679
uh sprinkling a thumbs up uh with that

2158
01:21:57,679 --> 01:21:59,120
sentiment um

2159
01:21:59,120 --> 01:22:00,719
which is fine with me so you will

2160
01:22:00,719 --> 01:22:02,159
probably not hear from me for a while

2161
01:22:02,159 --> 01:22:03,600
about this document

2162
01:22:03,600 --> 01:22:04,880
um

2163
01:22:04,880 --> 01:22:06,800
and uh like i will do another report

2164
01:22:06,800 --> 01:22:08,960
once things are a little more mature

2165
01:22:08,960 --> 01:22:12,480
at google um in terms of doing this work

2166
01:22:12,480 --> 01:22:15,360
uh and retry offload just while i'm up

2167
01:22:15,360 --> 01:22:17,679
here is in a similar stasis state but

2168
01:22:17,679 --> 01:22:20,239
there's no active invitation going on so

2169
01:22:20,239 --> 01:22:23,520
that is sort of in the deep freeze until

2170
01:22:23,520 --> 01:22:25,440
somebody is is

2171
01:22:25,440 --> 01:22:27,040
shown to care

2172
01:22:27,040 --> 01:22:28,560
um

2173
01:22:28,560 --> 01:22:30,639
are there any other questions for me

2174
01:22:30,639 --> 01:22:33,040
or comments

2175
01:22:33,040 --> 01:22:34,080
ian

2176
01:22:34,080 --> 01:22:35,679
ian sweat google i had a question for

2177
01:22:35,679 --> 01:22:36,960
the group actually i was curious if

2178
01:22:36,960 --> 01:22:38,480
anyone else

2179
01:22:38,480 --> 01:22:41,520
besides you at google is working on

2180
01:22:41,520 --> 01:22:45,199
a quick lb implementation

2181
01:22:51,280 --> 01:22:54,320
eric in yours getting up

2182
01:22:55,600 --> 01:22:57,920
eric kinnear apple um

2183
01:22:57,920 --> 01:22:59,760
i don't think we have plans to

2184
01:22:59,760 --> 01:23:02,239
immediately deploy anything but we've

2185
01:23:02,239 --> 01:23:03,440
certainly been looking and trying to

2186
01:23:03,440 --> 01:23:06,560
provide feedback as we go and need

2187
01:23:06,560 --> 01:23:08,239
something with a very similar set of

2188
01:23:08,239 --> 01:23:09,840
attributes so

2189
01:23:09,840 --> 01:23:12,560
i would not give up hope

2190
01:23:12,560 --> 01:23:15,120
and i i would just like

2191
01:23:15,120 --> 01:23:17,040
while i'm up here make an appeal to like

2192
01:23:17,040 --> 01:23:18,880
server implementers that i mean one of

2193
01:23:18,880 --> 01:23:20,320
the intents here like the original

2194
01:23:20,320 --> 01:23:22,480
target use case for this was the cloud

2195
01:23:22,480 --> 01:23:25,679
that um cloud l4 balancers um

2196
01:23:25,679 --> 01:23:27,679
would implement this and then you know

2197
01:23:27,679 --> 01:23:29,440
people could deploy quick servers and

2198
01:23:29,440 --> 01:23:32,000
they could all interoperate um i think

2199
01:23:32,000 --> 01:23:33,440
certainly our long-term plan is to do

2200
01:23:33,440 --> 01:23:35,040
that in google cloud

2201
01:23:35,040 --> 01:23:36,159
um

2202
01:23:36,159 --> 01:23:37,040
so

2203
01:23:37,040 --> 01:23:38,960
you know i think those of you trying to

2204
01:23:38,960 --> 01:23:40,639
position your servers like this might be

2205
01:23:40,639 --> 01:23:43,040
an interesting market opportunity

2206
01:23:43,040 --> 01:23:44,000
um

2207
01:23:44,000 --> 01:23:45,360
anyway if there are no other questions

2208
01:23:45,360 --> 01:23:46,719
i'm going to return

2209
01:23:46,719 --> 01:23:48,639
the balance my time to the group thank

2210
01:23:48,639 --> 01:23:50,080
you

2211
01:23:50,080 --> 01:23:52,480
thank you

2212
01:24:00,320 --> 01:24:01,120
cool

2213
01:24:01,120 --> 01:24:02,400
next up we have

2214
01:24:02,400 --> 01:24:07,120
christian talk about quick time stamps

2215
01:24:07,520 --> 01:24:09,760
as we enter the um

2216
01:24:09,760 --> 01:24:11,360
phase where we stop talking about

2217
01:24:11,360 --> 01:24:13,920
adopted work items um and talk about

2218
01:24:13,920 --> 01:24:17,280
related or potential new work

2219
01:24:17,280 --> 01:24:18,800
do you want me to present the slides or

2220
01:24:18,800 --> 01:24:21,280
can you do it

2221
01:24:21,920 --> 01:24:23,679
you can you can take remote control

2222
01:24:23,679 --> 01:24:24,960
christine

2223
01:24:24,960 --> 01:24:27,760
if you would okay i i i did not expect

2224
01:24:27,760 --> 01:24:31,840
that i'm sorry take me some time

2225
01:24:31,840 --> 01:24:33,920
we can do it if you prefer

2226
01:24:33,920 --> 01:24:35,199
yes please

2227
01:24:35,199 --> 01:24:36,719
okay

2228
01:24:36,719 --> 01:24:38,320
christian the sites are uploaded you

2229
01:24:38,320 --> 01:24:40,320
just have to request click the request

2230
01:24:40,320 --> 01:24:42,560
button and then you can control them

2231
01:24:42,560 --> 01:24:44,560
you don't have to share your stream

2232
01:24:44,560 --> 01:24:46,960
so what is the request button

2233
01:24:46,960 --> 01:24:48,960
the request slides just click it and

2234
01:24:48,960 --> 01:24:51,760
select your slides

2235
01:24:52,880 --> 01:24:54,400
looks like a piece of paper the other

2236
01:24:54,400 --> 01:24:56,879
people think

2237
01:24:57,199 --> 01:24:59,040
it's the second it's a second i think

2238
01:24:59,040 --> 01:25:00,800
it's the second from the

2239
01:25:00,800 --> 01:25:02,320
left

2240
01:25:02,320 --> 01:25:05,799
just click it

2241
01:25:12,000 --> 01:25:14,320
second from the slayer

2242
01:25:14,320 --> 01:25:16,320
it's not visible on my screen there's

2243
01:25:16,320 --> 01:25:18,320
the raised hands and then the next one

2244
01:25:18,320 --> 01:25:20,480
to it

2245
01:25:20,480 --> 01:25:22,960
oh that one

2246
01:25:22,960 --> 01:25:24,000
yes

2247
01:25:24,000 --> 01:25:28,000
there you go and now you can

2248
01:25:28,800 --> 01:25:30,000
you know

2249
01:25:30,000 --> 01:25:33,199
one learns every day

2250
01:25:33,920 --> 01:25:35,520
yeah here we are

2251
01:25:35,520 --> 01:25:37,600
sure

2252
01:25:37,600 --> 01:25:38,880
good

2253
01:25:38,880 --> 01:25:42,880
okay so timestamps so what time do you

2254
01:25:42,880 --> 01:25:44,800
talk

2255
01:25:44,800 --> 01:25:49,280
the question is shall we work on it

2256
01:25:49,440 --> 01:25:51,640
and

2257
01:25:51,640 --> 01:25:54,909
[Music]

2258
01:25:57,199 --> 01:26:00,159
i i have been working on the timestamp

2259
01:26:00,159 --> 01:26:01,840
project for some time

2260
01:26:01,840 --> 01:26:03,600
and it has not

2261
01:26:03,600 --> 01:26:05,600
been progressing

2262
01:26:05,600 --> 01:26:09,120
very much because i mean some people did

2263
01:26:09,120 --> 01:26:10,719
implement it but

2264
01:26:10,719 --> 01:26:14,159
apart from pico quick and i believe

2265
01:26:14,159 --> 01:26:16,080
the light speed implementation i have

2266
01:26:16,080 --> 01:26:19,040
not heard feedback

2267
01:26:19,120 --> 01:26:21,520
the first design of the time stamp was

2268
01:26:21,520 --> 01:26:24,719
to solve the asymmetric case

2269
01:26:24,719 --> 01:26:26,400
in which there is high bandwidth

2270
01:26:26,400 --> 01:26:28,800
available on the same path

2271
01:26:28,800 --> 01:26:31,679
but limited bandwidth on the or

2272
01:26:31,679 --> 01:26:34,320
congestion on the return pass

2273
01:26:34,320 --> 01:26:35,360
and

2274
01:26:35,360 --> 01:26:37,040
the the failure mode there is that you

2275
01:26:37,040 --> 01:26:40,960
can often observe congestion

2276
01:26:40,960 --> 01:26:43,360
on the global pathway it's only caused

2277
01:26:43,360 --> 01:26:45,679
by the return pass

2278
01:26:45,679 --> 01:26:49,600
and the response shall be very different

2279
01:26:49,600 --> 01:26:51,760
so

2280
01:26:51,760 --> 01:26:53,600
with a time stamp

2281
01:26:53,600 --> 01:26:56,800
what happens is that the acknowledgement

2282
01:26:56,800 --> 01:26:58,480
are sent in a packet that is time

2283
01:26:58,480 --> 01:26:59,840
stamped

2284
01:26:59,840 --> 01:27:01,920
and the

2285
01:27:01,920 --> 01:27:03,440
the

2286
01:27:03,440 --> 01:27:05,360
congestion controller can use that

2287
01:27:05,360 --> 01:27:07,600
timestamp to understand which way the

2288
01:27:07,600 --> 01:27:09,280
condition happened

2289
01:27:09,280 --> 01:27:12,239
and trigger a different reaction

2290
01:27:12,239 --> 01:27:15,280
and that suppress things like a

2291
01:27:15,280 --> 01:27:18,159
longer t measurement or

2292
01:27:18,159 --> 01:27:20,960
wrong decision condition control or even

2293
01:27:20,960 --> 01:27:23,360
stereotype transmissions

2294
01:27:23,360 --> 01:27:25,360
so that was one

2295
01:27:25,360 --> 01:27:29,040
one use case for the timestamp

2296
01:27:29,040 --> 01:27:33,120
the next use case for the timestamp

2297
01:27:33,120 --> 01:27:36,800
is clearly for multipass

2298
01:27:36,800 --> 01:27:38,880
in the case of multi-pass we have

2299
01:27:38,880 --> 01:27:40,400
configuration

2300
01:27:40,400 --> 01:27:42,239
in which we have one

2301
01:27:42,239 --> 01:27:44,840
high bandwidth path

2302
01:27:44,840 --> 01:27:49,600
with a relatively long rtt

2303
01:27:49,600 --> 01:27:53,040
and one a low delay pass with a slightly

2304
01:27:53,040 --> 01:27:55,040
smaller bandwidth

2305
01:27:55,040 --> 01:27:57,600
what we see is that if we send

2306
01:27:57,600 --> 01:27:59,840
acknowledgement

2307
01:27:59,840 --> 01:28:01,920
through the short pass that's not the

2308
01:28:01,920 --> 01:28:04,400
path on which the packet was sent

2309
01:28:04,400 --> 01:28:06,480
we improve responsiveness we get better

2310
01:28:06,480 --> 01:28:08,080
connection control we get better loss

2311
01:28:08,080 --> 01:28:10,080
recovery

2312
01:28:10,080 --> 01:28:10,880
but

2313
01:28:10,880 --> 01:28:13,920
we need to have a smart way to measure

2314
01:28:13,920 --> 01:28:17,520
the actual rtt of the pass that combines

2315
01:28:17,520 --> 01:28:20,159
half delays one way and the other

2316
01:28:20,159 --> 01:28:23,199
and a comment i received on that

2317
01:28:23,199 --> 01:28:24,639
implementation

2318
01:28:24,639 --> 01:28:28,159
is that it it requires a phd to

2319
01:28:28,159 --> 01:28:31,360
understand you do rtt measurement

2320
01:28:31,360 --> 01:28:32,239
well

2321
01:28:32,239 --> 01:28:34,159
i don't think it does but then i do have

2322
01:28:34,159 --> 01:28:37,679
another phd so who knows

2323
01:28:38,159 --> 01:28:39,520
the um

2324
01:28:39,520 --> 01:28:41,920
the timestamp implement timestamp option

2325
01:28:41,920 --> 01:28:43,840
fixes that very cleanly because i mean

2326
01:28:43,840 --> 01:28:46,159
if you have a timestamp in your packets

2327
01:28:46,159 --> 01:28:48,960
you can measure each half delay

2328
01:28:48,960 --> 01:28:50,560
each way

2329
01:28:50,560 --> 01:28:52,159
and then

2330
01:28:52,159 --> 01:28:53,520
you can the implementation becomes

2331
01:28:53,520 --> 01:28:55,600
completely straightforward

2332
01:28:55,600 --> 01:28:58,719
and it's much easier now there are other

2333
01:28:58,719 --> 01:29:00,639
use cases for timestamps i mean they are

2334
01:29:00,639 --> 01:29:04,159
very useful if you do

2335
01:29:04,719 --> 01:29:07,199
delay-based congestion control things

2336
01:29:07,199 --> 01:29:09,199
that led back for example

2337
01:29:09,199 --> 01:29:11,520
but also high start

2338
01:29:11,520 --> 01:29:13,840
i mean if you if you use timestamps

2339
01:29:13,840 --> 01:29:17,360
during the high start phase in cubic

2340
01:29:17,360 --> 01:29:19,679
you will very quickly notice the

2341
01:29:19,679 --> 01:29:21,120
increase of

2342
01:29:21,120 --> 01:29:22,880
one way delay

2343
01:29:22,880 --> 01:29:26,239
that high start will realize on

2344
01:29:26,239 --> 01:29:28,000
and so i think that there is a strong

2345
01:29:28,000 --> 01:29:31,520
use case for having time stamps in quake

2346
01:29:31,520 --> 01:29:32,800
now

2347
01:29:32,800 --> 01:29:38,080
that dwarf i have is at version 10.

2348
01:29:38,080 --> 01:29:41,199
a very simple draft i mean uh

2349
01:29:41,199 --> 01:29:43,440
it just defined a timestamp

2350
01:29:43,440 --> 01:29:46,480
for m with a type and the timestamp as a

2351
01:29:46,480 --> 01:29:49,759
number of microseconds

2352
01:29:50,110 --> 01:29:51,360
[Applause]

2353
01:29:51,360 --> 01:29:54,320
and an enable timestamp transport option

2354
01:29:54,320 --> 01:29:56,400
which is basically what you find for

2355
01:29:56,400 --> 01:29:58,800
every extension the couple of a frame

2356
01:29:58,800 --> 01:30:00,719
and a transport parameter to negotiate

2357
01:30:00,719 --> 01:30:03,199
its usage

2358
01:30:03,199 --> 01:30:05,520
i would think that given that it is very

2359
01:30:05,520 --> 01:30:07,920
simple and they are well understood use

2360
01:30:07,920 --> 01:30:09,840
case we could take it on in the working

2361
01:30:09,840 --> 01:30:10,880
group

2362
01:30:10,880 --> 01:30:13,840
but it has been a long time and so

2363
01:30:13,840 --> 01:30:16,719
since that is a long time

2364
01:30:16,719 --> 01:30:18,880
my question there is

2365
01:30:18,880 --> 01:30:21,840
what next i mean

2366
01:30:22,239 --> 01:30:23,280
shall i

2367
01:30:23,280 --> 01:30:26,719
go ride against another windmill or

2368
01:30:26,719 --> 01:30:30,239
maybe just enjoy the sunsets

2369
01:30:31,840 --> 01:30:34,000
okay we'll not leave you on that leave

2370
01:30:34,000 --> 01:30:35,040
you there

2371
01:30:35,040 --> 01:30:37,440
so next step really is

2372
01:30:37,440 --> 01:30:38,960
does working group want to adopt the

2373
01:30:38,960 --> 01:30:40,880
draft

2374
01:30:40,880 --> 01:30:43,760
does working good want to discuss it

2375
01:30:43,760 --> 01:30:46,239
maybe it's not the right way maybe we

2376
01:30:46,239 --> 01:30:48,080
need something more complex than the

2377
01:30:48,080 --> 01:30:50,320
secretize time

2378
01:30:50,320 --> 01:30:51,920
there was a proposal to completely

2379
01:30:51,920 --> 01:30:53,840
change the arc format

2380
01:30:53,840 --> 01:30:56,239
so that we can have add a

2381
01:30:56,239 --> 01:31:00,400
delayed enact delay on each packet

2382
01:31:00,400 --> 01:31:02,320
we could do something a bit more complex

2383
01:31:02,320 --> 01:31:04,400
at ntp which

2384
01:31:04,400 --> 01:31:06,719
has basically three parameters middle

2385
01:31:06,719 --> 01:31:08,320
center timestamp the last received

2386
01:31:08,320 --> 01:31:10,560
timestamp and the delay since the last

2387
01:31:10,560 --> 01:31:12,880
receive which makes measurements even

2388
01:31:12,880 --> 01:31:16,040
more precise

2389
01:31:17,520 --> 01:31:20,080
but at that point uh

2390
01:31:20,080 --> 01:31:22,639
i am really wondering whether we should

2391
01:31:22,639 --> 01:31:26,920
pursue this or not

2392
01:31:30,080 --> 01:31:32,320
so

2393
01:31:33,520 --> 01:31:36,520
questions

2394
01:31:58,080 --> 01:32:01,280
university and i'm a newcomer of the itf

2395
01:32:01,280 --> 01:32:04,400
and i'm really interested in the quick

2396
01:32:04,400 --> 01:32:06,560
the quick working group

2397
01:32:06,560 --> 01:32:08,960
and the art group is

2398
01:32:08,960 --> 01:32:11,199
is also working on adding time and stamp

2399
01:32:11,199 --> 01:32:14,159
to the quick so i think it is really

2400
01:32:14,159 --> 01:32:18,080
important to add some timeliness

2401
01:32:18,080 --> 01:32:20,000
signature like

2402
01:32:20,000 --> 01:32:23,920
time step to the quick mechanism but i

2403
01:32:23,920 --> 01:32:26,080
think there are there are really

2404
01:32:26,080 --> 01:32:28,080
something that we need to have a

2405
01:32:28,080 --> 01:32:30,080
discussion and some implementation

2406
01:32:30,080 --> 01:32:33,040
should be more discussed in detail

2407
01:32:33,040 --> 01:32:34,880
let's say firstly

2408
01:32:34,880 --> 01:32:37,600
is it mandatory for the sender and the

2409
01:32:37,600 --> 01:32:40,480
receiver to do the clocks uh

2410
01:32:40,480 --> 01:32:42,159
synchronization

2411
01:32:42,159 --> 01:32:45,040
if they have to let's say generates

2412
01:32:45,040 --> 01:32:48,080
their own time step or is the timestamp

2413
01:32:48,080 --> 01:32:52,080
is only generated by the server itself

2414
01:32:53,679 --> 01:32:56,159
if the time step is only generated by

2415
01:32:56,159 --> 01:32:58,639
the server itself so the time step

2416
01:32:58,639 --> 01:33:02,639
cannot be uh be used by the client but

2417
01:33:02,639 --> 01:33:05,120
to tell something about the information

2418
01:33:05,120 --> 01:33:06,880
of the timeliness

2419
01:33:06,880 --> 01:33:09,760
but only to measure less the the value

2420
01:33:09,760 --> 01:33:13,760
delay from the center side

2421
01:33:13,760 --> 01:33:17,199
so i think maybe some more specification

2422
01:33:17,199 --> 01:33:18,320
may be

2423
01:33:18,320 --> 01:33:21,600
included in the draft and

2424
01:33:21,600 --> 01:33:25,600
is it also necessary for the

2425
01:33:25,600 --> 01:33:28,800
for all the package to contain a time

2426
01:33:28,800 --> 01:33:32,159
step frame or maybe some kind of package

2427
01:33:32,159 --> 01:33:34,880
that says acknowledge

2428
01:33:34,880 --> 01:33:36,480
the acknowledgments

2429
01:33:36,480 --> 01:33:39,040
the package visa acknowledgment that

2430
01:33:39,040 --> 01:33:41,360
needs the time step

2431
01:33:41,360 --> 01:33:44,400
so i think maybe some details may be

2432
01:33:44,400 --> 01:33:50,080
specified okay then my opinion thank you

2433
01:33:50,080 --> 01:33:52,159
thank you for the suggestion i think

2434
01:33:52,159 --> 01:33:53,760
that uh

2435
01:33:53,760 --> 01:33:55,920
at a high level i agree with you that we

2436
01:33:55,920 --> 01:33:57,199
should have a discussion inside the

2437
01:33:57,199 --> 01:33:58,719
working group

2438
01:33:58,719 --> 01:34:01,920
about what is needed and get feedback

2439
01:34:01,920 --> 01:34:03,920
and i think that's one of the reasons

2440
01:34:03,920 --> 01:34:05,760
like to see some adoption so we can get

2441
01:34:05,760 --> 01:34:07,120
these

2442
01:34:07,120 --> 01:34:09,040
multiple

2443
01:34:09,040 --> 01:34:11,199
people working together

2444
01:34:11,199 --> 01:34:13,120
on the issue of clock synchronization we

2445
01:34:13,120 --> 01:34:15,199
had a debate on the structure of the

2446
01:34:15,199 --> 01:34:16,480
firm

2447
01:34:16,480 --> 01:34:18,400
we had feedback actually several years

2448
01:34:18,400 --> 01:34:20,239
ago that there is that the frame should

2449
01:34:20,239 --> 01:34:22,639
be as simple as possible

2450
01:34:22,639 --> 01:34:24,800
and the document should only specify the

2451
01:34:24,800 --> 01:34:26,800
firm that the mechanism

2452
01:34:26,800 --> 01:34:30,000
because the mechanisms will be

2453
01:34:30,000 --> 01:34:32,159
the combination of say that frame and

2454
01:34:32,159 --> 01:34:34,719
the immersion firm etc

2455
01:34:34,719 --> 01:34:36,639
but i mean at a high level yes we should

2456
01:34:36,639 --> 01:34:40,000
absolutely have a discussion

2457
01:34:40,320 --> 01:34:42,320
ayan

2458
01:34:42,320 --> 01:34:45,199
uh yes ian sweat google um

2459
01:34:45,199 --> 01:34:47,280
i i was a co-author on one of those

2460
01:34:47,280 --> 01:34:48,639
documents that you mentioned about

2461
01:34:48,639 --> 01:34:50,480
multiple timestamps or timestamps per

2462
01:34:50,480 --> 01:34:51,600
packet and

2463
01:34:51,600 --> 01:34:53,760
um that is not being actively pursued by

2464
01:34:53,760 --> 01:34:55,840
us right now except

2465
01:34:55,840 --> 01:34:57,920
we we do have it implemented for one

2466
01:34:57,920 --> 01:35:00,000
internal project which has a very

2467
01:35:00,000 --> 01:35:01,520
non-standard congestion controller that

2468
01:35:01,520 --> 01:35:02,960
i think actually get published at some

2469
01:35:02,960 --> 01:35:06,000
point um i could dig it up but uh it's

2470
01:35:06,000 --> 01:35:07,440
so it's kind of in this weird state

2471
01:35:07,440 --> 01:35:08,880
where we basically just published it

2472
01:35:08,880 --> 01:35:11,760
just so it was kind of out there

2473
01:35:11,760 --> 01:35:13,199
but it's not something we're actually

2474
01:35:13,199 --> 01:35:15,119
pursuing i will say just from an

2475
01:35:15,119 --> 01:35:16,800
implementation perspective it's a lot

2476
01:35:16,800 --> 01:35:18,159
more convenient

2477
01:35:18,159 --> 01:35:20,719
to like be able to curry the time stamp

2478
01:35:20,719 --> 01:35:21,360
in

2479
01:35:21,360 --> 01:35:23,199
when you receive an acknowledgement

2480
01:35:23,199 --> 01:35:24,480
now there's a number of ways of like

2481
01:35:24,480 --> 01:35:26,320
making that happen in the code like you

2482
01:35:26,320 --> 01:35:27,679
could store the timestamp and always

2483
01:35:27,679 --> 01:35:29,520
have it received right before the act or

2484
01:35:29,520 --> 01:35:31,199
something like that but like just from a

2485
01:35:31,199 --> 01:35:32,639
code structure perspective having the

2486
01:35:32,639 --> 01:35:34,159
timestamp available even if it's only

2487
01:35:34,159 --> 01:35:35,360
one times down

2488
01:35:35,360 --> 01:35:36,719
at the same time that you're processing

2489
01:35:36,719 --> 01:35:37,600
the act

2490
01:35:37,600 --> 01:35:39,600
is is super convenient from a code

2491
01:35:39,600 --> 01:35:41,920
structure perspective but um

2492
01:35:41,920 --> 01:35:43,040
i guess i don't think you should give up

2493
01:35:43,040 --> 01:35:45,040
on this work i just am not

2494
01:35:45,040 --> 01:35:46,800
i don't have really good advice on what

2495
01:35:46,800 --> 01:35:48,560
to do next unfortunately but those are

2496
01:35:48,560 --> 01:35:51,199
my experiences

2497
01:35:54,800 --> 01:35:57,840
yes i mean

2498
01:35:57,840 --> 01:36:00,480
i i i do i do agree with the fact that

2499
01:36:00,480 --> 01:36:02,320
it's that's what we have in the pico

2500
01:36:02,320 --> 01:36:04,560
click implementation that the time stamp

2501
01:36:04,560 --> 01:36:07,040
is always sent together with the axe but

2502
01:36:07,040 --> 01:36:08,560
yes

2503
01:36:08,560 --> 01:36:10,320
martin

2504
01:36:10,320 --> 01:36:12,880
martin do uh google um

2505
01:36:12,880 --> 01:36:15,840
so i i believe i understand the case for

2506
01:36:15,840 --> 01:36:17,920
multipath but i'm not sure i understand

2507
01:36:17,920 --> 01:36:20,159
the justification for single path

2508
01:36:20,159 --> 01:36:21,760
benefit i mean if

2509
01:36:21,760 --> 01:36:24,639
if you detect that it is

2510
01:36:24,639 --> 01:36:26,800
like reverse path act congestion would

2511
01:36:26,800 --> 01:36:28,639
you like send more aggressively and just

2512
01:36:28,639 --> 01:36:30,800
make the act congestion worse

2513
01:36:30,800 --> 01:36:32,880
or what is the response if you obtain

2514
01:36:32,880 --> 01:36:36,320
this information in the single path case

2515
01:36:36,320 --> 01:36:38,560
well one way would be to tune the

2516
01:36:38,560 --> 01:36:40,400
frequency for example

2517
01:36:40,400 --> 01:36:42,719
okay

2518
01:36:42,719 --> 01:36:45,199
but also uh the the other way would be

2519
01:36:45,199 --> 01:36:46,960
to uh

2520
01:36:46,960 --> 01:36:48,800
understand that you

2521
01:36:48,800 --> 01:36:49,760
i mean

2522
01:36:49,760 --> 01:36:53,520
you you can avoid use

2523
01:36:53,520 --> 01:36:58,000
i have seen two usage avoid spur use

2524
01:36:58,080 --> 01:36:59,679
retransmission

2525
01:36:59,679 --> 01:37:01,840
and in high start

2526
01:37:01,840 --> 01:37:03,360
avoid

2527
01:37:03,360 --> 01:37:06,800
exiting i start too early because of

2528
01:37:06,800 --> 01:37:10,080
events on the act pass

2529
01:37:11,520 --> 01:37:13,199
okay i mean i'll think through that i'm

2530
01:37:13,199 --> 01:37:14,800
sure you've reasoned about it correctly

2531
01:37:14,800 --> 01:37:18,040
but thanks

2532
01:37:23,679 --> 01:37:26,840
you know

2533
01:37:40,000 --> 01:37:41,920
i think china's maybe having some audio

2534
01:37:41,920 --> 01:37:43,760
issues again i'll dive in with a simple

2535
01:37:43,760 --> 01:37:46,880
question there's some talk about um

2536
01:37:46,880 --> 01:37:49,040
time synchronization stuff that sounds

2537
01:37:49,040 --> 01:37:50,480
super complicated

2538
01:37:50,480 --> 01:37:51,360
like

2539
01:37:51,360 --> 01:37:54,000
i i think starting with something simple

2540
01:37:54,000 --> 01:37:56,320
if if we were to do this work at all but

2541
01:37:56,320 --> 01:37:57,520
starting something simple wouldn't

2542
01:37:57,520 --> 01:37:59,520
preclude more complicated stuff coming

2543
01:37:59,520 --> 01:38:00,639
in the future

2544
01:38:00,639 --> 01:38:03,119
we have space for extensions and frames

2545
01:38:03,119 --> 01:38:04,480
like

2546
01:38:04,480 --> 01:38:08,000
if there's some usage of this thing um

2547
01:38:08,000 --> 01:38:10,560
go that way you're sure some specifics

2548
01:38:10,560 --> 01:38:13,199
could change but um i'm seeing a few use

2549
01:38:13,199 --> 01:38:14,480
cases

2550
01:38:14,480 --> 01:38:16,480
and this is without a chair hat on with

2551
01:38:16,480 --> 01:38:18,639
the chair hat on i'd really like to to

2552
01:38:18,639 --> 01:38:20,480
understand in if people would really

2553
01:38:20,480 --> 01:38:23,679
object to this kind of work like we're

2554
01:38:23,679 --> 01:38:25,920
this isn't adopted but we'd be seeking a

2555
01:38:25,920 --> 01:38:29,520
clearer idea of if if we should be

2556
01:38:29,520 --> 01:38:31,280
seeking adoption or not for this work

2557
01:38:31,280 --> 01:38:32,480
because it's been kicking around for a

2558
01:38:32,480 --> 01:38:34,719
long time now i think we we need to make

2559
01:38:34,719 --> 01:38:36,960
a decision

2560
01:38:36,960 --> 01:38:38,159
what to do

2561
01:38:38,159 --> 01:38:41,159
thanks

2562
01:38:45,199 --> 01:38:47,600
uh jay collin um

2563
01:38:47,600 --> 01:38:49,600
i i think that there are some good use

2564
01:38:49,600 --> 01:38:52,400
cases for this uh you can apply this to

2565
01:38:52,400 --> 01:38:55,600
do like chirping and find

2566
01:38:55,600 --> 01:38:57,760
and apply some of the path dispersion

2567
01:38:57,760 --> 01:39:00,800
bandwidth detection techniques um

2568
01:39:00,800 --> 01:39:02,719
with this and i i

2569
01:39:02,719 --> 01:39:04,560
you know

2570
01:39:04,560 --> 01:39:06,320
do we need it

2571
01:39:06,320 --> 01:39:10,159
i could use it i think but uh

2572
01:39:10,239 --> 01:39:12,639
you know so i'm broadly supportive but

2573
01:39:12,639 --> 01:39:14,480
uh i would

2574
01:39:14,480 --> 01:39:15,760
i guess

2575
01:39:15,760 --> 01:39:17,360
like to see some development in the use

2576
01:39:17,360 --> 01:39:18,960
cases maybe

2577
01:39:18,960 --> 01:39:20,639
um

2578
01:39:20,639 --> 01:39:23,040
to kind of get a better handle on

2579
01:39:23,040 --> 01:39:23,840
on

2580
01:39:23,840 --> 01:39:25,679
other ways people anticipate using it

2581
01:39:25,679 --> 01:39:28,719
but yeah i think to me this looks useful

2582
01:39:28,719 --> 01:39:30,960
thanks

2583
01:39:35,119 --> 01:39:37,280
john linux i mentioned this on the zulip

2584
01:39:37,280 --> 01:39:39,360
but i'll repeat it here

2585
01:39:39,360 --> 01:39:40,960
the uh

2586
01:39:40,960 --> 01:39:42,320
i think this would be useful for a lot

2587
01:39:42,320 --> 01:39:43,679
of the real-time

2588
01:39:43,679 --> 01:39:46,159
media cases all the uh

2589
01:39:46,159 --> 01:39:48,320
or most of the rmcat style

2590
01:39:48,320 --> 01:39:51,520
uh feedback mechanisms um most notably

2591
01:39:51,520 --> 01:39:53,679
uh google cc which is the

2592
01:39:53,679 --> 01:39:56,639
congestion controller and the webrtc

2593
01:39:56,639 --> 01:39:58,639
use time stamps for one-way delay to

2594
01:39:58,639 --> 01:39:59,679
measure

2595
01:39:59,679 --> 01:40:02,080
to get the low delay uh real-time media

2596
01:40:02,080 --> 01:40:03,600
congestion so i think

2597
01:40:03,600 --> 01:40:05,280
if we want to for a lot of the use cases

2598
01:40:05,280 --> 01:40:06,560
where we're going to do

2599
01:40:06,560 --> 01:40:08,320
either rtp over quick or media over

2600
01:40:08,320 --> 01:40:09,760
quick i think this would probably be a

2601
01:40:09,760 --> 01:40:12,320
useful thing

2602
01:40:16,639 --> 01:40:19,760
yoshinichida from amazon web service

2603
01:40:19,760 --> 01:40:22,400
i'm not very you know following up

2604
01:40:22,400 --> 01:40:24,480
quick discussion but uh

2605
01:40:24,480 --> 01:40:27,040
so i'm wondering about measuring one

2606
01:40:27,040 --> 01:40:30,480
weight rate for high stats because no

2607
01:40:30,480 --> 01:40:32,880
high start is center side logic so you

2608
01:40:32,880 --> 01:40:35,040
need to receive back anyhow

2609
01:40:35,040 --> 01:40:37,280
so unless there is a condition on the

2610
01:40:37,280 --> 01:40:38,560
arc path

2611
01:40:38,560 --> 01:40:40,560
i don't know if the measuring one-way

2612
01:40:40,560 --> 01:40:43,119
pass is that useful maybe

2613
01:40:43,119 --> 01:40:47,480
we might want to see more use cases

2614
01:40:52,880 --> 01:40:55,440
spencer dawkins uh

2615
01:40:55,440 --> 01:40:58,320
christian am i understanding your your

2616
01:40:58,320 --> 01:41:00,159
ask is uh

2617
01:41:00,159 --> 01:41:02,320
about adoption of this draft in the

2618
01:41:02,320 --> 01:41:06,000
working group is that is that right

2619
01:41:06,000 --> 01:41:07,440
yes

2620
01:41:07,440 --> 01:41:10,239
that's really the case i mean because i

2621
01:41:10,239 --> 01:41:11,920
mean i

2622
01:41:11,920 --> 01:41:14,080
i don't want to be continuing to push a

2623
01:41:14,080 --> 01:41:16,719
draft and there is episodic feedback

2624
01:41:16,719 --> 01:41:20,400
every two years yeah if it is adopted

2625
01:41:20,400 --> 01:41:22,159
i mean then i'm going to continue

2626
01:41:22,159 --> 01:41:26,320
working on it otherwise whatever

2627
01:41:26,400 --> 01:41:28,800
could i ask the chairs to

2628
01:41:28,800 --> 01:41:32,320
help at least me understand what the bar

2629
01:41:32,320 --> 01:41:34,239
that christians should be looking at for

2630
01:41:34,239 --> 01:41:36,718
this is

2631
01:41:36,800 --> 01:41:39,280
for for adoption in the working group

2632
01:41:39,280 --> 01:41:41,599
i mean

2633
01:41:42,080 --> 01:41:44,080
is it is it close enough for you all to

2634
01:41:44,080 --> 01:41:48,880
call and say who's interested

2635
01:41:50,960 --> 01:41:53,199
speaking this is a chair with my hat on

2636
01:41:53,199 --> 01:41:55,199
um i think having this discussion at

2637
01:41:55,199 --> 01:41:57,280
this session has been good some of it is

2638
01:41:57,280 --> 01:41:58,080
is

2639
01:41:58,080 --> 01:41:59,920
knowing if the author wants to seek

2640
01:41:59,920 --> 01:42:03,520
adoption at all if they feel ready um

2641
01:42:03,520 --> 01:42:04,480
i

2642
01:42:04,480 --> 01:42:06,480
i'm seeing

2643
01:42:06,480 --> 01:42:09,360
generally positive comments like that

2644
01:42:09,360 --> 01:42:11,040
this could be useful

2645
01:42:11,040 --> 01:42:12,800
um

2646
01:42:12,800 --> 01:42:14,560
especially because of the format and

2647
01:42:14,560 --> 01:42:15,760
that they could apply to different

2648
01:42:15,760 --> 01:42:17,360
things but then

2649
01:42:17,360 --> 01:42:18,719
a few people saying they don't quite

2650
01:42:18,719 --> 01:42:21,199
understand the use cases like i think

2651
01:42:21,199 --> 01:42:22,560
what probably needs to happen is a

2652
01:42:22,560 --> 01:42:24,080
little bit more follow-up discussion on

2653
01:42:24,080 --> 01:42:28,480
the mailing list um and that um

2654
01:42:28,480 --> 01:42:30,880
probably i need to confer with matt as

2655
01:42:30,880 --> 01:42:32,880
well but i i'd kind of be leaning on

2656
01:42:32,880 --> 01:42:35,440
issuing an adoption call just to see

2657
01:42:35,440 --> 01:42:37,119
to flesh out

2658
01:42:37,119 --> 01:42:39,040
people who would strongly object to

2659
01:42:39,040 --> 01:42:41,600
adopting that work right now um and and

2660
01:42:41,600 --> 01:42:43,920
the reasons why and therefore you know

2661
01:42:43,920 --> 01:42:46,320
if if if those reasons are things that

2662
01:42:46,320 --> 01:42:48,480
christine wouldn't want to address then

2663
01:42:48,480 --> 01:42:50,400
he can he can go away and maybe in the

2664
01:42:50,400 --> 01:42:52,400
future somebody else can come and pick

2665
01:42:52,400 --> 01:42:54,159
up this style of work

2666
01:42:54,159 --> 01:42:57,760
that's what i'd be looking for

2667
01:42:57,760 --> 01:43:00,159
does that make sense spencer

2668
01:43:00,159 --> 01:43:02,800
yeah yes it does uh

2669
01:43:02,800 --> 01:43:05,760
so uh the other thing i'm thinking

2670
01:43:05,760 --> 01:43:06,719
you know

2671
01:43:06,719 --> 01:43:09,440
i think jonathan linux and i were headed

2672
01:43:09,440 --> 01:43:11,119
the same place

2673
01:43:11,119 --> 01:43:13,600
roughly which is uh

2674
01:43:13,600 --> 01:43:15,040
as

2675
01:43:15,040 --> 01:43:16,719
we are

2676
01:43:16,719 --> 01:43:18,880
you know like uh avt core has just

2677
01:43:18,880 --> 01:43:22,080
adopted uh an rtp over

2678
01:43:22,080 --> 01:43:22,840
quick

2679
01:43:22,840 --> 01:43:24,960
uh dra draft

2680
01:43:24,960 --> 01:43:27,280
uh and we had a

2681
01:43:27,280 --> 01:43:29,840
uh media over quick buff this week that

2682
01:43:29,840 --> 01:43:31,840
was not as much of a train wreck as it

2683
01:43:31,840 --> 01:43:33,199
could have been

2684
01:43:33,199 --> 01:43:36,159
um you know if if if

2685
01:43:36,159 --> 01:43:39,040
especially if that second uh

2686
01:43:39,040 --> 01:43:41,440
chunk of work uh gets chartered between

2687
01:43:41,440 --> 01:43:43,040
now and november

2688
01:43:43,040 --> 01:43:46,719
uh i think i think it would be

2689
01:43:46,719 --> 01:43:48,639
you know i would i would i would like to

2690
01:43:48,639 --> 01:43:50,239
see uh

2691
01:43:50,239 --> 01:43:53,119
an adoption call go out sometime between

2692
01:43:53,119 --> 01:43:55,520
you know like i say roughly

2693
01:43:55,520 --> 01:43:58,159
uh when it seems right to the chairs but

2694
01:43:58,159 --> 01:44:01,040
uh i know which i know which way i would

2695
01:44:01,040 --> 01:44:02,719
i would um

2696
01:44:02,719 --> 01:44:05,040
on an adoption call but do the right

2697
01:44:05,040 --> 01:44:07,840
thing of course

2698
01:44:10,639 --> 01:44:13,280
thanks um i also see there's some some

2699
01:44:13,280 --> 01:44:15,679
discussion in you know in the in the

2700
01:44:15,679 --> 01:44:17,199
jabber that i've been trying to keep up

2701
01:44:17,199 --> 01:44:18,080
with

2702
01:44:18,080 --> 01:44:19,440
um

2703
01:44:19,440 --> 01:44:21,840
i you know we will take on both these

2704
01:44:21,840 --> 01:44:23,040
comments and

2705
01:44:23,040 --> 01:44:24,639
uh matt and i will have a discussion i

2706
01:44:24,639 --> 01:44:26,800
think

2707
01:44:27,520 --> 01:44:28,719
all right do you have the ones from

2708
01:44:28,719 --> 01:44:31,119
china

2709
01:44:31,679 --> 01:44:35,480
the big one from janna

2710
01:44:47,679 --> 01:44:50,159
yet janna had problems joining or like

2711
01:44:50,159 --> 01:44:51,520
not joining the cube with the audio i

2712
01:44:51,520 --> 01:44:52,639
guess

2713
01:44:52,639 --> 01:44:54,880
um

2714
01:44:58,639 --> 01:45:03,639
yeah i can read john's comment uh

2715
01:45:14,400 --> 01:45:17,040
is mentioning that they should be

2716
01:45:17,040 --> 01:45:19,280
work on the variation of the one-way

2717
01:45:19,280 --> 01:45:21,760
delay which is correct i mean

2718
01:45:21,760 --> 01:45:24,080
all the measurements of delays over the

2719
01:45:24,080 --> 01:45:25,600
internet

2720
01:45:25,600 --> 01:45:27,679
are uncertain in the sense that you

2721
01:45:27,679 --> 01:45:29,440
don't know which the reference is

2722
01:45:29,440 --> 01:45:30,880
exactly

2723
01:45:30,880 --> 01:45:32,320
so

2724
01:45:32,320 --> 01:45:34,400
you'd never measure absolute delay

2725
01:45:34,400 --> 01:45:36,960
because there is all your equations all

2726
01:45:36,960 --> 01:45:38,639
your systems of the question

2727
01:45:38,639 --> 01:45:40,560
end up on the terminate

2728
01:45:40,560 --> 01:45:43,040
and you have to make an arbitrary choice

2729
01:45:43,040 --> 01:45:45,119
of whether the delays one way or the

2730
01:45:45,119 --> 01:45:46,800
other way what you do measure then are

2731
01:45:46,800 --> 01:45:48,719
the variation of the delay

2732
01:45:48,719 --> 01:45:51,040
and and that is correct

2733
01:45:51,040 --> 01:45:52,000
and

2734
01:45:52,000 --> 01:45:54,639
and we could go explaining that i

2735
01:45:54,639 --> 01:45:57,760
it's kind of obvious too but

2736
01:45:57,760 --> 01:45:59,760
the kind of stuff that i would like to

2737
01:45:59,760 --> 01:46:02,719
see after the adoption

2738
01:46:02,719 --> 01:46:06,080
because uh clearly uh that could be done

2739
01:46:06,080 --> 01:46:09,440
by a pr in the draft and a discussion

2740
01:46:09,440 --> 01:46:11,440
and i don't disagree with china that's

2741
01:46:11,440 --> 01:46:14,799
what actually used but

2742
01:46:16,080 --> 01:46:18,080
but yes i mean i think

2743
01:46:18,080 --> 01:46:20,320
i'd be very happy to watch with jenna if

2744
01:46:20,320 --> 01:46:22,000
someone if someone is actually working

2745
01:46:22,000 --> 01:46:24,000
on this and wants to improve

2746
01:46:24,000 --> 01:46:25,679
and want to become a co-author or

2747
01:46:25,679 --> 01:46:27,520
something i'll be happy to have one too

2748
01:46:27,520 --> 01:46:29,199
i mean it's not okay

2749
01:46:29,199 --> 01:46:32,320
i want to own that same

2750
01:46:32,320 --> 01:46:35,360
i think my audio might be working again

2751
01:46:35,360 --> 01:46:39,040
okay oh wow okay awesome

2752
01:46:39,040 --> 01:46:41,520
so yeah i agree with you i look clarify

2753
01:46:41,520 --> 01:46:42,800
this because i think this is a point of

2754
01:46:42,800 --> 01:46:45,760
contact confusion oftentimes for folks

2755
01:46:45,760 --> 01:46:46,880
um

2756
01:46:46,880 --> 01:46:48,960
just calling it one-way delay delta

2757
01:46:48,960 --> 01:46:51,360
is it makes it clearer however i think

2758
01:46:51,360 --> 01:46:53,520
my higher order point here is that i

2759
01:46:53,520 --> 01:46:55,040
think the draft is useful because it

2760
01:46:55,040 --> 01:46:56,239
allows people to actually have a

2761
01:46:56,239 --> 01:46:59,199
mechanism to experiment with yeah

2762
01:46:59,199 --> 01:47:02,320
but in in in without actually having a

2763
01:47:02,320 --> 01:47:03,520
lot of people

2764
01:47:03,520 --> 01:47:05,040
asking

2765
01:47:05,040 --> 01:47:08,320
for how for for usage of this thing

2766
01:47:08,320 --> 01:47:10,480
it'll be difficult to design a mechanism

2767
01:47:10,480 --> 01:47:11,840
that's going to

2768
01:47:11,840 --> 01:47:13,360
um

2769
01:47:13,360 --> 01:47:15,440
be worth standardizing that's my opinion

2770
01:47:15,440 --> 01:47:16,960
i think that we need people with use

2771
01:47:16,960 --> 01:47:18,960
cases before we can actually adopt and

2772
01:47:18,960 --> 01:47:22,679
standardize something

2773
01:47:23,520 --> 01:47:25,679
okay thanks johnna um

2774
01:47:25,679 --> 01:47:27,920
we're at time for this item um i could

2775
01:47:27,920 --> 01:47:29,199
say we'll we'll go away and do some

2776
01:47:29,199 --> 01:47:31,760
discussion um with various people um

2777
01:47:31,760 --> 01:47:33,760
this has been very useful so thank you

2778
01:47:33,760 --> 01:47:35,119
all for the comments

2779
01:47:35,119 --> 01:47:36,800
thank you christian thank you

2780
01:47:36,800 --> 01:47:39,199
thank you

2781
01:47:43,280 --> 01:47:47,880
next up is uh jake holland

2782
01:47:56,639 --> 01:47:58,960
hello

2783
01:48:00,639 --> 01:48:02,880
are you at slides

2784
01:48:02,880 --> 01:48:05,119
you're

2785
01:48:06,880 --> 01:48:08,000
uh

2786
01:48:08,000 --> 01:48:10,000
i don't have any means to run the slides

2787
01:48:10,000 --> 01:48:10,880
doing

2788
01:48:10,880 --> 01:48:12,159
oh on my phone is that the way i'm

2789
01:48:12,159 --> 01:48:14,639
supposed to do it

2790
01:48:14,639 --> 01:48:19,840
could you uh bring up if that's possible

2791
01:48:26,639 --> 01:48:28,480
oh great yeah hi i'm jake holland

2792
01:48:28,480 --> 01:48:31,520
multicast enthusiast um i'm here to talk

2793
01:48:31,520 --> 01:48:33,119
about uh our

2794
01:48:33,119 --> 01:48:36,000
multicast quick proposal

2795
01:48:36,000 --> 01:48:38,480
uh so i'll just be

2796
01:48:38,480 --> 01:48:41,199
mainly going over the actual proposal uh

2797
01:48:41,199 --> 01:48:43,280
if you want to see why

2798
01:48:43,280 --> 01:48:45,520
uh i went over that there was a barb off

2799
01:48:45,520 --> 01:48:46,800
at

2800
01:48:46,800 --> 01:48:48,880
the remote 111

2801
01:48:48,880 --> 01:48:50,639
and there's links to that and the slides

2802
01:48:50,639 --> 01:48:52,400
there we also went over a little bit at

2803
01:48:52,400 --> 01:48:53,199
that

2804
01:48:53,199 --> 01:48:55,280
went over a little bit of it in uh sec

2805
01:48:55,280 --> 01:48:57,440
dispatch at 112.

2806
01:48:57,440 --> 01:48:58,800
this proposal is largely a follow

2807
01:48:58,800 --> 01:49:01,360
follow-up to that sick dispatch 112

2808
01:49:01,360 --> 01:49:03,040
discussion where

2809
01:49:03,040 --> 01:49:05,119
some of the feedback we got is that we

2810
01:49:05,119 --> 01:49:07,119
needed a

2811
01:49:07,119 --> 01:49:08,239
specific

2812
01:49:08,239 --> 01:49:11,199
protocol proposal for the

2813
01:49:11,199 --> 01:49:12,719
security characteristics we were looking

2814
01:49:12,719 --> 01:49:17,520
to get with our multicast security

2815
01:49:17,520 --> 01:49:18,960
consideration stock that tried to go

2816
01:49:18,960 --> 01:49:21,599
over the security considerations for

2817
01:49:21,599 --> 01:49:23,520
using multicast to deliver web traffic

2818
01:49:23,520 --> 01:49:25,599
specifically but also for

2819
01:49:25,599 --> 01:49:26,840
generalized

2820
01:49:26,840 --> 01:49:28,560
non-web

2821
01:49:28,560 --> 01:49:30,480
traffic

2822
01:49:30,480 --> 01:49:32,719
delivered over multicast

2823
01:49:32,719 --> 01:49:34,960
so that's the well

2824
01:49:34,960 --> 01:49:37,520
i won't go in depth but uh i'll just try

2825
01:49:37,520 --> 01:49:39,199
to give a kind of a really basic

2826
01:49:39,199 --> 01:49:43,400
overview next slide please

2827
01:49:48,320 --> 01:49:50,239
thank you

2828
01:49:50,239 --> 01:49:51,520
so the basic idea is we're just

2829
01:49:51,520 --> 01:49:52,560
supporting

2830
01:49:52,560 --> 01:49:55,679
source specific ip multicast

2831
01:49:55,679 --> 01:49:57,840
this is anchored to a unicast connection

2832
01:49:57,840 --> 01:49:59,040
so

2833
01:49:59,040 --> 01:50:00,400
there's always a unicast connection

2834
01:50:00,400 --> 01:50:02,159
between a server and a client and then

2835
01:50:02,159 --> 01:50:04,320
the server can tell the client

2836
01:50:04,320 --> 01:50:05,760
by the way some of the data that i'm

2837
01:50:05,760 --> 01:50:07,360
trying to send you the way you should

2838
01:50:07,360 --> 01:50:08,960
get it is you should join this multicast

2839
01:50:08,960 --> 01:50:10,880
session you'll see some

2840
01:50:10,880 --> 01:50:14,800
1rtt quick packets there here are their

2841
01:50:14,800 --> 01:50:16,719
keys to decode obviously since it's

2842
01:50:16,719 --> 01:50:18,560
multicast the packets are identical for

2843
01:50:18,560 --> 01:50:20,639
every receiver these are shared

2844
01:50:20,639 --> 01:50:23,840
symmetric keys

2845
01:50:23,840 --> 01:50:25,599
that's one of the things we get into in

2846
01:50:25,599 --> 01:50:27,679
the in the security consideration stack

2847
01:50:27,679 --> 01:50:29,920
that's essentially the

2848
01:50:29,920 --> 01:50:31,760
security consideration section for this

2849
01:50:31,760 --> 01:50:33,119
document

2850
01:50:33,119 --> 01:50:34,960
um

2851
01:50:34,960 --> 01:50:36,400
and uh

2852
01:50:36,400 --> 01:50:38,800
because they are widely distributed

2853
01:50:38,800 --> 01:50:42,000
shared keys we also have separate um

2854
01:50:42,000 --> 01:50:44,239
integrity packets that are

2855
01:50:44,239 --> 01:50:47,119
anchored on the unicast connection to

2856
01:50:47,119 --> 01:50:48,480
that mean that even though the keys are

2857
01:50:48,480 --> 01:50:50,320
shared the packets cannot be spoofed

2858
01:50:50,320 --> 01:50:52,800
they must be

2859
01:50:52,800 --> 01:50:55,679
proven to have been sent by the actual

2860
01:50:55,679 --> 01:50:57,920
server that you're talking to

2861
01:50:57,920 --> 01:51:00,480
the server controls the entire

2862
01:51:00,480 --> 01:51:01,440
sort of

2863
01:51:01,440 --> 01:51:03,360
multicast

2864
01:51:03,360 --> 01:51:05,040
listening process on behalf of the

2865
01:51:05,040 --> 01:51:06,880
client they tell the client what to join

2866
01:51:06,880 --> 01:51:09,119
the client's not required to join these

2867
01:51:09,119 --> 01:51:12,320
these sessions but may join in order to

2868
01:51:12,320 --> 01:51:14,320
sort of get a better delivery

2869
01:51:14,320 --> 01:51:16,960
scalability

2870
01:51:17,920 --> 01:51:19,119
and

2871
01:51:19,119 --> 01:51:21,599
the client provides limits so the all

2872
01:51:21,599 --> 01:51:23,520
the all the flow control and congestion

2873
01:51:23,520 --> 01:51:25,920
control is different in a way sort of

2874
01:51:25,920 --> 01:51:27,840
dictated by the

2875
01:51:27,840 --> 01:51:29,440
requirements of multicast and we go over

2876
01:51:29,440 --> 01:51:30,880
some of that in the document but some of

2877
01:51:30,880 --> 01:51:32,159
it is sort of

2878
01:51:32,159 --> 01:51:34,239
why we're proposing this as experimental

2879
01:51:34,239 --> 01:51:35,840
at this time

2880
01:51:35,840 --> 01:51:37,920
uh but what the client provides is some

2881
01:51:37,920 --> 01:51:39,599
limits that the server's responsible for

2882
01:51:39,599 --> 01:51:41,119
staying within as it tells the client

2883
01:51:41,119 --> 01:51:43,599
what to do right

2884
01:51:43,599 --> 01:51:44,960
and the client sends ax for all the

2885
01:51:44,960 --> 01:51:46,560
packets that it receives and this is

2886
01:51:46,560 --> 01:51:48,719
very similar in a lot of ways to the

2887
01:51:48,719 --> 01:51:50,480
multi-path work

2888
01:51:50,480 --> 01:51:53,679
um the the packets are just interpreted

2889
01:51:53,679 --> 01:51:56,560
as a part of the unicast connection that

2890
01:51:56,560 --> 01:51:57,920
you've got

2891
01:51:57,920 --> 01:52:00,639
uh it's anchored on a client on a

2892
01:52:00,639 --> 01:52:02,560
channel id rather than a connection id

2893
01:52:02,560 --> 01:52:04,480
but that's essentially just a layer of

2894
01:52:04,480 --> 01:52:07,520
indirection to the connection id

2895
01:52:07,520 --> 01:52:09,280
and the reason for that is basically

2896
01:52:09,280 --> 01:52:10,080
that

2897
01:52:10,080 --> 01:52:11,280
again it's

2898
01:52:11,280 --> 01:52:12,800
shared identical packets that are sent

2899
01:52:12,800 --> 01:52:15,199
to many receivers and so

2900
01:52:15,199 --> 01:52:16,880
the server has to choose that

2901
01:52:16,880 --> 01:52:19,520
destination connection id

2902
01:52:19,520 --> 01:52:21,360
essentially connection id but that's a

2903
01:52:21,360 --> 01:52:22,719
channel id in the place that the

2904
01:52:22,719 --> 01:52:24,639
connection id goes in the multicast

2905
01:52:24,639 --> 01:52:26,480
packets

2906
01:52:26,480 --> 01:52:28,800
and the the unicast

2907
01:52:28,800 --> 01:52:31,760
frames communicate what those channels

2908
01:52:31,760 --> 01:52:33,520
what those channel ids are

2909
01:52:33,520 --> 01:52:36,560
all right next slide please

2910
01:52:39,440 --> 01:52:41,599
so the the multicast channels are only

2911
01:52:41,599 --> 01:52:44,560
for server to client data only for

2912
01:52:44,560 --> 01:52:47,280
server initiated streams essentially it

2913
01:52:47,280 --> 01:52:49,440
can be used for datagrams as well

2914
01:52:49,440 --> 01:52:51,840
not so much for web traffic because h3

2915
01:52:51,840 --> 01:52:53,040
datagrams

2916
01:52:53,040 --> 01:52:55,760
have a have a client chosen

2917
01:52:55,760 --> 01:52:59,760
id inside them but for non-web datagrams

2918
01:52:59,760 --> 01:53:01,679
it still should be possible

2919
01:53:01,679 --> 01:53:03,840
for server initiated streams it also we

2920
01:53:03,840 --> 01:53:05,599
think is possible

2921
01:53:05,599 --> 01:53:07,599
um

2922
01:53:07,599 --> 01:53:09,199
and the packets are just interpreted in

2923
01:53:09,199 --> 01:53:11,040
the context of that connection the the

2924
01:53:11,040 --> 01:53:12,239
of the unicast connection that you

2925
01:53:12,239 --> 01:53:14,000
already have

2926
01:53:14,000 --> 01:53:15,440
um

2927
01:53:15,440 --> 01:53:16,239
yeah

2928
01:53:16,239 --> 01:53:17,599
uh

2929
01:53:17,599 --> 01:53:19,599
any any questions about any of this i'd

2930
01:53:19,599 --> 01:53:21,440
be happy to go over but uh

2931
01:53:21,440 --> 01:53:23,520
let's just let's just move on for time

2932
01:53:23,520 --> 01:53:24,880
here

2933
01:53:24,880 --> 01:53:29,040
um again for discussion uh yeah next

2934
01:53:29,040 --> 01:53:31,199
slide

2935
01:53:31,199 --> 01:53:34,000
uh for discussion um

2936
01:53:34,000 --> 01:53:36,480
uh so we're working on an implementation

2937
01:53:36,480 --> 01:53:38,560
uh this is in conjunction with uh

2938
01:53:38,560 --> 01:53:41,119
several members of the w3 multicast

2939
01:53:41,119 --> 01:53:42,960
community w3c

2940
01:53:42,960 --> 01:53:45,679
multicast community group

2941
01:53:45,679 --> 01:53:48,800
we've been basing it so far on the

2942
01:53:48,800 --> 01:53:52,159
on the google quiche implementation

2943
01:53:52,159 --> 01:53:53,760
working toward a demo that could run in

2944
01:53:53,760 --> 01:53:55,599
a browser but

2945
01:53:55,599 --> 01:53:56,639
you know we just want to prove to

2946
01:53:56,639 --> 01:53:58,800
ourselves that it will work essentially

2947
01:53:58,800 --> 01:54:00,880
but we think that it will

2948
01:54:00,880 --> 01:54:03,119
um

2949
01:54:03,760 --> 01:54:06,480
in terms of implementation status or the

2950
01:54:06,480 --> 01:54:08,560
the maturity the of the spec and what we

2951
01:54:08,560 --> 01:54:11,040
think we solved uh we don't know of any

2952
01:54:11,040 --> 01:54:12,719
reasons that this does not match the

2953
01:54:12,719 --> 01:54:14,880
security considerations document but we

2954
01:54:14,880 --> 01:54:16,800
do think for web traffic we've recently

2955
01:54:16,800 --> 01:54:19,520
noticed that we probably need to

2956
01:54:19,520 --> 01:54:21,199
include something that more strictly

2957
01:54:21,199 --> 01:54:24,080
enforces the origin policy or allows the

2958
01:54:24,080 --> 01:54:26,560
the browser to enforce origin policy on

2959
01:54:26,560 --> 01:54:27,679
the

2960
01:54:27,679 --> 01:54:29,599
uh multicast packets that are received

2961
01:54:29,599 --> 01:54:31,119
we do think this is possible we have a

2962
01:54:31,119 --> 01:54:32,480
couple ways

2963
01:54:32,480 --> 01:54:33,599
to do it

2964
01:54:33,599 --> 01:54:36,639
that's not yet part of the draft but

2965
01:54:36,639 --> 01:54:37,920
just by

2966
01:54:37,920 --> 01:54:39,440
because the packets

2967
01:54:39,440 --> 01:54:40,560
are

2968
01:54:40,560 --> 01:54:43,520
integrity protected and can't be spoofed

2969
01:54:43,520 --> 01:54:45,199
we think that for example we could

2970
01:54:45,199 --> 01:54:46,320
include an

2971
01:54:46,320 --> 01:54:48,320
origin frame

2972
01:54:48,320 --> 01:54:50,480
in the multicast packets and this would

2973
01:54:50,480 --> 01:54:53,040
uh give the browser the information it

2974
01:54:53,040 --> 01:54:54,639
needs to

2975
01:54:54,639 --> 01:54:56,800
avoid including anything for a wrong

2976
01:54:56,800 --> 01:55:00,639
origin uh in the data that's processing

2977
01:55:00,639 --> 01:55:02,719
uh so we we don't think that this should

2978
01:55:02,719 --> 01:55:05,440
be considered

2979
01:55:07,199 --> 01:55:08,400
mixed content

2980
01:55:08,400 --> 01:55:09,920
but

2981
01:55:09,920 --> 01:55:11,440
opinions may differ on this point and

2982
01:55:11,440 --> 01:55:13,520
we'd be interested in hearing reasons

2983
01:55:13,520 --> 01:55:16,800
why we might be wrong here

2984
01:55:16,880 --> 01:55:19,840
next slide

2985
01:55:23,760 --> 01:55:25,520
uh we have a number of protocol

2986
01:55:25,520 --> 01:55:27,840
extensions and the reasons are

2987
01:55:27,840 --> 01:55:30,480
basically all just driven by um you know

2988
01:55:30,480 --> 01:55:32,000
we're asking for basically ten new

2989
01:55:32,000 --> 01:55:33,520
frames at this point

2990
01:55:33,520 --> 01:55:35,199
um

2991
01:55:35,199 --> 01:55:37,760
we outline them in the draft uh we have

2992
01:55:37,760 --> 01:55:38,560
you know this is part of the

2993
01:55:38,560 --> 01:55:40,480
implementation that's uh that's working

2994
01:55:40,480 --> 01:55:41,440
there

2995
01:55:41,440 --> 01:55:43,119
uh but there's essentially just

2996
01:55:43,119 --> 01:55:44,560
management of the

2997
01:55:44,560 --> 01:55:46,880
multicast channels in the unicast stream

2998
01:55:46,880 --> 01:55:48,320
where the server tells the client about

2999
01:55:48,320 --> 01:55:49,360
them

3000
01:55:49,360 --> 01:55:51,119
management of the client state

3001
01:55:51,119 --> 01:55:52,639
and then the acts that are associated

3002
01:55:52,639 --> 01:55:53,840
with it

3003
01:55:53,840 --> 01:55:55,520
plus the integrity guarantees that

3004
01:55:55,520 --> 01:55:58,800
require a separate uh integrity path

3005
01:55:58,800 --> 01:56:00,320
and we can go into the details of all

3006
01:56:00,320 --> 01:56:02,400
this uh i'd be happy to talk offline as

3007
01:56:02,400 --> 01:56:04,719
well we probably don't have

3008
01:56:04,719 --> 01:56:07,679
uh time for as detailed a discussion as

3009
01:56:07,679 --> 01:56:10,960
what we saw in some of the more uh

3010
01:56:10,960 --> 01:56:13,360
uh standardized pieces earlier in the

3011
01:56:13,360 --> 01:56:14,400
session

3012
01:56:14,400 --> 01:56:17,119
but next slide

3013
01:56:18,480 --> 01:56:21,920
the basic question i've got is

3014
01:56:21,920 --> 01:56:24,400
is this interesting to anyone we think

3015
01:56:24,400 --> 01:56:26,560
that we can solve a big scale problem

3016
01:56:26,560 --> 01:56:29,440
here um we certainly would like to

3017
01:56:29,440 --> 01:56:30,960
deploy this we're interested in

3018
01:56:30,960 --> 01:56:32,880
deploying it uh

3019
01:56:32,880 --> 01:56:34,800
non-browser at first because we've had

3020
01:56:34,800 --> 01:56:36,560
sort of a

3021
01:56:36,560 --> 01:56:38,239
skepticism i think from the browser

3022
01:56:38,239 --> 01:56:40,480
community so far

3023
01:56:40,480 --> 01:56:45,679
but from the isp community we have uh

3024
01:56:45,679 --> 01:56:47,760
you know

3025
01:56:47,760 --> 01:56:50,320
some consensus that uh the scaling

3026
01:56:50,320 --> 01:56:51,760
problems need to be solved there's too

3027
01:56:51,760 --> 01:56:54,000
many there's uh too many

3028
01:56:54,000 --> 01:56:56,560
events that are sort of exceeding the

3029
01:56:56,560 --> 01:56:58,880
capacity of the networks to deliver

3030
01:56:58,880 --> 01:57:01,440
when there's popular content this is

3031
01:57:01,440 --> 01:57:03,040
primarily driven by

3032
01:57:03,040 --> 01:57:04,560
[Music]

3033
01:57:04,560 --> 01:57:08,080
by popular sports and by large downloads

3034
01:57:08,080 --> 01:57:09,840
most large downloads would not be web

3035
01:57:09,840 --> 01:57:12,560
would not be web traffic but the popular

3036
01:57:12,560 --> 01:57:14,560
sports often is particularly when you

3037
01:57:14,560 --> 01:57:16,400
consider that

3038
01:57:16,400 --> 01:57:18,560
a lot of the smart tvs basically are

3039
01:57:18,560 --> 01:57:20,719
using web apis underneath

3040
01:57:20,719 --> 01:57:22,719
uh something like 60 plus percent

3041
01:57:22,719 --> 01:57:25,760
growing last i heard um

3042
01:57:25,760 --> 01:57:27,360
but

3043
01:57:27,360 --> 01:57:30,800
you know in addition various forms of uh

3044
01:57:30,800 --> 01:57:31,599
you know

3045
01:57:31,599 --> 01:57:34,159
browser apps and and

3046
01:57:34,159 --> 01:57:35,520
a lot of the clients actually using

3047
01:57:35,520 --> 01:57:37,280
browsers inside as well

3048
01:57:37,280 --> 01:57:39,840
so um

3049
01:57:39,840 --> 01:57:42,480
yeah i guess my first question is like

3050
01:57:42,480 --> 01:57:45,199
does anybody think this is worthwhile a

3051
01:57:45,199 --> 01:57:47,919
and if so like

3052
01:57:48,159 --> 01:57:49,840
what do you recommend we should do

3053
01:57:49,840 --> 01:57:53,119
before asking for adoption or

3054
01:57:53,119 --> 01:57:56,400
you know where should this go

3055
01:57:56,400 --> 01:57:58,560
uh and we'll be discussing this more in

3056
01:57:58,560 --> 01:58:00,719
mbo indian next session by the way so

3057
01:58:00,719 --> 01:58:03,119
come there if you're interested we can

3058
01:58:03,119 --> 01:58:06,759
get into it more

3059
01:58:09,040 --> 01:58:10,239
alex

3060
01:58:10,239 --> 01:58:12,800
hi alex ranowski google um i was looking

3061
01:58:12,800 --> 01:58:15,040
over the slides before you're talking i

3062
01:58:15,040 --> 01:58:16,800
mostly had the observation that i feel

3063
01:58:16,800 --> 01:58:19,599
like what you're proposing is not

3064
01:58:19,599 --> 01:58:21,679
something that is in quick but something

3065
01:58:21,679 --> 01:58:23,520
that could be built on top of either tcp

3066
01:58:23,520 --> 01:58:24,960
or quick with the type of control

3067
01:58:24,960 --> 01:58:26,800
channel stuff that you're doing so my

3068
01:58:26,800 --> 01:58:28,639
question is really is quick the right

3069
01:58:28,639 --> 01:58:31,040
place to do this or is this a separate

3070
01:58:31,040 --> 01:58:33,040
protocol for here is how i want to join

3071
01:58:33,040 --> 01:58:34,880
a multicast thing and a separate framing

3072
01:58:34,880 --> 01:58:36,560
layer for here is the multicast

3073
01:58:36,560 --> 01:58:39,280
available data

3074
01:58:39,840 --> 01:58:41,119
well

3075
01:58:41,119 --> 01:58:45,599
uh we're looking for some frames in the

3076
01:58:45,599 --> 01:58:49,760
in the iana registries for quick um

3077
01:58:49,760 --> 01:58:51,760
you know does it have to be quick

3078
01:58:51,760 --> 01:58:53,199
uh no i mean you can have different

3079
01:58:53,199 --> 01:58:55,599
multicast protocols that's possible

3080
01:58:55,599 --> 01:58:57,360
we could do something that has the same

3081
01:58:57,360 --> 01:59:00,080
security properties that's not quick

3082
01:59:00,080 --> 01:59:01,520
or we could have our own proprietary

3083
01:59:01,520 --> 01:59:02,800
extension if we're going to be shipping

3084
01:59:02,800 --> 01:59:05,679
fat clients um but

3085
01:59:05,679 --> 01:59:07,679
uh we would like to aim toward an

3086
01:59:07,679 --> 01:59:08,719
eventual

3087
01:59:08,719 --> 01:59:10,080
uh

3088
01:59:10,080 --> 01:59:11,199
something that can eventually be

3089
01:59:11,199 --> 01:59:12,800
included in browsers so that's kind of

3090
01:59:12,800 --> 01:59:14,840
where i'm coming from with the quick

3091
01:59:14,840 --> 01:59:16,880
effort thanks

3092
01:59:16,880 --> 01:59:19,040
hey larry zachary so i i like to select

3093
01:59:19,040 --> 01:59:20,719
this um already when lucas came up with

3094
01:59:20,719 --> 01:59:22,400
it a few years ago and i'm glad to see

3095
01:59:22,400 --> 01:59:24,560
that it's sort of being progressing

3096
01:59:24,560 --> 01:59:26,480
um

3097
01:59:26,480 --> 01:59:28,159
because we all had this gap in transport

3098
01:59:28,159 --> 01:59:29,679
right between the unicast and the

3099
01:59:29,679 --> 01:59:31,040
multicast and we could never sort of

3100
01:59:31,040 --> 01:59:32,960
figure out how can actually leverage the

3101
01:59:32,960 --> 01:59:35,440
power that multicast potentially offers

3102
01:59:35,440 --> 01:59:37,920
more easily for applications and for

3103
01:59:37,920 --> 01:59:39,280
um you know

3104
01:59:39,280 --> 01:59:40,880
users and then this

3105
01:59:40,880 --> 01:59:42,159
goes in that direction which is sort of

3106
01:59:42,159 --> 01:59:45,119
kind of exciting um

3107
01:59:45,119 --> 01:59:46,480
i don't want to speak about the adoption

3108
01:59:46,480 --> 01:59:47,840
call but sort of in terms of what i

3109
01:59:47,840 --> 01:59:50,000
would see do you think about this sort

3110
01:59:50,000 --> 01:59:50,719
of

3111
01:59:50,719 --> 01:59:52,719
how general a mechanism this could be i

3112
01:59:52,719 --> 01:59:54,000
mean there's some obvious use cases

3113
01:59:54,000 --> 01:59:56,000
right that are motivating this but

3114
01:59:56,000 --> 01:59:57,599
um this is sort of the first time that

3115
01:59:57,599 --> 01:59:59,760
we have an approach that mixes

3116
01:59:59,760 --> 02:00:02,320
unicast or multicast pretty easily and

3117
02:00:02,320 --> 02:00:03,599
efficiently it would be great if it

3118
02:00:03,599 --> 02:00:05,679
would be usable for lots of stuff thank

3119
02:00:05,679 --> 02:00:07,199
you

3120
02:00:07,199 --> 02:00:09,840
yeah that's a good question um

3121
02:00:09,840 --> 02:00:12,480
i guess i would point to uh the the warp

3122
02:00:12,480 --> 02:00:14,080
and rush proposals we think we can just

3123
02:00:14,080 --> 02:00:15,920
do as is because these use server

3124
02:00:15,920 --> 02:00:17,360
initiated data for pushing from the

3125
02:00:17,360 --> 02:00:19,119
server side so

3126
02:00:19,119 --> 02:00:20,159
uh

3127
02:00:20,159 --> 02:00:22,639
that that's the demo i'd like to run uh

3128
02:00:22,639 --> 02:00:24,800
you know inside a custom browser

3129
02:00:24,800 --> 02:00:26,880
is just use web transport

3130
02:00:26,880 --> 02:00:28,480
with the existing thing and it doesn't

3131
02:00:28,480 --> 02:00:30,560
have to change the application at all

3132
02:00:30,560 --> 02:00:32,400
i think that

3133
02:00:32,400 --> 02:00:35,040
you know server push based

3134
02:00:35,040 --> 02:00:37,840
hls or dash could do the same thing

3135
02:00:37,840 --> 02:00:39,840
although server push i gather is being

3136
02:00:39,840 --> 02:00:41,440
removed from the browsers unfortunately

3137
02:00:41,440 --> 02:00:42,560
so

3138
02:00:42,560 --> 02:00:45,440
uh i'm not sure that'll be any better in

3139
02:00:45,440 --> 02:00:47,199
the near future but we could also like

3140
02:00:47,199 --> 02:00:48,159
keep

3141
02:00:48,159 --> 02:00:49,679
keep a fork that keeps the server push

3142
02:00:49,679 --> 02:00:51,280
cache around and try it there for the

3143
02:00:51,280 --> 02:00:52,480
same kind of thing

3144
02:00:52,480 --> 02:00:53,440
but yeah we think it should be

3145
02:00:53,440 --> 02:00:55,119
transparent for the apps

3146
02:00:55,119 --> 02:00:57,199
yeah thanks

3147
02:00:57,199 --> 02:00:59,599
mike bishop um i'm a little surprised

3148
02:00:59,599 --> 02:01:02,400
that you're putting quick frames on the

3149
02:01:02,400 --> 02:01:04,880
multicast stream i would have

3150
02:01:04,880 --> 02:01:06,480
would have thought the multicast stream

3151
02:01:06,480 --> 02:01:07,599
would just be

3152
02:01:07,599 --> 02:01:09,920
raw data delivery and then the frames on

3153
02:01:09,920 --> 02:01:10,800
the

3154
02:01:10,800 --> 02:01:13,280
unicast quick session

3155
02:01:13,280 --> 02:01:15,920
tell you what to do with it basically

3156
02:01:15,920 --> 02:01:17,920
uh so

3157
02:01:17,920 --> 02:01:21,119
one of the one of the actually

3158
02:01:21,119 --> 02:01:23,920
nice design choices and in quick the

3159
02:01:23,920 --> 02:01:26,239
consequences of this are that it works

3160
02:01:26,239 --> 02:01:28,560
pretty well to just put the the quick

3161
02:01:28,560 --> 02:01:30,800
frames on the

3162
02:01:30,800 --> 02:01:32,960
uh on the multicast stream

3163
02:01:32,960 --> 02:01:34,320
and then use the same encryption

3164
02:01:34,320 --> 02:01:36,800
strategies

3165
02:01:36,800 --> 02:01:38,480
and use the same

3166
02:01:38,480 --> 02:01:40,560
use the same deframing

3167
02:01:40,560 --> 02:01:42,159
this is actually a very similar problem

3168
02:01:42,159 --> 02:01:44,400
to like the multi-pathwork right

3169
02:01:44,400 --> 02:01:45,599
this is just

3170
02:01:45,599 --> 02:01:46,880
you know you can have a stream that's

3171
02:01:46,880 --> 02:01:48,400
partially carried on one path partially

3172
02:01:48,400 --> 02:01:50,080
charted on another path they can be

3173
02:01:50,080 --> 02:01:51,520
combined as long as they have the same

3174
02:01:51,520 --> 02:01:53,599
data at all the same offsets right right

3175
02:01:53,599 --> 02:01:54,719
so

3176
02:01:54,719 --> 02:01:56,239
that's essentially what we're doing here

3177
02:01:56,239 --> 02:01:56,960
and

3178
02:01:56,960 --> 02:01:58,560
so you have a shared path on the

3179
02:01:58,560 --> 02:02:00,159
multi-path connection

3180
02:02:00,159 --> 02:02:01,760
well it's an alternate path for the

3181
02:02:01,760 --> 02:02:04,480
multi you know the the the multicast

3182
02:02:04,480 --> 02:02:07,520
uh the multicast channel is just a an

3183
02:02:07,520 --> 02:02:09,040
alternate network path that carries the

3184
02:02:09,040 --> 02:02:10,719
same data

3185
02:02:10,719 --> 02:02:12,560
so once you've decoded it then you merge

3186
02:02:12,560 --> 02:02:14,800
it as part of the same connection for

3187
02:02:14,800 --> 02:02:16,400
your packet processing

3188
02:02:16,400 --> 02:02:18,480
and you can have almost all the same

3189
02:02:18,480 --> 02:02:20,800
behavior it's just a you know yeah there

3190
02:02:20,800 --> 02:02:21,920
are some differences in like flow

3191
02:02:21,920 --> 02:02:23,840
control and congestion control there's

3192
02:02:23,840 --> 02:02:26,159
some differences in the uh the

3193
02:02:26,159 --> 02:02:28,880
connection id versus the channel id

3194
02:02:28,880 --> 02:02:29,920
um

3195
02:02:29,920 --> 02:02:31,199
but

3196
02:02:31,199 --> 02:02:32,639
most of the packet processing is

3197
02:02:32,639 --> 02:02:34,480
actually the same and and works out

3198
02:02:34,480 --> 02:02:36,639
pretty well

3199
02:02:36,639 --> 02:02:38,480
chair interrupt here we're we're over

3200
02:02:38,480 --> 02:02:40,960
time now um i'd like to thank everyone

3201
02:02:40,960 --> 02:02:43,360
uh jake sorry to interrupt you but i

3202
02:02:43,360 --> 02:02:45,520
think we got some feedback there um

3203
02:02:45,520 --> 02:02:47,280
which is kind of good i'd encourage

3204
02:02:47,280 --> 02:02:48,639
hallway discussion for anyone that

3205
02:02:48,639 --> 02:02:51,280
didn't make the cut we had one more talk

3206
02:02:51,280 --> 02:02:53,920
from emil um which we didn't make time

3207
02:02:53,920 --> 02:02:56,480
for i apologize emil um

3208
02:02:56,480 --> 02:02:58,239
this was in relation to a side meeting

3209
02:02:58,239 --> 02:03:00,159
that was held yesterday i believe some

3210
02:03:00,159 --> 02:03:01,520
of the participants of the quick working

3211
02:03:01,520 --> 02:03:03,599
group were there um

3212
02:03:03,599 --> 02:03:05,679
i i wasn't able to attend unfortunately

3213
02:03:05,679 --> 02:03:07,440
my understanding is this relates to

3214
02:03:07,440 --> 02:03:09,040
quick observability tooling

3215
02:03:09,040 --> 02:03:11,840
visualization analysis my kind of chair

3216
02:03:11,840 --> 02:03:14,080
comment with a hat on is that's work

3217
02:03:14,080 --> 02:03:16,639
that um is completely related to quick

3218
02:03:16,639 --> 02:03:18,080
and i'd love to see

3219
02:03:18,080 --> 02:03:20,159
happen um in the quick working group

3220
02:03:20,159 --> 02:03:23,040
where it makes sense so um i'd encourage

3221
02:03:23,040 --> 02:03:24,960
that kind of thing to be proposed that

3222
02:03:24,960 --> 02:03:26,719
the next quick agenda

3223
02:03:26,719 --> 02:03:28,880
if it makes sense and please speak to

3224
02:03:28,880 --> 02:03:31,599
the chairs about that um in in future

3225
02:03:31,599 --> 02:03:33,520
and we can have that discussion a bit

3226
02:03:33,520 --> 02:03:36,320
earlier maybe um that would be great

3227
02:03:36,320 --> 02:03:37,920
i don't know if matt has any closing

3228
02:03:37,920 --> 02:03:40,320
comments

3229
02:03:40,800 --> 02:03:43,760
nope um okay on that note i'd like to

3230
02:03:43,760 --> 02:03:46,480
thank our jobscribe and notetakers very

3231
02:03:46,480 --> 02:03:48,400
much i'd like to thank zahed for being

3232
02:03:48,400 --> 02:03:51,040
on the ground and helping with uh

3233
02:03:51,040 --> 02:03:53,599
the delegation of responsibilities and

3234
02:03:53,599 --> 02:03:55,119
everyone

3235
02:03:55,119 --> 02:03:57,440
have a great rest of your week

3236
02:03:57,440 --> 02:04:00,239
and a good lunch

3237
02:04:00,320 --> 02:04:01,360
thank you

3238
02:04:01,360 --> 02:04:04,360
bye

3239
02:04:37,199 --> 02:04:40,000
and the youtube folks are like in theory

3240
02:04:40,000 --> 02:04:41,199
but they're like

3241
02:04:41,199 --> 02:04:44,598
this doesn't work

