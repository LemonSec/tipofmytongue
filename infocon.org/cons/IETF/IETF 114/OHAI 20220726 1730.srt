1
00:01:09,119 --> 00:01:10,799
hey y'all um

2
00:01:10,799 --> 00:01:12,799
we're to get started in a moment but do

3
00:01:12,799 --> 00:01:14,560
we have a note taker

4
00:01:14,560 --> 00:01:16,320
is anyone willing to volunteer to be a

5
00:01:16,320 --> 00:01:18,880
note taker

6
00:01:24,640 --> 00:01:27,840
oh great thank you

7
00:01:28,880 --> 00:01:30,479
i think uh chris woodville and

8
00:01:30,479 --> 00:01:32,720
threatened earlier for whatever parts he

9
00:01:32,720 --> 00:01:34,400
wasn't speaking for

10
00:01:34,400 --> 00:01:36,320
but a second second set of hands would

11
00:01:36,320 --> 00:01:39,479
be good

12
00:01:47,040 --> 00:01:48,880
all right richard good to

13
00:01:48,880 --> 00:01:51,439
get started

14
00:01:52,960 --> 00:01:55,839
perfect

15
00:01:56,479 --> 00:01:58,240
yep whenever you're ready yeah i think

16
00:01:58,240 --> 00:02:00,399
if you think we have the people we need

17
00:02:00,399 --> 00:02:03,040
what's going on

18
00:02:03,119 --> 00:02:05,840
your audio's a little bit um

19
00:02:05,840 --> 00:02:09,440
unclear to me but maybe that's just me

20
00:02:09,440 --> 00:02:11,679
but

21
00:02:12,239 --> 00:02:13,280
okay cool

22
00:02:13,280 --> 00:02:16,640
all right um welcome all to ohai

23
00:02:16,640 --> 00:02:17,599
i am

24
00:02:17,599 --> 00:02:19,840
one of your chairs siobhan and we have

25
00:02:19,840 --> 00:02:22,800
richard joining in remotely

26
00:02:22,800 --> 00:02:24,160
and

27
00:02:24,160 --> 00:02:26,560
yeah i think

28
00:02:26,560 --> 00:02:28,720
this is the note well please note it

29
00:02:28,720 --> 00:02:31,599
well also

30
00:02:31,760 --> 00:02:33,760
the ietf has a masking policy which

31
00:02:33,760 --> 00:02:35,519
means that if you're in this room you

32
00:02:35,519 --> 00:02:36,879
should be masked

33
00:02:36,879 --> 00:02:40,319
so just keep that in mind

34
00:02:40,959 --> 00:02:43,360
and just a reminder that

35
00:02:43,360 --> 00:02:45,599
we are using meat echo and

36
00:02:45,599 --> 00:02:48,160
we will be having

37
00:02:48,160 --> 00:02:50,000
like a virtual show of hands at some

38
00:02:50,000 --> 00:02:52,080
point in this meeting so

39
00:02:52,080 --> 00:02:54,640
you will need to use the on-site tool if

40
00:02:54,640 --> 00:02:57,280
you're in the room and then in meet echo

41
00:02:57,280 --> 00:02:59,040
i think if you're online then you should

42
00:02:59,040 --> 00:03:01,840
just be able to you you'll get a pop-up

43
00:03:01,840 --> 00:03:05,440
um over there so yeah just um just keep

44
00:03:05,440 --> 00:03:06,959
that in mind that you might be asked to

45
00:03:06,959 --> 00:03:09,920
use the on-site tool

46
00:03:10,080 --> 00:03:10,879
um

47
00:03:10,879 --> 00:03:13,120
perfect and we have a note taker thank

48
00:03:13,120 --> 00:03:15,040
you eric

49
00:03:15,040 --> 00:03:17,280
so

50
00:03:17,680 --> 00:03:18,879
i

51
00:03:18,879 --> 00:03:21,519
think we can get started um

52
00:03:21,519 --> 00:03:23,599
chris or martin who is doing the

53
00:03:23,599 --> 00:03:27,798
presentation chris okay perfect

54
00:03:49,120 --> 00:03:50,159
what's that

55
00:03:50,159 --> 00:03:51,599
yeah all right

56
00:03:51,599 --> 00:03:54,080
okay um this is just uh hopefully the

57
00:03:54,080 --> 00:03:56,959
last update for the main

58
00:03:56,959 --> 00:03:58,239
document that we're working on this on

59
00:03:58,239 --> 00:04:00,959
this particular group ohttp next slide

60
00:04:00,959 --> 00:04:03,280
please

61
00:04:03,680 --> 00:04:04,879
there are a number of updates based on

62
00:04:04,879 --> 00:04:07,360
the last version of the last couple

63
00:04:07,360 --> 00:04:09,200
versions of the draft between last itf

64
00:04:09,200 --> 00:04:11,040
and uh and today

65
00:04:11,040 --> 00:04:12,319
i think the biggest one is the

66
00:04:12,319 --> 00:04:14,159
state-based anti-replay mitigation that

67
00:04:14,159 --> 00:04:17,040
we discussed in ietf 113 basically the

68
00:04:17,040 --> 00:04:19,440
idea being that if a client sends an

69
00:04:19,440 --> 00:04:21,440
encapsulated request to a gateway that

70
00:04:21,440 --> 00:04:23,120
can't process it because it was like too

71
00:04:23,120 --> 00:04:24,880
old in the past or the clocks are too

72
00:04:24,880 --> 00:04:26,800
different the the gateway would just

73
00:04:26,800 --> 00:04:30,000
respond with like here's a new uh a date

74
00:04:30,000 --> 00:04:32,560
to retry your request with

75
00:04:32,560 --> 00:04:34,720
such that i can apply like anti-replay i

76
00:04:34,720 --> 00:04:36,639
mean in a meaningful way without keeping

77
00:04:36,639 --> 00:04:39,360
endless stay on my side um

78
00:04:39,360 --> 00:04:40,639
we went through the use case last time

79
00:04:40,639 --> 00:04:43,040
went through the proposed mitigation um

80
00:04:43,040 --> 00:04:46,080
the pros mechanism and uh the text was

81
00:04:46,080 --> 00:04:47,600
landed in the draft

82
00:04:47,600 --> 00:04:49,919
uh however as i'll discuss in a little

83
00:04:49,919 --> 00:04:51,199
bit um

84
00:04:51,199 --> 00:04:54,720
we've now yanked uh some of the the the

85
00:04:54,720 --> 00:04:57,520
contents of this particular mechanism

86
00:04:57,520 --> 00:04:59,280
that were previously outsourced to

87
00:04:59,280 --> 00:05:00,960
another draft that martin wrote back

88
00:05:00,960 --> 00:05:01,919
into

89
00:05:01,919 --> 00:05:04,000
the main spec here um and there's a pull

90
00:05:04,000 --> 00:05:06,240
request up for actually landing that

91
00:05:06,240 --> 00:05:09,039
particular integration um

92
00:05:09,039 --> 00:05:10,639
and that's one of the like remaining

93
00:05:10,639 --> 00:05:12,160
things to be done but it's

94
00:05:12,160 --> 00:05:14,479
it's basically just moving bits around

95
00:05:14,479 --> 00:05:17,759
between two documents anyways um

96
00:05:17,759 --> 00:05:19,840
beyond that actual

97
00:05:19,840 --> 00:05:21,280
mechanical change in the draft there's a

98
00:05:21,280 --> 00:05:24,560
number of like actual terminology uh and

99
00:05:24,560 --> 00:05:27,360
editorial things that we we we fixed um

100
00:05:27,360 --> 00:05:28,400
we we

101
00:05:28,400 --> 00:05:30,400
as people probably saw we had this

102
00:05:30,400 --> 00:05:32,479
tremendously successful bike shed on the

103
00:05:32,479 --> 00:05:34,320
mailing list where we like moved away

104
00:05:34,320 --> 00:05:37,039
from proxy to relay and target to

105
00:05:37,039 --> 00:05:40,080
gateway um hopefully to

106
00:05:40,080 --> 00:05:42,000
make the different roles of the parties

107
00:05:42,000 --> 00:05:43,520
in the in the system more clear and

108
00:05:43,520 --> 00:05:45,199
there and what they're doing

109
00:05:45,199 --> 00:05:47,680
um and we we did our best to make sure

110
00:05:47,680 --> 00:05:50,160
that the the contents of the the draft

111
00:05:50,160 --> 00:05:53,120
actually match what was uh

112
00:05:53,120 --> 00:05:54,560
discussed in the mailing list but there

113
00:05:54,560 --> 00:05:56,400
may be some like residual references to

114
00:05:56,400 --> 00:05:58,720
proxy or whatever so if there are please

115
00:05:58,720 --> 00:06:01,120
be sure to let us know um

116
00:06:01,120 --> 00:06:04,080
improve text on um

117
00:06:04,080 --> 00:06:05,759
various like privacy related things in

118
00:06:05,759 --> 00:06:08,319
particular like what can happen if a

119
00:06:08,319 --> 00:06:10,479
relay happens to be

120
00:06:10,479 --> 00:06:12,160
uh

121
00:06:12,160 --> 00:06:13,919
offering different services to different

122
00:06:13,919 --> 00:06:16,960
clients in response to like how a client

123
00:06:16,960 --> 00:06:19,199
is interacting with a gateway

124
00:06:19,199 --> 00:06:21,360
uh or how a client is interacting with a

125
00:06:21,360 --> 00:06:23,199
relay and what that differential

126
00:06:23,199 --> 00:06:25,360
treatment has on the privacy posture of

127
00:06:25,360 --> 00:06:27,520
the client interacting with the gateway

128
00:06:27,520 --> 00:06:29,520
um the the primary motivating example

129
00:06:29,520 --> 00:06:31,919
for this particular body of text was the

130
00:06:31,919 --> 00:06:33,440
shadow banning use case where relay

131
00:06:33,440 --> 00:06:35,520
might want to signal to the gateway hey

132
00:06:35,520 --> 00:06:38,800
this particular client is uh you know

133
00:06:38,800 --> 00:06:41,039
has been flagged

134
00:06:41,039 --> 00:06:42,639
by some mechanism

135
00:06:42,639 --> 00:06:44,800
and the relay or the gateway might then

136
00:06:44,800 --> 00:06:46,400
choose to

137
00:06:46,400 --> 00:06:48,240
act differently based on this particular

138
00:06:48,240 --> 00:06:50,560
bit and how that impacts the the overall

139
00:06:50,560 --> 00:06:52,479
privacy posture of the client uh is

140
00:06:52,479 --> 00:06:53,919
worthy of consideration so now there's

141
00:06:53,919 --> 00:06:55,840
text that actually talks about this

142
00:06:55,840 --> 00:06:57,199
um

143
00:06:57,199 --> 00:06:59,280
the big like breaking change in the

144
00:06:59,280 --> 00:07:00,720
latest version of the draft thanks to

145
00:07:00,720 --> 00:07:02,400
david benjamin is a change to the key

146
00:07:02,400 --> 00:07:03,599
schedule

147
00:07:03,599 --> 00:07:05,599
a very minor change but it is a breaking

148
00:07:05,599 --> 00:07:07,680
change nonetheless um and we'll i'm just

149
00:07:07,680 --> 00:07:09,840
going to quickly summarize what happened

150
00:07:09,840 --> 00:07:12,080
uh in the next couple slides so next

151
00:07:12,080 --> 00:07:14,319
slide please

152
00:07:14,319 --> 00:07:16,560
um okay so the old key schedule looks

153
00:07:16,560 --> 00:07:19,199
something like this uh i've

154
00:07:19,199 --> 00:07:21,360
simplified things uh a lot just to kind

155
00:07:21,360 --> 00:07:22,880
of show where different inputs to the

156
00:07:22,880 --> 00:07:25,039
the key schedule go um

157
00:07:25,039 --> 00:07:26,400
some of the inputs like for example on

158
00:07:26,400 --> 00:07:28,000
the on the left side with the client you

159
00:07:28,000 --> 00:07:29,440
have like the the

160
00:07:29,440 --> 00:07:31,039
gateway's public key

161
00:07:31,039 --> 00:07:33,840
uh you have the context string for hpke

162
00:07:33,840 --> 00:07:36,479
that's fed into like create an hp

163
00:07:36,479 --> 00:07:38,000
context for actually encrypting or

164
00:07:38,000 --> 00:07:39,599
encapsulating things to the to the

165
00:07:39,599 --> 00:07:40,639
gateway

166
00:07:40,639 --> 00:07:41,919
um

167
00:07:41,919 --> 00:07:44,160
at the bottom we have what i refer to as

168
00:07:44,160 --> 00:07:45,919
the ohb configuration parameters that

169
00:07:45,919 --> 00:07:49,199
includes like what uh what hbt cypher

170
00:07:49,199 --> 00:07:51,440
suite chem kdf aad and whatnot was

171
00:07:51,440 --> 00:07:53,759
configured what the key id

172
00:07:53,759 --> 00:07:57,599
uh was for that particular uh

173
00:07:57,599 --> 00:08:01,199
uh and those are bound to the actual

174
00:08:01,199 --> 00:08:04,160
encrypted request that goes out uh note

175
00:08:04,160 --> 00:08:06,400
importantly that the the these

176
00:08:06,400 --> 00:08:08,080
configuration parameters are not bound

177
00:08:08,080 --> 00:08:09,919
to the key that's exported from this

178
00:08:09,919 --> 00:08:12,639
http context um

179
00:08:12,639 --> 00:08:14,240
which is relevant should go to the next

180
00:08:14,240 --> 00:08:15,759
slide please

181
00:08:15,759 --> 00:08:17,120
because this exporter key is the thing

182
00:08:17,120 --> 00:08:20,000
that's piped in uh and used by the

183
00:08:20,000 --> 00:08:21,599
the the gateway for actually encrypting

184
00:08:21,599 --> 00:08:24,639
a response back to the client so um we

185
00:08:24,639 --> 00:08:26,400
had the situation where the ciphertext

186
00:08:26,400 --> 00:08:28,800
was not entirely bound to like basically

187
00:08:28,800 --> 00:08:30,479
everything the client had when it

188
00:08:30,479 --> 00:08:32,320
started its encapsulated request it was

189
00:08:32,320 --> 00:08:33,599
only bound to

190
00:08:33,599 --> 00:08:34,799
public key

191
00:08:34,799 --> 00:08:36,958
and the content or the context string

192
00:08:36,958 --> 00:08:38,799
which is ohtp

193
00:08:38,799 --> 00:08:41,440
uh slash request

194
00:08:41,440 --> 00:08:45,279
and the fix was simply to next slide

195
00:08:45,279 --> 00:08:47,440
to lift everything that was previously

196
00:08:47,440 --> 00:08:50,080
piped into the aed and just

197
00:08:50,080 --> 00:08:53,360
like plumb it into the hpk info

198
00:08:53,360 --> 00:08:56,160
uh based into the hp key schedule so

199
00:08:56,160 --> 00:08:58,640
that it gets folded into the export key

200
00:08:58,640 --> 00:09:00,640
such that uh

201
00:09:00,640 --> 00:09:02,560
the request that gets encrypted from the

202
00:09:02,560 --> 00:09:04,800
client as well as the corresponding key

203
00:09:04,800 --> 00:09:06,240
or content that's encrypted from the

204
00:09:06,240 --> 00:09:07,920
gateway back to the client using the

205
00:09:07,920 --> 00:09:10,560
exported key it's all bound to uh

206
00:09:10,560 --> 00:09:12,800
basically everything um

207
00:09:12,800 --> 00:09:14,480
and there's not

208
00:09:14,480 --> 00:09:16,640
like at the bottom i've written that

209
00:09:16,640 --> 00:09:18,959
there's nothing that's sent to the aad

210
00:09:18,959 --> 00:09:20,800
as additional authenticated data because

211
00:09:20,800 --> 00:09:22,560
everything is now piped in through the

212
00:09:22,560 --> 00:09:23,600
hp

213
00:09:23,600 --> 00:09:25,920
uh info parameter and therefore about to

214
00:09:25,920 --> 00:09:28,000
the key schedule so there's not any more

215
00:09:28,000 --> 00:09:29,680
possible binding that we can do i think

216
00:09:29,680 --> 00:09:31,279
this is like the

217
00:09:31,279 --> 00:09:32,240
this is

218
00:09:32,240 --> 00:09:35,240
complete

219
00:09:36,480 --> 00:09:38,560
okay um and then as i was referring to

220
00:09:38,560 --> 00:09:41,839
earlier we had this other other uh

221
00:09:41,839 --> 00:09:43,279
big kind of mechanical change that was

222
00:09:43,279 --> 00:09:44,640
landed in the last version of the draft

223
00:09:44,640 --> 00:09:45,600
between

224
00:09:45,600 --> 00:09:47,440
uh or since the last meeting

225
00:09:47,440 --> 00:09:50,080
um we were previously referencing this

226
00:09:50,080 --> 00:09:52,800
this draft that martin wrote um but uh

227
00:09:52,800 --> 00:09:54,160
kind of in a

228
00:09:54,160 --> 00:09:56,160
unknown stalled state in http right now

229
00:09:56,160 --> 00:09:57,920
so we figured rather than just block on

230
00:09:57,920 --> 00:09:59,279
that and definitely let's just yank the

231
00:09:59,279 --> 00:10:00,800
stuff out of that draft that we need for

232
00:10:00,800 --> 00:10:02,720
osu tv specifically

233
00:10:02,720 --> 00:10:04,959
um and then make forward progress so

234
00:10:04,959 --> 00:10:07,600
there's a pr of pr137 that basically

235
00:10:07,600 --> 00:10:09,760
does exactly that it takes the pieces

236
00:10:09,760 --> 00:10:12,399
that are relevant for oh tp

237
00:10:12,399 --> 00:10:13,760
adds them to the

238
00:10:13,760 --> 00:10:15,519
to the document and describes basically

239
00:10:15,519 --> 00:10:17,279
how clients should respond if it

240
00:10:17,279 --> 00:10:19,600
receives a date or a response that's not

241
00:10:19,600 --> 00:10:22,480
successful with a date uh header in it

242
00:10:22,480 --> 00:10:24,640
um and it talks about how a gateway

243
00:10:24,640 --> 00:10:27,519
should use that header uh or that yeah

244
00:10:27,519 --> 00:10:28,800
sorry use that date header for the

245
00:10:28,800 --> 00:10:30,240
purposes of

246
00:10:30,240 --> 00:10:31,760
triggering this retry functionality from

247
00:10:31,760 --> 00:10:33,760
the client um and there's lots of

248
00:10:33,760 --> 00:10:35,600
privacy considerations there about like

249
00:10:35,600 --> 00:10:36,880
clients should not just indefinitely

250
00:10:36,880 --> 00:10:38,240
retry with

251
00:10:38,240 --> 00:10:39,760
you know uh

252
00:10:39,760 --> 00:10:41,120
um

253
00:10:41,120 --> 00:10:43,120
uh new dates and whatnot and should not

254
00:10:43,120 --> 00:10:44,959
use a date from a response uh that it

255
00:10:44,959 --> 00:10:46,399
gets from a gateway for more than one

256
00:10:46,399 --> 00:10:48,480
request and so on so

257
00:10:48,480 --> 00:10:50,320
relatively straightforward um and this

258
00:10:50,320 --> 00:10:51,120
is

259
00:10:51,120 --> 00:10:52,959
purely editorial just lifting text from

260
00:10:52,959 --> 00:10:55,120
one document to another

261
00:10:55,120 --> 00:10:57,279
thanks a lot please

262
00:10:57,279 --> 00:11:00,480
okay uh at this point i think uh

263
00:11:00,480 --> 00:11:01,839
barring merging this particular

264
00:11:01,839 --> 00:11:03,920
editorial change the documents feature

265
00:11:03,920 --> 00:11:05,279
complete

266
00:11:05,279 --> 00:11:06,640
we have a number of interoperable

267
00:11:06,640 --> 00:11:09,680
limitations at this point

268
00:11:10,720 --> 00:11:12,480
it's a simple protocol and i think at

269
00:11:12,480 --> 00:11:13,200
this

270
00:11:13,200 --> 00:11:14,560
we're kind of ready for a working glass

271
00:11:14,560 --> 00:11:16,399
call unless there are any other things

272
00:11:16,399 --> 00:11:18,480
that people would like to add so

273
00:11:18,480 --> 00:11:19,279
uh

274
00:11:19,279 --> 00:11:21,440
i'll turn it to the chairs now to see

275
00:11:21,440 --> 00:11:23,120
what they want to do

276
00:11:23,120 --> 00:11:25,040
yeah i mean if folks have comments on

277
00:11:25,040 --> 00:11:29,319
that please line up

278
00:11:32,399 --> 00:11:34,880
i guess on both the issues and

279
00:11:34,880 --> 00:11:36,320
on the particular issues that chris

280
00:11:36,320 --> 00:11:38,399
talked about but

281
00:11:38,399 --> 00:11:41,440
maybe you can start with that

282
00:11:41,760 --> 00:11:45,040
does that sound okay to folks

283
00:11:48,320 --> 00:11:50,880
okay do you folks have comments about

284
00:11:50,880 --> 00:11:53,120
uh last call we'll also do a show of

285
00:11:53,120 --> 00:11:54,320
hands but

286
00:11:54,320 --> 00:11:56,560
if there are any um

287
00:11:56,560 --> 00:11:59,120
serious concerns then right now would be

288
00:11:59,120 --> 00:12:01,600
great to hear them

289
00:12:01,600 --> 00:12:04,079
does anyone know any reason why we

290
00:12:04,079 --> 00:12:05,920
should not uh send this document off in

291
00:12:05,920 --> 00:12:08,560
the working group last call speak now or

292
00:12:08,560 --> 00:12:11,839
hold your piece into the last call

293
00:12:17,920 --> 00:12:19,519
maybe a good question to ask is have

294
00:12:19,519 --> 00:12:22,240
folks read the draft

295
00:12:22,240 --> 00:12:24,160
i'm going to start a show of hands

296
00:12:24,160 --> 00:12:26,160
online um if you're on site you will

297
00:12:26,160 --> 00:12:27,680
have to join

298
00:12:27,680 --> 00:12:29,440
the

299
00:12:29,440 --> 00:12:33,079
the onsite tool

300
00:12:40,959 --> 00:12:43,920
i skimmed it

301
00:12:46,800 --> 00:12:51,639
so we have folks chiming in right now

302
00:12:53,920 --> 00:12:57,360
about an even split so far

303
00:13:00,320 --> 00:13:02,560
okay you know nearly a dozen people who

304
00:13:02,560 --> 00:13:07,638
have read it seems pretty reasonable

305
00:13:18,560 --> 00:13:20,560
you have about 68 people in the room so

306
00:13:20,560 --> 00:13:22,560
it'd be great if folks can

307
00:13:22,560 --> 00:13:24,560
say

308
00:13:24,560 --> 00:13:26,000
what they whether or not they've read

309
00:13:26,000 --> 00:13:29,079
the draft

310
00:13:37,920 --> 00:13:41,959
just giving it a few more seconds

311
00:13:48,639 --> 00:13:50,720
okay i'm going to close it now

312
00:13:50,720 --> 00:13:52,000
there's about

313
00:13:52,000 --> 00:13:53,360
i guess

314
00:13:53,360 --> 00:13:55,279
out of the 40 people who said

315
00:13:55,279 --> 00:13:56,079
the

316
00:13:56,079 --> 00:13:57,600
people who participated in the poll 15

317
00:13:57,600 --> 00:14:00,560
people said that they have

318
00:14:00,720 --> 00:14:03,600
and 26 people

319
00:14:03,600 --> 00:14:05,920
i guess did not raise their hands

320
00:14:05,920 --> 00:14:06,800
um

321
00:14:06,800 --> 00:14:09,120
so then

322
00:14:09,120 --> 00:14:11,440
let me just end this and then

323
00:14:11,440 --> 00:14:15,160
ask my second question

324
00:14:22,480 --> 00:14:24,560
which is do you think the draft is ready

325
00:14:24,560 --> 00:14:27,959
for last call

326
00:14:47,760 --> 00:14:52,199
do you want me to look for you okay

327
00:15:04,800 --> 00:15:06,639
yeah and the folks who said no it'd be

328
00:15:06,639 --> 00:15:09,519
great to hear why or if um

329
00:15:09,519 --> 00:15:11,040
if folks don't have if the people who

330
00:15:11,040 --> 00:15:14,399
are saying like who voted for no

331
00:15:14,399 --> 00:15:16,399
i can also assume that that that means

332
00:15:16,399 --> 00:15:18,639
that um you don't have an opinion which

333
00:15:18,639 --> 00:15:19,760
is fine

334
00:15:19,760 --> 00:15:21,760
but uh it would be great to hear any

335
00:15:21,760 --> 00:15:24,079
concrete

336
00:15:24,079 --> 00:15:27,839
reasons as to why not

337
00:15:34,079 --> 00:15:35,759
okay i think we can

338
00:15:35,759 --> 00:15:37,519
close the session

339
00:15:37,519 --> 00:15:39,680
um like overwhelmingly people who

340
00:15:39,680 --> 00:15:42,959
participated in the poll said yes so

341
00:15:42,959 --> 00:15:44,720
i think we'll confirm on the list as

342
00:15:44,720 --> 00:15:46,800
well but this looks pretty great um

343
00:15:46,800 --> 00:15:48,000
great is there anything else you guys

344
00:15:48,000 --> 00:15:49,600
want to talk about no we'll uh we'll

345
00:15:49,600 --> 00:15:51,519
we'll merge the the pr's that are open

346
00:15:51,519 --> 00:15:53,440
um we'll add some editorial text for

347
00:15:53,440 --> 00:15:54,800
your issue and then i think we can move

348
00:15:54,800 --> 00:15:57,199
forward we'll cut a new version soon

349
00:15:57,199 --> 00:16:00,920
sounds great thanks chris

350
00:16:08,320 --> 00:16:11,040
i think

351
00:16:18,000 --> 00:16:20,839
yeah tommy um did you want to talk about

352
00:16:20,839 --> 00:16:24,920
the svcd

353
00:16:45,440 --> 00:16:48,639
okay hello everyone i'm tommy pauly from

354
00:16:48,639 --> 00:16:50,560
apple

355
00:16:50,560 --> 00:16:52,959
and we have a document we talked about

356
00:16:52,959 --> 00:16:54,560
last time i think

357
00:16:54,560 --> 00:16:57,680
uh teru also was helping on this

358
00:16:57,680 --> 00:16:59,120
and

359
00:16:59,120 --> 00:17:02,480
essentially now that we have our

360
00:17:02,480 --> 00:17:04,959
basic ohtp definition

361
00:17:04,959 --> 00:17:06,319
uh this is getting a little bit more

362
00:17:06,319 --> 00:17:07,599
into some of the use cases and

363
00:17:07,599 --> 00:17:10,079
deployment models um

364
00:17:10,079 --> 00:17:12,640
the kind of default that ohtp has

365
00:17:12,640 --> 00:17:15,199
expects that you have very

366
00:17:15,199 --> 00:17:16,959
coordinated

367
00:17:16,959 --> 00:17:19,039
deployments where

368
00:17:19,039 --> 00:17:20,640
the clients and the targets and the

369
00:17:20,640 --> 00:17:22,720
gateways and the relays kind of all know

370
00:17:22,720 --> 00:17:23,919
that they're working together and that

371
00:17:23,919 --> 00:17:26,559
is all out of band

372
00:17:26,559 --> 00:17:28,559
that works fine that is

373
00:17:28,559 --> 00:17:30,480
certainly one way to use it

374
00:17:30,480 --> 00:17:32,080
but there are also potentially some use

375
00:17:32,080 --> 00:17:34,240
cases for doing a bit more dynamic

376
00:17:34,240 --> 00:17:35,840
discovery and so that's what this

377
00:17:35,840 --> 00:17:37,760
document tries to talk about

378
00:17:37,760 --> 00:17:40,480
next slide please

379
00:17:40,960 --> 00:17:42,799
so i'll talk about

380
00:17:42,799 --> 00:17:45,039
two different use cases here of like the

381
00:17:45,039 --> 00:17:47,120
general model for how you would

382
00:17:47,120 --> 00:17:48,799
imagine this particular form of

383
00:17:48,799 --> 00:17:49,760
discovery

384
00:17:49,760 --> 00:17:51,600
being performed

385
00:17:51,600 --> 00:17:55,200
so we start out in this world with

386
00:17:55,200 --> 00:17:56,720
a client

387
00:17:56,720 --> 00:17:58,640
that knows it wants to use a particular

388
00:17:58,640 --> 00:18:00,799
target service it's talking to it

389
00:18:00,799 --> 00:18:02,960
already or it knows it's about to talk

390
00:18:02,960 --> 00:18:04,960
to it

391
00:18:04,960 --> 00:18:07,200
and the client also knows that it has

392
00:18:07,200 --> 00:18:10,160
some trusted relay service that it

393
00:18:10,160 --> 00:18:12,640
prefers to work with or it knows has

394
00:18:12,640 --> 00:18:14,480
access to

395
00:18:14,480 --> 00:18:16,640
somewhat generic

396
00:18:16,640 --> 00:18:19,200
um ohtp gateways

397
00:18:19,200 --> 00:18:21,679
next slide

398
00:18:22,480 --> 00:18:25,120
and if in this scenario the client can

399
00:18:25,120 --> 00:18:27,200
learn that the target service has an

400
00:18:27,200 --> 00:18:30,000
associated oblivious gateway that this

401
00:18:30,000 --> 00:18:32,880
target service prefers to use to provide

402
00:18:32,880 --> 00:18:34,400
access to it

403
00:18:34,400 --> 00:18:37,520
then next slide

404
00:18:38,240 --> 00:18:39,679
the goal is you know is there a way to

405
00:18:39,679 --> 00:18:41,520
essentially upgrade this path if the

406
00:18:41,520 --> 00:18:43,760
client wants to to go through its

407
00:18:43,760 --> 00:18:46,320
oblivious relay through that oblivious

408
00:18:46,320 --> 00:18:48,160
gateway to get to that target service as

409
00:18:48,160 --> 00:18:49,600
an alternate way

410
00:18:49,600 --> 00:18:51,200
to reach that target service as opposed

411
00:18:51,200 --> 00:18:53,520
to going direct

412
00:18:53,520 --> 00:18:55,120
next slide

413
00:18:55,120 --> 00:18:58,399
the second use case

414
00:18:58,960 --> 00:19:01,120
is one in which

415
00:19:01,120 --> 00:19:04,160
you are using this target service

416
00:19:04,160 --> 00:19:07,600
through the oblivious gateway

417
00:19:07,840 --> 00:19:10,000
as an option that you otherwise would

418
00:19:10,000 --> 00:19:10,880
not

419
00:19:10,880 --> 00:19:12,960
use so

420
00:19:12,960 --> 00:19:14,480
the model that we have here is something

421
00:19:14,480 --> 00:19:16,320
that we practically have

422
00:19:16,320 --> 00:19:20,880
when we're doing dns over oblivious http

423
00:19:20,880 --> 00:19:23,039
and in this model let's say the client

424
00:19:23,039 --> 00:19:25,600
has its trusted relay again and it has a

425
00:19:25,600 --> 00:19:28,559
default oblivious gateway and a default

426
00:19:28,559 --> 00:19:31,360
dns resolver that's going to use

427
00:19:31,360 --> 00:19:32,960
in general it already has this

428
00:19:32,960 --> 00:19:35,280
provisioned out of band

429
00:19:35,280 --> 00:19:36,640
but then

430
00:19:36,640 --> 00:19:39,039
it is interested to say that if in under

431
00:19:39,039 --> 00:19:41,120
a certain scenario like it's on a

432
00:19:41,120 --> 00:19:42,160
network

433
00:19:42,160 --> 00:19:44,720
that has um

434
00:19:44,720 --> 00:19:46,320
a resolver configuration that it would

435
00:19:46,320 --> 00:19:49,360
prefer to use because it provides

436
00:19:49,360 --> 00:19:51,440
the right either

437
00:19:51,440 --> 00:19:53,440
filtering for the requirements of being

438
00:19:53,440 --> 00:19:56,400
on the network or

439
00:19:56,400 --> 00:19:58,640
resolution for access to

440
00:19:58,640 --> 00:20:00,960
uh internal domains that are particular

441
00:20:00,960 --> 00:20:03,039
to that network

442
00:20:03,039 --> 00:20:05,280
if the client can discover that there

443
00:20:05,280 --> 00:20:06,480
exists

444
00:20:06,480 --> 00:20:08,720
this dns server that has a oblivious

445
00:20:08,720 --> 00:20:11,120
gateway it could use that in addition to

446
00:20:11,120 --> 00:20:13,120
its default service or

447
00:20:13,120 --> 00:20:16,240
in place of its default service

448
00:20:16,240 --> 00:20:20,000
and this works well with some of the add

449
00:20:20,000 --> 00:20:22,480
work around discovering designated

450
00:20:22,480 --> 00:20:25,440
resolvers so those are kind of the two

451
00:20:25,440 --> 00:20:28,559
models that this document can serve

452
00:20:28,559 --> 00:20:30,480
through a single mechanism

453
00:20:30,480 --> 00:20:32,960
next slide

454
00:20:33,440 --> 00:20:36,000
so the scope of this document it's

455
00:20:36,000 --> 00:20:38,480
pretty short um we've gotten good

456
00:20:38,480 --> 00:20:40,720
feedback and i think the the current

457
00:20:40,720 --> 00:20:42,880
shape is something that kind of is a bit

458
00:20:42,880 --> 00:20:44,000
more of a complete story and can

459
00:20:44,000 --> 00:20:44,880
actually

460
00:20:44,880 --> 00:20:46,400
work viably

461
00:20:46,400 --> 00:20:50,080
there are two parts to it one is

462
00:20:50,080 --> 00:20:52,320
um essentially a way to learn that a

463
00:20:52,320 --> 00:20:54,799
service has an associated gateway which

464
00:20:54,799 --> 00:20:57,200
is kind of one piece of the puzzle

465
00:20:57,200 --> 00:20:59,760
and i would like to thank the main ohtp

466
00:20:59,760 --> 00:21:01,919
authors for clarifying terminology

467
00:21:01,919 --> 00:21:03,840
around gateways and targets because that

468
00:21:03,840 --> 00:21:06,159
makes it actually much easier to refer

469
00:21:06,159 --> 00:21:07,679
to things and be clear about what we

470
00:21:07,679 --> 00:21:08,720
mean

471
00:21:08,720 --> 00:21:11,039
so essentially you have the full uri of

472
00:21:11,039 --> 00:21:13,919
the gateway and that can be stuffed in a

473
00:21:13,919 --> 00:21:17,600
dns record in svcp parameters

474
00:21:17,600 --> 00:21:18,799
and then the other thing you need to do

475
00:21:18,799 --> 00:21:20,559
as a client is know what is the key

476
00:21:20,559 --> 00:21:21,840
configuration

477
00:21:21,840 --> 00:21:24,000
and the current way that is done is just

478
00:21:24,000 --> 00:21:26,559
saying hey if you have this gateway

479
00:21:26,559 --> 00:21:28,640
that you would normally do a oblivious

480
00:21:28,640 --> 00:21:31,520
request through a post to

481
00:21:31,520 --> 00:21:33,039
let's just do a get

482
00:21:33,039 --> 00:21:34,720
and specify that i want to get the key

483
00:21:34,720 --> 00:21:36,400
configuration from it and that is a way

484
00:21:36,400 --> 00:21:39,039
to fetch that

485
00:21:39,039 --> 00:21:41,039
these

486
00:21:41,039 --> 00:21:42,320
are just essentially the proposed

487
00:21:42,320 --> 00:21:44,000
mechanisms i think for any discovery

488
00:21:44,000 --> 00:21:45,039
mechanism

489
00:21:45,039 --> 00:21:46,559
like this thus trying to achieve those

490
00:21:46,559 --> 00:21:48,000
goals these are the two pieces of

491
00:21:48,000 --> 00:21:49,600
information you need

492
00:21:49,600 --> 00:21:51,760
um so we can of course debate what is

493
00:21:51,760 --> 00:21:53,280
our preferred way of getting these

494
00:21:53,280 --> 00:21:55,440
pieces of information

495
00:21:55,440 --> 00:21:57,760
next slide please

496
00:21:57,760 --> 00:22:00,000
so just concretely

497
00:22:00,000 --> 00:22:02,320
uh to give examples of each of these

498
00:22:02,320 --> 00:22:04,240
we have the

499
00:22:04,240 --> 00:22:06,080
dns response

500
00:22:06,080 --> 00:22:08,320
which can include the oblivious gateway

501
00:22:08,320 --> 00:22:12,000
and it's just encoded there as a url

502
00:22:12,000 --> 00:22:14,159
and for the key configuration query we

503
00:22:14,159 --> 00:22:17,039
just do a get and we say i want to get

504
00:22:17,039 --> 00:22:18,880
the ohtp keys

505
00:22:18,880 --> 00:22:19,679
so

506
00:22:19,679 --> 00:22:21,679
it's pretty straightforward from that

507
00:22:21,679 --> 00:22:23,039
perspective

508
00:22:23,039 --> 00:22:25,039
next slide

509
00:22:25,039 --> 00:22:28,320
i think the interesting part here is

510
00:22:28,320 --> 00:22:30,960
how you protect against uh key

511
00:22:30,960 --> 00:22:32,799
targeting or url targeting and making

512
00:22:32,799 --> 00:22:34,159
sure that

513
00:22:34,159 --> 00:22:36,080
uh user that's learning about this isn't

514
00:22:36,080 --> 00:22:37,520
being singled out

515
00:22:37,520 --> 00:22:39,039
um

516
00:22:39,039 --> 00:22:41,760
if you do have a unique gateway uri or

517
00:22:41,760 --> 00:22:44,080
unique key config then the client could

518
00:22:44,080 --> 00:22:45,600
be targeted or identified when it's

519
00:22:45,600 --> 00:22:47,760
using the service

520
00:22:47,760 --> 00:22:48,880
um

521
00:22:48,880 --> 00:22:51,440
you could have your proxy or relay try

522
00:22:51,440 --> 00:22:53,200
to participate in recognizing like oh

523
00:22:53,200 --> 00:22:55,039
yeah this is a common

524
00:22:55,039 --> 00:22:57,280
gateway versus that's a gateway that

525
00:22:57,280 --> 00:22:59,360
only you are using um but there are

526
00:22:59,360 --> 00:23:00,880
different ways of doing this i think

527
00:23:00,880 --> 00:23:02,320
this is where a lot of the interesting

528
00:23:02,320 --> 00:23:04,640
discussion lies and i know that

529
00:23:04,640 --> 00:23:07,120
there are multiple other conversations

530
00:23:07,120 --> 00:23:09,120
in this working group and others talking

531
00:23:09,120 --> 00:23:10,240
about

532
00:23:10,240 --> 00:23:12,240
consistency and key targeting and ways

533
00:23:12,240 --> 00:23:14,480
to mitigate that so i think

534
00:23:14,480 --> 00:23:15,919
this can fold into that broader

535
00:23:15,919 --> 00:23:17,600
conversation as something that would

536
00:23:17,600 --> 00:23:20,720
like to benefit from those

537
00:23:20,720 --> 00:23:22,960
next slide

538
00:23:22,960 --> 00:23:25,280
so that's it um

539
00:23:25,280 --> 00:23:26,559
i think at this point it's mainly a

540
00:23:26,559 --> 00:23:28,080
question of you know is the working

541
00:23:28,080 --> 00:23:30,720
group interested in taking on

542
00:23:30,720 --> 00:23:32,159
uh

543
00:23:32,159 --> 00:23:34,400
the discovery of a gateway

544
00:23:34,400 --> 00:23:37,520
and config problem um

545
00:23:37,520 --> 00:23:39,520
i think it's in scope for what

546
00:23:39,520 --> 00:23:40,960
is in the working groups charter we're

547
00:23:40,960 --> 00:23:42,159
kind of done with the main protocol so

548
00:23:42,159 --> 00:23:43,919
it seems like

549
00:23:43,919 --> 00:23:46,080
if we want to do this at some point then

550
00:23:46,080 --> 00:23:49,200
this is a decent time to do it

551
00:23:49,200 --> 00:23:53,039
um love to hear your feedback

552
00:23:59,440 --> 00:24:01,919
ben schwartz oh i forgot to use the q

553
00:24:01,919 --> 00:24:04,799
martin's actually in the queue um

554
00:24:04,799 --> 00:24:07,760
so uh

555
00:24:07,840 --> 00:24:09,840
i i'm having trouble understanding the

556
00:24:09,840 --> 00:24:12,559
the security properties here uh it looks

557
00:24:12,559 --> 00:24:13,760
to me like

558
00:24:13,760 --> 00:24:14,960
this

559
00:24:14,960 --> 00:24:17,039
still suffers from some of the same

560
00:24:17,039 --> 00:24:18,960
problems that that i

561
00:24:18,960 --> 00:24:21,520
was concerned about with the the first

562
00:24:21,520 --> 00:24:23,600
revision of this draft

563
00:24:23,600 --> 00:24:26,880
which is that an intermediary on the dns

564
00:24:26,880 --> 00:24:27,840
path

565
00:24:27,840 --> 00:24:31,440
that is that can modify this this record

566
00:24:31,440 --> 00:24:34,080
could swap out the gateway for

567
00:24:34,080 --> 00:24:37,760
entirely for their own gateway

568
00:24:37,760 --> 00:24:40,320
and as far as i can tell there's nothing

569
00:24:40,320 --> 00:24:41,760
here that would

570
00:24:41,760 --> 00:24:43,679
that would uh

571
00:24:43,679 --> 00:24:45,440
that would detect this on the on the

572
00:24:45,440 --> 00:24:47,919
client side so i could take any origin

573
00:24:47,919 --> 00:24:49,679
in the world even in origin that doesn't

574
00:24:49,679 --> 00:24:52,799
have any support for oblivious http

575
00:24:52,799 --> 00:24:54,799
and if i can intercept the dns then i

576
00:24:54,799 --> 00:24:57,520
can inject myself as the

577
00:24:57,520 --> 00:24:59,760
gateway claim that ohttp is supported

578
00:24:59,760 --> 00:25:01,520
and then impersonate

579
00:25:01,520 --> 00:25:04,159
that origin essentially bypassing the

580
00:25:04,159 --> 00:25:07,279
protections of tls

581
00:25:08,400 --> 00:25:10,960
um so i think

582
00:25:10,960 --> 00:25:13,039
in in this case

583
00:25:13,039 --> 00:25:14,799
that mainly comes down to you know how

584
00:25:14,799 --> 00:25:17,200
do we do some sort of

585
00:25:17,200 --> 00:25:21,039
consistency check on the side which i

586
00:25:21,039 --> 00:25:22,320
think it's important and i think that's

587
00:25:22,320 --> 00:25:24,880
something that we should talk about so

588
00:25:24,880 --> 00:25:27,039
the thinking about consistency for a

589
00:25:27,039 --> 00:25:28,400
moment

590
00:25:28,400 --> 00:25:31,039
it depends what you mean maybe

591
00:25:31,039 --> 00:25:33,679
if consistency is about making sure that

592
00:25:33,679 --> 00:25:35,840
a given gateway shows the same key

593
00:25:35,840 --> 00:25:37,760
configs to everybody

594
00:25:37,760 --> 00:25:40,159
then it's definitely not sufficient here

595
00:25:40,159 --> 00:25:43,039
because i can mint uh first of all that

596
00:25:43,039 --> 00:25:45,440
i don't need to um

597
00:25:45,440 --> 00:25:47,919
i can give a a single the attacker can

598
00:25:47,919 --> 00:25:50,320
can have a consistent gateway

599
00:25:50,320 --> 00:25:52,720
uh and still be consistently

600
00:25:52,720 --> 00:25:54,720
impersonating yourself

601
00:25:54,720 --> 00:25:57,360
well and i think one thing important

602
00:25:57,360 --> 00:25:59,840
parameter to keep in mind here is that

603
00:25:59,840 --> 00:26:01,679
ojai provides no

604
00:26:01,679 --> 00:26:03,919
if you're accessing a target over

605
00:26:03,919 --> 00:26:06,159
over oblivious http

606
00:26:06,159 --> 00:26:08,400
there is no confidentiality or integrity

607
00:26:08,400 --> 00:26:11,279
protection against the gateway

608
00:26:11,279 --> 00:26:13,200
uh that's right and that's why the

609
00:26:13,200 --> 00:26:15,200
gateway always has to be provisioned

610
00:26:15,200 --> 00:26:17,520
through a trusted channel

611
00:26:17,520 --> 00:26:19,039
and in this case i see the gateway being

612
00:26:19,039 --> 00:26:20,880
provisioned through an untrusted channel

613
00:26:20,880 --> 00:26:22,480
at least in the threat models that i'm

614
00:26:22,480 --> 00:26:25,120
used to okay so on the adoption question

615
00:26:25,120 --> 00:26:28,320
i do want i do want something

616
00:26:28,320 --> 00:26:30,720
along these lines i do think that i'd

617
00:26:30,720 --> 00:26:33,120
like to to see the working group work on

618
00:26:33,120 --> 00:26:36,000
discovery but i think maybe we need to

619
00:26:36,000 --> 00:26:37,840
have a little bit more consensus about

620
00:26:37,840 --> 00:26:39,360
what direction we're going to go before

621
00:26:39,360 --> 00:26:41,840
we proceed with an adoption sure i'm

622
00:26:41,840 --> 00:26:43,360
happy to have

623
00:26:43,360 --> 00:26:45,360
the working group work on that

624
00:26:45,360 --> 00:26:46,640
too i'm more interested in saying that

625
00:26:46,640 --> 00:26:48,960
the working group should be working on

626
00:26:48,960 --> 00:26:51,520
the problem

627
00:26:51,600 --> 00:26:53,520
that's a good one yeah so i i think this

628
00:26:53,520 --> 00:26:56,320
is an important point and and i

629
00:26:56,320 --> 00:26:58,080
i've just made some changes i think to

630
00:26:58,080 --> 00:26:59,679
the to the base specification that sort

631
00:26:59,679 --> 00:27:01,039
of addressed this point

632
00:27:01,039 --> 00:27:03,200
if you have the gateway operating on the

633
00:27:03,200 --> 00:27:06,159
same server as the target then i i think

634
00:27:06,159 --> 00:27:08,960
the concerns that you have uh are less

635
00:27:08,960 --> 00:27:11,279
lesser yes than than previously and i

636
00:27:11,279 --> 00:27:14,159
think that's what tommy wants to do yes

637
00:27:14,159 --> 00:27:15,919
but that is an interesting point that if

638
00:27:15,919 --> 00:27:17,840
they are not co-located

639
00:27:17,840 --> 00:27:18,880
how do you establish that they're

640
00:27:18,880 --> 00:27:20,799
actually related but if they are

641
00:27:20,799 --> 00:27:22,399
like if you use the same tls handshake

642
00:27:22,399 --> 00:27:24,159
to get to them no matter what

643
00:27:24,159 --> 00:27:26,559
right like if the thing i'm fetching my

644
00:27:26,559 --> 00:27:28,960
key config from with the get request

645
00:27:28,960 --> 00:27:29,840
is

646
00:27:29,840 --> 00:27:31,679
the thing that i that is my target

647
00:27:31,679 --> 00:27:33,039
service

648
00:27:33,039 --> 00:27:35,120
does that provide enough finding

649
00:27:35,120 --> 00:27:38,080
to trust it yeah but but

650
00:27:38,080 --> 00:27:39,919
no ben's right um

651
00:27:39,919 --> 00:27:42,320
he shook his head there there is there

652
00:27:42,320 --> 00:27:43,360
are those scenarios where you have

653
00:27:43,360 --> 00:27:46,159
multiple tenants on the same host sure

654
00:27:46,159 --> 00:27:48,000
some of them have control over some

655
00:27:48,000 --> 00:27:49,360
resources but not others and if they're

656
00:27:49,360 --> 00:27:50,480
in a position

657
00:27:50,480 --> 00:27:52,559
to put themselves

658
00:27:52,559 --> 00:27:54,559
in the position of the gateway they are

659
00:27:54,559 --> 00:27:56,720
then able to do that which is why i

660
00:27:56,720 --> 00:27:57,679
think

661
00:27:57,679 --> 00:27:59,679
the use of dot well known in this

662
00:27:59,679 --> 00:28:03,520
context does give us something

663
00:28:03,520 --> 00:28:04,640
uh okay

664
00:28:04,640 --> 00:28:06,159
i i moved off of well known because you

665
00:28:06,159 --> 00:28:07,840
said you didn't like it i know i'm happy

666
00:28:07,840 --> 00:28:09,919
to move back not well known yes but i've

667
00:28:09,919 --> 00:28:11,679
i've realized that i think perhaps in

668
00:28:11,679 --> 00:28:13,279
this case we probably need something

669
00:28:13,279 --> 00:28:14,640
along those lines because of this

670
00:28:14,640 --> 00:28:15,600
reasoning

671
00:28:15,600 --> 00:28:17,679
and and that's only a recent realization

672
00:28:17,679 --> 00:28:20,159
of my part and i think thanks to ben and

673
00:28:20,159 --> 00:28:21,679
richard and others for pointing out some

674
00:28:21,679 --> 00:28:23,520
of these flaws i think that's probably

675
00:28:23,520 --> 00:28:25,200
where we're going to need to go

676
00:28:25,200 --> 00:28:27,200
with this one unfortunately that makes

677
00:28:27,200 --> 00:28:28,559
sense might be better because we have

678
00:28:28,559 --> 00:28:30,240
fewer parameters in there yes in our

679
00:28:30,240 --> 00:28:31,760
service which is

680
00:28:31,760 --> 00:28:33,679
awesome yes yes it does simplify that

681
00:28:33,679 --> 00:28:35,919
yeah

682
00:28:39,039 --> 00:28:40,799
eric gorth google

683
00:28:40,799 --> 00:28:42,399
um i i

684
00:28:42,399 --> 00:28:44,320
believe i agree mostly with what ben and

685
00:28:44,320 --> 00:28:45,679
others are saying about all the

686
00:28:45,679 --> 00:28:47,279
correctness and consistency concerns it

687
00:28:47,279 --> 00:28:49,520
is an area we definitely need to solve

688
00:28:49,520 --> 00:28:51,679
there's huge concerns there sure but i

689
00:28:51,679 --> 00:28:53,520
think that's big enough area to solve

690
00:28:53,520 --> 00:28:56,399
that that should be a separate draft and

691
00:28:56,399 --> 00:28:58,320
i think ben's presenting one that one

692
00:28:58,320 --> 00:28:59,679
something like that in 15 20 minutes

693
00:28:59,679 --> 00:29:00,960
from now so we can

694
00:29:00,960 --> 00:29:02,880
discuss that a little bit more there but

695
00:29:02,880 --> 00:29:04,320
assuming we have stuff like that solved

696
00:29:04,320 --> 00:29:05,840
in a separate draft saying here's how to

697
00:29:05,840 --> 00:29:07,919
get these packets of information

698
00:29:07,919 --> 00:29:10,240
securely and consistently

699
00:29:10,240 --> 00:29:12,159
i think there's good room for this draft

700
00:29:12,159 --> 00:29:13,840
to focus much more on just the payload

701
00:29:13,840 --> 00:29:15,120
itself say

702
00:29:15,120 --> 00:29:17,039
here's how you give the discovery from

703
00:29:17,039 --> 00:29:18,480
the key info in dns here's how you give

704
00:29:18,480 --> 00:29:20,480
it in an hp request

705
00:29:20,480 --> 00:29:22,159
and then

706
00:29:22,159 --> 00:29:23,440
point to the other stuff and say these

707
00:29:23,440 --> 00:29:24,399
are the ones that tell you how to fetch

708
00:29:24,399 --> 00:29:26,000
that securely and safely and all that

709
00:29:26,000 --> 00:29:27,840
stuff and those ones can point at this

710
00:29:27,840 --> 00:29:31,200
one say here's the the format of that so

711
00:29:31,200 --> 00:29:32,320
i'm

712
00:29:32,320 --> 00:29:33,840
very supportive of working on stuff like

713
00:29:33,840 --> 00:29:35,200
this and adopting this as long as we

714
00:29:35,200 --> 00:29:37,039
focus on that and

715
00:29:37,039 --> 00:29:39,039
probably in a separate draft we have to

716
00:29:39,039 --> 00:29:40,320
handle all the consistency and

717
00:29:40,320 --> 00:29:42,559
corrective stuff because that's

718
00:29:42,559 --> 00:29:43,919
hugely important and probably poor

719
00:29:43,919 --> 00:29:45,039
enough to be separate draft from this

720
00:29:45,039 --> 00:29:45,840
one

721
00:29:45,840 --> 00:29:48,559
yeah makes sense

722
00:29:51,840 --> 00:29:53,840
i think with that the group does need to

723
00:29:53,840 --> 00:29:55,279
work on discovery i think it's really

724
00:29:55,279 --> 00:29:56,320
important

725
00:29:56,320 --> 00:29:58,480
um i think though it'd be helpful to try

726
00:29:58,480 --> 00:29:59,520
and

727
00:29:59,520 --> 00:30:01,919
ensure that there's a separate discovery

728
00:30:01,919 --> 00:30:03,200
for the

729
00:30:03,200 --> 00:30:05,360
gateway and the relay

730
00:30:05,360 --> 00:30:07,919
to minimize the risk of collusion

731
00:30:07,919 --> 00:30:09,440
between those two they're discovered

732
00:30:09,440 --> 00:30:11,840
using the same mechanism i think that

733
00:30:11,840 --> 00:30:13,279
that is risky

734
00:30:13,279 --> 00:30:15,840
right and this mechanism is explicitly

735
00:30:15,840 --> 00:30:18,559
only about the gateway associated with

736
00:30:18,559 --> 00:30:20,240
the service which

737
00:30:20,240 --> 00:30:21,919
to martin's comment earlier probably

738
00:30:21,919 --> 00:30:24,159
needs to be entirely co-located in order

739
00:30:24,159 --> 00:30:25,919
for this to work like essentially to

740
00:30:25,919 --> 00:30:28,720
recognize that the target has a gateway

741
00:30:28,720 --> 00:30:31,200
um the document says like yeah the relay

742
00:30:31,200 --> 00:30:33,520
discovery is out of scope and i think

743
00:30:33,520 --> 00:30:34,960
if people are interested in relay

744
00:30:34,960 --> 00:30:37,440
discovery which is fine

745
00:30:37,440 --> 00:30:38,320
that

746
00:30:38,320 --> 00:30:39,760
is

747
00:30:39,760 --> 00:30:40,799
something that needs its own

748
00:30:40,799 --> 00:30:43,120
considerations and likely

749
00:30:43,120 --> 00:30:44,880
would be related to

750
00:30:44,880 --> 00:30:46,720
discovering more general purpose relays

751
00:30:46,720 --> 00:30:47,520
because

752
00:30:47,520 --> 00:30:49,919
an ohp relay likely would be able to

753
00:30:49,919 --> 00:30:50,799
serve

754
00:30:50,799 --> 00:30:53,679
as a much broader category of relay for

755
00:30:53,679 --> 00:30:55,840
things like mask or

756
00:30:55,840 --> 00:30:59,600
just being able to do other dns services

757
00:30:59,600 --> 00:31:01,200
so for the avoidance of now i think both

758
00:31:01,200 --> 00:31:03,039
should be

759
00:31:03,039 --> 00:31:04,399
addressed

760
00:31:04,399 --> 00:31:05,120
so

761
00:31:05,120 --> 00:31:07,840
it'd be good if both were in scope

762
00:31:07,840 --> 00:31:10,559
yeah um

763
00:31:10,559 --> 00:31:12,320
i i do have a little bit of a question

764
00:31:12,320 --> 00:31:13,360
on the

765
00:31:13,360 --> 00:31:15,760
the relay discovery question if

766
00:31:15,760 --> 00:31:17,600
depending on what that mechanism ends up

767
00:31:17,600 --> 00:31:19,840
being that may not belong

768
00:31:19,840 --> 00:31:21,919
strictly in ohio if it is something that

769
00:31:21,919 --> 00:31:24,080
is potentially more generic

770
00:31:24,080 --> 00:31:26,399
whereas the ojai

771
00:31:26,399 --> 00:31:28,799
gateway configuration really is truly

772
00:31:28,799 --> 00:31:30,240
specific to ohio and doesn't apply to

773
00:31:30,240 --> 00:31:31,440
anything else so that's why i believe it

774
00:31:31,440 --> 00:31:32,399
does belong

775
00:31:32,399 --> 00:31:33,840
clearly here and i'm just not sure about

776
00:31:33,840 --> 00:31:36,320
relays

777
00:31:36,399 --> 00:31:38,720
do folks have opinions on whether

778
00:31:38,720 --> 00:31:40,640
this like as the document right stands

779
00:31:40,640 --> 00:31:41,840
right now like this is the right

780
00:31:41,840 --> 00:31:43,519
direction to go in like gateway

781
00:31:43,519 --> 00:31:46,399
discovery driven by target

782
00:31:46,399 --> 00:31:48,799
yeah chris would i i do think so i mean

783
00:31:48,799 --> 00:31:50,320
sure there might be some key consistency

784
00:31:50,320 --> 00:31:52,559
things we have to sort out but um

785
00:31:52,559 --> 00:31:53,919
this draft is a good step in the right

786
00:31:53,919 --> 00:31:55,039
direction and i think it should be

787
00:31:55,039 --> 00:31:57,519
adopted um i do not think we should pull

788
00:31:57,519 --> 00:31:58,799
in things like

789
00:31:58,799 --> 00:32:01,120
uh relay discovery i think that's a

790
00:32:01,120 --> 00:32:02,799
separable and much harder problem as you

791
00:32:02,799 --> 00:32:04,480
have indicated so

792
00:32:04,480 --> 00:32:06,240
and i'm i'm happy to like switch things

793
00:32:06,240 --> 00:32:08,159
to well known and address the security

794
00:32:08,159 --> 00:32:10,320
thing before we

795
00:32:10,320 --> 00:32:12,240
talk about adopting it too like that's a

796
00:32:12,240 --> 00:32:15,200
that's just a trivial revert they all

797
00:32:15,200 --> 00:32:16,640
they also seem like perfectly reasonable

798
00:32:16,640 --> 00:32:18,720
things to bash out in the working group

799
00:32:18,720 --> 00:32:20,799
i think the problem is clearly stated in

800
00:32:20,799 --> 00:32:22,240
this document and i think we all

801
00:32:22,240 --> 00:32:23,840
understand it and we think it's useful

802
00:32:23,840 --> 00:32:24,880
to solve

803
00:32:24,880 --> 00:32:28,919
um that's my impression

804
00:32:29,919 --> 00:32:31,279
do you think maybe like a revision first

805
00:32:31,279 --> 00:32:33,679
and then yeah yeah i can revise that

806
00:32:33,679 --> 00:32:36,480
like next week and then

807
00:32:36,480 --> 00:32:38,080
we can talk about further

808
00:32:38,080 --> 00:32:41,960
thank you sounds great thanks

809
00:32:42,720 --> 00:32:46,880
great i think we have dan next

810
00:32:48,559 --> 00:32:50,320
yeah can you share my slides or should i

811
00:32:50,320 --> 00:32:51,840
yeah

812
00:32:51,840 --> 00:32:54,840
cool

813
00:32:56,640 --> 00:33:01,200
um i can handle the control right

814
00:33:04,320 --> 00:33:06,559
okay you should have control now then

815
00:33:06,559 --> 00:33:09,559
okay

816
00:33:10,559 --> 00:33:13,679
um so i'm presenting um on behalf of my

817
00:33:13,679 --> 00:33:16,080
co-authors um

818
00:33:16,080 --> 00:33:18,640
turo just started working for nokia this

819
00:33:18,640 --> 00:33:21,279
week but because the draft is still

820
00:33:21,279 --> 00:33:23,279
showing him as the

821
00:33:23,279 --> 00:33:25,679
um affiliated with akamai we're we're

822
00:33:25,679 --> 00:33:27,760
leaving it there

823
00:33:27,760 --> 00:33:28,720
so

824
00:33:28,720 --> 00:33:31,279
we made some changes to update uh the

825
00:33:31,279 --> 00:33:32,240
document

826
00:33:32,240 --> 00:33:34,640
based on some feedback and to align it

827
00:33:34,640 --> 00:33:37,200
with the http api rate limit headers

828
00:33:37,200 --> 00:33:40,000
we'll talk about in some details so to

829
00:33:40,000 --> 00:33:43,760
recap what this draft is doing is

830
00:33:43,760 --> 00:33:46,399
trying to help identify

831
00:33:46,399 --> 00:33:49,440
misbehaving clients that are abusing

832
00:33:49,440 --> 00:33:50,720
the target

833
00:33:50,720 --> 00:33:51,600
and

834
00:33:51,600 --> 00:33:53,440
allowing the

835
00:33:53,440 --> 00:33:56,320
the proxy to know about those and uh

836
00:33:56,320 --> 00:33:58,720
slow those down because the alternative

837
00:33:58,720 --> 00:34:00,240
is bad

838
00:34:00,240 --> 00:34:02,399
the alternative is

839
00:34:02,399 --> 00:34:05,039
slowing everything down

840
00:34:05,039 --> 00:34:07,840
um

841
00:34:08,560 --> 00:34:11,199
so the um

842
00:34:11,199 --> 00:34:13,679
the change to use the http api rate

843
00:34:13,679 --> 00:34:16,079
limit headers is we're extending those

844
00:34:16,079 --> 00:34:17,520
slightly

845
00:34:17,520 --> 00:34:18,480
to

846
00:34:18,480 --> 00:34:20,960
include detail that is just for the

847
00:34:20,960 --> 00:34:23,599
proxy so that the proxy knows

848
00:34:23,599 --> 00:34:25,199
that it's supposed to

849
00:34:25,199 --> 00:34:28,000
process that header and deal with it and

850
00:34:28,000 --> 00:34:30,159
not pass that on to the client because

851
00:34:30,159 --> 00:34:34,399
it's it's not useful for the client

852
00:34:34,399 --> 00:34:36,639
um so the uh

853
00:34:36,639 --> 00:34:39,520
underscored and highlighted uh text here

854
00:34:39,520 --> 00:34:42,159
is the extensions uh that we're

855
00:34:42,159 --> 00:34:45,440
describing in the draft now uh the http

856
00:34:45,440 --> 00:34:48,079
target equals two i talk about in a

857
00:34:48,079 --> 00:34:49,760
couple of slides from now

858
00:34:49,760 --> 00:34:54,079
and uh that that is a signal to the uh

859
00:34:54,079 --> 00:34:57,520
proxy that this is um a certain style

860
00:34:57,520 --> 00:35:00,079
that you know of a attack and a certain

861
00:35:00,079 --> 00:35:02,720
style of

862
00:35:02,720 --> 00:35:04,800
behavior that we would like to see from

863
00:35:04,800 --> 00:35:06,160
that proxy

864
00:35:06,160 --> 00:35:08,160
and if the proxy can't

865
00:35:08,160 --> 00:35:09,280
meet that

866
00:35:09,280 --> 00:35:10,720
there's there's no feedback that it

867
00:35:10,720 --> 00:35:12,880
can't or it won't

868
00:35:12,880 --> 00:35:15,920
it's just a way to hopefully prevent all

869
00:35:15,920 --> 00:35:18,560
the traffic from that proxy from being

870
00:35:18,560 --> 00:35:19,920
throttled

871
00:35:19,920 --> 00:35:21,200
by the target

872
00:35:21,200 --> 00:35:24,160
because of a single misbehaving client

873
00:35:24,160 --> 00:35:26,320
such as one sending

874
00:35:26,320 --> 00:35:29,520
malformed http or or some other sort of

875
00:35:29,520 --> 00:35:31,040
attack traffic

876
00:35:31,040 --> 00:35:32,000
that

877
00:35:32,000 --> 00:35:33,440
you know is is either purposefully

878
00:35:33,440 --> 00:35:35,119
malicious or accidentally malicious

879
00:35:35,119 --> 00:35:36,560
because something has gone wrong in the

880
00:35:36,560 --> 00:35:38,799
client

881
00:35:40,480 --> 00:35:43,359
and this is the example message flow um

882
00:35:43,359 --> 00:35:46,800
it's very much like uh the http api

883
00:35:46,800 --> 00:35:48,000
uh that

884
00:35:48,000 --> 00:35:50,400
we're patterning this after uh but we're

885
00:35:50,400 --> 00:35:53,359
just tacking on the o http target

886
00:35:53,359 --> 00:35:56,079
parameter to this uh that is processed

887
00:35:56,079 --> 00:35:56,960
by

888
00:35:56,960 --> 00:35:57,920
the

889
00:35:57,920 --> 00:35:58,880
relay

890
00:35:58,880 --> 00:36:02,160
that's proxying the traffic

891
00:36:06,720 --> 00:36:09,359
and uh the interesting one here uh you

892
00:36:09,359 --> 00:36:11,839
know one is somewhat interesting um

893
00:36:11,839 --> 00:36:13,520
number two is is where it's more

894
00:36:13,520 --> 00:36:15,760
interesting uh in that

895
00:36:15,760 --> 00:36:16,800
the

896
00:36:16,800 --> 00:36:19,760
the client traffic is identified by the

897
00:36:19,760 --> 00:36:22,079
target as being somehow malicious

898
00:36:22,079 --> 00:36:24,000
malformed http is the easiest one to

899
00:36:24,000 --> 00:36:25,839
conceptualize

900
00:36:25,839 --> 00:36:28,720
and the other change that we made that

901
00:36:28,720 --> 00:36:30,480
is probably interesting to the working

902
00:36:30,480 --> 00:36:32,320
group is the

903
00:36:32,320 --> 00:36:35,200
proxy doesn't need to

904
00:36:35,200 --> 00:36:36,079
take

905
00:36:36,079 --> 00:36:38,320
take account immediately but can wait

906
00:36:38,320 --> 00:36:40,320
until it receives several of these

907
00:36:40,320 --> 00:36:42,640
messages from the target complaining

908
00:36:42,640 --> 00:36:45,359
about about the same client

909
00:36:45,359 --> 00:36:46,960
and then start taking action against

910
00:36:46,960 --> 00:36:49,760
that client to rate limit uh what it's

911
00:36:49,760 --> 00:36:52,000
doing

912
00:36:52,240 --> 00:36:55,040
the purpose of that is to prevent uh the

913
00:36:55,040 --> 00:36:57,680
partitioning of uh good clients from bad

914
00:36:57,680 --> 00:37:01,200
clients uh or rather they pretend to

915
00:37:01,200 --> 00:37:03,200
prevent the partitioning of good clients

916
00:37:03,200 --> 00:37:05,200
and good clients such that we're only

917
00:37:05,200 --> 00:37:07,520
partitioning the good clients versus the

918
00:37:07,520 --> 00:37:09,520
bad clients where the bad clients are

919
00:37:09,520 --> 00:37:11,040
generating uh

920
00:37:11,040 --> 00:37:15,200
bad http and bad transactions

921
00:37:16,240 --> 00:37:18,480
uh and one other addition to the draft

922
00:37:18,480 --> 00:37:20,839
is a mechanism for

923
00:37:20,839 --> 00:37:24,560
the proxy and the target to

924
00:37:24,560 --> 00:37:26,640
communicate with each other about which

925
00:37:26,640 --> 00:37:29,359
headers that they're going to understand

926
00:37:29,359 --> 00:37:30,880
between each other

927
00:37:30,880 --> 00:37:33,280
the value here is if they're not

928
00:37:33,280 --> 00:37:35,440
configured by the same entity

929
00:37:35,440 --> 00:37:36,720
where the the

930
00:37:36,720 --> 00:37:38,240
changes can be pushed out at the same

931
00:37:38,240 --> 00:37:39,119
time

932
00:37:39,119 --> 00:37:41,599
then this helps prevent inconsistencies

933
00:37:41,599 --> 00:37:43,920
in the configuration between the proxy

934
00:37:43,920 --> 00:37:45,040
and the target

935
00:37:45,040 --> 00:37:47,680
so that they understand the headers that

936
00:37:47,680 --> 00:37:50,079
will be stripped by the proxy and the

937
00:37:50,079 --> 00:37:53,760
headers that will be sent by the target

938
00:37:56,320 --> 00:37:59,680
and that's this draft

939
00:38:00,240 --> 00:38:03,720
are there any questions

940
00:38:09,119 --> 00:38:12,079
and schwartz uh so yeah i i think this

941
00:38:12,079 --> 00:38:15,359
is similar to to my previous concerns

942
00:38:15,359 --> 00:38:17,599
here the

943
00:38:17,599 --> 00:38:20,400
the o http target equals two setting

944
00:38:20,400 --> 00:38:22,000
appears to

945
00:38:22,000 --> 00:38:24,960
allow an instruction from the gateway

946
00:38:24,960 --> 00:38:26,480
to the relay

947
00:38:26,480 --> 00:38:28,880
telling it to apply special treatment to

948
00:38:28,880 --> 00:38:30,240
a particular

949
00:38:30,240 --> 00:38:31,440
user

950
00:38:31,440 --> 00:38:34,240
uh it seems difficult to me to

951
00:38:34,240 --> 00:38:36,880
understand how you do this within

952
00:38:36,880 --> 00:38:39,839
the ohtttp threat model

953
00:38:39,839 --> 00:38:42,560
basically the the gateway if it wants to

954
00:38:42,560 --> 00:38:45,359
try to link different requests if it

955
00:38:45,359 --> 00:38:47,200
sees a bunch of requests coming in

956
00:38:47,200 --> 00:38:49,040
uh and it wants to slow them down that

957
00:38:49,040 --> 00:38:51,359
that in a sense by definition is linking

958
00:38:51,359 --> 00:38:53,359
them right if you believe

959
00:38:53,359 --> 00:38:55,119
that that this particular flood of

960
00:38:55,119 --> 00:38:57,599
requests all comes from a single user

961
00:38:57,599 --> 00:38:59,520
being able to

962
00:38:59,520 --> 00:39:01,960
answer that question in any way breaks

963
00:39:01,960 --> 00:39:05,280
ohtttp's unlinkability guarantees

964
00:39:05,280 --> 00:39:06,480
so

965
00:39:06,480 --> 00:39:08,000
uh

966
00:39:08,000 --> 00:39:09,680
so it's i'm not saying it's it's

967
00:39:09,680 --> 00:39:12,320
technically impossible i'm saying that

968
00:39:12,320 --> 00:39:15,119
we need to be very careful about what we

969
00:39:15,119 --> 00:39:16,800
recommend here because we're punching a

970
00:39:16,800 --> 00:39:18,640
hole in our own

971
00:39:18,640 --> 00:39:20,960
in our own privacy claims

972
00:39:20,960 --> 00:39:21,839
right

973
00:39:21,839 --> 00:39:23,280
okay

974
00:39:23,280 --> 00:39:26,000
uh and so i think uh i think there's a

975
00:39:26,000 --> 00:39:28,240
really interesting question here about

976
00:39:28,240 --> 00:39:30,160
you know what a relay

977
00:39:30,160 --> 00:39:32,640
can safely do

978
00:39:32,640 --> 00:39:35,119
or how much damage it does when you know

979
00:39:35,119 --> 00:39:37,040
when a relay starts to comply with these

980
00:39:37,040 --> 00:39:39,920
kinds of requests and i would certainly

981
00:39:39,920 --> 00:39:41,920
before the draft was adopted i would

982
00:39:41,920 --> 00:39:44,560
want to see some some very sharp

983
00:39:44,560 --> 00:39:46,160
analysis about

984
00:39:46,160 --> 00:39:48,240
what damage that is

985
00:39:48,240 --> 00:39:50,320
okay that's fair

986
00:39:50,320 --> 00:39:52,640
thanks

987
00:39:55,359 --> 00:39:57,040
yeah i think i i think i have similar

988
00:39:57,040 --> 00:39:59,680
concerns to ben here i think that

989
00:39:59,680 --> 00:40:01,200
there has been some changes in the base

990
00:40:01,200 --> 00:40:02,880
document where we talk about

991
00:40:02,880 --> 00:40:04,720
the sorts of things that a client might

992
00:40:04,720 --> 00:40:07,119
be need to be aware of in terms of the

993
00:40:07,119 --> 00:40:10,319
way that the proxy or now the relay

994
00:40:10,319 --> 00:40:12,560
might apply differential treatment based

995
00:40:12,560 --> 00:40:16,640
on characteristics of the client so

996
00:40:16,640 --> 00:40:19,200
for for example if if

997
00:40:19,200 --> 00:40:21,520
you wanted to implement a shadow banning

998
00:40:21,520 --> 00:40:23,200
type arrangement and

999
00:40:23,200 --> 00:40:25,760
the relay was aware of a flood of

1000
00:40:25,760 --> 00:40:28,560
messages coming from a particular client

1001
00:40:28,560 --> 00:40:30,319
it might include a one bit of

1002
00:40:30,319 --> 00:40:32,640
information toward the gateway or the or

1003
00:40:32,640 --> 00:40:34,560
the target that would allow

1004
00:40:34,560 --> 00:40:37,280
the gateway and target to differentiate

1005
00:40:37,280 --> 00:40:39,280
behavior with respect to those

1006
00:40:39,280 --> 00:40:40,960
particular requests

1007
00:40:40,960 --> 00:40:42,640
so that's one type of treatment that

1008
00:40:42,640 --> 00:40:43,920
we've considered

1009
00:40:43,920 --> 00:40:46,480
but in doing that we've been trying to

1010
00:40:46,480 --> 00:40:48,720
be very very clear that the client needs

1011
00:40:48,720 --> 00:40:50,240
to understand the scope of the things

1012
00:40:50,240 --> 00:40:52,319
that are possible in that context once

1013
00:40:52,319 --> 00:40:54,319
you add feedback into the loop

1014
00:40:54,319 --> 00:40:56,560
it becomes much more complicated in

1015
00:40:56,560 --> 00:40:58,400
terms of giving the client some

1016
00:40:58,400 --> 00:41:00,079
confidence that the

1017
00:41:00,079 --> 00:41:02,319
um the gateways and the targets

1018
00:41:02,319 --> 00:41:03,280
aren't

1019
00:41:03,280 --> 00:41:05,359
trying to back out the privacy

1020
00:41:05,359 --> 00:41:07,839
protections avoided by the relay and so

1021
00:41:07,839 --> 00:41:10,000
i see a lot of positive movement here i

1022
00:41:10,000 --> 00:41:11,680
think that um

1023
00:41:11,680 --> 00:41:13,040
the sorts of things that you're doing in

1024
00:41:13,040 --> 00:41:15,280
terms of trying to disconnect the

1025
00:41:15,280 --> 00:41:17,040
immediate effect of the feedback from

1026
00:41:17,040 --> 00:41:19,440
from the actions that um

1027
00:41:19,440 --> 00:41:22,400
occur is probably a good direction to

1028
00:41:22,400 --> 00:41:24,720
have i'm afraid i haven't read the very

1029
00:41:24,720 --> 00:41:27,040
latest in this but i would like to be

1030
00:41:27,040 --> 00:41:29,520
more confident that that analysis was

1031
00:41:29,520 --> 00:41:30,880
good before i

1032
00:41:30,880 --> 00:41:32,800
be confident moving forward

1033
00:41:32,800 --> 00:41:34,000
i think there's probably a few things we

1034
00:41:34,000 --> 00:41:35,680
could change about the spelling as well

1035
00:41:35,680 --> 00:41:36,800
but that's

1036
00:41:36,800 --> 00:41:39,839
that's separate okay

1037
00:41:40,720 --> 00:41:43,200
thanks man

1038
00:41:43,200 --> 00:41:44,640
does that sound

1039
00:41:44,640 --> 00:41:46,720
good ben

1040
00:41:46,720 --> 00:41:49,440
sounded like the consensus is not yet um

1041
00:41:49,440 --> 00:41:52,160
and we can revisit this

1042
00:41:52,160 --> 00:41:53,520
in a bit

1043
00:41:53,520 --> 00:41:56,000
okay sounds good thank you

1044
00:41:56,000 --> 00:41:59,000
thanks

1045
00:42:09,359 --> 00:42:11,520
ben

1046
00:42:14,400 --> 00:42:17,040
uh hi benchwards is there a clicker is

1047
00:42:17,040 --> 00:42:19,280
there a magic clicker no okay

1048
00:42:19,280 --> 00:42:21,520
uh the agenda said i had five minutes so

1049
00:42:21,520 --> 00:42:25,280
i squished these slides down to nothing

1050
00:42:25,280 --> 00:42:27,359
to uh to try to squeeze it all in it

1051
00:42:27,359 --> 00:42:29,119
seems like maybe we have a little more

1052
00:42:29,119 --> 00:42:30,560
time than that yes

1053
00:42:30,560 --> 00:42:32,319
uh but

1054
00:42:32,319 --> 00:42:34,319
so maybe i'll i'll try to explain a

1055
00:42:34,319 --> 00:42:37,680
little more what's going on so this is a

1056
00:42:37,680 --> 00:42:39,760
presentation of

1057
00:42:39,760 --> 00:42:41,760
the first presentation of a

1058
00:42:41,760 --> 00:42:44,800
new draft from just me

1059
00:42:44,800 --> 00:42:46,400
for ojai

1060
00:42:46,400 --> 00:42:48,240
and this is about

1061
00:42:48,240 --> 00:42:51,119
trying to solve what i think of as the

1062
00:42:51,119 --> 00:42:53,440
gateway key consistency

1063
00:42:53,440 --> 00:42:55,920
problem

1064
00:42:56,800 --> 00:42:59,359
for for oblivious http

1065
00:42:59,359 --> 00:43:02,000
although it might have some more general

1066
00:43:02,000 --> 00:43:04,480
applications um

1067
00:43:04,480 --> 00:43:08,319
but let's let's move to the next slide

1068
00:43:09,359 --> 00:43:10,240
so

1069
00:43:10,240 --> 00:43:12,880
uh i think it's easiest to to think

1070
00:43:12,880 --> 00:43:14,960
about this in concrete terms so let's

1071
00:43:14,960 --> 00:43:17,280
let's pick uh an arbitrary concrete

1072
00:43:17,280 --> 00:43:19,760
example and talk about this sort of

1073
00:43:19,760 --> 00:43:21,599
telemetry use case that's mentioned in

1074
00:43:21,599 --> 00:43:23,680
the o http document

1075
00:43:23,680 --> 00:43:27,280
so imagine that your os

1076
00:43:27,280 --> 00:43:29,839
default installation state reports

1077
00:43:29,839 --> 00:43:32,400
telemetry to some sort of

1078
00:43:32,400 --> 00:43:34,400
remote service and that remote service

1079
00:43:34,400 --> 00:43:37,920
supports ohttp

1080
00:43:38,000 --> 00:43:40,960
now you believe that the os image or i'm

1081
00:43:40,960 --> 00:43:43,119
sorry i believe that my os image is the

1082
00:43:43,119 --> 00:43:44,880
same as everyone else's i haven't been

1083
00:43:44,880 --> 00:43:47,920
served a custom crafted os image that

1084
00:43:47,920 --> 00:43:50,319
points me to to a unique

1085
00:43:50,319 --> 00:43:52,480
uh instance of the telemetry service so

1086
00:43:52,480 --> 00:43:53,599
i believe

1087
00:43:53,599 --> 00:43:54,560
that

1088
00:43:54,560 --> 00:43:57,359
that there's essentially that is already

1089
00:43:57,359 --> 00:43:58,560
consistent

1090
00:43:58,560 --> 00:43:59,520
um

1091
00:43:59,520 --> 00:44:01,520
but i still don't trust the telemetry

1092
00:44:01,520 --> 00:44:03,040
service

1093
00:44:03,040 --> 00:44:05,200
not to try to link my reports together

1094
00:44:05,200 --> 00:44:06,560
if i trusted it then i wouldn't need

1095
00:44:06,560 --> 00:44:09,520
ohttp

1096
00:44:09,520 --> 00:44:11,680
so i've configured my os to make use of

1097
00:44:11,680 --> 00:44:14,240
that oh db service i'm using an ohttp

1098
00:44:14,240 --> 00:44:17,280
relay and i trust that relay not to

1099
00:44:17,280 --> 00:44:19,680
collude with the telemetry service

1100
00:44:19,680 --> 00:44:21,680
but in this case also i don't fully

1101
00:44:21,680 --> 00:44:23,920
trust the relay i don't trust it to see

1102
00:44:23,920 --> 00:44:25,920
the plain text context of my reports

1103
00:44:25,920 --> 00:44:29,520
otherwise again we wouldn't need ohttp

1104
00:44:29,520 --> 00:44:31,440
so this is this is trying to get to the

1105
00:44:31,440 --> 00:44:33,200
point where we actually need ohttp at

1106
00:44:33,200 --> 00:44:33,920
all

1107
00:44:33,920 --> 00:44:38,880
uh oh db serves a pretty narrow use case

1108
00:44:38,880 --> 00:44:41,839
okay so so with all those assumptions

1109
00:44:41,839 --> 00:44:44,000
how do i convince myself

1110
00:44:44,000 --> 00:44:47,520
that i'm using uh the gateway url key

1111
00:44:47,520 --> 00:44:49,839
config and target url so

1112
00:44:49,839 --> 00:44:51,599
in this case the target url is the

1113
00:44:51,599 --> 00:44:53,119
telemetry service

1114
00:44:53,119 --> 00:44:54,720
how do i convince myself that those are

1115
00:44:54,720 --> 00:44:56,319
authentic i'm actually talking to the

1116
00:44:56,319 --> 00:44:58,240
telemetry service

1117
00:44:58,240 --> 00:45:00,880
not some random attacker and

1118
00:45:00,880 --> 00:45:02,880
that they're the same ones that everyone

1119
00:45:02,880 --> 00:45:04,319
else is using because if any of those

1120
00:45:04,319 --> 00:45:06,000
are unique if the gateway url is unique

1121
00:45:06,000 --> 00:45:07,920
if the key config is unique or if the

1122
00:45:07,920 --> 00:45:11,680
target url is unique then i am uniquely

1123
00:45:11,680 --> 00:45:12,880
i'm linkable

1124
00:45:12,880 --> 00:45:15,520
and so i've i've lost my ohtttp

1125
00:45:15,520 --> 00:45:17,359
protections

1126
00:45:17,359 --> 00:45:19,040
that's the so that's the problem how do

1127
00:45:19,040 --> 00:45:21,839
we actually get the ohtp protections

1128
00:45:21,839 --> 00:45:23,839
next slide

1129
00:45:23,839 --> 00:45:25,760
okay there's an easy answer to this you

1130
00:45:25,760 --> 00:45:27,520
just hard code all of these right into

1131
00:45:27,520 --> 00:45:29,760
the os image we've already assumed that

1132
00:45:29,760 --> 00:45:31,760
the os image is globally consistent and

1133
00:45:31,760 --> 00:45:34,720
i haven't been served a unique os image

1134
00:45:34,720 --> 00:45:36,560
that was custom crafted as an attack on

1135
00:45:36,560 --> 00:45:37,599
me

1136
00:45:37,599 --> 00:45:39,839
so that's that is the easy answer and it

1137
00:45:39,839 --> 00:45:41,680
does work and we can generalize this and

1138
00:45:41,680 --> 00:45:43,040
say you know any

1139
00:45:43,040 --> 00:45:44,960
any o http

1140
00:45:44,960 --> 00:45:48,000
system assumes some kind of trusted

1141
00:45:48,000 --> 00:45:49,280
bootstrap

1142
00:45:49,280 --> 00:45:52,079
stage that is serving providing

1143
00:45:52,079 --> 00:45:56,000
consistent information to the world

1144
00:45:56,000 --> 00:45:57,359
i could just get all of this through

1145
00:45:57,359 --> 00:45:59,760
whatever my bootstrap stages

1146
00:45:59,760 --> 00:46:01,599
that's that's fine

1147
00:46:01,599 --> 00:46:04,319
but i i don't think it's very attractive

1148
00:46:04,319 --> 00:46:06,720
as an operational practice

1149
00:46:06,720 --> 00:46:08,079
among other things it prevents key

1150
00:46:08,079 --> 00:46:09,839
rotation if you bake the key configs

1151
00:46:09,839 --> 00:46:11,119
into the operating system you can't

1152
00:46:11,119 --> 00:46:12,480
rotate the keys

1153
00:46:12,480 --> 00:46:14,000
so that's a that's a pretty obvious

1154
00:46:14,000 --> 00:46:16,000
problem and there are other changes you

1155
00:46:16,000 --> 00:46:17,359
might like to make maybe you want to

1156
00:46:17,359 --> 00:46:19,119
maybe your gateway is operated as a

1157
00:46:19,119 --> 00:46:20,720
hosted cloud service and you want to

1158
00:46:20,720 --> 00:46:22,319
change service providers to a different

1159
00:46:22,319 --> 00:46:24,240
gateway operator

1160
00:46:24,240 --> 00:46:26,799
next slide

1161
00:46:27,359 --> 00:46:28,560
so

1162
00:46:28,560 --> 00:46:31,040
this proposal tries to solve that it

1163
00:46:31,040 --> 00:46:32,720
tries to enable

1164
00:46:32,720 --> 00:46:35,839
in a sense dynamic bootstrap without

1165
00:46:35,839 --> 00:46:39,280
losing the ohtttp privacy guarantees

1166
00:46:39,280 --> 00:46:41,119
and this is how it works

1167
00:46:41,119 --> 00:46:44,720
first first you you create some kind of

1168
00:46:44,720 --> 00:46:47,440
config file that holds the gateway url

1169
00:46:47,440 --> 00:46:48,880
the key config

1170
00:46:48,880 --> 00:46:51,359
and a description of the actual service

1171
00:46:51,359 --> 00:46:55,680
you're trying to reach target url

1172
00:46:55,680 --> 00:46:57,200
i have been calling this the service

1173
00:46:57,200 --> 00:46:59,119
description host

1174
00:46:59,119 --> 00:47:00,880
uh that's the origin that hosts this

1175
00:47:00,880 --> 00:47:02,960
thing uh this is all

1176
00:47:02,960 --> 00:47:04,640
uh there's another draft that i'll be

1177
00:47:04,640 --> 00:47:06,960
talking about in mask that actually lays

1178
00:47:06,960 --> 00:47:09,280
out a format for this kind of config

1179
00:47:09,280 --> 00:47:11,200
file but the the exact format doesn't

1180
00:47:11,200 --> 00:47:13,919
really matter here

1181
00:47:14,079 --> 00:47:14,880
so

1182
00:47:14,880 --> 00:47:16,880
uh we fetch this config through the

1183
00:47:16,880 --> 00:47:17,920
relay

1184
00:47:17,920 --> 00:47:20,800
and we ask the relay to act as a cache

1185
00:47:20,800 --> 00:47:21,920
and this is

1186
00:47:21,920 --> 00:47:24,720
basically just an http cache

1187
00:47:24,720 --> 00:47:27,280
this is like an old-fashioned http

1188
00:47:27,280 --> 00:47:30,559
forward proxy before https so it's like

1189
00:47:30,559 --> 00:47:33,200
a caching forward proxy we just ask the

1190
00:47:33,200 --> 00:47:34,720
relay

1191
00:47:34,720 --> 00:47:36,160
to fetch the

1192
00:47:36,160 --> 00:47:39,280
the service description for us

1193
00:47:39,280 --> 00:47:40,880
and since it's

1194
00:47:40,880 --> 00:47:43,359
in cash it's usually in cash

1195
00:47:43,359 --> 00:47:45,839
uh we we get back the same answer as all

1196
00:47:45,839 --> 00:47:47,760
the other users of that relay

1197
00:47:47,760 --> 00:47:48,960
crucially

1198
00:47:48,960 --> 00:47:50,319
uh one of the one of the crucial

1199
00:47:50,319 --> 00:47:52,480
observations here is that

1200
00:47:52,480 --> 00:47:55,040
the consistency problems for ohttp are

1201
00:47:55,040 --> 00:47:57,760
only scoped to each relay

1202
00:47:57,760 --> 00:48:00,240
it doesn't matter whether users of

1203
00:48:00,240 --> 00:48:02,559
different relays have consistent views

1204
00:48:02,559 --> 00:48:04,800
here so like we've talked one of the

1205
00:48:04,800 --> 00:48:07,839
things that comes up occasionally um and

1206
00:48:07,839 --> 00:48:09,599
chris wood has enumerated and i draft

1207
00:48:09,599 --> 00:48:13,680
all of the sort of basic strategies for

1208
00:48:13,680 --> 00:48:15,119
for dealing with the key consistency

1209
00:48:15,119 --> 00:48:16,400
problems some of them look like

1210
00:48:16,400 --> 00:48:18,559
blockchains and

1211
00:48:18,559 --> 00:48:20,559
uh you know that's a very powerful

1212
00:48:20,559 --> 00:48:22,400
global consistency mechanism but it

1213
00:48:22,400 --> 00:48:23,440
actually

1214
00:48:23,440 --> 00:48:26,640
doesn't really matter because uh

1215
00:48:26,640 --> 00:48:28,079
it doesn't matter beyond the scope of a

1216
00:48:28,079 --> 00:48:29,760
single relay if you if you're using a

1217
00:48:29,760 --> 00:48:30,960
different relay you're clearly a

1218
00:48:30,960 --> 00:48:33,280
different user

1219
00:48:33,280 --> 00:48:34,480
so

1220
00:48:34,480 --> 00:48:36,160
uh

1221
00:48:36,160 --> 00:48:38,400
so to to get consistency

1222
00:48:38,400 --> 00:48:41,040
scoped to a given relay we just

1223
00:48:41,040 --> 00:48:43,040
uh essentially read the description out

1224
00:48:43,040 --> 00:48:45,440
of cache held in that relay so all the

1225
00:48:45,440 --> 00:48:48,319
users get the same copy and that gives

1226
00:48:48,319 --> 00:48:51,119
us consistency but it doesn't give us

1227
00:48:51,119 --> 00:48:52,319
authenticity

1228
00:48:52,319 --> 00:48:53,920
again we don't trust the relay not to

1229
00:48:53,920 --> 00:48:58,160
try to impersonate the gateway so uh the

1230
00:48:58,160 --> 00:48:59,839
the relay could just be lying to us

1231
00:48:59,839 --> 00:49:02,640
giving us its own key config so to solve

1232
00:49:02,640 --> 00:49:05,280
that we fetch it again

1233
00:49:05,280 --> 00:49:06,720
and this time

1234
00:49:06,720 --> 00:49:08,640
we fetch it directly from the service

1235
00:49:08,640 --> 00:49:10,319
description host over a standard

1236
00:49:10,319 --> 00:49:13,359
authenticated https

1237
00:49:13,359 --> 00:49:16,480
and now that gives us authenticity but

1238
00:49:16,480 --> 00:49:18,480
it doesn't guarantee consistency so to

1239
00:49:18,480 --> 00:49:20,079
make sure that we have both we just

1240
00:49:20,079 --> 00:49:21,680
check that they're identical

1241
00:49:21,680 --> 00:49:24,480
and they should be identical

1242
00:49:24,480 --> 00:49:26,240
there's a little detail here that we ask

1243
00:49:26,240 --> 00:49:28,960
the relay in this system to also be a

1244
00:49:28,960 --> 00:49:30,800
mask proxy

1245
00:49:30,800 --> 00:49:33,280
so connect udp proxy

1246
00:49:33,280 --> 00:49:36,000
uh that seems as as tommy suggested

1247
00:49:36,000 --> 00:49:37,200
earlier that seems like something that

1248
00:49:37,200 --> 00:49:39,280
may be pretty common

1249
00:49:39,280 --> 00:49:40,160
and

1250
00:49:40,160 --> 00:49:42,800
that's not strictly necessary actually

1251
00:49:42,800 --> 00:49:45,920
for uh for our consistency guarantees

1252
00:49:45,920 --> 00:49:48,559
but if you don't do that then the

1253
00:49:48,559 --> 00:49:50,240
gateway ends up with a list of all of

1254
00:49:50,240 --> 00:49:52,800
the ip addresses of the users behind the

1255
00:49:52,800 --> 00:49:54,720
relay and while it can't

1256
00:49:54,720 --> 00:49:55,440
uh

1257
00:49:55,440 --> 00:49:58,720
can't then link requests to one or the

1258
00:49:58,720 --> 00:50:01,119
other you can imagine that it might for

1259
00:50:01,119 --> 00:50:03,200
example take those ip addresses to a

1260
00:50:03,200 --> 00:50:05,440
data broker who tells it more

1261
00:50:05,440 --> 00:50:06,880
information about the users that it

1262
00:50:06,880 --> 00:50:08,640
could eventually use to profile them and

1263
00:50:08,640 --> 00:50:11,280
identify you know this this request is

1264
00:50:11,280 --> 00:50:12,559
really only

1265
00:50:12,559 --> 00:50:15,119
likely to have been from this particular

1266
00:50:15,119 --> 00:50:17,040
person who i know know quite a bit about

1267
00:50:17,040 --> 00:50:18,880
via their ip address

1268
00:50:18,880 --> 00:50:20,240
and quick

1269
00:50:20,240 --> 00:50:22,000
quick clarifying question here uh you're

1270
00:50:22,000 --> 00:50:23,520
assuming the relay and the service

1271
00:50:23,520 --> 00:50:25,040
description hosts are not colluding

1272
00:50:25,040 --> 00:50:26,800
correct

1273
00:50:26,800 --> 00:50:28,960
i'm sorry i can't i didn't quite

1274
00:50:28,960 --> 00:50:30,960
understand the audio

1275
00:50:30,960 --> 00:50:33,760
sorry i was asking if you were assuming

1276
00:50:33,760 --> 00:50:35,680
that the relay and the service

1277
00:50:35,680 --> 00:50:37,599
description host are not colluding with

1278
00:50:37,599 --> 00:50:40,839
each other

1279
00:50:42,640 --> 00:50:44,400
because it seems like if they are then

1280
00:50:44,400 --> 00:50:46,720
the relay could lie about the cache

1281
00:50:46,720 --> 00:50:48,079
the data in the same way the service

1282
00:50:48,079 --> 00:50:49,760
description host does

1283
00:50:49,760 --> 00:50:51,200
i think that's right the service

1284
00:50:51,200 --> 00:50:53,920
description host is is with the gateway

1285
00:50:53,920 --> 00:50:56,240
and target in the sort of ohtttp

1286
00:50:56,240 --> 00:50:58,240
partitioning of roles

1287
00:50:58,240 --> 00:50:59,760
so the service description host is

1288
00:50:59,760 --> 00:51:02,480
assumed to be an agent of or closely

1289
00:51:02,480 --> 00:51:05,359
affiliated with the gateway and target

1290
00:51:05,359 --> 00:51:06,720
okay thanks

1291
00:51:06,720 --> 00:51:09,839
okay next slide

1292
00:51:10,559 --> 00:51:12,559
okay there are a lot of details in the

1293
00:51:12,559 --> 00:51:14,559
draft about exactly how this works it's

1294
00:51:14,559 --> 00:51:16,880
all in the draft in this proposal it's

1295
00:51:16,880 --> 00:51:19,599
all stitched together from standard http

1296
00:51:19,599 --> 00:51:22,000
stuff lots of different headers for

1297
00:51:22,000 --> 00:51:25,440
standard caching headers there are a few

1298
00:51:25,440 --> 00:51:27,599
slight tweaks beyond

1299
00:51:27,599 --> 00:51:29,920
what is just required by the standard

1300
00:51:29,920 --> 00:51:32,640
implementation of these headers

1301
00:51:32,640 --> 00:51:33,760
and that

1302
00:51:33,760 --> 00:51:35,920
gives us defenses against a bunch of

1303
00:51:35,920 --> 00:51:37,920
different kinds of attackers

1304
00:51:37,920 --> 00:51:40,640
so we we consider

1305
00:51:40,640 --> 00:51:44,319
both in malicious relays and malicious

1306
00:51:44,319 --> 00:51:46,559
service description hosts slash gateway

1307
00:51:46,559 --> 00:51:48,800
slash target as

1308
00:51:48,800 --> 00:51:50,640
as i was discussing earlier

1309
00:51:50,640 --> 00:51:52,960
the draft also tries to acknowledge the

1310
00:51:52,960 --> 00:51:55,760
possibility of malicious clients who are

1311
00:51:55,760 --> 00:51:56,880
colluding

1312
00:51:56,880 --> 00:51:59,599
with the service description host

1313
00:51:59,599 --> 00:52:01,839
to for example try to

1314
00:52:01,839 --> 00:52:05,119
overflow the cache of the relay in order

1315
00:52:05,119 --> 00:52:07,760
to reset its state in order to

1316
00:52:07,760 --> 00:52:09,760
serve different service descriptions to

1317
00:52:09,760 --> 00:52:12,559
every user for linkability

1318
00:52:12,559 --> 00:52:14,000
and the draft also talks about the

1319
00:52:14,000 --> 00:52:16,000
performance considerations you might

1320
00:52:16,000 --> 00:52:18,720
think that fetching the fetching this

1321
00:52:18,720 --> 00:52:21,280
service description twice before you can

1322
00:52:21,280 --> 00:52:25,119
use it is a big performance penalty

1323
00:52:25,119 --> 00:52:27,440
uh i actually think it's pretty

1324
00:52:27,440 --> 00:52:30,160
manageable my in my analysis through the

1325
00:52:30,160 --> 00:52:31,680
in the draft i think it adds up to about

1326
00:52:31,680 --> 00:52:34,079
two round trips basically the same as a

1327
00:52:34,079 --> 00:52:34,960
fresh

1328
00:52:34,960 --> 00:52:37,440
quick setup one one round trip to set up

1329
00:52:37,440 --> 00:52:39,839
quick one round trip to fetch the

1330
00:52:39,839 --> 00:52:42,880
uh to fetch the resource

1331
00:52:42,880 --> 00:52:43,920
but

1332
00:52:43,920 --> 00:52:45,040
uh

1333
00:52:45,040 --> 00:52:46,800
i think that for most of the use cases

1334
00:52:46,800 --> 00:52:48,240
we're talking about once you get that

1335
00:52:48,240 --> 00:52:50,319
service description it's good for

1336
00:52:50,319 --> 00:52:51,839
hours two days

1337
00:52:51,839 --> 00:52:54,800
so two round trips once a day uh or

1338
00:52:54,800 --> 00:52:56,720
something like that i think is is pretty

1339
00:52:56,720 --> 00:52:59,280
manageable

1340
00:52:59,280 --> 00:53:02,640
uh okay last slide

1341
00:53:02,640 --> 00:53:04,319
so uh i

1342
00:53:04,319 --> 00:53:06,079
my current thought is that this could be

1343
00:53:06,079 --> 00:53:09,839
a good document to fit into ojai

1344
00:53:09,839 --> 00:53:11,119
uh

1345
00:53:11,119 --> 00:53:12,000
and

1346
00:53:12,000 --> 00:53:12,960
uh

1347
00:53:12,960 --> 00:53:15,119
i i think it's it'll probably evolve

1348
00:53:15,119 --> 00:53:17,440
quite a bit but uh i would like to see

1349
00:53:17,440 --> 00:53:20,240
it see it move forward here to try to

1350
00:53:20,240 --> 00:53:22,000
unlock some of those

1351
00:53:22,000 --> 00:53:23,680
broader use cases where you're

1352
00:53:23,680 --> 00:53:25,920
discovering your

1353
00:53:25,920 --> 00:53:29,119
uh your gateway uh

1354
00:53:29,119 --> 00:53:32,640
as you move about the internet

1355
00:53:34,800 --> 00:53:36,480
cool um

1356
00:53:36,480 --> 00:53:38,880
martin i think you were first

1357
00:53:38,880 --> 00:53:41,880
no

1358
00:53:50,400 --> 00:53:54,400
hi ben thank you for sharing this um

1359
00:53:54,800 --> 00:53:56,480
i originally was going to come up with

1360
00:53:56,480 --> 00:53:58,240
just kind of about a nit

1361
00:53:58,240 --> 00:54:00,079
for where you're listing like oh the

1362
00:54:00,079 --> 00:54:02,240
other check would be connect udp

1363
00:54:02,240 --> 00:54:03,520
i you know

1364
00:54:03,520 --> 00:54:05,520
that works if your target server is

1365
00:54:05,520 --> 00:54:06,960
doing quick

1366
00:54:06,960 --> 00:54:08,319
um

1367
00:54:08,319 --> 00:54:11,280
it obviously could just be

1368
00:54:11,280 --> 00:54:13,760
uh another h2 server so like you know

1369
00:54:13,760 --> 00:54:15,520
connect connect udp

1370
00:54:15,520 --> 00:54:17,760
some variant of that and i think really

1371
00:54:17,760 --> 00:54:20,000
rather than talking about that

1372
00:54:20,000 --> 00:54:21,839
it would be useful to structure this in

1373
00:54:21,839 --> 00:54:23,359
terms of

1374
00:54:23,359 --> 00:54:25,680
the like the tls context in which you

1375
00:54:25,680 --> 00:54:28,000
are fetching the key config right so

1376
00:54:28,000 --> 00:54:30,640
like you want one tls con like a tls

1377
00:54:30,640 --> 00:54:34,240
connection to the actual

1378
00:54:34,480 --> 00:54:37,280
service description that's like um

1379
00:54:37,280 --> 00:54:39,680
authoritative for this target and then

1380
00:54:39,680 --> 00:54:43,119
another one so to a different context

1381
00:54:43,119 --> 00:54:44,240
which in this case is the one on the

1382
00:54:44,240 --> 00:54:46,079
relay so like you have essentially two

1383
00:54:46,079 --> 00:54:47,200
tls

1384
00:54:47,200 --> 00:54:49,280
handshakes to two different entities and

1385
00:54:49,280 --> 00:54:50,960
they both agree

1386
00:54:50,960 --> 00:54:52,720
and then really at that point i imagine

1387
00:54:52,720 --> 00:54:54,160
like that other one doesn't even need to

1388
00:54:54,160 --> 00:54:55,599
be the relay that's caching it could

1389
00:54:55,599 --> 00:54:57,760
just be anyone else so i think this

1390
00:54:57,760 --> 00:54:59,920
sounds like it generalizes to

1391
00:54:59,920 --> 00:55:01,359
check with the person who says they own

1392
00:55:01,359 --> 00:55:02,799
the key config and check with someone

1393
00:55:02,799 --> 00:55:03,839
else

1394
00:55:03,839 --> 00:55:06,559
in two different tls handshake contexts

1395
00:55:06,559 --> 00:55:07,599
and then

1396
00:55:07,599 --> 00:55:10,000
that gives you a bit more trust

1397
00:55:10,000 --> 00:55:11,200
is that right

1398
00:55:11,200 --> 00:55:12,960
i i think that's

1399
00:55:12,960 --> 00:55:15,040
that's probably mostly right i do think

1400
00:55:15,040 --> 00:55:17,920
there are some reasons to focus on this

1401
00:55:17,920 --> 00:55:20,640
on on this assignment of roles one of

1402
00:55:20,640 --> 00:55:21,920
them is

1403
00:55:21,920 --> 00:55:23,440
if um

1404
00:55:23,440 --> 00:55:25,200
if if you're the rule is that you just

1405
00:55:25,200 --> 00:55:27,280
have to check with some independent

1406
00:55:27,280 --> 00:55:28,240
party

1407
00:55:28,240 --> 00:55:29,760
and there are 10

1408
00:55:29,760 --> 00:55:31,359
well-known independent parties that

1409
00:55:31,359 --> 00:55:33,520
people like to use right and then all

1410
00:55:33,520 --> 00:55:35,200
the people on your relay choose one of

1411
00:55:35,200 --> 00:55:36,799
them at random

1412
00:55:36,799 --> 00:55:39,520
then you've partitioned yourself into 10

1413
00:55:39,520 --> 00:55:41,359
buckets on that relay

1414
00:55:41,359 --> 00:55:44,319
so it helps a lot if everybody on the

1415
00:55:44,319 --> 00:55:46,400
relay is using the same

1416
00:55:46,400 --> 00:55:47,520
cash so well it doesn't have to be

1417
00:55:47,520 --> 00:55:49,760
physically on the relay it does help to

1418
00:55:49,760 --> 00:55:51,760
connect it right but that seems like

1419
00:55:51,760 --> 00:55:53,599
it's like a you know maybe it should be

1420
00:55:53,599 --> 00:55:54,880
on your relay but you could have

1421
00:55:54,880 --> 00:55:56,559
alternate setups in which everyone talks

1422
00:55:56,559 --> 00:55:58,480
to a different cache

1423
00:55:58,480 --> 00:56:00,079
that doesn't have to be the same box as

1424
00:56:00,079 --> 00:56:02,960
your relay yes i think it just helps if

1425
00:56:02,960 --> 00:56:05,200
it's affiliated in a sort of one-to-one

1426
00:56:05,200 --> 00:56:06,000
way

1427
00:56:06,000 --> 00:56:08,160
cool

1428
00:56:09,599 --> 00:56:10,720
yeah so

1429
00:56:10,720 --> 00:56:12,880
i think the um

1430
00:56:12,880 --> 00:56:14,400
the way that you structure this is quite

1431
00:56:14,400 --> 00:56:16,000
good i like the idea of using a double

1432
00:56:16,000 --> 00:56:17,760
check sort of technique

1433
00:56:17,760 --> 00:56:19,119
i

1434
00:56:19,119 --> 00:56:21,280
don't think the connect aspect to this

1435
00:56:21,280 --> 00:56:24,400
is necessarily important here as much

1436
00:56:24,400 --> 00:56:26,160
as the the point that you just made

1437
00:56:26,160 --> 00:56:29,280
about the the relay being involved in

1438
00:56:29,280 --> 00:56:32,160
caching the information so

1439
00:56:32,160 --> 00:56:34,160
concretely what what you're describing

1440
00:56:34,160 --> 00:56:36,160
is you're going to talk directly to the

1441
00:56:36,160 --> 00:56:37,599
authoritative source because that's

1442
00:56:37,599 --> 00:56:40,400
necessary for correctness

1443
00:56:40,400 --> 00:56:42,079
um the relay can't give you any

1444
00:56:42,079 --> 00:56:43,839
assurances about correctness if you ask

1445
00:56:43,839 --> 00:56:46,160
for its cash copy of it but the relay

1446
00:56:46,160 --> 00:56:47,839
does give you the ability to get some

1447
00:56:47,839 --> 00:56:50,799
amount of consistency uh out of that and

1448
00:56:50,799 --> 00:56:51,520
so

1449
00:56:51,520 --> 00:56:52,799
that's the structure that i would look

1450
00:56:52,799 --> 00:56:53,680
for

1451
00:56:53,680 --> 00:56:56,160
i don't know that i like the connect

1452
00:56:56,160 --> 00:56:58,400
stuff that you've put in this document i

1453
00:56:58,400 --> 00:56:59,760
particularly don't like the fact that

1454
00:56:59,760 --> 00:57:00,720
you've

1455
00:57:00,720 --> 00:57:03,200
added a requirement for connect udp

1456
00:57:03,200 --> 00:57:04,480
which means that

1457
00:57:04,480 --> 00:57:06,240
you've got connect not only connect udp

1458
00:57:06,240 --> 00:57:08,079
but a requirement to use http 3 and a

1459
00:57:08,079 --> 00:57:09,760
bunch of other things as well which i

1460
00:57:09,760 --> 00:57:11,839
think is somewhat more onerous than what

1461
00:57:11,839 --> 00:57:12,480
we

1462
00:57:12,480 --> 00:57:14,880
concretely need in order to

1463
00:57:14,880 --> 00:57:16,240
obtain the properties that you're

1464
00:57:16,240 --> 00:57:17,359
looking for

1465
00:57:17,359 --> 00:57:19,680
so i i would prefer to

1466
00:57:19,680 --> 00:57:21,599
to maybe step back a little bit

1467
00:57:21,599 --> 00:57:23,680
and look at the abstract thing and talk

1468
00:57:23,680 --> 00:57:25,680
about those those two things that i

1469
00:57:25,680 --> 00:57:28,160
talked about before and then um

1470
00:57:28,160 --> 00:57:30,960
talk about why you might choose to do

1471
00:57:30,960 --> 00:57:32,400
things like connect tunnels and other

1472
00:57:32,400 --> 00:57:35,440
things as optimizations or

1473
00:57:35,440 --> 00:57:37,280
so on and so forth

1474
00:57:37,280 --> 00:57:39,599
as as enhancements rather than than

1475
00:57:39,599 --> 00:57:40,960
being part of the core solution that

1476
00:57:40,960 --> 00:57:43,119
you've described sure uh i would be

1477
00:57:43,119 --> 00:57:45,440
interested to know whether you think

1478
00:57:45,440 --> 00:57:47,599
in general for ohtttp

1479
00:57:47,599 --> 00:57:49,599
you know do you feel it's important

1480
00:57:49,599 --> 00:57:50,720
that

1481
00:57:50,720 --> 00:57:54,559
the gateway not learn the client ip

1482
00:57:54,559 --> 00:57:57,359
addresses as a as a whole the pool of

1483
00:57:57,359 --> 00:58:00,319
client ap addresses

1484
00:58:00,319 --> 00:58:03,440
uh the gateway i i don't think that in

1485
00:58:03,440 --> 00:58:05,520
general that's that's a problem i think

1486
00:58:05,520 --> 00:58:07,680
it may become a problem depending on

1487
00:58:07,680 --> 00:58:11,440
certain deployments and contexts yes

1488
00:58:11,440 --> 00:58:13,200
particularly when you consider the

1489
00:58:13,200 --> 00:58:15,760
possibility that clients might also

1490
00:58:15,760 --> 00:58:18,000
be connecting to the server that

1491
00:58:18,000 --> 00:58:20,799
operates the gateway for other purposes

1492
00:58:20,799 --> 00:58:23,200
outside of the this particular

1493
00:58:23,200 --> 00:58:24,640
usage so

1494
00:58:24,640 --> 00:58:25,440
um

1495
00:58:25,440 --> 00:58:26,799
it's something to think about and we

1496
00:58:26,799 --> 00:58:28,079
should probably

1497
00:58:28,079 --> 00:58:30,720
document the consequences of taking the

1498
00:58:30,720 --> 00:58:32,160
direct route as opposed to a proxy

1499
00:58:32,160 --> 00:58:34,720
drought but um

1500
00:58:34,720 --> 00:58:36,960
concentrating on the core which is

1501
00:58:36,960 --> 00:58:39,520
we want correctness and consistency

1502
00:58:39,520 --> 00:58:41,599
and and how we achieve that is probably

1503
00:58:41,599 --> 00:58:43,839
where i would like to see this go first

1504
00:58:43,839 --> 00:58:45,359
okay thank you

1505
00:58:45,359 --> 00:58:48,000
last question

1506
00:58:48,319 --> 00:58:51,359
eric google a couple comments first i

1507
00:58:51,359 --> 00:58:52,720
really like this overall i've been

1508
00:58:52,720 --> 00:58:54,079
saying for a while that practice and

1509
00:58:54,079 --> 00:58:55,359
consistency is something we really need

1510
00:58:55,359 --> 00:58:57,920
to solve and this is you've

1511
00:58:57,920 --> 00:58:59,280
taken a pretty good approach here i

1512
00:58:59,280 --> 00:59:01,359
think and i i want us to work on and

1513
00:59:01,359 --> 00:59:02,559
fine-tune this

1514
00:59:02,559 --> 00:59:04,880
um next comment those are the correspond

1515
00:59:04,880 --> 00:59:06,799
comment what i said earlier in discovery

1516
00:59:06,799 --> 00:59:09,680
and the config distribution

1517
00:59:09,680 --> 00:59:11,520
i see that one focusing more on being

1518
00:59:11,520 --> 00:59:12,799
the payload and

1519
00:59:12,799 --> 00:59:14,480
this the draft you have here currently

1520
00:59:14,480 --> 00:59:16,160
does have a payload listed in it and

1521
00:59:16,160 --> 00:59:18,079
it's okay we're just being redundant and

1522
00:59:18,079 --> 00:59:20,400
this is doesn't mean that so this should

1523
00:59:20,400 --> 00:59:21,440
be point of that and that should be

1524
00:59:21,440 --> 00:59:23,200
pointing to this just strip the payload

1525
00:59:23,200 --> 00:59:24,480
stuff out of this

1526
00:59:24,480 --> 00:59:26,559
um third comment though once we've

1527
00:59:26,559 --> 00:59:29,040
removed the specific payload from this

1528
00:59:29,040 --> 00:59:31,839
draft this just becomes a generic draft

1529
00:59:31,839 --> 00:59:33,040
for

1530
00:59:33,040 --> 00:59:36,160
receiving a shared payload

1531
00:59:36,160 --> 00:59:38,960
with proven correct and or validate

1532
00:59:38,960 --> 00:59:41,680
correct and validated actually shared

1533
00:59:41,680 --> 00:59:44,480
and it's not even using oblivious itself

1534
00:59:44,480 --> 00:59:46,720
so this stops feeling like an oblivious

1535
00:59:46,720 --> 00:59:47,920
specific thing other than the fact that

1536
00:59:47,920 --> 00:59:50,079
we really need it so

1537
00:59:50,079 --> 00:59:52,400
at the cost of potentially slowing down

1538
00:59:52,400 --> 00:59:54,480
a draft that i want yesterday

1539
00:59:54,480 --> 00:59:56,000
i almost suggest that we should maybe

1540
00:59:56,000 --> 00:59:58,319
send this to a dispatch group to see if

1541
00:59:58,319 --> 00:59:59,839
there's a better more general place with

1542
00:59:59,839 --> 01:00:01,599
the night you have to have this

1543
01:00:01,599 --> 01:00:03,520
and if no if we can't find a better

1544
01:00:03,520 --> 01:00:04,720
place then yes then we actually should

1545
01:00:04,720 --> 01:00:06,880
adopt into this group then because we do

1546
01:00:06,880 --> 01:00:09,200
need it

1547
01:00:10,240 --> 01:00:11,359
sure

1548
01:00:11,359 --> 01:00:13,599
i do think that ohio is the right home

1549
01:00:13,599 --> 01:00:16,640
for this i you know i prefer not to try

1550
01:00:16,640 --> 01:00:18,400
to go through

1551
01:00:18,400 --> 01:00:20,480
more processed steps there

1552
01:00:20,480 --> 01:00:22,640
on the format point

1553
01:00:22,640 --> 01:00:23,839
the

1554
01:00:23,839 --> 01:00:26,559
this draft does try to lay out a fully

1555
01:00:26,559 --> 01:00:30,640
concrete instantiation of this thing

1556
01:00:30,640 --> 01:00:32,240
in order to do that

1557
01:00:32,240 --> 01:00:35,040
by my logic we need a format that can

1558
01:00:35,040 --> 01:00:36,240
convey

1559
01:00:36,240 --> 01:00:37,359
the

1560
01:00:37,359 --> 01:00:38,880
the target

1561
01:00:38,880 --> 01:00:41,119
key config

1562
01:00:41,119 --> 01:00:44,559
and gateway url as a as a unit because

1563
01:00:44,559 --> 01:00:45,839
they need to be

1564
01:00:45,839 --> 01:00:48,240
cached atomically and and rechecked

1565
01:00:48,240 --> 01:00:50,079
atomically

1566
01:00:50,079 --> 01:00:50,960
uh

1567
01:00:50,960 --> 01:00:52,240
so

1568
01:00:52,240 --> 01:00:53,359
uh

1569
01:00:53,359 --> 01:00:55,359
and that format i will be talking about

1570
01:00:55,359 --> 01:00:59,280
in the in mask because it also embeds uh

1571
01:00:59,280 --> 01:01:01,119
it also has the ability to represent

1572
01:01:01,119 --> 01:01:02,079
mask

1573
01:01:02,079 --> 01:01:03,280
information

1574
01:01:03,280 --> 01:01:05,760
and dose servers and

1575
01:01:05,760 --> 01:01:08,480
uh you know as we were just discussing

1576
01:01:08,480 --> 01:01:11,040
those are maybe not necessary for this

1577
01:01:11,040 --> 01:01:14,160
um to use this draft but or to use this

1578
01:01:14,160 --> 01:01:17,119
strategy but appear to be beneficial for

1579
01:01:17,119 --> 01:01:19,760
privacy when using this strategy

1580
01:01:19,760 --> 01:01:23,200
so i think ben i think we should wrap up

1581
01:01:23,200 --> 01:01:26,240
um it's yeah we're over time

1582
01:01:26,240 --> 01:01:27,599
yeah so i think we can take this on the

1583
01:01:27,599 --> 01:01:29,760
list

1584
01:01:29,760 --> 01:01:31,760
all right great thanks all for coming um

1585
01:01:31,760 --> 01:01:34,240
i think the highlight was that we

1586
01:01:34,240 --> 01:01:35,760
decided to do a last call for the main

1587
01:01:35,760 --> 01:01:37,599
protocol draft and there's some great

1588
01:01:37,599 --> 01:01:39,520
new work lined up so

1589
01:01:39,520 --> 01:01:42,160
see you all next time

1590
01:01:42,160 --> 01:01:46,359
take some time everybody bye

1591
01:01:52,160 --> 01:01:55,160
um

1592
01:02:23,039 --> 01:02:25,119
you

