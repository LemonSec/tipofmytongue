1
00:01:11,840 --> 00:01:13,920
you

2
00:02:01,759 --> 00:02:05,000
hello everybody

3
00:02:13,920 --> 00:02:15,200
just want to make sure that people in

4
00:02:15,200 --> 00:02:17,599
the room can

5
00:02:17,599 --> 00:02:20,920
see the slides

6
00:02:33,680 --> 00:02:35,440
good number of people in the room lovely

7
00:02:35,440 --> 00:02:37,840
to see

8
00:02:38,959 --> 00:02:40,480
i will say

9
00:02:40,480 --> 00:02:43,360
if you are in the room

10
00:02:43,360 --> 00:02:46,720
might as well begin with this one

11
00:02:48,879 --> 00:02:51,040
masks are mandatory so i've been asked

12
00:02:51,040 --> 00:02:53,360
to explicitly remind people of the

13
00:02:53,360 --> 00:02:56,080
masking policy at ietf this year across

14
00:02:56,080 --> 00:02:57,360
the board

15
00:02:57,360 --> 00:03:00,239
if you are attending in person

16
00:03:00,239 --> 00:03:03,840
or required to wear a regionally

17
00:03:03,840 --> 00:03:07,760
approved mask so n95 kf-94 and the rest

18
00:03:07,760 --> 00:03:09,760
certified equivalent i understand the

19
00:03:09,760 --> 00:03:10,959
ietf is

20
00:03:10,959 --> 00:03:13,440
is supplying masks as well if anybody

21
00:03:13,440 --> 00:03:15,519
needs but please ensure that you are

22
00:03:15,519 --> 00:03:17,519
wearing a mask at all times

23
00:03:17,519 --> 00:03:19,360
even if you are asking a question of

24
00:03:19,360 --> 00:03:23,040
presenters the exception of course being

25
00:03:23,040 --> 00:03:24,480
if you are presenting you are not

26
00:03:24,480 --> 00:03:28,798
required to wear a mask in person

27
00:03:30,239 --> 00:03:31,120
okay

28
00:03:31,120 --> 00:03:32,959
a few other admin things

29
00:03:32,959 --> 00:03:36,000
let me get started

30
00:03:37,519 --> 00:03:40,000
uh from notewell standard stuff so the

31
00:03:40,000 --> 00:03:42,640
iutf uh followed the intellectual

32
00:03:42,640 --> 00:03:44,560
property rights disclosure rules as

33
00:03:44,560 --> 00:03:47,120
listed on this slide and i believe most

34
00:03:47,120 --> 00:03:49,599
presentations you will see this

35
00:03:49,599 --> 00:03:51,519
so please make sure you're aware that

36
00:03:51,519 --> 00:03:54,080
any irtf contribution is that's covered

37
00:03:54,080 --> 00:03:56,959
by patents and patent applications

38
00:03:56,959 --> 00:03:58,720
you must disclose that fact or not

39
00:03:58,720 --> 00:04:00,480
participate in the discussion

40
00:04:00,480 --> 00:04:03,040
rtf expects you to file such ipr

41
00:04:03,040 --> 00:04:05,280
disclosures in a timely manner i'm

42
00:04:05,280 --> 00:04:07,040
hoping you have done so

43
00:04:07,040 --> 00:04:09,280
uh in a period measured in days or weeks

44
00:04:09,280 --> 00:04:10,400
not months

45
00:04:10,400 --> 00:04:13,040
irtf prefers that most liberal licensing

46
00:04:13,040 --> 00:04:15,280
terms possible are made available for

47
00:04:15,280 --> 00:04:17,918
irtf stream documents

48
00:04:17,918 --> 00:04:21,120
and the definitive information is in rfc

49
00:04:21,120 --> 00:04:24,120
5378

50
00:04:25,520 --> 00:04:27,919
moving on for audio and video of course

51
00:04:27,919 --> 00:04:30,400
uh irtf routinely makes recordings of

52
00:04:30,400 --> 00:04:33,360
online and in-person meetings um

53
00:04:33,360 --> 00:04:35,600
available online if you're participating

54
00:04:35,600 --> 00:04:38,720
in person and choose not to wear a

55
00:04:38,720 --> 00:04:41,199
red do not photograph lanyard then you

56
00:04:41,199 --> 00:04:43,919
can sent by default to being recorded

57
00:04:43,919 --> 00:04:45,199
okay

58
00:04:45,199 --> 00:04:46,960
uh and if you speak on a microphone

59
00:04:46,960 --> 00:04:48,800
appear on a panel of course or carry out

60
00:04:48,800 --> 00:04:50,639
official duty as a member of the irts

61
00:04:50,639 --> 00:04:51,840
then you can send to appearing and

62
00:04:51,840 --> 00:04:54,720
recordings of that of you at that time

63
00:04:54,720 --> 00:04:56,720
and if you participate online and turn

64
00:04:56,720 --> 00:04:58,240
on your camera and or microphone then

65
00:04:58,240 --> 00:05:02,479
you consent to appear in such recordings

66
00:05:02,720 --> 00:05:05,840
the privacy and code of conduct um as a

67
00:05:05,840 --> 00:05:07,280
participant

68
00:05:07,280 --> 00:05:09,680
uh any irt of activity you acknowledge

69
00:05:09,680 --> 00:05:11,360
that written

70
00:05:11,360 --> 00:05:13,199
audio video and photographic recordings

71
00:05:13,199 --> 00:05:15,360
of you might be made public personal

72
00:05:15,360 --> 00:05:17,520
information you provide to the irtf will

73
00:05:17,520 --> 00:05:21,039
be handled in accordance with policy

74
00:05:21,039 --> 00:05:23,120
uh yes i'm told i'm breaking up left and

75
00:05:23,120 --> 00:05:27,120
right so hold on i don't even unmute

76
00:05:33,199 --> 00:05:35,280
is this any better

77
00:05:35,280 --> 00:05:37,680
hoping it works

78
00:05:37,680 --> 00:05:39,680
let's find out

79
00:05:39,680 --> 00:05:41,840
um

80
00:05:41,840 --> 00:05:43,919
as a participant or attendee you agree

81
00:05:43,919 --> 00:05:46,080
to work respectfully with other

82
00:05:46,080 --> 00:05:48,320
participants and please contact the

83
00:05:48,320 --> 00:05:50,800
ombuds stream if you have any questions

84
00:05:50,800 --> 00:05:52,400
or concerns about this

85
00:05:52,400 --> 00:05:54,720
of course the code of conduct is in rfc

86
00:05:54,720 --> 00:05:57,360
7154 an anti-harassment procedure in

87
00:05:57,360 --> 00:06:00,360
7776

88
00:06:02,240 --> 00:06:03,600
uh

89
00:06:03,600 --> 00:06:06,479
recap of the goals of the irtf fabulous

90
00:06:06,479 --> 00:06:08,160
group focused on longer term research

91
00:06:08,160 --> 00:06:10,000
issues related to the internet while the

92
00:06:10,000 --> 00:06:12,160
parallel organization which is the ietf

93
00:06:12,160 --> 00:06:13,840
focuses on shorter term issues of

94
00:06:13,840 --> 00:06:16,479
engineering and standards making

95
00:06:16,479 --> 00:06:19,280
the irtf conducts research it is not a

96
00:06:19,280 --> 00:06:21,919
standards development organization

97
00:06:21,919 --> 00:06:23,360
but of course important to help bridge

98
00:06:23,360 --> 00:06:26,080
the the two sides so while the irtf can

99
00:06:26,080 --> 00:06:27,759
publish informational and experimental

100
00:06:27,759 --> 00:06:30,240
documents in the rfc series its primary

101
00:06:30,240 --> 00:06:31,680
goal is to promote development of

102
00:06:31,680 --> 00:06:34,080
research collaboration and teamwork in

103
00:06:34,080 --> 00:06:35,840
exploring research issues related to

104
00:06:35,840 --> 00:06:37,440
internet protocols applications

105
00:06:37,440 --> 00:06:39,520
architecture and technology and the

106
00:06:39,520 --> 00:06:42,479
primer for irtf um

107
00:06:42,479 --> 00:06:45,120
primer for ietf participants at irtf of

108
00:06:45,120 --> 00:06:49,000
course is rfc 7418

109
00:06:50,560 --> 00:06:52,720
so moving on to the fun stuff welcome to

110
00:06:52,720 --> 00:06:54,800
a rw everybody i'm really glad you could

111
00:06:54,800 --> 00:06:56,880
make it both those who are in person and

112
00:06:56,880 --> 00:06:58,720
those attending remotely it's it's

113
00:06:58,720 --> 00:07:01,680
lovely to have people join um i want to

114
00:07:01,680 --> 00:07:03,680
make a special thanks to the program

115
00:07:03,680 --> 00:07:05,520
committee this year in particular

116
00:07:05,520 --> 00:07:07,280
because it was a very competitive season

117
00:07:07,280 --> 00:07:10,160
we had four or five premier venues uh

118
00:07:10,160 --> 00:07:13,360
all running at about the same time so

119
00:07:13,360 --> 00:07:15,120
the people who volunteered for for this

120
00:07:15,120 --> 00:07:17,199
committee a particular thanks because

121
00:07:17,199 --> 00:07:19,039
everyone i know had multiple commitments

122
00:07:19,039 --> 00:07:21,280
around the same time

123
00:07:21,280 --> 00:07:23,440
on a personal level uh someone who

124
00:07:23,440 --> 00:07:26,000
couldn't be with us is my co-chair uh tj

125
00:07:26,000 --> 00:07:28,800
and and to be honest tj deserves so much

126
00:07:28,800 --> 00:07:30,400
of the credit for actually putting this

127
00:07:30,400 --> 00:07:31,919
together

128
00:07:31,919 --> 00:07:33,440
without him i honestly couldn't say

129
00:07:33,440 --> 00:07:34,960
where this would be so

130
00:07:34,960 --> 00:07:36,880
tj if if you're in the room thank you

131
00:07:36,880 --> 00:07:38,560
and if you're not in the room um

132
00:07:38,560 --> 00:07:40,639
everybody know that tj did a marvelous

133
00:07:40,639 --> 00:07:43,120
job here

134
00:07:43,280 --> 00:07:46,080
also thanks to the review task force uh

135
00:07:46,080 --> 00:07:49,599
ethan and and johanna

136
00:07:49,599 --> 00:07:51,599
they did a marvelous job in just looking

137
00:07:51,599 --> 00:07:53,440
over reviews making sure they were in

138
00:07:53,440 --> 00:07:55,680
order positive constructive and so on so

139
00:07:55,680 --> 00:07:58,960
thank you both for that

140
00:07:58,960 --> 00:08:00,800
and of course thanks to the sponsors of

141
00:08:00,800 --> 00:08:04,080
a rw specifically which are akamai and

142
00:08:04,080 --> 00:08:06,639
comcast

143
00:08:07,520 --> 00:08:10,400
so um logistics and links uh the paid

144
00:08:10,400 --> 00:08:12,639
the program the paper pdfs and so on are

145
00:08:12,639 --> 00:08:14,879
all available online i'm breaking up

146
00:08:14,879 --> 00:08:18,080
once again one sec

147
00:08:24,240 --> 00:08:25,360
okay

148
00:08:25,360 --> 00:08:26,639
and i'm gonna try and wrap this up

149
00:08:26,639 --> 00:08:28,720
quickly so i don't continue to break up

150
00:08:28,720 --> 00:08:31,280
um i'm presenting the program overview

151
00:08:31,280 --> 00:08:33,360
in reverse order so this afternoon we

152
00:08:33,360 --> 00:08:35,839
have a set of invited talks

153
00:08:35,839 --> 00:08:38,159
to broach a new potential area of

154
00:08:38,159 --> 00:08:40,880
investigation for the irtf

155
00:08:40,880 --> 00:08:43,360
around formal methods and verification

156
00:08:43,360 --> 00:08:45,680
in protocols and development so please

157
00:08:45,680 --> 00:08:47,200
come back this afternoon because i

158
00:08:47,200 --> 00:08:48,800
anticipate these will be a fabulous set

159
00:08:48,800 --> 00:08:50,959
of talks

160
00:08:50,959 --> 00:08:52,640
but in this section

161
00:08:52,640 --> 00:08:56,399
we have a keynote and then the four

162
00:08:56,399 --> 00:08:58,560
papers that were accepted for

163
00:08:58,560 --> 00:09:00,080
publication

164
00:09:00,080 --> 00:09:03,600
um i want to first introduce uh lucas

165
00:09:03,600 --> 00:09:05,040
pardue

166
00:09:05,040 --> 00:09:07,600
who has joined from cloudflare

167
00:09:07,600 --> 00:09:08,800
and he's going to give this interesting

168
00:09:08,800 --> 00:09:10,160
talk called layer four and three

169
00:09:10,160 --> 00:09:12,560
quarters i work with lucas on a regular

170
00:09:12,560 --> 00:09:14,160
basis and he and i have frequent

171
00:09:14,160 --> 00:09:16,000
conversations and the questions that

172
00:09:16,000 --> 00:09:18,480
come up are actually very interesting uh

173
00:09:18,480 --> 00:09:20,160
the layering model in particular has

174
00:09:20,160 --> 00:09:21,920
done very well and we all know for the

175
00:09:21,920 --> 00:09:23,600
evolution and sustainability of the

176
00:09:23,600 --> 00:09:25,839
internet but i think increasingly in

177
00:09:25,839 --> 00:09:29,200
many domains we are starting to see that

178
00:09:29,200 --> 00:09:32,240
the the exchange of information or

179
00:09:32,240 --> 00:09:33,360
signaling

180
00:09:33,360 --> 00:09:35,760
or cooperation between layers is

181
00:09:35,760 --> 00:09:37,839
somehow increasingly important or

182
00:09:37,839 --> 00:09:40,640
relevant so i saw lucas give this talk a

183
00:09:40,640 --> 00:09:43,040
few weeks ago and i know he was

184
00:09:43,040 --> 00:09:44,720
really excited to give it at this venue

185
00:09:44,720 --> 00:09:47,839
so lucas if you are around

186
00:09:47,839 --> 00:09:50,720
i am going to hand off to you as soon as

187
00:09:50,720 --> 00:09:51,519
i

188
00:09:51,519 --> 00:09:55,040
load the slides one sec

189
00:09:58,080 --> 00:09:59,760
i can do a microphone check while we're

190
00:09:59,760 --> 00:10:02,640
waiting can you hear me okay

191
00:10:02,640 --> 00:10:05,040
i can hear you just fine

192
00:10:05,040 --> 00:10:10,640
okay uh welcome slides i'm not seeing

193
00:10:11,760 --> 00:10:13,440
lars i hear you're in the room i'm not

194
00:10:13,440 --> 00:10:15,360
seeing four and three quarters here

195
00:10:15,360 --> 00:10:19,560
lucas do you have your slides handy

196
00:10:22,160 --> 00:10:24,959
it might just been a timing issue with

197
00:10:24,959 --> 00:10:26,720
getting them up to the data tracker in

198
00:10:26,720 --> 00:10:30,480
time for meet echo to upload them

199
00:10:31,040 --> 00:10:33,839
see

200
00:10:39,200 --> 00:10:41,519
okay

201
00:10:44,240 --> 00:10:47,560
sorry audience

202
00:10:57,680 --> 00:11:03,359
no okay i think there is a way to

203
00:11:07,360 --> 00:11:10,240
and um for the interesting time

204
00:11:10,240 --> 00:11:11,839
i probably just do a screen share from

205
00:11:11,839 --> 00:11:14,640
my my local machine if that's okay yep

206
00:11:14,640 --> 00:11:17,440
i'm gonna hand over control to you

207
00:11:17,440 --> 00:11:19,760
okay

208
00:11:23,760 --> 00:11:26,399
thanks lucas take it away

209
00:11:26,399 --> 00:11:29,360
my sharing

210
00:11:29,360 --> 00:11:32,160
ah here we go

211
00:11:41,120 --> 00:11:43,839
just bear with me

212
00:11:58,800 --> 00:12:00,880
okay

213
00:12:00,880 --> 00:12:04,320
i have to do entire screen

214
00:12:08,839 --> 00:12:13,120
oh is that working

215
00:12:15,519 --> 00:12:18,560
it doesn't appear to be working either

216
00:12:18,560 --> 00:12:20,160
yes you can see my cursor but not

217
00:12:20,160 --> 00:12:22,160
anything else

218
00:12:22,160 --> 00:12:25,360
okay hold on and

219
00:12:25,360 --> 00:12:29,480
wait a minute one sec

220
00:12:50,160 --> 00:12:53,839
manage meeting 20

221
00:13:09,680 --> 00:13:12,680
um

222
00:13:22,639 --> 00:13:25,440
no luck on the sharing on your side

223
00:13:25,440 --> 00:13:26,160
no

224
00:13:26,160 --> 00:13:27,040
um

225
00:13:27,040 --> 00:13:28,540
tracker

226
00:13:28,540 --> 00:13:30,399
[Music]

227
00:13:30,399 --> 00:13:34,480
uh melbourne could you potentially share

228
00:13:36,639 --> 00:13:38,160
if you could just load up the pdf we'll

229
00:13:38,160 --> 00:13:41,439
have to do it kind of old school

230
00:13:41,760 --> 00:13:43,920
oh actually

231
00:13:43,920 --> 00:13:46,560
no no uh lucas i am looking now and i

232
00:13:46,560 --> 00:13:50,000
don't see the four and three quarters

233
00:13:50,000 --> 00:13:52,320
in the data tracker at all

234
00:13:52,320 --> 00:13:54,639
okay that was submitted last night maybe

235
00:13:54,639 --> 00:13:56,959
maybe we've just uh crossed paths on

236
00:13:56,959 --> 00:14:02,720
that um okay it wasn't approved let me

237
00:14:02,720 --> 00:14:05,839
let me email you a copy

238
00:14:07,440 --> 00:14:10,440
quickly

239
00:14:25,279 --> 00:14:26,959
i might in the worst case actually

240
00:14:26,959 --> 00:14:28,839
change the order of these

241
00:14:28,839 --> 00:14:32,000
things while i wait

242
00:14:32,000 --> 00:14:34,720
um let's do that are the

243
00:14:34,720 --> 00:14:36,880
look

244
00:14:40,320 --> 00:14:42,000
no

245
00:14:42,000 --> 00:14:45,240
there's something

246
00:14:48,720 --> 00:14:51,040
so it should be on the way i copy colin

247
00:14:51,040 --> 00:14:55,000
in as well just in case

248
00:15:07,680 --> 00:15:10,800
uh colin if you're there i'm tempted to

249
00:15:10,800 --> 00:15:12,320
switch the order of events and do the

250
00:15:12,320 --> 00:15:13,279
keynote

251
00:15:13,279 --> 00:15:15,600
as a finisher i

252
00:15:15,600 --> 00:15:17,519
i've got the slides now i'll just upload

253
00:15:17,519 --> 00:15:18,480
them

254
00:15:18,480 --> 00:15:21,480
okay

255
00:15:28,580 --> 00:15:30,560
[Music]

256
00:15:30,560 --> 00:15:33,560
so

257
00:15:35,000 --> 00:15:42,940
[Music]

258
00:15:50,560 --> 00:15:52,320
okay the slides are uploaded so if you

259
00:15:52,320 --> 00:15:57,040
press refresh in the time series

260
00:15:57,199 --> 00:16:00,240
uh keynote here we go okay

261
00:16:00,240 --> 00:16:03,240
so

262
00:16:23,360 --> 00:16:24,639
except i'm not seeing it in the share

263
00:16:24,639 --> 00:16:27,279
list hold up

264
00:16:27,279 --> 00:16:29,120
so it's i see it in the data track when

265
00:16:29,120 --> 00:16:31,199
i update the meeting notes i see it in

266
00:16:31,199 --> 00:16:33,519
the list

267
00:16:34,720 --> 00:16:39,199
if i go to share preloaded slides

268
00:16:39,440 --> 00:16:42,480
it is not impressed

269
00:16:42,800 --> 00:16:44,000
everybody getting i hope you're not the

270
00:16:44,000 --> 00:16:47,360
only girl that has difficulty with

271
00:16:48,880 --> 00:16:51,839
one second

272
00:17:18,720 --> 00:17:22,319
seeing it in the share slides list

273
00:17:28,559 --> 00:17:31,559
fabulous

274
00:17:33,200 --> 00:17:36,799
okay your show lucas thank you

275
00:17:39,200 --> 00:17:40,559
there we go i've got control of these

276
00:17:40,559 --> 00:17:42,240
slides excellent

277
00:17:42,240 --> 00:17:44,640
um thank you very much for everyone uh

278
00:17:44,640 --> 00:17:46,480
for their patience uh thank you to the

279
00:17:46,480 --> 00:17:48,640
chairs for inviting me to do this talk i

280
00:17:48,640 --> 00:17:50,640
was super excited to come and do this in

281
00:17:50,640 --> 00:17:52,799
a venue with a live audience um and to

282
00:17:52,799 --> 00:17:54,799
be there in the room unfortunately i

283
00:17:54,799 --> 00:17:56,799
i came down being ill so i'm gonna

284
00:17:56,799 --> 00:18:00,240
preface this with um this whole

285
00:18:00,240 --> 00:18:02,799
shaboodle of delays with uh i'm ill so

286
00:18:02,799 --> 00:18:05,039
be kind on me um so i'll be quick

287
00:18:05,039 --> 00:18:06,960
because we spent some time trying to get

288
00:18:06,960 --> 00:18:08,960
to this point um i'm lucas pardo i'm an

289
00:18:08,960 --> 00:18:10,960
engineer at clyde play on the protocols

290
00:18:10,960 --> 00:18:12,960
team working on technologies like quick

291
00:18:12,960 --> 00:18:16,080
and tls and hp 2 and hp 3

292
00:18:16,080 --> 00:18:18,000
these kinds of layers 7

293
00:18:18,000 --> 00:18:20,000
or downwards protocols

294
00:18:20,000 --> 00:18:22,160
and i kind of take the view that the

295
00:18:22,160 --> 00:18:24,720
layering model isn't brilliant for for

296
00:18:24,720 --> 00:18:26,880
some of the kind of work that my team

297
00:18:26,880 --> 00:18:29,760
does um it helps but it's also an

298
00:18:29,760 --> 00:18:31,679
impedance somewhere because we're often

299
00:18:31,679 --> 00:18:34,000
talking cross layers

300
00:18:34,000 --> 00:18:35,679
and problems that exist somewhere in the

301
00:18:35,679 --> 00:18:37,600
ether so this talk is kind of a

302
00:18:37,600 --> 00:18:39,760
tongue-in-cheek view to communicate to

303
00:18:39,760 --> 00:18:42,240
people who want us the kind of problems

304
00:18:42,240 --> 00:18:43,520
that we face

305
00:18:43,520 --> 00:18:44,799
um

306
00:18:44,799 --> 00:18:46,880
so briefly you know just in case you

307
00:18:46,880 --> 00:18:48,160
don't get the reference to the talk

308
00:18:48,160 --> 00:18:50,559
title um this refers to you know

309
00:18:50,559 --> 00:18:52,160
platform nine and three quarters that

310
00:18:52,160 --> 00:18:54,480
comes from the harry potter universe um

311
00:18:54,480 --> 00:18:56,720
if you came just to get harry potter

312
00:18:56,720 --> 00:18:58,559
memes or jokes you'll be pretty

313
00:18:58,559 --> 00:19:00,799
disappointed um

314
00:19:00,799 --> 00:19:02,880
and mainly because you know today's talk

315
00:19:02,880 --> 00:19:04,480
is focusing on layer four and three

316
00:19:04,480 --> 00:19:06,480
quarters that's mainly because our

317
00:19:06,480 --> 00:19:08,160
layering model doesn't go up tonight

318
00:19:08,160 --> 00:19:11,360
it's it's restricted to seven so

319
00:19:11,360 --> 00:19:13,760
you know that this is a familiar

320
00:19:13,760 --> 00:19:16,000
model that we're used to uh some people

321
00:19:16,000 --> 00:19:18,320
might call it a layer cake we know that

322
00:19:18,320 --> 00:19:20,799
the cake's a lie um and we should just

323
00:19:20,799 --> 00:19:22,880
ignore it at least that's my opinion

324
00:19:22,880 --> 00:19:23,919
anyway

325
00:19:23,919 --> 00:19:25,440
and the reason is because it's detached

326
00:19:25,440 --> 00:19:28,000
from reality um it's a work of fiction

327
00:19:28,000 --> 00:19:29,600
you can pretty much do anything with it

328
00:19:29,600 --> 00:19:33,120
that you'd like and you'll be

329
00:19:36,840 --> 00:19:39,760
fine uh sorry i'll just go back here

330
00:19:39,760 --> 00:19:41,600
like uh i went to the next slide and i

331
00:19:41,600 --> 00:19:43,200
missed it myself obviously i got a bit

332
00:19:43,200 --> 00:19:45,679
of brain fog here um yeah i'll just

333
00:19:45,679 --> 00:19:47,840
split back and forth between these two

334
00:19:47,840 --> 00:19:49,280
slides what's the difference i've pinned

335
00:19:49,280 --> 00:19:51,200
upside down it's fairly noticeable

336
00:19:51,200 --> 00:19:52,640
there's like hardly anything that would

337
00:19:52,640 --> 00:19:54,880
have changed here um

338
00:19:54,880 --> 00:19:56,000
and that's kind of funny because it

339
00:19:56,000 --> 00:19:58,720
reminded me of something else actually

340
00:19:58,720 --> 00:20:00,559
um some of you might know i'm welsh i

341
00:20:00,559 --> 00:20:02,480
grew up in the cardiff the capital of

342
00:20:02,480 --> 00:20:04,720
wales um

343
00:20:04,720 --> 00:20:06,799
yeah they did the layers in this order

344
00:20:06,799 --> 00:20:09,200
reminded me of something and that's

345
00:20:09,200 --> 00:20:11,919
cardiff central train station

346
00:20:11,919 --> 00:20:14,400
uh and you might say what like why is

347
00:20:14,400 --> 00:20:16,640
that the case um and if you look closely

348
00:20:16,640 --> 00:20:18,799
it's probably too small to see here but

349
00:20:18,799 --> 00:20:21,120
um if you look at the platform numbers

350
00:20:21,120 --> 00:20:22,960
um they're in the kind of central column

351
00:20:22,960 --> 00:20:25,919
of the the image here um they go from

352
00:20:25,919 --> 00:20:28,720
one through to eight um i see uh

353
00:20:28,720 --> 00:20:31,120
jonathan in the chat mention layer eight

354
00:20:31,120 --> 00:20:32,559
uh we're not gonna talk about that one

355
00:20:32,559 --> 00:20:34,480
today but maybe some of the other things

356
00:20:34,480 --> 00:20:36,559
that you see if you very quickly look at

357
00:20:36,559 --> 00:20:38,240
that image

358
00:20:38,240 --> 00:20:39,360
um

359
00:20:39,360 --> 00:20:42,880
and i think yeah beyond the the ordering

360
00:20:42,880 --> 00:20:45,840
uh that we have here um the interesting

361
00:20:45,840 --> 00:20:48,320
fact is well not fact so the interesting

362
00:20:48,320 --> 00:20:50,720
observation that i had is that um we

363
00:20:50,720 --> 00:20:52,960
could analogize kind of transport or

364
00:20:52,960 --> 00:20:55,520
internet protocols in some way to kind

365
00:20:55,520 --> 00:20:57,360
of train stations

366
00:20:57,360 --> 00:20:59,600
and trains so bear with me for this

367
00:20:59,600 --> 00:21:01,840
analogy a bit for a bit like

368
00:21:01,840 --> 00:21:03,919
uh i'd say that indicative of

369
00:21:03,919 --> 00:21:06,240
communication stacks insofar as like

370
00:21:06,240 --> 00:21:08,000
hundreds of years ago people you'll

371
00:21:08,000 --> 00:21:10,080
never get to meet had some lofty goals

372
00:21:10,080 --> 00:21:11,600
and improving the movement of things

373
00:21:11,600 --> 00:21:14,000
from a to b and they made well-designed

374
00:21:14,000 --> 00:21:16,240
intentions and design decisions that lay

375
00:21:16,240 --> 00:21:17,600
the foundation for the future of

376
00:21:17,600 --> 00:21:19,200
generations to come

377
00:21:19,200 --> 00:21:21,360
those train tracks uh pretty good

378
00:21:21,360 --> 00:21:23,120
structured guides for the movement of

379
00:21:23,120 --> 00:21:25,600
things and the vessels that

380
00:21:25,600 --> 00:21:27,840
move on those tracks can carry various

381
00:21:27,840 --> 00:21:29,679
kinds of loads and they can adapt to the

382
00:21:29,679 --> 00:21:31,760
changing needs of consumers

383
00:21:31,760 --> 00:21:33,760
but sometimes those plans don't go

384
00:21:33,760 --> 00:21:35,280
you know they don't play out their way

385
00:21:35,280 --> 00:21:39,039
that they they they'd hoped or that uh

386
00:21:39,039 --> 00:21:41,200
the needs change in such a way that the

387
00:21:41,200 --> 00:21:43,200
tracks and the foundations

388
00:21:43,200 --> 00:21:45,840
aren't quite right um

389
00:21:45,840 --> 00:21:48,080
and because train tracks and stations

390
00:21:48,080 --> 00:21:49,520
are physical things it can be hard just

391
00:21:49,520 --> 00:21:51,520
to rip them out and swap something in

392
00:21:51,520 --> 00:21:52,799
that takes time and planning and

393
00:21:52,799 --> 00:21:55,039
dedication and maybe like you're stuck

394
00:21:55,039 --> 00:21:57,120
with what you designed and that's it

395
00:21:57,120 --> 00:21:59,919
um and that comes back to you know our

396
00:21:59,919 --> 00:22:01,760
layer cake um

397
00:22:01,760 --> 00:22:03,520
sometimes you know we have these layers

398
00:22:03,520 --> 00:22:05,120
and they don't really serve much purpose

399
00:22:05,120 --> 00:22:07,760
to how people use the internet today uh

400
00:22:07,760 --> 00:22:10,240
so so for us for me i just kind of

401
00:22:10,240 --> 00:22:12,240
removed that existence of these layers

402
00:22:12,240 --> 00:22:14,000
from my mind i could just take layers of

403
00:22:14,000 --> 00:22:16,240
layer five out yeah throw it in the bin

404
00:22:16,240 --> 00:22:19,840
and and everything's fine

405
00:22:19,840 --> 00:22:21,120
and you might say well you can't do that

406
00:22:21,120 --> 00:22:22,720
in real life but but actually that's

407
00:22:22,720 --> 00:22:24,159
something that cardo central train

408
00:22:24,159 --> 00:22:26,240
station already did they did us in the

409
00:22:26,240 --> 00:22:29,840
60s uh well ahead of osi um they were

410
00:22:29,840 --> 00:22:32,320
really paving the way to use another pun

411
00:22:32,320 --> 00:22:33,440
um

412
00:22:33,440 --> 00:22:36,640
but it's not just like using and like or

413
00:22:36,640 --> 00:22:38,799
ignoring unused parts

414
00:22:38,799 --> 00:22:40,320
what about if you want to extend things

415
00:22:40,320 --> 00:22:43,840
beyond the initial design intent

416
00:22:43,840 --> 00:22:46,480
uh card central train stations like

417
00:22:46,480 --> 00:22:49,039
ahead of us again here uh they needed to

418
00:22:49,039 --> 00:22:52,159
add another platform for carrying

419
00:22:52,159 --> 00:22:53,919
different kinds of traffic uh so there

420
00:22:53,919 --> 00:22:55,840
is actually a platform zero at carter

421
00:22:55,840 --> 00:22:57,679
central i used to catch a train there

422
00:22:57,679 --> 00:22:58,880
myself

423
00:22:58,880 --> 00:23:01,200
um

424
00:23:02,400 --> 00:23:04,880
what about other things uh they've also

425
00:23:04,880 --> 00:23:06,720
crammed in several

426
00:23:06,720 --> 00:23:09,039
lines between platforms i mean like i

427
00:23:09,039 --> 00:23:11,039
don't know who like in terms of end

428
00:23:11,039 --> 00:23:13,200
users that's supposed to serve but it it

429
00:23:13,200 --> 00:23:16,480
says different kinds of traffic um

430
00:23:16,480 --> 00:23:18,240
yeah i don't know what that's about i'm

431
00:23:18,240 --> 00:23:20,000
sure the train nerds in the room

432
00:23:20,000 --> 00:23:22,559
probably have a very well justified

433
00:23:22,559 --> 00:23:24,880
explanation for me um you might be

434
00:23:24,880 --> 00:23:26,240
laughing you might be very confused by

435
00:23:26,240 --> 00:23:28,080
all of this uh but what i'm attempting

436
00:23:28,080 --> 00:23:29,760
to illustrate is pretty straightforward

437
00:23:29,760 --> 00:23:31,760
that there's only really two and three

438
00:23:31,760 --> 00:23:33,840
quarter of layers of things that we need

439
00:23:33,840 --> 00:23:35,120
to care about

440
00:23:35,120 --> 00:23:37,280
in this room today for this talk

441
00:23:37,280 --> 00:23:38,640
and those familiar with harry potter

442
00:23:38,640 --> 00:23:39,679
will be

443
00:23:39,679 --> 00:23:41,120
familiar with the obvious thing to do in

444
00:23:41,120 --> 00:23:43,120
this circumstance that you just put

445
00:23:43,120 --> 00:23:44,720
those two things together and you just

446
00:23:44,720 --> 00:23:46,640
run up them as fast as you can

447
00:23:46,640 --> 00:23:50,000
to see where the boundary will take you

448
00:23:50,000 --> 00:23:51,840
so

449
00:23:51,840 --> 00:23:54,000
trying to return back to reality

450
00:23:54,000 --> 00:23:56,320
somewhat um

451
00:23:56,320 --> 00:23:57,919
in my view this these are the only

452
00:23:57,919 --> 00:23:59,840
layers that came

453
00:23:59,840 --> 00:24:02,080
and this is the boundary between them

454
00:24:02,080 --> 00:24:04,640
you might balk at layer 3 being removed

455
00:24:04,640 --> 00:24:06,880
um surely you know the internet protocol

456
00:24:06,880 --> 00:24:08,480
and the internet are important

457
00:24:08,480 --> 00:24:09,360
um

458
00:24:09,360 --> 00:24:11,919
i would tend to agree uh

459
00:24:11,919 --> 00:24:14,640
a lot of the the the work at cloudflare

460
00:24:14,640 --> 00:24:16,240
does is about

461
00:24:16,240 --> 00:24:18,320
helping to build it in better internet

462
00:24:18,320 --> 00:24:19,200
um

463
00:24:19,200 --> 00:24:21,279
and we tried to do that so it's not

464
00:24:21,279 --> 00:24:22,400
completely

465
00:24:22,400 --> 00:24:26,080
opaque to us or or not there but

466
00:24:26,080 --> 00:24:28,799
when it comes to a focus at the internet

467
00:24:28,799 --> 00:24:30,720
or you know the web

468
00:24:30,720 --> 00:24:32,559
and the way that people and humans

469
00:24:32,559 --> 00:24:34,000
interact with that

470
00:24:34,000 --> 00:24:35,919
uh i don't really want to spend any

471
00:24:35,919 --> 00:24:39,440
mental energy on ip

472
00:24:39,440 --> 00:24:40,640
details

473
00:24:40,640 --> 00:24:41,840
and that's because

474
00:24:41,840 --> 00:24:43,679
end users don't really care they they

475
00:24:43,679 --> 00:24:46,159
don't access services via ip the

476
00:24:46,159 --> 00:24:48,320
direction of travel is that they they

477
00:24:48,320 --> 00:24:51,039
should be becoming well the the world is

478
00:24:51,039 --> 00:24:53,120
probably becoming less reliant on client

479
00:24:53,120 --> 00:24:55,360
ips anyway we're seeing this in the work

480
00:24:55,360 --> 00:24:57,360
in the itf in terms of oblivious

481
00:24:57,360 --> 00:25:00,159
protocols um for various different

482
00:25:00,159 --> 00:25:03,039
application protocols on the top of them

483
00:25:03,039 --> 00:25:05,520
where we we can

484
00:25:05,520 --> 00:25:08,240
the traditional use of client ip is a

485
00:25:08,240 --> 00:25:09,760
vector for authorization or

486
00:25:09,760 --> 00:25:12,400
authentication is kind of

487
00:25:12,400 --> 00:25:13,279
not

488
00:25:13,279 --> 00:25:14,880
not so good

489
00:25:14,880 --> 00:25:17,679
um in terms of privacy and so on so we

490
00:25:17,679 --> 00:25:19,679
won't dig into that topic today it's a

491
00:25:19,679 --> 00:25:21,440
very rich idea maybe some of the other

492
00:25:21,440 --> 00:25:24,159
talks will i i don't know but um yeah

493
00:25:24,159 --> 00:25:27,120
this is one of the few reasons i think

494
00:25:27,120 --> 00:25:31,039
layer 3 can be ignored safely

495
00:25:31,360 --> 00:25:33,200
so i just want to move on from that on

496
00:25:33,200 --> 00:25:34,000
to

497
00:25:34,000 --> 00:25:35,279
to some of the other reasons i think

498
00:25:35,279 --> 00:25:37,039
this is important it's because it's what

499
00:25:37,039 --> 00:25:39,120
i spend most of my day job on and the

500
00:25:39,120 --> 00:25:41,200
team i work in does

501
00:25:41,200 --> 00:25:42,720
i talked about some of the protocols we

502
00:25:42,720 --> 00:25:44,960
support on the edge um and that our team

503
00:25:44,960 --> 00:25:47,200
is responsible for the servicing and

504
00:25:47,200 --> 00:25:48,320
there's other things there like

505
00:25:48,320 --> 00:25:50,400
websocket and grpc

506
00:25:50,400 --> 00:25:51,600
if you're not familiar with those i

507
00:25:51,600 --> 00:25:53,679
won't be going into much much detail on

508
00:25:53,679 --> 00:25:56,240
them but they help give a picture that

509
00:25:56,240 --> 00:25:58,720
um many people think it's the web and

510
00:25:58,720 --> 00:26:01,279
that uh http is a protocol that powers

511
00:26:01,279 --> 00:26:03,840
the web but there's other the services

512
00:26:03,840 --> 00:26:06,880
that build upon these um they might have

513
00:26:06,880 --> 00:26:09,200
user agents or end users but they could

514
00:26:09,200 --> 00:26:12,000
be api traffic not necessarily just

515
00:26:12,000 --> 00:26:13,679
people browsing

516
00:26:13,679 --> 00:26:15,520
page page to page

517
00:26:15,520 --> 00:26:16,480
um

518
00:26:16,480 --> 00:26:18,000
and the reason that you know a company

519
00:26:18,000 --> 00:26:21,840
like cloudflare uh it does what it does

520
00:26:21,840 --> 00:26:23,840
it provides intermediation between

521
00:26:23,840 --> 00:26:26,080
clients and origins and that can provide

522
00:26:26,080 --> 00:26:28,559
speed reliability and improvements

523
00:26:28,559 --> 00:26:32,400
but also provides scale to clients

524
00:26:32,400 --> 00:26:34,559
from a distributed network but also a

525
00:26:34,559 --> 00:26:37,760
scale in a different term to the origins

526
00:26:37,760 --> 00:26:39,840
for people who operate these things it

527
00:26:39,840 --> 00:26:41,440
could be difficult to keep up with the

528
00:26:41,440 --> 00:26:43,919
latest trends in technology so there's a

529
00:26:43,919 --> 00:26:47,520
long tale of cheap shared hosting or vps

530
00:26:47,520 --> 00:26:51,120
services that have no hopes of kind of

531
00:26:51,120 --> 00:26:53,760
getting their stacks to support these

532
00:26:53,760 --> 00:26:56,080
latest and greatest technologies and and

533
00:26:56,080 --> 00:26:58,000
the by having an edge in front of them

534
00:26:58,000 --> 00:26:58,960
you can

535
00:26:58,960 --> 00:27:01,120
enable that a bit more quickly um or

536
00:27:01,120 --> 00:27:02,880
provide this kind of serverless edge

537
00:27:02,880 --> 00:27:04,720
compute platform that that some of you

538
00:27:04,720 --> 00:27:07,360
might be familiar with um

539
00:27:07,360 --> 00:27:10,080
and and beyond the layer seven protocols

540
00:27:10,080 --> 00:27:11,600
i've mentioned there the team's also

541
00:27:11,600 --> 00:27:12,720
responsible for a product called

542
00:27:12,720 --> 00:27:13,840
spectrum

543
00:27:13,840 --> 00:27:15,760
which is more at the layer four things

544
00:27:15,760 --> 00:27:17,760
like tcp and udp

545
00:27:17,760 --> 00:27:19,600
we do a few layering violations to help

546
00:27:19,600 --> 00:27:21,840
provide some added value on top of those

547
00:27:21,840 --> 00:27:23,039
um

548
00:27:23,039 --> 00:27:25,039
and these are lower violations in the

549
00:27:25,039 --> 00:27:27,120
good sense to provide some some value

550
00:27:27,120 --> 00:27:29,840
for people um but that

551
00:27:29,840 --> 00:27:31,840
we provide some specialized support for

552
00:27:31,840 --> 00:27:34,880
other protocols that maybe sit between

553
00:27:34,880 --> 00:27:37,360
you know four and seven um you see here

554
00:27:37,360 --> 00:27:39,360
on the right hand side ssh rdp in

555
00:27:39,360 --> 00:27:42,640
minecraft um which got me me uh

556
00:27:42,640 --> 00:27:44,000
interested i don't know much about

557
00:27:44,000 --> 00:27:46,799
minecraft at the time um when we took on

558
00:27:46,799 --> 00:27:49,520
ownership of the spectrum product um and

559
00:27:49,520 --> 00:27:51,200
if you look there's a little asterisk

560
00:27:51,200 --> 00:27:52,960
that says minecraft java edition is

561
00:27:52,960 --> 00:27:55,039
supported but minecraft bedrock edition

562
00:27:55,039 --> 00:27:57,440
is not supported my curious brain made

563
00:27:57,440 --> 00:27:59,679
me want to understand the difference

564
00:27:59,679 --> 00:28:02,159
there um again that's a whole talk title

565
00:28:02,159 --> 00:28:03,840
in its own um if you're not familiar

566
00:28:03,840 --> 00:28:05,760
with minecraft you go visit these links

567
00:28:05,760 --> 00:28:07,200
it's quite interesting what the

568
00:28:07,200 --> 00:28:09,279
differences are um it basically boils

569
00:28:09,279 --> 00:28:12,559
down to tcp versus udp but um i i i

570
00:28:12,559 --> 00:28:14,480
won't digress here too much

571
00:28:14,480 --> 00:28:15,440
um

572
00:28:15,440 --> 00:28:17,120
the interesting thing is

573
00:28:17,120 --> 00:28:19,039
uh there's wireshark dissectors those

574
00:28:19,039 --> 00:28:20,880
previous links have like

575
00:28:20,880 --> 00:28:23,279
pages upon pages of schema and

576
00:28:23,279 --> 00:28:25,120
definition of the protocol language

577
00:28:25,120 --> 00:28:27,039
they're not at the iedf but

578
00:28:27,039 --> 00:28:29,279
the the amount of detail there is quite

579
00:28:29,279 --> 00:28:31,760
astonishing if you're not familiar um

580
00:28:31,760 --> 00:28:34,080
and i was thinking quake was the only uh

581
00:28:34,080 --> 00:28:36,080
supported protocol in wireshark but no

582
00:28:36,080 --> 00:28:38,799
there are indeed dissectors

583
00:28:38,799 --> 00:28:40,799
but anyway that's that's kind of an

584
00:28:40,799 --> 00:28:43,600
ambling abstract way of talking about

585
00:28:43,600 --> 00:28:46,799
this topic um if i've lost you i'm sorry

586
00:28:46,799 --> 00:28:49,200
if if you you you want to

587
00:28:49,200 --> 00:28:51,039
tune in again um great we're going to

588
00:28:51,039 --> 00:28:52,880
get more into some nitty-gritty details

589
00:28:52,880 --> 00:28:53,840
right now

590
00:28:53,840 --> 00:28:57,279
and talk more in the specific terms here

591
00:28:57,279 --> 00:28:59,200
um

592
00:28:59,200 --> 00:29:00,240
so

593
00:29:00,240 --> 00:29:04,000
uh talk about http uh this is a layer 7

594
00:29:04,000 --> 00:29:05,679
protocol uh

595
00:29:05,679 --> 00:29:07,360
sometimes we forget what the acronyms

596
00:29:07,360 --> 00:29:09,360
actually stand for the question would be

597
00:29:09,360 --> 00:29:11,360
does does this mean the hypertext

598
00:29:11,360 --> 00:29:13,919
transport protocol um sometimes i hear

599
00:29:13,919 --> 00:29:15,840
people say that um

600
00:29:15,840 --> 00:29:18,640
i will quote mark nottingham from itf 99

601
00:29:18,640 --> 00:29:20,080
who said that roy fielding knows

602
00:29:20,080 --> 00:29:21,520
whenever you call it the hypertext

603
00:29:21,520 --> 00:29:23,279
transport protocol

604
00:29:23,279 --> 00:29:25,279
because it means the hypertext transfer

605
00:29:25,279 --> 00:29:28,000
protocol uh we might be splitting hairs

606
00:29:28,000 --> 00:29:30,240
to say well what's the difference uh

607
00:29:30,240 --> 00:29:33,760
what is a transport protocol um

608
00:29:33,760 --> 00:29:35,919
speaking recently with marwin to even

609
00:29:35,919 --> 00:29:37,919
discuss you know is udp

610
00:29:37,919 --> 00:29:39,840
really a transport protocol or not but

611
00:29:39,840 --> 00:29:42,000
again i i don't want to digress

612
00:29:42,000 --> 00:29:44,080
to help frame some of this discussion

613
00:29:44,080 --> 00:29:45,600
and why i think it matters i want to

614
00:29:45,600 --> 00:29:47,039
talk about the view from cloudflare's

615
00:29:47,039 --> 00:29:49,679
edge um and then some of the the the

616
00:29:49,679 --> 00:29:51,919
kind of traffic profiles that we see

617
00:29:51,919 --> 00:29:54,480
from real users contacting our edge

618
00:29:54,480 --> 00:29:57,840
on a daily basis um so to get into that

619
00:29:57,840 --> 00:29:59,720
first of all we offer something called

620
00:29:59,720 --> 00:30:01,840
radar.cloverlight.com there's a website

621
00:30:01,840 --> 00:30:04,000
um containing you know up to up-to-date

622
00:30:04,000 --> 00:30:06,320
statistics about various things that our

623
00:30:06,320 --> 00:30:07,520
ed sees

624
00:30:07,520 --> 00:30:10,960
this is just a snippet of uh hp and tls

625
00:30:10,960 --> 00:30:12,559
traffic taken from

626
00:30:12,559 --> 00:30:14,320
april um so it's a little bit out of

627
00:30:14,320 --> 00:30:16,080
date but if you if you were to check

628
00:30:16,080 --> 00:30:18,320
that today you'd see some maybe similar

629
00:30:18,320 --> 00:30:20,320
numbers maybe different numbers um so to

630
00:30:20,320 --> 00:30:22,880
go and take a look um

631
00:30:22,880 --> 00:30:26,080
but uh yeah uh just the the high level

632
00:30:26,080 --> 00:30:28,799
summary of this view is that um it's

633
00:30:28,799 --> 00:30:30,159
quite clear that most of the traffic

634
00:30:30,159 --> 00:30:32,799
that our edge sees is encrypted hb2 and

635
00:30:32,799 --> 00:30:35,600
hp3 uh 99 percent of the traffic

636
00:30:35,600 --> 00:30:37,600
according to this this view at that time

637
00:30:37,600 --> 00:30:40,960
was https so that's encrypted um only

638
00:30:40,960 --> 00:30:43,279
nine percent of the traffic was

639
00:30:43,279 --> 00:30:46,640
hp 1.x so 1.1 we'll call that just for

640
00:30:46,640 --> 00:30:48,720
convenience um so when you combine those

641
00:30:48,720 --> 00:30:50,880
two figures together uh that's that's a

642
00:30:50,880 --> 00:30:54,399
tiny tiny proportion of requests to

643
00:30:54,399 --> 00:30:56,480
cloudflare are being made over plain

644
00:30:56,480 --> 00:30:59,440
text hb 1.1 i think sometimes when when

645
00:30:59,440 --> 00:31:02,159
we think about http in the web

646
00:31:02,159 --> 00:31:04,799
this is presumption about how it worked

647
00:31:04,799 --> 00:31:07,039
maybe a decade or so ago

648
00:31:07,039 --> 00:31:08,960
and that's very different to today so

649
00:31:08,960 --> 00:31:11,440
when we're thinking about how to design

650
00:31:11,440 --> 00:31:14,640
and scale services um against like an

651
00:31:14,640 --> 00:31:17,200
older view of the protocol

652
00:31:17,200 --> 00:31:19,679
those assumptions don't hold up anymore

653
00:31:19,679 --> 00:31:21,519
and i think well what i will try and

654
00:31:21,519 --> 00:31:23,440
illustrate through the next few slides

655
00:31:23,440 --> 00:31:25,200
is that

656
00:31:25,200 --> 00:31:27,039
the tooling and the methodology we have

657
00:31:27,039 --> 00:31:28,720
is maybe not entirely fit for the

658
00:31:28,720 --> 00:31:31,279
purpose of of how these layer seven

659
00:31:31,279 --> 00:31:35,440
protocols have evolved and are changing

660
00:31:36,159 --> 00:31:38,000
and to maybe help illustrate that

661
00:31:38,000 --> 00:31:40,799
sometime um

662
00:31:40,799 --> 00:31:43,440
it will in some way uh very briefly i'd

663
00:31:43,440 --> 00:31:45,600
like to think or encourage people to

664
00:31:45,600 --> 00:31:47,200
think about how these protocols look on

665
00:31:47,200 --> 00:31:48,559
the wire

666
00:31:48,559 --> 00:31:50,159
so the astute amongst you will

667
00:31:50,159 --> 00:31:52,159
understand maybe that i've flipped the

668
00:31:52,159 --> 00:31:55,039
layer kick upside down now um so from

669
00:31:55,039 --> 00:31:57,760
the bottom we have layer seven in terms

670
00:31:57,760 --> 00:32:00,559
of this http semantic

671
00:32:00,559 --> 00:32:01,840
if you're not familiar with the protocol

672
00:32:01,840 --> 00:32:04,080
it's a request response protocol where

673
00:32:04,080 --> 00:32:06,480
clients send request messages and server

674
00:32:06,480 --> 00:32:07,760
sends

675
00:32:07,760 --> 00:32:10,240
response messages back to each other

676
00:32:10,240 --> 00:32:11,919
these are kind of an abstract thing they

677
00:32:11,919 --> 00:32:14,240
have requirements and constraints but um

678
00:32:14,240 --> 00:32:15,360
they

679
00:32:15,360 --> 00:32:17,840
don't have a strict serialization that's

680
00:32:17,840 --> 00:32:21,200
the duty of the http version itself to

681
00:32:21,200 --> 00:32:23,840
describe how those abstract semantics

682
00:32:23,840 --> 00:32:25,679
map onto the wire

683
00:32:25,679 --> 00:32:28,159
so on the left you know we've got 1.1

684
00:32:28,159 --> 00:32:30,080
where we take this this message and

685
00:32:30,080 --> 00:32:32,159
we'll convert it into an ascii

686
00:32:32,159 --> 00:32:33,919
serialized form

687
00:32:33,919 --> 00:32:34,720
and

688
00:32:34,720 --> 00:32:36,640
we put it into a tls record because we

689
00:32:36,640 --> 00:32:38,960
only care about encrypted traffic here

690
00:32:38,960 --> 00:32:40,880
that would then span multiple tcp

691
00:32:40,880 --> 00:32:43,919
segments in the middle column uh

692
00:32:43,919 --> 00:32:46,000
weekends have the same hp request

693
00:32:46,000 --> 00:32:48,000
response message semantics

694
00:32:48,000 --> 00:32:50,480
but instead of ascii these map into the

695
00:32:50,480 --> 00:32:53,760
binary frames so we have this splitting

696
00:32:53,760 --> 00:32:56,559
up of headers so the

697
00:32:56,559 --> 00:32:58,640
kind of the metadata

698
00:32:58,640 --> 00:33:00,799
for the message and the the data frame

699
00:33:00,799 --> 00:33:03,039
which carries the message content

700
00:33:03,039 --> 00:33:04,720
but again those get mapped into a tls

701
00:33:04,720 --> 00:33:07,279
record and sent over tcp segments very

702
00:33:07,279 --> 00:33:10,480
in a very very similar way on the right

703
00:33:10,480 --> 00:33:11,919
hand side is probably the most different

704
00:33:11,919 --> 00:33:13,360
aspect here

705
00:33:13,360 --> 00:33:15,200
with this is this is quick the quick

706
00:33:15,200 --> 00:33:16,559
transport

707
00:33:16,559 --> 00:33:18,000
with

708
00:33:18,000 --> 00:33:20,320
messages getting mapped into frames very

709
00:33:20,320 --> 00:33:22,799
similar to hb2 but before they go down

710
00:33:22,799 --> 00:33:25,120
into to anything below them um they get

711
00:33:25,120 --> 00:33:27,760
mapped into a quick stream

712
00:33:27,760 --> 00:33:30,640
which is a transport primitive um that's

713
00:33:30,640 --> 00:33:33,679
available that solves all of the the

714
00:33:33,679 --> 00:33:35,279
head of line blocking staffing quick

715
00:33:35,279 --> 00:33:36,799
that we're not going to talk about today

716
00:33:36,799 --> 00:33:38,559
but those map into quick packets and

717
00:33:38,559 --> 00:33:41,440
they get sent in udp datagrams

718
00:33:41,440 --> 00:33:42,559
so

719
00:33:42,559 --> 00:33:44,320
keeping that in mind that this is how it

720
00:33:44,320 --> 00:33:45,600
kind of looks

721
00:33:45,600 --> 00:33:47,279
let's look at some statistics very

722
00:33:47,279 --> 00:33:49,679
quickly radar offers this high-level

723
00:33:49,679 --> 00:33:53,039
global view of traffic trends

724
00:33:53,039 --> 00:33:55,600
this is an interactive map so i'd

725
00:33:55,600 --> 00:33:56,720
encourage you to go visit and play

726
00:33:56,720 --> 00:33:58,640
around maybe look at your country or

727
00:33:58,640 --> 00:34:00,080
where you reside

728
00:34:00,080 --> 00:34:02,399
interesting things like that dark orange

729
00:34:02,399 --> 00:34:04,559
is where the share of hp3 traffic is

730
00:34:04,559 --> 00:34:07,519
highest um going to lighter for lowest

731
00:34:07,519 --> 00:34:09,599
um

732
00:34:09,599 --> 00:34:11,199
i don't know maybe that distribution

733
00:34:11,199 --> 00:34:13,119
surprises you at the time i'm sure it's

734
00:34:13,119 --> 00:34:16,399
changed today due to traffic trends etc

735
00:34:16,399 --> 00:34:20,719
maybe it doesn't let me know in the chat

736
00:34:20,719 --> 00:34:23,520
back in may 2021

737
00:34:23,520 --> 00:34:26,000
quick the transport protocol launches

738
00:34:26,000 --> 00:34:28,320
our c9000 uh cloudflare has been

739
00:34:28,320 --> 00:34:30,000
supporting this for a long time we we

740
00:34:30,000 --> 00:34:32,239
did a blog post at the time it's hard to

741
00:34:32,239 --> 00:34:33,679
see here but the traffic show at the

742
00:34:33,679 --> 00:34:36,239
time was twelve point four percent or

743
00:34:36,239 --> 00:34:39,040
call it twelve if we're rounding down um

744
00:34:39,040 --> 00:34:41,839
and in the meantime uh hp three draft

745
00:34:41,839 --> 00:34:43,918
has finally been published this year uh

746
00:34:43,918 --> 00:34:45,599
and we're kind of keen to take a

747
00:34:45,599 --> 00:34:48,399
long-term view of the usage just as a

748
00:34:48,399 --> 00:34:50,879
headline statistic um in that time of

749
00:34:50,879 --> 00:34:53,199
the last year we've seen the traffic

750
00:34:53,199 --> 00:34:56,239
global requests sorry the the share of

751
00:34:56,239 --> 00:34:58,960
hp3 traffic on a global scale rise from

752
00:34:58,960 --> 00:35:02,320
about 12 percent to over 25 percent uh

753
00:35:02,320 --> 00:35:05,680
which is you know a doubling which is uh

754
00:35:05,680 --> 00:35:08,480
pretty decent i'd say um and but in some

755
00:35:08,480 --> 00:35:10,480
countries that's even higher so i do

756
00:35:10,480 --> 00:35:12,240
encourage you to go take a look and have

757
00:35:12,240 --> 00:35:14,400
a deep dive or visit that blog post

758
00:35:14,400 --> 00:35:16,320
where we'll dig into some long-term

759
00:35:16,320 --> 00:35:20,000
trends over time um to show maybe the

760
00:35:20,000 --> 00:35:22,240
the wax and wane of traffic profiles

761
00:35:22,240 --> 00:35:24,079
over the last year i'll summarize them

762
00:35:24,079 --> 00:35:27,280
very briefly here but um to look at this

763
00:35:27,280 --> 00:35:29,280
what we have is

764
00:35:29,280 --> 00:35:30,800
3 in the blue

765
00:35:30,800 --> 00:35:33,440
that you can see shortly after the rfc

766
00:35:33,440 --> 00:35:37,200
9000 came out um hp 3 traffic for us

767
00:35:37,200 --> 00:35:39,520
overtook hp 1.1

768
00:35:39,520 --> 00:35:41,200
and it's just continued to grow ever

769
00:35:41,200 --> 00:35:42,240
since

770
00:35:42,240 --> 00:35:45,839
at the top http hb2 um is has kind of

771
00:35:45,839 --> 00:35:48,640
been bumbling along at the same rate uh

772
00:35:48,640 --> 00:35:50,640
and one point one is

773
00:35:50,640 --> 00:35:52,320
it's still there but it is very small

774
00:35:52,320 --> 00:35:55,760
percent uh just to describe these

775
00:35:55,760 --> 00:35:57,760
briefly if i didn't cover that these are

776
00:35:57,760 --> 00:36:00,640
measured in in requests per second um

777
00:36:00,640 --> 00:36:04,000
that our global edge sees for human uh

778
00:36:04,000 --> 00:36:06,800
or likely human traffic so we we rate

779
00:36:06,800 --> 00:36:09,359
traffic whether we think it's a bot or

780
00:36:09,359 --> 00:36:11,440
human and this is solely for human

781
00:36:11,440 --> 00:36:13,599
traffic you can filter this down into

782
00:36:13,599 --> 00:36:15,440
bot traffic i'll present some slides

783
00:36:15,440 --> 00:36:17,200
differently and the profit profiles are

784
00:36:17,200 --> 00:36:19,599
quite different um which i find pretty

785
00:36:19,599 --> 00:36:21,839
interesting too

786
00:36:21,839 --> 00:36:23,359
um if we're going to break those

787
00:36:23,359 --> 00:36:26,079
requests down into different user agents

788
00:36:26,079 --> 00:36:28,240
we know that support doesn't roll out

789
00:36:28,240 --> 00:36:30,720
unilaterally and that different work

790
00:36:30,720 --> 00:36:33,119
needs to be done um different priorities

791
00:36:33,119 --> 00:36:35,359
etc so just looking at these three

792
00:36:35,359 --> 00:36:37,920
browsers chrome firefox and safari we

793
00:36:37,920 --> 00:36:39,920
can see you know different kind of roll

794
00:36:39,920 --> 00:36:43,200
outs happening there um say chrome is

795
00:36:43,200 --> 00:36:45,599
now at around 60

796
00:36:45,599 --> 00:36:48,000
um firefox is kind of similar today or

797
00:36:48,000 --> 00:36:49,440
back in may at least

798
00:36:49,440 --> 00:36:50,800
but you can see that there's been some

799
00:36:50,800 --> 00:36:53,440
gradual kind of ramp up or rollout some

800
00:36:53,440 --> 00:36:56,000
of this is affected by uh cloudflare

801
00:36:56,000 --> 00:36:57,839
customers who control whether they offer

802
00:36:57,839 --> 00:36:59,839
hp3 to the edge

803
00:36:59,839 --> 00:37:02,160
but by measuring everything

804
00:37:02,160 --> 00:37:03,680
kind of globally

805
00:37:03,680 --> 00:37:05,680
and then looking at these more specific

806
00:37:05,680 --> 00:37:08,480
details we can get a feel for how the

807
00:37:08,480 --> 00:37:10,079
the different user agents are also

808
00:37:10,079 --> 00:37:12,320
rolling out support maybe experimental

809
00:37:12,320 --> 00:37:15,440
or by default um etc so you can see on

810
00:37:15,440 --> 00:37:16,880
the bottom left there safari kind of

811
00:37:16,880 --> 00:37:18,320
like in behind slightly chrome with

812
00:37:18,320 --> 00:37:21,040
firefox um i understand that you know

813
00:37:21,040 --> 00:37:23,119
these numbers might be changing soon as

814
00:37:23,119 --> 00:37:25,440
the safari rolls out um support more

815
00:37:25,440 --> 00:37:28,960
widespread for hp 3 by default um that

816
00:37:28,960 --> 00:37:31,520
will will remain to be same tuned in to

817
00:37:31,520 --> 00:37:33,680
see

818
00:37:34,000 --> 00:37:35,839
this is how it looks in terms of global

819
00:37:35,839 --> 00:37:36,960
requests

820
00:37:36,960 --> 00:37:39,040
for time i'll just uh kind of

821
00:37:39,040 --> 00:37:42,240
gloss over this one slightly

822
00:37:42,240 --> 00:37:44,400
this is how we look in terms of share

823
00:37:44,400 --> 00:37:45,440
similarly

824
00:37:45,440 --> 00:37:47,440
chrome is pretty dominant though and

825
00:37:47,440 --> 00:37:49,920
this reflects just global share of user

826
00:37:49,920 --> 00:37:53,040
agents to some extent

827
00:37:53,839 --> 00:37:55,520
if we took chrome out of the picture you

828
00:37:55,520 --> 00:37:57,200
can see more clearly that the different

829
00:37:57,200 --> 00:37:58,800
kinds of changes that are happening for

830
00:37:58,800 --> 00:38:00,960
these browsers the blog post goes into

831
00:38:00,960 --> 00:38:02,640
more detail for some of the observations

832
00:38:02,640 --> 00:38:06,240
here so i won't go into any more detail

833
00:38:06,240 --> 00:38:08,000
but i would like to focus on this slide

834
00:38:08,000 --> 00:38:10,720
a bit more because this looks a box um

835
00:38:10,720 --> 00:38:12,560
which you know uh

836
00:38:12,560 --> 00:38:14,800
good bots and bad bots we we might spend

837
00:38:14,800 --> 00:38:16,640
a whole session on that one but these

838
00:38:16,640 --> 00:38:18,800
typically bots related to search engines

839
00:38:18,800 --> 00:38:20,640
or social media

840
00:38:20,640 --> 00:38:22,880
entities who like to

841
00:38:22,880 --> 00:38:24,640
access the internet to do

842
00:38:24,640 --> 00:38:27,839
stuff um so you can see here i mean the

843
00:38:27,839 --> 00:38:30,000
headline is that there's hardly any all

844
00:38:30,000 --> 00:38:33,520
zero hp3 usage they're very much

845
00:38:33,520 --> 00:38:36,079
you know in a 1.1 or 2 world you can

846
00:38:36,079 --> 00:38:37,760
look at some of the the public

847
00:38:37,760 --> 00:38:40,079
information about how these bots decide

848
00:38:40,079 --> 00:38:42,000
what version to pick uh it's pretty

849
00:38:42,000 --> 00:38:44,320
opaque and obtuse um i

850
00:38:44,320 --> 00:38:45,920
struggle to get any more answers or

851
00:38:45,920 --> 00:38:48,560
insight into that i'd love for people to

852
00:38:48,560 --> 00:38:50,000
to have a chat if

853
00:38:50,000 --> 00:38:53,520
if if anyone knows anyone but aside um

854
00:38:53,520 --> 00:38:54,400
yeah

855
00:38:54,400 --> 00:38:57,440
it's it's an interesting in respect to

856
00:38:57,440 --> 00:38:59,680
hp3 usage is

857
00:38:59,680 --> 00:39:03,280
pretty high for users and low for bots

858
00:39:03,280 --> 00:39:04,560
so

859
00:39:04,560 --> 00:39:06,880
with that all in mind

860
00:39:06,880 --> 00:39:08,960
binary framing as i mentioned for hp 2

861
00:39:08,960 --> 00:39:11,119
and hp 3

862
00:39:11,119 --> 00:39:14,400
it was a solution to a problem to let us

863
00:39:14,400 --> 00:39:15,920
mitigate some stuff i'm not going to

864
00:39:15,920 --> 00:39:17,839
talk about but mainly about performance

865
00:39:17,839 --> 00:39:20,000
and head of blind blocking issues that

866
00:39:20,000 --> 00:39:22,160
can affect web page loading and it does

867
00:39:22,160 --> 00:39:24,160
that job so it's a solution to all our

868
00:39:24,160 --> 00:39:26,079
problems

869
00:39:26,079 --> 00:39:30,320
well um text based http hb 1.1 or or

870
00:39:30,320 --> 00:39:32,560
other older versions uh

871
00:39:32,560 --> 00:39:34,240
have a pedigree providing quick some

872
00:39:34,240 --> 00:39:36,560
recent examples include this idea of

873
00:39:36,560 --> 00:39:38,400
request smuggling

874
00:39:38,400 --> 00:39:41,359
an attack that's kind of researched

875
00:39:41,359 --> 00:39:43,599
lately

876
00:39:43,599 --> 00:39:45,760
i'll go into the details here for

877
00:39:45,760 --> 00:39:47,760
brevity but um despite all of the

878
00:39:47,760 --> 00:39:49,680
baggage it's pretty well exercised and

879
00:39:49,680 --> 00:39:51,359
understood by technically minded folks

880
00:39:51,359 --> 00:39:53,359
whoever care to look into this

881
00:39:53,359 --> 00:39:55,200
stuff around hp performance and

882
00:39:55,200 --> 00:39:57,440
behaviors and quicks etcetera

883
00:39:57,440 --> 00:40:00,000
yeah like i said hp 2 and 3 constitute

884
00:40:00,000 --> 00:40:02,320
the majority of web traffic as far as we

885
00:40:02,320 --> 00:40:03,200
see

886
00:40:03,200 --> 00:40:05,520
so how can we best characterize the

887
00:40:05,520 --> 00:40:08,079
quotes of those specific hp versions

888
00:40:08,079 --> 00:40:11,440
there's a bunch of tools um hd spec h3

889
00:40:11,440 --> 00:40:14,319
spec h2 load um there's chrome net logs

890
00:40:14,319 --> 00:40:16,319
there's q logs which is um a

891
00:40:16,319 --> 00:40:18,880
specification and that we're we're

892
00:40:18,880 --> 00:40:20,560
working on in the quick working group

893
00:40:20,560 --> 00:40:22,640
along with some tooling to support that

894
00:40:22,640 --> 00:40:24,160
there's probably other things i'm not

895
00:40:24,160 --> 00:40:26,079
familiar with

896
00:40:26,079 --> 00:40:28,000
maybe you have a favorite um i don't

897
00:40:28,000 --> 00:40:29,680
know these aren't so much analyzing the

898
00:40:29,680 --> 00:40:33,440
protocol but analyzing conformance or or

899
00:40:33,440 --> 00:40:36,160
implementation behavior specific to

900
00:40:36,160 --> 00:40:38,400
protocols whether they implement musts

901
00:40:38,400 --> 00:40:40,960
or shoulds or maybes etc

902
00:40:40,960 --> 00:40:42,640
and how those things interact with each

903
00:40:42,640 --> 00:40:44,560
other they're all pretty good useful

904
00:40:44,560 --> 00:40:46,800
tools i use them myself but in general i

905
00:40:46,800 --> 00:40:49,280
would say in my opinion the general

906
00:40:49,280 --> 00:40:51,760
coverage of h2h3 as an internet

907
00:40:51,760 --> 00:40:54,319
community seems lacking given that the

908
00:40:54,319 --> 00:40:57,359
the widespread support for this protocol

909
00:40:57,359 --> 00:40:59,440
when things go wrong um

910
00:40:59,440 --> 00:41:01,040
people come to me to ask for help and

911
00:41:01,040 --> 00:41:02,800
i'm always happy to give it to them but

912
00:41:02,800 --> 00:41:04,880
i i think the scaling of that knowledge

913
00:41:04,880 --> 00:41:07,040
and the debacability is something that

914
00:41:07,040 --> 00:41:08,400
we could do better

915
00:41:08,400 --> 00:41:11,520
and this talk is part of that activity

916
00:41:11,520 --> 00:41:13,760
um so i want to like use some examples

917
00:41:13,760 --> 00:41:15,200
to illustrate this

918
00:41:15,200 --> 00:41:16,880
i don't want to pick on chrome solely

919
00:41:16,880 --> 00:41:18,079
but

920
00:41:18,079 --> 00:41:19,920
most people might have seen these kinds

921
00:41:19,920 --> 00:41:22,240
of error messages hands up if you have

922
00:41:22,240 --> 00:41:23,040
um

923
00:41:23,040 --> 00:41:25,440
this this often just gets shown or

924
00:41:25,440 --> 00:41:27,599
something like this when anything goes

925
00:41:27,599 --> 00:41:29,440
wrong so

926
00:41:29,440 --> 00:41:31,359
you know if you've seen this message how

927
00:41:31,359 --> 00:41:33,760
did you solve it did you just hit reload

928
00:41:33,760 --> 00:41:35,920
probably and then it went away but if

929
00:41:35,920 --> 00:41:37,440
you look online and you search for these

930
00:41:37,440 --> 00:41:39,520
things you hit interesting websites that

931
00:41:39,520 --> 00:41:41,359
give you interesting recommendations

932
00:41:41,359 --> 00:41:44,000
like flush the speedy pockets

933
00:41:44,000 --> 00:41:45,359
which you know i don't really know what

934
00:41:45,359 --> 00:41:46,960
that means could just be a typo it could

935
00:41:46,960 --> 00:41:48,960
be something else

936
00:41:48,960 --> 00:41:52,160
we go from speedy into hb2

937
00:41:52,160 --> 00:41:54,160
maybe you've seen that error

938
00:41:54,160 --> 00:41:55,520
again here's another website that

939
00:41:55,520 --> 00:41:57,359
recommends turning your antivirus off

940
00:41:57,359 --> 00:42:00,000
and on again um haha i i don't know if

941
00:42:00,000 --> 00:42:02,240
that's funny or not

942
00:42:02,240 --> 00:42:04,720
a bit scary in my mind

943
00:42:04,720 --> 00:42:06,560
and then we get to quick the latest and

944
00:42:06,560 --> 00:42:08,640
greatest um

945
00:42:08,640 --> 00:42:10,400
one of the recommendations like in the

946
00:42:10,400 --> 00:42:13,520
top of google search is if you're stuck

947
00:42:13,520 --> 00:42:15,280
from all of these different methods that

948
00:42:15,280 --> 00:42:17,839
don't actually help anything

949
00:42:17,839 --> 00:42:19,680
then contact google customer support i

950
00:42:19,680 --> 00:42:21,119
don't know if any of you have ever tried

951
00:42:21,119 --> 00:42:23,440
to contact google customer support but

952
00:42:23,440 --> 00:42:25,599
um you would have maybe mixed mixed

953
00:42:25,599 --> 00:42:28,640
results um i would say but i i actually

954
00:42:28,640 --> 00:42:31,440
did i had a problem um i went online um

955
00:42:31,440 --> 00:42:34,079
i logged a bug um after speaking to some

956
00:42:34,079 --> 00:42:35,760
folks and they responded very quickly

957
00:42:35,760 --> 00:42:37,520
and it was great um but unfortunately we

958
00:42:37,520 --> 00:42:39,680
all have priorities in our work and so

959
00:42:39,680 --> 00:42:42,640
that bug is remained open and sits there

960
00:42:42,640 --> 00:42:45,440
um it could potentially help um in in a

961
00:42:45,440 --> 00:42:47,760
few different ways but

962
00:42:47,760 --> 00:42:49,520
we're all busy all get prioritized i

963
00:42:49,520 --> 00:42:52,000
understand so in the meantime we have to

964
00:42:52,000 --> 00:42:53,520
look for other solutions or other ways

965
00:42:53,520 --> 00:42:55,119
to look at problems

966
00:42:55,119 --> 00:42:56,880
and beyond just chrome

967
00:42:56,880 --> 00:42:58,960
i want to focus on a specific example of

968
00:42:58,960 --> 00:43:00,800
this kind of thing where the spec says

969
00:43:00,800 --> 00:43:03,119
what we must and may do um and then what

970
00:43:03,119 --> 00:43:05,760
in reality actually happens so this is

971
00:43:05,760 --> 00:43:08,400
the idea of of taking a a request

972
00:43:08,400 --> 00:43:11,280
message and serializing it to the wire

973
00:43:11,280 --> 00:43:15,760
and what the hp3 spec says is that um

974
00:43:15,760 --> 00:43:17,200
you must have

975
00:43:17,200 --> 00:43:19,839
this full set of pseudo headers

976
00:43:19,839 --> 00:43:22,880
which articulate say for the request

977
00:43:22,880 --> 00:43:26,640
the method the path um the host

978
00:43:26,640 --> 00:43:29,200
and and so on

979
00:43:29,200 --> 00:43:31,280
but every request needs a method so this

980
00:43:31,280 --> 00:43:34,240
could be get post head various verbs

981
00:43:34,240 --> 00:43:36,480
that can be included in there that apply

982
00:43:36,480 --> 00:43:39,040
to all versions of http

983
00:43:39,040 --> 00:43:41,599
um but if you don't include that method

984
00:43:41,599 --> 00:43:45,119
then the request is is malformed

985
00:43:45,119 --> 00:43:47,200
so they must be treated as a stream

986
00:43:47,200 --> 00:43:48,960
error so that means resetting the stream

987
00:43:48,960 --> 00:43:51,200
with a specific error code and that you

988
00:43:51,200 --> 00:43:53,440
may serve a response

989
00:43:53,440 --> 00:43:55,760
before that happens before resetting the

990
00:43:55,760 --> 00:43:58,880
stream uh so what i did is is create a

991
00:43:58,880 --> 00:44:00,480
mile form client that did this on

992
00:44:00,480 --> 00:44:01,440
purpose

993
00:44:01,440 --> 00:44:02,880
this is literally if you think of old

994
00:44:02,880 --> 00:44:04,800
school hp like

995
00:44:04,800 --> 00:44:06,640
the the first thing that you would see

996
00:44:06,640 --> 00:44:08,720
in the request line is the method so

997
00:44:08,720 --> 00:44:10,000
it's like the first thing that could

998
00:44:10,000 --> 00:44:11,359
ever go wrong

999
00:44:11,359 --> 00:44:14,560
and i test that client a hp 3 client um

1000
00:44:14,560 --> 00:44:17,280
against various implementations

1001
00:44:17,280 --> 00:44:19,200
that operate on the internet and see

1002
00:44:19,200 --> 00:44:20,880
what happens

1003
00:44:20,880 --> 00:44:22,640
so to briefly summarize you know four of

1004
00:44:22,640 --> 00:44:26,240
these returned a bad request um

1005
00:44:26,240 --> 00:44:28,560
one returned four or five method not

1006
00:44:28,560 --> 00:44:29,680
allowed which i thought was quite

1007
00:44:29,680 --> 00:44:31,760
amusing because there was no method um

1008
00:44:31,760 --> 00:44:33,119
another's

1009
00:44:33,119 --> 00:44:35,359
uh center reset stream which is kind of

1010
00:44:35,359 --> 00:44:37,040
aligned to what the spec says but they

1011
00:44:37,040 --> 00:44:39,440
sent a different error code um and some

1012
00:44:39,440 --> 00:44:41,200
just closed the connection outright

1013
00:44:41,200 --> 00:44:43,520
which is pretty terminal um given that

1014
00:44:43,520 --> 00:44:46,160
these connections can hold or articulate

1015
00:44:46,160 --> 00:44:48,800
many requests um but i want to stress

1016
00:44:48,800 --> 00:44:51,440
that none of this is bad behavior they

1017
00:44:51,440 --> 00:44:54,480
all kind of rejected it and ultimately

1018
00:44:54,480 --> 00:44:56,960
in hp that's that's generally

1019
00:44:56,960 --> 00:44:59,280
good enough um i don't think anyone is

1020
00:44:59,280 --> 00:45:01,760
there as the protocol police making sure

1021
00:45:01,760 --> 00:45:03,680
that you know if if you receive the

1022
00:45:03,680 --> 00:45:05,280
wrong error code

1023
00:45:05,280 --> 00:45:07,680
you you take action but sometimes these

1024
00:45:07,680 --> 00:45:10,240
things can can result in systematic

1025
00:45:10,240 --> 00:45:12,319
errors as they propagate through so it's

1026
00:45:12,319 --> 00:45:14,400
not always clear if this is okay or if

1027
00:45:14,400 --> 00:45:16,720
this is bad um maybe as a community we

1028
00:45:16,720 --> 00:45:19,119
need to to take a look and and see if

1029
00:45:19,119 --> 00:45:20,960
there's anything more we can do and

1030
00:45:20,960 --> 00:45:23,520
sometimes this is not sometimes it's the

1031
00:45:23,520 --> 00:45:26,400
equilibrium that's good enough

1032
00:45:26,400 --> 00:45:27,440
um

1033
00:45:27,440 --> 00:45:30,079
something else that happened uh

1034
00:45:30,079 --> 00:45:32,160
different to that um a while back

1035
00:45:32,160 --> 00:45:34,640
netflix did some work about

1036
00:45:34,640 --> 00:45:36,880
hb2 they were looking to implement it

1037
00:45:36,880 --> 00:45:38,560
and then looked at the protocol and then

1038
00:45:38,560 --> 00:45:40,079
compared that to implementations and

1039
00:45:40,079 --> 00:45:42,319
were able to identify a number of attack

1040
00:45:42,319 --> 00:45:44,480
vectors that could result in denial of

1041
00:45:44,480 --> 00:45:47,760
service on hb2 implementations um and

1042
00:45:47,760 --> 00:45:50,160
there's a large community effort um

1043
00:45:50,160 --> 00:45:53,119
responsible disclosure to kind of create

1044
00:45:53,119 --> 00:45:54,880
proof of concepts of these attacks and

1045
00:45:54,880 --> 00:45:57,040
and integrate fixes and the community

1046
00:45:57,040 --> 00:45:59,599
did a great job of that but

1047
00:45:59,599 --> 00:46:01,760
um you know if you're writing a h2

1048
00:46:01,760 --> 00:46:04,160
implementation today is that information

1049
00:46:04,160 --> 00:46:06,640
is accessible um to you you've come

1050
00:46:06,640 --> 00:46:10,560
after the whole train of of implementers

1051
00:46:10,560 --> 00:46:11,920
maybe you've read about these things but

1052
00:46:11,920 --> 00:46:14,000
you don't understand them how can we

1053
00:46:14,000 --> 00:46:16,880
make sure that those test cases apply to

1054
00:46:16,880 --> 00:46:19,520
diverse hb2 implementations still

1055
00:46:19,520 --> 00:46:21,119
there's code you could run them that's

1056
00:46:21,119 --> 00:46:23,440
great but is it is it sufficient and the

1057
00:46:23,440 --> 00:46:25,520
reason this is important i'll just pick

1058
00:46:25,520 --> 00:46:27,280
on one of these one of the attacks was

1059
00:46:27,280 --> 00:46:30,160
um a ping flood so this is a hb2 ping

1060
00:46:30,160 --> 00:46:31,920
frame um

1061
00:46:31,920 --> 00:46:33,839
you can see here the description is that

1062
00:46:33,839 --> 00:46:36,319
attacker sends continual pings um that

1063
00:46:36,319 --> 00:46:40,079
could cause build up and a dos

1064
00:46:40,079 --> 00:46:42,000
and and the reason this is interesting

1065
00:46:42,000 --> 00:46:43,119
is because

1066
00:46:43,119 --> 00:46:44,960
cloudflare implemented mitigations for

1067
00:46:44,960 --> 00:46:47,359
these h2 dos attacks that were that

1068
00:46:47,359 --> 00:46:49,200
affected our specific implementation we

1069
00:46:49,200 --> 00:46:50,560
weren't affected by them all but

1070
00:46:50,560 --> 00:46:52,240
reflected by some and one was the ping

1071
00:46:52,240 --> 00:46:54,960
flood um but if we kind of put that on a

1072
00:46:54,960 --> 00:46:57,440
stack for a moment grpc

1073
00:46:57,440 --> 00:47:00,480
um is a lady7 protocol that does stuff

1074
00:47:00,480 --> 00:47:03,680
um and they have this thing called uh

1075
00:47:03,680 --> 00:47:05,920
pdp estimation and

1076
00:47:05,920 --> 00:47:07,599
this is a direct quote from from this

1077
00:47:07,599 --> 00:47:09,200
website that says the idea is simple and

1078
00:47:09,200 --> 00:47:11,520
powerful every time you receive some

1079
00:47:11,520 --> 00:47:15,520
data um send out a h2 ping frame

1080
00:47:15,520 --> 00:47:17,200
and then look at the response and do

1081
00:47:17,200 --> 00:47:20,559
some calculation um and estimate the bdp

1082
00:47:20,559 --> 00:47:22,400
which is pretty cool um

1083
00:47:22,400 --> 00:47:24,400
you know but what what it results in is

1084
00:47:24,400 --> 00:47:26,559
a ping every data frame which is very

1085
00:47:26,559 --> 00:47:28,559
much like a pain flood

1086
00:47:28,559 --> 00:47:29,359
and

1087
00:47:29,359 --> 00:47:31,520
that introduces a interesting

1088
00:47:31,520 --> 00:47:34,800
interaction between some implementations

1089
00:47:34,800 --> 00:47:37,520
and the fun thing is that um rust has a

1090
00:47:37,520 --> 00:47:39,359
library that implements http 2 called

1091
00:47:39,359 --> 00:47:40,480
hyper

1092
00:47:40,480 --> 00:47:42,240
and they have a feature called adaptive

1093
00:47:42,240 --> 00:47:44,800
window that directly was influenced by

1094
00:47:44,800 --> 00:47:47,760
the grpc bdp behavior

1095
00:47:47,760 --> 00:47:48,640
so

1096
00:47:48,640 --> 00:47:50,800
they we we had a situation where the

1097
00:47:50,800 --> 00:47:52,640
rust hyper client would speak to the

1098
00:47:52,640 --> 00:47:55,359
cloudflare edge and uh get closed the

1099
00:47:55,359 --> 00:47:57,040
dos mitigation would close them because

1100
00:47:57,040 --> 00:47:57,839
it would

1101
00:47:57,839 --> 00:47:59,440
detect an attack

1102
00:47:59,440 --> 00:48:01,280
and that wasn't great but you know we

1103
00:48:01,280 --> 00:48:02,640
were able to detect these things and

1104
00:48:02,640 --> 00:48:04,559
understand them by analyzing them in

1105
00:48:04,559 --> 00:48:06,800
things like wire shop or the tooling

1106
00:48:06,800 --> 00:48:09,280
and and work with community uh to

1107
00:48:09,280 --> 00:48:11,280
implement the fix and the fix here was

1108
00:48:11,280 --> 00:48:13,520
to to not be as aggressive in that

1109
00:48:13,520 --> 00:48:16,160
pinging um and the act the outcome of

1110
00:48:16,160 --> 00:48:18,319
that activity is actually

1111
00:48:18,319 --> 00:48:20,079
it was friendlier to the server the

1112
00:48:20,079 --> 00:48:21,359
client was friendlier to the servers

1113
00:48:21,359 --> 00:48:23,599
that it was speaking to um and also the

1114
00:48:23,599 --> 00:48:26,960
the bdp actually um got better um

1115
00:48:26,960 --> 00:48:28,800
everything got better so that was a net

1116
00:48:28,800 --> 00:48:29,599
win

1117
00:48:29,599 --> 00:48:31,040
um there's a different problem that we

1118
00:48:31,040 --> 00:48:32,480
had we launched something called speedok

1119
00:48:32,480 --> 00:48:34,960
cloud player a while back um and in this

1120
00:48:34,960 --> 00:48:36,800
like uh people

1121
00:48:36,800 --> 00:48:38,720
test how fast

1122
00:48:38,720 --> 00:48:39,520
um

1123
00:48:39,520 --> 00:48:41,440
in terms of throughput their upload or

1124
00:48:41,440 --> 00:48:43,359
the download was and what their ping and

1125
00:48:43,359 --> 00:48:45,920
jitter was like um shortly after we

1126
00:48:45,920 --> 00:48:47,040
launched that

1127
00:48:47,040 --> 00:48:49,040
we had reports that people on very high

1128
00:48:49,040 --> 00:48:52,079
speed internet access um were seeing uh

1129
00:48:52,079 --> 00:48:54,559
kind of deflated upload figures compared

1130
00:48:54,559 --> 00:48:55,599
to

1131
00:48:55,599 --> 00:48:56,960
other

1132
00:48:56,960 --> 00:48:59,359
such speed tests that behaved or acted

1133
00:48:59,359 --> 00:49:01,520
differently so we did some investigation

1134
00:49:01,520 --> 00:49:03,760
here and what we found um is that there

1135
00:49:03,760 --> 00:49:06,160
was a difference between just hp 1.1 and

1136
00:49:06,160 --> 00:49:08,800
hb2 upload performance so that ruled out

1137
00:49:08,800 --> 00:49:11,760
anything lower layer both using tcp both

1138
00:49:11,760 --> 00:49:13,280
using ip

1139
00:49:13,280 --> 00:49:14,960
everything else pretty similar so the

1140
00:49:14,960 --> 00:49:16,960
difference there was solely between 1.1

1141
00:49:16,960 --> 00:49:19,440
and and two um and throughout his

1142
00:49:19,440 --> 00:49:21,280
investigation what we found is that it

1143
00:49:21,280 --> 00:49:24,079
was due to hp2 flow control

1144
00:49:24,079 --> 00:49:25,839
and this is quite a just a basic thing

1145
00:49:25,839 --> 00:49:27,359
it was there hidden in plain sight that

1146
00:49:27,359 --> 00:49:29,760
the server was just not giving enough

1147
00:49:29,760 --> 00:49:31,920
flow control to the client um causing

1148
00:49:31,920 --> 00:49:34,000
these deflated figures um so my

1149
00:49:34,000 --> 00:49:36,079
colleague did some work on this looking

1150
00:49:36,079 --> 00:49:38,480
at different auto different buffer sizes

1151
00:49:38,480 --> 00:49:40,400
different window sizes and we settled

1152
00:49:40,400 --> 00:49:42,000
upon an auto tune solution pretty

1153
00:49:42,000 --> 00:49:44,480
similar to what tcp does already but at

1154
00:49:44,480 --> 00:49:46,960
the layer seven um and by deploying this

1155
00:49:46,960 --> 00:49:48,800
we were able to see like immediate

1156
00:49:48,800 --> 00:49:50,079
improvements

1157
00:49:50,079 --> 00:49:52,480
which was a again a very good win but it

1158
00:49:52,480 --> 00:49:54,640
really makes me question why such a

1159
00:49:54,640 --> 00:49:56,960
basic problem was there for so long and

1160
00:49:56,960 --> 00:49:58,880
no one had detected it

1161
00:49:58,880 --> 00:50:00,319
which makes me wonder you know what are

1162
00:50:00,319 --> 00:50:02,240
we measuring when we do anything like

1163
00:50:02,240 --> 00:50:04,079
this are we measuring layer 4 layer 7

1164
00:50:04,079 --> 00:50:05,680
the whole thing and what's the

1165
00:50:05,680 --> 00:50:08,319
methodology to detecting bottlenecks or

1166
00:50:08,319 --> 00:50:10,240
performance impediments

1167
00:50:10,240 --> 00:50:13,359
beyond the ideal um like i say here

1168
00:50:13,359 --> 00:50:15,440
layers below hp will attract uh affect

1169
00:50:15,440 --> 00:50:18,640
its performance um and but you know even

1170
00:50:18,640 --> 00:50:20,079
if your lower layers perform well they

1171
00:50:20,079 --> 00:50:22,480
aren't indicative of upper layer success

1172
00:50:22,480 --> 00:50:25,839
um and this kind of environment is and

1173
00:50:25,839 --> 00:50:27,760
the observations we'd seen was our

1174
00:50:27,760 --> 00:50:30,079
motivation to making a submission to the

1175
00:50:30,079 --> 00:50:32,880
iab measuring network quality um

1176
00:50:32,880 --> 00:50:35,839
workshop that happened last year um and

1177
00:50:35,839 --> 00:50:37,760
then we'll say you know on top of just

1178
00:50:37,760 --> 00:50:39,440
throughput stuff latency and jitter of

1179
00:50:39,440 --> 00:50:41,119
fundamental problems

1180
00:50:41,119 --> 00:50:43,599
the hb protocols are very latency

1181
00:50:43,599 --> 00:50:47,280
sensitive or responsiveness sensitive

1182
00:50:47,280 --> 00:50:49,680
and that's why we're super happy that

1183
00:50:49,680 --> 00:50:51,520
the the work in the ippm on

1184
00:50:51,520 --> 00:50:52,880
responsiveness and the working

1185
00:50:52,880 --> 00:50:55,119
conditions has been adopted now

1186
00:50:55,119 --> 00:50:56,640
and is making good progress about

1187
00:50:56,640 --> 00:50:59,200
testing the whole stack including hp2

1188
00:50:59,200 --> 00:51:00,880
implementations these are the protocols

1189
00:51:00,880 --> 00:51:02,880
that real people use when they use web

1190
00:51:02,880 --> 00:51:04,480
services and we need to be able to

1191
00:51:04,480 --> 00:51:06,559
characterize them and understand where

1192
00:51:06,559 --> 00:51:07,760
there's

1193
00:51:07,760 --> 00:51:09,680
bottlenecks or performance

1194
00:51:09,680 --> 00:51:10,960
improvement

1195
00:51:10,960 --> 00:51:12,240
possibilities

1196
00:51:12,240 --> 00:51:14,880
but beyond all of that um to quote harry

1197
00:51:14,880 --> 00:51:16,079
potter

1198
00:51:16,079 --> 00:51:18,559
life isn't fair it isn't just streams

1199
00:51:18,559 --> 00:51:20,720
and requests and responses

1200
00:51:20,720 --> 00:51:23,040
there's a whole evolution of

1201
00:51:23,040 --> 00:51:25,760
of things happening at http turning it

1202
00:51:25,760 --> 00:51:27,359
into more of a substrate it's always

1203
00:51:27,359 --> 00:51:30,240
been a substrate for things but through

1204
00:51:30,240 --> 00:51:32,000
through the definition of the hb

1205
00:51:32,000 --> 00:51:33,839
datagrams and capsule protocol that's

1206
00:51:33,839 --> 00:51:35,839
been happening in the mass working group

1207
00:51:35,839 --> 00:51:38,000
and that work is now done just waiting

1208
00:51:38,000 --> 00:51:40,160
publication um

1209
00:51:40,160 --> 00:51:42,880
we're able to provide even more um

1210
00:51:42,880 --> 00:51:46,000
extreme use cases um to use a word so

1211
00:51:46,000 --> 00:51:48,880
udp 443 could be the future of

1212
00:51:48,880 --> 00:51:50,720
everything is what i'm trying to

1213
00:51:50,720 --> 00:51:53,040
indicate here um on top of reliable

1214
00:51:53,040 --> 00:51:54,800
stream data we have quick datagram

1215
00:51:54,800 --> 00:51:55,760
frames

1216
00:51:55,760 --> 00:51:57,839
which allow for the use of unreliable

1217
00:51:57,839 --> 00:52:00,319
datagrams in http in combination with

1218
00:52:00,319 --> 00:52:01,839
the capsule protocol we're able to do

1219
00:52:01,839 --> 00:52:04,640
new things like proxy udp over http

1220
00:52:04,640 --> 00:52:06,480
which is what mask has been working on

1221
00:52:06,480 --> 00:52:09,040
um they're now focusing more on proxy ip

1222
00:52:09,040 --> 00:52:10,559
over http

1223
00:52:10,559 --> 00:52:12,480
which is interesting too

1224
00:52:12,480 --> 00:52:14,240
we also have the web transport working

1225
00:52:14,240 --> 00:52:15,839
group and the media of a quick working

1226
00:52:15,839 --> 00:52:17,760
group all trying to find new and

1227
00:52:17,760 --> 00:52:20,800
exciting ways to use these protocols

1228
00:52:20,800 --> 00:52:23,040
which again makes me even more

1229
00:52:23,040 --> 00:52:27,280
interested in the kinds of edge cases or

1230
00:52:27,280 --> 00:52:28,880
specific problems that might occur to

1231
00:52:28,880 --> 00:52:31,680
them and that we need to empower

1232
00:52:31,680 --> 00:52:33,920
everybody who might use these protocols

1233
00:52:33,920 --> 00:52:35,520
to be able to understand what's going

1234
00:52:35,520 --> 00:52:37,200
wrong not just the developers who are

1235
00:52:37,200 --> 00:52:39,359
working on them right now or the experts

1236
00:52:39,359 --> 00:52:41,839
who'll be running those implementations

1237
00:52:41,839 --> 00:52:43,680
or edge services

1238
00:52:43,680 --> 00:52:46,880
uh for the next few years um we need to

1239
00:52:46,880 --> 00:52:49,280
scale this up to end users

1240
00:52:49,280 --> 00:52:51,200
who have some technical knowledge and

1241
00:52:51,200 --> 00:52:54,640
and want to use these things

1242
00:52:54,640 --> 00:52:56,960
uh this is an example that takes it to

1243
00:52:56,960 --> 00:52:58,480
the extreme of

1244
00:52:58,480 --> 00:53:01,280
multiple hot proxies that

1245
00:53:01,280 --> 00:53:04,000
tunnel quick over quick um in terms of

1246
00:53:04,000 --> 00:53:06,400
layer cake that is even more complicated

1247
00:53:06,400 --> 00:53:08,240
um and i know i won't go into it now

1248
00:53:08,240 --> 00:53:09,839
because my brain hurts

1249
00:53:09,839 --> 00:53:10,720
um

1250
00:53:10,720 --> 00:53:11,680
but

1251
00:53:11,680 --> 00:53:12,960
we want to come back to the layer four

1252
00:53:12,960 --> 00:53:15,760
and three quarters um

1253
00:53:15,760 --> 00:53:16,960
one moment

1254
00:53:16,960 --> 00:53:18,000
um

1255
00:53:18,000 --> 00:53:19,359
this is the conclusion of the talk

1256
00:53:19,359 --> 00:53:22,480
you'll be happy to hear um

1257
00:53:22,480 --> 00:53:24,880
the the intersection the venn diagram

1258
00:53:24,880 --> 00:53:26,880
between layer seven and four would

1259
00:53:26,880 --> 00:53:28,800
obviously include other layers except

1260
00:53:28,800 --> 00:53:31,280
that they don't really exist in practice

1261
00:53:31,280 --> 00:53:32,079
so

1262
00:53:32,079 --> 00:53:35,359
this is where the quirks are but i i i

1263
00:53:35,359 --> 00:53:37,200
have many remaining questions i can tell

1264
00:53:37,200 --> 00:53:38,640
you that there'll be things there that

1265
00:53:38,640 --> 00:53:40,640
will go wrong and we might fix some but

1266
00:53:40,640 --> 00:53:43,280
there'll be more it's an unknown maybe

1267
00:53:43,280 --> 00:53:46,319
to use that horrible um analogy but um

1268
00:53:46,319 --> 00:53:48,319
what i what i want to focus on is you

1269
00:53:48,319 --> 00:53:49,599
know how can we get better as an

1270
00:53:49,599 --> 00:53:51,599
internet community at finding the things

1271
00:53:51,599 --> 00:53:52,880
we know where they are how do we find

1272
00:53:52,880 --> 00:53:54,800
them how can we get better at fixing

1273
00:53:54,800 --> 00:53:58,319
them in a more faster more robust way

1274
00:53:58,319 --> 00:54:00,160
and how can we get better at documenting

1275
00:54:00,160 --> 00:54:01,760
them do any of these things need

1276
00:54:01,760 --> 00:54:04,720
protocol changes i think probably not

1277
00:54:04,720 --> 00:54:08,839
but we don't know until we find them um

1278
00:54:08,839 --> 00:54:10,240
yeah uh

1279
00:54:10,240 --> 00:54:12,000
that's it that's my call to action we

1280
00:54:12,000 --> 00:54:14,240
need to scale this up beyond just

1281
00:54:14,240 --> 00:54:17,680
itf people in in this

1282
00:54:17,680 --> 00:54:19,599
conference venue this week

1283
00:54:19,599 --> 00:54:21,760
um so with that i'll conclude my talk

1284
00:54:21,760 --> 00:54:23,359
thank you very much for the invitation

1285
00:54:23,359 --> 00:54:25,760
it's been great to share my mind with

1286
00:54:25,760 --> 00:54:26,800
people

1287
00:54:26,800 --> 00:54:28,400
lucas thank you very much for for giving

1288
00:54:28,400 --> 00:54:29,760
the talk um

1289
00:54:29,760 --> 00:54:31,760
this is uh just as entertaining the

1290
00:54:31,760 --> 00:54:33,839
second time around for me um look i know

1291
00:54:33,839 --> 00:54:34,960
we're over time but i would like to

1292
00:54:34,960 --> 00:54:37,359
entertain a couple of questions

1293
00:54:37,359 --> 00:54:39,280
uh i don't see anybody in the chat queue

1294
00:54:39,280 --> 00:54:40,720
and i have one or two that i could ask

1295
00:54:40,720 --> 00:54:42,640
but i'm looking at the room so anybody

1296
00:54:42,640 --> 00:54:45,920
in the room who wishes to ask

1297
00:54:46,400 --> 00:54:47,839
and and while people are thinking about

1298
00:54:47,839 --> 00:54:49,920
it let me let me ask you this so if i

1299
00:54:49,920 --> 00:54:51,920
having seen this now for the second time

1300
00:54:51,920 --> 00:54:53,520
and having had a few conversations with

1301
00:54:53,520 --> 00:54:55,200
you i feel like there's three buckets of

1302
00:54:55,200 --> 00:54:58,160
things happening there's this notion of

1303
00:54:58,160 --> 00:55:01,680
measuring issues that

1304
00:55:01,680 --> 00:55:04,480
have cross-layer components

1305
00:55:04,480 --> 00:55:07,599
diagnosing problems and signaling

1306
00:55:07,599 --> 00:55:10,240
somehow between layers

1307
00:55:10,240 --> 00:55:11,599
do you have a sense i mean from your

1308
00:55:11,599 --> 00:55:13,520
perspective working on the ground are

1309
00:55:13,520 --> 00:55:15,599
there is there a priority order to these

1310
00:55:15,599 --> 00:55:17,359
i think is the first question

1311
00:55:17,359 --> 00:55:19,440
the second is do you have a sense are we

1312
00:55:19,440 --> 00:55:22,000
talking about a new set of of standards

1313
00:55:22,000 --> 00:55:23,760
here that need to be evolved or is it

1314
00:55:23,760 --> 00:55:26,000
something maybe that the formal methods

1315
00:55:26,000 --> 00:55:28,079
um and verification community can attack

1316
00:55:28,079 --> 00:55:30,160
some of these things as we might discuss

1317
00:55:30,160 --> 00:55:33,200
in this afternoon session

1318
00:55:34,079 --> 00:55:35,680
those are all excellent questions i

1319
00:55:35,680 --> 00:55:38,079
would say um

1320
00:55:38,079 --> 00:55:39,760
the best way i can answer that is that

1321
00:55:39,760 --> 00:55:43,359
typically the way that most http servers

1322
00:55:43,359 --> 00:55:44,160
work

1323
00:55:44,160 --> 00:55:47,680
is that they would log request logs

1324
00:55:47,680 --> 00:55:50,640
which are very high level view of the

1325
00:55:50,640 --> 00:55:52,480
kind of the response status code that

1326
00:55:52,480 --> 00:55:53,359
was

1327
00:55:53,359 --> 00:55:55,839
sent when a request came in with some

1328
00:55:55,839 --> 00:55:57,520
information about that maybe some

1329
00:55:57,520 --> 00:55:59,839
headers the user agent things like this

1330
00:55:59,839 --> 00:56:01,680
on the client side

1331
00:56:01,680 --> 00:56:04,000
you just get the result maybe that error

1332
00:56:04,000 --> 00:56:06,319
code i showed in chrome you can enable

1333
00:56:06,319 --> 00:56:08,240
additional debug tooling so you could

1334
00:56:08,240 --> 00:56:09,359
look at a

1335
00:56:09,359 --> 00:56:11,520
dev tool open that up and maybe capture

1336
00:56:11,520 --> 00:56:12,799
a half file

1337
00:56:12,799 --> 00:56:14,480
does give a bit more information about

1338
00:56:14,480 --> 00:56:16,319
the request headers and response headers

1339
00:56:16,319 --> 00:56:18,480
that were sent but they don't

1340
00:56:18,480 --> 00:56:20,799
go into any of the framing like this

1341
00:56:20,799 --> 00:56:23,520
this eponymous um layer four and three

1342
00:56:23,520 --> 00:56:25,760
quarters to do that you'd need to maybe

1343
00:56:25,760 --> 00:56:28,079
enable the chrome netlog

1344
00:56:28,079 --> 00:56:30,000
which would capture stuff but then

1345
00:56:30,000 --> 00:56:32,799
you're getting into almost um you know

1346
00:56:32,799 --> 00:56:34,480
per packet tracing

1347
00:56:34,480 --> 00:56:35,440
and that is

1348
00:56:35,440 --> 00:56:39,200
voluminous uh it's large it's it's

1349
00:56:39,200 --> 00:56:40,720
hard to

1350
00:56:40,720 --> 00:56:44,559
read through quickly um and when it goes

1351
00:56:44,559 --> 00:56:47,440
wrong it's often these things are

1352
00:56:47,440 --> 00:56:49,440
multiple requests all in a single

1353
00:56:49,440 --> 00:56:51,599
connection so if one request fails it

1354
00:56:51,599 --> 00:56:54,960
could be due to something unrelated that

1355
00:56:54,960 --> 00:56:57,359
failed in that connection um due to

1356
00:56:57,359 --> 00:56:59,599
maybe an implementation bug or an

1357
00:56:59,599 --> 00:57:02,240
implementation choice that was was

1358
00:57:02,240 --> 00:57:04,400
defined in the specification that

1359
00:57:04,400 --> 00:57:07,040
implementations must decide and often

1360
00:57:07,040 --> 00:57:08,960
they will but they won't document why

1361
00:57:08,960 --> 00:57:10,960
that decision was made it might be there

1362
00:57:10,960 --> 00:57:13,680
in the code in the comment um or but you

1363
00:57:13,680 --> 00:57:15,680
know we're not all experts in every

1364
00:57:15,680 --> 00:57:17,119
language and nowhere to look for these

1365
00:57:17,119 --> 00:57:20,240
things so um

1366
00:57:20,240 --> 00:57:22,559
just just capturing these things is hard

1367
00:57:22,559 --> 00:57:24,160
it's a hard problem to solve because of

1368
00:57:24,160 --> 00:57:26,960
the data that's required i know facebook

1369
00:57:26,960 --> 00:57:29,119
as an example um uses q log in

1370
00:57:29,119 --> 00:57:31,119
production and does capture a lot of

1371
00:57:31,119 --> 00:57:34,160
these kind of events in real time but i

1372
00:57:34,160 --> 00:57:35,440
don't i think that's beyond the

1373
00:57:35,440 --> 00:57:37,839
capabilities of a lot of

1374
00:57:37,839 --> 00:57:40,720
deployments so it could be that we need

1375
00:57:40,720 --> 00:57:44,319
a way to think about how to to do

1376
00:57:44,319 --> 00:57:46,960
logging on demand or or

1377
00:57:46,960 --> 00:57:49,839
sampling or tracing of things but again

1378
00:57:49,839 --> 00:57:52,319
it's it's tricky i don't have that many

1379
00:57:52,319 --> 00:57:54,640
answers in this i have ways that i know

1380
00:57:54,640 --> 00:57:56,319
how to work myself but those aren't

1381
00:57:56,319 --> 00:57:58,480
necessarily applicable to everybody i

1382
00:57:58,480 --> 00:58:00,400
don't i don't think this is something

1383
00:58:00,400 --> 00:58:02,720
that can happen in the specifications

1384
00:58:02,720 --> 00:58:05,440
themselves but maybe you know we do a

1385
00:58:05,440 --> 00:58:08,000
good job with automated testing say for

1386
00:58:08,000 --> 00:58:09,920
interrupt in the quick working group but

1387
00:58:09,920 --> 00:58:12,079
that focuses very much on the transport

1388
00:58:12,079 --> 00:58:12,960
layer

1389
00:58:12,960 --> 00:58:15,119
maybe there's more room to

1390
00:58:15,119 --> 00:58:16,720
integrate some of those tools i talked

1391
00:58:16,720 --> 00:58:19,200
about earlier into more of an

1392
00:58:19,200 --> 00:58:20,839
automated kind of

1393
00:58:20,839 --> 00:58:23,760
view very good okay we seem to have one

1394
00:58:23,760 --> 00:58:24,960
question on the floor please introduce

1395
00:58:24,960 --> 00:58:26,640
yourself and then we'll move on thanks

1396
00:58:26,640 --> 00:58:29,760
hello my name is dobby and i work in the

1397
00:58:29,760 --> 00:58:33,520
kitchens at gringotts on packets and i

1398
00:58:33,520 --> 00:58:34,799
do exist

1399
00:58:34,799 --> 00:58:37,760
and i would love to have been in the fcc

1400
00:58:37,760 --> 00:58:40,960
room when you attempted to discuss delay

1401
00:58:40,960 --> 00:58:44,400
and jitter without mentioning packets or

1402
00:58:44,400 --> 00:58:46,160
lower layers

1403
00:58:46,160 --> 00:58:48,000
that would have been very entertaining

1404
00:58:48,000 --> 00:58:49,440
because magic

1405
00:58:49,440 --> 00:58:50,400
requires

1406
00:58:50,400 --> 00:58:52,960
packets

1407
00:58:54,480 --> 00:58:56,640
thank thank you for the um the comment

1408
00:58:56,640 --> 00:58:59,119
that i i would say please go and see the

1409
00:58:59,119 --> 00:59:01,119
fcc um

1410
00:59:01,119 --> 00:59:01,920
uh

1411
00:59:01,920 --> 00:59:03,920
proposal i can't remember the right name

1412
00:59:03,920 --> 00:59:06,160
here but you know the these um requests

1413
00:59:06,160 --> 00:59:08,720
for comments that were made like this

1414
00:59:08,720 --> 00:59:10,480
was a public consultation i think mom

1415
00:59:10,480 --> 00:59:11,839
will probably correct me if i'm wrong

1416
00:59:11,839 --> 00:59:14,480
here but um yeah

1417
00:59:14,480 --> 00:59:15,520
this is

1418
00:59:15,520 --> 00:59:17,280
my opinion of things

1419
00:59:17,280 --> 00:59:20,079
obviously there's a lot more to it than

1420
00:59:20,079 --> 00:59:22,240
just this view and a lot of my

1421
00:59:22,240 --> 00:59:24,880
colleagues did a good job of trying to

1422
00:59:24,880 --> 00:59:28,480
articulate all of the areas related to

1423
00:59:28,480 --> 00:59:32,000
broadband nutrition

1424
00:59:32,000 --> 00:59:33,440
lucas thank you very much i think

1425
00:59:33,440 --> 00:59:34,960
there's george michaelson in the queue i

1426
00:59:34,960 --> 00:59:36,640
noticed the last minute i'm hoping he

1427
00:59:36,640 --> 00:59:38,960
can reach out to you to ask a question

1428
00:59:38,960 --> 00:59:41,440
um if if that question stands but i'd

1429
00:59:41,440 --> 00:59:43,760
like to move on in the meantime

1430
00:59:43,760 --> 00:59:45,680
uh let's see looking for the next

1431
00:59:45,680 --> 00:59:48,319
presenter

1432
00:59:50,559 --> 00:59:52,480
uh hold on

1433
00:59:52,480 --> 00:59:56,040
where did you go

1434
01:00:03,520 --> 01:00:07,599
sofiki islam are you in the room

1435
01:00:08,079 --> 01:00:10,079
okay sure is yours

1436
01:00:10,079 --> 01:00:13,079
welcome

1437
01:00:19,680 --> 01:00:22,960
yeah can you hear me guys

1438
01:00:22,960 --> 01:00:24,799
hi uh good morning

1439
01:00:24,799 --> 01:00:27,040
my name is shafiqul and

1440
01:00:27,040 --> 01:00:29,119
i'm going to present is it really

1441
01:00:29,119 --> 01:00:31,839
necessary to go beyond a fairness metric

1442
01:00:31,839 --> 01:00:35,520
for next generation congestion control

1443
01:00:35,520 --> 01:00:37,119
this is joint work with christian

1444
01:00:37,119 --> 01:00:38,720
carsten and michael from university of

1445
01:00:38,720 --> 01:00:43,078
oslo next slide please

1446
01:00:48,319 --> 01:00:51,040
next slide please

1447
01:00:51,359 --> 01:00:54,598
oh yeah

1448
01:00:56,319 --> 01:00:59,119
can i do it from here

1449
01:01:01,599 --> 01:01:05,160
oh yeah sorry

1450
01:01:10,000 --> 01:01:12,720
used it that's why

1451
01:01:22,000 --> 01:01:22,960
yeah

1452
01:01:22,960 --> 01:01:25,440
sorry for the devil um

1453
01:01:25,440 --> 01:01:27,760
traditionally the evaluation of fairness

1454
01:01:27,760 --> 01:01:28,480
and

1455
01:01:28,480 --> 01:01:30,400
evolution congestion control mechanism

1456
01:01:30,400 --> 01:01:33,359
encompasses an examination of fairness

1457
01:01:33,359 --> 01:01:35,520
this is done by calculating throughputs

1458
01:01:35,520 --> 01:01:37,040
from uh

1459
01:01:37,040 --> 01:01:39,280
of computing flows from experiments or

1460
01:01:39,280 --> 01:01:40,559
simulations

1461
01:01:40,559 --> 01:01:42,480
and this data vector is fed to an

1462
01:01:42,480 --> 01:01:44,559
equation right here

1463
01:01:44,559 --> 01:01:46,480
and a singular vector vector jane's

1464
01:01:46,480 --> 01:01:49,760
fairness index is calculated

1465
01:01:49,760 --> 01:01:52,160
here n is the total number of flows and

1466
01:01:52,160 --> 01:01:54,880
x i is the throughput of the if

1467
01:01:54,880 --> 01:01:57,880
connection

1468
01:02:09,920 --> 01:02:10,640
so

1469
01:02:10,640 --> 01:02:13,359
the concept has been used to judge

1470
01:02:13,359 --> 01:02:16,000
how multiple instances of the same

1471
01:02:16,000 --> 01:02:17,760
congestion control mechanism

1472
01:02:17,760 --> 01:02:19,280
interoperated interoperate in

1473
01:02:19,280 --> 01:02:20,960
heterogeneous and homogeneous set of

1474
01:02:20,960 --> 01:02:23,440
conditions

1475
01:02:25,039 --> 01:02:27,119
and this is also used to evaluate

1476
01:02:27,119 --> 01:02:28,640
whether a new congestion control

1477
01:02:28,640 --> 01:02:30,000
mechanism is

1478
01:02:30,000 --> 01:02:30,799
fit

1479
01:02:30,799 --> 01:02:33,359
for deployment on the internet

1480
01:02:33,359 --> 01:02:35,920
and this is done by evaluating fairness

1481
01:02:35,920 --> 01:02:38,160
when a

1482
01:02:38,160 --> 01:02:40,000
new mechanism competes with the

1483
01:02:40,000 --> 01:02:42,000
prevalent congestion control mechanisms

1484
01:02:42,000 --> 01:02:43,839
traditionally renault

1485
01:02:43,839 --> 01:02:46,640
more recently cubic

1486
01:02:46,640 --> 01:02:48,880
15 years ago bob briscoe introduced the

1487
01:02:48,880 --> 01:02:50,480
term um

1488
01:02:50,480 --> 01:02:52,559
flow rate fairness in his

1489
01:02:52,559 --> 01:02:54,000
ccr paper

1490
01:02:54,000 --> 01:02:55,760
and he argues that

1491
01:02:55,760 --> 01:02:57,760
fairness should be defined

1492
01:02:57,760 --> 01:02:59,599
in relation to cost

1493
01:02:59,599 --> 01:03:03,760
per economic entity not perflow

1494
01:03:03,760 --> 01:03:05,359
however even after 15 years of

1495
01:03:05,359 --> 01:03:07,440
publication it is still common to

1496
01:03:07,440 --> 01:03:09,760
evaluate mechanisms on the basis of flow

1497
01:03:09,760 --> 01:03:13,079
rate fairness

1498
01:03:22,640 --> 01:03:23,440
uh

1499
01:03:23,440 --> 01:03:26,000
what happened

1500
01:03:26,960 --> 01:03:31,079
could you please share the slides again

1501
01:03:48,319 --> 01:03:50,558
yeah

1502
01:03:50,640 --> 01:03:54,078
i still don't have yeah got it

1503
01:03:56,839 --> 01:03:59,920
yep so the question is does such a

1504
01:03:59,920 --> 01:04:01,920
fairness test indeed provide a good

1505
01:04:01,920 --> 01:04:03,839
reasoning about the deployment of a new

1506
01:04:03,839 --> 01:04:07,280
congestion control mechanism

1507
01:04:07,280 --> 01:04:10,079
so in a recent hotnet paper where at all

1508
01:04:10,079 --> 01:04:12,880
suggested to use the harm concept that

1509
01:04:12,880 --> 01:04:15,839
is how harmful a new congestion control

1510
01:04:15,839 --> 01:04:17,839
algorithm is to prevent prevalent

1511
01:04:17,839 --> 01:04:19,760
congestion control algorithms

1512
01:04:19,760 --> 01:04:22,000
so this they suggested that throughput

1513
01:04:22,000 --> 01:04:24,240
alone is not should not be used as a

1514
01:04:24,240 --> 01:04:26,160
performance metric developers should

1515
01:04:26,160 --> 01:04:29,520
also focus on various

1516
01:04:29,520 --> 01:04:31,760
uh performance metrics such as delay

1517
01:04:31,760 --> 01:04:35,520
loss and flow completion time

1518
01:04:35,599 --> 01:04:38,400
so the harm concept is practical seems

1519
01:04:38,400 --> 01:04:40,160
practical but its practical merit hasn't

1520
01:04:40,160 --> 01:04:42,319
been explored and demonstrated

1521
01:04:42,319 --> 01:04:44,400
because this requires more experiment

1522
01:04:44,400 --> 01:04:46,559
experimental data than the calculation

1523
01:04:46,559 --> 01:04:50,079
of jane's fairness index

1524
01:04:50,240 --> 01:04:51,440
so

1525
01:04:51,440 --> 01:04:53,839
we provide the first evaluation of using

1526
01:04:53,839 --> 01:04:56,640
a fairness metric versus using harm

1527
01:04:56,640 --> 01:04:58,559
with representatives congestion control

1528
01:04:58,559 --> 01:05:01,200
mechanisms

1529
01:05:02,799 --> 01:05:05,039
so the outline from now on first i will

1530
01:05:05,039 --> 01:05:07,119
introduce how to calculate harm

1531
01:05:07,119 --> 01:05:08,640
and then we'll present the

1532
01:05:08,640 --> 01:05:10,160
representation that is suitable for

1533
01:05:10,160 --> 01:05:12,799
comparison of harm and fairness metric

1534
01:05:12,799 --> 01:05:15,520
and also we'll introduce our measurement

1535
01:05:15,520 --> 01:05:18,799
setup and results

1536
01:05:20,799 --> 01:05:22,319
so the paper suggested many ways of

1537
01:05:22,319 --> 01:05:24,160
calculating harm the one that is fit for

1538
01:05:24,160 --> 01:05:26,400
deployment from from the high harm paper

1539
01:05:26,400 --> 01:05:30,160
uh dimension we suggest that if the harm

1540
01:05:30,160 --> 01:05:32,240
done by a new congestion control

1541
01:05:32,240 --> 01:05:34,640
algorithm alpha to a widely deployed

1542
01:05:34,640 --> 01:05:36,960
congestion control algorithm beta is

1543
01:05:36,960 --> 01:05:39,200
comparable or

1544
01:05:39,200 --> 01:05:41,359
or less than less than the harm done

1545
01:05:41,359 --> 01:05:43,520
when beta competes against beta we

1546
01:05:43,520 --> 01:05:47,599
should consider it acceptable to deploy

1547
01:05:47,680 --> 01:05:49,839
so based on this

1548
01:05:49,839 --> 01:05:52,000
we carry out two tests

1549
01:05:52,000 --> 01:05:54,880
for all our scenarios first

1550
01:05:54,880 --> 01:05:57,760
uh in the first test we use flow alpha a

1551
01:05:57,760 --> 01:05:59,680
new congestion mechanism competing with

1552
01:05:59,680 --> 01:06:00,960
flow beta

1553
01:06:00,960 --> 01:06:02,640
which is the baseline congestion

1554
01:06:02,640 --> 01:06:04,400
algorithm in the second test two

1555
01:06:04,400 --> 01:06:05,520
baseline

1556
01:06:05,520 --> 01:06:08,000
flows beta1 and beta2 competing with

1557
01:06:08,000 --> 01:06:09,680
each other

1558
01:06:09,680 --> 01:06:11,520
and we map uh

1559
01:06:11,520 --> 01:06:14,400
from a flow to specific measurements as

1560
01:06:14,400 --> 01:06:16,559
m column flow metric value

1561
01:06:16,559 --> 01:06:19,280
so we actually presented a linear

1562
01:06:19,280 --> 01:06:21,280
representation of the flow the equation

1563
01:06:21,280 --> 01:06:24,480
is available in our paper

1564
01:06:25,200 --> 01:06:27,598
and

1565
01:06:28,319 --> 01:06:32,440
it's this still old slide

1566
01:06:33,920 --> 01:06:36,960
anyway so uh so what we did we ran two

1567
01:06:36,960 --> 01:06:38,319
experiments

1568
01:06:38,319 --> 01:06:40,319
where experiment one has this alpha flow

1569
01:06:40,319 --> 01:06:41,200
and

1570
01:06:41,200 --> 01:06:42,960
uh versus beta flow

1571
01:06:42,960 --> 01:06:45,200
and the fairness matrix is calculated

1572
01:06:45,200 --> 01:06:47,680
from mf is calculated from m alpha and

1573
01:06:47,680 --> 01:06:48,640
beta

1574
01:06:48,640 --> 01:06:50,400
and from the experiment to where we have

1575
01:06:50,400 --> 01:06:52,319
beta 1 and beta 2 flow completing we

1576
01:06:52,319 --> 01:06:54,480
took m beta from experiment 1 and m beta

1577
01:06:54,480 --> 01:06:57,039
2 beta 1 from experiment 2 and

1578
01:06:57,039 --> 01:06:59,520
calculated the harm metric from here the

1579
01:06:59,520 --> 01:07:01,680
negative value uh

1580
01:07:01,680 --> 01:07:03,760
corresponds to alpha causing much more

1581
01:07:03,760 --> 01:07:07,760
harm to better where the positive values

1582
01:07:07,760 --> 01:07:09,599
represents better harms alpha when they

1583
01:07:09,599 --> 01:07:13,880
compete and zero means no harm

1584
01:07:14,079 --> 01:07:16,079
so our measurement setup has we run

1585
01:07:16,079 --> 01:07:19,520
experiments uh in uios teacup physical

1586
01:07:19,520 --> 01:07:21,200
testbed where we varied the link

1587
01:07:21,200 --> 01:07:22,480
capacity

1588
01:07:22,480 --> 01:07:24,960
to 10 25

1589
01:07:24,960 --> 01:07:28,559
50 75 and 100 megabits per second

1590
01:07:28,559 --> 01:07:30,640
and the round trip time was valid to 10

1591
01:07:30,640 --> 01:07:33,359
20 50 and 100 milliseconds and queue

1592
01:07:33,359 --> 01:07:35,359
size was set to half the bdp and the

1593
01:07:35,359 --> 01:07:37,920
full bdp for each bandwidth and delay

1594
01:07:37,920 --> 01:07:40,160
case

1595
01:07:40,559 --> 01:07:41,280
we

1596
01:07:41,280 --> 01:07:42,880
chose four different congestion

1597
01:07:42,880 --> 01:07:45,039
mechanisms uh based on their level of

1598
01:07:45,039 --> 01:07:47,599
aggression and the congestion signal

1599
01:07:47,599 --> 01:07:48,799
they use

1600
01:07:48,799 --> 01:07:50,880
the first one is renault that that is

1601
01:07:50,880 --> 01:07:52,640
very traditional and

1602
01:07:52,640 --> 01:07:53,680
and

1603
01:07:53,680 --> 01:07:55,039
then we show and that's the answer

1604
01:07:55,039 --> 01:07:57,920
loss-based mechanism then we chose cubic

1605
01:07:57,920 --> 01:07:59,760
which is more aggressive than renault

1606
01:07:59,760 --> 01:08:01,839
and also lost mechanism than bbr which

1607
01:08:01,839 --> 01:08:02,559
is

1608
01:08:02,559 --> 01:08:04,480
uh more aggressive than renault and

1609
01:08:04,480 --> 01:08:06,960
cubic and vegas which is the least

1610
01:08:06,960 --> 01:08:09,359
aggressive here and also and primarily a

1611
01:08:09,359 --> 01:08:12,319
delay-based mechanism

1612
01:08:14,880 --> 01:08:17,279
so results we show in three categories

1613
01:08:17,279 --> 01:08:19,040
we investigate harm metric for cubic

1614
01:08:19,040 --> 01:08:20,880
versus renault and cubic versus bbi

1615
01:08:20,880 --> 01:08:24,080
flows we investigate how the harm metric

1616
01:08:24,080 --> 01:08:25,279
behave

1617
01:08:25,279 --> 01:08:27,839
when we run a loss-based flow against a

1618
01:08:27,839 --> 01:08:30,560
delay-based flow and we share experience

1619
01:08:30,560 --> 01:08:32,158
whether the deployability of new

1620
01:08:32,158 --> 01:08:33,839
congestion control mechanisms could be

1621
01:08:33,839 --> 01:08:37,960
judged by a harm-based approach

1622
01:08:38,158 --> 01:08:40,399
so first thing we try to identify

1623
01:08:40,399 --> 01:08:43,198
eliminate scenarios where cubic falls

1624
01:08:43,198 --> 01:08:45,759
back to linear tcp like growth

1625
01:08:45,759 --> 01:08:48,319
the heat maps here show

1626
01:08:48,319 --> 01:08:50,399
the whole parameter space

1627
01:08:50,399 --> 01:08:53,520
where we found the interesting cases at

1628
01:08:53,520 --> 01:08:55,920
rtt when rtt is above 50 milliseconds

1629
01:08:55,920 --> 01:08:57,679
and capacity is greater than 75 megabits

1630
01:08:57,679 --> 01:08:59,920
per second where uh cubic doesn't fall

1631
01:08:59,920 --> 01:09:02,238
back to linear tcp like growth

1632
01:09:02,238 --> 01:09:04,719
uh in the and we cons we call this from

1633
01:09:04,719 --> 01:09:07,359
now on the high bdp scenario and in case

1634
01:09:07,359 --> 01:09:09,120
of low bdp scenario we found no

1635
01:09:09,120 --> 01:09:10,560
difference in

1636
01:09:10,560 --> 01:09:13,359
the fairness and harm because cubic

1637
01:09:13,359 --> 01:09:16,960
behaved similar to renault

1638
01:09:18,479 --> 01:09:20,479
so this is the result of harm versus

1639
01:09:20,479 --> 01:09:22,238
fairness distribution

1640
01:09:22,238 --> 01:09:24,000
of

1641
01:09:24,000 --> 01:09:26,238
cdf of image throughput values for

1642
01:09:26,238 --> 01:09:28,799
different alpha beta pairs

1643
01:09:28,799 --> 01:09:32,080
uh it could be seen that

1644
01:09:32,080 --> 01:09:37,679
the black line cubic does uh

1645
01:09:38,319 --> 01:09:41,120
moderate harm to renault

1646
01:09:41,120 --> 01:09:42,479
bbr does

1647
01:09:42,479 --> 01:09:44,719
significant harm to cubic whereas

1648
01:09:44,719 --> 01:09:47,719
renault

1649
01:09:48,640 --> 01:09:49,679
uh

1650
01:09:49,679 --> 01:09:51,120
harms the most

1651
01:09:51,120 --> 01:09:53,358
to

1652
01:10:00,840 --> 01:10:04,320
vegas damn it

1653
01:10:05,360 --> 01:10:06,719
all right my fault was preparing for the

1654
01:10:06,719 --> 01:10:07,840
next speaker and i clicked the wrong

1655
01:10:07,840 --> 01:10:10,880
button apologies safiq here you go

1656
01:10:10,880 --> 01:10:14,440
yeah noise

1657
01:10:29,199 --> 01:10:31,920
yeah so this shows uh

1658
01:10:31,920 --> 01:10:34,159
the harm metric for different

1659
01:10:34,159 --> 01:10:37,199
alpha versus beta pairs

1660
01:10:37,199 --> 01:10:39,920
and then we look at uh the relative harm

1661
01:10:39,920 --> 01:10:41,920
and fairness distribution we normalize

1662
01:10:41,920 --> 01:10:44,320
the uh

1663
01:10:44,320 --> 01:10:46,000
mf and mh

1664
01:10:46,000 --> 01:10:48,239
fairness and harm values

1665
01:10:48,239 --> 01:10:49,280
for

1666
01:10:49,280 --> 01:10:51,760
varied alpha cubic and beta renault

1667
01:10:51,760 --> 01:10:53,120
pairs

1668
01:10:53,120 --> 01:10:54,000
and

1669
01:10:54,000 --> 01:10:56,080
here it could be seen that

1670
01:10:56,080 --> 01:10:59,199
the image throughput and fairness metric

1671
01:10:59,199 --> 01:11:00,560
it's not

1672
01:11:00,560 --> 01:11:02,320
like obvious like to see the differences

1673
01:11:02,320 --> 01:11:04,960
here but if you look at the uh mhrt

1674
01:11:04,960 --> 01:11:08,400
metric the impact of cubic on renault is

1675
01:11:08,400 --> 01:11:09,840
uh

1676
01:11:09,840 --> 01:11:12,640
quite visible

1677
01:11:12,640 --> 01:11:14,560
when in case of

1678
01:11:14,560 --> 01:11:17,760
throughput metric it wasn't

1679
01:11:18,560 --> 01:11:20,800
and then we ran

1680
01:11:20,800 --> 01:11:23,120
the same test similar test with bbr

1681
01:11:23,120 --> 01:11:24,719
versus cubic pair

1682
01:11:24,719 --> 01:11:27,280
the impact of rtt is still there

1683
01:11:27,280 --> 01:11:28,960
but the uh

1684
01:11:28,960 --> 01:11:31,120
mfn image there is a pronounced gap in

1685
01:11:31,120 --> 01:11:33,520
between and

1686
01:11:33,520 --> 01:11:36,560
this is because

1687
01:11:36,560 --> 01:11:38,960
fairness is quantifying uh as

1688
01:11:38,960 --> 01:11:41,040
measurement as the equal capacity

1689
01:11:41,040 --> 01:11:43,199
sharing lengths in case of renault

1690
01:11:43,199 --> 01:11:45,120
competing with venno

1691
01:11:45,120 --> 01:11:47,280
it provides kind of better fairness when

1692
01:11:47,280 --> 01:11:49,600
cubic competes with cubic

1693
01:11:49,600 --> 01:11:51,520
it's not and

1694
01:11:51,520 --> 01:11:53,199
it's kind of cubic is a complex and

1695
01:11:53,199 --> 01:11:55,120
modal algorithm so that's why there is a

1696
01:11:55,120 --> 01:11:57,360
gap here

1697
01:11:57,360 --> 01:12:00,239
and then we run the same test

1698
01:12:00,239 --> 01:12:02,159
similar test with

1699
01:12:02,159 --> 01:12:04,400
and look at the normalized mf and image

1700
01:12:04,400 --> 01:12:05,840
values

1701
01:12:05,840 --> 01:12:08,239
and for the vegas alpha competing

1702
01:12:08,239 --> 01:12:09,760
against uh

1703
01:12:09,760 --> 01:12:11,920
renault better flow and this is across

1704
01:12:11,920 --> 01:12:14,880
the entire parameter space

1705
01:12:14,880 --> 01:12:15,840
and

1706
01:12:15,840 --> 01:12:19,120
the mf values is slight to the left

1707
01:12:19,120 --> 01:12:20,840
this is

1708
01:12:20,840 --> 01:12:23,760
because the unfairness issues in vegas

1709
01:12:23,760 --> 01:12:25,120
because a

1710
01:12:25,120 --> 01:12:26,960
simple delay-based mechanism has some

1711
01:12:26,960 --> 01:12:29,360
unfairness issues such as late camera

1712
01:12:29,360 --> 01:12:31,839
advantage

1713
01:12:32,960 --> 01:12:35,520
and finally we look at the case study of

1714
01:12:35,520 --> 01:12:37,520
absolute fairness and harm where we look

1715
01:12:37,520 --> 01:12:39,679
at two scenarios

1716
01:12:39,679 --> 01:12:41,040
that are relevant with regards to

1717
01:12:41,040 --> 01:12:42,719
deployment of new congestion control

1718
01:12:42,719 --> 01:12:44,320
algorithms

1719
01:12:44,320 --> 01:12:46,480
in the first scenario

1720
01:12:46,480 --> 01:12:48,400
we look at

1721
01:12:48,400 --> 01:12:51,440
the case where the introduction of cubic

1722
01:12:51,440 --> 01:12:52,880
in the prevalent

1723
01:12:52,880 --> 01:12:53,600
when

1724
01:12:53,600 --> 01:12:56,159
renault was

1725
01:12:56,480 --> 01:12:59,760
dominant and in the second scenario we

1726
01:12:59,760 --> 01:13:01,840
look at the case where bbr supersedes

1727
01:13:01,840 --> 01:13:04,560
cubic and then we calculate harm

1728
01:13:04,560 --> 01:13:05,840
metric from these

1729
01:13:05,840 --> 01:13:08,480
two values

1730
01:13:09,600 --> 01:13:12,239
where we take uh

1731
01:13:12,239 --> 01:13:15,199
m beta from experiment one and uh m

1732
01:13:15,199 --> 01:13:17,120
alpha from experiment two to calculate

1733
01:13:17,120 --> 01:13:18,960
hum metric

1734
01:13:18,960 --> 01:13:20,719
and then we look at the absolute

1735
01:13:20,719 --> 01:13:22,480
fairness and harm

1736
01:13:22,480 --> 01:13:24,800
throughput harm comparison between

1737
01:13:24,800 --> 01:13:27,440
alpha cubic petrino and alpha cubic

1738
01:13:27,440 --> 01:13:28,960
gamma bbr

1739
01:13:28,960 --> 01:13:31,440
in cases of high bdp scenarios

1740
01:13:31,440 --> 01:13:34,560
and we show the raw

1741
01:13:34,560 --> 01:13:36,000
harm values here

1742
01:13:36,000 --> 01:13:37,840
and it could be seen that bbr captures

1743
01:13:37,840 --> 01:13:39,360
more resources

1744
01:13:39,360 --> 01:13:41,679
than cubic captures

1745
01:13:41,679 --> 01:13:44,719
for renault than renault in all cases

1746
01:13:44,719 --> 01:13:47,600
and more specifically it shows that bbr

1747
01:13:47,600 --> 01:13:50,960
captures 1.6 times more resources for 50

1748
01:13:50,960 --> 01:13:53,600
of the cases

1749
01:13:54,480 --> 01:14:00,080
so to conclude uh we say that

1750
01:14:00,080 --> 01:14:01,360
an old slide

1751
01:14:01,360 --> 01:14:03,280
so we we applied the harm concept to

1752
01:14:03,280 --> 01:14:05,120
data produced from experiments and comp

1753
01:14:05,120 --> 01:14:06,960
with competing pairs of various tcp

1754
01:14:06,960 --> 01:14:08,960
variants we looked at four different tcp

1755
01:14:08,960 --> 01:14:10,800
variants based on their level of

1756
01:14:10,800 --> 01:14:12,320
aggression as well as different feedback

1757
01:14:12,320 --> 01:14:13,199
types

1758
01:14:13,199 --> 01:14:15,040
we presented a linear representation of

1759
01:14:15,040 --> 01:14:16,159
harm

1760
01:14:16,159 --> 01:14:18,480
to better assess differences between the

1761
01:14:18,480 --> 01:14:21,040
metrics we also illustrated the efficacy

1762
01:14:21,040 --> 01:14:23,120
of harm-based approach using experiment

1763
01:14:23,120 --> 01:14:24,239
result

1764
01:14:24,239 --> 01:14:25,600
that we showed

1765
01:14:25,600 --> 01:14:27,840
in future we plan to investigate

1766
01:14:27,840 --> 01:14:29,440
the efficacy of harm using other

1767
01:14:29,440 --> 01:14:31,600
performance metrics such as loss

1768
01:14:31,600 --> 01:14:33,199
so to conclude we say that the

1769
01:14:33,199 --> 01:14:34,880
harm-based approach is more useful to

1770
01:14:34,880 --> 01:14:37,040
assess whether a next-generation

1771
01:14:37,040 --> 01:14:39,040
congestion control mechanism is safely

1772
01:14:39,040 --> 01:14:42,159
deployable or not

1773
01:14:42,159 --> 01:14:44,880
all thank you very much

1774
01:14:44,880 --> 01:14:47,199
thank you very much

1775
01:14:47,199 --> 01:14:48,719
does anybody have a quick question they

1776
01:14:48,719 --> 01:14:50,000
want to ask

1777
01:14:50,000 --> 01:14:54,280
i'm going to try and recover some time

1778
01:14:56,800 --> 01:14:59,120
i'm going to ask you just a a quick

1779
01:14:59,120 --> 01:15:01,199
question here is um

1780
01:15:01,199 --> 01:15:03,760
so i i i think harm is gaining some

1781
01:15:03,760 --> 01:15:07,120
traction which is lovely to see

1782
01:15:09,120 --> 01:15:10,480
do you have any thoughts on on how to

1783
01:15:10,480 --> 01:15:14,400
evaluate this in the real world

1784
01:15:16,560 --> 01:15:18,239
in addition to the end so the analytical

1785
01:15:18,239 --> 01:15:20,000
tools are developing

1786
01:15:20,000 --> 01:15:21,440
um and and

1787
01:15:21,440 --> 01:15:23,280
you know at scale

1788
01:15:23,280 --> 01:15:24,880
small things tend to show up that don't

1789
01:15:24,880 --> 01:15:26,000
show up

1790
01:15:26,000 --> 01:15:29,199
at small scale or on paper

1791
01:15:29,199 --> 01:15:30,880
it's more of an open unfair question i

1792
01:15:30,880 --> 01:15:32,320
realize

1793
01:15:32,320 --> 01:15:34,960
that's a very good and good question to

1794
01:15:34,960 --> 01:15:36,560
understand so

1795
01:15:36,560 --> 01:15:40,159
i mean like this requires as i mentioned

1796
01:15:40,159 --> 01:15:42,239
many experiments the data

1797
01:15:42,239 --> 01:15:43,520
to test it

1798
01:15:43,520 --> 01:15:44,640
and

1799
01:15:44,640 --> 01:15:47,040
and harm itself is kinda complex to do

1800
01:15:47,040 --> 01:15:48,880
it because it's it's not easy to

1801
01:15:48,880 --> 01:15:49,840
calculate

1802
01:15:49,840 --> 01:15:51,520
and there are many many many approaches

1803
01:15:51,520 --> 01:15:52,960
presented in the paper to do it so we

1804
01:15:52,960 --> 01:15:55,199
chose the one that we found kind of

1805
01:15:55,199 --> 01:15:56,960
fitting for figuring out if it can be

1806
01:15:56,960 --> 01:15:58,400
safely deployed or not

1807
01:15:58,400 --> 01:15:59,920
so if you want to do it in real life

1808
01:15:59,920 --> 01:16:01,360
experiments we need more more

1809
01:16:01,360 --> 01:16:03,600
experiments and more data so if we can

1810
01:16:03,600 --> 01:16:06,080
do it it's it's possible to do it but

1811
01:16:06,080 --> 01:16:07,600
it's like okay it's it's like extra

1812
01:16:07,600 --> 01:16:09,440
traffic that you need to impose

1813
01:16:09,440 --> 01:16:11,120
to compare against thank you

1814
01:16:11,120 --> 01:16:13,360
thank you very much sephiroth very good

1815
01:16:13,360 --> 01:16:14,640
uh next up

1816
01:16:14,640 --> 01:16:17,600
jan yvang

1817
01:16:18,840 --> 01:16:21,199
fabulous thank you very much for the

1818
01:16:21,199 --> 01:16:23,120
brilliant presentation i i'd love to see

1819
01:16:23,120 --> 01:16:24,480
harm get more traction on a personal

1820
01:16:24,480 --> 01:16:26,159
level there was one more question i want

1821
01:16:26,159 --> 01:16:28,400
to ask i'm sorry question it's possible

1822
01:16:28,400 --> 01:16:29,600
sorry

1823
01:16:29,600 --> 01:16:31,040
no no please go ahead ask it quickly

1824
01:16:31,040 --> 01:16:33,120
you're here at the mic okay my name is

1825
01:16:33,120 --> 01:16:35,600
jose from amazon web service so i just

1826
01:16:35,600 --> 01:16:36,800
would like to have a simple

1827
01:16:36,800 --> 01:16:38,800
gratification question so when you

1828
01:16:38,800 --> 01:16:41,679
compare cubic cubic reno and renault and

1829
01:16:41,679 --> 01:16:43,760
renault do they have the same round

1830
01:16:43,760 --> 01:16:45,760
three time or do they have different

1831
01:16:45,760 --> 01:16:47,760
parameter time oh yeah we do the

1832
01:16:47,760 --> 01:16:49,440
experimental setups or settings like

1833
01:16:49,440 --> 01:16:51,760
they were like the same when we come

1834
01:16:51,760 --> 01:16:53,360
compare against right because like each

1835
01:16:53,360 --> 01:16:54,880
case they will be compared with the same

1836
01:16:54,880 --> 01:16:56,560
case scenario yeah otherwise like it's

1837
01:16:56,560 --> 01:16:58,960
going to be unfair right yeah i know but

1838
01:16:58,960 --> 01:17:01,040
this is because you know rain office

1839
01:17:01,040 --> 01:17:02,640
around the time drastically something

1840
01:17:02,640 --> 01:17:04,560
new you know two floats has a different

1841
01:17:04,560 --> 01:17:06,880
round three time the bundle share is

1842
01:17:06,880 --> 01:17:09,120
completely different but

1843
01:17:09,120 --> 01:17:10,800
on the other hand you know in the case

1844
01:17:10,800 --> 01:17:12,400
of in a cubic

1845
01:17:12,400 --> 01:17:14,159
uh the condition with growth doesn't

1846
01:17:14,159 --> 01:17:16,400
affect around the time very much so

1847
01:17:16,400 --> 01:17:19,040
that's that means it's not very it's

1848
01:17:19,040 --> 01:17:21,040
really difficult comparison between can

1849
01:17:21,040 --> 01:17:24,239
you think about comparing cubic and

1850
01:17:24,239 --> 01:17:27,120
you know for fairness that's my from my

1851
01:17:27,120 --> 01:17:28,320
point of view

1852
01:17:28,320 --> 01:17:30,000
specifically

1853
01:17:30,000 --> 01:17:31,120
i'm going to interrupt here and say

1854
01:17:31,120 --> 01:17:32,400
that's a fabulous question it's worth

1855
01:17:32,400 --> 01:17:34,159
thinking about cephacool and um i would

1856
01:17:34,159 --> 01:17:36,719
encourage you to interact offline

1857
01:17:36,719 --> 01:17:38,640
okay we'll take it offline thank you

1858
01:17:38,640 --> 01:17:40,080
very much

1859
01:17:40,080 --> 01:17:42,320
okay moving on cloud cross layer network

1860
01:17:42,320 --> 01:17:44,159
outage classification jan i believe

1861
01:17:44,159 --> 01:17:45,840
you're at the podium fabulous thank you

1862
01:17:45,840 --> 01:17:46,960
for joining

1863
01:17:46,960 --> 01:17:48,560
all yours

1864
01:17:48,560 --> 01:17:49,760
hello

1865
01:17:49,760 --> 01:17:51,679
let's see

1866
01:17:51,679 --> 01:17:53,920
hello everybody everybody my name is jan

1867
01:17:53,920 --> 01:17:56,880
marius evan i'm a phd student at the

1868
01:17:56,880 --> 01:17:59,120
oslo metropolitan university

1869
01:17:59,120 --> 01:18:00,800
and i'll be presenting this paper on

1870
01:18:00,800 --> 01:18:04,239
behalf of my research team at the

1871
01:18:04,239 --> 01:18:07,199
simula metropolitan

1872
01:18:07,199 --> 01:18:10,000
so the paper is called the

1873
01:18:10,000 --> 01:18:11,600
cross layer network outage

1874
01:18:11,600 --> 01:18:13,199
classification using machine learning

1875
01:18:13,199 --> 01:18:14,880
which should be

1876
01:18:14,880 --> 01:18:17,760
more or less self-explanatory

1877
01:18:17,760 --> 01:18:20,800
we want to classify network outages in

1878
01:18:20,800 --> 01:18:22,400
an ip network

1879
01:18:22,400 --> 01:18:25,760
using data collected from various

1880
01:18:25,760 --> 01:18:29,120
network layers using machine learning

1881
01:18:29,120 --> 01:18:31,599
methods

1882
01:18:31,920 --> 01:18:33,760
let's see yeah

1883
01:18:33,760 --> 01:18:36,400
so the paper focuses on the real world

1884
01:18:36,400 --> 01:18:37,520
challenges

1885
01:18:37,520 --> 01:18:39,679
or classifying network outages and

1886
01:18:39,679 --> 01:18:42,000
especially on providing

1887
01:18:42,000 --> 01:18:45,199
good feedback to network operations for

1888
01:18:45,199 --> 01:18:47,920
troubleshooting and to customer support

1889
01:18:47,920 --> 01:18:49,760
for informing

1890
01:18:49,760 --> 01:18:51,280
customers about

1891
01:18:51,280 --> 01:18:53,360
what actually happened

1892
01:18:53,360 --> 01:18:55,199
so my first

1893
01:18:55,199 --> 01:18:57,040
first i introduced the testbed and the

1894
01:18:57,040 --> 01:18:59,760
problem statement and then i'll in talk

1895
01:18:59,760 --> 01:19:03,360
about the methods and the data we used

1896
01:19:03,360 --> 01:19:07,799
and finally i'll present the results

1897
01:19:08,640 --> 01:19:10,159
so

1898
01:19:10,159 --> 01:19:11,760
the network that we use for this

1899
01:19:11,760 --> 01:19:14,320
analysis is a global network for quality

1900
01:19:14,320 --> 01:19:16,080
aware network

1901
01:19:16,080 --> 01:19:17,199
traffic

1902
01:19:17,199 --> 01:19:19,199
most of the customers here are

1903
01:19:19,199 --> 01:19:21,760
video conferencing users who need

1904
01:19:21,760 --> 01:19:24,320
very high quality video they're better

1905
01:19:24,320 --> 01:19:28,560
quality than the internet can provide

1906
01:19:28,560 --> 01:19:30,719
the network is

1907
01:19:30,719 --> 01:19:33,679
spanning four continents with

1908
01:19:33,679 --> 01:19:36,239
11 cities four in europe for three in

1909
01:19:36,239 --> 01:19:38,400
north america three nations one in

1910
01:19:38,400 --> 01:19:39,840
australia

1911
01:19:39,840 --> 01:19:42,719
and these cities are connected via least

1912
01:19:42,719 --> 01:19:43,520
like

1913
01:19:43,520 --> 01:19:45,360
lay two services from three different

1914
01:19:45,360 --> 01:19:47,360
providers for redundancy

1915
01:19:47,360 --> 01:19:49,840
this is uh talia cogent and equinix

1916
01:19:49,840 --> 01:19:53,520
providing these later networks

1917
01:19:53,520 --> 01:19:56,880
the network connections are relatively

1918
01:19:56,880 --> 01:19:59,600
low cost which also means that

1919
01:19:59,600 --> 01:20:02,000
the quality is

1920
01:20:02,000 --> 01:20:04,000
less than what you would expect from the

1921
01:20:04,000 --> 01:20:07,280
most expensive services

1922
01:20:09,199 --> 01:20:10,239
yeah

1923
01:20:10,239 --> 01:20:12,480
so our

1924
01:20:12,480 --> 01:20:14,320
research shows or

1925
01:20:14,320 --> 01:20:15,840
before we started researching we knew

1926
01:20:15,840 --> 01:20:17,440
that the network problems were quite

1927
01:20:17,440 --> 01:20:18,800
frequent

1928
01:20:18,800 --> 01:20:22,000
we analyzed two years of data and we

1929
01:20:22,000 --> 01:20:23,120
found

1930
01:20:23,120 --> 01:20:24,800
more than seven hundred thousand packet

1931
01:20:24,800 --> 01:20:26,639
loss incidents

1932
01:20:26,639 --> 01:20:30,000
this uh for this number every time we

1933
01:20:30,000 --> 01:20:32,480
during one minute measurement lost a

1934
01:20:32,480 --> 01:20:34,400
single packet we counted this as a

1935
01:20:34,400 --> 01:20:35,920
packet loss incidence

1936
01:20:35,920 --> 01:20:38,000
so even this large number of incidents

1937
01:20:38,000 --> 01:20:40,480
is actually within well within the

1938
01:20:40,480 --> 01:20:42,239
service level agreement for these

1939
01:20:42,239 --> 01:20:44,799
services

1940
01:20:45,360 --> 01:20:47,600
uh but of course not all of these turn

1941
01:20:47,600 --> 01:20:51,440
into support cases mostly because of

1942
01:20:51,440 --> 01:20:53,520
routing protocols that protected against

1943
01:20:53,520 --> 01:20:55,440
outages

1944
01:20:55,440 --> 01:20:58,239
but all together during that time period

1945
01:20:58,239 --> 01:21:01,880
with the operators saw

1946
01:21:01,880 --> 01:21:04,480
2855 customer support cases that were

1947
01:21:04,480 --> 01:21:07,679
related to network quality

1948
01:21:07,679 --> 01:21:09,679
and we found that out of this only

1949
01:21:09,679 --> 01:21:11,760
around 35 percent actually received a

1950
01:21:11,760 --> 01:21:14,159
proper response from customer service

1951
01:21:14,159 --> 01:21:17,280
regarding what was the actual problem

1952
01:21:17,280 --> 01:21:19,679
that happened and this this is a

1953
01:21:19,679 --> 01:21:21,230
far too low number so we

1954
01:21:21,230 --> 01:21:22,480
[Music]

1955
01:21:22,480 --> 01:21:23,840
that's why this

1956
01:21:23,840 --> 01:21:27,480
project was initiated

1957
01:21:28,159 --> 01:21:28,960
so

1958
01:21:28,960 --> 01:21:32,080
first we started collecting data

1959
01:21:32,080 --> 01:21:34,639
we used the snmp polling from all the

1960
01:21:34,639 --> 01:21:37,520
routers and switches to collect the

1961
01:21:37,520 --> 01:21:40,159
optical signal strength from

1962
01:21:40,159 --> 01:21:42,560
the links to the providers and

1963
01:21:42,560 --> 01:21:44,960
internal links

1964
01:21:44,960 --> 01:21:47,280
we also used snmp to collect interface

1965
01:21:47,280 --> 01:21:49,280
error counters and buffer overflow

1966
01:21:49,280 --> 01:21:51,840
counters

1967
01:21:51,840 --> 01:21:54,719
and we got access to all the information

1968
01:21:54,719 --> 01:21:57,120
about software crash logs

1969
01:21:57,120 --> 01:22:00,239
we actually noticed the 62

1970
01:22:00,239 --> 01:22:04,000
instances of core dumps in the

1971
01:22:04,000 --> 01:22:04,640
in the

1972
01:22:04,640 --> 01:22:07,810
[Music]

1973
01:22:08,080 --> 01:22:10,080
in the management plane of these routers

1974
01:22:10,080 --> 01:22:11,840
and switches

1975
01:22:11,840 --> 01:22:14,320
and surprisingly none of those actually

1976
01:22:14,320 --> 01:22:17,440
led to any customer complaints

1977
01:22:17,440 --> 01:22:19,280
we also got access to the configuration

1978
01:22:19,280 --> 01:22:21,199
change logs which was an early

1979
01:22:21,199 --> 01:22:22,880
hypothesis that the configuration

1980
01:22:22,880 --> 01:22:24,560
changes made

1981
01:22:24,560 --> 01:22:27,040
problems

1982
01:22:27,120 --> 01:22:29,360
but in the end we

1983
01:22:29,360 --> 01:22:31,520
found that we needed more data

1984
01:22:31,520 --> 01:22:33,280
so we set up

1985
01:22:33,280 --> 01:22:34,400
bfd

1986
01:22:34,400 --> 01:22:36,840
logging bfd is a binary

1987
01:22:36,840 --> 01:22:39,040
forwarding bidirectional for the

1988
01:22:39,040 --> 01:22:41,199
detection protocol quite a lightweight

1989
01:22:41,199 --> 01:22:43,520
protocol that's implemented on all these

1990
01:22:43,520 --> 01:22:44,880
routers

1991
01:22:44,880 --> 01:22:46,000
it's

1992
01:22:46,000 --> 01:22:47,679
usually implemented on the interface

1993
01:22:47,679 --> 01:22:50,000
cards so it doesn't stress the cpu in

1994
01:22:50,000 --> 01:22:51,199
the router

1995
01:22:51,199 --> 01:22:53,360
and in this case it was actually already

1996
01:22:53,360 --> 01:22:56,080
implemented and in use for

1997
01:22:56,080 --> 01:22:58,159
for the higher level protocols

1998
01:22:58,159 --> 01:22:59,280
it's uh

1999
01:22:59,280 --> 01:23:00,880
it actually provides

2000
01:23:00,880 --> 01:23:01,760
a

2001
01:23:01,760 --> 01:23:03,540
very simple

2002
01:23:03,540 --> 01:23:04,800
[Music]

2003
01:23:04,800 --> 01:23:07,679
measurement it's sending packets and it

2004
01:23:07,679 --> 01:23:10,400
triggers the an event if uh packets are

2005
01:23:10,400 --> 01:23:12,400
not received

2006
01:23:12,400 --> 01:23:13,280
and

2007
01:23:13,280 --> 01:23:15,520
this improves the failover times for for

2008
01:23:15,520 --> 01:23:19,400
higher protocols like isis

2009
01:23:20,080 --> 01:23:21,440
um

2010
01:23:21,440 --> 01:23:24,159
after and we also set up layer 2 packet

2011
01:23:24,159 --> 01:23:25,440
loss

2012
01:23:25,440 --> 01:23:27,120
and layer 3 packet loss measurements

2013
01:23:27,120 --> 01:23:28,639
using udp ping

2014
01:23:28,639 --> 01:23:30,719
this required quite a lot of

2015
01:23:30,719 --> 01:23:32,480
virtual machines set up

2016
01:23:32,480 --> 01:23:35,920
quite high cpu usage compared to the vfd

2017
01:23:35,920 --> 01:23:38,159
protocols that were very easy where data

2018
01:23:38,159 --> 01:23:39,679
was very easy to

2019
01:23:39,679 --> 01:23:42,000
generate easy to process and easy to

2020
01:23:42,000 --> 01:23:45,280
store in a centralized location

2021
01:23:46,800 --> 01:23:48,320
yeah and then in addition to this data

2022
01:23:48,320 --> 01:23:49,920
we got access to the customer complaints

2023
01:23:49,920 --> 01:23:52,719
data anonymized of course and to the

2024
01:23:52,719 --> 01:23:56,480
customer support responses to those

2025
01:23:56,960 --> 01:23:59,360
cases

2026
01:24:00,639 --> 01:24:02,880
first we created a tool to visualize all

2027
01:24:02,880 --> 01:24:04,239
the data

2028
01:24:04,239 --> 01:24:06,239
this data was very useful both for the

2029
01:24:06,239 --> 01:24:07,760
network operation center and for the

2030
01:24:07,760 --> 01:24:09,600
customer support

2031
01:24:09,600 --> 01:24:12,639
but it required a lot of

2032
01:24:12,639 --> 01:24:14,960
training and a lot of manual pattern

2033
01:24:14,960 --> 01:24:17,120
recognition to to recognize

2034
01:24:17,120 --> 01:24:19,280
what data is actually

2035
01:24:19,280 --> 01:24:20,880
wrong what happened

2036
01:24:20,880 --> 01:24:22,960
what what was the cause of these

2037
01:24:22,960 --> 01:24:25,199
customer complaints

2038
01:24:25,199 --> 01:24:28,239
and this is obviously a case for

2039
01:24:28,239 --> 01:24:30,400
machine learning pattern recognition

2040
01:24:30,400 --> 01:24:32,400
so then we

2041
01:24:32,400 --> 01:24:34,800
initiated a machine learning program to

2042
01:24:34,800 --> 01:24:37,360
try and use this data to

2043
01:24:37,360 --> 01:24:40,880
automatically classify

2044
01:24:42,840 --> 01:24:46,080
outages the first step in this process

2045
01:24:46,080 --> 01:24:47,360
was to

2046
01:24:47,360 --> 01:24:49,280
do an in-depth analysis of all the

2047
01:24:49,280 --> 01:24:50,719
outages

2048
01:24:50,719 --> 01:24:53,199
or all the customer cases where

2049
01:24:53,199 --> 01:24:56,639
customers complained about all features

2050
01:24:56,639 --> 01:25:00,880
and uh we identified the

2051
01:25:00,880 --> 01:25:02,480
root cause of all the

2052
01:25:02,480 --> 01:25:05,120
complaints and i identified what sort of

2053
01:25:05,120 --> 01:25:07,840
data was most useful to uh

2054
01:25:07,840 --> 01:25:11,120
to finding the root cause

2055
01:25:11,120 --> 01:25:13,520
uh from this list you can see that

2056
01:25:13,520 --> 01:25:16,560
multiple or outages in multiple two

2057
01:25:16,560 --> 01:25:19,199
providers at the same time tops the list

2058
01:25:19,199 --> 01:25:20,960
and the reason for that is that out

2059
01:25:20,960 --> 01:25:23,440
there just in a single provider usually

2060
01:25:23,440 --> 01:25:25,040
didn't cause any

2061
01:25:25,040 --> 01:25:26,639
customer complaints because the routing

2062
01:25:26,639 --> 01:25:28,639
protocols are quite good at

2063
01:25:28,639 --> 01:25:30,880
rerouting in those cases

2064
01:25:30,880 --> 01:25:32,480
we can also see that most of these

2065
01:25:32,480 --> 01:25:36,638
outages were caused by layer 2 issues

2066
01:25:38,880 --> 01:25:40,800
so yeah just a very very quick

2067
01:25:40,800 --> 01:25:42,159
introduction i guess everybody knows

2068
01:25:42,159 --> 01:25:43,600
machine learning

2069
01:25:43,600 --> 01:25:44,719
basic

2070
01:25:44,719 --> 01:25:46,719
but for completeness

2071
01:25:46,719 --> 01:25:48,480
basic goal of machine learning is to

2072
01:25:48,480 --> 01:25:50,960
take a lot of data points and divide

2073
01:25:50,960 --> 01:25:53,520
them into two groups

2074
01:25:53,520 --> 01:25:56,000
these the data posts in this uh

2075
01:25:56,000 --> 01:25:58,000
case are of course multi-dimensional

2076
01:25:58,000 --> 01:26:00,159
with lots of

2077
01:26:00,159 --> 01:26:02,480
data input and uh

2078
01:26:02,480 --> 01:26:03,600
the

2079
01:26:03,600 --> 01:26:04,960
process is

2080
01:26:04,960 --> 01:26:07,199
run multiple times to create multiple

2081
01:26:07,199 --> 01:26:08,800
classes

2082
01:26:08,800 --> 01:26:11,520
we use the support vector machine method

2083
01:26:11,520 --> 01:26:14,159
which is basically as you see from the

2084
01:26:14,159 --> 01:26:16,400
diagram here it transforms the data

2085
01:26:16,400 --> 01:26:18,000
so that the decision boundary is as big

2086
01:26:18,000 --> 01:26:21,920
as possible the dotted lines

2087
01:26:21,920 --> 01:26:24,000
this method is more

2088
01:26:24,000 --> 01:26:26,400
useful at classifying

2089
01:26:26,400 --> 01:26:28,639
new data that it hasn't seen before

2090
01:26:28,639 --> 01:26:30,480
and it's less susceptible to the machine

2091
01:26:30,480 --> 01:26:34,839
learning problem of overfitting

2092
01:26:36,320 --> 01:26:37,520
so

2093
01:26:37,520 --> 01:26:40,080
what we found was that a two-stage

2094
01:26:40,080 --> 01:26:42,000
machine learning process was the optimal

2095
01:26:42,000 --> 01:26:44,400
solution for this case

2096
01:26:44,400 --> 01:26:47,280
in the first stage we identified the

2097
01:26:47,280 --> 01:26:48,960
most common outages which relate to

2098
01:26:48,960 --> 01:26:52,000
voltages using bfd data only

2099
01:26:52,000 --> 01:26:55,520
pft is very easy to

2100
01:26:55,520 --> 01:26:58,320
to collect as mentioned and it's

2101
01:26:58,320 --> 01:27:01,040
got very little impact on any

2102
01:27:01,040 --> 01:27:03,520
equipment or any network

2103
01:27:03,520 --> 01:27:04,719
and

2104
01:27:04,719 --> 01:27:06,719
for many real life implementations this

2105
01:27:06,719 --> 01:27:08,960
might actually be good enough for uh

2106
01:27:08,960 --> 01:27:11,520
to do even for smaller operators with

2107
01:27:11,520 --> 01:27:13,120
little resources

2108
01:27:13,120 --> 01:27:15,840
collecting bfd trap data and then

2109
01:27:15,840 --> 01:27:19,600
analyzing them would be a good idea

2110
01:27:19,600 --> 01:27:21,600
and then but of course

2111
01:27:21,600 --> 01:27:24,639
bfd being a layer to protocol it could

2112
01:27:24,639 --> 01:27:26,800
not detect all

2113
01:27:26,800 --> 01:27:28,239
types outages

2114
01:27:28,239 --> 01:27:30,560
or root causes

2115
01:27:30,560 --> 01:27:32,880
so then we added the udp ping data both

2116
01:27:32,880 --> 01:27:35,760
lay two and layer three eurips big data

2117
01:27:35,760 --> 01:27:37,760
and we managed to

2118
01:27:37,760 --> 01:27:38,880
do a very

2119
01:27:38,880 --> 01:27:40,880
quite quite good classification of all

2120
01:27:40,880 --> 01:27:43,199
the other courses as well

2121
01:27:43,199 --> 01:27:44,800
and this

2122
01:27:44,800 --> 01:27:47,760
with this data it's much more

2123
01:27:47,760 --> 01:27:49,920
it's much harder to collect the data it

2124
01:27:49,920 --> 01:27:52,719
requires a lot of virtual machines it

2125
01:27:52,719 --> 01:27:55,679
it requires a lot of cpu processing to

2126
01:27:55,679 --> 01:27:57,760
actually collect the data while the

2127
01:27:57,760 --> 01:28:00,000
entire machine learning process to

2128
01:28:00,000 --> 01:28:01,840
classify them as fast it took less than

2129
01:28:01,840 --> 01:28:05,280
one second to classify a case

2130
01:28:08,000 --> 01:28:08,719
so

2131
01:28:08,719 --> 01:28:12,080
on to the results of the classification

2132
01:28:12,080 --> 01:28:14,480
on the left here we see the

2133
01:28:14,480 --> 01:28:17,199
first stage classification

2134
01:28:17,199 --> 01:28:18,320
we used

2135
01:28:18,320 --> 01:28:21,040
75 of all the data for training our

2136
01:28:21,040 --> 01:28:23,280
machine learning systems and we then

2137
01:28:23,280 --> 01:28:25,040
tested the machine learning system on

2138
01:28:25,040 --> 01:28:26,719
the remaining 25

2139
01:28:26,719 --> 01:28:29,120
and recorded the success rates in

2140
01:28:29,120 --> 01:28:31,199
classifying those

2141
01:28:31,199 --> 01:28:32,719
and a

2142
01:28:32,719 --> 01:28:35,360
perfect classification would be 100 on

2143
01:28:35,360 --> 01:28:38,400
all the diagonal cells

2144
01:28:38,400 --> 01:28:40,639
so we see here on the left that it had a

2145
01:28:40,639 --> 01:28:45,440
very good accuracy where it worked and

2146
01:28:45,440 --> 01:28:49,919
for the other non-layer two cases it

2147
01:28:50,000 --> 01:28:52,400
it needed the second step

2148
01:28:52,400 --> 01:28:53,920
and there we

2149
01:28:53,920 --> 01:28:55,280
removed all the

2150
01:28:55,280 --> 01:28:57,600
ones where the first

2151
01:28:57,600 --> 01:29:00,480
stage was successful and we also removed

2152
01:29:00,480 --> 01:29:01,520
where

2153
01:29:01,520 --> 01:29:02,400
the

2154
01:29:02,400 --> 01:29:04,080
the issue was obviously on the customer

2155
01:29:04,080 --> 01:29:04,880
side

2156
01:29:04,880 --> 01:29:06,880
so there were no no errors detected

2157
01:29:06,880 --> 01:29:08,080
anywhere

2158
01:29:08,080 --> 01:29:10,719
and then we can come up with the results

2159
01:29:10,719 --> 01:29:11,920
on the right

2160
01:29:11,920 --> 01:29:13,600
they're not quite as good

2161
01:29:13,600 --> 01:29:15,920
but uh and the reason for this is that

2162
01:29:15,920 --> 01:29:17,840
some of these

2163
01:29:17,840 --> 01:29:20,560
root causes have um

2164
01:29:20,560 --> 01:29:22,480
have very similar symptoms like it's

2165
01:29:22,480 --> 01:29:24,480
very hard for uh

2166
01:29:24,480 --> 01:29:27,040
by just looking at the symptoms only

2167
01:29:27,040 --> 01:29:29,280
to to see the difference between

2168
01:29:29,280 --> 01:29:30,719
equipment maintenance and equipment

2169
01:29:30,719 --> 01:29:34,199
failure for instance

2170
01:29:38,880 --> 01:29:39,679
so

2171
01:29:39,679 --> 01:29:41,120
to summarize

2172
01:29:41,120 --> 01:29:42,400
machine learning

2173
01:29:42,400 --> 01:29:44,239
proved to be very well suited to

2174
01:29:44,239 --> 01:29:47,120
classifying outages in this network

2175
01:29:47,120 --> 01:29:49,760
and using bfds and mp traps to log the

2176
01:29:49,760 --> 01:29:52,719
layer 2 events was also very useful

2177
01:29:52,719 --> 01:29:54,080
but we needed the udp packet

2178
01:29:54,080 --> 01:29:56,320
measurements to classify problems in the

2179
01:29:56,320 --> 01:29:58,960
other layers

2180
01:30:00,000 --> 01:30:00,719
so

2181
01:30:00,719 --> 01:30:02,880
then

2182
01:30:04,719 --> 01:30:08,159
any questions free on

2183
01:30:12,800 --> 01:30:15,840
so i i will note um very quickly so that

2184
01:30:15,840 --> 01:30:18,080
we can move on um being machine learning

2185
01:30:18,080 --> 01:30:20,800
in in a network capacity

2186
01:30:20,800 --> 01:30:23,040
it's still some proving there's a bit of

2187
01:30:23,040 --> 01:30:26,639
a proving ground here um

2188
01:30:28,880 --> 01:30:30,159
people are always uncomfortable with

2189
01:30:30,159 --> 01:30:32,400
what they don't fully understand uh and

2190
01:30:32,400 --> 01:30:35,040
in the networking space this is only

2191
01:30:35,040 --> 01:30:38,719
more important of course right because

2192
01:30:38,719 --> 01:30:40,159
i think we all recognize that this is

2193
01:30:40,159 --> 01:30:43,360
sort of a crucial service that we run

2194
01:30:43,360 --> 01:30:44,960
um do you have a sense of where this

2195
01:30:44,960 --> 01:30:48,000
might go wrong

2196
01:30:48,000 --> 01:30:49,679
yeah well um

2197
01:30:49,679 --> 01:30:54,080
yeah that question is uh

2198
01:30:54,960 --> 01:30:57,600
the nice things about our setup here is

2199
01:30:57,600 --> 01:30:58,719
that it

2200
01:30:58,719 --> 01:31:00,840
has very little impact on the actual

2201
01:31:00,840 --> 01:31:03,520
network there's no

2202
01:31:03,520 --> 01:31:05,600
automatic decisions made based on

2203
01:31:05,600 --> 01:31:07,600
machine learning there's very little

2204
01:31:07,600 --> 01:31:10,560
configuration changes to the equipment

2205
01:31:10,560 --> 01:31:12,320
all these protocols

2206
01:31:12,320 --> 01:31:14,320
all the events created by the protocols

2207
01:31:14,320 --> 01:31:17,040
were already in use they were used by by

2208
01:31:17,040 --> 01:31:18,719
the isis protocol

2209
01:31:18,719 --> 01:31:21,760
the excellent protocols to

2210
01:31:21,760 --> 01:31:24,320
make decisions about fast rerouting

2211
01:31:24,320 --> 01:31:25,760
the only thing we needed to do was to

2212
01:31:25,760 --> 01:31:27,840
actually send snmp traps when something

2213
01:31:27,840 --> 01:31:29,440
happened

2214
01:31:29,440 --> 01:31:32,719
and that's a fair point to me

2215
01:31:36,080 --> 01:31:37,199
sorry go ahead

2216
01:31:37,199 --> 01:31:39,360
yeah uh and also the

2217
01:31:39,360 --> 01:31:41,760
main outputs for this was information

2218
01:31:41,760 --> 01:31:42,719
for

2219
01:31:42,719 --> 01:31:44,320
the network operations center and the

2220
01:31:44,320 --> 01:31:46,960
customer support centers to to provide

2221
01:31:46,960 --> 01:31:48,400
manual

2222
01:31:48,400 --> 01:31:50,719
help in troubleshooting

2223
01:31:50,719 --> 01:31:53,679
things and to inform customers

2224
01:31:53,679 --> 01:31:55,679
when somebody calls in and you you can

2225
01:31:55,679 --> 01:31:57,920
tell them immediately yes we see the

2226
01:31:57,920 --> 01:31:59,760
problem we know more or less what it is

2227
01:31:59,760 --> 01:32:01,679
that's a much much better customer

2228
01:32:01,679 --> 01:32:03,520
experience than if you say

2229
01:32:03,520 --> 01:32:05,840
uh yeah we don't know what happened uh

2230
01:32:05,840 --> 01:32:07,520
we'll we'll let you know once we know

2231
01:32:07,520 --> 01:32:09,440
something that's uh not a very good

2232
01:32:09,440 --> 01:32:10,800
answer

2233
01:32:10,800 --> 01:32:12,400
fair point to make thank you very much

2234
01:32:12,400 --> 01:32:13,679
jan

2235
01:32:13,679 --> 01:32:16,800
uh ator are you in the room

2236
01:32:16,800 --> 01:32:19,520
or remote

2237
01:32:20,080 --> 01:32:21,600
i believe that's you just passed by the

2238
01:32:21,600 --> 01:32:23,600
mic

2239
01:32:23,600 --> 01:32:26,639
you have control thank you yeah here can

2240
01:32:26,639 --> 01:32:27,920
you all hear me

2241
01:32:27,920 --> 01:32:29,600
yep yep oh good

2242
01:32:29,600 --> 01:32:31,840
all right

2243
01:32:32,639 --> 01:32:35,679
okay um so hi good morning everyone

2244
01:32:35,679 --> 01:32:37,280
thank you all for coming

2245
01:32:37,280 --> 01:32:40,000
my name is aitor martin i come from the

2246
01:32:40,000 --> 01:32:42,560
university of stamanger in norway

2247
01:32:42,560 --> 01:32:44,880
and i'm here to present our work

2248
01:32:44,880 --> 01:32:47,679
titled on the suitability of bbr

2249
01:32:47,679 --> 01:32:49,360
congestion control

2250
01:32:49,360 --> 01:32:53,880
for quick over geos.com networks

2251
01:32:54,639 --> 01:32:56,400
so i'm going to start with a little

2252
01:32:56,400 --> 01:32:59,839
introduction on the topic

2253
01:33:00,639 --> 01:33:02,880
so the first thing we want to say is

2254
01:33:02,880 --> 01:33:04,560
that geosynchronous satellite

2255
01:33:04,560 --> 01:33:07,040
communication networks are becoming

2256
01:33:07,040 --> 01:33:11,120
interesting um items to provide um

2257
01:33:11,120 --> 01:33:12,080
satellite

2258
01:33:12,080 --> 01:33:15,679
broadband connectivity in many 5d and 60

2259
01:33:15,679 --> 01:33:17,920
use cases that use satellites for

2260
01:33:17,920 --> 01:33:20,840
backhauling purposes or hybrid schemes

2261
01:33:20,840 --> 01:33:24,320
etc and in parallel we're witnessing how

2262
01:33:24,320 --> 01:33:27,520
um the transport layer is um going

2263
01:33:27,520 --> 01:33:29,440
through some breakthrough and we're

2264
01:33:29,440 --> 01:33:32,880
seeing quick being standardized and

2265
01:33:32,880 --> 01:33:35,920
deployed and developed further and we're

2266
01:33:35,920 --> 01:33:38,159
also seeing how modern conjunction

2267
01:33:38,159 --> 01:33:40,960
control is also being worked on uh

2268
01:33:40,960 --> 01:33:44,080
mainly with bbr condition control

2269
01:33:44,080 --> 01:33:45,440
so in this

2270
01:33:45,440 --> 01:33:48,719
um with this ecosystem here we're seeing

2271
01:33:48,719 --> 01:33:51,600
how there is more and more um

2272
01:33:51,600 --> 01:33:55,040
quick traffic on the web and we expect

2273
01:33:55,040 --> 01:33:57,360
more quick traffic going through uh

2274
01:33:57,360 --> 01:33:59,440
satellite networks so this is where we

2275
01:33:59,440 --> 01:34:01,759
stand

2276
01:34:02,480 --> 01:34:05,360
so why is this important here um

2277
01:34:05,360 --> 01:34:07,360
so um there are some challenges that

2278
01:34:07,360 --> 01:34:09,760
satellite networks introduce

2279
01:34:09,760 --> 01:34:12,080
for the transport layer and we have

2280
01:34:12,080 --> 01:34:15,120
mainly uh long propagation delay we have

2281
01:34:15,120 --> 01:34:16,960
propagation errors as well and we also

2282
01:34:16,960 --> 01:34:20,159
have likely bandwidth asymmetry

2283
01:34:20,159 --> 01:34:21,280
on the link

2284
01:34:21,280 --> 01:34:22,800
and well

2285
01:34:22,800 --> 01:34:25,520
tcp traffic is usually optimized for

2286
01:34:25,520 --> 01:34:28,239
satellite links using the performance

2287
01:34:28,239 --> 01:34:31,199
enhancing proxies that you might know

2288
01:34:31,199 --> 01:34:32,639
called peps

2289
01:34:32,639 --> 01:34:33,679
however

2290
01:34:33,679 --> 01:34:36,639
unless some network-assisted solution is

2291
01:34:36,639 --> 01:34:38,880
introduced such as mask

2292
01:34:38,880 --> 01:34:39,679
um

2293
01:34:39,679 --> 01:34:42,800
quick cannot use pipes because

2294
01:34:42,800 --> 01:34:44,639
quick headers are encrypted

2295
01:34:44,639 --> 01:34:47,600
so um the problem here is that many

2296
01:34:47,600 --> 01:34:50,400
studies have looked into tcp with pep

2297
01:34:50,400 --> 01:34:51,920
um and

2298
01:34:51,920 --> 01:34:53,920
it has been shown that

2299
01:34:53,920 --> 01:34:57,280
tcp with peps really greatly outperforms

2300
01:34:57,280 --> 01:34:59,679
quick right now even with quick fast

2301
01:34:59,679 --> 01:35:01,920
handshake and

2302
01:35:01,920 --> 01:35:04,080
quick really falls behind so there's

2303
01:35:04,080 --> 01:35:07,199
been raising interest into looking into

2304
01:35:07,199 --> 01:35:11,678
improving quick for this satcom usgate

2305
01:35:12,719 --> 01:35:13,520
so

2306
01:35:13,520 --> 01:35:14,880
in this context we're going to look into

2307
01:35:14,880 --> 01:35:17,199
the general performance of bbr over

2308
01:35:17,199 --> 01:35:18,560
satcom

2309
01:35:18,560 --> 01:35:21,199
um and with quick of course and we're

2310
01:35:21,199 --> 01:35:23,119
also going to look into aspects such as

2311
01:35:23,119 --> 01:35:25,280
fairness and we're also going to look

2312
01:35:25,280 --> 01:35:27,040
into these

2313
01:35:27,040 --> 01:35:29,119
items that i mentioned like packet loss

2314
01:35:29,119 --> 01:35:31,760
bank with symmetry and also how the

2315
01:35:31,760 --> 01:35:33,840
quick implementation choice makes a

2316
01:35:33,840 --> 01:35:36,480
difference here

2317
01:35:38,400 --> 01:35:40,719
so now for some background

2318
01:35:40,719 --> 01:35:42,480
these are the three main properties that

2319
01:35:42,480 --> 01:35:44,400
i mentioned about the satellite links

2320
01:35:44,400 --> 01:35:46,639
and we have a long round trip time that

2321
01:35:46,639 --> 01:35:50,159
implies a longer protocol feedback which

2322
01:35:50,159 --> 01:35:52,639
affects the transport layer and on many

2323
01:35:52,639 --> 01:35:55,760
different aspects and it is also implies

2324
01:35:55,760 --> 01:35:57,199
a higher

2325
01:35:57,199 --> 01:35:59,199
bandwidth delay product which implies

2326
01:35:59,199 --> 01:36:01,280
also larger buffers

2327
01:36:01,280 --> 01:36:04,000
then we also have propagation errors and

2328
01:36:04,000 --> 01:36:06,400
um finally the the bandwidth asymmetry

2329
01:36:06,400 --> 01:36:08,000
that i mentioned this bandwidth

2330
01:36:08,000 --> 01:36:10,639
asymmetry can be especially problematic

2331
01:36:10,639 --> 01:36:13,920
if the uplink gets congested and

2332
01:36:13,920 --> 01:36:15,360
axe cannot

2333
01:36:15,360 --> 01:36:17,520
reach the sender smoothly this can

2334
01:36:17,520 --> 01:36:20,239
really limit the for forward throughput

2335
01:36:20,239 --> 01:36:22,840
performance

2336
01:36:22,840 --> 01:36:26,320
so so there have been a lot of proposals

2337
01:36:26,320 --> 01:36:29,040
on this area to try to improve quick

2338
01:36:29,040 --> 01:36:31,199
and i'm not going to go into them but i

2339
01:36:31,199 --> 01:36:33,600
want to make clear that we're focused on

2340
01:36:33,600 --> 01:36:37,080
looking into bbr

2341
01:36:38,320 --> 01:36:41,920
so um just quickly talk about bbr bbr

2342
01:36:41,920 --> 01:36:44,400
what bbr does is it measures the

2343
01:36:44,400 --> 01:36:46,880
bottlenock bandwidth and round trip time

2344
01:36:46,880 --> 01:36:49,280
on the link in order to find an optimal

2345
01:36:49,280 --> 01:36:52,080
sending rate that tries to maximize the

2346
01:36:52,080 --> 01:36:53,440
use of the link

2347
01:36:53,440 --> 01:36:56,880
while keeping the the path rt as low as

2348
01:36:56,880 --> 01:36:58,080
possible

2349
01:36:58,080 --> 01:36:58,880
um

2350
01:36:58,880 --> 01:37:00,719
and well bbr have been shown to do

2351
01:37:00,719 --> 01:37:03,199
really well in many use cases um when

2352
01:37:03,199 --> 01:37:05,199
compared to kubic especially when there

2353
01:37:05,199 --> 01:37:07,440
is losses on the path

2354
01:37:07,440 --> 01:37:09,920
etc however

2355
01:37:09,920 --> 01:37:11,360
there are some issues that have been

2356
01:37:11,360 --> 01:37:14,880
found with bbr that are related to

2357
01:37:14,880 --> 01:37:16,719
mainly fairness

2358
01:37:16,719 --> 01:37:19,199
it has been shown that bbr flows

2359
01:37:19,199 --> 01:37:21,520
can be quite unfair against each other

2360
01:37:21,520 --> 01:37:24,960
and also pbr flows can really be quite

2361
01:37:24,960 --> 01:37:26,560
aggressive towards

2362
01:37:26,560 --> 01:37:28,560
loss-based condition control such as

2363
01:37:28,560 --> 01:37:33,280
cubic um as well as rtt unfairness

2364
01:37:33,440 --> 01:37:35,840
so uh with after this there was an

2365
01:37:35,840 --> 01:37:39,760
update to bvr and bbr2 uh that tried to

2366
01:37:39,760 --> 01:37:42,960
fix these issues tried to make bbr a

2367
01:37:42,960 --> 01:37:46,000
little less aggressive while keeping

2368
01:37:46,000 --> 01:37:49,280
performance high and this was made by

2369
01:37:49,280 --> 01:37:52,239
making bbr react to to packet loss and

2370
01:37:52,239 --> 01:37:54,719
explicit congestion notification and

2371
01:37:54,719 --> 01:37:58,159
among other improvements

2372
01:37:58,639 --> 01:38:00,480
and there have been

2373
01:38:00,480 --> 01:38:03,119
a wide range of research papers into

2374
01:38:03,119 --> 01:38:05,920
this looking into both vr versions and

2375
01:38:05,920 --> 01:38:08,560
comparing different condition control

2376
01:38:08,560 --> 01:38:09,440
and

2377
01:38:09,440 --> 01:38:11,360
but we saw that there was no paper

2378
01:38:11,360 --> 01:38:14,719
looking into the latest version of pbr

2379
01:38:14,719 --> 01:38:16,960
with quick and oversat so this is where

2380
01:38:16,960 --> 01:38:20,719
we stepped in with our research

2381
01:38:22,400 --> 01:38:24,880
so um now we're going to show you the

2382
01:38:24,880 --> 01:38:28,960
experimental setup that we built um

2383
01:38:29,360 --> 01:38:32,480
yeah so this here is what we built we

2384
01:38:32,480 --> 01:38:35,280
built a testbed based on teacup

2385
01:38:35,280 --> 01:38:36,080
um

2386
01:38:36,080 --> 01:38:38,080
we have two pairs of hosts to generate

2387
01:38:38,080 --> 01:38:40,320
quick traffic and we have a

2388
01:38:40,320 --> 01:38:42,840
router that performs a link

2389
01:38:42,840 --> 01:38:45,840
emulation and um

2390
01:38:45,840 --> 01:38:48,480
the experiments are controlled using uh

2391
01:38:48,480 --> 01:38:51,440
we call the tcap controller um

2392
01:38:51,440 --> 01:38:54,000
the t-cap flat platform developed by

2393
01:38:54,000 --> 01:38:56,480
kaya allows to design experiments and

2394
01:38:56,480 --> 01:38:59,679
automate tests really easily and

2395
01:38:59,679 --> 01:39:02,000
we took it and extend it

2396
01:39:02,000 --> 01:39:04,159
extended it to be able to

2397
01:39:04,159 --> 01:39:06,880
work with quick and to extract

2398
01:39:06,880 --> 01:39:12,920
statistics as well as q log trace data

2399
01:39:13,040 --> 01:39:15,840
and to emulate the satellite link we use

2400
01:39:15,840 --> 01:39:16,960
netem

2401
01:39:16,960 --> 01:39:17,760
and

2402
01:39:17,760 --> 01:39:20,000
we set up two different scenarios with

2403
01:39:20,000 --> 01:39:21,760
the satellite scenario which is our main

2404
01:39:21,760 --> 01:39:25,119
focus and the terrestrial scenario so

2405
01:39:25,119 --> 01:39:28,239
and we're using a 600 milliseconds rtt

2406
01:39:28,239 --> 01:39:29,840
for the satellite

2407
01:39:29,840 --> 01:39:33,199
link and for a terrestrial link 100

2408
01:39:33,199 --> 01:39:34,400
milliseconds

2409
01:39:34,400 --> 01:39:36,719
and we have a 20 megabits per second

2410
01:39:36,719 --> 01:39:38,960
downlink bandwidth and as you can see

2411
01:39:38,960 --> 01:39:40,960
for the satellite scenario we also

2412
01:39:40,960 --> 01:39:44,159
contemplate the asymmetric possibility

2413
01:39:44,159 --> 01:39:46,239
of having 20 on the dow link and two on

2414
01:39:46,239 --> 01:39:47,440
the app link

2415
01:39:47,440 --> 01:39:50,320
and we also look into different

2416
01:39:50,320 --> 01:39:53,040
bot buffer sizes and the packet loss

2417
01:39:53,040 --> 01:39:55,280
ratio values as well

2418
01:39:55,280 --> 01:39:56,080
um

2419
01:39:56,080 --> 01:39:56,800
we

2420
01:39:56,800 --> 01:39:57,600
use

2421
01:39:57,600 --> 01:40:00,880
two quick implementations um these are

2422
01:40:00,880 --> 01:40:02,400
ngtcp2

2423
01:40:02,400 --> 01:40:04,480
which we chose because it is the one

2424
01:40:04,480 --> 01:40:06,239
that allows us to

2425
01:40:06,239 --> 01:40:08,560
to experiment with vbr2 with the latest

2426
01:40:08,560 --> 01:40:09,520
version

2427
01:40:09,520 --> 01:40:13,119
and we also use picoquick and which has

2428
01:40:13,119 --> 01:40:14,080
been

2429
01:40:14,080 --> 01:40:16,080
shown in some studies that it performs

2430
01:40:16,080 --> 01:40:17,280
quite well

2431
01:40:17,280 --> 01:40:19,040
over satcom so this is why we also

2432
01:40:19,040 --> 01:40:20,719
wanted to look into this

2433
01:40:20,719 --> 01:40:23,840
so yeah that's it

2434
01:40:25,199 --> 01:40:28,239
so now to jump to our results um we set

2435
01:40:28,239 --> 01:40:30,719
up four different experimental scenarios

2436
01:40:30,719 --> 01:40:31,600
um

2437
01:40:31,600 --> 01:40:33,600
the first of this is the single flow

2438
01:40:33,600 --> 01:40:36,800
book download

2439
01:40:36,800 --> 01:40:39,760
um here we start the download of a very

2440
01:40:39,760 --> 01:40:42,159
large file from the client

2441
01:40:42,159 --> 01:40:45,360
and he we let the download run for two

2442
01:40:45,360 --> 01:40:47,760
minutes and then we measure

2443
01:40:47,760 --> 01:40:49,679
output on the link

2444
01:40:49,679 --> 01:40:54,239
and um yeah and this is what we saw

2445
01:40:54,239 --> 01:40:56,400
so first of all here we show you our

2446
01:40:56,400 --> 01:40:58,880
good put results um with on the

2447
01:40:58,880 --> 01:41:01,119
satellite and terrestrial scenario and

2448
01:41:01,119 --> 01:41:02,400
for different

2449
01:41:02,400 --> 01:41:05,040
buffer sizes um with the two

2450
01:41:05,040 --> 01:41:07,840
implementations that um i talked about

2451
01:41:07,840 --> 01:41:10,960
so clearly um as expected we see

2452
01:41:10,960 --> 01:41:13,199
performance being lower in the satellite

2453
01:41:13,199 --> 01:41:14,400
scenario

2454
01:41:14,400 --> 01:41:15,199
and

2455
01:41:15,199 --> 01:41:17,600
we also see how pico quick is doing

2456
01:41:17,600 --> 01:41:19,440
significantly better than

2457
01:41:19,440 --> 01:41:22,400
any tcp 2 in both use cases but

2458
01:41:22,400 --> 01:41:25,340
especially in the satellite use case

2459
01:41:25,340 --> 01:41:26,960
[Music]

2460
01:41:26,960 --> 01:41:28,000
if we

2461
01:41:28,000 --> 01:41:30,239
look into transition control differences

2462
01:41:30,239 --> 01:41:32,960
we also see how for ng tcp 2

2463
01:41:32,960 --> 01:41:36,159
um kubik is gaining some advantage for

2464
01:41:36,159 --> 01:41:39,199
higher buffer sizes and while bbr

2465
01:41:39,199 --> 01:41:40,800
versions remain

2466
01:41:40,800 --> 01:41:44,400
stable along buffer sizes

2467
01:41:44,400 --> 01:41:48,800
and we can see how bbr2 is uh giving us

2468
01:41:48,800 --> 01:41:51,679
slightly lower good put values which can

2469
01:41:51,679 --> 01:41:54,000
be expected due to the its less

2470
01:41:54,000 --> 01:41:56,800
aggressive nature

2471
01:41:57,440 --> 01:42:00,239
so then we introduced some packet laws

2472
01:42:00,239 --> 01:42:02,320
and to see their impact and mainly we

2473
01:42:02,320 --> 01:42:05,280
saw two things

2474
01:42:05,679 --> 01:42:07,520
we first saw how

2475
01:42:07,520 --> 01:42:09,679
ngtcp 2 with cubic was

2476
01:42:09,679 --> 01:42:11,760
losing a lot of performance especially

2477
01:42:11,760 --> 01:42:12,560
in the

2478
01:42:12,560 --> 01:42:15,119
long rtt satellite scenario

2479
01:42:15,119 --> 01:42:18,159
and uh also when we increased the packet

2480
01:42:18,159 --> 01:42:21,920
loss even further to one percent

2481
01:42:21,920 --> 01:42:23,840
to one percent um

2482
01:42:23,840 --> 01:42:25,920
we saw bbr2

2483
01:42:25,920 --> 01:42:30,000
actually falling behind bbr1 a lot

2484
01:42:30,000 --> 01:42:32,480
and we only see the cds in the satellite

2485
01:42:32,480 --> 01:42:34,000
scenario so

2486
01:42:34,000 --> 01:42:36,880
we believe that this mixture of long rdt

2487
01:42:36,880 --> 01:42:38,719
and high pocket loss

2488
01:42:38,719 --> 01:42:43,840
is problematic for for vbr2 here

2489
01:42:45,520 --> 01:42:46,400
so

2490
01:42:46,400 --> 01:42:48,320
finally for this scenario we also looked

2491
01:42:48,320 --> 01:42:49,520
into

2492
01:42:49,520 --> 01:42:52,400
introducing some traffic on the uplink

2493
01:42:52,400 --> 01:42:53,840
in order to see

2494
01:42:53,840 --> 01:42:56,159
how the problem of the asymmetric

2495
01:42:56,159 --> 01:42:59,840
bandwidth could have an impact here and

2496
01:42:59,840 --> 01:43:02,800
we saw we tried different combinations

2497
01:43:02,800 --> 01:43:06,800
of congestion control algorithms

2498
01:43:06,880 --> 01:43:10,880
and we saw that while ngtcp p2

2499
01:43:10,880 --> 01:43:12,960
drops in performance a lot as you can

2500
01:43:12,960 --> 01:43:14,560
see here on this

2501
01:43:14,560 --> 01:43:16,480
good results

2502
01:43:16,480 --> 01:43:19,280
that we when you use this asymmetric

2503
01:43:19,280 --> 01:43:20,639
bandwidth setup

2504
01:43:20,639 --> 01:43:23,440
and we lose a lot of performance

2505
01:43:23,440 --> 01:43:25,520
and on the other hand when we use

2506
01:43:25,520 --> 01:43:27,920
picoclick

2507
01:43:27,920 --> 01:43:30,000
we use pico quick here and we are

2508
01:43:30,000 --> 01:43:33,040
maintaining a really good performance

2509
01:43:33,040 --> 01:43:34,239
even

2510
01:43:34,239 --> 01:43:36,080
when there's congestion on the on the

2511
01:43:36,080 --> 01:43:38,960
uplink and so we looked into this and we

2512
01:43:38,960 --> 01:43:42,159
saw that picoclique is actually um using

2513
01:43:42,159 --> 01:43:44,719
a different act policy where it tries to

2514
01:43:44,719 --> 01:43:46,560
send less acts

2515
01:43:46,560 --> 01:43:49,840
like acknowledgement packets and

2516
01:43:49,840 --> 01:43:51,440
it tries to optimize this for the

2517
01:43:51,440 --> 01:43:54,239
satellite link so this is why

2518
01:43:54,239 --> 01:43:55,440
we

2519
01:43:55,440 --> 01:44:00,080
stress the relevance of these strategies

2520
01:44:01,040 --> 01:44:03,360
so then we also looked into fairness

2521
01:44:03,360 --> 01:44:05,600
of simultaneous flows

2522
01:44:05,600 --> 01:44:07,119
running down

2523
01:44:07,119 --> 01:44:10,400
different flows at the same time and

2524
01:44:10,400 --> 01:44:13,760
for this we use dense furnace index

2525
01:44:13,760 --> 01:44:16,000
to measure how fair

2526
01:44:16,000 --> 01:44:20,159
parallel flows are against each other

2527
01:44:20,159 --> 01:44:23,040
so this uh this is what we saw we saw

2528
01:44:23,040 --> 01:44:24,719
cubic um

2529
01:44:24,719 --> 01:44:26,960
maintaining really good furnace uh even

2530
01:44:26,960 --> 01:44:30,320
with 64 parallel flows however our

2531
01:44:30,320 --> 01:44:33,679
research our results showed that a bbr2

2532
01:44:33,679 --> 01:44:35,199
and bbr1

2533
01:44:35,199 --> 01:44:38,320
flows competing against each other um

2534
01:44:38,320 --> 01:44:40,159
against themselves sorry

2535
01:44:40,159 --> 01:44:40,960
i'm

2536
01:44:40,960 --> 01:44:42,880
drop a lot in fairness when we increase

2537
01:44:42,880 --> 01:44:45,520
the number of flows um especially with

2538
01:44:45,520 --> 01:44:49,040
bbr1 we do see that bbr2

2539
01:44:49,040 --> 01:44:52,000
does a bit better than but still the the

2540
01:44:52,000 --> 01:44:53,040
furnace

2541
01:44:53,040 --> 01:44:55,040
um values here

2542
01:44:55,040 --> 01:44:55,760
are

2543
01:44:55,760 --> 01:44:59,119
quite not good when as compared to kuvik

2544
01:44:59,119 --> 01:45:01,360
here

2545
01:45:01,679 --> 01:45:04,080
then we also compared condition control

2546
01:45:04,080 --> 01:45:05,840
algorithms against each other with

2547
01:45:05,840 --> 01:45:08,159
parallel flows using different condition

2548
01:45:08,159 --> 01:45:09,600
control algorithms

2549
01:45:09,600 --> 01:45:10,880
and um

2550
01:45:10,880 --> 01:45:11,840
here

2551
01:45:11,840 --> 01:45:12,960
what we mainly

2552
01:45:12,960 --> 01:45:16,000
want to address

2553
01:45:16,000 --> 01:45:20,000
is that um bbr2 with cubic is behaving

2554
01:45:20,000 --> 01:45:21,360
quite fairly

2555
01:45:21,360 --> 01:45:23,679
which is showing that even with the long

2556
01:45:23,679 --> 01:45:26,639
rtt um bbr2 and

2557
01:45:26,639 --> 01:45:28,480
has managed to improve these furnish

2558
01:45:28,480 --> 01:45:32,560
issues that bbr1 had towards cubic

2559
01:45:32,560 --> 01:45:35,520
however if you look at the blue box

2560
01:45:35,520 --> 01:45:36,960
plots on the right

2561
01:45:36,960 --> 01:45:40,000
that show bbr1 against kubic you see

2562
01:45:40,000 --> 01:45:40,719
quite

2563
01:45:40,719 --> 01:45:44,600
worse results

2564
01:45:46,000 --> 01:45:48,000
um i'm going to go a little bit faster

2565
01:45:48,000 --> 01:45:50,639
um so for the latecomer we also looked

2566
01:45:50,639 --> 01:45:52,960
into the latecomer issue where latecomer

2567
01:45:52,960 --> 01:45:54,239
flows

2568
01:45:54,239 --> 01:45:56,880
struggle to join the link and to

2569
01:45:56,880 --> 01:45:59,760
they are either too aggressive or they

2570
01:45:59,760 --> 01:46:01,119
fall behind

2571
01:46:01,119 --> 01:46:04,000
so we set up a four flow scenario where

2572
01:46:04,000 --> 01:46:06,080
different flow starts at different times

2573
01:46:06,080 --> 01:46:09,440
and they all run for for three minutes

2574
01:46:09,440 --> 01:46:10,239
and

2575
01:46:10,239 --> 01:46:13,440
yeah this is what we saw

2576
01:46:13,440 --> 01:46:16,480
so um here we show you the good put over

2577
01:46:16,480 --> 01:46:18,800
time over five minutes of four different

2578
01:46:18,800 --> 01:46:20,639
flows that start at four

2579
01:46:20,639 --> 01:46:21,440
at

2580
01:46:21,440 --> 01:46:25,440
0 40 80 and 120 seconds and we also show

2581
01:46:25,440 --> 01:46:28,719
you the rtt measured

2582
01:46:28,719 --> 01:46:30,159
there in the graph

2583
01:46:30,159 --> 01:46:33,679
and as you can see cubic light commas

2584
01:46:33,679 --> 01:46:35,440
are quite slow

2585
01:46:35,440 --> 01:46:38,159
and because of the satellite rtt

2586
01:46:38,159 --> 01:46:40,560
they take really long to converge to a

2587
01:46:40,560 --> 01:46:41,840
fair share

2588
01:46:41,840 --> 01:46:44,639
um however as you will see on the next

2589
01:46:44,639 --> 01:46:47,280
slide the picture changes a bit when we

2590
01:46:47,280 --> 01:46:49,920
use pbr

2591
01:46:50,159 --> 01:46:53,280
so when we when we use vbr here um

2592
01:46:53,280 --> 01:46:55,280
we see how

2593
01:46:55,280 --> 01:46:57,840
the latecomers join the link faster and

2594
01:46:57,840 --> 01:47:00,159
they get a fair share faster than with

2595
01:47:00,159 --> 01:47:01,199
cubic

2596
01:47:01,199 --> 01:47:03,199
and um

2597
01:47:03,199 --> 01:47:05,520
as you can see here um

2598
01:47:05,520 --> 01:47:06,560
it's also

2599
01:47:06,560 --> 01:47:08,960
pretty notable that with bbr2 these

2600
01:47:08,960 --> 01:47:11,199
latecomers are less aggressive

2601
01:47:11,199 --> 01:47:14,000
well bbr one latecomers actually

2602
01:47:14,000 --> 01:47:16,400
overtake the previous flows

2603
01:47:16,400 --> 01:47:18,960
and they make previous flows drop in

2604
01:47:18,960 --> 01:47:22,840
performance quite a lot

2605
01:47:23,199 --> 01:47:25,280
however we did see an issue here with

2606
01:47:25,280 --> 01:47:28,800
vbr2 where bbr2 after

2607
01:47:28,800 --> 01:47:31,520
the rest of the flows and it fails to

2608
01:47:31,520 --> 01:47:34,080
recover the available bandwidth

2609
01:47:34,080 --> 01:47:35,119
um

2610
01:47:35,119 --> 01:47:36,639
and we have seen that this is a

2611
01:47:36,639 --> 01:47:39,520
consequence of the long rpt because we

2612
01:47:39,520 --> 01:47:41,840
repeated these experiments with

2613
01:47:41,840 --> 01:47:45,199
lower rdt and this doesn't happen so we

2614
01:47:45,199 --> 01:47:46,639
believe this might be

2615
01:47:46,639 --> 01:47:49,600
either some problem with vbr2 for long

2616
01:47:49,600 --> 01:47:53,040
rdts or perhaps some implementation

2617
01:47:53,040 --> 01:47:54,239
issues

2618
01:47:54,239 --> 01:47:58,320
with ngtcp 2 and dbr2

2619
01:48:00,080 --> 01:48:01,600
so yeah i'm going to

2620
01:48:01,600 --> 01:48:03,840
jump to the discussion

2621
01:48:03,840 --> 01:48:06,480
there was one last scenario to look into

2622
01:48:06,480 --> 01:48:07,280
um

2623
01:48:07,280 --> 01:48:08,800
if you're interested into it you can

2624
01:48:08,800 --> 01:48:10,719
read the paper or we can talk about it

2625
01:48:10,719 --> 01:48:12,719
later but i want to be a bit quicker

2626
01:48:12,719 --> 01:48:13,679
here

2627
01:48:13,679 --> 01:48:15,199
so um

2628
01:48:15,199 --> 01:48:16,000
to

2629
01:48:16,000 --> 01:48:16,800
to

2630
01:48:16,800 --> 01:48:20,080
give a general idea of what we

2631
01:48:20,080 --> 01:48:20,880
can

2632
01:48:20,880 --> 01:48:23,920
conclude from this study

2633
01:48:23,920 --> 01:48:27,679
um we have seen that bbr can provide

2634
01:48:27,679 --> 01:48:30,320
better performance under los links

2635
01:48:30,320 --> 01:48:31,199
um

2636
01:48:31,199 --> 01:48:34,560
and while bbr1 is the one that's giving

2637
01:48:34,560 --> 01:48:36,400
us the best performance

2638
01:48:36,400 --> 01:48:39,199
um bbr2 is doing a great job at

2639
01:48:39,199 --> 01:48:41,360
improving fairness

2640
01:48:41,360 --> 01:48:44,880
um towards kubic for better coexistence

2641
01:48:44,880 --> 01:48:47,600
on the internet and better behavior

2642
01:48:47,600 --> 01:48:49,600
however there are some problems that

2643
01:48:49,600 --> 01:48:52,159
bbr2 has to face for these satellite

2644
01:48:52,159 --> 01:48:53,280
networks

2645
01:48:53,280 --> 01:48:54,239
um

2646
01:48:54,239 --> 01:48:56,560
and yeah we believe this needs to be

2647
01:48:56,560 --> 01:48:58,840
further looked

2648
01:48:58,840 --> 01:49:03,520
into we also saw uh really uh how

2649
01:49:03,520 --> 01:49:05,760
this problem with bandwidth asymmetry

2650
01:49:05,760 --> 01:49:07,040
and axe

2651
01:49:07,040 --> 01:49:09,280
arc frames on the return path can be a

2652
01:49:09,280 --> 01:49:11,600
problem because we were seeing any tcp

2653
01:49:11,600 --> 01:49:12,639
to

2654
01:49:12,639 --> 01:49:14,800
give having problems to deal with this

2655
01:49:14,800 --> 01:49:18,480
and uh we this is why we stress the need

2656
01:49:18,480 --> 01:49:21,360
to look into act policies and satellite

2657
01:49:21,360 --> 01:49:23,679
optimized act policies um

2658
01:49:23,679 --> 01:49:25,280
that try to

2659
01:49:25,280 --> 01:49:28,800
negotiate um strategies with

2660
01:49:28,800 --> 01:49:31,280
that send less acts and

2661
01:49:31,280 --> 01:49:35,519
try to avoid these these issues

2662
01:49:38,320 --> 01:49:40,639
so to summarize even though bbr seems

2663
01:49:40,639 --> 01:49:44,080
like a good candidate for some reasons

2664
01:49:44,080 --> 01:49:45,280
there is some

2665
01:49:45,280 --> 01:49:47,280
some stuff to work into here

2666
01:49:47,280 --> 01:49:49,599
um and as i said

2667
01:49:49,599 --> 01:49:52,320
bandwidth asymmetry is proving to be a

2668
01:49:52,320 --> 01:49:53,599
great challenge

2669
01:49:53,599 --> 01:49:54,400
um

2670
01:49:54,400 --> 01:49:56,880
for satellite links and um

2671
01:49:56,880 --> 01:49:59,040
we also we're also surprised to see pico

2672
01:49:59,040 --> 01:50:01,599
quick um doing so well with their

2673
01:50:01,599 --> 01:50:04,320
satellite optimizations and we believe

2674
01:50:04,320 --> 01:50:07,280
um looking into these strategies that

2675
01:50:07,280 --> 01:50:08,320
they use

2676
01:50:08,320 --> 01:50:11,520
might be clue for quick overs outcome um

2677
01:50:11,520 --> 01:50:14,000
in the future

2678
01:50:14,000 --> 01:50:15,840
thank you this is great well presented

2679
01:50:15,840 --> 01:50:17,520
and thank you for accelerating towards

2680
01:50:17,520 --> 01:50:19,679
the end and covering some time

2681
01:50:19,679 --> 01:50:22,480
um i think what i would like to do is uh

2682
01:50:22,480 --> 01:50:25,360
just move on but encourage you please to

2683
01:50:25,360 --> 01:50:26,880
check the chat channel because i think

2684
01:50:26,880 --> 01:50:28,400
you've had some good engagement and a

2685
01:50:28,400 --> 01:50:30,159
couple of thoughts of questions

2686
01:50:30,159 --> 01:50:32,560
um there are certainly a couple of

2687
01:50:32,560 --> 01:50:33,679
things in here that are that are

2688
01:50:33,679 --> 01:50:37,040
counter-intuitive and and i think the um

2689
01:50:37,040 --> 01:50:39,199
observation about act patterns is is

2690
01:50:39,199 --> 01:50:41,599
particularly novel so if people in the

2691
01:50:41,599 --> 01:50:42,880
quick working group are not in the room

2692
01:50:42,880 --> 01:50:44,800
you might want to reach out to them

2693
01:50:44,800 --> 01:50:46,480
lucas for example who just gave the

2694
01:50:46,480 --> 01:50:47,760
keynote uh

2695
01:50:47,760 --> 01:50:49,280
and and might have something to offer

2696
01:50:49,280 --> 01:50:50,400
there

2697
01:50:50,400 --> 01:50:52,639
okay okay thank you thank you very much

2698
01:50:52,639 --> 01:50:54,000
this was great

2699
01:50:54,000 --> 01:50:56,080
thank you

2700
01:50:56,080 --> 01:50:58,800
moving on

2701
01:50:58,800 --> 01:51:03,199
to our last short presentation

2702
01:51:03,199 --> 01:51:04,159
uh

2703
01:51:04,159 --> 01:51:07,480
let's see

2704
01:51:11,760 --> 01:51:15,840
nushin are you in the room

2705
01:51:16,000 --> 01:51:18,000
um yes hi

2706
01:51:18,000 --> 01:51:21,599
control is yours take it away

2707
01:51:21,599 --> 01:51:22,400
uh

2708
01:51:22,400 --> 01:51:23,599
yes yeah

2709
01:51:23,599 --> 01:51:25,679
hi everyone thanks for joining this

2710
01:51:25,679 --> 01:51:28,639
presentation i'm lucie nervous i'm a phd

2711
01:51:28,639 --> 01:51:31,040
student at the university of alberta and

2712
01:51:31,040 --> 01:51:33,840
uh for this project i worked with my

2713
01:51:33,840 --> 01:51:36,400
supervisor dr paulu

2714
01:51:36,400 --> 01:51:39,280
and the project i started priority ever

2715
01:51:39,280 --> 01:51:43,040
forward or correction for http

2716
01:51:43,599 --> 01:51:45,760
um the thing is that when the http

2717
01:51:45,760 --> 01:51:49,040
client asks for a web page there is a

2718
01:51:49,040 --> 01:51:51,119
list of web resources that need to be

2719
01:51:51,119 --> 01:51:52,320
downloaded

2720
01:51:52,320 --> 01:51:54,639
but not all resources are the same for

2721
01:51:54,639 --> 01:51:56,560
example we have images that can be

2722
01:51:56,560 --> 01:51:58,880
rendered incrementally

2723
01:51:58,880 --> 01:52:00,719
at the client side

2724
01:52:00,719 --> 01:52:02,560
so we can use the multi-streaming or

2725
01:52:02,560 --> 01:52:04,880
multiplexing of a quick to avoid the

2726
01:52:04,880 --> 01:52:07,440
headline blocking problem uh at an

2727
01:52:07,440 --> 01:52:10,000
application layer in the case of paco

2728
01:52:10,000 --> 01:52:12,320
loss but there are also other types of

2729
01:52:12,320 --> 01:52:14,639
web resources like html css and

2730
01:52:14,639 --> 01:52:16,800
javascript that need to be downloaded

2731
01:52:16,800 --> 01:52:18,080
completely

2732
01:52:18,080 --> 01:52:20,400
before getting used so

2733
01:52:20,400 --> 01:52:22,800
we call them high priority resources and

2734
01:52:22,800 --> 01:52:25,520
uh in this project we have the idea of

2735
01:52:25,520 --> 01:52:27,679
using forward or connection

2736
01:52:27,679 --> 01:52:30,480
for these high priority resources over

2737
01:52:30,480 --> 01:52:32,000
http 3e

2738
01:52:32,000 --> 01:52:33,760
because in the case of packet loss the

2739
01:52:33,760 --> 01:52:35,840
client needs to wait for the

2740
01:52:35,840 --> 01:52:38,239
retransmission of the last parts as a

2741
01:52:38,239 --> 01:52:40,880
function of rtt but by using further

2742
01:52:40,880 --> 01:52:43,199
collection we can recover sooner

2743
01:52:43,199 --> 01:52:45,280
and we can reduce page load time

2744
01:52:45,280 --> 01:52:46,719
hopefully

2745
01:52:46,719 --> 01:52:48,960
the thing is that to implement this idea

2746
01:52:48,960 --> 01:52:51,520
we need the priority of different

2747
01:52:51,520 --> 01:52:53,760
resources at the server side or the

2748
01:52:53,760 --> 01:52:55,040
sender side

2749
01:52:55,040 --> 01:52:58,000
and we previously had a complicated

2750
01:52:58,000 --> 01:53:00,320
dependency tree prioritization scheme

2751
01:53:00,320 --> 01:53:01,760
for http

2752
01:53:01,760 --> 01:53:04,000
but because of its complexity it hasn't

2753
01:53:04,000 --> 01:53:06,800
been widely used but recently with the

2754
01:53:06,800 --> 01:53:08,960
extensible prioritization scheme the

2755
01:53:08,960 --> 01:53:12,400
client can set the priority scores of

2756
01:53:12,400 --> 01:53:14,400
web resources so the server would know

2757
01:53:14,400 --> 01:53:16,719
which ones are higher priority and then

2758
01:53:16,719 --> 01:53:18,320
we can use forward or collection for

2759
01:53:18,320 --> 01:53:20,480
them and actually for the forward or

2760
01:53:20,480 --> 01:53:22,639
collection part over quick it's not a

2761
01:53:22,639 --> 01:53:24,960
new thing a quick have folder connection

2762
01:53:24,960 --> 01:53:27,520
but for our data initially and because

2763
01:53:27,520 --> 01:53:30,320
of the overhead of order correction it

2764
01:53:30,320 --> 01:53:33,280
was dropped but the idea here is that we

2765
01:53:33,280 --> 01:53:34,800
can use them only for higher priority

2766
01:53:34,800 --> 01:53:37,360
resources

2767
01:53:38,159 --> 01:53:40,639
and for the paper that we submitted to

2768
01:53:40,639 --> 01:53:43,599
this journal we have the numbers um over

2769
01:53:43,599 --> 01:53:45,520
udp-based there's a transfer of udt

2770
01:53:45,520 --> 01:53:48,000
protocol and we use two-dimensional x or

2771
01:53:48,000 --> 01:53:50,560
baseboard or collection but after we got

2772
01:53:50,560 --> 01:53:52,320
positive reviews from the workshop we

2773
01:53:52,320 --> 01:53:53,920
were encouraged to implement this id

2774
01:53:53,920 --> 01:53:57,280
over quick and we have chosen ngtcp2 as

2775
01:53:57,280 --> 01:53:59,040
one of the open source implementations

2776
01:53:59,040 --> 01:54:00,560
out there because it

2777
01:54:00,560 --> 01:54:03,280
includes the recent extensions to quick

2778
01:54:03,280 --> 01:54:05,199
like the extensible prioritization

2779
01:54:05,199 --> 01:54:07,360
scheme that we need for this project

2780
01:54:07,360 --> 01:54:10,800
and to further simplify the task we

2781
01:54:10,800 --> 01:54:13,440
pre-computed the repair data and wrote

2782
01:54:13,440 --> 01:54:16,400
them in a file at the server side so in

2783
01:54:16,400 --> 01:54:18,239
the scenario that we want to use for the

2784
01:54:18,239 --> 01:54:20,000
collection for hybrid resources the

2785
01:54:20,000 --> 01:54:22,239
client need to ask for that as a web

2786
01:54:22,239 --> 01:54:24,800
resource as well to be able to use them

2787
01:54:24,800 --> 01:54:28,159
for recovering last quick frames

2788
01:54:28,159 --> 01:54:31,040
and uh for the portal collection part we

2789
01:54:31,040 --> 01:54:33,360
use the open fetch open source library

2790
01:54:33,360 --> 01:54:35,280
that has the implementation of rich

2791
01:54:35,280 --> 01:54:37,679
solomon and ldpc

2792
01:54:37,679 --> 01:54:40,560
encoders and decoders and we use we use

2793
01:54:40,560 --> 01:54:44,560
an emulated testbed over emulab and

2794
01:54:44,560 --> 01:54:46,719
we use netemtc tool to add delay and

2795
01:54:46,719 --> 01:54:48,080
packet loss

2796
01:54:48,080 --> 01:54:51,119
um to the link

2797
01:54:51,119 --> 01:54:55,599
here are some early results um of uh

2798
01:54:55,599 --> 01:54:58,800
setting um 100 milliseconds for the rtt

2799
01:54:58,800 --> 01:55:01,040
and 10 percent 40 packet loss and these

2800
01:55:01,040 --> 01:55:03,280
two diagrams show the

2801
01:55:03,280 --> 01:55:05,679
arrival order of quick frames at http

2802
01:55:05,679 --> 01:55:07,599
client without forward or correction and

2803
01:55:07,599 --> 01:55:10,080
with forward location as a workload we

2804
01:55:10,080 --> 01:55:12,880
had a very simple work load up only one

2805
01:55:12,880 --> 01:55:15,520
high priority resource uh the green one

2806
01:55:15,520 --> 01:55:18,080
and then we computed the repair data for

2807
01:55:18,080 --> 01:55:20,400
this high priority resource we got

2808
01:55:20,400 --> 01:55:24,080
a file 1.8 kilobyte yellow

2809
01:55:24,080 --> 01:55:25,119
file

2810
01:55:25,119 --> 01:55:26,960
and then we also had another web

2811
01:55:26,960 --> 01:55:29,280
resource the low priority incremental

2812
01:55:29,280 --> 01:55:31,840
resource the pink one with 26.5

2813
01:55:31,840 --> 01:55:33,199
kilobytes

2814
01:55:33,199 --> 01:55:35,280
and the upper diagram showed what would

2815
01:55:35,280 --> 01:55:39,360
happen um at the client sand when we do

2816
01:55:39,360 --> 01:55:41,199
not use forward or correction for the

2817
01:55:41,199 --> 01:55:42,880
high priority resource

2818
01:55:42,880 --> 01:55:44,480
um we

2819
01:55:44,480 --> 01:55:46,639
have uh the quick frames for the high

2820
01:55:46,639 --> 01:55:48,560
priority the green bond and because we

2821
01:55:48,560 --> 01:55:50,480
have packet loss in the network one of

2822
01:55:50,480 --> 01:55:53,679
the quick uh frames the green one uh got

2823
01:55:53,679 --> 01:55:57,040
lost so we need to uh wait for 103

2824
01:55:57,040 --> 01:55:59,199
milliseconds uh to receive the

2825
01:55:59,199 --> 01:56:01,679
retransmission of that uh last quick

2826
01:56:01,679 --> 01:56:04,239
frames and we also could finish the

2827
01:56:04,239 --> 01:56:07,840
whole job at uh 320 millisecond but with

2828
01:56:07,840 --> 01:56:09,599
forward or correction the client needs

2829
01:56:09,599 --> 01:56:12,560
to ask for the high priority resource

2830
01:56:12,560 --> 01:56:13,840
the repair

2831
01:56:13,840 --> 01:56:16,719
data and also the ping resource and the

2832
01:56:16,719 --> 01:56:19,440
thing is that we could recover

2833
01:56:19,440 --> 01:56:22,480
the um two last frames of the green high

2834
01:56:22,480 --> 01:56:24,480
priority resource at seven milliseconds

2835
01:56:24,480 --> 01:56:27,199
using two redundant data

2836
01:56:27,199 --> 01:56:28,400
quick frames

2837
01:56:28,400 --> 01:56:31,360
so uh while if we wanted to wait for the

2838
01:56:31,360 --> 01:56:34,480
transmission we need to wait for 109

2839
01:56:34,480 --> 01:56:36,239
millisecond and we could finish the

2840
01:56:36,239 --> 01:56:40,000
whole job um at 312. and the improvement

2841
01:56:40,000 --> 01:56:42,960
is 7 milliseconds versus 103

2842
01:56:42,960 --> 01:56:46,320
milliseconds without forward lock action

2843
01:56:46,320 --> 01:56:48,560
and as a summary uh we said that we can

2844
01:56:48,560 --> 01:56:50,159
use resource prioritization as the

2845
01:56:50,159 --> 01:56:52,560
server side to use a forward or

2846
01:56:52,560 --> 01:56:54,000
character only for high priority

2847
01:56:54,000 --> 01:56:57,280
resources uh and this way we can

2848
01:56:57,280 --> 01:56:59,840
reduce page load time and uh as the

2849
01:56:59,840 --> 01:57:02,400
future work we are trying to improve our

2850
01:57:02,400 --> 01:57:04,560
implementation real quick and we need to

2851
01:57:04,560 --> 01:57:07,679
study the condition control impacts of

2852
01:57:07,679 --> 01:57:08,840
using forward or

2853
01:57:08,840 --> 01:57:11,440
collection thank you very much for

2854
01:57:11,440 --> 01:57:13,520
listening and i would be happy if

2855
01:57:13,520 --> 01:57:17,280
there's any questions or suggestions

2856
01:57:18,880 --> 01:57:21,599
thank you very much nasheen

2857
01:57:21,599 --> 01:57:24,480
any questions at the mic

2858
01:57:24,480 --> 01:57:26,159
i think the the only question i would

2859
01:57:26,159 --> 01:57:29,599
raise here is the is the 10 packet loss

2860
01:57:29,599 --> 01:57:30,800
yeah

2861
01:57:30,800 --> 01:57:32,719
the only reason that we chose

2862
01:57:32,719 --> 01:57:35,599
this high our person is to see

2863
01:57:35,599 --> 01:57:37,440
the impact on this

2864
01:57:37,440 --> 01:57:40,000
small size low uh

2865
01:57:40,000 --> 01:57:42,080
high priority resource because we had

2866
01:57:42,080 --> 01:57:43,040
only

2867
01:57:43,040 --> 01:57:44,880
seven quick frames here and we wanted to

2868
01:57:44,880 --> 01:57:46,480
make sure that at least one of them got

2869
01:57:46,480 --> 01:57:49,119
lost but of course if we have a large

2870
01:57:49,119 --> 01:57:52,480
file we can reduce it um to for example

2871
01:57:52,480 --> 01:57:55,040
one percent and you could see the impact

2872
01:57:55,040 --> 01:57:57,280
that's okay yeah great thank you very

2873
01:57:57,280 --> 01:57:59,520
much uh only saying so because it's hot

2874
01:57:59,520 --> 01:58:01,280
it's i don't know that anyone is seen

2875
01:58:01,280 --> 01:58:03,280
really at that high pack but i i get i

2876
01:58:03,280 --> 01:58:04,560
see the reasoning thank you very much

2877
01:58:04,560 --> 01:58:07,599
for the presentation thank you um let me

2878
01:58:07,599 --> 01:58:10,960
check the chat channel quickly

2879
01:58:11,040 --> 01:58:13,520
uh i think we are in the clear thanks

2880
01:58:13,520 --> 01:58:14,880
nasheen and thanks everybody for

2881
01:58:14,880 --> 01:58:17,360
attending please return around uh 3 p.m

2882
01:58:17,360 --> 01:58:20,159
where we have an excellent set of talks

2883
01:58:20,159 --> 01:58:21,840
waiting to be given something new for

2884
01:58:21,840 --> 01:58:24,239
the irtf thanks everybody for joining

2885
01:58:24,239 --> 01:58:27,480
see you soon

2886
01:58:56,080 --> 01:58:58,159
you

